2024-04-28 20:36:04 [INFO] [task_scheduler.cc:160] Initializing Task #27: "fused_nn_global_avg_pool2d"
2024-04-28 20:36:04 [INFO] [task_scheduler.cc:35] 
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(16), T.int64(7), T.int64(7), T.int64(32)), "float32"), adaptive_pool_avg: T.Buffer((T.int64(1), T.int64(16), T.int64(1), T.int64(1), T.int64(32)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        adaptive_pool_sum = T.alloc_buffer((T.int64(1), T.int64(16), T.int64(1), T.int64(1), T.int64(32)))
        for ax0, ax1, ax2, ax3, ax4, rv0, rv1 in T.grid(T.int64(1), T.int64(16), T.int64(1), T.int64(1), T.int64(32), T.int64(7), T.int64(7)):
            with T.block("adaptive_pool_sum"):
                v_ax0, v_ax1, v_ax2, v_ax3, v_ax4, v_rv0, v_rv1 = T.axis.remap("SSSSSRR", [ax0, ax1, ax2, ax3, ax4, rv0, rv1])
                T.reads(p0[v_ax0, v_ax1, v_ax2 * T.int64(7) + v_rv0, v_ax3 * T.int64(7) + v_rv1, v_ax4])
                T.writes(adaptive_pool_sum[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                with T.init():
                    adaptive_pool_sum[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.float32(0)
                adaptive_pool_sum[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = adaptive_pool_sum[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] + p0[v_ax0, v_ax1, v_ax2 * T.int64(7) + v_rv0, v_ax3 * T.int64(7) + v_rv1, v_ax4]
        for ax0, ax1, ax2, ax3, ax4 in T.grid(T.int64(1), T.int64(16), T.int64(1), T.int64(1), T.int64(32)):
            with T.block("adaptive_pool_avg"):
                v_ax0, v_ax1, v_ax2, v_ax3, v_ax4 = T.axis.remap("SSSSS", [ax0, ax1, ax2, ax3, ax4])
                T.reads(adaptive_pool_sum[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                T.writes(adaptive_pool_avg[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                T.block_attr({"schedule_rule": "meta_schedule.adaptive_pool_avg"})
                adaptive_pool_avg[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = adaptive_pool_sum[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] * T.float32(0.020408163265306121)
2024-04-28 20:36:04 [INFO] [task_scheduler.cc:164] Total 3 design space(s) generated
2024-04-28 20:36:04 [INFO] [task_scheduler.cc:170] Design space #0:
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(16), T.int64(7), T.int64(7), T.int64(32)), "float32"), adaptive_pool_avg: T.Buffer((T.int64(1), T.int64(16), T.int64(1), T.int64(1), T.int64(32)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        with T.block("root"):
            T.reads()
            T.writes()
            T.block_attr({"meta_schedule.parallel": 768, "meta_schedule.unroll_explicit": 16, "meta_schedule.vectorize": 64})
            adaptive_pool_sum = T.alloc_buffer((T.int64(1), T.int64(16), T.int64(1), T.int64(1), T.int64(32)))
            adaptive_pool_sum_rf = T.alloc_buffer((T.int64(1), T.int64(16), T.int64(1), T.int64(1), T.int64(32), T.int64(7)))
            for ax0, ax1 in T.grid(T.int64(1), T.int64(16)):
                for ax0_1, ax1_1, ax2, ax3, ax4, ax5, ax6 in T.grid(T.int64(7), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(32), T.int64(7)):
                    with T.block("adaptive_pool_sum_rf"):
                        vrv0_rv1_fused_0, v_ax0 = T.axis.remap("SS", [ax0_1, ax1_1])
                        v_ax1 = T.axis.spatial(T.int64(16), ax1 + ax2)
                        v_ax2, v_ax3, v_ax4, vrv0_rv1_fused_1 = T.axis.remap("SSSR", [ax3, ax4, ax5, ax6])
                        T.reads(p0[v_ax0, v_ax1, v_ax2 * T.int64(7) + (vrv0_rv1_fused_0 * T.int64(7) + vrv0_rv1_fused_1) // T.int64(7), v_ax3 * T.int64(7) + (vrv0_rv1_fused_0 * T.int64(7) + vrv0_rv1_fused_1) % T.int64(7), v_ax4])
                        T.writes(adaptive_pool_sum_rf[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4, vrv0_rv1_fused_0])
                        with T.init():
                            adaptive_pool_sum_rf[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4, vrv0_rv1_fused_0] = T.float32(0)
                        adaptive_pool_sum_rf[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4, vrv0_rv1_fused_0] = adaptive_pool_sum_rf[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4, vrv0_rv1_fused_0] + p0[v_ax0, v_ax1, v_ax2 * T.int64(7) + (vrv0_rv1_fused_0 * T.int64(7) + vrv0_rv1_fused_1) // T.int64(7), v_ax3 * T.int64(7) + (vrv0_rv1_fused_0 * T.int64(7) + vrv0_rv1_fused_1) % T.int64(7), v_ax4]
                for ax0_1, ax1_1, ax2, ax3, ax4, ax5 in T.grid(T.int64(7), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(32)):
                    with T.block("adaptive_pool_sum"):
                        vrv0_rv1_fused_0, v_ax0 = T.axis.remap("RS", [ax0_1, ax1_1])
                        v_ax1 = T.axis.spatial(T.int64(16), ax1 + ax2)
                        v_ax2, v_ax3, v_ax4 = T.axis.remap("SSS", [ax3, ax4, ax5])
                        T.reads(adaptive_pool_sum_rf[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4, vrv0_rv1_fused_0])
                        T.writes(adaptive_pool_sum[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                        with T.init():
                            adaptive_pool_sum[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.float32(0)
                        adaptive_pool_sum[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = adaptive_pool_sum[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] + adaptive_pool_sum_rf[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4, vrv0_rv1_fused_0]
                for ax2, ax3, ax4 in T.grid(T.int64(1), T.int64(1), T.int64(32)):
                    with T.block("adaptive_pool_avg"):
                        v_ax0, v_ax1, v_ax2, v_ax3, v_ax4 = T.axis.remap("SSSSS", [ax0, ax1, ax2, ax3, ax4])
                        T.reads(adaptive_pool_sum[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                        T.writes(adaptive_pool_avg[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                        adaptive_pool_avg[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = adaptive_pool_sum[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] * T.float32(0.020408163265306121)
b0 = sch.get_block(name="adaptive_pool_sum", func_name="main")
b1 = sch.get_block(name="adaptive_pool_avg", func_name="main")
b2 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b1, ann_key="schedule_rule")
l3, l4, l5, l6, l7, l8, l9 = sch.get_loops(block=b0)
l10 = sch.fuse(l8, l9, preserve_unit_iters=True)
v11, v12 = sch.sample_perfect_tile(loop=l10, n=2, max_innermost_factor=64, decision=[7, 7])
l13, l14 = sch.split(loop=l10, factors=[v11, v12], preserve_unit_iters=True)
b15 = sch.rfactor(loop=l13, factor_axis=5)
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.random_compute_producer", ann_val=1)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.vectorize", ann_val=64)
v16 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=1)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.unroll_explicit", ann_val=v16)
b17, = sch.get_producers(block=b0)
sch.unannotate(block_or_loop=b0, ann_key="meta_schedule.random_compute_producer")
l18 = sch.sample_compute_location(block=b0, decision=1)
sch.compute_at(block=b0, loop=l18, preserve_unit_loops=True, index=-1)
l19 = sch.sample_compute_location(block=b17, decision=1)
sch.compute_at(block=b17, loop=l19, preserve_unit_loops=True, index=-1)
2024-04-28 20:36:04 [INFO] [task_scheduler.cc:170] Design space #1:
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(16), T.int64(7), T.int64(7), T.int64(32)), "float32"), adaptive_pool_avg: T.Buffer((T.int64(1), T.int64(16), T.int64(1), T.int64(1), T.int64(32)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        with T.block("root"):
            T.reads()
            T.writes()
            T.block_attr({"meta_schedule.parallel": 768, "meta_schedule.unroll_explicit": 64, "meta_schedule.vectorize": 64})
            adaptive_pool_sum = T.alloc_buffer((T.int64(1), T.int64(16), T.int64(1), T.int64(1), T.int64(32)))
            adaptive_pool_sum_rf = T.alloc_buffer((T.int64(1), T.int64(16), T.int64(1), T.int64(1), T.int64(32), T.int64(7)))
            for ax0, ax1, ax2, ax3, ax4, rv0_rv1_fused_0, rv0_rv1_fused_1 in T.grid(T.int64(1), T.int64(16), T.int64(1), T.int64(1), T.int64(32), T.int64(7), T.int64(7)):
                with T.block("adaptive_pool_sum_rf"):
                    vrv0_rv1_fused_1, v_ax0, v_ax1, v_ax2, v_ax3, v_ax4, vrv0_rv1_fused_0 = T.axis.remap("SSSSSSR", [rv0_rv1_fused_1, ax0, ax1, ax2, ax3, ax4, rv0_rv1_fused_0])
                    T.reads(p0[v_ax0, v_ax1, v_ax2 * T.int64(7) + (vrv0_rv1_fused_0 * T.int64(7) + vrv0_rv1_fused_1) // T.int64(7), v_ax3 * T.int64(7) + (vrv0_rv1_fused_0 * T.int64(7) + vrv0_rv1_fused_1) % T.int64(7), v_ax4])
                    T.writes(adaptive_pool_sum_rf[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4, vrv0_rv1_fused_1])
                    with T.init():
                        adaptive_pool_sum_rf[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4, vrv0_rv1_fused_1] = T.float32(0)
                    adaptive_pool_sum_rf[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4, vrv0_rv1_fused_1] = adaptive_pool_sum_rf[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4, vrv0_rv1_fused_1] + p0[v_ax0, v_ax1, v_ax2 * T.int64(7) + (vrv0_rv1_fused_0 * T.int64(7) + vrv0_rv1_fused_1) // T.int64(7), v_ax3 * T.int64(7) + (vrv0_rv1_fused_0 * T.int64(7) + vrv0_rv1_fused_1) % T.int64(7), v_ax4]
            for ax0, ax1, ax2, ax3, ax4, rv0_rv1_fused_1 in T.grid(T.int64(1), T.int64(16), T.int64(1), T.int64(1), T.int64(32), T.int64(7)):
                with T.block("adaptive_pool_sum"):
                    vrv0_rv1_fused_1, v_ax0, v_ax1, v_ax2, v_ax3, v_ax4 = T.axis.remap("RSSSSS", [rv0_rv1_fused_1, ax0, ax1, ax2, ax3, ax4])
                    T.reads(adaptive_pool_sum_rf[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4, vrv0_rv1_fused_1])
                    T.writes(adaptive_pool_sum[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                    with T.init():
                        adaptive_pool_sum[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.float32(0)
                    adaptive_pool_sum[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = adaptive_pool_sum[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] + adaptive_pool_sum_rf[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4, vrv0_rv1_fused_1]
            for ax0, ax1, ax2, ax3, ax4 in T.grid(T.int64(1), T.int64(16), T.int64(1), T.int64(1), T.int64(32)):
                with T.block("adaptive_pool_avg"):
                    v_ax0, v_ax1, v_ax2, v_ax3, v_ax4 = T.axis.remap("SSSSS", [ax0, ax1, ax2, ax3, ax4])
                    T.reads(adaptive_pool_sum[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                    T.writes(adaptive_pool_avg[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                    adaptive_pool_avg[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = adaptive_pool_sum[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] * T.float32(0.020408163265306121)
b0 = sch.get_block(name="adaptive_pool_sum", func_name="main")
b1 = sch.get_block(name="adaptive_pool_avg", func_name="main")
b2 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b1, ann_key="schedule_rule")
l3, l4, l5, l6, l7, l8, l9 = sch.get_loops(block=b0)
l10 = sch.fuse(l8, l9, preserve_unit_iters=True)
v11, v12 = sch.sample_perfect_tile(loop=l10, n=2, max_innermost_factor=64, decision=[7, 7])
l13, l14 = sch.split(loop=l10, factors=[v11, v12], preserve_unit_iters=True)
b15 = sch.rfactor(loop=l14, factor_axis=5)
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.random_compute_producer", ann_val=1)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.vectorize", ann_val=64)
v16 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=2)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.unroll_explicit", ann_val=v16)
b17, = sch.get_producers(block=b0)
sch.unannotate(block_or_loop=b0, ann_key="meta_schedule.random_compute_producer")
l18 = sch.sample_compute_location(block=b0, decision=-1)
sch.compute_at(block=b0, loop=l18, preserve_unit_loops=True, index=-1)
l19 = sch.sample_compute_location(block=b17, decision=-1)
sch.compute_at(block=b17, loop=l19, preserve_unit_loops=True, index=-1)
2024-04-28 20:36:04 [INFO] [task_scheduler.cc:170] Design space #2:
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(16), T.int64(7), T.int64(7), T.int64(32)), "float32"), adaptive_pool_avg: T.Buffer((T.int64(1), T.int64(16), T.int64(1), T.int64(1), T.int64(32)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        with T.block("root"):
            T.reads()
            T.writes()
            T.block_attr({"meta_schedule.parallel": 768, "meta_schedule.unroll_explicit": 16, "meta_schedule.vectorize": 64})
            adaptive_pool_sum = T.alloc_buffer((T.int64(1), T.int64(16), T.int64(1), T.int64(1), T.int64(32)))
            for ax0, ax1, ax2, ax3, ax4 in T.grid(T.int64(1), T.int64(16), T.int64(1), T.int64(1), T.int64(32)):
                for ax0_1, ax1_1, ax2_1, ax3_1, ax4_1, ax5, ax6 in T.grid(T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(7), T.int64(7)):
                    with T.block("adaptive_pool_sum"):
                        v_ax0 = T.axis.spatial(T.int64(1), ax0_1)
                        v_ax1 = T.axis.spatial(T.int64(16), ax1 + ax1_1)
                        v_ax2, v_ax3 = T.axis.remap("SS", [ax2_1, ax3_1])
                        v_ax4 = T.axis.spatial(T.int64(32), ax4 + ax4_1)
                        v_rv0, v_rv1 = T.axis.remap("RR", [ax5, ax6])
                        T.reads(p0[v_ax0, v_ax1, v_ax2 * T.int64(7) + v_rv0, v_ax3 * T.int64(7) + v_rv1, v_ax4])
                        T.writes(adaptive_pool_sum[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                        with T.init():
                            adaptive_pool_sum[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.float32(0)
                        adaptive_pool_sum[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = adaptive_pool_sum[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] + p0[v_ax0, v_ax1, v_ax2 * T.int64(7) + v_rv0, v_ax3 * T.int64(7) + v_rv1, v_ax4]
                with T.block("adaptive_pool_avg"):
                    v_ax0, v_ax1, v_ax2, v_ax3, v_ax4 = T.axis.remap("SSSSS", [ax0, ax1, ax2, ax3, ax4])
                    T.reads(adaptive_pool_sum[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                    T.writes(adaptive_pool_avg[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                    adaptive_pool_avg[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = adaptive_pool_sum[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] * T.float32(0.020408163265306121)
b0 = sch.get_block(name="adaptive_pool_sum", func_name="main")
b1 = sch.get_block(name="adaptive_pool_avg", func_name="main")
b2 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b1, ann_key="schedule_rule")
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.vectorize", ann_val=64)
v3 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=1)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.unroll_explicit", ann_val=v3)
l4 = sch.sample_compute_location(block=b0, decision=4)
sch.compute_at(block=b0, loop=l4, preserve_unit_loops=True, index=-1)
2024-04-28 21:07:53 [INFO] [evolutionary_search.cc:713] Generating candidates......
2024-04-28 21:07:53 [INFO] [evolutionary_search.cc:715] Picked top 0 candidate(s) from database
2024-04-28 21:07:55 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x30954f8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x66700e8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x3fc9878)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x31cb938)]: 0 failure(s)
2024-04-28 21:07:55 [INFO] [evolutionary_search.cc:723] Sampled 512 candidate(s)
2024-04-28 21:07:57 [INFO] [evolutionary_search.cc:621] Evolve iter #0 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x30954f8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x66700e8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x3fc9878)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x31cb938)]: 0 failure(s)
2024-04-28 21:08:00 [INFO] [evolutionary_search.cc:621] Evolve iter #1 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x30954f8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x66700e8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x3fc9878)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x31cb938)]: 0 failure(s)
2024-04-28 21:08:03 [INFO] [evolutionary_search.cc:621] Evolve iter #2 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x30954f8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x66700e8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x3fc9878)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x31cb938)]: 0 failure(s)
2024-04-28 21:08:05 [INFO] [evolutionary_search.cc:621] Evolve iter #3 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x30954f8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x66700e8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x3fc9878)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x31cb938)]: 0 failure(s)
2024-04-28 21:08:06 [INFO] [evolutionary_search.cc:649] Scores of the best 64 candidates:
[1 : 16]:	0.9935  0.9880  0.9874  0.9851  0.9847  0.9846  0.9768  0.9659  0.9605  0.9599  0.9576  0.9575  0.9570  0.9535  0.9493  0.9427
[17 : 32]:	0.9425  0.9387  0.9312  0.9296  0.9192  0.9132  0.9113  0.9087  0.9070  0.9034  0.9030  0.9015  0.9015  0.8904  0.8842  0.8840
[33 : 48]:	0.8828  0.8780  0.8745  0.8669  0.8636  0.8555  0.8480  0.8444  0.8428  0.8410  0.8408  0.8384  0.8350  0.8325  0.8324  0.8151
[49 : 64]:	0.8111  0.8104  0.8072  0.7963  0.7962  0.7941  0.7909  0.7907  0.7886  0.7834  0.7830  0.7700  0.7685  0.7639  0.7591  0.7590
2024-04-28 21:08:07 [INFO] [evolutionary_search.cc:727] Got 64 candidate(s) with evolutionary search
2024-04-28 21:08:07 [INFO] [evolutionary_search.cc:730] Sending 64 candidates(s) for measurement
2024-04-28 21:13:03 [INFO] [task_scheduler.cc:131] [Task #27: fused_nn_global_avg_pool2d] Trial #1: GFLOPs: 2.4401. Time: 10.4912 us. Best GFLOPs: 2.4401
2024-04-28 21:13:03 [INFO] [task_scheduler.cc:131] [Task #27: fused_nn_global_avg_pool2d] Trial #2: GFLOPs: 1.1969. Time: 21.3883 us. Best GFLOPs: 2.4401
2024-04-28 21:13:03 [INFO] [task_scheduler.cc:131] [Task #27: fused_nn_global_avg_pool2d] Trial #3: GFLOPs: 2.6698. Time: 9.5888 us. Best GFLOPs: 2.6698
2024-04-28 21:13:03 [INFO] [task_scheduler.cc:131] [Task #27: fused_nn_global_avg_pool2d] Trial #4: GFLOPs: 1.7500. Time: 14.6288 us. Best GFLOPs: 2.6698
2024-04-28 21:13:03 [INFO] [task_scheduler.cc:131] [Task #27: fused_nn_global_avg_pool2d] Trial #5: GFLOPs: 1.6094. Time: 15.9067 us. Best GFLOPs: 2.6698
2024-04-28 21:13:03 [INFO] [task_scheduler.cc:131] [Task #27: fused_nn_global_avg_pool2d] Trial #6: GFLOPs: 2.6458. Time: 9.6756 us. Best GFLOPs: 2.6698
2024-04-28 21:13:03 [INFO] [task_scheduler.cc:131] [Task #27: fused_nn_global_avg_pool2d] Trial #7: GFLOPs: 1.1329. Time: 22.5965 us. Best GFLOPs: 2.6698
2024-04-28 21:13:03 [INFO] [task_scheduler.cc:131] [Task #27: fused_nn_global_avg_pool2d] Trial #8: GFLOPs: 2.5657. Time: 9.9778 us. Best GFLOPs: 2.6698
2024-04-28 21:13:03 [INFO] [task_scheduler.cc:131] [Task #27: fused_nn_global_avg_pool2d] Trial #9: GFLOPs: 1.2083. Time: 21.1866 us. Best GFLOPs: 2.6698
2024-04-28 21:13:03 [INFO] [task_scheduler.cc:131] [Task #27: fused_nn_global_avg_pool2d] Trial #10: GFLOPs: 1.7325. Time: 14.7765 us. Best GFLOPs: 2.6698
2024-04-28 21:13:03 [INFO] [task_scheduler.cc:131] [Task #27: fused_nn_global_avg_pool2d] Trial #11: GFLOPs: 2.2678. Time: 11.2882 us. Best GFLOPs: 2.6698
2024-04-28 21:13:03 [INFO] [task_scheduler.cc:131] [Task #27: fused_nn_global_avg_pool2d] Trial #12: GFLOPs: 1.3329. Time: 19.2058 us. Best GFLOPs: 2.6698
2024-04-28 21:13:03 [INFO] [task_scheduler.cc:131] [Task #27: fused_nn_global_avg_pool2d] Trial #13: GFLOPs: 2.6869. Time: 9.5277 us. Best GFLOPs: 2.6869
2024-04-28 21:13:03 [INFO] [task_scheduler.cc:131] [Task #27: fused_nn_global_avg_pool2d] Trial #14: GFLOPs: 0.8743. Time: 29.2814 us. Best GFLOPs: 2.6869
2024-04-28 21:13:03 [INFO] [task_scheduler.cc:131] [Task #27: fused_nn_global_avg_pool2d] Trial #15: GFLOPs: 0.7538. Time: 33.9609 us. Best GFLOPs: 2.6869
2024-04-28 21:13:03 [INFO] [task_scheduler.cc:131] [Task #27: fused_nn_global_avg_pool2d] Trial #16: GFLOPs: 2.6732. Time: 9.5764 us. Best GFLOPs: 2.6869
2024-04-28 21:13:03 [INFO] [task_scheduler.cc:131] [Task #27: fused_nn_global_avg_pool2d] Trial #17: GFLOPs: 0.8408. Time: 30.4483 us. Best GFLOPs: 2.6869
2024-04-28 21:13:03 [INFO] [task_scheduler.cc:131] [Task #27: fused_nn_global_avg_pool2d] Trial #18: GFLOPs: 1.5391. Time: 16.6334 us. Best GFLOPs: 2.6869
2024-04-28 21:13:03 [INFO] [task_scheduler.cc:131] [Task #27: fused_nn_global_avg_pool2d] Trial #19: GFLOPs: 0.7834. Time: 32.6762 us. Best GFLOPs: 2.6869
2024-04-28 21:13:03 [INFO] [task_scheduler.cc:131] [Task #27: fused_nn_global_avg_pool2d] Trial #20: GFLOPs: 1.1997. Time: 21.3393 us. Best GFLOPs: 2.6869
2024-04-28 21:13:03 [INFO] [task_scheduler.cc:131] [Task #27: fused_nn_global_avg_pool2d] Trial #21: GFLOPs: 1.3300. Time: 19.2483 us. Best GFLOPs: 2.6869
2024-04-28 21:13:03 [INFO] [task_scheduler.cc:131] [Task #27: fused_nn_global_avg_pool2d] Trial #22: GFLOPs: 2.1168. Time: 12.0938 us. Best GFLOPs: 2.6869
2024-04-28 21:13:03 [INFO] [task_scheduler.cc:131] [Task #27: fused_nn_global_avg_pool2d] Trial #23: GFLOPs: 1.2785. Time: 20.0237 us. Best GFLOPs: 2.6869
2024-04-28 21:13:03 [INFO] [task_scheduler.cc:131] [Task #27: fused_nn_global_avg_pool2d] Trial #24: GFLOPs: 1.8732. Time: 13.6665 us. Best GFLOPs: 2.6869
2024-04-28 21:13:03 [INFO] [task_scheduler.cc:131] [Task #27: fused_nn_global_avg_pool2d] Trial #25: GFLOPs: 1.2461. Time: 20.5445 us. Best GFLOPs: 2.6869
2024-04-28 21:13:03 [INFO] [task_scheduler.cc:131] [Task #27: fused_nn_global_avg_pool2d] Trial #26: GFLOPs: 1.2033. Time: 21.2742 us. Best GFLOPs: 2.6869
2024-04-28 21:13:03 [INFO] [task_scheduler.cc:131] [Task #27: fused_nn_global_avg_pool2d] Trial #27: GFLOPs: 2.2746. Time: 11.2547 us. Best GFLOPs: 2.6869
2024-04-28 21:13:03 [INFO] [task_scheduler.cc:131] [Task #27: fused_nn_global_avg_pool2d] Trial #28: GFLOPs: 1.2872. Time: 19.8882 us. Best GFLOPs: 2.6869
2024-04-28 21:13:03 [INFO] [task_scheduler.cc:131] [Task #27: fused_nn_global_avg_pool2d] Trial #29: GFLOPs: 0.8123. Time: 31.5147 us. Best GFLOPs: 2.6869
2024-04-28 21:13:03 [INFO] [task_scheduler.cc:131] [Task #27: fused_nn_global_avg_pool2d] Trial #30: GFLOPs: 2.2254. Time: 11.5035 us. Best GFLOPs: 2.6869
2024-04-28 21:13:03 [INFO] [task_scheduler.cc:131] [Task #27: fused_nn_global_avg_pool2d] Trial #31: GFLOPs: 1.1969. Time: 21.3893 us. Best GFLOPs: 2.6869
2024-04-28 21:13:03 [INFO] [task_scheduler.cc:131] [Task #27: fused_nn_global_avg_pool2d] Trial #32: GFLOPs: 2.2584. Time: 11.3355 us. Best GFLOPs: 2.6869
2024-04-28 21:13:03 [INFO] [task_scheduler.cc:131] [Task #27: fused_nn_global_avg_pool2d] Trial #33: GFLOPs: 1.2020. Time: 21.2975 us. Best GFLOPs: 2.6869
2024-04-28 21:13:03 [INFO] [task_scheduler.cc:131] [Task #27: fused_nn_global_avg_pool2d] Trial #34: GFLOPs: 2.2277. Time: 11.4916 us. Best GFLOPs: 2.6869
2024-04-28 21:13:03 [INFO] [task_scheduler.cc:131] [Task #27: fused_nn_global_avg_pool2d] Trial #35: GFLOPs: 1.1577. Time: 22.1134 us. Best GFLOPs: 2.6869
2024-04-28 21:13:03 [INFO] [task_scheduler.cc:131] [Task #27: fused_nn_global_avg_pool2d] Trial #36: GFLOPs: 2.5012. Time: 10.2350 us. Best GFLOPs: 2.6869
2024-04-28 21:13:03 [INFO] [task_scheduler.cc:131] [Task #27: fused_nn_global_avg_pool2d] Trial #37: GFLOPs: 1.0535. Time: 24.2988 us. Best GFLOPs: 2.6869
2024-04-28 21:13:03 [INFO] [task_scheduler.cc:131] [Task #27: fused_nn_global_avg_pool2d] Trial #38: GFLOPs: 1.0041. Time: 25.4952 us. Best GFLOPs: 2.6869
2024-04-28 21:13:03 [INFO] [task_scheduler.cc:131] [Task #27: fused_nn_global_avg_pool2d] Trial #39: GFLOPs: 1.2646. Time: 20.2432 us. Best GFLOPs: 2.6869
2024-04-28 21:13:03 [INFO] [task_scheduler.cc:131] [Task #27: fused_nn_global_avg_pool2d] Trial #40: GFLOPs: 1.3182. Time: 19.4211 us. Best GFLOPs: 2.6869
2024-04-28 21:13:03 [INFO] [task_scheduler.cc:131] [Task #27: fused_nn_global_avg_pool2d] Trial #41: GFLOPs: 0.7449. Time: 34.3655 us. Best GFLOPs: 2.6869
2024-04-28 21:13:03 [INFO] [task_scheduler.cc:131] [Task #27: fused_nn_global_avg_pool2d] Trial #42: GFLOPs: 2.5151. Time: 10.1785 us. Best GFLOPs: 2.6869
2024-04-28 21:13:03 [INFO] [task_scheduler.cc:131] [Task #27: fused_nn_global_avg_pool2d] Trial #43: GFLOPs: 2.6609. Time: 9.6206 us. Best GFLOPs: 2.6869
2024-04-28 21:13:03 [INFO] [task_scheduler.cc:131] [Task #27: fused_nn_global_avg_pool2d] Trial #44: GFLOPs: 2.5772. Time: 9.9333 us. Best GFLOPs: 2.6869
2024-04-28 21:13:03 [INFO] [task_scheduler.cc:131] [Task #27: fused_nn_global_avg_pool2d] Trial #45: GFLOPs: 0.9693. Time: 26.4119 us. Best GFLOPs: 2.6869
2024-04-28 21:13:03 [INFO] [task_scheduler.cc:131] [Task #27: fused_nn_global_avg_pool2d] Trial #46: GFLOPs: 2.4304. Time: 10.5333 us. Best GFLOPs: 2.6869
2024-04-28 21:13:03 [INFO] [task_scheduler.cc:131] [Task #27: fused_nn_global_avg_pool2d] Trial #47: GFLOPs: 2.2725. Time: 11.2650 us. Best GFLOPs: 2.6869
2024-04-28 21:13:03 [INFO] [task_scheduler.cc:131] [Task #27: fused_nn_global_avg_pool2d] Trial #48: GFLOPs: 1.7154. Time: 14.9236 us. Best GFLOPs: 2.6869
2024-04-28 21:13:03 [INFO] [task_scheduler.cc:131] [Task #27: fused_nn_global_avg_pool2d] Trial #49: GFLOPs: 0.7869. Time: 32.5341 us. Best GFLOPs: 2.6869
2024-04-28 21:13:03 [INFO] [task_scheduler.cc:131] [Task #27: fused_nn_global_avg_pool2d] Trial #50: GFLOPs: 2.6592. Time: 9.6270 us. Best GFLOPs: 2.6869
2024-04-28 21:13:03 [INFO] [task_scheduler.cc:131] [Task #27: fused_nn_global_avg_pool2d] Trial #51: GFLOPs: 1.2096. Time: 21.1633 us. Best GFLOPs: 2.6869
2024-04-28 21:13:03 [INFO] [task_scheduler.cc:131] [Task #27: fused_nn_global_avg_pool2d] Trial #52: GFLOPs: 2.7058. Time: 9.4610 us. Best GFLOPs: 2.7058
2024-04-28 21:13:03 [INFO] [task_scheduler.cc:131] [Task #27: fused_nn_global_avg_pool2d] Trial #53: GFLOPs: 1.2163. Time: 21.0475 us. Best GFLOPs: 2.7058
2024-04-28 21:13:03 [INFO] [task_scheduler.cc:131] [Task #27: fused_nn_global_avg_pool2d] Trial #54: GFLOPs: 0.4250. Time: 60.2365 us. Best GFLOPs: 2.7058
2024-04-28 21:13:03 [INFO] [task_scheduler.cc:131] [Task #27: fused_nn_global_avg_pool2d] Trial #55: GFLOPs: 2.6141. Time: 9.7931 us. Best GFLOPs: 2.7058
2024-04-28 21:13:03 [INFO] [task_scheduler.cc:131] [Task #27: fused_nn_global_avg_pool2d] Trial #56: GFLOPs: 1.2908. Time: 19.8333 us. Best GFLOPs: 2.7058
2024-04-28 21:13:03 [INFO] [task_scheduler.cc:131] [Task #27: fused_nn_global_avg_pool2d] Trial #57: GFLOPs: 1.1867. Time: 21.5717 us. Best GFLOPs: 2.7058
2024-04-28 21:13:03 [INFO] [task_scheduler.cc:131] [Task #27: fused_nn_global_avg_pool2d] Trial #58: GFLOPs: 2.0735. Time: 12.3466 us. Best GFLOPs: 2.7058
2024-04-28 21:13:03 [INFO] [task_scheduler.cc:131] [Task #27: fused_nn_global_avg_pool2d] Trial #59: GFLOPs: 2.5549. Time: 10.0199 us. Best GFLOPs: 2.7058
2024-04-28 21:13:03 [INFO] [task_scheduler.cc:131] [Task #27: fused_nn_global_avg_pool2d] Trial #60: GFLOPs: 1.1975. Time: 21.3772 us. Best GFLOPs: 2.7058
2024-04-28 21:13:03 [INFO] [task_scheduler.cc:131] [Task #27: fused_nn_global_avg_pool2d] Trial #61: GFLOPs: 0.7976. Time: 32.0972 us. Best GFLOPs: 2.7058
2024-04-28 21:13:03 [INFO] [task_scheduler.cc:131] [Task #27: fused_nn_global_avg_pool2d] Trial #62: GFLOPs: 1.2235. Time: 20.9234 us. Best GFLOPs: 2.7058
2024-04-28 21:13:03 [INFO] [task_scheduler.cc:131] [Task #27: fused_nn_global_avg_pool2d] Trial #63: GFLOPs: 0.9970. Time: 25.6774 us. Best GFLOPs: 2.7058
2024-04-28 21:13:03 [INFO] [task_scheduler.cc:131] [Task #27: fused_nn_global_avg_pool2d] Trial #64: GFLOPs: 2.6314. Time: 9.7288 us. Best GFLOPs: 2.7058
