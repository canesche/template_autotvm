2024-04-28 20:35:09 [INFO] [task_scheduler.cc:160] Initializing Task #13: "fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3"
2024-04-28 20:35:09 [INFO] [task_scheduler.cc:35] 
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(1), T.int64(28), T.int64(28), T.int64(128)), "float32"), p1: T.Buffer((T.int64(4), T.int64(1), T.int64(3), T.int64(3), T.int64(128), T.int64(32)), "float32"), p2: T.Buffer((T.int64(1), T.int64(4), T.int64(1), T.int64(1), T.int64(32)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(4), T.int64(28), T.int64(28), T.int64(32)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        data_pad = T.alloc_buffer((T.int64(1), T.int64(1), T.int64(30), T.int64(30), T.int64(128)))
        conv2d_NCHWc = T.alloc_buffer((T.int64(1), T.int64(4), T.int64(28), T.int64(28), T.int64(32)))
        T_add = T.alloc_buffer((T.int64(1), T.int64(4), T.int64(28), T.int64(28), T.int64(32)))
        for i0, i1, i2, i3, i4 in T.grid(T.int64(1), T.int64(1), T.int64(30), T.int64(30), T.int64(128)):
            with T.block("data_pad"):
                v_i0, v_i1, v_i2, v_i3, v_i4 = T.axis.remap("SSSSS", [i0, i1, i2, i3, i4])
                T.reads(p0[v_i0, v_i1, v_i2 - T.int64(1), v_i3 - T.int64(1), v_i4])
                T.writes(data_pad[v_i0, v_i1, v_i2, v_i3, v_i4])
                data_pad[v_i0, v_i1, v_i2, v_i3, v_i4] = T.if_then_else(T.int64(1) <= v_i2 and v_i2 < T.int64(29) and T.int64(1) <= v_i3 and v_i3 < T.int64(29), p0[v_i0, v_i1, v_i2 - T.int64(1), v_i3 - T.int64(1), v_i4], T.float32(0))
        for n, oc_chunk, oh, ow, oc_block, ic, kh, kw in T.grid(T.int64(1), T.int64(4), T.int64(28), T.int64(28), T.int64(32), T.int64(128), T.int64(3), T.int64(3)):
            with T.block("conv2d_NCHWc"):
                v_n, v_oc_chunk, v_oh, v_ow, v_oc_block, v_ic, v_kh, v_kw = T.axis.remap("SSSSSRRR", [n, oc_chunk, oh, ow, oc_block, ic, kh, kw])
                T.reads(data_pad[v_n, v_ic // T.int64(128), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(128)], p1[v_oc_chunk, v_ic // T.int64(128), v_kh, v_kw, v_ic % T.int64(128), v_oc_block])
                T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                with T.init():
                    conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = T.float32(0)
                conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] + data_pad[v_n, v_ic // T.int64(128), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(128)] * p1[v_oc_chunk, v_ic // T.int64(128), v_kh, v_kw, v_ic % T.int64(128), v_oc_block]
        for ax0, ax1, ax2, ax3, ax4 in T.grid(T.int64(1), T.int64(4), T.int64(28), T.int64(28), T.int64(32)):
            with T.block("T_add"):
                v_ax0, v_ax1, v_ax2, v_ax3, v_ax4 = T.axis.remap("SSSSS", [ax0, ax1, ax2, ax3, ax4])
                T.reads(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4])
                T.writes(T_add[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                T_add[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] + p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4]
        for ax0, ax1, ax2, ax3, ax4 in T.grid(T.int64(1), T.int64(4), T.int64(28), T.int64(28), T.int64(32)):
            with T.block("T_relu"):
                v_ax0, v_ax1, v_ax2, v_ax3, v_ax4 = T.axis.remap("SSSSS", [ax0, ax1, ax2, ax3, ax4])
                T.reads(T_add[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                T.writes(T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.max(T_add[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], T.float32(0))
2024-04-28 20:35:09 [INFO] [task_scheduler.cc:164] Total 3 design space(s) generated
2024-04-28 20:35:09 [INFO] [task_scheduler.cc:170] Design space #0:
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(1), T.int64(28), T.int64(28), T.int64(128)), "float32"), p1: T.Buffer((T.int64(4), T.int64(1), T.int64(3), T.int64(3), T.int64(128), T.int64(32)), "float32"), p2: T.Buffer((T.int64(1), T.int64(4), T.int64(1), T.int64(1), T.int64(32)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(4), T.int64(28), T.int64(28), T.int64(32)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        with T.block("root"):
            T.reads()
            T.writes()
            T.block_attr({"meta_schedule.parallel": 768, "meta_schedule.unroll_explicit": 16, "meta_schedule.vectorize": 64})
            data_pad = T.alloc_buffer((T.int64(1), T.int64(1), T.int64(30), T.int64(30), T.int64(128)))
            conv2d_NCHWc = T.alloc_buffer((T.int64(1), T.int64(4), T.int64(28), T.int64(28), T.int64(32)))
            for n_0, oc_chunk_0, oh_0, ow_0, oc_block_0, n_1, oc_chunk_1, oh_1, ow_1 in T.grid(T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(8), T.int64(1), T.int64(1), T.int64(1), T.int64(7)):
                for ax0, ax1, ax2, ax3, ax4 in T.grid(T.int64(1), T.int64(1), T.int64(30), T.int64(4), T.int64(128)):
                    with T.block("data_pad"):
                        v_i0, v_i1, v_i2 = T.axis.remap("SSS", [ax0, ax1, ax2])
                        v_i3 = T.axis.spatial(T.int64(30), ow_0 * T.int64(14) + ow_1 * T.int64(2) + ax3)
                        v_i4 = T.axis.spatial(T.int64(128), ax4)
                        T.reads(p0[v_i0, v_i1, v_i2 - T.int64(1), v_i3 - T.int64(1), v_i4])
                        T.writes(data_pad[v_i0, v_i1, v_i2, v_i3, v_i4])
                        data_pad[v_i0, v_i1, v_i2, v_i3, v_i4] = T.if_then_else(T.int64(1) <= v_i2 and v_i2 < T.int64(29) and T.int64(1) <= v_i3 and v_i3 < T.int64(29), p0[v_i0, v_i1, v_i2 - T.int64(1), v_i3 - T.int64(1), v_i4], T.float32(0))
                for oc_block_1, ic_0, kh_0, kw_0, n_2, oc_chunk_2, oh_2, ow_2, oc_block_2, ic_1, kh_1, kw_1, n_3, oc_chunk_3, oh_3, ow_3, oc_block_3 in T.grid(T.int64(4), T.int64(64), T.int64(1), T.int64(1), T.int64(1), T.int64(4), T.int64(7), T.int64(1), T.int64(1), T.int64(2), T.int64(3), T.int64(3), T.int64(1), T.int64(1), T.int64(4), T.int64(2), T.int64(1)):
                    with T.block("conv2d_NCHWc"):
                        v_n = T.axis.spatial(T.int64(1), n_0 + n_1 + n_2 + n_3)
                        v_oc_chunk = T.axis.spatial(T.int64(4), oc_chunk_0 * T.int64(4) + oc_chunk_1 * T.int64(4) + oc_chunk_2 + oc_chunk_3)
                        v_oh = T.axis.spatial(T.int64(28), oh_0 * T.int64(28) + oh_1 * T.int64(28) + oh_2 * T.int64(4) + oh_3)
                        v_ow = T.axis.spatial(T.int64(28), ow_0 * T.int64(14) + ow_1 * T.int64(2) + ow_2 * T.int64(2) + ow_3)
                        v_oc_block = T.axis.spatial(T.int64(32), oc_block_0 * T.int64(4) + oc_block_1 + oc_block_2 + oc_block_3)
                        v_ic = T.axis.reduce(T.int64(128), ic_0 * T.int64(2) + ic_1)
                        v_kh = T.axis.reduce(T.int64(3), kh_0 * T.int64(3) + kh_1)
                        v_kw = T.axis.reduce(T.int64(3), kw_0 * T.int64(3) + kw_1)
                        T.reads(data_pad[v_n, v_ic // T.int64(128), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(128)], p1[v_oc_chunk, v_ic // T.int64(128), v_kh, v_kw, v_ic % T.int64(128), v_oc_block])
                        T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                        T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                        with T.init():
                            conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = T.float32(0)
                        conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] + data_pad[v_n, v_ic // T.int64(128), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(128)] * p1[v_oc_chunk, v_ic // T.int64(128), v_kh, v_kw, v_ic % T.int64(128), v_oc_block]
            for ax0, ax1, ax2, ax3, ax4 in T.grid(T.int64(1), T.int64(4), T.int64(28), T.int64(28), T.int64(32)):
                with T.block("T_relu"):
                    v_ax0, v_ax1, v_ax2, v_ax3, v_ax4 = T.axis.remap("SSSSS", [ax0, ax1, ax2, ax3, ax4])
                    T.reads(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4])
                    T.writes(T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                    T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.max(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] + p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4], T.float32(0))
b0 = sch.get_block(name="data_pad", func_name="main")
b1 = sch.get_block(name="conv2d_NCHWc", func_name="main")
b2 = sch.get_block(name="T_add", func_name="main")
b3 = sch.get_block(name="root", func_name="main")
sch.compute_inline(block=b2)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSRSRS")
l4, l5, l6, l7, l8, l9, l10, l11 = sch.get_loops(block=b1)
v12, v13, v14, v15 = sch.sample_perfect_tile(loop=l4, n=4, max_innermost_factor=64, decision=[1, 1, 1, 1])
l16, l17, l18, l19 = sch.split(loop=l4, factors=[v12, v13, v14, v15], preserve_unit_iters=True)
v20, v21, v22, v23 = sch.sample_perfect_tile(loop=l5, n=4, max_innermost_factor=64, decision=[1, 1, 4, 1])
l24, l25, l26, l27 = sch.split(loop=l5, factors=[v20, v21, v22, v23], preserve_unit_iters=True)
v28, v29, v30, v31 = sch.sample_perfect_tile(loop=l6, n=4, max_innermost_factor=64, decision=[1, 1, 7, 4])
l32, l33, l34, l35 = sch.split(loop=l6, factors=[v28, v29, v30, v31], preserve_unit_iters=True)
v36, v37, v38, v39 = sch.sample_perfect_tile(loop=l7, n=4, max_innermost_factor=64, decision=[2, 7, 1, 2])
l40, l41, l42, l43 = sch.split(loop=l7, factors=[v36, v37, v38, v39], preserve_unit_iters=True)
v44, v45, v46, v47 = sch.sample_perfect_tile(loop=l8, n=4, max_innermost_factor=64, decision=[8, 4, 1, 1])
l48, l49, l50, l51 = sch.split(loop=l8, factors=[v44, v45, v46, v47], preserve_unit_iters=True)
v52, v53 = sch.sample_perfect_tile(loop=l9, n=2, max_innermost_factor=64, decision=[64, 2])
l54, l55 = sch.split(loop=l9, factors=[v52, v53], preserve_unit_iters=True)
v56, v57 = sch.sample_perfect_tile(loop=l10, n=2, max_innermost_factor=64, decision=[1, 3])
l58, l59 = sch.split(loop=l10, factors=[v56, v57], preserve_unit_iters=True)
v60, v61 = sch.sample_perfect_tile(loop=l11, n=2, max_innermost_factor=64, decision=[1, 3])
l62, l63 = sch.split(loop=l11, factors=[v60, v61], preserve_unit_iters=True)
sch.reorder(l16, l24, l32, l40, l48, l17, l25, l33, l41, l49, l54, l58, l62, l18, l26, l34, l42, l50, l55, l59, l63, l19, l27, l35, l43, l51)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.vectorize", ann_val=64)
v64 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=1)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.unroll_explicit", ann_val=v64)
l65 = sch.sample_compute_location(block=b0, decision=8)
sch.compute_at(block=b0, loop=l65, preserve_unit_loops=True, index=-1)
2024-04-28 20:35:09 [INFO] [task_scheduler.cc:170] Design space #1:
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(1), T.int64(28), T.int64(28), T.int64(128)), "float32"), p1: T.Buffer((T.int64(4), T.int64(1), T.int64(3), T.int64(3), T.int64(128), T.int64(32)), "float32"), p2: T.Buffer((T.int64(1), T.int64(4), T.int64(1), T.int64(1), T.int64(32)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(4), T.int64(28), T.int64(28), T.int64(32)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        with T.block("root"):
            T.reads()
            T.writes()
            T.block_attr({"meta_schedule.parallel": 768, "meta_schedule.unroll_explicit": 0, "meta_schedule.vectorize": 64})
            data_pad = T.alloc_buffer((T.int64(1), T.int64(1), T.int64(30), T.int64(30), T.int64(128)))
            conv2d_NCHWc = T.alloc_buffer((T.int64(1), T.int64(4), T.int64(28), T.int64(28), T.int64(32)))
            for n_0, oc_chunk_0, oh_0, ow_0, oc_block_0, n_1, oc_chunk_1, oh_1, ow_1, oc_block_1 in T.grid(T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(8), T.int64(1), T.int64(1), T.int64(1), T.int64(7), T.int64(4)):
                for ic_0 in range(T.int64(64)):
                    for ax0, ax1, ax2, ax3, ax4 in T.grid(T.int64(1), T.int64(1), T.int64(30), T.int64(4), T.int64(2)):
                        with T.block("data_pad"):
                            v_i0, v_i1, v_i2 = T.axis.remap("SSS", [ax0, ax1, ax2])
                            v_i3 = T.axis.spatial(T.int64(30), ow_0 * T.int64(14) + ow_1 * T.int64(2) + ax3)
                            v_i4 = T.axis.spatial(T.int64(128), ic_0 * T.int64(2) + ax4)
                            T.reads(p0[v_i0, v_i1, v_i2 - T.int64(1), v_i3 - T.int64(1), v_i4])
                            T.writes(data_pad[v_i0, v_i1, v_i2, v_i3, v_i4])
                            data_pad[v_i0, v_i1, v_i2, v_i3, v_i4] = T.if_then_else(T.int64(1) <= v_i2 and v_i2 < T.int64(29) and T.int64(1) <= v_i3 and v_i3 < T.int64(29), p0[v_i0, v_i1, v_i2 - T.int64(1), v_i3 - T.int64(1), v_i4], T.float32(0))
                    for kh_0, kw_0, n_2, oc_chunk_2, oh_2, ow_2, oc_block_2, ic_1, kh_1, kw_1, n_3, oc_chunk_3, oh_3, ow_3, oc_block_3 in T.grid(T.int64(1), T.int64(1), T.int64(1), T.int64(4), T.int64(7), T.int64(1), T.int64(1), T.int64(2), T.int64(3), T.int64(3), T.int64(1), T.int64(1), T.int64(4), T.int64(2), T.int64(1)):
                        with T.block("conv2d_NCHWc"):
                            v_n = T.axis.spatial(T.int64(1), n_0 + n_1 + n_2 + n_3)
                            v_oc_chunk = T.axis.spatial(T.int64(4), oc_chunk_0 * T.int64(4) + oc_chunk_1 * T.int64(4) + oc_chunk_2 + oc_chunk_3)
                            v_oh = T.axis.spatial(T.int64(28), oh_0 * T.int64(28) + oh_1 * T.int64(28) + oh_2 * T.int64(4) + oh_3)
                            v_ow = T.axis.spatial(T.int64(28), ow_0 * T.int64(14) + ow_1 * T.int64(2) + ow_2 * T.int64(2) + ow_3)
                            v_oc_block = T.axis.spatial(T.int64(32), oc_block_0 * T.int64(4) + oc_block_1 + oc_block_2 + oc_block_3)
                            v_ic = T.axis.reduce(T.int64(128), ic_0 * T.int64(2) + ic_1)
                            v_kh = T.axis.reduce(T.int64(3), kh_0 * T.int64(3) + kh_1)
                            v_kw = T.axis.reduce(T.int64(3), kw_0 * T.int64(3) + kw_1)
                            T.reads(data_pad[v_n, v_ic // T.int64(128), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(128)], p1[v_oc_chunk, v_ic // T.int64(128), v_kh, v_kw, v_ic % T.int64(128), v_oc_block])
                            T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                            T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                            with T.init():
                                conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = T.float32(0)
                            conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] + data_pad[v_n, v_ic // T.int64(128), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(128)] * p1[v_oc_chunk, v_ic // T.int64(128), v_kh, v_kw, v_ic % T.int64(128), v_oc_block]
                for ax0, ax1, ax2, ax3, ax4 in T.grid(T.int64(1), T.int64(4), T.int64(28), T.int64(2), T.int64(1)):
                    with T.block("T_relu"):
                        v_ax0, v_ax1, v_ax2 = T.axis.remap("SSS", [ax0, ax1, ax2])
                        v_ax3 = T.axis.spatial(T.int64(28), ow_0 * T.int64(14) + ow_1 * T.int64(2) + ax3)
                        v_ax4 = T.axis.spatial(T.int64(32), oc_block_0 * T.int64(4) + oc_block_1 + ax4)
                        T.reads(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4])
                        T.writes(T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                        T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.max(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] + p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4], T.float32(0))
b0 = sch.get_block(name="data_pad", func_name="main")
b1 = sch.get_block(name="conv2d_NCHWc", func_name="main")
b2 = sch.get_block(name="T_add", func_name="main")
b3 = sch.get_block(name="root", func_name="main")
sch.compute_inline(block=b2)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSRSRS")
l4, l5, l6, l7, l8, l9, l10, l11 = sch.get_loops(block=b1)
v12, v13, v14, v15 = sch.sample_perfect_tile(loop=l4, n=4, max_innermost_factor=64, decision=[1, 1, 1, 1])
l16, l17, l18, l19 = sch.split(loop=l4, factors=[v12, v13, v14, v15], preserve_unit_iters=True)
v20, v21, v22, v23 = sch.sample_perfect_tile(loop=l5, n=4, max_innermost_factor=64, decision=[1, 1, 4, 1])
l24, l25, l26, l27 = sch.split(loop=l5, factors=[v20, v21, v22, v23], preserve_unit_iters=True)
v28, v29, v30, v31 = sch.sample_perfect_tile(loop=l6, n=4, max_innermost_factor=64, decision=[1, 1, 7, 4])
l32, l33, l34, l35 = sch.split(loop=l6, factors=[v28, v29, v30, v31], preserve_unit_iters=True)
v36, v37, v38, v39 = sch.sample_perfect_tile(loop=l7, n=4, max_innermost_factor=64, decision=[2, 7, 1, 2])
l40, l41, l42, l43 = sch.split(loop=l7, factors=[v36, v37, v38, v39], preserve_unit_iters=True)
v44, v45, v46, v47 = sch.sample_perfect_tile(loop=l8, n=4, max_innermost_factor=64, decision=[8, 4, 1, 1])
l48, l49, l50, l51 = sch.split(loop=l8, factors=[v44, v45, v46, v47], preserve_unit_iters=True)
v52, v53 = sch.sample_perfect_tile(loop=l9, n=2, max_innermost_factor=64, decision=[64, 2])
l54, l55 = sch.split(loop=l9, factors=[v52, v53], preserve_unit_iters=True)
v56, v57 = sch.sample_perfect_tile(loop=l10, n=2, max_innermost_factor=64, decision=[1, 3])
l58, l59 = sch.split(loop=l10, factors=[v56, v57], preserve_unit_iters=True)
v60, v61 = sch.sample_perfect_tile(loop=l11, n=2, max_innermost_factor=64, decision=[1, 3])
l62, l63 = sch.split(loop=l11, factors=[v60, v61], preserve_unit_iters=True)
sch.reorder(l16, l24, l32, l40, l48, l17, l25, l33, l41, l49, l54, l58, l62, l18, l26, l34, l42, l50, l55, l59, l63, l19, l27, l35, l43, l51)
b64, = sch.get_consumers(block=b1)
sch.reverse_compute_at(block=b64, loop=l49, preserve_unit_loops=True, index=-1)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.vectorize", ann_val=64)
v65 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=0)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.unroll_explicit", ann_val=v65)
l66 = sch.sample_compute_location(block=b0, decision=10)
sch.compute_at(block=b0, loop=l66, preserve_unit_loops=True, index=-1)
2024-04-28 20:35:10 [INFO] [task_scheduler.cc:170] Design space #2:
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(1), T.int64(28), T.int64(28), T.int64(128)), "float32"), p1: T.Buffer((T.int64(4), T.int64(1), T.int64(3), T.int64(3), T.int64(128), T.int64(32)), "float32"), p2: T.Buffer((T.int64(1), T.int64(4), T.int64(1), T.int64(1), T.int64(32)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(4), T.int64(28), T.int64(28), T.int64(32)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        with T.block("root"):
            T.reads()
            T.writes()
            T.block_attr({"meta_schedule.parallel": 768, "meta_schedule.unroll_explicit": 512, "meta_schedule.vectorize": 64})
            data_pad = T.alloc_buffer((T.int64(1), T.int64(1), T.int64(30), T.int64(30), T.int64(128)))
            conv2d_NCHWc = T.alloc_buffer((T.int64(1), T.int64(4), T.int64(28), T.int64(28), T.int64(32)))
            for n_0, oc_chunk_0, oh_0, ow_0, oc_block_0 in T.grid(T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(8)):
                for n_1, oc_chunk_1, oh_1, ow_1, oc_block_1, ic_0 in T.grid(T.int64(1), T.int64(1), T.int64(1), T.int64(7), T.int64(4), T.int64(64)):
                    for ax0, ax1, ax2, ax3, ax4 in T.grid(T.int64(1), T.int64(1), T.int64(30), T.int64(4), T.int64(2)):
                        with T.block("data_pad"):
                            v_i0, v_i1, v_i2 = T.axis.remap("SSS", [ax0, ax1, ax2])
                            v_i3 = T.axis.spatial(T.int64(30), ow_0 * T.int64(14) + ow_1 * T.int64(2) + ax3)
                            v_i4 = T.axis.spatial(T.int64(128), ic_0 * T.int64(2) + ax4)
                            T.reads(p0[v_i0, v_i1, v_i2 - T.int64(1), v_i3 - T.int64(1), v_i4])
                            T.writes(data_pad[v_i0, v_i1, v_i2, v_i3, v_i4])
                            data_pad[v_i0, v_i1, v_i2, v_i3, v_i4] = T.if_then_else(T.int64(1) <= v_i2 and v_i2 < T.int64(29) and T.int64(1) <= v_i3 and v_i3 < T.int64(29), p0[v_i0, v_i1, v_i2 - T.int64(1), v_i3 - T.int64(1), v_i4], T.float32(0))
                    for kh_0, kw_0, n_2, oc_chunk_2, oh_2, ow_2, oc_block_2, ic_1, kh_1, kw_1, n_3, oc_chunk_3, oh_3, ow_3, oc_block_3 in T.grid(T.int64(1), T.int64(1), T.int64(1), T.int64(4), T.int64(7), T.int64(1), T.int64(1), T.int64(2), T.int64(3), T.int64(3), T.int64(1), T.int64(1), T.int64(4), T.int64(2), T.int64(1)):
                        with T.block("conv2d_NCHWc"):
                            v_n = T.axis.spatial(T.int64(1), n_0 + n_1 + n_2 + n_3)
                            v_oc_chunk = T.axis.spatial(T.int64(4), oc_chunk_0 * T.int64(4) + oc_chunk_1 * T.int64(4) + oc_chunk_2 + oc_chunk_3)
                            v_oh = T.axis.spatial(T.int64(28), oh_0 * T.int64(28) + oh_1 * T.int64(28) + oh_2 * T.int64(4) + oh_3)
                            v_ow = T.axis.spatial(T.int64(28), ow_0 * T.int64(14) + ow_1 * T.int64(2) + ow_2 * T.int64(2) + ow_3)
                            v_oc_block = T.axis.spatial(T.int64(32), oc_block_0 * T.int64(4) + oc_block_1 + oc_block_2 + oc_block_3)
                            v_ic = T.axis.reduce(T.int64(128), ic_0 * T.int64(2) + ic_1)
                            v_kh = T.axis.reduce(T.int64(3), kh_0 * T.int64(3) + kh_1)
                            v_kw = T.axis.reduce(T.int64(3), kw_0 * T.int64(3) + kw_1)
                            T.reads(data_pad[v_n, v_ic // T.int64(128), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(128)], p1[v_oc_chunk, v_ic // T.int64(128), v_kh, v_kw, v_ic % T.int64(128), v_oc_block])
                            T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                            T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                            with T.init():
                                conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = T.float32(0)
                            conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] + data_pad[v_n, v_ic // T.int64(128), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(128)] * p1[v_oc_chunk, v_ic // T.int64(128), v_kh, v_kw, v_ic % T.int64(128), v_oc_block]
                for ax0, ax1, ax2, ax3, ax4 in T.grid(T.int64(1), T.int64(4), T.int64(28), T.int64(14), T.int64(4)):
                    with T.block("T_relu"):
                        v_ax0, v_ax1, v_ax2 = T.axis.remap("SSS", [ax0, ax1, ax2])
                        v_ax3 = T.axis.spatial(T.int64(28), ow_0 * T.int64(14) + ax3)
                        v_ax4 = T.axis.spatial(T.int64(32), oc_block_0 * T.int64(4) + ax4)
                        T.reads(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4])
                        T.writes(T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                        T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.max(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] + p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4], T.float32(0))
b0 = sch.get_block(name="data_pad", func_name="main")
b1 = sch.get_block(name="conv2d_NCHWc", func_name="main")
b2 = sch.get_block(name="T_add", func_name="main")
b3 = sch.get_block(name="root", func_name="main")
sch.compute_inline(block=b2)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSRSRS")
l4, l5, l6, l7, l8, l9, l10, l11 = sch.get_loops(block=b1)
v12, v13, v14, v15 = sch.sample_perfect_tile(loop=l4, n=4, max_innermost_factor=64, decision=[1, 1, 1, 1])
l16, l17, l18, l19 = sch.split(loop=l4, factors=[v12, v13, v14, v15], preserve_unit_iters=True)
v20, v21, v22, v23 = sch.sample_perfect_tile(loop=l5, n=4, max_innermost_factor=64, decision=[1, 1, 4, 1])
l24, l25, l26, l27 = sch.split(loop=l5, factors=[v20, v21, v22, v23], preserve_unit_iters=True)
v28, v29, v30, v31 = sch.sample_perfect_tile(loop=l6, n=4, max_innermost_factor=64, decision=[1, 1, 7, 4])
l32, l33, l34, l35 = sch.split(loop=l6, factors=[v28, v29, v30, v31], preserve_unit_iters=True)
v36, v37, v38, v39 = sch.sample_perfect_tile(loop=l7, n=4, max_innermost_factor=64, decision=[2, 7, 1, 2])
l40, l41, l42, l43 = sch.split(loop=l7, factors=[v36, v37, v38, v39], preserve_unit_iters=True)
v44, v45, v46, v47 = sch.sample_perfect_tile(loop=l8, n=4, max_innermost_factor=64, decision=[8, 4, 1, 1])
l48, l49, l50, l51 = sch.split(loop=l8, factors=[v44, v45, v46, v47], preserve_unit_iters=True)
v52, v53 = sch.sample_perfect_tile(loop=l9, n=2, max_innermost_factor=64, decision=[64, 2])
l54, l55 = sch.split(loop=l9, factors=[v52, v53], preserve_unit_iters=True)
v56, v57 = sch.sample_perfect_tile(loop=l10, n=2, max_innermost_factor=64, decision=[1, 3])
l58, l59 = sch.split(loop=l10, factors=[v56, v57], preserve_unit_iters=True)
v60, v61 = sch.sample_perfect_tile(loop=l11, n=2, max_innermost_factor=64, decision=[1, 3])
l62, l63 = sch.split(loop=l11, factors=[v60, v61], preserve_unit_iters=True)
sch.reorder(l16, l24, l32, l40, l48, l17, l25, l33, l41, l49, l54, l58, l62, l18, l26, l34, l42, l50, l55, l59, l63, l19, l27, l35, l43, l51)
b64, = sch.get_consumers(block=b1)
sch.reverse_compute_at(block=b64, loop=l48, preserve_unit_loops=True, index=-1)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.vectorize", ann_val=64)
v65 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.unroll_explicit", ann_val=v65)
l66 = sch.sample_compute_location(block=b0, decision=10)
sch.compute_at(block=b0, loop=l66, preserve_unit_loops=True, index=-1)
2024-04-28 20:50:49 [INFO] [evolutionary_search.cc:713] Generating candidates......
2024-04-28 20:50:49 [INFO] [evolutionary_search.cc:715] Picked top 0 candidate(s) from database
2024-04-28 20:50:54 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x3cedc28)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x30c43a8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x331a288)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x3f41058)]: 0 failure(s)
2024-04-28 20:50:54 [INFO] [evolutionary_search.cc:723] Sampled 512 candidate(s)
2024-04-28 20:51:00 [INFO] [evolutionary_search.cc:621] Evolve iter #0 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x3cedc28)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x30c43a8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x331a288)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x3f41058)]: 0 failure(s)
2024-04-28 20:51:06 [INFO] [evolutionary_search.cc:621] Evolve iter #1 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x3cedc28)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x30c43a8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x331a288)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x3f41058)]: 0 failure(s)
2024-04-28 20:51:12 [INFO] [evolutionary_search.cc:621] Evolve iter #2 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x3cedc28)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x30c43a8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x331a288)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x3f41058)]: 0 failure(s)
2024-04-28 20:51:19 [INFO] [evolutionary_search.cc:621] Evolve iter #3 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x3cedc28)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x30c43a8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x331a288)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x3f41058)]: 0 failure(s)
2024-04-28 20:51:27 [INFO] [evolutionary_search.cc:649] Scores of the best 64 candidates:
[1 : 16]:	0.9997  0.9997  0.9981  0.9981  0.9975  0.9973  0.9969  0.9969  0.9968  0.9966  0.9949  0.9949  0.9941  0.9938  0.9935  0.9925
[17 : 32]:	0.9925  0.9924  0.9921  0.9905  0.9899  0.9872  0.9870  0.9868  0.9866  0.9853  0.9842  0.9842  0.9836  0.9835  0.9830  0.9823
[33 : 48]:	0.9820  0.9817  0.9813  0.9810  0.9799  0.9796  0.9790  0.9776  0.9776  0.9774  0.9764  0.9747  0.9746  0.9742  0.9742  0.9741
[49 : 64]:	0.9735  0.9732  0.9730  0.9724  0.9720  0.9716  0.9716  0.9710  0.9709  0.9704  0.9701  0.9694  0.9681  0.9677  0.9675  0.9670
2024-04-28 20:51:27 [INFO] [evolutionary_search.cc:727] Got 64 candidate(s) with evolutionary search
2024-04-28 20:51:27 [INFO] [evolutionary_search.cc:730] Sending 64 candidates(s) for measurement
2024-04-28 21:12:23 [INFO] [task_scheduler.cc:131] [Task #13: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #1: GFLOPs: 65.4729. Time: 3534.4630 us. Best GFLOPs: 65.4729
2024-04-28 21:12:23 [INFO] [task_scheduler.cc:131] [Task #13: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #2: GFLOPs: 108.0302. Time: 2142.1024 us. Best GFLOPs: 108.0302
2024-04-28 21:12:23 [INFO] [task_scheduler.cc:131] [Task #13: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #3: GFLOPs: 22.9753. Time: 10072.1845 us. Best GFLOPs: 108.0302
2024-04-28 21:12:23 [INFO] [task_scheduler.cc:131] [Task #13: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #4: GFLOPs: 2.9220. Time: 79196.7443 us. Best GFLOPs: 108.0302
2024-04-28 21:12:23 [INFO] [task_scheduler.cc:131] [Task #13: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #5: GFLOPs: 2.7788. Time: 83277.0560 us. Best GFLOPs: 108.0302
2024-04-28 21:12:23 [INFO] [task_scheduler.cc:131] [Task #13: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #6: GFLOPs: 70.7944. Time: 3268.7876 us. Best GFLOPs: 108.0302
2024-04-28 21:12:23 [INFO] [task_scheduler.cc:131] [Task #13: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #7: GFLOPs: 85.1229. Time: 2718.5587 us. Best GFLOPs: 108.0302
2024-04-28 21:12:23 [INFO] [task_scheduler.cc:131] [Task #13: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #8: GFLOPs: 49.2294. Time: 4700.6765 us. Best GFLOPs: 108.0302
2024-04-28 21:12:23 [INFO] [task_scheduler.cc:131] [Task #13: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #9: GFLOPs: 97.0925. Time: 2383.4139 us. Best GFLOPs: 108.0302
2024-04-28 21:12:23 [INFO] [task_scheduler.cc:131] [Task #13: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #10: GFLOPs: 108.1032. Time: 2140.6552 us. Best GFLOPs: 108.1032
2024-04-28 21:12:23 [INFO] [task_scheduler.cc:131] [Task #13: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #11: GFLOPs: 6.0342. Time: 38350.0787 us. Best GFLOPs: 108.1032
2024-04-28 21:12:23 [INFO] [task_scheduler.cc:131] [Task #13: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #12: GFLOPs: 43.7876. Time: 5284.8658 us. Best GFLOPs: 108.1032
2024-04-28 21:12:23 [INFO] [task_scheduler.cc:121] [Task #13: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #13: Error in building:
LocalBuilder: Timeout, killed after 30.0 seconds
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(1), T.int64(28), T.int64(28), T.int64(128)), "float32"), p1: T.Buffer((T.int64(4), T.int64(1), T.int64(3), T.int64(3), T.int64(128), T.int64(32)), "float32"), p2: T.Buffer((T.int64(1), T.int64(4), T.int64(1), T.int64(1), T.int64(32)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(4), T.int64(28), T.int64(28), T.int64(32)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        data_pad = T.alloc_buffer((T.int64(1), T.int64(1), T.int64(30), T.int64(30), T.int64(128)))
        conv2d_NCHWc = T.alloc_buffer((T.int64(1), T.int64(4), T.int64(28), T.int64(28), T.int64(32)))
        for n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused_fused in T.parallel(T.int64(64), annotations={"pragma_auto_unroll_max_step": 512, "pragma_unroll_explicit": 1}):
            for n_2_init, oc_chunk_2_init, oh_2_init, ow_2_init, oc_block_2_init, n_3_init, oc_chunk_3_init, oh_3_init, ow_3_init, oc_block_3_init in T.grid(T.int64(1), T.int64(2), T.int64(14), T.int64(4), T.int64(2), T.int64(1), T.int64(1), T.int64(1), T.int64(7), T.int64(1)):
                with T.block("conv2d_NCHWc_init"):
                    v_n = T.axis.spatial(T.int64(1), n_2_init + n_3_init)
                    v_oc_chunk = T.axis.spatial(T.int64(4), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused_fused % T.int64(4) // T.int64(2) * T.int64(2) + oc_chunk_2_init + oc_chunk_3_init)
                    v_oh = T.axis.spatial(T.int64(28), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused_fused // T.int64(32) * T.int64(14) + oh_2_init + oh_3_init)
                    v_ow = T.axis.spatial(T.int64(28), ow_2_init * T.int64(7) + ow_3_init)
                    v_oc_block = T.axis.spatial(T.int64(32), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused_fused % T.int64(32) // T.int64(4) * T.int64(4) + n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused_fused % T.int64(2) * T.int64(2) + oc_block_2_init + oc_block_3_init)
                    T.reads()
                    T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                    T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                    conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = T.float32(0)
            for ic_0 in range(T.int64(16)):
                for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(1), T.int64(16), T.int64(30)):
                    for ax4_fused in T.vectorized(T.int64(8)):
                        with T.block("data_pad"):
                            v_i0, v_i1 = T.axis.remap("SS", [ax0, ax1])
                            v_i2 = T.axis.spatial(T.int64(30), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused_fused // T.int64(32) * T.int64(14) + ax2)
                            v_i3 = T.axis.spatial(T.int64(30), ax3)
                            v_i4 = T.axis.spatial(T.int64(128), ic_0 * T.int64(8) + ax4_fused)
                            T.reads(p0[v_i0, v_i1, v_i2 - T.int64(1), v_i3 - T.int64(1), v_i4])
                            T.writes(data_pad[v_i0, v_i1, v_i2, v_i3, v_i4])
                            data_pad[v_i0, v_i1, v_i2, v_i3, v_i4] = T.if_then_else(T.int64(1) <= v_i2 and v_i2 < T.int64(29) and T.int64(1) <= v_i3 and v_i3 < T.int64(29), p0[v_i0, v_i1, v_i2 - T.int64(1), v_i3 - T.int64(1), v_i4], T.float32(0))
                for kh_0, kw_0, n_2, oc_chunk_2, oh_2, ow_2, oc_block_2, ic_1, kh_1, kw_1, n_3, oc_chunk_3, oh_3, ow_3, oc_block_3 in T.grid(T.int64(3), T.int64(3), T.int64(1), T.int64(2), T.int64(14), T.int64(4), T.int64(2), T.int64(8), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(7), T.int64(1)):
                    with T.block("conv2d_NCHWc_update"):
                        v_n = T.axis.spatial(T.int64(1), n_2 + n_3)
                        v_oc_chunk = T.axis.spatial(T.int64(4), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused_fused % T.int64(4) // T.int64(2) * T.int64(2) + oc_chunk_2 + oc_chunk_3)
                        v_oh = T.axis.spatial(T.int64(28), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused_fused // T.int64(32) * T.int64(14) + oh_2 + oh_3)
                        v_ow = T.axis.spatial(T.int64(28), ow_2 * T.int64(7) + ow_3)
                        v_oc_block = T.axis.spatial(T.int64(32), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused_fused % T.int64(32) // T.int64(4) * T.int64(4) + n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused_fused % T.int64(2) * T.int64(2) + oc_block_2 + oc_block_3)
                        v_ic = T.axis.reduce(T.int64(128), ic_0 * T.int64(8) + ic_1)
                        v_kh = T.axis.reduce(T.int64(3), kh_0 + kh_1)
                        v_kw = T.axis.reduce(T.int64(3), kw_0 + kw_1)
                        T.reads(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block], data_pad[v_n, v_ic // T.int64(128), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(128)], p1[v_oc_chunk, v_ic // T.int64(128), v_kh, v_kw, v_ic % T.int64(128), v_oc_block])
                        T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                        T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                        conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] + data_pad[v_n, v_ic // T.int64(128), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(128)] * p1[v_oc_chunk, v_ic // T.int64(128), v_kh, v_kw, v_ic % T.int64(128), v_oc_block]
            for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(2), T.int64(14), T.int64(28)):
                for ax4_fused in T.vectorized(T.int64(2)):
                    with T.block("T_relu"):
                        v_ax0 = T.axis.spatial(T.int64(1), ax0)
                        v_ax1 = T.axis.spatial(T.int64(4), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused_fused % T.int64(4) // T.int64(2) * T.int64(2) + ax1)
                        v_ax2 = T.axis.spatial(T.int64(28), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused_fused // T.int64(32) * T.int64(14) + ax2)
                        v_ax3 = T.axis.spatial(T.int64(28), ax3)
                        v_ax4 = T.axis.spatial(T.int64(32), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused_fused % T.int64(32) // T.int64(4) * T.int64(4) + n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused_fused % T.int64(2) * T.int64(2) + ax4_fused)
                        T.reads(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4])
                        T.writes(T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                        T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.max(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] + p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4], T.float32(0))
b0 = sch.get_block(name="data_pad", func_name="main")
b1 = sch.get_block(name="conv2d_NCHWc", func_name="main")
b2 = sch.get_block(name="T_add", func_name="main")
b3 = sch.get_block(name="root", func_name="main")
sch.compute_inline(block=b2)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSRSRS")
l4, l5, l6, l7, l8, l9, l10, l11 = sch.get_loops(block=b1)
v12, v13, v14, v15 = sch.sample_perfect_tile(loop=l4, n=4, max_innermost_factor=64, decision=[1, 1, 1, 1])
l16, l17, l18, l19 = sch.split(loop=l4, factors=[v12, v13, v14, v15], preserve_unit_iters=True)
v20, v21, v22, v23 = sch.sample_perfect_tile(loop=l5, n=4, max_innermost_factor=64, decision=[1, 2, 2, 1])
l24, l25, l26, l27 = sch.split(loop=l5, factors=[v20, v21, v22, v23], preserve_unit_iters=True)
v28, v29, v30, v31 = sch.sample_perfect_tile(loop=l6, n=4, max_innermost_factor=64, decision=[2, 1, 14, 1])
l32, l33, l34, l35 = sch.split(loop=l6, factors=[v28, v29, v30, v31], preserve_unit_iters=True)
v36, v37, v38, v39 = sch.sample_perfect_tile(loop=l7, n=4, max_innermost_factor=64, decision=[1, 1, 4, 7])
l40, l41, l42, l43 = sch.split(loop=l7, factors=[v36, v37, v38, v39], preserve_unit_iters=True)
v44, v45, v46, v47 = sch.sample_perfect_tile(loop=l8, n=4, max_innermost_factor=64, decision=[8, 2, 2, 1])
l48, l49, l50, l51 = sch.split(loop=l8, factors=[v44, v45, v46, v47], preserve_unit_iters=True)
v52, v53 = sch.sample_perfect_tile(loop=l9, n=2, max_innermost_factor=64, decision=[16, 8])
l54, l55 = sch.split(loop=l9, factors=[v52, v53], preserve_unit_iters=True)
v56, v57 = sch.sample_perfect_tile(loop=l10, n=2, max_innermost_factor=64, decision=[3, 1])
l58, l59 = sch.split(loop=l10, factors=[v56, v57], preserve_unit_iters=True)
v60, v61 = sch.sample_perfect_tile(loop=l11, n=2, max_innermost_factor=64, decision=[3, 1])
l62, l63 = sch.split(loop=l11, factors=[v60, v61], preserve_unit_iters=True)
sch.reorder(l16, l24, l32, l40, l48, l17, l25, l33, l41, l49, l54, l58, l62, l18, l26, l34, l42, l50, l55, l59, l63, l19, l27, l35, l43, l51)
b64, = sch.get_consumers(block=b1)
sch.reverse_compute_at(block=b64, loop=l49, preserve_unit_loops=True, index=-1)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.vectorize", ann_val=64)
v65 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.unroll_explicit", ann_val=v65)
l66 = sch.sample_compute_location(block=b0, decision=10)
sch.compute_at(block=b0, loop=l66, preserve_unit_loops=True, index=-1)
sch.enter_postproc()
b67 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b67, ann_key="meta_schedule.parallel")
sch.unannotate(block_or_loop=b67, ann_key="meta_schedule.vectorize")
sch.unannotate(block_or_loop=b67, ann_key="meta_schedule.unroll_explicit")
b68, b69, b70 = sch.get_child_blocks(b67)
l71, l72, l73, l74, l75, l76, l77, l78, l79, l80, l81, l82, l83, l84, l85, l86 = sch.get_loops(block=b68)
l87 = sch.fuse(l71, l72, l73, l74, l75, l76, l77, l78, l79, l80, preserve_unit_iters=True)
sch.parallel(loop=l87)
l88 = sch.fuse(l86, preserve_unit_iters=True)
sch.vectorize(loop=l88)
l89, l90, l91, l92, l93, l94, l95, l96, l97, l98, l99, l100, l101, l102, l103, l104, l105 = sch.get_loops(block=b69)
l106 = sch.fuse(l89, preserve_unit_iters=True)
sch.parallel(loop=l106)
sch.annotate(block_or_loop=l106, ann_key="pragma_auto_unroll_max_step", ann_val=512)
sch.annotate(block_or_loop=l106, ann_key="pragma_unroll_explicit", ann_val=1)
l107, l108, l109, l110, l111, l112 = sch.get_loops(block=b70)
l113 = sch.fuse(l112, preserve_unit_iters=True)
sch.vectorize(loop=l113)
b114 = sch.get_block(name="conv2d_NCHWc", func_name="main")
l115, l116, l117, l118, l119, l120, l121, l122, l123, l124, l125, l126, l127, l128, l129, l130, l131 = sch.get_loops(block=b114)
b132 = sch.decompose_reduction(block=b114, loop=l116)
2024-04-28 21:12:23 [INFO] [task_scheduler.cc:131] [Task #13: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #14: GFLOPs: 4.4030. Time: 52557.5143 us. Best GFLOPs: 108.1032
2024-04-28 21:12:23 [INFO] [task_scheduler.cc:131] [Task #13: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #15: GFLOPs: 28.3274. Time: 8169.1901 us. Best GFLOPs: 108.1032
2024-04-28 21:12:23 [INFO] [task_scheduler.cc:131] [Task #13: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #16: GFLOPs: 68.3076. Time: 3387.7880 us. Best GFLOPs: 108.1032
2024-04-28 21:12:23 [INFO] [task_scheduler.cc:131] [Task #13: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #17: GFLOPs: 41.3081. Time: 5602.0937 us. Best GFLOPs: 108.1032
2024-04-28 21:12:23 [INFO] [task_scheduler.cc:131] [Task #13: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #18: GFLOPs: 15.4411. Time: 14986.7526 us. Best GFLOPs: 108.1032
2024-04-28 21:12:23 [INFO] [task_scheduler.cc:131] [Task #13: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #19: GFLOPs: 2.0067. Time: 115318.1007 us. Best GFLOPs: 108.1032
2024-04-28 21:12:23 [INFO] [task_scheduler.cc:121] [Task #13: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #20: Error in building:
LocalBuilder: Timeout, killed after 30.0 seconds
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(1), T.int64(28), T.int64(28), T.int64(128)), "float32"), p1: T.Buffer((T.int64(4), T.int64(1), T.int64(3), T.int64(3), T.int64(128), T.int64(32)), "float32"), p2: T.Buffer((T.int64(1), T.int64(4), T.int64(1), T.int64(1), T.int64(32)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(4), T.int64(28), T.int64(28), T.int64(32)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        data_pad = T.alloc_buffer((T.int64(1), T.int64(1), T.int64(30), T.int64(30), T.int64(128)))
        conv2d_NCHWc = T.alloc_buffer((T.int64(1), T.int64(4), T.int64(28), T.int64(28), T.int64(32)))
        for n_0_oc_chunk_0_oh_0_ow_0_fused_fused in T.parallel(T.int64(392), annotations={"pragma_auto_unroll_max_step": 512, "pragma_unroll_explicit": 1}):
            for ax0, ax1, ax2, ax3, ax4 in T.grid(T.int64(1), T.int64(1), T.int64(4), T.int64(4), T.int64(128)):
                with T.block("data_pad"):
                    v_i0, v_i1 = T.axis.remap("SS", [ax0, ax1])
                    v_i2 = T.axis.spatial(T.int64(30), n_0_oc_chunk_0_oh_0_ow_0_fused_fused % T.int64(196) // T.int64(14) * T.int64(2) + ax2)
                    v_i3 = T.axis.spatial(T.int64(30), n_0_oc_chunk_0_oh_0_ow_0_fused_fused % T.int64(14) * T.int64(2) + ax3)
                    v_i4 = T.axis.spatial(T.int64(128), ax4)
                    T.reads(p0[v_i0, v_i1, v_i2 - T.int64(1), v_i3 - T.int64(1), v_i4])
                    T.writes(data_pad[v_i0, v_i1, v_i2, v_i3, v_i4])
                    data_pad[v_i0, v_i1, v_i2, v_i3, v_i4] = T.if_then_else(T.int64(1) <= v_i2 and v_i2 < T.int64(29) and T.int64(1) <= v_i3 and v_i3 < T.int64(29), p0[v_i0, v_i1, v_i2 - T.int64(1), v_i3 - T.int64(1), v_i4], T.float32(0))
            for oc_block_0, n_1, oc_chunk_1, oh_1, ow_1, oc_block_1 in T.grid(T.int64(1), T.int64(1), T.int64(2), T.int64(1), T.int64(1), T.int64(2)):
                for n_2_init, oc_chunk_2_init, oh_2_init, ow_2_init, oc_block_2_init, n_3_init, oc_chunk_3_init, oh_3_init, ow_3_init in T.grid(T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(1), T.int64(1), T.int64(2), T.int64(2)):
                    for oc_block_3_fused_init in T.vectorized(T.int64(8)):
                        with T.block("conv2d_NCHWc_init"):
                            v_n = T.axis.spatial(T.int64(1), n_1 + n_2_init + n_3_init)
                            v_oc_chunk = T.axis.spatial(T.int64(4), n_0_oc_chunk_0_oh_0_ow_0_fused_fused // T.int64(196) * T.int64(2) + oc_chunk_1 + oc_chunk_2_init + oc_chunk_3_init)
                            v_oh = T.axis.spatial(T.int64(28), n_0_oc_chunk_0_oh_0_ow_0_fused_fused % T.int64(196) // T.int64(14) * T.int64(2) + oh_1 * T.int64(2) + oh_2_init * T.int64(2) + oh_3_init)
                            v_ow = T.axis.spatial(T.int64(28), n_0_oc_chunk_0_oh_0_ow_0_fused_fused % T.int64(14) * T.int64(2) + ow_1 * T.int64(2) + ow_2_init * T.int64(2) + ow_3_init)
                            v_oc_block = T.axis.spatial(T.int64(32), oc_block_0 * T.int64(32) + oc_block_1 * T.int64(16) + oc_block_2_init * T.int64(8) + oc_block_3_fused_init)
                            T.reads()
                            T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                            T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                            conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = T.float32(0)
                for ic_0, kh_0, kw_0, n_2, oc_chunk_2, oh_2, ow_2, oc_block_2, ic_1, kh_1, kw_1, n_3, oc_chunk_3, oh_3, ow_3 in T.grid(T.int64(128), T.int64(3), T.int64(3), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(2)):
                    for oc_block_3_fused in T.vectorized(T.int64(8)):
                        with T.block("conv2d_NCHWc_update"):
                            v_n = T.axis.spatial(T.int64(1), n_1 + n_2 + n_3)
                            v_oc_chunk = T.axis.spatial(T.int64(4), n_0_oc_chunk_0_oh_0_ow_0_fused_fused // T.int64(196) * T.int64(2) + oc_chunk_1 + oc_chunk_2 + oc_chunk_3)
                            v_oh = T.axis.spatial(T.int64(28), n_0_oc_chunk_0_oh_0_ow_0_fused_fused % T.int64(196) // T.int64(14) * T.int64(2) + oh_1 * T.int64(2) + oh_2 * T.int64(2) + oh_3)
                            v_ow = T.axis.spatial(T.int64(28), n_0_oc_chunk_0_oh_0_ow_0_fused_fused % T.int64(14) * T.int64(2) + ow_1 * T.int64(2) + ow_2 * T.int64(2) + ow_3)
                            v_oc_block = T.axis.spatial(T.int64(32), oc_block_0 * T.int64(32) + oc_block_1 * T.int64(16) + oc_block_2 * T.int64(8) + oc_block_3_fused)
                            v_ic = T.axis.reduce(T.int64(128), ic_0 + ic_1)
                            v_kh = T.axis.reduce(T.int64(3), kh_0 + kh_1)
                            v_kw = T.axis.reduce(T.int64(3), kw_0 + kw_1)
                            T.reads(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block], data_pad[v_n, v_ic // T.int64(128), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(128)], p1[v_oc_chunk, v_ic // T.int64(128), v_kh, v_kw, v_ic % T.int64(128), v_oc_block])
                            T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                            T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                            conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] + data_pad[v_n, v_ic // T.int64(128), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(128)] * p1[v_oc_chunk, v_ic // T.int64(128), v_kh, v_kw, v_ic % T.int64(128), v_oc_block]
                for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(1), T.int64(2), T.int64(2)):
                    for ax4_fused in T.vectorized(T.int64(16)):
                        with T.block("T_relu"):
                            v_ax0 = T.axis.spatial(T.int64(1), ax0)
                            v_ax1 = T.axis.spatial(T.int64(4), n_0_oc_chunk_0_oh_0_ow_0_fused_fused // T.int64(196) * T.int64(2) + oc_chunk_1 + ax1)
                            v_ax2 = T.axis.spatial(T.int64(28), n_0_oc_chunk_0_oh_0_ow_0_fused_fused % T.int64(196) // T.int64(14) * T.int64(2) + ax2)
                            v_ax3 = T.axis.spatial(T.int64(28), n_0_oc_chunk_0_oh_0_ow_0_fused_fused % T.int64(14) * T.int64(2) + ax3)
                            v_ax4 = T.axis.spatial(T.int64(32), oc_block_1 * T.int64(16) + ax4_fused)
                            T.reads(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4])
                            T.writes(T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                            T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.max(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] + p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4], T.float32(0))
b0 = sch.get_block(name="data_pad", func_name="main")
b1 = sch.get_block(name="conv2d_NCHWc", func_name="main")
b2 = sch.get_block(name="T_add", func_name="main")
b3 = sch.get_block(name="root", func_name="main")
sch.compute_inline(block=b2)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSRSRS")
l4, l5, l6, l7, l8, l9, l10, l11 = sch.get_loops(block=b1)
v12, v13, v14, v15 = sch.sample_perfect_tile(loop=l4, n=4, max_innermost_factor=64, decision=[1, 1, 1, 1])
l16, l17, l18, l19 = sch.split(loop=l4, factors=[v12, v13, v14, v15], preserve_unit_iters=True)
v20, v21, v22, v23 = sch.sample_perfect_tile(loop=l5, n=4, max_innermost_factor=64, decision=[2, 2, 1, 1])
l24, l25, l26, l27 = sch.split(loop=l5, factors=[v20, v21, v22, v23], preserve_unit_iters=True)
v28, v29, v30, v31 = sch.sample_perfect_tile(loop=l6, n=4, max_innermost_factor=64, decision=[14, 1, 1, 2])
l32, l33, l34, l35 = sch.split(loop=l6, factors=[v28, v29, v30, v31], preserve_unit_iters=True)
v36, v37, v38, v39 = sch.sample_perfect_tile(loop=l7, n=4, max_innermost_factor=64, decision=[14, 1, 1, 2])
l40, l41, l42, l43 = sch.split(loop=l7, factors=[v36, v37, v38, v39], preserve_unit_iters=True)
v44, v45, v46, v47 = sch.sample_perfect_tile(loop=l8, n=4, max_innermost_factor=64, decision=[1, 2, 2, 8])
l48, l49, l50, l51 = sch.split(loop=l8, factors=[v44, v45, v46, v47], preserve_unit_iters=True)
v52, v53 = sch.sample_perfect_tile(loop=l9, n=2, max_innermost_factor=64, decision=[128, 1])
l54, l55 = sch.split(loop=l9, factors=[v52, v53], preserve_unit_iters=True)
v56, v57 = sch.sample_perfect_tile(loop=l10, n=2, max_innermost_factor=64, decision=[3, 1])
l58, l59 = sch.split(loop=l10, factors=[v56, v57], preserve_unit_iters=True)
v60, v61 = sch.sample_perfect_tile(loop=l11, n=2, max_innermost_factor=64, decision=[3, 1])
l62, l63 = sch.split(loop=l11, factors=[v60, v61], preserve_unit_iters=True)
sch.reorder(l16, l24, l32, l40, l48, l17, l25, l33, l41, l49, l54, l58, l62, l18, l26, l34, l42, l50, l55, l59, l63, l19, l27, l35, l43, l51)
b64, = sch.get_consumers(block=b1)
sch.reverse_compute_at(block=b64, loop=l49, preserve_unit_loops=True, index=-1)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.vectorize", ann_val=64)
v65 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.unroll_explicit", ann_val=v65)
l66 = sch.sample_compute_location(block=b0, decision=3)
sch.compute_at(block=b0, loop=l66, preserve_unit_loops=True, index=-1)
sch.enter_postproc()
b67 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b67, ann_key="meta_schedule.parallel")
sch.unannotate(block_or_loop=b67, ann_key="meta_schedule.vectorize")
sch.unannotate(block_or_loop=b67, ann_key="meta_schedule.unroll_explicit")
b68, b69, b70 = sch.get_child_blocks(b67)
l71, l72, l73, l74, l75, l76, l77, l78, l79 = sch.get_loops(block=b68)
l80 = sch.fuse(l71, l72, l73, l74, preserve_unit_iters=True)
sch.parallel(loop=l80)
l81, l82, l83, l84, l85, l86, l87, l88, l89, l90, l91, l92, l93, l94, l95, l96, l97, l98, l99, l100, l101, l102, l103 = sch.get_loops(block=b69)
l104 = sch.fuse(l81, preserve_unit_iters=True)
sch.parallel(loop=l104)
l105 = sch.fuse(l103, preserve_unit_iters=True)
sch.vectorize(loop=l105)
sch.annotate(block_or_loop=l104, ann_key="pragma_auto_unroll_max_step", ann_val=512)
sch.annotate(block_or_loop=l104, ann_key="pragma_unroll_explicit", ann_val=1)
l106, l107, l108, l109, l110, l111, l112, l113, l114, l115, l116, l117 = sch.get_loops(block=b70)
l118 = sch.fuse(l117, preserve_unit_iters=True)
sch.vectorize(loop=l118)
b119 = sch.get_block(name="conv2d_NCHWc", func_name="main")
l120, l121, l122, l123, l124, l125, l126, l127, l128, l129, l130, l131, l132, l133, l134, l135, l136, l137, l138, l139, l140, l141, l142 = sch.get_loops(block=b119)
b143 = sch.decompose_reduction(block=b119, loop=l127)
2024-04-28 21:12:23 [INFO] [task_scheduler.cc:131] [Task #13: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #21: GFLOPs: 16.4320. Time: 14082.9942 us. Best GFLOPs: 108.1032
2024-04-28 21:12:23 [INFO] [task_scheduler.cc:131] [Task #13: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #22: GFLOPs: 4.1931. Time: 55188.9670 us. Best GFLOPs: 108.1032
2024-04-28 21:12:23 [INFO] [task_scheduler.cc:131] [Task #13: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #23: GFLOPs: 43.5776. Time: 5310.3405 us. Best GFLOPs: 108.1032
2024-04-28 21:12:23 [INFO] [task_scheduler.cc:131] [Task #13: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #24: GFLOPs: 9.4213. Time: 24562.6944 us. Best GFLOPs: 108.1032
2024-04-28 21:12:23 [INFO] [task_scheduler.cc:131] [Task #13: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #25: GFLOPs: 22.4057. Time: 10328.2610 us. Best GFLOPs: 108.1032
2024-04-28 21:12:23 [INFO] [task_scheduler.cc:131] [Task #13: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #26: GFLOPs: 36.7195. Time: 6302.1511 us. Best GFLOPs: 108.1032
2024-04-28 21:12:23 [INFO] [task_scheduler.cc:131] [Task #13: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #27: GFLOPs: 18.7414. Time: 12347.6074 us. Best GFLOPs: 108.1032
2024-04-28 21:12:23 [INFO] [task_scheduler.cc:131] [Task #13: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #28: GFLOPs: 3.7556. Time: 61618.1930 us. Best GFLOPs: 108.1032
2024-04-28 21:12:23 [INFO] [task_scheduler.cc:131] [Task #13: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #29: GFLOPs: 18.7554. Time: 12338.3978 us. Best GFLOPs: 108.1032
2024-04-28 21:12:23 [INFO] [task_scheduler.cc:131] [Task #13: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #30: GFLOPs: 2.3911. Time: 96782.1060 us. Best GFLOPs: 108.1032
2024-04-28 21:12:23 [INFO] [task_scheduler.cc:131] [Task #13: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #31: GFLOPs: 71.2420. Time: 3248.2498 us. Best GFLOPs: 108.1032
2024-04-28 21:12:23 [INFO] [task_scheduler.cc:131] [Task #13: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #32: GFLOPs: 34.2340. Time: 6759.6957 us. Best GFLOPs: 108.1032
2024-04-28 21:12:23 [INFO] [task_scheduler.cc:131] [Task #13: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #33: GFLOPs: 20.2293. Time: 11439.4527 us. Best GFLOPs: 108.1032
2024-04-28 21:12:23 [INFO] [task_scheduler.cc:131] [Task #13: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #34: GFLOPs: 1.4521. Time: 159360.7590 us. Best GFLOPs: 108.1032
2024-04-28 21:12:23 [INFO] [task_scheduler.cc:121] [Task #13: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #35: Error in building:
LocalBuilder: Timeout, killed after 30.0 seconds
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(1), T.int64(28), T.int64(28), T.int64(128)), "float32"), p1: T.Buffer((T.int64(4), T.int64(1), T.int64(3), T.int64(3), T.int64(128), T.int64(32)), "float32"), p2: T.Buffer((T.int64(1), T.int64(4), T.int64(1), T.int64(1), T.int64(32)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(4), T.int64(28), T.int64(28), T.int64(32)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        data_pad = T.alloc_buffer((T.int64(1), T.int64(1), T.int64(30), T.int64(30), T.int64(128)))
        conv2d_NCHWc = T.alloc_buffer((T.int64(1), T.int64(4), T.int64(28), T.int64(28), T.int64(32)))
        for n_0_oc_chunk_0_oh_0_ow_0_fused_fused in T.parallel(T.int64(7), annotations={"pragma_auto_unroll_max_step": 512, "pragma_unroll_explicit": 1}):
            for ax0, ax1, ax2, ax3, ax4 in T.grid(T.int64(1), T.int64(1), T.int64(30), T.int64(6), T.int64(128)):
                with T.block("data_pad"):
                    v_i0, v_i1, v_i2 = T.axis.remap("SSS", [ax0, ax1, ax2])
                    v_i3 = T.axis.spatial(T.int64(30), n_0_oc_chunk_0_oh_0_ow_0_fused_fused * T.int64(4) + ax3)
                    v_i4 = T.axis.spatial(T.int64(128), ax4)
                    T.reads(p0[v_i0, v_i1, v_i2 - T.int64(1), v_i3 - T.int64(1), v_i4])
                    T.writes(data_pad[v_i0, v_i1, v_i2, v_i3, v_i4])
                    data_pad[v_i0, v_i1, v_i2, v_i3, v_i4] = T.if_then_else(T.int64(1) <= v_i2 and v_i2 < T.int64(29) and T.int64(1) <= v_i3 and v_i3 < T.int64(29), p0[v_i0, v_i1, v_i2 - T.int64(1), v_i3 - T.int64(1), v_i4], T.float32(0))
            for oc_block_0 in range(T.int64(1)):
                for n_1, oc_chunk_1, oh_1, ow_1, oc_block_1 in T.grid(T.int64(1), T.int64(1), T.int64(2), T.int64(4), T.int64(1)):
                    for n_2_init, oc_chunk_2_init, oh_2_init, ow_2_init, oc_block_2_init, n_3_init, oc_chunk_3_init, oh_3_init, ow_3_init in T.grid(T.int64(1), T.int64(4), T.int64(1), T.int64(1), T.int64(8), T.int64(1), T.int64(1), T.int64(14), T.int64(1)):
                        for oc_block_3_fused_init in T.vectorized(T.int64(4)):
                            with T.block("conv2d_NCHWc_init"):
                                v_n = T.axis.spatial(T.int64(1), n_1 + n_2_init + n_3_init)
                                v_oc_chunk = T.axis.spatial(T.int64(4), oc_chunk_1 * T.int64(4) + oc_chunk_2_init + oc_chunk_3_init)
                                v_oh = T.axis.spatial(T.int64(28), oh_1 * T.int64(14) + oh_2_init * T.int64(14) + oh_3_init)
                                v_ow = T.axis.spatial(T.int64(28), n_0_oc_chunk_0_oh_0_ow_0_fused_fused * T.int64(4) + ow_1 + ow_2_init + ow_3_init)
                                v_oc_block = T.axis.spatial(T.int64(32), oc_block_0 * T.int64(32) + oc_block_1 * T.int64(32) + oc_block_2_init * T.int64(4) + oc_block_3_fused_init)
                                T.reads()
                                T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                                T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                                conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = T.float32(0)
                    for ic_0, kh_0, kw_0, n_2, oc_chunk_2, oh_2, ow_2, oc_block_2, ic_1, kh_1, kw_1, n_3, oc_chunk_3, oh_3, ow_3 in T.grid(T.int64(2), T.int64(3), T.int64(1), T.int64(1), T.int64(4), T.int64(1), T.int64(1), T.int64(8), T.int64(64), T.int64(1), T.int64(3), T.int64(1), T.int64(1), T.int64(14), T.int64(1)):
                        for oc_block_3_fused in T.vectorized(T.int64(4)):
                            with T.block("conv2d_NCHWc_update"):
                                v_n = T.axis.spatial(T.int64(1), n_1 + n_2 + n_3)
                                v_oc_chunk = T.axis.spatial(T.int64(4), oc_chunk_1 * T.int64(4) + oc_chunk_2 + oc_chunk_3)
                                v_oh = T.axis.spatial(T.int64(28), oh_1 * T.int64(14) + oh_2 * T.int64(14) + oh_3)
                                v_ow = T.axis.spatial(T.int64(28), n_0_oc_chunk_0_oh_0_ow_0_fused_fused * T.int64(4) + ow_1 + ow_2 + ow_3)
                                v_oc_block = T.axis.spatial(T.int64(32), oc_block_0 * T.int64(32) + oc_block_1 * T.int64(32) + oc_block_2 * T.int64(4) + oc_block_3_fused)
                                v_ic = T.axis.reduce(T.int64(128), ic_0 * T.int64(64) + ic_1)
                                v_kh = T.axis.reduce(T.int64(3), kh_0 + kh_1)
                                v_kw = T.axis.reduce(T.int64(3), kw_0 * T.int64(3) + kw_1)
                                T.reads(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block], data_pad[v_n, v_ic // T.int64(128), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(128)], p1[v_oc_chunk, v_ic // T.int64(128), v_kh, v_kw, v_ic % T.int64(128), v_oc_block])
                                T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                                T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                                conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] + data_pad[v_n, v_ic // T.int64(128), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(128)] * p1[v_oc_chunk, v_ic // T.int64(128), v_kh, v_kw, v_ic % T.int64(128), v_oc_block]
                for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(4), T.int64(28), T.int64(4)):
                    for ax4_fused in T.vectorized(T.int64(32)):
                        with T.block("T_relu"):
                            v_ax0, v_ax1, v_ax2 = T.axis.remap("SSS", [ax0, ax1, ax2])
                            v_ax3 = T.axis.spatial(T.int64(28), n_0_oc_chunk_0_oh_0_ow_0_fused_fused * T.int64(4) + ax3)
                            v_ax4 = T.axis.spatial(T.int64(32), ax4_fused)
                            T.reads(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4])
                            T.writes(T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                            T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.max(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] + p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4], T.float32(0))
b0 = sch.get_block(name="data_pad", func_name="main")
b1 = sch.get_block(name="conv2d_NCHWc", func_name="main")
b2 = sch.get_block(name="T_add", func_name="main")
b3 = sch.get_block(name="root", func_name="main")
sch.compute_inline(block=b2)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSRSRS")
l4, l5, l6, l7, l8, l9, l10, l11 = sch.get_loops(block=b1)
v12, v13, v14, v15 = sch.sample_perfect_tile(loop=l4, n=4, max_innermost_factor=64, decision=[1, 1, 1, 1])
l16, l17, l18, l19 = sch.split(loop=l4, factors=[v12, v13, v14, v15], preserve_unit_iters=True)
v20, v21, v22, v23 = sch.sample_perfect_tile(loop=l5, n=4, max_innermost_factor=64, decision=[1, 1, 4, 1])
l24, l25, l26, l27 = sch.split(loop=l5, factors=[v20, v21, v22, v23], preserve_unit_iters=True)
v28, v29, v30, v31 = sch.sample_perfect_tile(loop=l6, n=4, max_innermost_factor=64, decision=[1, 2, 1, 14])
l32, l33, l34, l35 = sch.split(loop=l6, factors=[v28, v29, v30, v31], preserve_unit_iters=True)
v36, v37, v38, v39 = sch.sample_perfect_tile(loop=l7, n=4, max_innermost_factor=64, decision=[7, 4, 1, 1])
l40, l41, l42, l43 = sch.split(loop=l7, factors=[v36, v37, v38, v39], preserve_unit_iters=True)
v44, v45, v46, v47 = sch.sample_perfect_tile(loop=l8, n=4, max_innermost_factor=64, decision=[1, 1, 8, 4])
l48, l49, l50, l51 = sch.split(loop=l8, factors=[v44, v45, v46, v47], preserve_unit_iters=True)
v52, v53 = sch.sample_perfect_tile(loop=l9, n=2, max_innermost_factor=64, decision=[2, 64])
l54, l55 = sch.split(loop=l9, factors=[v52, v53], preserve_unit_iters=True)
v56, v57 = sch.sample_perfect_tile(loop=l10, n=2, max_innermost_factor=64, decision=[3, 1])
l58, l59 = sch.split(loop=l10, factors=[v56, v57], preserve_unit_iters=True)
v60, v61 = sch.sample_perfect_tile(loop=l11, n=2, max_innermost_factor=64, decision=[1, 3])
l62, l63 = sch.split(loop=l11, factors=[v60, v61], preserve_unit_iters=True)
sch.reorder(l16, l24, l32, l40, l48, l17, l25, l33, l41, l49, l54, l58, l62, l18, l26, l34, l42, l50, l55, l59, l63, l19, l27, l35, l43, l51)
b64, = sch.get_consumers(block=b1)
sch.reverse_compute_at(block=b64, loop=l48, preserve_unit_loops=True, index=-1)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.vectorize", ann_val=64)
v65 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.unroll_explicit", ann_val=v65)
l66 = sch.sample_compute_location(block=b0, decision=3)
sch.compute_at(block=b0, loop=l66, preserve_unit_loops=True, index=-1)
sch.enter_postproc()
b67 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b67, ann_key="meta_schedule.parallel")
sch.unannotate(block_or_loop=b67, ann_key="meta_schedule.vectorize")
sch.unannotate(block_or_loop=b67, ann_key="meta_schedule.unroll_explicit")
b68, b69, b70 = sch.get_child_blocks(b67)
l71, l72, l73, l74, l75, l76, l77, l78, l79 = sch.get_loops(block=b68)
l80 = sch.fuse(l71, l72, l73, l74, preserve_unit_iters=True)
sch.parallel(loop=l80)
l81, l82, l83, l84, l85, l86, l87, l88, l89, l90, l91, l92, l93, l94, l95, l96, l97, l98, l99, l100, l101, l102, l103 = sch.get_loops(block=b69)
l104 = sch.fuse(l81, preserve_unit_iters=True)
sch.parallel(loop=l104)
l105 = sch.fuse(l103, preserve_unit_iters=True)
sch.vectorize(loop=l105)
sch.annotate(block_or_loop=l104, ann_key="pragma_auto_unroll_max_step", ann_val=512)
sch.annotate(block_or_loop=l104, ann_key="pragma_unroll_explicit", ann_val=1)
l106, l107, l108, l109, l110, l111, l112 = sch.get_loops(block=b70)
l113 = sch.fuse(l112, preserve_unit_iters=True)
sch.vectorize(loop=l113)
b114 = sch.get_block(name="conv2d_NCHWc", func_name="main")
l115, l116, l117, l118, l119, l120, l121, l122, l123, l124, l125, l126, l127, l128, l129, l130, l131, l132, l133, l134, l135, l136, l137 = sch.get_loops(block=b114)
b138 = sch.decompose_reduction(block=b114, loop=l122)
2024-04-28 21:12:23 [INFO] [task_scheduler.cc:131] [Task #13: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #36: GFLOPs: 27.1707. Time: 8516.9533 us. Best GFLOPs: 108.1032
2024-04-28 21:12:23 [INFO] [task_scheduler.cc:131] [Task #13: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #37: GFLOPs: 32.8140. Time: 7052.2243 us. Best GFLOPs: 108.1032
2024-04-28 21:12:23 [INFO] [task_scheduler.cc:131] [Task #13: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #38: GFLOPs: 72.7221. Time: 3182.1367 us. Best GFLOPs: 108.1032
2024-04-28 21:12:23 [INFO] [task_scheduler.cc:131] [Task #13: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #39: GFLOPs: 19.1673. Time: 12073.2460 us. Best GFLOPs: 108.1032
2024-04-28 21:12:23 [INFO] [task_scheduler.cc:131] [Task #13: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #40: GFLOPs: 4.7560. Time: 48657.3027 us. Best GFLOPs: 108.1032
2024-04-28 21:12:23 [INFO] [task_scheduler.cc:131] [Task #13: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #41: GFLOPs: 293.7550. Time: 787.7711 us. Best GFLOPs: 293.7550
2024-04-28 21:12:23 [INFO] [task_scheduler.cc:131] [Task #13: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #42: GFLOPs: 53.2358. Time: 4346.9178 us. Best GFLOPs: 293.7550
2024-04-28 21:12:23 [INFO] [task_scheduler.cc:131] [Task #13: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #43: GFLOPs: 4.0992. Time: 56452.3527 us. Best GFLOPs: 293.7550
2024-04-28 21:12:23 [INFO] [task_scheduler.cc:131] [Task #13: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #44: GFLOPs: 5.9007. Time: 39217.4040 us. Best GFLOPs: 293.7550
2024-04-28 21:12:23 [INFO] [task_scheduler.cc:131] [Task #13: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #45: GFLOPs: 27.9657. Time: 8274.8266 us. Best GFLOPs: 293.7550
2024-04-28 21:12:23 [INFO] [task_scheduler.cc:131] [Task #13: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #46: GFLOPs: 22.3948. Time: 10333.2953 us. Best GFLOPs: 293.7550
2024-04-28 21:12:23 [INFO] [task_scheduler.cc:131] [Task #13: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #47: GFLOPs: 7.3533. Time: 31470.3988 us. Best GFLOPs: 293.7550
2024-04-28 21:12:23 [INFO] [task_scheduler.cc:131] [Task #13: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #48: GFLOPs: 88.0085. Time: 2629.4258 us. Best GFLOPs: 293.7550
2024-04-28 21:12:23 [INFO] [task_scheduler.cc:121] [Task #13: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #49: Error in building:
LocalBuilder: Timeout, killed after 30.0 seconds
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(1), T.int64(28), T.int64(28), T.int64(128)), "float32"), p1: T.Buffer((T.int64(4), T.int64(1), T.int64(3), T.int64(3), T.int64(128), T.int64(32)), "float32"), p2: T.Buffer((T.int64(1), T.int64(4), T.int64(1), T.int64(1), T.int64(32)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(4), T.int64(28), T.int64(28), T.int64(32)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        data_pad = T.alloc_buffer((T.int64(1), T.int64(1), T.int64(30), T.int64(30), T.int64(128)))
        conv2d_NCHWc = T.alloc_buffer((T.int64(1), T.int64(4), T.int64(28), T.int64(28), T.int64(32)))
        for n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_fused_fused in T.parallel(T.int64(392), annotations={"pragma_auto_unroll_max_step": 512, "pragma_unroll_explicit": 1}):
            for ax0, ax1, ax2, ax3, ax4 in T.grid(T.int64(1), T.int64(1), T.int64(6), T.int64(4), T.int64(128)):
                with T.block("data_pad"):
                    v_i0, v_i1 = T.axis.remap("SS", [ax0, ax1])
                    v_i2 = T.axis.spatial(T.int64(30), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_fused_fused // T.int64(56) * T.int64(4) + ax2)
                    v_i3 = T.axis.spatial(T.int64(30), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_fused_fused % T.int64(56) // T.int64(4) * T.int64(2) + ax3)
                    v_i4 = T.axis.spatial(T.int64(128), ax4)
                    T.reads(p0[v_i0, v_i1, v_i2 - T.int64(1), v_i3 - T.int64(1), v_i4])
                    T.writes(data_pad[v_i0, v_i1, v_i2, v_i3, v_i4])
                    data_pad[v_i0, v_i1, v_i2, v_i3, v_i4] = T.if_then_else(T.int64(1) <= v_i2 and v_i2 < T.int64(29) and T.int64(1) <= v_i3 and v_i3 < T.int64(29), p0[v_i0, v_i1, v_i2 - T.int64(1), v_i3 - T.int64(1), v_i4], T.float32(0))
            for oh_1, ow_1, oc_block_1 in T.grid(T.int64(1), T.int64(1), T.int64(8)):
                for n_2_init, oc_chunk_2_init, oh_2_init, ow_2_init, oc_block_2_init, n_3_init, oc_chunk_3_init, oh_3_init, ow_3_init, oc_block_3_init in T.grid(T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(4), T.int64(1), T.int64(1), T.int64(4), T.int64(1), T.int64(1)):
                    with T.block("conv2d_NCHWc_init"):
                        v_n = T.axis.spatial(T.int64(1), n_2_init + n_3_init)
                        v_oc_chunk = T.axis.spatial(T.int64(4), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_fused_fused % T.int64(4) + oc_chunk_2_init + oc_chunk_3_init)
                        v_oh = T.axis.spatial(T.int64(28), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_fused_fused // T.int64(56) * T.int64(4) + oh_1 * T.int64(4) + oh_2_init * T.int64(4) + oh_3_init)
                        v_ow = T.axis.spatial(T.int64(28), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_fused_fused % T.int64(56) // T.int64(4) * T.int64(2) + ow_1 * T.int64(2) + ow_2_init + ow_3_init)
                        v_oc_block = T.axis.spatial(T.int64(32), oc_block_1 * T.int64(4) + oc_block_2_init + oc_block_3_init)
                        T.reads()
                        T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                        T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                        conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = T.float32(0)
                for ic_0, kh_0, kw_0, n_2, oc_chunk_2, oh_2, ow_2, oc_block_2, ic_1, kh_1, kw_1, n_3, oc_chunk_3, oh_3, ow_3, oc_block_3 in T.grid(T.int64(32), T.int64(3), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(4), T.int64(4), T.int64(1), T.int64(3), T.int64(1), T.int64(1), T.int64(4), T.int64(1), T.int64(1)):
                    with T.block("conv2d_NCHWc_update"):
                        v_n = T.axis.spatial(T.int64(1), n_2 + n_3)
                        v_oc_chunk = T.axis.spatial(T.int64(4), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_fused_fused % T.int64(4) + oc_chunk_2 + oc_chunk_3)
                        v_oh = T.axis.spatial(T.int64(28), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_fused_fused // T.int64(56) * T.int64(4) + oh_1 * T.int64(4) + oh_2 * T.int64(4) + oh_3)
                        v_ow = T.axis.spatial(T.int64(28), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_fused_fused % T.int64(56) // T.int64(4) * T.int64(2) + ow_1 * T.int64(2) + ow_2 + ow_3)
                        v_oc_block = T.axis.spatial(T.int64(32), oc_block_1 * T.int64(4) + oc_block_2 + oc_block_3)
                        v_ic = T.axis.reduce(T.int64(128), ic_0 * T.int64(4) + ic_1)
                        v_kh = T.axis.reduce(T.int64(3), kh_0 + kh_1)
                        v_kw = T.axis.reduce(T.int64(3), kw_0 * T.int64(3) + kw_1)
                        T.reads(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block], data_pad[v_n, v_ic // T.int64(128), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(128)], p1[v_oc_chunk, v_ic // T.int64(128), v_kh, v_kw, v_ic % T.int64(128), v_oc_block])
                        T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                        T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                        conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] + data_pad[v_n, v_ic // T.int64(128), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(128)] * p1[v_oc_chunk, v_ic // T.int64(128), v_kh, v_kw, v_ic % T.int64(128), v_oc_block]
        for ax0_ax1_ax2_ax3_ax4_fused_0 in T.parallel(T.int64(1568)):
            for ax0_ax1_ax2_ax3_ax4_fused_1 in T.vectorized(T.int64(64)):
                with T.block("T_relu"):
                    v_ax0 = T.axis.spatial(T.int64(1), T.int64(0))
                    v_ax1 = T.axis.spatial(T.int64(4), (ax0_ax1_ax2_ax3_ax4_fused_0 * T.int64(64) + ax0_ax1_ax2_ax3_ax4_fused_1) // T.int64(25088))
                    v_ax2 = T.axis.spatial(T.int64(28), (ax0_ax1_ax2_ax3_ax4_fused_0 * T.int64(64) + ax0_ax1_ax2_ax3_ax4_fused_1) % T.int64(25088) // T.int64(896))
                    v_ax3 = T.axis.spatial(T.int64(28), (ax0_ax1_ax2_ax3_ax4_fused_0 * T.int64(64) + ax0_ax1_ax2_ax3_ax4_fused_1) % T.int64(896) // T.int64(32))
                    v_ax4 = T.axis.spatial(T.int64(32), (ax0_ax1_ax2_ax3_ax4_fused_0 * T.int64(64) + ax0_ax1_ax2_ax3_ax4_fused_1) % T.int64(32))
                    T.reads(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4])
                    T.writes(T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                    T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.max(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] + p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4], T.float32(0))
b0 = sch.get_block(name="data_pad", func_name="main")
b1 = sch.get_block(name="conv2d_NCHWc", func_name="main")
b2 = sch.get_block(name="T_add", func_name="main")
b3 = sch.get_block(name="root", func_name="main")
sch.compute_inline(block=b2)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSRSRS")
l4, l5, l6, l7, l8, l9, l10, l11 = sch.get_loops(block=b1)
v12, v13, v14, v15 = sch.sample_perfect_tile(loop=l4, n=4, max_innermost_factor=64, decision=[1, 1, 1, 1])
l16, l17, l18, l19 = sch.split(loop=l4, factors=[v12, v13, v14, v15], preserve_unit_iters=True)
v20, v21, v22, v23 = sch.sample_perfect_tile(loop=l5, n=4, max_innermost_factor=64, decision=[1, 4, 1, 1])
l24, l25, l26, l27 = sch.split(loop=l5, factors=[v20, v21, v22, v23], preserve_unit_iters=True)
v28, v29, v30, v31 = sch.sample_perfect_tile(loop=l6, n=4, max_innermost_factor=64, decision=[7, 1, 1, 4])
l32, l33, l34, l35 = sch.split(loop=l6, factors=[v28, v29, v30, v31], preserve_unit_iters=True)
v36, v37, v38, v39 = sch.sample_perfect_tile(loop=l7, n=4, max_innermost_factor=64, decision=[14, 1, 2, 1])
l40, l41, l42, l43 = sch.split(loop=l7, factors=[v36, v37, v38, v39], preserve_unit_iters=True)
v44, v45, v46, v47 = sch.sample_perfect_tile(loop=l8, n=4, max_innermost_factor=64, decision=[1, 8, 4, 1])
l48, l49, l50, l51 = sch.split(loop=l8, factors=[v44, v45, v46, v47], preserve_unit_iters=True)
v52, v53 = sch.sample_perfect_tile(loop=l9, n=2, max_innermost_factor=64, decision=[32, 4])
l54, l55 = sch.split(loop=l9, factors=[v52, v53], preserve_unit_iters=True)
v56, v57 = sch.sample_perfect_tile(loop=l10, n=2, max_innermost_factor=64, decision=[3, 1])
l58, l59 = sch.split(loop=l10, factors=[v56, v57], preserve_unit_iters=True)
v60, v61 = sch.sample_perfect_tile(loop=l11, n=2, max_innermost_factor=64, decision=[1, 3])
l62, l63 = sch.split(loop=l11, factors=[v60, v61], preserve_unit_iters=True)
sch.reorder(l16, l24, l32, l40, l48, l17, l25, l33, l41, l49, l54, l58, l62, l18, l26, l34, l42, l50, l55, l59, l63, l19, l27, l35, l43, l51)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.vectorize", ann_val=64)
v64 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.unroll_explicit", ann_val=v64)
l65 = sch.sample_compute_location(block=b0, decision=6)
sch.compute_at(block=b0, loop=l65, preserve_unit_loops=True, index=-1)
sch.enter_postproc()
b66 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b66, ann_key="meta_schedule.parallel")
sch.unannotate(block_or_loop=b66, ann_key="meta_schedule.vectorize")
sch.unannotate(block_or_loop=b66, ann_key="meta_schedule.unroll_explicit")
b67, b68, b69 = sch.get_child_blocks(b66)
l70, l71, l72, l73, l74, l75, l76, l77, l78, l79, l80, l81 = sch.get_loops(block=b67)
l82 = sch.fuse(l70, l71, l72, l73, l74, l75, l76, preserve_unit_iters=True)
sch.parallel(loop=l82)
l83, l84, l85, l86, l87, l88, l89, l90, l91, l92, l93, l94, l95, l96, l97, l98, l99, l100, l101, l102 = sch.get_loops(block=b68)
l103 = sch.fuse(l83, preserve_unit_iters=True)
sch.parallel(loop=l103)
sch.annotate(block_or_loop=l103, ann_key="pragma_auto_unroll_max_step", ann_val=512)
sch.annotate(block_or_loop=l103, ann_key="pragma_unroll_explicit", ann_val=1)
l104, l105, l106, l107, l108 = sch.get_loops(block=b69)
l109 = sch.fuse(l104, l105, l106, l107, l108, preserve_unit_iters=True)
l110, l111 = sch.split(loop=l109, factors=[None, 64], preserve_unit_iters=True)
sch.parallel(loop=l110)
sch.vectorize(loop=l111)
b112 = sch.get_block(name="conv2d_NCHWc", func_name="main")
l113, l114, l115, l116, l117, l118, l119, l120, l121, l122, l123, l124, l125, l126, l127, l128, l129, l130, l131, l132 = sch.get_loops(block=b112)
b133 = sch.decompose_reduction(block=b112, loop=l117)
2024-04-28 21:12:23 [INFO] [task_scheduler.cc:131] [Task #13: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #50: GFLOPs: 106.4581. Time: 2173.7357 us. Best GFLOPs: 293.7550
2024-04-28 21:12:23 [INFO] [task_scheduler.cc:131] [Task #13: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #51: GFLOPs: 18.1597. Time: 12743.1271 us. Best GFLOPs: 293.7550
2024-04-28 21:12:23 [INFO] [task_scheduler.cc:131] [Task #13: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #52: GFLOPs: 84.8575. Time: 2727.0616 us. Best GFLOPs: 293.7550
2024-04-28 21:12:23 [INFO] [task_scheduler.cc:131] [Task #13: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #53: GFLOPs: 0.8658. Time: 267290.4067 us. Best GFLOPs: 293.7550
2024-04-28 21:12:23 [INFO] [task_scheduler.cc:131] [Task #13: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #54: GFLOPs: 43.2046. Time: 5356.1881 us. Best GFLOPs: 293.7550
2024-04-28 21:12:23 [INFO] [task_scheduler.cc:131] [Task #13: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #55: GFLOPs: 15.7756. Time: 14668.9232 us. Best GFLOPs: 293.7550
2024-04-28 21:12:23 [INFO] [task_scheduler.cc:131] [Task #13: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #56: GFLOPs: 55.6596. Time: 4157.6242 us. Best GFLOPs: 293.7550
2024-04-28 21:12:23 [INFO] [task_scheduler.cc:121] [Task #13: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #57: Error in building:
LocalBuilder: Timeout, killed after 30.0 seconds
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(1), T.int64(28), T.int64(28), T.int64(128)), "float32"), p1: T.Buffer((T.int64(4), T.int64(1), T.int64(3), T.int64(3), T.int64(128), T.int64(32)), "float32"), p2: T.Buffer((T.int64(1), T.int64(4), T.int64(1), T.int64(1), T.int64(32)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(4), T.int64(28), T.int64(28), T.int64(32)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        data_pad = T.alloc_buffer((T.int64(1), T.int64(1), T.int64(30), T.int64(30), T.int64(128)))
        conv2d_NCHWc = T.alloc_buffer((T.int64(1), T.int64(4), T.int64(28), T.int64(28), T.int64(32)))
        for n_0_oc_chunk_0_oh_0_ow_0_fused_fused in T.parallel(T.int64(392), annotations={"pragma_auto_unroll_max_step": 512, "pragma_unroll_explicit": 1}):
            for ax0, ax1, ax2, ax3, ax4 in T.grid(T.int64(1), T.int64(1), T.int64(4), T.int64(4), T.int64(128)):
                with T.block("data_pad"):
                    v_i0, v_i1 = T.axis.remap("SS", [ax0, ax1])
                    v_i2 = T.axis.spatial(T.int64(30), n_0_oc_chunk_0_oh_0_ow_0_fused_fused % T.int64(196) // T.int64(14) * T.int64(2) + ax2)
                    v_i3 = T.axis.spatial(T.int64(30), n_0_oc_chunk_0_oh_0_ow_0_fused_fused % T.int64(14) * T.int64(2) + ax3)
                    v_i4 = T.axis.spatial(T.int64(128), ax4)
                    T.reads(p0[v_i0, v_i1, v_i2 - T.int64(1), v_i3 - T.int64(1), v_i4])
                    T.writes(data_pad[v_i0, v_i1, v_i2, v_i3, v_i4])
                    data_pad[v_i0, v_i1, v_i2, v_i3, v_i4] = T.if_then_else(T.int64(1) <= v_i2 and v_i2 < T.int64(29) and T.int64(1) <= v_i3 and v_i3 < T.int64(29), p0[v_i0, v_i1, v_i2 - T.int64(1), v_i3 - T.int64(1), v_i4], T.float32(0))
            for oc_block_0, n_1, oc_chunk_1, oh_1, ow_1, oc_block_1 in T.grid(T.int64(1), T.int64(1), T.int64(2), T.int64(1), T.int64(1), T.int64(2)):
                for n_2_init, oc_chunk_2_init, oh_2_init, ow_2_init, oc_block_2_init, n_3_init, oc_chunk_3_init, oh_3_init, ow_3_init in T.grid(T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(1), T.int64(1), T.int64(2), T.int64(2)):
                    for oc_block_3_fused_init in T.vectorized(T.int64(8)):
                        with T.block("conv2d_NCHWc_init"):
                            v_n = T.axis.spatial(T.int64(1), n_1 + n_2_init + n_3_init)
                            v_oc_chunk = T.axis.spatial(T.int64(4), n_0_oc_chunk_0_oh_0_ow_0_fused_fused // T.int64(196) * T.int64(2) + oc_chunk_1 + oc_chunk_2_init + oc_chunk_3_init)
                            v_oh = T.axis.spatial(T.int64(28), n_0_oc_chunk_0_oh_0_ow_0_fused_fused % T.int64(196) // T.int64(14) * T.int64(2) + oh_1 * T.int64(2) + oh_2_init * T.int64(2) + oh_3_init)
                            v_ow = T.axis.spatial(T.int64(28), n_0_oc_chunk_0_oh_0_ow_0_fused_fused % T.int64(14) * T.int64(2) + ow_1 * T.int64(2) + ow_2_init * T.int64(2) + ow_3_init)
                            v_oc_block = T.axis.spatial(T.int64(32), oc_block_0 * T.int64(32) + oc_block_1 * T.int64(16) + oc_block_2_init * T.int64(8) + oc_block_3_fused_init)
                            T.reads()
                            T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                            T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                            conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = T.float32(0)
                for ic_0, kh_0, kw_0, n_2, oc_chunk_2, oh_2, ow_2, oc_block_2, ic_1, kh_1, kw_1, n_3, oc_chunk_3, oh_3, ow_3 in T.grid(T.int64(128), T.int64(3), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(1), T.int64(1), T.int64(3), T.int64(1), T.int64(1), T.int64(2), T.int64(2)):
                    for oc_block_3_fused in T.vectorized(T.int64(8)):
                        with T.block("conv2d_NCHWc_update"):
                            v_n = T.axis.spatial(T.int64(1), n_1 + n_2 + n_3)
                            v_oc_chunk = T.axis.spatial(T.int64(4), n_0_oc_chunk_0_oh_0_ow_0_fused_fused // T.int64(196) * T.int64(2) + oc_chunk_1 + oc_chunk_2 + oc_chunk_3)
                            v_oh = T.axis.spatial(T.int64(28), n_0_oc_chunk_0_oh_0_ow_0_fused_fused % T.int64(196) // T.int64(14) * T.int64(2) + oh_1 * T.int64(2) + oh_2 * T.int64(2) + oh_3)
                            v_ow = T.axis.spatial(T.int64(28), n_0_oc_chunk_0_oh_0_ow_0_fused_fused % T.int64(14) * T.int64(2) + ow_1 * T.int64(2) + ow_2 * T.int64(2) + ow_3)
                            v_oc_block = T.axis.spatial(T.int64(32), oc_block_0 * T.int64(32) + oc_block_1 * T.int64(16) + oc_block_2 * T.int64(8) + oc_block_3_fused)
                            v_ic = T.axis.reduce(T.int64(128), ic_0 + ic_1)
                            v_kh = T.axis.reduce(T.int64(3), kh_0 + kh_1)
                            v_kw = T.axis.reduce(T.int64(3), kw_0 * T.int64(3) + kw_1)
                            T.reads(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block], data_pad[v_n, v_ic // T.int64(128), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(128)], p1[v_oc_chunk, v_ic // T.int64(128), v_kh, v_kw, v_ic % T.int64(128), v_oc_block])
                            T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                            T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                            conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] + data_pad[v_n, v_ic // T.int64(128), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(128)] * p1[v_oc_chunk, v_ic // T.int64(128), v_kh, v_kw, v_ic % T.int64(128), v_oc_block]
                for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(1), T.int64(2), T.int64(2)):
                    for ax4_fused in T.vectorized(T.int64(16)):
                        with T.block("T_relu"):
                            v_ax0 = T.axis.spatial(T.int64(1), ax0)
                            v_ax1 = T.axis.spatial(T.int64(4), n_0_oc_chunk_0_oh_0_ow_0_fused_fused // T.int64(196) * T.int64(2) + oc_chunk_1 + ax1)
                            v_ax2 = T.axis.spatial(T.int64(28), n_0_oc_chunk_0_oh_0_ow_0_fused_fused % T.int64(196) // T.int64(14) * T.int64(2) + ax2)
                            v_ax3 = T.axis.spatial(T.int64(28), n_0_oc_chunk_0_oh_0_ow_0_fused_fused % T.int64(14) * T.int64(2) + ax3)
                            v_ax4 = T.axis.spatial(T.int64(32), oc_block_1 * T.int64(16) + ax4_fused)
                            T.reads(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4])
                            T.writes(T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                            T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.max(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] + p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4], T.float32(0))
b0 = sch.get_block(name="data_pad", func_name="main")
b1 = sch.get_block(name="conv2d_NCHWc", func_name="main")
b2 = sch.get_block(name="T_add", func_name="main")
b3 = sch.get_block(name="root", func_name="main")
sch.compute_inline(block=b2)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSRSRS")
l4, l5, l6, l7, l8, l9, l10, l11 = sch.get_loops(block=b1)
v12, v13, v14, v15 = sch.sample_perfect_tile(loop=l4, n=4, max_innermost_factor=64, decision=[1, 1, 1, 1])
l16, l17, l18, l19 = sch.split(loop=l4, factors=[v12, v13, v14, v15], preserve_unit_iters=True)
v20, v21, v22, v23 = sch.sample_perfect_tile(loop=l5, n=4, max_innermost_factor=64, decision=[2, 2, 1, 1])
l24, l25, l26, l27 = sch.split(loop=l5, factors=[v20, v21, v22, v23], preserve_unit_iters=True)
v28, v29, v30, v31 = sch.sample_perfect_tile(loop=l6, n=4, max_innermost_factor=64, decision=[14, 1, 1, 2])
l32, l33, l34, l35 = sch.split(loop=l6, factors=[v28, v29, v30, v31], preserve_unit_iters=True)
v36, v37, v38, v39 = sch.sample_perfect_tile(loop=l7, n=4, max_innermost_factor=64, decision=[14, 1, 1, 2])
l40, l41, l42, l43 = sch.split(loop=l7, factors=[v36, v37, v38, v39], preserve_unit_iters=True)
v44, v45, v46, v47 = sch.sample_perfect_tile(loop=l8, n=4, max_innermost_factor=64, decision=[1, 2, 2, 8])
l48, l49, l50, l51 = sch.split(loop=l8, factors=[v44, v45, v46, v47], preserve_unit_iters=True)
v52, v53 = sch.sample_perfect_tile(loop=l9, n=2, max_innermost_factor=64, decision=[128, 1])
l54, l55 = sch.split(loop=l9, factors=[v52, v53], preserve_unit_iters=True)
v56, v57 = sch.sample_perfect_tile(loop=l10, n=2, max_innermost_factor=64, decision=[3, 1])
l58, l59 = sch.split(loop=l10, factors=[v56, v57], preserve_unit_iters=True)
v60, v61 = sch.sample_perfect_tile(loop=l11, n=2, max_innermost_factor=64, decision=[1, 3])
l62, l63 = sch.split(loop=l11, factors=[v60, v61], preserve_unit_iters=True)
sch.reorder(l16, l24, l32, l40, l48, l17, l25, l33, l41, l49, l54, l58, l62, l18, l26, l34, l42, l50, l55, l59, l63, l19, l27, l35, l43, l51)
b64, = sch.get_consumers(block=b1)
sch.reverse_compute_at(block=b64, loop=l49, preserve_unit_loops=True, index=-1)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.vectorize", ann_val=64)
v65 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.unroll_explicit", ann_val=v65)
l66 = sch.sample_compute_location(block=b0, decision=3)
sch.compute_at(block=b0, loop=l66, preserve_unit_loops=True, index=-1)
sch.enter_postproc()
b67 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b67, ann_key="meta_schedule.parallel")
sch.unannotate(block_or_loop=b67, ann_key="meta_schedule.vectorize")
sch.unannotate(block_or_loop=b67, ann_key="meta_schedule.unroll_explicit")
b68, b69, b70 = sch.get_child_blocks(b67)
l71, l72, l73, l74, l75, l76, l77, l78, l79 = sch.get_loops(block=b68)
l80 = sch.fuse(l71, l72, l73, l74, preserve_unit_iters=True)
sch.parallel(loop=l80)
l81, l82, l83, l84, l85, l86, l87, l88, l89, l90, l91, l92, l93, l94, l95, l96, l97, l98, l99, l100, l101, l102, l103 = sch.get_loops(block=b69)
l104 = sch.fuse(l81, preserve_unit_iters=True)
sch.parallel(loop=l104)
l105 = sch.fuse(l103, preserve_unit_iters=True)
sch.vectorize(loop=l105)
sch.annotate(block_or_loop=l104, ann_key="pragma_auto_unroll_max_step", ann_val=512)
sch.annotate(block_or_loop=l104, ann_key="pragma_unroll_explicit", ann_val=1)
l106, l107, l108, l109, l110, l111, l112, l113, l114, l115, l116, l117 = sch.get_loops(block=b70)
l118 = sch.fuse(l117, preserve_unit_iters=True)
sch.vectorize(loop=l118)
b119 = sch.get_block(name="conv2d_NCHWc", func_name="main")
l120, l121, l122, l123, l124, l125, l126, l127, l128, l129, l130, l131, l132, l133, l134, l135, l136, l137, l138, l139, l140, l141, l142 = sch.get_loops(block=b119)
b143 = sch.decompose_reduction(block=b119, loop=l127)
2024-04-28 21:12:23 [INFO] [task_scheduler.cc:131] [Task #13: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #58: GFLOPs: 7.5217. Time: 30765.7440 us. Best GFLOPs: 293.7550
2024-04-28 21:12:23 [INFO] [task_scheduler.cc:131] [Task #13: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #59: GFLOPs: 44.8474. Time: 5159.9804 us. Best GFLOPs: 293.7550
2024-04-28 21:12:23 [INFO] [task_scheduler.cc:131] [Task #13: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #60: GFLOPs: 1.7837. Time: 129739.5333 us. Best GFLOPs: 293.7550
2024-04-28 21:12:23 [INFO] [task_scheduler.cc:131] [Task #13: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #61: GFLOPs: 50.4741. Time: 4584.7595 us. Best GFLOPs: 293.7550
2024-04-28 21:12:23 [INFO] [task_scheduler.cc:131] [Task #13: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #62: GFLOPs: 11.5511. Time: 20033.8150 us. Best GFLOPs: 293.7550
2024-04-28 21:12:23 [INFO] [task_scheduler.cc:131] [Task #13: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #63: GFLOPs: 35.4804. Time: 6522.2357 us. Best GFLOPs: 293.7550
2024-04-28 21:12:23 [INFO] [task_scheduler.cc:131] [Task #13: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #64: GFLOPs: 12.8029. Time: 18074.9983 us. Best GFLOPs: 293.7550
2024-04-28 21:40:15 [INFO] [evolutionary_search.cc:713] Generating candidates......
2024-04-28 21:40:16 [INFO] [evolutionary_search.cc:715] Picked top 59 candidate(s) from database
2024-04-28 21:40:21 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x3cedc28)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x30c43a8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x331a288)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x3f41058)]: 0 failure(s)
2024-04-28 21:40:21 [INFO] [evolutionary_search.cc:723] Sampled 453 candidate(s)
2024-04-28 21:40:33 [INFO] [evolutionary_search.cc:621] Evolve iter #0 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x3cedc28)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x30c43a8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x331a288)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x3f41058)]: 0 failure(s)
2024-04-28 21:40:45 [INFO] [evolutionary_search.cc:621] Evolve iter #1 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x3cedc28)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x30c43a8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x331a288)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x3f41058)]: 0 failure(s)
2024-04-28 21:40:57 [INFO] [evolutionary_search.cc:621] Evolve iter #2 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x3cedc28)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x30c43a8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x331a288)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x3f41058)]: 0 failure(s)
2024-04-28 21:41:09 [INFO] [evolutionary_search.cc:621] Evolve iter #3 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x3cedc28)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x30c43a8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x331a288)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x3f41058)]: 0 failure(s)
2024-04-28 21:41:16 [INFO] [evolutionary_search.cc:649] Scores of the best 64 candidates:
[1 : 16]:	0.9785  0.9785  0.9785  0.9785  0.9230  0.9230  0.9230  0.9230  0.9230  0.9093  0.9006  0.7980  0.7963  0.7663  0.7464  0.7343
[17 : 32]:	0.7234  0.7200  0.7142  0.7142  0.7028  0.7023  0.7023  0.7023  0.6899  0.6886  0.6886  0.6886  0.6866  0.6851  0.6798  0.6715
[33 : 48]:	0.6687  0.6625  0.6568  0.6520  0.6442  0.6432  0.6389  0.6377  0.6335  0.6335  0.6334  0.6334  0.6334  0.6318  0.6294  0.6256
[49 : 64]:	0.6227  0.6182  0.6182  0.6145  0.6105  0.6104  0.6068  0.6064  0.6013  0.6013  0.6013  0.6013  0.6010  0.6010  0.5984  0.5958
2024-04-28 21:41:16 [INFO] [evolutionary_search.cc:727] Got 64 candidate(s) with evolutionary search
2024-04-28 21:41:16 [INFO] [evolutionary_search.cc:730] Sending 64 candidates(s) for measurement
2024-04-28 21:42:38 [INFO] [task_scheduler.cc:131] [Task #13: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #65: GFLOPs: 167.0309. Time: 1385.4422 us. Best GFLOPs: 293.7550
2024-04-28 21:42:38 [INFO] [task_scheduler.cc:131] [Task #13: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #66: GFLOPs: 324.7611. Time: 712.5599 us. Best GFLOPs: 324.7611
2024-04-28 21:42:38 [INFO] [task_scheduler.cc:131] [Task #13: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #67: GFLOPs: 325.1196. Time: 711.7742 us. Best GFLOPs: 325.1196
2024-04-28 21:42:38 [INFO] [task_scheduler.cc:131] [Task #13: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #68: GFLOPs: 378.9364. Time: 610.6874 us. Best GFLOPs: 378.9364
2024-04-28 21:42:38 [INFO] [task_scheduler.cc:131] [Task #13: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #69: GFLOPs: 119.3266. Time: 1939.3138 us. Best GFLOPs: 378.9364
2024-04-28 21:42:38 [INFO] [task_scheduler.cc:131] [Task #13: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #70: GFLOPs: 106.9241. Time: 2164.2615 us. Best GFLOPs: 378.9364
2024-04-28 21:42:38 [INFO] [task_scheduler.cc:131] [Task #13: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #71: GFLOPs: 243.0019. Time: 952.3043 us. Best GFLOPs: 378.9364
2024-04-28 21:42:38 [INFO] [task_scheduler.cc:131] [Task #13: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #72: GFLOPs: 127.6121. Time: 1813.3991 us. Best GFLOPs: 378.9364
2024-04-28 21:42:38 [INFO] [task_scheduler.cc:131] [Task #13: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #73: GFLOPs: 111.0514. Time: 2083.8250 us. Best GFLOPs: 378.9364
2024-04-28 21:42:38 [INFO] [task_scheduler.cc:131] [Task #13: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #74: GFLOPs: 172.1842. Time: 1343.9774 us. Best GFLOPs: 378.9364
2024-04-28 21:42:38 [INFO] [task_scheduler.cc:131] [Task #13: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #75: GFLOPs: 382.7901. Time: 604.5395 us. Best GFLOPs: 382.7901
2024-04-28 21:42:38 [INFO] [task_scheduler.cc:131] [Task #13: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #76: GFLOPs: 131.2776. Time: 1762.7663 us. Best GFLOPs: 382.7901
2024-04-28 21:42:38 [INFO] [task_scheduler.cc:131] [Task #13: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #77: GFLOPs: 153.9604. Time: 1503.0603 us. Best GFLOPs: 382.7901
2024-04-28 21:42:38 [INFO] [task_scheduler.cc:131] [Task #13: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #78: GFLOPs: 161.4142. Time: 1433.6518 us. Best GFLOPs: 382.7901
2024-04-28 21:42:38 [INFO] [task_scheduler.cc:131] [Task #13: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #79: GFLOPs: 289.7256. Time: 798.7273 us. Best GFLOPs: 382.7901
2024-04-28 21:42:38 [INFO] [task_scheduler.cc:131] [Task #13: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #80: GFLOPs: 150.2143. Time: 1540.5438 us. Best GFLOPs: 382.7901
2024-04-28 21:42:38 [INFO] [task_scheduler.cc:121] [Task #13: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #81: Error in building:
LocalBuilder: Timeout, killed after 30.0 seconds
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(1), T.int64(28), T.int64(28), T.int64(128)), "float32"), p1: T.Buffer((T.int64(4), T.int64(1), T.int64(3), T.int64(3), T.int64(128), T.int64(32)), "float32"), p2: T.Buffer((T.int64(1), T.int64(4), T.int64(1), T.int64(1), T.int64(32)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(4), T.int64(28), T.int64(28), T.int64(32)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        data_pad = T.alloc_buffer((T.int64(1), T.int64(1), T.int64(30), T.int64(30), T.int64(128)))
        conv2d_NCHWc = T.alloc_buffer((T.int64(1), T.int64(4), T.int64(28), T.int64(28), T.int64(32)))
        for n_0_oc_chunk_0_oh_0_ow_0_fused_fused in T.parallel(T.int64(196), annotations={"pragma_auto_unroll_max_step": 512, "pragma_unroll_explicit": 1}):
            for ax0, ax1, ax2, ax3, ax4 in T.grid(T.int64(1), T.int64(1), T.int64(4), T.int64(6), T.int64(128)):
                with T.block("data_pad"):
                    v_i0, v_i1 = T.axis.remap("SS", [ax0, ax1])
                    v_i2 = T.axis.spatial(T.int64(30), n_0_oc_chunk_0_oh_0_ow_0_fused_fused % T.int64(98) // T.int64(7) * T.int64(2) + ax2)
                    v_i3 = T.axis.spatial(T.int64(30), n_0_oc_chunk_0_oh_0_ow_0_fused_fused % T.int64(7) * T.int64(4) + ax3)
                    v_i4 = T.axis.spatial(T.int64(128), ax4)
                    T.reads(p0[v_i0, v_i1, v_i2 - T.int64(1), v_i3 - T.int64(1), v_i4])
                    T.writes(data_pad[v_i0, v_i1, v_i2, v_i3, v_i4])
                    data_pad[v_i0, v_i1, v_i2, v_i3, v_i4] = T.if_then_else(T.int64(1) <= v_i2 and v_i2 < T.int64(29) and T.int64(1) <= v_i3 and v_i3 < T.int64(29), p0[v_i0, v_i1, v_i2 - T.int64(1), v_i3 - T.int64(1), v_i4], T.float32(0))
            for oc_block_0 in range(T.int64(1)):
                for n_1, oc_chunk_1, oh_1, ow_1, oc_block_1 in T.grid(T.int64(1), T.int64(2), T.int64(1), T.int64(4), T.int64(2)):
                    for n_2_init, oc_chunk_2_init, oh_2_init, ow_2_init, oc_block_2_init, n_3_init, oc_chunk_3_init, oh_3_init, ow_3_init in T.grid(T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(1), T.int64(1), T.int64(2), T.int64(1)):
                        for oc_block_3_fused_init in T.vectorized(T.int64(8)):
                            with T.block("conv2d_NCHWc_init"):
                                v_n = T.axis.spatial(T.int64(1), n_1 + n_2_init + n_3_init)
                                v_oc_chunk = T.axis.spatial(T.int64(4), n_0_oc_chunk_0_oh_0_ow_0_fused_fused // T.int64(98) * T.int64(2) + oc_chunk_1 + oc_chunk_2_init + oc_chunk_3_init)
                                v_oh = T.axis.spatial(T.int64(28), n_0_oc_chunk_0_oh_0_ow_0_fused_fused % T.int64(98) // T.int64(7) * T.int64(2) + oh_1 * T.int64(2) + oh_2_init * T.int64(2) + oh_3_init)
                                v_ow = T.axis.spatial(T.int64(28), n_0_oc_chunk_0_oh_0_ow_0_fused_fused % T.int64(7) * T.int64(4) + ow_1 + ow_2_init + ow_3_init)
                                v_oc_block = T.axis.spatial(T.int64(32), oc_block_0 * T.int64(32) + oc_block_1 * T.int64(16) + oc_block_2_init * T.int64(8) + oc_block_3_fused_init)
                                T.reads()
                                T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                                T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                                conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = T.float32(0)
                    for ic_0, kh_0, kw_0, n_2, oc_chunk_2, oh_2, ow_2, oc_block_2, ic_1, kh_1, kw_1, n_3, oc_chunk_3, oh_3, ow_3 in T.grid(T.int64(16), T.int64(3), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(8), T.int64(1), T.int64(3), T.int64(1), T.int64(1), T.int64(2), T.int64(1)):
                        for oc_block_3_fused in T.vectorized(T.int64(8)):
                            with T.block("conv2d_NCHWc_update"):
                                v_n = T.axis.spatial(T.int64(1), n_1 + n_2 + n_3)
                                v_oc_chunk = T.axis.spatial(T.int64(4), n_0_oc_chunk_0_oh_0_ow_0_fused_fused // T.int64(98) * T.int64(2) + oc_chunk_1 + oc_chunk_2 + oc_chunk_3)
                                v_oh = T.axis.spatial(T.int64(28), n_0_oc_chunk_0_oh_0_ow_0_fused_fused % T.int64(98) // T.int64(7) * T.int64(2) + oh_1 * T.int64(2) + oh_2 * T.int64(2) + oh_3)
                                v_ow = T.axis.spatial(T.int64(28), n_0_oc_chunk_0_oh_0_ow_0_fused_fused % T.int64(7) * T.int64(4) + ow_1 + ow_2 + ow_3)
                                v_oc_block = T.axis.spatial(T.int64(32), oc_block_0 * T.int64(32) + oc_block_1 * T.int64(16) + oc_block_2 * T.int64(8) + oc_block_3_fused)
                                v_ic = T.axis.reduce(T.int64(128), ic_0 * T.int64(8) + ic_1)
                                v_kh = T.axis.reduce(T.int64(3), kh_0 + kh_1)
                                v_kw = T.axis.reduce(T.int64(3), kw_0 * T.int64(3) + kw_1)
                                T.reads(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block], data_pad[v_n, v_ic // T.int64(128), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(128)], p1[v_oc_chunk, v_ic // T.int64(128), v_kh, v_kw, v_ic % T.int64(128), v_oc_block])
                                T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                                T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                                conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] + data_pad[v_n, v_ic // T.int64(128), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(128)] * p1[v_oc_chunk, v_ic // T.int64(128), v_kh, v_kw, v_ic % T.int64(128), v_oc_block]
                for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(2), T.int64(2), T.int64(4)):
                    for ax4_fused in T.vectorized(T.int64(32)):
                        with T.block("T_relu"):
                            v_ax0 = T.axis.spatial(T.int64(1), ax0)
                            v_ax1 = T.axis.spatial(T.int64(4), n_0_oc_chunk_0_oh_0_ow_0_fused_fused // T.int64(98) * T.int64(2) + ax1)
                            v_ax2 = T.axis.spatial(T.int64(28), n_0_oc_chunk_0_oh_0_ow_0_fused_fused % T.int64(98) // T.int64(7) * T.int64(2) + ax2)
                            v_ax3 = T.axis.spatial(T.int64(28), n_0_oc_chunk_0_oh_0_ow_0_fused_fused % T.int64(7) * T.int64(4) + ax3)
                            v_ax4 = T.axis.spatial(T.int64(32), ax4_fused)
                            T.reads(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4])
                            T.writes(T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                            T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.max(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] + p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4], T.float32(0))
b0 = sch.get_block(name="data_pad", func_name="main")
b1 = sch.get_block(name="conv2d_NCHWc", func_name="main")
b2 = sch.get_block(name="T_add", func_name="main")
b3 = sch.get_block(name="root", func_name="main")
sch.compute_inline(block=b2)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSRSRS")
l4, l5, l6, l7, l8, l9, l10, l11 = sch.get_loops(block=b1)
v12, v13, v14, v15 = sch.sample_perfect_tile(loop=l4, n=4, max_innermost_factor=64, decision=[1, 1, 1, 1])
l16, l17, l18, l19 = sch.split(loop=l4, factors=[v12, v13, v14, v15], preserve_unit_iters=True)
v20, v21, v22, v23 = sch.sample_perfect_tile(loop=l5, n=4, max_innermost_factor=64, decision=[2, 2, 1, 1])
l24, l25, l26, l27 = sch.split(loop=l5, factors=[v20, v21, v22, v23], preserve_unit_iters=True)
v28, v29, v30, v31 = sch.sample_perfect_tile(loop=l6, n=4, max_innermost_factor=64, decision=[14, 1, 1, 2])
l32, l33, l34, l35 = sch.split(loop=l6, factors=[v28, v29, v30, v31], preserve_unit_iters=True)
v36, v37, v38, v39 = sch.sample_perfect_tile(loop=l7, n=4, max_innermost_factor=64, decision=[7, 4, 1, 1])
l40, l41, l42, l43 = sch.split(loop=l7, factors=[v36, v37, v38, v39], preserve_unit_iters=True)
v44, v45, v46, v47 = sch.sample_perfect_tile(loop=l8, n=4, max_innermost_factor=64, decision=[1, 2, 2, 8])
l48, l49, l50, l51 = sch.split(loop=l8, factors=[v44, v45, v46, v47], preserve_unit_iters=True)
v52, v53 = sch.sample_perfect_tile(loop=l9, n=2, max_innermost_factor=64, decision=[16, 8])
l54, l55 = sch.split(loop=l9, factors=[v52, v53], preserve_unit_iters=True)
v56, v57 = sch.sample_perfect_tile(loop=l10, n=2, max_innermost_factor=64, decision=[3, 1])
l58, l59 = sch.split(loop=l10, factors=[v56, v57], preserve_unit_iters=True)
v60, v61 = sch.sample_perfect_tile(loop=l11, n=2, max_innermost_factor=64, decision=[1, 3])
l62, l63 = sch.split(loop=l11, factors=[v60, v61], preserve_unit_iters=True)
sch.reorder(l16, l24, l32, l40, l48, l17, l25, l33, l41, l49, l54, l58, l62, l18, l26, l34, l42, l50, l55, l59, l63, l19, l27, l35, l43, l51)
b64, = sch.get_consumers(block=b1)
sch.reverse_compute_at(block=b64, loop=l48, preserve_unit_loops=True, index=-1)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.vectorize", ann_val=64)
v65 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.unroll_explicit", ann_val=v65)
l66 = sch.sample_compute_location(block=b0, decision=3)
sch.compute_at(block=b0, loop=l66, preserve_unit_loops=True, index=-1)
sch.enter_postproc()
b67 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b67, ann_key="meta_schedule.parallel")
sch.unannotate(block_or_loop=b67, ann_key="meta_schedule.vectorize")
sch.unannotate(block_or_loop=b67, ann_key="meta_schedule.unroll_explicit")
b68, b69, b70 = sch.get_child_blocks(b67)
l71, l72, l73, l74, l75, l76, l77, l78, l79 = sch.get_loops(block=b68)
l80 = sch.fuse(l71, l72, l73, l74, preserve_unit_iters=True)
sch.parallel(loop=l80)
l81, l82, l83, l84, l85, l86, l87, l88, l89, l90, l91, l92, l93, l94, l95, l96, l97, l98, l99, l100, l101, l102, l103 = sch.get_loops(block=b69)
l104 = sch.fuse(l81, preserve_unit_iters=True)
sch.parallel(loop=l104)
l105 = sch.fuse(l103, preserve_unit_iters=True)
sch.vectorize(loop=l105)
sch.annotate(block_or_loop=l104, ann_key="pragma_auto_unroll_max_step", ann_val=512)
sch.annotate(block_or_loop=l104, ann_key="pragma_unroll_explicit", ann_val=1)
l106, l107, l108, l109, l110, l111, l112 = sch.get_loops(block=b70)
l113 = sch.fuse(l112, preserve_unit_iters=True)
sch.vectorize(loop=l113)
b114 = sch.get_block(name="conv2d_NCHWc", func_name="main")
l115, l116, l117, l118, l119, l120, l121, l122, l123, l124, l125, l126, l127, l128, l129, l130, l131, l132, l133, l134, l135, l136, l137 = sch.get_loops(block=b114)
b138 = sch.decompose_reduction(block=b114, loop=l122)
2024-04-28 21:42:38 [INFO] [task_scheduler.cc:131] [Task #13: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #82: GFLOPs: 145.6473. Time: 1588.8503 us. Best GFLOPs: 382.7901
2024-04-28 21:42:38 [INFO] [task_scheduler.cc:131] [Task #13: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #83: GFLOPs: 145.5542. Time: 1589.8667 us. Best GFLOPs: 382.7901
2024-04-28 21:42:38 [INFO] [task_scheduler.cc:131] [Task #13: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #84: GFLOPs: 196.3942. Time: 1178.3019 us. Best GFLOPs: 382.7901
2024-04-28 21:42:38 [INFO] [task_scheduler.cc:131] [Task #13: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #85: GFLOPs: 126.4926. Time: 1829.4484 us. Best GFLOPs: 382.7901
2024-04-28 21:42:38 [INFO] [task_scheduler.cc:131] [Task #13: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #86: GFLOPs: 77.6769. Time: 2979.1577 us. Best GFLOPs: 382.7901
2024-04-28 21:42:38 [INFO] [task_scheduler.cc:131] [Task #13: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #87: GFLOPs: 143.9654. Time: 1607.4116 us. Best GFLOPs: 382.7901
2024-04-28 21:42:38 [INFO] [task_scheduler.cc:131] [Task #13: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #88: GFLOPs: 59.9611. Time: 3859.3646 us. Best GFLOPs: 382.7901
2024-04-28 21:42:38 [INFO] [task_scheduler.cc:131] [Task #13: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #89: GFLOPs: 122.9181. Time: 1882.6491 us. Best GFLOPs: 382.7901
2024-04-28 21:42:38 [INFO] [task_scheduler.cc:131] [Task #13: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #90: GFLOPs: 196.5391. Time: 1177.4334 us. Best GFLOPs: 382.7901
2024-04-28 21:42:38 [INFO] [task_scheduler.cc:131] [Task #13: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #91: GFLOPs: 92.5932. Time: 2499.2292 us. Best GFLOPs: 382.7901
2024-04-28 21:42:38 [INFO] [task_scheduler.cc:131] [Task #13: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #92: GFLOPs: 98.4649. Time: 2350.1953 us. Best GFLOPs: 382.7901
2024-04-28 21:42:38 [INFO] [task_scheduler.cc:131] [Task #13: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #93: GFLOPs: 109.8192. Time: 2107.2067 us. Best GFLOPs: 382.7901
2024-04-28 21:42:38 [INFO] [task_scheduler.cc:131] [Task #13: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #94: GFLOPs: 763.3626. Time: 303.1478 us. Best GFLOPs: 763.3626
2024-04-28 21:42:38 [INFO] [task_scheduler.cc:131] [Task #13: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #95: GFLOPs: 92.1014. Time: 2512.5744 us. Best GFLOPs: 763.3626
2024-04-28 21:42:38 [INFO] [task_scheduler.cc:131] [Task #13: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #96: GFLOPs: 111.7497. Time: 2070.8030 us. Best GFLOPs: 763.3626
2024-04-28 21:42:38 [INFO] [task_scheduler.cc:131] [Task #13: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #97: GFLOPs: 118.4275. Time: 1954.0366 us. Best GFLOPs: 763.3626
2024-04-28 21:42:38 [INFO] [task_scheduler.cc:131] [Task #13: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #98: GFLOPs: 165.6405. Time: 1397.0724 us. Best GFLOPs: 763.3626
2024-04-28 21:42:38 [INFO] [task_scheduler.cc:131] [Task #13: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #99: GFLOPs: 80.8967. Time: 2860.5832 us. Best GFLOPs: 763.3626
2024-04-28 21:42:38 [INFO] [task_scheduler.cc:131] [Task #13: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #100: GFLOPs: 154.8873. Time: 1494.0647 us. Best GFLOPs: 763.3626
2024-04-28 21:42:38 [INFO] [task_scheduler.cc:131] [Task #13: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #101: GFLOPs: 198.1293. Time: 1167.9832 us. Best GFLOPs: 763.3626
2024-04-28 21:42:38 [INFO] [task_scheduler.cc:131] [Task #13: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #102: GFLOPs: 216.4878. Time: 1068.9366 us. Best GFLOPs: 763.3626
2024-04-28 21:42:38 [INFO] [task_scheduler.cc:131] [Task #13: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #103: GFLOPs: 234.5105. Time: 986.7859 us. Best GFLOPs: 763.3626
2024-04-28 21:42:38 [INFO] [task_scheduler.cc:131] [Task #13: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #104: GFLOPs: 192.0703. Time: 1204.8281 us. Best GFLOPs: 763.3626
2024-04-28 21:42:38 [INFO] [task_scheduler.cc:131] [Task #13: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #105: GFLOPs: 253.5354. Time: 912.7392 us. Best GFLOPs: 763.3626
2024-04-28 21:42:38 [INFO] [task_scheduler.cc:131] [Task #13: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #106: GFLOPs: 245.3987. Time: 943.0029 us. Best GFLOPs: 763.3626
2024-04-28 21:42:38 [INFO] [task_scheduler.cc:131] [Task #13: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #107: GFLOPs: 75.5870. Time: 3061.5290 us. Best GFLOPs: 763.3626
2024-04-28 21:42:38 [INFO] [task_scheduler.cc:131] [Task #13: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #108: GFLOPs: 94.1305. Time: 2458.4136 us. Best GFLOPs: 763.3626
2024-04-28 21:42:38 [INFO] [task_scheduler.cc:131] [Task #13: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #109: GFLOPs: 197.7285. Time: 1170.3508 us. Best GFLOPs: 763.3626
2024-04-28 21:42:38 [INFO] [task_scheduler.cc:131] [Task #13: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #110: GFLOPs: 144.3115. Time: 1603.5567 us. Best GFLOPs: 763.3626
2024-04-28 21:42:38 [INFO] [task_scheduler.cc:131] [Task #13: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #111: GFLOPs: 92.7299. Time: 2495.5445 us. Best GFLOPs: 763.3626
2024-04-28 21:42:38 [INFO] [task_scheduler.cc:131] [Task #13: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #112: GFLOPs: 33.4481. Time: 6918.5373 us. Best GFLOPs: 763.3626
2024-04-28 21:42:38 [INFO] [task_scheduler.cc:131] [Task #13: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #113: GFLOPs: 177.0434. Time: 1307.0906 us. Best GFLOPs: 763.3626
2024-04-28 21:42:38 [INFO] [task_scheduler.cc:131] [Task #13: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #114: GFLOPs: 112.7306. Time: 2052.7850 us. Best GFLOPs: 763.3626
2024-04-28 21:42:38 [INFO] [task_scheduler.cc:131] [Task #13: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #115: GFLOPs: 169.6740. Time: 1363.8605 us. Best GFLOPs: 763.3626
2024-04-28 21:42:38 [INFO] [task_scheduler.cc:131] [Task #13: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #116: GFLOPs: 130.7959. Time: 1769.2588 us. Best GFLOPs: 763.3626
2024-04-28 21:42:38 [INFO] [task_scheduler.cc:121] [Task #13: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #117: Error in building:
LocalBuilder: Timeout, killed after 30.0 seconds
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(1), T.int64(28), T.int64(28), T.int64(128)), "float32"), p1: T.Buffer((T.int64(4), T.int64(1), T.int64(3), T.int64(3), T.int64(128), T.int64(32)), "float32"), p2: T.Buffer((T.int64(1), T.int64(4), T.int64(1), T.int64(1), T.int64(32)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(4), T.int64(28), T.int64(28), T.int64(32)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        data_pad = T.alloc_buffer((T.int64(1), T.int64(1), T.int64(30), T.int64(30), T.int64(128)))
        conv2d_NCHWc = T.alloc_buffer((T.int64(1), T.int64(4), T.int64(28), T.int64(28), T.int64(32)))
        for n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused_fused in T.parallel(T.int64(112), annotations={"pragma_auto_unroll_max_step": 512, "pragma_unroll_explicit": 1}):
            for n_2_init, oc_chunk_2_init, oh_2_init, ow_2_init, oc_block_2_init, n_3_init, oc_chunk_3_init, oh_3_init, ow_3_init in T.grid(T.int64(1), T.int64(1), T.int64(1), T.int64(14), T.int64(2), T.int64(1), T.int64(2), T.int64(2), T.int64(1)):
                for oc_block_3_fused_init in T.vectorized(T.int64(8)):
                    with T.block("conv2d_NCHWc_init"):
                        v_n = T.axis.spatial(T.int64(1), n_2_init + n_3_init)
                        v_oc_chunk = T.axis.spatial(T.int64(4), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused_fused % T.int64(8) // T.int64(4) * T.int64(2) + oc_chunk_2_init * T.int64(2) + oc_chunk_3_init)
                        v_oh = T.axis.spatial(T.int64(28), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused_fused // T.int64(8) * T.int64(2) + oh_2_init * T.int64(2) + oh_3_init)
                        v_ow = T.axis.spatial(T.int64(28), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused_fused % T.int64(4) // T.int64(2) * T.int64(14) + ow_2_init + ow_3_init)
                        v_oc_block = T.axis.spatial(T.int64(32), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused_fused % T.int64(2) * T.int64(16) + oc_block_2_init * T.int64(8) + oc_block_3_fused_init)
                        T.reads()
                        T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                        T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                        conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = T.float32(0)
            for ic_0 in range(T.int64(4)):
                for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(1), T.int64(4), T.int64(16)):
                    for ax4_fused in T.vectorized(T.int64(32)):
                        with T.block("data_pad"):
                            v_i0, v_i1 = T.axis.remap("SS", [ax0, ax1])
                            v_i2 = T.axis.spatial(T.int64(30), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused_fused // T.int64(8) * T.int64(2) + ax2)
                            v_i3 = T.axis.spatial(T.int64(30), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused_fused % T.int64(4) // T.int64(2) * T.int64(14) + ax3)
                            v_i4 = T.axis.spatial(T.int64(128), ic_0 * T.int64(32) + ax4_fused)
                            T.reads(p0[v_i0, v_i1, v_i2 - T.int64(1), v_i3 - T.int64(1), v_i4])
                            T.writes(data_pad[v_i0, v_i1, v_i2, v_i3, v_i4])
                            data_pad[v_i0, v_i1, v_i2, v_i3, v_i4] = T.if_then_else(T.int64(1) <= v_i2 and v_i2 < T.int64(29) and T.int64(1) <= v_i3 and v_i3 < T.int64(29), p0[v_i0, v_i1, v_i2 - T.int64(1), v_i3 - T.int64(1), v_i4], T.float32(0))
                for kh_0, kw_0, n_2, oc_chunk_2, oh_2, ow_2, oc_block_2, ic_1, kh_1, kw_1, n_3, oc_chunk_3, oh_3, ow_3 in T.grid(T.int64(1), T.int64(3), T.int64(1), T.int64(1), T.int64(1), T.int64(14), T.int64(2), T.int64(32), T.int64(3), T.int64(1), T.int64(1), T.int64(2), T.int64(2), T.int64(1)):
                    for oc_block_3_fused in T.vectorized(T.int64(8)):
                        with T.block("conv2d_NCHWc_update"):
                            v_n = T.axis.spatial(T.int64(1), n_2 + n_3)
                            v_oc_chunk = T.axis.spatial(T.int64(4), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused_fused % T.int64(8) // T.int64(4) * T.int64(2) + oc_chunk_2 * T.int64(2) + oc_chunk_3)
                            v_oh = T.axis.spatial(T.int64(28), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused_fused // T.int64(8) * T.int64(2) + oh_2 * T.int64(2) + oh_3)
                            v_ow = T.axis.spatial(T.int64(28), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused_fused % T.int64(4) // T.int64(2) * T.int64(14) + ow_2 + ow_3)
                            v_oc_block = T.axis.spatial(T.int64(32), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused_fused % T.int64(2) * T.int64(16) + oc_block_2 * T.int64(8) + oc_block_3_fused)
                            v_ic = T.axis.reduce(T.int64(128), ic_0 * T.int64(32) + ic_1)
                            v_kh = T.axis.reduce(T.int64(3), kh_0 * T.int64(3) + kh_1)
                            v_kw = T.axis.reduce(T.int64(3), kw_0 + kw_1)
                            T.reads(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block], data_pad[v_n, v_ic // T.int64(128), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(128)], p1[v_oc_chunk, v_ic // T.int64(128), v_kh, v_kw, v_ic % T.int64(128), v_oc_block])
                            T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                            T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                            conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] + data_pad[v_n, v_ic // T.int64(128), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(128)] * p1[v_oc_chunk, v_ic // T.int64(128), v_kh, v_kw, v_ic % T.int64(128), v_oc_block]
            for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(2), T.int64(2), T.int64(14)):
                for ax4_fused in T.vectorized(T.int64(16)):
                    with T.block("T_relu"):
                        v_ax0 = T.axis.spatial(T.int64(1), ax0)
                        v_ax1 = T.axis.spatial(T.int64(4), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused_fused % T.int64(8) // T.int64(4) * T.int64(2) + ax1)
                        v_ax2 = T.axis.spatial(T.int64(28), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused_fused // T.int64(8) * T.int64(2) + ax2)
                        v_ax3 = T.axis.spatial(T.int64(28), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused_fused % T.int64(4) // T.int64(2) * T.int64(14) + ax3)
                        v_ax4 = T.axis.spatial(T.int64(32), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused_fused % T.int64(2) * T.int64(16) + ax4_fused)
                        T.reads(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4])
                        T.writes(T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                        T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.max(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] + p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4], T.float32(0))
b0 = sch.get_block(name="data_pad", func_name="main")
b1 = sch.get_block(name="conv2d_NCHWc", func_name="main")
b2 = sch.get_block(name="T_add", func_name="main")
b3 = sch.get_block(name="root", func_name="main")
sch.compute_inline(block=b2)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSRSRS")
l4, l5, l6, l7, l8, l9, l10, l11 = sch.get_loops(block=b1)
v12, v13, v14, v15 = sch.sample_perfect_tile(loop=l4, n=4, max_innermost_factor=64, decision=[1, 1, 1, 1])
l16, l17, l18, l19 = sch.split(loop=l4, factors=[v12, v13, v14, v15], preserve_unit_iters=True)
v20, v21, v22, v23 = sch.sample_perfect_tile(loop=l5, n=4, max_innermost_factor=64, decision=[1, 2, 1, 2])
l24, l25, l26, l27 = sch.split(loop=l5, factors=[v20, v21, v22, v23], preserve_unit_iters=True)
v28, v29, v30, v31 = sch.sample_perfect_tile(loop=l6, n=4, max_innermost_factor=64, decision=[14, 1, 1, 2])
l32, l33, l34, l35 = sch.split(loop=l6, factors=[v28, v29, v30, v31], preserve_unit_iters=True)
v36, v37, v38, v39 = sch.sample_perfect_tile(loop=l7, n=4, max_innermost_factor=64, decision=[1, 2, 14, 1])
l40, l41, l42, l43 = sch.split(loop=l7, factors=[v36, v37, v38, v39], preserve_unit_iters=True)
v44, v45, v46, v47 = sch.sample_perfect_tile(loop=l8, n=4, max_innermost_factor=64, decision=[1, 2, 2, 8])
l48, l49, l50, l51 = sch.split(loop=l8, factors=[v44, v45, v46, v47], preserve_unit_iters=True)
v52, v53 = sch.sample_perfect_tile(loop=l9, n=2, max_innermost_factor=64, decision=[4, 32])
l54, l55 = sch.split(loop=l9, factors=[v52, v53], preserve_unit_iters=True)
v56, v57 = sch.sample_perfect_tile(loop=l10, n=2, max_innermost_factor=64, decision=[1, 3])
l58, l59 = sch.split(loop=l10, factors=[v56, v57], preserve_unit_iters=True)
v60, v61 = sch.sample_perfect_tile(loop=l11, n=2, max_innermost_factor=64, decision=[3, 1])
l62, l63 = sch.split(loop=l11, factors=[v60, v61], preserve_unit_iters=True)
sch.reorder(l16, l24, l32, l40, l48, l17, l25, l33, l41, l49, l54, l58, l62, l18, l26, l34, l42, l50, l55, l59, l63, l19, l27, l35, l43, l51)
b64, = sch.get_consumers(block=b1)
sch.reverse_compute_at(block=b64, loop=l49, preserve_unit_loops=True, index=-1)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.vectorize", ann_val=64)
v65 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.unroll_explicit", ann_val=v65)
l66 = sch.sample_compute_location(block=b0, decision=10)
sch.compute_at(block=b0, loop=l66, preserve_unit_loops=True, index=-1)
sch.enter_postproc()
b67 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b67, ann_key="meta_schedule.parallel")
sch.unannotate(block_or_loop=b67, ann_key="meta_schedule.vectorize")
sch.unannotate(block_or_loop=b67, ann_key="meta_schedule.unroll_explicit")
b68, b69, b70 = sch.get_child_blocks(b67)
l71, l72, l73, l74, l75, l76, l77, l78, l79, l80, l81, l82, l83, l84, l85, l86 = sch.get_loops(block=b68)
l87 = sch.fuse(l71, l72, l73, l74, l75, l76, l77, l78, l79, l80, preserve_unit_iters=True)
sch.parallel(loop=l87)
l88 = sch.fuse(l86, preserve_unit_iters=True)
sch.vectorize(loop=l88)
l89, l90, l91, l92, l93, l94, l95, l96, l97, l98, l99, l100, l101, l102, l103, l104, l105 = sch.get_loops(block=b69)
l106 = sch.fuse(l89, preserve_unit_iters=True)
sch.parallel(loop=l106)
l107 = sch.fuse(l105, preserve_unit_iters=True)
sch.vectorize(loop=l107)
sch.annotate(block_or_loop=l106, ann_key="pragma_auto_unroll_max_step", ann_val=512)
sch.annotate(block_or_loop=l106, ann_key="pragma_unroll_explicit", ann_val=1)
l108, l109, l110, l111, l112, l113 = sch.get_loops(block=b70)
l114 = sch.fuse(l113, preserve_unit_iters=True)
sch.vectorize(loop=l114)
b115 = sch.get_block(name="conv2d_NCHWc", func_name="main")
l116, l117, l118, l119, l120, l121, l122, l123, l124, l125, l126, l127, l128, l129, l130, l131, l132 = sch.get_loops(block=b115)
b133 = sch.decompose_reduction(block=b115, loop=l117)
2024-04-28 21:42:38 [INFO] [task_scheduler.cc:131] [Task #13: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #118: GFLOPs: 221.4819. Time: 1044.8335 us. Best GFLOPs: 763.3626
2024-04-28 21:42:38 [INFO] [task_scheduler.cc:131] [Task #13: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #119: GFLOPs: 291.9912. Time: 792.5298 us. Best GFLOPs: 763.3626
2024-04-28 21:42:38 [INFO] [task_scheduler.cc:131] [Task #13: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #120: GFLOPs: 101.5155. Time: 2279.5695 us. Best GFLOPs: 763.3626
2024-04-28 21:42:38 [INFO] [task_scheduler.cc:131] [Task #13: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #121: GFLOPs: 165.5871. Time: 1397.5228 us. Best GFLOPs: 763.3626
2024-04-28 21:42:38 [INFO] [task_scheduler.cc:131] [Task #13: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #122: GFLOPs: 141.7235. Time: 1632.8396 us. Best GFLOPs: 763.3626
2024-04-28 21:42:38 [INFO] [task_scheduler.cc:131] [Task #13: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #123: GFLOPs: 172.8666. Time: 1338.6724 us. Best GFLOPs: 763.3626
2024-04-28 21:42:38 [INFO] [task_scheduler.cc:131] [Task #13: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #124: GFLOPs: 106.2552. Time: 2177.8867 us. Best GFLOPs: 763.3626
2024-04-28 21:42:38 [INFO] [task_scheduler.cc:131] [Task #13: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #125: GFLOPs: 106.7532. Time: 2167.7257 us. Best GFLOPs: 763.3626
2024-04-28 21:42:38 [INFO] [task_scheduler.cc:131] [Task #13: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #126: GFLOPs: 15.2453. Time: 15179.2119 us. Best GFLOPs: 763.3626
2024-04-28 21:42:38 [INFO] [task_scheduler.cc:131] [Task #13: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #127: GFLOPs: 58.2111. Time: 3975.3878 us. Best GFLOPs: 763.3626
2024-04-28 21:42:38 [INFO] [task_scheduler.cc:131] [Task #13: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #128: GFLOPs: 171.6468. Time: 1348.1855 us. Best GFLOPs: 763.3626
2024-04-28 22:53:00 [INFO] [evolutionary_search.cc:713] Generating candidates......
2024-04-28 22:53:01 [INFO] [evolutionary_search.cc:715] Picked top 102 candidate(s) from database
2024-04-28 22:53:06 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x3cedc28)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x30c43a8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x331a288)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x3f41058)]: 0 failure(s)
2024-04-28 22:53:06 [INFO] [evolutionary_search.cc:723] Sampled 410 candidate(s)
2024-04-28 22:53:18 [INFO] [evolutionary_search.cc:621] Evolve iter #0 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x3cedc28)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x30c43a8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x331a288)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x3f41058)]: 0 failure(s)
2024-04-28 22:53:29 [INFO] [evolutionary_search.cc:621] Evolve iter #1 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x3cedc28)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x30c43a8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x331a288)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x3f41058)]: 0 failure(s)
2024-04-28 22:53:41 [INFO] [evolutionary_search.cc:621] Evolve iter #2 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x3cedc28)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x30c43a8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x331a288)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x3f41058)]: 0 failure(s)
2024-04-28 22:53:52 [INFO] [evolutionary_search.cc:621] Evolve iter #3 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x3cedc28)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x30c43a8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x331a288)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x3f41058)]: 0 failure(s)
2024-04-28 22:53:58 [INFO] [evolutionary_search.cc:649] Scores of the best 64 candidates:
[1 : 16]:	0.9730  0.9543  0.9539  0.9476  0.9476  0.9476  0.9285  0.9067  0.8990  0.8803  0.8575  0.8575  0.8186  0.8039  0.7991  0.7991
[17 : 32]:	0.7732  0.7650  0.7624  0.7453  0.7382  0.7350  0.7325  0.7280  0.7179  0.7091  0.7042  0.7042  0.6845  0.6842  0.6738  0.6736
[33 : 48]:	0.6672  0.6661  0.6633  0.6605  0.6546  0.6422  0.6289  0.6234  0.6108  0.5953  0.5947  0.5810  0.5797  0.5771  0.5770  0.5699
[49 : 64]:	0.5657  0.5619  0.5607  0.5601  0.5554  0.5526  0.5522  0.5491  0.5485  0.5438  0.5433  0.5425  0.5424  0.5359  0.5320  0.5232
2024-04-28 22:53:59 [INFO] [evolutionary_search.cc:727] Got 64 candidate(s) with evolutionary search
2024-04-28 22:53:59 [INFO] [evolutionary_search.cc:730] Sending 64 candidates(s) for measurement
2024-04-28 22:55:19 [INFO] [task_scheduler.cc:131] [Task #13: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #129: GFLOPs: 759.9715. Time: 304.5005 us. Best GFLOPs: 763.3626
2024-04-28 22:55:19 [INFO] [task_scheduler.cc:131] [Task #13: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #130: GFLOPs: 920.1790. Time: 251.4855 us. Best GFLOPs: 920.1790
2024-04-28 22:55:19 [INFO] [task_scheduler.cc:131] [Task #13: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #131: GFLOPs: 751.4754. Time: 307.9432 us. Best GFLOPs: 920.1790
2024-04-28 22:55:19 [INFO] [task_scheduler.cc:131] [Task #13: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #132: GFLOPs: 758.7616. Time: 304.9860 us. Best GFLOPs: 920.1790
2024-04-28 22:55:19 [INFO] [task_scheduler.cc:131] [Task #13: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #133: GFLOPs: 769.2291. Time: 300.8359 us. Best GFLOPs: 920.1790
2024-04-28 22:55:19 [INFO] [task_scheduler.cc:131] [Task #13: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #134: GFLOPs: 763.6713. Time: 303.0253 us. Best GFLOPs: 920.1790
2024-04-28 22:55:19 [INFO] [task_scheduler.cc:131] [Task #13: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #135: GFLOPs: 405.5745. Time: 570.5776 us. Best GFLOPs: 920.1790
2024-04-28 22:55:19 [INFO] [task_scheduler.cc:131] [Task #13: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #136: GFLOPs: 866.7122. Time: 266.9995 us. Best GFLOPs: 920.1790
2024-04-28 22:55:19 [INFO] [task_scheduler.cc:131] [Task #13: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #137: GFLOPs: 892.1205. Time: 259.3951 us. Best GFLOPs: 920.1790
2024-04-28 22:55:19 [INFO] [task_scheduler.cc:131] [Task #13: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #138: GFLOPs: 899.7828. Time: 257.1862 us. Best GFLOPs: 920.1790
2024-04-28 22:55:19 [INFO] [task_scheduler.cc:131] [Task #13: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #139: GFLOPs: 683.1585. Time: 338.7380 us. Best GFLOPs: 920.1790
2024-04-28 22:55:19 [INFO] [task_scheduler.cc:131] [Task #13: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #140: GFLOPs: 613.2006. Time: 377.3834 us. Best GFLOPs: 920.1790
2024-04-28 22:55:19 [INFO] [task_scheduler.cc:131] [Task #13: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #141: GFLOPs: 752.6252. Time: 307.4727 us. Best GFLOPs: 920.1790
2024-04-28 22:55:19 [INFO] [task_scheduler.cc:131] [Task #13: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #142: GFLOPs: 303.6394. Time: 762.1268 us. Best GFLOPs: 920.1790
2024-04-28 22:55:19 [INFO] [task_scheduler.cc:131] [Task #13: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #143: GFLOPs: 597.3961. Time: 387.3673 us. Best GFLOPs: 920.1790
2024-04-28 22:55:19 [INFO] [task_scheduler.cc:131] [Task #13: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #144: GFLOPs: 613.4398. Time: 377.2362 us. Best GFLOPs: 920.1790
2024-04-28 22:55:19 [INFO] [task_scheduler.cc:131] [Task #13: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #145: GFLOPs: 770.4076. Time: 300.3757 us. Best GFLOPs: 920.1790
2024-04-28 22:55:19 [INFO] [task_scheduler.cc:131] [Task #13: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #146: GFLOPs: 715.8063. Time: 323.2882 us. Best GFLOPs: 920.1790
2024-04-28 22:55:19 [INFO] [task_scheduler.cc:131] [Task #13: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #147: GFLOPs: 706.7409. Time: 327.4350 us. Best GFLOPs: 920.1790
2024-04-28 22:55:19 [INFO] [task_scheduler.cc:131] [Task #13: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #148: GFLOPs: 664.7319. Time: 348.1279 us. Best GFLOPs: 920.1790
2024-04-28 22:55:19 [INFO] [task_scheduler.cc:131] [Task #13: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #149: GFLOPs: 684.6174. Time: 338.0161 us. Best GFLOPs: 920.1790
2024-04-28 22:55:19 [INFO] [task_scheduler.cc:131] [Task #13: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #150: GFLOPs: 504.0412. Time: 459.1127 us. Best GFLOPs: 920.1790
2024-04-28 22:55:19 [INFO] [task_scheduler.cc:131] [Task #13: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #151: GFLOPs: 68.1639. Time: 3394.9288 us. Best GFLOPs: 920.1790
2024-04-28 22:55:19 [INFO] [task_scheduler.cc:131] [Task #13: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #152: GFLOPs: 414.8203. Time: 557.8601 us. Best GFLOPs: 920.1790
2024-04-28 22:55:19 [INFO] [task_scheduler.cc:131] [Task #13: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #153: GFLOPs: 875.1810. Time: 264.4158 us. Best GFLOPs: 920.1790
2024-04-28 22:55:19 [INFO] [task_scheduler.cc:131] [Task #13: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #154: GFLOPs: 757.6712. Time: 305.4250 us. Best GFLOPs: 920.1790
2024-04-28 22:55:19 [INFO] [task_scheduler.cc:131] [Task #13: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #155: GFLOPs: 851.8433. Time: 271.6599 us. Best GFLOPs: 920.1790
2024-04-28 22:55:19 [INFO] [task_scheduler.cc:131] [Task #13: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #156: GFLOPs: 850.7926. Time: 271.9954 us. Best GFLOPs: 920.1790
2024-04-28 22:55:19 [INFO] [task_scheduler.cc:131] [Task #13: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #157: GFLOPs: 718.7822. Time: 321.9497 us. Best GFLOPs: 920.1790
2024-04-28 22:55:19 [INFO] [task_scheduler.cc:131] [Task #13: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #158: GFLOPs: 585.2960. Time: 395.3755 us. Best GFLOPs: 920.1790
2024-04-28 22:55:19 [INFO] [task_scheduler.cc:131] [Task #13: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #159: GFLOPs: 528.3187. Time: 438.0154 us. Best GFLOPs: 920.1790
2024-04-28 22:55:19 [INFO] [task_scheduler.cc:131] [Task #13: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #160: GFLOPs: 120.1309. Time: 1926.3292 us. Best GFLOPs: 920.1790
2024-04-28 22:55:19 [INFO] [task_scheduler.cc:131] [Task #13: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #161: GFLOPs: 365.2219. Time: 633.6195 us. Best GFLOPs: 920.1790
2024-04-28 22:55:19 [INFO] [task_scheduler.cc:131] [Task #13: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #162: GFLOPs: 757.1464. Time: 305.6367 us. Best GFLOPs: 920.1790
2024-04-28 22:55:19 [INFO] [task_scheduler.cc:131] [Task #13: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #163: GFLOPs: 560.7612. Time: 412.6743 us. Best GFLOPs: 920.1790
2024-04-28 22:55:19 [INFO] [task_scheduler.cc:131] [Task #13: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #164: GFLOPs: 482.2536. Time: 479.8548 us. Best GFLOPs: 920.1790
2024-04-28 22:55:19 [INFO] [task_scheduler.cc:131] [Task #13: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #165: GFLOPs: 589.6670. Time: 392.4447 us. Best GFLOPs: 920.1790
2024-04-28 22:55:19 [INFO] [task_scheduler.cc:131] [Task #13: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #166: GFLOPs: 444.5542. Time: 520.5478 us. Best GFLOPs: 920.1790
2024-04-28 22:55:19 [INFO] [task_scheduler.cc:131] [Task #13: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #167: GFLOPs: 463.9210. Time: 498.8171 us. Best GFLOPs: 920.1790
2024-04-28 22:55:19 [INFO] [task_scheduler.cc:131] [Task #13: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #168: GFLOPs: 678.5424. Time: 341.0424 us. Best GFLOPs: 920.1790
2024-04-28 22:55:19 [INFO] [task_scheduler.cc:131] [Task #13: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #169: GFLOPs: 429.4783. Time: 538.8205 us. Best GFLOPs: 920.1790
2024-04-28 22:55:19 [INFO] [task_scheduler.cc:131] [Task #13: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #170: GFLOPs: 697.9518. Time: 331.5583 us. Best GFLOPs: 920.1790
2024-04-28 22:55:19 [INFO] [task_scheduler.cc:131] [Task #13: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #171: GFLOPs: 72.3513. Time: 3198.4439 us. Best GFLOPs: 920.1790
2024-04-28 22:55:19 [INFO] [task_scheduler.cc:131] [Task #13: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #172: GFLOPs: 632.7905. Time: 365.7003 us. Best GFLOPs: 920.1790
2024-04-28 22:55:19 [INFO] [task_scheduler.cc:131] [Task #13: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #173: GFLOPs: 805.0517. Time: 287.4495 us. Best GFLOPs: 920.1790
2024-04-28 22:55:19 [INFO] [task_scheduler.cc:131] [Task #13: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #174: GFLOPs: 598.1657. Time: 386.8689 us. Best GFLOPs: 920.1790
2024-04-28 22:55:19 [INFO] [task_scheduler.cc:131] [Task #13: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #175: GFLOPs: 657.7214. Time: 351.8385 us. Best GFLOPs: 920.1790
2024-04-28 22:55:19 [INFO] [task_scheduler.cc:131] [Task #13: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #176: GFLOPs: 114.9872. Time: 2012.4993 us. Best GFLOPs: 920.1790
2024-04-28 22:55:19 [INFO] [task_scheduler.cc:131] [Task #13: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #177: GFLOPs: 275.0147. Time: 841.4521 us. Best GFLOPs: 920.1790
2024-04-28 22:55:19 [INFO] [task_scheduler.cc:131] [Task #13: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #178: GFLOPs: 139.9489. Time: 1653.5441 us. Best GFLOPs: 920.1790
2024-04-28 22:55:19 [INFO] [task_scheduler.cc:131] [Task #13: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #179: GFLOPs: 255.8892. Time: 904.3433 us. Best GFLOPs: 920.1790
2024-04-28 22:55:19 [INFO] [task_scheduler.cc:131] [Task #13: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #180: GFLOPs: 266.5242. Time: 868.2578 us. Best GFLOPs: 920.1790
2024-04-28 22:55:19 [INFO] [task_scheduler.cc:131] [Task #13: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #181: GFLOPs: 227.2839. Time: 1018.1615 us. Best GFLOPs: 920.1790
2024-04-28 22:55:19 [INFO] [task_scheduler.cc:131] [Task #13: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #182: GFLOPs: 324.4338. Time: 713.2787 us. Best GFLOPs: 920.1790
2024-04-28 22:55:19 [INFO] [task_scheduler.cc:131] [Task #13: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #183: GFLOPs: 68.3519. Time: 3385.5907 us. Best GFLOPs: 920.1790
2024-04-28 22:55:19 [INFO] [task_scheduler.cc:131] [Task #13: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #184: GFLOPs: 140.2837. Time: 1649.5976 us. Best GFLOPs: 920.1790
2024-04-28 22:55:19 [INFO] [task_scheduler.cc:131] [Task #13: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #185: GFLOPs: 503.7018. Time: 459.4221 us. Best GFLOPs: 920.1790
2024-04-28 22:55:19 [INFO] [task_scheduler.cc:131] [Task #13: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #186: GFLOPs: 166.5752. Time: 1389.2327 us. Best GFLOPs: 920.1790
2024-04-28 22:55:19 [INFO] [task_scheduler.cc:131] [Task #13: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #187: GFLOPs: 505.3417. Time: 457.9312 us. Best GFLOPs: 920.1790
2024-04-28 22:55:19 [INFO] [task_scheduler.cc:131] [Task #13: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #188: GFLOPs: 330.5002. Time: 700.1864 us. Best GFLOPs: 920.1790
2024-04-28 22:55:19 [INFO] [task_scheduler.cc:131] [Task #13: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #189: GFLOPs: 331.7143. Time: 697.6235 us. Best GFLOPs: 920.1790
2024-04-28 22:55:19 [INFO] [task_scheduler.cc:131] [Task #13: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #190: GFLOPs: 1.5241. Time: 151836.0483 us. Best GFLOPs: 920.1790
2024-04-28 22:55:19 [INFO] [task_scheduler.cc:131] [Task #13: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #191: GFLOPs: 106.0586. Time: 2181.9239 us. Best GFLOPs: 920.1790
2024-04-28 22:55:19 [INFO] [task_scheduler.cc:131] [Task #13: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #192: GFLOPs: 16.1641. Time: 14316.4248 us. Best GFLOPs: 920.1790
2024-04-28 23:47:50 [INFO] [evolutionary_search.cc:713] Generating candidates......
2024-04-28 23:47:51 [INFO] [evolutionary_search.cc:715] Picked top 102 candidate(s) from database
2024-04-28 23:47:55 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x3cedc28)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x30c43a8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x331a288)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x3f41058)]: 0 failure(s)
2024-04-28 23:47:55 [INFO] [evolutionary_search.cc:723] Sampled 410 candidate(s)
2024-04-28 23:48:07 [INFO] [evolutionary_search.cc:621] Evolve iter #0 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x3cedc28)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x30c43a8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x331a288)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x3f41058)]: 0 failure(s)
2024-04-28 23:48:19 [INFO] [evolutionary_search.cc:621] Evolve iter #1 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x3cedc28)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x30c43a8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x331a288)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x3f41058)]: 0 failure(s)
2024-04-28 23:48:29 [INFO] [evolutionary_search.cc:621] Evolve iter #2 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x3cedc28)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x30c43a8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x331a288)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x3f41058)]: 0 failure(s)
2024-04-28 23:48:40 [INFO] [evolutionary_search.cc:621] Evolve iter #3 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x3cedc28)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x30c43a8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x331a288)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x3f41058)]: 0 failure(s)
2024-04-28 23:48:46 [INFO] [evolutionary_search.cc:649] Scores of the best 64 candidates:
[1 : 16]:	0.9880  0.9456  0.9368  0.9359  0.9303  0.9301  0.9177  0.9161  0.9155  0.9003  0.8991  0.8959  0.8943  0.8929  0.8821  0.8778
[17 : 32]:	0.8710  0.8656  0.8634  0.8606  0.8579  0.8579  0.8551  0.8508  0.8508  0.8477  0.8477  0.8465  0.8355  0.8346  0.8341  0.8336
[33 : 48]:	0.8312  0.8306  0.8289  0.8284  0.8246  0.8220  0.8172  0.8158  0.8128  0.8066  0.8057  0.8057  0.8014  0.8013  0.8013  0.8006
[49 : 64]:	0.7997  0.7983  0.7983  0.7981  0.7953  0.7931  0.7864  0.7826  0.7818  0.7809  0.7793  0.7784  0.7770  0.7753  0.7706  0.7706
2024-04-28 23:48:47 [INFO] [evolutionary_search.cc:727] Got 64 candidate(s) with evolutionary search
2024-04-28 23:48:47 [INFO] [evolutionary_search.cc:730] Sending 64 candidates(s) for measurement
2024-04-28 23:50:23 [INFO] [task_scheduler.cc:131] [Task #13: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #193: GFLOPs: 954.4245. Time: 242.4620 us. Best GFLOPs: 954.4245
2024-04-28 23:50:23 [INFO] [task_scheduler.cc:131] [Task #13: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #194: GFLOPs: 795.9650. Time: 290.7310 us. Best GFLOPs: 954.4245
2024-04-28 23:50:23 [INFO] [task_scheduler.cc:131] [Task #13: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #195: GFLOPs: 942.8600. Time: 245.4359 us. Best GFLOPs: 954.4245
2024-04-28 23:50:23 [INFO] [task_scheduler.cc:131] [Task #13: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #196: GFLOPs: 842.8329. Time: 274.5642 us. Best GFLOPs: 954.4245
2024-04-28 23:50:23 [INFO] [task_scheduler.cc:131] [Task #13: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #197: GFLOPs: 688.1225. Time: 336.2944 us. Best GFLOPs: 954.4245
2024-04-28 23:50:23 [INFO] [task_scheduler.cc:131] [Task #13: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #198: GFLOPs: 986.3654. Time: 234.6105 us. Best GFLOPs: 986.3654
2024-04-28 23:50:23 [INFO] [task_scheduler.cc:131] [Task #13: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #199: GFLOPs: 854.7145. Time: 270.7474 us. Best GFLOPs: 986.3654
2024-04-28 23:50:23 [INFO] [task_scheduler.cc:131] [Task #13: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #200: GFLOPs: 834.6712. Time: 277.2489 us. Best GFLOPs: 986.3654
2024-04-28 23:50:23 [INFO] [task_scheduler.cc:131] [Task #13: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #201: GFLOPs: 918.8809. Time: 251.8408 us. Best GFLOPs: 986.3654
2024-04-28 23:50:23 [INFO] [task_scheduler.cc:131] [Task #13: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #202: GFLOPs: 730.9658. Time: 316.5835 us. Best GFLOPs: 986.3654
2024-04-28 23:50:23 [INFO] [task_scheduler.cc:131] [Task #13: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #203: GFLOPs: 899.7797. Time: 257.1871 us. Best GFLOPs: 986.3654
2024-04-28 23:50:23 [INFO] [task_scheduler.cc:131] [Task #13: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #204: GFLOPs: 798.9926. Time: 289.6293 us. Best GFLOPs: 986.3654
2024-04-28 23:50:23 [INFO] [task_scheduler.cc:131] [Task #13: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #205: GFLOPs: 874.0816. Time: 264.7484 us. Best GFLOPs: 986.3654
2024-04-28 23:50:23 [INFO] [task_scheduler.cc:131] [Task #13: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #206: GFLOPs: 700.4714. Time: 330.3657 us. Best GFLOPs: 986.3654
2024-04-28 23:50:23 [INFO] [task_scheduler.cc:131] [Task #13: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #207: GFLOPs: 805.3941. Time: 287.3273 us. Best GFLOPs: 986.3654
2024-04-28 23:50:23 [INFO] [task_scheduler.cc:131] [Task #13: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #208: GFLOPs: 378.0068. Time: 612.1893 us. Best GFLOPs: 986.3654
2024-04-28 23:50:23 [INFO] [task_scheduler.cc:131] [Task #13: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #209: GFLOPs: 471.5965. Time: 490.6985 us. Best GFLOPs: 986.3654
2024-04-28 23:50:23 [INFO] [task_scheduler.cc:131] [Task #13: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #210: GFLOPs: 896.1402. Time: 258.2316 us. Best GFLOPs: 986.3654
2024-04-28 23:50:23 [INFO] [task_scheduler.cc:131] [Task #13: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #211: GFLOPs: 773.7155. Time: 299.0915 us. Best GFLOPs: 986.3654
2024-04-28 23:50:23 [INFO] [task_scheduler.cc:131] [Task #13: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #212: GFLOPs: 610.6091. Time: 378.9850 us. Best GFLOPs: 986.3654
2024-04-28 23:50:23 [INFO] [task_scheduler.cc:131] [Task #13: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #213: GFLOPs: 751.9552. Time: 307.7467 us. Best GFLOPs: 986.3654
2024-04-28 23:50:23 [INFO] [task_scheduler.cc:131] [Task #13: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #214: GFLOPs: 753.2815. Time: 307.2048 us. Best GFLOPs: 986.3654
2024-04-28 23:50:23 [INFO] [task_scheduler.cc:131] [Task #13: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #215: GFLOPs: 990.9245. Time: 233.5311 us. Best GFLOPs: 990.9245
2024-04-28 23:50:23 [INFO] [task_scheduler.cc:131] [Task #13: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #216: GFLOPs: 834.4763. Time: 277.3137 us. Best GFLOPs: 990.9245
2024-04-28 23:50:23 [INFO] [task_scheduler.cc:131] [Task #13: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #217: GFLOPs: 888.4669. Time: 260.4618 us. Best GFLOPs: 990.9245
2024-04-28 23:50:23 [INFO] [task_scheduler.cc:131] [Task #13: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #218: GFLOPs: 761.3795. Time: 303.9374 us. Best GFLOPs: 990.9245
2024-04-28 23:50:23 [INFO] [task_scheduler.cc:131] [Task #13: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #219: GFLOPs: 764.1650. Time: 302.8295 us. Best GFLOPs: 990.9245
2024-04-28 23:50:23 [INFO] [task_scheduler.cc:131] [Task #13: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #220: GFLOPs: 766.9087. Time: 301.7461 us. Best GFLOPs: 990.9245
2024-04-28 23:50:23 [INFO] [task_scheduler.cc:131] [Task #13: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #221: GFLOPs: 39.0681. Time: 5923.2878 us. Best GFLOPs: 990.9245
2024-04-28 23:50:23 [INFO] [task_scheduler.cc:131] [Task #13: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #222: GFLOPs: 633.2178. Time: 365.4536 us. Best GFLOPs: 990.9245
2024-04-28 23:50:23 [INFO] [task_scheduler.cc:131] [Task #13: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #223: GFLOPs: 929.8743. Time: 248.8634 us. Best GFLOPs: 990.9245
2024-04-28 23:50:23 [INFO] [task_scheduler.cc:131] [Task #13: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #224: GFLOPs: 759.8997. Time: 304.5293 us. Best GFLOPs: 990.9245
2024-04-28 23:50:23 [INFO] [task_scheduler.cc:131] [Task #13: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #225: GFLOPs: 718.1815. Time: 322.2190 us. Best GFLOPs: 990.9245
2024-04-28 23:50:23 [INFO] [task_scheduler.cc:131] [Task #13: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #226: GFLOPs: 551.1401. Time: 419.8782 us. Best GFLOPs: 990.9245
2024-04-28 23:50:23 [INFO] [task_scheduler.cc:131] [Task #13: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #227: GFLOPs: 753.1042. Time: 307.2771 us. Best GFLOPs: 990.9245
2024-04-28 23:50:23 [INFO] [task_scheduler.cc:131] [Task #13: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #228: GFLOPs: 933.7146. Time: 247.8399 us. Best GFLOPs: 990.9245
2024-04-28 23:50:23 [INFO] [task_scheduler.cc:131] [Task #13: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #229: GFLOPs: 745.7718. Time: 310.2983 us. Best GFLOPs: 990.9245
2024-04-28 23:50:23 [INFO] [task_scheduler.cc:131] [Task #13: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #230: GFLOPs: 594.9376. Time: 388.9680 us. Best GFLOPs: 990.9245
2024-04-28 23:50:23 [INFO] [task_scheduler.cc:131] [Task #13: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #231: GFLOPs: 759.5579. Time: 304.6663 us. Best GFLOPs: 990.9245
2024-04-28 23:50:23 [INFO] [task_scheduler.cc:131] [Task #13: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #232: GFLOPs: 746.9162. Time: 309.8229 us. Best GFLOPs: 990.9245
2024-04-28 23:50:23 [INFO] [task_scheduler.cc:131] [Task #13: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #233: GFLOPs: 979.4945. Time: 236.2563 us. Best GFLOPs: 990.9245
2024-04-28 23:50:23 [INFO] [task_scheduler.cc:131] [Task #13: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #234: GFLOPs: 795.9492. Time: 290.7368 us. Best GFLOPs: 990.9245
2024-04-28 23:50:23 [INFO] [task_scheduler.cc:131] [Task #13: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #235: GFLOPs: 719.7086. Time: 321.5353 us. Best GFLOPs: 990.9245
2024-04-28 23:50:23 [INFO] [task_scheduler.cc:131] [Task #13: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #236: GFLOPs: 734.8525. Time: 314.9091 us. Best GFLOPs: 990.9245
2024-04-28 23:50:23 [INFO] [task_scheduler.cc:131] [Task #13: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #237: GFLOPs: 745.7144. Time: 310.3222 us. Best GFLOPs: 990.9245
2024-04-28 23:50:23 [INFO] [task_scheduler.cc:131] [Task #13: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #238: GFLOPs: 863.8370. Time: 267.8882 us. Best GFLOPs: 990.9245
2024-04-28 23:50:23 [INFO] [task_scheduler.cc:131] [Task #13: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #239: GFLOPs: 820.6254. Time: 281.9943 us. Best GFLOPs: 990.9245
2024-04-28 23:50:23 [INFO] [task_scheduler.cc:131] [Task #13: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #240: GFLOPs: 508.2786. Time: 455.2852 us. Best GFLOPs: 990.9245
2024-04-28 23:50:23 [INFO] [task_scheduler.cc:131] [Task #13: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #241: GFLOPs: 884.1999. Time: 261.7188 us. Best GFLOPs: 990.9245
2024-04-28 23:50:23 [INFO] [task_scheduler.cc:131] [Task #13: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #242: GFLOPs: 893.2352. Time: 259.0714 us. Best GFLOPs: 990.9245
2024-04-28 23:50:23 [INFO] [task_scheduler.cc:131] [Task #13: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #243: GFLOPs: 873.1473. Time: 265.0317 us. Best GFLOPs: 990.9245
2024-04-28 23:50:23 [INFO] [task_scheduler.cc:131] [Task #13: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #244: GFLOPs: 647.5053. Time: 357.3897 us. Best GFLOPs: 990.9245
2024-04-28 23:50:23 [INFO] [task_scheduler.cc:131] [Task #13: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #245: GFLOPs: 785.2109. Time: 294.7128 us. Best GFLOPs: 990.9245
2024-04-28 23:50:23 [INFO] [task_scheduler.cc:131] [Task #13: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #246: GFLOPs: 949.0882. Time: 243.8253 us. Best GFLOPs: 990.9245
2024-04-28 23:50:23 [INFO] [task_scheduler.cc:131] [Task #13: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #247: GFLOPs: 423.9394. Time: 545.8604 us. Best GFLOPs: 990.9245
2024-04-28 23:50:23 [INFO] [task_scheduler.cc:131] [Task #13: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #248: GFLOPs: 391.9870. Time: 590.3556 us. Best GFLOPs: 990.9245
2024-04-28 23:50:23 [INFO] [task_scheduler.cc:131] [Task #13: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #249: GFLOPs: 409.6503. Time: 564.9007 us. Best GFLOPs: 990.9245
2024-04-28 23:50:23 [INFO] [task_scheduler.cc:131] [Task #13: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #250: GFLOPs: 49.5053. Time: 4674.4807 us. Best GFLOPs: 990.9245
2024-04-28 23:50:23 [INFO] [task_scheduler.cc:131] [Task #13: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #251: GFLOPs: 259.9008. Time: 890.3849 us. Best GFLOPs: 990.9245
2024-04-28 23:50:23 [INFO] [task_scheduler.cc:131] [Task #13: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #252: GFLOPs: 105.4329. Time: 2194.8727 us. Best GFLOPs: 990.9245
2024-04-28 23:50:23 [INFO] [task_scheduler.cc:131] [Task #13: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #253: GFLOPs: 548.3313. Time: 422.0290 us. Best GFLOPs: 990.9245
2024-04-28 23:50:23 [INFO] [task_scheduler.cc:131] [Task #13: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #254: GFLOPs: 79.2930. Time: 2918.4377 us. Best GFLOPs: 990.9245
2024-04-28 23:50:23 [INFO] [task_scheduler.cc:131] [Task #13: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #255: GFLOPs: 5.6594. Time: 40889.9793 us. Best GFLOPs: 990.9245
2024-04-28 23:50:23 [INFO] [task_scheduler.cc:131] [Task #13: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #256: GFLOPs: 76.0630. Time: 3042.3672 us. Best GFLOPs: 990.9245
2024-04-28 23:50:23 [INFO] [evolutionary_search.cc:713] Generating candidates......
2024-04-28 23:50:24 [INFO] [evolutionary_search.cc:715] Picked top 102 candidate(s) from database
2024-04-28 23:50:28 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x3cedc28)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x30c43a8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x331a288)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x3f41058)]: 0 failure(s)
2024-04-28 23:50:28 [INFO] [evolutionary_search.cc:723] Sampled 410 candidate(s)
2024-04-28 23:50:40 [INFO] [evolutionary_search.cc:621] Evolve iter #0 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x3cedc28)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x30c43a8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x331a288)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x3f41058)]: 0 failure(s)
2024-04-28 23:50:51 [INFO] [evolutionary_search.cc:621] Evolve iter #1 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x3cedc28)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x30c43a8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x331a288)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x3f41058)]: 0 failure(s)
2024-04-28 23:51:02 [INFO] [evolutionary_search.cc:621] Evolve iter #2 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x3cedc28)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x30c43a8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x331a288)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x3f41058)]: 0 failure(s)
2024-04-28 23:51:13 [INFO] [evolutionary_search.cc:621] Evolve iter #3 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x3cedc28)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x30c43a8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x331a288)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x3f41058)]: 0 failure(s)
2024-04-28 23:51:20 [INFO] [evolutionary_search.cc:649] Scores of the best 64 candidates:
[1 : 16]:	0.9627  0.9627  0.9455  0.9394  0.9261  0.9261  0.9215  0.9201  0.8999  0.8955  0.8955  0.8941  0.8885  0.8871  0.8855  0.8838
[17 : 32]:	0.8825  0.8794  0.8792  0.8762  0.8762  0.8760  0.8731  0.8719  0.8685  0.8629  0.8578  0.8576  0.8576  0.8576  0.8576  0.8570
[33 : 48]:	0.8549  0.8534  0.8518  0.8506  0.8481  0.8437  0.8421  0.8396  0.8389  0.8383  0.8382  0.8361  0.8307  0.8307  0.8304  0.8304
[49 : 64]:	0.8299  0.8282  0.8277  0.8268  0.8257  0.8213  0.8201  0.8184  0.8183  0.8145  0.8142  0.8125  0.8097  0.8059  0.8026  0.7998
2024-04-28 23:51:20 [INFO] [evolutionary_search.cc:727] Got 64 candidate(s) with evolutionary search
2024-04-28 23:51:20 [INFO] [evolutionary_search.cc:730] Sending 64 candidates(s) for measurement
2024-04-28 23:52:57 [INFO] [task_scheduler.cc:131] [Task #13: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #257: GFLOPs: 379.6652. Time: 609.5152 us. Best GFLOPs: 990.9245
2024-04-28 23:52:57 [INFO] [task_scheduler.cc:131] [Task #13: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #258: GFLOPs: 729.8819. Time: 317.0537 us. Best GFLOPs: 990.9245
2024-04-28 23:52:57 [INFO] [task_scheduler.cc:131] [Task #13: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #259: GFLOPs: 895.1458. Time: 258.5185 us. Best GFLOPs: 990.9245
2024-04-28 23:52:57 [INFO] [task_scheduler.cc:131] [Task #13: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #260: GFLOPs: 77.3068. Time: 2993.4191 us. Best GFLOPs: 990.9245
2024-04-28 23:52:57 [INFO] [task_scheduler.cc:131] [Task #13: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #261: GFLOPs: 765.3716. Time: 302.3521 us. Best GFLOPs: 990.9245
2024-04-28 23:52:57 [INFO] [task_scheduler.cc:131] [Task #13: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #262: GFLOPs: 750.3921. Time: 308.3877 us. Best GFLOPs: 990.9245
2024-04-28 23:52:57 [INFO] [task_scheduler.cc:131] [Task #13: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #263: GFLOPs: 629.9714. Time: 367.3368 us. Best GFLOPs: 990.9245
2024-04-28 23:52:57 [INFO] [task_scheduler.cc:131] [Task #13: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #264: GFLOPs: 968.5290. Time: 238.9311 us. Best GFLOPs: 990.9245
2024-04-28 23:52:57 [INFO] [task_scheduler.cc:131] [Task #13: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #265: GFLOPs: 560.0842. Time: 413.1730 us. Best GFLOPs: 990.9245
2024-04-28 23:52:57 [INFO] [task_scheduler.cc:131] [Task #13: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #266: GFLOPs: 473.1221. Time: 489.1162 us. Best GFLOPs: 990.9245
2024-04-28 23:52:57 [INFO] [task_scheduler.cc:131] [Task #13: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #267: GFLOPs: 490.1433. Time: 472.1307 us. Best GFLOPs: 990.9245
2024-04-28 23:52:57 [INFO] [task_scheduler.cc:131] [Task #13: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #268: GFLOPs: 48.3235. Time: 4788.8042 us. Best GFLOPs: 990.9245
2024-04-28 23:52:57 [INFO] [task_scheduler.cc:131] [Task #13: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #269: GFLOPs: 505.8082. Time: 457.5088 us. Best GFLOPs: 990.9245
2024-04-28 23:52:57 [INFO] [task_scheduler.cc:131] [Task #13: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #270: GFLOPs: 889.1044. Time: 260.2751 us. Best GFLOPs: 990.9245
2024-04-28 23:52:57 [INFO] [task_scheduler.cc:131] [Task #13: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #271: GFLOPs: 972.6764. Time: 237.9123 us. Best GFLOPs: 990.9245
2024-04-28 23:52:57 [INFO] [task_scheduler.cc:131] [Task #13: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #272: GFLOPs: 989.2925. Time: 233.9164 us. Best GFLOPs: 990.9245
2024-04-28 23:52:57 [INFO] [task_scheduler.cc:131] [Task #13: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #273: GFLOPs: 919.2214. Time: 251.7475 us. Best GFLOPs: 990.9245
2024-04-28 23:52:57 [INFO] [task_scheduler.cc:131] [Task #13: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #274: GFLOPs: 867.7454. Time: 266.6816 us. Best GFLOPs: 990.9245
2024-04-28 23:52:57 [INFO] [task_scheduler.cc:131] [Task #13: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #275: GFLOPs: 862.5923. Time: 268.2747 us. Best GFLOPs: 990.9245
2024-04-28 23:52:57 [INFO] [task_scheduler.cc:131] [Task #13: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #276: GFLOPs: 865.1704. Time: 267.4753 us. Best GFLOPs: 990.9245
2024-04-28 23:52:57 [INFO] [task_scheduler.cc:131] [Task #13: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #277: GFLOPs: 875.8789. Time: 264.2051 us. Best GFLOPs: 990.9245
2024-04-28 23:52:57 [INFO] [task_scheduler.cc:131] [Task #13: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #278: GFLOPs: 698.8458. Time: 331.1341 us. Best GFLOPs: 990.9245
2024-04-28 23:52:57 [INFO] [task_scheduler.cc:131] [Task #13: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #279: GFLOPs: 913.7529. Time: 253.2541 us. Best GFLOPs: 990.9245
2024-04-28 23:52:57 [INFO] [task_scheduler.cc:131] [Task #13: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #280: GFLOPs: 909.4865. Time: 254.4422 us. Best GFLOPs: 990.9245
2024-04-28 23:52:57 [INFO] [task_scheduler.cc:131] [Task #13: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #281: GFLOPs: 302.9491. Time: 763.8633 us. Best GFLOPs: 990.9245
2024-04-28 23:52:57 [INFO] [task_scheduler.cc:131] [Task #13: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #282: GFLOPs: 903.0831. Time: 256.2463 us. Best GFLOPs: 990.9245
2024-04-28 23:52:57 [INFO] [task_scheduler.cc:131] [Task #13: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #283: GFLOPs: 666.7676. Time: 347.0650 us. Best GFLOPs: 990.9245
2024-04-28 23:52:57 [INFO] [task_scheduler.cc:131] [Task #13: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #284: GFLOPs: 422.5723. Time: 547.6263 us. Best GFLOPs: 990.9245
2024-04-28 23:52:57 [INFO] [task_scheduler.cc:131] [Task #13: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #285: GFLOPs: 385.8343. Time: 599.7696 us. Best GFLOPs: 990.9245
2024-04-28 23:52:57 [INFO] [task_scheduler.cc:131] [Task #13: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #286: GFLOPs: 828.8863. Time: 279.1839 us. Best GFLOPs: 990.9245
2024-04-28 23:52:57 [INFO] [task_scheduler.cc:131] [Task #13: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #287: GFLOPs: 886.7794. Time: 260.9575 us. Best GFLOPs: 990.9245
2024-04-28 23:52:57 [INFO] [task_scheduler.cc:131] [Task #13: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #288: GFLOPs: 681.8742. Time: 339.3760 us. Best GFLOPs: 990.9245
2024-04-28 23:52:57 [INFO] [task_scheduler.cc:131] [Task #13: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #289: GFLOPs: 402.8803. Time: 574.3932 us. Best GFLOPs: 990.9245
2024-04-28 23:52:57 [INFO] [task_scheduler.cc:131] [Task #13: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #290: GFLOPs: 894.1117. Time: 258.8175 us. Best GFLOPs: 990.9245
2024-04-28 23:52:57 [INFO] [task_scheduler.cc:131] [Task #13: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #291: GFLOPs: 845.4028. Time: 273.7295 us. Best GFLOPs: 990.9245
2024-04-28 23:52:57 [INFO] [task_scheduler.cc:131] [Task #13: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #292: GFLOPs: 772.5483. Time: 299.5434 us. Best GFLOPs: 990.9245
2024-04-28 23:52:57 [INFO] [task_scheduler.cc:131] [Task #13: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #293: GFLOPs: 812.7237. Time: 284.7360 us. Best GFLOPs: 990.9245
2024-04-28 23:52:57 [INFO] [task_scheduler.cc:131] [Task #13: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #294: GFLOPs: 974.3322. Time: 237.5080 us. Best GFLOPs: 990.9245
2024-04-28 23:52:57 [INFO] [task_scheduler.cc:131] [Task #13: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #295: GFLOPs: 797.5008. Time: 290.1712 us. Best GFLOPs: 990.9245
2024-04-28 23:52:57 [INFO] [task_scheduler.cc:131] [Task #13: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #296: GFLOPs: 834.2367. Time: 277.3934 us. Best GFLOPs: 990.9245
2024-04-28 23:52:57 [INFO] [task_scheduler.cc:131] [Task #13: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #297: GFLOPs: 1007.9017. Time: 229.5975 us. Best GFLOPs: 1007.9017
2024-04-28 23:52:57 [INFO] [task_scheduler.cc:131] [Task #13: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #298: GFLOPs: 814.1623. Time: 284.2329 us. Best GFLOPs: 1007.9017
2024-04-28 23:52:57 [INFO] [task_scheduler.cc:131] [Task #13: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #299: GFLOPs: 884.8742. Time: 261.5193 us. Best GFLOPs: 1007.9017
2024-04-28 23:52:57 [INFO] [task_scheduler.cc:131] [Task #13: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #300: GFLOPs: 803.1652. Time: 288.1247 us. Best GFLOPs: 1007.9017
2024-04-28 23:52:57 [INFO] [task_scheduler.cc:131] [Task #13: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #301: GFLOPs: 848.4216. Time: 272.7556 us. Best GFLOPs: 1007.9017
2024-04-28 23:52:57 [INFO] [task_scheduler.cc:131] [Task #13: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #302: GFLOPs: 790.9637. Time: 292.5693 us. Best GFLOPs: 1007.9017
2024-04-28 23:52:57 [INFO] [task_scheduler.cc:131] [Task #13: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #303: GFLOPs: 852.0181. Time: 271.6042 us. Best GFLOPs: 1007.9017
2024-04-28 23:52:57 [INFO] [task_scheduler.cc:131] [Task #13: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #304: GFLOPs: 843.8066. Time: 274.2473 us. Best GFLOPs: 1007.9017
2024-04-28 23:52:57 [INFO] [task_scheduler.cc:131] [Task #13: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #305: GFLOPs: 776.8589. Time: 297.8813 us. Best GFLOPs: 1007.9017
2024-04-28 23:52:57 [INFO] [task_scheduler.cc:131] [Task #13: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #306: GFLOPs: 733.6223. Time: 315.4371 us. Best GFLOPs: 1007.9017
2024-04-28 23:52:57 [INFO] [task_scheduler.cc:131] [Task #13: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #307: GFLOPs: 786.4310. Time: 294.2556 us. Best GFLOPs: 1007.9017
2024-04-28 23:52:57 [INFO] [task_scheduler.cc:131] [Task #13: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #308: GFLOPs: 769.8406. Time: 300.5969 us. Best GFLOPs: 1007.9017
2024-04-28 23:52:57 [INFO] [task_scheduler.cc:131] [Task #13: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #309: GFLOPs: 803.1414. Time: 288.1332 us. Best GFLOPs: 1007.9017
2024-04-28 23:52:57 [INFO] [task_scheduler.cc:131] [Task #13: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #310: GFLOPs: 906.7747. Time: 255.2031 us. Best GFLOPs: 1007.9017
2024-04-28 23:52:57 [INFO] [task_scheduler.cc:131] [Task #13: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #311: GFLOPs: 838.7024. Time: 275.9163 us. Best GFLOPs: 1007.9017
2024-04-28 23:52:57 [INFO] [task_scheduler.cc:131] [Task #13: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #312: GFLOPs: 887.1834. Time: 260.8386 us. Best GFLOPs: 1007.9017
2024-04-28 23:52:57 [INFO] [task_scheduler.cc:131] [Task #13: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #313: GFLOPs: 680.4216. Time: 340.1005 us. Best GFLOPs: 1007.9017
2024-04-28 23:52:57 [INFO] [task_scheduler.cc:131] [Task #13: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #314: GFLOPs: 403.5556. Time: 573.4320 us. Best GFLOPs: 1007.9017
2024-04-28 23:52:57 [INFO] [task_scheduler.cc:131] [Task #13: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #315: GFLOPs: 678.9203. Time: 340.8525 us. Best GFLOPs: 1007.9017
2024-04-28 23:52:57 [INFO] [task_scheduler.cc:131] [Task #13: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #316: GFLOPs: 739.2811. Time: 313.0226 us. Best GFLOPs: 1007.9017
2024-04-28 23:52:57 [INFO] [task_scheduler.cc:131] [Task #13: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #317: GFLOPs: 812.3842. Time: 284.8550 us. Best GFLOPs: 1007.9017
2024-04-28 23:52:57 [INFO] [task_scheduler.cc:121] [Task #13: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #318: Error in building:
LocalBuilder: Timeout, killed after 30.0 seconds
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(1), T.int64(28), T.int64(28), T.int64(128)), "float32"), p1: T.Buffer((T.int64(4), T.int64(1), T.int64(3), T.int64(3), T.int64(128), T.int64(32)), "float32"), p2: T.Buffer((T.int64(1), T.int64(4), T.int64(1), T.int64(1), T.int64(32)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(4), T.int64(28), T.int64(28), T.int64(32)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        data_pad = T.alloc_buffer((T.int64(1), T.int64(1), T.int64(30), T.int64(30), T.int64(128)))
        conv2d_NCHWc = T.alloc_buffer((T.int64(1), T.int64(4), T.int64(28), T.int64(28), T.int64(32)))
        for n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused_fused in T.parallel(T.int64(12544), annotations={"pragma_auto_unroll_max_step": 512, "pragma_unroll_explicit": 1}):
            for n_2_init, oc_chunk_2_init, oh_2_init, ow_2_init, oc_block_2_init, n_3_init, oc_chunk_3_init, oh_3_init, ow_3_init, oc_block_3_init in T.grid(T.int64(1), T.int64(2), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(2), T.int64(1), T.int64(1)):
                with T.block("conv2d_NCHWc_init"):
                    v_n = T.axis.spatial(T.int64(1), n_2_init + n_3_init)
                    v_oc_chunk = T.axis.spatial(T.int64(4), oc_chunk_2_init * T.int64(2) + oc_chunk_3_init)
                    v_oh = T.axis.spatial(T.int64(28), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused_fused % T.int64(448) // T.int64(32) * T.int64(2) + oh_2_init * T.int64(2) + oh_3_init)
                    v_ow = T.axis.spatial(T.int64(28), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused_fused // T.int64(448) + ow_2_init + ow_3_init)
                    v_oc_block = T.axis.spatial(T.int64(32), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused_fused % T.int64(32) + oc_block_2_init + oc_block_3_init)
                    T.reads()
                    T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                    T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                    conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = T.float32(0)
            for ic_0, kh_0 in T.grid(T.int64(2), T.int64(3)):
                for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(1), T.int64(2), T.int64(3)):
                    for ax4_fused in T.vectorized(T.int64(64)):
                        with T.block("data_pad"):
                            v_i0, v_i1 = T.axis.remap("SS", [ax0, ax1])
                            v_i2 = T.axis.spatial(T.int64(30), kh_0 + n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused_fused % T.int64(448) // T.int64(32) * T.int64(2) + ax2)
                            v_i3 = T.axis.spatial(T.int64(30), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused_fused // T.int64(448) + ax3)
                            v_i4 = T.axis.spatial(T.int64(128), ic_0 * T.int64(64) + ax4_fused)
                            T.reads(p0[v_i0, v_i1, v_i2 - T.int64(1), v_i3 - T.int64(1), v_i4])
                            T.writes(data_pad[v_i0, v_i1, v_i2, v_i3, v_i4])
                            data_pad[v_i0, v_i1, v_i2, v_i3, v_i4] = T.if_then_else(T.int64(1) <= v_i2 and v_i2 < T.int64(29) and T.int64(1) <= v_i3 and v_i3 < T.int64(29), p0[v_i0, v_i1, v_i2 - T.int64(1), v_i3 - T.int64(1), v_i4], T.float32(0))
                for kw_0, n_2, oc_chunk_2, oh_2, ow_2, oc_block_2, ic_1, kh_1, kw_1, n_3, oc_chunk_3, oh_3, ow_3, oc_block_3 in T.grid(T.int64(3), T.int64(1), T.int64(2), T.int64(1), T.int64(1), T.int64(1), T.int64(64), T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(2), T.int64(1), T.int64(1)):
                    with T.block("conv2d_NCHWc_update"):
                        v_n = T.axis.spatial(T.int64(1), n_2 + n_3)
                        v_oc_chunk = T.axis.spatial(T.int64(4), oc_chunk_2 * T.int64(2) + oc_chunk_3)
                        v_oh = T.axis.spatial(T.int64(28), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused_fused % T.int64(448) // T.int64(32) * T.int64(2) + oh_2 * T.int64(2) + oh_3)
                        v_ow = T.axis.spatial(T.int64(28), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused_fused // T.int64(448) + ow_2 + ow_3)
                        v_oc_block = T.axis.spatial(T.int64(32), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused_fused % T.int64(32) + oc_block_2 + oc_block_3)
                        v_ic = T.axis.reduce(T.int64(128), ic_0 * T.int64(64) + ic_1)
                        v_kh = T.axis.reduce(T.int64(3), kh_0 + kh_1)
                        v_kw = T.axis.reduce(T.int64(3), kw_0 + kw_1)
                        T.reads(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block], data_pad[v_n, v_ic // T.int64(128), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(128)], p1[v_oc_chunk, v_ic // T.int64(128), v_kh, v_kw, v_ic % T.int64(128), v_oc_block])
                        T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                        T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                        conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] + data_pad[v_n, v_ic // T.int64(128), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(128)] * p1[v_oc_chunk, v_ic // T.int64(128), v_kh, v_kw, v_ic % T.int64(128), v_oc_block]
            for ax0, ax1, ax2, ax3, ax4 in T.grid(T.int64(1), T.int64(4), T.int64(2), T.int64(1), T.int64(1)):
                with T.block("T_relu"):
                    v_ax0, v_ax1 = T.axis.remap("SS", [ax0, ax1])
                    v_ax2 = T.axis.spatial(T.int64(28), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused_fused % T.int64(448) // T.int64(32) * T.int64(2) + ax2)
                    v_ax3 = T.axis.spatial(T.int64(28), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused_fused // T.int64(448) + ax3)
                    v_ax4 = T.axis.spatial(T.int64(32), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused_fused % T.int64(32) + ax4)
                    T.reads(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4])
                    T.writes(T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                    T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.max(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] + p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4], T.float32(0))
b0 = sch.get_block(name="data_pad", func_name="main")
b1 = sch.get_block(name="conv2d_NCHWc", func_name="main")
b2 = sch.get_block(name="T_add", func_name="main")
b3 = sch.get_block(name="root", func_name="main")
sch.compute_inline(block=b2)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSRSRS")
l4, l5, l6, l7, l8, l9, l10, l11 = sch.get_loops(block=b1)
v12, v13, v14, v15 = sch.sample_perfect_tile(loop=l4, n=4, max_innermost_factor=64, decision=[1, 1, 1, 1])
l16, l17, l18, l19 = sch.split(loop=l4, factors=[v12, v13, v14, v15], preserve_unit_iters=True)
v20, v21, v22, v23 = sch.sample_perfect_tile(loop=l5, n=4, max_innermost_factor=64, decision=[1, 1, 2, 2])
l24, l25, l26, l27 = sch.split(loop=l5, factors=[v20, v21, v22, v23], preserve_unit_iters=True)
v28, v29, v30, v31 = sch.sample_perfect_tile(loop=l6, n=4, max_innermost_factor=64, decision=[1, 14, 1, 2])
l32, l33, l34, l35 = sch.split(loop=l6, factors=[v28, v29, v30, v31], preserve_unit_iters=True)
v36, v37, v38, v39 = sch.sample_perfect_tile(loop=l7, n=4, max_innermost_factor=64, decision=[28, 1, 1, 1])
l40, l41, l42, l43 = sch.split(loop=l7, factors=[v36, v37, v38, v39], preserve_unit_iters=True)
v44, v45, v46, v47 = sch.sample_perfect_tile(loop=l8, n=4, max_innermost_factor=64, decision=[1, 32, 1, 1])
l48, l49, l50, l51 = sch.split(loop=l8, factors=[v44, v45, v46, v47], preserve_unit_iters=True)
v52, v53 = sch.sample_perfect_tile(loop=l9, n=2, max_innermost_factor=64, decision=[2, 64])
l54, l55 = sch.split(loop=l9, factors=[v52, v53], preserve_unit_iters=True)
v56, v57 = sch.sample_perfect_tile(loop=l10, n=2, max_innermost_factor=64, decision=[3, 1])
l58, l59 = sch.split(loop=l10, factors=[v56, v57], preserve_unit_iters=True)
v60, v61 = sch.sample_perfect_tile(loop=l11, n=2, max_innermost_factor=64, decision=[3, 1])
l62, l63 = sch.split(loop=l11, factors=[v60, v61], preserve_unit_iters=True)
sch.reorder(l16, l24, l32, l40, l48, l17, l25, l33, l41, l49, l54, l58, l62, l18, l26, l34, l42, l50, l55, l59, l63, l19, l27, l35, l43, l51)
b64, = sch.get_consumers(block=b1)
sch.reverse_compute_at(block=b64, loop=l49, preserve_unit_loops=True, index=-1)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.vectorize", ann_val=64)
v65 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.unroll_explicit", ann_val=v65)
l66 = sch.sample_compute_location(block=b0, decision=11)
sch.compute_at(block=b0, loop=l66, preserve_unit_loops=True, index=-1)
sch.enter_postproc()
b67 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b67, ann_key="meta_schedule.parallel")
sch.unannotate(block_or_loop=b67, ann_key="meta_schedule.vectorize")
sch.unannotate(block_or_loop=b67, ann_key="meta_schedule.unroll_explicit")
b68, b69, b70 = sch.get_child_blocks(b67)
l71, l72, l73, l74, l75, l76, l77, l78, l79, l80, l81, l82, l83, l84, l85, l86, l87 = sch.get_loops(block=b68)
l88 = sch.fuse(l71, l72, l73, l74, l75, l76, l77, l78, l79, l80, preserve_unit_iters=True)
sch.parallel(loop=l88)
l89 = sch.fuse(l87, preserve_unit_iters=True)
sch.vectorize(loop=l89)
l90, l91, l92, l93, l94, l95, l96, l97, l98, l99, l100, l101, l102, l103, l104, l105, l106 = sch.get_loops(block=b69)
l107 = sch.fuse(l90, preserve_unit_iters=True)
sch.parallel(loop=l107)
sch.annotate(block_or_loop=l107, ann_key="pragma_auto_unroll_max_step", ann_val=512)
sch.annotate(block_or_loop=l107, ann_key="pragma_unroll_explicit", ann_val=1)
l108, l109, l110, l111, l112, l113 = sch.get_loops(block=b70)
b114 = sch.get_block(name="conv2d_NCHWc", func_name="main")
l115, l116, l117, l118, l119, l120, l121, l122, l123, l124, l125, l126, l127, l128, l129, l130, l131 = sch.get_loops(block=b114)
b132 = sch.decompose_reduction(block=b114, loop=l116)
2024-04-28 23:52:57 [INFO] [task_scheduler.cc:131] [Task #13: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #319: GFLOPs: 38.8380. Time: 5958.3912 us. Best GFLOPs: 1007.9017
2024-04-28 23:52:57 [INFO] [task_scheduler.cc:131] [Task #13: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #320: GFLOPs: 37.2339. Time: 6215.0828 us. Best GFLOPs: 1007.9017
2024-04-29 00:58:03 [INFO] [evolutionary_search.cc:713] Generating candidates......
2024-04-29 00:58:04 [INFO] [evolutionary_search.cc:715] Picked top 102 candidate(s) from database
2024-04-29 00:58:08 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x3cedc28)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x30c43a8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x331a288)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x3f41058)]: 0 failure(s)
2024-04-29 00:58:08 [INFO] [evolutionary_search.cc:723] Sampled 410 candidate(s)
2024-04-29 00:58:20 [INFO] [evolutionary_search.cc:621] Evolve iter #0 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x3cedc28)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x30c43a8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x331a288)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x3f41058)]: 0 failure(s)
2024-04-29 00:58:32 [INFO] [evolutionary_search.cc:621] Evolve iter #1 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x3cedc28)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x30c43a8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x331a288)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x3f41058)]: 0 failure(s)
2024-04-29 00:58:43 [INFO] [evolutionary_search.cc:621] Evolve iter #2 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x3cedc28)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x30c43a8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x331a288)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x3f41058)]: 0 failure(s)
2024-04-29 00:58:54 [INFO] [evolutionary_search.cc:621] Evolve iter #3 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x3cedc28)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x30c43a8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x331a288)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x3f41058)]: 0 failure(s)
2024-04-29 00:59:00 [INFO] [evolutionary_search.cc:649] Scores of the best 64 candidates:
[1 : 16]:	0.9618  0.9348  0.9281  0.9252  0.9252  0.9079  0.9054  0.8994  0.8957  0.8957  0.8765  0.8703  0.8658  0.8594  0.8556  0.8507
[17 : 32]:	0.8470  0.8467  0.8451  0.8375  0.8360  0.8350  0.8339  0.8311  0.8306  0.8298  0.8288  0.8287  0.8284  0.8266  0.8247  0.8239
[33 : 48]:	0.8234  0.8185  0.8179  0.8164  0.8164  0.8120  0.8114  0.8100  0.8099  0.8060  0.8032  0.8019  0.8019  0.8011  0.7990  0.7983
[49 : 64]:	0.7977  0.7950  0.7923  0.7913  0.7913  0.7910  0.7895  0.7864  0.7849  0.7784  0.7784  0.7779  0.7722  0.7715  0.7695  0.7689
2024-04-29 00:59:01 [INFO] [evolutionary_search.cc:727] Got 64 candidate(s) with evolutionary search
2024-04-29 00:59:01 [INFO] [evolutionary_search.cc:730] Sending 64 candidates(s) for measurement
2024-04-29 01:00:40 [INFO] [task_scheduler.cc:131] [Task #13: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #321: GFLOPs: 939.7676. Time: 246.2436 us. Best GFLOPs: 1007.9017
2024-04-29 01:00:40 [INFO] [task_scheduler.cc:131] [Task #13: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #322: GFLOPs: 916.4030. Time: 252.5218 us. Best GFLOPs: 1007.9017
2024-04-29 01:00:40 [INFO] [task_scheduler.cc:131] [Task #13: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #323: GFLOPs: 890.0417. Time: 260.0010 us. Best GFLOPs: 1007.9017
2024-04-29 01:00:40 [INFO] [task_scheduler.cc:131] [Task #13: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #324: GFLOPs: 904.1552. Time: 255.9425 us. Best GFLOPs: 1007.9017
2024-04-29 01:00:40 [INFO] [task_scheduler.cc:131] [Task #13: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #325: GFLOPs: 925.8580. Time: 249.9430 us. Best GFLOPs: 1007.9017
2024-04-29 01:00:40 [INFO] [task_scheduler.cc:131] [Task #13: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #326: GFLOPs: 1053.8282. Time: 219.5915 us. Best GFLOPs: 1053.8282
2024-04-29 01:00:40 [INFO] [task_scheduler.cc:131] [Task #13: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #327: GFLOPs: 799.4451. Time: 289.4654 us. Best GFLOPs: 1053.8282
2024-04-29 01:00:40 [INFO] [task_scheduler.cc:131] [Task #13: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #328: GFLOPs: 816.6620. Time: 283.3629 us. Best GFLOPs: 1053.8282
2024-04-29 01:00:40 [INFO] [task_scheduler.cc:131] [Task #13: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #329: GFLOPs: 891.6850. Time: 259.5218 us. Best GFLOPs: 1053.8282
2024-04-29 01:00:40 [INFO] [task_scheduler.cc:131] [Task #13: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #330: GFLOPs: 867.2920. Time: 266.8210 us. Best GFLOPs: 1053.8282
2024-04-29 01:00:40 [INFO] [task_scheduler.cc:131] [Task #13: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #331: GFLOPs: 816.4935. Time: 283.4214 us. Best GFLOPs: 1053.8282
2024-04-29 01:00:40 [INFO] [task_scheduler.cc:131] [Task #13: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #332: GFLOPs: 883.0267. Time: 262.0665 us. Best GFLOPs: 1053.8282
2024-04-29 01:00:40 [INFO] [task_scheduler.cc:131] [Task #13: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #333: GFLOPs: 939.7485. Time: 246.2486 us. Best GFLOPs: 1053.8282
2024-04-29 01:00:40 [INFO] [task_scheduler.cc:131] [Task #13: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #334: GFLOPs: 922.1354. Time: 250.9520 us. Best GFLOPs: 1053.8282
2024-04-29 01:00:40 [INFO] [task_scheduler.cc:131] [Task #13: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #335: GFLOPs: 672.6098. Time: 344.0505 us. Best GFLOPs: 1053.8282
2024-04-29 01:00:40 [INFO] [task_scheduler.cc:131] [Task #13: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #336: GFLOPs: 883.3918. Time: 261.9582 us. Best GFLOPs: 1053.8282
2024-04-29 01:00:40 [INFO] [task_scheduler.cc:131] [Task #13: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #337: GFLOPs: 655.9204. Time: 352.8045 us. Best GFLOPs: 1053.8282
2024-04-29 01:00:40 [INFO] [task_scheduler.cc:131] [Task #13: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #338: GFLOPs: 854.5587. Time: 270.7968 us. Best GFLOPs: 1053.8282
2024-04-29 01:00:40 [INFO] [task_scheduler.cc:131] [Task #13: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #339: GFLOPs: 1029.6168. Time: 224.7552 us. Best GFLOPs: 1053.8282
2024-04-29 01:00:40 [INFO] [task_scheduler.cc:131] [Task #13: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #340: GFLOPs: 867.1210. Time: 266.8736 us. Best GFLOPs: 1053.8282
2024-04-29 01:00:40 [INFO] [task_scheduler.cc:131] [Task #13: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #341: GFLOPs: 716.2434. Time: 323.0909 us. Best GFLOPs: 1053.8282
2024-04-29 01:00:40 [INFO] [task_scheduler.cc:131] [Task #13: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #342: GFLOPs: 964.2881. Time: 239.9819 us. Best GFLOPs: 1053.8282
2024-04-29 01:00:40 [INFO] [task_scheduler.cc:131] [Task #13: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #343: GFLOPs: 852.5814. Time: 271.4248 us. Best GFLOPs: 1053.8282
2024-04-29 01:00:40 [INFO] [task_scheduler.cc:131] [Task #13: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #344: GFLOPs: 820.6470. Time: 281.9869 us. Best GFLOPs: 1053.8282
2024-04-29 01:00:40 [INFO] [task_scheduler.cc:131] [Task #13: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #345: GFLOPs: 795.3462. Time: 290.9572 us. Best GFLOPs: 1053.8282
2024-04-29 01:00:40 [INFO] [task_scheduler.cc:131] [Task #13: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #346: GFLOPs: 829.0133. Time: 279.1411 us. Best GFLOPs: 1053.8282
2024-04-29 01:00:40 [INFO] [task_scheduler.cc:131] [Task #13: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #347: GFLOPs: 906.2961. Time: 255.3379 us. Best GFLOPs: 1053.8282
2024-04-29 01:00:40 [INFO] [task_scheduler.cc:131] [Task #13: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #348: GFLOPs: 843.5780. Time: 274.3216 us. Best GFLOPs: 1053.8282
2024-04-29 01:00:40 [INFO] [task_scheduler.cc:131] [Task #13: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #349: GFLOPs: 835.1343. Time: 277.0952 us. Best GFLOPs: 1053.8282
2024-04-29 01:00:40 [INFO] [task_scheduler.cc:131] [Task #13: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #350: GFLOPs: 935.6644. Time: 247.3234 us. Best GFLOPs: 1053.8282
2024-04-29 01:00:40 [INFO] [task_scheduler.cc:131] [Task #13: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #351: GFLOPs: 965.2900. Time: 239.7328 us. Best GFLOPs: 1053.8282
2024-04-29 01:00:40 [INFO] [task_scheduler.cc:131] [Task #13: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #352: GFLOPs: 870.0013. Time: 265.9901 us. Best GFLOPs: 1053.8282
2024-04-29 01:00:40 [INFO] [task_scheduler.cc:131] [Task #13: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #353: GFLOPs: 406.0051. Time: 569.9725 us. Best GFLOPs: 1053.8282
2024-04-29 01:00:40 [INFO] [task_scheduler.cc:131] [Task #13: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #354: GFLOPs: 507.5709. Time: 455.9200 us. Best GFLOPs: 1053.8282
2024-04-29 01:00:40 [INFO] [task_scheduler.cc:131] [Task #13: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #355: GFLOPs: 365.1370. Time: 633.7667 us. Best GFLOPs: 1053.8282
2024-04-29 01:00:40 [INFO] [task_scheduler.cc:131] [Task #13: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #356: GFLOPs: 479.2068. Time: 482.9057 us. Best GFLOPs: 1053.8282
2024-04-29 01:00:40 [INFO] [task_scheduler.cc:131] [Task #13: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #357: GFLOPs: 927.5644. Time: 249.4832 us. Best GFLOPs: 1053.8282
2024-04-29 01:00:40 [INFO] [task_scheduler.cc:131] [Task #13: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #358: GFLOPs: 709.4664. Time: 326.1771 us. Best GFLOPs: 1053.8282
2024-04-29 01:00:40 [INFO] [task_scheduler.cc:131] [Task #13: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #359: GFLOPs: 906.0419. Time: 255.4095 us. Best GFLOPs: 1053.8282
2024-04-29 01:00:40 [INFO] [task_scheduler.cc:131] [Task #13: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #360: GFLOPs: 710.5900. Time: 325.6614 us. Best GFLOPs: 1053.8282
2024-04-29 01:00:40 [INFO] [task_scheduler.cc:131] [Task #13: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #361: GFLOPs: 783.6983. Time: 295.2816 us. Best GFLOPs: 1053.8282
2024-04-29 01:00:40 [INFO] [task_scheduler.cc:131] [Task #13: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #362: GFLOPs: 920.4055. Time: 251.4237 us. Best GFLOPs: 1053.8282
2024-04-29 01:00:40 [INFO] [task_scheduler.cc:131] [Task #13: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #363: GFLOPs: 781.4078. Time: 296.1472 us. Best GFLOPs: 1053.8282
2024-04-29 01:00:40 [INFO] [task_scheduler.cc:131] [Task #13: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #364: GFLOPs: 893.6610. Time: 258.9480 us. Best GFLOPs: 1053.8282
2024-04-29 01:00:40 [INFO] [task_scheduler.cc:131] [Task #13: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #365: GFLOPs: 894.6970. Time: 258.6481 us. Best GFLOPs: 1053.8282
2024-04-29 01:00:40 [INFO] [task_scheduler.cc:131] [Task #13: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #366: GFLOPs: 821.0676. Time: 281.8425 us. Best GFLOPs: 1053.8282
2024-04-29 01:00:40 [INFO] [task_scheduler.cc:131] [Task #13: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #367: GFLOPs: 977.1168. Time: 236.8312 us. Best GFLOPs: 1053.8282
2024-04-29 01:00:40 [INFO] [task_scheduler.cc:131] [Task #13: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #368: GFLOPs: 894.1499. Time: 258.8064 us. Best GFLOPs: 1053.8282
2024-04-29 01:00:40 [INFO] [task_scheduler.cc:131] [Task #13: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #369: GFLOPs: 632.6079. Time: 365.8059 us. Best GFLOPs: 1053.8282
2024-04-29 01:00:40 [INFO] [task_scheduler.cc:131] [Task #13: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #370: GFLOPs: 938.2798. Time: 246.6340 us. Best GFLOPs: 1053.8282
2024-04-29 01:00:40 [INFO] [task_scheduler.cc:131] [Task #13: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #371: GFLOPs: 937.2008. Time: 246.9180 us. Best GFLOPs: 1053.8282
2024-04-29 01:00:40 [INFO] [task_scheduler.cc:131] [Task #13: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #372: GFLOPs: 779.8140. Time: 296.7525 us. Best GFLOPs: 1053.8282
2024-04-29 01:00:40 [INFO] [task_scheduler.cc:131] [Task #13: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #373: GFLOPs: 780.6659. Time: 296.4286 us. Best GFLOPs: 1053.8282
2024-04-29 01:00:40 [INFO] [task_scheduler.cc:131] [Task #13: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #374: GFLOPs: 898.7489. Time: 257.4821 us. Best GFLOPs: 1053.8282
2024-04-29 01:00:40 [INFO] [task_scheduler.cc:131] [Task #13: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #375: GFLOPs: 735.5251. Time: 314.6211 us. Best GFLOPs: 1053.8282
2024-04-29 01:00:40 [INFO] [task_scheduler.cc:131] [Task #13: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #376: GFLOPs: 781.0766. Time: 296.2728 us. Best GFLOPs: 1053.8282
2024-04-29 01:00:40 [INFO] [task_scheduler.cc:131] [Task #13: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #377: GFLOPs: 771.1723. Time: 300.0778 us. Best GFLOPs: 1053.8282
2024-04-29 01:00:40 [INFO] [task_scheduler.cc:131] [Task #13: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #378: GFLOPs: 800.3544. Time: 289.1365 us. Best GFLOPs: 1053.8282
2024-04-29 01:00:40 [INFO] [task_scheduler.cc:131] [Task #13: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #379: GFLOPs: 804.4980. Time: 287.6473 us. Best GFLOPs: 1053.8282
2024-04-29 01:00:40 [INFO] [task_scheduler.cc:131] [Task #13: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #380: GFLOPs: 809.3600. Time: 285.9194 us. Best GFLOPs: 1053.8282
2024-04-29 01:00:40 [INFO] [task_scheduler.cc:131] [Task #13: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #381: GFLOPs: 728.1314. Time: 317.8159 us. Best GFLOPs: 1053.8282
2024-04-29 01:00:40 [INFO] [task_scheduler.cc:121] [Task #13: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #382: Error in building:
LocalBuilder: Timeout, killed after 30.0 seconds
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(1), T.int64(28), T.int64(28), T.int64(128)), "float32"), p1: T.Buffer((T.int64(4), T.int64(1), T.int64(3), T.int64(3), T.int64(128), T.int64(32)), "float32"), p2: T.Buffer((T.int64(1), T.int64(4), T.int64(1), T.int64(1), T.int64(32)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(4), T.int64(28), T.int64(28), T.int64(32)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        data_pad = T.alloc_buffer((T.int64(1), T.int64(1), T.int64(30), T.int64(30), T.int64(128)))
        conv2d_NCHWc = T.alloc_buffer((T.int64(1), T.int64(4), T.int64(28), T.int64(28), T.int64(32)))
        for n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_fused_fused in T.parallel(T.int64(16), annotations={"pragma_auto_unroll_max_step": 512, "pragma_unroll_explicit": 1}):
            for ax0, ax1, ax2, ax3, ax4 in T.grid(T.int64(1), T.int64(1), T.int64(30), T.int64(30), T.int64(128)):
                with T.block("data_pad"):
                    v_i0, v_i1, v_i2, v_i3, v_i4 = T.axis.remap("SSSSS", [ax0, ax1, ax2, ax3, ax4])
                    T.reads(p0[v_i0, v_i1, v_i2 - T.int64(1), v_i3 - T.int64(1), v_i4])
                    T.writes(data_pad[v_i0, v_i1, v_i2, v_i3, v_i4])
                    data_pad[v_i0, v_i1, v_i2, v_i3, v_i4] = T.if_then_else(T.int64(1) <= v_i2 and v_i2 < T.int64(29) and T.int64(1) <= v_i3 and v_i3 < T.int64(29), p0[v_i0, v_i1, v_i2 - T.int64(1), v_i3 - T.int64(1), v_i4], T.float32(0))
            for n_1, oc_chunk_1, oh_1, ow_1, oc_block_1 in T.grid(T.int64(1), T.int64(1), T.int64(28), T.int64(14), T.int64(2)):
                for n_2_init, oc_chunk_2_init, oh_2_init, ow_2_init, oc_block_2_init, n_3_init, oc_chunk_3_init, oh_3_init, ow_3_init, oc_block_3_init in T.grid(T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(4), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1)):
                    with T.block("conv2d_NCHWc_init"):
                        v_n = T.axis.spatial(T.int64(1), n_1 + n_2_init + n_3_init)
                        v_oc_chunk = T.axis.spatial(T.int64(4), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_fused_fused // T.int64(4) + oc_chunk_1 + oc_chunk_2_init + oc_chunk_3_init)
                        v_oh = T.axis.spatial(T.int64(28), oh_1 + oh_2_init + oh_3_init)
                        v_ow = T.axis.spatial(T.int64(28), ow_1 * T.int64(2) + ow_2_init + ow_3_init)
                        v_oc_block = T.axis.spatial(T.int64(32), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_fused_fused % T.int64(4) * T.int64(8) + oc_block_1 * T.int64(4) + oc_block_2_init + oc_block_3_init)
                        T.reads()
                        T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                        T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                        conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = T.float32(0)
                for ic_0, kh_0, kw_0, n_2, oc_chunk_2, oh_2, ow_2, oc_block_2, ic_1, kh_1, kw_1, n_3, oc_chunk_3, oh_3, ow_3, oc_block_3 in T.grid(T.int64(8), T.int64(3), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(4), T.int64(16), T.int64(1), T.int64(3), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1)):
                    with T.block("conv2d_NCHWc_update"):
                        v_n = T.axis.spatial(T.int64(1), n_1 + n_2 + n_3)
                        v_oc_chunk = T.axis.spatial(T.int64(4), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_fused_fused // T.int64(4) + oc_chunk_1 + oc_chunk_2 + oc_chunk_3)
                        v_oh = T.axis.spatial(T.int64(28), oh_1 + oh_2 + oh_3)
                        v_ow = T.axis.spatial(T.int64(28), ow_1 * T.int64(2) + ow_2 + ow_3)
                        v_oc_block = T.axis.spatial(T.int64(32), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_fused_fused % T.int64(4) * T.int64(8) + oc_block_1 * T.int64(4) + oc_block_2 + oc_block_3)
                        v_ic = T.axis.reduce(T.int64(128), ic_0 * T.int64(16) + ic_1)
                        v_kh = T.axis.reduce(T.int64(3), kh_0 + kh_1)
                        v_kw = T.axis.reduce(T.int64(3), kw_0 * T.int64(3) + kw_1)
                        T.reads(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block], data_pad[v_n, v_ic // T.int64(128), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(128)], p1[v_oc_chunk, v_ic // T.int64(128), v_kh, v_kw, v_ic % T.int64(128), v_oc_block])
                        T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                        T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                        conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] + data_pad[v_n, v_ic // T.int64(128), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(128)] * p1[v_oc_chunk, v_ic // T.int64(128), v_kh, v_kw, v_ic % T.int64(128), v_oc_block]
        for ax0_ax1_ax2_ax3_ax4_fused_0 in T.parallel(T.int64(1568)):
            for ax0_ax1_ax2_ax3_ax4_fused_1 in T.vectorized(T.int64(64)):
                with T.block("T_relu"):
                    v_ax0 = T.axis.spatial(T.int64(1), T.int64(0))
                    v_ax1 = T.axis.spatial(T.int64(4), (ax0_ax1_ax2_ax3_ax4_fused_0 * T.int64(64) + ax0_ax1_ax2_ax3_ax4_fused_1) // T.int64(25088))
                    v_ax2 = T.axis.spatial(T.int64(28), (ax0_ax1_ax2_ax3_ax4_fused_0 * T.int64(64) + ax0_ax1_ax2_ax3_ax4_fused_1) % T.int64(25088) // T.int64(896))
                    v_ax3 = T.axis.spatial(T.int64(28), (ax0_ax1_ax2_ax3_ax4_fused_0 * T.int64(64) + ax0_ax1_ax2_ax3_ax4_fused_1) % T.int64(896) // T.int64(32))
                    v_ax4 = T.axis.spatial(T.int64(32), (ax0_ax1_ax2_ax3_ax4_fused_0 * T.int64(64) + ax0_ax1_ax2_ax3_ax4_fused_1) % T.int64(32))
                    T.reads(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4])
                    T.writes(T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                    T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.max(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] + p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4], T.float32(0))
b0 = sch.get_block(name="data_pad", func_name="main")
b1 = sch.get_block(name="conv2d_NCHWc", func_name="main")
b2 = sch.get_block(name="T_add", func_name="main")
b3 = sch.get_block(name="root", func_name="main")
sch.compute_inline(block=b2)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSRSRS")
l4, l5, l6, l7, l8, l9, l10, l11 = sch.get_loops(block=b1)
v12, v13, v14, v15 = sch.sample_perfect_tile(loop=l4, n=4, max_innermost_factor=64, decision=[1, 1, 1, 1])
l16, l17, l18, l19 = sch.split(loop=l4, factors=[v12, v13, v14, v15], preserve_unit_iters=True)
v20, v21, v22, v23 = sch.sample_perfect_tile(loop=l5, n=4, max_innermost_factor=64, decision=[4, 1, 1, 1])
l24, l25, l26, l27 = sch.split(loop=l5, factors=[v20, v21, v22, v23], preserve_unit_iters=True)
v28, v29, v30, v31 = sch.sample_perfect_tile(loop=l6, n=4, max_innermost_factor=64, decision=[1, 28, 1, 1])
l32, l33, l34, l35 = sch.split(loop=l6, factors=[v28, v29, v30, v31], preserve_unit_iters=True)
v36, v37, v38, v39 = sch.sample_perfect_tile(loop=l7, n=4, max_innermost_factor=64, decision=[1, 14, 2, 1])
l40, l41, l42, l43 = sch.split(loop=l7, factors=[v36, v37, v38, v39], preserve_unit_iters=True)
v44, v45, v46, v47 = sch.sample_perfect_tile(loop=l8, n=4, max_innermost_factor=64, decision=[4, 2, 4, 1])
l48, l49, l50, l51 = sch.split(loop=l8, factors=[v44, v45, v46, v47], preserve_unit_iters=True)
v52, v53 = sch.sample_perfect_tile(loop=l9, n=2, max_innermost_factor=64, decision=[8, 16])
l54, l55 = sch.split(loop=l9, factors=[v52, v53], preserve_unit_iters=True)
v56, v57 = sch.sample_perfect_tile(loop=l10, n=2, max_innermost_factor=64, decision=[3, 1])
l58, l59 = sch.split(loop=l10, factors=[v56, v57], preserve_unit_iters=True)
v60, v61 = sch.sample_perfect_tile(loop=l11, n=2, max_innermost_factor=64, decision=[1, 3])
l62, l63 = sch.split(loop=l11, factors=[v60, v61], preserve_unit_iters=True)
sch.reorder(l16, l24, l32, l40, l48, l17, l25, l33, l41, l49, l54, l58, l62, l18, l26, l34, l42, l50, l55, l59, l63, l19, l27, l35, l43, l51)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.vectorize", ann_val=64)
v64 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.unroll_explicit", ann_val=v64)
l65 = sch.sample_compute_location(block=b0, decision=4)
sch.compute_at(block=b0, loop=l65, preserve_unit_loops=True, index=-1)
sch.enter_postproc()
b66 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b66, ann_key="meta_schedule.parallel")
sch.unannotate(block_or_loop=b66, ann_key="meta_schedule.vectorize")
sch.unannotate(block_or_loop=b66, ann_key="meta_schedule.unroll_explicit")
b67, b68, b69 = sch.get_child_blocks(b66)
l70, l71, l72, l73, l74, l75, l76, l77, l78, l79 = sch.get_loops(block=b67)
l80 = sch.fuse(l70, l71, l72, l73, l74, preserve_unit_iters=True)
sch.parallel(loop=l80)
l81, l82, l83, l84, l85, l86, l87, l88, l89, l90, l91, l92, l93, l94, l95, l96, l97, l98, l99, l100, l101, l102 = sch.get_loops(block=b68)
l103 = sch.fuse(l81, preserve_unit_iters=True)
sch.parallel(loop=l103)
sch.annotate(block_or_loop=l103, ann_key="pragma_auto_unroll_max_step", ann_val=512)
sch.annotate(block_or_loop=l103, ann_key="pragma_unroll_explicit", ann_val=1)
l104, l105, l106, l107, l108 = sch.get_loops(block=b69)
l109 = sch.fuse(l104, l105, l106, l107, l108, preserve_unit_iters=True)
l110, l111 = sch.split(loop=l109, factors=[None, 64], preserve_unit_iters=True)
sch.parallel(loop=l110)
sch.vectorize(loop=l111)
b112 = sch.get_block(name="conv2d_NCHWc", func_name="main")
l113, l114, l115, l116, l117, l118, l119, l120, l121, l122, l123, l124, l125, l126, l127, l128, l129, l130, l131, l132, l133, l134 = sch.get_loops(block=b112)
b135 = sch.decompose_reduction(block=b112, loop=l119)
2024-04-29 01:00:40 [INFO] [task_scheduler.cc:131] [Task #13: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #383: GFLOPs: 35.5135. Time: 6516.1549 us. Best GFLOPs: 1053.8282
2024-04-29 01:00:40 [INFO] [task_scheduler.cc:131] [Task #13: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #384: GFLOPs: 368.1078. Time: 628.6520 us. Best GFLOPs: 1053.8282
2024-04-29 01:53:12 [INFO] [evolutionary_search.cc:713] Generating candidates......
2024-04-29 01:53:13 [INFO] [evolutionary_search.cc:715] Picked top 102 candidate(s) from database
2024-04-29 01:53:18 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x3cedc28)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x30c43a8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x331a288)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x3f41058)]: 0 failure(s)
2024-04-29 01:53:18 [INFO] [evolutionary_search.cc:723] Sampled 410 candidate(s)
2024-04-29 01:53:30 [INFO] [evolutionary_search.cc:621] Evolve iter #0 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x3cedc28)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x30c43a8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x331a288)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x3f41058)]: 0 failure(s)
2024-04-29 01:53:42 [INFO] [evolutionary_search.cc:621] Evolve iter #1 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x3cedc28)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x30c43a8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x331a288)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x3f41058)]: 0 failure(s)
2024-04-29 01:53:53 [INFO] [evolutionary_search.cc:621] Evolve iter #2 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x3cedc28)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x30c43a8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x331a288)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x3f41058)]: 0 failure(s)
2024-04-29 01:54:04 [INFO] [evolutionary_search.cc:621] Evolve iter #3 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x3cedc28)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x30c43a8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x331a288)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x3f41058)]: 0 failure(s)
2024-04-29 01:54:11 [INFO] [evolutionary_search.cc:649] Scores of the best 64 candidates:
[1 : 16]:	0.9501  0.9298  0.9018  0.8952  0.8885  0.8847  0.8806  0.8733  0.8728  0.8691  0.8685  0.8628  0.8590  0.8572  0.8556  0.8552
[17 : 32]:	0.8547  0.8520  0.8504  0.8498  0.8498  0.8458  0.8417  0.8410  0.8404  0.8396  0.8380  0.8321  0.8293  0.8292  0.8250  0.8250
[33 : 48]:	0.8250  0.8242  0.8234  0.8220  0.8210  0.8183  0.8130  0.8045  0.8041  0.8018  0.8011  0.7993  0.7993  0.7981  0.7978  0.7951
[49 : 64]:	0.7927  0.7919  0.7919  0.7905  0.7877  0.7853  0.7812  0.7809  0.7779  0.7776  0.7764  0.7710  0.7708  0.7697  0.7688  0.7676
2024-04-29 01:54:11 [INFO] [evolutionary_search.cc:727] Got 64 candidate(s) with evolutionary search
2024-04-29 01:54:11 [INFO] [evolutionary_search.cc:730] Sending 64 candidates(s) for measurement
2024-04-29 01:55:53 [INFO] [task_scheduler.cc:131] [Task #13: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #385: GFLOPs: 538.8696. Time: 429.4391 us. Best GFLOPs: 1053.8282
2024-04-29 01:55:53 [INFO] [task_scheduler.cc:131] [Task #13: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #386: GFLOPs: 481.3921. Time: 480.7136 us. Best GFLOPs: 1053.8282
2024-04-29 01:55:53 [INFO] [task_scheduler.cc:131] [Task #13: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #387: GFLOPs: 984.7701. Time: 234.9906 us. Best GFLOPs: 1053.8282
2024-04-29 01:55:53 [INFO] [task_scheduler.cc:131] [Task #13: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #388: GFLOPs: 974.2108. Time: 237.5376 us. Best GFLOPs: 1053.8282
2024-04-29 01:55:53 [INFO] [task_scheduler.cc:131] [Task #13: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #389: GFLOPs: 857.4636. Time: 269.8793 us. Best GFLOPs: 1053.8282
2024-04-29 01:55:53 [INFO] [task_scheduler.cc:131] [Task #13: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #390: GFLOPs: 935.6798. Time: 247.3193 us. Best GFLOPs: 1053.8282
2024-04-29 01:55:53 [INFO] [task_scheduler.cc:131] [Task #13: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #391: GFLOPs: 885.8239. Time: 261.2389 us. Best GFLOPs: 1053.8282
2024-04-29 01:55:53 [INFO] [task_scheduler.cc:131] [Task #13: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #392: GFLOPs: 868.5843. Time: 266.4240 us. Best GFLOPs: 1053.8282
2024-04-29 01:55:53 [INFO] [task_scheduler.cc:131] [Task #13: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #393: GFLOPs: 915.7843. Time: 252.6924 us. Best GFLOPs: 1053.8282
2024-04-29 01:55:53 [INFO] [task_scheduler.cc:131] [Task #13: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #394: GFLOPs: 918.0685. Time: 252.0637 us. Best GFLOPs: 1053.8282
2024-04-29 01:55:53 [INFO] [task_scheduler.cc:131] [Task #13: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #395: GFLOPs: 901.7342. Time: 256.6296 us. Best GFLOPs: 1053.8282
2024-04-29 01:55:53 [INFO] [task_scheduler.cc:131] [Task #13: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #396: GFLOPs: 898.2058. Time: 257.6377 us. Best GFLOPs: 1053.8282
2024-04-29 01:55:53 [INFO] [task_scheduler.cc:131] [Task #13: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #397: GFLOPs: 846.5493. Time: 273.3588 us. Best GFLOPs: 1053.8282
2024-04-29 01:55:53 [INFO] [task_scheduler.cc:131] [Task #13: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #398: GFLOPs: 992.0743. Time: 233.2605 us. Best GFLOPs: 1053.8282
2024-04-29 01:55:53 [INFO] [task_scheduler.cc:131] [Task #13: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #399: GFLOPs: 1001.9223. Time: 230.9677 us. Best GFLOPs: 1053.8282
2024-04-29 01:55:53 [INFO] [task_scheduler.cc:131] [Task #13: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #400: GFLOPs: 933.2511. Time: 247.9630 us. Best GFLOPs: 1053.8282
2024-04-29 01:55:53 [INFO] [task_scheduler.cc:131] [Task #13: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #401: GFLOPs: 905.0908. Time: 255.6779 us. Best GFLOPs: 1053.8282
2024-04-29 01:55:53 [INFO] [task_scheduler.cc:131] [Task #13: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #402: GFLOPs: 984.4437. Time: 235.0685 us. Best GFLOPs: 1053.8282
2024-04-29 01:55:53 [INFO] [task_scheduler.cc:131] [Task #13: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #403: GFLOPs: 811.4131. Time: 285.1959 us. Best GFLOPs: 1053.8282
2024-04-29 01:55:53 [INFO] [task_scheduler.cc:131] [Task #13: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #404: GFLOPs: 955.7931. Time: 242.1148 us. Best GFLOPs: 1053.8282
2024-04-29 01:55:53 [INFO] [task_scheduler.cc:131] [Task #13: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #405: GFLOPs: 934.7459. Time: 247.5664 us. Best GFLOPs: 1053.8282
2024-04-29 01:55:53 [INFO] [task_scheduler.cc:131] [Task #13: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #406: GFLOPs: 951.6939. Time: 243.1577 us. Best GFLOPs: 1053.8282
2024-04-29 01:55:53 [INFO] [task_scheduler.cc:131] [Task #13: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #407: GFLOPs: 980.7448. Time: 235.9551 us. Best GFLOPs: 1053.8282
2024-04-29 01:55:53 [INFO] [task_scheduler.cc:131] [Task #13: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #408: GFLOPs: 979.7248. Time: 236.2007 us. Best GFLOPs: 1053.8282
2024-04-29 01:55:53 [INFO] [task_scheduler.cc:131] [Task #13: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #409: GFLOPs: 906.6173. Time: 255.2474 us. Best GFLOPs: 1053.8282
2024-04-29 01:55:53 [INFO] [task_scheduler.cc:131] [Task #13: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #410: GFLOPs: 870.8059. Time: 265.7443 us. Best GFLOPs: 1053.8282
2024-04-29 01:55:53 [INFO] [task_scheduler.cc:131] [Task #13: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #411: GFLOPs: 832.9796. Time: 277.8120 us. Best GFLOPs: 1053.8282
2024-04-29 01:55:53 [INFO] [task_scheduler.cc:131] [Task #13: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #412: GFLOPs: 686.8484. Time: 336.9182 us. Best GFLOPs: 1053.8282
2024-04-29 01:55:53 [INFO] [task_scheduler.cc:131] [Task #13: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #413: GFLOPs: 898.2804. Time: 257.6163 us. Best GFLOPs: 1053.8282
2024-04-29 01:55:53 [INFO] [task_scheduler.cc:131] [Task #13: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #414: GFLOPs: 892.0108. Time: 259.4270 us. Best GFLOPs: 1053.8282
2024-04-29 01:55:53 [INFO] [task_scheduler.cc:131] [Task #13: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #415: GFLOPs: 878.2806. Time: 263.4827 us. Best GFLOPs: 1053.8282
2024-04-29 01:55:53 [INFO] [task_scheduler.cc:131] [Task #13: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #416: GFLOPs: 306.6046. Time: 754.7561 us. Best GFLOPs: 1053.8282
2024-04-29 01:55:53 [INFO] [task_scheduler.cc:131] [Task #13: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #417: GFLOPs: 309.5427. Time: 747.5923 us. Best GFLOPs: 1053.8282
2024-04-29 01:55:53 [INFO] [task_scheduler.cc:131] [Task #13: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #418: GFLOPs: 868.0156. Time: 266.5986 us. Best GFLOPs: 1053.8282
2024-04-29 01:55:53 [INFO] [task_scheduler.cc:121] [Task #13: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #419: Error in building:
LocalBuilder: Timeout, killed after 30.0 seconds
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(1), T.int64(28), T.int64(28), T.int64(128)), "float32"), p1: T.Buffer((T.int64(4), T.int64(1), T.int64(3), T.int64(3), T.int64(128), T.int64(32)), "float32"), p2: T.Buffer((T.int64(1), T.int64(4), T.int64(1), T.int64(1), T.int64(32)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(4), T.int64(28), T.int64(28), T.int64(32)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        data_pad = T.alloc_buffer((T.int64(1), T.int64(1), T.int64(30), T.int64(30), T.int64(128)))
        conv2d_NCHWc = T.alloc_buffer((T.int64(1), T.int64(4), T.int64(28), T.int64(28), T.int64(32)))
        for n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_fused_fused in T.parallel(T.int64(224), annotations={"pragma_auto_unroll_max_step": 512, "pragma_unroll_explicit": 1}):
            for ax0, ax1, ax2, ax3, ax4 in T.grid(T.int64(1), T.int64(1), T.int64(9), T.int64(4), T.int64(128)):
                with T.block("data_pad"):
                    v_i0, v_i1 = T.axis.remap("SS", [ax0, ax1])
                    v_i2 = T.axis.spatial(T.int64(30), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_fused_fused // T.int64(56) * T.int64(7) + ax2)
                    v_i3 = T.axis.spatial(T.int64(30), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_fused_fused % T.int64(14) * T.int64(2) + ax3)
                    v_i4 = T.axis.spatial(T.int64(128), ax4)
                    T.reads(p0[v_i0, v_i1, v_i2 - T.int64(1), v_i3 - T.int64(1), v_i4])
                    T.writes(data_pad[v_i0, v_i1, v_i2, v_i3, v_i4])
                    data_pad[v_i0, v_i1, v_i2, v_i3, v_i4] = T.if_then_else(T.int64(1) <= v_i2 and v_i2 < T.int64(29) and T.int64(1) <= v_i3 and v_i3 < T.int64(29), p0[v_i0, v_i1, v_i2 - T.int64(1), v_i3 - T.int64(1), v_i4], T.float32(0))
            for oc_block_1 in range(T.int64(1)):
                for n_2_init, oc_chunk_2_init, oh_2_init, ow_2_init, oc_block_2_init, n_3_init, oc_chunk_3_init, oh_3_init, ow_3_init, oc_block_3_init in T.grid(T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(32), T.int64(1), T.int64(1), T.int64(7), T.int64(1), T.int64(1)):
                    with T.block("conv2d_NCHWc_init"):
                        v_n = T.axis.spatial(T.int64(1), n_2_init + n_3_init)
                        v_oc_chunk = T.axis.spatial(T.int64(4), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_fused_fused % T.int64(56) // T.int64(14) + oc_chunk_2_init + oc_chunk_3_init)
                        v_oh = T.axis.spatial(T.int64(28), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_fused_fused // T.int64(56) * T.int64(7) + oh_2_init * T.int64(7) + oh_3_init)
                        v_ow = T.axis.spatial(T.int64(28), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_fused_fused % T.int64(14) * T.int64(2) + ow_2_init + ow_3_init)
                        v_oc_block = T.axis.spatial(T.int64(32), oc_block_1 * T.int64(32) + oc_block_2_init + oc_block_3_init)
                        T.reads()
                        T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                        T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                        conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = T.float32(0)
                for ic_0, kh_0, kw_0, n_2, oc_chunk_2, oh_2, ow_2, oc_block_2, ic_1, kh_1, kw_1, n_3, oc_chunk_3, oh_3, ow_3, oc_block_3 in T.grid(T.int64(64), T.int64(1), T.int64(3), T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(32), T.int64(2), T.int64(3), T.int64(1), T.int64(1), T.int64(1), T.int64(7), T.int64(1), T.int64(1)):
                    with T.block("conv2d_NCHWc_update"):
                        v_n = T.axis.spatial(T.int64(1), n_2 + n_3)
                        v_oc_chunk = T.axis.spatial(T.int64(4), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_fused_fused % T.int64(56) // T.int64(14) + oc_chunk_2 + oc_chunk_3)
                        v_oh = T.axis.spatial(T.int64(28), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_fused_fused // T.int64(56) * T.int64(7) + oh_2 * T.int64(7) + oh_3)
                        v_ow = T.axis.spatial(T.int64(28), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_fused_fused % T.int64(14) * T.int64(2) + ow_2 + ow_3)
                        v_oc_block = T.axis.spatial(T.int64(32), oc_block_1 * T.int64(32) + oc_block_2 + oc_block_3)
                        v_ic = T.axis.reduce(T.int64(128), ic_0 * T.int64(2) + ic_1)
                        v_kh = T.axis.reduce(T.int64(3), kh_0 * T.int64(3) + kh_1)
                        v_kw = T.axis.reduce(T.int64(3), kw_0 + kw_1)
                        T.reads(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block], data_pad[v_n, v_ic // T.int64(128), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(128)], p1[v_oc_chunk, v_ic // T.int64(128), v_kh, v_kw, v_ic % T.int64(128), v_oc_block])
                        T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                        T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                        conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] + data_pad[v_n, v_ic // T.int64(128), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(128)] * p1[v_oc_chunk, v_ic // T.int64(128), v_kh, v_kw, v_ic % T.int64(128), v_oc_block]
                for ax0, ax1, ax2 in T.grid(T.int64(1), T.int64(1), T.int64(7)):
                    for ax3_ax4_fused in T.vectorized(T.int64(64)):
                        with T.block("T_relu"):
                            v_ax0 = T.axis.spatial(T.int64(1), ax0)
                            v_ax1 = T.axis.spatial(T.int64(4), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_fused_fused % T.int64(56) // T.int64(14) + ax1)
                            v_ax2 = T.axis.spatial(T.int64(28), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_fused_fused // T.int64(56) * T.int64(7) + ax2)
                            v_ax3 = T.axis.spatial(T.int64(28), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_fused_fused % T.int64(14) * T.int64(2) + ax3_ax4_fused // T.int64(32))
                            v_ax4 = T.axis.spatial(T.int64(32), ax3_ax4_fused % T.int64(32))
                            T.reads(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4])
                            T.writes(T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                            T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.max(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] + p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4], T.float32(0))
b0 = sch.get_block(name="data_pad", func_name="main")
b1 = sch.get_block(name="conv2d_NCHWc", func_name="main")
b2 = sch.get_block(name="T_add", func_name="main")
b3 = sch.get_block(name="root", func_name="main")
sch.compute_inline(block=b2)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSRSRS")
l4, l5, l6, l7, l8, l9, l10, l11 = sch.get_loops(block=b1)
v12, v13, v14, v15 = sch.sample_perfect_tile(loop=l4, n=4, max_innermost_factor=64, decision=[1, 1, 1, 1])
l16, l17, l18, l19 = sch.split(loop=l4, factors=[v12, v13, v14, v15], preserve_unit_iters=True)
v20, v21, v22, v23 = sch.sample_perfect_tile(loop=l5, n=4, max_innermost_factor=64, decision=[1, 4, 1, 1])
l24, l25, l26, l27 = sch.split(loop=l5, factors=[v20, v21, v22, v23], preserve_unit_iters=True)
v28, v29, v30, v31 = sch.sample_perfect_tile(loop=l6, n=4, max_innermost_factor=64, decision=[4, 1, 1, 7])
l32, l33, l34, l35 = sch.split(loop=l6, factors=[v28, v29, v30, v31], preserve_unit_iters=True)
v36, v37, v38, v39 = sch.sample_perfect_tile(loop=l7, n=4, max_innermost_factor=64, decision=[1, 14, 2, 1])
l40, l41, l42, l43 = sch.split(loop=l7, factors=[v36, v37, v38, v39], preserve_unit_iters=True)
v44, v45, v46, v47 = sch.sample_perfect_tile(loop=l8, n=4, max_innermost_factor=64, decision=[1, 1, 32, 1])
l48, l49, l50, l51 = sch.split(loop=l8, factors=[v44, v45, v46, v47], preserve_unit_iters=True)
v52, v53 = sch.sample_perfect_tile(loop=l9, n=2, max_innermost_factor=64, decision=[64, 2])
l54, l55 = sch.split(loop=l9, factors=[v52, v53], preserve_unit_iters=True)
v56, v57 = sch.sample_perfect_tile(loop=l10, n=2, max_innermost_factor=64, decision=[1, 3])
l58, l59 = sch.split(loop=l10, factors=[v56, v57], preserve_unit_iters=True)
v60, v61 = sch.sample_perfect_tile(loop=l11, n=2, max_innermost_factor=64, decision=[3, 1])
l62, l63 = sch.split(loop=l11, factors=[v60, v61], preserve_unit_iters=True)
sch.reorder(l16, l24, l32, l40, l48, l17, l25, l33, l41, l49, l54, l58, l62, l18, l26, l34, l42, l50, l55, l59, l63, l19, l27, l35, l43, l51)
b64, = sch.get_consumers(block=b1)
sch.reverse_compute_at(block=b64, loop=l49, preserve_unit_loops=True, index=-1)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.vectorize", ann_val=64)
v65 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.unroll_explicit", ann_val=v65)
l66 = sch.sample_compute_location(block=b0, decision=8)
sch.compute_at(block=b0, loop=l66, preserve_unit_loops=True, index=-1)
sch.enter_postproc()
b67 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b67, ann_key="meta_schedule.parallel")
sch.unannotate(block_or_loop=b67, ann_key="meta_schedule.vectorize")
sch.unannotate(block_or_loop=b67, ann_key="meta_schedule.unroll_explicit")
b68, b69, b70 = sch.get_child_blocks(b67)
l71, l72, l73, l74, l75, l76, l77, l78, l79, l80, l81, l82, l83, l84 = sch.get_loops(block=b68)
l85 = sch.fuse(l71, l72, l73, l74, l75, l76, l77, l78, l79, preserve_unit_iters=True)
sch.parallel(loop=l85)
l86, l87, l88, l89, l90, l91, l92, l93, l94, l95, l96, l97, l98, l99, l100, l101, l102, l103 = sch.get_loops(block=b69)
l104 = sch.fuse(l86, preserve_unit_iters=True)
sch.parallel(loop=l104)
sch.annotate(block_or_loop=l104, ann_key="pragma_auto_unroll_max_step", ann_val=512)
sch.annotate(block_or_loop=l104, ann_key="pragma_unroll_explicit", ann_val=1)
l105, l106, l107, l108, l109, l110, l111 = sch.get_loops(block=b70)
l112 = sch.fuse(l110, l111, preserve_unit_iters=True)
sch.vectorize(loop=l112)
b113 = sch.get_block(name="conv2d_NCHWc", func_name="main")
l114, l115, l116, l117, l118, l119, l120, l121, l122, l123, l124, l125, l126, l127, l128, l129, l130, l131 = sch.get_loops(block=b113)
b132 = sch.decompose_reduction(block=b113, loop=l116)
2024-04-29 01:55:53 [INFO] [task_scheduler.cc:131] [Task #13: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #420: GFLOPs: 940.8128. Time: 245.9700 us. Best GFLOPs: 1053.8282
2024-04-29 01:55:53 [INFO] [task_scheduler.cc:131] [Task #13: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #421: GFLOPs: 860.0961. Time: 269.0533 us. Best GFLOPs: 1053.8282
2024-04-29 01:55:53 [INFO] [task_scheduler.cc:131] [Task #13: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #422: GFLOPs: 851.3927. Time: 271.8037 us. Best GFLOPs: 1053.8282
2024-04-29 01:55:53 [INFO] [task_scheduler.cc:131] [Task #13: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #423: GFLOPs: 939.3890. Time: 246.3428 us. Best GFLOPs: 1053.8282
2024-04-29 01:55:53 [INFO] [task_scheduler.cc:131] [Task #13: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #424: GFLOPs: 744.4960. Time: 310.8300 us. Best GFLOPs: 1053.8282
2024-04-29 01:55:53 [INFO] [task_scheduler.cc:131] [Task #13: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #425: GFLOPs: 903.6603. Time: 256.0826 us. Best GFLOPs: 1053.8282
2024-04-29 01:55:53 [INFO] [task_scheduler.cc:131] [Task #13: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #426: GFLOPs: 923.9401. Time: 250.4618 us. Best GFLOPs: 1053.8282
2024-04-29 01:55:53 [INFO] [task_scheduler.cc:131] [Task #13: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #427: GFLOPs: 910.6987. Time: 254.1035 us. Best GFLOPs: 1053.8282
2024-04-29 01:55:53 [INFO] [task_scheduler.cc:131] [Task #13: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #428: GFLOPs: 973.3291. Time: 237.7528 us. Best GFLOPs: 1053.8282
2024-04-29 01:55:53 [INFO] [task_scheduler.cc:131] [Task #13: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #429: GFLOPs: 1038.7779. Time: 222.7730 us. Best GFLOPs: 1053.8282
2024-04-29 01:55:53 [INFO] [task_scheduler.cc:131] [Task #13: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #430: GFLOPs: 686.1857. Time: 337.2436 us. Best GFLOPs: 1053.8282
2024-04-29 01:55:53 [INFO] [task_scheduler.cc:131] [Task #13: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #431: GFLOPs: 830.0328. Time: 278.7983 us. Best GFLOPs: 1053.8282
2024-04-29 01:55:53 [INFO] [task_scheduler.cc:131] [Task #13: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #432: GFLOPs: 1049.5437. Time: 220.4879 us. Best GFLOPs: 1053.8282
2024-04-29 01:55:53 [INFO] [task_scheduler.cc:131] [Task #13: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #433: GFLOPs: 821.1271. Time: 281.8220 us. Best GFLOPs: 1053.8282
2024-04-29 01:55:53 [INFO] [task_scheduler.cc:131] [Task #13: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #434: GFLOPs: 690.7424. Time: 335.0189 us. Best GFLOPs: 1053.8282
2024-04-29 01:55:53 [INFO] [task_scheduler.cc:131] [Task #13: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #435: GFLOPs: 717.8510. Time: 322.3673 us. Best GFLOPs: 1053.8282
2024-04-29 01:55:53 [INFO] [task_scheduler.cc:131] [Task #13: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #436: GFLOPs: 827.8451. Time: 279.5350 us. Best GFLOPs: 1053.8282
2024-04-29 01:55:53 [INFO] [task_scheduler.cc:131] [Task #13: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #437: GFLOPs: 832.0821. Time: 278.1116 us. Best GFLOPs: 1053.8282
2024-04-29 01:55:53 [INFO] [task_scheduler.cc:131] [Task #13: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #438: GFLOPs: 1062.5427. Time: 217.7905 us. Best GFLOPs: 1062.5427
2024-04-29 01:55:53 [INFO] [task_scheduler.cc:131] [Task #13: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #439: GFLOPs: 828.9342. Time: 279.1678 us. Best GFLOPs: 1062.5427
2024-04-29 01:55:53 [INFO] [task_scheduler.cc:131] [Task #13: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #440: GFLOPs: 772.8857. Time: 299.4126 us. Best GFLOPs: 1062.5427
2024-04-29 01:55:53 [INFO] [task_scheduler.cc:131] [Task #13: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #441: GFLOPs: 904.9336. Time: 255.7223 us. Best GFLOPs: 1062.5427
2024-04-29 01:55:53 [INFO] [task_scheduler.cc:131] [Task #13: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #442: GFLOPs: 842.2974. Time: 274.7387 us. Best GFLOPs: 1062.5427
2024-04-29 01:55:53 [INFO] [task_scheduler.cc:131] [Task #13: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #443: GFLOPs: 903.0665. Time: 256.2510 us. Best GFLOPs: 1062.5427
2024-04-29 01:55:53 [INFO] [task_scheduler.cc:131] [Task #13: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #444: GFLOPs: 1017.2851. Time: 227.4797 us. Best GFLOPs: 1062.5427
2024-04-29 01:55:53 [INFO] [task_scheduler.cc:131] [Task #13: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #445: GFLOPs: 116.9421. Time: 1978.8575 us. Best GFLOPs: 1062.5427
2024-04-29 01:55:53 [INFO] [task_scheduler.cc:131] [Task #13: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #446: GFLOPs: 47.8767. Time: 4833.4940 us. Best GFLOPs: 1062.5427
2024-04-29 01:55:53 [INFO] [task_scheduler.cc:121] [Task #13: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #447: Error in building:
LocalBuilder: Timeout, killed after 30.0 seconds
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(1), T.int64(28), T.int64(28), T.int64(128)), "float32"), p1: T.Buffer((T.int64(4), T.int64(1), T.int64(3), T.int64(3), T.int64(128), T.int64(32)), "float32"), p2: T.Buffer((T.int64(1), T.int64(4), T.int64(1), T.int64(1), T.int64(32)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(4), T.int64(28), T.int64(28), T.int64(32)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        data_pad = T.alloc_buffer((T.int64(1), T.int64(1), T.int64(30), T.int64(30), T.int64(128)))
        conv2d_NCHWc = T.alloc_buffer((T.int64(1), T.int64(4), T.int64(28), T.int64(28), T.int64(32)))
        for n_0_oc_chunk_0_fused_fused in T.parallel(T.int64(4), annotations={"pragma_auto_unroll_max_step": 512, "pragma_unroll_explicit": 1}):
            for ax0, ax1, ax2, ax3, ax4 in T.grid(T.int64(1), T.int64(1), T.int64(30), T.int64(30), T.int64(128)):
                with T.block("data_pad"):
                    v_i0, v_i1, v_i2, v_i3, v_i4 = T.axis.remap("SSSSS", [ax0, ax1, ax2, ax3, ax4])
                    T.reads(p0[v_i0, v_i1, v_i2 - T.int64(1), v_i3 - T.int64(1), v_i4])
                    T.writes(data_pad[v_i0, v_i1, v_i2, v_i3, v_i4])
                    data_pad[v_i0, v_i1, v_i2, v_i3, v_i4] = T.if_then_else(T.int64(1) <= v_i2 and v_i2 < T.int64(29) and T.int64(1) <= v_i3 and v_i3 < T.int64(29), p0[v_i0, v_i1, v_i2 - T.int64(1), v_i3 - T.int64(1), v_i4], T.float32(0))
            for oh_0, ow_0, oc_block_0 in T.grid(T.int64(4), T.int64(1), T.int64(1)):
                for n_1, oc_chunk_1, oh_1, ow_1, oc_block_1 in T.grid(T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(32)):
                    for n_2_init, oc_chunk_2_init, oh_2_init, ow_2_init, oc_block_2_init, n_3_init, oc_chunk_3_init, oh_3_init, ow_3_init, oc_block_3_init in T.grid(T.int64(1), T.int64(1), T.int64(7), T.int64(2), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(14), T.int64(1)):
                        with T.block("conv2d_NCHWc_init"):
                            v_n = T.axis.spatial(T.int64(1), n_1 + n_2_init + n_3_init)
                            v_oc_chunk = T.axis.spatial(T.int64(4), n_0_oc_chunk_0_fused_fused + oc_chunk_1 + oc_chunk_2_init + oc_chunk_3_init)
                            v_oh = T.axis.spatial(T.int64(28), oh_0 * T.int64(7) + oh_1 * T.int64(7) + oh_2_init + oh_3_init)
                            v_ow = T.axis.spatial(T.int64(28), ow_0 * T.int64(28) + ow_1 * T.int64(28) + ow_2_init * T.int64(14) + ow_3_init)
                            v_oc_block = T.axis.spatial(T.int64(32), oc_block_0 * T.int64(32) + oc_block_1 + oc_block_2_init + oc_block_3_init)
                            T.reads()
                            T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                            T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                            conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = T.float32(0)
                    for ic_0, kh_0, kw_0, n_2, oc_chunk_2, oh_2, ow_2, oc_block_2, ic_1, kh_1, kw_1, n_3, oc_chunk_3, oh_3, ow_3, oc_block_3 in T.grid(T.int64(4), T.int64(3), T.int64(3), T.int64(1), T.int64(1), T.int64(7), T.int64(2), T.int64(1), T.int64(32), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(14), T.int64(1)):
                        with T.block("conv2d_NCHWc_update"):
                            v_n = T.axis.spatial(T.int64(1), n_1 + n_2 + n_3)
                            v_oc_chunk = T.axis.spatial(T.int64(4), n_0_oc_chunk_0_fused_fused + oc_chunk_1 + oc_chunk_2 + oc_chunk_3)
                            v_oh = T.axis.spatial(T.int64(28), oh_0 * T.int64(7) + oh_1 * T.int64(7) + oh_2 + oh_3)
                            v_ow = T.axis.spatial(T.int64(28), ow_0 * T.int64(28) + ow_1 * T.int64(28) + ow_2 * T.int64(14) + ow_3)
                            v_oc_block = T.axis.spatial(T.int64(32), oc_block_0 * T.int64(32) + oc_block_1 + oc_block_2 + oc_block_3)
                            v_ic = T.axis.reduce(T.int64(128), ic_0 * T.int64(32) + ic_1)
                            v_kh = T.axis.reduce(T.int64(3), kh_0 + kh_1)
                            v_kw = T.axis.reduce(T.int64(3), kw_0 + kw_1)
                            T.reads(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block], data_pad[v_n, v_ic // T.int64(128), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(128)], p1[v_oc_chunk, v_ic // T.int64(128), v_kh, v_kw, v_ic % T.int64(128), v_oc_block])
                            T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                            T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                            conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] + data_pad[v_n, v_ic // T.int64(128), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(128)] * p1[v_oc_chunk, v_ic // T.int64(128), v_kh, v_kw, v_ic % T.int64(128), v_oc_block]
                for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(1), T.int64(7), T.int64(28)):
                    for ax4_fused in T.vectorized(T.int64(32)):
                        with T.block("T_relu"):
                            v_ax0 = T.axis.spatial(T.int64(1), ax0)
                            v_ax1 = T.axis.spatial(T.int64(4), n_0_oc_chunk_0_fused_fused + ax1)
                            v_ax2 = T.axis.spatial(T.int64(28), oh_0 * T.int64(7) + ax2)
                            v_ax3, v_ax4 = T.axis.remap("SS", [ax3, ax4_fused])
                            T.reads(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4])
                            T.writes(T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                            T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.max(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] + p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4], T.float32(0))
b0 = sch.get_block(name="data_pad", func_name="main")
b1 = sch.get_block(name="conv2d_NCHWc", func_name="main")
b2 = sch.get_block(name="T_add", func_name="main")
b3 = sch.get_block(name="root", func_name="main")
sch.compute_inline(block=b2)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSRSRS")
l4, l5, l6, l7, l8, l9, l10, l11 = sch.get_loops(block=b1)
v12, v13, v14, v15 = sch.sample_perfect_tile(loop=l4, n=4, max_innermost_factor=64, decision=[1, 1, 1, 1])
l16, l17, l18, l19 = sch.split(loop=l4, factors=[v12, v13, v14, v15], preserve_unit_iters=True)
v20, v21, v22, v23 = sch.sample_perfect_tile(loop=l5, n=4, max_innermost_factor=64, decision=[4, 1, 1, 1])
l24, l25, l26, l27 = sch.split(loop=l5, factors=[v20, v21, v22, v23], preserve_unit_iters=True)
v28, v29, v30, v31 = sch.sample_perfect_tile(loop=l6, n=4, max_innermost_factor=64, decision=[4, 1, 7, 1])
l32, l33, l34, l35 = sch.split(loop=l6, factors=[v28, v29, v30, v31], preserve_unit_iters=True)
v36, v37, v38, v39 = sch.sample_perfect_tile(loop=l7, n=4, max_innermost_factor=64, decision=[1, 1, 2, 14])
l40, l41, l42, l43 = sch.split(loop=l7, factors=[v36, v37, v38, v39], preserve_unit_iters=True)
v44, v45, v46, v47 = sch.sample_perfect_tile(loop=l8, n=4, max_innermost_factor=64, decision=[1, 32, 1, 1])
l48, l49, l50, l51 = sch.split(loop=l8, factors=[v44, v45, v46, v47], preserve_unit_iters=True)
v52, v53 = sch.sample_perfect_tile(loop=l9, n=2, max_innermost_factor=64, decision=[4, 32])
l54, l55 = sch.split(loop=l9, factors=[v52, v53], preserve_unit_iters=True)
v56, v57 = sch.sample_perfect_tile(loop=l10, n=2, max_innermost_factor=64, decision=[3, 1])
l58, l59 = sch.split(loop=l10, factors=[v56, v57], preserve_unit_iters=True)
v60, v61 = sch.sample_perfect_tile(loop=l11, n=2, max_innermost_factor=64, decision=[3, 1])
l62, l63 = sch.split(loop=l11, factors=[v60, v61], preserve_unit_iters=True)
sch.reorder(l16, l24, l32, l40, l48, l17, l25, l33, l41, l49, l54, l58, l62, l18, l26, l34, l42, l50, l55, l59, l63, l19, l27, l35, l43, l51)
b64, = sch.get_consumers(block=b1)
sch.reverse_compute_at(block=b64, loop=l48, preserve_unit_loops=True, index=-1)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.vectorize", ann_val=64)
v65 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.unroll_explicit", ann_val=v65)
l66 = sch.sample_compute_location(block=b0, decision=1)
sch.compute_at(block=b0, loop=l66, preserve_unit_loops=True, index=-1)
sch.enter_postproc()
b67 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b67, ann_key="meta_schedule.parallel")
sch.unannotate(block_or_loop=b67, ann_key="meta_schedule.vectorize")
sch.unannotate(block_or_loop=b67, ann_key="meta_schedule.unroll_explicit")
b68, b69, b70 = sch.get_child_blocks(b67)
l71, l72, l73, l74, l75, l76, l77 = sch.get_loops(block=b68)
l78 = sch.fuse(l71, l72, preserve_unit_iters=True)
sch.parallel(loop=l78)
l79, l80, l81, l82, l83, l84, l85, l86, l87, l88, l89, l90, l91, l92, l93, l94, l95, l96, l97, l98, l99, l100, l101, l102, l103 = sch.get_loops(block=b69)
l104 = sch.fuse(l79, preserve_unit_iters=True)
sch.parallel(loop=l104)
sch.annotate(block_or_loop=l104, ann_key="pragma_auto_unroll_max_step", ann_val=512)
sch.annotate(block_or_loop=l104, ann_key="pragma_unroll_explicit", ann_val=1)
l105, l106, l107, l108, l109, l110, l111, l112, l113 = sch.get_loops(block=b70)
l114 = sch.fuse(l113, preserve_unit_iters=True)
sch.vectorize(loop=l114)
b115 = sch.get_block(name="conv2d_NCHWc", func_name="main")
l116, l117, l118, l119, l120, l121, l122, l123, l124, l125, l126, l127, l128, l129, l130, l131, l132, l133, l134, l135, l136, l137, l138, l139, l140 = sch.get_loops(block=b115)
b141 = sch.decompose_reduction(block=b115, loop=l125)
2024-04-29 01:55:53 [INFO] [task_scheduler.cc:131] [Task #13: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #448: GFLOPs: 14.6575. Time: 15787.9541 us. Best GFLOPs: 1062.5427
2024-04-29 02:43:43 [INFO] [evolutionary_search.cc:713] Generating candidates......
2024-04-29 02:43:45 [INFO] [evolutionary_search.cc:715] Picked top 102 candidate(s) from database
2024-04-29 02:43:49 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x3cedc28)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x30c43a8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x331a288)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x3f41058)]: 0 failure(s)
2024-04-29 02:43:49 [INFO] [evolutionary_search.cc:723] Sampled 410 candidate(s)
2024-04-29 02:44:01 [INFO] [evolutionary_search.cc:621] Evolve iter #0 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x3cedc28)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x30c43a8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x331a288)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x3f41058)]: 0 failure(s)
2024-04-29 02:44:13 [INFO] [evolutionary_search.cc:621] Evolve iter #1 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x3cedc28)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x30c43a8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x331a288)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x3f41058)]: 0 failure(s)
2024-04-29 02:44:25 [INFO] [evolutionary_search.cc:621] Evolve iter #2 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x3cedc28)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x30c43a8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x331a288)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x3f41058)]: 0 failure(s)
2024-04-29 02:44:38 [INFO] [evolutionary_search.cc:621] Evolve iter #3 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x3cedc28)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x30c43a8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x331a288)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x3f41058)]: 0 failure(s)
2024-04-29 02:44:44 [INFO] [evolutionary_search.cc:649] Scores of the best 64 candidates:
[1 : 16]:	0.9363  0.9363  0.9328  0.9226  0.9215  0.9205  0.9200  0.9187  0.9053  0.9039  0.9039  0.8972  0.8889  0.8781  0.8760  0.8745
[17 : 32]:	0.8708  0.8705  0.8704  0.8704  0.8693  0.8676  0.8650  0.8600  0.8592  0.8571  0.8525  0.8504  0.8497  0.8458  0.8458  0.8341
[33 : 48]:	0.8299  0.8299  0.8271  0.8266  0.8262  0.8259  0.8220  0.8216  0.8197  0.8182  0.8160  0.8160  0.8154  0.8138  0.8129  0.8129
[49 : 64]:	0.8118  0.8118  0.8095  0.8081  0.8068  0.8032  0.8031  0.8019  0.8018  0.8003  0.8002  0.7997  0.7994  0.7994  0.7994  0.7992
2024-04-29 02:44:45 [INFO] [evolutionary_search.cc:727] Got 64 candidate(s) with evolutionary search
2024-04-29 02:44:45 [INFO] [evolutionary_search.cc:730] Sending 64 candidates(s) for measurement
2024-04-29 02:46:10 [INFO] [task_scheduler.cc:131] [Task #13: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #449: GFLOPs: 998.2189. Time: 231.8246 us. Best GFLOPs: 1062.5427
2024-04-29 02:46:10 [INFO] [task_scheduler.cc:131] [Task #13: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #450: GFLOPs: 936.0613. Time: 247.2186 us. Best GFLOPs: 1062.5427
2024-04-29 02:46:10 [INFO] [task_scheduler.cc:131] [Task #13: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #451: GFLOPs: 922.6068. Time: 250.8238 us. Best GFLOPs: 1062.5427
2024-04-29 02:46:10 [INFO] [task_scheduler.cc:131] [Task #13: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #452: GFLOPs: 994.7414. Time: 232.6351 us. Best GFLOPs: 1062.5427
2024-04-29 02:46:10 [INFO] [task_scheduler.cc:131] [Task #13: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #453: GFLOPs: 1078.5350. Time: 214.5611 us. Best GFLOPs: 1078.5350
2024-04-29 02:46:10 [INFO] [task_scheduler.cc:131] [Task #13: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #454: GFLOPs: 999.7499. Time: 231.4696 us. Best GFLOPs: 1078.5350
2024-04-29 02:46:10 [INFO] [task_scheduler.cc:131] [Task #13: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #455: GFLOPs: 1064.1694. Time: 217.4576 us. Best GFLOPs: 1078.5350
2024-04-29 02:46:10 [INFO] [task_scheduler.cc:131] [Task #13: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #456: GFLOPs: 1064.6421. Time: 217.3610 us. Best GFLOPs: 1078.5350
2024-04-29 02:46:10 [INFO] [task_scheduler.cc:131] [Task #13: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #457: GFLOPs: 1017.3202. Time: 227.4719 us. Best GFLOPs: 1078.5350
2024-04-29 02:46:10 [INFO] [task_scheduler.cc:131] [Task #13: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #458: GFLOPs: 983.2345. Time: 235.3576 us. Best GFLOPs: 1078.5350
2024-04-29 02:46:10 [INFO] [task_scheduler.cc:131] [Task #13: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #459: GFLOPs: 984.5404. Time: 235.0454 us. Best GFLOPs: 1078.5350
2024-04-29 02:46:10 [INFO] [task_scheduler.cc:131] [Task #13: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #460: GFLOPs: 1005.0640. Time: 230.2457 us. Best GFLOPs: 1078.5350
2024-04-29 02:46:10 [INFO] [task_scheduler.cc:131] [Task #13: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #461: GFLOPs: 990.1289. Time: 233.7188 us. Best GFLOPs: 1078.5350
2024-04-29 02:46:10 [INFO] [task_scheduler.cc:131] [Task #13: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #462: GFLOPs: 974.7768. Time: 237.3997 us. Best GFLOPs: 1078.5350
2024-04-29 02:46:10 [INFO] [task_scheduler.cc:131] [Task #13: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #463: GFLOPs: 1006.3626. Time: 229.9486 us. Best GFLOPs: 1078.5350
2024-04-29 02:46:10 [INFO] [task_scheduler.cc:131] [Task #13: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #464: GFLOPs: 984.4989. Time: 235.0553 us. Best GFLOPs: 1078.5350
2024-04-29 02:46:10 [INFO] [task_scheduler.cc:131] [Task #13: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #465: GFLOPs: 988.8429. Time: 234.0227 us. Best GFLOPs: 1078.5350
2024-04-29 02:46:10 [INFO] [task_scheduler.cc:131] [Task #13: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #466: GFLOPs: 885.2780. Time: 261.4000 us. Best GFLOPs: 1078.5350
2024-04-29 02:46:10 [INFO] [task_scheduler.cc:131] [Task #13: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #467: GFLOPs: 1060.1241. Time: 218.2874 us. Best GFLOPs: 1078.5350
2024-04-29 02:46:10 [INFO] [task_scheduler.cc:131] [Task #13: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #468: GFLOPs: 1101.4195. Time: 210.1032 us. Best GFLOPs: 1101.4195
2024-04-29 02:46:10 [INFO] [task_scheduler.cc:131] [Task #13: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #469: GFLOPs: 1079.2998. Time: 214.4091 us. Best GFLOPs: 1101.4195
2024-04-29 02:46:10 [INFO] [task_scheduler.cc:131] [Task #13: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #470: GFLOPs: 960.6249. Time: 240.8971 us. Best GFLOPs: 1101.4195
2024-04-29 02:46:10 [INFO] [task_scheduler.cc:131] [Task #13: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #471: GFLOPs: 926.9432. Time: 249.6504 us. Best GFLOPs: 1101.4195
2024-04-29 02:46:10 [INFO] [task_scheduler.cc:131] [Task #13: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #472: GFLOPs: 1029.5972. Time: 224.7595 us. Best GFLOPs: 1101.4195
2024-04-29 02:46:10 [INFO] [task_scheduler.cc:131] [Task #13: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #473: GFLOPs: 902.5976. Time: 256.3841 us. Best GFLOPs: 1101.4195
2024-04-29 02:46:10 [INFO] [task_scheduler.cc:131] [Task #13: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #474: GFLOPs: 926.8000. Time: 249.6889 us. Best GFLOPs: 1101.4195
2024-04-29 02:46:10 [INFO] [task_scheduler.cc:131] [Task #13: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #475: GFLOPs: 989.8724. Time: 233.7793 us. Best GFLOPs: 1101.4195
2024-04-29 02:46:10 [INFO] [task_scheduler.cc:131] [Task #13: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #476: GFLOPs: 945.0599. Time: 244.8646 us. Best GFLOPs: 1101.4195
2024-04-29 02:46:10 [INFO] [task_scheduler.cc:131] [Task #13: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #477: GFLOPs: 986.7028. Time: 234.5303 us. Best GFLOPs: 1101.4195
2024-04-29 02:46:10 [INFO] [task_scheduler.cc:131] [Task #13: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #478: GFLOPs: 878.2373. Time: 263.4957 us. Best GFLOPs: 1101.4195
2024-04-29 02:46:10 [INFO] [task_scheduler.cc:131] [Task #13: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #479: GFLOPs: 897.1972. Time: 257.9274 us. Best GFLOPs: 1101.4195
2024-04-29 02:46:10 [INFO] [task_scheduler.cc:131] [Task #13: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #480: GFLOPs: 912.8475. Time: 253.5053 us. Best GFLOPs: 1101.4195
2024-04-29 02:46:10 [INFO] [task_scheduler.cc:131] [Task #13: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #481: GFLOPs: 918.5431. Time: 251.9334 us. Best GFLOPs: 1101.4195
2024-04-29 02:46:10 [INFO] [task_scheduler.cc:131] [Task #13: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #482: GFLOPs: 917.0964. Time: 252.3308 us. Best GFLOPs: 1101.4195
2024-04-29 02:46:10 [INFO] [task_scheduler.cc:131] [Task #13: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #483: GFLOPs: 963.0953. Time: 240.2791 us. Best GFLOPs: 1101.4195
2024-04-29 02:46:10 [INFO] [task_scheduler.cc:131] [Task #13: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #484: GFLOPs: 908.1326. Time: 254.8215 us. Best GFLOPs: 1101.4195
2024-04-29 02:46:10 [INFO] [task_scheduler.cc:131] [Task #13: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #485: GFLOPs: 943.9980. Time: 245.1400 us. Best GFLOPs: 1101.4195
2024-04-29 02:46:10 [INFO] [task_scheduler.cc:131] [Task #13: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #486: GFLOPs: 970.5175. Time: 238.4416 us. Best GFLOPs: 1101.4195
2024-04-29 02:46:10 [INFO] [task_scheduler.cc:131] [Task #13: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #487: GFLOPs: 892.8843. Time: 259.1732 us. Best GFLOPs: 1101.4195
2024-04-29 02:46:10 [INFO] [task_scheduler.cc:131] [Task #13: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #488: GFLOPs: 901.3602. Time: 256.7361 us. Best GFLOPs: 1101.4195
2024-04-29 02:46:10 [INFO] [task_scheduler.cc:131] [Task #13: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #489: GFLOPs: 858.6320. Time: 269.5121 us. Best GFLOPs: 1101.4195
2024-04-29 02:46:10 [INFO] [task_scheduler.cc:131] [Task #13: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #490: GFLOPs: 929.6513. Time: 248.9231 us. Best GFLOPs: 1101.4195
2024-04-29 02:46:10 [INFO] [task_scheduler.cc:131] [Task #13: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #491: GFLOPs: 888.0443. Time: 260.5858 us. Best GFLOPs: 1101.4195
2024-04-29 02:46:10 [INFO] [task_scheduler.cc:131] [Task #13: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #492: GFLOPs: 706.2350. Time: 327.6696 us. Best GFLOPs: 1101.4195
2024-04-29 02:46:10 [INFO] [task_scheduler.cc:131] [Task #13: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #493: GFLOPs: 1053.9250. Time: 219.5713 us. Best GFLOPs: 1101.4195
2024-04-29 02:46:10 [INFO] [task_scheduler.cc:131] [Task #13: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #494: GFLOPs: 1006.6578. Time: 229.8812 us. Best GFLOPs: 1101.4195
2024-04-29 02:46:10 [INFO] [task_scheduler.cc:131] [Task #13: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #495: GFLOPs: 893.6842. Time: 258.9413 us. Best GFLOPs: 1101.4195
2024-04-29 02:46:10 [INFO] [task_scheduler.cc:131] [Task #13: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #496: GFLOPs: 868.6734. Time: 266.3967 us. Best GFLOPs: 1101.4195
2024-04-29 02:46:10 [INFO] [task_scheduler.cc:131] [Task #13: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #497: GFLOPs: 852.2379. Time: 271.5342 us. Best GFLOPs: 1101.4195
2024-04-29 02:46:10 [INFO] [task_scheduler.cc:131] [Task #13: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #498: GFLOPs: 850.9006. Time: 271.9609 us. Best GFLOPs: 1101.4195
2024-04-29 02:46:10 [INFO] [task_scheduler.cc:131] [Task #13: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #499: GFLOPs: 987.6244. Time: 234.3115 us. Best GFLOPs: 1101.4195
2024-04-29 02:46:10 [INFO] [task_scheduler.cc:131] [Task #13: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #500: GFLOPs: 913.4980. Time: 253.3248 us. Best GFLOPs: 1101.4195
2024-04-29 02:46:10 [INFO] [task_scheduler.cc:131] [Task #13: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #501: GFLOPs: 892.1648. Time: 259.3822 us. Best GFLOPs: 1101.4195
2024-04-29 02:46:10 [INFO] [task_scheduler.cc:131] [Task #13: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #502: GFLOPs: 920.6976. Time: 251.3439 us. Best GFLOPs: 1101.4195
2024-04-29 02:46:10 [INFO] [task_scheduler.cc:131] [Task #13: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #503: GFLOPs: 153.5229. Time: 1507.3436 us. Best GFLOPs: 1101.4195
2024-04-29 02:46:10 [INFO] [task_scheduler.cc:131] [Task #13: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #504: GFLOPs: 1079.5557. Time: 214.3583 us. Best GFLOPs: 1101.4195
2024-04-29 02:46:10 [INFO] [task_scheduler.cc:131] [Task #13: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #505: GFLOPs: 982.2192. Time: 235.6009 us. Best GFLOPs: 1101.4195
2024-04-29 02:46:10 [INFO] [task_scheduler.cc:131] [Task #13: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #506: GFLOPs: 614.0513. Time: 376.8605 us. Best GFLOPs: 1101.4195
2024-04-29 02:46:10 [INFO] [task_scheduler.cc:131] [Task #13: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #507: GFLOPs: 859.5295. Time: 269.2307 us. Best GFLOPs: 1101.4195
2024-04-29 02:46:10 [INFO] [task_scheduler.cc:131] [Task #13: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #508: GFLOPs: 922.2467. Time: 250.9217 us. Best GFLOPs: 1101.4195
2024-04-29 02:46:10 [INFO] [task_scheduler.cc:131] [Task #13: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #509: GFLOPs: 905.7726. Time: 255.4854 us. Best GFLOPs: 1101.4195
2024-04-29 02:46:10 [INFO] [task_scheduler.cc:131] [Task #13: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #510: GFLOPs: 43.7806. Time: 5285.7163 us. Best GFLOPs: 1101.4195
2024-04-29 02:46:10 [INFO] [task_scheduler.cc:131] [Task #13: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #511: GFLOPs: 104.3979. Time: 2216.6318 us. Best GFLOPs: 1101.4195
2024-04-29 02:46:10 [INFO] [task_scheduler.cc:131] [Task #13: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_3] Trial #512: GFLOPs: 11.5056. Time: 20113.0462 us. Best GFLOPs: 1101.4195
