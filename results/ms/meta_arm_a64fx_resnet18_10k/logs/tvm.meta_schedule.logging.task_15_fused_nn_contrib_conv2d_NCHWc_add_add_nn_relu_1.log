2024-04-28 20:35:16 [INFO] [task_scheduler.cc:160] Initializing Task #15: "fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_1"
2024-04-28 20:35:16 [INFO] [task_scheduler.cc:35] 
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(1), T.int64(28), T.int64(28), T.int64(128)), "float32"), p1: T.Buffer((T.int64(4), T.int64(1), T.int64(3), T.int64(3), T.int64(128), T.int64(32)), "float32"), p2: T.Buffer((T.int64(1), T.int64(4), T.int64(1), T.int64(1), T.int64(32)), "float32"), p3: T.Buffer((T.int64(1), T.int64(4), T.int64(28), T.int64(28), T.int64(32)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(4), T.int64(28), T.int64(28), T.int64(32)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        data_pad = T.alloc_buffer((T.int64(1), T.int64(1), T.int64(30), T.int64(30), T.int64(128)))
        conv2d_NCHWc = T.alloc_buffer((T.int64(1), T.int64(4), T.int64(28), T.int64(28), T.int64(32)))
        T_add = T.alloc_buffer((T.int64(1), T.int64(4), T.int64(28), T.int64(28), T.int64(32)))
        T_add_1 = T.alloc_buffer((T.int64(1), T.int64(4), T.int64(28), T.int64(28), T.int64(32)))
        for i0, i1, i2, i3, i4 in T.grid(T.int64(1), T.int64(1), T.int64(30), T.int64(30), T.int64(128)):
            with T.block("data_pad"):
                v_i0, v_i1, v_i2, v_i3, v_i4 = T.axis.remap("SSSSS", [i0, i1, i2, i3, i4])
                T.reads(p0[v_i0, v_i1, v_i2 - T.int64(1), v_i3 - T.int64(1), v_i4])
                T.writes(data_pad[v_i0, v_i1, v_i2, v_i3, v_i4])
                data_pad[v_i0, v_i1, v_i2, v_i3, v_i4] = T.if_then_else(T.int64(1) <= v_i2 and v_i2 < T.int64(29) and T.int64(1) <= v_i3 and v_i3 < T.int64(29), p0[v_i0, v_i1, v_i2 - T.int64(1), v_i3 - T.int64(1), v_i4], T.float32(0))
        for n, oc_chunk, oh, ow, oc_block, ic, kh, kw in T.grid(T.int64(1), T.int64(4), T.int64(28), T.int64(28), T.int64(32), T.int64(128), T.int64(3), T.int64(3)):
            with T.block("conv2d_NCHWc"):
                v_n, v_oc_chunk, v_oh, v_ow, v_oc_block, v_ic, v_kh, v_kw = T.axis.remap("SSSSSRRR", [n, oc_chunk, oh, ow, oc_block, ic, kh, kw])
                T.reads(data_pad[v_n, v_ic // T.int64(128), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(128)], p1[v_oc_chunk, v_ic // T.int64(128), v_kh, v_kw, v_ic % T.int64(128), v_oc_block])
                T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                with T.init():
                    conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = T.float32(0)
                conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] + data_pad[v_n, v_ic // T.int64(128), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(128)] * p1[v_oc_chunk, v_ic // T.int64(128), v_kh, v_kw, v_ic % T.int64(128), v_oc_block]
        for ax0, ax1, ax2, ax3, ax4 in T.grid(T.int64(1), T.int64(4), T.int64(28), T.int64(28), T.int64(32)):
            with T.block("T_add"):
                v_ax0, v_ax1, v_ax2, v_ax3, v_ax4 = T.axis.remap("SSSSS", [ax0, ax1, ax2, ax3, ax4])
                T.reads(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4])
                T.writes(T_add[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                T_add[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] + p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4]
        for ax0, ax1, ax2, ax3, ax4 in T.grid(T.int64(1), T.int64(4), T.int64(28), T.int64(28), T.int64(32)):
            with T.block("T_add_1"):
                v_ax0, v_ax1, v_ax2, v_ax3, v_ax4 = T.axis.remap("SSSSS", [ax0, ax1, ax2, ax3, ax4])
                T.reads(T_add[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], p3[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                T.writes(T_add_1[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                T_add_1[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T_add[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] + p3[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4]
        for ax0, ax1, ax2, ax3, ax4 in T.grid(T.int64(1), T.int64(4), T.int64(28), T.int64(28), T.int64(32)):
            with T.block("T_relu"):
                v_ax0, v_ax1, v_ax2, v_ax3, v_ax4 = T.axis.remap("SSSSS", [ax0, ax1, ax2, ax3, ax4])
                T.reads(T_add_1[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                T.writes(T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.max(T_add_1[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], T.float32(0))
2024-04-28 20:35:16 [INFO] [task_scheduler.cc:164] Total 3 design space(s) generated
2024-04-28 20:35:16 [INFO] [task_scheduler.cc:170] Design space #0:
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(1), T.int64(28), T.int64(28), T.int64(128)), "float32"), p1: T.Buffer((T.int64(4), T.int64(1), T.int64(3), T.int64(3), T.int64(128), T.int64(32)), "float32"), p2: T.Buffer((T.int64(1), T.int64(4), T.int64(1), T.int64(1), T.int64(32)), "float32"), p3: T.Buffer((T.int64(1), T.int64(4), T.int64(28), T.int64(28), T.int64(32)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(4), T.int64(28), T.int64(28), T.int64(32)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        with T.block("root"):
            T.reads()
            T.writes()
            T.block_attr({"meta_schedule.parallel": 768, "meta_schedule.unroll_explicit": 0, "meta_schedule.vectorize": 64})
            data_pad = T.alloc_buffer((T.int64(1), T.int64(1), T.int64(30), T.int64(30), T.int64(128)))
            conv2d_NCHWc = T.alloc_buffer((T.int64(1), T.int64(4), T.int64(28), T.int64(28), T.int64(32)))
            for n_0, oc_chunk_0 in T.grid(T.int64(1), T.int64(4)):
                for ax0, ax1, ax2, ax3, ax4 in T.grid(T.int64(1), T.int64(1), T.int64(30), T.int64(30), T.int64(128)):
                    with T.block("data_pad"):
                        v_i0, v_i1, v_i2, v_i3, v_i4 = T.axis.remap("SSSSS", [ax0, ax1, ax2, ax3, ax4])
                        T.reads(p0[v_i0, v_i1, v_i2 - T.int64(1), v_i3 - T.int64(1), v_i4])
                        T.writes(data_pad[v_i0, v_i1, v_i2, v_i3, v_i4])
                        data_pad[v_i0, v_i1, v_i2, v_i3, v_i4] = T.if_then_else(T.int64(1) <= v_i2 and v_i2 < T.int64(29) and T.int64(1) <= v_i3 and v_i3 < T.int64(29), p0[v_i0, v_i1, v_i2 - T.int64(1), v_i3 - T.int64(1), v_i4], T.float32(0))
                for oh_0, ow_0, oc_block_0, n_1, oc_chunk_1, oh_1, ow_1, oc_block_1, ic_0, kh_0, kw_0, n_2, oc_chunk_2, oh_2, ow_2, oc_block_2, ic_1, kh_1, kw_1, n_3, oc_chunk_3, oh_3, ow_3, oc_block_3 in T.grid(T.int64(2), T.int64(1), T.int64(2), T.int64(1), T.int64(1), T.int64(2), T.int64(4), T.int64(1), T.int64(4), T.int64(3), T.int64(3), T.int64(1), T.int64(1), T.int64(7), T.int64(1), T.int64(8), T.int64(32), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(7), T.int64(2)):
                    with T.block("conv2d_NCHWc"):
                        v_n = T.axis.spatial(T.int64(1), n_0 + n_1 + n_2 + n_3)
                        v_oc_chunk = T.axis.spatial(T.int64(4), oc_chunk_0 + oc_chunk_1 + oc_chunk_2 + oc_chunk_3)
                        v_oh = T.axis.spatial(T.int64(28), oh_0 * T.int64(14) + oh_1 * T.int64(7) + oh_2 + oh_3)
                        v_ow = T.axis.spatial(T.int64(28), ow_0 * T.int64(28) + ow_1 * T.int64(7) + ow_2 * T.int64(7) + ow_3)
                        v_oc_block = T.axis.spatial(T.int64(32), oc_block_0 * T.int64(16) + oc_block_1 * T.int64(16) + oc_block_2 * T.int64(2) + oc_block_3)
                        v_ic = T.axis.reduce(T.int64(128), ic_0 * T.int64(32) + ic_1)
                        v_kh = T.axis.reduce(T.int64(3), kh_0 + kh_1)
                        v_kw = T.axis.reduce(T.int64(3), kw_0 + kw_1)
                        T.reads(data_pad[v_n, v_ic // T.int64(128), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(128)], p1[v_oc_chunk, v_ic // T.int64(128), v_kh, v_kw, v_ic % T.int64(128), v_oc_block])
                        T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                        T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                        with T.init():
                            conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = T.float32(0)
                        conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] + data_pad[v_n, v_ic // T.int64(128), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(128)] * p1[v_oc_chunk, v_ic // T.int64(128), v_kh, v_kw, v_ic % T.int64(128), v_oc_block]
            for ax0, ax1, ax2, ax3, ax4 in T.grid(T.int64(1), T.int64(4), T.int64(28), T.int64(28), T.int64(32)):
                with T.block("T_relu"):
                    v_ax0, v_ax1, v_ax2, v_ax3, v_ax4 = T.axis.remap("SSSSS", [ax0, ax1, ax2, ax3, ax4])
                    T.reads(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4], p3[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                    T.writes(T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                    T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.max(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] + p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4] + p3[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], T.float32(0))
b0 = sch.get_block(name="data_pad", func_name="main")
b1 = sch.get_block(name="conv2d_NCHWc", func_name="main")
b2 = sch.get_block(name="T_add", func_name="main")
b3 = sch.get_block(name="T_add_1", func_name="main")
b4 = sch.get_block(name="root", func_name="main")
sch.compute_inline(block=b3)
sch.compute_inline(block=b2)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSRSRS")
l5, l6, l7, l8, l9, l10, l11, l12 = sch.get_loops(block=b1)
v13, v14, v15, v16 = sch.sample_perfect_tile(loop=l5, n=4, max_innermost_factor=64, decision=[1, 1, 1, 1])
l17, l18, l19, l20 = sch.split(loop=l5, factors=[v13, v14, v15, v16], preserve_unit_iters=True)
v21, v22, v23, v24 = sch.sample_perfect_tile(loop=l6, n=4, max_innermost_factor=64, decision=[4, 1, 1, 1])
l25, l26, l27, l28 = sch.split(loop=l6, factors=[v21, v22, v23, v24], preserve_unit_iters=True)
v29, v30, v31, v32 = sch.sample_perfect_tile(loop=l7, n=4, max_innermost_factor=64, decision=[2, 2, 7, 1])
l33, l34, l35, l36 = sch.split(loop=l7, factors=[v29, v30, v31, v32], preserve_unit_iters=True)
v37, v38, v39, v40 = sch.sample_perfect_tile(loop=l8, n=4, max_innermost_factor=64, decision=[1, 4, 1, 7])
l41, l42, l43, l44 = sch.split(loop=l8, factors=[v37, v38, v39, v40], preserve_unit_iters=True)
v45, v46, v47, v48 = sch.sample_perfect_tile(loop=l9, n=4, max_innermost_factor=64, decision=[2, 1, 8, 2])
l49, l50, l51, l52 = sch.split(loop=l9, factors=[v45, v46, v47, v48], preserve_unit_iters=True)
v53, v54 = sch.sample_perfect_tile(loop=l10, n=2, max_innermost_factor=64, decision=[4, 32])
l55, l56 = sch.split(loop=l10, factors=[v53, v54], preserve_unit_iters=True)
v57, v58 = sch.sample_perfect_tile(loop=l11, n=2, max_innermost_factor=64, decision=[3, 1])
l59, l60 = sch.split(loop=l11, factors=[v57, v58], preserve_unit_iters=True)
v61, v62 = sch.sample_perfect_tile(loop=l12, n=2, max_innermost_factor=64, decision=[3, 1])
l63, l64 = sch.split(loop=l12, factors=[v61, v62], preserve_unit_iters=True)
sch.reorder(l17, l25, l33, l41, l49, l18, l26, l34, l42, l50, l55, l59, l63, l19, l27, l35, l43, l51, l56, l60, l64, l20, l28, l36, l44, l52)
sch.annotate(block_or_loop=b4, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b4, ann_key="meta_schedule.vectorize", ann_val=64)
v65 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=0)
sch.annotate(block_or_loop=b4, ann_key="meta_schedule.unroll_explicit", ann_val=v65)
l66 = sch.sample_compute_location(block=b0, decision=1)
sch.compute_at(block=b0, loop=l66, preserve_unit_loops=True, index=-1)
2024-04-28 20:35:16 [INFO] [task_scheduler.cc:170] Design space #1:
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(1), T.int64(28), T.int64(28), T.int64(128)), "float32"), p1: T.Buffer((T.int64(4), T.int64(1), T.int64(3), T.int64(3), T.int64(128), T.int64(32)), "float32"), p2: T.Buffer((T.int64(1), T.int64(4), T.int64(1), T.int64(1), T.int64(32)), "float32"), p3: T.Buffer((T.int64(1), T.int64(4), T.int64(28), T.int64(28), T.int64(32)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(4), T.int64(28), T.int64(28), T.int64(32)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        with T.block("root"):
            T.reads()
            T.writes()
            T.block_attr({"meta_schedule.parallel": 768, "meta_schedule.unroll_explicit": 16, "meta_schedule.vectorize": 64})
            data_pad = T.alloc_buffer((T.int64(1), T.int64(1), T.int64(30), T.int64(30), T.int64(128)))
            conv2d_NCHWc = T.alloc_buffer((T.int64(1), T.int64(4), T.int64(28), T.int64(28), T.int64(32)))
            for n_0, oc_chunk_0 in T.grid(T.int64(1), T.int64(4)):
                for ax0, ax1, ax2, ax3, ax4 in T.grid(T.int64(1), T.int64(1), T.int64(30), T.int64(30), T.int64(128)):
                    with T.block("data_pad"):
                        v_i0, v_i1, v_i2, v_i3, v_i4 = T.axis.remap("SSSSS", [ax0, ax1, ax2, ax3, ax4])
                        T.reads(p0[v_i0, v_i1, v_i2 - T.int64(1), v_i3 - T.int64(1), v_i4])
                        T.writes(data_pad[v_i0, v_i1, v_i2, v_i3, v_i4])
                        data_pad[v_i0, v_i1, v_i2, v_i3, v_i4] = T.if_then_else(T.int64(1) <= v_i2 and v_i2 < T.int64(29) and T.int64(1) <= v_i3 and v_i3 < T.int64(29), p0[v_i0, v_i1, v_i2 - T.int64(1), v_i3 - T.int64(1), v_i4], T.float32(0))
                for oh_0, ow_0, oc_block_0, n_1, oc_chunk_1, oh_1, ow_1, oc_block_1 in T.grid(T.int64(2), T.int64(1), T.int64(2), T.int64(1), T.int64(1), T.int64(2), T.int64(4), T.int64(1)):
                    for ic_0, kh_0, kw_0, n_2, oc_chunk_2, oh_2, ow_2, oc_block_2, ic_1, kh_1, kw_1, n_3, oc_chunk_3, oh_3, ow_3, oc_block_3 in T.grid(T.int64(4), T.int64(3), T.int64(3), T.int64(1), T.int64(1), T.int64(7), T.int64(1), T.int64(8), T.int64(32), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(7), T.int64(2)):
                        with T.block("conv2d_NCHWc"):
                            v_n = T.axis.spatial(T.int64(1), n_0 + n_1 + n_2 + n_3)
                            v_oc_chunk = T.axis.spatial(T.int64(4), oc_chunk_0 + oc_chunk_1 + oc_chunk_2 + oc_chunk_3)
                            v_oh = T.axis.spatial(T.int64(28), oh_0 * T.int64(14) + oh_1 * T.int64(7) + oh_2 + oh_3)
                            v_ow = T.axis.spatial(T.int64(28), ow_0 * T.int64(28) + ow_1 * T.int64(7) + ow_2 * T.int64(7) + ow_3)
                            v_oc_block = T.axis.spatial(T.int64(32), oc_block_0 * T.int64(16) + oc_block_1 * T.int64(16) + oc_block_2 * T.int64(2) + oc_block_3)
                            v_ic = T.axis.reduce(T.int64(128), ic_0 * T.int64(32) + ic_1)
                            v_kh = T.axis.reduce(T.int64(3), kh_0 + kh_1)
                            v_kw = T.axis.reduce(T.int64(3), kw_0 + kw_1)
                            T.reads(data_pad[v_n, v_ic // T.int64(128), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(128)], p1[v_oc_chunk, v_ic // T.int64(128), v_kh, v_kw, v_ic % T.int64(128), v_oc_block])
                            T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                            T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                            with T.init():
                                conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = T.float32(0)
                            conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] + data_pad[v_n, v_ic // T.int64(128), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(128)] * p1[v_oc_chunk, v_ic // T.int64(128), v_kh, v_kw, v_ic % T.int64(128), v_oc_block]
                    for ax0, ax1, ax2, ax3, ax4 in T.grid(T.int64(1), T.int64(1), T.int64(7), T.int64(7), T.int64(16)):
                        with T.block("T_relu"):
                            v_ax0 = T.axis.spatial(T.int64(1), ax0)
                            v_ax1 = T.axis.spatial(T.int64(4), oc_chunk_0 + ax1)
                            v_ax2 = T.axis.spatial(T.int64(28), oh_0 * T.int64(14) + oh_1 * T.int64(7) + ax2)
                            v_ax3 = T.axis.spatial(T.int64(28), ow_1 * T.int64(7) + ax3)
                            v_ax4 = T.axis.spatial(T.int64(32), oc_block_0 * T.int64(16) + ax4)
                            T.reads(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4], p3[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                            T.writes(T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                            T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.max(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] + p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4] + p3[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], T.float32(0))
b0 = sch.get_block(name="data_pad", func_name="main")
b1 = sch.get_block(name="conv2d_NCHWc", func_name="main")
b2 = sch.get_block(name="T_add", func_name="main")
b3 = sch.get_block(name="T_add_1", func_name="main")
b4 = sch.get_block(name="root", func_name="main")
sch.compute_inline(block=b3)
sch.compute_inline(block=b2)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSRSRS")
l5, l6, l7, l8, l9, l10, l11, l12 = sch.get_loops(block=b1)
v13, v14, v15, v16 = sch.sample_perfect_tile(loop=l5, n=4, max_innermost_factor=64, decision=[1, 1, 1, 1])
l17, l18, l19, l20 = sch.split(loop=l5, factors=[v13, v14, v15, v16], preserve_unit_iters=True)
v21, v22, v23, v24 = sch.sample_perfect_tile(loop=l6, n=4, max_innermost_factor=64, decision=[4, 1, 1, 1])
l25, l26, l27, l28 = sch.split(loop=l6, factors=[v21, v22, v23, v24], preserve_unit_iters=True)
v29, v30, v31, v32 = sch.sample_perfect_tile(loop=l7, n=4, max_innermost_factor=64, decision=[2, 2, 7, 1])
l33, l34, l35, l36 = sch.split(loop=l7, factors=[v29, v30, v31, v32], preserve_unit_iters=True)
v37, v38, v39, v40 = sch.sample_perfect_tile(loop=l8, n=4, max_innermost_factor=64, decision=[1, 4, 1, 7])
l41, l42, l43, l44 = sch.split(loop=l8, factors=[v37, v38, v39, v40], preserve_unit_iters=True)
v45, v46, v47, v48 = sch.sample_perfect_tile(loop=l9, n=4, max_innermost_factor=64, decision=[2, 1, 8, 2])
l49, l50, l51, l52 = sch.split(loop=l9, factors=[v45, v46, v47, v48], preserve_unit_iters=True)
v53, v54 = sch.sample_perfect_tile(loop=l10, n=2, max_innermost_factor=64, decision=[4, 32])
l55, l56 = sch.split(loop=l10, factors=[v53, v54], preserve_unit_iters=True)
v57, v58 = sch.sample_perfect_tile(loop=l11, n=2, max_innermost_factor=64, decision=[3, 1])
l59, l60 = sch.split(loop=l11, factors=[v57, v58], preserve_unit_iters=True)
v61, v62 = sch.sample_perfect_tile(loop=l12, n=2, max_innermost_factor=64, decision=[3, 1])
l63, l64 = sch.split(loop=l12, factors=[v61, v62], preserve_unit_iters=True)
sch.reorder(l17, l25, l33, l41, l49, l18, l26, l34, l42, l50, l55, l59, l63, l19, l27, l35, l43, l51, l56, l60, l64, l20, l28, l36, l44, l52)
b65, = sch.get_consumers(block=b1)
sch.reverse_compute_at(block=b65, loop=l50, preserve_unit_loops=True, index=-1)
sch.annotate(block_or_loop=b4, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b4, ann_key="meta_schedule.vectorize", ann_val=64)
v66 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=1)
sch.annotate(block_or_loop=b4, ann_key="meta_schedule.unroll_explicit", ann_val=v66)
l67 = sch.sample_compute_location(block=b0, decision=1)
sch.compute_at(block=b0, loop=l67, preserve_unit_loops=True, index=-1)
2024-04-28 20:35:16 [INFO] [task_scheduler.cc:170] Design space #2:
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(1), T.int64(28), T.int64(28), T.int64(128)), "float32"), p1: T.Buffer((T.int64(4), T.int64(1), T.int64(3), T.int64(3), T.int64(128), T.int64(32)), "float32"), p2: T.Buffer((T.int64(1), T.int64(4), T.int64(1), T.int64(1), T.int64(32)), "float32"), p3: T.Buffer((T.int64(1), T.int64(4), T.int64(28), T.int64(28), T.int64(32)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(4), T.int64(28), T.int64(28), T.int64(32)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        with T.block("root"):
            T.reads()
            T.writes()
            T.block_attr({"meta_schedule.parallel": 768, "meta_schedule.unroll_explicit": 0, "meta_schedule.vectorize": 64})
            data_pad = T.alloc_buffer((T.int64(1), T.int64(1), T.int64(30), T.int64(30), T.int64(128)))
            conv2d_NCHWc = T.alloc_buffer((T.int64(1), T.int64(4), T.int64(28), T.int64(28), T.int64(32)))
            for n_0, oc_chunk_0, oh_0, ow_0, oc_block_0 in T.grid(T.int64(1), T.int64(4), T.int64(2), T.int64(1), T.int64(2)):
                for ax0, ax1, ax2, ax3, ax4 in T.grid(T.int64(1), T.int64(1), T.int64(16), T.int64(30), T.int64(128)):
                    with T.block("data_pad"):
                        v_i0, v_i1 = T.axis.remap("SS", [ax0, ax1])
                        v_i2 = T.axis.spatial(T.int64(30), oh_0 * T.int64(14) + ax2)
                        v_i3, v_i4 = T.axis.remap("SS", [ax3, ax4])
                        T.reads(p0[v_i0, v_i1, v_i2 - T.int64(1), v_i3 - T.int64(1), v_i4])
                        T.writes(data_pad[v_i0, v_i1, v_i2, v_i3, v_i4])
                        data_pad[v_i0, v_i1, v_i2, v_i3, v_i4] = T.if_then_else(T.int64(1) <= v_i2 and v_i2 < T.int64(29) and T.int64(1) <= v_i3 and v_i3 < T.int64(29), p0[v_i0, v_i1, v_i2 - T.int64(1), v_i3 - T.int64(1), v_i4], T.float32(0))
                for n_1, oc_chunk_1, oh_1, ow_1, oc_block_1, ic_0, kh_0, kw_0, n_2, oc_chunk_2, oh_2, ow_2, oc_block_2, ic_1, kh_1, kw_1, n_3, oc_chunk_3, oh_3, ow_3, oc_block_3 in T.grid(T.int64(1), T.int64(1), T.int64(2), T.int64(4), T.int64(1), T.int64(4), T.int64(3), T.int64(3), T.int64(1), T.int64(1), T.int64(7), T.int64(1), T.int64(8), T.int64(32), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(7), T.int64(2)):
                    with T.block("conv2d_NCHWc"):
                        v_n = T.axis.spatial(T.int64(1), n_0 + n_1 + n_2 + n_3)
                        v_oc_chunk = T.axis.spatial(T.int64(4), oc_chunk_0 + oc_chunk_1 + oc_chunk_2 + oc_chunk_3)
                        v_oh = T.axis.spatial(T.int64(28), oh_0 * T.int64(14) + oh_1 * T.int64(7) + oh_2 + oh_3)
                        v_ow = T.axis.spatial(T.int64(28), ow_0 * T.int64(28) + ow_1 * T.int64(7) + ow_2 * T.int64(7) + ow_3)
                        v_oc_block = T.axis.spatial(T.int64(32), oc_block_0 * T.int64(16) + oc_block_1 * T.int64(16) + oc_block_2 * T.int64(2) + oc_block_3)
                        v_ic = T.axis.reduce(T.int64(128), ic_0 * T.int64(32) + ic_1)
                        v_kh = T.axis.reduce(T.int64(3), kh_0 + kh_1)
                        v_kw = T.axis.reduce(T.int64(3), kw_0 + kw_1)
                        T.reads(data_pad[v_n, v_ic // T.int64(128), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(128)], p1[v_oc_chunk, v_ic // T.int64(128), v_kh, v_kw, v_ic % T.int64(128), v_oc_block])
                        T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                        T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                        with T.init():
                            conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = T.float32(0)
                        conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] + data_pad[v_n, v_ic // T.int64(128), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(128)] * p1[v_oc_chunk, v_ic // T.int64(128), v_kh, v_kw, v_ic % T.int64(128), v_oc_block]
                for ax0, ax1, ax2, ax3, ax4 in T.grid(T.int64(1), T.int64(1), T.int64(14), T.int64(28), T.int64(16)):
                    with T.block("T_relu"):
                        v_ax0 = T.axis.spatial(T.int64(1), ax0)
                        v_ax1 = T.axis.spatial(T.int64(4), oc_chunk_0 + ax1)
                        v_ax2 = T.axis.spatial(T.int64(28), oh_0 * T.int64(14) + ax2)
                        v_ax3 = T.axis.spatial(T.int64(28), ax3)
                        v_ax4 = T.axis.spatial(T.int64(32), oc_block_0 * T.int64(16) + ax4)
                        T.reads(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4], p3[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                        T.writes(T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                        T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.max(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] + p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4] + p3[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], T.float32(0))
b0 = sch.get_block(name="data_pad", func_name="main")
b1 = sch.get_block(name="conv2d_NCHWc", func_name="main")
b2 = sch.get_block(name="T_add", func_name="main")
b3 = sch.get_block(name="T_add_1", func_name="main")
b4 = sch.get_block(name="root", func_name="main")
sch.compute_inline(block=b3)
sch.compute_inline(block=b2)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSRSRS")
l5, l6, l7, l8, l9, l10, l11, l12 = sch.get_loops(block=b1)
v13, v14, v15, v16 = sch.sample_perfect_tile(loop=l5, n=4, max_innermost_factor=64, decision=[1, 1, 1, 1])
l17, l18, l19, l20 = sch.split(loop=l5, factors=[v13, v14, v15, v16], preserve_unit_iters=True)
v21, v22, v23, v24 = sch.sample_perfect_tile(loop=l6, n=4, max_innermost_factor=64, decision=[4, 1, 1, 1])
l25, l26, l27, l28 = sch.split(loop=l6, factors=[v21, v22, v23, v24], preserve_unit_iters=True)
v29, v30, v31, v32 = sch.sample_perfect_tile(loop=l7, n=4, max_innermost_factor=64, decision=[2, 2, 7, 1])
l33, l34, l35, l36 = sch.split(loop=l7, factors=[v29, v30, v31, v32], preserve_unit_iters=True)
v37, v38, v39, v40 = sch.sample_perfect_tile(loop=l8, n=4, max_innermost_factor=64, decision=[1, 4, 1, 7])
l41, l42, l43, l44 = sch.split(loop=l8, factors=[v37, v38, v39, v40], preserve_unit_iters=True)
v45, v46, v47, v48 = sch.sample_perfect_tile(loop=l9, n=4, max_innermost_factor=64, decision=[2, 1, 8, 2])
l49, l50, l51, l52 = sch.split(loop=l9, factors=[v45, v46, v47, v48], preserve_unit_iters=True)
v53, v54 = sch.sample_perfect_tile(loop=l10, n=2, max_innermost_factor=64, decision=[4, 32])
l55, l56 = sch.split(loop=l10, factors=[v53, v54], preserve_unit_iters=True)
v57, v58 = sch.sample_perfect_tile(loop=l11, n=2, max_innermost_factor=64, decision=[3, 1])
l59, l60 = sch.split(loop=l11, factors=[v57, v58], preserve_unit_iters=True)
v61, v62 = sch.sample_perfect_tile(loop=l12, n=2, max_innermost_factor=64, decision=[3, 1])
l63, l64 = sch.split(loop=l12, factors=[v61, v62], preserve_unit_iters=True)
sch.reorder(l17, l25, l33, l41, l49, l18, l26, l34, l42, l50, l55, l59, l63, l19, l27, l35, l43, l51, l56, l60, l64, l20, l28, l36, l44, l52)
b65, = sch.get_consumers(block=b1)
sch.reverse_compute_at(block=b65, loop=l49, preserve_unit_loops=True, index=-1)
sch.annotate(block_or_loop=b4, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b4, ann_key="meta_schedule.vectorize", ann_val=64)
v66 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=0)
sch.annotate(block_or_loop=b4, ann_key="meta_schedule.unroll_explicit", ann_val=v66)
l67 = sch.sample_compute_location(block=b0, decision=4)
sch.compute_at(block=b0, loop=l67, preserve_unit_loops=True, index=-1)
2024-04-28 20:52:52 [INFO] [evolutionary_search.cc:713] Generating candidates......
2024-04-28 20:52:52 [INFO] [evolutionary_search.cc:715] Picked top 0 candidate(s) from database
2024-04-28 20:52:58 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x3858de8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x3c39958)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0xa2a8408)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x3f4f298)]: 0 failure(s)
2024-04-28 20:52:58 [INFO] [evolutionary_search.cc:723] Sampled 512 candidate(s)
2024-04-28 20:53:04 [INFO] [evolutionary_search.cc:621] Evolve iter #0 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x3858de8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x3c39958)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0xa2a8408)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x3f4f298)]: 0 failure(s)
2024-04-28 20:53:10 [INFO] [evolutionary_search.cc:621] Evolve iter #1 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x3858de8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x3c39958)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0xa2a8408)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x3f4f298)]: 0 failure(s)
2024-04-28 20:53:16 [INFO] [evolutionary_search.cc:621] Evolve iter #2 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x3858de8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x3c39958)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0xa2a8408)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x3f4f298)]: 0 failure(s)
2024-04-28 20:53:23 [INFO] [evolutionary_search.cc:621] Evolve iter #3 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x3858de8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x3c39958)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0xa2a8408)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x3f4f298)]: 0 failure(s)
2024-04-28 20:53:24 [INFO] [evolutionary_search.cc:649] Scores of the best 64 candidates:
[1 : 16]:	0.9982  0.9977  0.9965  0.9955  0.9955  0.9953  0.9952  0.9950  0.9945  0.9943  0.9935  0.9928  0.9928  0.9927  0.9926  0.9925
[17 : 32]:	0.9917  0.9905  0.9904  0.9904  0.9886  0.9881  0.9879  0.9875  0.9875  0.9868  0.9866  0.9860  0.9855  0.9855  0.9852  0.9852
[33 : 48]:	0.9845  0.9837  0.9834  0.9833  0.9832  0.9831  0.9830  0.9829  0.9829  0.9828  0.9823  0.9809  0.9794  0.9788  0.9780  0.9778
[49 : 64]:	0.9769  0.9768  0.9767  0.9765  0.9765  0.9758  0.9757  0.9750  0.9740  0.9740  0.9735  0.9728  0.9722  0.9722  0.9721  0.9714
2024-04-28 20:53:24 [INFO] [evolutionary_search.cc:727] Got 64 candidate(s) with evolutionary search
2024-04-28 20:53:24 [INFO] [evolutionary_search.cc:730] Sending 64 candidates(s) for measurement
2024-04-28 21:12:28 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_1] Trial #1: GFLOPs: 9.5575. Time: 24222.9662 us. Best GFLOPs: 9.5575
2024-04-28 21:12:28 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_1] Trial #2: GFLOPs: 62.3921. Time: 3710.5961 us. Best GFLOPs: 62.3921
2024-04-28 21:12:28 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_1] Trial #3: GFLOPs: 63.3177. Time: 3656.3591 us. Best GFLOPs: 63.3177
2024-04-28 21:12:28 [INFO] [task_scheduler.cc:121] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_1] Trial #4: Error in building:
LocalBuilder: Timeout, killed after 30.0 seconds
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(1), T.int64(28), T.int64(28), T.int64(128)), "float32"), p1: T.Buffer((T.int64(4), T.int64(1), T.int64(3), T.int64(3), T.int64(128), T.int64(32)), "float32"), p2: T.Buffer((T.int64(1), T.int64(4), T.int64(1), T.int64(1), T.int64(32)), "float32"), p3: T.Buffer((T.int64(1), T.int64(4), T.int64(28), T.int64(28), T.int64(32)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(4), T.int64(28), T.int64(28), T.int64(32)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        data_pad = T.alloc_buffer((T.int64(1), T.int64(1), T.int64(30), T.int64(30), T.int64(128)))
        conv2d_NCHWc = T.alloc_buffer((T.int64(1), T.int64(4), T.int64(28), T.int64(28), T.int64(32)))
        for n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_fused_fused in T.parallel(T.int64(28), annotations={"pragma_auto_unroll_max_step": 512, "pragma_unroll_explicit": 1}):
            for ax0, ax1, ax2, ax3, ax4 in T.grid(T.int64(1), T.int64(1), T.int64(16), T.int64(6), T.int64(128)):
                with T.block("data_pad"):
                    v_i0, v_i1 = T.axis.remap("SS", [ax0, ax1])
                    v_i2 = T.axis.spatial(T.int64(30), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_fused_fused // T.int64(14) * T.int64(14) + ax2)
                    v_i3 = T.axis.spatial(T.int64(30), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_fused_fused % T.int64(14) // T.int64(2) * T.int64(4) + ax3)
                    v_i4 = T.axis.spatial(T.int64(128), ax4)
                    T.reads(p0[v_i0, v_i1, v_i2 - T.int64(1), v_i3 - T.int64(1), v_i4])
                    T.writes(data_pad[v_i0, v_i1, v_i2, v_i3, v_i4])
                    data_pad[v_i0, v_i1, v_i2, v_i3, v_i4] = T.if_then_else(T.int64(1) <= v_i2 and v_i2 < T.int64(29) and T.int64(1) <= v_i3 and v_i3 < T.int64(29), p0[v_i0, v_i1, v_i2 - T.int64(1), v_i3 - T.int64(1), v_i4], T.float32(0))
            for n_1, oc_chunk_1, oh_1, ow_1, oc_block_1 in T.grid(T.int64(1), T.int64(4), T.int64(2), T.int64(2), T.int64(4)):
                for n_2_init, oc_chunk_2_init, oh_2_init, ow_2_init, oc_block_2_init, n_3_init, oc_chunk_3_init, oh_3_init, ow_3_init, oc_block_3_init in T.grid(T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(4), T.int64(1), T.int64(1), T.int64(7), T.int64(2), T.int64(1)):
                    with T.block("conv2d_NCHWc_init"):
                        v_n = T.axis.spatial(T.int64(1), n_1 + n_2_init + n_3_init)
                        v_oc_chunk = T.axis.spatial(T.int64(4), oc_chunk_1 + oc_chunk_2_init + oc_chunk_3_init)
                        v_oh = T.axis.spatial(T.int64(28), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_fused_fused // T.int64(14) * T.int64(14) + oh_1 * T.int64(7) + oh_2_init * T.int64(7) + oh_3_init)
                        v_ow = T.axis.spatial(T.int64(28), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_fused_fused % T.int64(14) // T.int64(2) * T.int64(4) + ow_1 * T.int64(2) + ow_2_init * T.int64(2) + ow_3_init)
                        v_oc_block = T.axis.spatial(T.int64(32), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_fused_fused % T.int64(2) * T.int64(16) + oc_block_1 * T.int64(4) + oc_block_2_init + oc_block_3_init)
                        T.reads()
                        T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                        T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                        conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = T.float32(0)
                for ic_0, kh_0, kw_0, n_2, oc_chunk_2, oh_2, ow_2, oc_block_2, ic_1, kh_1, kw_1, n_3, oc_chunk_3, oh_3, ow_3, oc_block_3 in T.grid(T.int64(128), T.int64(3), T.int64(3), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(4), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(7), T.int64(2), T.int64(1)):
                    with T.block("conv2d_NCHWc_update"):
                        v_n = T.axis.spatial(T.int64(1), n_1 + n_2 + n_3)
                        v_oc_chunk = T.axis.spatial(T.int64(4), oc_chunk_1 + oc_chunk_2 + oc_chunk_3)
                        v_oh = T.axis.spatial(T.int64(28), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_fused_fused // T.int64(14) * T.int64(14) + oh_1 * T.int64(7) + oh_2 * T.int64(7) + oh_3)
                        v_ow = T.axis.spatial(T.int64(28), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_fused_fused % T.int64(14) // T.int64(2) * T.int64(4) + ow_1 * T.int64(2) + ow_2 * T.int64(2) + ow_3)
                        v_oc_block = T.axis.spatial(T.int64(32), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_fused_fused % T.int64(2) * T.int64(16) + oc_block_1 * T.int64(4) + oc_block_2 + oc_block_3)
                        v_ic = T.axis.reduce(T.int64(128), ic_0 + ic_1)
                        v_kh = T.axis.reduce(T.int64(3), kh_0 + kh_1)
                        v_kw = T.axis.reduce(T.int64(3), kw_0 + kw_1)
                        T.reads(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block], data_pad[v_n, v_ic // T.int64(128), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(128)], p1[v_oc_chunk, v_ic // T.int64(128), v_kh, v_kw, v_ic % T.int64(128), v_oc_block])
                        T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                        T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                        conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] + data_pad[v_n, v_ic // T.int64(128), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(128)] * p1[v_oc_chunk, v_ic // T.int64(128), v_kh, v_kw, v_ic % T.int64(128), v_oc_block]
            for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(4), T.int64(14), T.int64(4)):
                for ax4_fused in T.vectorized(T.int64(16)):
                    with T.block("T_relu"):
                        v_ax0, v_ax1 = T.axis.remap("SS", [ax0, ax1])
                        v_ax2 = T.axis.spatial(T.int64(28), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_fused_fused // T.int64(14) * T.int64(14) + ax2)
                        v_ax3 = T.axis.spatial(T.int64(28), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_fused_fused % T.int64(14) // T.int64(2) * T.int64(4) + ax3)
                        v_ax4 = T.axis.spatial(T.int64(32), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_fused_fused % T.int64(2) * T.int64(16) + ax4_fused)
                        T.reads(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4], p3[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                        T.writes(T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                        T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.max(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] + p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4] + p3[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], T.float32(0))
b0 = sch.get_block(name="data_pad", func_name="main")
b1 = sch.get_block(name="conv2d_NCHWc", func_name="main")
b2 = sch.get_block(name="T_add", func_name="main")
b3 = sch.get_block(name="T_add_1", func_name="main")
b4 = sch.get_block(name="root", func_name="main")
sch.compute_inline(block=b3)
sch.compute_inline(block=b2)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSRSRS")
l5, l6, l7, l8, l9, l10, l11, l12 = sch.get_loops(block=b1)
v13, v14, v15, v16 = sch.sample_perfect_tile(loop=l5, n=4, max_innermost_factor=64, decision=[1, 1, 1, 1])
l17, l18, l19, l20 = sch.split(loop=l5, factors=[v13, v14, v15, v16], preserve_unit_iters=True)
v21, v22, v23, v24 = sch.sample_perfect_tile(loop=l6, n=4, max_innermost_factor=64, decision=[1, 4, 1, 1])
l25, l26, l27, l28 = sch.split(loop=l6, factors=[v21, v22, v23, v24], preserve_unit_iters=True)
v29, v30, v31, v32 = sch.sample_perfect_tile(loop=l7, n=4, max_innermost_factor=64, decision=[2, 2, 1, 7])
l33, l34, l35, l36 = sch.split(loop=l7, factors=[v29, v30, v31, v32], preserve_unit_iters=True)
v37, v38, v39, v40 = sch.sample_perfect_tile(loop=l8, n=4, max_innermost_factor=64, decision=[7, 2, 1, 2])
l41, l42, l43, l44 = sch.split(loop=l8, factors=[v37, v38, v39, v40], preserve_unit_iters=True)
v45, v46, v47, v48 = sch.sample_perfect_tile(loop=l9, n=4, max_innermost_factor=64, decision=[2, 4, 4, 1])
l49, l50, l51, l52 = sch.split(loop=l9, factors=[v45, v46, v47, v48], preserve_unit_iters=True)
v53, v54 = sch.sample_perfect_tile(loop=l10, n=2, max_innermost_factor=64, decision=[128, 1])
l55, l56 = sch.split(loop=l10, factors=[v53, v54], preserve_unit_iters=True)
v57, v58 = sch.sample_perfect_tile(loop=l11, n=2, max_innermost_factor=64, decision=[3, 1])
l59, l60 = sch.split(loop=l11, factors=[v57, v58], preserve_unit_iters=True)
v61, v62 = sch.sample_perfect_tile(loop=l12, n=2, max_innermost_factor=64, decision=[3, 1])
l63, l64 = sch.split(loop=l12, factors=[v61, v62], preserve_unit_iters=True)
sch.reorder(l17, l25, l33, l41, l49, l18, l26, l34, l42, l50, l55, l59, l63, l19, l27, l35, l43, l51, l56, l60, l64, l20, l28, l36, l44, l52)
b65, = sch.get_consumers(block=b1)
sch.reverse_compute_at(block=b65, loop=l49, preserve_unit_loops=True, index=-1)
sch.annotate(block_or_loop=b4, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b4, ann_key="meta_schedule.vectorize", ann_val=64)
v66 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b4, ann_key="meta_schedule.unroll_explicit", ann_val=v66)
l67 = sch.sample_compute_location(block=b0, decision=4)
sch.compute_at(block=b0, loop=l67, preserve_unit_loops=True, index=-1)
sch.enter_postproc()
b68 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b68, ann_key="meta_schedule.parallel")
sch.unannotate(block_or_loop=b68, ann_key="meta_schedule.vectorize")
sch.unannotate(block_or_loop=b68, ann_key="meta_schedule.unroll_explicit")
b69, b70, b71 = sch.get_child_blocks(b68)
l72, l73, l74, l75, l76, l77, l78, l79, l80, l81 = sch.get_loops(block=b69)
l82 = sch.fuse(l72, l73, l74, l75, l76, preserve_unit_iters=True)
sch.parallel(loop=l82)
l83, l84, l85, l86, l87, l88, l89, l90, l91, l92, l93, l94, l95, l96, l97, l98, l99, l100, l101, l102, l103, l104 = sch.get_loops(block=b70)
l105 = sch.fuse(l83, preserve_unit_iters=True)
sch.parallel(loop=l105)
sch.annotate(block_or_loop=l105, ann_key="pragma_auto_unroll_max_step", ann_val=512)
sch.annotate(block_or_loop=l105, ann_key="pragma_unroll_explicit", ann_val=1)
l106, l107, l108, l109, l110, l111 = sch.get_loops(block=b71)
l112 = sch.fuse(l111, preserve_unit_iters=True)
sch.vectorize(loop=l112)
b113 = sch.get_block(name="conv2d_NCHWc", func_name="main")
l114, l115, l116, l117, l118, l119, l120, l121, l122, l123, l124, l125, l126, l127, l128, l129, l130, l131, l132, l133, l134, l135 = sch.get_loops(block=b113)
b136 = sch.decompose_reduction(block=b113, loop=l120)
2024-04-28 21:12:28 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_1] Trial #5: GFLOPs: 15.0394. Time: 15393.6526 us. Best GFLOPs: 63.3177
2024-04-28 21:12:28 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_1] Trial #6: GFLOPs: 35.9750. Time: 6435.3685 us. Best GFLOPs: 63.3177
2024-04-28 21:12:28 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_1] Trial #7: GFLOPs: 40.1659. Time: 5763.9021 us. Best GFLOPs: 63.3177
2024-04-28 21:12:28 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_1] Trial #8: GFLOPs: 5.8373. Time: 39660.8550 us. Best GFLOPs: 63.3177
2024-04-28 21:12:28 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_1] Trial #9: GFLOPs: 3.5302. Time: 65580.8123 us. Best GFLOPs: 63.3177
2024-04-28 21:12:28 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_1] Trial #10: GFLOPs: 19.0113. Time: 12177.6094 us. Best GFLOPs: 63.3177
2024-04-28 21:12:28 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_1] Trial #11: GFLOPs: 19.5179. Time: 11861.4967 us. Best GFLOPs: 63.3177
2024-04-28 21:12:28 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_1] Trial #12: GFLOPs: 22.6392. Time: 10226.1428 us. Best GFLOPs: 63.3177
2024-04-28 21:12:28 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_1] Trial #13: GFLOPs: 2.8790. Time: 80412.9397 us. Best GFLOPs: 63.3177
2024-04-28 21:12:28 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_1] Trial #14: GFLOPs: 69.1773. Time: 3346.6482 us. Best GFLOPs: 69.1773
2024-04-28 21:12:28 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_1] Trial #15: GFLOPs: 110.5316. Time: 2094.5331 us. Best GFLOPs: 110.5316
2024-04-28 21:12:28 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_1] Trial #16: GFLOPs: 60.4898. Time: 3827.2895 us. Best GFLOPs: 110.5316
2024-04-28 21:12:28 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_1] Trial #17: GFLOPs: 29.6215. Time: 7815.6682 us. Best GFLOPs: 110.5316
2024-04-28 21:12:28 [INFO] [task_scheduler.cc:121] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_1] Trial #18: Error in building:
LocalBuilder: Timeout, killed after 30.0 seconds
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(1), T.int64(28), T.int64(28), T.int64(128)), "float32"), p1: T.Buffer((T.int64(4), T.int64(1), T.int64(3), T.int64(3), T.int64(128), T.int64(32)), "float32"), p2: T.Buffer((T.int64(1), T.int64(4), T.int64(1), T.int64(1), T.int64(32)), "float32"), p3: T.Buffer((T.int64(1), T.int64(4), T.int64(28), T.int64(28), T.int64(32)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(4), T.int64(28), T.int64(28), T.int64(32)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        data_pad = T.alloc_buffer((T.int64(1), T.int64(1), T.int64(30), T.int64(30), T.int64(128)))
        conv2d_NCHWc = T.alloc_buffer((T.int64(1), T.int64(4), T.int64(28), T.int64(28), T.int64(32)))
        for n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused_fused in T.parallel(T.int64(56), annotations={"pragma_auto_unroll_max_step": 512, "pragma_unroll_explicit": 1}):
            for ax0, ax1, ax2, ax3, ax4 in T.grid(T.int64(1), T.int64(1), T.int64(30), T.int64(4), T.int64(128)):
                with T.block("data_pad"):
                    v_i0, v_i1, v_i2 = T.axis.remap("SSS", [ax0, ax1, ax2])
                    v_i3 = T.axis.spatial(T.int64(30), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused_fused % T.int64(28) // T.int64(2) * T.int64(2) + ax3)
                    v_i4 = T.axis.spatial(T.int64(128), ax4)
                    T.reads(p0[v_i0, v_i1, v_i2 - T.int64(1), v_i3 - T.int64(1), v_i4])
                    T.writes(data_pad[v_i0, v_i1, v_i2, v_i3, v_i4])
                    data_pad[v_i0, v_i1, v_i2, v_i3, v_i4] = T.if_then_else(T.int64(1) <= v_i2 and v_i2 < T.int64(29) and T.int64(1) <= v_i3 and v_i3 < T.int64(29), p0[v_i0, v_i1, v_i2 - T.int64(1), v_i3 - T.int64(1), v_i4], T.float32(0))
            for n_2_init, oc_chunk_2_init, oh_2_init, ow_2_init, oc_block_2_init, n_3_init, oc_chunk_3_init, oh_3_init, ow_3_init in T.grid(T.int64(1), T.int64(1), T.int64(2), T.int64(2), T.int64(2), T.int64(1), T.int64(2), T.int64(14), T.int64(1)):
                for oc_block_3_fused_init in T.vectorized(T.int64(8)):
                    with T.block("conv2d_NCHWc_init"):
                        v_n = T.axis.spatial(T.int64(1), n_2_init + n_3_init)
                        v_oc_chunk = T.axis.spatial(T.int64(4), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused_fused // T.int64(28) * T.int64(2) + oc_chunk_2_init * T.int64(2) + oc_chunk_3_init)
                        v_oh = T.axis.spatial(T.int64(28), oh_2_init * T.int64(14) + oh_3_init)
                        v_ow = T.axis.spatial(T.int64(28), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused_fused % T.int64(28) // T.int64(2) * T.int64(2) + ow_2_init + ow_3_init)
                        v_oc_block = T.axis.spatial(T.int64(32), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused_fused % T.int64(2) * T.int64(16) + oc_block_2_init * T.int64(8) + oc_block_3_fused_init)
                        T.reads()
                        T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                        T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                        conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = T.float32(0)
            for ic_0, kh_0, kw_0, n_2, oc_chunk_2, oh_2, ow_2, oc_block_2, ic_1, kh_1, kw_1, n_3, oc_chunk_3, oh_3, ow_3 in T.grid(T.int64(64), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(2), T.int64(2), T.int64(2), T.int64(3), T.int64(3), T.int64(1), T.int64(2), T.int64(14), T.int64(1)):
                for oc_block_3_fused in T.vectorized(T.int64(8)):
                    with T.block("conv2d_NCHWc_update"):
                        v_n = T.axis.spatial(T.int64(1), n_2 + n_3)
                        v_oc_chunk = T.axis.spatial(T.int64(4), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused_fused // T.int64(28) * T.int64(2) + oc_chunk_2 * T.int64(2) + oc_chunk_3)
                        v_oh = T.axis.spatial(T.int64(28), oh_2 * T.int64(14) + oh_3)
                        v_ow = T.axis.spatial(T.int64(28), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused_fused % T.int64(28) // T.int64(2) * T.int64(2) + ow_2 + ow_3)
                        v_oc_block = T.axis.spatial(T.int64(32), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused_fused % T.int64(2) * T.int64(16) + oc_block_2 * T.int64(8) + oc_block_3_fused)
                        v_ic = T.axis.reduce(T.int64(128), ic_0 * T.int64(2) + ic_1)
                        v_kh = T.axis.reduce(T.int64(3), kh_0 * T.int64(3) + kh_1)
                        v_kw = T.axis.reduce(T.int64(3), kw_0 * T.int64(3) + kw_1)
                        T.reads(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block], data_pad[v_n, v_ic // T.int64(128), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(128)], p1[v_oc_chunk, v_ic // T.int64(128), v_kh, v_kw, v_ic % T.int64(128), v_oc_block])
                        T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                        T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                        conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] + data_pad[v_n, v_ic // T.int64(128), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(128)] * p1[v_oc_chunk, v_ic // T.int64(128), v_kh, v_kw, v_ic % T.int64(128), v_oc_block]
        for ax0_ax1_ax2_ax3_ax4_fused_0 in T.parallel(T.int64(1568)):
            for ax0_ax1_ax2_ax3_ax4_fused_1 in T.vectorized(T.int64(64)):
                with T.block("T_relu"):
                    v_ax0 = T.axis.spatial(T.int64(1), T.int64(0))
                    v_ax1 = T.axis.spatial(T.int64(4), (ax0_ax1_ax2_ax3_ax4_fused_0 * T.int64(64) + ax0_ax1_ax2_ax3_ax4_fused_1) // T.int64(25088))
                    v_ax2 = T.axis.spatial(T.int64(28), (ax0_ax1_ax2_ax3_ax4_fused_0 * T.int64(64) + ax0_ax1_ax2_ax3_ax4_fused_1) % T.int64(25088) // T.int64(896))
                    v_ax3 = T.axis.spatial(T.int64(28), (ax0_ax1_ax2_ax3_ax4_fused_0 * T.int64(64) + ax0_ax1_ax2_ax3_ax4_fused_1) % T.int64(896) // T.int64(32))
                    v_ax4 = T.axis.spatial(T.int64(32), (ax0_ax1_ax2_ax3_ax4_fused_0 * T.int64(64) + ax0_ax1_ax2_ax3_ax4_fused_1) % T.int64(32))
                    T.reads(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4], p3[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                    T.writes(T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                    T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.max(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] + p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4] + p3[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], T.float32(0))
b0 = sch.get_block(name="data_pad", func_name="main")
b1 = sch.get_block(name="conv2d_NCHWc", func_name="main")
b2 = sch.get_block(name="T_add", func_name="main")
b3 = sch.get_block(name="T_add_1", func_name="main")
b4 = sch.get_block(name="root", func_name="main")
sch.compute_inline(block=b3)
sch.compute_inline(block=b2)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSRSRS")
l5, l6, l7, l8, l9, l10, l11, l12 = sch.get_loops(block=b1)
v13, v14, v15, v16 = sch.sample_perfect_tile(loop=l5, n=4, max_innermost_factor=64, decision=[1, 1, 1, 1])
l17, l18, l19, l20 = sch.split(loop=l5, factors=[v13, v14, v15, v16], preserve_unit_iters=True)
v21, v22, v23, v24 = sch.sample_perfect_tile(loop=l6, n=4, max_innermost_factor=64, decision=[1, 2, 1, 2])
l25, l26, l27, l28 = sch.split(loop=l6, factors=[v21, v22, v23, v24], preserve_unit_iters=True)
v29, v30, v31, v32 = sch.sample_perfect_tile(loop=l7, n=4, max_innermost_factor=64, decision=[1, 1, 2, 14])
l33, l34, l35, l36 = sch.split(loop=l7, factors=[v29, v30, v31, v32], preserve_unit_iters=True)
v37, v38, v39, v40 = sch.sample_perfect_tile(loop=l8, n=4, max_innermost_factor=64, decision=[1, 14, 2, 1])
l41, l42, l43, l44 = sch.split(loop=l8, factors=[v37, v38, v39, v40], preserve_unit_iters=True)
v45, v46, v47, v48 = sch.sample_perfect_tile(loop=l9, n=4, max_innermost_factor=64, decision=[1, 2, 2, 8])
l49, l50, l51, l52 = sch.split(loop=l9, factors=[v45, v46, v47, v48], preserve_unit_iters=True)
v53, v54 = sch.sample_perfect_tile(loop=l10, n=2, max_innermost_factor=64, decision=[64, 2])
l55, l56 = sch.split(loop=l10, factors=[v53, v54], preserve_unit_iters=True)
v57, v58 = sch.sample_perfect_tile(loop=l11, n=2, max_innermost_factor=64, decision=[1, 3])
l59, l60 = sch.split(loop=l11, factors=[v57, v58], preserve_unit_iters=True)
v61, v62 = sch.sample_perfect_tile(loop=l12, n=2, max_innermost_factor=64, decision=[1, 3])
l63, l64 = sch.split(loop=l12, factors=[v61, v62], preserve_unit_iters=True)
sch.reorder(l17, l25, l33, l41, l49, l18, l26, l34, l42, l50, l55, l59, l63, l19, l27, l35, l43, l51, l56, l60, l64, l20, l28, l36, l44, l52)
sch.annotate(block_or_loop=b4, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b4, ann_key="meta_schedule.vectorize", ann_val=64)
v65 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b4, ann_key="meta_schedule.unroll_explicit", ann_val=v65)
l66 = sch.sample_compute_location(block=b0, decision=9)
sch.compute_at(block=b0, loop=l66, preserve_unit_loops=True, index=-1)
sch.enter_postproc()
b67 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b67, ann_key="meta_schedule.parallel")
sch.unannotate(block_or_loop=b67, ann_key="meta_schedule.vectorize")
sch.unannotate(block_or_loop=b67, ann_key="meta_schedule.unroll_explicit")
b68, b69, b70 = sch.get_child_blocks(b67)
l71, l72, l73, l74, l75, l76, l77, l78, l79, l80, l81, l82, l83, l84, l85 = sch.get_loops(block=b68)
l86 = sch.fuse(l71, l72, l73, l74, l75, l76, l77, l78, l79, l80, preserve_unit_iters=True)
sch.parallel(loop=l86)
l87, l88, l89, l90, l91, l92, l93, l94, l95, l96, l97, l98, l99, l100, l101, l102, l103 = sch.get_loops(block=b69)
l104 = sch.fuse(l87, preserve_unit_iters=True)
sch.parallel(loop=l104)
l105 = sch.fuse(l103, preserve_unit_iters=True)
sch.vectorize(loop=l105)
sch.annotate(block_or_loop=l104, ann_key="pragma_auto_unroll_max_step", ann_val=512)
sch.annotate(block_or_loop=l104, ann_key="pragma_unroll_explicit", ann_val=1)
l106, l107, l108, l109, l110 = sch.get_loops(block=b70)
l111 = sch.fuse(l106, l107, l108, l109, l110, preserve_unit_iters=True)
l112, l113 = sch.split(loop=l111, factors=[None, 64], preserve_unit_iters=True)
sch.parallel(loop=l112)
sch.vectorize(loop=l113)
b114 = sch.get_block(name="conv2d_NCHWc", func_name="main")
l115, l116, l117, l118, l119, l120, l121, l122, l123, l124, l125, l126, l127, l128, l129, l130, l131 = sch.get_loops(block=b114)
b132 = sch.decompose_reduction(block=b114, loop=l116)
2024-04-28 21:12:28 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_1] Trial #19: GFLOPs: 53.4212. Time: 4333.7096 us. Best GFLOPs: 110.5316
2024-04-28 21:12:28 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_1] Trial #20: GFLOPs: 85.7598. Time: 2699.5412 us. Best GFLOPs: 110.5316
2024-04-28 21:12:28 [INFO] [task_scheduler.cc:121] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_1] Trial #21: Error in building:
LocalBuilder: Timeout, killed after 30.0 seconds
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(1), T.int64(28), T.int64(28), T.int64(128)), "float32"), p1: T.Buffer((T.int64(4), T.int64(1), T.int64(3), T.int64(3), T.int64(128), T.int64(32)), "float32"), p2: T.Buffer((T.int64(1), T.int64(4), T.int64(1), T.int64(1), T.int64(32)), "float32"), p3: T.Buffer((T.int64(1), T.int64(4), T.int64(28), T.int64(28), T.int64(32)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(4), T.int64(28), T.int64(28), T.int64(32)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        data_pad = T.alloc_buffer((T.int64(1), T.int64(1), T.int64(30), T.int64(30), T.int64(128)))
        conv2d_NCHWc = T.alloc_buffer((T.int64(1), T.int64(4), T.int64(28), T.int64(28), T.int64(32)))
        for n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused_fused in T.parallel(T.int64(256), annotations={"pragma_auto_unroll_max_step": 512, "pragma_unroll_explicit": 1}):
            for n_2_init, oc_chunk_2_init, oh_2_init, ow_2_init, oc_block_2_init, n_3_init, oc_chunk_3_init, oh_3_init, ow_3_init, oc_block_3_init in T.grid(T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(2), T.int64(1), T.int64(1), T.int64(14), T.int64(7), T.int64(1)):
                with T.block("conv2d_NCHWc_init"):
                    v_n = T.axis.spatial(T.int64(1), n_2_init + n_3_init)
                    v_oc_chunk = T.axis.spatial(T.int64(4), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused_fused // T.int64(128) * T.int64(2) + n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused_fused % T.int64(64) // T.int64(32) + oc_chunk_2_init + oc_chunk_3_init)
                    v_oh = T.axis.spatial(T.int64(28), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused_fused % T.int64(128) // T.int64(64) * T.int64(14) + oh_2_init * T.int64(14) + oh_3_init)
                    v_ow = T.axis.spatial(T.int64(28), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused_fused % T.int64(32) // T.int64(16) * T.int64(14) + ow_2_init * T.int64(7) + ow_3_init)
                    v_oc_block = T.axis.spatial(T.int64(32), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused_fused % T.int64(16) * T.int64(2) + oc_block_2_init + oc_block_3_init)
                    T.reads()
                    T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                    T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                    conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = T.float32(0)
            for ic_0, kh_0 in T.grid(T.int64(2), T.int64(3)):
                for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(1), T.int64(14), T.int64(16)):
                    for ax4_fused in T.vectorized(T.int64(64)):
                        with T.block("data_pad"):
                            v_i0, v_i1 = T.axis.remap("SS", [ax0, ax1])
                            v_i2 = T.axis.spatial(T.int64(30), kh_0 + n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused_fused % T.int64(128) // T.int64(64) * T.int64(14) + ax2)
                            v_i3 = T.axis.spatial(T.int64(30), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused_fused % T.int64(32) // T.int64(16) * T.int64(14) + ax3)
                            v_i4 = T.axis.spatial(T.int64(128), ic_0 * T.int64(64) + ax4_fused)
                            T.reads(p0[v_i0, v_i1, v_i2 - T.int64(1), v_i3 - T.int64(1), v_i4])
                            T.writes(data_pad[v_i0, v_i1, v_i2, v_i3, v_i4])
                            data_pad[v_i0, v_i1, v_i2, v_i3, v_i4] = T.if_then_else(T.int64(1) <= v_i2 and v_i2 < T.int64(29) and T.int64(1) <= v_i3 and v_i3 < T.int64(29), p0[v_i0, v_i1, v_i2 - T.int64(1), v_i3 - T.int64(1), v_i4], T.float32(0))
                for kw_0, n_2, oc_chunk_2, oh_2, ow_2, oc_block_2, ic_1, kh_1, kw_1, n_3, oc_chunk_3, oh_3, ow_3, oc_block_3 in T.grid(T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(2), T.int64(64), T.int64(1), T.int64(3), T.int64(1), T.int64(1), T.int64(14), T.int64(7), T.int64(1)):
                    with T.block("conv2d_NCHWc_update"):
                        v_n = T.axis.spatial(T.int64(1), n_2 + n_3)
                        v_oc_chunk = T.axis.spatial(T.int64(4), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused_fused // T.int64(128) * T.int64(2) + n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused_fused % T.int64(64) // T.int64(32) + oc_chunk_2 + oc_chunk_3)
                        v_oh = T.axis.spatial(T.int64(28), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused_fused % T.int64(128) // T.int64(64) * T.int64(14) + oh_2 * T.int64(14) + oh_3)
                        v_ow = T.axis.spatial(T.int64(28), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused_fused % T.int64(32) // T.int64(16) * T.int64(14) + ow_2 * T.int64(7) + ow_3)
                        v_oc_block = T.axis.spatial(T.int64(32), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused_fused % T.int64(16) * T.int64(2) + oc_block_2 + oc_block_3)
                        v_ic = T.axis.reduce(T.int64(128), ic_0 * T.int64(64) + ic_1)
                        v_kh = T.axis.reduce(T.int64(3), kh_0 + kh_1)
                        v_kw = T.axis.reduce(T.int64(3), kw_0 * T.int64(3) + kw_1)
                        T.reads(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block], data_pad[v_n, v_ic // T.int64(128), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(128)], p1[v_oc_chunk, v_ic // T.int64(128), v_kh, v_kw, v_ic % T.int64(128), v_oc_block])
                        T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                        T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                        conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] + data_pad[v_n, v_ic // T.int64(128), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(128)] * p1[v_oc_chunk, v_ic // T.int64(128), v_kh, v_kw, v_ic % T.int64(128), v_oc_block]
        for ax0_ax1_ax2_ax3_ax4_fused_0 in T.parallel(T.int64(1568)):
            for ax0_ax1_ax2_ax3_ax4_fused_1 in T.vectorized(T.int64(64)):
                with T.block("T_relu"):
                    v_ax0 = T.axis.spatial(T.int64(1), T.int64(0))
                    v_ax1 = T.axis.spatial(T.int64(4), (ax0_ax1_ax2_ax3_ax4_fused_0 * T.int64(64) + ax0_ax1_ax2_ax3_ax4_fused_1) // T.int64(25088))
                    v_ax2 = T.axis.spatial(T.int64(28), (ax0_ax1_ax2_ax3_ax4_fused_0 * T.int64(64) + ax0_ax1_ax2_ax3_ax4_fused_1) % T.int64(25088) // T.int64(896))
                    v_ax3 = T.axis.spatial(T.int64(28), (ax0_ax1_ax2_ax3_ax4_fused_0 * T.int64(64) + ax0_ax1_ax2_ax3_ax4_fused_1) % T.int64(896) // T.int64(32))
                    v_ax4 = T.axis.spatial(T.int64(32), (ax0_ax1_ax2_ax3_ax4_fused_0 * T.int64(64) + ax0_ax1_ax2_ax3_ax4_fused_1) % T.int64(32))
                    T.reads(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4], p3[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                    T.writes(T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                    T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.max(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] + p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4] + p3[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], T.float32(0))
b0 = sch.get_block(name="data_pad", func_name="main")
b1 = sch.get_block(name="conv2d_NCHWc", func_name="main")
b2 = sch.get_block(name="T_add", func_name="main")
b3 = sch.get_block(name="T_add_1", func_name="main")
b4 = sch.get_block(name="root", func_name="main")
sch.compute_inline(block=b3)
sch.compute_inline(block=b2)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSRSRS")
l5, l6, l7, l8, l9, l10, l11, l12 = sch.get_loops(block=b1)
v13, v14, v15, v16 = sch.sample_perfect_tile(loop=l5, n=4, max_innermost_factor=64, decision=[1, 1, 1, 1])
l17, l18, l19, l20 = sch.split(loop=l5, factors=[v13, v14, v15, v16], preserve_unit_iters=True)
v21, v22, v23, v24 = sch.sample_perfect_tile(loop=l6, n=4, max_innermost_factor=64, decision=[2, 2, 1, 1])
l25, l26, l27, l28 = sch.split(loop=l6, factors=[v21, v22, v23, v24], preserve_unit_iters=True)
v29, v30, v31, v32 = sch.sample_perfect_tile(loop=l7, n=4, max_innermost_factor=64, decision=[2, 1, 1, 14])
l33, l34, l35, l36 = sch.split(loop=l7, factors=[v29, v30, v31, v32], preserve_unit_iters=True)
v37, v38, v39, v40 = sch.sample_perfect_tile(loop=l8, n=4, max_innermost_factor=64, decision=[1, 2, 2, 7])
l41, l42, l43, l44 = sch.split(loop=l8, factors=[v37, v38, v39, v40], preserve_unit_iters=True)
v45, v46, v47, v48 = sch.sample_perfect_tile(loop=l9, n=4, max_innermost_factor=64, decision=[1, 16, 2, 1])
l49, l50, l51, l52 = sch.split(loop=l9, factors=[v45, v46, v47, v48], preserve_unit_iters=True)
v53, v54 = sch.sample_perfect_tile(loop=l10, n=2, max_innermost_factor=64, decision=[2, 64])
l55, l56 = sch.split(loop=l10, factors=[v53, v54], preserve_unit_iters=True)
v57, v58 = sch.sample_perfect_tile(loop=l11, n=2, max_innermost_factor=64, decision=[3, 1])
l59, l60 = sch.split(loop=l11, factors=[v57, v58], preserve_unit_iters=True)
v61, v62 = sch.sample_perfect_tile(loop=l12, n=2, max_innermost_factor=64, decision=[1, 3])
l63, l64 = sch.split(loop=l12, factors=[v61, v62], preserve_unit_iters=True)
sch.reorder(l17, l25, l33, l41, l49, l18, l26, l34, l42, l50, l55, l59, l63, l19, l27, l35, l43, l51, l56, l60, l64, l20, l28, l36, l44, l52)
sch.annotate(block_or_loop=b4, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b4, ann_key="meta_schedule.vectorize", ann_val=64)
v65 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b4, ann_key="meta_schedule.unroll_explicit", ann_val=v65)
l66 = sch.sample_compute_location(block=b0, decision=11)
sch.compute_at(block=b0, loop=l66, preserve_unit_loops=True, index=-1)
sch.enter_postproc()
b67 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b67, ann_key="meta_schedule.parallel")
sch.unannotate(block_or_loop=b67, ann_key="meta_schedule.vectorize")
sch.unannotate(block_or_loop=b67, ann_key="meta_schedule.unroll_explicit")
b68, b69, b70 = sch.get_child_blocks(b67)
l71, l72, l73, l74, l75, l76, l77, l78, l79, l80, l81, l82, l83, l84, l85, l86, l87 = sch.get_loops(block=b68)
l88 = sch.fuse(l71, l72, l73, l74, l75, l76, l77, l78, l79, l80, preserve_unit_iters=True)
sch.parallel(loop=l88)
l89 = sch.fuse(l87, preserve_unit_iters=True)
sch.vectorize(loop=l89)
l90, l91, l92, l93, l94, l95, l96, l97, l98, l99, l100, l101, l102, l103, l104, l105, l106 = sch.get_loops(block=b69)
l107 = sch.fuse(l90, preserve_unit_iters=True)
sch.parallel(loop=l107)
sch.annotate(block_or_loop=l107, ann_key="pragma_auto_unroll_max_step", ann_val=512)
sch.annotate(block_or_loop=l107, ann_key="pragma_unroll_explicit", ann_val=1)
l108, l109, l110, l111, l112 = sch.get_loops(block=b70)
l113 = sch.fuse(l108, l109, l110, l111, l112, preserve_unit_iters=True)
l114, l115 = sch.split(loop=l113, factors=[None, 64], preserve_unit_iters=True)
sch.parallel(loop=l114)
sch.vectorize(loop=l115)
b116 = sch.get_block(name="conv2d_NCHWc", func_name="main")
l117, l118, l119, l120, l121, l122, l123, l124, l125, l126, l127, l128, l129, l130, l131, l132, l133 = sch.get_loops(block=b116)
b134 = sch.decompose_reduction(block=b116, loop=l118)
2024-04-28 21:12:28 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_1] Trial #22: GFLOPs: 219.5834. Time: 1054.3239 us. Best GFLOPs: 219.5834
2024-04-28 21:12:28 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_1] Trial #23: GFLOPs: 153.5328. Time: 1507.8999 us. Best GFLOPs: 219.5834
2024-04-28 21:12:28 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_1] Trial #24: GFLOPs: 20.9149. Time: 11069.2535 us. Best GFLOPs: 219.5834
2024-04-28 21:12:28 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_1] Trial #25: GFLOPs: 69.8777. Time: 3313.1047 us. Best GFLOPs: 219.5834
2024-04-28 21:12:28 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_1] Trial #26: GFLOPs: 65.7811. Time: 3519.4288 us. Best GFLOPs: 219.5834
2024-04-28 21:12:28 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_1] Trial #27: GFLOPs: 6.0061. Time: 38546.3210 us. Best GFLOPs: 219.5834
2024-04-28 21:12:28 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_1] Trial #28: GFLOPs: 17.2085. Time: 13453.3728 us. Best GFLOPs: 219.5834
2024-04-28 21:12:28 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_1] Trial #29: GFLOPs: 32.0870. Time: 7215.1255 us. Best GFLOPs: 219.5834
2024-04-28 21:12:28 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_1] Trial #30: GFLOPs: 42.0393. Time: 5507.0399 us. Best GFLOPs: 219.5834
2024-04-28 21:12:28 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_1] Trial #31: GFLOPs: 21.8745. Time: 10583.6710 us. Best GFLOPs: 219.5834
2024-04-28 21:12:28 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_1] Trial #32: GFLOPs: 32.7029. Time: 7079.2565 us. Best GFLOPs: 219.5834
2024-04-28 21:12:28 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_1] Trial #33: GFLOPs: 8.3585. Time: 27697.9317 us. Best GFLOPs: 219.5834
2024-04-28 21:12:28 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_1] Trial #34: GFLOPs: 4.0015. Time: 57856.5683 us. Best GFLOPs: 219.5834
2024-04-28 21:12:28 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_1] Trial #35: GFLOPs: 2.3667. Time: 97820.2803 us. Best GFLOPs: 219.5834
2024-04-28 21:12:28 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_1] Trial #36: GFLOPs: 113.6225. Time: 2037.5550 us. Best GFLOPs: 219.5834
2024-04-28 21:12:28 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_1] Trial #37: GFLOPs: 27.0560. Time: 8556.7863 us. Best GFLOPs: 219.5834
2024-04-28 21:12:28 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_1] Trial #38: GFLOPs: 116.2699. Time: 1991.1613 us. Best GFLOPs: 219.5834
2024-04-28 21:12:28 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_1] Trial #39: GFLOPs: 202.8621. Time: 1141.2287 us. Best GFLOPs: 219.5834
2024-04-28 21:12:28 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_1] Trial #40: GFLOPs: 29.8864. Time: 7746.3970 us. Best GFLOPs: 219.5834
2024-04-28 21:12:28 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_1] Trial #41: GFLOPs: 34.5788. Time: 6695.1991 us. Best GFLOPs: 219.5834
2024-04-28 21:12:28 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_1] Trial #42: GFLOPs: 50.8273. Time: 4554.8787 us. Best GFLOPs: 219.5834
2024-04-28 21:12:28 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_1] Trial #43: GFLOPs: 13.1274. Time: 17635.7967 us. Best GFLOPs: 219.5834
2024-04-28 21:12:28 [INFO] [task_scheduler.cc:121] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_1] Trial #44: Error in building:
LocalBuilder: Timeout, killed after 30.0 seconds
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(1), T.int64(28), T.int64(28), T.int64(128)), "float32"), p1: T.Buffer((T.int64(4), T.int64(1), T.int64(3), T.int64(3), T.int64(128), T.int64(32)), "float32"), p2: T.Buffer((T.int64(1), T.int64(4), T.int64(1), T.int64(1), T.int64(32)), "float32"), p3: T.Buffer((T.int64(1), T.int64(4), T.int64(28), T.int64(28), T.int64(32)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(4), T.int64(28), T.int64(28), T.int64(32)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        data_pad = T.alloc_buffer((T.int64(1), T.int64(1), T.int64(30), T.int64(30), T.int64(128)))
        conv2d_NCHWc = T.alloc_buffer((T.int64(1), T.int64(4), T.int64(28), T.int64(28), T.int64(32)))
        for n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused_fused in T.parallel(T.int64(1568), annotations={"pragma_auto_unroll_max_step": 512, "pragma_unroll_explicit": 1}):
            for ax0, ax1, ax2, ax3, ax4 in T.grid(T.int64(1), T.int64(1), T.int64(6), T.int64(4), T.int64(128)):
                with T.block("data_pad"):
                    v_i0, v_i1 = T.axis.remap("SS", [ax0, ax1])
                    v_i2 = T.axis.spatial(T.int64(30), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused_fused % T.int64(56) // T.int64(8) * T.int64(4) + ax2)
                    v_i3 = T.axis.spatial(T.int64(30), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused_fused % T.int64(8) // T.int64(4) * T.int64(2) + n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused_fused // T.int64(224) * T.int64(4) + ax3)
                    v_i4 = T.axis.spatial(T.int64(128), ax4)
                    T.reads(p0[v_i0, v_i1, v_i2 - T.int64(1), v_i3 - T.int64(1), v_i4])
                    T.writes(data_pad[v_i0, v_i1, v_i2, v_i3, v_i4])
                    data_pad[v_i0, v_i1, v_i2, v_i3, v_i4] = T.if_then_else(T.int64(1) <= v_i2 and v_i2 < T.int64(29) and T.int64(1) <= v_i3 and v_i3 < T.int64(29), p0[v_i0, v_i1, v_i2 - T.int64(1), v_i3 - T.int64(1), v_i4], T.float32(0))
            for n_2_init, oc_chunk_2_init, oh_2_init, ow_2_init, oc_block_2_init, n_3_init, oc_chunk_3_init, oh_3_init, ow_3_init in T.grid(T.int64(1), T.int64(1), T.int64(2), T.int64(2), T.int64(1), T.int64(1), T.int64(4), T.int64(2), T.int64(1)):
                for oc_block_3_fused_init in T.vectorized(T.int64(2)):
                    with T.block("conv2d_NCHWc_init"):
                        v_n = T.axis.spatial(T.int64(1), n_2_init + n_3_init)
                        v_oc_chunk = T.axis.spatial(T.int64(4), oc_chunk_2_init * T.int64(4) + oc_chunk_3_init)
                        v_oh = T.axis.spatial(T.int64(28), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused_fused % T.int64(56) // T.int64(8) * T.int64(4) + oh_2_init * T.int64(2) + oh_3_init)
                        v_ow = T.axis.spatial(T.int64(28), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused_fused // T.int64(224) * T.int64(4) + n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused_fused % T.int64(8) // T.int64(4) * T.int64(2) + ow_2_init + ow_3_init)
                        v_oc_block = T.axis.spatial(T.int64(32), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused_fused % T.int64(224) // T.int64(56) * T.int64(8) + n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused_fused % T.int64(4) * T.int64(2) + oc_block_2_init * T.int64(2) + oc_block_3_fused_init)
                        T.reads()
                        T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                        T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                        conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = T.float32(0)
            for ic_0, kh_0, kw_0, n_2, oc_chunk_2, oh_2, ow_2, oc_block_2, ic_1, kh_1, kw_1, n_3, oc_chunk_3, oh_3, ow_3 in T.grid(T.int64(32), T.int64(3), T.int64(3), T.int64(1), T.int64(1), T.int64(2), T.int64(2), T.int64(1), T.int64(4), T.int64(1), T.int64(1), T.int64(1), T.int64(4), T.int64(2), T.int64(1)):
                for oc_block_3_fused in T.vectorized(T.int64(2)):
                    with T.block("conv2d_NCHWc_update"):
                        v_n = T.axis.spatial(T.int64(1), n_2 + n_3)
                        v_oc_chunk = T.axis.spatial(T.int64(4), oc_chunk_2 * T.int64(4) + oc_chunk_3)
                        v_oh = T.axis.spatial(T.int64(28), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused_fused % T.int64(56) // T.int64(8) * T.int64(4) + oh_2 * T.int64(2) + oh_3)
                        v_ow = T.axis.spatial(T.int64(28), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused_fused // T.int64(224) * T.int64(4) + n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused_fused % T.int64(8) // T.int64(4) * T.int64(2) + ow_2 + ow_3)
                        v_oc_block = T.axis.spatial(T.int64(32), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused_fused % T.int64(224) // T.int64(56) * T.int64(8) + n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused_fused % T.int64(4) * T.int64(2) + oc_block_2 * T.int64(2) + oc_block_3_fused)
                        v_ic = T.axis.reduce(T.int64(128), ic_0 * T.int64(4) + ic_1)
                        v_kh = T.axis.reduce(T.int64(3), kh_0 + kh_1)
                        v_kw = T.axis.reduce(T.int64(3), kw_0 + kw_1)
                        T.reads(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block], data_pad[v_n, v_ic // T.int64(128), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(128)], p1[v_oc_chunk, v_ic // T.int64(128), v_kh, v_kw, v_ic % T.int64(128), v_oc_block])
                        T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                        T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                        conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] + data_pad[v_n, v_ic // T.int64(128), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(128)] * p1[v_oc_chunk, v_ic // T.int64(128), v_kh, v_kw, v_ic % T.int64(128), v_oc_block]
        for ax0_ax1_ax2_ax3_ax4_fused_0 in T.parallel(T.int64(1568)):
            for ax0_ax1_ax2_ax3_ax4_fused_1 in T.vectorized(T.int64(64)):
                with T.block("T_relu"):
                    v_ax0 = T.axis.spatial(T.int64(1), T.int64(0))
                    v_ax1 = T.axis.spatial(T.int64(4), (ax0_ax1_ax2_ax3_ax4_fused_0 * T.int64(64) + ax0_ax1_ax2_ax3_ax4_fused_1) // T.int64(25088))
                    v_ax2 = T.axis.spatial(T.int64(28), (ax0_ax1_ax2_ax3_ax4_fused_0 * T.int64(64) + ax0_ax1_ax2_ax3_ax4_fused_1) % T.int64(25088) // T.int64(896))
                    v_ax3 = T.axis.spatial(T.int64(28), (ax0_ax1_ax2_ax3_ax4_fused_0 * T.int64(64) + ax0_ax1_ax2_ax3_ax4_fused_1) % T.int64(896) // T.int64(32))
                    v_ax4 = T.axis.spatial(T.int64(32), (ax0_ax1_ax2_ax3_ax4_fused_0 * T.int64(64) + ax0_ax1_ax2_ax3_ax4_fused_1) % T.int64(32))
                    T.reads(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4], p3[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                    T.writes(T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                    T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.max(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] + p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4] + p3[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], T.float32(0))
b0 = sch.get_block(name="data_pad", func_name="main")
b1 = sch.get_block(name="conv2d_NCHWc", func_name="main")
b2 = sch.get_block(name="T_add", func_name="main")
b3 = sch.get_block(name="T_add_1", func_name="main")
b4 = sch.get_block(name="root", func_name="main")
sch.compute_inline(block=b3)
sch.compute_inline(block=b2)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSRSRS")
l5, l6, l7, l8, l9, l10, l11, l12 = sch.get_loops(block=b1)
v13, v14, v15, v16 = sch.sample_perfect_tile(loop=l5, n=4, max_innermost_factor=64, decision=[1, 1, 1, 1])
l17, l18, l19, l20 = sch.split(loop=l5, factors=[v13, v14, v15, v16], preserve_unit_iters=True)
v21, v22, v23, v24 = sch.sample_perfect_tile(loop=l6, n=4, max_innermost_factor=64, decision=[1, 1, 1, 4])
l25, l26, l27, l28 = sch.split(loop=l6, factors=[v21, v22, v23, v24], preserve_unit_iters=True)
v29, v30, v31, v32 = sch.sample_perfect_tile(loop=l7, n=4, max_innermost_factor=64, decision=[1, 7, 2, 2])
l33, l34, l35, l36 = sch.split(loop=l7, factors=[v29, v30, v31, v32], preserve_unit_iters=True)
v37, v38, v39, v40 = sch.sample_perfect_tile(loop=l8, n=4, max_innermost_factor=64, decision=[7, 2, 2, 1])
l41, l42, l43, l44 = sch.split(loop=l8, factors=[v37, v38, v39, v40], preserve_unit_iters=True)
v45, v46, v47, v48 = sch.sample_perfect_tile(loop=l9, n=4, max_innermost_factor=64, decision=[4, 4, 1, 2])
l49, l50, l51, l52 = sch.split(loop=l9, factors=[v45, v46, v47, v48], preserve_unit_iters=True)
v53, v54 = sch.sample_perfect_tile(loop=l10, n=2, max_innermost_factor=64, decision=[32, 4])
l55, l56 = sch.split(loop=l10, factors=[v53, v54], preserve_unit_iters=True)
v57, v58 = sch.sample_perfect_tile(loop=l11, n=2, max_innermost_factor=64, decision=[3, 1])
l59, l60 = sch.split(loop=l11, factors=[v57, v58], preserve_unit_iters=True)
v61, v62 = sch.sample_perfect_tile(loop=l12, n=2, max_innermost_factor=64, decision=[3, 1])
l63, l64 = sch.split(loop=l12, factors=[v61, v62], preserve_unit_iters=True)
sch.reorder(l17, l25, l33, l41, l49, l18, l26, l34, l42, l50, l55, l59, l63, l19, l27, l35, l43, l51, l56, l60, l64, l20, l28, l36, l44, l52)
sch.annotate(block_or_loop=b4, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b4, ann_key="meta_schedule.vectorize", ann_val=64)
v65 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b4, ann_key="meta_schedule.unroll_explicit", ann_val=v65)
l66 = sch.sample_compute_location(block=b0, decision=9)
sch.compute_at(block=b0, loop=l66, preserve_unit_loops=True, index=-1)
sch.enter_postproc()
b67 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b67, ann_key="meta_schedule.parallel")
sch.unannotate(block_or_loop=b67, ann_key="meta_schedule.vectorize")
sch.unannotate(block_or_loop=b67, ann_key="meta_schedule.unroll_explicit")
b68, b69, b70 = sch.get_child_blocks(b67)
l71, l72, l73, l74, l75, l76, l77, l78, l79, l80, l81, l82, l83, l84, l85 = sch.get_loops(block=b68)
l86 = sch.fuse(l71, l72, l73, l74, l75, l76, l77, l78, l79, l80, preserve_unit_iters=True)
sch.parallel(loop=l86)
l87, l88, l89, l90, l91, l92, l93, l94, l95, l96, l97, l98, l99, l100, l101, l102, l103 = sch.get_loops(block=b69)
l104 = sch.fuse(l87, preserve_unit_iters=True)
sch.parallel(loop=l104)
l105 = sch.fuse(l103, preserve_unit_iters=True)
sch.vectorize(loop=l105)
sch.annotate(block_or_loop=l104, ann_key="pragma_auto_unroll_max_step", ann_val=512)
sch.annotate(block_or_loop=l104, ann_key="pragma_unroll_explicit", ann_val=1)
l106, l107, l108, l109, l110 = sch.get_loops(block=b70)
l111 = sch.fuse(l106, l107, l108, l109, l110, preserve_unit_iters=True)
l112, l113 = sch.split(loop=l111, factors=[None, 64], preserve_unit_iters=True)
sch.parallel(loop=l112)
sch.vectorize(loop=l113)
b114 = sch.get_block(name="conv2d_NCHWc", func_name="main")
l115, l116, l117, l118, l119, l120, l121, l122, l123, l124, l125, l126, l127, l128, l129, l130, l131 = sch.get_loops(block=b114)
b132 = sch.decompose_reduction(block=b114, loop=l116)
2024-04-28 21:12:28 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_1] Trial #45: GFLOPs: 78.8432. Time: 2936.3611 us. Best GFLOPs: 219.5834
2024-04-28 21:12:28 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_1] Trial #46: GFLOPs: 17.8754. Time: 12951.4327 us. Best GFLOPs: 219.5834
2024-04-28 21:12:28 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_1] Trial #47: GFLOPs: 2.1619. Time: 107088.8860 us. Best GFLOPs: 219.5834
2024-04-28 21:12:28 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_1] Trial #48: GFLOPs: 2.6564. Time: 87152.8573 us. Best GFLOPs: 219.5834
2024-04-28 21:12:28 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_1] Trial #49: GFLOPs: 4.2490. Time: 54486.7497 us. Best GFLOPs: 219.5834
2024-04-28 21:12:28 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_1] Trial #50: GFLOPs: 17.3676. Time: 13330.1431 us. Best GFLOPs: 219.5834
2024-04-28 21:12:28 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_1] Trial #51: GFLOPs: 3.7273. Time: 62112.8297 us. Best GFLOPs: 219.5834
2024-04-28 21:12:28 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_1] Trial #52: GFLOPs: 38.3923. Time: 6030.1684 us. Best GFLOPs: 219.5834
2024-04-28 21:12:28 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_1] Trial #53: GFLOPs: 16.8212. Time: 13763.1319 us. Best GFLOPs: 219.5834
2024-04-28 21:12:28 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_1] Trial #54: GFLOPs: 54.6781. Time: 4234.0940 us. Best GFLOPs: 219.5834
2024-04-28 21:12:28 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_1] Trial #55: GFLOPs: 27.2182. Time: 8505.7845 us. Best GFLOPs: 219.5834
2024-04-28 21:12:28 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_1] Trial #56: GFLOPs: 8.8698. Time: 26101.1662 us. Best GFLOPs: 219.5834
2024-04-28 21:12:28 [INFO] [task_scheduler.cc:121] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_1] Trial #57: Error in building:
LocalBuilder: Timeout, killed after 30.0 seconds
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(1), T.int64(28), T.int64(28), T.int64(128)), "float32"), p1: T.Buffer((T.int64(4), T.int64(1), T.int64(3), T.int64(3), T.int64(128), T.int64(32)), "float32"), p2: T.Buffer((T.int64(1), T.int64(4), T.int64(1), T.int64(1), T.int64(32)), "float32"), p3: T.Buffer((T.int64(1), T.int64(4), T.int64(28), T.int64(28), T.int64(32)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(4), T.int64(28), T.int64(28), T.int64(32)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        data_pad = T.alloc_buffer((T.int64(1), T.int64(1), T.int64(30), T.int64(30), T.int64(128)))
        conv2d_NCHWc = T.alloc_buffer((T.int64(1), T.int64(4), T.int64(28), T.int64(28), T.int64(32)))
        for n_0_oc_chunk_0_oh_0_ow_0_fused_fused in T.parallel(T.int64(196), annotations={"pragma_auto_unroll_max_step": 512, "pragma_unroll_explicit": 1}):
            for oc_block_0 in range(T.int64(4)):
                for n_1, oc_chunk_1, oh_1, ow_1, oc_block_1 in T.grid(T.int64(1), T.int64(4), T.int64(4), T.int64(1), T.int64(2)):
                    for ax0, ax1, ax2, ax3, ax4 in T.grid(T.int64(1), T.int64(1), T.int64(3), T.int64(3), T.int64(128)):
                        with T.block("data_pad"):
                            v_i0, v_i1 = T.axis.remap("SS", [ax0, ax1])
                            v_i2 = T.axis.spatial(T.int64(30), n_0_oc_chunk_0_oh_0_ow_0_fused_fused // T.int64(28) * T.int64(4) + oh_1 + ax2)
                            v_i3 = T.axis.spatial(T.int64(30), n_0_oc_chunk_0_oh_0_ow_0_fused_fused % T.int64(28) + ax3)
                            v_i4 = T.axis.spatial(T.int64(128), ax4)
                            T.reads(p0[v_i0, v_i1, v_i2 - T.int64(1), v_i3 - T.int64(1), v_i4])
                            T.writes(data_pad[v_i0, v_i1, v_i2, v_i3, v_i4])
                            data_pad[v_i0, v_i1, v_i2, v_i3, v_i4] = T.if_then_else(T.int64(1) <= v_i2 and v_i2 < T.int64(29) and T.int64(1) <= v_i3 and v_i3 < T.int64(29), p0[v_i0, v_i1, v_i2 - T.int64(1), v_i3 - T.int64(1), v_i4], T.float32(0))
                    for n_2_init, oc_chunk_2_init, oh_2_init, ow_2_init, oc_block_2_init, n_3_init, oc_chunk_3_init, oh_3_init, ow_3_init, oc_block_3_init in T.grid(T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(4), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1)):
                        with T.block("conv2d_NCHWc_init"):
                            v_n = T.axis.spatial(T.int64(1), n_1 + n_2_init + n_3_init)
                            v_oc_chunk = T.axis.spatial(T.int64(4), oc_chunk_1 + oc_chunk_2_init + oc_chunk_3_init)
                            v_oh = T.axis.spatial(T.int64(28), n_0_oc_chunk_0_oh_0_ow_0_fused_fused // T.int64(28) * T.int64(4) + oh_1 + oh_2_init + oh_3_init)
                            v_ow = T.axis.spatial(T.int64(28), n_0_oc_chunk_0_oh_0_ow_0_fused_fused % T.int64(28) + ow_1 + ow_2_init + ow_3_init)
                            v_oc_block = T.axis.spatial(T.int64(32), oc_block_0 * T.int64(8) + oc_block_1 * T.int64(4) + oc_block_2_init + oc_block_3_init)
                            T.reads()
                            T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                            T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                            conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = T.float32(0)
                    for ic_0, kh_0, kw_0, n_2, oc_chunk_2, oh_2, ow_2, oc_block_2, ic_1, kh_1, kw_1, n_3, oc_chunk_3, oh_3, ow_3, oc_block_3 in T.grid(T.int64(8), T.int64(1), T.int64(3), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(4), T.int64(16), T.int64(3), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1)):
                        with T.block("conv2d_NCHWc_update"):
                            v_n = T.axis.spatial(T.int64(1), n_1 + n_2 + n_3)
                            v_oc_chunk = T.axis.spatial(T.int64(4), oc_chunk_1 + oc_chunk_2 + oc_chunk_3)
                            v_oh = T.axis.spatial(T.int64(28), n_0_oc_chunk_0_oh_0_ow_0_fused_fused // T.int64(28) * T.int64(4) + oh_1 + oh_2 + oh_3)
                            v_ow = T.axis.spatial(T.int64(28), n_0_oc_chunk_0_oh_0_ow_0_fused_fused % T.int64(28) + ow_1 + ow_2 + ow_3)
                            v_oc_block = T.axis.spatial(T.int64(32), oc_block_0 * T.int64(8) + oc_block_1 * T.int64(4) + oc_block_2 + oc_block_3)
                            v_ic = T.axis.reduce(T.int64(128), ic_0 * T.int64(16) + ic_1)
                            v_kh = T.axis.reduce(T.int64(3), kh_0 * T.int64(3) + kh_1)
                            v_kw = T.axis.reduce(T.int64(3), kw_0 + kw_1)
                            T.reads(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block], data_pad[v_n, v_ic // T.int64(128), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(128)], p1[v_oc_chunk, v_ic // T.int64(128), v_kh, v_kw, v_ic % T.int64(128), v_oc_block])
                            T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                            T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                            conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] + data_pad[v_n, v_ic // T.int64(128), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(128)] * p1[v_oc_chunk, v_ic // T.int64(128), v_kh, v_kw, v_ic % T.int64(128), v_oc_block]
                for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(4), T.int64(4), T.int64(1)):
                    for ax4_fused in T.vectorized(T.int64(8)):
                        with T.block("T_relu"):
                            v_ax0, v_ax1 = T.axis.remap("SS", [ax0, ax1])
                            v_ax2 = T.axis.spatial(T.int64(28), n_0_oc_chunk_0_oh_0_ow_0_fused_fused // T.int64(28) * T.int64(4) + ax2)
                            v_ax3 = T.axis.spatial(T.int64(28), n_0_oc_chunk_0_oh_0_ow_0_fused_fused % T.int64(28) + ax3)
                            v_ax4 = T.axis.spatial(T.int64(32), oc_block_0 * T.int64(8) + ax4_fused)
                            T.reads(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4], p3[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                            T.writes(T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                            T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.max(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] + p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4] + p3[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], T.float32(0))
b0 = sch.get_block(name="data_pad", func_name="main")
b1 = sch.get_block(name="conv2d_NCHWc", func_name="main")
b2 = sch.get_block(name="T_add", func_name="main")
b3 = sch.get_block(name="T_add_1", func_name="main")
b4 = sch.get_block(name="root", func_name="main")
sch.compute_inline(block=b3)
sch.compute_inline(block=b2)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSRSRS")
l5, l6, l7, l8, l9, l10, l11, l12 = sch.get_loops(block=b1)
v13, v14, v15, v16 = sch.sample_perfect_tile(loop=l5, n=4, max_innermost_factor=64, decision=[1, 1, 1, 1])
l17, l18, l19, l20 = sch.split(loop=l5, factors=[v13, v14, v15, v16], preserve_unit_iters=True)
v21, v22, v23, v24 = sch.sample_perfect_tile(loop=l6, n=4, max_innermost_factor=64, decision=[1, 4, 1, 1])
l25, l26, l27, l28 = sch.split(loop=l6, factors=[v21, v22, v23, v24], preserve_unit_iters=True)
v29, v30, v31, v32 = sch.sample_perfect_tile(loop=l7, n=4, max_innermost_factor=64, decision=[7, 4, 1, 1])
l33, l34, l35, l36 = sch.split(loop=l7, factors=[v29, v30, v31, v32], preserve_unit_iters=True)
v37, v38, v39, v40 = sch.sample_perfect_tile(loop=l8, n=4, max_innermost_factor=64, decision=[28, 1, 1, 1])
l41, l42, l43, l44 = sch.split(loop=l8, factors=[v37, v38, v39, v40], preserve_unit_iters=True)
v45, v46, v47, v48 = sch.sample_perfect_tile(loop=l9, n=4, max_innermost_factor=64, decision=[4, 2, 4, 1])
l49, l50, l51, l52 = sch.split(loop=l9, factors=[v45, v46, v47, v48], preserve_unit_iters=True)
v53, v54 = sch.sample_perfect_tile(loop=l10, n=2, max_innermost_factor=64, decision=[8, 16])
l55, l56 = sch.split(loop=l10, factors=[v53, v54], preserve_unit_iters=True)
v57, v58 = sch.sample_perfect_tile(loop=l11, n=2, max_innermost_factor=64, decision=[1, 3])
l59, l60 = sch.split(loop=l11, factors=[v57, v58], preserve_unit_iters=True)
v61, v62 = sch.sample_perfect_tile(loop=l12, n=2, max_innermost_factor=64, decision=[3, 1])
l63, l64 = sch.split(loop=l12, factors=[v61, v62], preserve_unit_iters=True)
sch.reorder(l17, l25, l33, l41, l49, l18, l26, l34, l42, l50, l55, l59, l63, l19, l27, l35, l43, l51, l56, l60, l64, l20, l28, l36, l44, l52)
b65, = sch.get_consumers(block=b1)
sch.reverse_compute_at(block=b65, loop=l49, preserve_unit_loops=True, index=-1)
sch.annotate(block_or_loop=b4, ann_key="meta_schedule.parallel", ann_val=112)
sch.annotate(block_or_loop=b4, ann_key="meta_schedule.vectorize", ann_val=64)
v66 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b4, ann_key="meta_schedule.unroll_explicit", ann_val=v66)
l67 = sch.sample_compute_location(block=b0, decision=9)
sch.compute_at(block=b0, loop=l67, preserve_unit_loops=True, index=-1)
sch.enter_postproc()
b68 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b68, ann_key="meta_schedule.parallel")
sch.unannotate(block_or_loop=b68, ann_key="meta_schedule.vectorize")
sch.unannotate(block_or_loop=b68, ann_key="meta_schedule.unroll_explicit")
b69, b70, b71 = sch.get_child_blocks(b68)
l72, l73, l74, l75, l76, l77, l78, l79, l80, l81, l82, l83, l84, l85, l86 = sch.get_loops(block=b69)
l87 = sch.fuse(l72, l73, l74, l75, preserve_unit_iters=True)
sch.parallel(loop=l87)
l88, l89, l90, l91, l92, l93, l94, l95, l96, l97, l98, l99, l100, l101, l102, l103, l104, l105, l106, l107, l108, l109, l110 = sch.get_loops(block=b70)
l111 = sch.fuse(l88, preserve_unit_iters=True)
sch.parallel(loop=l111)
sch.annotate(block_or_loop=l111, ann_key="pragma_auto_unroll_max_step", ann_val=512)
sch.annotate(block_or_loop=l111, ann_key="pragma_unroll_explicit", ann_val=1)
l112, l113, l114, l115, l116, l117, l118 = sch.get_loops(block=b71)
l119 = sch.fuse(l118, preserve_unit_iters=True)
sch.vectorize(loop=l119)
b120 = sch.get_block(name="conv2d_NCHWc", func_name="main")
l121, l122, l123, l124, l125, l126, l127, l128, l129, l130, l131, l132, l133, l134, l135, l136, l137, l138, l139, l140, l141, l142, l143 = sch.get_loops(block=b120)
b144 = sch.decompose_reduction(block=b120, loop=l128)
2024-04-28 21:12:28 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_1] Trial #58: GFLOPs: 34.3204. Time: 6745.6017 us. Best GFLOPs: 219.5834
2024-04-28 21:12:28 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_1] Trial #59: GFLOPs: 19.5413. Time: 11847.3393 us. Best GFLOPs: 219.5834
2024-04-28 21:12:28 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_1] Trial #60: GFLOPs: 2.2012. Time: 105174.4660 us. Best GFLOPs: 219.5834
2024-04-28 21:12:28 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_1] Trial #61: GFLOPs: 40.4253. Time: 5726.9057 us. Best GFLOPs: 219.5834
2024-04-28 21:12:28 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_1] Trial #62: GFLOPs: 22.6670. Time: 10213.6006 us. Best GFLOPs: 219.5834
2024-04-28 21:12:28 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_1] Trial #63: GFLOPs: 5.8407. Time: 39637.6230 us. Best GFLOPs: 219.5834
2024-04-28 21:12:28 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_1] Trial #64: GFLOPs: 3.0343. Time: 76297.7477 us. Best GFLOPs: 219.5834
2024-04-28 21:15:44 [INFO] [evolutionary_search.cc:713] Generating candidates......
2024-04-28 21:15:45 [INFO] [evolutionary_search.cc:715] Picked top 59 candidate(s) from database
2024-04-28 21:15:50 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x3858de8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x3c39958)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0xa2a8408)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x3f4f298)]: 0 failure(s)
2024-04-28 21:15:50 [INFO] [evolutionary_search.cc:723] Sampled 453 candidate(s)
2024-04-28 21:16:03 [INFO] [evolutionary_search.cc:621] Evolve iter #0 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x3858de8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x3c39958)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0xa2a8408)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x3f4f298)]: 0 failure(s)
2024-04-28 21:16:16 [INFO] [evolutionary_search.cc:621] Evolve iter #1 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x3858de8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x3c39958)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0xa2a8408)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x3f4f298)]: 0 failure(s)
2024-04-28 21:16:29 [INFO] [evolutionary_search.cc:621] Evolve iter #2 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x3858de8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x3c39958)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0xa2a8408)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x3f4f298)]: 0 failure(s)
2024-04-28 21:16:42 [INFO] [evolutionary_search.cc:621] Evolve iter #3 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x3858de8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x3c39958)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0xa2a8408)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x3f4f298)]: 0 failure(s)
2024-04-28 21:16:49 [INFO] [evolutionary_search.cc:649] Scores of the best 64 candidates:
[1 : 16]:	0.9989  0.9815  0.9815  0.9733  0.9733  0.9733  0.9297  0.9297  0.9297  0.8871  0.8788  0.8655  0.8579  0.8552  0.8325  0.8325
[17 : 32]:	0.8325  0.8260  0.8159  0.8128  0.8128  0.8095  0.8095  0.7965  0.7963  0.7948  0.7873  0.7847  0.7840  0.7840  0.7836  0.7792
[33 : 48]:	0.7792  0.7755  0.7728  0.7696  0.7696  0.7657  0.7614  0.7587  0.7584  0.7579  0.7536  0.7532  0.7516  0.7495  0.7485  0.7471
[49 : 64]:	0.7438  0.7399  0.7399  0.7347  0.7320  0.7320  0.7320  0.7301  0.7269  0.7254  0.7254  0.7204  0.7204  0.7204  0.7204  0.7195
2024-04-28 21:16:50 [INFO] [evolutionary_search.cc:727] Got 64 candidate(s) with evolutionary search
2024-04-28 21:16:50 [INFO] [evolutionary_search.cc:730] Sending 64 candidates(s) for measurement
2024-04-28 21:18:09 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_1] Trial #65: GFLOPs: 185.8623. Time: 1245.6108 us. Best GFLOPs: 219.5834
2024-04-28 21:18:09 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_1] Trial #66: GFLOPs: 192.4950. Time: 1202.6916 us. Best GFLOPs: 219.5834
2024-04-28 21:18:09 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_1] Trial #67: GFLOPs: 185.6123. Time: 1247.2882 us. Best GFLOPs: 219.5834
2024-04-28 21:18:09 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_1] Trial #68: GFLOPs: 237.6703. Time: 974.0891 us. Best GFLOPs: 237.6703
2024-04-28 21:18:09 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_1] Trial #69: GFLOPs: 109.2181. Time: 2119.7223 us. Best GFLOPs: 237.6703
2024-04-28 21:18:09 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_1] Trial #70: GFLOPs: 205.1892. Time: 1128.2857 us. Best GFLOPs: 237.6703
2024-04-28 21:18:09 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_1] Trial #71: GFLOPs: 246.0993. Time: 940.7263 us. Best GFLOPs: 246.0993
2024-04-28 21:18:09 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_1] Trial #72: GFLOPs: 190.6005. Time: 1214.6458 us. Best GFLOPs: 246.0993
2024-04-28 21:18:09 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_1] Trial #73: GFLOPs: 91.0376. Time: 2543.0374 us. Best GFLOPs: 246.0993
2024-04-28 21:18:09 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_1] Trial #74: GFLOPs: 131.5739. Time: 1759.5595 us. Best GFLOPs: 246.0993
2024-04-28 21:18:09 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_1] Trial #75: GFLOPs: 231.9035. Time: 998.3122 us. Best GFLOPs: 246.0993
2024-04-28 21:18:09 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_1] Trial #76: GFLOPs: 135.0972. Time: 1713.6710 us. Best GFLOPs: 246.0993
2024-04-28 21:18:09 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_1] Trial #77: GFLOPs: 143.0560. Time: 1618.3320 us. Best GFLOPs: 246.0993
2024-04-28 21:18:09 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_1] Trial #78: GFLOPs: 137.5933. Time: 1682.5823 us. Best GFLOPs: 246.0993
2024-04-28 21:18:09 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_1] Trial #79: GFLOPs: 130.7455. Time: 1770.7078 us. Best GFLOPs: 246.0993
2024-04-28 21:18:09 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_1] Trial #80: GFLOPs: 157.1926. Time: 1472.7924 us. Best GFLOPs: 246.0993
2024-04-28 21:18:09 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_1] Trial #81: GFLOPs: 220.1518. Time: 1051.6020 us. Best GFLOPs: 246.0993
2024-04-28 21:18:09 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_1] Trial #82: GFLOPs: 232.7570. Time: 994.6511 us. Best GFLOPs: 246.0993
2024-04-28 21:18:09 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_1] Trial #83: GFLOPs: 144.0635. Time: 1607.0143 us. Best GFLOPs: 246.0993
2024-04-28 21:18:09 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_1] Trial #84: GFLOPs: 155.9756. Time: 1484.2839 us. Best GFLOPs: 246.0993
2024-04-28 21:18:09 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_1] Trial #85: GFLOPs: 153.1463. Time: 1511.7048 us. Best GFLOPs: 246.0993
2024-04-28 21:18:09 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_1] Trial #86: GFLOPs: 85.1592. Time: 2718.5806 us. Best GFLOPs: 246.0993
2024-04-28 21:18:09 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_1] Trial #87: GFLOPs: 159.3084. Time: 1453.2318 us. Best GFLOPs: 246.0993
2024-04-28 21:18:09 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_1] Trial #88: GFLOPs: 138.5845. Time: 1670.5480 us. Best GFLOPs: 246.0993
2024-04-28 21:18:09 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_1] Trial #89: GFLOPs: 86.7842. Time: 2667.6748 us. Best GFLOPs: 246.0993
2024-04-28 21:18:09 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_1] Trial #90: GFLOPs: 148.4748. Time: 1559.2688 us. Best GFLOPs: 246.0993
2024-04-28 21:18:09 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_1] Trial #91: GFLOPs: 210.7408. Time: 1098.5629 us. Best GFLOPs: 246.0993
2024-04-28 21:18:09 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_1] Trial #92: GFLOPs: 140.8500. Time: 1643.6779 us. Best GFLOPs: 246.0993
2024-04-28 21:18:09 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_1] Trial #93: GFLOPs: 140.0597. Time: 1652.9522 us. Best GFLOPs: 246.0993
2024-04-28 21:18:09 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_1] Trial #94: GFLOPs: 177.4578. Time: 1304.6036 us. Best GFLOPs: 246.0993
2024-04-28 21:18:09 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_1] Trial #95: GFLOPs: 164.0650. Time: 1411.0999 us. Best GFLOPs: 246.0993
2024-04-28 21:18:09 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_1] Trial #96: GFLOPs: 192.4538. Time: 1202.9490 us. Best GFLOPs: 246.0993
2024-04-28 21:18:09 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_1] Trial #97: GFLOPs: 116.4307. Time: 1988.4113 us. Best GFLOPs: 246.0993
2024-04-28 21:18:09 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_1] Trial #98: GFLOPs: 175.6041. Time: 1318.3750 us. Best GFLOPs: 246.0993
2024-04-28 21:18:09 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_1] Trial #99: GFLOPs: 159.1945. Time: 1454.2718 us. Best GFLOPs: 246.0993
2024-04-28 21:18:09 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_1] Trial #100: GFLOPs: 220.0137. Time: 1052.2623 us. Best GFLOPs: 246.0993
2024-04-28 21:18:09 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_1] Trial #101: GFLOPs: 139.0906. Time: 1664.4692 us. Best GFLOPs: 246.0993
2024-04-28 21:18:09 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_1] Trial #102: GFLOPs: 192.3715. Time: 1203.4637 us. Best GFLOPs: 246.0993
2024-04-28 21:18:09 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_1] Trial #103: GFLOPs: 175.6908. Time: 1317.7243 us. Best GFLOPs: 246.0993
2024-04-28 21:18:09 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_1] Trial #104: GFLOPs: 167.3996. Time: 1382.9903 us. Best GFLOPs: 246.0993
2024-04-28 21:18:09 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_1] Trial #105: GFLOPs: 165.1218. Time: 1402.0687 us. Best GFLOPs: 246.0993
2024-04-28 21:18:09 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_1] Trial #106: GFLOPs: 278.2530. Time: 832.0201 us. Best GFLOPs: 278.2530
2024-04-28 21:18:09 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_1] Trial #107: GFLOPs: 168.6109. Time: 1373.0553 us. Best GFLOPs: 278.2530
2024-04-28 21:18:09 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_1] Trial #108: GFLOPs: 272.8292. Time: 848.5604 us. Best GFLOPs: 278.2530
2024-04-28 21:18:09 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_1] Trial #109: GFLOPs: 147.4612. Time: 1569.9867 us. Best GFLOPs: 278.2530
2024-04-28 21:18:09 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_1] Trial #110: GFLOPs: 165.7919. Time: 1396.4012 us. Best GFLOPs: 278.2530
2024-04-28 21:18:09 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_1] Trial #111: GFLOPs: 188.6341. Time: 1227.3079 us. Best GFLOPs: 278.2530
2024-04-28 21:18:09 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_1] Trial #112: GFLOPs: 95.2273. Time: 2431.1511 us. Best GFLOPs: 278.2530
2024-04-28 21:18:09 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_1] Trial #113: GFLOPs: 112.7371. Time: 2053.5569 us. Best GFLOPs: 278.2530
2024-04-28 21:18:09 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_1] Trial #114: GFLOPs: 208.2683. Time: 1111.6049 us. Best GFLOPs: 278.2530
2024-04-28 21:18:09 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_1] Trial #115: GFLOPs: 88.9031. Time: 2604.0945 us. Best GFLOPs: 278.2530
2024-04-28 21:18:09 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_1] Trial #116: GFLOPs: 154.9816. Time: 1493.8037 us. Best GFLOPs: 278.2530
2024-04-28 21:18:09 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_1] Trial #117: GFLOPs: 59.8672. Time: 3867.0914 us. Best GFLOPs: 278.2530
2024-04-28 21:18:09 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_1] Trial #118: GFLOPs: 156.0084. Time: 1483.9717 us. Best GFLOPs: 278.2530
2024-04-28 21:18:09 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_1] Trial #119: GFLOPs: 218.5272. Time: 1059.4201 us. Best GFLOPs: 278.2530
2024-04-28 21:18:09 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_1] Trial #120: GFLOPs: 157.9829. Time: 1465.4250 us. Best GFLOPs: 278.2530
2024-04-28 21:18:09 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_1] Trial #121: GFLOPs: 161.8943. Time: 1430.0196 us. Best GFLOPs: 278.2530
2024-04-28 21:18:09 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_1] Trial #122: GFLOPs: 132.5102. Time: 1747.1262 us. Best GFLOPs: 278.2530
2024-04-28 21:18:09 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_1] Trial #123: GFLOPs: 66.6683. Time: 3472.5971 us. Best GFLOPs: 278.2530
2024-04-28 21:18:09 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_1] Trial #124: GFLOPs: 194.6549. Time: 1189.3464 us. Best GFLOPs: 278.2530
2024-04-28 21:18:09 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_1] Trial #125: GFLOPs: 193.5508. Time: 1196.1308 us. Best GFLOPs: 278.2530
2024-04-28 21:18:09 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_1] Trial #126: GFLOPs: 55.2878. Time: 4187.3998 us. Best GFLOPs: 278.2530
2024-04-28 21:18:09 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_1] Trial #127: GFLOPs: 53.1868. Time: 4352.8065 us. Best GFLOPs: 278.2530
2024-04-28 21:18:09 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_1] Trial #128: GFLOPs: 2.3030. Time: 100524.2000 us. Best GFLOPs: 278.2530
2024-04-28 21:35:38 [INFO] [evolutionary_search.cc:713] Generating candidates......
2024-04-28 21:35:39 [INFO] [evolutionary_search.cc:715] Picked top 102 candidate(s) from database
2024-04-28 21:35:44 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x3858de8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x3c39958)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0xa2a8408)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x3f4f298)]: 0 failure(s)
2024-04-28 21:35:44 [INFO] [evolutionary_search.cc:723] Sampled 410 candidate(s)
2024-04-28 21:35:57 [INFO] [evolutionary_search.cc:621] Evolve iter #0 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x3858de8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x3c39958)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0xa2a8408)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x3f4f298)]: 0 failure(s)
2024-04-28 21:36:09 [INFO] [evolutionary_search.cc:621] Evolve iter #1 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x3858de8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x3c39958)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0xa2a8408)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x3f4f298)]: 0 failure(s)
2024-04-28 21:36:21 [INFO] [evolutionary_search.cc:621] Evolve iter #2 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x3858de8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x3c39958)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0xa2a8408)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x3f4f298)]: 0 failure(s)
2024-04-28 21:36:34 [INFO] [evolutionary_search.cc:621] Evolve iter #3 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x3858de8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x3c39958)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0xa2a8408)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x3f4f298)]: 0 failure(s)
2024-04-28 21:36:40 [INFO] [evolutionary_search.cc:649] Scores of the best 64 candidates:
[1 : 16]:	0.9749  0.9749  0.9749  0.9700  0.9348  0.9348  0.9348  0.9233  0.9047  0.8538  0.8465  0.8414  0.8414  0.8414  0.8414  0.8414
[17 : 32]:	0.8395  0.8395  0.8395  0.8395  0.8364  0.8364  0.8245  0.8245  0.8163  0.8163  0.8163  0.8163  0.8163  0.8015  0.8015  0.7999
[33 : 48]:	0.7999  0.7999  0.7962  0.7958  0.7958  0.7920  0.7907  0.7856  0.7829  0.7828  0.7761  0.7751  0.7747  0.7744  0.7685  0.7685
[49 : 64]:	0.7685  0.7685  0.7681  0.7611  0.7607  0.7607  0.7599  0.7596  0.7577  0.7494  0.7492  0.7492  0.7492  0.7492  0.7492  0.7492
2024-04-28 21:36:41 [INFO] [evolutionary_search.cc:727] Got 64 candidate(s) with evolutionary search
2024-04-28 21:36:41 [INFO] [evolutionary_search.cc:730] Sending 64 candidates(s) for measurement
2024-04-28 21:37:40 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_1] Trial #129: GFLOPs: 107.0854. Time: 2161.9390 us. Best GFLOPs: 278.2530
2024-04-28 21:37:40 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_1] Trial #130: GFLOPs: 163.5958. Time: 1415.1468 us. Best GFLOPs: 278.2530
2024-04-28 21:37:40 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_1] Trial #131: GFLOPs: 199.6765. Time: 1159.4357 us. Best GFLOPs: 278.2530
2024-04-28 21:37:40 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_1] Trial #132: GFLOPs: 277.4577. Time: 834.4049 us. Best GFLOPs: 278.2530
2024-04-28 21:37:40 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_1] Trial #133: GFLOPs: 184.9135. Time: 1252.0018 us. Best GFLOPs: 278.2530
2024-04-28 21:37:40 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_1] Trial #134: GFLOPs: 182.4912. Time: 1268.6205 us. Best GFLOPs: 278.2530
2024-04-28 21:37:40 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_1] Trial #135: GFLOPs: 277.8634. Time: 833.1866 us. Best GFLOPs: 278.2530
2024-04-28 21:37:40 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_1] Trial #136: GFLOPs: 157.0532. Time: 1474.0999 us. Best GFLOPs: 278.2530
2024-04-28 21:37:40 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_1] Trial #137: GFLOPs: 270.6599. Time: 855.3614 us. Best GFLOPs: 278.2530
2024-04-28 21:37:40 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_1] Trial #138: GFLOPs: 141.4203. Time: 1637.0502 us. Best GFLOPs: 278.2530
2024-04-28 21:37:40 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_1] Trial #139: GFLOPs: 183.3261. Time: 1262.8431 us. Best GFLOPs: 278.2530
2024-04-28 21:37:40 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_1] Trial #140: GFLOPs: 140.7024. Time: 1645.4024 us. Best GFLOPs: 278.2530
2024-04-28 21:37:40 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_1] Trial #141: GFLOPs: 239.5154. Time: 966.5853 us. Best GFLOPs: 278.2530
2024-04-28 21:37:40 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_1] Trial #142: GFLOPs: 87.7729. Time: 2637.6261 us. Best GFLOPs: 278.2530
2024-04-28 21:37:40 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_1] Trial #143: GFLOPs: 153.6121. Time: 1507.1215 us. Best GFLOPs: 278.2530
2024-04-28 21:37:40 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_1] Trial #144: GFLOPs: 82.1508. Time: 2818.1367 us. Best GFLOPs: 278.2530
2024-04-28 21:37:40 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_1] Trial #145: GFLOPs: 131.8194. Time: 1756.2828 us. Best GFLOPs: 278.2530
2024-04-28 21:37:40 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_1] Trial #146: GFLOPs: 83.7294. Time: 2765.0042 us. Best GFLOPs: 278.2530
2024-04-28 21:37:40 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_1] Trial #147: GFLOPs: 61.3226. Time: 3775.3160 us. Best GFLOPs: 278.2530
2024-04-28 21:37:40 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_1] Trial #148: GFLOPs: 122.3792. Time: 1891.7595 us. Best GFLOPs: 278.2530
2024-04-28 21:37:40 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_1] Trial #149: GFLOPs: 121.7543. Time: 1901.4689 us. Best GFLOPs: 278.2530
2024-04-28 21:37:40 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_1] Trial #150: GFLOPs: 134.1865. Time: 1725.3011 us. Best GFLOPs: 278.2530
2024-04-28 21:37:40 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_1] Trial #151: GFLOPs: 160.5857. Time: 1441.6731 us. Best GFLOPs: 278.2530
2024-04-28 21:37:40 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_1] Trial #152: GFLOPs: 247.0175. Time: 937.2295 us. Best GFLOPs: 278.2530
2024-04-28 21:37:40 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_1] Trial #153: GFLOPs: 182.1291. Time: 1271.1427 us. Best GFLOPs: 278.2530
2024-04-28 21:37:40 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_1] Trial #154: GFLOPs: 136.3421. Time: 1698.0231 us. Best GFLOPs: 278.2530
2024-04-28 21:37:40 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_1] Trial #155: GFLOPs: 153.4636. Time: 1508.5799 us. Best GFLOPs: 278.2530
2024-04-28 21:37:40 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_1] Trial #156: GFLOPs: 159.6816. Time: 1449.8355 us. Best GFLOPs: 278.2530
2024-04-28 21:37:40 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_1] Trial #157: GFLOPs: 86.7598. Time: 2668.4245 us. Best GFLOPs: 278.2530
2024-04-28 21:37:40 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_1] Trial #158: GFLOPs: 87.7097. Time: 2639.5274 us. Best GFLOPs: 278.2530
2024-04-28 21:37:40 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_1] Trial #159: GFLOPs: 87.3380. Time: 2650.7597 us. Best GFLOPs: 278.2530
2024-04-28 21:37:40 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_1] Trial #160: GFLOPs: 212.7833. Time: 1088.0181 us. Best GFLOPs: 278.2530
2024-04-28 21:37:40 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_1] Trial #161: GFLOPs: 85.7039. Time: 2701.3006 us. Best GFLOPs: 278.2530
2024-04-28 21:37:40 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_1] Trial #162: GFLOPs: 84.3650. Time: 2744.1722 us. Best GFLOPs: 278.2530
2024-04-28 21:37:40 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_1] Trial #163: GFLOPs: 186.9626. Time: 1238.2800 us. Best GFLOPs: 278.2530
2024-04-28 21:37:40 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_1] Trial #164: GFLOPs: 148.7212. Time: 1556.6853 us. Best GFLOPs: 278.2530
2024-04-28 21:37:40 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_1] Trial #165: GFLOPs: 62.6644. Time: 3694.4759 us. Best GFLOPs: 278.2530
2024-04-28 21:37:40 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_1] Trial #166: GFLOPs: 75.7300. Time: 3057.0700 us. Best GFLOPs: 278.2530
2024-04-28 21:37:40 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_1] Trial #167: GFLOPs: 132.1382. Time: 1752.0451 us. Best GFLOPs: 278.2530
2024-04-28 21:37:40 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_1] Trial #168: GFLOPs: 170.8282. Time: 1355.2332 us. Best GFLOPs: 278.2530
2024-04-28 21:37:40 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_1] Trial #169: GFLOPs: 166.4238. Time: 1391.0995 us. Best GFLOPs: 278.2530
2024-04-28 21:37:40 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_1] Trial #170: GFLOPs: 162.0922. Time: 1428.2739 us. Best GFLOPs: 278.2530
2024-04-28 21:37:40 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_1] Trial #171: GFLOPs: 227.5037. Time: 1017.6187 us. Best GFLOPs: 278.2530
2024-04-28 21:37:40 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_1] Trial #172: GFLOPs: 138.7156. Time: 1668.9696 us. Best GFLOPs: 278.2530
2024-04-28 21:37:40 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_1] Trial #173: GFLOPs: 149.2332. Time: 1551.3443 us. Best GFLOPs: 278.2530
2024-04-28 21:37:40 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_1] Trial #174: GFLOPs: 119.4693. Time: 1937.8377 us. Best GFLOPs: 278.2530
2024-04-28 21:37:40 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_1] Trial #175: GFLOPs: 292.0194. Time: 792.7968 us. Best GFLOPs: 292.0194
2024-04-28 21:37:40 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_1] Trial #176: GFLOPs: 212.6299. Time: 1088.8027 us. Best GFLOPs: 292.0194
2024-04-28 21:37:40 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_1] Trial #177: GFLOPs: 205.8685. Time: 1124.5629 us. Best GFLOPs: 292.0194
2024-04-28 21:37:40 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_1] Trial #178: GFLOPs: 297.4900. Time: 778.2179 us. Best GFLOPs: 297.4900
2024-04-28 21:37:40 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_1] Trial #179: GFLOPs: 174.9391. Time: 1323.3869 us. Best GFLOPs: 297.4900
2024-04-28 21:37:40 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_1] Trial #180: GFLOPs: 170.1800. Time: 1360.3952 us. Best GFLOPs: 297.4900
2024-04-28 21:37:40 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_1] Trial #181: GFLOPs: 227.2696. Time: 1018.6671 us. Best GFLOPs: 297.4900
2024-04-28 21:37:40 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_1] Trial #182: GFLOPs: 223.9910. Time: 1033.5777 us. Best GFLOPs: 297.4900
2024-04-28 21:37:40 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_1] Trial #183: GFLOPs: 181.7148. Time: 1274.0406 us. Best GFLOPs: 297.4900
2024-04-28 21:37:40 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_1] Trial #184: GFLOPs: 127.0681. Time: 1821.9522 us. Best GFLOPs: 297.4900
2024-04-28 21:37:40 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_1] Trial #185: GFLOPs: 287.2382. Time: 805.9934 us. Best GFLOPs: 297.4900
2024-04-28 21:37:40 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_1] Trial #186: GFLOPs: 181.9551. Time: 1272.3583 us. Best GFLOPs: 297.4900
2024-04-28 21:37:40 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_1] Trial #187: GFLOPs: 96.4982. Time: 2399.1347 us. Best GFLOPs: 297.4900
2024-04-28 21:37:40 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_1] Trial #188: GFLOPs: 110.7848. Time: 2089.7461 us. Best GFLOPs: 297.4900
2024-04-28 21:37:40 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_1] Trial #189: GFLOPs: 110.1956. Time: 2100.9194 us. Best GFLOPs: 297.4900
2024-04-28 21:37:40 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_1] Trial #190: GFLOPs: 109.1312. Time: 2121.4099 us. Best GFLOPs: 297.4900
2024-04-28 21:37:40 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_1] Trial #191: GFLOPs: 56.5101. Time: 4096.8235 us. Best GFLOPs: 297.4900
2024-04-28 21:37:40 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_1] Trial #192: GFLOPs: 138.6781. Time: 1669.4203 us. Best GFLOPs: 297.4900
2024-04-28 21:49:51 [INFO] [evolutionary_search.cc:713] Generating candidates......
2024-04-28 21:49:52 [INFO] [evolutionary_search.cc:715] Picked top 102 candidate(s) from database
2024-04-28 21:49:57 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x3858de8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x3c39958)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0xa2a8408)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x3f4f298)]: 0 failure(s)
2024-04-28 21:49:57 [INFO] [evolutionary_search.cc:723] Sampled 410 candidate(s)
2024-04-28 21:50:09 [INFO] [evolutionary_search.cc:621] Evolve iter #0 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x3858de8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x3c39958)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0xa2a8408)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x3f4f298)]: 0 failure(s)
2024-04-28 21:50:22 [INFO] [evolutionary_search.cc:621] Evolve iter #1 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x3858de8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x3c39958)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0xa2a8408)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x3f4f298)]: 0 failure(s)
2024-04-28 21:50:34 [INFO] [evolutionary_search.cc:621] Evolve iter #2 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x3858de8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x3c39958)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0xa2a8408)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x3f4f298)]: 0 failure(s)
2024-04-28 21:50:47 [INFO] [evolutionary_search.cc:621] Evolve iter #3 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x3858de8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x3c39958)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0xa2a8408)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x3f4f298)]: 0 failure(s)
2024-04-28 21:50:53 [INFO] [evolutionary_search.cc:649] Scores of the best 64 candidates:
[1 : 16]:	0.9425  0.9128  0.9004  0.9004  0.8831  0.8831  0.8821  0.8756  0.8756  0.8756  0.8756  0.8756  0.8756  0.8551  0.8468  0.8468
[17 : 32]:	0.8468  0.8429  0.8406  0.8405  0.8378  0.8279  0.8194  0.8194  0.8194  0.8194  0.8194  0.8194  0.8194  0.8194  0.8194  0.8194
[33 : 48]:	0.8194  0.8108  0.8004  0.7991  0.7959  0.7763  0.7763  0.7763  0.7763  0.7746  0.7720  0.7718  0.7712  0.7703  0.7664  0.7589
[49 : 64]:	0.7589  0.7589  0.7589  0.7583  0.7371  0.7259  0.7200  0.7200  0.7148  0.7135  0.7079  0.7079  0.7068  0.7043  0.7043  0.7043
2024-04-28 21:50:53 [INFO] [evolutionary_search.cc:727] Got 64 candidate(s) with evolutionary search
2024-04-28 21:50:54 [INFO] [evolutionary_search.cc:730] Sending 64 candidates(s) for measurement
2024-04-28 21:52:20 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_1] Trial #193: GFLOPs: 286.2449. Time: 808.7902 us. Best GFLOPs: 297.4900
2024-04-28 21:52:20 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_1] Trial #194: GFLOPs: 285.9231. Time: 809.7005 us. Best GFLOPs: 297.4900
2024-04-28 21:52:20 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_1] Trial #195: GFLOPs: 82.0477. Time: 2821.6770 us. Best GFLOPs: 297.4900
2024-04-28 21:52:20 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_1] Trial #196: GFLOPs: 118.4978. Time: 1953.7239 us. Best GFLOPs: 297.4900
2024-04-28 21:52:20 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_1] Trial #197: GFLOPs: 186.2127. Time: 1243.2671 us. Best GFLOPs: 297.4900
2024-04-28 21:52:20 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_1] Trial #198: GFLOPs: 115.8116. Time: 1999.0402 us. Best GFLOPs: 297.4900
2024-04-28 21:52:20 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_1] Trial #199: GFLOPs: 282.2299. Time: 820.2961 us. Best GFLOPs: 297.4900
2024-04-28 21:52:20 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_1] Trial #200: GFLOPs: 298.4068. Time: 775.8271 us. Best GFLOPs: 298.4068
2024-04-28 21:52:20 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_1] Trial #201: GFLOPs: 105.6783. Time: 2190.7247 us. Best GFLOPs: 298.4068
2024-04-28 21:52:20 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_1] Trial #202: GFLOPs: 145.7540. Time: 1588.3750 us. Best GFLOPs: 298.4068
2024-04-28 21:52:20 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_1] Trial #203: GFLOPs: 115.3896. Time: 2006.3516 us. Best GFLOPs: 298.4068
2024-04-28 21:52:20 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_1] Trial #204: GFLOPs: 248.1849. Time: 932.8208 us. Best GFLOPs: 298.4068
2024-04-28 21:52:20 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_1] Trial #205: GFLOPs: 89.5338. Time: 2585.7495 us. Best GFLOPs: 298.4068
2024-04-28 21:52:20 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_1] Trial #206: GFLOPs: 215.8182. Time: 1072.7179 us. Best GFLOPs: 298.4068
2024-04-28 21:52:20 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_1] Trial #207: GFLOPs: 113.4309. Time: 2040.9964 us. Best GFLOPs: 298.4068
2024-04-28 21:52:20 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_1] Trial #208: GFLOPs: 259.2344. Time: 893.0606 us. Best GFLOPs: 298.4068
2024-04-28 21:52:20 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_1] Trial #209: GFLOPs: 88.7382. Time: 2608.9340 us. Best GFLOPs: 298.4068
2024-04-28 21:52:20 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_1] Trial #210: GFLOPs: 279.5138. Time: 828.2672 us. Best GFLOPs: 298.4068
2024-04-28 21:52:20 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_1] Trial #211: GFLOPs: 252.5207. Time: 916.8044 us. Best GFLOPs: 298.4068
2024-04-28 21:52:20 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_1] Trial #212: GFLOPs: 276.4374. Time: 837.4845 us. Best GFLOPs: 298.4068
2024-04-28 21:52:20 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_1] Trial #213: GFLOPs: 203.5572. Time: 1137.3316 us. Best GFLOPs: 298.4068
2024-04-28 21:52:20 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_1] Trial #214: GFLOPs: 123.2106. Time: 1878.9943 us. Best GFLOPs: 298.4068
2024-04-28 21:52:20 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_1] Trial #215: GFLOPs: 109.1698. Time: 2120.6610 us. Best GFLOPs: 298.4068
2024-04-28 21:52:20 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_1] Trial #216: GFLOPs: 274.6639. Time: 842.8922 us. Best GFLOPs: 298.4068
2024-04-28 21:52:20 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_1] Trial #217: GFLOPs: 184.8503. Time: 1252.4299 us. Best GFLOPs: 298.4068
2024-04-28 21:52:20 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_1] Trial #218: GFLOPs: 104.6193. Time: 2212.8992 us. Best GFLOPs: 298.4068
2024-04-28 21:52:20 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_1] Trial #219: GFLOPs: 185.9687. Time: 1244.8980 us. Best GFLOPs: 298.4068
2024-04-28 21:52:20 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_1] Trial #220: GFLOPs: 95.1782. Time: 2432.4072 us. Best GFLOPs: 298.4068
2024-04-28 21:52:20 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_1] Trial #221: GFLOPs: 93.6048. Time: 2473.2929 us. Best GFLOPs: 298.4068
2024-04-28 21:52:20 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_1] Trial #222: GFLOPs: 94.0770. Time: 2460.8792 us. Best GFLOPs: 298.4068
2024-04-28 21:52:20 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_1] Trial #223: GFLOPs: 180.7897. Time: 1280.5602 us. Best GFLOPs: 298.4068
2024-04-28 21:52:20 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_1] Trial #224: GFLOPs: 90.8887. Time: 2547.2044 us. Best GFLOPs: 298.4068
2024-04-28 21:52:20 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_1] Trial #225: GFLOPs: 274.3367. Time: 843.8977 us. Best GFLOPs: 298.4068
2024-04-28 21:52:20 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_1] Trial #226: GFLOPs: 159.2931. Time: 1453.3713 us. Best GFLOPs: 298.4068
2024-04-28 21:52:20 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_1] Trial #227: GFLOPs: 105.4587. Time: 2195.2866 us. Best GFLOPs: 298.4068
2024-04-28 21:52:20 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_1] Trial #228: GFLOPs: 110.7663. Time: 2090.0950 us. Best GFLOPs: 298.4068
2024-04-28 21:52:20 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_1] Trial #229: GFLOPs: 167.5564. Time: 1381.6964 us. Best GFLOPs: 298.4068
2024-04-28 21:52:20 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_1] Trial #230: GFLOPs: 114.9745. Time: 2013.5953 us. Best GFLOPs: 298.4068
2024-04-28 21:52:20 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_1] Trial #231: GFLOPs: 162.9111. Time: 1421.0948 us. Best GFLOPs: 298.4068
2024-04-28 21:52:20 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_1] Trial #232: GFLOPs: 254.2060. Time: 910.7263 us. Best GFLOPs: 298.4068
2024-04-28 21:52:20 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_1] Trial #233: GFLOPs: 92.5218. Time: 2502.2424 us. Best GFLOPs: 298.4068
2024-04-28 21:52:20 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_1] Trial #234: GFLOPs: 139.7075. Time: 1657.1197 us. Best GFLOPs: 298.4068
2024-04-28 21:52:20 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_1] Trial #235: GFLOPs: 189.8947. Time: 1219.1603 us. Best GFLOPs: 298.4068
2024-04-28 21:52:20 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_1] Trial #236: GFLOPs: 120.9213. Time: 1914.5684 us. Best GFLOPs: 298.4068
2024-04-28 21:52:20 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_1] Trial #237: GFLOPs: 70.5513. Time: 3281.4715 us. Best GFLOPs: 298.4068
2024-04-28 21:52:20 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_1] Trial #238: GFLOPs: 130.6275. Time: 1772.3069 us. Best GFLOPs: 298.4068
2024-04-28 21:52:20 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_1] Trial #239: GFLOPs: 182.8062. Time: 1266.4341 us. Best GFLOPs: 298.4068
2024-04-28 21:52:20 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_1] Trial #240: GFLOPs: 325.8150. Time: 710.5629 us. Best GFLOPs: 325.8150
2024-04-28 21:52:20 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_1] Trial #241: GFLOPs: 207.2269. Time: 1117.1914 us. Best GFLOPs: 325.8150
2024-04-28 21:52:20 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_1] Trial #242: GFLOPs: 202.2864. Time: 1144.4766 us. Best GFLOPs: 325.8150
2024-04-28 21:52:20 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_1] Trial #243: GFLOPs: 44.8838. Time: 5158.0365 us. Best GFLOPs: 325.8150
2024-04-28 21:52:20 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_1] Trial #244: GFLOPs: 181.7505. Time: 1273.7906 us. Best GFLOPs: 325.8150
2024-04-28 21:52:20 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_1] Trial #245: GFLOPs: 208.5767. Time: 1109.9613 us. Best GFLOPs: 325.8150
2024-04-28 21:52:20 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_1] Trial #246: GFLOPs: 221.8063. Time: 1043.7577 us. Best GFLOPs: 325.8150
2024-04-28 21:52:20 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_1] Trial #247: GFLOPs: 159.4142. Time: 1452.2674 us. Best GFLOPs: 325.8150
2024-04-28 21:52:20 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_1] Trial #248: GFLOPs: 103.0099. Time: 2247.4749 us. Best GFLOPs: 325.8150
2024-04-28 21:52:20 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_1] Trial #249: GFLOPs: 221.7848. Time: 1043.8591 us. Best GFLOPs: 325.8150
2024-04-28 21:52:20 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_1] Trial #250: GFLOPs: 134.9429. Time: 1715.6299 us. Best GFLOPs: 325.8150
2024-04-28 21:52:20 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_1] Trial #251: GFLOPs: 52.6222. Time: 4399.5111 us. Best GFLOPs: 325.8150
2024-04-28 21:52:20 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_1] Trial #252: GFLOPs: 141.3490. Time: 1637.8760 us. Best GFLOPs: 325.8150
2024-04-28 21:52:20 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_1] Trial #253: GFLOPs: 85.5071. Time: 2707.5189 us. Best GFLOPs: 325.8150
2024-04-28 21:52:20 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_1] Trial #254: GFLOPs: 1.6510. Time: 140227.4153 us. Best GFLOPs: 325.8150
2024-04-28 21:52:20 [INFO] [task_scheduler.cc:121] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_1] Trial #255: Error in building:
LocalBuilder: Timeout, killed after 30.0 seconds
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(1), T.int64(28), T.int64(28), T.int64(128)), "float32"), p1: T.Buffer((T.int64(4), T.int64(1), T.int64(3), T.int64(3), T.int64(128), T.int64(32)), "float32"), p2: T.Buffer((T.int64(1), T.int64(4), T.int64(1), T.int64(1), T.int64(32)), "float32"), p3: T.Buffer((T.int64(1), T.int64(4), T.int64(28), T.int64(28), T.int64(32)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(4), T.int64(28), T.int64(28), T.int64(32)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        data_pad = T.alloc_buffer((T.int64(1), T.int64(1), T.int64(30), T.int64(30), T.int64(128)))
        conv2d_NCHWc = T.alloc_buffer((T.int64(1), T.int64(4), T.int64(28), T.int64(28), T.int64(32)))
        for n_0_oc_chunk_0_oh_0_fused_fused in T.parallel(T.int64(16), annotations={"pragma_auto_unroll_max_step": 512, "pragma_unroll_explicit": 1}):
            for ax0, ax1, ax2, ax3, ax4 in T.grid(T.int64(1), T.int64(1), T.int64(9), T.int64(30), T.int64(128)):
                with T.block("data_pad"):
                    v_i0, v_i1 = T.axis.remap("SS", [ax0, ax1])
                    v_i2 = T.axis.spatial(T.int64(30), n_0_oc_chunk_0_oh_0_fused_fused % T.int64(4) * T.int64(7) + ax2)
                    v_i3, v_i4 = T.axis.remap("SS", [ax3, ax4])
                    T.reads(p0[v_i0, v_i1, v_i2 - T.int64(1), v_i3 - T.int64(1), v_i4])
                    T.writes(data_pad[v_i0, v_i1, v_i2, v_i3, v_i4])
                    data_pad[v_i0, v_i1, v_i2, v_i3, v_i4] = T.if_then_else(T.int64(1) <= v_i2 and v_i2 < T.int64(29) and T.int64(1) <= v_i3 and v_i3 < T.int64(29), p0[v_i0, v_i1, v_i2 - T.int64(1), v_i3 - T.int64(1), v_i4], T.float32(0))
            for ow_0, oc_block_0, n_1, oc_chunk_1, oh_1, ow_1, oc_block_1 in T.grid(T.int64(4), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(4)):
                for n_2_init, oc_chunk_2_init, oh_2_init, ow_2_init, oc_block_2_init, n_3_init, oc_chunk_3_init, oh_3_init, ow_3_init, oc_block_3_init in T.grid(T.int64(1), T.int64(1), T.int64(7), T.int64(7), T.int64(8), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1)):
                    with T.block("conv2d_NCHWc_init"):
                        v_n = T.axis.spatial(T.int64(1), n_1 + n_2_init + n_3_init)
                        v_oc_chunk = T.axis.spatial(T.int64(4), n_0_oc_chunk_0_oh_0_fused_fused // T.int64(4) + oc_chunk_1 + oc_chunk_2_init + oc_chunk_3_init)
                        v_oh = T.axis.spatial(T.int64(28), n_0_oc_chunk_0_oh_0_fused_fused % T.int64(4) * T.int64(7) + oh_1 * T.int64(7) + oh_2_init + oh_3_init)
                        v_ow = T.axis.spatial(T.int64(28), ow_0 * T.int64(7) + ow_1 * T.int64(7) + ow_2_init + ow_3_init)
                        v_oc_block = T.axis.spatial(T.int64(32), oc_block_0 * T.int64(32) + oc_block_1 * T.int64(8) + oc_block_2_init + oc_block_3_init)
                        T.reads()
                        T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                        T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                        conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = T.float32(0)
                for ic_0, kh_0, kw_0, n_2, oc_chunk_2, oh_2, ow_2, oc_block_2, ic_1, kh_1, kw_1, n_3, oc_chunk_3, oh_3, ow_3, oc_block_3 in T.grid(T.int64(128), T.int64(3), T.int64(3), T.int64(1), T.int64(1), T.int64(7), T.int64(7), T.int64(8), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1)):
                    with T.block("conv2d_NCHWc_update"):
                        v_n = T.axis.spatial(T.int64(1), n_1 + n_2 + n_3)
                        v_oc_chunk = T.axis.spatial(T.int64(4), n_0_oc_chunk_0_oh_0_fused_fused // T.int64(4) + oc_chunk_1 + oc_chunk_2 + oc_chunk_3)
                        v_oh = T.axis.spatial(T.int64(28), n_0_oc_chunk_0_oh_0_fused_fused % T.int64(4) * T.int64(7) + oh_1 * T.int64(7) + oh_2 + oh_3)
                        v_ow = T.axis.spatial(T.int64(28), ow_0 * T.int64(7) + ow_1 * T.int64(7) + ow_2 + ow_3)
                        v_oc_block = T.axis.spatial(T.int64(32), oc_block_0 * T.int64(32) + oc_block_1 * T.int64(8) + oc_block_2 + oc_block_3)
                        v_ic = T.axis.reduce(T.int64(128), ic_0 + ic_1)
                        v_kh = T.axis.reduce(T.int64(3), kh_0 + kh_1)
                        v_kw = T.axis.reduce(T.int64(3), kw_0 + kw_1)
                        T.reads(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block], data_pad[v_n, v_ic // T.int64(128), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(128)], p1[v_oc_chunk, v_ic // T.int64(128), v_kh, v_kw, v_ic % T.int64(128), v_oc_block])
                        T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                        T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                        conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] + data_pad[v_n, v_ic // T.int64(128), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(128)] * p1[v_oc_chunk, v_ic // T.int64(128), v_kh, v_kw, v_ic % T.int64(128), v_oc_block]
        for ax0_ax1_ax2_ax3_ax4_fused_0 in T.parallel(T.int64(1568)):
            for ax0_ax1_ax2_ax3_ax4_fused_1 in T.vectorized(T.int64(64)):
                with T.block("T_relu"):
                    v_ax0 = T.axis.spatial(T.int64(1), T.int64(0))
                    v_ax1 = T.axis.spatial(T.int64(4), (ax0_ax1_ax2_ax3_ax4_fused_0 * T.int64(64) + ax0_ax1_ax2_ax3_ax4_fused_1) // T.int64(25088))
                    v_ax2 = T.axis.spatial(T.int64(28), (ax0_ax1_ax2_ax3_ax4_fused_0 * T.int64(64) + ax0_ax1_ax2_ax3_ax4_fused_1) % T.int64(25088) // T.int64(896))
                    v_ax3 = T.axis.spatial(T.int64(28), (ax0_ax1_ax2_ax3_ax4_fused_0 * T.int64(64) + ax0_ax1_ax2_ax3_ax4_fused_1) % T.int64(896) // T.int64(32))
                    v_ax4 = T.axis.spatial(T.int64(32), (ax0_ax1_ax2_ax3_ax4_fused_0 * T.int64(64) + ax0_ax1_ax2_ax3_ax4_fused_1) % T.int64(32))
                    T.reads(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4], p3[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                    T.writes(T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                    T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.max(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] + p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4] + p3[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], T.float32(0))
b0 = sch.get_block(name="data_pad", func_name="main")
b1 = sch.get_block(name="conv2d_NCHWc", func_name="main")
b2 = sch.get_block(name="T_add", func_name="main")
b3 = sch.get_block(name="T_add_1", func_name="main")
b4 = sch.get_block(name="root", func_name="main")
sch.compute_inline(block=b3)
sch.compute_inline(block=b2)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSRSRS")
l5, l6, l7, l8, l9, l10, l11, l12 = sch.get_loops(block=b1)
v13, v14, v15, v16 = sch.sample_perfect_tile(loop=l5, n=4, max_innermost_factor=64, decision=[1, 1, 1, 1])
l17, l18, l19, l20 = sch.split(loop=l5, factors=[v13, v14, v15, v16], preserve_unit_iters=True)
v21, v22, v23, v24 = sch.sample_perfect_tile(loop=l6, n=4, max_innermost_factor=64, decision=[4, 1, 1, 1])
l25, l26, l27, l28 = sch.split(loop=l6, factors=[v21, v22, v23, v24], preserve_unit_iters=True)
v29, v30, v31, v32 = sch.sample_perfect_tile(loop=l7, n=4, max_innermost_factor=64, decision=[4, 1, 7, 1])
l33, l34, l35, l36 = sch.split(loop=l7, factors=[v29, v30, v31, v32], preserve_unit_iters=True)
v37, v38, v39, v40 = sch.sample_perfect_tile(loop=l8, n=4, max_innermost_factor=64, decision=[4, 1, 7, 1])
l41, l42, l43, l44 = sch.split(loop=l8, factors=[v37, v38, v39, v40], preserve_unit_iters=True)
v45, v46, v47, v48 = sch.sample_perfect_tile(loop=l9, n=4, max_innermost_factor=64, decision=[1, 4, 8, 1])
l49, l50, l51, l52 = sch.split(loop=l9, factors=[v45, v46, v47, v48], preserve_unit_iters=True)
v53, v54 = sch.sample_perfect_tile(loop=l10, n=2, max_innermost_factor=64, decision=[128, 1])
l55, l56 = sch.split(loop=l10, factors=[v53, v54], preserve_unit_iters=True)
v57, v58 = sch.sample_perfect_tile(loop=l11, n=2, max_innermost_factor=64, decision=[3, 1])
l59, l60 = sch.split(loop=l11, factors=[v57, v58], preserve_unit_iters=True)
v61, v62 = sch.sample_perfect_tile(loop=l12, n=2, max_innermost_factor=64, decision=[3, 1])
l63, l64 = sch.split(loop=l12, factors=[v61, v62], preserve_unit_iters=True)
sch.reorder(l17, l25, l33, l41, l49, l18, l26, l34, l42, l50, l55, l59, l63, l19, l27, l35, l43, l51, l56, l60, l64, l20, l28, l36, l44, l52)
sch.annotate(block_or_loop=b4, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b4, ann_key="meta_schedule.vectorize", ann_val=64)
v65 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b4, ann_key="meta_schedule.unroll_explicit", ann_val=v65)
l66 = sch.sample_compute_location(block=b0, decision=2)
sch.compute_at(block=b0, loop=l66, preserve_unit_loops=True, index=-1)
sch.enter_postproc()
b67 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b67, ann_key="meta_schedule.parallel")
sch.unannotate(block_or_loop=b67, ann_key="meta_schedule.vectorize")
sch.unannotate(block_or_loop=b67, ann_key="meta_schedule.unroll_explicit")
b68, b69, b70 = sch.get_child_blocks(b67)
l71, l72, l73, l74, l75, l76, l77, l78 = sch.get_loops(block=b68)
l79 = sch.fuse(l71, l72, l73, preserve_unit_iters=True)
sch.parallel(loop=l79)
l80, l81, l82, l83, l84, l85, l86, l87, l88, l89, l90, l91, l92, l93, l94, l95, l96, l97, l98, l99, l100, l101, l102, l103 = sch.get_loops(block=b69)
l104 = sch.fuse(l80, preserve_unit_iters=True)
sch.parallel(loop=l104)
sch.annotate(block_or_loop=l104, ann_key="pragma_auto_unroll_max_step", ann_val=512)
sch.annotate(block_or_loop=l104, ann_key="pragma_unroll_explicit", ann_val=1)
l105, l106, l107, l108, l109 = sch.get_loops(block=b70)
l110 = sch.fuse(l105, l106, l107, l108, l109, preserve_unit_iters=True)
l111, l112 = sch.split(loop=l110, factors=[None, 64], preserve_unit_iters=True)
sch.parallel(loop=l111)
sch.vectorize(loop=l112)
b113 = sch.get_block(name="conv2d_NCHWc", func_name="main")
l114, l115, l116, l117, l118, l119, l120, l121, l122, l123, l124, l125, l126, l127, l128, l129, l130, l131, l132, l133, l134, l135, l136, l137 = sch.get_loops(block=b113)
b138 = sch.decompose_reduction(block=b113, loop=l122)
2024-04-28 21:52:20 [INFO] [task_scheduler.cc:121] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_1] Trial #256: Error in building:
LocalBuilder: Timeout, killed after 30.0 seconds
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(1), T.int64(28), T.int64(28), T.int64(128)), "float32"), p1: T.Buffer((T.int64(4), T.int64(1), T.int64(3), T.int64(3), T.int64(128), T.int64(32)), "float32"), p2: T.Buffer((T.int64(1), T.int64(4), T.int64(1), T.int64(1), T.int64(32)), "float32"), p3: T.Buffer((T.int64(1), T.int64(4), T.int64(28), T.int64(28), T.int64(32)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(4), T.int64(28), T.int64(28), T.int64(32)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        data_pad = T.alloc_buffer((T.int64(1), T.int64(1), T.int64(30), T.int64(30), T.int64(128)))
        conv2d_NCHWc = T.alloc_buffer((T.int64(1), T.int64(4), T.int64(28), T.int64(28), T.int64(32)))
        for n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_fused_fused in T.parallel(T.int64(2), annotations={"pragma_auto_unroll_max_step": 512, "pragma_unroll_explicit": 1}):
            for ax0, ax1, ax2, ax3, ax4 in T.grid(T.int64(1), T.int64(1), T.int64(30), T.int64(30), T.int64(128)):
                with T.block("data_pad"):
                    v_i0, v_i1, v_i2, v_i3, v_i4 = T.axis.remap("SSSSS", [ax0, ax1, ax2, ax3, ax4])
                    T.reads(p0[v_i0, v_i1, v_i2 - T.int64(1), v_i3 - T.int64(1), v_i4])
                    T.writes(data_pad[v_i0, v_i1, v_i2, v_i3, v_i4])
                    data_pad[v_i0, v_i1, v_i2, v_i3, v_i4] = T.if_then_else(T.int64(1) <= v_i2 and v_i2 < T.int64(29) and T.int64(1) <= v_i3 and v_i3 < T.int64(29), p0[v_i0, v_i1, v_i2 - T.int64(1), v_i3 - T.int64(1), v_i4], T.float32(0))
            for n_1, oc_chunk_1, oh_1, ow_1, oc_block_1 in T.grid(T.int64(1), T.int64(2), T.int64(1), T.int64(1), T.int64(1)):
                for n_2_init, oc_chunk_2_init, oh_2_init, ow_2_init, oc_block_2_init, n_3_init, oc_chunk_3_init, oh_3_init, ow_3_init in T.grid(T.int64(1), T.int64(1), T.int64(7), T.int64(1), T.int64(8), T.int64(1), T.int64(2), T.int64(4), T.int64(28)):
                    for oc_block_3_fused_init in T.vectorized(T.int64(2)):
                        with T.block("conv2d_NCHWc_init"):
                            v_n = T.axis.spatial(T.int64(1), n_1 + n_2_init + n_3_init)
                            v_oc_chunk = T.axis.spatial(T.int64(4), oc_chunk_1 * T.int64(2) + oc_chunk_2_init * T.int64(2) + oc_chunk_3_init)
                            v_oh = T.axis.spatial(T.int64(28), oh_1 * T.int64(28) + oh_2_init * T.int64(4) + oh_3_init)
                            v_ow = T.axis.spatial(T.int64(28), ow_1 * T.int64(28) + ow_2_init * T.int64(28) + ow_3_init)
                            v_oc_block = T.axis.spatial(T.int64(32), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_fused_fused * T.int64(16) + oc_block_1 * T.int64(16) + oc_block_2_init * T.int64(2) + oc_block_3_fused_init)
                            T.reads()
                            T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                            T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                            conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = T.float32(0)
                for ic_0, kh_0, kw_0, n_2, oc_chunk_2, oh_2, ow_2, oc_block_2, ic_1, kh_1, kw_1, n_3, oc_chunk_3, oh_3, ow_3 in T.grid(T.int64(64), T.int64(3), T.int64(1), T.int64(1), T.int64(1), T.int64(7), T.int64(1), T.int64(8), T.int64(2), T.int64(1), T.int64(3), T.int64(1), T.int64(2), T.int64(4), T.int64(28)):
                    for oc_block_3_fused in T.vectorized(T.int64(2)):
                        with T.block("conv2d_NCHWc_update"):
                            v_n = T.axis.spatial(T.int64(1), n_1 + n_2 + n_3)
                            v_oc_chunk = T.axis.spatial(T.int64(4), oc_chunk_1 * T.int64(2) + oc_chunk_2 * T.int64(2) + oc_chunk_3)
                            v_oh = T.axis.spatial(T.int64(28), oh_1 * T.int64(28) + oh_2 * T.int64(4) + oh_3)
                            v_ow = T.axis.spatial(T.int64(28), ow_1 * T.int64(28) + ow_2 * T.int64(28) + ow_3)
                            v_oc_block = T.axis.spatial(T.int64(32), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_fused_fused * T.int64(16) + oc_block_1 * T.int64(16) + oc_block_2 * T.int64(2) + oc_block_3_fused)
                            v_ic = T.axis.reduce(T.int64(128), ic_0 * T.int64(2) + ic_1)
                            v_kh = T.axis.reduce(T.int64(3), kh_0 + kh_1)
                            v_kw = T.axis.reduce(T.int64(3), kw_0 * T.int64(3) + kw_1)
                            T.reads(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block], data_pad[v_n, v_ic // T.int64(128), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(128)], p1[v_oc_chunk, v_ic // T.int64(128), v_kh, v_kw, v_ic % T.int64(128), v_oc_block])
                            T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                            T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                            conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] + data_pad[v_n, v_ic // T.int64(128), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(128)] * p1[v_oc_chunk, v_ic // T.int64(128), v_kh, v_kw, v_ic % T.int64(128), v_oc_block]
                for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(2), T.int64(28), T.int64(28)):
                    for ax4_fused in T.vectorized(T.int64(16)):
                        with T.block("T_relu"):
                            v_ax0 = T.axis.spatial(T.int64(1), ax0)
                            v_ax1 = T.axis.spatial(T.int64(4), oc_chunk_1 * T.int64(2) + ax1)
                            v_ax2, v_ax3 = T.axis.remap("SS", [ax2, ax3])
                            v_ax4 = T.axis.spatial(T.int64(32), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_fused_fused * T.int64(16) + ax4_fused)
                            T.reads(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4], p3[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                            T.writes(T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                            T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.max(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] + p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4] + p3[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], T.float32(0))
b0 = sch.get_block(name="data_pad", func_name="main")
b1 = sch.get_block(name="conv2d_NCHWc", func_name="main")
b2 = sch.get_block(name="T_add", func_name="main")
b3 = sch.get_block(name="T_add_1", func_name="main")
b4 = sch.get_block(name="root", func_name="main")
sch.compute_inline(block=b3)
sch.compute_inline(block=b2)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSRSRS")
l5, l6, l7, l8, l9, l10, l11, l12 = sch.get_loops(block=b1)
v13, v14, v15, v16 = sch.sample_perfect_tile(loop=l5, n=4, max_innermost_factor=64, decision=[1, 1, 1, 1])
l17, l18, l19, l20 = sch.split(loop=l5, factors=[v13, v14, v15, v16], preserve_unit_iters=True)
v21, v22, v23, v24 = sch.sample_perfect_tile(loop=l6, n=4, max_innermost_factor=64, decision=[1, 2, 1, 2])
l25, l26, l27, l28 = sch.split(loop=l6, factors=[v21, v22, v23, v24], preserve_unit_iters=True)
v29, v30, v31, v32 = sch.sample_perfect_tile(loop=l7, n=4, max_innermost_factor=64, decision=[1, 1, 7, 4])
l33, l34, l35, l36 = sch.split(loop=l7, factors=[v29, v30, v31, v32], preserve_unit_iters=True)
v37, v38, v39, v40 = sch.sample_perfect_tile(loop=l8, n=4, max_innermost_factor=64, decision=[1, 1, 1, 28])
l41, l42, l43, l44 = sch.split(loop=l8, factors=[v37, v38, v39, v40], preserve_unit_iters=True)
v45, v46, v47, v48 = sch.sample_perfect_tile(loop=l9, n=4, max_innermost_factor=64, decision=[2, 1, 8, 2])
l49, l50, l51, l52 = sch.split(loop=l9, factors=[v45, v46, v47, v48], preserve_unit_iters=True)
v53, v54 = sch.sample_perfect_tile(loop=l10, n=2, max_innermost_factor=64, decision=[64, 2])
l55, l56 = sch.split(loop=l10, factors=[v53, v54], preserve_unit_iters=True)
v57, v58 = sch.sample_perfect_tile(loop=l11, n=2, max_innermost_factor=64, decision=[3, 1])
l59, l60 = sch.split(loop=l11, factors=[v57, v58], preserve_unit_iters=True)
v61, v62 = sch.sample_perfect_tile(loop=l12, n=2, max_innermost_factor=64, decision=[1, 3])
l63, l64 = sch.split(loop=l12, factors=[v61, v62], preserve_unit_iters=True)
sch.reorder(l17, l25, l33, l41, l49, l18, l26, l34, l42, l50, l55, l59, l63, l19, l27, l35, l43, l51, l56, l60, l64, l20, l28, l36, l44, l52)
b65, = sch.get_consumers(block=b1)
sch.reverse_compute_at(block=b65, loop=l50, preserve_unit_loops=True, index=-1)
sch.annotate(block_or_loop=b4, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b4, ann_key="meta_schedule.vectorize", ann_val=64)
v66 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b4, ann_key="meta_schedule.unroll_explicit", ann_val=v66)
l67 = sch.sample_compute_location(block=b0, decision=4)
sch.compute_at(block=b0, loop=l67, preserve_unit_loops=True, index=-1)
sch.enter_postproc()
b68 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b68, ann_key="meta_schedule.parallel")
sch.unannotate(block_or_loop=b68, ann_key="meta_schedule.vectorize")
sch.unannotate(block_or_loop=b68, ann_key="meta_schedule.unroll_explicit")
b69, b70, b71 = sch.get_child_blocks(b68)
l72, l73, l74, l75, l76, l77, l78, l79, l80, l81 = sch.get_loops(block=b69)
l82 = sch.fuse(l72, l73, l74, l75, l76, preserve_unit_iters=True)
sch.parallel(loop=l82)
l83, l84, l85, l86, l87, l88, l89, l90, l91, l92, l93, l94, l95, l96, l97, l98, l99, l100, l101, l102, l103, l104 = sch.get_loops(block=b70)
l105 = sch.fuse(l83, preserve_unit_iters=True)
sch.parallel(loop=l105)
l106 = sch.fuse(l104, preserve_unit_iters=True)
sch.vectorize(loop=l106)
sch.annotate(block_or_loop=l105, ann_key="pragma_auto_unroll_max_step", ann_val=512)
sch.annotate(block_or_loop=l105, ann_key="pragma_unroll_explicit", ann_val=1)
l107, l108, l109, l110, l111, l112, l113, l114, l115, l116, l117 = sch.get_loops(block=b71)
l118 = sch.fuse(l117, preserve_unit_iters=True)
sch.vectorize(loop=l118)
b119 = sch.get_block(name="conv2d_NCHWc", func_name="main")
l120, l121, l122, l123, l124, l125, l126, l127, l128, l129, l130, l131, l132, l133, l134, l135, l136, l137, l138, l139, l140, l141 = sch.get_loops(block=b119)
b142 = sch.decompose_reduction(block=b119, loop=l126)
2024-04-28 21:57:49 [INFO] [evolutionary_search.cc:713] Generating candidates......
2024-04-28 21:57:51 [INFO] [evolutionary_search.cc:715] Picked top 102 candidate(s) from database
2024-04-28 21:57:55 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x3858de8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x3c39958)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0xa2a8408)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x3f4f298)]: 0 failure(s)
2024-04-28 21:57:55 [INFO] [evolutionary_search.cc:723] Sampled 410 candidate(s)
2024-04-28 21:58:08 [INFO] [evolutionary_search.cc:621] Evolve iter #0 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x3858de8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x3c39958)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0xa2a8408)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x3f4f298)]: 0 failure(s)
2024-04-28 21:58:20 [INFO] [evolutionary_search.cc:621] Evolve iter #1 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x3858de8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x3c39958)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0xa2a8408)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x3f4f298)]: 0 failure(s)
2024-04-28 21:58:32 [INFO] [evolutionary_search.cc:621] Evolve iter #2 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x3858de8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x3c39958)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0xa2a8408)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x3f4f298)]: 0 failure(s)
2024-04-28 21:58:44 [INFO] [evolutionary_search.cc:621] Evolve iter #3 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x3858de8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x3c39958)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0xa2a8408)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x3f4f298)]: 0 failure(s)
2024-04-28 21:58:50 [INFO] [evolutionary_search.cc:649] Scores of the best 64 candidates:
[1 : 16]:	0.8556  0.8443  0.8443  0.8075  0.7962  0.7617  0.7286  0.7246  0.7246  0.7246  0.7246  0.7246  0.7246  0.7233  0.7114  0.7087
[17 : 32]:	0.7057  0.7057  0.7057  0.7057  0.7057  0.7057  0.7057  0.7057  0.7021  0.7019  0.6934  0.6906  0.6905  0.6892  0.6743  0.6743
[33 : 48]:	0.6743  0.6730  0.6472  0.6464  0.6435  0.6402  0.6355  0.6349  0.6349  0.6315  0.6309  0.6293  0.6292  0.6288  0.6273  0.6273
[49 : 64]:	0.6273  0.6273  0.6273  0.6273  0.6273  0.6273  0.6273  0.6273  0.6273  0.6273  0.6267  0.6267  0.6259  0.6257  0.6257  0.6257
2024-04-28 21:58:51 [INFO] [evolutionary_search.cc:727] Got 64 candidate(s) with evolutionary search
2024-04-28 21:58:51 [INFO] [evolutionary_search.cc:730] Sending 64 candidates(s) for measurement
2024-04-28 22:00:13 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_1] Trial #257: GFLOPs: 149.7360. Time: 1546.1351 us. Best GFLOPs: 325.8150
2024-04-28 22:00:13 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_1] Trial #258: GFLOPs: 283.9851. Time: 815.2260 us. Best GFLOPs: 325.8150
2024-04-28 22:00:13 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_1] Trial #259: GFLOPs: 282.4499. Time: 819.6571 us. Best GFLOPs: 325.8150
2024-04-28 22:00:13 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_1] Trial #260: GFLOPs: 278.8379. Time: 830.2748 us. Best GFLOPs: 325.8150
2024-04-28 22:00:13 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_1] Trial #261: GFLOPs: 295.1808. Time: 784.3060 us. Best GFLOPs: 325.8150
2024-04-28 22:00:13 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_1] Trial #262: GFLOPs: 146.2926. Time: 1582.5274 us. Best GFLOPs: 325.8150
2024-04-28 22:00:13 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_1] Trial #263: GFLOPs: 110.7309. Time: 2090.7628 us. Best GFLOPs: 325.8150
2024-04-28 22:00:13 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_1] Trial #264: GFLOPs: 110.6756. Time: 2091.8079 us. Best GFLOPs: 325.8150
2024-04-28 22:00:13 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_1] Trial #265: GFLOPs: 200.3832. Time: 1155.3470 us. Best GFLOPs: 325.8150
2024-04-28 22:00:13 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_1] Trial #266: GFLOPs: 382.7978. Time: 604.7894 us. Best GFLOPs: 382.7978
2024-04-28 22:00:13 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_1] Trial #267: GFLOPs: 143.3623. Time: 1614.8745 us. Best GFLOPs: 382.7978
2024-04-28 22:00:13 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_1] Trial #268: GFLOPs: 207.0903. Time: 1117.9281 us. Best GFLOPs: 382.7978
2024-04-28 22:00:13 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_1] Trial #269: GFLOPs: 99.6590. Time: 2323.0411 us. Best GFLOPs: 382.7978
2024-04-28 22:00:13 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_1] Trial #270: GFLOPs: 293.8207. Time: 787.9365 us. Best GFLOPs: 382.7978
2024-04-28 22:00:13 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_1] Trial #271: GFLOPs: 187.1645. Time: 1236.9445 us. Best GFLOPs: 382.7978
2024-04-28 22:00:13 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_1] Trial #272: GFLOPs: 182.3111. Time: 1269.8736 us. Best GFLOPs: 382.7978
2024-04-28 22:00:13 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_1] Trial #273: GFLOPs: 169.5940. Time: 1365.0956 us. Best GFLOPs: 382.7978
2024-04-28 22:00:13 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_1] Trial #274: GFLOPs: 102.6688. Time: 2254.9408 us. Best GFLOPs: 382.7978
2024-04-28 22:00:13 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_1] Trial #275: GFLOPs: 165.0663. Time: 1402.5395 us. Best GFLOPs: 382.7978
2024-04-28 22:00:13 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_1] Trial #276: GFLOPs: 102.1833. Time: 2265.6541 us. Best GFLOPs: 382.7978
2024-04-28 22:00:13 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_1] Trial #277: GFLOPs: 165.4764. Time: 1399.0639 us. Best GFLOPs: 382.7978
2024-04-28 22:00:13 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_1] Trial #278: GFLOPs: 119.1852. Time: 1942.4567 us. Best GFLOPs: 382.7978
2024-04-28 22:00:13 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_1] Trial #279: GFLOPs: 165.5858. Time: 1398.1393 us. Best GFLOPs: 382.7978
2024-04-28 22:00:13 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_1] Trial #280: GFLOPs: 300.1310. Time: 771.3700 us. Best GFLOPs: 382.7978
2024-04-28 22:00:13 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_1] Trial #281: GFLOPs: 143.9419. Time: 1608.3716 us. Best GFLOPs: 382.7978
2024-04-28 22:00:13 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_1] Trial #282: GFLOPs: 137.1990. Time: 1687.4185 us. Best GFLOPs: 382.7978
2024-04-28 22:00:13 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_1] Trial #283: GFLOPs: 261.8817. Time: 884.0330 us. Best GFLOPs: 382.7978
2024-04-28 22:00:13 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_1] Trial #284: GFLOPs: 163.2382. Time: 1418.2465 us. Best GFLOPs: 382.7978
2024-04-28 22:00:13 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_1] Trial #285: GFLOPs: 156.6268. Time: 1478.1131 us. Best GFLOPs: 382.7978
2024-04-28 22:00:13 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_1] Trial #286: GFLOPs: 161.0355. Time: 1437.6464 us. Best GFLOPs: 382.7978
2024-04-28 22:00:13 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_1] Trial #287: GFLOPs: 156.0820. Time: 1483.2724 us. Best GFLOPs: 382.7978
2024-04-28 22:00:13 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_1] Trial #288: GFLOPs: 102.0540. Time: 2268.5241 us. Best GFLOPs: 382.7978
2024-04-28 22:00:13 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_1] Trial #289: GFLOPs: 186.8331. Time: 1239.1385 us. Best GFLOPs: 382.7978
2024-04-28 22:00:13 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_1] Trial #290: GFLOPs: 197.0776. Time: 1174.7257 us. Best GFLOPs: 382.7978
2024-04-28 22:00:13 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_1] Trial #291: GFLOPs: 206.6179. Time: 1120.4839 us. Best GFLOPs: 382.7978
2024-04-28 22:00:13 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_1] Trial #292: GFLOPs: 185.4863. Time: 1248.1357 us. Best GFLOPs: 382.7978
2024-04-28 22:00:13 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_1] Trial #293: GFLOPs: 200.1315. Time: 1156.7995 us. Best GFLOPs: 382.7978
2024-04-28 22:00:13 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_1] Trial #294: GFLOPs: 223.0540. Time: 1037.9192 us. Best GFLOPs: 382.7978
2024-04-28 22:00:13 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_1] Trial #295: GFLOPs: 173.2447. Time: 1336.3301 us. Best GFLOPs: 382.7978
2024-04-28 22:00:13 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_1] Trial #296: GFLOPs: 185.9966. Time: 1244.7111 us. Best GFLOPs: 382.7978
2024-04-28 22:00:13 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_1] Trial #297: GFLOPs: 184.1758. Time: 1257.0169 us. Best GFLOPs: 382.7978
2024-04-28 22:00:13 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_1] Trial #298: GFLOPs: 158.9583. Time: 1456.4323 us. Best GFLOPs: 382.7978
2024-04-28 22:00:13 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_1] Trial #299: GFLOPs: 160.7700. Time: 1440.0207 us. Best GFLOPs: 382.7978
2024-04-28 22:00:13 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_1] Trial #300: GFLOPs: 217.2975. Time: 1065.4153 us. Best GFLOPs: 382.7978
2024-04-28 22:00:13 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_1] Trial #301: GFLOPs: 262.6980. Time: 881.2859 us. Best GFLOPs: 382.7978
2024-04-28 22:00:13 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_1] Trial #302: GFLOPs: 281.1438. Time: 823.4649 us. Best GFLOPs: 382.7978
2024-04-28 22:00:13 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_1] Trial #303: GFLOPs: 101.8067. Time: 2274.0346 us. Best GFLOPs: 382.7978
2024-04-28 22:00:13 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_1] Trial #304: GFLOPs: 165.9241. Time: 1395.2889 us. Best GFLOPs: 382.7978
2024-04-28 22:00:13 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_1] Trial #305: GFLOPs: 91.2665. Time: 2536.6602 us. Best GFLOPs: 382.7978
2024-04-28 22:00:13 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_1] Trial #306: GFLOPs: 268.8494. Time: 861.1217 us. Best GFLOPs: 382.7978
2024-04-28 22:00:13 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_1] Trial #307: GFLOPs: 165.0715. Time: 1402.4957 us. Best GFLOPs: 382.7978
2024-04-28 22:00:13 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_1] Trial #308: GFLOPs: 84.9960. Time: 2723.7988 us. Best GFLOPs: 382.7978
2024-04-28 22:00:13 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_1] Trial #309: GFLOPs: 165.4283. Time: 1399.4706 us. Best GFLOPs: 382.7978
2024-04-28 22:00:13 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_1] Trial #310: GFLOPs: 90.6953. Time: 2552.6360 us. Best GFLOPs: 382.7978
2024-04-28 22:00:13 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_1] Trial #311: GFLOPs: 261.7122. Time: 884.6056 us. Best GFLOPs: 382.7978
2024-04-28 22:00:13 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_1] Trial #312: GFLOPs: 222.9168. Time: 1038.5581 us. Best GFLOPs: 382.7978
2024-04-28 22:00:13 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_1] Trial #313: GFLOPs: 119.9151. Time: 1930.6335 us. Best GFLOPs: 382.7978
2024-04-28 22:00:13 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_1] Trial #314: GFLOPs: 55.1902. Time: 4194.8064 us. Best GFLOPs: 382.7978
2024-04-28 22:00:13 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_1] Trial #315: GFLOPs: 101.3411. Time: 2284.4825 us. Best GFLOPs: 382.7978
2024-04-28 22:00:13 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_1] Trial #316: GFLOPs: 139.5885. Time: 1658.5323 us. Best GFLOPs: 382.7978
2024-04-28 22:00:13 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_1] Trial #317: GFLOPs: 166.5811. Time: 1389.7860 us. Best GFLOPs: 382.7978
2024-04-28 22:00:13 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_1] Trial #318: GFLOPs: 65.4843. Time: 3535.3811 us. Best GFLOPs: 382.7978
2024-04-28 22:00:13 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_1] Trial #319: GFLOPs: 1.8578. Time: 124617.2107 us. Best GFLOPs: 382.7978
2024-04-28 22:00:13 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_1] Trial #320: GFLOPs: 147.0182. Time: 1574.7168 us. Best GFLOPs: 382.7978
2024-04-28 22:25:16 [INFO] [evolutionary_search.cc:713] Generating candidates......
2024-04-28 22:25:17 [INFO] [evolutionary_search.cc:715] Picked top 102 candidate(s) from database
2024-04-28 22:25:21 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x3858de8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x3c39958)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0xa2a8408)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x3f4f298)]: 0 failure(s)
2024-04-28 22:25:21 [INFO] [evolutionary_search.cc:723] Sampled 410 candidate(s)
2024-04-28 22:25:34 [INFO] [evolutionary_search.cc:621] Evolve iter #0 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x3858de8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x3c39958)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0xa2a8408)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x3f4f298)]: 0 failure(s)
2024-04-28 22:25:46 [INFO] [evolutionary_search.cc:621] Evolve iter #1 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x3858de8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x3c39958)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0xa2a8408)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x3f4f298)]: 0 failure(s)
2024-04-28 22:25:58 [INFO] [evolutionary_search.cc:621] Evolve iter #2 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x3858de8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x3c39958)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0xa2a8408)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x3f4f298)]: 0 failure(s)
2024-04-28 22:26:10 [INFO] [evolutionary_search.cc:621] Evolve iter #3 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x3858de8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x3c39958)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0xa2a8408)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x3f4f298)]: 0 failure(s)
2024-04-28 22:26:16 [INFO] [evolutionary_search.cc:649] Scores of the best 64 candidates:
[1 : 16]:	0.7314  0.7223  0.7169  0.7083  0.7064  0.6922  0.6594  0.6594  0.6413  0.6323  0.6323  0.6180  0.6060  0.5994  0.5994  0.5994
[17 : 32]:	0.5994  0.5994  0.5944  0.5915  0.5915  0.5862  0.5849  0.5784  0.5778  0.5769  0.5769  0.5769  0.5769  0.5769  0.5769  0.5769
[33 : 48]:	0.5743  0.5667  0.5654  0.5654  0.5654  0.5654  0.5654  0.5651  0.5651  0.5554  0.5503  0.5498  0.5466  0.5442  0.5442  0.5352
[49 : 64]:	0.5348  0.5326  0.5326  0.5324  0.5291  0.5291  0.5290  0.5286  0.5268  0.5249  0.5232  0.5232  0.5232  0.5232  0.5214  0.5206
2024-04-28 22:26:17 [INFO] [evolutionary_search.cc:727] Got 64 candidate(s) with evolutionary search
2024-04-28 22:26:17 [INFO] [evolutionary_search.cc:730] Sending 64 candidates(s) for measurement
2024-04-28 22:27:42 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_1] Trial #321: GFLOPs: 294.5563. Time: 785.9689 us. Best GFLOPs: 382.7978
2024-04-28 22:27:42 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_1] Trial #322: GFLOPs: 284.1832. Time: 814.6577 us. Best GFLOPs: 382.7978
2024-04-28 22:27:42 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_1] Trial #323: GFLOPs: 279.2544. Time: 829.0366 us. Best GFLOPs: 382.7978
2024-04-28 22:27:42 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_1] Trial #324: GFLOPs: 217.9498. Time: 1062.2266 us. Best GFLOPs: 382.7978
2024-04-28 22:27:42 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_1] Trial #325: GFLOPs: 283.3891. Time: 816.9406 us. Best GFLOPs: 382.7978
2024-04-28 22:27:42 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_1] Trial #326: GFLOPs: 277.3183. Time: 834.8244 us. Best GFLOPs: 382.7978
2024-04-28 22:27:42 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_1] Trial #327: GFLOPs: 261.0404. Time: 886.8822 us. Best GFLOPs: 382.7978
2024-04-28 22:27:42 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_1] Trial #328: GFLOPs: 261.1938. Time: 886.3612 us. Best GFLOPs: 382.7978
2024-04-28 22:27:42 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_1] Trial #329: GFLOPs: 294.4671. Time: 786.2070 us. Best GFLOPs: 382.7978
2024-04-28 22:27:42 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_1] Trial #330: GFLOPs: 282.6010. Time: 819.2190 us. Best GFLOPs: 382.7978
2024-04-28 22:27:42 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_1] Trial #331: GFLOPs: 279.9915. Time: 826.8540 us. Best GFLOPs: 382.7978
2024-04-28 22:27:42 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_1] Trial #332: GFLOPs: 149.7002. Time: 1546.5052 us. Best GFLOPs: 382.7978
2024-04-28 22:27:42 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_1] Trial #333: GFLOPs: 173.7284. Time: 1332.6095 us. Best GFLOPs: 382.7978
2024-04-28 22:27:42 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_1] Trial #334: GFLOPs: 116.3703. Time: 1989.4422 us. Best GFLOPs: 382.7978
2024-04-28 22:27:42 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_1] Trial #335: GFLOPs: 274.4361. Time: 843.5920 us. Best GFLOPs: 382.7978
2024-04-28 22:27:42 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_1] Trial #336: GFLOPs: 125.8272. Time: 1839.9201 us. Best GFLOPs: 382.7978
2024-04-28 22:27:42 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_1] Trial #337: GFLOPs: 90.1642. Time: 2567.6709 us. Best GFLOPs: 382.7978
2024-04-28 22:27:42 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_1] Trial #338: GFLOPs: 297.6778. Time: 777.7271 us. Best GFLOPs: 382.7978
2024-04-28 22:27:42 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_1] Trial #339: GFLOPs: 286.7094. Time: 807.4798 us. Best GFLOPs: 382.7978
2024-04-28 22:27:42 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_1] Trial #340: GFLOPs: 103.3493. Time: 2240.0929 us. Best GFLOPs: 382.7978
2024-04-28 22:27:42 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_1] Trial #341: GFLOPs: 212.1504. Time: 1091.2638 us. Best GFLOPs: 382.7978
2024-04-28 22:27:42 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_1] Trial #342: GFLOPs: 241.7492. Time: 957.6539 us. Best GFLOPs: 382.7978
2024-04-28 22:27:42 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_1] Trial #343: GFLOPs: 167.8261. Time: 1379.4758 us. Best GFLOPs: 382.7978
2024-04-28 22:27:42 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_1] Trial #344: GFLOPs: 91.9106. Time: 2518.8823 us. Best GFLOPs: 382.7978
2024-04-28 22:27:42 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_1] Trial #345: GFLOPs: 202.8530. Time: 1141.2802 us. Best GFLOPs: 382.7978
2024-04-28 22:27:42 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_1] Trial #346: GFLOPs: 89.9288. Time: 2574.3929 us. Best GFLOPs: 382.7978
2024-04-28 22:27:42 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_1] Trial #347: GFLOPs: 201.6617. Time: 1148.0222 us. Best GFLOPs: 382.7978
2024-04-28 22:27:42 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_1] Trial #348: GFLOPs: 214.6015. Time: 1078.8000 us. Best GFLOPs: 382.7978
2024-04-28 22:27:42 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_1] Trial #349: GFLOPs: 163.5568. Time: 1415.4839 us. Best GFLOPs: 382.7978
2024-04-28 22:27:42 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_1] Trial #350: GFLOPs: 91.7858. Time: 2522.3081 us. Best GFLOPs: 382.7978
2024-04-28 22:27:42 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_1] Trial #351: GFLOPs: 98.8014. Time: 2343.2068 us. Best GFLOPs: 382.7978
2024-04-28 22:27:42 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_1] Trial #352: GFLOPs: 327.5278. Time: 706.8470 us. Best GFLOPs: 382.7978
2024-04-28 22:27:42 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_1] Trial #353: GFLOPs: 106.0740. Time: 2182.5514 us. Best GFLOPs: 382.7978
2024-04-28 22:27:42 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_1] Trial #354: GFLOPs: 103.9434. Time: 2227.2891 us. Best GFLOPs: 382.7978
2024-04-28 22:27:42 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_1] Trial #355: GFLOPs: 116.0939. Time: 1994.1786 us. Best GFLOPs: 382.7978
2024-04-28 22:27:42 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_1] Trial #356: GFLOPs: 112.7422. Time: 2053.4636 us. Best GFLOPs: 382.7978
2024-04-28 22:27:42 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_1] Trial #357: GFLOPs: 116.5683. Time: 1986.0629 us. Best GFLOPs: 382.7978
2024-04-28 22:27:42 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_1] Trial #358: GFLOPs: 210.3162. Time: 1100.7811 us. Best GFLOPs: 382.7978
2024-04-28 22:27:42 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_1] Trial #359: GFLOPs: 162.7105. Time: 1422.8463 us. Best GFLOPs: 382.7978
2024-04-28 22:27:42 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_1] Trial #360: GFLOPs: 227.0324. Time: 1019.7315 us. Best GFLOPs: 382.7978
2024-04-28 22:27:42 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_1] Trial #361: GFLOPs: 226.8992. Time: 1020.3300 us. Best GFLOPs: 382.7978
2024-04-28 22:27:42 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_1] Trial #362: GFLOPs: 298.0784. Time: 776.6817 us. Best GFLOPs: 382.7978
2024-04-28 22:27:42 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_1] Trial #363: GFLOPs: 66.1785. Time: 3498.2970 us. Best GFLOPs: 382.7978
2024-04-28 22:27:42 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_1] Trial #364: GFLOPs: 133.2827. Time: 1737.0000 us. Best GFLOPs: 382.7978
2024-04-28 22:27:42 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_1] Trial #365: GFLOPs: 255.3276. Time: 906.7255 us. Best GFLOPs: 382.7978
2024-04-28 22:27:42 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_1] Trial #366: GFLOPs: 201.1190. Time: 1151.1199 us. Best GFLOPs: 382.7978
2024-04-28 22:27:42 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_1] Trial #367: GFLOPs: 155.0889. Time: 1492.7696 us. Best GFLOPs: 382.7978
2024-04-28 22:27:42 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_1] Trial #368: GFLOPs: 542.3272. Time: 426.8863 us. Best GFLOPs: 542.3272
2024-04-28 22:27:42 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_1] Trial #369: GFLOPs: 481.4175. Time: 480.8966 us. Best GFLOPs: 542.3272
2024-04-28 22:27:42 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_1] Trial #370: GFLOPs: 151.2591. Time: 1530.5666 us. Best GFLOPs: 542.3272
2024-04-28 22:27:42 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_1] Trial #371: GFLOPs: 155.0640. Time: 1493.0094 us. Best GFLOPs: 542.3272
2024-04-28 22:27:42 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_1] Trial #372: GFLOPs: 195.7257. Time: 1182.8394 us. Best GFLOPs: 542.3272
2024-04-28 22:27:42 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_1] Trial #373: GFLOPs: 60.1067. Time: 3851.6825 us. Best GFLOPs: 542.3272
2024-04-28 22:27:42 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_1] Trial #374: GFLOPs: 198.1949. Time: 1168.1032 us. Best GFLOPs: 542.3272
2024-04-28 22:27:42 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_1] Trial #375: GFLOPs: 191.7660. Time: 1207.2631 us. Best GFLOPs: 542.3272
2024-04-28 22:27:42 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_1] Trial #376: GFLOPs: 159.6985. Time: 1449.6823 us. Best GFLOPs: 542.3272
2024-04-28 22:27:42 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_1] Trial #377: GFLOPs: 203.2254. Time: 1139.1884 us. Best GFLOPs: 542.3272
2024-04-28 22:27:42 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_1] Trial #378: GFLOPs: 457.7791. Time: 505.7287 us. Best GFLOPs: 542.3272
2024-04-28 22:27:42 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_1] Trial #379: GFLOPs: 72.3454. Time: 3200.0944 us. Best GFLOPs: 542.3272
2024-04-28 22:27:42 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_1] Trial #380: GFLOPs: 251.7443. Time: 919.6317 us. Best GFLOPs: 542.3272
2024-04-28 22:27:42 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_1] Trial #381: GFLOPs: 230.4951. Time: 1004.4123 us. Best GFLOPs: 542.3272
2024-04-28 22:27:42 [INFO] [task_scheduler.cc:121] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_1] Trial #382: Error in building:
LocalBuilder: Timeout, killed after 30.0 seconds
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(1), T.int64(28), T.int64(28), T.int64(128)), "float32"), p1: T.Buffer((T.int64(4), T.int64(1), T.int64(3), T.int64(3), T.int64(128), T.int64(32)), "float32"), p2: T.Buffer((T.int64(1), T.int64(4), T.int64(1), T.int64(1), T.int64(32)), "float32"), p3: T.Buffer((T.int64(1), T.int64(4), T.int64(28), T.int64(28), T.int64(32)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(4), T.int64(28), T.int64(28), T.int64(32)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        data_pad = T.alloc_buffer((T.int64(1), T.int64(1), T.int64(30), T.int64(30), T.int64(128)))
        conv2d_NCHWc = T.alloc_buffer((T.int64(1), T.int64(4), T.int64(28), T.int64(28), T.int64(32)))
        for n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_fused_fused in T.parallel(T.int64(1568), annotations={"pragma_auto_unroll_max_step": 512, "pragma_unroll_explicit": 1}):
            for ax0, ax1, ax2, ax3, ax4 in T.grid(T.int64(1), T.int64(1), T.int64(3), T.int64(4), T.int64(128)):
                with T.block("data_pad"):
                    v_i0, v_i1 = T.axis.remap("SS", [ax0, ax1])
                    v_i2 = T.axis.spatial(T.int64(30), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_fused_fused % T.int64(784) // T.int64(392) * T.int64(14) + n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_fused_fused % T.int64(14) + ax2)
                    v_i3 = T.axis.spatial(T.int64(30), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_fused_fused % T.int64(392) // T.int64(28) * T.int64(2) + ax3)
                    v_i4 = T.axis.spatial(T.int64(128), ax4)
                    T.reads(p0[v_i0, v_i1, v_i2 - T.int64(1), v_i3 - T.int64(1), v_i4])
                    T.writes(data_pad[v_i0, v_i1, v_i2, v_i3, v_i4])
                    data_pad[v_i0, v_i1, v_i2, v_i3, v_i4] = T.if_then_else(T.int64(1) <= v_i2 and v_i2 < T.int64(29) and T.int64(1) <= v_i3 and v_i3 < T.int64(29), p0[v_i0, v_i1, v_i2 - T.int64(1), v_i3 - T.int64(1), v_i4], T.float32(0))
            for ow_1, oc_block_1 in T.grid(T.int64(2), T.int64(8)):
                for n_2_init, oc_chunk_2_init, oh_2_init, ow_2_init, oc_block_2_init, n_3_init, oc_chunk_3_init, oh_3_init, ow_3_init, oc_block_3_init in T.grid(T.int64(1), T.int64(2), T.int64(1), T.int64(1), T.int64(2), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1)):
                    with T.block("conv2d_NCHWc_init"):
                        v_n = T.axis.spatial(T.int64(1), n_2_init + n_3_init)
                        v_oc_chunk = T.axis.spatial(T.int64(4), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_fused_fused // T.int64(784) * T.int64(2) + oc_chunk_2_init + oc_chunk_3_init)
                        v_oh = T.axis.spatial(T.int64(28), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_fused_fused % T.int64(784) // T.int64(392) * T.int64(14) + n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_fused_fused % T.int64(14) + oh_2_init + oh_3_init)
                        v_ow = T.axis.spatial(T.int64(28), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_fused_fused % T.int64(392) // T.int64(28) * T.int64(2) + ow_1 + ow_2_init + ow_3_init)
                        v_oc_block = T.axis.spatial(T.int64(32), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_fused_fused % T.int64(28) // T.int64(14) * T.int64(16) + oc_block_1 * T.int64(2) + oc_block_2_init + oc_block_3_init)
                        T.reads()
                        T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                        T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                        conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = T.float32(0)
                for ic_0, kh_0, kw_0, n_2, oc_chunk_2, oh_2, ow_2, oc_block_2, ic_1, kh_1, kw_1, n_3, oc_chunk_3, oh_3, ow_3, oc_block_3 in T.grid(T.int64(4), T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(1), T.int64(1), T.int64(2), T.int64(32), T.int64(3), T.int64(3), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1)):
                    with T.block("conv2d_NCHWc_update"):
                        v_n = T.axis.spatial(T.int64(1), n_2 + n_3)
                        v_oc_chunk = T.axis.spatial(T.int64(4), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_fused_fused // T.int64(784) * T.int64(2) + oc_chunk_2 + oc_chunk_3)
                        v_oh = T.axis.spatial(T.int64(28), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_fused_fused % T.int64(784) // T.int64(392) * T.int64(14) + n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_fused_fused % T.int64(14) + oh_2 + oh_3)
                        v_ow = T.axis.spatial(T.int64(28), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_fused_fused % T.int64(392) // T.int64(28) * T.int64(2) + ow_1 + ow_2 + ow_3)
                        v_oc_block = T.axis.spatial(T.int64(32), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_fused_fused % T.int64(28) // T.int64(14) * T.int64(16) + oc_block_1 * T.int64(2) + oc_block_2 + oc_block_3)
                        v_ic = T.axis.reduce(T.int64(128), ic_0 * T.int64(32) + ic_1)
                        v_kh = T.axis.reduce(T.int64(3), kh_0 * T.int64(3) + kh_1)
                        v_kw = T.axis.reduce(T.int64(3), kw_0 * T.int64(3) + kw_1)
                        T.reads(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block], data_pad[v_n, v_ic // T.int64(128), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(128)], p1[v_oc_chunk, v_ic // T.int64(128), v_kh, v_kw, v_ic % T.int64(128), v_oc_block])
                        T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                        T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                        conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] + data_pad[v_n, v_ic // T.int64(128), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(128)] * p1[v_oc_chunk, v_ic // T.int64(128), v_kh, v_kw, v_ic % T.int64(128), v_oc_block]
        for ax0_ax1_ax2_ax3_ax4_fused_0 in T.parallel(T.int64(1568)):
            for ax0_ax1_ax2_ax3_ax4_fused_1 in T.vectorized(T.int64(64)):
                with T.block("T_relu"):
                    v_ax0 = T.axis.spatial(T.int64(1), T.int64(0))
                    v_ax1 = T.axis.spatial(T.int64(4), (ax0_ax1_ax2_ax3_ax4_fused_0 * T.int64(64) + ax0_ax1_ax2_ax3_ax4_fused_1) // T.int64(25088))
                    v_ax2 = T.axis.spatial(T.int64(28), (ax0_ax1_ax2_ax3_ax4_fused_0 * T.int64(64) + ax0_ax1_ax2_ax3_ax4_fused_1) % T.int64(25088) // T.int64(896))
                    v_ax3 = T.axis.spatial(T.int64(28), (ax0_ax1_ax2_ax3_ax4_fused_0 * T.int64(64) + ax0_ax1_ax2_ax3_ax4_fused_1) % T.int64(896) // T.int64(32))
                    v_ax4 = T.axis.spatial(T.int64(32), (ax0_ax1_ax2_ax3_ax4_fused_0 * T.int64(64) + ax0_ax1_ax2_ax3_ax4_fused_1) % T.int64(32))
                    T.reads(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4], p3[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                    T.writes(T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                    T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.max(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] + p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4] + p3[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], T.float32(0))
b0 = sch.get_block(name="data_pad", func_name="main")
b1 = sch.get_block(name="conv2d_NCHWc", func_name="main")
b2 = sch.get_block(name="T_add", func_name="main")
b3 = sch.get_block(name="T_add_1", func_name="main")
b4 = sch.get_block(name="root", func_name="main")
sch.compute_inline(block=b3)
sch.compute_inline(block=b2)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSRSRS")
l5, l6, l7, l8, l9, l10, l11, l12 = sch.get_loops(block=b1)
v13, v14, v15, v16 = sch.sample_perfect_tile(loop=l5, n=4, max_innermost_factor=64, decision=[1, 1, 1, 1])
l17, l18, l19, l20 = sch.split(loop=l5, factors=[v13, v14, v15, v16], preserve_unit_iters=True)
v21, v22, v23, v24 = sch.sample_perfect_tile(loop=l6, n=4, max_innermost_factor=64, decision=[2, 1, 2, 1])
l25, l26, l27, l28 = sch.split(loop=l6, factors=[v21, v22, v23, v24], preserve_unit_iters=True)
v29, v30, v31, v32 = sch.sample_perfect_tile(loop=l7, n=4, max_innermost_factor=64, decision=[2, 14, 1, 1])
l33, l34, l35, l36 = sch.split(loop=l7, factors=[v29, v30, v31, v32], preserve_unit_iters=True)
v37, v38, v39, v40 = sch.sample_perfect_tile(loop=l8, n=4, max_innermost_factor=64, decision=[14, 2, 1, 1])
l41, l42, l43, l44 = sch.split(loop=l8, factors=[v37, v38, v39, v40], preserve_unit_iters=True)
v45, v46, v47, v48 = sch.sample_perfect_tile(loop=l9, n=4, max_innermost_factor=64, decision=[2, 8, 2, 1])
l49, l50, l51, l52 = sch.split(loop=l9, factors=[v45, v46, v47, v48], preserve_unit_iters=True)
v53, v54 = sch.sample_perfect_tile(loop=l10, n=2, max_innermost_factor=64, decision=[4, 32])
l55, l56 = sch.split(loop=l10, factors=[v53, v54], preserve_unit_iters=True)
v57, v58 = sch.sample_perfect_tile(loop=l11, n=2, max_innermost_factor=64, decision=[1, 3])
l59, l60 = sch.split(loop=l11, factors=[v57, v58], preserve_unit_iters=True)
v61, v62 = sch.sample_perfect_tile(loop=l12, n=2, max_innermost_factor=64, decision=[1, 3])
l63, l64 = sch.split(loop=l12, factors=[v61, v62], preserve_unit_iters=True)
sch.reorder(l17, l25, l33, l41, l49, l18, l26, l34, l42, l50, l55, l59, l63, l19, l27, l35, l43, l51, l56, l60, l64, l20, l28, l36, l44, l52)
sch.annotate(block_or_loop=b4, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b4, ann_key="meta_schedule.vectorize", ann_val=64)
v65 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b4, ann_key="meta_schedule.unroll_explicit", ann_val=v65)
l66 = sch.sample_compute_location(block=b0, decision=7)
sch.compute_at(block=b0, loop=l66, preserve_unit_loops=True, index=-1)
sch.enter_postproc()
b67 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b67, ann_key="meta_schedule.parallel")
sch.unannotate(block_or_loop=b67, ann_key="meta_schedule.vectorize")
sch.unannotate(block_or_loop=b67, ann_key="meta_schedule.unroll_explicit")
b68, b69, b70 = sch.get_child_blocks(b67)
l71, l72, l73, l74, l75, l76, l77, l78, l79, l80, l81, l82, l83 = sch.get_loops(block=b68)
l84 = sch.fuse(l71, l72, l73, l74, l75, l76, l77, l78, preserve_unit_iters=True)
sch.parallel(loop=l84)
l85, l86, l87, l88, l89, l90, l91, l92, l93, l94, l95, l96, l97, l98, l99, l100, l101, l102, l103 = sch.get_loops(block=b69)
l104 = sch.fuse(l85, preserve_unit_iters=True)
sch.parallel(loop=l104)
sch.annotate(block_or_loop=l104, ann_key="pragma_auto_unroll_max_step", ann_val=512)
sch.annotate(block_or_loop=l104, ann_key="pragma_unroll_explicit", ann_val=1)
l105, l106, l107, l108, l109 = sch.get_loops(block=b70)
l110 = sch.fuse(l105, l106, l107, l108, l109, preserve_unit_iters=True)
l111, l112 = sch.split(loop=l110, factors=[None, 64], preserve_unit_iters=True)
sch.parallel(loop=l111)
sch.vectorize(loop=l112)
b113 = sch.get_block(name="conv2d_NCHWc", func_name="main")
l114, l115, l116, l117, l118, l119, l120, l121, l122, l123, l124, l125, l126, l127, l128, l129, l130, l131, l132 = sch.get_loops(block=b113)
b133 = sch.decompose_reduction(block=b113, loop=l117)
2024-04-28 22:27:42 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_1] Trial #383: GFLOPs: 2.2779. Time: 101632.6930 us. Best GFLOPs: 542.3272
2024-04-28 22:27:42 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_1] Trial #384: GFLOPs: 168.0171. Time: 1377.9080 us. Best GFLOPs: 542.3272
2024-04-28 22:40:02 [INFO] [evolutionary_search.cc:713] Generating candidates......
2024-04-28 22:40:03 [INFO] [evolutionary_search.cc:715] Picked top 102 candidate(s) from database
2024-04-28 22:40:07 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x3858de8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x3c39958)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0xa2a8408)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x3f4f298)]: 0 failure(s)
2024-04-28 22:40:07 [INFO] [evolutionary_search.cc:723] Sampled 410 candidate(s)
2024-04-28 22:40:20 [INFO] [evolutionary_search.cc:621] Evolve iter #0 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x3858de8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x3c39958)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0xa2a8408)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x3f4f298)]: 0 failure(s)
2024-04-28 22:40:32 [INFO] [evolutionary_search.cc:621] Evolve iter #1 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x3858de8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x3c39958)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0xa2a8408)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x3f4f298)]: 0 failure(s)
2024-04-28 22:40:44 [INFO] [evolutionary_search.cc:621] Evolve iter #2 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x3858de8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x3c39958)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0xa2a8408)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x3f4f298)]: 0 failure(s)
2024-04-28 22:40:56 [INFO] [evolutionary_search.cc:621] Evolve iter #3 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x3858de8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x3c39958)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0xa2a8408)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x3f4f298)]: 0 failure(s)
2024-04-28 22:41:02 [INFO] [evolutionary_search.cc:649] Scores of the best 64 candidates:
[1 : 16]:	1.0213  1.0213  0.9771  0.9771  0.9326  0.9326  0.9321  0.9321  0.9321  0.9073  0.9037  0.9023  0.8919  0.8812  0.8658  0.8574
[17 : 32]:	0.8403  0.8152  0.8152  0.8112  0.8112  0.8075  0.8045  0.7970  0.7970  0.7764  0.7723  0.7566  0.7504  0.7504  0.7494  0.7458
[33 : 48]:	0.7448  0.7399  0.7252  0.7252  0.7200  0.7179  0.7178  0.7074  0.7074  0.7035  0.7029  0.6984  0.6984  0.6984  0.6939  0.6905
[49 : 64]:	0.6827  0.6784  0.6752  0.6717  0.6466  0.6461  0.6461  0.6362  0.6326  0.6191  0.6161  0.6142  0.6055  0.6045  0.6025  0.6021
2024-04-28 22:41:02 [INFO] [evolutionary_search.cc:727] Got 64 candidate(s) with evolutionary search
2024-04-28 22:41:02 [INFO] [evolutionary_search.cc:730] Sending 64 candidates(s) for measurement
2024-04-28 22:42:33 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_1] Trial #385: GFLOPs: 694.8407. Time: 333.1873 us. Best GFLOPs: 694.8407
2024-04-28 22:42:33 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_1] Trial #386: GFLOPs: 663.1676. Time: 349.1004 us. Best GFLOPs: 694.8407
2024-04-28 22:42:33 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_1] Trial #387: GFLOPs: 528.9804. Time: 437.6572 us. Best GFLOPs: 694.8407
2024-04-28 22:42:33 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_1] Trial #388: GFLOPs: 537.1023. Time: 431.0390 us. Best GFLOPs: 694.8407
2024-04-28 22:42:33 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_1] Trial #389: GFLOPs: 609.4297. Time: 379.8831 us. Best GFLOPs: 694.8407
2024-04-28 22:42:33 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_1] Trial #390: GFLOPs: 616.6411. Time: 375.4405 us. Best GFLOPs: 694.8407
2024-04-28 22:42:33 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_1] Trial #391: GFLOPs: 521.3429. Time: 444.0687 us. Best GFLOPs: 694.8407
2024-04-28 22:42:33 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_1] Trial #392: GFLOPs: 531.7427. Time: 435.3836 us. Best GFLOPs: 694.8407
2024-04-28 22:42:33 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_1] Trial #393: GFLOPs: 530.2806. Time: 436.5841 us. Best GFLOPs: 694.8407
2024-04-28 22:42:33 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_1] Trial #394: GFLOPs: 758.5735. Time: 305.1940 us. Best GFLOPs: 758.5735
2024-04-28 22:42:33 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_1] Trial #395: GFLOPs: 564.3269. Time: 410.2446 us. Best GFLOPs: 758.5735
2024-04-28 22:42:33 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_1] Trial #396: GFLOPs: 130.1796. Time: 1778.4054 us. Best GFLOPs: 758.5735
2024-04-28 22:42:33 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_1] Trial #397: GFLOPs: 26.2870. Time: 8807.0952 us. Best GFLOPs: 758.5735
2024-04-28 22:42:33 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_1] Trial #398: GFLOPs: 572.2363. Time: 404.5743 us. Best GFLOPs: 758.5735
2024-04-28 22:42:33 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_1] Trial #399: GFLOPs: 692.7366. Time: 334.1993 us. Best GFLOPs: 758.5735
2024-04-28 22:42:33 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_1] Trial #400: GFLOPs: 474.5370. Time: 487.8693 us. Best GFLOPs: 758.5735
2024-04-28 22:42:33 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_1] Trial #401: GFLOPs: 237.9182. Time: 973.0742 us. Best GFLOPs: 758.5735
2024-04-28 22:42:33 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_1] Trial #402: GFLOPs: 118.6113. Time: 1951.8555 us. Best GFLOPs: 758.5735
2024-04-28 22:42:33 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_1] Trial #403: GFLOPs: 119.2599. Time: 1941.2392 us. Best GFLOPs: 758.5735
2024-04-28 22:42:33 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_1] Trial #404: GFLOPs: 454.9546. Time: 508.8685 us. Best GFLOPs: 758.5735
2024-04-28 22:42:33 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_1] Trial #405: GFLOPs: 449.7890. Time: 514.7126 us. Best GFLOPs: 758.5735
2024-04-28 22:42:33 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_1] Trial #406: GFLOPs: 61.0036. Time: 3795.0554 us. Best GFLOPs: 758.5735
2024-04-28 22:42:33 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_1] Trial #407: GFLOPs: 550.3082. Time: 420.6953 us. Best GFLOPs: 758.5735
2024-04-28 22:42:33 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_1] Trial #408: GFLOPs: 104.4064. Time: 2217.4128 us. Best GFLOPs: 758.5735
2024-04-28 22:42:33 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_1] Trial #409: GFLOPs: 54.4148. Time: 4254.5763 us. Best GFLOPs: 758.5735
2024-04-28 22:42:33 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_1] Trial #410: GFLOPs: 576.3662. Time: 401.6753 us. Best GFLOPs: 758.5735
2024-04-28 22:42:33 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_1] Trial #411: GFLOPs: 571.3625. Time: 405.1930 us. Best GFLOPs: 758.5735
2024-04-28 22:42:33 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_1] Trial #412: GFLOPs: 459.6506. Time: 503.6696 us. Best GFLOPs: 758.5735
2024-04-28 22:42:33 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_1] Trial #413: GFLOPs: 522.0010. Time: 443.5088 us. Best GFLOPs: 758.5735
2024-04-28 22:42:33 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_1] Trial #414: GFLOPs: 284.4744. Time: 813.8239 us. Best GFLOPs: 758.5735
2024-04-28 22:42:33 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_1] Trial #415: GFLOPs: 848.1204. Time: 272.9707 us. Best GFLOPs: 848.1204
2024-04-28 22:42:33 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_1] Trial #416: GFLOPs: 741.8553. Time: 312.0717 us. Best GFLOPs: 848.1204
2024-04-28 22:42:33 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_1] Trial #417: GFLOPs: 59.7489. Time: 3874.7502 us. Best GFLOPs: 848.1204
2024-04-28 22:42:33 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_1] Trial #418: GFLOPs: 16.7809. Time: 13796.1630 us. Best GFLOPs: 848.1204
2024-04-28 22:42:33 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_1] Trial #419: GFLOPs: 267.1567. Time: 866.5778 us. Best GFLOPs: 848.1204
2024-04-28 22:42:33 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_1] Trial #420: GFLOPs: 267.7175. Time: 864.7626 us. Best GFLOPs: 848.1204
2024-04-28 22:42:33 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_1] Trial #421: GFLOPs: 479.3032. Time: 483.0180 us. Best GFLOPs: 848.1204
2024-04-28 22:42:33 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_1] Trial #422: GFLOPs: 675.6033. Time: 342.6746 us. Best GFLOPs: 848.1204
2024-04-28 22:42:33 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_1] Trial #423: GFLOPs: 453.8463. Time: 510.1112 us. Best GFLOPs: 848.1204
2024-04-28 22:42:33 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_1] Trial #424: GFLOPs: 298.3239. Time: 776.0427 us. Best GFLOPs: 848.1204
2024-04-28 22:42:33 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_1] Trial #425: GFLOPs: 300.3239. Time: 770.8745 us. Best GFLOPs: 848.1204
2024-04-28 22:42:33 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_1] Trial #426: GFLOPs: 361.0712. Time: 641.1811 us. Best GFLOPs: 848.1204
2024-04-28 22:42:33 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_1] Trial #427: GFLOPs: 563.0737. Time: 411.1577 us. Best GFLOPs: 848.1204
2024-04-28 22:42:33 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_1] Trial #428: GFLOPs: 460.6904. Time: 502.5329 us. Best GFLOPs: 848.1204
2024-04-28 22:42:33 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_1] Trial #429: GFLOPs: 412.6812. Time: 560.9950 us. Best GFLOPs: 848.1204
2024-04-28 22:42:33 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_1] Trial #430: GFLOPs: 450.7137. Time: 513.6566 us. Best GFLOPs: 848.1204
2024-04-28 22:42:33 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_1] Trial #431: GFLOPs: 291.7806. Time: 793.4456 us. Best GFLOPs: 848.1204
2024-04-28 22:42:33 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_1] Trial #432: GFLOPs: 521.7238. Time: 443.7445 us. Best GFLOPs: 848.1204
2024-04-28 22:42:33 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_1] Trial #433: GFLOPs: 112.7515. Time: 2053.2950 us. Best GFLOPs: 848.1204
2024-04-28 22:42:33 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_1] Trial #434: GFLOPs: 130.9978. Time: 1767.2969 us. Best GFLOPs: 848.1204
2024-04-28 22:42:33 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_1] Trial #435: GFLOPs: 329.9376. Time: 701.6844 us. Best GFLOPs: 848.1204
2024-04-28 22:42:33 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_1] Trial #436: GFLOPs: 550.1902. Time: 420.7855 us. Best GFLOPs: 848.1204
2024-04-28 22:42:33 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_1] Trial #437: GFLOPs: 536.3634. Time: 431.6329 us. Best GFLOPs: 848.1204
2024-04-28 22:42:33 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_1] Trial #438: GFLOPs: 338.5766. Time: 683.7806 us. Best GFLOPs: 848.1204
2024-04-28 22:42:33 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_1] Trial #439: GFLOPs: 334.8540. Time: 691.3822 us. Best GFLOPs: 848.1204
2024-04-28 22:42:33 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_1] Trial #440: GFLOPs: 527.9855. Time: 438.4819 us. Best GFLOPs: 848.1204
2024-04-28 22:42:33 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_1] Trial #441: GFLOPs: 61.7833. Time: 3747.1623 us. Best GFLOPs: 848.1204
2024-04-28 22:42:33 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_1] Trial #442: GFLOPs: 386.5248. Time: 598.9578 us. Best GFLOPs: 848.1204
2024-04-28 22:42:33 [INFO] [task_scheduler.cc:121] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_1] Trial #443: Error in building:
LocalBuilder: Timeout, killed after 30.0 seconds
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(1), T.int64(28), T.int64(28), T.int64(128)), "float32"), p1: T.Buffer((T.int64(4), T.int64(1), T.int64(3), T.int64(3), T.int64(128), T.int64(32)), "float32"), p2: T.Buffer((T.int64(1), T.int64(4), T.int64(1), T.int64(1), T.int64(32)), "float32"), p3: T.Buffer((T.int64(1), T.int64(4), T.int64(28), T.int64(28), T.int64(32)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(4), T.int64(28), T.int64(28), T.int64(32)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        data_pad = T.alloc_buffer((T.int64(1), T.int64(1), T.int64(30), T.int64(30), T.int64(128)))
        conv2d_NCHWc = T.alloc_buffer((T.int64(1), T.int64(4), T.int64(28), T.int64(28), T.int64(32)))
        for i0_i1_i2_i3_fused in T.parallel(T.int64(900)):
            for i4 in range(T.int64(128)):
                with T.block("data_pad"):
                    v_i0 = T.axis.spatial(T.int64(1), T.int64(0))
                    v_i1 = T.axis.spatial(T.int64(1), T.int64(0))
                    v_i2 = T.axis.spatial(T.int64(30), i0_i1_i2_i3_fused // T.int64(30))
                    v_i3 = T.axis.spatial(T.int64(30), i0_i1_i2_i3_fused % T.int64(30))
                    v_i4 = T.axis.spatial(T.int64(128), i4)
                    T.reads(p0[v_i0, v_i1, v_i2 - T.int64(1), v_i3 - T.int64(1), v_i4])
                    T.writes(data_pad[v_i0, v_i1, v_i2, v_i3, v_i4])
                    data_pad[v_i0, v_i1, v_i2, v_i3, v_i4] = T.if_then_else(T.int64(1) <= v_i2 and v_i2 < T.int64(29) and T.int64(1) <= v_i3 and v_i3 < T.int64(29), p0[v_i0, v_i1, v_i2 - T.int64(1), v_i3 - T.int64(1), v_i4], T.float32(0))
        for n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused in T.parallel(T.int64(112), annotations={"pragma_auto_unroll_max_step": 512, "pragma_unroll_explicit": 1}):
            for n_2_init, oc_chunk_2_init, oh_2_init, ow_2_init, oc_block_2_init, n_3_init, oc_chunk_3_init, oh_3_init, ow_3_init, oc_block_3_init in T.grid(T.int64(1), T.int64(4), T.int64(1), T.int64(1), T.int64(32), T.int64(1), T.int64(1), T.int64(7), T.int64(1), T.int64(1)):
                with T.block("conv2d_NCHWc_init"):
                    v_n = T.axis.spatial(T.int64(1), n_2_init + n_3_init)
                    v_oc_chunk = T.axis.spatial(T.int64(4), oc_chunk_2_init + oc_chunk_3_init)
                    v_oh = T.axis.spatial(T.int64(28), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused // T.int64(28) * T.int64(7) + oh_2_init * T.int64(7) + oh_3_init)
                    v_ow = T.axis.spatial(T.int64(28), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused % T.int64(28) + ow_2_init + ow_3_init)
                    v_oc_block = T.axis.spatial(T.int64(32), oc_block_2_init + oc_block_3_init)
                    T.reads()
                    T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                    T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                    conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = T.float32(0)
            for ic_0, kh_0, kw_0, n_2, oc_chunk_2, oh_2, ow_2, oc_block_2, ic_1, kh_1, kw_1, n_3, oc_chunk_3, oh_3, ow_3, oc_block_3 in T.grid(T.int64(16), T.int64(1), T.int64(1), T.int64(1), T.int64(4), T.int64(1), T.int64(1), T.int64(32), T.int64(8), T.int64(3), T.int64(3), T.int64(1), T.int64(1), T.int64(7), T.int64(1), T.int64(1)):
                with T.block("conv2d_NCHWc_update"):
                    v_n = T.axis.spatial(T.int64(1), n_2 + n_3)
                    v_oc_chunk = T.axis.spatial(T.int64(4), oc_chunk_2 + oc_chunk_3)
                    v_oh = T.axis.spatial(T.int64(28), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused // T.int64(28) * T.int64(7) + oh_2 * T.int64(7) + oh_3)
                    v_ow = T.axis.spatial(T.int64(28), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused % T.int64(28) + ow_2 + ow_3)
                    v_oc_block = T.axis.spatial(T.int64(32), oc_block_2 + oc_block_3)
                    v_ic = T.axis.reduce(T.int64(128), ic_0 * T.int64(8) + ic_1)
                    v_kh = T.axis.reduce(T.int64(3), kh_0 * T.int64(3) + kh_1)
                    v_kw = T.axis.reduce(T.int64(3), kw_0 * T.int64(3) + kw_1)
                    T.reads(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block], data_pad[v_n, v_ic // T.int64(128), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(128)], p1[v_oc_chunk, v_ic // T.int64(128), v_kh, v_kw, v_ic % T.int64(128), v_oc_block])
                    T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                    T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                    conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] + data_pad[v_n, v_ic // T.int64(128), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(128)] * p1[v_oc_chunk, v_ic // T.int64(128), v_kh, v_kw, v_ic % T.int64(128), v_oc_block]
            for ax0, ax1, ax2 in T.grid(T.int64(1), T.int64(4), T.int64(7)):
                for ax3_ax4_fused in T.vectorized(T.int64(32)):
                    with T.block("T_relu"):
                        v_ax0, v_ax1 = T.axis.remap("SS", [ax0, ax1])
                        v_ax2 = T.axis.spatial(T.int64(28), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused // T.int64(28) * T.int64(7) + ax2)
                        v_ax3 = T.axis.spatial(T.int64(28), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused % T.int64(28))
                        v_ax4 = T.axis.spatial(T.int64(32), ax3_ax4_fused)
                        T.reads(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4], p3[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                        T.writes(T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                        T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.max(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] + p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4] + p3[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], T.float32(0))
b0 = sch.get_block(name="data_pad", func_name="main")
b1 = sch.get_block(name="conv2d_NCHWc", func_name="main")
b2 = sch.get_block(name="T_add", func_name="main")
b3 = sch.get_block(name="T_add_1", func_name="main")
b4 = sch.get_block(name="root", func_name="main")
sch.compute_inline(block=b3)
sch.compute_inline(block=b2)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSRSRS")
l5, l6, l7, l8, l9, l10, l11, l12 = sch.get_loops(block=b1)
v13, v14, v15, v16 = sch.sample_perfect_tile(loop=l5, n=4, max_innermost_factor=64, decision=[1, 1, 1, 1])
l17, l18, l19, l20 = sch.split(loop=l5, factors=[v13, v14, v15, v16], preserve_unit_iters=True)
v21, v22, v23, v24 = sch.sample_perfect_tile(loop=l6, n=4, max_innermost_factor=64, decision=[1, 1, 4, 1])
l25, l26, l27, l28 = sch.split(loop=l6, factors=[v21, v22, v23, v24], preserve_unit_iters=True)
v29, v30, v31, v32 = sch.sample_perfect_tile(loop=l7, n=4, max_innermost_factor=64, decision=[4, 1, 1, 7])
l33, l34, l35, l36 = sch.split(loop=l7, factors=[v29, v30, v31, v32], preserve_unit_iters=True)
v37, v38, v39, v40 = sch.sample_perfect_tile(loop=l8, n=4, max_innermost_factor=64, decision=[1, 28, 1, 1])
l41, l42, l43, l44 = sch.split(loop=l8, factors=[v37, v38, v39, v40], preserve_unit_iters=True)
v45, v46, v47, v48 = sch.sample_perfect_tile(loop=l9, n=4, max_innermost_factor=64, decision=[1, 1, 32, 1])
l49, l50, l51, l52 = sch.split(loop=l9, factors=[v45, v46, v47, v48], preserve_unit_iters=True)
v53, v54 = sch.sample_perfect_tile(loop=l10, n=2, max_innermost_factor=64, decision=[16, 8])
l55, l56 = sch.split(loop=l10, factors=[v53, v54], preserve_unit_iters=True)
v57, v58 = sch.sample_perfect_tile(loop=l11, n=2, max_innermost_factor=64, decision=[1, 3])
l59, l60 = sch.split(loop=l11, factors=[v57, v58], preserve_unit_iters=True)
v61, v62 = sch.sample_perfect_tile(loop=l12, n=2, max_innermost_factor=64, decision=[1, 3])
l63, l64 = sch.split(loop=l12, factors=[v61, v62], preserve_unit_iters=True)
sch.reorder(l17, l25, l33, l41, l49, l18, l26, l34, l42, l50, l55, l59, l63, l19, l27, l35, l43, l51, l56, l60, l64, l20, l28, l36, l44, l52)
b65, = sch.get_consumers(block=b1)
sch.reverse_compute_at(block=b65, loop=l50, preserve_unit_loops=True, index=-1)
sch.annotate(block_or_loop=b4, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b4, ann_key="meta_schedule.vectorize", ann_val=64)
v66 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b4, ann_key="meta_schedule.unroll_explicit", ann_val=v66)
l67 = sch.sample_compute_location(block=b0, decision=-1)
sch.compute_at(block=b0, loop=l67, preserve_unit_loops=True, index=-1)
sch.enter_postproc()
b68 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b68, ann_key="meta_schedule.parallel")
sch.unannotate(block_or_loop=b68, ann_key="meta_schedule.vectorize")
sch.unannotate(block_or_loop=b68, ann_key="meta_schedule.unroll_explicit")
b69, b70, b71 = sch.get_child_blocks(b68)
l72, l73, l74, l75, l76 = sch.get_loops(block=b69)
l77 = sch.fuse(l72, l73, l74, l75, preserve_unit_iters=True)
sch.parallel(loop=l77)
l78, l79, l80, l81, l82, l83, l84, l85, l86, l87, l88, l89, l90, l91, l92, l93, l94, l95, l96, l97, l98, l99, l100, l101, l102, l103 = sch.get_loops(block=b70)
l104 = sch.fuse(l78, l79, l80, l81, l82, l83, l84, l85, l86, l87, preserve_unit_iters=True)
sch.parallel(loop=l104)
sch.annotate(block_or_loop=l104, ann_key="pragma_auto_unroll_max_step", ann_val=512)
sch.annotate(block_or_loop=l104, ann_key="pragma_unroll_explicit", ann_val=1)
l105, l106, l107, l108, l109, l110 = sch.get_loops(block=b71)
l111 = sch.fuse(l109, l110, preserve_unit_iters=True)
sch.vectorize(loop=l111)
b112 = sch.get_block(name="conv2d_NCHWc", func_name="main")
l113, l114, l115, l116, l117, l118, l119, l120, l121, l122, l123, l124, l125, l126, l127, l128, l129 = sch.get_loops(block=b112)
b130 = sch.decompose_reduction(block=b112, loop=l114)
2024-04-28 22:42:33 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_1] Trial #444: GFLOPs: 62.5317. Time: 3702.3172 us. Best GFLOPs: 848.1204
2024-04-28 22:42:33 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_1] Trial #445: GFLOPs: 446.9111. Time: 518.0272 us. Best GFLOPs: 848.1204
2024-04-28 22:42:33 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_1] Trial #446: GFLOPs: 32.2109. Time: 7187.3895 us. Best GFLOPs: 848.1204
2024-04-28 22:42:33 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_1] Trial #447: GFLOPs: 19.3515. Time: 11963.4929 us. Best GFLOPs: 848.1204
2024-04-28 22:42:33 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_1] Trial #448: GFLOPs: 55.2389. Time: 4191.1093 us. Best GFLOPs: 848.1204
2024-04-28 22:55:19 [INFO] [evolutionary_search.cc:713] Generating candidates......
2024-04-28 22:55:20 [INFO] [evolutionary_search.cc:715] Picked top 102 candidate(s) from database
2024-04-28 22:55:24 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x3858de8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x3c39958)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0xa2a8408)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x3f4f298)]: 0 failure(s)
2024-04-28 22:55:24 [INFO] [evolutionary_search.cc:723] Sampled 410 candidate(s)
2024-04-28 22:55:36 [INFO] [evolutionary_search.cc:621] Evolve iter #0 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x3858de8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x3c39958)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0xa2a8408)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x3f4f298)]: 0 failure(s)
2024-04-28 22:55:48 [INFO] [evolutionary_search.cc:621] Evolve iter #1 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x3858de8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x3c39958)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0xa2a8408)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x3f4f298)]: 0 failure(s)
2024-04-28 22:55:58 [INFO] [evolutionary_search.cc:621] Evolve iter #2 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x3858de8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x3c39958)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0xa2a8408)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x3f4f298)]: 0 failure(s)
2024-04-28 22:56:09 [INFO] [evolutionary_search.cc:621] Evolve iter #3 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x3858de8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x3c39958)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0xa2a8408)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x3f4f298)]: 0 failure(s)
2024-04-28 22:56:15 [INFO] [evolutionary_search.cc:649] Scores of the best 64 candidates:
[1 : 16]:	1.0440  1.0229  0.9930  0.9762  0.9486  0.9438  0.9310  0.9273  0.9006  0.8773  0.8769  0.8758  0.8731  0.8661  0.8519  0.8485
[17 : 32]:	0.8445  0.8441  0.8434  0.8388  0.8292  0.8265  0.8238  0.8209  0.8201  0.8201  0.8150  0.8147  0.8081  0.8043  0.7918  0.7885
[33 : 48]:	0.7805  0.7801  0.7800  0.7656  0.7644  0.7644  0.7632  0.7603  0.7603  0.7603  0.7603  0.7587  0.7584  0.7553  0.7492  0.7478
[49 : 64]:	0.7427  0.7416  0.7414  0.7379  0.7368  0.7364  0.7364  0.7337  0.7316  0.7316  0.7316  0.7309  0.7304  0.7285  0.7267  0.7251
2024-04-28 22:56:16 [INFO] [evolutionary_search.cc:727] Got 64 candidate(s) with evolutionary search
2024-04-28 22:56:16 [INFO] [evolutionary_search.cc:730] Sending 64 candidates(s) for measurement
2024-04-28 22:57:51 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_1] Trial #449: GFLOPs: 974.4438. Time: 237.5838 us. Best GFLOPs: 974.4438
2024-04-28 22:57:51 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_1] Trial #450: GFLOPs: 996.2193. Time: 232.3907 us. Best GFLOPs: 996.2193
2024-04-28 22:57:51 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_1] Trial #451: GFLOPs: 1056.2801. Time: 219.1768 us. Best GFLOPs: 1056.2801
2024-04-28 22:57:51 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_1] Trial #452: GFLOPs: 845.6172. Time: 273.7788 us. Best GFLOPs: 1056.2801
2024-04-28 22:57:51 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_1] Trial #453: GFLOPs: 626.9691. Time: 369.2559 us. Best GFLOPs: 1056.2801
2024-04-28 22:57:51 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_1] Trial #454: GFLOPs: 619.1012. Time: 373.9486 us. Best GFLOPs: 1056.2801
2024-04-28 22:57:51 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_1] Trial #455: GFLOPs: 677.8240. Time: 341.5519 us. Best GFLOPs: 1056.2801
2024-04-28 22:57:51 [INFO] [task_scheduler.cc:121] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_1] Trial #456: Error in building:
LocalBuilder: Timeout, killed after 30.0 seconds
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(1), T.int64(28), T.int64(28), T.int64(128)), "float32"), p1: T.Buffer((T.int64(4), T.int64(1), T.int64(3), T.int64(3), T.int64(128), T.int64(32)), "float32"), p2: T.Buffer((T.int64(1), T.int64(4), T.int64(1), T.int64(1), T.int64(32)), "float32"), p3: T.Buffer((T.int64(1), T.int64(4), T.int64(28), T.int64(28), T.int64(32)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(4), T.int64(28), T.int64(28), T.int64(32)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        data_pad = T.alloc_buffer((T.int64(1), T.int64(1), T.int64(30), T.int64(30), T.int64(128)))
        conv2d_NCHWc = T.alloc_buffer((T.int64(1), T.int64(4), T.int64(28), T.int64(28), T.int64(32)))
        for n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_fused_fused in T.parallel(T.int64(112), annotations={"pragma_auto_unroll_max_step": 512, "pragma_unroll_explicit": 1}):
            for ax0, ax1, ax2, ax3, ax4 in T.grid(T.int64(1), T.int64(1), T.int64(9), T.int64(3), T.int64(128)):
                with T.block("data_pad"):
                    v_i0, v_i1 = T.axis.remap("SS", [ax0, ax1])
                    v_i2 = T.axis.spatial(T.int64(30), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_fused_fused // T.int64(28) * T.int64(7) + ax2)
                    v_i3 = T.axis.spatial(T.int64(30), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_fused_fused % T.int64(28) + ax3)
                    v_i4 = T.axis.spatial(T.int64(128), ax4)
                    T.reads(p0[v_i0, v_i1, v_i2 - T.int64(1), v_i3 - T.int64(1), v_i4])
                    T.writes(data_pad[v_i0, v_i1, v_i2, v_i3, v_i4])
                    data_pad[v_i0, v_i1, v_i2, v_i3, v_i4] = T.if_then_else(T.int64(1) <= v_i2 and v_i2 < T.int64(29) and T.int64(1) <= v_i3 and v_i3 < T.int64(29), p0[v_i0, v_i1, v_i2 - T.int64(1), v_i3 - T.int64(1), v_i4], T.float32(0))
            for oc_block_1 in range(T.int64(1)):
                for n_2_init, oc_chunk_2_init, oh_2_init, ow_2_init, oc_block_2_init, n_3_init, oc_chunk_3_init, oh_3_init, ow_3_init, oc_block_3_init in T.grid(T.int64(1), T.int64(4), T.int64(1), T.int64(1), T.int64(32), T.int64(1), T.int64(1), T.int64(7), T.int64(1), T.int64(1)):
                    with T.block("conv2d_NCHWc_init"):
                        v_n = T.axis.spatial(T.int64(1), n_2_init + n_3_init)
                        v_oc_chunk = T.axis.spatial(T.int64(4), oc_chunk_2_init + oc_chunk_3_init)
                        v_oh = T.axis.spatial(T.int64(28), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_fused_fused // T.int64(28) * T.int64(7) + oh_2_init * T.int64(7) + oh_3_init)
                        v_ow = T.axis.spatial(T.int64(28), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_fused_fused % T.int64(28) + ow_2_init + ow_3_init)
                        v_oc_block = T.axis.spatial(T.int64(32), oc_block_1 * T.int64(32) + oc_block_2_init + oc_block_3_init)
                        T.reads()
                        T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                        T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                        conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = T.float32(0)
                for ic_0, kh_0, kw_0, n_2, oc_chunk_2, oh_2, ow_2, oc_block_2, ic_1, kh_1, kw_1, n_3, oc_chunk_3, oh_3, ow_3, oc_block_3 in T.grid(T.int64(32), T.int64(1), T.int64(1), T.int64(1), T.int64(4), T.int64(1), T.int64(1), T.int64(32), T.int64(4), T.int64(3), T.int64(3), T.int64(1), T.int64(1), T.int64(7), T.int64(1), T.int64(1)):
                    with T.block("conv2d_NCHWc_update"):
                        v_n = T.axis.spatial(T.int64(1), n_2 + n_3)
                        v_oc_chunk = T.axis.spatial(T.int64(4), oc_chunk_2 + oc_chunk_3)
                        v_oh = T.axis.spatial(T.int64(28), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_fused_fused // T.int64(28) * T.int64(7) + oh_2 * T.int64(7) + oh_3)
                        v_ow = T.axis.spatial(T.int64(28), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_fused_fused % T.int64(28) + ow_2 + ow_3)
                        v_oc_block = T.axis.spatial(T.int64(32), oc_block_1 * T.int64(32) + oc_block_2 + oc_block_3)
                        v_ic = T.axis.reduce(T.int64(128), ic_0 * T.int64(4) + ic_1)
                        v_kh = T.axis.reduce(T.int64(3), kh_0 * T.int64(3) + kh_1)
                        v_kw = T.axis.reduce(T.int64(3), kw_0 * T.int64(3) + kw_1)
                        T.reads(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block], data_pad[v_n, v_ic // T.int64(128), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(128)], p1[v_oc_chunk, v_ic // T.int64(128), v_kh, v_kw, v_ic % T.int64(128), v_oc_block])
                        T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                        T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                        conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] + data_pad[v_n, v_ic // T.int64(128), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(128)] * p1[v_oc_chunk, v_ic // T.int64(128), v_kh, v_kw, v_ic % T.int64(128), v_oc_block]
                for ax0, ax1, ax2 in T.grid(T.int64(1), T.int64(4), T.int64(7)):
                    for ax3_ax4_fused in T.vectorized(T.int64(32)):
                        with T.block("T_relu"):
                            v_ax0, v_ax1 = T.axis.remap("SS", [ax0, ax1])
                            v_ax2 = T.axis.spatial(T.int64(28), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_fused_fused // T.int64(28) * T.int64(7) + ax2)
                            v_ax3 = T.axis.spatial(T.int64(28), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_fused_fused % T.int64(28))
                            v_ax4 = T.axis.spatial(T.int64(32), ax3_ax4_fused)
                            T.reads(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4], p3[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                            T.writes(T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                            T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.max(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] + p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4] + p3[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], T.float32(0))
b0 = sch.get_block(name="data_pad", func_name="main")
b1 = sch.get_block(name="conv2d_NCHWc", func_name="main")
b2 = sch.get_block(name="T_add", func_name="main")
b3 = sch.get_block(name="T_add_1", func_name="main")
b4 = sch.get_block(name="root", func_name="main")
sch.compute_inline(block=b3)
sch.compute_inline(block=b2)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSRSRS")
l5, l6, l7, l8, l9, l10, l11, l12 = sch.get_loops(block=b1)
v13, v14, v15, v16 = sch.sample_perfect_tile(loop=l5, n=4, max_innermost_factor=64, decision=[1, 1, 1, 1])
l17, l18, l19, l20 = sch.split(loop=l5, factors=[v13, v14, v15, v16], preserve_unit_iters=True)
v21, v22, v23, v24 = sch.sample_perfect_tile(loop=l6, n=4, max_innermost_factor=64, decision=[1, 1, 4, 1])
l25, l26, l27, l28 = sch.split(loop=l6, factors=[v21, v22, v23, v24], preserve_unit_iters=True)
v29, v30, v31, v32 = sch.sample_perfect_tile(loop=l7, n=4, max_innermost_factor=64, decision=[4, 1, 1, 7])
l33, l34, l35, l36 = sch.split(loop=l7, factors=[v29, v30, v31, v32], preserve_unit_iters=True)
v37, v38, v39, v40 = sch.sample_perfect_tile(loop=l8, n=4, max_innermost_factor=64, decision=[1, 28, 1, 1])
l41, l42, l43, l44 = sch.split(loop=l8, factors=[v37, v38, v39, v40], preserve_unit_iters=True)
v45, v46, v47, v48 = sch.sample_perfect_tile(loop=l9, n=4, max_innermost_factor=64, decision=[1, 1, 32, 1])
l49, l50, l51, l52 = sch.split(loop=l9, factors=[v45, v46, v47, v48], preserve_unit_iters=True)
v53, v54 = sch.sample_perfect_tile(loop=l10, n=2, max_innermost_factor=64, decision=[32, 4])
l55, l56 = sch.split(loop=l10, factors=[v53, v54], preserve_unit_iters=True)
v57, v58 = sch.sample_perfect_tile(loop=l11, n=2, max_innermost_factor=64, decision=[1, 3])
l59, l60 = sch.split(loop=l11, factors=[v57, v58], preserve_unit_iters=True)
v61, v62 = sch.sample_perfect_tile(loop=l12, n=2, max_innermost_factor=64, decision=[1, 3])
l63, l64 = sch.split(loop=l12, factors=[v61, v62], preserve_unit_iters=True)
sch.reorder(l17, l25, l33, l41, l49, l18, l26, l34, l42, l50, l55, l59, l63, l19, l27, l35, l43, l51, l56, l60, l64, l20, l28, l36, l44, l52)
b65, = sch.get_consumers(block=b1)
sch.reverse_compute_at(block=b65, loop=l50, preserve_unit_loops=True, index=-1)
sch.annotate(block_or_loop=b4, ann_key="meta_schedule.parallel", ann_val=112)
sch.annotate(block_or_loop=b4, ann_key="meta_schedule.vectorize", ann_val=64)
v66 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b4, ann_key="meta_schedule.unroll_explicit", ann_val=v66)
l67 = sch.sample_compute_location(block=b0, decision=8)
sch.compute_at(block=b0, loop=l67, preserve_unit_loops=True, index=-1)
sch.enter_postproc()
b68 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b68, ann_key="meta_schedule.parallel")
sch.unannotate(block_or_loop=b68, ann_key="meta_schedule.vectorize")
sch.unannotate(block_or_loop=b68, ann_key="meta_schedule.unroll_explicit")
b69, b70, b71 = sch.get_child_blocks(b68)
l72, l73, l74, l75, l76, l77, l78, l79, l80, l81, l82, l83, l84, l85 = sch.get_loops(block=b69)
l86 = sch.fuse(l72, l73, l74, l75, l76, l77, l78, l79, l80, preserve_unit_iters=True)
sch.parallel(loop=l86)
l87, l88, l89, l90, l91, l92, l93, l94, l95, l96, l97, l98, l99, l100, l101, l102, l103, l104 = sch.get_loops(block=b70)
l105 = sch.fuse(l87, preserve_unit_iters=True)
sch.parallel(loop=l105)
sch.annotate(block_or_loop=l105, ann_key="pragma_auto_unroll_max_step", ann_val=512)
sch.annotate(block_or_loop=l105, ann_key="pragma_unroll_explicit", ann_val=1)
l106, l107, l108, l109, l110, l111, l112 = sch.get_loops(block=b71)
l113 = sch.fuse(l111, l112, preserve_unit_iters=True)
sch.vectorize(loop=l113)
b114 = sch.get_block(name="conv2d_NCHWc", func_name="main")
l115, l116, l117, l118, l119, l120, l121, l122, l123, l124, l125, l126, l127, l128, l129, l130, l131, l132 = sch.get_loops(block=b114)
b133 = sch.decompose_reduction(block=b114, loop=l117)
2024-04-28 22:57:51 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_1] Trial #457: GFLOPs: 603.1574. Time: 383.8336 us. Best GFLOPs: 1056.2801
2024-04-28 22:57:51 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_1] Trial #458: GFLOPs: 802.9741. Time: 288.3182 us. Best GFLOPs: 1056.2801
2024-04-28 22:57:51 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_1] Trial #459: GFLOPs: 956.1300. Time: 242.1345 us. Best GFLOPs: 1056.2801
2024-04-28 22:57:51 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_1] Trial #460: GFLOPs: 801.4815. Time: 288.8551 us. Best GFLOPs: 1056.2801
2024-04-28 22:57:51 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_1] Trial #461: GFLOPs: 694.0198. Time: 333.5813 us. Best GFLOPs: 1056.2801
2024-04-28 22:57:51 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_1] Trial #462: GFLOPs: 730.3236. Time: 316.9993 us. Best GFLOPs: 1056.2801
2024-04-28 22:57:51 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_1] Trial #463: GFLOPs: 702.5333. Time: 329.5389 us. Best GFLOPs: 1056.2801
2024-04-28 22:57:51 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_1] Trial #464: GFLOPs: 696.2141. Time: 332.5300 us. Best GFLOPs: 1056.2801
2024-04-28 22:57:51 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_1] Trial #465: GFLOPs: 609.5459. Time: 379.8107 us. Best GFLOPs: 1056.2801
2024-04-28 22:57:51 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_1] Trial #466: GFLOPs: 802.8804. Time: 288.3519 us. Best GFLOPs: 1056.2801
2024-04-28 22:57:51 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_1] Trial #467: GFLOPs: 683.7375. Time: 338.5979 us. Best GFLOPs: 1056.2801
2024-04-28 22:57:51 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_1] Trial #468: GFLOPs: 792.0797. Time: 292.2838 us. Best GFLOPs: 1056.2801
2024-04-28 22:57:51 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_1] Trial #469: GFLOPs: 774.3844. Time: 298.9627 us. Best GFLOPs: 1056.2801
2024-04-28 22:57:51 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_1] Trial #470: GFLOPs: 594.2958. Time: 389.5570 us. Best GFLOPs: 1056.2801
2024-04-28 22:57:51 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_1] Trial #471: GFLOPs: 739.0964. Time: 313.2366 us. Best GFLOPs: 1056.2801
2024-04-28 22:57:51 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_1] Trial #472: GFLOPs: 703.0869. Time: 329.2795 us. Best GFLOPs: 1056.2801
2024-04-28 22:57:51 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_1] Trial #473: GFLOPs: 804.7925. Time: 287.6668 us. Best GFLOPs: 1056.2801
2024-04-28 22:57:51 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_1] Trial #474: GFLOPs: 767.8794. Time: 301.4953 us. Best GFLOPs: 1056.2801
2024-04-28 22:57:51 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_1] Trial #475: GFLOPs: 689.0073. Time: 336.0081 us. Best GFLOPs: 1056.2801
2024-04-28 22:57:51 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_1] Trial #476: GFLOPs: 700.9826. Time: 330.2679 us. Best GFLOPs: 1056.2801
2024-04-28 22:57:51 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_1] Trial #477: GFLOPs: 741.3341. Time: 312.2911 us. Best GFLOPs: 1056.2801
2024-04-28 22:57:51 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_1] Trial #478: GFLOPs: 633.1961. Time: 365.6246 us. Best GFLOPs: 1056.2801
2024-04-28 22:57:51 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_1] Trial #479: GFLOPs: 690.0763. Time: 335.4876 us. Best GFLOPs: 1056.2801
2024-04-28 22:57:51 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_1] Trial #480: GFLOPs: 572.8716. Time: 404.1255 us. Best GFLOPs: 1056.2801
2024-04-28 22:57:51 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_1] Trial #481: GFLOPs: 603.7644. Time: 383.4477 us. Best GFLOPs: 1056.2801
2024-04-28 22:57:51 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_1] Trial #482: GFLOPs: 753.8605. Time: 307.1020 us. Best GFLOPs: 1056.2801
2024-04-28 22:57:51 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_1] Trial #483: GFLOPs: 699.0454. Time: 331.1832 us. Best GFLOPs: 1056.2801
2024-04-28 22:57:51 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_1] Trial #484: GFLOPs: 690.1392. Time: 335.4571 us. Best GFLOPs: 1056.2801
2024-04-28 22:57:51 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_1] Trial #485: GFLOPs: 700.2286. Time: 330.6236 us. Best GFLOPs: 1056.2801
2024-04-28 22:57:51 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_1] Trial #486: GFLOPs: 700.8751. Time: 330.3186 us. Best GFLOPs: 1056.2801
2024-04-28 22:57:51 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_1] Trial #487: GFLOPs: 729.5700. Time: 317.3267 us. Best GFLOPs: 1056.2801
2024-04-28 22:57:51 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_1] Trial #488: GFLOPs: 680.8667. Time: 340.0255 us. Best GFLOPs: 1056.2801
2024-04-28 22:57:51 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_1] Trial #489: GFLOPs: 708.8599. Time: 326.5978 us. Best GFLOPs: 1056.2801
2024-04-28 22:57:51 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_1] Trial #490: GFLOPs: 710.6368. Time: 325.7811 us. Best GFLOPs: 1056.2801
2024-04-28 22:57:51 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_1] Trial #491: GFLOPs: 682.4667. Time: 339.2284 us. Best GFLOPs: 1056.2801
2024-04-28 22:57:51 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_1] Trial #492: GFLOPs: 505.6707. Time: 457.8317 us. Best GFLOPs: 1056.2801
2024-04-28 22:57:51 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_1] Trial #493: GFLOPs: 607.7130. Time: 380.9563 us. Best GFLOPs: 1056.2801
2024-04-28 22:57:51 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_1] Trial #494: GFLOPs: 545.9360. Time: 424.0645 us. Best GFLOPs: 1056.2801
2024-04-28 22:57:51 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_1] Trial #495: GFLOPs: 738.5847. Time: 313.4537 us. Best GFLOPs: 1056.2801
2024-04-28 22:57:51 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_1] Trial #496: GFLOPs: 829.4991. Time: 279.0986 us. Best GFLOPs: 1056.2801
2024-04-28 22:57:51 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_1] Trial #497: GFLOPs: 650.7685. Time: 355.7518 us. Best GFLOPs: 1056.2801
2024-04-28 22:57:51 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_1] Trial #498: GFLOPs: 740.2963. Time: 312.7289 us. Best GFLOPs: 1056.2801
2024-04-28 22:57:51 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_1] Trial #499: GFLOPs: 829.6183. Time: 279.0585 us. Best GFLOPs: 1056.2801
2024-04-28 22:57:51 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_1] Trial #500: GFLOPs: 463.5615. Time: 499.4204 us. Best GFLOPs: 1056.2801
2024-04-28 22:57:51 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_1] Trial #501: GFLOPs: 630.5748. Time: 367.1445 us. Best GFLOPs: 1056.2801
2024-04-28 22:57:51 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_1] Trial #502: GFLOPs: 773.9191. Time: 299.1425 us. Best GFLOPs: 1056.2801
2024-04-28 22:57:51 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_1] Trial #503: GFLOPs: 455.1919. Time: 508.6032 us. Best GFLOPs: 1056.2801
2024-04-28 22:57:51 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_1] Trial #504: GFLOPs: 599.4365. Time: 386.2162 us. Best GFLOPs: 1056.2801
2024-04-28 22:57:51 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_1] Trial #505: GFLOPs: 702.3332. Time: 329.6328 us. Best GFLOPs: 1056.2801
2024-04-28 22:57:51 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_1] Trial #506: GFLOPs: 700.4069. Time: 330.5394 us. Best GFLOPs: 1056.2801
2024-04-28 22:57:51 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_1] Trial #507: GFLOPs: 697.3288. Time: 331.9984 us. Best GFLOPs: 1056.2801
2024-04-28 22:57:51 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_1] Trial #508: GFLOPs: 634.3046. Time: 364.9857 us. Best GFLOPs: 1056.2801
2024-04-28 22:57:51 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_1] Trial #509: GFLOPs: 544.8513. Time: 424.9087 us. Best GFLOPs: 1056.2801
2024-04-28 22:57:51 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_1] Trial #510: GFLOPs: 5.5881. Time: 41429.4597 us. Best GFLOPs: 1056.2801
2024-04-28 22:57:51 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_1] Trial #511: GFLOPs: 3.1059. Time: 74538.5733 us. Best GFLOPs: 1056.2801
2024-04-28 22:57:51 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_1] Trial #512: GFLOPs: 23.4954. Time: 9853.5136 us. Best GFLOPs: 1056.2801
2024-04-28 23:21:31 [INFO] [evolutionary_search.cc:713] Generating candidates......
2024-04-28 23:21:32 [INFO] [evolutionary_search.cc:715] Picked top 102 candidate(s) from database
2024-04-28 23:21:37 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x3858de8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x3c39958)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0xa2a8408)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x3f4f298)]: 0 failure(s)
2024-04-28 23:21:37 [INFO] [evolutionary_search.cc:723] Sampled 410 candidate(s)
2024-04-28 23:21:49 [INFO] [evolutionary_search.cc:621] Evolve iter #0 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x3858de8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x3c39958)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0xa2a8408)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x3f4f298)]: 0 failure(s)
2024-04-28 23:22:00 [INFO] [evolutionary_search.cc:621] Evolve iter #1 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x3858de8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x3c39958)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0xa2a8408)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x3f4f298)]: 0 failure(s)
2024-04-28 23:22:11 [INFO] [evolutionary_search.cc:621] Evolve iter #2 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x3858de8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x3c39958)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0xa2a8408)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x3f4f298)]: 0 failure(s)
2024-04-28 23:22:22 [INFO] [evolutionary_search.cc:621] Evolve iter #3 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x3858de8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x3c39958)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0xa2a8408)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x3f4f298)]: 0 failure(s)
2024-04-28 23:22:28 [INFO] [evolutionary_search.cc:649] Scores of the best 64 candidates:
[1 : 16]:	0.9186  0.9111  0.8531  0.8520  0.8460  0.8409  0.8366  0.8366  0.8216  0.8139  0.8139  0.7930  0.7920  0.7880  0.7843  0.7832
[17 : 32]:	0.7815  0.7736  0.7736  0.7565  0.7563  0.7543  0.7499  0.7477  0.7440  0.7402  0.7396  0.7256  0.7214  0.7184  0.7092  0.7077
[33 : 48]:	0.7076  0.7049  0.7039  0.7027  0.7027  0.7020  0.7014  0.7007  0.7004  0.6996  0.6954  0.6944  0.6918  0.6905  0.6878  0.6877
[49 : 64]:	0.6866  0.6855  0.6850  0.6847  0.6847  0.6838  0.6832  0.6825  0.6821  0.6818  0.6818  0.6818  0.6809  0.6804  0.6762  0.6739
2024-04-28 23:22:29 [INFO] [evolutionary_search.cc:727] Got 64 candidate(s) with evolutionary search
2024-04-28 23:22:29 [INFO] [evolutionary_search.cc:730] Sending 64 candidates(s) for measurement
2024-04-28 23:24:00 [INFO] [task_scheduler.cc:121] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_1] Trial #513: Error in building:
LocalBuilder: Timeout, killed after 30.0 seconds
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(1), T.int64(28), T.int64(28), T.int64(128)), "float32"), p1: T.Buffer((T.int64(4), T.int64(1), T.int64(3), T.int64(3), T.int64(128), T.int64(32)), "float32"), p2: T.Buffer((T.int64(1), T.int64(4), T.int64(1), T.int64(1), T.int64(32)), "float32"), p3: T.Buffer((T.int64(1), T.int64(4), T.int64(28), T.int64(28), T.int64(32)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(4), T.int64(28), T.int64(28), T.int64(32)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        data_pad = T.alloc_buffer((T.int64(1), T.int64(1), T.int64(30), T.int64(30), T.int64(128)))
        conv2d_NCHWc = T.alloc_buffer((T.int64(1), T.int64(4), T.int64(28), T.int64(28), T.int64(32)))
        for n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_fused_fused in T.parallel(T.int64(112), annotations={"pragma_auto_unroll_max_step": 512, "pragma_unroll_explicit": 1}):
            for ax0, ax1, ax2, ax3, ax4 in T.grid(T.int64(1), T.int64(1), T.int64(9), T.int64(3), T.int64(128)):
                with T.block("data_pad"):
                    v_i0, v_i1 = T.axis.remap("SS", [ax0, ax1])
                    v_i2 = T.axis.spatial(T.int64(30), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_fused_fused // T.int64(56) * T.int64(14) + n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_fused_fused % T.int64(8) // T.int64(4) * T.int64(7) + ax2)
                    v_i3 = T.axis.spatial(T.int64(30), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_fused_fused % T.int64(56) // T.int64(8) * T.int64(4) + n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_fused_fused % T.int64(4) + ax3)
                    v_i4 = T.axis.spatial(T.int64(128), ax4)
                    T.reads(p0[v_i0, v_i1, v_i2 - T.int64(1), v_i3 - T.int64(1), v_i4])
                    T.writes(data_pad[v_i0, v_i1, v_i2, v_i3, v_i4])
                    data_pad[v_i0, v_i1, v_i2, v_i3, v_i4] = T.if_then_else(T.int64(1) <= v_i2 and v_i2 < T.int64(29) and T.int64(1) <= v_i3 and v_i3 < T.int64(29), p0[v_i0, v_i1, v_i2 - T.int64(1), v_i3 - T.int64(1), v_i4], T.float32(0))
            for oc_block_1 in range(T.int64(1)):
                for n_2_init, oc_chunk_2_init, oh_2_init, ow_2_init, oc_block_2_init, n_3_init, oc_chunk_3_init, oh_3_init, ow_3_init, oc_block_3_init in T.grid(T.int64(1), T.int64(4), T.int64(1), T.int64(1), T.int64(32), T.int64(1), T.int64(1), T.int64(7), T.int64(1), T.int64(1)):
                    with T.block("conv2d_NCHWc_init"):
                        v_n = T.axis.spatial(T.int64(1), n_2_init + n_3_init)
                        v_oc_chunk = T.axis.spatial(T.int64(4), oc_chunk_2_init + oc_chunk_3_init)
                        v_oh = T.axis.spatial(T.int64(28), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_fused_fused // T.int64(56) * T.int64(14) + n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_fused_fused % T.int64(8) // T.int64(4) * T.int64(7) + oh_2_init * T.int64(7) + oh_3_init)
                        v_ow = T.axis.spatial(T.int64(28), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_fused_fused % T.int64(56) // T.int64(8) * T.int64(4) + n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_fused_fused % T.int64(4) + ow_2_init + ow_3_init)
                        v_oc_block = T.axis.spatial(T.int64(32), oc_block_1 * T.int64(32) + oc_block_2_init + oc_block_3_init)
                        T.reads()
                        T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                        T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                        conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = T.float32(0)
                for ic_0, kh_0, kw_0, n_2, oc_chunk_2, oh_2, ow_2, oc_block_2, ic_1, kh_1, kw_1, n_3, oc_chunk_3, oh_3, ow_3, oc_block_3 in T.grid(T.int64(32), T.int64(1), T.int64(3), T.int64(1), T.int64(4), T.int64(1), T.int64(1), T.int64(32), T.int64(4), T.int64(3), T.int64(1), T.int64(1), T.int64(1), T.int64(7), T.int64(1), T.int64(1)):
                    with T.block("conv2d_NCHWc_update"):
                        v_n = T.axis.spatial(T.int64(1), n_2 + n_3)
                        v_oc_chunk = T.axis.spatial(T.int64(4), oc_chunk_2 + oc_chunk_3)
                        v_oh = T.axis.spatial(T.int64(28), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_fused_fused // T.int64(56) * T.int64(14) + n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_fused_fused % T.int64(8) // T.int64(4) * T.int64(7) + oh_2 * T.int64(7) + oh_3)
                        v_ow = T.axis.spatial(T.int64(28), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_fused_fused % T.int64(56) // T.int64(8) * T.int64(4) + n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_fused_fused % T.int64(4) + ow_2 + ow_3)
                        v_oc_block = T.axis.spatial(T.int64(32), oc_block_1 * T.int64(32) + oc_block_2 + oc_block_3)
                        v_ic = T.axis.reduce(T.int64(128), ic_0 * T.int64(4) + ic_1)
                        v_kh = T.axis.reduce(T.int64(3), kh_0 * T.int64(3) + kh_1)
                        v_kw = T.axis.reduce(T.int64(3), kw_0 + kw_1)
                        T.reads(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block], data_pad[v_n, v_ic // T.int64(128), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(128)], p1[v_oc_chunk, v_ic // T.int64(128), v_kh, v_kw, v_ic % T.int64(128), v_oc_block])
                        T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                        T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                        conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] + data_pad[v_n, v_ic // T.int64(128), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(128)] * p1[v_oc_chunk, v_ic // T.int64(128), v_kh, v_kw, v_ic % T.int64(128), v_oc_block]
                for ax0, ax1, ax2 in T.grid(T.int64(1), T.int64(4), T.int64(7)):
                    for ax3_ax4_fused in T.vectorized(T.int64(32)):
                        with T.block("T_relu"):
                            v_ax0, v_ax1 = T.axis.remap("SS", [ax0, ax1])
                            v_ax2 = T.axis.spatial(T.int64(28), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_fused_fused // T.int64(56) * T.int64(14) + n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_fused_fused % T.int64(8) // T.int64(4) * T.int64(7) + ax2)
                            v_ax3 = T.axis.spatial(T.int64(28), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_fused_fused % T.int64(56) // T.int64(8) * T.int64(4) + n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_fused_fused % T.int64(4))
                            v_ax4 = T.axis.spatial(T.int64(32), ax3_ax4_fused)
                            T.reads(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4], p3[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                            T.writes(T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                            T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.max(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] + p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4] + p3[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], T.float32(0))
b0 = sch.get_block(name="data_pad", func_name="main")
b1 = sch.get_block(name="conv2d_NCHWc", func_name="main")
b2 = sch.get_block(name="T_add", func_name="main")
b3 = sch.get_block(name="T_add_1", func_name="main")
b4 = sch.get_block(name="root", func_name="main")
sch.compute_inline(block=b3)
sch.compute_inline(block=b2)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSRSRS")
l5, l6, l7, l8, l9, l10, l11, l12 = sch.get_loops(block=b1)
v13, v14, v15, v16 = sch.sample_perfect_tile(loop=l5, n=4, max_innermost_factor=64, decision=[1, 1, 1, 1])
l17, l18, l19, l20 = sch.split(loop=l5, factors=[v13, v14, v15, v16], preserve_unit_iters=True)
v21, v22, v23, v24 = sch.sample_perfect_tile(loop=l6, n=4, max_innermost_factor=64, decision=[1, 1, 4, 1])
l25, l26, l27, l28 = sch.split(loop=l6, factors=[v21, v22, v23, v24], preserve_unit_iters=True)
v29, v30, v31, v32 = sch.sample_perfect_tile(loop=l7, n=4, max_innermost_factor=64, decision=[2, 2, 1, 7])
l33, l34, l35, l36 = sch.split(loop=l7, factors=[v29, v30, v31, v32], preserve_unit_iters=True)
v37, v38, v39, v40 = sch.sample_perfect_tile(loop=l8, n=4, max_innermost_factor=64, decision=[7, 4, 1, 1])
l41, l42, l43, l44 = sch.split(loop=l8, factors=[v37, v38, v39, v40], preserve_unit_iters=True)
v45, v46, v47, v48 = sch.sample_perfect_tile(loop=l9, n=4, max_innermost_factor=64, decision=[1, 1, 32, 1])
l49, l50, l51, l52 = sch.split(loop=l9, factors=[v45, v46, v47, v48], preserve_unit_iters=True)
v53, v54 = sch.sample_perfect_tile(loop=l10, n=2, max_innermost_factor=64, decision=[32, 4])
l55, l56 = sch.split(loop=l10, factors=[v53, v54], preserve_unit_iters=True)
v57, v58 = sch.sample_perfect_tile(loop=l11, n=2, max_innermost_factor=64, decision=[1, 3])
l59, l60 = sch.split(loop=l11, factors=[v57, v58], preserve_unit_iters=True)
v61, v62 = sch.sample_perfect_tile(loop=l12, n=2, max_innermost_factor=64, decision=[3, 1])
l63, l64 = sch.split(loop=l12, factors=[v61, v62], preserve_unit_iters=True)
sch.reorder(l17, l25, l33, l41, l49, l18, l26, l34, l42, l50, l55, l59, l63, l19, l27, l35, l43, l51, l56, l60, l64, l20, l28, l36, l44, l52)
b65, = sch.get_consumers(block=b1)
sch.reverse_compute_at(block=b65, loop=l50, preserve_unit_loops=True, index=-1)
sch.annotate(block_or_loop=b4, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b4, ann_key="meta_schedule.vectorize", ann_val=64)
v66 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b4, ann_key="meta_schedule.unroll_explicit", ann_val=v66)
l67 = sch.sample_compute_location(block=b0, decision=8)
sch.compute_at(block=b0, loop=l67, preserve_unit_loops=True, index=-1)
sch.enter_postproc()
b68 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b68, ann_key="meta_schedule.parallel")
sch.unannotate(block_or_loop=b68, ann_key="meta_schedule.vectorize")
sch.unannotate(block_or_loop=b68, ann_key="meta_schedule.unroll_explicit")
b69, b70, b71 = sch.get_child_blocks(b68)
l72, l73, l74, l75, l76, l77, l78, l79, l80, l81, l82, l83, l84, l85 = sch.get_loops(block=b69)
l86 = sch.fuse(l72, l73, l74, l75, l76, l77, l78, l79, l80, preserve_unit_iters=True)
sch.parallel(loop=l86)
l87, l88, l89, l90, l91, l92, l93, l94, l95, l96, l97, l98, l99, l100, l101, l102, l103, l104 = sch.get_loops(block=b70)
l105 = sch.fuse(l87, preserve_unit_iters=True)
sch.parallel(loop=l105)
sch.annotate(block_or_loop=l105, ann_key="pragma_auto_unroll_max_step", ann_val=512)
sch.annotate(block_or_loop=l105, ann_key="pragma_unroll_explicit", ann_val=1)
l106, l107, l108, l109, l110, l111, l112 = sch.get_loops(block=b71)
l113 = sch.fuse(l111, l112, preserve_unit_iters=True)
sch.vectorize(loop=l113)
b114 = sch.get_block(name="conv2d_NCHWc", func_name="main")
l115, l116, l117, l118, l119, l120, l121, l122, l123, l124, l125, l126, l127, l128, l129, l130, l131, l132 = sch.get_loops(block=b114)
b133 = sch.decompose_reduction(block=b114, loop=l117)
2024-04-28 23:24:00 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_1] Trial #514: GFLOPs: 537.3883. Time: 430.8097 us. Best GFLOPs: 1056.2801
2024-04-28 23:24:00 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_1] Trial #515: GFLOPs: 946.8951. Time: 244.4960 us. Best GFLOPs: 1056.2801
2024-04-28 23:24:00 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_1] Trial #516: GFLOPs: 979.0745. Time: 236.4601 us. Best GFLOPs: 1056.2801
2024-04-28 23:24:00 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_1] Trial #517: GFLOPs: 729.6929. Time: 317.2733 us. Best GFLOPs: 1056.2801
2024-04-28 23:24:00 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_1] Trial #518: GFLOPs: 918.0815. Time: 252.1694 us. Best GFLOPs: 1056.2801
2024-04-28 23:24:00 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_1] Trial #519: GFLOPs: 49.2103. Time: 4704.5429 us. Best GFLOPs: 1056.2801
2024-04-28 23:24:00 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_1] Trial #520: GFLOPs: 811.5859. Time: 285.2588 us. Best GFLOPs: 1056.2801
2024-04-28 23:24:00 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_1] Trial #521: GFLOPs: 997.0901. Time: 232.1877 us. Best GFLOPs: 1056.2801
2024-04-28 23:24:00 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_1] Trial #522: GFLOPs: 910.9356. Time: 254.1476 us. Best GFLOPs: 1056.2801
2024-04-28 23:24:00 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_1] Trial #523: GFLOPs: 905.6678. Time: 255.6258 us. Best GFLOPs: 1056.2801
2024-04-28 23:24:00 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_1] Trial #524: GFLOPs: 668.1170. Time: 346.5143 us. Best GFLOPs: 1056.2801
2024-04-28 23:24:00 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_1] Trial #525: GFLOPs: 644.3548. Time: 359.2928 us. Best GFLOPs: 1056.2801
2024-04-28 23:24:00 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_1] Trial #526: GFLOPs: 958.3491. Time: 241.5738 us. Best GFLOPs: 1056.2801
2024-04-28 23:24:00 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_1] Trial #527: GFLOPs: 868.5802. Time: 266.5408 us. Best GFLOPs: 1056.2801
2024-04-28 23:24:00 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_1] Trial #528: GFLOPs: 974.9333. Time: 237.4645 us. Best GFLOPs: 1056.2801
2024-04-28 23:24:00 [INFO] [task_scheduler.cc:121] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_1] Trial #529: Error in building:
LocalBuilder: Timeout, killed after 30.0 seconds
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(1), T.int64(28), T.int64(28), T.int64(128)), "float32"), p1: T.Buffer((T.int64(4), T.int64(1), T.int64(3), T.int64(3), T.int64(128), T.int64(32)), "float32"), p2: T.Buffer((T.int64(1), T.int64(4), T.int64(1), T.int64(1), T.int64(32)), "float32"), p3: T.Buffer((T.int64(1), T.int64(4), T.int64(28), T.int64(28), T.int64(32)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(4), T.int64(28), T.int64(28), T.int64(32)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        data_pad = T.alloc_buffer((T.int64(1), T.int64(1), T.int64(30), T.int64(30), T.int64(128)))
        conv2d_NCHWc = T.alloc_buffer((T.int64(1), T.int64(4), T.int64(28), T.int64(28), T.int64(32)))
        for n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_fused_fused in T.parallel(T.int64(112), annotations={"pragma_auto_unroll_max_step": 512, "pragma_unroll_explicit": 1}):
            for ax0, ax1, ax2, ax3, ax4 in T.grid(T.int64(1), T.int64(1), T.int64(9), T.int64(3), T.int64(128)):
                with T.block("data_pad"):
                    v_i0, v_i1 = T.axis.remap("SS", [ax0, ax1])
                    v_i2 = T.axis.spatial(T.int64(30), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_fused_fused // T.int64(28) * T.int64(7) + ax2)
                    v_i3 = T.axis.spatial(T.int64(30), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_fused_fused % T.int64(28) + ax3)
                    v_i4 = T.axis.spatial(T.int64(128), ax4)
                    T.reads(p0[v_i0, v_i1, v_i2 - T.int64(1), v_i3 - T.int64(1), v_i4])
                    T.writes(data_pad[v_i0, v_i1, v_i2, v_i3, v_i4])
                    data_pad[v_i0, v_i1, v_i2, v_i3, v_i4] = T.if_then_else(T.int64(1) <= v_i2 and v_i2 < T.int64(29) and T.int64(1) <= v_i3 and v_i3 < T.int64(29), p0[v_i0, v_i1, v_i2 - T.int64(1), v_i3 - T.int64(1), v_i4], T.float32(0))
            for oc_block_1 in range(T.int64(1)):
                for n_2_init, oc_chunk_2_init, oh_2_init, ow_2_init, oc_block_2_init, n_3_init, oc_chunk_3_init, oh_3_init, ow_3_init, oc_block_3_init in T.grid(T.int64(1), T.int64(4), T.int64(1), T.int64(1), T.int64(32), T.int64(1), T.int64(1), T.int64(7), T.int64(1), T.int64(1)):
                    with T.block("conv2d_NCHWc_init"):
                        v_n = T.axis.spatial(T.int64(1), n_2_init + n_3_init)
                        v_oc_chunk = T.axis.spatial(T.int64(4), oc_chunk_2_init + oc_chunk_3_init)
                        v_oh = T.axis.spatial(T.int64(28), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_fused_fused // T.int64(28) * T.int64(7) + oh_2_init * T.int64(7) + oh_3_init)
                        v_ow = T.axis.spatial(T.int64(28), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_fused_fused % T.int64(28) + ow_2_init + ow_3_init)
                        v_oc_block = T.axis.spatial(T.int64(32), oc_block_1 * T.int64(32) + oc_block_2_init + oc_block_3_init)
                        T.reads()
                        T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                        T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                        conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = T.float32(0)
                for ic_0, kh_0, kw_0, n_2, oc_chunk_2, oh_2, ow_2, oc_block_2, ic_1, kh_1, kw_1, n_3, oc_chunk_3, oh_3, ow_3, oc_block_3 in T.grid(T.int64(8), T.int64(1), T.int64(3), T.int64(1), T.int64(4), T.int64(1), T.int64(1), T.int64(32), T.int64(16), T.int64(3), T.int64(1), T.int64(1), T.int64(1), T.int64(7), T.int64(1), T.int64(1)):
                    with T.block("conv2d_NCHWc_update"):
                        v_n = T.axis.spatial(T.int64(1), n_2 + n_3)
                        v_oc_chunk = T.axis.spatial(T.int64(4), oc_chunk_2 + oc_chunk_3)
                        v_oh = T.axis.spatial(T.int64(28), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_fused_fused // T.int64(28) * T.int64(7) + oh_2 * T.int64(7) + oh_3)
                        v_ow = T.axis.spatial(T.int64(28), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_fused_fused % T.int64(28) + ow_2 + ow_3)
                        v_oc_block = T.axis.spatial(T.int64(32), oc_block_1 * T.int64(32) + oc_block_2 + oc_block_3)
                        v_ic = T.axis.reduce(T.int64(128), ic_0 * T.int64(16) + ic_1)
                        v_kh = T.axis.reduce(T.int64(3), kh_0 * T.int64(3) + kh_1)
                        v_kw = T.axis.reduce(T.int64(3), kw_0 + kw_1)
                        T.reads(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block], data_pad[v_n, v_ic // T.int64(128), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(128)], p1[v_oc_chunk, v_ic // T.int64(128), v_kh, v_kw, v_ic % T.int64(128), v_oc_block])
                        T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                        T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                        conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] + data_pad[v_n, v_ic // T.int64(128), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(128)] * p1[v_oc_chunk, v_ic // T.int64(128), v_kh, v_kw, v_ic % T.int64(128), v_oc_block]
                for ax0, ax1, ax2 in T.grid(T.int64(1), T.int64(4), T.int64(7)):
                    for ax3_ax4_fused in T.vectorized(T.int64(32)):
                        with T.block("T_relu"):
                            v_ax0, v_ax1 = T.axis.remap("SS", [ax0, ax1])
                            v_ax2 = T.axis.spatial(T.int64(28), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_fused_fused // T.int64(28) * T.int64(7) + ax2)
                            v_ax3 = T.axis.spatial(T.int64(28), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_fused_fused % T.int64(28))
                            v_ax4 = T.axis.spatial(T.int64(32), ax3_ax4_fused)
                            T.reads(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4], p3[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                            T.writes(T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                            T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.max(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] + p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4] + p3[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], T.float32(0))
b0 = sch.get_block(name="data_pad", func_name="main")
b1 = sch.get_block(name="conv2d_NCHWc", func_name="main")
b2 = sch.get_block(name="T_add", func_name="main")
b3 = sch.get_block(name="T_add_1", func_name="main")
b4 = sch.get_block(name="root", func_name="main")
sch.compute_inline(block=b3)
sch.compute_inline(block=b2)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSRSRS")
l5, l6, l7, l8, l9, l10, l11, l12 = sch.get_loops(block=b1)
v13, v14, v15, v16 = sch.sample_perfect_tile(loop=l5, n=4, max_innermost_factor=64, decision=[1, 1, 1, 1])
l17, l18, l19, l20 = sch.split(loop=l5, factors=[v13, v14, v15, v16], preserve_unit_iters=True)
v21, v22, v23, v24 = sch.sample_perfect_tile(loop=l6, n=4, max_innermost_factor=64, decision=[1, 1, 4, 1])
l25, l26, l27, l28 = sch.split(loop=l6, factors=[v21, v22, v23, v24], preserve_unit_iters=True)
v29, v30, v31, v32 = sch.sample_perfect_tile(loop=l7, n=4, max_innermost_factor=64, decision=[4, 1, 1, 7])
l33, l34, l35, l36 = sch.split(loop=l7, factors=[v29, v30, v31, v32], preserve_unit_iters=True)
v37, v38, v39, v40 = sch.sample_perfect_tile(loop=l8, n=4, max_innermost_factor=64, decision=[1, 28, 1, 1])
l41, l42, l43, l44 = sch.split(loop=l8, factors=[v37, v38, v39, v40], preserve_unit_iters=True)
v45, v46, v47, v48 = sch.sample_perfect_tile(loop=l9, n=4, max_innermost_factor=64, decision=[1, 1, 32, 1])
l49, l50, l51, l52 = sch.split(loop=l9, factors=[v45, v46, v47, v48], preserve_unit_iters=True)
v53, v54 = sch.sample_perfect_tile(loop=l10, n=2, max_innermost_factor=64, decision=[8, 16])
l55, l56 = sch.split(loop=l10, factors=[v53, v54], preserve_unit_iters=True)
v57, v58 = sch.sample_perfect_tile(loop=l11, n=2, max_innermost_factor=64, decision=[1, 3])
l59, l60 = sch.split(loop=l11, factors=[v57, v58], preserve_unit_iters=True)
v61, v62 = sch.sample_perfect_tile(loop=l12, n=2, max_innermost_factor=64, decision=[3, 1])
l63, l64 = sch.split(loop=l12, factors=[v61, v62], preserve_unit_iters=True)
sch.reorder(l17, l25, l33, l41, l49, l18, l26, l34, l42, l50, l55, l59, l63, l19, l27, l35, l43, l51, l56, l60, l64, l20, l28, l36, l44, l52)
b65, = sch.get_consumers(block=b1)
sch.reverse_compute_at(block=b65, loop=l50, preserve_unit_loops=True, index=-1)
sch.annotate(block_or_loop=b4, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b4, ann_key="meta_schedule.vectorize", ann_val=64)
v66 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b4, ann_key="meta_schedule.unroll_explicit", ann_val=v66)
l67 = sch.sample_compute_location(block=b0, decision=8)
sch.compute_at(block=b0, loop=l67, preserve_unit_loops=True, index=-1)
sch.enter_postproc()
b68 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b68, ann_key="meta_schedule.parallel")
sch.unannotate(block_or_loop=b68, ann_key="meta_schedule.vectorize")
sch.unannotate(block_or_loop=b68, ann_key="meta_schedule.unroll_explicit")
b69, b70, b71 = sch.get_child_blocks(b68)
l72, l73, l74, l75, l76, l77, l78, l79, l80, l81, l82, l83, l84, l85 = sch.get_loops(block=b69)
l86 = sch.fuse(l72, l73, l74, l75, l76, l77, l78, l79, l80, preserve_unit_iters=True)
sch.parallel(loop=l86)
l87, l88, l89, l90, l91, l92, l93, l94, l95, l96, l97, l98, l99, l100, l101, l102, l103, l104 = sch.get_loops(block=b70)
l105 = sch.fuse(l87, preserve_unit_iters=True)
sch.parallel(loop=l105)
sch.annotate(block_or_loop=l105, ann_key="pragma_auto_unroll_max_step", ann_val=512)
sch.annotate(block_or_loop=l105, ann_key="pragma_unroll_explicit", ann_val=1)
l106, l107, l108, l109, l110, l111, l112 = sch.get_loops(block=b71)
l113 = sch.fuse(l111, l112, preserve_unit_iters=True)
sch.vectorize(loop=l113)
b114 = sch.get_block(name="conv2d_NCHWc", func_name="main")
l115, l116, l117, l118, l119, l120, l121, l122, l123, l124, l125, l126, l127, l128, l129, l130, l131, l132 = sch.get_loops(block=b114)
b133 = sch.decompose_reduction(block=b114, loop=l117)
2024-04-28 23:24:00 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_1] Trial #530: GFLOPs: 862.9971. Time: 268.2652 us. Best GFLOPs: 1056.2801
2024-04-28 23:24:00 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_1] Trial #531: GFLOPs: 774.9594. Time: 298.7409 us. Best GFLOPs: 1056.2801
2024-04-28 23:24:00 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_1] Trial #532: GFLOPs: 805.7547. Time: 287.3232 us. Best GFLOPs: 1056.2801
2024-04-28 23:24:00 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_1] Trial #533: GFLOPs: 848.3907. Time: 272.8838 us. Best GFLOPs: 1056.2801
2024-04-28 23:24:00 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_1] Trial #534: GFLOPs: 615.6038. Time: 376.0731 us. Best GFLOPs: 1056.2801
2024-04-28 23:24:00 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_1] Trial #535: GFLOPs: 912.7416. Time: 253.6447 us. Best GFLOPs: 1056.2801
2024-04-28 23:24:00 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_1] Trial #536: GFLOPs: 803.7099. Time: 288.0543 us. Best GFLOPs: 1056.2801
2024-04-28 23:24:00 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_1] Trial #537: GFLOPs: 649.0978. Time: 356.6675 us. Best GFLOPs: 1056.2801
2024-04-28 23:24:00 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_1] Trial #538: GFLOPs: 826.3308. Time: 280.1687 us. Best GFLOPs: 1056.2801
2024-04-28 23:24:00 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_1] Trial #539: GFLOPs: 735.3788. Time: 314.8202 us. Best GFLOPs: 1056.2801
2024-04-28 23:24:00 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_1] Trial #540: GFLOPs: 88.6166. Time: 2612.5132 us. Best GFLOPs: 1056.2801
2024-04-28 23:24:00 [INFO] [task_scheduler.cc:121] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_1] Trial #541: Error in building:
LocalBuilder: Timeout, killed after 30.0 seconds
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(1), T.int64(28), T.int64(28), T.int64(128)), "float32"), p1: T.Buffer((T.int64(4), T.int64(1), T.int64(3), T.int64(3), T.int64(128), T.int64(32)), "float32"), p2: T.Buffer((T.int64(1), T.int64(4), T.int64(1), T.int64(1), T.int64(32)), "float32"), p3: T.Buffer((T.int64(1), T.int64(4), T.int64(28), T.int64(28), T.int64(32)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(4), T.int64(28), T.int64(28), T.int64(32)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        conv2d_NCHWc = T.alloc_buffer((T.int64(1), T.int64(4), T.int64(28), T.int64(28), T.int64(32)))
        for n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused in T.parallel(T.int64(112), annotations={"pragma_auto_unroll_max_step": 512, "pragma_unroll_explicit": 1}):
            for n_2_init, oc_chunk_2_init, oh_2_init, ow_2_init, oc_block_2_init, n_3_init, oc_chunk_3_init, oh_3_init, ow_3_init, oc_block_3_init in T.grid(T.int64(1), T.int64(4), T.int64(1), T.int64(1), T.int64(32), T.int64(1), T.int64(1), T.int64(7), T.int64(1), T.int64(1)):
                with T.block("conv2d_NCHWc_init"):
                    v_n = T.axis.spatial(T.int64(1), n_2_init + n_3_init)
                    v_oc_chunk = T.axis.spatial(T.int64(4), oc_chunk_2_init + oc_chunk_3_init)
                    v_oh = T.axis.spatial(T.int64(28), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused // T.int64(28) * T.int64(7) + oh_2_init * T.int64(7) + oh_3_init)
                    v_ow = T.axis.spatial(T.int64(28), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused % T.int64(28) + ow_2_init + ow_3_init)
                    v_oc_block = T.axis.spatial(T.int64(32), oc_block_2_init + oc_block_3_init)
                    T.reads()
                    T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                    T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                    conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = T.float32(0)
            for ic_0, kh_0, kw_0, n_2, oc_chunk_2, oh_2, ow_2, oc_block_2, ic_1, kh_1, kw_1, n_3, oc_chunk_3, oh_3, ow_3, oc_block_3 in T.grid(T.int64(8), T.int64(1), T.int64(3), T.int64(1), T.int64(4), T.int64(1), T.int64(1), T.int64(32), T.int64(16), T.int64(3), T.int64(1), T.int64(1), T.int64(1), T.int64(7), T.int64(1), T.int64(1)):
                with T.block("conv2d_NCHWc_update"):
                    v_n = T.axis.spatial(T.int64(1), n_2 + n_3)
                    v_oc_chunk = T.axis.spatial(T.int64(4), oc_chunk_2 + oc_chunk_3)
                    v_oh = T.axis.spatial(T.int64(28), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused // T.int64(28) * T.int64(7) + oh_2 * T.int64(7) + oh_3)
                    v_ow = T.axis.spatial(T.int64(28), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused % T.int64(28) + ow_2 + ow_3)
                    v_oc_block = T.axis.spatial(T.int64(32), oc_block_2 + oc_block_3)
                    v_ic = T.axis.reduce(T.int64(128), ic_0 * T.int64(16) + ic_1)
                    v_kh = T.axis.reduce(T.int64(3), kh_0 * T.int64(3) + kh_1)
                    v_kw = T.axis.reduce(T.int64(3), kw_0 + kw_1)
                    T.reads(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block], p0[v_n, v_ic // T.int64(128), v_oh + v_kh - T.int64(1), v_ow + v_kw - T.int64(1), v_ic % T.int64(128)], p1[v_oc_chunk, v_ic // T.int64(128), v_kh, v_kw, v_ic % T.int64(128), v_oc_block])
                    T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                    T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                    conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] + T.if_then_else(T.int64(1) <= v_oh + v_kh and v_oh + v_kh < T.int64(29) and T.int64(1) <= v_ow + v_kw and v_ow + v_kw < T.int64(29), p0[v_n, v_ic // T.int64(128), v_oh + v_kh - T.int64(1), v_ow + v_kw - T.int64(1), v_ic % T.int64(128)], T.float32(0)) * p1[v_oc_chunk, v_ic // T.int64(128), v_kh, v_kw, v_ic % T.int64(128), v_oc_block]
            for ax0, ax1, ax2 in T.grid(T.int64(1), T.int64(4), T.int64(7)):
                for ax3_ax4_fused in T.vectorized(T.int64(32)):
                    with T.block("T_relu"):
                        v_ax0, v_ax1 = T.axis.remap("SS", [ax0, ax1])
                        v_ax2 = T.axis.spatial(T.int64(28), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused // T.int64(28) * T.int64(7) + ax2)
                        v_ax3 = T.axis.spatial(T.int64(28), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused % T.int64(28))
                        v_ax4 = T.axis.spatial(T.int64(32), ax3_ax4_fused)
                        T.reads(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4], p3[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                        T.writes(T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                        T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.max(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] + p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4] + p3[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], T.float32(0))
b0 = sch.get_block(name="data_pad", func_name="main")
b1 = sch.get_block(name="conv2d_NCHWc", func_name="main")
b2 = sch.get_block(name="T_add", func_name="main")
b3 = sch.get_block(name="T_add_1", func_name="main")
b4 = sch.get_block(name="root", func_name="main")
sch.compute_inline(block=b3)
sch.compute_inline(block=b2)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSRSRS")
l5, l6, l7, l8, l9, l10, l11, l12 = sch.get_loops(block=b1)
v13, v14, v15, v16 = sch.sample_perfect_tile(loop=l5, n=4, max_innermost_factor=64, decision=[1, 1, 1, 1])
l17, l18, l19, l20 = sch.split(loop=l5, factors=[v13, v14, v15, v16], preserve_unit_iters=True)
v21, v22, v23, v24 = sch.sample_perfect_tile(loop=l6, n=4, max_innermost_factor=64, decision=[1, 1, 4, 1])
l25, l26, l27, l28 = sch.split(loop=l6, factors=[v21, v22, v23, v24], preserve_unit_iters=True)
v29, v30, v31, v32 = sch.sample_perfect_tile(loop=l7, n=4, max_innermost_factor=64, decision=[4, 1, 1, 7])
l33, l34, l35, l36 = sch.split(loop=l7, factors=[v29, v30, v31, v32], preserve_unit_iters=True)
v37, v38, v39, v40 = sch.sample_perfect_tile(loop=l8, n=4, max_innermost_factor=64, decision=[4, 7, 1, 1])
l41, l42, l43, l44 = sch.split(loop=l8, factors=[v37, v38, v39, v40], preserve_unit_iters=True)
v45, v46, v47, v48 = sch.sample_perfect_tile(loop=l9, n=4, max_innermost_factor=64, decision=[1, 1, 32, 1])
l49, l50, l51, l52 = sch.split(loop=l9, factors=[v45, v46, v47, v48], preserve_unit_iters=True)
v53, v54 = sch.sample_perfect_tile(loop=l10, n=2, max_innermost_factor=64, decision=[8, 16])
l55, l56 = sch.split(loop=l10, factors=[v53, v54], preserve_unit_iters=True)
v57, v58 = sch.sample_perfect_tile(loop=l11, n=2, max_innermost_factor=64, decision=[1, 3])
l59, l60 = sch.split(loop=l11, factors=[v57, v58], preserve_unit_iters=True)
v61, v62 = sch.sample_perfect_tile(loop=l12, n=2, max_innermost_factor=64, decision=[3, 1])
l63, l64 = sch.split(loop=l12, factors=[v61, v62], preserve_unit_iters=True)
sch.reorder(l17, l25, l33, l41, l49, l18, l26, l34, l42, l50, l55, l59, l63, l19, l27, l35, l43, l51, l56, l60, l64, l20, l28, l36, l44, l52)
b65, = sch.get_consumers(block=b1)
sch.reverse_compute_at(block=b65, loop=l50, preserve_unit_loops=True, index=-1)
sch.annotate(block_or_loop=b4, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b4, ann_key="meta_schedule.vectorize", ann_val=64)
v66 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b4, ann_key="meta_schedule.unroll_explicit", ann_val=v66)
l67 = sch.sample_compute_location(block=b0, decision=-2)
sch.compute_at(block=b0, loop=l67, preserve_unit_loops=True, index=-1)
sch.enter_postproc()
b68 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b68, ann_key="meta_schedule.parallel")
sch.unannotate(block_or_loop=b68, ann_key="meta_schedule.vectorize")
sch.unannotate(block_or_loop=b68, ann_key="meta_schedule.unroll_explicit")
b69, b70 = sch.get_child_blocks(b68)
l71, l72, l73, l74, l75, l76, l77, l78, l79, l80, l81, l82, l83, l84, l85, l86, l87, l88, l89, l90, l91, l92, l93, l94, l95, l96 = sch.get_loops(block=b69)
l97 = sch.fuse(l71, l72, l73, l74, l75, l76, l77, l78, l79, l80, preserve_unit_iters=True)
sch.parallel(loop=l97)
sch.annotate(block_or_loop=l97, ann_key="pragma_auto_unroll_max_step", ann_val=512)
sch.annotate(block_or_loop=l97, ann_key="pragma_unroll_explicit", ann_val=1)
l98, l99, l100, l101, l102, l103 = sch.get_loops(block=b70)
l104 = sch.fuse(l102, l103, preserve_unit_iters=True)
sch.vectorize(loop=l104)
b105 = sch.get_block(name="conv2d_NCHWc", func_name="main")
l106, l107, l108, l109, l110, l111, l112, l113, l114, l115, l116, l117, l118, l119, l120, l121, l122 = sch.get_loops(block=b105)
b123 = sch.decompose_reduction(block=b105, loop=l107)
2024-04-28 23:24:00 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_1] Trial #542: GFLOPs: 617.7048. Time: 374.7940 us. Best GFLOPs: 1056.2801
2024-04-28 23:24:00 [INFO] [task_scheduler.cc:121] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_1] Trial #543: Error in building:
LocalBuilder: Timeout, killed after 30.0 seconds
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(1), T.int64(28), T.int64(28), T.int64(128)), "float32"), p1: T.Buffer((T.int64(4), T.int64(1), T.int64(3), T.int64(3), T.int64(128), T.int64(32)), "float32"), p2: T.Buffer((T.int64(1), T.int64(4), T.int64(1), T.int64(1), T.int64(32)), "float32"), p3: T.Buffer((T.int64(1), T.int64(4), T.int64(28), T.int64(28), T.int64(32)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(4), T.int64(28), T.int64(28), T.int64(32)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        data_pad = T.alloc_buffer((T.int64(1), T.int64(1), T.int64(30), T.int64(30), T.int64(128)))
        conv2d_NCHWc = T.alloc_buffer((T.int64(1), T.int64(4), T.int64(28), T.int64(28), T.int64(32)))
        for n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_fused_fused in T.parallel(T.int64(112), annotations={"pragma_auto_unroll_max_step": 512, "pragma_unroll_explicit": 1}):
            for ax0, ax1, ax2, ax3, ax4 in T.grid(T.int64(1), T.int64(1), T.int64(9), T.int64(3), T.int64(128)):
                with T.block("data_pad"):
                    v_i0, v_i1 = T.axis.remap("SS", [ax0, ax1])
                    v_i2 = T.axis.spatial(T.int64(30), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_fused_fused // T.int64(56) * T.int64(14) + n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_fused_fused % T.int64(4) // T.int64(2) * T.int64(7) + ax2)
                    v_i3 = T.axis.spatial(T.int64(30), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_fused_fused % T.int64(2) + n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_fused_fused % T.int64(56) // T.int64(4) * T.int64(2) + ax3)
                    v_i4 = T.axis.spatial(T.int64(128), ax4)
                    T.reads(p0[v_i0, v_i1, v_i2 - T.int64(1), v_i3 - T.int64(1), v_i4])
                    T.writes(data_pad[v_i0, v_i1, v_i2, v_i3, v_i4])
                    data_pad[v_i0, v_i1, v_i2, v_i3, v_i4] = T.if_then_else(T.int64(1) <= v_i2 and v_i2 < T.int64(29) and T.int64(1) <= v_i3 and v_i3 < T.int64(29), p0[v_i0, v_i1, v_i2 - T.int64(1), v_i3 - T.int64(1), v_i4], T.float32(0))
            for oc_block_1 in range(T.int64(1)):
                for n_2_init, oc_chunk_2_init, oh_2_init, ow_2_init, oc_block_2_init, n_3_init, oc_chunk_3_init, oh_3_init, ow_3_init, oc_block_3_init in T.grid(T.int64(1), T.int64(4), T.int64(1), T.int64(1), T.int64(32), T.int64(1), T.int64(1), T.int64(7), T.int64(1), T.int64(1)):
                    with T.block("conv2d_NCHWc_init"):
                        v_n = T.axis.spatial(T.int64(1), n_2_init + n_3_init)
                        v_oc_chunk = T.axis.spatial(T.int64(4), oc_chunk_2_init + oc_chunk_3_init)
                        v_oh = T.axis.spatial(T.int64(28), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_fused_fused // T.int64(56) * T.int64(14) + n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_fused_fused % T.int64(4) // T.int64(2) * T.int64(7) + oh_2_init * T.int64(7) + oh_3_init)
                        v_ow = T.axis.spatial(T.int64(28), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_fused_fused % T.int64(56) // T.int64(4) * T.int64(2) + n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_fused_fused % T.int64(2) + ow_2_init + ow_3_init)
                        v_oc_block = T.axis.spatial(T.int64(32), oc_block_1 * T.int64(32) + oc_block_2_init + oc_block_3_init)
                        T.reads()
                        T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                        T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                        conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = T.float32(0)
                for ic_0, kh_0, kw_0, n_2, oc_chunk_2, oh_2, ow_2, oc_block_2, ic_1, kh_1, kw_1, n_3, oc_chunk_3, oh_3, ow_3, oc_block_3 in T.grid(T.int64(128), T.int64(1), T.int64(1), T.int64(1), T.int64(4), T.int64(1), T.int64(1), T.int64(32), T.int64(1), T.int64(3), T.int64(3), T.int64(1), T.int64(1), T.int64(7), T.int64(1), T.int64(1)):
                    with T.block("conv2d_NCHWc_update"):
                        v_n = T.axis.spatial(T.int64(1), n_2 + n_3)
                        v_oc_chunk = T.axis.spatial(T.int64(4), oc_chunk_2 + oc_chunk_3)
                        v_oh = T.axis.spatial(T.int64(28), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_fused_fused // T.int64(56) * T.int64(14) + n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_fused_fused % T.int64(4) // T.int64(2) * T.int64(7) + oh_2 * T.int64(7) + oh_3)
                        v_ow = T.axis.spatial(T.int64(28), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_fused_fused % T.int64(56) // T.int64(4) * T.int64(2) + n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_fused_fused % T.int64(2) + ow_2 + ow_3)
                        v_oc_block = T.axis.spatial(T.int64(32), oc_block_1 * T.int64(32) + oc_block_2 + oc_block_3)
                        v_ic = T.axis.reduce(T.int64(128), ic_0 + ic_1)
                        v_kh = T.axis.reduce(T.int64(3), kh_0 * T.int64(3) + kh_1)
                        v_kw = T.axis.reduce(T.int64(3), kw_0 * T.int64(3) + kw_1)
                        T.reads(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block], data_pad[v_n, v_ic // T.int64(128), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(128)], p1[v_oc_chunk, v_ic // T.int64(128), v_kh, v_kw, v_ic % T.int64(128), v_oc_block])
                        T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                        T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                        conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] + data_pad[v_n, v_ic // T.int64(128), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(128)] * p1[v_oc_chunk, v_ic // T.int64(128), v_kh, v_kw, v_ic % T.int64(128), v_oc_block]
                for ax0, ax1, ax2 in T.grid(T.int64(1), T.int64(4), T.int64(7)):
                    for ax3_ax4_fused in T.vectorized(T.int64(32)):
                        with T.block("T_relu"):
                            v_ax0, v_ax1 = T.axis.remap("SS", [ax0, ax1])
                            v_ax2 = T.axis.spatial(T.int64(28), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_fused_fused // T.int64(56) * T.int64(14) + n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_fused_fused % T.int64(4) // T.int64(2) * T.int64(7) + ax2)
                            v_ax3 = T.axis.spatial(T.int64(28), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_fused_fused % T.int64(56) // T.int64(4) * T.int64(2) + n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_fused_fused % T.int64(2))
                            v_ax4 = T.axis.spatial(T.int64(32), ax3_ax4_fused)
                            T.reads(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4], p3[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                            T.writes(T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                            T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.max(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] + p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4] + p3[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], T.float32(0))
b0 = sch.get_block(name="data_pad", func_name="main")
b1 = sch.get_block(name="conv2d_NCHWc", func_name="main")
b2 = sch.get_block(name="T_add", func_name="main")
b3 = sch.get_block(name="T_add_1", func_name="main")
b4 = sch.get_block(name="root", func_name="main")
sch.compute_inline(block=b3)
sch.compute_inline(block=b2)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSRSRS")
l5, l6, l7, l8, l9, l10, l11, l12 = sch.get_loops(block=b1)
v13, v14, v15, v16 = sch.sample_perfect_tile(loop=l5, n=4, max_innermost_factor=64, decision=[1, 1, 1, 1])
l17, l18, l19, l20 = sch.split(loop=l5, factors=[v13, v14, v15, v16], preserve_unit_iters=True)
v21, v22, v23, v24 = sch.sample_perfect_tile(loop=l6, n=4, max_innermost_factor=64, decision=[1, 1, 4, 1])
l25, l26, l27, l28 = sch.split(loop=l6, factors=[v21, v22, v23, v24], preserve_unit_iters=True)
v29, v30, v31, v32 = sch.sample_perfect_tile(loop=l7, n=4, max_innermost_factor=64, decision=[2, 2, 1, 7])
l33, l34, l35, l36 = sch.split(loop=l7, factors=[v29, v30, v31, v32], preserve_unit_iters=True)
v37, v38, v39, v40 = sch.sample_perfect_tile(loop=l8, n=4, max_innermost_factor=64, decision=[14, 2, 1, 1])
l41, l42, l43, l44 = sch.split(loop=l8, factors=[v37, v38, v39, v40], preserve_unit_iters=True)
v45, v46, v47, v48 = sch.sample_perfect_tile(loop=l9, n=4, max_innermost_factor=64, decision=[1, 1, 32, 1])
l49, l50, l51, l52 = sch.split(loop=l9, factors=[v45, v46, v47, v48], preserve_unit_iters=True)
v53, v54 = sch.sample_perfect_tile(loop=l10, n=2, max_innermost_factor=64, decision=[128, 1])
l55, l56 = sch.split(loop=l10, factors=[v53, v54], preserve_unit_iters=True)
v57, v58 = sch.sample_perfect_tile(loop=l11, n=2, max_innermost_factor=64, decision=[1, 3])
l59, l60 = sch.split(loop=l11, factors=[v57, v58], preserve_unit_iters=True)
v61, v62 = sch.sample_perfect_tile(loop=l12, n=2, max_innermost_factor=64, decision=[1, 3])
l63, l64 = sch.split(loop=l12, factors=[v61, v62], preserve_unit_iters=True)
sch.reorder(l17, l25, l33, l41, l49, l18, l26, l34, l42, l50, l55, l59, l63, l19, l27, l35, l43, l51, l56, l60, l64, l20, l28, l36, l44, l52)
b65, = sch.get_consumers(block=b1)
sch.reverse_compute_at(block=b65, loop=l50, preserve_unit_loops=True, index=-1)
sch.annotate(block_or_loop=b4, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b4, ann_key="meta_schedule.vectorize", ann_val=64)
v66 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b4, ann_key="meta_schedule.unroll_explicit", ann_val=v66)
l67 = sch.sample_compute_location(block=b0, decision=8)
sch.compute_at(block=b0, loop=l67, preserve_unit_loops=True, index=-1)
sch.enter_postproc()
b68 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b68, ann_key="meta_schedule.parallel")
sch.unannotate(block_or_loop=b68, ann_key="meta_schedule.vectorize")
sch.unannotate(block_or_loop=b68, ann_key="meta_schedule.unroll_explicit")
b69, b70, b71 = sch.get_child_blocks(b68)
l72, l73, l74, l75, l76, l77, l78, l79, l80, l81, l82, l83, l84, l85 = sch.get_loops(block=b69)
l86 = sch.fuse(l72, l73, l74, l75, l76, l77, l78, l79, l80, preserve_unit_iters=True)
sch.parallel(loop=l86)
l87, l88, l89, l90, l91, l92, l93, l94, l95, l96, l97, l98, l99, l100, l101, l102, l103, l104 = sch.get_loops(block=b70)
l105 = sch.fuse(l87, preserve_unit_iters=True)
sch.parallel(loop=l105)
sch.annotate(block_or_loop=l105, ann_key="pragma_auto_unroll_max_step", ann_val=512)
sch.annotate(block_or_loop=l105, ann_key="pragma_unroll_explicit", ann_val=1)
l106, l107, l108, l109, l110, l111, l112 = sch.get_loops(block=b71)
l113 = sch.fuse(l111, l112, preserve_unit_iters=True)
sch.vectorize(loop=l113)
b114 = sch.get_block(name="conv2d_NCHWc", func_name="main")
l115, l116, l117, l118, l119, l120, l121, l122, l123, l124, l125, l126, l127, l128, l129, l130, l131, l132 = sch.get_loops(block=b114)
b133 = sch.decompose_reduction(block=b114, loop=l117)
2024-04-28 23:24:00 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_1] Trial #544: GFLOPs: 647.5189. Time: 357.5372 us. Best GFLOPs: 1056.2801
2024-04-28 23:24:00 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_1] Trial #545: GFLOPs: 800.8684. Time: 289.0763 us. Best GFLOPs: 1056.2801
2024-04-28 23:24:00 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_1] Trial #546: GFLOPs: 733.0500. Time: 315.8203 us. Best GFLOPs: 1056.2801
2024-04-28 23:24:00 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_1] Trial #547: GFLOPs: 540.8355. Time: 428.0638 us. Best GFLOPs: 1056.2801
2024-04-28 23:24:00 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_1] Trial #548: GFLOPs: 755.4482. Time: 306.4566 us. Best GFLOPs: 1056.2801
2024-04-28 23:24:00 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_1] Trial #549: GFLOPs: 729.9812. Time: 317.1480 us. Best GFLOPs: 1056.2801
2024-04-28 23:24:00 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_1] Trial #550: GFLOPs: 654.7106. Time: 353.6098 us. Best GFLOPs: 1056.2801
2024-04-28 23:24:00 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_1] Trial #551: GFLOPs: 628.2700. Time: 368.4914 us. Best GFLOPs: 1056.2801
2024-04-28 23:24:00 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_1] Trial #552: GFLOPs: 640.1946. Time: 361.6277 us. Best GFLOPs: 1056.2801
2024-04-28 23:24:00 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_1] Trial #553: GFLOPs: 524.9489. Time: 441.0183 us. Best GFLOPs: 1056.2801
2024-04-28 23:24:00 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_1] Trial #554: GFLOPs: 691.7802. Time: 334.6613 us. Best GFLOPs: 1056.2801
2024-04-28 23:24:00 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_1] Trial #555: GFLOPs: 662.6847. Time: 349.3548 us. Best GFLOPs: 1056.2801
2024-04-28 23:24:00 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_1] Trial #556: GFLOPs: 781.1257. Time: 296.3826 us. Best GFLOPs: 1056.2801
2024-04-28 23:24:00 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_1] Trial #557: GFLOPs: 556.4822. Time: 416.0278 us. Best GFLOPs: 1056.2801
2024-04-28 23:24:00 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_1] Trial #558: GFLOPs: 622.3032. Time: 372.0246 us. Best GFLOPs: 1056.2801
2024-04-28 23:24:00 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_1] Trial #559: GFLOPs: 740.7749. Time: 312.5269 us. Best GFLOPs: 1056.2801
2024-04-28 23:24:00 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_1] Trial #560: GFLOPs: 729.6478. Time: 317.2929 us. Best GFLOPs: 1056.2801
2024-04-28 23:24:00 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_1] Trial #561: GFLOPs: 507.2926. Time: 456.3679 us. Best GFLOPs: 1056.2801
2024-04-28 23:24:00 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_1] Trial #562: GFLOPs: 688.4131. Time: 336.2982 us. Best GFLOPs: 1056.2801
2024-04-28 23:24:00 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_1] Trial #563: GFLOPs: 713.0912. Time: 324.6598 us. Best GFLOPs: 1056.2801
2024-04-28 23:24:00 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_1] Trial #564: GFLOPs: 710.2141. Time: 325.9750 us. Best GFLOPs: 1056.2801
2024-04-28 23:24:00 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_1] Trial #565: GFLOPs: 825.5911. Time: 280.4198 us. Best GFLOPs: 1056.2801
2024-04-28 23:24:00 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_1] Trial #566: GFLOPs: 682.6684. Time: 339.1281 us. Best GFLOPs: 1056.2801
2024-04-28 23:24:00 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_1] Trial #567: GFLOPs: 628.2704. Time: 368.4911 us. Best GFLOPs: 1056.2801
2024-04-28 23:24:00 [INFO] [task_scheduler.cc:121] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_1] Trial #568: Error in building:
LocalBuilder: Timeout, killed after 30.0 seconds
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(1), T.int64(28), T.int64(28), T.int64(128)), "float32"), p1: T.Buffer((T.int64(4), T.int64(1), T.int64(3), T.int64(3), T.int64(128), T.int64(32)), "float32"), p2: T.Buffer((T.int64(1), T.int64(4), T.int64(1), T.int64(1), T.int64(32)), "float32"), p3: T.Buffer((T.int64(1), T.int64(4), T.int64(28), T.int64(28), T.int64(32)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(4), T.int64(28), T.int64(28), T.int64(32)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        data_pad = T.alloc_buffer((T.int64(1), T.int64(1), T.int64(30), T.int64(30), T.int64(128)))
        conv2d_NCHWc = T.alloc_buffer((T.int64(1), T.int64(4), T.int64(28), T.int64(28), T.int64(32)))
        for n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused_fused in T.parallel(T.int64(448), annotations={"pragma_auto_unroll_max_step": 512, "pragma_unroll_explicit": 1}):
            for ax0, ax1, ax2, ax3, ax4 in T.grid(T.int64(1), T.int64(1), T.int64(9), T.int64(4), T.int64(128)):
                with T.block("data_pad"):
                    v_i0, v_i1 = T.axis.remap("SS", [ax0, ax1])
                    v_i2 = T.axis.spatial(T.int64(30), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused_fused // T.int64(112) * T.int64(7) + ax2)
                    v_i3 = T.axis.spatial(T.int64(30), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused_fused % T.int64(28) // T.int64(2) * T.int64(2) + ax3)
                    v_i4 = T.axis.spatial(T.int64(128), ax4)
                    T.reads(p0[v_i0, v_i1, v_i2 - T.int64(1), v_i3 - T.int64(1), v_i4])
                    T.writes(data_pad[v_i0, v_i1, v_i2, v_i3, v_i4])
                    data_pad[v_i0, v_i1, v_i2, v_i3, v_i4] = T.if_then_else(T.int64(1) <= v_i2 and v_i2 < T.int64(29) and T.int64(1) <= v_i3 and v_i3 < T.int64(29), p0[v_i0, v_i1, v_i2 - T.int64(1), v_i3 - T.int64(1), v_i4], T.float32(0))
            for n_2_init, oc_chunk_2_init, oh_2_init, ow_2_init, oc_block_2_init, n_3_init, oc_chunk_3_init, oh_3_init, ow_3_init, oc_block_3_init in T.grid(T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(16), T.int64(1), T.int64(1), T.int64(7), T.int64(2), T.int64(1)):
                with T.block("conv2d_NCHWc_init"):
                    v_n = T.axis.spatial(T.int64(1), n_2_init + n_3_init)
                    v_oc_chunk = T.axis.spatial(T.int64(4), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused_fused % T.int64(112) // T.int64(28) + oc_chunk_2_init + oc_chunk_3_init)
                    v_oh = T.axis.spatial(T.int64(28), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused_fused // T.int64(112) * T.int64(7) + oh_2_init * T.int64(7) + oh_3_init)
                    v_ow = T.axis.spatial(T.int64(28), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused_fused % T.int64(28) // T.int64(2) * T.int64(2) + ow_2_init * T.int64(2) + ow_3_init)
                    v_oc_block = T.axis.spatial(T.int64(32), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused_fused % T.int64(2) * T.int64(16) + oc_block_2_init + oc_block_3_init)
                    T.reads()
                    T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                    T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                    conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = T.float32(0)
            for ic_0, kh_0, kw_0, n_2, oc_chunk_2, oh_2, ow_2, oc_block_2, ic_1, kh_1, kw_1, n_3, oc_chunk_3, oh_3, ow_3, oc_block_3 in T.grid(T.int64(64), T.int64(1), T.int64(3), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(16), T.int64(2), T.int64(3), T.int64(1), T.int64(1), T.int64(1), T.int64(7), T.int64(2), T.int64(1)):
                with T.block("conv2d_NCHWc_update"):
                    v_n = T.axis.spatial(T.int64(1), n_2 + n_3)
                    v_oc_chunk = T.axis.spatial(T.int64(4), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused_fused % T.int64(112) // T.int64(28) + oc_chunk_2 + oc_chunk_3)
                    v_oh = T.axis.spatial(T.int64(28), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused_fused // T.int64(112) * T.int64(7) + oh_2 * T.int64(7) + oh_3)
                    v_ow = T.axis.spatial(T.int64(28), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused_fused % T.int64(28) // T.int64(2) * T.int64(2) + ow_2 * T.int64(2) + ow_3)
                    v_oc_block = T.axis.spatial(T.int64(32), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused_fused % T.int64(2) * T.int64(16) + oc_block_2 + oc_block_3)
                    v_ic = T.axis.reduce(T.int64(128), ic_0 * T.int64(2) + ic_1)
                    v_kh = T.axis.reduce(T.int64(3), kh_0 * T.int64(3) + kh_1)
                    v_kw = T.axis.reduce(T.int64(3), kw_0 + kw_1)
                    T.reads(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block], data_pad[v_n, v_ic // T.int64(128), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(128)], p1[v_oc_chunk, v_ic // T.int64(128), v_kh, v_kw, v_ic % T.int64(128), v_oc_block])
                    T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                    T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                    conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] + data_pad[v_n, v_ic // T.int64(128), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(128)] * p1[v_oc_chunk, v_ic // T.int64(128), v_kh, v_kw, v_ic % T.int64(128), v_oc_block]
            for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(1), T.int64(7), T.int64(2)):
                for ax4_fused in T.vectorized(T.int64(16)):
                    with T.block("T_relu"):
                        v_ax0 = T.axis.spatial(T.int64(1), ax0)
                        v_ax1 = T.axis.spatial(T.int64(4), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused_fused % T.int64(112) // T.int64(28) + ax1)
                        v_ax2 = T.axis.spatial(T.int64(28), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused_fused // T.int64(112) * T.int64(7) + ax2)
                        v_ax3 = T.axis.spatial(T.int64(28), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused_fused % T.int64(28) // T.int64(2) * T.int64(2) + ax3)
                        v_ax4 = T.axis.spatial(T.int64(32), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused_fused % T.int64(2) * T.int64(16) + ax4_fused)
                        T.reads(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4], p3[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                        T.writes(T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                        T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.max(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] + p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4] + p3[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], T.float32(0))
b0 = sch.get_block(name="data_pad", func_name="main")
b1 = sch.get_block(name="conv2d_NCHWc", func_name="main")
b2 = sch.get_block(name="T_add", func_name="main")
b3 = sch.get_block(name="T_add_1", func_name="main")
b4 = sch.get_block(name="root", func_name="main")
sch.compute_inline(block=b3)
sch.compute_inline(block=b2)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSRSRS")
l5, l6, l7, l8, l9, l10, l11, l12 = sch.get_loops(block=b1)
v13, v14, v15, v16 = sch.sample_perfect_tile(loop=l5, n=4, max_innermost_factor=64, decision=[1, 1, 1, 1])
l17, l18, l19, l20 = sch.split(loop=l5, factors=[v13, v14, v15, v16], preserve_unit_iters=True)
v21, v22, v23, v24 = sch.sample_perfect_tile(loop=l6, n=4, max_innermost_factor=64, decision=[1, 4, 1, 1])
l25, l26, l27, l28 = sch.split(loop=l6, factors=[v21, v22, v23, v24], preserve_unit_iters=True)
v29, v30, v31, v32 = sch.sample_perfect_tile(loop=l7, n=4, max_innermost_factor=64, decision=[4, 1, 1, 7])
l33, l34, l35, l36 = sch.split(loop=l7, factors=[v29, v30, v31, v32], preserve_unit_iters=True)
v37, v38, v39, v40 = sch.sample_perfect_tile(loop=l8, n=4, max_innermost_factor=64, decision=[1, 14, 1, 2])
l41, l42, l43, l44 = sch.split(loop=l8, factors=[v37, v38, v39, v40], preserve_unit_iters=True)
v45, v46, v47, v48 = sch.sample_perfect_tile(loop=l9, n=4, max_innermost_factor=64, decision=[1, 2, 16, 1])
l49, l50, l51, l52 = sch.split(loop=l9, factors=[v45, v46, v47, v48], preserve_unit_iters=True)
v53, v54 = sch.sample_perfect_tile(loop=l10, n=2, max_innermost_factor=64, decision=[64, 2])
l55, l56 = sch.split(loop=l10, factors=[v53, v54], preserve_unit_iters=True)
v57, v58 = sch.sample_perfect_tile(loop=l11, n=2, max_innermost_factor=64, decision=[1, 3])
l59, l60 = sch.split(loop=l11, factors=[v57, v58], preserve_unit_iters=True)
v61, v62 = sch.sample_perfect_tile(loop=l12, n=2, max_innermost_factor=64, decision=[3, 1])
l63, l64 = sch.split(loop=l12, factors=[v61, v62], preserve_unit_iters=True)
sch.reorder(l17, l25, l33, l41, l49, l18, l26, l34, l42, l50, l55, l59, l63, l19, l27, l35, l43, l51, l56, l60, l64, l20, l28, l36, l44, l52)
b65, = sch.get_consumers(block=b1)
sch.reverse_compute_at(block=b65, loop=l50, preserve_unit_loops=True, index=-1)
sch.annotate(block_or_loop=b4, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b4, ann_key="meta_schedule.vectorize", ann_val=64)
v66 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b4, ann_key="meta_schedule.unroll_explicit", ann_val=v66)
l67 = sch.sample_compute_location(block=b0, decision=9)
sch.compute_at(block=b0, loop=l67, preserve_unit_loops=True, index=-1)
sch.enter_postproc()
b68 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b68, ann_key="meta_schedule.parallel")
sch.unannotate(block_or_loop=b68, ann_key="meta_schedule.vectorize")
sch.unannotate(block_or_loop=b68, ann_key="meta_schedule.unroll_explicit")
b69, b70, b71 = sch.get_child_blocks(b68)
l72, l73, l74, l75, l76, l77, l78, l79, l80, l81, l82, l83, l84, l85, l86 = sch.get_loops(block=b69)
l87 = sch.fuse(l72, l73, l74, l75, l76, l77, l78, l79, l80, l81, preserve_unit_iters=True)
sch.parallel(loop=l87)
l88, l89, l90, l91, l92, l93, l94, l95, l96, l97, l98, l99, l100, l101, l102, l103, l104 = sch.get_loops(block=b70)
l105 = sch.fuse(l88, preserve_unit_iters=True)
sch.parallel(loop=l105)
sch.annotate(block_or_loop=l105, ann_key="pragma_auto_unroll_max_step", ann_val=512)
sch.annotate(block_or_loop=l105, ann_key="pragma_unroll_explicit", ann_val=1)
l106, l107, l108, l109, l110, l111 = sch.get_loops(block=b71)
l112 = sch.fuse(l111, preserve_unit_iters=True)
sch.vectorize(loop=l112)
b113 = sch.get_block(name="conv2d_NCHWc", func_name="main")
l114, l115, l116, l117, l118, l119, l120, l121, l122, l123, l124, l125, l126, l127, l128, l129, l130 = sch.get_loops(block=b113)
b131 = sch.decompose_reduction(block=b113, loop=l115)
2024-04-28 23:24:00 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_1] Trial #569: GFLOPs: 676.3458. Time: 342.2984 us. Best GFLOPs: 1056.2801
2024-04-28 23:24:00 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_1] Trial #570: GFLOPs: 710.3598. Time: 325.9081 us. Best GFLOPs: 1056.2801
2024-04-28 23:24:00 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_1] Trial #571: GFLOPs: 712.0840. Time: 325.1191 us. Best GFLOPs: 1056.2801
2024-04-28 23:24:00 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_1] Trial #572: GFLOPs: 714.1518. Time: 324.1777 us. Best GFLOPs: 1056.2801
2024-04-28 23:24:00 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_1] Trial #573: GFLOPs: 767.2045. Time: 301.7606 us. Best GFLOPs: 1056.2801
2024-04-28 23:24:00 [INFO] [task_scheduler.cc:121] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_1] Trial #574: Error in building:
LocalBuilder: Timeout, killed after 30.0 seconds
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(1), T.int64(28), T.int64(28), T.int64(128)), "float32"), p1: T.Buffer((T.int64(4), T.int64(1), T.int64(3), T.int64(3), T.int64(128), T.int64(32)), "float32"), p2: T.Buffer((T.int64(1), T.int64(4), T.int64(1), T.int64(1), T.int64(32)), "float32"), p3: T.Buffer((T.int64(1), T.int64(4), T.int64(28), T.int64(28), T.int64(32)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(4), T.int64(28), T.int64(28), T.int64(32)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        data_pad = T.alloc_buffer((T.int64(1), T.int64(1), T.int64(30), T.int64(30), T.int64(128)))
        conv2d_NCHWc = T.alloc_buffer((T.int64(1), T.int64(4), T.int64(28), T.int64(28), T.int64(32)))
        for n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_fused_fused in T.parallel(T.int64(28), annotations={"pragma_auto_unroll_max_step": 512, "pragma_unroll_explicit": 1}):
            for ax0, ax1, ax2, ax3, ax4 in T.grid(T.int64(1), T.int64(1), T.int64(30), T.int64(4), T.int64(128)):
                with T.block("data_pad"):
                    v_i0, v_i1, v_i2 = T.axis.remap("SSS", [ax0, ax1, ax2])
                    v_i3 = T.axis.spatial(T.int64(30), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_fused_fused % T.int64(14) * T.int64(2) + ax3)
                    v_i4 = T.axis.spatial(T.int64(128), ax4)
                    T.reads(p0[v_i0, v_i1, v_i2 - T.int64(1), v_i3 - T.int64(1), v_i4])
                    T.writes(data_pad[v_i0, v_i1, v_i2, v_i3, v_i4])
                    data_pad[v_i0, v_i1, v_i2, v_i3, v_i4] = T.if_then_else(T.int64(1) <= v_i2 and v_i2 < T.int64(29) and T.int64(1) <= v_i3 and v_i3 < T.int64(29), p0[v_i0, v_i1, v_i2 - T.int64(1), v_i3 - T.int64(1), v_i4], T.float32(0))
            for oc_block_1 in range(T.int64(2)):
                for n_2_init, oc_chunk_2_init, oh_2_init, ow_2_init, oc_block_2_init, n_3_init, oc_chunk_3_init, oh_3_init, ow_3_init in T.grid(T.int64(1), T.int64(2), T.int64(2), T.int64(2), T.int64(4), T.int64(1), T.int64(1), T.int64(14), T.int64(1)):
                    for oc_block_3_fused_init in T.vectorized(T.int64(4)):
                        with T.block("conv2d_NCHWc_init"):
                            v_n = T.axis.spatial(T.int64(1), n_2_init + n_3_init)
                            v_oc_chunk = T.axis.spatial(T.int64(4), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_fused_fused // T.int64(14) * T.int64(2) + oc_chunk_2_init + oc_chunk_3_init)
                            v_oh = T.axis.spatial(T.int64(28), oh_2_init * T.int64(14) + oh_3_init)
                            v_ow = T.axis.spatial(T.int64(28), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_fused_fused % T.int64(14) * T.int64(2) + ow_2_init + ow_3_init)
                            v_oc_block = T.axis.spatial(T.int64(32), oc_block_1 * T.int64(16) + oc_block_2_init * T.int64(4) + oc_block_3_fused_init)
                            T.reads()
                            T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                            T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                            conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = T.float32(0)
                for ic_0, kh_0, kw_0, n_2, oc_chunk_2, oh_2, ow_2, oc_block_2, ic_1, kh_1, kw_1, n_3, oc_chunk_3, oh_3, ow_3 in T.grid(T.int64(64), T.int64(3), T.int64(3), T.int64(1), T.int64(2), T.int64(2), T.int64(2), T.int64(4), T.int64(2), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(14), T.int64(1)):
                    for oc_block_3_fused in T.vectorized(T.int64(4)):
                        with T.block("conv2d_NCHWc_update"):
                            v_n = T.axis.spatial(T.int64(1), n_2 + n_3)
                            v_oc_chunk = T.axis.spatial(T.int64(4), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_fused_fused // T.int64(14) * T.int64(2) + oc_chunk_2 + oc_chunk_3)
                            v_oh = T.axis.spatial(T.int64(28), oh_2 * T.int64(14) + oh_3)
                            v_ow = T.axis.spatial(T.int64(28), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_fused_fused % T.int64(14) * T.int64(2) + ow_2 + ow_3)
                            v_oc_block = T.axis.spatial(T.int64(32), oc_block_1 * T.int64(16) + oc_block_2 * T.int64(4) + oc_block_3_fused)
                            v_ic = T.axis.reduce(T.int64(128), ic_0 * T.int64(2) + ic_1)
                            v_kh = T.axis.reduce(T.int64(3), kh_0 + kh_1)
                            v_kw = T.axis.reduce(T.int64(3), kw_0 + kw_1)
                            T.reads(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block], data_pad[v_n, v_ic // T.int64(128), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(128)], p1[v_oc_chunk, v_ic // T.int64(128), v_kh, v_kw, v_ic % T.int64(128), v_oc_block])
                            T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                            T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                            conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] + data_pad[v_n, v_ic // T.int64(128), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(128)] * p1[v_oc_chunk, v_ic // T.int64(128), v_kh, v_kw, v_ic % T.int64(128), v_oc_block]
                for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(2), T.int64(28), T.int64(2)):
                    for ax4_fused in T.vectorized(T.int64(16)):
                        with T.block("T_relu"):
                            v_ax0 = T.axis.spatial(T.int64(1), ax0)
                            v_ax1 = T.axis.spatial(T.int64(4), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_fused_fused // T.int64(14) * T.int64(2) + ax1)
                            v_ax2 = T.axis.spatial(T.int64(28), ax2)
                            v_ax3 = T.axis.spatial(T.int64(28), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_fused_fused % T.int64(14) * T.int64(2) + ax3)
                            v_ax4 = T.axis.spatial(T.int64(32), oc_block_1 * T.int64(16) + ax4_fused)
                            T.reads(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4], p3[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                            T.writes(T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                            T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.max(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] + p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4] + p3[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], T.float32(0))
b0 = sch.get_block(name="data_pad", func_name="main")
b1 = sch.get_block(name="conv2d_NCHWc", func_name="main")
b2 = sch.get_block(name="T_add", func_name="main")
b3 = sch.get_block(name="T_add_1", func_name="main")
b4 = sch.get_block(name="root", func_name="main")
sch.compute_inline(block=b3)
sch.compute_inline(block=b2)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSRSRS")
l5, l6, l7, l8, l9, l10, l11, l12 = sch.get_loops(block=b1)
v13, v14, v15, v16 = sch.sample_perfect_tile(loop=l5, n=4, max_innermost_factor=64, decision=[1, 1, 1, 1])
l17, l18, l19, l20 = sch.split(loop=l5, factors=[v13, v14, v15, v16], preserve_unit_iters=True)
v21, v22, v23, v24 = sch.sample_perfect_tile(loop=l6, n=4, max_innermost_factor=64, decision=[2, 1, 2, 1])
l25, l26, l27, l28 = sch.split(loop=l6, factors=[v21, v22, v23, v24], preserve_unit_iters=True)
v29, v30, v31, v32 = sch.sample_perfect_tile(loop=l7, n=4, max_innermost_factor=64, decision=[1, 1, 2, 14])
l33, l34, l35, l36 = sch.split(loop=l7, factors=[v29, v30, v31, v32], preserve_unit_iters=True)
v37, v38, v39, v40 = sch.sample_perfect_tile(loop=l8, n=4, max_innermost_factor=64, decision=[7, 2, 2, 1])
l41, l42, l43, l44 = sch.split(loop=l8, factors=[v37, v38, v39, v40], preserve_unit_iters=True)
v45, v46, v47, v48 = sch.sample_perfect_tile(loop=l9, n=4, max_innermost_factor=64, decision=[1, 2, 4, 4])
l49, l50, l51, l52 = sch.split(loop=l9, factors=[v45, v46, v47, v48], preserve_unit_iters=True)
v53, v54 = sch.sample_perfect_tile(loop=l10, n=2, max_innermost_factor=64, decision=[64, 2])
l55, l56 = sch.split(loop=l10, factors=[v53, v54], preserve_unit_iters=True)
v57, v58 = sch.sample_perfect_tile(loop=l11, n=2, max_innermost_factor=64, decision=[3, 1])
l59, l60 = sch.split(loop=l11, factors=[v57, v58], preserve_unit_iters=True)
v61, v62 = sch.sample_perfect_tile(loop=l12, n=2, max_innermost_factor=64, decision=[3, 1])
l63, l64 = sch.split(loop=l12, factors=[v61, v62], preserve_unit_iters=True)
sch.reorder(l17, l25, l33, l41, l49, l18, l26, l34, l42, l50, l55, l59, l63, l19, l27, l35, l43, l51, l56, l60, l64, l20, l28, l36, l44, l52)
b65, = sch.get_consumers(block=b1)
sch.reverse_compute_at(block=b65, loop=l50, preserve_unit_loops=True, index=-1)
sch.annotate(block_or_loop=b4, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b4, ann_key="meta_schedule.vectorize", ann_val=64)
v66 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b4, ann_key="meta_schedule.unroll_explicit", ann_val=v66)
l67 = sch.sample_compute_location(block=b0, decision=8)
sch.compute_at(block=b0, loop=l67, preserve_unit_loops=True, index=-1)
sch.enter_postproc()
b68 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b68, ann_key="meta_schedule.parallel")
sch.unannotate(block_or_loop=b68, ann_key="meta_schedule.vectorize")
sch.unannotate(block_or_loop=b68, ann_key="meta_schedule.unroll_explicit")
b69, b70, b71 = sch.get_child_blocks(b68)
l72, l73, l74, l75, l76, l77, l78, l79, l80, l81, l82, l83, l84, l85 = sch.get_loops(block=b69)
l86 = sch.fuse(l72, l73, l74, l75, l76, l77, l78, l79, l80, preserve_unit_iters=True)
sch.parallel(loop=l86)
l87, l88, l89, l90, l91, l92, l93, l94, l95, l96, l97, l98, l99, l100, l101, l102, l103, l104 = sch.get_loops(block=b70)
l105 = sch.fuse(l87, preserve_unit_iters=True)
sch.parallel(loop=l105)
l106 = sch.fuse(l104, preserve_unit_iters=True)
sch.vectorize(loop=l106)
sch.annotate(block_or_loop=l105, ann_key="pragma_auto_unroll_max_step", ann_val=512)
sch.annotate(block_or_loop=l105, ann_key="pragma_unroll_explicit", ann_val=1)
l107, l108, l109, l110, l111, l112, l113 = sch.get_loops(block=b71)
l114 = sch.fuse(l113, preserve_unit_iters=True)
sch.vectorize(loop=l114)
b115 = sch.get_block(name="conv2d_NCHWc", func_name="main")
l116, l117, l118, l119, l120, l121, l122, l123, l124, l125, l126, l127, l128, l129, l130, l131, l132, l133 = sch.get_loops(block=b115)
b134 = sch.decompose_reduction(block=b115, loop=l118)
2024-04-28 23:24:00 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_1] Trial #575: GFLOPs: 88.6106. Time: 2612.6896 us. Best GFLOPs: 1056.2801
2024-04-28 23:24:00 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_1] Trial #576: GFLOPs: 182.0065. Time: 1271.9990 us. Best GFLOPs: 1056.2801
2024-04-28 23:52:57 [INFO] [evolutionary_search.cc:713] Generating candidates......
2024-04-28 23:52:58 [INFO] [evolutionary_search.cc:715] Picked top 102 candidate(s) from database
2024-04-28 23:53:02 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x3858de8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x3c39958)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0xa2a8408)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x3f4f298)]: 0 failure(s)
2024-04-28 23:53:02 [INFO] [evolutionary_search.cc:723] Sampled 410 candidate(s)
2024-04-28 23:53:14 [INFO] [evolutionary_search.cc:621] Evolve iter #0 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x3858de8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x3c39958)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0xa2a8408)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x3f4f298)]: 0 failure(s)
2024-04-28 23:53:26 [INFO] [evolutionary_search.cc:621] Evolve iter #1 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x3858de8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x3c39958)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0xa2a8408)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x3f4f298)]: 0 failure(s)
2024-04-28 23:53:37 [INFO] [evolutionary_search.cc:621] Evolve iter #2 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x3858de8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x3c39958)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0xa2a8408)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x3f4f298)]: 0 failure(s)
2024-04-28 23:53:48 [INFO] [evolutionary_search.cc:621] Evolve iter #3 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x3858de8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x3c39958)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0xa2a8408)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x3f4f298)]: 0 failure(s)
2024-04-28 23:53:55 [INFO] [evolutionary_search.cc:649] Scores of the best 64 candidates:
[1 : 16]:	0.9676  0.9434  0.9117  0.9021  0.8805  0.8790  0.8755  0.8725  0.8696  0.8666  0.8605  0.8558  0.8512  0.8433  0.8368  0.8346
[17 : 32]:	0.8202  0.8198  0.8183  0.8015  0.8009  0.7963  0.7933  0.7850  0.7783  0.7776  0.7764  0.7756  0.7735  0.7719  0.7700  0.7580
[33 : 48]:	0.7575  0.7575  0.7558  0.7550  0.7542  0.7542  0.7533  0.7533  0.7532  0.7444  0.7443  0.7431  0.7424  0.7411  0.7391  0.7386
[49 : 64]:	0.7369  0.7345  0.7345  0.7331  0.7325  0.7301  0.7300  0.7289  0.7289  0.7282  0.7280  0.7266  0.7253  0.7240  0.7207  0.7203
2024-04-28 23:53:55 [INFO] [evolutionary_search.cc:727] Got 64 candidate(s) with evolutionary search
2024-04-28 23:53:55 [INFO] [evolutionary_search.cc:730] Sending 64 candidates(s) for measurement
2024-04-28 23:55:27 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_1] Trial #577: GFLOPs: 497.0508. Time: 465.7715 us. Best GFLOPs: 1056.2801
2024-04-28 23:55:27 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_1] Trial #578: GFLOPs: 729.8431. Time: 317.2080 us. Best GFLOPs: 1056.2801
2024-04-28 23:55:27 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_1] Trial #579: GFLOPs: 950.5238. Time: 243.5626 us. Best GFLOPs: 1056.2801
2024-04-28 23:55:27 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_1] Trial #580: GFLOPs: 968.0754. Time: 239.1467 us. Best GFLOPs: 1056.2801
2024-04-28 23:55:27 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_1] Trial #581: GFLOPs: 931.0609. Time: 248.6540 us. Best GFLOPs: 1056.2801
2024-04-28 23:55:27 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_1] Trial #582: GFLOPs: 928.1642. Time: 249.4301 us. Best GFLOPs: 1056.2801
2024-04-28 23:55:27 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_1] Trial #583: GFLOPs: 779.6037. Time: 296.9612 us. Best GFLOPs: 1056.2801
2024-04-28 23:55:27 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_1] Trial #584: GFLOPs: 955.0189. Time: 242.4162 us. Best GFLOPs: 1056.2801
2024-04-28 23:55:27 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_1] Trial #585: GFLOPs: 948.3443. Time: 244.1224 us. Best GFLOPs: 1056.2801
2024-04-28 23:55:27 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_1] Trial #586: GFLOPs: 906.7488. Time: 255.3211 us. Best GFLOPs: 1056.2801
2024-04-28 23:55:27 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_1] Trial #587: GFLOPs: 944.2879. Time: 245.1711 us. Best GFLOPs: 1056.2801
2024-04-28 23:55:27 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_1] Trial #588: GFLOPs: 967.9423. Time: 239.1796 us. Best GFLOPs: 1056.2801
2024-04-28 23:55:27 [INFO] [task_scheduler.cc:121] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_1] Trial #589: Error in building:
LocalBuilder: Timeout, killed after 30.0 seconds
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(1), T.int64(28), T.int64(28), T.int64(128)), "float32"), p1: T.Buffer((T.int64(4), T.int64(1), T.int64(3), T.int64(3), T.int64(128), T.int64(32)), "float32"), p2: T.Buffer((T.int64(1), T.int64(4), T.int64(1), T.int64(1), T.int64(32)), "float32"), p3: T.Buffer((T.int64(1), T.int64(4), T.int64(28), T.int64(28), T.int64(32)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(4), T.int64(28), T.int64(28), T.int64(32)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        data_pad = T.alloc_buffer((T.int64(1), T.int64(1), T.int64(30), T.int64(30), T.int64(128)))
        conv2d_NCHWc = T.alloc_buffer((T.int64(1), T.int64(4), T.int64(28), T.int64(28), T.int64(32)))
        for n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_fused_fused in T.parallel(T.int64(112), annotations={"pragma_auto_unroll_max_step": 512, "pragma_unroll_explicit": 1}):
            for ax0, ax1, ax2, ax3, ax4 in T.grid(T.int64(1), T.int64(1), T.int64(9), T.int64(3), T.int64(128)):
                with T.block("data_pad"):
                    v_i0, v_i1 = T.axis.remap("SS", [ax0, ax1])
                    v_i2 = T.axis.spatial(T.int64(30), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_fused_fused // T.int64(56) * T.int64(14) + n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_fused_fused % T.int64(4) // T.int64(2) * T.int64(7) + ax2)
                    v_i3 = T.axis.spatial(T.int64(30), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_fused_fused % T.int64(2) + n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_fused_fused % T.int64(56) // T.int64(4) * T.int64(2) + ax3)
                    v_i4 = T.axis.spatial(T.int64(128), ax4)
                    T.reads(p0[v_i0, v_i1, v_i2 - T.int64(1), v_i3 - T.int64(1), v_i4])
                    T.writes(data_pad[v_i0, v_i1, v_i2, v_i3, v_i4])
                    data_pad[v_i0, v_i1, v_i2, v_i3, v_i4] = T.if_then_else(T.int64(1) <= v_i2 and v_i2 < T.int64(29) and T.int64(1) <= v_i3 and v_i3 < T.int64(29), p0[v_i0, v_i1, v_i2 - T.int64(1), v_i3 - T.int64(1), v_i4], T.float32(0))
            for oc_block_1 in range(T.int64(1)):
                for n_2_init, oc_chunk_2_init, oh_2_init, ow_2_init, oc_block_2_init, n_3_init, oc_chunk_3_init, oh_3_init, ow_3_init, oc_block_3_init in T.grid(T.int64(1), T.int64(4), T.int64(1), T.int64(1), T.int64(32), T.int64(1), T.int64(1), T.int64(7), T.int64(1), T.int64(1)):
                    with T.block("conv2d_NCHWc_init"):
                        v_n = T.axis.spatial(T.int64(1), n_2_init + n_3_init)
                        v_oc_chunk = T.axis.spatial(T.int64(4), oc_chunk_2_init + oc_chunk_3_init)
                        v_oh = T.axis.spatial(T.int64(28), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_fused_fused // T.int64(56) * T.int64(14) + n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_fused_fused % T.int64(4) // T.int64(2) * T.int64(7) + oh_2_init * T.int64(7) + oh_3_init)
                        v_ow = T.axis.spatial(T.int64(28), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_fused_fused % T.int64(56) // T.int64(4) * T.int64(2) + n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_fused_fused % T.int64(2) + ow_2_init + ow_3_init)
                        v_oc_block = T.axis.spatial(T.int64(32), oc_block_1 * T.int64(32) + oc_block_2_init + oc_block_3_init)
                        T.reads()
                        T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                        T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                        conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = T.float32(0)
                for ic_0, kh_0, kw_0, n_2, oc_chunk_2, oh_2, ow_2, oc_block_2, ic_1, kh_1, kw_1, n_3, oc_chunk_3, oh_3, ow_3, oc_block_3 in T.grid(T.int64(64), T.int64(1), T.int64(3), T.int64(1), T.int64(4), T.int64(1), T.int64(1), T.int64(32), T.int64(2), T.int64(3), T.int64(1), T.int64(1), T.int64(1), T.int64(7), T.int64(1), T.int64(1)):
                    with T.block("conv2d_NCHWc_update"):
                        v_n = T.axis.spatial(T.int64(1), n_2 + n_3)
                        v_oc_chunk = T.axis.spatial(T.int64(4), oc_chunk_2 + oc_chunk_3)
                        v_oh = T.axis.spatial(T.int64(28), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_fused_fused // T.int64(56) * T.int64(14) + n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_fused_fused % T.int64(4) // T.int64(2) * T.int64(7) + oh_2 * T.int64(7) + oh_3)
                        v_ow = T.axis.spatial(T.int64(28), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_fused_fused % T.int64(56) // T.int64(4) * T.int64(2) + n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_fused_fused % T.int64(2) + ow_2 + ow_3)
                        v_oc_block = T.axis.spatial(T.int64(32), oc_block_1 * T.int64(32) + oc_block_2 + oc_block_3)
                        v_ic = T.axis.reduce(T.int64(128), ic_0 * T.int64(2) + ic_1)
                        v_kh = T.axis.reduce(T.int64(3), kh_0 * T.int64(3) + kh_1)
                        v_kw = T.axis.reduce(T.int64(3), kw_0 + kw_1)
                        T.reads(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block], data_pad[v_n, v_ic // T.int64(128), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(128)], p1[v_oc_chunk, v_ic // T.int64(128), v_kh, v_kw, v_ic % T.int64(128), v_oc_block])
                        T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                        T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                        conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] + data_pad[v_n, v_ic // T.int64(128), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(128)] * p1[v_oc_chunk, v_ic // T.int64(128), v_kh, v_kw, v_ic % T.int64(128), v_oc_block]
                for ax0, ax1, ax2 in T.grid(T.int64(1), T.int64(4), T.int64(7)):
                    for ax3_ax4_fused in T.vectorized(T.int64(32)):
                        with T.block("T_relu"):
                            v_ax0, v_ax1 = T.axis.remap("SS", [ax0, ax1])
                            v_ax2 = T.axis.spatial(T.int64(28), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_fused_fused // T.int64(56) * T.int64(14) + n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_fused_fused % T.int64(4) // T.int64(2) * T.int64(7) + ax2)
                            v_ax3 = T.axis.spatial(T.int64(28), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_fused_fused % T.int64(56) // T.int64(4) * T.int64(2) + n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_fused_fused % T.int64(2))
                            v_ax4 = T.axis.spatial(T.int64(32), ax3_ax4_fused)
                            T.reads(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4], p3[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                            T.writes(T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                            T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.max(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] + p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4] + p3[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], T.float32(0))
b0 = sch.get_block(name="data_pad", func_name="main")
b1 = sch.get_block(name="conv2d_NCHWc", func_name="main")
b2 = sch.get_block(name="T_add", func_name="main")
b3 = sch.get_block(name="T_add_1", func_name="main")
b4 = sch.get_block(name="root", func_name="main")
sch.compute_inline(block=b3)
sch.compute_inline(block=b2)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSRSRS")
l5, l6, l7, l8, l9, l10, l11, l12 = sch.get_loops(block=b1)
v13, v14, v15, v16 = sch.sample_perfect_tile(loop=l5, n=4, max_innermost_factor=64, decision=[1, 1, 1, 1])
l17, l18, l19, l20 = sch.split(loop=l5, factors=[v13, v14, v15, v16], preserve_unit_iters=True)
v21, v22, v23, v24 = sch.sample_perfect_tile(loop=l6, n=4, max_innermost_factor=64, decision=[1, 1, 4, 1])
l25, l26, l27, l28 = sch.split(loop=l6, factors=[v21, v22, v23, v24], preserve_unit_iters=True)
v29, v30, v31, v32 = sch.sample_perfect_tile(loop=l7, n=4, max_innermost_factor=64, decision=[2, 2, 1, 7])
l33, l34, l35, l36 = sch.split(loop=l7, factors=[v29, v30, v31, v32], preserve_unit_iters=True)
v37, v38, v39, v40 = sch.sample_perfect_tile(loop=l8, n=4, max_innermost_factor=64, decision=[14, 2, 1, 1])
l41, l42, l43, l44 = sch.split(loop=l8, factors=[v37, v38, v39, v40], preserve_unit_iters=True)
v45, v46, v47, v48 = sch.sample_perfect_tile(loop=l9, n=4, max_innermost_factor=64, decision=[1, 1, 32, 1])
l49, l50, l51, l52 = sch.split(loop=l9, factors=[v45, v46, v47, v48], preserve_unit_iters=True)
v53, v54 = sch.sample_perfect_tile(loop=l10, n=2, max_innermost_factor=64, decision=[64, 2])
l55, l56 = sch.split(loop=l10, factors=[v53, v54], preserve_unit_iters=True)
v57, v58 = sch.sample_perfect_tile(loop=l11, n=2, max_innermost_factor=64, decision=[1, 3])
l59, l60 = sch.split(loop=l11, factors=[v57, v58], preserve_unit_iters=True)
v61, v62 = sch.sample_perfect_tile(loop=l12, n=2, max_innermost_factor=64, decision=[3, 1])
l63, l64 = sch.split(loop=l12, factors=[v61, v62], preserve_unit_iters=True)
sch.reorder(l17, l25, l33, l41, l49, l18, l26, l34, l42, l50, l55, l59, l63, l19, l27, l35, l43, l51, l56, l60, l64, l20, l28, l36, l44, l52)
b65, = sch.get_consumers(block=b1)
sch.reverse_compute_at(block=b65, loop=l50, preserve_unit_loops=True, index=-1)
sch.annotate(block_or_loop=b4, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b4, ann_key="meta_schedule.vectorize", ann_val=64)
v66 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b4, ann_key="meta_schedule.unroll_explicit", ann_val=v66)
l67 = sch.sample_compute_location(block=b0, decision=8)
sch.compute_at(block=b0, loop=l67, preserve_unit_loops=True, index=-1)
sch.enter_postproc()
b68 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b68, ann_key="meta_schedule.parallel")
sch.unannotate(block_or_loop=b68, ann_key="meta_schedule.vectorize")
sch.unannotate(block_or_loop=b68, ann_key="meta_schedule.unroll_explicit")
b69, b70, b71 = sch.get_child_blocks(b68)
l72, l73, l74, l75, l76, l77, l78, l79, l80, l81, l82, l83, l84, l85 = sch.get_loops(block=b69)
l86 = sch.fuse(l72, l73, l74, l75, l76, l77, l78, l79, l80, preserve_unit_iters=True)
sch.parallel(loop=l86)
l87, l88, l89, l90, l91, l92, l93, l94, l95, l96, l97, l98, l99, l100, l101, l102, l103, l104 = sch.get_loops(block=b70)
l105 = sch.fuse(l87, preserve_unit_iters=True)
sch.parallel(loop=l105)
sch.annotate(block_or_loop=l105, ann_key="pragma_auto_unroll_max_step", ann_val=512)
sch.annotate(block_or_loop=l105, ann_key="pragma_unroll_explicit", ann_val=1)
l106, l107, l108, l109, l110, l111, l112 = sch.get_loops(block=b71)
l113 = sch.fuse(l111, l112, preserve_unit_iters=True)
sch.vectorize(loop=l113)
b114 = sch.get_block(name="conv2d_NCHWc", func_name="main")
l115, l116, l117, l118, l119, l120, l121, l122, l123, l124, l125, l126, l127, l128, l129, l130, l131, l132 = sch.get_loops(block=b114)
b133 = sch.decompose_reduction(block=b114, loop=l117)
2024-04-28 23:55:27 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_1] Trial #590: GFLOPs: 958.3999. Time: 241.5610 us. Best GFLOPs: 1056.2801
2024-04-28 23:55:27 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_1] Trial #591: GFLOPs: 962.8841. Time: 240.4361 us. Best GFLOPs: 1056.2801
2024-04-28 23:55:27 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_1] Trial #592: GFLOPs: 866.1141. Time: 267.2997 us. Best GFLOPs: 1056.2801
2024-04-28 23:55:27 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_1] Trial #593: GFLOPs: 620.9598. Time: 372.8294 us. Best GFLOPs: 1056.2801
2024-04-28 23:55:27 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_1] Trial #594: GFLOPs: 748.6837. Time: 309.2255 us. Best GFLOPs: 1056.2801
2024-04-28 23:55:27 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_1] Trial #595: GFLOPs: 862.8969. Time: 268.2963 us. Best GFLOPs: 1056.2801
2024-04-28 23:55:27 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_1] Trial #596: GFLOPs: 707.2447. Time: 327.3437 us. Best GFLOPs: 1056.2801
2024-04-28 23:55:27 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_1] Trial #597: GFLOPs: 893.5657. Time: 259.0879 us. Best GFLOPs: 1056.2801
2024-04-28 23:55:27 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_1] Trial #598: GFLOPs: 741.6988. Time: 312.1376 us. Best GFLOPs: 1056.2801
2024-04-28 23:55:27 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_1] Trial #599: GFLOPs: 798.8515. Time: 289.8061 us. Best GFLOPs: 1056.2801
2024-04-28 23:55:27 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_1] Trial #600: GFLOPs: 825.5188. Time: 280.4443 us. Best GFLOPs: 1056.2801
2024-04-28 23:55:27 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_1] Trial #601: GFLOPs: 896.9446. Time: 258.1119 us. Best GFLOPs: 1056.2801
2024-04-28 23:55:27 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_1] Trial #602: GFLOPs: 730.9637. Time: 316.7217 us. Best GFLOPs: 1056.2801
2024-04-28 23:55:27 [INFO] [task_scheduler.cc:121] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_1] Trial #603: Error in building:
LocalBuilder: Timeout, killed after 30.0 seconds
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(1), T.int64(28), T.int64(28), T.int64(128)), "float32"), p1: T.Buffer((T.int64(4), T.int64(1), T.int64(3), T.int64(3), T.int64(128), T.int64(32)), "float32"), p2: T.Buffer((T.int64(1), T.int64(4), T.int64(1), T.int64(1), T.int64(32)), "float32"), p3: T.Buffer((T.int64(1), T.int64(4), T.int64(28), T.int64(28), T.int64(32)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(4), T.int64(28), T.int64(28), T.int64(32)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        data_pad = T.alloc_buffer((T.int64(1), T.int64(1), T.int64(30), T.int64(30), T.int64(128)))
        conv2d_NCHWc = T.alloc_buffer((T.int64(1), T.int64(4), T.int64(28), T.int64(28), T.int64(32)))
        for n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_fused_fused in T.parallel(T.int64(224), annotations={"pragma_auto_unroll_max_step": 512, "pragma_unroll_explicit": 1}):
            for ax0, ax1, ax2, ax3, ax4 in T.grid(T.int64(1), T.int64(1), T.int64(9), T.int64(3), T.int64(128)):
                with T.block("data_pad"):
                    v_i0, v_i1 = T.axis.remap("SS", [ax0, ax1])
                    v_i2 = T.axis.spatial(T.int64(30), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_fused_fused // T.int64(112) * T.int64(14) + n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_fused_fused % T.int64(28) // T.int64(14) * T.int64(7) + ax2)
                    v_i3 = T.axis.spatial(T.int64(30), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_fused_fused % T.int64(112) // T.int64(56) * T.int64(14) + n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_fused_fused % T.int64(14) + ax3)
                    v_i4 = T.axis.spatial(T.int64(128), ax4)
                    T.reads(p0[v_i0, v_i1, v_i2 - T.int64(1), v_i3 - T.int64(1), v_i4])
                    T.writes(data_pad[v_i0, v_i1, v_i2, v_i3, v_i4])
                    data_pad[v_i0, v_i1, v_i2, v_i3, v_i4] = T.if_then_else(T.int64(1) <= v_i2 and v_i2 < T.int64(29) and T.int64(1) <= v_i3 and v_i3 < T.int64(29), p0[v_i0, v_i1, v_i2 - T.int64(1), v_i3 - T.int64(1), v_i4], T.float32(0))
            for oc_block_1 in range(T.int64(1)):
                for n_2_init, oc_chunk_2_init, oh_2_init, ow_2_init, oc_block_2_init, n_3_init, oc_chunk_3_init, oh_3_init, ow_3_init, oc_block_3_init in T.grid(T.int64(1), T.int64(4), T.int64(1), T.int64(1), T.int64(16), T.int64(1), T.int64(1), T.int64(7), T.int64(1), T.int64(1)):
                    with T.block("conv2d_NCHWc_init"):
                        v_n = T.axis.spatial(T.int64(1), n_2_init + n_3_init)
                        v_oc_chunk = T.axis.spatial(T.int64(4), oc_chunk_2_init + oc_chunk_3_init)
                        v_oh = T.axis.spatial(T.int64(28), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_fused_fused // T.int64(112) * T.int64(14) + n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_fused_fused % T.int64(28) // T.int64(14) * T.int64(7) + oh_2_init * T.int64(7) + oh_3_init)
                        v_ow = T.axis.spatial(T.int64(28), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_fused_fused % T.int64(112) // T.int64(56) * T.int64(14) + n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_fused_fused % T.int64(14) + ow_2_init + ow_3_init)
                        v_oc_block = T.axis.spatial(T.int64(32), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_fused_fused % T.int64(56) // T.int64(28) * T.int64(16) + oc_block_1 * T.int64(16) + oc_block_2_init + oc_block_3_init)
                        T.reads()
                        T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                        T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                        conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = T.float32(0)
                for ic_0, kh_0, kw_0, n_2, oc_chunk_2, oh_2, ow_2, oc_block_2, ic_1, kh_1, kw_1, n_3, oc_chunk_3, oh_3, ow_3, oc_block_3 in T.grid(T.int64(32), T.int64(1), T.int64(3), T.int64(1), T.int64(4), T.int64(1), T.int64(1), T.int64(16), T.int64(4), T.int64(3), T.int64(1), T.int64(1), T.int64(1), T.int64(7), T.int64(1), T.int64(1)):
                    with T.block("conv2d_NCHWc_update"):
                        v_n = T.axis.spatial(T.int64(1), n_2 + n_3)
                        v_oc_chunk = T.axis.spatial(T.int64(4), oc_chunk_2 + oc_chunk_3)
                        v_oh = T.axis.spatial(T.int64(28), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_fused_fused // T.int64(112) * T.int64(14) + n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_fused_fused % T.int64(28) // T.int64(14) * T.int64(7) + oh_2 * T.int64(7) + oh_3)
                        v_ow = T.axis.spatial(T.int64(28), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_fused_fused % T.int64(112) // T.int64(56) * T.int64(14) + n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_fused_fused % T.int64(14) + ow_2 + ow_3)
                        v_oc_block = T.axis.spatial(T.int64(32), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_fused_fused % T.int64(56) // T.int64(28) * T.int64(16) + oc_block_1 * T.int64(16) + oc_block_2 + oc_block_3)
                        v_ic = T.axis.reduce(T.int64(128), ic_0 * T.int64(4) + ic_1)
                        v_kh = T.axis.reduce(T.int64(3), kh_0 * T.int64(3) + kh_1)
                        v_kw = T.axis.reduce(T.int64(3), kw_0 + kw_1)
                        T.reads(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block], data_pad[v_n, v_ic // T.int64(128), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(128)], p1[v_oc_chunk, v_ic // T.int64(128), v_kh, v_kw, v_ic % T.int64(128), v_oc_block])
                        T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                        T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                        conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] + data_pad[v_n, v_ic // T.int64(128), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(128)] * p1[v_oc_chunk, v_ic // T.int64(128), v_kh, v_kw, v_ic % T.int64(128), v_oc_block]
                for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(4), T.int64(7), T.int64(1)):
                    for ax4_fused in T.vectorized(T.int64(16)):
                        with T.block("T_relu"):
                            v_ax0, v_ax1 = T.axis.remap("SS", [ax0, ax1])
                            v_ax2 = T.axis.spatial(T.int64(28), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_fused_fused // T.int64(112) * T.int64(14) + n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_fused_fused % T.int64(28) // T.int64(14) * T.int64(7) + ax2)
                            v_ax3 = T.axis.spatial(T.int64(28), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_fused_fused % T.int64(112) // T.int64(56) * T.int64(14) + n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_fused_fused % T.int64(14) + ax3)
                            v_ax4 = T.axis.spatial(T.int64(32), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_fused_fused % T.int64(56) // T.int64(28) * T.int64(16) + ax4_fused)
                            T.reads(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4], p3[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                            T.writes(T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                            T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.max(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] + p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4] + p3[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], T.float32(0))
b0 = sch.get_block(name="data_pad", func_name="main")
b1 = sch.get_block(name="conv2d_NCHWc", func_name="main")
b2 = sch.get_block(name="T_add", func_name="main")
b3 = sch.get_block(name="T_add_1", func_name="main")
b4 = sch.get_block(name="root", func_name="main")
sch.compute_inline(block=b3)
sch.compute_inline(block=b2)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSRSRS")
l5, l6, l7, l8, l9, l10, l11, l12 = sch.get_loops(block=b1)
v13, v14, v15, v16 = sch.sample_perfect_tile(loop=l5, n=4, max_innermost_factor=64, decision=[1, 1, 1, 1])
l17, l18, l19, l20 = sch.split(loop=l5, factors=[v13, v14, v15, v16], preserve_unit_iters=True)
v21, v22, v23, v24 = sch.sample_perfect_tile(loop=l6, n=4, max_innermost_factor=64, decision=[1, 1, 4, 1])
l25, l26, l27, l28 = sch.split(loop=l6, factors=[v21, v22, v23, v24], preserve_unit_iters=True)
v29, v30, v31, v32 = sch.sample_perfect_tile(loop=l7, n=4, max_innermost_factor=64, decision=[2, 2, 1, 7])
l33, l34, l35, l36 = sch.split(loop=l7, factors=[v29, v30, v31, v32], preserve_unit_iters=True)
v37, v38, v39, v40 = sch.sample_perfect_tile(loop=l8, n=4, max_innermost_factor=64, decision=[2, 14, 1, 1])
l41, l42, l43, l44 = sch.split(loop=l8, factors=[v37, v38, v39, v40], preserve_unit_iters=True)
v45, v46, v47, v48 = sch.sample_perfect_tile(loop=l9, n=4, max_innermost_factor=64, decision=[2, 1, 16, 1])
l49, l50, l51, l52 = sch.split(loop=l9, factors=[v45, v46, v47, v48], preserve_unit_iters=True)
v53, v54 = sch.sample_perfect_tile(loop=l10, n=2, max_innermost_factor=64, decision=[32, 4])
l55, l56 = sch.split(loop=l10, factors=[v53, v54], preserve_unit_iters=True)
v57, v58 = sch.sample_perfect_tile(loop=l11, n=2, max_innermost_factor=64, decision=[1, 3])
l59, l60 = sch.split(loop=l11, factors=[v57, v58], preserve_unit_iters=True)
v61, v62 = sch.sample_perfect_tile(loop=l12, n=2, max_innermost_factor=64, decision=[3, 1])
l63, l64 = sch.split(loop=l12, factors=[v61, v62], preserve_unit_iters=True)
sch.reorder(l17, l25, l33, l41, l49, l18, l26, l34, l42, l50, l55, l59, l63, l19, l27, l35, l43, l51, l56, l60, l64, l20, l28, l36, l44, l52)
b65, = sch.get_consumers(block=b1)
sch.reverse_compute_at(block=b65, loop=l50, preserve_unit_loops=True, index=-1)
sch.annotate(block_or_loop=b4, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b4, ann_key="meta_schedule.vectorize", ann_val=64)
v66 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b4, ann_key="meta_schedule.unroll_explicit", ann_val=v66)
l67 = sch.sample_compute_location(block=b0, decision=8)
sch.compute_at(block=b0, loop=l67, preserve_unit_loops=True, index=-1)
sch.enter_postproc()
b68 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b68, ann_key="meta_schedule.parallel")
sch.unannotate(block_or_loop=b68, ann_key="meta_schedule.vectorize")
sch.unannotate(block_or_loop=b68, ann_key="meta_schedule.unroll_explicit")
b69, b70, b71 = sch.get_child_blocks(b68)
l72, l73, l74, l75, l76, l77, l78, l79, l80, l81, l82, l83, l84, l85 = sch.get_loops(block=b69)
l86 = sch.fuse(l72, l73, l74, l75, l76, l77, l78, l79, l80, preserve_unit_iters=True)
sch.parallel(loop=l86)
l87, l88, l89, l90, l91, l92, l93, l94, l95, l96, l97, l98, l99, l100, l101, l102, l103, l104 = sch.get_loops(block=b70)
l105 = sch.fuse(l87, preserve_unit_iters=True)
sch.parallel(loop=l105)
sch.annotate(block_or_loop=l105, ann_key="pragma_auto_unroll_max_step", ann_val=512)
sch.annotate(block_or_loop=l105, ann_key="pragma_unroll_explicit", ann_val=1)
l106, l107, l108, l109, l110, l111, l112 = sch.get_loops(block=b71)
l113 = sch.fuse(l112, preserve_unit_iters=True)
sch.vectorize(loop=l113)
b114 = sch.get_block(name="conv2d_NCHWc", func_name="main")
l115, l116, l117, l118, l119, l120, l121, l122, l123, l124, l125, l126, l127, l128, l129, l130, l131, l132 = sch.get_loops(block=b114)
b133 = sch.decompose_reduction(block=b114, loop=l117)
2024-04-28 23:55:27 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_1] Trial #604: GFLOPs: 745.4573. Time: 310.5638 us. Best GFLOPs: 1056.2801
2024-04-28 23:55:27 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_1] Trial #605: GFLOPs: 838.1333. Time: 276.2234 us. Best GFLOPs: 1056.2801
2024-04-28 23:55:27 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_1] Trial #606: GFLOPs: 649.9827. Time: 356.1819 us. Best GFLOPs: 1056.2801
2024-04-28 23:55:27 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_1] Trial #607: GFLOPs: 884.5757. Time: 261.7210 us. Best GFLOPs: 1056.2801
2024-04-28 23:55:27 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_1] Trial #608: GFLOPs: 640.8691. Time: 361.2470 us. Best GFLOPs: 1056.2801
2024-04-28 23:55:27 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_1] Trial #609: GFLOPs: 744.9977. Time: 310.7554 us. Best GFLOPs: 1056.2801
2024-04-28 23:55:27 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_1] Trial #610: GFLOPs: 742.9396. Time: 311.6163 us. Best GFLOPs: 1056.2801
2024-04-28 23:55:27 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_1] Trial #611: GFLOPs: 708.6931. Time: 326.6746 us. Best GFLOPs: 1056.2801
2024-04-28 23:55:27 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_1] Trial #612: GFLOPs: 768.8253. Time: 301.1244 us. Best GFLOPs: 1056.2801
2024-04-28 23:55:27 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_1] Trial #613: GFLOPs: 30.9167. Time: 7488.2488 us. Best GFLOPs: 1056.2801
2024-04-28 23:55:27 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_1] Trial #614: GFLOPs: 30.9479. Time: 7480.7001 us. Best GFLOPs: 1056.2801
2024-04-28 23:55:27 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_1] Trial #615: GFLOPs: 733.6163. Time: 315.5765 us. Best GFLOPs: 1056.2801
2024-04-28 23:55:27 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_1] Trial #616: GFLOPs: 818.5150. Time: 282.8440 us. Best GFLOPs: 1056.2801
2024-04-28 23:55:27 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_1] Trial #617: GFLOPs: 675.8832. Time: 342.5326 us. Best GFLOPs: 1056.2801
2024-04-28 23:55:27 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_1] Trial #618: GFLOPs: 835.5696. Time: 277.0709 us. Best GFLOPs: 1056.2801
2024-04-28 23:55:27 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_1] Trial #619: GFLOPs: 836.7126. Time: 276.6924 us. Best GFLOPs: 1056.2801
2024-04-28 23:55:27 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_1] Trial #620: GFLOPs: 734.3177. Time: 315.2751 us. Best GFLOPs: 1056.2801
2024-04-28 23:55:27 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_1] Trial #621: GFLOPs: 763.5196. Time: 303.2169 us. Best GFLOPs: 1056.2801
2024-04-28 23:55:27 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_1] Trial #622: GFLOPs: 641.1147. Time: 361.1087 us. Best GFLOPs: 1056.2801
2024-04-28 23:55:27 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_1] Trial #623: GFLOPs: 641.5761. Time: 360.8489 us. Best GFLOPs: 1056.2801
2024-04-28 23:55:27 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_1] Trial #624: GFLOPs: 726.8137. Time: 318.5301 us. Best GFLOPs: 1056.2801
2024-04-28 23:55:27 [INFO] [task_scheduler.cc:121] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_1] Trial #625: Error in building:
LocalBuilder: Timeout, killed after 30.0 seconds
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(1), T.int64(28), T.int64(28), T.int64(128)), "float32"), p1: T.Buffer((T.int64(4), T.int64(1), T.int64(3), T.int64(3), T.int64(128), T.int64(32)), "float32"), p2: T.Buffer((T.int64(1), T.int64(4), T.int64(1), T.int64(1), T.int64(32)), "float32"), p3: T.Buffer((T.int64(1), T.int64(4), T.int64(28), T.int64(28), T.int64(32)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(4), T.int64(28), T.int64(28), T.int64(32)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        data_pad = T.alloc_buffer((T.int64(1), T.int64(1), T.int64(30), T.int64(30), T.int64(128)))
        conv2d_NCHWc = T.alloc_buffer((T.int64(1), T.int64(4), T.int64(28), T.int64(28), T.int64(32)))
        for n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_fused_fused in T.parallel(T.int64(112), annotations={"pragma_auto_unroll_max_step": 512, "pragma_unroll_explicit": 1}):
            for ax0, ax1, ax2, ax3, ax4 in T.grid(T.int64(1), T.int64(1), T.int64(9), T.int64(3), T.int64(128)):
                with T.block("data_pad"):
                    v_i0, v_i1 = T.axis.remap("SS", [ax0, ax1])
                    v_i2 = T.axis.spatial(T.int64(30), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_fused_fused // T.int64(56) * T.int64(14) + n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_fused_fused % T.int64(4) // T.int64(2) * T.int64(7) + ax2)
                    v_i3 = T.axis.spatial(T.int64(30), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_fused_fused % T.int64(2) + n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_fused_fused % T.int64(56) // T.int64(4) * T.int64(2) + ax3)
                    v_i4 = T.axis.spatial(T.int64(128), ax4)
                    T.reads(p0[v_i0, v_i1, v_i2 - T.int64(1), v_i3 - T.int64(1), v_i4])
                    T.writes(data_pad[v_i0, v_i1, v_i2, v_i3, v_i4])
                    data_pad[v_i0, v_i1, v_i2, v_i3, v_i4] = T.if_then_else(T.int64(1) <= v_i2 and v_i2 < T.int64(29) and T.int64(1) <= v_i3 and v_i3 < T.int64(29), p0[v_i0, v_i1, v_i2 - T.int64(1), v_i3 - T.int64(1), v_i4], T.float32(0))
            for oc_block_1 in range(T.int64(1)):
                for n_2_init, oc_chunk_2_init, oh_2_init, ow_2_init, oc_block_2_init, n_3_init, oc_chunk_3_init, oh_3_init, ow_3_init, oc_block_3_init in T.grid(T.int64(1), T.int64(4), T.int64(1), T.int64(1), T.int64(32), T.int64(1), T.int64(1), T.int64(7), T.int64(1), T.int64(1)):
                    with T.block("conv2d_NCHWc_init"):
                        v_n = T.axis.spatial(T.int64(1), n_2_init + n_3_init)
                        v_oc_chunk = T.axis.spatial(T.int64(4), oc_chunk_2_init + oc_chunk_3_init)
                        v_oh = T.axis.spatial(T.int64(28), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_fused_fused // T.int64(56) * T.int64(14) + n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_fused_fused % T.int64(4) // T.int64(2) * T.int64(7) + oh_2_init * T.int64(7) + oh_3_init)
                        v_ow = T.axis.spatial(T.int64(28), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_fused_fused % T.int64(56) // T.int64(4) * T.int64(2) + n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_fused_fused % T.int64(2) + ow_2_init + ow_3_init)
                        v_oc_block = T.axis.spatial(T.int64(32), oc_block_1 * T.int64(32) + oc_block_2_init + oc_block_3_init)
                        T.reads()
                        T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                        T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                        conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = T.float32(0)
                for ic_0, kh_0, kw_0, n_2, oc_chunk_2, oh_2, ow_2, oc_block_2, ic_1, kh_1, kw_1, n_3, oc_chunk_3, oh_3, ow_3, oc_block_3 in T.grid(T.int64(32), T.int64(1), T.int64(1), T.int64(1), T.int64(4), T.int64(1), T.int64(1), T.int64(32), T.int64(4), T.int64(3), T.int64(3), T.int64(1), T.int64(1), T.int64(7), T.int64(1), T.int64(1)):
                    with T.block("conv2d_NCHWc_update"):
                        v_n = T.axis.spatial(T.int64(1), n_2 + n_3)
                        v_oc_chunk = T.axis.spatial(T.int64(4), oc_chunk_2 + oc_chunk_3)
                        v_oh = T.axis.spatial(T.int64(28), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_fused_fused // T.int64(56) * T.int64(14) + n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_fused_fused % T.int64(4) // T.int64(2) * T.int64(7) + oh_2 * T.int64(7) + oh_3)
                        v_ow = T.axis.spatial(T.int64(28), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_fused_fused % T.int64(56) // T.int64(4) * T.int64(2) + n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_fused_fused % T.int64(2) + ow_2 + ow_3)
                        v_oc_block = T.axis.spatial(T.int64(32), oc_block_1 * T.int64(32) + oc_block_2 + oc_block_3)
                        v_ic = T.axis.reduce(T.int64(128), ic_0 * T.int64(4) + ic_1)
                        v_kh = T.axis.reduce(T.int64(3), kh_0 * T.int64(3) + kh_1)
                        v_kw = T.axis.reduce(T.int64(3), kw_0 * T.int64(3) + kw_1)
                        T.reads(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block], data_pad[v_n, v_ic // T.int64(128), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(128)], p1[v_oc_chunk, v_ic // T.int64(128), v_kh, v_kw, v_ic % T.int64(128), v_oc_block])
                        T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                        T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                        conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] + data_pad[v_n, v_ic // T.int64(128), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(128)] * p1[v_oc_chunk, v_ic // T.int64(128), v_kh, v_kw, v_ic % T.int64(128), v_oc_block]
                for ax0, ax1, ax2 in T.grid(T.int64(1), T.int64(4), T.int64(7)):
                    for ax3_ax4_fused in T.vectorized(T.int64(32)):
                        with T.block("T_relu"):
                            v_ax0, v_ax1 = T.axis.remap("SS", [ax0, ax1])
                            v_ax2 = T.axis.spatial(T.int64(28), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_fused_fused // T.int64(56) * T.int64(14) + n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_fused_fused % T.int64(4) // T.int64(2) * T.int64(7) + ax2)
                            v_ax3 = T.axis.spatial(T.int64(28), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_fused_fused % T.int64(56) // T.int64(4) * T.int64(2) + n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_fused_fused % T.int64(2))
                            v_ax4 = T.axis.spatial(T.int64(32), ax3_ax4_fused)
                            T.reads(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4], p3[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                            T.writes(T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                            T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.max(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] + p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4] + p3[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], T.float32(0))
b0 = sch.get_block(name="data_pad", func_name="main")
b1 = sch.get_block(name="conv2d_NCHWc", func_name="main")
b2 = sch.get_block(name="T_add", func_name="main")
b3 = sch.get_block(name="T_add_1", func_name="main")
b4 = sch.get_block(name="root", func_name="main")
sch.compute_inline(block=b3)
sch.compute_inline(block=b2)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSRSRS")
l5, l6, l7, l8, l9, l10, l11, l12 = sch.get_loops(block=b1)
v13, v14, v15, v16 = sch.sample_perfect_tile(loop=l5, n=4, max_innermost_factor=64, decision=[1, 1, 1, 1])
l17, l18, l19, l20 = sch.split(loop=l5, factors=[v13, v14, v15, v16], preserve_unit_iters=True)
v21, v22, v23, v24 = sch.sample_perfect_tile(loop=l6, n=4, max_innermost_factor=64, decision=[1, 1, 4, 1])
l25, l26, l27, l28 = sch.split(loop=l6, factors=[v21, v22, v23, v24], preserve_unit_iters=True)
v29, v30, v31, v32 = sch.sample_perfect_tile(loop=l7, n=4, max_innermost_factor=64, decision=[2, 2, 1, 7])
l33, l34, l35, l36 = sch.split(loop=l7, factors=[v29, v30, v31, v32], preserve_unit_iters=True)
v37, v38, v39, v40 = sch.sample_perfect_tile(loop=l8, n=4, max_innermost_factor=64, decision=[14, 2, 1, 1])
l41, l42, l43, l44 = sch.split(loop=l8, factors=[v37, v38, v39, v40], preserve_unit_iters=True)
v45, v46, v47, v48 = sch.sample_perfect_tile(loop=l9, n=4, max_innermost_factor=64, decision=[1, 1, 32, 1])
l49, l50, l51, l52 = sch.split(loop=l9, factors=[v45, v46, v47, v48], preserve_unit_iters=True)
v53, v54 = sch.sample_perfect_tile(loop=l10, n=2, max_innermost_factor=64, decision=[32, 4])
l55, l56 = sch.split(loop=l10, factors=[v53, v54], preserve_unit_iters=True)
v57, v58 = sch.sample_perfect_tile(loop=l11, n=2, max_innermost_factor=64, decision=[1, 3])
l59, l60 = sch.split(loop=l11, factors=[v57, v58], preserve_unit_iters=True)
v61, v62 = sch.sample_perfect_tile(loop=l12, n=2, max_innermost_factor=64, decision=[1, 3])
l63, l64 = sch.split(loop=l12, factors=[v61, v62], preserve_unit_iters=True)
sch.reorder(l17, l25, l33, l41, l49, l18, l26, l34, l42, l50, l55, l59, l63, l19, l27, l35, l43, l51, l56, l60, l64, l20, l28, l36, l44, l52)
b65, = sch.get_consumers(block=b1)
sch.reverse_compute_at(block=b65, loop=l50, preserve_unit_loops=True, index=-1)
sch.annotate(block_or_loop=b4, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b4, ann_key="meta_schedule.vectorize", ann_val=64)
v66 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b4, ann_key="meta_schedule.unroll_explicit", ann_val=v66)
l67 = sch.sample_compute_location(block=b0, decision=8)
sch.compute_at(block=b0, loop=l67, preserve_unit_loops=True, index=-1)
sch.enter_postproc()
b68 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b68, ann_key="meta_schedule.parallel")
sch.unannotate(block_or_loop=b68, ann_key="meta_schedule.vectorize")
sch.unannotate(block_or_loop=b68, ann_key="meta_schedule.unroll_explicit")
b69, b70, b71 = sch.get_child_blocks(b68)
l72, l73, l74, l75, l76, l77, l78, l79, l80, l81, l82, l83, l84, l85 = sch.get_loops(block=b69)
l86 = sch.fuse(l72, l73, l74, l75, l76, l77, l78, l79, l80, preserve_unit_iters=True)
sch.parallel(loop=l86)
l87, l88, l89, l90, l91, l92, l93, l94, l95, l96, l97, l98, l99, l100, l101, l102, l103, l104 = sch.get_loops(block=b70)
l105 = sch.fuse(l87, preserve_unit_iters=True)
sch.parallel(loop=l105)
sch.annotate(block_or_loop=l105, ann_key="pragma_auto_unroll_max_step", ann_val=512)
sch.annotate(block_or_loop=l105, ann_key="pragma_unroll_explicit", ann_val=1)
l106, l107, l108, l109, l110, l111, l112 = sch.get_loops(block=b71)
l113 = sch.fuse(l111, l112, preserve_unit_iters=True)
sch.vectorize(loop=l113)
b114 = sch.get_block(name="conv2d_NCHWc", func_name="main")
l115, l116, l117, l118, l119, l120, l121, l122, l123, l124, l125, l126, l127, l128, l129, l130, l131, l132 = sch.get_loops(block=b114)
b133 = sch.decompose_reduction(block=b114, loop=l117)
2024-04-28 23:55:27 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_1] Trial #626: GFLOPs: 756.0536. Time: 306.2112 us. Best GFLOPs: 1056.2801
2024-04-28 23:55:27 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_1] Trial #627: GFLOPs: 784.5011. Time: 295.1074 us. Best GFLOPs: 1056.2801
2024-04-28 23:55:27 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_1] Trial #628: GFLOPs: 723.6119. Time: 319.9396 us. Best GFLOPs: 1056.2801
2024-04-28 23:55:27 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_1] Trial #629: GFLOPs: 732.7321. Time: 315.9573 us. Best GFLOPs: 1056.2801
2024-04-28 23:55:27 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_1] Trial #630: GFLOPs: 742.4456. Time: 311.8236 us. Best GFLOPs: 1056.2801
2024-04-28 23:55:27 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_1] Trial #631: GFLOPs: 785.4590. Time: 294.7475 us. Best GFLOPs: 1056.2801
2024-04-28 23:55:27 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_1] Trial #632: GFLOPs: 727.6963. Time: 318.1438 us. Best GFLOPs: 1056.2801
2024-04-28 23:55:27 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_1] Trial #633: GFLOPs: 723.3430. Time: 320.0585 us. Best GFLOPs: 1056.2801
2024-04-28 23:55:27 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_1] Trial #634: GFLOPs: 708.2213. Time: 326.8923 us. Best GFLOPs: 1056.2801
2024-04-28 23:55:27 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_1] Trial #635: GFLOPs: 764.0292. Time: 303.0147 us. Best GFLOPs: 1056.2801
2024-04-28 23:55:27 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_1] Trial #636: GFLOPs: 815.3741. Time: 283.9335 us. Best GFLOPs: 1056.2801
2024-04-28 23:55:27 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_1] Trial #637: GFLOPs: 351.3792. Time: 658.8668 us. Best GFLOPs: 1056.2801
2024-04-28 23:55:27 [INFO] [task_scheduler.cc:121] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_1] Trial #638: Error in building:
LocalBuilder: Timeout, killed after 30.0 seconds
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(1), T.int64(28), T.int64(28), T.int64(128)), "float32"), p1: T.Buffer((T.int64(4), T.int64(1), T.int64(3), T.int64(3), T.int64(128), T.int64(32)), "float32"), p2: T.Buffer((T.int64(1), T.int64(4), T.int64(1), T.int64(1), T.int64(32)), "float32"), p3: T.Buffer((T.int64(1), T.int64(4), T.int64(28), T.int64(28), T.int64(32)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(4), T.int64(28), T.int64(28), T.int64(32)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        data_pad = T.alloc_buffer((T.int64(1), T.int64(1), T.int64(30), T.int64(30), T.int64(128)))
        conv2d_NCHWc = T.alloc_buffer((T.int64(1), T.int64(4), T.int64(28), T.int64(28), T.int64(32)))
        for n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused_fused in T.parallel(T.int64(1568), annotations={"pragma_auto_unroll_max_step": 512, "pragma_unroll_explicit": 1}):
            for ax0, ax1, ax2, ax3, ax4 in T.grid(T.int64(1), T.int64(1), T.int64(6), T.int64(4), T.int64(128)):
                with T.block("data_pad"):
                    v_i0, v_i1 = T.axis.remap("SS", [ax0, ax1])
                    v_i2 = T.axis.spatial(T.int64(30), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused_fused % T.int64(196) // T.int64(28) * T.int64(4) + ax2)
                    v_i3 = T.axis.spatial(T.int64(30), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused_fused % T.int64(784) // T.int64(392) * T.int64(14) + n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused_fused % T.int64(28) // T.int64(4) * T.int64(2) + ax3)
                    v_i4 = T.axis.spatial(T.int64(128), ax4)
                    T.reads(p0[v_i0, v_i1, v_i2 - T.int64(1), v_i3 - T.int64(1), v_i4])
                    T.writes(data_pad[v_i0, v_i1, v_i2, v_i3, v_i4])
                    data_pad[v_i0, v_i1, v_i2, v_i3, v_i4] = T.if_then_else(T.int64(1) <= v_i2 and v_i2 < T.int64(29) and T.int64(1) <= v_i3 and v_i3 < T.int64(29), p0[v_i0, v_i1, v_i2 - T.int64(1), v_i3 - T.int64(1), v_i4], T.float32(0))
            for n_2_init, oc_chunk_2_init, oh_2_init, ow_2_init, oc_block_2_init, n_3_init, oc_chunk_3_init, oh_3_init, ow_3_init in T.grid(T.int64(1), T.int64(2), T.int64(1), T.int64(2), T.int64(2), T.int64(1), T.int64(1), T.int64(4), T.int64(1)):
                for oc_block_3_fused_init in T.vectorized(T.int64(2)):
                    with T.block("conv2d_NCHWc_init"):
                        v_n = T.axis.spatial(T.int64(1), n_2_init + n_3_init)
                        v_oc_chunk = T.axis.spatial(T.int64(4), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused_fused // T.int64(784) * T.int64(2) + oc_chunk_2_init + oc_chunk_3_init)
                        v_oh = T.axis.spatial(T.int64(28), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused_fused % T.int64(196) // T.int64(28) * T.int64(4) + oh_2_init * T.int64(4) + oh_3_init)
                        v_ow = T.axis.spatial(T.int64(28), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused_fused % T.int64(784) // T.int64(392) * T.int64(14) + n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused_fused % T.int64(28) // T.int64(4) * T.int64(2) + ow_2_init + ow_3_init)
                        v_oc_block = T.axis.spatial(T.int64(32), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused_fused % T.int64(392) // T.int64(196) * T.int64(16) + n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused_fused % T.int64(4) * T.int64(4) + oc_block_2_init * T.int64(2) + oc_block_3_fused_init)
                        T.reads()
                        T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                        T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                        conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = T.float32(0)
            for ic_0, kh_0, kw_0, n_2, oc_chunk_2, oh_2, ow_2, oc_block_2, ic_1, kh_1, kw_1, n_3, oc_chunk_3, oh_3, ow_3 in T.grid(T.int64(16), T.int64(3), T.int64(3), T.int64(1), T.int64(2), T.int64(1), T.int64(2), T.int64(2), T.int64(8), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(4), T.int64(1)):
                for oc_block_3_fused in T.vectorized(T.int64(2)):
                    with T.block("conv2d_NCHWc_update"):
                        v_n = T.axis.spatial(T.int64(1), n_2 + n_3)
                        v_oc_chunk = T.axis.spatial(T.int64(4), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused_fused // T.int64(784) * T.int64(2) + oc_chunk_2 + oc_chunk_3)
                        v_oh = T.axis.spatial(T.int64(28), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused_fused % T.int64(196) // T.int64(28) * T.int64(4) + oh_2 * T.int64(4) + oh_3)
                        v_ow = T.axis.spatial(T.int64(28), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused_fused % T.int64(784) // T.int64(392) * T.int64(14) + n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused_fused % T.int64(28) // T.int64(4) * T.int64(2) + ow_2 + ow_3)
                        v_oc_block = T.axis.spatial(T.int64(32), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused_fused % T.int64(392) // T.int64(196) * T.int64(16) + n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused_fused % T.int64(4) * T.int64(4) + oc_block_2 * T.int64(2) + oc_block_3_fused)
                        v_ic = T.axis.reduce(T.int64(128), ic_0 * T.int64(8) + ic_1)
                        v_kh = T.axis.reduce(T.int64(3), kh_0 + kh_1)
                        v_kw = T.axis.reduce(T.int64(3), kw_0 + kw_1)
                        T.reads(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block], data_pad[v_n, v_ic // T.int64(128), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(128)], p1[v_oc_chunk, v_ic // T.int64(128), v_kh, v_kw, v_ic % T.int64(128), v_oc_block])
                        T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                        T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                        conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] + data_pad[v_n, v_ic // T.int64(128), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(128)] * p1[v_oc_chunk, v_ic // T.int64(128), v_kh, v_kw, v_ic % T.int64(128), v_oc_block]
            for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(2), T.int64(4), T.int64(2)):
                for ax4_fused in T.vectorized(T.int64(4)):
                    with T.block("T_relu"):
                        v_ax0 = T.axis.spatial(T.int64(1), ax0)
                        v_ax1 = T.axis.spatial(T.int64(4), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused_fused // T.int64(784) * T.int64(2) + ax1)
                        v_ax2 = T.axis.spatial(T.int64(28), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused_fused % T.int64(196) // T.int64(28) * T.int64(4) + ax2)
                        v_ax3 = T.axis.spatial(T.int64(28), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused_fused % T.int64(784) // T.int64(392) * T.int64(14) + n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused_fused % T.int64(28) // T.int64(4) * T.int64(2) + ax3)
                        v_ax4 = T.axis.spatial(T.int64(32), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused_fused % T.int64(392) // T.int64(196) * T.int64(16) + n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused_fused % T.int64(4) * T.int64(4) + ax4_fused)
                        T.reads(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4], p3[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                        T.writes(T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                        T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.max(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] + p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4] + p3[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], T.float32(0))
b0 = sch.get_block(name="data_pad", func_name="main")
b1 = sch.get_block(name="conv2d_NCHWc", func_name="main")
b2 = sch.get_block(name="T_add", func_name="main")
b3 = sch.get_block(name="T_add_1", func_name="main")
b4 = sch.get_block(name="root", func_name="main")
sch.compute_inline(block=b3)
sch.compute_inline(block=b2)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSRSRS")
l5, l6, l7, l8, l9, l10, l11, l12 = sch.get_loops(block=b1)
v13, v14, v15, v16 = sch.sample_perfect_tile(loop=l5, n=4, max_innermost_factor=64, decision=[1, 1, 1, 1])
l17, l18, l19, l20 = sch.split(loop=l5, factors=[v13, v14, v15, v16], preserve_unit_iters=True)
v21, v22, v23, v24 = sch.sample_perfect_tile(loop=l6, n=4, max_innermost_factor=64, decision=[2, 1, 2, 1])
l25, l26, l27, l28 = sch.split(loop=l6, factors=[v21, v22, v23, v24], preserve_unit_iters=True)
v29, v30, v31, v32 = sch.sample_perfect_tile(loop=l7, n=4, max_innermost_factor=64, decision=[1, 7, 1, 4])
l33, l34, l35, l36 = sch.split(loop=l7, factors=[v29, v30, v31, v32], preserve_unit_iters=True)
v37, v38, v39, v40 = sch.sample_perfect_tile(loop=l8, n=4, max_innermost_factor=64, decision=[2, 7, 2, 1])
l41, l42, l43, l44 = sch.split(loop=l8, factors=[v37, v38, v39, v40], preserve_unit_iters=True)
v45, v46, v47, v48 = sch.sample_perfect_tile(loop=l9, n=4, max_innermost_factor=64, decision=[2, 4, 2, 2])
l49, l50, l51, l52 = sch.split(loop=l9, factors=[v45, v46, v47, v48], preserve_unit_iters=True)
v53, v54 = sch.sample_perfect_tile(loop=l10, n=2, max_innermost_factor=64, decision=[16, 8])
l55, l56 = sch.split(loop=l10, factors=[v53, v54], preserve_unit_iters=True)
v57, v58 = sch.sample_perfect_tile(loop=l11, n=2, max_innermost_factor=64, decision=[3, 1])
l59, l60 = sch.split(loop=l11, factors=[v57, v58], preserve_unit_iters=True)
v61, v62 = sch.sample_perfect_tile(loop=l12, n=2, max_innermost_factor=64, decision=[3, 1])
l63, l64 = sch.split(loop=l12, factors=[v61, v62], preserve_unit_iters=True)
sch.reorder(l17, l25, l33, l41, l49, l18, l26, l34, l42, l50, l55, l59, l63, l19, l27, l35, l43, l51, l56, l60, l64, l20, l28, l36, l44, l52)
b65, = sch.get_consumers(block=b1)
sch.reverse_compute_at(block=b65, loop=l50, preserve_unit_loops=True, index=-1)
sch.annotate(block_or_loop=b4, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b4, ann_key="meta_schedule.vectorize", ann_val=64)
v66 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b4, ann_key="meta_schedule.unroll_explicit", ann_val=v66)
l67 = sch.sample_compute_location(block=b0, decision=9)
sch.compute_at(block=b0, loop=l67, preserve_unit_loops=True, index=-1)
sch.enter_postproc()
b68 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b68, ann_key="meta_schedule.parallel")
sch.unannotate(block_or_loop=b68, ann_key="meta_schedule.vectorize")
sch.unannotate(block_or_loop=b68, ann_key="meta_schedule.unroll_explicit")
b69, b70, b71 = sch.get_child_blocks(b68)
l72, l73, l74, l75, l76, l77, l78, l79, l80, l81, l82, l83, l84, l85, l86 = sch.get_loops(block=b69)
l87 = sch.fuse(l72, l73, l74, l75, l76, l77, l78, l79, l80, l81, preserve_unit_iters=True)
sch.parallel(loop=l87)
l88, l89, l90, l91, l92, l93, l94, l95, l96, l97, l98, l99, l100, l101, l102, l103, l104 = sch.get_loops(block=b70)
l105 = sch.fuse(l88, preserve_unit_iters=True)
sch.parallel(loop=l105)
l106 = sch.fuse(l104, preserve_unit_iters=True)
sch.vectorize(loop=l106)
sch.annotate(block_or_loop=l105, ann_key="pragma_auto_unroll_max_step", ann_val=512)
sch.annotate(block_or_loop=l105, ann_key="pragma_unroll_explicit", ann_val=1)
l107, l108, l109, l110, l111, l112 = sch.get_loops(block=b71)
l113 = sch.fuse(l112, preserve_unit_iters=True)
sch.vectorize(loop=l113)
b114 = sch.get_block(name="conv2d_NCHWc", func_name="main")
l115, l116, l117, l118, l119, l120, l121, l122, l123, l124, l125, l126, l127, l128, l129, l130, l131 = sch.get_loops(block=b114)
b132 = sch.decompose_reduction(block=b114, loop=l116)
2024-04-28 23:55:27 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_1] Trial #639: GFLOPs: 57.4369. Time: 4030.7186 us. Best GFLOPs: 1056.2801
2024-04-28 23:55:27 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_1] Trial #640: GFLOPs: 112.3551. Time: 2060.5384 us. Best GFLOPs: 1056.2801
2024-04-29 00:50:49 [INFO] [evolutionary_search.cc:713] Generating candidates......
2024-04-29 00:50:50 [INFO] [evolutionary_search.cc:715] Picked top 102 candidate(s) from database
2024-04-29 00:50:55 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x3858de8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x3c39958)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0xa2a8408)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x3f4f298)]: 0 failure(s)
2024-04-29 00:50:55 [INFO] [evolutionary_search.cc:723] Sampled 410 candidate(s)
2024-04-29 00:51:07 [INFO] [evolutionary_search.cc:621] Evolve iter #0 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x3858de8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x3c39958)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0xa2a8408)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x3f4f298)]: 0 failure(s)
2024-04-29 00:51:18 [INFO] [evolutionary_search.cc:621] Evolve iter #1 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x3858de8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x3c39958)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0xa2a8408)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x3f4f298)]: 0 failure(s)
2024-04-29 00:51:30 [INFO] [evolutionary_search.cc:621] Evolve iter #2 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x3858de8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x3c39958)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0xa2a8408)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x3f4f298)]: 0 failure(s)
2024-04-29 00:51:41 [INFO] [evolutionary_search.cc:621] Evolve iter #3 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x3858de8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x3c39958)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0xa2a8408)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x3f4f298)]: 0 failure(s)
2024-04-29 00:51:48 [INFO] [evolutionary_search.cc:649] Scores of the best 64 candidates:
[1 : 16]:	0.9197  0.9158  0.9054  0.8993  0.8889  0.8817  0.8800  0.8796  0.8784  0.8769  0.8763  0.8682  0.8668  0.8668  0.8651  0.8484
[17 : 32]:	0.8461  0.8399  0.8379  0.8367  0.8361  0.8355  0.8267  0.8262  0.8087  0.8083  0.8083  0.8075  0.8075  0.8075  0.8043  0.7998
[33 : 48]:	0.7980  0.7975  0.7937  0.7927  0.7926  0.7925  0.7919  0.7917  0.7812  0.7807  0.7803  0.7800  0.7780  0.7766  0.7709  0.7685
[49 : 64]:	0.7681  0.7673  0.7637  0.7609  0.7537  0.7517  0.7502  0.7470  0.7448  0.7447  0.7443  0.7443  0.7440  0.7390  0.7389  0.7380
2024-04-29 00:51:48 [INFO] [evolutionary_search.cc:727] Got 64 candidate(s) with evolutionary search
2024-04-29 00:51:48 [INFO] [evolutionary_search.cc:730] Sending 64 candidates(s) for measurement
2024-04-29 00:53:32 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_1] Trial #641: GFLOPs: 502.2664. Time: 460.9348 us. Best GFLOPs: 1056.2801
2024-04-29 00:53:32 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_1] Trial #642: GFLOPs: 1049.5038. Time: 220.5919 us. Best GFLOPs: 1056.2801
2024-04-29 00:53:32 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_1] Trial #643: GFLOPs: 900.2917. Time: 257.1523 us. Best GFLOPs: 1056.2801
2024-04-29 00:53:32 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_1] Trial #644: GFLOPs: 962.0297. Time: 240.6496 us. Best GFLOPs: 1056.2801
2024-04-29 00:53:32 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_1] Trial #645: GFLOPs: 964.2939. Time: 240.0846 us. Best GFLOPs: 1056.2801
2024-04-29 00:53:32 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_1] Trial #646: GFLOPs: 814.2911. Time: 284.3112 us. Best GFLOPs: 1056.2801
2024-04-29 00:53:32 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_1] Trial #647: GFLOPs: 963.9689. Time: 240.1655 us. Best GFLOPs: 1056.2801
2024-04-29 00:53:32 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_1] Trial #648: GFLOPs: 976.2414. Time: 237.1463 us. Best GFLOPs: 1056.2801
2024-04-29 00:53:32 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_1] Trial #649: GFLOPs: 937.2628. Time: 247.0087 us. Best GFLOPs: 1056.2801
2024-04-29 00:53:32 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_1] Trial #650: GFLOPs: 975.1151. Time: 237.4202 us. Best GFLOPs: 1056.2801
2024-04-29 00:53:32 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_1] Trial #651: GFLOPs: 971.4100. Time: 238.3258 us. Best GFLOPs: 1056.2801
2024-04-29 00:53:32 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_1] Trial #652: GFLOPs: 955.6778. Time: 242.2491 us. Best GFLOPs: 1056.2801
2024-04-29 00:53:32 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_1] Trial #653: GFLOPs: 969.5564. Time: 238.7814 us. Best GFLOPs: 1056.2801
2024-04-29 00:53:32 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_1] Trial #654: GFLOPs: 972.1400. Time: 238.1468 us. Best GFLOPs: 1056.2801
2024-04-29 00:53:32 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_1] Trial #655: GFLOPs: 787.9225. Time: 293.8260 us. Best GFLOPs: 1056.2801
2024-04-29 00:53:32 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_1] Trial #656: GFLOPs: 975.7659. Time: 237.2619 us. Best GFLOPs: 1056.2801
2024-04-29 00:53:32 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_1] Trial #657: GFLOPs: 921.9684. Time: 251.1063 us. Best GFLOPs: 1056.2801
2024-04-29 00:53:32 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_1] Trial #658: GFLOPs: 911.0897. Time: 254.1046 us. Best GFLOPs: 1056.2801
2024-04-29 00:53:32 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_1] Trial #659: GFLOPs: 919.1527. Time: 251.8755 us. Best GFLOPs: 1056.2801
2024-04-29 00:53:32 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_1] Trial #660: GFLOPs: 883.3498. Time: 262.0842 us. Best GFLOPs: 1056.2801
2024-04-29 00:53:32 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_1] Trial #661: GFLOPs: 805.0901. Time: 287.5604 us. Best GFLOPs: 1056.2801
2024-04-29 00:53:32 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_1] Trial #662: GFLOPs: 886.3498. Time: 261.1972 us. Best GFLOPs: 1056.2801
2024-04-29 00:53:32 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_1] Trial #663: GFLOPs: 922.6698. Time: 250.9154 us. Best GFLOPs: 1056.2801
2024-04-29 00:53:32 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_1] Trial #664: GFLOPs: 787.1269. Time: 294.1229 us. Best GFLOPs: 1056.2801
2024-04-29 00:53:32 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_1] Trial #665: GFLOPs: 834.3330. Time: 277.4816 us. Best GFLOPs: 1056.2801
2024-04-29 00:53:32 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_1] Trial #666: GFLOPs: 1036.8400. Time: 223.2862 us. Best GFLOPs: 1056.2801
2024-04-29 00:53:32 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_1] Trial #667: GFLOPs: 832.5158. Time: 278.0873 us. Best GFLOPs: 1056.2801
2024-04-29 00:53:32 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_1] Trial #668: GFLOPs: 913.6897. Time: 253.3815 us. Best GFLOPs: 1056.2801
2024-04-29 00:53:32 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_1] Trial #669: GFLOPs: 914.9129. Time: 253.0427 us. Best GFLOPs: 1056.2801
2024-04-29 00:53:32 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_1] Trial #670: GFLOPs: 915.1644. Time: 252.9732 us. Best GFLOPs: 1056.2801
2024-04-29 00:53:32 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_1] Trial #671: GFLOPs: 860.8160. Time: 268.9449 us. Best GFLOPs: 1056.2801
2024-04-29 00:53:32 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_1] Trial #672: GFLOPs: 802.2495. Time: 288.5786 us. Best GFLOPs: 1056.2801
2024-04-29 00:53:32 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_1] Trial #673: GFLOPs: 913.1380. Time: 253.5346 us. Best GFLOPs: 1056.2801
2024-04-29 00:53:32 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_1] Trial #674: GFLOPs: 959.1364. Time: 241.3755 us. Best GFLOPs: 1056.2801
2024-04-29 00:53:32 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_1] Trial #675: GFLOPs: 921.7936. Time: 251.1539 us. Best GFLOPs: 1056.2801
2024-04-29 00:53:32 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_1] Trial #676: GFLOPs: 897.8132. Time: 257.8622 us. Best GFLOPs: 1056.2801
2024-04-29 00:53:32 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_1] Trial #677: GFLOPs: 945.0024. Time: 244.9857 us. Best GFLOPs: 1056.2801
2024-04-29 00:53:32 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_1] Trial #678: GFLOPs: 1058.5948. Time: 218.6975 us. Best GFLOPs: 1058.5948
2024-04-29 00:53:32 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_1] Trial #679: GFLOPs: 840.5244. Time: 275.4377 us. Best GFLOPs: 1058.5948
2024-04-29 00:53:32 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_1] Trial #680: GFLOPs: 918.0896. Time: 252.1672 us. Best GFLOPs: 1058.5948
2024-04-29 00:53:32 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_1] Trial #681: GFLOPs: 844.9546. Time: 273.9935 us. Best GFLOPs: 1058.5948
2024-04-29 00:53:32 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_1] Trial #682: GFLOPs: 757.9050. Time: 305.4632 us. Best GFLOPs: 1058.5948
2024-04-29 00:53:32 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_1] Trial #683: GFLOPs: 864.0399. Time: 267.9414 us. Best GFLOPs: 1058.5948
2024-04-29 00:53:32 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_1] Trial #684: GFLOPs: 897.5004. Time: 257.9520 us. Best GFLOPs: 1058.5948
2024-04-29 00:53:32 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_1] Trial #685: GFLOPs: 795.3275. Time: 291.0902 us. Best GFLOPs: 1058.5948
2024-04-29 00:53:32 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_1] Trial #686: GFLOPs: 847.8919. Time: 273.0443 us. Best GFLOPs: 1058.5948
2024-04-29 00:53:32 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_1] Trial #687: GFLOPs: 833.0732. Time: 277.9012 us. Best GFLOPs: 1058.5948
2024-04-29 00:53:32 [INFO] [task_scheduler.cc:121] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_1] Trial #688: Error in building:
LocalBuilder: Timeout, killed after 30.0 seconds
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(1), T.int64(28), T.int64(28), T.int64(128)), "float32"), p1: T.Buffer((T.int64(4), T.int64(1), T.int64(3), T.int64(3), T.int64(128), T.int64(32)), "float32"), p2: T.Buffer((T.int64(1), T.int64(4), T.int64(1), T.int64(1), T.int64(32)), "float32"), p3: T.Buffer((T.int64(1), T.int64(4), T.int64(28), T.int64(28), T.int64(32)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(4), T.int64(28), T.int64(28), T.int64(32)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        data_pad = T.alloc_buffer((T.int64(1), T.int64(1), T.int64(30), T.int64(30), T.int64(128)))
        conv2d_NCHWc = T.alloc_buffer((T.int64(1), T.int64(4), T.int64(28), T.int64(28), T.int64(32)))
        for n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused_fused in T.parallel(T.int64(224), annotations={"pragma_auto_unroll_max_step": 512, "pragma_unroll_explicit": 1}):
            for ax0, ax1, ax2, ax3, ax4 in T.grid(T.int64(1), T.int64(1), T.int64(9), T.int64(3), T.int64(128)):
                with T.block("data_pad"):
                    v_i0, v_i1 = T.axis.remap("SS", [ax0, ax1])
                    v_i2 = T.axis.spatial(T.int64(30), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused_fused // T.int64(112) * T.int64(14) + n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused_fused % T.int64(56) // T.int64(28) * T.int64(7) + ax2)
                    v_i3 = T.axis.spatial(T.int64(30), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused_fused % T.int64(112) // T.int64(56) * T.int64(14) + n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused_fused % T.int64(28) // T.int64(2) + ax3)
                    v_i4 = T.axis.spatial(T.int64(128), ax4)
                    T.reads(p0[v_i0, v_i1, v_i2 - T.int64(1), v_i3 - T.int64(1), v_i4])
                    T.writes(data_pad[v_i0, v_i1, v_i2, v_i3, v_i4])
                    data_pad[v_i0, v_i1, v_i2, v_i3, v_i4] = T.if_then_else(T.int64(1) <= v_i2 and v_i2 < T.int64(29) and T.int64(1) <= v_i3 and v_i3 < T.int64(29), p0[v_i0, v_i1, v_i2 - T.int64(1), v_i3 - T.int64(1), v_i4], T.float32(0))
            for n_2_init, oc_chunk_2_init, oh_2_init, ow_2_init, oc_block_2_init, n_3_init, oc_chunk_3_init, oh_3_init, ow_3_init, oc_block_3_init in T.grid(T.int64(1), T.int64(4), T.int64(1), T.int64(1), T.int64(16), T.int64(1), T.int64(1), T.int64(7), T.int64(1), T.int64(1)):
                with T.block("conv2d_NCHWc_init"):
                    v_n = T.axis.spatial(T.int64(1), n_2_init + n_3_init)
                    v_oc_chunk = T.axis.spatial(T.int64(4), oc_chunk_2_init + oc_chunk_3_init)
                    v_oh = T.axis.spatial(T.int64(28), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused_fused // T.int64(112) * T.int64(14) + n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused_fused % T.int64(56) // T.int64(28) * T.int64(7) + oh_2_init * T.int64(7) + oh_3_init)
                    v_ow = T.axis.spatial(T.int64(28), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused_fused % T.int64(112) // T.int64(56) * T.int64(14) + n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused_fused % T.int64(28) // T.int64(2) + ow_2_init + ow_3_init)
                    v_oc_block = T.axis.spatial(T.int64(32), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused_fused % T.int64(2) * T.int64(16) + oc_block_2_init + oc_block_3_init)
                    T.reads()
                    T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                    T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                    conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = T.float32(0)
            for ic_0, kh_0, kw_0, n_2, oc_chunk_2, oh_2, ow_2, oc_block_2, ic_1, kh_1, kw_1, n_3, oc_chunk_3, oh_3, ow_3, oc_block_3 in T.grid(T.int64(32), T.int64(1), T.int64(3), T.int64(1), T.int64(4), T.int64(1), T.int64(1), T.int64(16), T.int64(4), T.int64(3), T.int64(1), T.int64(1), T.int64(1), T.int64(7), T.int64(1), T.int64(1)):
                with T.block("conv2d_NCHWc_update"):
                    v_n = T.axis.spatial(T.int64(1), n_2 + n_3)
                    v_oc_chunk = T.axis.spatial(T.int64(4), oc_chunk_2 + oc_chunk_3)
                    v_oh = T.axis.spatial(T.int64(28), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused_fused // T.int64(112) * T.int64(14) + n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused_fused % T.int64(56) // T.int64(28) * T.int64(7) + oh_2 * T.int64(7) + oh_3)
                    v_ow = T.axis.spatial(T.int64(28), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused_fused % T.int64(112) // T.int64(56) * T.int64(14) + n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused_fused % T.int64(28) // T.int64(2) + ow_2 + ow_3)
                    v_oc_block = T.axis.spatial(T.int64(32), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused_fused % T.int64(2) * T.int64(16) + oc_block_2 + oc_block_3)
                    v_ic = T.axis.reduce(T.int64(128), ic_0 * T.int64(4) + ic_1)
                    v_kh = T.axis.reduce(T.int64(3), kh_0 * T.int64(3) + kh_1)
                    v_kw = T.axis.reduce(T.int64(3), kw_0 + kw_1)
                    T.reads(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block], data_pad[v_n, v_ic // T.int64(128), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(128)], p1[v_oc_chunk, v_ic // T.int64(128), v_kh, v_kw, v_ic % T.int64(128), v_oc_block])
                    T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                    T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                    conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] + data_pad[v_n, v_ic // T.int64(128), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(128)] * p1[v_oc_chunk, v_ic // T.int64(128), v_kh, v_kw, v_ic % T.int64(128), v_oc_block]
            for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(4), T.int64(7), T.int64(1)):
                for ax4_fused in T.vectorized(T.int64(16)):
                    with T.block("T_relu"):
                        v_ax0, v_ax1 = T.axis.remap("SS", [ax0, ax1])
                        v_ax2 = T.axis.spatial(T.int64(28), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused_fused // T.int64(112) * T.int64(14) + n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused_fused % T.int64(56) // T.int64(28) * T.int64(7) + ax2)
                        v_ax3 = T.axis.spatial(T.int64(28), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused_fused % T.int64(112) // T.int64(56) * T.int64(14) + n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused_fused % T.int64(28) // T.int64(2) + ax3)
                        v_ax4 = T.axis.spatial(T.int64(32), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused_fused % T.int64(2) * T.int64(16) + ax4_fused)
                        T.reads(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4], p3[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                        T.writes(T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                        T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.max(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] + p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4] + p3[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], T.float32(0))
b0 = sch.get_block(name="data_pad", func_name="main")
b1 = sch.get_block(name="conv2d_NCHWc", func_name="main")
b2 = sch.get_block(name="T_add", func_name="main")
b3 = sch.get_block(name="T_add_1", func_name="main")
b4 = sch.get_block(name="root", func_name="main")
sch.compute_inline(block=b3)
sch.compute_inline(block=b2)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSRSRS")
l5, l6, l7, l8, l9, l10, l11, l12 = sch.get_loops(block=b1)
v13, v14, v15, v16 = sch.sample_perfect_tile(loop=l5, n=4, max_innermost_factor=64, decision=[1, 1, 1, 1])
l17, l18, l19, l20 = sch.split(loop=l5, factors=[v13, v14, v15, v16], preserve_unit_iters=True)
v21, v22, v23, v24 = sch.sample_perfect_tile(loop=l6, n=4, max_innermost_factor=64, decision=[1, 1, 4, 1])
l25, l26, l27, l28 = sch.split(loop=l6, factors=[v21, v22, v23, v24], preserve_unit_iters=True)
v29, v30, v31, v32 = sch.sample_perfect_tile(loop=l7, n=4, max_innermost_factor=64, decision=[2, 2, 1, 7])
l33, l34, l35, l36 = sch.split(loop=l7, factors=[v29, v30, v31, v32], preserve_unit_iters=True)
v37, v38, v39, v40 = sch.sample_perfect_tile(loop=l8, n=4, max_innermost_factor=64, decision=[2, 14, 1, 1])
l41, l42, l43, l44 = sch.split(loop=l8, factors=[v37, v38, v39, v40], preserve_unit_iters=True)
v45, v46, v47, v48 = sch.sample_perfect_tile(loop=l9, n=4, max_innermost_factor=64, decision=[1, 2, 16, 1])
l49, l50, l51, l52 = sch.split(loop=l9, factors=[v45, v46, v47, v48], preserve_unit_iters=True)
v53, v54 = sch.sample_perfect_tile(loop=l10, n=2, max_innermost_factor=64, decision=[32, 4])
l55, l56 = sch.split(loop=l10, factors=[v53, v54], preserve_unit_iters=True)
v57, v58 = sch.sample_perfect_tile(loop=l11, n=2, max_innermost_factor=64, decision=[1, 3])
l59, l60 = sch.split(loop=l11, factors=[v57, v58], preserve_unit_iters=True)
v61, v62 = sch.sample_perfect_tile(loop=l12, n=2, max_innermost_factor=64, decision=[3, 1])
l63, l64 = sch.split(loop=l12, factors=[v61, v62], preserve_unit_iters=True)
sch.reorder(l17, l25, l33, l41, l49, l18, l26, l34, l42, l50, l55, l59, l63, l19, l27, l35, l43, l51, l56, l60, l64, l20, l28, l36, l44, l52)
b65, = sch.get_consumers(block=b1)
sch.reverse_compute_at(block=b65, loop=l50, preserve_unit_loops=True, index=-1)
sch.annotate(block_or_loop=b4, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b4, ann_key="meta_schedule.vectorize", ann_val=64)
v66 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b4, ann_key="meta_schedule.unroll_explicit", ann_val=v66)
l67 = sch.sample_compute_location(block=b0, decision=9)
sch.compute_at(block=b0, loop=l67, preserve_unit_loops=True, index=-1)
sch.enter_postproc()
b68 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b68, ann_key="meta_schedule.parallel")
sch.unannotate(block_or_loop=b68, ann_key="meta_schedule.vectorize")
sch.unannotate(block_or_loop=b68, ann_key="meta_schedule.unroll_explicit")
b69, b70, b71 = sch.get_child_blocks(b68)
l72, l73, l74, l75, l76, l77, l78, l79, l80, l81, l82, l83, l84, l85, l86 = sch.get_loops(block=b69)
l87 = sch.fuse(l72, l73, l74, l75, l76, l77, l78, l79, l80, l81, preserve_unit_iters=True)
sch.parallel(loop=l87)
l88, l89, l90, l91, l92, l93, l94, l95, l96, l97, l98, l99, l100, l101, l102, l103, l104 = sch.get_loops(block=b70)
l105 = sch.fuse(l88, preserve_unit_iters=True)
sch.parallel(loop=l105)
sch.annotate(block_or_loop=l105, ann_key="pragma_auto_unroll_max_step", ann_val=512)
sch.annotate(block_or_loop=l105, ann_key="pragma_unroll_explicit", ann_val=1)
l106, l107, l108, l109, l110, l111 = sch.get_loops(block=b71)
l112 = sch.fuse(l111, preserve_unit_iters=True)
sch.vectorize(loop=l112)
b113 = sch.get_block(name="conv2d_NCHWc", func_name="main")
l114, l115, l116, l117, l118, l119, l120, l121, l122, l123, l124, l125, l126, l127, l128, l129, l130 = sch.get_loops(block=b113)
b131 = sch.decompose_reduction(block=b113, loop=l115)
2024-04-29 00:53:32 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_1] Trial #689: GFLOPs: 952.4296. Time: 243.0752 us. Best GFLOPs: 1058.5948
2024-04-29 00:53:32 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_1] Trial #690: GFLOPs: 865.1671. Time: 267.5923 us. Best GFLOPs: 1058.5948
2024-04-29 00:53:32 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_1] Trial #691: GFLOPs: 756.1503. Time: 306.1720 us. Best GFLOPs: 1058.5948
2024-04-29 00:53:32 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_1] Trial #692: GFLOPs: 675.4735. Time: 342.7404 us. Best GFLOPs: 1058.5948
2024-04-29 00:53:32 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_1] Trial #693: GFLOPs: 709.2553. Time: 326.4157 us. Best GFLOPs: 1058.5948
2024-04-29 00:53:32 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_1] Trial #694: GFLOPs: 710.9856. Time: 325.6213 us. Best GFLOPs: 1058.5948
2024-04-29 00:53:32 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_1] Trial #695: GFLOPs: 667.9025. Time: 346.6255 us. Best GFLOPs: 1058.5948
2024-04-29 00:53:32 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_1] Trial #696: GFLOPs: 941.5500. Time: 245.8840 us. Best GFLOPs: 1058.5948
2024-04-29 00:53:32 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_1] Trial #697: GFLOPs: 766.9292. Time: 301.8689 us. Best GFLOPs: 1058.5948
2024-04-29 00:53:32 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_1] Trial #698: GFLOPs: 1031.2214. Time: 224.5028 us. Best GFLOPs: 1058.5948
2024-04-29 00:53:32 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_1] Trial #699: GFLOPs: 783.6016. Time: 295.4462 us. Best GFLOPs: 1058.5948
2024-04-29 00:53:32 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_1] Trial #700: GFLOPs: 807.1489. Time: 286.8270 us. Best GFLOPs: 1058.5948
2024-04-29 00:53:32 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_1] Trial #701: GFLOPs: 934.3877. Time: 247.7687 us. Best GFLOPs: 1058.5948
2024-04-29 00:53:32 [INFO] [task_scheduler.cc:121] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_1] Trial #702: Error in building:
LocalBuilder: Timeout, killed after 30.0 seconds
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(1), T.int64(28), T.int64(28), T.int64(128)), "float32"), p1: T.Buffer((T.int64(4), T.int64(1), T.int64(3), T.int64(3), T.int64(128), T.int64(32)), "float32"), p2: T.Buffer((T.int64(1), T.int64(4), T.int64(1), T.int64(1), T.int64(32)), "float32"), p3: T.Buffer((T.int64(1), T.int64(4), T.int64(28), T.int64(28), T.int64(32)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(4), T.int64(28), T.int64(28), T.int64(32)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        conv2d_NCHWc = T.alloc_buffer((T.int64(1), T.int64(4), T.int64(28), T.int64(28), T.int64(32)))
        for n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused in T.parallel(T.int64(784), annotations={"pragma_auto_unroll_max_step": 512, "pragma_unroll_explicit": 1}):
            for n_2_init, oc_chunk_2_init, oh_2_init, ow_2_init, oc_block_2_init, n_3_init, oc_chunk_3_init, oh_3_init, ow_3_init in T.grid(T.int64(1), T.int64(1), T.int64(1), T.int64(4), T.int64(4), T.int64(1), T.int64(2), T.int64(1), T.int64(1)):
                for oc_block_3_fused_init in T.vectorized(T.int64(4)):
                    with T.block("conv2d_NCHWc_init"):
                        v_n = T.axis.spatial(T.int64(1), n_2_init + n_3_init)
                        v_oc_chunk = T.axis.spatial(T.int64(4), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused // T.int64(392) * T.int64(2) + oc_chunk_2_init * T.int64(2) + oc_chunk_3_init)
                        v_oh = T.axis.spatial(T.int64(28), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused % T.int64(392) // T.int64(14) + oh_2_init + oh_3_init)
                        v_ow = T.axis.spatial(T.int64(28), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused % T.int64(14) // T.int64(2) * T.int64(4) + ow_2_init + ow_3_init)
                        v_oc_block = T.axis.spatial(T.int64(32), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused % T.int64(2) * T.int64(16) + oc_block_2_init * T.int64(4) + oc_block_3_fused_init)
                        T.reads()
                        T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                        T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                        conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = T.float32(0)
            for ic_0, kh_0, kw_0, n_2, oc_chunk_2, oh_2, ow_2, oc_block_2, ic_1, kh_1, kw_1, n_3, oc_chunk_3, oh_3, ow_3 in T.grid(T.int64(8), T.int64(3), T.int64(3), T.int64(1), T.int64(1), T.int64(1), T.int64(4), T.int64(4), T.int64(16), T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(1), T.int64(1)):
                for oc_block_3_fused in T.vectorized(T.int64(4)):
                    with T.block("conv2d_NCHWc_update"):
                        v_n = T.axis.spatial(T.int64(1), n_2 + n_3)
                        v_oc_chunk = T.axis.spatial(T.int64(4), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused // T.int64(392) * T.int64(2) + oc_chunk_2 * T.int64(2) + oc_chunk_3)
                        v_oh = T.axis.spatial(T.int64(28), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused % T.int64(392) // T.int64(14) + oh_2 + oh_3)
                        v_ow = T.axis.spatial(T.int64(28), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused % T.int64(14) // T.int64(2) * T.int64(4) + ow_2 + ow_3)
                        v_oc_block = T.axis.spatial(T.int64(32), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused % T.int64(2) * T.int64(16) + oc_block_2 * T.int64(4) + oc_block_3_fused)
                        v_ic = T.axis.reduce(T.int64(128), ic_0 * T.int64(16) + ic_1)
                        v_kh = T.axis.reduce(T.int64(3), kh_0 + kh_1)
                        v_kw = T.axis.reduce(T.int64(3), kw_0 + kw_1)
                        T.reads(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block], p0[v_n, v_ic // T.int64(128), v_oh + v_kh - T.int64(1), v_ow + v_kw - T.int64(1), v_ic % T.int64(128)], p1[v_oc_chunk, v_ic // T.int64(128), v_kh, v_kw, v_ic % T.int64(128), v_oc_block])
                        T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                        T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                        conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] + T.if_then_else(T.int64(1) <= v_oh + v_kh and v_oh + v_kh < T.int64(29) and T.int64(1) <= v_ow + v_kw and v_ow + v_kw < T.int64(29), p0[v_n, v_ic // T.int64(128), v_oh + v_kh - T.int64(1), v_ow + v_kw - T.int64(1), v_ic % T.int64(128)], T.float32(0)) * p1[v_oc_chunk, v_ic // T.int64(128), v_kh, v_kw, v_ic % T.int64(128), v_oc_block]
            for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(2), T.int64(1), T.int64(4)):
                for ax4_fused in T.vectorized(T.int64(16)):
                    with T.block("T_relu"):
                        v_ax0 = T.axis.spatial(T.int64(1), ax0)
                        v_ax1 = T.axis.spatial(T.int64(4), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused // T.int64(392) * T.int64(2) + ax1)
                        v_ax2 = T.axis.spatial(T.int64(28), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused % T.int64(392) // T.int64(14) + ax2)
                        v_ax3 = T.axis.spatial(T.int64(28), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused % T.int64(14) // T.int64(2) * T.int64(4) + ax3)
                        v_ax4 = T.axis.spatial(T.int64(32), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused % T.int64(2) * T.int64(16) + ax4_fused)
                        T.reads(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4], p3[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                        T.writes(T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                        T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.max(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] + p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4] + p3[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], T.float32(0))
b0 = sch.get_block(name="data_pad", func_name="main")
b1 = sch.get_block(name="conv2d_NCHWc", func_name="main")
b2 = sch.get_block(name="T_add", func_name="main")
b3 = sch.get_block(name="T_add_1", func_name="main")
b4 = sch.get_block(name="root", func_name="main")
sch.compute_inline(block=b3)
sch.compute_inline(block=b2)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSRSRS")
l5, l6, l7, l8, l9, l10, l11, l12 = sch.get_loops(block=b1)
v13, v14, v15, v16 = sch.sample_perfect_tile(loop=l5, n=4, max_innermost_factor=64, decision=[1, 1, 1, 1])
l17, l18, l19, l20 = sch.split(loop=l5, factors=[v13, v14, v15, v16], preserve_unit_iters=True)
v21, v22, v23, v24 = sch.sample_perfect_tile(loop=l6, n=4, max_innermost_factor=64, decision=[2, 1, 1, 2])
l25, l26, l27, l28 = sch.split(loop=l6, factors=[v21, v22, v23, v24], preserve_unit_iters=True)
v29, v30, v31, v32 = sch.sample_perfect_tile(loop=l7, n=4, max_innermost_factor=64, decision=[2, 14, 1, 1])
l33, l34, l35, l36 = sch.split(loop=l7, factors=[v29, v30, v31, v32], preserve_unit_iters=True)
v37, v38, v39, v40 = sch.sample_perfect_tile(loop=l8, n=4, max_innermost_factor=64, decision=[1, 7, 4, 1])
l41, l42, l43, l44 = sch.split(loop=l8, factors=[v37, v38, v39, v40], preserve_unit_iters=True)
v45, v46, v47, v48 = sch.sample_perfect_tile(loop=l9, n=4, max_innermost_factor=64, decision=[1, 2, 4, 4])
l49, l50, l51, l52 = sch.split(loop=l9, factors=[v45, v46, v47, v48], preserve_unit_iters=True)
v53, v54 = sch.sample_perfect_tile(loop=l10, n=2, max_innermost_factor=64, decision=[8, 16])
l55, l56 = sch.split(loop=l10, factors=[v53, v54], preserve_unit_iters=True)
v57, v58 = sch.sample_perfect_tile(loop=l11, n=2, max_innermost_factor=64, decision=[3, 1])
l59, l60 = sch.split(loop=l11, factors=[v57, v58], preserve_unit_iters=True)
v61, v62 = sch.sample_perfect_tile(loop=l12, n=2, max_innermost_factor=64, decision=[3, 1])
l63, l64 = sch.split(loop=l12, factors=[v61, v62], preserve_unit_iters=True)
sch.reorder(l17, l25, l33, l41, l49, l18, l26, l34, l42, l50, l55, l59, l63, l19, l27, l35, l43, l51, l56, l60, l64, l20, l28, l36, l44, l52)
b65, = sch.get_consumers(block=b1)
sch.reverse_compute_at(block=b65, loop=l50, preserve_unit_loops=True, index=-1)
sch.annotate(block_or_loop=b4, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b4, ann_key="meta_schedule.vectorize", ann_val=64)
v66 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b4, ann_key="meta_schedule.unroll_explicit", ann_val=v66)
l67 = sch.sample_compute_location(block=b0, decision=-2)
sch.compute_at(block=b0, loop=l67, preserve_unit_loops=True, index=-1)
sch.enter_postproc()
b68 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b68, ann_key="meta_schedule.parallel")
sch.unannotate(block_or_loop=b68, ann_key="meta_schedule.vectorize")
sch.unannotate(block_or_loop=b68, ann_key="meta_schedule.unroll_explicit")
b69, b70 = sch.get_child_blocks(b68)
l71, l72, l73, l74, l75, l76, l77, l78, l79, l80, l81, l82, l83, l84, l85, l86, l87, l88, l89, l90, l91, l92, l93, l94, l95, l96 = sch.get_loops(block=b69)
l97 = sch.fuse(l71, l72, l73, l74, l75, l76, l77, l78, l79, l80, preserve_unit_iters=True)
sch.parallel(loop=l97)
l98 = sch.fuse(l96, preserve_unit_iters=True)
sch.vectorize(loop=l98)
sch.annotate(block_or_loop=l97, ann_key="pragma_auto_unroll_max_step", ann_val=512)
sch.annotate(block_or_loop=l97, ann_key="pragma_unroll_explicit", ann_val=1)
l99, l100, l101, l102, l103, l104 = sch.get_loops(block=b70)
l105 = sch.fuse(l104, preserve_unit_iters=True)
sch.vectorize(loop=l105)
b106 = sch.get_block(name="conv2d_NCHWc", func_name="main")
l107, l108, l109, l110, l111, l112, l113, l114, l115, l116, l117, l118, l119, l120, l121, l122, l123 = sch.get_loops(block=b106)
b124 = sch.decompose_reduction(block=b106, loop=l108)
2024-04-29 00:53:32 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_1] Trial #703: GFLOPs: 32.2216. Time: 7184.9891 us. Best GFLOPs: 1058.5948
2024-04-29 00:53:32 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_1] Trial #704: GFLOPs: 40.6419. Time: 5696.3857 us. Best GFLOPs: 1058.5948
2024-04-29 01:44:55 [INFO] [evolutionary_search.cc:713] Generating candidates......
2024-04-29 01:44:56 [INFO] [evolutionary_search.cc:715] Picked top 102 candidate(s) from database
2024-04-29 01:45:00 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x3858de8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x3c39958)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0xa2a8408)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x3f4f298)]: 0 failure(s)
2024-04-29 01:45:00 [INFO] [evolutionary_search.cc:723] Sampled 410 candidate(s)
2024-04-29 01:45:13 [INFO] [evolutionary_search.cc:621] Evolve iter #0 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x3858de8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x3c39958)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0xa2a8408)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x3f4f298)]: 0 failure(s)
2024-04-29 01:45:24 [INFO] [evolutionary_search.cc:621] Evolve iter #1 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x3858de8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x3c39958)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0xa2a8408)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x3f4f298)]: 0 failure(s)
2024-04-29 01:45:36 [INFO] [evolutionary_search.cc:621] Evolve iter #2 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x3858de8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x3c39958)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0xa2a8408)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x3f4f298)]: 0 failure(s)
2024-04-29 01:45:48 [INFO] [evolutionary_search.cc:621] Evolve iter #3 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x3858de8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x3c39958)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0xa2a8408)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x3f4f298)]: 0 failure(s)
2024-04-29 01:45:55 [INFO] [evolutionary_search.cc:649] Scores of the best 64 candidates:
[1 : 16]:	0.9893  0.9739  0.9727  0.9420  0.9311  0.9262  0.9262  0.9221  0.9169  0.9169  0.9152  0.9117  0.9100  0.9084  0.8970  0.8955
[17 : 32]:	0.8946  0.8935  0.8922  0.8845  0.8784  0.8761  0.8747  0.8598  0.8598  0.8594  0.8559  0.8549  0.8506  0.8504  0.8494  0.8484
[33 : 48]:	0.8484  0.8421  0.8402  0.8397  0.8397  0.8356  0.8332  0.8327  0.8327  0.8315  0.8308  0.8295  0.8295  0.8172  0.8159  0.8116
[49 : 64]:	0.8110  0.8108  0.8107  0.8093  0.8082  0.8057  0.8057  0.8056  0.7948  0.7929  0.7849  0.7816  0.7791  0.7772  0.7767  0.7753
2024-04-29 01:45:55 [INFO] [evolutionary_search.cc:727] Got 64 candidate(s) with evolutionary search
2024-04-29 01:45:55 [INFO] [evolutionary_search.cc:730] Sending 64 candidates(s) for measurement
2024-04-29 01:47:38 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_1] Trial #705: GFLOPs: 1061.9044. Time: 218.0159 us. Best GFLOPs: 1061.9044
2024-04-29 01:47:38 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_1] Trial #706: GFLOPs: 1036.4430. Time: 223.3717 us. Best GFLOPs: 1061.9044
2024-04-29 01:47:38 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_1] Trial #707: GFLOPs: 984.3008. Time: 235.2046 us. Best GFLOPs: 1061.9044
2024-04-29 01:47:38 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_1] Trial #708: GFLOPs: 936.1938. Time: 247.2908 us. Best GFLOPs: 1061.9044
2024-04-29 01:47:38 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_1] Trial #709: GFLOPs: 995.1280. Time: 232.6455 us. Best GFLOPs: 1061.9044
2024-04-29 01:47:38 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_1] Trial #710: GFLOPs: 959.3412. Time: 241.3240 us. Best GFLOPs: 1061.9044
2024-04-29 01:47:38 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_1] Trial #711: GFLOPs: 930.7599. Time: 248.7345 us. Best GFLOPs: 1061.9044
2024-04-29 01:47:38 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_1] Trial #712: GFLOPs: 1039.2531. Time: 222.7677 us. Best GFLOPs: 1061.9044
2024-04-29 01:47:38 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_1] Trial #713: GFLOPs: 967.0227. Time: 239.4071 us. Best GFLOPs: 1061.9044
2024-04-29 01:47:38 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_1] Trial #714: GFLOPs: 970.5119. Time: 238.5463 us. Best GFLOPs: 1061.9044
2024-04-29 01:47:38 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_1] Trial #715: GFLOPs: 965.4715. Time: 239.7917 us. Best GFLOPs: 1061.9044
2024-04-29 01:47:38 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_1] Trial #716: GFLOPs: 965.7231. Time: 239.7292 us. Best GFLOPs: 1061.9044
2024-04-29 01:47:38 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_1] Trial #717: GFLOPs: 984.2572. Time: 235.2150 us. Best GFLOPs: 1061.9044
2024-04-29 01:47:38 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_1] Trial #718: GFLOPs: 535.9193. Time: 431.9905 us. Best GFLOPs: 1061.9044
2024-04-29 01:47:38 [INFO] [task_scheduler.cc:121] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_1] Trial #719: Error in building:
LocalBuilder: Timeout, killed after 30.0 seconds
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(1), T.int64(28), T.int64(28), T.int64(128)), "float32"), p1: T.Buffer((T.int64(4), T.int64(1), T.int64(3), T.int64(3), T.int64(128), T.int64(32)), "float32"), p2: T.Buffer((T.int64(1), T.int64(4), T.int64(1), T.int64(1), T.int64(32)), "float32"), p3: T.Buffer((T.int64(1), T.int64(4), T.int64(28), T.int64(28), T.int64(32)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(4), T.int64(28), T.int64(28), T.int64(32)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        data_pad = T.alloc_buffer((T.int64(1), T.int64(1), T.int64(30), T.int64(30), T.int64(128)))
        conv2d_NCHWc = T.alloc_buffer((T.int64(1), T.int64(4), T.int64(28), T.int64(28), T.int64(32)))
        for n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_fused_fused in T.parallel(T.int64(112), annotations={"pragma_auto_unroll_max_step": 512, "pragma_unroll_explicit": 1}):
            for ax0, ax1, ax2, ax3, ax4 in T.grid(T.int64(1), T.int64(1), T.int64(9), T.int64(3), T.int64(128)):
                with T.block("data_pad"):
                    v_i0, v_i1 = T.axis.remap("SS", [ax0, ax1])
                    v_i2 = T.axis.spatial(T.int64(30), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_fused_fused // T.int64(56) * T.int64(14) + n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_fused_fused % T.int64(2) * T.int64(7) + ax2)
                    v_i3 = T.axis.spatial(T.int64(30), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_fused_fused % T.int64(56) // T.int64(2) + ax3)
                    v_i4 = T.axis.spatial(T.int64(128), ax4)
                    T.reads(p0[v_i0, v_i1, v_i2 - T.int64(1), v_i3 - T.int64(1), v_i4])
                    T.writes(data_pad[v_i0, v_i1, v_i2, v_i3, v_i4])
                    data_pad[v_i0, v_i1, v_i2, v_i3, v_i4] = T.if_then_else(T.int64(1) <= v_i2 and v_i2 < T.int64(29) and T.int64(1) <= v_i3 and v_i3 < T.int64(29), p0[v_i0, v_i1, v_i2 - T.int64(1), v_i3 - T.int64(1), v_i4], T.float32(0))
            for ow_1, oc_block_1 in T.grid(T.int64(1), T.int64(1)):
                for n_2_init, oc_chunk_2_init, oh_2_init, ow_2_init, oc_block_2_init, n_3_init, oc_chunk_3_init, oh_3_init, ow_3_init, oc_block_3_init in T.grid(T.int64(1), T.int64(4), T.int64(1), T.int64(1), T.int64(32), T.int64(1), T.int64(1), T.int64(7), T.int64(1), T.int64(1)):
                    with T.block("conv2d_NCHWc_init"):
                        v_n = T.axis.spatial(T.int64(1), n_2_init + n_3_init)
                        v_oc_chunk = T.axis.spatial(T.int64(4), oc_chunk_2_init + oc_chunk_3_init)
                        v_oh = T.axis.spatial(T.int64(28), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_fused_fused // T.int64(56) * T.int64(14) + n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_fused_fused % T.int64(2) * T.int64(7) + oh_2_init * T.int64(7) + oh_3_init)
                        v_ow = T.axis.spatial(T.int64(28), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_fused_fused % T.int64(56) // T.int64(2) + ow_1 + ow_2_init + ow_3_init)
                        v_oc_block = T.axis.spatial(T.int64(32), oc_block_1 * T.int64(32) + oc_block_2_init + oc_block_3_init)
                        T.reads()
                        T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                        T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                        conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = T.float32(0)
                for ic_0, kh_0, kw_0, n_2, oc_chunk_2, oh_2, ow_2, oc_block_2, ic_1, kh_1, kw_1, n_3, oc_chunk_3, oh_3, ow_3, oc_block_3 in T.grid(T.int64(16), T.int64(1), T.int64(3), T.int64(1), T.int64(4), T.int64(1), T.int64(1), T.int64(32), T.int64(8), T.int64(3), T.int64(1), T.int64(1), T.int64(1), T.int64(7), T.int64(1), T.int64(1)):
                    with T.block("conv2d_NCHWc_update"):
                        v_n = T.axis.spatial(T.int64(1), n_2 + n_3)
                        v_oc_chunk = T.axis.spatial(T.int64(4), oc_chunk_2 + oc_chunk_3)
                        v_oh = T.axis.spatial(T.int64(28), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_fused_fused // T.int64(56) * T.int64(14) + n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_fused_fused % T.int64(2) * T.int64(7) + oh_2 * T.int64(7) + oh_3)
                        v_ow = T.axis.spatial(T.int64(28), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_fused_fused % T.int64(56) // T.int64(2) + ow_1 + ow_2 + ow_3)
                        v_oc_block = T.axis.spatial(T.int64(32), oc_block_1 * T.int64(32) + oc_block_2 + oc_block_3)
                        v_ic = T.axis.reduce(T.int64(128), ic_0 * T.int64(8) + ic_1)
                        v_kh = T.axis.reduce(T.int64(3), kh_0 * T.int64(3) + kh_1)
                        v_kw = T.axis.reduce(T.int64(3), kw_0 + kw_1)
                        T.reads(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block], data_pad[v_n, v_ic // T.int64(128), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(128)], p1[v_oc_chunk, v_ic // T.int64(128), v_kh, v_kw, v_ic % T.int64(128), v_oc_block])
                        T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                        T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                        conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] + data_pad[v_n, v_ic // T.int64(128), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(128)] * p1[v_oc_chunk, v_ic // T.int64(128), v_kh, v_kw, v_ic % T.int64(128), v_oc_block]
                for ax0, ax1, ax2 in T.grid(T.int64(1), T.int64(4), T.int64(7)):
                    for ax3_ax4_fused in T.vectorized(T.int64(32)):
                        with T.block("T_relu"):
                            v_ax0, v_ax1 = T.axis.remap("SS", [ax0, ax1])
                            v_ax2 = T.axis.spatial(T.int64(28), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_fused_fused // T.int64(56) * T.int64(14) + n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_fused_fused % T.int64(2) * T.int64(7) + ax2)
                            v_ax3 = T.axis.spatial(T.int64(28), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_fused_fused % T.int64(56) // T.int64(2))
                            v_ax4 = T.axis.spatial(T.int64(32), ax3_ax4_fused)
                            T.reads(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4], p3[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                            T.writes(T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                            T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.max(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] + p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4] + p3[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], T.float32(0))
b0 = sch.get_block(name="data_pad", func_name="main")
b1 = sch.get_block(name="conv2d_NCHWc", func_name="main")
b2 = sch.get_block(name="T_add", func_name="main")
b3 = sch.get_block(name="T_add_1", func_name="main")
b4 = sch.get_block(name="root", func_name="main")
sch.compute_inline(block=b3)
sch.compute_inline(block=b2)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSRSRS")
l5, l6, l7, l8, l9, l10, l11, l12 = sch.get_loops(block=b1)
v13, v14, v15, v16 = sch.sample_perfect_tile(loop=l5, n=4, max_innermost_factor=64, decision=[1, 1, 1, 1])
l17, l18, l19, l20 = sch.split(loop=l5, factors=[v13, v14, v15, v16], preserve_unit_iters=True)
v21, v22, v23, v24 = sch.sample_perfect_tile(loop=l6, n=4, max_innermost_factor=64, decision=[1, 1, 4, 1])
l25, l26, l27, l28 = sch.split(loop=l6, factors=[v21, v22, v23, v24], preserve_unit_iters=True)
v29, v30, v31, v32 = sch.sample_perfect_tile(loop=l7, n=4, max_innermost_factor=64, decision=[2, 2, 1, 7])
l33, l34, l35, l36 = sch.split(loop=l7, factors=[v29, v30, v31, v32], preserve_unit_iters=True)
v37, v38, v39, v40 = sch.sample_perfect_tile(loop=l8, n=4, max_innermost_factor=64, decision=[28, 1, 1, 1])
l41, l42, l43, l44 = sch.split(loop=l8, factors=[v37, v38, v39, v40], preserve_unit_iters=True)
v45, v46, v47, v48 = sch.sample_perfect_tile(loop=l9, n=4, max_innermost_factor=64, decision=[1, 1, 32, 1])
l49, l50, l51, l52 = sch.split(loop=l9, factors=[v45, v46, v47, v48], preserve_unit_iters=True)
v53, v54 = sch.sample_perfect_tile(loop=l10, n=2, max_innermost_factor=64, decision=[16, 8])
l55, l56 = sch.split(loop=l10, factors=[v53, v54], preserve_unit_iters=True)
v57, v58 = sch.sample_perfect_tile(loop=l11, n=2, max_innermost_factor=64, decision=[1, 3])
l59, l60 = sch.split(loop=l11, factors=[v57, v58], preserve_unit_iters=True)
v61, v62 = sch.sample_perfect_tile(loop=l12, n=2, max_innermost_factor=64, decision=[3, 1])
l63, l64 = sch.split(loop=l12, factors=[v61, v62], preserve_unit_iters=True)
sch.reorder(l17, l25, l33, l41, l49, l18, l26, l34, l42, l50, l55, l59, l63, l19, l27, l35, l43, l51, l56, l60, l64, l20, l28, l36, l44, l52)
b65, = sch.get_consumers(block=b1)
sch.reverse_compute_at(block=b65, loop=l50, preserve_unit_loops=True, index=-1)
sch.annotate(block_or_loop=b4, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b4, ann_key="meta_schedule.vectorize", ann_val=64)
v66 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b4, ann_key="meta_schedule.unroll_explicit", ann_val=v66)
l67 = sch.sample_compute_location(block=b0, decision=7)
sch.compute_at(block=b0, loop=l67, preserve_unit_loops=True, index=-1)
sch.enter_postproc()
b68 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b68, ann_key="meta_schedule.parallel")
sch.unannotate(block_or_loop=b68, ann_key="meta_schedule.vectorize")
sch.unannotate(block_or_loop=b68, ann_key="meta_schedule.unroll_explicit")
b69, b70, b71 = sch.get_child_blocks(b68)
l72, l73, l74, l75, l76, l77, l78, l79, l80, l81, l82, l83, l84 = sch.get_loops(block=b69)
l85 = sch.fuse(l72, l73, l74, l75, l76, l77, l78, l79, preserve_unit_iters=True)
sch.parallel(loop=l85)
l86, l87, l88, l89, l90, l91, l92, l93, l94, l95, l96, l97, l98, l99, l100, l101, l102, l103, l104 = sch.get_loops(block=b70)
l105 = sch.fuse(l86, preserve_unit_iters=True)
sch.parallel(loop=l105)
sch.annotate(block_or_loop=l105, ann_key="pragma_auto_unroll_max_step", ann_val=512)
sch.annotate(block_or_loop=l105, ann_key="pragma_unroll_explicit", ann_val=1)
l106, l107, l108, l109, l110, l111, l112, l113 = sch.get_loops(block=b71)
l114 = sch.fuse(l112, l113, preserve_unit_iters=True)
sch.vectorize(loop=l114)
b115 = sch.get_block(name="conv2d_NCHWc", func_name="main")
l116, l117, l118, l119, l120, l121, l122, l123, l124, l125, l126, l127, l128, l129, l130, l131, l132, l133, l134 = sch.get_loops(block=b115)
b135 = sch.decompose_reduction(block=b115, loop=l119)
2024-04-29 01:47:38 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_1] Trial #720: GFLOPs: 960.4584. Time: 241.0433 us. Best GFLOPs: 1061.9044
2024-04-29 01:47:38 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_1] Trial #721: GFLOPs: 1057.7859. Time: 218.8648 us. Best GFLOPs: 1061.9044
2024-04-29 01:47:38 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_1] Trial #722: GFLOPs: 952.7027. Time: 243.0056 us. Best GFLOPs: 1061.9044
2024-04-29 01:47:38 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_1] Trial #723: GFLOPs: 952.1716. Time: 243.1411 us. Best GFLOPs: 1061.9044
2024-04-29 01:47:38 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_1] Trial #724: GFLOPs: 886.7916. Time: 261.0670 us. Best GFLOPs: 1061.9044
2024-04-29 01:47:38 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_1] Trial #725: GFLOPs: 995.6606. Time: 232.5211 us. Best GFLOPs: 1061.9044
2024-04-29 01:47:38 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_1] Trial #726: GFLOPs: 941.5885. Time: 245.8739 us. Best GFLOPs: 1061.9044
2024-04-29 01:47:38 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_1] Trial #727: GFLOPs: 924.5103. Time: 250.4159 us. Best GFLOPs: 1061.9044
2024-04-29 01:47:38 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_1] Trial #728: GFLOPs: 913.0851. Time: 253.5493 us. Best GFLOPs: 1061.9044
2024-04-29 01:47:38 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_1] Trial #729: GFLOPs: 913.2106. Time: 253.5144 us. Best GFLOPs: 1061.9044
2024-04-29 01:47:38 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_1] Trial #730: GFLOPs: 920.1658. Time: 251.5982 us. Best GFLOPs: 1061.9044
2024-04-29 01:47:38 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_1] Trial #731: GFLOPs: 955.6282. Time: 242.2617 us. Best GFLOPs: 1061.9044
2024-04-29 01:47:38 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_1] Trial #732: GFLOPs: 884.6182. Time: 261.7084 us. Best GFLOPs: 1061.9044
2024-04-29 01:47:38 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_1] Trial #733: GFLOPs: 815.9566. Time: 283.7309 us. Best GFLOPs: 1061.9044
2024-04-29 01:47:38 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_1] Trial #734: GFLOPs: 920.0369. Time: 251.6335 us. Best GFLOPs: 1061.9044
2024-04-29 01:47:38 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_1] Trial #735: GFLOPs: 980.8965. Time: 236.0209 us. Best GFLOPs: 1061.9044
2024-04-29 01:47:38 [INFO] [task_scheduler.cc:121] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_1] Trial #736: Error in building:
LocalBuilder: Timeout, killed after 30.0 seconds
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(1), T.int64(28), T.int64(28), T.int64(128)), "float32"), p1: T.Buffer((T.int64(4), T.int64(1), T.int64(3), T.int64(3), T.int64(128), T.int64(32)), "float32"), p2: T.Buffer((T.int64(1), T.int64(4), T.int64(1), T.int64(1), T.int64(32)), "float32"), p3: T.Buffer((T.int64(1), T.int64(4), T.int64(28), T.int64(28), T.int64(32)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(4), T.int64(28), T.int64(28), T.int64(32)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        data_pad = T.alloc_buffer((T.int64(1), T.int64(1), T.int64(30), T.int64(30), T.int64(128)))
        conv2d_NCHWc = T.alloc_buffer((T.int64(1), T.int64(4), T.int64(28), T.int64(28), T.int64(32)))
        for n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_fused_fused in T.parallel(T.int64(112), annotations={"pragma_auto_unroll_max_step": 512, "pragma_unroll_explicit": 1}):
            for ax0, ax1, ax2, ax3, ax4 in T.grid(T.int64(1), T.int64(1), T.int64(9), T.int64(3), T.int64(128)):
                with T.block("data_pad"):
                    v_i0, v_i1 = T.axis.remap("SS", [ax0, ax1])
                    v_i2 = T.axis.spatial(T.int64(30), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_fused_fused % T.int64(4) * T.int64(7) + ax2)
                    v_i3 = T.axis.spatial(T.int64(30), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_fused_fused // T.int64(4) + ax3)
                    v_i4 = T.axis.spatial(T.int64(128), ax4)
                    T.reads(p0[v_i0, v_i1, v_i2 - T.int64(1), v_i3 - T.int64(1), v_i4])
                    T.writes(data_pad[v_i0, v_i1, v_i2, v_i3, v_i4])
                    data_pad[v_i0, v_i1, v_i2, v_i3, v_i4] = T.if_then_else(T.int64(1) <= v_i2 and v_i2 < T.int64(29) and T.int64(1) <= v_i3 and v_i3 < T.int64(29), p0[v_i0, v_i1, v_i2 - T.int64(1), v_i3 - T.int64(1), v_i4], T.float32(0))
            for ow_1, oc_block_1 in T.grid(T.int64(1), T.int64(1)):
                for n_2_init, oc_chunk_2_init, oh_2_init, ow_2_init, oc_block_2_init, n_3_init, oc_chunk_3_init, oh_3_init, ow_3_init, oc_block_3_init in T.grid(T.int64(1), T.int64(4), T.int64(1), T.int64(1), T.int64(32), T.int64(1), T.int64(1), T.int64(7), T.int64(1), T.int64(1)):
                    with T.block("conv2d_NCHWc_init"):
                        v_n = T.axis.spatial(T.int64(1), n_2_init + n_3_init)
                        v_oc_chunk = T.axis.spatial(T.int64(4), oc_chunk_2_init + oc_chunk_3_init)
                        v_oh = T.axis.spatial(T.int64(28), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_fused_fused % T.int64(4) * T.int64(7) + oh_2_init * T.int64(7) + oh_3_init)
                        v_ow = T.axis.spatial(T.int64(28), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_fused_fused // T.int64(4) + ow_1 + ow_2_init + ow_3_init)
                        v_oc_block = T.axis.spatial(T.int64(32), oc_block_1 * T.int64(32) + oc_block_2_init + oc_block_3_init)
                        T.reads()
                        T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                        T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                        conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = T.float32(0)
                for ic_0, kh_0, kw_0, n_2, oc_chunk_2, oh_2, ow_2, oc_block_2, ic_1, kh_1, kw_1, n_3, oc_chunk_3, oh_3, ow_3, oc_block_3 in T.grid(T.int64(8), T.int64(1), T.int64(3), T.int64(1), T.int64(4), T.int64(1), T.int64(1), T.int64(32), T.int64(16), T.int64(3), T.int64(1), T.int64(1), T.int64(1), T.int64(7), T.int64(1), T.int64(1)):
                    with T.block("conv2d_NCHWc_update"):
                        v_n = T.axis.spatial(T.int64(1), n_2 + n_3)
                        v_oc_chunk = T.axis.spatial(T.int64(4), oc_chunk_2 + oc_chunk_3)
                        v_oh = T.axis.spatial(T.int64(28), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_fused_fused % T.int64(4) * T.int64(7) + oh_2 * T.int64(7) + oh_3)
                        v_ow = T.axis.spatial(T.int64(28), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_fused_fused // T.int64(4) + ow_1 + ow_2 + ow_3)
                        v_oc_block = T.axis.spatial(T.int64(32), oc_block_1 * T.int64(32) + oc_block_2 + oc_block_3)
                        v_ic = T.axis.reduce(T.int64(128), ic_0 * T.int64(16) + ic_1)
                        v_kh = T.axis.reduce(T.int64(3), kh_0 * T.int64(3) + kh_1)
                        v_kw = T.axis.reduce(T.int64(3), kw_0 + kw_1)
                        T.reads(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block], data_pad[v_n, v_ic // T.int64(128), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(128)], p1[v_oc_chunk, v_ic // T.int64(128), v_kh, v_kw, v_ic % T.int64(128), v_oc_block])
                        T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                        T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                        conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] + data_pad[v_n, v_ic // T.int64(128), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(128)] * p1[v_oc_chunk, v_ic // T.int64(128), v_kh, v_kw, v_ic % T.int64(128), v_oc_block]
                for ax0, ax1, ax2 in T.grid(T.int64(1), T.int64(4), T.int64(7)):
                    for ax3_ax4_fused in T.vectorized(T.int64(32)):
                        with T.block("T_relu"):
                            v_ax0, v_ax1 = T.axis.remap("SS", [ax0, ax1])
                            v_ax2 = T.axis.spatial(T.int64(28), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_fused_fused % T.int64(4) * T.int64(7) + ax2)
                            v_ax3 = T.axis.spatial(T.int64(28), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_fused_fused // T.int64(4))
                            v_ax4 = T.axis.spatial(T.int64(32), ax3_ax4_fused)
                            T.reads(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4], p3[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                            T.writes(T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                            T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.max(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] + p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4] + p3[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], T.float32(0))
b0 = sch.get_block(name="data_pad", func_name="main")
b1 = sch.get_block(name="conv2d_NCHWc", func_name="main")
b2 = sch.get_block(name="T_add", func_name="main")
b3 = sch.get_block(name="T_add_1", func_name="main")
b4 = sch.get_block(name="root", func_name="main")
sch.compute_inline(block=b3)
sch.compute_inline(block=b2)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSRSRS")
l5, l6, l7, l8, l9, l10, l11, l12 = sch.get_loops(block=b1)
v13, v14, v15, v16 = sch.sample_perfect_tile(loop=l5, n=4, max_innermost_factor=64, decision=[1, 1, 1, 1])
l17, l18, l19, l20 = sch.split(loop=l5, factors=[v13, v14, v15, v16], preserve_unit_iters=True)
v21, v22, v23, v24 = sch.sample_perfect_tile(loop=l6, n=4, max_innermost_factor=64, decision=[1, 1, 4, 1])
l25, l26, l27, l28 = sch.split(loop=l6, factors=[v21, v22, v23, v24], preserve_unit_iters=True)
v29, v30, v31, v32 = sch.sample_perfect_tile(loop=l7, n=4, max_innermost_factor=64, decision=[1, 4, 1, 7])
l33, l34, l35, l36 = sch.split(loop=l7, factors=[v29, v30, v31, v32], preserve_unit_iters=True)
v37, v38, v39, v40 = sch.sample_perfect_tile(loop=l8, n=4, max_innermost_factor=64, decision=[28, 1, 1, 1])
l41, l42, l43, l44 = sch.split(loop=l8, factors=[v37, v38, v39, v40], preserve_unit_iters=True)
v45, v46, v47, v48 = sch.sample_perfect_tile(loop=l9, n=4, max_innermost_factor=64, decision=[1, 1, 32, 1])
l49, l50, l51, l52 = sch.split(loop=l9, factors=[v45, v46, v47, v48], preserve_unit_iters=True)
v53, v54 = sch.sample_perfect_tile(loop=l10, n=2, max_innermost_factor=64, decision=[8, 16])
l55, l56 = sch.split(loop=l10, factors=[v53, v54], preserve_unit_iters=True)
v57, v58 = sch.sample_perfect_tile(loop=l11, n=2, max_innermost_factor=64, decision=[1, 3])
l59, l60 = sch.split(loop=l11, factors=[v57, v58], preserve_unit_iters=True)
v61, v62 = sch.sample_perfect_tile(loop=l12, n=2, max_innermost_factor=64, decision=[3, 1])
l63, l64 = sch.split(loop=l12, factors=[v61, v62], preserve_unit_iters=True)
sch.reorder(l17, l25, l33, l41, l49, l18, l26, l34, l42, l50, l55, l59, l63, l19, l27, l35, l43, l51, l56, l60, l64, l20, l28, l36, l44, l52)
b65, = sch.get_consumers(block=b1)
sch.reverse_compute_at(block=b65, loop=l50, preserve_unit_loops=True, index=-1)
sch.annotate(block_or_loop=b4, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b4, ann_key="meta_schedule.vectorize", ann_val=64)
v66 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b4, ann_key="meta_schedule.unroll_explicit", ann_val=v66)
l67 = sch.sample_compute_location(block=b0, decision=7)
sch.compute_at(block=b0, loop=l67, preserve_unit_loops=True, index=-1)
sch.enter_postproc()
b68 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b68, ann_key="meta_schedule.parallel")
sch.unannotate(block_or_loop=b68, ann_key="meta_schedule.vectorize")
sch.unannotate(block_or_loop=b68, ann_key="meta_schedule.unroll_explicit")
b69, b70, b71 = sch.get_child_blocks(b68)
l72, l73, l74, l75, l76, l77, l78, l79, l80, l81, l82, l83, l84 = sch.get_loops(block=b69)
l85 = sch.fuse(l72, l73, l74, l75, l76, l77, l78, l79, preserve_unit_iters=True)
sch.parallel(loop=l85)
l86, l87, l88, l89, l90, l91, l92, l93, l94, l95, l96, l97, l98, l99, l100, l101, l102, l103, l104 = sch.get_loops(block=b70)
l105 = sch.fuse(l86, preserve_unit_iters=True)
sch.parallel(loop=l105)
sch.annotate(block_or_loop=l105, ann_key="pragma_auto_unroll_max_step", ann_val=512)
sch.annotate(block_or_loop=l105, ann_key="pragma_unroll_explicit", ann_val=1)
l106, l107, l108, l109, l110, l111, l112, l113 = sch.get_loops(block=b71)
l114 = sch.fuse(l112, l113, preserve_unit_iters=True)
sch.vectorize(loop=l114)
b115 = sch.get_block(name="conv2d_NCHWc", func_name="main")
l116, l117, l118, l119, l120, l121, l122, l123, l124, l125, l126, l127, l128, l129, l130, l131, l132, l133, l134 = sch.get_loops(block=b115)
b135 = sch.decompose_reduction(block=b115, loop=l119)
2024-04-29 01:47:38 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_1] Trial #737: GFLOPs: 910.1027. Time: 254.3802 us. Best GFLOPs: 1061.9044
2024-04-29 01:47:38 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_1] Trial #738: GFLOPs: 905.1667. Time: 255.7673 us. Best GFLOPs: 1061.9044
2024-04-29 01:47:38 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_1] Trial #739: GFLOPs: 919.4603. Time: 251.7913 us. Best GFLOPs: 1061.9044
2024-04-29 01:47:38 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_1] Trial #740: GFLOPs: 812.7970. Time: 284.8338 us. Best GFLOPs: 1061.9044
2024-04-29 01:47:38 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_1] Trial #741: GFLOPs: 811.2055. Time: 285.3926 us. Best GFLOPs: 1061.9044
2024-04-29 01:47:38 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_1] Trial #742: GFLOPs: 860.8504. Time: 268.9341 us. Best GFLOPs: 1061.9044
2024-04-29 01:47:38 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_1] Trial #743: GFLOPs: 861.0301. Time: 268.8780 us. Best GFLOPs: 1061.9044
2024-04-29 01:47:38 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_1] Trial #744: GFLOPs: 909.0129. Time: 254.6851 us. Best GFLOPs: 1061.9044
2024-04-29 01:47:38 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_1] Trial #745: GFLOPs: 908.4943. Time: 254.8305 us. Best GFLOPs: 1061.9044
2024-04-29 01:47:38 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_1] Trial #746: GFLOPs: 917.5066. Time: 252.3274 us. Best GFLOPs: 1061.9044
2024-04-29 01:47:38 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_1] Trial #747: GFLOPs: 839.3792. Time: 275.8134 us. Best GFLOPs: 1061.9044
2024-04-29 01:47:38 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_1] Trial #748: GFLOPs: 876.8703. Time: 264.0209 us. Best GFLOPs: 1061.9044
2024-04-29 01:47:38 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_1] Trial #749: GFLOPs: 883.2926. Time: 262.1012 us. Best GFLOPs: 1061.9044
2024-04-29 01:47:38 [INFO] [task_scheduler.cc:121] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_1] Trial #750: Error in building:
LocalBuilder: Timeout, killed after 30.0 seconds
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(1), T.int64(28), T.int64(28), T.int64(128)), "float32"), p1: T.Buffer((T.int64(4), T.int64(1), T.int64(3), T.int64(3), T.int64(128), T.int64(32)), "float32"), p2: T.Buffer((T.int64(1), T.int64(4), T.int64(1), T.int64(1), T.int64(32)), "float32"), p3: T.Buffer((T.int64(1), T.int64(4), T.int64(28), T.int64(28), T.int64(32)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(4), T.int64(28), T.int64(28), T.int64(32)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        data_pad = T.alloc_buffer((T.int64(1), T.int64(1), T.int64(30), T.int64(30), T.int64(128)))
        conv2d_NCHWc = T.alloc_buffer((T.int64(1), T.int64(4), T.int64(28), T.int64(28), T.int64(32)))
        for n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_fused_fused in T.parallel(T.int64(224), annotations={"pragma_auto_unroll_max_step": 512, "pragma_unroll_explicit": 1}):
            for ax0, ax1, ax2, ax3, ax4 in T.grid(T.int64(1), T.int64(1), T.int64(9), T.int64(3), T.int64(128)):
                with T.block("data_pad"):
                    v_i0, v_i1 = T.axis.remap("SS", [ax0, ax1])
                    v_i2 = T.axis.spatial(T.int64(30), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_fused_fused // T.int64(112) * T.int64(14) + n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_fused_fused % T.int64(28) // T.int64(14) * T.int64(7) + ax2)
                    v_i3 = T.axis.spatial(T.int64(30), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_fused_fused % T.int64(112) // T.int64(56) * T.int64(14) + n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_fused_fused % T.int64(14) + ax3)
                    v_i4 = T.axis.spatial(T.int64(128), ax4)
                    T.reads(p0[v_i0, v_i1, v_i2 - T.int64(1), v_i3 - T.int64(1), v_i4])
                    T.writes(data_pad[v_i0, v_i1, v_i2, v_i3, v_i4])
                    data_pad[v_i0, v_i1, v_i2, v_i3, v_i4] = T.if_then_else(T.int64(1) <= v_i2 and v_i2 < T.int64(29) and T.int64(1) <= v_i3 and v_i3 < T.int64(29), p0[v_i0, v_i1, v_i2 - T.int64(1), v_i3 - T.int64(1), v_i4], T.float32(0))
            for oc_block_1 in range(T.int64(1)):
                for n_2_init, oc_chunk_2_init, oh_2_init, ow_2_init, oc_block_2_init, n_3_init, oc_chunk_3_init, oh_3_init, ow_3_init, oc_block_3_init in T.grid(T.int64(1), T.int64(2), T.int64(1), T.int64(1), T.int64(32), T.int64(1), T.int64(1), T.int64(7), T.int64(1), T.int64(1)):
                    with T.block("conv2d_NCHWc_init"):
                        v_n = T.axis.spatial(T.int64(1), n_2_init + n_3_init)
                        v_oc_chunk = T.axis.spatial(T.int64(4), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_fused_fused % T.int64(56) // T.int64(28) * T.int64(2) + oc_chunk_2_init + oc_chunk_3_init)
                        v_oh = T.axis.spatial(T.int64(28), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_fused_fused // T.int64(112) * T.int64(14) + n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_fused_fused % T.int64(28) // T.int64(14) * T.int64(7) + oh_2_init * T.int64(7) + oh_3_init)
                        v_ow = T.axis.spatial(T.int64(28), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_fused_fused % T.int64(112) // T.int64(56) * T.int64(14) + n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_fused_fused % T.int64(14) + ow_2_init + ow_3_init)
                        v_oc_block = T.axis.spatial(T.int64(32), oc_block_1 * T.int64(32) + oc_block_2_init + oc_block_3_init)
                        T.reads()
                        T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                        T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                        conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = T.float32(0)
                for ic_0, kh_0, kw_0, n_2, oc_chunk_2, oh_2, ow_2, oc_block_2, ic_1, kh_1, kw_1, n_3, oc_chunk_3, oh_3, ow_3, oc_block_3 in T.grid(T.int64(64), T.int64(1), T.int64(3), T.int64(1), T.int64(2), T.int64(1), T.int64(1), T.int64(32), T.int64(2), T.int64(3), T.int64(1), T.int64(1), T.int64(1), T.int64(7), T.int64(1), T.int64(1)):
                    with T.block("conv2d_NCHWc_update"):
                        v_n = T.axis.spatial(T.int64(1), n_2 + n_3)
                        v_oc_chunk = T.axis.spatial(T.int64(4), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_fused_fused % T.int64(56) // T.int64(28) * T.int64(2) + oc_chunk_2 + oc_chunk_3)
                        v_oh = T.axis.spatial(T.int64(28), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_fused_fused // T.int64(112) * T.int64(14) + n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_fused_fused % T.int64(28) // T.int64(14) * T.int64(7) + oh_2 * T.int64(7) + oh_3)
                        v_ow = T.axis.spatial(T.int64(28), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_fused_fused % T.int64(112) // T.int64(56) * T.int64(14) + n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_fused_fused % T.int64(14) + ow_2 + ow_3)
                        v_oc_block = T.axis.spatial(T.int64(32), oc_block_1 * T.int64(32) + oc_block_2 + oc_block_3)
                        v_ic = T.axis.reduce(T.int64(128), ic_0 * T.int64(2) + ic_1)
                        v_kh = T.axis.reduce(T.int64(3), kh_0 * T.int64(3) + kh_1)
                        v_kw = T.axis.reduce(T.int64(3), kw_0 + kw_1)
                        T.reads(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block], data_pad[v_n, v_ic // T.int64(128), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(128)], p1[v_oc_chunk, v_ic // T.int64(128), v_kh, v_kw, v_ic % T.int64(128), v_oc_block])
                        T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                        T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                        conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] + data_pad[v_n, v_ic // T.int64(128), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(128)] * p1[v_oc_chunk, v_ic // T.int64(128), v_kh, v_kw, v_ic % T.int64(128), v_oc_block]
                for ax0, ax1, ax2 in T.grid(T.int64(1), T.int64(2), T.int64(7)):
                    for ax3_ax4_fused in T.vectorized(T.int64(32)):
                        with T.block("T_relu"):
                            v_ax0 = T.axis.spatial(T.int64(1), ax0)
                            v_ax1 = T.axis.spatial(T.int64(4), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_fused_fused % T.int64(56) // T.int64(28) * T.int64(2) + ax1)
                            v_ax2 = T.axis.spatial(T.int64(28), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_fused_fused // T.int64(112) * T.int64(14) + n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_fused_fused % T.int64(28) // T.int64(14) * T.int64(7) + ax2)
                            v_ax3 = T.axis.spatial(T.int64(28), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_fused_fused % T.int64(112) // T.int64(56) * T.int64(14) + n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_fused_fused % T.int64(14))
                            v_ax4 = T.axis.spatial(T.int64(32), ax3_ax4_fused)
                            T.reads(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4], p3[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                            T.writes(T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                            T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.max(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] + p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4] + p3[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], T.float32(0))
b0 = sch.get_block(name="data_pad", func_name="main")
b1 = sch.get_block(name="conv2d_NCHWc", func_name="main")
b2 = sch.get_block(name="T_add", func_name="main")
b3 = sch.get_block(name="T_add_1", func_name="main")
b4 = sch.get_block(name="root", func_name="main")
sch.compute_inline(block=b3)
sch.compute_inline(block=b2)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSRSRS")
l5, l6, l7, l8, l9, l10, l11, l12 = sch.get_loops(block=b1)
v13, v14, v15, v16 = sch.sample_perfect_tile(loop=l5, n=4, max_innermost_factor=64, decision=[1, 1, 1, 1])
l17, l18, l19, l20 = sch.split(loop=l5, factors=[v13, v14, v15, v16], preserve_unit_iters=True)
v21, v22, v23, v24 = sch.sample_perfect_tile(loop=l6, n=4, max_innermost_factor=64, decision=[1, 2, 2, 1])
l25, l26, l27, l28 = sch.split(loop=l6, factors=[v21, v22, v23, v24], preserve_unit_iters=True)
v29, v30, v31, v32 = sch.sample_perfect_tile(loop=l7, n=4, max_innermost_factor=64, decision=[2, 2, 1, 7])
l33, l34, l35, l36 = sch.split(loop=l7, factors=[v29, v30, v31, v32], preserve_unit_iters=True)
v37, v38, v39, v40 = sch.sample_perfect_tile(loop=l8, n=4, max_innermost_factor=64, decision=[2, 14, 1, 1])
l41, l42, l43, l44 = sch.split(loop=l8, factors=[v37, v38, v39, v40], preserve_unit_iters=True)
v45, v46, v47, v48 = sch.sample_perfect_tile(loop=l9, n=4, max_innermost_factor=64, decision=[1, 1, 32, 1])
l49, l50, l51, l52 = sch.split(loop=l9, factors=[v45, v46, v47, v48], preserve_unit_iters=True)
v53, v54 = sch.sample_perfect_tile(loop=l10, n=2, max_innermost_factor=64, decision=[64, 2])
l55, l56 = sch.split(loop=l10, factors=[v53, v54], preserve_unit_iters=True)
v57, v58 = sch.sample_perfect_tile(loop=l11, n=2, max_innermost_factor=64, decision=[1, 3])
l59, l60 = sch.split(loop=l11, factors=[v57, v58], preserve_unit_iters=True)
v61, v62 = sch.sample_perfect_tile(loop=l12, n=2, max_innermost_factor=64, decision=[3, 1])
l63, l64 = sch.split(loop=l12, factors=[v61, v62], preserve_unit_iters=True)
sch.reorder(l17, l25, l33, l41, l49, l18, l26, l34, l42, l50, l55, l59, l63, l19, l27, l35, l43, l51, l56, l60, l64, l20, l28, l36, l44, l52)
b65, = sch.get_consumers(block=b1)
sch.reverse_compute_at(block=b65, loop=l50, preserve_unit_loops=True, index=-1)
sch.annotate(block_or_loop=b4, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b4, ann_key="meta_schedule.vectorize", ann_val=64)
v66 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b4, ann_key="meta_schedule.unroll_explicit", ann_val=v66)
l67 = sch.sample_compute_location(block=b0, decision=8)
sch.compute_at(block=b0, loop=l67, preserve_unit_loops=True, index=-1)
sch.enter_postproc()
b68 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b68, ann_key="meta_schedule.parallel")
sch.unannotate(block_or_loop=b68, ann_key="meta_schedule.vectorize")
sch.unannotate(block_or_loop=b68, ann_key="meta_schedule.unroll_explicit")
b69, b70, b71 = sch.get_child_blocks(b68)
l72, l73, l74, l75, l76, l77, l78, l79, l80, l81, l82, l83, l84, l85 = sch.get_loops(block=b69)
l86 = sch.fuse(l72, l73, l74, l75, l76, l77, l78, l79, l80, preserve_unit_iters=True)
sch.parallel(loop=l86)
l87, l88, l89, l90, l91, l92, l93, l94, l95, l96, l97, l98, l99, l100, l101, l102, l103, l104 = sch.get_loops(block=b70)
l105 = sch.fuse(l87, preserve_unit_iters=True)
sch.parallel(loop=l105)
sch.annotate(block_or_loop=l105, ann_key="pragma_auto_unroll_max_step", ann_val=512)
sch.annotate(block_or_loop=l105, ann_key="pragma_unroll_explicit", ann_val=1)
l106, l107, l108, l109, l110, l111, l112 = sch.get_loops(block=b71)
l113 = sch.fuse(l111, l112, preserve_unit_iters=True)
sch.vectorize(loop=l113)
b114 = sch.get_block(name="conv2d_NCHWc", func_name="main")
l115, l116, l117, l118, l119, l120, l121, l122, l123, l124, l125, l126, l127, l128, l129, l130, l131, l132 = sch.get_loops(block=b114)
b133 = sch.decompose_reduction(block=b114, loop=l117)
2024-04-29 01:47:38 [INFO] [task_scheduler.cc:121] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_1] Trial #751: Error in building:
LocalBuilder: Timeout, killed after 30.0 seconds
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(1), T.int64(28), T.int64(28), T.int64(128)), "float32"), p1: T.Buffer((T.int64(4), T.int64(1), T.int64(3), T.int64(3), T.int64(128), T.int64(32)), "float32"), p2: T.Buffer((T.int64(1), T.int64(4), T.int64(1), T.int64(1), T.int64(32)), "float32"), p3: T.Buffer((T.int64(1), T.int64(4), T.int64(28), T.int64(28), T.int64(32)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(4), T.int64(28), T.int64(28), T.int64(32)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        data_pad = T.alloc_buffer((T.int64(1), T.int64(1), T.int64(30), T.int64(30), T.int64(128)))
        conv2d_NCHWc = T.alloc_buffer((T.int64(1), T.int64(4), T.int64(28), T.int64(28), T.int64(32)))
        for n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_fused_fused in T.parallel(T.int64(224), annotations={"pragma_auto_unroll_max_step": 512, "pragma_unroll_explicit": 1}):
            for ax0, ax1, ax2, ax3, ax4 in T.grid(T.int64(1), T.int64(1), T.int64(9), T.int64(3), T.int64(128)):
                with T.block("data_pad"):
                    v_i0, v_i1 = T.axis.remap("SS", [ax0, ax1])
                    v_i2 = T.axis.spatial(T.int64(30), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_fused_fused // T.int64(112) * T.int64(14) + n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_fused_fused % T.int64(56) // T.int64(28) * T.int64(7) + ax2)
                    v_i3 = T.axis.spatial(T.int64(30), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_fused_fused % T.int64(28) + ax3)
                    v_i4 = T.axis.spatial(T.int64(128), ax4)
                    T.reads(p0[v_i0, v_i1, v_i2 - T.int64(1), v_i3 - T.int64(1), v_i4])
                    T.writes(data_pad[v_i0, v_i1, v_i2, v_i3, v_i4])
                    data_pad[v_i0, v_i1, v_i2, v_i3, v_i4] = T.if_then_else(T.int64(1) <= v_i2 and v_i2 < T.int64(29) and T.int64(1) <= v_i3 and v_i3 < T.int64(29), p0[v_i0, v_i1, v_i2 - T.int64(1), v_i3 - T.int64(1), v_i4], T.float32(0))
            for oc_block_1 in range(T.int64(1)):
                for n_2_init, oc_chunk_2_init, oh_2_init, ow_2_init, oc_block_2_init, n_3_init, oc_chunk_3_init, oh_3_init, ow_3_init, oc_block_3_init in T.grid(T.int64(1), T.int64(2), T.int64(1), T.int64(1), T.int64(32), T.int64(1), T.int64(1), T.int64(7), T.int64(1), T.int64(1)):
                    with T.block("conv2d_NCHWc_init"):
                        v_n = T.axis.spatial(T.int64(1), n_2_init + n_3_init)
                        v_oc_chunk = T.axis.spatial(T.int64(4), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_fused_fused % T.int64(112) // T.int64(56) * T.int64(2) + oc_chunk_2_init + oc_chunk_3_init)
                        v_oh = T.axis.spatial(T.int64(28), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_fused_fused // T.int64(112) * T.int64(14) + n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_fused_fused % T.int64(56) // T.int64(28) * T.int64(7) + oh_2_init * T.int64(7) + oh_3_init)
                        v_ow = T.axis.spatial(T.int64(28), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_fused_fused % T.int64(28) + ow_2_init + ow_3_init)
                        v_oc_block = T.axis.spatial(T.int64(32), oc_block_1 * T.int64(32) + oc_block_2_init + oc_block_3_init)
                        T.reads()
                        T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                        T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                        conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = T.float32(0)
                for ic_0, kh_0, kw_0, n_2, oc_chunk_2, oh_2, ow_2, oc_block_2, ic_1, kh_1, kw_1, n_3, oc_chunk_3, oh_3, ow_3, oc_block_3 in T.grid(T.int64(16), T.int64(1), T.int64(3), T.int64(1), T.int64(2), T.int64(1), T.int64(1), T.int64(32), T.int64(8), T.int64(3), T.int64(1), T.int64(1), T.int64(1), T.int64(7), T.int64(1), T.int64(1)):
                    with T.block("conv2d_NCHWc_update"):
                        v_n = T.axis.spatial(T.int64(1), n_2 + n_3)
                        v_oc_chunk = T.axis.spatial(T.int64(4), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_fused_fused % T.int64(112) // T.int64(56) * T.int64(2) + oc_chunk_2 + oc_chunk_3)
                        v_oh = T.axis.spatial(T.int64(28), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_fused_fused // T.int64(112) * T.int64(14) + n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_fused_fused % T.int64(56) // T.int64(28) * T.int64(7) + oh_2 * T.int64(7) + oh_3)
                        v_ow = T.axis.spatial(T.int64(28), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_fused_fused % T.int64(28) + ow_2 + ow_3)
                        v_oc_block = T.axis.spatial(T.int64(32), oc_block_1 * T.int64(32) + oc_block_2 + oc_block_3)
                        v_ic = T.axis.reduce(T.int64(128), ic_0 * T.int64(8) + ic_1)
                        v_kh = T.axis.reduce(T.int64(3), kh_0 * T.int64(3) + kh_1)
                        v_kw = T.axis.reduce(T.int64(3), kw_0 + kw_1)
                        T.reads(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block], data_pad[v_n, v_ic // T.int64(128), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(128)], p1[v_oc_chunk, v_ic // T.int64(128), v_kh, v_kw, v_ic % T.int64(128), v_oc_block])
                        T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                        T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                        conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] + data_pad[v_n, v_ic // T.int64(128), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(128)] * p1[v_oc_chunk, v_ic // T.int64(128), v_kh, v_kw, v_ic % T.int64(128), v_oc_block]
                for ax0, ax1, ax2 in T.grid(T.int64(1), T.int64(2), T.int64(7)):
                    for ax3_ax4_fused in T.vectorized(T.int64(32)):
                        with T.block("T_relu"):
                            v_ax0 = T.axis.spatial(T.int64(1), ax0)
                            v_ax1 = T.axis.spatial(T.int64(4), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_fused_fused % T.int64(112) // T.int64(56) * T.int64(2) + ax1)
                            v_ax2 = T.axis.spatial(T.int64(28), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_fused_fused // T.int64(112) * T.int64(14) + n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_fused_fused % T.int64(56) // T.int64(28) * T.int64(7) + ax2)
                            v_ax3 = T.axis.spatial(T.int64(28), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_fused_fused % T.int64(28))
                            v_ax4 = T.axis.spatial(T.int64(32), ax3_ax4_fused)
                            T.reads(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4], p3[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                            T.writes(T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                            T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.max(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] + p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4] + p3[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], T.float32(0))
b0 = sch.get_block(name="data_pad", func_name="main")
b1 = sch.get_block(name="conv2d_NCHWc", func_name="main")
b2 = sch.get_block(name="T_add", func_name="main")
b3 = sch.get_block(name="T_add_1", func_name="main")
b4 = sch.get_block(name="root", func_name="main")
sch.compute_inline(block=b3)
sch.compute_inline(block=b2)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSRSRS")
l5, l6, l7, l8, l9, l10, l11, l12 = sch.get_loops(block=b1)
v13, v14, v15, v16 = sch.sample_perfect_tile(loop=l5, n=4, max_innermost_factor=64, decision=[1, 1, 1, 1])
l17, l18, l19, l20 = sch.split(loop=l5, factors=[v13, v14, v15, v16], preserve_unit_iters=True)
v21, v22, v23, v24 = sch.sample_perfect_tile(loop=l6, n=4, max_innermost_factor=64, decision=[1, 2, 2, 1])
l25, l26, l27, l28 = sch.split(loop=l6, factors=[v21, v22, v23, v24], preserve_unit_iters=True)
v29, v30, v31, v32 = sch.sample_perfect_tile(loop=l7, n=4, max_innermost_factor=64, decision=[2, 2, 1, 7])
l33, l34, l35, l36 = sch.split(loop=l7, factors=[v29, v30, v31, v32], preserve_unit_iters=True)
v37, v38, v39, v40 = sch.sample_perfect_tile(loop=l8, n=4, max_innermost_factor=64, decision=[1, 28, 1, 1])
l41, l42, l43, l44 = sch.split(loop=l8, factors=[v37, v38, v39, v40], preserve_unit_iters=True)
v45, v46, v47, v48 = sch.sample_perfect_tile(loop=l9, n=4, max_innermost_factor=64, decision=[1, 1, 32, 1])
l49, l50, l51, l52 = sch.split(loop=l9, factors=[v45, v46, v47, v48], preserve_unit_iters=True)
v53, v54 = sch.sample_perfect_tile(loop=l10, n=2, max_innermost_factor=64, decision=[16, 8])
l55, l56 = sch.split(loop=l10, factors=[v53, v54], preserve_unit_iters=True)
v57, v58 = sch.sample_perfect_tile(loop=l11, n=2, max_innermost_factor=64, decision=[1, 3])
l59, l60 = sch.split(loop=l11, factors=[v57, v58], preserve_unit_iters=True)
v61, v62 = sch.sample_perfect_tile(loop=l12, n=2, max_innermost_factor=64, decision=[3, 1])
l63, l64 = sch.split(loop=l12, factors=[v61, v62], preserve_unit_iters=True)
sch.reorder(l17, l25, l33, l41, l49, l18, l26, l34, l42, l50, l55, l59, l63, l19, l27, l35, l43, l51, l56, l60, l64, l20, l28, l36, l44, l52)
b65, = sch.get_consumers(block=b1)
sch.reverse_compute_at(block=b65, loop=l50, preserve_unit_loops=True, index=-1)
sch.annotate(block_or_loop=b4, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b4, ann_key="meta_schedule.vectorize", ann_val=64)
v66 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b4, ann_key="meta_schedule.unroll_explicit", ann_val=v66)
l67 = sch.sample_compute_location(block=b0, decision=8)
sch.compute_at(block=b0, loop=l67, preserve_unit_loops=True, index=-1)
sch.enter_postproc()
b68 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b68, ann_key="meta_schedule.parallel")
sch.unannotate(block_or_loop=b68, ann_key="meta_schedule.vectorize")
sch.unannotate(block_or_loop=b68, ann_key="meta_schedule.unroll_explicit")
b69, b70, b71 = sch.get_child_blocks(b68)
l72, l73, l74, l75, l76, l77, l78, l79, l80, l81, l82, l83, l84, l85 = sch.get_loops(block=b69)
l86 = sch.fuse(l72, l73, l74, l75, l76, l77, l78, l79, l80, preserve_unit_iters=True)
sch.parallel(loop=l86)
l87, l88, l89, l90, l91, l92, l93, l94, l95, l96, l97, l98, l99, l100, l101, l102, l103, l104 = sch.get_loops(block=b70)
l105 = sch.fuse(l87, preserve_unit_iters=True)
sch.parallel(loop=l105)
sch.annotate(block_or_loop=l105, ann_key="pragma_auto_unroll_max_step", ann_val=512)
sch.annotate(block_or_loop=l105, ann_key="pragma_unroll_explicit", ann_val=1)
l106, l107, l108, l109, l110, l111, l112 = sch.get_loops(block=b71)
l113 = sch.fuse(l111, l112, preserve_unit_iters=True)
sch.vectorize(loop=l113)
b114 = sch.get_block(name="conv2d_NCHWc", func_name="main")
l115, l116, l117, l118, l119, l120, l121, l122, l123, l124, l125, l126, l127, l128, l129, l130, l131, l132 = sch.get_loops(block=b114)
b133 = sch.decompose_reduction(block=b114, loop=l117)
2024-04-29 01:47:38 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_1] Trial #752: GFLOPs: 829.2031. Time: 279.1983 us. Best GFLOPs: 1061.9044
2024-04-29 01:47:38 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_1] Trial #753: GFLOPs: 837.7390. Time: 276.3534 us. Best GFLOPs: 1061.9044
2024-04-29 01:47:38 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_1] Trial #754: GFLOPs: 994.5432. Time: 232.7823 us. Best GFLOPs: 1061.9044
2024-04-29 01:47:38 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_1] Trial #755: GFLOPs: 845.3968. Time: 273.8502 us. Best GFLOPs: 1061.9044
2024-04-29 01:47:38 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_1] Trial #756: GFLOPs: 806.5000. Time: 287.0577 us. Best GFLOPs: 1061.9044
2024-04-29 01:47:38 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_1] Trial #757: GFLOPs: 96.4586. Time: 2400.1190 us. Best GFLOPs: 1061.9044
2024-04-29 01:47:38 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_1] Trial #758: GFLOPs: 842.8446. Time: 274.6794 us. Best GFLOPs: 1061.9044
2024-04-29 01:47:38 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_1] Trial #759: GFLOPs: 842.7377. Time: 274.7143 us. Best GFLOPs: 1061.9044
2024-04-29 01:47:38 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_1] Trial #760: GFLOPs: 906.6622. Time: 255.3454 us. Best GFLOPs: 1061.9044
2024-04-29 01:47:38 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_1] Trial #761: GFLOPs: 818.0294. Time: 283.0119 us. Best GFLOPs: 1061.9044
2024-04-29 01:47:38 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_1] Trial #762: GFLOPs: 819.8516. Time: 282.3829 us. Best GFLOPs: 1061.9044
2024-04-29 01:47:38 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_1] Trial #763: GFLOPs: 796.5608. Time: 290.6395 us. Best GFLOPs: 1061.9044
2024-04-29 01:47:38 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_1] Trial #764: GFLOPs: 827.8892. Time: 279.6414 us. Best GFLOPs: 1061.9044
2024-04-29 01:47:38 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_1] Trial #765: GFLOPs: 711.2691. Time: 325.4915 us. Best GFLOPs: 1061.9044
2024-04-29 01:47:38 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_1] Trial #766: GFLOPs: 22.2227. Time: 10417.8111 us. Best GFLOPs: 1061.9044
2024-04-29 01:47:38 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_1] Trial #767: GFLOPs: 123.9026. Time: 1868.5006 us. Best GFLOPs: 1061.9044
2024-04-29 01:47:38 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_1] Trial #768: GFLOPs: 43.7561. Time: 5290.9615 us. Best GFLOPs: 1061.9044
2024-04-29 02:14:54 [INFO] [evolutionary_search.cc:713] Generating candidates......
2024-04-29 02:14:55 [INFO] [evolutionary_search.cc:715] Picked top 102 candidate(s) from database
2024-04-29 02:15:00 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x3858de8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x3c39958)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0xa2a8408)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x3f4f298)]: 0 failure(s)
2024-04-29 02:15:00 [INFO] [evolutionary_search.cc:723] Sampled 410 candidate(s)
2024-04-29 02:15:12 [INFO] [evolutionary_search.cc:621] Evolve iter #0 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x3858de8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x3c39958)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0xa2a8408)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x3f4f298)]: 0 failure(s)
2024-04-29 02:15:23 [INFO] [evolutionary_search.cc:621] Evolve iter #1 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x3858de8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x3c39958)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0xa2a8408)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x3f4f298)]: 0 failure(s)
2024-04-29 02:15:35 [INFO] [evolutionary_search.cc:621] Evolve iter #2 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x3858de8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x3c39958)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0xa2a8408)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x3f4f298)]: 0 failure(s)
2024-04-29 02:15:47 [INFO] [evolutionary_search.cc:621] Evolve iter #3 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x3858de8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x3c39958)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0xa2a8408)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x3f4f298)]: 0 failure(s)
2024-04-29 02:15:54 [INFO] [evolutionary_search.cc:649] Scores of the best 64 candidates:
[1 : 16]:	0.9569  0.9565  0.9239  0.9207  0.9119  0.9066  0.9064  0.8992  0.8902  0.8902  0.8786  0.8756  0.8753  0.8751  0.8741  0.8740
[17 : 32]:	0.8718  0.8691  0.8665  0.8643  0.8627  0.8621  0.8591  0.8577  0.8521  0.8521  0.8497  0.8458  0.8426  0.8418  0.8410  0.8410
[33 : 48]:	0.8393  0.8373  0.8367  0.8299  0.8281  0.8262  0.8246  0.8138  0.8133  0.8131  0.8126  0.8088  0.8058  0.8043  0.8033  0.8017
[49 : 64]:	0.8007  0.7966  0.7964  0.7913  0.7896  0.7880  0.7880  0.7787  0.7715  0.7673  0.7670  0.7670  0.7663  0.7662  0.7653  0.7653
2024-04-29 02:15:55 [INFO] [evolutionary_search.cc:727] Got 64 candidate(s) with evolutionary search
2024-04-29 02:15:55 [INFO] [evolutionary_search.cc:730] Sending 64 candidates(s) for measurement
2024-04-29 02:17:41 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_1] Trial #769: GFLOPs: 538.8698. Time: 429.6252 us. Best GFLOPs: 1061.9044
2024-04-29 02:17:41 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_1] Trial #770: GFLOPs: 811.1650. Time: 285.4069 us. Best GFLOPs: 1061.9044
2024-04-29 02:17:41 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_1] Trial #771: GFLOPs: 1017.7686. Time: 227.4702 us. Best GFLOPs: 1061.9044
2024-04-29 02:17:41 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_1] Trial #772: GFLOPs: 1034.7425. Time: 223.7388 us. Best GFLOPs: 1061.9044
2024-04-29 02:17:41 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_1] Trial #773: GFLOPs: 1033.9912. Time: 223.9014 us. Best GFLOPs: 1061.9044
2024-04-29 02:17:41 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_1] Trial #774: GFLOPs: 626.8583. Time: 369.3212 us. Best GFLOPs: 1061.9044
2024-04-29 02:17:41 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_1] Trial #775: GFLOPs: 981.5772. Time: 235.8572 us. Best GFLOPs: 1061.9044
2024-04-29 02:17:41 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_1] Trial #776: GFLOPs: 962.0462. Time: 240.6455 us. Best GFLOPs: 1061.9044
2024-04-29 02:17:41 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_1] Trial #777: GFLOPs: 1010.1592. Time: 229.1837 us. Best GFLOPs: 1061.9044
2024-04-29 02:17:41 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_1] Trial #778: GFLOPs: 1061.6367. Time: 218.0709 us. Best GFLOPs: 1061.9044
2024-04-29 02:17:41 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_1] Trial #779: GFLOPs: 999.9909. Time: 231.5142 us. Best GFLOPs: 1061.9044
2024-04-29 02:17:41 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_1] Trial #780: GFLOPs: 935.2318. Time: 247.5451 us. Best GFLOPs: 1061.9044
2024-04-29 02:17:41 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_1] Trial #781: GFLOPs: 969.2396. Time: 238.8595 us. Best GFLOPs: 1061.9044
2024-04-29 02:17:41 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_1] Trial #782: GFLOPs: 1058.0497. Time: 218.8102 us. Best GFLOPs: 1061.9044
2024-04-29 02:17:41 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_1] Trial #783: GFLOPs: 905.3562. Time: 255.7138 us. Best GFLOPs: 1061.9044
2024-04-29 02:17:41 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_1] Trial #784: GFLOPs: 988.6090. Time: 234.1796 us. Best GFLOPs: 1061.9044
2024-04-29 02:17:41 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_1] Trial #785: GFLOPs: 1052.1353. Time: 220.0402 us. Best GFLOPs: 1061.9044
2024-04-29 02:17:41 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_1] Trial #786: GFLOPs: 958.5612. Time: 241.5204 us. Best GFLOPs: 1061.9044
2024-04-29 02:17:41 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_1] Trial #787: GFLOPs: 894.8117. Time: 258.7271 us. Best GFLOPs: 1061.9044
2024-04-29 02:17:41 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_1] Trial #788: GFLOPs: 946.3507. Time: 244.6366 us. Best GFLOPs: 1061.9044
2024-04-29 02:17:41 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_1] Trial #789: GFLOPs: 911.8640. Time: 253.8888 us. Best GFLOPs: 1061.9044
2024-04-29 02:17:41 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_1] Trial #790: GFLOPs: 506.6038. Time: 456.9884 us. Best GFLOPs: 1061.9044
2024-04-29 02:17:41 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_1] Trial #791: GFLOPs: 921.3153. Time: 251.2843 us. Best GFLOPs: 1061.9044
2024-04-29 02:17:41 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_1] Trial #792: GFLOPs: 931.1650. Time: 248.6263 us. Best GFLOPs: 1061.9044
2024-04-29 02:17:41 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_1] Trial #793: GFLOPs: 945.6996. Time: 244.8051 us. Best GFLOPs: 1061.9044
2024-04-29 02:17:41 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_1] Trial #794: GFLOPs: 886.6637. Time: 261.1047 us. Best GFLOPs: 1061.9044
2024-04-29 02:17:41 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_1] Trial #795: GFLOPs: 902.3037. Time: 256.5789 us. Best GFLOPs: 1061.9044
2024-04-29 02:17:41 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_1] Trial #796: GFLOPs: 928.0742. Time: 249.4543 us. Best GFLOPs: 1061.9044
2024-04-29 02:17:41 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_1] Trial #797: GFLOPs: 917.8715. Time: 252.2271 us. Best GFLOPs: 1061.9044
2024-04-29 02:17:41 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_1] Trial #798: GFLOPs: 1008.4117. Time: 229.5809 us. Best GFLOPs: 1061.9044
2024-04-29 02:17:41 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_1] Trial #799: GFLOPs: 924.6171. Time: 250.3870 us. Best GFLOPs: 1061.9044
2024-04-29 02:17:41 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_1] Trial #800: GFLOPs: 924.9369. Time: 250.3004 us. Best GFLOPs: 1061.9044
2024-04-29 02:17:41 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_1] Trial #801: GFLOPs: 875.1303. Time: 264.5458 us. Best GFLOPs: 1061.9044
2024-04-29 02:17:41 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_1] Trial #802: GFLOPs: 859.4203. Time: 269.3817 us. Best GFLOPs: 1061.9044
2024-04-29 02:17:41 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_1] Trial #803: GFLOPs: 858.2975. Time: 269.7341 us. Best GFLOPs: 1061.9044
2024-04-29 02:17:41 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_1] Trial #804: GFLOPs: 840.8492. Time: 275.3313 us. Best GFLOPs: 1061.9044
2024-04-29 02:17:41 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_1] Trial #805: GFLOPs: 100.9293. Time: 2293.8042 us. Best GFLOPs: 1061.9044
2024-04-29 02:17:41 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_1] Trial #806: GFLOPs: 955.9461. Time: 242.1811 us. Best GFLOPs: 1061.9044
2024-04-29 02:17:41 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_1] Trial #807: GFLOPs: 954.0972. Time: 242.6504 us. Best GFLOPs: 1061.9044
2024-04-29 02:17:41 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_1] Trial #808: GFLOPs: 895.2532. Time: 258.5996 us. Best GFLOPs: 1061.9044
2024-04-29 02:17:41 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_1] Trial #809: GFLOPs: 642.6114. Time: 360.2676 us. Best GFLOPs: 1061.9044
2024-04-29 02:17:41 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_1] Trial #810: GFLOPs: 1055.5340. Time: 219.3317 us. Best GFLOPs: 1061.9044
2024-04-29 02:17:41 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_1] Trial #811: GFLOPs: 793.6348. Time: 291.7111 us. Best GFLOPs: 1061.9044
2024-04-29 02:17:41 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_1] Trial #812: GFLOPs: 690.3732. Time: 335.3434 us. Best GFLOPs: 1061.9044
2024-04-29 02:17:41 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_1] Trial #813: GFLOPs: 845.7718. Time: 273.7287 us. Best GFLOPs: 1061.9044
2024-04-29 02:17:41 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_1] Trial #814: GFLOPs: 908.6586. Time: 254.7844 us. Best GFLOPs: 1061.9044
2024-04-29 02:17:41 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_1] Trial #815: GFLOPs: 764.5422. Time: 302.8114 us. Best GFLOPs: 1061.9044
2024-04-29 02:17:41 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_1] Trial #816: GFLOPs: 967.7197. Time: 239.2346 us. Best GFLOPs: 1061.9044
2024-04-29 02:17:41 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_1] Trial #817: GFLOPs: 839.4003. Time: 275.8065 us. Best GFLOPs: 1061.9044
2024-04-29 02:17:41 [INFO] [task_scheduler.cc:121] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_1] Trial #818: Error in building:
LocalBuilder: Timeout, killed after 30.0 seconds
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(1), T.int64(28), T.int64(28), T.int64(128)), "float32"), p1: T.Buffer((T.int64(4), T.int64(1), T.int64(3), T.int64(3), T.int64(128), T.int64(32)), "float32"), p2: T.Buffer((T.int64(1), T.int64(4), T.int64(1), T.int64(1), T.int64(32)), "float32"), p3: T.Buffer((T.int64(1), T.int64(4), T.int64(28), T.int64(28), T.int64(32)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(4), T.int64(28), T.int64(28), T.int64(32)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        data_pad = T.alloc_buffer((T.int64(1), T.int64(1), T.int64(30), T.int64(30), T.int64(128)))
        conv2d_NCHWc = T.alloc_buffer((T.int64(1), T.int64(4), T.int64(28), T.int64(28), T.int64(32)))
        for n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_fused_fused in T.parallel(T.int64(224), annotations={"pragma_auto_unroll_max_step": 512, "pragma_unroll_explicit": 1}):
            for ax0, ax1, ax2, ax3, ax4 in T.grid(T.int64(1), T.int64(1), T.int64(9), T.int64(4), T.int64(128)):
                with T.block("data_pad"):
                    v_i0, v_i1 = T.axis.remap("SS", [ax0, ax1])
                    v_i2 = T.axis.spatial(T.int64(30), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_fused_fused % T.int64(112) // T.int64(28) * T.int64(7) + ax2)
                    v_i3 = T.axis.spatial(T.int64(30), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_fused_fused % T.int64(28) // T.int64(2) * T.int64(2) + ax3)
                    v_i4 = T.axis.spatial(T.int64(128), ax4)
                    T.reads(p0[v_i0, v_i1, v_i2 - T.int64(1), v_i3 - T.int64(1), v_i4])
                    T.writes(data_pad[v_i0, v_i1, v_i2, v_i3, v_i4])
                    data_pad[v_i0, v_i1, v_i2, v_i3, v_i4] = T.if_then_else(T.int64(1) <= v_i2 and v_i2 < T.int64(29) and T.int64(1) <= v_i3 and v_i3 < T.int64(29), p0[v_i0, v_i1, v_i2 - T.int64(1), v_i3 - T.int64(1), v_i4], T.float32(0))
            for oh_1, ow_1, oc_block_1 in T.grid(T.int64(1), T.int64(1), T.int64(1)):
                for n_2_init, oc_chunk_2_init, oh_2_init, ow_2_init, oc_block_2_init, n_3_init, oc_chunk_3_init, oh_3_init, ow_3_init, oc_block_3_init in T.grid(T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(32), T.int64(1), T.int64(1), T.int64(7), T.int64(1), T.int64(1)):
                    with T.block("conv2d_NCHWc_init"):
                        v_n = T.axis.spatial(T.int64(1), n_2_init + n_3_init)
                        v_oc_chunk = T.axis.spatial(T.int64(4), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_fused_fused // T.int64(112) * T.int64(2) + n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_fused_fused % T.int64(2) + oc_chunk_2_init + oc_chunk_3_init)
                        v_oh = T.axis.spatial(T.int64(28), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_fused_fused % T.int64(112) // T.int64(28) * T.int64(7) + oh_1 * T.int64(7) + oh_2_init * T.int64(7) + oh_3_init)
                        v_ow = T.axis.spatial(T.int64(28), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_fused_fused % T.int64(28) // T.int64(2) * T.int64(2) + ow_1 * T.int64(2) + ow_2_init + ow_3_init)
                        v_oc_block = T.axis.spatial(T.int64(32), oc_block_1 * T.int64(32) + oc_block_2_init + oc_block_3_init)
                        T.reads()
                        T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                        T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                        conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = T.float32(0)
                for ic_0, kh_0, kw_0, n_2, oc_chunk_2, oh_2, ow_2, oc_block_2, ic_1, kh_1, kw_1, n_3, oc_chunk_3, oh_3, ow_3, oc_block_3 in T.grid(T.int64(32), T.int64(1), T.int64(3), T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(32), T.int64(4), T.int64(3), T.int64(1), T.int64(1), T.int64(1), T.int64(7), T.int64(1), T.int64(1)):
                    with T.block("conv2d_NCHWc_update"):
                        v_n = T.axis.spatial(T.int64(1), n_2 + n_3)
                        v_oc_chunk = T.axis.spatial(T.int64(4), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_fused_fused // T.int64(112) * T.int64(2) + n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_fused_fused % T.int64(2) + oc_chunk_2 + oc_chunk_3)
                        v_oh = T.axis.spatial(T.int64(28), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_fused_fused % T.int64(112) // T.int64(28) * T.int64(7) + oh_1 * T.int64(7) + oh_2 * T.int64(7) + oh_3)
                        v_ow = T.axis.spatial(T.int64(28), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_fused_fused % T.int64(28) // T.int64(2) * T.int64(2) + ow_1 * T.int64(2) + ow_2 + ow_3)
                        v_oc_block = T.axis.spatial(T.int64(32), oc_block_1 * T.int64(32) + oc_block_2 + oc_block_3)
                        v_ic = T.axis.reduce(T.int64(128), ic_0 * T.int64(4) + ic_1)
                        v_kh = T.axis.reduce(T.int64(3), kh_0 * T.int64(3) + kh_1)
                        v_kw = T.axis.reduce(T.int64(3), kw_0 + kw_1)
                        T.reads(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block], data_pad[v_n, v_ic // T.int64(128), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(128)], p1[v_oc_chunk, v_ic // T.int64(128), v_kh, v_kw, v_ic % T.int64(128), v_oc_block])
                        T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                        T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                        conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] + data_pad[v_n, v_ic // T.int64(128), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(128)] * p1[v_oc_chunk, v_ic // T.int64(128), v_kh, v_kw, v_ic % T.int64(128), v_oc_block]
                for ax0, ax1, ax2 in T.grid(T.int64(1), T.int64(1), T.int64(7)):
                    for ax3_ax4_fused in T.vectorized(T.int64(64)):
                        with T.block("T_relu"):
                            v_ax0 = T.axis.spatial(T.int64(1), ax0)
                            v_ax1 = T.axis.spatial(T.int64(4), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_fused_fused // T.int64(112) * T.int64(2) + n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_fused_fused % T.int64(2) + ax1)
                            v_ax2 = T.axis.spatial(T.int64(28), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_fused_fused % T.int64(112) // T.int64(28) * T.int64(7) + ax2)
                            v_ax3 = T.axis.spatial(T.int64(28), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_fused_fused % T.int64(28) // T.int64(2) * T.int64(2) + ax3_ax4_fused // T.int64(32))
                            v_ax4 = T.axis.spatial(T.int64(32), ax3_ax4_fused % T.int64(32))
                            T.reads(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4], p3[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                            T.writes(T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                            T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.max(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] + p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4] + p3[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], T.float32(0))
b0 = sch.get_block(name="data_pad", func_name="main")
b1 = sch.get_block(name="conv2d_NCHWc", func_name="main")
b2 = sch.get_block(name="T_add", func_name="main")
b3 = sch.get_block(name="T_add_1", func_name="main")
b4 = sch.get_block(name="root", func_name="main")
sch.compute_inline(block=b3)
sch.compute_inline(block=b2)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSRSRS")
l5, l6, l7, l8, l9, l10, l11, l12 = sch.get_loops(block=b1)
v13, v14, v15, v16 = sch.sample_perfect_tile(loop=l5, n=4, max_innermost_factor=64, decision=[1, 1, 1, 1])
l17, l18, l19, l20 = sch.split(loop=l5, factors=[v13, v14, v15, v16], preserve_unit_iters=True)
v21, v22, v23, v24 = sch.sample_perfect_tile(loop=l6, n=4, max_innermost_factor=64, decision=[2, 2, 1, 1])
l25, l26, l27, l28 = sch.split(loop=l6, factors=[v21, v22, v23, v24], preserve_unit_iters=True)
v29, v30, v31, v32 = sch.sample_perfect_tile(loop=l7, n=4, max_innermost_factor=64, decision=[4, 1, 1, 7])
l33, l34, l35, l36 = sch.split(loop=l7, factors=[v29, v30, v31, v32], preserve_unit_iters=True)
v37, v38, v39, v40 = sch.sample_perfect_tile(loop=l8, n=4, max_innermost_factor=64, decision=[14, 1, 2, 1])
l41, l42, l43, l44 = sch.split(loop=l8, factors=[v37, v38, v39, v40], preserve_unit_iters=True)
v45, v46, v47, v48 = sch.sample_perfect_tile(loop=l9, n=4, max_innermost_factor=64, decision=[1, 1, 32, 1])
l49, l50, l51, l52 = sch.split(loop=l9, factors=[v45, v46, v47, v48], preserve_unit_iters=True)
v53, v54 = sch.sample_perfect_tile(loop=l10, n=2, max_innermost_factor=64, decision=[32, 4])
l55, l56 = sch.split(loop=l10, factors=[v53, v54], preserve_unit_iters=True)
v57, v58 = sch.sample_perfect_tile(loop=l11, n=2, max_innermost_factor=64, decision=[1, 3])
l59, l60 = sch.split(loop=l11, factors=[v57, v58], preserve_unit_iters=True)
v61, v62 = sch.sample_perfect_tile(loop=l12, n=2, max_innermost_factor=64, decision=[3, 1])
l63, l64 = sch.split(loop=l12, factors=[v61, v62], preserve_unit_iters=True)
sch.reorder(l17, l25, l33, l41, l49, l18, l26, l34, l42, l50, l55, l59, l63, l19, l27, l35, l43, l51, l56, l60, l64, l20, l28, l36, l44, l52)
b65, = sch.get_consumers(block=b1)
sch.reverse_compute_at(block=b65, loop=l50, preserve_unit_loops=True, index=-1)
sch.annotate(block_or_loop=b4, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b4, ann_key="meta_schedule.vectorize", ann_val=64)
v66 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b4, ann_key="meta_schedule.unroll_explicit", ann_val=v66)
l67 = sch.sample_compute_location(block=b0, decision=6)
sch.compute_at(block=b0, loop=l67, preserve_unit_loops=True, index=-1)
sch.enter_postproc()
b68 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b68, ann_key="meta_schedule.parallel")
sch.unannotate(block_or_loop=b68, ann_key="meta_schedule.vectorize")
sch.unannotate(block_or_loop=b68, ann_key="meta_schedule.unroll_explicit")
b69, b70, b71 = sch.get_child_blocks(b68)
l72, l73, l74, l75, l76, l77, l78, l79, l80, l81, l82, l83 = sch.get_loops(block=b69)
l84 = sch.fuse(l72, l73, l74, l75, l76, l77, l78, preserve_unit_iters=True)
sch.parallel(loop=l84)
l85, l86, l87, l88, l89, l90, l91, l92, l93, l94, l95, l96, l97, l98, l99, l100, l101, l102, l103, l104 = sch.get_loops(block=b70)
l105 = sch.fuse(l85, preserve_unit_iters=True)
sch.parallel(loop=l105)
sch.annotate(block_or_loop=l105, ann_key="pragma_auto_unroll_max_step", ann_val=512)
sch.annotate(block_or_loop=l105, ann_key="pragma_unroll_explicit", ann_val=1)
l106, l107, l108, l109, l110, l111, l112, l113, l114 = sch.get_loops(block=b71)
l115 = sch.fuse(l113, l114, preserve_unit_iters=True)
sch.vectorize(loop=l115)
b116 = sch.get_block(name="conv2d_NCHWc", func_name="main")
l117, l118, l119, l120, l121, l122, l123, l124, l125, l126, l127, l128, l129, l130, l131, l132, l133, l134, l135, l136 = sch.get_loops(block=b116)
b137 = sch.decompose_reduction(block=b116, loop=l121)
2024-04-29 02:17:41 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_1] Trial #819: GFLOPs: 845.8367. Time: 273.7077 us. Best GFLOPs: 1061.9044
2024-04-29 02:17:41 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_1] Trial #820: GFLOPs: 829.4153. Time: 279.1268 us. Best GFLOPs: 1061.9044
2024-04-29 02:17:41 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_1] Trial #821: GFLOPs: 799.6050. Time: 289.5331 us. Best GFLOPs: 1061.9044
2024-04-29 02:17:41 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_1] Trial #822: GFLOPs: 845.3117. Time: 273.8777 us. Best GFLOPs: 1061.9044
2024-04-29 02:17:41 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_1] Trial #823: GFLOPs: 844.5679. Time: 274.1189 us. Best GFLOPs: 1061.9044
2024-04-29 02:17:41 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_1] Trial #824: GFLOPs: 914.1999. Time: 253.2401 us. Best GFLOPs: 1061.9044
2024-04-29 02:17:41 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_1] Trial #825: GFLOPs: 518.3368. Time: 446.6441 us. Best GFLOPs: 1061.9044
2024-04-29 02:17:41 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_1] Trial #826: GFLOPs: 595.5057. Time: 388.7655 us. Best GFLOPs: 1061.9044
2024-04-29 02:17:41 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_1] Trial #827: GFLOPs: 764.8065. Time: 302.7067 us. Best GFLOPs: 1061.9044
2024-04-29 02:17:41 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_1] Trial #828: GFLOPs: 1026.3109. Time: 225.5769 us. Best GFLOPs: 1061.9044
2024-04-29 02:17:41 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_1] Trial #829: GFLOPs: 843.0814. Time: 274.6023 us. Best GFLOPs: 1061.9044
2024-04-29 02:17:41 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_1] Trial #830: GFLOPs: 55.9252. Time: 4139.6704 us. Best GFLOPs: 1061.9044
2024-04-29 02:17:41 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_1] Trial #831: GFLOPs: 83.9653. Time: 2757.2355 us. Best GFLOPs: 1061.9044
2024-04-29 02:17:41 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_1] Trial #832: GFLOPs: 15.1261. Time: 15305.4949 us. Best GFLOPs: 1061.9044
2024-04-29 02:34:37 [INFO] [evolutionary_search.cc:713] Generating candidates......
2024-04-29 02:34:38 [INFO] [evolutionary_search.cc:715] Picked top 102 candidate(s) from database
2024-04-29 02:34:42 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x3858de8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x3c39958)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0xa2a8408)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x3f4f298)]: 0 failure(s)
2024-04-29 02:34:42 [INFO] [evolutionary_search.cc:723] Sampled 410 candidate(s)
2024-04-29 02:34:55 [INFO] [evolutionary_search.cc:621] Evolve iter #0 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x3858de8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x3c39958)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0xa2a8408)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x3f4f298)]: 0 failure(s)
2024-04-29 02:35:07 [INFO] [evolutionary_search.cc:621] Evolve iter #1 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x3858de8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x3c39958)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0xa2a8408)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x3f4f298)]: 0 failure(s)
2024-04-29 02:35:19 [INFO] [evolutionary_search.cc:621] Evolve iter #2 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x3858de8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x3c39958)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0xa2a8408)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x3f4f298)]: 0 failure(s)
2024-04-29 02:35:31 [INFO] [evolutionary_search.cc:621] Evolve iter #3 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x3858de8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x3c39958)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0xa2a8408)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x3f4f298)]: 0 failure(s)
2024-04-29 02:35:38 [INFO] [evolutionary_search.cc:649] Scores of the best 64 candidates:
[1 : 16]:	0.9561  0.9472  0.9390  0.9313  0.9313  0.9117  0.9106  0.9104  0.9104  0.9030  0.8989  0.8977  0.8977  0.8953  0.8930  0.8930
[17 : 32]:	0.8902  0.8884  0.8826  0.8802  0.8791  0.8791  0.8773  0.8770  0.8754  0.8744  0.8739  0.8730  0.8599  0.8586  0.8586  0.8579
[33 : 48]:	0.8546  0.8540  0.8540  0.8533  0.8533  0.8533  0.8522  0.8505  0.8505  0.8476  0.8464  0.8408  0.8377  0.8370  0.8342  0.8318
[49 : 64]:	0.8313  0.8294  0.8230  0.8186  0.8151  0.8147  0.8047  0.8033  0.8031  0.7997  0.7997  0.7965  0.7965  0.7960  0.7960  0.7950
2024-04-29 02:35:38 [INFO] [evolutionary_search.cc:727] Got 64 candidate(s) with evolutionary search
2024-04-29 02:35:38 [INFO] [evolutionary_search.cc:730] Sending 64 candidates(s) for measurement
2024-04-29 02:37:29 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_1] Trial #833: GFLOPs: 1037.9603. Time: 223.0452 us. Best GFLOPs: 1061.9044
2024-04-29 02:37:29 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_1] Trial #834: GFLOPs: 1035.6785. Time: 223.5366 us. Best GFLOPs: 1061.9044
2024-04-29 02:37:29 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_1] Trial #835: GFLOPs: 508.6273. Time: 455.1704 us. Best GFLOPs: 1061.9044
2024-04-29 02:37:29 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_1] Trial #836: GFLOPs: 1036.8056. Time: 223.2936 us. Best GFLOPs: 1061.9044
2024-04-29 02:37:29 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_1] Trial #837: GFLOPs: 986.2203. Time: 234.7468 us. Best GFLOPs: 1061.9044
2024-04-29 02:37:29 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_1] Trial #838: GFLOPs: 940.7086. Time: 246.1039 us. Best GFLOPs: 1061.9044
2024-04-29 02:37:29 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_1] Trial #839: GFLOPs: 951.7121. Time: 243.2585 us. Best GFLOPs: 1061.9044
2024-04-29 02:37:29 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_1] Trial #840: GFLOPs: 989.2778. Time: 234.0213 us. Best GFLOPs: 1061.9044
2024-04-29 02:37:29 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_1] Trial #841: GFLOPs: 984.1367. Time: 235.2438 us. Best GFLOPs: 1061.9044
2024-04-29 02:37:29 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_1] Trial #842: GFLOPs: 924.7992. Time: 250.3376 us. Best GFLOPs: 1061.9044
2024-04-29 02:37:29 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_1] Trial #843: GFLOPs: 1057.0484. Time: 219.0175 us. Best GFLOPs: 1061.9044
2024-04-29 02:37:29 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_1] Trial #844: GFLOPs: 971.4016. Time: 238.3279 us. Best GFLOPs: 1061.9044
2024-04-29 02:37:29 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_1] Trial #845: GFLOPs: 965.2564. Time: 239.8452 us. Best GFLOPs: 1061.9044
2024-04-29 02:37:29 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_1] Trial #846: GFLOPs: 967.4412. Time: 239.3035 us. Best GFLOPs: 1061.9044
2024-04-29 02:37:29 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_1] Trial #847: GFLOPs: 949.6944. Time: 243.7753 us. Best GFLOPs: 1061.9044
2024-04-29 02:37:29 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_1] Trial #848: GFLOPs: 950.6655. Time: 243.5263 us. Best GFLOPs: 1061.9044
2024-04-29 02:37:29 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_1] Trial #849: GFLOPs: 955.0451. Time: 242.4096 us. Best GFLOPs: 1061.9044
2024-04-29 02:37:29 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_1] Trial #850: GFLOPs: 951.8108. Time: 243.2333 us. Best GFLOPs: 1061.9044
2024-04-29 02:37:29 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_1] Trial #851: GFLOPs: 954.2490. Time: 242.6118 us. Best GFLOPs: 1061.9044
2024-04-29 02:37:29 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_1] Trial #852: GFLOPs: 942.5559. Time: 245.6216 us. Best GFLOPs: 1061.9044
2024-04-29 02:37:29 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_1] Trial #853: GFLOPs: 220.6377. Time: 1049.2863 us. Best GFLOPs: 1061.9044
2024-04-29 02:37:29 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_1] Trial #854: GFLOPs: 505.3963. Time: 458.0803 us. Best GFLOPs: 1061.9044
2024-04-29 02:37:29 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_1] Trial #855: GFLOPs: 412.3156. Time: 561.4924 us. Best GFLOPs: 1061.9044
2024-04-29 02:37:29 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_1] Trial #856: GFLOPs: 916.1809. Time: 252.6925 us. Best GFLOPs: 1061.9044
2024-04-29 02:37:29 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_1] Trial #857: GFLOPs: 970.2589. Time: 238.6085 us. Best GFLOPs: 1061.9044
2024-04-29 02:37:29 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_1] Trial #858: GFLOPs: 663.6882. Time: 348.8265 us. Best GFLOPs: 1061.9044
2024-04-29 02:37:29 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_1] Trial #859: GFLOPs: 1011.3335. Time: 228.9176 us. Best GFLOPs: 1061.9044
2024-04-29 02:37:29 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_1] Trial #860: GFLOPs: 923.9434. Time: 250.5695 us. Best GFLOPs: 1061.9044
2024-04-29 02:37:29 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_1] Trial #861: GFLOPs: 967.7560. Time: 239.2257 us. Best GFLOPs: 1061.9044
2024-04-29 02:37:29 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_1] Trial #862: GFLOPs: 955.1839. Time: 242.3743 us. Best GFLOPs: 1061.9044
2024-04-29 02:37:29 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_1] Trial #863: GFLOPs: 938.6946. Time: 246.6319 us. Best GFLOPs: 1061.9044
2024-04-29 02:37:29 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_1] Trial #864: GFLOPs: 914.7973. Time: 253.0747 us. Best GFLOPs: 1061.9044
2024-04-29 02:37:29 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_1] Trial #865: GFLOPs: 883.6324. Time: 262.0004 us. Best GFLOPs: 1061.9044
2024-04-29 02:37:29 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_1] Trial #866: GFLOPs: 879.6314. Time: 263.1921 us. Best GFLOPs: 1061.9044
2024-04-29 02:37:29 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_1] Trial #867: GFLOPs: 904.2357. Time: 256.0307 us. Best GFLOPs: 1061.9044
2024-04-29 02:37:29 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_1] Trial #868: GFLOPs: 934.1551. Time: 247.8304 us. Best GFLOPs: 1061.9044
2024-04-29 02:37:29 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_1] Trial #869: GFLOPs: 919.1668. Time: 251.8717 us. Best GFLOPs: 1061.9044
2024-04-29 02:37:29 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_1] Trial #870: GFLOPs: 944.0782. Time: 245.2255 us. Best GFLOPs: 1061.9044
2024-04-29 02:37:29 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_1] Trial #871: GFLOPs: 792.9407. Time: 291.9664 us. Best GFLOPs: 1061.9044
2024-04-29 02:37:29 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_1] Trial #872: GFLOPs: 987.7010. Time: 234.3949 us. Best GFLOPs: 1061.9044
2024-04-29 02:37:29 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_1] Trial #873: GFLOPs: 999.4700. Time: 231.6348 us. Best GFLOPs: 1061.9044
2024-04-29 02:37:29 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_1] Trial #874: GFLOPs: 1084.5710. Time: 213.4596 us. Best GFLOPs: 1084.5710
2024-04-29 02:37:29 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_1] Trial #875: GFLOPs: 882.1421. Time: 262.4431 us. Best GFLOPs: 1084.5710
2024-04-29 02:37:29 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_1] Trial #876: GFLOPs: 490.4950. Time: 471.9968 us. Best GFLOPs: 1084.5710
2024-04-29 02:37:29 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_1] Trial #877: GFLOPs: 627.5198. Time: 368.9319 us. Best GFLOPs: 1084.5710
2024-04-29 02:37:29 [INFO] [task_scheduler.cc:121] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_1] Trial #878: Error in building:
LocalBuilder: Timeout, killed after 30.0 seconds
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(1), T.int64(28), T.int64(28), T.int64(128)), "float32"), p1: T.Buffer((T.int64(4), T.int64(1), T.int64(3), T.int64(3), T.int64(128), T.int64(32)), "float32"), p2: T.Buffer((T.int64(1), T.int64(4), T.int64(1), T.int64(1), T.int64(32)), "float32"), p3: T.Buffer((T.int64(1), T.int64(4), T.int64(28), T.int64(28), T.int64(32)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(4), T.int64(28), T.int64(28), T.int64(32)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        data_pad = T.alloc_buffer((T.int64(1), T.int64(1), T.int64(30), T.int64(30), T.int64(128)))
        conv2d_NCHWc = T.alloc_buffer((T.int64(1), T.int64(4), T.int64(28), T.int64(28), T.int64(32)))
        for n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_fused_fused in T.parallel(T.int64(112), annotations={"pragma_auto_unroll_max_step": 512, "pragma_unroll_explicit": 1}):
            for ax0, ax1, ax2, ax3, ax4 in T.grid(T.int64(1), T.int64(1), T.int64(9), T.int64(3), T.int64(128)):
                with T.block("data_pad"):
                    v_i0, v_i1 = T.axis.remap("SS", [ax0, ax1])
                    v_i2 = T.axis.spatial(T.int64(30), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_fused_fused % T.int64(16) // T.int64(4) * T.int64(7) + ax2)
                    v_i3 = T.axis.spatial(T.int64(30), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_fused_fused // T.int64(16) * T.int64(4) + n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_fused_fused % T.int64(4) + ax3)
                    v_i4 = T.axis.spatial(T.int64(128), ax4)
                    T.reads(p0[v_i0, v_i1, v_i2 - T.int64(1), v_i3 - T.int64(1), v_i4])
                    T.writes(data_pad[v_i0, v_i1, v_i2, v_i3, v_i4])
                    data_pad[v_i0, v_i1, v_i2, v_i3, v_i4] = T.if_then_else(T.int64(1) <= v_i2 and v_i2 < T.int64(29) and T.int64(1) <= v_i3 and v_i3 < T.int64(29), p0[v_i0, v_i1, v_i2 - T.int64(1), v_i3 - T.int64(1), v_i4], T.float32(0))
            for oc_block_1 in range(T.int64(1)):
                for n_2_init, oc_chunk_2_init, oh_2_init, ow_2_init, oc_block_2_init, n_3_init, oc_chunk_3_init, oh_3_init, ow_3_init, oc_block_3_init in T.grid(T.int64(1), T.int64(4), T.int64(1), T.int64(1), T.int64(32), T.int64(1), T.int64(1), T.int64(7), T.int64(1), T.int64(1)):
                    with T.block("conv2d_NCHWc_init"):
                        v_n = T.axis.spatial(T.int64(1), n_2_init + n_3_init)
                        v_oc_chunk = T.axis.spatial(T.int64(4), oc_chunk_2_init + oc_chunk_3_init)
                        v_oh = T.axis.spatial(T.int64(28), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_fused_fused % T.int64(16) // T.int64(4) * T.int64(7) + oh_2_init * T.int64(7) + oh_3_init)
                        v_ow = T.axis.spatial(T.int64(28), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_fused_fused // T.int64(16) * T.int64(4) + n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_fused_fused % T.int64(4) + ow_2_init + ow_3_init)
                        v_oc_block = T.axis.spatial(T.int64(32), oc_block_1 * T.int64(32) + oc_block_2_init + oc_block_3_init)
                        T.reads()
                        T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                        T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                        conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = T.float32(0)
                for ic_0, kh_0, kw_0, n_2, oc_chunk_2, oh_2, ow_2, oc_block_2, ic_1, kh_1, kw_1, n_3, oc_chunk_3, oh_3, ow_3, oc_block_3 in T.grid(T.int64(16), T.int64(1), T.int64(3), T.int64(1), T.int64(4), T.int64(1), T.int64(1), T.int64(32), T.int64(8), T.int64(3), T.int64(1), T.int64(1), T.int64(1), T.int64(7), T.int64(1), T.int64(1)):
                    with T.block("conv2d_NCHWc_update"):
                        v_n = T.axis.spatial(T.int64(1), n_2 + n_3)
                        v_oc_chunk = T.axis.spatial(T.int64(4), oc_chunk_2 + oc_chunk_3)
                        v_oh = T.axis.spatial(T.int64(28), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_fused_fused % T.int64(16) // T.int64(4) * T.int64(7) + oh_2 * T.int64(7) + oh_3)
                        v_ow = T.axis.spatial(T.int64(28), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_fused_fused // T.int64(16) * T.int64(4) + n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_fused_fused % T.int64(4) + ow_2 + ow_3)
                        v_oc_block = T.axis.spatial(T.int64(32), oc_block_1 * T.int64(32) + oc_block_2 + oc_block_3)
                        v_ic = T.axis.reduce(T.int64(128), ic_0 * T.int64(8) + ic_1)
                        v_kh = T.axis.reduce(T.int64(3), kh_0 * T.int64(3) + kh_1)
                        v_kw = T.axis.reduce(T.int64(3), kw_0 + kw_1)
                        T.reads(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block], data_pad[v_n, v_ic // T.int64(128), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(128)], p1[v_oc_chunk, v_ic // T.int64(128), v_kh, v_kw, v_ic % T.int64(128), v_oc_block])
                        T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                        T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                        conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] + data_pad[v_n, v_ic // T.int64(128), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(128)] * p1[v_oc_chunk, v_ic // T.int64(128), v_kh, v_kw, v_ic % T.int64(128), v_oc_block]
                for ax0, ax1, ax2 in T.grid(T.int64(1), T.int64(4), T.int64(7)):
                    for ax3_ax4_fused in T.vectorized(T.int64(32)):
                        with T.block("T_relu"):
                            v_ax0, v_ax1 = T.axis.remap("SS", [ax0, ax1])
                            v_ax2 = T.axis.spatial(T.int64(28), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_fused_fused % T.int64(16) // T.int64(4) * T.int64(7) + ax2)
                            v_ax3 = T.axis.spatial(T.int64(28), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_fused_fused // T.int64(16) * T.int64(4) + n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_fused_fused % T.int64(4))
                            v_ax4 = T.axis.spatial(T.int64(32), ax3_ax4_fused)
                            T.reads(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4], p3[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                            T.writes(T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                            T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.max(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] + p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4] + p3[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], T.float32(0))
b0 = sch.get_block(name="data_pad", func_name="main")
b1 = sch.get_block(name="conv2d_NCHWc", func_name="main")
b2 = sch.get_block(name="T_add", func_name="main")
b3 = sch.get_block(name="T_add_1", func_name="main")
b4 = sch.get_block(name="root", func_name="main")
sch.compute_inline(block=b3)
sch.compute_inline(block=b2)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSRSRS")
l5, l6, l7, l8, l9, l10, l11, l12 = sch.get_loops(block=b1)
v13, v14, v15, v16 = sch.sample_perfect_tile(loop=l5, n=4, max_innermost_factor=64, decision=[1, 1, 1, 1])
l17, l18, l19, l20 = sch.split(loop=l5, factors=[v13, v14, v15, v16], preserve_unit_iters=True)
v21, v22, v23, v24 = sch.sample_perfect_tile(loop=l6, n=4, max_innermost_factor=64, decision=[1, 1, 4, 1])
l25, l26, l27, l28 = sch.split(loop=l6, factors=[v21, v22, v23, v24], preserve_unit_iters=True)
v29, v30, v31, v32 = sch.sample_perfect_tile(loop=l7, n=4, max_innermost_factor=64, decision=[1, 4, 1, 7])
l33, l34, l35, l36 = sch.split(loop=l7, factors=[v29, v30, v31, v32], preserve_unit_iters=True)
v37, v38, v39, v40 = sch.sample_perfect_tile(loop=l8, n=4, max_innermost_factor=64, decision=[7, 4, 1, 1])
l41, l42, l43, l44 = sch.split(loop=l8, factors=[v37, v38, v39, v40], preserve_unit_iters=True)
v45, v46, v47, v48 = sch.sample_perfect_tile(loop=l9, n=4, max_innermost_factor=64, decision=[1, 1, 32, 1])
l49, l50, l51, l52 = sch.split(loop=l9, factors=[v45, v46, v47, v48], preserve_unit_iters=True)
v53, v54 = sch.sample_perfect_tile(loop=l10, n=2, max_innermost_factor=64, decision=[16, 8])
l55, l56 = sch.split(loop=l10, factors=[v53, v54], preserve_unit_iters=True)
v57, v58 = sch.sample_perfect_tile(loop=l11, n=2, max_innermost_factor=64, decision=[1, 3])
l59, l60 = sch.split(loop=l11, factors=[v57, v58], preserve_unit_iters=True)
v61, v62 = sch.sample_perfect_tile(loop=l12, n=2, max_innermost_factor=64, decision=[3, 1])
l63, l64 = sch.split(loop=l12, factors=[v61, v62], preserve_unit_iters=True)
sch.reorder(l17, l25, l33, l41, l49, l18, l26, l34, l42, l50, l55, l59, l63, l19, l27, l35, l43, l51, l56, l60, l64, l20, l28, l36, l44, l52)
b65, = sch.get_consumers(block=b1)
sch.reverse_compute_at(block=b65, loop=l50, preserve_unit_loops=True, index=-1)
sch.annotate(block_or_loop=b4, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b4, ann_key="meta_schedule.vectorize", ann_val=64)
v66 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b4, ann_key="meta_schedule.unroll_explicit", ann_val=v66)
l67 = sch.sample_compute_location(block=b0, decision=8)
sch.compute_at(block=b0, loop=l67, preserve_unit_loops=True, index=-1)
sch.enter_postproc()
b68 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b68, ann_key="meta_schedule.parallel")
sch.unannotate(block_or_loop=b68, ann_key="meta_schedule.vectorize")
sch.unannotate(block_or_loop=b68, ann_key="meta_schedule.unroll_explicit")
b69, b70, b71 = sch.get_child_blocks(b68)
l72, l73, l74, l75, l76, l77, l78, l79, l80, l81, l82, l83, l84, l85 = sch.get_loops(block=b69)
l86 = sch.fuse(l72, l73, l74, l75, l76, l77, l78, l79, l80, preserve_unit_iters=True)
sch.parallel(loop=l86)
l87, l88, l89, l90, l91, l92, l93, l94, l95, l96, l97, l98, l99, l100, l101, l102, l103, l104 = sch.get_loops(block=b70)
l105 = sch.fuse(l87, preserve_unit_iters=True)
sch.parallel(loop=l105)
sch.annotate(block_or_loop=l105, ann_key="pragma_auto_unroll_max_step", ann_val=512)
sch.annotate(block_or_loop=l105, ann_key="pragma_unroll_explicit", ann_val=1)
l106, l107, l108, l109, l110, l111, l112 = sch.get_loops(block=b71)
l113 = sch.fuse(l111, l112, preserve_unit_iters=True)
sch.vectorize(loop=l113)
b114 = sch.get_block(name="conv2d_NCHWc", func_name="main")
l115, l116, l117, l118, l119, l120, l121, l122, l123, l124, l125, l126, l127, l128, l129, l130, l131, l132 = sch.get_loops(block=b114)
b133 = sch.decompose_reduction(block=b114, loop=l117)
2024-04-29 02:37:29 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_1] Trial #879: GFLOPs: 943.0882. Time: 245.4829 us. Best GFLOPs: 1084.5710
2024-04-29 02:37:29 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_1] Trial #880: GFLOPs: 900.6922. Time: 257.0379 us. Best GFLOPs: 1084.5710
2024-04-29 02:37:29 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_1] Trial #881: GFLOPs: 846.6763. Time: 273.4363 us. Best GFLOPs: 1084.5710
2024-04-29 02:37:29 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_1] Trial #882: GFLOPs: 750.8462. Time: 308.3349 us. Best GFLOPs: 1084.5710
2024-04-29 02:37:29 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_1] Trial #883: GFLOPs: 903.8978. Time: 256.1264 us. Best GFLOPs: 1084.5710
2024-04-29 02:37:29 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_1] Trial #884: GFLOPs: 612.6815. Time: 377.8669 us. Best GFLOPs: 1084.5710
2024-04-29 02:37:29 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_1] Trial #885: GFLOPs: 778.1429. Time: 297.5187 us. Best GFLOPs: 1084.5710
2024-04-29 02:37:29 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_1] Trial #886: GFLOPs: 922.8722. Time: 250.8604 us. Best GFLOPs: 1084.5710
2024-04-29 02:37:29 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_1] Trial #887: GFLOPs: 770.9879. Time: 300.2798 us. Best GFLOPs: 1084.5710
2024-04-29 02:37:29 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_1] Trial #888: GFLOPs: 715.8161. Time: 323.4240 us. Best GFLOPs: 1084.5710
2024-04-29 02:37:29 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_1] Trial #889: GFLOPs: 843.1613. Time: 274.5763 us. Best GFLOPs: 1084.5710
2024-04-29 02:37:29 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_1] Trial #890: GFLOPs: 846.5653. Time: 273.4722 us. Best GFLOPs: 1084.5710
2024-04-29 02:37:29 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_1] Trial #891: GFLOPs: 848.9508. Time: 272.7038 us. Best GFLOPs: 1084.5710
2024-04-29 02:37:29 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_1] Trial #892: GFLOPs: 775.0286. Time: 298.7142 us. Best GFLOPs: 1084.5710
2024-04-29 02:37:29 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_1] Trial #893: GFLOPs: 770.2563. Time: 300.5650 us. Best GFLOPs: 1084.5710
2024-04-29 02:37:29 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_1] Trial #894: GFLOPs: 34.9437. Time: 6625.2822 us. Best GFLOPs: 1084.5710
2024-04-29 02:37:29 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_1] Trial #895: GFLOPs: 9.3629. Time: 24726.5022 us. Best GFLOPs: 1084.5710
2024-04-29 02:37:29 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_1] Trial #896: GFLOPs: 11.8023. Time: 19615.8680 us. Best GFLOPs: 1084.5710
2024-04-29 02:49:01 [INFO] [evolutionary_search.cc:713] Generating candidates......
2024-04-29 02:49:02 [INFO] [evolutionary_search.cc:715] Picked top 102 candidate(s) from database
2024-04-29 02:49:06 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x3858de8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x3c39958)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0xa2a8408)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x3f4f298)]: 0 failure(s)
2024-04-29 02:49:06 [INFO] [evolutionary_search.cc:723] Sampled 410 candidate(s)
2024-04-29 02:49:19 [INFO] [evolutionary_search.cc:621] Evolve iter #0 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x3858de8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x3c39958)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0xa2a8408)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x3f4f298)]: 0 failure(s)
2024-04-29 02:49:31 [INFO] [evolutionary_search.cc:621] Evolve iter #1 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x3858de8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x3c39958)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0xa2a8408)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x3f4f298)]: 0 failure(s)
2024-04-29 02:49:44 [INFO] [evolutionary_search.cc:621] Evolve iter #2 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x3858de8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x3c39958)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0xa2a8408)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x3f4f298)]: 0 failure(s)
2024-04-29 02:49:56 [INFO] [evolutionary_search.cc:621] Evolve iter #3 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x3858de8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x3c39958)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0xa2a8408)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x3f4f298)]: 0 failure(s)
2024-04-29 02:50:04 [INFO] [evolutionary_search.cc:649] Scores of the best 64 candidates:
[1 : 16]:	0.9883  0.9682  0.9682  0.9616  0.9613  0.9587  0.9518  0.9381  0.9330  0.9277  0.9202  0.9139  0.9007  0.8994  0.8994  0.8935
[17 : 32]:	0.8912  0.8912  0.8907  0.8907  0.8880  0.8856  0.8816  0.8805  0.8726  0.8726  0.8700  0.8671  0.8669  0.8649  0.8637  0.8637
[33 : 48]:	0.8614  0.8576  0.8575  0.8575  0.8556  0.8506  0.8500  0.8491  0.8468  0.8468  0.8457  0.8454  0.8385  0.8380  0.8358  0.8269
[49 : 64]:	0.8251  0.8239  0.8231  0.8216  0.8185  0.8185  0.8184  0.8152  0.8147  0.8147  0.8147  0.8118  0.8090  0.8081  0.8079  0.8070
2024-04-29 02:50:04 [INFO] [evolutionary_search.cc:727] Got 64 candidate(s) with evolutionary search
2024-04-29 02:50:04 [INFO] [evolutionary_search.cc:730] Sending 64 candidates(s) for measurement
2024-04-29 02:51:44 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_1] Trial #897: GFLOPs: 1069.3676. Time: 216.4944 us. Best GFLOPs: 1084.5710
2024-04-29 02:51:44 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_1] Trial #898: GFLOPs: 1052.9317. Time: 219.8738 us. Best GFLOPs: 1084.5710
2024-04-29 02:51:44 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_1] Trial #899: GFLOPs: 1067.6943. Time: 216.8337 us. Best GFLOPs: 1084.5710
2024-04-29 02:51:44 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_1] Trial #900: GFLOPs: 1039.3911. Time: 222.7382 us. Best GFLOPs: 1084.5710
2024-04-29 02:51:44 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_1] Trial #901: GFLOPs: 1042.3002. Time: 222.1165 us. Best GFLOPs: 1084.5710
2024-04-29 02:51:44 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_1] Trial #902: GFLOPs: 1085.0164. Time: 213.3720 us. Best GFLOPs: 1085.0164
2024-04-29 02:51:44 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_1] Trial #903: GFLOPs: 1064.2833. Time: 217.5286 us. Best GFLOPs: 1085.0164
2024-04-29 02:51:44 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_1] Trial #904: GFLOPs: 995.9855. Time: 232.4452 us. Best GFLOPs: 1085.0164
2024-04-29 02:51:44 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_1] Trial #905: GFLOPs: 966.5557. Time: 239.5227 us. Best GFLOPs: 1085.0164
2024-04-29 02:51:44 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_1] Trial #906: GFLOPs: 987.3006. Time: 234.4899 us. Best GFLOPs: 1085.0164
2024-04-29 02:51:44 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_1] Trial #907: GFLOPs: 943.9070. Time: 245.2700 us. Best GFLOPs: 1085.0164
2024-04-29 02:51:44 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_1] Trial #908: GFLOPs: 1035.5894. Time: 223.5559 us. Best GFLOPs: 1085.0164
2024-04-29 02:51:44 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_1] Trial #909: GFLOPs: 1044.7127. Time: 221.6036 us. Best GFLOPs: 1085.0164
2024-04-29 02:51:44 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_1] Trial #910: GFLOPs: 1046.0930. Time: 221.3112 us. Best GFLOPs: 1085.0164
2024-04-29 02:51:44 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_1] Trial #911: GFLOPs: 1042.4695. Time: 222.0804 us. Best GFLOPs: 1085.0164
2024-04-29 02:51:44 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_1] Trial #912: GFLOPs: 957.6303. Time: 241.7552 us. Best GFLOPs: 1085.0164
2024-04-29 02:51:44 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_1] Trial #913: GFLOPs: 981.9846. Time: 235.7594 us. Best GFLOPs: 1085.0164
2024-04-29 02:51:44 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_1] Trial #914: GFLOPs: 571.9248. Time: 404.7946 us. Best GFLOPs: 1085.0164
2024-04-29 02:51:44 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_1] Trial #915: GFLOPs: 500.1263. Time: 462.9072 us. Best GFLOPs: 1085.0164
2024-04-29 02:51:44 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_1] Trial #916: GFLOPs: 497.6007. Time: 465.2567 us. Best GFLOPs: 1085.0164
2024-04-29 02:51:44 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_1] Trial #917: GFLOPs: 1047.3548. Time: 221.0445 us. Best GFLOPs: 1085.0164
2024-04-29 02:51:44 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_1] Trial #918: GFLOPs: 997.5110. Time: 232.0897 us. Best GFLOPs: 1085.0164
2024-04-29 02:51:44 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_1] Trial #919: GFLOPs: 959.8864. Time: 241.1869 us. Best GFLOPs: 1085.0164
2024-04-29 02:51:44 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_1] Trial #920: GFLOPs: 1000.2775. Time: 231.4478 us. Best GFLOPs: 1085.0164
2024-04-29 02:51:44 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_1] Trial #921: GFLOPs: 1013.2076. Time: 228.4942 us. Best GFLOPs: 1085.0164
2024-04-29 02:51:44 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_1] Trial #922: GFLOPs: 1012.8759. Time: 228.5690 us. Best GFLOPs: 1085.0164
2024-04-29 02:51:44 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_1] Trial #923: GFLOPs: 955.6560. Time: 242.2546 us. Best GFLOPs: 1085.0164
2024-04-29 02:51:44 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_1] Trial #924: GFLOPs: 962.6949. Time: 240.4833 us. Best GFLOPs: 1085.0164
2024-04-29 02:51:44 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_1] Trial #925: GFLOPs: 974.1765. Time: 237.6490 us. Best GFLOPs: 1085.0164
2024-04-29 02:51:44 [INFO] [task_scheduler.cc:121] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_1] Trial #926: Error in building:
LocalBuilder: Timeout, killed after 30.0 seconds
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(1), T.int64(28), T.int64(28), T.int64(128)), "float32"), p1: T.Buffer((T.int64(4), T.int64(1), T.int64(3), T.int64(3), T.int64(128), T.int64(32)), "float32"), p2: T.Buffer((T.int64(1), T.int64(4), T.int64(1), T.int64(1), T.int64(32)), "float32"), p3: T.Buffer((T.int64(1), T.int64(4), T.int64(28), T.int64(28), T.int64(32)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(4), T.int64(28), T.int64(28), T.int64(32)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        data_pad = T.alloc_buffer((T.int64(1), T.int64(1), T.int64(30), T.int64(30), T.int64(128)))
        conv2d_NCHWc = T.alloc_buffer((T.int64(1), T.int64(4), T.int64(28), T.int64(28), T.int64(32)))
        for n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_fused_fused in T.parallel(T.int64(224), annotations={"pragma_auto_unroll_max_step": 512, "pragma_unroll_explicit": 1}):
            for ax0, ax1, ax2, ax3, ax4 in T.grid(T.int64(1), T.int64(1), T.int64(9), T.int64(3), T.int64(128)):
                with T.block("data_pad"):
                    v_i0, v_i1 = T.axis.remap("SS", [ax0, ax1])
                    v_i2 = T.axis.spatial(T.int64(30), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_fused_fused // T.int64(112) * T.int64(14) + n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_fused_fused % T.int64(4) // T.int64(2) * T.int64(7) + ax2)
                    v_i3 = T.axis.spatial(T.int64(30), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_fused_fused % T.int64(2) + n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_fused_fused % T.int64(112) // T.int64(8) * T.int64(2) + ax3)
                    v_i4 = T.axis.spatial(T.int64(128), ax4)
                    T.reads(p0[v_i0, v_i1, v_i2 - T.int64(1), v_i3 - T.int64(1), v_i4])
                    T.writes(data_pad[v_i0, v_i1, v_i2, v_i3, v_i4])
                    data_pad[v_i0, v_i1, v_i2, v_i3, v_i4] = T.if_then_else(T.int64(1) <= v_i2 and v_i2 < T.int64(29) and T.int64(1) <= v_i3 and v_i3 < T.int64(29), p0[v_i0, v_i1, v_i2 - T.int64(1), v_i3 - T.int64(1), v_i4], T.float32(0))
            for oc_block_1 in range(T.int64(1)):
                for n_2_init, oc_chunk_2_init, oh_2_init, ow_2_init, oc_block_2_init, n_3_init, oc_chunk_3_init, oh_3_init, ow_3_init, oc_block_3_init in T.grid(T.int64(1), T.int64(2), T.int64(1), T.int64(1), T.int64(32), T.int64(1), T.int64(1), T.int64(7), T.int64(1), T.int64(1)):
                    with T.block("conv2d_NCHWc_init"):
                        v_n = T.axis.spatial(T.int64(1), n_2_init + n_3_init)
                        v_oc_chunk = T.axis.spatial(T.int64(4), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_fused_fused % T.int64(8) // T.int64(4) * T.int64(2) + oc_chunk_2_init + oc_chunk_3_init)
                        v_oh = T.axis.spatial(T.int64(28), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_fused_fused // T.int64(112) * T.int64(14) + n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_fused_fused % T.int64(4) // T.int64(2) * T.int64(7) + oh_2_init * T.int64(7) + oh_3_init)
                        v_ow = T.axis.spatial(T.int64(28), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_fused_fused % T.int64(112) // T.int64(8) * T.int64(2) + n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_fused_fused % T.int64(2) + ow_2_init + ow_3_init)
                        v_oc_block = T.axis.spatial(T.int64(32), oc_block_1 * T.int64(32) + oc_block_2_init + oc_block_3_init)
                        T.reads()
                        T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                        T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                        conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = T.float32(0)
                for ic_0, kh_0, kw_0, n_2, oc_chunk_2, oh_2, ow_2, oc_block_2, ic_1, kh_1, kw_1, n_3, oc_chunk_3, oh_3, ow_3, oc_block_3 in T.grid(T.int64(32), T.int64(1), T.int64(3), T.int64(1), T.int64(2), T.int64(1), T.int64(1), T.int64(32), T.int64(4), T.int64(3), T.int64(1), T.int64(1), T.int64(1), T.int64(7), T.int64(1), T.int64(1)):
                    with T.block("conv2d_NCHWc_update"):
                        v_n = T.axis.spatial(T.int64(1), n_2 + n_3)
                        v_oc_chunk = T.axis.spatial(T.int64(4), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_fused_fused % T.int64(8) // T.int64(4) * T.int64(2) + oc_chunk_2 + oc_chunk_3)
                        v_oh = T.axis.spatial(T.int64(28), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_fused_fused // T.int64(112) * T.int64(14) + n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_fused_fused % T.int64(4) // T.int64(2) * T.int64(7) + oh_2 * T.int64(7) + oh_3)
                        v_ow = T.axis.spatial(T.int64(28), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_fused_fused % T.int64(112) // T.int64(8) * T.int64(2) + n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_fused_fused % T.int64(2) + ow_2 + ow_3)
                        v_oc_block = T.axis.spatial(T.int64(32), oc_block_1 * T.int64(32) + oc_block_2 + oc_block_3)
                        v_ic = T.axis.reduce(T.int64(128), ic_0 * T.int64(4) + ic_1)
                        v_kh = T.axis.reduce(T.int64(3), kh_0 * T.int64(3) + kh_1)
                        v_kw = T.axis.reduce(T.int64(3), kw_0 + kw_1)
                        T.reads(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block], data_pad[v_n, v_ic // T.int64(128), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(128)], p1[v_oc_chunk, v_ic // T.int64(128), v_kh, v_kw, v_ic % T.int64(128), v_oc_block])
                        T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                        T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                        conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] + data_pad[v_n, v_ic // T.int64(128), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(128)] * p1[v_oc_chunk, v_ic // T.int64(128), v_kh, v_kw, v_ic % T.int64(128), v_oc_block]
                for ax0, ax1, ax2 in T.grid(T.int64(1), T.int64(2), T.int64(7)):
                    for ax3_ax4_fused in T.vectorized(T.int64(32)):
                        with T.block("T_relu"):
                            v_ax0 = T.axis.spatial(T.int64(1), ax0)
                            v_ax1 = T.axis.spatial(T.int64(4), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_fused_fused % T.int64(8) // T.int64(4) * T.int64(2) + ax1)
                            v_ax2 = T.axis.spatial(T.int64(28), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_fused_fused // T.int64(112) * T.int64(14) + n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_fused_fused % T.int64(4) // T.int64(2) * T.int64(7) + ax2)
                            v_ax3 = T.axis.spatial(T.int64(28), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_fused_fused % T.int64(112) // T.int64(8) * T.int64(2) + n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_fused_fused % T.int64(2))
                            v_ax4 = T.axis.spatial(T.int64(32), ax3_ax4_fused)
                            T.reads(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4], p3[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                            T.writes(T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                            T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.max(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] + p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4] + p3[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], T.float32(0))
b0 = sch.get_block(name="data_pad", func_name="main")
b1 = sch.get_block(name="conv2d_NCHWc", func_name="main")
b2 = sch.get_block(name="T_add", func_name="main")
b3 = sch.get_block(name="T_add_1", func_name="main")
b4 = sch.get_block(name="root", func_name="main")
sch.compute_inline(block=b3)
sch.compute_inline(block=b2)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSRSRS")
l5, l6, l7, l8, l9, l10, l11, l12 = sch.get_loops(block=b1)
v13, v14, v15, v16 = sch.sample_perfect_tile(loop=l5, n=4, max_innermost_factor=64, decision=[1, 1, 1, 1])
l17, l18, l19, l20 = sch.split(loop=l5, factors=[v13, v14, v15, v16], preserve_unit_iters=True)
v21, v22, v23, v24 = sch.sample_perfect_tile(loop=l6, n=4, max_innermost_factor=64, decision=[1, 2, 2, 1])
l25, l26, l27, l28 = sch.split(loop=l6, factors=[v21, v22, v23, v24], preserve_unit_iters=True)
v29, v30, v31, v32 = sch.sample_perfect_tile(loop=l7, n=4, max_innermost_factor=64, decision=[2, 2, 1, 7])
l33, l34, l35, l36 = sch.split(loop=l7, factors=[v29, v30, v31, v32], preserve_unit_iters=True)
v37, v38, v39, v40 = sch.sample_perfect_tile(loop=l8, n=4, max_innermost_factor=64, decision=[14, 2, 1, 1])
l41, l42, l43, l44 = sch.split(loop=l8, factors=[v37, v38, v39, v40], preserve_unit_iters=True)
v45, v46, v47, v48 = sch.sample_perfect_tile(loop=l9, n=4, max_innermost_factor=64, decision=[1, 1, 32, 1])
l49, l50, l51, l52 = sch.split(loop=l9, factors=[v45, v46, v47, v48], preserve_unit_iters=True)
v53, v54 = sch.sample_perfect_tile(loop=l10, n=2, max_innermost_factor=64, decision=[32, 4])
l55, l56 = sch.split(loop=l10, factors=[v53, v54], preserve_unit_iters=True)
v57, v58 = sch.sample_perfect_tile(loop=l11, n=2, max_innermost_factor=64, decision=[1, 3])
l59, l60 = sch.split(loop=l11, factors=[v57, v58], preserve_unit_iters=True)
v61, v62 = sch.sample_perfect_tile(loop=l12, n=2, max_innermost_factor=64, decision=[3, 1])
l63, l64 = sch.split(loop=l12, factors=[v61, v62], preserve_unit_iters=True)
sch.reorder(l17, l25, l33, l41, l49, l18, l26, l34, l42, l50, l55, l59, l63, l19, l27, l35, l43, l51, l56, l60, l64, l20, l28, l36, l44, l52)
b65, = sch.get_consumers(block=b1)
sch.reverse_compute_at(block=b65, loop=l50, preserve_unit_loops=True, index=-1)
sch.annotate(block_or_loop=b4, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b4, ann_key="meta_schedule.vectorize", ann_val=64)
v66 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b4, ann_key="meta_schedule.unroll_explicit", ann_val=v66)
l67 = sch.sample_compute_location(block=b0, decision=8)
sch.compute_at(block=b0, loop=l67, preserve_unit_loops=True, index=-1)
sch.enter_postproc()
b68 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b68, ann_key="meta_schedule.parallel")
sch.unannotate(block_or_loop=b68, ann_key="meta_schedule.vectorize")
sch.unannotate(block_or_loop=b68, ann_key="meta_schedule.unroll_explicit")
b69, b70, b71 = sch.get_child_blocks(b68)
l72, l73, l74, l75, l76, l77, l78, l79, l80, l81, l82, l83, l84, l85 = sch.get_loops(block=b69)
l86 = sch.fuse(l72, l73, l74, l75, l76, l77, l78, l79, l80, preserve_unit_iters=True)
sch.parallel(loop=l86)
l87, l88, l89, l90, l91, l92, l93, l94, l95, l96, l97, l98, l99, l100, l101, l102, l103, l104 = sch.get_loops(block=b70)
l105 = sch.fuse(l87, preserve_unit_iters=True)
sch.parallel(loop=l105)
sch.annotate(block_or_loop=l105, ann_key="pragma_auto_unroll_max_step", ann_val=512)
sch.annotate(block_or_loop=l105, ann_key="pragma_unroll_explicit", ann_val=1)
l106, l107, l108, l109, l110, l111, l112 = sch.get_loops(block=b71)
l113 = sch.fuse(l111, l112, preserve_unit_iters=True)
sch.vectorize(loop=l113)
b114 = sch.get_block(name="conv2d_NCHWc", func_name="main")
l115, l116, l117, l118, l119, l120, l121, l122, l123, l124, l125, l126, l127, l128, l129, l130, l131, l132 = sch.get_loops(block=b114)
b133 = sch.decompose_reduction(block=b114, loop=l117)
2024-04-29 02:51:44 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_1] Trial #927: GFLOPs: 975.1679. Time: 237.4074 us. Best GFLOPs: 1085.0164
2024-04-29 02:51:44 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_1] Trial #928: GFLOPs: 733.6921. Time: 315.5439 us. Best GFLOPs: 1085.0164
2024-04-29 02:51:44 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_1] Trial #929: GFLOPs: 1060.6943. Time: 218.2646 us. Best GFLOPs: 1085.0164
2024-04-29 02:51:44 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_1] Trial #930: GFLOPs: 984.5266. Time: 235.1506 us. Best GFLOPs: 1085.0164
2024-04-29 02:51:44 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_1] Trial #931: GFLOPs: 979.7062. Time: 236.3077 us. Best GFLOPs: 1085.0164
2024-04-29 02:51:44 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_1] Trial #932: GFLOPs: 896.2923. Time: 258.2997 us. Best GFLOPs: 1085.0164
2024-04-29 02:51:44 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_1] Trial #933: GFLOPs: 1040.6248. Time: 222.4741 us. Best GFLOPs: 1085.0164
2024-04-29 02:51:44 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_1] Trial #934: GFLOPs: 960.3807. Time: 241.0628 us. Best GFLOPs: 1085.0164
2024-04-29 02:51:44 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_1] Trial #935: GFLOPs: 1021.1250. Time: 226.7226 us. Best GFLOPs: 1085.0164
2024-04-29 02:51:44 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_1] Trial #936: GFLOPs: 973.4619. Time: 237.8235 us. Best GFLOPs: 1085.0164
2024-04-29 02:51:44 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_1] Trial #937: GFLOPs: 979.8512. Time: 236.2727 us. Best GFLOPs: 1085.0164
2024-04-29 02:51:44 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_1] Trial #938: GFLOPs: 932.7578. Time: 248.2017 us. Best GFLOPs: 1085.0164
2024-04-29 02:51:44 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_1] Trial #939: GFLOPs: 964.8255. Time: 239.9523 us. Best GFLOPs: 1085.0164
2024-04-29 02:51:44 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_1] Trial #940: GFLOPs: 983.5495. Time: 235.3843 us. Best GFLOPs: 1085.0164
2024-04-29 02:51:44 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_1] Trial #941: GFLOPs: 739.2577. Time: 313.1683 us. Best GFLOPs: 1085.0164
2024-04-29 02:51:44 [INFO] [task_scheduler.cc:121] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_1] Trial #942: Error in building:
LocalBuilder: Timeout, killed after 30.0 seconds
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(1), T.int64(28), T.int64(28), T.int64(128)), "float32"), p1: T.Buffer((T.int64(4), T.int64(1), T.int64(3), T.int64(3), T.int64(128), T.int64(32)), "float32"), p2: T.Buffer((T.int64(1), T.int64(4), T.int64(1), T.int64(1), T.int64(32)), "float32"), p3: T.Buffer((T.int64(1), T.int64(4), T.int64(28), T.int64(28), T.int64(32)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(4), T.int64(28), T.int64(28), T.int64(32)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        data_pad = T.alloc_buffer((T.int64(1), T.int64(1), T.int64(30), T.int64(30), T.int64(128)))
        conv2d_NCHWc = T.alloc_buffer((T.int64(1), T.int64(4), T.int64(28), T.int64(28), T.int64(32)))
        for n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_fused_fused in T.parallel(T.int64(224), annotations={"pragma_auto_unroll_max_step": 512, "pragma_unroll_explicit": 1}):
            for ax0, ax1, ax2, ax3, ax4 in T.grid(T.int64(1), T.int64(1), T.int64(9), T.int64(3), T.int64(128)):
                with T.block("data_pad"):
                    v_i0, v_i1 = T.axis.remap("SS", [ax0, ax1])
                    v_i2 = T.axis.spatial(T.int64(30), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_fused_fused // T.int64(112) * T.int64(14) + n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_fused_fused % T.int64(4) // T.int64(2) * T.int64(7) + ax2)
                    v_i3 = T.axis.spatial(T.int64(30), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_fused_fused % T.int64(2) + n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_fused_fused % T.int64(112) // T.int64(8) * T.int64(2) + ax3)
                    v_i4 = T.axis.spatial(T.int64(128), ax4)
                    T.reads(p0[v_i0, v_i1, v_i2 - T.int64(1), v_i3 - T.int64(1), v_i4])
                    T.writes(data_pad[v_i0, v_i1, v_i2, v_i3, v_i4])
                    data_pad[v_i0, v_i1, v_i2, v_i3, v_i4] = T.if_then_else(T.int64(1) <= v_i2 and v_i2 < T.int64(29) and T.int64(1) <= v_i3 and v_i3 < T.int64(29), p0[v_i0, v_i1, v_i2 - T.int64(1), v_i3 - T.int64(1), v_i4], T.float32(0))
            for oc_block_1 in range(T.int64(1)):
                for n_2_init, oc_chunk_2_init, oh_2_init, ow_2_init, oc_block_2_init, n_3_init, oc_chunk_3_init, oh_3_init, ow_3_init, oc_block_3_init in T.grid(T.int64(1), T.int64(2), T.int64(1), T.int64(1), T.int64(32), T.int64(1), T.int64(1), T.int64(7), T.int64(1), T.int64(1)):
                    with T.block("conv2d_NCHWc_init"):
                        v_n = T.axis.spatial(T.int64(1), n_2_init + n_3_init)
                        v_oc_chunk = T.axis.spatial(T.int64(4), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_fused_fused % T.int64(8) // T.int64(4) * T.int64(2) + oc_chunk_2_init + oc_chunk_3_init)
                        v_oh = T.axis.spatial(T.int64(28), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_fused_fused // T.int64(112) * T.int64(14) + n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_fused_fused % T.int64(4) // T.int64(2) * T.int64(7) + oh_2_init * T.int64(7) + oh_3_init)
                        v_ow = T.axis.spatial(T.int64(28), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_fused_fused % T.int64(112) // T.int64(8) * T.int64(2) + n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_fused_fused % T.int64(2) + ow_2_init + ow_3_init)
                        v_oc_block = T.axis.spatial(T.int64(32), oc_block_1 * T.int64(32) + oc_block_2_init + oc_block_3_init)
                        T.reads()
                        T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                        T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                        conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = T.float32(0)
                for ic_0, kh_0, kw_0, n_2, oc_chunk_2, oh_2, ow_2, oc_block_2, ic_1, kh_1, kw_1, n_3, oc_chunk_3, oh_3, ow_3, oc_block_3 in T.grid(T.int64(16), T.int64(1), T.int64(3), T.int64(1), T.int64(2), T.int64(1), T.int64(1), T.int64(32), T.int64(8), T.int64(3), T.int64(1), T.int64(1), T.int64(1), T.int64(7), T.int64(1), T.int64(1)):
                    with T.block("conv2d_NCHWc_update"):
                        v_n = T.axis.spatial(T.int64(1), n_2 + n_3)
                        v_oc_chunk = T.axis.spatial(T.int64(4), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_fused_fused % T.int64(8) // T.int64(4) * T.int64(2) + oc_chunk_2 + oc_chunk_3)
                        v_oh = T.axis.spatial(T.int64(28), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_fused_fused // T.int64(112) * T.int64(14) + n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_fused_fused % T.int64(4) // T.int64(2) * T.int64(7) + oh_2 * T.int64(7) + oh_3)
                        v_ow = T.axis.spatial(T.int64(28), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_fused_fused % T.int64(112) // T.int64(8) * T.int64(2) + n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_fused_fused % T.int64(2) + ow_2 + ow_3)
                        v_oc_block = T.axis.spatial(T.int64(32), oc_block_1 * T.int64(32) + oc_block_2 + oc_block_3)
                        v_ic = T.axis.reduce(T.int64(128), ic_0 * T.int64(8) + ic_1)
                        v_kh = T.axis.reduce(T.int64(3), kh_0 * T.int64(3) + kh_1)
                        v_kw = T.axis.reduce(T.int64(3), kw_0 + kw_1)
                        T.reads(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block], data_pad[v_n, v_ic // T.int64(128), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(128)], p1[v_oc_chunk, v_ic // T.int64(128), v_kh, v_kw, v_ic % T.int64(128), v_oc_block])
                        T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                        T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                        conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] + data_pad[v_n, v_ic // T.int64(128), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(128)] * p1[v_oc_chunk, v_ic // T.int64(128), v_kh, v_kw, v_ic % T.int64(128), v_oc_block]
                for ax0, ax1, ax2 in T.grid(T.int64(1), T.int64(2), T.int64(7)):
                    for ax3_ax4_fused in T.vectorized(T.int64(32)):
                        with T.block("T_relu"):
                            v_ax0 = T.axis.spatial(T.int64(1), ax0)
                            v_ax1 = T.axis.spatial(T.int64(4), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_fused_fused % T.int64(8) // T.int64(4) * T.int64(2) + ax1)
                            v_ax2 = T.axis.spatial(T.int64(28), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_fused_fused // T.int64(112) * T.int64(14) + n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_fused_fused % T.int64(4) // T.int64(2) * T.int64(7) + ax2)
                            v_ax3 = T.axis.spatial(T.int64(28), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_fused_fused % T.int64(112) // T.int64(8) * T.int64(2) + n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_fused_fused % T.int64(2))
                            v_ax4 = T.axis.spatial(T.int64(32), ax3_ax4_fused)
                            T.reads(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4], p3[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                            T.writes(T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                            T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.max(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] + p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4] + p3[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], T.float32(0))
b0 = sch.get_block(name="data_pad", func_name="main")
b1 = sch.get_block(name="conv2d_NCHWc", func_name="main")
b2 = sch.get_block(name="T_add", func_name="main")
b3 = sch.get_block(name="T_add_1", func_name="main")
b4 = sch.get_block(name="root", func_name="main")
sch.compute_inline(block=b3)
sch.compute_inline(block=b2)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSRSRS")
l5, l6, l7, l8, l9, l10, l11, l12 = sch.get_loops(block=b1)
v13, v14, v15, v16 = sch.sample_perfect_tile(loop=l5, n=4, max_innermost_factor=64, decision=[1, 1, 1, 1])
l17, l18, l19, l20 = sch.split(loop=l5, factors=[v13, v14, v15, v16], preserve_unit_iters=True)
v21, v22, v23, v24 = sch.sample_perfect_tile(loop=l6, n=4, max_innermost_factor=64, decision=[1, 2, 2, 1])
l25, l26, l27, l28 = sch.split(loop=l6, factors=[v21, v22, v23, v24], preserve_unit_iters=True)
v29, v30, v31, v32 = sch.sample_perfect_tile(loop=l7, n=4, max_innermost_factor=64, decision=[2, 2, 1, 7])
l33, l34, l35, l36 = sch.split(loop=l7, factors=[v29, v30, v31, v32], preserve_unit_iters=True)
v37, v38, v39, v40 = sch.sample_perfect_tile(loop=l8, n=4, max_innermost_factor=64, decision=[14, 2, 1, 1])
l41, l42, l43, l44 = sch.split(loop=l8, factors=[v37, v38, v39, v40], preserve_unit_iters=True)
v45, v46, v47, v48 = sch.sample_perfect_tile(loop=l9, n=4, max_innermost_factor=64, decision=[1, 1, 32, 1])
l49, l50, l51, l52 = sch.split(loop=l9, factors=[v45, v46, v47, v48], preserve_unit_iters=True)
v53, v54 = sch.sample_perfect_tile(loop=l10, n=2, max_innermost_factor=64, decision=[16, 8])
l55, l56 = sch.split(loop=l10, factors=[v53, v54], preserve_unit_iters=True)
v57, v58 = sch.sample_perfect_tile(loop=l11, n=2, max_innermost_factor=64, decision=[1, 3])
l59, l60 = sch.split(loop=l11, factors=[v57, v58], preserve_unit_iters=True)
v61, v62 = sch.sample_perfect_tile(loop=l12, n=2, max_innermost_factor=64, decision=[3, 1])
l63, l64 = sch.split(loop=l12, factors=[v61, v62], preserve_unit_iters=True)
sch.reorder(l17, l25, l33, l41, l49, l18, l26, l34, l42, l50, l55, l59, l63, l19, l27, l35, l43, l51, l56, l60, l64, l20, l28, l36, l44, l52)
b65, = sch.get_consumers(block=b1)
sch.reverse_compute_at(block=b65, loop=l50, preserve_unit_loops=True, index=-1)
sch.annotate(block_or_loop=b4, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b4, ann_key="meta_schedule.vectorize", ann_val=64)
v66 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b4, ann_key="meta_schedule.unroll_explicit", ann_val=v66)
l67 = sch.sample_compute_location(block=b0, decision=8)
sch.compute_at(block=b0, loop=l67, preserve_unit_loops=True, index=-1)
sch.enter_postproc()
b68 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b68, ann_key="meta_schedule.parallel")
sch.unannotate(block_or_loop=b68, ann_key="meta_schedule.vectorize")
sch.unannotate(block_or_loop=b68, ann_key="meta_schedule.unroll_explicit")
b69, b70, b71 = sch.get_child_blocks(b68)
l72, l73, l74, l75, l76, l77, l78, l79, l80, l81, l82, l83, l84, l85 = sch.get_loops(block=b69)
l86 = sch.fuse(l72, l73, l74, l75, l76, l77, l78, l79, l80, preserve_unit_iters=True)
sch.parallel(loop=l86)
l87, l88, l89, l90, l91, l92, l93, l94, l95, l96, l97, l98, l99, l100, l101, l102, l103, l104 = sch.get_loops(block=b70)
l105 = sch.fuse(l87, preserve_unit_iters=True)
sch.parallel(loop=l105)
sch.annotate(block_or_loop=l105, ann_key="pragma_auto_unroll_max_step", ann_val=512)
sch.annotate(block_or_loop=l105, ann_key="pragma_unroll_explicit", ann_val=1)
l106, l107, l108, l109, l110, l111, l112 = sch.get_loops(block=b71)
l113 = sch.fuse(l111, l112, preserve_unit_iters=True)
sch.vectorize(loop=l113)
b114 = sch.get_block(name="conv2d_NCHWc", func_name="main")
l115, l116, l117, l118, l119, l120, l121, l122, l123, l124, l125, l126, l127, l128, l129, l130, l131, l132 = sch.get_loops(block=b114)
b133 = sch.decompose_reduction(block=b114, loop=l117)
2024-04-29 02:51:44 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_1] Trial #943: GFLOPs: 969.0813. Time: 238.8985 us. Best GFLOPs: 1085.0164
2024-04-29 02:51:44 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_1] Trial #944: GFLOPs: 858.7177. Time: 269.6021 us. Best GFLOPs: 1085.0164
2024-04-29 02:51:44 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_1] Trial #945: GFLOPs: 910.1865. Time: 254.3567 us. Best GFLOPs: 1085.0164
2024-04-29 02:51:44 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_1] Trial #946: GFLOPs: 934.4628. Time: 247.7488 us. Best GFLOPs: 1085.0164
2024-04-29 02:51:44 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_1] Trial #947: GFLOPs: 797.5014. Time: 290.2968 us. Best GFLOPs: 1085.0164
2024-04-29 02:51:44 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_1] Trial #948: GFLOPs: 929.7991. Time: 248.9915 us. Best GFLOPs: 1085.0164
2024-04-29 02:51:44 [INFO] [task_scheduler.cc:121] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_1] Trial #949: Error in building:
LocalBuilder: Timeout, killed after 30.0 seconds
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(1), T.int64(28), T.int64(28), T.int64(128)), "float32"), p1: T.Buffer((T.int64(4), T.int64(1), T.int64(3), T.int64(3), T.int64(128), T.int64(32)), "float32"), p2: T.Buffer((T.int64(1), T.int64(4), T.int64(1), T.int64(1), T.int64(32)), "float32"), p3: T.Buffer((T.int64(1), T.int64(4), T.int64(28), T.int64(28), T.int64(32)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(4), T.int64(28), T.int64(28), T.int64(32)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        data_pad = T.alloc_buffer((T.int64(1), T.int64(1), T.int64(30), T.int64(30), T.int64(128)))
        conv2d_NCHWc = T.alloc_buffer((T.int64(1), T.int64(4), T.int64(28), T.int64(28), T.int64(32)))
        for n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_fused_fused in T.parallel(T.int64(224), annotations={"pragma_auto_unroll_max_step": 512, "pragma_unroll_explicit": 1}):
            for ax0, ax1, ax2, ax3, ax4 in T.grid(T.int64(1), T.int64(1), T.int64(9), T.int64(3), T.int64(128)):
                with T.block("data_pad"):
                    v_i0, v_i1 = T.axis.remap("SS", [ax0, ax1])
                    v_i2 = T.axis.spatial(T.int64(30), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_fused_fused % T.int64(8) // T.int64(2) * T.int64(7) + ax2)
                    v_i3 = T.axis.spatial(T.int64(30), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_fused_fused % T.int64(2) + n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_fused_fused // T.int64(16) * T.int64(2) + ax3)
                    v_i4 = T.axis.spatial(T.int64(128), ax4)
                    T.reads(p0[v_i0, v_i1, v_i2 - T.int64(1), v_i3 - T.int64(1), v_i4])
                    T.writes(data_pad[v_i0, v_i1, v_i2, v_i3, v_i4])
                    data_pad[v_i0, v_i1, v_i2, v_i3, v_i4] = T.if_then_else(T.int64(1) <= v_i2 and v_i2 < T.int64(29) and T.int64(1) <= v_i3 and v_i3 < T.int64(29), p0[v_i0, v_i1, v_i2 - T.int64(1), v_i3 - T.int64(1), v_i4], T.float32(0))
            for oc_block_1 in range(T.int64(1)):
                for n_2_init, oc_chunk_2_init, oh_2_init, ow_2_init, oc_block_2_init, n_3_init, oc_chunk_3_init, oh_3_init, ow_3_init, oc_block_3_init in T.grid(T.int64(1), T.int64(2), T.int64(1), T.int64(1), T.int64(32), T.int64(1), T.int64(1), T.int64(7), T.int64(1), T.int64(1)):
                    with T.block("conv2d_NCHWc_init"):
                        v_n = T.axis.spatial(T.int64(1), n_2_init + n_3_init)
                        v_oc_chunk = T.axis.spatial(T.int64(4), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_fused_fused % T.int64(16) // T.int64(8) * T.int64(2) + oc_chunk_2_init + oc_chunk_3_init)
                        v_oh = T.axis.spatial(T.int64(28), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_fused_fused % T.int64(8) // T.int64(2) * T.int64(7) + oh_2_init * T.int64(7) + oh_3_init)
                        v_ow = T.axis.spatial(T.int64(28), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_fused_fused // T.int64(16) * T.int64(2) + n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_fused_fused % T.int64(2) + ow_2_init + ow_3_init)
                        v_oc_block = T.axis.spatial(T.int64(32), oc_block_1 * T.int64(32) + oc_block_2_init + oc_block_3_init)
                        T.reads()
                        T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                        T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                        conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = T.float32(0)
                for ic_0, kh_0, kw_0, n_2, oc_chunk_2, oh_2, ow_2, oc_block_2, ic_1, kh_1, kw_1, n_3, oc_chunk_3, oh_3, ow_3, oc_block_3 in T.grid(T.int64(8), T.int64(1), T.int64(3), T.int64(1), T.int64(2), T.int64(1), T.int64(1), T.int64(32), T.int64(16), T.int64(3), T.int64(1), T.int64(1), T.int64(1), T.int64(7), T.int64(1), T.int64(1)):
                    with T.block("conv2d_NCHWc_update"):
                        v_n = T.axis.spatial(T.int64(1), n_2 + n_3)
                        v_oc_chunk = T.axis.spatial(T.int64(4), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_fused_fused % T.int64(16) // T.int64(8) * T.int64(2) + oc_chunk_2 + oc_chunk_3)
                        v_oh = T.axis.spatial(T.int64(28), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_fused_fused % T.int64(8) // T.int64(2) * T.int64(7) + oh_2 * T.int64(7) + oh_3)
                        v_ow = T.axis.spatial(T.int64(28), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_fused_fused // T.int64(16) * T.int64(2) + n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_fused_fused % T.int64(2) + ow_2 + ow_3)
                        v_oc_block = T.axis.spatial(T.int64(32), oc_block_1 * T.int64(32) + oc_block_2 + oc_block_3)
                        v_ic = T.axis.reduce(T.int64(128), ic_0 * T.int64(16) + ic_1)
                        v_kh = T.axis.reduce(T.int64(3), kh_0 * T.int64(3) + kh_1)
                        v_kw = T.axis.reduce(T.int64(3), kw_0 + kw_1)
                        T.reads(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block], data_pad[v_n, v_ic // T.int64(128), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(128)], p1[v_oc_chunk, v_ic // T.int64(128), v_kh, v_kw, v_ic % T.int64(128), v_oc_block])
                        T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                        T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                        conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] + data_pad[v_n, v_ic // T.int64(128), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(128)] * p1[v_oc_chunk, v_ic // T.int64(128), v_kh, v_kw, v_ic % T.int64(128), v_oc_block]
                for ax0, ax1, ax2 in T.grid(T.int64(1), T.int64(2), T.int64(7)):
                    for ax3_ax4_fused in T.vectorized(T.int64(32)):
                        with T.block("T_relu"):
                            v_ax0 = T.axis.spatial(T.int64(1), ax0)
                            v_ax1 = T.axis.spatial(T.int64(4), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_fused_fused % T.int64(16) // T.int64(8) * T.int64(2) + ax1)
                            v_ax2 = T.axis.spatial(T.int64(28), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_fused_fused % T.int64(8) // T.int64(2) * T.int64(7) + ax2)
                            v_ax3 = T.axis.spatial(T.int64(28), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_fused_fused // T.int64(16) * T.int64(2) + n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_fused_fused % T.int64(2))
                            v_ax4 = T.axis.spatial(T.int64(32), ax3_ax4_fused)
                            T.reads(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4], p3[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                            T.writes(T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                            T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.max(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] + p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4] + p3[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], T.float32(0))
b0 = sch.get_block(name="data_pad", func_name="main")
b1 = sch.get_block(name="conv2d_NCHWc", func_name="main")
b2 = sch.get_block(name="T_add", func_name="main")
b3 = sch.get_block(name="T_add_1", func_name="main")
b4 = sch.get_block(name="root", func_name="main")
sch.compute_inline(block=b3)
sch.compute_inline(block=b2)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSRSRS")
l5, l6, l7, l8, l9, l10, l11, l12 = sch.get_loops(block=b1)
v13, v14, v15, v16 = sch.sample_perfect_tile(loop=l5, n=4, max_innermost_factor=64, decision=[1, 1, 1, 1])
l17, l18, l19, l20 = sch.split(loop=l5, factors=[v13, v14, v15, v16], preserve_unit_iters=True)
v21, v22, v23, v24 = sch.sample_perfect_tile(loop=l6, n=4, max_innermost_factor=64, decision=[1, 2, 2, 1])
l25, l26, l27, l28 = sch.split(loop=l6, factors=[v21, v22, v23, v24], preserve_unit_iters=True)
v29, v30, v31, v32 = sch.sample_perfect_tile(loop=l7, n=4, max_innermost_factor=64, decision=[1, 4, 1, 7])
l33, l34, l35, l36 = sch.split(loop=l7, factors=[v29, v30, v31, v32], preserve_unit_iters=True)
v37, v38, v39, v40 = sch.sample_perfect_tile(loop=l8, n=4, max_innermost_factor=64, decision=[14, 2, 1, 1])
l41, l42, l43, l44 = sch.split(loop=l8, factors=[v37, v38, v39, v40], preserve_unit_iters=True)
v45, v46, v47, v48 = sch.sample_perfect_tile(loop=l9, n=4, max_innermost_factor=64, decision=[1, 1, 32, 1])
l49, l50, l51, l52 = sch.split(loop=l9, factors=[v45, v46, v47, v48], preserve_unit_iters=True)
v53, v54 = sch.sample_perfect_tile(loop=l10, n=2, max_innermost_factor=64, decision=[8, 16])
l55, l56 = sch.split(loop=l10, factors=[v53, v54], preserve_unit_iters=True)
v57, v58 = sch.sample_perfect_tile(loop=l11, n=2, max_innermost_factor=64, decision=[1, 3])
l59, l60 = sch.split(loop=l11, factors=[v57, v58], preserve_unit_iters=True)
v61, v62 = sch.sample_perfect_tile(loop=l12, n=2, max_innermost_factor=64, decision=[3, 1])
l63, l64 = sch.split(loop=l12, factors=[v61, v62], preserve_unit_iters=True)
sch.reorder(l17, l25, l33, l41, l49, l18, l26, l34, l42, l50, l55, l59, l63, l19, l27, l35, l43, l51, l56, l60, l64, l20, l28, l36, l44, l52)
b65, = sch.get_consumers(block=b1)
sch.reverse_compute_at(block=b65, loop=l50, preserve_unit_loops=True, index=-1)
sch.annotate(block_or_loop=b4, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b4, ann_key="meta_schedule.vectorize", ann_val=64)
v66 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b4, ann_key="meta_schedule.unroll_explicit", ann_val=v66)
l67 = sch.sample_compute_location(block=b0, decision=8)
sch.compute_at(block=b0, loop=l67, preserve_unit_loops=True, index=-1)
sch.enter_postproc()
b68 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b68, ann_key="meta_schedule.parallel")
sch.unannotate(block_or_loop=b68, ann_key="meta_schedule.vectorize")
sch.unannotate(block_or_loop=b68, ann_key="meta_schedule.unroll_explicit")
b69, b70, b71 = sch.get_child_blocks(b68)
l72, l73, l74, l75, l76, l77, l78, l79, l80, l81, l82, l83, l84, l85 = sch.get_loops(block=b69)
l86 = sch.fuse(l72, l73, l74, l75, l76, l77, l78, l79, l80, preserve_unit_iters=True)
sch.parallel(loop=l86)
l87, l88, l89, l90, l91, l92, l93, l94, l95, l96, l97, l98, l99, l100, l101, l102, l103, l104 = sch.get_loops(block=b70)
l105 = sch.fuse(l87, preserve_unit_iters=True)
sch.parallel(loop=l105)
sch.annotate(block_or_loop=l105, ann_key="pragma_auto_unroll_max_step", ann_val=512)
sch.annotate(block_or_loop=l105, ann_key="pragma_unroll_explicit", ann_val=1)
l106, l107, l108, l109, l110, l111, l112 = sch.get_loops(block=b71)
l113 = sch.fuse(l111, l112, preserve_unit_iters=True)
sch.vectorize(loop=l113)
b114 = sch.get_block(name="conv2d_NCHWc", func_name="main")
l115, l116, l117, l118, l119, l120, l121, l122, l123, l124, l125, l126, l127, l128, l129, l130, l131, l132 = sch.get_loops(block=b114)
b133 = sch.decompose_reduction(block=b114, loop=l117)
2024-04-29 02:51:44 [INFO] [task_scheduler.cc:121] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_1] Trial #950: Error in building:
LocalBuilder: Timeout, killed after 30.0 seconds
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(1), T.int64(28), T.int64(28), T.int64(128)), "float32"), p1: T.Buffer((T.int64(4), T.int64(1), T.int64(3), T.int64(3), T.int64(128), T.int64(32)), "float32"), p2: T.Buffer((T.int64(1), T.int64(4), T.int64(1), T.int64(1), T.int64(32)), "float32"), p3: T.Buffer((T.int64(1), T.int64(4), T.int64(28), T.int64(28), T.int64(32)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(4), T.int64(28), T.int64(28), T.int64(32)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        data_pad = T.alloc_buffer((T.int64(1), T.int64(1), T.int64(30), T.int64(30), T.int64(128)))
        conv2d_NCHWc = T.alloc_buffer((T.int64(1), T.int64(4), T.int64(28), T.int64(28), T.int64(32)))
        for n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_fused_fused in T.parallel(T.int64(224), annotations={"pragma_auto_unroll_max_step": 512, "pragma_unroll_explicit": 1}):
            for ax0, ax1, ax2, ax3, ax4 in T.grid(T.int64(1), T.int64(1), T.int64(9), T.int64(3), T.int64(128)):
                with T.block("data_pad"):
                    v_i0, v_i1 = T.axis.remap("SS", [ax0, ax1])
                    v_i2 = T.axis.spatial(T.int64(30), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_fused_fused // T.int64(56) * T.int64(7) + ax2)
                    v_i3 = T.axis.spatial(T.int64(30), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_fused_fused % T.int64(2) + n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_fused_fused % T.int64(56) // T.int64(4) * T.int64(2) + ax3)
                    v_i4 = T.axis.spatial(T.int64(128), ax4)
                    T.reads(p0[v_i0, v_i1, v_i2 - T.int64(1), v_i3 - T.int64(1), v_i4])
                    T.writes(data_pad[v_i0, v_i1, v_i2, v_i3, v_i4])
                    data_pad[v_i0, v_i1, v_i2, v_i3, v_i4] = T.if_then_else(T.int64(1) <= v_i2 and v_i2 < T.int64(29) and T.int64(1) <= v_i3 and v_i3 < T.int64(29), p0[v_i0, v_i1, v_i2 - T.int64(1), v_i3 - T.int64(1), v_i4], T.float32(0))
            for oc_block_1 in range(T.int64(1)):
                for n_2_init, oc_chunk_2_init, oh_2_init, ow_2_init, oc_block_2_init, n_3_init, oc_chunk_3_init, oh_3_init, ow_3_init, oc_block_3_init in T.grid(T.int64(1), T.int64(2), T.int64(1), T.int64(1), T.int64(32), T.int64(1), T.int64(1), T.int64(7), T.int64(1), T.int64(1)):
                    with T.block("conv2d_NCHWc_init"):
                        v_n = T.axis.spatial(T.int64(1), n_2_init + n_3_init)
                        v_oc_chunk = T.axis.spatial(T.int64(4), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_fused_fused % T.int64(4) // T.int64(2) * T.int64(2) + oc_chunk_2_init + oc_chunk_3_init)
                        v_oh = T.axis.spatial(T.int64(28), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_fused_fused // T.int64(56) * T.int64(7) + oh_2_init * T.int64(7) + oh_3_init)
                        v_ow = T.axis.spatial(T.int64(28), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_fused_fused % T.int64(56) // T.int64(4) * T.int64(2) + n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_fused_fused % T.int64(2) + ow_2_init + ow_3_init)
                        v_oc_block = T.axis.spatial(T.int64(32), oc_block_1 * T.int64(32) + oc_block_2_init + oc_block_3_init)
                        T.reads()
                        T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                        T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                        conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = T.float32(0)
                for ic_0, kh_0, kw_0, n_2, oc_chunk_2, oh_2, ow_2, oc_block_2, ic_1, kh_1, kw_1, n_3, oc_chunk_3, oh_3, ow_3, oc_block_3 in T.grid(T.int64(8), T.int64(1), T.int64(3), T.int64(1), T.int64(2), T.int64(1), T.int64(1), T.int64(32), T.int64(16), T.int64(3), T.int64(1), T.int64(1), T.int64(1), T.int64(7), T.int64(1), T.int64(1)):
                    with T.block("conv2d_NCHWc_update"):
                        v_n = T.axis.spatial(T.int64(1), n_2 + n_3)
                        v_oc_chunk = T.axis.spatial(T.int64(4), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_fused_fused % T.int64(4) // T.int64(2) * T.int64(2) + oc_chunk_2 + oc_chunk_3)
                        v_oh = T.axis.spatial(T.int64(28), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_fused_fused // T.int64(56) * T.int64(7) + oh_2 * T.int64(7) + oh_3)
                        v_ow = T.axis.spatial(T.int64(28), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_fused_fused % T.int64(56) // T.int64(4) * T.int64(2) + n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_fused_fused % T.int64(2) + ow_2 + ow_3)
                        v_oc_block = T.axis.spatial(T.int64(32), oc_block_1 * T.int64(32) + oc_block_2 + oc_block_3)
                        v_ic = T.axis.reduce(T.int64(128), ic_0 * T.int64(16) + ic_1)
                        v_kh = T.axis.reduce(T.int64(3), kh_0 * T.int64(3) + kh_1)
                        v_kw = T.axis.reduce(T.int64(3), kw_0 + kw_1)
                        T.reads(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block], data_pad[v_n, v_ic // T.int64(128), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(128)], p1[v_oc_chunk, v_ic // T.int64(128), v_kh, v_kw, v_ic % T.int64(128), v_oc_block])
                        T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                        T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                        conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] + data_pad[v_n, v_ic // T.int64(128), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(128)] * p1[v_oc_chunk, v_ic // T.int64(128), v_kh, v_kw, v_ic % T.int64(128), v_oc_block]
                for ax0, ax1, ax2 in T.grid(T.int64(1), T.int64(2), T.int64(7)):
                    for ax3_ax4_fused in T.vectorized(T.int64(32)):
                        with T.block("T_relu"):
                            v_ax0 = T.axis.spatial(T.int64(1), ax0)
                            v_ax1 = T.axis.spatial(T.int64(4), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_fused_fused % T.int64(4) // T.int64(2) * T.int64(2) + ax1)
                            v_ax2 = T.axis.spatial(T.int64(28), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_fused_fused // T.int64(56) * T.int64(7) + ax2)
                            v_ax3 = T.axis.spatial(T.int64(28), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_fused_fused % T.int64(56) // T.int64(4) * T.int64(2) + n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_fused_fused % T.int64(2))
                            v_ax4 = T.axis.spatial(T.int64(32), ax3_ax4_fused)
                            T.reads(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4], p3[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                            T.writes(T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                            T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.max(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] + p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4] + p3[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], T.float32(0))
b0 = sch.get_block(name="data_pad", func_name="main")
b1 = sch.get_block(name="conv2d_NCHWc", func_name="main")
b2 = sch.get_block(name="T_add", func_name="main")
b3 = sch.get_block(name="T_add_1", func_name="main")
b4 = sch.get_block(name="root", func_name="main")
sch.compute_inline(block=b3)
sch.compute_inline(block=b2)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSRSRS")
l5, l6, l7, l8, l9, l10, l11, l12 = sch.get_loops(block=b1)
v13, v14, v15, v16 = sch.sample_perfect_tile(loop=l5, n=4, max_innermost_factor=64, decision=[1, 1, 1, 1])
l17, l18, l19, l20 = sch.split(loop=l5, factors=[v13, v14, v15, v16], preserve_unit_iters=True)
v21, v22, v23, v24 = sch.sample_perfect_tile(loop=l6, n=4, max_innermost_factor=64, decision=[1, 2, 2, 1])
l25, l26, l27, l28 = sch.split(loop=l6, factors=[v21, v22, v23, v24], preserve_unit_iters=True)
v29, v30, v31, v32 = sch.sample_perfect_tile(loop=l7, n=4, max_innermost_factor=64, decision=[4, 1, 1, 7])
l33, l34, l35, l36 = sch.split(loop=l7, factors=[v29, v30, v31, v32], preserve_unit_iters=True)
v37, v38, v39, v40 = sch.sample_perfect_tile(loop=l8, n=4, max_innermost_factor=64, decision=[14, 2, 1, 1])
l41, l42, l43, l44 = sch.split(loop=l8, factors=[v37, v38, v39, v40], preserve_unit_iters=True)
v45, v46, v47, v48 = sch.sample_perfect_tile(loop=l9, n=4, max_innermost_factor=64, decision=[1, 1, 32, 1])
l49, l50, l51, l52 = sch.split(loop=l9, factors=[v45, v46, v47, v48], preserve_unit_iters=True)
v53, v54 = sch.sample_perfect_tile(loop=l10, n=2, max_innermost_factor=64, decision=[8, 16])
l55, l56 = sch.split(loop=l10, factors=[v53, v54], preserve_unit_iters=True)
v57, v58 = sch.sample_perfect_tile(loop=l11, n=2, max_innermost_factor=64, decision=[1, 3])
l59, l60 = sch.split(loop=l11, factors=[v57, v58], preserve_unit_iters=True)
v61, v62 = sch.sample_perfect_tile(loop=l12, n=2, max_innermost_factor=64, decision=[3, 1])
l63, l64 = sch.split(loop=l12, factors=[v61, v62], preserve_unit_iters=True)
sch.reorder(l17, l25, l33, l41, l49, l18, l26, l34, l42, l50, l55, l59, l63, l19, l27, l35, l43, l51, l56, l60, l64, l20, l28, l36, l44, l52)
b65, = sch.get_consumers(block=b1)
sch.reverse_compute_at(block=b65, loop=l50, preserve_unit_loops=True, index=-1)
sch.annotate(block_or_loop=b4, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b4, ann_key="meta_schedule.vectorize", ann_val=64)
v66 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b4, ann_key="meta_schedule.unroll_explicit", ann_val=v66)
l67 = sch.sample_compute_location(block=b0, decision=8)
sch.compute_at(block=b0, loop=l67, preserve_unit_loops=True, index=-1)
sch.enter_postproc()
b68 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b68, ann_key="meta_schedule.parallel")
sch.unannotate(block_or_loop=b68, ann_key="meta_schedule.vectorize")
sch.unannotate(block_or_loop=b68, ann_key="meta_schedule.unroll_explicit")
b69, b70, b71 = sch.get_child_blocks(b68)
l72, l73, l74, l75, l76, l77, l78, l79, l80, l81, l82, l83, l84, l85 = sch.get_loops(block=b69)
l86 = sch.fuse(l72, l73, l74, l75, l76, l77, l78, l79, l80, preserve_unit_iters=True)
sch.parallel(loop=l86)
l87, l88, l89, l90, l91, l92, l93, l94, l95, l96, l97, l98, l99, l100, l101, l102, l103, l104 = sch.get_loops(block=b70)
l105 = sch.fuse(l87, preserve_unit_iters=True)
sch.parallel(loop=l105)
sch.annotate(block_or_loop=l105, ann_key="pragma_auto_unroll_max_step", ann_val=512)
sch.annotate(block_or_loop=l105, ann_key="pragma_unroll_explicit", ann_val=1)
l106, l107, l108, l109, l110, l111, l112 = sch.get_loops(block=b71)
l113 = sch.fuse(l111, l112, preserve_unit_iters=True)
sch.vectorize(loop=l113)
b114 = sch.get_block(name="conv2d_NCHWc", func_name="main")
l115, l116, l117, l118, l119, l120, l121, l122, l123, l124, l125, l126, l127, l128, l129, l130, l131, l132 = sch.get_loops(block=b114)
b133 = sch.decompose_reduction(block=b114, loop=l117)
2024-04-29 02:51:44 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_1] Trial #951: GFLOPs: 49.0233. Time: 4722.4936 us. Best GFLOPs: 1085.0164
2024-04-29 02:51:44 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_1] Trial #952: GFLOPs: 1028.1539. Time: 225.1726 us. Best GFLOPs: 1085.0164
2024-04-29 02:51:44 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_1] Trial #953: GFLOPs: 903.3621. Time: 256.2783 us. Best GFLOPs: 1085.0164
2024-04-29 02:51:44 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_1] Trial #954: GFLOPs: 914.6796. Time: 253.1073 us. Best GFLOPs: 1085.0164
2024-04-29 02:51:44 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_1] Trial #955: GFLOPs: 908.6926. Time: 254.7749 us. Best GFLOPs: 1085.0164
2024-04-29 02:51:44 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_1] Trial #956: GFLOPs: 1048.5597. Time: 220.7905 us. Best GFLOPs: 1085.0164
2024-04-29 02:51:44 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_1] Trial #957: GFLOPs: 468.0096. Time: 494.6737 us. Best GFLOPs: 1085.0164
2024-04-29 02:51:44 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_1] Trial #958: GFLOPs: 44.8903. Time: 5157.2899 us. Best GFLOPs: 1085.0164
2024-04-29 02:51:44 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_1] Trial #959: GFLOPs: 144.5173. Time: 1601.9673 us. Best GFLOPs: 1085.0164
2024-04-29 02:51:44 [INFO] [task_scheduler.cc:131] [Task #15: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_1] Trial #960: GFLOPs: 58.9866. Time: 3924.8253 us. Best GFLOPs: 1085.0164
