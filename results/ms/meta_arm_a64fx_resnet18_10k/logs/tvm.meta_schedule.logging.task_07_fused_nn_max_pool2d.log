2024-04-28 20:34:46 [INFO] [task_scheduler.cc:160] Initializing Task #7: "fused_nn_max_pool2d"
2024-04-28 20:34:46 [INFO] [task_scheduler.cc:35] 
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(2), T.int64(112), T.int64(112), T.int64(32)), "float32"), pool_max: T.Buffer((T.int64(1), T.int64(2), T.int64(56), T.int64(56), T.int64(32)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        pad_temp = T.alloc_buffer((T.int64(1), T.int64(2), T.int64(114), T.int64(114), T.int64(32)))
        for ax0, ax1, ax2, ax3, ax4 in T.grid(T.int64(1), T.int64(2), T.int64(114), T.int64(114), T.int64(32)):
            with T.block("pad_temp"):
                v_ax0, v_ax1, v_ax2, v_ax3, v_ax4 = T.axis.remap("SSSSS", [ax0, ax1, ax2, ax3, ax4])
                T.reads(p0[v_ax0, v_ax1, v_ax2 - T.int64(1), v_ax3 - T.int64(1), v_ax4])
                T.writes(pad_temp[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                pad_temp[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.if_then_else(T.int64(1) <= v_ax2 and v_ax2 < T.int64(113) and T.int64(1) <= v_ax3 and v_ax3 < T.int64(113), p0[v_ax0, v_ax1, v_ax2 - T.int64(1), v_ax3 - T.int64(1), v_ax4], T.float32(-3.4028234663852886e+38))
        for ax0, ax1, ax2, ax3, ax4, rv0, rv1 in T.grid(T.int64(1), T.int64(2), T.int64(56), T.int64(56), T.int64(32), T.int64(3), T.int64(3)):
            with T.block("pool_max"):
                v_ax0, v_ax1, v_ax2, v_ax3, v_ax4, v_rv0, v_rv1 = T.axis.remap("SSSSSRR", [ax0, ax1, ax2, ax3, ax4, rv0, rv1])
                T.reads(pad_temp[v_ax0, v_ax1, v_ax2 * T.int64(2) + v_rv0, v_ax3 * T.int64(2) + v_rv1, v_ax4])
                T.writes(pool_max[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                T.block_attr({"schedule_rule": "meta_schedule.pool_max"})
                with T.init():
                    pool_max[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.float32(-3.4028234663852886e+38)
                pool_max[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.max(pool_max[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], pad_temp[v_ax0, v_ax1, v_ax2 * T.int64(2) + v_rv0, v_ax3 * T.int64(2) + v_rv1, v_ax4])
2024-04-28 20:34:47 [INFO] [task_scheduler.cc:164] Total 3 design space(s) generated
2024-04-28 20:34:47 [INFO] [task_scheduler.cc:170] Design space #0:
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(2), T.int64(112), T.int64(112), T.int64(32)), "float32"), pool_max: T.Buffer((T.int64(1), T.int64(2), T.int64(56), T.int64(56), T.int64(32)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        with T.block("root"):
            T.reads()
            T.writes()
            T.block_attr({"meta_schedule.parallel": 768, "meta_schedule.unroll_explicit": 64, "meta_schedule.vectorize": 64})
            pad_temp = T.alloc_buffer((T.int64(1), T.int64(2), T.int64(114), T.int64(114), T.int64(32)))
            pool_max_rf = T.alloc_buffer((T.int64(1), T.int64(2), T.int64(56), T.int64(56), T.int64(32), T.int64(1)))
            for ax0, ax1, ax2 in T.grid(T.int64(1), T.int64(2), T.int64(56)):
                for ax0_1, ax1_1, ax2_1, ax3, ax4 in T.grid(T.int64(1), T.int64(1), T.int64(3), T.int64(113), T.int64(32)):
                    with T.block("pad_temp"):
                        v_ax0 = T.axis.spatial(T.int64(1), ax0_1)
                        v_ax1 = T.axis.spatial(T.int64(2), ax1 + ax1_1)
                        v_ax2 = T.axis.spatial(T.int64(114), ax2 * T.int64(2) + ax2_1)
                        v_ax3 = T.axis.spatial(T.int64(114), ax3)
                        v_ax4 = T.axis.spatial(T.int64(32), ax4)
                        T.reads(p0[v_ax0, v_ax1, v_ax2 - T.int64(1), v_ax3 - T.int64(1), v_ax4])
                        T.writes(pad_temp[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                        pad_temp[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.if_then_else(T.int64(1) <= v_ax2 and v_ax2 < T.int64(113) and T.int64(1) <= v_ax3 and v_ax3 < T.int64(113), p0[v_ax0, v_ax1, v_ax2 - T.int64(1), v_ax3 - T.int64(1), v_ax4], T.float32(-3.4028234663852886e+38))
                for ax3, ax4, rv0_rv1_fused_0, rv0_rv1_fused_1 in T.grid(T.int64(56), T.int64(32), T.int64(1), T.int64(9)):
                    with T.block("pool_max_rf"):
                        vrv0_rv1_fused_0, v_ax0, v_ax1, v_ax2, v_ax3, v_ax4, vrv0_rv1_fused_1 = T.axis.remap("SSSSSSR", [rv0_rv1_fused_0, ax0, ax1, ax2, ax3, ax4, rv0_rv1_fused_1])
                        T.reads(pad_temp[v_ax0, v_ax1, v_ax2 * T.int64(2) + (vrv0_rv1_fused_0 * T.int64(9) + vrv0_rv1_fused_1) // T.int64(3), v_ax3 * T.int64(2) + (vrv0_rv1_fused_0 * T.int64(9) + vrv0_rv1_fused_1) % T.int64(3), v_ax4])
                        T.writes(pool_max_rf[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4, vrv0_rv1_fused_0])
                        with T.init():
                            pool_max_rf[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4, vrv0_rv1_fused_0] = T.float32(-3.4028234663852886e+38)
                        pool_max_rf[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4, vrv0_rv1_fused_0] = T.max(pool_max_rf[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4, vrv0_rv1_fused_0], pad_temp[v_ax0, v_ax1, v_ax2 * T.int64(2) + (vrv0_rv1_fused_0 * T.int64(9) + vrv0_rv1_fused_1) // T.int64(3), v_ax3 * T.int64(2) + (vrv0_rv1_fused_0 * T.int64(9) + vrv0_rv1_fused_1) % T.int64(3), v_ax4])
            for ax0, ax1, ax2, ax3, ax4, rv0_rv1_fused_0 in T.grid(T.int64(1), T.int64(2), T.int64(56), T.int64(56), T.int64(32), T.int64(1)):
                with T.block("pool_max"):
                    vrv0_rv1_fused_0, v_ax0, v_ax1, v_ax2, v_ax3, v_ax4 = T.axis.remap("RSSSSS", [rv0_rv1_fused_0, ax0, ax1, ax2, ax3, ax4])
                    T.reads(pool_max_rf[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4, vrv0_rv1_fused_0])
                    T.writes(pool_max[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                    T.block_attr({"meta_schedule.random_compute_producer": 1})
                    with T.init():
                        pool_max[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.float32(-3.4028234663852886e+38)
                    pool_max[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.max(pool_max[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], pool_max_rf[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4, vrv0_rv1_fused_0])
b0 = sch.get_block(name="pad_temp", func_name="main")
b1 = sch.get_block(name="pool_max", func_name="main")
b2 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b1, ann_key="schedule_rule")
l3, l4, l5, l6, l7, l8, l9 = sch.get_loops(block=b1)
l10 = sch.fuse(l8, l9, preserve_unit_iters=True)
v11, v12 = sch.sample_perfect_tile(loop=l10, n=2, max_innermost_factor=64, decision=[1, 9])
l13, l14 = sch.split(loop=l10, factors=[v11, v12], preserve_unit_iters=True)
b15 = sch.rfactor(loop=l13, factor_axis=5)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.random_compute_producer", ann_val=1)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.vectorize", ann_val=64)
v16 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=2)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.unroll_explicit", ann_val=v16)
l17 = sch.sample_compute_location(block=b0, decision=2)
sch.compute_at(block=b0, loop=l17, preserve_unit_loops=True, index=-1)
2024-04-28 20:34:47 [INFO] [task_scheduler.cc:170] Design space #1:
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(2), T.int64(112), T.int64(112), T.int64(32)), "float32"), pool_max: T.Buffer((T.int64(1), T.int64(2), T.int64(56), T.int64(56), T.int64(32)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        with T.block("root"):
            T.reads()
            T.writes()
            T.block_attr({"meta_schedule.parallel": 768, "meta_schedule.unroll_explicit": 64, "meta_schedule.vectorize": 64})
            pool_max_rf = T.alloc_buffer((T.int64(1), T.int64(2), T.int64(56), T.int64(56), T.int64(32), T.int64(9)))
            for ax0, ax1, ax2, ax3, ax4, rv0_rv1_fused_0, rv0_rv1_fused_1 in T.grid(T.int64(1), T.int64(2), T.int64(56), T.int64(56), T.int64(32), T.int64(1), T.int64(9)):
                with T.block("pool_max_rf"):
                    vrv0_rv1_fused_1, v_ax0, v_ax1, v_ax2, v_ax3, v_ax4, vrv0_rv1_fused_0 = T.axis.remap("SSSSSSR", [rv0_rv1_fused_1, ax0, ax1, ax2, ax3, ax4, rv0_rv1_fused_0])
                    T.reads(p0[v_ax0, v_ax1, v_ax2 * T.int64(2) + (vrv0_rv1_fused_0 * T.int64(9) + vrv0_rv1_fused_1) // T.int64(3) - T.int64(1), v_ax3 * T.int64(2) + (vrv0_rv1_fused_0 * T.int64(9) + vrv0_rv1_fused_1) % T.int64(3) - T.int64(1), v_ax4])
                    T.writes(pool_max_rf[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4, vrv0_rv1_fused_1])
                    with T.init():
                        pool_max_rf[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4, vrv0_rv1_fused_1] = T.float32(-3.4028234663852886e+38)
                    pool_max_rf[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4, vrv0_rv1_fused_1] = T.max(pool_max_rf[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4, vrv0_rv1_fused_1], T.if_then_else(T.int64(1) <= v_ax2 * T.int64(2) + (vrv0_rv1_fused_0 * T.int64(9) + vrv0_rv1_fused_1) // T.int64(3) and v_ax2 * T.int64(2) + (vrv0_rv1_fused_0 * T.int64(9) + vrv0_rv1_fused_1) // T.int64(3) < T.int64(113) and T.int64(1) <= v_ax3 * T.int64(2) + (vrv0_rv1_fused_0 * T.int64(9) + vrv0_rv1_fused_1) % T.int64(3) and v_ax3 * T.int64(2) + (vrv0_rv1_fused_0 * T.int64(9) + vrv0_rv1_fused_1) % T.int64(3) < T.int64(113), p0[v_ax0, v_ax1, v_ax2 * T.int64(2) + (vrv0_rv1_fused_0 * T.int64(9) + vrv0_rv1_fused_1) // T.int64(3) - T.int64(1), v_ax3 * T.int64(2) + (vrv0_rv1_fused_0 * T.int64(9) + vrv0_rv1_fused_1) % T.int64(3) - T.int64(1), v_ax4], T.float32(-3.4028234663852886e+38)))
            for ax0, ax1, ax2, ax3, ax4, rv0_rv1_fused_1 in T.grid(T.int64(1), T.int64(2), T.int64(56), T.int64(56), T.int64(32), T.int64(9)):
                with T.block("pool_max"):
                    vrv0_rv1_fused_1, v_ax0, v_ax1, v_ax2, v_ax3, v_ax4 = T.axis.remap("RSSSSS", [rv0_rv1_fused_1, ax0, ax1, ax2, ax3, ax4])
                    T.reads(pool_max_rf[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4, vrv0_rv1_fused_1])
                    T.writes(pool_max[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                    T.block_attr({"meta_schedule.random_compute_producer": 1})
                    with T.init():
                        pool_max[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.float32(-3.4028234663852886e+38)
                    pool_max[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.max(pool_max[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], pool_max_rf[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4, vrv0_rv1_fused_1])
b0 = sch.get_block(name="pad_temp", func_name="main")
b1 = sch.get_block(name="pool_max", func_name="main")
b2 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b1, ann_key="schedule_rule")
l3, l4, l5, l6, l7, l8, l9 = sch.get_loops(block=b1)
l10 = sch.fuse(l8, l9, preserve_unit_iters=True)
v11, v12 = sch.sample_perfect_tile(loop=l10, n=2, max_innermost_factor=64, decision=[1, 9])
l13, l14 = sch.split(loop=l10, factors=[v11, v12], preserve_unit_iters=True)
b15 = sch.rfactor(loop=l14, factor_axis=5)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.random_compute_producer", ann_val=1)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.vectorize", ann_val=64)
v16 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=2)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.unroll_explicit", ann_val=v16)
l17 = sch.sample_compute_location(block=b0, decision=-2)
sch.compute_at(block=b0, loop=l17, preserve_unit_loops=True, index=-1)
2024-04-28 20:34:47 [INFO] [task_scheduler.cc:170] Design space #2:
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(2), T.int64(112), T.int64(112), T.int64(32)), "float32"), pool_max: T.Buffer((T.int64(1), T.int64(2), T.int64(56), T.int64(56), T.int64(32)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        with T.block("root"):
            T.reads()
            T.writes()
            T.block_attr({"meta_schedule.parallel": 768, "meta_schedule.unroll_explicit": 16, "meta_schedule.vectorize": 64})
            pad_temp = T.alloc_buffer((T.int64(1), T.int64(2), T.int64(114), T.int64(114), T.int64(32)))
            for ax0, ax1 in T.grid(T.int64(1), T.int64(2)):
                for ax0_1, ax1_1, ax2, ax3, ax4 in T.grid(T.int64(1), T.int64(1), T.int64(113), T.int64(113), T.int64(32)):
                    with T.block("pad_temp"):
                        v_ax0 = T.axis.spatial(T.int64(1), ax0_1)
                        v_ax1 = T.axis.spatial(T.int64(2), ax1 + ax1_1)
                        v_ax2 = T.axis.spatial(T.int64(114), ax2)
                        v_ax3 = T.axis.spatial(T.int64(114), ax3)
                        v_ax4 = T.axis.spatial(T.int64(32), ax4)
                        T.reads(p0[v_ax0, v_ax1, v_ax2 - T.int64(1), v_ax3 - T.int64(1), v_ax4])
                        T.writes(pad_temp[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                        pad_temp[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.if_then_else(T.int64(1) <= v_ax2 and v_ax2 < T.int64(113) and T.int64(1) <= v_ax3 and v_ax3 < T.int64(113), p0[v_ax0, v_ax1, v_ax2 - T.int64(1), v_ax3 - T.int64(1), v_ax4], T.float32(-3.4028234663852886e+38))
                for ax2, ax3, ax4, rv0, rv1 in T.grid(T.int64(56), T.int64(56), T.int64(32), T.int64(3), T.int64(3)):
                    with T.block("pool_max"):
                        v_ax0, v_ax1, v_ax2, v_ax3, v_ax4, v_rv0, v_rv1 = T.axis.remap("SSSSSRR", [ax0, ax1, ax2, ax3, ax4, rv0, rv1])
                        T.reads(pad_temp[v_ax0, v_ax1, v_ax2 * T.int64(2) + v_rv0, v_ax3 * T.int64(2) + v_rv1, v_ax4])
                        T.writes(pool_max[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                        with T.init():
                            pool_max[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.float32(-3.4028234663852886e+38)
                        pool_max[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.max(pool_max[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], pad_temp[v_ax0, v_ax1, v_ax2 * T.int64(2) + v_rv0, v_ax3 * T.int64(2) + v_rv1, v_ax4])
b0 = sch.get_block(name="pad_temp", func_name="main")
b1 = sch.get_block(name="pool_max", func_name="main")
b2 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b1, ann_key="schedule_rule")
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.vectorize", ann_val=64)
v3 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=1)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.unroll_explicit", ann_val=v3)
l4 = sch.sample_compute_location(block=b0, decision=1)
sch.compute_at(block=b0, loop=l4, preserve_unit_loops=True, index=-1)
2024-04-28 20:43:15 [INFO] [evolutionary_search.cc:713] Generating candidates......
2024-04-28 20:43:15 [INFO] [evolutionary_search.cc:715] Picked top 0 candidate(s) from database
2024-04-28 20:43:19 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x4075cb8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x307d5f8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x387b468)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x324f4a8)]: 0 failure(s)
2024-04-28 20:43:19 [INFO] [evolutionary_search.cc:723] Sampled 512 candidate(s)
2024-04-28 20:43:23 [INFO] [evolutionary_search.cc:621] Evolve iter #0 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x4075cb8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x307d5f8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x387b468)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x324f4a8)]: 0 failure(s)
2024-04-28 20:43:28 [INFO] [evolutionary_search.cc:621] Evolve iter #1 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x4075cb8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x307d5f8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x387b468)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x324f4a8)]: 0 failure(s)
2024-04-28 20:43:33 [INFO] [evolutionary_search.cc:621] Evolve iter #2 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x4075cb8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x307d5f8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x387b468)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x324f4a8)]: 0 failure(s)
2024-04-28 20:43:38 [INFO] [evolutionary_search.cc:621] Evolve iter #3 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x4075cb8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x307d5f8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x387b468)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x324f4a8)]: 0 failure(s)
2024-04-28 20:43:40 [INFO] [evolutionary_search.cc:649] Scores of the best 64 candidates:
[1 : 16]:	0.9886  0.9862  0.9792  0.9746  0.9743  0.9736  0.9657  0.9642  0.9512  0.9453  0.9401  0.9261  0.9254  0.9219  0.9177  0.9149
[17 : 32]:	0.9127  0.9127  0.9013  0.8988  0.8973  0.8971  0.8964  0.8952  0.8914  0.8849  0.8620  0.8595  0.8523  0.8483  0.8474  0.8376
[33 : 48]:	0.8309  0.8301  0.8281  0.8196  0.8126  0.8106  0.8095  0.8076  0.8070  0.8048  0.7961  0.7920  0.7815  0.7776  0.7767  0.7720
[49 : 64]:	0.7669  0.7630  0.7605  0.7539  0.7473  0.7469  0.7418  0.7374  0.7355  0.7336  0.7307  0.7268  0.7202  0.7112  0.7069  0.7068
2024-04-28 20:43:40 [INFO] [evolutionary_search.cc:727] Got 64 candidate(s) with evolutionary search
2024-04-28 20:43:40 [INFO] [evolutionary_search.cc:730] Sending 63 candidates(s) for measurement
2024-04-28 21:12:08 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_max_pool2d] Trial #1: GFLOPs: 14.0199. Time: 128.8409 us. Best GFLOPs: 14.0199
2024-04-28 21:12:08 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_max_pool2d] Trial #2: GFLOPs: 48.1529. Time: 37.5125 us. Best GFLOPs: 48.1529
2024-04-28 21:12:08 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_max_pool2d] Trial #3: GFLOPs: 16.4392. Time: 109.8797 us. Best GFLOPs: 48.1529
2024-04-28 21:12:08 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_max_pool2d] Trial #4: GFLOPs: 1.2744. Time: 1417.4343 us. Best GFLOPs: 48.1529
2024-04-28 21:12:08 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_max_pool2d] Trial #5: GFLOPs: 13.0744. Time: 138.1581 us. Best GFLOPs: 48.1529
2024-04-28 21:12:08 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_max_pool2d] Trial #6: GFLOPs: 29.2996. Time: 61.6505 us. Best GFLOPs: 48.1529
2024-04-28 21:12:08 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_max_pool2d] Trial #7: GFLOPs: 46.7110. Time: 38.6705 us. Best GFLOPs: 48.1529
2024-04-28 21:12:08 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_max_pool2d] Trial #8: GFLOPs: 1.2986. Time: 1391.0026 us. Best GFLOPs: 48.1529
2024-04-28 21:12:08 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_max_pool2d] Trial #9: GFLOPs: 14.3717. Time: 125.6872 us. Best GFLOPs: 48.1529
2024-04-28 21:12:08 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_max_pool2d] Trial #10: GFLOPs: 50.7694. Time: 35.5793 us. Best GFLOPs: 50.7694
2024-04-28 21:12:08 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_max_pool2d] Trial #11: GFLOPs: 0.7237. Time: 2495.9413 us. Best GFLOPs: 50.7694
2024-04-28 21:12:08 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_max_pool2d] Trial #12: GFLOPs: 44.0613. Time: 40.9960 us. Best GFLOPs: 50.7694
2024-04-28 21:12:08 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_max_pool2d] Trial #13: GFLOPs: 18.1247. Time: 99.6615 us. Best GFLOPs: 50.7694
2024-04-28 21:12:08 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_max_pool2d] Trial #14: GFLOPs: 14.5336. Time: 124.2872 us. Best GFLOPs: 50.7694
2024-04-28 21:12:08 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_max_pool2d] Trial #15: GFLOPs: 11.6239. Time: 155.3987 us. Best GFLOPs: 50.7694
2024-04-28 21:12:08 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_max_pool2d] Trial #16: GFLOPs: 12.3196. Time: 146.6228 us. Best GFLOPs: 50.7694
2024-04-28 21:12:08 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_max_pool2d] Trial #17: GFLOPs: 15.8096. Time: 114.2558 us. Best GFLOPs: 50.7694
2024-04-28 21:12:08 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_max_pool2d] Trial #18: GFLOPs: 21.3854. Time: 84.4657 us. Best GFLOPs: 50.7694
2024-04-28 21:12:08 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_max_pool2d] Trial #19: GFLOPs: 8.5151. Time: 212.1329 us. Best GFLOPs: 50.7694
2024-04-28 21:12:08 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_max_pool2d] Trial #20: GFLOPs: 1.3014. Time: 1387.9621 us. Best GFLOPs: 50.7694
2024-04-28 21:12:08 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_max_pool2d] Trial #21: GFLOPs: 8.1260. Time: 222.2909 us. Best GFLOPs: 50.7694
2024-04-28 21:12:08 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_max_pool2d] Trial #22: GFLOPs: 12.7277. Time: 141.9216 us. Best GFLOPs: 50.7694
2024-04-28 21:12:08 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_max_pool2d] Trial #23: GFLOPs: 11.5843. Time: 155.9302 us. Best GFLOPs: 50.7694
2024-04-28 21:12:08 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_max_pool2d] Trial #24: GFLOPs: 12.9242. Time: 139.7640 us. Best GFLOPs: 50.7694
2024-04-28 21:12:08 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_max_pool2d] Trial #25: GFLOPs: 0.4157. Time: 4344.7684 us. Best GFLOPs: 50.7694
2024-04-28 21:12:08 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_max_pool2d] Trial #26: GFLOPs: 16.8732. Time: 107.0532 us. Best GFLOPs: 50.7694
2024-04-28 21:12:08 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_max_pool2d] Trial #27: GFLOPs: 1.4282. Time: 1264.7761 us. Best GFLOPs: 50.7694
2024-04-28 21:12:08 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_max_pool2d] Trial #28: GFLOPs: 92.4706. Time: 19.5342 us. Best GFLOPs: 92.4706
2024-04-28 21:12:08 [INFO] [task_scheduler.cc:121] [Task #7: fused_nn_max_pool2d] Trial #29: Error in building:
LocalBuilder: Timeout, killed after 30.0 seconds
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(2), T.int64(112), T.int64(112), T.int64(32)), "float32"), pool_max: T.Buffer((T.int64(1), T.int64(2), T.int64(56), T.int64(56), T.int64(32)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        pad_temp = T.alloc_buffer((T.int64(1), T.int64(2), T.int64(114), T.int64(114), T.int64(32)))
        for ax0_ax1_fused_fused in T.parallel(T.int64(2), annotations={"pragma_auto_unroll_max_step": 512, "pragma_unroll_explicit": 1}):
            for ax2 in range(T.int64(56)):
                for ax0, ax1, ax2_1, ax3 in T.grid(T.int64(1), T.int64(1), T.int64(3), T.int64(113)):
                    for ax4_fused in T.vectorized(T.int64(32)):
                        with T.block("pad_temp"):
                            v_ax0 = T.axis.spatial(T.int64(1), ax0)
                            v_ax1 = T.axis.spatial(T.int64(2), ax0_ax1_fused_fused + ax1)
                            v_ax2 = T.axis.spatial(T.int64(114), ax2 * T.int64(2) + ax2_1)
                            v_ax3 = T.axis.spatial(T.int64(114), ax3)
                            v_ax4 = T.axis.spatial(T.int64(32), ax4_fused)
                            T.reads(p0[v_ax0, v_ax1, v_ax2 - T.int64(1), v_ax3 - T.int64(1), v_ax4])
                            T.writes(pad_temp[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                            pad_temp[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.if_then_else(T.int64(1) <= v_ax2 and v_ax2 < T.int64(113) and T.int64(1) <= v_ax3 and v_ax3 < T.int64(113), p0[v_ax0, v_ax1, v_ax2 - T.int64(1), v_ax3 - T.int64(1), v_ax4], T.float32(-3.4028234663852886e+38))
                for ax3, ax4 in T.grid(T.int64(56), T.int64(32)):
                    with T.block("pool_max_init"):
                        v_ax0 = T.axis.spatial(T.int64(1), T.int64(0))
                        v_ax1, v_ax2, v_ax3, v_ax4 = T.axis.remap("SSSS", [ax0_ax1_fused_fused, ax2, ax3, ax4])
                        T.reads()
                        T.writes(pool_max[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                        pool_max[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.float32(-3.4028234663852886e+38)
                    for rv0, rv1 in T.grid(T.int64(3), T.int64(3)):
                        with T.block("pool_max_update"):
                            v_ax0 = T.axis.spatial(T.int64(1), T.int64(0))
                            v_ax1, v_ax2, v_ax3, v_ax4, v_rv0, v_rv1 = T.axis.remap("SSSSRR", [ax0_ax1_fused_fused, ax2, ax3, ax4, rv0, rv1])
                            T.reads(pool_max[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], pad_temp[v_ax0, v_ax1, v_ax2 * T.int64(2) + v_rv0, v_ax3 * T.int64(2) + v_rv1, v_ax4])
                            T.writes(pool_max[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                            pool_max[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.max(pool_max[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], pad_temp[v_ax0, v_ax1, v_ax2 * T.int64(2) + v_rv0, v_ax3 * T.int64(2) + v_rv1, v_ax4])
b0 = sch.get_block(name="pad_temp", func_name="main")
b1 = sch.get_block(name="pool_max", func_name="main")
b2 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b1, ann_key="schedule_rule")
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.parallel", ann_val=1)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.vectorize", ann_val=64)
v3 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.unroll_explicit", ann_val=v3)
l4 = sch.sample_compute_location(block=b0, decision=2)
sch.compute_at(block=b0, loop=l4, preserve_unit_loops=True, index=-1)
sch.enter_postproc()
b5 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b5, ann_key="meta_schedule.parallel")
sch.unannotate(block_or_loop=b5, ann_key="meta_schedule.vectorize")
sch.unannotate(block_or_loop=b5, ann_key="meta_schedule.unroll_explicit")
b6, b7 = sch.get_child_blocks(b5)
l8, l9, l10, l11, l12, l13, l14, l15 = sch.get_loops(block=b6)
l16 = sch.fuse(l8, l9, preserve_unit_iters=True)
sch.parallel(loop=l16)
l17 = sch.fuse(l15, preserve_unit_iters=True)
sch.vectorize(loop=l17)
l18, l19, l20, l21, l22, l23 = sch.get_loops(block=b7)
l24 = sch.fuse(l18, preserve_unit_iters=True)
sch.parallel(loop=l24)
sch.annotate(block_or_loop=l24, ann_key="pragma_auto_unroll_max_step", ann_val=512)
sch.annotate(block_or_loop=l24, ann_key="pragma_unroll_explicit", ann_val=1)
b25 = sch.get_block(name="pool_max", func_name="main")
l26, l27, l28, l29, l30, l31 = sch.get_loops(block=b25)
b32 = sch.decompose_reduction(block=b25, loop=l30)
2024-04-28 21:12:08 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_max_pool2d] Trial #30: GFLOPs: 9.0327. Time: 199.9772 us. Best GFLOPs: 92.4706
2024-04-28 21:12:08 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_max_pool2d] Trial #31: GFLOPs: 22.4742. Time: 80.3739 us. Best GFLOPs: 92.4706
2024-04-28 21:12:08 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_max_pool2d] Trial #32: GFLOPs: 40.4789. Time: 44.6242 us. Best GFLOPs: 92.4706
2024-04-28 21:12:08 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_max_pool2d] Trial #33: GFLOPs: 1.1215. Time: 1610.6616 us. Best GFLOPs: 92.4706
2024-04-28 21:12:08 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_max_pool2d] Trial #34: GFLOPs: 34.5309. Time: 52.3107 us. Best GFLOPs: 92.4706
2024-04-28 21:12:08 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_max_pool2d] Trial #35: GFLOPs: 16.7878. Time: 107.5980 us. Best GFLOPs: 92.4706
2024-04-28 21:12:08 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_max_pool2d] Trial #36: GFLOPs: 62.4171. Time: 28.9398 us. Best GFLOPs: 92.4706
2024-04-28 21:12:08 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_max_pool2d] Trial #37: GFLOPs: 27.8275. Time: 64.9119 us. Best GFLOPs: 92.4706
2024-04-28 21:12:08 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_max_pool2d] Trial #38: GFLOPs: 1.1257. Time: 1604.6635 us. Best GFLOPs: 92.4706
2024-04-28 21:12:08 [INFO] [task_scheduler.cc:121] [Task #7: fused_nn_max_pool2d] Trial #39: Error in building:
LocalBuilder: Timeout, killed after 30.0 seconds
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(2), T.int64(112), T.int64(112), T.int64(32)), "float32"), pool_max: T.Buffer((T.int64(1), T.int64(2), T.int64(56), T.int64(56), T.int64(32)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        pad_temp = T.alloc_buffer((T.int64(1), T.int64(2), T.int64(114), T.int64(114), T.int64(32)))
        pool_max_rf = T.alloc_buffer((T.int64(1), T.int64(2), T.int64(56), T.int64(56), T.int64(32), T.int64(3)))
        for ax0_ax1_ax2_fused_fused in T.parallel(T.int64(112), annotations={"pragma_auto_unroll_max_step": 512, "pragma_unroll_explicit": 1}):
            for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(1), T.int64(3), T.int64(113)):
                for ax4_fused in T.vectorized(T.int64(32)):
                    with T.block("pad_temp"):
                        v_ax0 = T.axis.spatial(T.int64(1), ax0)
                        v_ax1 = T.axis.spatial(T.int64(2), ax0_ax1_ax2_fused_fused // T.int64(56) + ax1)
                        v_ax2 = T.axis.spatial(T.int64(114), ax0_ax1_ax2_fused_fused % T.int64(56) * T.int64(2) + ax2)
                        v_ax3 = T.axis.spatial(T.int64(114), ax3)
                        v_ax4 = T.axis.spatial(T.int64(32), ax4_fused)
                        T.reads(p0[v_ax0, v_ax1, v_ax2 - T.int64(1), v_ax3 - T.int64(1), v_ax4])
                        T.writes(pad_temp[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                        pad_temp[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.if_then_else(T.int64(1) <= v_ax2 and v_ax2 < T.int64(113) and T.int64(1) <= v_ax3 and v_ax3 < T.int64(113), p0[v_ax0, v_ax1, v_ax2 - T.int64(1), v_ax3 - T.int64(1), v_ax4], T.float32(-3.4028234663852886e+38))
            for ax3, ax4 in T.grid(T.int64(56), T.int64(32)):
                for rv0_rv1_fused_1_fused_init in T.vectorized(T.int64(3)):
                    with T.block("pool_max_rf_init"):
                        vrv0_rv1_fused_1 = T.axis.spatial(T.int64(3), rv0_rv1_fused_1_fused_init)
                        v_ax0 = T.axis.spatial(T.int64(1), T.int64(0))
                        v_ax1 = T.axis.spatial(T.int64(2), ax0_ax1_ax2_fused_fused // T.int64(56))
                        v_ax2 = T.axis.spatial(T.int64(56), ax0_ax1_ax2_fused_fused % T.int64(56))
                        v_ax3, v_ax4 = T.axis.remap("SS", [ax3, ax4])
                        T.reads()
                        T.writes(pool_max_rf[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4, vrv0_rv1_fused_1])
                        pool_max_rf[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4, vrv0_rv1_fused_1] = T.float32(-3.4028234663852886e+38)
                for rv0_rv1_fused_0 in range(T.int64(3)):
                    for rv0_rv1_fused_1_fused in T.vectorized(T.int64(3)):
                        with T.block("pool_max_rf_update"):
                            vrv0_rv1_fused_1 = T.axis.spatial(T.int64(3), rv0_rv1_fused_1_fused)
                            v_ax0 = T.axis.spatial(T.int64(1), T.int64(0))
                            v_ax1 = T.axis.spatial(T.int64(2), ax0_ax1_ax2_fused_fused // T.int64(56))
                            v_ax2 = T.axis.spatial(T.int64(56), ax0_ax1_ax2_fused_fused % T.int64(56))
                            v_ax3, v_ax4, vrv0_rv1_fused_0 = T.axis.remap("SSR", [ax3, ax4, rv0_rv1_fused_0])
                            T.reads(pool_max_rf[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4, vrv0_rv1_fused_1], pad_temp[v_ax0, v_ax1, v_ax2 * T.int64(2) + (vrv0_rv1_fused_0 * T.int64(3) + vrv0_rv1_fused_1) // T.int64(3), v_ax3 * T.int64(2) + (vrv0_rv1_fused_0 * T.int64(3) + vrv0_rv1_fused_1) % T.int64(3), v_ax4])
                            T.writes(pool_max_rf[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4, vrv0_rv1_fused_1])
                            pool_max_rf[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4, vrv0_rv1_fused_1] = T.max(pool_max_rf[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4, vrv0_rv1_fused_1], pad_temp[v_ax0, v_ax1, v_ax2 * T.int64(2) + (vrv0_rv1_fused_0 * T.int64(3) + vrv0_rv1_fused_1) // T.int64(3), v_ax3 * T.int64(2) + (vrv0_rv1_fused_0 * T.int64(3) + vrv0_rv1_fused_1) % T.int64(3), v_ax4])
        for ax0_ax1_ax2_ax3_fused in T.parallel(T.int64(6272), annotations={"pragma_auto_unroll_max_step": 512, "pragma_unroll_explicit": 1}):
            for ax4 in range(T.int64(32)):
                with T.block("pool_max_init"):
                    v_ax0 = T.axis.spatial(T.int64(1), T.int64(0))
                    v_ax1 = T.axis.spatial(T.int64(2), ax0_ax1_ax2_ax3_fused // T.int64(3136))
                    v_ax2 = T.axis.spatial(T.int64(56), ax0_ax1_ax2_ax3_fused % T.int64(3136) // T.int64(56))
                    v_ax3 = T.axis.spatial(T.int64(56), ax0_ax1_ax2_ax3_fused % T.int64(56))
                    v_ax4 = T.axis.spatial(T.int64(32), ax4)
                    T.reads()
                    T.writes(pool_max[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                    T.block_attr({"meta_schedule.random_compute_producer": 1})
                    pool_max[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.float32(-3.4028234663852886e+38)
                for rv0_rv1_fused_1 in range(T.int64(3)):
                    with T.block("pool_max_update"):
                        vrv0_rv1_fused_1 = T.axis.reduce(T.int64(3), rv0_rv1_fused_1)
                        v_ax0 = T.axis.spatial(T.int64(1), T.int64(0))
                        v_ax1 = T.axis.spatial(T.int64(2), ax0_ax1_ax2_ax3_fused // T.int64(3136))
                        v_ax2 = T.axis.spatial(T.int64(56), ax0_ax1_ax2_ax3_fused % T.int64(3136) // T.int64(56))
                        v_ax3 = T.axis.spatial(T.int64(56), ax0_ax1_ax2_ax3_fused % T.int64(56))
                        v_ax4 = T.axis.spatial(T.int64(32), ax4)
                        T.reads(pool_max[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], pool_max_rf[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4, vrv0_rv1_fused_1])
                        T.writes(pool_max[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                        T.block_attr({"meta_schedule.random_compute_producer": 1})
                        pool_max[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.max(pool_max[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], pool_max_rf[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4, vrv0_rv1_fused_1])
b0 = sch.get_block(name="pad_temp", func_name="main")
b1 = sch.get_block(name="pool_max", func_name="main")
b2 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b1, ann_key="schedule_rule")
l3, l4, l5, l6, l7, l8, l9 = sch.get_loops(block=b1)
l10 = sch.fuse(l8, l9, preserve_unit_iters=True)
v11, v12 = sch.sample_perfect_tile(loop=l10, n=2, max_innermost_factor=64, decision=[3, 3])
l13, l14 = sch.split(loop=l10, factors=[v11, v12], preserve_unit_iters=True)
b15 = sch.rfactor(loop=l14, factor_axis=5)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.random_compute_producer", ann_val=1)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.vectorize", ann_val=64)
v16 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.unroll_explicit", ann_val=v16)
l17 = sch.sample_compute_location(block=b0, decision=2)
sch.compute_at(block=b0, loop=l17, preserve_unit_loops=True, index=-1)
sch.enter_postproc()
b18 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b18, ann_key="meta_schedule.parallel")
sch.unannotate(block_or_loop=b18, ann_key="meta_schedule.vectorize")
sch.unannotate(block_or_loop=b18, ann_key="meta_schedule.unroll_explicit")
b19, b20, b21 = sch.get_child_blocks(b18)
l22, l23, l24, l25, l26, l27, l28, l29 = sch.get_loops(block=b19)
l30 = sch.fuse(l22, l23, l24, preserve_unit_iters=True)
sch.parallel(loop=l30)
l31 = sch.fuse(l29, preserve_unit_iters=True)
sch.vectorize(loop=l31)
l32, l33, l34, l35, l36 = sch.get_loops(block=b20)
l37 = sch.fuse(l32, preserve_unit_iters=True)
sch.parallel(loop=l37)
l38 = sch.fuse(l36, preserve_unit_iters=True)
sch.vectorize(loop=l38)
sch.annotate(block_or_loop=l37, ann_key="pragma_auto_unroll_max_step", ann_val=512)
sch.annotate(block_or_loop=l37, ann_key="pragma_unroll_explicit", ann_val=1)
l39, l40, l41, l42, l43, l44 = sch.get_loops(block=b21)
l45 = sch.fuse(l39, l40, l41, l42, preserve_unit_iters=True)
sch.parallel(loop=l45)
sch.annotate(block_or_loop=l45, ann_key="pragma_auto_unroll_max_step", ann_val=512)
sch.annotate(block_or_loop=l45, ann_key="pragma_unroll_explicit", ann_val=1)
b46 = sch.get_block(name="pool_max_rf", func_name="main")
l47, l48, l49, l50, l51 = sch.get_loops(block=b46)
b52 = sch.decompose_reduction(block=b46, loop=l50)
b53 = sch.get_block(name="pool_max", func_name="main")
l54, l55, l56 = sch.get_loops(block=b53)
b57 = sch.decompose_reduction(block=b53, loop=l56)
2024-04-28 21:12:08 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_max_pool2d] Trial #40: GFLOPs: 37.5249. Time: 48.1370 us. Best GFLOPs: 92.4706
2024-04-28 21:12:08 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_max_pool2d] Trial #41: GFLOPs: 5.2126. Time: 346.5318 us. Best GFLOPs: 92.4706
2024-04-28 21:12:08 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_max_pool2d] Trial #42: GFLOPs: 31.8596. Time: 56.6967 us. Best GFLOPs: 92.4706
2024-04-28 21:12:08 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_max_pool2d] Trial #43: GFLOPs: 8.8475. Time: 204.1644 us. Best GFLOPs: 92.4706
2024-04-28 21:12:08 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_max_pool2d] Trial #44: GFLOPs: 13.3395. Time: 135.4130 us. Best GFLOPs: 92.4706
2024-04-28 21:12:08 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_max_pool2d] Trial #45: GFLOPs: 0.4733. Time: 3816.7205 us. Best GFLOPs: 92.4706
2024-04-28 21:12:08 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_max_pool2d] Trial #46: GFLOPs: 10.3842. Time: 173.9512 us. Best GFLOPs: 92.4706
2024-04-28 21:12:08 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_max_pool2d] Trial #47: GFLOPs: 32.9085. Time: 54.8896 us. Best GFLOPs: 92.4706
2024-04-28 21:12:08 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_max_pool2d] Trial #48: GFLOPs: 1.4043. Time: 1286.2494 us. Best GFLOPs: 92.4706
2024-04-28 21:12:08 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_max_pool2d] Trial #49: GFLOPs: 43.4654. Time: 41.5580 us. Best GFLOPs: 92.4706
2024-04-28 21:12:08 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_max_pool2d] Trial #50: GFLOPs: 13.3010. Time: 135.8045 us. Best GFLOPs: 92.4706
2024-04-28 21:12:08 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_max_pool2d] Trial #51: GFLOPs: 19.5366. Time: 92.4592 us. Best GFLOPs: 92.4706
2024-04-28 21:12:08 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_max_pool2d] Trial #52: GFLOPs: 16.7792. Time: 107.6534 us. Best GFLOPs: 92.4706
2024-04-28 21:12:08 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_max_pool2d] Trial #53: GFLOPs: 1.3574. Time: 1330.7278 us. Best GFLOPs: 92.4706
2024-04-28 21:12:08 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_max_pool2d] Trial #54: GFLOPs: 19.1315. Time: 94.4170 us. Best GFLOPs: 92.4706
2024-04-28 21:12:08 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_max_pool2d] Trial #55: GFLOPs: 0.6242. Time: 2893.8523 us. Best GFLOPs: 92.4706
2024-04-28 21:12:08 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_max_pool2d] Trial #56: GFLOPs: 39.7150. Time: 45.4824 us. Best GFLOPs: 92.4706
2024-04-28 21:12:08 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_max_pool2d] Trial #57: GFLOPs: 5.2570. Time: 343.6077 us. Best GFLOPs: 92.4706
2024-04-28 21:12:08 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_max_pool2d] Trial #58: GFLOPs: 5.1313. Time: 352.0262 us. Best GFLOPs: 92.4706
2024-04-28 21:12:08 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_max_pool2d] Trial #59: GFLOPs: 35.0248. Time: 51.5731 us. Best GFLOPs: 92.4706
2024-04-28 21:12:08 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_max_pool2d] Trial #60: GFLOPs: 13.2218. Time: 136.6180 us. Best GFLOPs: 92.4706
2024-04-28 21:12:08 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_max_pool2d] Trial #61: GFLOPs: 84.1302. Time: 21.4707 us. Best GFLOPs: 92.4706
2024-04-28 21:12:08 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_max_pool2d] Trial #62: GFLOPs: 39.3683. Time: 45.8830 us. Best GFLOPs: 92.4706
2024-04-28 21:12:08 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_max_pool2d] Trial #63: GFLOPs: 64.2703. Time: 28.1053 us. Best GFLOPs: 92.4706
