2024-04-28 20:34:37 [INFO] [task_scheduler.cc:160] Initializing Task #4: "fused_nn_contrib_conv2d_NCHWc_add_2"
2024-04-28 20:34:37 [INFO] [task_scheduler.cc:35] 
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(8), T.int64(56), T.int64(56), T.int64(8)), "float32"), p1: T.Buffer((T.int64(4), T.int64(8), T.int64(1), T.int64(1), T.int64(8), T.int64(32)), "float32"), p2: T.Buffer((T.int64(1), T.int64(4), T.int64(1), T.int64(1), T.int64(32)), "float32"), T_add: T.Buffer((T.int64(1), T.int64(4), T.int64(28), T.int64(28), T.int64(32)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        conv2d_NCHWc = T.alloc_buffer((T.int64(1), T.int64(4), T.int64(28), T.int64(28), T.int64(32)))
        for n, oc_chunk, oh, ow, oc_block, ic, kh, kw in T.grid(T.int64(1), T.int64(4), T.int64(28), T.int64(28), T.int64(32), T.int64(64), T.int64(1), T.int64(1)):
            with T.block("conv2d_NCHWc"):
                v_n, v_oc_chunk, v_oh, v_ow, v_oc_block, v_ic, v_kh, v_kw = T.axis.remap("SSSSSRRR", [n, oc_chunk, oh, ow, oc_block, ic, kh, kw])
                T.reads(p0[v_n, v_ic // T.int64(8), v_oh * T.int64(2) + v_kh, v_ow * T.int64(2) + v_kw, v_ic % T.int64(8)], p1[v_oc_chunk, v_ic // T.int64(8), v_kh, v_kw, v_ic % T.int64(8), v_oc_block])
                T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                with T.init():
                    conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = T.float32(0)
                conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] + p0[v_n, v_ic // T.int64(8), v_oh * T.int64(2) + v_kh, v_ow * T.int64(2) + v_kw, v_ic % T.int64(8)] * p1[v_oc_chunk, v_ic // T.int64(8), v_kh, v_kw, v_ic % T.int64(8), v_oc_block]
        for ax0, ax1, ax2, ax3, ax4 in T.grid(T.int64(1), T.int64(4), T.int64(28), T.int64(28), T.int64(32)):
            with T.block("T_add"):
                v_ax0, v_ax1, v_ax2, v_ax3, v_ax4 = T.axis.remap("SSSSS", [ax0, ax1, ax2, ax3, ax4])
                T.reads(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4])
                T.writes(T_add[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                T_add[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] + p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4]
2024-04-28 20:34:37 [INFO] [task_scheduler.cc:164] Total 3 design space(s) generated
2024-04-28 20:34:37 [INFO] [task_scheduler.cc:170] Design space #0:
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(8), T.int64(56), T.int64(56), T.int64(8)), "float32"), p1: T.Buffer((T.int64(4), T.int64(8), T.int64(1), T.int64(1), T.int64(8), T.int64(32)), "float32"), p2: T.Buffer((T.int64(1), T.int64(4), T.int64(1), T.int64(1), T.int64(32)), "float32"), T_add: T.Buffer((T.int64(1), T.int64(4), T.int64(28), T.int64(28), T.int64(32)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        with T.block("root"):
            T.reads()
            T.writes()
            T.block_attr({"meta_schedule.parallel": 768, "meta_schedule.unroll_explicit": 0, "meta_schedule.vectorize": 64})
            conv2d_NCHWc = T.alloc_buffer((T.int64(1), T.int64(4), T.int64(28), T.int64(28), T.int64(32)))
            for n_0, oc_chunk_0, oh_0, ow_0, oc_block_0, n_1, oc_chunk_1, oh_1, ow_1, oc_block_1, ic_0, kh_0, kw_0, n_2, oc_chunk_2, oh_2, ow_2, oc_block_2, ic_1, kh_1, kw_1, n_3, oc_chunk_3, oh_3, ow_3, oc_block_3 in T.grid(T.int64(1), T.int64(1), T.int64(1), T.int64(7), T.int64(2), T.int64(1), T.int64(2), T.int64(4), T.int64(1), T.int64(2), T.int64(8), T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(1), T.int64(2), T.int64(1), T.int64(8), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(7), T.int64(2), T.int64(8)):
                with T.block("conv2d_NCHWc"):
                    v_n = T.axis.spatial(T.int64(1), n_0 + n_1 + n_2 + n_3)
                    v_oc_chunk = T.axis.spatial(T.int64(4), oc_chunk_0 * T.int64(4) + oc_chunk_1 * T.int64(2) + oc_chunk_2 + oc_chunk_3)
                    v_oh = T.axis.spatial(T.int64(28), oh_0 * T.int64(28) + oh_1 * T.int64(7) + oh_2 * T.int64(7) + oh_3)
                    v_ow = T.axis.spatial(T.int64(28), ow_0 * T.int64(4) + ow_1 * T.int64(4) + ow_2 * T.int64(2) + ow_3)
                    v_oc_block = T.axis.spatial(T.int64(32), oc_block_0 * T.int64(16) + oc_block_1 * T.int64(8) + oc_block_2 * T.int64(8) + oc_block_3)
                    v_ic = T.axis.reduce(T.int64(64), ic_0 * T.int64(8) + ic_1)
                    v_kh = T.axis.reduce(T.int64(1), kh_0 + kh_1)
                    v_kw = T.axis.reduce(T.int64(1), kw_0 + kw_1)
                    T.reads(p0[v_n, v_ic // T.int64(8), v_oh * T.int64(2) + v_kh, v_ow * T.int64(2) + v_kw, v_ic % T.int64(8)], p1[v_oc_chunk, v_ic // T.int64(8), v_kh, v_kw, v_ic % T.int64(8), v_oc_block])
                    T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                    T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                    with T.init():
                        conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = T.float32(0)
                    conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] + p0[v_n, v_ic // T.int64(8), v_oh * T.int64(2) + v_kh, v_ow * T.int64(2) + v_kw, v_ic % T.int64(8)] * p1[v_oc_chunk, v_ic // T.int64(8), v_kh, v_kw, v_ic % T.int64(8), v_oc_block]
            for ax0, ax1, ax2, ax3, ax4 in T.grid(T.int64(1), T.int64(4), T.int64(28), T.int64(28), T.int64(32)):
                with T.block("T_add"):
                    v_ax0, v_ax1, v_ax2, v_ax3, v_ax4 = T.axis.remap("SSSSS", [ax0, ax1, ax2, ax3, ax4])
                    T.reads(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4])
                    T.writes(T_add[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                    T_add[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] + p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4]
b0 = sch.get_block(name="conv2d_NCHWc", func_name="main")
b1 = sch.get_block(name="root", func_name="main")
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.tiling_structure", ann_val="SSRSRS")
l2, l3, l4, l5, l6, l7, l8, l9 = sch.get_loops(block=b0)
v10, v11, v12, v13 = sch.sample_perfect_tile(loop=l2, n=4, max_innermost_factor=64, decision=[1, 1, 1, 1])
l14, l15, l16, l17 = sch.split(loop=l2, factors=[v10, v11, v12, v13], preserve_unit_iters=True)
v18, v19, v20, v21 = sch.sample_perfect_tile(loop=l3, n=4, max_innermost_factor=64, decision=[1, 2, 2, 1])
l22, l23, l24, l25 = sch.split(loop=l3, factors=[v18, v19, v20, v21], preserve_unit_iters=True)
v26, v27, v28, v29 = sch.sample_perfect_tile(loop=l4, n=4, max_innermost_factor=64, decision=[1, 4, 1, 7])
l30, l31, l32, l33 = sch.split(loop=l4, factors=[v26, v27, v28, v29], preserve_unit_iters=True)
v34, v35, v36, v37 = sch.sample_perfect_tile(loop=l5, n=4, max_innermost_factor=64, decision=[7, 1, 2, 2])
l38, l39, l40, l41 = sch.split(loop=l5, factors=[v34, v35, v36, v37], preserve_unit_iters=True)
v42, v43, v44, v45 = sch.sample_perfect_tile(loop=l6, n=4, max_innermost_factor=64, decision=[2, 2, 1, 8])
l46, l47, l48, l49 = sch.split(loop=l6, factors=[v42, v43, v44, v45], preserve_unit_iters=True)
v50, v51 = sch.sample_perfect_tile(loop=l7, n=2, max_innermost_factor=64, decision=[8, 8])
l52, l53 = sch.split(loop=l7, factors=[v50, v51], preserve_unit_iters=True)
v54, v55 = sch.sample_perfect_tile(loop=l8, n=2, max_innermost_factor=64, decision=[1, 1])
l56, l57 = sch.split(loop=l8, factors=[v54, v55], preserve_unit_iters=True)
v58, v59 = sch.sample_perfect_tile(loop=l9, n=2, max_innermost_factor=64, decision=[1, 1])
l60, l61 = sch.split(loop=l9, factors=[v58, v59], preserve_unit_iters=True)
sch.reorder(l14, l22, l30, l38, l46, l15, l23, l31, l39, l47, l52, l56, l60, l16, l24, l32, l40, l48, l53, l57, l61, l17, l25, l33, l41, l49)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.vectorize", ann_val=64)
v62 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=0)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.unroll_explicit", ann_val=v62)
2024-04-28 20:34:37 [INFO] [task_scheduler.cc:170] Design space #1:
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(8), T.int64(56), T.int64(56), T.int64(8)), "float32"), p1: T.Buffer((T.int64(4), T.int64(8), T.int64(1), T.int64(1), T.int64(8), T.int64(32)), "float32"), p2: T.Buffer((T.int64(1), T.int64(4), T.int64(1), T.int64(1), T.int64(32)), "float32"), T_add: T.Buffer((T.int64(1), T.int64(4), T.int64(28), T.int64(28), T.int64(32)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        with T.block("root"):
            T.reads()
            T.writes()
            T.block_attr({"meta_schedule.parallel": 768, "meta_schedule.unroll_explicit": 16, "meta_schedule.vectorize": 64})
            conv2d_NCHWc = T.alloc_buffer((T.int64(1), T.int64(4), T.int64(28), T.int64(28), T.int64(32)))
            for n_0, oc_chunk_0, oh_0, ow_0, oc_block_0, n_1, oc_chunk_1, oh_1, ow_1, oc_block_1 in T.grid(T.int64(1), T.int64(1), T.int64(1), T.int64(7), T.int64(2), T.int64(1), T.int64(2), T.int64(4), T.int64(1), T.int64(2)):
                for ic_0, kh_0, kw_0, n_2, oc_chunk_2, oh_2, ow_2, oc_block_2, ic_1, kh_1, kw_1, n_3, oc_chunk_3, oh_3, ow_3, oc_block_3 in T.grid(T.int64(8), T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(1), T.int64(2), T.int64(1), T.int64(8), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(7), T.int64(2), T.int64(8)):
                    with T.block("conv2d_NCHWc"):
                        v_n = T.axis.spatial(T.int64(1), n_0 + n_1 + n_2 + n_3)
                        v_oc_chunk = T.axis.spatial(T.int64(4), oc_chunk_0 * T.int64(4) + oc_chunk_1 * T.int64(2) + oc_chunk_2 + oc_chunk_3)
                        v_oh = T.axis.spatial(T.int64(28), oh_0 * T.int64(28) + oh_1 * T.int64(7) + oh_2 * T.int64(7) + oh_3)
                        v_ow = T.axis.spatial(T.int64(28), ow_0 * T.int64(4) + ow_1 * T.int64(4) + ow_2 * T.int64(2) + ow_3)
                        v_oc_block = T.axis.spatial(T.int64(32), oc_block_0 * T.int64(16) + oc_block_1 * T.int64(8) + oc_block_2 * T.int64(8) + oc_block_3)
                        v_ic = T.axis.reduce(T.int64(64), ic_0 * T.int64(8) + ic_1)
                        v_kh = T.axis.reduce(T.int64(1), kh_0 + kh_1)
                        v_kw = T.axis.reduce(T.int64(1), kw_0 + kw_1)
                        T.reads(p0[v_n, v_ic // T.int64(8), v_oh * T.int64(2) + v_kh, v_ow * T.int64(2) + v_kw, v_ic % T.int64(8)], p1[v_oc_chunk, v_ic // T.int64(8), v_kh, v_kw, v_ic % T.int64(8), v_oc_block])
                        T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                        T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                        with T.init():
                            conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = T.float32(0)
                        conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] + p0[v_n, v_ic // T.int64(8), v_oh * T.int64(2) + v_kh, v_ow * T.int64(2) + v_kw, v_ic % T.int64(8)] * p1[v_oc_chunk, v_ic // T.int64(8), v_kh, v_kw, v_ic % T.int64(8), v_oc_block]
                for ax0, ax1, ax2, ax3, ax4 in T.grid(T.int64(1), T.int64(2), T.int64(7), T.int64(4), T.int64(8)):
                    with T.block("T_add"):
                        v_ax0 = T.axis.spatial(T.int64(1), ax0)
                        v_ax1 = T.axis.spatial(T.int64(4), oc_chunk_1 * T.int64(2) + ax1)
                        v_ax2 = T.axis.spatial(T.int64(28), oh_1 * T.int64(7) + ax2)
                        v_ax3 = T.axis.spatial(T.int64(28), ow_0 * T.int64(4) + ax3)
                        v_ax4 = T.axis.spatial(T.int64(32), oc_block_0 * T.int64(16) + oc_block_1 * T.int64(8) + ax4)
                        T.reads(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4])
                        T.writes(T_add[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                        T_add[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] + p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4]
b0 = sch.get_block(name="conv2d_NCHWc", func_name="main")
b1 = sch.get_block(name="root", func_name="main")
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.tiling_structure", ann_val="SSRSRS")
l2, l3, l4, l5, l6, l7, l8, l9 = sch.get_loops(block=b0)
v10, v11, v12, v13 = sch.sample_perfect_tile(loop=l2, n=4, max_innermost_factor=64, decision=[1, 1, 1, 1])
l14, l15, l16, l17 = sch.split(loop=l2, factors=[v10, v11, v12, v13], preserve_unit_iters=True)
v18, v19, v20, v21 = sch.sample_perfect_tile(loop=l3, n=4, max_innermost_factor=64, decision=[1, 2, 2, 1])
l22, l23, l24, l25 = sch.split(loop=l3, factors=[v18, v19, v20, v21], preserve_unit_iters=True)
v26, v27, v28, v29 = sch.sample_perfect_tile(loop=l4, n=4, max_innermost_factor=64, decision=[1, 4, 1, 7])
l30, l31, l32, l33 = sch.split(loop=l4, factors=[v26, v27, v28, v29], preserve_unit_iters=True)
v34, v35, v36, v37 = sch.sample_perfect_tile(loop=l5, n=4, max_innermost_factor=64, decision=[7, 1, 2, 2])
l38, l39, l40, l41 = sch.split(loop=l5, factors=[v34, v35, v36, v37], preserve_unit_iters=True)
v42, v43, v44, v45 = sch.sample_perfect_tile(loop=l6, n=4, max_innermost_factor=64, decision=[2, 2, 1, 8])
l46, l47, l48, l49 = sch.split(loop=l6, factors=[v42, v43, v44, v45], preserve_unit_iters=True)
v50, v51 = sch.sample_perfect_tile(loop=l7, n=2, max_innermost_factor=64, decision=[8, 8])
l52, l53 = sch.split(loop=l7, factors=[v50, v51], preserve_unit_iters=True)
v54, v55 = sch.sample_perfect_tile(loop=l8, n=2, max_innermost_factor=64, decision=[1, 1])
l56, l57 = sch.split(loop=l8, factors=[v54, v55], preserve_unit_iters=True)
v58, v59 = sch.sample_perfect_tile(loop=l9, n=2, max_innermost_factor=64, decision=[1, 1])
l60, l61 = sch.split(loop=l9, factors=[v58, v59], preserve_unit_iters=True)
sch.reorder(l14, l22, l30, l38, l46, l15, l23, l31, l39, l47, l52, l56, l60, l16, l24, l32, l40, l48, l53, l57, l61, l17, l25, l33, l41, l49)
b62, = sch.get_consumers(block=b0)
sch.reverse_compute_at(block=b62, loop=l47, preserve_unit_loops=True, index=-1)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.vectorize", ann_val=64)
v63 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=1)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.unroll_explicit", ann_val=v63)
2024-04-28 20:34:37 [INFO] [task_scheduler.cc:170] Design space #2:
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(8), T.int64(56), T.int64(56), T.int64(8)), "float32"), p1: T.Buffer((T.int64(4), T.int64(8), T.int64(1), T.int64(1), T.int64(8), T.int64(32)), "float32"), p2: T.Buffer((T.int64(1), T.int64(4), T.int64(1), T.int64(1), T.int64(32)), "float32"), T_add: T.Buffer((T.int64(1), T.int64(4), T.int64(28), T.int64(28), T.int64(32)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        with T.block("root"):
            T.reads()
            T.writes()
            T.block_attr({"meta_schedule.parallel": 768, "meta_schedule.unroll_explicit": 512, "meta_schedule.vectorize": 64})
            conv2d_NCHWc = T.alloc_buffer((T.int64(1), T.int64(4), T.int64(28), T.int64(28), T.int64(32)))
            for n_0, oc_chunk_0, oh_0, ow_0, oc_block_0 in T.grid(T.int64(1), T.int64(1), T.int64(1), T.int64(7), T.int64(2)):
                for n_1, oc_chunk_1, oh_1, ow_1, oc_block_1, ic_0, kh_0, kw_0, n_2, oc_chunk_2, oh_2, ow_2, oc_block_2, ic_1, kh_1, kw_1, n_3, oc_chunk_3, oh_3, ow_3, oc_block_3 in T.grid(T.int64(1), T.int64(2), T.int64(4), T.int64(1), T.int64(2), T.int64(8), T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(1), T.int64(2), T.int64(1), T.int64(8), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(7), T.int64(2), T.int64(8)):
                    with T.block("conv2d_NCHWc"):
                        v_n = T.axis.spatial(T.int64(1), n_0 + n_1 + n_2 + n_3)
                        v_oc_chunk = T.axis.spatial(T.int64(4), oc_chunk_0 * T.int64(4) + oc_chunk_1 * T.int64(2) + oc_chunk_2 + oc_chunk_3)
                        v_oh = T.axis.spatial(T.int64(28), oh_0 * T.int64(28) + oh_1 * T.int64(7) + oh_2 * T.int64(7) + oh_3)
                        v_ow = T.axis.spatial(T.int64(28), ow_0 * T.int64(4) + ow_1 * T.int64(4) + ow_2 * T.int64(2) + ow_3)
                        v_oc_block = T.axis.spatial(T.int64(32), oc_block_0 * T.int64(16) + oc_block_1 * T.int64(8) + oc_block_2 * T.int64(8) + oc_block_3)
                        v_ic = T.axis.reduce(T.int64(64), ic_0 * T.int64(8) + ic_1)
                        v_kh = T.axis.reduce(T.int64(1), kh_0 + kh_1)
                        v_kw = T.axis.reduce(T.int64(1), kw_0 + kw_1)
                        T.reads(p0[v_n, v_ic // T.int64(8), v_oh * T.int64(2) + v_kh, v_ow * T.int64(2) + v_kw, v_ic % T.int64(8)], p1[v_oc_chunk, v_ic // T.int64(8), v_kh, v_kw, v_ic % T.int64(8), v_oc_block])
                        T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                        T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                        with T.init():
                            conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = T.float32(0)
                        conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] + p0[v_n, v_ic // T.int64(8), v_oh * T.int64(2) + v_kh, v_ow * T.int64(2) + v_kw, v_ic % T.int64(8)] * p1[v_oc_chunk, v_ic // T.int64(8), v_kh, v_kw, v_ic % T.int64(8), v_oc_block]
                for ax0, ax1, ax2, ax3, ax4 in T.grid(T.int64(1), T.int64(4), T.int64(28), T.int64(4), T.int64(16)):
                    with T.block("T_add"):
                        v_ax0, v_ax1, v_ax2 = T.axis.remap("SSS", [ax0, ax1, ax2])
                        v_ax3 = T.axis.spatial(T.int64(28), ow_0 * T.int64(4) + ax3)
                        v_ax4 = T.axis.spatial(T.int64(32), oc_block_0 * T.int64(16) + ax4)
                        T.reads(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4])
                        T.writes(T_add[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                        T_add[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] + p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4]
b0 = sch.get_block(name="conv2d_NCHWc", func_name="main")
b1 = sch.get_block(name="root", func_name="main")
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.tiling_structure", ann_val="SSRSRS")
l2, l3, l4, l5, l6, l7, l8, l9 = sch.get_loops(block=b0)
v10, v11, v12, v13 = sch.sample_perfect_tile(loop=l2, n=4, max_innermost_factor=64, decision=[1, 1, 1, 1])
l14, l15, l16, l17 = sch.split(loop=l2, factors=[v10, v11, v12, v13], preserve_unit_iters=True)
v18, v19, v20, v21 = sch.sample_perfect_tile(loop=l3, n=4, max_innermost_factor=64, decision=[1, 2, 2, 1])
l22, l23, l24, l25 = sch.split(loop=l3, factors=[v18, v19, v20, v21], preserve_unit_iters=True)
v26, v27, v28, v29 = sch.sample_perfect_tile(loop=l4, n=4, max_innermost_factor=64, decision=[1, 4, 1, 7])
l30, l31, l32, l33 = sch.split(loop=l4, factors=[v26, v27, v28, v29], preserve_unit_iters=True)
v34, v35, v36, v37 = sch.sample_perfect_tile(loop=l5, n=4, max_innermost_factor=64, decision=[7, 1, 2, 2])
l38, l39, l40, l41 = sch.split(loop=l5, factors=[v34, v35, v36, v37], preserve_unit_iters=True)
v42, v43, v44, v45 = sch.sample_perfect_tile(loop=l6, n=4, max_innermost_factor=64, decision=[2, 2, 1, 8])
l46, l47, l48, l49 = sch.split(loop=l6, factors=[v42, v43, v44, v45], preserve_unit_iters=True)
v50, v51 = sch.sample_perfect_tile(loop=l7, n=2, max_innermost_factor=64, decision=[8, 8])
l52, l53 = sch.split(loop=l7, factors=[v50, v51], preserve_unit_iters=True)
v54, v55 = sch.sample_perfect_tile(loop=l8, n=2, max_innermost_factor=64, decision=[1, 1])
l56, l57 = sch.split(loop=l8, factors=[v54, v55], preserve_unit_iters=True)
v58, v59 = sch.sample_perfect_tile(loop=l9, n=2, max_innermost_factor=64, decision=[1, 1])
l60, l61 = sch.split(loop=l9, factors=[v58, v59], preserve_unit_iters=True)
sch.reorder(l14, l22, l30, l38, l46, l15, l23, l31, l39, l47, l52, l56, l60, l16, l24, l32, l40, l48, l53, l57, l61, l17, l25, l33, l41, l49)
b62, = sch.get_consumers(block=b0)
sch.reverse_compute_at(block=b62, loop=l46, preserve_unit_loops=True, index=-1)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.vectorize", ann_val=64)
v63 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.unroll_explicit", ann_val=v63)
2024-04-28 20:39:33 [INFO] [evolutionary_search.cc:713] Generating candidates......
2024-04-28 20:39:33 [INFO] [evolutionary_search.cc:715] Picked top 0 candidate(s) from database
2024-04-28 20:39:36 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x630af88)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x3fe7fb8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x385f778)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x376a1b8)]: 0 failure(s)
2024-04-28 20:39:36 [INFO] [evolutionary_search.cc:723] Sampled 512 candidate(s)
2024-04-28 20:39:39 [INFO] [evolutionary_search.cc:621] Evolve iter #0 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x630af88)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x3fe7fb8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x385f778)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x376a1b8)]: 0 failure(s)
2024-04-28 20:39:42 [INFO] [evolutionary_search.cc:621] Evolve iter #1 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x630af88)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x3fe7fb8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x385f778)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x376a1b8)]: 0 failure(s)
2024-04-28 20:39:45 [INFO] [evolutionary_search.cc:621] Evolve iter #2 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x630af88)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x3fe7fb8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x385f778)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x376a1b8)]: 0 failure(s)
2024-04-28 20:39:48 [INFO] [evolutionary_search.cc:621] Evolve iter #3 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x630af88)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x3fe7fb8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x385f778)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x376a1b8)]: 0 failure(s)
2024-04-28 20:39:49 [INFO] [evolutionary_search.cc:649] Scores of the best 64 candidates:
[1 : 16]:	0.9998  0.9995  0.9994  0.9985  0.9973  0.9970  0.9968  0.9968  0.9961  0.9948  0.9947  0.9942  0.9941  0.9939  0.9921  0.9919
[17 : 32]:	0.9917  0.9915  0.9913  0.9911  0.9905  0.9902  0.9899  0.9890  0.9884  0.9882  0.9870  0.9863  0.9863  0.9857  0.9852  0.9851
[33 : 48]:	0.9845  0.9836  0.9835  0.9822  0.9817  0.9813  0.9809  0.9803  0.9799  0.9789  0.9787  0.9786  0.9785  0.9777  0.9771  0.9763
[49 : 64]:	0.9761  0.9761  0.9759  0.9750  0.9747  0.9745  0.9744  0.9740  0.9739  0.9721  0.9711  0.9709  0.9706  0.9705  0.9699  0.9697
2024-04-28 20:39:49 [INFO] [evolutionary_search.cc:727] Got 64 candidate(s) with evolutionary search
2024-04-28 20:39:49 [INFO] [evolutionary_search.cc:730] Sending 64 candidates(s) for measurement
2024-04-28 21:12:02 [INFO] [task_scheduler.cc:131] [Task #4: fused_nn_contrib_conv2d_NCHWc_add_2] Trial #1: GFLOPs: 92.8708. Time: 139.3915 us. Best GFLOPs: 92.8708
2024-04-28 21:12:02 [INFO] [task_scheduler.cc:131] [Task #4: fused_nn_contrib_conv2d_NCHWc_add_2] Trial #2: GFLOPs: 18.6786. Time: 693.0620 us. Best GFLOPs: 92.8708
2024-04-28 21:12:02 [INFO] [task_scheduler.cc:131] [Task #4: fused_nn_contrib_conv2d_NCHWc_add_2] Trial #3: GFLOPs: 61.7869. Time: 209.5171 us. Best GFLOPs: 92.8708
2024-04-28 21:12:02 [INFO] [task_scheduler.cc:121] [Task #4: fused_nn_contrib_conv2d_NCHWc_add_2] Trial #4: Error in building:
LocalBuilder: Timeout, killed after 30.0 seconds
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(8), T.int64(56), T.int64(56), T.int64(8)), "float32"), p1: T.Buffer((T.int64(4), T.int64(8), T.int64(1), T.int64(1), T.int64(8), T.int64(32)), "float32"), p2: T.Buffer((T.int64(1), T.int64(4), T.int64(1), T.int64(1), T.int64(32)), "float32"), T_add: T.Buffer((T.int64(1), T.int64(4), T.int64(28), T.int64(28), T.int64(32)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        conv2d_NCHWc = T.alloc_buffer((T.int64(1), T.int64(4), T.int64(28), T.int64(28), T.int64(32)))
        for n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_fused in T.parallel(T.int64(784), annotations={"pragma_auto_unroll_max_step": 512, "pragma_unroll_explicit": 1}):
            for oc_block_1 in range(T.int64(1)):
                for n_2_init, oc_chunk_2_init, oh_2_init, ow_2_init, oc_block_2_init, n_3_init, oc_chunk_3_init, oh_3_init, ow_3_init in T.grid(T.int64(1), T.int64(1), T.int64(2), T.int64(2), T.int64(2), T.int64(1), T.int64(1), T.int64(1), T.int64(2)):
                    for oc_block_3_fused_init in T.vectorized(T.int64(8)):
                        with T.block("conv2d_NCHWc_init"):
                            v_n = T.axis.spatial(T.int64(1), n_2_init + n_3_init)
                            v_oc_chunk = T.axis.spatial(T.int64(4), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_fused // T.int64(196) + oc_chunk_2_init + oc_chunk_3_init)
                            v_oh = T.axis.spatial(T.int64(28), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_fused % T.int64(196) // T.int64(14) * T.int64(2) + oh_2_init + oh_3_init)
                            v_ow = T.axis.spatial(T.int64(28), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_fused % T.int64(7) * T.int64(4) + ow_2_init * T.int64(2) + ow_3_init)
                            v_oc_block = T.axis.spatial(T.int64(32), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_fused % T.int64(14) // T.int64(7) * T.int64(16) + oc_block_1 * T.int64(16) + oc_block_2_init * T.int64(8) + oc_block_3_fused_init)
                            T.reads()
                            T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                            T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                            conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = T.float32(0)
                for ic_0, kh_0, kw_0, n_2, oc_chunk_2, oh_2, ow_2, oc_block_2, ic_1, kh_1, kw_1, n_3, oc_chunk_3, oh_3, ow_3 in T.grid(T.int64(2), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(2), T.int64(2), T.int64(32), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(2)):
                    for oc_block_3_fused in T.vectorized(T.int64(8)):
                        with T.block("conv2d_NCHWc_update"):
                            v_n = T.axis.spatial(T.int64(1), n_2 + n_3)
                            v_oc_chunk = T.axis.spatial(T.int64(4), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_fused // T.int64(196) + oc_chunk_2 + oc_chunk_3)
                            v_oh = T.axis.spatial(T.int64(28), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_fused % T.int64(196) // T.int64(14) * T.int64(2) + oh_2 + oh_3)
                            v_ow = T.axis.spatial(T.int64(28), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_fused % T.int64(7) * T.int64(4) + ow_2 * T.int64(2) + ow_3)
                            v_oc_block = T.axis.spatial(T.int64(32), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_fused % T.int64(14) // T.int64(7) * T.int64(16) + oc_block_1 * T.int64(16) + oc_block_2 * T.int64(8) + oc_block_3_fused)
                            v_ic = T.axis.reduce(T.int64(64), ic_0 * T.int64(32) + ic_1)
                            v_kh = T.axis.reduce(T.int64(1), kh_0 + kh_1)
                            v_kw = T.axis.reduce(T.int64(1), kw_0 + kw_1)
                            T.reads(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block], p0[v_n, v_ic // T.int64(8), v_oh * T.int64(2) + v_kh, v_ow * T.int64(2) + v_kw, v_ic % T.int64(8)], p1[v_oc_chunk, v_ic // T.int64(8), v_kh, v_kw, v_ic % T.int64(8), v_oc_block])
                            T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                            T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                            conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] + p0[v_n, v_ic // T.int64(8), v_oh * T.int64(2) + v_kh, v_ow * T.int64(2) + v_kw, v_ic % T.int64(8)] * p1[v_oc_chunk, v_ic // T.int64(8), v_kh, v_kw, v_ic % T.int64(8), v_oc_block]
        for ax0_ax1_ax2_ax3_ax4_fused_0 in T.parallel(T.int64(1568)):
            for ax0_ax1_ax2_ax3_ax4_fused_1 in T.vectorized(T.int64(64)):
                with T.block("T_add"):
                    v_ax0 = T.axis.spatial(T.int64(1), T.int64(0))
                    v_ax1 = T.axis.spatial(T.int64(4), (ax0_ax1_ax2_ax3_ax4_fused_0 * T.int64(64) + ax0_ax1_ax2_ax3_ax4_fused_1) // T.int64(25088))
                    v_ax2 = T.axis.spatial(T.int64(28), (ax0_ax1_ax2_ax3_ax4_fused_0 * T.int64(64) + ax0_ax1_ax2_ax3_ax4_fused_1) % T.int64(25088) // T.int64(896))
                    v_ax3 = T.axis.spatial(T.int64(28), (ax0_ax1_ax2_ax3_ax4_fused_0 * T.int64(64) + ax0_ax1_ax2_ax3_ax4_fused_1) % T.int64(896) // T.int64(32))
                    v_ax4 = T.axis.spatial(T.int64(32), (ax0_ax1_ax2_ax3_ax4_fused_0 * T.int64(64) + ax0_ax1_ax2_ax3_ax4_fused_1) % T.int64(32))
                    T.reads(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4])
                    T.writes(T_add[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                    T_add[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] + p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4]
b0 = sch.get_block(name="conv2d_NCHWc", func_name="main")
b1 = sch.get_block(name="root", func_name="main")
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.tiling_structure", ann_val="SSRSRS")
l2, l3, l4, l5, l6, l7, l8, l9 = sch.get_loops(block=b0)
v10, v11, v12, v13 = sch.sample_perfect_tile(loop=l2, n=4, max_innermost_factor=64, decision=[1, 1, 1, 1])
l14, l15, l16, l17 = sch.split(loop=l2, factors=[v10, v11, v12, v13], preserve_unit_iters=True)
v18, v19, v20, v21 = sch.sample_perfect_tile(loop=l3, n=4, max_innermost_factor=64, decision=[4, 1, 1, 1])
l22, l23, l24, l25 = sch.split(loop=l3, factors=[v18, v19, v20, v21], preserve_unit_iters=True)
v26, v27, v28, v29 = sch.sample_perfect_tile(loop=l4, n=4, max_innermost_factor=64, decision=[14, 1, 2, 1])
l30, l31, l32, l33 = sch.split(loop=l4, factors=[v26, v27, v28, v29], preserve_unit_iters=True)
v34, v35, v36, v37 = sch.sample_perfect_tile(loop=l5, n=4, max_innermost_factor=64, decision=[1, 7, 2, 2])
l38, l39, l40, l41 = sch.split(loop=l5, factors=[v34, v35, v36, v37], preserve_unit_iters=True)
v42, v43, v44, v45 = sch.sample_perfect_tile(loop=l6, n=4, max_innermost_factor=64, decision=[2, 1, 2, 8])
l46, l47, l48, l49 = sch.split(loop=l6, factors=[v42, v43, v44, v45], preserve_unit_iters=True)
v50, v51 = sch.sample_perfect_tile(loop=l7, n=2, max_innermost_factor=64, decision=[2, 32])
l52, l53 = sch.split(loop=l7, factors=[v50, v51], preserve_unit_iters=True)
v54, v55 = sch.sample_perfect_tile(loop=l8, n=2, max_innermost_factor=64, decision=[1, 1])
l56, l57 = sch.split(loop=l8, factors=[v54, v55], preserve_unit_iters=True)
v58, v59 = sch.sample_perfect_tile(loop=l9, n=2, max_innermost_factor=64, decision=[1, 1])
l60, l61 = sch.split(loop=l9, factors=[v58, v59], preserve_unit_iters=True)
sch.reorder(l14, l22, l30, l38, l46, l15, l23, l31, l39, l47, l52, l56, l60, l16, l24, l32, l40, l48, l53, l57, l61, l17, l25, l33, l41, l49)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.vectorize", ann_val=64)
v62 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.unroll_explicit", ann_val=v62)
sch.enter_postproc()
b63 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b63, ann_key="meta_schedule.parallel")
sch.unannotate(block_or_loop=b63, ann_key="meta_schedule.vectorize")
sch.unannotate(block_or_loop=b63, ann_key="meta_schedule.unroll_explicit")
b64, b65 = sch.get_child_blocks(b63)
l66, l67, l68, l69, l70, l71, l72, l73, l74, l75, l76, l77, l78, l79, l80, l81, l82, l83, l84, l85, l86, l87, l88, l89, l90, l91 = sch.get_loops(block=b64)
l92 = sch.fuse(l66, l67, l68, l69, l70, l71, l72, l73, l74, preserve_unit_iters=True)
sch.parallel(loop=l92)
l93 = sch.fuse(l91, preserve_unit_iters=True)
sch.vectorize(loop=l93)
sch.annotate(block_or_loop=l92, ann_key="pragma_auto_unroll_max_step", ann_val=512)
sch.annotate(block_or_loop=l92, ann_key="pragma_unroll_explicit", ann_val=1)
l94, l95, l96, l97, l98 = sch.get_loops(block=b65)
l99 = sch.fuse(l94, l95, l96, l97, l98, preserve_unit_iters=True)
l100, l101 = sch.split(loop=l99, factors=[None, 64], preserve_unit_iters=True)
sch.parallel(loop=l100)
sch.vectorize(loop=l101)
b102 = sch.get_block(name="conv2d_NCHWc", func_name="main")
l103, l104, l105, l106, l107, l108, l109, l110, l111, l112, l113, l114, l115, l116, l117, l118, l119, l120 = sch.get_loops(block=b102)
b121 = sch.decompose_reduction(block=b102, loop=l105)
2024-04-28 21:12:02 [INFO] [task_scheduler.cc:131] [Task #4: fused_nn_contrib_conv2d_NCHWc_add_2] Trial #5: GFLOPs: 45.1928. Time: 286.4486 us. Best GFLOPs: 92.8708
2024-04-28 21:12:02 [INFO] [task_scheduler.cc:121] [Task #4: fused_nn_contrib_conv2d_NCHWc_add_2] Trial #6: Error in building:
LocalBuilder: Timeout, killed after 30.0 seconds
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(8), T.int64(56), T.int64(56), T.int64(8)), "float32"), p1: T.Buffer((T.int64(4), T.int64(8), T.int64(1), T.int64(1), T.int64(8), T.int64(32)), "float32"), p2: T.Buffer((T.int64(1), T.int64(4), T.int64(1), T.int64(1), T.int64(32)), "float32"), T_add: T.Buffer((T.int64(1), T.int64(4), T.int64(28), T.int64(28), T.int64(32)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        conv2d_NCHWc = T.alloc_buffer((T.int64(1), T.int64(4), T.int64(28), T.int64(28), T.int64(32)))
        for n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused in T.parallel(T.int64(448), annotations={"pragma_auto_unroll_max_step": 512, "pragma_unroll_explicit": 1}):
            for n_2_init, oc_chunk_2_init, oh_2_init, ow_2_init, oc_block_2_init, n_3_init, oc_chunk_3_init, oh_3_init, ow_3_init in T.grid(T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(1), T.int64(2), T.int64(1), T.int64(14)):
                for oc_block_3_fused_init in T.vectorized(T.int64(4)):
                    with T.block("conv2d_NCHWc_init"):
                        v_n = T.axis.spatial(T.int64(1), n_2_init + n_3_init)
                        v_oc_chunk = T.axis.spatial(T.int64(4), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused // T.int64(224) * T.int64(2) + oc_chunk_2_init * T.int64(2) + oc_chunk_3_init)
                        v_oh = T.axis.spatial(T.int64(28), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused % T.int64(224) // T.int64(8) + oh_2_init + oh_3_init)
                        v_ow = T.axis.spatial(T.int64(28), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused % T.int64(2) * T.int64(14) + ow_2_init * T.int64(14) + ow_3_init)
                        v_oc_block = T.axis.spatial(T.int64(32), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused % T.int64(8) // T.int64(2) * T.int64(8) + oc_block_2_init * T.int64(4) + oc_block_3_fused_init)
                        T.reads()
                        T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                        T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                        conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = T.float32(0)
            for ic_0, kh_0, kw_0, n_2, oc_chunk_2, oh_2, ow_2, oc_block_2, ic_1, kh_1, kw_1, n_3, oc_chunk_3, oh_3, ow_3 in T.grid(T.int64(4), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(16), T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(1), T.int64(14)):
                for oc_block_3_fused in T.vectorized(T.int64(4)):
                    with T.block("conv2d_NCHWc_update"):
                        v_n = T.axis.spatial(T.int64(1), n_2 + n_3)
                        v_oc_chunk = T.axis.spatial(T.int64(4), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused // T.int64(224) * T.int64(2) + oc_chunk_2 * T.int64(2) + oc_chunk_3)
                        v_oh = T.axis.spatial(T.int64(28), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused % T.int64(224) // T.int64(8) + oh_2 + oh_3)
                        v_ow = T.axis.spatial(T.int64(28), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused % T.int64(2) * T.int64(14) + ow_2 * T.int64(14) + ow_3)
                        v_oc_block = T.axis.spatial(T.int64(32), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused % T.int64(8) // T.int64(2) * T.int64(8) + oc_block_2 * T.int64(4) + oc_block_3_fused)
                        v_ic = T.axis.reduce(T.int64(64), ic_0 * T.int64(16) + ic_1)
                        v_kh = T.axis.reduce(T.int64(1), kh_0 + kh_1)
                        v_kw = T.axis.reduce(T.int64(1), kw_0 + kw_1)
                        T.reads(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block], p0[v_n, v_ic // T.int64(8), v_oh * T.int64(2) + v_kh, v_ow * T.int64(2) + v_kw, v_ic % T.int64(8)], p1[v_oc_chunk, v_ic // T.int64(8), v_kh, v_kw, v_ic % T.int64(8), v_oc_block])
                        T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                        T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                        conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] + p0[v_n, v_ic // T.int64(8), v_oh * T.int64(2) + v_kh, v_ow * T.int64(2) + v_kw, v_ic % T.int64(8)] * p1[v_oc_chunk, v_ic // T.int64(8), v_kh, v_kw, v_ic % T.int64(8), v_oc_block]
        for ax0_ax1_ax2_ax3_ax4_fused_0 in T.parallel(T.int64(1568)):
            for ax0_ax1_ax2_ax3_ax4_fused_1 in T.vectorized(T.int64(64)):
                with T.block("T_add"):
                    v_ax0 = T.axis.spatial(T.int64(1), T.int64(0))
                    v_ax1 = T.axis.spatial(T.int64(4), (ax0_ax1_ax2_ax3_ax4_fused_0 * T.int64(64) + ax0_ax1_ax2_ax3_ax4_fused_1) // T.int64(25088))
                    v_ax2 = T.axis.spatial(T.int64(28), (ax0_ax1_ax2_ax3_ax4_fused_0 * T.int64(64) + ax0_ax1_ax2_ax3_ax4_fused_1) % T.int64(25088) // T.int64(896))
                    v_ax3 = T.axis.spatial(T.int64(28), (ax0_ax1_ax2_ax3_ax4_fused_0 * T.int64(64) + ax0_ax1_ax2_ax3_ax4_fused_1) % T.int64(896) // T.int64(32))
                    v_ax4 = T.axis.spatial(T.int64(32), (ax0_ax1_ax2_ax3_ax4_fused_0 * T.int64(64) + ax0_ax1_ax2_ax3_ax4_fused_1) % T.int64(32))
                    T.reads(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4])
                    T.writes(T_add[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                    T_add[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] + p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4]
b0 = sch.get_block(name="conv2d_NCHWc", func_name="main")
b1 = sch.get_block(name="root", func_name="main")
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.tiling_structure", ann_val="SSRSRS")
l2, l3, l4, l5, l6, l7, l8, l9 = sch.get_loops(block=b0)
v10, v11, v12, v13 = sch.sample_perfect_tile(loop=l2, n=4, max_innermost_factor=64, decision=[1, 1, 1, 1])
l14, l15, l16, l17 = sch.split(loop=l2, factors=[v10, v11, v12, v13], preserve_unit_iters=True)
v18, v19, v20, v21 = sch.sample_perfect_tile(loop=l3, n=4, max_innermost_factor=64, decision=[2, 1, 1, 2])
l22, l23, l24, l25 = sch.split(loop=l3, factors=[v18, v19, v20, v21], preserve_unit_iters=True)
v26, v27, v28, v29 = sch.sample_perfect_tile(loop=l4, n=4, max_innermost_factor=64, decision=[28, 1, 1, 1])
l30, l31, l32, l33 = sch.split(loop=l4, factors=[v26, v27, v28, v29], preserve_unit_iters=True)
v34, v35, v36, v37 = sch.sample_perfect_tile(loop=l5, n=4, max_innermost_factor=64, decision=[1, 2, 1, 14])
l38, l39, l40, l41 = sch.split(loop=l5, factors=[v34, v35, v36, v37], preserve_unit_iters=True)
v42, v43, v44, v45 = sch.sample_perfect_tile(loop=l6, n=4, max_innermost_factor=64, decision=[4, 1, 2, 4])
l46, l47, l48, l49 = sch.split(loop=l6, factors=[v42, v43, v44, v45], preserve_unit_iters=True)
v50, v51 = sch.sample_perfect_tile(loop=l7, n=2, max_innermost_factor=64, decision=[4, 16])
l52, l53 = sch.split(loop=l7, factors=[v50, v51], preserve_unit_iters=True)
v54, v55 = sch.sample_perfect_tile(loop=l8, n=2, max_innermost_factor=64, decision=[1, 1])
l56, l57 = sch.split(loop=l8, factors=[v54, v55], preserve_unit_iters=True)
v58, v59 = sch.sample_perfect_tile(loop=l9, n=2, max_innermost_factor=64, decision=[1, 1])
l60, l61 = sch.split(loop=l9, factors=[v58, v59], preserve_unit_iters=True)
sch.reorder(l14, l22, l30, l38, l46, l15, l23, l31, l39, l47, l52, l56, l60, l16, l24, l32, l40, l48, l53, l57, l61, l17, l25, l33, l41, l49)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.vectorize", ann_val=64)
v62 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.unroll_explicit", ann_val=v62)
sch.enter_postproc()
b63 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b63, ann_key="meta_schedule.parallel")
sch.unannotate(block_or_loop=b63, ann_key="meta_schedule.vectorize")
sch.unannotate(block_or_loop=b63, ann_key="meta_schedule.unroll_explicit")
b64, b65 = sch.get_child_blocks(b63)
l66, l67, l68, l69, l70, l71, l72, l73, l74, l75, l76, l77, l78, l79, l80, l81, l82, l83, l84, l85, l86, l87, l88, l89, l90, l91 = sch.get_loops(block=b64)
l92 = sch.fuse(l66, l67, l68, l69, l70, l71, l72, l73, l74, l75, preserve_unit_iters=True)
sch.parallel(loop=l92)
l93 = sch.fuse(l91, preserve_unit_iters=True)
sch.vectorize(loop=l93)
sch.annotate(block_or_loop=l92, ann_key="pragma_auto_unroll_max_step", ann_val=512)
sch.annotate(block_or_loop=l92, ann_key="pragma_unroll_explicit", ann_val=1)
l94, l95, l96, l97, l98 = sch.get_loops(block=b65)
l99 = sch.fuse(l94, l95, l96, l97, l98, preserve_unit_iters=True)
l100, l101 = sch.split(loop=l99, factors=[None, 64], preserve_unit_iters=True)
sch.parallel(loop=l100)
sch.vectorize(loop=l101)
b102 = sch.get_block(name="conv2d_NCHWc", func_name="main")
l103, l104, l105, l106, l107, l108, l109, l110, l111, l112, l113, l114, l115, l116, l117, l118, l119 = sch.get_loops(block=b102)
b120 = sch.decompose_reduction(block=b102, loop=l104)
2024-04-28 21:12:02 [INFO] [task_scheduler.cc:131] [Task #4: fused_nn_contrib_conv2d_NCHWc_add_2] Trial #7: GFLOPs: 162.4601. Time: 79.6836 us. Best GFLOPs: 162.4601
2024-04-28 21:12:02 [INFO] [task_scheduler.cc:131] [Task #4: fused_nn_contrib_conv2d_NCHWc_add_2] Trial #8: GFLOPs: 69.0558. Time: 187.4630 us. Best GFLOPs: 162.4601
2024-04-28 21:12:02 [INFO] [task_scheduler.cc:131] [Task #4: fused_nn_contrib_conv2d_NCHWc_add_2] Trial #9: GFLOPs: 82.7030. Time: 156.5290 us. Best GFLOPs: 162.4601
2024-04-28 21:12:02 [INFO] [task_scheduler.cc:131] [Task #4: fused_nn_contrib_conv2d_NCHWc_add_2] Trial #10: GFLOPs: 91.7663. Time: 141.0693 us. Best GFLOPs: 162.4601
2024-04-28 21:12:02 [INFO] [task_scheduler.cc:131] [Task #4: fused_nn_contrib_conv2d_NCHWc_add_2] Trial #11: GFLOPs: 5.7859. Time: 2237.4193 us. Best GFLOPs: 162.4601
2024-04-28 21:12:02 [INFO] [task_scheduler.cc:131] [Task #4: fused_nn_contrib_conv2d_NCHWc_add_2] Trial #12: GFLOPs: 117.1042. Time: 110.5461 us. Best GFLOPs: 162.4601
2024-04-28 21:12:02 [INFO] [task_scheduler.cc:131] [Task #4: fused_nn_contrib_conv2d_NCHWc_add_2] Trial #13: GFLOPs: 1.0971. Time: 11799.8507 us. Best GFLOPs: 162.4601
2024-04-28 21:12:02 [INFO] [task_scheduler.cc:131] [Task #4: fused_nn_contrib_conv2d_NCHWc_add_2] Trial #14: GFLOPs: 6.5059. Time: 1989.7877 us. Best GFLOPs: 162.4601
2024-04-28 21:12:02 [INFO] [task_scheduler.cc:131] [Task #4: fused_nn_contrib_conv2d_NCHWc_add_2] Trial #15: GFLOPs: 4.5964. Time: 2816.4312 us. Best GFLOPs: 162.4601
2024-04-28 21:12:02 [INFO] [task_scheduler.cc:131] [Task #4: fused_nn_contrib_conv2d_NCHWc_add_2] Trial #16: GFLOPs: 38.0402. Time: 340.3088 us. Best GFLOPs: 162.4601
2024-04-28 21:12:02 [INFO] [task_scheduler.cc:131] [Task #4: fused_nn_contrib_conv2d_NCHWc_add_2] Trial #17: GFLOPs: 79.5415. Time: 162.7504 us. Best GFLOPs: 162.4601
2024-04-28 21:12:02 [INFO] [task_scheduler.cc:131] [Task #4: fused_nn_contrib_conv2d_NCHWc_add_2] Trial #18: GFLOPs: 26.0706. Time: 496.5518 us. Best GFLOPs: 162.4601
2024-04-28 21:12:02 [INFO] [task_scheduler.cc:131] [Task #4: fused_nn_contrib_conv2d_NCHWc_add_2] Trial #19: GFLOPs: 43.6939. Time: 296.2750 us. Best GFLOPs: 162.4601
2024-04-28 21:12:02 [INFO] [task_scheduler.cc:131] [Task #4: fused_nn_contrib_conv2d_NCHWc_add_2] Trial #20: GFLOPs: 113.9177. Time: 113.6382 us. Best GFLOPs: 162.4601
2024-04-28 21:12:02 [INFO] [task_scheduler.cc:131] [Task #4: fused_nn_contrib_conv2d_NCHWc_add_2] Trial #21: GFLOPs: 49.4872. Time: 261.5911 us. Best GFLOPs: 162.4601
2024-04-28 21:12:02 [INFO] [task_scheduler.cc:131] [Task #4: fused_nn_contrib_conv2d_NCHWc_add_2] Trial #22: GFLOPs: 18.6777. Time: 693.0941 us. Best GFLOPs: 162.4601
2024-04-28 21:12:02 [INFO] [task_scheduler.cc:131] [Task #4: fused_nn_contrib_conv2d_NCHWc_add_2] Trial #23: GFLOPs: 76.9505. Time: 168.2303 us. Best GFLOPs: 162.4601
2024-04-28 21:12:02 [INFO] [task_scheduler.cc:131] [Task #4: fused_nn_contrib_conv2d_NCHWc_add_2] Trial #24: GFLOPs: 122.1889. Time: 105.9459 us. Best GFLOPs: 162.4601
2024-04-28 21:12:02 [INFO] [task_scheduler.cc:131] [Task #4: fused_nn_contrib_conv2d_NCHWc_add_2] Trial #25: GFLOPs: 139.1261. Time: 93.0480 us. Best GFLOPs: 162.4601
2024-04-28 21:12:02 [INFO] [task_scheduler.cc:131] [Task #4: fused_nn_contrib_conv2d_NCHWc_add_2] Trial #26: GFLOPs: 143.6007. Time: 90.1486 us. Best GFLOPs: 162.4601
2024-04-28 21:12:02 [INFO] [task_scheduler.cc:131] [Task #4: fused_nn_contrib_conv2d_NCHWc_add_2] Trial #27: GFLOPs: 4.5607. Time: 2838.4707 us. Best GFLOPs: 162.4601
2024-04-28 21:12:02 [INFO] [task_scheduler.cc:131] [Task #4: fused_nn_contrib_conv2d_NCHWc_add_2] Trial #28: GFLOPs: 84.3213. Time: 153.5248 us. Best GFLOPs: 162.4601
2024-04-28 21:12:02 [INFO] [task_scheduler.cc:131] [Task #4: fused_nn_contrib_conv2d_NCHWc_add_2] Trial #29: GFLOPs: 101.4319. Time: 127.6266 us. Best GFLOPs: 162.4601
2024-04-28 21:12:02 [INFO] [task_scheduler.cc:131] [Task #4: fused_nn_contrib_conv2d_NCHWc_add_2] Trial #30: GFLOPs: 124.7333. Time: 103.7847 us. Best GFLOPs: 162.4601
2024-04-28 21:12:02 [INFO] [task_scheduler.cc:131] [Task #4: fused_nn_contrib_conv2d_NCHWc_add_2] Trial #31: GFLOPs: 5.7929. Time: 2234.7196 us. Best GFLOPs: 162.4601
2024-04-28 21:12:02 [INFO] [task_scheduler.cc:131] [Task #4: fused_nn_contrib_conv2d_NCHWc_add_2] Trial #32: GFLOPs: 55.7067. Time: 232.3852 us. Best GFLOPs: 162.4601
2024-04-28 21:12:02 [INFO] [task_scheduler.cc:121] [Task #4: fused_nn_contrib_conv2d_NCHWc_add_2] Trial #33: Error in building:
LocalBuilder: Timeout, killed after 30.0 seconds
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(8), T.int64(56), T.int64(56), T.int64(8)), "float32"), p1: T.Buffer((T.int64(4), T.int64(8), T.int64(1), T.int64(1), T.int64(8), T.int64(32)), "float32"), p2: T.Buffer((T.int64(1), T.int64(4), T.int64(1), T.int64(1), T.int64(32)), "float32"), T_add: T.Buffer((T.int64(1), T.int64(4), T.int64(28), T.int64(28), T.int64(32)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        conv2d_NCHWc = T.alloc_buffer((T.int64(1), T.int64(4), T.int64(28), T.int64(28), T.int64(32)))
        for n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused in T.parallel(T.int64(28), annotations={"pragma_auto_unroll_max_step": 512, "pragma_unroll_explicit": 1}):
            for n_2_init, oc_chunk_2_init, oh_2_init, ow_2_init, oc_block_2_init, n_3_init, oc_chunk_3_init, oh_3_init, ow_3_init in T.grid(T.int64(1), T.int64(2), T.int64(4), T.int64(2), T.int64(2), T.int64(1), T.int64(1), T.int64(1), T.int64(14)):
                for oc_block_3_fused_init in T.vectorized(T.int64(8)):
                    with T.block("conv2d_NCHWc_init"):
                        v_n = T.axis.spatial(T.int64(1), n_2_init + n_3_init)
                        v_oc_chunk = T.axis.spatial(T.int64(4), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused // T.int64(14) * T.int64(2) + oc_chunk_2_init + oc_chunk_3_init)
                        v_oh = T.axis.spatial(T.int64(28), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused % T.int64(14) // T.int64(2) * T.int64(4) + oh_2_init + oh_3_init)
                        v_ow = T.axis.spatial(T.int64(28), ow_2_init * T.int64(14) + ow_3_init)
                        v_oc_block = T.axis.spatial(T.int64(32), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused % T.int64(2) * T.int64(16) + oc_block_2_init * T.int64(8) + oc_block_3_fused_init)
                        T.reads()
                        T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                        T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                        conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = T.float32(0)
            for ic_0, kh_0, kw_0, n_2, oc_chunk_2, oh_2, ow_2, oc_block_2, ic_1, kh_1, kw_1, n_3, oc_chunk_3, oh_3, ow_3 in T.grid(T.int64(32), T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(4), T.int64(2), T.int64(2), T.int64(2), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(14)):
                for oc_block_3_fused in T.vectorized(T.int64(8)):
                    with T.block("conv2d_NCHWc_update"):
                        v_n = T.axis.spatial(T.int64(1), n_2 + n_3)
                        v_oc_chunk = T.axis.spatial(T.int64(4), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused // T.int64(14) * T.int64(2) + oc_chunk_2 + oc_chunk_3)
                        v_oh = T.axis.spatial(T.int64(28), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused % T.int64(14) // T.int64(2) * T.int64(4) + oh_2 + oh_3)
                        v_ow = T.axis.spatial(T.int64(28), ow_2 * T.int64(14) + ow_3)
                        v_oc_block = T.axis.spatial(T.int64(32), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused % T.int64(2) * T.int64(16) + oc_block_2 * T.int64(8) + oc_block_3_fused)
                        v_ic = T.axis.reduce(T.int64(64), ic_0 * T.int64(2) + ic_1)
                        v_kh = T.axis.reduce(T.int64(1), kh_0 + kh_1)
                        v_kw = T.axis.reduce(T.int64(1), kw_0 + kw_1)
                        T.reads(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block], p0[v_n, v_ic // T.int64(8), v_oh * T.int64(2) + v_kh, v_ow * T.int64(2) + v_kw, v_ic % T.int64(8)], p1[v_oc_chunk, v_ic // T.int64(8), v_kh, v_kw, v_ic % T.int64(8), v_oc_block])
                        T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                        T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                        conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] + p0[v_n, v_ic // T.int64(8), v_oh * T.int64(2) + v_kh, v_ow * T.int64(2) + v_kw, v_ic % T.int64(8)] * p1[v_oc_chunk, v_ic // T.int64(8), v_kh, v_kw, v_ic % T.int64(8), v_oc_block]
        for ax0_ax1_ax2_ax3_ax4_fused_0 in T.parallel(T.int64(1568)):
            for ax0_ax1_ax2_ax3_ax4_fused_1 in T.vectorized(T.int64(64)):
                with T.block("T_add"):
                    v_ax0 = T.axis.spatial(T.int64(1), T.int64(0))
                    v_ax1 = T.axis.spatial(T.int64(4), (ax0_ax1_ax2_ax3_ax4_fused_0 * T.int64(64) + ax0_ax1_ax2_ax3_ax4_fused_1) // T.int64(25088))
                    v_ax2 = T.axis.spatial(T.int64(28), (ax0_ax1_ax2_ax3_ax4_fused_0 * T.int64(64) + ax0_ax1_ax2_ax3_ax4_fused_1) % T.int64(25088) // T.int64(896))
                    v_ax3 = T.axis.spatial(T.int64(28), (ax0_ax1_ax2_ax3_ax4_fused_0 * T.int64(64) + ax0_ax1_ax2_ax3_ax4_fused_1) % T.int64(896) // T.int64(32))
                    v_ax4 = T.axis.spatial(T.int64(32), (ax0_ax1_ax2_ax3_ax4_fused_0 * T.int64(64) + ax0_ax1_ax2_ax3_ax4_fused_1) % T.int64(32))
                    T.reads(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4])
                    T.writes(T_add[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                    T_add[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] + p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4]
b0 = sch.get_block(name="conv2d_NCHWc", func_name="main")
b1 = sch.get_block(name="root", func_name="main")
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.tiling_structure", ann_val="SSRSRS")
l2, l3, l4, l5, l6, l7, l8, l9 = sch.get_loops(block=b0)
v10, v11, v12, v13 = sch.sample_perfect_tile(loop=l2, n=4, max_innermost_factor=64, decision=[1, 1, 1, 1])
l14, l15, l16, l17 = sch.split(loop=l2, factors=[v10, v11, v12, v13], preserve_unit_iters=True)
v18, v19, v20, v21 = sch.sample_perfect_tile(loop=l3, n=4, max_innermost_factor=64, decision=[2, 1, 2, 1])
l22, l23, l24, l25 = sch.split(loop=l3, factors=[v18, v19, v20, v21], preserve_unit_iters=True)
v26, v27, v28, v29 = sch.sample_perfect_tile(loop=l4, n=4, max_innermost_factor=64, decision=[7, 1, 4, 1])
l30, l31, l32, l33 = sch.split(loop=l4, factors=[v26, v27, v28, v29], preserve_unit_iters=True)
v34, v35, v36, v37 = sch.sample_perfect_tile(loop=l5, n=4, max_innermost_factor=64, decision=[1, 1, 2, 14])
l38, l39, l40, l41 = sch.split(loop=l5, factors=[v34, v35, v36, v37], preserve_unit_iters=True)
v42, v43, v44, v45 = sch.sample_perfect_tile(loop=l6, n=4, max_innermost_factor=64, decision=[2, 1, 2, 8])
l46, l47, l48, l49 = sch.split(loop=l6, factors=[v42, v43, v44, v45], preserve_unit_iters=True)
v50, v51 = sch.sample_perfect_tile(loop=l7, n=2, max_innermost_factor=64, decision=[32, 2])
l52, l53 = sch.split(loop=l7, factors=[v50, v51], preserve_unit_iters=True)
v54, v55 = sch.sample_perfect_tile(loop=l8, n=2, max_innermost_factor=64, decision=[1, 1])
l56, l57 = sch.split(loop=l8, factors=[v54, v55], preserve_unit_iters=True)
v58, v59 = sch.sample_perfect_tile(loop=l9, n=2, max_innermost_factor=64, decision=[1, 1])
l60, l61 = sch.split(loop=l9, factors=[v58, v59], preserve_unit_iters=True)
sch.reorder(l14, l22, l30, l38, l46, l15, l23, l31, l39, l47, l52, l56, l60, l16, l24, l32, l40, l48, l53, l57, l61, l17, l25, l33, l41, l49)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.vectorize", ann_val=64)
v62 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.unroll_explicit", ann_val=v62)
sch.enter_postproc()
b63 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b63, ann_key="meta_schedule.parallel")
sch.unannotate(block_or_loop=b63, ann_key="meta_schedule.vectorize")
sch.unannotate(block_or_loop=b63, ann_key="meta_schedule.unroll_explicit")
b64, b65 = sch.get_child_blocks(b63)
l66, l67, l68, l69, l70, l71, l72, l73, l74, l75, l76, l77, l78, l79, l80, l81, l82, l83, l84, l85, l86, l87, l88, l89, l90, l91 = sch.get_loops(block=b64)
l92 = sch.fuse(l66, l67, l68, l69, l70, l71, l72, l73, l74, l75, preserve_unit_iters=True)
sch.parallel(loop=l92)
l93 = sch.fuse(l91, preserve_unit_iters=True)
sch.vectorize(loop=l93)
sch.annotate(block_or_loop=l92, ann_key="pragma_auto_unroll_max_step", ann_val=512)
sch.annotate(block_or_loop=l92, ann_key="pragma_unroll_explicit", ann_val=1)
l94, l95, l96, l97, l98 = sch.get_loops(block=b65)
l99 = sch.fuse(l94, l95, l96, l97, l98, preserve_unit_iters=True)
l100, l101 = sch.split(loop=l99, factors=[None, 64], preserve_unit_iters=True)
sch.parallel(loop=l100)
sch.vectorize(loop=l101)
b102 = sch.get_block(name="conv2d_NCHWc", func_name="main")
l103, l104, l105, l106, l107, l108, l109, l110, l111, l112, l113, l114, l115, l116, l117, l118, l119 = sch.get_loops(block=b102)
b120 = sch.decompose_reduction(block=b102, loop=l104)
2024-04-28 21:12:02 [INFO] [task_scheduler.cc:131] [Task #4: fused_nn_contrib_conv2d_NCHWc_add_2] Trial #34: GFLOPs: 34.1898. Time: 378.6338 us. Best GFLOPs: 162.4601
2024-04-28 21:12:02 [INFO] [task_scheduler.cc:131] [Task #4: fused_nn_contrib_conv2d_NCHWc_add_2] Trial #35: GFLOPs: 54.2223. Time: 238.7471 us. Best GFLOPs: 162.4601
2024-04-28 21:12:02 [INFO] [task_scheduler.cc:131] [Task #4: fused_nn_contrib_conv2d_NCHWc_add_2] Trial #36: GFLOPs: 5.2000. Time: 2489.4979 us. Best GFLOPs: 162.4601
2024-04-28 21:12:02 [INFO] [task_scheduler.cc:131] [Task #4: fused_nn_contrib_conv2d_NCHWc_add_2] Trial #37: GFLOPs: 116.4870. Time: 111.1318 us. Best GFLOPs: 162.4601
2024-04-28 21:12:02 [INFO] [task_scheduler.cc:131] [Task #4: fused_nn_contrib_conv2d_NCHWc_add_2] Trial #38: GFLOPs: 68.0415. Time: 190.2575 us. Best GFLOPs: 162.4601
2024-04-28 21:12:02 [INFO] [task_scheduler.cc:131] [Task #4: fused_nn_contrib_conv2d_NCHWc_add_2] Trial #39: GFLOPs: 22.6819. Time: 570.7369 us. Best GFLOPs: 162.4601
2024-04-28 21:12:02 [INFO] [task_scheduler.cc:131] [Task #4: fused_nn_contrib_conv2d_NCHWc_add_2] Trial #40: GFLOPs: 108.9769. Time: 118.7903 us. Best GFLOPs: 162.4601
2024-04-28 21:12:02 [INFO] [task_scheduler.cc:131] [Task #4: fused_nn_contrib_conv2d_NCHWc_add_2] Trial #41: GFLOPs: 141.6352. Time: 91.3996 us. Best GFLOPs: 162.4601
2024-04-28 21:12:02 [INFO] [task_scheduler.cc:131] [Task #4: fused_nn_contrib_conv2d_NCHWc_add_2] Trial #42: GFLOPs: 81.3211. Time: 159.1888 us. Best GFLOPs: 162.4601
2024-04-28 21:12:02 [INFO] [task_scheduler.cc:131] [Task #4: fused_nn_contrib_conv2d_NCHWc_add_2] Trial #43: GFLOPs: 269.6795. Time: 48.0029 us. Best GFLOPs: 269.6795
2024-04-28 21:12:02 [INFO] [task_scheduler.cc:131] [Task #4: fused_nn_contrib_conv2d_NCHWc_add_2] Trial #44: GFLOPs: 17.6657. Time: 732.8008 us. Best GFLOPs: 269.6795
2024-04-28 21:12:02 [INFO] [task_scheduler.cc:131] [Task #4: fused_nn_contrib_conv2d_NCHWc_add_2] Trial #45: GFLOPs: 94.2852. Time: 137.3006 us. Best GFLOPs: 269.6795
2024-04-28 21:12:02 [INFO] [task_scheduler.cc:131] [Task #4: fused_nn_contrib_conv2d_NCHWc_add_2] Trial #46: GFLOPs: 35.7962. Time: 361.6422 us. Best GFLOPs: 269.6795
2024-04-28 21:12:02 [INFO] [task_scheduler.cc:131] [Task #4: fused_nn_contrib_conv2d_NCHWc_add_2] Trial #47: GFLOPs: 26.2062. Time: 493.9835 us. Best GFLOPs: 269.6795
2024-04-28 21:12:02 [INFO] [task_scheduler.cc:131] [Task #4: fused_nn_contrib_conv2d_NCHWc_add_2] Trial #48: GFLOPs: 55.4983. Time: 233.2578 us. Best GFLOPs: 269.6795
2024-04-28 21:12:02 [INFO] [task_scheduler.cc:131] [Task #4: fused_nn_contrib_conv2d_NCHWc_add_2] Trial #49: GFLOPs: 3.8655. Time: 3348.9222 us. Best GFLOPs: 269.6795
2024-04-28 21:12:02 [INFO] [task_scheduler.cc:131] [Task #4: fused_nn_contrib_conv2d_NCHWc_add_2] Trial #50: GFLOPs: 31.6480. Time: 409.0430 us. Best GFLOPs: 269.6795
2024-04-28 21:12:02 [INFO] [task_scheduler.cc:131] [Task #4: fused_nn_contrib_conv2d_NCHWc_add_2] Trial #51: GFLOPs: 14.3624. Time: 901.3398 us. Best GFLOPs: 269.6795
2024-04-28 21:12:02 [INFO] [task_scheduler.cc:131] [Task #4: fused_nn_contrib_conv2d_NCHWc_add_2] Trial #52: GFLOPs: 14.0496. Time: 921.4061 us. Best GFLOPs: 269.6795
2024-04-28 21:12:02 [INFO] [task_scheduler.cc:131] [Task #4: fused_nn_contrib_conv2d_NCHWc_add_2] Trial #53: GFLOPs: 70.7322. Time: 183.0199 us. Best GFLOPs: 269.6795
2024-04-28 21:12:02 [INFO] [task_scheduler.cc:131] [Task #4: fused_nn_contrib_conv2d_NCHWc_add_2] Trial #54: GFLOPs: 4.7026. Time: 2752.8108 us. Best GFLOPs: 269.6795
2024-04-28 21:12:02 [INFO] [task_scheduler.cc:131] [Task #4: fused_nn_contrib_conv2d_NCHWc_add_2] Trial #55: GFLOPs: 30.5042. Time: 424.3809 us. Best GFLOPs: 269.6795
2024-04-28 21:12:02 [INFO] [task_scheduler.cc:131] [Task #4: fused_nn_contrib_conv2d_NCHWc_add_2] Trial #56: GFLOPs: 12.5515. Time: 1031.3798 us. Best GFLOPs: 269.6795
2024-04-28 21:12:02 [INFO] [task_scheduler.cc:131] [Task #4: fused_nn_contrib_conv2d_NCHWc_add_2] Trial #57: GFLOPs: 22.3509. Time: 579.1907 us. Best GFLOPs: 269.6795
2024-04-28 21:12:02 [INFO] [task_scheduler.cc:131] [Task #4: fused_nn_contrib_conv2d_NCHWc_add_2] Trial #58: GFLOPs: 38.3345. Time: 337.6964 us. Best GFLOPs: 269.6795
2024-04-28 21:12:02 [INFO] [task_scheduler.cc:131] [Task #4: fused_nn_contrib_conv2d_NCHWc_add_2] Trial #59: GFLOPs: 105.1806. Time: 123.0779 us. Best GFLOPs: 269.6795
2024-04-28 21:12:02 [INFO] [task_scheduler.cc:131] [Task #4: fused_nn_contrib_conv2d_NCHWc_add_2] Trial #60: GFLOPs: 41.9725. Time: 308.4261 us. Best GFLOPs: 269.6795
2024-04-28 21:12:02 [INFO] [task_scheduler.cc:131] [Task #4: fused_nn_contrib_conv2d_NCHWc_add_2] Trial #61: GFLOPs: 351.2488. Time: 36.8554 us. Best GFLOPs: 351.2488
2024-04-28 21:12:02 [INFO] [task_scheduler.cc:131] [Task #4: fused_nn_contrib_conv2d_NCHWc_add_2] Trial #62: GFLOPs: 59.9909. Time: 215.7896 us. Best GFLOPs: 351.2488
2024-04-28 21:12:02 [INFO] [task_scheduler.cc:131] [Task #4: fused_nn_contrib_conv2d_NCHWc_add_2] Trial #63: GFLOPs: 28.0081. Time: 462.2021 us. Best GFLOPs: 351.2488
2024-04-28 21:12:02 [INFO] [task_scheduler.cc:131] [Task #4: fused_nn_contrib_conv2d_NCHWc_add_2] Trial #64: GFLOPs: 5.9426. Time: 2178.4180 us. Best GFLOPs: 351.2488
2024-04-29 02:09:52 [INFO] [evolutionary_search.cc:713] Generating candidates......
2024-04-29 02:09:52 [INFO] [evolutionary_search.cc:715] Picked top 61 candidate(s) from database
2024-04-29 02:09:55 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x630af88)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x3fe7fb8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x385f778)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x376a1b8)]: 0 failure(s)
2024-04-29 02:09:55 [INFO] [evolutionary_search.cc:723] Sampled 451 candidate(s)
2024-04-29 02:10:00 [INFO] [evolutionary_search.cc:621] Evolve iter #0 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x630af88)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x3fe7fb8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x385f778)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x376a1b8)]: 0 failure(s)
2024-04-29 02:10:05 [INFO] [evolutionary_search.cc:621] Evolve iter #1 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x630af88)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x3fe7fb8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x385f778)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x376a1b8)]: 0 failure(s)
2024-04-29 02:10:11 [INFO] [evolutionary_search.cc:621] Evolve iter #2 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x630af88)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x3fe7fb8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x385f778)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x376a1b8)]: 0 failure(s)
2024-04-29 02:10:16 [INFO] [evolutionary_search.cc:621] Evolve iter #3 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x630af88)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x3fe7fb8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x385f778)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x376a1b8)]: 0 failure(s)
2024-04-29 02:10:19 [INFO] [evolutionary_search.cc:649] Scores of the best 64 candidates:
[1 : 16]:	0.9044  0.8795  0.8539  0.8448  0.8391  0.8248  0.8091  0.8026  0.7971  0.7971  0.7896  0.7889  0.7819  0.7780  0.7718  0.7718
[17 : 32]:	0.7709  0.7681  0.7673  0.7589  0.7561  0.7561  0.7489  0.7381  0.7343  0.7232  0.7197  0.7184  0.7027  0.6815  0.6789  0.6753
[33 : 48]:	0.6750  0.6720  0.6662  0.6646  0.6630  0.6599  0.6566  0.6564  0.6555  0.6526  0.6508  0.6463  0.6314  0.6229  0.6228  0.6207
[49 : 64]:	0.6146  0.6138  0.6121  0.6098  0.6098  0.6011  0.5930  0.5925  0.5922  0.5846  0.5789  0.5692  0.5686  0.5648  0.5604  0.5576
2024-04-29 02:10:19 [INFO] [evolutionary_search.cc:727] Got 64 candidate(s) with evolutionary search
2024-04-29 02:10:19 [INFO] [evolutionary_search.cc:730] Sending 64 candidates(s) for measurement
2024-04-29 02:11:56 [INFO] [task_scheduler.cc:131] [Task #4: fused_nn_contrib_conv2d_NCHWc_add_2] Trial #65: GFLOPs: 367.7494. Time: 35.2017 us. Best GFLOPs: 367.7494
2024-04-29 02:11:56 [INFO] [task_scheduler.cc:131] [Task #4: fused_nn_contrib_conv2d_NCHWc_add_2] Trial #66: GFLOPs: 353.4079. Time: 36.6302 us. Best GFLOPs: 367.7494
2024-04-29 02:11:56 [INFO] [task_scheduler.cc:131] [Task #4: fused_nn_contrib_conv2d_NCHWc_add_2] Trial #67: GFLOPs: 203.5467. Time: 63.5992 us. Best GFLOPs: 367.7494
2024-04-29 02:11:56 [INFO] [task_scheduler.cc:131] [Task #4: fused_nn_contrib_conv2d_NCHWc_add_2] Trial #68: GFLOPs: 216.7943. Time: 59.7129 us. Best GFLOPs: 367.7494
2024-04-29 02:11:56 [INFO] [task_scheduler.cc:131] [Task #4: fused_nn_contrib_conv2d_NCHWc_add_2] Trial #69: GFLOPs: 358.2620. Time: 36.1339 us. Best GFLOPs: 367.7494
2024-04-29 02:11:56 [INFO] [task_scheduler.cc:131] [Task #4: fused_nn_contrib_conv2d_NCHWc_add_2] Trial #70: GFLOPs: 359.6481. Time: 35.9946 us. Best GFLOPs: 367.7494
2024-04-29 02:11:56 [INFO] [task_scheduler.cc:131] [Task #4: fused_nn_contrib_conv2d_NCHWc_add_2] Trial #71: GFLOPs: 241.9001. Time: 53.5155 us. Best GFLOPs: 367.7494
2024-04-29 02:11:56 [INFO] [task_scheduler.cc:131] [Task #4: fused_nn_contrib_conv2d_NCHWc_add_2] Trial #72: GFLOPs: 341.6448. Time: 37.8914 us. Best GFLOPs: 367.7494
2024-04-29 02:11:56 [INFO] [task_scheduler.cc:131] [Task #4: fused_nn_contrib_conv2d_NCHWc_add_2] Trial #73: GFLOPs: 308.9275. Time: 41.9044 us. Best GFLOPs: 367.7494
2024-04-29 02:11:56 [INFO] [task_scheduler.cc:131] [Task #4: fused_nn_contrib_conv2d_NCHWc_add_2] Trial #74: GFLOPs: 396.2035. Time: 32.6736 us. Best GFLOPs: 396.2035
2024-04-29 02:11:56 [INFO] [task_scheduler.cc:131] [Task #4: fused_nn_contrib_conv2d_NCHWc_add_2] Trial #75: GFLOPs: 315.6256. Time: 41.0151 us. Best GFLOPs: 396.2035
2024-04-29 02:11:56 [INFO] [task_scheduler.cc:131] [Task #4: fused_nn_contrib_conv2d_NCHWc_add_2] Trial #76: GFLOPs: 368.5269. Time: 35.1274 us. Best GFLOPs: 396.2035
2024-04-29 02:11:56 [INFO] [task_scheduler.cc:131] [Task #4: fused_nn_contrib_conv2d_NCHWc_add_2] Trial #77: GFLOPs: 319.8239. Time: 40.4767 us. Best GFLOPs: 396.2035
2024-04-29 02:11:56 [INFO] [task_scheduler.cc:131] [Task #4: fused_nn_contrib_conv2d_NCHWc_add_2] Trial #78: GFLOPs: 240.5676. Time: 53.8119 us. Best GFLOPs: 396.2035
2024-04-29 02:11:56 [INFO] [task_scheduler.cc:131] [Task #4: fused_nn_contrib_conv2d_NCHWc_add_2] Trial #79: GFLOPs: 279.6985. Time: 46.2834 us. Best GFLOPs: 396.2035
2024-04-29 02:11:56 [INFO] [task_scheduler.cc:131] [Task #4: fused_nn_contrib_conv2d_NCHWc_add_2] Trial #80: GFLOPs: 262.5020. Time: 49.3155 us. Best GFLOPs: 396.2035
2024-04-29 02:11:56 [INFO] [task_scheduler.cc:131] [Task #4: fused_nn_contrib_conv2d_NCHWc_add_2] Trial #81: GFLOPs: 238.4175. Time: 54.2972 us. Best GFLOPs: 396.2035
2024-04-29 02:11:56 [INFO] [task_scheduler.cc:131] [Task #4: fused_nn_contrib_conv2d_NCHWc_add_2] Trial #82: GFLOPs: 94.0717. Time: 137.6121 us. Best GFLOPs: 396.2035
2024-04-29 02:11:56 [INFO] [task_scheduler.cc:131] [Task #4: fused_nn_contrib_conv2d_NCHWc_add_2] Trial #83: GFLOPs: 285.5835. Time: 45.3297 us. Best GFLOPs: 396.2035
2024-04-29 02:11:56 [INFO] [task_scheduler.cc:131] [Task #4: fused_nn_contrib_conv2d_NCHWc_add_2] Trial #84: GFLOPs: 357.2281. Time: 36.2385 us. Best GFLOPs: 396.2035
2024-04-29 02:11:56 [INFO] [task_scheduler.cc:131] [Task #4: fused_nn_contrib_conv2d_NCHWc_add_2] Trial #85: GFLOPs: 408.6324. Time: 31.6798 us. Best GFLOPs: 408.6324
2024-04-29 02:11:56 [INFO] [task_scheduler.cc:131] [Task #4: fused_nn_contrib_conv2d_NCHWc_add_2] Trial #86: GFLOPs: 365.7035. Time: 35.3986 us. Best GFLOPs: 408.6324
2024-04-29 02:11:56 [INFO] [task_scheduler.cc:131] [Task #4: fused_nn_contrib_conv2d_NCHWc_add_2] Trial #87: GFLOPs: 122.9142. Time: 105.3207 us. Best GFLOPs: 408.6324
2024-04-29 02:11:56 [INFO] [task_scheduler.cc:131] [Task #4: fused_nn_contrib_conv2d_NCHWc_add_2] Trial #88: GFLOPs: 145.8613. Time: 88.7515 us. Best GFLOPs: 408.6324
2024-04-29 02:11:56 [INFO] [task_scheduler.cc:131] [Task #4: fused_nn_contrib_conv2d_NCHWc_add_2] Trial #89: GFLOPs: 284.2048. Time: 45.5496 us. Best GFLOPs: 408.6324
2024-04-29 02:11:56 [INFO] [task_scheduler.cc:131] [Task #4: fused_nn_contrib_conv2d_NCHWc_add_2] Trial #90: GFLOPs: 124.3730. Time: 104.0854 us. Best GFLOPs: 408.6324
2024-04-29 02:11:56 [INFO] [task_scheduler.cc:131] [Task #4: fused_nn_contrib_conv2d_NCHWc_add_2] Trial #91: GFLOPs: 331.2684. Time: 39.0783 us. Best GFLOPs: 408.6324
2024-04-29 02:11:56 [INFO] [task_scheduler.cc:131] [Task #4: fused_nn_contrib_conv2d_NCHWc_add_2] Trial #92: GFLOPs: 306.3848. Time: 42.2521 us. Best GFLOPs: 408.6324
2024-04-29 02:11:56 [INFO] [task_scheduler.cc:131] [Task #4: fused_nn_contrib_conv2d_NCHWc_add_2] Trial #93: GFLOPs: 308.9244. Time: 41.9048 us. Best GFLOPs: 408.6324
2024-04-29 02:11:56 [INFO] [task_scheduler.cc:131] [Task #4: fused_nn_contrib_conv2d_NCHWc_add_2] Trial #94: GFLOPs: 213.0537. Time: 60.7612 us. Best GFLOPs: 408.6324
2024-04-29 02:11:56 [INFO] [task_scheduler.cc:131] [Task #4: fused_nn_contrib_conv2d_NCHWc_add_2] Trial #95: GFLOPs: 192.2460. Time: 67.3377 us. Best GFLOPs: 408.6324
2024-04-29 02:11:56 [INFO] [task_scheduler.cc:131] [Task #4: fused_nn_contrib_conv2d_NCHWc_add_2] Trial #96: GFLOPs: 331.7938. Time: 39.0164 us. Best GFLOPs: 408.6324
2024-04-29 02:11:56 [INFO] [task_scheduler.cc:131] [Task #4: fused_nn_contrib_conv2d_NCHWc_add_2] Trial #97: GFLOPs: 367.4168. Time: 35.2336 us. Best GFLOPs: 408.6324
2024-04-29 02:11:56 [INFO] [task_scheduler.cc:131] [Task #4: fused_nn_contrib_conv2d_NCHWc_add_2] Trial #98: GFLOPs: 321.8411. Time: 40.2230 us. Best GFLOPs: 408.6324
2024-04-29 02:11:56 [INFO] [task_scheduler.cc:131] [Task #4: fused_nn_contrib_conv2d_NCHWc_add_2] Trial #99: GFLOPs: 176.7184. Time: 73.2544 us. Best GFLOPs: 408.6324
2024-04-29 02:11:56 [INFO] [task_scheduler.cc:131] [Task #4: fused_nn_contrib_conv2d_NCHWc_add_2] Trial #100: GFLOPs: 92.3807. Time: 140.1312 us. Best GFLOPs: 408.6324
2024-04-29 02:11:56 [INFO] [task_scheduler.cc:131] [Task #4: fused_nn_contrib_conv2d_NCHWc_add_2] Trial #101: GFLOPs: 180.7878. Time: 71.6055 us. Best GFLOPs: 408.6324
2024-04-29 02:11:56 [INFO] [task_scheduler.cc:131] [Task #4: fused_nn_contrib_conv2d_NCHWc_add_2] Trial #102: GFLOPs: 80.4356. Time: 160.9413 us. Best GFLOPs: 408.6324
2024-04-29 02:11:56 [INFO] [task_scheduler.cc:131] [Task #4: fused_nn_contrib_conv2d_NCHWc_add_2] Trial #103: GFLOPs: 58.4427. Time: 221.5062 us. Best GFLOPs: 408.6324
2024-04-29 02:11:56 [INFO] [task_scheduler.cc:131] [Task #4: fused_nn_contrib_conv2d_NCHWc_add_2] Trial #104: GFLOPs: 140.8482. Time: 91.9103 us. Best GFLOPs: 408.6324
2024-04-29 02:11:56 [INFO] [task_scheduler.cc:131] [Task #4: fused_nn_contrib_conv2d_NCHWc_add_2] Trial #105: GFLOPs: 233.4328. Time: 55.4567 us. Best GFLOPs: 408.6324
2024-04-29 02:11:56 [INFO] [task_scheduler.cc:131] [Task #4: fused_nn_contrib_conv2d_NCHWc_add_2] Trial #106: GFLOPs: 121.5279. Time: 106.5221 us. Best GFLOPs: 408.6324
2024-04-29 02:11:56 [INFO] [task_scheduler.cc:131] [Task #4: fused_nn_contrib_conv2d_NCHWc_add_2] Trial #107: GFLOPs: 254.7237. Time: 50.8214 us. Best GFLOPs: 408.6324
2024-04-29 02:11:56 [INFO] [task_scheduler.cc:131] [Task #4: fused_nn_contrib_conv2d_NCHWc_add_2] Trial #108: GFLOPs: 80.4631. Time: 160.8863 us. Best GFLOPs: 408.6324
2024-04-29 02:11:56 [INFO] [task_scheduler.cc:131] [Task #4: fused_nn_contrib_conv2d_NCHWc_add_2] Trial #109: GFLOPs: 119.3176. Time: 108.4954 us. Best GFLOPs: 408.6324
2024-04-29 02:11:56 [INFO] [task_scheduler.cc:131] [Task #4: fused_nn_contrib_conv2d_NCHWc_add_2] Trial #110: GFLOPs: 181.5944. Time: 71.2875 us. Best GFLOPs: 408.6324
2024-04-29 02:11:56 [INFO] [task_scheduler.cc:131] [Task #4: fused_nn_contrib_conv2d_NCHWc_add_2] Trial #111: GFLOPs: 269.4159. Time: 48.0499 us. Best GFLOPs: 408.6324
2024-04-29 02:11:56 [INFO] [task_scheduler.cc:131] [Task #4: fused_nn_contrib_conv2d_NCHWc_add_2] Trial #112: GFLOPs: 366.3694. Time: 35.3343 us. Best GFLOPs: 408.6324
2024-04-29 02:11:56 [INFO] [task_scheduler.cc:131] [Task #4: fused_nn_contrib_conv2d_NCHWc_add_2] Trial #113: GFLOPs: 358.4670. Time: 36.1132 us. Best GFLOPs: 408.6324
2024-04-29 02:11:56 [INFO] [task_scheduler.cc:131] [Task #4: fused_nn_contrib_conv2d_NCHWc_add_2] Trial #114: GFLOPs: 99.8127. Time: 129.6970 us. Best GFLOPs: 408.6324
2024-04-29 02:11:56 [INFO] [task_scheduler.cc:131] [Task #4: fused_nn_contrib_conv2d_NCHWc_add_2] Trial #115: GFLOPs: 254.6765. Time: 50.8308 us. Best GFLOPs: 408.6324
2024-04-29 02:11:56 [INFO] [task_scheduler.cc:131] [Task #4: fused_nn_contrib_conv2d_NCHWc_add_2] Trial #116: GFLOPs: 287.5666. Time: 45.0171 us. Best GFLOPs: 408.6324
2024-04-29 02:11:56 [INFO] [task_scheduler.cc:131] [Task #4: fused_nn_contrib_conv2d_NCHWc_add_2] Trial #117: GFLOPs: 274.6027. Time: 47.1423 us. Best GFLOPs: 408.6324
2024-04-29 02:11:56 [INFO] [task_scheduler.cc:131] [Task #4: fused_nn_contrib_conv2d_NCHWc_add_2] Trial #118: GFLOPs: 363.9036. Time: 35.5737 us. Best GFLOPs: 408.6324
2024-04-29 02:11:56 [INFO] [task_scheduler.cc:131] [Task #4: fused_nn_contrib_conv2d_NCHWc_add_2] Trial #119: GFLOPs: 319.9552. Time: 40.4601 us. Best GFLOPs: 408.6324
2024-04-29 02:11:56 [INFO] [task_scheduler.cc:131] [Task #4: fused_nn_contrib_conv2d_NCHWc_add_2] Trial #120: GFLOPs: 95.8475. Time: 135.0625 us. Best GFLOPs: 408.6324
2024-04-29 02:11:56 [INFO] [task_scheduler.cc:131] [Task #4: fused_nn_contrib_conv2d_NCHWc_add_2] Trial #121: GFLOPs: 327.9514. Time: 39.4736 us. Best GFLOPs: 408.6324
2024-04-29 02:11:56 [INFO] [task_scheduler.cc:131] [Task #4: fused_nn_contrib_conv2d_NCHWc_add_2] Trial #122: GFLOPs: 147.9532. Time: 87.4966 us. Best GFLOPs: 408.6324
2024-04-29 02:11:56 [INFO] [task_scheduler.cc:131] [Task #4: fused_nn_contrib_conv2d_NCHWc_add_2] Trial #123: GFLOPs: 185.1167. Time: 69.9311 us. Best GFLOPs: 408.6324
2024-04-29 02:11:56 [INFO] [task_scheduler.cc:131] [Task #4: fused_nn_contrib_conv2d_NCHWc_add_2] Trial #124: GFLOPs: 112.0588. Time: 115.5233 us. Best GFLOPs: 408.6324
2024-04-29 02:11:56 [INFO] [task_scheduler.cc:131] [Task #4: fused_nn_contrib_conv2d_NCHWc_add_2] Trial #125: GFLOPs: 39.9040. Time: 324.4138 us. Best GFLOPs: 408.6324
2024-04-29 02:11:56 [INFO] [task_scheduler.cc:131] [Task #4: fused_nn_contrib_conv2d_NCHWc_add_2] Trial #126: GFLOPs: 11.0711. Time: 1169.2962 us. Best GFLOPs: 408.6324
2024-04-29 02:11:56 [INFO] [task_scheduler.cc:131] [Task #4: fused_nn_contrib_conv2d_NCHWc_add_2] Trial #127: GFLOPs: 46.8834. Time: 276.1190 us. Best GFLOPs: 408.6324
2024-04-29 02:11:56 [INFO] [task_scheduler.cc:131] [Task #4: fused_nn_contrib_conv2d_NCHWc_add_2] Trial #128: GFLOPs: 15.6091. Time: 829.3510 us. Best GFLOPs: 408.6324
