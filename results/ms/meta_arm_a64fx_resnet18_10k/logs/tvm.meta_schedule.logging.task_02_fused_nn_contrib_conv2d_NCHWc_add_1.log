2024-04-28 20:34:32 [INFO] [task_scheduler.cc:160] Initializing Task #2: "fused_nn_contrib_conv2d_NCHWc_add_1"
2024-04-28 20:34:32 [INFO] [task_scheduler.cc:35] 
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(2), T.int64(28), T.int64(28), T.int64(64)), "float32"), p1: T.Buffer((T.int64(16), T.int64(2), T.int64(1), T.int64(1), T.int64(64), T.int64(16)), "float32"), p2: T.Buffer((T.int64(1), T.int64(16), T.int64(1), T.int64(1), T.int64(16)), "float32"), T_add: T.Buffer((T.int64(1), T.int64(16), T.int64(14), T.int64(14), T.int64(16)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        conv2d_NCHWc = T.alloc_buffer((T.int64(1), T.int64(16), T.int64(14), T.int64(14), T.int64(16)))
        for n, oc_chunk, oh, ow, oc_block, ic, kh, kw in T.grid(T.int64(1), T.int64(16), T.int64(14), T.int64(14), T.int64(16), T.int64(128), T.int64(1), T.int64(1)):
            with T.block("conv2d_NCHWc"):
                v_n, v_oc_chunk, v_oh, v_ow, v_oc_block, v_ic, v_kh, v_kw = T.axis.remap("SSSSSRRR", [n, oc_chunk, oh, ow, oc_block, ic, kh, kw])
                T.reads(p0[v_n, v_ic // T.int64(64), v_oh * T.int64(2) + v_kh, v_ow * T.int64(2) + v_kw, v_ic % T.int64(64)], p1[v_oc_chunk, v_ic // T.int64(64), v_kh, v_kw, v_ic % T.int64(64), v_oc_block])
                T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                with T.init():
                    conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = T.float32(0)
                conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] + p0[v_n, v_ic // T.int64(64), v_oh * T.int64(2) + v_kh, v_ow * T.int64(2) + v_kw, v_ic % T.int64(64)] * p1[v_oc_chunk, v_ic // T.int64(64), v_kh, v_kw, v_ic % T.int64(64), v_oc_block]
        for ax0, ax1, ax2, ax3, ax4 in T.grid(T.int64(1), T.int64(16), T.int64(14), T.int64(14), T.int64(16)):
            with T.block("T_add"):
                v_ax0, v_ax1, v_ax2, v_ax3, v_ax4 = T.axis.remap("SSSSS", [ax0, ax1, ax2, ax3, ax4])
                T.reads(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4])
                T.writes(T_add[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                T_add[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] + p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4]
2024-04-28 20:34:32 [INFO] [task_scheduler.cc:164] Total 3 design space(s) generated
2024-04-28 20:34:32 [INFO] [task_scheduler.cc:170] Design space #0:
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(2), T.int64(28), T.int64(28), T.int64(64)), "float32"), p1: T.Buffer((T.int64(16), T.int64(2), T.int64(1), T.int64(1), T.int64(64), T.int64(16)), "float32"), p2: T.Buffer((T.int64(1), T.int64(16), T.int64(1), T.int64(1), T.int64(16)), "float32"), T_add: T.Buffer((T.int64(1), T.int64(16), T.int64(14), T.int64(14), T.int64(16)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        with T.block("root"):
            T.reads()
            T.writes()
            T.block_attr({"meta_schedule.parallel": 768, "meta_schedule.unroll_explicit": 512, "meta_schedule.vectorize": 64})
            conv2d_NCHWc = T.alloc_buffer((T.int64(1), T.int64(16), T.int64(14), T.int64(14), T.int64(16)))
            for n_0, oc_chunk_0, oh_0, ow_0, oc_block_0, n_1, oc_chunk_1, oh_1, ow_1, oc_block_1, ic_0, kh_0, kw_0, n_2, oc_chunk_2, oh_2, ow_2, oc_block_2, ic_1, kh_1, kw_1, n_3, oc_chunk_3, oh_3, ow_3, oc_block_3 in T.grid(T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(4), T.int64(1), T.int64(1), T.int64(14), T.int64(1), T.int64(4), T.int64(64), T.int64(1), T.int64(1), T.int64(1), T.int64(16), T.int64(1), T.int64(14), T.int64(1), T.int64(2), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1)):
                with T.block("conv2d_NCHWc"):
                    v_n = T.axis.spatial(T.int64(1), n_0 + n_1 + n_2 + n_3)
                    v_oc_chunk = T.axis.spatial(T.int64(16), oc_chunk_0 * T.int64(16) + oc_chunk_1 * T.int64(16) + oc_chunk_2 + oc_chunk_3)
                    v_oh = T.axis.spatial(T.int64(14), oh_0 * T.int64(14) + oh_1 + oh_2 + oh_3)
                    v_ow = T.axis.spatial(T.int64(14), ow_0 * T.int64(14) + ow_1 * T.int64(14) + ow_2 + ow_3)
                    v_oc_block = T.axis.spatial(T.int64(16), oc_block_0 * T.int64(4) + oc_block_1 + oc_block_2 + oc_block_3)
                    v_ic = T.axis.reduce(T.int64(128), ic_0 * T.int64(2) + ic_1)
                    v_kh = T.axis.reduce(T.int64(1), kh_0 + kh_1)
                    v_kw = T.axis.reduce(T.int64(1), kw_0 + kw_1)
                    T.reads(p0[v_n, v_ic // T.int64(64), v_oh * T.int64(2) + v_kh, v_ow * T.int64(2) + v_kw, v_ic % T.int64(64)], p1[v_oc_chunk, v_ic // T.int64(64), v_kh, v_kw, v_ic % T.int64(64), v_oc_block])
                    T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                    T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                    with T.init():
                        conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = T.float32(0)
                    conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] + p0[v_n, v_ic // T.int64(64), v_oh * T.int64(2) + v_kh, v_ow * T.int64(2) + v_kw, v_ic % T.int64(64)] * p1[v_oc_chunk, v_ic // T.int64(64), v_kh, v_kw, v_ic % T.int64(64), v_oc_block]
            for ax0, ax1, ax2, ax3, ax4 in T.grid(T.int64(1), T.int64(16), T.int64(14), T.int64(14), T.int64(16)):
                with T.block("T_add"):
                    v_ax0, v_ax1, v_ax2, v_ax3, v_ax4 = T.axis.remap("SSSSS", [ax0, ax1, ax2, ax3, ax4])
                    T.reads(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4])
                    T.writes(T_add[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                    T_add[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] + p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4]
b0 = sch.get_block(name="conv2d_NCHWc", func_name="main")
b1 = sch.get_block(name="root", func_name="main")
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.tiling_structure", ann_val="SSRSRS")
l2, l3, l4, l5, l6, l7, l8, l9 = sch.get_loops(block=b0)
v10, v11, v12, v13 = sch.sample_perfect_tile(loop=l2, n=4, max_innermost_factor=64, decision=[1, 1, 1, 1])
l14, l15, l16, l17 = sch.split(loop=l2, factors=[v10, v11, v12, v13], preserve_unit_iters=True)
v18, v19, v20, v21 = sch.sample_perfect_tile(loop=l3, n=4, max_innermost_factor=64, decision=[1, 1, 16, 1])
l22, l23, l24, l25 = sch.split(loop=l3, factors=[v18, v19, v20, v21], preserve_unit_iters=True)
v26, v27, v28, v29 = sch.sample_perfect_tile(loop=l4, n=4, max_innermost_factor=64, decision=[1, 14, 1, 1])
l30, l31, l32, l33 = sch.split(loop=l4, factors=[v26, v27, v28, v29], preserve_unit_iters=True)
v34, v35, v36, v37 = sch.sample_perfect_tile(loop=l5, n=4, max_innermost_factor=64, decision=[1, 1, 14, 1])
l38, l39, l40, l41 = sch.split(loop=l5, factors=[v34, v35, v36, v37], preserve_unit_iters=True)
v42, v43, v44, v45 = sch.sample_perfect_tile(loop=l6, n=4, max_innermost_factor=64, decision=[4, 4, 1, 1])
l46, l47, l48, l49 = sch.split(loop=l6, factors=[v42, v43, v44, v45], preserve_unit_iters=True)
v50, v51 = sch.sample_perfect_tile(loop=l7, n=2, max_innermost_factor=64, decision=[64, 2])
l52, l53 = sch.split(loop=l7, factors=[v50, v51], preserve_unit_iters=True)
v54, v55 = sch.sample_perfect_tile(loop=l8, n=2, max_innermost_factor=64, decision=[1, 1])
l56, l57 = sch.split(loop=l8, factors=[v54, v55], preserve_unit_iters=True)
v58, v59 = sch.sample_perfect_tile(loop=l9, n=2, max_innermost_factor=64, decision=[1, 1])
l60, l61 = sch.split(loop=l9, factors=[v58, v59], preserve_unit_iters=True)
sch.reorder(l14, l22, l30, l38, l46, l15, l23, l31, l39, l47, l52, l56, l60, l16, l24, l32, l40, l48, l53, l57, l61, l17, l25, l33, l41, l49)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.vectorize", ann_val=64)
v62 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.unroll_explicit", ann_val=v62)
2024-04-28 20:34:32 [INFO] [task_scheduler.cc:170] Design space #1:
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(2), T.int64(28), T.int64(28), T.int64(64)), "float32"), p1: T.Buffer((T.int64(16), T.int64(2), T.int64(1), T.int64(1), T.int64(64), T.int64(16)), "float32"), p2: T.Buffer((T.int64(1), T.int64(16), T.int64(1), T.int64(1), T.int64(16)), "float32"), T_add: T.Buffer((T.int64(1), T.int64(16), T.int64(14), T.int64(14), T.int64(16)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        with T.block("root"):
            T.reads()
            T.writes()
            T.block_attr({"meta_schedule.parallel": 768, "meta_schedule.unroll_explicit": 0, "meta_schedule.vectorize": 64})
            conv2d_NCHWc = T.alloc_buffer((T.int64(1), T.int64(16), T.int64(14), T.int64(14), T.int64(16)))
            for n_0, oc_chunk_0, oh_0, ow_0, oc_block_0, n_1, oc_chunk_1, oh_1, ow_1, oc_block_1 in T.grid(T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(4), T.int64(1), T.int64(1), T.int64(14), T.int64(1), T.int64(4)):
                for ic_0, kh_0, kw_0, n_2, oc_chunk_2, oh_2, ow_2, oc_block_2, ic_1, kh_1, kw_1, n_3, oc_chunk_3, oh_3, ow_3, oc_block_3 in T.grid(T.int64(64), T.int64(1), T.int64(1), T.int64(1), T.int64(16), T.int64(1), T.int64(14), T.int64(1), T.int64(2), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1)):
                    with T.block("conv2d_NCHWc"):
                        v_n = T.axis.spatial(T.int64(1), n_0 + n_1 + n_2 + n_3)
                        v_oc_chunk = T.axis.spatial(T.int64(16), oc_chunk_0 * T.int64(16) + oc_chunk_1 * T.int64(16) + oc_chunk_2 + oc_chunk_3)
                        v_oh = T.axis.spatial(T.int64(14), oh_0 * T.int64(14) + oh_1 + oh_2 + oh_3)
                        v_ow = T.axis.spatial(T.int64(14), ow_0 * T.int64(14) + ow_1 * T.int64(14) + ow_2 + ow_3)
                        v_oc_block = T.axis.spatial(T.int64(16), oc_block_0 * T.int64(4) + oc_block_1 + oc_block_2 + oc_block_3)
                        v_ic = T.axis.reduce(T.int64(128), ic_0 * T.int64(2) + ic_1)
                        v_kh = T.axis.reduce(T.int64(1), kh_0 + kh_1)
                        v_kw = T.axis.reduce(T.int64(1), kw_0 + kw_1)
                        T.reads(p0[v_n, v_ic // T.int64(64), v_oh * T.int64(2) + v_kh, v_ow * T.int64(2) + v_kw, v_ic % T.int64(64)], p1[v_oc_chunk, v_ic // T.int64(64), v_kh, v_kw, v_ic % T.int64(64), v_oc_block])
                        T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                        T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                        with T.init():
                            conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = T.float32(0)
                        conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] + p0[v_n, v_ic // T.int64(64), v_oh * T.int64(2) + v_kh, v_ow * T.int64(2) + v_kw, v_ic % T.int64(64)] * p1[v_oc_chunk, v_ic // T.int64(64), v_kh, v_kw, v_ic % T.int64(64), v_oc_block]
                for ax0, ax1, ax2, ax3, ax4 in T.grid(T.int64(1), T.int64(16), T.int64(1), T.int64(14), T.int64(1)):
                    with T.block("T_add"):
                        v_ax0, v_ax1 = T.axis.remap("SS", [ax0, ax1])
                        v_ax2 = T.axis.spatial(T.int64(14), oh_1 + ax2)
                        v_ax3 = T.axis.spatial(T.int64(14), ax3)
                        v_ax4 = T.axis.spatial(T.int64(16), oc_block_0 * T.int64(4) + oc_block_1 + ax4)
                        T.reads(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4])
                        T.writes(T_add[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                        T_add[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] + p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4]
b0 = sch.get_block(name="conv2d_NCHWc", func_name="main")
b1 = sch.get_block(name="root", func_name="main")
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.tiling_structure", ann_val="SSRSRS")
l2, l3, l4, l5, l6, l7, l8, l9 = sch.get_loops(block=b0)
v10, v11, v12, v13 = sch.sample_perfect_tile(loop=l2, n=4, max_innermost_factor=64, decision=[1, 1, 1, 1])
l14, l15, l16, l17 = sch.split(loop=l2, factors=[v10, v11, v12, v13], preserve_unit_iters=True)
v18, v19, v20, v21 = sch.sample_perfect_tile(loop=l3, n=4, max_innermost_factor=64, decision=[1, 1, 16, 1])
l22, l23, l24, l25 = sch.split(loop=l3, factors=[v18, v19, v20, v21], preserve_unit_iters=True)
v26, v27, v28, v29 = sch.sample_perfect_tile(loop=l4, n=4, max_innermost_factor=64, decision=[1, 14, 1, 1])
l30, l31, l32, l33 = sch.split(loop=l4, factors=[v26, v27, v28, v29], preserve_unit_iters=True)
v34, v35, v36, v37 = sch.sample_perfect_tile(loop=l5, n=4, max_innermost_factor=64, decision=[1, 1, 14, 1])
l38, l39, l40, l41 = sch.split(loop=l5, factors=[v34, v35, v36, v37], preserve_unit_iters=True)
v42, v43, v44, v45 = sch.sample_perfect_tile(loop=l6, n=4, max_innermost_factor=64, decision=[4, 4, 1, 1])
l46, l47, l48, l49 = sch.split(loop=l6, factors=[v42, v43, v44, v45], preserve_unit_iters=True)
v50, v51 = sch.sample_perfect_tile(loop=l7, n=2, max_innermost_factor=64, decision=[64, 2])
l52, l53 = sch.split(loop=l7, factors=[v50, v51], preserve_unit_iters=True)
v54, v55 = sch.sample_perfect_tile(loop=l8, n=2, max_innermost_factor=64, decision=[1, 1])
l56, l57 = sch.split(loop=l8, factors=[v54, v55], preserve_unit_iters=True)
v58, v59 = sch.sample_perfect_tile(loop=l9, n=2, max_innermost_factor=64, decision=[1, 1])
l60, l61 = sch.split(loop=l9, factors=[v58, v59], preserve_unit_iters=True)
sch.reorder(l14, l22, l30, l38, l46, l15, l23, l31, l39, l47, l52, l56, l60, l16, l24, l32, l40, l48, l53, l57, l61, l17, l25, l33, l41, l49)
b62, = sch.get_consumers(block=b0)
sch.reverse_compute_at(block=b62, loop=l47, preserve_unit_loops=True, index=-1)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.vectorize", ann_val=64)
v63 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=0)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.unroll_explicit", ann_val=v63)
2024-04-28 20:34:32 [INFO] [task_scheduler.cc:170] Design space #2:
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(2), T.int64(28), T.int64(28), T.int64(64)), "float32"), p1: T.Buffer((T.int64(16), T.int64(2), T.int64(1), T.int64(1), T.int64(64), T.int64(16)), "float32"), p2: T.Buffer((T.int64(1), T.int64(16), T.int64(1), T.int64(1), T.int64(16)), "float32"), T_add: T.Buffer((T.int64(1), T.int64(16), T.int64(14), T.int64(14), T.int64(16)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        with T.block("root"):
            T.reads()
            T.writes()
            T.block_attr({"meta_schedule.parallel": 768, "meta_schedule.unroll_explicit": 0, "meta_schedule.vectorize": 64})
            conv2d_NCHWc = T.alloc_buffer((T.int64(1), T.int64(16), T.int64(14), T.int64(14), T.int64(16)))
            for n_0, oc_chunk_0, oh_0, ow_0, oc_block_0 in T.grid(T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(4)):
                for n_1, oc_chunk_1, oh_1, ow_1, oc_block_1, ic_0, kh_0, kw_0, n_2, oc_chunk_2, oh_2, ow_2, oc_block_2, ic_1, kh_1, kw_1, n_3, oc_chunk_3, oh_3, ow_3, oc_block_3 in T.grid(T.int64(1), T.int64(1), T.int64(14), T.int64(1), T.int64(4), T.int64(64), T.int64(1), T.int64(1), T.int64(1), T.int64(16), T.int64(1), T.int64(14), T.int64(1), T.int64(2), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1)):
                    with T.block("conv2d_NCHWc"):
                        v_n = T.axis.spatial(T.int64(1), n_0 + n_1 + n_2 + n_3)
                        v_oc_chunk = T.axis.spatial(T.int64(16), oc_chunk_0 * T.int64(16) + oc_chunk_1 * T.int64(16) + oc_chunk_2 + oc_chunk_3)
                        v_oh = T.axis.spatial(T.int64(14), oh_0 * T.int64(14) + oh_1 + oh_2 + oh_3)
                        v_ow = T.axis.spatial(T.int64(14), ow_0 * T.int64(14) + ow_1 * T.int64(14) + ow_2 + ow_3)
                        v_oc_block = T.axis.spatial(T.int64(16), oc_block_0 * T.int64(4) + oc_block_1 + oc_block_2 + oc_block_3)
                        v_ic = T.axis.reduce(T.int64(128), ic_0 * T.int64(2) + ic_1)
                        v_kh = T.axis.reduce(T.int64(1), kh_0 + kh_1)
                        v_kw = T.axis.reduce(T.int64(1), kw_0 + kw_1)
                        T.reads(p0[v_n, v_ic // T.int64(64), v_oh * T.int64(2) + v_kh, v_ow * T.int64(2) + v_kw, v_ic % T.int64(64)], p1[v_oc_chunk, v_ic // T.int64(64), v_kh, v_kw, v_ic % T.int64(64), v_oc_block])
                        T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                        T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                        with T.init():
                            conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = T.float32(0)
                        conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] + p0[v_n, v_ic // T.int64(64), v_oh * T.int64(2) + v_kh, v_ow * T.int64(2) + v_kw, v_ic % T.int64(64)] * p1[v_oc_chunk, v_ic // T.int64(64), v_kh, v_kw, v_ic % T.int64(64), v_oc_block]
                for ax0, ax1, ax2, ax3, ax4 in T.grid(T.int64(1), T.int64(16), T.int64(14), T.int64(14), T.int64(4)):
                    with T.block("T_add"):
                        v_ax0, v_ax1, v_ax2, v_ax3 = T.axis.remap("SSSS", [ax0, ax1, ax2, ax3])
                        v_ax4 = T.axis.spatial(T.int64(16), oc_block_0 * T.int64(4) + ax4)
                        T.reads(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4])
                        T.writes(T_add[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                        T_add[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] + p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4]
b0 = sch.get_block(name="conv2d_NCHWc", func_name="main")
b1 = sch.get_block(name="root", func_name="main")
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.tiling_structure", ann_val="SSRSRS")
l2, l3, l4, l5, l6, l7, l8, l9 = sch.get_loops(block=b0)
v10, v11, v12, v13 = sch.sample_perfect_tile(loop=l2, n=4, max_innermost_factor=64, decision=[1, 1, 1, 1])
l14, l15, l16, l17 = sch.split(loop=l2, factors=[v10, v11, v12, v13], preserve_unit_iters=True)
v18, v19, v20, v21 = sch.sample_perfect_tile(loop=l3, n=4, max_innermost_factor=64, decision=[1, 1, 16, 1])
l22, l23, l24, l25 = sch.split(loop=l3, factors=[v18, v19, v20, v21], preserve_unit_iters=True)
v26, v27, v28, v29 = sch.sample_perfect_tile(loop=l4, n=4, max_innermost_factor=64, decision=[1, 14, 1, 1])
l30, l31, l32, l33 = sch.split(loop=l4, factors=[v26, v27, v28, v29], preserve_unit_iters=True)
v34, v35, v36, v37 = sch.sample_perfect_tile(loop=l5, n=4, max_innermost_factor=64, decision=[1, 1, 14, 1])
l38, l39, l40, l41 = sch.split(loop=l5, factors=[v34, v35, v36, v37], preserve_unit_iters=True)
v42, v43, v44, v45 = sch.sample_perfect_tile(loop=l6, n=4, max_innermost_factor=64, decision=[4, 4, 1, 1])
l46, l47, l48, l49 = sch.split(loop=l6, factors=[v42, v43, v44, v45], preserve_unit_iters=True)
v50, v51 = sch.sample_perfect_tile(loop=l7, n=2, max_innermost_factor=64, decision=[64, 2])
l52, l53 = sch.split(loop=l7, factors=[v50, v51], preserve_unit_iters=True)
v54, v55 = sch.sample_perfect_tile(loop=l8, n=2, max_innermost_factor=64, decision=[1, 1])
l56, l57 = sch.split(loop=l8, factors=[v54, v55], preserve_unit_iters=True)
v58, v59 = sch.sample_perfect_tile(loop=l9, n=2, max_innermost_factor=64, decision=[1, 1])
l60, l61 = sch.split(loop=l9, factors=[v58, v59], preserve_unit_iters=True)
sch.reorder(l14, l22, l30, l38, l46, l15, l23, l31, l39, l47, l52, l56, l60, l16, l24, l32, l40, l48, l53, l57, l61, l17, l25, l33, l41, l49)
b62, = sch.get_consumers(block=b0)
sch.reverse_compute_at(block=b62, loop=l46, preserve_unit_loops=True, index=-1)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.vectorize", ann_val=64)
v63 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=0)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.unroll_explicit", ann_val=v63)
2024-04-28 20:37:51 [INFO] [evolutionary_search.cc:713] Generating candidates......
2024-04-28 20:37:51 [INFO] [evolutionary_search.cc:715] Picked top 0 candidate(s) from database
2024-04-28 20:37:53 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x3635a38)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x3432148)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x3fb3e38)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x3fbf0d8)]: 0 failure(s)
2024-04-28 20:37:53 [INFO] [evolutionary_search.cc:723] Sampled 512 candidate(s)
2024-04-28 20:37:56 [INFO] [evolutionary_search.cc:621] Evolve iter #0 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x3635a38)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x3432148)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x3fb3e38)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x3fbf0d8)]: 0 failure(s)
2024-04-28 20:37:59 [INFO] [evolutionary_search.cc:621] Evolve iter #1 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x3635a38)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x3432148)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x3fb3e38)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x3fbf0d8)]: 0 failure(s)
2024-04-28 20:38:02 [INFO] [evolutionary_search.cc:621] Evolve iter #2 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x3635a38)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x3432148)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x3fb3e38)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x3fbf0d8)]: 0 failure(s)
2024-04-28 20:38:06 [INFO] [evolutionary_search.cc:621] Evolve iter #3 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x3635a38)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x3432148)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x3fb3e38)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x3fbf0d8)]: 0 failure(s)
2024-04-28 20:38:06 [INFO] [evolutionary_search.cc:649] Scores of the best 64 candidates:
[1 : 16]:	1.0000  0.9997  0.9994  0.9990  0.9988  0.9974  0.9967  0.9965  0.9963  0.9955  0.9955  0.9954  0.9954  0.9952  0.9950  0.9950
[17 : 32]:	0.9948  0.9948  0.9947  0.9941  0.9939  0.9938  0.9935  0.9930  0.9922  0.9918  0.9916  0.9910  0.9909  0.9903  0.9893  0.9885
[33 : 48]:	0.9880  0.9875  0.9866  0.9863  0.9859  0.9858  0.9844  0.9837  0.9829  0.9827  0.9822  0.9821  0.9821  0.9816  0.9807  0.9806
[49 : 64]:	0.9805  0.9804  0.9798  0.9793  0.9792  0.9791  0.9788  0.9785  0.9783  0.9781  0.9778  0.9777  0.9777  0.9773  0.9768  0.9764
2024-04-28 20:38:07 [INFO] [evolutionary_search.cc:727] Got 64 candidate(s) with evolutionary search
2024-04-28 20:38:07 [INFO] [evolutionary_search.cc:730] Sending 64 candidates(s) for measurement
2024-04-28 21:11:59 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_conv2d_NCHWc_add_1] Trial #1: GFLOPs: 33.9269. Time: 380.0884 us. Best GFLOPs: 33.9269
2024-04-28 21:11:59 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_conv2d_NCHWc_add_1] Trial #2: GFLOPs: 36.8157. Time: 350.2646 us. Best GFLOPs: 36.8157
2024-04-28 21:11:59 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_conv2d_NCHWc_add_1] Trial #3: GFLOPs: 20.9004. Time: 616.9835 us. Best GFLOPs: 36.8157
2024-04-28 21:11:59 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_conv2d_NCHWc_add_1] Trial #4: GFLOPs: 14.9446. Time: 862.8716 us. Best GFLOPs: 36.8157
2024-04-28 21:11:59 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_conv2d_NCHWc_add_1] Trial #5: GFLOPs: 131.8251. Time: 97.8208 us. Best GFLOPs: 131.8251
2024-04-28 21:11:59 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_conv2d_NCHWc_add_1] Trial #6: GFLOPs: 94.0687. Time: 137.0831 us. Best GFLOPs: 131.8251
2024-04-28 21:11:59 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_conv2d_NCHWc_add_1] Trial #7: GFLOPs: 6.6882. Time: 1928.0658 us. Best GFLOPs: 131.8251
2024-04-28 21:11:59 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_conv2d_NCHWc_add_1] Trial #8: GFLOPs: 91.9735. Time: 140.2060 us. Best GFLOPs: 131.8251
2024-04-28 21:11:59 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_conv2d_NCHWc_add_1] Trial #9: GFLOPs: 45.0508. Time: 286.2379 us. Best GFLOPs: 131.8251
2024-04-28 21:11:59 [INFO] [task_scheduler.cc:121] [Task #2: fused_nn_contrib_conv2d_NCHWc_add_1] Trial #10: Error in building:
LocalBuilder: Timeout, killed after 30.0 seconds
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(2), T.int64(28), T.int64(28), T.int64(64)), "float32"), p1: T.Buffer((T.int64(16), T.int64(2), T.int64(1), T.int64(1), T.int64(64), T.int64(16)), "float32"), p2: T.Buffer((T.int64(1), T.int64(16), T.int64(1), T.int64(1), T.int64(16)), "float32"), T_add: T.Buffer((T.int64(1), T.int64(16), T.int64(14), T.int64(14), T.int64(16)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        conv2d_NCHWc = T.alloc_buffer((T.int64(1), T.int64(16), T.int64(14), T.int64(14), T.int64(16)))
        for n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_fused in T.parallel(T.int64(1568), annotations={"pragma_auto_unroll_max_step": 512, "pragma_unroll_explicit": 1}):
            for oc_block_1 in range(T.int64(8)):
                for n_2_init, oc_chunk_2_init, oh_2_init, ow_2_init, oc_block_2_init, n_3_init, oc_chunk_3_init, oh_3_init, ow_3_init, oc_block_3_init in T.grid(T.int64(1), T.int64(2), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(1), T.int64(1), T.int64(1)):
                    with T.block("conv2d_NCHWc_init"):
                        v_n = T.axis.spatial(T.int64(1), n_2_init + n_3_init)
                        v_oc_chunk = T.axis.spatial(T.int64(16), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_fused // T.int64(784) * T.int64(8) + n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_fused % T.int64(196) // T.int64(98) * T.int64(4) + oc_chunk_2_init * T.int64(2) + oc_chunk_3_init)
                        v_oh = T.axis.spatial(T.int64(14), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_fused % T.int64(98) // T.int64(7) + oh_2_init + oh_3_init)
                        v_ow = T.axis.spatial(T.int64(14), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_fused % T.int64(784) // T.int64(392) * T.int64(7) + n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_fused % T.int64(7) + ow_2_init + ow_3_init)
                        v_oc_block = T.axis.spatial(T.int64(16), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_fused % T.int64(392) // T.int64(196) * T.int64(8) + oc_block_1 + oc_block_2_init + oc_block_3_init)
                        T.reads()
                        T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                        T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                        conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = T.float32(0)
                for ic_0, kh_0, kw_0, n_2, oc_chunk_2, oh_2, ow_2, oc_block_2, ic_1, kh_1, kw_1, n_3, oc_chunk_3, oh_3, ow_3, oc_block_3 in T.grid(T.int64(64), T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(1), T.int64(1), T.int64(1)):
                    with T.block("conv2d_NCHWc_update"):
                        v_n = T.axis.spatial(T.int64(1), n_2 + n_3)
                        v_oc_chunk = T.axis.spatial(T.int64(16), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_fused // T.int64(784) * T.int64(8) + n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_fused % T.int64(196) // T.int64(98) * T.int64(4) + oc_chunk_2 * T.int64(2) + oc_chunk_3)
                        v_oh = T.axis.spatial(T.int64(14), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_fused % T.int64(98) // T.int64(7) + oh_2 + oh_3)
                        v_ow = T.axis.spatial(T.int64(14), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_fused % T.int64(784) // T.int64(392) * T.int64(7) + n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_fused % T.int64(7) + ow_2 + ow_3)
                        v_oc_block = T.axis.spatial(T.int64(16), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_fused % T.int64(392) // T.int64(196) * T.int64(8) + oc_block_1 + oc_block_2 + oc_block_3)
                        v_ic = T.axis.reduce(T.int64(128), ic_0 * T.int64(2) + ic_1)
                        v_kh = T.axis.reduce(T.int64(1), kh_0 + kh_1)
                        v_kw = T.axis.reduce(T.int64(1), kw_0 + kw_1)
                        T.reads(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block], p0[v_n, v_ic // T.int64(64), v_oh * T.int64(2) + v_kh, v_ow * T.int64(2) + v_kw, v_ic % T.int64(64)], p1[v_oc_chunk, v_ic // T.int64(64), v_kh, v_kw, v_ic % T.int64(64), v_oc_block])
                        T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                        T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                        conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] + p0[v_n, v_ic // T.int64(64), v_oh * T.int64(2) + v_kh, v_ow * T.int64(2) + v_kw, v_ic % T.int64(64)] * p1[v_oc_chunk, v_ic // T.int64(64), v_kh, v_kw, v_ic % T.int64(64), v_oc_block]
        for ax0_ax1_ax2_ax3_ax4_fused_0 in T.parallel(T.int64(784)):
            for ax0_ax1_ax2_ax3_ax4_fused_1 in T.vectorized(T.int64(64)):
                with T.block("T_add"):
                    v_ax0 = T.axis.spatial(T.int64(1), T.int64(0))
                    v_ax1 = T.axis.spatial(T.int64(16), (ax0_ax1_ax2_ax3_ax4_fused_0 * T.int64(64) + ax0_ax1_ax2_ax3_ax4_fused_1) // T.int64(3136))
                    v_ax2 = T.axis.spatial(T.int64(14), (ax0_ax1_ax2_ax3_ax4_fused_0 * T.int64(64) + ax0_ax1_ax2_ax3_ax4_fused_1) % T.int64(3136) // T.int64(224))
                    v_ax3 = T.axis.spatial(T.int64(14), (ax0_ax1_ax2_ax3_ax4_fused_0 * T.int64(64) + ax0_ax1_ax2_ax3_ax4_fused_1) % T.int64(224) // T.int64(16))
                    v_ax4 = T.axis.spatial(T.int64(16), (ax0_ax1_ax2_ax3_ax4_fused_0 * T.int64(64) + ax0_ax1_ax2_ax3_ax4_fused_1) % T.int64(16))
                    T.reads(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4])
                    T.writes(T_add[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                    T_add[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] + p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4]
b0 = sch.get_block(name="conv2d_NCHWc", func_name="main")
b1 = sch.get_block(name="root", func_name="main")
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.tiling_structure", ann_val="SSRSRS")
l2, l3, l4, l5, l6, l7, l8, l9 = sch.get_loops(block=b0)
v10, v11, v12, v13 = sch.sample_perfect_tile(loop=l2, n=4, max_innermost_factor=64, decision=[1, 1, 1, 1])
l14, l15, l16, l17 = sch.split(loop=l2, factors=[v10, v11, v12, v13], preserve_unit_iters=True)
v18, v19, v20, v21 = sch.sample_perfect_tile(loop=l3, n=4, max_innermost_factor=64, decision=[2, 2, 2, 2])
l22, l23, l24, l25 = sch.split(loop=l3, factors=[v18, v19, v20, v21], preserve_unit_iters=True)
v26, v27, v28, v29 = sch.sample_perfect_tile(loop=l4, n=4, max_innermost_factor=64, decision=[1, 14, 1, 1])
l30, l31, l32, l33 = sch.split(loop=l4, factors=[v26, v27, v28, v29], preserve_unit_iters=True)
v34, v35, v36, v37 = sch.sample_perfect_tile(loop=l5, n=4, max_innermost_factor=64, decision=[2, 7, 1, 1])
l38, l39, l40, l41 = sch.split(loop=l5, factors=[v34, v35, v36, v37], preserve_unit_iters=True)
v42, v43, v44, v45 = sch.sample_perfect_tile(loop=l6, n=4, max_innermost_factor=64, decision=[2, 8, 1, 1])
l46, l47, l48, l49 = sch.split(loop=l6, factors=[v42, v43, v44, v45], preserve_unit_iters=True)
v50, v51 = sch.sample_perfect_tile(loop=l7, n=2, max_innermost_factor=64, decision=[64, 2])
l52, l53 = sch.split(loop=l7, factors=[v50, v51], preserve_unit_iters=True)
v54, v55 = sch.sample_perfect_tile(loop=l8, n=2, max_innermost_factor=64, decision=[1, 1])
l56, l57 = sch.split(loop=l8, factors=[v54, v55], preserve_unit_iters=True)
v58, v59 = sch.sample_perfect_tile(loop=l9, n=2, max_innermost_factor=64, decision=[1, 1])
l60, l61 = sch.split(loop=l9, factors=[v58, v59], preserve_unit_iters=True)
sch.reorder(l14, l22, l30, l38, l46, l15, l23, l31, l39, l47, l52, l56, l60, l16, l24, l32, l40, l48, l53, l57, l61, l17, l25, l33, l41, l49)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.vectorize", ann_val=64)
v62 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.unroll_explicit", ann_val=v62)
sch.enter_postproc()
b63 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b63, ann_key="meta_schedule.parallel")
sch.unannotate(block_or_loop=b63, ann_key="meta_schedule.vectorize")
sch.unannotate(block_or_loop=b63, ann_key="meta_schedule.unroll_explicit")
b64, b65 = sch.get_child_blocks(b63)
l66, l67, l68, l69, l70, l71, l72, l73, l74, l75, l76, l77, l78, l79, l80, l81, l82, l83, l84, l85, l86, l87, l88, l89, l90, l91 = sch.get_loops(block=b64)
l92 = sch.fuse(l66, l67, l68, l69, l70, l71, l72, l73, l74, preserve_unit_iters=True)
sch.parallel(loop=l92)
sch.annotate(block_or_loop=l92, ann_key="pragma_auto_unroll_max_step", ann_val=512)
sch.annotate(block_or_loop=l92, ann_key="pragma_unroll_explicit", ann_val=1)
l93, l94, l95, l96, l97 = sch.get_loops(block=b65)
l98 = sch.fuse(l93, l94, l95, l96, l97, preserve_unit_iters=True)
l99, l100 = sch.split(loop=l98, factors=[None, 64], preserve_unit_iters=True)
sch.parallel(loop=l99)
sch.vectorize(loop=l100)
b101 = sch.get_block(name="conv2d_NCHWc", func_name="main")
l102, l103, l104, l105, l106, l107, l108, l109, l110, l111, l112, l113, l114, l115, l116, l117, l118, l119 = sch.get_loops(block=b101)
b120 = sch.decompose_reduction(block=b101, loop=l104)
2024-04-28 21:11:59 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_conv2d_NCHWc_add_1] Trial #11: GFLOPs: 3.6720. Time: 3511.8162 us. Best GFLOPs: 131.8251
2024-04-28 21:11:59 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_conv2d_NCHWc_add_1] Trial #12: GFLOPs: 65.6767. Time: 196.3442 us. Best GFLOPs: 131.8251
2024-04-28 21:11:59 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_conv2d_NCHWc_add_1] Trial #13: GFLOPs: 1.8722. Time: 6887.8304 us. Best GFLOPs: 131.8251
2024-04-28 21:11:59 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_conv2d_NCHWc_add_1] Trial #14: GFLOPs: 103.0366. Time: 125.1519 us. Best GFLOPs: 131.8251
2024-04-28 21:11:59 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_conv2d_NCHWc_add_1] Trial #15: GFLOPs: 54.3632. Time: 237.2054 us. Best GFLOPs: 131.8251
2024-04-28 21:11:59 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_conv2d_NCHWc_add_1] Trial #16: GFLOPs: 77.8689. Time: 165.6019 us. Best GFLOPs: 131.8251
2024-04-28 21:11:59 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_conv2d_NCHWc_add_1] Trial #17: GFLOPs: 25.7467. Time: 500.8508 us. Best GFLOPs: 131.8251
2024-04-28 21:11:59 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_conv2d_NCHWc_add_1] Trial #18: GFLOPs: 186.6253. Time: 69.0969 us. Best GFLOPs: 186.6253
2024-04-28 21:11:59 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_conv2d_NCHWc_add_1] Trial #19: GFLOPs: 33.7911. Time: 381.6167 us. Best GFLOPs: 186.6253
2024-04-28 21:11:59 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_conv2d_NCHWc_add_1] Trial #20: GFLOPs: 14.3405. Time: 899.2152 us. Best GFLOPs: 186.6253
2024-04-28 21:11:59 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_conv2d_NCHWc_add_1] Trial #21: GFLOPs: 2.8808. Time: 4476.2482 us. Best GFLOPs: 186.6253
2024-04-28 21:11:59 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_conv2d_NCHWc_add_1] Trial #22: GFLOPs: 59.1085. Time: 218.1620 us. Best GFLOPs: 186.6253
2024-04-28 21:11:59 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_conv2d_NCHWc_add_1] Trial #23: GFLOPs: 7.0330. Time: 1833.5249 us. Best GFLOPs: 186.6253
2024-04-28 21:11:59 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_conv2d_NCHWc_add_1] Trial #24: GFLOPs: 4.3705. Time: 2950.4848 us. Best GFLOPs: 186.6253
2024-04-28 21:11:59 [INFO] [task_scheduler.cc:121] [Task #2: fused_nn_contrib_conv2d_NCHWc_add_1] Trial #25: Error in building:
LocalBuilder: Timeout, killed after 30.0 seconds
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(2), T.int64(28), T.int64(28), T.int64(64)), "float32"), p1: T.Buffer((T.int64(16), T.int64(2), T.int64(1), T.int64(1), T.int64(64), T.int64(16)), "float32"), p2: T.Buffer((T.int64(1), T.int64(16), T.int64(1), T.int64(1), T.int64(16)), "float32"), T_add: T.Buffer((T.int64(1), T.int64(16), T.int64(14), T.int64(14), T.int64(16)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        conv2d_NCHWc = T.alloc_buffer((T.int64(1), T.int64(16), T.int64(14), T.int64(14), T.int64(16)))
        for n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_fused in T.parallel(T.int64(56), annotations={"pragma_auto_unroll_max_step": 512, "pragma_unroll_explicit": 1}):
            for n_1, oc_chunk_1, oh_1, ow_1, oc_block_1 in T.grid(T.int64(1), T.int64(1), T.int64(14), T.int64(1), T.int64(2)):
                for n_2_init, oc_chunk_2_init, oh_2_init, ow_2_init, oc_block_2_init, n_3_init, oc_chunk_3_init, oh_3_init, ow_3_init in T.grid(T.int64(1), T.int64(2), T.int64(1), T.int64(1), T.int64(2), T.int64(1), T.int64(1), T.int64(1), T.int64(2)):
                    for oc_block_3_fused_init in T.vectorized(T.int64(4)):
                        with T.block("conv2d_NCHWc_init"):
                            v_n = T.axis.spatial(T.int64(1), n_1 + n_2_init + n_3_init)
                            v_oc_chunk = T.axis.spatial(T.int64(16), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_fused // T.int64(7) * T.int64(2) + oc_chunk_1 * T.int64(2) + oc_chunk_2_init + oc_chunk_3_init)
                            v_oh = T.axis.spatial(T.int64(14), oh_1 + oh_2_init + oh_3_init)
                            v_ow = T.axis.spatial(T.int64(14), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_fused % T.int64(7) * T.int64(2) + ow_1 * T.int64(2) + ow_2_init * T.int64(2) + ow_3_init)
                            v_oc_block = T.axis.spatial(T.int64(16), oc_block_1 * T.int64(8) + oc_block_2_init * T.int64(4) + oc_block_3_fused_init)
                            T.reads()
                            T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                            T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                            conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = T.float32(0)
                for ic_0, kh_0, kw_0, n_2, oc_chunk_2, oh_2, ow_2, oc_block_2, ic_1, kh_1, kw_1, n_3, oc_chunk_3, oh_3, ow_3 in T.grid(T.int64(2), T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(1), T.int64(1), T.int64(2), T.int64(64), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(2)):
                    for oc_block_3_fused in T.vectorized(T.int64(4)):
                        with T.block("conv2d_NCHWc_update"):
                            v_n = T.axis.spatial(T.int64(1), n_1 + n_2 + n_3)
                            v_oc_chunk = T.axis.spatial(T.int64(16), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_fused // T.int64(7) * T.int64(2) + oc_chunk_1 * T.int64(2) + oc_chunk_2 + oc_chunk_3)
                            v_oh = T.axis.spatial(T.int64(14), oh_1 + oh_2 + oh_3)
                            v_ow = T.axis.spatial(T.int64(14), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_fused % T.int64(7) * T.int64(2) + ow_1 * T.int64(2) + ow_2 * T.int64(2) + ow_3)
                            v_oc_block = T.axis.spatial(T.int64(16), oc_block_1 * T.int64(8) + oc_block_2 * T.int64(4) + oc_block_3_fused)
                            v_ic = T.axis.reduce(T.int64(128), ic_0 * T.int64(64) + ic_1)
                            v_kh = T.axis.reduce(T.int64(1), kh_0 + kh_1)
                            v_kw = T.axis.reduce(T.int64(1), kw_0 + kw_1)
                            T.reads(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block], p0[v_n, v_ic // T.int64(64), v_oh * T.int64(2) + v_kh, v_ow * T.int64(2) + v_kw, v_ic % T.int64(64)], p1[v_oc_chunk, v_ic // T.int64(64), v_kh, v_kw, v_ic % T.int64(64), v_oc_block])
                            T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                            T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                            conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] + p0[v_n, v_ic // T.int64(64), v_oh * T.int64(2) + v_kh, v_ow * T.int64(2) + v_kw, v_ic % T.int64(64)] * p1[v_oc_chunk, v_ic // T.int64(64), v_kh, v_kw, v_ic % T.int64(64), v_oc_block]
            for ax0, ax1, ax2 in T.grid(T.int64(1), T.int64(2), T.int64(14)):
                for ax3_ax4_fused in T.vectorized(T.int64(32)):
                    with T.block("T_add"):
                        v_ax0 = T.axis.spatial(T.int64(1), ax0)
                        v_ax1 = T.axis.spatial(T.int64(16), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_fused // T.int64(7) * T.int64(2) + ax1)
                        v_ax2 = T.axis.spatial(T.int64(14), ax2)
                        v_ax3 = T.axis.spatial(T.int64(14), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_fused % T.int64(7) * T.int64(2) + ax3_ax4_fused // T.int64(16))
                        v_ax4 = T.axis.spatial(T.int64(16), ax3_ax4_fused % T.int64(16))
                        T.reads(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4])
                        T.writes(T_add[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                        T_add[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] + p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4]
b0 = sch.get_block(name="conv2d_NCHWc", func_name="main")
b1 = sch.get_block(name="root", func_name="main")
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.tiling_structure", ann_val="SSRSRS")
l2, l3, l4, l5, l6, l7, l8, l9 = sch.get_loops(block=b0)
v10, v11, v12, v13 = sch.sample_perfect_tile(loop=l2, n=4, max_innermost_factor=64, decision=[1, 1, 1, 1])
l14, l15, l16, l17 = sch.split(loop=l2, factors=[v10, v11, v12, v13], preserve_unit_iters=True)
v18, v19, v20, v21 = sch.sample_perfect_tile(loop=l3, n=4, max_innermost_factor=64, decision=[8, 1, 2, 1])
l22, l23, l24, l25 = sch.split(loop=l3, factors=[v18, v19, v20, v21], preserve_unit_iters=True)
v26, v27, v28, v29 = sch.sample_perfect_tile(loop=l4, n=4, max_innermost_factor=64, decision=[1, 14, 1, 1])
l30, l31, l32, l33 = sch.split(loop=l4, factors=[v26, v27, v28, v29], preserve_unit_iters=True)
v34, v35, v36, v37 = sch.sample_perfect_tile(loop=l5, n=4, max_innermost_factor=64, decision=[7, 1, 1, 2])
l38, l39, l40, l41 = sch.split(loop=l5, factors=[v34, v35, v36, v37], preserve_unit_iters=True)
v42, v43, v44, v45 = sch.sample_perfect_tile(loop=l6, n=4, max_innermost_factor=64, decision=[1, 2, 2, 4])
l46, l47, l48, l49 = sch.split(loop=l6, factors=[v42, v43, v44, v45], preserve_unit_iters=True)
v50, v51 = sch.sample_perfect_tile(loop=l7, n=2, max_innermost_factor=64, decision=[2, 64])
l52, l53 = sch.split(loop=l7, factors=[v50, v51], preserve_unit_iters=True)
v54, v55 = sch.sample_perfect_tile(loop=l8, n=2, max_innermost_factor=64, decision=[1, 1])
l56, l57 = sch.split(loop=l8, factors=[v54, v55], preserve_unit_iters=True)
v58, v59 = sch.sample_perfect_tile(loop=l9, n=2, max_innermost_factor=64, decision=[1, 1])
l60, l61 = sch.split(loop=l9, factors=[v58, v59], preserve_unit_iters=True)
sch.reorder(l14, l22, l30, l38, l46, l15, l23, l31, l39, l47, l52, l56, l60, l16, l24, l32, l40, l48, l53, l57, l61, l17, l25, l33, l41, l49)
b62, = sch.get_consumers(block=b0)
sch.reverse_compute_at(block=b62, loop=l46, preserve_unit_loops=True, index=-1)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.vectorize", ann_val=64)
v63 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.unroll_explicit", ann_val=v63)
sch.enter_postproc()
b64 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b64, ann_key="meta_schedule.parallel")
sch.unannotate(block_or_loop=b64, ann_key="meta_schedule.vectorize")
sch.unannotate(block_or_loop=b64, ann_key="meta_schedule.unroll_explicit")
b65, b66 = sch.get_child_blocks(b64)
l67, l68, l69, l70, l71, l72, l73, l74, l75, l76, l77, l78, l79, l80, l81, l82, l83, l84, l85, l86, l87, l88, l89, l90, l91, l92 = sch.get_loops(block=b65)
l93 = sch.fuse(l67, l68, l69, l70, l71, preserve_unit_iters=True)
sch.parallel(loop=l93)
l94 = sch.fuse(l92, preserve_unit_iters=True)
sch.vectorize(loop=l94)
sch.annotate(block_or_loop=l93, ann_key="pragma_auto_unroll_max_step", ann_val=512)
sch.annotate(block_or_loop=l93, ann_key="pragma_unroll_explicit", ann_val=1)
l95, l96, l97, l98, l99, l100 = sch.get_loops(block=b66)
l101 = sch.fuse(l99, l100, preserve_unit_iters=True)
sch.vectorize(loop=l101)
b102 = sch.get_block(name="conv2d_NCHWc", func_name="main")
l103, l104, l105, l106, l107, l108, l109, l110, l111, l112, l113, l114, l115, l116, l117, l118, l119, l120, l121, l122, l123, l124 = sch.get_loops(block=b102)
b125 = sch.decompose_reduction(block=b102, loop=l109)
2024-04-28 21:11:59 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_conv2d_NCHWc_add_1] Trial #26: GFLOPs: 35.3722. Time: 364.5580 us. Best GFLOPs: 186.6253
2024-04-28 21:11:59 [INFO] [task_scheduler.cc:121] [Task #2: fused_nn_contrib_conv2d_NCHWc_add_1] Trial #27: Error in building:
LocalBuilder: Timeout, killed after 30.0 seconds
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(2), T.int64(28), T.int64(28), T.int64(64)), "float32"), p1: T.Buffer((T.int64(16), T.int64(2), T.int64(1), T.int64(1), T.int64(64), T.int64(16)), "float32"), p2: T.Buffer((T.int64(1), T.int64(16), T.int64(1), T.int64(1), T.int64(16)), "float32"), T_add: T.Buffer((T.int64(1), T.int64(16), T.int64(14), T.int64(14), T.int64(16)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        conv2d_NCHWc = T.alloc_buffer((T.int64(1), T.int64(16), T.int64(14), T.int64(14), T.int64(16)))
        for n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_fused in T.parallel(T.int64(8), annotations={"pragma_auto_unroll_max_step": 512, "pragma_unroll_explicit": 1}):
            for n_1, oc_chunk_1, oh_1, ow_1, oc_block_1 in T.grid(T.int64(1), T.int64(1), T.int64(14), T.int64(1), T.int64(1)):
                for n_2_init, oc_chunk_2_init, oh_2_init, ow_2_init, oc_block_2_init, n_3_init, oc_chunk_3_init, oh_3_init, ow_3_init, oc_block_3_init in T.grid(T.int64(1), T.int64(4), T.int64(1), T.int64(1), T.int64(4), T.int64(1), T.int64(4), T.int64(1), T.int64(7), T.int64(1)):
                    with T.block("conv2d_NCHWc_init"):
                        v_n = T.axis.spatial(T.int64(1), n_1 + n_2_init + n_3_init)
                        v_oc_chunk = T.axis.spatial(T.int64(16), oc_chunk_1 * T.int64(16) + oc_chunk_2_init * T.int64(4) + oc_chunk_3_init)
                        v_oh = T.axis.spatial(T.int64(14), oh_1 + oh_2_init + oh_3_init)
                        v_ow = T.axis.spatial(T.int64(14), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_fused // T.int64(4) * T.int64(7) + ow_1 * T.int64(7) + ow_2_init * T.int64(7) + ow_3_init)
                        v_oc_block = T.axis.spatial(T.int64(16), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_fused % T.int64(4) * T.int64(4) + oc_block_1 * T.int64(4) + oc_block_2_init + oc_block_3_init)
                        T.reads()
                        T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                        T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                        conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = T.float32(0)
                for ic_0, kh_0, kw_0, n_2, oc_chunk_2, oh_2, ow_2, oc_block_2, ic_1, kh_1, kw_1, n_3, oc_chunk_3, oh_3, ow_3, oc_block_3 in T.grid(T.int64(128), T.int64(1), T.int64(1), T.int64(1), T.int64(4), T.int64(1), T.int64(1), T.int64(4), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(4), T.int64(1), T.int64(7), T.int64(1)):
                    with T.block("conv2d_NCHWc_update"):
                        v_n = T.axis.spatial(T.int64(1), n_1 + n_2 + n_3)
                        v_oc_chunk = T.axis.spatial(T.int64(16), oc_chunk_1 * T.int64(16) + oc_chunk_2 * T.int64(4) + oc_chunk_3)
                        v_oh = T.axis.spatial(T.int64(14), oh_1 + oh_2 + oh_3)
                        v_ow = T.axis.spatial(T.int64(14), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_fused // T.int64(4) * T.int64(7) + ow_1 * T.int64(7) + ow_2 * T.int64(7) + ow_3)
                        v_oc_block = T.axis.spatial(T.int64(16), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_fused % T.int64(4) * T.int64(4) + oc_block_1 * T.int64(4) + oc_block_2 + oc_block_3)
                        v_ic = T.axis.reduce(T.int64(128), ic_0 + ic_1)
                        v_kh = T.axis.reduce(T.int64(1), kh_0 + kh_1)
                        v_kw = T.axis.reduce(T.int64(1), kw_0 + kw_1)
                        T.reads(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block], p0[v_n, v_ic // T.int64(64), v_oh * T.int64(2) + v_kh, v_ow * T.int64(2) + v_kw, v_ic % T.int64(64)], p1[v_oc_chunk, v_ic // T.int64(64), v_kh, v_kw, v_ic % T.int64(64), v_oc_block])
                        T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                        T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                        conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] + p0[v_n, v_ic // T.int64(64), v_oh * T.int64(2) + v_kh, v_ow * T.int64(2) + v_kw, v_ic % T.int64(64)] * p1[v_oc_chunk, v_ic // T.int64(64), v_kh, v_kw, v_ic % T.int64(64), v_oc_block]
            for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(16), T.int64(14), T.int64(7)):
                for ax4_fused in T.vectorized(T.int64(4)):
                    with T.block("T_add"):
                        v_ax0, v_ax1, v_ax2 = T.axis.remap("SSS", [ax0, ax1, ax2])
                        v_ax3 = T.axis.spatial(T.int64(14), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_fused // T.int64(4) * T.int64(7) + ax3)
                        v_ax4 = T.axis.spatial(T.int64(16), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_fused % T.int64(4) * T.int64(4) + ax4_fused)
                        T.reads(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4])
                        T.writes(T_add[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                        T_add[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] + p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4]
b0 = sch.get_block(name="conv2d_NCHWc", func_name="main")
b1 = sch.get_block(name="root", func_name="main")
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.tiling_structure", ann_val="SSRSRS")
l2, l3, l4, l5, l6, l7, l8, l9 = sch.get_loops(block=b0)
v10, v11, v12, v13 = sch.sample_perfect_tile(loop=l2, n=4, max_innermost_factor=64, decision=[1, 1, 1, 1])
l14, l15, l16, l17 = sch.split(loop=l2, factors=[v10, v11, v12, v13], preserve_unit_iters=True)
v18, v19, v20, v21 = sch.sample_perfect_tile(loop=l3, n=4, max_innermost_factor=64, decision=[1, 1, 4, 4])
l22, l23, l24, l25 = sch.split(loop=l3, factors=[v18, v19, v20, v21], preserve_unit_iters=True)
v26, v27, v28, v29 = sch.sample_perfect_tile(loop=l4, n=4, max_innermost_factor=64, decision=[1, 14, 1, 1])
l30, l31, l32, l33 = sch.split(loop=l4, factors=[v26, v27, v28, v29], preserve_unit_iters=True)
v34, v35, v36, v37 = sch.sample_perfect_tile(loop=l5, n=4, max_innermost_factor=64, decision=[2, 1, 1, 7])
l38, l39, l40, l41 = sch.split(loop=l5, factors=[v34, v35, v36, v37], preserve_unit_iters=True)
v42, v43, v44, v45 = sch.sample_perfect_tile(loop=l6, n=4, max_innermost_factor=64, decision=[4, 1, 4, 1])
l46, l47, l48, l49 = sch.split(loop=l6, factors=[v42, v43, v44, v45], preserve_unit_iters=True)
v50, v51 = sch.sample_perfect_tile(loop=l7, n=2, max_innermost_factor=64, decision=[128, 1])
l52, l53 = sch.split(loop=l7, factors=[v50, v51], preserve_unit_iters=True)
v54, v55 = sch.sample_perfect_tile(loop=l8, n=2, max_innermost_factor=64, decision=[1, 1])
l56, l57 = sch.split(loop=l8, factors=[v54, v55], preserve_unit_iters=True)
v58, v59 = sch.sample_perfect_tile(loop=l9, n=2, max_innermost_factor=64, decision=[1, 1])
l60, l61 = sch.split(loop=l9, factors=[v58, v59], preserve_unit_iters=True)
sch.reorder(l14, l22, l30, l38, l46, l15, l23, l31, l39, l47, l52, l56, l60, l16, l24, l32, l40, l48, l53, l57, l61, l17, l25, l33, l41, l49)
b62, = sch.get_consumers(block=b0)
sch.reverse_compute_at(block=b62, loop=l46, preserve_unit_loops=True, index=-1)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.parallel", ann_val=8)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.vectorize", ann_val=64)
v63 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.unroll_explicit", ann_val=v63)
sch.enter_postproc()
b64 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b64, ann_key="meta_schedule.parallel")
sch.unannotate(block_or_loop=b64, ann_key="meta_schedule.vectorize")
sch.unannotate(block_or_loop=b64, ann_key="meta_schedule.unroll_explicit")
b65, b66 = sch.get_child_blocks(b64)
l67, l68, l69, l70, l71, l72, l73, l74, l75, l76, l77, l78, l79, l80, l81, l82, l83, l84, l85, l86, l87, l88, l89, l90, l91, l92 = sch.get_loops(block=b65)
l93 = sch.fuse(l67, l68, l69, l70, l71, preserve_unit_iters=True)
sch.parallel(loop=l93)
sch.annotate(block_or_loop=l93, ann_key="pragma_auto_unroll_max_step", ann_val=512)
sch.annotate(block_or_loop=l93, ann_key="pragma_unroll_explicit", ann_val=1)
l94, l95, l96, l97, l98, l99 = sch.get_loops(block=b66)
l100 = sch.fuse(l99, preserve_unit_iters=True)
sch.vectorize(loop=l100)
b101 = sch.get_block(name="conv2d_NCHWc", func_name="main")
l102, l103, l104, l105, l106, l107, l108, l109, l110, l111, l112, l113, l114, l115, l116, l117, l118, l119, l120, l121, l122, l123 = sch.get_loops(block=b101)
b124 = sch.decompose_reduction(block=b101, loop=l108)
2024-04-28 21:11:59 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_conv2d_NCHWc_add_1] Trial #28: GFLOPs: 66.7657. Time: 193.1416 us. Best GFLOPs: 186.6253
2024-04-28 21:11:59 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_conv2d_NCHWc_add_1] Trial #29: GFLOPs: 66.2485. Time: 194.6495 us. Best GFLOPs: 186.6253
2024-04-28 21:11:59 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_conv2d_NCHWc_add_1] Trial #30: GFLOPs: 16.9984. Time: 758.6142 us. Best GFLOPs: 186.6253
2024-04-28 21:11:59 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_conv2d_NCHWc_add_1] Trial #31: GFLOPs: 74.3190. Time: 173.5120 us. Best GFLOPs: 186.6253
2024-04-28 21:11:59 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_conv2d_NCHWc_add_1] Trial #32: GFLOPs: 68.4105. Time: 188.4978 us. Best GFLOPs: 186.6253
2024-04-28 21:11:59 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_conv2d_NCHWc_add_1] Trial #33: GFLOPs: 20.0070. Time: 644.5356 us. Best GFLOPs: 186.6253
2024-04-28 21:11:59 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_conv2d_NCHWc_add_1] Trial #34: GFLOPs: 4.9311. Time: 2615.0914 us. Best GFLOPs: 186.6253
2024-04-28 21:11:59 [INFO] [task_scheduler.cc:121] [Task #2: fused_nn_contrib_conv2d_NCHWc_add_1] Trial #35: Error in building:
LocalBuilder: Timeout, killed after 30.0 seconds
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(2), T.int64(28), T.int64(28), T.int64(64)), "float32"), p1: T.Buffer((T.int64(16), T.int64(2), T.int64(1), T.int64(1), T.int64(64), T.int64(16)), "float32"), p2: T.Buffer((T.int64(1), T.int64(16), T.int64(1), T.int64(1), T.int64(16)), "float32"), T_add: T.Buffer((T.int64(1), T.int64(16), T.int64(14), T.int64(14), T.int64(16)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        conv2d_NCHWc = T.alloc_buffer((T.int64(1), T.int64(16), T.int64(14), T.int64(14), T.int64(16)))
        for n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_fused in T.parallel(T.int64(784), annotations={"pragma_auto_unroll_max_step": 512, "pragma_unroll_explicit": 1}):
            for n_1, oc_chunk_1, oh_1, ow_1, oc_block_1 in T.grid(T.int64(1), T.int64(2), T.int64(1), T.int64(1), T.int64(8)):
                for n_2_init, oc_chunk_2_init, oh_2_init, ow_2_init, oc_block_2_init, n_3_init, oc_chunk_3_init, oh_3_init, ow_3_init, oc_block_3_init in T.grid(T.int64(1), T.int64(1), T.int64(2), T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(1), T.int64(1), T.int64(1)):
                    with T.block("conv2d_NCHWc_init"):
                        v_n = T.axis.spatial(T.int64(1), n_1 + n_2_init + n_3_init)
                        v_oc_chunk = T.axis.spatial(T.int64(16), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_fused // T.int64(196) * T.int64(4) + oc_chunk_1 * T.int64(2) + oc_chunk_2_init * T.int64(2) + oc_chunk_3_init)
                        v_oh = T.axis.spatial(T.int64(14), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_fused % T.int64(196) // T.int64(28) * T.int64(2) + oh_1 * T.int64(2) + oh_2_init + oh_3_init)
                        v_ow = T.axis.spatial(T.int64(14), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_fused % T.int64(28) // T.int64(2) + ow_1 + ow_2_init + ow_3_init)
                        v_oc_block = T.axis.spatial(T.int64(16), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_fused % T.int64(2) * T.int64(8) + oc_block_1 + oc_block_2_init + oc_block_3_init)
                        T.reads()
                        T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                        T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                        conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = T.float32(0)
                for ic_0, kh_0, kw_0, n_2, oc_chunk_2, oh_2, ow_2, oc_block_2, ic_1, kh_1, kw_1, n_3, oc_chunk_3, oh_3, ow_3, oc_block_3 in T.grid(T.int64(4), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(1), T.int64(1), T.int64(32), T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(1), T.int64(1), T.int64(1)):
                    with T.block("conv2d_NCHWc_update"):
                        v_n = T.axis.spatial(T.int64(1), n_1 + n_2 + n_3)
                        v_oc_chunk = T.axis.spatial(T.int64(16), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_fused // T.int64(196) * T.int64(4) + oc_chunk_1 * T.int64(2) + oc_chunk_2 * T.int64(2) + oc_chunk_3)
                        v_oh = T.axis.spatial(T.int64(14), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_fused % T.int64(196) // T.int64(28) * T.int64(2) + oh_1 * T.int64(2) + oh_2 + oh_3)
                        v_ow = T.axis.spatial(T.int64(14), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_fused % T.int64(28) // T.int64(2) + ow_1 + ow_2 + ow_3)
                        v_oc_block = T.axis.spatial(T.int64(16), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_fused % T.int64(2) * T.int64(8) + oc_block_1 + oc_block_2 + oc_block_3)
                        v_ic = T.axis.reduce(T.int64(128), ic_0 * T.int64(32) + ic_1)
                        v_kh = T.axis.reduce(T.int64(1), kh_0 + kh_1)
                        v_kw = T.axis.reduce(T.int64(1), kw_0 + kw_1)
                        T.reads(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block], p0[v_n, v_ic // T.int64(64), v_oh * T.int64(2) + v_kh, v_ow * T.int64(2) + v_kw, v_ic % T.int64(64)], p1[v_oc_chunk, v_ic // T.int64(64), v_kh, v_kw, v_ic % T.int64(64), v_oc_block])
                        T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                        T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                        conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] + p0[v_n, v_ic // T.int64(64), v_oh * T.int64(2) + v_kh, v_ow * T.int64(2) + v_kw, v_ic % T.int64(64)] * p1[v_oc_chunk, v_ic // T.int64(64), v_kh, v_kw, v_ic % T.int64(64), v_oc_block]
            for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(4), T.int64(2), T.int64(1)):
                for ax4_fused in T.vectorized(T.int64(8)):
                    with T.block("T_add"):
                        v_ax0 = T.axis.spatial(T.int64(1), ax0)
                        v_ax1 = T.axis.spatial(T.int64(16), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_fused // T.int64(196) * T.int64(4) + ax1)
                        v_ax2 = T.axis.spatial(T.int64(14), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_fused % T.int64(196) // T.int64(28) * T.int64(2) + ax2)
                        v_ax3 = T.axis.spatial(T.int64(14), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_fused % T.int64(28) // T.int64(2) + ax3)
                        v_ax4 = T.axis.spatial(T.int64(16), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_fused % T.int64(2) * T.int64(8) + ax4_fused)
                        T.reads(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4])
                        T.writes(T_add[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                        T_add[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] + p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4]
b0 = sch.get_block(name="conv2d_NCHWc", func_name="main")
b1 = sch.get_block(name="root", func_name="main")
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.tiling_structure", ann_val="SSRSRS")
l2, l3, l4, l5, l6, l7, l8, l9 = sch.get_loops(block=b0)
v10, v11, v12, v13 = sch.sample_perfect_tile(loop=l2, n=4, max_innermost_factor=64, decision=[1, 1, 1, 1])
l14, l15, l16, l17 = sch.split(loop=l2, factors=[v10, v11, v12, v13], preserve_unit_iters=True)
v18, v19, v20, v21 = sch.sample_perfect_tile(loop=l3, n=4, max_innermost_factor=64, decision=[4, 2, 1, 2])
l22, l23, l24, l25 = sch.split(loop=l3, factors=[v18, v19, v20, v21], preserve_unit_iters=True)
v26, v27, v28, v29 = sch.sample_perfect_tile(loop=l4, n=4, max_innermost_factor=64, decision=[7, 1, 2, 1])
l30, l31, l32, l33 = sch.split(loop=l4, factors=[v26, v27, v28, v29], preserve_unit_iters=True)
v34, v35, v36, v37 = sch.sample_perfect_tile(loop=l5, n=4, max_innermost_factor=64, decision=[14, 1, 1, 1])
l38, l39, l40, l41 = sch.split(loop=l5, factors=[v34, v35, v36, v37], preserve_unit_iters=True)
v42, v43, v44, v45 = sch.sample_perfect_tile(loop=l6, n=4, max_innermost_factor=64, decision=[2, 8, 1, 1])
l46, l47, l48, l49 = sch.split(loop=l6, factors=[v42, v43, v44, v45], preserve_unit_iters=True)
v50, v51 = sch.sample_perfect_tile(loop=l7, n=2, max_innermost_factor=64, decision=[4, 32])
l52, l53 = sch.split(loop=l7, factors=[v50, v51], preserve_unit_iters=True)
v54, v55 = sch.sample_perfect_tile(loop=l8, n=2, max_innermost_factor=64, decision=[1, 1])
l56, l57 = sch.split(loop=l8, factors=[v54, v55], preserve_unit_iters=True)
v58, v59 = sch.sample_perfect_tile(loop=l9, n=2, max_innermost_factor=64, decision=[1, 1])
l60, l61 = sch.split(loop=l9, factors=[v58, v59], preserve_unit_iters=True)
sch.reorder(l14, l22, l30, l38, l46, l15, l23, l31, l39, l47, l52, l56, l60, l16, l24, l32, l40, l48, l53, l57, l61, l17, l25, l33, l41, l49)
b62, = sch.get_consumers(block=b0)
sch.reverse_compute_at(block=b62, loop=l46, preserve_unit_loops=True, index=-1)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.vectorize", ann_val=64)
v63 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.unroll_explicit", ann_val=v63)
sch.enter_postproc()
b64 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b64, ann_key="meta_schedule.parallel")
sch.unannotate(block_or_loop=b64, ann_key="meta_schedule.vectorize")
sch.unannotate(block_or_loop=b64, ann_key="meta_schedule.unroll_explicit")
b65, b66 = sch.get_child_blocks(b64)
l67, l68, l69, l70, l71, l72, l73, l74, l75, l76, l77, l78, l79, l80, l81, l82, l83, l84, l85, l86, l87, l88, l89, l90, l91, l92 = sch.get_loops(block=b65)
l93 = sch.fuse(l67, l68, l69, l70, l71, preserve_unit_iters=True)
sch.parallel(loop=l93)
sch.annotate(block_or_loop=l93, ann_key="pragma_auto_unroll_max_step", ann_val=512)
sch.annotate(block_or_loop=l93, ann_key="pragma_unroll_explicit", ann_val=1)
l94, l95, l96, l97, l98, l99 = sch.get_loops(block=b66)
l100 = sch.fuse(l99, preserve_unit_iters=True)
sch.vectorize(loop=l100)
b101 = sch.get_block(name="conv2d_NCHWc", func_name="main")
l102, l103, l104, l105, l106, l107, l108, l109, l110, l111, l112, l113, l114, l115, l116, l117, l118, l119, l120, l121, l122, l123 = sch.get_loops(block=b101)
b124 = sch.decompose_reduction(block=b101, loop=l108)
2024-04-28 21:11:59 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_conv2d_NCHWc_add_1] Trial #36: GFLOPs: 28.3471. Time: 454.9054 us. Best GFLOPs: 186.6253
2024-04-28 21:11:59 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_conv2d_NCHWc_add_1] Trial #37: GFLOPs: 128.6535. Time: 100.2323 us. Best GFLOPs: 186.6253
2024-04-28 21:11:59 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_conv2d_NCHWc_add_1] Trial #38: GFLOPs: 42.5424. Time: 303.1150 us. Best GFLOPs: 186.6253
2024-04-28 21:11:59 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_conv2d_NCHWc_add_1] Trial #39: GFLOPs: 1.1201. Time: 11512.6946 us. Best GFLOPs: 186.6253
2024-04-28 21:11:59 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_conv2d_NCHWc_add_1] Trial #40: GFLOPs: 245.9350. Time: 52.4335 us. Best GFLOPs: 245.9350
2024-04-28 21:11:59 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_conv2d_NCHWc_add_1] Trial #41: GFLOPs: 6.1802. Time: 2086.5542 us. Best GFLOPs: 245.9350
2024-04-28 21:11:59 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_conv2d_NCHWc_add_1] Trial #42: GFLOPs: 69.6648. Time: 185.1040 us. Best GFLOPs: 245.9350
2024-04-28 21:11:59 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_conv2d_NCHWc_add_1] Trial #43: GFLOPs: 3.6089. Time: 3573.1962 us. Best GFLOPs: 245.9350
2024-04-28 21:11:59 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_conv2d_NCHWc_add_1] Trial #44: GFLOPs: 55.4592. Time: 232.5173 us. Best GFLOPs: 245.9350
2024-04-28 21:11:59 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_conv2d_NCHWc_add_1] Trial #45: GFLOPs: 78.6204. Time: 164.0190 us. Best GFLOPs: 245.9350
2024-04-28 21:11:59 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_conv2d_NCHWc_add_1] Trial #46: GFLOPs: 105.8229. Time: 121.8568 us. Best GFLOPs: 245.9350
2024-04-28 21:11:59 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_conv2d_NCHWc_add_1] Trial #47: GFLOPs: 137.4546. Time: 93.8145 us. Best GFLOPs: 245.9350
2024-04-28 21:11:59 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_conv2d_NCHWc_add_1] Trial #48: GFLOPs: 4.2519. Time: 3032.8239 us. Best GFLOPs: 245.9350
2024-04-28 21:11:59 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_conv2d_NCHWc_add_1] Trial #49: GFLOPs: 45.0171. Time: 286.4517 us. Best GFLOPs: 245.9350
2024-04-28 21:11:59 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_conv2d_NCHWc_add_1] Trial #50: GFLOPs: 81.0514. Time: 159.0994 us. Best GFLOPs: 245.9350
2024-04-28 21:11:59 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_conv2d_NCHWc_add_1] Trial #51: GFLOPs: 38.3319. Time: 336.4098 us. Best GFLOPs: 245.9350
2024-04-28 21:11:59 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_conv2d_NCHWc_add_1] Trial #52: GFLOPs: 151.4822. Time: 85.1270 us. Best GFLOPs: 245.9350
2024-04-28 21:11:59 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_conv2d_NCHWc_add_1] Trial #53: GFLOPs: 7.6699. Time: 1681.2741 us. Best GFLOPs: 245.9350
2024-04-28 21:11:59 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_conv2d_NCHWc_add_1] Trial #54: GFLOPs: 57.1223. Time: 225.7477 us. Best GFLOPs: 245.9350
2024-04-28 21:11:59 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_conv2d_NCHWc_add_1] Trial #55: GFLOPs: 35.7581. Time: 360.6240 us. Best GFLOPs: 245.9350
2024-04-28 21:11:59 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_conv2d_NCHWc_add_1] Trial #56: GFLOPs: 17.5665. Time: 734.0826 us. Best GFLOPs: 245.9350
2024-04-28 21:11:59 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_conv2d_NCHWc_add_1] Trial #57: GFLOPs: 15.9237. Time: 809.8163 us. Best GFLOPs: 245.9350
2024-04-28 21:11:59 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_conv2d_NCHWc_add_1] Trial #58: GFLOPs: 67.4282. Time: 191.2439 us. Best GFLOPs: 245.9350
2024-04-28 21:11:59 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_conv2d_NCHWc_add_1] Trial #59: GFLOPs: 27.2656. Time: 472.9485 us. Best GFLOPs: 245.9350
2024-04-28 21:11:59 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_conv2d_NCHWc_add_1] Trial #60: GFLOPs: 64.9279. Time: 198.6085 us. Best GFLOPs: 245.9350
2024-04-28 21:11:59 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_conv2d_NCHWc_add_1] Trial #61: GFLOPs: 39.1791. Time: 329.1356 us. Best GFLOPs: 245.9350
2024-04-28 21:11:59 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_conv2d_NCHWc_add_1] Trial #62: GFLOPs: 31.5631. Time: 408.5538 us. Best GFLOPs: 245.9350
2024-04-28 21:11:59 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_conv2d_NCHWc_add_1] Trial #63: GFLOPs: 52.6867. Time: 244.7529 us. Best GFLOPs: 245.9350
2024-04-28 21:11:59 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_conv2d_NCHWc_add_1] Trial #64: GFLOPs: 50.6148. Time: 254.7718 us. Best GFLOPs: 245.9350
2024-04-29 00:56:02 [INFO] [evolutionary_search.cc:713] Generating candidates......
2024-04-29 00:56:02 [INFO] [evolutionary_search.cc:715] Picked top 60 candidate(s) from database
2024-04-29 00:56:05 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x3635a38)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x3432148)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x3fb3e38)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x3fbf0d8)]: 0 failure(s)
2024-04-29 00:56:05 [INFO] [evolutionary_search.cc:723] Sampled 452 candidate(s)
2024-04-29 00:56:10 [INFO] [evolutionary_search.cc:621] Evolve iter #0 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x3635a38)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x3432148)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x3fb3e38)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x3fbf0d8)]: 0 failure(s)
2024-04-29 00:56:15 [INFO] [evolutionary_search.cc:621] Evolve iter #1 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x3635a38)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x3432148)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x3fb3e38)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x3fbf0d8)]: 0 failure(s)
2024-04-29 00:56:21 [INFO] [evolutionary_search.cc:621] Evolve iter #2 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x3635a38)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x3432148)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x3fb3e38)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x3fbf0d8)]: 0 failure(s)
2024-04-29 00:56:26 [INFO] [evolutionary_search.cc:621] Evolve iter #3 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x3635a38)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x3432148)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x3fb3e38)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x3fbf0d8)]: 0 failure(s)
2024-04-29 00:56:29 [INFO] [evolutionary_search.cc:649] Scores of the best 64 candidates:
[1 : 16]:	0.9690  0.8960  0.8960  0.8733  0.8028  0.7959  0.7858  0.7819  0.7801  0.7743  0.7553  0.7530  0.7482  0.7449  0.7449  0.7405
[17 : 32]:	0.7405  0.7332  0.7319  0.7270  0.7205  0.7123  0.7107  0.7093  0.7092  0.7089  0.7076  0.7036  0.7032  0.7006  0.6959  0.6952
[33 : 48]:	0.6947  0.6947  0.6935  0.6935  0.6915  0.6915  0.6840  0.6810  0.6791  0.6768  0.6763  0.6753  0.6751  0.6726  0.6704  0.6671
[49 : 64]:	0.6658  0.6629  0.6605  0.6589  0.6589  0.6539  0.6533  0.6533  0.6518  0.6484  0.6463  0.6440  0.6430  0.6428  0.6422  0.6416
2024-04-29 00:56:30 [INFO] [evolutionary_search.cc:727] Got 64 candidate(s) with evolutionary search
2024-04-29 00:56:30 [INFO] [evolutionary_search.cc:730] Sending 64 candidates(s) for measurement
2024-04-29 00:58:03 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_conv2d_NCHWc_add_1] Trial #65: GFLOPs: 181.5083. Time: 71.0449 us. Best GFLOPs: 245.9350
2024-04-29 00:58:03 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_conv2d_NCHWc_add_1] Trial #66: GFLOPs: 201.3702. Time: 64.0374 us. Best GFLOPs: 245.9350
2024-04-29 00:58:03 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_conv2d_NCHWc_add_1] Trial #67: GFLOPs: 183.7042. Time: 70.1956 us. Best GFLOPs: 245.9350
2024-04-29 00:58:03 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_conv2d_NCHWc_add_1] Trial #68: GFLOPs: 226.8671. Time: 56.8405 us. Best GFLOPs: 245.9350
2024-04-29 00:58:03 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_conv2d_NCHWc_add_1] Trial #69: GFLOPs: 150.9969. Time: 85.4006 us. Best GFLOPs: 245.9350
2024-04-29 00:58:03 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_conv2d_NCHWc_add_1] Trial #70: GFLOPs: 41.4748. Time: 310.9172 us. Best GFLOPs: 245.9350
2024-04-29 00:58:03 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_conv2d_NCHWc_add_1] Trial #71: GFLOPs: 120.2627. Time: 107.2255 us. Best GFLOPs: 245.9350
2024-04-29 00:58:03 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_conv2d_NCHWc_add_1] Trial #72: GFLOPs: 178.7997. Time: 72.1211 us. Best GFLOPs: 245.9350
2024-04-29 00:58:03 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_conv2d_NCHWc_add_1] Trial #73: GFLOPs: 139.7134. Time: 92.2977 us. Best GFLOPs: 245.9350
2024-04-29 00:58:03 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_conv2d_NCHWc_add_1] Trial #74: GFLOPs: 155.6191. Time: 82.8641 us. Best GFLOPs: 245.9350
2024-04-29 00:58:03 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_conv2d_NCHWc_add_1] Trial #75: GFLOPs: 58.9927. Time: 218.5904 us. Best GFLOPs: 245.9350
2024-04-29 00:58:03 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_conv2d_NCHWc_add_1] Trial #76: GFLOPs: 154.4384. Time: 83.4975 us. Best GFLOPs: 245.9350
2024-04-29 00:58:03 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_conv2d_NCHWc_add_1] Trial #77: GFLOPs: 72.7968. Time: 177.1401 us. Best GFLOPs: 245.9350
2024-04-29 00:58:03 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_conv2d_NCHWc_add_1] Trial #78: GFLOPs: 159.9621. Time: 80.6143 us. Best GFLOPs: 245.9350
2024-04-29 00:58:03 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_conv2d_NCHWc_add_1] Trial #79: GFLOPs: 162.3586. Time: 79.4244 us. Best GFLOPs: 245.9350
2024-04-29 00:58:03 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_conv2d_NCHWc_add_1] Trial #80: GFLOPs: 102.9175. Time: 125.2968 us. Best GFLOPs: 245.9350
2024-04-29 00:58:03 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_conv2d_NCHWc_add_1] Trial #81: GFLOPs: 106.0769. Time: 121.5649 us. Best GFLOPs: 245.9350
2024-04-29 00:58:03 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_conv2d_NCHWc_add_1] Trial #82: GFLOPs: 83.9943. Time: 153.5250 us. Best GFLOPs: 245.9350
2024-04-29 00:58:03 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_conv2d_NCHWc_add_1] Trial #83: GFLOPs: 120.0035. Time: 107.4572 us. Best GFLOPs: 245.9350
2024-04-29 00:58:03 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_conv2d_NCHWc_add_1] Trial #84: GFLOPs: 124.7147. Time: 103.3978 us. Best GFLOPs: 245.9350
2024-04-29 00:58:03 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_conv2d_NCHWc_add_1] Trial #85: GFLOPs: 276.7979. Time: 46.5872 us. Best GFLOPs: 276.7979
2024-04-29 00:58:03 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_conv2d_NCHWc_add_1] Trial #86: GFLOPs: 145.7554. Time: 88.4717 us. Best GFLOPs: 276.7979
2024-04-29 00:58:03 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_conv2d_NCHWc_add_1] Trial #87: GFLOPs: 30.5069. Time: 422.6992 us. Best GFLOPs: 276.7979
2024-04-29 00:58:03 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_conv2d_NCHWc_add_1] Trial #88: GFLOPs: 167.2963. Time: 77.0802 us. Best GFLOPs: 276.7979
2024-04-29 00:58:03 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_conv2d_NCHWc_add_1] Trial #89: GFLOPs: 118.8945. Time: 108.4595 us. Best GFLOPs: 276.7979
2024-04-29 00:58:03 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_conv2d_NCHWc_add_1] Trial #90: GFLOPs: 109.4239. Time: 117.8466 us. Best GFLOPs: 276.7979
2024-04-29 00:58:03 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_conv2d_NCHWc_add_1] Trial #91: GFLOPs: 24.2495. Time: 531.7741 us. Best GFLOPs: 276.7979
2024-04-29 00:58:03 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_conv2d_NCHWc_add_1] Trial #92: GFLOPs: 71.0118. Time: 181.5929 us. Best GFLOPs: 276.7979
2024-04-29 00:58:03 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_conv2d_NCHWc_add_1] Trial #93: GFLOPs: 146.5410. Time: 87.9974 us. Best GFLOPs: 276.7979
2024-04-29 00:58:03 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_conv2d_NCHWc_add_1] Trial #94: GFLOPs: 282.8111. Time: 45.5966 us. Best GFLOPs: 282.8111
2024-04-29 00:58:03 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_conv2d_NCHWc_add_1] Trial #95: GFLOPs: 104.2673. Time: 123.6748 us. Best GFLOPs: 282.8111
2024-04-29 00:58:03 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_conv2d_NCHWc_add_1] Trial #96: GFLOPs: 165.4013. Time: 77.9633 us. Best GFLOPs: 282.8111
2024-04-29 00:58:03 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_conv2d_NCHWc_add_1] Trial #97: GFLOPs: 150.7349. Time: 85.5491 us. Best GFLOPs: 282.8111
2024-04-29 00:58:03 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_conv2d_NCHWc_add_1] Trial #98: GFLOPs: 148.6637. Time: 86.7409 us. Best GFLOPs: 282.8111
2024-04-29 00:58:03 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_conv2d_NCHWc_add_1] Trial #99: GFLOPs: 223.3043. Time: 57.7474 us. Best GFLOPs: 282.8111
2024-04-29 00:58:03 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_conv2d_NCHWc_add_1] Trial #100: GFLOPs: 126.3191. Time: 102.0846 us. Best GFLOPs: 282.8111
2024-04-29 00:58:03 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_conv2d_NCHWc_add_1] Trial #101: GFLOPs: 113.8477. Time: 113.2674 us. Best GFLOPs: 282.8111
2024-04-29 00:58:03 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_conv2d_NCHWc_add_1] Trial #102: GFLOPs: 155.7821. Time: 82.7774 us. Best GFLOPs: 282.8111
2024-04-29 00:58:03 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_conv2d_NCHWc_add_1] Trial #103: GFLOPs: 277.3463. Time: 46.4951 us. Best GFLOPs: 282.8111
2024-04-29 00:58:03 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_conv2d_NCHWc_add_1] Trial #104: GFLOPs: 144.4454. Time: 89.2741 us. Best GFLOPs: 282.8111
2024-04-29 00:58:03 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_conv2d_NCHWc_add_1] Trial #105: GFLOPs: 77.1653. Time: 167.1117 us. Best GFLOPs: 282.8111
2024-04-29 00:58:03 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_conv2d_NCHWc_add_1] Trial #106: GFLOPs: 26.1533. Time: 493.0629 us. Best GFLOPs: 282.8111
2024-04-29 00:58:03 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_conv2d_NCHWc_add_1] Trial #107: GFLOPs: 82.7463. Time: 155.8405 us. Best GFLOPs: 282.8111
2024-04-29 00:58:03 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_conv2d_NCHWc_add_1] Trial #108: GFLOPs: 119.9622. Time: 107.4941 us. Best GFLOPs: 282.8111
2024-04-29 00:58:03 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_conv2d_NCHWc_add_1] Trial #109: GFLOPs: 134.3049. Time: 96.0146 us. Best GFLOPs: 282.8111
2024-04-29 00:58:03 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_conv2d_NCHWc_add_1] Trial #110: GFLOPs: 77.3718. Time: 166.6657 us. Best GFLOPs: 282.8111
2024-04-29 00:58:03 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_conv2d_NCHWc_add_1] Trial #111: GFLOPs: 79.0027. Time: 163.2253 us. Best GFLOPs: 282.8111
2024-04-29 00:58:03 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_conv2d_NCHWc_add_1] Trial #112: GFLOPs: 68.2862. Time: 188.8410 us. Best GFLOPs: 282.8111
2024-04-29 00:58:03 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_conv2d_NCHWc_add_1] Trial #113: GFLOPs: 125.1944. Time: 103.0017 us. Best GFLOPs: 282.8111
2024-04-29 00:58:03 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_conv2d_NCHWc_add_1] Trial #114: GFLOPs: 109.7957. Time: 117.4475 us. Best GFLOPs: 282.8111
2024-04-29 00:58:03 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_conv2d_NCHWc_add_1] Trial #115: GFLOPs: 164.9272. Time: 78.1874 us. Best GFLOPs: 282.8111
2024-04-29 00:58:03 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_conv2d_NCHWc_add_1] Trial #116: GFLOPs: 152.4446. Time: 84.5896 us. Best GFLOPs: 282.8111
2024-04-29 00:58:03 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_conv2d_NCHWc_add_1] Trial #117: GFLOPs: 162.7872. Time: 79.2153 us. Best GFLOPs: 282.8111
2024-04-29 00:58:03 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_conv2d_NCHWc_add_1] Trial #118: GFLOPs: 97.6194. Time: 132.0971 us. Best GFLOPs: 282.8111
2024-04-29 00:58:03 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_conv2d_NCHWc_add_1] Trial #119: GFLOPs: 99.2948. Time: 129.8682 us. Best GFLOPs: 282.8111
2024-04-29 00:58:03 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_conv2d_NCHWc_add_1] Trial #120: GFLOPs: 106.8302. Time: 120.7077 us. Best GFLOPs: 282.8111
2024-04-29 00:58:03 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_conv2d_NCHWc_add_1] Trial #121: GFLOPs: 205.7643. Time: 62.6699 us. Best GFLOPs: 282.8111
2024-04-29 00:58:03 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_conv2d_NCHWc_add_1] Trial #122: GFLOPs: 191.9374. Time: 67.1846 us. Best GFLOPs: 282.8111
2024-04-29 00:58:03 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_conv2d_NCHWc_add_1] Trial #123: GFLOPs: 110.9897. Time: 116.1840 us. Best GFLOPs: 282.8111
2024-04-29 00:58:03 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_conv2d_NCHWc_add_1] Trial #124: GFLOPs: 140.7931. Time: 91.5900 us. Best GFLOPs: 282.8111
2024-04-29 00:58:03 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_conv2d_NCHWc_add_1] Trial #125: GFLOPs: 140.1541. Time: 92.0075 us. Best GFLOPs: 282.8111
2024-04-29 00:58:03 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_conv2d_NCHWc_add_1] Trial #126: GFLOPs: 19.4339. Time: 663.5416 us. Best GFLOPs: 282.8111
2024-04-29 00:58:03 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_conv2d_NCHWc_add_1] Trial #127: GFLOPs: 28.5913. Time: 451.0193 us. Best GFLOPs: 282.8111
2024-04-29 00:58:03 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_conv2d_NCHWc_add_1] Trial #128: GFLOPs: 46.9133. Time: 274.8737 us. Best GFLOPs: 282.8111
