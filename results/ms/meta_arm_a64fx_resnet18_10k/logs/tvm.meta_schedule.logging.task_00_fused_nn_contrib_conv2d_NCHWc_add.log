2024-04-28 20:34:27 [INFO] [task_scheduler.cc:160] Initializing Task #0: "fused_nn_contrib_conv2d_NCHWc_add"
2024-04-28 20:34:27 [INFO] [task_scheduler.cc:35] 
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(2), T.int64(14), T.int64(14), T.int64(128)), "float32"), p1: T.Buffer((T.int64(16), T.int64(2), T.int64(1), T.int64(1), T.int64(128), T.int64(32)), "float32"), p2: T.Buffer((T.int64(1), T.int64(16), T.int64(1), T.int64(1), T.int64(32)), "float32"), T_add: T.Buffer((T.int64(1), T.int64(16), T.int64(7), T.int64(7), T.int64(32)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        conv2d_NCHWc = T.alloc_buffer((T.int64(1), T.int64(16), T.int64(7), T.int64(7), T.int64(32)))
        for n, oc_chunk, oh, ow, oc_block, ic, kh, kw in T.grid(T.int64(1), T.int64(16), T.int64(7), T.int64(7), T.int64(32), T.int64(256), T.int64(1), T.int64(1)):
            with T.block("conv2d_NCHWc"):
                v_n, v_oc_chunk, v_oh, v_ow, v_oc_block, v_ic, v_kh, v_kw = T.axis.remap("SSSSSRRR", [n, oc_chunk, oh, ow, oc_block, ic, kh, kw])
                T.reads(p0[v_n, v_ic // T.int64(128), v_oh * T.int64(2) + v_kh, v_ow * T.int64(2) + v_kw, v_ic % T.int64(128)], p1[v_oc_chunk, v_ic // T.int64(128), v_kh, v_kw, v_ic % T.int64(128), v_oc_block])
                T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                with T.init():
                    conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = T.float32(0)
                conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] + p0[v_n, v_ic // T.int64(128), v_oh * T.int64(2) + v_kh, v_ow * T.int64(2) + v_kw, v_ic % T.int64(128)] * p1[v_oc_chunk, v_ic // T.int64(128), v_kh, v_kw, v_ic % T.int64(128), v_oc_block]
        for ax0, ax1, ax2, ax3, ax4 in T.grid(T.int64(1), T.int64(16), T.int64(7), T.int64(7), T.int64(32)):
            with T.block("T_add"):
                v_ax0, v_ax1, v_ax2, v_ax3, v_ax4 = T.axis.remap("SSSSS", [ax0, ax1, ax2, ax3, ax4])
                T.reads(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4])
                T.writes(T_add[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                T_add[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] + p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4]
2024-04-28 20:34:27 [INFO] [task_scheduler.cc:164] Total 3 design space(s) generated
2024-04-28 20:34:27 [INFO] [task_scheduler.cc:170] Design space #0:
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(2), T.int64(14), T.int64(14), T.int64(128)), "float32"), p1: T.Buffer((T.int64(16), T.int64(2), T.int64(1), T.int64(1), T.int64(128), T.int64(32)), "float32"), p2: T.Buffer((T.int64(1), T.int64(16), T.int64(1), T.int64(1), T.int64(32)), "float32"), T_add: T.Buffer((T.int64(1), T.int64(16), T.int64(7), T.int64(7), T.int64(32)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        with T.block("root"):
            T.reads()
            T.writes()
            T.block_attr({"meta_schedule.parallel": 768, "meta_schedule.unroll_explicit": 0, "meta_schedule.vectorize": 64})
            conv2d_NCHWc = T.alloc_buffer((T.int64(1), T.int64(16), T.int64(7), T.int64(7), T.int64(32)))
            for n_0, oc_chunk_0, oh_0, ow_0, oc_block_0, n_1, oc_chunk_1, oh_1, ow_1, oc_block_1, ic_0, kh_0, kw_0, n_2, oc_chunk_2, oh_2, ow_2, oc_block_2, ic_1, kh_1, kw_1, n_3, oc_chunk_3, oh_3, ow_3, oc_block_3 in T.grid(T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(1), T.int64(2), T.int64(1), T.int64(7), T.int64(1), T.int64(128), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(7), T.int64(1), T.int64(4), T.int64(2), T.int64(1), T.int64(1), T.int64(1), T.int64(8), T.int64(1), T.int64(1), T.int64(4)):
                with T.block("conv2d_NCHWc"):
                    v_n = T.axis.spatial(T.int64(1), n_0 + n_1 + n_2 + n_3)
                    v_oc_chunk = T.axis.spatial(T.int64(16), oc_chunk_0 * T.int64(16) + oc_chunk_1 * T.int64(8) + oc_chunk_2 * T.int64(8) + oc_chunk_3)
                    v_oh = T.axis.spatial(T.int64(7), oh_0 * T.int64(7) + oh_1 * T.int64(7) + oh_2 + oh_3)
                    v_ow = T.axis.spatial(T.int64(7), ow_0 * T.int64(7) + ow_1 + ow_2 + ow_3)
                    v_oc_block = T.axis.spatial(T.int64(32), oc_block_0 * T.int64(16) + oc_block_1 * T.int64(16) + oc_block_2 * T.int64(4) + oc_block_3)
                    v_ic = T.axis.reduce(T.int64(256), ic_0 * T.int64(2) + ic_1)
                    v_kh = T.axis.reduce(T.int64(1), kh_0 + kh_1)
                    v_kw = T.axis.reduce(T.int64(1), kw_0 + kw_1)
                    T.reads(p0[v_n, v_ic // T.int64(128), v_oh * T.int64(2) + v_kh, v_ow * T.int64(2) + v_kw, v_ic % T.int64(128)], p1[v_oc_chunk, v_ic // T.int64(128), v_kh, v_kw, v_ic % T.int64(128), v_oc_block])
                    T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                    T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                    with T.init():
                        conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = T.float32(0)
                    conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] + p0[v_n, v_ic // T.int64(128), v_oh * T.int64(2) + v_kh, v_ow * T.int64(2) + v_kw, v_ic % T.int64(128)] * p1[v_oc_chunk, v_ic // T.int64(128), v_kh, v_kw, v_ic % T.int64(128), v_oc_block]
            for ax0, ax1, ax2, ax3, ax4 in T.grid(T.int64(1), T.int64(16), T.int64(7), T.int64(7), T.int64(32)):
                with T.block("T_add"):
                    v_ax0, v_ax1, v_ax2, v_ax3, v_ax4 = T.axis.remap("SSSSS", [ax0, ax1, ax2, ax3, ax4])
                    T.reads(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4])
                    T.writes(T_add[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                    T_add[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] + p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4]
b0 = sch.get_block(name="conv2d_NCHWc", func_name="main")
b1 = sch.get_block(name="root", func_name="main")
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.tiling_structure", ann_val="SSRSRS")
l2, l3, l4, l5, l6, l7, l8, l9 = sch.get_loops(block=b0)
v10, v11, v12, v13 = sch.sample_perfect_tile(loop=l2, n=4, max_innermost_factor=64, decision=[1, 1, 1, 1])
l14, l15, l16, l17 = sch.split(loop=l2, factors=[v10, v11, v12, v13], preserve_unit_iters=True)
v18, v19, v20, v21 = sch.sample_perfect_tile(loop=l3, n=4, max_innermost_factor=64, decision=[1, 2, 1, 8])
l22, l23, l24, l25 = sch.split(loop=l3, factors=[v18, v19, v20, v21], preserve_unit_iters=True)
v26, v27, v28, v29 = sch.sample_perfect_tile(loop=l4, n=4, max_innermost_factor=64, decision=[1, 1, 7, 1])
l30, l31, l32, l33 = sch.split(loop=l4, factors=[v26, v27, v28, v29], preserve_unit_iters=True)
v34, v35, v36, v37 = sch.sample_perfect_tile(loop=l5, n=4, max_innermost_factor=64, decision=[1, 7, 1, 1])
l38, l39, l40, l41 = sch.split(loop=l5, factors=[v34, v35, v36, v37], preserve_unit_iters=True)
v42, v43, v44, v45 = sch.sample_perfect_tile(loop=l6, n=4, max_innermost_factor=64, decision=[2, 1, 4, 4])
l46, l47, l48, l49 = sch.split(loop=l6, factors=[v42, v43, v44, v45], preserve_unit_iters=True)
v50, v51 = sch.sample_perfect_tile(loop=l7, n=2, max_innermost_factor=64, decision=[128, 2])
l52, l53 = sch.split(loop=l7, factors=[v50, v51], preserve_unit_iters=True)
v54, v55 = sch.sample_perfect_tile(loop=l8, n=2, max_innermost_factor=64, decision=[1, 1])
l56, l57 = sch.split(loop=l8, factors=[v54, v55], preserve_unit_iters=True)
v58, v59 = sch.sample_perfect_tile(loop=l9, n=2, max_innermost_factor=64, decision=[1, 1])
l60, l61 = sch.split(loop=l9, factors=[v58, v59], preserve_unit_iters=True)
sch.reorder(l14, l22, l30, l38, l46, l15, l23, l31, l39, l47, l52, l56, l60, l16, l24, l32, l40, l48, l53, l57, l61, l17, l25, l33, l41, l49)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.vectorize", ann_val=64)
v62 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=0)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.unroll_explicit", ann_val=v62)
2024-04-28 20:34:27 [INFO] [task_scheduler.cc:170] Design space #1:
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(2), T.int64(14), T.int64(14), T.int64(128)), "float32"), p1: T.Buffer((T.int64(16), T.int64(2), T.int64(1), T.int64(1), T.int64(128), T.int64(32)), "float32"), p2: T.Buffer((T.int64(1), T.int64(16), T.int64(1), T.int64(1), T.int64(32)), "float32"), T_add: T.Buffer((T.int64(1), T.int64(16), T.int64(7), T.int64(7), T.int64(32)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        with T.block("root"):
            T.reads()
            T.writes()
            T.block_attr({"meta_schedule.parallel": 768, "meta_schedule.unroll_explicit": 512, "meta_schedule.vectorize": 64})
            conv2d_NCHWc = T.alloc_buffer((T.int64(1), T.int64(16), T.int64(7), T.int64(7), T.int64(32)))
            for n_0, oc_chunk_0, oh_0, ow_0, oc_block_0, n_1, oc_chunk_1, oh_1, ow_1, oc_block_1 in T.grid(T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(1), T.int64(2), T.int64(1), T.int64(7), T.int64(1)):
                for ic_0, kh_0, kw_0, n_2, oc_chunk_2, oh_2, ow_2, oc_block_2, ic_1, kh_1, kw_1, n_3, oc_chunk_3, oh_3, ow_3, oc_block_3 in T.grid(T.int64(128), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(7), T.int64(1), T.int64(4), T.int64(2), T.int64(1), T.int64(1), T.int64(1), T.int64(8), T.int64(1), T.int64(1), T.int64(4)):
                    with T.block("conv2d_NCHWc"):
                        v_n = T.axis.spatial(T.int64(1), n_0 + n_1 + n_2 + n_3)
                        v_oc_chunk = T.axis.spatial(T.int64(16), oc_chunk_0 * T.int64(16) + oc_chunk_1 * T.int64(8) + oc_chunk_2 * T.int64(8) + oc_chunk_3)
                        v_oh = T.axis.spatial(T.int64(7), oh_0 * T.int64(7) + oh_1 * T.int64(7) + oh_2 + oh_3)
                        v_ow = T.axis.spatial(T.int64(7), ow_0 * T.int64(7) + ow_1 + ow_2 + ow_3)
                        v_oc_block = T.axis.spatial(T.int64(32), oc_block_0 * T.int64(16) + oc_block_1 * T.int64(16) + oc_block_2 * T.int64(4) + oc_block_3)
                        v_ic = T.axis.reduce(T.int64(256), ic_0 * T.int64(2) + ic_1)
                        v_kh = T.axis.reduce(T.int64(1), kh_0 + kh_1)
                        v_kw = T.axis.reduce(T.int64(1), kw_0 + kw_1)
                        T.reads(p0[v_n, v_ic // T.int64(128), v_oh * T.int64(2) + v_kh, v_ow * T.int64(2) + v_kw, v_ic % T.int64(128)], p1[v_oc_chunk, v_ic // T.int64(128), v_kh, v_kw, v_ic % T.int64(128), v_oc_block])
                        T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                        T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                        with T.init():
                            conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = T.float32(0)
                        conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] + p0[v_n, v_ic // T.int64(128), v_oh * T.int64(2) + v_kh, v_ow * T.int64(2) + v_kw, v_ic % T.int64(128)] * p1[v_oc_chunk, v_ic // T.int64(128), v_kh, v_kw, v_ic % T.int64(128), v_oc_block]
                for ax0, ax1, ax2, ax3, ax4 in T.grid(T.int64(1), T.int64(8), T.int64(7), T.int64(1), T.int64(16)):
                    with T.block("T_add"):
                        v_ax0 = T.axis.spatial(T.int64(1), ax0)
                        v_ax1 = T.axis.spatial(T.int64(16), oc_chunk_1 * T.int64(8) + ax1)
                        v_ax2 = T.axis.spatial(T.int64(7), ax2)
                        v_ax3 = T.axis.spatial(T.int64(7), ow_1 + ax3)
                        v_ax4 = T.axis.spatial(T.int64(32), oc_block_0 * T.int64(16) + ax4)
                        T.reads(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4])
                        T.writes(T_add[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                        T_add[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] + p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4]
b0 = sch.get_block(name="conv2d_NCHWc", func_name="main")
b1 = sch.get_block(name="root", func_name="main")
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.tiling_structure", ann_val="SSRSRS")
l2, l3, l4, l5, l6, l7, l8, l9 = sch.get_loops(block=b0)
v10, v11, v12, v13 = sch.sample_perfect_tile(loop=l2, n=4, max_innermost_factor=64, decision=[1, 1, 1, 1])
l14, l15, l16, l17 = sch.split(loop=l2, factors=[v10, v11, v12, v13], preserve_unit_iters=True)
v18, v19, v20, v21 = sch.sample_perfect_tile(loop=l3, n=4, max_innermost_factor=64, decision=[1, 2, 1, 8])
l22, l23, l24, l25 = sch.split(loop=l3, factors=[v18, v19, v20, v21], preserve_unit_iters=True)
v26, v27, v28, v29 = sch.sample_perfect_tile(loop=l4, n=4, max_innermost_factor=64, decision=[1, 1, 7, 1])
l30, l31, l32, l33 = sch.split(loop=l4, factors=[v26, v27, v28, v29], preserve_unit_iters=True)
v34, v35, v36, v37 = sch.sample_perfect_tile(loop=l5, n=4, max_innermost_factor=64, decision=[1, 7, 1, 1])
l38, l39, l40, l41 = sch.split(loop=l5, factors=[v34, v35, v36, v37], preserve_unit_iters=True)
v42, v43, v44, v45 = sch.sample_perfect_tile(loop=l6, n=4, max_innermost_factor=64, decision=[2, 1, 4, 4])
l46, l47, l48, l49 = sch.split(loop=l6, factors=[v42, v43, v44, v45], preserve_unit_iters=True)
v50, v51 = sch.sample_perfect_tile(loop=l7, n=2, max_innermost_factor=64, decision=[128, 2])
l52, l53 = sch.split(loop=l7, factors=[v50, v51], preserve_unit_iters=True)
v54, v55 = sch.sample_perfect_tile(loop=l8, n=2, max_innermost_factor=64, decision=[1, 1])
l56, l57 = sch.split(loop=l8, factors=[v54, v55], preserve_unit_iters=True)
v58, v59 = sch.sample_perfect_tile(loop=l9, n=2, max_innermost_factor=64, decision=[1, 1])
l60, l61 = sch.split(loop=l9, factors=[v58, v59], preserve_unit_iters=True)
sch.reorder(l14, l22, l30, l38, l46, l15, l23, l31, l39, l47, l52, l56, l60, l16, l24, l32, l40, l48, l53, l57, l61, l17, l25, l33, l41, l49)
b62, = sch.get_consumers(block=b0)
sch.reverse_compute_at(block=b62, loop=l47, preserve_unit_loops=True, index=-1)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.vectorize", ann_val=64)
v63 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.unroll_explicit", ann_val=v63)
2024-04-28 20:34:27 [INFO] [task_scheduler.cc:170] Design space #2:
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(2), T.int64(14), T.int64(14), T.int64(128)), "float32"), p1: T.Buffer((T.int64(16), T.int64(2), T.int64(1), T.int64(1), T.int64(128), T.int64(32)), "float32"), p2: T.Buffer((T.int64(1), T.int64(16), T.int64(1), T.int64(1), T.int64(32)), "float32"), T_add: T.Buffer((T.int64(1), T.int64(16), T.int64(7), T.int64(7), T.int64(32)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        with T.block("root"):
            T.reads()
            T.writes()
            T.block_attr({"meta_schedule.parallel": 768, "meta_schedule.unroll_explicit": 16, "meta_schedule.vectorize": 64})
            conv2d_NCHWc = T.alloc_buffer((T.int64(1), T.int64(16), T.int64(7), T.int64(7), T.int64(32)))
            for n_0, oc_chunk_0, oh_0, ow_0, oc_block_0 in T.grid(T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(2)):
                for n_1, oc_chunk_1, oh_1, ow_1, oc_block_1, ic_0, kh_0, kw_0, n_2, oc_chunk_2, oh_2, ow_2, oc_block_2, ic_1, kh_1, kw_1, n_3, oc_chunk_3, oh_3, ow_3, oc_block_3 in T.grid(T.int64(1), T.int64(2), T.int64(1), T.int64(7), T.int64(1), T.int64(128), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(7), T.int64(1), T.int64(4), T.int64(2), T.int64(1), T.int64(1), T.int64(1), T.int64(8), T.int64(1), T.int64(1), T.int64(4)):
                    with T.block("conv2d_NCHWc"):
                        v_n = T.axis.spatial(T.int64(1), n_0 + n_1 + n_2 + n_3)
                        v_oc_chunk = T.axis.spatial(T.int64(16), oc_chunk_0 * T.int64(16) + oc_chunk_1 * T.int64(8) + oc_chunk_2 * T.int64(8) + oc_chunk_3)
                        v_oh = T.axis.spatial(T.int64(7), oh_0 * T.int64(7) + oh_1 * T.int64(7) + oh_2 + oh_3)
                        v_ow = T.axis.spatial(T.int64(7), ow_0 * T.int64(7) + ow_1 + ow_2 + ow_3)
                        v_oc_block = T.axis.spatial(T.int64(32), oc_block_0 * T.int64(16) + oc_block_1 * T.int64(16) + oc_block_2 * T.int64(4) + oc_block_3)
                        v_ic = T.axis.reduce(T.int64(256), ic_0 * T.int64(2) + ic_1)
                        v_kh = T.axis.reduce(T.int64(1), kh_0 + kh_1)
                        v_kw = T.axis.reduce(T.int64(1), kw_0 + kw_1)
                        T.reads(p0[v_n, v_ic // T.int64(128), v_oh * T.int64(2) + v_kh, v_ow * T.int64(2) + v_kw, v_ic % T.int64(128)], p1[v_oc_chunk, v_ic // T.int64(128), v_kh, v_kw, v_ic % T.int64(128), v_oc_block])
                        T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                        T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                        with T.init():
                            conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = T.float32(0)
                        conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] + p0[v_n, v_ic // T.int64(128), v_oh * T.int64(2) + v_kh, v_ow * T.int64(2) + v_kw, v_ic % T.int64(128)] * p1[v_oc_chunk, v_ic // T.int64(128), v_kh, v_kw, v_ic % T.int64(128), v_oc_block]
                for ax0, ax1, ax2, ax3, ax4 in T.grid(T.int64(1), T.int64(16), T.int64(7), T.int64(7), T.int64(16)):
                    with T.block("T_add"):
                        v_ax0, v_ax1, v_ax2, v_ax3 = T.axis.remap("SSSS", [ax0, ax1, ax2, ax3])
                        v_ax4 = T.axis.spatial(T.int64(32), oc_block_0 * T.int64(16) + ax4)
                        T.reads(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4])
                        T.writes(T_add[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                        T_add[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] + p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4]
b0 = sch.get_block(name="conv2d_NCHWc", func_name="main")
b1 = sch.get_block(name="root", func_name="main")
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.tiling_structure", ann_val="SSRSRS")
l2, l3, l4, l5, l6, l7, l8, l9 = sch.get_loops(block=b0)
v10, v11, v12, v13 = sch.sample_perfect_tile(loop=l2, n=4, max_innermost_factor=64, decision=[1, 1, 1, 1])
l14, l15, l16, l17 = sch.split(loop=l2, factors=[v10, v11, v12, v13], preserve_unit_iters=True)
v18, v19, v20, v21 = sch.sample_perfect_tile(loop=l3, n=4, max_innermost_factor=64, decision=[1, 2, 1, 8])
l22, l23, l24, l25 = sch.split(loop=l3, factors=[v18, v19, v20, v21], preserve_unit_iters=True)
v26, v27, v28, v29 = sch.sample_perfect_tile(loop=l4, n=4, max_innermost_factor=64, decision=[1, 1, 7, 1])
l30, l31, l32, l33 = sch.split(loop=l4, factors=[v26, v27, v28, v29], preserve_unit_iters=True)
v34, v35, v36, v37 = sch.sample_perfect_tile(loop=l5, n=4, max_innermost_factor=64, decision=[1, 7, 1, 1])
l38, l39, l40, l41 = sch.split(loop=l5, factors=[v34, v35, v36, v37], preserve_unit_iters=True)
v42, v43, v44, v45 = sch.sample_perfect_tile(loop=l6, n=4, max_innermost_factor=64, decision=[2, 1, 4, 4])
l46, l47, l48, l49 = sch.split(loop=l6, factors=[v42, v43, v44, v45], preserve_unit_iters=True)
v50, v51 = sch.sample_perfect_tile(loop=l7, n=2, max_innermost_factor=64, decision=[128, 2])
l52, l53 = sch.split(loop=l7, factors=[v50, v51], preserve_unit_iters=True)
v54, v55 = sch.sample_perfect_tile(loop=l8, n=2, max_innermost_factor=64, decision=[1, 1])
l56, l57 = sch.split(loop=l8, factors=[v54, v55], preserve_unit_iters=True)
v58, v59 = sch.sample_perfect_tile(loop=l9, n=2, max_innermost_factor=64, decision=[1, 1])
l60, l61 = sch.split(loop=l9, factors=[v58, v59], preserve_unit_iters=True)
sch.reorder(l14, l22, l30, l38, l46, l15, l23, l31, l39, l47, l52, l56, l60, l16, l24, l32, l40, l48, l53, l57, l61, l17, l25, l33, l41, l49)
b62, = sch.get_consumers(block=b0)
sch.reverse_compute_at(block=b62, loop=l46, preserve_unit_loops=True, index=-1)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.vectorize", ann_val=64)
v63 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=1)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.unroll_explicit", ann_val=v63)
2024-04-28 20:36:12 [INFO] [evolutionary_search.cc:713] Generating candidates......
2024-04-28 20:36:12 [INFO] [evolutionary_search.cc:715] Picked top 0 candidate(s) from database
2024-04-28 20:36:15 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x3e8b3f8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x341ebf8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x383c318)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x3fc4738)]: 0 failure(s)
2024-04-28 20:36:15 [INFO] [evolutionary_search.cc:723] Sampled 512 candidate(s)
2024-04-28 20:36:17 [INFO] [evolutionary_search.cc:621] Evolve iter #0 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x3e8b3f8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x341ebf8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x383c318)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x3fc4738)]: 0 failure(s)
2024-04-28 20:36:20 [INFO] [evolutionary_search.cc:621] Evolve iter #1 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x3e8b3f8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x341ebf8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x383c318)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x3fc4738)]: 0 failure(s)
2024-04-28 20:36:23 [INFO] [evolutionary_search.cc:621] Evolve iter #2 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x3e8b3f8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x341ebf8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x383c318)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x3fc4738)]: 0 failure(s)
2024-04-28 20:36:26 [INFO] [evolutionary_search.cc:621] Evolve iter #3 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x3e8b3f8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x341ebf8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x383c318)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x3fc4738)]: 0 failure(s)
2024-04-28 20:36:27 [INFO] [evolutionary_search.cc:649] Scores of the best 64 candidates:
[1 : 16]:	0.9995  0.9991  0.9989  0.9988  0.9988  0.9983  0.9982  0.9968  0.9961  0.9959  0.9947  0.9940  0.9934  0.9923  0.9914  0.9912
[17 : 32]:	0.9911  0.9907  0.9907  0.9907  0.9905  0.9904  0.9897  0.9895  0.9894  0.9894  0.9892  0.9880  0.9871  0.9868  0.9868  0.9866
[33 : 48]:	0.9864  0.9849  0.9835  0.9833  0.9832  0.9829  0.9826  0.9825  0.9822  0.9817  0.9813  0.9809  0.9806  0.9795  0.9795  0.9792
[49 : 64]:	0.9786  0.9785  0.9775  0.9774  0.9773  0.9760  0.9758  0.9746  0.9745  0.9744  0.9721  0.9719  0.9712  0.9705  0.9705  0.9693
2024-04-28 20:36:28 [INFO] [evolutionary_search.cc:727] Got 64 candidate(s) with evolutionary search
2024-04-28 20:36:28 [INFO] [evolutionary_search.cc:730] Sending 64 candidates(s) for measurement
2024-04-28 21:11:56 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_NCHWc_add] Trial #1: GFLOPs: 29.8982. Time: 430.4651 us. Best GFLOPs: 29.8982
2024-04-28 21:11:56 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_NCHWc_add] Trial #2: GFLOPs: 46.1220. Time: 279.0459 us. Best GFLOPs: 46.1220
2024-04-28 21:11:56 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_NCHWc_add] Trial #3: GFLOPs: 68.6931. Time: 187.3572 us. Best GFLOPs: 68.6931
2024-04-28 21:11:56 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_NCHWc_add] Trial #4: GFLOPs: 41.1593. Time: 312.6911 us. Best GFLOPs: 68.6931
2024-04-28 21:11:56 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_NCHWc_add] Trial #5: GFLOPs: 27.4565. Time: 468.7461 us. Best GFLOPs: 68.6931
2024-04-28 21:11:56 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_NCHWc_add] Trial #6: GFLOPs: 1.2763. Time: 10083.6002 us. Best GFLOPs: 68.6931
2024-04-28 21:11:56 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_NCHWc_add] Trial #7: GFLOPs: 4.9662. Time: 2591.5297 us. Best GFLOPs: 68.6931
2024-04-28 21:11:56 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_NCHWc_add] Trial #8: GFLOPs: 27.1968. Time: 473.2228 us. Best GFLOPs: 68.6931
2024-04-28 21:11:56 [INFO] [task_scheduler.cc:121] [Task #0: fused_nn_contrib_conv2d_NCHWc_add] Trial #9: Error in building:
LocalBuilder: Timeout, killed after 30.0 seconds
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(2), T.int64(14), T.int64(14), T.int64(128)), "float32"), p1: T.Buffer((T.int64(16), T.int64(2), T.int64(1), T.int64(1), T.int64(128), T.int64(32)), "float32"), p2: T.Buffer((T.int64(1), T.int64(16), T.int64(1), T.int64(1), T.int64(32)), "float32"), T_add: T.Buffer((T.int64(1), T.int64(16), T.int64(7), T.int64(7), T.int64(32)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        conv2d_NCHWc = T.alloc_buffer((T.int64(1), T.int64(16), T.int64(7), T.int64(7), T.int64(32)))
        for n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused in T.parallel(T.int64(16), annotations={"pragma_auto_unroll_max_step": 512, "pragma_unroll_explicit": 1}):
            for n_2_init, oc_chunk_2_init, oh_2_init, ow_2_init, oc_block_2_init, n_3_init, oc_chunk_3_init, oh_3_init, ow_3_init in T.grid(T.int64(1), T.int64(1), T.int64(1), T.int64(7), T.int64(2), T.int64(1), T.int64(2), T.int64(7), T.int64(1)):
                for oc_block_3_fused_init in T.vectorized(T.int64(8)):
                    with T.block("conv2d_NCHWc_init"):
                        v_n = T.axis.spatial(T.int64(1), n_2_init + n_3_init)
                        v_oc_chunk = T.axis.spatial(T.int64(16), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused // T.int64(2) * T.int64(2) + oc_chunk_2_init * T.int64(2) + oc_chunk_3_init)
                        v_oh = T.axis.spatial(T.int64(7), oh_2_init * T.int64(7) + oh_3_init)
                        v_ow = T.axis.spatial(T.int64(7), ow_2_init + ow_3_init)
                        v_oc_block = T.axis.spatial(T.int64(32), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused % T.int64(2) * T.int64(16) + oc_block_2_init * T.int64(8) + oc_block_3_fused_init)
                        T.reads()
                        T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                        T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                        conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = T.float32(0)
            for ic_0, kh_0, kw_0, n_2, oc_chunk_2, oh_2, ow_2, oc_block_2, ic_1, kh_1, kw_1, n_3, oc_chunk_3, oh_3, ow_3 in T.grid(T.int64(8), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(7), T.int64(2), T.int64(32), T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(7), T.int64(1)):
                for oc_block_3_fused in T.vectorized(T.int64(8)):
                    with T.block("conv2d_NCHWc_update"):
                        v_n = T.axis.spatial(T.int64(1), n_2 + n_3)
                        v_oc_chunk = T.axis.spatial(T.int64(16), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused // T.int64(2) * T.int64(2) + oc_chunk_2 * T.int64(2) + oc_chunk_3)
                        v_oh = T.axis.spatial(T.int64(7), oh_2 * T.int64(7) + oh_3)
                        v_ow = T.axis.spatial(T.int64(7), ow_2 + ow_3)
                        v_oc_block = T.axis.spatial(T.int64(32), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused % T.int64(2) * T.int64(16) + oc_block_2 * T.int64(8) + oc_block_3_fused)
                        v_ic = T.axis.reduce(T.int64(256), ic_0 * T.int64(32) + ic_1)
                        v_kh = T.axis.reduce(T.int64(1), kh_0 + kh_1)
                        v_kw = T.axis.reduce(T.int64(1), kw_0 + kw_1)
                        T.reads(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block], p0[v_n, v_ic // T.int64(128), v_oh * T.int64(2) + v_kh, v_ow * T.int64(2) + v_kw, v_ic % T.int64(128)], p1[v_oc_chunk, v_ic // T.int64(128), v_kh, v_kw, v_ic % T.int64(128), v_oc_block])
                        T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                        T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                        conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] + p0[v_n, v_ic // T.int64(128), v_oh * T.int64(2) + v_kh, v_ow * T.int64(2) + v_kw, v_ic % T.int64(128)] * p1[v_oc_chunk, v_ic // T.int64(128), v_kh, v_kw, v_ic % T.int64(128), v_oc_block]
            for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(2), T.int64(7), T.int64(7)):
                for ax4_fused in T.vectorized(T.int64(16)):
                    with T.block("T_add"):
                        v_ax0 = T.axis.spatial(T.int64(1), ax0)
                        v_ax1 = T.axis.spatial(T.int64(16), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused // T.int64(2) * T.int64(2) + ax1)
                        v_ax2, v_ax3 = T.axis.remap("SS", [ax2, ax3])
                        v_ax4 = T.axis.spatial(T.int64(32), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused % T.int64(2) * T.int64(16) + ax4_fused)
                        T.reads(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4])
                        T.writes(T_add[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                        T_add[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] + p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4]
b0 = sch.get_block(name="conv2d_NCHWc", func_name="main")
b1 = sch.get_block(name="root", func_name="main")
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.tiling_structure", ann_val="SSRSRS")
l2, l3, l4, l5, l6, l7, l8, l9 = sch.get_loops(block=b0)
v10, v11, v12, v13 = sch.sample_perfect_tile(loop=l2, n=4, max_innermost_factor=64, decision=[1, 1, 1, 1])
l14, l15, l16, l17 = sch.split(loop=l2, factors=[v10, v11, v12, v13], preserve_unit_iters=True)
v18, v19, v20, v21 = sch.sample_perfect_tile(loop=l3, n=4, max_innermost_factor=64, decision=[8, 1, 1, 2])
l22, l23, l24, l25 = sch.split(loop=l3, factors=[v18, v19, v20, v21], preserve_unit_iters=True)
v26, v27, v28, v29 = sch.sample_perfect_tile(loop=l4, n=4, max_innermost_factor=64, decision=[1, 1, 1, 7])
l30, l31, l32, l33 = sch.split(loop=l4, factors=[v26, v27, v28, v29], preserve_unit_iters=True)
v34, v35, v36, v37 = sch.sample_perfect_tile(loop=l5, n=4, max_innermost_factor=64, decision=[1, 1, 7, 1])
l38, l39, l40, l41 = sch.split(loop=l5, factors=[v34, v35, v36, v37], preserve_unit_iters=True)
v42, v43, v44, v45 = sch.sample_perfect_tile(loop=l6, n=4, max_innermost_factor=64, decision=[2, 1, 2, 8])
l46, l47, l48, l49 = sch.split(loop=l6, factors=[v42, v43, v44, v45], preserve_unit_iters=True)
v50, v51 = sch.sample_perfect_tile(loop=l7, n=2, max_innermost_factor=64, decision=[8, 32])
l52, l53 = sch.split(loop=l7, factors=[v50, v51], preserve_unit_iters=True)
v54, v55 = sch.sample_perfect_tile(loop=l8, n=2, max_innermost_factor=64, decision=[1, 1])
l56, l57 = sch.split(loop=l8, factors=[v54, v55], preserve_unit_iters=True)
v58, v59 = sch.sample_perfect_tile(loop=l9, n=2, max_innermost_factor=64, decision=[1, 1])
l60, l61 = sch.split(loop=l9, factors=[v58, v59], preserve_unit_iters=True)
sch.reorder(l14, l22, l30, l38, l46, l15, l23, l31, l39, l47, l52, l56, l60, l16, l24, l32, l40, l48, l53, l57, l61, l17, l25, l33, l41, l49)
b62, = sch.get_consumers(block=b0)
sch.reverse_compute_at(block=b62, loop=l47, preserve_unit_loops=True, index=-1)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.vectorize", ann_val=64)
v63 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.unroll_explicit", ann_val=v63)
sch.enter_postproc()
b64 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b64, ann_key="meta_schedule.parallel")
sch.unannotate(block_or_loop=b64, ann_key="meta_schedule.vectorize")
sch.unannotate(block_or_loop=b64, ann_key="meta_schedule.unroll_explicit")
b65, b66 = sch.get_child_blocks(b64)
l67, l68, l69, l70, l71, l72, l73, l74, l75, l76, l77, l78, l79, l80, l81, l82, l83, l84, l85, l86, l87, l88, l89, l90, l91, l92 = sch.get_loops(block=b65)
l93 = sch.fuse(l67, l68, l69, l70, l71, l72, l73, l74, l75, l76, preserve_unit_iters=True)
sch.parallel(loop=l93)
l94 = sch.fuse(l92, preserve_unit_iters=True)
sch.vectorize(loop=l94)
sch.annotate(block_or_loop=l93, ann_key="pragma_auto_unroll_max_step", ann_val=512)
sch.annotate(block_or_loop=l93, ann_key="pragma_unroll_explicit", ann_val=1)
l95, l96, l97, l98, l99, l100 = sch.get_loops(block=b66)
l101 = sch.fuse(l100, preserve_unit_iters=True)
sch.vectorize(loop=l101)
b102 = sch.get_block(name="conv2d_NCHWc", func_name="main")
l103, l104, l105, l106, l107, l108, l109, l110, l111, l112, l113, l114, l115, l116, l117, l118, l119 = sch.get_loops(block=b102)
b120 = sch.decompose_reduction(block=b102, loop=l104)
2024-04-28 21:11:56 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_NCHWc_add] Trial #10: GFLOPs: 10.1180. Time: 1271.9992 us. Best GFLOPs: 68.6931
2024-04-28 21:11:56 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_NCHWc_add] Trial #11: GFLOPs: 70.0411. Time: 183.7513 us. Best GFLOPs: 70.0411
2024-04-28 21:11:56 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_NCHWc_add] Trial #12: GFLOPs: 85.4892. Time: 150.5470 us. Best GFLOPs: 85.4892
2024-04-28 21:11:56 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_NCHWc_add] Trial #13: GFLOPs: 0.9469. Time: 13592.3274 us. Best GFLOPs: 85.4892
2024-04-28 21:11:56 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_NCHWc_add] Trial #14: GFLOPs: 6.0237. Time: 2136.5765 us. Best GFLOPs: 85.4892
2024-04-28 21:11:56 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_NCHWc_add] Trial #15: GFLOPs: 79.7741. Time: 161.3323 us. Best GFLOPs: 85.4892
2024-04-28 21:11:56 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_NCHWc_add] Trial #16: GFLOPs: 41.9907. Time: 306.4997 us. Best GFLOPs: 85.4892
2024-04-28 21:11:56 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_NCHWc_add] Trial #17: GFLOPs: 60.9901. Time: 211.0202 us. Best GFLOPs: 85.4892
2024-04-28 21:11:56 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_NCHWc_add] Trial #18: GFLOPs: 73.5188. Time: 175.0592 us. Best GFLOPs: 85.4892
2024-04-28 21:11:56 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_NCHWc_add] Trial #19: GFLOPs: 25.1953. Time: 510.8160 us. Best GFLOPs: 85.4892
2024-04-28 21:11:56 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_NCHWc_add] Trial #20: GFLOPs: 45.1973. Time: 284.7549 us. Best GFLOPs: 85.4892
2024-04-28 21:11:56 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_NCHWc_add] Trial #21: GFLOPs: 55.3216. Time: 232.6422 us. Best GFLOPs: 85.4892
2024-04-28 21:11:56 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_NCHWc_add] Trial #22: GFLOPs: 89.2276. Time: 144.2395 us. Best GFLOPs: 89.2276
2024-04-28 21:11:56 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_NCHWc_add] Trial #23: GFLOPs: 132.3253. Time: 97.2614 us. Best GFLOPs: 132.3253
2024-04-28 21:11:56 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_NCHWc_add] Trial #24: GFLOPs: 17.7826. Time: 723.7509 us. Best GFLOPs: 132.3253
2024-04-28 21:11:56 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_NCHWc_add] Trial #25: GFLOPs: 20.7609. Time: 619.9228 us. Best GFLOPs: 132.3253
2024-04-28 21:11:56 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_NCHWc_add] Trial #26: GFLOPs: 37.1628. Time: 346.3178 us. Best GFLOPs: 132.3253
2024-04-28 21:11:56 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_NCHWc_add] Trial #27: GFLOPs: 47.5985. Time: 270.3895 us. Best GFLOPs: 132.3253
2024-04-28 21:11:56 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_NCHWc_add] Trial #28: GFLOPs: 27.9896. Time: 459.8191 us. Best GFLOPs: 132.3253
2024-04-28 21:11:56 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_NCHWc_add] Trial #29: GFLOPs: 46.2443. Time: 278.3080 us. Best GFLOPs: 132.3253
2024-04-28 21:11:56 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_NCHWc_add] Trial #30: GFLOPs: 130.1117. Time: 98.9161 us. Best GFLOPs: 132.3253
2024-04-28 21:11:56 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_NCHWc_add] Trial #31: GFLOPs: 43.6766. Time: 294.6693 us. Best GFLOPs: 132.3253
2024-04-28 21:11:56 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_NCHWc_add] Trial #32: GFLOPs: 132.7964. Time: 96.9164 us. Best GFLOPs: 132.7964
2024-04-28 21:11:56 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_NCHWc_add] Trial #33: GFLOPs: 4.6599. Time: 2761.8818 us. Best GFLOPs: 132.7964
2024-04-28 21:11:56 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_NCHWc_add] Trial #34: GFLOPs: 91.6073. Time: 140.4925 us. Best GFLOPs: 132.7964
2024-04-28 21:11:56 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_NCHWc_add] Trial #35: GFLOPs: 114.3855. Time: 112.5155 us. Best GFLOPs: 132.7964
2024-04-28 21:11:56 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_NCHWc_add] Trial #36: GFLOPs: 41.3930. Time: 310.9253 us. Best GFLOPs: 132.7964
2024-04-28 21:11:56 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_NCHWc_add] Trial #37: GFLOPs: 102.7065. Time: 125.3099 us. Best GFLOPs: 132.7964
2024-04-28 21:11:56 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_NCHWc_add] Trial #38: GFLOPs: 161.3607. Time: 79.7601 us. Best GFLOPs: 161.3607
2024-04-28 21:11:56 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_NCHWc_add] Trial #39: GFLOPs: 113.9740. Time: 112.9217 us. Best GFLOPs: 161.3607
2024-04-28 21:11:56 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_NCHWc_add] Trial #40: GFLOPs: 15.0995. Time: 852.3529 us. Best GFLOPs: 161.3607
2024-04-28 21:11:56 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_NCHWc_add] Trial #41: GFLOPs: 146.8448. Time: 87.6445 us. Best GFLOPs: 161.3607
2024-04-28 21:11:56 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_NCHWc_add] Trial #42: GFLOPs: 57.9831. Time: 221.9638 us. Best GFLOPs: 161.3607
2024-04-28 21:11:56 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_NCHWc_add] Trial #43: GFLOPs: 9.1286. Time: 1409.8721 us. Best GFLOPs: 161.3607
2024-04-28 21:11:56 [INFO] [task_scheduler.cc:121] [Task #0: fused_nn_contrib_conv2d_NCHWc_add] Trial #44: Error in building:
LocalBuilder: Timeout, killed after 30.0 seconds
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(2), T.int64(14), T.int64(14), T.int64(128)), "float32"), p1: T.Buffer((T.int64(16), T.int64(2), T.int64(1), T.int64(1), T.int64(128), T.int64(32)), "float32"), p2: T.Buffer((T.int64(1), T.int64(16), T.int64(1), T.int64(1), T.int64(32)), "float32"), T_add: T.Buffer((T.int64(1), T.int64(16), T.int64(7), T.int64(7), T.int64(32)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        conv2d_NCHWc = T.alloc_buffer((T.int64(1), T.int64(16), T.int64(7), T.int64(7), T.int64(32)))
        for n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_fused in T.parallel(T.int64(1568), annotations={"pragma_auto_unroll_max_step": 512, "pragma_unroll_explicit": 1}):
            for ow_1, oc_block_1 in T.grid(T.int64(1), T.int64(8)):
                for n_2_init, oc_chunk_2_init, oh_2_init, ow_2_init, oc_block_2_init, n_3_init, oc_chunk_3_init, oh_3_init, ow_3_init, oc_block_3_init in T.grid(T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(1), T.int64(1), T.int64(1)):
                    with T.block("conv2d_NCHWc_init"):
                        v_n = T.axis.spatial(T.int64(1), n_2_init + n_3_init)
                        v_oc_chunk = T.axis.spatial(T.int64(16), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_fused // T.int64(196) * T.int64(2) + oc_chunk_2_init * T.int64(2) + oc_chunk_3_init)
                        v_oh = T.axis.spatial(T.int64(7), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_fused % T.int64(7) + oh_2_init + oh_3_init)
                        v_ow = T.axis.spatial(T.int64(7), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_fused % T.int64(196) // T.int64(28) + ow_1 + ow_2_init + ow_3_init)
                        v_oc_block = T.axis.spatial(T.int64(32), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_fused % T.int64(28) // T.int64(7) * T.int64(8) + oc_block_1 + oc_block_2_init + oc_block_3_init)
                        T.reads()
                        T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                        T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                        conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = T.float32(0)
                for ic_0, kh_0, kw_0, n_2, oc_chunk_2, oh_2, ow_2, oc_block_2, ic_1, kh_1, kw_1, n_3, oc_chunk_3, oh_3, ow_3, oc_block_3 in T.grid(T.int64(8), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(32), T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(1), T.int64(1), T.int64(1)):
                    with T.block("conv2d_NCHWc_update"):
                        v_n = T.axis.spatial(T.int64(1), n_2 + n_3)
                        v_oc_chunk = T.axis.spatial(T.int64(16), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_fused // T.int64(196) * T.int64(2) + oc_chunk_2 * T.int64(2) + oc_chunk_3)
                        v_oh = T.axis.spatial(T.int64(7), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_fused % T.int64(7) + oh_2 + oh_3)
                        v_ow = T.axis.spatial(T.int64(7), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_fused % T.int64(196) // T.int64(28) + ow_1 + ow_2 + ow_3)
                        v_oc_block = T.axis.spatial(T.int64(32), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_fused % T.int64(28) // T.int64(7) * T.int64(8) + oc_block_1 + oc_block_2 + oc_block_3)
                        v_ic = T.axis.reduce(T.int64(256), ic_0 * T.int64(32) + ic_1)
                        v_kh = T.axis.reduce(T.int64(1), kh_0 + kh_1)
                        v_kw = T.axis.reduce(T.int64(1), kw_0 + kw_1)
                        T.reads(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block], p0[v_n, v_ic // T.int64(128), v_oh * T.int64(2) + v_kh, v_ow * T.int64(2) + v_kw, v_ic % T.int64(128)], p1[v_oc_chunk, v_ic // T.int64(128), v_kh, v_kw, v_ic % T.int64(128), v_oc_block])
                        T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                        T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                        conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] + p0[v_n, v_ic // T.int64(128), v_oh * T.int64(2) + v_kh, v_ow * T.int64(2) + v_kw, v_ic % T.int64(128)] * p1[v_oc_chunk, v_ic // T.int64(128), v_kh, v_kw, v_ic % T.int64(128), v_oc_block]
        for ax0_ax1_ax2_ax3_ax4_fused_0 in T.parallel(T.int64(392)):
            for ax0_ax1_ax2_ax3_ax4_fused_1 in T.vectorized(T.int64(64)):
                with T.block("T_add"):
                    v_ax0 = T.axis.spatial(T.int64(1), T.int64(0))
                    v_ax1 = T.axis.spatial(T.int64(16), (ax0_ax1_ax2_ax3_ax4_fused_0 * T.int64(64) + ax0_ax1_ax2_ax3_ax4_fused_1) // T.int64(1568))
                    v_ax2 = T.axis.spatial(T.int64(7), (ax0_ax1_ax2_ax3_ax4_fused_0 * T.int64(64) + ax0_ax1_ax2_ax3_ax4_fused_1) % T.int64(1568) // T.int64(224))
                    v_ax3 = T.axis.spatial(T.int64(7), (ax0_ax1_ax2_ax3_ax4_fused_0 * T.int64(64) + ax0_ax1_ax2_ax3_ax4_fused_1) % T.int64(224) // T.int64(32))
                    v_ax4 = T.axis.spatial(T.int64(32), (ax0_ax1_ax2_ax3_ax4_fused_0 * T.int64(64) + ax0_ax1_ax2_ax3_ax4_fused_1) % T.int64(32))
                    T.reads(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4])
                    T.writes(T_add[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                    T_add[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] + p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4]
b0 = sch.get_block(name="conv2d_NCHWc", func_name="main")
b1 = sch.get_block(name="root", func_name="main")
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.tiling_structure", ann_val="SSRSRS")
l2, l3, l4, l5, l6, l7, l8, l9 = sch.get_loops(block=b0)
v10, v11, v12, v13 = sch.sample_perfect_tile(loop=l2, n=4, max_innermost_factor=64, decision=[1, 1, 1, 1])
l14, l15, l16, l17 = sch.split(loop=l2, factors=[v10, v11, v12, v13], preserve_unit_iters=True)
v18, v19, v20, v21 = sch.sample_perfect_tile(loop=l3, n=4, max_innermost_factor=64, decision=[8, 1, 1, 2])
l22, l23, l24, l25 = sch.split(loop=l3, factors=[v18, v19, v20, v21], preserve_unit_iters=True)
v26, v27, v28, v29 = sch.sample_perfect_tile(loop=l4, n=4, max_innermost_factor=64, decision=[1, 7, 1, 1])
l30, l31, l32, l33 = sch.split(loop=l4, factors=[v26, v27, v28, v29], preserve_unit_iters=True)
v34, v35, v36, v37 = sch.sample_perfect_tile(loop=l5, n=4, max_innermost_factor=64, decision=[7, 1, 1, 1])
l38, l39, l40, l41 = sch.split(loop=l5, factors=[v34, v35, v36, v37], preserve_unit_iters=True)
v42, v43, v44, v45 = sch.sample_perfect_tile(loop=l6, n=4, max_innermost_factor=64, decision=[4, 8, 1, 1])
l46, l47, l48, l49 = sch.split(loop=l6, factors=[v42, v43, v44, v45], preserve_unit_iters=True)
v50, v51 = sch.sample_perfect_tile(loop=l7, n=2, max_innermost_factor=64, decision=[8, 32])
l52, l53 = sch.split(loop=l7, factors=[v50, v51], preserve_unit_iters=True)
v54, v55 = sch.sample_perfect_tile(loop=l8, n=2, max_innermost_factor=64, decision=[1, 1])
l56, l57 = sch.split(loop=l8, factors=[v54, v55], preserve_unit_iters=True)
v58, v59 = sch.sample_perfect_tile(loop=l9, n=2, max_innermost_factor=64, decision=[1, 1])
l60, l61 = sch.split(loop=l9, factors=[v58, v59], preserve_unit_iters=True)
sch.reorder(l14, l22, l30, l38, l46, l15, l23, l31, l39, l47, l52, l56, l60, l16, l24, l32, l40, l48, l53, l57, l61, l17, l25, l33, l41, l49)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.vectorize", ann_val=64)
v62 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.unroll_explicit", ann_val=v62)
sch.enter_postproc()
b63 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b63, ann_key="meta_schedule.parallel")
sch.unannotate(block_or_loop=b63, ann_key="meta_schedule.vectorize")
sch.unannotate(block_or_loop=b63, ann_key="meta_schedule.unroll_explicit")
b64, b65 = sch.get_child_blocks(b63)
l66, l67, l68, l69, l70, l71, l72, l73, l74, l75, l76, l77, l78, l79, l80, l81, l82, l83, l84, l85, l86, l87, l88, l89, l90, l91 = sch.get_loops(block=b64)
l92 = sch.fuse(l66, l67, l68, l69, l70, l71, l72, l73, preserve_unit_iters=True)
sch.parallel(loop=l92)
sch.annotate(block_or_loop=l92, ann_key="pragma_auto_unroll_max_step", ann_val=512)
sch.annotate(block_or_loop=l92, ann_key="pragma_unroll_explicit", ann_val=1)
l93, l94, l95, l96, l97 = sch.get_loops(block=b65)
l98 = sch.fuse(l93, l94, l95, l96, l97, preserve_unit_iters=True)
l99, l100 = sch.split(loop=l98, factors=[None, 64], preserve_unit_iters=True)
sch.parallel(loop=l99)
sch.vectorize(loop=l100)
b101 = sch.get_block(name="conv2d_NCHWc", func_name="main")
l102, l103, l104, l105, l106, l107, l108, l109, l110, l111, l112, l113, l114, l115, l116, l117, l118, l119, l120 = sch.get_loops(block=b101)
b121 = sch.decompose_reduction(block=b101, loop=l105)
2024-04-28 21:11:56 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_NCHWc_add] Trial #45: GFLOPs: 6.4069. Time: 2008.8059 us. Best GFLOPs: 161.3607
2024-04-28 21:11:56 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_NCHWc_add] Trial #46: GFLOPs: 52.3300. Time: 245.9421 us. Best GFLOPs: 161.3607
2024-04-28 21:11:56 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_NCHWc_add] Trial #47: GFLOPs: 2.9705. Time: 4332.6149 us. Best GFLOPs: 161.3607
2024-04-28 21:11:56 [INFO] [task_scheduler.cc:121] [Task #0: fused_nn_contrib_conv2d_NCHWc_add] Trial #48: Error in building:
LocalBuilder: Timeout, killed after 30.0 seconds
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(2), T.int64(14), T.int64(14), T.int64(128)), "float32"), p1: T.Buffer((T.int64(16), T.int64(2), T.int64(1), T.int64(1), T.int64(128), T.int64(32)), "float32"), p2: T.Buffer((T.int64(1), T.int64(16), T.int64(1), T.int64(1), T.int64(32)), "float32"), T_add: T.Buffer((T.int64(1), T.int64(16), T.int64(7), T.int64(7), T.int64(32)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        conv2d_NCHWc = T.alloc_buffer((T.int64(1), T.int64(16), T.int64(7), T.int64(7), T.int64(32)))
        for n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused in T.parallel(T.int64(128), annotations={"pragma_auto_unroll_max_step": 512, "pragma_unroll_explicit": 1}):
            for n_2_init, oc_chunk_2_init, oh_2_init, ow_2_init, oc_block_2_init, n_3_init, oc_chunk_3_init, oh_3_init, ow_3_init, oc_block_3_init in T.grid(T.int64(1), T.int64(2), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(7), T.int64(7), T.int64(1)):
                with T.block("conv2d_NCHWc_init"):
                    v_n = T.axis.spatial(T.int64(1), n_2_init + n_3_init)
                    v_oc_chunk = T.axis.spatial(T.int64(16), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused // T.int64(32) * T.int64(4) + oc_chunk_2_init * T.int64(2) + oc_chunk_3_init)
                    v_oh = T.axis.spatial(T.int64(7), oh_2_init * T.int64(7) + oh_3_init)
                    v_ow = T.axis.spatial(T.int64(7), ow_2_init * T.int64(7) + ow_3_init)
                    v_oc_block = T.axis.spatial(T.int64(32), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused % T.int64(32) + oc_block_2_init + oc_block_3_init)
                    T.reads()
                    T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                    T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                    conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = T.float32(0)
            for ic_0, kh_0, kw_0, n_2, oc_chunk_2, oh_2, ow_2, oc_block_2, ic_1, kh_1, kw_1, n_3, oc_chunk_3, oh_3, ow_3, oc_block_3 in T.grid(T.int64(64), T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(1), T.int64(1), T.int64(1), T.int64(4), T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(7), T.int64(7), T.int64(1)):
                with T.block("conv2d_NCHWc_update"):
                    v_n = T.axis.spatial(T.int64(1), n_2 + n_3)
                    v_oc_chunk = T.axis.spatial(T.int64(16), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused // T.int64(32) * T.int64(4) + oc_chunk_2 * T.int64(2) + oc_chunk_3)
                    v_oh = T.axis.spatial(T.int64(7), oh_2 * T.int64(7) + oh_3)
                    v_ow = T.axis.spatial(T.int64(7), ow_2 * T.int64(7) + ow_3)
                    v_oc_block = T.axis.spatial(T.int64(32), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused % T.int64(32) + oc_block_2 + oc_block_3)
                    v_ic = T.axis.reduce(T.int64(256), ic_0 * T.int64(4) + ic_1)
                    v_kh = T.axis.reduce(T.int64(1), kh_0 + kh_1)
                    v_kw = T.axis.reduce(T.int64(1), kw_0 + kw_1)
                    T.reads(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block], p0[v_n, v_ic // T.int64(128), v_oh * T.int64(2) + v_kh, v_ow * T.int64(2) + v_kw, v_ic % T.int64(128)], p1[v_oc_chunk, v_ic // T.int64(128), v_kh, v_kw, v_ic % T.int64(128), v_oc_block])
                    T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                    T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                    conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] + p0[v_n, v_ic // T.int64(128), v_oh * T.int64(2) + v_kh, v_ow * T.int64(2) + v_kw, v_ic % T.int64(128)] * p1[v_oc_chunk, v_ic // T.int64(128), v_kh, v_kw, v_ic % T.int64(128), v_oc_block]
            for ax0, ax1, ax2, ax3, ax4 in T.grid(T.int64(1), T.int64(4), T.int64(7), T.int64(7), T.int64(1)):
                with T.block("T_add"):
                    v_ax0 = T.axis.spatial(T.int64(1), ax0)
                    v_ax1 = T.axis.spatial(T.int64(16), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused // T.int64(32) * T.int64(4) + ax1)
                    v_ax2, v_ax3 = T.axis.remap("SS", [ax2, ax3])
                    v_ax4 = T.axis.spatial(T.int64(32), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused % T.int64(32) + ax4)
                    T.reads(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4])
                    T.writes(T_add[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                    T_add[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] + p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4]
b0 = sch.get_block(name="conv2d_NCHWc", func_name="main")
b1 = sch.get_block(name="root", func_name="main")
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.tiling_structure", ann_val="SSRSRS")
l2, l3, l4, l5, l6, l7, l8, l9 = sch.get_loops(block=b0)
v10, v11, v12, v13 = sch.sample_perfect_tile(loop=l2, n=4, max_innermost_factor=64, decision=[1, 1, 1, 1])
l14, l15, l16, l17 = sch.split(loop=l2, factors=[v10, v11, v12, v13], preserve_unit_iters=True)
v18, v19, v20, v21 = sch.sample_perfect_tile(loop=l3, n=4, max_innermost_factor=64, decision=[1, 4, 2, 2])
l22, l23, l24, l25 = sch.split(loop=l3, factors=[v18, v19, v20, v21], preserve_unit_iters=True)
v26, v27, v28, v29 = sch.sample_perfect_tile(loop=l4, n=4, max_innermost_factor=64, decision=[1, 1, 1, 7])
l30, l31, l32, l33 = sch.split(loop=l4, factors=[v26, v27, v28, v29], preserve_unit_iters=True)
v34, v35, v36, v37 = sch.sample_perfect_tile(loop=l5, n=4, max_innermost_factor=64, decision=[1, 1, 1, 7])
l38, l39, l40, l41 = sch.split(loop=l5, factors=[v34, v35, v36, v37], preserve_unit_iters=True)
v42, v43, v44, v45 = sch.sample_perfect_tile(loop=l6, n=4, max_innermost_factor=64, decision=[1, 32, 1, 1])
l46, l47, l48, l49 = sch.split(loop=l6, factors=[v42, v43, v44, v45], preserve_unit_iters=True)
v50, v51 = sch.sample_perfect_tile(loop=l7, n=2, max_innermost_factor=64, decision=[64, 4])
l52, l53 = sch.split(loop=l7, factors=[v50, v51], preserve_unit_iters=True)
v54, v55 = sch.sample_perfect_tile(loop=l8, n=2, max_innermost_factor=64, decision=[1, 1])
l56, l57 = sch.split(loop=l8, factors=[v54, v55], preserve_unit_iters=True)
v58, v59 = sch.sample_perfect_tile(loop=l9, n=2, max_innermost_factor=64, decision=[1, 1])
l60, l61 = sch.split(loop=l9, factors=[v58, v59], preserve_unit_iters=True)
sch.reorder(l14, l22, l30, l38, l46, l15, l23, l31, l39, l47, l52, l56, l60, l16, l24, l32, l40, l48, l53, l57, l61, l17, l25, l33, l41, l49)
b62, = sch.get_consumers(block=b0)
sch.reverse_compute_at(block=b62, loop=l47, preserve_unit_loops=True, index=-1)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.vectorize", ann_val=64)
v63 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.unroll_explicit", ann_val=v63)
sch.enter_postproc()
b64 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b64, ann_key="meta_schedule.parallel")
sch.unannotate(block_or_loop=b64, ann_key="meta_schedule.vectorize")
sch.unannotate(block_or_loop=b64, ann_key="meta_schedule.unroll_explicit")
b65, b66 = sch.get_child_blocks(b64)
l67, l68, l69, l70, l71, l72, l73, l74, l75, l76, l77, l78, l79, l80, l81, l82, l83, l84, l85, l86, l87, l88, l89, l90, l91, l92 = sch.get_loops(block=b65)
l93 = sch.fuse(l67, l68, l69, l70, l71, l72, l73, l74, l75, l76, preserve_unit_iters=True)
sch.parallel(loop=l93)
sch.annotate(block_or_loop=l93, ann_key="pragma_auto_unroll_max_step", ann_val=512)
sch.annotate(block_or_loop=l93, ann_key="pragma_unroll_explicit", ann_val=1)
l94, l95, l96, l97, l98, l99 = sch.get_loops(block=b66)
b100 = sch.get_block(name="conv2d_NCHWc", func_name="main")
l101, l102, l103, l104, l105, l106, l107, l108, l109, l110, l111, l112, l113, l114, l115, l116, l117 = sch.get_loops(block=b100)
b118 = sch.decompose_reduction(block=b100, loop=l102)
2024-04-28 21:11:57 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_NCHWc_add] Trial #49: GFLOPs: 26.2984. Time: 489.3882 us. Best GFLOPs: 161.3607
2024-04-28 21:11:57 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_NCHWc_add] Trial #50: GFLOPs: 3.3633. Time: 3826.6823 us. Best GFLOPs: 161.3607
2024-04-28 21:11:57 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_NCHWc_add] Trial #51: GFLOPs: 0.3581. Time: 35935.5577 us. Best GFLOPs: 161.3607
2024-04-28 21:11:57 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_NCHWc_add] Trial #52: GFLOPs: 33.9688. Time: 378.8812 us. Best GFLOPs: 161.3607
2024-04-28 21:11:57 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_NCHWc_add] Trial #53: GFLOPs: 54.8021. Time: 234.8477 us. Best GFLOPs: 161.3607
2024-04-28 21:11:57 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_NCHWc_add] Trial #54: GFLOPs: 37.2357. Time: 345.6404 us. Best GFLOPs: 161.3607
2024-04-28 21:11:57 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_NCHWc_add] Trial #55: GFLOPs: 95.6684. Time: 134.5287 us. Best GFLOPs: 161.3607
2024-04-28 21:11:57 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_NCHWc_add] Trial #56: GFLOPs: 63.6710. Time: 202.1349 us. Best GFLOPs: 161.3607
2024-04-28 21:11:57 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_NCHWc_add] Trial #57: GFLOPs: 1.7712. Time: 7266.3591 us. Best GFLOPs: 161.3607
2024-04-28 21:11:57 [INFO] [task_scheduler.cc:121] [Task #0: fused_nn_contrib_conv2d_NCHWc_add] Trial #58: Error in building:
LocalBuilder: Timeout, killed after 30.0 seconds
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(2), T.int64(14), T.int64(14), T.int64(128)), "float32"), p1: T.Buffer((T.int64(16), T.int64(2), T.int64(1), T.int64(1), T.int64(128), T.int64(32)), "float32"), p2: T.Buffer((T.int64(1), T.int64(16), T.int64(1), T.int64(1), T.int64(32)), "float32"), T_add: T.Buffer((T.int64(1), T.int64(16), T.int64(7), T.int64(7), T.int64(32)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        conv2d_NCHWc = T.alloc_buffer((T.int64(1), T.int64(16), T.int64(7), T.int64(7), T.int64(32)))
        for n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_fused in T.parallel(T.int64(28), annotations={"pragma_auto_unroll_max_step": 512, "pragma_unroll_explicit": 1}):
            for n_1, oc_chunk_1, oh_1, ow_1, oc_block_1 in T.grid(T.int64(1), T.int64(2), T.int64(1), T.int64(1), T.int64(32)):
                for n_2_init, oc_chunk_2_init, oh_2_init, ow_2_init, oc_block_2_init, n_3_init, oc_chunk_3_init, oh_3_init, ow_3_init, oc_block_3_init in T.grid(T.int64(1), T.int64(2), T.int64(1), T.int64(7), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1)):
                    with T.block("conv2d_NCHWc_init"):
                        v_n = T.axis.spatial(T.int64(1), n_1 + n_2_init + n_3_init)
                        v_oc_chunk = T.axis.spatial(T.int64(16), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_fused // T.int64(7) * T.int64(4) + oc_chunk_1 * T.int64(2) + oc_chunk_2_init + oc_chunk_3_init)
                        v_oh = T.axis.spatial(T.int64(7), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_fused % T.int64(7) + oh_1 + oh_2_init + oh_3_init)
                        v_ow = T.axis.spatial(T.int64(7), ow_1 * T.int64(7) + ow_2_init + ow_3_init)
                        v_oc_block = T.axis.spatial(T.int64(32), oc_block_1 + oc_block_2_init + oc_block_3_init)
                        T.reads()
                        T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                        T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                        conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = T.float32(0)
                for ic_0, kh_0, kw_0, n_2, oc_chunk_2, oh_2, ow_2, oc_block_2, ic_1, kh_1, kw_1, n_3, oc_chunk_3, oh_3, ow_3, oc_block_3 in T.grid(T.int64(8), T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(1), T.int64(7), T.int64(1), T.int64(32), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1)):
                    with T.block("conv2d_NCHWc_update"):
                        v_n = T.axis.spatial(T.int64(1), n_1 + n_2 + n_3)
                        v_oc_chunk = T.axis.spatial(T.int64(16), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_fused // T.int64(7) * T.int64(4) + oc_chunk_1 * T.int64(2) + oc_chunk_2 + oc_chunk_3)
                        v_oh = T.axis.spatial(T.int64(7), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_fused % T.int64(7) + oh_1 + oh_2 + oh_3)
                        v_ow = T.axis.spatial(T.int64(7), ow_1 * T.int64(7) + ow_2 + ow_3)
                        v_oc_block = T.axis.spatial(T.int64(32), oc_block_1 + oc_block_2 + oc_block_3)
                        v_ic = T.axis.reduce(T.int64(256), ic_0 * T.int64(32) + ic_1)
                        v_kh = T.axis.reduce(T.int64(1), kh_0 + kh_1)
                        v_kw = T.axis.reduce(T.int64(1), kw_0 + kw_1)
                        T.reads(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block], p0[v_n, v_ic // T.int64(128), v_oh * T.int64(2) + v_kh, v_ow * T.int64(2) + v_kw, v_ic % T.int64(128)], p1[v_oc_chunk, v_ic // T.int64(128), v_kh, v_kw, v_ic % T.int64(128), v_oc_block])
                        T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                        T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                        conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] + p0[v_n, v_ic // T.int64(128), v_oh * T.int64(2) + v_kh, v_ow * T.int64(2) + v_kw, v_ic % T.int64(128)] * p1[v_oc_chunk, v_ic // T.int64(128), v_kh, v_kw, v_ic % T.int64(128), v_oc_block]
            for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(4), T.int64(1), T.int64(7)):
                for ax4_fused in T.vectorized(T.int64(32)):
                    with T.block("T_add"):
                        v_ax0 = T.axis.spatial(T.int64(1), ax0)
                        v_ax1 = T.axis.spatial(T.int64(16), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_fused // T.int64(7) * T.int64(4) + ax1)
                        v_ax2 = T.axis.spatial(T.int64(7), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_fused % T.int64(7) + ax2)
                        v_ax3, v_ax4 = T.axis.remap("SS", [ax3, ax4_fused])
                        T.reads(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4])
                        T.writes(T_add[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                        T_add[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] + p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4]
b0 = sch.get_block(name="conv2d_NCHWc", func_name="main")
b1 = sch.get_block(name="root", func_name="main")
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.tiling_structure", ann_val="SSRSRS")
l2, l3, l4, l5, l6, l7, l8, l9 = sch.get_loops(block=b0)
v10, v11, v12, v13 = sch.sample_perfect_tile(loop=l2, n=4, max_innermost_factor=64, decision=[1, 1, 1, 1])
l14, l15, l16, l17 = sch.split(loop=l2, factors=[v10, v11, v12, v13], preserve_unit_iters=True)
v18, v19, v20, v21 = sch.sample_perfect_tile(loop=l3, n=4, max_innermost_factor=64, decision=[4, 2, 2, 1])
l22, l23, l24, l25 = sch.split(loop=l3, factors=[v18, v19, v20, v21], preserve_unit_iters=True)
v26, v27, v28, v29 = sch.sample_perfect_tile(loop=l4, n=4, max_innermost_factor=64, decision=[7, 1, 1, 1])
l30, l31, l32, l33 = sch.split(loop=l4, factors=[v26, v27, v28, v29], preserve_unit_iters=True)
v34, v35, v36, v37 = sch.sample_perfect_tile(loop=l5, n=4, max_innermost_factor=64, decision=[1, 1, 7, 1])
l38, l39, l40, l41 = sch.split(loop=l5, factors=[v34, v35, v36, v37], preserve_unit_iters=True)
v42, v43, v44, v45 = sch.sample_perfect_tile(loop=l6, n=4, max_innermost_factor=64, decision=[1, 32, 1, 1])
l46, l47, l48, l49 = sch.split(loop=l6, factors=[v42, v43, v44, v45], preserve_unit_iters=True)
v50, v51 = sch.sample_perfect_tile(loop=l7, n=2, max_innermost_factor=64, decision=[8, 32])
l52, l53 = sch.split(loop=l7, factors=[v50, v51], preserve_unit_iters=True)
v54, v55 = sch.sample_perfect_tile(loop=l8, n=2, max_innermost_factor=64, decision=[1, 1])
l56, l57 = sch.split(loop=l8, factors=[v54, v55], preserve_unit_iters=True)
v58, v59 = sch.sample_perfect_tile(loop=l9, n=2, max_innermost_factor=64, decision=[1, 1])
l60, l61 = sch.split(loop=l9, factors=[v58, v59], preserve_unit_iters=True)
sch.reorder(l14, l22, l30, l38, l46, l15, l23, l31, l39, l47, l52, l56, l60, l16, l24, l32, l40, l48, l53, l57, l61, l17, l25, l33, l41, l49)
b62, = sch.get_consumers(block=b0)
sch.reverse_compute_at(block=b62, loop=l46, preserve_unit_loops=True, index=-1)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.vectorize", ann_val=64)
v63 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.unroll_explicit", ann_val=v63)
sch.enter_postproc()
b64 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b64, ann_key="meta_schedule.parallel")
sch.unannotate(block_or_loop=b64, ann_key="meta_schedule.vectorize")
sch.unannotate(block_or_loop=b64, ann_key="meta_schedule.unroll_explicit")
b65, b66 = sch.get_child_blocks(b64)
l67, l68, l69, l70, l71, l72, l73, l74, l75, l76, l77, l78, l79, l80, l81, l82, l83, l84, l85, l86, l87, l88, l89, l90, l91, l92 = sch.get_loops(block=b65)
l93 = sch.fuse(l67, l68, l69, l70, l71, preserve_unit_iters=True)
sch.parallel(loop=l93)
sch.annotate(block_or_loop=l93, ann_key="pragma_auto_unroll_max_step", ann_val=512)
sch.annotate(block_or_loop=l93, ann_key="pragma_unroll_explicit", ann_val=1)
l94, l95, l96, l97, l98, l99 = sch.get_loops(block=b66)
l100 = sch.fuse(l99, preserve_unit_iters=True)
sch.vectorize(loop=l100)
b101 = sch.get_block(name="conv2d_NCHWc", func_name="main")
l102, l103, l104, l105, l106, l107, l108, l109, l110, l111, l112, l113, l114, l115, l116, l117, l118, l119, l120, l121, l122, l123 = sch.get_loops(block=b101)
b124 = sch.decompose_reduction(block=b101, loop=l108)
2024-04-28 21:11:57 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_NCHWc_add] Trial #59: GFLOPs: 44.4994. Time: 289.2207 us. Best GFLOPs: 161.3607
2024-04-28 21:11:57 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_NCHWc_add] Trial #60: GFLOPs: 5.9219. Time: 2173.3204 us. Best GFLOPs: 161.3607
2024-04-28 21:11:57 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_NCHWc_add] Trial #61: GFLOPs: 158.7494. Time: 81.0721 us. Best GFLOPs: 161.3607
2024-04-28 21:11:57 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_NCHWc_add] Trial #62: GFLOPs: 6.2483. Time: 2059.7768 us. Best GFLOPs: 161.3607
2024-04-28 21:11:57 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_NCHWc_add] Trial #63: GFLOPs: 147.1135. Time: 87.4844 us. Best GFLOPs: 161.3607
2024-04-28 21:11:57 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_NCHWc_add] Trial #64: GFLOPs: 97.0773. Time: 132.5762 us. Best GFLOPs: 161.3607
2024-04-29 00:05:43 [INFO] [evolutionary_search.cc:713] Generating candidates......
2024-04-29 00:05:44 [INFO] [evolutionary_search.cc:715] Picked top 60 candidate(s) from database
2024-04-29 00:05:46 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x3e8b3f8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x341ebf8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x383c318)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x3fc4738)]: 0 failure(s)
2024-04-29 00:05:46 [INFO] [evolutionary_search.cc:723] Sampled 452 candidate(s)
2024-04-29 00:05:51 [INFO] [evolutionary_search.cc:621] Evolve iter #0 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x3e8b3f8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x341ebf8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x383c318)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x3fc4738)]: 0 failure(s)
2024-04-29 00:05:57 [INFO] [evolutionary_search.cc:621] Evolve iter #1 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x3e8b3f8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x341ebf8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x383c318)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x3fc4738)]: 0 failure(s)
2024-04-29 00:06:02 [INFO] [evolutionary_search.cc:621] Evolve iter #2 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x3e8b3f8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x341ebf8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x383c318)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x3fc4738)]: 0 failure(s)
2024-04-29 00:06:07 [INFO] [evolutionary_search.cc:621] Evolve iter #3 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x3e8b3f8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x341ebf8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x383c318)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x3fc4738)]: 0 failure(s)
2024-04-29 00:06:10 [INFO] [evolutionary_search.cc:649] Scores of the best 64 candidates:
[1 : 16]:	0.9807  0.9734  0.9724  0.9724  0.9702  0.9694  0.9666  0.9538  0.9465  0.9365  0.9242  0.9185  0.9133  0.9040  0.9037  0.9034
[17 : 32]:	0.8967  0.8959  0.8951  0.8946  0.8888  0.8814  0.8740  0.8739  0.8725  0.8608  0.8590  0.8572  0.8561  0.8561  0.8557  0.8544
[33 : 48]:	0.8501  0.8481  0.8444  0.8436  0.8435  0.8411  0.8403  0.8358  0.8333  0.8330  0.8330  0.8330  0.8298  0.8295  0.8245  0.8244
[49 : 64]:	0.8200  0.8153  0.8048  0.8044  0.8033  0.8025  0.7971  0.7948  0.7926  0.7922  0.7881  0.7872  0.7846  0.7828  0.7819  0.7813
2024-04-29 00:06:10 [INFO] [evolutionary_search.cc:727] Got 64 candidate(s) with evolutionary search
2024-04-29 00:06:10 [INFO] [evolutionary_search.cc:730] Sending 64 candidates(s) for measurement
2024-04-29 00:07:46 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_NCHWc_add] Trial #65: GFLOPs: 162.6033. Time: 79.1506 us. Best GFLOPs: 162.6033
2024-04-29 00:07:46 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_NCHWc_add] Trial #66: GFLOPs: 116.3991. Time: 110.5691 us. Best GFLOPs: 162.6033
2024-04-29 00:07:46 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_NCHWc_add] Trial #67: GFLOPs: 186.1702. Time: 69.1311 us. Best GFLOPs: 186.1702
2024-04-29 00:07:46 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_NCHWc_add] Trial #68: GFLOPs: 191.3934. Time: 67.2444 us. Best GFLOPs: 191.3934
2024-04-29 00:07:46 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_NCHWc_add] Trial #69: GFLOPs: 157.7649. Time: 81.5780 us. Best GFLOPs: 191.3934
2024-04-29 00:07:46 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_NCHWc_add] Trial #70: GFLOPs: 67.5405. Time: 190.5545 us. Best GFLOPs: 191.3934
2024-04-29 00:07:46 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_NCHWc_add] Trial #71: GFLOPs: 58.5737. Time: 219.7258 us. Best GFLOPs: 191.3934
2024-04-29 00:07:46 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_NCHWc_add] Trial #72: GFLOPs: 154.8242. Time: 83.1275 us. Best GFLOPs: 191.3934
2024-04-29 00:07:46 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_NCHWc_add] Trial #73: GFLOPs: 203.2853. Time: 63.3108 us. Best GFLOPs: 203.2853
2024-04-29 00:07:46 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_NCHWc_add] Trial #74: GFLOPs: 126.4720. Time: 101.7628 us. Best GFLOPs: 203.2853
2024-04-29 00:07:46 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_NCHWc_add] Trial #75: GFLOPs: 141.9398. Time: 90.6733 us. Best GFLOPs: 203.2853
2024-04-29 00:07:46 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_NCHWc_add] Trial #76: GFLOPs: 171.8375. Time: 74.8972 us. Best GFLOPs: 203.2853
2024-04-29 00:07:46 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_NCHWc_add] Trial #77: GFLOPs: 159.3807. Time: 80.7510 us. Best GFLOPs: 203.2853
2024-04-29 00:07:46 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_NCHWc_add] Trial #78: GFLOPs: 70.2392. Time: 183.2330 us. Best GFLOPs: 203.2853
2024-04-29 00:07:46 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_NCHWc_add] Trial #79: GFLOPs: 179.2822. Time: 71.7871 us. Best GFLOPs: 203.2853
2024-04-29 00:07:46 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_NCHWc_add] Trial #80: GFLOPs: 158.2350. Time: 81.3356 us. Best GFLOPs: 203.2853
2024-04-29 00:07:46 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_NCHWc_add] Trial #81: GFLOPs: 166.8082. Time: 77.1553 us. Best GFLOPs: 203.2853
2024-04-29 00:07:46 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_NCHWc_add] Trial #82: GFLOPs: 86.0956. Time: 149.4866 us. Best GFLOPs: 203.2853
2024-04-29 00:07:46 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_NCHWc_add] Trial #83: GFLOPs: 73.5486. Time: 174.9884 us. Best GFLOPs: 203.2853
2024-04-29 00:07:46 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_NCHWc_add] Trial #84: GFLOPs: 80.3153. Time: 160.2452 us. Best GFLOPs: 203.2853
2024-04-29 00:07:46 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_NCHWc_add] Trial #85: GFLOPs: 152.3214. Time: 84.4933 us. Best GFLOPs: 203.2853
2024-04-29 00:07:46 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_NCHWc_add] Trial #86: GFLOPs: 147.4544. Time: 87.2822 us. Best GFLOPs: 203.2853
2024-04-29 00:07:46 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_NCHWc_add] Trial #87: GFLOPs: 181.1563. Time: 71.0444 us. Best GFLOPs: 203.2853
2024-04-29 00:07:46 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_NCHWc_add] Trial #88: GFLOPs: 149.9256. Time: 85.8436 us. Best GFLOPs: 203.2853
2024-04-29 00:07:46 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_NCHWc_add] Trial #89: GFLOPs: 148.9901. Time: 86.3826 us. Best GFLOPs: 203.2853
2024-04-29 00:07:46 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_NCHWc_add] Trial #90: GFLOPs: 77.7449. Time: 165.5432 us. Best GFLOPs: 203.2853
2024-04-29 00:07:46 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_NCHWc_add] Trial #91: GFLOPs: 140.1716. Time: 91.8171 us. Best GFLOPs: 203.2853
2024-04-29 00:07:46 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_NCHWc_add] Trial #92: GFLOPs: 75.8746. Time: 169.6240 us. Best GFLOPs: 203.2853
2024-04-29 00:07:46 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_NCHWc_add] Trial #93: GFLOPs: 134.7735. Time: 95.4946 us. Best GFLOPs: 203.2853
2024-04-29 00:07:46 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_NCHWc_add] Trial #94: GFLOPs: 121.2424. Time: 106.1522 us. Best GFLOPs: 203.2853
2024-04-29 00:07:46 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_NCHWc_add] Trial #95: GFLOPs: 125.0987. Time: 102.8799 us. Best GFLOPs: 203.2853
2024-04-29 00:07:46 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_NCHWc_add] Trial #96: GFLOPs: 80.4181. Time: 160.0404 us. Best GFLOPs: 203.2853
2024-04-29 00:07:46 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_NCHWc_add] Trial #97: GFLOPs: 164.9919. Time: 78.0047 us. Best GFLOPs: 203.2853
2024-04-29 00:07:46 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_NCHWc_add] Trial #98: GFLOPs: 170.0837. Time: 75.6695 us. Best GFLOPs: 203.2853
2024-04-29 00:07:46 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_NCHWc_add] Trial #99: GFLOPs: 166.8062. Time: 77.1563 us. Best GFLOPs: 203.2853
2024-04-29 00:07:46 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_NCHWc_add] Trial #100: GFLOPs: 121.0786. Time: 106.2958 us. Best GFLOPs: 203.2853
2024-04-29 00:07:46 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_NCHWc_add] Trial #101: GFLOPs: 196.8378. Time: 65.3845 us. Best GFLOPs: 203.2853
2024-04-29 00:07:46 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_NCHWc_add] Trial #102: GFLOPs: 145.1563. Time: 88.6640 us. Best GFLOPs: 203.2853
2024-04-29 00:07:46 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_NCHWc_add] Trial #103: GFLOPs: 139.7286. Time: 92.1082 us. Best GFLOPs: 203.2853
2024-04-29 00:07:46 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_NCHWc_add] Trial #104: GFLOPs: 217.0135. Time: 59.3057 us. Best GFLOPs: 217.0135
2024-04-29 00:07:46 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_NCHWc_add] Trial #105: GFLOPs: 122.2852. Time: 105.2470 us. Best GFLOPs: 217.0135
2024-04-29 00:07:46 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_NCHWc_add] Trial #106: GFLOPs: 81.9811. Time: 156.9891 us. Best GFLOPs: 217.0135
2024-04-29 00:07:46 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_NCHWc_add] Trial #107: GFLOPs: 79.7208. Time: 161.4403 us. Best GFLOPs: 217.0135
2024-04-29 00:07:46 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_NCHWc_add] Trial #108: GFLOPs: 79.2308. Time: 162.4386 us. Best GFLOPs: 217.0135
2024-04-29 00:07:46 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_NCHWc_add] Trial #109: GFLOPs: 119.2929. Time: 107.8869 us. Best GFLOPs: 217.0135
2024-04-29 00:07:46 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_NCHWc_add] Trial #110: GFLOPs: 139.2424. Time: 92.4298 us. Best GFLOPs: 217.0135
2024-04-29 00:07:46 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_NCHWc_add] Trial #111: GFLOPs: 129.5986. Time: 99.3077 us. Best GFLOPs: 217.0135
2024-04-29 00:07:46 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_NCHWc_add] Trial #112: GFLOPs: 155.2536. Time: 82.8976 us. Best GFLOPs: 217.0135
2024-04-29 00:07:46 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_NCHWc_add] Trial #113: GFLOPs: 94.2028. Time: 136.6216 us. Best GFLOPs: 217.0135
2024-04-29 00:07:46 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_NCHWc_add] Trial #114: GFLOPs: 128.2636. Time: 100.3414 us. Best GFLOPs: 217.0135
2024-04-29 00:07:46 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_NCHWc_add] Trial #115: GFLOPs: 155.4283. Time: 82.8044 us. Best GFLOPs: 217.0135
2024-04-29 00:07:46 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_NCHWc_add] Trial #116: GFLOPs: 61.1774. Time: 210.3741 us. Best GFLOPs: 217.0135
2024-04-29 00:07:46 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_NCHWc_add] Trial #117: GFLOPs: 160.3366. Time: 80.2695 us. Best GFLOPs: 217.0135
2024-04-29 00:07:46 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_NCHWc_add] Trial #118: GFLOPs: 167.4095. Time: 76.8782 us. Best GFLOPs: 217.0135
2024-04-29 00:07:46 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_NCHWc_add] Trial #119: GFLOPs: 119.8983. Time: 107.3422 us. Best GFLOPs: 217.0135
2024-04-29 00:07:46 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_NCHWc_add] Trial #120: GFLOPs: 138.0956. Time: 93.1974 us. Best GFLOPs: 217.0135
2024-04-29 00:07:46 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_NCHWc_add] Trial #121: GFLOPs: 98.2510. Time: 130.9925 us. Best GFLOPs: 217.0135
2024-04-29 00:07:46 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_NCHWc_add] Trial #122: GFLOPs: 174.2275. Time: 73.8697 us. Best GFLOPs: 217.0135
2024-04-29 00:07:46 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_NCHWc_add] Trial #123: GFLOPs: 178.8209. Time: 71.9723 us. Best GFLOPs: 217.0135
2024-04-29 00:07:46 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_NCHWc_add] Trial #124: GFLOPs: 98.1636. Time: 131.1092 us. Best GFLOPs: 217.0135
2024-04-29 00:07:46 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_NCHWc_add] Trial #125: GFLOPs: 75.3223. Time: 170.8676 us. Best GFLOPs: 217.0135
2024-04-29 00:07:46 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_NCHWc_add] Trial #126: GFLOPs: 6.7445. Time: 1908.2521 us. Best GFLOPs: 217.0135
2024-04-29 00:07:46 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_NCHWc_add] Trial #127: GFLOPs: 69.5642. Time: 185.0109 us. Best GFLOPs: 217.0135
2024-04-29 00:07:46 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_NCHWc_add] Trial #128: GFLOPs: 63.9130. Time: 201.3699 us. Best GFLOPs: 217.0135
2024-04-29 03:05:49 [INFO] [evolutionary_search.cc:713] Generating candidates......
2024-04-29 03:05:50 [INFO] [evolutionary_search.cc:715] Picked top 102 candidate(s) from database
2024-04-29 03:05:52 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x3e8b3f8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x341ebf8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x383c318)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x3fc4738)]: 0 failure(s)
2024-04-29 03:05:52 [INFO] [evolutionary_search.cc:723] Sampled 410 candidate(s)
2024-04-29 03:05:57 [INFO] [evolutionary_search.cc:621] Evolve iter #0 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x3e8b3f8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x341ebf8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x383c318)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x3fc4738)]: 0 failure(s)
2024-04-29 03:06:02 [INFO] [evolutionary_search.cc:621] Evolve iter #1 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x3e8b3f8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x341ebf8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x383c318)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x3fc4738)]: 0 failure(s)
2024-04-29 03:06:07 [INFO] [evolutionary_search.cc:621] Evolve iter #2 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x3e8b3f8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x341ebf8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x383c318)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x3fc4738)]: 0 failure(s)
2024-04-29 03:06:13 [INFO] [evolutionary_search.cc:621] Evolve iter #3 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x3e8b3f8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x341ebf8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x383c318)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x3fc4738)]: 0 failure(s)
2024-04-29 03:06:16 [INFO] [evolutionary_search.cc:649] Scores of the best 64 candidates:
[1 : 16]:	0.9456  0.8448  0.8312  0.8312  0.8309  0.8286  0.8269  0.8137  0.8125  0.8081  0.8081  0.8079  0.8062  0.8045  0.8045  0.7991
[17 : 32]:	0.7979  0.7978  0.7941  0.7938  0.7915  0.7915  0.7899  0.7899  0.7896  0.7850  0.7831  0.7787  0.7751  0.7751  0.7726  0.7660
[33 : 48]:	0.7660  0.7658  0.7641  0.7631  0.7618  0.7611  0.7610  0.7599  0.7599  0.7595  0.7589  0.7582  0.7574  0.7574  0.7573  0.7570
[49 : 64]:	0.7569  0.7569  0.7569  0.7559  0.7550  0.7546  0.7546  0.7535  0.7532  0.7532  0.7519  0.7512  0.7505  0.7496  0.7446  0.7443
2024-04-29 03:06:16 [INFO] [evolutionary_search.cc:727] Got 64 candidate(s) with evolutionary search
2024-04-29 03:06:16 [INFO] [evolutionary_search.cc:730] Sending 64 candidates(s) for measurement
2024-04-29 03:08:02 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_NCHWc_add] Trial #129: GFLOPs: 107.9712. Time: 119.1998 us. Best GFLOPs: 217.0135
2024-04-29 03:08:02 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_NCHWc_add] Trial #130: GFLOPs: 78.8647. Time: 163.1927 us. Best GFLOPs: 217.0135
2024-04-29 03:08:02 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_NCHWc_add] Trial #131: GFLOPs: 194.7650. Time: 66.0804 us. Best GFLOPs: 217.0135
2024-04-29 03:08:02 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_NCHWc_add] Trial #132: GFLOPs: 189.6351. Time: 67.8680 us. Best GFLOPs: 217.0135
2024-04-29 03:08:02 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_NCHWc_add] Trial #133: GFLOPs: 192.3691. Time: 66.9034 us. Best GFLOPs: 217.0135
2024-04-29 03:08:02 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_NCHWc_add] Trial #134: GFLOPs: 103.0071. Time: 124.9442 us. Best GFLOPs: 217.0135
2024-04-29 03:08:02 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_NCHWc_add] Trial #135: GFLOPs: 138.5454. Time: 92.8948 us. Best GFLOPs: 217.0135
2024-04-29 03:08:02 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_NCHWc_add] Trial #136: GFLOPs: 90.4716. Time: 142.2561 us. Best GFLOPs: 217.0135
2024-04-29 03:08:02 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_NCHWc_add] Trial #137: GFLOPs: 79.0172. Time: 162.8777 us. Best GFLOPs: 217.0135
2024-04-29 03:08:02 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_NCHWc_add] Trial #138: GFLOPs: 130.8582. Time: 98.3518 us. Best GFLOPs: 217.0135
2024-04-29 03:08:02 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_NCHWc_add] Trial #139: GFLOPs: 130.0419. Time: 98.9692 us. Best GFLOPs: 217.0135
2024-04-29 03:08:02 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_NCHWc_add] Trial #140: GFLOPs: 134.4214. Time: 95.7448 us. Best GFLOPs: 217.0135
2024-04-29 03:08:02 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_NCHWc_add] Trial #141: GFLOPs: 158.5188. Time: 81.1900 us. Best GFLOPs: 217.0135
2024-04-29 03:08:02 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_NCHWc_add] Trial #142: GFLOPs: 234.3372. Time: 54.9215 us. Best GFLOPs: 234.3372
2024-04-29 03:08:02 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_NCHWc_add] Trial #143: GFLOPs: 235.7350. Time: 54.5958 us. Best GFLOPs: 235.7350
2024-04-29 03:08:02 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_NCHWc_add] Trial #144: GFLOPs: 192.1465. Time: 66.9809 us. Best GFLOPs: 235.7350
2024-04-29 03:08:02 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_NCHWc_add] Trial #145: GFLOPs: 142.8450. Time: 90.0987 us. Best GFLOPs: 235.7350
2024-04-29 03:08:02 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_NCHWc_add] Trial #146: GFLOPs: 54.6084. Time: 235.6807 us. Best GFLOPs: 235.7350
2024-04-29 03:08:02 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_NCHWc_add] Trial #147: GFLOPs: 180.5474. Time: 71.2840 us. Best GFLOPs: 235.7350
2024-04-29 03:08:02 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_NCHWc_add] Trial #148: GFLOPs: 187.9641. Time: 68.4713 us. Best GFLOPs: 235.7350
2024-04-29 03:08:02 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_NCHWc_add] Trial #149: GFLOPs: 193.1118. Time: 66.6461 us. Best GFLOPs: 235.7350
2024-04-29 03:08:02 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_NCHWc_add] Trial #150: GFLOPs: 107.0461. Time: 120.2300 us. Best GFLOPs: 235.7350
2024-04-29 03:08:02 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_NCHWc_add] Trial #151: GFLOPs: 194.5472. Time: 66.1543 us. Best GFLOPs: 235.7350
2024-04-29 03:08:02 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_NCHWc_add] Trial #152: GFLOPs: 83.7917. Time: 153.5968 us. Best GFLOPs: 235.7350
2024-04-29 03:08:02 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_NCHWc_add] Trial #153: GFLOPs: 99.0509. Time: 129.9346 us. Best GFLOPs: 235.7350
2024-04-29 03:08:02 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_NCHWc_add] Trial #154: GFLOPs: 114.3378. Time: 112.5624 us. Best GFLOPs: 235.7350
2024-04-29 03:08:02 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_NCHWc_add] Trial #155: GFLOPs: 188.4969. Time: 68.2778 us. Best GFLOPs: 235.7350
2024-04-29 03:08:02 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_NCHWc_add] Trial #156: GFLOPs: 198.3410. Time: 64.8890 us. Best GFLOPs: 235.7350
2024-04-29 03:08:02 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_NCHWc_add] Trial #157: GFLOPs: 131.8448. Time: 97.6159 us. Best GFLOPs: 235.7350
2024-04-29 03:08:02 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_NCHWc_add] Trial #158: GFLOPs: 132.1777. Time: 97.3700 us. Best GFLOPs: 235.7350
2024-04-29 03:08:02 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_NCHWc_add] Trial #159: GFLOPs: 171.4081. Time: 75.0848 us. Best GFLOPs: 235.7350
2024-04-29 03:08:02 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_NCHWc_add] Trial #160: GFLOPs: 145.5238. Time: 88.4401 us. Best GFLOPs: 235.7350
2024-04-29 03:08:02 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_NCHWc_add] Trial #161: GFLOPs: 144.2881. Time: 89.1976 us. Best GFLOPs: 235.7350
2024-04-29 03:08:02 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_NCHWc_add] Trial #162: GFLOPs: 87.8410. Time: 146.5164 us. Best GFLOPs: 235.7350
2024-04-29 03:08:02 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_NCHWc_add] Trial #163: GFLOPs: 176.8819. Time: 72.7612 us. Best GFLOPs: 235.7350
2024-04-29 03:08:02 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_NCHWc_add] Trial #164: GFLOPs: 107.3572. Time: 119.8815 us. Best GFLOPs: 235.7350
2024-04-29 03:08:02 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_NCHWc_add] Trial #165: GFLOPs: 102.9481. Time: 125.0158 us. Best GFLOPs: 235.7350
2024-04-29 03:08:02 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_NCHWc_add] Trial #166: GFLOPs: 186.6683. Time: 68.9466 us. Best GFLOPs: 235.7350
2024-04-29 03:08:02 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_NCHWc_add] Trial #167: GFLOPs: 113.7842. Time: 113.1101 us. Best GFLOPs: 235.7350
2024-04-29 03:08:02 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_NCHWc_add] Trial #168: GFLOPs: 142.1422. Time: 90.5441 us. Best GFLOPs: 235.7350
2024-04-29 03:08:02 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_NCHWc_add] Trial #169: GFLOPs: 142.6625. Time: 90.2139 us. Best GFLOPs: 235.7350
2024-04-29 03:08:02 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_NCHWc_add] Trial #170: GFLOPs: 125.4738. Time: 102.5723 us. Best GFLOPs: 235.7350
2024-04-29 03:08:02 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_NCHWc_add] Trial #171: GFLOPs: 120.9211. Time: 106.4342 us. Best GFLOPs: 235.7350
2024-04-29 03:08:02 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_NCHWc_add] Trial #172: GFLOPs: 121.0106. Time: 106.3555 us. Best GFLOPs: 235.7350
2024-04-29 03:08:02 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_NCHWc_add] Trial #173: GFLOPs: 148.8172. Time: 86.4829 us. Best GFLOPs: 235.7350
2024-04-29 03:08:02 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_NCHWc_add] Trial #174: GFLOPs: 169.4299. Time: 75.9615 us. Best GFLOPs: 235.7350
2024-04-29 03:08:02 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_NCHWc_add] Trial #175: GFLOPs: 157.2836. Time: 81.8276 us. Best GFLOPs: 235.7350
2024-04-29 03:08:02 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_NCHWc_add] Trial #176: GFLOPs: 104.8851. Time: 122.7071 us. Best GFLOPs: 235.7350
2024-04-29 03:08:02 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_NCHWc_add] Trial #177: GFLOPs: 183.5314. Time: 70.1250 us. Best GFLOPs: 235.7350
2024-04-29 03:08:02 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_NCHWc_add] Trial #178: GFLOPs: 154.3289. Time: 83.3943 us. Best GFLOPs: 235.7350
2024-04-29 03:08:02 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_NCHWc_add] Trial #179: GFLOPs: 127.1814. Time: 101.1951 us. Best GFLOPs: 235.7350
2024-04-29 03:08:02 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_NCHWc_add] Trial #180: GFLOPs: 104.7237. Time: 122.8962 us. Best GFLOPs: 235.7350
2024-04-29 03:08:02 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_NCHWc_add] Trial #181: GFLOPs: 133.4629. Time: 96.4324 us. Best GFLOPs: 235.7350
2024-04-29 03:08:02 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_NCHWc_add] Trial #182: GFLOPs: 152.0371. Time: 84.6513 us. Best GFLOPs: 235.7350
2024-04-29 03:08:02 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_NCHWc_add] Trial #183: GFLOPs: 127.7911. Time: 100.7123 us. Best GFLOPs: 235.7350
2024-04-29 03:08:02 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_NCHWc_add] Trial #184: GFLOPs: 139.3194. Time: 92.3787 us. Best GFLOPs: 235.7350
2024-04-29 03:08:02 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_NCHWc_add] Trial #185: GFLOPs: 166.2472. Time: 77.4157 us. Best GFLOPs: 235.7350
2024-04-29 03:08:02 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_NCHWc_add] Trial #186: GFLOPs: 165.9744. Time: 77.5429 us. Best GFLOPs: 235.7350
2024-04-29 03:08:02 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_NCHWc_add] Trial #187: GFLOPs: 125.0724. Time: 102.9016 us. Best GFLOPs: 235.7350
2024-04-29 03:08:02 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_NCHWc_add] Trial #188: GFLOPs: 122.8320. Time: 104.7785 us. Best GFLOPs: 235.7350
2024-04-29 03:08:02 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_NCHWc_add] Trial #189: GFLOPs: 154.5255. Time: 83.2882 us. Best GFLOPs: 235.7350
2024-04-29 03:08:02 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_NCHWc_add] Trial #190: GFLOPs: 0.9945. Time: 12941.9551 us. Best GFLOPs: 235.7350
2024-04-29 03:08:02 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_NCHWc_add] Trial #191: GFLOPs: 34.5615. Time: 372.3835 us. Best GFLOPs: 235.7350
2024-04-29 03:08:02 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_NCHWc_add] Trial #192: GFLOPs: 12.1323. Time: 1060.8145 us. Best GFLOPs: 235.7350
