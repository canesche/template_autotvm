2024-04-28 07:24:34 [INFO] [task_scheduler.cc:160] Initializing Task #4: "fused_nn_max_pool2d_1"
2024-04-28 07:24:34 [INFO] [task_scheduler.cc:35] 
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(2), T.int64(112), T.int64(112), T.int64(64)), "float32"), pool_max: T.Buffer((T.int64(1), T.int64(2), T.int64(56), T.int64(56), T.int64(64)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        for ax0, ax1, ax2, ax3, ax4, rv0, rv1 in T.grid(T.int64(1), T.int64(2), T.int64(56), T.int64(56), T.int64(64), T.int64(2), T.int64(2)):
            with T.block("pool_max"):
                v_ax0, v_ax1, v_ax2, v_ax3, v_ax4, v_rv0, v_rv1 = T.axis.remap("SSSSSRR", [ax0, ax1, ax2, ax3, ax4, rv0, rv1])
                T.reads(p0[v_ax0, v_ax1, v_ax2 * T.int64(2) + v_rv0, v_ax3 * T.int64(2) + v_rv1, v_ax4])
                T.writes(pool_max[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                T.block_attr({"schedule_rule": "meta_schedule.pool_max"})
                with T.init():
                    pool_max[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.float32(-3.4028234663852886e+38)
                pool_max[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.max(pool_max[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], p0[v_ax0, v_ax1, v_ax2 * T.int64(2) + v_rv0, v_ax3 * T.int64(2) + v_rv1, v_ax4])
2024-04-28 07:24:34 [INFO] [task_scheduler.cc:164] Total 3 design space(s) generated
2024-04-28 07:24:34 [INFO] [task_scheduler.cc:170] Design space #0:
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(2), T.int64(112), T.int64(112), T.int64(64)), "float32"), pool_max: T.Buffer((T.int64(1), T.int64(2), T.int64(56), T.int64(56), T.int64(64)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        with T.block("root"):
            T.reads()
            T.writes()
            T.block_attr({"meta_schedule.parallel": 768, "meta_schedule.unroll_explicit": 16, "meta_schedule.vectorize": 64})
            pool_max_rf = T.alloc_buffer((T.int64(1), T.int64(2), T.int64(56), T.int64(56), T.int64(64), T.int64(4)))
            for ax0, ax1, ax2, ax3, ax4, rv0_rv1_fused_0, rv0_rv1_fused_1 in T.grid(T.int64(1), T.int64(2), T.int64(56), T.int64(56), T.int64(64), T.int64(4), T.int64(1)):
                with T.block("pool_max_rf"):
                    vrv0_rv1_fused_0, v_ax0, v_ax1, v_ax2, v_ax3, v_ax4, vrv0_rv1_fused_1 = T.axis.remap("SSSSSSR", [rv0_rv1_fused_0, ax0, ax1, ax2, ax3, ax4, rv0_rv1_fused_1])
                    T.reads(p0[v_ax0, v_ax1, v_ax2 * T.int64(2) + (vrv0_rv1_fused_0 + vrv0_rv1_fused_1) // T.int64(2), v_ax3 * T.int64(2) + (vrv0_rv1_fused_0 + vrv0_rv1_fused_1) % T.int64(2), v_ax4])
                    T.writes(pool_max_rf[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4, vrv0_rv1_fused_0])
                    with T.init():
                        pool_max_rf[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4, vrv0_rv1_fused_0] = T.float32(-3.4028234663852886e+38)
                    pool_max_rf[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4, vrv0_rv1_fused_0] = T.max(pool_max_rf[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4, vrv0_rv1_fused_0], p0[v_ax0, v_ax1, v_ax2 * T.int64(2) + (vrv0_rv1_fused_0 + vrv0_rv1_fused_1) // T.int64(2), v_ax3 * T.int64(2) + (vrv0_rv1_fused_0 + vrv0_rv1_fused_1) % T.int64(2), v_ax4])
            for ax0, ax1, ax2, ax3, ax4, rv0_rv1_fused_0 in T.grid(T.int64(1), T.int64(2), T.int64(56), T.int64(56), T.int64(64), T.int64(4)):
                with T.block("pool_max"):
                    vrv0_rv1_fused_0, v_ax0, v_ax1, v_ax2, v_ax3, v_ax4 = T.axis.remap("RSSSSS", [rv0_rv1_fused_0, ax0, ax1, ax2, ax3, ax4])
                    T.reads(pool_max_rf[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4, vrv0_rv1_fused_0])
                    T.writes(pool_max[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                    T.block_attr({"meta_schedule.random_compute_producer": 1})
                    with T.init():
                        pool_max[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.float32(-3.4028234663852886e+38)
                    pool_max[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.max(pool_max[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], pool_max_rf[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4, vrv0_rv1_fused_0])
b0 = sch.get_block(name="pool_max", func_name="main")
b1 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b0, ann_key="schedule_rule")
l2, l3, l4, l5, l6, l7, l8 = sch.get_loops(block=b0)
l9 = sch.fuse(l7, l8, preserve_unit_iters=True)
v10, v11 = sch.sample_perfect_tile(loop=l9, n=2, max_innermost_factor=64, decision=[4, 1])
l12, l13 = sch.split(loop=l9, factors=[v10, v11], preserve_unit_iters=True)
b14 = sch.rfactor(loop=l12, factor_axis=5)
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.random_compute_producer", ann_val=1)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.vectorize", ann_val=64)
v15 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=1)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.unroll_explicit", ann_val=v15)
2024-04-28 07:24:34 [INFO] [task_scheduler.cc:170] Design space #1:
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(2), T.int64(112), T.int64(112), T.int64(64)), "float32"), pool_max: T.Buffer((T.int64(1), T.int64(2), T.int64(56), T.int64(56), T.int64(64)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        with T.block("root"):
            T.reads()
            T.writes()
            T.block_attr({"meta_schedule.parallel": 768, "meta_schedule.unroll_explicit": 16, "meta_schedule.vectorize": 64})
            pool_max_rf = T.alloc_buffer((T.int64(1), T.int64(2), T.int64(56), T.int64(56), T.int64(64), T.int64(1)))
            for ax0, ax1, ax2, ax3, ax4, rv0_rv1_fused_0, rv0_rv1_fused_1 in T.grid(T.int64(1), T.int64(2), T.int64(56), T.int64(56), T.int64(64), T.int64(4), T.int64(1)):
                with T.block("pool_max_rf"):
                    vrv0_rv1_fused_1, v_ax0, v_ax1, v_ax2, v_ax3, v_ax4, vrv0_rv1_fused_0 = T.axis.remap("SSSSSSR", [rv0_rv1_fused_1, ax0, ax1, ax2, ax3, ax4, rv0_rv1_fused_0])
                    T.reads(p0[v_ax0, v_ax1, v_ax2 * T.int64(2) + (vrv0_rv1_fused_0 + vrv0_rv1_fused_1) // T.int64(2), v_ax3 * T.int64(2) + (vrv0_rv1_fused_0 + vrv0_rv1_fused_1) % T.int64(2), v_ax4])
                    T.writes(pool_max_rf[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4, vrv0_rv1_fused_1])
                    with T.init():
                        pool_max_rf[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4, vrv0_rv1_fused_1] = T.float32(-3.4028234663852886e+38)
                    pool_max_rf[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4, vrv0_rv1_fused_1] = T.max(pool_max_rf[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4, vrv0_rv1_fused_1], p0[v_ax0, v_ax1, v_ax2 * T.int64(2) + (vrv0_rv1_fused_0 + vrv0_rv1_fused_1) // T.int64(2), v_ax3 * T.int64(2) + (vrv0_rv1_fused_0 + vrv0_rv1_fused_1) % T.int64(2), v_ax4])
            for ax0, ax1, ax2, ax3, ax4, rv0_rv1_fused_1 in T.grid(T.int64(1), T.int64(2), T.int64(56), T.int64(56), T.int64(64), T.int64(1)):
                with T.block("pool_max"):
                    vrv0_rv1_fused_1, v_ax0, v_ax1, v_ax2, v_ax3, v_ax4 = T.axis.remap("RSSSSS", [rv0_rv1_fused_1, ax0, ax1, ax2, ax3, ax4])
                    T.reads(pool_max_rf[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4, vrv0_rv1_fused_1])
                    T.writes(pool_max[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                    T.block_attr({"meta_schedule.random_compute_producer": 1})
                    with T.init():
                        pool_max[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.float32(-3.4028234663852886e+38)
                    pool_max[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.max(pool_max[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], pool_max_rf[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4, vrv0_rv1_fused_1])
b0 = sch.get_block(name="pool_max", func_name="main")
b1 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b0, ann_key="schedule_rule")
l2, l3, l4, l5, l6, l7, l8 = sch.get_loops(block=b0)
l9 = sch.fuse(l7, l8, preserve_unit_iters=True)
v10, v11 = sch.sample_perfect_tile(loop=l9, n=2, max_innermost_factor=64, decision=[4, 1])
l12, l13 = sch.split(loop=l9, factors=[v10, v11], preserve_unit_iters=True)
b14 = sch.rfactor(loop=l13, factor_axis=5)
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.random_compute_producer", ann_val=1)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.vectorize", ann_val=64)
v15 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=1)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.unroll_explicit", ann_val=v15)
2024-04-28 07:24:34 [INFO] [task_scheduler.cc:170] Design space #2:
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(2), T.int64(112), T.int64(112), T.int64(64)), "float32"), pool_max: T.Buffer((T.int64(1), T.int64(2), T.int64(56), T.int64(56), T.int64(64)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        with T.block("root"):
            T.reads()
            T.writes()
            T.block_attr({"meta_schedule.parallel": 768, "meta_schedule.unroll_explicit": 512, "meta_schedule.vectorize": 64})
            for ax0, ax1, ax2, ax3, ax4, rv0, rv1 in T.grid(T.int64(1), T.int64(2), T.int64(56), T.int64(56), T.int64(64), T.int64(2), T.int64(2)):
                with T.block("pool_max"):
                    v_ax0, v_ax1, v_ax2, v_ax3, v_ax4, v_rv0, v_rv1 = T.axis.remap("SSSSSRR", [ax0, ax1, ax2, ax3, ax4, rv0, rv1])
                    T.reads(p0[v_ax0, v_ax1, v_ax2 * T.int64(2) + v_rv0, v_ax3 * T.int64(2) + v_rv1, v_ax4])
                    T.writes(pool_max[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                    with T.init():
                        pool_max[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.float32(-3.4028234663852886e+38)
                    pool_max[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.max(pool_max[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], p0[v_ax0, v_ax1, v_ax2 * T.int64(2) + v_rv0, v_ax3 * T.int64(2) + v_rv1, v_ax4])
b0 = sch.get_block(name="pool_max", func_name="main")
b1 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b0, ann_key="schedule_rule")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.vectorize", ann_val=64)
v2 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.unroll_explicit", ann_val=v2)
2024-04-28 07:32:39 [INFO] [evolutionary_search.cc:713] Generating candidates......
2024-04-28 07:32:39 [INFO] [evolutionary_search.cc:715] Picked top 0 candidate(s) from database
2024-04-28 07:32:40 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x67733e8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x9b675a8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x35e79d8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x4e0a838)]: 0 failure(s)
2024-04-28 07:32:40 [INFO] [evolutionary_search.cc:723] Sampled 512 candidate(s)
2024-04-28 07:32:41 [INFO] [evolutionary_search.cc:621] Evolve iter #0 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x67733e8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x9b675a8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x35e79d8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x4e0a838)]: 0 failure(s)
2024-04-28 07:32:42 [INFO] [evolutionary_search.cc:621] Evolve iter #1 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x67733e8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x9b675a8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x35e79d8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x4e0a838)]: 0 failure(s)
2024-04-28 07:32:43 [INFO] [evolutionary_search.cc:621] Evolve iter #2 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x67733e8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x9b675a8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x35e79d8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x4e0a838)]: 0 failure(s)
2024-04-28 07:32:45 [INFO] [evolutionary_search.cc:621] Evolve iter #3 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x67733e8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x9b675a8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x35e79d8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x4e0a838)]: 0 failure(s)
2024-04-28 07:32:46 [INFO] [evolutionary_search.cc:649] Scores of the best 59 candidates:
[1 : 16]:	0.9847  0.9684  0.9588  0.9364  0.9129  0.8906  0.8891  0.8765  0.8659  0.8618  0.8527  0.8409  0.8038  0.7803  0.7382  0.7365
[17 : 32]:	0.7356  0.7074  0.6827  0.6787  0.6707  0.6475  0.5892  0.5243  0.4910  0.4288  0.4187  0.4175  0.4137  0.4004  0.3935  0.3876
[33 : 48]:	0.3510  0.3386  0.3245  0.3180  0.2854  0.2366  0.2352  0.2267  0.2125  0.2066  0.1865  0.1852  0.1783  0.1779  0.1642  0.1519
[49 : 59]:	0.1281  0.1206  0.1182  0.1076  0.0986  0.0762  0.0699  0.0623  0.0579  0.0341  0.0283
2024-04-28 07:32:46 [INFO] [evolutionary_search.cc:727] Got 59 candidate(s) with evolutionary search
2024-04-28 07:32:46 [INFO] [evolutionary_search.cc:730] Sending 59 candidates(s) for measurement
2024-04-28 08:27:08 [INFO] [task_scheduler.cc:131] [Task #4: fused_nn_max_pool2d_1] Trial #1: GFLOPs: 9.5185. Time: 168.6858 us. Best GFLOPs: 9.5185
2024-04-28 08:27:08 [INFO] [task_scheduler.cc:131] [Task #4: fused_nn_max_pool2d_1] Trial #2: GFLOPs: 10.9231. Time: 146.9938 us. Best GFLOPs: 10.9231
2024-04-28 08:27:08 [INFO] [task_scheduler.cc:131] [Task #4: fused_nn_max_pool2d_1] Trial #3: GFLOPs: 11.1737. Time: 143.6980 us. Best GFLOPs: 11.1737
2024-04-28 08:27:08 [INFO] [task_scheduler.cc:131] [Task #4: fused_nn_max_pool2d_1] Trial #4: GFLOPs: 45.4842. Time: 35.3009 us. Best GFLOPs: 45.4842
2024-04-28 08:27:08 [INFO] [task_scheduler.cc:131] [Task #4: fused_nn_max_pool2d_1] Trial #5: GFLOPs: 17.6303. Time: 91.0722 us. Best GFLOPs: 45.4842
2024-04-28 08:27:08 [INFO] [task_scheduler.cc:131] [Task #4: fused_nn_max_pool2d_1] Trial #6: GFLOPs: 6.5172. Time: 246.3668 us. Best GFLOPs: 45.4842
2024-04-28 08:27:08 [INFO] [task_scheduler.cc:131] [Task #4: fused_nn_max_pool2d_1] Trial #7: GFLOPs: 49.9569. Time: 32.1403 us. Best GFLOPs: 49.9569
2024-04-28 08:27:08 [INFO] [task_scheduler.cc:131] [Task #4: fused_nn_max_pool2d_1] Trial #8: GFLOPs: 11.9793. Time: 134.0341 us. Best GFLOPs: 49.9569
2024-04-28 08:27:08 [INFO] [task_scheduler.cc:131] [Task #4: fused_nn_max_pool2d_1] Trial #9: GFLOPs: 93.6109. Time: 17.1522 us. Best GFLOPs: 93.6109
2024-04-28 08:27:08 [INFO] [task_scheduler.cc:131] [Task #4: fused_nn_max_pool2d_1] Trial #10: GFLOPs: 0.8553. Time: 1877.1669 us. Best GFLOPs: 93.6109
2024-04-28 08:27:08 [INFO] [task_scheduler.cc:131] [Task #4: fused_nn_max_pool2d_1] Trial #11: GFLOPs: 39.7323. Time: 40.4112 us. Best GFLOPs: 93.6109
2024-04-28 08:27:08 [INFO] [task_scheduler.cc:131] [Task #4: fused_nn_max_pool2d_1] Trial #12: GFLOPs: 14.5576. Time: 110.2952 us. Best GFLOPs: 93.6109
2024-04-28 08:27:08 [INFO] [task_scheduler.cc:131] [Task #4: fused_nn_max_pool2d_1] Trial #13: GFLOPs: 47.5694. Time: 33.7535 us. Best GFLOPs: 93.6109
2024-04-28 08:27:08 [INFO] [task_scheduler.cc:131] [Task #4: fused_nn_max_pool2d_1] Trial #14: GFLOPs: 43.6294. Time: 36.8016 us. Best GFLOPs: 93.6109
2024-04-28 08:27:08 [INFO] [task_scheduler.cc:131] [Task #4: fused_nn_max_pool2d_1] Trial #15: GFLOPs: 11.9977. Time: 133.8287 us. Best GFLOPs: 93.6109
2024-04-28 08:27:08 [INFO] [task_scheduler.cc:131] [Task #4: fused_nn_max_pool2d_1] Trial #16: GFLOPs: 23.9369. Time: 67.0777 us. Best GFLOPs: 93.6109
2024-04-28 08:27:08 [INFO] [task_scheduler.cc:131] [Task #4: fused_nn_max_pool2d_1] Trial #17: GFLOPs: 98.1330. Time: 16.3618 us. Best GFLOPs: 98.1330
2024-04-28 08:27:08 [INFO] [task_scheduler.cc:131] [Task #4: fused_nn_max_pool2d_1] Trial #18: GFLOPs: 5.4815. Time: 292.9173 us. Best GFLOPs: 98.1330
2024-04-28 08:27:08 [INFO] [task_scheduler.cc:131] [Task #4: fused_nn_max_pool2d_1] Trial #19: GFLOPs: 12.0468. Time: 133.2826 us. Best GFLOPs: 98.1330
2024-04-28 08:27:08 [INFO] [task_scheduler.cc:131] [Task #4: fused_nn_max_pool2d_1] Trial #20: GFLOPs: 10.7333. Time: 149.5938 us. Best GFLOPs: 98.1330
2024-04-28 08:27:08 [INFO] [task_scheduler.cc:131] [Task #4: fused_nn_max_pool2d_1] Trial #21: GFLOPs: 22.7235. Time: 70.6595 us. Best GFLOPs: 98.1330
2024-04-28 08:27:08 [INFO] [task_scheduler.cc:131] [Task #4: fused_nn_max_pool2d_1] Trial #22: GFLOPs: 27.7819. Time: 57.7943 us. Best GFLOPs: 98.1330
2024-04-28 08:27:08 [INFO] [task_scheduler.cc:131] [Task #4: fused_nn_max_pool2d_1] Trial #23: GFLOPs: 31.5123. Time: 50.9525 us. Best GFLOPs: 98.1330
2024-04-28 08:27:08 [INFO] [task_scheduler.cc:131] [Task #4: fused_nn_max_pool2d_1] Trial #24: GFLOPs: 8.7498. Time: 183.5043 us. Best GFLOPs: 98.1330
2024-04-28 08:27:08 [INFO] [task_scheduler.cc:131] [Task #4: fused_nn_max_pool2d_1] Trial #25: GFLOPs: 42.4172. Time: 37.8533 us. Best GFLOPs: 98.1330
2024-04-28 08:27:08 [INFO] [task_scheduler.cc:131] [Task #4: fused_nn_max_pool2d_1] Trial #26: GFLOPs: 0.4630. Time: 3467.6958 us. Best GFLOPs: 98.1330
2024-04-28 08:27:08 [INFO] [task_scheduler.cc:131] [Task #4: fused_nn_max_pool2d_1] Trial #27: GFLOPs: 8.2716. Time: 194.1141 us. Best GFLOPs: 98.1330
2024-04-28 08:27:08 [INFO] [task_scheduler.cc:131] [Task #4: fused_nn_max_pool2d_1] Trial #28: GFLOPs: 1.4556. Time: 1103.0788 us. Best GFLOPs: 98.1330
2024-04-28 08:27:08 [INFO] [task_scheduler.cc:131] [Task #4: fused_nn_max_pool2d_1] Trial #29: GFLOPs: 1.3072. Time: 1228.2551 us. Best GFLOPs: 98.1330
2024-04-28 08:27:08 [INFO] [task_scheduler.cc:131] [Task #4: fused_nn_max_pool2d_1] Trial #30: GFLOPs: 49.7062. Time: 32.3024 us. Best GFLOPs: 98.1330
2024-04-28 08:27:08 [INFO] [task_scheduler.cc:131] [Task #4: fused_nn_max_pool2d_1] Trial #31: GFLOPs: 7.1802. Time: 223.6202 us. Best GFLOPs: 98.1330
2024-04-28 08:27:08 [INFO] [task_scheduler.cc:131] [Task #4: fused_nn_max_pool2d_1] Trial #32: GFLOPs: 11.0760. Time: 144.9645 us. Best GFLOPs: 98.1330
2024-04-28 08:27:08 [INFO] [task_scheduler.cc:131] [Task #4: fused_nn_max_pool2d_1] Trial #33: GFLOPs: 8.7052. Time: 184.4458 us. Best GFLOPs: 98.1330
2024-04-28 08:27:08 [INFO] [task_scheduler.cc:131] [Task #4: fused_nn_max_pool2d_1] Trial #34: GFLOPs: 32.5040. Time: 49.3979 us. Best GFLOPs: 98.1330
2024-04-28 08:27:08 [INFO] [task_scheduler.cc:131] [Task #4: fused_nn_max_pool2d_1] Trial #35: GFLOPs: 1.2272. Time: 1308.3877 us. Best GFLOPs: 98.1330
2024-04-28 08:27:08 [INFO] [task_scheduler.cc:131] [Task #4: fused_nn_max_pool2d_1] Trial #36: GFLOPs: 1.2060. Time: 1331.3929 us. Best GFLOPs: 98.1330
2024-04-28 08:27:08 [INFO] [task_scheduler.cc:131] [Task #4: fused_nn_max_pool2d_1] Trial #37: GFLOPs: 17.4020. Time: 92.2673 us. Best GFLOPs: 98.1330
2024-04-28 08:27:08 [INFO] [task_scheduler.cc:131] [Task #4: fused_nn_max_pool2d_1] Trial #38: GFLOPs: 19.7874. Time: 81.1440 us. Best GFLOPs: 98.1330
2024-04-28 08:27:08 [INFO] [task_scheduler.cc:131] [Task #4: fused_nn_max_pool2d_1] Trial #39: GFLOPs: 30.3687. Time: 52.8713 us. Best GFLOPs: 98.1330
2024-04-28 08:27:08 [INFO] [task_scheduler.cc:131] [Task #4: fused_nn_max_pool2d_1] Trial #40: GFLOPs: 37.9802. Time: 42.2755 us. Best GFLOPs: 98.1330
2024-04-28 08:27:08 [INFO] [task_scheduler.cc:131] [Task #4: fused_nn_max_pool2d_1] Trial #41: GFLOPs: 49.9052. Time: 32.1736 us. Best GFLOPs: 98.1330
2024-04-28 08:27:08 [INFO] [task_scheduler.cc:131] [Task #4: fused_nn_max_pool2d_1] Trial #42: GFLOPs: 9.2571. Time: 173.4489 us. Best GFLOPs: 98.1330
2024-04-28 08:27:08 [INFO] [task_scheduler.cc:131] [Task #4: fused_nn_max_pool2d_1] Trial #43: GFLOPs: 47.4375. Time: 33.8473 us. Best GFLOPs: 98.1330
2024-04-28 08:27:08 [INFO] [task_scheduler.cc:131] [Task #4: fused_nn_max_pool2d_1] Trial #44: GFLOPs: 7.2745. Time: 220.7218 us. Best GFLOPs: 98.1330
2024-04-28 08:27:08 [INFO] [task_scheduler.cc:131] [Task #4: fused_nn_max_pool2d_1] Trial #45: GFLOPs: 1.6550. Time: 970.1635 us. Best GFLOPs: 98.1330
2024-04-28 08:27:08 [INFO] [task_scheduler.cc:131] [Task #4: fused_nn_max_pool2d_1] Trial #46: GFLOPs: 42.6875. Time: 37.6136 us. Best GFLOPs: 98.1330
2024-04-28 08:27:08 [INFO] [task_scheduler.cc:131] [Task #4: fused_nn_max_pool2d_1] Trial #47: GFLOPs: 17.1389. Time: 93.6835 us. Best GFLOPs: 98.1330
2024-04-28 08:27:08 [INFO] [task_scheduler.cc:121] [Task #4: fused_nn_max_pool2d_1] Trial #48: Error in building:
LocalBuilder: Timeout, killed after 30.0 seconds
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(2), T.int64(112), T.int64(112), T.int64(64)), "float32"), pool_max: T.Buffer((T.int64(1), T.int64(2), T.int64(56), T.int64(56), T.int64(64)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        pool_max_rf = T.alloc_buffer((T.int64(1), T.int64(2), T.int64(56), T.int64(56), T.int64(64), T.int64(4)))
        for ax0_ax1_ax2_ax3_fused in T.parallel(T.int64(6272), annotations={"pragma_auto_unroll_max_step": 512, "pragma_unroll_explicit": 1}):
            for ax4, rv0_rv1_fused_0 in T.grid(T.int64(64), T.int64(4)):
                with T.block("pool_max_rf_init"):
                    vrv0_rv1_fused_0 = T.axis.spatial(T.int64(4), rv0_rv1_fused_0)
                    v_ax0 = T.axis.spatial(T.int64(1), T.int64(0))
                    v_ax1 = T.axis.spatial(T.int64(2), ax0_ax1_ax2_ax3_fused // T.int64(3136))
                    v_ax2 = T.axis.spatial(T.int64(56), ax0_ax1_ax2_ax3_fused % T.int64(3136) // T.int64(56))
                    v_ax3 = T.axis.spatial(T.int64(56), ax0_ax1_ax2_ax3_fused % T.int64(56))
                    v_ax4 = T.axis.spatial(T.int64(64), ax4)
                    T.reads()
                    T.writes(pool_max_rf[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4, vrv0_rv1_fused_0])
                    pool_max_rf[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4, vrv0_rv1_fused_0] = T.float32(-3.4028234663852886e+38)
                for rv0_rv1_fused_1 in range(T.int64(1)):
                    with T.block("pool_max_rf_update"):
                        vrv0_rv1_fused_0 = T.axis.spatial(T.int64(4), rv0_rv1_fused_0)
                        v_ax0 = T.axis.spatial(T.int64(1), T.int64(0))
                        v_ax1 = T.axis.spatial(T.int64(2), ax0_ax1_ax2_ax3_fused // T.int64(3136))
                        v_ax2 = T.axis.spatial(T.int64(56), ax0_ax1_ax2_ax3_fused % T.int64(3136) // T.int64(56))
                        v_ax3 = T.axis.spatial(T.int64(56), ax0_ax1_ax2_ax3_fused % T.int64(56))
                        v_ax4, vrv0_rv1_fused_1 = T.axis.remap("SR", [ax4, rv0_rv1_fused_1])
                        T.reads(pool_max_rf[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4, vrv0_rv1_fused_0], p0[v_ax0, v_ax1, v_ax2 * T.int64(2) + (vrv0_rv1_fused_0 + vrv0_rv1_fused_1) // T.int64(2), v_ax3 * T.int64(2) + (vrv0_rv1_fused_0 + vrv0_rv1_fused_1) % T.int64(2), v_ax4])
                        T.writes(pool_max_rf[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4, vrv0_rv1_fused_0])
                        pool_max_rf[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4, vrv0_rv1_fused_0] = T.max(pool_max_rf[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4, vrv0_rv1_fused_0], p0[v_ax0, v_ax1, v_ax2 * T.int64(2) + (vrv0_rv1_fused_0 + vrv0_rv1_fused_1) // T.int64(2), v_ax3 * T.int64(2) + (vrv0_rv1_fused_0 + vrv0_rv1_fused_1) % T.int64(2), v_ax4])
        for ax0_ax1_ax2_ax3_fused in T.parallel(T.int64(6272), annotations={"pragma_auto_unroll_max_step": 512, "pragma_unroll_explicit": 1}):
            for ax4 in range(T.int64(64)):
                with T.block("pool_max_init"):
                    v_ax0 = T.axis.spatial(T.int64(1), T.int64(0))
                    v_ax1 = T.axis.spatial(T.int64(2), ax0_ax1_ax2_ax3_fused // T.int64(3136))
                    v_ax2 = T.axis.spatial(T.int64(56), ax0_ax1_ax2_ax3_fused % T.int64(3136) // T.int64(56))
                    v_ax3 = T.axis.spatial(T.int64(56), ax0_ax1_ax2_ax3_fused % T.int64(56))
                    v_ax4 = T.axis.spatial(T.int64(64), ax4)
                    T.reads()
                    T.writes(pool_max[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                    T.block_attr({"meta_schedule.random_compute_producer": 1})
                    pool_max[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.float32(-3.4028234663852886e+38)
                for rv0_rv1_fused_0 in range(T.int64(4)):
                    with T.block("pool_max_update"):
                        vrv0_rv1_fused_0 = T.axis.reduce(T.int64(4), rv0_rv1_fused_0)
                        v_ax0 = T.axis.spatial(T.int64(1), T.int64(0))
                        v_ax1 = T.axis.spatial(T.int64(2), ax0_ax1_ax2_ax3_fused // T.int64(3136))
                        v_ax2 = T.axis.spatial(T.int64(56), ax0_ax1_ax2_ax3_fused % T.int64(3136) // T.int64(56))
                        v_ax3 = T.axis.spatial(T.int64(56), ax0_ax1_ax2_ax3_fused % T.int64(56))
                        v_ax4 = T.axis.spatial(T.int64(64), ax4)
                        T.reads(pool_max[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], pool_max_rf[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4, vrv0_rv1_fused_0])
                        T.writes(pool_max[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                        T.block_attr({"meta_schedule.random_compute_producer": 1})
                        pool_max[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.max(pool_max[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], pool_max_rf[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4, vrv0_rv1_fused_0])
b0 = sch.get_block(name="pool_max", func_name="main")
b1 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b0, ann_key="schedule_rule")
l2, l3, l4, l5, l6, l7, l8 = sch.get_loops(block=b0)
l9 = sch.fuse(l7, l8, preserve_unit_iters=True)
v10, v11 = sch.sample_perfect_tile(loop=l9, n=2, max_innermost_factor=64, decision=[4, 1])
l12, l13 = sch.split(loop=l9, factors=[v10, v11], preserve_unit_iters=True)
b14 = sch.rfactor(loop=l12, factor_axis=5)
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.random_compute_producer", ann_val=1)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.vectorize", ann_val=64)
v15 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.unroll_explicit", ann_val=v15)
sch.enter_postproc()
b16 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b16, ann_key="meta_schedule.parallel")
sch.unannotate(block_or_loop=b16, ann_key="meta_schedule.vectorize")
sch.unannotate(block_or_loop=b16, ann_key="meta_schedule.unroll_explicit")
b17, b18 = sch.get_child_blocks(b16)
l19, l20, l21, l22, l23, l24, l25 = sch.get_loops(block=b17)
l26 = sch.fuse(l19, l20, l21, l22, preserve_unit_iters=True)
sch.parallel(loop=l26)
sch.annotate(block_or_loop=l26, ann_key="pragma_auto_unroll_max_step", ann_val=512)
sch.annotate(block_or_loop=l26, ann_key="pragma_unroll_explicit", ann_val=1)
l27, l28, l29, l30, l31, l32 = sch.get_loops(block=b18)
l33 = sch.fuse(l27, l28, l29, l30, preserve_unit_iters=True)
sch.parallel(loop=l33)
sch.annotate(block_or_loop=l33, ann_key="pragma_auto_unroll_max_step", ann_val=512)
sch.annotate(block_or_loop=l33, ann_key="pragma_unroll_explicit", ann_val=1)
b34 = sch.get_block(name="pool_max_rf", func_name="main")
l35, l36, l37, l38 = sch.get_loops(block=b34)
b39 = sch.decompose_reduction(block=b34, loop=l38)
b40 = sch.get_block(name="pool_max", func_name="main")
l41, l42, l43 = sch.get_loops(block=b40)
b44 = sch.decompose_reduction(block=b40, loop=l43)
2024-04-28 08:27:08 [INFO] [task_scheduler.cc:121] [Task #4: fused_nn_max_pool2d_1] Trial #49: Error in building:
LocalBuilder: Timeout, killed after 30.0 seconds
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(2), T.int64(112), T.int64(112), T.int64(64)), "float32"), pool_max: T.Buffer((T.int64(1), T.int64(2), T.int64(56), T.int64(56), T.int64(64)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        pool_max_rf = T.alloc_buffer((T.int64(1), T.int64(2), T.int64(56), T.int64(56), T.int64(64), T.int64(2)))
        for ax0_ax1_fused in T.parallel(T.int64(2), annotations={"pragma_auto_unroll_max_step": 512, "pragma_unroll_explicit": 1}):
            for ax2, ax3, ax4, rv0_rv1_fused_0 in T.grid(T.int64(56), T.int64(56), T.int64(64), T.int64(2)):
                with T.block("pool_max_rf_init"):
                    vrv0_rv1_fused_0 = T.axis.spatial(T.int64(2), rv0_rv1_fused_0)
                    v_ax0 = T.axis.spatial(T.int64(1), T.int64(0))
                    v_ax1, v_ax2, v_ax3, v_ax4 = T.axis.remap("SSSS", [ax0_ax1_fused, ax2, ax3, ax4])
                    T.reads()
                    T.writes(pool_max_rf[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4, vrv0_rv1_fused_0])
                    pool_max_rf[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4, vrv0_rv1_fused_0] = T.float32(-3.4028234663852886e+38)
                for rv0_rv1_fused_1 in range(T.int64(2)):
                    with T.block("pool_max_rf_update"):
                        vrv0_rv1_fused_0 = T.axis.spatial(T.int64(2), rv0_rv1_fused_0)
                        v_ax0 = T.axis.spatial(T.int64(1), T.int64(0))
                        v_ax1, v_ax2, v_ax3, v_ax4, vrv0_rv1_fused_1 = T.axis.remap("SSSSR", [ax0_ax1_fused, ax2, ax3, ax4, rv0_rv1_fused_1])
                        T.reads(pool_max_rf[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4, vrv0_rv1_fused_0], p0[v_ax0, v_ax1, v_ax2 * T.int64(2) + (vrv0_rv1_fused_0 * T.int64(2) + vrv0_rv1_fused_1) // T.int64(2), v_ax3 * T.int64(2) + (vrv0_rv1_fused_0 * T.int64(2) + vrv0_rv1_fused_1) % T.int64(2), v_ax4])
                        T.writes(pool_max_rf[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4, vrv0_rv1_fused_0])
                        pool_max_rf[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4, vrv0_rv1_fused_0] = T.max(pool_max_rf[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4, vrv0_rv1_fused_0], p0[v_ax0, v_ax1, v_ax2 * T.int64(2) + (vrv0_rv1_fused_0 * T.int64(2) + vrv0_rv1_fused_1) // T.int64(2), v_ax3 * T.int64(2) + (vrv0_rv1_fused_0 * T.int64(2) + vrv0_rv1_fused_1) % T.int64(2), v_ax4])
        for ax0_ax1_fused in T.parallel(T.int64(2), annotations={"pragma_auto_unroll_max_step": 512, "pragma_unroll_explicit": 1}):
            for ax2, ax3, ax4 in T.grid(T.int64(56), T.int64(56), T.int64(64)):
                with T.block("pool_max_init"):
                    v_ax0 = T.axis.spatial(T.int64(1), T.int64(0))
                    v_ax1, v_ax2, v_ax3, v_ax4 = T.axis.remap("SSSS", [ax0_ax1_fused, ax2, ax3, ax4])
                    T.reads()
                    T.writes(pool_max[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                    T.block_attr({"meta_schedule.random_compute_producer": 1})
                    pool_max[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.float32(-3.4028234663852886e+38)
                for rv0_rv1_fused_0 in range(T.int64(2)):
                    with T.block("pool_max_update"):
                        vrv0_rv1_fused_0 = T.axis.reduce(T.int64(2), rv0_rv1_fused_0)
                        v_ax0 = T.axis.spatial(T.int64(1), T.int64(0))
                        v_ax1, v_ax2, v_ax3, v_ax4 = T.axis.remap("SSSS", [ax0_ax1_fused, ax2, ax3, ax4])
                        T.reads(pool_max[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], pool_max_rf[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4, vrv0_rv1_fused_0])
                        T.writes(pool_max[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                        T.block_attr({"meta_schedule.random_compute_producer": 1})
                        pool_max[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.max(pool_max[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], pool_max_rf[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4, vrv0_rv1_fused_0])
b0 = sch.get_block(name="pool_max", func_name="main")
b1 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b0, ann_key="schedule_rule")
l2, l3, l4, l5, l6, l7, l8 = sch.get_loops(block=b0)
l9 = sch.fuse(l7, l8, preserve_unit_iters=True)
v10, v11 = sch.sample_perfect_tile(loop=l9, n=2, max_innermost_factor=64, decision=[2, 2])
l12, l13 = sch.split(loop=l9, factors=[v10, v11], preserve_unit_iters=True)
b14 = sch.rfactor(loop=l12, factor_axis=5)
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.random_compute_producer", ann_val=1)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.parallel", ann_val=1)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.vectorize", ann_val=64)
v15 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.unroll_explicit", ann_val=v15)
sch.enter_postproc()
b16 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b16, ann_key="meta_schedule.parallel")
sch.unannotate(block_or_loop=b16, ann_key="meta_schedule.vectorize")
sch.unannotate(block_or_loop=b16, ann_key="meta_schedule.unroll_explicit")
b17, b18 = sch.get_child_blocks(b16)
l19, l20, l21, l22, l23, l24, l25 = sch.get_loops(block=b17)
l26 = sch.fuse(l19, l20, preserve_unit_iters=True)
sch.parallel(loop=l26)
sch.annotate(block_or_loop=l26, ann_key="pragma_auto_unroll_max_step", ann_val=512)
sch.annotate(block_or_loop=l26, ann_key="pragma_unroll_explicit", ann_val=1)
l27, l28, l29, l30, l31, l32 = sch.get_loops(block=b18)
l33 = sch.fuse(l27, l28, preserve_unit_iters=True)
sch.parallel(loop=l33)
sch.annotate(block_or_loop=l33, ann_key="pragma_auto_unroll_max_step", ann_val=512)
sch.annotate(block_or_loop=l33, ann_key="pragma_unroll_explicit", ann_val=1)
b34 = sch.get_block(name="pool_max_rf", func_name="main")
l35, l36, l37, l38, l39, l40 = sch.get_loops(block=b34)
b41 = sch.decompose_reduction(block=b34, loop=l40)
b42 = sch.get_block(name="pool_max", func_name="main")
l43, l44, l45, l46, l47 = sch.get_loops(block=b42)
b48 = sch.decompose_reduction(block=b42, loop=l47)
2024-04-28 08:27:08 [INFO] [task_scheduler.cc:131] [Task #4: fused_nn_max_pool2d_1] Trial #50: GFLOPs: 42.3765. Time: 37.8897 us. Best GFLOPs: 98.1330
2024-04-28 08:27:08 [INFO] [task_scheduler.cc:131] [Task #4: fused_nn_max_pool2d_1] Trial #51: GFLOPs: 19.1048. Time: 84.0435 us. Best GFLOPs: 98.1330
2024-04-28 08:27:08 [INFO] [task_scheduler.cc:131] [Task #4: fused_nn_max_pool2d_1] Trial #52: GFLOPs: 49.5277. Time: 32.4189 us. Best GFLOPs: 98.1330
2024-04-28 08:27:08 [INFO] [task_scheduler.cc:131] [Task #4: fused_nn_max_pool2d_1] Trial #53: GFLOPs: 98.1672. Time: 16.3561 us. Best GFLOPs: 98.1672
2024-04-28 08:27:08 [INFO] [task_scheduler.cc:131] [Task #4: fused_nn_max_pool2d_1] Trial #54: GFLOPs: 9.0591. Time: 177.2405 us. Best GFLOPs: 98.1672
2024-04-28 08:27:08 [INFO] [task_scheduler.cc:131] [Task #4: fused_nn_max_pool2d_1] Trial #55: GFLOPs: 42.0900. Time: 38.1476 us. Best GFLOPs: 98.1672
2024-04-28 08:27:08 [INFO] [task_scheduler.cc:131] [Task #4: fused_nn_max_pool2d_1] Trial #56: GFLOPs: 2.4505. Time: 655.2222 us. Best GFLOPs: 98.1672
2024-04-28 08:27:08 [INFO] [task_scheduler.cc:131] [Task #4: fused_nn_max_pool2d_1] Trial #57: GFLOPs: 80.8856. Time: 19.8506 us. Best GFLOPs: 98.1672
2024-04-28 08:27:08 [INFO] [task_scheduler.cc:131] [Task #4: fused_nn_max_pool2d_1] Trial #58: GFLOPs: 7.3619. Time: 218.0993 us. Best GFLOPs: 98.1672
2024-04-28 08:27:08 [INFO] [task_scheduler.cc:131] [Task #4: fused_nn_max_pool2d_1] Trial #59: GFLOPs: 22.1067. Time: 72.6309 us. Best GFLOPs: 98.1672
