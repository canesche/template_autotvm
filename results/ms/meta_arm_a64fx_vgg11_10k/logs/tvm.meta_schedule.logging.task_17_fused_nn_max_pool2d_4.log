2024-04-28 07:25:12 [INFO] [task_scheduler.cc:160] Initializing Task #17: "fused_nn_max_pool2d_4"
2024-04-28 07:25:12 [INFO] [task_scheduler.cc:35] 
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(32), T.int64(14), T.int64(14), T.int64(16)), "float32"), pool_max: T.Buffer((T.int64(1), T.int64(32), T.int64(7), T.int64(7), T.int64(16)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        for ax0, ax1, ax2, ax3, ax4, rv0, rv1 in T.grid(T.int64(1), T.int64(32), T.int64(7), T.int64(7), T.int64(16), T.int64(2), T.int64(2)):
            with T.block("pool_max"):
                v_ax0, v_ax1, v_ax2, v_ax3, v_ax4, v_rv0, v_rv1 = T.axis.remap("SSSSSRR", [ax0, ax1, ax2, ax3, ax4, rv0, rv1])
                T.reads(p0[v_ax0, v_ax1, v_ax2 * T.int64(2) + v_rv0, v_ax3 * T.int64(2) + v_rv1, v_ax4])
                T.writes(pool_max[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                T.block_attr({"schedule_rule": "meta_schedule.pool_max"})
                with T.init():
                    pool_max[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.float32(-3.4028234663852886e+38)
                pool_max[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.max(pool_max[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], p0[v_ax0, v_ax1, v_ax2 * T.int64(2) + v_rv0, v_ax3 * T.int64(2) + v_rv1, v_ax4])
2024-04-28 07:25:12 [INFO] [task_scheduler.cc:164] Total 3 design space(s) generated
2024-04-28 07:25:12 [INFO] [task_scheduler.cc:170] Design space #0:
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(32), T.int64(14), T.int64(14), T.int64(16)), "float32"), pool_max: T.Buffer((T.int64(1), T.int64(32), T.int64(7), T.int64(7), T.int64(16)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        with T.block("root"):
            T.reads()
            T.writes()
            T.block_attr({"meta_schedule.parallel": 768, "meta_schedule.unroll_explicit": 512, "meta_schedule.vectorize": 64})
            pool_max_rf = T.alloc_buffer((T.int64(1), T.int64(32), T.int64(7), T.int64(7), T.int64(16), T.int64(1)))
            for ax0, ax1, ax2, ax3, ax4, rv0_rv1_fused_0, rv0_rv1_fused_1 in T.grid(T.int64(1), T.int64(32), T.int64(7), T.int64(7), T.int64(16), T.int64(1), T.int64(4)):
                with T.block("pool_max_rf"):
                    vrv0_rv1_fused_0, v_ax0, v_ax1, v_ax2, v_ax3, v_ax4, vrv0_rv1_fused_1 = T.axis.remap("SSSSSSR", [rv0_rv1_fused_0, ax0, ax1, ax2, ax3, ax4, rv0_rv1_fused_1])
                    T.reads(p0[v_ax0, v_ax1, v_ax2 * T.int64(2) + (vrv0_rv1_fused_0 * T.int64(4) + vrv0_rv1_fused_1) // T.int64(2), v_ax3 * T.int64(2) + (vrv0_rv1_fused_0 * T.int64(4) + vrv0_rv1_fused_1) % T.int64(2), v_ax4])
                    T.writes(pool_max_rf[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4, vrv0_rv1_fused_0])
                    with T.init():
                        pool_max_rf[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4, vrv0_rv1_fused_0] = T.float32(-3.4028234663852886e+38)
                    pool_max_rf[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4, vrv0_rv1_fused_0] = T.max(pool_max_rf[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4, vrv0_rv1_fused_0], p0[v_ax0, v_ax1, v_ax2 * T.int64(2) + (vrv0_rv1_fused_0 * T.int64(4) + vrv0_rv1_fused_1) // T.int64(2), v_ax3 * T.int64(2) + (vrv0_rv1_fused_0 * T.int64(4) + vrv0_rv1_fused_1) % T.int64(2), v_ax4])
            for ax0, ax1, ax2, ax3, ax4, rv0_rv1_fused_0 in T.grid(T.int64(1), T.int64(32), T.int64(7), T.int64(7), T.int64(16), T.int64(1)):
                with T.block("pool_max"):
                    vrv0_rv1_fused_0, v_ax0, v_ax1, v_ax2, v_ax3, v_ax4 = T.axis.remap("RSSSSS", [rv0_rv1_fused_0, ax0, ax1, ax2, ax3, ax4])
                    T.reads(pool_max_rf[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4, vrv0_rv1_fused_0])
                    T.writes(pool_max[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                    T.block_attr({"meta_schedule.random_compute_producer": 1})
                    with T.init():
                        pool_max[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.float32(-3.4028234663852886e+38)
                    pool_max[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.max(pool_max[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], pool_max_rf[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4, vrv0_rv1_fused_0])
b0 = sch.get_block(name="pool_max", func_name="main")
b1 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b0, ann_key="schedule_rule")
l2, l3, l4, l5, l6, l7, l8 = sch.get_loops(block=b0)
l9 = sch.fuse(l7, l8, preserve_unit_iters=True)
v10, v11 = sch.sample_perfect_tile(loop=l9, n=2, max_innermost_factor=64, decision=[1, 4])
l12, l13 = sch.split(loop=l9, factors=[v10, v11], preserve_unit_iters=True)
b14 = sch.rfactor(loop=l12, factor_axis=5)
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.random_compute_producer", ann_val=1)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.vectorize", ann_val=64)
v15 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.unroll_explicit", ann_val=v15)
2024-04-28 07:25:12 [INFO] [task_scheduler.cc:170] Design space #1:
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(32), T.int64(14), T.int64(14), T.int64(16)), "float32"), pool_max: T.Buffer((T.int64(1), T.int64(32), T.int64(7), T.int64(7), T.int64(16)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        with T.block("root"):
            T.reads()
            T.writes()
            T.block_attr({"meta_schedule.parallel": 768, "meta_schedule.unroll_explicit": 16, "meta_schedule.vectorize": 64})
            pool_max_rf = T.alloc_buffer((T.int64(1), T.int64(32), T.int64(7), T.int64(7), T.int64(16), T.int64(4)))
            for ax0, ax1, ax2, ax3, ax4, rv0_rv1_fused_0, rv0_rv1_fused_1 in T.grid(T.int64(1), T.int64(32), T.int64(7), T.int64(7), T.int64(16), T.int64(1), T.int64(4)):
                with T.block("pool_max_rf"):
                    vrv0_rv1_fused_1, v_ax0, v_ax1, v_ax2, v_ax3, v_ax4, vrv0_rv1_fused_0 = T.axis.remap("SSSSSSR", [rv0_rv1_fused_1, ax0, ax1, ax2, ax3, ax4, rv0_rv1_fused_0])
                    T.reads(p0[v_ax0, v_ax1, v_ax2 * T.int64(2) + (vrv0_rv1_fused_0 * T.int64(4) + vrv0_rv1_fused_1) // T.int64(2), v_ax3 * T.int64(2) + (vrv0_rv1_fused_0 * T.int64(4) + vrv0_rv1_fused_1) % T.int64(2), v_ax4])
                    T.writes(pool_max_rf[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4, vrv0_rv1_fused_1])
                    with T.init():
                        pool_max_rf[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4, vrv0_rv1_fused_1] = T.float32(-3.4028234663852886e+38)
                    pool_max_rf[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4, vrv0_rv1_fused_1] = T.max(pool_max_rf[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4, vrv0_rv1_fused_1], p0[v_ax0, v_ax1, v_ax2 * T.int64(2) + (vrv0_rv1_fused_0 * T.int64(4) + vrv0_rv1_fused_1) // T.int64(2), v_ax3 * T.int64(2) + (vrv0_rv1_fused_0 * T.int64(4) + vrv0_rv1_fused_1) % T.int64(2), v_ax4])
            for ax0, ax1, ax2, ax3, ax4, rv0_rv1_fused_1 in T.grid(T.int64(1), T.int64(32), T.int64(7), T.int64(7), T.int64(16), T.int64(4)):
                with T.block("pool_max"):
                    vrv0_rv1_fused_1, v_ax0, v_ax1, v_ax2, v_ax3, v_ax4 = T.axis.remap("RSSSSS", [rv0_rv1_fused_1, ax0, ax1, ax2, ax3, ax4])
                    T.reads(pool_max_rf[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4, vrv0_rv1_fused_1])
                    T.writes(pool_max[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                    T.block_attr({"meta_schedule.random_compute_producer": 1})
                    with T.init():
                        pool_max[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.float32(-3.4028234663852886e+38)
                    pool_max[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.max(pool_max[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], pool_max_rf[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4, vrv0_rv1_fused_1])
b0 = sch.get_block(name="pool_max", func_name="main")
b1 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b0, ann_key="schedule_rule")
l2, l3, l4, l5, l6, l7, l8 = sch.get_loops(block=b0)
l9 = sch.fuse(l7, l8, preserve_unit_iters=True)
v10, v11 = sch.sample_perfect_tile(loop=l9, n=2, max_innermost_factor=64, decision=[1, 4])
l12, l13 = sch.split(loop=l9, factors=[v10, v11], preserve_unit_iters=True)
b14 = sch.rfactor(loop=l13, factor_axis=5)
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.random_compute_producer", ann_val=1)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.vectorize", ann_val=64)
v15 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=1)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.unroll_explicit", ann_val=v15)
2024-04-28 07:25:12 [INFO] [task_scheduler.cc:170] Design space #2:
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(32), T.int64(14), T.int64(14), T.int64(16)), "float32"), pool_max: T.Buffer((T.int64(1), T.int64(32), T.int64(7), T.int64(7), T.int64(16)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        with T.block("root"):
            T.reads()
            T.writes()
            T.block_attr({"meta_schedule.parallel": 768, "meta_schedule.unroll_explicit": 0, "meta_schedule.vectorize": 64})
            for ax0, ax1, ax2, ax3, ax4, rv0, rv1 in T.grid(T.int64(1), T.int64(32), T.int64(7), T.int64(7), T.int64(16), T.int64(2), T.int64(2)):
                with T.block("pool_max"):
                    v_ax0, v_ax1, v_ax2, v_ax3, v_ax4, v_rv0, v_rv1 = T.axis.remap("SSSSSRR", [ax0, ax1, ax2, ax3, ax4, rv0, rv1])
                    T.reads(p0[v_ax0, v_ax1, v_ax2 * T.int64(2) + v_rv0, v_ax3 * T.int64(2) + v_rv1, v_ax4])
                    T.writes(pool_max[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                    with T.init():
                        pool_max[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.float32(-3.4028234663852886e+38)
                    pool_max[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.max(pool_max[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], p0[v_ax0, v_ax1, v_ax2 * T.int64(2) + v_rv0, v_ax3 * T.int64(2) + v_rv1, v_ax4])
b0 = sch.get_block(name="pool_max", func_name="main")
b1 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b0, ann_key="schedule_rule")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.vectorize", ann_val=64)
v2 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=0)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.unroll_explicit", ann_val=v2)
2024-04-28 07:58:39 [INFO] [evolutionary_search.cc:713] Generating candidates......
2024-04-28 07:58:39 [INFO] [evolutionary_search.cc:715] Picked top 0 candidate(s) from database
2024-04-28 07:58:40 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x675b7f8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x4df85e8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x31ae3a8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x30b2b38)]: 0 failure(s)
2024-04-28 07:58:40 [INFO] [evolutionary_search.cc:723] Sampled 512 candidate(s)
2024-04-28 07:58:41 [INFO] [evolutionary_search.cc:621] Evolve iter #0 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x675b7f8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x4df85e8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x31ae3a8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x30b2b38)]: 0 failure(s)
2024-04-28 07:58:42 [INFO] [evolutionary_search.cc:621] Evolve iter #1 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x675b7f8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x4df85e8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x31ae3a8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x30b2b38)]: 0 failure(s)
2024-04-28 07:58:43 [INFO] [evolutionary_search.cc:621] Evolve iter #2 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x675b7f8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x4df85e8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x31ae3a8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x30b2b38)]: 0 failure(s)
2024-04-28 07:58:45 [INFO] [evolutionary_search.cc:621] Evolve iter #3 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x675b7f8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x4df85e8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x31ae3a8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x30b2b38)]: 0 failure(s)
2024-04-28 07:58:46 [INFO] [evolutionary_search.cc:649] Scores of the best 64 candidates:
[1 : 16]:	0.9881  0.9849  0.9554  0.9130  0.9050  0.8986  0.8753  0.8739  0.8724  0.8655  0.8374  0.8325  0.8270  0.8094  0.7833  0.7685
[17 : 32]:	0.7467  0.7403  0.7059  0.6825  0.6349  0.6299  0.6291  0.5972  0.5859  0.5808  0.5553  0.5304  0.5075  0.4852  0.4791  0.4586
[33 : 48]:	0.4378  0.4224  0.3637  0.3617  0.3538  0.3510  0.3453  0.3324  0.3083  0.3062  0.2998  0.2787  0.2756  0.2618  0.2316  0.2175
[49 : 64]:	0.2080  0.2053  0.1907  0.1844  0.1608  0.1595  0.1279  0.1218  0.1066  0.0960  0.0842  0.0742  0.0734  0.0667  0.0609  0.0512
2024-04-28 07:58:46 [INFO] [evolutionary_search.cc:727] Got 64 candidate(s) with evolutionary search
2024-04-28 07:58:46 [INFO] [evolutionary_search.cc:730] Sending 61 candidates(s) for measurement
2024-04-28 08:27:34 [INFO] [task_scheduler.cc:131] [Task #17: fused_nn_max_pool2d_4] Trial #1: GFLOPs: 4.3197. Time: 23.2310 us. Best GFLOPs: 4.3197
2024-04-28 08:27:34 [INFO] [task_scheduler.cc:131] [Task #17: fused_nn_max_pool2d_4] Trial #2: GFLOPs: 3.8839. Time: 25.8380 us. Best GFLOPs: 4.3197
2024-04-28 08:27:34 [INFO] [task_scheduler.cc:131] [Task #17: fused_nn_max_pool2d_4] Trial #3: GFLOPs: 4.3461. Time: 23.0903 us. Best GFLOPs: 4.3461
2024-04-28 08:27:34 [INFO] [task_scheduler.cc:131] [Task #17: fused_nn_max_pool2d_4] Trial #4: GFLOPs: 4.8286. Time: 20.7827 us. Best GFLOPs: 4.8286
2024-04-28 08:27:34 [INFO] [task_scheduler.cc:131] [Task #17: fused_nn_max_pool2d_4] Trial #5: GFLOPs: 4.6174. Time: 21.7332 us. Best GFLOPs: 4.8286
2024-04-28 08:27:34 [INFO] [task_scheduler.cc:131] [Task #17: fused_nn_max_pool2d_4] Trial #6: GFLOPs: 10.2701. Time: 9.7713 us. Best GFLOPs: 10.2701
2024-04-28 08:27:34 [INFO] [task_scheduler.cc:131] [Task #17: fused_nn_max_pool2d_4] Trial #7: GFLOPs: 4.1506. Time: 24.1778 us. Best GFLOPs: 10.2701
2024-04-28 08:27:34 [INFO] [task_scheduler.cc:131] [Task #17: fused_nn_max_pool2d_4] Trial #8: GFLOPs: 10.6055. Time: 9.4623 us. Best GFLOPs: 10.6055
2024-04-28 08:27:34 [INFO] [task_scheduler.cc:131] [Task #17: fused_nn_max_pool2d_4] Trial #9: GFLOPs: 4.7604. Time: 21.0806 us. Best GFLOPs: 10.6055
2024-04-28 08:27:34 [INFO] [task_scheduler.cc:131] [Task #17: fused_nn_max_pool2d_4] Trial #10: GFLOPs: 5.0832. Time: 19.7417 us. Best GFLOPs: 10.6055
2024-04-28 08:27:34 [INFO] [task_scheduler.cc:131] [Task #17: fused_nn_max_pool2d_4] Trial #11: GFLOPs: 4.9300. Time: 20.3553 us. Best GFLOPs: 10.6055
2024-04-28 08:27:34 [INFO] [task_scheduler.cc:131] [Task #17: fused_nn_max_pool2d_4] Trial #12: GFLOPs: 4.1040. Time: 24.4521 us. Best GFLOPs: 10.6055
2024-04-28 08:27:34 [INFO] [task_scheduler.cc:131] [Task #17: fused_nn_max_pool2d_4] Trial #13: GFLOPs: 4.1878. Time: 23.9628 us. Best GFLOPs: 10.6055
2024-04-28 08:27:34 [INFO] [task_scheduler.cc:131] [Task #17: fused_nn_max_pool2d_4] Trial #14: GFLOPs: 4.4913. Time: 22.3439 us. Best GFLOPs: 10.6055
2024-04-28 08:27:34 [INFO] [task_scheduler.cc:121] [Task #17: fused_nn_max_pool2d_4] Trial #15: Error in building:
LocalBuilder: Timeout, killed after 30.0 seconds
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(32), T.int64(14), T.int64(14), T.int64(16)), "float32"), pool_max: T.Buffer((T.int64(1), T.int64(32), T.int64(7), T.int64(7), T.int64(16)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        pool_max_rf = T.alloc_buffer((T.int64(1), T.int64(32), T.int64(7), T.int64(7), T.int64(16), T.int64(2)))
        for ax0_ax1_fused in T.parallel(T.int64(32), annotations={"pragma_auto_unroll_max_step": 512, "pragma_unroll_explicit": 1}):
            for ax2, ax3, ax4 in T.grid(T.int64(7), T.int64(7), T.int64(16)):
                for rv0_rv1_fused_1_fused_init in T.vectorized(T.int64(2)):
                    with T.block("pool_max_rf_init"):
                        vrv0_rv1_fused_1 = T.axis.spatial(T.int64(2), rv0_rv1_fused_1_fused_init)
                        v_ax0 = T.axis.spatial(T.int64(1), T.int64(0))
                        v_ax1, v_ax2, v_ax3, v_ax4 = T.axis.remap("SSSS", [ax0_ax1_fused, ax2, ax3, ax4])
                        T.reads()
                        T.writes(pool_max_rf[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4, vrv0_rv1_fused_1])
                        pool_max_rf[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4, vrv0_rv1_fused_1] = T.float32(-3.4028234663852886e+38)
                for rv0_rv1_fused_0 in range(T.int64(2)):
                    for rv0_rv1_fused_1_fused in T.vectorized(T.int64(2)):
                        with T.block("pool_max_rf_update"):
                            vrv0_rv1_fused_1 = T.axis.spatial(T.int64(2), rv0_rv1_fused_1_fused)
                            v_ax0 = T.axis.spatial(T.int64(1), T.int64(0))
                            v_ax1, v_ax2, v_ax3, v_ax4, vrv0_rv1_fused_0 = T.axis.remap("SSSSR", [ax0_ax1_fused, ax2, ax3, ax4, rv0_rv1_fused_0])
                            T.reads(pool_max_rf[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4, vrv0_rv1_fused_1], p0[v_ax0, v_ax1, v_ax2 * T.int64(2) + (vrv0_rv1_fused_0 * T.int64(2) + vrv0_rv1_fused_1) // T.int64(2), v_ax3 * T.int64(2) + (vrv0_rv1_fused_0 * T.int64(2) + vrv0_rv1_fused_1) % T.int64(2), v_ax4])
                            T.writes(pool_max_rf[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4, vrv0_rv1_fused_1])
                            pool_max_rf[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4, vrv0_rv1_fused_1] = T.max(pool_max_rf[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4, vrv0_rv1_fused_1], p0[v_ax0, v_ax1, v_ax2 * T.int64(2) + (vrv0_rv1_fused_0 * T.int64(2) + vrv0_rv1_fused_1) // T.int64(2), v_ax3 * T.int64(2) + (vrv0_rv1_fused_0 * T.int64(2) + vrv0_rv1_fused_1) % T.int64(2), v_ax4])
        for ax0_ax1_fused in T.parallel(T.int64(32), annotations={"pragma_auto_unroll_max_step": 512, "pragma_unroll_explicit": 1}):
            for ax2, ax3, ax4 in T.grid(T.int64(7), T.int64(7), T.int64(16)):
                with T.block("pool_max_init"):
                    v_ax0 = T.axis.spatial(T.int64(1), T.int64(0))
                    v_ax1, v_ax2, v_ax3, v_ax4 = T.axis.remap("SSSS", [ax0_ax1_fused, ax2, ax3, ax4])
                    T.reads()
                    T.writes(pool_max[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                    T.block_attr({"meta_schedule.random_compute_producer": 1})
                    pool_max[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.float32(-3.4028234663852886e+38)
                for rv0_rv1_fused_1 in range(T.int64(2)):
                    with T.block("pool_max_update"):
                        vrv0_rv1_fused_1 = T.axis.reduce(T.int64(2), rv0_rv1_fused_1)
                        v_ax0 = T.axis.spatial(T.int64(1), T.int64(0))
                        v_ax1, v_ax2, v_ax3, v_ax4 = T.axis.remap("SSSS", [ax0_ax1_fused, ax2, ax3, ax4])
                        T.reads(pool_max[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], pool_max_rf[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4, vrv0_rv1_fused_1])
                        T.writes(pool_max[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                        T.block_attr({"meta_schedule.random_compute_producer": 1})
                        pool_max[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.max(pool_max[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], pool_max_rf[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4, vrv0_rv1_fused_1])
b0 = sch.get_block(name="pool_max", func_name="main")
b1 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b0, ann_key="schedule_rule")
l2, l3, l4, l5, l6, l7, l8 = sch.get_loops(block=b0)
l9 = sch.fuse(l7, l8, preserve_unit_iters=True)
v10, v11 = sch.sample_perfect_tile(loop=l9, n=2, max_innermost_factor=64, decision=[2, 2])
l12, l13 = sch.split(loop=l9, factors=[v10, v11], preserve_unit_iters=True)
b14 = sch.rfactor(loop=l13, factor_axis=5)
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.random_compute_producer", ann_val=1)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.parallel", ann_val=1)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.vectorize", ann_val=64)
v15 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.unroll_explicit", ann_val=v15)
sch.enter_postproc()
b16 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b16, ann_key="meta_schedule.parallel")
sch.unannotate(block_or_loop=b16, ann_key="meta_schedule.vectorize")
sch.unannotate(block_or_loop=b16, ann_key="meta_schedule.unroll_explicit")
b17, b18 = sch.get_child_blocks(b16)
l19, l20, l21, l22, l23, l24, l25 = sch.get_loops(block=b17)
l26 = sch.fuse(l19, l20, preserve_unit_iters=True)
sch.parallel(loop=l26)
l27 = sch.fuse(l25, preserve_unit_iters=True)
sch.vectorize(loop=l27)
sch.annotate(block_or_loop=l26, ann_key="pragma_auto_unroll_max_step", ann_val=512)
sch.annotate(block_or_loop=l26, ann_key="pragma_unroll_explicit", ann_val=1)
l28, l29, l30, l31, l32, l33 = sch.get_loops(block=b18)
l34 = sch.fuse(l28, l29, preserve_unit_iters=True)
sch.parallel(loop=l34)
sch.annotate(block_or_loop=l34, ann_key="pragma_auto_unroll_max_step", ann_val=512)
sch.annotate(block_or_loop=l34, ann_key="pragma_unroll_explicit", ann_val=1)
b35 = sch.get_block(name="pool_max_rf", func_name="main")
l36, l37, l38, l39, l40, l41 = sch.get_loops(block=b35)
b42 = sch.decompose_reduction(block=b35, loop=l40)
b43 = sch.get_block(name="pool_max", func_name="main")
l44, l45, l46, l47, l48 = sch.get_loops(block=b43)
b49 = sch.decompose_reduction(block=b43, loop=l48)
2024-04-28 08:27:34 [INFO] [task_scheduler.cc:131] [Task #17: fused_nn_max_pool2d_4] Trial #16: GFLOPs: 4.7893. Time: 20.9535 us. Best GFLOPs: 10.6055
2024-04-28 08:27:34 [INFO] [task_scheduler.cc:131] [Task #17: fused_nn_max_pool2d_4] Trial #17: GFLOPs: 3.2183. Time: 31.1813 us. Best GFLOPs: 10.6055
2024-04-28 08:27:34 [INFO] [task_scheduler.cc:131] [Task #17: fused_nn_max_pool2d_4] Trial #18: GFLOPs: 4.9610. Time: 20.2281 us. Best GFLOPs: 10.6055
2024-04-28 08:27:34 [INFO] [task_scheduler.cc:131] [Task #17: fused_nn_max_pool2d_4] Trial #19: GFLOPs: 10.5688. Time: 9.4951 us. Best GFLOPs: 10.6055
2024-04-28 08:27:34 [INFO] [task_scheduler.cc:131] [Task #17: fused_nn_max_pool2d_4] Trial #20: GFLOPs: 5.0245. Time: 19.9726 us. Best GFLOPs: 10.6055
2024-04-28 08:27:34 [INFO] [task_scheduler.cc:131] [Task #17: fused_nn_max_pool2d_4] Trial #21: GFLOPs: 4.7102. Time: 21.3053 us. Best GFLOPs: 10.6055
2024-04-28 08:27:34 [INFO] [task_scheduler.cc:131] [Task #17: fused_nn_max_pool2d_4] Trial #22: GFLOPs: 4.3585. Time: 23.0246 us. Best GFLOPs: 10.6055
2024-04-28 08:27:34 [INFO] [task_scheduler.cc:131] [Task #17: fused_nn_max_pool2d_4] Trial #23: GFLOPs: 10.0349. Time: 10.0003 us. Best GFLOPs: 10.6055
2024-04-28 08:27:34 [INFO] [task_scheduler.cc:131] [Task #17: fused_nn_max_pool2d_4] Trial #24: GFLOPs: 3.2635. Time: 30.7497 us. Best GFLOPs: 10.6055
2024-04-28 08:27:34 [INFO] [task_scheduler.cc:131] [Task #17: fused_nn_max_pool2d_4] Trial #25: GFLOPs: 4.3581. Time: 23.0265 us. Best GFLOPs: 10.6055
2024-04-28 08:27:34 [INFO] [task_scheduler.cc:131] [Task #17: fused_nn_max_pool2d_4] Trial #26: GFLOPs: 3.5523. Time: 28.2495 us. Best GFLOPs: 10.6055
2024-04-28 08:27:34 [INFO] [task_scheduler.cc:131] [Task #17: fused_nn_max_pool2d_4] Trial #27: GFLOPs: 4.8841. Time: 20.5467 us. Best GFLOPs: 10.6055
2024-04-28 08:27:34 [INFO] [task_scheduler.cc:131] [Task #17: fused_nn_max_pool2d_4] Trial #28: GFLOPs: 4.2301. Time: 23.7233 us. Best GFLOPs: 10.6055
2024-04-28 08:27:34 [INFO] [task_scheduler.cc:131] [Task #17: fused_nn_max_pool2d_4] Trial #29: GFLOPs: 3.5029. Time: 28.6483 us. Best GFLOPs: 10.6055
2024-04-28 08:27:34 [INFO] [task_scheduler.cc:131] [Task #17: fused_nn_max_pool2d_4] Trial #30: GFLOPs: 3.8760. Time: 25.8904 us. Best GFLOPs: 10.6055
2024-04-28 08:27:34 [INFO] [task_scheduler.cc:131] [Task #17: fused_nn_max_pool2d_4] Trial #31: GFLOPs: 4.6852. Time: 21.4190 us. Best GFLOPs: 10.6055
2024-04-28 08:27:34 [INFO] [task_scheduler.cc:131] [Task #17: fused_nn_max_pool2d_4] Trial #32: GFLOPs: 4.8212. Time: 20.8149 us. Best GFLOPs: 10.6055
2024-04-28 08:27:34 [INFO] [task_scheduler.cc:131] [Task #17: fused_nn_max_pool2d_4] Trial #33: GFLOPs: 9.9328. Time: 10.1031 us. Best GFLOPs: 10.6055
2024-04-28 08:27:34 [INFO] [task_scheduler.cc:131] [Task #17: fused_nn_max_pool2d_4] Trial #34: GFLOPs: 4.6634. Time: 21.5189 us. Best GFLOPs: 10.6055
2024-04-28 08:27:34 [INFO] [task_scheduler.cc:131] [Task #17: fused_nn_max_pool2d_4] Trial #35: GFLOPs: 4.3764. Time: 22.9305 us. Best GFLOPs: 10.6055
2024-04-28 08:27:34 [INFO] [task_scheduler.cc:131] [Task #17: fused_nn_max_pool2d_4] Trial #36: GFLOPs: 4.9614. Time: 20.2265 us. Best GFLOPs: 10.6055
2024-04-28 08:27:34 [INFO] [task_scheduler.cc:131] [Task #17: fused_nn_max_pool2d_4] Trial #37: GFLOPs: 4.3611. Time: 23.0105 us. Best GFLOPs: 10.6055
2024-04-28 08:27:34 [INFO] [task_scheduler.cc:131] [Task #17: fused_nn_max_pool2d_4] Trial #38: GFLOPs: 4.4840. Time: 22.3801 us. Best GFLOPs: 10.6055
2024-04-28 08:27:34 [INFO] [task_scheduler.cc:121] [Task #17: fused_nn_max_pool2d_4] Trial #39: Error in building:
LocalBuilder: Timeout, killed after 30.0 seconds
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(32), T.int64(14), T.int64(14), T.int64(16)), "float32"), pool_max: T.Buffer((T.int64(1), T.int64(32), T.int64(7), T.int64(7), T.int64(16)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        pool_max_rf = T.alloc_buffer((T.int64(1), T.int64(32), T.int64(7), T.int64(7), T.int64(16), T.int64(2)))
        for ax0_ax1_ax2_fused in T.parallel(T.int64(224), annotations={"pragma_auto_unroll_max_step": 512, "pragma_unroll_explicit": 1}):
            for ax3, ax4 in T.grid(T.int64(7), T.int64(16)):
                for rv0_rv1_fused_1_fused_init in T.vectorized(T.int64(2)):
                    with T.block("pool_max_rf_init"):
                        vrv0_rv1_fused_1 = T.axis.spatial(T.int64(2), rv0_rv1_fused_1_fused_init)
                        v_ax0 = T.axis.spatial(T.int64(1), T.int64(0))
                        v_ax1 = T.axis.spatial(T.int64(32), ax0_ax1_ax2_fused // T.int64(7))
                        v_ax2 = T.axis.spatial(T.int64(7), ax0_ax1_ax2_fused % T.int64(7))
                        v_ax3, v_ax4 = T.axis.remap("SS", [ax3, ax4])
                        T.reads()
                        T.writes(pool_max_rf[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4, vrv0_rv1_fused_1])
                        pool_max_rf[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4, vrv0_rv1_fused_1] = T.float32(-3.4028234663852886e+38)
                for rv0_rv1_fused_0 in range(T.int64(2)):
                    for rv0_rv1_fused_1_fused in T.vectorized(T.int64(2)):
                        with T.block("pool_max_rf_update"):
                            vrv0_rv1_fused_1 = T.axis.spatial(T.int64(2), rv0_rv1_fused_1_fused)
                            v_ax0 = T.axis.spatial(T.int64(1), T.int64(0))
                            v_ax1 = T.axis.spatial(T.int64(32), ax0_ax1_ax2_fused // T.int64(7))
                            v_ax2 = T.axis.spatial(T.int64(7), ax0_ax1_ax2_fused % T.int64(7))
                            v_ax3, v_ax4, vrv0_rv1_fused_0 = T.axis.remap("SSR", [ax3, ax4, rv0_rv1_fused_0])
                            T.reads(pool_max_rf[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4, vrv0_rv1_fused_1], p0[v_ax0, v_ax1, v_ax2 * T.int64(2) + (vrv0_rv1_fused_0 * T.int64(2) + vrv0_rv1_fused_1) // T.int64(2), v_ax3 * T.int64(2) + (vrv0_rv1_fused_0 * T.int64(2) + vrv0_rv1_fused_1) % T.int64(2), v_ax4])
                            T.writes(pool_max_rf[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4, vrv0_rv1_fused_1])
                            pool_max_rf[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4, vrv0_rv1_fused_1] = T.max(pool_max_rf[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4, vrv0_rv1_fused_1], p0[v_ax0, v_ax1, v_ax2 * T.int64(2) + (vrv0_rv1_fused_0 * T.int64(2) + vrv0_rv1_fused_1) // T.int64(2), v_ax3 * T.int64(2) + (vrv0_rv1_fused_0 * T.int64(2) + vrv0_rv1_fused_1) % T.int64(2), v_ax4])
        for ax0_ax1_ax2_fused in T.parallel(T.int64(224), annotations={"pragma_auto_unroll_max_step": 512, "pragma_unroll_explicit": 1}):
            for ax3, ax4 in T.grid(T.int64(7), T.int64(16)):
                with T.block("pool_max_init"):
                    v_ax0 = T.axis.spatial(T.int64(1), T.int64(0))
                    v_ax1 = T.axis.spatial(T.int64(32), ax0_ax1_ax2_fused // T.int64(7))
                    v_ax2 = T.axis.spatial(T.int64(7), ax0_ax1_ax2_fused % T.int64(7))
                    v_ax3, v_ax4 = T.axis.remap("SS", [ax3, ax4])
                    T.reads()
                    T.writes(pool_max[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                    T.block_attr({"meta_schedule.random_compute_producer": 1})
                    pool_max[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.float32(-3.4028234663852886e+38)
                for rv0_rv1_fused_1 in range(T.int64(2)):
                    with T.block("pool_max_update"):
                        vrv0_rv1_fused_1 = T.axis.reduce(T.int64(2), rv0_rv1_fused_1)
                        v_ax0 = T.axis.spatial(T.int64(1), T.int64(0))
                        v_ax1 = T.axis.spatial(T.int64(32), ax0_ax1_ax2_fused // T.int64(7))
                        v_ax2 = T.axis.spatial(T.int64(7), ax0_ax1_ax2_fused % T.int64(7))
                        v_ax3, v_ax4 = T.axis.remap("SS", [ax3, ax4])
                        T.reads(pool_max[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], pool_max_rf[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4, vrv0_rv1_fused_1])
                        T.writes(pool_max[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                        T.block_attr({"meta_schedule.random_compute_producer": 1})
                        pool_max[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.max(pool_max[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], pool_max_rf[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4, vrv0_rv1_fused_1])
b0 = sch.get_block(name="pool_max", func_name="main")
b1 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b0, ann_key="schedule_rule")
l2, l3, l4, l5, l6, l7, l8 = sch.get_loops(block=b0)
l9 = sch.fuse(l7, l8, preserve_unit_iters=True)
v10, v11 = sch.sample_perfect_tile(loop=l9, n=2, max_innermost_factor=64, decision=[2, 2])
l12, l13 = sch.split(loop=l9, factors=[v10, v11], preserve_unit_iters=True)
b14 = sch.rfactor(loop=l13, factor_axis=5)
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.random_compute_producer", ann_val=1)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.parallel", ann_val=32)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.vectorize", ann_val=64)
v15 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.unroll_explicit", ann_val=v15)
sch.enter_postproc()
b16 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b16, ann_key="meta_schedule.parallel")
sch.unannotate(block_or_loop=b16, ann_key="meta_schedule.vectorize")
sch.unannotate(block_or_loop=b16, ann_key="meta_schedule.unroll_explicit")
b17, b18 = sch.get_child_blocks(b16)
l19, l20, l21, l22, l23, l24, l25 = sch.get_loops(block=b17)
l26 = sch.fuse(l19, l20, l21, preserve_unit_iters=True)
sch.parallel(loop=l26)
l27 = sch.fuse(l25, preserve_unit_iters=True)
sch.vectorize(loop=l27)
sch.annotate(block_or_loop=l26, ann_key="pragma_auto_unroll_max_step", ann_val=512)
sch.annotate(block_or_loop=l26, ann_key="pragma_unroll_explicit", ann_val=1)
l28, l29, l30, l31, l32, l33 = sch.get_loops(block=b18)
l34 = sch.fuse(l28, l29, l30, preserve_unit_iters=True)
sch.parallel(loop=l34)
sch.annotate(block_or_loop=l34, ann_key="pragma_auto_unroll_max_step", ann_val=512)
sch.annotate(block_or_loop=l34, ann_key="pragma_unroll_explicit", ann_val=1)
b35 = sch.get_block(name="pool_max_rf", func_name="main")
l36, l37, l38, l39, l40 = sch.get_loops(block=b35)
b41 = sch.decompose_reduction(block=b35, loop=l39)
b42 = sch.get_block(name="pool_max", func_name="main")
l43, l44, l45, l46 = sch.get_loops(block=b42)
b47 = sch.decompose_reduction(block=b42, loop=l46)
2024-04-28 08:27:34 [INFO] [task_scheduler.cc:131] [Task #17: fused_nn_max_pool2d_4] Trial #40: GFLOPs: 4.4879. Time: 22.3606 us. Best GFLOPs: 10.6055
2024-04-28 08:27:34 [INFO] [task_scheduler.cc:131] [Task #17: fused_nn_max_pool2d_4] Trial #41: GFLOPs: 3.7121. Time: 27.0340 us. Best GFLOPs: 10.6055
2024-04-28 08:27:34 [INFO] [task_scheduler.cc:131] [Task #17: fused_nn_max_pool2d_4] Trial #42: GFLOPs: 4.0047. Time: 25.0585 us. Best GFLOPs: 10.6055
2024-04-28 08:27:34 [INFO] [task_scheduler.cc:131] [Task #17: fused_nn_max_pool2d_4] Trial #43: GFLOPs: 4.4655. Time: 22.4728 us. Best GFLOPs: 10.6055
2024-04-28 08:27:34 [INFO] [task_scheduler.cc:131] [Task #17: fused_nn_max_pool2d_4] Trial #44: GFLOPs: 3.9586. Time: 25.3501 us. Best GFLOPs: 10.6055
2024-04-28 08:27:34 [INFO] [task_scheduler.cc:131] [Task #17: fused_nn_max_pool2d_4] Trial #45: GFLOPs: 3.1089. Time: 32.2785 us. Best GFLOPs: 10.6055
2024-04-28 08:27:34 [INFO] [task_scheduler.cc:131] [Task #17: fused_nn_max_pool2d_4] Trial #46: GFLOPs: 4.5939. Time: 21.8445 us. Best GFLOPs: 10.6055
2024-04-28 08:27:34 [INFO] [task_scheduler.cc:131] [Task #17: fused_nn_max_pool2d_4] Trial #47: GFLOPs: 3.7260. Time: 26.9327 us. Best GFLOPs: 10.6055
2024-04-28 08:27:34 [INFO] [task_scheduler.cc:131] [Task #17: fused_nn_max_pool2d_4] Trial #48: GFLOPs: 5.0565. Time: 19.8463 us. Best GFLOPs: 10.6055
2024-04-28 08:27:34 [INFO] [task_scheduler.cc:131] [Task #17: fused_nn_max_pool2d_4] Trial #49: GFLOPs: 5.0115. Time: 20.0245 us. Best GFLOPs: 10.6055
2024-04-28 08:27:34 [INFO] [task_scheduler.cc:131] [Task #17: fused_nn_max_pool2d_4] Trial #50: GFLOPs: 4.6711. Time: 21.4836 us. Best GFLOPs: 10.6055
2024-04-28 08:27:34 [INFO] [task_scheduler.cc:131] [Task #17: fused_nn_max_pool2d_4] Trial #51: GFLOPs: 4.1172. Time: 24.3736 us. Best GFLOPs: 10.6055
2024-04-28 08:27:34 [INFO] [task_scheduler.cc:131] [Task #17: fused_nn_max_pool2d_4] Trial #52: GFLOPs: 3.4172. Time: 29.3667 us. Best GFLOPs: 10.6055
2024-04-28 08:27:34 [INFO] [task_scheduler.cc:131] [Task #17: fused_nn_max_pool2d_4] Trial #53: GFLOPs: 3.4653. Time: 28.9590 us. Best GFLOPs: 10.6055
2024-04-28 08:27:34 [INFO] [task_scheduler.cc:131] [Task #17: fused_nn_max_pool2d_4] Trial #54: GFLOPs: 10.3220. Time: 9.7221 us. Best GFLOPs: 10.6055
2024-04-28 08:27:34 [INFO] [task_scheduler.cc:131] [Task #17: fused_nn_max_pool2d_4] Trial #55: GFLOPs: 4.5715. Time: 21.9517 us. Best GFLOPs: 10.6055
2024-04-28 08:27:34 [INFO] [task_scheduler.cc:131] [Task #17: fused_nn_max_pool2d_4] Trial #56: GFLOPs: 3.4847. Time: 28.7978 us. Best GFLOPs: 10.6055
2024-04-28 08:27:34 [INFO] [task_scheduler.cc:131] [Task #17: fused_nn_max_pool2d_4] Trial #57: GFLOPs: 4.4836. Time: 22.3822 us. Best GFLOPs: 10.6055
2024-04-28 08:27:34 [INFO] [task_scheduler.cc:131] [Task #17: fused_nn_max_pool2d_4] Trial #58: GFLOPs: 3.6629. Time: 27.3971 us. Best GFLOPs: 10.6055
2024-04-28 08:27:34 [INFO] [task_scheduler.cc:131] [Task #17: fused_nn_max_pool2d_4] Trial #59: GFLOPs: 2.0277. Time: 49.4900 us. Best GFLOPs: 10.6055
2024-04-28 08:27:34 [INFO] [task_scheduler.cc:131] [Task #17: fused_nn_max_pool2d_4] Trial #60: GFLOPs: 3.9656. Time: 25.3054 us. Best GFLOPs: 10.6055
2024-04-28 08:27:34 [INFO] [task_scheduler.cc:131] [Task #17: fused_nn_max_pool2d_4] Trial #61: GFLOPs: 4.4939. Time: 22.3306 us. Best GFLOPs: 10.6055
