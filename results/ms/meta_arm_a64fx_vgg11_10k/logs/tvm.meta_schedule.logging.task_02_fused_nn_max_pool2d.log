2024-04-28 07:24:27 [INFO] [task_scheduler.cc:160] Initializing Task #2: "fused_nn_max_pool2d"
2024-04-28 07:24:27 [INFO] [task_scheduler.cc:35] 
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(2), T.int64(224), T.int64(224), T.int64(32)), "float32"), pool_max: T.Buffer((T.int64(1), T.int64(2), T.int64(112), T.int64(112), T.int64(32)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        for ax0, ax1, ax2, ax3, ax4, rv0, rv1 in T.grid(T.int64(1), T.int64(2), T.int64(112), T.int64(112), T.int64(32), T.int64(2), T.int64(2)):
            with T.block("pool_max"):
                v_ax0, v_ax1, v_ax2, v_ax3, v_ax4, v_rv0, v_rv1 = T.axis.remap("SSSSSRR", [ax0, ax1, ax2, ax3, ax4, rv0, rv1])
                T.reads(p0[v_ax0, v_ax1, v_ax2 * T.int64(2) + v_rv0, v_ax3 * T.int64(2) + v_rv1, v_ax4])
                T.writes(pool_max[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                T.block_attr({"schedule_rule": "meta_schedule.pool_max"})
                with T.init():
                    pool_max[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.float32(-3.4028234663852886e+38)
                pool_max[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.max(pool_max[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], p0[v_ax0, v_ax1, v_ax2 * T.int64(2) + v_rv0, v_ax3 * T.int64(2) + v_rv1, v_ax4])
2024-04-28 07:24:27 [INFO] [task_scheduler.cc:164] Total 3 design space(s) generated
2024-04-28 07:24:27 [INFO] [task_scheduler.cc:170] Design space #0:
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(2), T.int64(224), T.int64(224), T.int64(32)), "float32"), pool_max: T.Buffer((T.int64(1), T.int64(2), T.int64(112), T.int64(112), T.int64(32)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        with T.block("root"):
            T.reads()
            T.writes()
            T.block_attr({"meta_schedule.parallel": 768, "meta_schedule.unroll_explicit": 64, "meta_schedule.vectorize": 64})
            pool_max_rf = T.alloc_buffer((T.int64(1), T.int64(2), T.int64(112), T.int64(112), T.int64(32), T.int64(1)))
            for ax0, ax1, ax2, ax3, ax4, rv0_rv1_fused_0, rv0_rv1_fused_1 in T.grid(T.int64(1), T.int64(2), T.int64(112), T.int64(112), T.int64(32), T.int64(1), T.int64(4)):
                with T.block("pool_max_rf"):
                    vrv0_rv1_fused_0, v_ax0, v_ax1, v_ax2, v_ax3, v_ax4, vrv0_rv1_fused_1 = T.axis.remap("SSSSSSR", [rv0_rv1_fused_0, ax0, ax1, ax2, ax3, ax4, rv0_rv1_fused_1])
                    T.reads(p0[v_ax0, v_ax1, v_ax2 * T.int64(2) + (vrv0_rv1_fused_0 * T.int64(4) + vrv0_rv1_fused_1) // T.int64(2), v_ax3 * T.int64(2) + (vrv0_rv1_fused_0 * T.int64(4) + vrv0_rv1_fused_1) % T.int64(2), v_ax4])
                    T.writes(pool_max_rf[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4, vrv0_rv1_fused_0])
                    with T.init():
                        pool_max_rf[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4, vrv0_rv1_fused_0] = T.float32(-3.4028234663852886e+38)
                    pool_max_rf[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4, vrv0_rv1_fused_0] = T.max(pool_max_rf[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4, vrv0_rv1_fused_0], p0[v_ax0, v_ax1, v_ax2 * T.int64(2) + (vrv0_rv1_fused_0 * T.int64(4) + vrv0_rv1_fused_1) // T.int64(2), v_ax3 * T.int64(2) + (vrv0_rv1_fused_0 * T.int64(4) + vrv0_rv1_fused_1) % T.int64(2), v_ax4])
            for ax0, ax1, ax2, ax3, ax4, rv0_rv1_fused_0 in T.grid(T.int64(1), T.int64(2), T.int64(112), T.int64(112), T.int64(32), T.int64(1)):
                with T.block("pool_max"):
                    vrv0_rv1_fused_0, v_ax0, v_ax1, v_ax2, v_ax3, v_ax4 = T.axis.remap("RSSSSS", [rv0_rv1_fused_0, ax0, ax1, ax2, ax3, ax4])
                    T.reads(pool_max_rf[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4, vrv0_rv1_fused_0])
                    T.writes(pool_max[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                    T.block_attr({"meta_schedule.random_compute_producer": 1})
                    with T.init():
                        pool_max[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.float32(-3.4028234663852886e+38)
                    pool_max[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.max(pool_max[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], pool_max_rf[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4, vrv0_rv1_fused_0])
b0 = sch.get_block(name="pool_max", func_name="main")
b1 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b0, ann_key="schedule_rule")
l2, l3, l4, l5, l6, l7, l8 = sch.get_loops(block=b0)
l9 = sch.fuse(l7, l8, preserve_unit_iters=True)
v10, v11 = sch.sample_perfect_tile(loop=l9, n=2, max_innermost_factor=64, decision=[1, 4])
l12, l13 = sch.split(loop=l9, factors=[v10, v11], preserve_unit_iters=True)
b14 = sch.rfactor(loop=l12, factor_axis=5)
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.random_compute_producer", ann_val=1)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.vectorize", ann_val=64)
v15 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=2)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.unroll_explicit", ann_val=v15)
2024-04-28 07:24:27 [INFO] [task_scheduler.cc:170] Design space #1:
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(2), T.int64(224), T.int64(224), T.int64(32)), "float32"), pool_max: T.Buffer((T.int64(1), T.int64(2), T.int64(112), T.int64(112), T.int64(32)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        with T.block("root"):
            T.reads()
            T.writes()
            T.block_attr({"meta_schedule.parallel": 768, "meta_schedule.unroll_explicit": 16, "meta_schedule.vectorize": 64})
            pool_max_rf = T.alloc_buffer((T.int64(1), T.int64(2), T.int64(112), T.int64(112), T.int64(32), T.int64(4)))
            for ax0, ax1, ax2, ax3, ax4, rv0_rv1_fused_0, rv0_rv1_fused_1 in T.grid(T.int64(1), T.int64(2), T.int64(112), T.int64(112), T.int64(32), T.int64(1), T.int64(4)):
                with T.block("pool_max_rf"):
                    vrv0_rv1_fused_1, v_ax0, v_ax1, v_ax2, v_ax3, v_ax4, vrv0_rv1_fused_0 = T.axis.remap("SSSSSSR", [rv0_rv1_fused_1, ax0, ax1, ax2, ax3, ax4, rv0_rv1_fused_0])
                    T.reads(p0[v_ax0, v_ax1, v_ax2 * T.int64(2) + (vrv0_rv1_fused_0 * T.int64(4) + vrv0_rv1_fused_1) // T.int64(2), v_ax3 * T.int64(2) + (vrv0_rv1_fused_0 * T.int64(4) + vrv0_rv1_fused_1) % T.int64(2), v_ax4])
                    T.writes(pool_max_rf[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4, vrv0_rv1_fused_1])
                    with T.init():
                        pool_max_rf[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4, vrv0_rv1_fused_1] = T.float32(-3.4028234663852886e+38)
                    pool_max_rf[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4, vrv0_rv1_fused_1] = T.max(pool_max_rf[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4, vrv0_rv1_fused_1], p0[v_ax0, v_ax1, v_ax2 * T.int64(2) + (vrv0_rv1_fused_0 * T.int64(4) + vrv0_rv1_fused_1) // T.int64(2), v_ax3 * T.int64(2) + (vrv0_rv1_fused_0 * T.int64(4) + vrv0_rv1_fused_1) % T.int64(2), v_ax4])
            for ax0, ax1, ax2, ax3, ax4, rv0_rv1_fused_1 in T.grid(T.int64(1), T.int64(2), T.int64(112), T.int64(112), T.int64(32), T.int64(4)):
                with T.block("pool_max"):
                    vrv0_rv1_fused_1, v_ax0, v_ax1, v_ax2, v_ax3, v_ax4 = T.axis.remap("RSSSSS", [rv0_rv1_fused_1, ax0, ax1, ax2, ax3, ax4])
                    T.reads(pool_max_rf[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4, vrv0_rv1_fused_1])
                    T.writes(pool_max[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                    T.block_attr({"meta_schedule.random_compute_producer": 1})
                    with T.init():
                        pool_max[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.float32(-3.4028234663852886e+38)
                    pool_max[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.max(pool_max[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], pool_max_rf[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4, vrv0_rv1_fused_1])
b0 = sch.get_block(name="pool_max", func_name="main")
b1 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b0, ann_key="schedule_rule")
l2, l3, l4, l5, l6, l7, l8 = sch.get_loops(block=b0)
l9 = sch.fuse(l7, l8, preserve_unit_iters=True)
v10, v11 = sch.sample_perfect_tile(loop=l9, n=2, max_innermost_factor=64, decision=[1, 4])
l12, l13 = sch.split(loop=l9, factors=[v10, v11], preserve_unit_iters=True)
b14 = sch.rfactor(loop=l13, factor_axis=5)
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.random_compute_producer", ann_val=1)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.vectorize", ann_val=64)
v15 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=1)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.unroll_explicit", ann_val=v15)
2024-04-28 07:24:27 [INFO] [task_scheduler.cc:170] Design space #2:
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(2), T.int64(224), T.int64(224), T.int64(32)), "float32"), pool_max: T.Buffer((T.int64(1), T.int64(2), T.int64(112), T.int64(112), T.int64(32)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        with T.block("root"):
            T.reads()
            T.writes()
            T.block_attr({"meta_schedule.parallel": 768, "meta_schedule.unroll_explicit": 64, "meta_schedule.vectorize": 64})
            for ax0, ax1, ax2, ax3, ax4, rv0, rv1 in T.grid(T.int64(1), T.int64(2), T.int64(112), T.int64(112), T.int64(32), T.int64(2), T.int64(2)):
                with T.block("pool_max"):
                    v_ax0, v_ax1, v_ax2, v_ax3, v_ax4, v_rv0, v_rv1 = T.axis.remap("SSSSSRR", [ax0, ax1, ax2, ax3, ax4, rv0, rv1])
                    T.reads(p0[v_ax0, v_ax1, v_ax2 * T.int64(2) + v_rv0, v_ax3 * T.int64(2) + v_rv1, v_ax4])
                    T.writes(pool_max[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                    with T.init():
                        pool_max[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.float32(-3.4028234663852886e+38)
                    pool_max[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.max(pool_max[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], p0[v_ax0, v_ax1, v_ax2 * T.int64(2) + v_rv0, v_ax3 * T.int64(2) + v_rv1, v_ax4])
b0 = sch.get_block(name="pool_max", func_name="main")
b1 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b0, ann_key="schedule_rule")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.vectorize", ann_val=64)
v2 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=2)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.unroll_explicit", ann_val=v2)
2024-04-28 07:27:46 [INFO] [evolutionary_search.cc:713] Generating candidates......
2024-04-28 07:27:46 [INFO] [evolutionary_search.cc:715] Picked top 0 candidate(s) from database
2024-04-28 07:27:47 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x367f848)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x388f618)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x3288f88)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x6775828)]: 0 failure(s)
2024-04-28 07:27:47 [INFO] [evolutionary_search.cc:723] Sampled 512 candidate(s)
2024-04-28 07:27:48 [INFO] [evolutionary_search.cc:621] Evolve iter #0 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x367f848)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x388f618)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x3288f88)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x6775828)]: 0 failure(s)
2024-04-28 07:27:49 [INFO] [evolutionary_search.cc:621] Evolve iter #1 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x367f848)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x388f618)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x3288f88)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x6775828)]: 0 failure(s)
2024-04-28 07:27:50 [INFO] [evolutionary_search.cc:621] Evolve iter #2 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x367f848)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x388f618)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x3288f88)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x6775828)]: 0 failure(s)
2024-04-28 07:27:52 [INFO] [evolutionary_search.cc:621] Evolve iter #3 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x367f848)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x388f618)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x3288f88)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x6775828)]: 0 failure(s)
2024-04-28 07:27:53 [INFO] [evolutionary_search.cc:649] Scores of the best 60 candidates:
[1 : 16]:	0.9789  0.9760  0.9758  0.9754  0.9338  0.9296  0.9165  0.9074  0.8754  0.8494  0.8464  0.8206  0.8196  0.8012  0.7538  0.7530
[17 : 32]:	0.7391  0.7348  0.7318  0.7230  0.6935  0.6899  0.6793  0.6781  0.6739  0.6598  0.6555  0.6494  0.6431  0.6282  0.5917  0.5890
[33 : 48]:	0.5886  0.5342  0.5340  0.5092  0.5083  0.5051  0.4975  0.4886  0.4744  0.4174  0.4126  0.3835  0.3157  0.2925  0.2918  0.2901
[49 : 60]:	0.2642  0.2582  0.1580  0.1530  0.1290  0.0775  0.0711  0.0653  0.0524  0.0254  0.0245  0.0122
2024-04-28 07:27:53 [INFO] [evolutionary_search.cc:727] Got 60 candidate(s) with evolutionary search
2024-04-28 07:27:53 [INFO] [evolutionary_search.cc:730] Sending 60 candidates(s) for measurement
2024-04-28 08:27:04 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_max_pool2d] Trial #1: GFLOPs: 69.8153. Time: 45.9966 us. Best GFLOPs: 69.8153
2024-04-28 08:27:04 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_max_pool2d] Trial #2: GFLOPs: 0.5310. Time: 6047.2132 us. Best GFLOPs: 69.8153
2024-04-28 08:27:04 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_max_pool2d] Trial #3: GFLOPs: 72.2679. Time: 44.4355 us. Best GFLOPs: 72.2679
2024-04-28 08:27:04 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_max_pool2d] Trial #4: GFLOPs: 32.5735. Time: 98.5852 us. Best GFLOPs: 72.2679
2024-04-28 08:27:04 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_max_pool2d] Trial #5: GFLOPs: 26.0777. Time: 123.1420 us. Best GFLOPs: 72.2679
2024-04-28 08:27:04 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_max_pool2d] Trial #6: GFLOPs: 10.3981. Time: 308.8306 us. Best GFLOPs: 72.2679
2024-04-28 08:27:04 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_max_pool2d] Trial #7: GFLOPs: 71.2898. Time: 45.0452 us. Best GFLOPs: 72.2679
2024-04-28 08:27:04 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_max_pool2d] Trial #8: GFLOPs: 32.0564. Time: 100.1754 us. Best GFLOPs: 72.2679
2024-04-28 08:27:04 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_max_pool2d] Trial #9: GFLOPs: 5.4736. Time: 586.6844 us. Best GFLOPs: 72.2679
2024-04-28 08:27:04 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_max_pool2d] Trial #10: GFLOPs: 1.0563. Time: 3040.0128 us. Best GFLOPs: 72.2679
2024-04-28 08:27:04 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_max_pool2d] Trial #11: GFLOPs: 16.0949. Time: 199.5206 us. Best GFLOPs: 72.2679
2024-04-28 08:27:04 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_max_pool2d] Trial #12: GFLOPs: 54.5361. Time: 58.8833 us. Best GFLOPs: 72.2679
2024-04-28 08:27:04 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_max_pool2d] Trial #13: GFLOPs: 27.1214. Time: 118.4032 us. Best GFLOPs: 72.2679
2024-04-28 08:27:04 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_max_pool2d] Trial #14: GFLOPs: 64.1275. Time: 50.0762 us. Best GFLOPs: 72.2679
2024-04-28 08:27:04 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_max_pool2d] Trial #15: GFLOPs: 74.5053. Time: 43.1011 us. Best GFLOPs: 74.5053
2024-04-28 08:27:04 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_max_pool2d] Trial #16: GFLOPs: 50.6024. Time: 63.4606 us. Best GFLOPs: 74.5053
2024-04-28 08:27:04 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_max_pool2d] Trial #17: GFLOPs: 61.8036. Time: 51.9592 us. Best GFLOPs: 74.5053
2024-04-28 08:27:04 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_max_pool2d] Trial #18: GFLOPs: 13.0326. Time: 246.4025 us. Best GFLOPs: 74.5053
2024-04-28 08:27:04 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_max_pool2d] Trial #19: GFLOPs: 53.0553. Time: 60.5267 us. Best GFLOPs: 74.5053
2024-04-28 08:27:04 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_max_pool2d] Trial #20: GFLOPs: 50.9975. Time: 62.9691 us. Best GFLOPs: 74.5053
2024-04-28 08:27:04 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_max_pool2d] Trial #21: GFLOPs: 18.5987. Time: 172.6611 us. Best GFLOPs: 74.5053
2024-04-28 08:27:04 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_max_pool2d] Trial #22: GFLOPs: 35.8917. Time: 89.4710 us. Best GFLOPs: 74.5053
2024-04-28 08:27:04 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_max_pool2d] Trial #23: GFLOPs: 1.9073. Time: 1683.7069 us. Best GFLOPs: 74.5053
2024-04-28 08:27:04 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_max_pool2d] Trial #24: GFLOPs: 23.2711. Time: 137.9936 us. Best GFLOPs: 74.5053
2024-04-28 08:27:04 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_max_pool2d] Trial #25: GFLOPs: 0.7701. Time: 4170.1141 us. Best GFLOPs: 74.5053
2024-04-28 08:27:04 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_max_pool2d] Trial #26: GFLOPs: 19.9707. Time: 160.7986 us. Best GFLOPs: 74.5053
2024-04-28 08:27:04 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_max_pool2d] Trial #27: GFLOPs: 4.4804. Time: 716.7323 us. Best GFLOPs: 74.5053
2024-04-28 08:27:04 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_max_pool2d] Trial #28: GFLOPs: 5.3871. Time: 596.1080 us. Best GFLOPs: 74.5053
2024-04-28 08:27:04 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_max_pool2d] Trial #29: GFLOPs: 147.1911. Time: 21.8170 us. Best GFLOPs: 147.1911
2024-04-28 08:27:04 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_max_pool2d] Trial #30: GFLOPs: 63.7806. Time: 50.3486 us. Best GFLOPs: 147.1911
2024-04-28 08:27:04 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_max_pool2d] Trial #31: GFLOPs: 19.1317. Time: 167.8506 us. Best GFLOPs: 147.1911
2024-04-28 08:27:04 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_max_pool2d] Trial #32: GFLOPs: 6.3234. Time: 507.8391 us. Best GFLOPs: 147.1911
2024-04-28 08:27:04 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_max_pool2d] Trial #33: GFLOPs: 17.3728. Time: 184.8444 us. Best GFLOPs: 147.1911
2024-04-28 08:27:04 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_max_pool2d] Trial #34: GFLOPs: 26.1005. Time: 123.0346 us. Best GFLOPs: 147.1911
2024-04-28 08:27:04 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_max_pool2d] Trial #35: GFLOPs: 0.7669. Time: 4187.3259 us. Best GFLOPs: 147.1911
2024-04-28 08:27:04 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_max_pool2d] Trial #36: GFLOPs: 18.3115. Time: 175.3686 us. Best GFLOPs: 147.1911
2024-04-28 08:27:04 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_max_pool2d] Trial #37: GFLOPs: 27.4053. Time: 117.1769 us. Best GFLOPs: 147.1911
2024-04-28 08:27:04 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_max_pool2d] Trial #38: GFLOPs: 12.5196. Time: 256.4989 us. Best GFLOPs: 147.1911
2024-04-28 08:27:04 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_max_pool2d] Trial #39: GFLOPs: 131.3590. Time: 24.4465 us. Best GFLOPs: 147.1911
2024-04-28 08:27:05 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_max_pool2d] Trial #40: GFLOPs: 3.2686. Time: 982.4447 us. Best GFLOPs: 147.1911
2024-04-28 08:27:05 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_max_pool2d] Trial #41: GFLOPs: 0.8649. Time: 3712.7504 us. Best GFLOPs: 147.1911
2024-04-28 08:27:05 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_max_pool2d] Trial #42: GFLOPs: 1.0605. Time: 3027.9664 us. Best GFLOPs: 147.1911
2024-04-28 08:27:05 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_max_pool2d] Trial #43: GFLOPs: 23.0591. Time: 139.2624 us. Best GFLOPs: 147.1911
2024-04-28 08:27:05 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_max_pool2d] Trial #44: GFLOPs: 10.1933. Time: 315.0355 us. Best GFLOPs: 147.1911
2024-04-28 08:27:05 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_max_pool2d] Trial #45: GFLOPs: 25.8566. Time: 124.1951 us. Best GFLOPs: 147.1911
2024-04-28 08:27:05 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_max_pool2d] Trial #46: GFLOPs: 60.8077. Time: 52.8102 us. Best GFLOPs: 147.1911
2024-04-28 08:27:05 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_max_pool2d] Trial #47: GFLOPs: 60.5480. Time: 53.0367 us. Best GFLOPs: 147.1911
2024-04-28 08:27:05 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_max_pool2d] Trial #48: GFLOPs: 133.9438. Time: 23.9747 us. Best GFLOPs: 147.1911
2024-04-28 08:27:05 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_max_pool2d] Trial #49: GFLOPs: 9.8545. Time: 325.8679 us. Best GFLOPs: 147.1911
2024-04-28 08:27:05 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_max_pool2d] Trial #50: GFLOPs: 60.9517. Time: 52.6854 us. Best GFLOPs: 147.1911
2024-04-28 08:27:05 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_max_pool2d] Trial #51: GFLOPs: 11.0256. Time: 291.2556 us. Best GFLOPs: 147.1911
2024-04-28 08:27:05 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_max_pool2d] Trial #52: GFLOPs: 0.4418. Time: 7269.1576 us. Best GFLOPs: 147.1911
2024-04-28 08:27:05 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_max_pool2d] Trial #53: GFLOPs: 1.4995. Time: 2141.5410 us. Best GFLOPs: 147.1911
2024-04-28 08:27:05 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_max_pool2d] Trial #54: GFLOPs: 41.1157. Time: 78.1031 us. Best GFLOPs: 147.1911
2024-04-28 08:27:05 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_max_pool2d] Trial #55: GFLOPs: 20.0026. Time: 160.5425 us. Best GFLOPs: 147.1911
2024-04-28 08:27:05 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_max_pool2d] Trial #56: GFLOPs: 71.8189. Time: 44.7134 us. Best GFLOPs: 147.1911
2024-04-28 08:27:05 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_max_pool2d] Trial #57: GFLOPs: 6.9846. Time: 459.7607 us. Best GFLOPs: 147.1911
2024-04-28 08:27:05 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_max_pool2d] Trial #58: GFLOPs: 4.6555. Time: 689.7796 us. Best GFLOPs: 147.1911
2024-04-28 08:27:05 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_max_pool2d] Trial #59: GFLOPs: 71.3428. Time: 45.0118 us. Best GFLOPs: 147.1911
2024-04-28 08:27:05 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_max_pool2d] Trial #60: GFLOPs: 29.3917. Time: 109.2573 us. Best GFLOPs: 147.1911
