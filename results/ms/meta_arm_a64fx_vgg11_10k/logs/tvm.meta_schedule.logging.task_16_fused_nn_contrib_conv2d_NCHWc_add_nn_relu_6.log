2024-04-28 07:25:07 [INFO] [task_scheduler.cc:160] Initializing Task #16: "fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6"
2024-04-28 07:25:07 [INFO] [task_scheduler.cc:35] 
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(1), T.int64(14), T.int64(14), T.int64(512)), "float32"), p1: T.Buffer((T.int64(32), T.int64(1), T.int64(3), T.int64(3), T.int64(512), T.int64(16)), "float32"), p2: T.Buffer((T.int64(1), T.int64(32), T.int64(1), T.int64(1), T.int64(16)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(32), T.int64(14), T.int64(14), T.int64(16)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        data_pad = T.alloc_buffer((T.int64(1), T.int64(1), T.int64(16), T.int64(16), T.int64(512)))
        conv2d_NCHWc = T.alloc_buffer((T.int64(1), T.int64(32), T.int64(14), T.int64(14), T.int64(16)))
        T_add = T.alloc_buffer((T.int64(1), T.int64(32), T.int64(14), T.int64(14), T.int64(16)))
        for i0, i1, i2, i3, i4 in T.grid(T.int64(1), T.int64(1), T.int64(16), T.int64(16), T.int64(512)):
            with T.block("data_pad"):
                v_i0, v_i1, v_i2, v_i3, v_i4 = T.axis.remap("SSSSS", [i0, i1, i2, i3, i4])
                T.reads(p0[v_i0, v_i1, v_i2 - T.int64(1), v_i3 - T.int64(1), v_i4])
                T.writes(data_pad[v_i0, v_i1, v_i2, v_i3, v_i4])
                data_pad[v_i0, v_i1, v_i2, v_i3, v_i4] = T.if_then_else(T.int64(1) <= v_i2 and v_i2 < T.int64(15) and T.int64(1) <= v_i3 and v_i3 < T.int64(15), p0[v_i0, v_i1, v_i2 - T.int64(1), v_i3 - T.int64(1), v_i4], T.float32(0))
        for n, oc_chunk, oh, ow, oc_block, ic, kh, kw in T.grid(T.int64(1), T.int64(32), T.int64(14), T.int64(14), T.int64(16), T.int64(512), T.int64(3), T.int64(3)):
            with T.block("conv2d_NCHWc"):
                v_n, v_oc_chunk, v_oh, v_ow, v_oc_block, v_ic, v_kh, v_kw = T.axis.remap("SSSSSRRR", [n, oc_chunk, oh, ow, oc_block, ic, kh, kw])
                T.reads(data_pad[v_n, v_ic // T.int64(512), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(512)], p1[v_oc_chunk, v_ic // T.int64(512), v_kh, v_kw, v_ic % T.int64(512), v_oc_block])
                T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                with T.init():
                    conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = T.float32(0)
                conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] + data_pad[v_n, v_ic // T.int64(512), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(512)] * p1[v_oc_chunk, v_ic // T.int64(512), v_kh, v_kw, v_ic % T.int64(512), v_oc_block]
        for ax0, ax1, ax2, ax3, ax4 in T.grid(T.int64(1), T.int64(32), T.int64(14), T.int64(14), T.int64(16)):
            with T.block("T_add"):
                v_ax0, v_ax1, v_ax2, v_ax3, v_ax4 = T.axis.remap("SSSSS", [ax0, ax1, ax2, ax3, ax4])
                T.reads(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4])
                T.writes(T_add[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                T_add[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] + p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4]
        for ax0, ax1, ax2, ax3, ax4 in T.grid(T.int64(1), T.int64(32), T.int64(14), T.int64(14), T.int64(16)):
            with T.block("T_relu"):
                v_ax0, v_ax1, v_ax2, v_ax3, v_ax4 = T.axis.remap("SSSSS", [ax0, ax1, ax2, ax3, ax4])
                T.reads(T_add[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                T.writes(T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.max(T_add[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], T.float32(0))
2024-04-28 07:25:07 [INFO] [task_scheduler.cc:164] Total 3 design space(s) generated
2024-04-28 07:25:07 [INFO] [task_scheduler.cc:170] Design space #0:
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(1), T.int64(14), T.int64(14), T.int64(512)), "float32"), p1: T.Buffer((T.int64(32), T.int64(1), T.int64(3), T.int64(3), T.int64(512), T.int64(16)), "float32"), p2: T.Buffer((T.int64(1), T.int64(32), T.int64(1), T.int64(1), T.int64(16)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(32), T.int64(14), T.int64(14), T.int64(16)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        with T.block("root"):
            T.reads()
            T.writes()
            T.block_attr({"meta_schedule.parallel": 768, "meta_schedule.unroll_explicit": 512, "meta_schedule.vectorize": 64})
            data_pad = T.alloc_buffer((T.int64(1), T.int64(1), T.int64(16), T.int64(16), T.int64(512)))
            conv2d_NCHWc = T.alloc_buffer((T.int64(1), T.int64(32), T.int64(14), T.int64(14), T.int64(16)))
            for n_0, oc_chunk_0, oh_0, ow_0, oc_block_0, n_1, oc_chunk_1, oh_1, ow_1 in T.grid(T.int64(1), T.int64(2), T.int64(2), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(7)):
                for ax0, ax1, ax2, ax3, ax4 in T.grid(T.int64(1), T.int64(1), T.int64(9), T.int64(4), T.int64(512)):
                    with T.block("data_pad"):
                        v_i0, v_i1 = T.axis.remap("SS", [ax0, ax1])
                        v_i2 = T.axis.spatial(T.int64(16), oh_0 * T.int64(7) + ax2)
                        v_i3 = T.axis.spatial(T.int64(16), ow_1 * T.int64(2) + ax3)
                        v_i4 = T.axis.spatial(T.int64(512), ax4)
                        T.reads(p0[v_i0, v_i1, v_i2 - T.int64(1), v_i3 - T.int64(1), v_i4])
                        T.writes(data_pad[v_i0, v_i1, v_i2, v_i3, v_i4])
                        data_pad[v_i0, v_i1, v_i2, v_i3, v_i4] = T.if_then_else(T.int64(1) <= v_i2 and v_i2 < T.int64(15) and T.int64(1) <= v_i3 and v_i3 < T.int64(15), p0[v_i0, v_i1, v_i2 - T.int64(1), v_i3 - T.int64(1), v_i4], T.float32(0))
                for oc_block_1, ic_0, kh_0, kw_0, n_2, oc_chunk_2, oh_2, ow_2, oc_block_2, ic_1, kh_1, kw_1, n_3, oc_chunk_3, oh_3, ow_3, oc_block_3 in T.grid(T.int64(8), T.int64(64), T.int64(3), T.int64(3), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(8), T.int64(1), T.int64(1), T.int64(1), T.int64(16), T.int64(7), T.int64(2), T.int64(2)):
                    with T.block("conv2d_NCHWc"):
                        v_n = T.axis.spatial(T.int64(1), n_0 + n_1 + n_2 + n_3)
                        v_oc_chunk = T.axis.spatial(T.int64(32), oc_chunk_0 * T.int64(16) + oc_chunk_1 * T.int64(16) + oc_chunk_2 * T.int64(16) + oc_chunk_3)
                        v_oh = T.axis.spatial(T.int64(14), oh_0 * T.int64(7) + oh_1 * T.int64(7) + oh_2 * T.int64(7) + oh_3)
                        v_ow = T.axis.spatial(T.int64(14), ow_0 * T.int64(14) + ow_1 * T.int64(2) + ow_2 * T.int64(2) + ow_3)
                        v_oc_block = T.axis.spatial(T.int64(16), oc_block_0 * T.int64(16) + oc_block_1 * T.int64(2) + oc_block_2 * T.int64(2) + oc_block_3)
                        v_ic = T.axis.reduce(T.int64(512), ic_0 * T.int64(8) + ic_1)
                        v_kh = T.axis.reduce(T.int64(3), kh_0 + kh_1)
                        v_kw = T.axis.reduce(T.int64(3), kw_0 + kw_1)
                        T.reads(data_pad[v_n, v_ic // T.int64(512), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(512)], p1[v_oc_chunk, v_ic // T.int64(512), v_kh, v_kw, v_ic % T.int64(512), v_oc_block])
                        T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                        T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                        with T.init():
                            conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = T.float32(0)
                        conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] + data_pad[v_n, v_ic // T.int64(512), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(512)] * p1[v_oc_chunk, v_ic // T.int64(512), v_kh, v_kw, v_ic % T.int64(512), v_oc_block]
            for ax0, ax1, ax2, ax3, ax4 in T.grid(T.int64(1), T.int64(32), T.int64(14), T.int64(14), T.int64(16)):
                with T.block("T_relu"):
                    v_ax0, v_ax1, v_ax2, v_ax3, v_ax4 = T.axis.remap("SSSSS", [ax0, ax1, ax2, ax3, ax4])
                    T.reads(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4])
                    T.writes(T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                    T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.max(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] + p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4], T.float32(0))
b0 = sch.get_block(name="data_pad", func_name="main")
b1 = sch.get_block(name="conv2d_NCHWc", func_name="main")
b2 = sch.get_block(name="T_add", func_name="main")
b3 = sch.get_block(name="root", func_name="main")
sch.compute_inline(block=b2)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSRSRS")
l4, l5, l6, l7, l8, l9, l10, l11 = sch.get_loops(block=b1)
v12, v13, v14, v15 = sch.sample_perfect_tile(loop=l4, n=4, max_innermost_factor=64, decision=[1, 1, 1, 1])
l16, l17, l18, l19 = sch.split(loop=l4, factors=[v12, v13, v14, v15], preserve_unit_iters=True)
v20, v21, v22, v23 = sch.sample_perfect_tile(loop=l5, n=4, max_innermost_factor=64, decision=[2, 1, 1, 16])
l24, l25, l26, l27 = sch.split(loop=l5, factors=[v20, v21, v22, v23], preserve_unit_iters=True)
v28, v29, v30, v31 = sch.sample_perfect_tile(loop=l6, n=4, max_innermost_factor=64, decision=[2, 1, 1, 7])
l32, l33, l34, l35 = sch.split(loop=l6, factors=[v28, v29, v30, v31], preserve_unit_iters=True)
v36, v37, v38, v39 = sch.sample_perfect_tile(loop=l7, n=4, max_innermost_factor=64, decision=[1, 7, 1, 2])
l40, l41, l42, l43 = sch.split(loop=l7, factors=[v36, v37, v38, v39], preserve_unit_iters=True)
v44, v45, v46, v47 = sch.sample_perfect_tile(loop=l8, n=4, max_innermost_factor=64, decision=[1, 8, 1, 2])
l48, l49, l50, l51 = sch.split(loop=l8, factors=[v44, v45, v46, v47], preserve_unit_iters=True)
v52, v53 = sch.sample_perfect_tile(loop=l9, n=2, max_innermost_factor=64, decision=[64, 8])
l54, l55 = sch.split(loop=l9, factors=[v52, v53], preserve_unit_iters=True)
v56, v57 = sch.sample_perfect_tile(loop=l10, n=2, max_innermost_factor=64, decision=[3, 1])
l58, l59 = sch.split(loop=l10, factors=[v56, v57], preserve_unit_iters=True)
v60, v61 = sch.sample_perfect_tile(loop=l11, n=2, max_innermost_factor=64, decision=[3, 1])
l62, l63 = sch.split(loop=l11, factors=[v60, v61], preserve_unit_iters=True)
sch.reorder(l16, l24, l32, l40, l48, l17, l25, l33, l41, l49, l54, l58, l62, l18, l26, l34, l42, l50, l55, l59, l63, l19, l27, l35, l43, l51)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.vectorize", ann_val=64)
v64 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.unroll_explicit", ann_val=v64)
l65 = sch.sample_compute_location(block=b0, decision=8)
sch.compute_at(block=b0, loop=l65, preserve_unit_loops=True, index=-1)
2024-04-28 07:25:07 [INFO] [task_scheduler.cc:170] Design space #1:
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(1), T.int64(14), T.int64(14), T.int64(512)), "float32"), p1: T.Buffer((T.int64(32), T.int64(1), T.int64(3), T.int64(3), T.int64(512), T.int64(16)), "float32"), p2: T.Buffer((T.int64(1), T.int64(32), T.int64(1), T.int64(1), T.int64(16)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(32), T.int64(14), T.int64(14), T.int64(16)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        with T.block("root"):
            T.reads()
            T.writes()
            T.block_attr({"meta_schedule.parallel": 768, "meta_schedule.unroll_explicit": 16, "meta_schedule.vectorize": 64})
            data_pad = T.alloc_buffer((T.int64(1), T.int64(1), T.int64(16), T.int64(16), T.int64(512)))
            conv2d_NCHWc = T.alloc_buffer((T.int64(1), T.int64(32), T.int64(14), T.int64(14), T.int64(16)))
            for n_0, oc_chunk_0, oh_0 in T.grid(T.int64(1), T.int64(2), T.int64(2)):
                for ax0, ax1, ax2, ax3, ax4 in T.grid(T.int64(1), T.int64(1), T.int64(9), T.int64(16), T.int64(512)):
                    with T.block("data_pad"):
                        v_i0, v_i1 = T.axis.remap("SS", [ax0, ax1])
                        v_i2 = T.axis.spatial(T.int64(16), oh_0 * T.int64(7) + ax2)
                        v_i3, v_i4 = T.axis.remap("SS", [ax3, ax4])
                        T.reads(p0[v_i0, v_i1, v_i2 - T.int64(1), v_i3 - T.int64(1), v_i4])
                        T.writes(data_pad[v_i0, v_i1, v_i2, v_i3, v_i4])
                        data_pad[v_i0, v_i1, v_i2, v_i3, v_i4] = T.if_then_else(T.int64(1) <= v_i2 and v_i2 < T.int64(15) and T.int64(1) <= v_i3 and v_i3 < T.int64(15), p0[v_i0, v_i1, v_i2 - T.int64(1), v_i3 - T.int64(1), v_i4], T.float32(0))
                for ow_0, oc_block_0, n_1, oc_chunk_1, oh_1, ow_1, oc_block_1 in T.grid(T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(7), T.int64(8)):
                    for ic_0, kh_0, kw_0, n_2, oc_chunk_2, oh_2, ow_2, oc_block_2, ic_1, kh_1, kw_1, n_3, oc_chunk_3, oh_3, ow_3, oc_block_3 in T.grid(T.int64(64), T.int64(3), T.int64(3), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(8), T.int64(1), T.int64(1), T.int64(1), T.int64(16), T.int64(7), T.int64(2), T.int64(2)):
                        with T.block("conv2d_NCHWc"):
                            v_n = T.axis.spatial(T.int64(1), n_0 + n_1 + n_2 + n_3)
                            v_oc_chunk = T.axis.spatial(T.int64(32), oc_chunk_0 * T.int64(16) + oc_chunk_1 * T.int64(16) + oc_chunk_2 * T.int64(16) + oc_chunk_3)
                            v_oh = T.axis.spatial(T.int64(14), oh_0 * T.int64(7) + oh_1 * T.int64(7) + oh_2 * T.int64(7) + oh_3)
                            v_ow = T.axis.spatial(T.int64(14), ow_0 * T.int64(14) + ow_1 * T.int64(2) + ow_2 * T.int64(2) + ow_3)
                            v_oc_block = T.axis.spatial(T.int64(16), oc_block_0 * T.int64(16) + oc_block_1 * T.int64(2) + oc_block_2 * T.int64(2) + oc_block_3)
                            v_ic = T.axis.reduce(T.int64(512), ic_0 * T.int64(8) + ic_1)
                            v_kh = T.axis.reduce(T.int64(3), kh_0 + kh_1)
                            v_kw = T.axis.reduce(T.int64(3), kw_0 + kw_1)
                            T.reads(data_pad[v_n, v_ic // T.int64(512), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(512)], p1[v_oc_chunk, v_ic // T.int64(512), v_kh, v_kw, v_ic % T.int64(512), v_oc_block])
                            T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                            T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                            with T.init():
                                conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = T.float32(0)
                            conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] + data_pad[v_n, v_ic // T.int64(512), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(512)] * p1[v_oc_chunk, v_ic // T.int64(512), v_kh, v_kw, v_ic % T.int64(512), v_oc_block]
                    for ax0, ax1, ax2, ax3, ax4 in T.grid(T.int64(1), T.int64(16), T.int64(7), T.int64(2), T.int64(2)):
                        with T.block("T_relu"):
                            v_ax0 = T.axis.spatial(T.int64(1), ax0)
                            v_ax1 = T.axis.spatial(T.int64(32), oc_chunk_0 * T.int64(16) + ax1)
                            v_ax2 = T.axis.spatial(T.int64(14), oh_0 * T.int64(7) + ax2)
                            v_ax3 = T.axis.spatial(T.int64(14), ow_1 * T.int64(2) + ax3)
                            v_ax4 = T.axis.spatial(T.int64(16), oc_block_1 * T.int64(2) + ax4)
                            T.reads(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4])
                            T.writes(T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                            T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.max(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] + p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4], T.float32(0))
b0 = sch.get_block(name="data_pad", func_name="main")
b1 = sch.get_block(name="conv2d_NCHWc", func_name="main")
b2 = sch.get_block(name="T_add", func_name="main")
b3 = sch.get_block(name="root", func_name="main")
sch.compute_inline(block=b2)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSRSRS")
l4, l5, l6, l7, l8, l9, l10, l11 = sch.get_loops(block=b1)
v12, v13, v14, v15 = sch.sample_perfect_tile(loop=l4, n=4, max_innermost_factor=64, decision=[1, 1, 1, 1])
l16, l17, l18, l19 = sch.split(loop=l4, factors=[v12, v13, v14, v15], preserve_unit_iters=True)
v20, v21, v22, v23 = sch.sample_perfect_tile(loop=l5, n=4, max_innermost_factor=64, decision=[2, 1, 1, 16])
l24, l25, l26, l27 = sch.split(loop=l5, factors=[v20, v21, v22, v23], preserve_unit_iters=True)
v28, v29, v30, v31 = sch.sample_perfect_tile(loop=l6, n=4, max_innermost_factor=64, decision=[2, 1, 1, 7])
l32, l33, l34, l35 = sch.split(loop=l6, factors=[v28, v29, v30, v31], preserve_unit_iters=True)
v36, v37, v38, v39 = sch.sample_perfect_tile(loop=l7, n=4, max_innermost_factor=64, decision=[1, 7, 1, 2])
l40, l41, l42, l43 = sch.split(loop=l7, factors=[v36, v37, v38, v39], preserve_unit_iters=True)
v44, v45, v46, v47 = sch.sample_perfect_tile(loop=l8, n=4, max_innermost_factor=64, decision=[1, 8, 1, 2])
l48, l49, l50, l51 = sch.split(loop=l8, factors=[v44, v45, v46, v47], preserve_unit_iters=True)
v52, v53 = sch.sample_perfect_tile(loop=l9, n=2, max_innermost_factor=64, decision=[64, 8])
l54, l55 = sch.split(loop=l9, factors=[v52, v53], preserve_unit_iters=True)
v56, v57 = sch.sample_perfect_tile(loop=l10, n=2, max_innermost_factor=64, decision=[3, 1])
l58, l59 = sch.split(loop=l10, factors=[v56, v57], preserve_unit_iters=True)
v60, v61 = sch.sample_perfect_tile(loop=l11, n=2, max_innermost_factor=64, decision=[3, 1])
l62, l63 = sch.split(loop=l11, factors=[v60, v61], preserve_unit_iters=True)
sch.reorder(l16, l24, l32, l40, l48, l17, l25, l33, l41, l49, l54, l58, l62, l18, l26, l34, l42, l50, l55, l59, l63, l19, l27, l35, l43, l51)
b64, = sch.get_consumers(block=b1)
sch.reverse_compute_at(block=b64, loop=l49, preserve_unit_loops=True, index=-1)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.vectorize", ann_val=64)
v65 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=1)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.unroll_explicit", ann_val=v65)
l66 = sch.sample_compute_location(block=b0, decision=2)
sch.compute_at(block=b0, loop=l66, preserve_unit_loops=True, index=-1)
2024-04-28 07:25:07 [INFO] [task_scheduler.cc:170] Design space #2:
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(1), T.int64(14), T.int64(14), T.int64(512)), "float32"), p1: T.Buffer((T.int64(32), T.int64(1), T.int64(3), T.int64(3), T.int64(512), T.int64(16)), "float32"), p2: T.Buffer((T.int64(1), T.int64(32), T.int64(1), T.int64(1), T.int64(16)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(32), T.int64(14), T.int64(14), T.int64(16)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        with T.block("root"):
            T.reads()
            T.writes()
            T.block_attr({"meta_schedule.parallel": 768, "meta_schedule.unroll_explicit": 0, "meta_schedule.vectorize": 64})
            data_pad = T.alloc_buffer((T.int64(1), T.int64(1), T.int64(16), T.int64(16), T.int64(512)))
            conv2d_NCHWc = T.alloc_buffer((T.int64(1), T.int64(32), T.int64(14), T.int64(14), T.int64(16)))
            for n_0, oc_chunk_0, oh_0 in T.grid(T.int64(1), T.int64(2), T.int64(2)):
                for ax0, ax1, ax2, ax3, ax4 in T.grid(T.int64(1), T.int64(1), T.int64(9), T.int64(16), T.int64(512)):
                    with T.block("data_pad"):
                        v_i0, v_i1 = T.axis.remap("SS", [ax0, ax1])
                        v_i2 = T.axis.spatial(T.int64(16), oh_0 * T.int64(7) + ax2)
                        v_i3, v_i4 = T.axis.remap("SS", [ax3, ax4])
                        T.reads(p0[v_i0, v_i1, v_i2 - T.int64(1), v_i3 - T.int64(1), v_i4])
                        T.writes(data_pad[v_i0, v_i1, v_i2, v_i3, v_i4])
                        data_pad[v_i0, v_i1, v_i2, v_i3, v_i4] = T.if_then_else(T.int64(1) <= v_i2 and v_i2 < T.int64(15) and T.int64(1) <= v_i3 and v_i3 < T.int64(15), p0[v_i0, v_i1, v_i2 - T.int64(1), v_i3 - T.int64(1), v_i4], T.float32(0))
                for ow_0, oc_block_0 in T.grid(T.int64(1), T.int64(1)):
                    for n_1, oc_chunk_1, oh_1, ow_1, oc_block_1, ic_0, kh_0, kw_0, n_2, oc_chunk_2, oh_2, ow_2, oc_block_2, ic_1, kh_1, kw_1, n_3, oc_chunk_3, oh_3, ow_3, oc_block_3 in T.grid(T.int64(1), T.int64(1), T.int64(1), T.int64(7), T.int64(8), T.int64(64), T.int64(3), T.int64(3), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(8), T.int64(1), T.int64(1), T.int64(1), T.int64(16), T.int64(7), T.int64(2), T.int64(2)):
                        with T.block("conv2d_NCHWc"):
                            v_n = T.axis.spatial(T.int64(1), n_0 + n_1 + n_2 + n_3)
                            v_oc_chunk = T.axis.spatial(T.int64(32), oc_chunk_0 * T.int64(16) + oc_chunk_1 * T.int64(16) + oc_chunk_2 * T.int64(16) + oc_chunk_3)
                            v_oh = T.axis.spatial(T.int64(14), oh_0 * T.int64(7) + oh_1 * T.int64(7) + oh_2 * T.int64(7) + oh_3)
                            v_ow = T.axis.spatial(T.int64(14), ow_0 * T.int64(14) + ow_1 * T.int64(2) + ow_2 * T.int64(2) + ow_3)
                            v_oc_block = T.axis.spatial(T.int64(16), oc_block_0 * T.int64(16) + oc_block_1 * T.int64(2) + oc_block_2 * T.int64(2) + oc_block_3)
                            v_ic = T.axis.reduce(T.int64(512), ic_0 * T.int64(8) + ic_1)
                            v_kh = T.axis.reduce(T.int64(3), kh_0 + kh_1)
                            v_kw = T.axis.reduce(T.int64(3), kw_0 + kw_1)
                            T.reads(data_pad[v_n, v_ic // T.int64(512), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(512)], p1[v_oc_chunk, v_ic // T.int64(512), v_kh, v_kw, v_ic % T.int64(512), v_oc_block])
                            T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                            T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                            with T.init():
                                conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = T.float32(0)
                            conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] + data_pad[v_n, v_ic // T.int64(512), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(512)] * p1[v_oc_chunk, v_ic // T.int64(512), v_kh, v_kw, v_ic % T.int64(512), v_oc_block]
                    for ax0, ax1, ax2, ax3, ax4 in T.grid(T.int64(1), T.int64(16), T.int64(7), T.int64(14), T.int64(16)):
                        with T.block("T_relu"):
                            v_ax0 = T.axis.spatial(T.int64(1), ax0)
                            v_ax1 = T.axis.spatial(T.int64(32), oc_chunk_0 * T.int64(16) + ax1)
                            v_ax2 = T.axis.spatial(T.int64(14), oh_0 * T.int64(7) + ax2)
                            v_ax3, v_ax4 = T.axis.remap("SS", [ax3, ax4])
                            T.reads(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4])
                            T.writes(T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                            T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.max(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] + p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4], T.float32(0))
b0 = sch.get_block(name="data_pad", func_name="main")
b1 = sch.get_block(name="conv2d_NCHWc", func_name="main")
b2 = sch.get_block(name="T_add", func_name="main")
b3 = sch.get_block(name="root", func_name="main")
sch.compute_inline(block=b2)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSRSRS")
l4, l5, l6, l7, l8, l9, l10, l11 = sch.get_loops(block=b1)
v12, v13, v14, v15 = sch.sample_perfect_tile(loop=l4, n=4, max_innermost_factor=64, decision=[1, 1, 1, 1])
l16, l17, l18, l19 = sch.split(loop=l4, factors=[v12, v13, v14, v15], preserve_unit_iters=True)
v20, v21, v22, v23 = sch.sample_perfect_tile(loop=l5, n=4, max_innermost_factor=64, decision=[2, 1, 1, 16])
l24, l25, l26, l27 = sch.split(loop=l5, factors=[v20, v21, v22, v23], preserve_unit_iters=True)
v28, v29, v30, v31 = sch.sample_perfect_tile(loop=l6, n=4, max_innermost_factor=64, decision=[2, 1, 1, 7])
l32, l33, l34, l35 = sch.split(loop=l6, factors=[v28, v29, v30, v31], preserve_unit_iters=True)
v36, v37, v38, v39 = sch.sample_perfect_tile(loop=l7, n=4, max_innermost_factor=64, decision=[1, 7, 1, 2])
l40, l41, l42, l43 = sch.split(loop=l7, factors=[v36, v37, v38, v39], preserve_unit_iters=True)
v44, v45, v46, v47 = sch.sample_perfect_tile(loop=l8, n=4, max_innermost_factor=64, decision=[1, 8, 1, 2])
l48, l49, l50, l51 = sch.split(loop=l8, factors=[v44, v45, v46, v47], preserve_unit_iters=True)
v52, v53 = sch.sample_perfect_tile(loop=l9, n=2, max_innermost_factor=64, decision=[64, 8])
l54, l55 = sch.split(loop=l9, factors=[v52, v53], preserve_unit_iters=True)
v56, v57 = sch.sample_perfect_tile(loop=l10, n=2, max_innermost_factor=64, decision=[3, 1])
l58, l59 = sch.split(loop=l10, factors=[v56, v57], preserve_unit_iters=True)
v60, v61 = sch.sample_perfect_tile(loop=l11, n=2, max_innermost_factor=64, decision=[3, 1])
l62, l63 = sch.split(loop=l11, factors=[v60, v61], preserve_unit_iters=True)
sch.reorder(l16, l24, l32, l40, l48, l17, l25, l33, l41, l49, l54, l58, l62, l18, l26, l34, l42, l50, l55, l59, l63, l19, l27, l35, l43, l51)
b64, = sch.get_consumers(block=b1)
sch.reverse_compute_at(block=b64, loop=l48, preserve_unit_loops=True, index=-1)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.vectorize", ann_val=64)
v65 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=0)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.unroll_explicit", ann_val=v65)
l66 = sch.sample_compute_location(block=b0, decision=2)
sch.compute_at(block=b0, loop=l66, preserve_unit_loops=True, index=-1)
2024-04-28 07:55:03 [INFO] [evolutionary_search.cc:713] Generating candidates......
2024-04-28 07:55:03 [INFO] [evolutionary_search.cc:715] Picked top 0 candidate(s) from database
2024-04-28 07:55:08 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x3861aa8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x37d26b8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x4dd4148)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x3201bb8)]: 0 failure(s)
2024-04-28 07:55:08 [INFO] [evolutionary_search.cc:723] Sampled 512 candidate(s)
2024-04-28 07:55:14 [INFO] [evolutionary_search.cc:621] Evolve iter #0 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x3861aa8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x37d26b8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x4dd4148)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x3201bb8)]: 0 failure(s)
2024-04-28 07:55:20 [INFO] [evolutionary_search.cc:621] Evolve iter #1 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x3861aa8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x37d26b8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x4dd4148)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x3201bb8)]: 0 failure(s)
2024-04-28 07:55:26 [INFO] [evolutionary_search.cc:621] Evolve iter #2 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x3861aa8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x37d26b8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x4dd4148)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x3201bb8)]: 0 failure(s)
2024-04-28 07:55:32 [INFO] [evolutionary_search.cc:621] Evolve iter #3 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x3861aa8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x37d26b8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x4dd4148)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x3201bb8)]: 0 failure(s)
2024-04-28 07:55:33 [INFO] [evolutionary_search.cc:649] Scores of the best 64 candidates:
[1 : 16]:	0.9999  0.9998  0.9992  0.9988  0.9987  0.9985  0.9985  0.9980  0.9979  0.9979  0.9973  0.9963  0.9962  0.9961  0.9958  0.9953
[17 : 32]:	0.9952  0.9940  0.9939  0.9934  0.9934  0.9933  0.9927  0.9923  0.9922  0.9915  0.9905  0.9900  0.9899  0.9889  0.9868  0.9868
[33 : 48]:	0.9864  0.9862  0.9855  0.9852  0.9852  0.9836  0.9823  0.9823  0.9821  0.9820  0.9819  0.9815  0.9810  0.9809  0.9805  0.9802
[49 : 64]:	0.9798  0.9795  0.9794  0.9791  0.9789  0.9783  0.9778  0.9769  0.9765  0.9761  0.9753  0.9751  0.9751  0.9741  0.9739  0.9737
2024-04-28 07:55:34 [INFO] [evolutionary_search.cc:727] Got 64 candidate(s) with evolutionary search
2024-04-28 07:55:34 [INFO] [evolutionary_search.cc:730] Sending 64 candidates(s) for measurement
2024-04-28 08:27:31 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #1: GFLOPs: 10.2332. Time: 90396.1337 us. Best GFLOPs: 10.2332
2024-04-28 08:27:31 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #2: GFLOPs: 26.4208. Time: 35012.0237 us. Best GFLOPs: 26.4208
2024-04-28 08:27:31 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #3: GFLOPs: 59.8816. Time: 15447.8849 us. Best GFLOPs: 59.8816
2024-04-28 08:27:31 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #4: GFLOPs: 83.2489. Time: 11111.8019 us. Best GFLOPs: 83.2489
2024-04-28 08:27:31 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #5: GFLOPs: 16.4051. Time: 56387.6107 us. Best GFLOPs: 83.2489
2024-04-28 08:27:31 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #6: GFLOPs: 18.2336. Time: 50733.0860 us. Best GFLOPs: 83.2489
2024-04-28 08:27:31 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #7: GFLOPs: 24.2446. Time: 38154.6613 us. Best GFLOPs: 83.2489
2024-04-28 08:27:31 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #8: GFLOPs: 11.2400. Time: 82298.9967 us. Best GFLOPs: 83.2489
2024-04-28 08:27:31 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #9: GFLOPs: 1.2864. Time: 719069.6427 us. Best GFLOPs: 83.2489
2024-04-28 08:27:31 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #10: GFLOPs: 76.7645. Time: 12050.4301 us. Best GFLOPs: 83.2489
2024-04-28 08:27:31 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #11: GFLOPs: 48.6820. Time: 19001.7945 us. Best GFLOPs: 83.2489
2024-04-28 08:27:31 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #12: GFLOPs: 14.1343. Time: 65446.9377 us. Best GFLOPs: 83.2489
2024-04-28 08:27:31 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #13: GFLOPs: 55.9186. Time: 16542.7054 us. Best GFLOPs: 83.2489
2024-04-28 08:27:31 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #14: GFLOPs: 1.1427. Time: 809516.0540 us. Best GFLOPs: 83.2489
2024-04-28 08:27:31 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #15: GFLOPs: 57.4278. Time: 16107.9642 us. Best GFLOPs: 83.2489
2024-04-28 08:27:31 [INFO] [task_scheduler.cc:121] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #16: Error in building:
LocalBuilder: Timeout, killed after 30.0 seconds
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(1), T.int64(14), T.int64(14), T.int64(512)), "float32"), p1: T.Buffer((T.int64(32), T.int64(1), T.int64(3), T.int64(3), T.int64(512), T.int64(16)), "float32"), p2: T.Buffer((T.int64(1), T.int64(32), T.int64(1), T.int64(1), T.int64(16)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(32), T.int64(14), T.int64(14), T.int64(16)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        data_pad = T.alloc_buffer((T.int64(1), T.int64(1), T.int64(16), T.int64(16), T.int64(512)))
        conv2d_NCHWc = T.alloc_buffer((T.int64(1), T.int64(32), T.int64(14), T.int64(14), T.int64(16)))
        for n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_fused_fused in T.parallel(T.int64(8), annotations={"pragma_auto_unroll_max_step": 512, "pragma_unroll_explicit": 1}):
            for ax0, ax1, ax2, ax3, ax4 in T.grid(T.int64(1), T.int64(1), T.int64(16), T.int64(9), T.int64(512)):
                with T.block("data_pad"):
                    v_i0, v_i1, v_i2 = T.axis.remap("SSS", [ax0, ax1, ax2])
                    v_i3 = T.axis.spatial(T.int64(16), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_fused_fused % T.int64(2) * T.int64(7) + ax3)
                    v_i4 = T.axis.spatial(T.int64(512), ax4)
                    T.reads(p0[v_i0, v_i1, v_i2 - T.int64(1), v_i3 - T.int64(1), v_i4])
                    T.writes(data_pad[v_i0, v_i1, v_i2, v_i3, v_i4])
                    data_pad[v_i0, v_i1, v_i2, v_i3, v_i4] = T.if_then_else(T.int64(1) <= v_i2 and v_i2 < T.int64(15) and T.int64(1) <= v_i3 and v_i3 < T.int64(15), p0[v_i0, v_i1, v_i2 - T.int64(1), v_i3 - T.int64(1), v_i4], T.float32(0))
            for oc_block_1 in range(T.int64(1)):
                for n_2_init, oc_chunk_2_init, oh_2_init, ow_2_init, oc_block_2_init, n_3_init, oc_chunk_3_init, oh_3_init, ow_3_init in T.grid(T.int64(1), T.int64(8), T.int64(1), T.int64(1), T.int64(2), T.int64(1), T.int64(2), T.int64(14), T.int64(7)):
                    for oc_block_3_fused_init in T.vectorized(T.int64(4)):
                        with T.block("conv2d_NCHWc_init"):
                            v_n = T.axis.spatial(T.int64(1), n_2_init + n_3_init)
                            v_oc_chunk = T.axis.spatial(T.int64(32), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_fused_fused % T.int64(4) // T.int64(2) * T.int64(16) + oc_chunk_2_init * T.int64(2) + oc_chunk_3_init)
                            v_oh = T.axis.spatial(T.int64(14), oh_2_init * T.int64(14) + oh_3_init)
                            v_ow = T.axis.spatial(T.int64(14), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_fused_fused % T.int64(2) * T.int64(7) + ow_2_init * T.int64(7) + ow_3_init)
                            v_oc_block = T.axis.spatial(T.int64(16), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_fused_fused // T.int64(4) * T.int64(8) + oc_block_1 * T.int64(8) + oc_block_2_init * T.int64(4) + oc_block_3_fused_init)
                            T.reads()
                            T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                            T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                            conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = T.float32(0)
                for ic_0, kh_0, kw_0, n_2, oc_chunk_2, oh_2, ow_2, oc_block_2, ic_1, kh_1, kw_1, n_3, oc_chunk_3, oh_3, ow_3 in T.grid(T.int64(128), T.int64(3), T.int64(3), T.int64(1), T.int64(8), T.int64(1), T.int64(1), T.int64(2), T.int64(4), T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(14), T.int64(7)):
                    for oc_block_3_fused in T.vectorized(T.int64(4)):
                        with T.block("conv2d_NCHWc_update"):
                            v_n = T.axis.spatial(T.int64(1), n_2 + n_3)
                            v_oc_chunk = T.axis.spatial(T.int64(32), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_fused_fused % T.int64(4) // T.int64(2) * T.int64(16) + oc_chunk_2 * T.int64(2) + oc_chunk_3)
                            v_oh = T.axis.spatial(T.int64(14), oh_2 * T.int64(14) + oh_3)
                            v_ow = T.axis.spatial(T.int64(14), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_fused_fused % T.int64(2) * T.int64(7) + ow_2 * T.int64(7) + ow_3)
                            v_oc_block = T.axis.spatial(T.int64(16), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_fused_fused // T.int64(4) * T.int64(8) + oc_block_1 * T.int64(8) + oc_block_2 * T.int64(4) + oc_block_3_fused)
                            v_ic = T.axis.reduce(T.int64(512), ic_0 * T.int64(4) + ic_1)
                            v_kh = T.axis.reduce(T.int64(3), kh_0 + kh_1)
                            v_kw = T.axis.reduce(T.int64(3), kw_0 + kw_1)
                            T.reads(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block], data_pad[v_n, v_ic // T.int64(512), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(512)], p1[v_oc_chunk, v_ic // T.int64(512), v_kh, v_kw, v_ic % T.int64(512), v_oc_block])
                            T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                            T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                            conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] + data_pad[v_n, v_ic // T.int64(512), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(512)] * p1[v_oc_chunk, v_ic // T.int64(512), v_kh, v_kw, v_ic % T.int64(512), v_oc_block]
        for ax0_ax1_ax2_ax3_ax4_fused_0 in T.parallel(T.int64(1568)):
            for ax0_ax1_ax2_ax3_ax4_fused_1 in T.vectorized(T.int64(64)):
                with T.block("T_relu"):
                    v_ax0 = T.axis.spatial(T.int64(1), T.int64(0))
                    v_ax1 = T.axis.spatial(T.int64(32), (ax0_ax1_ax2_ax3_ax4_fused_0 * T.int64(64) + ax0_ax1_ax2_ax3_ax4_fused_1) // T.int64(3136))
                    v_ax2 = T.axis.spatial(T.int64(14), (ax0_ax1_ax2_ax3_ax4_fused_0 * T.int64(64) + ax0_ax1_ax2_ax3_ax4_fused_1) % T.int64(3136) // T.int64(224))
                    v_ax3 = T.axis.spatial(T.int64(14), (ax0_ax1_ax2_ax3_ax4_fused_0 * T.int64(64) + ax0_ax1_ax2_ax3_ax4_fused_1) % T.int64(224) // T.int64(16))
                    v_ax4 = T.axis.spatial(T.int64(16), (ax0_ax1_ax2_ax3_ax4_fused_0 * T.int64(64) + ax0_ax1_ax2_ax3_ax4_fused_1) % T.int64(16))
                    T.reads(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4])
                    T.writes(T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                    T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.max(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] + p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4], T.float32(0))
b0 = sch.get_block(name="data_pad", func_name="main")
b1 = sch.get_block(name="conv2d_NCHWc", func_name="main")
b2 = sch.get_block(name="T_add", func_name="main")
b3 = sch.get_block(name="root", func_name="main")
sch.compute_inline(block=b2)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSRSRS")
l4, l5, l6, l7, l8, l9, l10, l11 = sch.get_loops(block=b1)
v12, v13, v14, v15 = sch.sample_perfect_tile(loop=l4, n=4, max_innermost_factor=64, decision=[1, 1, 1, 1])
l16, l17, l18, l19 = sch.split(loop=l4, factors=[v12, v13, v14, v15], preserve_unit_iters=True)
v20, v21, v22, v23 = sch.sample_perfect_tile(loop=l5, n=4, max_innermost_factor=64, decision=[1, 2, 8, 2])
l24, l25, l26, l27 = sch.split(loop=l5, factors=[v20, v21, v22, v23], preserve_unit_iters=True)
v28, v29, v30, v31 = sch.sample_perfect_tile(loop=l6, n=4, max_innermost_factor=64, decision=[1, 1, 1, 14])
l32, l33, l34, l35 = sch.split(loop=l6, factors=[v28, v29, v30, v31], preserve_unit_iters=True)
v36, v37, v38, v39 = sch.sample_perfect_tile(loop=l7, n=4, max_innermost_factor=64, decision=[1, 2, 1, 7])
l40, l41, l42, l43 = sch.split(loop=l7, factors=[v36, v37, v38, v39], preserve_unit_iters=True)
v44, v45, v46, v47 = sch.sample_perfect_tile(loop=l8, n=4, max_innermost_factor=64, decision=[2, 1, 2, 4])
l48, l49, l50, l51 = sch.split(loop=l8, factors=[v44, v45, v46, v47], preserve_unit_iters=True)
v52, v53 = sch.sample_perfect_tile(loop=l9, n=2, max_innermost_factor=64, decision=[128, 4])
l54, l55 = sch.split(loop=l9, factors=[v52, v53], preserve_unit_iters=True)
v56, v57 = sch.sample_perfect_tile(loop=l10, n=2, max_innermost_factor=64, decision=[3, 1])
l58, l59 = sch.split(loop=l10, factors=[v56, v57], preserve_unit_iters=True)
v60, v61 = sch.sample_perfect_tile(loop=l11, n=2, max_innermost_factor=64, decision=[3, 1])
l62, l63 = sch.split(loop=l11, factors=[v60, v61], preserve_unit_iters=True)
sch.reorder(l16, l24, l32, l40, l48, l17, l25, l33, l41, l49, l54, l58, l62, l18, l26, l34, l42, l50, l55, l59, l63, l19, l27, l35, l43, l51)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.vectorize", ann_val=64)
v64 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.unroll_explicit", ann_val=v64)
l65 = sch.sample_compute_location(block=b0, decision=8)
sch.compute_at(block=b0, loop=l65, preserve_unit_loops=True, index=-1)
sch.enter_postproc()
b66 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b66, ann_key="meta_schedule.parallel")
sch.unannotate(block_or_loop=b66, ann_key="meta_schedule.vectorize")
sch.unannotate(block_or_loop=b66, ann_key="meta_schedule.unroll_explicit")
b67, b68, b69 = sch.get_child_blocks(b66)
l70, l71, l72, l73, l74, l75, l76, l77, l78, l79, l80, l81, l82, l83 = sch.get_loops(block=b67)
l84 = sch.fuse(l70, l71, l72, l73, l74, l75, l76, l77, l78, preserve_unit_iters=True)
sch.parallel(loop=l84)
l85, l86, l87, l88, l89, l90, l91, l92, l93, l94, l95, l96, l97, l98, l99, l100, l101, l102 = sch.get_loops(block=b68)
l103 = sch.fuse(l85, preserve_unit_iters=True)
sch.parallel(loop=l103)
l104 = sch.fuse(l102, preserve_unit_iters=True)
sch.vectorize(loop=l104)
sch.annotate(block_or_loop=l103, ann_key="pragma_auto_unroll_max_step", ann_val=512)
sch.annotate(block_or_loop=l103, ann_key="pragma_unroll_explicit", ann_val=1)
l105, l106, l107, l108, l109 = sch.get_loops(block=b69)
l110 = sch.fuse(l105, l106, l107, l108, l109, preserve_unit_iters=True)
l111, l112 = sch.split(loop=l110, factors=[None, 64], preserve_unit_iters=True)
sch.parallel(loop=l111)
sch.vectorize(loop=l112)
b113 = sch.get_block(name="conv2d_NCHWc", func_name="main")
l114, l115, l116, l117, l118, l119, l120, l121, l122, l123, l124, l125, l126, l127, l128, l129, l130, l131 = sch.get_loops(block=b113)
b132 = sch.decompose_reduction(block=b113, loop=l116)
2024-04-28 08:27:31 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #17: GFLOPs: 17.6980. Time: 52268.4327 us. Best GFLOPs: 83.2489
2024-04-28 08:27:31 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #18: GFLOPs: 87.0879. Time: 10621.9702 us. Best GFLOPs: 87.0879
2024-04-28 08:27:31 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #19: GFLOPs: 1.4650. Time: 631444.5570 us. Best GFLOPs: 87.0879
2024-04-28 08:27:31 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #20: GFLOPs: 27.8039. Time: 33270.3268 us. Best GFLOPs: 87.0879
2024-04-28 08:27:31 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #21: GFLOPs: 39.7633. Time: 23263.7754 us. Best GFLOPs: 87.0879
2024-04-28 08:27:31 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #22: GFLOPs: 27.2727. Time: 33918.3280 us. Best GFLOPs: 87.0879
2024-04-28 08:27:31 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #23: GFLOPs: 8.6145. Time: 107381.7450 us. Best GFLOPs: 87.0879
2024-04-28 08:27:31 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #24: GFLOPs: 1.5307. Time: 604343.3103 us. Best GFLOPs: 87.0879
2024-04-28 08:27:31 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #25: GFLOPs: 8.8670. Time: 104324.1720 us. Best GFLOPs: 87.0879
2024-04-28 08:27:31 [INFO] [task_scheduler.cc:121] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #26: Error in running:
LocalRunner: Timeout, killed after 30 seconds

# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(1), T.int64(14), T.int64(14), T.int64(512)), "float32"), p1: T.Buffer((T.int64(32), T.int64(1), T.int64(3), T.int64(3), T.int64(512), T.int64(16)), "float32"), p2: T.Buffer((T.int64(1), T.int64(32), T.int64(1), T.int64(1), T.int64(16)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(32), T.int64(14), T.int64(14), T.int64(16)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        data_pad = T.alloc_buffer((T.int64(1), T.int64(1), T.int64(16), T.int64(16), T.int64(512)))
        conv2d_NCHWc = T.alloc_buffer((T.int64(1), T.int64(32), T.int64(14), T.int64(14), T.int64(16)))
        for n_0_oc_chunk_0_oh_0_fused_fused in T.parallel(T.int64(2), annotations={"pragma_auto_unroll_max_step": 16, "pragma_unroll_explicit": 1}):
            for ax0, ax1, ax2, ax3, ax4 in T.grid(T.int64(1), T.int64(1), T.int64(9), T.int64(16), T.int64(512)):
                with T.block("data_pad"):
                    v_i0, v_i1 = T.axis.remap("SS", [ax0, ax1])
                    v_i2 = T.axis.spatial(T.int64(16), n_0_oc_chunk_0_oh_0_fused_fused * T.int64(7) + ax2)
                    v_i3, v_i4 = T.axis.remap("SS", [ax3, ax4])
                    T.reads(p0[v_i0, v_i1, v_i2 - T.int64(1), v_i3 - T.int64(1), v_i4])
                    T.writes(data_pad[v_i0, v_i1, v_i2, v_i3, v_i4])
                    data_pad[v_i0, v_i1, v_i2, v_i3, v_i4] = T.if_then_else(T.int64(1) <= v_i2 and v_i2 < T.int64(15) and T.int64(1) <= v_i3 and v_i3 < T.int64(15), p0[v_i0, v_i1, v_i2 - T.int64(1), v_i3 - T.int64(1), v_i4], T.float32(0))
            for ow_0, oc_block_0, n_1, oc_chunk_1, oh_1, ow_1, oc_block_1 in T.grid(T.int64(2), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1)):
                for n_2_init, oc_chunk_2_init, oh_2_init, ow_2_init, oc_block_2_init, n_3_init, oc_chunk_3_init, oh_3_init, ow_3_init in T.grid(T.int64(1), T.int64(2), T.int64(7), T.int64(7), T.int64(4), T.int64(1), T.int64(16), T.int64(1), T.int64(1)):
                    for oc_block_3_fused_init in T.vectorized(T.int64(4)):
                        with T.block("conv2d_NCHWc_init"):
                            v_n = T.axis.spatial(T.int64(1), n_1 + n_2_init + n_3_init)
                            v_oc_chunk = T.axis.spatial(T.int64(32), oc_chunk_1 * T.int64(32) + oc_chunk_2_init * T.int64(16) + oc_chunk_3_init)
                            v_oh = T.axis.spatial(T.int64(14), n_0_oc_chunk_0_oh_0_fused_fused * T.int64(7) + oh_1 * T.int64(7) + oh_2_init + oh_3_init)
                            v_ow = T.axis.spatial(T.int64(14), ow_0 * T.int64(7) + ow_1 * T.int64(7) + ow_2_init + ow_3_init)
                            v_oc_block = T.axis.spatial(T.int64(16), oc_block_0 * T.int64(16) + oc_block_1 * T.int64(16) + oc_block_2_init * T.int64(4) + oc_block_3_fused_init)
                            T.reads()
                            T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                            T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                            conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = T.float32(0)
                for ic_0, kh_0, kw_0, n_2, oc_chunk_2, oh_2, ow_2, oc_block_2, ic_1, kh_1, kw_1, n_3, oc_chunk_3, oh_3, ow_3 in T.grid(T.int64(16), T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(7), T.int64(7), T.int64(4), T.int64(32), T.int64(3), T.int64(3), T.int64(1), T.int64(16), T.int64(1), T.int64(1)):
                    for oc_block_3_fused in T.vectorized(T.int64(4)):
                        with T.block("conv2d_NCHWc_update"):
                            v_n = T.axis.spatial(T.int64(1), n_1 + n_2 + n_3)
                            v_oc_chunk = T.axis.spatial(T.int64(32), oc_chunk_1 * T.int64(32) + oc_chunk_2 * T.int64(16) + oc_chunk_3)
                            v_oh = T.axis.spatial(T.int64(14), n_0_oc_chunk_0_oh_0_fused_fused * T.int64(7) + oh_1 * T.int64(7) + oh_2 + oh_3)
                            v_ow = T.axis.spatial(T.int64(14), ow_0 * T.int64(7) + ow_1 * T.int64(7) + ow_2 + ow_3)
                            v_oc_block = T.axis.spatial(T.int64(16), oc_block_0 * T.int64(16) + oc_block_1 * T.int64(16) + oc_block_2 * T.int64(4) + oc_block_3_fused)
                            v_ic = T.axis.reduce(T.int64(512), ic_0 * T.int64(32) + ic_1)
                            v_kh = T.axis.reduce(T.int64(3), kh_0 * T.int64(3) + kh_1)
                            v_kw = T.axis.reduce(T.int64(3), kw_0 * T.int64(3) + kw_1)
                            T.reads(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block], data_pad[v_n, v_ic // T.int64(512), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(512)], p1[v_oc_chunk, v_ic // T.int64(512), v_kh, v_kw, v_ic % T.int64(512), v_oc_block])
                            T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                            T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                            conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] + data_pad[v_n, v_ic // T.int64(512), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(512)] * p1[v_oc_chunk, v_ic // T.int64(512), v_kh, v_kw, v_ic % T.int64(512), v_oc_block]
                for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(32), T.int64(7), T.int64(7)):
                    for ax4_fused in T.vectorized(T.int64(16)):
                        with T.block("T_relu"):
                            v_ax0, v_ax1 = T.axis.remap("SS", [ax0, ax1])
                            v_ax2 = T.axis.spatial(T.int64(14), n_0_oc_chunk_0_oh_0_fused_fused * T.int64(7) + ax2)
                            v_ax3 = T.axis.spatial(T.int64(14), ow_0 * T.int64(7) + ax3)
                            v_ax4 = T.axis.spatial(T.int64(16), ax4_fused)
                            T.reads(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4])
                            T.writes(T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                            T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.max(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] + p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4], T.float32(0))
b0 = sch.get_block(name="data_pad", func_name="main")
b1 = sch.get_block(name="conv2d_NCHWc", func_name="main")
b2 = sch.get_block(name="T_add", func_name="main")
b3 = sch.get_block(name="root", func_name="main")
sch.compute_inline(block=b2)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSRSRS")
l4, l5, l6, l7, l8, l9, l10, l11 = sch.get_loops(block=b1)
v12, v13, v14, v15 = sch.sample_perfect_tile(loop=l4, n=4, max_innermost_factor=64, decision=[1, 1, 1, 1])
l16, l17, l18, l19 = sch.split(loop=l4, factors=[v12, v13, v14, v15], preserve_unit_iters=True)
v20, v21, v22, v23 = sch.sample_perfect_tile(loop=l5, n=4, max_innermost_factor=64, decision=[1, 1, 2, 16])
l24, l25, l26, l27 = sch.split(loop=l5, factors=[v20, v21, v22, v23], preserve_unit_iters=True)
v28, v29, v30, v31 = sch.sample_perfect_tile(loop=l6, n=4, max_innermost_factor=64, decision=[2, 1, 7, 1])
l32, l33, l34, l35 = sch.split(loop=l6, factors=[v28, v29, v30, v31], preserve_unit_iters=True)
v36, v37, v38, v39 = sch.sample_perfect_tile(loop=l7, n=4, max_innermost_factor=64, decision=[2, 1, 7, 1])
l40, l41, l42, l43 = sch.split(loop=l7, factors=[v36, v37, v38, v39], preserve_unit_iters=True)
v44, v45, v46, v47 = sch.sample_perfect_tile(loop=l8, n=4, max_innermost_factor=64, decision=[1, 1, 4, 4])
l48, l49, l50, l51 = sch.split(loop=l8, factors=[v44, v45, v46, v47], preserve_unit_iters=True)
v52, v53 = sch.sample_perfect_tile(loop=l9, n=2, max_innermost_factor=64, decision=[16, 32])
l54, l55 = sch.split(loop=l9, factors=[v52, v53], preserve_unit_iters=True)
v56, v57 = sch.sample_perfect_tile(loop=l10, n=2, max_innermost_factor=64, decision=[1, 3])
l58, l59 = sch.split(loop=l10, factors=[v56, v57], preserve_unit_iters=True)
v60, v61 = sch.sample_perfect_tile(loop=l11, n=2, max_innermost_factor=64, decision=[1, 3])
l62, l63 = sch.split(loop=l11, factors=[v60, v61], preserve_unit_iters=True)
sch.reorder(l16, l24, l32, l40, l48, l17, l25, l33, l41, l49, l54, l58, l62, l18, l26, l34, l42, l50, l55, l59, l63, l19, l27, l35, l43, l51)
b64, = sch.get_consumers(block=b1)
sch.reverse_compute_at(block=b64, loop=l49, preserve_unit_loops=True, index=-1)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.vectorize", ann_val=64)
v65 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=1)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.unroll_explicit", ann_val=v65)
l66 = sch.sample_compute_location(block=b0, decision=2)
sch.compute_at(block=b0, loop=l66, preserve_unit_loops=True, index=-1)
sch.enter_postproc()
b67 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b67, ann_key="meta_schedule.parallel")
sch.unannotate(block_or_loop=b67, ann_key="meta_schedule.vectorize")
sch.unannotate(block_or_loop=b67, ann_key="meta_schedule.unroll_explicit")
b68, b69, b70 = sch.get_child_blocks(b67)
l71, l72, l73, l74, l75, l76, l77, l78 = sch.get_loops(block=b68)
l79 = sch.fuse(l71, l72, l73, preserve_unit_iters=True)
sch.parallel(loop=l79)
l80, l81, l82, l83, l84, l85, l86, l87, l88, l89, l90, l91, l92, l93, l94, l95, l96, l97, l98, l99, l100, l101, l102, l103 = sch.get_loops(block=b69)
l104 = sch.fuse(l80, preserve_unit_iters=True)
sch.parallel(loop=l104)
l105 = sch.fuse(l103, preserve_unit_iters=True)
sch.vectorize(loop=l105)
sch.annotate(block_or_loop=l104, ann_key="pragma_auto_unroll_max_step", ann_val=16)
sch.annotate(block_or_loop=l104, ann_key="pragma_unroll_explicit", ann_val=1)
l106, l107, l108, l109, l110, l111, l112, l113, l114, l115, l116, l117, l118 = sch.get_loops(block=b70)
l119 = sch.fuse(l118, preserve_unit_iters=True)
sch.vectorize(loop=l119)
b120 = sch.get_block(name="conv2d_NCHWc", func_name="main")
l121, l122, l123, l124, l125, l126, l127, l128, l129, l130, l131, l132, l133, l134, l135, l136, l137, l138, l139, l140, l141, l142, l143, l144 = sch.get_loops(block=b120)
b145 = sch.decompose_reduction(block=b120, loop=l129)
2024-04-28 08:27:31 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #27: GFLOPs: 26.9710. Time: 34297.7013 us. Best GFLOPs: 87.0879
2024-04-28 08:27:31 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #28: GFLOPs: 90.0273. Time: 10275.1554 us. Best GFLOPs: 90.0273
2024-04-28 08:27:31 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #29: GFLOPs: 92.3889. Time: 10012.5125 us. Best GFLOPs: 92.3889
2024-04-28 08:27:31 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #30: GFLOPs: 16.7352. Time: 55275.3513 us. Best GFLOPs: 92.3889
2024-04-28 08:27:31 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #31: GFLOPs: 1.0890. Time: 849424.3160 us. Best GFLOPs: 92.3889
2024-04-28 08:27:31 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #32: GFLOPs: 35.5159. Time: 26045.9415 us. Best GFLOPs: 92.3889
2024-04-28 08:27:31 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #33: GFLOPs: 54.7770. Time: 16887.4578 us. Best GFLOPs: 92.3889
2024-04-28 08:27:31 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #34: GFLOPs: 4.0168. Time: 230296.6757 us. Best GFLOPs: 92.3889
2024-04-28 08:27:31 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #35: GFLOPs: 16.2813. Time: 56816.5517 us. Best GFLOPs: 92.3889
2024-04-28 08:27:31 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #36: GFLOPs: 17.9346. Time: 51578.6807 us. Best GFLOPs: 92.3889
2024-04-28 08:27:31 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #37: GFLOPs: 50.6087. Time: 18278.3853 us. Best GFLOPs: 92.3889
2024-04-28 08:27:31 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #38: GFLOPs: 113.4559. Time: 8153.3431 us. Best GFLOPs: 113.4559
2024-04-28 08:27:31 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #39: GFLOPs: 111.2491. Time: 8315.0726 us. Best GFLOPs: 113.4559
2024-04-28 08:27:31 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #40: GFLOPs: 18.5322. Time: 49915.5453 us. Best GFLOPs: 113.4559
2024-04-28 08:27:31 [INFO] [task_scheduler.cc:121] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #41: Error in building:
LocalBuilder: Timeout, killed after 30.0 seconds
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(1), T.int64(14), T.int64(14), T.int64(512)), "float32"), p1: T.Buffer((T.int64(32), T.int64(1), T.int64(3), T.int64(3), T.int64(512), T.int64(16)), "float32"), p2: T.Buffer((T.int64(1), T.int64(32), T.int64(1), T.int64(1), T.int64(16)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(32), T.int64(14), T.int64(14), T.int64(16)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        data_pad = T.alloc_buffer((T.int64(1), T.int64(1), T.int64(16), T.int64(16), T.int64(512)))
        conv2d_NCHWc = T.alloc_buffer((T.int64(1), T.int64(32), T.int64(14), T.int64(14), T.int64(16)))
        for n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused_fused in T.parallel(T.int64(16), annotations={"pragma_auto_unroll_max_step": 512, "pragma_unroll_explicit": 1}):
            for ax0, ax1, ax2, ax3, ax4 in T.grid(T.int64(1), T.int64(1), T.int64(9), T.int64(16), T.int64(512)):
                with T.block("data_pad"):
                    v_i0, v_i1 = T.axis.remap("SS", [ax0, ax1])
                    v_i2 = T.axis.spatial(T.int64(16), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused_fused % T.int64(4) // T.int64(2) * T.int64(7) + ax2)
                    v_i3, v_i4 = T.axis.remap("SS", [ax3, ax4])
                    T.reads(p0[v_i0, v_i1, v_i2 - T.int64(1), v_i3 - T.int64(1), v_i4])
                    T.writes(data_pad[v_i0, v_i1, v_i2, v_i3, v_i4])
                    data_pad[v_i0, v_i1, v_i2, v_i3, v_i4] = T.if_then_else(T.int64(1) <= v_i2 and v_i2 < T.int64(15) and T.int64(1) <= v_i3 and v_i3 < T.int64(15), p0[v_i0, v_i1, v_i2 - T.int64(1), v_i3 - T.int64(1), v_i4], T.float32(0))
            for n_2_init, oc_chunk_2_init, oh_2_init, ow_2_init, oc_block_2_init, n_3_init, oc_chunk_3_init, oh_3_init, ow_3_init in T.grid(T.int64(1), T.int64(2), T.int64(1), T.int64(7), T.int64(2), T.int64(1), T.int64(4), T.int64(7), T.int64(2)):
                for oc_block_3_fused_init in T.vectorized(T.int64(4)):
                    with T.block("conv2d_NCHWc_init"):
                        v_n = T.axis.spatial(T.int64(1), n_2_init + n_3_init)
                        v_oc_chunk = T.axis.spatial(T.int64(32), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused_fused // T.int64(4) * T.int64(8) + oc_chunk_2_init * T.int64(4) + oc_chunk_3_init)
                        v_oh = T.axis.spatial(T.int64(14), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused_fused % T.int64(4) // T.int64(2) * T.int64(7) + oh_2_init * T.int64(7) + oh_3_init)
                        v_ow = T.axis.spatial(T.int64(14), ow_2_init * T.int64(2) + ow_3_init)
                        v_oc_block = T.axis.spatial(T.int64(16), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused_fused % T.int64(2) * T.int64(8) + oc_block_2_init * T.int64(4) + oc_block_3_fused_init)
                        T.reads()
                        T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                        T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                        conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = T.float32(0)
            for ic_0, kh_0, kw_0, n_2, oc_chunk_2, oh_2, ow_2, oc_block_2, ic_1, kh_1, kw_1, n_3, oc_chunk_3, oh_3, ow_3 in T.grid(T.int64(128), T.int64(1), T.int64(3), T.int64(1), T.int64(2), T.int64(1), T.int64(7), T.int64(2), T.int64(4), T.int64(3), T.int64(1), T.int64(1), T.int64(4), T.int64(7), T.int64(2)):
                for oc_block_3_fused in T.vectorized(T.int64(4)):
                    with T.block("conv2d_NCHWc_update"):
                        v_n = T.axis.spatial(T.int64(1), n_2 + n_3)
                        v_oc_chunk = T.axis.spatial(T.int64(32), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused_fused // T.int64(4) * T.int64(8) + oc_chunk_2 * T.int64(4) + oc_chunk_3)
                        v_oh = T.axis.spatial(T.int64(14), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused_fused % T.int64(4) // T.int64(2) * T.int64(7) + oh_2 * T.int64(7) + oh_3)
                        v_ow = T.axis.spatial(T.int64(14), ow_2 * T.int64(2) + ow_3)
                        v_oc_block = T.axis.spatial(T.int64(16), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused_fused % T.int64(2) * T.int64(8) + oc_block_2 * T.int64(4) + oc_block_3_fused)
                        v_ic = T.axis.reduce(T.int64(512), ic_0 * T.int64(4) + ic_1)
                        v_kh = T.axis.reduce(T.int64(3), kh_0 * T.int64(3) + kh_1)
                        v_kw = T.axis.reduce(T.int64(3), kw_0 + kw_1)
                        T.reads(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block], data_pad[v_n, v_ic // T.int64(512), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(512)], p1[v_oc_chunk, v_ic // T.int64(512), v_kh, v_kw, v_ic % T.int64(512), v_oc_block])
                        T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                        T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                        conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] + data_pad[v_n, v_ic // T.int64(512), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(512)] * p1[v_oc_chunk, v_ic // T.int64(512), v_kh, v_kw, v_ic % T.int64(512), v_oc_block]
        for ax0_ax1_ax2_ax3_ax4_fused_0 in T.parallel(T.int64(1568)):
            for ax0_ax1_ax2_ax3_ax4_fused_1 in T.vectorized(T.int64(64)):
                with T.block("T_relu"):
                    v_ax0 = T.axis.spatial(T.int64(1), T.int64(0))
                    v_ax1 = T.axis.spatial(T.int64(32), (ax0_ax1_ax2_ax3_ax4_fused_0 * T.int64(64) + ax0_ax1_ax2_ax3_ax4_fused_1) // T.int64(3136))
                    v_ax2 = T.axis.spatial(T.int64(14), (ax0_ax1_ax2_ax3_ax4_fused_0 * T.int64(64) + ax0_ax1_ax2_ax3_ax4_fused_1) % T.int64(3136) // T.int64(224))
                    v_ax3 = T.axis.spatial(T.int64(14), (ax0_ax1_ax2_ax3_ax4_fused_0 * T.int64(64) + ax0_ax1_ax2_ax3_ax4_fused_1) % T.int64(224) // T.int64(16))
                    v_ax4 = T.axis.spatial(T.int64(16), (ax0_ax1_ax2_ax3_ax4_fused_0 * T.int64(64) + ax0_ax1_ax2_ax3_ax4_fused_1) % T.int64(16))
                    T.reads(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4])
                    T.writes(T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                    T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.max(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] + p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4], T.float32(0))
b0 = sch.get_block(name="data_pad", func_name="main")
b1 = sch.get_block(name="conv2d_NCHWc", func_name="main")
b2 = sch.get_block(name="T_add", func_name="main")
b3 = sch.get_block(name="root", func_name="main")
sch.compute_inline(block=b2)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSRSRS")
l4, l5, l6, l7, l8, l9, l10, l11 = sch.get_loops(block=b1)
v12, v13, v14, v15 = sch.sample_perfect_tile(loop=l4, n=4, max_innermost_factor=64, decision=[1, 1, 1, 1])
l16, l17, l18, l19 = sch.split(loop=l4, factors=[v12, v13, v14, v15], preserve_unit_iters=True)
v20, v21, v22, v23 = sch.sample_perfect_tile(loop=l5, n=4, max_innermost_factor=64, decision=[2, 2, 2, 4])
l24, l25, l26, l27 = sch.split(loop=l5, factors=[v20, v21, v22, v23], preserve_unit_iters=True)
v28, v29, v30, v31 = sch.sample_perfect_tile(loop=l6, n=4, max_innermost_factor=64, decision=[1, 2, 1, 7])
l32, l33, l34, l35 = sch.split(loop=l6, factors=[v28, v29, v30, v31], preserve_unit_iters=True)
v36, v37, v38, v39 = sch.sample_perfect_tile(loop=l7, n=4, max_innermost_factor=64, decision=[1, 1, 7, 2])
l40, l41, l42, l43 = sch.split(loop=l7, factors=[v36, v37, v38, v39], preserve_unit_iters=True)
v44, v45, v46, v47 = sch.sample_perfect_tile(loop=l8, n=4, max_innermost_factor=64, decision=[1, 2, 2, 4])
l48, l49, l50, l51 = sch.split(loop=l8, factors=[v44, v45, v46, v47], preserve_unit_iters=True)
v52, v53 = sch.sample_perfect_tile(loop=l9, n=2, max_innermost_factor=64, decision=[128, 4])
l54, l55 = sch.split(loop=l9, factors=[v52, v53], preserve_unit_iters=True)
v56, v57 = sch.sample_perfect_tile(loop=l10, n=2, max_innermost_factor=64, decision=[1, 3])
l58, l59 = sch.split(loop=l10, factors=[v56, v57], preserve_unit_iters=True)
v60, v61 = sch.sample_perfect_tile(loop=l11, n=2, max_innermost_factor=64, decision=[3, 1])
l62, l63 = sch.split(loop=l11, factors=[v60, v61], preserve_unit_iters=True)
sch.reorder(l16, l24, l32, l40, l48, l17, l25, l33, l41, l49, l54, l58, l62, l18, l26, l34, l42, l50, l55, l59, l63, l19, l27, l35, l43, l51)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.vectorize", ann_val=64)
v64 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.unroll_explicit", ann_val=v64)
l65 = sch.sample_compute_location(block=b0, decision=9)
sch.compute_at(block=b0, loop=l65, preserve_unit_loops=True, index=-1)
sch.enter_postproc()
b66 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b66, ann_key="meta_schedule.parallel")
sch.unannotate(block_or_loop=b66, ann_key="meta_schedule.vectorize")
sch.unannotate(block_or_loop=b66, ann_key="meta_schedule.unroll_explicit")
b67, b68, b69 = sch.get_child_blocks(b66)
l70, l71, l72, l73, l74, l75, l76, l77, l78, l79, l80, l81, l82, l83, l84 = sch.get_loops(block=b67)
l85 = sch.fuse(l70, l71, l72, l73, l74, l75, l76, l77, l78, l79, preserve_unit_iters=True)
sch.parallel(loop=l85)
l86, l87, l88, l89, l90, l91, l92, l93, l94, l95, l96, l97, l98, l99, l100, l101, l102 = sch.get_loops(block=b68)
l103 = sch.fuse(l86, preserve_unit_iters=True)
sch.parallel(loop=l103)
l104 = sch.fuse(l102, preserve_unit_iters=True)
sch.vectorize(loop=l104)
sch.annotate(block_or_loop=l103, ann_key="pragma_auto_unroll_max_step", ann_val=512)
sch.annotate(block_or_loop=l103, ann_key="pragma_unroll_explicit", ann_val=1)
l105, l106, l107, l108, l109 = sch.get_loops(block=b69)
l110 = sch.fuse(l105, l106, l107, l108, l109, preserve_unit_iters=True)
l111, l112 = sch.split(loop=l110, factors=[None, 64], preserve_unit_iters=True)
sch.parallel(loop=l111)
sch.vectorize(loop=l112)
b113 = sch.get_block(name="conv2d_NCHWc", func_name="main")
l114, l115, l116, l117, l118, l119, l120, l121, l122, l123, l124, l125, l126, l127, l128, l129, l130 = sch.get_loops(block=b113)
b131 = sch.decompose_reduction(block=b113, loop=l115)
2024-04-28 08:27:31 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #42: GFLOPs: 7.9303. Time: 116646.5853 us. Best GFLOPs: 113.4559
2024-04-28 08:27:31 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #43: GFLOPs: 39.6852. Time: 23309.5657 us. Best GFLOPs: 113.4559
2024-04-28 08:27:31 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #44: GFLOPs: 38.5824. Time: 23975.8376 us. Best GFLOPs: 113.4559
2024-04-28 08:27:31 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #45: GFLOPs: 2.3033. Time: 401611.9947 us. Best GFLOPs: 113.4559
2024-04-28 08:27:31 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #46: GFLOPs: 7.9132. Time: 116898.2703 us. Best GFLOPs: 113.4559
2024-04-28 08:27:31 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #47: GFLOPs: 8.9296. Time: 103593.6370 us. Best GFLOPs: 113.4559
2024-04-28 08:27:31 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #48: GFLOPs: 58.1646. Time: 15903.9209 us. Best GFLOPs: 113.4559
2024-04-28 08:27:31 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #49: GFLOPs: 11.8009. Time: 78387.8047 us. Best GFLOPs: 113.4559
2024-04-28 08:27:31 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #50: GFLOPs: 17.2629. Time: 53585.8223 us. Best GFLOPs: 113.4559
2024-04-28 08:27:31 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #51: GFLOPs: 26.5434. Time: 34850.2433 us. Best GFLOPs: 113.4559
2024-04-28 08:27:31 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #52: GFLOPs: 23.6088. Time: 39182.1773 us. Best GFLOPs: 113.4559
2024-04-28 08:27:31 [INFO] [task_scheduler.cc:121] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #53: Error in building:
LocalBuilder: Timeout, killed after 30.0 seconds
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(1), T.int64(14), T.int64(14), T.int64(512)), "float32"), p1: T.Buffer((T.int64(32), T.int64(1), T.int64(3), T.int64(3), T.int64(512), T.int64(16)), "float32"), p2: T.Buffer((T.int64(1), T.int64(32), T.int64(1), T.int64(1), T.int64(16)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(32), T.int64(14), T.int64(14), T.int64(16)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        data_pad = T.alloc_buffer((T.int64(1), T.int64(1), T.int64(16), T.int64(16), T.int64(512)))
        conv2d_NCHWc = T.alloc_buffer((T.int64(1), T.int64(32), T.int64(14), T.int64(14), T.int64(16)))
        for n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_fused_fused in T.parallel(T.int64(64), annotations={"pragma_auto_unroll_max_step": 512, "pragma_unroll_explicit": 1}):
            for ax0, ax1, ax2, ax3, ax4 in T.grid(T.int64(1), T.int64(1), T.int64(16), T.int64(9), T.int64(512)):
                with T.block("data_pad"):
                    v_i0, v_i1, v_i2 = T.axis.remap("SSS", [ax0, ax1, ax2])
                    v_i3 = T.axis.spatial(T.int64(16), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_fused_fused // T.int64(32) * T.int64(7) + ax3)
                    v_i4 = T.axis.spatial(T.int64(512), ax4)
                    T.reads(p0[v_i0, v_i1, v_i2 - T.int64(1), v_i3 - T.int64(1), v_i4])
                    T.writes(data_pad[v_i0, v_i1, v_i2, v_i3, v_i4])
                    data_pad[v_i0, v_i1, v_i2, v_i3, v_i4] = T.if_then_else(T.int64(1) <= v_i2 and v_i2 < T.int64(15) and T.int64(1) <= v_i3 and v_i3 < T.int64(15), p0[v_i0, v_i1, v_i2 - T.int64(1), v_i3 - T.int64(1), v_i4], T.float32(0))
            for oh_1, ow_1, oc_block_1 in T.grid(T.int64(1), T.int64(7), T.int64(4)):
                for n_2_init, oc_chunk_2_init, oh_2_init, ow_2_init, oc_block_2_init, n_3_init, oc_chunk_3_init, oh_3_init, ow_3_init, oc_block_3_init in T.grid(T.int64(1), T.int64(2), T.int64(1), T.int64(1), T.int64(2), T.int64(1), T.int64(1), T.int64(14), T.int64(1), T.int64(1)):
                    with T.block("conv2d_NCHWc_init"):
                        v_n = T.axis.spatial(T.int64(1), n_2_init + n_3_init)
                        v_oc_chunk = T.axis.spatial(T.int64(32), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_fused_fused % T.int64(16) * T.int64(2) + oc_chunk_2_init + oc_chunk_3_init)
                        v_oh = T.axis.spatial(T.int64(14), oh_1 * T.int64(14) + oh_2_init * T.int64(14) + oh_3_init)
                        v_ow = T.axis.spatial(T.int64(14), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_fused_fused // T.int64(32) * T.int64(7) + ow_1 + ow_2_init + ow_3_init)
                        v_oc_block = T.axis.spatial(T.int64(16), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_fused_fused % T.int64(32) // T.int64(16) * T.int64(8) + oc_block_1 * T.int64(2) + oc_block_2_init + oc_block_3_init)
                        T.reads()
                        T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                        T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                        conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = T.float32(0)
                for ic_0, kh_0, kw_0, n_2, oc_chunk_2, oh_2, ow_2, oc_block_2, ic_1, kh_1, kw_1, n_3, oc_chunk_3, oh_3, ow_3, oc_block_3 in T.grid(T.int64(256), T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(1), T.int64(1), T.int64(2), T.int64(2), T.int64(3), T.int64(3), T.int64(1), T.int64(1), T.int64(14), T.int64(1), T.int64(1)):
                    with T.block("conv2d_NCHWc_update"):
                        v_n = T.axis.spatial(T.int64(1), n_2 + n_3)
                        v_oc_chunk = T.axis.spatial(T.int64(32), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_fused_fused % T.int64(16) * T.int64(2) + oc_chunk_2 + oc_chunk_3)
                        v_oh = T.axis.spatial(T.int64(14), oh_1 * T.int64(14) + oh_2 * T.int64(14) + oh_3)
                        v_ow = T.axis.spatial(T.int64(14), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_fused_fused // T.int64(32) * T.int64(7) + ow_1 + ow_2 + ow_3)
                        v_oc_block = T.axis.spatial(T.int64(16), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_fused_fused % T.int64(32) // T.int64(16) * T.int64(8) + oc_block_1 * T.int64(2) + oc_block_2 + oc_block_3)
                        v_ic = T.axis.reduce(T.int64(512), ic_0 * T.int64(2) + ic_1)
                        v_kh = T.axis.reduce(T.int64(3), kh_0 * T.int64(3) + kh_1)
                        v_kw = T.axis.reduce(T.int64(3), kw_0 * T.int64(3) + kw_1)
                        T.reads(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block], data_pad[v_n, v_ic // T.int64(512), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(512)], p1[v_oc_chunk, v_ic // T.int64(512), v_kh, v_kw, v_ic % T.int64(512), v_oc_block])
                        T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                        T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                        conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] + data_pad[v_n, v_ic // T.int64(512), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(512)] * p1[v_oc_chunk, v_ic // T.int64(512), v_kh, v_kw, v_ic % T.int64(512), v_oc_block]
                for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(2), T.int64(14), T.int64(1)):
                    for ax4_fused in T.vectorized(T.int64(2)):
                        with T.block("T_relu"):
                            v_ax0 = T.axis.spatial(T.int64(1), ax0)
                            v_ax1 = T.axis.spatial(T.int64(32), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_fused_fused % T.int64(16) * T.int64(2) + ax1)
                            v_ax2 = T.axis.spatial(T.int64(14), ax2)
                            v_ax3 = T.axis.spatial(T.int64(14), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_fused_fused // T.int64(32) * T.int64(7) + ow_1 + ax3)
                            v_ax4 = T.axis.spatial(T.int64(16), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_fused_fused % T.int64(32) // T.int64(16) * T.int64(8) + oc_block_1 * T.int64(2) + ax4_fused)
                            T.reads(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4])
                            T.writes(T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                            T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.max(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] + p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4], T.float32(0))
b0 = sch.get_block(name="data_pad", func_name="main")
b1 = sch.get_block(name="conv2d_NCHWc", func_name="main")
b2 = sch.get_block(name="T_add", func_name="main")
b3 = sch.get_block(name="root", func_name="main")
sch.compute_inline(block=b2)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSRSRS")
l4, l5, l6, l7, l8, l9, l10, l11 = sch.get_loops(block=b1)
v12, v13, v14, v15 = sch.sample_perfect_tile(loop=l4, n=4, max_innermost_factor=64, decision=[1, 1, 1, 1])
l16, l17, l18, l19 = sch.split(loop=l4, factors=[v12, v13, v14, v15], preserve_unit_iters=True)
v20, v21, v22, v23 = sch.sample_perfect_tile(loop=l5, n=4, max_innermost_factor=64, decision=[1, 16, 2, 1])
l24, l25, l26, l27 = sch.split(loop=l5, factors=[v20, v21, v22, v23], preserve_unit_iters=True)
v28, v29, v30, v31 = sch.sample_perfect_tile(loop=l6, n=4, max_innermost_factor=64, decision=[1, 1, 1, 14])
l32, l33, l34, l35 = sch.split(loop=l6, factors=[v28, v29, v30, v31], preserve_unit_iters=True)
v36, v37, v38, v39 = sch.sample_perfect_tile(loop=l7, n=4, max_innermost_factor=64, decision=[2, 7, 1, 1])
l40, l41, l42, l43 = sch.split(loop=l7, factors=[v36, v37, v38, v39], preserve_unit_iters=True)
v44, v45, v46, v47 = sch.sample_perfect_tile(loop=l8, n=4, max_innermost_factor=64, decision=[2, 4, 2, 1])
l48, l49, l50, l51 = sch.split(loop=l8, factors=[v44, v45, v46, v47], preserve_unit_iters=True)
v52, v53 = sch.sample_perfect_tile(loop=l9, n=2, max_innermost_factor=64, decision=[256, 2])
l54, l55 = sch.split(loop=l9, factors=[v52, v53], preserve_unit_iters=True)
v56, v57 = sch.sample_perfect_tile(loop=l10, n=2, max_innermost_factor=64, decision=[1, 3])
l58, l59 = sch.split(loop=l10, factors=[v56, v57], preserve_unit_iters=True)
v60, v61 = sch.sample_perfect_tile(loop=l11, n=2, max_innermost_factor=64, decision=[1, 3])
l62, l63 = sch.split(loop=l11, factors=[v60, v61], preserve_unit_iters=True)
sch.reorder(l16, l24, l32, l40, l48, l17, l25, l33, l41, l49, l54, l58, l62, l18, l26, l34, l42, l50, l55, l59, l63, l19, l27, l35, l43, l51)
b64, = sch.get_consumers(block=b1)
sch.reverse_compute_at(block=b64, loop=l49, preserve_unit_loops=True, index=-1)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.vectorize", ann_val=64)
v65 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.unroll_explicit", ann_val=v65)
l66 = sch.sample_compute_location(block=b0, decision=6)
sch.compute_at(block=b0, loop=l66, preserve_unit_loops=True, index=-1)
sch.enter_postproc()
b67 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b67, ann_key="meta_schedule.parallel")
sch.unannotate(block_or_loop=b67, ann_key="meta_schedule.vectorize")
sch.unannotate(block_or_loop=b67, ann_key="meta_schedule.unroll_explicit")
b68, b69, b70 = sch.get_child_blocks(b67)
l71, l72, l73, l74, l75, l76, l77, l78, l79, l80, l81, l82 = sch.get_loops(block=b68)
l83 = sch.fuse(l71, l72, l73, l74, l75, l76, l77, preserve_unit_iters=True)
sch.parallel(loop=l83)
l84, l85, l86, l87, l88, l89, l90, l91, l92, l93, l94, l95, l96, l97, l98, l99, l100, l101, l102, l103 = sch.get_loops(block=b69)
l104 = sch.fuse(l84, preserve_unit_iters=True)
sch.parallel(loop=l104)
sch.annotate(block_or_loop=l104, ann_key="pragma_auto_unroll_max_step", ann_val=512)
sch.annotate(block_or_loop=l104, ann_key="pragma_unroll_explicit", ann_val=1)
l105, l106, l107, l108, l109, l110, l111, l112, l113 = sch.get_loops(block=b70)
l114 = sch.fuse(l113, preserve_unit_iters=True)
sch.vectorize(loop=l114)
b115 = sch.get_block(name="conv2d_NCHWc", func_name="main")
l116, l117, l118, l119, l120, l121, l122, l123, l124, l125, l126, l127, l128, l129, l130, l131, l132, l133, l134, l135 = sch.get_loops(block=b115)
b136 = sch.decompose_reduction(block=b115, loop=l120)
2024-04-28 08:27:31 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #54: GFLOPs: 7.5876. Time: 121914.7893 us. Best GFLOPs: 113.4559
2024-04-28 08:27:31 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #55: GFLOPs: 18.9543. Time: 48803.8977 us. Best GFLOPs: 113.4559
2024-04-28 08:27:31 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #56: GFLOPs: 21.5493. Time: 42926.8277 us. Best GFLOPs: 113.4559
2024-04-28 08:27:31 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #57: GFLOPs: 35.1117. Time: 26345.7412 us. Best GFLOPs: 113.4559
2024-04-28 08:27:31 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #58: GFLOPs: 3.7260. Time: 248267.2703 us. Best GFLOPs: 113.4559
2024-04-28 08:27:31 [INFO] [task_scheduler.cc:121] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #59: Error in building:
LocalBuilder: Timeout, killed after 30.0 seconds
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(1), T.int64(14), T.int64(14), T.int64(512)), "float32"), p1: T.Buffer((T.int64(32), T.int64(1), T.int64(3), T.int64(3), T.int64(512), T.int64(16)), "float32"), p2: T.Buffer((T.int64(1), T.int64(32), T.int64(1), T.int64(1), T.int64(16)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(32), T.int64(14), T.int64(14), T.int64(16)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        data_pad = T.alloc_buffer((T.int64(1), T.int64(1), T.int64(16), T.int64(16), T.int64(512)))
        conv2d_NCHWc = T.alloc_buffer((T.int64(1), T.int64(32), T.int64(14), T.int64(14), T.int64(16)))
        for n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused_fused in T.parallel(T.int64(64), annotations={"pragma_auto_unroll_max_step": 512, "pragma_unroll_explicit": 1}):
            for ax0, ax1, ax2, ax3, ax4 in T.grid(T.int64(1), T.int64(1), T.int64(16), T.int64(9), T.int64(512)):
                with T.block("data_pad"):
                    v_i0, v_i1, v_i2 = T.axis.remap("SSS", [ax0, ax1, ax2])
                    v_i3 = T.axis.spatial(T.int64(16), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused_fused % T.int64(8) // T.int64(4) * T.int64(7) + ax3)
                    v_i4 = T.axis.spatial(T.int64(512), ax4)
                    T.reads(p0[v_i0, v_i1, v_i2 - T.int64(1), v_i3 - T.int64(1), v_i4])
                    T.writes(data_pad[v_i0, v_i1, v_i2, v_i3, v_i4])
                    data_pad[v_i0, v_i1, v_i2, v_i3, v_i4] = T.if_then_else(T.int64(1) <= v_i2 and v_i2 < T.int64(15) and T.int64(1) <= v_i3 and v_i3 < T.int64(15), p0[v_i0, v_i1, v_i2 - T.int64(1), v_i3 - T.int64(1), v_i4], T.float32(0))
            for n_2_init, oc_chunk_2_init, oh_2_init, ow_2_init, oc_block_2_init, n_3_init, oc_chunk_3_init, oh_3_init, ow_3_init in T.grid(T.int64(1), T.int64(2), T.int64(14), T.int64(1), T.int64(2), T.int64(1), T.int64(2), T.int64(1), T.int64(7)):
                for oc_block_3_fused_init in T.vectorized(T.int64(2)):
                    with T.block("conv2d_NCHWc_init"):
                        v_n = T.axis.spatial(T.int64(1), n_2_init + n_3_init)
                        v_oc_chunk = T.axis.spatial(T.int64(32), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused_fused // T.int64(8) * T.int64(4) + oc_chunk_2_init * T.int64(2) + oc_chunk_3_init)
                        v_oh = T.axis.spatial(T.int64(14), oh_2_init + oh_3_init)
                        v_ow = T.axis.spatial(T.int64(14), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused_fused % T.int64(8) // T.int64(4) * T.int64(7) + ow_2_init * T.int64(7) + ow_3_init)
                        v_oc_block = T.axis.spatial(T.int64(16), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused_fused % T.int64(4) * T.int64(4) + oc_block_2_init * T.int64(2) + oc_block_3_fused_init)
                        T.reads()
                        T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                        T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                        conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = T.float32(0)
            for ic_0, kh_0, kw_0, n_2, oc_chunk_2, oh_2, ow_2, oc_block_2, ic_1, kh_1, kw_1, n_3, oc_chunk_3, oh_3, ow_3 in T.grid(T.int64(256), T.int64(3), T.int64(1), T.int64(1), T.int64(2), T.int64(14), T.int64(1), T.int64(2), T.int64(2), T.int64(1), T.int64(3), T.int64(1), T.int64(2), T.int64(1), T.int64(7)):
                for oc_block_3_fused in T.vectorized(T.int64(2)):
                    with T.block("conv2d_NCHWc_update"):
                        v_n = T.axis.spatial(T.int64(1), n_2 + n_3)
                        v_oc_chunk = T.axis.spatial(T.int64(32), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused_fused // T.int64(8) * T.int64(4) + oc_chunk_2 * T.int64(2) + oc_chunk_3)
                        v_oh = T.axis.spatial(T.int64(14), oh_2 + oh_3)
                        v_ow = T.axis.spatial(T.int64(14), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused_fused % T.int64(8) // T.int64(4) * T.int64(7) + ow_2 * T.int64(7) + ow_3)
                        v_oc_block = T.axis.spatial(T.int64(16), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused_fused % T.int64(4) * T.int64(4) + oc_block_2 * T.int64(2) + oc_block_3_fused)
                        v_ic = T.axis.reduce(T.int64(512), ic_0 * T.int64(2) + ic_1)
                        v_kh = T.axis.reduce(T.int64(3), kh_0 + kh_1)
                        v_kw = T.axis.reduce(T.int64(3), kw_0 * T.int64(3) + kw_1)
                        T.reads(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block], data_pad[v_n, v_ic // T.int64(512), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(512)], p1[v_oc_chunk, v_ic // T.int64(512), v_kh, v_kw, v_ic % T.int64(512), v_oc_block])
                        T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                        T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                        conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] + data_pad[v_n, v_ic // T.int64(512), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(512)] * p1[v_oc_chunk, v_ic // T.int64(512), v_kh, v_kw, v_ic % T.int64(512), v_oc_block]
            for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(4), T.int64(14), T.int64(7)):
                for ax4_fused in T.vectorized(T.int64(4)):
                    with T.block("T_relu"):
                        v_ax0 = T.axis.spatial(T.int64(1), ax0)
                        v_ax1 = T.axis.spatial(T.int64(32), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused_fused // T.int64(8) * T.int64(4) + ax1)
                        v_ax2 = T.axis.spatial(T.int64(14), ax2)
                        v_ax3 = T.axis.spatial(T.int64(14), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused_fused % T.int64(8) // T.int64(4) * T.int64(7) + ax3)
                        v_ax4 = T.axis.spatial(T.int64(16), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused_fused % T.int64(4) * T.int64(4) + ax4_fused)
                        T.reads(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4])
                        T.writes(T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                        T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.max(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] + p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4], T.float32(0))
b0 = sch.get_block(name="data_pad", func_name="main")
b1 = sch.get_block(name="conv2d_NCHWc", func_name="main")
b2 = sch.get_block(name="T_add", func_name="main")
b3 = sch.get_block(name="root", func_name="main")
sch.compute_inline(block=b2)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSRSRS")
l4, l5, l6, l7, l8, l9, l10, l11 = sch.get_loops(block=b1)
v12, v13, v14, v15 = sch.sample_perfect_tile(loop=l4, n=4, max_innermost_factor=64, decision=[1, 1, 1, 1])
l16, l17, l18, l19 = sch.split(loop=l4, factors=[v12, v13, v14, v15], preserve_unit_iters=True)
v20, v21, v22, v23 = sch.sample_perfect_tile(loop=l5, n=4, max_innermost_factor=64, decision=[8, 1, 2, 2])
l24, l25, l26, l27 = sch.split(loop=l5, factors=[v20, v21, v22, v23], preserve_unit_iters=True)
v28, v29, v30, v31 = sch.sample_perfect_tile(loop=l6, n=4, max_innermost_factor=64, decision=[1, 1, 14, 1])
l32, l33, l34, l35 = sch.split(loop=l6, factors=[v28, v29, v30, v31], preserve_unit_iters=True)
v36, v37, v38, v39 = sch.sample_perfect_tile(loop=l7, n=4, max_innermost_factor=64, decision=[2, 1, 1, 7])
l40, l41, l42, l43 = sch.split(loop=l7, factors=[v36, v37, v38, v39], preserve_unit_iters=True)
v44, v45, v46, v47 = sch.sample_perfect_tile(loop=l8, n=4, max_innermost_factor=64, decision=[2, 2, 2, 2])
l48, l49, l50, l51 = sch.split(loop=l8, factors=[v44, v45, v46, v47], preserve_unit_iters=True)
v52, v53 = sch.sample_perfect_tile(loop=l9, n=2, max_innermost_factor=64, decision=[256, 2])
l54, l55 = sch.split(loop=l9, factors=[v52, v53], preserve_unit_iters=True)
v56, v57 = sch.sample_perfect_tile(loop=l10, n=2, max_innermost_factor=64, decision=[3, 1])
l58, l59 = sch.split(loop=l10, factors=[v56, v57], preserve_unit_iters=True)
v60, v61 = sch.sample_perfect_tile(loop=l11, n=2, max_innermost_factor=64, decision=[1, 3])
l62, l63 = sch.split(loop=l11, factors=[v60, v61], preserve_unit_iters=True)
sch.reorder(l16, l24, l32, l40, l48, l17, l25, l33, l41, l49, l54, l58, l62, l18, l26, l34, l42, l50, l55, l59, l63, l19, l27, l35, l43, l51)
b64, = sch.get_consumers(block=b1)
sch.reverse_compute_at(block=b64, loop=l49, preserve_unit_loops=True, index=-1)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.vectorize", ann_val=64)
v65 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.unroll_explicit", ann_val=v65)
l66 = sch.sample_compute_location(block=b0, decision=9)
sch.compute_at(block=b0, loop=l66, preserve_unit_loops=True, index=-1)
sch.enter_postproc()
b67 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b67, ann_key="meta_schedule.parallel")
sch.unannotate(block_or_loop=b67, ann_key="meta_schedule.vectorize")
sch.unannotate(block_or_loop=b67, ann_key="meta_schedule.unroll_explicit")
b68, b69, b70 = sch.get_child_blocks(b67)
l71, l72, l73, l74, l75, l76, l77, l78, l79, l80, l81, l82, l83, l84, l85 = sch.get_loops(block=b68)
l86 = sch.fuse(l71, l72, l73, l74, l75, l76, l77, l78, l79, l80, preserve_unit_iters=True)
sch.parallel(loop=l86)
l87, l88, l89, l90, l91, l92, l93, l94, l95, l96, l97, l98, l99, l100, l101, l102, l103 = sch.get_loops(block=b69)
l104 = sch.fuse(l87, preserve_unit_iters=True)
sch.parallel(loop=l104)
l105 = sch.fuse(l103, preserve_unit_iters=True)
sch.vectorize(loop=l105)
sch.annotate(block_or_loop=l104, ann_key="pragma_auto_unroll_max_step", ann_val=512)
sch.annotate(block_or_loop=l104, ann_key="pragma_unroll_explicit", ann_val=1)
l106, l107, l108, l109, l110, l111 = sch.get_loops(block=b70)
l112 = sch.fuse(l111, preserve_unit_iters=True)
sch.vectorize(loop=l112)
b113 = sch.get_block(name="conv2d_NCHWc", func_name="main")
l114, l115, l116, l117, l118, l119, l120, l121, l122, l123, l124, l125, l126, l127, l128, l129, l130 = sch.get_loops(block=b113)
b131 = sch.decompose_reduction(block=b113, loop=l115)
2024-04-28 08:27:31 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #60: GFLOPs: 10.1085. Time: 91511.4047 us. Best GFLOPs: 113.4559
2024-04-28 08:27:31 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #61: GFLOPs: 11.6675. Time: 79284.1900 us. Best GFLOPs: 113.4559
2024-04-28 08:27:31 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #62: GFLOPs: 2.7218. Time: 339866.0503 us. Best GFLOPs: 113.4559
2024-04-28 08:27:31 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #63: GFLOPs: 38.4405. Time: 24064.3438 us. Best GFLOPs: 113.4559
2024-04-28 08:27:31 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #64: GFLOPs: 9.9691. Time: 92791.2433 us. Best GFLOPs: 113.4559
2024-04-28 08:30:47 [INFO] [evolutionary_search.cc:713] Generating candidates......
2024-04-28 08:30:48 [INFO] [evolutionary_search.cc:715] Picked top 59 candidate(s) from database
2024-04-28 08:30:52 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x3861aa8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x37d26b8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x4dd4148)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x3201bb8)]: 0 failure(s)
2024-04-28 08:30:52 [INFO] [evolutionary_search.cc:723] Sampled 453 candidate(s)
2024-04-28 08:31:04 [INFO] [evolutionary_search.cc:621] Evolve iter #0 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x3861aa8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x37d26b8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x4dd4148)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x3201bb8)]: 0 failure(s)
2024-04-28 08:31:16 [INFO] [evolutionary_search.cc:621] Evolve iter #1 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x3861aa8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x37d26b8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x4dd4148)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x3201bb8)]: 0 failure(s)
2024-04-28 08:31:28 [INFO] [evolutionary_search.cc:621] Evolve iter #2 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x3861aa8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x37d26b8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x4dd4148)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x3201bb8)]: 0 failure(s)
2024-04-28 08:31:40 [INFO] [evolutionary_search.cc:621] Evolve iter #3 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x3861aa8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x37d26b8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x4dd4148)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x3201bb8)]: 0 failure(s)
2024-04-28 08:31:47 [INFO] [evolutionary_search.cc:649] Scores of the best 64 candidates:
[1 : 16]:	0.9969  0.9969  0.9969  0.9969  0.9969  0.9969  0.9879  0.9879  0.9867  0.9863  0.9251  0.9232  0.9228  0.9155  0.9155  0.9126
[17 : 32]:	0.8884  0.8884  0.8807  0.8806  0.8806  0.8806  0.8719  0.8708  0.8499  0.8179  0.8147  0.8134  0.8109  0.8109  0.8057  0.8032
[33 : 48]:	0.7821  0.7757  0.7757  0.7746  0.7739  0.7678  0.7678  0.7678  0.7673  0.7673  0.7620  0.7620  0.7620  0.7613  0.7566  0.7555
[49 : 64]:	0.7555  0.7555  0.7534  0.7526  0.7512  0.7511  0.7469  0.7406  0.7384  0.7364  0.7334  0.7271  0.7262  0.7241  0.7229  0.7141
2024-04-28 08:31:48 [INFO] [evolutionary_search.cc:727] Got 64 candidate(s) with evolutionary search
2024-04-28 08:31:48 [INFO] [evolutionary_search.cc:730] Sending 64 candidates(s) for measurement
2024-04-28 08:33:32 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #65: GFLOPs: 99.3769. Time: 9308.4493 us. Best GFLOPs: 113.4559
2024-04-28 08:33:32 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #66: GFLOPs: 18.4752. Time: 50069.4393 us. Best GFLOPs: 113.4559
2024-04-28 08:33:32 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #67: GFLOPs: 111.7860. Time: 8275.1410 us. Best GFLOPs: 113.4559
2024-04-28 08:33:32 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #68: GFLOPs: 110.7948. Time: 8349.1686 us. Best GFLOPs: 113.4559
2024-04-28 08:33:32 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #69: GFLOPs: 111.8504. Time: 8270.3718 us. Best GFLOPs: 113.4559
2024-04-28 08:33:32 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #70: GFLOPs: 89.3198. Time: 10356.5453 us. Best GFLOPs: 113.4559
2024-04-28 08:33:32 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #71: GFLOPs: 112.4799. Time: 8224.0863 us. Best GFLOPs: 113.4559
2024-04-28 08:33:32 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #72: GFLOPs: 112.4813. Time: 8223.9902 us. Best GFLOPs: 113.4559
2024-04-28 08:33:32 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #73: GFLOPs: 93.1784. Time: 9927.6784 us. Best GFLOPs: 113.4559
2024-04-28 08:33:32 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #74: GFLOPs: 39.8071. Time: 23238.1987 us. Best GFLOPs: 113.4559
2024-04-28 08:33:32 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #75: GFLOPs: 66.4506. Time: 13920.7901 us. Best GFLOPs: 113.4559
2024-04-28 08:33:32 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #76: GFLOPs: 43.1540. Time: 21435.8894 us. Best GFLOPs: 113.4559
2024-04-28 08:33:32 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #77: GFLOPs: 34.5271. Time: 26791.8167 us. Best GFLOPs: 113.4559
2024-04-28 08:33:32 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #78: GFLOPs: 36.3255. Time: 25465.4433 us. Best GFLOPs: 113.4559
2024-04-28 08:33:32 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #79: GFLOPs: 53.6840. Time: 17231.3045 us. Best GFLOPs: 113.4559
2024-04-28 08:33:32 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #80: GFLOPs: 54.0341. Time: 17119.6627 us. Best GFLOPs: 113.4559
2024-04-28 08:33:32 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #81: GFLOPs: 186.8079. Time: 4951.8498 us. Best GFLOPs: 186.8079
2024-04-28 08:33:32 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #82: GFLOPs: 176.1780. Time: 5250.6251 us. Best GFLOPs: 186.8079
2024-04-28 08:33:32 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #83: GFLOPs: 106.1430. Time: 8715.0838 us. Best GFLOPs: 186.8079
2024-04-28 08:33:32 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #84: GFLOPs: 62.9762. Time: 14688.7881 us. Best GFLOPs: 186.8079
2024-04-28 08:33:32 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #85: GFLOPs: 66.3548. Time: 13940.8924 us. Best GFLOPs: 186.8079
2024-04-28 08:33:32 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #86: GFLOPs: 106.8559. Time: 8656.9396 us. Best GFLOPs: 186.8079
2024-04-28 08:33:32 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #87: GFLOPs: 18.4061. Time: 50257.4250 us. Best GFLOPs: 186.8079
2024-04-28 08:33:32 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #88: GFLOPs: 44.4734. Time: 20799.9774 us. Best GFLOPs: 186.8079
2024-04-28 08:33:32 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #89: GFLOPs: 16.1426. Time: 57304.6027 us. Best GFLOPs: 186.8079
2024-04-28 08:33:32 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #90: GFLOPs: 36.0382. Time: 25668.4837 us. Best GFLOPs: 186.8079
2024-04-28 08:33:32 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #91: GFLOPs: 16.6283. Time: 55630.6953 us. Best GFLOPs: 186.8079
2024-04-28 08:33:32 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #92: GFLOPs: 103.5082. Time: 8936.9199 us. Best GFLOPs: 186.8079
2024-04-28 08:33:32 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #93: GFLOPs: 79.7210. Time: 11603.5303 us. Best GFLOPs: 186.8079
2024-04-28 08:33:32 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #94: GFLOPs: 89.3559. Time: 10352.3639 us. Best GFLOPs: 186.8079
2024-04-28 08:33:32 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #95: GFLOPs: 49.3999. Time: 18725.6487 us. Best GFLOPs: 186.8079
2024-04-28 08:33:32 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #96: GFLOPs: 83.1089. Time: 11130.5117 us. Best GFLOPs: 186.8079
2024-04-28 08:33:32 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #97: GFLOPs: 150.6544. Time: 6140.1789 us. Best GFLOPs: 186.8079
2024-04-28 08:33:32 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #98: GFLOPs: 73.7973. Time: 12534.9333 us. Best GFLOPs: 186.8079
2024-04-28 08:33:32 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #99: GFLOPs: 73.8272. Time: 12529.8594 us. Best GFLOPs: 186.8079
2024-04-28 08:33:32 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #100: GFLOPs: 134.4065. Time: 6882.4416 us. Best GFLOPs: 186.8079
2024-04-28 08:33:32 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #101: GFLOPs: 73.6779. Time: 12555.2574 us. Best GFLOPs: 186.8079
2024-04-28 08:33:32 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #102: GFLOPs: 70.8476. Time: 13056.8293 us. Best GFLOPs: 186.8079
2024-04-28 08:33:32 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #103: GFLOPs: 81.1900. Time: 11393.5792 us. Best GFLOPs: 186.8079
2024-04-28 08:33:32 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #104: GFLOPs: 69.9811. Time: 13218.4919 us. Best GFLOPs: 186.8079
2024-04-28 08:33:32 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #105: GFLOPs: 68.1688. Time: 13569.9189 us. Best GFLOPs: 186.8079
2024-04-28 08:33:32 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #106: GFLOPs: 141.8488. Time: 6521.3414 us. Best GFLOPs: 186.8079
2024-04-28 08:33:32 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #107: GFLOPs: 81.7819. Time: 11311.1157 us. Best GFLOPs: 186.8079
2024-04-28 08:33:32 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #108: GFLOPs: 96.1253. Time: 9623.3197 us. Best GFLOPs: 186.8079
2024-04-28 08:33:32 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #109: GFLOPs: 91.9232. Time: 10063.2342 us. Best GFLOPs: 186.8079
2024-04-28 08:33:32 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #110: GFLOPs: 57.1522. Time: 16185.6254 us. Best GFLOPs: 186.8079
2024-04-28 08:33:32 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #111: GFLOPs: 77.3479. Time: 11959.5251 us. Best GFLOPs: 186.8079
2024-04-28 08:33:32 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #112: GFLOPs: 50.2220. Time: 18419.1222 us. Best GFLOPs: 186.8079
2024-04-28 08:33:32 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #113: GFLOPs: 47.3719. Time: 19527.2900 us. Best GFLOPs: 186.8079
2024-04-28 08:33:32 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #114: GFLOPs: 18.1318. Time: 51017.8540 us. Best GFLOPs: 186.8079
2024-04-28 08:33:32 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #115: GFLOPs: 68.3512. Time: 13533.6994 us. Best GFLOPs: 186.8079
2024-04-28 08:33:32 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #116: GFLOPs: 98.6544. Time: 9376.6175 us. Best GFLOPs: 186.8079
2024-04-28 08:33:32 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #117: GFLOPs: 123.4498. Time: 7493.2844 us. Best GFLOPs: 186.8079
2024-04-28 08:33:32 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #118: GFLOPs: 59.8432. Time: 15457.8121 us. Best GFLOPs: 186.8079
2024-04-28 08:33:32 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #119: GFLOPs: 16.4650. Time: 56182.4043 us. Best GFLOPs: 186.8079
2024-04-28 08:33:32 [INFO] [task_scheduler.cc:121] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #120: Error in building:
LocalBuilder: Timeout, killed after 30.0 seconds
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(1), T.int64(14), T.int64(14), T.int64(512)), "float32"), p1: T.Buffer((T.int64(32), T.int64(1), T.int64(3), T.int64(3), T.int64(512), T.int64(16)), "float32"), p2: T.Buffer((T.int64(1), T.int64(32), T.int64(1), T.int64(1), T.int64(16)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(32), T.int64(14), T.int64(14), T.int64(16)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        data_pad = T.alloc_buffer((T.int64(1), T.int64(1), T.int64(16), T.int64(16), T.int64(512)))
        conv2d_NCHWc = T.alloc_buffer((T.int64(1), T.int64(32), T.int64(14), T.int64(14), T.int64(16)))
        for n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_fused_fused in T.parallel(T.int64(448), annotations={"pragma_auto_unroll_max_step": 512, "pragma_unroll_explicit": 1}):
            for ax0, ax1, ax2, ax3, ax4 in T.grid(T.int64(1), T.int64(1), T.int64(16), T.int64(4), T.int64(512)):
                with T.block("data_pad"):
                    v_i0, v_i1, v_i2 = T.axis.remap("SSS", [ax0, ax1, ax2])
                    v_i3 = T.axis.spatial(T.int64(16), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_fused_fused % T.int64(7) * T.int64(2) + ax3)
                    v_i4 = T.axis.spatial(T.int64(512), ax4)
                    T.reads(p0[v_i0, v_i1, v_i2 - T.int64(1), v_i3 - T.int64(1), v_i4])
                    T.writes(data_pad[v_i0, v_i1, v_i2, v_i3, v_i4])
                    data_pad[v_i0, v_i1, v_i2, v_i3, v_i4] = T.if_then_else(T.int64(1) <= v_i2 and v_i2 < T.int64(15) and T.int64(1) <= v_i3 and v_i3 < T.int64(15), p0[v_i0, v_i1, v_i2 - T.int64(1), v_i3 - T.int64(1), v_i4], T.float32(0))
            for oc_block_1 in range(T.int64(1)):
                for n_2_init, oc_chunk_2_init, oh_2_init, ow_2_init, oc_block_2_init, n_3_init, oc_chunk_3_init, oh_3_init, ow_3_init, oc_block_3_init in T.grid(T.int64(1), T.int64(2), T.int64(7), T.int64(1), T.int64(4), T.int64(1), T.int64(1), T.int64(2), T.int64(2), T.int64(1)):
                    with T.block("conv2d_NCHWc_init"):
                        v_n = T.axis.spatial(T.int64(1), n_2_init + n_3_init)
                        v_oc_chunk = T.axis.spatial(T.int64(32), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_fused_fused // T.int64(28) * T.int64(2) + oc_chunk_2_init + oc_chunk_3_init)
                        v_oh = T.axis.spatial(T.int64(14), oh_2_init * T.int64(2) + oh_3_init)
                        v_ow = T.axis.spatial(T.int64(14), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_fused_fused % T.int64(7) * T.int64(2) + ow_2_init * T.int64(2) + ow_3_init)
                        v_oc_block = T.axis.spatial(T.int64(16), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_fused_fused % T.int64(28) // T.int64(7) * T.int64(4) + oc_block_1 * T.int64(4) + oc_block_2_init + oc_block_3_init)
                        T.reads()
                        T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                        T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                        conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = T.float32(0)
                for ic_0, kh_0, kw_0, n_2, oc_chunk_2, oh_2, ow_2, oc_block_2, ic_1, kh_1, kw_1, n_3, oc_chunk_3, oh_3, ow_3, oc_block_3 in T.grid(T.int64(512), T.int64(1), T.int64(3), T.int64(1), T.int64(2), T.int64(7), T.int64(1), T.int64(4), T.int64(1), T.int64(3), T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(2), T.int64(1)):
                    with T.block("conv2d_NCHWc_update"):
                        v_n = T.axis.spatial(T.int64(1), n_2 + n_3)
                        v_oc_chunk = T.axis.spatial(T.int64(32), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_fused_fused // T.int64(28) * T.int64(2) + oc_chunk_2 + oc_chunk_3)
                        v_oh = T.axis.spatial(T.int64(14), oh_2 * T.int64(2) + oh_3)
                        v_ow = T.axis.spatial(T.int64(14), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_fused_fused % T.int64(7) * T.int64(2) + ow_2 * T.int64(2) + ow_3)
                        v_oc_block = T.axis.spatial(T.int64(16), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_fused_fused % T.int64(28) // T.int64(7) * T.int64(4) + oc_block_1 * T.int64(4) + oc_block_2 + oc_block_3)
                        v_ic = T.axis.reduce(T.int64(512), ic_0 + ic_1)
                        v_kh = T.axis.reduce(T.int64(3), kh_0 * T.int64(3) + kh_1)
                        v_kw = T.axis.reduce(T.int64(3), kw_0 + kw_1)
                        T.reads(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block], data_pad[v_n, v_ic // T.int64(512), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(512)], p1[v_oc_chunk, v_ic // T.int64(512), v_kh, v_kw, v_ic % T.int64(512), v_oc_block])
                        T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                        T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                        conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] + data_pad[v_n, v_ic // T.int64(512), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(512)] * p1[v_oc_chunk, v_ic // T.int64(512), v_kh, v_kw, v_ic % T.int64(512), v_oc_block]
                for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(2), T.int64(14), T.int64(2)):
                    for ax4_fused in T.vectorized(T.int64(4)):
                        with T.block("T_relu"):
                            v_ax0 = T.axis.spatial(T.int64(1), ax0)
                            v_ax1 = T.axis.spatial(T.int64(32), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_fused_fused // T.int64(28) * T.int64(2) + ax1)
                            v_ax2 = T.axis.spatial(T.int64(14), ax2)
                            v_ax3 = T.axis.spatial(T.int64(14), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_fused_fused % T.int64(7) * T.int64(2) + ax3)
                            v_ax4 = T.axis.spatial(T.int64(16), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_fused_fused % T.int64(28) // T.int64(7) * T.int64(4) + ax4_fused)
                            T.reads(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4])
                            T.writes(T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                            T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.max(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] + p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4], T.float32(0))
b0 = sch.get_block(name="data_pad", func_name="main")
b1 = sch.get_block(name="conv2d_NCHWc", func_name="main")
b2 = sch.get_block(name="T_add", func_name="main")
b3 = sch.get_block(name="root", func_name="main")
sch.compute_inline(block=b2)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSRSRS")
l4, l5, l6, l7, l8, l9, l10, l11 = sch.get_loops(block=b1)
v12, v13, v14, v15 = sch.sample_perfect_tile(loop=l4, n=4, max_innermost_factor=64, decision=[1, 1, 1, 1])
l16, l17, l18, l19 = sch.split(loop=l4, factors=[v12, v13, v14, v15], preserve_unit_iters=True)
v20, v21, v22, v23 = sch.sample_perfect_tile(loop=l5, n=4, max_innermost_factor=64, decision=[16, 1, 2, 1])
l24, l25, l26, l27 = sch.split(loop=l5, factors=[v20, v21, v22, v23], preserve_unit_iters=True)
v28, v29, v30, v31 = sch.sample_perfect_tile(loop=l6, n=4, max_innermost_factor=64, decision=[1, 1, 7, 2])
l32, l33, l34, l35 = sch.split(loop=l6, factors=[v28, v29, v30, v31], preserve_unit_iters=True)
v36, v37, v38, v39 = sch.sample_perfect_tile(loop=l7, n=4, max_innermost_factor=64, decision=[1, 7, 1, 2])
l40, l41, l42, l43 = sch.split(loop=l7, factors=[v36, v37, v38, v39], preserve_unit_iters=True)
v44, v45, v46, v47 = sch.sample_perfect_tile(loop=l8, n=4, max_innermost_factor=64, decision=[4, 1, 4, 1])
l48, l49, l50, l51 = sch.split(loop=l8, factors=[v44, v45, v46, v47], preserve_unit_iters=True)
v52, v53 = sch.sample_perfect_tile(loop=l9, n=2, max_innermost_factor=64, decision=[512, 1])
l54, l55 = sch.split(loop=l9, factors=[v52, v53], preserve_unit_iters=True)
v56, v57 = sch.sample_perfect_tile(loop=l10, n=2, max_innermost_factor=64, decision=[1, 3])
l58, l59 = sch.split(loop=l10, factors=[v56, v57], preserve_unit_iters=True)
v60, v61 = sch.sample_perfect_tile(loop=l11, n=2, max_innermost_factor=64, decision=[3, 1])
l62, l63 = sch.split(loop=l11, factors=[v60, v61], preserve_unit_iters=True)
sch.reorder(l16, l24, l32, l40, l48, l17, l25, l33, l41, l49, l54, l58, l62, l18, l26, l34, l42, l50, l55, l59, l63, l19, l27, l35, l43, l51)
b64, = sch.get_consumers(block=b1)
sch.reverse_compute_at(block=b64, loop=l49, preserve_unit_loops=True, index=-1)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.vectorize", ann_val=64)
v65 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.unroll_explicit", ann_val=v65)
l66 = sch.sample_compute_location(block=b0, decision=8)
sch.compute_at(block=b0, loop=l66, preserve_unit_loops=True, index=-1)
sch.enter_postproc()
b67 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b67, ann_key="meta_schedule.parallel")
sch.unannotate(block_or_loop=b67, ann_key="meta_schedule.vectorize")
sch.unannotate(block_or_loop=b67, ann_key="meta_schedule.unroll_explicit")
b68, b69, b70 = sch.get_child_blocks(b67)
l71, l72, l73, l74, l75, l76, l77, l78, l79, l80, l81, l82, l83, l84 = sch.get_loops(block=b68)
l85 = sch.fuse(l71, l72, l73, l74, l75, l76, l77, l78, l79, preserve_unit_iters=True)
sch.parallel(loop=l85)
l86, l87, l88, l89, l90, l91, l92, l93, l94, l95, l96, l97, l98, l99, l100, l101, l102, l103 = sch.get_loops(block=b69)
l104 = sch.fuse(l86, preserve_unit_iters=True)
sch.parallel(loop=l104)
sch.annotate(block_or_loop=l104, ann_key="pragma_auto_unroll_max_step", ann_val=512)
sch.annotate(block_or_loop=l104, ann_key="pragma_unroll_explicit", ann_val=1)
l105, l106, l107, l108, l109, l110, l111 = sch.get_loops(block=b70)
l112 = sch.fuse(l111, preserve_unit_iters=True)
sch.vectorize(loop=l112)
b113 = sch.get_block(name="conv2d_NCHWc", func_name="main")
l114, l115, l116, l117, l118, l119, l120, l121, l122, l123, l124, l125, l126, l127, l128, l129, l130, l131 = sch.get_loops(block=b113)
b132 = sch.decompose_reduction(block=b113, loop=l116)
2024-04-28 08:33:32 [INFO] [task_scheduler.cc:121] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #121: Error in building:
LocalBuilder: Timeout, killed after 30.0 seconds
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(1), T.int64(14), T.int64(14), T.int64(512)), "float32"), p1: T.Buffer((T.int64(32), T.int64(1), T.int64(3), T.int64(3), T.int64(512), T.int64(16)), "float32"), p2: T.Buffer((T.int64(1), T.int64(32), T.int64(1), T.int64(1), T.int64(16)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(32), T.int64(14), T.int64(14), T.int64(16)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        data_pad = T.alloc_buffer((T.int64(1), T.int64(1), T.int64(16), T.int64(16), T.int64(512)))
        conv2d_NCHWc = T.alloc_buffer((T.int64(1), T.int64(32), T.int64(14), T.int64(14), T.int64(16)))
        for n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_fused_fused in T.parallel(T.int64(224), annotations={"pragma_auto_unroll_max_step": 512, "pragma_unroll_explicit": 1}):
            for ax0, ax1, ax2, ax3, ax4 in T.grid(T.int64(1), T.int64(1), T.int64(3), T.int64(9), T.int64(512)):
                with T.block("data_pad"):
                    v_i0, v_i1 = T.axis.remap("SS", [ax0, ax1])
                    v_i2 = T.axis.spatial(T.int64(16), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_fused_fused % T.int64(56) // T.int64(4) + ax2)
                    v_i3 = T.axis.spatial(T.int64(16), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_fused_fused % T.int64(4) // T.int64(2) * T.int64(7) + ax3)
                    v_i4 = T.axis.spatial(T.int64(512), ax4)
                    T.reads(p0[v_i0, v_i1, v_i2 - T.int64(1), v_i3 - T.int64(1), v_i4])
                    T.writes(data_pad[v_i0, v_i1, v_i2, v_i3, v_i4])
                    data_pad[v_i0, v_i1, v_i2, v_i3, v_i4] = T.if_then_else(T.int64(1) <= v_i2 and v_i2 < T.int64(15) and T.int64(1) <= v_i3 and v_i3 < T.int64(15), p0[v_i0, v_i1, v_i2 - T.int64(1), v_i3 - T.int64(1), v_i4], T.float32(0))
            for n_1, oc_chunk_1, oh_1, ow_1, oc_block_1 in T.grid(T.int64(1), T.int64(2), T.int64(1), T.int64(1), T.int64(1)):
                for n_2_init, oc_chunk_2_init, oh_2_init, ow_2_init, oc_block_2_init, n_3_init, oc_chunk_3_init, oh_3_init, ow_3_init, oc_block_3_init in T.grid(T.int64(1), T.int64(4), T.int64(1), T.int64(1), T.int64(8), T.int64(1), T.int64(1), T.int64(1), T.int64(7), T.int64(1)):
                    with T.block("conv2d_NCHWc_init"):
                        v_n = T.axis.spatial(T.int64(1), n_1 + n_2_init + n_3_init)
                        v_oc_chunk = T.axis.spatial(T.int64(32), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_fused_fused // T.int64(56) * T.int64(8) + oc_chunk_1 * T.int64(4) + oc_chunk_2_init + oc_chunk_3_init)
                        v_oh = T.axis.spatial(T.int64(14), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_fused_fused % T.int64(56) // T.int64(4) + oh_1 + oh_2_init + oh_3_init)
                        v_ow = T.axis.spatial(T.int64(14), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_fused_fused % T.int64(4) // T.int64(2) * T.int64(7) + ow_1 * T.int64(7) + ow_2_init * T.int64(7) + ow_3_init)
                        v_oc_block = T.axis.spatial(T.int64(16), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_fused_fused % T.int64(2) * T.int64(8) + oc_block_1 * T.int64(8) + oc_block_2_init + oc_block_3_init)
                        T.reads()
                        T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                        T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                        conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = T.float32(0)
                for ic_0, kh_0, kw_0, n_2, oc_chunk_2, oh_2, ow_2, oc_block_2, ic_1, kh_1, kw_1, n_3, oc_chunk_3, oh_3, ow_3, oc_block_3 in T.grid(T.int64(8), T.int64(3), T.int64(1), T.int64(1), T.int64(4), T.int64(1), T.int64(1), T.int64(8), T.int64(64), T.int64(1), T.int64(3), T.int64(1), T.int64(1), T.int64(1), T.int64(7), T.int64(1)):
                    with T.block("conv2d_NCHWc_update"):
                        v_n = T.axis.spatial(T.int64(1), n_1 + n_2 + n_3)
                        v_oc_chunk = T.axis.spatial(T.int64(32), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_fused_fused // T.int64(56) * T.int64(8) + oc_chunk_1 * T.int64(4) + oc_chunk_2 + oc_chunk_3)
                        v_oh = T.axis.spatial(T.int64(14), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_fused_fused % T.int64(56) // T.int64(4) + oh_1 + oh_2 + oh_3)
                        v_ow = T.axis.spatial(T.int64(14), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_fused_fused % T.int64(4) // T.int64(2) * T.int64(7) + ow_1 * T.int64(7) + ow_2 * T.int64(7) + ow_3)
                        v_oc_block = T.axis.spatial(T.int64(16), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_fused_fused % T.int64(2) * T.int64(8) + oc_block_1 * T.int64(8) + oc_block_2 + oc_block_3)
                        v_ic = T.axis.reduce(T.int64(512), ic_0 * T.int64(64) + ic_1)
                        v_kh = T.axis.reduce(T.int64(3), kh_0 + kh_1)
                        v_kw = T.axis.reduce(T.int64(3), kw_0 * T.int64(3) + kw_1)
                        T.reads(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block], data_pad[v_n, v_ic // T.int64(512), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(512)], p1[v_oc_chunk, v_ic // T.int64(512), v_kh, v_kw, v_ic % T.int64(512), v_oc_block])
                        T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                        T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                        conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] + data_pad[v_n, v_ic // T.int64(512), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(512)] * p1[v_oc_chunk, v_ic // T.int64(512), v_kh, v_kw, v_ic % T.int64(512), v_oc_block]
            for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(8), T.int64(1), T.int64(7)):
                for ax4_fused in T.vectorized(T.int64(8)):
                    with T.block("T_relu"):
                        v_ax0 = T.axis.spatial(T.int64(1), ax0)
                        v_ax1 = T.axis.spatial(T.int64(32), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_fused_fused // T.int64(56) * T.int64(8) + ax1)
                        v_ax2 = T.axis.spatial(T.int64(14), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_fused_fused % T.int64(56) // T.int64(4) + ax2)
                        v_ax3 = T.axis.spatial(T.int64(14), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_fused_fused % T.int64(4) // T.int64(2) * T.int64(7) + ax3)
                        v_ax4 = T.axis.spatial(T.int64(16), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_fused_fused % T.int64(2) * T.int64(8) + ax4_fused)
                        T.reads(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4])
                        T.writes(T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                        T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.max(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] + p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4], T.float32(0))
b0 = sch.get_block(name="data_pad", func_name="main")
b1 = sch.get_block(name="conv2d_NCHWc", func_name="main")
b2 = sch.get_block(name="T_add", func_name="main")
b3 = sch.get_block(name="root", func_name="main")
sch.compute_inline(block=b2)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSRSRS")
l4, l5, l6, l7, l8, l9, l10, l11 = sch.get_loops(block=b1)
v12, v13, v14, v15 = sch.sample_perfect_tile(loop=l4, n=4, max_innermost_factor=64, decision=[1, 1, 1, 1])
l16, l17, l18, l19 = sch.split(loop=l4, factors=[v12, v13, v14, v15], preserve_unit_iters=True)
v20, v21, v22, v23 = sch.sample_perfect_tile(loop=l5, n=4, max_innermost_factor=64, decision=[4, 2, 4, 1])
l24, l25, l26, l27 = sch.split(loop=l5, factors=[v20, v21, v22, v23], preserve_unit_iters=True)
v28, v29, v30, v31 = sch.sample_perfect_tile(loop=l6, n=4, max_innermost_factor=64, decision=[14, 1, 1, 1])
l32, l33, l34, l35 = sch.split(loop=l6, factors=[v28, v29, v30, v31], preserve_unit_iters=True)
v36, v37, v38, v39 = sch.sample_perfect_tile(loop=l7, n=4, max_innermost_factor=64, decision=[2, 1, 1, 7])
l40, l41, l42, l43 = sch.split(loop=l7, factors=[v36, v37, v38, v39], preserve_unit_iters=True)
v44, v45, v46, v47 = sch.sample_perfect_tile(loop=l8, n=4, max_innermost_factor=64, decision=[2, 1, 8, 1])
l48, l49, l50, l51 = sch.split(loop=l8, factors=[v44, v45, v46, v47], preserve_unit_iters=True)
v52, v53 = sch.sample_perfect_tile(loop=l9, n=2, max_innermost_factor=64, decision=[8, 64])
l54, l55 = sch.split(loop=l9, factors=[v52, v53], preserve_unit_iters=True)
v56, v57 = sch.sample_perfect_tile(loop=l10, n=2, max_innermost_factor=64, decision=[3, 1])
l58, l59 = sch.split(loop=l10, factors=[v56, v57], preserve_unit_iters=True)
v60, v61 = sch.sample_perfect_tile(loop=l11, n=2, max_innermost_factor=64, decision=[1, 3])
l62, l63 = sch.split(loop=l11, factors=[v60, v61], preserve_unit_iters=True)
sch.reorder(l16, l24, l32, l40, l48, l17, l25, l33, l41, l49, l54, l58, l62, l18, l26, l34, l42, l50, l55, l59, l63, l19, l27, l35, l43, l51)
b64, = sch.get_consumers(block=b1)
sch.reverse_compute_at(block=b64, loop=l48, preserve_unit_loops=True, index=-1)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.vectorize", ann_val=64)
v65 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.unroll_explicit", ann_val=v65)
l66 = sch.sample_compute_location(block=b0, decision=4)
sch.compute_at(block=b0, loop=l66, preserve_unit_loops=True, index=-1)
sch.enter_postproc()
b67 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b67, ann_key="meta_schedule.parallel")
sch.unannotate(block_or_loop=b67, ann_key="meta_schedule.vectorize")
sch.unannotate(block_or_loop=b67, ann_key="meta_schedule.unroll_explicit")
b68, b69, b70 = sch.get_child_blocks(b67)
l71, l72, l73, l74, l75, l76, l77, l78, l79, l80 = sch.get_loops(block=b68)
l81 = sch.fuse(l71, l72, l73, l74, l75, preserve_unit_iters=True)
sch.parallel(loop=l81)
l82, l83, l84, l85, l86, l87, l88, l89, l90, l91, l92, l93, l94, l95, l96, l97, l98, l99, l100, l101, l102, l103 = sch.get_loops(block=b69)
l104 = sch.fuse(l82, preserve_unit_iters=True)
sch.parallel(loop=l104)
sch.annotate(block_or_loop=l104, ann_key="pragma_auto_unroll_max_step", ann_val=512)
sch.annotate(block_or_loop=l104, ann_key="pragma_unroll_explicit", ann_val=1)
l105, l106, l107, l108, l109, l110 = sch.get_loops(block=b70)
l111 = sch.fuse(l110, preserve_unit_iters=True)
sch.vectorize(loop=l111)
b112 = sch.get_block(name="conv2d_NCHWc", func_name="main")
l113, l114, l115, l116, l117, l118, l119, l120, l121, l122, l123, l124, l125, l126, l127, l128, l129, l130, l131, l132, l133, l134 = sch.get_loops(block=b112)
b135 = sch.decompose_reduction(block=b112, loop=l119)
2024-04-28 08:33:32 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #122: GFLOPs: 25.9969. Time: 35582.8670 us. Best GFLOPs: 186.8079
2024-04-28 08:33:32 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #123: GFLOPs: 88.2826. Time: 10478.2229 us. Best GFLOPs: 186.8079
2024-04-28 08:33:32 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #124: GFLOPs: 112.2446. Time: 8241.3313 us. Best GFLOPs: 186.8079
2024-04-28 08:33:32 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #125: GFLOPs: 102.6794. Time: 9009.0603 us. Best GFLOPs: 186.8079
2024-04-28 08:33:32 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #126: GFLOPs: 13.9073. Time: 66515.2553 us. Best GFLOPs: 186.8079
2024-04-28 08:33:32 [INFO] [task_scheduler.cc:121] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #127: Error in building:
LocalBuilder: Timeout, killed after 30.0 seconds
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(1), T.int64(14), T.int64(14), T.int64(512)), "float32"), p1: T.Buffer((T.int64(32), T.int64(1), T.int64(3), T.int64(3), T.int64(512), T.int64(16)), "float32"), p2: T.Buffer((T.int64(1), T.int64(32), T.int64(1), T.int64(1), T.int64(16)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(32), T.int64(14), T.int64(14), T.int64(16)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        data_pad = T.alloc_buffer((T.int64(1), T.int64(1), T.int64(16), T.int64(16), T.int64(512)))
        conv2d_NCHWc = T.alloc_buffer((T.int64(1), T.int64(32), T.int64(14), T.int64(14), T.int64(16)))
        for i0_i1_i2_i3_i4_fused in T.parallel(T.int64(131072)):
            with T.block("data_pad"):
                v_i0 = T.axis.spatial(T.int64(1), T.int64(0))
                v_i1 = T.axis.spatial(T.int64(1), T.int64(0))
                v_i2 = T.axis.spatial(T.int64(16), i0_i1_i2_i3_i4_fused // T.int64(8192))
                v_i3 = T.axis.spatial(T.int64(16), i0_i1_i2_i3_i4_fused % T.int64(8192) // T.int64(512))
                v_i4 = T.axis.spatial(T.int64(512), i0_i1_i2_i3_i4_fused % T.int64(512))
                T.reads(p0[v_i0, v_i1, v_i2 - T.int64(1), v_i3 - T.int64(1), v_i4])
                T.writes(data_pad[v_i0, v_i1, v_i2, v_i3, v_i4])
                data_pad[v_i0, v_i1, v_i2, v_i3, v_i4] = T.if_then_else(T.int64(1) <= v_i2 and v_i2 < T.int64(15) and T.int64(1) <= v_i3 and v_i3 < T.int64(15), p0[v_i0, v_i1, v_i2 - T.int64(1), v_i3 - T.int64(1), v_i4], T.float32(0))
        for n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_fused in T.parallel(T.int64(14), annotations={"pragma_auto_unroll_max_step": 512, "pragma_unroll_explicit": 1}):
            for n_1, oc_chunk_1, oh_1, ow_1, oc_block_1 in T.grid(T.int64(1), T.int64(2), T.int64(1), T.int64(1), T.int64(2)):
                for n_2_init, oc_chunk_2_init, oh_2_init, ow_2_init, oc_block_2_init, n_3_init, oc_chunk_3_init, oh_3_init, ow_3_init, oc_block_3_init in T.grid(T.int64(1), T.int64(8), T.int64(7), T.int64(1), T.int64(8), T.int64(1), T.int64(2), T.int64(2), T.int64(1), T.int64(1)):
                    with T.block("conv2d_NCHWc_init"):
                        v_n = T.axis.spatial(T.int64(1), n_1 + n_2_init + n_3_init)
                        v_oc_chunk = T.axis.spatial(T.int64(32), oc_chunk_1 * T.int64(16) + oc_chunk_2_init * T.int64(2) + oc_chunk_3_init)
                        v_oh = T.axis.spatial(T.int64(14), oh_1 * T.int64(14) + oh_2_init * T.int64(2) + oh_3_init)
                        v_ow = T.axis.spatial(T.int64(14), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_fused + ow_1 + ow_2_init + ow_3_init)
                        v_oc_block = T.axis.spatial(T.int64(16), oc_block_1 * T.int64(8) + oc_block_2_init + oc_block_3_init)
                        T.reads()
                        T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                        T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                        conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = T.float32(0)
                for ic_0, kh_0, kw_0, n_2, oc_chunk_2, oh_2, ow_2, oc_block_2, ic_1, kh_1, kw_1, n_3, oc_chunk_3, oh_3, ow_3, oc_block_3 in T.grid(T.int64(64), T.int64(3), T.int64(3), T.int64(1), T.int64(8), T.int64(7), T.int64(1), T.int64(8), T.int64(8), T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(2), T.int64(1), T.int64(1)):
                    with T.block("conv2d_NCHWc_update"):
                        v_n = T.axis.spatial(T.int64(1), n_1 + n_2 + n_3)
                        v_oc_chunk = T.axis.spatial(T.int64(32), oc_chunk_1 * T.int64(16) + oc_chunk_2 * T.int64(2) + oc_chunk_3)
                        v_oh = T.axis.spatial(T.int64(14), oh_1 * T.int64(14) + oh_2 * T.int64(2) + oh_3)
                        v_ow = T.axis.spatial(T.int64(14), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_fused + ow_1 + ow_2 + ow_3)
                        v_oc_block = T.axis.spatial(T.int64(16), oc_block_1 * T.int64(8) + oc_block_2 + oc_block_3)
                        v_ic = T.axis.reduce(T.int64(512), ic_0 * T.int64(8) + ic_1)
                        v_kh = T.axis.reduce(T.int64(3), kh_0 + kh_1)
                        v_kw = T.axis.reduce(T.int64(3), kw_0 + kw_1)
                        T.reads(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block], data_pad[v_n, v_ic // T.int64(512), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(512)], p1[v_oc_chunk, v_ic // T.int64(512), v_kh, v_kw, v_ic % T.int64(512), v_oc_block])
                        T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                        T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                        conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] + data_pad[v_n, v_ic // T.int64(512), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(512)] * p1[v_oc_chunk, v_ic // T.int64(512), v_kh, v_kw, v_ic % T.int64(512), v_oc_block]
            for ax0, ax1, ax2 in T.grid(T.int64(1), T.int64(32), T.int64(14)):
                for ax3_ax4_fused in T.vectorized(T.int64(16)):
                    with T.block("T_relu"):
                        v_ax0, v_ax1, v_ax2, v_ax3, v_ax4 = T.axis.remap("SSSSS", [ax0, ax1, ax2, n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_fused, ax3_ax4_fused])
                        T.reads(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4])
                        T.writes(T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                        T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.max(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] + p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4], T.float32(0))
b0 = sch.get_block(name="data_pad", func_name="main")
b1 = sch.get_block(name="conv2d_NCHWc", func_name="main")
b2 = sch.get_block(name="T_add", func_name="main")
b3 = sch.get_block(name="root", func_name="main")
sch.compute_inline(block=b2)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSRSRS")
l4, l5, l6, l7, l8, l9, l10, l11 = sch.get_loops(block=b1)
v12, v13, v14, v15 = sch.sample_perfect_tile(loop=l4, n=4, max_innermost_factor=64, decision=[1, 1, 1, 1])
l16, l17, l18, l19 = sch.split(loop=l4, factors=[v12, v13, v14, v15], preserve_unit_iters=True)
v20, v21, v22, v23 = sch.sample_perfect_tile(loop=l5, n=4, max_innermost_factor=64, decision=[1, 2, 8, 2])
l24, l25, l26, l27 = sch.split(loop=l5, factors=[v20, v21, v22, v23], preserve_unit_iters=True)
v28, v29, v30, v31 = sch.sample_perfect_tile(loop=l6, n=4, max_innermost_factor=64, decision=[1, 1, 7, 2])
l32, l33, l34, l35 = sch.split(loop=l6, factors=[v28, v29, v30, v31], preserve_unit_iters=True)
v36, v37, v38, v39 = sch.sample_perfect_tile(loop=l7, n=4, max_innermost_factor=64, decision=[14, 1, 1, 1])
l40, l41, l42, l43 = sch.split(loop=l7, factors=[v36, v37, v38, v39], preserve_unit_iters=True)
v44, v45, v46, v47 = sch.sample_perfect_tile(loop=l8, n=4, max_innermost_factor=64, decision=[1, 2, 8, 1])
l48, l49, l50, l51 = sch.split(loop=l8, factors=[v44, v45, v46, v47], preserve_unit_iters=True)
v52, v53 = sch.sample_perfect_tile(loop=l9, n=2, max_innermost_factor=64, decision=[64, 8])
l54, l55 = sch.split(loop=l9, factors=[v52, v53], preserve_unit_iters=True)
v56, v57 = sch.sample_perfect_tile(loop=l10, n=2, max_innermost_factor=64, decision=[3, 1])
l58, l59 = sch.split(loop=l10, factors=[v56, v57], preserve_unit_iters=True)
v60, v61 = sch.sample_perfect_tile(loop=l11, n=2, max_innermost_factor=64, decision=[3, 1])
l62, l63 = sch.split(loop=l11, factors=[v60, v61], preserve_unit_iters=True)
sch.reorder(l16, l24, l32, l40, l48, l17, l25, l33, l41, l49, l54, l58, l62, l18, l26, l34, l42, l50, l55, l59, l63, l19, l27, l35, l43, l51)
b64, = sch.get_consumers(block=b1)
sch.reverse_compute_at(block=b64, loop=l48, preserve_unit_loops=True, index=-1)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.vectorize", ann_val=64)
v65 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.unroll_explicit", ann_val=v65)
l66 = sch.sample_compute_location(block=b0, decision=-1)
sch.compute_at(block=b0, loop=l66, preserve_unit_loops=True, index=-1)
sch.enter_postproc()
b67 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b67, ann_key="meta_schedule.parallel")
sch.unannotate(block_or_loop=b67, ann_key="meta_schedule.vectorize")
sch.unannotate(block_or_loop=b67, ann_key="meta_schedule.unroll_explicit")
b68, b69, b70 = sch.get_child_blocks(b67)
l71, l72, l73, l74, l75 = sch.get_loops(block=b68)
l76 = sch.fuse(l71, l72, l73, l74, l75, preserve_unit_iters=True)
sch.parallel(loop=l76)
l77, l78, l79, l80, l81, l82, l83, l84, l85, l86, l87, l88, l89, l90, l91, l92, l93, l94, l95, l96, l97, l98, l99, l100, l101, l102 = sch.get_loops(block=b69)
l103 = sch.fuse(l77, l78, l79, l80, l81, preserve_unit_iters=True)
sch.parallel(loop=l103)
sch.annotate(block_or_loop=l103, ann_key="pragma_auto_unroll_max_step", ann_val=512)
sch.annotate(block_or_loop=l103, ann_key="pragma_unroll_explicit", ann_val=1)
l104, l105, l106, l107, l108, l109 = sch.get_loops(block=b70)
l110 = sch.fuse(l108, l109, preserve_unit_iters=True)
sch.vectorize(loop=l110)
b111 = sch.get_block(name="conv2d_NCHWc", func_name="main")
l112, l113, l114, l115, l116, l117, l118, l119, l120, l121, l122, l123, l124, l125, l126, l127, l128, l129, l130, l131, l132, l133 = sch.get_loops(block=b111)
b134 = sch.decompose_reduction(block=b111, loop=l118)
2024-04-28 08:33:32 [INFO] [task_scheduler.cc:121] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #128: Error in building:
LocalBuilder: Timeout, killed after 30.0 seconds
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(1), T.int64(14), T.int64(14), T.int64(512)), "float32"), p1: T.Buffer((T.int64(32), T.int64(1), T.int64(3), T.int64(3), T.int64(512), T.int64(16)), "float32"), p2: T.Buffer((T.int64(1), T.int64(32), T.int64(1), T.int64(1), T.int64(16)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(32), T.int64(14), T.int64(14), T.int64(16)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        data_pad = T.alloc_buffer((T.int64(1), T.int64(1), T.int64(16), T.int64(16), T.int64(512)))
        conv2d_NCHWc = T.alloc_buffer((T.int64(1), T.int64(32), T.int64(14), T.int64(14), T.int64(16)))
        for n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_fused_fused in T.parallel(T.int64(2), annotations={"pragma_auto_unroll_max_step": 512, "pragma_unroll_explicit": 1}):
            for n_1, oc_chunk_1, oh_1 in T.grid(T.int64(1), T.int64(1), T.int64(7)):
                for ax0, ax1, ax2, ax3, ax4 in T.grid(T.int64(1), T.int64(1), T.int64(4), T.int64(16), T.int64(512)):
                    with T.block("data_pad"):
                        v_i0, v_i1 = T.axis.remap("SS", [ax0, ax1])
                        v_i2 = T.axis.spatial(T.int64(16), oh_1 * T.int64(2) + ax2)
                        v_i3, v_i4 = T.axis.remap("SS", [ax3, ax4])
                        T.reads(p0[v_i0, v_i1, v_i2 - T.int64(1), v_i3 - T.int64(1), v_i4])
                        T.writes(data_pad[v_i0, v_i1, v_i2, v_i3, v_i4])
                        data_pad[v_i0, v_i1, v_i2, v_i3, v_i4] = T.if_then_else(T.int64(1) <= v_i2 and v_i2 < T.int64(15) and T.int64(1) <= v_i3 and v_i3 < T.int64(15), p0[v_i0, v_i1, v_i2 - T.int64(1), v_i3 - T.int64(1), v_i4], T.float32(0))
                for ow_1, oc_block_1 in T.grid(T.int64(1), T.int64(1)):
                    for n_2_init, oc_chunk_2_init, oh_2_init, ow_2_init, oc_block_2_init, n_3_init, oc_chunk_3_init, oh_3_init, ow_3_init in T.grid(T.int64(1), T.int64(8), T.int64(1), T.int64(1), T.int64(4), T.int64(1), T.int64(4), T.int64(2), T.int64(14)):
                        for oc_block_3_fused_init in T.vectorized(T.int64(2)):
                            with T.block("conv2d_NCHWc_init"):
                                v_n = T.axis.spatial(T.int64(1), n_1 + n_2_init + n_3_init)
                                v_oc_chunk = T.axis.spatial(T.int64(32), oc_chunk_1 * T.int64(32) + oc_chunk_2_init * T.int64(4) + oc_chunk_3_init)
                                v_oh = T.axis.spatial(T.int64(14), oh_1 * T.int64(2) + oh_2_init * T.int64(2) + oh_3_init)
                                v_ow = T.axis.spatial(T.int64(14), ow_1 * T.int64(14) + ow_2_init * T.int64(14) + ow_3_init)
                                v_oc_block = T.axis.spatial(T.int64(16), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_fused_fused * T.int64(8) + oc_block_1 * T.int64(8) + oc_block_2_init * T.int64(2) + oc_block_3_fused_init)
                                T.reads()
                                T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                                T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                                conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = T.float32(0)
                    for ic_0, kh_0, kw_0, n_2, oc_chunk_2, oh_2, ow_2, oc_block_2, ic_1, kh_1, kw_1, n_3, oc_chunk_3, oh_3, ow_3 in T.grid(T.int64(512), T.int64(1), T.int64(3), T.int64(1), T.int64(8), T.int64(1), T.int64(1), T.int64(4), T.int64(1), T.int64(3), T.int64(1), T.int64(1), T.int64(4), T.int64(2), T.int64(14)):
                        for oc_block_3_fused in T.vectorized(T.int64(2)):
                            with T.block("conv2d_NCHWc_update"):
                                v_n = T.axis.spatial(T.int64(1), n_1 + n_2 + n_3)
                                v_oc_chunk = T.axis.spatial(T.int64(32), oc_chunk_1 * T.int64(32) + oc_chunk_2 * T.int64(4) + oc_chunk_3)
                                v_oh = T.axis.spatial(T.int64(14), oh_1 * T.int64(2) + oh_2 * T.int64(2) + oh_3)
                                v_ow = T.axis.spatial(T.int64(14), ow_1 * T.int64(14) + ow_2 * T.int64(14) + ow_3)
                                v_oc_block = T.axis.spatial(T.int64(16), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_fused_fused * T.int64(8) + oc_block_1 * T.int64(8) + oc_block_2 * T.int64(2) + oc_block_3_fused)
                                v_ic = T.axis.reduce(T.int64(512), ic_0 + ic_1)
                                v_kh = T.axis.reduce(T.int64(3), kh_0 * T.int64(3) + kh_1)
                                v_kw = T.axis.reduce(T.int64(3), kw_0 + kw_1)
                                T.reads(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block], data_pad[v_n, v_ic // T.int64(512), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(512)], p1[v_oc_chunk, v_ic // T.int64(512), v_kh, v_kw, v_ic % T.int64(512), v_oc_block])
                                T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                                T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                                conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] + data_pad[v_n, v_ic // T.int64(512), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(512)] * p1[v_oc_chunk, v_ic // T.int64(512), v_kh, v_kw, v_ic % T.int64(512), v_oc_block]
            for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(32), T.int64(14), T.int64(14)):
                for ax4_fused in T.vectorized(T.int64(8)):
                    with T.block("T_relu"):
                        v_ax0, v_ax1, v_ax2, v_ax3 = T.axis.remap("SSSS", [ax0, ax1, ax2, ax3])
                        v_ax4 = T.axis.spatial(T.int64(16), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_fused_fused * T.int64(8) + ax4_fused)
                        T.reads(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4])
                        T.writes(T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                        T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.max(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] + p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4], T.float32(0))
b0 = sch.get_block(name="data_pad", func_name="main")
b1 = sch.get_block(name="conv2d_NCHWc", func_name="main")
b2 = sch.get_block(name="T_add", func_name="main")
b3 = sch.get_block(name="root", func_name="main")
sch.compute_inline(block=b2)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSRSRS")
l4, l5, l6, l7, l8, l9, l10, l11 = sch.get_loops(block=b1)
v12, v13, v14, v15 = sch.sample_perfect_tile(loop=l4, n=4, max_innermost_factor=64, decision=[1, 1, 1, 1])
l16, l17, l18, l19 = sch.split(loop=l4, factors=[v12, v13, v14, v15], preserve_unit_iters=True)
v20, v21, v22, v23 = sch.sample_perfect_tile(loop=l5, n=4, max_innermost_factor=64, decision=[1, 1, 8, 4])
l24, l25, l26, l27 = sch.split(loop=l5, factors=[v20, v21, v22, v23], preserve_unit_iters=True)
v28, v29, v30, v31 = sch.sample_perfect_tile(loop=l6, n=4, max_innermost_factor=64, decision=[1, 7, 1, 2])
l32, l33, l34, l35 = sch.split(loop=l6, factors=[v28, v29, v30, v31], preserve_unit_iters=True)
v36, v37, v38, v39 = sch.sample_perfect_tile(loop=l7, n=4, max_innermost_factor=64, decision=[1, 1, 1, 14])
l40, l41, l42, l43 = sch.split(loop=l7, factors=[v36, v37, v38, v39], preserve_unit_iters=True)
v44, v45, v46, v47 = sch.sample_perfect_tile(loop=l8, n=4, max_innermost_factor=64, decision=[2, 1, 4, 2])
l48, l49, l50, l51 = sch.split(loop=l8, factors=[v44, v45, v46, v47], preserve_unit_iters=True)
v52, v53 = sch.sample_perfect_tile(loop=l9, n=2, max_innermost_factor=64, decision=[512, 1])
l54, l55 = sch.split(loop=l9, factors=[v52, v53], preserve_unit_iters=True)
v56, v57 = sch.sample_perfect_tile(loop=l10, n=2, max_innermost_factor=64, decision=[1, 3])
l58, l59 = sch.split(loop=l10, factors=[v56, v57], preserve_unit_iters=True)
v60, v61 = sch.sample_perfect_tile(loop=l11, n=2, max_innermost_factor=64, decision=[3, 1])
l62, l63 = sch.split(loop=l11, factors=[v60, v61], preserve_unit_iters=True)
sch.reorder(l16, l24, l32, l40, l48, l17, l25, l33, l41, l49, l54, l58, l62, l18, l26, l34, l42, l50, l55, l59, l63, l19, l27, l35, l43, l51)
b64, = sch.get_consumers(block=b1)
sch.reverse_compute_at(block=b64, loop=l48, preserve_unit_loops=True, index=-1)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.vectorize", ann_val=64)
v65 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.unroll_explicit", ann_val=v65)
l66 = sch.sample_compute_location(block=b0, decision=7)
sch.compute_at(block=b0, loop=l66, preserve_unit_loops=True, index=-1)
sch.enter_postproc()
b67 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b67, ann_key="meta_schedule.parallel")
sch.unannotate(block_or_loop=b67, ann_key="meta_schedule.vectorize")
sch.unannotate(block_or_loop=b67, ann_key="meta_schedule.unroll_explicit")
b68, b69, b70 = sch.get_child_blocks(b67)
l71, l72, l73, l74, l75, l76, l77, l78, l79, l80, l81, l82, l83 = sch.get_loops(block=b68)
l84 = sch.fuse(l71, l72, l73, l74, l75, preserve_unit_iters=True)
sch.parallel(loop=l84)
l85, l86, l87, l88, l89, l90, l91, l92, l93, l94, l95, l96, l97, l98, l99, l100, l101, l102, l103, l104, l105, l106 = sch.get_loops(block=b69)
l107 = sch.fuse(l85, preserve_unit_iters=True)
sch.parallel(loop=l107)
l108 = sch.fuse(l106, preserve_unit_iters=True)
sch.vectorize(loop=l108)
sch.annotate(block_or_loop=l107, ann_key="pragma_auto_unroll_max_step", ann_val=512)
sch.annotate(block_or_loop=l107, ann_key="pragma_unroll_explicit", ann_val=1)
l109, l110, l111, l112, l113, l114 = sch.get_loops(block=b70)
l115 = sch.fuse(l114, preserve_unit_iters=True)
sch.vectorize(loop=l115)
b116 = sch.get_block(name="conv2d_NCHWc", func_name="main")
l117, l118, l119, l120, l121, l122, l123, l124, l125, l126, l127, l128, l129, l130, l131, l132, l133, l134, l135, l136, l137, l138 = sch.get_loops(block=b116)
b139 = sch.decompose_reduction(block=b116, loop=l123)
2024-04-28 08:49:32 [INFO] [evolutionary_search.cc:713] Generating candidates......
2024-04-28 08:49:33 [INFO] [evolutionary_search.cc:715] Picked top 102 candidate(s) from database
2024-04-28 08:49:37 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x3861aa8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x37d26b8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x4dd4148)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x3201bb8)]: 0 failure(s)
2024-04-28 08:49:37 [INFO] [evolutionary_search.cc:723] Sampled 410 candidate(s)
2024-04-28 08:49:49 [INFO] [evolutionary_search.cc:621] Evolve iter #0 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x3861aa8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x37d26b8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x4dd4148)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x3201bb8)]: 0 failure(s)
2024-04-28 08:50:05 [INFO] [evolutionary_search.cc:621] Evolve iter #1 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x3861aa8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x37d26b8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x4dd4148)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x3201bb8)]: 0 failure(s)
2024-04-28 08:50:17 [INFO] [evolutionary_search.cc:621] Evolve iter #2 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x3861aa8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x37d26b8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x4dd4148)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x3201bb8)]: 0 failure(s)
2024-04-28 08:50:29 [INFO] [evolutionary_search.cc:621] Evolve iter #3 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x3861aa8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x37d26b8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x4dd4148)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x3201bb8)]: 0 failure(s)
2024-04-28 08:50:36 [INFO] [evolutionary_search.cc:649] Scores of the best 64 candidates:
[1 : 16]:	0.9112  0.8917  0.8463  0.7990  0.7303  0.7258  0.7117  0.6909  0.6861  0.6746  0.6746  0.6725  0.6725  0.6719  0.6703  0.6689
[17 : 32]:	0.6689  0.6612  0.6610  0.6608  0.6607  0.6589  0.6571  0.6565  0.6487  0.6485  0.6460  0.6445  0.6408  0.6250  0.6246  0.6246
[33 : 48]:	0.6246  0.6246  0.6235  0.6194  0.6192  0.6091  0.6060  0.5988  0.5957  0.5907  0.5896  0.5894  0.5864  0.5864  0.5863  0.5848
[49 : 64]:	0.5819  0.5806  0.5743  0.5737  0.5726  0.5719  0.5715  0.5707  0.5706  0.5677  0.5672  0.5661  0.5650  0.5641  0.5641  0.5641
2024-04-28 08:50:36 [INFO] [evolutionary_search.cc:727] Got 64 candidate(s) with evolutionary search
2024-04-28 08:50:36 [INFO] [evolutionary_search.cc:730] Sending 64 candidates(s) for measurement
2024-04-28 08:52:33 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #129: GFLOPs: 112.1531. Time: 8248.0508 us. Best GFLOPs: 186.8079
2024-04-28 08:52:33 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #130: GFLOPs: 43.0120. Time: 21506.6862 us. Best GFLOPs: 186.8079
2024-04-28 08:52:33 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #131: GFLOPs: 39.8501. Time: 23213.1242 us. Best GFLOPs: 186.8079
2024-04-28 08:52:33 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #132: GFLOPs: 122.6368. Time: 7542.9605 us. Best GFLOPs: 186.8079
2024-04-28 08:52:33 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #133: GFLOPs: 135.3710. Time: 6833.4021 us. Best GFLOPs: 186.8079
2024-04-28 08:52:33 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #134: GFLOPs: 136.4454. Time: 6779.5965 us. Best GFLOPs: 186.8079
2024-04-28 08:52:33 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #135: GFLOPs: 155.6879. Time: 5941.6615 us. Best GFLOPs: 186.8079
2024-04-28 08:52:33 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #136: GFLOPs: 141.3263. Time: 6545.4519 us. Best GFLOPs: 186.8079
2024-04-28 08:52:33 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #137: GFLOPs: 33.9649. Time: 27235.2965 us. Best GFLOPs: 186.8079
2024-04-28 08:52:33 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #138: GFLOPs: 13.0473. Time: 70899.3597 us. Best GFLOPs: 186.8079
2024-04-28 08:52:33 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #139: GFLOPs: 29.4274. Time: 31434.7578 us. Best GFLOPs: 186.8079
2024-04-28 08:52:33 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #140: GFLOPs: 27.5688. Time: 33554.0825 us. Best GFLOPs: 186.8079
2024-04-28 08:52:33 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #141: GFLOPs: 46.9168. Time: 19716.6918 us. Best GFLOPs: 186.8079
2024-04-28 08:52:33 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #142: GFLOPs: 67.5573. Time: 13692.7463 us. Best GFLOPs: 186.8079
2024-04-28 08:52:33 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #143: GFLOPs: 24.1950. Time: 38232.9123 us. Best GFLOPs: 186.8079
2024-04-28 08:52:33 [INFO] [task_scheduler.cc:121] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #144: Error in building:
LocalBuilder: Timeout, killed after 30.0 seconds
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(1), T.int64(14), T.int64(14), T.int64(512)), "float32"), p1: T.Buffer((T.int64(32), T.int64(1), T.int64(3), T.int64(3), T.int64(512), T.int64(16)), "float32"), p2: T.Buffer((T.int64(1), T.int64(32), T.int64(1), T.int64(1), T.int64(16)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(32), T.int64(14), T.int64(14), T.int64(16)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        data_pad = T.alloc_buffer((T.int64(1), T.int64(1), T.int64(16), T.int64(16), T.int64(512)))
        conv2d_NCHWc = T.alloc_buffer((T.int64(1), T.int64(32), T.int64(14), T.int64(14), T.int64(16)))
        for n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused_fused in T.parallel(T.int64(64), annotations={"pragma_auto_unroll_max_step": 512, "pragma_unroll_explicit": 1}):
            for n_2_init, oc_chunk_2_init, oh_2_init, ow_2_init, oc_block_2_init, n_3_init, oc_chunk_3_init, oh_3_init, ow_3_init, oc_block_3_init in T.grid(T.int64(1), T.int64(2), T.int64(14), T.int64(1), T.int64(4), T.int64(1), T.int64(1), T.int64(1), T.int64(14), T.int64(1)):
                with T.block("conv2d_NCHWc_init"):
                    v_n = T.axis.spatial(T.int64(1), n_2_init + n_3_init)
                    v_oc_chunk = T.axis.spatial(T.int64(32), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused_fused // T.int64(32) * T.int64(16) + n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused_fused % T.int64(8) * T.int64(2) + oc_chunk_2_init + oc_chunk_3_init)
                    v_oh = T.axis.spatial(T.int64(14), oh_2_init + oh_3_init)
                    v_ow = T.axis.spatial(T.int64(14), ow_2_init * T.int64(14) + ow_3_init)
                    v_oc_block = T.axis.spatial(T.int64(16), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused_fused % T.int64(32) // T.int64(8) * T.int64(4) + oc_block_2_init + oc_block_3_init)
                    T.reads()
                    T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                    T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                    conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = T.float32(0)
            for ic_0, kh_0 in T.grid(T.int64(8), T.int64(3)):
                for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(1), T.int64(14), T.int64(16)):
                    for ax4_fused in T.vectorized(T.int64(64)):
                        with T.block("data_pad"):
                            v_i0, v_i1 = T.axis.remap("SS", [ax0, ax1])
                            v_i2 = T.axis.spatial(T.int64(16), kh_0 + ax2)
                            v_i3 = T.axis.spatial(T.int64(16), ax3)
                            v_i4 = T.axis.spatial(T.int64(512), ic_0 * T.int64(64) + ax4_fused)
                            T.reads(p0[v_i0, v_i1, v_i2 - T.int64(1), v_i3 - T.int64(1), v_i4])
                            T.writes(data_pad[v_i0, v_i1, v_i2, v_i3, v_i4])
                            data_pad[v_i0, v_i1, v_i2, v_i3, v_i4] = T.if_then_else(T.int64(1) <= v_i2 and v_i2 < T.int64(15) and T.int64(1) <= v_i3 and v_i3 < T.int64(15), p0[v_i0, v_i1, v_i2 - T.int64(1), v_i3 - T.int64(1), v_i4], T.float32(0))
                for kw_0, n_2, oc_chunk_2, oh_2, ow_2, oc_block_2, ic_1, kh_1, kw_1, n_3, oc_chunk_3, oh_3, ow_3, oc_block_3 in T.grid(T.int64(1), T.int64(1), T.int64(2), T.int64(14), T.int64(1), T.int64(4), T.int64(64), T.int64(1), T.int64(3), T.int64(1), T.int64(1), T.int64(1), T.int64(14), T.int64(1)):
                    with T.block("conv2d_NCHWc_update"):
                        v_n = T.axis.spatial(T.int64(1), n_2 + n_3)
                        v_oc_chunk = T.axis.spatial(T.int64(32), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused_fused // T.int64(32) * T.int64(16) + n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused_fused % T.int64(8) * T.int64(2) + oc_chunk_2 + oc_chunk_3)
                        v_oh = T.axis.spatial(T.int64(14), oh_2 + oh_3)
                        v_ow = T.axis.spatial(T.int64(14), ow_2 * T.int64(14) + ow_3)
                        v_oc_block = T.axis.spatial(T.int64(16), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused_fused % T.int64(32) // T.int64(8) * T.int64(4) + oc_block_2 + oc_block_3)
                        v_ic = T.axis.reduce(T.int64(512), ic_0 * T.int64(64) + ic_1)
                        v_kh = T.axis.reduce(T.int64(3), kh_0 + kh_1)
                        v_kw = T.axis.reduce(T.int64(3), kw_0 * T.int64(3) + kw_1)
                        T.reads(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block], data_pad[v_n, v_ic // T.int64(512), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(512)], p1[v_oc_chunk, v_ic // T.int64(512), v_kh, v_kw, v_ic % T.int64(512), v_oc_block])
                        T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                        T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                        conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] + data_pad[v_n, v_ic // T.int64(512), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(512)] * p1[v_oc_chunk, v_ic // T.int64(512), v_kh, v_kw, v_ic % T.int64(512), v_oc_block]
            for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(2), T.int64(14), T.int64(14)):
                for ax4_fused in T.vectorized(T.int64(4)):
                    with T.block("T_relu"):
                        v_ax0 = T.axis.spatial(T.int64(1), ax0)
                        v_ax1 = T.axis.spatial(T.int64(32), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused_fused // T.int64(32) * T.int64(16) + n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused_fused % T.int64(8) * T.int64(2) + ax1)
                        v_ax2, v_ax3 = T.axis.remap("SS", [ax2, ax3])
                        v_ax4 = T.axis.spatial(T.int64(16), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused_fused % T.int64(32) // T.int64(8) * T.int64(4) + ax4_fused)
                        T.reads(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4])
                        T.writes(T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                        T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.max(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] + p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4], T.float32(0))
b0 = sch.get_block(name="data_pad", func_name="main")
b1 = sch.get_block(name="conv2d_NCHWc", func_name="main")
b2 = sch.get_block(name="T_add", func_name="main")
b3 = sch.get_block(name="root", func_name="main")
sch.compute_inline(block=b2)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSRSRS")
l4, l5, l6, l7, l8, l9, l10, l11 = sch.get_loops(block=b1)
v12, v13, v14, v15 = sch.sample_perfect_tile(loop=l4, n=4, max_innermost_factor=64, decision=[1, 1, 1, 1])
l16, l17, l18, l19 = sch.split(loop=l4, factors=[v12, v13, v14, v15], preserve_unit_iters=True)
v20, v21, v22, v23 = sch.sample_perfect_tile(loop=l5, n=4, max_innermost_factor=64, decision=[2, 8, 2, 1])
l24, l25, l26, l27 = sch.split(loop=l5, factors=[v20, v21, v22, v23], preserve_unit_iters=True)
v28, v29, v30, v31 = sch.sample_perfect_tile(loop=l6, n=4, max_innermost_factor=64, decision=[1, 1, 14, 1])
l32, l33, l34, l35 = sch.split(loop=l6, factors=[v28, v29, v30, v31], preserve_unit_iters=True)
v36, v37, v38, v39 = sch.sample_perfect_tile(loop=l7, n=4, max_innermost_factor=64, decision=[1, 1, 1, 14])
l40, l41, l42, l43 = sch.split(loop=l7, factors=[v36, v37, v38, v39], preserve_unit_iters=True)
v44, v45, v46, v47 = sch.sample_perfect_tile(loop=l8, n=4, max_innermost_factor=64, decision=[4, 1, 4, 1])
l48, l49, l50, l51 = sch.split(loop=l8, factors=[v44, v45, v46, v47], preserve_unit_iters=True)
v52, v53 = sch.sample_perfect_tile(loop=l9, n=2, max_innermost_factor=64, decision=[8, 64])
l54, l55 = sch.split(loop=l9, factors=[v52, v53], preserve_unit_iters=True)
v56, v57 = sch.sample_perfect_tile(loop=l10, n=2, max_innermost_factor=64, decision=[3, 1])
l58, l59 = sch.split(loop=l10, factors=[v56, v57], preserve_unit_iters=True)
v60, v61 = sch.sample_perfect_tile(loop=l11, n=2, max_innermost_factor=64, decision=[1, 3])
l62, l63 = sch.split(loop=l11, factors=[v60, v61], preserve_unit_iters=True)
sch.reorder(l16, l24, l32, l40, l48, l17, l25, l33, l41, l49, l54, l58, l62, l18, l26, l34, l42, l50, l55, l59, l63, l19, l27, l35, l43, l51)
b64, = sch.get_consumers(block=b1)
sch.reverse_compute_at(block=b64, loop=l49, preserve_unit_loops=True, index=-1)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.vectorize", ann_val=64)
v65 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.unroll_explicit", ann_val=v65)
l66 = sch.sample_compute_location(block=b0, decision=11)
sch.compute_at(block=b0, loop=l66, preserve_unit_loops=True, index=-1)
sch.enter_postproc()
b67 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b67, ann_key="meta_schedule.parallel")
sch.unannotate(block_or_loop=b67, ann_key="meta_schedule.vectorize")
sch.unannotate(block_or_loop=b67, ann_key="meta_schedule.unroll_explicit")
b68, b69, b70 = sch.get_child_blocks(b67)
l71, l72, l73, l74, l75, l76, l77, l78, l79, l80, l81, l82, l83, l84, l85, l86, l87 = sch.get_loops(block=b68)
l88 = sch.fuse(l71, l72, l73, l74, l75, l76, l77, l78, l79, l80, preserve_unit_iters=True)
sch.parallel(loop=l88)
l89 = sch.fuse(l87, preserve_unit_iters=True)
sch.vectorize(loop=l89)
l90, l91, l92, l93, l94, l95, l96, l97, l98, l99, l100, l101, l102, l103, l104, l105, l106 = sch.get_loops(block=b69)
l107 = sch.fuse(l90, preserve_unit_iters=True)
sch.parallel(loop=l107)
sch.annotate(block_or_loop=l107, ann_key="pragma_auto_unroll_max_step", ann_val=512)
sch.annotate(block_or_loop=l107, ann_key="pragma_unroll_explicit", ann_val=1)
l108, l109, l110, l111, l112, l113 = sch.get_loops(block=b70)
l114 = sch.fuse(l113, preserve_unit_iters=True)
sch.vectorize(loop=l114)
b115 = sch.get_block(name="conv2d_NCHWc", func_name="main")
l116, l117, l118, l119, l120, l121, l122, l123, l124, l125, l126, l127, l128, l129, l130, l131, l132 = sch.get_loops(block=b115)
b133 = sch.decompose_reduction(block=b115, loop=l117)
2024-04-28 08:52:33 [INFO] [task_scheduler.cc:121] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #145: Error in building:
LocalBuilder: Timeout, killed after 30.0 seconds
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(1), T.int64(14), T.int64(14), T.int64(512)), "float32"), p1: T.Buffer((T.int64(32), T.int64(1), T.int64(3), T.int64(3), T.int64(512), T.int64(16)), "float32"), p2: T.Buffer((T.int64(1), T.int64(32), T.int64(1), T.int64(1), T.int64(16)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(32), T.int64(14), T.int64(14), T.int64(16)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        data_pad = T.alloc_buffer((T.int64(1), T.int64(1), T.int64(16), T.int64(16), T.int64(512)))
        conv2d_NCHWc = T.alloc_buffer((T.int64(1), T.int64(32), T.int64(14), T.int64(14), T.int64(16)))
        for n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused_fused in T.parallel(T.int64(64), annotations={"pragma_auto_unroll_max_step": 512, "pragma_unroll_explicit": 1}):
            for n_2_init, oc_chunk_2_init, oh_2_init, ow_2_init, oc_block_2_init, n_3_init, oc_chunk_3_init, oh_3_init, ow_3_init, oc_block_3_init in T.grid(T.int64(1), T.int64(2), T.int64(14), T.int64(1), T.int64(4), T.int64(1), T.int64(1), T.int64(1), T.int64(14), T.int64(1)):
                with T.block("conv2d_NCHWc_init"):
                    v_n = T.axis.spatial(T.int64(1), n_2_init + n_3_init)
                    v_oc_chunk = T.axis.spatial(T.int64(32), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused_fused // T.int64(16) * T.int64(8) + n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused_fused % T.int64(4) * T.int64(2) + oc_chunk_2_init + oc_chunk_3_init)
                    v_oh = T.axis.spatial(T.int64(14), oh_2_init + oh_3_init)
                    v_ow = T.axis.spatial(T.int64(14), ow_2_init * T.int64(14) + ow_3_init)
                    v_oc_block = T.axis.spatial(T.int64(16), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused_fused % T.int64(16) // T.int64(4) * T.int64(4) + oc_block_2_init + oc_block_3_init)
                    T.reads()
                    T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                    T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                    conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = T.float32(0)
            for ic_0, kh_0 in T.grid(T.int64(8), T.int64(3)):
                for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(1), T.int64(14), T.int64(16)):
                    for ax4_fused in T.vectorized(T.int64(64)):
                        with T.block("data_pad"):
                            v_i0, v_i1 = T.axis.remap("SS", [ax0, ax1])
                            v_i2 = T.axis.spatial(T.int64(16), kh_0 + ax2)
                            v_i3 = T.axis.spatial(T.int64(16), ax3)
                            v_i4 = T.axis.spatial(T.int64(512), ic_0 * T.int64(64) + ax4_fused)
                            T.reads(p0[v_i0, v_i1, v_i2 - T.int64(1), v_i3 - T.int64(1), v_i4])
                            T.writes(data_pad[v_i0, v_i1, v_i2, v_i3, v_i4])
                            data_pad[v_i0, v_i1, v_i2, v_i3, v_i4] = T.if_then_else(T.int64(1) <= v_i2 and v_i2 < T.int64(15) and T.int64(1) <= v_i3 and v_i3 < T.int64(15), p0[v_i0, v_i1, v_i2 - T.int64(1), v_i3 - T.int64(1), v_i4], T.float32(0))
                for kw_0, n_2, oc_chunk_2, oh_2, ow_2, oc_block_2, ic_1, kh_1, kw_1, n_3, oc_chunk_3, oh_3, ow_3, oc_block_3 in T.grid(T.int64(1), T.int64(1), T.int64(2), T.int64(14), T.int64(1), T.int64(4), T.int64(64), T.int64(1), T.int64(3), T.int64(1), T.int64(1), T.int64(1), T.int64(14), T.int64(1)):
                    with T.block("conv2d_NCHWc_update"):
                        v_n = T.axis.spatial(T.int64(1), n_2 + n_3)
                        v_oc_chunk = T.axis.spatial(T.int64(32), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused_fused // T.int64(16) * T.int64(8) + n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused_fused % T.int64(4) * T.int64(2) + oc_chunk_2 + oc_chunk_3)
                        v_oh = T.axis.spatial(T.int64(14), oh_2 + oh_3)
                        v_ow = T.axis.spatial(T.int64(14), ow_2 * T.int64(14) + ow_3)
                        v_oc_block = T.axis.spatial(T.int64(16), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused_fused % T.int64(16) // T.int64(4) * T.int64(4) + oc_block_2 + oc_block_3)
                        v_ic = T.axis.reduce(T.int64(512), ic_0 * T.int64(64) + ic_1)
                        v_kh = T.axis.reduce(T.int64(3), kh_0 + kh_1)
                        v_kw = T.axis.reduce(T.int64(3), kw_0 * T.int64(3) + kw_1)
                        T.reads(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block], data_pad[v_n, v_ic // T.int64(512), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(512)], p1[v_oc_chunk, v_ic // T.int64(512), v_kh, v_kw, v_ic % T.int64(512), v_oc_block])
                        T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                        T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                        conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] + data_pad[v_n, v_ic // T.int64(512), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(512)] * p1[v_oc_chunk, v_ic // T.int64(512), v_kh, v_kw, v_ic % T.int64(512), v_oc_block]
            for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(2), T.int64(14), T.int64(14)):
                for ax4_fused in T.vectorized(T.int64(4)):
                    with T.block("T_relu"):
                        v_ax0 = T.axis.spatial(T.int64(1), ax0)
                        v_ax1 = T.axis.spatial(T.int64(32), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused_fused // T.int64(16) * T.int64(8) + n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused_fused % T.int64(4) * T.int64(2) + ax1)
                        v_ax2, v_ax3 = T.axis.remap("SS", [ax2, ax3])
                        v_ax4 = T.axis.spatial(T.int64(16), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused_fused % T.int64(16) // T.int64(4) * T.int64(4) + ax4_fused)
                        T.reads(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4])
                        T.writes(T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                        T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.max(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] + p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4], T.float32(0))
b0 = sch.get_block(name="data_pad", func_name="main")
b1 = sch.get_block(name="conv2d_NCHWc", func_name="main")
b2 = sch.get_block(name="T_add", func_name="main")
b3 = sch.get_block(name="root", func_name="main")
sch.compute_inline(block=b2)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSRSRS")
l4, l5, l6, l7, l8, l9, l10, l11 = sch.get_loops(block=b1)
v12, v13, v14, v15 = sch.sample_perfect_tile(loop=l4, n=4, max_innermost_factor=64, decision=[1, 1, 1, 1])
l16, l17, l18, l19 = sch.split(loop=l4, factors=[v12, v13, v14, v15], preserve_unit_iters=True)
v20, v21, v22, v23 = sch.sample_perfect_tile(loop=l5, n=4, max_innermost_factor=64, decision=[4, 4, 2, 1])
l24, l25, l26, l27 = sch.split(loop=l5, factors=[v20, v21, v22, v23], preserve_unit_iters=True)
v28, v29, v30, v31 = sch.sample_perfect_tile(loop=l6, n=4, max_innermost_factor=64, decision=[1, 1, 14, 1])
l32, l33, l34, l35 = sch.split(loop=l6, factors=[v28, v29, v30, v31], preserve_unit_iters=True)
v36, v37, v38, v39 = sch.sample_perfect_tile(loop=l7, n=4, max_innermost_factor=64, decision=[1, 1, 1, 14])
l40, l41, l42, l43 = sch.split(loop=l7, factors=[v36, v37, v38, v39], preserve_unit_iters=True)
v44, v45, v46, v47 = sch.sample_perfect_tile(loop=l8, n=4, max_innermost_factor=64, decision=[4, 1, 4, 1])
l48, l49, l50, l51 = sch.split(loop=l8, factors=[v44, v45, v46, v47], preserve_unit_iters=True)
v52, v53 = sch.sample_perfect_tile(loop=l9, n=2, max_innermost_factor=64, decision=[8, 64])
l54, l55 = sch.split(loop=l9, factors=[v52, v53], preserve_unit_iters=True)
v56, v57 = sch.sample_perfect_tile(loop=l10, n=2, max_innermost_factor=64, decision=[3, 1])
l58, l59 = sch.split(loop=l10, factors=[v56, v57], preserve_unit_iters=True)
v60, v61 = sch.sample_perfect_tile(loop=l11, n=2, max_innermost_factor=64, decision=[1, 3])
l62, l63 = sch.split(loop=l11, factors=[v60, v61], preserve_unit_iters=True)
sch.reorder(l16, l24, l32, l40, l48, l17, l25, l33, l41, l49, l54, l58, l62, l18, l26, l34, l42, l50, l55, l59, l63, l19, l27, l35, l43, l51)
b64, = sch.get_consumers(block=b1)
sch.reverse_compute_at(block=b64, loop=l49, preserve_unit_loops=True, index=-1)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.vectorize", ann_val=64)
v65 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.unroll_explicit", ann_val=v65)
l66 = sch.sample_compute_location(block=b0, decision=11)
sch.compute_at(block=b0, loop=l66, preserve_unit_loops=True, index=-1)
sch.enter_postproc()
b67 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b67, ann_key="meta_schedule.parallel")
sch.unannotate(block_or_loop=b67, ann_key="meta_schedule.vectorize")
sch.unannotate(block_or_loop=b67, ann_key="meta_schedule.unroll_explicit")
b68, b69, b70 = sch.get_child_blocks(b67)
l71, l72, l73, l74, l75, l76, l77, l78, l79, l80, l81, l82, l83, l84, l85, l86, l87 = sch.get_loops(block=b68)
l88 = sch.fuse(l71, l72, l73, l74, l75, l76, l77, l78, l79, l80, preserve_unit_iters=True)
sch.parallel(loop=l88)
l89 = sch.fuse(l87, preserve_unit_iters=True)
sch.vectorize(loop=l89)
l90, l91, l92, l93, l94, l95, l96, l97, l98, l99, l100, l101, l102, l103, l104, l105, l106 = sch.get_loops(block=b69)
l107 = sch.fuse(l90, preserve_unit_iters=True)
sch.parallel(loop=l107)
sch.annotate(block_or_loop=l107, ann_key="pragma_auto_unroll_max_step", ann_val=512)
sch.annotate(block_or_loop=l107, ann_key="pragma_unroll_explicit", ann_val=1)
l108, l109, l110, l111, l112, l113 = sch.get_loops(block=b70)
l114 = sch.fuse(l113, preserve_unit_iters=True)
sch.vectorize(loop=l114)
b115 = sch.get_block(name="conv2d_NCHWc", func_name="main")
l116, l117, l118, l119, l120, l121, l122, l123, l124, l125, l126, l127, l128, l129, l130, l131, l132 = sch.get_loops(block=b115)
b133 = sch.decompose_reduction(block=b115, loop=l117)
2024-04-28 08:52:33 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #146: GFLOPs: 75.5666. Time: 12241.4441 us. Best GFLOPs: 186.8079
2024-04-28 08:52:33 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #147: GFLOPs: 78.6674. Time: 11758.9289 us. Best GFLOPs: 186.8079
2024-04-28 08:52:33 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #148: GFLOPs: 95.1818. Time: 9718.7127 us. Best GFLOPs: 186.8079
2024-04-28 08:52:33 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #149: GFLOPs: 30.2849. Time: 30544.7645 us. Best GFLOPs: 186.8079
2024-04-28 08:52:33 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #150: GFLOPs: 133.9575. Time: 6905.5107 us. Best GFLOPs: 186.8079
2024-04-28 08:52:33 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #151: GFLOPs: 24.2643. Time: 38123.6777 us. Best GFLOPs: 186.8079
2024-04-28 08:52:33 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #152: GFLOPs: 69.7662. Time: 13259.2081 us. Best GFLOPs: 186.8079
2024-04-28 08:52:33 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #153: GFLOPs: 21.8021. Time: 42429.0627 us. Best GFLOPs: 186.8079
2024-04-28 08:52:33 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #154: GFLOPs: 36.0498. Time: 25660.1938 us. Best GFLOPs: 186.8079
2024-04-28 08:52:33 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #155: GFLOPs: 113.8979. Time: 8121.7012 us. Best GFLOPs: 186.8079
2024-04-28 08:52:33 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #156: GFLOPs: 22.6346. Time: 40868.5720 us. Best GFLOPs: 186.8079
2024-04-28 08:52:33 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #157: GFLOPs: 48.7779. Time: 18964.4250 us. Best GFLOPs: 186.8079
2024-04-28 08:52:33 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #158: GFLOPs: 87.9277. Time: 10520.5139 us. Best GFLOPs: 186.8079
2024-04-28 08:52:33 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #159: GFLOPs: 123.1430. Time: 7511.9535 us. Best GFLOPs: 186.8079
2024-04-28 08:52:33 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #160: GFLOPs: 107.5299. Time: 8602.6712 us. Best GFLOPs: 186.8079
2024-04-28 08:52:33 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #161: GFLOPs: 184.7592. Time: 5006.7596 us. Best GFLOPs: 186.8079
2024-04-28 08:52:33 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #162: GFLOPs: 122.8751. Time: 7528.3331 us. Best GFLOPs: 186.8079
2024-04-28 08:52:33 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #163: GFLOPs: 33.8474. Time: 27329.8480 us. Best GFLOPs: 186.8079
2024-04-28 08:52:33 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #164: GFLOPs: 16.4489. Time: 56237.4623 us. Best GFLOPs: 186.8079
2024-04-28 08:52:33 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #165: GFLOPs: 114.8434. Time: 8054.8339 us. Best GFLOPs: 186.8079
2024-04-28 08:52:33 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #166: GFLOPs: 129.5285. Time: 7141.6335 us. Best GFLOPs: 186.8079
2024-04-28 08:52:33 [INFO] [task_scheduler.cc:121] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #167: Error in building:
LocalBuilder: Timeout, killed after 30.0 seconds
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(1), T.int64(14), T.int64(14), T.int64(512)), "float32"), p1: T.Buffer((T.int64(32), T.int64(1), T.int64(3), T.int64(3), T.int64(512), T.int64(16)), "float32"), p2: T.Buffer((T.int64(1), T.int64(32), T.int64(1), T.int64(1), T.int64(16)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(32), T.int64(14), T.int64(14), T.int64(16)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        data_pad = T.alloc_buffer((T.int64(1), T.int64(1), T.int64(16), T.int64(16), T.int64(512)))
        conv2d_NCHWc = T.alloc_buffer((T.int64(1), T.int64(32), T.int64(14), T.int64(14), T.int64(16)))
        for n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_fused_fused in T.parallel(T.int64(448), annotations={"pragma_auto_unroll_max_step": 512, "pragma_unroll_explicit": 1}):
            for ax0, ax1, ax2, ax3, ax4 in T.grid(T.int64(1), T.int64(1), T.int64(9), T.int64(3), T.int64(512)):
                with T.block("data_pad"):
                    v_i0, v_i1 = T.axis.remap("SS", [ax0, ax1])
                    v_i2 = T.axis.spatial(T.int64(16), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_fused_fused % T.int64(28) // T.int64(14) * T.int64(7) + ax2)
                    v_i3 = T.axis.spatial(T.int64(16), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_fused_fused % T.int64(14) + ax3)
                    v_i4 = T.axis.spatial(T.int64(512), ax4)
                    T.reads(p0[v_i0, v_i1, v_i2 - T.int64(1), v_i3 - T.int64(1), v_i4])
                    T.writes(data_pad[v_i0, v_i1, v_i2, v_i3, v_i4])
                    data_pad[v_i0, v_i1, v_i2, v_i3, v_i4] = T.if_then_else(T.int64(1) <= v_i2 and v_i2 < T.int64(15) and T.int64(1) <= v_i3 and v_i3 < T.int64(15), p0[v_i0, v_i1, v_i2 - T.int64(1), v_i3 - T.int64(1), v_i4], T.float32(0))
            for oc_block_1 in range(T.int64(2)):
                for n_2_init, oc_chunk_2_init, oh_2_init, ow_2_init, oc_block_2_init, n_3_init, oc_chunk_3_init, oh_3_init, ow_3_init, oc_block_3_init in T.grid(T.int64(1), T.int64(1), T.int64(7), T.int64(1), T.int64(8), T.int64(1), T.int64(2), T.int64(1), T.int64(1), T.int64(1)):
                    with T.block("conv2d_NCHWc_init"):
                        v_n = T.axis.spatial(T.int64(1), n_2_init + n_3_init)
                        v_oc_chunk = T.axis.spatial(T.int64(32), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_fused_fused // T.int64(28) * T.int64(2) + oc_chunk_2_init * T.int64(2) + oc_chunk_3_init)
                        v_oh = T.axis.spatial(T.int64(14), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_fused_fused % T.int64(28) // T.int64(14) * T.int64(7) + oh_2_init + oh_3_init)
                        v_ow = T.axis.spatial(T.int64(14), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_fused_fused % T.int64(14) + ow_2_init + ow_3_init)
                        v_oc_block = T.axis.spatial(T.int64(16), oc_block_1 * T.int64(8) + oc_block_2_init + oc_block_3_init)
                        T.reads()
                        T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                        T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                        conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = T.float32(0)
                for ic_0, kh_0, kw_0, n_2, oc_chunk_2, oh_2, ow_2, oc_block_2, ic_1, kh_1, kw_1, n_3, oc_chunk_3, oh_3, ow_3, oc_block_3 in T.grid(T.int64(32), T.int64(3), T.int64(3), T.int64(1), T.int64(1), T.int64(7), T.int64(1), T.int64(8), T.int64(16), T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(1), T.int64(1), T.int64(1)):
                    with T.block("conv2d_NCHWc_update"):
                        v_n = T.axis.spatial(T.int64(1), n_2 + n_3)
                        v_oc_chunk = T.axis.spatial(T.int64(32), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_fused_fused // T.int64(28) * T.int64(2) + oc_chunk_2 * T.int64(2) + oc_chunk_3)
                        v_oh = T.axis.spatial(T.int64(14), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_fused_fused % T.int64(28) // T.int64(14) * T.int64(7) + oh_2 + oh_3)
                        v_ow = T.axis.spatial(T.int64(14), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_fused_fused % T.int64(14) + ow_2 + ow_3)
                        v_oc_block = T.axis.spatial(T.int64(16), oc_block_1 * T.int64(8) + oc_block_2 + oc_block_3)
                        v_ic = T.axis.reduce(T.int64(512), ic_0 * T.int64(16) + ic_1)
                        v_kh = T.axis.reduce(T.int64(3), kh_0 + kh_1)
                        v_kw = T.axis.reduce(T.int64(3), kw_0 + kw_1)
                        T.reads(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block], data_pad[v_n, v_ic // T.int64(512), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(512)], p1[v_oc_chunk, v_ic // T.int64(512), v_kh, v_kw, v_ic % T.int64(512), v_oc_block])
                        T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                        T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                        conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] + data_pad[v_n, v_ic // T.int64(512), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(512)] * p1[v_oc_chunk, v_ic // T.int64(512), v_kh, v_kw, v_ic % T.int64(512), v_oc_block]
        for ax0_ax1_ax2_ax3_ax4_fused_0 in T.parallel(T.int64(1568)):
            for ax0_ax1_ax2_ax3_ax4_fused_1 in T.vectorized(T.int64(64)):
                with T.block("T_relu"):
                    v_ax0 = T.axis.spatial(T.int64(1), T.int64(0))
                    v_ax1 = T.axis.spatial(T.int64(32), (ax0_ax1_ax2_ax3_ax4_fused_0 * T.int64(64) + ax0_ax1_ax2_ax3_ax4_fused_1) // T.int64(3136))
                    v_ax2 = T.axis.spatial(T.int64(14), (ax0_ax1_ax2_ax3_ax4_fused_0 * T.int64(64) + ax0_ax1_ax2_ax3_ax4_fused_1) % T.int64(3136) // T.int64(224))
                    v_ax3 = T.axis.spatial(T.int64(14), (ax0_ax1_ax2_ax3_ax4_fused_0 * T.int64(64) + ax0_ax1_ax2_ax3_ax4_fused_1) % T.int64(224) // T.int64(16))
                    v_ax4 = T.axis.spatial(T.int64(16), (ax0_ax1_ax2_ax3_ax4_fused_0 * T.int64(64) + ax0_ax1_ax2_ax3_ax4_fused_1) % T.int64(16))
                    T.reads(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4])
                    T.writes(T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                    T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.max(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] + p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4], T.float32(0))
b0 = sch.get_block(name="data_pad", func_name="main")
b1 = sch.get_block(name="conv2d_NCHWc", func_name="main")
b2 = sch.get_block(name="T_add", func_name="main")
b3 = sch.get_block(name="root", func_name="main")
sch.compute_inline(block=b2)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSRSRS")
l4, l5, l6, l7, l8, l9, l10, l11 = sch.get_loops(block=b1)
v12, v13, v14, v15 = sch.sample_perfect_tile(loop=l4, n=4, max_innermost_factor=64, decision=[1, 1, 1, 1])
l16, l17, l18, l19 = sch.split(loop=l4, factors=[v12, v13, v14, v15], preserve_unit_iters=True)
v20, v21, v22, v23 = sch.sample_perfect_tile(loop=l5, n=4, max_innermost_factor=64, decision=[16, 1, 1, 2])
l24, l25, l26, l27 = sch.split(loop=l5, factors=[v20, v21, v22, v23], preserve_unit_iters=True)
v28, v29, v30, v31 = sch.sample_perfect_tile(loop=l6, n=4, max_innermost_factor=64, decision=[1, 2, 7, 1])
l32, l33, l34, l35 = sch.split(loop=l6, factors=[v28, v29, v30, v31], preserve_unit_iters=True)
v36, v37, v38, v39 = sch.sample_perfect_tile(loop=l7, n=4, max_innermost_factor=64, decision=[1, 14, 1, 1])
l40, l41, l42, l43 = sch.split(loop=l7, factors=[v36, v37, v38, v39], preserve_unit_iters=True)
v44, v45, v46, v47 = sch.sample_perfect_tile(loop=l8, n=4, max_innermost_factor=64, decision=[1, 2, 8, 1])
l48, l49, l50, l51 = sch.split(loop=l8, factors=[v44, v45, v46, v47], preserve_unit_iters=True)
v52, v53 = sch.sample_perfect_tile(loop=l9, n=2, max_innermost_factor=64, decision=[32, 16])
l54, l55 = sch.split(loop=l9, factors=[v52, v53], preserve_unit_iters=True)
v56, v57 = sch.sample_perfect_tile(loop=l10, n=2, max_innermost_factor=64, decision=[3, 1])
l58, l59 = sch.split(loop=l10, factors=[v56, v57], preserve_unit_iters=True)
v60, v61 = sch.sample_perfect_tile(loop=l11, n=2, max_innermost_factor=64, decision=[3, 1])
l62, l63 = sch.split(loop=l11, factors=[v60, v61], preserve_unit_iters=True)
sch.reorder(l16, l24, l32, l40, l48, l17, l25, l33, l41, l49, l54, l58, l62, l18, l26, l34, l42, l50, l55, l59, l63, l19, l27, l35, l43, l51)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.vectorize", ann_val=64)
v64 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.unroll_explicit", ann_val=v64)
l65 = sch.sample_compute_location(block=b0, decision=8)
sch.compute_at(block=b0, loop=l65, preserve_unit_loops=True, index=-1)
sch.enter_postproc()
b66 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b66, ann_key="meta_schedule.parallel")
sch.unannotate(block_or_loop=b66, ann_key="meta_schedule.vectorize")
sch.unannotate(block_or_loop=b66, ann_key="meta_schedule.unroll_explicit")
b67, b68, b69 = sch.get_child_blocks(b66)
l70, l71, l72, l73, l74, l75, l76, l77, l78, l79, l80, l81, l82, l83 = sch.get_loops(block=b67)
l84 = sch.fuse(l70, l71, l72, l73, l74, l75, l76, l77, l78, preserve_unit_iters=True)
sch.parallel(loop=l84)
l85, l86, l87, l88, l89, l90, l91, l92, l93, l94, l95, l96, l97, l98, l99, l100, l101, l102 = sch.get_loops(block=b68)
l103 = sch.fuse(l85, preserve_unit_iters=True)
sch.parallel(loop=l103)
sch.annotate(block_or_loop=l103, ann_key="pragma_auto_unroll_max_step", ann_val=512)
sch.annotate(block_or_loop=l103, ann_key="pragma_unroll_explicit", ann_val=1)
l104, l105, l106, l107, l108 = sch.get_loops(block=b69)
l109 = sch.fuse(l104, l105, l106, l107, l108, preserve_unit_iters=True)
l110, l111 = sch.split(loop=l109, factors=[None, 64], preserve_unit_iters=True)
sch.parallel(loop=l110)
sch.vectorize(loop=l111)
b112 = sch.get_block(name="conv2d_NCHWc", func_name="main")
l113, l114, l115, l116, l117, l118, l119, l120, l121, l122, l123, l124, l125, l126, l127, l128, l129, l130 = sch.get_loops(block=b112)
b131 = sch.decompose_reduction(block=b112, loop=l115)
2024-04-28 08:52:33 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #168: GFLOPs: 128.8545. Time: 7178.9891 us. Best GFLOPs: 186.8079
2024-04-28 08:52:33 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #169: GFLOPs: 36.9857. Time: 25010.8448 us. Best GFLOPs: 186.8079
2024-04-28 08:52:33 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #170: GFLOPs: 123.5077. Time: 7489.7724 us. Best GFLOPs: 186.8079
2024-04-28 08:52:33 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #171: GFLOPs: 4.0599. Time: 227848.3297 us. Best GFLOPs: 186.8079
2024-04-28 08:52:33 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #172: GFLOPs: 144.1093. Time: 6419.0504 us. Best GFLOPs: 186.8079
2024-04-28 08:52:33 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #173: GFLOPs: 7.0525. Time: 131166.0163 us. Best GFLOPs: 186.8079
2024-04-28 08:52:33 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #174: GFLOPs: 5.8108. Time: 159195.2193 us. Best GFLOPs: 186.8079
2024-04-28 08:52:33 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #175: GFLOPs: 78.5165. Time: 11781.5304 us. Best GFLOPs: 186.8079
2024-04-28 08:52:33 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #176: GFLOPs: 18.0345. Time: 51293.1317 us. Best GFLOPs: 186.8079
2024-04-28 08:52:33 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #177: GFLOPs: 91.6789. Time: 10090.0454 us. Best GFLOPs: 186.8079
2024-04-28 08:52:33 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #178: GFLOPs: 22.0432. Time: 41965.1743 us. Best GFLOPs: 186.8079
2024-04-28 08:52:33 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #179: GFLOPs: 118.9909. Time: 7774.0813 us. Best GFLOPs: 186.8079
2024-04-28 08:52:33 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #180: GFLOPs: 48.9972. Time: 18879.5352 us. Best GFLOPs: 186.8079
2024-04-28 08:52:33 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #181: GFLOPs: 26.9857. Time: 34279.0760 us. Best GFLOPs: 186.8079
2024-04-28 08:52:33 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #182: GFLOPs: 105.8945. Time: 8735.5278 us. Best GFLOPs: 186.8079
2024-04-28 08:52:33 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #183: GFLOPs: 55.6420. Time: 16624.9237 us. Best GFLOPs: 186.8079
2024-04-28 08:52:33 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #184: GFLOPs: 54.6194. Time: 16936.1877 us. Best GFLOPs: 186.8079
2024-04-28 08:52:33 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #185: GFLOPs: 42.0714. Time: 21987.5024 us. Best GFLOPs: 186.8079
2024-04-28 08:52:33 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #186: GFLOPs: 69.6941. Time: 13272.9246 us. Best GFLOPs: 186.8079
2024-04-28 08:52:33 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #187: GFLOPs: 72.4178. Time: 12773.7182 us. Best GFLOPs: 186.8079
2024-04-28 08:52:33 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #188: GFLOPs: 160.5133. Time: 5763.0408 us. Best GFLOPs: 186.8079
2024-04-28 08:52:33 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #189: GFLOPs: 46.8394. Time: 19749.2943 us. Best GFLOPs: 186.8079
2024-04-28 08:52:33 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #190: GFLOPs: 42.5325. Time: 21749.1462 us. Best GFLOPs: 186.8079
2024-04-28 08:52:33 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #191: GFLOPs: 4.4773. Time: 206607.9513 us. Best GFLOPs: 186.8079
2024-04-28 08:52:33 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #192: GFLOPs: 1.3913. Time: 664868.6330 us. Best GFLOPs: 186.8079
2024-04-28 09:07:26 [INFO] [evolutionary_search.cc:713] Generating candidates......
2024-04-28 09:07:28 [INFO] [evolutionary_search.cc:715] Picked top 102 candidate(s) from database
2024-04-28 09:07:32 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x3861aa8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x37d26b8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x4dd4148)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x3201bb8)]: 0 failure(s)
2024-04-28 09:07:32 [INFO] [evolutionary_search.cc:723] Sampled 410 candidate(s)
2024-04-28 09:07:44 [INFO] [evolutionary_search.cc:621] Evolve iter #0 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x3861aa8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x37d26b8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x4dd4148)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x3201bb8)]: 0 failure(s)
2024-04-28 09:07:55 [INFO] [evolutionary_search.cc:621] Evolve iter #1 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x3861aa8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x37d26b8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x4dd4148)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x3201bb8)]: 0 failure(s)
2024-04-28 09:08:07 [INFO] [evolutionary_search.cc:621] Evolve iter #2 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x3861aa8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x37d26b8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x4dd4148)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x3201bb8)]: 0 failure(s)
2024-04-28 09:08:20 [INFO] [evolutionary_search.cc:621] Evolve iter #3 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x3861aa8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x37d26b8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x4dd4148)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x3201bb8)]: 0 failure(s)
2024-04-28 09:08:27 [INFO] [evolutionary_search.cc:649] Scores of the best 64 candidates:
[1 : 16]:	0.9173  0.9169  0.8451  0.8451  0.8443  0.8438  0.8432  0.8405  0.8273  0.7993  0.7993  0.7945  0.7896  0.7809  0.7790  0.7790
[17 : 32]:	0.7790  0.7790  0.7790  0.7790  0.7790  0.7788  0.7788  0.7696  0.7541  0.7498  0.7498  0.7496  0.7495  0.7477  0.7455  0.7431
[33 : 48]:	0.7410  0.7410  0.7410  0.7410  0.7341  0.7341  0.7341  0.7339  0.7339  0.7320  0.7293  0.7274  0.7273  0.7265  0.7224  0.7224
[49 : 64]:	0.7182  0.7178  0.7170  0.7161  0.7153  0.7131  0.7118  0.7114  0.7043  0.7037  0.7033  0.7011  0.6983  0.6964  0.6960  0.6955
2024-04-28 09:08:27 [INFO] [evolutionary_search.cc:727] Got 64 candidate(s) with evolutionary search
2024-04-28 09:08:28 [INFO] [evolutionary_search.cc:730] Sending 64 candidates(s) for measurement
2024-04-28 09:10:10 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #193: GFLOPs: 187.6184. Time: 4930.4580 us. Best GFLOPs: 187.6184
2024-04-28 09:10:10 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #194: GFLOPs: 155.0450. Time: 5966.2988 us. Best GFLOPs: 187.6184
2024-04-28 09:10:10 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #195: GFLOPs: 77.5732. Time: 11924.7903 us. Best GFLOPs: 187.6184
2024-04-28 09:10:10 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #196: GFLOPs: 102.3664. Time: 9036.6069 us. Best GFLOPs: 187.6184
2024-04-28 09:10:10 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #197: GFLOPs: 136.7230. Time: 6765.8308 us. Best GFLOPs: 187.6184
2024-04-28 09:10:10 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #198: GFLOPs: 115.1743. Time: 8031.6972 us. Best GFLOPs: 187.6184
2024-04-28 09:10:10 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #199: GFLOPs: 121.6579. Time: 7603.6563 us. Best GFLOPs: 187.6184
2024-04-28 09:10:10 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #200: GFLOPs: 115.0561. Time: 8039.9437 us. Best GFLOPs: 187.6184
2024-04-28 09:10:10 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #201: GFLOPs: 104.0599. Time: 8889.5378 us. Best GFLOPs: 187.6184
2024-04-28 09:10:10 [INFO] [task_scheduler.cc:121] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #202: Error in building:
LocalBuilder: Timeout, killed after 30.0 seconds
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(1), T.int64(14), T.int64(14), T.int64(512)), "float32"), p1: T.Buffer((T.int64(32), T.int64(1), T.int64(3), T.int64(3), T.int64(512), T.int64(16)), "float32"), p2: T.Buffer((T.int64(1), T.int64(32), T.int64(1), T.int64(1), T.int64(16)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(32), T.int64(14), T.int64(14), T.int64(16)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        data_pad = T.alloc_buffer((T.int64(1), T.int64(1), T.int64(16), T.int64(16), T.int64(512)))
        conv2d_NCHWc = T.alloc_buffer((T.int64(1), T.int64(32), T.int64(14), T.int64(14), T.int64(16)))
        for n_0_oc_chunk_0_oh_0_fused_fused in T.parallel(T.int64(224), annotations={"pragma_auto_unroll_max_step": 512, "pragma_unroll_explicit": 1}):
            for ax0, ax1, ax2, ax3, ax4 in T.grid(T.int64(1), T.int64(1), T.int64(4), T.int64(16), T.int64(512)):
                with T.block("data_pad"):
                    v_i0, v_i1 = T.axis.remap("SS", [ax0, ax1])
                    v_i2 = T.axis.spatial(T.int64(16), n_0_oc_chunk_0_oh_0_fused_fused % T.int64(7) * T.int64(2) + ax2)
                    v_i3, v_i4 = T.axis.remap("SS", [ax3, ax4])
                    T.reads(p0[v_i0, v_i1, v_i2 - T.int64(1), v_i3 - T.int64(1), v_i4])
                    T.writes(data_pad[v_i0, v_i1, v_i2, v_i3, v_i4])
                    data_pad[v_i0, v_i1, v_i2, v_i3, v_i4] = T.if_then_else(T.int64(1) <= v_i2 and v_i2 < T.int64(15) and T.int64(1) <= v_i3 and v_i3 < T.int64(15), p0[v_i0, v_i1, v_i2 - T.int64(1), v_i3 - T.int64(1), v_i4], T.float32(0))
            for ow_0, oc_block_0, n_1, oc_chunk_1, oh_1, ow_1, oc_block_1 in T.grid(T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(7), T.int64(1)):
                for n_2_init, oc_chunk_2_init, oh_2_init, ow_2_init, oc_block_2_init, n_3_init, oc_chunk_3_init, oh_3_init, ow_3_init in T.grid(T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(1)):
                    for oc_block_3_fused_init in T.vectorized(T.int64(16)):
                        with T.block("conv2d_NCHWc_init"):
                            v_n = T.axis.spatial(T.int64(1), n_1 + n_2_init + n_3_init)
                            v_oc_chunk = T.axis.spatial(T.int64(32), n_0_oc_chunk_0_oh_0_fused_fused // T.int64(7) + oc_chunk_1 + oc_chunk_2_init + oc_chunk_3_init)
                            v_oh = T.axis.spatial(T.int64(14), n_0_oc_chunk_0_oh_0_fused_fused % T.int64(7) * T.int64(2) + oh_1 * T.int64(2) + oh_2_init * T.int64(2) + oh_3_init)
                            v_ow = T.axis.spatial(T.int64(14), ow_0 * T.int64(14) + ow_1 * T.int64(2) + ow_2_init + ow_3_init)
                            v_oc_block = T.axis.spatial(T.int64(16), oc_block_0 * T.int64(16) + oc_block_1 * T.int64(16) + oc_block_2_init * T.int64(16) + oc_block_3_fused_init)
                            T.reads()
                            T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                            T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                            conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = T.float32(0)
                for ic_0, kh_0, kw_0, n_2, oc_chunk_2, oh_2, ow_2, oc_block_2, ic_1, kh_1, kw_1, n_3, oc_chunk_3, oh_3, ow_3 in T.grid(T.int64(64), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(1), T.int64(8), T.int64(3), T.int64(3), T.int64(1), T.int64(1), T.int64(2), T.int64(1)):
                    for oc_block_3_fused in T.vectorized(T.int64(16)):
                        with T.block("conv2d_NCHWc_update"):
                            v_n = T.axis.spatial(T.int64(1), n_1 + n_2 + n_3)
                            v_oc_chunk = T.axis.spatial(T.int64(32), n_0_oc_chunk_0_oh_0_fused_fused // T.int64(7) + oc_chunk_1 + oc_chunk_2 + oc_chunk_3)
                            v_oh = T.axis.spatial(T.int64(14), n_0_oc_chunk_0_oh_0_fused_fused % T.int64(7) * T.int64(2) + oh_1 * T.int64(2) + oh_2 * T.int64(2) + oh_3)
                            v_ow = T.axis.spatial(T.int64(14), ow_0 * T.int64(14) + ow_1 * T.int64(2) + ow_2 + ow_3)
                            v_oc_block = T.axis.spatial(T.int64(16), oc_block_0 * T.int64(16) + oc_block_1 * T.int64(16) + oc_block_2 * T.int64(16) + oc_block_3_fused)
                            v_ic = T.axis.reduce(T.int64(512), ic_0 * T.int64(8) + ic_1)
                            v_kh = T.axis.reduce(T.int64(3), kh_0 * T.int64(3) + kh_1)
                            v_kw = T.axis.reduce(T.int64(3), kw_0 * T.int64(3) + kw_1)
                            T.reads(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block], data_pad[v_n, v_ic // T.int64(512), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(512)], p1[v_oc_chunk, v_ic // T.int64(512), v_kh, v_kw, v_ic % T.int64(512), v_oc_block])
                            T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                            T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                            conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] + data_pad[v_n, v_ic // T.int64(512), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(512)] * p1[v_oc_chunk, v_ic // T.int64(512), v_kh, v_kw, v_ic % T.int64(512), v_oc_block]
                for ax0, ax1, ax2 in T.grid(T.int64(1), T.int64(1), T.int64(2)):
                    for ax3_ax4_fused in T.vectorized(T.int64(32)):
                        with T.block("T_relu"):
                            v_ax0 = T.axis.spatial(T.int64(1), ax0)
                            v_ax1 = T.axis.spatial(T.int64(32), n_0_oc_chunk_0_oh_0_fused_fused // T.int64(7) + ax1)
                            v_ax2 = T.axis.spatial(T.int64(14), n_0_oc_chunk_0_oh_0_fused_fused % T.int64(7) * T.int64(2) + ax2)
                            v_ax3 = T.axis.spatial(T.int64(14), ow_1 * T.int64(2) + ax3_ax4_fused // T.int64(16))
                            v_ax4 = T.axis.spatial(T.int64(16), ax3_ax4_fused % T.int64(16))
                            T.reads(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4])
                            T.writes(T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                            T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.max(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] + p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4], T.float32(0))
b0 = sch.get_block(name="data_pad", func_name="main")
b1 = sch.get_block(name="conv2d_NCHWc", func_name="main")
b2 = sch.get_block(name="T_add", func_name="main")
b3 = sch.get_block(name="root", func_name="main")
sch.compute_inline(block=b2)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSRSRS")
l4, l5, l6, l7, l8, l9, l10, l11 = sch.get_loops(block=b1)
v12, v13, v14, v15 = sch.sample_perfect_tile(loop=l4, n=4, max_innermost_factor=64, decision=[1, 1, 1, 1])
l16, l17, l18, l19 = sch.split(loop=l4, factors=[v12, v13, v14, v15], preserve_unit_iters=True)
v20, v21, v22, v23 = sch.sample_perfect_tile(loop=l5, n=4, max_innermost_factor=64, decision=[32, 1, 1, 1])
l24, l25, l26, l27 = sch.split(loop=l5, factors=[v20, v21, v22, v23], preserve_unit_iters=True)
v28, v29, v30, v31 = sch.sample_perfect_tile(loop=l6, n=4, max_innermost_factor=64, decision=[7, 1, 1, 2])
l32, l33, l34, l35 = sch.split(loop=l6, factors=[v28, v29, v30, v31], preserve_unit_iters=True)
v36, v37, v38, v39 = sch.sample_perfect_tile(loop=l7, n=4, max_innermost_factor=64, decision=[1, 7, 2, 1])
l40, l41, l42, l43 = sch.split(loop=l7, factors=[v36, v37, v38, v39], preserve_unit_iters=True)
v44, v45, v46, v47 = sch.sample_perfect_tile(loop=l8, n=4, max_innermost_factor=64, decision=[1, 1, 1, 16])
l48, l49, l50, l51 = sch.split(loop=l8, factors=[v44, v45, v46, v47], preserve_unit_iters=True)
v52, v53 = sch.sample_perfect_tile(loop=l9, n=2, max_innermost_factor=64, decision=[64, 8])
l54, l55 = sch.split(loop=l9, factors=[v52, v53], preserve_unit_iters=True)
v56, v57 = sch.sample_perfect_tile(loop=l10, n=2, max_innermost_factor=64, decision=[1, 3])
l58, l59 = sch.split(loop=l10, factors=[v56, v57], preserve_unit_iters=True)
v60, v61 = sch.sample_perfect_tile(loop=l11, n=2, max_innermost_factor=64, decision=[1, 3])
l62, l63 = sch.split(loop=l11, factors=[v60, v61], preserve_unit_iters=True)
sch.reorder(l16, l24, l32, l40, l48, l17, l25, l33, l41, l49, l54, l58, l62, l18, l26, l34, l42, l50, l55, l59, l63, l19, l27, l35, l43, l51)
b64, = sch.get_consumers(block=b1)
sch.reverse_compute_at(block=b64, loop=l49, preserve_unit_loops=True, index=-1)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.vectorize", ann_val=64)
v65 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.unroll_explicit", ann_val=v65)
l66 = sch.sample_compute_location(block=b0, decision=2)
sch.compute_at(block=b0, loop=l66, preserve_unit_loops=True, index=-1)
sch.enter_postproc()
b67 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b67, ann_key="meta_schedule.parallel")
sch.unannotate(block_or_loop=b67, ann_key="meta_schedule.vectorize")
sch.unannotate(block_or_loop=b67, ann_key="meta_schedule.unroll_explicit")
b68, b69, b70 = sch.get_child_blocks(b67)
l71, l72, l73, l74, l75, l76, l77, l78 = sch.get_loops(block=b68)
l79 = sch.fuse(l71, l72, l73, preserve_unit_iters=True)
sch.parallel(loop=l79)
l80, l81, l82, l83, l84, l85, l86, l87, l88, l89, l90, l91, l92, l93, l94, l95, l96, l97, l98, l99, l100, l101, l102, l103 = sch.get_loops(block=b69)
l104 = sch.fuse(l80, preserve_unit_iters=True)
sch.parallel(loop=l104)
l105 = sch.fuse(l103, preserve_unit_iters=True)
sch.vectorize(loop=l105)
sch.annotate(block_or_loop=l104, ann_key="pragma_auto_unroll_max_step", ann_val=512)
sch.annotate(block_or_loop=l104, ann_key="pragma_unroll_explicit", ann_val=1)
l106, l107, l108, l109, l110, l111, l112, l113, l114, l115, l116, l117, l118 = sch.get_loops(block=b70)
l119 = sch.fuse(l117, l118, preserve_unit_iters=True)
sch.vectorize(loop=l119)
b120 = sch.get_block(name="conv2d_NCHWc", func_name="main")
l121, l122, l123, l124, l125, l126, l127, l128, l129, l130, l131, l132, l133, l134, l135, l136, l137, l138, l139, l140, l141, l142, l143, l144 = sch.get_loops(block=b120)
b145 = sch.decompose_reduction(block=b120, loop=l129)
2024-04-28 09:10:10 [INFO] [task_scheduler.cc:121] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #203: Error in building:
LocalBuilder: Timeout, killed after 30.0 seconds
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(1), T.int64(14), T.int64(14), T.int64(512)), "float32"), p1: T.Buffer((T.int64(32), T.int64(1), T.int64(3), T.int64(3), T.int64(512), T.int64(16)), "float32"), p2: T.Buffer((T.int64(1), T.int64(32), T.int64(1), T.int64(1), T.int64(16)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(32), T.int64(14), T.int64(14), T.int64(16)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        data_pad = T.alloc_buffer((T.int64(1), T.int64(1), T.int64(16), T.int64(16), T.int64(512)))
        conv2d_NCHWc = T.alloc_buffer((T.int64(1), T.int64(32), T.int64(14), T.int64(14), T.int64(16)))
        for n_0_oc_chunk_0_oh_0_fused_fused in T.parallel(T.int64(224), annotations={"pragma_auto_unroll_max_step": 512, "pragma_unroll_explicit": 1}):
            for ax0, ax1, ax2, ax3, ax4 in T.grid(T.int64(1), T.int64(1), T.int64(4), T.int64(16), T.int64(512)):
                with T.block("data_pad"):
                    v_i0, v_i1 = T.axis.remap("SS", [ax0, ax1])
                    v_i2 = T.axis.spatial(T.int64(16), n_0_oc_chunk_0_oh_0_fused_fused % T.int64(7) * T.int64(2) + ax2)
                    v_i3, v_i4 = T.axis.remap("SS", [ax3, ax4])
                    T.reads(p0[v_i0, v_i1, v_i2 - T.int64(1), v_i3 - T.int64(1), v_i4])
                    T.writes(data_pad[v_i0, v_i1, v_i2, v_i3, v_i4])
                    data_pad[v_i0, v_i1, v_i2, v_i3, v_i4] = T.if_then_else(T.int64(1) <= v_i2 and v_i2 < T.int64(15) and T.int64(1) <= v_i3 and v_i3 < T.int64(15), p0[v_i0, v_i1, v_i2 - T.int64(1), v_i3 - T.int64(1), v_i4], T.float32(0))
            for ow_0, oc_block_0, n_1, oc_chunk_1, oh_1, ow_1, oc_block_1 in T.grid(T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(7), T.int64(1)):
                for n_2_init, oc_chunk_2_init, oh_2_init, ow_2_init, oc_block_2_init, n_3_init, oc_chunk_3_init, oh_3_init, ow_3_init in T.grid(T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(1)):
                    for oc_block_3_fused_init in T.vectorized(T.int64(16)):
                        with T.block("conv2d_NCHWc_init"):
                            v_n = T.axis.spatial(T.int64(1), n_1 + n_2_init + n_3_init)
                            v_oc_chunk = T.axis.spatial(T.int64(32), n_0_oc_chunk_0_oh_0_fused_fused // T.int64(7) + oc_chunk_1 + oc_chunk_2_init + oc_chunk_3_init)
                            v_oh = T.axis.spatial(T.int64(14), n_0_oc_chunk_0_oh_0_fused_fused % T.int64(7) * T.int64(2) + oh_1 * T.int64(2) + oh_2_init * T.int64(2) + oh_3_init)
                            v_ow = T.axis.spatial(T.int64(14), ow_0 * T.int64(14) + ow_1 * T.int64(2) + ow_2_init + ow_3_init)
                            v_oc_block = T.axis.spatial(T.int64(16), oc_block_0 * T.int64(16) + oc_block_1 * T.int64(16) + oc_block_2_init * T.int64(16) + oc_block_3_fused_init)
                            T.reads()
                            T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                            T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                            conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = T.float32(0)
                for ic_0, kh_0, kw_0, n_2, oc_chunk_2, oh_2, ow_2, oc_block_2, ic_1, kh_1, kw_1, n_3, oc_chunk_3, oh_3, ow_3 in T.grid(T.int64(64), T.int64(1), T.int64(3), T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(1), T.int64(8), T.int64(3), T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(1)):
                    for oc_block_3_fused in T.vectorized(T.int64(16)):
                        with T.block("conv2d_NCHWc_update"):
                            v_n = T.axis.spatial(T.int64(1), n_1 + n_2 + n_3)
                            v_oc_chunk = T.axis.spatial(T.int64(32), n_0_oc_chunk_0_oh_0_fused_fused // T.int64(7) + oc_chunk_1 + oc_chunk_2 + oc_chunk_3)
                            v_oh = T.axis.spatial(T.int64(14), n_0_oc_chunk_0_oh_0_fused_fused % T.int64(7) * T.int64(2) + oh_1 * T.int64(2) + oh_2 * T.int64(2) + oh_3)
                            v_ow = T.axis.spatial(T.int64(14), ow_0 * T.int64(14) + ow_1 * T.int64(2) + ow_2 + ow_3)
                            v_oc_block = T.axis.spatial(T.int64(16), oc_block_0 * T.int64(16) + oc_block_1 * T.int64(16) + oc_block_2 * T.int64(16) + oc_block_3_fused)
                            v_ic = T.axis.reduce(T.int64(512), ic_0 * T.int64(8) + ic_1)
                            v_kh = T.axis.reduce(T.int64(3), kh_0 * T.int64(3) + kh_1)
                            v_kw = T.axis.reduce(T.int64(3), kw_0 + kw_1)
                            T.reads(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block], data_pad[v_n, v_ic // T.int64(512), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(512)], p1[v_oc_chunk, v_ic // T.int64(512), v_kh, v_kw, v_ic % T.int64(512), v_oc_block])
                            T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                            T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                            conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] + data_pad[v_n, v_ic // T.int64(512), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(512)] * p1[v_oc_chunk, v_ic // T.int64(512), v_kh, v_kw, v_ic % T.int64(512), v_oc_block]
                for ax0, ax1, ax2 in T.grid(T.int64(1), T.int64(1), T.int64(2)):
                    for ax3_ax4_fused in T.vectorized(T.int64(32)):
                        with T.block("T_relu"):
                            v_ax0 = T.axis.spatial(T.int64(1), ax0)
                            v_ax1 = T.axis.spatial(T.int64(32), n_0_oc_chunk_0_oh_0_fused_fused // T.int64(7) + ax1)
                            v_ax2 = T.axis.spatial(T.int64(14), n_0_oc_chunk_0_oh_0_fused_fused % T.int64(7) * T.int64(2) + ax2)
                            v_ax3 = T.axis.spatial(T.int64(14), ow_1 * T.int64(2) + ax3_ax4_fused // T.int64(16))
                            v_ax4 = T.axis.spatial(T.int64(16), ax3_ax4_fused % T.int64(16))
                            T.reads(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4])
                            T.writes(T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                            T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.max(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] + p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4], T.float32(0))
b0 = sch.get_block(name="data_pad", func_name="main")
b1 = sch.get_block(name="conv2d_NCHWc", func_name="main")
b2 = sch.get_block(name="T_add", func_name="main")
b3 = sch.get_block(name="root", func_name="main")
sch.compute_inline(block=b2)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSRSRS")
l4, l5, l6, l7, l8, l9, l10, l11 = sch.get_loops(block=b1)
v12, v13, v14, v15 = sch.sample_perfect_tile(loop=l4, n=4, max_innermost_factor=64, decision=[1, 1, 1, 1])
l16, l17, l18, l19 = sch.split(loop=l4, factors=[v12, v13, v14, v15], preserve_unit_iters=True)
v20, v21, v22, v23 = sch.sample_perfect_tile(loop=l5, n=4, max_innermost_factor=64, decision=[32, 1, 1, 1])
l24, l25, l26, l27 = sch.split(loop=l5, factors=[v20, v21, v22, v23], preserve_unit_iters=True)
v28, v29, v30, v31 = sch.sample_perfect_tile(loop=l6, n=4, max_innermost_factor=64, decision=[7, 1, 1, 2])
l32, l33, l34, l35 = sch.split(loop=l6, factors=[v28, v29, v30, v31], preserve_unit_iters=True)
v36, v37, v38, v39 = sch.sample_perfect_tile(loop=l7, n=4, max_innermost_factor=64, decision=[1, 7, 2, 1])
l40, l41, l42, l43 = sch.split(loop=l7, factors=[v36, v37, v38, v39], preserve_unit_iters=True)
v44, v45, v46, v47 = sch.sample_perfect_tile(loop=l8, n=4, max_innermost_factor=64, decision=[1, 1, 1, 16])
l48, l49, l50, l51 = sch.split(loop=l8, factors=[v44, v45, v46, v47], preserve_unit_iters=True)
v52, v53 = sch.sample_perfect_tile(loop=l9, n=2, max_innermost_factor=64, decision=[64, 8])
l54, l55 = sch.split(loop=l9, factors=[v52, v53], preserve_unit_iters=True)
v56, v57 = sch.sample_perfect_tile(loop=l10, n=2, max_innermost_factor=64, decision=[1, 3])
l58, l59 = sch.split(loop=l10, factors=[v56, v57], preserve_unit_iters=True)
v60, v61 = sch.sample_perfect_tile(loop=l11, n=2, max_innermost_factor=64, decision=[3, 1])
l62, l63 = sch.split(loop=l11, factors=[v60, v61], preserve_unit_iters=True)
sch.reorder(l16, l24, l32, l40, l48, l17, l25, l33, l41, l49, l54, l58, l62, l18, l26, l34, l42, l50, l55, l59, l63, l19, l27, l35, l43, l51)
b64, = sch.get_consumers(block=b1)
sch.reverse_compute_at(block=b64, loop=l49, preserve_unit_loops=True, index=-1)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.vectorize", ann_val=64)
v65 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.unroll_explicit", ann_val=v65)
l66 = sch.sample_compute_location(block=b0, decision=2)
sch.compute_at(block=b0, loop=l66, preserve_unit_loops=True, index=-1)
sch.enter_postproc()
b67 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b67, ann_key="meta_schedule.parallel")
sch.unannotate(block_or_loop=b67, ann_key="meta_schedule.vectorize")
sch.unannotate(block_or_loop=b67, ann_key="meta_schedule.unroll_explicit")
b68, b69, b70 = sch.get_child_blocks(b67)
l71, l72, l73, l74, l75, l76, l77, l78 = sch.get_loops(block=b68)
l79 = sch.fuse(l71, l72, l73, preserve_unit_iters=True)
sch.parallel(loop=l79)
l80, l81, l82, l83, l84, l85, l86, l87, l88, l89, l90, l91, l92, l93, l94, l95, l96, l97, l98, l99, l100, l101, l102, l103 = sch.get_loops(block=b69)
l104 = sch.fuse(l80, preserve_unit_iters=True)
sch.parallel(loop=l104)
l105 = sch.fuse(l103, preserve_unit_iters=True)
sch.vectorize(loop=l105)
sch.annotate(block_or_loop=l104, ann_key="pragma_auto_unroll_max_step", ann_val=512)
sch.annotate(block_or_loop=l104, ann_key="pragma_unroll_explicit", ann_val=1)
l106, l107, l108, l109, l110, l111, l112, l113, l114, l115, l116, l117, l118 = sch.get_loops(block=b70)
l119 = sch.fuse(l117, l118, preserve_unit_iters=True)
sch.vectorize(loop=l119)
b120 = sch.get_block(name="conv2d_NCHWc", func_name="main")
l121, l122, l123, l124, l125, l126, l127, l128, l129, l130, l131, l132, l133, l134, l135, l136, l137, l138, l139, l140, l141, l142, l143, l144 = sch.get_loops(block=b120)
b145 = sch.decompose_reduction(block=b120, loop=l129)
2024-04-28 09:10:10 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #204: GFLOPs: 101.0553. Time: 9153.8434 us. Best GFLOPs: 187.6184
2024-04-28 09:10:10 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #205: GFLOPs: 67.0745. Time: 13791.3095 us. Best GFLOPs: 187.6184
2024-04-28 09:10:10 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #206: GFLOPs: 91.0759. Time: 10156.8508 us. Best GFLOPs: 187.6184
2024-04-28 09:10:10 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #207: GFLOPs: 165.5745. Time: 5586.8808 us. Best GFLOPs: 187.6184
2024-04-28 09:10:10 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #208: GFLOPs: 166.5849. Time: 5552.9930 us. Best GFLOPs: 187.6184
2024-04-28 09:10:10 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #209: GFLOPs: 137.1461. Time: 6744.9571 us. Best GFLOPs: 187.6184
2024-04-28 09:10:10 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #210: GFLOPs: 189.8994. Time: 4871.2356 us. Best GFLOPs: 189.8994
2024-04-28 09:10:10 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #211: GFLOPs: 138.7610. Time: 6666.4587 us. Best GFLOPs: 189.8994
2024-04-28 09:10:10 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #212: GFLOPs: 136.2983. Time: 6786.9119 us. Best GFLOPs: 189.8994
2024-04-28 09:10:10 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #213: GFLOPs: 120.0456. Time: 7705.7803 us. Best GFLOPs: 189.8994
2024-04-28 09:10:10 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #214: GFLOPs: 120.6158. Time: 7669.3504 us. Best GFLOPs: 189.8994
2024-04-28 09:10:10 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #215: GFLOPs: 121.2432. Time: 7629.6625 us. Best GFLOPs: 189.8994
2024-04-28 09:10:10 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #216: GFLOPs: 92.6558. Time: 9983.6712 us. Best GFLOPs: 189.8994
2024-04-28 09:10:10 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #217: GFLOPs: 176.7777. Time: 5232.8134 us. Best GFLOPs: 189.8994
2024-04-28 09:10:10 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #218: GFLOPs: 112.6228. Time: 8213.6512 us. Best GFLOPs: 189.8994
2024-04-28 09:10:10 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #219: GFLOPs: 118.0769. Time: 7834.2568 us. Best GFLOPs: 189.8994
2024-04-28 09:10:10 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #220: GFLOPs: 282.5735. Time: 3273.6430 us. Best GFLOPs: 282.5735
2024-04-28 09:10:10 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #221: GFLOPs: 134.5035. Time: 6877.4788 us. Best GFLOPs: 282.5735
2024-04-28 09:10:10 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #222: GFLOPs: 123.0633. Time: 7516.8184 us. Best GFLOPs: 282.5735
2024-04-28 09:10:10 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #223: GFLOPs: 128.6540. Time: 7190.1763 us. Best GFLOPs: 282.5735
2024-04-28 09:10:10 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #224: GFLOPs: 168.9890. Time: 5473.9940 us. Best GFLOPs: 282.5735
2024-04-28 09:10:10 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #225: GFLOPs: 170.3236. Time: 5431.1017 us. Best GFLOPs: 282.5735
2024-04-28 09:10:10 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #226: GFLOPs: 169.2146. Time: 5466.6955 us. Best GFLOPs: 282.5735
2024-04-28 09:10:10 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #227: GFLOPs: 166.6496. Time: 5550.8373 us. Best GFLOPs: 282.5735
2024-04-28 09:10:10 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #228: GFLOPs: 171.8510. Time: 5382.8308 us. Best GFLOPs: 282.5735
2024-04-28 09:10:10 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #229: GFLOPs: 55.9282. Time: 16539.8490 us. Best GFLOPs: 282.5735
2024-04-28 09:10:10 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #230: GFLOPs: 119.0725. Time: 7768.7542 us. Best GFLOPs: 282.5735
2024-04-28 09:10:10 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #231: GFLOPs: 173.4914. Time: 5331.9331 us. Best GFLOPs: 282.5735
2024-04-28 09:10:10 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #232: GFLOPs: 56.2037. Time: 16458.7917 us. Best GFLOPs: 282.5735
2024-04-28 09:10:10 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #233: GFLOPs: 133.1123. Time: 6949.3581 us. Best GFLOPs: 282.5735
2024-04-28 09:10:10 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #234: GFLOPs: 113.4650. Time: 8152.6901 us. Best GFLOPs: 282.5735
2024-04-28 09:10:10 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #235: GFLOPs: 114.0274. Time: 8112.4771 us. Best GFLOPs: 282.5735
2024-04-28 09:10:10 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #236: GFLOPs: 130.0374. Time: 7113.6809 us. Best GFLOPs: 282.5735
2024-04-28 09:10:10 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #237: GFLOPs: 115.4530. Time: 8012.3053 us. Best GFLOPs: 282.5735
2024-04-28 09:10:10 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #238: GFLOPs: 154.0034. Time: 6006.6502 us. Best GFLOPs: 282.5735
2024-04-28 09:10:10 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #239: GFLOPs: 125.8129. Time: 7352.5406 us. Best GFLOPs: 282.5735
2024-04-28 09:10:10 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #240: GFLOPs: 125.8145. Time: 7352.4499 us. Best GFLOPs: 282.5735
2024-04-28 09:10:10 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #241: GFLOPs: 80.3841. Time: 11507.8010 us. Best GFLOPs: 282.5735
2024-04-28 09:10:10 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #242: GFLOPs: 166.7877. Time: 5546.2416 us. Best GFLOPs: 282.5735
2024-04-28 09:10:10 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #243: GFLOPs: 125.7784. Time: 7354.5606 us. Best GFLOPs: 282.5735
2024-04-28 09:10:10 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #244: GFLOPs: 51.2616. Time: 18045.5618 us. Best GFLOPs: 282.5735
2024-04-28 09:10:10 [INFO] [task_scheduler.cc:121] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #245: Error in building:
LocalBuilder: Timeout, killed after 30.0 seconds
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(1), T.int64(14), T.int64(14), T.int64(512)), "float32"), p1: T.Buffer((T.int64(32), T.int64(1), T.int64(3), T.int64(3), T.int64(512), T.int64(16)), "float32"), p2: T.Buffer((T.int64(1), T.int64(32), T.int64(1), T.int64(1), T.int64(16)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(32), T.int64(14), T.int64(14), T.int64(16)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        data_pad = T.alloc_buffer((T.int64(1), T.int64(1), T.int64(16), T.int64(16), T.int64(512)))
        conv2d_NCHWc = T.alloc_buffer((T.int64(1), T.int64(32), T.int64(14), T.int64(14), T.int64(16)))
        for n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused_fused in T.parallel(T.int64(448), annotations={"pragma_auto_unroll_max_step": 512, "pragma_unroll_explicit": 1}):
            for n_2_init, oc_chunk_2_init, oh_2_init, ow_2_init, oc_block_2_init, n_3_init, oc_chunk_3_init, oh_3_init, ow_3_init in T.grid(T.int64(1), T.int64(2), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(1), T.int64(14)):
                for oc_block_3_fused_init in T.vectorized(T.int64(4)):
                    with T.block("conv2d_NCHWc_init"):
                        v_n = T.axis.spatial(T.int64(1), n_2_init + n_3_init)
                        v_oc_chunk = T.axis.spatial(T.int64(32), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused_fused // T.int64(112) * T.int64(8) + n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused_fused % T.int64(4) // T.int64(2) * T.int64(4) + oc_chunk_2_init * T.int64(2) + oc_chunk_3_init)
                        v_oh = T.axis.spatial(T.int64(14), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused_fused % T.int64(112) // T.int64(8) + oh_2_init + oh_3_init)
                        v_ow = T.axis.spatial(T.int64(14), ow_2_init * T.int64(14) + ow_3_init)
                        v_oc_block = T.axis.spatial(T.int64(16), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused_fused % T.int64(8) // T.int64(4) * T.int64(8) + n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused_fused % T.int64(2) * T.int64(4) + oc_block_2_init * T.int64(4) + oc_block_3_fused_init)
                        T.reads()
                        T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                        T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                        conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = T.float32(0)
            for ic_0 in range(T.int64(32)):
                for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(1), T.int64(3), T.int64(16)):
                    for ax4_fused in T.vectorized(T.int64(16)):
                        with T.block("data_pad"):
                            v_i0, v_i1 = T.axis.remap("SS", [ax0, ax1])
                            v_i2 = T.axis.spatial(T.int64(16), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused_fused % T.int64(112) // T.int64(8) + ax2)
                            v_i3 = T.axis.spatial(T.int64(16), ax3)
                            v_i4 = T.axis.spatial(T.int64(512), ic_0 * T.int64(16) + ax4_fused)
                            T.reads(p0[v_i0, v_i1, v_i2 - T.int64(1), v_i3 - T.int64(1), v_i4])
                            T.writes(data_pad[v_i0, v_i1, v_i2, v_i3, v_i4])
                            data_pad[v_i0, v_i1, v_i2, v_i3, v_i4] = T.if_then_else(T.int64(1) <= v_i2 and v_i2 < T.int64(15) and T.int64(1) <= v_i3 and v_i3 < T.int64(15), p0[v_i0, v_i1, v_i2 - T.int64(1), v_i3 - T.int64(1), v_i4], T.float32(0))
                for kh_0, kw_0, n_2, oc_chunk_2, oh_2, ow_2, oc_block_2, ic_1, kh_1, kw_1, n_3, oc_chunk_3, oh_3, ow_3 in T.grid(T.int64(3), T.int64(3), T.int64(1), T.int64(2), T.int64(1), T.int64(1), T.int64(1), T.int64(16), T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(1), T.int64(14)):
                    for oc_block_3_fused in T.vectorized(T.int64(4)):
                        with T.block("conv2d_NCHWc_update"):
                            v_n = T.axis.spatial(T.int64(1), n_2 + n_3)
                            v_oc_chunk = T.axis.spatial(T.int64(32), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused_fused // T.int64(112) * T.int64(8) + n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused_fused % T.int64(4) // T.int64(2) * T.int64(4) + oc_chunk_2 * T.int64(2) + oc_chunk_3)
                            v_oh = T.axis.spatial(T.int64(14), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused_fused % T.int64(112) // T.int64(8) + oh_2 + oh_3)
                            v_ow = T.axis.spatial(T.int64(14), ow_2 * T.int64(14) + ow_3)
                            v_oc_block = T.axis.spatial(T.int64(16), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused_fused % T.int64(8) // T.int64(4) * T.int64(8) + n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused_fused % T.int64(2) * T.int64(4) + oc_block_2 * T.int64(4) + oc_block_3_fused)
                            v_ic = T.axis.reduce(T.int64(512), ic_0 * T.int64(16) + ic_1)
                            v_kh = T.axis.reduce(T.int64(3), kh_0 + kh_1)
                            v_kw = T.axis.reduce(T.int64(3), kw_0 + kw_1)
                            T.reads(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block], data_pad[v_n, v_ic // T.int64(512), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(512)], p1[v_oc_chunk, v_ic // T.int64(512), v_kh, v_kw, v_ic % T.int64(512), v_oc_block])
                            T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                            T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                            conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] + data_pad[v_n, v_ic // T.int64(512), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(512)] * p1[v_oc_chunk, v_ic // T.int64(512), v_kh, v_kw, v_ic % T.int64(512), v_oc_block]
            for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(4), T.int64(1), T.int64(14)):
                for ax4_fused in T.vectorized(T.int64(4)):
                    with T.block("T_relu"):
                        v_ax0 = T.axis.spatial(T.int64(1), ax0)
                        v_ax1 = T.axis.spatial(T.int64(32), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused_fused // T.int64(112) * T.int64(8) + n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused_fused % T.int64(4) // T.int64(2) * T.int64(4) + ax1)
                        v_ax2 = T.axis.spatial(T.int64(14), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused_fused % T.int64(112) // T.int64(8) + ax2)
                        v_ax3 = T.axis.spatial(T.int64(14), ax3)
                        v_ax4 = T.axis.spatial(T.int64(16), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused_fused % T.int64(8) // T.int64(4) * T.int64(8) + n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused_fused % T.int64(2) * T.int64(4) + ax4_fused)
                        T.reads(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4])
                        T.writes(T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                        T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.max(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] + p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4], T.float32(0))
b0 = sch.get_block(name="data_pad", func_name="main")
b1 = sch.get_block(name="conv2d_NCHWc", func_name="main")
b2 = sch.get_block(name="T_add", func_name="main")
b3 = sch.get_block(name="root", func_name="main")
sch.compute_inline(block=b2)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSRSRS")
l4, l5, l6, l7, l8, l9, l10, l11 = sch.get_loops(block=b1)
v12, v13, v14, v15 = sch.sample_perfect_tile(loop=l4, n=4, max_innermost_factor=64, decision=[1, 1, 1, 1])
l16, l17, l18, l19 = sch.split(loop=l4, factors=[v12, v13, v14, v15], preserve_unit_iters=True)
v20, v21, v22, v23 = sch.sample_perfect_tile(loop=l5, n=4, max_innermost_factor=64, decision=[4, 2, 2, 2])
l24, l25, l26, l27 = sch.split(loop=l5, factors=[v20, v21, v22, v23], preserve_unit_iters=True)
v28, v29, v30, v31 = sch.sample_perfect_tile(loop=l6, n=4, max_innermost_factor=64, decision=[14, 1, 1, 1])
l32, l33, l34, l35 = sch.split(loop=l6, factors=[v28, v29, v30, v31], preserve_unit_iters=True)
v36, v37, v38, v39 = sch.sample_perfect_tile(loop=l7, n=4, max_innermost_factor=64, decision=[1, 1, 1, 14])
l40, l41, l42, l43 = sch.split(loop=l7, factors=[v36, v37, v38, v39], preserve_unit_iters=True)
v44, v45, v46, v47 = sch.sample_perfect_tile(loop=l8, n=4, max_innermost_factor=64, decision=[2, 2, 1, 4])
l48, l49, l50, l51 = sch.split(loop=l8, factors=[v44, v45, v46, v47], preserve_unit_iters=True)
v52, v53 = sch.sample_perfect_tile(loop=l9, n=2, max_innermost_factor=64, decision=[32, 16])
l54, l55 = sch.split(loop=l9, factors=[v52, v53], preserve_unit_iters=True)
v56, v57 = sch.sample_perfect_tile(loop=l10, n=2, max_innermost_factor=64, decision=[3, 1])
l58, l59 = sch.split(loop=l10, factors=[v56, v57], preserve_unit_iters=True)
v60, v61 = sch.sample_perfect_tile(loop=l11, n=2, max_innermost_factor=64, decision=[3, 1])
l62, l63 = sch.split(loop=l11, factors=[v60, v61], preserve_unit_iters=True)
sch.reorder(l16, l24, l32, l40, l48, l17, l25, l33, l41, l49, l54, l58, l62, l18, l26, l34, l42, l50, l55, l59, l63, l19, l27, l35, l43, l51)
b64, = sch.get_consumers(block=b1)
sch.reverse_compute_at(block=b64, loop=l49, preserve_unit_loops=True, index=-1)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.vectorize", ann_val=64)
v65 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.unroll_explicit", ann_val=v65)
l66 = sch.sample_compute_location(block=b0, decision=10)
sch.compute_at(block=b0, loop=l66, preserve_unit_loops=True, index=-1)
sch.enter_postproc()
b67 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b67, ann_key="meta_schedule.parallel")
sch.unannotate(block_or_loop=b67, ann_key="meta_schedule.vectorize")
sch.unannotate(block_or_loop=b67, ann_key="meta_schedule.unroll_explicit")
b68, b69, b70 = sch.get_child_blocks(b67)
l71, l72, l73, l74, l75, l76, l77, l78, l79, l80, l81, l82, l83, l84, l85, l86 = sch.get_loops(block=b68)
l87 = sch.fuse(l71, l72, l73, l74, l75, l76, l77, l78, l79, l80, preserve_unit_iters=True)
sch.parallel(loop=l87)
l88 = sch.fuse(l86, preserve_unit_iters=True)
sch.vectorize(loop=l88)
l89, l90, l91, l92, l93, l94, l95, l96, l97, l98, l99, l100, l101, l102, l103, l104, l105 = sch.get_loops(block=b69)
l106 = sch.fuse(l89, preserve_unit_iters=True)
sch.parallel(loop=l106)
l107 = sch.fuse(l105, preserve_unit_iters=True)
sch.vectorize(loop=l107)
sch.annotate(block_or_loop=l106, ann_key="pragma_auto_unroll_max_step", ann_val=512)
sch.annotate(block_or_loop=l106, ann_key="pragma_unroll_explicit", ann_val=1)
l108, l109, l110, l111, l112, l113 = sch.get_loops(block=b70)
l114 = sch.fuse(l113, preserve_unit_iters=True)
sch.vectorize(loop=l114)
b115 = sch.get_block(name="conv2d_NCHWc", func_name="main")
l116, l117, l118, l119, l120, l121, l122, l123, l124, l125, l126, l127, l128, l129, l130, l131, l132 = sch.get_loops(block=b115)
b133 = sch.decompose_reduction(block=b115, loop=l117)
2024-04-28 09:10:10 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #246: GFLOPs: 195.3208. Time: 4736.0277 us. Best GFLOPs: 282.5735
2024-04-28 09:10:10 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #247: GFLOPs: 112.7685. Time: 8203.0425 us. Best GFLOPs: 282.5735
2024-04-28 09:10:10 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #248: GFLOPs: 96.2176. Time: 9614.0915 us. Best GFLOPs: 282.5735
2024-04-28 09:10:10 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #249: GFLOPs: 101.7370. Time: 9092.5146 us. Best GFLOPs: 282.5735
2024-04-28 09:10:10 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #250: GFLOPs: 146.0633. Time: 6333.1775 us. Best GFLOPs: 282.5735
2024-04-28 09:10:10 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #251: GFLOPs: 164.4957. Time: 5623.5187 us. Best GFLOPs: 282.5735
2024-04-28 09:10:10 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #252: GFLOPs: 118.1350. Time: 7830.4037 us. Best GFLOPs: 282.5735
2024-04-28 09:10:10 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #253: GFLOPs: 160.3211. Time: 5769.9513 us. Best GFLOPs: 282.5735
2024-04-28 09:10:10 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #254: GFLOPs: 2.7869. Time: 331927.1570 us. Best GFLOPs: 282.5735
2024-04-28 09:10:10 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #255: GFLOPs: 21.6912. Time: 42646.0117 us. Best GFLOPs: 282.5735
2024-04-28 09:10:10 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #256: GFLOPs: 40.6633. Time: 22748.8912 us. Best GFLOPs: 282.5735
2024-04-28 09:15:58 [INFO] [evolutionary_search.cc:713] Generating candidates......
2024-04-28 09:15:59 [INFO] [evolutionary_search.cc:715] Picked top 102 candidate(s) from database
2024-04-28 09:16:03 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x3861aa8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x37d26b8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x4dd4148)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x3201bb8)]: 0 failure(s)
2024-04-28 09:16:03 [INFO] [evolutionary_search.cc:723] Sampled 410 candidate(s)
2024-04-28 09:16:15 [INFO] [evolutionary_search.cc:621] Evolve iter #0 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x3861aa8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x37d26b8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x4dd4148)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x3201bb8)]: 0 failure(s)
2024-04-28 09:16:27 [INFO] [evolutionary_search.cc:621] Evolve iter #1 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x3861aa8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x37d26b8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x4dd4148)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x3201bb8)]: 0 failure(s)
2024-04-28 09:16:39 [INFO] [evolutionary_search.cc:621] Evolve iter #2 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x3861aa8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x37d26b8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x4dd4148)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x3201bb8)]: 0 failure(s)
2024-04-28 09:16:52 [INFO] [evolutionary_search.cc:621] Evolve iter #3 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x3861aa8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x37d26b8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x4dd4148)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x3201bb8)]: 0 failure(s)
2024-04-28 09:16:59 [INFO] [evolutionary_search.cc:649] Scores of the best 64 candidates:
[1 : 16]:	0.9233  0.9233  0.9079  0.8934  0.7901  0.7881  0.7351  0.7351  0.7320  0.7300  0.7032  0.6738  0.6719  0.6713  0.6675  0.6407
[17 : 32]:	0.6333  0.6323  0.6290  0.6277  0.6267  0.6257  0.6250  0.6199  0.6186  0.6177  0.6063  0.5930  0.5879  0.5853  0.5804  0.5795
[33 : 48]:	0.5794  0.5779  0.5764  0.5749  0.5722  0.5715  0.5649  0.5628  0.5609  0.5565  0.5565  0.5555  0.5521  0.5516  0.5508  0.5500
[49 : 64]:	0.5495  0.5477  0.5465  0.5463  0.5463  0.5460  0.5460  0.5449  0.5445  0.5432  0.5431  0.5431  0.5427  0.5404  0.5384  0.5373
2024-04-28 09:16:59 [INFO] [evolutionary_search.cc:727] Got 64 candidate(s) with evolutionary search
2024-04-28 09:16:59 [INFO] [evolutionary_search.cc:730] Sending 64 candidates(s) for measurement
2024-04-28 09:18:56 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #257: GFLOPs: 148.4517. Time: 6231.2836 us. Best GFLOPs: 282.5735
2024-04-28 09:18:56 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #258: GFLOPs: 289.2400. Time: 3198.1906 us. Best GFLOPs: 289.2400
2024-04-28 09:18:56 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #259: GFLOPs: 292.8328. Time: 3158.9521 us. Best GFLOPs: 292.8328
2024-04-28 09:18:56 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #260: GFLOPs: 302.0136. Time: 3062.9242 us. Best GFLOPs: 302.0136
2024-04-28 09:18:56 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #261: GFLOPs: 562.2895. Time: 1645.1396 us. Best GFLOPs: 562.2895
2024-04-28 09:18:56 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #262: GFLOPs: 501.7053. Time: 1843.8010 us. Best GFLOPs: 562.2895
2024-04-28 09:18:56 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #263: GFLOPs: 169.7581. Time: 5449.1931 us. Best GFLOPs: 562.2895
2024-04-28 09:18:56 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #264: GFLOPs: 162.3910. Time: 5696.4034 us. Best GFLOPs: 562.2895
2024-04-28 09:18:56 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #265: GFLOPs: 297.6821. Time: 3107.4919 us. Best GFLOPs: 562.2895
2024-04-28 09:18:56 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #266: GFLOPs: 287.4640. Time: 3217.9497 us. Best GFLOPs: 562.2895
2024-04-28 09:18:56 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #267: GFLOPs: 186.9105. Time: 4949.1332 us. Best GFLOPs: 562.2895
2024-04-28 09:18:56 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #268: GFLOPs: 121.8662. Time: 7590.6591 us. Best GFLOPs: 562.2895
2024-04-28 09:18:56 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #269: GFLOPs: 155.3183. Time: 5955.8012 us. Best GFLOPs: 562.2895
2024-04-28 09:18:56 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #270: GFLOPs: 547.5492. Time: 1689.4276 us. Best GFLOPs: 562.2895
2024-04-28 09:18:56 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #271: GFLOPs: 173.8412. Time: 5321.2062 us. Best GFLOPs: 562.2895
2024-04-28 09:18:56 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #272: GFLOPs: 156.9604. Time: 5893.4913 us. Best GFLOPs: 562.2895
2024-04-28 09:18:56 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #273: GFLOPs: 101.6431. Time: 9100.9073 us. Best GFLOPs: 562.2895
2024-04-28 09:18:56 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #274: GFLOPs: 210.8503. Time: 4387.2115 us. Best GFLOPs: 562.2895
2024-04-28 09:18:56 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #275: GFLOPs: 72.1064. Time: 12828.8867 us. Best GFLOPs: 562.2895
2024-04-28 09:18:56 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #276: GFLOPs: 93.9931. Time: 9841.6193 us. Best GFLOPs: 562.2895
2024-04-28 09:18:56 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #277: GFLOPs: 290.3013. Time: 3186.4985 us. Best GFLOPs: 562.2895
2024-04-28 09:18:56 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #278: GFLOPs: 124.4305. Time: 7434.2299 us. Best GFLOPs: 562.2895
2024-04-28 09:18:56 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #279: GFLOPs: 185.3865. Time: 4989.8167 us. Best GFLOPs: 562.2895
2024-04-28 09:18:56 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #280: GFLOPs: 111.3432. Time: 8308.0459 us. Best GFLOPs: 562.2895
2024-04-28 09:18:57 [INFO] [task_scheduler.cc:121] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #281: Error in building:
LocalBuilder: Timeout, killed after 30.0 seconds
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(1), T.int64(14), T.int64(14), T.int64(512)), "float32"), p1: T.Buffer((T.int64(32), T.int64(1), T.int64(3), T.int64(3), T.int64(512), T.int64(16)), "float32"), p2: T.Buffer((T.int64(1), T.int64(32), T.int64(1), T.int64(1), T.int64(16)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(32), T.int64(14), T.int64(14), T.int64(16)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        data_pad = T.alloc_buffer((T.int64(1), T.int64(1), T.int64(16), T.int64(16), T.int64(512)))
        conv2d_NCHWc = T.alloc_buffer((T.int64(1), T.int64(32), T.int64(14), T.int64(14), T.int64(16)))
        for n_0_oc_chunk_0_oh_0_fused_fused in T.parallel(T.int64(224), annotations={"pragma_auto_unroll_max_step": 512, "pragma_unroll_explicit": 1}):
            for ax0, ax1, ax2, ax3, ax4 in T.grid(T.int64(1), T.int64(1), T.int64(4), T.int64(16), T.int64(512)):
                with T.block("data_pad"):
                    v_i0, v_i1 = T.axis.remap("SS", [ax0, ax1])
                    v_i2 = T.axis.spatial(T.int64(16), n_0_oc_chunk_0_oh_0_fused_fused % T.int64(7) * T.int64(2) + ax2)
                    v_i3, v_i4 = T.axis.remap("SS", [ax3, ax4])
                    T.reads(p0[v_i0, v_i1, v_i2 - T.int64(1), v_i3 - T.int64(1), v_i4])
                    T.writes(data_pad[v_i0, v_i1, v_i2, v_i3, v_i4])
                    data_pad[v_i0, v_i1, v_i2, v_i3, v_i4] = T.if_then_else(T.int64(1) <= v_i2 and v_i2 < T.int64(15) and T.int64(1) <= v_i3 and v_i3 < T.int64(15), p0[v_i0, v_i1, v_i2 - T.int64(1), v_i3 - T.int64(1), v_i4], T.float32(0))
            for ow_0, oc_block_0, n_1, oc_chunk_1, oh_1, ow_1, oc_block_1 in T.grid(T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(7), T.int64(1)):
                for n_2_init, oc_chunk_2_init, oh_2_init, ow_2_init, oc_block_2_init, n_3_init, oc_chunk_3_init, oh_3_init, ow_3_init in T.grid(T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1)):
                    for oc_block_3_fused_init in T.vectorized(T.int64(16)):
                        with T.block("conv2d_NCHWc_init"):
                            v_n = T.axis.spatial(T.int64(1), n_1 + n_2_init + n_3_init)
                            v_oc_chunk = T.axis.spatial(T.int64(32), n_0_oc_chunk_0_oh_0_fused_fused // T.int64(7) + oc_chunk_1 + oc_chunk_2_init + oc_chunk_3_init)
                            v_oh = T.axis.spatial(T.int64(14), n_0_oc_chunk_0_oh_0_fused_fused % T.int64(7) * T.int64(2) + oh_1 + oh_2_init + oh_3_init)
                            v_ow = T.axis.spatial(T.int64(14), ow_0 * T.int64(14) + ow_1 * T.int64(2) + ow_2_init + ow_3_init)
                            v_oc_block = T.axis.spatial(T.int64(16), oc_block_0 * T.int64(16) + oc_block_1 * T.int64(16) + oc_block_2_init * T.int64(16) + oc_block_3_fused_init)
                            T.reads()
                            T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                            T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                            conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = T.float32(0)
                for ic_0, kh_0, kw_0, n_2, oc_chunk_2, oh_2, ow_2, oc_block_2, ic_1, kh_1, kw_1, n_3, oc_chunk_3, oh_3, ow_3 in T.grid(T.int64(512), T.int64(3), T.int64(3), T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1)):
                    for oc_block_3_fused in T.vectorized(T.int64(16)):
                        with T.block("conv2d_NCHWc_update"):
                            v_n = T.axis.spatial(T.int64(1), n_1 + n_2 + n_3)
                            v_oc_chunk = T.axis.spatial(T.int64(32), n_0_oc_chunk_0_oh_0_fused_fused // T.int64(7) + oc_chunk_1 + oc_chunk_2 + oc_chunk_3)
                            v_oh = T.axis.spatial(T.int64(14), n_0_oc_chunk_0_oh_0_fused_fused % T.int64(7) * T.int64(2) + oh_1 + oh_2 + oh_3)
                            v_ow = T.axis.spatial(T.int64(14), ow_0 * T.int64(14) + ow_1 * T.int64(2) + ow_2 + ow_3)
                            v_oc_block = T.axis.spatial(T.int64(16), oc_block_0 * T.int64(16) + oc_block_1 * T.int64(16) + oc_block_2 * T.int64(16) + oc_block_3_fused)
                            v_ic = T.axis.reduce(T.int64(512), ic_0 + ic_1)
                            v_kh = T.axis.reduce(T.int64(3), kh_0 + kh_1)
                            v_kw = T.axis.reduce(T.int64(3), kw_0 + kw_1)
                            T.reads(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block], data_pad[v_n, v_ic // T.int64(512), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(512)], p1[v_oc_chunk, v_ic // T.int64(512), v_kh, v_kw, v_ic % T.int64(512), v_oc_block])
                            T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                            T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                            conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] + data_pad[v_n, v_ic // T.int64(512), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(512)] * p1[v_oc_chunk, v_ic // T.int64(512), v_kh, v_kw, v_ic % T.int64(512), v_oc_block]
                for ax0, ax1, ax2 in T.grid(T.int64(1), T.int64(1), T.int64(1)):
                    for ax3_ax4_fused in T.vectorized(T.int64(32)):
                        with T.block("T_relu"):
                            v_ax0 = T.axis.spatial(T.int64(1), ax0)
                            v_ax1 = T.axis.spatial(T.int64(32), n_0_oc_chunk_0_oh_0_fused_fused // T.int64(7) + ax1)
                            v_ax2 = T.axis.spatial(T.int64(14), n_0_oc_chunk_0_oh_0_fused_fused % T.int64(7) * T.int64(2) + oh_1 + ax2)
                            v_ax3 = T.axis.spatial(T.int64(14), ow_1 * T.int64(2) + ax3_ax4_fused // T.int64(16))
                            v_ax4 = T.axis.spatial(T.int64(16), ax3_ax4_fused % T.int64(16))
                            T.reads(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4])
                            T.writes(T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                            T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.max(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] + p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4], T.float32(0))
b0 = sch.get_block(name="data_pad", func_name="main")
b1 = sch.get_block(name="conv2d_NCHWc", func_name="main")
b2 = sch.get_block(name="T_add", func_name="main")
b3 = sch.get_block(name="root", func_name="main")
sch.compute_inline(block=b2)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSRSRS")
l4, l5, l6, l7, l8, l9, l10, l11 = sch.get_loops(block=b1)
v12, v13, v14, v15 = sch.sample_perfect_tile(loop=l4, n=4, max_innermost_factor=64, decision=[1, 1, 1, 1])
l16, l17, l18, l19 = sch.split(loop=l4, factors=[v12, v13, v14, v15], preserve_unit_iters=True)
v20, v21, v22, v23 = sch.sample_perfect_tile(loop=l5, n=4, max_innermost_factor=64, decision=[32, 1, 1, 1])
l24, l25, l26, l27 = sch.split(loop=l5, factors=[v20, v21, v22, v23], preserve_unit_iters=True)
v28, v29, v30, v31 = sch.sample_perfect_tile(loop=l6, n=4, max_innermost_factor=64, decision=[7, 2, 1, 1])
l32, l33, l34, l35 = sch.split(loop=l6, factors=[v28, v29, v30, v31], preserve_unit_iters=True)
v36, v37, v38, v39 = sch.sample_perfect_tile(loop=l7, n=4, max_innermost_factor=64, decision=[1, 7, 2, 1])
l40, l41, l42, l43 = sch.split(loop=l7, factors=[v36, v37, v38, v39], preserve_unit_iters=True)
v44, v45, v46, v47 = sch.sample_perfect_tile(loop=l8, n=4, max_innermost_factor=64, decision=[1, 1, 1, 16])
l48, l49, l50, l51 = sch.split(loop=l8, factors=[v44, v45, v46, v47], preserve_unit_iters=True)
v52, v53 = sch.sample_perfect_tile(loop=l9, n=2, max_innermost_factor=64, decision=[512, 1])
l54, l55 = sch.split(loop=l9, factors=[v52, v53], preserve_unit_iters=True)
v56, v57 = sch.sample_perfect_tile(loop=l10, n=2, max_innermost_factor=64, decision=[3, 1])
l58, l59 = sch.split(loop=l10, factors=[v56, v57], preserve_unit_iters=True)
v60, v61 = sch.sample_perfect_tile(loop=l11, n=2, max_innermost_factor=64, decision=[3, 1])
l62, l63 = sch.split(loop=l11, factors=[v60, v61], preserve_unit_iters=True)
sch.reorder(l16, l24, l32, l40, l48, l17, l25, l33, l41, l49, l54, l58, l62, l18, l26, l34, l42, l50, l55, l59, l63, l19, l27, l35, l43, l51)
b64, = sch.get_consumers(block=b1)
sch.reverse_compute_at(block=b64, loop=l49, preserve_unit_loops=True, index=-1)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.vectorize", ann_val=64)
v65 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.unroll_explicit", ann_val=v65)
l66 = sch.sample_compute_location(block=b0, decision=2)
sch.compute_at(block=b0, loop=l66, preserve_unit_loops=True, index=-1)
sch.enter_postproc()
b67 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b67, ann_key="meta_schedule.parallel")
sch.unannotate(block_or_loop=b67, ann_key="meta_schedule.vectorize")
sch.unannotate(block_or_loop=b67, ann_key="meta_schedule.unroll_explicit")
b68, b69, b70 = sch.get_child_blocks(b67)
l71, l72, l73, l74, l75, l76, l77, l78 = sch.get_loops(block=b68)
l79 = sch.fuse(l71, l72, l73, preserve_unit_iters=True)
sch.parallel(loop=l79)
l80, l81, l82, l83, l84, l85, l86, l87, l88, l89, l90, l91, l92, l93, l94, l95, l96, l97, l98, l99, l100, l101, l102, l103 = sch.get_loops(block=b69)
l104 = sch.fuse(l80, preserve_unit_iters=True)
sch.parallel(loop=l104)
l105 = sch.fuse(l103, preserve_unit_iters=True)
sch.vectorize(loop=l105)
sch.annotate(block_or_loop=l104, ann_key="pragma_auto_unroll_max_step", ann_val=512)
sch.annotate(block_or_loop=l104, ann_key="pragma_unroll_explicit", ann_val=1)
l106, l107, l108, l109, l110, l111, l112, l113, l114, l115, l116, l117, l118 = sch.get_loops(block=b70)
l119 = sch.fuse(l117, l118, preserve_unit_iters=True)
sch.vectorize(loop=l119)
b120 = sch.get_block(name="conv2d_NCHWc", func_name="main")
l121, l122, l123, l124, l125, l126, l127, l128, l129, l130, l131, l132, l133, l134, l135, l136, l137, l138, l139, l140, l141, l142, l143, l144 = sch.get_loops(block=b120)
b145 = sch.decompose_reduction(block=b120, loop=l129)
2024-04-28 09:18:57 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #282: GFLOPs: 310.5162. Time: 2979.0547 us. Best GFLOPs: 562.2895
2024-04-28 09:18:57 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #283: GFLOPs: 207.9657. Time: 4448.0630 us. Best GFLOPs: 562.2895
2024-04-28 09:18:57 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #284: GFLOPs: 99.5986. Time: 9287.7241 us. Best GFLOPs: 562.2895
2024-04-28 09:18:57 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #285: GFLOPs: 223.1073. Time: 4146.1872 us. Best GFLOPs: 562.2895
2024-04-28 09:18:57 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #286: GFLOPs: 90.7141. Time: 10197.3599 us. Best GFLOPs: 562.2895
2024-04-28 09:18:57 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #287: GFLOPs: 145.3740. Time: 6363.2043 us. Best GFLOPs: 562.2895
2024-04-28 09:18:57 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #288: GFLOPs: 80.3115. Time: 11518.2112 us. Best GFLOPs: 562.2895
2024-04-28 09:18:57 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #289: GFLOPs: 145.1383. Time: 6373.5395 us. Best GFLOPs: 562.2895
2024-04-28 09:18:57 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #290: GFLOPs: 105.0508. Time: 8805.6905 us. Best GFLOPs: 562.2895
2024-04-28 09:18:57 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #291: GFLOPs: 65.3461. Time: 14156.0926 us. Best GFLOPs: 562.2895
2024-04-28 09:18:57 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #292: GFLOPs: 105.0611. Time: 8804.8255 us. Best GFLOPs: 562.2895
2024-04-28 09:18:57 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #293: GFLOPs: 97.3879. Time: 9498.5641 us. Best GFLOPs: 562.2895
2024-04-28 09:18:57 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #294: GFLOPs: 104.3865. Time: 8861.7307 us. Best GFLOPs: 562.2895
2024-04-28 09:18:57 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #295: GFLOPs: 145.5304. Time: 6356.3661 us. Best GFLOPs: 562.2895
2024-04-28 09:18:57 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #296: GFLOPs: 126.6699. Time: 7302.7969 us. Best GFLOPs: 562.2895
2024-04-28 09:18:57 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #297: GFLOPs: 88.7200. Time: 10426.5581 us. Best GFLOPs: 562.2895
2024-04-28 09:18:57 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #298: GFLOPs: 187.3669. Time: 4937.0762 us. Best GFLOPs: 562.2895
2024-04-28 09:18:57 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #299: GFLOPs: 171.4575. Time: 5395.1848 us. Best GFLOPs: 562.2895
2024-04-28 09:18:57 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #300: GFLOPs: 75.2823. Time: 12287.6791 us. Best GFLOPs: 562.2895
2024-04-28 09:18:57 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #301: GFLOPs: 82.8749. Time: 11161.9351 us. Best GFLOPs: 562.2895
2024-04-28 09:18:57 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #302: GFLOPs: 135.6624. Time: 6818.7251 us. Best GFLOPs: 562.2895
2024-04-28 09:18:57 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #303: GFLOPs: 59.7747. Time: 15475.5231 us. Best GFLOPs: 562.2895
2024-04-28 09:18:57 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #304: GFLOPs: 194.7269. Time: 4750.4712 us. Best GFLOPs: 562.2895
2024-04-28 09:18:57 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #305: GFLOPs: 107.7255. Time: 8587.0542 us. Best GFLOPs: 562.2895
2024-04-28 09:18:57 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #306: GFLOPs: 150.3617. Time: 6152.1308 us. Best GFLOPs: 562.2895
2024-04-28 09:18:57 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #307: GFLOPs: 200.4950. Time: 4613.8038 us. Best GFLOPs: 562.2895
2024-04-28 09:18:57 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #308: GFLOPs: 155.4953. Time: 5949.0186 us. Best GFLOPs: 562.2895
2024-04-28 09:18:57 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #309: GFLOPs: 155.8079. Time: 5937.0867 us. Best GFLOPs: 562.2895
2024-04-28 09:18:57 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #310: GFLOPs: 104.3491. Time: 8864.9066 us. Best GFLOPs: 562.2895
2024-04-28 09:18:57 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #311: GFLOPs: 103.8379. Time: 8908.5435 us. Best GFLOPs: 562.2895
2024-04-28 09:18:57 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #312: GFLOPs: 146.2347. Time: 6325.7536 us. Best GFLOPs: 562.2895
2024-04-28 09:18:57 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #313: GFLOPs: 61.3127. Time: 15087.3307 us. Best GFLOPs: 562.2895
2024-04-28 09:18:57 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #314: GFLOPs: 125.0024. Time: 7400.2150 us. Best GFLOPs: 562.2895
2024-04-28 09:18:57 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #315: GFLOPs: 112.4965. Time: 8222.8741 us. Best GFLOPs: 562.2895
2024-04-28 09:18:57 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #316: GFLOPs: 107.6208. Time: 8595.4118 us. Best GFLOPs: 562.2895
2024-04-28 09:18:57 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #317: GFLOPs: 107.7570. Time: 8584.5450 us. Best GFLOPs: 562.2895
2024-04-28 09:18:57 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #318: GFLOPs: 37.7677. Time: 24493.0296 us. Best GFLOPs: 562.2895
2024-04-28 09:18:57 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #319: GFLOPs: 25.4496. Time: 36348.1550 us. Best GFLOPs: 562.2895
2024-04-28 09:18:57 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #320: GFLOPs: 0.7224. Time: 1280548.5103 us. Best GFLOPs: 562.2895
2024-04-28 10:21:30 [INFO] [evolutionary_search.cc:713] Generating candidates......
2024-04-28 10:21:32 [INFO] [evolutionary_search.cc:715] Picked top 102 candidate(s) from database
2024-04-28 10:21:36 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x3861aa8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x37d26b8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x4dd4148)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x3201bb8)]: 0 failure(s)
2024-04-28 10:21:36 [INFO] [evolutionary_search.cc:723] Sampled 410 candidate(s)
2024-04-28 10:21:48 [INFO] [evolutionary_search.cc:621] Evolve iter #0 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x3861aa8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x37d26b8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x4dd4148)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x3201bb8)]: 0 failure(s)
2024-04-28 10:22:00 [INFO] [evolutionary_search.cc:621] Evolve iter #1 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x3861aa8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x37d26b8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x4dd4148)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x3201bb8)]: 0 failure(s)
2024-04-28 10:22:12 [INFO] [evolutionary_search.cc:621] Evolve iter #2 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x3861aa8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x37d26b8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x4dd4148)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x3201bb8)]: 0 failure(s)
2024-04-28 10:22:24 [INFO] [evolutionary_search.cc:621] Evolve iter #3 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x3861aa8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x37d26b8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x4dd4148)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x3201bb8)]: 0 failure(s)
2024-04-28 10:22:31 [INFO] [evolutionary_search.cc:649] Scores of the best 64 candidates:
[1 : 16]:	0.9702  0.9608  0.9552  0.9523  0.9520  0.9320  0.9320  0.9320  0.9276  0.9188  0.9149  0.9082  0.9076  0.9061  0.9016  0.8912
[17 : 32]:	0.8844  0.8816  0.8800  0.7511  0.7498  0.7498  0.7498  0.7431  0.7290  0.7290  0.7238  0.7238  0.7143  0.7031  0.7008  0.6984
[33 : 48]:	0.6764  0.6720  0.6595  0.6379  0.6282  0.6224  0.6149  0.6126  0.6043  0.6008  0.5941  0.5907  0.5891  0.5882  0.5863  0.5863
[49 : 64]:	0.5856  0.5856  0.5823  0.5800  0.5753  0.5693  0.5679  0.5676  0.5669  0.5669  0.5654  0.5571  0.5571  0.5562  0.5552  0.5498
2024-04-28 10:22:31 [INFO] [evolutionary_search.cc:727] Got 64 candidate(s) with evolutionary search
2024-04-28 10:22:31 [INFO] [evolutionary_search.cc:730] Sending 64 candidates(s) for measurement
2024-04-28 10:24:28 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #321: GFLOPs: 559.9627. Time: 1651.9758 us. Best GFLOPs: 562.2895
2024-04-28 10:24:28 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #322: GFLOPs: 477.9661. Time: 1935.3771 us. Best GFLOPs: 562.2895
2024-04-28 10:24:28 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #323: GFLOPs: 517.7557. Time: 1786.6434 us. Best GFLOPs: 562.2895
2024-04-28 10:24:28 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #324: GFLOPs: 500.7188. Time: 1847.4337 us. Best GFLOPs: 562.2895
2024-04-28 10:24:28 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #325: GFLOPs: 466.6709. Time: 1982.2209 us. Best GFLOPs: 562.2895
2024-04-28 10:24:28 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #326: GFLOPs: 332.4890. Time: 2782.1816 us. Best GFLOPs: 562.2895
2024-04-28 10:24:28 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #327: GFLOPs: 330.4511. Time: 2799.3389 us. Best GFLOPs: 562.2895
2024-04-28 10:24:28 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #328: GFLOPs: 330.2074. Time: 2801.4051 us. Best GFLOPs: 562.2895
2024-04-28 10:24:28 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #329: GFLOPs: 480.6222. Time: 1924.6818 us. Best GFLOPs: 562.2895
2024-04-28 10:24:28 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #330: GFLOPs: 333.8029. Time: 2771.2303 us. Best GFLOPs: 562.2895
2024-04-28 10:24:28 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #331: GFLOPs: 156.9463. Time: 5894.0195 us. Best GFLOPs: 562.2895
2024-04-28 10:24:28 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #332: GFLOPs: 310.4810. Time: 2979.3927 us. Best GFLOPs: 562.2895
2024-04-28 10:24:28 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #333: GFLOPs: 471.9935. Time: 1959.8675 us. Best GFLOPs: 562.2895
2024-04-28 10:24:28 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #334: GFLOPs: 170.8671. Time: 5413.8257 us. Best GFLOPs: 562.2895
2024-04-28 10:24:28 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #335: GFLOPs: 517.7938. Time: 1786.5118 us. Best GFLOPs: 562.2895
2024-04-28 10:24:28 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #336: GFLOPs: 327.3609. Time: 2825.7641 us. Best GFLOPs: 562.2895
2024-04-28 10:24:28 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #337: GFLOPs: 127.3338. Time: 7264.7220 us. Best GFLOPs: 562.2895
2024-04-28 10:24:28 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #338: GFLOPs: 486.5093. Time: 1901.3915 us. Best GFLOPs: 562.2895
2024-04-28 10:24:28 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #339: GFLOPs: 111.4545. Time: 8299.7488 us. Best GFLOPs: 562.2895
2024-04-28 10:24:28 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #340: GFLOPs: 451.1038. Time: 2050.6252 us. Best GFLOPs: 562.2895
2024-04-28 10:24:28 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #341: GFLOPs: 558.6966. Time: 1655.7193 us. Best GFLOPs: 562.2895
2024-04-28 10:24:28 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #342: GFLOPs: 555.5737. Time: 1665.0262 us. Best GFLOPs: 562.2895
2024-04-28 10:24:28 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #343: GFLOPs: 561.1256. Time: 1648.5521 us. Best GFLOPs: 562.2895
2024-04-28 10:24:28 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #344: GFLOPs: 385.1719. Time: 2401.6415 us. Best GFLOPs: 562.2895
2024-04-28 10:24:28 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #345: GFLOPs: 535.6041. Time: 1727.1055 us. Best GFLOPs: 562.2895
2024-04-28 10:24:28 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #346: GFLOPs: 533.1921. Time: 1734.9183 us. Best GFLOPs: 562.2895
2024-04-28 10:24:28 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #347: GFLOPs: 555.6405. Time: 1664.8259 us. Best GFLOPs: 562.2895
2024-04-28 10:24:28 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #348: GFLOPs: 560.3157. Time: 1650.9349 us. Best GFLOPs: 562.2895
2024-04-28 10:24:28 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #349: GFLOPs: 378.9015. Time: 2441.3858 us. Best GFLOPs: 562.2895
2024-04-28 10:24:28 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #350: GFLOPs: 535.2524. Time: 1728.2404 us. Best GFLOPs: 562.2895
2024-04-28 10:24:28 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #351: GFLOPs: 134.2115. Time: 6892.4391 us. Best GFLOPs: 562.2895
2024-04-28 10:24:28 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #352: GFLOPs: 332.7769. Time: 2779.7748 us. Best GFLOPs: 562.2895
2024-04-28 10:24:28 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #353: GFLOPs: 84.7094. Time: 10920.2087 us. Best GFLOPs: 562.2895
2024-04-28 10:24:28 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #354: GFLOPs: 664.9994. Time: 1391.0460 us. Best GFLOPs: 664.9994
2024-04-28 10:24:28 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #355: GFLOPs: 403.5523. Time: 2292.2546 us. Best GFLOPs: 664.9994
2024-04-28 10:24:28 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #356: GFLOPs: 328.9757. Time: 2811.8936 us. Best GFLOPs: 664.9994
2024-04-28 10:24:28 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #357: GFLOPs: 191.6093. Time: 4827.7653 us. Best GFLOPs: 664.9994
2024-04-28 10:24:28 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #358: GFLOPs: 395.4889. Time: 2338.9907 us. Best GFLOPs: 664.9994
2024-04-28 10:24:28 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #359: GFLOPs: 533.4765. Time: 1733.9934 us. Best GFLOPs: 664.9994
2024-04-28 10:24:28 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #360: GFLOPs: 101.9937. Time: 9069.6251 us. Best GFLOPs: 664.9994
2024-04-28 10:24:28 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #361: GFLOPs: 138.5845. Time: 6674.9493 us. Best GFLOPs: 664.9994
2024-04-28 10:24:28 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #362: GFLOPs: 445.1232. Time: 2078.1766 us. Best GFLOPs: 664.9994
2024-04-28 10:24:28 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #363: GFLOPs: 30.2138. Time: 30616.6281 us. Best GFLOPs: 664.9994
2024-04-28 10:24:28 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #364: GFLOPs: 88.7240. Time: 10426.0913 us. Best GFLOPs: 664.9994
2024-04-28 10:24:28 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #365: GFLOPs: 76.9601. Time: 12019.7967 us. Best GFLOPs: 664.9994
2024-04-28 10:24:28 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #366: GFLOPs: 383.8728. Time: 2409.7688 us. Best GFLOPs: 664.9994
2024-04-28 10:24:28 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #367: GFLOPs: 273.2613. Time: 3385.2016 us. Best GFLOPs: 664.9994
2024-04-28 10:24:28 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #368: GFLOPs: 535.5523. Time: 1727.2726 us. Best GFLOPs: 664.9994
2024-04-28 10:24:28 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #369: GFLOPs: 336.2957. Time: 2750.6886 us. Best GFLOPs: 664.9994
2024-04-28 10:24:28 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #370: GFLOPs: 350.4775. Time: 2639.3840 us. Best GFLOPs: 664.9994
2024-04-28 10:24:28 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #371: GFLOPs: 346.0366. Time: 2673.2573 us. Best GFLOPs: 664.9994
2024-04-28 10:24:28 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #372: GFLOPs: 350.3155. Time: 2640.6043 us. Best GFLOPs: 664.9994
2024-04-28 10:24:28 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #373: GFLOPs: 304.3303. Time: 3039.6080 us. Best GFLOPs: 664.9994
2024-04-28 10:24:28 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #374: GFLOPs: 146.7867. Time: 6301.9677 us. Best GFLOPs: 664.9994
2024-04-28 10:24:28 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #375: GFLOPs: 385.0412. Time: 2402.4568 us. Best GFLOPs: 664.9994
2024-04-28 10:24:28 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #376: GFLOPs: 119.8720. Time: 7716.9403 us. Best GFLOPs: 664.9994
2024-04-28 10:24:28 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #377: GFLOPs: 440.3716. Time: 2100.6003 us. Best GFLOPs: 664.9994
2024-04-28 10:24:28 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #378: GFLOPs: 451.2843. Time: 2049.8046 us. Best GFLOPs: 664.9994
2024-04-28 10:24:28 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #379: GFLOPs: 129.3843. Time: 7149.5922 us. Best GFLOPs: 664.9994
2024-04-28 10:24:28 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #380: GFLOPs: 79.0215. Time: 11706.2390 us. Best GFLOPs: 664.9994
2024-04-28 10:24:28 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #381: GFLOPs: 74.1903. Time: 12468.5466 us. Best GFLOPs: 664.9994
2024-04-28 10:24:28 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #382: GFLOPs: 97.9315. Time: 9445.8342 us. Best GFLOPs: 664.9994
2024-04-28 10:24:28 [INFO] [task_scheduler.cc:121] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #383: Error in building:
LocalBuilder: Timeout, killed after 30.0 seconds
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(1), T.int64(14), T.int64(14), T.int64(512)), "float32"), p1: T.Buffer((T.int64(32), T.int64(1), T.int64(3), T.int64(3), T.int64(512), T.int64(16)), "float32"), p2: T.Buffer((T.int64(1), T.int64(32), T.int64(1), T.int64(1), T.int64(16)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(32), T.int64(14), T.int64(14), T.int64(16)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        data_pad = T.alloc_buffer((T.int64(1), T.int64(1), T.int64(16), T.int64(16), T.int64(512)))
        conv2d_NCHWc = T.alloc_buffer((T.int64(1), T.int64(32), T.int64(14), T.int64(14), T.int64(16)))
        for n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_fused_fused in T.parallel(T.int64(64), annotations={"pragma_auto_unroll_max_step": 512, "pragma_unroll_explicit": 1}):
            for ax0, ax1, ax2, ax3, ax4 in T.grid(T.int64(1), T.int64(1), T.int64(9), T.int64(9), T.int64(512)):
                with T.block("data_pad"):
                    v_i0, v_i1 = T.axis.remap("SS", [ax0, ax1])
                    v_i2 = T.axis.spatial(T.int64(16), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_fused_fused % T.int64(16) // T.int64(8) * T.int64(7) + ax2)
                    v_i3 = T.axis.spatial(T.int64(16), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_fused_fused % T.int64(2) * T.int64(7) + ax3)
                    v_i4 = T.axis.spatial(T.int64(512), ax4)
                    T.reads(p0[v_i0, v_i1, v_i2 - T.int64(1), v_i3 - T.int64(1), v_i4])
                    T.writes(data_pad[v_i0, v_i1, v_i2, v_i3, v_i4])
                    data_pad[v_i0, v_i1, v_i2, v_i3, v_i4] = T.if_then_else(T.int64(1) <= v_i2 and v_i2 < T.int64(15) and T.int64(1) <= v_i3 and v_i3 < T.int64(15), p0[v_i0, v_i1, v_i2 - T.int64(1), v_i3 - T.int64(1), v_i4], T.float32(0))
            for oc_block_1 in range(T.int64(2)):
                for n_2_init, oc_chunk_2_init, oh_2_init, ow_2_init, oc_block_2_init, n_3_init, oc_chunk_3_init, oh_3_init, ow_3_init, oc_block_3_init in T.grid(T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(8), T.int64(1), T.int64(2), T.int64(7), T.int64(7), T.int64(1)):
                    with T.block("conv2d_NCHWc_init"):
                        v_n = T.axis.spatial(T.int64(1), n_2_init + n_3_init)
                        v_oc_chunk = T.axis.spatial(T.int64(32), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_fused_fused // T.int64(16) * T.int64(8) + n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_fused_fused % T.int64(8) // T.int64(2) * T.int64(2) + oc_chunk_2_init * T.int64(2) + oc_chunk_3_init)
                        v_oh = T.axis.spatial(T.int64(14), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_fused_fused % T.int64(16) // T.int64(8) * T.int64(7) + oh_2_init * T.int64(7) + oh_3_init)
                        v_ow = T.axis.spatial(T.int64(14), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_fused_fused % T.int64(2) * T.int64(7) + ow_2_init * T.int64(7) + ow_3_init)
                        v_oc_block = T.axis.spatial(T.int64(16), oc_block_1 * T.int64(8) + oc_block_2_init + oc_block_3_init)
                        T.reads()
                        T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                        T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                        conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = T.float32(0)
                for ic_0, kh_0, kw_0, n_2, oc_chunk_2, oh_2, ow_2, oc_block_2, ic_1, kh_1, kw_1, n_3, oc_chunk_3, oh_3, ow_3, oc_block_3 in T.grid(T.int64(512), T.int64(3), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(8), T.int64(1), T.int64(1), T.int64(3), T.int64(1), T.int64(2), T.int64(7), T.int64(7), T.int64(1)):
                    with T.block("conv2d_NCHWc_update"):
                        v_n = T.axis.spatial(T.int64(1), n_2 + n_3)
                        v_oc_chunk = T.axis.spatial(T.int64(32), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_fused_fused // T.int64(16) * T.int64(8) + n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_fused_fused % T.int64(8) // T.int64(2) * T.int64(2) + oc_chunk_2 * T.int64(2) + oc_chunk_3)
                        v_oh = T.axis.spatial(T.int64(14), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_fused_fused % T.int64(16) // T.int64(8) * T.int64(7) + oh_2 * T.int64(7) + oh_3)
                        v_ow = T.axis.spatial(T.int64(14), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_fused_fused % T.int64(2) * T.int64(7) + ow_2 * T.int64(7) + ow_3)
                        v_oc_block = T.axis.spatial(T.int64(16), oc_block_1 * T.int64(8) + oc_block_2 + oc_block_3)
                        v_ic = T.axis.reduce(T.int64(512), ic_0 + ic_1)
                        v_kh = T.axis.reduce(T.int64(3), kh_0 + kh_1)
                        v_kw = T.axis.reduce(T.int64(3), kw_0 * T.int64(3) + kw_1)
                        T.reads(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block], data_pad[v_n, v_ic // T.int64(512), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(512)], p1[v_oc_chunk, v_ic // T.int64(512), v_kh, v_kw, v_ic % T.int64(512), v_oc_block])
                        T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                        T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                        conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] + data_pad[v_n, v_ic // T.int64(512), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(512)] * p1[v_oc_chunk, v_ic // T.int64(512), v_kh, v_kw, v_ic % T.int64(512), v_oc_block]
        for ax0_ax1_ax2_ax3_ax4_fused_0 in T.parallel(T.int64(1568)):
            for ax0_ax1_ax2_ax3_ax4_fused_1 in T.vectorized(T.int64(64)):
                with T.block("T_relu"):
                    v_ax0 = T.axis.spatial(T.int64(1), T.int64(0))
                    v_ax1 = T.axis.spatial(T.int64(32), (ax0_ax1_ax2_ax3_ax4_fused_0 * T.int64(64) + ax0_ax1_ax2_ax3_ax4_fused_1) // T.int64(3136))
                    v_ax2 = T.axis.spatial(T.int64(14), (ax0_ax1_ax2_ax3_ax4_fused_0 * T.int64(64) + ax0_ax1_ax2_ax3_ax4_fused_1) % T.int64(3136) // T.int64(224))
                    v_ax3 = T.axis.spatial(T.int64(14), (ax0_ax1_ax2_ax3_ax4_fused_0 * T.int64(64) + ax0_ax1_ax2_ax3_ax4_fused_1) % T.int64(224) // T.int64(16))
                    v_ax4 = T.axis.spatial(T.int64(16), (ax0_ax1_ax2_ax3_ax4_fused_0 * T.int64(64) + ax0_ax1_ax2_ax3_ax4_fused_1) % T.int64(16))
                    T.reads(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4])
                    T.writes(T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                    T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.max(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] + p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4], T.float32(0))
b0 = sch.get_block(name="data_pad", func_name="main")
b1 = sch.get_block(name="conv2d_NCHWc", func_name="main")
b2 = sch.get_block(name="T_add", func_name="main")
b3 = sch.get_block(name="root", func_name="main")
sch.compute_inline(block=b2)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSRSRS")
l4, l5, l6, l7, l8, l9, l10, l11 = sch.get_loops(block=b1)
v12, v13, v14, v15 = sch.sample_perfect_tile(loop=l4, n=4, max_innermost_factor=64, decision=[1, 1, 1, 1])
l16, l17, l18, l19 = sch.split(loop=l4, factors=[v12, v13, v14, v15], preserve_unit_iters=True)
v20, v21, v22, v23 = sch.sample_perfect_tile(loop=l5, n=4, max_innermost_factor=64, decision=[4, 4, 1, 2])
l24, l25, l26, l27 = sch.split(loop=l5, factors=[v20, v21, v22, v23], preserve_unit_iters=True)
v28, v29, v30, v31 = sch.sample_perfect_tile(loop=l6, n=4, max_innermost_factor=64, decision=[2, 1, 1, 7])
l32, l33, l34, l35 = sch.split(loop=l6, factors=[v28, v29, v30, v31], preserve_unit_iters=True)
v36, v37, v38, v39 = sch.sample_perfect_tile(loop=l7, n=4, max_innermost_factor=64, decision=[1, 2, 1, 7])
l40, l41, l42, l43 = sch.split(loop=l7, factors=[v36, v37, v38, v39], preserve_unit_iters=True)
v44, v45, v46, v47 = sch.sample_perfect_tile(loop=l8, n=4, max_innermost_factor=64, decision=[1, 2, 8, 1])
l48, l49, l50, l51 = sch.split(loop=l8, factors=[v44, v45, v46, v47], preserve_unit_iters=True)
v52, v53 = sch.sample_perfect_tile(loop=l9, n=2, max_innermost_factor=64, decision=[512, 1])
l54, l55 = sch.split(loop=l9, factors=[v52, v53], preserve_unit_iters=True)
v56, v57 = sch.sample_perfect_tile(loop=l10, n=2, max_innermost_factor=64, decision=[3, 1])
l58, l59 = sch.split(loop=l10, factors=[v56, v57], preserve_unit_iters=True)
v60, v61 = sch.sample_perfect_tile(loop=l11, n=2, max_innermost_factor=64, decision=[1, 3])
l62, l63 = sch.split(loop=l11, factors=[v60, v61], preserve_unit_iters=True)
sch.reorder(l16, l24, l32, l40, l48, l17, l25, l33, l41, l49, l54, l58, l62, l18, l26, l34, l42, l50, l55, l59, l63, l19, l27, l35, l43, l51)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.vectorize", ann_val=64)
v64 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.unroll_explicit", ann_val=v64)
l65 = sch.sample_compute_location(block=b0, decision=8)
sch.compute_at(block=b0, loop=l65, preserve_unit_loops=True, index=-1)
sch.enter_postproc()
b66 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b66, ann_key="meta_schedule.parallel")
sch.unannotate(block_or_loop=b66, ann_key="meta_schedule.vectorize")
sch.unannotate(block_or_loop=b66, ann_key="meta_schedule.unroll_explicit")
b67, b68, b69 = sch.get_child_blocks(b66)
l70, l71, l72, l73, l74, l75, l76, l77, l78, l79, l80, l81, l82, l83 = sch.get_loops(block=b67)
l84 = sch.fuse(l70, l71, l72, l73, l74, l75, l76, l77, l78, preserve_unit_iters=True)
sch.parallel(loop=l84)
l85, l86, l87, l88, l89, l90, l91, l92, l93, l94, l95, l96, l97, l98, l99, l100, l101, l102 = sch.get_loops(block=b68)
l103 = sch.fuse(l85, preserve_unit_iters=True)
sch.parallel(loop=l103)
sch.annotate(block_or_loop=l103, ann_key="pragma_auto_unroll_max_step", ann_val=512)
sch.annotate(block_or_loop=l103, ann_key="pragma_unroll_explicit", ann_val=1)
l104, l105, l106, l107, l108 = sch.get_loops(block=b69)
l109 = sch.fuse(l104, l105, l106, l107, l108, preserve_unit_iters=True)
l110, l111 = sch.split(loop=l109, factors=[None, 64], preserve_unit_iters=True)
sch.parallel(loop=l110)
sch.vectorize(loop=l111)
b112 = sch.get_block(name="conv2d_NCHWc", func_name="main")
l113, l114, l115, l116, l117, l118, l119, l120, l121, l122, l123, l124, l125, l126, l127, l128, l129, l130 = sch.get_loops(block=b112)
b131 = sch.decompose_reduction(block=b112, loop=l115)
2024-04-28 10:24:28 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #384: GFLOPs: 7.4583. Time: 124029.7140 us. Best GFLOPs: 664.9994
2024-04-28 10:33:14 [INFO] [evolutionary_search.cc:713] Generating candidates......
2024-04-28 10:33:15 [INFO] [evolutionary_search.cc:715] Picked top 102 candidate(s) from database
2024-04-28 10:33:20 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x3861aa8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x37d26b8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x4dd4148)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x3201bb8)]: 0 failure(s)
2024-04-28 10:33:20 [INFO] [evolutionary_search.cc:723] Sampled 410 candidate(s)
2024-04-28 10:33:31 [INFO] [evolutionary_search.cc:621] Evolve iter #0 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x3861aa8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x37d26b8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x4dd4148)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x3201bb8)]: 0 failure(s)
2024-04-28 10:33:43 [INFO] [evolutionary_search.cc:621] Evolve iter #1 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x3861aa8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x37d26b8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x4dd4148)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x3201bb8)]: 0 failure(s)
2024-04-28 10:33:55 [INFO] [evolutionary_search.cc:621] Evolve iter #2 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x3861aa8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x37d26b8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x4dd4148)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x3201bb8)]: 0 failure(s)
2024-04-28 10:34:07 [INFO] [evolutionary_search.cc:621] Evolve iter #3 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x3861aa8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x37d26b8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x4dd4148)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x3201bb8)]: 0 failure(s)
2024-04-28 10:34:14 [INFO] [evolutionary_search.cc:649] Scores of the best 64 candidates:
[1 : 16]:	0.9617  0.8763  0.8573  0.8391  0.8322  0.8322  0.8322  0.8298  0.8298  0.8298  0.8278  0.8240  0.8215  0.8076  0.8071  0.8053
[17 : 32]:	0.8048  0.8048  0.8048  0.8048  0.8039  0.8026  0.8026  0.8002  0.8002  0.8002  0.8002  0.8002  0.8002  0.8002  0.7994  0.7969
[33 : 48]:	0.7969  0.7950  0.7950  0.7950  0.7820  0.7797  0.7788  0.7765  0.7739  0.7656  0.7636  0.7588  0.7509  0.7509  0.7509  0.7485
[49 : 64]:	0.7485  0.7485  0.7485  0.7485  0.7485  0.7428  0.7419  0.7419  0.7419  0.7417  0.7345  0.7336  0.7215  0.7208  0.7150  0.7150
2024-04-28 10:34:14 [INFO] [evolutionary_search.cc:727] Got 64 candidate(s) with evolutionary search
2024-04-28 10:34:14 [INFO] [evolutionary_search.cc:730] Sending 64 candidates(s) for measurement
2024-04-28 10:35:48 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #385: GFLOPs: 671.0907. Time: 1378.4199 us. Best GFLOPs: 671.0907
2024-04-28 10:35:48 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #386: GFLOPs: 626.5189. Time: 1476.4833 us. Best GFLOPs: 671.0907
2024-04-28 10:35:48 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #387: GFLOPs: 663.2195. Time: 1394.7791 us. Best GFLOPs: 671.0907
2024-04-28 10:35:48 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #388: GFLOPs: 538.0776. Time: 1719.1661 us. Best GFLOPs: 671.0907
2024-04-28 10:35:48 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #389: GFLOPs: 561.1502. Time: 1648.4796 us. Best GFLOPs: 671.0907
2024-04-28 10:35:48 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #390: GFLOPs: 544.3108. Time: 1699.4789 us. Best GFLOPs: 671.0907
2024-04-28 10:35:48 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #391: GFLOPs: 546.4005. Time: 1692.9793 us. Best GFLOPs: 671.0907
2024-04-28 10:35:48 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #392: GFLOPs: 539.7102. Time: 1713.9657 us. Best GFLOPs: 671.0907
2024-04-28 10:35:48 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #393: GFLOPs: 554.6297. Time: 1667.8601 us. Best GFLOPs: 671.0907
2024-04-28 10:35:48 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #394: GFLOPs: 565.8812. Time: 1634.6978 us. Best GFLOPs: 671.0907
2024-04-28 10:35:48 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #395: GFLOPs: 498.6585. Time: 1855.0665 us. Best GFLOPs: 671.0907
2024-04-28 10:35:48 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #396: GFLOPs: 554.6185. Time: 1667.8938 us. Best GFLOPs: 671.0907
2024-04-28 10:35:48 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #397: GFLOPs: 524.0498. Time: 1765.1847 us. Best GFLOPs: 671.0907
2024-04-28 10:35:48 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #398: GFLOPs: 537.1395. Time: 1722.1684 us. Best GFLOPs: 671.0907
2024-04-28 10:35:48 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #399: GFLOPs: 538.5240. Time: 1717.7409 us. Best GFLOPs: 671.0907
2024-04-28 10:35:48 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #400: GFLOPs: 549.0867. Time: 1684.6971 us. Best GFLOPs: 671.0907
2024-04-28 10:35:48 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #401: GFLOPs: 535.0110. Time: 1729.0201 us. Best GFLOPs: 671.0907
2024-04-28 10:35:48 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #402: GFLOPs: 551.4957. Time: 1677.3380 us. Best GFLOPs: 671.0907
2024-04-28 10:35:48 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #403: GFLOPs: 542.8554. Time: 1704.0354 us. Best GFLOPs: 671.0907
2024-04-28 10:35:48 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #404: GFLOPs: 546.9230. Time: 1691.3619 us. Best GFLOPs: 671.0907
2024-04-28 10:35:48 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #405: GFLOPs: 565.2734. Time: 1636.4555 us. Best GFLOPs: 671.0907
2024-04-28 10:35:48 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #406: GFLOPs: 545.3535. Time: 1696.2297 us. Best GFLOPs: 671.0907
2024-04-28 10:35:48 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #407: GFLOPs: 505.4653. Time: 1830.0855 us. Best GFLOPs: 671.0907
2024-04-28 10:35:48 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #408: GFLOPs: 527.5060. Time: 1753.6192 us. Best GFLOPs: 671.0907
2024-04-28 10:35:48 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #409: GFLOPs: 505.0682. Time: 1831.5244 us. Best GFLOPs: 671.0907
2024-04-28 10:35:48 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #410: GFLOPs: 541.8588. Time: 1707.1695 us. Best GFLOPs: 671.0907
2024-04-28 10:35:48 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #411: GFLOPs: 535.6150. Time: 1727.0702 us. Best GFLOPs: 671.0907
2024-04-28 10:35:48 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #412: GFLOPs: 538.4546. Time: 1717.9623 us. Best GFLOPs: 671.0907
2024-04-28 10:35:48 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #413: GFLOPs: 539.5689. Time: 1714.4144 us. Best GFLOPs: 671.0907
2024-04-28 10:35:48 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #414: GFLOPs: 529.5561. Time: 1746.8306 us. Best GFLOPs: 671.0907
2024-04-28 10:35:48 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #415: GFLOPs: 545.1261. Time: 1696.9371 us. Best GFLOPs: 671.0907
2024-04-28 10:35:48 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #416: GFLOPs: 517.2270. Time: 1788.4697 us. Best GFLOPs: 671.0907
2024-04-28 10:35:48 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #417: GFLOPs: 535.4264. Time: 1727.6787 us. Best GFLOPs: 671.0907
2024-04-28 10:35:48 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #418: GFLOPs: 553.2212. Time: 1672.1066 us. Best GFLOPs: 671.0907
2024-04-28 10:35:48 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #419: GFLOPs: 509.4538. Time: 1815.7580 us. Best GFLOPs: 671.0907
2024-04-28 10:35:48 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #420: GFLOPs: 531.1173. Time: 1741.6956 us. Best GFLOPs: 671.0907
2024-04-28 10:35:48 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #421: GFLOPs: 479.0514. Time: 1930.9926 us. Best GFLOPs: 671.0907
2024-04-28 10:35:48 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #422: GFLOPs: 539.8584. Time: 1713.4952 us. Best GFLOPs: 671.0907
2024-04-28 10:35:48 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #423: GFLOPs: 504.8940. Time: 1832.1562 us. Best GFLOPs: 671.0907
2024-04-28 10:35:48 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #424: GFLOPs: 542.0424. Time: 1706.5910 us. Best GFLOPs: 671.0907
2024-04-28 10:35:48 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #425: GFLOPs: 301.1197. Time: 3072.0170 us. Best GFLOPs: 671.0907
2024-04-28 10:35:48 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #426: GFLOPs: 539.3495. Time: 1715.1120 us. Best GFLOPs: 671.0907
2024-04-28 10:35:48 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #427: GFLOPs: 476.8317. Time: 1939.9816 us. Best GFLOPs: 671.0907
2024-04-28 10:35:48 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #428: GFLOPs: 537.5574. Time: 1720.8296 us. Best GFLOPs: 671.0907
2024-04-28 10:35:48 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #429: GFLOPs: 479.0812. Time: 1930.8724 us. Best GFLOPs: 671.0907
2024-04-28 10:35:48 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #430: GFLOPs: 498.2258. Time: 1856.6776 us. Best GFLOPs: 671.0907
2024-04-28 10:35:48 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #431: GFLOPs: 497.4367. Time: 1859.6230 us. Best GFLOPs: 671.0907
2024-04-28 10:35:48 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #432: GFLOPs: 491.7182. Time: 1881.2497 us. Best GFLOPs: 671.0907
2024-04-28 10:35:48 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #433: GFLOPs: 496.9098. Time: 1861.5949 us. Best GFLOPs: 671.0907
2024-04-28 10:35:48 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #434: GFLOPs: 490.4002. Time: 1886.3057 us. Best GFLOPs: 671.0907
2024-04-28 10:35:48 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #435: GFLOPs: 491.7575. Time: 1881.0994 us. Best GFLOPs: 671.0907
2024-04-28 10:35:48 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #436: GFLOPs: 483.0091. Time: 1915.1703 us. Best GFLOPs: 671.0907
2024-04-28 10:35:48 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #437: GFLOPs: 491.6969. Time: 1881.3314 us. Best GFLOPs: 671.0907
2024-04-28 10:35:48 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #438: GFLOPs: 518.7565. Time: 1783.1963 us. Best GFLOPs: 671.0907
2024-04-28 10:35:48 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #439: GFLOPs: 504.1489. Time: 1834.8641 us. Best GFLOPs: 671.0907
2024-04-28 10:35:48 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #440: GFLOPs: 486.8553. Time: 1900.0402 us. Best GFLOPs: 671.0907
2024-04-28 10:35:48 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #441: GFLOPs: 483.0933. Time: 1914.8367 us. Best GFLOPs: 671.0907
2024-04-28 10:35:48 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #442: GFLOPs: 626.6439. Time: 1476.1889 us. Best GFLOPs: 671.0907
2024-04-28 10:35:48 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #443: GFLOPs: 656.8586. Time: 1408.2859 us. Best GFLOPs: 671.0907
2024-04-28 10:35:48 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #444: GFLOPs: 449.1993. Time: 2059.3190 us. Best GFLOPs: 671.0907
2024-04-28 10:35:48 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #445: GFLOPs: 589.5306. Time: 1569.1207 us. Best GFLOPs: 671.0907
2024-04-28 10:35:48 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #446: GFLOPs: 27.1736. Time: 34042.0983 us. Best GFLOPs: 671.0907
2024-04-28 10:35:48 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #447: GFLOPs: 52.4068. Time: 17651.2285 us. Best GFLOPs: 671.0907
2024-04-28 10:35:48 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #448: GFLOPs: 3.0816. Time: 300182.7120 us. Best GFLOPs: 671.0907
2024-04-28 10:42:22 [INFO] [evolutionary_search.cc:713] Generating candidates......
2024-04-28 10:42:23 [INFO] [evolutionary_search.cc:715] Picked top 102 candidate(s) from database
2024-04-28 10:42:27 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x3861aa8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x37d26b8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x4dd4148)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x3201bb8)]: 0 failure(s)
2024-04-28 10:42:27 [INFO] [evolutionary_search.cc:723] Sampled 410 candidate(s)
2024-04-28 10:42:39 [INFO] [evolutionary_search.cc:621] Evolve iter #0 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x3861aa8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x37d26b8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x4dd4148)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x3201bb8)]: 0 failure(s)
2024-04-28 10:42:51 [INFO] [evolutionary_search.cc:621] Evolve iter #1 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x3861aa8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x37d26b8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x4dd4148)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x3201bb8)]: 0 failure(s)
2024-04-28 10:43:03 [INFO] [evolutionary_search.cc:621] Evolve iter #2 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x3861aa8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x37d26b8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x4dd4148)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x3201bb8)]: 0 failure(s)
2024-04-28 10:43:15 [INFO] [evolutionary_search.cc:621] Evolve iter #3 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x3861aa8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x37d26b8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x4dd4148)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x3201bb8)]: 0 failure(s)
2024-04-28 10:43:22 [INFO] [evolutionary_search.cc:649] Scores of the best 64 candidates:
[1 : 16]:	0.9423  0.9133  0.9133  0.9133  0.9133  0.9118  0.8979  0.8879  0.8825  0.8529  0.8477  0.8300  0.8300  0.8300  0.8297  0.8199
[17 : 32]:	0.8199  0.8194  0.8187  0.8187  0.8187  0.8150  0.8148  0.8126  0.8126  0.8053  0.8025  0.7998  0.7990  0.7914  0.7779  0.7779
[33 : 48]:	0.7779  0.7774  0.7774  0.7757  0.7757  0.7756  0.7756  0.7752  0.7752  0.7752  0.7739  0.7726  0.7713  0.7712  0.7655  0.7655
[49 : 64]:	0.7653  0.7645  0.7645  0.7511  0.7511  0.7467  0.7450  0.7450  0.7450  0.7445  0.7427  0.7408  0.7394  0.7394  0.7350  0.7294
2024-04-28 10:43:22 [INFO] [evolutionary_search.cc:727] Got 64 candidate(s) with evolutionary search
2024-04-28 10:43:22 [INFO] [evolutionary_search.cc:730] Sending 64 candidates(s) for measurement
2024-04-28 10:44:50 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #449: GFLOPs: 631.6652. Time: 1464.4541 us. Best GFLOPs: 671.0907
2024-04-28 10:44:50 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #450: GFLOPs: 623.9614. Time: 1482.5351 us. Best GFLOPs: 671.0907
2024-04-28 10:44:50 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #451: GFLOPs: 636.5132. Time: 1453.3002 us. Best GFLOPs: 671.0907
2024-04-28 10:44:50 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #452: GFLOPs: 641.5838. Time: 1441.8143 us. Best GFLOPs: 671.0907
2024-04-28 10:44:50 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #453: GFLOPs: 645.6249. Time: 1432.7897 us. Best GFLOPs: 671.0907
2024-04-28 10:44:50 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #454: GFLOPs: 611.2820. Time: 1513.2864 us. Best GFLOPs: 671.0907
2024-04-28 10:44:50 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #455: GFLOPs: 495.4868. Time: 1866.9414 us. Best GFLOPs: 671.0907
2024-04-28 10:44:50 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #456: GFLOPs: 639.7070. Time: 1446.0443 us. Best GFLOPs: 671.0907
2024-04-28 10:44:50 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #457: GFLOPs: 562.3360. Time: 1645.0036 us. Best GFLOPs: 671.0907
2024-04-28 10:44:50 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #458: GFLOPs: 614.1164. Time: 1506.3019 us. Best GFLOPs: 671.0907
2024-04-28 10:44:50 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #459: GFLOPs: 573.7469. Time: 1612.2871 us. Best GFLOPs: 671.0907
2024-04-28 10:44:50 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #460: GFLOPs: 560.9934. Time: 1648.9406 us. Best GFLOPs: 671.0907
2024-04-28 10:44:50 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #461: GFLOPs: 550.9116. Time: 1679.1165 us. Best GFLOPs: 671.0907
2024-04-28 10:44:50 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #462: GFLOPs: 558.6974. Time: 1655.7169 us. Best GFLOPs: 671.0907
2024-04-28 10:44:50 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #463: GFLOPs: 556.8043. Time: 1661.3462 us. Best GFLOPs: 671.0907
2024-04-28 10:44:50 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #464: GFLOPs: 535.5942. Time: 1727.1372 us. Best GFLOPs: 671.0907
2024-04-28 10:44:50 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #465: GFLOPs: 561.8244. Time: 1646.5017 us. Best GFLOPs: 671.0907
2024-04-28 10:44:50 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #466: GFLOPs: 590.2904. Time: 1567.1011 us. Best GFLOPs: 671.0907
2024-04-28 10:44:50 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #467: GFLOPs: 568.3985. Time: 1627.4582 us. Best GFLOPs: 671.0907
2024-04-28 10:44:50 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #468: GFLOPs: 256.1458. Time: 3611.3993 us. Best GFLOPs: 671.0907
2024-04-28 10:44:50 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #469: GFLOPs: 529.6231. Time: 1746.6096 us. Best GFLOPs: 671.0907
2024-04-28 10:44:50 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #470: GFLOPs: 563.5805. Time: 1641.3711 us. Best GFLOPs: 671.0907
2024-04-28 10:44:50 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #471: GFLOPs: 531.1602. Time: 1741.5552 us. Best GFLOPs: 671.0907
2024-04-28 10:44:50 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #472: GFLOPs: 187.6579. Time: 4929.4207 us. Best GFLOPs: 671.0907
2024-04-28 10:44:50 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #473: GFLOPs: 528.9084. Time: 1748.9696 us. Best GFLOPs: 671.0907
2024-04-28 10:44:50 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #474: GFLOPs: 552.0283. Time: 1675.7199 us. Best GFLOPs: 671.0907
2024-04-28 10:44:50 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #475: GFLOPs: 535.3018. Time: 1728.0808 us. Best GFLOPs: 671.0907
2024-04-28 10:44:50 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #476: GFLOPs: 555.0086. Time: 1666.7215 us. Best GFLOPs: 671.0907
2024-04-28 10:44:50 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #477: GFLOPs: 553.5064. Time: 1671.2450 us. Best GFLOPs: 671.0907
2024-04-28 10:44:50 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #478: GFLOPs: 499.1850. Time: 1853.1099 us. Best GFLOPs: 671.0907
2024-04-28 10:44:50 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #479: GFLOPs: 514.5406. Time: 1797.8071 us. Best GFLOPs: 671.0907
2024-04-28 10:44:50 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #480: GFLOPs: 533.5881. Time: 1733.6307 us. Best GFLOPs: 671.0907
2024-04-28 10:44:50 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #481: GFLOPs: 504.1348. Time: 1834.9156 us. Best GFLOPs: 671.0907
2024-04-28 10:44:50 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #482: GFLOPs: 542.0674. Time: 1706.5123 us. Best GFLOPs: 671.0907
2024-04-28 10:44:50 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #483: GFLOPs: 505.3040. Time: 1830.6696 us. Best GFLOPs: 671.0907
2024-04-28 10:44:50 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #484: GFLOPs: 525.3676. Time: 1760.7572 us. Best GFLOPs: 671.0907
2024-04-28 10:44:50 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #485: GFLOPs: 520.3048. Time: 1777.8901 us. Best GFLOPs: 671.0907
2024-04-28 10:44:50 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #486: GFLOPs: 541.7651. Time: 1707.4645 us. Best GFLOPs: 671.0907
2024-04-28 10:44:50 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #487: GFLOPs: 549.1160. Time: 1684.6072 us. Best GFLOPs: 671.0907
2024-04-28 10:44:50 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #488: GFLOPs: 444.8840. Time: 2079.2942 us. Best GFLOPs: 671.0907
2024-04-28 10:44:50 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #489: GFLOPs: 432.3139. Time: 2139.7524 us. Best GFLOPs: 671.0907
2024-04-28 10:44:50 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #490: GFLOPs: 426.2291. Time: 2170.2995 us. Best GFLOPs: 671.0907
2024-04-28 10:44:50 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #491: GFLOPs: 548.0500. Time: 1687.8839 us. Best GFLOPs: 671.0907
2024-04-28 10:44:50 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #492: GFLOPs: 608.8752. Time: 1519.2683 us. Best GFLOPs: 671.0907
2024-04-28 10:44:50 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #493: GFLOPs: 494.3021. Time: 1871.4156 us. Best GFLOPs: 671.0907
2024-04-28 10:44:50 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #494: GFLOPs: 571.6399. Time: 1618.2298 us. Best GFLOPs: 671.0907
2024-04-28 10:44:50 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #495: GFLOPs: 514.2658. Time: 1798.7678 us. Best GFLOPs: 671.0907
2024-04-28 10:44:50 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #496: GFLOPs: 511.9352. Time: 1806.9567 us. Best GFLOPs: 671.0907
2024-04-28 10:44:50 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #497: GFLOPs: 530.6758. Time: 1743.1448 us. Best GFLOPs: 671.0907
2024-04-28 10:44:50 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #498: GFLOPs: 527.9759. Time: 1752.0587 us. Best GFLOPs: 671.0907
2024-04-28 10:44:50 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #499: GFLOPs: 483.0259. Time: 1915.1038 us. Best GFLOPs: 671.0907
2024-04-28 10:44:50 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #500: GFLOPs: 408.7069. Time: 2263.3448 us. Best GFLOPs: 671.0907
2024-04-28 10:44:50 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #501: GFLOPs: 393.3384. Time: 2351.7785 us. Best GFLOPs: 671.0907
2024-04-28 10:44:50 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #502: GFLOPs: 638.9835. Time: 1447.6817 us. Best GFLOPs: 671.0907
2024-04-28 10:44:50 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #503: GFLOPs: 488.4784. Time: 1893.7272 us. Best GFLOPs: 671.0907
2024-04-28 10:44:50 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #504: GFLOPs: 521.3222. Time: 1774.4202 us. Best GFLOPs: 671.0907
2024-04-28 10:44:50 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #505: GFLOPs: 489.5080. Time: 1889.7439 us. Best GFLOPs: 671.0907
2024-04-28 10:44:50 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #506: GFLOPs: 540.2692. Time: 1712.1922 us. Best GFLOPs: 671.0907
2024-04-28 10:44:50 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #507: GFLOPs: 523.7276. Time: 1766.2708 us. Best GFLOPs: 671.0907
2024-04-28 10:44:50 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #508: GFLOPs: 526.1653. Time: 1758.0877 us. Best GFLOPs: 671.0907
2024-04-28 10:44:50 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #509: GFLOPs: 489.0676. Time: 1891.4454 us. Best GFLOPs: 671.0907
2024-04-28 10:44:50 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #510: GFLOPs: 29.4438. Time: 31417.2840 us. Best GFLOPs: 671.0907
2024-04-28 10:44:50 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #511: GFLOPs: 24.9263. Time: 37111.2450 us. Best GFLOPs: 671.0907
2024-04-28 10:44:50 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #512: GFLOPs: 23.2393. Time: 39805.2467 us. Best GFLOPs: 671.0907
2024-04-28 11:53:54 [INFO] [evolutionary_search.cc:713] Generating candidates......
2024-04-28 11:53:55 [INFO] [evolutionary_search.cc:715] Picked top 102 candidate(s) from database
2024-04-28 11:53:59 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x3861aa8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x37d26b8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x4dd4148)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x3201bb8)]: 0 failure(s)
2024-04-28 11:53:59 [INFO] [evolutionary_search.cc:723] Sampled 410 candidate(s)
2024-04-28 11:54:11 [INFO] [evolutionary_search.cc:621] Evolve iter #0 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x3861aa8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x37d26b8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x4dd4148)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x3201bb8)]: 0 failure(s)
2024-04-28 11:54:23 [INFO] [evolutionary_search.cc:621] Evolve iter #1 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x3861aa8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x37d26b8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x4dd4148)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x3201bb8)]: 0 failure(s)
2024-04-28 11:54:35 [INFO] [evolutionary_search.cc:621] Evolve iter #2 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x3861aa8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x37d26b8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x4dd4148)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x3201bb8)]: 0 failure(s)
2024-04-28 11:54:47 [INFO] [evolutionary_search.cc:621] Evolve iter #3 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x3861aa8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x37d26b8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x4dd4148)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x3201bb8)]: 0 failure(s)
2024-04-28 11:54:54 [INFO] [evolutionary_search.cc:649] Scores of the best 64 candidates:
[1 : 16]:	0.9527  0.9527  0.9519  0.9431  0.9431  0.9372  0.9297  0.9297  0.8818  0.8772  0.8735  0.8488  0.8317  0.8317  0.8251  0.8251
[17 : 32]:	0.8095  0.8030  0.8028  0.7986  0.7937  0.7937  0.7937  0.7937  0.7927  0.7927  0.7889  0.7889  0.7886  0.7886  0.7878  0.7846
[33 : 48]:	0.7846  0.7845  0.7837  0.7831  0.7828  0.7822  0.7822  0.7820  0.7809  0.7788  0.7728  0.7691  0.7673  0.7670  0.7670  0.7665
[49 : 64]:	0.7648  0.7617  0.7514  0.7514  0.7505  0.7505  0.7477  0.7467  0.7400  0.7383  0.7383  0.7383  0.7383  0.7382  0.7358  0.7358
2024-04-28 11:54:54 [INFO] [evolutionary_search.cc:727] Got 64 candidate(s) with evolutionary search
2024-04-28 11:54:54 [INFO] [evolutionary_search.cc:730] Sending 64 candidates(s) for measurement
2024-04-28 11:56:39 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #513: GFLOPs: 348.9069. Time: 2651.2651 us. Best GFLOPs: 671.0907
2024-04-28 11:56:39 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #514: GFLOPs: 657.2776. Time: 1407.3881 us. Best GFLOPs: 671.0907
2024-04-28 11:56:39 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #515: GFLOPs: 542.3912. Time: 1705.4938 us. Best GFLOPs: 671.0907
2024-04-28 11:56:39 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #516: GFLOPs: 602.1730. Time: 1536.1778 us. Best GFLOPs: 671.0907
2024-04-28 11:56:39 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #517: GFLOPs: 651.8363. Time: 1419.1367 us. Best GFLOPs: 671.0907
2024-04-28 11:56:39 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #518: GFLOPs: 662.6049. Time: 1396.0729 us. Best GFLOPs: 671.0907
2024-04-28 11:56:39 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #519: GFLOPs: 632.5301. Time: 1462.4517 us. Best GFLOPs: 671.0907
2024-04-28 11:56:39 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #520: GFLOPs: 652.7788. Time: 1417.0876 us. Best GFLOPs: 671.0907
2024-04-28 11:56:39 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #521: GFLOPs: 608.4426. Time: 1520.3485 us. Best GFLOPs: 671.0907
2024-04-28 11:56:39 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #522: GFLOPs: 541.8904. Time: 1707.0697 us. Best GFLOPs: 671.0907
2024-04-28 11:56:39 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #523: GFLOPs: 626.0810. Time: 1477.5160 us. Best GFLOPs: 671.0907
2024-04-28 11:56:39 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #524: GFLOPs: 530.1152. Time: 1744.9882 us. Best GFLOPs: 671.0907
2024-04-28 11:56:39 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #525: GFLOPs: 551.4326. Time: 1677.5300 us. Best GFLOPs: 671.0907
2024-04-28 11:56:39 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #526: GFLOPs: 541.8471. Time: 1707.2062 us. Best GFLOPs: 671.0907
2024-04-28 11:56:39 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #527: GFLOPs: 545.2371. Time: 1696.5916 us. Best GFLOPs: 671.0907
2024-04-28 11:56:39 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #528: GFLOPs: 562.0582. Time: 1645.8167 us. Best GFLOPs: 671.0907
2024-04-28 11:56:39 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #529: GFLOPs: 564.6685. Time: 1638.2085 us. Best GFLOPs: 671.0907
2024-04-28 11:56:39 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #530: GFLOPs: 523.4341. Time: 1767.2610 us. Best GFLOPs: 671.0907
2024-04-28 11:56:39 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #531: GFLOPs: 558.7029. Time: 1655.7006 us. Best GFLOPs: 671.0907
2024-04-28 11:56:39 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #532: GFLOPs: 528.1480. Time: 1751.4878 us. Best GFLOPs: 671.0907
2024-04-28 11:56:39 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #533: GFLOPs: 535.7527. Time: 1726.6264 us. Best GFLOPs: 671.0907
2024-04-28 11:56:39 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #534: GFLOPs: 514.6016. Time: 1797.5938 us. Best GFLOPs: 671.0907
2024-04-28 11:56:39 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #535: GFLOPs: 539.0331. Time: 1716.1187 us. Best GFLOPs: 671.0907
2024-04-28 11:56:39 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #536: GFLOPs: 542.3637. Time: 1705.5800 us. Best GFLOPs: 671.0907
2024-04-28 11:56:39 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #537: GFLOPs: 553.5032. Time: 1671.2544 us. Best GFLOPs: 671.0907
2024-04-28 11:56:39 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #538: GFLOPs: 511.8293. Time: 1807.3304 us. Best GFLOPs: 671.0907
2024-04-28 11:56:39 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #539: GFLOPs: 427.2027. Time: 2165.3532 us. Best GFLOPs: 671.0907
2024-04-28 11:56:39 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #540: GFLOPs: 296.2364. Time: 3122.6572 us. Best GFLOPs: 671.0907
2024-04-28 11:56:39 [INFO] [task_scheduler.cc:121] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #541: Error in building:
LocalBuilder: Timeout, killed after 30.0 seconds
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(1), T.int64(14), T.int64(14), T.int64(512)), "float32"), p1: T.Buffer((T.int64(32), T.int64(1), T.int64(3), T.int64(3), T.int64(512), T.int64(16)), "float32"), p2: T.Buffer((T.int64(1), T.int64(32), T.int64(1), T.int64(1), T.int64(16)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(32), T.int64(14), T.int64(14), T.int64(16)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        data_pad = T.alloc_buffer((T.int64(1), T.int64(1), T.int64(16), T.int64(16), T.int64(512)))
        conv2d_NCHWc = T.alloc_buffer((T.int64(1), T.int64(32), T.int64(14), T.int64(14), T.int64(16)))
        for n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_fused_fused in T.parallel(T.int64(896), annotations={"pragma_auto_unroll_max_step": 512, "pragma_unroll_explicit": 1}):
            for ax0, ax1, ax2, ax3, ax4 in T.grid(T.int64(1), T.int64(1), T.int64(9), T.int64(3), T.int64(512)):
                with T.block("data_pad"):
                    v_i0, v_i1 = T.axis.remap("SS", [ax0, ax1])
                    v_i2 = T.axis.spatial(T.int64(16), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_fused_fused % T.int64(14) // T.int64(7) * T.int64(7) + ax2)
                    v_i3 = T.axis.spatial(T.int64(16), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_fused_fused % T.int64(448) // T.int64(224) * T.int64(7) + n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_fused_fused % T.int64(7) + ax3)
                    v_i4 = T.axis.spatial(T.int64(512), ax4)
                    T.reads(p0[v_i0, v_i1, v_i2 - T.int64(1), v_i3 - T.int64(1), v_i4])
                    T.writes(data_pad[v_i0, v_i1, v_i2, v_i3, v_i4])
                    data_pad[v_i0, v_i1, v_i2, v_i3, v_i4] = T.if_then_else(T.int64(1) <= v_i2 and v_i2 < T.int64(15) and T.int64(1) <= v_i3 and v_i3 < T.int64(15), p0[v_i0, v_i1, v_i2 - T.int64(1), v_i3 - T.int64(1), v_i4], T.float32(0))
            for oc_block_1 in range(T.int64(1)):
                for n_2_init, oc_chunk_2_init, oh_2_init, ow_2_init, oc_block_2_init, n_3_init, oc_chunk_3_init, oh_3_init, ow_3_init, oc_block_3_init in T.grid(T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(16), T.int64(1), T.int64(1), T.int64(7), T.int64(1), T.int64(1)):
                    with T.block("conv2d_NCHWc_init"):
                        v_n = T.axis.spatial(T.int64(1), n_2_init + n_3_init)
                        v_oc_chunk = T.axis.spatial(T.int64(32), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_fused_fused // T.int64(448) * T.int64(16) + n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_fused_fused % T.int64(224) // T.int64(14) + oc_chunk_2_init + oc_chunk_3_init)
                        v_oh = T.axis.spatial(T.int64(14), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_fused_fused % T.int64(14) // T.int64(7) * T.int64(7) + oh_2_init * T.int64(7) + oh_3_init)
                        v_ow = T.axis.spatial(T.int64(14), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_fused_fused % T.int64(448) // T.int64(224) * T.int64(7) + n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_fused_fused % T.int64(7) + ow_2_init + ow_3_init)
                        v_oc_block = T.axis.spatial(T.int64(16), oc_block_1 * T.int64(16) + oc_block_2_init + oc_block_3_init)
                        T.reads()
                        T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                        T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                        conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = T.float32(0)
                for ic_0, kh_0, kw_0, n_2, oc_chunk_2, oh_2, ow_2, oc_block_2, ic_1, kh_1, kw_1, n_3, oc_chunk_3, oh_3, ow_3, oc_block_3 in T.grid(T.int64(512), T.int64(1), T.int64(3), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(16), T.int64(1), T.int64(3), T.int64(1), T.int64(1), T.int64(1), T.int64(7), T.int64(1), T.int64(1)):
                    with T.block("conv2d_NCHWc_update"):
                        v_n = T.axis.spatial(T.int64(1), n_2 + n_3)
                        v_oc_chunk = T.axis.spatial(T.int64(32), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_fused_fused // T.int64(448) * T.int64(16) + n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_fused_fused % T.int64(224) // T.int64(14) + oc_chunk_2 + oc_chunk_3)
                        v_oh = T.axis.spatial(T.int64(14), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_fused_fused % T.int64(14) // T.int64(7) * T.int64(7) + oh_2 * T.int64(7) + oh_3)
                        v_ow = T.axis.spatial(T.int64(14), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_fused_fused % T.int64(448) // T.int64(224) * T.int64(7) + n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_fused_fused % T.int64(7) + ow_2 + ow_3)
                        v_oc_block = T.axis.spatial(T.int64(16), oc_block_1 * T.int64(16) + oc_block_2 + oc_block_3)
                        v_ic = T.axis.reduce(T.int64(512), ic_0 + ic_1)
                        v_kh = T.axis.reduce(T.int64(3), kh_0 * T.int64(3) + kh_1)
                        v_kw = T.axis.reduce(T.int64(3), kw_0 + kw_1)
                        T.reads(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block], data_pad[v_n, v_ic // T.int64(512), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(512)], p1[v_oc_chunk, v_ic // T.int64(512), v_kh, v_kw, v_ic % T.int64(512), v_oc_block])
                        T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                        T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                        conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] + data_pad[v_n, v_ic // T.int64(512), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(512)] * p1[v_oc_chunk, v_ic // T.int64(512), v_kh, v_kw, v_ic % T.int64(512), v_oc_block]
                for ax0, ax1, ax2 in T.grid(T.int64(1), T.int64(1), T.int64(7)):
                    for ax3_ax4_fused in T.vectorized(T.int64(16)):
                        with T.block("T_relu"):
                            v_ax0 = T.axis.spatial(T.int64(1), ax0)
                            v_ax1 = T.axis.spatial(T.int64(32), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_fused_fused // T.int64(448) * T.int64(16) + n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_fused_fused % T.int64(224) // T.int64(14) + ax1)
                            v_ax2 = T.axis.spatial(T.int64(14), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_fused_fused % T.int64(14) // T.int64(7) * T.int64(7) + ax2)
                            v_ax3 = T.axis.spatial(T.int64(14), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_fused_fused % T.int64(448) // T.int64(224) * T.int64(7) + n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_fused_fused % T.int64(7))
                            v_ax4 = T.axis.spatial(T.int64(16), ax3_ax4_fused)
                            T.reads(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4])
                            T.writes(T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                            T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.max(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] + p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4], T.float32(0))
b0 = sch.get_block(name="data_pad", func_name="main")
b1 = sch.get_block(name="conv2d_NCHWc", func_name="main")
b2 = sch.get_block(name="T_add", func_name="main")
b3 = sch.get_block(name="root", func_name="main")
sch.compute_inline(block=b2)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSRSRS")
l4, l5, l6, l7, l8, l9, l10, l11 = sch.get_loops(block=b1)
v12, v13, v14, v15 = sch.sample_perfect_tile(loop=l4, n=4, max_innermost_factor=64, decision=[1, 1, 1, 1])
l16, l17, l18, l19 = sch.split(loop=l4, factors=[v12, v13, v14, v15], preserve_unit_iters=True)
v20, v21, v22, v23 = sch.sample_perfect_tile(loop=l5, n=4, max_innermost_factor=64, decision=[2, 16, 1, 1])
l24, l25, l26, l27 = sch.split(loop=l5, factors=[v20, v21, v22, v23], preserve_unit_iters=True)
v28, v29, v30, v31 = sch.sample_perfect_tile(loop=l6, n=4, max_innermost_factor=64, decision=[1, 2, 1, 7])
l32, l33, l34, l35 = sch.split(loop=l6, factors=[v28, v29, v30, v31], preserve_unit_iters=True)
v36, v37, v38, v39 = sch.sample_perfect_tile(loop=l7, n=4, max_innermost_factor=64, decision=[2, 7, 1, 1])
l40, l41, l42, l43 = sch.split(loop=l7, factors=[v36, v37, v38, v39], preserve_unit_iters=True)
v44, v45, v46, v47 = sch.sample_perfect_tile(loop=l8, n=4, max_innermost_factor=64, decision=[1, 1, 16, 1])
l48, l49, l50, l51 = sch.split(loop=l8, factors=[v44, v45, v46, v47], preserve_unit_iters=True)
v52, v53 = sch.sample_perfect_tile(loop=l9, n=2, max_innermost_factor=64, decision=[512, 1])
l54, l55 = sch.split(loop=l9, factors=[v52, v53], preserve_unit_iters=True)
v56, v57 = sch.sample_perfect_tile(loop=l10, n=2, max_innermost_factor=64, decision=[1, 3])
l58, l59 = sch.split(loop=l10, factors=[v56, v57], preserve_unit_iters=True)
v60, v61 = sch.sample_perfect_tile(loop=l11, n=2, max_innermost_factor=64, decision=[3, 1])
l62, l63 = sch.split(loop=l11, factors=[v60, v61], preserve_unit_iters=True)
sch.reorder(l16, l24, l32, l40, l48, l17, l25, l33, l41, l49, l54, l58, l62, l18, l26, l34, l42, l50, l55, l59, l63, l19, l27, l35, l43, l51)
b64, = sch.get_consumers(block=b1)
sch.reverse_compute_at(block=b64, loop=l49, preserve_unit_loops=True, index=-1)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.vectorize", ann_val=64)
v65 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.unroll_explicit", ann_val=v65)
l66 = sch.sample_compute_location(block=b0, decision=8)
sch.compute_at(block=b0, loop=l66, preserve_unit_loops=True, index=-1)
sch.enter_postproc()
b67 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b67, ann_key="meta_schedule.parallel")
sch.unannotate(block_or_loop=b67, ann_key="meta_schedule.vectorize")
sch.unannotate(block_or_loop=b67, ann_key="meta_schedule.unroll_explicit")
b68, b69, b70 = sch.get_child_blocks(b67)
l71, l72, l73, l74, l75, l76, l77, l78, l79, l80, l81, l82, l83, l84 = sch.get_loops(block=b68)
l85 = sch.fuse(l71, l72, l73, l74, l75, l76, l77, l78, l79, preserve_unit_iters=True)
sch.parallel(loop=l85)
l86, l87, l88, l89, l90, l91, l92, l93, l94, l95, l96, l97, l98, l99, l100, l101, l102, l103 = sch.get_loops(block=b69)
l104 = sch.fuse(l86, preserve_unit_iters=True)
sch.parallel(loop=l104)
sch.annotate(block_or_loop=l104, ann_key="pragma_auto_unroll_max_step", ann_val=512)
sch.annotate(block_or_loop=l104, ann_key="pragma_unroll_explicit", ann_val=1)
l105, l106, l107, l108, l109, l110, l111 = sch.get_loops(block=b70)
l112 = sch.fuse(l110, l111, preserve_unit_iters=True)
sch.vectorize(loop=l112)
b113 = sch.get_block(name="conv2d_NCHWc", func_name="main")
l114, l115, l116, l117, l118, l119, l120, l121, l122, l123, l124, l125, l126, l127, l128, l129, l130, l131 = sch.get_loops(block=b113)
b132 = sch.decompose_reduction(block=b113, loop=l116)
2024-04-28 11:56:40 [INFO] [task_scheduler.cc:121] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #542: Error in building:
LocalBuilder: Timeout, killed after 30.0 seconds
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(1), T.int64(14), T.int64(14), T.int64(512)), "float32"), p1: T.Buffer((T.int64(32), T.int64(1), T.int64(3), T.int64(3), T.int64(512), T.int64(16)), "float32"), p2: T.Buffer((T.int64(1), T.int64(32), T.int64(1), T.int64(1), T.int64(16)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(32), T.int64(14), T.int64(14), T.int64(16)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        data_pad = T.alloc_buffer((T.int64(1), T.int64(1), T.int64(16), T.int64(16), T.int64(512)))
        conv2d_NCHWc = T.alloc_buffer((T.int64(1), T.int64(32), T.int64(14), T.int64(14), T.int64(16)))
        for n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_fused_fused in T.parallel(T.int64(896), annotations={"pragma_auto_unroll_max_step": 512, "pragma_unroll_explicit": 1}):
            for ax0, ax1, ax2, ax3, ax4 in T.grid(T.int64(1), T.int64(1), T.int64(9), T.int64(3), T.int64(512)):
                with T.block("data_pad"):
                    v_i0, v_i1 = T.axis.remap("SS", [ax0, ax1])
                    v_i2 = T.axis.spatial(T.int64(16), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_fused_fused % T.int64(14) // T.int64(7) * T.int64(7) + ax2)
                    v_i3 = T.axis.spatial(T.int64(16), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_fused_fused % T.int64(224) // T.int64(112) * T.int64(7) + n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_fused_fused % T.int64(7) + ax3)
                    v_i4 = T.axis.spatial(T.int64(512), ax4)
                    T.reads(p0[v_i0, v_i1, v_i2 - T.int64(1), v_i3 - T.int64(1), v_i4])
                    T.writes(data_pad[v_i0, v_i1, v_i2, v_i3, v_i4])
                    data_pad[v_i0, v_i1, v_i2, v_i3, v_i4] = T.if_then_else(T.int64(1) <= v_i2 and v_i2 < T.int64(15) and T.int64(1) <= v_i3 and v_i3 < T.int64(15), p0[v_i0, v_i1, v_i2 - T.int64(1), v_i3 - T.int64(1), v_i4], T.float32(0))
            for oc_block_1 in range(T.int64(1)):
                for n_2_init, oc_chunk_2_init, oh_2_init, ow_2_init, oc_block_2_init, n_3_init, oc_chunk_3_init, oh_3_init, ow_3_init, oc_block_3_init in T.grid(T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(16), T.int64(1), T.int64(1), T.int64(7), T.int64(1), T.int64(1)):
                    with T.block("conv2d_NCHWc_init"):
                        v_n = T.axis.spatial(T.int64(1), n_2_init + n_3_init)
                        v_oc_chunk = T.axis.spatial(T.int64(32), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_fused_fused // T.int64(224) * T.int64(8) + n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_fused_fused % T.int64(112) // T.int64(14) + oc_chunk_2_init + oc_chunk_3_init)
                        v_oh = T.axis.spatial(T.int64(14), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_fused_fused % T.int64(14) // T.int64(7) * T.int64(7) + oh_2_init * T.int64(7) + oh_3_init)
                        v_ow = T.axis.spatial(T.int64(14), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_fused_fused % T.int64(224) // T.int64(112) * T.int64(7) + n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_fused_fused % T.int64(7) + ow_2_init + ow_3_init)
                        v_oc_block = T.axis.spatial(T.int64(16), oc_block_1 * T.int64(16) + oc_block_2_init + oc_block_3_init)
                        T.reads()
                        T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                        T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                        conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = T.float32(0)
                for ic_0, kh_0, kw_0, n_2, oc_chunk_2, oh_2, ow_2, oc_block_2, ic_1, kh_1, kw_1, n_3, oc_chunk_3, oh_3, ow_3, oc_block_3 in T.grid(T.int64(512), T.int64(1), T.int64(3), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(16), T.int64(1), T.int64(3), T.int64(1), T.int64(1), T.int64(1), T.int64(7), T.int64(1), T.int64(1)):
                    with T.block("conv2d_NCHWc_update"):
                        v_n = T.axis.spatial(T.int64(1), n_2 + n_3)
                        v_oc_chunk = T.axis.spatial(T.int64(32), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_fused_fused // T.int64(224) * T.int64(8) + n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_fused_fused % T.int64(112) // T.int64(14) + oc_chunk_2 + oc_chunk_3)
                        v_oh = T.axis.spatial(T.int64(14), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_fused_fused % T.int64(14) // T.int64(7) * T.int64(7) + oh_2 * T.int64(7) + oh_3)
                        v_ow = T.axis.spatial(T.int64(14), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_fused_fused % T.int64(224) // T.int64(112) * T.int64(7) + n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_fused_fused % T.int64(7) + ow_2 + ow_3)
                        v_oc_block = T.axis.spatial(T.int64(16), oc_block_1 * T.int64(16) + oc_block_2 + oc_block_3)
                        v_ic = T.axis.reduce(T.int64(512), ic_0 + ic_1)
                        v_kh = T.axis.reduce(T.int64(3), kh_0 * T.int64(3) + kh_1)
                        v_kw = T.axis.reduce(T.int64(3), kw_0 + kw_1)
                        T.reads(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block], data_pad[v_n, v_ic // T.int64(512), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(512)], p1[v_oc_chunk, v_ic // T.int64(512), v_kh, v_kw, v_ic % T.int64(512), v_oc_block])
                        T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                        T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                        conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] + data_pad[v_n, v_ic // T.int64(512), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(512)] * p1[v_oc_chunk, v_ic // T.int64(512), v_kh, v_kw, v_ic % T.int64(512), v_oc_block]
                for ax0, ax1, ax2 in T.grid(T.int64(1), T.int64(1), T.int64(7)):
                    for ax3_ax4_fused in T.vectorized(T.int64(16)):
                        with T.block("T_relu"):
                            v_ax0 = T.axis.spatial(T.int64(1), ax0)
                            v_ax1 = T.axis.spatial(T.int64(32), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_fused_fused // T.int64(224) * T.int64(8) + n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_fused_fused % T.int64(112) // T.int64(14) + ax1)
                            v_ax2 = T.axis.spatial(T.int64(14), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_fused_fused % T.int64(14) // T.int64(7) * T.int64(7) + ax2)
                            v_ax3 = T.axis.spatial(T.int64(14), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_fused_fused % T.int64(224) // T.int64(112) * T.int64(7) + n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_fused_fused % T.int64(7))
                            v_ax4 = T.axis.spatial(T.int64(16), ax3_ax4_fused)
                            T.reads(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4])
                            T.writes(T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                            T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.max(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] + p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4], T.float32(0))
b0 = sch.get_block(name="data_pad", func_name="main")
b1 = sch.get_block(name="conv2d_NCHWc", func_name="main")
b2 = sch.get_block(name="T_add", func_name="main")
b3 = sch.get_block(name="root", func_name="main")
sch.compute_inline(block=b2)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSRSRS")
l4, l5, l6, l7, l8, l9, l10, l11 = sch.get_loops(block=b1)
v12, v13, v14, v15 = sch.sample_perfect_tile(loop=l4, n=4, max_innermost_factor=64, decision=[1, 1, 1, 1])
l16, l17, l18, l19 = sch.split(loop=l4, factors=[v12, v13, v14, v15], preserve_unit_iters=True)
v20, v21, v22, v23 = sch.sample_perfect_tile(loop=l5, n=4, max_innermost_factor=64, decision=[4, 8, 1, 1])
l24, l25, l26, l27 = sch.split(loop=l5, factors=[v20, v21, v22, v23], preserve_unit_iters=True)
v28, v29, v30, v31 = sch.sample_perfect_tile(loop=l6, n=4, max_innermost_factor=64, decision=[1, 2, 1, 7])
l32, l33, l34, l35 = sch.split(loop=l6, factors=[v28, v29, v30, v31], preserve_unit_iters=True)
v36, v37, v38, v39 = sch.sample_perfect_tile(loop=l7, n=4, max_innermost_factor=64, decision=[2, 7, 1, 1])
l40, l41, l42, l43 = sch.split(loop=l7, factors=[v36, v37, v38, v39], preserve_unit_iters=True)
v44, v45, v46, v47 = sch.sample_perfect_tile(loop=l8, n=4, max_innermost_factor=64, decision=[1, 1, 16, 1])
l48, l49, l50, l51 = sch.split(loop=l8, factors=[v44, v45, v46, v47], preserve_unit_iters=True)
v52, v53 = sch.sample_perfect_tile(loop=l9, n=2, max_innermost_factor=64, decision=[512, 1])
l54, l55 = sch.split(loop=l9, factors=[v52, v53], preserve_unit_iters=True)
v56, v57 = sch.sample_perfect_tile(loop=l10, n=2, max_innermost_factor=64, decision=[1, 3])
l58, l59 = sch.split(loop=l10, factors=[v56, v57], preserve_unit_iters=True)
v60, v61 = sch.sample_perfect_tile(loop=l11, n=2, max_innermost_factor=64, decision=[3, 1])
l62, l63 = sch.split(loop=l11, factors=[v60, v61], preserve_unit_iters=True)
sch.reorder(l16, l24, l32, l40, l48, l17, l25, l33, l41, l49, l54, l58, l62, l18, l26, l34, l42, l50, l55, l59, l63, l19, l27, l35, l43, l51)
b64, = sch.get_consumers(block=b1)
sch.reverse_compute_at(block=b64, loop=l49, preserve_unit_loops=True, index=-1)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.vectorize", ann_val=64)
v65 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.unroll_explicit", ann_val=v65)
l66 = sch.sample_compute_location(block=b0, decision=8)
sch.compute_at(block=b0, loop=l66, preserve_unit_loops=True, index=-1)
sch.enter_postproc()
b67 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b67, ann_key="meta_schedule.parallel")
sch.unannotate(block_or_loop=b67, ann_key="meta_schedule.vectorize")
sch.unannotate(block_or_loop=b67, ann_key="meta_schedule.unroll_explicit")
b68, b69, b70 = sch.get_child_blocks(b67)
l71, l72, l73, l74, l75, l76, l77, l78, l79, l80, l81, l82, l83, l84 = sch.get_loops(block=b68)
l85 = sch.fuse(l71, l72, l73, l74, l75, l76, l77, l78, l79, preserve_unit_iters=True)
sch.parallel(loop=l85)
l86, l87, l88, l89, l90, l91, l92, l93, l94, l95, l96, l97, l98, l99, l100, l101, l102, l103 = sch.get_loops(block=b69)
l104 = sch.fuse(l86, preserve_unit_iters=True)
sch.parallel(loop=l104)
sch.annotate(block_or_loop=l104, ann_key="pragma_auto_unroll_max_step", ann_val=512)
sch.annotate(block_or_loop=l104, ann_key="pragma_unroll_explicit", ann_val=1)
l105, l106, l107, l108, l109, l110, l111 = sch.get_loops(block=b70)
l112 = sch.fuse(l110, l111, preserve_unit_iters=True)
sch.vectorize(loop=l112)
b113 = sch.get_block(name="conv2d_NCHWc", func_name="main")
l114, l115, l116, l117, l118, l119, l120, l121, l122, l123, l124, l125, l126, l127, l128, l129, l130, l131 = sch.get_loops(block=b113)
b132 = sch.decompose_reduction(block=b113, loop=l116)
2024-04-28 11:56:40 [INFO] [task_scheduler.cc:121] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #543: Error in building:
LocalBuilder: Timeout, killed after 30.0 seconds
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(1), T.int64(14), T.int64(14), T.int64(512)), "float32"), p1: T.Buffer((T.int64(32), T.int64(1), T.int64(3), T.int64(3), T.int64(512), T.int64(16)), "float32"), p2: T.Buffer((T.int64(1), T.int64(32), T.int64(1), T.int64(1), T.int64(16)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(32), T.int64(14), T.int64(14), T.int64(16)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        data_pad = T.alloc_buffer((T.int64(1), T.int64(1), T.int64(16), T.int64(16), T.int64(512)))
        conv2d_NCHWc = T.alloc_buffer((T.int64(1), T.int64(32), T.int64(14), T.int64(14), T.int64(16)))
        for n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_fused_fused in T.parallel(T.int64(896), annotations={"pragma_auto_unroll_max_step": 512, "pragma_unroll_explicit": 1}):
            for ax0, ax1, ax2, ax3, ax4 in T.grid(T.int64(1), T.int64(1), T.int64(9), T.int64(3), T.int64(512)):
                with T.block("data_pad"):
                    v_i0, v_i1 = T.axis.remap("SS", [ax0, ax1])
                    v_i2 = T.axis.spatial(T.int64(16), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_fused_fused % T.int64(2) * T.int64(7) + ax2)
                    v_i3 = T.axis.spatial(T.int64(16), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_fused_fused % T.int64(224) // T.int64(16) + ax3)
                    v_i4 = T.axis.spatial(T.int64(512), ax4)
                    T.reads(p0[v_i0, v_i1, v_i2 - T.int64(1), v_i3 - T.int64(1), v_i4])
                    T.writes(data_pad[v_i0, v_i1, v_i2, v_i3, v_i4])
                    data_pad[v_i0, v_i1, v_i2, v_i3, v_i4] = T.if_then_else(T.int64(1) <= v_i2 and v_i2 < T.int64(15) and T.int64(1) <= v_i3 and v_i3 < T.int64(15), p0[v_i0, v_i1, v_i2 - T.int64(1), v_i3 - T.int64(1), v_i4], T.float32(0))
            for ow_1, oc_block_1 in T.grid(T.int64(1), T.int64(1)):
                for n_2_init, oc_chunk_2_init, oh_2_init, ow_2_init, oc_block_2_init, n_3_init, oc_chunk_3_init, oh_3_init, ow_3_init, oc_block_3_init in T.grid(T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(16), T.int64(1), T.int64(1), T.int64(7), T.int64(1), T.int64(1)):
                    with T.block("conv2d_NCHWc_init"):
                        v_n = T.axis.spatial(T.int64(1), n_2_init + n_3_init)
                        v_oc_chunk = T.axis.spatial(T.int64(32), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_fused_fused // T.int64(224) * T.int64(8) + n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_fused_fused % T.int64(16) // T.int64(2) + oc_chunk_2_init + oc_chunk_3_init)
                        v_oh = T.axis.spatial(T.int64(14), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_fused_fused % T.int64(2) * T.int64(7) + oh_2_init * T.int64(7) + oh_3_init)
                        v_ow = T.axis.spatial(T.int64(14), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_fused_fused % T.int64(224) // T.int64(16) + ow_1 + ow_2_init + ow_3_init)
                        v_oc_block = T.axis.spatial(T.int64(16), oc_block_1 * T.int64(16) + oc_block_2_init + oc_block_3_init)
                        T.reads()
                        T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                        T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                        conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = T.float32(0)
                for ic_0, kh_0, kw_0, n_2, oc_chunk_2, oh_2, ow_2, oc_block_2, ic_1, kh_1, kw_1, n_3, oc_chunk_3, oh_3, ow_3, oc_block_3 in T.grid(T.int64(512), T.int64(1), T.int64(3), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(16), T.int64(1), T.int64(3), T.int64(1), T.int64(1), T.int64(1), T.int64(7), T.int64(1), T.int64(1)):
                    with T.block("conv2d_NCHWc_update"):
                        v_n = T.axis.spatial(T.int64(1), n_2 + n_3)
                        v_oc_chunk = T.axis.spatial(T.int64(32), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_fused_fused // T.int64(224) * T.int64(8) + n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_fused_fused % T.int64(16) // T.int64(2) + oc_chunk_2 + oc_chunk_3)
                        v_oh = T.axis.spatial(T.int64(14), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_fused_fused % T.int64(2) * T.int64(7) + oh_2 * T.int64(7) + oh_3)
                        v_ow = T.axis.spatial(T.int64(14), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_fused_fused % T.int64(224) // T.int64(16) + ow_1 + ow_2 + ow_3)
                        v_oc_block = T.axis.spatial(T.int64(16), oc_block_1 * T.int64(16) + oc_block_2 + oc_block_3)
                        v_ic = T.axis.reduce(T.int64(512), ic_0 + ic_1)
                        v_kh = T.axis.reduce(T.int64(3), kh_0 * T.int64(3) + kh_1)
                        v_kw = T.axis.reduce(T.int64(3), kw_0 + kw_1)
                        T.reads(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block], data_pad[v_n, v_ic // T.int64(512), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(512)], p1[v_oc_chunk, v_ic // T.int64(512), v_kh, v_kw, v_ic % T.int64(512), v_oc_block])
                        T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                        T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                        conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] + data_pad[v_n, v_ic // T.int64(512), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(512)] * p1[v_oc_chunk, v_ic // T.int64(512), v_kh, v_kw, v_ic % T.int64(512), v_oc_block]
                for ax0, ax1, ax2 in T.grid(T.int64(1), T.int64(1), T.int64(7)):
                    for ax3_ax4_fused in T.vectorized(T.int64(16)):
                        with T.block("T_relu"):
                            v_ax0 = T.axis.spatial(T.int64(1), ax0)
                            v_ax1 = T.axis.spatial(T.int64(32), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_fused_fused // T.int64(224) * T.int64(8) + n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_fused_fused % T.int64(16) // T.int64(2) + ax1)
                            v_ax2 = T.axis.spatial(T.int64(14), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_fused_fused % T.int64(2) * T.int64(7) + ax2)
                            v_ax3 = T.axis.spatial(T.int64(14), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_fused_fused % T.int64(224) // T.int64(16))
                            v_ax4 = T.axis.spatial(T.int64(16), ax3_ax4_fused)
                            T.reads(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4])
                            T.writes(T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                            T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.max(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] + p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4], T.float32(0))
b0 = sch.get_block(name="data_pad", func_name="main")
b1 = sch.get_block(name="conv2d_NCHWc", func_name="main")
b2 = sch.get_block(name="T_add", func_name="main")
b3 = sch.get_block(name="root", func_name="main")
sch.compute_inline(block=b2)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSRSRS")
l4, l5, l6, l7, l8, l9, l10, l11 = sch.get_loops(block=b1)
v12, v13, v14, v15 = sch.sample_perfect_tile(loop=l4, n=4, max_innermost_factor=64, decision=[1, 1, 1, 1])
l16, l17, l18, l19 = sch.split(loop=l4, factors=[v12, v13, v14, v15], preserve_unit_iters=True)
v20, v21, v22, v23 = sch.sample_perfect_tile(loop=l5, n=4, max_innermost_factor=64, decision=[4, 8, 1, 1])
l24, l25, l26, l27 = sch.split(loop=l5, factors=[v20, v21, v22, v23], preserve_unit_iters=True)
v28, v29, v30, v31 = sch.sample_perfect_tile(loop=l6, n=4, max_innermost_factor=64, decision=[1, 2, 1, 7])
l32, l33, l34, l35 = sch.split(loop=l6, factors=[v28, v29, v30, v31], preserve_unit_iters=True)
v36, v37, v38, v39 = sch.sample_perfect_tile(loop=l7, n=4, max_innermost_factor=64, decision=[14, 1, 1, 1])
l40, l41, l42, l43 = sch.split(loop=l7, factors=[v36, v37, v38, v39], preserve_unit_iters=True)
v44, v45, v46, v47 = sch.sample_perfect_tile(loop=l8, n=4, max_innermost_factor=64, decision=[1, 1, 16, 1])
l48, l49, l50, l51 = sch.split(loop=l8, factors=[v44, v45, v46, v47], preserve_unit_iters=True)
v52, v53 = sch.sample_perfect_tile(loop=l9, n=2, max_innermost_factor=64, decision=[512, 1])
l54, l55 = sch.split(loop=l9, factors=[v52, v53], preserve_unit_iters=True)
v56, v57 = sch.sample_perfect_tile(loop=l10, n=2, max_innermost_factor=64, decision=[1, 3])
l58, l59 = sch.split(loop=l10, factors=[v56, v57], preserve_unit_iters=True)
v60, v61 = sch.sample_perfect_tile(loop=l11, n=2, max_innermost_factor=64, decision=[3, 1])
l62, l63 = sch.split(loop=l11, factors=[v60, v61], preserve_unit_iters=True)
sch.reorder(l16, l24, l32, l40, l48, l17, l25, l33, l41, l49, l54, l58, l62, l18, l26, l34, l42, l50, l55, l59, l63, l19, l27, l35, l43, l51)
b64, = sch.get_consumers(block=b1)
sch.reverse_compute_at(block=b64, loop=l49, preserve_unit_loops=True, index=-1)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.vectorize", ann_val=64)
v65 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.unroll_explicit", ann_val=v65)
l66 = sch.sample_compute_location(block=b0, decision=7)
sch.compute_at(block=b0, loop=l66, preserve_unit_loops=True, index=-1)
sch.enter_postproc()
b67 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b67, ann_key="meta_schedule.parallel")
sch.unannotate(block_or_loop=b67, ann_key="meta_schedule.vectorize")
sch.unannotate(block_or_loop=b67, ann_key="meta_schedule.unroll_explicit")
b68, b69, b70 = sch.get_child_blocks(b67)
l71, l72, l73, l74, l75, l76, l77, l78, l79, l80, l81, l82, l83 = sch.get_loops(block=b68)
l84 = sch.fuse(l71, l72, l73, l74, l75, l76, l77, l78, preserve_unit_iters=True)
sch.parallel(loop=l84)
l85, l86, l87, l88, l89, l90, l91, l92, l93, l94, l95, l96, l97, l98, l99, l100, l101, l102, l103 = sch.get_loops(block=b69)
l104 = sch.fuse(l85, preserve_unit_iters=True)
sch.parallel(loop=l104)
sch.annotate(block_or_loop=l104, ann_key="pragma_auto_unroll_max_step", ann_val=512)
sch.annotate(block_or_loop=l104, ann_key="pragma_unroll_explicit", ann_val=1)
l105, l106, l107, l108, l109, l110, l111, l112 = sch.get_loops(block=b70)
l113 = sch.fuse(l111, l112, preserve_unit_iters=True)
sch.vectorize(loop=l113)
b114 = sch.get_block(name="conv2d_NCHWc", func_name="main")
l115, l116, l117, l118, l119, l120, l121, l122, l123, l124, l125, l126, l127, l128, l129, l130, l131, l132, l133 = sch.get_loops(block=b114)
b134 = sch.decompose_reduction(block=b114, loop=l118)
2024-04-28 11:56:40 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #544: GFLOPs: 479.2756. Time: 1930.0892 us. Best GFLOPs: 671.0907
2024-04-28 11:56:40 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #545: GFLOPs: 463.4034. Time: 1996.1978 us. Best GFLOPs: 671.0907
2024-04-28 11:56:40 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #546: GFLOPs: 504.8821. Time: 1832.1995 us. Best GFLOPs: 671.0907
2024-04-28 11:56:40 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #547: GFLOPs: 555.9428. Time: 1663.9207 us. Best GFLOPs: 671.0907
2024-04-28 11:56:40 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #548: GFLOPs: 554.6309. Time: 1667.8565 us. Best GFLOPs: 671.0907
2024-04-28 11:56:40 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #549: GFLOPs: 313.0906. Time: 2954.5595 us. Best GFLOPs: 671.0907
2024-04-28 11:56:40 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #550: GFLOPs: 466.9266. Time: 1981.1351 us. Best GFLOPs: 671.0907
2024-04-28 11:56:40 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #551: GFLOPs: 540.0883. Time: 1712.7656 us. Best GFLOPs: 671.0907
2024-04-28 11:56:40 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #552: GFLOPs: 546.1259. Time: 1693.8305 us. Best GFLOPs: 671.0907
2024-04-28 11:56:40 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #553: GFLOPs: 236.7272. Time: 3907.6410 us. Best GFLOPs: 671.0907
2024-04-28 11:56:40 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #554: GFLOPs: 349.7308. Time: 2645.0194 us. Best GFLOPs: 671.0907
2024-04-28 11:56:40 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #555: GFLOPs: 535.2141. Time: 1728.3639 us. Best GFLOPs: 671.0907
2024-04-28 11:56:40 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #556: GFLOPs: 500.7058. Time: 1847.4816 us. Best GFLOPs: 671.0907
2024-04-28 11:56:40 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #557: GFLOPs: 539.5600. Time: 1714.4427 us. Best GFLOPs: 671.0907
2024-04-28 11:56:40 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #558: GFLOPs: 516.4835. Time: 1791.0440 us. Best GFLOPs: 671.0907
2024-04-28 11:56:40 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #559: GFLOPs: 531.6898. Time: 1739.8205 us. Best GFLOPs: 671.0907
2024-04-28 11:56:40 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #560: GFLOPs: 423.3635. Time: 2184.9895 us. Best GFLOPs: 671.0907
2024-04-28 11:56:40 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #561: GFLOPs: 518.4538. Time: 1784.2376 us. Best GFLOPs: 671.0907
2024-04-28 11:56:40 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #562: GFLOPs: 505.3928. Time: 1830.3480 us. Best GFLOPs: 671.0907
2024-04-28 11:56:40 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #563: GFLOPs: 399.0746. Time: 2317.9746 us. Best GFLOPs: 671.0907
2024-04-28 11:56:40 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #564: GFLOPs: 478.4619. Time: 1933.3719 us. Best GFLOPs: 671.0907
2024-04-28 11:56:40 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #565: GFLOPs: 437.1517. Time: 2116.0724 us. Best GFLOPs: 671.0907
2024-04-28 11:56:40 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #566: GFLOPs: 413.4712. Time: 2237.2654 us. Best GFLOPs: 671.0907
2024-04-28 11:56:40 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #567: GFLOPs: 449.3692. Time: 2058.5407 us. Best GFLOPs: 671.0907
2024-04-28 11:56:40 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #568: GFLOPs: 487.8284. Time: 1896.2501 us. Best GFLOPs: 671.0907
2024-04-28 11:56:40 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #569: GFLOPs: 483.1905. Time: 1914.4516 us. Best GFLOPs: 671.0907
2024-04-28 11:56:40 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #570: GFLOPs: 504.4951. Time: 1833.6050 us. Best GFLOPs: 671.0907
2024-04-28 11:56:40 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #571: GFLOPs: 502.6282. Time: 1840.4154 us. Best GFLOPs: 671.0907
2024-04-28 11:56:40 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #572: GFLOPs: 486.5971. Time: 1901.0487 us. Best GFLOPs: 671.0907
2024-04-28 11:56:40 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #573: GFLOPs: 501.5104. Time: 1844.5175 us. Best GFLOPs: 671.0907
2024-04-28 11:56:40 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #574: GFLOPs: 56.8476. Time: 16272.3739 us. Best GFLOPs: 671.0907
2024-04-28 11:56:40 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #575: GFLOPs: 49.3004. Time: 18763.4195 us. Best GFLOPs: 671.0907
2024-04-28 11:56:40 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #576: GFLOPs: 25.0339. Time: 36951.7423 us. Best GFLOPs: 671.0907
2024-04-28 12:10:56 [INFO] [evolutionary_search.cc:713] Generating candidates......
2024-04-28 12:10:57 [INFO] [evolutionary_search.cc:715] Picked top 102 candidate(s) from database
2024-04-28 12:11:02 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x3861aa8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x37d26b8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x4dd4148)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x3201bb8)]: 0 failure(s)
2024-04-28 12:11:02 [INFO] [evolutionary_search.cc:723] Sampled 410 candidate(s)
2024-04-28 12:11:14 [INFO] [evolutionary_search.cc:621] Evolve iter #0 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x3861aa8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x37d26b8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x4dd4148)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x3201bb8)]: 0 failure(s)
2024-04-28 12:11:25 [INFO] [evolutionary_search.cc:621] Evolve iter #1 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x3861aa8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x37d26b8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x4dd4148)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x3201bb8)]: 0 failure(s)
2024-04-28 12:11:37 [INFO] [evolutionary_search.cc:621] Evolve iter #2 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x3861aa8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x37d26b8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x4dd4148)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x3201bb8)]: 0 failure(s)
2024-04-28 12:11:49 [INFO] [evolutionary_search.cc:621] Evolve iter #3 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x3861aa8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x37d26b8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x4dd4148)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x3201bb8)]: 0 failure(s)
2024-04-28 12:11:56 [INFO] [evolutionary_search.cc:649] Scores of the best 64 candidates:
[1 : 16]:	0.9449  0.9314  0.9193  0.9193  0.8914  0.8827  0.8691  0.8620  0.8562  0.8562  0.8556  0.8417  0.8386  0.8386  0.8340  0.8277
[17 : 32]:	0.8257  0.8257  0.8257  0.8257  0.8257  0.8234  0.8163  0.8032  0.8002  0.7989  0.7948  0.7948  0.7928  0.7865  0.7865  0.7865
[33 : 48]:	0.7810  0.7810  0.7810  0.7810  0.7756  0.7756  0.7707  0.7707  0.7680  0.7679  0.7679  0.7668  0.7630  0.7621  0.7610  0.7559
[49 : 64]:	0.7551  0.7539  0.7523  0.7516  0.7501  0.7486  0.7486  0.7474  0.7459  0.7431  0.7409  0.7403  0.7393  0.7390  0.7387  0.7360
2024-04-28 12:11:57 [INFO] [evolutionary_search.cc:727] Got 64 candidate(s) with evolutionary search
2024-04-28 12:11:57 [INFO] [evolutionary_search.cc:730] Sending 64 candidates(s) for measurement
2024-04-28 12:13:47 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #577: GFLOPs: 644.1990. Time: 1435.9611 us. Best GFLOPs: 671.0907
2024-04-28 12:13:47 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #578: GFLOPs: 673.4663. Time: 1373.5576 us. Best GFLOPs: 673.4663
2024-04-28 12:13:47 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #579: GFLOPs: 647.0304. Time: 1429.6773 us. Best GFLOPs: 673.4663
2024-04-28 12:13:47 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #580: GFLOPs: 640.3186. Time: 1444.6632 us. Best GFLOPs: 673.4663
2024-04-28 12:13:47 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #581: GFLOPs: 633.8648. Time: 1459.3724 us. Best GFLOPs: 673.4663
2024-04-28 12:13:47 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #582: GFLOPs: 689.9496. Time: 1340.7424 us. Best GFLOPs: 689.9496
2024-04-28 12:13:47 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #583: GFLOPs: 643.4023. Time: 1437.7393 us. Best GFLOPs: 689.9496
2024-04-28 12:13:47 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #584: GFLOPs: 667.3672. Time: 1386.1105 us. Best GFLOPs: 689.9496
2024-04-28 12:13:47 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #585: GFLOPs: 510.7200. Time: 1811.2562 us. Best GFLOPs: 689.9496
2024-04-28 12:13:47 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #586: GFLOPs: 516.7721. Time: 1790.0439 us. Best GFLOPs: 689.9496
2024-04-28 12:13:47 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #587: GFLOPs: 568.2015. Time: 1628.0224 us. Best GFLOPs: 689.9496
2024-04-28 12:13:47 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #588: GFLOPs: 540.6207. Time: 1711.0792 us. Best GFLOPs: 689.9496
2024-04-28 12:13:47 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #589: GFLOPs: 524.0246. Time: 1765.2696 us. Best GFLOPs: 689.9496
2024-04-28 12:13:47 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #590: GFLOPs: 539.3754. Time: 1715.0296 us. Best GFLOPs: 689.9496
2024-04-28 12:13:47 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #591: GFLOPs: 581.3481. Time: 1591.2062 us. Best GFLOPs: 689.9496
2024-04-28 12:13:47 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #592: GFLOPs: 558.1129. Time: 1657.4510 us. Best GFLOPs: 689.9496
2024-04-28 12:13:47 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #593: GFLOPs: 556.2549. Time: 1662.9872 us. Best GFLOPs: 689.9496
2024-04-28 12:13:47 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #594: GFLOPs: 559.4019. Time: 1653.6318 us. Best GFLOPs: 689.9496
2024-04-28 12:13:47 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #595: GFLOPs: 555.8838. Time: 1664.0972 us. Best GFLOPs: 689.9496
2024-04-28 12:13:47 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #596: GFLOPs: 561.1895. Time: 1648.3643 us. Best GFLOPs: 689.9496
2024-04-28 12:13:47 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #597: GFLOPs: 553.2432. Time: 1672.0398 us. Best GFLOPs: 689.9496
2024-04-28 12:13:47 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #598: GFLOPs: 573.4501. Time: 1613.1216 us. Best GFLOPs: 689.9496
2024-04-28 12:13:47 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #599: GFLOPs: 544.3944. Time: 1699.2179 us. Best GFLOPs: 689.9496
2024-04-28 12:13:47 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #600: GFLOPs: 512.2840. Time: 1805.7263 us. Best GFLOPs: 689.9496
2024-04-28 12:13:47 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #601: GFLOPs: 550.2493. Time: 1681.1375 us. Best GFLOPs: 689.9496
2024-04-28 12:13:47 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #602: GFLOPs: 304.9133. Time: 3033.7956 us. Best GFLOPs: 689.9496
2024-04-28 12:13:47 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #603: GFLOPs: 548.5169. Time: 1686.4472 us. Best GFLOPs: 689.9496
2024-04-28 12:13:47 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #604: GFLOPs: 532.0119. Time: 1738.7670 us. Best GFLOPs: 689.9496
2024-04-28 12:13:47 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #605: GFLOPs: 565.5329. Time: 1635.7045 us. Best GFLOPs: 689.9496
2024-04-28 12:13:47 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #606: GFLOPs: 534.2914. Time: 1731.3488 us. Best GFLOPs: 689.9496
2024-04-28 12:13:47 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #607: GFLOPs: 535.9806. Time: 1725.8923 us. Best GFLOPs: 689.9496
2024-04-28 12:13:47 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #608: GFLOPs: 535.4932. Time: 1727.4632 us. Best GFLOPs: 689.9496
2024-04-28 12:13:47 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #609: GFLOPs: 278.6024. Time: 3320.3040 us. Best GFLOPs: 689.9496
2024-04-28 12:13:47 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #610: GFLOPs: 535.3236. Time: 1728.0104 us. Best GFLOPs: 689.9496
2024-04-28 12:13:47 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #611: GFLOPs: 536.5726. Time: 1723.9880 us. Best GFLOPs: 689.9496
2024-04-28 12:13:47 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #612: GFLOPs: 530.6510. Time: 1743.2262 us. Best GFLOPs: 689.9496
2024-04-28 12:13:47 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #613: GFLOPs: 535.0384. Time: 1728.9313 us. Best GFLOPs: 689.9496
2024-04-28 12:13:47 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #614: GFLOPs: 533.1556. Time: 1735.0371 us. Best GFLOPs: 689.9496
2024-04-28 12:13:47 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #615: GFLOPs: 524.2628. Time: 1764.4678 us. Best GFLOPs: 689.9496
2024-04-28 12:13:47 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #616: GFLOPs: 522.3651. Time: 1770.8777 us. Best GFLOPs: 689.9496
2024-04-28 12:13:47 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #617: GFLOPs: 549.4617. Time: 1683.5472 us. Best GFLOPs: 689.9496
2024-04-28 12:13:47 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #618: GFLOPs: 549.5206. Time: 1683.3667 us. Best GFLOPs: 689.9496
2024-04-28 12:13:47 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #619: GFLOPs: 510.7119. Time: 1811.2848 us. Best GFLOPs: 689.9496
2024-04-28 12:13:47 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #620: GFLOPs: 515.8588. Time: 1793.2132 us. Best GFLOPs: 689.9496
2024-04-28 12:13:47 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #621: GFLOPs: 571.0614. Time: 1619.8692 us. Best GFLOPs: 689.9496
2024-04-28 12:13:47 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #622: GFLOPs: 549.9224. Time: 1682.1368 us. Best GFLOPs: 689.9496
2024-04-28 12:13:47 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #623: GFLOPs: 332.1261. Time: 2785.2219 us. Best GFLOPs: 689.9496
2024-04-28 12:13:47 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #624: GFLOPs: 568.4204. Time: 1627.3955 us. Best GFLOPs: 689.9496
2024-04-28 12:13:47 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #625: GFLOPs: 533.2791. Time: 1734.6354 us. Best GFLOPs: 689.9496
2024-04-28 12:13:47 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #626: GFLOPs: 507.2434. Time: 1823.6703 us. Best GFLOPs: 689.9496
2024-04-28 12:13:47 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #627: GFLOPs: 496.2926. Time: 1863.9100 us. Best GFLOPs: 689.9496
2024-04-28 12:13:47 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #628: GFLOPs: 527.2360. Time: 1754.5174 us. Best GFLOPs: 689.9496
2024-04-28 12:13:47 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #629: GFLOPs: 528.0881. Time: 1751.6865 us. Best GFLOPs: 689.9496
2024-04-28 12:13:47 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #630: GFLOPs: 570.9845. Time: 1620.0873 us. Best GFLOPs: 689.9496
2024-04-28 12:13:47 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #631: GFLOPs: 557.5094. Time: 1659.2450 us. Best GFLOPs: 689.9496
2024-04-28 12:13:47 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #632: GFLOPs: 455.9681. Time: 2028.7487 us. Best GFLOPs: 689.9496
2024-04-28 12:13:47 [INFO] [task_scheduler.cc:121] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #633: Error in building:
LocalBuilder: Timeout, killed after 30.0 seconds
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(1), T.int64(14), T.int64(14), T.int64(512)), "float32"), p1: T.Buffer((T.int64(32), T.int64(1), T.int64(3), T.int64(3), T.int64(512), T.int64(16)), "float32"), p2: T.Buffer((T.int64(1), T.int64(32), T.int64(1), T.int64(1), T.int64(16)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(32), T.int64(14), T.int64(14), T.int64(16)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        data_pad = T.alloc_buffer((T.int64(1), T.int64(1), T.int64(16), T.int64(16), T.int64(512)))
        conv2d_NCHWc = T.alloc_buffer((T.int64(1), T.int64(32), T.int64(14), T.int64(14), T.int64(16)))
        for n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_fused_fused in T.parallel(T.int64(448), annotations={"pragma_auto_unroll_max_step": 512, "pragma_unroll_explicit": 1}):
            for ax0, ax1, ax2, ax3, ax4 in T.grid(T.int64(1), T.int64(1), T.int64(9), T.int64(3), T.int64(512)):
                with T.block("data_pad"):
                    v_i0, v_i1 = T.axis.remap("SS", [ax0, ax1])
                    v_i2 = T.axis.spatial(T.int64(16), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_fused_fused % T.int64(112) // T.int64(56) * T.int64(7) + ax2)
                    v_i3 = T.axis.spatial(T.int64(16), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_fused_fused % T.int64(2) + n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_fused_fused % T.int64(56) // T.int64(8) * T.int64(2) + ax3)
                    v_i4 = T.axis.spatial(T.int64(512), ax4)
                    T.reads(p0[v_i0, v_i1, v_i2 - T.int64(1), v_i3 - T.int64(1), v_i4])
                    T.writes(data_pad[v_i0, v_i1, v_i2, v_i3, v_i4])
                    data_pad[v_i0, v_i1, v_i2, v_i3, v_i4] = T.if_then_else(T.int64(1) <= v_i2 and v_i2 < T.int64(15) and T.int64(1) <= v_i3 and v_i3 < T.int64(15), p0[v_i0, v_i1, v_i2 - T.int64(1), v_i3 - T.int64(1), v_i4], T.float32(0))
            for oc_block_1 in range(T.int64(1)):
                for n_2_init, oc_chunk_2_init, oh_2_init, ow_2_init, oc_block_2_init, n_3_init, oc_chunk_3_init, oh_3_init, ow_3_init, oc_block_3_init in T.grid(T.int64(1), T.int64(2), T.int64(1), T.int64(1), T.int64(16), T.int64(1), T.int64(1), T.int64(7), T.int64(1), T.int64(1)):
                    with T.block("conv2d_NCHWc_init"):
                        v_n = T.axis.spatial(T.int64(1), n_2_init + n_3_init)
                        v_oc_chunk = T.axis.spatial(T.int64(32), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_fused_fused // T.int64(112) * T.int64(8) + n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_fused_fused % T.int64(8) // T.int64(2) * T.int64(2) + oc_chunk_2_init + oc_chunk_3_init)
                        v_oh = T.axis.spatial(T.int64(14), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_fused_fused % T.int64(112) // T.int64(56) * T.int64(7) + oh_2_init * T.int64(7) + oh_3_init)
                        v_ow = T.axis.spatial(T.int64(14), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_fused_fused % T.int64(56) // T.int64(8) * T.int64(2) + n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_fused_fused % T.int64(2) + ow_2_init + ow_3_init)
                        v_oc_block = T.axis.spatial(T.int64(16), oc_block_1 * T.int64(16) + oc_block_2_init + oc_block_3_init)
                        T.reads()
                        T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                        T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                        conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = T.float32(0)
                for ic_0, kh_0, kw_0, n_2, oc_chunk_2, oh_2, ow_2, oc_block_2, ic_1, kh_1, kw_1, n_3, oc_chunk_3, oh_3, ow_3, oc_block_3 in T.grid(T.int64(512), T.int64(1), T.int64(3), T.int64(1), T.int64(2), T.int64(1), T.int64(1), T.int64(16), T.int64(1), T.int64(3), T.int64(1), T.int64(1), T.int64(1), T.int64(7), T.int64(1), T.int64(1)):
                    with T.block("conv2d_NCHWc_update"):
                        v_n = T.axis.spatial(T.int64(1), n_2 + n_3)
                        v_oc_chunk = T.axis.spatial(T.int64(32), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_fused_fused // T.int64(112) * T.int64(8) + n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_fused_fused % T.int64(8) // T.int64(2) * T.int64(2) + oc_chunk_2 + oc_chunk_3)
                        v_oh = T.axis.spatial(T.int64(14), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_fused_fused % T.int64(112) // T.int64(56) * T.int64(7) + oh_2 * T.int64(7) + oh_3)
                        v_ow = T.axis.spatial(T.int64(14), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_fused_fused % T.int64(56) // T.int64(8) * T.int64(2) + n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_fused_fused % T.int64(2) + ow_2 + ow_3)
                        v_oc_block = T.axis.spatial(T.int64(16), oc_block_1 * T.int64(16) + oc_block_2 + oc_block_3)
                        v_ic = T.axis.reduce(T.int64(512), ic_0 + ic_1)
                        v_kh = T.axis.reduce(T.int64(3), kh_0 * T.int64(3) + kh_1)
                        v_kw = T.axis.reduce(T.int64(3), kw_0 + kw_1)
                        T.reads(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block], data_pad[v_n, v_ic // T.int64(512), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(512)], p1[v_oc_chunk, v_ic // T.int64(512), v_kh, v_kw, v_ic % T.int64(512), v_oc_block])
                        T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                        T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                        conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] + data_pad[v_n, v_ic // T.int64(512), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(512)] * p1[v_oc_chunk, v_ic // T.int64(512), v_kh, v_kw, v_ic % T.int64(512), v_oc_block]
                for ax0, ax1, ax2 in T.grid(T.int64(1), T.int64(2), T.int64(7)):
                    for ax3_ax4_fused in T.vectorized(T.int64(16)):
                        with T.block("T_relu"):
                            v_ax0 = T.axis.spatial(T.int64(1), ax0)
                            v_ax1 = T.axis.spatial(T.int64(32), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_fused_fused // T.int64(112) * T.int64(8) + n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_fused_fused % T.int64(8) // T.int64(2) * T.int64(2) + ax1)
                            v_ax2 = T.axis.spatial(T.int64(14), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_fused_fused % T.int64(112) // T.int64(56) * T.int64(7) + ax2)
                            v_ax3 = T.axis.spatial(T.int64(14), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_fused_fused % T.int64(56) // T.int64(8) * T.int64(2) + n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_fused_fused % T.int64(2))
                            v_ax4 = T.axis.spatial(T.int64(16), ax3_ax4_fused)
                            T.reads(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4])
                            T.writes(T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                            T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.max(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] + p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4], T.float32(0))
b0 = sch.get_block(name="data_pad", func_name="main")
b1 = sch.get_block(name="conv2d_NCHWc", func_name="main")
b2 = sch.get_block(name="T_add", func_name="main")
b3 = sch.get_block(name="root", func_name="main")
sch.compute_inline(block=b2)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSRSRS")
l4, l5, l6, l7, l8, l9, l10, l11 = sch.get_loops(block=b1)
v12, v13, v14, v15 = sch.sample_perfect_tile(loop=l4, n=4, max_innermost_factor=64, decision=[1, 1, 1, 1])
l16, l17, l18, l19 = sch.split(loop=l4, factors=[v12, v13, v14, v15], preserve_unit_iters=True)
v20, v21, v22, v23 = sch.sample_perfect_tile(loop=l5, n=4, max_innermost_factor=64, decision=[4, 4, 2, 1])
l24, l25, l26, l27 = sch.split(loop=l5, factors=[v20, v21, v22, v23], preserve_unit_iters=True)
v28, v29, v30, v31 = sch.sample_perfect_tile(loop=l6, n=4, max_innermost_factor=64, decision=[2, 1, 1, 7])
l32, l33, l34, l35 = sch.split(loop=l6, factors=[v28, v29, v30, v31], preserve_unit_iters=True)
v36, v37, v38, v39 = sch.sample_perfect_tile(loop=l7, n=4, max_innermost_factor=64, decision=[7, 2, 1, 1])
l40, l41, l42, l43 = sch.split(loop=l7, factors=[v36, v37, v38, v39], preserve_unit_iters=True)
v44, v45, v46, v47 = sch.sample_perfect_tile(loop=l8, n=4, max_innermost_factor=64, decision=[1, 1, 16, 1])
l48, l49, l50, l51 = sch.split(loop=l8, factors=[v44, v45, v46, v47], preserve_unit_iters=True)
v52, v53 = sch.sample_perfect_tile(loop=l9, n=2, max_innermost_factor=64, decision=[512, 1])
l54, l55 = sch.split(loop=l9, factors=[v52, v53], preserve_unit_iters=True)
v56, v57 = sch.sample_perfect_tile(loop=l10, n=2, max_innermost_factor=64, decision=[1, 3])
l58, l59 = sch.split(loop=l10, factors=[v56, v57], preserve_unit_iters=True)
v60, v61 = sch.sample_perfect_tile(loop=l11, n=2, max_innermost_factor=64, decision=[3, 1])
l62, l63 = sch.split(loop=l11, factors=[v60, v61], preserve_unit_iters=True)
sch.reorder(l16, l24, l32, l40, l48, l17, l25, l33, l41, l49, l54, l58, l62, l18, l26, l34, l42, l50, l55, l59, l63, l19, l27, l35, l43, l51)
b64, = sch.get_consumers(block=b1)
sch.reverse_compute_at(block=b64, loop=l49, preserve_unit_loops=True, index=-1)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.vectorize", ann_val=64)
v65 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.unroll_explicit", ann_val=v65)
l66 = sch.sample_compute_location(block=b0, decision=8)
sch.compute_at(block=b0, loop=l66, preserve_unit_loops=True, index=-1)
sch.enter_postproc()
b67 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b67, ann_key="meta_schedule.parallel")
sch.unannotate(block_or_loop=b67, ann_key="meta_schedule.vectorize")
sch.unannotate(block_or_loop=b67, ann_key="meta_schedule.unroll_explicit")
b68, b69, b70 = sch.get_child_blocks(b67)
l71, l72, l73, l74, l75, l76, l77, l78, l79, l80, l81, l82, l83, l84 = sch.get_loops(block=b68)
l85 = sch.fuse(l71, l72, l73, l74, l75, l76, l77, l78, l79, preserve_unit_iters=True)
sch.parallel(loop=l85)
l86, l87, l88, l89, l90, l91, l92, l93, l94, l95, l96, l97, l98, l99, l100, l101, l102, l103 = sch.get_loops(block=b69)
l104 = sch.fuse(l86, preserve_unit_iters=True)
sch.parallel(loop=l104)
sch.annotate(block_or_loop=l104, ann_key="pragma_auto_unroll_max_step", ann_val=512)
sch.annotate(block_or_loop=l104, ann_key="pragma_unroll_explicit", ann_val=1)
l105, l106, l107, l108, l109, l110, l111 = sch.get_loops(block=b70)
l112 = sch.fuse(l110, l111, preserve_unit_iters=True)
sch.vectorize(loop=l112)
b113 = sch.get_block(name="conv2d_NCHWc", func_name="main")
l114, l115, l116, l117, l118, l119, l120, l121, l122, l123, l124, l125, l126, l127, l128, l129, l130, l131 = sch.get_loops(block=b113)
b132 = sch.decompose_reduction(block=b113, loop=l116)
2024-04-28 12:13:47 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #634: GFLOPs: 596.2145. Time: 1551.5300 us. Best GFLOPs: 689.9496
2024-04-28 12:13:47 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #635: GFLOPs: 511.8690. Time: 1807.1906 us. Best GFLOPs: 689.9496
2024-04-28 12:13:47 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #636: GFLOPs: 546.1450. Time: 1693.7713 us. Best GFLOPs: 689.9496
2024-04-28 12:13:47 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #637: GFLOPs: 494.3932. Time: 1871.0709 us. Best GFLOPs: 689.9496
2024-04-28 12:13:47 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #638: GFLOPs: 6.1891. Time: 149464.3370 us. Best GFLOPs: 689.9496
2024-04-28 12:13:47 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #639: GFLOPs: 9.4727. Time: 97654.1680 us. Best GFLOPs: 689.9496
2024-04-28 12:13:47 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #640: GFLOPs: 50.2893. Time: 18394.4465 us. Best GFLOPs: 689.9496
2024-04-28 12:51:40 [INFO] [evolutionary_search.cc:713] Generating candidates......
2024-04-28 12:51:41 [INFO] [evolutionary_search.cc:715] Picked top 102 candidate(s) from database
2024-04-28 12:51:45 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x3861aa8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x37d26b8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x4dd4148)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x3201bb8)]: 0 failure(s)
2024-04-28 12:51:45 [INFO] [evolutionary_search.cc:723] Sampled 410 candidate(s)
2024-04-28 12:51:58 [INFO] [evolutionary_search.cc:621] Evolve iter #0 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x3861aa8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x37d26b8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x4dd4148)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x3201bb8)]: 0 failure(s)
2024-04-28 12:52:10 [INFO] [evolutionary_search.cc:621] Evolve iter #1 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x3861aa8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x37d26b8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x4dd4148)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x3201bb8)]: 0 failure(s)
2024-04-28 12:52:21 [INFO] [evolutionary_search.cc:621] Evolve iter #2 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x3861aa8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x37d26b8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x4dd4148)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x3201bb8)]: 0 failure(s)
2024-04-28 12:52:33 [INFO] [evolutionary_search.cc:621] Evolve iter #3 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x3861aa8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x37d26b8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x4dd4148)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x3201bb8)]: 0 failure(s)
2024-04-28 12:52:40 [INFO] [evolutionary_search.cc:649] Scores of the best 64 candidates:
[1 : 16]:	0.9392  0.9367  0.9326  0.9314  0.9314  0.9009  0.9009  0.8923  0.8923  0.8898  0.8895  0.8669  0.8654  0.8581  0.8563  0.8533
[17 : 32]:	0.8405  0.8236  0.8160  0.8160  0.8160  0.8152  0.8146  0.8146  0.8136  0.8107  0.8092  0.8092  0.8045  0.8032  0.7991  0.7953
[33 : 48]:	0.7952  0.7952  0.7881  0.7867  0.7867  0.7837  0.7828  0.7782  0.7782  0.7768  0.7732  0.7671  0.7662  0.7650  0.7650  0.7622
[49 : 64]:	0.7618  0.7606  0.7606  0.7561  0.7558  0.7515  0.7495  0.7495  0.7436  0.7436  0.7345  0.7345  0.7321  0.7254  0.7254  0.7239
2024-04-28 12:52:41 [INFO] [evolutionary_search.cc:727] Got 64 candidate(s) with evolutionary search
2024-04-28 12:52:41 [INFO] [evolutionary_search.cc:730] Sending 64 candidates(s) for measurement
2024-04-28 12:54:53 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #641: GFLOPs: 681.4825. Time: 1357.4005 us. Best GFLOPs: 689.9496
2024-04-28 12:54:53 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #642: GFLOPs: 671.1432. Time: 1378.3121 us. Best GFLOPs: 689.9496
2024-04-28 12:54:53 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #643: GFLOPs: 610.0412. Time: 1516.3643 us. Best GFLOPs: 689.9496
2024-04-28 12:54:53 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #644: GFLOPs: 671.2905. Time: 1378.0095 us. Best GFLOPs: 689.9496
2024-04-28 12:54:53 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #645: GFLOPs: 596.2899. Time: 1551.3340 us. Best GFLOPs: 689.9496
2024-04-28 12:54:53 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #646: GFLOPs: 640.4027. Time: 1444.4736 us. Best GFLOPs: 689.9496
2024-04-28 12:54:53 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #647: GFLOPs: 647.1018. Time: 1429.5197 us. Best GFLOPs: 689.9496
2024-04-28 12:54:53 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #648: GFLOPs: 623.1239. Time: 1484.5278 us. Best GFLOPs: 689.9496
2024-04-28 12:54:53 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #649: GFLOPs: 635.8698. Time: 1454.7707 us. Best GFLOPs: 689.9496
2024-04-28 12:54:53 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #650: GFLOPs: 644.8202. Time: 1434.5777 us. Best GFLOPs: 689.9496
2024-04-28 12:54:53 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #651: GFLOPs: 586.7160. Time: 1576.6482 us. Best GFLOPs: 689.9496
2024-04-28 12:54:53 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #652: GFLOPs: 647.5973. Time: 1428.4259 us. Best GFLOPs: 689.9496
2024-04-28 12:54:53 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #653: GFLOPs: 582.0718. Time: 1589.2280 us. Best GFLOPs: 689.9496
2024-04-28 12:54:53 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #654: GFLOPs: 603.9951. Time: 1531.5434 us. Best GFLOPs: 689.9496
2024-04-28 12:54:53 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #655: GFLOPs: 556.4377. Time: 1662.4407 us. Best GFLOPs: 689.9496
2024-04-28 12:54:53 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #656: GFLOPs: 528.5351. Time: 1750.2051 us. Best GFLOPs: 689.9496
2024-04-28 12:54:53 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #657: GFLOPs: 588.0729. Time: 1573.0104 us. Best GFLOPs: 689.9496
2024-04-28 12:54:53 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #658: GFLOPs: 579.5026. Time: 1596.2737 us. Best GFLOPs: 689.9496
2024-04-28 12:54:53 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #659: GFLOPs: 556.7619. Time: 1661.4727 us. Best GFLOPs: 689.9496
2024-04-28 12:54:53 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #660: GFLOPs: 575.7001. Time: 1606.8170 us. Best GFLOPs: 689.9496
2024-04-28 12:54:53 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #661: GFLOPs: 608.2593. Time: 1520.8066 us. Best GFLOPs: 689.9496
2024-04-28 12:54:53 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #662: GFLOPs: 566.5767. Time: 1632.6912 us. Best GFLOPs: 689.9496
2024-04-28 12:54:53 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #663: GFLOPs: 567.5943. Time: 1629.7639 us. Best GFLOPs: 689.9496
2024-04-28 12:54:53 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #664: GFLOPs: 561.5501. Time: 1647.3058 us. Best GFLOPs: 689.9496
2024-04-28 12:54:53 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #665: GFLOPs: 681.0793. Time: 1358.2042 us. Best GFLOPs: 689.9496
2024-04-28 12:54:53 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #666: GFLOPs: 526.4153. Time: 1757.2529 us. Best GFLOPs: 689.9496
2024-04-28 12:54:53 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #667: GFLOPs: 561.4635. Time: 1647.5600 us. Best GFLOPs: 689.9496
2024-04-28 12:54:53 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #668: GFLOPs: 567.8736. Time: 1628.9624 us. Best GFLOPs: 689.9496
2024-04-28 12:54:53 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #669: GFLOPs: 513.5682. Time: 1801.2112 us. Best GFLOPs: 689.9496
2024-04-28 12:54:53 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #670: GFLOPs: 328.6915. Time: 2814.3253 us. Best GFLOPs: 689.9496
2024-04-28 12:54:53 [INFO] [task_scheduler.cc:121] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #671: Error in building:
LocalBuilder: Timeout, killed after 30.0 seconds
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(1), T.int64(14), T.int64(14), T.int64(512)), "float32"), p1: T.Buffer((T.int64(32), T.int64(1), T.int64(3), T.int64(3), T.int64(512), T.int64(16)), "float32"), p2: T.Buffer((T.int64(1), T.int64(32), T.int64(1), T.int64(1), T.int64(16)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(32), T.int64(14), T.int64(14), T.int64(16)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        data_pad = T.alloc_buffer((T.int64(1), T.int64(1), T.int64(16), T.int64(16), T.int64(512)))
        conv2d_NCHWc = T.alloc_buffer((T.int64(1), T.int64(32), T.int64(14), T.int64(14), T.int64(16)))
        for n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_fused_fused in T.parallel(T.int64(448), annotations={"pragma_auto_unroll_max_step": 512, "pragma_unroll_explicit": 1}):
            for ax0, ax1, ax2, ax3, ax4 in T.grid(T.int64(1), T.int64(1), T.int64(9), T.int64(4), T.int64(512)):
                with T.block("data_pad"):
                    v_i0, v_i1 = T.axis.remap("SS", [ax0, ax1])
                    v_i2 = T.axis.spatial(T.int64(16), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_fused_fused % T.int64(14) // T.int64(7) * T.int64(7) + ax2)
                    v_i3 = T.axis.spatial(T.int64(16), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_fused_fused % T.int64(7) * T.int64(2) + ax3)
                    v_i4 = T.axis.spatial(T.int64(512), ax4)
                    T.reads(p0[v_i0, v_i1, v_i2 - T.int64(1), v_i3 - T.int64(1), v_i4])
                    T.writes(data_pad[v_i0, v_i1, v_i2, v_i3, v_i4])
                    data_pad[v_i0, v_i1, v_i2, v_i3, v_i4] = T.if_then_else(T.int64(1) <= v_i2 and v_i2 < T.int64(15) and T.int64(1) <= v_i3 and v_i3 < T.int64(15), p0[v_i0, v_i1, v_i2 - T.int64(1), v_i3 - T.int64(1), v_i4], T.float32(0))
            for oc_block_1 in range(T.int64(1)):
                for n_2_init, oc_chunk_2_init, oh_2_init, ow_2_init, oc_block_2_init, n_3_init, oc_chunk_3_init, oh_3_init, ow_3_init, oc_block_3_init in T.grid(T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(16), T.int64(1), T.int64(1), T.int64(7), T.int64(1), T.int64(1)):
                    with T.block("conv2d_NCHWc_init"):
                        v_n = T.axis.spatial(T.int64(1), n_2_init + n_3_init)
                        v_oc_chunk = T.axis.spatial(T.int64(32), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_fused_fused // T.int64(14) + oc_chunk_2_init + oc_chunk_3_init)
                        v_oh = T.axis.spatial(T.int64(14), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_fused_fused % T.int64(14) // T.int64(7) * T.int64(7) + oh_2_init * T.int64(7) + oh_3_init)
                        v_ow = T.axis.spatial(T.int64(14), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_fused_fused % T.int64(7) * T.int64(2) + ow_2_init + ow_3_init)
                        v_oc_block = T.axis.spatial(T.int64(16), oc_block_1 * T.int64(16) + oc_block_2_init + oc_block_3_init)
                        T.reads()
                        T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                        T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                        conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = T.float32(0)
                for ic_0, kh_0, kw_0, n_2, oc_chunk_2, oh_2, ow_2, oc_block_2, ic_1, kh_1, kw_1, n_3, oc_chunk_3, oh_3, ow_3, oc_block_3 in T.grid(T.int64(512), T.int64(1), T.int64(3), T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(16), T.int64(1), T.int64(3), T.int64(1), T.int64(1), T.int64(1), T.int64(7), T.int64(1), T.int64(1)):
                    with T.block("conv2d_NCHWc_update"):
                        v_n = T.axis.spatial(T.int64(1), n_2 + n_3)
                        v_oc_chunk = T.axis.spatial(T.int64(32), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_fused_fused // T.int64(14) + oc_chunk_2 + oc_chunk_3)
                        v_oh = T.axis.spatial(T.int64(14), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_fused_fused % T.int64(14) // T.int64(7) * T.int64(7) + oh_2 * T.int64(7) + oh_3)
                        v_ow = T.axis.spatial(T.int64(14), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_fused_fused % T.int64(7) * T.int64(2) + ow_2 + ow_3)
                        v_oc_block = T.axis.spatial(T.int64(16), oc_block_1 * T.int64(16) + oc_block_2 + oc_block_3)
                        v_ic = T.axis.reduce(T.int64(512), ic_0 + ic_1)
                        v_kh = T.axis.reduce(T.int64(3), kh_0 * T.int64(3) + kh_1)
                        v_kw = T.axis.reduce(T.int64(3), kw_0 + kw_1)
                        T.reads(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block], data_pad[v_n, v_ic // T.int64(512), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(512)], p1[v_oc_chunk, v_ic // T.int64(512), v_kh, v_kw, v_ic % T.int64(512), v_oc_block])
                        T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                        T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                        conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] + data_pad[v_n, v_ic // T.int64(512), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(512)] * p1[v_oc_chunk, v_ic // T.int64(512), v_kh, v_kw, v_ic % T.int64(512), v_oc_block]
                for ax0, ax1, ax2 in T.grid(T.int64(1), T.int64(1), T.int64(7)):
                    for ax3_ax4_fused in T.vectorized(T.int64(32)):
                        with T.block("T_relu"):
                            v_ax0 = T.axis.spatial(T.int64(1), ax0)
                            v_ax1 = T.axis.spatial(T.int64(32), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_fused_fused // T.int64(14) + ax1)
                            v_ax2 = T.axis.spatial(T.int64(14), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_fused_fused % T.int64(14) // T.int64(7) * T.int64(7) + ax2)
                            v_ax3 = T.axis.spatial(T.int64(14), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_fused_fused % T.int64(7) * T.int64(2) + ax3_ax4_fused // T.int64(16))
                            v_ax4 = T.axis.spatial(T.int64(16), ax3_ax4_fused % T.int64(16))
                            T.reads(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4])
                            T.writes(T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                            T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.max(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] + p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4], T.float32(0))
b0 = sch.get_block(name="data_pad", func_name="main")
b1 = sch.get_block(name="conv2d_NCHWc", func_name="main")
b2 = sch.get_block(name="T_add", func_name="main")
b3 = sch.get_block(name="root", func_name="main")
sch.compute_inline(block=b2)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSRSRS")
l4, l5, l6, l7, l8, l9, l10, l11 = sch.get_loops(block=b1)
v12, v13, v14, v15 = sch.sample_perfect_tile(loop=l4, n=4, max_innermost_factor=64, decision=[1, 1, 1, 1])
l16, l17, l18, l19 = sch.split(loop=l4, factors=[v12, v13, v14, v15], preserve_unit_iters=True)
v20, v21, v22, v23 = sch.sample_perfect_tile(loop=l5, n=4, max_innermost_factor=64, decision=[4, 8, 1, 1])
l24, l25, l26, l27 = sch.split(loop=l5, factors=[v20, v21, v22, v23], preserve_unit_iters=True)
v28, v29, v30, v31 = sch.sample_perfect_tile(loop=l6, n=4, max_innermost_factor=64, decision=[1, 2, 1, 7])
l32, l33, l34, l35 = sch.split(loop=l6, factors=[v28, v29, v30, v31], preserve_unit_iters=True)
v36, v37, v38, v39 = sch.sample_perfect_tile(loop=l7, n=4, max_innermost_factor=64, decision=[1, 7, 2, 1])
l40, l41, l42, l43 = sch.split(loop=l7, factors=[v36, v37, v38, v39], preserve_unit_iters=True)
v44, v45, v46, v47 = sch.sample_perfect_tile(loop=l8, n=4, max_innermost_factor=64, decision=[1, 1, 16, 1])
l48, l49, l50, l51 = sch.split(loop=l8, factors=[v44, v45, v46, v47], preserve_unit_iters=True)
v52, v53 = sch.sample_perfect_tile(loop=l9, n=2, max_innermost_factor=64, decision=[512, 1])
l54, l55 = sch.split(loop=l9, factors=[v52, v53], preserve_unit_iters=True)
v56, v57 = sch.sample_perfect_tile(loop=l10, n=2, max_innermost_factor=64, decision=[1, 3])
l58, l59 = sch.split(loop=l10, factors=[v56, v57], preserve_unit_iters=True)
v60, v61 = sch.sample_perfect_tile(loop=l11, n=2, max_innermost_factor=64, decision=[3, 1])
l62, l63 = sch.split(loop=l11, factors=[v60, v61], preserve_unit_iters=True)
sch.reorder(l16, l24, l32, l40, l48, l17, l25, l33, l41, l49, l54, l58, l62, l18, l26, l34, l42, l50, l55, l59, l63, l19, l27, l35, l43, l51)
b64, = sch.get_consumers(block=b1)
sch.reverse_compute_at(block=b64, loop=l49, preserve_unit_loops=True, index=-1)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.vectorize", ann_val=64)
v65 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.unroll_explicit", ann_val=v65)
l66 = sch.sample_compute_location(block=b0, decision=8)
sch.compute_at(block=b0, loop=l66, preserve_unit_loops=True, index=-1)
sch.enter_postproc()
b67 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b67, ann_key="meta_schedule.parallel")
sch.unannotate(block_or_loop=b67, ann_key="meta_schedule.vectorize")
sch.unannotate(block_or_loop=b67, ann_key="meta_schedule.unroll_explicit")
b68, b69, b70 = sch.get_child_blocks(b67)
l71, l72, l73, l74, l75, l76, l77, l78, l79, l80, l81, l82, l83, l84 = sch.get_loops(block=b68)
l85 = sch.fuse(l71, l72, l73, l74, l75, l76, l77, l78, l79, preserve_unit_iters=True)
sch.parallel(loop=l85)
l86, l87, l88, l89, l90, l91, l92, l93, l94, l95, l96, l97, l98, l99, l100, l101, l102, l103 = sch.get_loops(block=b69)
l104 = sch.fuse(l86, preserve_unit_iters=True)
sch.parallel(loop=l104)
sch.annotate(block_or_loop=l104, ann_key="pragma_auto_unroll_max_step", ann_val=512)
sch.annotate(block_or_loop=l104, ann_key="pragma_unroll_explicit", ann_val=1)
l105, l106, l107, l108, l109, l110, l111 = sch.get_loops(block=b70)
l112 = sch.fuse(l110, l111, preserve_unit_iters=True)
sch.vectorize(loop=l112)
b113 = sch.get_block(name="conv2d_NCHWc", func_name="main")
l114, l115, l116, l117, l118, l119, l120, l121, l122, l123, l124, l125, l126, l127, l128, l129, l130, l131 = sch.get_loops(block=b113)
b132 = sch.decompose_reduction(block=b113, loop=l116)
2024-04-28 12:54:53 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #672: GFLOPs: 523.3878. Time: 1767.4175 us. Best GFLOPs: 689.9496
2024-04-28 12:54:53 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #673: GFLOPs: 443.1799. Time: 2087.2897 us. Best GFLOPs: 689.9496
2024-04-28 12:54:53 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #674: GFLOPs: 494.2632. Time: 1871.5630 us. Best GFLOPs: 689.9496
2024-04-28 12:54:53 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #675: GFLOPs: 535.8313. Time: 1726.3731 us. Best GFLOPs: 689.9496
2024-04-28 12:54:53 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #676: GFLOPs: 519.8073. Time: 1779.5917 us. Best GFLOPs: 689.9496
2024-04-28 12:54:53 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #677: GFLOPs: 542.5164. Time: 1705.1000 us. Best GFLOPs: 689.9496
2024-04-28 12:54:53 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #678: GFLOPs: 112.2686. Time: 8239.5652 us. Best GFLOPs: 689.9496
2024-04-28 12:54:53 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #679: GFLOPs: 525.7831. Time: 1759.3658 us. Best GFLOPs: 689.9496
2024-04-28 12:54:53 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #680: GFLOPs: 136.7380. Time: 6765.0885 us. Best GFLOPs: 689.9496
2024-04-28 12:54:53 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #681: GFLOPs: 136.2300. Time: 6790.3157 us. Best GFLOPs: 689.9496
2024-04-28 12:54:53 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #682: GFLOPs: 521.7537. Time: 1772.9530 us. Best GFLOPs: 689.9496
2024-04-28 12:54:53 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #683: GFLOPs: 512.2136. Time: 1805.9747 us. Best GFLOPs: 689.9496
2024-04-28 12:54:53 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #684: GFLOPs: 499.7788. Time: 1850.9083 us. Best GFLOPs: 689.9496
2024-04-28 12:54:53 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #685: GFLOPs: 500.3567. Time: 1848.7707 us. Best GFLOPs: 689.9496
2024-04-28 12:54:53 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #686: GFLOPs: 550.0122. Time: 1681.8623 us. Best GFLOPs: 689.9496
2024-04-28 12:54:53 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #687: GFLOPs: 606.8160. Time: 1524.4238 us. Best GFLOPs: 689.9496
2024-04-28 12:54:53 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #688: GFLOPs: 546.8090. Time: 1691.7147 us. Best GFLOPs: 689.9496
2024-04-28 12:54:53 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #689: GFLOPs: 466.1133. Time: 1984.5918 us. Best GFLOPs: 689.9496
2024-04-28 12:54:53 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #690: GFLOPs: 506.1501. Time: 1827.6096 us. Best GFLOPs: 689.9496
2024-04-28 12:54:53 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #691: GFLOPs: 155.8720. Time: 5934.6445 us. Best GFLOPs: 689.9496
2024-04-28 12:54:53 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #692: GFLOPs: 491.2084. Time: 1883.2023 us. Best GFLOPs: 689.9496
2024-04-28 12:54:53 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #693: GFLOPs: 537.4570. Time: 1721.1512 us. Best GFLOPs: 689.9496
2024-04-28 12:54:53 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #694: GFLOPs: 526.2290. Time: 1757.8748 us. Best GFLOPs: 689.9496
2024-04-28 12:54:53 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #695: GFLOPs: 509.9333. Time: 1814.0503 us. Best GFLOPs: 689.9496
2024-04-28 12:54:53 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #696: GFLOPs: 506.2628. Time: 1827.2025 us. Best GFLOPs: 689.9496
2024-04-28 12:54:53 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #697: GFLOPs: 92.5008. Time: 10000.3981 us. Best GFLOPs: 689.9496
2024-04-28 12:54:53 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #698: GFLOPs: 106.3284. Time: 8699.8858 us. Best GFLOPs: 689.9496
2024-04-28 12:54:53 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #699: GFLOPs: 482.5104. Time: 1917.1498 us. Best GFLOPs: 689.9496
2024-04-28 12:54:53 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #700: GFLOPs: 484.6978. Time: 1908.4978 us. Best GFLOPs: 689.9496
2024-04-28 12:54:53 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #701: GFLOPs: 457.9346. Time: 2020.0369 us. Best GFLOPs: 689.9496
2024-04-28 12:54:53 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #702: GFLOPs: 0.7263. Time: 1273712.9347 us. Best GFLOPs: 689.9496
2024-04-28 12:54:53 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #703: GFLOPs: 1.2207. Time: 757769.8630 us. Best GFLOPs: 689.9496
2024-04-28 12:54:53 [INFO] [task_scheduler.cc:121] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #704: Error in building:
LocalBuilder: Timeout, killed after 30.0 seconds
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(1), T.int64(14), T.int64(14), T.int64(512)), "float32"), p1: T.Buffer((T.int64(32), T.int64(1), T.int64(3), T.int64(3), T.int64(512), T.int64(16)), "float32"), p2: T.Buffer((T.int64(1), T.int64(32), T.int64(1), T.int64(1), T.int64(16)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(32), T.int64(14), T.int64(14), T.int64(16)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        data_pad = T.alloc_buffer((T.int64(1), T.int64(1), T.int64(16), T.int64(16), T.int64(512)))
        conv2d_NCHWc = T.alloc_buffer((T.int64(1), T.int64(32), T.int64(14), T.int64(14), T.int64(16)))
        for n_0_oc_chunk_0_fused_fused in T.parallel(T.int64(2), annotations={"pragma_auto_unroll_max_step": 512, "pragma_unroll_explicit": 1}):
            for ax0, ax1, ax2, ax3, ax4 in T.grid(T.int64(1), T.int64(1), T.int64(16), T.int64(16), T.int64(512)):
                with T.block("data_pad"):
                    v_i0, v_i1, v_i2, v_i3, v_i4 = T.axis.remap("SSSSS", [ax0, ax1, ax2, ax3, ax4])
                    T.reads(p0[v_i0, v_i1, v_i2 - T.int64(1), v_i3 - T.int64(1), v_i4])
                    T.writes(data_pad[v_i0, v_i1, v_i2, v_i3, v_i4])
                    data_pad[v_i0, v_i1, v_i2, v_i3, v_i4] = T.if_then_else(T.int64(1) <= v_i2 and v_i2 < T.int64(15) and T.int64(1) <= v_i3 and v_i3 < T.int64(15), p0[v_i0, v_i1, v_i2 - T.int64(1), v_i3 - T.int64(1), v_i4], T.float32(0))
            for oh_0, ow_0, oc_block_0, n_1, oc_chunk_1, oh_1, ow_1, oc_block_1 in T.grid(T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(8)):
                for n_2_init, oc_chunk_2_init, oh_2_init, ow_2_init, oc_block_2_init, n_3_init, oc_chunk_3_init, oh_3_init, ow_3_init, oc_block_3_init in T.grid(T.int64(1), T.int64(4), T.int64(14), T.int64(2), T.int64(2), T.int64(1), T.int64(4), T.int64(1), T.int64(7), T.int64(1)):
                    with T.block("conv2d_NCHWc_init"):
                        v_n = T.axis.spatial(T.int64(1), n_1 + n_2_init + n_3_init)
                        v_oc_chunk = T.axis.spatial(T.int64(32), n_0_oc_chunk_0_fused_fused * T.int64(16) + oc_chunk_1 * T.int64(16) + oc_chunk_2_init * T.int64(4) + oc_chunk_3_init)
                        v_oh = T.axis.spatial(T.int64(14), oh_0 * T.int64(14) + oh_1 * T.int64(14) + oh_2_init + oh_3_init)
                        v_ow = T.axis.spatial(T.int64(14), ow_0 * T.int64(14) + ow_1 * T.int64(14) + ow_2_init * T.int64(7) + ow_3_init)
                        v_oc_block = T.axis.spatial(T.int64(16), oc_block_0 * T.int64(16) + oc_block_1 * T.int64(2) + oc_block_2_init + oc_block_3_init)
                        T.reads()
                        T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                        T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                        conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = T.float32(0)
                for ic_0, kh_0, kw_0, n_2, oc_chunk_2, oh_2, ow_2, oc_block_2, ic_1, kh_1, kw_1, n_3, oc_chunk_3, oh_3, ow_3, oc_block_3 in T.grid(T.int64(128), T.int64(3), T.int64(1), T.int64(1), T.int64(4), T.int64(14), T.int64(2), T.int64(2), T.int64(4), T.int64(1), T.int64(3), T.int64(1), T.int64(4), T.int64(1), T.int64(7), T.int64(1)):
                    with T.block("conv2d_NCHWc_update"):
                        v_n = T.axis.spatial(T.int64(1), n_1 + n_2 + n_3)
                        v_oc_chunk = T.axis.spatial(T.int64(32), n_0_oc_chunk_0_fused_fused * T.int64(16) + oc_chunk_1 * T.int64(16) + oc_chunk_2 * T.int64(4) + oc_chunk_3)
                        v_oh = T.axis.spatial(T.int64(14), oh_0 * T.int64(14) + oh_1 * T.int64(14) + oh_2 + oh_3)
                        v_ow = T.axis.spatial(T.int64(14), ow_0 * T.int64(14) + ow_1 * T.int64(14) + ow_2 * T.int64(7) + ow_3)
                        v_oc_block = T.axis.spatial(T.int64(16), oc_block_0 * T.int64(16) + oc_block_1 * T.int64(2) + oc_block_2 + oc_block_3)
                        v_ic = T.axis.reduce(T.int64(512), ic_0 * T.int64(4) + ic_1)
                        v_kh = T.axis.reduce(T.int64(3), kh_0 + kh_1)
                        v_kw = T.axis.reduce(T.int64(3), kw_0 * T.int64(3) + kw_1)
                        T.reads(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block], data_pad[v_n, v_ic // T.int64(512), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(512)], p1[v_oc_chunk, v_ic // T.int64(512), v_kh, v_kw, v_ic % T.int64(512), v_oc_block])
                        T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                        T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                        conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] + data_pad[v_n, v_ic // T.int64(512), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(512)] * p1[v_oc_chunk, v_ic // T.int64(512), v_kh, v_kw, v_ic % T.int64(512), v_oc_block]
        for ax0_ax1_ax2_ax3_ax4_fused_0 in T.parallel(T.int64(1568)):
            for ax0_ax1_ax2_ax3_ax4_fused_1 in T.vectorized(T.int64(64)):
                with T.block("T_relu"):
                    v_ax0 = T.axis.spatial(T.int64(1), T.int64(0))
                    v_ax1 = T.axis.spatial(T.int64(32), (ax0_ax1_ax2_ax3_ax4_fused_0 * T.int64(64) + ax0_ax1_ax2_ax3_ax4_fused_1) // T.int64(3136))
                    v_ax2 = T.axis.spatial(T.int64(14), (ax0_ax1_ax2_ax3_ax4_fused_0 * T.int64(64) + ax0_ax1_ax2_ax3_ax4_fused_1) % T.int64(3136) // T.int64(224))
                    v_ax3 = T.axis.spatial(T.int64(14), (ax0_ax1_ax2_ax3_ax4_fused_0 * T.int64(64) + ax0_ax1_ax2_ax3_ax4_fused_1) % T.int64(224) // T.int64(16))
                    v_ax4 = T.axis.spatial(T.int64(16), (ax0_ax1_ax2_ax3_ax4_fused_0 * T.int64(64) + ax0_ax1_ax2_ax3_ax4_fused_1) % T.int64(16))
                    T.reads(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4])
                    T.writes(T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                    T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.max(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] + p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4], T.float32(0))
b0 = sch.get_block(name="data_pad", func_name="main")
b1 = sch.get_block(name="conv2d_NCHWc", func_name="main")
b2 = sch.get_block(name="T_add", func_name="main")
b3 = sch.get_block(name="root", func_name="main")
sch.compute_inline(block=b2)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSRSRS")
l4, l5, l6, l7, l8, l9, l10, l11 = sch.get_loops(block=b1)
v12, v13, v14, v15 = sch.sample_perfect_tile(loop=l4, n=4, max_innermost_factor=64, decision=[1, 1, 1, 1])
l16, l17, l18, l19 = sch.split(loop=l4, factors=[v12, v13, v14, v15], preserve_unit_iters=True)
v20, v21, v22, v23 = sch.sample_perfect_tile(loop=l5, n=4, max_innermost_factor=64, decision=[2, 1, 4, 4])
l24, l25, l26, l27 = sch.split(loop=l5, factors=[v20, v21, v22, v23], preserve_unit_iters=True)
v28, v29, v30, v31 = sch.sample_perfect_tile(loop=l6, n=4, max_innermost_factor=64, decision=[1, 1, 14, 1])
l32, l33, l34, l35 = sch.split(loop=l6, factors=[v28, v29, v30, v31], preserve_unit_iters=True)
v36, v37, v38, v39 = sch.sample_perfect_tile(loop=l7, n=4, max_innermost_factor=64, decision=[1, 1, 2, 7])
l40, l41, l42, l43 = sch.split(loop=l7, factors=[v36, v37, v38, v39], preserve_unit_iters=True)
v44, v45, v46, v47 = sch.sample_perfect_tile(loop=l8, n=4, max_innermost_factor=64, decision=[1, 8, 2, 1])
l48, l49, l50, l51 = sch.split(loop=l8, factors=[v44, v45, v46, v47], preserve_unit_iters=True)
v52, v53 = sch.sample_perfect_tile(loop=l9, n=2, max_innermost_factor=64, decision=[128, 4])
l54, l55 = sch.split(loop=l9, factors=[v52, v53], preserve_unit_iters=True)
v56, v57 = sch.sample_perfect_tile(loop=l10, n=2, max_innermost_factor=64, decision=[3, 1])
l58, l59 = sch.split(loop=l10, factors=[v56, v57], preserve_unit_iters=True)
v60, v61 = sch.sample_perfect_tile(loop=l11, n=2, max_innermost_factor=64, decision=[1, 3])
l62, l63 = sch.split(loop=l11, factors=[v60, v61], preserve_unit_iters=True)
sch.reorder(l16, l24, l32, l40, l48, l17, l25, l33, l41, l49, l54, l58, l62, l18, l26, l34, l42, l50, l55, l59, l63, l19, l27, l35, l43, l51)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.vectorize", ann_val=64)
v64 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.unroll_explicit", ann_val=v64)
l65 = sch.sample_compute_location(block=b0, decision=1)
sch.compute_at(block=b0, loop=l65, preserve_unit_loops=True, index=-1)
sch.enter_postproc()
b66 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b66, ann_key="meta_schedule.parallel")
sch.unannotate(block_or_loop=b66, ann_key="meta_schedule.vectorize")
sch.unannotate(block_or_loop=b66, ann_key="meta_schedule.unroll_explicit")
b67, b68, b69 = sch.get_child_blocks(b66)
l70, l71, l72, l73, l74, l75, l76 = sch.get_loops(block=b67)
l77 = sch.fuse(l70, l71, preserve_unit_iters=True)
sch.parallel(loop=l77)
l78, l79, l80, l81, l82, l83, l84, l85, l86, l87, l88, l89, l90, l91, l92, l93, l94, l95, l96, l97, l98, l99, l100, l101, l102 = sch.get_loops(block=b68)
l103 = sch.fuse(l78, preserve_unit_iters=True)
sch.parallel(loop=l103)
sch.annotate(block_or_loop=l103, ann_key="pragma_auto_unroll_max_step", ann_val=512)
sch.annotate(block_or_loop=l103, ann_key="pragma_unroll_explicit", ann_val=1)
l104, l105, l106, l107, l108 = sch.get_loops(block=b69)
l109 = sch.fuse(l104, l105, l106, l107, l108, preserve_unit_iters=True)
l110, l111 = sch.split(loop=l109, factors=[None, 64], preserve_unit_iters=True)
sch.parallel(loop=l110)
sch.vectorize(loop=l111)
b112 = sch.get_block(name="conv2d_NCHWc", func_name="main")
l113, l114, l115, l116, l117, l118, l119, l120, l121, l122, l123, l124, l125, l126, l127, l128, l129, l130, l131, l132, l133, l134, l135, l136, l137 = sch.get_loops(block=b112)
b138 = sch.decompose_reduction(block=b112, loop=l122)
2024-04-28 13:20:30 [INFO] [evolutionary_search.cc:713] Generating candidates......
2024-04-28 13:20:31 [INFO] [evolutionary_search.cc:715] Picked top 102 candidate(s) from database
2024-04-28 13:20:36 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x3861aa8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x37d26b8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x4dd4148)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x3201bb8)]: 0 failure(s)
2024-04-28 13:20:36 [INFO] [evolutionary_search.cc:723] Sampled 410 candidate(s)
2024-04-28 13:20:47 [INFO] [evolutionary_search.cc:621] Evolve iter #0 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x3861aa8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x37d26b8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x4dd4148)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x3201bb8)]: 0 failure(s)
2024-04-28 13:20:59 [INFO] [evolutionary_search.cc:621] Evolve iter #1 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x3861aa8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x37d26b8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x4dd4148)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x3201bb8)]: 0 failure(s)
2024-04-28 13:21:11 [INFO] [evolutionary_search.cc:621] Evolve iter #2 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x3861aa8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x37d26b8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x4dd4148)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x3201bb8)]: 0 failure(s)
2024-04-28 13:21:23 [INFO] [evolutionary_search.cc:621] Evolve iter #3 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x3861aa8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x37d26b8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x4dd4148)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x3201bb8)]: 0 failure(s)
2024-04-28 13:21:30 [INFO] [evolutionary_search.cc:649] Scores of the best 64 candidates:
[1 : 16]:	0.9493  0.9431  0.9190  0.8992  0.8890  0.8890  0.8743  0.8743  0.8541  0.8541  0.8364  0.8320  0.8289  0.8288  0.8213  0.8181
[17 : 32]:	0.8175  0.8167  0.8141  0.8141  0.8137  0.8053  0.8051  0.8047  0.8014  0.8014  0.8009  0.7999  0.7942  0.7770  0.7746  0.7732
[33 : 48]:	0.7729  0.7722  0.7712  0.7698  0.7673  0.7670  0.7650  0.7636  0.7616  0.7616  0.7591  0.7591  0.7588  0.7588  0.7588  0.7588
[49 : 64]:	0.7583  0.7567  0.7565  0.7563  0.7558  0.7520  0.7481  0.7452  0.7442  0.7442  0.7427  0.7420  0.7406  0.7406  0.7397  0.7396
2024-04-28 13:21:31 [INFO] [evolutionary_search.cc:727] Got 64 candidate(s) with evolutionary search
2024-04-28 13:21:31 [INFO] [evolutionary_search.cc:730] Sending 64 candidates(s) for measurement
2024-04-28 13:23:23 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #705: GFLOPs: 624.2439. Time: 1481.8642 us. Best GFLOPs: 689.9496
2024-04-28 13:23:23 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #706: GFLOPs: 696.1343. Time: 1328.8308 us. Best GFLOPs: 696.1343
2024-04-28 13:23:23 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #707: GFLOPs: 654.9444. Time: 1412.4019 us. Best GFLOPs: 696.1343
2024-04-28 13:23:23 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #708: GFLOPs: 647.5140. Time: 1428.6096 us. Best GFLOPs: 696.1343
2024-04-28 13:23:23 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #709: GFLOPs: 650.1741. Time: 1422.7646 us. Best GFLOPs: 696.1343
2024-04-28 13:23:23 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #710: GFLOPs: 663.1198. Time: 1394.9889 us. Best GFLOPs: 696.1343
2024-04-28 13:23:23 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #711: GFLOPs: 657.2955. Time: 1407.3498 us. Best GFLOPs: 696.1343
2024-04-28 13:23:23 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #712: GFLOPs: 638.5954. Time: 1448.5615 us. Best GFLOPs: 696.1343
2024-04-28 13:23:23 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #713: GFLOPs: 482.0316. Time: 1919.0543 us. Best GFLOPs: 696.1343
2024-04-28 13:23:23 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #714: GFLOPs: 600.4252. Time: 1540.6494 us. Best GFLOPs: 696.1343
2024-04-28 13:23:23 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #715: GFLOPs: 635.6005. Time: 1455.3870 us. Best GFLOPs: 696.1343
2024-04-28 13:23:23 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #716: GFLOPs: 567.9388. Time: 1628.7755 us. Best GFLOPs: 696.1343
2024-04-28 13:23:23 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #717: GFLOPs: 544.1035. Time: 1700.1263 us. Best GFLOPs: 696.1343
2024-04-28 13:23:23 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #718: GFLOPs: 550.1621. Time: 1681.4038 us. Best GFLOPs: 696.1343
2024-04-28 13:23:23 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #719: GFLOPs: 546.1113. Time: 1693.8759 us. Best GFLOPs: 696.1343
2024-04-28 13:23:23 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #720: GFLOPs: 490.4251. Time: 1886.2101 us. Best GFLOPs: 696.1343
2024-04-28 13:23:23 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #721: GFLOPs: 585.8495. Time: 1578.9802 us. Best GFLOPs: 696.1343
2024-04-28 13:23:23 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #722: GFLOPs: 563.1788. Time: 1642.5418 us. Best GFLOPs: 696.1343
2024-04-28 13:23:23 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #723: GFLOPs: 486.5445. Time: 1901.2541 us. Best GFLOPs: 696.1343
2024-04-28 13:23:23 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #724: GFLOPs: 580.5620. Time: 1593.3608 us. Best GFLOPs: 696.1343
2024-04-28 13:23:23 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #725: GFLOPs: 521.3895. Time: 1774.1914 us. Best GFLOPs: 696.1343
2024-04-28 13:23:23 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #726: GFLOPs: 479.0158. Time: 1931.1361 us. Best GFLOPs: 696.1343
2024-04-28 13:23:23 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #727: GFLOPs: 555.8222. Time: 1664.2816 us. Best GFLOPs: 696.1343
2024-04-28 13:23:23 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #728: GFLOPs: 501.4776. Time: 1844.6382 us. Best GFLOPs: 696.1343
2024-04-28 13:23:23 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #729: GFLOPs: 382.2411. Time: 2420.0557 us. Best GFLOPs: 696.1343
2024-04-28 13:23:23 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #730: GFLOPs: 382.6573. Time: 2417.4238 us. Best GFLOPs: 696.1343
2024-04-28 13:23:23 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #731: GFLOPs: 609.8280. Time: 1516.8944 us. Best GFLOPs: 696.1343
2024-04-28 13:23:23 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #732: GFLOPs: 604.4609. Time: 1530.3633 us. Best GFLOPs: 696.1343
2024-04-28 13:23:23 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #733: GFLOPs: 525.8805. Time: 1759.0399 us. Best GFLOPs: 696.1343
2024-04-28 13:23:23 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #734: GFLOPs: 572.1956. Time: 1616.6583 us. Best GFLOPs: 696.1343
2024-04-28 13:23:23 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #735: GFLOPs: 529.1545. Time: 1748.1563 us. Best GFLOPs: 696.1343
2024-04-28 13:23:23 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #736: GFLOPs: 531.6162. Time: 1740.0613 us. Best GFLOPs: 696.1343
2024-04-28 13:23:23 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #737: GFLOPs: 558.3675. Time: 1656.6951 us. Best GFLOPs: 696.1343
2024-04-28 13:23:23 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #738: GFLOPs: 530.2493. Time: 1744.5467 us. Best GFLOPs: 696.1343
2024-04-28 13:23:23 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #739: GFLOPs: 483.8056. Time: 1912.0174 us. Best GFLOPs: 696.1343
2024-04-28 13:23:23 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #740: GFLOPs: 495.4992. Time: 1866.8945 us. Best GFLOPs: 696.1343
2024-04-28 13:23:23 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #741: GFLOPs: 424.4065. Time: 2179.6197 us. Best GFLOPs: 696.1343
2024-04-28 13:23:23 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #742: GFLOPs: 492.6686. Time: 1877.6206 us. Best GFLOPs: 696.1343
2024-04-28 13:23:23 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #743: GFLOPs: 528.0502. Time: 1751.8121 us. Best GFLOPs: 696.1343
2024-04-28 13:23:23 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #744: GFLOPs: 532.5896. Time: 1736.8811 us. Best GFLOPs: 696.1343
2024-04-28 13:23:23 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #745: GFLOPs: 536.3303. Time: 1724.7667 us. Best GFLOPs: 696.1343
2024-04-28 13:23:23 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #746: GFLOPs: 536.4668. Time: 1724.3281 us. Best GFLOPs: 696.1343
2024-04-28 13:23:23 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #747: GFLOPs: 485.5418. Time: 1905.1805 us. Best GFLOPs: 696.1343
2024-04-28 13:23:23 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #748: GFLOPs: 199.7049. Time: 4632.0590 us. Best GFLOPs: 696.1343
2024-04-28 13:23:23 [INFO] [task_scheduler.cc:121] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #749: Error in building:
LocalBuilder: Timeout, killed after 30.0 seconds
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(1), T.int64(14), T.int64(14), T.int64(512)), "float32"), p1: T.Buffer((T.int64(32), T.int64(1), T.int64(3), T.int64(3), T.int64(512), T.int64(16)), "float32"), p2: T.Buffer((T.int64(1), T.int64(32), T.int64(1), T.int64(1), T.int64(16)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(32), T.int64(14), T.int64(14), T.int64(16)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        data_pad = T.alloc_buffer((T.int64(1), T.int64(1), T.int64(16), T.int64(16), T.int64(512)))
        conv2d_NCHWc = T.alloc_buffer((T.int64(1), T.int64(32), T.int64(14), T.int64(14), T.int64(16)))
        for n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_fused_fused in T.parallel(T.int64(448), annotations={"pragma_auto_unroll_max_step": 512, "pragma_unroll_explicit": 1}):
            for ax0, ax1, ax2, ax3, ax4 in T.grid(T.int64(1), T.int64(1), T.int64(9), T.int64(4), T.int64(512)):
                with T.block("data_pad"):
                    v_i0, v_i1 = T.axis.remap("SS", [ax0, ax1])
                    v_i2 = T.axis.spatial(T.int64(16), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_fused_fused % T.int64(224) // T.int64(112) * T.int64(7) + ax2)
                    v_i3 = T.axis.spatial(T.int64(16), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_fused_fused % T.int64(7) * T.int64(2) + ax3)
                    v_i4 = T.axis.spatial(T.int64(512), ax4)
                    T.reads(p0[v_i0, v_i1, v_i2 - T.int64(1), v_i3 - T.int64(1), v_i4])
                    T.writes(data_pad[v_i0, v_i1, v_i2, v_i3, v_i4])
                    data_pad[v_i0, v_i1, v_i2, v_i3, v_i4] = T.if_then_else(T.int64(1) <= v_i2 and v_i2 < T.int64(15) and T.int64(1) <= v_i3 and v_i3 < T.int64(15), p0[v_i0, v_i1, v_i2 - T.int64(1), v_i3 - T.int64(1), v_i4], T.float32(0))
            for oc_block_1 in range(T.int64(1)):
                for n_2_init, oc_chunk_2_init, oh_2_init, ow_2_init, oc_block_2_init, n_3_init, oc_chunk_3_init, oh_3_init, ow_3_init, oc_block_3_init in T.grid(T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(16), T.int64(1), T.int64(1), T.int64(7), T.int64(1), T.int64(1)):
                    with T.block("conv2d_NCHWc_init"):
                        v_n = T.axis.spatial(T.int64(1), n_2_init + n_3_init)
                        v_oc_chunk = T.axis.spatial(T.int64(32), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_fused_fused // T.int64(224) * T.int64(16) + n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_fused_fused % T.int64(112) // T.int64(7) + oc_chunk_2_init + oc_chunk_3_init)
                        v_oh = T.axis.spatial(T.int64(14), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_fused_fused % T.int64(224) // T.int64(112) * T.int64(7) + oh_2_init * T.int64(7) + oh_3_init)
                        v_ow = T.axis.spatial(T.int64(14), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_fused_fused % T.int64(7) * T.int64(2) + ow_2_init + ow_3_init)
                        v_oc_block = T.axis.spatial(T.int64(16), oc_block_1 * T.int64(16) + oc_block_2_init + oc_block_3_init)
                        T.reads()
                        T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                        T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                        conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = T.float32(0)
                for ic_0, kh_0, kw_0, n_2, oc_chunk_2, oh_2, ow_2, oc_block_2, ic_1, kh_1, kw_1, n_3, oc_chunk_3, oh_3, ow_3, oc_block_3 in T.grid(T.int64(256), T.int64(1), T.int64(3), T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(16), T.int64(2), T.int64(3), T.int64(1), T.int64(1), T.int64(1), T.int64(7), T.int64(1), T.int64(1)):
                    with T.block("conv2d_NCHWc_update"):
                        v_n = T.axis.spatial(T.int64(1), n_2 + n_3)
                        v_oc_chunk = T.axis.spatial(T.int64(32), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_fused_fused // T.int64(224) * T.int64(16) + n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_fused_fused % T.int64(112) // T.int64(7) + oc_chunk_2 + oc_chunk_3)
                        v_oh = T.axis.spatial(T.int64(14), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_fused_fused % T.int64(224) // T.int64(112) * T.int64(7) + oh_2 * T.int64(7) + oh_3)
                        v_ow = T.axis.spatial(T.int64(14), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_fused_fused % T.int64(7) * T.int64(2) + ow_2 + ow_3)
                        v_oc_block = T.axis.spatial(T.int64(16), oc_block_1 * T.int64(16) + oc_block_2 + oc_block_3)
                        v_ic = T.axis.reduce(T.int64(512), ic_0 * T.int64(2) + ic_1)
                        v_kh = T.axis.reduce(T.int64(3), kh_0 * T.int64(3) + kh_1)
                        v_kw = T.axis.reduce(T.int64(3), kw_0 + kw_1)
                        T.reads(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block], data_pad[v_n, v_ic // T.int64(512), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(512)], p1[v_oc_chunk, v_ic // T.int64(512), v_kh, v_kw, v_ic % T.int64(512), v_oc_block])
                        T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                        T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                        conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] + data_pad[v_n, v_ic // T.int64(512), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(512)] * p1[v_oc_chunk, v_ic // T.int64(512), v_kh, v_kw, v_ic % T.int64(512), v_oc_block]
                for ax0, ax1, ax2 in T.grid(T.int64(1), T.int64(1), T.int64(7)):
                    for ax3_ax4_fused in T.vectorized(T.int64(32)):
                        with T.block("T_relu"):
                            v_ax0 = T.axis.spatial(T.int64(1), ax0)
                            v_ax1 = T.axis.spatial(T.int64(32), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_fused_fused // T.int64(224) * T.int64(16) + n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_fused_fused % T.int64(112) // T.int64(7) + ax1)
                            v_ax2 = T.axis.spatial(T.int64(14), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_fused_fused % T.int64(224) // T.int64(112) * T.int64(7) + ax2)
                            v_ax3 = T.axis.spatial(T.int64(14), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_fused_fused % T.int64(7) * T.int64(2) + ax3_ax4_fused // T.int64(16))
                            v_ax4 = T.axis.spatial(T.int64(16), ax3_ax4_fused % T.int64(16))
                            T.reads(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4])
                            T.writes(T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                            T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.max(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] + p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4], T.float32(0))
b0 = sch.get_block(name="data_pad", func_name="main")
b1 = sch.get_block(name="conv2d_NCHWc", func_name="main")
b2 = sch.get_block(name="T_add", func_name="main")
b3 = sch.get_block(name="root", func_name="main")
sch.compute_inline(block=b2)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSRSRS")
l4, l5, l6, l7, l8, l9, l10, l11 = sch.get_loops(block=b1)
v12, v13, v14, v15 = sch.sample_perfect_tile(loop=l4, n=4, max_innermost_factor=64, decision=[1, 1, 1, 1])
l16, l17, l18, l19 = sch.split(loop=l4, factors=[v12, v13, v14, v15], preserve_unit_iters=True)
v20, v21, v22, v23 = sch.sample_perfect_tile(loop=l5, n=4, max_innermost_factor=64, decision=[2, 16, 1, 1])
l24, l25, l26, l27 = sch.split(loop=l5, factors=[v20, v21, v22, v23], preserve_unit_iters=True)
v28, v29, v30, v31 = sch.sample_perfect_tile(loop=l6, n=4, max_innermost_factor=64, decision=[2, 1, 1, 7])
l32, l33, l34, l35 = sch.split(loop=l6, factors=[v28, v29, v30, v31], preserve_unit_iters=True)
v36, v37, v38, v39 = sch.sample_perfect_tile(loop=l7, n=4, max_innermost_factor=64, decision=[1, 7, 2, 1])
l40, l41, l42, l43 = sch.split(loop=l7, factors=[v36, v37, v38, v39], preserve_unit_iters=True)
v44, v45, v46, v47 = sch.sample_perfect_tile(loop=l8, n=4, max_innermost_factor=64, decision=[1, 1, 16, 1])
l48, l49, l50, l51 = sch.split(loop=l8, factors=[v44, v45, v46, v47], preserve_unit_iters=True)
v52, v53 = sch.sample_perfect_tile(loop=l9, n=2, max_innermost_factor=64, decision=[256, 2])
l54, l55 = sch.split(loop=l9, factors=[v52, v53], preserve_unit_iters=True)
v56, v57 = sch.sample_perfect_tile(loop=l10, n=2, max_innermost_factor=64, decision=[1, 3])
l58, l59 = sch.split(loop=l10, factors=[v56, v57], preserve_unit_iters=True)
v60, v61 = sch.sample_perfect_tile(loop=l11, n=2, max_innermost_factor=64, decision=[3, 1])
l62, l63 = sch.split(loop=l11, factors=[v60, v61], preserve_unit_iters=True)
sch.reorder(l16, l24, l32, l40, l48, l17, l25, l33, l41, l49, l54, l58, l62, l18, l26, l34, l42, l50, l55, l59, l63, l19, l27, l35, l43, l51)
b64, = sch.get_consumers(block=b1)
sch.reverse_compute_at(block=b64, loop=l49, preserve_unit_loops=True, index=-1)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.vectorize", ann_val=64)
v65 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.unroll_explicit", ann_val=v65)
l66 = sch.sample_compute_location(block=b0, decision=8)
sch.compute_at(block=b0, loop=l66, preserve_unit_loops=True, index=-1)
sch.enter_postproc()
b67 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b67, ann_key="meta_schedule.parallel")
sch.unannotate(block_or_loop=b67, ann_key="meta_schedule.vectorize")
sch.unannotate(block_or_loop=b67, ann_key="meta_schedule.unroll_explicit")
b68, b69, b70 = sch.get_child_blocks(b67)
l71, l72, l73, l74, l75, l76, l77, l78, l79, l80, l81, l82, l83, l84 = sch.get_loops(block=b68)
l85 = sch.fuse(l71, l72, l73, l74, l75, l76, l77, l78, l79, preserve_unit_iters=True)
sch.parallel(loop=l85)
l86, l87, l88, l89, l90, l91, l92, l93, l94, l95, l96, l97, l98, l99, l100, l101, l102, l103 = sch.get_loops(block=b69)
l104 = sch.fuse(l86, preserve_unit_iters=True)
sch.parallel(loop=l104)
sch.annotate(block_or_loop=l104, ann_key="pragma_auto_unroll_max_step", ann_val=512)
sch.annotate(block_or_loop=l104, ann_key="pragma_unroll_explicit", ann_val=1)
l105, l106, l107, l108, l109, l110, l111 = sch.get_loops(block=b70)
l112 = sch.fuse(l110, l111, preserve_unit_iters=True)
sch.vectorize(loop=l112)
b113 = sch.get_block(name="conv2d_NCHWc", func_name="main")
l114, l115, l116, l117, l118, l119, l120, l121, l122, l123, l124, l125, l126, l127, l128, l129, l130, l131 = sch.get_loops(block=b113)
b132 = sch.decompose_reduction(block=b113, loop=l116)
2024-04-28 13:23:23 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #750: GFLOPs: 476.0284. Time: 1943.2554 us. Best GFLOPs: 696.1343
2024-04-28 13:23:23 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #751: GFLOPs: 237.7256. Time: 3891.2292 us. Best GFLOPs: 696.1343
2024-04-28 13:23:23 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #752: GFLOPs: 485.4933. Time: 1905.3707 us. Best GFLOPs: 696.1343
2024-04-28 13:23:23 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #753: GFLOPs: 590.7246. Time: 1565.9493 us. Best GFLOPs: 696.1343
2024-04-28 13:23:23 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #754: GFLOPs: 142.5465. Time: 6489.4261 us. Best GFLOPs: 696.1343
2024-04-28 13:23:23 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #755: GFLOPs: 564.1440. Time: 1639.7315 us. Best GFLOPs: 696.1343
2024-04-28 13:23:23 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #756: GFLOPs: 383.0264. Time: 2415.0941 us. Best GFLOPs: 696.1343
2024-04-28 13:23:23 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #757: GFLOPs: 505.4395. Time: 1830.1791 us. Best GFLOPs: 696.1343
2024-04-28 13:23:23 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #758: GFLOPs: 492.6338. Time: 1877.7533 us. Best GFLOPs: 696.1343
2024-04-28 13:23:23 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #759: GFLOPs: 525.5403. Time: 1760.1784 us. Best GFLOPs: 696.1343
2024-04-28 13:23:23 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #760: GFLOPs: 408.6080. Time: 2263.8927 us. Best GFLOPs: 696.1343
2024-04-28 13:23:23 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #761: GFLOPs: 462.0481. Time: 2002.0528 us. Best GFLOPs: 696.1343
2024-04-28 13:23:23 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #762: GFLOPs: 461.1399. Time: 2005.9957 us. Best GFLOPs: 696.1343
2024-04-28 13:23:23 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #763: GFLOPs: 266.5343. Time: 3470.6411 us. Best GFLOPs: 696.1343
2024-04-28 13:23:23 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #764: GFLOPs: 434.4690. Time: 2129.1387 us. Best GFLOPs: 696.1343
2024-04-28 13:23:23 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #765: GFLOPs: 391.0248. Time: 2365.6932 us. Best GFLOPs: 696.1343
2024-04-28 13:23:23 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #766: GFLOPs: 31.4414. Time: 29421.2325 us. Best GFLOPs: 696.1343
2024-04-28 13:23:23 [INFO] [task_scheduler.cc:121] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #767: Error in building:
LocalBuilder: Timeout, killed after 30.0 seconds
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(1), T.int64(14), T.int64(14), T.int64(512)), "float32"), p1: T.Buffer((T.int64(32), T.int64(1), T.int64(3), T.int64(3), T.int64(512), T.int64(16)), "float32"), p2: T.Buffer((T.int64(1), T.int64(32), T.int64(1), T.int64(1), T.int64(16)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(32), T.int64(14), T.int64(14), T.int64(16)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        data_pad = T.alloc_buffer((T.int64(1), T.int64(1), T.int64(16), T.int64(16), T.int64(512)))
        conv2d_NCHWc = T.alloc_buffer((T.int64(1), T.int64(32), T.int64(14), T.int64(14), T.int64(16)))
        for n_0_oc_chunk_0_oh_0_ow_0_fused_fused in T.parallel(T.int64(28), annotations={"pragma_auto_unroll_max_step": 512, "pragma_unroll_explicit": 1}):
            for ax0, ax1, ax2, ax3, ax4 in T.grid(T.int64(1), T.int64(1), T.int64(16), T.int64(4), T.int64(512)):
                with T.block("data_pad"):
                    v_i0, v_i1, v_i2 = T.axis.remap("SSS", [ax0, ax1, ax2])
                    v_i3 = T.axis.spatial(T.int64(16), n_0_oc_chunk_0_oh_0_ow_0_fused_fused % T.int64(7) * T.int64(2) + ax3)
                    v_i4 = T.axis.spatial(T.int64(512), ax4)
                    T.reads(p0[v_i0, v_i1, v_i2 - T.int64(1), v_i3 - T.int64(1), v_i4])
                    T.writes(data_pad[v_i0, v_i1, v_i2, v_i3, v_i4])
                    data_pad[v_i0, v_i1, v_i2, v_i3, v_i4] = T.if_then_else(T.int64(1) <= v_i2 and v_i2 < T.int64(15) and T.int64(1) <= v_i3 and v_i3 < T.int64(15), p0[v_i0, v_i1, v_i2 - T.int64(1), v_i3 - T.int64(1), v_i4], T.float32(0))
            for oc_block_0 in range(T.int64(1)):
                for n_1, oc_chunk_1, oh_1, ow_1, oc_block_1 in T.grid(T.int64(1), T.int64(2), T.int64(7), T.int64(1), T.int64(2)):
                    for n_2_init, oc_chunk_2_init, oh_2_init, ow_2_init, oc_block_2_init, n_3_init, oc_chunk_3_init, oh_3_init, ow_3_init in T.grid(T.int64(1), T.int64(1), T.int64(2), T.int64(1), T.int64(1), T.int64(1), T.int64(4), T.int64(1), T.int64(2)):
                        for oc_block_3_fused_init in T.vectorized(T.int64(8)):
                            with T.block("conv2d_NCHWc_init"):
                                v_n = T.axis.spatial(T.int64(1), n_1 + n_2_init + n_3_init)
                                v_oc_chunk = T.axis.spatial(T.int64(32), n_0_oc_chunk_0_oh_0_ow_0_fused_fused // T.int64(7) * T.int64(8) + oc_chunk_1 * T.int64(4) + oc_chunk_2_init * T.int64(4) + oc_chunk_3_init)
                                v_oh = T.axis.spatial(T.int64(14), oh_1 * T.int64(2) + oh_2_init + oh_3_init)
                                v_ow = T.axis.spatial(T.int64(14), n_0_oc_chunk_0_oh_0_ow_0_fused_fused % T.int64(7) * T.int64(2) + ow_1 * T.int64(2) + ow_2_init * T.int64(2) + ow_3_init)
                                v_oc_block = T.axis.spatial(T.int64(16), oc_block_0 * T.int64(16) + oc_block_1 * T.int64(8) + oc_block_2_init * T.int64(8) + oc_block_3_fused_init)
                                T.reads()
                                T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                                T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                                conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = T.float32(0)
                    for ic_0, kh_0, kw_0, n_2, oc_chunk_2, oh_2, ow_2, oc_block_2, ic_1, kh_1, kw_1, n_3, oc_chunk_3, oh_3, ow_3 in T.grid(T.int64(512), T.int64(3), T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(3), T.int64(1), T.int64(4), T.int64(1), T.int64(2)):
                        for oc_block_3_fused in T.vectorized(T.int64(8)):
                            with T.block("conv2d_NCHWc_update"):
                                v_n = T.axis.spatial(T.int64(1), n_1 + n_2 + n_3)
                                v_oc_chunk = T.axis.spatial(T.int64(32), n_0_oc_chunk_0_oh_0_ow_0_fused_fused // T.int64(7) * T.int64(8) + oc_chunk_1 * T.int64(4) + oc_chunk_2 * T.int64(4) + oc_chunk_3)
                                v_oh = T.axis.spatial(T.int64(14), oh_1 * T.int64(2) + oh_2 + oh_3)
                                v_ow = T.axis.spatial(T.int64(14), n_0_oc_chunk_0_oh_0_ow_0_fused_fused % T.int64(7) * T.int64(2) + ow_1 * T.int64(2) + ow_2 * T.int64(2) + ow_3)
                                v_oc_block = T.axis.spatial(T.int64(16), oc_block_0 * T.int64(16) + oc_block_1 * T.int64(8) + oc_block_2 * T.int64(8) + oc_block_3_fused)
                                v_ic = T.axis.reduce(T.int64(512), ic_0 + ic_1)
                                v_kh = T.axis.reduce(T.int64(3), kh_0 + kh_1)
                                v_kw = T.axis.reduce(T.int64(3), kw_0 * T.int64(3) + kw_1)
                                T.reads(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block], data_pad[v_n, v_ic // T.int64(512), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(512)], p1[v_oc_chunk, v_ic // T.int64(512), v_kh, v_kw, v_ic % T.int64(512), v_oc_block])
                                T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                                T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                                conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] + data_pad[v_n, v_ic // T.int64(512), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(512)] * p1[v_oc_chunk, v_ic // T.int64(512), v_kh, v_kw, v_ic % T.int64(512), v_oc_block]
                for ax0, ax1, ax2 in T.grid(T.int64(1), T.int64(8), T.int64(14)):
                    for ax3_ax4_fused in T.vectorized(T.int64(32)):
                        with T.block("T_relu"):
                            v_ax0 = T.axis.spatial(T.int64(1), ax0)
                            v_ax1 = T.axis.spatial(T.int64(32), n_0_oc_chunk_0_oh_0_ow_0_fused_fused // T.int64(7) * T.int64(8) + ax1)
                            v_ax2 = T.axis.spatial(T.int64(14), ax2)
                            v_ax3 = T.axis.spatial(T.int64(14), n_0_oc_chunk_0_oh_0_ow_0_fused_fused % T.int64(7) * T.int64(2) + ax3_ax4_fused // T.int64(16))
                            v_ax4 = T.axis.spatial(T.int64(16), ax3_ax4_fused % T.int64(16))
                            T.reads(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4])
                            T.writes(T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                            T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.max(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] + p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4], T.float32(0))
b0 = sch.get_block(name="data_pad", func_name="main")
b1 = sch.get_block(name="conv2d_NCHWc", func_name="main")
b2 = sch.get_block(name="T_add", func_name="main")
b3 = sch.get_block(name="root", func_name="main")
sch.compute_inline(block=b2)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSRSRS")
l4, l5, l6, l7, l8, l9, l10, l11 = sch.get_loops(block=b1)
v12, v13, v14, v15 = sch.sample_perfect_tile(loop=l4, n=4, max_innermost_factor=64, decision=[1, 1, 1, 1])
l16, l17, l18, l19 = sch.split(loop=l4, factors=[v12, v13, v14, v15], preserve_unit_iters=True)
v20, v21, v22, v23 = sch.sample_perfect_tile(loop=l5, n=4, max_innermost_factor=64, decision=[4, 2, 1, 4])
l24, l25, l26, l27 = sch.split(loop=l5, factors=[v20, v21, v22, v23], preserve_unit_iters=True)
v28, v29, v30, v31 = sch.sample_perfect_tile(loop=l6, n=4, max_innermost_factor=64, decision=[1, 7, 2, 1])
l32, l33, l34, l35 = sch.split(loop=l6, factors=[v28, v29, v30, v31], preserve_unit_iters=True)
v36, v37, v38, v39 = sch.sample_perfect_tile(loop=l7, n=4, max_innermost_factor=64, decision=[7, 1, 1, 2])
l40, l41, l42, l43 = sch.split(loop=l7, factors=[v36, v37, v38, v39], preserve_unit_iters=True)
v44, v45, v46, v47 = sch.sample_perfect_tile(loop=l8, n=4, max_innermost_factor=64, decision=[1, 2, 1, 8])
l48, l49, l50, l51 = sch.split(loop=l8, factors=[v44, v45, v46, v47], preserve_unit_iters=True)
v52, v53 = sch.sample_perfect_tile(loop=l9, n=2, max_innermost_factor=64, decision=[512, 1])
l54, l55 = sch.split(loop=l9, factors=[v52, v53], preserve_unit_iters=True)
v56, v57 = sch.sample_perfect_tile(loop=l10, n=2, max_innermost_factor=64, decision=[3, 1])
l58, l59 = sch.split(loop=l10, factors=[v56, v57], preserve_unit_iters=True)
v60, v61 = sch.sample_perfect_tile(loop=l11, n=2, max_innermost_factor=64, decision=[1, 3])
l62, l63 = sch.split(loop=l11, factors=[v60, v61], preserve_unit_iters=True)
sch.reorder(l16, l24, l32, l40, l48, l17, l25, l33, l41, l49, l54, l58, l62, l18, l26, l34, l42, l50, l55, l59, l63, l19, l27, l35, l43, l51)
b64, = sch.get_consumers(block=b1)
sch.reverse_compute_at(block=b64, loop=l48, preserve_unit_loops=True, index=-1)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.vectorize", ann_val=64)
v65 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.unroll_explicit", ann_val=v65)
l66 = sch.sample_compute_location(block=b0, decision=3)
sch.compute_at(block=b0, loop=l66, preserve_unit_loops=True, index=-1)
sch.enter_postproc()
b67 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b67, ann_key="meta_schedule.parallel")
sch.unannotate(block_or_loop=b67, ann_key="meta_schedule.vectorize")
sch.unannotate(block_or_loop=b67, ann_key="meta_schedule.unroll_explicit")
b68, b69, b70 = sch.get_child_blocks(b67)
l71, l72, l73, l74, l75, l76, l77, l78, l79 = sch.get_loops(block=b68)
l80 = sch.fuse(l71, l72, l73, l74, preserve_unit_iters=True)
sch.parallel(loop=l80)
l81, l82, l83, l84, l85, l86, l87, l88, l89, l90, l91, l92, l93, l94, l95, l96, l97, l98, l99, l100, l101, l102, l103 = sch.get_loops(block=b69)
l104 = sch.fuse(l81, preserve_unit_iters=True)
sch.parallel(loop=l104)
l105 = sch.fuse(l103, preserve_unit_iters=True)
sch.vectorize(loop=l105)
sch.annotate(block_or_loop=l104, ann_key="pragma_auto_unroll_max_step", ann_val=512)
sch.annotate(block_or_loop=l104, ann_key="pragma_unroll_explicit", ann_val=1)
l106, l107, l108, l109, l110, l111, l112 = sch.get_loops(block=b70)
l113 = sch.fuse(l111, l112, preserve_unit_iters=True)
sch.vectorize(loop=l113)
b114 = sch.get_block(name="conv2d_NCHWc", func_name="main")
l115, l116, l117, l118, l119, l120, l121, l122, l123, l124, l125, l126, l127, l128, l129, l130, l131, l132, l133, l134, l135, l136, l137 = sch.get_loops(block=b114)
b138 = sch.decompose_reduction(block=b114, loop=l122)
2024-04-28 13:23:23 [INFO] [task_scheduler.cc:121] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #768: Error in building:
LocalBuilder: Timeout, killed after 30.0 seconds
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(1), T.int64(14), T.int64(14), T.int64(512)), "float32"), p1: T.Buffer((T.int64(32), T.int64(1), T.int64(3), T.int64(3), T.int64(512), T.int64(16)), "float32"), p2: T.Buffer((T.int64(1), T.int64(32), T.int64(1), T.int64(1), T.int64(16)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(32), T.int64(14), T.int64(14), T.int64(16)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        data_pad = T.alloc_buffer((T.int64(1), T.int64(1), T.int64(16), T.int64(16), T.int64(512)))
        conv2d_NCHWc = T.alloc_buffer((T.int64(1), T.int64(32), T.int64(14), T.int64(14), T.int64(16)))
        for n_0_oc_chunk_0_oh_0_fused_fused in T.parallel(T.int64(2), annotations={"pragma_auto_unroll_max_step": 512, "pragma_unroll_explicit": 1}):
            for ax0, ax1, ax2, ax3, ax4 in T.grid(T.int64(1), T.int64(1), T.int64(9), T.int64(16), T.int64(512)):
                with T.block("data_pad"):
                    v_i0, v_i1 = T.axis.remap("SS", [ax0, ax1])
                    v_i2 = T.axis.spatial(T.int64(16), n_0_oc_chunk_0_oh_0_fused_fused * T.int64(7) + ax2)
                    v_i3, v_i4 = T.axis.remap("SS", [ax3, ax4])
                    T.reads(p0[v_i0, v_i1, v_i2 - T.int64(1), v_i3 - T.int64(1), v_i4])
                    T.writes(data_pad[v_i0, v_i1, v_i2, v_i3, v_i4])
                    data_pad[v_i0, v_i1, v_i2, v_i3, v_i4] = T.if_then_else(T.int64(1) <= v_i2 and v_i2 < T.int64(15) and T.int64(1) <= v_i3 and v_i3 < T.int64(15), p0[v_i0, v_i1, v_i2 - T.int64(1), v_i3 - T.int64(1), v_i4], T.float32(0))
            for ow_0, oc_block_0, n_1, oc_chunk_1, oh_1, ow_1, oc_block_1 in T.grid(T.int64(2), T.int64(2), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1)):
                for n_2_init, oc_chunk_2_init, oh_2_init, ow_2_init, oc_block_2_init, n_3_init, oc_chunk_3_init, oh_3_init, ow_3_init, oc_block_3_init in T.grid(T.int64(1), T.int64(1), T.int64(7), T.int64(7), T.int64(8), T.int64(1), T.int64(32), T.int64(1), T.int64(1), T.int64(1)):
                    with T.block("conv2d_NCHWc_init"):
                        v_n = T.axis.spatial(T.int64(1), n_1 + n_2_init + n_3_init)
                        v_oc_chunk = T.axis.spatial(T.int64(32), oc_chunk_1 * T.int64(32) + oc_chunk_2_init * T.int64(32) + oc_chunk_3_init)
                        v_oh = T.axis.spatial(T.int64(14), n_0_oc_chunk_0_oh_0_fused_fused * T.int64(7) + oh_1 * T.int64(7) + oh_2_init + oh_3_init)
                        v_ow = T.axis.spatial(T.int64(14), ow_0 * T.int64(7) + ow_1 * T.int64(7) + ow_2_init + ow_3_init)
                        v_oc_block = T.axis.spatial(T.int64(16), oc_block_0 * T.int64(8) + oc_block_1 * T.int64(8) + oc_block_2_init + oc_block_3_init)
                        T.reads()
                        T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                        T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                        conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = T.float32(0)
                for ic_0, kh_0, kw_0, n_2, oc_chunk_2, oh_2, ow_2, oc_block_2, ic_1, kh_1, kw_1, n_3, oc_chunk_3, oh_3, ow_3, oc_block_3 in T.grid(T.int64(128), T.int64(3), T.int64(1), T.int64(1), T.int64(1), T.int64(7), T.int64(7), T.int64(8), T.int64(4), T.int64(1), T.int64(3), T.int64(1), T.int64(32), T.int64(1), T.int64(1), T.int64(1)):
                    with T.block("conv2d_NCHWc_update"):
                        v_n = T.axis.spatial(T.int64(1), n_1 + n_2 + n_3)
                        v_oc_chunk = T.axis.spatial(T.int64(32), oc_chunk_1 * T.int64(32) + oc_chunk_2 * T.int64(32) + oc_chunk_3)
                        v_oh = T.axis.spatial(T.int64(14), n_0_oc_chunk_0_oh_0_fused_fused * T.int64(7) + oh_1 * T.int64(7) + oh_2 + oh_3)
                        v_ow = T.axis.spatial(T.int64(14), ow_0 * T.int64(7) + ow_1 * T.int64(7) + ow_2 + ow_3)
                        v_oc_block = T.axis.spatial(T.int64(16), oc_block_0 * T.int64(8) + oc_block_1 * T.int64(8) + oc_block_2 + oc_block_3)
                        v_ic = T.axis.reduce(T.int64(512), ic_0 * T.int64(4) + ic_1)
                        v_kh = T.axis.reduce(T.int64(3), kh_0 + kh_1)
                        v_kw = T.axis.reduce(T.int64(3), kw_0 * T.int64(3) + kw_1)
                        T.reads(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block], data_pad[v_n, v_ic // T.int64(512), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(512)], p1[v_oc_chunk, v_ic // T.int64(512), v_kh, v_kw, v_ic % T.int64(512), v_oc_block])
                        T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                        T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                        conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] + data_pad[v_n, v_ic // T.int64(512), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(512)] * p1[v_oc_chunk, v_ic // T.int64(512), v_kh, v_kw, v_ic % T.int64(512), v_oc_block]
        for ax0_ax1_ax2_ax3_ax4_fused_0 in T.parallel(T.int64(1568)):
            for ax0_ax1_ax2_ax3_ax4_fused_1 in T.vectorized(T.int64(64)):
                with T.block("T_relu"):
                    v_ax0 = T.axis.spatial(T.int64(1), T.int64(0))
                    v_ax1 = T.axis.spatial(T.int64(32), (ax0_ax1_ax2_ax3_ax4_fused_0 * T.int64(64) + ax0_ax1_ax2_ax3_ax4_fused_1) // T.int64(3136))
                    v_ax2 = T.axis.spatial(T.int64(14), (ax0_ax1_ax2_ax3_ax4_fused_0 * T.int64(64) + ax0_ax1_ax2_ax3_ax4_fused_1) % T.int64(3136) // T.int64(224))
                    v_ax3 = T.axis.spatial(T.int64(14), (ax0_ax1_ax2_ax3_ax4_fused_0 * T.int64(64) + ax0_ax1_ax2_ax3_ax4_fused_1) % T.int64(224) // T.int64(16))
                    v_ax4 = T.axis.spatial(T.int64(16), (ax0_ax1_ax2_ax3_ax4_fused_0 * T.int64(64) + ax0_ax1_ax2_ax3_ax4_fused_1) % T.int64(16))
                    T.reads(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4])
                    T.writes(T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                    T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.max(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] + p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4], T.float32(0))
b0 = sch.get_block(name="data_pad", func_name="main")
b1 = sch.get_block(name="conv2d_NCHWc", func_name="main")
b2 = sch.get_block(name="T_add", func_name="main")
b3 = sch.get_block(name="root", func_name="main")
sch.compute_inline(block=b2)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSRSRS")
l4, l5, l6, l7, l8, l9, l10, l11 = sch.get_loops(block=b1)
v12, v13, v14, v15 = sch.sample_perfect_tile(loop=l4, n=4, max_innermost_factor=64, decision=[1, 1, 1, 1])
l16, l17, l18, l19 = sch.split(loop=l4, factors=[v12, v13, v14, v15], preserve_unit_iters=True)
v20, v21, v22, v23 = sch.sample_perfect_tile(loop=l5, n=4, max_innermost_factor=64, decision=[1, 1, 1, 32])
l24, l25, l26, l27 = sch.split(loop=l5, factors=[v20, v21, v22, v23], preserve_unit_iters=True)
v28, v29, v30, v31 = sch.sample_perfect_tile(loop=l6, n=4, max_innermost_factor=64, decision=[2, 1, 7, 1])
l32, l33, l34, l35 = sch.split(loop=l6, factors=[v28, v29, v30, v31], preserve_unit_iters=True)
v36, v37, v38, v39 = sch.sample_perfect_tile(loop=l7, n=4, max_innermost_factor=64, decision=[2, 1, 7, 1])
l40, l41, l42, l43 = sch.split(loop=l7, factors=[v36, v37, v38, v39], preserve_unit_iters=True)
v44, v45, v46, v47 = sch.sample_perfect_tile(loop=l8, n=4, max_innermost_factor=64, decision=[2, 1, 8, 1])
l48, l49, l50, l51 = sch.split(loop=l8, factors=[v44, v45, v46, v47], preserve_unit_iters=True)
v52, v53 = sch.sample_perfect_tile(loop=l9, n=2, max_innermost_factor=64, decision=[128, 4])
l54, l55 = sch.split(loop=l9, factors=[v52, v53], preserve_unit_iters=True)
v56, v57 = sch.sample_perfect_tile(loop=l10, n=2, max_innermost_factor=64, decision=[3, 1])
l58, l59 = sch.split(loop=l10, factors=[v56, v57], preserve_unit_iters=True)
v60, v61 = sch.sample_perfect_tile(loop=l11, n=2, max_innermost_factor=64, decision=[1, 3])
l62, l63 = sch.split(loop=l11, factors=[v60, v61], preserve_unit_iters=True)
sch.reorder(l16, l24, l32, l40, l48, l17, l25, l33, l41, l49, l54, l58, l62, l18, l26, l34, l42, l50, l55, l59, l63, l19, l27, l35, l43, l51)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.vectorize", ann_val=64)
v64 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.unroll_explicit", ann_val=v64)
l65 = sch.sample_compute_location(block=b0, decision=2)
sch.compute_at(block=b0, loop=l65, preserve_unit_loops=True, index=-1)
sch.enter_postproc()
b66 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b66, ann_key="meta_schedule.parallel")
sch.unannotate(block_or_loop=b66, ann_key="meta_schedule.vectorize")
sch.unannotate(block_or_loop=b66, ann_key="meta_schedule.unroll_explicit")
b67, b68, b69 = sch.get_child_blocks(b66)
l70, l71, l72, l73, l74, l75, l76, l77 = sch.get_loops(block=b67)
l78 = sch.fuse(l70, l71, l72, preserve_unit_iters=True)
sch.parallel(loop=l78)
l79, l80, l81, l82, l83, l84, l85, l86, l87, l88, l89, l90, l91, l92, l93, l94, l95, l96, l97, l98, l99, l100, l101, l102 = sch.get_loops(block=b68)
l103 = sch.fuse(l79, preserve_unit_iters=True)
sch.parallel(loop=l103)
sch.annotate(block_or_loop=l103, ann_key="pragma_auto_unroll_max_step", ann_val=512)
sch.annotate(block_or_loop=l103, ann_key="pragma_unroll_explicit", ann_val=1)
l104, l105, l106, l107, l108 = sch.get_loops(block=b69)
l109 = sch.fuse(l104, l105, l106, l107, l108, preserve_unit_iters=True)
l110, l111 = sch.split(loop=l109, factors=[None, 64], preserve_unit_iters=True)
sch.parallel(loop=l110)
sch.vectorize(loop=l111)
b112 = sch.get_block(name="conv2d_NCHWc", func_name="main")
l113, l114, l115, l116, l117, l118, l119, l120, l121, l122, l123, l124, l125, l126, l127, l128, l129, l130, l131, l132, l133, l134, l135, l136 = sch.get_loops(block=b112)
b137 = sch.decompose_reduction(block=b112, loop=l121)
2024-04-28 13:35:37 [INFO] [evolutionary_search.cc:713] Generating candidates......
2024-04-28 13:35:38 [INFO] [evolutionary_search.cc:715] Picked top 102 candidate(s) from database
2024-04-28 13:35:43 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x3861aa8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x37d26b8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x4dd4148)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x3201bb8)]: 0 failure(s)
2024-04-28 13:35:43 [INFO] [evolutionary_search.cc:723] Sampled 410 candidate(s)
2024-04-28 13:35:55 [INFO] [evolutionary_search.cc:621] Evolve iter #0 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x3861aa8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x37d26b8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x4dd4148)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x3201bb8)]: 0 failure(s)
2024-04-28 13:36:06 [INFO] [evolutionary_search.cc:621] Evolve iter #1 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x3861aa8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x37d26b8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x4dd4148)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x3201bb8)]: 0 failure(s)
2024-04-28 13:36:17 [INFO] [evolutionary_search.cc:621] Evolve iter #2 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x3861aa8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x37d26b8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x4dd4148)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x3201bb8)]: 0 failure(s)
2024-04-28 13:36:29 [INFO] [evolutionary_search.cc:621] Evolve iter #3 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x3861aa8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x37d26b8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x4dd4148)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x3201bb8)]: 0 failure(s)
2024-04-28 13:36:36 [INFO] [evolutionary_search.cc:649] Scores of the best 64 candidates:
[1 : 16]:	0.9598  0.9271  0.8988  0.8859  0.8859  0.8753  0.8599  0.8524  0.8352  0.8331  0.8331  0.8239  0.8239  0.8239  0.8239  0.8217
[17 : 32]:	0.8125  0.8109  0.8083  0.8058  0.7984  0.7928  0.7928  0.7925  0.7908  0.7902  0.7872  0.7778  0.7748  0.7685  0.7659  0.7659
[33 : 48]:	0.7638  0.7603  0.7582  0.7566  0.7549  0.7535  0.7530  0.7524  0.7504  0.7498  0.7473  0.7471  0.7455  0.7414  0.7410  0.7410
[49 : 64]:	0.7407  0.7386  0.7386  0.7386  0.7386  0.7349  0.7349  0.7349  0.7325  0.7310  0.7310  0.7294  0.7294  0.7294  0.7293  0.7284
2024-04-28 13:36:36 [INFO] [evolutionary_search.cc:727] Got 64 candidate(s) with evolutionary search
2024-04-28 13:36:36 [INFO] [evolutionary_search.cc:730] Sending 64 candidates(s) for measurement
2024-04-28 13:38:09 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #769: GFLOPs: 316.6932. Time: 2920.9489 us. Best GFLOPs: 696.1343
2024-04-28 13:38:09 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #770: GFLOPs: 661.9574. Time: 1397.4384 us. Best GFLOPs: 696.1343
2024-04-28 13:38:09 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #771: GFLOPs: 670.5109. Time: 1379.6118 us. Best GFLOPs: 696.1343
2024-04-28 13:38:09 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #772: GFLOPs: 642.9190. Time: 1438.8199 us. Best GFLOPs: 696.1343
2024-04-28 13:38:09 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #773: GFLOPs: 658.9571. Time: 1403.8011 us. Best GFLOPs: 696.1343
2024-04-28 13:38:09 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #774: GFLOPs: 538.3002. Time: 1718.4552 us. Best GFLOPs: 696.1343
2024-04-28 13:38:09 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #775: GFLOPs: 627.6417. Time: 1473.8421 us. Best GFLOPs: 696.1343
2024-04-28 13:38:09 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #776: GFLOPs: 597.5982. Time: 1547.9376 us. Best GFLOPs: 696.1343
2024-04-28 13:38:09 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #777: GFLOPs: 559.8875. Time: 1652.1975 us. Best GFLOPs: 696.1343
2024-04-28 13:38:09 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #778: GFLOPs: 482.3340. Time: 1917.8510 us. Best GFLOPs: 696.1343
2024-04-28 13:38:09 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #779: GFLOPs: 508.0452. Time: 1820.7923 us. Best GFLOPs: 696.1343
2024-04-28 13:38:09 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #780: GFLOPs: 582.3278. Time: 1588.5293 us. Best GFLOPs: 696.1343
2024-04-28 13:38:09 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #781: GFLOPs: 574.0891. Time: 1611.3260 us. Best GFLOPs: 696.1343
2024-04-28 13:38:09 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #782: GFLOPs: 580.4155. Time: 1593.7630 us. Best GFLOPs: 696.1343
2024-04-28 13:38:09 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #783: GFLOPs: 570.7220. Time: 1620.8324 us. Best GFLOPs: 696.1343
2024-04-28 13:38:09 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #784: GFLOPs: 559.4296. Time: 1653.5500 us. Best GFLOPs: 696.1343
2024-04-28 13:38:09 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #785: GFLOPs: 568.1340. Time: 1628.2158 us. Best GFLOPs: 696.1343
2024-04-28 13:38:09 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #786: GFLOPs: 573.6061. Time: 1612.6829 us. Best GFLOPs: 696.1343
2024-04-28 13:38:09 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #787: GFLOPs: 563.7362. Time: 1640.9176 us. Best GFLOPs: 696.1343
2024-04-28 13:38:09 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #788: GFLOPs: 569.8359. Time: 1623.3530 us. Best GFLOPs: 696.1343
2024-04-28 13:38:09 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #789: GFLOPs: 548.2676. Time: 1687.2141 us. Best GFLOPs: 696.1343
2024-04-28 13:38:09 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #790: GFLOPs: 558.6383. Time: 1655.8921 us. Best GFLOPs: 696.1343
2024-04-28 13:38:09 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #791: GFLOPs: 546.5383. Time: 1692.5525 us. Best GFLOPs: 696.1343
2024-04-28 13:38:09 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #792: GFLOPs: 543.7675. Time: 1701.1771 us. Best GFLOPs: 696.1343
2024-04-28 13:38:09 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #793: GFLOPs: 514.9554. Time: 1796.3588 us. Best GFLOPs: 696.1343
2024-04-28 13:38:09 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #794: GFLOPs: 536.4700. Time: 1724.3177 us. Best GFLOPs: 696.1343
2024-04-28 13:38:09 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #795: GFLOPs: 525.4664. Time: 1760.4262 us. Best GFLOPs: 696.1343
2024-04-28 13:38:09 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #796: GFLOPs: 594.4273. Time: 1556.1950 us. Best GFLOPs: 696.1343
2024-04-28 13:38:09 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #797: GFLOPs: 555.5317. Time: 1665.1519 us. Best GFLOPs: 696.1343
2024-04-28 13:38:09 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #798: GFLOPs: 529.6366. Time: 1746.5651 us. Best GFLOPs: 696.1343
2024-04-28 13:38:09 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #799: GFLOPs: 543.6564. Time: 1701.5247 us. Best GFLOPs: 696.1343
2024-04-28 13:38:09 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #800: GFLOPs: 545.1776. Time: 1696.7767 us. Best GFLOPs: 696.1343
2024-04-28 13:38:09 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #801: GFLOPs: 337.8111. Time: 2738.3495 us. Best GFLOPs: 696.1343
2024-04-28 13:38:09 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #802: GFLOPs: 551.8626. Time: 1676.2229 us. Best GFLOPs: 696.1343
2024-04-28 13:38:09 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #803: GFLOPs: 541.6511. Time: 1707.8238 us. Best GFLOPs: 696.1343
2024-04-28 13:38:09 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #804: GFLOPs: 387.9497. Time: 2384.4450 us. Best GFLOPs: 696.1343
2024-04-28 13:38:09 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #805: GFLOPs: 542.1447. Time: 1706.2692 us. Best GFLOPs: 696.1343
2024-04-28 13:38:09 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #806: GFLOPs: 188.9288. Time: 4896.2608 us. Best GFLOPs: 696.1343
2024-04-28 13:38:09 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #807: GFLOPs: 552.2885. Time: 1674.9303 us. Best GFLOPs: 696.1343
2024-04-28 13:38:09 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #808: GFLOPs: 199.1620. Time: 4644.6838 us. Best GFLOPs: 696.1343
2024-04-28 13:38:09 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #809: GFLOPs: 301.2776. Time: 3070.4067 us. Best GFLOPs: 696.1343
2024-04-28 13:38:09 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #810: GFLOPs: 600.0342. Time: 1541.6534 us. Best GFLOPs: 696.1343
2024-04-28 13:38:09 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #811: GFLOPs: 398.7242. Time: 2320.0118 us. Best GFLOPs: 696.1343
2024-04-28 13:38:09 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #812: GFLOPs: 507.8538. Time: 1821.4782 us. Best GFLOPs: 696.1343
2024-04-28 13:38:09 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #813: GFLOPs: 400.3386. Time: 2310.6557 us. Best GFLOPs: 696.1343
2024-04-28 13:38:09 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #814: GFLOPs: 490.7312. Time: 1885.0334 us. Best GFLOPs: 696.1343
2024-04-28 13:38:09 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #815: GFLOPs: 456.9414. Time: 2024.4275 us. Best GFLOPs: 696.1343
2024-04-28 13:38:09 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #816: GFLOPs: 520.7979. Time: 1776.2066 us. Best GFLOPs: 696.1343
2024-04-28 13:38:09 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #817: GFLOPs: 528.9057. Time: 1748.9786 us. Best GFLOPs: 696.1343
2024-04-28 13:38:09 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #818: GFLOPs: 382.7073. Time: 2417.1079 us. Best GFLOPs: 696.1343
2024-04-28 13:38:09 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #819: GFLOPs: 388.7601. Time: 2379.4743 us. Best GFLOPs: 696.1343
2024-04-28 13:38:09 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #820: GFLOPs: 394.7300. Time: 2343.4874 us. Best GFLOPs: 696.1343
2024-04-28 13:38:09 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #821: GFLOPs: 391.8284. Time: 2360.8417 us. Best GFLOPs: 696.1343
2024-04-28 13:38:09 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #822: GFLOPs: 403.9339. Time: 2290.0895 us. Best GFLOPs: 696.1343
2024-04-28 13:38:09 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #823: GFLOPs: 397.6104. Time: 2326.5106 us. Best GFLOPs: 696.1343
2024-04-28 13:38:09 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #824: GFLOPs: 396.7230. Time: 2331.7146 us. Best GFLOPs: 696.1343
2024-04-28 13:38:09 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #825: GFLOPs: 403.4996. Time: 2292.5541 us. Best GFLOPs: 696.1343
2024-04-28 13:38:09 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #826: GFLOPs: 518.0210. Time: 1785.7283 us. Best GFLOPs: 696.1343
2024-04-28 13:38:09 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #827: GFLOPs: 515.9495. Time: 1792.8979 us. Best GFLOPs: 696.1343
2024-04-28 13:38:09 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #828: GFLOPs: 480.1594. Time: 1926.5369 us. Best GFLOPs: 696.1343
2024-04-28 13:38:09 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #829: GFLOPs: 401.9453. Time: 2301.4195 us. Best GFLOPs: 696.1343
2024-04-28 13:38:09 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #830: GFLOPs: 60.4419. Time: 15304.7027 us. Best GFLOPs: 696.1343
2024-04-28 13:38:09 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #831: GFLOPs: 148.2071. Time: 6241.5683 us. Best GFLOPs: 696.1343
2024-04-28 13:38:09 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #832: GFLOPs: 20.6836. Time: 44723.5970 us. Best GFLOPs: 696.1343
2024-04-28 14:00:41 [INFO] [evolutionary_search.cc:713] Generating candidates......
2024-04-28 14:00:42 [INFO] [evolutionary_search.cc:715] Picked top 102 candidate(s) from database
2024-04-28 14:00:47 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x3861aa8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x37d26b8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x4dd4148)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x3201bb8)]: 0 failure(s)
2024-04-28 14:00:47 [INFO] [evolutionary_search.cc:723] Sampled 410 candidate(s)
2024-04-28 14:00:59 [INFO] [evolutionary_search.cc:621] Evolve iter #0 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x3861aa8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x37d26b8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x4dd4148)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x3201bb8)]: 0 failure(s)
2024-04-28 14:01:11 [INFO] [evolutionary_search.cc:621] Evolve iter #1 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x3861aa8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x37d26b8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x4dd4148)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x3201bb8)]: 0 failure(s)
2024-04-28 14:01:22 [INFO] [evolutionary_search.cc:621] Evolve iter #2 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x3861aa8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x37d26b8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x4dd4148)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x3201bb8)]: 0 failure(s)
2024-04-28 14:01:34 [INFO] [evolutionary_search.cc:621] Evolve iter #3 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x3861aa8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x37d26b8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x4dd4148)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x3201bb8)]: 0 failure(s)
2024-04-28 14:01:41 [INFO] [evolutionary_search.cc:649] Scores of the best 64 candidates:
[1 : 16]:	0.9237  0.9125  0.9061  0.9061  0.9061  0.8944  0.8941  0.8924  0.8924  0.8592  0.8514  0.8421  0.8329  0.8307  0.8258  0.8238
[17 : 32]:	0.8198  0.8134  0.8134  0.8134  0.8090  0.8008  0.8008  0.7957  0.7914  0.7869  0.7858  0.7856  0.7831  0.7802  0.7798  0.7798
[33 : 48]:	0.7734  0.7703  0.7694  0.7656  0.7568  0.7491  0.7490  0.7478  0.7477  0.7423  0.7423  0.7378  0.7341  0.7340  0.7338  0.7307
[49 : 64]:	0.7307  0.7258  0.7252  0.7252  0.7178  0.7168  0.7168  0.7168  0.7158  0.7151  0.7141  0.7137  0.7022  0.6994  0.6991  0.6978
2024-04-28 14:01:41 [INFO] [evolutionary_search.cc:727] Got 64 candidate(s) with evolutionary search
2024-04-28 14:01:41 [INFO] [evolutionary_search.cc:730] Sending 64 candidates(s) for measurement
2024-04-28 14:03:10 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #833: GFLOPs: 667.4945. Time: 1385.8462 us. Best GFLOPs: 696.1343
2024-04-28 14:03:10 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #834: GFLOPs: 645.0336. Time: 1434.1032 us. Best GFLOPs: 696.1343
2024-04-28 14:03:10 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #835: GFLOPs: 661.4578. Time: 1398.4939 us. Best GFLOPs: 696.1343
2024-04-28 14:03:10 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #836: GFLOPs: 653.2866. Time: 1415.9860 us. Best GFLOPs: 696.1343
2024-04-28 14:03:10 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #837: GFLOPs: 660.1442. Time: 1401.2767 us. Best GFLOPs: 696.1343
2024-04-28 14:03:10 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #838: GFLOPs: 655.1931. Time: 1411.8657 us. Best GFLOPs: 696.1343
2024-04-28 14:03:10 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #839: GFLOPs: 667.6511. Time: 1385.5212 us. Best GFLOPs: 696.1343
2024-04-28 14:03:10 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #840: GFLOPs: 636.1655. Time: 1454.0946 us. Best GFLOPs: 696.1343
2024-04-28 14:03:10 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #841: GFLOPs: 623.8558. Time: 1482.7861 us. Best GFLOPs: 696.1343
2024-04-28 14:03:10 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #842: GFLOPs: 427.3225. Time: 2164.7460 us. Best GFLOPs: 696.1343
2024-04-28 14:03:10 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #843: GFLOPs: 318.3657. Time: 2905.6041 us. Best GFLOPs: 696.1343
2024-04-28 14:03:10 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #844: GFLOPs: 606.3073. Time: 1525.7029 us. Best GFLOPs: 696.1343
2024-04-28 14:03:10 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #845: GFLOPs: 593.2908. Time: 1559.1759 us. Best GFLOPs: 696.1343
2024-04-28 14:03:10 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #846: GFLOPs: 624.9445. Time: 1480.2029 us. Best GFLOPs: 696.1343
2024-04-28 14:03:10 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #847: GFLOPs: 538.2058. Time: 1718.7565 us. Best GFLOPs: 696.1343
2024-04-28 14:03:10 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #848: GFLOPs: 544.5158. Time: 1698.8392 us. Best GFLOPs: 696.1343
2024-04-28 14:03:10 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #849: GFLOPs: 570.8502. Time: 1620.4683 us. Best GFLOPs: 696.1343
2024-04-28 14:03:10 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #850: GFLOPs: 547.5397. Time: 1689.4569 us. Best GFLOPs: 696.1343
2024-04-28 14:03:10 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #851: GFLOPs: 546.6963. Time: 1692.0634 us. Best GFLOPs: 696.1343
2024-04-28 14:03:10 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #852: GFLOPs: 557.7477. Time: 1658.5362 us. Best GFLOPs: 696.1343
2024-04-28 14:03:10 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #853: GFLOPs: 462.8259. Time: 1998.6884 us. Best GFLOPs: 696.1343
2024-04-28 14:03:10 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #854: GFLOPs: 564.5347. Time: 1638.5967 us. Best GFLOPs: 696.1343
2024-04-28 14:03:10 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #855: GFLOPs: 548.1900. Time: 1687.4527 us. Best GFLOPs: 696.1343
2024-04-28 14:03:10 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #856: GFLOPs: 585.2812. Time: 1580.5133 us. Best GFLOPs: 696.1343
2024-04-28 14:03:10 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #857: GFLOPs: 515.5542. Time: 1794.2726 us. Best GFLOPs: 696.1343
2024-04-28 14:03:10 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #858: GFLOPs: 728.3070. Time: 1270.1302 us. Best GFLOPs: 728.3070
2024-04-28 14:03:10 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #859: GFLOPs: 553.2957. Time: 1671.8814 us. Best GFLOPs: 728.3070
2024-04-28 14:03:10 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #860: GFLOPs: 586.6123. Time: 1576.9270 us. Best GFLOPs: 728.3070
2024-04-28 14:03:10 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #861: GFLOPs: 609.5693. Time: 1517.5383 us. Best GFLOPs: 728.3070
2024-04-28 14:03:10 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #862: GFLOPs: 615.2886. Time: 1503.4323 us. Best GFLOPs: 728.3070
2024-04-28 14:03:10 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #863: GFLOPs: 536.7008. Time: 1723.5762 us. Best GFLOPs: 728.3070
2024-04-28 14:03:10 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #864: GFLOPs: 562.7557. Time: 1643.7766 us. Best GFLOPs: 728.3070
2024-04-28 14:03:10 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #865: GFLOPs: 522.8626. Time: 1769.1927 us. Best GFLOPs: 728.3070
2024-04-28 14:03:10 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #866: GFLOPs: 545.7031. Time: 1695.1430 us. Best GFLOPs: 728.3070
2024-04-28 14:03:10 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #867: GFLOPs: 497.7896. Time: 1858.3045 us. Best GFLOPs: 728.3070
2024-04-28 14:03:10 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #868: GFLOPs: 539.5828. Time: 1714.3704 us. Best GFLOPs: 728.3070
2024-04-28 14:03:10 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #869: GFLOPs: 509.7424. Time: 1814.7298 us. Best GFLOPs: 728.3070
2024-04-28 14:03:10 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #870: GFLOPs: 512.0021. Time: 1806.7205 us. Best GFLOPs: 728.3070
2024-04-28 14:03:10 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #871: GFLOPs: 505.4150. Time: 1830.2678 us. Best GFLOPs: 728.3070
2024-04-28 14:03:10 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #872: GFLOPs: 502.1515. Time: 1842.1626 us. Best GFLOPs: 728.3070
2024-04-28 14:03:10 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #873: GFLOPs: 514.9927. Time: 1796.2287 us. Best GFLOPs: 728.3070
2024-04-28 14:03:10 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #874: GFLOPs: 460.2725. Time: 2009.7761 us. Best GFLOPs: 728.3070
2024-04-28 14:03:10 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #875: GFLOPs: 461.1636. Time: 2005.8927 us. Best GFLOPs: 728.3070
2024-04-28 14:03:10 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #876: GFLOPs: 504.3470. Time: 1834.1435 us. Best GFLOPs: 728.3070
2024-04-28 14:03:10 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #877: GFLOPs: 516.6638. Time: 1790.4191 us. Best GFLOPs: 728.3070
2024-04-28 14:03:10 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #878: GFLOPs: 529.2862. Time: 1747.7212 us. Best GFLOPs: 728.3070
2024-04-28 14:03:10 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #879: GFLOPs: 519.3705. Time: 1781.0883 us. Best GFLOPs: 728.3070
2024-04-28 14:03:10 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #880: GFLOPs: 454.0490. Time: 2037.3236 us. Best GFLOPs: 728.3070
2024-04-28 14:03:10 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #881: GFLOPs: 500.3327. Time: 1848.8592 us. Best GFLOPs: 728.3070
2024-04-28 14:03:10 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #882: GFLOPs: 502.3838. Time: 1841.3107 us. Best GFLOPs: 728.3070
2024-04-28 14:03:10 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #883: GFLOPs: 663.3257. Time: 1394.5558 us. Best GFLOPs: 728.3070
2024-04-28 14:03:10 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #884: GFLOPs: 625.3785. Time: 1479.1757 us. Best GFLOPs: 728.3070
2024-04-28 14:03:10 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #885: GFLOPs: 611.1087. Time: 1513.7154 us. Best GFLOPs: 728.3070
2024-04-28 14:03:10 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #886: GFLOPs: 506.5733. Time: 1826.0826 us. Best GFLOPs: 728.3070
2024-04-28 14:03:10 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #887: GFLOPs: 505.6731. Time: 1829.3336 us. Best GFLOPs: 728.3070
2024-04-28 14:03:10 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #888: GFLOPs: 499.7927. Time: 1850.8567 us. Best GFLOPs: 728.3070
2024-04-28 14:03:10 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #889: GFLOPs: 439.0497. Time: 2106.9248 us. Best GFLOPs: 728.3070
2024-04-28 14:03:10 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #890: GFLOPs: 517.4828. Time: 1787.5855 us. Best GFLOPs: 728.3070
2024-04-28 14:03:10 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #891: GFLOPs: 404.1163. Time: 2289.0559 us. Best GFLOPs: 728.3070
2024-04-28 14:03:10 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #892: GFLOPs: 122.7740. Time: 7534.5324 us. Best GFLOPs: 728.3070
2024-04-28 14:03:10 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #893: GFLOPs: 572.1039. Time: 1616.9173 us. Best GFLOPs: 728.3070
2024-04-28 14:03:10 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #894: GFLOPs: 183.2061. Time: 5049.2023 us. Best GFLOPs: 728.3070
2024-04-28 14:03:10 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #895: GFLOPs: 12.7358. Time: 72633.6230 us. Best GFLOPs: 728.3070
2024-04-28 14:03:10 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #896: GFLOPs: 41.3177. Time: 22388.5612 us. Best GFLOPs: 728.3070
2024-04-28 14:28:21 [INFO] [evolutionary_search.cc:713] Generating candidates......
2024-04-28 14:28:22 [INFO] [evolutionary_search.cc:715] Picked top 102 candidate(s) from database
2024-04-28 14:28:26 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x3861aa8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x37d26b8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x4dd4148)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x3201bb8)]: 0 failure(s)
2024-04-28 14:28:26 [INFO] [evolutionary_search.cc:723] Sampled 410 candidate(s)
2024-04-28 14:28:39 [INFO] [evolutionary_search.cc:621] Evolve iter #0 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x3861aa8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x37d26b8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x4dd4148)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x3201bb8)]: 0 failure(s)
2024-04-28 14:28:50 [INFO] [evolutionary_search.cc:621] Evolve iter #1 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x3861aa8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x37d26b8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x4dd4148)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x3201bb8)]: 0 failure(s)
2024-04-28 14:29:02 [INFO] [evolutionary_search.cc:621] Evolve iter #2 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x3861aa8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x37d26b8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x4dd4148)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x3201bb8)]: 0 failure(s)
2024-04-28 14:29:13 [INFO] [evolutionary_search.cc:621] Evolve iter #3 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x3861aa8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x37d26b8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x4dd4148)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x3201bb8)]: 0 failure(s)
2024-04-28 14:29:20 [INFO] [evolutionary_search.cc:649] Scores of the best 64 candidates:
[1 : 16]:	0.8962  0.8933  0.8933  0.8928  0.8717  0.8717  0.8717  0.8609  0.8609  0.8553  0.8465  0.8465  0.8455  0.8123  0.8097  0.8071
[17 : 32]:	0.8043  0.8034  0.8034  0.8018  0.8004  0.7933  0.7897  0.7840  0.7834  0.7823  0.7803  0.7793  0.7690  0.7681  0.7648  0.7638
[33 : 48]:	0.7636  0.7631  0.7630  0.7629  0.7622  0.7503  0.7462  0.7411  0.7273  0.7273  0.7177  0.7177  0.7177  0.7165  0.7109  0.7099
[49 : 64]:	0.7085  0.7085  0.7071  0.7046  0.7032  0.7015  0.7015  0.6994  0.6994  0.6993  0.6993  0.6993  0.6987  0.6969  0.6969  0.6969
2024-04-28 14:29:20 [INFO] [evolutionary_search.cc:727] Got 64 candidate(s) with evolutionary search
2024-04-28 14:29:20 [INFO] [evolutionary_search.cc:730] Sending 64 candidates(s) for measurement
2024-04-28 14:31:17 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #897: GFLOPs: 684.3817. Time: 1351.6503 us. Best GFLOPs: 728.3070
2024-04-28 14:31:17 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #898: GFLOPs: 593.3748. Time: 1558.9551 us. Best GFLOPs: 728.3070
2024-04-28 14:31:17 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #899: GFLOPs: 703.7339. Time: 1314.4809 us. Best GFLOPs: 728.3070
2024-04-28 14:31:17 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #900: GFLOPs: 661.5017. Time: 1398.4011 us. Best GFLOPs: 728.3070
2024-04-28 14:31:17 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #901: GFLOPs: 328.5731. Time: 2815.3395 us. Best GFLOPs: 728.3070
2024-04-28 14:31:17 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #902: GFLOPs: 655.4453. Time: 1411.3225 us. Best GFLOPs: 728.3070
2024-04-28 14:31:17 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #903: GFLOPs: 522.2660. Time: 1771.2139 us. Best GFLOPs: 728.3070
2024-04-28 14:31:17 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #904: GFLOPs: 650.5151. Time: 1422.0188 us. Best GFLOPs: 728.3070
2024-04-28 14:31:17 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #905: GFLOPs: 651.9480. Time: 1418.8934 us. Best GFLOPs: 728.3070
2024-04-28 14:31:17 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #906: GFLOPs: 318.5760. Time: 2903.6866 us. Best GFLOPs: 728.3070
2024-04-28 14:31:17 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #907: GFLOPs: 597.5759. Time: 1547.9954 us. Best GFLOPs: 728.3070
2024-04-28 14:31:17 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #908: GFLOPs: 612.4072. Time: 1510.5059 us. Best GFLOPs: 728.3070
2024-04-28 14:31:17 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #909: GFLOPs: 489.7020. Time: 1888.9951 us. Best GFLOPs: 728.3070
2024-04-28 14:31:17 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #910: GFLOPs: 732.5370. Time: 1262.7959 us. Best GFLOPs: 732.5370
2024-04-28 14:31:17 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #911: GFLOPs: 626.5506. Time: 1476.4088 us. Best GFLOPs: 732.5370
2024-04-28 14:31:17 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #912: GFLOPs: 598.5650. Time: 1545.4373 us. Best GFLOPs: 732.5370
2024-04-28 14:31:17 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #913: GFLOPs: 568.7601. Time: 1626.4234 us. Best GFLOPs: 732.5370
2024-04-28 14:31:17 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #914: GFLOPs: 252.2150. Time: 3667.6832 us. Best GFLOPs: 732.5370
2024-04-28 14:31:17 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #915: GFLOPs: 462.5662. Time: 1999.8104 us. Best GFLOPs: 732.5370
2024-04-28 14:31:17 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #916: GFLOPs: 444.7753. Time: 2079.8023 us. Best GFLOPs: 732.5370
2024-04-28 14:31:17 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #917: GFLOPs: 584.6660. Time: 1582.1764 us. Best GFLOPs: 732.5370
2024-04-28 14:31:17 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #918: GFLOPs: 479.3582. Time: 1929.7566 us. Best GFLOPs: 732.5370
2024-04-28 14:31:17 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #919: GFLOPs: 591.3211. Time: 1564.3695 us. Best GFLOPs: 732.5370
2024-04-28 14:31:17 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #920: GFLOPs: 463.5709. Time: 1995.4765 us. Best GFLOPs: 732.5370
2024-04-28 14:31:17 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #921: GFLOPs: 549.6180. Time: 1683.0684 us. Best GFLOPs: 732.5370
2024-04-28 14:31:17 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #922: GFLOPs: 671.8485. Time: 1376.8652 us. Best GFLOPs: 732.5370
2024-04-28 14:31:17 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #923: GFLOPs: 535.2942. Time: 1728.1052 us. Best GFLOPs: 732.5370
2024-04-28 14:31:17 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #924: GFLOPs: 553.6598. Time: 1670.7819 us. Best GFLOPs: 732.5370
2024-04-28 14:31:17 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #925: GFLOPs: 672.8886. Time: 1374.7368 us. Best GFLOPs: 732.5370
2024-04-28 14:31:17 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #926: GFLOPs: 529.2387. Time: 1747.8782 us. Best GFLOPs: 732.5370
2024-04-28 14:31:17 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #927: GFLOPs: 627.8553. Time: 1473.3408 us. Best GFLOPs: 732.5370
2024-04-28 14:31:17 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #928: GFLOPs: 586.8172. Time: 1576.3763 us. Best GFLOPs: 732.5370
2024-04-28 14:31:17 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #929: GFLOPs: 290.2329. Time: 3187.2501 us. Best GFLOPs: 732.5370
2024-04-28 14:31:17 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #930: GFLOPs: 531.9689. Time: 1738.9075 us. Best GFLOPs: 732.5370
2024-04-28 14:31:17 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #931: GFLOPs: 514.4816. Time: 1798.0134 us. Best GFLOPs: 732.5370
2024-04-28 14:31:17 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #932: GFLOPs: 589.9230. Time: 1568.0770 us. Best GFLOPs: 732.5370
2024-04-28 14:31:17 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #933: GFLOPs: 598.9289. Time: 1544.4984 us. Best GFLOPs: 732.5370
2024-04-28 14:31:17 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #934: GFLOPs: 524.7954. Time: 1762.6770 us. Best GFLOPs: 732.5370
2024-04-28 14:31:17 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #935: GFLOPs: 543.3294. Time: 1702.5488 us. Best GFLOPs: 732.5370
2024-04-28 14:31:17 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #936: GFLOPs: 558.8081. Time: 1655.3888 us. Best GFLOPs: 732.5370
2024-04-28 14:31:17 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #937: GFLOPs: 668.6869. Time: 1383.3751 us. Best GFLOPs: 732.5370
2024-04-28 14:31:17 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #938: GFLOPs: 673.7342. Time: 1373.0113 us. Best GFLOPs: 732.5370
2024-04-28 14:31:17 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #939: GFLOPs: 507.4878. Time: 1822.7922 us. Best GFLOPs: 732.5370
2024-04-28 14:31:17 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #940: GFLOPs: 522.5599. Time: 1770.2176 us. Best GFLOPs: 732.5370
2024-04-28 14:31:17 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #941: GFLOPs: 503.8231. Time: 1836.0508 us. Best GFLOPs: 732.5370
2024-04-28 14:31:17 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #942: GFLOPs: 522.8327. Time: 1769.2941 us. Best GFLOPs: 732.5370
2024-04-28 14:31:17 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #943: GFLOPs: 508.4994. Time: 1819.1660 us. Best GFLOPs: 732.5370
2024-04-28 14:31:17 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #944: GFLOPs: 394.4523. Time: 2345.1374 us. Best GFLOPs: 732.5370
2024-04-28 14:31:17 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #945: GFLOPs: 529.8623. Time: 1745.8209 us. Best GFLOPs: 732.5370
2024-04-28 14:31:17 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #946: GFLOPs: 529.9412. Time: 1745.5612 us. Best GFLOPs: 732.5370
2024-04-28 14:31:17 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #947: GFLOPs: 422.0480. Time: 2191.7998 us. Best GFLOPs: 732.5370
2024-04-28 14:31:17 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #948: GFLOPs: 532.7947. Time: 1736.2124 us. Best GFLOPs: 732.5370
2024-04-28 14:31:17 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #949: GFLOPs: 483.5186. Time: 1913.1522 us. Best GFLOPs: 732.5370
2024-04-28 14:31:17 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #950: GFLOPs: 515.4294. Time: 1794.7071 us. Best GFLOPs: 732.5370
2024-04-28 14:31:17 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #951: GFLOPs: 508.7056. Time: 1818.4286 us. Best GFLOPs: 732.5370
2024-04-28 14:31:17 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #952: GFLOPs: 415.8153. Time: 2224.6531 us. Best GFLOPs: 732.5370
2024-04-28 14:31:17 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #953: GFLOPs: 448.1175. Time: 2064.2906 us. Best GFLOPs: 732.5370
2024-04-28 14:31:17 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #954: GFLOPs: 411.4839. Time: 2248.0702 us. Best GFLOPs: 732.5370
2024-04-28 14:31:17 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #955: GFLOPs: 453.2164. Time: 2041.0661 us. Best GFLOPs: 732.5370
2024-04-28 14:31:17 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #956: GFLOPs: 405.8966. Time: 2279.0158 us. Best GFLOPs: 732.5370
2024-04-28 14:31:17 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #957: GFLOPs: 530.0903. Time: 1745.0702 us. Best GFLOPs: 732.5370
2024-04-28 14:31:17 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #958: GFLOPs: 28.6413. Time: 32297.5592 us. Best GFLOPs: 732.5370
2024-04-28 14:31:17 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #959: GFLOPs: 46.3851. Time: 19942.7018 us. Best GFLOPs: 732.5370
2024-04-28 14:31:17 [INFO] [task_scheduler.cc:121] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #960: Error in building:
LocalBuilder: Timeout, killed after 30.0 seconds
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(1), T.int64(14), T.int64(14), T.int64(512)), "float32"), p1: T.Buffer((T.int64(32), T.int64(1), T.int64(3), T.int64(3), T.int64(512), T.int64(16)), "float32"), p2: T.Buffer((T.int64(1), T.int64(32), T.int64(1), T.int64(1), T.int64(16)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(32), T.int64(14), T.int64(14), T.int64(16)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        data_pad = T.alloc_buffer((T.int64(1), T.int64(1), T.int64(16), T.int64(16), T.int64(512)))
        conv2d_NCHWc = T.alloc_buffer((T.int64(1), T.int64(32), T.int64(14), T.int64(14), T.int64(16)))
        for n_0_oc_chunk_0_oh_0_fused_fused in T.parallel(T.int64(14), annotations={"pragma_auto_unroll_max_step": 512, "pragma_unroll_explicit": 1}):
            for ax0, ax1, ax2, ax3, ax4 in T.grid(T.int64(1), T.int64(1), T.int64(4), T.int64(16), T.int64(512)):
                with T.block("data_pad"):
                    v_i0, v_i1 = T.axis.remap("SS", [ax0, ax1])
                    v_i2 = T.axis.spatial(T.int64(16), n_0_oc_chunk_0_oh_0_fused_fused % T.int64(7) * T.int64(2) + ax2)
                    v_i3, v_i4 = T.axis.remap("SS", [ax3, ax4])
                    T.reads(p0[v_i0, v_i1, v_i2 - T.int64(1), v_i3 - T.int64(1), v_i4])
                    T.writes(data_pad[v_i0, v_i1, v_i2, v_i3, v_i4])
                    data_pad[v_i0, v_i1, v_i2, v_i3, v_i4] = T.if_then_else(T.int64(1) <= v_i2 and v_i2 < T.int64(15) and T.int64(1) <= v_i3 and v_i3 < T.int64(15), p0[v_i0, v_i1, v_i2 - T.int64(1), v_i3 - T.int64(1), v_i4], T.float32(0))
            for ow_0, oc_block_0, n_1, oc_chunk_1, oh_1, ow_1, oc_block_1 in T.grid(T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(1), T.int64(2), T.int64(2)):
                for n_2_init, oc_chunk_2_init, oh_2_init, ow_2_init, oc_block_2_init, n_3_init, oc_chunk_3_init, oh_3_init, ow_3_init, oc_block_3_init in T.grid(T.int64(1), T.int64(2), T.int64(2), T.int64(7), T.int64(8), T.int64(1), T.int64(4), T.int64(1), T.int64(1), T.int64(1)):
                    with T.block("conv2d_NCHWc_init"):
                        v_n = T.axis.spatial(T.int64(1), n_1 + n_2_init + n_3_init)
                        v_oc_chunk = T.axis.spatial(T.int64(32), n_0_oc_chunk_0_oh_0_fused_fused // T.int64(7) * T.int64(16) + oc_chunk_1 * T.int64(8) + oc_chunk_2_init * T.int64(4) + oc_chunk_3_init)
                        v_oh = T.axis.spatial(T.int64(14), n_0_oc_chunk_0_oh_0_fused_fused % T.int64(7) * T.int64(2) + oh_1 * T.int64(2) + oh_2_init + oh_3_init)
                        v_ow = T.axis.spatial(T.int64(14), ow_0 * T.int64(14) + ow_1 * T.int64(7) + ow_2_init + ow_3_init)
                        v_oc_block = T.axis.spatial(T.int64(16), oc_block_0 * T.int64(16) + oc_block_1 * T.int64(8) + oc_block_2_init + oc_block_3_init)
                        T.reads()
                        T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                        T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                        conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = T.float32(0)
                for ic_0, kh_0, kw_0, n_2, oc_chunk_2, oh_2, ow_2, oc_block_2, ic_1, kh_1, kw_1, n_3, oc_chunk_3, oh_3, ow_3, oc_block_3 in T.grid(T.int64(256), T.int64(1), T.int64(3), T.int64(1), T.int64(2), T.int64(2), T.int64(7), T.int64(8), T.int64(2), T.int64(3), T.int64(1), T.int64(1), T.int64(4), T.int64(1), T.int64(1), T.int64(1)):
                    with T.block("conv2d_NCHWc_update"):
                        v_n = T.axis.spatial(T.int64(1), n_1 + n_2 + n_3)
                        v_oc_chunk = T.axis.spatial(T.int64(32), n_0_oc_chunk_0_oh_0_fused_fused // T.int64(7) * T.int64(16) + oc_chunk_1 * T.int64(8) + oc_chunk_2 * T.int64(4) + oc_chunk_3)
                        v_oh = T.axis.spatial(T.int64(14), n_0_oc_chunk_0_oh_0_fused_fused % T.int64(7) * T.int64(2) + oh_1 * T.int64(2) + oh_2 + oh_3)
                        v_ow = T.axis.spatial(T.int64(14), ow_0 * T.int64(14) + ow_1 * T.int64(7) + ow_2 + ow_3)
                        v_oc_block = T.axis.spatial(T.int64(16), oc_block_0 * T.int64(16) + oc_block_1 * T.int64(8) + oc_block_2 + oc_block_3)
                        v_ic = T.axis.reduce(T.int64(512), ic_0 * T.int64(2) + ic_1)
                        v_kh = T.axis.reduce(T.int64(3), kh_0 * T.int64(3) + kh_1)
                        v_kw = T.axis.reduce(T.int64(3), kw_0 + kw_1)
                        T.reads(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block], data_pad[v_n, v_ic // T.int64(512), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(512)], p1[v_oc_chunk, v_ic // T.int64(512), v_kh, v_kw, v_ic % T.int64(512), v_oc_block])
                        T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                        T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                        conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] + data_pad[v_n, v_ic // T.int64(512), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(512)] * p1[v_oc_chunk, v_ic // T.int64(512), v_kh, v_kw, v_ic % T.int64(512), v_oc_block]
        for ax0_ax1_ax2_ax3_ax4_fused_0 in T.parallel(T.int64(1568)):
            for ax0_ax1_ax2_ax3_ax4_fused_1 in T.vectorized(T.int64(64)):
                with T.block("T_relu"):
                    v_ax0 = T.axis.spatial(T.int64(1), T.int64(0))
                    v_ax1 = T.axis.spatial(T.int64(32), (ax0_ax1_ax2_ax3_ax4_fused_0 * T.int64(64) + ax0_ax1_ax2_ax3_ax4_fused_1) // T.int64(3136))
                    v_ax2 = T.axis.spatial(T.int64(14), (ax0_ax1_ax2_ax3_ax4_fused_0 * T.int64(64) + ax0_ax1_ax2_ax3_ax4_fused_1) % T.int64(3136) // T.int64(224))
                    v_ax3 = T.axis.spatial(T.int64(14), (ax0_ax1_ax2_ax3_ax4_fused_0 * T.int64(64) + ax0_ax1_ax2_ax3_ax4_fused_1) % T.int64(224) // T.int64(16))
                    v_ax4 = T.axis.spatial(T.int64(16), (ax0_ax1_ax2_ax3_ax4_fused_0 * T.int64(64) + ax0_ax1_ax2_ax3_ax4_fused_1) % T.int64(16))
                    T.reads(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4])
                    T.writes(T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                    T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.max(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] + p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4], T.float32(0))
b0 = sch.get_block(name="data_pad", func_name="main")
b1 = sch.get_block(name="conv2d_NCHWc", func_name="main")
b2 = sch.get_block(name="T_add", func_name="main")
b3 = sch.get_block(name="root", func_name="main")
sch.compute_inline(block=b2)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSRSRS")
l4, l5, l6, l7, l8, l9, l10, l11 = sch.get_loops(block=b1)
v12, v13, v14, v15 = sch.sample_perfect_tile(loop=l4, n=4, max_innermost_factor=64, decision=[1, 1, 1, 1])
l16, l17, l18, l19 = sch.split(loop=l4, factors=[v12, v13, v14, v15], preserve_unit_iters=True)
v20, v21, v22, v23 = sch.sample_perfect_tile(loop=l5, n=4, max_innermost_factor=64, decision=[2, 2, 2, 4])
l24, l25, l26, l27 = sch.split(loop=l5, factors=[v20, v21, v22, v23], preserve_unit_iters=True)
v28, v29, v30, v31 = sch.sample_perfect_tile(loop=l6, n=4, max_innermost_factor=64, decision=[7, 1, 2, 1])
l32, l33, l34, l35 = sch.split(loop=l6, factors=[v28, v29, v30, v31], preserve_unit_iters=True)
v36, v37, v38, v39 = sch.sample_perfect_tile(loop=l7, n=4, max_innermost_factor=64, decision=[1, 2, 7, 1])
l40, l41, l42, l43 = sch.split(loop=l7, factors=[v36, v37, v38, v39], preserve_unit_iters=True)
v44, v45, v46, v47 = sch.sample_perfect_tile(loop=l8, n=4, max_innermost_factor=64, decision=[1, 2, 8, 1])
l48, l49, l50, l51 = sch.split(loop=l8, factors=[v44, v45, v46, v47], preserve_unit_iters=True)
v52, v53 = sch.sample_perfect_tile(loop=l9, n=2, max_innermost_factor=64, decision=[256, 2])
l54, l55 = sch.split(loop=l9, factors=[v52, v53], preserve_unit_iters=True)
v56, v57 = sch.sample_perfect_tile(loop=l10, n=2, max_innermost_factor=64, decision=[1, 3])
l58, l59 = sch.split(loop=l10, factors=[v56, v57], preserve_unit_iters=True)
v60, v61 = sch.sample_perfect_tile(loop=l11, n=2, max_innermost_factor=64, decision=[3, 1])
l62, l63 = sch.split(loop=l11, factors=[v60, v61], preserve_unit_iters=True)
sch.reorder(l16, l24, l32, l40, l48, l17, l25, l33, l41, l49, l54, l58, l62, l18, l26, l34, l42, l50, l55, l59, l63, l19, l27, l35, l43, l51)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.vectorize", ann_val=64)
v64 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.unroll_explicit", ann_val=v64)
l65 = sch.sample_compute_location(block=b0, decision=2)
sch.compute_at(block=b0, loop=l65, preserve_unit_loops=True, index=-1)
sch.enter_postproc()
b66 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b66, ann_key="meta_schedule.parallel")
sch.unannotate(block_or_loop=b66, ann_key="meta_schedule.vectorize")
sch.unannotate(block_or_loop=b66, ann_key="meta_schedule.unroll_explicit")
b67, b68, b69 = sch.get_child_blocks(b66)
l70, l71, l72, l73, l74, l75, l76, l77 = sch.get_loops(block=b67)
l78 = sch.fuse(l70, l71, l72, preserve_unit_iters=True)
sch.parallel(loop=l78)
l79, l80, l81, l82, l83, l84, l85, l86, l87, l88, l89, l90, l91, l92, l93, l94, l95, l96, l97, l98, l99, l100, l101, l102 = sch.get_loops(block=b68)
l103 = sch.fuse(l79, preserve_unit_iters=True)
sch.parallel(loop=l103)
sch.annotate(block_or_loop=l103, ann_key="pragma_auto_unroll_max_step", ann_val=512)
sch.annotate(block_or_loop=l103, ann_key="pragma_unroll_explicit", ann_val=1)
l104, l105, l106, l107, l108 = sch.get_loops(block=b69)
l109 = sch.fuse(l104, l105, l106, l107, l108, preserve_unit_iters=True)
l110, l111 = sch.split(loop=l109, factors=[None, 64], preserve_unit_iters=True)
sch.parallel(loop=l110)
sch.vectorize(loop=l111)
b112 = sch.get_block(name="conv2d_NCHWc", func_name="main")
l113, l114, l115, l116, l117, l118, l119, l120, l121, l122, l123, l124, l125, l126, l127, l128, l129, l130, l131, l132, l133, l134, l135, l136 = sch.get_loops(block=b112)
b137 = sch.decompose_reduction(block=b112, loop=l121)
2024-04-28 14:34:06 [INFO] [evolutionary_search.cc:713] Generating candidates......
2024-04-28 14:34:07 [INFO] [evolutionary_search.cc:715] Picked top 102 candidate(s) from database
2024-04-28 14:34:11 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x3861aa8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x37d26b8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x4dd4148)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x3201bb8)]: 0 failure(s)
2024-04-28 14:34:11 [INFO] [evolutionary_search.cc:723] Sampled 410 candidate(s)
2024-04-28 14:34:23 [INFO] [evolutionary_search.cc:621] Evolve iter #0 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x3861aa8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x37d26b8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x4dd4148)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x3201bb8)]: 0 failure(s)
2024-04-28 14:34:35 [INFO] [evolutionary_search.cc:621] Evolve iter #1 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x3861aa8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x37d26b8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x4dd4148)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x3201bb8)]: 0 failure(s)
2024-04-28 14:34:47 [INFO] [evolutionary_search.cc:621] Evolve iter #2 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x3861aa8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x37d26b8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x4dd4148)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x3201bb8)]: 0 failure(s)
2024-04-28 14:34:59 [INFO] [evolutionary_search.cc:621] Evolve iter #3 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x3861aa8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x37d26b8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x4dd4148)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x3201bb8)]: 0 failure(s)
2024-04-28 14:35:06 [INFO] [evolutionary_search.cc:649] Scores of the best 64 candidates:
[1 : 16]:	0.9437  0.9428  0.9428  0.9428  0.9328  0.9155  0.9150  0.8777  0.8777  0.8775  0.8701  0.8689  0.8595  0.8536  0.8536  0.8494
[17 : 32]:	0.8471  0.8441  0.8441  0.8441  0.8434  0.8434  0.8394  0.8394  0.8290  0.8192  0.8166  0.8166  0.8166  0.8166  0.8139  0.8138
[33 : 48]:	0.8077  0.8056  0.8043  0.8038  0.8038  0.7940  0.7911  0.7904  0.7888  0.7816  0.7816  0.7807  0.7770  0.7764  0.7761  0.7706
[49 : 64]:	0.7671  0.7663  0.7623  0.7621  0.7619  0.7603  0.7592  0.7592  0.7583  0.7583  0.7569  0.7533  0.7519  0.7444  0.7441  0.7397
2024-04-28 14:35:06 [INFO] [evolutionary_search.cc:727] Got 64 candidate(s) with evolutionary search
2024-04-28 14:35:06 [INFO] [evolutionary_search.cc:730] Sending 64 candidates(s) for measurement
2024-04-28 14:37:10 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #961: GFLOPs: 711.8991. Time: 1299.4042 us. Best GFLOPs: 732.5370
2024-04-28 14:37:10 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #962: GFLOPs: 603.9200. Time: 1531.7340 us. Best GFLOPs: 732.5370
2024-04-28 14:37:10 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #963: GFLOPs: 600.0962. Time: 1541.4941 us. Best GFLOPs: 732.5370
2024-04-28 14:37:10 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #964: GFLOPs: 604.6502. Time: 1529.8840 us. Best GFLOPs: 732.5370
2024-04-28 14:37:10 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #965: GFLOPs: 664.9703. Time: 1391.1069 us. Best GFLOPs: 732.5370
2024-04-28 14:37:10 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #966: GFLOPs: 685.6082. Time: 1349.2322 us. Best GFLOPs: 732.5370
2024-04-28 14:37:10 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #967: GFLOPs: 687.8541. Time: 1344.8269 us. Best GFLOPs: 732.5370
2024-04-28 14:37:10 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #968: GFLOPs: 673.0443. Time: 1374.4188 us. Best GFLOPs: 732.5370
2024-04-28 14:37:10 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #969: GFLOPs: 670.1656. Time: 1380.3226 us. Best GFLOPs: 732.5370
2024-04-28 14:37:10 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #970: GFLOPs: 595.9594. Time: 1552.1942 us. Best GFLOPs: 732.5370
2024-04-28 14:37:10 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #971: GFLOPs: 555.9720. Time: 1663.8334 us. Best GFLOPs: 732.5370
2024-04-28 14:37:10 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #972: GFLOPs: 679.5274. Time: 1361.3059 us. Best GFLOPs: 732.5370
2024-04-28 14:37:10 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #973: GFLOPs: 598.0075. Time: 1546.8782 us. Best GFLOPs: 732.5370
2024-04-28 14:37:10 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #974: GFLOPs: 149.0908. Time: 6204.5726 us. Best GFLOPs: 732.5370
2024-04-28 14:37:10 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #975: GFLOPs: 148.7260. Time: 6219.7932 us. Best GFLOPs: 732.5370
2024-04-28 14:37:10 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #976: GFLOPs: 617.7822. Time: 1497.3639 us. Best GFLOPs: 732.5370
2024-04-28 14:37:10 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #977: GFLOPs: 705.8254. Time: 1310.5858 us. Best GFLOPs: 732.5370
2024-04-28 14:37:10 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #978: GFLOPs: 602.4404. Time: 1535.4957 us. Best GFLOPs: 732.5370
2024-04-28 14:37:10 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #979: GFLOPs: 597.1221. Time: 1549.1720 us. Best GFLOPs: 732.5370
2024-04-28 14:37:10 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #980: GFLOPs: 602.2635. Time: 1535.9469 us. Best GFLOPs: 732.5370
2024-04-28 14:37:10 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #981: GFLOPs: 429.9612. Time: 2151.4611 us. Best GFLOPs: 732.5370
2024-04-28 14:37:10 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #982: GFLOPs: 601.1488. Time: 1538.7949 us. Best GFLOPs: 732.5370
2024-04-28 14:37:10 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #983: GFLOPs: 622.8421. Time: 1485.1994 us. Best GFLOPs: 732.5370
2024-04-28 14:37:10 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #984: GFLOPs: 653.2701. Time: 1416.0217 us. Best GFLOPs: 732.5370
2024-04-28 14:37:10 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #985: GFLOPs: 692.2318. Time: 1336.3222 us. Best GFLOPs: 732.5370
2024-04-28 14:37:10 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #986: GFLOPs: 591.1461. Time: 1564.8328 us. Best GFLOPs: 732.5370
2024-04-28 14:37:10 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #987: GFLOPs: 664.4106. Time: 1392.2787 us. Best GFLOPs: 732.5370
2024-04-28 14:37:10 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #988: GFLOPs: 673.3710. Time: 1373.7519 us. Best GFLOPs: 732.5370
2024-04-28 14:37:10 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #989: GFLOPs: 684.0989. Time: 1352.2091 us. Best GFLOPs: 732.5370
2024-04-28 14:37:10 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #990: GFLOPs: 508.2333. Time: 1820.1182 us. Best GFLOPs: 732.5370
2024-04-28 14:37:10 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #991: GFLOPs: 254.4948. Time: 3634.8275 us. Best GFLOPs: 732.5370
2024-04-28 14:37:10 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #992: GFLOPs: 64.4555. Time: 14351.6903 us. Best GFLOPs: 732.5370
2024-04-28 14:37:10 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #993: GFLOPs: 569.2813. Time: 1624.9344 us. Best GFLOPs: 732.5370
2024-04-28 14:37:10 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #994: GFLOPs: 63.6205. Time: 14540.0509 us. Best GFLOPs: 732.5370
2024-04-28 14:37:10 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #995: GFLOPs: 149.0674. Time: 6205.5465 us. Best GFLOPs: 732.5370
2024-04-28 14:37:10 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #996: GFLOPs: 645.5758. Time: 1432.8987 us. Best GFLOPs: 732.5370
2024-04-28 14:37:10 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #997: GFLOPs: 648.3323. Time: 1426.8064 us. Best GFLOPs: 732.5370
2024-04-28 14:37:10 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #998: GFLOPs: 364.7572. Time: 2536.0563 us. Best GFLOPs: 732.5370
2024-04-28 14:37:10 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #999: GFLOPs: 68.2839. Time: 13547.0414 us. Best GFLOPs: 732.5370
2024-04-28 14:37:10 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #1000: GFLOPs: 323.0963. Time: 2863.0619 us. Best GFLOPs: 732.5370
2024-04-28 14:37:10 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #1001: GFLOPs: 42.0684. Time: 21989.0716 us. Best GFLOPs: 732.5370
2024-04-28 14:37:10 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #1002: GFLOPs: 29.4854. Time: 31372.9548 us. Best GFLOPs: 732.5370
2024-04-28 14:37:10 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #1003: GFLOPs: 34.5975. Time: 26737.3382 us. Best GFLOPs: 732.5370
2024-04-28 14:37:10 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #1004: GFLOPs: 355.0400. Time: 2605.4662 us. Best GFLOPs: 732.5370
2024-04-28 14:37:10 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #1005: GFLOPs: 595.3861. Time: 1553.6888 us. Best GFLOPs: 732.5370
2024-04-28 14:37:10 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #1006: GFLOPs: 586.2419. Time: 1577.9233 us. Best GFLOPs: 732.5370
2024-04-28 14:37:10 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #1007: GFLOPs: 550.0145. Time: 1681.8551 us. Best GFLOPs: 732.5370
2024-04-28 14:37:10 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #1008: GFLOPs: 600.5280. Time: 1540.3857 us. Best GFLOPs: 732.5370
2024-04-28 14:37:10 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #1009: GFLOPs: 661.4415. Time: 1398.5284 us. Best GFLOPs: 732.5370
2024-04-28 14:37:10 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #1010: GFLOPs: 660.7240. Time: 1400.0471 us. Best GFLOPs: 732.5370
2024-04-28 14:37:10 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #1011: GFLOPs: 554.8195. Time: 1667.2896 us. Best GFLOPs: 732.5370
2024-04-28 14:37:10 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #1012: GFLOPs: 445.6385. Time: 2075.7736 us. Best GFLOPs: 732.5370
2024-04-28 14:37:10 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #1013: GFLOPs: 383.5142. Time: 2412.0219 us. Best GFLOPs: 732.5370
2024-04-28 14:37:10 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #1014: GFLOPs: 535.5145. Time: 1727.3943 us. Best GFLOPs: 732.5370
2024-04-28 14:37:10 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #1015: GFLOPs: 439.4705. Time: 2104.9074 us. Best GFLOPs: 732.5370
2024-04-28 14:37:10 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #1016: GFLOPs: 472.8132. Time: 1956.4697 us. Best GFLOPs: 732.5370
2024-04-28 14:37:10 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #1017: GFLOPs: 636.1493. Time: 1454.1316 us. Best GFLOPs: 732.5370
2024-04-28 14:37:10 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #1018: GFLOPs: 608.9124. Time: 1519.1754 us. Best GFLOPs: 732.5370
2024-04-28 14:37:10 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #1019: GFLOPs: 549.1968. Time: 1684.3594 us. Best GFLOPs: 732.5370
2024-04-28 14:37:10 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #1020: GFLOPs: 459.4525. Time: 2013.3633 us. Best GFLOPs: 732.5370
2024-04-28 14:37:10 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #1021: GFLOPs: 592.3679. Time: 1561.6051 us. Best GFLOPs: 732.5370
2024-04-28 14:37:10 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #1022: GFLOPs: 83.8479. Time: 11032.4145 us. Best GFLOPs: 732.5370
2024-04-28 14:37:10 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #1023: GFLOPs: 3.9474. Time: 234341.0643 us. Best GFLOPs: 732.5370
2024-04-28 14:37:10 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #1024: GFLOPs: 0.3460. Time: 2673632.5000 us. Best GFLOPs: 732.5370
2024-04-28 14:44:36 [INFO] [evolutionary_search.cc:713] Generating candidates......
2024-04-28 14:44:37 [INFO] [evolutionary_search.cc:715] Picked top 102 candidate(s) from database
2024-04-28 14:44:41 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x3861aa8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x37d26b8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x4dd4148)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x3201bb8)]: 0 failure(s)
2024-04-28 14:44:41 [INFO] [evolutionary_search.cc:723] Sampled 410 candidate(s)
2024-04-28 14:44:53 [INFO] [evolutionary_search.cc:621] Evolve iter #0 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x3861aa8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x37d26b8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x4dd4148)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x3201bb8)]: 0 failure(s)
2024-04-28 14:45:05 [INFO] [evolutionary_search.cc:621] Evolve iter #1 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x3861aa8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x37d26b8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x4dd4148)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x3201bb8)]: 0 failure(s)
2024-04-28 14:45:18 [INFO] [evolutionary_search.cc:621] Evolve iter #2 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x3861aa8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x37d26b8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x4dd4148)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x3201bb8)]: 0 failure(s)
2024-04-28 14:45:30 [INFO] [evolutionary_search.cc:621] Evolve iter #3 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x3861aa8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x37d26b8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x4dd4148)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x3201bb8)]: 0 failure(s)
2024-04-28 14:45:37 [INFO] [evolutionary_search.cc:649] Scores of the best 64 candidates:
[1 : 16]:	0.9519  0.9519  0.9015  0.9012  0.8988  0.8914  0.8909  0.8909  0.8909  0.8876  0.8875  0.8779  0.8738  0.8704  0.8659  0.8581
[17 : 32]:	0.8411  0.8165  0.8150  0.8126  0.8115  0.8026  0.7935  0.7935  0.7935  0.7862  0.7727  0.7688  0.7671  0.7610  0.7605  0.7593
[33 : 48]:	0.7513  0.7468  0.7459  0.7333  0.7333  0.7300  0.7292  0.7288  0.7286  0.7216  0.7190  0.7169  0.7169  0.7169  0.7144  0.7116
[49 : 64]:	0.7081  0.7081  0.7078  0.7061  0.7061  0.7048  0.7004  0.6952  0.6952  0.6952  0.6949  0.6944  0.6940  0.6929  0.6916  0.6916
2024-04-28 14:45:38 [INFO] [evolutionary_search.cc:727] Got 64 candidate(s) with evolutionary search
2024-04-28 14:45:38 [INFO] [evolutionary_search.cc:730] Sending 64 candidates(s) for measurement
2024-04-28 14:47:30 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #1025: GFLOPs: 705.7744. Time: 1310.6805 us. Best GFLOPs: 732.5370
2024-04-28 14:47:30 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #1026: GFLOPs: 718.5399. Time: 1287.3951 us. Best GFLOPs: 732.5370
2024-04-28 14:47:30 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #1027: GFLOPs: 689.0263. Time: 1342.5390 us. Best GFLOPs: 732.5370
2024-04-28 14:47:30 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #1028: GFLOPs: 589.6949. Time: 1568.6837 us. Best GFLOPs: 732.5370
2024-04-28 14:47:30 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #1029: GFLOPs: 722.7692. Time: 1279.8619 us. Best GFLOPs: 732.5370
2024-04-28 14:47:30 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #1030: GFLOPs: 699.0866. Time: 1323.2190 us. Best GFLOPs: 732.5370
2024-04-28 14:47:30 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #1031: GFLOPs: 688.0051. Time: 1344.5317 us. Best GFLOPs: 732.5370
2024-04-28 14:47:30 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #1032: GFLOPs: 677.5441. Time: 1365.2908 us. Best GFLOPs: 732.5370
2024-04-28 14:47:30 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #1033: GFLOPs: 689.1685. Time: 1342.2621 us. Best GFLOPs: 732.5370
2024-04-28 14:47:30 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #1034: GFLOPs: 591.8417. Time: 1562.9934 us. Best GFLOPs: 732.5370
2024-04-28 14:47:30 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #1035: GFLOPs: 549.3163. Time: 1683.9929 us. Best GFLOPs: 732.5370
2024-04-28 14:47:30 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #1036: GFLOPs: 677.1898. Time: 1366.0050 us. Best GFLOPs: 732.5370
2024-04-28 14:47:30 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #1037: GFLOPs: 669.8942. Time: 1380.8818 us. Best GFLOPs: 732.5370
2024-04-28 14:47:30 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #1038: GFLOPs: 662.7037. Time: 1395.8647 us. Best GFLOPs: 732.5370
2024-04-28 14:47:30 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #1039: GFLOPs: 542.3703. Time: 1705.5594 us. Best GFLOPs: 732.5370
2024-04-28 14:47:30 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #1040: GFLOPs: 556.7667. Time: 1661.4583 us. Best GFLOPs: 732.5370
2024-04-28 14:47:30 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #1041: GFLOPs: 601.1283. Time: 1538.8475 us. Best GFLOPs: 732.5370
2024-04-28 14:47:30 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #1042: GFLOPs: 607.1603. Time: 1523.5594 us. Best GFLOPs: 732.5370
2024-04-28 14:47:30 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #1043: GFLOPs: 586.0368. Time: 1578.4755 us. Best GFLOPs: 732.5370
2024-04-28 14:47:30 [INFO] [task_scheduler.cc:121] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #1044: Error in building:
LocalBuilder: Timeout, killed after 30.0 seconds
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(1), T.int64(14), T.int64(14), T.int64(512)), "float32"), p1: T.Buffer((T.int64(32), T.int64(1), T.int64(3), T.int64(3), T.int64(512), T.int64(16)), "float32"), p2: T.Buffer((T.int64(1), T.int64(32), T.int64(1), T.int64(1), T.int64(16)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(32), T.int64(14), T.int64(14), T.int64(16)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        data_pad = T.alloc_buffer((T.int64(1), T.int64(1), T.int64(16), T.int64(16), T.int64(512)))
        conv2d_NCHWc = T.alloc_buffer((T.int64(1), T.int64(32), T.int64(14), T.int64(14), T.int64(16)))
        for n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_fused_fused in T.parallel(T.int64(448), annotations={"pragma_auto_unroll_max_step": 512, "pragma_unroll_explicit": 1}):
            for ax0, ax1, ax2, ax3, ax4 in T.grid(T.int64(1), T.int64(1), T.int64(9), T.int64(3), T.int64(512)):
                with T.block("data_pad"):
                    v_i0, v_i1 = T.axis.remap("SS", [ax0, ax1])
                    v_i2 = T.axis.spatial(T.int64(16), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_fused_fused % T.int64(14) // T.int64(7) * T.int64(7) + ax2)
                    v_i3 = T.axis.spatial(T.int64(16), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_fused_fused % T.int64(224) // T.int64(112) * T.int64(7) + n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_fused_fused % T.int64(7) + ax3)
                    v_i4 = T.axis.spatial(T.int64(512), ax4)
                    T.reads(p0[v_i0, v_i1, v_i2 - T.int64(1), v_i3 - T.int64(1), v_i4])
                    T.writes(data_pad[v_i0, v_i1, v_i2, v_i3, v_i4])
                    data_pad[v_i0, v_i1, v_i2, v_i3, v_i4] = T.if_then_else(T.int64(1) <= v_i2 and v_i2 < T.int64(15) and T.int64(1) <= v_i3 and v_i3 < T.int64(15), p0[v_i0, v_i1, v_i2 - T.int64(1), v_i3 - T.int64(1), v_i4], T.float32(0))
            for oc_block_1 in range(T.int64(1)):
                for n_2_init, oc_chunk_2_init, oh_2_init, ow_2_init, oc_block_2_init, n_3_init, oc_chunk_3_init, oh_3_init, ow_3_init, oc_block_3_init in T.grid(T.int64(1), T.int64(2), T.int64(1), T.int64(1), T.int64(16), T.int64(1), T.int64(1), T.int64(7), T.int64(1), T.int64(1)):
                    with T.block("conv2d_NCHWc_init"):
                        v_n = T.axis.spatial(T.int64(1), n_2_init + n_3_init)
                        v_oc_chunk = T.axis.spatial(T.int64(32), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_fused_fused // T.int64(224) * T.int64(16) + n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_fused_fused % T.int64(112) // T.int64(14) * T.int64(2) + oc_chunk_2_init + oc_chunk_3_init)
                        v_oh = T.axis.spatial(T.int64(14), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_fused_fused % T.int64(14) // T.int64(7) * T.int64(7) + oh_2_init * T.int64(7) + oh_3_init)
                        v_ow = T.axis.spatial(T.int64(14), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_fused_fused % T.int64(224) // T.int64(112) * T.int64(7) + n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_fused_fused % T.int64(7) + ow_2_init + ow_3_init)
                        v_oc_block = T.axis.spatial(T.int64(16), oc_block_1 * T.int64(16) + oc_block_2_init + oc_block_3_init)
                        T.reads()
                        T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                        T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                        conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = T.float32(0)
                for ic_0, kh_0, kw_0, n_2, oc_chunk_2, oh_2, ow_2, oc_block_2, ic_1, kh_1, kw_1, n_3, oc_chunk_3, oh_3, ow_3, oc_block_3 in T.grid(T.int64(128), T.int64(1), T.int64(3), T.int64(1), T.int64(2), T.int64(1), T.int64(1), T.int64(16), T.int64(4), T.int64(3), T.int64(1), T.int64(1), T.int64(1), T.int64(7), T.int64(1), T.int64(1)):
                    with T.block("conv2d_NCHWc_update"):
                        v_n = T.axis.spatial(T.int64(1), n_2 + n_3)
                        v_oc_chunk = T.axis.spatial(T.int64(32), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_fused_fused // T.int64(224) * T.int64(16) + n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_fused_fused % T.int64(112) // T.int64(14) * T.int64(2) + oc_chunk_2 + oc_chunk_3)
                        v_oh = T.axis.spatial(T.int64(14), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_fused_fused % T.int64(14) // T.int64(7) * T.int64(7) + oh_2 * T.int64(7) + oh_3)
                        v_ow = T.axis.spatial(T.int64(14), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_fused_fused % T.int64(224) // T.int64(112) * T.int64(7) + n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_fused_fused % T.int64(7) + ow_2 + ow_3)
                        v_oc_block = T.axis.spatial(T.int64(16), oc_block_1 * T.int64(16) + oc_block_2 + oc_block_3)
                        v_ic = T.axis.reduce(T.int64(512), ic_0 * T.int64(4) + ic_1)
                        v_kh = T.axis.reduce(T.int64(3), kh_0 * T.int64(3) + kh_1)
                        v_kw = T.axis.reduce(T.int64(3), kw_0 + kw_1)
                        T.reads(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block], data_pad[v_n, v_ic // T.int64(512), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(512)], p1[v_oc_chunk, v_ic // T.int64(512), v_kh, v_kw, v_ic % T.int64(512), v_oc_block])
                        T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                        T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                        conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] + data_pad[v_n, v_ic // T.int64(512), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(512)] * p1[v_oc_chunk, v_ic // T.int64(512), v_kh, v_kw, v_ic % T.int64(512), v_oc_block]
                for ax0, ax1, ax2 in T.grid(T.int64(1), T.int64(2), T.int64(7)):
                    for ax3_ax4_fused in T.vectorized(T.int64(16)):
                        with T.block("T_relu"):
                            v_ax0 = T.axis.spatial(T.int64(1), ax0)
                            v_ax1 = T.axis.spatial(T.int64(32), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_fused_fused // T.int64(224) * T.int64(16) + n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_fused_fused % T.int64(112) // T.int64(14) * T.int64(2) + ax1)
                            v_ax2 = T.axis.spatial(T.int64(14), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_fused_fused % T.int64(14) // T.int64(7) * T.int64(7) + ax2)
                            v_ax3 = T.axis.spatial(T.int64(14), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_fused_fused % T.int64(224) // T.int64(112) * T.int64(7) + n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_fused_fused % T.int64(7))
                            v_ax4 = T.axis.spatial(T.int64(16), ax3_ax4_fused)
                            T.reads(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4])
                            T.writes(T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                            T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.max(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] + p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4], T.float32(0))
b0 = sch.get_block(name="data_pad", func_name="main")
b1 = sch.get_block(name="conv2d_NCHWc", func_name="main")
b2 = sch.get_block(name="T_add", func_name="main")
b3 = sch.get_block(name="root", func_name="main")
sch.compute_inline(block=b2)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSRSRS")
l4, l5, l6, l7, l8, l9, l10, l11 = sch.get_loops(block=b1)
v12, v13, v14, v15 = sch.sample_perfect_tile(loop=l4, n=4, max_innermost_factor=64, decision=[1, 1, 1, 1])
l16, l17, l18, l19 = sch.split(loop=l4, factors=[v12, v13, v14, v15], preserve_unit_iters=True)
v20, v21, v22, v23 = sch.sample_perfect_tile(loop=l5, n=4, max_innermost_factor=64, decision=[2, 8, 2, 1])
l24, l25, l26, l27 = sch.split(loop=l5, factors=[v20, v21, v22, v23], preserve_unit_iters=True)
v28, v29, v30, v31 = sch.sample_perfect_tile(loop=l6, n=4, max_innermost_factor=64, decision=[1, 2, 1, 7])
l32, l33, l34, l35 = sch.split(loop=l6, factors=[v28, v29, v30, v31], preserve_unit_iters=True)
v36, v37, v38, v39 = sch.sample_perfect_tile(loop=l7, n=4, max_innermost_factor=64, decision=[2, 7, 1, 1])
l40, l41, l42, l43 = sch.split(loop=l7, factors=[v36, v37, v38, v39], preserve_unit_iters=True)
v44, v45, v46, v47 = sch.sample_perfect_tile(loop=l8, n=4, max_innermost_factor=64, decision=[1, 1, 16, 1])
l48, l49, l50, l51 = sch.split(loop=l8, factors=[v44, v45, v46, v47], preserve_unit_iters=True)
v52, v53 = sch.sample_perfect_tile(loop=l9, n=2, max_innermost_factor=64, decision=[128, 4])
l54, l55 = sch.split(loop=l9, factors=[v52, v53], preserve_unit_iters=True)
v56, v57 = sch.sample_perfect_tile(loop=l10, n=2, max_innermost_factor=64, decision=[1, 3])
l58, l59 = sch.split(loop=l10, factors=[v56, v57], preserve_unit_iters=True)
v60, v61 = sch.sample_perfect_tile(loop=l11, n=2, max_innermost_factor=64, decision=[3, 1])
l62, l63 = sch.split(loop=l11, factors=[v60, v61], preserve_unit_iters=True)
sch.reorder(l16, l24, l32, l40, l48, l17, l25, l33, l41, l49, l54, l58, l62, l18, l26, l34, l42, l50, l55, l59, l63, l19, l27, l35, l43, l51)
b64, = sch.get_consumers(block=b1)
sch.reverse_compute_at(block=b64, loop=l49, preserve_unit_loops=True, index=-1)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.vectorize", ann_val=64)
v65 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.unroll_explicit", ann_val=v65)
l66 = sch.sample_compute_location(block=b0, decision=8)
sch.compute_at(block=b0, loop=l66, preserve_unit_loops=True, index=-1)
sch.enter_postproc()
b67 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b67, ann_key="meta_schedule.parallel")
sch.unannotate(block_or_loop=b67, ann_key="meta_schedule.vectorize")
sch.unannotate(block_or_loop=b67, ann_key="meta_schedule.unroll_explicit")
b68, b69, b70 = sch.get_child_blocks(b67)
l71, l72, l73, l74, l75, l76, l77, l78, l79, l80, l81, l82, l83, l84 = sch.get_loops(block=b68)
l85 = sch.fuse(l71, l72, l73, l74, l75, l76, l77, l78, l79, preserve_unit_iters=True)
sch.parallel(loop=l85)
l86, l87, l88, l89, l90, l91, l92, l93, l94, l95, l96, l97, l98, l99, l100, l101, l102, l103 = sch.get_loops(block=b69)
l104 = sch.fuse(l86, preserve_unit_iters=True)
sch.parallel(loop=l104)
sch.annotate(block_or_loop=l104, ann_key="pragma_auto_unroll_max_step", ann_val=512)
sch.annotate(block_or_loop=l104, ann_key="pragma_unroll_explicit", ann_val=1)
l105, l106, l107, l108, l109, l110, l111 = sch.get_loops(block=b70)
l112 = sch.fuse(l110, l111, preserve_unit_iters=True)
sch.vectorize(loop=l112)
b113 = sch.get_block(name="conv2d_NCHWc", func_name="main")
l114, l115, l116, l117, l118, l119, l120, l121, l122, l123, l124, l125, l126, l127, l128, l129, l130, l131 = sch.get_loops(block=b113)
b132 = sch.decompose_reduction(block=b113, loop=l116)
2024-04-28 14:47:30 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #1045: GFLOPs: 580.4501. Time: 1593.6680 us. Best GFLOPs: 732.5370
2024-04-28 14:47:30 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #1046: GFLOPs: 654.0643. Time: 1414.3024 us. Best GFLOPs: 732.5370
2024-04-28 14:47:30 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #1047: GFLOPs: 567.6353. Time: 1629.6462 us. Best GFLOPs: 732.5370
2024-04-28 14:47:30 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #1048: GFLOPs: 654.4683. Time: 1413.4295 us. Best GFLOPs: 732.5370
2024-04-28 14:47:30 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #1049: GFLOPs: 642.6788. Time: 1439.3577 us. Best GFLOPs: 732.5370
2024-04-28 14:47:30 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #1050: GFLOPs: 581.4821. Time: 1590.8396 us. Best GFLOPs: 732.5370
2024-04-28 14:47:30 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #1051: GFLOPs: 457.2438. Time: 2023.0888 us. Best GFLOPs: 732.5370
2024-04-28 14:47:30 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #1052: GFLOPs: 663.5651. Time: 1394.0527 us. Best GFLOPs: 732.5370
2024-04-28 14:47:30 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #1053: GFLOPs: 603.2358. Time: 1533.4712 us. Best GFLOPs: 732.5370
2024-04-28 14:47:30 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #1054: GFLOPs: 635.7169. Time: 1455.1207 us. Best GFLOPs: 732.5370
2024-04-28 14:47:30 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #1055: GFLOPs: 569.6042. Time: 1624.0132 us. Best GFLOPs: 732.5370
2024-04-28 14:47:30 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #1056: GFLOPs: 585.3143. Time: 1580.4240 us. Best GFLOPs: 732.5370
2024-04-28 14:47:30 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #1057: GFLOPs: 574.9843. Time: 1608.8175 us. Best GFLOPs: 732.5370
2024-04-28 14:47:30 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #1058: GFLOPs: 540.9851. Time: 1709.9263 us. Best GFLOPs: 732.5370
2024-04-28 14:47:30 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #1059: GFLOPs: 544.2500. Time: 1699.6687 us. Best GFLOPs: 732.5370
2024-04-28 14:47:30 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #1060: GFLOPs: 506.1733. Time: 1827.5258 us. Best GFLOPs: 732.5370
2024-04-28 14:47:30 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #1061: GFLOPs: 521.7756. Time: 1772.8783 us. Best GFLOPs: 732.5370
2024-04-28 14:47:30 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #1062: GFLOPs: 534.7305. Time: 1729.9271 us. Best GFLOPs: 732.5370
2024-04-28 14:47:30 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #1063: GFLOPs: 519.4461. Time: 1780.8293 us. Best GFLOPs: 732.5370
2024-04-28 14:47:30 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #1064: GFLOPs: 576.0321. Time: 1605.8909 us. Best GFLOPs: 732.5370
2024-04-28 14:47:30 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #1065: GFLOPs: 482.5803. Time: 1916.8721 us. Best GFLOPs: 732.5370
2024-04-28 14:47:30 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #1066: GFLOPs: 669.4834. Time: 1381.7292 us. Best GFLOPs: 732.5370
2024-04-28 14:47:30 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #1067: GFLOPs: 516.4868. Time: 1791.0326 us. Best GFLOPs: 732.5370
2024-04-28 14:47:30 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #1068: GFLOPs: 338.2926. Time: 2734.4519 us. Best GFLOPs: 732.5370
2024-04-28 14:47:30 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #1069: GFLOPs: 338.9829. Time: 2728.8834 us. Best GFLOPs: 732.5370
2024-04-28 14:47:30 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #1070: GFLOPs: 335.5616. Time: 2756.7060 us. Best GFLOPs: 732.5370
2024-04-28 14:47:30 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #1071: GFLOPs: 303.4171. Time: 3048.7557 us. Best GFLOPs: 732.5370
2024-04-28 14:47:30 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #1072: GFLOPs: 161.0534. Time: 5743.7138 us. Best GFLOPs: 732.5370
2024-04-28 14:47:30 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #1073: GFLOPs: 536.5579. Time: 1724.0352 us. Best GFLOPs: 732.5370
2024-04-28 14:47:30 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #1074: GFLOPs: 536.3183. Time: 1724.8054 us. Best GFLOPs: 732.5370
2024-04-28 14:47:30 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #1075: GFLOPs: 508.5785. Time: 1818.8828 us. Best GFLOPs: 732.5370
2024-04-28 14:47:30 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #1076: GFLOPs: 379.7656. Time: 2435.8307 us. Best GFLOPs: 732.5370
2024-04-28 14:47:30 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #1077: GFLOPs: 377.1432. Time: 2452.7680 us. Best GFLOPs: 732.5370
2024-04-28 14:47:30 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #1078: GFLOPs: 492.9927. Time: 1876.3863 us. Best GFLOPs: 732.5370
2024-04-28 14:47:30 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #1079: GFLOPs: 519.3617. Time: 1781.1185 us. Best GFLOPs: 732.5370
2024-04-28 14:47:30 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #1080: GFLOPs: 275.1152. Time: 3362.3901 us. Best GFLOPs: 732.5370
2024-04-28 14:47:30 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #1081: GFLOPs: 275.5152. Time: 3357.5084 us. Best GFLOPs: 732.5370
2024-04-28 14:47:30 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #1082: GFLOPs: 274.7283. Time: 3367.1259 us. Best GFLOPs: 732.5370
2024-04-28 14:47:30 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #1083: GFLOPs: 448.9286. Time: 2060.5609 us. Best GFLOPs: 732.5370
2024-04-28 14:47:30 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #1084: GFLOPs: 487.2211. Time: 1898.6138 us. Best GFLOPs: 732.5370
2024-04-28 14:47:30 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #1085: GFLOPs: 472.4268. Time: 1958.0701 us. Best GFLOPs: 732.5370
2024-04-28 14:47:30 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #1086: GFLOPs: 75.8776. Time: 12191.2699 us. Best GFLOPs: 732.5370
2024-04-28 14:47:30 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #1087: GFLOPs: 53.4744. Time: 17298.8390 us. Best GFLOPs: 732.5370
2024-04-28 14:47:30 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #1088: GFLOPs: 24.4849. Time: 37780.2370 us. Best GFLOPs: 732.5370
2024-04-28 15:35:14 [INFO] [evolutionary_search.cc:713] Generating candidates......
2024-04-28 15:35:16 [INFO] [evolutionary_search.cc:715] Picked top 102 candidate(s) from database
2024-04-28 15:35:20 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x3861aa8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x37d26b8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x4dd4148)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x3201bb8)]: 0 failure(s)
2024-04-28 15:35:20 [INFO] [evolutionary_search.cc:723] Sampled 410 candidate(s)
2024-04-28 15:35:32 [INFO] [evolutionary_search.cc:621] Evolve iter #0 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x3861aa8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x37d26b8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x4dd4148)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x3201bb8)]: 0 failure(s)
2024-04-28 15:35:44 [INFO] [evolutionary_search.cc:621] Evolve iter #1 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x3861aa8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x37d26b8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x4dd4148)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x3201bb8)]: 0 failure(s)
2024-04-28 15:35:56 [INFO] [evolutionary_search.cc:621] Evolve iter #2 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x3861aa8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x37d26b8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x4dd4148)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x3201bb8)]: 0 failure(s)
2024-04-28 15:36:09 [INFO] [evolutionary_search.cc:621] Evolve iter #3 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x3861aa8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x37d26b8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x4dd4148)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x3201bb8)]: 0 failure(s)
2024-04-28 15:36:16 [INFO] [evolutionary_search.cc:649] Scores of the best 64 candidates:
[1 : 16]:	0.9522  0.9152  0.9152  0.9003  0.8970  0.8960  0.8955  0.8887  0.8797  0.8793  0.8793  0.8793  0.8793  0.8513  0.8513  0.8513
[17 : 32]:	0.8493  0.8484  0.8451  0.8451  0.8451  0.8413  0.8413  0.8339  0.8279  0.8279  0.8225  0.8179  0.8176  0.8139  0.8139  0.8004
[33 : 48]:	0.7906  0.7875  0.7830  0.7824  0.7816  0.7806  0.7794  0.7770  0.7739  0.7673  0.7640  0.7631  0.7583  0.7443  0.7438  0.7429
[49 : 64]:	0.7421  0.7368  0.7341  0.7326  0.7265  0.7223  0.7219  0.7173  0.7150  0.7146  0.7132  0.7114  0.7114  0.7111  0.7078  0.7068
2024-04-28 15:36:16 [INFO] [evolutionary_search.cc:727] Got 64 candidate(s) with evolutionary search
2024-04-28 15:36:16 [INFO] [evolutionary_search.cc:730] Sending 64 candidates(s) for measurement
2024-04-28 15:38:45 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #1089: GFLOPs: 709.7388. Time: 1303.3595 us. Best GFLOPs: 732.5370
2024-04-28 15:38:45 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #1090: GFLOPs: 674.4040. Time: 1371.6478 us. Best GFLOPs: 732.5370
2024-04-28 15:38:45 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #1091: GFLOPs: 651.2513. Time: 1420.4113 us. Best GFLOPs: 732.5370
2024-04-28 15:38:45 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #1092: GFLOPs: 673.8819. Time: 1372.7104 us. Best GFLOPs: 732.5370
2024-04-28 15:38:45 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #1093: GFLOPs: 654.4659. Time: 1413.4345 us. Best GFLOPs: 732.5370
2024-04-28 15:38:45 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #1094: GFLOPs: 625.3643. Time: 1479.2095 us. Best GFLOPs: 732.5370
2024-04-28 15:38:45 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #1095: GFLOPs: 624.2813. Time: 1481.7754 us. Best GFLOPs: 732.5370
2024-04-28 15:38:45 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #1096: GFLOPs: 665.2193. Time: 1390.5860 us. Best GFLOPs: 732.5370
2024-04-28 15:38:45 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #1097: GFLOPs: 491.8903. Time: 1880.5917 us. Best GFLOPs: 732.5370
2024-04-28 15:38:45 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #1098: GFLOPs: 587.6616. Time: 1574.1114 us. Best GFLOPs: 732.5370
2024-04-28 15:38:45 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #1099: GFLOPs: 630.3127. Time: 1467.5966 us. Best GFLOPs: 732.5370
2024-04-28 15:38:45 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #1100: GFLOPs: 647.6836. Time: 1428.2354 us. Best GFLOPs: 732.5370
2024-04-28 15:38:45 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #1101: GFLOPs: 652.1239. Time: 1418.5107 us. Best GFLOPs: 732.5370
2024-04-28 15:38:45 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #1102: GFLOPs: 602.4949. Time: 1535.3569 us. Best GFLOPs: 732.5370
2024-04-28 15:38:45 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #1103: GFLOPs: 659.1500. Time: 1403.3903 us. Best GFLOPs: 732.5370
2024-04-28 15:38:45 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #1104: GFLOPs: 613.0913. Time: 1508.8206 us. Best GFLOPs: 732.5370
2024-04-28 15:38:45 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #1105: GFLOPs: 692.8293. Time: 1335.1698 us. Best GFLOPs: 732.5370
2024-04-28 15:38:45 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #1106: GFLOPs: 642.7609. Time: 1439.1739 us. Best GFLOPs: 732.5370
2024-04-28 15:38:45 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #1107: GFLOPs: 658.8656. Time: 1403.9962 us. Best GFLOPs: 732.5370
2024-04-28 15:38:45 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #1108: GFLOPs: 636.4448. Time: 1453.4563 us. Best GFLOPs: 732.5370
2024-04-28 15:38:45 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #1109: GFLOPs: 654.8925. Time: 1412.5139 us. Best GFLOPs: 732.5370
2024-04-28 15:38:45 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #1110: GFLOPs: 627.1071. Time: 1475.0984 us. Best GFLOPs: 732.5370
2024-04-28 15:38:45 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #1111: GFLOPs: 621.3570. Time: 1488.7491 us. Best GFLOPs: 732.5370
2024-04-28 15:38:45 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #1112: GFLOPs: 641.4278. Time: 1442.1651 us. Best GFLOPs: 732.5370
2024-04-28 15:38:45 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #1113: GFLOPs: 625.5593. Time: 1478.7482 us. Best GFLOPs: 732.5370
2024-04-28 15:38:45 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #1114: GFLOPs: 607.7791. Time: 1522.0081 us. Best GFLOPs: 732.5370
2024-04-28 15:38:45 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #1115: GFLOPs: 576.1543. Time: 1605.5504 us. Best GFLOPs: 732.5370
2024-04-28 15:38:45 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #1116: GFLOPs: 549.2169. Time: 1684.2976 us. Best GFLOPs: 732.5370
2024-04-28 15:38:45 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #1117: GFLOPs: 584.6802. Time: 1582.1380 us. Best GFLOPs: 732.5370
2024-04-28 15:38:45 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #1118: GFLOPs: 604.8891. Time: 1529.2799 us. Best GFLOPs: 732.5370
2024-04-28 15:38:45 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #1119: GFLOPs: 604.8395. Time: 1529.4052 us. Best GFLOPs: 732.5370
2024-04-28 15:38:45 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #1120: GFLOPs: 614.9556. Time: 1504.2463 us. Best GFLOPs: 732.5370
2024-04-28 15:38:45 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #1121: GFLOPs: 502.7195. Time: 1840.0813 us. Best GFLOPs: 732.5370
2024-04-28 15:38:45 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #1122: GFLOPs: 642.0481. Time: 1440.7718 us. Best GFLOPs: 732.5370
2024-04-28 15:38:45 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #1123: GFLOPs: 615.7868. Time: 1502.2159 us. Best GFLOPs: 732.5370
2024-04-28 15:38:45 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #1124: GFLOPs: 580.7621. Time: 1592.8118 us. Best GFLOPs: 732.5370
2024-04-28 15:38:45 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #1125: GFLOPs: 549.7067. Time: 1682.7970 us. Best GFLOPs: 732.5370
2024-04-28 15:38:45 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #1126: GFLOPs: 549.6029. Time: 1683.1148 us. Best GFLOPs: 732.5370
2024-04-28 15:38:45 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #1127: GFLOPs: 154.4061. Time: 5990.9861 us. Best GFLOPs: 732.5370
2024-04-28 15:38:45 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #1128: GFLOPs: 560.3037. Time: 1650.9702 us. Best GFLOPs: 732.5370
2024-04-28 15:38:45 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #1129: GFLOPs: 310.7286. Time: 2977.0187 us. Best GFLOPs: 732.5370
2024-04-28 15:38:45 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #1130: GFLOPs: 619.4597. Time: 1493.3091 us. Best GFLOPs: 732.5370
2024-04-28 15:38:45 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #1131: GFLOPs: 613.8308. Time: 1507.0028 us. Best GFLOPs: 732.5370
2024-04-28 15:38:45 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #1132: GFLOPs: 485.5770. Time: 1905.0424 us. Best GFLOPs: 732.5370
2024-04-28 15:38:45 [INFO] [task_scheduler.cc:121] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #1133: Error in building:
LocalBuilder: Timeout, killed after 30.0 seconds
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(1), T.int64(14), T.int64(14), T.int64(512)), "float32"), p1: T.Buffer((T.int64(32), T.int64(1), T.int64(3), T.int64(3), T.int64(512), T.int64(16)), "float32"), p2: T.Buffer((T.int64(1), T.int64(32), T.int64(1), T.int64(1), T.int64(16)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(32), T.int64(14), T.int64(14), T.int64(16)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        data_pad = T.alloc_buffer((T.int64(1), T.int64(1), T.int64(16), T.int64(16), T.int64(512)))
        conv2d_NCHWc = T.alloc_buffer((T.int64(1), T.int64(32), T.int64(14), T.int64(14), T.int64(16)))
        for n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_fused_fused in T.parallel(T.int64(448), annotations={"pragma_auto_unroll_max_step": 512, "pragma_unroll_explicit": 1}):
            for ax0, ax1, ax2, ax3, ax4 in T.grid(T.int64(1), T.int64(1), T.int64(9), T.int64(4), T.int64(512)):
                with T.block("data_pad"):
                    v_i0, v_i1 = T.axis.remap("SS", [ax0, ax1])
                    v_i2 = T.axis.spatial(T.int64(16), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_fused_fused // T.int64(224) * T.int64(7) + ax2)
                    v_i3 = T.axis.spatial(T.int64(16), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_fused_fused % T.int64(7) * T.int64(2) + ax3)
                    v_i4 = T.axis.spatial(T.int64(512), ax4)
                    T.reads(p0[v_i0, v_i1, v_i2 - T.int64(1), v_i3 - T.int64(1), v_i4])
                    T.writes(data_pad[v_i0, v_i1, v_i2, v_i3, v_i4])
                    data_pad[v_i0, v_i1, v_i2, v_i3, v_i4] = T.if_then_else(T.int64(1) <= v_i2 and v_i2 < T.int64(15) and T.int64(1) <= v_i3 and v_i3 < T.int64(15), p0[v_i0, v_i1, v_i2 - T.int64(1), v_i3 - T.int64(1), v_i4], T.float32(0))
            for oc_block_1 in range(T.int64(1)):
                for n_2_init, oc_chunk_2_init, oh_2_init, ow_2_init, oc_block_2_init, n_3_init, oc_chunk_3_init, oh_3_init, ow_3_init, oc_block_3_init in T.grid(T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(16), T.int64(1), T.int64(1), T.int64(7), T.int64(1), T.int64(1)):
                    with T.block("conv2d_NCHWc_init"):
                        v_n = T.axis.spatial(T.int64(1), n_2_init + n_3_init)
                        v_oc_chunk = T.axis.spatial(T.int64(32), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_fused_fused % T.int64(224) // T.int64(7) + oc_chunk_2_init + oc_chunk_3_init)
                        v_oh = T.axis.spatial(T.int64(14), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_fused_fused // T.int64(224) * T.int64(7) + oh_2_init * T.int64(7) + oh_3_init)
                        v_ow = T.axis.spatial(T.int64(14), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_fused_fused % T.int64(7) * T.int64(2) + ow_2_init + ow_3_init)
                        v_oc_block = T.axis.spatial(T.int64(16), oc_block_1 * T.int64(16) + oc_block_2_init + oc_block_3_init)
                        T.reads()
                        T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                        T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                        conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = T.float32(0)
                for ic_0, kh_0, kw_0, n_2, oc_chunk_2, oh_2, ow_2, oc_block_2, ic_1, kh_1, kw_1, n_3, oc_chunk_3, oh_3, ow_3, oc_block_3 in T.grid(T.int64(256), T.int64(1), T.int64(3), T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(16), T.int64(2), T.int64(3), T.int64(1), T.int64(1), T.int64(1), T.int64(7), T.int64(1), T.int64(1)):
                    with T.block("conv2d_NCHWc_update"):
                        v_n = T.axis.spatial(T.int64(1), n_2 + n_3)
                        v_oc_chunk = T.axis.spatial(T.int64(32), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_fused_fused % T.int64(224) // T.int64(7) + oc_chunk_2 + oc_chunk_3)
                        v_oh = T.axis.spatial(T.int64(14), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_fused_fused // T.int64(224) * T.int64(7) + oh_2 * T.int64(7) + oh_3)
                        v_ow = T.axis.spatial(T.int64(14), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_fused_fused % T.int64(7) * T.int64(2) + ow_2 + ow_3)
                        v_oc_block = T.axis.spatial(T.int64(16), oc_block_1 * T.int64(16) + oc_block_2 + oc_block_3)
                        v_ic = T.axis.reduce(T.int64(512), ic_0 * T.int64(2) + ic_1)
                        v_kh = T.axis.reduce(T.int64(3), kh_0 * T.int64(3) + kh_1)
                        v_kw = T.axis.reduce(T.int64(3), kw_0 + kw_1)
                        T.reads(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block], data_pad[v_n, v_ic // T.int64(512), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(512)], p1[v_oc_chunk, v_ic // T.int64(512), v_kh, v_kw, v_ic % T.int64(512), v_oc_block])
                        T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                        T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                        conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] + data_pad[v_n, v_ic // T.int64(512), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(512)] * p1[v_oc_chunk, v_ic // T.int64(512), v_kh, v_kw, v_ic % T.int64(512), v_oc_block]
                for ax0, ax1, ax2 in T.grid(T.int64(1), T.int64(1), T.int64(7)):
                    for ax3_ax4_fused in T.vectorized(T.int64(32)):
                        with T.block("T_relu"):
                            v_ax0 = T.axis.spatial(T.int64(1), ax0)
                            v_ax1 = T.axis.spatial(T.int64(32), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_fused_fused % T.int64(224) // T.int64(7) + ax1)
                            v_ax2 = T.axis.spatial(T.int64(14), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_fused_fused // T.int64(224) * T.int64(7) + ax2)
                            v_ax3 = T.axis.spatial(T.int64(14), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_fused_fused % T.int64(7) * T.int64(2) + ax3_ax4_fused // T.int64(16))
                            v_ax4 = T.axis.spatial(T.int64(16), ax3_ax4_fused % T.int64(16))
                            T.reads(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4])
                            T.writes(T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                            T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.max(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] + p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4], T.float32(0))
b0 = sch.get_block(name="data_pad", func_name="main")
b1 = sch.get_block(name="conv2d_NCHWc", func_name="main")
b2 = sch.get_block(name="T_add", func_name="main")
b3 = sch.get_block(name="root", func_name="main")
sch.compute_inline(block=b2)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSRSRS")
l4, l5, l6, l7, l8, l9, l10, l11 = sch.get_loops(block=b1)
v12, v13, v14, v15 = sch.sample_perfect_tile(loop=l4, n=4, max_innermost_factor=64, decision=[1, 1, 1, 1])
l16, l17, l18, l19 = sch.split(loop=l4, factors=[v12, v13, v14, v15], preserve_unit_iters=True)
v20, v21, v22, v23 = sch.sample_perfect_tile(loop=l5, n=4, max_innermost_factor=64, decision=[1, 32, 1, 1])
l24, l25, l26, l27 = sch.split(loop=l5, factors=[v20, v21, v22, v23], preserve_unit_iters=True)
v28, v29, v30, v31 = sch.sample_perfect_tile(loop=l6, n=4, max_innermost_factor=64, decision=[2, 1, 1, 7])
l32, l33, l34, l35 = sch.split(loop=l6, factors=[v28, v29, v30, v31], preserve_unit_iters=True)
v36, v37, v38, v39 = sch.sample_perfect_tile(loop=l7, n=4, max_innermost_factor=64, decision=[1, 7, 2, 1])
l40, l41, l42, l43 = sch.split(loop=l7, factors=[v36, v37, v38, v39], preserve_unit_iters=True)
v44, v45, v46, v47 = sch.sample_perfect_tile(loop=l8, n=4, max_innermost_factor=64, decision=[1, 1, 16, 1])
l48, l49, l50, l51 = sch.split(loop=l8, factors=[v44, v45, v46, v47], preserve_unit_iters=True)
v52, v53 = sch.sample_perfect_tile(loop=l9, n=2, max_innermost_factor=64, decision=[256, 2])
l54, l55 = sch.split(loop=l9, factors=[v52, v53], preserve_unit_iters=True)
v56, v57 = sch.sample_perfect_tile(loop=l10, n=2, max_innermost_factor=64, decision=[1, 3])
l58, l59 = sch.split(loop=l10, factors=[v56, v57], preserve_unit_iters=True)
v60, v61 = sch.sample_perfect_tile(loop=l11, n=2, max_innermost_factor=64, decision=[3, 1])
l62, l63 = sch.split(loop=l11, factors=[v60, v61], preserve_unit_iters=True)
sch.reorder(l16, l24, l32, l40, l48, l17, l25, l33, l41, l49, l54, l58, l62, l18, l26, l34, l42, l50, l55, l59, l63, l19, l27, l35, l43, l51)
b64, = sch.get_consumers(block=b1)
sch.reverse_compute_at(block=b64, loop=l49, preserve_unit_loops=True, index=-1)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.vectorize", ann_val=64)
v65 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.unroll_explicit", ann_val=v65)
l66 = sch.sample_compute_location(block=b0, decision=8)
sch.compute_at(block=b0, loop=l66, preserve_unit_loops=True, index=-1)
sch.enter_postproc()
b67 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b67, ann_key="meta_schedule.parallel")
sch.unannotate(block_or_loop=b67, ann_key="meta_schedule.vectorize")
sch.unannotate(block_or_loop=b67, ann_key="meta_schedule.unroll_explicit")
b68, b69, b70 = sch.get_child_blocks(b67)
l71, l72, l73, l74, l75, l76, l77, l78, l79, l80, l81, l82, l83, l84 = sch.get_loops(block=b68)
l85 = sch.fuse(l71, l72, l73, l74, l75, l76, l77, l78, l79, preserve_unit_iters=True)
sch.parallel(loop=l85)
l86, l87, l88, l89, l90, l91, l92, l93, l94, l95, l96, l97, l98, l99, l100, l101, l102, l103 = sch.get_loops(block=b69)
l104 = sch.fuse(l86, preserve_unit_iters=True)
sch.parallel(loop=l104)
sch.annotate(block_or_loop=l104, ann_key="pragma_auto_unroll_max_step", ann_val=512)
sch.annotate(block_or_loop=l104, ann_key="pragma_unroll_explicit", ann_val=1)
l105, l106, l107, l108, l109, l110, l111 = sch.get_loops(block=b70)
l112 = sch.fuse(l110, l111, preserve_unit_iters=True)
sch.vectorize(loop=l112)
b113 = sch.get_block(name="conv2d_NCHWc", func_name="main")
l114, l115, l116, l117, l118, l119, l120, l121, l122, l123, l124, l125, l126, l127, l128, l129, l130, l131 = sch.get_loops(block=b113)
b132 = sch.decompose_reduction(block=b113, loop=l116)
2024-04-28 15:38:45 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #1134: GFLOPs: 415.3202. Time: 2227.3047 us. Best GFLOPs: 732.5370
2024-04-28 15:38:45 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #1135: GFLOPs: 601.5685. Time: 1537.7214 us. Best GFLOPs: 732.5370
2024-04-28 15:38:45 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #1136: GFLOPs: 521.7086. Time: 1773.1063 us. Best GFLOPs: 732.5370
2024-04-28 15:38:45 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #1137: GFLOPs: 554.5882. Time: 1667.9848 us. Best GFLOPs: 732.5370
2024-04-28 15:38:45 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #1138: GFLOPs: 531.1029. Time: 1741.7431 us. Best GFLOPs: 732.5370
2024-04-28 15:38:45 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #1139: GFLOPs: 595.8461. Time: 1552.4893 us. Best GFLOPs: 732.5370
2024-04-28 15:38:45 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #1140: GFLOPs: 569.1616. Time: 1625.2760 us. Best GFLOPs: 732.5370
2024-04-28 15:38:45 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #1141: GFLOPs: 613.4247. Time: 1508.0004 us. Best GFLOPs: 732.5370
2024-04-28 15:38:45 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #1142: GFLOPs: 473.0312. Time: 1955.5683 us. Best GFLOPs: 732.5370
2024-04-28 15:38:45 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #1143: GFLOPs: 635.0112. Time: 1456.7377 us. Best GFLOPs: 732.5370
2024-04-28 15:38:45 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #1144: GFLOPs: 664.9513. Time: 1391.1467 us. Best GFLOPs: 732.5370
2024-04-28 15:38:45 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #1145: GFLOPs: 529.9546. Time: 1745.5170 us. Best GFLOPs: 732.5370
2024-04-28 15:38:45 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #1146: GFLOPs: 485.3815. Time: 1905.8096 us. Best GFLOPs: 732.5370
2024-04-28 15:38:45 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #1147: GFLOPs: 524.0110. Time: 1765.3156 us. Best GFLOPs: 732.5370
2024-04-28 15:38:45 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #1148: GFLOPs: 509.9547. Time: 1813.9742 us. Best GFLOPs: 732.5370
2024-04-28 15:38:45 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #1149: GFLOPs: 509.2681. Time: 1816.4199 us. Best GFLOPs: 732.5370
2024-04-28 15:38:45 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #1150: GFLOPs: 4.0571. Time: 228005.4400 us. Best GFLOPs: 732.5370
2024-04-28 15:38:45 [INFO] [task_scheduler.cc:121] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #1151: Error in running:
LocalRunner: Timeout, killed after 30 seconds

# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(1), T.int64(14), T.int64(14), T.int64(512)), "float32"), p1: T.Buffer((T.int64(32), T.int64(1), T.int64(3), T.int64(3), T.int64(512), T.int64(16)), "float32"), p2: T.Buffer((T.int64(1), T.int64(32), T.int64(1), T.int64(1), T.int64(16)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(32), T.int64(14), T.int64(14), T.int64(16)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        data_pad = T.alloc_buffer((T.int64(1), T.int64(1), T.int64(16), T.int64(16), T.int64(512)))
        conv2d_NCHWc = T.alloc_buffer((T.int64(1), T.int64(32), T.int64(14), T.int64(14), T.int64(16)))
        for n_0 in T.serial(T.int64(1), annotations={"pragma_auto_unroll_max_step": 16, "pragma_unroll_explicit": 1}):
            for oc_chunk_0, oh_0, ow_0, oc_block_0 in T.grid(T.int64(1), T.int64(1), T.int64(1), T.int64(1)):
                for n_1, oc_chunk_1, oh_1, ow_1, oc_block_1 in T.grid(T.int64(1), T.int64(2), T.int64(1), T.int64(14), T.int64(4)):
                    for ax0, ax1, ax2, ax3, ax4 in T.grid(T.int64(1), T.int64(1), T.int64(16), T.int64(3), T.int64(512)):
                        with T.block("data_pad"):
                            v_i0, v_i1, v_i2 = T.axis.remap("SSS", [ax0, ax1, ax2])
                            v_i3 = T.axis.spatial(T.int64(16), ow_1 + ax3)
                            v_i4 = T.axis.spatial(T.int64(512), ax4)
                            T.reads(p0[v_i0, v_i1, v_i2 - T.int64(1), v_i3 - T.int64(1), v_i4])
                            T.writes(data_pad[v_i0, v_i1, v_i2, v_i3, v_i4])
                            data_pad[v_i0, v_i1, v_i2, v_i3, v_i4] = T.if_then_else(T.int64(1) <= v_i2 and v_i2 < T.int64(15) and T.int64(1) <= v_i3 and v_i3 < T.int64(15), p0[v_i0, v_i1, v_i2 - T.int64(1), v_i3 - T.int64(1), v_i4], T.float32(0))
                    for n_2_init, oc_chunk_2_init, oh_2_init, ow_2_init, oc_block_2_init, n_3_init, oc_chunk_3_init, oh_3_init, ow_3_init, oc_block_3_init in T.grid(T.int64(1), T.int64(2), T.int64(14), T.int64(1), T.int64(4), T.int64(1), T.int64(8), T.int64(1), T.int64(1), T.int64(1)):
                        with T.block("conv2d_NCHWc_init"):
                            v_n = T.axis.spatial(T.int64(1), n_0 + n_1 + n_2_init + n_3_init)
                            v_oc_chunk = T.axis.spatial(T.int64(32), oc_chunk_0 * T.int64(32) + oc_chunk_1 * T.int64(16) + oc_chunk_2_init * T.int64(8) + oc_chunk_3_init)
                            v_oh = T.axis.spatial(T.int64(14), oh_0 * T.int64(14) + oh_1 * T.int64(14) + oh_2_init + oh_3_init)
                            v_ow = T.axis.spatial(T.int64(14), ow_0 * T.int64(14) + ow_1 + ow_2_init + ow_3_init)
                            v_oc_block = T.axis.spatial(T.int64(16), oc_block_0 * T.int64(16) + oc_block_1 * T.int64(4) + oc_block_2_init + oc_block_3_init)
                            T.reads()
                            T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                            T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                            conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = T.float32(0)
                    for ic_0, kh_0, kw_0, n_2, oc_chunk_2, oh_2, ow_2, oc_block_2, ic_1, kh_1, kw_1, n_3, oc_chunk_3, oh_3, ow_3, oc_block_3 in T.grid(T.int64(512), T.int64(1), T.int64(3), T.int64(1), T.int64(2), T.int64(14), T.int64(1), T.int64(4), T.int64(1), T.int64(3), T.int64(1), T.int64(1), T.int64(8), T.int64(1), T.int64(1), T.int64(1)):
                        with T.block("conv2d_NCHWc_update"):
                            v_n = T.axis.spatial(T.int64(1), n_0 + n_1 + n_2 + n_3)
                            v_oc_chunk = T.axis.spatial(T.int64(32), oc_chunk_0 * T.int64(32) + oc_chunk_1 * T.int64(16) + oc_chunk_2 * T.int64(8) + oc_chunk_3)
                            v_oh = T.axis.spatial(T.int64(14), oh_0 * T.int64(14) + oh_1 * T.int64(14) + oh_2 + oh_3)
                            v_ow = T.axis.spatial(T.int64(14), ow_0 * T.int64(14) + ow_1 + ow_2 + ow_3)
                            v_oc_block = T.axis.spatial(T.int64(16), oc_block_0 * T.int64(16) + oc_block_1 * T.int64(4) + oc_block_2 + oc_block_3)
                            v_ic = T.axis.reduce(T.int64(512), ic_0 + ic_1)
                            v_kh = T.axis.reduce(T.int64(3), kh_0 * T.int64(3) + kh_1)
                            v_kw = T.axis.reduce(T.int64(3), kw_0 + kw_1)
                            T.reads(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block], data_pad[v_n, v_ic // T.int64(512), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(512)], p1[v_oc_chunk, v_ic // T.int64(512), v_kh, v_kw, v_ic % T.int64(512), v_oc_block])
                            T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                            T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                            conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] + data_pad[v_n, v_ic // T.int64(512), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(512)] * p1[v_oc_chunk, v_ic // T.int64(512), v_kh, v_kw, v_ic % T.int64(512), v_oc_block]
                for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(32), T.int64(14), T.int64(14)):
                    for ax4_fused in T.vectorized(T.int64(16)):
                        with T.block("T_relu"):
                            v_ax0, v_ax1, v_ax2, v_ax3, v_ax4 = T.axis.remap("SSSSS", [ax0, ax1, ax2, ax3, ax4_fused])
                            T.reads(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4])
                            T.writes(T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                            T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.max(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] + p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4], T.float32(0))
b0 = sch.get_block(name="data_pad", func_name="main")
b1 = sch.get_block(name="conv2d_NCHWc", func_name="main")
b2 = sch.get_block(name="T_add", func_name="main")
b3 = sch.get_block(name="root", func_name="main")
sch.compute_inline(block=b2)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSRSRS")
l4, l5, l6, l7, l8, l9, l10, l11 = sch.get_loops(block=b1)
v12, v13, v14, v15 = sch.sample_perfect_tile(loop=l4, n=4, max_innermost_factor=64, decision=[1, 1, 1, 1])
l16, l17, l18, l19 = sch.split(loop=l4, factors=[v12, v13, v14, v15], preserve_unit_iters=True)
v20, v21, v22, v23 = sch.sample_perfect_tile(loop=l5, n=4, max_innermost_factor=64, decision=[1, 2, 2, 8])
l24, l25, l26, l27 = sch.split(loop=l5, factors=[v20, v21, v22, v23], preserve_unit_iters=True)
v28, v29, v30, v31 = sch.sample_perfect_tile(loop=l6, n=4, max_innermost_factor=64, decision=[1, 1, 14, 1])
l32, l33, l34, l35 = sch.split(loop=l6, factors=[v28, v29, v30, v31], preserve_unit_iters=True)
v36, v37, v38, v39 = sch.sample_perfect_tile(loop=l7, n=4, max_innermost_factor=64, decision=[1, 14, 1, 1])
l40, l41, l42, l43 = sch.split(loop=l7, factors=[v36, v37, v38, v39], preserve_unit_iters=True)
v44, v45, v46, v47 = sch.sample_perfect_tile(loop=l8, n=4, max_innermost_factor=64, decision=[1, 4, 4, 1])
l48, l49, l50, l51 = sch.split(loop=l8, factors=[v44, v45, v46, v47], preserve_unit_iters=True)
v52, v53 = sch.sample_perfect_tile(loop=l9, n=2, max_innermost_factor=64, decision=[512, 1])
l54, l55 = sch.split(loop=l9, factors=[v52, v53], preserve_unit_iters=True)
v56, v57 = sch.sample_perfect_tile(loop=l10, n=2, max_innermost_factor=64, decision=[1, 3])
l58, l59 = sch.split(loop=l10, factors=[v56, v57], preserve_unit_iters=True)
v60, v61 = sch.sample_perfect_tile(loop=l11, n=2, max_innermost_factor=64, decision=[3, 1])
l62, l63 = sch.split(loop=l11, factors=[v60, v61], preserve_unit_iters=True)
sch.reorder(l16, l24, l32, l40, l48, l17, l25, l33, l41, l49, l54, l58, l62, l18, l26, l34, l42, l50, l55, l59, l63, l19, l27, l35, l43, l51)
b64, = sch.get_consumers(block=b1)
sch.reverse_compute_at(block=b64, loop=l48, preserve_unit_loops=True, index=-1)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.vectorize", ann_val=64)
v65 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=1)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.unroll_explicit", ann_val=v65)
l66 = sch.sample_compute_location(block=b0, decision=9)
sch.compute_at(block=b0, loop=l66, preserve_unit_loops=True, index=-1)
sch.enter_postproc()
b67 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b67, ann_key="meta_schedule.parallel")
sch.unannotate(block_or_loop=b67, ann_key="meta_schedule.vectorize")
sch.unannotate(block_or_loop=b67, ann_key="meta_schedule.unroll_explicit")
b68, b69, b70 = sch.get_child_blocks(b67)
l71, l72, l73, l74, l75, l76, l77, l78, l79, l80, l81, l82, l83, l84, l85 = sch.get_loops(block=b68)
l86, l87, l88, l89, l90, l91, l92, l93, l94, l95, l96, l97, l98, l99, l100, l101, l102, l103, l104, l105, l106, l107, l108, l109, l110, l111 = sch.get_loops(block=b69)
sch.annotate(block_or_loop=l86, ann_key="pragma_auto_unroll_max_step", ann_val=16)
sch.annotate(block_or_loop=l86, ann_key="pragma_unroll_explicit", ann_val=1)
l112, l113, l114, l115, l116, l117, l118, l119, l120, l121 = sch.get_loops(block=b70)
l122 = sch.fuse(l121, preserve_unit_iters=True)
sch.vectorize(loop=l122)
b123 = sch.get_block(name="conv2d_NCHWc", func_name="main")
l124, l125, l126, l127, l128, l129, l130, l131, l132, l133, l134, l135, l136, l137, l138, l139, l140, l141, l142, l143, l144, l145, l146, l147, l148, l149 = sch.get_loops(block=b123)
b150 = sch.decompose_reduction(block=b123, loop=l134)
2024-04-28 15:38:45 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #1152: GFLOPs: 8.9072. Time: 103853.6810 us. Best GFLOPs: 732.5370
2024-04-28 15:54:55 [INFO] [evolutionary_search.cc:713] Generating candidates......
2024-04-28 15:54:56 [INFO] [evolutionary_search.cc:715] Picked top 102 candidate(s) from database
2024-04-28 15:55:00 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x3861aa8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x37d26b8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x4dd4148)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x3201bb8)]: 0 failure(s)
2024-04-28 15:55:00 [INFO] [evolutionary_search.cc:723] Sampled 410 candidate(s)
2024-04-28 15:55:12 [INFO] [evolutionary_search.cc:621] Evolve iter #0 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x3861aa8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x37d26b8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x4dd4148)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x3201bb8)]: 0 failure(s)
2024-04-28 15:55:25 [INFO] [evolutionary_search.cc:621] Evolve iter #1 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x3861aa8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x37d26b8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x4dd4148)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x3201bb8)]: 0 failure(s)
2024-04-28 15:55:37 [INFO] [evolutionary_search.cc:621] Evolve iter #2 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x3861aa8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x37d26b8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x4dd4148)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x3201bb8)]: 0 failure(s)
2024-04-28 15:55:50 [INFO] [evolutionary_search.cc:621] Evolve iter #3 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x3861aa8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x37d26b8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x4dd4148)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x3201bb8)]: 0 failure(s)
2024-04-28 15:55:57 [INFO] [evolutionary_search.cc:649] Scores of the best 64 candidates:
[1 : 16]:	0.9083  0.9076  0.8987  0.8979  0.8979  0.8903  0.8713  0.8592  0.8574  0.8570  0.8570  0.8569  0.8561  0.8526  0.8421  0.8420
[17 : 32]:	0.8420  0.8408  0.8408  0.8408  0.8360  0.8159  0.8132  0.8120  0.8074  0.8074  0.8074  0.8072  0.8072  0.8072  0.8072  0.8072
[33 : 48]:	0.8058  0.8002  0.7987  0.7952  0.7769  0.7736  0.7608  0.7562  0.7549  0.7533  0.7527  0.7493  0.7484  0.7391  0.7369  0.7335
[49 : 64]:	0.7317  0.7286  0.7204  0.7190  0.7133  0.7133  0.7133  0.7071  0.7059  0.7059  0.7052  0.7052  0.7032  0.7015  0.7004  0.6977
2024-04-28 15:55:57 [INFO] [evolutionary_search.cc:727] Got 64 candidate(s) with evolutionary search
2024-04-28 15:55:57 [INFO] [evolutionary_search.cc:730] Sending 64 candidates(s) for measurement
2024-04-28 15:57:57 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #1153: GFLOPs: 583.8694. Time: 1584.3351 us. Best GFLOPs: 732.5370
2024-04-28 15:57:57 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #1154: GFLOPs: 659.1875. Time: 1403.3105 us. Best GFLOPs: 732.5370
2024-04-28 15:57:57 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #1155: GFLOPs: 674.1503. Time: 1372.1640 us. Best GFLOPs: 732.5370
2024-04-28 15:57:57 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #1156: GFLOPs: 665.1324. Time: 1390.7679 us. Best GFLOPs: 732.5370
2024-04-28 15:57:57 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #1157: GFLOPs: 673.1323. Time: 1374.2392 us. Best GFLOPs: 732.5370
2024-04-28 15:57:57 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #1158: GFLOPs: 655.7857. Time: 1410.5901 us. Best GFLOPs: 732.5370
2024-04-28 15:57:57 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #1159: GFLOPs: 644.5252. Time: 1435.2343 us. Best GFLOPs: 732.5370
2024-04-28 15:57:57 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #1160: GFLOPs: 653.8369. Time: 1414.7943 us. Best GFLOPs: 732.5370
2024-04-28 15:57:57 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #1161: GFLOPs: 658.2289. Time: 1405.3542 us. Best GFLOPs: 732.5370
2024-04-28 15:57:57 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #1162: GFLOPs: 650.4215. Time: 1422.2234 us. Best GFLOPs: 732.5370
2024-04-28 15:57:57 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #1163: GFLOPs: 646.5634. Time: 1430.7100 us. Best GFLOPs: 732.5370
2024-04-28 15:57:57 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #1164: GFLOPs: 669.4541. Time: 1381.7896 us. Best GFLOPs: 732.5370
2024-04-28 15:57:57 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #1165: GFLOPs: 577.6321. Time: 1601.4429 us. Best GFLOPs: 732.5370
2024-04-28 15:57:57 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #1166: GFLOPs: 626.8146. Time: 1475.7868 us. Best GFLOPs: 732.5370
2024-04-28 15:57:57 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #1167: GFLOPs: 586.5455. Time: 1577.1064 us. Best GFLOPs: 732.5370
2024-04-28 15:57:57 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #1168: GFLOPs: 628.3465. Time: 1472.1889 us. Best GFLOPs: 732.5370
2024-04-28 15:57:57 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #1169: GFLOPs: 616.2338. Time: 1501.1262 us. Best GFLOPs: 732.5370
2024-04-28 15:57:57 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #1170: GFLOPs: 580.6382. Time: 1593.1516 us. Best GFLOPs: 732.5370
2024-04-28 15:57:57 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #1171: GFLOPs: 627.2428. Time: 1474.7792 us. Best GFLOPs: 732.5370
2024-04-28 15:57:57 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #1172: GFLOPs: 612.1712. Time: 1511.0884 us. Best GFLOPs: 732.5370
2024-04-28 15:57:57 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #1173: GFLOPs: 642.2316. Time: 1440.3601 us. Best GFLOPs: 732.5370
2024-04-28 15:57:57 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #1174: GFLOPs: 623.0997. Time: 1484.5855 us. Best GFLOPs: 732.5370
2024-04-28 15:57:57 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #1175: GFLOPs: 554.4244. Time: 1668.4778 us. Best GFLOPs: 732.5370
2024-04-28 15:57:57 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #1176: GFLOPs: 603.6803. Time: 1532.3420 us. Best GFLOPs: 732.5370
2024-04-28 15:57:57 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #1177: GFLOPs: 593.6662. Time: 1558.1900 us. Best GFLOPs: 732.5370
2024-04-28 15:57:57 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #1178: GFLOPs: 585.7486. Time: 1579.2521 us. Best GFLOPs: 732.5370
2024-04-28 15:57:57 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #1179: GFLOPs: 626.7165. Time: 1476.0180 us. Best GFLOPs: 732.5370
2024-04-28 15:57:57 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #1180: GFLOPs: 601.1996. Time: 1538.6649 us. Best GFLOPs: 732.5370
2024-04-28 15:57:57 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #1181: GFLOPs: 311.4137. Time: 2970.4688 us. Best GFLOPs: 732.5370
2024-04-28 15:57:57 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #1182: GFLOPs: 589.3858. Time: 1569.5063 us. Best GFLOPs: 732.5370
2024-04-28 15:57:57 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #1183: GFLOPs: 606.9077. Time: 1524.1934 us. Best GFLOPs: 732.5370
2024-04-28 15:57:57 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #1184: GFLOPs: 593.1437. Time: 1559.5627 us. Best GFLOPs: 732.5370
2024-04-28 15:57:57 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #1185: GFLOPs: 643.5532. Time: 1437.4022 us. Best GFLOPs: 732.5370
2024-04-28 15:57:57 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #1186: GFLOPs: 609.2953. Time: 1518.2206 us. Best GFLOPs: 732.5370
2024-04-28 15:57:57 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #1187: GFLOPs: 598.7045. Time: 1545.0774 us. Best GFLOPs: 732.5370
2024-04-28 15:57:57 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #1188: GFLOPs: 563.5351. Time: 1641.5033 us. Best GFLOPs: 732.5370
2024-04-28 15:57:57 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #1189: GFLOPs: 615.2498. Time: 1503.5271 us. Best GFLOPs: 732.5370
2024-04-28 15:57:57 [INFO] [task_scheduler.cc:121] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #1190: Error in building:
LocalBuilder: Timeout, killed after 30.0 seconds
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(1), T.int64(14), T.int64(14), T.int64(512)), "float32"), p1: T.Buffer((T.int64(32), T.int64(1), T.int64(3), T.int64(3), T.int64(512), T.int64(16)), "float32"), p2: T.Buffer((T.int64(1), T.int64(32), T.int64(1), T.int64(1), T.int64(16)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(32), T.int64(14), T.int64(14), T.int64(16)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        data_pad = T.alloc_buffer((T.int64(1), T.int64(1), T.int64(16), T.int64(16), T.int64(512)))
        conv2d_NCHWc = T.alloc_buffer((T.int64(1), T.int64(32), T.int64(14), T.int64(14), T.int64(16)))
        for n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_fused_fused in T.parallel(T.int64(896), annotations={"pragma_auto_unroll_max_step": 512, "pragma_unroll_explicit": 1}):
            for ax0, ax1, ax2, ax3, ax4 in T.grid(T.int64(1), T.int64(1), T.int64(9), T.int64(3), T.int64(512)):
                with T.block("data_pad"):
                    v_i0, v_i1 = T.axis.remap("SS", [ax0, ax1])
                    v_i2 = T.axis.spatial(T.int64(16), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_fused_fused % T.int64(14) // T.int64(7) * T.int64(7) + ax2)
                    v_i3 = T.axis.spatial(T.int64(16), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_fused_fused % T.int64(224) // T.int64(112) * T.int64(7) + n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_fused_fused % T.int64(7) + ax3)
                    v_i4 = T.axis.spatial(T.int64(512), ax4)
                    T.reads(p0[v_i0, v_i1, v_i2 - T.int64(1), v_i3 - T.int64(1), v_i4])
                    T.writes(data_pad[v_i0, v_i1, v_i2, v_i3, v_i4])
                    data_pad[v_i0, v_i1, v_i2, v_i3, v_i4] = T.if_then_else(T.int64(1) <= v_i2 and v_i2 < T.int64(15) and T.int64(1) <= v_i3 and v_i3 < T.int64(15), p0[v_i0, v_i1, v_i2 - T.int64(1), v_i3 - T.int64(1), v_i4], T.float32(0))
            for oc_block_1 in range(T.int64(1)):
                for n_2_init, oc_chunk_2_init, oh_2_init, ow_2_init, oc_block_2_init, n_3_init, oc_chunk_3_init, oh_3_init, ow_3_init, oc_block_3_init in T.grid(T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(16), T.int64(1), T.int64(1), T.int64(7), T.int64(1), T.int64(1)):
                    with T.block("conv2d_NCHWc_init"):
                        v_n = T.axis.spatial(T.int64(1), n_2_init + n_3_init)
                        v_oc_chunk = T.axis.spatial(T.int64(32), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_fused_fused // T.int64(224) * T.int64(8) + n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_fused_fused % T.int64(112) // T.int64(14) + oc_chunk_2_init + oc_chunk_3_init)
                        v_oh = T.axis.spatial(T.int64(14), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_fused_fused % T.int64(14) // T.int64(7) * T.int64(7) + oh_2_init * T.int64(7) + oh_3_init)
                        v_ow = T.axis.spatial(T.int64(14), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_fused_fused % T.int64(224) // T.int64(112) * T.int64(7) + n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_fused_fused % T.int64(7) + ow_2_init + ow_3_init)
                        v_oc_block = T.axis.spatial(T.int64(16), oc_block_1 * T.int64(16) + oc_block_2_init + oc_block_3_init)
                        T.reads()
                        T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                        T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                        conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = T.float32(0)
                for ic_0, kh_0, kw_0, n_2, oc_chunk_2, oh_2, ow_2, oc_block_2, ic_1, kh_1, kw_1, n_3, oc_chunk_3, oh_3, ow_3, oc_block_3 in T.grid(T.int64(128), T.int64(1), T.int64(3), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(16), T.int64(4), T.int64(3), T.int64(1), T.int64(1), T.int64(1), T.int64(7), T.int64(1), T.int64(1)):
                    with T.block("conv2d_NCHWc_update"):
                        v_n = T.axis.spatial(T.int64(1), n_2 + n_3)
                        v_oc_chunk = T.axis.spatial(T.int64(32), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_fused_fused // T.int64(224) * T.int64(8) + n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_fused_fused % T.int64(112) // T.int64(14) + oc_chunk_2 + oc_chunk_3)
                        v_oh = T.axis.spatial(T.int64(14), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_fused_fused % T.int64(14) // T.int64(7) * T.int64(7) + oh_2 * T.int64(7) + oh_3)
                        v_ow = T.axis.spatial(T.int64(14), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_fused_fused % T.int64(224) // T.int64(112) * T.int64(7) + n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_fused_fused % T.int64(7) + ow_2 + ow_3)
                        v_oc_block = T.axis.spatial(T.int64(16), oc_block_1 * T.int64(16) + oc_block_2 + oc_block_3)
                        v_ic = T.axis.reduce(T.int64(512), ic_0 * T.int64(4) + ic_1)
                        v_kh = T.axis.reduce(T.int64(3), kh_0 * T.int64(3) + kh_1)
                        v_kw = T.axis.reduce(T.int64(3), kw_0 + kw_1)
                        T.reads(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block], data_pad[v_n, v_ic // T.int64(512), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(512)], p1[v_oc_chunk, v_ic // T.int64(512), v_kh, v_kw, v_ic % T.int64(512), v_oc_block])
                        T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                        T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                        conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] + data_pad[v_n, v_ic // T.int64(512), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(512)] * p1[v_oc_chunk, v_ic // T.int64(512), v_kh, v_kw, v_ic % T.int64(512), v_oc_block]
                for ax0, ax1, ax2 in T.grid(T.int64(1), T.int64(1), T.int64(7)):
                    for ax3_ax4_fused in T.vectorized(T.int64(16)):
                        with T.block("T_relu"):
                            v_ax0 = T.axis.spatial(T.int64(1), ax0)
                            v_ax1 = T.axis.spatial(T.int64(32), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_fused_fused // T.int64(224) * T.int64(8) + n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_fused_fused % T.int64(112) // T.int64(14) + ax1)
                            v_ax2 = T.axis.spatial(T.int64(14), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_fused_fused % T.int64(14) // T.int64(7) * T.int64(7) + ax2)
                            v_ax3 = T.axis.spatial(T.int64(14), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_fused_fused % T.int64(224) // T.int64(112) * T.int64(7) + n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_fused_fused % T.int64(7))
                            v_ax4 = T.axis.spatial(T.int64(16), ax3_ax4_fused)
                            T.reads(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4])
                            T.writes(T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                            T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.max(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] + p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4], T.float32(0))
b0 = sch.get_block(name="data_pad", func_name="main")
b1 = sch.get_block(name="conv2d_NCHWc", func_name="main")
b2 = sch.get_block(name="T_add", func_name="main")
b3 = sch.get_block(name="root", func_name="main")
sch.compute_inline(block=b2)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSRSRS")
l4, l5, l6, l7, l8, l9, l10, l11 = sch.get_loops(block=b1)
v12, v13, v14, v15 = sch.sample_perfect_tile(loop=l4, n=4, max_innermost_factor=64, decision=[1, 1, 1, 1])
l16, l17, l18, l19 = sch.split(loop=l4, factors=[v12, v13, v14, v15], preserve_unit_iters=True)
v20, v21, v22, v23 = sch.sample_perfect_tile(loop=l5, n=4, max_innermost_factor=64, decision=[4, 8, 1, 1])
l24, l25, l26, l27 = sch.split(loop=l5, factors=[v20, v21, v22, v23], preserve_unit_iters=True)
v28, v29, v30, v31 = sch.sample_perfect_tile(loop=l6, n=4, max_innermost_factor=64, decision=[1, 2, 1, 7])
l32, l33, l34, l35 = sch.split(loop=l6, factors=[v28, v29, v30, v31], preserve_unit_iters=True)
v36, v37, v38, v39 = sch.sample_perfect_tile(loop=l7, n=4, max_innermost_factor=64, decision=[2, 7, 1, 1])
l40, l41, l42, l43 = sch.split(loop=l7, factors=[v36, v37, v38, v39], preserve_unit_iters=True)
v44, v45, v46, v47 = sch.sample_perfect_tile(loop=l8, n=4, max_innermost_factor=64, decision=[1, 1, 16, 1])
l48, l49, l50, l51 = sch.split(loop=l8, factors=[v44, v45, v46, v47], preserve_unit_iters=True)
v52, v53 = sch.sample_perfect_tile(loop=l9, n=2, max_innermost_factor=64, decision=[128, 4])
l54, l55 = sch.split(loop=l9, factors=[v52, v53], preserve_unit_iters=True)
v56, v57 = sch.sample_perfect_tile(loop=l10, n=2, max_innermost_factor=64, decision=[1, 3])
l58, l59 = sch.split(loop=l10, factors=[v56, v57], preserve_unit_iters=True)
v60, v61 = sch.sample_perfect_tile(loop=l11, n=2, max_innermost_factor=64, decision=[3, 1])
l62, l63 = sch.split(loop=l11, factors=[v60, v61], preserve_unit_iters=True)
sch.reorder(l16, l24, l32, l40, l48, l17, l25, l33, l41, l49, l54, l58, l62, l18, l26, l34, l42, l50, l55, l59, l63, l19, l27, l35, l43, l51)
b64, = sch.get_consumers(block=b1)
sch.reverse_compute_at(block=b64, loop=l49, preserve_unit_loops=True, index=-1)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.vectorize", ann_val=64)
v65 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.unroll_explicit", ann_val=v65)
l66 = sch.sample_compute_location(block=b0, decision=8)
sch.compute_at(block=b0, loop=l66, preserve_unit_loops=True, index=-1)
sch.enter_postproc()
b67 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b67, ann_key="meta_schedule.parallel")
sch.unannotate(block_or_loop=b67, ann_key="meta_schedule.vectorize")
sch.unannotate(block_or_loop=b67, ann_key="meta_schedule.unroll_explicit")
b68, b69, b70 = sch.get_child_blocks(b67)
l71, l72, l73, l74, l75, l76, l77, l78, l79, l80, l81, l82, l83, l84 = sch.get_loops(block=b68)
l85 = sch.fuse(l71, l72, l73, l74, l75, l76, l77, l78, l79, preserve_unit_iters=True)
sch.parallel(loop=l85)
l86, l87, l88, l89, l90, l91, l92, l93, l94, l95, l96, l97, l98, l99, l100, l101, l102, l103 = sch.get_loops(block=b69)
l104 = sch.fuse(l86, preserve_unit_iters=True)
sch.parallel(loop=l104)
sch.annotate(block_or_loop=l104, ann_key="pragma_auto_unroll_max_step", ann_val=512)
sch.annotate(block_or_loop=l104, ann_key="pragma_unroll_explicit", ann_val=1)
l105, l106, l107, l108, l109, l110, l111 = sch.get_loops(block=b70)
l112 = sch.fuse(l110, l111, preserve_unit_iters=True)
sch.vectorize(loop=l112)
b113 = sch.get_block(name="conv2d_NCHWc", func_name="main")
l114, l115, l116, l117, l118, l119, l120, l121, l122, l123, l124, l125, l126, l127, l128, l129, l130, l131 = sch.get_loops(block=b113)
b132 = sch.decompose_reduction(block=b113, loop=l116)
2024-04-28 15:57:57 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #1191: GFLOPs: 633.2978. Time: 1460.6790 us. Best GFLOPs: 732.5370
2024-04-28 15:57:57 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #1192: GFLOPs: 572.8913. Time: 1614.6949 us. Best GFLOPs: 732.5370
2024-04-28 15:57:57 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #1193: GFLOPs: 548.7759. Time: 1685.6511 us. Best GFLOPs: 732.5370
2024-04-28 15:57:57 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #1194: GFLOPs: 693.2654. Time: 1334.3299 us. Best GFLOPs: 732.5370
2024-04-28 15:57:57 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #1195: GFLOPs: 550.1619. Time: 1681.4047 us. Best GFLOPs: 732.5370
2024-04-28 15:57:57 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #1196: GFLOPs: 582.7228. Time: 1587.4526 us. Best GFLOPs: 732.5370
2024-04-28 15:57:57 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #1197: GFLOPs: 627.1070. Time: 1475.0987 us. Best GFLOPs: 732.5370
2024-04-28 15:57:57 [INFO] [task_scheduler.cc:121] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #1198: Error in building:
LocalBuilder: Timeout, killed after 30.0 seconds
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(1), T.int64(14), T.int64(14), T.int64(512)), "float32"), p1: T.Buffer((T.int64(32), T.int64(1), T.int64(3), T.int64(3), T.int64(512), T.int64(16)), "float32"), p2: T.Buffer((T.int64(1), T.int64(32), T.int64(1), T.int64(1), T.int64(16)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(32), T.int64(14), T.int64(14), T.int64(16)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        data_pad = T.alloc_buffer((T.int64(1), T.int64(1), T.int64(16), T.int64(16), T.int64(512)))
        conv2d_NCHWc = T.alloc_buffer((T.int64(1), T.int64(32), T.int64(14), T.int64(14), T.int64(16)))
        for n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_fused_fused in T.parallel(T.int64(448), annotations={"pragma_auto_unroll_max_step": 512, "pragma_unroll_explicit": 1}):
            for ax0, ax1, ax2, ax3, ax4 in T.grid(T.int64(1), T.int64(1), T.int64(9), T.int64(4), T.int64(512)):
                with T.block("data_pad"):
                    v_i0, v_i1 = T.axis.remap("SS", [ax0, ax1])
                    v_i2 = T.axis.spatial(T.int64(16), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_fused_fused % T.int64(2) * T.int64(7) + ax2)
                    v_i3 = T.axis.spatial(T.int64(16), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_fused_fused % T.int64(56) // T.int64(8) * T.int64(2) + ax3)
                    v_i4 = T.axis.spatial(T.int64(512), ax4)
                    T.reads(p0[v_i0, v_i1, v_i2 - T.int64(1), v_i3 - T.int64(1), v_i4])
                    T.writes(data_pad[v_i0, v_i1, v_i2, v_i3, v_i4])
                    data_pad[v_i0, v_i1, v_i2, v_i3, v_i4] = T.if_then_else(T.int64(1) <= v_i2 and v_i2 < T.int64(15) and T.int64(1) <= v_i3 and v_i3 < T.int64(15), p0[v_i0, v_i1, v_i2 - T.int64(1), v_i3 - T.int64(1), v_i4], T.float32(0))
            for ow_1, oc_block_1 in T.grid(T.int64(1), T.int64(1)):
                for n_2_init, oc_chunk_2_init, oh_2_init, ow_2_init, oc_block_2_init, n_3_init, oc_chunk_3_init, oh_3_init, ow_3_init, oc_block_3_init in T.grid(T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(16), T.int64(1), T.int64(1), T.int64(7), T.int64(1), T.int64(1)):
                    with T.block("conv2d_NCHWc_init"):
                        v_n = T.axis.spatial(T.int64(1), n_2_init + n_3_init)
                        v_oc_chunk = T.axis.spatial(T.int64(32), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_fused_fused // T.int64(56) * T.int64(4) + n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_fused_fused % T.int64(8) // T.int64(2) + oc_chunk_2_init + oc_chunk_3_init)
                        v_oh = T.axis.spatial(T.int64(14), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_fused_fused % T.int64(2) * T.int64(7) + oh_2_init * T.int64(7) + oh_3_init)
                        v_ow = T.axis.spatial(T.int64(14), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_fused_fused % T.int64(56) // T.int64(8) * T.int64(2) + ow_1 * T.int64(2) + ow_2_init + ow_3_init)
                        v_oc_block = T.axis.spatial(T.int64(16), oc_block_1 * T.int64(16) + oc_block_2_init + oc_block_3_init)
                        T.reads()
                        T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                        T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                        conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = T.float32(0)
                for ic_0, kh_0, kw_0, n_2, oc_chunk_2, oh_2, ow_2, oc_block_2, ic_1, kh_1, kw_1, n_3, oc_chunk_3, oh_3, ow_3, oc_block_3 in T.grid(T.int64(128), T.int64(1), T.int64(3), T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(16), T.int64(4), T.int64(3), T.int64(1), T.int64(1), T.int64(1), T.int64(7), T.int64(1), T.int64(1)):
                    with T.block("conv2d_NCHWc_update"):
                        v_n = T.axis.spatial(T.int64(1), n_2 + n_3)
                        v_oc_chunk = T.axis.spatial(T.int64(32), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_fused_fused // T.int64(56) * T.int64(4) + n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_fused_fused % T.int64(8) // T.int64(2) + oc_chunk_2 + oc_chunk_3)
                        v_oh = T.axis.spatial(T.int64(14), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_fused_fused % T.int64(2) * T.int64(7) + oh_2 * T.int64(7) + oh_3)
                        v_ow = T.axis.spatial(T.int64(14), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_fused_fused % T.int64(56) // T.int64(8) * T.int64(2) + ow_1 * T.int64(2) + ow_2 + ow_3)
                        v_oc_block = T.axis.spatial(T.int64(16), oc_block_1 * T.int64(16) + oc_block_2 + oc_block_3)
                        v_ic = T.axis.reduce(T.int64(512), ic_0 * T.int64(4) + ic_1)
                        v_kh = T.axis.reduce(T.int64(3), kh_0 * T.int64(3) + kh_1)
                        v_kw = T.axis.reduce(T.int64(3), kw_0 + kw_1)
                        T.reads(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block], data_pad[v_n, v_ic // T.int64(512), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(512)], p1[v_oc_chunk, v_ic // T.int64(512), v_kh, v_kw, v_ic % T.int64(512), v_oc_block])
                        T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                        T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                        conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] + data_pad[v_n, v_ic // T.int64(512), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(512)] * p1[v_oc_chunk, v_ic // T.int64(512), v_kh, v_kw, v_ic % T.int64(512), v_oc_block]
                for ax0, ax1, ax2 in T.grid(T.int64(1), T.int64(1), T.int64(7)):
                    for ax3_ax4_fused in T.vectorized(T.int64(32)):
                        with T.block("T_relu"):
                            v_ax0 = T.axis.spatial(T.int64(1), ax0)
                            v_ax1 = T.axis.spatial(T.int64(32), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_fused_fused // T.int64(56) * T.int64(4) + n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_fused_fused % T.int64(8) // T.int64(2) + ax1)
                            v_ax2 = T.axis.spatial(T.int64(14), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_fused_fused % T.int64(2) * T.int64(7) + ax2)
                            v_ax3 = T.axis.spatial(T.int64(14), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_fused_fused % T.int64(56) // T.int64(8) * T.int64(2) + ax3_ax4_fused // T.int64(16))
                            v_ax4 = T.axis.spatial(T.int64(16), ax3_ax4_fused % T.int64(16))
                            T.reads(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4])
                            T.writes(T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                            T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.max(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] + p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4], T.float32(0))
b0 = sch.get_block(name="data_pad", func_name="main")
b1 = sch.get_block(name="conv2d_NCHWc", func_name="main")
b2 = sch.get_block(name="T_add", func_name="main")
b3 = sch.get_block(name="root", func_name="main")
sch.compute_inline(block=b2)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSRSRS")
l4, l5, l6, l7, l8, l9, l10, l11 = sch.get_loops(block=b1)
v12, v13, v14, v15 = sch.sample_perfect_tile(loop=l4, n=4, max_innermost_factor=64, decision=[1, 1, 1, 1])
l16, l17, l18, l19 = sch.split(loop=l4, factors=[v12, v13, v14, v15], preserve_unit_iters=True)
v20, v21, v22, v23 = sch.sample_perfect_tile(loop=l5, n=4, max_innermost_factor=64, decision=[8, 4, 1, 1])
l24, l25, l26, l27 = sch.split(loop=l5, factors=[v20, v21, v22, v23], preserve_unit_iters=True)
v28, v29, v30, v31 = sch.sample_perfect_tile(loop=l6, n=4, max_innermost_factor=64, decision=[1, 2, 1, 7])
l32, l33, l34, l35 = sch.split(loop=l6, factors=[v28, v29, v30, v31], preserve_unit_iters=True)
v36, v37, v38, v39 = sch.sample_perfect_tile(loop=l7, n=4, max_innermost_factor=64, decision=[7, 1, 2, 1])
l40, l41, l42, l43 = sch.split(loop=l7, factors=[v36, v37, v38, v39], preserve_unit_iters=True)
v44, v45, v46, v47 = sch.sample_perfect_tile(loop=l8, n=4, max_innermost_factor=64, decision=[1, 1, 16, 1])
l48, l49, l50, l51 = sch.split(loop=l8, factors=[v44, v45, v46, v47], preserve_unit_iters=True)
v52, v53 = sch.sample_perfect_tile(loop=l9, n=2, max_innermost_factor=64, decision=[128, 4])
l54, l55 = sch.split(loop=l9, factors=[v52, v53], preserve_unit_iters=True)
v56, v57 = sch.sample_perfect_tile(loop=l10, n=2, max_innermost_factor=64, decision=[1, 3])
l58, l59 = sch.split(loop=l10, factors=[v56, v57], preserve_unit_iters=True)
v60, v61 = sch.sample_perfect_tile(loop=l11, n=2, max_innermost_factor=64, decision=[3, 1])
l62, l63 = sch.split(loop=l11, factors=[v60, v61], preserve_unit_iters=True)
sch.reorder(l16, l24, l32, l40, l48, l17, l25, l33, l41, l49, l54, l58, l62, l18, l26, l34, l42, l50, l55, l59, l63, l19, l27, l35, l43, l51)
b64, = sch.get_consumers(block=b1)
sch.reverse_compute_at(block=b64, loop=l49, preserve_unit_loops=True, index=-1)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.vectorize", ann_val=64)
v65 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.unroll_explicit", ann_val=v65)
l66 = sch.sample_compute_location(block=b0, decision=7)
sch.compute_at(block=b0, loop=l66, preserve_unit_loops=True, index=-1)
sch.enter_postproc()
b67 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b67, ann_key="meta_schedule.parallel")
sch.unannotate(block_or_loop=b67, ann_key="meta_schedule.vectorize")
sch.unannotate(block_or_loop=b67, ann_key="meta_schedule.unroll_explicit")
b68, b69, b70 = sch.get_child_blocks(b67)
l71, l72, l73, l74, l75, l76, l77, l78, l79, l80, l81, l82, l83 = sch.get_loops(block=b68)
l84 = sch.fuse(l71, l72, l73, l74, l75, l76, l77, l78, preserve_unit_iters=True)
sch.parallel(loop=l84)
l85, l86, l87, l88, l89, l90, l91, l92, l93, l94, l95, l96, l97, l98, l99, l100, l101, l102, l103 = sch.get_loops(block=b69)
l104 = sch.fuse(l85, preserve_unit_iters=True)
sch.parallel(loop=l104)
sch.annotate(block_or_loop=l104, ann_key="pragma_auto_unroll_max_step", ann_val=512)
sch.annotate(block_or_loop=l104, ann_key="pragma_unroll_explicit", ann_val=1)
l105, l106, l107, l108, l109, l110, l111, l112 = sch.get_loops(block=b70)
l113 = sch.fuse(l111, l112, preserve_unit_iters=True)
sch.vectorize(loop=l113)
b114 = sch.get_block(name="conv2d_NCHWc", func_name="main")
l115, l116, l117, l118, l119, l120, l121, l122, l123, l124, l125, l126, l127, l128, l129, l130, l131, l132, l133 = sch.get_loops(block=b114)
b134 = sch.decompose_reduction(block=b114, loop=l118)
2024-04-28 15:57:57 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #1199: GFLOPs: 530.5672. Time: 1743.5016 us. Best GFLOPs: 732.5370
2024-04-28 15:57:57 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #1200: GFLOPs: 484.3988. Time: 1909.6761 us. Best GFLOPs: 732.5370
2024-04-28 15:57:57 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #1201: GFLOPs: 549.2551. Time: 1684.1805 us. Best GFLOPs: 732.5370
2024-04-28 15:57:57 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #1202: GFLOPs: 503.9496. Time: 1835.5897 us. Best GFLOPs: 732.5370
2024-04-28 15:57:57 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #1203: GFLOPs: 164.4542. Time: 5624.9387 us. Best GFLOPs: 732.5370
2024-04-28 15:57:57 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #1204: GFLOPs: 533.3495. Time: 1734.4065 us. Best GFLOPs: 732.5370
2024-04-28 15:57:57 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #1205: GFLOPs: 520.3534. Time: 1777.7240 us. Best GFLOPs: 732.5370
2024-04-28 15:57:57 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #1206: GFLOPs: 517.1090. Time: 1788.8777 us. Best GFLOPs: 732.5370
2024-04-28 15:57:57 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #1207: GFLOPs: 511.2081. Time: 1809.5269 us. Best GFLOPs: 732.5370
2024-04-28 15:57:57 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #1208: GFLOPs: 644.4554. Time: 1435.3897 us. Best GFLOPs: 732.5370
2024-04-28 15:57:57 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #1209: GFLOPs: 533.0690. Time: 1735.3191 us. Best GFLOPs: 732.5370
2024-04-28 15:57:57 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #1210: GFLOPs: 522.2915. Time: 1771.1272 us. Best GFLOPs: 732.5370
2024-04-28 15:57:57 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #1211: GFLOPs: 506.9196. Time: 1824.8351 us. Best GFLOPs: 732.5370
2024-04-28 15:57:57 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #1212: GFLOPs: 499.0549. Time: 1853.5931 us. Best GFLOPs: 732.5370
2024-04-28 15:57:57 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #1213: GFLOPs: 135.6853. Time: 6817.5763 us. Best GFLOPs: 732.5370
2024-04-28 15:57:57 [INFO] [task_scheduler.cc:121] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #1214: Error in building:
LocalBuilder: Timeout, killed after 30.0 seconds
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(1), T.int64(14), T.int64(14), T.int64(512)), "float32"), p1: T.Buffer((T.int64(32), T.int64(1), T.int64(3), T.int64(3), T.int64(512), T.int64(16)), "float32"), p2: T.Buffer((T.int64(1), T.int64(32), T.int64(1), T.int64(1), T.int64(16)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(32), T.int64(14), T.int64(14), T.int64(16)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        data_pad = T.alloc_buffer((T.int64(1), T.int64(1), T.int64(16), T.int64(16), T.int64(512)))
        conv2d_NCHWc = T.alloc_buffer((T.int64(1), T.int64(32), T.int64(14), T.int64(14), T.int64(16)))
        for n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_fused_fused in T.parallel(T.int64(784), annotations={"pragma_auto_unroll_max_step": 512, "pragma_unroll_explicit": 1}):
            for oc_block_1 in range(T.int64(2)):
                for ax0, ax1, ax2, ax3, ax4 in T.grid(T.int64(1), T.int64(1), T.int64(3), T.int64(4), T.int64(512)):
                    with T.block("data_pad"):
                        v_i0, v_i1 = T.axis.remap("SS", [ax0, ax1])
                        v_i2 = T.axis.spatial(T.int64(16), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_fused_fused % T.int64(14) // T.int64(7) + n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_fused_fused // T.int64(112) * T.int64(2) + ax2)
                        v_i3 = T.axis.spatial(T.int64(16), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_fused_fused % T.int64(7) * T.int64(2) + ax3)
                        v_i4 = T.axis.spatial(T.int64(512), ax4)
                        T.reads(p0[v_i0, v_i1, v_i2 - T.int64(1), v_i3 - T.int64(1), v_i4])
                        T.writes(data_pad[v_i0, v_i1, v_i2, v_i3, v_i4])
                        data_pad[v_i0, v_i1, v_i2, v_i3, v_i4] = T.if_then_else(T.int64(1) <= v_i2 and v_i2 < T.int64(15) and T.int64(1) <= v_i3 and v_i3 < T.int64(15), p0[v_i0, v_i1, v_i2 - T.int64(1), v_i3 - T.int64(1), v_i4], T.float32(0))
                for n_2_init, oc_chunk_2_init, oh_2_init, ow_2_init, oc_block_2_init, n_3_init, oc_chunk_3_init, oh_3_init, ow_3_init, oc_block_3_init in T.grid(T.int64(1), T.int64(2), T.int64(1), T.int64(2), T.int64(4), T.int64(1), T.int64(4), T.int64(1), T.int64(1), T.int64(1)):
                    with T.block("conv2d_NCHWc_init"):
                        v_n = T.axis.spatial(T.int64(1), n_2_init + n_3_init)
                        v_oc_chunk = T.axis.spatial(T.int64(32), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_fused_fused % T.int64(56) // T.int64(14) * T.int64(8) + oc_chunk_2_init * T.int64(4) + oc_chunk_3_init)
                        v_oh = T.axis.spatial(T.int64(14), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_fused_fused // T.int64(112) * T.int64(2) + n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_fused_fused % T.int64(14) // T.int64(7) + oh_2_init + oh_3_init)
                        v_ow = T.axis.spatial(T.int64(14), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_fused_fused % T.int64(7) * T.int64(2) + ow_2_init + ow_3_init)
                        v_oc_block = T.axis.spatial(T.int64(16), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_fused_fused % T.int64(112) // T.int64(56) * T.int64(8) + oc_block_1 * T.int64(4) + oc_block_2_init + oc_block_3_init)
                        T.reads()
                        T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                        T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                        conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = T.float32(0)
                for ic_0, kh_0, kw_0, n_2, oc_chunk_2, oh_2, ow_2, oc_block_2, ic_1, kh_1, kw_1, n_3, oc_chunk_3, oh_3, ow_3, oc_block_3 in T.grid(T.int64(256), T.int64(3), T.int64(3), T.int64(1), T.int64(2), T.int64(1), T.int64(2), T.int64(4), T.int64(2), T.int64(1), T.int64(1), T.int64(1), T.int64(4), T.int64(1), T.int64(1), T.int64(1)):
                    with T.block("conv2d_NCHWc_update"):
                        v_n = T.axis.spatial(T.int64(1), n_2 + n_3)
                        v_oc_chunk = T.axis.spatial(T.int64(32), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_fused_fused % T.int64(56) // T.int64(14) * T.int64(8) + oc_chunk_2 * T.int64(4) + oc_chunk_3)
                        v_oh = T.axis.spatial(T.int64(14), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_fused_fused // T.int64(112) * T.int64(2) + n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_fused_fused % T.int64(14) // T.int64(7) + oh_2 + oh_3)
                        v_ow = T.axis.spatial(T.int64(14), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_fused_fused % T.int64(7) * T.int64(2) + ow_2 + ow_3)
                        v_oc_block = T.axis.spatial(T.int64(16), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_fused_fused % T.int64(112) // T.int64(56) * T.int64(8) + oc_block_1 * T.int64(4) + oc_block_2 + oc_block_3)
                        v_ic = T.axis.reduce(T.int64(512), ic_0 * T.int64(2) + ic_1)
                        v_kh = T.axis.reduce(T.int64(3), kh_0 + kh_1)
                        v_kw = T.axis.reduce(T.int64(3), kw_0 + kw_1)
                        T.reads(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block], data_pad[v_n, v_ic // T.int64(512), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(512)], p1[v_oc_chunk, v_ic // T.int64(512), v_kh, v_kw, v_ic % T.int64(512), v_oc_block])
                        T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                        T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                        conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] + data_pad[v_n, v_ic // T.int64(512), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(512)] * p1[v_oc_chunk, v_ic // T.int64(512), v_kh, v_kw, v_ic % T.int64(512), v_oc_block]
        for ax0_ax1_ax2_ax3_ax4_fused_0 in T.parallel(T.int64(1568)):
            for ax0_ax1_ax2_ax3_ax4_fused_1 in T.vectorized(T.int64(64)):
                with T.block("T_relu"):
                    v_ax0 = T.axis.spatial(T.int64(1), T.int64(0))
                    v_ax1 = T.axis.spatial(T.int64(32), (ax0_ax1_ax2_ax3_ax4_fused_0 * T.int64(64) + ax0_ax1_ax2_ax3_ax4_fused_1) // T.int64(3136))
                    v_ax2 = T.axis.spatial(T.int64(14), (ax0_ax1_ax2_ax3_ax4_fused_0 * T.int64(64) + ax0_ax1_ax2_ax3_ax4_fused_1) % T.int64(3136) // T.int64(224))
                    v_ax3 = T.axis.spatial(T.int64(14), (ax0_ax1_ax2_ax3_ax4_fused_0 * T.int64(64) + ax0_ax1_ax2_ax3_ax4_fused_1) % T.int64(224) // T.int64(16))
                    v_ax4 = T.axis.spatial(T.int64(16), (ax0_ax1_ax2_ax3_ax4_fused_0 * T.int64(64) + ax0_ax1_ax2_ax3_ax4_fused_1) % T.int64(16))
                    T.reads(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4])
                    T.writes(T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                    T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.max(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] + p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4], T.float32(0))
b0 = sch.get_block(name="data_pad", func_name="main")
b1 = sch.get_block(name="conv2d_NCHWc", func_name="main")
b2 = sch.get_block(name="T_add", func_name="main")
b3 = sch.get_block(name="root", func_name="main")
sch.compute_inline(block=b2)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSRSRS")
l4, l5, l6, l7, l8, l9, l10, l11 = sch.get_loops(block=b1)
v12, v13, v14, v15 = sch.sample_perfect_tile(loop=l4, n=4, max_innermost_factor=64, decision=[1, 1, 1, 1])
l16, l17, l18, l19 = sch.split(loop=l4, factors=[v12, v13, v14, v15], preserve_unit_iters=True)
v20, v21, v22, v23 = sch.sample_perfect_tile(loop=l5, n=4, max_innermost_factor=64, decision=[1, 4, 2, 4])
l24, l25, l26, l27 = sch.split(loop=l5, factors=[v20, v21, v22, v23], preserve_unit_iters=True)
v28, v29, v30, v31 = sch.sample_perfect_tile(loop=l6, n=4, max_innermost_factor=64, decision=[7, 2, 1, 1])
l32, l33, l34, l35 = sch.split(loop=l6, factors=[v28, v29, v30, v31], preserve_unit_iters=True)
v36, v37, v38, v39 = sch.sample_perfect_tile(loop=l7, n=4, max_innermost_factor=64, decision=[1, 7, 2, 1])
l40, l41, l42, l43 = sch.split(loop=l7, factors=[v36, v37, v38, v39], preserve_unit_iters=True)
v44, v45, v46, v47 = sch.sample_perfect_tile(loop=l8, n=4, max_innermost_factor=64, decision=[2, 2, 4, 1])
l48, l49, l50, l51 = sch.split(loop=l8, factors=[v44, v45, v46, v47], preserve_unit_iters=True)
v52, v53 = sch.sample_perfect_tile(loop=l9, n=2, max_innermost_factor=64, decision=[256, 2])
l54, l55 = sch.split(loop=l9, factors=[v52, v53], preserve_unit_iters=True)
v56, v57 = sch.sample_perfect_tile(loop=l10, n=2, max_innermost_factor=64, decision=[3, 1])
l58, l59 = sch.split(loop=l10, factors=[v56, v57], preserve_unit_iters=True)
v60, v61 = sch.sample_perfect_tile(loop=l11, n=2, max_innermost_factor=64, decision=[3, 1])
l62, l63 = sch.split(loop=l11, factors=[v60, v61], preserve_unit_iters=True)
sch.reorder(l16, l24, l32, l40, l48, l17, l25, l33, l41, l49, l54, l58, l62, l18, l26, l34, l42, l50, l55, l59, l63, l19, l27, l35, l43, l51)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.vectorize", ann_val=64)
v64 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.unroll_explicit", ann_val=v64)
l65 = sch.sample_compute_location(block=b0, decision=9)
sch.compute_at(block=b0, loop=l65, preserve_unit_loops=True, index=-1)
sch.enter_postproc()
b66 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b66, ann_key="meta_schedule.parallel")
sch.unannotate(block_or_loop=b66, ann_key="meta_schedule.vectorize")
sch.unannotate(block_or_loop=b66, ann_key="meta_schedule.unroll_explicit")
b67, b68, b69 = sch.get_child_blocks(b66)
l70, l71, l72, l73, l74, l75, l76, l77, l78, l79, l80, l81, l82, l83, l84 = sch.get_loops(block=b67)
l85 = sch.fuse(l70, l71, l72, l73, l74, l75, l76, l77, l78, preserve_unit_iters=True)
sch.parallel(loop=l85)
l86, l87, l88, l89, l90, l91, l92, l93, l94, l95, l96, l97, l98, l99, l100, l101, l102, l103 = sch.get_loops(block=b68)
l104 = sch.fuse(l86, preserve_unit_iters=True)
sch.parallel(loop=l104)
sch.annotate(block_or_loop=l104, ann_key="pragma_auto_unroll_max_step", ann_val=512)
sch.annotate(block_or_loop=l104, ann_key="pragma_unroll_explicit", ann_val=1)
l105, l106, l107, l108, l109 = sch.get_loops(block=b69)
l110 = sch.fuse(l105, l106, l107, l108, l109, preserve_unit_iters=True)
l111, l112 = sch.split(loop=l110, factors=[None, 64], preserve_unit_iters=True)
sch.parallel(loop=l111)
sch.vectorize(loop=l112)
b113 = sch.get_block(name="conv2d_NCHWc", func_name="main")
l114, l115, l116, l117, l118, l119, l120, l121, l122, l123, l124, l125, l126, l127, l128, l129, l130, l131 = sch.get_loops(block=b113)
b132 = sch.decompose_reduction(block=b113, loop=l116)
2024-04-28 15:57:57 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #1215: GFLOPs: 13.7697. Time: 67179.5620 us. Best GFLOPs: 732.5370
2024-04-28 15:57:57 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #1216: GFLOPs: 35.1714. Time: 26301.0715 us. Best GFLOPs: 732.5370
2024-04-28 16:10:21 [INFO] [evolutionary_search.cc:713] Generating candidates......
2024-04-28 16:10:22 [INFO] [evolutionary_search.cc:715] Picked top 102 candidate(s) from database
2024-04-28 16:10:26 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x3861aa8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x37d26b8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x4dd4148)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x3201bb8)]: 0 failure(s)
2024-04-28 16:10:26 [INFO] [evolutionary_search.cc:723] Sampled 410 candidate(s)
2024-04-28 16:10:38 [INFO] [evolutionary_search.cc:621] Evolve iter #0 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x3861aa8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x37d26b8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x4dd4148)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x3201bb8)]: 0 failure(s)
2024-04-28 16:10:51 [INFO] [evolutionary_search.cc:621] Evolve iter #1 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x3861aa8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x37d26b8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x4dd4148)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x3201bb8)]: 0 failure(s)
2024-04-28 16:11:03 [INFO] [evolutionary_search.cc:621] Evolve iter #2 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x3861aa8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x37d26b8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x4dd4148)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x3201bb8)]: 0 failure(s)
2024-04-28 16:11:16 [INFO] [evolutionary_search.cc:621] Evolve iter #3 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x3861aa8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x37d26b8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x4dd4148)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x3201bb8)]: 0 failure(s)
2024-04-28 16:11:24 [INFO] [evolutionary_search.cc:649] Scores of the best 64 candidates:
[1 : 16]:	0.9304  0.9164  0.8997  0.8976  0.8888  0.8808  0.8792  0.8783  0.8745  0.8743  0.8685  0.8683  0.8624  0.8590  0.8565  0.8548
[17 : 32]:	0.8541  0.8477  0.8432  0.8432  0.8432  0.8382  0.8358  0.8334  0.8254  0.8254  0.8254  0.8181  0.8175  0.8151  0.8132  0.8092
[33 : 48]:	0.8066  0.8022  0.7986  0.7940  0.7914  0.7865  0.7738  0.7735  0.7705  0.7662  0.7499  0.7390  0.7383  0.7335  0.7323  0.7297
[49 : 64]:	0.7297  0.7263  0.7256  0.7256  0.7242  0.7227  0.7214  0.7193  0.7160  0.7127  0.7127  0.7127  0.7127  0.7100  0.7066  0.7036
2024-04-28 16:11:24 [INFO] [evolutionary_search.cc:727] Got 64 candidate(s) with evolutionary search
2024-04-28 16:11:24 [INFO] [evolutionary_search.cc:730] Sending 64 candidates(s) for measurement
2024-04-28 16:13:21 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #1217: GFLOPs: 663.9385. Time: 1393.2686 us. Best GFLOPs: 732.5370
2024-04-28 16:13:21 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #1218: GFLOPs: 682.6653. Time: 1355.0486 us. Best GFLOPs: 732.5370
2024-04-28 16:13:21 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #1219: GFLOPs: 687.6056. Time: 1345.3129 us. Best GFLOPs: 732.5370
2024-04-28 16:13:21 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #1220: GFLOPs: 684.6384. Time: 1351.1434 us. Best GFLOPs: 732.5370
2024-04-28 16:13:21 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #1221: GFLOPs: 661.6588. Time: 1398.0691 us. Best GFLOPs: 732.5370
2024-04-28 16:13:21 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #1222: GFLOPs: 477.8731. Time: 1935.7541 us. Best GFLOPs: 732.5370
2024-04-28 16:13:21 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #1223: GFLOPs: 650.8630. Time: 1421.2588 us. Best GFLOPs: 732.5370
2024-04-28 16:13:21 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #1224: GFLOPs: 604.9689. Time: 1529.0782 us. Best GFLOPs: 732.5370
2024-04-28 16:13:21 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #1225: GFLOPs: 649.6977. Time: 1423.8079 us. Best GFLOPs: 732.5370
2024-04-28 16:13:21 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #1226: GFLOPs: 651.8694. Time: 1419.0646 us. Best GFLOPs: 732.5370
2024-04-28 16:13:21 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #1227: GFLOPs: 629.7125. Time: 1468.9953 us. Best GFLOPs: 732.5370
2024-04-28 16:13:21 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #1228: GFLOPs: 645.6313. Time: 1432.7756 us. Best GFLOPs: 732.5370
2024-04-28 16:13:21 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #1229: GFLOPs: 650.6339. Time: 1421.7592 us. Best GFLOPs: 732.5370
2024-04-28 16:13:21 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #1230: GFLOPs: 626.1094. Time: 1477.4492 us. Best GFLOPs: 732.5370
2024-04-28 16:13:21 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #1231: GFLOPs: 644.6787. Time: 1434.8926 us. Best GFLOPs: 732.5370
2024-04-28 16:13:21 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #1232: GFLOPs: 590.2913. Time: 1567.0987 us. Best GFLOPs: 732.5370
2024-04-28 16:13:21 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #1233: GFLOPs: 633.2753. Time: 1460.7307 us. Best GFLOPs: 732.5370
2024-04-28 16:13:21 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #1234: GFLOPs: 560.5964. Time: 1650.1081 us. Best GFLOPs: 732.5370
2024-04-28 16:13:21 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #1235: GFLOPs: 603.6948. Time: 1532.3053 us. Best GFLOPs: 732.5370
2024-04-28 16:13:21 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #1236: GFLOPs: 605.1237. Time: 1528.6871 us. Best GFLOPs: 732.5370
2024-04-28 16:13:21 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #1237: GFLOPs: 613.9063. Time: 1506.8175 us. Best GFLOPs: 732.5370
2024-04-28 16:13:21 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #1238: GFLOPs: 718.0712. Time: 1288.2354 us. Best GFLOPs: 732.5370
2024-04-28 16:13:21 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #1239: GFLOPs: 660.0823. Time: 1401.4082 us. Best GFLOPs: 732.5370
2024-04-28 16:13:21 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #1240: GFLOPs: 583.3784. Time: 1585.6686 us. Best GFLOPs: 732.5370
2024-04-28 16:13:21 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #1241: GFLOPs: 686.0741. Time: 1348.3161 us. Best GFLOPs: 732.5370
2024-04-28 16:13:21 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #1242: GFLOPs: 686.1864. Time: 1348.0954 us. Best GFLOPs: 732.5370
2024-04-28 16:13:21 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #1243: GFLOPs: 640.6153. Time: 1443.9941 us. Best GFLOPs: 732.5370
2024-04-28 16:13:21 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #1244: GFLOPs: 632.7782. Time: 1461.8783 us. Best GFLOPs: 732.5370
2024-04-28 16:13:21 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #1245: GFLOPs: 630.7386. Time: 1466.6054 us. Best GFLOPs: 732.5370
2024-04-28 16:13:21 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #1246: GFLOPs: 603.0216. Time: 1534.0158 us. Best GFLOPs: 732.5370
2024-04-28 16:13:21 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #1247: GFLOPs: 678.9283. Time: 1362.5073 us. Best GFLOPs: 732.5370
2024-04-28 16:13:21 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #1248: GFLOPs: 595.9164. Time: 1552.3062 us. Best GFLOPs: 732.5370
2024-04-28 16:13:21 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #1249: GFLOPs: 357.8063. Time: 2585.3229 us. Best GFLOPs: 732.5370
2024-04-28 16:13:21 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #1250: GFLOPs: 549.2343. Time: 1684.2442 us. Best GFLOPs: 732.5370
2024-04-28 16:13:21 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #1251: GFLOPs: 603.0253. Time: 1534.0064 us. Best GFLOPs: 732.5370
2024-04-28 16:13:21 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #1252: GFLOPs: 528.3026. Time: 1750.9752 us. Best GFLOPs: 732.5370
2024-04-28 16:13:21 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #1253: GFLOPs: 590.9592. Time: 1565.3275 us. Best GFLOPs: 732.5370
2024-04-28 16:13:21 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #1254: GFLOPs: 585.2632. Time: 1580.5620 us. Best GFLOPs: 732.5370
2024-04-28 16:13:21 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #1255: GFLOPs: 566.4052. Time: 1633.1855 us. Best GFLOPs: 732.5370
2024-04-28 16:13:21 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #1256: GFLOPs: 544.2253. Time: 1699.7460 us. Best GFLOPs: 732.5370
2024-04-28 16:13:21 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #1257: GFLOPs: 503.1134. Time: 1838.6405 us. Best GFLOPs: 732.5370
2024-04-28 16:13:21 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #1258: GFLOPs: 629.0453. Time: 1470.5536 us. Best GFLOPs: 732.5370
2024-04-28 16:13:21 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #1259: GFLOPs: 526.3921. Time: 1757.3302 us. Best GFLOPs: 732.5370
2024-04-28 16:13:21 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #1260: GFLOPs: 501.9409. Time: 1842.9357 us. Best GFLOPs: 732.5370
2024-04-28 16:13:21 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #1261: GFLOPs: 520.0681. Time: 1778.6993 us. Best GFLOPs: 732.5370
2024-04-28 16:13:21 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #1262: GFLOPs: 541.5338. Time: 1708.1939 us. Best GFLOPs: 732.5370
2024-04-28 16:13:21 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #1263: GFLOPs: 509.2765. Time: 1816.3900 us. Best GFLOPs: 732.5370
2024-04-28 16:13:21 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #1264: GFLOPs: 555.9861. Time: 1663.7911 us. Best GFLOPs: 732.5370
2024-04-28 16:13:21 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #1265: GFLOPs: 565.5622. Time: 1635.6198 us. Best GFLOPs: 732.5370
2024-04-28 16:13:21 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #1266: GFLOPs: 359.1166. Time: 2575.8899 us. Best GFLOPs: 732.5370
2024-04-28 16:13:21 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #1267: GFLOPs: 428.8789. Time: 2156.8901 us. Best GFLOPs: 732.5370
2024-04-28 16:13:21 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #1268: GFLOPs: 560.9303. Time: 1649.1261 us. Best GFLOPs: 732.5370
2024-04-28 16:13:21 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #1269: GFLOPs: 519.7917. Time: 1779.6452 us. Best GFLOPs: 732.5370
2024-04-28 16:13:21 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #1270: GFLOPs: 525.7873. Time: 1759.3515 us. Best GFLOPs: 732.5370
2024-04-28 16:13:21 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #1271: GFLOPs: 489.4630. Time: 1889.9176 us. Best GFLOPs: 732.5370
2024-04-28 16:13:21 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #1272: GFLOPs: 526.1571. Time: 1758.1150 us. Best GFLOPs: 732.5370
2024-04-28 16:13:21 [INFO] [task_scheduler.cc:121] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #1273: Error in building:
LocalBuilder: Timeout, killed after 30.0 seconds
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(1), T.int64(14), T.int64(14), T.int64(512)), "float32"), p1: T.Buffer((T.int64(32), T.int64(1), T.int64(3), T.int64(3), T.int64(512), T.int64(16)), "float32"), p2: T.Buffer((T.int64(1), T.int64(32), T.int64(1), T.int64(1), T.int64(16)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(32), T.int64(14), T.int64(14), T.int64(16)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        data_pad = T.alloc_buffer((T.int64(1), T.int64(1), T.int64(16), T.int64(16), T.int64(512)))
        conv2d_NCHWc = T.alloc_buffer((T.int64(1), T.int64(32), T.int64(14), T.int64(14), T.int64(16)))
        for n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_fused_fused in T.parallel(T.int64(896), annotations={"pragma_auto_unroll_max_step": 512, "pragma_unroll_explicit": 1}):
            for ax0, ax1, ax2, ax3, ax4 in T.grid(T.int64(1), T.int64(1), T.int64(9), T.int64(3), T.int64(512)):
                with T.block("data_pad"):
                    v_i0, v_i1 = T.axis.remap("SS", [ax0, ax1])
                    v_i2 = T.axis.spatial(T.int64(16), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_fused_fused // T.int64(448) * T.int64(7) + ax2)
                    v_i3 = T.axis.spatial(T.int64(16), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_fused_fused % T.int64(448) // T.int64(224) * T.int64(7) + n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_fused_fused % T.int64(7) + ax3)
                    v_i4 = T.axis.spatial(T.int64(512), ax4)
                    T.reads(p0[v_i0, v_i1, v_i2 - T.int64(1), v_i3 - T.int64(1), v_i4])
                    T.writes(data_pad[v_i0, v_i1, v_i2, v_i3, v_i4])
                    data_pad[v_i0, v_i1, v_i2, v_i3, v_i4] = T.if_then_else(T.int64(1) <= v_i2 and v_i2 < T.int64(15) and T.int64(1) <= v_i3 and v_i3 < T.int64(15), p0[v_i0, v_i1, v_i2 - T.int64(1), v_i3 - T.int64(1), v_i4], T.float32(0))
            for oc_block_1 in range(T.int64(1)):
                for n_2_init, oc_chunk_2_init, oh_2_init, ow_2_init, oc_block_2_init, n_3_init, oc_chunk_3_init, oh_3_init, ow_3_init, oc_block_3_init in T.grid(T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(16), T.int64(1), T.int64(1), T.int64(7), T.int64(1), T.int64(1)):
                    with T.block("conv2d_NCHWc_init"):
                        v_n = T.axis.spatial(T.int64(1), n_2_init + n_3_init)
                        v_oc_chunk = T.axis.spatial(T.int64(32), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_fused_fused % T.int64(224) // T.int64(7) + oc_chunk_2_init + oc_chunk_3_init)
                        v_oh = T.axis.spatial(T.int64(14), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_fused_fused // T.int64(448) * T.int64(7) + oh_2_init * T.int64(7) + oh_3_init)
                        v_ow = T.axis.spatial(T.int64(14), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_fused_fused % T.int64(448) // T.int64(224) * T.int64(7) + n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_fused_fused % T.int64(7) + ow_2_init + ow_3_init)
                        v_oc_block = T.axis.spatial(T.int64(16), oc_block_1 * T.int64(16) + oc_block_2_init + oc_block_3_init)
                        T.reads()
                        T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                        T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                        conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = T.float32(0)
                for ic_0, kh_0, kw_0, n_2, oc_chunk_2, oh_2, ow_2, oc_block_2, ic_1, kh_1, kw_1, n_3, oc_chunk_3, oh_3, ow_3, oc_block_3 in T.grid(T.int64(256), T.int64(1), T.int64(3), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(16), T.int64(2), T.int64(3), T.int64(1), T.int64(1), T.int64(1), T.int64(7), T.int64(1), T.int64(1)):
                    with T.block("conv2d_NCHWc_update"):
                        v_n = T.axis.spatial(T.int64(1), n_2 + n_3)
                        v_oc_chunk = T.axis.spatial(T.int64(32), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_fused_fused % T.int64(224) // T.int64(7) + oc_chunk_2 + oc_chunk_3)
                        v_oh = T.axis.spatial(T.int64(14), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_fused_fused // T.int64(448) * T.int64(7) + oh_2 * T.int64(7) + oh_3)
                        v_ow = T.axis.spatial(T.int64(14), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_fused_fused % T.int64(448) // T.int64(224) * T.int64(7) + n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_fused_fused % T.int64(7) + ow_2 + ow_3)
                        v_oc_block = T.axis.spatial(T.int64(16), oc_block_1 * T.int64(16) + oc_block_2 + oc_block_3)
                        v_ic = T.axis.reduce(T.int64(512), ic_0 * T.int64(2) + ic_1)
                        v_kh = T.axis.reduce(T.int64(3), kh_0 * T.int64(3) + kh_1)
                        v_kw = T.axis.reduce(T.int64(3), kw_0 + kw_1)
                        T.reads(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block], data_pad[v_n, v_ic // T.int64(512), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(512)], p1[v_oc_chunk, v_ic // T.int64(512), v_kh, v_kw, v_ic % T.int64(512), v_oc_block])
                        T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                        T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                        conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] + data_pad[v_n, v_ic // T.int64(512), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(512)] * p1[v_oc_chunk, v_ic // T.int64(512), v_kh, v_kw, v_ic % T.int64(512), v_oc_block]
                for ax0, ax1, ax2 in T.grid(T.int64(1), T.int64(1), T.int64(7)):
                    for ax3_ax4_fused in T.vectorized(T.int64(16)):
                        with T.block("T_relu"):
                            v_ax0 = T.axis.spatial(T.int64(1), ax0)
                            v_ax1 = T.axis.spatial(T.int64(32), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_fused_fused % T.int64(224) // T.int64(7) + ax1)
                            v_ax2 = T.axis.spatial(T.int64(14), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_fused_fused // T.int64(448) * T.int64(7) + ax2)
                            v_ax3 = T.axis.spatial(T.int64(14), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_fused_fused % T.int64(448) // T.int64(224) * T.int64(7) + n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_fused_fused % T.int64(7))
                            v_ax4 = T.axis.spatial(T.int64(16), ax3_ax4_fused)
                            T.reads(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4])
                            T.writes(T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                            T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.max(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] + p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4], T.float32(0))
b0 = sch.get_block(name="data_pad", func_name="main")
b1 = sch.get_block(name="conv2d_NCHWc", func_name="main")
b2 = sch.get_block(name="T_add", func_name="main")
b3 = sch.get_block(name="root", func_name="main")
sch.compute_inline(block=b2)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSRSRS")
l4, l5, l6, l7, l8, l9, l10, l11 = sch.get_loops(block=b1)
v12, v13, v14, v15 = sch.sample_perfect_tile(loop=l4, n=4, max_innermost_factor=64, decision=[1, 1, 1, 1])
l16, l17, l18, l19 = sch.split(loop=l4, factors=[v12, v13, v14, v15], preserve_unit_iters=True)
v20, v21, v22, v23 = sch.sample_perfect_tile(loop=l5, n=4, max_innermost_factor=64, decision=[1, 32, 1, 1])
l24, l25, l26, l27 = sch.split(loop=l5, factors=[v20, v21, v22, v23], preserve_unit_iters=True)
v28, v29, v30, v31 = sch.sample_perfect_tile(loop=l6, n=4, max_innermost_factor=64, decision=[2, 1, 1, 7])
l32, l33, l34, l35 = sch.split(loop=l6, factors=[v28, v29, v30, v31], preserve_unit_iters=True)
v36, v37, v38, v39 = sch.sample_perfect_tile(loop=l7, n=4, max_innermost_factor=64, decision=[2, 7, 1, 1])
l40, l41, l42, l43 = sch.split(loop=l7, factors=[v36, v37, v38, v39], preserve_unit_iters=True)
v44, v45, v46, v47 = sch.sample_perfect_tile(loop=l8, n=4, max_innermost_factor=64, decision=[1, 1, 16, 1])
l48, l49, l50, l51 = sch.split(loop=l8, factors=[v44, v45, v46, v47], preserve_unit_iters=True)
v52, v53 = sch.sample_perfect_tile(loop=l9, n=2, max_innermost_factor=64, decision=[256, 2])
l54, l55 = sch.split(loop=l9, factors=[v52, v53], preserve_unit_iters=True)
v56, v57 = sch.sample_perfect_tile(loop=l10, n=2, max_innermost_factor=64, decision=[1, 3])
l58, l59 = sch.split(loop=l10, factors=[v56, v57], preserve_unit_iters=True)
v60, v61 = sch.sample_perfect_tile(loop=l11, n=2, max_innermost_factor=64, decision=[3, 1])
l62, l63 = sch.split(loop=l11, factors=[v60, v61], preserve_unit_iters=True)
sch.reorder(l16, l24, l32, l40, l48, l17, l25, l33, l41, l49, l54, l58, l62, l18, l26, l34, l42, l50, l55, l59, l63, l19, l27, l35, l43, l51)
b64, = sch.get_consumers(block=b1)
sch.reverse_compute_at(block=b64, loop=l49, preserve_unit_loops=True, index=-1)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.vectorize", ann_val=64)
v65 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.unroll_explicit", ann_val=v65)
l66 = sch.sample_compute_location(block=b0, decision=8)
sch.compute_at(block=b0, loop=l66, preserve_unit_loops=True, index=-1)
sch.enter_postproc()
b67 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b67, ann_key="meta_schedule.parallel")
sch.unannotate(block_or_loop=b67, ann_key="meta_schedule.vectorize")
sch.unannotate(block_or_loop=b67, ann_key="meta_schedule.unroll_explicit")
b68, b69, b70 = sch.get_child_blocks(b67)
l71, l72, l73, l74, l75, l76, l77, l78, l79, l80, l81, l82, l83, l84 = sch.get_loops(block=b68)
l85 = sch.fuse(l71, l72, l73, l74, l75, l76, l77, l78, l79, preserve_unit_iters=True)
sch.parallel(loop=l85)
l86, l87, l88, l89, l90, l91, l92, l93, l94, l95, l96, l97, l98, l99, l100, l101, l102, l103 = sch.get_loops(block=b69)
l104 = sch.fuse(l86, preserve_unit_iters=True)
sch.parallel(loop=l104)
sch.annotate(block_or_loop=l104, ann_key="pragma_auto_unroll_max_step", ann_val=512)
sch.annotate(block_or_loop=l104, ann_key="pragma_unroll_explicit", ann_val=1)
l105, l106, l107, l108, l109, l110, l111 = sch.get_loops(block=b70)
l112 = sch.fuse(l110, l111, preserve_unit_iters=True)
sch.vectorize(loop=l112)
b113 = sch.get_block(name="conv2d_NCHWc", func_name="main")
l114, l115, l116, l117, l118, l119, l120, l121, l122, l123, l124, l125, l126, l127, l128, l129, l130, l131 = sch.get_loops(block=b113)
b132 = sch.decompose_reduction(block=b113, loop=l116)
2024-04-28 16:13:21 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #1274: GFLOPs: 359.9886. Time: 2569.6501 us. Best GFLOPs: 732.5370
2024-04-28 16:13:21 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #1275: GFLOPs: 357.7734. Time: 2585.5604 us. Best GFLOPs: 732.5370
2024-04-28 16:13:21 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #1276: GFLOPs: 355.0739. Time: 2605.2174 us. Best GFLOPs: 732.5370
2024-04-28 16:13:21 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #1277: GFLOPs: 358.0460. Time: 2583.5919 us. Best GFLOPs: 732.5370
2024-04-28 16:13:21 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #1278: GFLOPs: 12.8042. Time: 72245.5287 us. Best GFLOPs: 732.5370
2024-04-28 16:13:21 [INFO] [task_scheduler.cc:121] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #1279: Error in building:
LocalBuilder: Timeout, killed after 30.0 seconds
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(1), T.int64(14), T.int64(14), T.int64(512)), "float32"), p1: T.Buffer((T.int64(32), T.int64(1), T.int64(3), T.int64(3), T.int64(512), T.int64(16)), "float32"), p2: T.Buffer((T.int64(1), T.int64(32), T.int64(1), T.int64(1), T.int64(16)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(32), T.int64(14), T.int64(14), T.int64(16)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        data_pad = T.alloc_buffer((T.int64(1), T.int64(1), T.int64(16), T.int64(16), T.int64(512)))
        conv2d_NCHWc = T.alloc_buffer((T.int64(1), T.int64(32), T.int64(14), T.int64(14), T.int64(16)))
        for n_0_oc_chunk_0_oh_0_fused_fused in T.parallel(T.int64(7), annotations={"pragma_auto_unroll_max_step": 512, "pragma_unroll_explicit": 1}):
            for ax0, ax1, ax2, ax3, ax4 in T.grid(T.int64(1), T.int64(1), T.int64(4), T.int64(16), T.int64(512)):
                with T.block("data_pad"):
                    v_i0, v_i1 = T.axis.remap("SS", [ax0, ax1])
                    v_i2 = T.axis.spatial(T.int64(16), n_0_oc_chunk_0_oh_0_fused_fused * T.int64(2) + ax2)
                    v_i3, v_i4 = T.axis.remap("SS", [ax3, ax4])
                    T.reads(p0[v_i0, v_i1, v_i2 - T.int64(1), v_i3 - T.int64(1), v_i4])
                    T.writes(data_pad[v_i0, v_i1, v_i2, v_i3, v_i4])
                    data_pad[v_i0, v_i1, v_i2, v_i3, v_i4] = T.if_then_else(T.int64(1) <= v_i2 and v_i2 < T.int64(15) and T.int64(1) <= v_i3 and v_i3 < T.int64(15), p0[v_i0, v_i1, v_i2 - T.int64(1), v_i3 - T.int64(1), v_i4], T.float32(0))
            for ow_0, oc_block_0, n_1, oc_chunk_1, oh_1, ow_1, oc_block_1 in T.grid(T.int64(1), T.int64(4), T.int64(1), T.int64(2), T.int64(2), T.int64(7), T.int64(1)):
                for n_2_init, oc_chunk_2_init, oh_2_init, ow_2_init, oc_block_2_init, n_3_init, oc_chunk_3_init, oh_3_init, ow_3_init in T.grid(T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(1), T.int64(16), T.int64(1), T.int64(2)):
                    for oc_block_3_fused_init in T.vectorized(T.int64(2)):
                        with T.block("conv2d_NCHWc_init"):
                            v_n = T.axis.spatial(T.int64(1), n_1 + n_2_init + n_3_init)
                            v_oc_chunk = T.axis.spatial(T.int64(32), oc_chunk_1 * T.int64(16) + oc_chunk_2_init * T.int64(16) + oc_chunk_3_init)
                            v_oh = T.axis.spatial(T.int64(14), n_0_oc_chunk_0_oh_0_fused_fused * T.int64(2) + oh_1 + oh_2_init + oh_3_init)
                            v_ow = T.axis.spatial(T.int64(14), ow_0 * T.int64(14) + ow_1 * T.int64(2) + ow_2_init * T.int64(2) + ow_3_init)
                            v_oc_block = T.axis.spatial(T.int64(16), oc_block_0 * T.int64(4) + oc_block_1 * T.int64(4) + oc_block_2_init * T.int64(2) + oc_block_3_fused_init)
                            T.reads()
                            T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                            T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                            conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = T.float32(0)
                for ic_0, kh_0, kw_0, n_2, oc_chunk_2, oh_2, ow_2, oc_block_2, ic_1, kh_1, kw_1, n_3, oc_chunk_3, oh_3, ow_3 in T.grid(T.int64(16), T.int64(1), T.int64(3), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(32), T.int64(3), T.int64(1), T.int64(1), T.int64(16), T.int64(1), T.int64(2)):
                    for oc_block_3_fused in T.vectorized(T.int64(2)):
                        with T.block("conv2d_NCHWc_update"):
                            v_n = T.axis.spatial(T.int64(1), n_1 + n_2 + n_3)
                            v_oc_chunk = T.axis.spatial(T.int64(32), oc_chunk_1 * T.int64(16) + oc_chunk_2 * T.int64(16) + oc_chunk_3)
                            v_oh = T.axis.spatial(T.int64(14), n_0_oc_chunk_0_oh_0_fused_fused * T.int64(2) + oh_1 + oh_2 + oh_3)
                            v_ow = T.axis.spatial(T.int64(14), ow_0 * T.int64(14) + ow_1 * T.int64(2) + ow_2 * T.int64(2) + ow_3)
                            v_oc_block = T.axis.spatial(T.int64(16), oc_block_0 * T.int64(4) + oc_block_1 * T.int64(4) + oc_block_2 * T.int64(2) + oc_block_3_fused)
                            v_ic = T.axis.reduce(T.int64(512), ic_0 * T.int64(32) + ic_1)
                            v_kh = T.axis.reduce(T.int64(3), kh_0 * T.int64(3) + kh_1)
                            v_kw = T.axis.reduce(T.int64(3), kw_0 + kw_1)
                            T.reads(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block], data_pad[v_n, v_ic // T.int64(512), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(512)], p1[v_oc_chunk, v_ic // T.int64(512), v_kh, v_kw, v_ic % T.int64(512), v_oc_block])
                            T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                            T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                            conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] + data_pad[v_n, v_ic // T.int64(512), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(512)] * p1[v_oc_chunk, v_ic // T.int64(512), v_kh, v_kw, v_ic % T.int64(512), v_oc_block]
                for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(16), T.int64(1), T.int64(2)):
                    for ax4_fused in T.vectorized(T.int64(4)):
                        with T.block("T_relu"):
                            v_ax0 = T.axis.spatial(T.int64(1), ax0)
                            v_ax1 = T.axis.spatial(T.int64(32), oc_chunk_1 * T.int64(16) + ax1)
                            v_ax2 = T.axis.spatial(T.int64(14), n_0_oc_chunk_0_oh_0_fused_fused * T.int64(2) + oh_1 + ax2)
                            v_ax3 = T.axis.spatial(T.int64(14), ow_1 * T.int64(2) + ax3)
                            v_ax4 = T.axis.spatial(T.int64(16), oc_block_0 * T.int64(4) + ax4_fused)
                            T.reads(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4])
                            T.writes(T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                            T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.max(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] + p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4], T.float32(0))
b0 = sch.get_block(name="data_pad", func_name="main")
b1 = sch.get_block(name="conv2d_NCHWc", func_name="main")
b2 = sch.get_block(name="T_add", func_name="main")
b3 = sch.get_block(name="root", func_name="main")
sch.compute_inline(block=b2)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSRSRS")
l4, l5, l6, l7, l8, l9, l10, l11 = sch.get_loops(block=b1)
v12, v13, v14, v15 = sch.sample_perfect_tile(loop=l4, n=4, max_innermost_factor=64, decision=[1, 1, 1, 1])
l16, l17, l18, l19 = sch.split(loop=l4, factors=[v12, v13, v14, v15], preserve_unit_iters=True)
v20, v21, v22, v23 = sch.sample_perfect_tile(loop=l5, n=4, max_innermost_factor=64, decision=[1, 2, 1, 16])
l24, l25, l26, l27 = sch.split(loop=l5, factors=[v20, v21, v22, v23], preserve_unit_iters=True)
v28, v29, v30, v31 = sch.sample_perfect_tile(loop=l6, n=4, max_innermost_factor=64, decision=[7, 2, 1, 1])
l32, l33, l34, l35 = sch.split(loop=l6, factors=[v28, v29, v30, v31], preserve_unit_iters=True)
v36, v37, v38, v39 = sch.sample_perfect_tile(loop=l7, n=4, max_innermost_factor=64, decision=[1, 7, 1, 2])
l40, l41, l42, l43 = sch.split(loop=l7, factors=[v36, v37, v38, v39], preserve_unit_iters=True)
v44, v45, v46, v47 = sch.sample_perfect_tile(loop=l8, n=4, max_innermost_factor=64, decision=[4, 1, 2, 2])
l48, l49, l50, l51 = sch.split(loop=l8, factors=[v44, v45, v46, v47], preserve_unit_iters=True)
v52, v53 = sch.sample_perfect_tile(loop=l9, n=2, max_innermost_factor=64, decision=[16, 32])
l54, l55 = sch.split(loop=l9, factors=[v52, v53], preserve_unit_iters=True)
v56, v57 = sch.sample_perfect_tile(loop=l10, n=2, max_innermost_factor=64, decision=[1, 3])
l58, l59 = sch.split(loop=l10, factors=[v56, v57], preserve_unit_iters=True)
v60, v61 = sch.sample_perfect_tile(loop=l11, n=2, max_innermost_factor=64, decision=[3, 1])
l62, l63 = sch.split(loop=l11, factors=[v60, v61], preserve_unit_iters=True)
sch.reorder(l16, l24, l32, l40, l48, l17, l25, l33, l41, l49, l54, l58, l62, l18, l26, l34, l42, l50, l55, l59, l63, l19, l27, l35, l43, l51)
b64, = sch.get_consumers(block=b1)
sch.reverse_compute_at(block=b64, loop=l49, preserve_unit_loops=True, index=-1)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.vectorize", ann_val=64)
v65 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.unroll_explicit", ann_val=v65)
l66 = sch.sample_compute_location(block=b0, decision=2)
sch.compute_at(block=b0, loop=l66, preserve_unit_loops=True, index=-1)
sch.enter_postproc()
b67 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b67, ann_key="meta_schedule.parallel")
sch.unannotate(block_or_loop=b67, ann_key="meta_schedule.vectorize")
sch.unannotate(block_or_loop=b67, ann_key="meta_schedule.unroll_explicit")
b68, b69, b70 = sch.get_child_blocks(b67)
l71, l72, l73, l74, l75, l76, l77, l78 = sch.get_loops(block=b68)
l79 = sch.fuse(l71, l72, l73, preserve_unit_iters=True)
sch.parallel(loop=l79)
l80, l81, l82, l83, l84, l85, l86, l87, l88, l89, l90, l91, l92, l93, l94, l95, l96, l97, l98, l99, l100, l101, l102, l103 = sch.get_loops(block=b69)
l104 = sch.fuse(l80, preserve_unit_iters=True)
sch.parallel(loop=l104)
l105 = sch.fuse(l103, preserve_unit_iters=True)
sch.vectorize(loop=l105)
sch.annotate(block_or_loop=l104, ann_key="pragma_auto_unroll_max_step", ann_val=512)
sch.annotate(block_or_loop=l104, ann_key="pragma_unroll_explicit", ann_val=1)
l106, l107, l108, l109, l110, l111, l112, l113, l114, l115, l116, l117, l118 = sch.get_loops(block=b70)
l119 = sch.fuse(l118, preserve_unit_iters=True)
sch.vectorize(loop=l119)
b120 = sch.get_block(name="conv2d_NCHWc", func_name="main")
l121, l122, l123, l124, l125, l126, l127, l128, l129, l130, l131, l132, l133, l134, l135, l136, l137, l138, l139, l140, l141, l142, l143, l144 = sch.get_loops(block=b120)
b145 = sch.decompose_reduction(block=b120, loop=l129)
2024-04-28 16:13:21 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #1280: GFLOPs: 13.4067. Time: 68998.6743 us. Best GFLOPs: 732.5370
2024-04-28 16:47:18 [INFO] [evolutionary_search.cc:713] Generating candidates......
2024-04-28 16:47:19 [INFO] [evolutionary_search.cc:715] Picked top 102 candidate(s) from database
2024-04-28 16:47:24 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x3861aa8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x37d26b8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x4dd4148)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x3201bb8)]: 0 failure(s)
2024-04-28 16:47:24 [INFO] [evolutionary_search.cc:723] Sampled 410 candidate(s)
2024-04-28 16:47:36 [INFO] [evolutionary_search.cc:621] Evolve iter #0 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x3861aa8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x37d26b8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x4dd4148)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x3201bb8)]: 0 failure(s)
2024-04-28 16:47:48 [INFO] [evolutionary_search.cc:621] Evolve iter #1 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x3861aa8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x37d26b8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x4dd4148)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x3201bb8)]: 0 failure(s)
2024-04-28 16:48:00 [INFO] [evolutionary_search.cc:621] Evolve iter #2 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x3861aa8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x37d26b8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x4dd4148)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x3201bb8)]: 0 failure(s)
2024-04-28 16:48:13 [INFO] [evolutionary_search.cc:621] Evolve iter #3 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x3861aa8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x37d26b8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x4dd4148)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x3201bb8)]: 0 failure(s)
2024-04-28 16:48:21 [INFO] [evolutionary_search.cc:649] Scores of the best 64 candidates:
[1 : 16]:	0.9092  0.8955  0.8885  0.8885  0.8885  0.8800  0.8776  0.8747  0.8662  0.8628  0.8628  0.8619  0.8538  0.8436  0.8421  0.8419
[17 : 32]:	0.8419  0.8384  0.8227  0.8136  0.8136  0.8136  0.8134  0.8060  0.8004  0.8004  0.7998  0.7961  0.7953  0.7866  0.7826  0.7773
[33 : 48]:	0.7770  0.7745  0.7712  0.7708  0.7708  0.7664  0.7631  0.7591  0.7539  0.7528  0.7483  0.7427  0.7427  0.7427  0.7418  0.7397
[49 : 64]:	0.7371  0.7257  0.7247  0.7200  0.7138  0.7098  0.7098  0.7059  0.7059  0.7050  0.7046  0.7046  0.7046  0.6956  0.6909  0.6899
2024-04-28 16:48:21 [INFO] [evolutionary_search.cc:727] Got 64 candidate(s) with evolutionary search
2024-04-28 16:48:21 [INFO] [evolutionary_search.cc:730] Sending 64 candidates(s) for measurement
2024-04-28 16:50:18 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #1281: GFLOPs: 619.5720. Time: 1493.0383 us. Best GFLOPs: 732.5370
2024-04-28 16:50:18 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #1282: GFLOPs: 691.5818. Time: 1337.5781 us. Best GFLOPs: 732.5370
2024-04-28 16:50:18 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #1283: GFLOPs: 625.1506. Time: 1479.7149 us. Best GFLOPs: 732.5370
2024-04-28 16:50:18 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #1284: GFLOPs: 626.3763. Time: 1476.8195 us. Best GFLOPs: 732.5370
2024-04-28 16:50:18 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #1285: GFLOPs: 625.6122. Time: 1478.6233 us. Best GFLOPs: 732.5370
2024-04-28 16:50:18 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #1286: GFLOPs: 611.7698. Time: 1512.0798 us. Best GFLOPs: 732.5370
2024-04-28 16:50:18 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #1287: GFLOPs: 645.2772. Time: 1433.5619 us. Best GFLOPs: 732.5370
2024-04-28 16:50:18 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #1288: GFLOPs: 679.7277. Time: 1360.9050 us. Best GFLOPs: 732.5370
2024-04-28 16:50:18 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #1289: GFLOPs: 645.9717. Time: 1432.0206 us. Best GFLOPs: 732.5370
2024-04-28 16:50:18 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #1290: GFLOPs: 652.2906. Time: 1418.1483 us. Best GFLOPs: 732.5370
2024-04-28 16:50:18 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #1291: GFLOPs: 648.3237. Time: 1426.8255 us. Best GFLOPs: 732.5370
2024-04-28 16:50:18 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #1292: GFLOPs: 652.3934. Time: 1417.9247 us. Best GFLOPs: 732.5370
2024-04-28 16:50:18 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #1293: GFLOPs: 594.1558. Time: 1556.9061 us. Best GFLOPs: 732.5370
2024-04-28 16:50:18 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #1294: GFLOPs: 612.6231. Time: 1509.9737 us. Best GFLOPs: 732.5370
2024-04-28 16:50:18 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #1295: GFLOPs: 600.9992. Time: 1539.1779 us. Best GFLOPs: 732.5370
2024-04-28 16:50:18 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #1296: GFLOPs: 729.0176. Time: 1268.8921 us. Best GFLOPs: 732.5370
2024-04-28 16:50:18 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #1297: GFLOPs: 666.7592. Time: 1387.3746 us. Best GFLOPs: 732.5370
2024-04-28 16:50:18 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #1298: GFLOPs: 720.9198. Time: 1283.1451 us. Best GFLOPs: 732.5370
2024-04-28 16:50:18 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #1299: GFLOPs: 596.4524. Time: 1550.9113 us. Best GFLOPs: 732.5370
2024-04-28 16:50:18 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #1300: GFLOPs: 610.6973. Time: 1514.7351 us. Best GFLOPs: 732.5370
2024-04-28 16:50:18 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #1301: GFLOPs: 614.6931. Time: 1504.8888 us. Best GFLOPs: 732.5370
2024-04-28 16:50:18 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #1302: GFLOPs: 616.6082. Time: 1500.2147 us. Best GFLOPs: 732.5370
2024-04-28 16:50:18 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #1303: GFLOPs: 567.7208. Time: 1629.4009 us. Best GFLOPs: 732.5370
2024-04-28 16:50:18 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #1304: GFLOPs: 570.4745. Time: 1621.5356 us. Best GFLOPs: 732.5370
2024-04-28 16:50:18 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #1305: GFLOPs: 600.7124. Time: 1539.9129 us. Best GFLOPs: 732.5370
2024-04-28 16:50:18 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #1306: GFLOPs: 608.6985. Time: 1519.7093 us. Best GFLOPs: 732.5370
2024-04-28 16:50:18 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #1307: GFLOPs: 581.6926. Time: 1590.2638 us. Best GFLOPs: 732.5370
2024-04-28 16:50:18 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #1308: GFLOPs: 157.1420. Time: 5886.6816 us. Best GFLOPs: 732.5370
2024-04-28 16:50:18 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #1309: GFLOPs: 592.2216. Time: 1561.9908 us. Best GFLOPs: 732.5370
2024-04-28 16:50:18 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #1310: GFLOPs: 570.7879. Time: 1620.6454 us. Best GFLOPs: 732.5370
2024-04-28 16:50:18 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #1311: GFLOPs: 579.9057. Time: 1595.1642 us. Best GFLOPs: 732.5370
2024-04-28 16:50:18 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #1312: GFLOPs: 598.2275. Time: 1546.3092 us. Best GFLOPs: 732.5370
2024-04-28 16:50:18 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #1313: GFLOPs: 288.7034. Time: 3204.1356 us. Best GFLOPs: 732.5370
2024-04-28 16:50:18 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #1314: GFLOPs: 612.5865. Time: 1510.0640 us. Best GFLOPs: 732.5370
2024-04-28 16:50:18 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #1315: GFLOPs: 522.3048. Time: 1771.0821 us. Best GFLOPs: 732.5370
2024-04-28 16:50:18 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #1316: GFLOPs: 559.4763. Time: 1653.4118 us. Best GFLOPs: 732.5370
2024-04-28 16:50:18 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #1317: GFLOPs: 563.4713. Time: 1641.6893 us. Best GFLOPs: 732.5370
2024-04-28 16:50:18 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #1318: GFLOPs: 595.9130. Time: 1552.3151 us. Best GFLOPs: 732.5370
2024-04-28 16:50:18 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #1319: GFLOPs: 586.7920. Time: 1576.4441 us. Best GFLOPs: 732.5370
2024-04-28 16:50:18 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #1320: GFLOPs: 550.2262. Time: 1681.2080 us. Best GFLOPs: 732.5370
2024-04-28 16:50:18 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #1321: GFLOPs: 726.5226. Time: 1273.2498 us. Best GFLOPs: 732.5370
2024-04-28 16:50:18 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #1322: GFLOPs: 552.9807. Time: 1672.8337 us. Best GFLOPs: 732.5370
2024-04-28 16:50:18 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #1323: GFLOPs: 542.7309. Time: 1704.4261 us. Best GFLOPs: 732.5370
2024-04-28 16:50:18 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #1324: GFLOPs: 615.4054. Time: 1503.1470 us. Best GFLOPs: 732.5370
2024-04-28 16:50:18 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #1325: GFLOPs: 538.4305. Time: 1718.0393 us. Best GFLOPs: 732.5370
2024-04-28 16:50:18 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #1326: GFLOPs: 563.5789. Time: 1641.3757 us. Best GFLOPs: 732.5370
2024-04-28 16:50:18 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #1327: GFLOPs: 528.5718. Time: 1750.0835 us. Best GFLOPs: 732.5370
2024-04-28 16:50:18 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #1328: GFLOPs: 556.2872. Time: 1662.8905 us. Best GFLOPs: 732.5370
2024-04-28 16:50:18 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #1329: GFLOPs: 503.8045. Time: 1836.1184 us. Best GFLOPs: 732.5370
2024-04-28 16:50:18 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #1330: GFLOPs: 589.4552. Time: 1569.3216 us. Best GFLOPs: 732.5370
2024-04-28 16:50:18 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #1331: GFLOPs: 571.1482. Time: 1619.6230 us. Best GFLOPs: 732.5370
2024-04-28 16:50:18 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #1332: GFLOPs: 549.9227. Time: 1682.1360 us. Best GFLOPs: 732.5370
2024-04-28 16:50:18 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #1333: GFLOPs: 503.9762. Time: 1835.4928 us. Best GFLOPs: 732.5370
2024-04-28 16:50:18 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #1334: GFLOPs: 536.9459. Time: 1722.7896 us. Best GFLOPs: 732.5370
2024-04-28 16:50:18 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #1335: GFLOPs: 533.6079. Time: 1733.5665 us. Best GFLOPs: 732.5370
2024-04-28 16:50:18 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #1336: GFLOPs: 680.5681. Time: 1359.2244 us. Best GFLOPs: 732.5370
2024-04-28 16:50:18 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #1337: GFLOPs: 676.5066. Time: 1367.3846 us. Best GFLOPs: 732.5370
2024-04-28 16:50:18 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #1338: GFLOPs: 494.1293. Time: 1872.0701 us. Best GFLOPs: 732.5370
2024-04-28 16:50:18 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #1339: GFLOPs: 683.2993. Time: 1353.7915 us. Best GFLOPs: 732.5370
2024-04-28 16:50:18 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #1340: GFLOPs: 678.0152. Time: 1364.3422 us. Best GFLOPs: 732.5370
2024-04-28 16:50:18 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #1341: GFLOPs: 674.9624. Time: 1370.5130 us. Best GFLOPs: 732.5370
2024-04-28 16:50:18 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #1342: GFLOPs: 37.2615. Time: 24825.7322 us. Best GFLOPs: 732.5370
2024-04-28 16:50:18 [INFO] [task_scheduler.cc:121] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #1343: Error in building:
LocalBuilder: Timeout, killed after 30.0 seconds
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(1), T.int64(14), T.int64(14), T.int64(512)), "float32"), p1: T.Buffer((T.int64(32), T.int64(1), T.int64(3), T.int64(3), T.int64(512), T.int64(16)), "float32"), p2: T.Buffer((T.int64(1), T.int64(32), T.int64(1), T.int64(1), T.int64(16)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(32), T.int64(14), T.int64(14), T.int64(16)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        data_pad = T.alloc_buffer((T.int64(1), T.int64(1), T.int64(16), T.int64(16), T.int64(512)))
        conv2d_NCHWc = T.alloc_buffer((T.int64(1), T.int64(32), T.int64(14), T.int64(14), T.int64(16)))
        for n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_fused_fused in T.parallel(T.int64(196), annotations={"pragma_auto_unroll_max_step": 512, "pragma_unroll_explicit": 1}):
            for ax0, ax1, ax2, ax3, ax4 in T.grid(T.int64(1), T.int64(1), T.int64(4), T.int64(4), T.int64(512)):
                with T.block("data_pad"):
                    v_i0, v_i1 = T.axis.remap("SS", [ax0, ax1])
                    v_i2 = T.axis.spatial(T.int64(16), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_fused_fused % T.int64(7) * T.int64(2) + ax2)
                    v_i3 = T.axis.spatial(T.int64(16), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_fused_fused % T.int64(98) // T.int64(14) * T.int64(2) + ax3)
                    v_i4 = T.axis.spatial(T.int64(512), ax4)
                    T.reads(p0[v_i0, v_i1, v_i2 - T.int64(1), v_i3 - T.int64(1), v_i4])
                    T.writes(data_pad[v_i0, v_i1, v_i2, v_i3, v_i4])
                    data_pad[v_i0, v_i1, v_i2, v_i3, v_i4] = T.if_then_else(T.int64(1) <= v_i2 and v_i2 < T.int64(15) and T.int64(1) <= v_i3 and v_i3 < T.int64(15), p0[v_i0, v_i1, v_i2 - T.int64(1), v_i3 - T.int64(1), v_i4], T.float32(0))
            for ow_1, oc_block_1 in T.grid(T.int64(2), T.int64(2)):
                for n_2_init, oc_chunk_2_init, oh_2_init, ow_2_init, oc_block_2_init, n_3_init, oc_chunk_3_init, oh_3_init, ow_3_init, oc_block_3_init in T.grid(T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(8), T.int64(1), T.int64(8), T.int64(2), T.int64(1), T.int64(1)):
                    with T.block("conv2d_NCHWc_init"):
                        v_n = T.axis.spatial(T.int64(1), n_2_init + n_3_init)
                        v_oc_chunk = T.axis.spatial(T.int64(32), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_fused_fused // T.int64(98) * T.int64(16) + n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_fused_fused % T.int64(14) // T.int64(7) * T.int64(8) + oc_chunk_2_init * T.int64(8) + oc_chunk_3_init)
                        v_oh = T.axis.spatial(T.int64(14), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_fused_fused % T.int64(7) * T.int64(2) + oh_2_init * T.int64(2) + oh_3_init)
                        v_ow = T.axis.spatial(T.int64(14), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_fused_fused % T.int64(98) // T.int64(14) * T.int64(2) + ow_1 + ow_2_init + ow_3_init)
                        v_oc_block = T.axis.spatial(T.int64(16), oc_block_1 * T.int64(8) + oc_block_2_init + oc_block_3_init)
                        T.reads()
                        T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                        T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                        conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = T.float32(0)
                for ic_0, kh_0, kw_0, n_2, oc_chunk_2, oh_2, ow_2, oc_block_2, ic_1, kh_1, kw_1, n_3, oc_chunk_3, oh_3, ow_3, oc_block_3 in T.grid(T.int64(128), T.int64(3), T.int64(3), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(8), T.int64(4), T.int64(1), T.int64(1), T.int64(1), T.int64(8), T.int64(2), T.int64(1), T.int64(1)):
                    with T.block("conv2d_NCHWc_update"):
                        v_n = T.axis.spatial(T.int64(1), n_2 + n_3)
                        v_oc_chunk = T.axis.spatial(T.int64(32), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_fused_fused // T.int64(98) * T.int64(16) + n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_fused_fused % T.int64(14) // T.int64(7) * T.int64(8) + oc_chunk_2 * T.int64(8) + oc_chunk_3)
                        v_oh = T.axis.spatial(T.int64(14), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_fused_fused % T.int64(7) * T.int64(2) + oh_2 * T.int64(2) + oh_3)
                        v_ow = T.axis.spatial(T.int64(14), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_fused_fused % T.int64(98) // T.int64(14) * T.int64(2) + ow_1 + ow_2 + ow_3)
                        v_oc_block = T.axis.spatial(T.int64(16), oc_block_1 * T.int64(8) + oc_block_2 + oc_block_3)
                        v_ic = T.axis.reduce(T.int64(512), ic_0 * T.int64(4) + ic_1)
                        v_kh = T.axis.reduce(T.int64(3), kh_0 + kh_1)
                        v_kw = T.axis.reduce(T.int64(3), kw_0 + kw_1)
                        T.reads(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block], data_pad[v_n, v_ic // T.int64(512), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(512)], p1[v_oc_chunk, v_ic // T.int64(512), v_kh, v_kw, v_ic % T.int64(512), v_oc_block])
                        T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                        T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                        conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] + data_pad[v_n, v_ic // T.int64(512), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(512)] * p1[v_oc_chunk, v_ic // T.int64(512), v_kh, v_kw, v_ic % T.int64(512), v_oc_block]
        for ax0_ax1_ax2_ax3_ax4_fused_0 in T.parallel(T.int64(1568)):
            for ax0_ax1_ax2_ax3_ax4_fused_1 in T.vectorized(T.int64(64)):
                with T.block("T_relu"):
                    v_ax0 = T.axis.spatial(T.int64(1), T.int64(0))
                    v_ax1 = T.axis.spatial(T.int64(32), (ax0_ax1_ax2_ax3_ax4_fused_0 * T.int64(64) + ax0_ax1_ax2_ax3_ax4_fused_1) // T.int64(3136))
                    v_ax2 = T.axis.spatial(T.int64(14), (ax0_ax1_ax2_ax3_ax4_fused_0 * T.int64(64) + ax0_ax1_ax2_ax3_ax4_fused_1) % T.int64(3136) // T.int64(224))
                    v_ax3 = T.axis.spatial(T.int64(14), (ax0_ax1_ax2_ax3_ax4_fused_0 * T.int64(64) + ax0_ax1_ax2_ax3_ax4_fused_1) % T.int64(224) // T.int64(16))
                    v_ax4 = T.axis.spatial(T.int64(16), (ax0_ax1_ax2_ax3_ax4_fused_0 * T.int64(64) + ax0_ax1_ax2_ax3_ax4_fused_1) % T.int64(16))
                    T.reads(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4])
                    T.writes(T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                    T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.max(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] + p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4], T.float32(0))
b0 = sch.get_block(name="data_pad", func_name="main")
b1 = sch.get_block(name="conv2d_NCHWc", func_name="main")
b2 = sch.get_block(name="T_add", func_name="main")
b3 = sch.get_block(name="root", func_name="main")
sch.compute_inline(block=b2)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSRSRS")
l4, l5, l6, l7, l8, l9, l10, l11 = sch.get_loops(block=b1)
v12, v13, v14, v15 = sch.sample_perfect_tile(loop=l4, n=4, max_innermost_factor=64, decision=[1, 1, 1, 1])
l16, l17, l18, l19 = sch.split(loop=l4, factors=[v12, v13, v14, v15], preserve_unit_iters=True)
v20, v21, v22, v23 = sch.sample_perfect_tile(loop=l5, n=4, max_innermost_factor=64, decision=[2, 2, 1, 8])
l24, l25, l26, l27 = sch.split(loop=l5, factors=[v20, v21, v22, v23], preserve_unit_iters=True)
v28, v29, v30, v31 = sch.sample_perfect_tile(loop=l6, n=4, max_innermost_factor=64, decision=[1, 7, 1, 2])
l32, l33, l34, l35 = sch.split(loop=l6, factors=[v28, v29, v30, v31], preserve_unit_iters=True)
v36, v37, v38, v39 = sch.sample_perfect_tile(loop=l7, n=4, max_innermost_factor=64, decision=[7, 2, 1, 1])
l40, l41, l42, l43 = sch.split(loop=l7, factors=[v36, v37, v38, v39], preserve_unit_iters=True)
v44, v45, v46, v47 = sch.sample_perfect_tile(loop=l8, n=4, max_innermost_factor=64, decision=[1, 2, 8, 1])
l48, l49, l50, l51 = sch.split(loop=l8, factors=[v44, v45, v46, v47], preserve_unit_iters=True)
v52, v53 = sch.sample_perfect_tile(loop=l9, n=2, max_innermost_factor=64, decision=[128, 4])
l54, l55 = sch.split(loop=l9, factors=[v52, v53], preserve_unit_iters=True)
v56, v57 = sch.sample_perfect_tile(loop=l10, n=2, max_innermost_factor=64, decision=[3, 1])
l58, l59 = sch.split(loop=l10, factors=[v56, v57], preserve_unit_iters=True)
v60, v61 = sch.sample_perfect_tile(loop=l11, n=2, max_innermost_factor=64, decision=[3, 1])
l62, l63 = sch.split(loop=l11, factors=[v60, v61], preserve_unit_iters=True)
sch.reorder(l16, l24, l32, l40, l48, l17, l25, l33, l41, l49, l54, l58, l62, l18, l26, l34, l42, l50, l55, l59, l63, l19, l27, l35, l43, l51)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.vectorize", ann_val=64)
v64 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.unroll_explicit", ann_val=v64)
l65 = sch.sample_compute_location(block=b0, decision=7)
sch.compute_at(block=b0, loop=l65, preserve_unit_loops=True, index=-1)
sch.enter_postproc()
b66 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b66, ann_key="meta_schedule.parallel")
sch.unannotate(block_or_loop=b66, ann_key="meta_schedule.vectorize")
sch.unannotate(block_or_loop=b66, ann_key="meta_schedule.unroll_explicit")
b67, b68, b69 = sch.get_child_blocks(b66)
l70, l71, l72, l73, l74, l75, l76, l77, l78, l79, l80, l81, l82 = sch.get_loops(block=b67)
l83 = sch.fuse(l70, l71, l72, l73, l74, l75, l76, l77, preserve_unit_iters=True)
sch.parallel(loop=l83)
l84, l85, l86, l87, l88, l89, l90, l91, l92, l93, l94, l95, l96, l97, l98, l99, l100, l101, l102 = sch.get_loops(block=b68)
l103 = sch.fuse(l84, preserve_unit_iters=True)
sch.parallel(loop=l103)
sch.annotate(block_or_loop=l103, ann_key="pragma_auto_unroll_max_step", ann_val=512)
sch.annotate(block_or_loop=l103, ann_key="pragma_unroll_explicit", ann_val=1)
l104, l105, l106, l107, l108 = sch.get_loops(block=b69)
l109 = sch.fuse(l104, l105, l106, l107, l108, preserve_unit_iters=True)
l110, l111 = sch.split(loop=l109, factors=[None, 64], preserve_unit_iters=True)
sch.parallel(loop=l110)
sch.vectorize(loop=l111)
b112 = sch.get_block(name="conv2d_NCHWc", func_name="main")
l113, l114, l115, l116, l117, l118, l119, l120, l121, l122, l123, l124, l125, l126, l127, l128, l129, l130, l131 = sch.get_loops(block=b112)
b132 = sch.decompose_reduction(block=b112, loop=l116)
2024-04-28 16:50:18 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #1344: GFLOPs: 121.8953. Time: 7588.8483 us. Best GFLOPs: 732.5370
2024-04-28 17:04:19 [INFO] [evolutionary_search.cc:713] Generating candidates......
2024-04-28 17:04:21 [INFO] [evolutionary_search.cc:715] Picked top 102 candidate(s) from database
2024-04-28 17:04:25 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x3861aa8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x37d26b8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x4dd4148)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x3201bb8)]: 0 failure(s)
2024-04-28 17:04:25 [INFO] [evolutionary_search.cc:723] Sampled 410 candidate(s)
2024-04-28 17:04:37 [INFO] [evolutionary_search.cc:621] Evolve iter #0 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x3861aa8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x37d26b8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x4dd4148)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x3201bb8)]: 0 failure(s)
2024-04-28 17:04:49 [INFO] [evolutionary_search.cc:621] Evolve iter #1 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x3861aa8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x37d26b8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x4dd4148)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x3201bb8)]: 0 failure(s)
2024-04-28 17:05:02 [INFO] [evolutionary_search.cc:621] Evolve iter #2 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x3861aa8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x37d26b8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x4dd4148)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x3201bb8)]: 0 failure(s)
2024-04-28 17:05:14 [INFO] [evolutionary_search.cc:621] Evolve iter #3 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x3861aa8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x37d26b8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x4dd4148)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x3201bb8)]: 0 failure(s)
2024-04-28 17:05:22 [INFO] [evolutionary_search.cc:649] Scores of the best 64 candidates:
[1 : 16]:	0.9266  0.9266  0.9132  0.9128  0.9023  0.9023  0.9010  0.8999  0.8978  0.8978  0.8970  0.8937  0.8723  0.8666  0.8623  0.8584
[17 : 32]:	0.8584  0.8534  0.8505  0.8435  0.8431  0.8375  0.8264  0.8153  0.8119  0.8114  0.8034  0.7937  0.7888  0.7798  0.7790  0.7752
[33 : 48]:	0.7712  0.7646  0.7454  0.7415  0.7399  0.7344  0.7302  0.7302  0.7288  0.7264  0.7257  0.7214  0.7140  0.7091  0.7091  0.7047
[49 : 64]:	0.6994  0.6969  0.6957  0.6929  0.6914  0.6912  0.6853  0.6848  0.6824  0.6821  0.6821  0.6794  0.6794  0.6791  0.6742  0.6742
2024-04-28 17:05:22 [INFO] [evolutionary_search.cc:727] Got 64 candidate(s) with evolutionary search
2024-04-28 17:05:22 [INFO] [evolutionary_search.cc:730] Sending 64 candidates(s) for measurement
2024-04-28 17:07:25 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #1345: GFLOPs: 667.9304. Time: 1384.9419 us. Best GFLOPs: 732.5370
2024-04-28 17:07:25 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #1346: GFLOPs: 641.2492. Time: 1442.5667 us. Best GFLOPs: 732.5370
2024-04-28 17:07:25 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #1347: GFLOPs: 564.4705. Time: 1638.7830 us. Best GFLOPs: 732.5370
2024-04-28 17:07:25 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #1348: GFLOPs: 443.2652. Time: 2086.8880 us. Best GFLOPs: 732.5370
2024-04-28 17:07:25 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #1349: GFLOPs: 691.5959. Time: 1337.5510 us. Best GFLOPs: 732.5370
2024-04-28 17:07:25 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #1350: GFLOPs: 695.4294. Time: 1330.1778 us. Best GFLOPs: 732.5370
2024-04-28 17:07:25 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #1351: GFLOPs: 332.4974. Time: 2782.1116 us. Best GFLOPs: 732.5370
2024-04-28 17:07:25 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #1352: GFLOPs: 662.3950. Time: 1396.5154 us. Best GFLOPs: 732.5370
2024-04-28 17:07:25 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #1353: GFLOPs: 620.6890. Time: 1490.3513 us. Best GFLOPs: 732.5370
2024-04-28 17:07:25 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #1354: GFLOPs: 647.7099. Time: 1428.1776 us. Best GFLOPs: 732.5370
2024-04-28 17:07:25 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #1355: GFLOPs: 651.2029. Time: 1420.5169 us. Best GFLOPs: 732.5370
2024-04-28 17:07:25 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #1356: GFLOPs: 681.5140. Time: 1357.3378 us. Best GFLOPs: 732.5370
2024-04-28 17:07:25 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #1357: GFLOPs: 668.4652. Time: 1383.8338 us. Best GFLOPs: 732.5370
2024-04-28 17:07:25 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #1358: GFLOPs: 650.8932. Time: 1421.1928 us. Best GFLOPs: 732.5370
2024-04-28 17:07:25 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #1359: GFLOPs: 655.4686. Time: 1411.2724 us. Best GFLOPs: 732.5370
2024-04-28 17:07:25 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #1360: GFLOPs: 636.3595. Time: 1453.6512 us. Best GFLOPs: 732.5370
2024-04-28 17:07:25 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #1361: GFLOPs: 651.5099. Time: 1419.8476 us. Best GFLOPs: 732.5370
2024-04-28 17:07:25 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #1362: GFLOPs: 508.4959. Time: 1819.1785 us. Best GFLOPs: 732.5370
2024-04-28 17:07:25 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #1363: GFLOPs: 647.1353. Time: 1429.4456 us. Best GFLOPs: 732.5370
2024-04-28 17:07:25 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #1364: GFLOPs: 610.1933. Time: 1515.9865 us. Best GFLOPs: 732.5370
2024-04-28 17:07:25 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #1365: GFLOPs: 354.8938. Time: 2606.5398 us. Best GFLOPs: 732.5370
2024-04-28 17:07:25 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #1366: GFLOPs: 621.6396. Time: 1488.0725 us. Best GFLOPs: 732.5370
2024-04-28 17:07:25 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #1367: GFLOPs: 590.4608. Time: 1566.6488 us. Best GFLOPs: 732.5370
2024-04-28 17:07:25 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #1368: GFLOPs: 595.6603. Time: 1552.9737 us. Best GFLOPs: 732.5370
2024-04-28 17:07:25 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #1369: GFLOPs: 571.9943. Time: 1617.2271 us. Best GFLOPs: 732.5370
2024-04-28 17:07:25 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #1370: GFLOPs: 596.6106. Time: 1550.5000 us. Best GFLOPs: 732.5370
2024-04-28 17:07:25 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #1371: GFLOPs: 626.7999. Time: 1475.8216 us. Best GFLOPs: 732.5370
2024-04-28 17:07:25 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #1372: GFLOPs: 647.5549. Time: 1428.5194 us. Best GFLOPs: 732.5370
2024-04-28 17:07:25 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #1373: GFLOPs: 645.9713. Time: 1432.0214 us. Best GFLOPs: 732.5370
2024-04-28 17:07:25 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #1374: GFLOPs: 632.9091. Time: 1461.5760 us. Best GFLOPs: 732.5370
2024-04-28 17:07:25 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #1375: GFLOPs: 590.7682. Time: 1565.8336 us. Best GFLOPs: 732.5370
2024-04-28 17:07:25 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #1376: GFLOPs: 634.6485. Time: 1457.5701 us. Best GFLOPs: 732.5370
2024-04-28 17:07:25 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #1377: GFLOPs: 578.5638. Time: 1598.8639 us. Best GFLOPs: 732.5370
2024-04-28 17:07:25 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #1378: GFLOPs: 531.7702. Time: 1739.5574 us. Best GFLOPs: 732.5370
2024-04-28 17:07:25 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #1379: GFLOPs: 611.7305. Time: 1512.1768 us. Best GFLOPs: 732.5370
2024-04-28 17:07:25 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #1380: GFLOPs: 112.3731. Time: 8231.9053 us. Best GFLOPs: 732.5370
2024-04-28 17:07:25 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #1381: GFLOPs: 471.0797. Time: 1963.6691 us. Best GFLOPs: 732.5370
2024-04-28 17:07:25 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #1382: GFLOPs: 524.7500. Time: 1762.8295 us. Best GFLOPs: 732.5370
2024-04-28 17:07:25 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #1383: GFLOPs: 556.8311. Time: 1661.2662 us. Best GFLOPs: 732.5370
2024-04-28 17:07:25 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #1384: GFLOPs: 647.6923. Time: 1428.2165 us. Best GFLOPs: 732.5370
2024-04-28 17:07:25 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #1385: GFLOPs: 122.1511. Time: 7572.9558 us. Best GFLOPs: 732.5370
2024-04-28 17:07:25 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #1386: GFLOPs: 534.5269. Time: 1730.5860 us. Best GFLOPs: 732.5370
2024-04-28 17:07:25 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #1387: GFLOPs: 622.8894. Time: 1485.0866 us. Best GFLOPs: 732.5370
2024-04-28 17:07:25 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #1388: GFLOPs: 527.3280. Time: 1754.2113 us. Best GFLOPs: 732.5370
2024-04-28 17:07:25 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #1389: GFLOPs: 593.8957. Time: 1557.5880 us. Best GFLOPs: 732.5370
2024-04-28 17:07:25 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #1390: GFLOPs: 122.6161. Time: 7544.2345 us. Best GFLOPs: 732.5370
2024-04-28 17:07:25 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #1391: GFLOPs: 121.3820. Time: 7620.9366 us. Best GFLOPs: 732.5370
2024-04-28 17:07:25 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #1392: GFLOPs: 523.5915. Time: 1766.7298 us. Best GFLOPs: 732.5370
2024-04-28 17:07:25 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #1393: GFLOPs: 528.2362. Time: 1751.1952 us. Best GFLOPs: 732.5370
2024-04-28 17:07:25 [INFO] [task_scheduler.cc:121] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #1394: Error in building:
LocalBuilder: Timeout, killed after 30.0 seconds
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(1), T.int64(14), T.int64(14), T.int64(512)), "float32"), p1: T.Buffer((T.int64(32), T.int64(1), T.int64(3), T.int64(3), T.int64(512), T.int64(16)), "float32"), p2: T.Buffer((T.int64(1), T.int64(32), T.int64(1), T.int64(1), T.int64(16)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(32), T.int64(14), T.int64(14), T.int64(16)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        data_pad = T.alloc_buffer((T.int64(1), T.int64(1), T.int64(16), T.int64(16), T.int64(512)))
        conv2d_NCHWc = T.alloc_buffer((T.int64(1), T.int64(32), T.int64(14), T.int64(14), T.int64(16)))
        for n_0_oc_chunk_0_oh_0_ow_0_fused_fused in T.parallel(T.int64(224), annotations={"pragma_auto_unroll_max_step": 512, "pragma_unroll_explicit": 1}):
            for ax0, ax1, ax2, ax3, ax4 in T.grid(T.int64(1), T.int64(1), T.int64(9), T.int64(4), T.int64(512)):
                with T.block("data_pad"):
                    v_i0, v_i1 = T.axis.remap("SS", [ax0, ax1])
                    v_i2 = T.axis.spatial(T.int64(16), n_0_oc_chunk_0_oh_0_ow_0_fused_fused % T.int64(14) // T.int64(7) * T.int64(7) + ax2)
                    v_i3 = T.axis.spatial(T.int64(16), n_0_oc_chunk_0_oh_0_ow_0_fused_fused % T.int64(7) * T.int64(2) + ax3)
                    v_i4 = T.axis.spatial(T.int64(512), ax4)
                    T.reads(p0[v_i0, v_i1, v_i2 - T.int64(1), v_i3 - T.int64(1), v_i4])
                    T.writes(data_pad[v_i0, v_i1, v_i2, v_i3, v_i4])
                    data_pad[v_i0, v_i1, v_i2, v_i3, v_i4] = T.if_then_else(T.int64(1) <= v_i2 and v_i2 < T.int64(15) and T.int64(1) <= v_i3 and v_i3 < T.int64(15), p0[v_i0, v_i1, v_i2 - T.int64(1), v_i3 - T.int64(1), v_i4], T.float32(0))
            for oc_block_0 in range(T.int64(1)):
                for n_1, oc_chunk_1, oh_1, ow_1, oc_block_1 in T.grid(T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(1)):
                    for n_2_init, oc_chunk_2_init, oh_2_init, ow_2_init, oc_block_2_init, n_3_init, oc_chunk_3_init, oh_3_init, ow_3_init, oc_block_3_init in T.grid(T.int64(1), T.int64(2), T.int64(1), T.int64(1), T.int64(16), T.int64(1), T.int64(1), T.int64(7), T.int64(1), T.int64(1)):
                        with T.block("conv2d_NCHWc_init"):
                            v_n = T.axis.spatial(T.int64(1), n_1 + n_2_init + n_3_init)
                            v_oc_chunk = T.axis.spatial(T.int64(32), n_0_oc_chunk_0_oh_0_ow_0_fused_fused // T.int64(14) * T.int64(2) + oc_chunk_1 * T.int64(2) + oc_chunk_2_init + oc_chunk_3_init)
                            v_oh = T.axis.spatial(T.int64(14), n_0_oc_chunk_0_oh_0_ow_0_fused_fused % T.int64(14) // T.int64(7) * T.int64(7) + oh_1 * T.int64(7) + oh_2_init * T.int64(7) + oh_3_init)
                            v_ow = T.axis.spatial(T.int64(14), n_0_oc_chunk_0_oh_0_ow_0_fused_fused % T.int64(7) * T.int64(2) + ow_1 + ow_2_init + ow_3_init)
                            v_oc_block = T.axis.spatial(T.int64(16), oc_block_0 * T.int64(16) + oc_block_1 * T.int64(16) + oc_block_2_init + oc_block_3_init)
                            T.reads()
                            T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                            T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                            conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = T.float32(0)
                    for ic_0, kh_0, kw_0, n_2, oc_chunk_2, oh_2, ow_2, oc_block_2, ic_1, kh_1, kw_1, n_3, oc_chunk_3, oh_3, ow_3, oc_block_3 in T.grid(T.int64(256), T.int64(1), T.int64(3), T.int64(1), T.int64(2), T.int64(1), T.int64(1), T.int64(16), T.int64(2), T.int64(3), T.int64(1), T.int64(1), T.int64(1), T.int64(7), T.int64(1), T.int64(1)):
                        with T.block("conv2d_NCHWc_update"):
                            v_n = T.axis.spatial(T.int64(1), n_1 + n_2 + n_3)
                            v_oc_chunk = T.axis.spatial(T.int64(32), n_0_oc_chunk_0_oh_0_ow_0_fused_fused // T.int64(14) * T.int64(2) + oc_chunk_1 * T.int64(2) + oc_chunk_2 + oc_chunk_3)
                            v_oh = T.axis.spatial(T.int64(14), n_0_oc_chunk_0_oh_0_ow_0_fused_fused % T.int64(14) // T.int64(7) * T.int64(7) + oh_1 * T.int64(7) + oh_2 * T.int64(7) + oh_3)
                            v_ow = T.axis.spatial(T.int64(14), n_0_oc_chunk_0_oh_0_ow_0_fused_fused % T.int64(7) * T.int64(2) + ow_1 + ow_2 + ow_3)
                            v_oc_block = T.axis.spatial(T.int64(16), oc_block_0 * T.int64(16) + oc_block_1 * T.int64(16) + oc_block_2 + oc_block_3)
                            v_ic = T.axis.reduce(T.int64(512), ic_0 * T.int64(2) + ic_1)
                            v_kh = T.axis.reduce(T.int64(3), kh_0 * T.int64(3) + kh_1)
                            v_kw = T.axis.reduce(T.int64(3), kw_0 + kw_1)
                            T.reads(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block], data_pad[v_n, v_ic // T.int64(512), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(512)], p1[v_oc_chunk, v_ic // T.int64(512), v_kh, v_kw, v_ic % T.int64(512), v_oc_block])
                            T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                            T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                            conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] + data_pad[v_n, v_ic // T.int64(512), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(512)] * p1[v_oc_chunk, v_ic // T.int64(512), v_kh, v_kw, v_ic % T.int64(512), v_oc_block]
                for ax0, ax1, ax2 in T.grid(T.int64(1), T.int64(2), T.int64(7)):
                    for ax3_ax4_fused in T.vectorized(T.int64(32)):
                        with T.block("T_relu"):
                            v_ax0 = T.axis.spatial(T.int64(1), ax0)
                            v_ax1 = T.axis.spatial(T.int64(32), n_0_oc_chunk_0_oh_0_ow_0_fused_fused // T.int64(14) * T.int64(2) + ax1)
                            v_ax2 = T.axis.spatial(T.int64(14), n_0_oc_chunk_0_oh_0_ow_0_fused_fused % T.int64(14) // T.int64(7) * T.int64(7) + ax2)
                            v_ax3 = T.axis.spatial(T.int64(14), n_0_oc_chunk_0_oh_0_ow_0_fused_fused % T.int64(7) * T.int64(2) + ax3_ax4_fused // T.int64(16))
                            v_ax4 = T.axis.spatial(T.int64(16), ax3_ax4_fused % T.int64(16))
                            T.reads(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4])
                            T.writes(T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                            T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.max(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] + p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4], T.float32(0))
b0 = sch.get_block(name="data_pad", func_name="main")
b1 = sch.get_block(name="conv2d_NCHWc", func_name="main")
b2 = sch.get_block(name="T_add", func_name="main")
b3 = sch.get_block(name="root", func_name="main")
sch.compute_inline(block=b2)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSRSRS")
l4, l5, l6, l7, l8, l9, l10, l11 = sch.get_loops(block=b1)
v12, v13, v14, v15 = sch.sample_perfect_tile(loop=l4, n=4, max_innermost_factor=64, decision=[1, 1, 1, 1])
l16, l17, l18, l19 = sch.split(loop=l4, factors=[v12, v13, v14, v15], preserve_unit_iters=True)
v20, v21, v22, v23 = sch.sample_perfect_tile(loop=l5, n=4, max_innermost_factor=64, decision=[16, 1, 2, 1])
l24, l25, l26, l27 = sch.split(loop=l5, factors=[v20, v21, v22, v23], preserve_unit_iters=True)
v28, v29, v30, v31 = sch.sample_perfect_tile(loop=l6, n=4, max_innermost_factor=64, decision=[2, 1, 1, 7])
l32, l33, l34, l35 = sch.split(loop=l6, factors=[v28, v29, v30, v31], preserve_unit_iters=True)
v36, v37, v38, v39 = sch.sample_perfect_tile(loop=l7, n=4, max_innermost_factor=64, decision=[7, 2, 1, 1])
l40, l41, l42, l43 = sch.split(loop=l7, factors=[v36, v37, v38, v39], preserve_unit_iters=True)
v44, v45, v46, v47 = sch.sample_perfect_tile(loop=l8, n=4, max_innermost_factor=64, decision=[1, 1, 16, 1])
l48, l49, l50, l51 = sch.split(loop=l8, factors=[v44, v45, v46, v47], preserve_unit_iters=True)
v52, v53 = sch.sample_perfect_tile(loop=l9, n=2, max_innermost_factor=64, decision=[256, 2])
l54, l55 = sch.split(loop=l9, factors=[v52, v53], preserve_unit_iters=True)
v56, v57 = sch.sample_perfect_tile(loop=l10, n=2, max_innermost_factor=64, decision=[1, 3])
l58, l59 = sch.split(loop=l10, factors=[v56, v57], preserve_unit_iters=True)
v60, v61 = sch.sample_perfect_tile(loop=l11, n=2, max_innermost_factor=64, decision=[3, 1])
l62, l63 = sch.split(loop=l11, factors=[v60, v61], preserve_unit_iters=True)
sch.reorder(l16, l24, l32, l40, l48, l17, l25, l33, l41, l49, l54, l58, l62, l18, l26, l34, l42, l50, l55, l59, l63, l19, l27, l35, l43, l51)
b64, = sch.get_consumers(block=b1)
sch.reverse_compute_at(block=b64, loop=l48, preserve_unit_loops=True, index=-1)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.vectorize", ann_val=64)
v65 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.unroll_explicit", ann_val=v65)
l66 = sch.sample_compute_location(block=b0, decision=3)
sch.compute_at(block=b0, loop=l66, preserve_unit_loops=True, index=-1)
sch.enter_postproc()
b67 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b67, ann_key="meta_schedule.parallel")
sch.unannotate(block_or_loop=b67, ann_key="meta_schedule.vectorize")
sch.unannotate(block_or_loop=b67, ann_key="meta_schedule.unroll_explicit")
b68, b69, b70 = sch.get_child_blocks(b67)
l71, l72, l73, l74, l75, l76, l77, l78, l79 = sch.get_loops(block=b68)
l80 = sch.fuse(l71, l72, l73, l74, preserve_unit_iters=True)
sch.parallel(loop=l80)
l81, l82, l83, l84, l85, l86, l87, l88, l89, l90, l91, l92, l93, l94, l95, l96, l97, l98, l99, l100, l101, l102, l103 = sch.get_loops(block=b69)
l104 = sch.fuse(l81, preserve_unit_iters=True)
sch.parallel(loop=l104)
sch.annotate(block_or_loop=l104, ann_key="pragma_auto_unroll_max_step", ann_val=512)
sch.annotate(block_or_loop=l104, ann_key="pragma_unroll_explicit", ann_val=1)
l105, l106, l107, l108, l109, l110, l111 = sch.get_loops(block=b70)
l112 = sch.fuse(l110, l111, preserve_unit_iters=True)
sch.vectorize(loop=l112)
b113 = sch.get_block(name="conv2d_NCHWc", func_name="main")
l114, l115, l116, l117, l118, l119, l120, l121, l122, l123, l124, l125, l126, l127, l128, l129, l130, l131, l132, l133, l134, l135, l136 = sch.get_loops(block=b113)
b137 = sch.decompose_reduction(block=b113, loop=l121)
2024-04-28 17:07:25 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #1395: GFLOPs: 127.5219. Time: 7254.0051 us. Best GFLOPs: 732.5370
2024-04-28 17:07:25 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #1396: GFLOPs: 519.7045. Time: 1779.9438 us. Best GFLOPs: 732.5370
2024-04-28 17:07:25 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #1397: GFLOPs: 121.5247. Time: 7611.9901 us. Best GFLOPs: 732.5370
2024-04-28 17:07:25 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #1398: GFLOPs: 121.2712. Time: 7627.9018 us. Best GFLOPs: 732.5370
2024-04-28 17:07:25 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #1399: GFLOPs: 494.3887. Time: 1871.0878 us. Best GFLOPs: 732.5370
2024-04-28 17:07:25 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #1400: GFLOPs: 445.1899. Time: 2077.8654 us. Best GFLOPs: 732.5370
2024-04-28 17:07:25 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #1401: GFLOPs: 420.7971. Time: 2198.3155 us. Best GFLOPs: 732.5370
2024-04-28 17:07:25 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #1402: GFLOPs: 431.2268. Time: 2145.1466 us. Best GFLOPs: 732.5370
2024-04-28 17:07:25 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #1403: GFLOPs: 462.1957. Time: 2001.4137 us. Best GFLOPs: 732.5370
2024-04-28 17:07:25 [INFO] [task_scheduler.cc:121] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #1404: Error in building:
LocalBuilder: Timeout, killed after 30.0 seconds
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(1), T.int64(14), T.int64(14), T.int64(512)), "float32"), p1: T.Buffer((T.int64(32), T.int64(1), T.int64(3), T.int64(3), T.int64(512), T.int64(16)), "float32"), p2: T.Buffer((T.int64(1), T.int64(32), T.int64(1), T.int64(1), T.int64(16)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(32), T.int64(14), T.int64(14), T.int64(16)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        data_pad = T.alloc_buffer((T.int64(1), T.int64(1), T.int64(16), T.int64(16), T.int64(512)))
        conv2d_NCHWc = T.alloc_buffer((T.int64(1), T.int64(32), T.int64(14), T.int64(14), T.int64(16)))
        for n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_fused_fused in T.parallel(T.int64(896), annotations={"pragma_auto_unroll_max_step": 512, "pragma_unroll_explicit": 1}):
            for ax0, ax1, ax2, ax3, ax4 in T.grid(T.int64(1), T.int64(1), T.int64(9), T.int64(3), T.int64(512)):
                with T.block("data_pad"):
                    v_i0, v_i1 = T.axis.remap("SS", [ax0, ax1])
                    v_i2 = T.axis.spatial(T.int64(16), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_fused_fused % T.int64(14) // T.int64(7) * T.int64(7) + ax2)
                    v_i3 = T.axis.spatial(T.int64(16), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_fused_fused % T.int64(448) // T.int64(224) * T.int64(7) + n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_fused_fused % T.int64(7) + ax3)
                    v_i4 = T.axis.spatial(T.int64(512), ax4)
                    T.reads(p0[v_i0, v_i1, v_i2 - T.int64(1), v_i3 - T.int64(1), v_i4])
                    T.writes(data_pad[v_i0, v_i1, v_i2, v_i3, v_i4])
                    data_pad[v_i0, v_i1, v_i2, v_i3, v_i4] = T.if_then_else(T.int64(1) <= v_i2 and v_i2 < T.int64(15) and T.int64(1) <= v_i3 and v_i3 < T.int64(15), p0[v_i0, v_i1, v_i2 - T.int64(1), v_i3 - T.int64(1), v_i4], T.float32(0))
            for oc_block_1 in range(T.int64(1)):
                for n_2_init, oc_chunk_2_init, oh_2_init, ow_2_init, oc_block_2_init, n_3_init, oc_chunk_3_init, oh_3_init, ow_3_init, oc_block_3_init in T.grid(T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(16), T.int64(1), T.int64(1), T.int64(7), T.int64(1), T.int64(1)):
                    with T.block("conv2d_NCHWc_init"):
                        v_n = T.axis.spatial(T.int64(1), n_2_init + n_3_init)
                        v_oc_chunk = T.axis.spatial(T.int64(32), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_fused_fused // T.int64(448) * T.int64(16) + n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_fused_fused % T.int64(224) // T.int64(14) + oc_chunk_2_init + oc_chunk_3_init)
                        v_oh = T.axis.spatial(T.int64(14), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_fused_fused % T.int64(14) // T.int64(7) * T.int64(7) + oh_2_init * T.int64(7) + oh_3_init)
                        v_ow = T.axis.spatial(T.int64(14), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_fused_fused % T.int64(448) // T.int64(224) * T.int64(7) + n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_fused_fused % T.int64(7) + ow_2_init + ow_3_init)
                        v_oc_block = T.axis.spatial(T.int64(16), oc_block_1 * T.int64(16) + oc_block_2_init + oc_block_3_init)
                        T.reads()
                        T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                        T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                        conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = T.float32(0)
                for ic_0, kh_0, kw_0, n_2, oc_chunk_2, oh_2, ow_2, oc_block_2, ic_1, kh_1, kw_1, n_3, oc_chunk_3, oh_3, ow_3, oc_block_3 in T.grid(T.int64(512), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(16), T.int64(1), T.int64(3), T.int64(3), T.int64(1), T.int64(1), T.int64(7), T.int64(1), T.int64(1)):
                    with T.block("conv2d_NCHWc_update"):
                        v_n = T.axis.spatial(T.int64(1), n_2 + n_3)
                        v_oc_chunk = T.axis.spatial(T.int64(32), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_fused_fused // T.int64(448) * T.int64(16) + n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_fused_fused % T.int64(224) // T.int64(14) + oc_chunk_2 + oc_chunk_3)
                        v_oh = T.axis.spatial(T.int64(14), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_fused_fused % T.int64(14) // T.int64(7) * T.int64(7) + oh_2 * T.int64(7) + oh_3)
                        v_ow = T.axis.spatial(T.int64(14), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_fused_fused % T.int64(448) // T.int64(224) * T.int64(7) + n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_fused_fused % T.int64(7) + ow_2 + ow_3)
                        v_oc_block = T.axis.spatial(T.int64(16), oc_block_1 * T.int64(16) + oc_block_2 + oc_block_3)
                        v_ic = T.axis.reduce(T.int64(512), ic_0 + ic_1)
                        v_kh = T.axis.reduce(T.int64(3), kh_0 * T.int64(3) + kh_1)
                        v_kw = T.axis.reduce(T.int64(3), kw_0 * T.int64(3) + kw_1)
                        T.reads(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block], data_pad[v_n, v_ic // T.int64(512), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(512)], p1[v_oc_chunk, v_ic // T.int64(512), v_kh, v_kw, v_ic % T.int64(512), v_oc_block])
                        T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                        T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                        conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] + data_pad[v_n, v_ic // T.int64(512), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(512)] * p1[v_oc_chunk, v_ic // T.int64(512), v_kh, v_kw, v_ic % T.int64(512), v_oc_block]
                for ax0, ax1, ax2 in T.grid(T.int64(1), T.int64(1), T.int64(7)):
                    for ax3_ax4_fused in T.vectorized(T.int64(16)):
                        with T.block("T_relu"):
                            v_ax0 = T.axis.spatial(T.int64(1), ax0)
                            v_ax1 = T.axis.spatial(T.int64(32), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_fused_fused // T.int64(448) * T.int64(16) + n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_fused_fused % T.int64(224) // T.int64(14) + ax1)
                            v_ax2 = T.axis.spatial(T.int64(14), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_fused_fused % T.int64(14) // T.int64(7) * T.int64(7) + ax2)
                            v_ax3 = T.axis.spatial(T.int64(14), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_fused_fused % T.int64(448) // T.int64(224) * T.int64(7) + n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_fused_fused % T.int64(7))
                            v_ax4 = T.axis.spatial(T.int64(16), ax3_ax4_fused)
                            T.reads(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4])
                            T.writes(T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                            T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.max(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] + p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4], T.float32(0))
b0 = sch.get_block(name="data_pad", func_name="main")
b1 = sch.get_block(name="conv2d_NCHWc", func_name="main")
b2 = sch.get_block(name="T_add", func_name="main")
b3 = sch.get_block(name="root", func_name="main")
sch.compute_inline(block=b2)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSRSRS")
l4, l5, l6, l7, l8, l9, l10, l11 = sch.get_loops(block=b1)
v12, v13, v14, v15 = sch.sample_perfect_tile(loop=l4, n=4, max_innermost_factor=64, decision=[1, 1, 1, 1])
l16, l17, l18, l19 = sch.split(loop=l4, factors=[v12, v13, v14, v15], preserve_unit_iters=True)
v20, v21, v22, v23 = sch.sample_perfect_tile(loop=l5, n=4, max_innermost_factor=64, decision=[2, 16, 1, 1])
l24, l25, l26, l27 = sch.split(loop=l5, factors=[v20, v21, v22, v23], preserve_unit_iters=True)
v28, v29, v30, v31 = sch.sample_perfect_tile(loop=l6, n=4, max_innermost_factor=64, decision=[1, 2, 1, 7])
l32, l33, l34, l35 = sch.split(loop=l6, factors=[v28, v29, v30, v31], preserve_unit_iters=True)
v36, v37, v38, v39 = sch.sample_perfect_tile(loop=l7, n=4, max_innermost_factor=64, decision=[2, 7, 1, 1])
l40, l41, l42, l43 = sch.split(loop=l7, factors=[v36, v37, v38, v39], preserve_unit_iters=True)
v44, v45, v46, v47 = sch.sample_perfect_tile(loop=l8, n=4, max_innermost_factor=64, decision=[1, 1, 16, 1])
l48, l49, l50, l51 = sch.split(loop=l8, factors=[v44, v45, v46, v47], preserve_unit_iters=True)
v52, v53 = sch.sample_perfect_tile(loop=l9, n=2, max_innermost_factor=64, decision=[512, 1])
l54, l55 = sch.split(loop=l9, factors=[v52, v53], preserve_unit_iters=True)
v56, v57 = sch.sample_perfect_tile(loop=l10, n=2, max_innermost_factor=64, decision=[1, 3])
l58, l59 = sch.split(loop=l10, factors=[v56, v57], preserve_unit_iters=True)
v60, v61 = sch.sample_perfect_tile(loop=l11, n=2, max_innermost_factor=64, decision=[1, 3])
l62, l63 = sch.split(loop=l11, factors=[v60, v61], preserve_unit_iters=True)
sch.reorder(l16, l24, l32, l40, l48, l17, l25, l33, l41, l49, l54, l58, l62, l18, l26, l34, l42, l50, l55, l59, l63, l19, l27, l35, l43, l51)
b64, = sch.get_consumers(block=b1)
sch.reverse_compute_at(block=b64, loop=l49, preserve_unit_loops=True, index=-1)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.vectorize", ann_val=64)
v65 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.unroll_explicit", ann_val=v65)
l66 = sch.sample_compute_location(block=b0, decision=8)
sch.compute_at(block=b0, loop=l66, preserve_unit_loops=True, index=-1)
sch.enter_postproc()
b67 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b67, ann_key="meta_schedule.parallel")
sch.unannotate(block_or_loop=b67, ann_key="meta_schedule.vectorize")
sch.unannotate(block_or_loop=b67, ann_key="meta_schedule.unroll_explicit")
b68, b69, b70 = sch.get_child_blocks(b67)
l71, l72, l73, l74, l75, l76, l77, l78, l79, l80, l81, l82, l83, l84 = sch.get_loops(block=b68)
l85 = sch.fuse(l71, l72, l73, l74, l75, l76, l77, l78, l79, preserve_unit_iters=True)
sch.parallel(loop=l85)
l86, l87, l88, l89, l90, l91, l92, l93, l94, l95, l96, l97, l98, l99, l100, l101, l102, l103 = sch.get_loops(block=b69)
l104 = sch.fuse(l86, preserve_unit_iters=True)
sch.parallel(loop=l104)
sch.annotate(block_or_loop=l104, ann_key="pragma_auto_unroll_max_step", ann_val=512)
sch.annotate(block_or_loop=l104, ann_key="pragma_unroll_explicit", ann_val=1)
l105, l106, l107, l108, l109, l110, l111 = sch.get_loops(block=b70)
l112 = sch.fuse(l110, l111, preserve_unit_iters=True)
sch.vectorize(loop=l112)
b113 = sch.get_block(name="conv2d_NCHWc", func_name="main")
l114, l115, l116, l117, l118, l119, l120, l121, l122, l123, l124, l125, l126, l127, l128, l129, l130, l131 = sch.get_loops(block=b113)
b132 = sch.decompose_reduction(block=b113, loop=l116)
2024-04-28 17:07:25 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #1405: GFLOPs: 526.8568. Time: 1755.7801 us. Best GFLOPs: 732.5370
2024-04-28 17:07:25 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #1406: GFLOPs: 11.0532. Time: 83690.1890 us. Best GFLOPs: 732.5370
2024-04-28 17:07:25 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #1407: GFLOPs: 1.6949. Time: 545770.2667 us. Best GFLOPs: 732.5370
2024-04-28 17:07:25 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #1408: GFLOPs: 7.6571. Time: 120809.3313 us. Best GFLOPs: 732.5370
2024-04-28 17:13:24 [INFO] [evolutionary_search.cc:713] Generating candidates......
2024-04-28 17:13:25 [INFO] [evolutionary_search.cc:715] Picked top 102 candidate(s) from database
2024-04-28 17:13:30 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x3861aa8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x37d26b8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x4dd4148)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x3201bb8)]: 0 failure(s)
2024-04-28 17:13:30 [INFO] [evolutionary_search.cc:723] Sampled 410 candidate(s)
2024-04-28 17:13:42 [INFO] [evolutionary_search.cc:621] Evolve iter #0 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x3861aa8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x37d26b8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x4dd4148)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x3201bb8)]: 0 failure(s)
2024-04-28 17:13:54 [INFO] [evolutionary_search.cc:621] Evolve iter #1 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x3861aa8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x37d26b8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x4dd4148)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x3201bb8)]: 0 failure(s)
2024-04-28 17:14:07 [INFO] [evolutionary_search.cc:621] Evolve iter #2 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x3861aa8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x37d26b8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x4dd4148)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x3201bb8)]: 0 failure(s)
2024-04-28 17:14:20 [INFO] [evolutionary_search.cc:621] Evolve iter #3 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x3861aa8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x37d26b8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x4dd4148)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x3201bb8)]: 0 failure(s)
2024-04-28 17:14:28 [INFO] [evolutionary_search.cc:649] Scores of the best 64 candidates:
[1 : 16]:	0.9096  0.9096  0.9082  0.9082  0.9022  0.9017  0.9017  0.9016  0.8924  0.8923  0.8832  0.8732  0.8614  0.8603  0.8524  0.8504
[17 : 32]:	0.8489  0.8476  0.8476  0.8444  0.8382  0.8373  0.8295  0.8142  0.8112  0.8047  0.8034  0.7984  0.7975  0.7929  0.7776  0.7731
[33 : 48]:	0.7726  0.7717  0.7626  0.7528  0.7501  0.7483  0.7445  0.7416  0.7389  0.7363  0.7214  0.7117  0.7096  0.7073  0.7072  0.7071
[49 : 64]:	0.7023  0.7016  0.6972  0.6951  0.6951  0.6923  0.6920  0.6903  0.6888  0.6876  0.6850  0.6843  0.6827  0.6827  0.6798  0.6780
2024-04-28 17:14:28 [INFO] [evolutionary_search.cc:727] Got 64 candidate(s) with evolutionary search
2024-04-28 17:14:28 [INFO] [evolutionary_search.cc:730] Sending 64 candidates(s) for measurement
2024-04-28 17:16:29 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #1409: GFLOPs: 337.8460. Time: 2738.0666 us. Best GFLOPs: 732.5370
2024-04-28 17:16:29 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #1410: GFLOPs: 676.0728. Time: 1368.2621 us. Best GFLOPs: 732.5370
2024-04-28 17:16:29 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #1411: GFLOPs: 680.8155. Time: 1358.7304 us. Best GFLOPs: 732.5370
2024-04-28 17:16:29 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #1412: GFLOPs: 683.6554. Time: 1353.0863 us. Best GFLOPs: 732.5370
2024-04-28 17:16:29 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #1413: GFLOPs: 661.2970. Time: 1398.8340 us. Best GFLOPs: 732.5370
2024-04-28 17:16:29 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #1414: GFLOPs: 651.5999. Time: 1419.6515 us. Best GFLOPs: 732.5370
2024-04-28 17:16:29 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #1415: GFLOPs: 683.0294. Time: 1354.3264 us. Best GFLOPs: 732.5370
2024-04-28 17:16:29 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #1416: GFLOPs: 649.2741. Time: 1424.7368 us. Best GFLOPs: 732.5370
2024-04-28 17:16:29 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #1417: GFLOPs: 637.4336. Time: 1451.2016 us. Best GFLOPs: 732.5370
2024-04-28 17:16:29 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #1418: GFLOPs: 668.4872. Time: 1383.7883 us. Best GFLOPs: 732.5370
2024-04-28 17:16:29 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #1419: GFLOPs: 678.5070. Time: 1363.3533 us. Best GFLOPs: 732.5370
2024-04-28 17:16:29 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #1420: GFLOPs: 632.0580. Time: 1463.5442 us. Best GFLOPs: 732.5370
2024-04-28 17:16:29 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #1421: GFLOPs: 724.5483. Time: 1276.7192 us. Best GFLOPs: 732.5370
2024-04-28 17:16:29 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #1422: GFLOPs: 598.4965. Time: 1545.6143 us. Best GFLOPs: 732.5370
2024-04-28 17:16:29 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #1423: GFLOPs: 676.5093. Time: 1367.3792 us. Best GFLOPs: 732.5370
2024-04-28 17:16:29 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #1424: GFLOPs: 718.7569. Time: 1287.0065 us. Best GFLOPs: 732.5370
2024-04-28 17:16:29 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #1425: GFLOPs: 711.0055. Time: 1301.0374 us. Best GFLOPs: 732.5370
2024-04-28 17:16:29 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #1426: GFLOPs: 649.4090. Time: 1424.4410 us. Best GFLOPs: 732.5370
2024-04-28 17:16:29 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #1427: GFLOPs: 712.0676. Time: 1299.0968 us. Best GFLOPs: 732.5370
2024-04-28 17:16:29 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #1428: GFLOPs: 623.9908. Time: 1482.4654 us. Best GFLOPs: 732.5370
2024-04-28 17:16:29 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #1429: GFLOPs: 562.6388. Time: 1644.1183 us. Best GFLOPs: 732.5370
2024-04-28 17:16:29 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #1430: GFLOPs: 657.1933. Time: 1407.5686 us. Best GFLOPs: 732.5370
2024-04-28 17:16:29 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #1431: GFLOPs: 597.2247. Time: 1548.9056 us. Best GFLOPs: 732.5370
2024-04-28 17:16:29 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #1432: GFLOPs: 620.7522. Time: 1490.1997 us. Best GFLOPs: 732.5370
2024-04-28 17:16:29 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #1433: GFLOPs: 625.2956. Time: 1479.3719 us. Best GFLOPs: 732.5370
2024-04-28 17:16:29 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #1434: GFLOPs: 608.8022. Time: 1519.4504 us. Best GFLOPs: 732.5370
2024-04-28 17:16:29 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #1435: GFLOPs: 552.2517. Time: 1675.0420 us. Best GFLOPs: 732.5370
2024-04-28 17:16:29 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #1436: GFLOPs: 559.0105. Time: 1654.7896 us. Best GFLOPs: 732.5370
2024-04-28 17:16:29 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #1437: GFLOPs: 87.0534. Time: 10626.1748 us. Best GFLOPs: 732.5370
2024-04-28 17:16:29 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #1438: GFLOPs: 632.3057. Time: 1462.9708 us. Best GFLOPs: 732.5370
2024-04-28 17:16:29 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #1439: GFLOPs: 521.8160. Time: 1772.7412 us. Best GFLOPs: 732.5370
2024-04-28 17:16:29 [INFO] [task_scheduler.cc:121] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #1440: Error in building:
LocalBuilder: Timeout, killed after 30.0 seconds
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(1), T.int64(14), T.int64(14), T.int64(512)), "float32"), p1: T.Buffer((T.int64(32), T.int64(1), T.int64(3), T.int64(3), T.int64(512), T.int64(16)), "float32"), p2: T.Buffer((T.int64(1), T.int64(32), T.int64(1), T.int64(1), T.int64(16)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(32), T.int64(14), T.int64(14), T.int64(16)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        data_pad = T.alloc_buffer((T.int64(1), T.int64(1), T.int64(16), T.int64(16), T.int64(512)))
        conv2d_NCHWc = T.alloc_buffer((T.int64(1), T.int64(32), T.int64(14), T.int64(14), T.int64(16)))
        for n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_fused_fused in T.parallel(T.int64(448), annotations={"pragma_auto_unroll_max_step": 512, "pragma_unroll_explicit": 1}):
            for ax0, ax1, ax2, ax3, ax4 in T.grid(T.int64(1), T.int64(1), T.int64(9), T.int64(4), T.int64(512)):
                with T.block("data_pad"):
                    v_i0, v_i1 = T.axis.remap("SS", [ax0, ax1])
                    v_i2 = T.axis.spatial(T.int64(16), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_fused_fused % T.int64(2) * T.int64(7) + ax2)
                    v_i3 = T.axis.spatial(T.int64(16), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_fused_fused // T.int64(64) * T.int64(2) + ax3)
                    v_i4 = T.axis.spatial(T.int64(512), ax4)
                    T.reads(p0[v_i0, v_i1, v_i2 - T.int64(1), v_i3 - T.int64(1), v_i4])
                    T.writes(data_pad[v_i0, v_i1, v_i2, v_i3, v_i4])
                    data_pad[v_i0, v_i1, v_i2, v_i3, v_i4] = T.if_then_else(T.int64(1) <= v_i2 and v_i2 < T.int64(15) and T.int64(1) <= v_i3 and v_i3 < T.int64(15), p0[v_i0, v_i1, v_i2 - T.int64(1), v_i3 - T.int64(1), v_i4], T.float32(0))
            for ow_1, oc_block_1 in T.grid(T.int64(1), T.int64(1)):
                for n_2_init, oc_chunk_2_init, oh_2_init, ow_2_init, oc_block_2_init, n_3_init, oc_chunk_3_init, oh_3_init, ow_3_init, oc_block_3_init in T.grid(T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(16), T.int64(1), T.int64(1), T.int64(7), T.int64(1), T.int64(1)):
                    with T.block("conv2d_NCHWc_init"):
                        v_n = T.axis.spatial(T.int64(1), n_2_init + n_3_init)
                        v_oc_chunk = T.axis.spatial(T.int64(32), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_fused_fused % T.int64(64) // T.int64(2) + oc_chunk_2_init + oc_chunk_3_init)
                        v_oh = T.axis.spatial(T.int64(14), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_fused_fused % T.int64(2) * T.int64(7) + oh_2_init * T.int64(7) + oh_3_init)
                        v_ow = T.axis.spatial(T.int64(14), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_fused_fused // T.int64(64) * T.int64(2) + ow_1 * T.int64(2) + ow_2_init + ow_3_init)
                        v_oc_block = T.axis.spatial(T.int64(16), oc_block_1 * T.int64(16) + oc_block_2_init + oc_block_3_init)
                        T.reads()
                        T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                        T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                        conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = T.float32(0)
                for ic_0, kh_0, kw_0, n_2, oc_chunk_2, oh_2, ow_2, oc_block_2, ic_1, kh_1, kw_1, n_3, oc_chunk_3, oh_3, ow_3, oc_block_3 in T.grid(T.int64(128), T.int64(1), T.int64(3), T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(16), T.int64(4), T.int64(3), T.int64(1), T.int64(1), T.int64(1), T.int64(7), T.int64(1), T.int64(1)):
                    with T.block("conv2d_NCHWc_update"):
                        v_n = T.axis.spatial(T.int64(1), n_2 + n_3)
                        v_oc_chunk = T.axis.spatial(T.int64(32), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_fused_fused % T.int64(64) // T.int64(2) + oc_chunk_2 + oc_chunk_3)
                        v_oh = T.axis.spatial(T.int64(14), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_fused_fused % T.int64(2) * T.int64(7) + oh_2 * T.int64(7) + oh_3)
                        v_ow = T.axis.spatial(T.int64(14), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_fused_fused // T.int64(64) * T.int64(2) + ow_1 * T.int64(2) + ow_2 + ow_3)
                        v_oc_block = T.axis.spatial(T.int64(16), oc_block_1 * T.int64(16) + oc_block_2 + oc_block_3)
                        v_ic = T.axis.reduce(T.int64(512), ic_0 * T.int64(4) + ic_1)
                        v_kh = T.axis.reduce(T.int64(3), kh_0 * T.int64(3) + kh_1)
                        v_kw = T.axis.reduce(T.int64(3), kw_0 + kw_1)
                        T.reads(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block], data_pad[v_n, v_ic // T.int64(512), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(512)], p1[v_oc_chunk, v_ic // T.int64(512), v_kh, v_kw, v_ic % T.int64(512), v_oc_block])
                        T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                        T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                        conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] + data_pad[v_n, v_ic // T.int64(512), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(512)] * p1[v_oc_chunk, v_ic // T.int64(512), v_kh, v_kw, v_ic % T.int64(512), v_oc_block]
                for ax0, ax1, ax2 in T.grid(T.int64(1), T.int64(1), T.int64(7)):
                    for ax3_ax4_fused in T.vectorized(T.int64(32)):
                        with T.block("T_relu"):
                            v_ax0 = T.axis.spatial(T.int64(1), ax0)
                            v_ax1 = T.axis.spatial(T.int64(32), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_fused_fused % T.int64(64) // T.int64(2) + ax1)
                            v_ax2 = T.axis.spatial(T.int64(14), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_fused_fused % T.int64(2) * T.int64(7) + ax2)
                            v_ax3 = T.axis.spatial(T.int64(14), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_fused_fused // T.int64(64) * T.int64(2) + ax3_ax4_fused // T.int64(16))
                            v_ax4 = T.axis.spatial(T.int64(16), ax3_ax4_fused % T.int64(16))
                            T.reads(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4])
                            T.writes(T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                            T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.max(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] + p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4], T.float32(0))
b0 = sch.get_block(name="data_pad", func_name="main")
b1 = sch.get_block(name="conv2d_NCHWc", func_name="main")
b2 = sch.get_block(name="T_add", func_name="main")
b3 = sch.get_block(name="root", func_name="main")
sch.compute_inline(block=b2)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSRSRS")
l4, l5, l6, l7, l8, l9, l10, l11 = sch.get_loops(block=b1)
v12, v13, v14, v15 = sch.sample_perfect_tile(loop=l4, n=4, max_innermost_factor=64, decision=[1, 1, 1, 1])
l16, l17, l18, l19 = sch.split(loop=l4, factors=[v12, v13, v14, v15], preserve_unit_iters=True)
v20, v21, v22, v23 = sch.sample_perfect_tile(loop=l5, n=4, max_innermost_factor=64, decision=[1, 32, 1, 1])
l24, l25, l26, l27 = sch.split(loop=l5, factors=[v20, v21, v22, v23], preserve_unit_iters=True)
v28, v29, v30, v31 = sch.sample_perfect_tile(loop=l6, n=4, max_innermost_factor=64, decision=[1, 2, 1, 7])
l32, l33, l34, l35 = sch.split(loop=l6, factors=[v28, v29, v30, v31], preserve_unit_iters=True)
v36, v37, v38, v39 = sch.sample_perfect_tile(loop=l7, n=4, max_innermost_factor=64, decision=[7, 1, 2, 1])
l40, l41, l42, l43 = sch.split(loop=l7, factors=[v36, v37, v38, v39], preserve_unit_iters=True)
v44, v45, v46, v47 = sch.sample_perfect_tile(loop=l8, n=4, max_innermost_factor=64, decision=[1, 1, 16, 1])
l48, l49, l50, l51 = sch.split(loop=l8, factors=[v44, v45, v46, v47], preserve_unit_iters=True)
v52, v53 = sch.sample_perfect_tile(loop=l9, n=2, max_innermost_factor=64, decision=[128, 4])
l54, l55 = sch.split(loop=l9, factors=[v52, v53], preserve_unit_iters=True)
v56, v57 = sch.sample_perfect_tile(loop=l10, n=2, max_innermost_factor=64, decision=[1, 3])
l58, l59 = sch.split(loop=l10, factors=[v56, v57], preserve_unit_iters=True)
v60, v61 = sch.sample_perfect_tile(loop=l11, n=2, max_innermost_factor=64, decision=[3, 1])
l62, l63 = sch.split(loop=l11, factors=[v60, v61], preserve_unit_iters=True)
sch.reorder(l16, l24, l32, l40, l48, l17, l25, l33, l41, l49, l54, l58, l62, l18, l26, l34, l42, l50, l55, l59, l63, l19, l27, l35, l43, l51)
b64, = sch.get_consumers(block=b1)
sch.reverse_compute_at(block=b64, loop=l49, preserve_unit_loops=True, index=-1)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.vectorize", ann_val=64)
v65 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.unroll_explicit", ann_val=v65)
l66 = sch.sample_compute_location(block=b0, decision=7)
sch.compute_at(block=b0, loop=l66, preserve_unit_loops=True, index=-1)
sch.enter_postproc()
b67 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b67, ann_key="meta_schedule.parallel")
sch.unannotate(block_or_loop=b67, ann_key="meta_schedule.vectorize")
sch.unannotate(block_or_loop=b67, ann_key="meta_schedule.unroll_explicit")
b68, b69, b70 = sch.get_child_blocks(b67)
l71, l72, l73, l74, l75, l76, l77, l78, l79, l80, l81, l82, l83 = sch.get_loops(block=b68)
l84 = sch.fuse(l71, l72, l73, l74, l75, l76, l77, l78, preserve_unit_iters=True)
sch.parallel(loop=l84)
l85, l86, l87, l88, l89, l90, l91, l92, l93, l94, l95, l96, l97, l98, l99, l100, l101, l102, l103 = sch.get_loops(block=b69)
l104 = sch.fuse(l85, preserve_unit_iters=True)
sch.parallel(loop=l104)
sch.annotate(block_or_loop=l104, ann_key="pragma_auto_unroll_max_step", ann_val=512)
sch.annotate(block_or_loop=l104, ann_key="pragma_unroll_explicit", ann_val=1)
l105, l106, l107, l108, l109, l110, l111, l112 = sch.get_loops(block=b70)
l113 = sch.fuse(l111, l112, preserve_unit_iters=True)
sch.vectorize(loop=l113)
b114 = sch.get_block(name="conv2d_NCHWc", func_name="main")
l115, l116, l117, l118, l119, l120, l121, l122, l123, l124, l125, l126, l127, l128, l129, l130, l131, l132, l133 = sch.get_loops(block=b114)
b134 = sch.decompose_reduction(block=b114, loop=l118)
2024-04-28 17:16:29 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #1441: GFLOPs: 539.2412. Time: 1715.4565 us. Best GFLOPs: 732.5370
2024-04-28 17:16:29 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #1442: GFLOPs: 89.4089. Time: 10346.2219 us. Best GFLOPs: 732.5370
2024-04-28 17:16:29 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #1443: GFLOPs: 559.0736. Time: 1654.6029 us. Best GFLOPs: 732.5370
2024-04-28 17:16:29 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #1444: GFLOPs: 580.2669. Time: 1594.1711 us. Best GFLOPs: 732.5370
2024-04-28 17:16:29 [INFO] [task_scheduler.cc:121] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #1445: Error in building:
LocalBuilder: Timeout, killed after 30.0 seconds
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(1), T.int64(14), T.int64(14), T.int64(512)), "float32"), p1: T.Buffer((T.int64(32), T.int64(1), T.int64(3), T.int64(3), T.int64(512), T.int64(16)), "float32"), p2: T.Buffer((T.int64(1), T.int64(32), T.int64(1), T.int64(1), T.int64(16)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(32), T.int64(14), T.int64(14), T.int64(16)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        data_pad = T.alloc_buffer((T.int64(1), T.int64(1), T.int64(16), T.int64(16), T.int64(512)))
        conv2d_NCHWc = T.alloc_buffer((T.int64(1), T.int64(32), T.int64(14), T.int64(14), T.int64(16)))
        for n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_fused_fused in T.parallel(T.int64(448), annotations={"pragma_auto_unroll_max_step": 512, "pragma_unroll_explicit": 1}):
            for ax0, ax1, ax2, ax3, ax4 in T.grid(T.int64(1), T.int64(1), T.int64(9), T.int64(4), T.int64(512)):
                with T.block("data_pad"):
                    v_i0, v_i1 = T.axis.remap("SS", [ax0, ax1])
                    v_i2 = T.axis.spatial(T.int64(16), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_fused_fused // T.int64(224) * T.int64(7) + ax2)
                    v_i3 = T.axis.spatial(T.int64(16), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_fused_fused % T.int64(7) * T.int64(2) + ax3)
                    v_i4 = T.axis.spatial(T.int64(512), ax4)
                    T.reads(p0[v_i0, v_i1, v_i2 - T.int64(1), v_i3 - T.int64(1), v_i4])
                    T.writes(data_pad[v_i0, v_i1, v_i2, v_i3, v_i4])
                    data_pad[v_i0, v_i1, v_i2, v_i3, v_i4] = T.if_then_else(T.int64(1) <= v_i2 and v_i2 < T.int64(15) and T.int64(1) <= v_i3 and v_i3 < T.int64(15), p0[v_i0, v_i1, v_i2 - T.int64(1), v_i3 - T.int64(1), v_i4], T.float32(0))
            for oc_block_1 in range(T.int64(1)):
                for n_2_init, oc_chunk_2_init, oh_2_init, ow_2_init, oc_block_2_init, n_3_init, oc_chunk_3_init, oh_3_init, ow_3_init, oc_block_3_init in T.grid(T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(16), T.int64(1), T.int64(1), T.int64(7), T.int64(1), T.int64(1)):
                    with T.block("conv2d_NCHWc_init"):
                        v_n = T.axis.spatial(T.int64(1), n_2_init + n_3_init)
                        v_oc_chunk = T.axis.spatial(T.int64(32), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_fused_fused % T.int64(224) // T.int64(7) + oc_chunk_2_init + oc_chunk_3_init)
                        v_oh = T.axis.spatial(T.int64(14), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_fused_fused // T.int64(224) * T.int64(7) + oh_2_init * T.int64(7) + oh_3_init)
                        v_ow = T.axis.spatial(T.int64(14), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_fused_fused % T.int64(7) * T.int64(2) + ow_2_init + ow_3_init)
                        v_oc_block = T.axis.spatial(T.int64(16), oc_block_1 * T.int64(16) + oc_block_2_init + oc_block_3_init)
                        T.reads()
                        T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                        T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                        conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = T.float32(0)
                for ic_0, kh_0, kw_0, n_2, oc_chunk_2, oh_2, ow_2, oc_block_2, ic_1, kh_1, kw_1, n_3, oc_chunk_3, oh_3, ow_3, oc_block_3 in T.grid(T.int64(256), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(16), T.int64(2), T.int64(3), T.int64(3), T.int64(1), T.int64(1), T.int64(7), T.int64(1), T.int64(1)):
                    with T.block("conv2d_NCHWc_update"):
                        v_n = T.axis.spatial(T.int64(1), n_2 + n_3)
                        v_oc_chunk = T.axis.spatial(T.int64(32), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_fused_fused % T.int64(224) // T.int64(7) + oc_chunk_2 + oc_chunk_3)
                        v_oh = T.axis.spatial(T.int64(14), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_fused_fused // T.int64(224) * T.int64(7) + oh_2 * T.int64(7) + oh_3)
                        v_ow = T.axis.spatial(T.int64(14), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_fused_fused % T.int64(7) * T.int64(2) + ow_2 + ow_3)
                        v_oc_block = T.axis.spatial(T.int64(16), oc_block_1 * T.int64(16) + oc_block_2 + oc_block_3)
                        v_ic = T.axis.reduce(T.int64(512), ic_0 * T.int64(2) + ic_1)
                        v_kh = T.axis.reduce(T.int64(3), kh_0 * T.int64(3) + kh_1)
                        v_kw = T.axis.reduce(T.int64(3), kw_0 * T.int64(3) + kw_1)
                        T.reads(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block], data_pad[v_n, v_ic // T.int64(512), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(512)], p1[v_oc_chunk, v_ic // T.int64(512), v_kh, v_kw, v_ic % T.int64(512), v_oc_block])
                        T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                        T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                        conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] + data_pad[v_n, v_ic // T.int64(512), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(512)] * p1[v_oc_chunk, v_ic // T.int64(512), v_kh, v_kw, v_ic % T.int64(512), v_oc_block]
                for ax0, ax1, ax2 in T.grid(T.int64(1), T.int64(1), T.int64(7)):
                    for ax3_ax4_fused in T.vectorized(T.int64(32)):
                        with T.block("T_relu"):
                            v_ax0 = T.axis.spatial(T.int64(1), ax0)
                            v_ax1 = T.axis.spatial(T.int64(32), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_fused_fused % T.int64(224) // T.int64(7) + ax1)
                            v_ax2 = T.axis.spatial(T.int64(14), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_fused_fused // T.int64(224) * T.int64(7) + ax2)
                            v_ax3 = T.axis.spatial(T.int64(14), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_fused_fused % T.int64(7) * T.int64(2) + ax3_ax4_fused // T.int64(16))
                            v_ax4 = T.axis.spatial(T.int64(16), ax3_ax4_fused % T.int64(16))
                            T.reads(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4])
                            T.writes(T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                            T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.max(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] + p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4], T.float32(0))
b0 = sch.get_block(name="data_pad", func_name="main")
b1 = sch.get_block(name="conv2d_NCHWc", func_name="main")
b2 = sch.get_block(name="T_add", func_name="main")
b3 = sch.get_block(name="root", func_name="main")
sch.compute_inline(block=b2)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSRSRS")
l4, l5, l6, l7, l8, l9, l10, l11 = sch.get_loops(block=b1)
v12, v13, v14, v15 = sch.sample_perfect_tile(loop=l4, n=4, max_innermost_factor=64, decision=[1, 1, 1, 1])
l16, l17, l18, l19 = sch.split(loop=l4, factors=[v12, v13, v14, v15], preserve_unit_iters=True)
v20, v21, v22, v23 = sch.sample_perfect_tile(loop=l5, n=4, max_innermost_factor=64, decision=[1, 32, 1, 1])
l24, l25, l26, l27 = sch.split(loop=l5, factors=[v20, v21, v22, v23], preserve_unit_iters=True)
v28, v29, v30, v31 = sch.sample_perfect_tile(loop=l6, n=4, max_innermost_factor=64, decision=[2, 1, 1, 7])
l32, l33, l34, l35 = sch.split(loop=l6, factors=[v28, v29, v30, v31], preserve_unit_iters=True)
v36, v37, v38, v39 = sch.sample_perfect_tile(loop=l7, n=4, max_innermost_factor=64, decision=[1, 7, 2, 1])
l40, l41, l42, l43 = sch.split(loop=l7, factors=[v36, v37, v38, v39], preserve_unit_iters=True)
v44, v45, v46, v47 = sch.sample_perfect_tile(loop=l8, n=4, max_innermost_factor=64, decision=[1, 1, 16, 1])
l48, l49, l50, l51 = sch.split(loop=l8, factors=[v44, v45, v46, v47], preserve_unit_iters=True)
v52, v53 = sch.sample_perfect_tile(loop=l9, n=2, max_innermost_factor=64, decision=[256, 2])
l54, l55 = sch.split(loop=l9, factors=[v52, v53], preserve_unit_iters=True)
v56, v57 = sch.sample_perfect_tile(loop=l10, n=2, max_innermost_factor=64, decision=[1, 3])
l58, l59 = sch.split(loop=l10, factors=[v56, v57], preserve_unit_iters=True)
v60, v61 = sch.sample_perfect_tile(loop=l11, n=2, max_innermost_factor=64, decision=[1, 3])
l62, l63 = sch.split(loop=l11, factors=[v60, v61], preserve_unit_iters=True)
sch.reorder(l16, l24, l32, l40, l48, l17, l25, l33, l41, l49, l54, l58, l62, l18, l26, l34, l42, l50, l55, l59, l63, l19, l27, l35, l43, l51)
b64, = sch.get_consumers(block=b1)
sch.reverse_compute_at(block=b64, loop=l49, preserve_unit_loops=True, index=-1)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.parallel", ann_val=64)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.vectorize", ann_val=64)
v65 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.unroll_explicit", ann_val=v65)
l66 = sch.sample_compute_location(block=b0, decision=8)
sch.compute_at(block=b0, loop=l66, preserve_unit_loops=True, index=-1)
sch.enter_postproc()
b67 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b67, ann_key="meta_schedule.parallel")
sch.unannotate(block_or_loop=b67, ann_key="meta_schedule.vectorize")
sch.unannotate(block_or_loop=b67, ann_key="meta_schedule.unroll_explicit")
b68, b69, b70 = sch.get_child_blocks(b67)
l71, l72, l73, l74, l75, l76, l77, l78, l79, l80, l81, l82, l83, l84 = sch.get_loops(block=b68)
l85 = sch.fuse(l71, l72, l73, l74, l75, l76, l77, l78, l79, preserve_unit_iters=True)
sch.parallel(loop=l85)
l86, l87, l88, l89, l90, l91, l92, l93, l94, l95, l96, l97, l98, l99, l100, l101, l102, l103 = sch.get_loops(block=b69)
l104 = sch.fuse(l86, preserve_unit_iters=True)
sch.parallel(loop=l104)
sch.annotate(block_or_loop=l104, ann_key="pragma_auto_unroll_max_step", ann_val=512)
sch.annotate(block_or_loop=l104, ann_key="pragma_unroll_explicit", ann_val=1)
l105, l106, l107, l108, l109, l110, l111 = sch.get_loops(block=b70)
l112 = sch.fuse(l110, l111, preserve_unit_iters=True)
sch.vectorize(loop=l112)
b113 = sch.get_block(name="conv2d_NCHWc", func_name="main")
l114, l115, l116, l117, l118, l119, l120, l121, l122, l123, l124, l125, l126, l127, l128, l129, l130, l131 = sch.get_loops(block=b113)
b132 = sch.decompose_reduction(block=b113, loop=l116)
2024-04-28 17:16:29 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #1446: GFLOPs: 578.8632. Time: 1598.0370 us. Best GFLOPs: 732.5370
2024-04-28 17:16:29 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #1447: GFLOPs: 592.3337. Time: 1561.6952 us. Best GFLOPs: 732.5370
2024-04-28 17:16:29 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #1448: GFLOPs: 509.8015. Time: 1814.5196 us. Best GFLOPs: 732.5370
2024-04-28 17:16:29 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #1449: GFLOPs: 529.0194. Time: 1748.6026 us. Best GFLOPs: 732.5370
2024-04-28 17:16:29 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #1450: GFLOPs: 660.5222. Time: 1400.4748 us. Best GFLOPs: 732.5370
2024-04-28 17:16:29 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #1451: GFLOPs: 514.8808. Time: 1796.6191 us. Best GFLOPs: 732.5370
2024-04-28 17:16:29 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #1452: GFLOPs: 122.2916. Time: 7564.2551 us. Best GFLOPs: 732.5370
2024-04-28 17:16:29 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #1453: GFLOPs: 499.7952. Time: 1850.8475 us. Best GFLOPs: 732.5370
2024-04-28 17:16:29 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #1454: GFLOPs: 492.6860. Time: 1877.5543 us. Best GFLOPs: 732.5370
2024-04-28 17:16:29 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #1455: GFLOPs: 526.0067. Time: 1758.6178 us. Best GFLOPs: 732.5370
2024-04-28 17:16:29 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #1456: GFLOPs: 536.8126. Time: 1723.2171 us. Best GFLOPs: 732.5370
2024-04-28 17:16:29 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #1457: GFLOPs: 535.3124. Time: 1728.0466 us. Best GFLOPs: 732.5370
2024-04-28 17:16:29 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #1458: GFLOPs: 568.9606. Time: 1625.8504 us. Best GFLOPs: 732.5370
2024-04-28 17:16:29 [INFO] [task_scheduler.cc:121] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #1459: Error in building:
LocalBuilder: Timeout, killed after 30.0 seconds
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(1), T.int64(14), T.int64(14), T.int64(512)), "float32"), p1: T.Buffer((T.int64(32), T.int64(1), T.int64(3), T.int64(3), T.int64(512), T.int64(16)), "float32"), p2: T.Buffer((T.int64(1), T.int64(32), T.int64(1), T.int64(1), T.int64(16)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(32), T.int64(14), T.int64(14), T.int64(16)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        data_pad = T.alloc_buffer((T.int64(1), T.int64(1), T.int64(16), T.int64(16), T.int64(512)))
        conv2d_NCHWc = T.alloc_buffer((T.int64(1), T.int64(32), T.int64(14), T.int64(14), T.int64(16)))
        for n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_fused_fused in T.parallel(T.int64(896), annotations={"pragma_auto_unroll_max_step": 512, "pragma_unroll_explicit": 1}):
            for ax0, ax1, ax2, ax3, ax4 in T.grid(T.int64(1), T.int64(1), T.int64(9), T.int64(3), T.int64(512)):
                with T.block("data_pad"):
                    v_i0, v_i1 = T.axis.remap("SS", [ax0, ax1])
                    v_i2 = T.axis.spatial(T.int64(16), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_fused_fused % T.int64(448) // T.int64(224) * T.int64(7) + ax2)
                    v_i3 = T.axis.spatial(T.int64(16), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_fused_fused % T.int64(14) + ax3)
                    v_i4 = T.axis.spatial(T.int64(512), ax4)
                    T.reads(p0[v_i0, v_i1, v_i2 - T.int64(1), v_i3 - T.int64(1), v_i4])
                    T.writes(data_pad[v_i0, v_i1, v_i2, v_i3, v_i4])
                    data_pad[v_i0, v_i1, v_i2, v_i3, v_i4] = T.if_then_else(T.int64(1) <= v_i2 and v_i2 < T.int64(15) and T.int64(1) <= v_i3 and v_i3 < T.int64(15), p0[v_i0, v_i1, v_i2 - T.int64(1), v_i3 - T.int64(1), v_i4], T.float32(0))
            for oc_block_1 in range(T.int64(1)):
                for n_2_init, oc_chunk_2_init, oh_2_init, ow_2_init, oc_block_2_init, n_3_init, oc_chunk_3_init, oh_3_init, ow_3_init, oc_block_3_init in T.grid(T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(16), T.int64(1), T.int64(1), T.int64(7), T.int64(1), T.int64(1)):
                    with T.block("conv2d_NCHWc_init"):
                        v_n = T.axis.spatial(T.int64(1), n_2_init + n_3_init)
                        v_oc_chunk = T.axis.spatial(T.int64(32), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_fused_fused // T.int64(448) * T.int64(16) + n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_fused_fused % T.int64(224) // T.int64(14) + oc_chunk_2_init + oc_chunk_3_init)
                        v_oh = T.axis.spatial(T.int64(14), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_fused_fused % T.int64(448) // T.int64(224) * T.int64(7) + oh_2_init * T.int64(7) + oh_3_init)
                        v_ow = T.axis.spatial(T.int64(14), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_fused_fused % T.int64(14) + ow_2_init + ow_3_init)
                        v_oc_block = T.axis.spatial(T.int64(16), oc_block_1 * T.int64(16) + oc_block_2_init + oc_block_3_init)
                        T.reads()
                        T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                        T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                        conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = T.float32(0)
                for ic_0, kh_0, kw_0, n_2, oc_chunk_2, oh_2, ow_2, oc_block_2, ic_1, kh_1, kw_1, n_3, oc_chunk_3, oh_3, ow_3, oc_block_3 in T.grid(T.int64(128), T.int64(1), T.int64(3), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(16), T.int64(4), T.int64(3), T.int64(1), T.int64(1), T.int64(1), T.int64(7), T.int64(1), T.int64(1)):
                    with T.block("conv2d_NCHWc_update"):
                        v_n = T.axis.spatial(T.int64(1), n_2 + n_3)
                        v_oc_chunk = T.axis.spatial(T.int64(32), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_fused_fused // T.int64(448) * T.int64(16) + n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_fused_fused % T.int64(224) // T.int64(14) + oc_chunk_2 + oc_chunk_3)
                        v_oh = T.axis.spatial(T.int64(14), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_fused_fused % T.int64(448) // T.int64(224) * T.int64(7) + oh_2 * T.int64(7) + oh_3)
                        v_ow = T.axis.spatial(T.int64(14), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_fused_fused % T.int64(14) + ow_2 + ow_3)
                        v_oc_block = T.axis.spatial(T.int64(16), oc_block_1 * T.int64(16) + oc_block_2 + oc_block_3)
                        v_ic = T.axis.reduce(T.int64(512), ic_0 * T.int64(4) + ic_1)
                        v_kh = T.axis.reduce(T.int64(3), kh_0 * T.int64(3) + kh_1)
                        v_kw = T.axis.reduce(T.int64(3), kw_0 + kw_1)
                        T.reads(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block], data_pad[v_n, v_ic // T.int64(512), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(512)], p1[v_oc_chunk, v_ic // T.int64(512), v_kh, v_kw, v_ic % T.int64(512), v_oc_block])
                        T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                        T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                        conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] + data_pad[v_n, v_ic // T.int64(512), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(512)] * p1[v_oc_chunk, v_ic // T.int64(512), v_kh, v_kw, v_ic % T.int64(512), v_oc_block]
                for ax0, ax1, ax2 in T.grid(T.int64(1), T.int64(1), T.int64(7)):
                    for ax3_ax4_fused in T.vectorized(T.int64(16)):
                        with T.block("T_relu"):
                            v_ax0 = T.axis.spatial(T.int64(1), ax0)
                            v_ax1 = T.axis.spatial(T.int64(32), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_fused_fused // T.int64(448) * T.int64(16) + n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_fused_fused % T.int64(224) // T.int64(14) + ax1)
                            v_ax2 = T.axis.spatial(T.int64(14), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_fused_fused % T.int64(448) // T.int64(224) * T.int64(7) + ax2)
                            v_ax3 = T.axis.spatial(T.int64(14), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_fused_fused % T.int64(14))
                            v_ax4 = T.axis.spatial(T.int64(16), ax3_ax4_fused)
                            T.reads(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4])
                            T.writes(T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                            T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.max(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] + p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4], T.float32(0))
b0 = sch.get_block(name="data_pad", func_name="main")
b1 = sch.get_block(name="conv2d_NCHWc", func_name="main")
b2 = sch.get_block(name="T_add", func_name="main")
b3 = sch.get_block(name="root", func_name="main")
sch.compute_inline(block=b2)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSRSRS")
l4, l5, l6, l7, l8, l9, l10, l11 = sch.get_loops(block=b1)
v12, v13, v14, v15 = sch.sample_perfect_tile(loop=l4, n=4, max_innermost_factor=64, decision=[1, 1, 1, 1])
l16, l17, l18, l19 = sch.split(loop=l4, factors=[v12, v13, v14, v15], preserve_unit_iters=True)
v20, v21, v22, v23 = sch.sample_perfect_tile(loop=l5, n=4, max_innermost_factor=64, decision=[2, 16, 1, 1])
l24, l25, l26, l27 = sch.split(loop=l5, factors=[v20, v21, v22, v23], preserve_unit_iters=True)
v28, v29, v30, v31 = sch.sample_perfect_tile(loop=l6, n=4, max_innermost_factor=64, decision=[2, 1, 1, 7])
l32, l33, l34, l35 = sch.split(loop=l6, factors=[v28, v29, v30, v31], preserve_unit_iters=True)
v36, v37, v38, v39 = sch.sample_perfect_tile(loop=l7, n=4, max_innermost_factor=64, decision=[1, 14, 1, 1])
l40, l41, l42, l43 = sch.split(loop=l7, factors=[v36, v37, v38, v39], preserve_unit_iters=True)
v44, v45, v46, v47 = sch.sample_perfect_tile(loop=l8, n=4, max_innermost_factor=64, decision=[1, 1, 16, 1])
l48, l49, l50, l51 = sch.split(loop=l8, factors=[v44, v45, v46, v47], preserve_unit_iters=True)
v52, v53 = sch.sample_perfect_tile(loop=l9, n=2, max_innermost_factor=64, decision=[128, 4])
l54, l55 = sch.split(loop=l9, factors=[v52, v53], preserve_unit_iters=True)
v56, v57 = sch.sample_perfect_tile(loop=l10, n=2, max_innermost_factor=64, decision=[1, 3])
l58, l59 = sch.split(loop=l10, factors=[v56, v57], preserve_unit_iters=True)
v60, v61 = sch.sample_perfect_tile(loop=l11, n=2, max_innermost_factor=64, decision=[3, 1])
l62, l63 = sch.split(loop=l11, factors=[v60, v61], preserve_unit_iters=True)
sch.reorder(l16, l24, l32, l40, l48, l17, l25, l33, l41, l49, l54, l58, l62, l18, l26, l34, l42, l50, l55, l59, l63, l19, l27, l35, l43, l51)
b64, = sch.get_consumers(block=b1)
sch.reverse_compute_at(block=b64, loop=l49, preserve_unit_loops=True, index=-1)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.vectorize", ann_val=64)
v65 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.unroll_explicit", ann_val=v65)
l66 = sch.sample_compute_location(block=b0, decision=8)
sch.compute_at(block=b0, loop=l66, preserve_unit_loops=True, index=-1)
sch.enter_postproc()
b67 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b67, ann_key="meta_schedule.parallel")
sch.unannotate(block_or_loop=b67, ann_key="meta_schedule.vectorize")
sch.unannotate(block_or_loop=b67, ann_key="meta_schedule.unroll_explicit")
b68, b69, b70 = sch.get_child_blocks(b67)
l71, l72, l73, l74, l75, l76, l77, l78, l79, l80, l81, l82, l83, l84 = sch.get_loops(block=b68)
l85 = sch.fuse(l71, l72, l73, l74, l75, l76, l77, l78, l79, preserve_unit_iters=True)
sch.parallel(loop=l85)
l86, l87, l88, l89, l90, l91, l92, l93, l94, l95, l96, l97, l98, l99, l100, l101, l102, l103 = sch.get_loops(block=b69)
l104 = sch.fuse(l86, preserve_unit_iters=True)
sch.parallel(loop=l104)
sch.annotate(block_or_loop=l104, ann_key="pragma_auto_unroll_max_step", ann_val=512)
sch.annotate(block_or_loop=l104, ann_key="pragma_unroll_explicit", ann_val=1)
l105, l106, l107, l108, l109, l110, l111 = sch.get_loops(block=b70)
l112 = sch.fuse(l110, l111, preserve_unit_iters=True)
sch.vectorize(loop=l112)
b113 = sch.get_block(name="conv2d_NCHWc", func_name="main")
l114, l115, l116, l117, l118, l119, l120, l121, l122, l123, l124, l125, l126, l127, l128, l129, l130, l131 = sch.get_loops(block=b113)
b132 = sch.decompose_reduction(block=b113, loop=l116)
2024-04-28 17:16:29 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #1460: GFLOPs: 342.4119. Time: 2701.5557 us. Best GFLOPs: 732.5370
2024-04-28 17:16:29 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #1461: GFLOPs: 661.9524. Time: 1397.4490 us. Best GFLOPs: 732.5370
2024-04-28 17:16:29 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #1462: GFLOPs: 121.6341. Time: 7605.1430 us. Best GFLOPs: 732.5370
2024-04-28 17:16:29 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #1463: GFLOPs: 588.5395. Time: 1571.7631 us. Best GFLOPs: 732.5370
2024-04-28 17:16:29 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #1464: GFLOPs: 460.0732. Time: 2010.6470 us. Best GFLOPs: 732.5370
2024-04-28 17:16:29 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #1465: GFLOPs: 585.7431. Time: 1579.2670 us. Best GFLOPs: 732.5370
2024-04-28 17:16:29 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #1466: GFLOPs: 645.8140. Time: 1432.3702 us. Best GFLOPs: 732.5370
2024-04-28 17:16:29 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #1467: GFLOPs: 612.2729. Time: 1510.8374 us. Best GFLOPs: 732.5370
2024-04-28 17:16:29 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #1468: GFLOPs: 496.0241. Time: 1864.9191 us. Best GFLOPs: 732.5370
2024-04-28 17:16:29 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #1469: GFLOPs: 446.4635. Time: 2071.9379 us. Best GFLOPs: 732.5370
2024-04-28 17:16:29 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #1470: GFLOPs: 5.9898. Time: 154437.5513 us. Best GFLOPs: 732.5370
2024-04-28 17:16:29 [INFO] [task_scheduler.cc:131] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #1471: GFLOPs: 2.2148. Time: 417670.0317 us. Best GFLOPs: 732.5370
2024-04-28 17:16:29 [INFO] [task_scheduler.cc:121] [Task #16: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #1472: Error in building:
LocalBuilder: Timeout, killed after 30.0 seconds
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(1), T.int64(14), T.int64(14), T.int64(512)), "float32"), p1: T.Buffer((T.int64(32), T.int64(1), T.int64(3), T.int64(3), T.int64(512), T.int64(16)), "float32"), p2: T.Buffer((T.int64(1), T.int64(32), T.int64(1), T.int64(1), T.int64(16)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(32), T.int64(14), T.int64(14), T.int64(16)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        data_pad = T.alloc_buffer((T.int64(1), T.int64(1), T.int64(16), T.int64(16), T.int64(512)))
        conv2d_NCHWc = T.alloc_buffer((T.int64(1), T.int64(32), T.int64(14), T.int64(14), T.int64(16)))
        for n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused_fused in T.parallel(T.int64(1568), annotations={"pragma_auto_unroll_max_step": 512, "pragma_unroll_explicit": 1}):
            for ax0, ax1, ax2, ax3, ax4 in T.grid(T.int64(1), T.int64(1), T.int64(4), T.int64(3), T.int64(512)):
                with T.block("data_pad"):
                    v_i0, v_i1 = T.axis.remap("SS", [ax0, ax1])
                    v_i2 = T.axis.spatial(T.int64(16), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused_fused // T.int64(224) * T.int64(2) + ax2)
                    v_i3 = T.axis.spatial(T.int64(16), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused_fused % T.int64(224) // T.int64(16) + ax3)
                    v_i4 = T.axis.spatial(T.int64(512), ax4)
                    T.reads(p0[v_i0, v_i1, v_i2 - T.int64(1), v_i3 - T.int64(1), v_i4])
                    T.writes(data_pad[v_i0, v_i1, v_i2, v_i3, v_i4])
                    data_pad[v_i0, v_i1, v_i2, v_i3, v_i4] = T.if_then_else(T.int64(1) <= v_i2 and v_i2 < T.int64(15) and T.int64(1) <= v_i3 and v_i3 < T.int64(15), p0[v_i0, v_i1, v_i2 - T.int64(1), v_i3 - T.int64(1), v_i4], T.float32(0))
            for n_2_init, oc_chunk_2_init, oh_2_init, ow_2_init, oc_block_2_init, n_3_init, oc_chunk_3_init, oh_3_init, ow_3_init, oc_block_3_init in T.grid(T.int64(1), T.int64(4), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(8), T.int64(2), T.int64(1), T.int64(1)):
                with T.block("conv2d_NCHWc_init"):
                    v_n = T.axis.spatial(T.int64(1), n_2_init + n_3_init)
                    v_oc_chunk = T.axis.spatial(T.int64(32), oc_chunk_2_init * T.int64(8) + oc_chunk_3_init)
                    v_oh = T.axis.spatial(T.int64(14), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused_fused // T.int64(224) * T.int64(2) + oh_2_init * T.int64(2) + oh_3_init)
                    v_ow = T.axis.spatial(T.int64(14), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused_fused % T.int64(224) // T.int64(16) + ow_2_init + ow_3_init)
                    v_oc_block = T.axis.spatial(T.int64(16), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused_fused % T.int64(16) + oc_block_2_init + oc_block_3_init)
                    T.reads()
                    T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                    T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                    conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = T.float32(0)
            for ic_0, kh_0, kw_0, n_2, oc_chunk_2, oh_2, ow_2, oc_block_2, ic_1, kh_1, kw_1, n_3, oc_chunk_3, oh_3, ow_3, oc_block_3 in T.grid(T.int64(512), T.int64(1), T.int64(3), T.int64(1), T.int64(4), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(3), T.int64(1), T.int64(1), T.int64(8), T.int64(2), T.int64(1), T.int64(1)):
                with T.block("conv2d_NCHWc_update"):
                    v_n = T.axis.spatial(T.int64(1), n_2 + n_3)
                    v_oc_chunk = T.axis.spatial(T.int64(32), oc_chunk_2 * T.int64(8) + oc_chunk_3)
                    v_oh = T.axis.spatial(T.int64(14), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused_fused // T.int64(224) * T.int64(2) + oh_2 * T.int64(2) + oh_3)
                    v_ow = T.axis.spatial(T.int64(14), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused_fused % T.int64(224) // T.int64(16) + ow_2 + ow_3)
                    v_oc_block = T.axis.spatial(T.int64(16), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused_fused % T.int64(16) + oc_block_2 + oc_block_3)
                    v_ic = T.axis.reduce(T.int64(512), ic_0 + ic_1)
                    v_kh = T.axis.reduce(T.int64(3), kh_0 * T.int64(3) + kh_1)
                    v_kw = T.axis.reduce(T.int64(3), kw_0 + kw_1)
                    T.reads(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block], data_pad[v_n, v_ic // T.int64(512), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(512)], p1[v_oc_chunk, v_ic // T.int64(512), v_kh, v_kw, v_ic % T.int64(512), v_oc_block])
                    T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                    T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                    conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] + data_pad[v_n, v_ic // T.int64(512), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(512)] * p1[v_oc_chunk, v_ic // T.int64(512), v_kh, v_kw, v_ic % T.int64(512), v_oc_block]
        for ax0_ax1_ax2_ax3_ax4_fused_0 in T.parallel(T.int64(1568)):
            for ax0_ax1_ax2_ax3_ax4_fused_1 in T.vectorized(T.int64(64)):
                with T.block("T_relu"):
                    v_ax0 = T.axis.spatial(T.int64(1), T.int64(0))
                    v_ax1 = T.axis.spatial(T.int64(32), (ax0_ax1_ax2_ax3_ax4_fused_0 * T.int64(64) + ax0_ax1_ax2_ax3_ax4_fused_1) // T.int64(3136))
                    v_ax2 = T.axis.spatial(T.int64(14), (ax0_ax1_ax2_ax3_ax4_fused_0 * T.int64(64) + ax0_ax1_ax2_ax3_ax4_fused_1) % T.int64(3136) // T.int64(224))
                    v_ax3 = T.axis.spatial(T.int64(14), (ax0_ax1_ax2_ax3_ax4_fused_0 * T.int64(64) + ax0_ax1_ax2_ax3_ax4_fused_1) % T.int64(224) // T.int64(16))
                    v_ax4 = T.axis.spatial(T.int64(16), (ax0_ax1_ax2_ax3_ax4_fused_0 * T.int64(64) + ax0_ax1_ax2_ax3_ax4_fused_1) % T.int64(16))
                    T.reads(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4])
                    T.writes(T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                    T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.max(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] + p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4], T.float32(0))
b0 = sch.get_block(name="data_pad", func_name="main")
b1 = sch.get_block(name="conv2d_NCHWc", func_name="main")
b2 = sch.get_block(name="T_add", func_name="main")
b3 = sch.get_block(name="root", func_name="main")
sch.compute_inline(block=b2)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSRSRS")
l4, l5, l6, l7, l8, l9, l10, l11 = sch.get_loops(block=b1)
v12, v13, v14, v15 = sch.sample_perfect_tile(loop=l4, n=4, max_innermost_factor=64, decision=[1, 1, 1, 1])
l16, l17, l18, l19 = sch.split(loop=l4, factors=[v12, v13, v14, v15], preserve_unit_iters=True)
v20, v21, v22, v23 = sch.sample_perfect_tile(loop=l5, n=4, max_innermost_factor=64, decision=[1, 1, 4, 8])
l24, l25, l26, l27 = sch.split(loop=l5, factors=[v20, v21, v22, v23], preserve_unit_iters=True)
v28, v29, v30, v31 = sch.sample_perfect_tile(loop=l6, n=4, max_innermost_factor=64, decision=[7, 1, 1, 2])
l32, l33, l34, l35 = sch.split(loop=l6, factors=[v28, v29, v30, v31], preserve_unit_iters=True)
v36, v37, v38, v39 = sch.sample_perfect_tile(loop=l7, n=4, max_innermost_factor=64, decision=[1, 14, 1, 1])
l40, l41, l42, l43 = sch.split(loop=l7, factors=[v36, v37, v38, v39], preserve_unit_iters=True)
v44, v45, v46, v47 = sch.sample_perfect_tile(loop=l8, n=4, max_innermost_factor=64, decision=[1, 16, 1, 1])
l48, l49, l50, l51 = sch.split(loop=l8, factors=[v44, v45, v46, v47], preserve_unit_iters=True)
v52, v53 = sch.sample_perfect_tile(loop=l9, n=2, max_innermost_factor=64, decision=[512, 1])
l54, l55 = sch.split(loop=l9, factors=[v52, v53], preserve_unit_iters=True)
v56, v57 = sch.sample_perfect_tile(loop=l10, n=2, max_innermost_factor=64, decision=[1, 3])
l58, l59 = sch.split(loop=l10, factors=[v56, v57], preserve_unit_iters=True)
v60, v61 = sch.sample_perfect_tile(loop=l11, n=2, max_innermost_factor=64, decision=[3, 1])
l62, l63 = sch.split(loop=l11, factors=[v60, v61], preserve_unit_iters=True)
sch.reorder(l16, l24, l32, l40, l48, l17, l25, l33, l41, l49, l54, l58, l62, l18, l26, l34, l42, l50, l55, l59, l63, l19, l27, l35, l43, l51)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.vectorize", ann_val=64)
v64 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.unroll_explicit", ann_val=v64)
l65 = sch.sample_compute_location(block=b0, decision=9)
sch.compute_at(block=b0, loop=l65, preserve_unit_loops=True, index=-1)
sch.enter_postproc()
b66 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b66, ann_key="meta_schedule.parallel")
sch.unannotate(block_or_loop=b66, ann_key="meta_schedule.vectorize")
sch.unannotate(block_or_loop=b66, ann_key="meta_schedule.unroll_explicit")
b67, b68, b69 = sch.get_child_blocks(b66)
l70, l71, l72, l73, l74, l75, l76, l77, l78, l79, l80, l81, l82, l83, l84 = sch.get_loops(block=b67)
l85 = sch.fuse(l70, l71, l72, l73, l74, l75, l76, l77, l78, l79, preserve_unit_iters=True)
sch.parallel(loop=l85)
l86, l87, l88, l89, l90, l91, l92, l93, l94, l95, l96, l97, l98, l99, l100, l101, l102 = sch.get_loops(block=b68)
l103 = sch.fuse(l86, preserve_unit_iters=True)
sch.parallel(loop=l103)
sch.annotate(block_or_loop=l103, ann_key="pragma_auto_unroll_max_step", ann_val=512)
sch.annotate(block_or_loop=l103, ann_key="pragma_unroll_explicit", ann_val=1)
l104, l105, l106, l107, l108 = sch.get_loops(block=b69)
l109 = sch.fuse(l104, l105, l106, l107, l108, preserve_unit_iters=True)
l110, l111 = sch.split(loop=l109, factors=[None, 64], preserve_unit_iters=True)
sch.parallel(loop=l110)
sch.vectorize(loop=l111)
b112 = sch.get_block(name="conv2d_NCHWc", func_name="main")
l113, l114, l115, l116, l117, l118, l119, l120, l121, l122, l123, l124, l125, l126, l127, l128, l129 = sch.get_loops(block=b112)
b130 = sch.decompose_reduction(block=b112, loop=l114)
