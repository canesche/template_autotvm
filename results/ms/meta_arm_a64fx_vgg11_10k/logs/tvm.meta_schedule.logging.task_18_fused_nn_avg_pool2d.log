2024-04-28 07:25:14 [INFO] [task_scheduler.cc:160] Initializing Task #18: "fused_nn_avg_pool2d"
2024-04-28 07:25:14 [INFO] [task_scheduler.cc:35] 
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(32), T.int64(7), T.int64(7), T.int64(16)), "float32"), pool_avg: T.Buffer((T.int64(1), T.int64(32), T.int64(7), T.int64(7), T.int64(16)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        pool_sum = T.alloc_buffer((T.int64(1), T.int64(32), T.int64(7), T.int64(7), T.int64(16)))
        for ax0, ax1, ax2, ax3, ax4, rv0, rv1 in T.grid(T.int64(1), T.int64(32), T.int64(7), T.int64(7), T.int64(16), T.int64(1), T.int64(1)):
            with T.block("pool_sum"):
                v_ax0, v_ax1, v_ax2, v_ax3, v_ax4, v_rv0, v_rv1 = T.axis.remap("SSSSSRR", [ax0, ax1, ax2, ax3, ax4, rv0, rv1])
                T.reads(p0[v_ax0, v_ax1, v_ax2 + v_rv0, v_ax3 + v_rv1, v_ax4])
                T.writes(pool_sum[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                with T.init():
                    pool_sum[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.float32(0)
                pool_sum[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = pool_sum[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] + p0[v_ax0, v_ax1, v_ax2 + v_rv0, v_ax3 + v_rv1, v_ax4]
        for ax0, ax1, ax2, ax3, ax4 in T.grid(T.int64(1), T.int64(32), T.int64(7), T.int64(7), T.int64(16)):
            with T.block("pool_avg"):
                v_ax0, v_ax1, v_ax2, v_ax3, v_ax4 = T.axis.remap("SSSSS", [ax0, ax1, ax2, ax3, ax4])
                T.reads(pool_sum[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                T.writes(pool_avg[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                T.block_attr({"schedule_rule": "meta_schedule.pool_avg"})
                pool_avg[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = pool_sum[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] / T.Cast("float32", T.max((T.min(T.int64(0), T.int64(6) - v_ax2) + T.int64(1) - T.max(T.int64(0) - v_ax2, T.int64(0))) * (T.min(T.int64(0), T.int64(6) - v_ax3) + T.int64(1) - T.max(T.int64(0) - v_ax3, T.int64(0))), T.int64(1)))
2024-04-28 07:25:14 [INFO] [task_scheduler.cc:164] Total 1 design space(s) generated
2024-04-28 07:25:14 [INFO] [task_scheduler.cc:170] Design space #0:
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(32), T.int64(7), T.int64(7), T.int64(16)), "float32"), pool_avg: T.Buffer((T.int64(1), T.int64(32), T.int64(7), T.int64(7), T.int64(16)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        with T.block("root"):
            T.reads()
            T.writes()
            T.block_attr({"meta_schedule.parallel": 768, "meta_schedule.unroll_explicit": 0, "meta_schedule.vectorize": 64})
            pool_sum = T.alloc_buffer((T.int64(1), T.int64(32), T.int64(7), T.int64(7), T.int64(16)))
            for ax0, ax1, ax2 in T.grid(T.int64(1), T.int64(32), T.int64(7)):
                for ax0_1, ax1_1, ax2_1, ax3, ax4, ax5, ax6 in T.grid(T.int64(1), T.int64(1), T.int64(1), T.int64(7), T.int64(16), T.int64(1), T.int64(1)):
                    with T.block("pool_sum"):
                        v_ax0 = T.axis.spatial(T.int64(1), ax0_1)
                        v_ax1 = T.axis.spatial(T.int64(32), ax1 + ax1_1)
                        v_ax2 = T.axis.spatial(T.int64(7), ax2 + ax2_1)
                        v_ax3, v_ax4, v_rv0, v_rv1 = T.axis.remap("SSRR", [ax3, ax4, ax5, ax6])
                        T.reads(p0[v_ax0, v_ax1, v_ax2 + v_rv0, v_ax3 + v_rv1, v_ax4])
                        T.writes(pool_sum[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                        with T.init():
                            pool_sum[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.float32(0)
                        pool_sum[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = pool_sum[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] + p0[v_ax0, v_ax1, v_ax2 + v_rv0, v_ax3 + v_rv1, v_ax4]
                for ax3, ax4 in T.grid(T.int64(7), T.int64(16)):
                    with T.block("pool_avg"):
                        v_ax0, v_ax1, v_ax2, v_ax3, v_ax4 = T.axis.remap("SSSSS", [ax0, ax1, ax2, ax3, ax4])
                        T.reads(pool_sum[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                        T.writes(pool_avg[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                        pool_avg[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = pool_sum[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] / T.Cast("float32", T.max((T.min(T.int64(0), T.int64(6) - v_ax2) + T.int64(1) - T.max(T.int64(0) - v_ax2, T.int64(0))) * (T.min(T.int64(0), T.int64(6) - v_ax3) + T.int64(1) - T.max(T.int64(0) - v_ax3, T.int64(0))), T.int64(1)))
b0 = sch.get_block(name="pool_sum", func_name="main")
b1 = sch.get_block(name="pool_avg", func_name="main")
b2 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b1, ann_key="schedule_rule")
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.vectorize", ann_val=64)
v3 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=0)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.unroll_explicit", ann_val=v3)
l4 = sch.sample_compute_location(block=b0, decision=2)
sch.compute_at(block=b0, loop=l4, preserve_unit_loops=True, index=-1)
2024-04-28 08:00:02 [INFO] [evolutionary_search.cc:713] Generating candidates......
2024-04-28 08:00:02 [INFO] [evolutionary_search.cc:715] Picked top 0 candidate(s) from database
2024-04-28 08:00:04 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x31bf7b8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x38ab648)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x4dda9b8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x4dd29a8)]: 0 failure(s)
2024-04-28 08:00:04 [INFO] [evolutionary_search.cc:723] Sampled 512 candidate(s)
2024-04-28 08:00:06 [INFO] [evolutionary_search.cc:621] Evolve iter #0 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x31bf7b8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x38ab648)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x4dda9b8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x4dd29a8)]: 0 failure(s)
2024-04-28 08:00:08 [INFO] [evolutionary_search.cc:621] Evolve iter #1 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x31bf7b8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x38ab648)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x4dda9b8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x4dd29a8)]: 0 failure(s)
2024-04-28 08:00:10 [INFO] [evolutionary_search.cc:621] Evolve iter #2 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x31bf7b8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x38ab648)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x4dda9b8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x4dd29a8)]: 0 failure(s)
2024-04-28 08:00:11 [INFO] [evolutionary_search.cc:621] Evolve iter #3 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x31bf7b8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x38ab648)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x4dda9b8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x4dd29a8)]: 0 failure(s)
2024-04-28 08:00:12 [INFO] [evolutionary_search.cc:649] Scores of the best 48 candidates:
[1 : 16]:	0.9995  0.9922  0.9220  0.9140  0.8994  0.8969  0.8769  0.8707  0.8687  0.8666  0.8147  0.8019  0.7979  0.7808  0.7209  0.6940
[17 : 32]:	0.6821  0.6487  0.6448  0.6094  0.5971  0.5863  0.5258  0.5167  0.5066  0.4885  0.4814  0.4539  0.4194  0.4102  0.4028  0.3526
[33 : 48]:	0.3321  0.3105  0.2632  0.2184  0.2138  0.2056  0.1986  0.1954  0.1869  0.1623  0.1603  0.1217  0.0931  0.0855  0.0757  0.0618
2024-04-28 08:00:12 [INFO] [evolutionary_search.cc:727] Got 48 candidate(s) with evolutionary search
2024-04-28 08:00:12 [INFO] [evolutionary_search.cc:730] Sending 48 candidates(s) for measurement
2024-04-28 08:27:36 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_avg_pool2d] Trial #1: GFLOPs: 42.0124. Time: 9.5545 us. Best GFLOPs: 42.0124
2024-04-28 08:27:36 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_avg_pool2d] Trial #2: GFLOPs: 39.4036. Time: 10.1871 us. Best GFLOPs: 42.0124
2024-04-28 08:27:36 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_avg_pool2d] Trial #3: GFLOPs: 44.1457. Time: 9.0928 us. Best GFLOPs: 44.1457
2024-04-28 08:27:36 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_avg_pool2d] Trial #4: GFLOPs: 41.6664. Time: 9.6338 us. Best GFLOPs: 44.1457
2024-04-28 08:27:36 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_avg_pool2d] Trial #5: GFLOPs: 41.7487. Time: 9.6149 us. Best GFLOPs: 44.1457
2024-04-28 08:27:36 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_avg_pool2d] Trial #6: GFLOPs: 32.5775. Time: 12.3216 us. Best GFLOPs: 44.1457
2024-04-28 08:27:36 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_avg_pool2d] Trial #7: GFLOPs: 18.4350. Time: 21.7743 us. Best GFLOPs: 44.1457
2024-04-28 08:27:36 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_avg_pool2d] Trial #8: GFLOPs: 43.0149. Time: 9.3318 us. Best GFLOPs: 44.1457
2024-04-28 08:27:36 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_avg_pool2d] Trial #9: GFLOPs: 41.7666. Time: 9.6107 us. Best GFLOPs: 44.1457
2024-04-28 08:27:36 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_avg_pool2d] Trial #10: GFLOPs: 18.2945. Time: 21.9415 us. Best GFLOPs: 44.1457
2024-04-28 08:27:36 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_avg_pool2d] Trial #11: GFLOPs: 37.5759. Time: 10.6826 us. Best GFLOPs: 44.1457
2024-04-28 08:27:36 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_avg_pool2d] Trial #12: GFLOPs: 18.7416. Time: 21.4180 us. Best GFLOPs: 44.1457
2024-04-28 08:27:36 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_avg_pool2d] Trial #13: GFLOPs: 41.5935. Time: 9.6507 us. Best GFLOPs: 44.1457
2024-04-28 08:27:36 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_avg_pool2d] Trial #14: GFLOPs: 40.4577. Time: 9.9217 us. Best GFLOPs: 44.1457
2024-04-28 08:27:36 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_avg_pool2d] Trial #15: GFLOPs: 18.7284. Time: 21.4332 us. Best GFLOPs: 44.1457
2024-04-28 08:27:36 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_avg_pool2d] Trial #16: GFLOPs: 42.1598. Time: 9.5211 us. Best GFLOPs: 44.1457
2024-04-28 08:27:36 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_avg_pool2d] Trial #17: GFLOPs: 40.8549. Time: 9.8252 us. Best GFLOPs: 44.1457
2024-04-28 08:27:36 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_avg_pool2d] Trial #18: GFLOPs: 42.5937. Time: 9.4241 us. Best GFLOPs: 44.1457
2024-04-28 08:27:36 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_avg_pool2d] Trial #19: GFLOPs: 18.4347. Time: 21.7746 us. Best GFLOPs: 44.1457
2024-04-28 08:27:36 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_avg_pool2d] Trial #20: GFLOPs: 24.0575. Time: 16.6854 us. Best GFLOPs: 44.1457
2024-04-28 08:27:36 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_avg_pool2d] Trial #21: GFLOPs: 18.8100. Time: 21.3401 us. Best GFLOPs: 44.1457
2024-04-28 08:27:36 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_avg_pool2d] Trial #22: GFLOPs: 42.7620. Time: 9.3870 us. Best GFLOPs: 44.1457
2024-04-28 08:27:36 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_avg_pool2d] Trial #23: GFLOPs: 41.6565. Time: 9.6361 us. Best GFLOPs: 44.1457
2024-04-28 08:27:36 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_avg_pool2d] Trial #24: GFLOPs: 40.4228. Time: 9.9302 us. Best GFLOPs: 44.1457
2024-04-28 08:27:36 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_avg_pool2d] Trial #25: GFLOPs: 41.0887. Time: 9.7693 us. Best GFLOPs: 44.1457
2024-04-28 08:27:36 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_avg_pool2d] Trial #26: GFLOPs: 41.4827. Time: 9.6765 us. Best GFLOPs: 44.1457
2024-04-28 08:27:36 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_avg_pool2d] Trial #27: GFLOPs: 41.7126. Time: 9.6232 us. Best GFLOPs: 44.1457
2024-04-28 08:27:36 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_avg_pool2d] Trial #28: GFLOPs: 41.5574. Time: 9.6591 us. Best GFLOPs: 44.1457
2024-04-28 08:27:36 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_avg_pool2d] Trial #29: GFLOPs: 36.3696. Time: 11.0369 us. Best GFLOPs: 44.1457
2024-04-28 08:27:36 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_avg_pool2d] Trial #30: GFLOPs: 38.0750. Time: 10.5425 us. Best GFLOPs: 44.1457
2024-04-28 08:27:36 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_avg_pool2d] Trial #31: GFLOPs: 43.0991. Time: 9.3136 us. Best GFLOPs: 44.1457
2024-04-28 08:27:36 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_avg_pool2d] Trial #32: GFLOPs: 43.3595. Time: 9.2577 us. Best GFLOPs: 44.1457
2024-04-28 08:27:36 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_avg_pool2d] Trial #33: GFLOPs: 43.3837. Time: 9.2525 us. Best GFLOPs: 44.1457
2024-04-28 08:27:36 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_avg_pool2d] Trial #34: GFLOPs: 19.2372. Time: 20.8663 us. Best GFLOPs: 44.1457
2024-04-28 08:27:36 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_avg_pool2d] Trial #35: GFLOPs: 43.9905. Time: 9.1249 us. Best GFLOPs: 44.1457
2024-04-28 08:27:36 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_avg_pool2d] Trial #36: GFLOPs: 45.7112. Time: 8.7814 us. Best GFLOPs: 45.7112
2024-04-28 08:27:36 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_avg_pool2d] Trial #37: GFLOPs: 43.2068. Time: 9.2904 us. Best GFLOPs: 45.7112
2024-04-28 08:27:36 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_avg_pool2d] Trial #38: GFLOPs: 18.0148. Time: 22.2821 us. Best GFLOPs: 45.7112
2024-04-28 08:27:36 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_avg_pool2d] Trial #39: GFLOPs: 41.2063. Time: 9.7414 us. Best GFLOPs: 45.7112
2024-04-28 08:27:36 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_avg_pool2d] Trial #40: GFLOPs: 43.9232. Time: 9.1389 us. Best GFLOPs: 45.7112
2024-04-28 08:27:36 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_avg_pool2d] Trial #41: GFLOPs: 18.9042. Time: 21.2338 us. Best GFLOPs: 45.7112
2024-04-28 08:27:36 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_avg_pool2d] Trial #42: GFLOPs: 19.0015. Time: 21.1251 us. Best GFLOPs: 45.7112
2024-04-28 08:27:36 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_avg_pool2d] Trial #43: GFLOPs: 18.7370. Time: 21.4232 us. Best GFLOPs: 45.7112
2024-04-28 08:27:36 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_avg_pool2d] Trial #44: GFLOPs: 43.5361. Time: 9.2201 us. Best GFLOPs: 45.7112
2024-04-28 08:27:36 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_avg_pool2d] Trial #45: GFLOPs: 43.7090. Time: 9.1836 us. Best GFLOPs: 45.7112
2024-04-28 08:27:36 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_avg_pool2d] Trial #46: GFLOPs: 44.2443. Time: 9.0725 us. Best GFLOPs: 45.7112
2024-04-28 08:27:36 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_avg_pool2d] Trial #47: GFLOPs: 19.2070. Time: 20.8990 us. Best GFLOPs: 45.7112
2024-04-28 08:27:36 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_avg_pool2d] Trial #48: GFLOPs: 43.4734. Time: 9.2334 us. Best GFLOPs: 45.7112
