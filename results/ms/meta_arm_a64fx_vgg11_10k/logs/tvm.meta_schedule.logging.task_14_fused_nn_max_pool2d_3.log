2024-04-28 07:25:04 [INFO] [task_scheduler.cc:160] Initializing Task #14: "fused_nn_max_pool2d_3"
2024-04-28 07:25:04 [INFO] [task_scheduler.cc:35] 
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(32), T.int64(28), T.int64(28), T.int64(16)), "float32"), pool_max: T.Buffer((T.int64(1), T.int64(32), T.int64(14), T.int64(14), T.int64(16)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        for ax0, ax1, ax2, ax3, ax4, rv0, rv1 in T.grid(T.int64(1), T.int64(32), T.int64(14), T.int64(14), T.int64(16), T.int64(2), T.int64(2)):
            with T.block("pool_max"):
                v_ax0, v_ax1, v_ax2, v_ax3, v_ax4, v_rv0, v_rv1 = T.axis.remap("SSSSSRR", [ax0, ax1, ax2, ax3, ax4, rv0, rv1])
                T.reads(p0[v_ax0, v_ax1, v_ax2 * T.int64(2) + v_rv0, v_ax3 * T.int64(2) + v_rv1, v_ax4])
                T.writes(pool_max[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                T.block_attr({"schedule_rule": "meta_schedule.pool_max"})
                with T.init():
                    pool_max[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.float32(-3.4028234663852886e+38)
                pool_max[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.max(pool_max[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], p0[v_ax0, v_ax1, v_ax2 * T.int64(2) + v_rv0, v_ax3 * T.int64(2) + v_rv1, v_ax4])
2024-04-28 07:25:04 [INFO] [task_scheduler.cc:164] Total 3 design space(s) generated
2024-04-28 07:25:04 [INFO] [task_scheduler.cc:170] Design space #0:
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(32), T.int64(28), T.int64(28), T.int64(16)), "float32"), pool_max: T.Buffer((T.int64(1), T.int64(32), T.int64(14), T.int64(14), T.int64(16)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        with T.block("root"):
            T.reads()
            T.writes()
            T.block_attr({"meta_schedule.parallel": 768, "meta_schedule.unroll_explicit": 64, "meta_schedule.vectorize": 64})
            pool_max_rf = T.alloc_buffer((T.int64(1), T.int64(32), T.int64(14), T.int64(14), T.int64(16), T.int64(1)))
            for ax0, ax1, ax2, ax3, ax4, rv0_rv1_fused_0, rv0_rv1_fused_1 in T.grid(T.int64(1), T.int64(32), T.int64(14), T.int64(14), T.int64(16), T.int64(1), T.int64(4)):
                with T.block("pool_max_rf"):
                    vrv0_rv1_fused_0, v_ax0, v_ax1, v_ax2, v_ax3, v_ax4, vrv0_rv1_fused_1 = T.axis.remap("SSSSSSR", [rv0_rv1_fused_0, ax0, ax1, ax2, ax3, ax4, rv0_rv1_fused_1])
                    T.reads(p0[v_ax0, v_ax1, v_ax2 * T.int64(2) + (vrv0_rv1_fused_0 * T.int64(4) + vrv0_rv1_fused_1) // T.int64(2), v_ax3 * T.int64(2) + (vrv0_rv1_fused_0 * T.int64(4) + vrv0_rv1_fused_1) % T.int64(2), v_ax4])
                    T.writes(pool_max_rf[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4, vrv0_rv1_fused_0])
                    with T.init():
                        pool_max_rf[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4, vrv0_rv1_fused_0] = T.float32(-3.4028234663852886e+38)
                    pool_max_rf[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4, vrv0_rv1_fused_0] = T.max(pool_max_rf[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4, vrv0_rv1_fused_0], p0[v_ax0, v_ax1, v_ax2 * T.int64(2) + (vrv0_rv1_fused_0 * T.int64(4) + vrv0_rv1_fused_1) // T.int64(2), v_ax3 * T.int64(2) + (vrv0_rv1_fused_0 * T.int64(4) + vrv0_rv1_fused_1) % T.int64(2), v_ax4])
            for ax0, ax1, ax2, ax3, ax4, rv0_rv1_fused_0 in T.grid(T.int64(1), T.int64(32), T.int64(14), T.int64(14), T.int64(16), T.int64(1)):
                with T.block("pool_max"):
                    vrv0_rv1_fused_0, v_ax0, v_ax1, v_ax2, v_ax3, v_ax4 = T.axis.remap("RSSSSS", [rv0_rv1_fused_0, ax0, ax1, ax2, ax3, ax4])
                    T.reads(pool_max_rf[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4, vrv0_rv1_fused_0])
                    T.writes(pool_max[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                    T.block_attr({"meta_schedule.random_compute_producer": 1})
                    with T.init():
                        pool_max[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.float32(-3.4028234663852886e+38)
                    pool_max[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.max(pool_max[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], pool_max_rf[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4, vrv0_rv1_fused_0])
b0 = sch.get_block(name="pool_max", func_name="main")
b1 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b0, ann_key="schedule_rule")
l2, l3, l4, l5, l6, l7, l8 = sch.get_loops(block=b0)
l9 = sch.fuse(l7, l8, preserve_unit_iters=True)
v10, v11 = sch.sample_perfect_tile(loop=l9, n=2, max_innermost_factor=64, decision=[1, 4])
l12, l13 = sch.split(loop=l9, factors=[v10, v11], preserve_unit_iters=True)
b14 = sch.rfactor(loop=l12, factor_axis=5)
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.random_compute_producer", ann_val=1)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.vectorize", ann_val=64)
v15 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=2)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.unroll_explicit", ann_val=v15)
2024-04-28 07:25:04 [INFO] [task_scheduler.cc:170] Design space #1:
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(32), T.int64(28), T.int64(28), T.int64(16)), "float32"), pool_max: T.Buffer((T.int64(1), T.int64(32), T.int64(14), T.int64(14), T.int64(16)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        with T.block("root"):
            T.reads()
            T.writes()
            T.block_attr({"meta_schedule.parallel": 768, "meta_schedule.unroll_explicit": 16, "meta_schedule.vectorize": 64})
            pool_max_rf = T.alloc_buffer((T.int64(1), T.int64(32), T.int64(14), T.int64(14), T.int64(16), T.int64(4)))
            for ax0, ax1, ax2, ax3, ax4, rv0_rv1_fused_0, rv0_rv1_fused_1 in T.grid(T.int64(1), T.int64(32), T.int64(14), T.int64(14), T.int64(16), T.int64(1), T.int64(4)):
                with T.block("pool_max_rf"):
                    vrv0_rv1_fused_1, v_ax0, v_ax1, v_ax2, v_ax3, v_ax4, vrv0_rv1_fused_0 = T.axis.remap("SSSSSSR", [rv0_rv1_fused_1, ax0, ax1, ax2, ax3, ax4, rv0_rv1_fused_0])
                    T.reads(p0[v_ax0, v_ax1, v_ax2 * T.int64(2) + (vrv0_rv1_fused_0 * T.int64(4) + vrv0_rv1_fused_1) // T.int64(2), v_ax3 * T.int64(2) + (vrv0_rv1_fused_0 * T.int64(4) + vrv0_rv1_fused_1) % T.int64(2), v_ax4])
                    T.writes(pool_max_rf[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4, vrv0_rv1_fused_1])
                    with T.init():
                        pool_max_rf[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4, vrv0_rv1_fused_1] = T.float32(-3.4028234663852886e+38)
                    pool_max_rf[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4, vrv0_rv1_fused_1] = T.max(pool_max_rf[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4, vrv0_rv1_fused_1], p0[v_ax0, v_ax1, v_ax2 * T.int64(2) + (vrv0_rv1_fused_0 * T.int64(4) + vrv0_rv1_fused_1) // T.int64(2), v_ax3 * T.int64(2) + (vrv0_rv1_fused_0 * T.int64(4) + vrv0_rv1_fused_1) % T.int64(2), v_ax4])
            for ax0, ax1, ax2, ax3, ax4, rv0_rv1_fused_1 in T.grid(T.int64(1), T.int64(32), T.int64(14), T.int64(14), T.int64(16), T.int64(4)):
                with T.block("pool_max"):
                    vrv0_rv1_fused_1, v_ax0, v_ax1, v_ax2, v_ax3, v_ax4 = T.axis.remap("RSSSSS", [rv0_rv1_fused_1, ax0, ax1, ax2, ax3, ax4])
                    T.reads(pool_max_rf[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4, vrv0_rv1_fused_1])
                    T.writes(pool_max[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                    T.block_attr({"meta_schedule.random_compute_producer": 1})
                    with T.init():
                        pool_max[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.float32(-3.4028234663852886e+38)
                    pool_max[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.max(pool_max[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], pool_max_rf[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4, vrv0_rv1_fused_1])
b0 = sch.get_block(name="pool_max", func_name="main")
b1 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b0, ann_key="schedule_rule")
l2, l3, l4, l5, l6, l7, l8 = sch.get_loops(block=b0)
l9 = sch.fuse(l7, l8, preserve_unit_iters=True)
v10, v11 = sch.sample_perfect_tile(loop=l9, n=2, max_innermost_factor=64, decision=[1, 4])
l12, l13 = sch.split(loop=l9, factors=[v10, v11], preserve_unit_iters=True)
b14 = sch.rfactor(loop=l13, factor_axis=5)
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.random_compute_producer", ann_val=1)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.vectorize", ann_val=64)
v15 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=1)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.unroll_explicit", ann_val=v15)
2024-04-28 07:25:04 [INFO] [task_scheduler.cc:170] Design space #2:
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(32), T.int64(28), T.int64(28), T.int64(16)), "float32"), pool_max: T.Buffer((T.int64(1), T.int64(32), T.int64(14), T.int64(14), T.int64(16)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        with T.block("root"):
            T.reads()
            T.writes()
            T.block_attr({"meta_schedule.parallel": 768, "meta_schedule.unroll_explicit": 0, "meta_schedule.vectorize": 64})
            for ax0, ax1, ax2, ax3, ax4, rv0, rv1 in T.grid(T.int64(1), T.int64(32), T.int64(14), T.int64(14), T.int64(16), T.int64(2), T.int64(2)):
                with T.block("pool_max"):
                    v_ax0, v_ax1, v_ax2, v_ax3, v_ax4, v_rv0, v_rv1 = T.axis.remap("SSSSSRR", [ax0, ax1, ax2, ax3, ax4, rv0, rv1])
                    T.reads(p0[v_ax0, v_ax1, v_ax2 * T.int64(2) + v_rv0, v_ax3 * T.int64(2) + v_rv1, v_ax4])
                    T.writes(pool_max[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                    with T.init():
                        pool_max[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.float32(-3.4028234663852886e+38)
                    pool_max[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.max(pool_max[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], p0[v_ax0, v_ax1, v_ax2 * T.int64(2) + v_rv0, v_ax3 * T.int64(2) + v_rv1, v_ax4])
b0 = sch.get_block(name="pool_max", func_name="main")
b1 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b0, ann_key="schedule_rule")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.vectorize", ann_val=64)
v2 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=0)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.unroll_explicit", ann_val=v2)
2024-04-28 07:53:43 [INFO] [evolutionary_search.cc:713] Generating candidates......
2024-04-28 07:53:43 [INFO] [evolutionary_search.cc:715] Picked top 0 candidate(s) from database
2024-04-28 07:53:43 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x4e13e98)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x37d7b88)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x672b798)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x9b4d5f8)]: 0 failure(s)
2024-04-28 07:53:43 [INFO] [evolutionary_search.cc:723] Sampled 512 candidate(s)
2024-04-28 07:53:44 [INFO] [evolutionary_search.cc:621] Evolve iter #0 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x4e13e98)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x37d7b88)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x672b798)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x9b4d5f8)]: 0 failure(s)
2024-04-28 07:53:46 [INFO] [evolutionary_search.cc:621] Evolve iter #1 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x4e13e98)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x37d7b88)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x672b798)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x9b4d5f8)]: 0 failure(s)
2024-04-28 07:53:47 [INFO] [evolutionary_search.cc:621] Evolve iter #2 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x4e13e98)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x37d7b88)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x672b798)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x9b4d5f8)]: 0 failure(s)
2024-04-28 07:53:48 [INFO] [evolutionary_search.cc:621] Evolve iter #3 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x4e13e98)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x37d7b88)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x672b798)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x9b4d5f8)]: 0 failure(s)
2024-04-28 07:53:49 [INFO] [evolutionary_search.cc:649] Scores of the best 54 candidates:
[1 : 16]:	0.9736  0.9482  0.9262  0.9156  0.9100  0.8932  0.8717  0.8304  0.7946  0.7662  0.7652  0.7456  0.7293  0.6803  0.6754  0.6583
[17 : 32]:	0.6520  0.6197  0.6141  0.6041  0.6033  0.5816  0.5482  0.5472  0.5385  0.4667  0.4592  0.4559  0.3981  0.3739  0.3704  0.3633
[33 : 48]:	0.3631  0.3578  0.3378  0.3220  0.3112  0.3006  0.2956  0.2806  0.2670  0.2616  0.2599  0.2221  0.2059  0.2040  0.1557  0.1136
[49 : 54]:	0.1130  0.0863  0.0806  0.0738  0.0100  0.0047
2024-04-28 07:53:49 [INFO] [evolutionary_search.cc:727] Got 54 candidate(s) with evolutionary search
2024-04-28 07:53:49 [INFO] [evolutionary_search.cc:730] Sending 54 candidates(s) for measurement
2024-04-28 08:27:27 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_max_pool2d_3] Trial #1: GFLOPs: 7.2134. Time: 55.6473 us. Best GFLOPs: 7.2134
2024-04-28 08:27:27 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_max_pool2d_3] Trial #2: GFLOPs: 9.1913. Time: 43.6725 us. Best GFLOPs: 9.1913
2024-04-28 08:27:27 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_max_pool2d_3] Trial #3: GFLOPs: 5.5740. Time: 72.0144 us. Best GFLOPs: 9.1913
2024-04-28 08:27:27 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_max_pool2d_3] Trial #4: GFLOPs: 9.6507. Time: 41.5936 us. Best GFLOPs: 9.6507
2024-04-28 08:27:27 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_max_pool2d_3] Trial #5: GFLOPs: 26.8954. Time: 14.9248 us. Best GFLOPs: 26.8954
2024-04-28 08:27:27 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_max_pool2d_3] Trial #6: GFLOPs: 12.3033. Time: 32.6261 us. Best GFLOPs: 26.8954
2024-04-28 08:27:27 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_max_pool2d_3] Trial #7: GFLOPs: 8.1886. Time: 49.0205 us. Best GFLOPs: 26.8954
2024-04-28 08:27:27 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_max_pool2d_3] Trial #8: GFLOPs: 9.8419. Time: 40.7858 us. Best GFLOPs: 26.8954
2024-04-28 08:27:27 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_max_pool2d_3] Trial #9: GFLOPs: 12.5258. Time: 32.0466 us. Best GFLOPs: 26.8954
2024-04-28 08:27:27 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_max_pool2d_3] Trial #10: GFLOPs: 6.7768. Time: 59.2330 us. Best GFLOPs: 26.8954
2024-04-28 08:27:27 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_max_pool2d_3] Trial #11: GFLOPs: 13.4846. Time: 29.7678 us. Best GFLOPs: 26.8954
2024-04-28 08:27:27 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_max_pool2d_3] Trial #12: GFLOPs: 7.4044. Time: 54.2120 us. Best GFLOPs: 26.8954
2024-04-28 08:27:27 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_max_pool2d_3] Trial #13: GFLOPs: 12.2677. Time: 32.7208 us. Best GFLOPs: 26.8954
2024-04-28 08:27:27 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_max_pool2d_3] Trial #14: GFLOPs: 8.7081. Time: 46.0958 us. Best GFLOPs: 26.8954
2024-04-28 08:27:27 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_max_pool2d_3] Trial #15: GFLOPs: 6.7089. Time: 59.8321 us. Best GFLOPs: 26.8954
2024-04-28 08:27:27 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_max_pool2d_3] Trial #16: GFLOPs: 10.9269. Time: 36.7359 us. Best GFLOPs: 26.8954
2024-04-28 08:27:27 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_max_pool2d_3] Trial #17: GFLOPs: 13.5720. Time: 29.5762 us. Best GFLOPs: 26.8954
2024-04-28 08:27:27 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_max_pool2d_3] Trial #18: GFLOPs: 11.7262. Time: 34.2316 us. Best GFLOPs: 26.8954
2024-04-28 08:27:27 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_max_pool2d_3] Trial #19: GFLOPs: 7.3828. Time: 54.3709 us. Best GFLOPs: 26.8954
2024-04-28 08:27:27 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_max_pool2d_3] Trial #20: GFLOPs: 19.6313. Time: 20.4473 us. Best GFLOPs: 26.8954
2024-04-28 08:27:27 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_max_pool2d_3] Trial #21: GFLOPs: 27.1419. Time: 14.7892 us. Best GFLOPs: 27.1419
2024-04-28 08:27:27 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_max_pool2d_3] Trial #22: GFLOPs: 12.7893. Time: 31.3863 us. Best GFLOPs: 27.1419
2024-04-28 08:27:27 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_max_pool2d_3] Trial #23: GFLOPs: 11.1530. Time: 35.9911 us. Best GFLOPs: 27.1419
2024-04-28 08:27:27 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_max_pool2d_3] Trial #24: GFLOPs: 25.3701. Time: 15.8221 us. Best GFLOPs: 27.1419
2024-04-28 08:27:27 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_max_pool2d_3] Trial #25: GFLOPs: 13.8841. Time: 28.9112 us. Best GFLOPs: 27.1419
2024-04-28 08:27:27 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_max_pool2d_3] Trial #26: GFLOPs: 9.8530. Time: 40.7398 us. Best GFLOPs: 27.1419
2024-04-28 08:27:27 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_max_pool2d_3] Trial #27: GFLOPs: 12.7927. Time: 31.3778 us. Best GFLOPs: 27.1419
2024-04-28 08:27:27 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_max_pool2d_3] Trial #28: GFLOPs: 11.5648. Time: 34.7096 us. Best GFLOPs: 27.1419
2024-04-28 08:27:27 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_max_pool2d_3] Trial #29: GFLOPs: 11.1487. Time: 36.0049 us. Best GFLOPs: 27.1419
2024-04-28 08:27:27 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_max_pool2d_3] Trial #30: GFLOPs: 8.8076. Time: 45.5754 us. Best GFLOPs: 27.1419
2024-04-28 08:27:27 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_max_pool2d_3] Trial #31: GFLOPs: 26.1271. Time: 15.3637 us. Best GFLOPs: 27.1419
2024-04-28 08:27:27 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_max_pool2d_3] Trial #32: GFLOPs: 5.6803. Time: 70.6661 us. Best GFLOPs: 27.1419
2024-04-28 08:27:27 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_max_pool2d_3] Trial #33: GFLOPs: 24.5438. Time: 16.3548 us. Best GFLOPs: 27.1419
2024-04-28 08:27:27 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_max_pool2d_3] Trial #34: GFLOPs: 12.5719. Time: 31.9289 us. Best GFLOPs: 27.1419
2024-04-28 08:27:27 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_max_pool2d_3] Trial #35: GFLOPs: 16.9485. Time: 23.6840 us. Best GFLOPs: 27.1419
2024-04-28 08:27:27 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_max_pool2d_3] Trial #36: GFLOPs: 10.2431. Time: 39.1880 us. Best GFLOPs: 27.1419
2024-04-28 08:27:27 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_max_pool2d_3] Trial #37: GFLOPs: 12.5123. Time: 32.0811 us. Best GFLOPs: 27.1419
2024-04-28 08:27:27 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_max_pool2d_3] Trial #38: GFLOPs: 25.3804. Time: 15.8157 us. Best GFLOPs: 27.1419
2024-04-28 08:27:27 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_max_pool2d_3] Trial #39: GFLOPs: 8.7495. Time: 45.8777 us. Best GFLOPs: 27.1419
2024-04-28 08:27:27 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_max_pool2d_3] Trial #40: GFLOPs: 10.3906. Time: 38.6320 us. Best GFLOPs: 27.1419
2024-04-28 08:27:27 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_max_pool2d_3] Trial #41: GFLOPs: 7.2980. Time: 55.0028 us. Best GFLOPs: 27.1419
2024-04-28 08:27:27 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_max_pool2d_3] Trial #42: GFLOPs: 10.7176. Time: 37.4532 us. Best GFLOPs: 27.1419
2024-04-28 08:27:27 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_max_pool2d_3] Trial #43: GFLOPs: 8.7930. Time: 45.6508 us. Best GFLOPs: 27.1419
2024-04-28 08:27:27 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_max_pool2d_3] Trial #44: GFLOPs: 12.1476. Time: 33.0442 us. Best GFLOPs: 27.1419
2024-04-28 08:27:27 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_max_pool2d_3] Trial #45: GFLOPs: 8.9672. Time: 44.7642 us. Best GFLOPs: 27.1419
2024-04-28 08:27:27 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_max_pool2d_3] Trial #46: GFLOPs: 7.3002. Time: 54.9861 us. Best GFLOPs: 27.1419
2024-04-28 08:27:27 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_max_pool2d_3] Trial #47: GFLOPs: 12.0099. Time: 33.4230 us. Best GFLOPs: 27.1419
2024-04-28 08:27:27 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_max_pool2d_3] Trial #48: GFLOPs: 8.5910. Time: 46.7243 us. Best GFLOPs: 27.1419
2024-04-28 08:27:27 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_max_pool2d_3] Trial #49: GFLOPs: 11.4119. Time: 35.1744 us. Best GFLOPs: 27.1419
2024-04-28 08:27:27 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_max_pool2d_3] Trial #50: GFLOPs: 6.9149. Time: 58.0497 us. Best GFLOPs: 27.1419
2024-04-28 08:27:27 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_max_pool2d_3] Trial #51: GFLOPs: 13.7202. Time: 29.2567 us. Best GFLOPs: 27.1419
2024-04-28 08:27:27 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_max_pool2d_3] Trial #52: GFLOPs: 13.7866. Time: 29.1158 us. Best GFLOPs: 27.1419
2024-04-28 08:27:27 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_max_pool2d_3] Trial #53: GFLOPs: 13.8050. Time: 29.0770 us. Best GFLOPs: 27.1419
2024-04-28 08:27:27 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_max_pool2d_3] Trial #54: GFLOPs: 11.2583. Time: 35.6543 us. Best GFLOPs: 27.1419
