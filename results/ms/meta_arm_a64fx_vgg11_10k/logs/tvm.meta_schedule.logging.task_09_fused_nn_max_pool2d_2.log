2024-04-28 07:24:49 [INFO] [task_scheduler.cc:160] Initializing Task #9: "fused_nn_max_pool2d_2"
2024-04-28 07:24:49 [INFO] [task_scheduler.cc:35] 
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(8), T.int64(56), T.int64(56), T.int64(32)), "float32"), pool_max: T.Buffer((T.int64(1), T.int64(8), T.int64(28), T.int64(28), T.int64(32)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        for ax0, ax1, ax2, ax3, ax4, rv0, rv1 in T.grid(T.int64(1), T.int64(8), T.int64(28), T.int64(28), T.int64(32), T.int64(2), T.int64(2)):
            with T.block("pool_max"):
                v_ax0, v_ax1, v_ax2, v_ax3, v_ax4, v_rv0, v_rv1 = T.axis.remap("SSSSSRR", [ax0, ax1, ax2, ax3, ax4, rv0, rv1])
                T.reads(p0[v_ax0, v_ax1, v_ax2 * T.int64(2) + v_rv0, v_ax3 * T.int64(2) + v_rv1, v_ax4])
                T.writes(pool_max[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                T.block_attr({"schedule_rule": "meta_schedule.pool_max"})
                with T.init():
                    pool_max[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.float32(-3.4028234663852886e+38)
                pool_max[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.max(pool_max[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], p0[v_ax0, v_ax1, v_ax2 * T.int64(2) + v_rv0, v_ax3 * T.int64(2) + v_rv1, v_ax4])
2024-04-28 07:24:49 [INFO] [task_scheduler.cc:164] Total 3 design space(s) generated
2024-04-28 07:24:49 [INFO] [task_scheduler.cc:170] Design space #0:
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(8), T.int64(56), T.int64(56), T.int64(32)), "float32"), pool_max: T.Buffer((T.int64(1), T.int64(8), T.int64(28), T.int64(28), T.int64(32)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        with T.block("root"):
            T.reads()
            T.writes()
            T.block_attr({"meta_schedule.parallel": 768, "meta_schedule.unroll_explicit": 512, "meta_schedule.vectorize": 64})
            pool_max_rf = T.alloc_buffer((T.int64(1), T.int64(8), T.int64(28), T.int64(28), T.int64(32), T.int64(4)))
            for ax0, ax1, ax2, ax3, ax4, rv0_rv1_fused_0, rv0_rv1_fused_1 in T.grid(T.int64(1), T.int64(8), T.int64(28), T.int64(28), T.int64(32), T.int64(4), T.int64(1)):
                with T.block("pool_max_rf"):
                    vrv0_rv1_fused_0, v_ax0, v_ax1, v_ax2, v_ax3, v_ax4, vrv0_rv1_fused_1 = T.axis.remap("SSSSSSR", [rv0_rv1_fused_0, ax0, ax1, ax2, ax3, ax4, rv0_rv1_fused_1])
                    T.reads(p0[v_ax0, v_ax1, v_ax2 * T.int64(2) + (vrv0_rv1_fused_0 + vrv0_rv1_fused_1) // T.int64(2), v_ax3 * T.int64(2) + (vrv0_rv1_fused_0 + vrv0_rv1_fused_1) % T.int64(2), v_ax4])
                    T.writes(pool_max_rf[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4, vrv0_rv1_fused_0])
                    with T.init():
                        pool_max_rf[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4, vrv0_rv1_fused_0] = T.float32(-3.4028234663852886e+38)
                    pool_max_rf[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4, vrv0_rv1_fused_0] = T.max(pool_max_rf[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4, vrv0_rv1_fused_0], p0[v_ax0, v_ax1, v_ax2 * T.int64(2) + (vrv0_rv1_fused_0 + vrv0_rv1_fused_1) // T.int64(2), v_ax3 * T.int64(2) + (vrv0_rv1_fused_0 + vrv0_rv1_fused_1) % T.int64(2), v_ax4])
            for ax0, ax1, ax2, ax3, ax4, rv0_rv1_fused_0 in T.grid(T.int64(1), T.int64(8), T.int64(28), T.int64(28), T.int64(32), T.int64(4)):
                with T.block("pool_max"):
                    vrv0_rv1_fused_0, v_ax0, v_ax1, v_ax2, v_ax3, v_ax4 = T.axis.remap("RSSSSS", [rv0_rv1_fused_0, ax0, ax1, ax2, ax3, ax4])
                    T.reads(pool_max_rf[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4, vrv0_rv1_fused_0])
                    T.writes(pool_max[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                    T.block_attr({"meta_schedule.random_compute_producer": 1})
                    with T.init():
                        pool_max[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.float32(-3.4028234663852886e+38)
                    pool_max[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.max(pool_max[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], pool_max_rf[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4, vrv0_rv1_fused_0])
b0 = sch.get_block(name="pool_max", func_name="main")
b1 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b0, ann_key="schedule_rule")
l2, l3, l4, l5, l6, l7, l8 = sch.get_loops(block=b0)
l9 = sch.fuse(l7, l8, preserve_unit_iters=True)
v10, v11 = sch.sample_perfect_tile(loop=l9, n=2, max_innermost_factor=64, decision=[4, 1])
l12, l13 = sch.split(loop=l9, factors=[v10, v11], preserve_unit_iters=True)
b14 = sch.rfactor(loop=l12, factor_axis=5)
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.random_compute_producer", ann_val=1)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.vectorize", ann_val=64)
v15 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.unroll_explicit", ann_val=v15)
2024-04-28 07:24:49 [INFO] [task_scheduler.cc:170] Design space #1:
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(8), T.int64(56), T.int64(56), T.int64(32)), "float32"), pool_max: T.Buffer((T.int64(1), T.int64(8), T.int64(28), T.int64(28), T.int64(32)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        with T.block("root"):
            T.reads()
            T.writes()
            T.block_attr({"meta_schedule.parallel": 768, "meta_schedule.unroll_explicit": 0, "meta_schedule.vectorize": 64})
            pool_max_rf = T.alloc_buffer((T.int64(1), T.int64(8), T.int64(28), T.int64(28), T.int64(32), T.int64(1)))
            for ax0, ax1, ax2, ax3, ax4, rv0_rv1_fused_0, rv0_rv1_fused_1 in T.grid(T.int64(1), T.int64(8), T.int64(28), T.int64(28), T.int64(32), T.int64(4), T.int64(1)):
                with T.block("pool_max_rf"):
                    vrv0_rv1_fused_1, v_ax0, v_ax1, v_ax2, v_ax3, v_ax4, vrv0_rv1_fused_0 = T.axis.remap("SSSSSSR", [rv0_rv1_fused_1, ax0, ax1, ax2, ax3, ax4, rv0_rv1_fused_0])
                    T.reads(p0[v_ax0, v_ax1, v_ax2 * T.int64(2) + (vrv0_rv1_fused_0 + vrv0_rv1_fused_1) // T.int64(2), v_ax3 * T.int64(2) + (vrv0_rv1_fused_0 + vrv0_rv1_fused_1) % T.int64(2), v_ax4])
                    T.writes(pool_max_rf[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4, vrv0_rv1_fused_1])
                    with T.init():
                        pool_max_rf[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4, vrv0_rv1_fused_1] = T.float32(-3.4028234663852886e+38)
                    pool_max_rf[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4, vrv0_rv1_fused_1] = T.max(pool_max_rf[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4, vrv0_rv1_fused_1], p0[v_ax0, v_ax1, v_ax2 * T.int64(2) + (vrv0_rv1_fused_0 + vrv0_rv1_fused_1) // T.int64(2), v_ax3 * T.int64(2) + (vrv0_rv1_fused_0 + vrv0_rv1_fused_1) % T.int64(2), v_ax4])
            for ax0, ax1, ax2, ax3, ax4, rv0_rv1_fused_1 in T.grid(T.int64(1), T.int64(8), T.int64(28), T.int64(28), T.int64(32), T.int64(1)):
                with T.block("pool_max"):
                    vrv0_rv1_fused_1, v_ax0, v_ax1, v_ax2, v_ax3, v_ax4 = T.axis.remap("RSSSSS", [rv0_rv1_fused_1, ax0, ax1, ax2, ax3, ax4])
                    T.reads(pool_max_rf[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4, vrv0_rv1_fused_1])
                    T.writes(pool_max[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                    T.block_attr({"meta_schedule.random_compute_producer": 1})
                    with T.init():
                        pool_max[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.float32(-3.4028234663852886e+38)
                    pool_max[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.max(pool_max[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], pool_max_rf[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4, vrv0_rv1_fused_1])
b0 = sch.get_block(name="pool_max", func_name="main")
b1 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b0, ann_key="schedule_rule")
l2, l3, l4, l5, l6, l7, l8 = sch.get_loops(block=b0)
l9 = sch.fuse(l7, l8, preserve_unit_iters=True)
v10, v11 = sch.sample_perfect_tile(loop=l9, n=2, max_innermost_factor=64, decision=[4, 1])
l12, l13 = sch.split(loop=l9, factors=[v10, v11], preserve_unit_iters=True)
b14 = sch.rfactor(loop=l13, factor_axis=5)
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.random_compute_producer", ann_val=1)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.vectorize", ann_val=64)
v15 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=0)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.unroll_explicit", ann_val=v15)
2024-04-28 07:24:49 [INFO] [task_scheduler.cc:170] Design space #2:
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(8), T.int64(56), T.int64(56), T.int64(32)), "float32"), pool_max: T.Buffer((T.int64(1), T.int64(8), T.int64(28), T.int64(28), T.int64(32)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        with T.block("root"):
            T.reads()
            T.writes()
            T.block_attr({"meta_schedule.parallel": 768, "meta_schedule.unroll_explicit": 16, "meta_schedule.vectorize": 64})
            for ax0, ax1, ax2, ax3, ax4, rv0, rv1 in T.grid(T.int64(1), T.int64(8), T.int64(28), T.int64(28), T.int64(32), T.int64(2), T.int64(2)):
                with T.block("pool_max"):
                    v_ax0, v_ax1, v_ax2, v_ax3, v_ax4, v_rv0, v_rv1 = T.axis.remap("SSSSSRR", [ax0, ax1, ax2, ax3, ax4, rv0, rv1])
                    T.reads(p0[v_ax0, v_ax1, v_ax2 * T.int64(2) + v_rv0, v_ax3 * T.int64(2) + v_rv1, v_ax4])
                    T.writes(pool_max[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                    with T.init():
                        pool_max[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.float32(-3.4028234663852886e+38)
                    pool_max[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.max(pool_max[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], p0[v_ax0, v_ax1, v_ax2 * T.int64(2) + v_rv0, v_ax3 * T.int64(2) + v_rv1, v_ax4])
b0 = sch.get_block(name="pool_max", func_name="main")
b1 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b0, ann_key="schedule_rule")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.vectorize", ann_val=64)
v2 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=1)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.unroll_explicit", ann_val=v2)
2024-04-28 07:43:16 [INFO] [evolutionary_search.cc:713] Generating candidates......
2024-04-28 07:43:16 [INFO] [evolutionary_search.cc:715] Picked top 0 candidate(s) from database
2024-04-28 07:43:17 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x3182888)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0xa4c75c8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x3870ee8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x30f5398)]: 0 failure(s)
2024-04-28 07:43:17 [INFO] [evolutionary_search.cc:723] Sampled 512 candidate(s)
2024-04-28 07:43:18 [INFO] [evolutionary_search.cc:621] Evolve iter #0 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x3182888)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0xa4c75c8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x3870ee8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x30f5398)]: 0 failure(s)
2024-04-28 07:43:19 [INFO] [evolutionary_search.cc:621] Evolve iter #1 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x3182888)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0xa4c75c8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x3870ee8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x30f5398)]: 0 failure(s)
2024-04-28 07:43:20 [INFO] [evolutionary_search.cc:621] Evolve iter #2 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x3182888)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0xa4c75c8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x3870ee8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x30f5398)]: 0 failure(s)
2024-04-28 07:43:22 [INFO] [evolutionary_search.cc:621] Evolve iter #3 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x3182888)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0xa4c75c8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x3870ee8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x30f5398)]: 0 failure(s)
2024-04-28 07:43:22 [INFO] [evolutionary_search.cc:649] Scores of the best 64 candidates:
[1 : 16]:	0.9680  0.9490  0.8966  0.8832  0.8731  0.8678  0.8306  0.7720  0.7671  0.7574  0.7238  0.6926  0.6676  0.6614  0.6588  0.6126
[17 : 32]:	0.6123  0.6015  0.5797  0.5779  0.5693  0.5426  0.5363  0.5292  0.5273  0.5062  0.5050  0.4827  0.4699  0.4657  0.4477  0.4343
[33 : 48]:	0.4188  0.3967  0.3931  0.3605  0.3595  0.3588  0.3540  0.3529  0.3464  0.3404  0.3378  0.3377  0.3139  0.3049  0.2452  0.2188
[49 : 64]:	0.2187  0.2108  0.2084  0.1599  0.1585  0.1555  0.1540  0.1492  0.1458  0.1441  0.0980  0.0931  0.0857  0.0556  0.0198  0.0170
2024-04-28 07:43:23 [INFO] [evolutionary_search.cc:727] Got 64 candidate(s) with evolutionary search
2024-04-28 07:43:23 [INFO] [evolutionary_search.cc:730] Sending 61 candidates(s) for measurement
2024-04-28 08:27:17 [INFO] [task_scheduler.cc:131] [Task #9: fused_nn_max_pool2d_2] Trial #1: GFLOPs: 15.4209. Time: 52.0603 us. Best GFLOPs: 15.4209
2024-04-28 08:27:17 [INFO] [task_scheduler.cc:131] [Task #9: fused_nn_max_pool2d_2] Trial #2: GFLOPs: 26.0193. Time: 30.8546 us. Best GFLOPs: 26.0193
2024-04-28 08:27:17 [INFO] [task_scheduler.cc:131] [Task #9: fused_nn_max_pool2d_2] Trial #3: GFLOPs: 16.3850. Time: 48.9970 us. Best GFLOPs: 26.0193
2024-04-28 08:27:17 [INFO] [task_scheduler.cc:131] [Task #9: fused_nn_max_pool2d_2] Trial #4: GFLOPs: 5.4916. Time: 146.1905 us. Best GFLOPs: 26.0193
2024-04-28 08:27:17 [INFO] [task_scheduler.cc:131] [Task #9: fused_nn_max_pool2d_2] Trial #5: GFLOPs: 8.0956. Time: 99.1670 us. Best GFLOPs: 26.0193
2024-04-28 08:27:17 [INFO] [task_scheduler.cc:131] [Task #9: fused_nn_max_pool2d_2] Trial #6: GFLOPs: 16.7870. Time: 47.8237 us. Best GFLOPs: 26.0193
2024-04-28 08:27:17 [INFO] [task_scheduler.cc:131] [Task #9: fused_nn_max_pool2d_2] Trial #7: GFLOPs: 4.4180. Time: 181.7143 us. Best GFLOPs: 26.0193
2024-04-28 08:27:17 [INFO] [task_scheduler.cc:131] [Task #9: fused_nn_max_pool2d_2] Trial #8: GFLOPs: 12.8130. Time: 62.6563 us. Best GFLOPs: 26.0193
2024-04-28 08:27:17 [INFO] [task_scheduler.cc:131] [Task #9: fused_nn_max_pool2d_2] Trial #9: GFLOPs: 17.7822. Time: 45.1473 us. Best GFLOPs: 26.0193
2024-04-28 08:27:17 [INFO] [task_scheduler.cc:131] [Task #9: fused_nn_max_pool2d_2] Trial #10: GFLOPs: 25.0046. Time: 32.1067 us. Best GFLOPs: 26.0193
2024-04-28 08:27:17 [INFO] [task_scheduler.cc:131] [Task #9: fused_nn_max_pool2d_2] Trial #11: GFLOPs: 24.8121. Time: 32.3558 us. Best GFLOPs: 26.0193
2024-04-28 08:27:17 [INFO] [task_scheduler.cc:131] [Task #9: fused_nn_max_pool2d_2] Trial #12: GFLOPs: 10.0680. Time: 79.7398 us. Best GFLOPs: 26.0193
2024-04-28 08:27:17 [INFO] [task_scheduler.cc:131] [Task #9: fused_nn_max_pool2d_2] Trial #13: GFLOPs: 11.0954. Time: 72.3555 us. Best GFLOPs: 26.0193
2024-04-28 08:27:17 [INFO] [task_scheduler.cc:131] [Task #9: fused_nn_max_pool2d_2] Trial #14: GFLOPs: 15.7826. Time: 50.8671 us. Best GFLOPs: 26.0193
2024-04-28 08:27:17 [INFO] [task_scheduler.cc:131] [Task #9: fused_nn_max_pool2d_2] Trial #15: GFLOPs: 13.8429. Time: 57.9950 us. Best GFLOPs: 26.0193
2024-04-28 08:27:17 [INFO] [task_scheduler.cc:131] [Task #9: fused_nn_max_pool2d_2] Trial #16: GFLOPs: 3.1715. Time: 253.1325 us. Best GFLOPs: 26.0193
2024-04-28 08:27:17 [INFO] [task_scheduler.cc:131] [Task #9: fused_nn_max_pool2d_2] Trial #17: GFLOPs: 8.8154. Time: 91.0701 us. Best GFLOPs: 26.0193
2024-04-28 08:27:17 [INFO] [task_scheduler.cc:131] [Task #9: fused_nn_max_pool2d_2] Trial #18: GFLOPs: 4.4800. Time: 179.2005 us. Best GFLOPs: 26.0193
2024-04-28 08:27:17 [INFO] [task_scheduler.cc:131] [Task #9: fused_nn_max_pool2d_2] Trial #19: GFLOPs: 18.1456. Time: 44.2430 us. Best GFLOPs: 26.0193
2024-04-28 08:27:17 [INFO] [task_scheduler.cc:131] [Task #9: fused_nn_max_pool2d_2] Trial #20: GFLOPs: 7.1699. Time: 111.9704 us. Best GFLOPs: 26.0193
2024-04-28 08:27:17 [INFO] [task_scheduler.cc:131] [Task #9: fused_nn_max_pool2d_2] Trial #21: GFLOPs: 15.2773. Time: 52.5496 us. Best GFLOPs: 26.0193
2024-04-28 08:27:17 [INFO] [task_scheduler.cc:131] [Task #9: fused_nn_max_pool2d_2] Trial #22: GFLOPs: 17.0391. Time: 47.1161 us. Best GFLOPs: 26.0193
2024-04-28 08:27:17 [INFO] [task_scheduler.cc:131] [Task #9: fused_nn_max_pool2d_2] Trial #23: GFLOPs: 25.2001. Time: 31.8576 us. Best GFLOPs: 26.0193
2024-04-28 08:27:17 [INFO] [task_scheduler.cc:131] [Task #9: fused_nn_max_pool2d_2] Trial #24: GFLOPs: 28.8762. Time: 27.8020 us. Best GFLOPs: 28.8762
2024-04-28 08:27:17 [INFO] [task_scheduler.cc:131] [Task #9: fused_nn_max_pool2d_2] Trial #25: GFLOPs: 16.6141. Time: 48.3213 us. Best GFLOPs: 28.8762
2024-04-28 08:27:17 [INFO] [task_scheduler.cc:131] [Task #9: fused_nn_max_pool2d_2] Trial #26: GFLOPs: 9.9111. Time: 81.0015 us. Best GFLOPs: 28.8762
2024-04-28 08:27:17 [INFO] [task_scheduler.cc:131] [Task #9: fused_nn_max_pool2d_2] Trial #27: GFLOPs: 8.5885. Time: 93.4752 us. Best GFLOPs: 28.8762
2024-04-28 08:27:17 [INFO] [task_scheduler.cc:131] [Task #9: fused_nn_max_pool2d_2] Trial #28: GFLOPs: 1.7852. Time: 449.7056 us. Best GFLOPs: 28.8762
2024-04-28 08:27:17 [INFO] [task_scheduler.cc:131] [Task #9: fused_nn_max_pool2d_2] Trial #29: GFLOPs: 23.0272. Time: 34.8638 us. Best GFLOPs: 28.8762
2024-04-28 08:27:17 [INFO] [task_scheduler.cc:131] [Task #9: fused_nn_max_pool2d_2] Trial #30: GFLOPs: 16.6459. Time: 48.2290 us. Best GFLOPs: 28.8762
2024-04-28 08:27:17 [INFO] [task_scheduler.cc:131] [Task #9: fused_nn_max_pool2d_2] Trial #31: GFLOPs: 27.3375. Time: 29.3668 us. Best GFLOPs: 28.8762
2024-04-28 08:27:17 [INFO] [task_scheduler.cc:131] [Task #9: fused_nn_max_pool2d_2] Trial #32: GFLOPs: 1.8586. Time: 431.9372 us. Best GFLOPs: 28.8762
2024-04-28 08:27:17 [INFO] [task_scheduler.cc:131] [Task #9: fused_nn_max_pool2d_2] Trial #33: GFLOPs: 23.5395. Time: 34.1051 us. Best GFLOPs: 28.8762
2024-04-28 08:27:17 [INFO] [task_scheduler.cc:131] [Task #9: fused_nn_max_pool2d_2] Trial #34: GFLOPs: 12.7087. Time: 63.1706 us. Best GFLOPs: 28.8762
2024-04-28 08:27:17 [INFO] [task_scheduler.cc:131] [Task #9: fused_nn_max_pool2d_2] Trial #35: GFLOPs: 23.1686. Time: 34.6510 us. Best GFLOPs: 28.8762
2024-04-28 08:27:17 [INFO] [task_scheduler.cc:131] [Task #9: fused_nn_max_pool2d_2] Trial #36: GFLOPs: 25.6301. Time: 31.3231 us. Best GFLOPs: 28.8762
2024-04-28 08:27:17 [INFO] [task_scheduler.cc:131] [Task #9: fused_nn_max_pool2d_2] Trial #37: GFLOPs: 6.4681. Time: 124.1184 us. Best GFLOPs: 28.8762
2024-04-28 08:27:17 [INFO] [task_scheduler.cc:131] [Task #9: fused_nn_max_pool2d_2] Trial #38: GFLOPs: 8.1888. Time: 98.0380 us. Best GFLOPs: 28.8762
2024-04-28 08:27:17 [INFO] [task_scheduler.cc:131] [Task #9: fused_nn_max_pool2d_2] Trial #39: GFLOPs: 3.8479. Time: 208.6378 us. Best GFLOPs: 28.8762
2024-04-28 08:27:17 [INFO] [task_scheduler.cc:131] [Task #9: fused_nn_max_pool2d_2] Trial #40: GFLOPs: 26.0565. Time: 30.8106 us. Best GFLOPs: 28.8762
2024-04-28 08:27:17 [INFO] [task_scheduler.cc:131] [Task #9: fused_nn_max_pool2d_2] Trial #41: GFLOPs: 3.2047. Time: 250.5116 us. Best GFLOPs: 28.8762
2024-04-28 08:27:17 [INFO] [task_scheduler.cc:131] [Task #9: fused_nn_max_pool2d_2] Trial #42: GFLOPs: 50.6053. Time: 15.8643 us. Best GFLOPs: 50.6053
2024-04-28 08:27:17 [INFO] [task_scheduler.cc:131] [Task #9: fused_nn_max_pool2d_2] Trial #43: GFLOPs: 13.4338. Time: 59.7610 us. Best GFLOPs: 50.6053
2024-04-28 08:27:17 [INFO] [task_scheduler.cc:131] [Task #9: fused_nn_max_pool2d_2] Trial #44: GFLOPs: 49.4842. Time: 16.2237 us. Best GFLOPs: 50.6053
2024-04-28 08:27:17 [INFO] [task_scheduler.cc:131] [Task #9: fused_nn_max_pool2d_2] Trial #45: GFLOPs: 26.0656. Time: 30.7999 us. Best GFLOPs: 50.6053
2024-04-28 08:27:17 [INFO] [task_scheduler.cc:131] [Task #9: fused_nn_max_pool2d_2] Trial #46: GFLOPs: 25.3732. Time: 31.6403 us. Best GFLOPs: 50.6053
2024-04-28 08:27:17 [INFO] [task_scheduler.cc:131] [Task #9: fused_nn_max_pool2d_2] Trial #47: GFLOPs: 13.0591. Time: 61.4756 us. Best GFLOPs: 50.6053
2024-04-28 08:27:17 [INFO] [task_scheduler.cc:131] [Task #9: fused_nn_max_pool2d_2] Trial #48: GFLOPs: 21.0748. Time: 38.0936 us. Best GFLOPs: 50.6053
2024-04-28 08:27:17 [INFO] [task_scheduler.cc:131] [Task #9: fused_nn_max_pool2d_2] Trial #49: GFLOPs: 8.9769. Time: 89.4318 us. Best GFLOPs: 50.6053
2024-04-28 08:27:17 [INFO] [task_scheduler.cc:131] [Task #9: fused_nn_max_pool2d_2] Trial #50: GFLOPs: 20.8909. Time: 38.4290 us. Best GFLOPs: 50.6053
2024-04-28 08:27:17 [INFO] [task_scheduler.cc:131] [Task #9: fused_nn_max_pool2d_2] Trial #51: GFLOPs: 16.5812. Time: 48.4174 us. Best GFLOPs: 50.6053
2024-04-28 08:27:17 [INFO] [task_scheduler.cc:131] [Task #9: fused_nn_max_pool2d_2] Trial #52: GFLOPs: 14.7723. Time: 54.3459 us. Best GFLOPs: 50.6053
2024-04-28 08:27:17 [INFO] [task_scheduler.cc:131] [Task #9: fused_nn_max_pool2d_2] Trial #53: GFLOPs: 7.0631. Time: 113.6639 us. Best GFLOPs: 50.6053
2024-04-28 08:27:17 [INFO] [task_scheduler.cc:131] [Task #9: fused_nn_max_pool2d_2] Trial #54: GFLOPs: 50.3373. Time: 15.9487 us. Best GFLOPs: 50.6053
2024-04-28 08:27:17 [INFO] [task_scheduler.cc:131] [Task #9: fused_nn_max_pool2d_2] Trial #55: GFLOPs: 3.2132. Time: 249.8523 us. Best GFLOPs: 50.6053
2024-04-28 08:27:17 [INFO] [task_scheduler.cc:131] [Task #9: fused_nn_max_pool2d_2] Trial #56: GFLOPs: 2.1343. Time: 376.1415 us. Best GFLOPs: 50.6053
2024-04-28 08:27:17 [INFO] [task_scheduler.cc:131] [Task #9: fused_nn_max_pool2d_2] Trial #57: GFLOPs: 23.7439. Time: 33.8115 us. Best GFLOPs: 50.6053
2024-04-28 08:27:17 [INFO] [task_scheduler.cc:131] [Task #9: fused_nn_max_pool2d_2] Trial #58: GFLOPs: 16.4381. Time: 48.8387 us. Best GFLOPs: 50.6053
2024-04-28 08:27:17 [INFO] [task_scheduler.cc:131] [Task #9: fused_nn_max_pool2d_2] Trial #59: GFLOPs: 48.9498. Time: 16.4008 us. Best GFLOPs: 50.6053
2024-04-28 08:27:17 [INFO] [task_scheduler.cc:131] [Task #9: fused_nn_max_pool2d_2] Trial #60: GFLOPs: 13.9250. Time: 57.6528 us. Best GFLOPs: 50.6053
2024-04-28 08:27:17 [INFO] [task_scheduler.cc:131] [Task #9: fused_nn_max_pool2d_2] Trial #61: GFLOPs: 5.8940. Time: 136.2100 us. Best GFLOPs: 50.6053
