2024-04-28 19:50:00 [INFO] [task_scheduler.cc:160] Initializing Task #5: "fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3"
2024-04-28 19:50:00 [INFO] [task_scheduler.cc:35] 
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(256), T.int64(56), T.int64(56)), "float32"), p1: T.Buffer((T.int64(6), T.int64(6), T.int64(256), T.int64(256)), "float32"), p2: T.Buffer((T.int64(1), T.int64(256), T.int64(1), T.int64(1)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(256), T.int64(56), T.int64(56)), "float32")):
        T.func_attr({"layout_free_buffers": [1], "tir.noalias": T.bool(True)})
        # with T.block("root"):
        data_pad = T.alloc_buffer((T.int64(1), T.int64(256), T.int64(58), T.int64(58)))
        input_tile = T.alloc_buffer((T.int64(256), T.int64(196), T.int64(6), T.int64(6)))
        B = T.alloc_buffer((T.int64(6), T.int64(6)))
        data_pack = T.alloc_buffer((T.int64(6), T.int64(6), T.int64(256), T.int64(196)))
        bgemm = T.alloc_buffer((T.int64(6), T.int64(6), T.int64(256), T.int64(196)))
        A = T.alloc_buffer((T.int64(6), T.int64(4)))
        inverse = T.alloc_buffer((T.int64(256), T.int64(196), T.int64(4), T.int64(4)))
        conv2d_winograd = T.alloc_buffer((T.int64(1), T.int64(256), T.int64(56), T.int64(56)))
        T_add = T.alloc_buffer((T.int64(1), T.int64(256), T.int64(56), T.int64(56)))
        for i0, i1, i2, i3 in T.grid(T.int64(1), T.int64(256), T.int64(58), T.int64(58)):
            with T.block("data_pad"):
                v_i0, v_i1, v_i2, v_i3 = T.axis.remap("SSSS", [i0, i1, i2, i3])
                T.reads(p0[v_i0, v_i1, v_i2 - T.int64(1), v_i3 - T.int64(1)])
                T.writes(data_pad[v_i0, v_i1, v_i2, v_i3])
                data_pad[v_i0, v_i1, v_i2, v_i3] = T.if_then_else(T.int64(1) <= v_i2 and v_i2 < T.int64(57) and T.int64(1) <= v_i3 and v_i3 < T.int64(57), p0[v_i0, v_i1, v_i2 - T.int64(1), v_i3 - T.int64(1)], T.float32(0))
        for ci, p, eps, nu in T.grid(T.int64(256), T.int64(196), T.int64(6), T.int64(6)):
            with T.block("input_tile"):
                v_ci, v_p, v_eps, v_nu = T.axis.remap("SSSS", [ci, p, eps, nu])
                T.reads(data_pad[v_p // T.int64(196), v_ci, v_p % T.int64(196) // T.int64(14) * T.int64(4) + v_eps, v_p % T.int64(14) * T.int64(4) + v_nu])
                T.writes(input_tile[v_ci, v_p, v_eps, v_nu])
                T.block_attr({"schedule_rule": "None"})
                input_tile[v_ci, v_p, v_eps, v_nu] = data_pad[v_p // T.int64(196), v_ci, v_p % T.int64(196) // T.int64(14) * T.int64(4) + v_eps, v_p % T.int64(14) * T.int64(4) + v_nu]
        for i, j in T.grid(T.int64(6), T.int64(6)):
            with T.block("B"):
                v_i, v_j = T.axis.remap("SS", [i, j])
                T.reads()
                T.writes(B[v_i, v_j])
                T.block_attr({"schedule_rule": "None"})
                B[v_i, v_j] = T.Select(v_i % T.int64(6) == T.int64(5) and v_j % T.int64(6) == T.int64(5), T.float32(1), T.Select(v_i % T.int64(6) == T.int64(5) and v_j % T.int64(6) == T.int64(4), T.float32(0), T.Select(v_i % T.int64(6) == T.int64(5) and v_j % T.int64(6) == T.int64(3), T.float32(0), T.Select(v_i % T.int64(6) == T.int64(5) and v_j % T.int64(6) == T.int64(2), T.float32(0), T.Select(v_i % T.int64(6) == T.int64(5) and v_j % T.int64(6) == T.int64(1), T.float32(0), T.Select(v_i % T.int64(6) == T.int64(5) and v_j % T.int64(6) == T.int64(0), T.float32(0), T.Select(v_i % T.int64(6) == T.int64(4) and v_j % T.int64(6) == T.int64(5), T.float32(1.5), T.Select(v_i % T.int64(6) == T.int64(4) and v_j % T.int64(6) == T.int64(4), T.float32(1), T.Select(v_i % T.int64(6) == T.int64(4) and v_j % T.int64(6) == T.int64(3), T.float32(1), T.Select(v_i % T.int64(6) == T.int64(4) and v_j % T.int64(6) == T.int64(2), T.float32(1), T.Select(v_i % T.int64(6) == T.int64(4) and v_j % T.int64(6) == T.int64(1), T.float32(1), T.Select(v_i % T.int64(6) == T.int64(4) and v_j % T.int64(6) == T.int64(0), T.float32(1), T.Select(v_i % T.int64(6) == T.int64(3) and v_j % T.int64(6) == T.int64(5), T.float32(-2), T.Select(v_i % T.int64(6) == T.int64(3) and v_j % T.int64(6) == T.int64(4), T.float32(-0.5), T.Select(v_i % T.int64(6) == T.int64(3) and v_j % T.int64(6) == T.int64(3), T.float32(2), T.Select(v_i % T.int64(6) == T.int64(3) and v_j % T.int64(6) == T.int64(2), T.float32(2.5), T.Select(v_i % T.int64(6) == T.int64(3) and v_j % T.int64(6) == T.int64(1), T.float32(0.5), T.Select(v_i % T.int64(6) == T.int64(3) and v_j % T.int64(6) == T.int64(0), T.float32(1.5), T.Select(v_i % T.int64(6) == T.int64(2) and v_j % T.int64(6) == T.int64(5), T.float32(-1.5), T.Select(v_i % T.int64(6) == T.int64(2) and v_j % T.int64(6) == T.int64(4), T.float32(-1), T.Select(v_i % T.int64(6) == T.int64(2) and v_j % T.int64(6) == T.int64(3), T.float32(-1), T.Select(v_i % T.int64(6) == T.int64(2) and v_j % T.int64(6) == T.int64(2), T.float32(0.5), T.Select(v_i % T.int64(6) == T.int64(2) and v_j % T.int64(6) == T.int64(1), T.float32(-2.5), T.Select(v_i % T.int64(6) == T.int64(2) and v_j % T.int64(6) == T.int64(0), T.float32(-2), T.Select(v_i % T.int64(6) == T.int64(1) and v_j % T.int64(6) == T.int64(5), T.float32(1), T.Select(v_i % T.int64(6) == T.int64(1) and v_j % T.int64(6) == T.int64(4), T.float32(0.5), T.Select(v_i % T.int64(6) == T.int64(1) and v_j % T.int64(6) == T.int64(3), T.float32(-2), T.Select(v_i % T.int64(6) == T.int64(1) and v_j % T.int64(6) == T.int64(2), T.float32(-1), T.Select(v_i % T.int64(6) == T.int64(1) and v_j % T.int64(6) == T.int64(1), T.float32(1), T.Select(v_i % T.int64(6) == T.int64(1) and v_j % T.int64(6) == T.int64(0), T.float32(-1.5), T.Select(v_i % T.int64(6) == T.int64(0) and v_j % T.int64(6) == T.int64(5), T.float32(0), T.Select(v_i % T.int64(6) == T.int64(0) and v_j % T.int64(6) == T.int64(4), T.float32(0), T.Select(v_i % T.int64(6) == T.int64(0) and v_j % T.int64(6) == T.int64(3), T.float32(0), T.Select(v_i % T.int64(6) == T.int64(0) and v_j % T.int64(6) == T.int64(2), T.float32(0), T.Select(v_i % T.int64(6) == T.int64(0) and v_j % T.int64(6) == T.int64(1), T.float32(0), T.Select(v_i % T.int64(6) == T.int64(0) and v_j % T.int64(6) == T.int64(0), T.float32(1), T.float32(0)))))))))))))))))))))))))))))))))))))
        for eps, nu, ci, p, r_a, r_b in T.grid(T.int64(6), T.int64(6), T.int64(256), T.int64(196), T.int64(6), T.int64(6)):
            with T.block("data_pack"):
                v_eps, v_nu, v_ci, v_p, v_r_a, v_r_b = T.axis.remap("SSSSRR", [eps, nu, ci, p, r_a, r_b])
                T.reads(input_tile[v_ci, v_p, v_r_a, v_r_b], B[T.min(v_r_a, v_r_b):T.min(v_r_a, v_r_b) + (T.max(v_r_a, v_r_b) + T.int64(1) - T.min(v_r_a, v_r_b)), T.min(v_eps, v_nu):T.min(v_eps, v_nu) + (T.max(v_eps, v_nu) + T.int64(1) - T.min(v_eps, v_nu))])
                T.writes(data_pack[v_eps, v_nu, v_ci, v_p])
                T.block_attr({"schedule_rule": "conv2d_nchw_winograd_data_pack"})
                with T.init():
                    data_pack[v_eps, v_nu, v_ci, v_p] = T.float32(0)
                data_pack[v_eps, v_nu, v_ci, v_p] = data_pack[v_eps, v_nu, v_ci, v_p] + input_tile[v_ci, v_p, v_r_a, v_r_b] * B[v_r_a, v_eps] * B[v_r_b, v_nu]
        for eps, nu, co, p, ci in T.grid(T.int64(6), T.int64(6), T.int64(256), T.int64(196), T.int64(256)):
            with T.block("bgemm"):
                v_eps, v_nu, v_co, v_p, v_ci = T.axis.remap("SSSSR", [eps, nu, co, p, ci])
                T.reads(data_pack[v_eps, v_nu, v_ci, v_p], p1[v_eps, v_nu, v_ci, v_co])
                T.writes(bgemm[v_eps, v_nu, v_co, v_p])
                with T.init():
                    bgemm[v_eps, v_nu, v_co, v_p] = T.float32(0)
                bgemm[v_eps, v_nu, v_co, v_p] = bgemm[v_eps, v_nu, v_co, v_p] + data_pack[v_eps, v_nu, v_ci, v_p] * p1[v_eps, v_nu, v_ci, v_co]
        for i, j in T.grid(T.int64(6), T.int64(4)):
            with T.block("A"):
                v_i, v_j = T.axis.remap("SS", [i, j])
                T.reads()
                T.writes(A[v_i, v_j])
                T.block_attr({"schedule_rule": "None"})
                A[v_i, v_j] = T.Select(v_i % T.int64(6) == T.int64(5) and v_j % T.int64(4) == T.int64(3), T.float32(1), T.Select(v_i % T.int64(6) == T.int64(5) and v_j % T.int64(4) == T.int64(2), T.float32(0), T.Select(v_i % T.int64(6) == T.int64(5) and v_j % T.int64(4) == T.int64(1), T.float32(0), T.Select(v_i % T.int64(6) == T.int64(5) and v_j % T.int64(4) == T.int64(0), T.float32(0), T.Select(v_i % T.int64(6) == T.int64(4) and v_j % T.int64(4) == T.int64(3), T.float32(-8), T.Select(v_i % T.int64(6) == T.int64(4) and v_j % T.int64(4) == T.int64(2), T.float32(4), T.Select(v_i % T.int64(6) == T.int64(4) and v_j % T.int64(4) == T.int64(1), T.float32(-2), T.Select(v_i % T.int64(6) == T.int64(4) and v_j % T.int64(4) == T.int64(0), T.float32(1), T.Select(v_i % T.int64(6) == T.int64(3) and v_j % T.int64(4) == T.int64(3), T.float32(0.125), T.Select(v_i % T.int64(6) == T.int64(3) and v_j % T.int64(4) == T.int64(2), T.float32(0.25), T.Select(v_i % T.int64(6) == T.int64(3) and v_j % T.int64(4) == T.int64(1), T.float32(0.5), T.Select(v_i % T.int64(6) == T.int64(3) and v_j % T.int64(4) == T.int64(0), T.float32(1), T.Select(v_i % T.int64(6) == T.int64(2) and v_j % T.int64(4) == T.int64(3), T.float32(1), T.Select(v_i % T.int64(6) == T.int64(2) and v_j % T.int64(4) == T.int64(2), T.float32(1), T.Select(v_i % T.int64(6) == T.int64(2) and v_j % T.int64(4) == T.int64(1), T.float32(1), T.Select(v_i % T.int64(6) == T.int64(2) and v_j % T.int64(4) == T.int64(0), T.float32(1), T.Select(v_i % T.int64(6) == T.int64(1) and v_j % T.int64(4) == T.int64(3), T.float32(-1), T.Select(v_i % T.int64(6) == T.int64(1) and v_j % T.int64(4) == T.int64(2), T.float32(1), T.Select(v_i % T.int64(6) == T.int64(1) and v_j % T.int64(4) == T.int64(1), T.float32(-1), T.Select(v_i % T.int64(6) == T.int64(1) and v_j % T.int64(4) == T.int64(0), T.float32(1), T.Select(v_i % T.int64(6) == T.int64(0) and v_j % T.int64(4) == T.int64(3), T.float32(0), T.Select(v_i % T.int64(6) == T.int64(0) and v_j % T.int64(4) == T.int64(2), T.float32(0), T.Select(v_i % T.int64(6) == T.int64(0) and v_j % T.int64(4) == T.int64(1), T.float32(0), T.Select(v_i % T.int64(6) == T.int64(0) and v_j % T.int64(4) == T.int64(0), T.float32(1), T.float32(0)))))))))))))))))))))))))
        for co, p, vh, vw, r_a, r_b in T.grid(T.int64(256), T.int64(196), T.int64(4), T.int64(4), T.int64(6), T.int64(6)):
            with T.block("inverse"):
                v_co, v_p, v_vh, v_vw, v_r_a, v_r_b = T.axis.remap("SSSSRR", [co, p, vh, vw, r_a, r_b])
                T.reads(bgemm[v_r_a, v_r_b, v_co, v_p], A[T.min(v_r_a, v_r_b):T.min(v_r_a, v_r_b) + (T.max(v_r_a, v_r_b) + T.int64(1) - T.min(v_r_a, v_r_b)), T.min(v_vh, v_vw):T.min(v_vh, v_vw) + (T.max(v_vh, v_vw) + T.int64(1) - T.min(v_vh, v_vw))])
                T.writes(inverse[v_co, v_p, v_vh, v_vw])
                T.block_attr({"schedule_rule": "conv2d_nchw_winograd_inverse"})
                with T.init():
                    inverse[v_co, v_p, v_vh, v_vw] = T.float32(0)
                inverse[v_co, v_p, v_vh, v_vw] = inverse[v_co, v_p, v_vh, v_vw] + bgemm[v_r_a, v_r_b, v_co, v_p] * A[v_r_a, v_vh] * A[v_r_b, v_vw]
        for n, co, h, w in T.grid(T.int64(1), T.int64(256), T.int64(56), T.int64(56)):
            with T.block("conv2d_winograd"):
                v_n, v_co, v_h, v_w = T.axis.remap("SSSS", [n, co, h, w])
                T.reads(inverse[v_co, v_n * T.int64(196) + v_h // T.int64(4) * T.int64(14) + v_w // T.int64(4), v_h % T.int64(4), v_w % T.int64(4)])
                T.writes(conv2d_winograd[v_n, v_co, v_h, v_w])
                conv2d_winograd[v_n, v_co, v_h, v_w] = inverse[v_co, v_n * T.int64(196) + v_h // T.int64(4) * T.int64(14) + v_w // T.int64(4), v_h % T.int64(4), v_w % T.int64(4)]
        for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(256), T.int64(56), T.int64(56)):
            with T.block("T_add"):
                v_ax0, v_ax1, v_ax2, v_ax3 = T.axis.remap("SSSS", [ax0, ax1, ax2, ax3])
                T.reads(conv2d_winograd[v_ax0, v_ax1, v_ax2, v_ax3], p2[v_ax0, v_ax1, T.int64(0), T.int64(0)])
                T.writes(T_add[v_ax0, v_ax1, v_ax2, v_ax3])
                T_add[v_ax0, v_ax1, v_ax2, v_ax3] = conv2d_winograd[v_ax0, v_ax1, v_ax2, v_ax3] + p2[v_ax0, v_ax1, T.int64(0), T.int64(0)]
        for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(256), T.int64(56), T.int64(56)):
            with T.block("T_relu"):
                v_ax0, v_ax1, v_ax2, v_ax3 = T.axis.remap("SSSS", [ax0, ax1, ax2, ax3])
                T.reads(T_add[v_ax0, v_ax1, v_ax2, v_ax3])
                T.writes(T_relu[v_ax0, v_ax1, v_ax2, v_ax3])
                T_relu[v_ax0, v_ax1, v_ax2, v_ax3] = T.max(T_add[v_ax0, v_ax1, v_ax2, v_ax3], T.float32(0))
2024-04-28 19:50:00 [INFO] [task_scheduler.cc:164] Total 3 design space(s) generated
2024-04-28 19:50:00 [INFO] [task_scheduler.cc:170] Design space #0:
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(256), T.int64(56), T.int64(56)), "float32"), p1: T.Buffer((T.int64(6), T.int64(6), T.int64(256), T.int64(256)), "float32"), p2: T.Buffer((T.int64(1), T.int64(256), T.int64(1), T.int64(1)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(256), T.int64(56), T.int64(56)), "float32")):
        T.func_attr({"layout_free_buffers": [1], "tir.noalias": T.bool(True)})
        with T.block("root"):
            T.reads()
            T.writes()
            T.block_attr({"meta_schedule.unroll_explicit": 64})
            input_tile_local = T.alloc_buffer((T.int64(256), T.int64(196), T.int64(6), T.int64(6)), scope="local")
            data_pack = T.alloc_buffer((T.int64(6), T.int64(6), T.int64(256), T.int64(196)))
            bgemm = T.alloc_buffer((T.int64(6), T.int64(6), T.int64(256), T.int64(196)))
            inverse_local = T.alloc_buffer((T.int64(256), T.int64(196), T.int64(4), T.int64(4)), scope="local")
            data_pack_local = T.alloc_buffer((T.int64(6), T.int64(6), T.int64(256), T.int64(196)), scope="local")
            bgemm_local = T.alloc_buffer((T.int64(6), T.int64(6), T.int64(256), T.int64(196)), scope="local")
            data_pack_shared = T.alloc_buffer((T.int64(6), T.int64(6), T.int64(256), T.int64(196)), scope="shared")
            p1_shared = T.alloc_buffer((T.int64(6), T.int64(6), T.int64(256), T.int64(256)), scope="shared")
            for ci_p_fused_0 in T.thread_binding(T.int64(196), thread="blockIdx.x"):
                for ci_p_fused_1 in T.thread_binding(T.int64(256), thread="threadIdx.x"):
                    for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(1), T.int64(6), T.int64(6)):
                        with T.block("input_tile"):
                            v_ci = T.axis.spatial(T.int64(256), (ci_p_fused_0 * T.int64(256) + ci_p_fused_1) // T.int64(196) + ax0)
                            v_p = T.axis.spatial(T.int64(196), (ci_p_fused_0 * T.int64(60) + ci_p_fused_1) % T.int64(196) + ax1)
                            v_eps, v_nu = T.axis.remap("SS", [ax2, ax3])
                            T.reads(p0[v_p // T.int64(196), v_ci, v_p % T.int64(196) // T.int64(14) * T.int64(4) + v_eps - T.int64(1), v_p % T.int64(14) * T.int64(4) + v_nu - T.int64(1)])
                            T.writes(input_tile_local[v_ci, v_p, v_eps, v_nu])
                            T.block_attr({"schedule_rule": "None"})
                            input_tile_local[v_ci, v_p, v_eps, v_nu] = T.if_then_else(T.int64(1) <= v_p % T.int64(196) // T.int64(14) * T.int64(4) + v_eps and v_p % T.int64(196) // T.int64(14) * T.int64(4) + v_eps < T.int64(57) and T.int64(1) <= v_p % T.int64(14) * T.int64(4) + v_nu and v_p % T.int64(14) * T.int64(4) + v_nu < T.int64(57), p0[v_p // T.int64(196), v_ci, v_p % T.int64(196) // T.int64(14) * T.int64(4) + v_eps - T.int64(1), v_p % T.int64(14) * T.int64(4) + v_nu - T.int64(1)], T.float32(0))
                    for eps in T.unroll(T.int64(6)):
                        for nu in T.unroll(T.int64(6)):
                            for r_a in T.unroll(T.int64(6)):
                                for r_b in T.unroll(T.int64(6)):
                                    with T.block("data_pack"):
                                        v_eps, v_nu = T.axis.remap("SS", [eps, nu])
                                        v_ci = T.axis.spatial(T.int64(256), (ci_p_fused_0 * T.int64(256) + ci_p_fused_1) // T.int64(196))
                                        v_p = T.axis.spatial(T.int64(196), (ci_p_fused_0 * T.int64(256) + ci_p_fused_1) % T.int64(196))
                                        v_r_a, v_r_b = T.axis.remap("RR", [r_a, r_b])
                                        T.reads(input_tile_local[v_ci, v_p, v_r_a, v_r_b])
                                        T.writes(data_pack_local[v_eps, v_nu, v_ci, v_p])
                                        T.block_attr({"schedule_rule": "conv2d_nchw_winograd_data_pack"})
                                        with T.init():
                                            data_pack_local[v_eps, v_nu, v_ci, v_p] = T.float32(0)
                                        data_pack_local[v_eps, v_nu, v_ci, v_p] = data_pack_local[v_eps, v_nu, v_ci, v_p] + input_tile_local[v_ci, v_p, v_r_a, v_r_b] * T.Select(v_r_a % T.int64(6) == T.int64(5) and v_eps % T.int64(6) == T.int64(5), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(5) and v_eps % T.int64(6) == T.int64(4), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(5) and v_eps % T.int64(6) == T.int64(3), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(5) and v_eps % T.int64(6) == T.int64(2), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(5) and v_eps % T.int64(6) == T.int64(1), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(5) and v_eps % T.int64(6) == T.int64(0), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(4) and v_eps % T.int64(6) == T.int64(5), T.float32(1.5), T.Select(v_r_a % T.int64(6) == T.int64(4) and v_eps % T.int64(6) == T.int64(4), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(4) and v_eps % T.int64(6) == T.int64(3), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(4) and v_eps % T.int64(6) == T.int64(2), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(4) and v_eps % T.int64(6) == T.int64(1), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(4) and v_eps % T.int64(6) == T.int64(0), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(3) and v_eps % T.int64(6) == T.int64(5), T.float32(-2), T.Select(v_r_a % T.int64(6) == T.int64(3) and v_eps % T.int64(6) == T.int64(4), T.float32(-0.5), T.Select(v_r_a % T.int64(6) == T.int64(3) and v_eps % T.int64(6) == T.int64(3), T.float32(2), T.Select(v_r_a % T.int64(6) == T.int64(3) and v_eps % T.int64(6) == T.int64(2), T.float32(2.5), T.Select(v_r_a % T.int64(6) == T.int64(3) and v_eps % T.int64(6) == T.int64(1), T.float32(0.5), T.Select(v_r_a % T.int64(6) == T.int64(3) and v_eps % T.int64(6) == T.int64(0), T.float32(1.5), T.Select(v_r_a % T.int64(6) == T.int64(2) and v_eps % T.int64(6) == T.int64(5), T.float32(-1.5), T.Select(v_r_a % T.int64(6) == T.int64(2) and v_eps % T.int64(6) == T.int64(4), T.float32(-1), T.Select(v_r_a % T.int64(6) == T.int64(2) and v_eps % T.int64(6) == T.int64(3), T.float32(-1), T.Select(v_r_a % T.int64(6) == T.int64(2) and v_eps % T.int64(6) == T.int64(2), T.float32(0.5), T.Select(v_r_a % T.int64(6) == T.int64(2) and v_eps % T.int64(6) == T.int64(1), T.float32(-2.5), T.Select(v_r_a % T.int64(6) == T.int64(2) and v_eps % T.int64(6) == T.int64(0), T.float32(-2), T.Select(v_r_a % T.int64(6) == T.int64(1) and v_eps % T.int64(6) == T.int64(5), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(1) and v_eps % T.int64(6) == T.int64(4), T.float32(0.5), T.Select(v_r_a % T.int64(6) == T.int64(1) and v_eps % T.int64(6) == T.int64(3), T.float32(-2), T.Select(v_r_a % T.int64(6) == T.int64(1) and v_eps % T.int64(6) == T.int64(2), T.float32(-1), T.Select(v_r_a % T.int64(6) == T.int64(1) and v_eps % T.int64(6) == T.int64(1), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(1) and v_eps % T.int64(6) == T.int64(0), T.float32(-1.5), T.Select(v_r_a % T.int64(6) == T.int64(0) and v_eps % T.int64(6) == T.int64(5), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(0) and v_eps % T.int64(6) == T.int64(4), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(0) and v_eps % T.int64(6) == T.int64(3), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(0) and v_eps % T.int64(6) == T.int64(2), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(0) and v_eps % T.int64(6) == T.int64(1), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(0) and v_eps % T.int64(6) == T.int64(0), T.float32(1), T.float32(0))))))))))))))))))))))))))))))))))))) * T.Select(v_r_b % T.int64(6) == T.int64(5) and v_nu % T.int64(6) == T.int64(5), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(5) and v_nu % T.int64(6) == T.int64(4), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(5) and v_nu % T.int64(6) == T.int64(3), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(5) and v_nu % T.int64(6) == T.int64(2), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(5) and v_nu % T.int64(6) == T.int64(1), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(5) and v_nu % T.int64(6) == T.int64(0), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(4) and v_nu % T.int64(6) == T.int64(5), T.float32(1.5), T.Select(v_r_b % T.int64(6) == T.int64(4) and v_nu % T.int64(6) == T.int64(4), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(4) and v_nu % T.int64(6) == T.int64(3), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(4) and v_nu % T.int64(6) == T.int64(2), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(4) and v_nu % T.int64(6) == T.int64(1), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(4) and v_nu % T.int64(6) == T.int64(0), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(3) and v_nu % T.int64(6) == T.int64(5), T.float32(-2), T.Select(v_r_b % T.int64(6) == T.int64(3) and v_nu % T.int64(6) == T.int64(4), T.float32(-0.5), T.Select(v_r_b % T.int64(6) == T.int64(3) and v_nu % T.int64(6) == T.int64(3), T.float32(2), T.Select(v_r_b % T.int64(6) == T.int64(3) and v_nu % T.int64(6) == T.int64(2), T.float32(2.5), T.Select(v_r_b % T.int64(6) == T.int64(3) and v_nu % T.int64(6) == T.int64(1), T.float32(0.5), T.Select(v_r_b % T.int64(6) == T.int64(3) and v_nu % T.int64(6) == T.int64(0), T.float32(1.5), T.Select(v_r_b % T.int64(6) == T.int64(2) and v_nu % T.int64(6) == T.int64(5), T.float32(-1.5), T.Select(v_r_b % T.int64(6) == T.int64(2) and v_nu % T.int64(6) == T.int64(4), T.float32(-1), T.Select(v_r_b % T.int64(6) == T.int64(2) and v_nu % T.int64(6) == T.int64(3), T.float32(-1), T.Select(v_r_b % T.int64(6) == T.int64(2) and v_nu % T.int64(6) == T.int64(2), T.float32(0.5), T.Select(v_r_b % T.int64(6) == T.int64(2) and v_nu % T.int64(6) == T.int64(1), T.float32(-2.5), T.Select(v_r_b % T.int64(6) == T.int64(2) and v_nu % T.int64(6) == T.int64(0), T.float32(-2), T.Select(v_r_b % T.int64(6) == T.int64(1) and v_nu % T.int64(6) == T.int64(5), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(1) and v_nu % T.int64(6) == T.int64(4), T.float32(0.5), T.Select(v_r_b % T.int64(6) == T.int64(1) and v_nu % T.int64(6) == T.int64(3), T.float32(-2), T.Select(v_r_b % T.int64(6) == T.int64(1) and v_nu % T.int64(6) == T.int64(2), T.float32(-1), T.Select(v_r_b % T.int64(6) == T.int64(1) and v_nu % T.int64(6) == T.int64(1), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(1) and v_nu % T.int64(6) == T.int64(0), T.float32(-1.5), T.Select(v_r_b % T.int64(6) == T.int64(0) and v_nu % T.int64(6) == T.int64(5), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(0) and v_nu % T.int64(6) == T.int64(4), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(0) and v_nu % T.int64(6) == T.int64(3), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(0) and v_nu % T.int64(6) == T.int64(2), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(0) and v_nu % T.int64(6) == T.int64(1), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(0) and v_nu % T.int64(6) == T.int64(0), T.float32(1), T.float32(0)))))))))))))))))))))))))))))))))))))
                    for ax0, ax1, ax2, ax3 in T.grid(T.int64(6), T.int64(6), T.int64(1), T.int64(1)):
                        with T.block("data_pack_local"):
                            v0, v1 = T.axis.remap("SS", [ax0, ax1])
                            v2 = T.axis.spatial(T.int64(256), (ci_p_fused_0 * T.int64(256) + ci_p_fused_1) // T.int64(196) + ax2)
                            v3 = T.axis.spatial(T.int64(196), (ci_p_fused_0 * T.int64(60) + ci_p_fused_1) % T.int64(196) + ax3)
                            T.reads(data_pack_local[v0, v1, v2, v3])
                            T.writes(data_pack[v0, v1, v2, v3])
                            data_pack[v0, v1, v2, v3] = data_pack_local[v0, v1, v2, v3]
            for eps_0_nu_0_co_0_p_0_fused in T.thread_binding(T.int64(4), thread="blockIdx.x"):
                for eps_1_nu_1_co_1_p_1_fused in T.thread_binding(T.int64(32), thread="vthread.x"):
                    for eps_2_nu_2_co_2_p_2_fused in T.thread_binding(T.int64(196), thread="threadIdx.x"):
                        for ci_0 in range(T.int64(8)):
                            for ax0_ax1_ax2_ax3_fused in range(T.int64(225792)):
                                with T.block("data_pack_shared"):
                                    v0 = T.axis.spatial(T.int64(6), ax0_ax1_ax2_ax3_fused // T.int64(37632))
                                    v1 = T.axis.spatial(T.int64(6), ax0_ax1_ax2_ax3_fused % T.int64(37632) // T.int64(6272))
                                    v2 = T.axis.spatial(T.int64(256), ci_0 * T.int64(32) + ax0_ax1_ax2_ax3_fused % T.int64(6272) // T.int64(196))
                                    v3 = T.axis.spatial(T.int64(196), ax0_ax1_ax2_ax3_fused % T.int64(196))
                                    T.reads(data_pack[v0, v1, v2, v3])
                                    T.writes(data_pack_shared[v0, v1, v2, v3])
                                    T.block_attr({"meta_schedule.cooperative_fetch": 1})
                                    data_pack_shared[v0, v1, v2, v3] = data_pack[v0, v1, v2, v3]
                            for ax0_ax1_ax2_ax3_fused in range(T.int64(73728)):
                                with T.block("p1_shared"):
                                    v0 = T.axis.spatial(T.int64(6), ax0_ax1_ax2_ax3_fused // T.int64(12288))
                                    v1 = T.axis.spatial(T.int64(6), ax0_ax1_ax2_ax3_fused % T.int64(12288) // T.int64(2048))
                                    v2 = T.axis.spatial(T.int64(256), ci_0 * T.int64(32) + ax0_ax1_ax2_ax3_fused % T.int64(2048) // T.int64(64))
                                    v3 = T.axis.spatial(T.int64(256), eps_0_nu_0_co_0_p_0_fused * T.int64(64) + ax0_ax1_ax2_ax3_fused % T.int64(64))
                                    T.reads(p1[v0, v1, v2, v3])
                                    T.writes(p1_shared[v0, v1, v2, v3])
                                    T.block_attr({"meta_schedule.cooperative_fetch": 3})
                                    p1_shared[v0, v1, v2, v3] = p1[v0, v1, v2, v3]
                            for ci_1, eps_3, nu_3, co_3, p_3, ci_2, eps_4, nu_4, co_4, p_4 in T.grid(T.int64(16), T.int64(1), T.int64(6), T.int64(1), T.int64(1), T.int64(2), T.int64(3), T.int64(1), T.int64(2), T.int64(2)):
                                with T.block("bgemm"):
                                    v_eps = T.axis.spatial(T.int64(6), eps_1_nu_1_co_1_p_1_fused // T.int64(16) * T.int64(3) + eps_3 * T.int64(3) + eps_4)
                                    v_nu = T.axis.spatial(T.int64(6), nu_3 + nu_4)
                                    v_co = T.axis.spatial(T.int64(256), eps_0_nu_0_co_0_p_0_fused * T.int64(64) + eps_1_nu_1_co_1_p_1_fused % T.int64(16) * T.int64(4) + eps_2_nu_2_co_2_p_2_fused // T.int64(98) * T.int64(2) + co_3 * T.int64(2) + co_4)
                                    v_p = T.axis.spatial(T.int64(196), eps_2_nu_2_co_2_p_2_fused % T.int64(98) * T.int64(2) + p_3 * T.int64(2) + p_4)
                                    v_ci = T.axis.reduce(T.int64(256), ci_0 * T.int64(32) + ci_1 * T.int64(2) + ci_2)
                                    T.reads(data_pack_shared[v_eps, v_nu, v_ci, v_p], p1_shared[v_eps, v_nu, v_ci, v_co])
                                    T.writes(bgemm_local[v_eps, v_nu, v_co, v_p])
                                    T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 32, "meta_schedule.tiling_structure": "SSSRRSRS"})
                                    with T.init():
                                        bgemm_local[v_eps, v_nu, v_co, v_p] = T.float32(0)
                                    bgemm_local[v_eps, v_nu, v_co, v_p] = bgemm_local[v_eps, v_nu, v_co, v_p] + data_pack_shared[v_eps, v_nu, v_ci, v_p] * p1_shared[v_eps, v_nu, v_ci, v_co]
                        for ax0, ax1, ax2, ax3 in T.grid(T.int64(3), T.int64(6), T.int64(2), T.int64(2)):
                            with T.block("bgemm_local"):
                                v0 = T.axis.spatial(T.int64(6), eps_1_nu_1_co_1_p_1_fused // T.int64(16) * T.int64(3) + ax0)
                                v1 = T.axis.spatial(T.int64(6), ax1)
                                v2 = T.axis.spatial(T.int64(256), eps_0_nu_0_co_0_p_0_fused * T.int64(64) + eps_1_nu_1_co_1_p_1_fused % T.int64(16) * T.int64(4) + eps_2_nu_2_co_2_p_2_fused // T.int64(98) * T.int64(2) + ax2)
                                v3 = T.axis.spatial(T.int64(196), eps_2_nu_2_co_2_p_2_fused % T.int64(98) * T.int64(2) + ax3)
                                T.reads(bgemm_local[v0, v1, v2, v3])
                                T.writes(bgemm[v0, v1, v2, v3])
                                bgemm[v0, v1, v2, v3] = bgemm_local[v0, v1, v2, v3]
            for n_co_h_0_w_0_fused_0 in T.thread_binding(T.int64(98), thread="blockIdx.x"):
                for n_co_h_0_w_0_fused_1 in T.thread_binding(T.int64(512), thread="threadIdx.x"):
                    for ax0, ax1 in T.grid(T.int64(1), T.int64(1)):
                        for ax2 in T.unroll(T.int64(4)):
                            for ax3 in T.unroll(T.int64(4)):
                                for ax4 in T.unroll(T.int64(6)):
                                    for ax5 in T.unroll(T.int64(6)):
                                        with T.block("inverse"):
                                            v_co = T.axis.spatial(T.int64(256), (n_co_h_0_w_0_fused_0 * T.int64(512) + n_co_h_0_w_0_fused_1) // T.int64(196) + ax0)
                                            v_p = T.axis.spatial(T.int64(196), (n_co_h_0_w_0_fused_0 * T.int64(512) + n_co_h_0_w_0_fused_1) % T.int64(196) + ax1)
                                            v_vh, v_vw, v_r_a, v_r_b = T.axis.remap("SSRR", [ax2, ax3, ax4, ax5])
                                            T.reads(bgemm[v_r_a, v_r_b, v_co, v_p])
                                            T.writes(inverse_local[v_co, v_p, v_vh, v_vw])
                                            T.block_attr({"schedule_rule": "conv2d_nchw_winograd_inverse"})
                                            with T.init():
                                                inverse_local[v_co, v_p, v_vh, v_vw] = T.float32(0)
                                            inverse_local[v_co, v_p, v_vh, v_vw] = inverse_local[v_co, v_p, v_vh, v_vw] + bgemm[v_r_a, v_r_b, v_co, v_p] * T.Select(v_r_a % T.int64(6) == T.int64(5) and v_vh % T.int64(4) == T.int64(3), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(5) and v_vh % T.int64(4) == T.int64(2), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(5) and v_vh % T.int64(4) == T.int64(1), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(5) and v_vh % T.int64(4) == T.int64(0), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(4) and v_vh % T.int64(4) == T.int64(3), T.float32(-8), T.Select(v_r_a % T.int64(6) == T.int64(4) and v_vh % T.int64(4) == T.int64(2), T.float32(4), T.Select(v_r_a % T.int64(6) == T.int64(4) and v_vh % T.int64(4) == T.int64(1), T.float32(-2), T.Select(v_r_a % T.int64(6) == T.int64(4) and v_vh % T.int64(4) == T.int64(0), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(3) and v_vh % T.int64(4) == T.int64(3), T.float32(0.125), T.Select(v_r_a % T.int64(6) == T.int64(3) and v_vh % T.int64(4) == T.int64(2), T.float32(0.25), T.Select(v_r_a % T.int64(6) == T.int64(3) and v_vh % T.int64(4) == T.int64(1), T.float32(0.5), T.Select(v_r_a % T.int64(6) == T.int64(3) and v_vh % T.int64(4) == T.int64(0), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(2) and v_vh % T.int64(4) == T.int64(3), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(2) and v_vh % T.int64(4) == T.int64(2), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(2) and v_vh % T.int64(4) == T.int64(1), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(2) and v_vh % T.int64(4) == T.int64(0), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(1) and v_vh % T.int64(4) == T.int64(3), T.float32(-1), T.Select(v_r_a % T.int64(6) == T.int64(1) and v_vh % T.int64(4) == T.int64(2), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(1) and v_vh % T.int64(4) == T.int64(1), T.float32(-1), T.Select(v_r_a % T.int64(6) == T.int64(1) and v_vh % T.int64(4) == T.int64(0), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(0) and v_vh % T.int64(4) == T.int64(3), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(0) and v_vh % T.int64(4) == T.int64(2), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(0) and v_vh % T.int64(4) == T.int64(1), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(0) and v_vh % T.int64(4) == T.int64(0), T.float32(1), T.float32(0))))))))))))))))))))))))) * T.Select(v_r_b % T.int64(6) == T.int64(5) and v_vw % T.int64(4) == T.int64(3), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(5) and v_vw % T.int64(4) == T.int64(2), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(5) and v_vw % T.int64(4) == T.int64(1), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(5) and v_vw % T.int64(4) == T.int64(0), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(4) and v_vw % T.int64(4) == T.int64(3), T.float32(-8), T.Select(v_r_b % T.int64(6) == T.int64(4) and v_vw % T.int64(4) == T.int64(2), T.float32(4), T.Select(v_r_b % T.int64(6) == T.int64(4) and v_vw % T.int64(4) == T.int64(1), T.float32(-2), T.Select(v_r_b % T.int64(6) == T.int64(4) and v_vw % T.int64(4) == T.int64(0), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(3) and v_vw % T.int64(4) == T.int64(3), T.float32(0.125), T.Select(v_r_b % T.int64(6) == T.int64(3) and v_vw % T.int64(4) == T.int64(2), T.float32(0.25), T.Select(v_r_b % T.int64(6) == T.int64(3) and v_vw % T.int64(4) == T.int64(1), T.float32(0.5), T.Select(v_r_b % T.int64(6) == T.int64(3) and v_vw % T.int64(4) == T.int64(0), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(2) and v_vw % T.int64(4) == T.int64(3), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(2) and v_vw % T.int64(4) == T.int64(2), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(2) and v_vw % T.int64(4) == T.int64(1), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(2) and v_vw % T.int64(4) == T.int64(0), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(1) and v_vw % T.int64(4) == T.int64(3), T.float32(-1), T.Select(v_r_b % T.int64(6) == T.int64(1) and v_vw % T.int64(4) == T.int64(2), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(1) and v_vw % T.int64(4) == T.int64(1), T.float32(-1), T.Select(v_r_b % T.int64(6) == T.int64(1) and v_vw % T.int64(4) == T.int64(0), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(0) and v_vw % T.int64(4) == T.int64(3), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(0) and v_vw % T.int64(4) == T.int64(2), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(0) and v_vw % T.int64(4) == T.int64(1), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(0) and v_vw % T.int64(4) == T.int64(0), T.float32(1), T.float32(0)))))))))))))))))))))))))
                    for h_1, w_1 in T.grid(T.int64(4), T.int64(4)):
                        with T.block("conv2d_winograd"):
                            v_n = T.axis.spatial(T.int64(1), T.int64(0))
                            v_co = T.axis.spatial(T.int64(256), (n_co_h_0_w_0_fused_0 * T.int64(512) + n_co_h_0_w_0_fused_1) // T.int64(196))
                            v_h = T.axis.spatial(T.int64(56), (n_co_h_0_w_0_fused_0 * T.int64(512) + n_co_h_0_w_0_fused_1) % T.int64(196) // T.int64(14) * T.int64(4) + h_1)
                            v_w = T.axis.spatial(T.int64(56), (n_co_h_0_w_0_fused_0 * T.int64(512) + n_co_h_0_w_0_fused_1) % T.int64(14) * T.int64(4) + w_1)
                            T.reads(inverse_local[v_co, v_n * T.int64(196) + v_h // T.int64(4) * T.int64(14) + v_w // T.int64(4), v_h % T.int64(4), v_w % T.int64(4)], p2[v_n, v_co, T.int64(0), T.int64(0)])
                            T.writes(T_relu[v_n, v_co, v_h, v_w])
                            T_relu[v_n, v_co, v_h, v_w] = T.max(inverse_local[v_co, v_n * T.int64(196) + v_h // T.int64(4) * T.int64(14) + v_w // T.int64(4), v_h % T.int64(4), v_w % T.int64(4)] + p2[v_n, v_co, T.int64(0), T.int64(0)], T.float32(0))
b0 = sch.get_block(name="data_pack", func_name="main")
b1 = sch.get_block(name="bgemm", func_name="main")
b2 = sch.get_block(name="inverse", func_name="main")
b3 = sch.get_block(name="conv2d_winograd", func_name="main")
b4 = sch.get_block(name="T_add", func_name="main")
b5 = sch.get_block(name="T_relu", func_name="main")
b6 = sch.get_block(name="root", func_name="main")
b7, b8 = sch.get_producers(block=b2)
sch.compute_inline(block=b8)
b9, = sch.get_consumers(block=b2)
l10, l11, l12, l13 = sch.get_loops(block=b9)
l14, l15 = sch.split(loop=l12, factors=[None, 4], preserve_unit_iters=True)
l16, l17 = sch.split(loop=l13, factors=[None, 4], preserve_unit_iters=True)
sch.reorder(l14, l16, l15, l17)
sch.compute_at(block=b2, loop=l16, preserve_unit_loops=True, index=-1)
sch.set_scope(block=b2, buffer_index=0, storage_scope="local")
l18, l19, l20, l21, l22, l23, l24, l25, l26, l27 = sch.get_loops(block=b2)
sch.unroll(loop=l24)
sch.unroll(loop=l25)
sch.unroll(loop=l26)
sch.unroll(loop=l27)
b28, b29 = sch.get_producers(block=b0)
sch.compute_inline(block=b29)
b30, = sch.get_producers(block=b28)
l31, l32, l33, l34, l35, l36 = sch.get_loops(block=b0)
sch.reorder(l33, l34, l31, l32, l35, l36)
sch.unroll(loop=l31)
sch.unroll(loop=l32)
sch.unroll(loop=l35)
sch.unroll(loop=l36)
l37 = sch.fuse(l33, l34, preserve_unit_iters=True)
v38 = sch.sample_categorical(candidates=[32, 64, 128, 256, 512, 1024], probs=[0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666], decision=3)
l39, l40 = sch.split(loop=l37, factors=[None, v38], preserve_unit_iters=True)
sch.bind(loop=l39, thread_axis="blockIdx.x")
sch.bind(loop=l40, thread_axis="threadIdx.x")
b41 = sch.cache_write(block=b0, write_buffer_index=0, storage_scope="local")
sch.reverse_compute_at(block=b41, loop=l40, preserve_unit_loops=True, index=-1)
sch.compute_at(block=b28, loop=l40, preserve_unit_loops=True, index=-1)
sch.set_scope(block=b28, buffer_index=0, storage_scope="local")
sch.compute_inline(block=b30)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSSRRSRS")
l42, l43, l44, l45, l46 = sch.get_loops(block=b1)
v47, v48, v49, v50, v51 = sch.sample_perfect_tile(loop=l42, n=5, max_innermost_factor=64, decision=[1, 2, 1, 1, 3])
l52, l53, l54, l55, l56 = sch.split(loop=l42, factors=[v47, v48, v49, v50, v51], preserve_unit_iters=True)
v57, v58, v59, v60, v61 = sch.sample_perfect_tile(loop=l43, n=5, max_innermost_factor=64, decision=[1, 1, 1, 6, 1])
l62, l63, l64, l65, l66 = sch.split(loop=l43, factors=[v57, v58, v59, v60, v61], preserve_unit_iters=True)
v67, v68, v69, v70, v71 = sch.sample_perfect_tile(loop=l44, n=5, max_innermost_factor=64, decision=[4, 16, 2, 1, 2])
l72, l73, l74, l75, l76 = sch.split(loop=l44, factors=[v67, v68, v69, v70, v71], preserve_unit_iters=True)
v77, v78, v79, v80, v81 = sch.sample_perfect_tile(loop=l45, n=5, max_innermost_factor=64, decision=[1, 1, 98, 1, 2])
l82, l83, l84, l85, l86 = sch.split(loop=l45, factors=[v77, v78, v79, v80, v81], preserve_unit_iters=True)
v87, v88, v89 = sch.sample_perfect_tile(loop=l46, n=3, max_innermost_factor=64, decision=[8, 16, 2])
l90, l91, l92 = sch.split(loop=l46, factors=[v87, v88, v89], preserve_unit_iters=True)
sch.reorder(l52, l62, l72, l82, l53, l63, l73, l83, l54, l64, l74, l84, l90, l91, l55, l65, l75, l85, l92, l56, l66, l76, l86)
l93 = sch.fuse(l52, l62, l72, l82, preserve_unit_iters=True)
sch.bind(loop=l93, thread_axis="blockIdx.x")
l94 = sch.fuse(l53, l63, l73, l83, preserve_unit_iters=True)
sch.bind(loop=l94, thread_axis="vthread.x")
l95 = sch.fuse(l54, l64, l74, l84, preserve_unit_iters=True)
sch.bind(loop=l95, thread_axis="threadIdx.x")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_low_inclusive", ann_val=32)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_high_inclusive", ann_val=1024)
b96 = sch.cache_write(block=b1, write_buffer_index=0, storage_scope="local")
sch.reverse_compute_at(block=b96, loop=l95, preserve_unit_loops=True, index=-1)
b97 = sch.cache_read(block=b1, read_buffer_index=0, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b97, loop=l90, preserve_unit_loops=True, index=-1)
l98, l99, l100, l101, l102, l103, l104, l105 = sch.get_loops(block=b97)
l106 = sch.fuse(l102, l103, l104, l105, preserve_unit_iters=True)
v107 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=0)
sch.annotate(block_or_loop=b97, ann_key="meta_schedule.cooperative_fetch", ann_val=v107)
b108 = sch.cache_read(block=b1, read_buffer_index=1, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b108, loop=l90, preserve_unit_loops=True, index=-1)
l109, l110, l111, l112, l113, l114, l115, l116 = sch.get_loops(block=b108)
l117 = sch.fuse(l113, l114, l115, l116, preserve_unit_iters=True)
v118 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=2)
sch.annotate(block_or_loop=b108, ann_key="meta_schedule.cooperative_fetch", ann_val=v118)
sch.reverse_compute_inline(block=b5)
sch.reverse_compute_inline(block=b4)
v119 = sch.sample_categorical(candidates=[0, 16, 64, 512, 1024], probs=[0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001], decision=2)
sch.annotate(block_or_loop=b6, ann_key="meta_schedule.unroll_explicit", ann_val=v119)
l120, l121, l122, l123, l124, l125 = sch.get_loops(block=b3)
l126 = sch.fuse(l120, l121, l122, l123, preserve_unit_iters=True)
v127 = sch.sample_categorical(candidates=[32, 64, 128, 256, 512, 1024], probs=[0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666], decision=4)
l128, l129 = sch.split(loop=l126, factors=[None, v127], preserve_unit_iters=True)
sch.bind(loop=l128, thread_axis="blockIdx.x")
sch.bind(loop=l129, thread_axis="threadIdx.x")
2024-04-28 19:50:00 [INFO] [task_scheduler.cc:170] Design space #1:
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(256), T.int64(56), T.int64(56)), "float32"), p1: T.Buffer((T.int64(6), T.int64(6), T.int64(256), T.int64(256)), "float32"), p2: T.Buffer((T.int64(1), T.int64(256), T.int64(1), T.int64(1)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(256), T.int64(56), T.int64(56)), "float32")):
        T.func_attr({"layout_free_buffers": [1], "tir.noalias": T.bool(True)})
        with T.block("root"):
            T.reads()
            T.writes()
            T.block_attr({"meta_schedule.unroll_explicit": 16})
            input_tile_local = T.alloc_buffer((T.int64(256), T.int64(196), T.int64(6), T.int64(6)), scope="local")
            data_pack = T.alloc_buffer((T.int64(6), T.int64(6), T.int64(256), T.int64(196)))
            bgemm = T.alloc_buffer((T.int64(6), T.int64(6), T.int64(256), T.int64(196)))
            inverse_local = T.alloc_buffer((T.int64(256), T.int64(196), T.int64(4), T.int64(4)), scope="local")
            data_pack_local = T.alloc_buffer((T.int64(6), T.int64(6), T.int64(256), T.int64(196)), scope="local")
            bgemm_local = T.alloc_buffer((T.int64(6), T.int64(6), T.int64(256), T.int64(196)), scope="local")
            data_pack_shared = T.alloc_buffer((T.int64(6), T.int64(6), T.int64(256), T.int64(196)), scope="shared")
            p1_shared = T.alloc_buffer((T.int64(6), T.int64(6), T.int64(256), T.int64(256)), scope="shared")
            for ci_p_fused_0 in T.thread_binding(T.int64(196), thread="blockIdx.x"):
                for ci_p_fused_1 in T.thread_binding(T.int64(256), thread="threadIdx.x"):
                    for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(1), T.int64(6), T.int64(6)):
                        with T.block("input_tile"):
                            v_ci = T.axis.spatial(T.int64(256), (ci_p_fused_0 * T.int64(256) + ci_p_fused_1) // T.int64(196) + ax0)
                            v_p = T.axis.spatial(T.int64(196), (ci_p_fused_0 * T.int64(60) + ci_p_fused_1) % T.int64(196) + ax1)
                            v_eps, v_nu = T.axis.remap("SS", [ax2, ax3])
                            T.reads(p0[v_p // T.int64(196), v_ci, v_p % T.int64(196) // T.int64(14) * T.int64(4) + v_eps - T.int64(1), v_p % T.int64(14) * T.int64(4) + v_nu - T.int64(1)])
                            T.writes(input_tile_local[v_ci, v_p, v_eps, v_nu])
                            T.block_attr({"schedule_rule": "None"})
                            input_tile_local[v_ci, v_p, v_eps, v_nu] = T.if_then_else(T.int64(1) <= v_p % T.int64(196) // T.int64(14) * T.int64(4) + v_eps and v_p % T.int64(196) // T.int64(14) * T.int64(4) + v_eps < T.int64(57) and T.int64(1) <= v_p % T.int64(14) * T.int64(4) + v_nu and v_p % T.int64(14) * T.int64(4) + v_nu < T.int64(57), p0[v_p // T.int64(196), v_ci, v_p % T.int64(196) // T.int64(14) * T.int64(4) + v_eps - T.int64(1), v_p % T.int64(14) * T.int64(4) + v_nu - T.int64(1)], T.float32(0))
                    for eps in T.unroll(T.int64(6)):
                        for nu in T.unroll(T.int64(6)):
                            for r_a in T.unroll(T.int64(6)):
                                for r_b in T.unroll(T.int64(6)):
                                    with T.block("data_pack"):
                                        v_eps, v_nu = T.axis.remap("SS", [eps, nu])
                                        v_ci = T.axis.spatial(T.int64(256), (ci_p_fused_0 * T.int64(256) + ci_p_fused_1) // T.int64(196))
                                        v_p = T.axis.spatial(T.int64(196), (ci_p_fused_0 * T.int64(256) + ci_p_fused_1) % T.int64(196))
                                        v_r_a, v_r_b = T.axis.remap("RR", [r_a, r_b])
                                        T.reads(input_tile_local[v_ci, v_p, v_r_a, v_r_b])
                                        T.writes(data_pack_local[v_eps, v_nu, v_ci, v_p])
                                        T.block_attr({"schedule_rule": "conv2d_nchw_winograd_data_pack"})
                                        with T.init():
                                            data_pack_local[v_eps, v_nu, v_ci, v_p] = T.float32(0)
                                        data_pack_local[v_eps, v_nu, v_ci, v_p] = data_pack_local[v_eps, v_nu, v_ci, v_p] + input_tile_local[v_ci, v_p, v_r_a, v_r_b] * T.Select(v_r_a % T.int64(6) == T.int64(5) and v_eps % T.int64(6) == T.int64(5), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(5) and v_eps % T.int64(6) == T.int64(4), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(5) and v_eps % T.int64(6) == T.int64(3), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(5) and v_eps % T.int64(6) == T.int64(2), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(5) and v_eps % T.int64(6) == T.int64(1), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(5) and v_eps % T.int64(6) == T.int64(0), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(4) and v_eps % T.int64(6) == T.int64(5), T.float32(1.5), T.Select(v_r_a % T.int64(6) == T.int64(4) and v_eps % T.int64(6) == T.int64(4), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(4) and v_eps % T.int64(6) == T.int64(3), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(4) and v_eps % T.int64(6) == T.int64(2), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(4) and v_eps % T.int64(6) == T.int64(1), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(4) and v_eps % T.int64(6) == T.int64(0), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(3) and v_eps % T.int64(6) == T.int64(5), T.float32(-2), T.Select(v_r_a % T.int64(6) == T.int64(3) and v_eps % T.int64(6) == T.int64(4), T.float32(-0.5), T.Select(v_r_a % T.int64(6) == T.int64(3) and v_eps % T.int64(6) == T.int64(3), T.float32(2), T.Select(v_r_a % T.int64(6) == T.int64(3) and v_eps % T.int64(6) == T.int64(2), T.float32(2.5), T.Select(v_r_a % T.int64(6) == T.int64(3) and v_eps % T.int64(6) == T.int64(1), T.float32(0.5), T.Select(v_r_a % T.int64(6) == T.int64(3) and v_eps % T.int64(6) == T.int64(0), T.float32(1.5), T.Select(v_r_a % T.int64(6) == T.int64(2) and v_eps % T.int64(6) == T.int64(5), T.float32(-1.5), T.Select(v_r_a % T.int64(6) == T.int64(2) and v_eps % T.int64(6) == T.int64(4), T.float32(-1), T.Select(v_r_a % T.int64(6) == T.int64(2) and v_eps % T.int64(6) == T.int64(3), T.float32(-1), T.Select(v_r_a % T.int64(6) == T.int64(2) and v_eps % T.int64(6) == T.int64(2), T.float32(0.5), T.Select(v_r_a % T.int64(6) == T.int64(2) and v_eps % T.int64(6) == T.int64(1), T.float32(-2.5), T.Select(v_r_a % T.int64(6) == T.int64(2) and v_eps % T.int64(6) == T.int64(0), T.float32(-2), T.Select(v_r_a % T.int64(6) == T.int64(1) and v_eps % T.int64(6) == T.int64(5), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(1) and v_eps % T.int64(6) == T.int64(4), T.float32(0.5), T.Select(v_r_a % T.int64(6) == T.int64(1) and v_eps % T.int64(6) == T.int64(3), T.float32(-2), T.Select(v_r_a % T.int64(6) == T.int64(1) and v_eps % T.int64(6) == T.int64(2), T.float32(-1), T.Select(v_r_a % T.int64(6) == T.int64(1) and v_eps % T.int64(6) == T.int64(1), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(1) and v_eps % T.int64(6) == T.int64(0), T.float32(-1.5), T.Select(v_r_a % T.int64(6) == T.int64(0) and v_eps % T.int64(6) == T.int64(5), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(0) and v_eps % T.int64(6) == T.int64(4), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(0) and v_eps % T.int64(6) == T.int64(3), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(0) and v_eps % T.int64(6) == T.int64(2), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(0) and v_eps % T.int64(6) == T.int64(1), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(0) and v_eps % T.int64(6) == T.int64(0), T.float32(1), T.float32(0))))))))))))))))))))))))))))))))))))) * T.Select(v_r_b % T.int64(6) == T.int64(5) and v_nu % T.int64(6) == T.int64(5), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(5) and v_nu % T.int64(6) == T.int64(4), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(5) and v_nu % T.int64(6) == T.int64(3), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(5) and v_nu % T.int64(6) == T.int64(2), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(5) and v_nu % T.int64(6) == T.int64(1), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(5) and v_nu % T.int64(6) == T.int64(0), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(4) and v_nu % T.int64(6) == T.int64(5), T.float32(1.5), T.Select(v_r_b % T.int64(6) == T.int64(4) and v_nu % T.int64(6) == T.int64(4), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(4) and v_nu % T.int64(6) == T.int64(3), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(4) and v_nu % T.int64(6) == T.int64(2), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(4) and v_nu % T.int64(6) == T.int64(1), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(4) and v_nu % T.int64(6) == T.int64(0), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(3) and v_nu % T.int64(6) == T.int64(5), T.float32(-2), T.Select(v_r_b % T.int64(6) == T.int64(3) and v_nu % T.int64(6) == T.int64(4), T.float32(-0.5), T.Select(v_r_b % T.int64(6) == T.int64(3) and v_nu % T.int64(6) == T.int64(3), T.float32(2), T.Select(v_r_b % T.int64(6) == T.int64(3) and v_nu % T.int64(6) == T.int64(2), T.float32(2.5), T.Select(v_r_b % T.int64(6) == T.int64(3) and v_nu % T.int64(6) == T.int64(1), T.float32(0.5), T.Select(v_r_b % T.int64(6) == T.int64(3) and v_nu % T.int64(6) == T.int64(0), T.float32(1.5), T.Select(v_r_b % T.int64(6) == T.int64(2) and v_nu % T.int64(6) == T.int64(5), T.float32(-1.5), T.Select(v_r_b % T.int64(6) == T.int64(2) and v_nu % T.int64(6) == T.int64(4), T.float32(-1), T.Select(v_r_b % T.int64(6) == T.int64(2) and v_nu % T.int64(6) == T.int64(3), T.float32(-1), T.Select(v_r_b % T.int64(6) == T.int64(2) and v_nu % T.int64(6) == T.int64(2), T.float32(0.5), T.Select(v_r_b % T.int64(6) == T.int64(2) and v_nu % T.int64(6) == T.int64(1), T.float32(-2.5), T.Select(v_r_b % T.int64(6) == T.int64(2) and v_nu % T.int64(6) == T.int64(0), T.float32(-2), T.Select(v_r_b % T.int64(6) == T.int64(1) and v_nu % T.int64(6) == T.int64(5), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(1) and v_nu % T.int64(6) == T.int64(4), T.float32(0.5), T.Select(v_r_b % T.int64(6) == T.int64(1) and v_nu % T.int64(6) == T.int64(3), T.float32(-2), T.Select(v_r_b % T.int64(6) == T.int64(1) and v_nu % T.int64(6) == T.int64(2), T.float32(-1), T.Select(v_r_b % T.int64(6) == T.int64(1) and v_nu % T.int64(6) == T.int64(1), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(1) and v_nu % T.int64(6) == T.int64(0), T.float32(-1.5), T.Select(v_r_b % T.int64(6) == T.int64(0) and v_nu % T.int64(6) == T.int64(5), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(0) and v_nu % T.int64(6) == T.int64(4), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(0) and v_nu % T.int64(6) == T.int64(3), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(0) and v_nu % T.int64(6) == T.int64(2), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(0) and v_nu % T.int64(6) == T.int64(1), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(0) and v_nu % T.int64(6) == T.int64(0), T.float32(1), T.float32(0)))))))))))))))))))))))))))))))))))))
                    for ax0, ax1, ax2, ax3 in T.grid(T.int64(6), T.int64(6), T.int64(1), T.int64(1)):
                        with T.block("data_pack_local"):
                            v0, v1 = T.axis.remap("SS", [ax0, ax1])
                            v2 = T.axis.spatial(T.int64(256), (ci_p_fused_0 * T.int64(256) + ci_p_fused_1) // T.int64(196) + ax2)
                            v3 = T.axis.spatial(T.int64(196), (ci_p_fused_0 * T.int64(60) + ci_p_fused_1) % T.int64(196) + ax3)
                            T.reads(data_pack_local[v0, v1, v2, v3])
                            T.writes(data_pack[v0, v1, v2, v3])
                            data_pack[v0, v1, v2, v3] = data_pack_local[v0, v1, v2, v3]
            for eps_0_nu_0_co_0_p_0_fused in T.thread_binding(T.int64(4), thread="blockIdx.x"):
                for eps_1_nu_1_co_1_p_1_fused in T.thread_binding(T.int64(32), thread="vthread.x"):
                    for eps_2_nu_2_co_2_p_2_fused in T.thread_binding(T.int64(196), thread="threadIdx.x"):
                        for ci_0_fused in T.serial(T.int64(8), annotations={"software_pipeline_async_stages": [0], "software_pipeline_order": [0, 1, 2], "software_pipeline_stage": [0, 0, 2]}):
                            for ax0_ax1_ax2_ax3_fused in range(T.int64(225792)):
                                with T.block("data_pack_shared"):
                                    v0 = T.axis.spatial(T.int64(6), ax0_ax1_ax2_ax3_fused // T.int64(37632))
                                    v1 = T.axis.spatial(T.int64(6), ax0_ax1_ax2_ax3_fused % T.int64(37632) // T.int64(6272))
                                    v2 = T.axis.spatial(T.int64(256), ci_0_fused * T.int64(32) + ax0_ax1_ax2_ax3_fused % T.int64(6272) // T.int64(196))
                                    v3 = T.axis.spatial(T.int64(196), ax0_ax1_ax2_ax3_fused % T.int64(196))
                                    T.reads(data_pack[v0, v1, v2, v3])
                                    T.writes(data_pack_shared[v0, v1, v2, v3])
                                    T.block_attr({"meta_schedule.cooperative_fetch": 1})
                                    data_pack_shared[v0, v1, v2, v3] = data_pack[v0, v1, v2, v3]
                            for ax0_ax1_ax2_ax3_fused in range(T.int64(73728)):
                                with T.block("p1_shared"):
                                    v0 = T.axis.spatial(T.int64(6), ax0_ax1_ax2_ax3_fused // T.int64(12288))
                                    v1 = T.axis.spatial(T.int64(6), ax0_ax1_ax2_ax3_fused % T.int64(12288) // T.int64(2048))
                                    v2 = T.axis.spatial(T.int64(256), ci_0_fused * T.int64(32) + ax0_ax1_ax2_ax3_fused % T.int64(2048) // T.int64(64))
                                    v3 = T.axis.spatial(T.int64(256), eps_0_nu_0_co_0_p_0_fused * T.int64(64) + ax0_ax1_ax2_ax3_fused % T.int64(64))
                                    T.reads(p1[v0, v1, v2, v3])
                                    T.writes(p1_shared[v0, v1, v2, v3])
                                    T.block_attr({"meta_schedule.cooperative_fetch": 3})
                                    p1_shared[v0, v1, v2, v3] = p1[v0, v1, v2, v3]
                            for ci_1, eps_3, nu_3, co_3, p_3, ci_2, eps_4, nu_4, co_4, p_4 in T.grid(T.int64(16), T.int64(1), T.int64(6), T.int64(1), T.int64(1), T.int64(2), T.int64(3), T.int64(1), T.int64(2), T.int64(2)):
                                with T.block("bgemm"):
                                    v_eps = T.axis.spatial(T.int64(6), eps_1_nu_1_co_1_p_1_fused // T.int64(16) * T.int64(3) + eps_3 * T.int64(3) + eps_4)
                                    v_nu = T.axis.spatial(T.int64(6), nu_3 + nu_4)
                                    v_co = T.axis.spatial(T.int64(256), eps_0_nu_0_co_0_p_0_fused * T.int64(64) + eps_1_nu_1_co_1_p_1_fused % T.int64(16) * T.int64(4) + eps_2_nu_2_co_2_p_2_fused // T.int64(98) * T.int64(2) + co_3 * T.int64(2) + co_4)
                                    v_p = T.axis.spatial(T.int64(196), eps_2_nu_2_co_2_p_2_fused % T.int64(98) * T.int64(2) + p_3 * T.int64(2) + p_4)
                                    v_ci = T.axis.reduce(T.int64(256), ci_0_fused * T.int64(32) + ci_1 * T.int64(2) + ci_2)
                                    T.reads(data_pack_shared[v_eps, v_nu, v_ci, v_p], p1_shared[v_eps, v_nu, v_ci, v_co])
                                    T.writes(bgemm_local[v_eps, v_nu, v_co, v_p])
                                    T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 32, "meta_schedule.tiling_structure": "SSSRRSRS"})
                                    with T.init():
                                        bgemm_local[v_eps, v_nu, v_co, v_p] = T.float32(0)
                                    bgemm_local[v_eps, v_nu, v_co, v_p] = bgemm_local[v_eps, v_nu, v_co, v_p] + data_pack_shared[v_eps, v_nu, v_ci, v_p] * p1_shared[v_eps, v_nu, v_ci, v_co]
                        for ax0, ax1, ax2, ax3 in T.grid(T.int64(3), T.int64(6), T.int64(2), T.int64(2)):
                            with T.block("bgemm_local"):
                                v0 = T.axis.spatial(T.int64(6), eps_1_nu_1_co_1_p_1_fused // T.int64(16) * T.int64(3) + ax0)
                                v1 = T.axis.spatial(T.int64(6), ax1)
                                v2 = T.axis.spatial(T.int64(256), eps_0_nu_0_co_0_p_0_fused * T.int64(64) + eps_1_nu_1_co_1_p_1_fused % T.int64(16) * T.int64(4) + eps_2_nu_2_co_2_p_2_fused // T.int64(98) * T.int64(2) + ax2)
                                v3 = T.axis.spatial(T.int64(196), eps_2_nu_2_co_2_p_2_fused % T.int64(98) * T.int64(2) + ax3)
                                T.reads(bgemm_local[v0, v1, v2, v3])
                                T.writes(bgemm[v0, v1, v2, v3])
                                bgemm[v0, v1, v2, v3] = bgemm_local[v0, v1, v2, v3]
            for n_co_h_0_w_0_fused_0 in T.thread_binding(T.int64(98), thread="blockIdx.x"):
                for n_co_h_0_w_0_fused_1 in T.thread_binding(T.int64(512), thread="threadIdx.x"):
                    for ax0, ax1 in T.grid(T.int64(1), T.int64(1)):
                        for ax2 in T.unroll(T.int64(4)):
                            for ax3 in T.unroll(T.int64(4)):
                                for ax4 in T.unroll(T.int64(6)):
                                    for ax5 in T.unroll(T.int64(6)):
                                        with T.block("inverse"):
                                            v_co = T.axis.spatial(T.int64(256), (n_co_h_0_w_0_fused_0 * T.int64(512) + n_co_h_0_w_0_fused_1) // T.int64(196) + ax0)
                                            v_p = T.axis.spatial(T.int64(196), (n_co_h_0_w_0_fused_0 * T.int64(512) + n_co_h_0_w_0_fused_1) % T.int64(196) + ax1)
                                            v_vh, v_vw, v_r_a, v_r_b = T.axis.remap("SSRR", [ax2, ax3, ax4, ax5])
                                            T.reads(bgemm[v_r_a, v_r_b, v_co, v_p])
                                            T.writes(inverse_local[v_co, v_p, v_vh, v_vw])
                                            T.block_attr({"schedule_rule": "conv2d_nchw_winograd_inverse"})
                                            with T.init():
                                                inverse_local[v_co, v_p, v_vh, v_vw] = T.float32(0)
                                            inverse_local[v_co, v_p, v_vh, v_vw] = inverse_local[v_co, v_p, v_vh, v_vw] + bgemm[v_r_a, v_r_b, v_co, v_p] * T.Select(v_r_a % T.int64(6) == T.int64(5) and v_vh % T.int64(4) == T.int64(3), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(5) and v_vh % T.int64(4) == T.int64(2), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(5) and v_vh % T.int64(4) == T.int64(1), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(5) and v_vh % T.int64(4) == T.int64(0), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(4) and v_vh % T.int64(4) == T.int64(3), T.float32(-8), T.Select(v_r_a % T.int64(6) == T.int64(4) and v_vh % T.int64(4) == T.int64(2), T.float32(4), T.Select(v_r_a % T.int64(6) == T.int64(4) and v_vh % T.int64(4) == T.int64(1), T.float32(-2), T.Select(v_r_a % T.int64(6) == T.int64(4) and v_vh % T.int64(4) == T.int64(0), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(3) and v_vh % T.int64(4) == T.int64(3), T.float32(0.125), T.Select(v_r_a % T.int64(6) == T.int64(3) and v_vh % T.int64(4) == T.int64(2), T.float32(0.25), T.Select(v_r_a % T.int64(6) == T.int64(3) and v_vh % T.int64(4) == T.int64(1), T.float32(0.5), T.Select(v_r_a % T.int64(6) == T.int64(3) and v_vh % T.int64(4) == T.int64(0), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(2) and v_vh % T.int64(4) == T.int64(3), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(2) and v_vh % T.int64(4) == T.int64(2), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(2) and v_vh % T.int64(4) == T.int64(1), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(2) and v_vh % T.int64(4) == T.int64(0), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(1) and v_vh % T.int64(4) == T.int64(3), T.float32(-1), T.Select(v_r_a % T.int64(6) == T.int64(1) and v_vh % T.int64(4) == T.int64(2), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(1) and v_vh % T.int64(4) == T.int64(1), T.float32(-1), T.Select(v_r_a % T.int64(6) == T.int64(1) and v_vh % T.int64(4) == T.int64(0), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(0) and v_vh % T.int64(4) == T.int64(3), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(0) and v_vh % T.int64(4) == T.int64(2), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(0) and v_vh % T.int64(4) == T.int64(1), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(0) and v_vh % T.int64(4) == T.int64(0), T.float32(1), T.float32(0))))))))))))))))))))))))) * T.Select(v_r_b % T.int64(6) == T.int64(5) and v_vw % T.int64(4) == T.int64(3), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(5) and v_vw % T.int64(4) == T.int64(2), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(5) and v_vw % T.int64(4) == T.int64(1), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(5) and v_vw % T.int64(4) == T.int64(0), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(4) and v_vw % T.int64(4) == T.int64(3), T.float32(-8), T.Select(v_r_b % T.int64(6) == T.int64(4) and v_vw % T.int64(4) == T.int64(2), T.float32(4), T.Select(v_r_b % T.int64(6) == T.int64(4) and v_vw % T.int64(4) == T.int64(1), T.float32(-2), T.Select(v_r_b % T.int64(6) == T.int64(4) and v_vw % T.int64(4) == T.int64(0), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(3) and v_vw % T.int64(4) == T.int64(3), T.float32(0.125), T.Select(v_r_b % T.int64(6) == T.int64(3) and v_vw % T.int64(4) == T.int64(2), T.float32(0.25), T.Select(v_r_b % T.int64(6) == T.int64(3) and v_vw % T.int64(4) == T.int64(1), T.float32(0.5), T.Select(v_r_b % T.int64(6) == T.int64(3) and v_vw % T.int64(4) == T.int64(0), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(2) and v_vw % T.int64(4) == T.int64(3), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(2) and v_vw % T.int64(4) == T.int64(2), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(2) and v_vw % T.int64(4) == T.int64(1), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(2) and v_vw % T.int64(4) == T.int64(0), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(1) and v_vw % T.int64(4) == T.int64(3), T.float32(-1), T.Select(v_r_b % T.int64(6) == T.int64(1) and v_vw % T.int64(4) == T.int64(2), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(1) and v_vw % T.int64(4) == T.int64(1), T.float32(-1), T.Select(v_r_b % T.int64(6) == T.int64(1) and v_vw % T.int64(4) == T.int64(0), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(0) and v_vw % T.int64(4) == T.int64(3), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(0) and v_vw % T.int64(4) == T.int64(2), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(0) and v_vw % T.int64(4) == T.int64(1), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(0) and v_vw % T.int64(4) == T.int64(0), T.float32(1), T.float32(0)))))))))))))))))))))))))
                    for h_1, w_1 in T.grid(T.int64(4), T.int64(4)):
                        with T.block("conv2d_winograd"):
                            v_n = T.axis.spatial(T.int64(1), T.int64(0))
                            v_co = T.axis.spatial(T.int64(256), (n_co_h_0_w_0_fused_0 * T.int64(512) + n_co_h_0_w_0_fused_1) // T.int64(196))
                            v_h = T.axis.spatial(T.int64(56), (n_co_h_0_w_0_fused_0 * T.int64(512) + n_co_h_0_w_0_fused_1) % T.int64(196) // T.int64(14) * T.int64(4) + h_1)
                            v_w = T.axis.spatial(T.int64(56), (n_co_h_0_w_0_fused_0 * T.int64(512) + n_co_h_0_w_0_fused_1) % T.int64(14) * T.int64(4) + w_1)
                            T.reads(inverse_local[v_co, v_n * T.int64(196) + v_h // T.int64(4) * T.int64(14) + v_w // T.int64(4), v_h % T.int64(4), v_w % T.int64(4)], p2[v_n, v_co, T.int64(0), T.int64(0)])
                            T.writes(T_relu[v_n, v_co, v_h, v_w])
                            T_relu[v_n, v_co, v_h, v_w] = T.max(inverse_local[v_co, v_n * T.int64(196) + v_h // T.int64(4) * T.int64(14) + v_w // T.int64(4), v_h % T.int64(4), v_w % T.int64(4)] + p2[v_n, v_co, T.int64(0), T.int64(0)], T.float32(0))
b0 = sch.get_block(name="data_pack", func_name="main")
b1 = sch.get_block(name="bgemm", func_name="main")
b2 = sch.get_block(name="inverse", func_name="main")
b3 = sch.get_block(name="conv2d_winograd", func_name="main")
b4 = sch.get_block(name="T_add", func_name="main")
b5 = sch.get_block(name="T_relu", func_name="main")
b6 = sch.get_block(name="root", func_name="main")
b7, b8 = sch.get_producers(block=b2)
sch.compute_inline(block=b8)
b9, = sch.get_consumers(block=b2)
l10, l11, l12, l13 = sch.get_loops(block=b9)
l14, l15 = sch.split(loop=l12, factors=[None, 4], preserve_unit_iters=True)
l16, l17 = sch.split(loop=l13, factors=[None, 4], preserve_unit_iters=True)
sch.reorder(l14, l16, l15, l17)
sch.compute_at(block=b2, loop=l16, preserve_unit_loops=True, index=-1)
sch.set_scope(block=b2, buffer_index=0, storage_scope="local")
l18, l19, l20, l21, l22, l23, l24, l25, l26, l27 = sch.get_loops(block=b2)
sch.unroll(loop=l24)
sch.unroll(loop=l25)
sch.unroll(loop=l26)
sch.unroll(loop=l27)
b28, b29 = sch.get_producers(block=b0)
sch.compute_inline(block=b29)
b30, = sch.get_producers(block=b28)
l31, l32, l33, l34, l35, l36 = sch.get_loops(block=b0)
sch.reorder(l33, l34, l31, l32, l35, l36)
sch.unroll(loop=l31)
sch.unroll(loop=l32)
sch.unroll(loop=l35)
sch.unroll(loop=l36)
l37 = sch.fuse(l33, l34, preserve_unit_iters=True)
v38 = sch.sample_categorical(candidates=[32, 64, 128, 256, 512, 1024], probs=[0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666], decision=3)
l39, l40 = sch.split(loop=l37, factors=[None, v38], preserve_unit_iters=True)
sch.bind(loop=l39, thread_axis="blockIdx.x")
sch.bind(loop=l40, thread_axis="threadIdx.x")
b41 = sch.cache_write(block=b0, write_buffer_index=0, storage_scope="local")
sch.reverse_compute_at(block=b41, loop=l40, preserve_unit_loops=True, index=-1)
sch.compute_at(block=b28, loop=l40, preserve_unit_loops=True, index=-1)
sch.set_scope(block=b28, buffer_index=0, storage_scope="local")
sch.compute_inline(block=b30)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSSRRSRS")
l42, l43, l44, l45, l46 = sch.get_loops(block=b1)
v47, v48, v49, v50, v51 = sch.sample_perfect_tile(loop=l42, n=5, max_innermost_factor=64, decision=[1, 2, 1, 1, 3])
l52, l53, l54, l55, l56 = sch.split(loop=l42, factors=[v47, v48, v49, v50, v51], preserve_unit_iters=True)
v57, v58, v59, v60, v61 = sch.sample_perfect_tile(loop=l43, n=5, max_innermost_factor=64, decision=[1, 1, 1, 6, 1])
l62, l63, l64, l65, l66 = sch.split(loop=l43, factors=[v57, v58, v59, v60, v61], preserve_unit_iters=True)
v67, v68, v69, v70, v71 = sch.sample_perfect_tile(loop=l44, n=5, max_innermost_factor=64, decision=[4, 16, 2, 1, 2])
l72, l73, l74, l75, l76 = sch.split(loop=l44, factors=[v67, v68, v69, v70, v71], preserve_unit_iters=True)
v77, v78, v79, v80, v81 = sch.sample_perfect_tile(loop=l45, n=5, max_innermost_factor=64, decision=[1, 1, 98, 1, 2])
l82, l83, l84, l85, l86 = sch.split(loop=l45, factors=[v77, v78, v79, v80, v81], preserve_unit_iters=True)
v87, v88, v89 = sch.sample_perfect_tile(loop=l46, n=3, max_innermost_factor=64, decision=[8, 16, 2])
l90, l91, l92 = sch.split(loop=l46, factors=[v87, v88, v89], preserve_unit_iters=True)
sch.reorder(l52, l62, l72, l82, l53, l63, l73, l83, l54, l64, l74, l84, l90, l91, l55, l65, l75, l85, l92, l56, l66, l76, l86)
l93 = sch.fuse(l52, l62, l72, l82, preserve_unit_iters=True)
sch.bind(loop=l93, thread_axis="blockIdx.x")
l94 = sch.fuse(l53, l63, l73, l83, preserve_unit_iters=True)
sch.bind(loop=l94, thread_axis="vthread.x")
l95 = sch.fuse(l54, l64, l74, l84, preserve_unit_iters=True)
sch.bind(loop=l95, thread_axis="threadIdx.x")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_low_inclusive", ann_val=32)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_high_inclusive", ann_val=1024)
b96 = sch.cache_write(block=b1, write_buffer_index=0, storage_scope="local")
sch.reverse_compute_at(block=b96, loop=l95, preserve_unit_loops=True, index=-1)
b97 = sch.cache_read(block=b1, read_buffer_index=0, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b97, loop=l90, preserve_unit_loops=True, index=-1)
l98, l99, l100, l101, l102, l103, l104, l105 = sch.get_loops(block=b97)
l106 = sch.fuse(l102, l103, l104, l105, preserve_unit_iters=True)
v107 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=0)
sch.annotate(block_or_loop=b97, ann_key="meta_schedule.cooperative_fetch", ann_val=v107)
b108 = sch.cache_read(block=b1, read_buffer_index=1, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b108, loop=l90, preserve_unit_loops=True, index=-1)
l109, l110, l111, l112, l113, l114, l115, l116 = sch.get_loops(block=b108)
l117 = sch.fuse(l113, l114, l115, l116, preserve_unit_iters=True)
v118 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=2)
sch.annotate(block_or_loop=b108, ann_key="meta_schedule.cooperative_fetch", ann_val=v118)
l119 = sch.fuse(l90, preserve_unit_iters=True)
sch.annotate(block_or_loop=l119, ann_key="software_pipeline_stage", ann_val=[0, 0, 2])
sch.annotate(block_or_loop=l119, ann_key="software_pipeline_order", ann_val=[0, 1, 2])
sch.annotate(block_or_loop=l119, ann_key="software_pipeline_async_stages", ann_val=[0])
sch.reverse_compute_inline(block=b5)
sch.reverse_compute_inline(block=b4)
v120 = sch.sample_categorical(candidates=[0, 16, 64, 512, 1024], probs=[0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001], decision=1)
sch.annotate(block_or_loop=b6, ann_key="meta_schedule.unroll_explicit", ann_val=v120)
l121, l122, l123, l124, l125, l126 = sch.get_loops(block=b3)
l127 = sch.fuse(l121, l122, l123, l124, preserve_unit_iters=True)
v128 = sch.sample_categorical(candidates=[32, 64, 128, 256, 512, 1024], probs=[0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666], decision=4)
l129, l130 = sch.split(loop=l127, factors=[None, v128], preserve_unit_iters=True)
sch.bind(loop=l129, thread_axis="blockIdx.x")
sch.bind(loop=l130, thread_axis="threadIdx.x")
2024-04-28 19:50:00 [INFO] [task_scheduler.cc:170] Design space #2:
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(256), T.int64(56), T.int64(56)), "float32"), p1: T.Buffer((T.int64(6), T.int64(6), T.int64(256), T.int64(256)), "float32"), p2: T.Buffer((T.int64(1), T.int64(256), T.int64(1), T.int64(1)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(256), T.int64(56), T.int64(56)), "float32")):
        T.func_attr({"layout_free_buffers": [1], "tir.noalias": T.bool(True)})
        with T.block("root"):
            T.reads()
            T.writes()
            T.block_attr({"meta_schedule.unroll_explicit": 1024})
            input_tile_local = T.alloc_buffer((T.int64(256), T.int64(196), T.int64(6), T.int64(6)), scope="local")
            data_pack = T.alloc_buffer((T.int64(6), T.int64(6), T.int64(256), T.int64(196)))
            bgemm = T.alloc_buffer((T.int64(6), T.int64(6), T.int64(256), T.int64(196)))
            inverse_local = T.alloc_buffer((T.int64(256), T.int64(196), T.int64(4), T.int64(4)), scope="local")
            data_pack_local = T.alloc_buffer((T.int64(6), T.int64(6), T.int64(256), T.int64(196)), scope="local")
            bgemm_local = T.alloc_buffer((T.int64(6), T.int64(6), T.int64(256), T.int64(196)), scope="local")
            data_pack_shared = T.alloc_buffer((T.int64(6), T.int64(6), T.int64(256), T.int64(196)), scope="shared")
            p1_shared = T.alloc_buffer((T.int64(6), T.int64(6), T.int64(256), T.int64(256)), scope="shared")
            for ci_p_fused_0 in T.thread_binding(T.int64(196), thread="blockIdx.x"):
                for ci_p_fused_1 in T.thread_binding(T.int64(256), thread="threadIdx.x"):
                    for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(1), T.int64(6), T.int64(6)):
                        with T.block("input_tile"):
                            v_ci = T.axis.spatial(T.int64(256), (ci_p_fused_0 * T.int64(256) + ci_p_fused_1) // T.int64(196) + ax0)
                            v_p = T.axis.spatial(T.int64(196), (ci_p_fused_0 * T.int64(60) + ci_p_fused_1) % T.int64(196) + ax1)
                            v_eps, v_nu = T.axis.remap("SS", [ax2, ax3])
                            T.reads(p0[v_p // T.int64(196), v_ci, v_p % T.int64(196) // T.int64(14) * T.int64(4) + v_eps - T.int64(1), v_p % T.int64(14) * T.int64(4) + v_nu - T.int64(1)])
                            T.writes(input_tile_local[v_ci, v_p, v_eps, v_nu])
                            T.block_attr({"schedule_rule": "None"})
                            input_tile_local[v_ci, v_p, v_eps, v_nu] = T.if_then_else(T.int64(1) <= v_p % T.int64(196) // T.int64(14) * T.int64(4) + v_eps and v_p % T.int64(196) // T.int64(14) * T.int64(4) + v_eps < T.int64(57) and T.int64(1) <= v_p % T.int64(14) * T.int64(4) + v_nu and v_p % T.int64(14) * T.int64(4) + v_nu < T.int64(57), p0[v_p // T.int64(196), v_ci, v_p % T.int64(196) // T.int64(14) * T.int64(4) + v_eps - T.int64(1), v_p % T.int64(14) * T.int64(4) + v_nu - T.int64(1)], T.float32(0))
                    for eps in T.unroll(T.int64(6)):
                        for nu in T.unroll(T.int64(6)):
                            for r_a in T.unroll(T.int64(6)):
                                for r_b in T.unroll(T.int64(6)):
                                    with T.block("data_pack"):
                                        v_eps, v_nu = T.axis.remap("SS", [eps, nu])
                                        v_ci = T.axis.spatial(T.int64(256), (ci_p_fused_0 * T.int64(256) + ci_p_fused_1) // T.int64(196))
                                        v_p = T.axis.spatial(T.int64(196), (ci_p_fused_0 * T.int64(256) + ci_p_fused_1) % T.int64(196))
                                        v_r_a, v_r_b = T.axis.remap("RR", [r_a, r_b])
                                        T.reads(input_tile_local[v_ci, v_p, v_r_a, v_r_b])
                                        T.writes(data_pack_local[v_eps, v_nu, v_ci, v_p])
                                        T.block_attr({"schedule_rule": "conv2d_nchw_winograd_data_pack"})
                                        with T.init():
                                            data_pack_local[v_eps, v_nu, v_ci, v_p] = T.float32(0)
                                        data_pack_local[v_eps, v_nu, v_ci, v_p] = data_pack_local[v_eps, v_nu, v_ci, v_p] + input_tile_local[v_ci, v_p, v_r_a, v_r_b] * T.Select(v_r_a % T.int64(6) == T.int64(5) and v_eps % T.int64(6) == T.int64(5), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(5) and v_eps % T.int64(6) == T.int64(4), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(5) and v_eps % T.int64(6) == T.int64(3), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(5) and v_eps % T.int64(6) == T.int64(2), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(5) and v_eps % T.int64(6) == T.int64(1), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(5) and v_eps % T.int64(6) == T.int64(0), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(4) and v_eps % T.int64(6) == T.int64(5), T.float32(1.5), T.Select(v_r_a % T.int64(6) == T.int64(4) and v_eps % T.int64(6) == T.int64(4), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(4) and v_eps % T.int64(6) == T.int64(3), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(4) and v_eps % T.int64(6) == T.int64(2), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(4) and v_eps % T.int64(6) == T.int64(1), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(4) and v_eps % T.int64(6) == T.int64(0), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(3) and v_eps % T.int64(6) == T.int64(5), T.float32(-2), T.Select(v_r_a % T.int64(6) == T.int64(3) and v_eps % T.int64(6) == T.int64(4), T.float32(-0.5), T.Select(v_r_a % T.int64(6) == T.int64(3) and v_eps % T.int64(6) == T.int64(3), T.float32(2), T.Select(v_r_a % T.int64(6) == T.int64(3) and v_eps % T.int64(6) == T.int64(2), T.float32(2.5), T.Select(v_r_a % T.int64(6) == T.int64(3) and v_eps % T.int64(6) == T.int64(1), T.float32(0.5), T.Select(v_r_a % T.int64(6) == T.int64(3) and v_eps % T.int64(6) == T.int64(0), T.float32(1.5), T.Select(v_r_a % T.int64(6) == T.int64(2) and v_eps % T.int64(6) == T.int64(5), T.float32(-1.5), T.Select(v_r_a % T.int64(6) == T.int64(2) and v_eps % T.int64(6) == T.int64(4), T.float32(-1), T.Select(v_r_a % T.int64(6) == T.int64(2) and v_eps % T.int64(6) == T.int64(3), T.float32(-1), T.Select(v_r_a % T.int64(6) == T.int64(2) and v_eps % T.int64(6) == T.int64(2), T.float32(0.5), T.Select(v_r_a % T.int64(6) == T.int64(2) and v_eps % T.int64(6) == T.int64(1), T.float32(-2.5), T.Select(v_r_a % T.int64(6) == T.int64(2) and v_eps % T.int64(6) == T.int64(0), T.float32(-2), T.Select(v_r_a % T.int64(6) == T.int64(1) and v_eps % T.int64(6) == T.int64(5), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(1) and v_eps % T.int64(6) == T.int64(4), T.float32(0.5), T.Select(v_r_a % T.int64(6) == T.int64(1) and v_eps % T.int64(6) == T.int64(3), T.float32(-2), T.Select(v_r_a % T.int64(6) == T.int64(1) and v_eps % T.int64(6) == T.int64(2), T.float32(-1), T.Select(v_r_a % T.int64(6) == T.int64(1) and v_eps % T.int64(6) == T.int64(1), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(1) and v_eps % T.int64(6) == T.int64(0), T.float32(-1.5), T.Select(v_r_a % T.int64(6) == T.int64(0) and v_eps % T.int64(6) == T.int64(5), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(0) and v_eps % T.int64(6) == T.int64(4), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(0) and v_eps % T.int64(6) == T.int64(3), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(0) and v_eps % T.int64(6) == T.int64(2), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(0) and v_eps % T.int64(6) == T.int64(1), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(0) and v_eps % T.int64(6) == T.int64(0), T.float32(1), T.float32(0))))))))))))))))))))))))))))))))))))) * T.Select(v_r_b % T.int64(6) == T.int64(5) and v_nu % T.int64(6) == T.int64(5), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(5) and v_nu % T.int64(6) == T.int64(4), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(5) and v_nu % T.int64(6) == T.int64(3), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(5) and v_nu % T.int64(6) == T.int64(2), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(5) and v_nu % T.int64(6) == T.int64(1), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(5) and v_nu % T.int64(6) == T.int64(0), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(4) and v_nu % T.int64(6) == T.int64(5), T.float32(1.5), T.Select(v_r_b % T.int64(6) == T.int64(4) and v_nu % T.int64(6) == T.int64(4), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(4) and v_nu % T.int64(6) == T.int64(3), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(4) and v_nu % T.int64(6) == T.int64(2), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(4) and v_nu % T.int64(6) == T.int64(1), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(4) and v_nu % T.int64(6) == T.int64(0), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(3) and v_nu % T.int64(6) == T.int64(5), T.float32(-2), T.Select(v_r_b % T.int64(6) == T.int64(3) and v_nu % T.int64(6) == T.int64(4), T.float32(-0.5), T.Select(v_r_b % T.int64(6) == T.int64(3) and v_nu % T.int64(6) == T.int64(3), T.float32(2), T.Select(v_r_b % T.int64(6) == T.int64(3) and v_nu % T.int64(6) == T.int64(2), T.float32(2.5), T.Select(v_r_b % T.int64(6) == T.int64(3) and v_nu % T.int64(6) == T.int64(1), T.float32(0.5), T.Select(v_r_b % T.int64(6) == T.int64(3) and v_nu % T.int64(6) == T.int64(0), T.float32(1.5), T.Select(v_r_b % T.int64(6) == T.int64(2) and v_nu % T.int64(6) == T.int64(5), T.float32(-1.5), T.Select(v_r_b % T.int64(6) == T.int64(2) and v_nu % T.int64(6) == T.int64(4), T.float32(-1), T.Select(v_r_b % T.int64(6) == T.int64(2) and v_nu % T.int64(6) == T.int64(3), T.float32(-1), T.Select(v_r_b % T.int64(6) == T.int64(2) and v_nu % T.int64(6) == T.int64(2), T.float32(0.5), T.Select(v_r_b % T.int64(6) == T.int64(2) and v_nu % T.int64(6) == T.int64(1), T.float32(-2.5), T.Select(v_r_b % T.int64(6) == T.int64(2) and v_nu % T.int64(6) == T.int64(0), T.float32(-2), T.Select(v_r_b % T.int64(6) == T.int64(1) and v_nu % T.int64(6) == T.int64(5), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(1) and v_nu % T.int64(6) == T.int64(4), T.float32(0.5), T.Select(v_r_b % T.int64(6) == T.int64(1) and v_nu % T.int64(6) == T.int64(3), T.float32(-2), T.Select(v_r_b % T.int64(6) == T.int64(1) and v_nu % T.int64(6) == T.int64(2), T.float32(-1), T.Select(v_r_b % T.int64(6) == T.int64(1) and v_nu % T.int64(6) == T.int64(1), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(1) and v_nu % T.int64(6) == T.int64(0), T.float32(-1.5), T.Select(v_r_b % T.int64(6) == T.int64(0) and v_nu % T.int64(6) == T.int64(5), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(0) and v_nu % T.int64(6) == T.int64(4), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(0) and v_nu % T.int64(6) == T.int64(3), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(0) and v_nu % T.int64(6) == T.int64(2), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(0) and v_nu % T.int64(6) == T.int64(1), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(0) and v_nu % T.int64(6) == T.int64(0), T.float32(1), T.float32(0)))))))))))))))))))))))))))))))))))))
                    for ax0, ax1, ax2, ax3 in T.grid(T.int64(6), T.int64(6), T.int64(1), T.int64(1)):
                        with T.block("data_pack_local"):
                            v0, v1 = T.axis.remap("SS", [ax0, ax1])
                            v2 = T.axis.spatial(T.int64(256), (ci_p_fused_0 * T.int64(256) + ci_p_fused_1) // T.int64(196) + ax2)
                            v3 = T.axis.spatial(T.int64(196), (ci_p_fused_0 * T.int64(60) + ci_p_fused_1) % T.int64(196) + ax3)
                            T.reads(data_pack_local[v0, v1, v2, v3])
                            T.writes(data_pack[v0, v1, v2, v3])
                            data_pack[v0, v1, v2, v3] = data_pack_local[v0, v1, v2, v3]
            for eps_0_nu_0_co_0_p_0_fused in T.thread_binding(T.int64(4), thread="blockIdx.x"):
                for eps_1_nu_1_co_1_p_1_fused in T.thread_binding(T.int64(32), thread="vthread.x"):
                    for eps_2_nu_2_co_2_p_2_fused in T.thread_binding(T.int64(196), thread="threadIdx.x"):
                        for ci_0_fused in T.serial(T.int64(8), annotations={"software_pipeline_async_stages": [0], "software_pipeline_order": [0, 1, 2], "software_pipeline_stage": [0, 0, 3]}):
                            for ax0_ax1_ax2_ax3_fused in range(T.int64(225792)):
                                with T.block("data_pack_shared"):
                                    v0 = T.axis.spatial(T.int64(6), ax0_ax1_ax2_ax3_fused // T.int64(37632))
                                    v1 = T.axis.spatial(T.int64(6), ax0_ax1_ax2_ax3_fused % T.int64(37632) // T.int64(6272))
                                    v2 = T.axis.spatial(T.int64(256), ci_0_fused * T.int64(32) + ax0_ax1_ax2_ax3_fused % T.int64(6272) // T.int64(196))
                                    v3 = T.axis.spatial(T.int64(196), ax0_ax1_ax2_ax3_fused % T.int64(196))
                                    T.reads(data_pack[v0, v1, v2, v3])
                                    T.writes(data_pack_shared[v0, v1, v2, v3])
                                    T.block_attr({"meta_schedule.cooperative_fetch": 1})
                                    data_pack_shared[v0, v1, v2, v3] = data_pack[v0, v1, v2, v3]
                            for ax0_ax1_ax2_ax3_fused in range(T.int64(73728)):
                                with T.block("p1_shared"):
                                    v0 = T.axis.spatial(T.int64(6), ax0_ax1_ax2_ax3_fused // T.int64(12288))
                                    v1 = T.axis.spatial(T.int64(6), ax0_ax1_ax2_ax3_fused % T.int64(12288) // T.int64(2048))
                                    v2 = T.axis.spatial(T.int64(256), ci_0_fused * T.int64(32) + ax0_ax1_ax2_ax3_fused % T.int64(2048) // T.int64(64))
                                    v3 = T.axis.spatial(T.int64(256), eps_0_nu_0_co_0_p_0_fused * T.int64(64) + ax0_ax1_ax2_ax3_fused % T.int64(64))
                                    T.reads(p1[v0, v1, v2, v3])
                                    T.writes(p1_shared[v0, v1, v2, v3])
                                    T.block_attr({"meta_schedule.cooperative_fetch": 3})
                                    p1_shared[v0, v1, v2, v3] = p1[v0, v1, v2, v3]
                            for ci_1, eps_3, nu_3, co_3, p_3, ci_2, eps_4, nu_4, co_4, p_4 in T.grid(T.int64(16), T.int64(1), T.int64(6), T.int64(1), T.int64(1), T.int64(2), T.int64(3), T.int64(1), T.int64(2), T.int64(2)):
                                with T.block("bgemm"):
                                    v_eps = T.axis.spatial(T.int64(6), eps_1_nu_1_co_1_p_1_fused // T.int64(16) * T.int64(3) + eps_3 * T.int64(3) + eps_4)
                                    v_nu = T.axis.spatial(T.int64(6), nu_3 + nu_4)
                                    v_co = T.axis.spatial(T.int64(256), eps_0_nu_0_co_0_p_0_fused * T.int64(64) + eps_1_nu_1_co_1_p_1_fused % T.int64(16) * T.int64(4) + eps_2_nu_2_co_2_p_2_fused // T.int64(98) * T.int64(2) + co_3 * T.int64(2) + co_4)
                                    v_p = T.axis.spatial(T.int64(196), eps_2_nu_2_co_2_p_2_fused % T.int64(98) * T.int64(2) + p_3 * T.int64(2) + p_4)
                                    v_ci = T.axis.reduce(T.int64(256), ci_0_fused * T.int64(32) + ci_1 * T.int64(2) + ci_2)
                                    T.reads(data_pack_shared[v_eps, v_nu, v_ci, v_p], p1_shared[v_eps, v_nu, v_ci, v_co])
                                    T.writes(bgemm_local[v_eps, v_nu, v_co, v_p])
                                    T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 32, "meta_schedule.tiling_structure": "SSSRRSRS"})
                                    with T.init():
                                        bgemm_local[v_eps, v_nu, v_co, v_p] = T.float32(0)
                                    bgemm_local[v_eps, v_nu, v_co, v_p] = bgemm_local[v_eps, v_nu, v_co, v_p] + data_pack_shared[v_eps, v_nu, v_ci, v_p] * p1_shared[v_eps, v_nu, v_ci, v_co]
                        for ax0, ax1, ax2, ax3 in T.grid(T.int64(3), T.int64(6), T.int64(2), T.int64(2)):
                            with T.block("bgemm_local"):
                                v0 = T.axis.spatial(T.int64(6), eps_1_nu_1_co_1_p_1_fused // T.int64(16) * T.int64(3) + ax0)
                                v1 = T.axis.spatial(T.int64(6), ax1)
                                v2 = T.axis.spatial(T.int64(256), eps_0_nu_0_co_0_p_0_fused * T.int64(64) + eps_1_nu_1_co_1_p_1_fused % T.int64(16) * T.int64(4) + eps_2_nu_2_co_2_p_2_fused // T.int64(98) * T.int64(2) + ax2)
                                v3 = T.axis.spatial(T.int64(196), eps_2_nu_2_co_2_p_2_fused % T.int64(98) * T.int64(2) + ax3)
                                T.reads(bgemm_local[v0, v1, v2, v3])
                                T.writes(bgemm[v0, v1, v2, v3])
                                bgemm[v0, v1, v2, v3] = bgemm_local[v0, v1, v2, v3]
            for n_co_h_0_w_0_fused_0 in T.thread_binding(T.int64(49), thread="blockIdx.x"):
                for n_co_h_0_w_0_fused_1 in T.thread_binding(T.int64(1024), thread="threadIdx.x"):
                    for ax0, ax1 in T.grid(T.int64(1), T.int64(1)):
                        for ax2 in T.unroll(T.int64(4)):
                            for ax3 in T.unroll(T.int64(4)):
                                for ax4 in T.unroll(T.int64(6)):
                                    for ax5 in T.unroll(T.int64(6)):
                                        with T.block("inverse"):
                                            v_co = T.axis.spatial(T.int64(256), (n_co_h_0_w_0_fused_0 * T.int64(1024) + n_co_h_0_w_0_fused_1) // T.int64(196) + ax0)
                                            v_p = T.axis.spatial(T.int64(196), (n_co_h_0_w_0_fused_0 * T.int64(1024) + n_co_h_0_w_0_fused_1) % T.int64(196) + ax1)
                                            v_vh, v_vw, v_r_a, v_r_b = T.axis.remap("SSRR", [ax2, ax3, ax4, ax5])
                                            T.reads(bgemm[v_r_a, v_r_b, v_co, v_p])
                                            T.writes(inverse_local[v_co, v_p, v_vh, v_vw])
                                            T.block_attr({"schedule_rule": "conv2d_nchw_winograd_inverse"})
                                            with T.init():
                                                inverse_local[v_co, v_p, v_vh, v_vw] = T.float32(0)
                                            inverse_local[v_co, v_p, v_vh, v_vw] = inverse_local[v_co, v_p, v_vh, v_vw] + bgemm[v_r_a, v_r_b, v_co, v_p] * T.Select(v_r_a % T.int64(6) == T.int64(5) and v_vh % T.int64(4) == T.int64(3), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(5) and v_vh % T.int64(4) == T.int64(2), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(5) and v_vh % T.int64(4) == T.int64(1), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(5) and v_vh % T.int64(4) == T.int64(0), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(4) and v_vh % T.int64(4) == T.int64(3), T.float32(-8), T.Select(v_r_a % T.int64(6) == T.int64(4) and v_vh % T.int64(4) == T.int64(2), T.float32(4), T.Select(v_r_a % T.int64(6) == T.int64(4) and v_vh % T.int64(4) == T.int64(1), T.float32(-2), T.Select(v_r_a % T.int64(6) == T.int64(4) and v_vh % T.int64(4) == T.int64(0), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(3) and v_vh % T.int64(4) == T.int64(3), T.float32(0.125), T.Select(v_r_a % T.int64(6) == T.int64(3) and v_vh % T.int64(4) == T.int64(2), T.float32(0.25), T.Select(v_r_a % T.int64(6) == T.int64(3) and v_vh % T.int64(4) == T.int64(1), T.float32(0.5), T.Select(v_r_a % T.int64(6) == T.int64(3) and v_vh % T.int64(4) == T.int64(0), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(2) and v_vh % T.int64(4) == T.int64(3), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(2) and v_vh % T.int64(4) == T.int64(2), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(2) and v_vh % T.int64(4) == T.int64(1), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(2) and v_vh % T.int64(4) == T.int64(0), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(1) and v_vh % T.int64(4) == T.int64(3), T.float32(-1), T.Select(v_r_a % T.int64(6) == T.int64(1) and v_vh % T.int64(4) == T.int64(2), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(1) and v_vh % T.int64(4) == T.int64(1), T.float32(-1), T.Select(v_r_a % T.int64(6) == T.int64(1) and v_vh % T.int64(4) == T.int64(0), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(0) and v_vh % T.int64(4) == T.int64(3), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(0) and v_vh % T.int64(4) == T.int64(2), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(0) and v_vh % T.int64(4) == T.int64(1), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(0) and v_vh % T.int64(4) == T.int64(0), T.float32(1), T.float32(0))))))))))))))))))))))))) * T.Select(v_r_b % T.int64(6) == T.int64(5) and v_vw % T.int64(4) == T.int64(3), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(5) and v_vw % T.int64(4) == T.int64(2), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(5) and v_vw % T.int64(4) == T.int64(1), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(5) and v_vw % T.int64(4) == T.int64(0), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(4) and v_vw % T.int64(4) == T.int64(3), T.float32(-8), T.Select(v_r_b % T.int64(6) == T.int64(4) and v_vw % T.int64(4) == T.int64(2), T.float32(4), T.Select(v_r_b % T.int64(6) == T.int64(4) and v_vw % T.int64(4) == T.int64(1), T.float32(-2), T.Select(v_r_b % T.int64(6) == T.int64(4) and v_vw % T.int64(4) == T.int64(0), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(3) and v_vw % T.int64(4) == T.int64(3), T.float32(0.125), T.Select(v_r_b % T.int64(6) == T.int64(3) and v_vw % T.int64(4) == T.int64(2), T.float32(0.25), T.Select(v_r_b % T.int64(6) == T.int64(3) and v_vw % T.int64(4) == T.int64(1), T.float32(0.5), T.Select(v_r_b % T.int64(6) == T.int64(3) and v_vw % T.int64(4) == T.int64(0), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(2) and v_vw % T.int64(4) == T.int64(3), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(2) and v_vw % T.int64(4) == T.int64(2), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(2) and v_vw % T.int64(4) == T.int64(1), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(2) and v_vw % T.int64(4) == T.int64(0), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(1) and v_vw % T.int64(4) == T.int64(3), T.float32(-1), T.Select(v_r_b % T.int64(6) == T.int64(1) and v_vw % T.int64(4) == T.int64(2), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(1) and v_vw % T.int64(4) == T.int64(1), T.float32(-1), T.Select(v_r_b % T.int64(6) == T.int64(1) and v_vw % T.int64(4) == T.int64(0), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(0) and v_vw % T.int64(4) == T.int64(3), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(0) and v_vw % T.int64(4) == T.int64(2), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(0) and v_vw % T.int64(4) == T.int64(1), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(0) and v_vw % T.int64(4) == T.int64(0), T.float32(1), T.float32(0)))))))))))))))))))))))))
                    for h_1, w_1 in T.grid(T.int64(4), T.int64(4)):
                        with T.block("conv2d_winograd"):
                            v_n = T.axis.spatial(T.int64(1), T.int64(0))
                            v_co = T.axis.spatial(T.int64(256), (n_co_h_0_w_0_fused_0 * T.int64(1024) + n_co_h_0_w_0_fused_1) // T.int64(196))
                            v_h = T.axis.spatial(T.int64(56), (n_co_h_0_w_0_fused_0 * T.int64(1024) + n_co_h_0_w_0_fused_1) % T.int64(196) // T.int64(14) * T.int64(4) + h_1)
                            v_w = T.axis.spatial(T.int64(56), (n_co_h_0_w_0_fused_0 * T.int64(1024) + n_co_h_0_w_0_fused_1) % T.int64(14) * T.int64(4) + w_1)
                            T.reads(inverse_local[v_co, v_n * T.int64(196) + v_h // T.int64(4) * T.int64(14) + v_w // T.int64(4), v_h % T.int64(4), v_w % T.int64(4)], p2[v_n, v_co, T.int64(0), T.int64(0)])
                            T.writes(T_relu[v_n, v_co, v_h, v_w])
                            T_relu[v_n, v_co, v_h, v_w] = T.max(inverse_local[v_co, v_n * T.int64(196) + v_h // T.int64(4) * T.int64(14) + v_w // T.int64(4), v_h % T.int64(4), v_w % T.int64(4)] + p2[v_n, v_co, T.int64(0), T.int64(0)], T.float32(0))
b0 = sch.get_block(name="data_pack", func_name="main")
b1 = sch.get_block(name="bgemm", func_name="main")
b2 = sch.get_block(name="inverse", func_name="main")
b3 = sch.get_block(name="conv2d_winograd", func_name="main")
b4 = sch.get_block(name="T_add", func_name="main")
b5 = sch.get_block(name="T_relu", func_name="main")
b6 = sch.get_block(name="root", func_name="main")
b7, b8 = sch.get_producers(block=b2)
sch.compute_inline(block=b8)
b9, = sch.get_consumers(block=b2)
l10, l11, l12, l13 = sch.get_loops(block=b9)
l14, l15 = sch.split(loop=l12, factors=[None, 4], preserve_unit_iters=True)
l16, l17 = sch.split(loop=l13, factors=[None, 4], preserve_unit_iters=True)
sch.reorder(l14, l16, l15, l17)
sch.compute_at(block=b2, loop=l16, preserve_unit_loops=True, index=-1)
sch.set_scope(block=b2, buffer_index=0, storage_scope="local")
l18, l19, l20, l21, l22, l23, l24, l25, l26, l27 = sch.get_loops(block=b2)
sch.unroll(loop=l24)
sch.unroll(loop=l25)
sch.unroll(loop=l26)
sch.unroll(loop=l27)
b28, b29 = sch.get_producers(block=b0)
sch.compute_inline(block=b29)
b30, = sch.get_producers(block=b28)
l31, l32, l33, l34, l35, l36 = sch.get_loops(block=b0)
sch.reorder(l33, l34, l31, l32, l35, l36)
sch.unroll(loop=l31)
sch.unroll(loop=l32)
sch.unroll(loop=l35)
sch.unroll(loop=l36)
l37 = sch.fuse(l33, l34, preserve_unit_iters=True)
v38 = sch.sample_categorical(candidates=[32, 64, 128, 256, 512, 1024], probs=[0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666], decision=3)
l39, l40 = sch.split(loop=l37, factors=[None, v38], preserve_unit_iters=True)
sch.bind(loop=l39, thread_axis="blockIdx.x")
sch.bind(loop=l40, thread_axis="threadIdx.x")
b41 = sch.cache_write(block=b0, write_buffer_index=0, storage_scope="local")
sch.reverse_compute_at(block=b41, loop=l40, preserve_unit_loops=True, index=-1)
sch.compute_at(block=b28, loop=l40, preserve_unit_loops=True, index=-1)
sch.set_scope(block=b28, buffer_index=0, storage_scope="local")
sch.compute_inline(block=b30)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSSRRSRS")
l42, l43, l44, l45, l46 = sch.get_loops(block=b1)
v47, v48, v49, v50, v51 = sch.sample_perfect_tile(loop=l42, n=5, max_innermost_factor=64, decision=[1, 2, 1, 1, 3])
l52, l53, l54, l55, l56 = sch.split(loop=l42, factors=[v47, v48, v49, v50, v51], preserve_unit_iters=True)
v57, v58, v59, v60, v61 = sch.sample_perfect_tile(loop=l43, n=5, max_innermost_factor=64, decision=[1, 1, 1, 6, 1])
l62, l63, l64, l65, l66 = sch.split(loop=l43, factors=[v57, v58, v59, v60, v61], preserve_unit_iters=True)
v67, v68, v69, v70, v71 = sch.sample_perfect_tile(loop=l44, n=5, max_innermost_factor=64, decision=[4, 16, 2, 1, 2])
l72, l73, l74, l75, l76 = sch.split(loop=l44, factors=[v67, v68, v69, v70, v71], preserve_unit_iters=True)
v77, v78, v79, v80, v81 = sch.sample_perfect_tile(loop=l45, n=5, max_innermost_factor=64, decision=[1, 1, 98, 1, 2])
l82, l83, l84, l85, l86 = sch.split(loop=l45, factors=[v77, v78, v79, v80, v81], preserve_unit_iters=True)
v87, v88, v89 = sch.sample_perfect_tile(loop=l46, n=3, max_innermost_factor=64, decision=[8, 16, 2])
l90, l91, l92 = sch.split(loop=l46, factors=[v87, v88, v89], preserve_unit_iters=True)
sch.reorder(l52, l62, l72, l82, l53, l63, l73, l83, l54, l64, l74, l84, l90, l91, l55, l65, l75, l85, l92, l56, l66, l76, l86)
l93 = sch.fuse(l52, l62, l72, l82, preserve_unit_iters=True)
sch.bind(loop=l93, thread_axis="blockIdx.x")
l94 = sch.fuse(l53, l63, l73, l83, preserve_unit_iters=True)
sch.bind(loop=l94, thread_axis="vthread.x")
l95 = sch.fuse(l54, l64, l74, l84, preserve_unit_iters=True)
sch.bind(loop=l95, thread_axis="threadIdx.x")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_low_inclusive", ann_val=32)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_high_inclusive", ann_val=1024)
b96 = sch.cache_write(block=b1, write_buffer_index=0, storage_scope="local")
sch.reverse_compute_at(block=b96, loop=l95, preserve_unit_loops=True, index=-1)
b97 = sch.cache_read(block=b1, read_buffer_index=0, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b97, loop=l90, preserve_unit_loops=True, index=-1)
l98, l99, l100, l101, l102, l103, l104, l105 = sch.get_loops(block=b97)
l106 = sch.fuse(l102, l103, l104, l105, preserve_unit_iters=True)
v107 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=0)
sch.annotate(block_or_loop=b97, ann_key="meta_schedule.cooperative_fetch", ann_val=v107)
b108 = sch.cache_read(block=b1, read_buffer_index=1, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b108, loop=l90, preserve_unit_loops=True, index=-1)
l109, l110, l111, l112, l113, l114, l115, l116 = sch.get_loops(block=b108)
l117 = sch.fuse(l113, l114, l115, l116, preserve_unit_iters=True)
v118 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=2)
sch.annotate(block_or_loop=b108, ann_key="meta_schedule.cooperative_fetch", ann_val=v118)
l119 = sch.fuse(l90, preserve_unit_iters=True)
sch.annotate(block_or_loop=l119, ann_key="software_pipeline_stage", ann_val=[0, 0, 3])
sch.annotate(block_or_loop=l119, ann_key="software_pipeline_order", ann_val=[0, 1, 2])
sch.annotate(block_or_loop=l119, ann_key="software_pipeline_async_stages", ann_val=[0])
sch.reverse_compute_inline(block=b5)
sch.reverse_compute_inline(block=b4)
v120 = sch.sample_categorical(candidates=[0, 16, 64, 512, 1024], probs=[0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001], decision=4)
sch.annotate(block_or_loop=b6, ann_key="meta_schedule.unroll_explicit", ann_val=v120)
l121, l122, l123, l124, l125, l126 = sch.get_loops(block=b3)
l127 = sch.fuse(l121, l122, l123, l124, preserve_unit_iters=True)
v128 = sch.sample_categorical(candidates=[32, 64, 128, 256, 512, 1024], probs=[0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666], decision=5)
l129, l130 = sch.split(loop=l127, factors=[None, v128], preserve_unit_iters=True)
sch.bind(loop=l129, thread_axis="blockIdx.x")
sch.bind(loop=l130, thread_axis="threadIdx.x")
2024-04-28 20:01:59 [INFO] [evolutionary_search.cc:713] Generating candidates......
2024-04-28 20:01:59 [INFO] [evolutionary_search.cc:715] Picked top 0 candidate(s) from database
2024-04-28 20:02:08 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x43d23b8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x3ad3338)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x72c6e28)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x4cb1ce8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x5905ad8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x7272d28)]: 506 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x3ab3638)]: 0 failure(s)
2024-04-28 20:02:16 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x43d23b8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x3ad3338)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x72c6e28)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x4cb1ce8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x5905ad8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x7272d28)]: 1012 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x3ab3638)]: 0 failure(s)
2024-04-28 20:02:25 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x43d23b8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x3ad3338)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x72c6e28)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x4cb1ce8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x5905ad8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x7272d28)]: 1515 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x3ab3638)]: 0 failure(s)
2024-04-28 20:02:33 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x43d23b8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x3ad3338)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x72c6e28)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x4cb1ce8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x5905ad8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x7272d28)]: 2018 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x3ab3638)]: 0 failure(s)
2024-04-28 20:02:42 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x43d23b8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x3ad3338)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x72c6e28)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x4cb1ce8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x5905ad8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x7272d28)]: 2520 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x3ab3638)]: 0 failure(s)
2024-04-28 20:02:50 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x43d23b8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x3ad3338)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x72c6e28)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x4cb1ce8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x5905ad8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x7272d28)]: 3027 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x3ab3638)]: 0 failure(s)
2024-04-28 20:02:58 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x43d23b8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x3ad3338)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x72c6e28)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x4cb1ce8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x5905ad8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x7272d28)]: 3534 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x3ab3638)]: 0 failure(s)
2024-04-28 20:02:58 [INFO] [evolutionary_search.cc:723] Sampled 50 candidate(s)
2024-04-28 20:03:18 [INFO] [evolutionary_search.cc:621] Evolve iter #0 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x43d23b8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x3ad3338)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x72c6e28)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x4cb1ce8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x5905ad8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x7272d28)]: 151 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x3ab3638)]: 0 failure(s)
2024-04-28 20:03:38 [INFO] [evolutionary_search.cc:621] Evolve iter #1 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x43d23b8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x3ad3338)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x72c6e28)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x4cb1ce8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x5905ad8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x7272d28)]: 138 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x3ab3638)]: 0 failure(s)
2024-04-28 20:03:57 [INFO] [evolutionary_search.cc:621] Evolve iter #2 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x43d23b8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x3ad3338)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x72c6e28)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x4cb1ce8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x5905ad8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x7272d28)]: 95 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x3ab3638)]: 0 failure(s)
2024-04-28 20:04:17 [INFO] [evolutionary_search.cc:621] Evolve iter #3 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x43d23b8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x3ad3338)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x72c6e28)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x4cb1ce8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x5905ad8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x7272d28)]: 115 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x3ab3638)]: 0 failure(s)
2024-04-28 20:04:18 [INFO] [evolutionary_search.cc:649] Scores of the best 64 candidates:
[1 : 16]:	0.9992  0.9977  0.9952  0.9940  0.9939  0.9939  0.9938  0.9937  0.9933  0.9916  0.9913  0.9912  0.9901  0.9896  0.9878  0.9874
[17 : 32]:	0.9867  0.9832  0.9829  0.9816  0.9815  0.9815  0.9814  0.9814  0.9806  0.9803  0.9802  0.9795  0.9793  0.9781  0.9774  0.9766
[33 : 48]:	0.9758  0.9757  0.9757  0.9756  0.9752  0.9751  0.9749  0.9743  0.9733  0.9726  0.9724  0.9695  0.9688  0.9680  0.9677  0.9676
[49 : 64]:	0.9673  0.9655  0.9637  0.9635  0.9615  0.9613  0.9601  0.9581  0.9581  0.9579  0.9573  0.9570  0.9533  0.9528  0.9519  0.9519
2024-04-28 20:04:18 [INFO] [evolutionary_search.cc:727] Got 64 candidate(s) with evolutionary search
2024-04-28 20:04:18 [INFO] [evolutionary_search.cc:730] Sending 63 candidates(s) for measurement
2024-04-28 20:24:03 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #1: GFLOPs: 2882.5474. Time: 419.1564 us. Best GFLOPs: 2882.5474
2024-04-28 20:24:03 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #2: GFLOPs: 37.2082. Time: 32472.3205 us. Best GFLOPs: 2882.5474
2024-04-28 20:24:03 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #3: GFLOPs: 935.5782. Time: 1291.4347 us. Best GFLOPs: 2882.5474
2024-04-28 20:24:03 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #4: GFLOPs: 4190.3448. Time: 288.3386 us. Best GFLOPs: 4190.3448
2024-04-28 20:24:03 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #5: GFLOPs: 287.0124. Time: 4209.7066 us. Best GFLOPs: 4190.3448
2024-04-28 20:24:03 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #6: GFLOPs: 105.2258. Time: 11482.3396 us. Best GFLOPs: 4190.3448
2024-04-28 20:24:03 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #7: GFLOPs: 32.2815. Time: 37428.2250 us. Best GFLOPs: 4190.3448
2024-04-28 20:24:03 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #8: GFLOPs: 361.3106. Time: 3344.0427 us. Best GFLOPs: 4190.3448
2024-04-28 20:24:03 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #9: GFLOPs: 142.4451. Time: 8482.1332 us. Best GFLOPs: 4190.3448
2024-04-28 20:24:03 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #10: GFLOPs: 108.1966. Time: 11167.0617 us. Best GFLOPs: 4190.3448
2024-04-28 20:24:03 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #11: GFLOPs: 505.7161. Time: 2389.1627 us. Best GFLOPs: 4190.3448
2024-04-28 20:24:03 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #12: GFLOPs: 4683.4137. Time: 257.9824 us. Best GFLOPs: 4683.4137
2024-04-28 20:24:03 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #13: GFLOPs: 57.5083. Time: 21009.8174 us. Best GFLOPs: 4683.4137
2024-04-28 20:24:03 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #14: GFLOPs: 4202.4549. Time: 287.5077 us. Best GFLOPs: 4683.4137
2024-04-28 20:24:03 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #15: GFLOPs: 694.9657. Time: 1738.5577 us. Best GFLOPs: 4683.4137
2024-04-28 20:24:03 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #16: GFLOPs: 2501.3835. Time: 483.0279 us. Best GFLOPs: 4683.4137
2024-04-28 20:24:03 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #17: GFLOPs: 299.2685. Time: 4037.3044 us. Best GFLOPs: 4683.4137
2024-04-28 20:24:03 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #18: GFLOPs: 2249.2374. Time: 537.1768 us. Best GFLOPs: 4683.4137
2024-04-28 20:24:03 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #19: GFLOPs: 3406.9634. Time: 354.6378 us. Best GFLOPs: 4683.4137
2024-04-28 20:24:03 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #20: GFLOPs: 3855.4839. Time: 313.3817 us. Best GFLOPs: 4683.4137
2024-04-28 20:24:03 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #21: GFLOPs: 580.6460. Time: 2080.8516 us. Best GFLOPs: 4683.4137
2024-04-28 20:24:03 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #22: GFLOPs: 161.8736. Time: 7464.0824 us. Best GFLOPs: 4683.4137
2024-04-28 20:24:03 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #23: GFLOPs: 70.6130. Time: 17110.6987 us. Best GFLOPs: 4683.4137
2024-04-28 20:24:03 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #24: GFLOPs: 55.4865. Time: 21775.3600 us. Best GFLOPs: 4683.4137
2024-04-28 20:24:03 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #25: GFLOPs: 530.0576. Time: 2279.4467 us. Best GFLOPs: 4683.4137
2024-04-28 20:24:03 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #26: GFLOPs: 2827.3228. Time: 427.3435 us. Best GFLOPs: 4683.4137
2024-04-28 20:24:03 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #27: GFLOPs: 6715.6358. Time: 179.9142 us. Best GFLOPs: 6715.6358
2024-04-28 20:24:03 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #28: GFLOPs: 188.1344. Time: 6422.2078 us. Best GFLOPs: 6715.6358
2024-04-28 20:24:03 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #29: GFLOPs: 2499.1107. Time: 483.4672 us. Best GFLOPs: 6715.6358
2024-04-28 20:24:03 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #30: GFLOPs: 60.8787. Time: 19846.6555 us. Best GFLOPs: 6715.6358
2024-04-28 20:24:03 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #31: GFLOPs: 2322.2157. Time: 520.2954 us. Best GFLOPs: 6715.6358
2024-04-28 20:24:03 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #32: GFLOPs: 3443.6528. Time: 350.8594 us. Best GFLOPs: 6715.6358
2024-04-28 20:24:03 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #33: GFLOPs: 3011.3951. Time: 401.2220 us. Best GFLOPs: 6715.6358
2024-04-28 20:24:03 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #34: GFLOPs: 1156.0557. Time: 1045.1383 us. Best GFLOPs: 6715.6358
2024-04-28 20:24:03 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #35: GFLOPs: 1301.8078. Time: 928.1233 us. Best GFLOPs: 6715.6358
2024-04-28 20:24:03 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #36: GFLOPs: 39.6122. Time: 30501.6325 us. Best GFLOPs: 6715.6358
2024-04-28 20:24:03 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #37: GFLOPs: 116.4893. Time: 10372.0962 us. Best GFLOPs: 6715.6358
2024-04-28 20:24:03 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #38: GFLOPs: 170.7521. Time: 7075.9765 us. Best GFLOPs: 6715.6358
2024-04-28 20:24:03 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #39: GFLOPs: 116.3503. Time: 10384.4863 us. Best GFLOPs: 6715.6358
2024-04-28 20:24:03 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #40: GFLOPs: 3036.7322. Time: 397.8744 us. Best GFLOPs: 6715.6358
2024-04-28 20:24:03 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #41: GFLOPs: 904.5692. Time: 1335.7056 us. Best GFLOPs: 6715.6358
2024-04-28 20:24:03 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #42: GFLOPs: 1911.5361. Time: 632.0770 us. Best GFLOPs: 6715.6358
2024-04-28 20:24:03 [INFO] [task_scheduler.cc:121] [Task #5: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #43: Error in building:
LocalBuilder: Timeout, killed after 30.0 seconds
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(256), T.int64(56), T.int64(56)), "float32"), p1: T.Buffer((T.int64(6), T.int64(6), T.int64(256), T.int64(256)), "float32"), p2: T.Buffer((T.int64(1), T.int64(256), T.int64(1), T.int64(1)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(256), T.int64(56), T.int64(56)), "float32")):
        T.func_attr({"layout_free_buffers": [1], "tir.noalias": T.bool(True)})
        # with T.block("root"):
        input_tile_local = T.alloc_buffer((T.int64(256), T.int64(196), T.int64(6), T.int64(6)), scope="local")
        data_pack = T.alloc_buffer((T.int64(6), T.int64(6), T.int64(256), T.int64(196)))
        bgemm = T.alloc_buffer((T.int64(6), T.int64(6), T.int64(256), T.int64(196)))
        inverse_local = T.alloc_buffer((T.int64(256), T.int64(196), T.int64(4), T.int64(4)), scope="local")
        data_pack_local = T.alloc_buffer((T.int64(6), T.int64(6), T.int64(256), T.int64(196)), scope="local")
        bgemm_local = T.alloc_buffer((T.int64(6), T.int64(6), T.int64(256), T.int64(196)), scope="local")
        data_pack_shared = T.alloc_buffer((T.int64(6), T.int64(6), T.int64(256), T.int64(196)), scope="shared")
        p1_shared = T.alloc_buffer((T.int64(6), T.int64(6), T.int64(256), T.int64(256)), scope="shared")
        for ci_p_fused_0 in T.thread_binding(T.int64(784), thread="blockIdx.x", annotations={"pragma_auto_unroll_max_step": 1024, "pragma_unroll_explicit": 1}):
            for ci_p_fused_1 in T.thread_binding(T.int64(64), thread="threadIdx.x"):
                for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(1), T.int64(6), T.int64(6)):
                    with T.block("input_tile"):
                        v_ci = T.axis.spatial(T.int64(256), (ci_p_fused_0 * T.int64(64) + ci_p_fused_1) // T.int64(196) + ax0)
                        v_p = T.axis.spatial(T.int64(196), (ci_p_fused_0 * T.int64(64) + ci_p_fused_1) % T.int64(196) + ax1)
                        v_eps, v_nu = T.axis.remap("SS", [ax2, ax3])
                        T.reads(p0[v_p // T.int64(196), v_ci, v_p % T.int64(196) // T.int64(14) * T.int64(4) + v_eps - T.int64(1), v_p % T.int64(14) * T.int64(4) + v_nu - T.int64(1)])
                        T.writes(input_tile_local[v_ci, v_p, v_eps, v_nu])
                        T.block_attr({"schedule_rule": "None"})
                        input_tile_local[v_ci, v_p, v_eps, v_nu] = T.if_then_else(T.int64(1) <= v_p % T.int64(196) // T.int64(14) * T.int64(4) + v_eps and v_p % T.int64(196) // T.int64(14) * T.int64(4) + v_eps < T.int64(57) and T.int64(1) <= v_p % T.int64(14) * T.int64(4) + v_nu and v_p % T.int64(14) * T.int64(4) + v_nu < T.int64(57), p0[v_p // T.int64(196), v_ci, v_p % T.int64(196) // T.int64(14) * T.int64(4) + v_eps - T.int64(1), v_p % T.int64(14) * T.int64(4) + v_nu - T.int64(1)], T.float32(0))
                for eps in T.unroll(T.int64(6)):
                    for nu in T.unroll(T.int64(6)):
                        with T.block("data_pack_init"):
                            v_eps, v_nu = T.axis.remap("SS", [eps, nu])
                            v_ci = T.axis.spatial(T.int64(256), (ci_p_fused_0 * T.int64(64) + ci_p_fused_1) // T.int64(196))
                            v_p = T.axis.spatial(T.int64(196), (ci_p_fused_0 * T.int64(64) + ci_p_fused_1) % T.int64(196))
                            T.reads()
                            T.writes(data_pack_local[v_eps, v_nu, v_ci, v_p])
                            T.block_attr({"schedule_rule": "conv2d_nchw_winograd_data_pack"})
                            data_pack_local[v_eps, v_nu, v_ci, v_p] = T.float32(0)
                        for r_a in T.unroll(T.int64(6)):
                            for r_b in T.unroll(T.int64(6)):
                                with T.block("data_pack_update"):
                                    v_eps, v_nu = T.axis.remap("SS", [eps, nu])
                                    v_ci = T.axis.spatial(T.int64(256), (ci_p_fused_0 * T.int64(64) + ci_p_fused_1) // T.int64(196))
                                    v_p = T.axis.spatial(T.int64(196), (ci_p_fused_0 * T.int64(64) + ci_p_fused_1) % T.int64(196))
                                    v_r_a, v_r_b = T.axis.remap("RR", [r_a, r_b])
                                    T.reads(data_pack_local[v_eps, v_nu, v_ci, v_p], input_tile_local[v_ci, v_p, v_r_a, v_r_b])
                                    T.writes(data_pack_local[v_eps, v_nu, v_ci, v_p])
                                    T.block_attr({"schedule_rule": "conv2d_nchw_winograd_data_pack"})
                                    data_pack_local[v_eps, v_nu, v_ci, v_p] = data_pack_local[v_eps, v_nu, v_ci, v_p] + input_tile_local[v_ci, v_p, v_r_a, v_r_b] * T.Select(v_r_a % T.int64(6) == T.int64(5) and v_eps % T.int64(6) == T.int64(5), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(5) and v_eps % T.int64(6) == T.int64(4), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(5) and v_eps % T.int64(6) == T.int64(3), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(5) and v_eps % T.int64(6) == T.int64(2), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(5) and v_eps % T.int64(6) == T.int64(1), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(5) and v_eps % T.int64(6) == T.int64(0), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(4) and v_eps % T.int64(6) == T.int64(5), T.float32(1.5), T.Select(v_r_a % T.int64(6) == T.int64(4) and v_eps % T.int64(6) == T.int64(4), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(4) and v_eps % T.int64(6) == T.int64(3), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(4) and v_eps % T.int64(6) == T.int64(2), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(4) and v_eps % T.int64(6) == T.int64(1), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(4) and v_eps % T.int64(6) == T.int64(0), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(3) and v_eps % T.int64(6) == T.int64(5), T.float32(-2), T.Select(v_r_a % T.int64(6) == T.int64(3) and v_eps % T.int64(6) == T.int64(4), T.float32(-0.5), T.Select(v_r_a % T.int64(6) == T.int64(3) and v_eps % T.int64(6) == T.int64(3), T.float32(2), T.Select(v_r_a % T.int64(6) == T.int64(3) and v_eps % T.int64(6) == T.int64(2), T.float32(2.5), T.Select(v_r_a % T.int64(6) == T.int64(3) and v_eps % T.int64(6) == T.int64(1), T.float32(0.5), T.Select(v_r_a % T.int64(6) == T.int64(3) and v_eps % T.int64(6) == T.int64(0), T.float32(1.5), T.Select(v_r_a % T.int64(6) == T.int64(2) and v_eps % T.int64(6) == T.int64(5), T.float32(-1.5), T.Select(v_r_a % T.int64(6) == T.int64(2) and v_eps % T.int64(6) == T.int64(4), T.float32(-1), T.Select(v_r_a % T.int64(6) == T.int64(2) and v_eps % T.int64(6) == T.int64(3), T.float32(-1), T.Select(v_r_a % T.int64(6) == T.int64(2) and v_eps % T.int64(6) == T.int64(2), T.float32(0.5), T.Select(v_r_a % T.int64(6) == T.int64(2) and v_eps % T.int64(6) == T.int64(1), T.float32(-2.5), T.Select(v_r_a % T.int64(6) == T.int64(2) and v_eps % T.int64(6) == T.int64(0), T.float32(-2), T.Select(v_r_a % T.int64(6) == T.int64(1) and v_eps % T.int64(6) == T.int64(5), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(1) and v_eps % T.int64(6) == T.int64(4), T.float32(0.5), T.Select(v_r_a % T.int64(6) == T.int64(1) and v_eps % T.int64(6) == T.int64(3), T.float32(-2), T.Select(v_r_a % T.int64(6) == T.int64(1) and v_eps % T.int64(6) == T.int64(2), T.float32(-1), T.Select(v_r_a % T.int64(6) == T.int64(1) and v_eps % T.int64(6) == T.int64(1), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(1) and v_eps % T.int64(6) == T.int64(0), T.float32(-1.5), T.Select(v_r_a % T.int64(6) == T.int64(0) and v_eps % T.int64(6) == T.int64(5), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(0) and v_eps % T.int64(6) == T.int64(4), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(0) and v_eps % T.int64(6) == T.int64(3), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(0) and v_eps % T.int64(6) == T.int64(2), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(0) and v_eps % T.int64(6) == T.int64(1), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(0) and v_eps % T.int64(6) == T.int64(0), T.float32(1), T.float32(0))))))))))))))))))))))))))))))))))))) * T.Select(v_r_b % T.int64(6) == T.int64(5) and v_nu % T.int64(6) == T.int64(5), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(5) and v_nu % T.int64(6) == T.int64(4), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(5) and v_nu % T.int64(6) == T.int64(3), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(5) and v_nu % T.int64(6) == T.int64(2), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(5) and v_nu % T.int64(6) == T.int64(1), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(5) and v_nu % T.int64(6) == T.int64(0), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(4) and v_nu % T.int64(6) == T.int64(5), T.float32(1.5), T.Select(v_r_b % T.int64(6) == T.int64(4) and v_nu % T.int64(6) == T.int64(4), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(4) and v_nu % T.int64(6) == T.int64(3), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(4) and v_nu % T.int64(6) == T.int64(2), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(4) and v_nu % T.int64(6) == T.int64(1), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(4) and v_nu % T.int64(6) == T.int64(0), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(3) and v_nu % T.int64(6) == T.int64(5), T.float32(-2), T.Select(v_r_b % T.int64(6) == T.int64(3) and v_nu % T.int64(6) == T.int64(4), T.float32(-0.5), T.Select(v_r_b % T.int64(6) == T.int64(3) and v_nu % T.int64(6) == T.int64(3), T.float32(2), T.Select(v_r_b % T.int64(6) == T.int64(3) and v_nu % T.int64(6) == T.int64(2), T.float32(2.5), T.Select(v_r_b % T.int64(6) == T.int64(3) and v_nu % T.int64(6) == T.int64(1), T.float32(0.5), T.Select(v_r_b % T.int64(6) == T.int64(3) and v_nu % T.int64(6) == T.int64(0), T.float32(1.5), T.Select(v_r_b % T.int64(6) == T.int64(2) and v_nu % T.int64(6) == T.int64(5), T.float32(-1.5), T.Select(v_r_b % T.int64(6) == T.int64(2) and v_nu % T.int64(6) == T.int64(4), T.float32(-1), T.Select(v_r_b % T.int64(6) == T.int64(2) and v_nu % T.int64(6) == T.int64(3), T.float32(-1), T.Select(v_r_b % T.int64(6) == T.int64(2) and v_nu % T.int64(6) == T.int64(2), T.float32(0.5), T.Select(v_r_b % T.int64(6) == T.int64(2) and v_nu % T.int64(6) == T.int64(1), T.float32(-2.5), T.Select(v_r_b % T.int64(6) == T.int64(2) and v_nu % T.int64(6) == T.int64(0), T.float32(-2), T.Select(v_r_b % T.int64(6) == T.int64(1) and v_nu % T.int64(6) == T.int64(5), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(1) and v_nu % T.int64(6) == T.int64(4), T.float32(0.5), T.Select(v_r_b % T.int64(6) == T.int64(1) and v_nu % T.int64(6) == T.int64(3), T.float32(-2), T.Select(v_r_b % T.int64(6) == T.int64(1) and v_nu % T.int64(6) == T.int64(2), T.float32(-1), T.Select(v_r_b % T.int64(6) == T.int64(1) and v_nu % T.int64(6) == T.int64(1), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(1) and v_nu % T.int64(6) == T.int64(0), T.float32(-1.5), T.Select(v_r_b % T.int64(6) == T.int64(0) and v_nu % T.int64(6) == T.int64(5), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(0) and v_nu % T.int64(6) == T.int64(4), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(0) and v_nu % T.int64(6) == T.int64(3), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(0) and v_nu % T.int64(6) == T.int64(2), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(0) and v_nu % T.int64(6) == T.int64(1), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(0) and v_nu % T.int64(6) == T.int64(0), T.float32(1), T.float32(0)))))))))))))))))))))))))))))))))))))
                for ax0, ax1, ax2, ax3 in T.grid(T.int64(6), T.int64(6), T.int64(1), T.int64(1)):
                    with T.block("data_pack_local"):
                        v0, v1 = T.axis.remap("SS", [ax0, ax1])
                        v2 = T.axis.spatial(T.int64(256), (ci_p_fused_0 * T.int64(64) + ci_p_fused_1) // T.int64(196) + ax2)
                        v3 = T.axis.spatial(T.int64(196), (ci_p_fused_0 * T.int64(64) + ci_p_fused_1) % T.int64(196) + ax3)
                        T.reads(data_pack_local[v0, v1, v2, v3])
                        T.writes(data_pack[v0, v1, v2, v3])
                        data_pack[v0, v1, v2, v3] = data_pack_local[v0, v1, v2, v3]
        for eps_0_nu_0_co_0_p_0_fused in T.thread_binding(T.int64(24), thread="blockIdx.x", annotations={"pragma_auto_unroll_max_step": 1024, "pragma_unroll_explicit": 1}):
            for eps_1_nu_1_co_1_p_1_fused in T.thread_binding(T.int64(2), thread="vthread.x"):
                for eps_2_nu_2_co_2_p_2_fused in T.thread_binding(T.int64(98), thread="threadIdx.x"):
                    for eps_3_init, nu_3_init, co_3_init, p_3_init, eps_4_init, nu_4_init, co_4_init, p_4_init in T.grid(T.int64(1), T.int64(1), T.int64(2), T.int64(1), T.int64(3), T.int64(1), T.int64(64), T.int64(1)):
                        with T.block("bgemm_init"):
                            v_eps = T.axis.spatial(T.int64(6), eps_0_nu_0_co_0_p_0_fused // T.int64(12) * T.int64(3) + eps_3_init * T.int64(3) + eps_4_init)
                            v_nu = T.axis.spatial(T.int64(6), eps_0_nu_0_co_0_p_0_fused % T.int64(12) // T.int64(2) + nu_3_init + nu_4_init)
                            v_co = T.axis.spatial(T.int64(256), eps_1_nu_1_co_1_p_1_fused * T.int64(128) + co_3_init * T.int64(64) + co_4_init)
                            v_p = T.axis.spatial(T.int64(196), eps_0_nu_0_co_0_p_0_fused % T.int64(2) * T.int64(98) + eps_2_nu_2_co_2_p_2_fused + p_3_init + p_4_init)
                            T.reads()
                            T.writes(bgemm_local[v_eps, v_nu, v_co, v_p])
                            T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 32, "meta_schedule.tiling_structure": "SSSRRSRS"})
                            bgemm_local[v_eps, v_nu, v_co, v_p] = T.float32(0)
                    for ci_0_fused in T.serial(T.int64(128), annotations={"software_pipeline_async_stages": [0], "software_pipeline_order": [0, 1, 2], "software_pipeline_stage": [0, 0, 3]}):
                        for ax0_ax1_ax2_ax3_fused_0 in range(T.int64(3)):
                            for ax0_ax1_ax2_ax3_fused_1 in T.thread_binding(T.int64(98), thread="threadIdx.x"):
                                for ax0_ax1_ax2_ax3_fused_2 in T.vectorized(T.int64(2)):
                                    with T.block("data_pack_shared"):
                                        v0 = T.axis.spatial(T.int64(6), eps_0_nu_0_co_0_p_0_fused // T.int64(12) * T.int64(3) + (ax0_ax1_ax2_ax3_fused_0 * T.int64(196) + ax0_ax1_ax2_ax3_fused_1 * T.int64(2) + ax0_ax1_ax2_ax3_fused_2) // T.int64(196))
                                        v1 = T.axis.spatial(T.int64(6), eps_0_nu_0_co_0_p_0_fused % T.int64(12) // T.int64(2))
                                        v2 = T.axis.spatial(T.int64(256), ci_0_fused * T.int64(2) + (ax0_ax1_ax2_ax3_fused_0 * T.int64(196) + ax0_ax1_ax2_ax3_fused_1 * T.int64(2) + ax0_ax1_ax2_ax3_fused_2) % T.int64(196) // T.int64(98))
                                        v3 = T.axis.spatial(T.int64(196), eps_0_nu_0_co_0_p_0_fused % T.int64(2) * T.int64(98) + (ax0_ax1_ax2_ax3_fused_0 * T.int64(196) + ax0_ax1_ax2_ax3_fused_1 * T.int64(2) + ax0_ax1_ax2_ax3_fused_2) % T.int64(98))
                                        T.reads(data_pack[v0, v1, v2, v3])
                                        T.writes(data_pack_shared[v0, v1, v2, v3])
                                        data_pack_shared[v0, v1, v2, v3] = data_pack[v0, v1, v2, v3]
                        for ax0_ax1_ax2_ax3_fused_0 in range(T.int64(6)):
                            for ax0_ax1_ax2_ax3_fused_1 in T.thread_binding(T.int64(98), thread="threadIdx.x"):
                                for ax0_ax1_ax2_ax3_fused_2 in T.vectorized(T.int64(3)):
                                    with T.block("p1_shared"):
                                        v0 = T.axis.spatial(T.int64(6), eps_0_nu_0_co_0_p_0_fused // T.int64(12) * T.int64(3) + (ax0_ax1_ax2_ax3_fused_0 * T.int64(294) + ax0_ax1_ax2_ax3_fused_1 * T.int64(3) + ax0_ax1_ax2_ax3_fused_2) // T.int64(512))
                                        v1 = T.axis.spatial(T.int64(6), eps_0_nu_0_co_0_p_0_fused % T.int64(12) // T.int64(2))
                                        v2 = T.axis.spatial(T.int64(256), ci_0_fused * T.int64(2) + (ax0_ax1_ax2_ax3_fused_0 * T.int64(294) + ax0_ax1_ax2_ax3_fused_1 * T.int64(3) + ax0_ax1_ax2_ax3_fused_2) % T.int64(512) // T.int64(256))
                                        v3 = T.axis.spatial(T.int64(256), (ax0_ax1_ax2_ax3_fused_0 * T.int64(294) + ax0_ax1_ax2_ax3_fused_1 * T.int64(3) + ax0_ax1_ax2_ax3_fused_2) % T.int64(256))
                                        T.where((ax0_ax1_ax2_ax3_fused_0 * T.int64(98) + ax0_ax1_ax2_ax3_fused_1) * T.int64(3) + ax0_ax1_ax2_ax3_fused_2 < T.int64(1536))
                                        T.reads(p1[v0, v1, v2, v3])
                                        T.writes(p1_shared[v0, v1, v2, v3])
                                        p1_shared[v0, v1, v2, v3] = p1[v0, v1, v2, v3]
                        for ci_1, eps_3, nu_3, co_3, p_3, ci_2, eps_4, nu_4, co_4, p_4 in T.grid(T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(1), T.int64(2), T.int64(3), T.int64(1), T.int64(64), T.int64(1)):
                            with T.block("bgemm_update"):
                                v_eps = T.axis.spatial(T.int64(6), eps_0_nu_0_co_0_p_0_fused // T.int64(12) * T.int64(3) + eps_3 * T.int64(3) + eps_4)
                                v_nu = T.axis.spatial(T.int64(6), eps_0_nu_0_co_0_p_0_fused % T.int64(12) // T.int64(2) + nu_3 + nu_4)
                                v_co = T.axis.spatial(T.int64(256), eps_1_nu_1_co_1_p_1_fused * T.int64(128) + co_3 * T.int64(64) + co_4)
                                v_p = T.axis.spatial(T.int64(196), eps_0_nu_0_co_0_p_0_fused % T.int64(2) * T.int64(98) + eps_2_nu_2_co_2_p_2_fused + p_3 + p_4)
                                v_ci = T.axis.reduce(T.int64(256), ci_0_fused * T.int64(2) + ci_1 * T.int64(2) + ci_2)
                                T.reads(bgemm_local[v_eps, v_nu, v_co, v_p], data_pack_shared[v_eps, v_nu, v_ci, v_p], p1_shared[v_eps, v_nu, v_ci, v_co])
                                T.writes(bgemm_local[v_eps, v_nu, v_co, v_p])
                                T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 32, "meta_schedule.tiling_structure": "SSSRRSRS"})
                                bgemm_local[v_eps, v_nu, v_co, v_p] = bgemm_local[v_eps, v_nu, v_co, v_p] + data_pack_shared[v_eps, v_nu, v_ci, v_p] * p1_shared[v_eps, v_nu, v_ci, v_co]
                    for ax0, ax1, ax2, ax3 in T.grid(T.int64(3), T.int64(1), T.int64(128), T.int64(1)):
                        with T.block("bgemm_local"):
                            v0 = T.axis.spatial(T.int64(6), eps_0_nu_0_co_0_p_0_fused // T.int64(12) * T.int64(3) + ax0)
                            v1 = T.axis.spatial(T.int64(6), eps_0_nu_0_co_0_p_0_fused % T.int64(12) // T.int64(2) + ax1)
                            v2 = T.axis.spatial(T.int64(256), eps_1_nu_1_co_1_p_1_fused * T.int64(128) + ax2)
                            v3 = T.axis.spatial(T.int64(196), eps_0_nu_0_co_0_p_0_fused % T.int64(2) * T.int64(98) + eps_2_nu_2_co_2_p_2_fused + ax3)
                            T.reads(bgemm_local[v0, v1, v2, v3])
                            T.writes(bgemm[v0, v1, v2, v3])
                            bgemm[v0, v1, v2, v3] = bgemm_local[v0, v1, v2, v3]
        for n_co_h_0_w_0_fused_0 in T.thread_binding(T.int64(392), thread="blockIdx.x", annotations={"pragma_auto_unroll_max_step": 1024, "pragma_unroll_explicit": 1}):
            for n_co_h_0_w_0_fused_1 in T.thread_binding(T.int64(128), thread="threadIdx.x"):
                for ax0, ax1 in T.grid(T.int64(1), T.int64(1)):
                    for ax2 in T.unroll(T.int64(4)):
                        for ax3 in T.unroll(T.int64(4)):
                            with T.block("inverse_init"):
                                v_co = T.axis.spatial(T.int64(256), (n_co_h_0_w_0_fused_0 * T.int64(128) + n_co_h_0_w_0_fused_1) // T.int64(196) + ax0)
                                v_p = T.axis.spatial(T.int64(196), (n_co_h_0_w_0_fused_0 * T.int64(128) + n_co_h_0_w_0_fused_1) % T.int64(196) + ax1)
                                v_vh, v_vw = T.axis.remap("SS", [ax2, ax3])
                                T.reads()
                                T.writes(inverse_local[v_co, v_p, v_vh, v_vw])
                                T.block_attr({"schedule_rule": "conv2d_nchw_winograd_inverse"})
                                inverse_local[v_co, v_p, v_vh, v_vw] = T.float32(0)
                            for ax4 in T.unroll(T.int64(6)):
                                for ax5 in T.unroll(T.int64(6)):
                                    with T.block("inverse_update"):
                                        v_co = T.axis.spatial(T.int64(256), (n_co_h_0_w_0_fused_0 * T.int64(128) + n_co_h_0_w_0_fused_1) // T.int64(196) + ax0)
                                        v_p = T.axis.spatial(T.int64(196), (n_co_h_0_w_0_fused_0 * T.int64(128) + n_co_h_0_w_0_fused_1) % T.int64(196) + ax1)
                                        v_vh, v_vw, v_r_a, v_r_b = T.axis.remap("SSRR", [ax2, ax3, ax4, ax5])
                                        T.reads(inverse_local[v_co, v_p, v_vh, v_vw], bgemm[v_r_a, v_r_b, v_co, v_p])
                                        T.writes(inverse_local[v_co, v_p, v_vh, v_vw])
                                        T.block_attr({"schedule_rule": "conv2d_nchw_winograd_inverse"})
                                        inverse_local[v_co, v_p, v_vh, v_vw] = inverse_local[v_co, v_p, v_vh, v_vw] + bgemm[v_r_a, v_r_b, v_co, v_p] * T.Select(v_r_a % T.int64(6) == T.int64(5) and v_vh % T.int64(4) == T.int64(3), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(5) and v_vh % T.int64(4) == T.int64(2), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(5) and v_vh % T.int64(4) == T.int64(1), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(5) and v_vh % T.int64(4) == T.int64(0), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(4) and v_vh % T.int64(4) == T.int64(3), T.float32(-8), T.Select(v_r_a % T.int64(6) == T.int64(4) and v_vh % T.int64(4) == T.int64(2), T.float32(4), T.Select(v_r_a % T.int64(6) == T.int64(4) and v_vh % T.int64(4) == T.int64(1), T.float32(-2), T.Select(v_r_a % T.int64(6) == T.int64(4) and v_vh % T.int64(4) == T.int64(0), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(3) and v_vh % T.int64(4) == T.int64(3), T.float32(0.125), T.Select(v_r_a % T.int64(6) == T.int64(3) and v_vh % T.int64(4) == T.int64(2), T.float32(0.25), T.Select(v_r_a % T.int64(6) == T.int64(3) and v_vh % T.int64(4) == T.int64(1), T.float32(0.5), T.Select(v_r_a % T.int64(6) == T.int64(3) and v_vh % T.int64(4) == T.int64(0), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(2) and v_vh % T.int64(4) == T.int64(3), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(2) and v_vh % T.int64(4) == T.int64(2), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(2) and v_vh % T.int64(4) == T.int64(1), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(2) and v_vh % T.int64(4) == T.int64(0), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(1) and v_vh % T.int64(4) == T.int64(3), T.float32(-1), T.Select(v_r_a % T.int64(6) == T.int64(1) and v_vh % T.int64(4) == T.int64(2), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(1) and v_vh % T.int64(4) == T.int64(1), T.float32(-1), T.Select(v_r_a % T.int64(6) == T.int64(1) and v_vh % T.int64(4) == T.int64(0), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(0) and v_vh % T.int64(4) == T.int64(3), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(0) and v_vh % T.int64(4) == T.int64(2), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(0) and v_vh % T.int64(4) == T.int64(1), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(0) and v_vh % T.int64(4) == T.int64(0), T.float32(1), T.float32(0))))))))))))))))))))))))) * T.Select(v_r_b % T.int64(6) == T.int64(5) and v_vw % T.int64(4) == T.int64(3), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(5) and v_vw % T.int64(4) == T.int64(2), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(5) and v_vw % T.int64(4) == T.int64(1), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(5) and v_vw % T.int64(4) == T.int64(0), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(4) and v_vw % T.int64(4) == T.int64(3), T.float32(-8), T.Select(v_r_b % T.int64(6) == T.int64(4) and v_vw % T.int64(4) == T.int64(2), T.float32(4), T.Select(v_r_b % T.int64(6) == T.int64(4) and v_vw % T.int64(4) == T.int64(1), T.float32(-2), T.Select(v_r_b % T.int64(6) == T.int64(4) and v_vw % T.int64(4) == T.int64(0), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(3) and v_vw % T.int64(4) == T.int64(3), T.float32(0.125), T.Select(v_r_b % T.int64(6) == T.int64(3) and v_vw % T.int64(4) == T.int64(2), T.float32(0.25), T.Select(v_r_b % T.int64(6) == T.int64(3) and v_vw % T.int64(4) == T.int64(1), T.float32(0.5), T.Select(v_r_b % T.int64(6) == T.int64(3) and v_vw % T.int64(4) == T.int64(0), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(2) and v_vw % T.int64(4) == T.int64(3), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(2) and v_vw % T.int64(4) == T.int64(2), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(2) and v_vw % T.int64(4) == T.int64(1), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(2) and v_vw % T.int64(4) == T.int64(0), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(1) and v_vw % T.int64(4) == T.int64(3), T.float32(-1), T.Select(v_r_b % T.int64(6) == T.int64(1) and v_vw % T.int64(4) == T.int64(2), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(1) and v_vw % T.int64(4) == T.int64(1), T.float32(-1), T.Select(v_r_b % T.int64(6) == T.int64(1) and v_vw % T.int64(4) == T.int64(0), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(0) and v_vw % T.int64(4) == T.int64(3), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(0) and v_vw % T.int64(4) == T.int64(2), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(0) and v_vw % T.int64(4) == T.int64(1), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(0) and v_vw % T.int64(4) == T.int64(0), T.float32(1), T.float32(0)))))))))))))))))))))))))
                for h_1, w_1 in T.grid(T.int64(4), T.int64(4)):
                    with T.block("conv2d_winograd"):
                        v_n = T.axis.spatial(T.int64(1), T.int64(0))
                        v_co = T.axis.spatial(T.int64(256), (n_co_h_0_w_0_fused_0 * T.int64(128) + n_co_h_0_w_0_fused_1) // T.int64(196))
                        v_h = T.axis.spatial(T.int64(56), (n_co_h_0_w_0_fused_0 * T.int64(128) + n_co_h_0_w_0_fused_1) % T.int64(196) // T.int64(14) * T.int64(4) + h_1)
                        v_w = T.axis.spatial(T.int64(56), (n_co_h_0_w_0_fused_0 * T.int64(128) + n_co_h_0_w_0_fused_1) % T.int64(14) * T.int64(4) + w_1)
                        T.reads(inverse_local[v_co, v_n * T.int64(196) + v_h // T.int64(4) * T.int64(14) + v_w // T.int64(4), v_h % T.int64(4), v_w % T.int64(4)], p2[v_n, v_co, T.int64(0), T.int64(0)])
                        T.writes(T_relu[v_n, v_co, v_h, v_w])
                        T_relu[v_n, v_co, v_h, v_w] = T.max(inverse_local[v_co, v_n * T.int64(196) + v_h // T.int64(4) * T.int64(14) + v_w // T.int64(4), v_h % T.int64(4), v_w % T.int64(4)] + p2[v_n, v_co, T.int64(0), T.int64(0)], T.float32(0))
b0 = sch.get_block(name="data_pack", func_name="main")
b1 = sch.get_block(name="bgemm", func_name="main")
b2 = sch.get_block(name="inverse", func_name="main")
b3 = sch.get_block(name="conv2d_winograd", func_name="main")
b4 = sch.get_block(name="T_add", func_name="main")
b5 = sch.get_block(name="T_relu", func_name="main")
b6 = sch.get_block(name="root", func_name="main")
b7, b8 = sch.get_producers(block=b2)
sch.compute_inline(block=b8)
b9, = sch.get_consumers(block=b2)
l10, l11, l12, l13 = sch.get_loops(block=b9)
l14, l15 = sch.split(loop=l12, factors=[None, 4], preserve_unit_iters=True)
l16, l17 = sch.split(loop=l13, factors=[None, 4], preserve_unit_iters=True)
sch.reorder(l14, l16, l15, l17)
sch.compute_at(block=b2, loop=l16, preserve_unit_loops=True, index=-1)
sch.set_scope(block=b2, buffer_index=0, storage_scope="local")
l18, l19, l20, l21, l22, l23, l24, l25, l26, l27 = sch.get_loops(block=b2)
sch.unroll(loop=l24)
sch.unroll(loop=l25)
sch.unroll(loop=l26)
sch.unroll(loop=l27)
b28, b29 = sch.get_producers(block=b0)
sch.compute_inline(block=b29)
b30, = sch.get_producers(block=b28)
l31, l32, l33, l34, l35, l36 = sch.get_loops(block=b0)
sch.reorder(l33, l34, l31, l32, l35, l36)
sch.unroll(loop=l31)
sch.unroll(loop=l32)
sch.unroll(loop=l35)
sch.unroll(loop=l36)
l37 = sch.fuse(l33, l34, preserve_unit_iters=True)
v38 = sch.sample_categorical(candidates=[32, 64, 128, 256, 512, 1024], probs=[0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666], decision=1)
l39, l40 = sch.split(loop=l37, factors=[None, v38], preserve_unit_iters=True)
sch.bind(loop=l39, thread_axis="blockIdx.x")
sch.bind(loop=l40, thread_axis="threadIdx.x")
b41 = sch.cache_write(block=b0, write_buffer_index=0, storage_scope="local")
sch.reverse_compute_at(block=b41, loop=l40, preserve_unit_loops=True, index=-1)
sch.compute_at(block=b28, loop=l40, preserve_unit_loops=True, index=-1)
sch.set_scope(block=b28, buffer_index=0, storage_scope="local")
sch.compute_inline(block=b30)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSSRRSRS")
l42, l43, l44, l45, l46 = sch.get_loops(block=b1)
v47, v48, v49, v50, v51 = sch.sample_perfect_tile(loop=l42, n=5, max_innermost_factor=64, decision=[2, 1, 1, 1, 3])
l52, l53, l54, l55, l56 = sch.split(loop=l42, factors=[v47, v48, v49, v50, v51], preserve_unit_iters=True)
v57, v58, v59, v60, v61 = sch.sample_perfect_tile(loop=l43, n=5, max_innermost_factor=64, decision=[6, 1, 1, 1, 1])
l62, l63, l64, l65, l66 = sch.split(loop=l43, factors=[v57, v58, v59, v60, v61], preserve_unit_iters=True)
v67, v68, v69, v70, v71 = sch.sample_perfect_tile(loop=l44, n=5, max_innermost_factor=64, decision=[1, 2, 1, 2, 64])
l72, l73, l74, l75, l76 = sch.split(loop=l44, factors=[v67, v68, v69, v70, v71], preserve_unit_iters=True)
v77, v78, v79, v80, v81 = sch.sample_perfect_tile(loop=l45, n=5, max_innermost_factor=64, decision=[2, 1, 98, 1, 1])
l82, l83, l84, l85, l86 = sch.split(loop=l45, factors=[v77, v78, v79, v80, v81], preserve_unit_iters=True)
v87, v88, v89 = sch.sample_perfect_tile(loop=l46, n=3, max_innermost_factor=64, decision=[128, 1, 2])
l90, l91, l92 = sch.split(loop=l46, factors=[v87, v88, v89], preserve_unit_iters=True)
sch.reorder(l52, l62, l72, l82, l53, l63, l73, l83, l54, l64, l74, l84, l90, l91, l55, l65, l75, l85, l92, l56, l66, l76, l86)
l93 = sch.fuse(l52, l62, l72, l82, preserve_unit_iters=True)
sch.bind(loop=l93, thread_axis="blockIdx.x")
l94 = sch.fuse(l53, l63, l73, l83, preserve_unit_iters=True)
sch.bind(loop=l94, thread_axis="vthread.x")
l95 = sch.fuse(l54, l64, l74, l84, preserve_unit_iters=True)
sch.bind(loop=l95, thread_axis="threadIdx.x")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_low_inclusive", ann_val=32)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_high_inclusive", ann_val=1024)
b96 = sch.cache_write(block=b1, write_buffer_index=0, storage_scope="local")
sch.reverse_compute_at(block=b96, loop=l95, preserve_unit_loops=True, index=-1)
b97 = sch.cache_read(block=b1, read_buffer_index=0, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b97, loop=l90, preserve_unit_loops=True, index=-1)
l98, l99, l100, l101, l102, l103, l104, l105 = sch.get_loops(block=b97)
l106 = sch.fuse(l102, l103, l104, l105, preserve_unit_iters=True)
v107 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=1)
sch.annotate(block_or_loop=b97, ann_key="meta_schedule.cooperative_fetch", ann_val=v107)
b108 = sch.cache_read(block=b1, read_buffer_index=1, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b108, loop=l90, preserve_unit_loops=True, index=-1)
l109, l110, l111, l112, l113, l114, l115, l116 = sch.get_loops(block=b108)
l117 = sch.fuse(l113, l114, l115, l116, preserve_unit_iters=True)
v118 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=2)
sch.annotate(block_or_loop=b108, ann_key="meta_schedule.cooperative_fetch", ann_val=v118)
l119 = sch.fuse(l90, preserve_unit_iters=True)
sch.annotate(block_or_loop=l119, ann_key="software_pipeline_stage", ann_val=[0, 0, 3])
sch.annotate(block_or_loop=l119, ann_key="software_pipeline_order", ann_val=[0, 1, 2])
sch.annotate(block_or_loop=l119, ann_key="software_pipeline_async_stages", ann_val=[0])
sch.reverse_compute_inline(block=b5)
sch.reverse_compute_inline(block=b4)
v120 = sch.sample_categorical(candidates=[0, 16, 64, 512, 1024], probs=[0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001], decision=4)
sch.annotate(block_or_loop=b6, ann_key="meta_schedule.unroll_explicit", ann_val=v120)
l121, l122, l123, l124, l125, l126 = sch.get_loops(block=b3)
l127 = sch.fuse(l121, l122, l123, l124, preserve_unit_iters=True)
v128 = sch.sample_categorical(candidates=[32, 64, 128, 256, 512, 1024], probs=[0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666], decision=2)
l129, l130 = sch.split(loop=l127, factors=[None, v128], preserve_unit_iters=True)
sch.bind(loop=l129, thread_axis="blockIdx.x")
sch.bind(loop=l130, thread_axis="threadIdx.x")
sch.enter_postproc()
sch.unannotate(block_or_loop=b97, ann_key="meta_schedule.cooperative_fetch")
l131, l132, l133, l134, l135 = sch.get_loops(block=b97)
l136, l137, l138 = sch.split(loop=l135, factors=[None, 98, 2], preserve_unit_iters=True)
sch.vectorize(loop=l138)
sch.bind(loop=l137, thread_axis="threadIdx.x")
sch.unannotate(block_or_loop=b108, ann_key="meta_schedule.cooperative_fetch")
l139, l140, l141, l142, l143 = sch.get_loops(block=b108)
l144, l145, l146 = sch.split(loop=l143, factors=[None, 98, 3], preserve_unit_iters=True)
sch.vectorize(loop=l146)
sch.bind(loop=l145, thread_axis="threadIdx.x")
b147 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b147, ann_key="meta_schedule.unroll_explicit")
b148, b149, b150, b151, b152, b153, b154, b155, b156 = sch.get_child_blocks(b147)
l157, l158, l159, l160, l161, l162 = sch.get_loops(block=b148)
l163, l164, l165, l166, l167, l168 = sch.get_loops(block=b149)
sch.annotate(block_or_loop=l163, ann_key="pragma_auto_unroll_max_step", ann_val=1024)
sch.annotate(block_or_loop=l163, ann_key="pragma_unroll_explicit", ann_val=1)
l169, l170, l171, l172, l173, l174 = sch.get_loops(block=b150)
l175, l176, l177, l178, l179, l180, l181 = sch.get_loops(block=b151)
l182, l183, l184, l185, l186, l187, l188 = sch.get_loops(block=b152)
l189, l190, l191, l192, l193, l194, l195, l196, l197, l198, l199, l200, l201, l202 = sch.get_loops(block=b153)
sch.annotate(block_or_loop=l189, ann_key="pragma_auto_unroll_max_step", ann_val=1024)
sch.annotate(block_or_loop=l189, ann_key="pragma_unroll_explicit", ann_val=1)
l203, l204, l205, l206, l207, l208, l209 = sch.get_loops(block=b154)
l210, l211, l212, l213, l214, l215, l216, l217 = sch.get_loops(block=b155)
sch.annotate(block_or_loop=l210, ann_key="pragma_auto_unroll_max_step", ann_val=1024)
sch.annotate(block_or_loop=l210, ann_key="pragma_unroll_explicit", ann_val=1)
l218, l219, l220, l221 = sch.get_loops(block=b156)
b222 = sch.get_block(name="data_pack", func_name="main")
l223, l224, l225, l226, l227, l228 = sch.get_loops(block=b222)
b229 = sch.decompose_reduction(block=b222, loop=l227)
b230 = sch.get_block(name="bgemm", func_name="main")
l231, l232, l233, l234, l235, l236, l237, l238, l239, l240, l241, l242, l243, l244 = sch.get_loops(block=b230)
b245 = sch.decompose_reduction(block=b230, loop=l234)
b246 = sch.get_block(name="inverse", func_name="main")
l247, l248, l249, l250, l251, l252, l253, l254 = sch.get_loops(block=b246)
b255 = sch.decompose_reduction(block=b246, loop=l253)
2024-04-28 20:24:03 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #44: GFLOPs: 122.6783. Time: 9848.8318 us. Best GFLOPs: 6715.6358
2024-04-28 20:24:03 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #45: GFLOPs: 271.7267. Time: 4446.5196 us. Best GFLOPs: 6715.6358
2024-04-28 20:24:03 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #46: GFLOPs: 5076.6740. Time: 237.9980 us. Best GFLOPs: 6715.6358
2024-04-28 20:24:03 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #47: GFLOPs: 2390.8731. Time: 505.3543 us. Best GFLOPs: 6715.6358
2024-04-28 20:24:03 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #48: GFLOPs: 339.0844. Time: 3563.2374 us. Best GFLOPs: 6715.6358
2024-04-28 20:24:03 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #49: GFLOPs: 73.4283. Time: 16454.6563 us. Best GFLOPs: 6715.6358
2024-04-28 20:24:03 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #50: GFLOPs: 1955.3884. Time: 617.9018 us. Best GFLOPs: 6715.6358
2024-04-28 20:24:03 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #51: GFLOPs: 8541.8420. Time: 141.4494 us. Best GFLOPs: 8541.8420
2024-04-28 20:24:03 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #52: GFLOPs: 151.2330. Time: 7989.2478 us. Best GFLOPs: 8541.8420
2024-04-28 20:24:03 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #53: GFLOPs: 57.5885. Time: 20980.5312 us. Best GFLOPs: 8541.8420
2024-04-28 20:24:03 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #54: GFLOPs: 3630.0854. Time: 332.8401 us. Best GFLOPs: 8541.8420
2024-04-28 20:24:03 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #55: GFLOPs: 259.2143. Time: 4661.1550 us. Best GFLOPs: 8541.8420
2024-04-28 20:24:03 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #56: GFLOPs: 1238.5276. Time: 975.5439 us. Best GFLOPs: 8541.8420
2024-04-28 20:24:03 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #57: GFLOPs: 99.7678. Time: 12110.5067 us. Best GFLOPs: 8541.8420
2024-04-28 20:24:03 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #58: GFLOPs: 4670.6908. Time: 258.6851 us. Best GFLOPs: 8541.8420
2024-04-28 20:24:03 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #59: GFLOPs: 41.3365. Time: 29229.3127 us. Best GFLOPs: 8541.8420
2024-04-28 20:24:03 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #60: GFLOPs: 5081.8979. Time: 237.7533 us. Best GFLOPs: 8541.8420
2024-04-28 20:24:03 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #61: GFLOPs: 202.7313. Time: 5959.8002 us. Best GFLOPs: 8541.8420
2024-04-28 20:24:03 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #62: GFLOPs: 3851.3687. Time: 313.7165 us. Best GFLOPs: 8541.8420
2024-04-28 20:24:03 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #63: GFLOPs: 1226.5281. Time: 985.0880 us. Best GFLOPs: 8541.8420
2024-04-28 20:34:12 [INFO] [evolutionary_search.cc:713] Generating candidates......
2024-04-28 20:34:14 [INFO] [evolutionary_search.cc:715] Picked top 62 candidate(s) from database
2024-04-28 20:34:21 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x43d23b8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x3ad3338)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x72c6e28)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x4cb1ce8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x5905ad8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x7272d28)]: 443 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x3ab3638)]: 0 failure(s)
2024-04-28 20:34:28 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x43d23b8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x3ad3338)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x72c6e28)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x4cb1ce8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x5905ad8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x7272d28)]: 888 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x3ab3638)]: 0 failure(s)
2024-04-28 20:34:35 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x43d23b8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x3ad3338)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x72c6e28)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x4cb1ce8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x5905ad8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x7272d28)]: 1331 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x3ab3638)]: 0 failure(s)
2024-04-28 20:34:42 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x43d23b8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x3ad3338)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x72c6e28)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x4cb1ce8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x5905ad8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x7272d28)]: 1776 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x3ab3638)]: 0 failure(s)
2024-04-28 20:34:49 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x43d23b8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x3ad3338)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x72c6e28)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x4cb1ce8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x5905ad8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x7272d28)]: 2220 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x3ab3638)]: 0 failure(s)
2024-04-28 20:34:57 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x43d23b8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x3ad3338)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x72c6e28)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x4cb1ce8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x5905ad8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x7272d28)]: 2663 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x3ab3638)]: 0 failure(s)
2024-04-28 20:35:04 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x43d23b8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x3ad3338)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x72c6e28)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x4cb1ce8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x5905ad8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x7272d28)]: 3108 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x3ab3638)]: 0 failure(s)
2024-04-28 20:35:12 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x43d23b8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x3ad3338)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x72c6e28)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x4cb1ce8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x5905ad8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x7272d28)]: 3553 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x3ab3638)]: 0 failure(s)
2024-04-28 20:35:20 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x43d23b8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x3ad3338)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x72c6e28)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x4cb1ce8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x5905ad8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x7272d28)]: 3992 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x3ab3638)]: 0 failure(s)
2024-04-28 20:35:20 [INFO] [evolutionary_search.cc:723] Sampled 58 candidate(s)
2024-04-28 20:35:40 [INFO] [evolutionary_search.cc:621] Evolve iter #0 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x43d23b8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x3ad3338)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x72c6e28)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x4cb1ce8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x5905ad8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x7272d28)]: 129 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x3ab3638)]: 0 failure(s)
2024-04-28 20:36:03 [INFO] [evolutionary_search.cc:621] Evolve iter #1 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x43d23b8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x3ad3338)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x72c6e28)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x4cb1ce8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x5905ad8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x7272d28)]: 120 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x3ab3638)]: 0 failure(s)
2024-04-28 20:36:26 [INFO] [evolutionary_search.cc:621] Evolve iter #2 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x43d23b8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x3ad3338)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x72c6e28)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x4cb1ce8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x5905ad8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x7272d28)]: 102 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x3ab3638)]: 0 failure(s)
2024-04-28 20:36:48 [INFO] [evolutionary_search.cc:621] Evolve iter #3 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x43d23b8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x3ad3338)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x72c6e28)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x4cb1ce8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x5905ad8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x7272d28)]: 101 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x3ab3638)]: 0 failure(s)
2024-04-28 20:36:53 [INFO] [evolutionary_search.cc:649] Scores of the best 64 candidates:
[1 : 16]:	1.0229  0.9991  0.9922  0.9916  0.9902  0.9902  0.9879  0.9874  0.9835  0.9823  0.9808  0.9808  0.9805  0.9736  0.9664  0.9594
[17 : 32]:	0.9583  0.9571  0.9506  0.9418  0.9413  0.9348  0.9330  0.9278  0.9275  0.9258  0.9201  0.9116  0.9038  0.8982  0.8937  0.8916
[33 : 48]:	0.8888  0.8875  0.8823  0.8758  0.8681  0.8655  0.8635  0.8586  0.8552  0.8542  0.8506  0.8492  0.8491  0.8476  0.8452  0.8439
[49 : 64]:	0.8428  0.8428  0.8405  0.8390  0.8370  0.8370  0.8360  0.8351  0.8334  0.8333  0.8332  0.8316  0.8316  0.8312  0.8312  0.8311
2024-04-28 20:36:54 [INFO] [evolutionary_search.cc:727] Got 64 candidate(s) with evolutionary search
2024-04-28 20:36:54 [INFO] [evolutionary_search.cc:730] Sending 64 candidates(s) for measurement
2024-04-28 20:38:37 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #64: GFLOPs: 8580.5877. Time: 140.8106 us. Best GFLOPs: 8580.5877
2024-04-28 20:38:37 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #65: GFLOPs: 8542.1132. Time: 141.4449 us. Best GFLOPs: 8580.5877
2024-04-28 20:38:37 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #66: GFLOPs: 8688.8677. Time: 139.0559 us. Best GFLOPs: 8688.8677
2024-04-28 20:38:37 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #67: GFLOPs: 8662.7377. Time: 139.4753 us. Best GFLOPs: 8688.8677
2024-04-28 20:38:37 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #68: GFLOPs: 8694.0606. Time: 138.9728 us. Best GFLOPs: 8694.0606
2024-04-28 20:38:37 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #69: GFLOPs: 8657.3427. Time: 139.5622 us. Best GFLOPs: 8694.0606
2024-04-28 20:38:37 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #70: GFLOPs: 8771.4672. Time: 137.7464 us. Best GFLOPs: 8771.4672
2024-04-28 20:38:37 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #71: GFLOPs: 8801.4836. Time: 137.2766 us. Best GFLOPs: 8801.4836
2024-04-28 20:38:37 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #72: GFLOPs: 8904.1474. Time: 135.6939 us. Best GFLOPs: 8904.1474
2024-04-28 20:38:37 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #73: GFLOPs: 8710.9988. Time: 138.7026 us. Best GFLOPs: 8904.1474
2024-04-28 20:38:37 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #74: GFLOPs: 8760.5683. Time: 137.9178 us. Best GFLOPs: 8904.1474
2024-04-28 20:38:37 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #75: GFLOPs: 8763.2760. Time: 137.8752 us. Best GFLOPs: 8904.1474
2024-04-28 20:38:37 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #76: GFLOPs: 8752.8501. Time: 138.0394 us. Best GFLOPs: 8904.1474
2024-04-28 20:38:37 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #77: GFLOPs: 7640.6736. Time: 158.1324 us. Best GFLOPs: 8904.1474
2024-04-28 20:38:37 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #78: GFLOPs: 8642.4425. Time: 139.8028 us. Best GFLOPs: 8904.1474
2024-04-28 20:38:37 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #79: GFLOPs: 9025.1653. Time: 133.8743 us. Best GFLOPs: 9025.1653
2024-04-28 20:38:37 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #80: GFLOPs: 8786.4085. Time: 137.5122 us. Best GFLOPs: 9025.1653
2024-04-28 20:38:37 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #81: GFLOPs: 8802.7545. Time: 137.2568 us. Best GFLOPs: 9025.1653
2024-04-28 20:38:37 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #82: GFLOPs: 8714.7895. Time: 138.6423 us. Best GFLOPs: 9025.1653
2024-04-28 20:38:37 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #83: GFLOPs: 8644.2386. Time: 139.7738 us. Best GFLOPs: 9025.1653
2024-04-28 20:38:37 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #84: GFLOPs: 8761.4865. Time: 137.9033 us. Best GFLOPs: 9025.1653
2024-04-28 20:38:37 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #85: GFLOPs: 8722.5570. Time: 138.5188 us. Best GFLOPs: 9025.1653
2024-04-28 20:38:37 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #86: GFLOPs: 7000.6484. Time: 172.5895 us. Best GFLOPs: 9025.1653
2024-04-28 20:38:37 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #87: GFLOPs: 8712.9792. Time: 138.6711 us. Best GFLOPs: 9025.1653
2024-04-28 20:38:37 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #88: GFLOPs: 7641.8130. Time: 158.1088 us. Best GFLOPs: 9025.1653
2024-04-28 20:38:37 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #89: GFLOPs: 8429.1788. Time: 143.3400 us. Best GFLOPs: 9025.1653
2024-04-28 20:38:37 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #90: GFLOPs: 7000.9292. Time: 172.5825 us. Best GFLOPs: 9025.1653
2024-04-28 20:38:37 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #91: GFLOPs: 8643.0954. Time: 139.7923 us. Best GFLOPs: 9025.1653
2024-04-28 20:38:37 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #92: GFLOPs: 8654.5428. Time: 139.6074 us. Best GFLOPs: 9025.1653
2024-04-28 20:38:37 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #93: GFLOPs: 8289.8536. Time: 145.7490 us. Best GFLOPs: 9025.1653
2024-04-28 20:38:37 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #94: GFLOPs: 8660.8403. Time: 139.5059 us. Best GFLOPs: 9025.1653
2024-04-28 20:38:37 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #95: GFLOPs: 8480.4985. Time: 142.4725 us. Best GFLOPs: 9025.1653
2024-04-28 20:38:37 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #96: GFLOPs: 8598.0250. Time: 140.5251 us. Best GFLOPs: 9025.1653
2024-04-28 20:38:37 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #97: GFLOPs: 9095.9739. Time: 132.8322 us. Best GFLOPs: 9095.9739
2024-04-28 20:38:37 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #98: GFLOPs: 8672.1991. Time: 139.3231 us. Best GFLOPs: 9095.9739
2024-04-28 20:38:37 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #99: GFLOPs: 8997.8267. Time: 134.2811 us. Best GFLOPs: 9095.9739
2024-04-28 20:38:37 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #100: GFLOPs: 5922.2162. Time: 204.0179 us. Best GFLOPs: 9095.9739
2024-04-28 20:38:37 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #101: GFLOPs: 4138.1467. Time: 291.9757 us. Best GFLOPs: 9095.9739
2024-04-28 20:38:37 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #102: GFLOPs: 8590.7723. Time: 140.6437 us. Best GFLOPs: 9095.9739
2024-04-28 20:38:37 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #103: GFLOPs: 8614.7472. Time: 140.2523 us. Best GFLOPs: 9095.9739
2024-04-28 20:38:37 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #104: GFLOPs: 7750.9630. Time: 155.8823 us. Best GFLOPs: 9095.9739
2024-04-28 20:38:37 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #105: GFLOPs: 7407.6441. Time: 163.1069 us. Best GFLOPs: 9095.9739
2024-04-28 20:38:37 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #106: GFLOPs: 7140.7133. Time: 169.2041 us. Best GFLOPs: 9095.9739
2024-04-28 20:38:37 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #107: GFLOPs: 7642.0080. Time: 158.1048 us. Best GFLOPs: 9095.9739
2024-04-28 20:38:37 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #108: GFLOPs: 7694.7559. Time: 157.0210 us. Best GFLOPs: 9095.9739
2024-04-28 20:38:37 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #109: GFLOPs: 4437.9668. Time: 272.2504 us. Best GFLOPs: 9095.9739
2024-04-28 20:38:37 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #110: GFLOPs: 7580.3636. Time: 159.3905 us. Best GFLOPs: 9095.9739
2024-04-28 20:38:37 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #111: GFLOPs: 7246.3588. Time: 166.7373 us. Best GFLOPs: 9095.9739
2024-04-28 20:38:37 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #112: GFLOPs: 8673.1956. Time: 139.3071 us. Best GFLOPs: 9095.9739
2024-04-28 20:38:37 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #113: GFLOPs: 7281.9279. Time: 165.9228 us. Best GFLOPs: 9095.9739
2024-04-28 20:38:37 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #114: GFLOPs: 7118.3583. Time: 169.7355 us. Best GFLOPs: 9095.9739
2024-04-28 20:38:37 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #115: GFLOPs: 4820.6850. Time: 250.6362 us. Best GFLOPs: 9095.9739
2024-04-28 20:38:37 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #116: GFLOPs: 7671.9770. Time: 157.4872 us. Best GFLOPs: 9095.9739
2024-04-28 20:38:37 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #117: GFLOPs: 6712.2817. Time: 180.0041 us. Best GFLOPs: 9095.9739
2024-04-28 20:38:37 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #118: GFLOPs: 6791.2733. Time: 177.9104 us. Best GFLOPs: 9095.9739
2024-04-28 20:38:37 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #119: GFLOPs: 4207.3545. Time: 287.1729 us. Best GFLOPs: 9095.9739
2024-04-28 20:38:37 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #120: GFLOPs: 6859.4772. Time: 176.1414 us. Best GFLOPs: 9095.9739
2024-04-28 20:38:37 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #121: GFLOPs: 4509.7940. Time: 267.9142 us. Best GFLOPs: 9095.9739
2024-04-28 20:38:37 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #122: GFLOPs: 6898.3075. Time: 175.1499 us. Best GFLOPs: 9095.9739
2024-04-28 20:38:37 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #123: GFLOPs: 8079.1960. Time: 149.5493 us. Best GFLOPs: 9095.9739
2024-04-28 20:38:37 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #124: GFLOPs: 8808.2236. Time: 137.1716 us. Best GFLOPs: 9095.9739
2024-04-28 20:38:37 [INFO] [task_scheduler.cc:121] [Task #5: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #125: Error in building:
LocalBuilder: Timeout, killed after 30.0 seconds
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(256), T.int64(56), T.int64(56)), "float32"), p1: T.Buffer((T.int64(6), T.int64(6), T.int64(256), T.int64(256)), "float32"), p2: T.Buffer((T.int64(1), T.int64(256), T.int64(1), T.int64(1)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(256), T.int64(56), T.int64(56)), "float32")):
        T.func_attr({"layout_free_buffers": [1], "tir.noalias": T.bool(True)})
        # with T.block("root"):
        input_tile_local = T.alloc_buffer((T.int64(256), T.int64(196), T.int64(6), T.int64(6)), scope="local")
        data_pack = T.alloc_buffer((T.int64(6), T.int64(6), T.int64(256), T.int64(196)))
        bgemm = T.alloc_buffer((T.int64(6), T.int64(6), T.int64(256), T.int64(196)))
        inverse_local = T.alloc_buffer((T.int64(256), T.int64(196), T.int64(4), T.int64(4)), scope="local")
        data_pack_local = T.alloc_buffer((T.int64(6), T.int64(6), T.int64(256), T.int64(196)), scope="local")
        bgemm_local = T.alloc_buffer((T.int64(6), T.int64(6), T.int64(256), T.int64(196)), scope="local")
        data_pack_shared = T.alloc_buffer((T.int64(6), T.int64(6), T.int64(256), T.int64(196)), scope="shared")
        p1_shared = T.alloc_buffer((T.int64(6), T.int64(6), T.int64(256), T.int64(256)), scope="shared")
        for ci_p_fused_0 in T.thread_binding(T.int64(392), thread="blockIdx.x", annotations={"pragma_auto_unroll_max_step": 1024, "pragma_unroll_explicit": 1}):
            for ci_p_fused_1 in T.thread_binding(T.int64(128), thread="threadIdx.x"):
                for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(1), T.int64(6), T.int64(6)):
                    with T.block("input_tile"):
                        v_ci = T.axis.spatial(T.int64(256), (ci_p_fused_0 * T.int64(128) + ci_p_fused_1) // T.int64(196) + ax0)
                        v_p = T.axis.spatial(T.int64(196), (ci_p_fused_0 * T.int64(128) + ci_p_fused_1) % T.int64(196) + ax1)
                        v_eps, v_nu = T.axis.remap("SS", [ax2, ax3])
                        T.reads(p0[v_p // T.int64(196), v_ci, v_p % T.int64(196) // T.int64(14) * T.int64(4) + v_eps - T.int64(1), v_p % T.int64(14) * T.int64(4) + v_nu - T.int64(1)])
                        T.writes(input_tile_local[v_ci, v_p, v_eps, v_nu])
                        T.block_attr({"schedule_rule": "None"})
                        input_tile_local[v_ci, v_p, v_eps, v_nu] = T.if_then_else(T.int64(1) <= v_p % T.int64(196) // T.int64(14) * T.int64(4) + v_eps and v_p % T.int64(196) // T.int64(14) * T.int64(4) + v_eps < T.int64(57) and T.int64(1) <= v_p % T.int64(14) * T.int64(4) + v_nu and v_p % T.int64(14) * T.int64(4) + v_nu < T.int64(57), p0[v_p // T.int64(196), v_ci, v_p % T.int64(196) // T.int64(14) * T.int64(4) + v_eps - T.int64(1), v_p % T.int64(14) * T.int64(4) + v_nu - T.int64(1)], T.float32(0))
                for eps in T.unroll(T.int64(6)):
                    for nu in T.unroll(T.int64(6)):
                        with T.block("data_pack_init"):
                            v_eps, v_nu = T.axis.remap("SS", [eps, nu])
                            v_ci = T.axis.spatial(T.int64(256), (ci_p_fused_0 * T.int64(128) + ci_p_fused_1) // T.int64(196))
                            v_p = T.axis.spatial(T.int64(196), (ci_p_fused_0 * T.int64(128) + ci_p_fused_1) % T.int64(196))
                            T.reads()
                            T.writes(data_pack_local[v_eps, v_nu, v_ci, v_p])
                            T.block_attr({"schedule_rule": "conv2d_nchw_winograd_data_pack"})
                            data_pack_local[v_eps, v_nu, v_ci, v_p] = T.float32(0)
                        for r_a in T.unroll(T.int64(6)):
                            for r_b in T.unroll(T.int64(6)):
                                with T.block("data_pack_update"):
                                    v_eps, v_nu = T.axis.remap("SS", [eps, nu])
                                    v_ci = T.axis.spatial(T.int64(256), (ci_p_fused_0 * T.int64(128) + ci_p_fused_1) // T.int64(196))
                                    v_p = T.axis.spatial(T.int64(196), (ci_p_fused_0 * T.int64(128) + ci_p_fused_1) % T.int64(196))
                                    v_r_a, v_r_b = T.axis.remap("RR", [r_a, r_b])
                                    T.reads(data_pack_local[v_eps, v_nu, v_ci, v_p], input_tile_local[v_ci, v_p, v_r_a, v_r_b])
                                    T.writes(data_pack_local[v_eps, v_nu, v_ci, v_p])
                                    T.block_attr({"schedule_rule": "conv2d_nchw_winograd_data_pack"})
                                    data_pack_local[v_eps, v_nu, v_ci, v_p] = data_pack_local[v_eps, v_nu, v_ci, v_p] + input_tile_local[v_ci, v_p, v_r_a, v_r_b] * T.Select(v_r_a % T.int64(6) == T.int64(5) and v_eps % T.int64(6) == T.int64(5), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(5) and v_eps % T.int64(6) == T.int64(4), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(5) and v_eps % T.int64(6) == T.int64(3), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(5) and v_eps % T.int64(6) == T.int64(2), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(5) and v_eps % T.int64(6) == T.int64(1), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(5) and v_eps % T.int64(6) == T.int64(0), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(4) and v_eps % T.int64(6) == T.int64(5), T.float32(1.5), T.Select(v_r_a % T.int64(6) == T.int64(4) and v_eps % T.int64(6) == T.int64(4), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(4) and v_eps % T.int64(6) == T.int64(3), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(4) and v_eps % T.int64(6) == T.int64(2), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(4) and v_eps % T.int64(6) == T.int64(1), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(4) and v_eps % T.int64(6) == T.int64(0), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(3) and v_eps % T.int64(6) == T.int64(5), T.float32(-2), T.Select(v_r_a % T.int64(6) == T.int64(3) and v_eps % T.int64(6) == T.int64(4), T.float32(-0.5), T.Select(v_r_a % T.int64(6) == T.int64(3) and v_eps % T.int64(6) == T.int64(3), T.float32(2), T.Select(v_r_a % T.int64(6) == T.int64(3) and v_eps % T.int64(6) == T.int64(2), T.float32(2.5), T.Select(v_r_a % T.int64(6) == T.int64(3) and v_eps % T.int64(6) == T.int64(1), T.float32(0.5), T.Select(v_r_a % T.int64(6) == T.int64(3) and v_eps % T.int64(6) == T.int64(0), T.float32(1.5), T.Select(v_r_a % T.int64(6) == T.int64(2) and v_eps % T.int64(6) == T.int64(5), T.float32(-1.5), T.Select(v_r_a % T.int64(6) == T.int64(2) and v_eps % T.int64(6) == T.int64(4), T.float32(-1), T.Select(v_r_a % T.int64(6) == T.int64(2) and v_eps % T.int64(6) == T.int64(3), T.float32(-1), T.Select(v_r_a % T.int64(6) == T.int64(2) and v_eps % T.int64(6) == T.int64(2), T.float32(0.5), T.Select(v_r_a % T.int64(6) == T.int64(2) and v_eps % T.int64(6) == T.int64(1), T.float32(-2.5), T.Select(v_r_a % T.int64(6) == T.int64(2) and v_eps % T.int64(6) == T.int64(0), T.float32(-2), T.Select(v_r_a % T.int64(6) == T.int64(1) and v_eps % T.int64(6) == T.int64(5), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(1) and v_eps % T.int64(6) == T.int64(4), T.float32(0.5), T.Select(v_r_a % T.int64(6) == T.int64(1) and v_eps % T.int64(6) == T.int64(3), T.float32(-2), T.Select(v_r_a % T.int64(6) == T.int64(1) and v_eps % T.int64(6) == T.int64(2), T.float32(-1), T.Select(v_r_a % T.int64(6) == T.int64(1) and v_eps % T.int64(6) == T.int64(1), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(1) and v_eps % T.int64(6) == T.int64(0), T.float32(-1.5), T.Select(v_r_a % T.int64(6) == T.int64(0) and v_eps % T.int64(6) == T.int64(5), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(0) and v_eps % T.int64(6) == T.int64(4), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(0) and v_eps % T.int64(6) == T.int64(3), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(0) and v_eps % T.int64(6) == T.int64(2), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(0) and v_eps % T.int64(6) == T.int64(1), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(0) and v_eps % T.int64(6) == T.int64(0), T.float32(1), T.float32(0))))))))))))))))))))))))))))))))))))) * T.Select(v_r_b % T.int64(6) == T.int64(5) and v_nu % T.int64(6) == T.int64(5), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(5) and v_nu % T.int64(6) == T.int64(4), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(5) and v_nu % T.int64(6) == T.int64(3), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(5) and v_nu % T.int64(6) == T.int64(2), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(5) and v_nu % T.int64(6) == T.int64(1), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(5) and v_nu % T.int64(6) == T.int64(0), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(4) and v_nu % T.int64(6) == T.int64(5), T.float32(1.5), T.Select(v_r_b % T.int64(6) == T.int64(4) and v_nu % T.int64(6) == T.int64(4), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(4) and v_nu % T.int64(6) == T.int64(3), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(4) and v_nu % T.int64(6) == T.int64(2), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(4) and v_nu % T.int64(6) == T.int64(1), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(4) and v_nu % T.int64(6) == T.int64(0), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(3) and v_nu % T.int64(6) == T.int64(5), T.float32(-2), T.Select(v_r_b % T.int64(6) == T.int64(3) and v_nu % T.int64(6) == T.int64(4), T.float32(-0.5), T.Select(v_r_b % T.int64(6) == T.int64(3) and v_nu % T.int64(6) == T.int64(3), T.float32(2), T.Select(v_r_b % T.int64(6) == T.int64(3) and v_nu % T.int64(6) == T.int64(2), T.float32(2.5), T.Select(v_r_b % T.int64(6) == T.int64(3) and v_nu % T.int64(6) == T.int64(1), T.float32(0.5), T.Select(v_r_b % T.int64(6) == T.int64(3) and v_nu % T.int64(6) == T.int64(0), T.float32(1.5), T.Select(v_r_b % T.int64(6) == T.int64(2) and v_nu % T.int64(6) == T.int64(5), T.float32(-1.5), T.Select(v_r_b % T.int64(6) == T.int64(2) and v_nu % T.int64(6) == T.int64(4), T.float32(-1), T.Select(v_r_b % T.int64(6) == T.int64(2) and v_nu % T.int64(6) == T.int64(3), T.float32(-1), T.Select(v_r_b % T.int64(6) == T.int64(2) and v_nu % T.int64(6) == T.int64(2), T.float32(0.5), T.Select(v_r_b % T.int64(6) == T.int64(2) and v_nu % T.int64(6) == T.int64(1), T.float32(-2.5), T.Select(v_r_b % T.int64(6) == T.int64(2) and v_nu % T.int64(6) == T.int64(0), T.float32(-2), T.Select(v_r_b % T.int64(6) == T.int64(1) and v_nu % T.int64(6) == T.int64(5), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(1) and v_nu % T.int64(6) == T.int64(4), T.float32(0.5), T.Select(v_r_b % T.int64(6) == T.int64(1) and v_nu % T.int64(6) == T.int64(3), T.float32(-2), T.Select(v_r_b % T.int64(6) == T.int64(1) and v_nu % T.int64(6) == T.int64(2), T.float32(-1), T.Select(v_r_b % T.int64(6) == T.int64(1) and v_nu % T.int64(6) == T.int64(1), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(1) and v_nu % T.int64(6) == T.int64(0), T.float32(-1.5), T.Select(v_r_b % T.int64(6) == T.int64(0) and v_nu % T.int64(6) == T.int64(5), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(0) and v_nu % T.int64(6) == T.int64(4), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(0) and v_nu % T.int64(6) == T.int64(3), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(0) and v_nu % T.int64(6) == T.int64(2), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(0) and v_nu % T.int64(6) == T.int64(1), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(0) and v_nu % T.int64(6) == T.int64(0), T.float32(1), T.float32(0)))))))))))))))))))))))))))))))))))))
                for ax0, ax1, ax2, ax3 in T.grid(T.int64(6), T.int64(6), T.int64(1), T.int64(1)):
                    with T.block("data_pack_local"):
                        v0, v1 = T.axis.remap("SS", [ax0, ax1])
                        v2 = T.axis.spatial(T.int64(256), (ci_p_fused_0 * T.int64(128) + ci_p_fused_1) // T.int64(196) + ax2)
                        v3 = T.axis.spatial(T.int64(196), (ci_p_fused_0 * T.int64(128) + ci_p_fused_1) % T.int64(196) + ax3)
                        T.reads(data_pack_local[v0, v1, v2, v3])
                        T.writes(data_pack[v0, v1, v2, v3])
                        data_pack[v0, v1, v2, v3] = data_pack_local[v0, v1, v2, v3]
        for eps_0_nu_0_co_0_p_0_fused in T.thread_binding(T.int64(3), thread="blockIdx.x", annotations={"pragma_auto_unroll_max_step": 1024, "pragma_unroll_explicit": 1}):
            for eps_1_nu_1_co_1_p_1_fused in T.thread_binding(T.int64(8), thread="vthread.x"):
                for eps_2_nu_2_co_2_p_2_fused in T.thread_binding(T.int64(384), thread="threadIdx.x"):
                    for eps_3_init, nu_3_init, co_3_init, p_3_init, eps_4_init, nu_4_init, co_4_init, p_4_init in T.grid(T.int64(1), T.int64(1), T.int64(2), T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(49)):
                        with T.block("bgemm_init"):
                            v_eps = T.axis.spatial(T.int64(6), eps_0_nu_0_co_0_p_0_fused * T.int64(2) + eps_1_nu_1_co_1_p_1_fused // T.int64(4) + eps_3_init + eps_4_init)
                            v_nu = T.axis.spatial(T.int64(6), eps_2_nu_2_co_2_p_2_fused // T.int64(64) + nu_3_init + nu_4_init)
                            v_co = T.axis.spatial(T.int64(256), eps_2_nu_2_co_2_p_2_fused % T.int64(64) * T.int64(4) + co_3_init * T.int64(2) + co_4_init)
                            v_p = T.axis.spatial(T.int64(196), eps_1_nu_1_co_1_p_1_fused % T.int64(4) * T.int64(49) + p_3_init * T.int64(49) + p_4_init)
                            T.reads()
                            T.writes(bgemm_local[v_eps, v_nu, v_co, v_p])
                            T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 32, "meta_schedule.tiling_structure": "SSSRRSRS"})
                            bgemm_local[v_eps, v_nu, v_co, v_p] = T.float32(0)
                    for ci_0 in range(T.int64(256)):
                        for ax0_ax1_ax2_ax3_fused_0 in range(T.int64(3)):
                            for ax0_ax1_ax2_ax3_fused_1 in T.thread_binding(T.int64(384), thread="threadIdx.x"):
                                for ax0_ax1_ax2_ax3_fused_2 in T.vectorized(T.int64(3)):
                                    with T.block("data_pack_shared"):
                                        v0 = T.axis.spatial(T.int64(6), eps_0_nu_0_co_0_p_0_fused * T.int64(2) + (ax0_ax1_ax2_ax3_fused_0 * T.int64(1152) + ax0_ax1_ax2_ax3_fused_1 * T.int64(3) + ax0_ax1_ax2_ax3_fused_2) // T.int64(1176))
                                        v1 = T.axis.spatial(T.int64(6), (ax0_ax1_ax2_ax3_fused_0 * T.int64(1152) + ax0_ax1_ax2_ax3_fused_1 * T.int64(3) + ax0_ax1_ax2_ax3_fused_2) % T.int64(1176) // T.int64(196))
                                        v2 = T.axis.spatial(T.int64(256), ci_0)
                                        v3 = T.axis.spatial(T.int64(196), (ax0_ax1_ax2_ax3_fused_0 * T.int64(1152) + ax0_ax1_ax2_ax3_fused_1 * T.int64(3) + ax0_ax1_ax2_ax3_fused_2) % T.int64(196))
                                        T.where((ax0_ax1_ax2_ax3_fused_0 * T.int64(384) + ax0_ax1_ax2_ax3_fused_1) * T.int64(3) + ax0_ax1_ax2_ax3_fused_2 < T.int64(2352))
                                        T.reads(data_pack[v0, v1, v2, v3])
                                        T.writes(data_pack_shared[v0, v1, v2, v3])
                                        data_pack_shared[v0, v1, v2, v3] = data_pack[v0, v1, v2, v3]
                        for ax0_ax1_ax2_ax3_fused_0 in range(T.int64(8)):
                            for ax0_ax1_ax2_ax3_fused_1 in T.thread_binding(T.int64(384), thread="threadIdx.x"):
                                with T.block("p1_shared"):
                                    v0 = T.axis.spatial(T.int64(6), eps_0_nu_0_co_0_p_0_fused * T.int64(2) + (ax0_ax1_ax2_ax3_fused_0 * T.int64(384) + ax0_ax1_ax2_ax3_fused_1) // T.int64(1536))
                                    v1 = T.axis.spatial(T.int64(6), (ax0_ax1_ax2_ax3_fused_0 * T.int64(384) + ax0_ax1_ax2_ax3_fused_1) % T.int64(1536) // T.int64(256))
                                    v2 = T.axis.spatial(T.int64(256), ci_0)
                                    v3 = T.axis.spatial(T.int64(256), (ax0_ax1_ax2_ax3_fused_0 * T.int64(384) + ax0_ax1_ax2_ax3_fused_1) % T.int64(256))
                                    T.reads(p1[v0, v1, v2, v3])
                                    T.writes(p1_shared[v0, v1, v2, v3])
                                    p1_shared[v0, v1, v2, v3] = p1[v0, v1, v2, v3]
                        for ci_1, eps_3, nu_3, co_3, p_3, ci_2, eps_4, nu_4, co_4, p_4 in T.grid(T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(49)):
                            with T.block("bgemm_update"):
                                v_eps = T.axis.spatial(T.int64(6), eps_0_nu_0_co_0_p_0_fused * T.int64(2) + eps_1_nu_1_co_1_p_1_fused // T.int64(4) + eps_3 + eps_4)
                                v_nu = T.axis.spatial(T.int64(6), eps_2_nu_2_co_2_p_2_fused // T.int64(64) + nu_3 + nu_4)
                                v_co = T.axis.spatial(T.int64(256), eps_2_nu_2_co_2_p_2_fused % T.int64(64) * T.int64(4) + co_3 * T.int64(2) + co_4)
                                v_p = T.axis.spatial(T.int64(196), eps_1_nu_1_co_1_p_1_fused % T.int64(4) * T.int64(49) + p_3 * T.int64(49) + p_4)
                                v_ci = T.axis.reduce(T.int64(256), ci_0 + ci_1 + ci_2)
                                T.reads(bgemm_local[v_eps, v_nu, v_co, v_p], data_pack_shared[v_eps, v_nu, v_ci, v_p], p1_shared[v_eps, v_nu, v_ci, v_co])
                                T.writes(bgemm_local[v_eps, v_nu, v_co, v_p])
                                T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 32, "meta_schedule.tiling_structure": "SSSRRSRS"})
                                bgemm_local[v_eps, v_nu, v_co, v_p] = bgemm_local[v_eps, v_nu, v_co, v_p] + data_pack_shared[v_eps, v_nu, v_ci, v_p] * p1_shared[v_eps, v_nu, v_ci, v_co]
                    for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(1), T.int64(4), T.int64(49)):
                        with T.block("bgemm_local"):
                            v0 = T.axis.spatial(T.int64(6), eps_0_nu_0_co_0_p_0_fused * T.int64(2) + eps_1_nu_1_co_1_p_1_fused // T.int64(4) + ax0)
                            v1 = T.axis.spatial(T.int64(6), eps_2_nu_2_co_2_p_2_fused // T.int64(64) + ax1)
                            v2 = T.axis.spatial(T.int64(256), eps_2_nu_2_co_2_p_2_fused % T.int64(64) * T.int64(4) + ax2)
                            v3 = T.axis.spatial(T.int64(196), eps_1_nu_1_co_1_p_1_fused % T.int64(4) * T.int64(49) + ax3)
                            T.reads(bgemm_local[v0, v1, v2, v3])
                            T.writes(bgemm[v0, v1, v2, v3])
                            bgemm[v0, v1, v2, v3] = bgemm_local[v0, v1, v2, v3]
        for n_co_h_0_w_0_fused_0 in T.thread_binding(T.int64(392), thread="blockIdx.x", annotations={"pragma_auto_unroll_max_step": 1024, "pragma_unroll_explicit": 1}):
            for n_co_h_0_w_0_fused_1 in T.thread_binding(T.int64(128), thread="threadIdx.x"):
                for ax0, ax1 in T.grid(T.int64(1), T.int64(1)):
                    for ax2 in T.unroll(T.int64(4)):
                        for ax3 in T.unroll(T.int64(4)):
                            with T.block("inverse_init"):
                                v_co = T.axis.spatial(T.int64(256), (n_co_h_0_w_0_fused_0 * T.int64(128) + n_co_h_0_w_0_fused_1) // T.int64(196) + ax0)
                                v_p = T.axis.spatial(T.int64(196), (n_co_h_0_w_0_fused_0 * T.int64(128) + n_co_h_0_w_0_fused_1) % T.int64(196) + ax1)
                                v_vh, v_vw = T.axis.remap("SS", [ax2, ax3])
                                T.reads()
                                T.writes(inverse_local[v_co, v_p, v_vh, v_vw])
                                T.block_attr({"schedule_rule": "conv2d_nchw_winograd_inverse"})
                                inverse_local[v_co, v_p, v_vh, v_vw] = T.float32(0)
                            for ax4 in T.unroll(T.int64(6)):
                                for ax5 in T.unroll(T.int64(6)):
                                    with T.block("inverse_update"):
                                        v_co = T.axis.spatial(T.int64(256), (n_co_h_0_w_0_fused_0 * T.int64(128) + n_co_h_0_w_0_fused_1) // T.int64(196) + ax0)
                                        v_p = T.axis.spatial(T.int64(196), (n_co_h_0_w_0_fused_0 * T.int64(128) + n_co_h_0_w_0_fused_1) % T.int64(196) + ax1)
                                        v_vh, v_vw, v_r_a, v_r_b = T.axis.remap("SSRR", [ax2, ax3, ax4, ax5])
                                        T.reads(inverse_local[v_co, v_p, v_vh, v_vw], bgemm[v_r_a, v_r_b, v_co, v_p])
                                        T.writes(inverse_local[v_co, v_p, v_vh, v_vw])
                                        T.block_attr({"schedule_rule": "conv2d_nchw_winograd_inverse"})
                                        inverse_local[v_co, v_p, v_vh, v_vw] = inverse_local[v_co, v_p, v_vh, v_vw] + bgemm[v_r_a, v_r_b, v_co, v_p] * T.Select(v_r_a % T.int64(6) == T.int64(5) and v_vh % T.int64(4) == T.int64(3), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(5) and v_vh % T.int64(4) == T.int64(2), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(5) and v_vh % T.int64(4) == T.int64(1), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(5) and v_vh % T.int64(4) == T.int64(0), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(4) and v_vh % T.int64(4) == T.int64(3), T.float32(-8), T.Select(v_r_a % T.int64(6) == T.int64(4) and v_vh % T.int64(4) == T.int64(2), T.float32(4), T.Select(v_r_a % T.int64(6) == T.int64(4) and v_vh % T.int64(4) == T.int64(1), T.float32(-2), T.Select(v_r_a % T.int64(6) == T.int64(4) and v_vh % T.int64(4) == T.int64(0), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(3) and v_vh % T.int64(4) == T.int64(3), T.float32(0.125), T.Select(v_r_a % T.int64(6) == T.int64(3) and v_vh % T.int64(4) == T.int64(2), T.float32(0.25), T.Select(v_r_a % T.int64(6) == T.int64(3) and v_vh % T.int64(4) == T.int64(1), T.float32(0.5), T.Select(v_r_a % T.int64(6) == T.int64(3) and v_vh % T.int64(4) == T.int64(0), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(2) and v_vh % T.int64(4) == T.int64(3), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(2) and v_vh % T.int64(4) == T.int64(2), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(2) and v_vh % T.int64(4) == T.int64(1), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(2) and v_vh % T.int64(4) == T.int64(0), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(1) and v_vh % T.int64(4) == T.int64(3), T.float32(-1), T.Select(v_r_a % T.int64(6) == T.int64(1) and v_vh % T.int64(4) == T.int64(2), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(1) and v_vh % T.int64(4) == T.int64(1), T.float32(-1), T.Select(v_r_a % T.int64(6) == T.int64(1) and v_vh % T.int64(4) == T.int64(0), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(0) and v_vh % T.int64(4) == T.int64(3), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(0) and v_vh % T.int64(4) == T.int64(2), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(0) and v_vh % T.int64(4) == T.int64(1), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(0) and v_vh % T.int64(4) == T.int64(0), T.float32(1), T.float32(0))))))))))))))))))))))))) * T.Select(v_r_b % T.int64(6) == T.int64(5) and v_vw % T.int64(4) == T.int64(3), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(5) and v_vw % T.int64(4) == T.int64(2), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(5) and v_vw % T.int64(4) == T.int64(1), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(5) and v_vw % T.int64(4) == T.int64(0), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(4) and v_vw % T.int64(4) == T.int64(3), T.float32(-8), T.Select(v_r_b % T.int64(6) == T.int64(4) and v_vw % T.int64(4) == T.int64(2), T.float32(4), T.Select(v_r_b % T.int64(6) == T.int64(4) and v_vw % T.int64(4) == T.int64(1), T.float32(-2), T.Select(v_r_b % T.int64(6) == T.int64(4) and v_vw % T.int64(4) == T.int64(0), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(3) and v_vw % T.int64(4) == T.int64(3), T.float32(0.125), T.Select(v_r_b % T.int64(6) == T.int64(3) and v_vw % T.int64(4) == T.int64(2), T.float32(0.25), T.Select(v_r_b % T.int64(6) == T.int64(3) and v_vw % T.int64(4) == T.int64(1), T.float32(0.5), T.Select(v_r_b % T.int64(6) == T.int64(3) and v_vw % T.int64(4) == T.int64(0), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(2) and v_vw % T.int64(4) == T.int64(3), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(2) and v_vw % T.int64(4) == T.int64(2), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(2) and v_vw % T.int64(4) == T.int64(1), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(2) and v_vw % T.int64(4) == T.int64(0), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(1) and v_vw % T.int64(4) == T.int64(3), T.float32(-1), T.Select(v_r_b % T.int64(6) == T.int64(1) and v_vw % T.int64(4) == T.int64(2), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(1) and v_vw % T.int64(4) == T.int64(1), T.float32(-1), T.Select(v_r_b % T.int64(6) == T.int64(1) and v_vw % T.int64(4) == T.int64(0), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(0) and v_vw % T.int64(4) == T.int64(3), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(0) and v_vw % T.int64(4) == T.int64(2), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(0) and v_vw % T.int64(4) == T.int64(1), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(0) and v_vw % T.int64(4) == T.int64(0), T.float32(1), T.float32(0)))))))))))))))))))))))))
                for h_1, w_1 in T.grid(T.int64(4), T.int64(4)):
                    with T.block("conv2d_winograd"):
                        v_n = T.axis.spatial(T.int64(1), T.int64(0))
                        v_co = T.axis.spatial(T.int64(256), (n_co_h_0_w_0_fused_0 * T.int64(128) + n_co_h_0_w_0_fused_1) // T.int64(196))
                        v_h = T.axis.spatial(T.int64(56), (n_co_h_0_w_0_fused_0 * T.int64(128) + n_co_h_0_w_0_fused_1) % T.int64(196) // T.int64(14) * T.int64(4) + h_1)
                        v_w = T.axis.spatial(T.int64(56), (n_co_h_0_w_0_fused_0 * T.int64(128) + n_co_h_0_w_0_fused_1) % T.int64(14) * T.int64(4) + w_1)
                        T.reads(inverse_local[v_co, v_n * T.int64(196) + v_h // T.int64(4) * T.int64(14) + v_w // T.int64(4), v_h % T.int64(4), v_w % T.int64(4)], p2[v_n, v_co, T.int64(0), T.int64(0)])
                        T.writes(T_relu[v_n, v_co, v_h, v_w])
                        T_relu[v_n, v_co, v_h, v_w] = T.max(inverse_local[v_co, v_n * T.int64(196) + v_h // T.int64(4) * T.int64(14) + v_w // T.int64(4), v_h % T.int64(4), v_w % T.int64(4)] + p2[v_n, v_co, T.int64(0), T.int64(0)], T.float32(0))
b0 = sch.get_block(name="data_pack", func_name="main")
b1 = sch.get_block(name="bgemm", func_name="main")
b2 = sch.get_block(name="inverse", func_name="main")
b3 = sch.get_block(name="conv2d_winograd", func_name="main")
b4 = sch.get_block(name="T_add", func_name="main")
b5 = sch.get_block(name="T_relu", func_name="main")
b6 = sch.get_block(name="root", func_name="main")
b7, b8 = sch.get_producers(block=b2)
sch.compute_inline(block=b8)
b9, = sch.get_consumers(block=b2)
l10, l11, l12, l13 = sch.get_loops(block=b9)
l14, l15 = sch.split(loop=l12, factors=[None, 4], preserve_unit_iters=True)
l16, l17 = sch.split(loop=l13, factors=[None, 4], preserve_unit_iters=True)
sch.reorder(l14, l16, l15, l17)
sch.compute_at(block=b2, loop=l16, preserve_unit_loops=True, index=-1)
sch.set_scope(block=b2, buffer_index=0, storage_scope="local")
l18, l19, l20, l21, l22, l23, l24, l25, l26, l27 = sch.get_loops(block=b2)
sch.unroll(loop=l24)
sch.unroll(loop=l25)
sch.unroll(loop=l26)
sch.unroll(loop=l27)
b28, b29 = sch.get_producers(block=b0)
sch.compute_inline(block=b29)
b30, = sch.get_producers(block=b28)
l31, l32, l33, l34, l35, l36 = sch.get_loops(block=b0)
sch.reorder(l33, l34, l31, l32, l35, l36)
sch.unroll(loop=l31)
sch.unroll(loop=l32)
sch.unroll(loop=l35)
sch.unroll(loop=l36)
l37 = sch.fuse(l33, l34, preserve_unit_iters=True)
v38 = sch.sample_categorical(candidates=[32, 64, 128, 256, 512, 1024], probs=[0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666], decision=2)
l39, l40 = sch.split(loop=l37, factors=[None, v38], preserve_unit_iters=True)
sch.bind(loop=l39, thread_axis="blockIdx.x")
sch.bind(loop=l40, thread_axis="threadIdx.x")
b41 = sch.cache_write(block=b0, write_buffer_index=0, storage_scope="local")
sch.reverse_compute_at(block=b41, loop=l40, preserve_unit_loops=True, index=-1)
sch.compute_at(block=b28, loop=l40, preserve_unit_loops=True, index=-1)
sch.set_scope(block=b28, buffer_index=0, storage_scope="local")
sch.compute_inline(block=b30)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSSRRSRS")
l42, l43, l44, l45, l46 = sch.get_loops(block=b1)
v47, v48, v49, v50, v51 = sch.sample_perfect_tile(loop=l42, n=5, max_innermost_factor=64, decision=[3, 2, 1, 1, 1])
l52, l53, l54, l55, l56 = sch.split(loop=l42, factors=[v47, v48, v49, v50, v51], preserve_unit_iters=True)
v57, v58, v59, v60, v61 = sch.sample_perfect_tile(loop=l43, n=5, max_innermost_factor=64, decision=[1, 1, 6, 1, 1])
l62, l63, l64, l65, l66 = sch.split(loop=l43, factors=[v57, v58, v59, v60, v61], preserve_unit_iters=True)
v67, v68, v69, v70, v71 = sch.sample_perfect_tile(loop=l44, n=5, max_innermost_factor=64, decision=[1, 1, 64, 2, 2])
l72, l73, l74, l75, l76 = sch.split(loop=l44, factors=[v67, v68, v69, v70, v71], preserve_unit_iters=True)
v77, v78, v79, v80, v81 = sch.sample_perfect_tile(loop=l45, n=5, max_innermost_factor=64, decision=[1, 4, 1, 1, 49])
l82, l83, l84, l85, l86 = sch.split(loop=l45, factors=[v77, v78, v79, v80, v81], preserve_unit_iters=True)
v87, v88, v89 = sch.sample_perfect_tile(loop=l46, n=3, max_innermost_factor=64, decision=[256, 1, 1])
l90, l91, l92 = sch.split(loop=l46, factors=[v87, v88, v89], preserve_unit_iters=True)
sch.reorder(l52, l62, l72, l82, l53, l63, l73, l83, l54, l64, l74, l84, l90, l91, l55, l65, l75, l85, l92, l56, l66, l76, l86)
l93 = sch.fuse(l52, l62, l72, l82, preserve_unit_iters=True)
sch.bind(loop=l93, thread_axis="blockIdx.x")
l94 = sch.fuse(l53, l63, l73, l83, preserve_unit_iters=True)
sch.bind(loop=l94, thread_axis="vthread.x")
l95 = sch.fuse(l54, l64, l74, l84, preserve_unit_iters=True)
sch.bind(loop=l95, thread_axis="threadIdx.x")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_low_inclusive", ann_val=32)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_high_inclusive", ann_val=1024)
b96 = sch.cache_write(block=b1, write_buffer_index=0, storage_scope="local")
sch.reverse_compute_at(block=b96, loop=l95, preserve_unit_loops=True, index=-1)
b97 = sch.cache_read(block=b1, read_buffer_index=0, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b97, loop=l90, preserve_unit_loops=True, index=-1)
l98, l99, l100, l101, l102, l103, l104, l105 = sch.get_loops(block=b97)
l106 = sch.fuse(l102, l103, l104, l105, preserve_unit_iters=True)
v107 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=2)
sch.annotate(block_or_loop=b97, ann_key="meta_schedule.cooperative_fetch", ann_val=v107)
b108 = sch.cache_read(block=b1, read_buffer_index=1, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b108, loop=l90, preserve_unit_loops=True, index=-1)
l109, l110, l111, l112, l113, l114, l115, l116 = sch.get_loops(block=b108)
l117 = sch.fuse(l113, l114, l115, l116, preserve_unit_iters=True)
v118 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=0)
sch.annotate(block_or_loop=b108, ann_key="meta_schedule.cooperative_fetch", ann_val=v118)
sch.reverse_compute_inline(block=b5)
sch.reverse_compute_inline(block=b4)
v119 = sch.sample_categorical(candidates=[0, 16, 64, 512, 1024], probs=[0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001], decision=4)
sch.annotate(block_or_loop=b6, ann_key="meta_schedule.unroll_explicit", ann_val=v119)
l120, l121, l122, l123, l124, l125 = sch.get_loops(block=b3)
l126 = sch.fuse(l120, l121, l122, l123, preserve_unit_iters=True)
v127 = sch.sample_categorical(candidates=[32, 64, 128, 256, 512, 1024], probs=[0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666], decision=2)
l128, l129 = sch.split(loop=l126, factors=[None, v127], preserve_unit_iters=True)
sch.bind(loop=l128, thread_axis="blockIdx.x")
sch.bind(loop=l129, thread_axis="threadIdx.x")
sch.enter_postproc()
sch.unannotate(block_or_loop=b97, ann_key="meta_schedule.cooperative_fetch")
l130, l131, l132, l133, l134 = sch.get_loops(block=b97)
l135, l136, l137 = sch.split(loop=l134, factors=[None, 384, 3], preserve_unit_iters=True)
sch.vectorize(loop=l137)
sch.bind(loop=l136, thread_axis="threadIdx.x")
sch.unannotate(block_or_loop=b108, ann_key="meta_schedule.cooperative_fetch")
l138, l139, l140, l141, l142 = sch.get_loops(block=b108)
l143, l144 = sch.split(loop=l142, factors=[None, 384], preserve_unit_iters=True)
sch.bind(loop=l144, thread_axis="threadIdx.x")
b145 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b145, ann_key="meta_schedule.unroll_explicit")
b146, b147, b148, b149, b150, b151, b152, b153, b154 = sch.get_child_blocks(b145)
l155, l156, l157, l158, l159, l160 = sch.get_loops(block=b146)
l161, l162, l163, l164, l165, l166 = sch.get_loops(block=b147)
sch.annotate(block_or_loop=l161, ann_key="pragma_auto_unroll_max_step", ann_val=1024)
sch.annotate(block_or_loop=l161, ann_key="pragma_unroll_explicit", ann_val=1)
l167, l168, l169, l170, l171, l172 = sch.get_loops(block=b148)
l173, l174, l175, l176, l177, l178, l179 = sch.get_loops(block=b149)
l180, l181, l182, l183, l184, l185 = sch.get_loops(block=b150)
l186, l187, l188, l189, l190, l191, l192, l193, l194, l195, l196, l197, l198, l199 = sch.get_loops(block=b151)
sch.annotate(block_or_loop=l186, ann_key="pragma_auto_unroll_max_step", ann_val=1024)
sch.annotate(block_or_loop=l186, ann_key="pragma_unroll_explicit", ann_val=1)
l200, l201, l202, l203, l204, l205, l206 = sch.get_loops(block=b152)
l207, l208, l209, l210, l211, l212, l213, l214 = sch.get_loops(block=b153)
sch.annotate(block_or_loop=l207, ann_key="pragma_auto_unroll_max_step", ann_val=1024)
sch.annotate(block_or_loop=l207, ann_key="pragma_unroll_explicit", ann_val=1)
l215, l216, l217, l218 = sch.get_loops(block=b154)
b219 = sch.get_block(name="data_pack", func_name="main")
l220, l221, l222, l223, l224, l225 = sch.get_loops(block=b219)
b226 = sch.decompose_reduction(block=b219, loop=l224)
b227 = sch.get_block(name="bgemm", func_name="main")
l228, l229, l230, l231, l232, l233, l234, l235, l236, l237, l238, l239, l240, l241 = sch.get_loops(block=b227)
b242 = sch.decompose_reduction(block=b227, loop=l231)
b243 = sch.get_block(name="inverse", func_name="main")
l244, l245, l246, l247, l248, l249, l250, l251 = sch.get_loops(block=b243)
b252 = sch.decompose_reduction(block=b243, loop=l250)
2024-04-28 20:38:37 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #126: GFLOPs: 5920.1014. Time: 204.0908 us. Best GFLOPs: 9095.9739
2024-04-28 20:38:37 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #127: GFLOPs: 302.6253. Time: 3992.5220 us. Best GFLOPs: 9095.9739
2024-04-28 21:00:45 [INFO] [evolutionary_search.cc:713] Generating candidates......
2024-04-28 21:00:49 [INFO] [evolutionary_search.cc:715] Picked top 102 candidate(s) from database
2024-04-28 21:00:56 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x43d23b8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x3ad3338)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x72c6e28)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x4cb1ce8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x5905ad8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x7272d28)]: 404 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x3ab3638)]: 0 failure(s)
2024-04-28 21:01:03 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x43d23b8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x3ad3338)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x72c6e28)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x4cb1ce8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x5905ad8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x7272d28)]: 804 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x3ab3638)]: 0 failure(s)
2024-04-28 21:01:11 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x43d23b8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x3ad3338)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x72c6e28)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x4cb1ce8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x5905ad8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x7272d28)]: 1213 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x3ab3638)]: 0 failure(s)
2024-04-28 21:01:18 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x43d23b8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x3ad3338)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x72c6e28)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x4cb1ce8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x5905ad8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x7272d28)]: 1613 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x3ab3638)]: 0 failure(s)
2024-04-28 21:01:25 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x43d23b8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x3ad3338)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x72c6e28)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x4cb1ce8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x5905ad8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x7272d28)]: 2017 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x3ab3638)]: 0 failure(s)
2024-04-28 21:01:32 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x43d23b8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x3ad3338)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x72c6e28)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x4cb1ce8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x5905ad8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x7272d28)]: 2421 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x3ab3638)]: 0 failure(s)
2024-04-28 21:01:39 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x43d23b8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x3ad3338)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x72c6e28)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x4cb1ce8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x5905ad8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x7272d28)]: 2821 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x3ab3638)]: 0 failure(s)
2024-04-28 21:01:47 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x43d23b8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x3ad3338)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x72c6e28)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x4cb1ce8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x5905ad8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x7272d28)]: 3230 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x3ab3638)]: 0 failure(s)
2024-04-28 21:01:47 [INFO] [evolutionary_search.cc:723] Sampled 50 candidate(s)
2024-04-28 21:02:07 [INFO] [evolutionary_search.cc:621] Evolve iter #0 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x43d23b8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x3ad3338)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x72c6e28)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x4cb1ce8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x5905ad8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x7272d28)]: 85 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x3ab3638)]: 0 failure(s)
2024-04-28 21:02:29 [INFO] [evolutionary_search.cc:621] Evolve iter #1 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x43d23b8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x3ad3338)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x72c6e28)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x4cb1ce8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x5905ad8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x7272d28)]: 70 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x3ab3638)]: 0 failure(s)
2024-04-28 21:02:49 [INFO] [evolutionary_search.cc:621] Evolve iter #2 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x43d23b8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x3ad3338)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x72c6e28)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x4cb1ce8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x5905ad8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x7272d28)]: 47 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x3ab3638)]: 0 failure(s)
2024-04-28 21:03:10 [INFO] [evolutionary_search.cc:621] Evolve iter #3 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x43d23b8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x3ad3338)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x72c6e28)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x4cb1ce8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x5905ad8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x7272d28)]: 58 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x3ab3638)]: 0 failure(s)
2024-04-28 21:03:15 [INFO] [evolutionary_search.cc:649] Scores of the best 64 candidates:
[1 : 16]:	1.0204  1.0123  0.9996  0.9932  0.9886  0.9857  0.9838  0.9834  0.9831  0.9785  0.9782  0.9778  0.9777  0.9775  0.9755  0.9744
[17 : 32]:	0.9736  0.9729  0.9726  0.9723  0.9723  0.9690  0.9689  0.9686  0.9683  0.9682  0.9667  0.9661  0.9659  0.9654  0.9652  0.9648
[33 : 48]:	0.9646  0.9644  0.9644  0.9644  0.9640  0.9638  0.9635  0.9635  0.9635  0.9628  0.9625  0.9621  0.9620  0.9619  0.9616  0.9607
[49 : 64]:	0.9605  0.9604  0.9604  0.9602  0.9601  0.9598  0.9592  0.9590  0.9589  0.9582  0.9582  0.9579  0.9576  0.9569  0.9568  0.9568
2024-04-28 21:03:15 [INFO] [evolutionary_search.cc:727] Got 64 candidate(s) with evolutionary search
2024-04-28 21:03:15 [INFO] [evolutionary_search.cc:730] Sending 64 candidates(s) for measurement
2024-04-28 21:04:24 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #128: GFLOPs: 8952.0966. Time: 134.9671 us. Best GFLOPs: 9095.9739
2024-04-28 21:04:24 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #129: GFLOPs: 8547.5483. Time: 141.3549 us. Best GFLOPs: 9095.9739
2024-04-28 21:04:24 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #130: GFLOPs: 8764.6930. Time: 137.8529 us. Best GFLOPs: 9095.9739
2024-04-28 21:04:24 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #131: GFLOPs: 8965.5444. Time: 134.7646 us. Best GFLOPs: 9095.9739
2024-04-28 21:04:24 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #132: GFLOPs: 8812.7700. Time: 137.1008 us. Best GFLOPs: 9095.9739
2024-04-28 21:04:24 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #133: GFLOPs: 8339.6969. Time: 144.8779 us. Best GFLOPs: 9095.9739
2024-04-28 21:04:24 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #134: GFLOPs: 8763.2812. Time: 137.8751 us. Best GFLOPs: 9095.9739
2024-04-28 21:04:24 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #135: GFLOPs: 8480.9057. Time: 142.4657 us. Best GFLOPs: 9095.9739
2024-04-28 21:04:24 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #136: GFLOPs: 8659.7432. Time: 139.5235 us. Best GFLOPs: 9095.9739
2024-04-28 21:04:24 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #137: GFLOPs: 8579.4163. Time: 140.8299 us. Best GFLOPs: 9095.9739
2024-04-28 21:04:24 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #138: GFLOPs: 8355.2759. Time: 144.6078 us. Best GFLOPs: 9095.9739
2024-04-28 21:04:24 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #139: GFLOPs: 8832.9989. Time: 136.7868 us. Best GFLOPs: 9095.9739
2024-04-28 21:04:24 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #140: GFLOPs: 8562.9829. Time: 141.1001 us. Best GFLOPs: 9095.9739
2024-04-28 21:04:24 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #141: GFLOPs: 6797.6253. Time: 177.7441 us. Best GFLOPs: 9095.9739
2024-04-28 21:04:24 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #142: GFLOPs: 8800.1513. Time: 137.2974 us. Best GFLOPs: 9095.9739
2024-04-28 21:04:24 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #143: GFLOPs: 8566.2465. Time: 141.0464 us. Best GFLOPs: 9095.9739
2024-04-28 21:04:24 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #144: GFLOPs: 8138.6944. Time: 148.4560 us. Best GFLOPs: 9095.9739
2024-04-28 21:04:24 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #145: GFLOPs: 8955.3439. Time: 134.9181 us. Best GFLOPs: 9095.9739
2024-04-28 21:04:24 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #146: GFLOPs: 8901.2268. Time: 135.7384 us. Best GFLOPs: 9095.9739
2024-04-28 21:04:24 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #147: GFLOPs: 8529.9876. Time: 141.6459 us. Best GFLOPs: 9095.9739
2024-04-28 21:04:24 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #148: GFLOPs: 8679.8444. Time: 139.2004 us. Best GFLOPs: 9095.9739
2024-04-28 21:04:24 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #149: GFLOPs: 8621.9840. Time: 140.1346 us. Best GFLOPs: 9095.9739
2024-04-28 21:04:24 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #150: GFLOPs: 8855.4217. Time: 136.4405 us. Best GFLOPs: 9095.9739
2024-04-28 21:04:24 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #151: GFLOPs: 8895.1738. Time: 135.8307 us. Best GFLOPs: 9095.9739
2024-04-28 21:04:24 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #152: GFLOPs: 8997.9066. Time: 134.2799 us. Best GFLOPs: 9095.9739
2024-04-28 21:04:24 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #153: GFLOPs: 8501.2387. Time: 142.1249 us. Best GFLOPs: 9095.9739
2024-04-28 21:04:24 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #154: GFLOPs: 7994.4331. Time: 151.1349 us. Best GFLOPs: 9095.9739
2024-04-28 21:04:24 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #155: GFLOPs: 8729.9720. Time: 138.4011 us. Best GFLOPs: 9095.9739
2024-04-28 21:04:24 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #156: GFLOPs: 9028.2841. Time: 133.8281 us. Best GFLOPs: 9095.9739
2024-04-28 21:04:24 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #157: GFLOPs: 8764.0656. Time: 137.8627 us. Best GFLOPs: 9095.9739
2024-04-28 21:04:24 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #158: GFLOPs: 8233.7482. Time: 146.7422 us. Best GFLOPs: 9095.9739
2024-04-28 21:04:24 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #159: GFLOPs: 8651.5373. Time: 139.6559 us. Best GFLOPs: 9095.9739
2024-04-28 21:04:24 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #160: GFLOPs: 8732.0963. Time: 138.3675 us. Best GFLOPs: 9095.9739
2024-04-28 21:04:24 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #161: GFLOPs: 8599.1666. Time: 140.5064 us. Best GFLOPs: 9095.9739
2024-04-28 21:04:24 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #162: GFLOPs: 8509.8091. Time: 141.9818 us. Best GFLOPs: 9095.9739
2024-04-28 21:04:24 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #163: GFLOPs: 8604.8655. Time: 140.4134 us. Best GFLOPs: 9095.9739
2024-04-28 21:04:24 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #164: GFLOPs: 8712.6908. Time: 138.6757 us. Best GFLOPs: 9095.9739
2024-04-28 21:04:24 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #165: GFLOPs: 8693.1230. Time: 138.9878 us. Best GFLOPs: 9095.9739
2024-04-28 21:04:24 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #166: GFLOPs: 8639.0235. Time: 139.8582 us. Best GFLOPs: 9095.9739
2024-04-28 21:04:24 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #167: GFLOPs: 8545.3772. Time: 141.3908 us. Best GFLOPs: 9095.9739
2024-04-28 21:04:24 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #168: GFLOPs: 8647.7193. Time: 139.7175 us. Best GFLOPs: 9095.9739
2024-04-28 21:04:24 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #169: GFLOPs: 8568.9398. Time: 141.0020 us. Best GFLOPs: 9095.9739
2024-04-28 21:04:24 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #170: GFLOPs: 8735.3610. Time: 138.3158 us. Best GFLOPs: 9095.9739
2024-04-28 21:04:24 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #171: GFLOPs: 8953.8022. Time: 134.9413 us. Best GFLOPs: 9095.9739
2024-04-28 21:04:24 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #172: GFLOPs: 8765.3496. Time: 137.8425 us. Best GFLOPs: 9095.9739
2024-04-28 21:04:24 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #173: GFLOPs: 8826.1872. Time: 136.8924 us. Best GFLOPs: 9095.9739
2024-04-28 21:04:24 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #174: GFLOPs: 8977.0197. Time: 134.5923 us. Best GFLOPs: 9095.9739
2024-04-28 21:04:24 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #175: GFLOPs: 8701.3987. Time: 138.8556 us. Best GFLOPs: 9095.9739
2024-04-28 21:04:24 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #176: GFLOPs: 8704.0739. Time: 138.8129 us. Best GFLOPs: 9095.9739
2024-04-28 21:04:24 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #177: GFLOPs: 8636.5471. Time: 139.8983 us. Best GFLOPs: 9095.9739
2024-04-28 21:04:24 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #178: GFLOPs: 8656.9797. Time: 139.5681 us. Best GFLOPs: 9095.9739
2024-04-28 21:04:24 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #179: GFLOPs: 8827.9200. Time: 136.8655 us. Best GFLOPs: 9095.9739
2024-04-28 21:04:24 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #180: GFLOPs: 8060.1099. Time: 149.9034 us. Best GFLOPs: 9095.9739
2024-04-28 21:04:24 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #181: GFLOPs: 8670.6354. Time: 139.3483 us. Best GFLOPs: 9095.9739
2024-04-28 21:04:24 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #182: GFLOPs: 8690.2818. Time: 139.0332 us. Best GFLOPs: 9095.9739
2024-04-28 21:04:24 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #183: GFLOPs: 8827.4786. Time: 136.8724 us. Best GFLOPs: 9095.9739
2024-04-28 21:04:24 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #184: GFLOPs: 8757.4469. Time: 137.9669 us. Best GFLOPs: 9095.9739
2024-04-28 21:04:24 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #185: GFLOPs: 8671.7004. Time: 139.3312 us. Best GFLOPs: 9095.9739
2024-04-28 21:04:24 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #186: GFLOPs: 8736.8903. Time: 138.2915 us. Best GFLOPs: 9095.9739
2024-04-28 21:04:24 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #187: GFLOPs: 9003.4914. Time: 134.1966 us. Best GFLOPs: 9095.9739
2024-04-28 21:04:24 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #188: GFLOPs: 8395.2074. Time: 143.9200 us. Best GFLOPs: 9095.9739
2024-04-28 21:04:24 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #189: GFLOPs: 205.6864. Time: 5874.1760 us. Best GFLOPs: 9095.9739
2024-04-28 21:04:24 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #190: GFLOPs: 6602.6807. Time: 182.9921 us. Best GFLOPs: 9095.9739
2024-04-28 21:04:24 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #191: GFLOPs: 264.9963. Time: 4559.4531 us. Best GFLOPs: 9095.9739
2024-04-28 21:22:13 [INFO] [evolutionary_search.cc:713] Generating candidates......
2024-04-28 21:22:17 [INFO] [evolutionary_search.cc:715] Picked top 102 candidate(s) from database
2024-04-28 21:22:23 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x43d23b8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x3ad3338)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x72c6e28)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x4cb1ce8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x5905ad8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x7272d28)]: 404 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x3ab3638)]: 0 failure(s)
2024-04-28 21:22:30 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x43d23b8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x3ad3338)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x72c6e28)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x4cb1ce8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x5905ad8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x7272d28)]: 806 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x3ab3638)]: 0 failure(s)
2024-04-28 21:22:37 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x43d23b8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x3ad3338)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x72c6e28)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x4cb1ce8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x5905ad8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x7272d28)]: 1208 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x3ab3638)]: 0 failure(s)
2024-04-28 21:22:44 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x43d23b8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x3ad3338)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x72c6e28)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x4cb1ce8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x5905ad8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x7272d28)]: 1613 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x3ab3638)]: 0 failure(s)
2024-04-28 21:22:51 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x43d23b8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x3ad3338)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x72c6e28)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x4cb1ce8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x5905ad8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x7272d28)]: 2018 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x3ab3638)]: 0 failure(s)
2024-04-28 21:22:58 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x43d23b8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x3ad3338)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x72c6e28)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x4cb1ce8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x5905ad8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x7272d28)]: 2420 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x3ab3638)]: 0 failure(s)
2024-04-28 21:23:04 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x43d23b8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x3ad3338)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x72c6e28)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x4cb1ce8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x5905ad8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x7272d28)]: 2827 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x3ab3638)]: 0 failure(s)
2024-04-28 21:23:11 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x43d23b8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x3ad3338)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x72c6e28)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x4cb1ce8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x5905ad8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x7272d28)]: 3223 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x3ab3638)]: 0 failure(s)
2024-04-28 21:23:11 [INFO] [evolutionary_search.cc:723] Sampled 57 candidate(s)
2024-04-28 21:23:30 [INFO] [evolutionary_search.cc:621] Evolve iter #0 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x43d23b8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x3ad3338)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x72c6e28)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x4cb1ce8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x5905ad8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x7272d28)]: 79 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x3ab3638)]: 0 failure(s)
2024-04-28 21:23:52 [INFO] [evolutionary_search.cc:621] Evolve iter #1 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x43d23b8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x3ad3338)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x72c6e28)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x4cb1ce8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x5905ad8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x7272d28)]: 68 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x3ab3638)]: 0 failure(s)
2024-04-28 21:24:14 [INFO] [evolutionary_search.cc:621] Evolve iter #2 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x43d23b8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x3ad3338)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x72c6e28)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x4cb1ce8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x5905ad8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x7272d28)]: 67 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x3ab3638)]: 0 failure(s)
2024-04-28 21:24:36 [INFO] [evolutionary_search.cc:621] Evolve iter #3 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x43d23b8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x3ad3338)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x72c6e28)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x4cb1ce8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x5905ad8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x7272d28)]: 68 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x3ab3638)]: 0 failure(s)
2024-04-28 21:24:41 [INFO] [evolutionary_search.cc:649] Scores of the best 64 candidates:
[1 : 16]:	1.3386  1.3322  1.3298  1.3298  1.3235  1.3128  1.2634  1.1669  1.1645  1.1388  1.1367  1.1026  1.0293  1.0263  1.0194  1.0194
[17 : 32]:	1.0180  1.0156  1.0054  1.0012  1.0001  0.9986  0.9950  0.9940  0.9912  0.9907  0.9897  0.9889  0.9888  0.9883  0.9877  0.9867
[33 : 48]:	0.9817  0.9813  0.9795  0.9790  0.9785  0.9776  0.9770  0.9767  0.9751  0.9746  0.9742  0.9714  0.9714  0.9713  0.9711  0.9706
[49 : 64]:	0.9699  0.9699  0.9699  0.9697  0.9695  0.9692  0.9692  0.9691  0.9690  0.9687  0.9686  0.9684  0.9684  0.9683  0.9682  0.9681
2024-04-28 21:24:41 [INFO] [evolutionary_search.cc:727] Got 64 candidate(s) with evolutionary search
2024-04-28 21:24:41 [INFO] [evolutionary_search.cc:730] Sending 64 candidates(s) for measurement
2024-04-28 21:25:52 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #192: GFLOPs: 93.0897. Time: 12979.2924 us. Best GFLOPs: 9095.9739
2024-04-28 21:25:52 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #193: GFLOPs: 97.6908. Time: 12367.9860 us. Best GFLOPs: 9095.9739
2024-04-28 21:25:52 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #194: GFLOPs: 61.3195. Time: 19703.9782 us. Best GFLOPs: 9095.9739
2024-04-28 21:25:52 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #195: GFLOPs: 52.6013. Time: 22969.7540 us. Best GFLOPs: 9095.9739
2024-04-28 21:25:52 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #196: GFLOPs: 66.5293. Time: 18160.9813 us. Best GFLOPs: 9095.9739
2024-04-28 21:25:52 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #197: GFLOPs: 761.8909. Time: 1585.8414 us. Best GFLOPs: 9095.9739
2024-04-28 21:25:52 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #198: GFLOPs: 493.5846. Time: 2447.8845 us. Best GFLOPs: 9095.9739
2024-04-28 21:25:52 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #199: GFLOPs: 292.5402. Time: 4130.1605 us. Best GFLOPs: 9095.9739
2024-04-28 21:25:52 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #200: GFLOPs: 284.4237. Time: 4248.0214 us. Best GFLOPs: 9095.9739
2024-04-28 21:25:52 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #201: GFLOPs: 276.0608. Time: 4376.7096 us. Best GFLOPs: 9095.9739
2024-04-28 21:25:52 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #202: GFLOPs: 279.8782. Time: 4317.0134 us. Best GFLOPs: 9095.9739
2024-04-28 21:25:52 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #203: GFLOPs: 287.4990. Time: 4202.5814 us. Best GFLOPs: 9095.9739
2024-04-28 21:25:52 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #204: GFLOPs: 8985.6610. Time: 134.4629 us. Best GFLOPs: 9095.9739
2024-04-28 21:25:52 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #205: GFLOPs: 9036.2886. Time: 133.7095 us. Best GFLOPs: 9095.9739
2024-04-28 21:25:52 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #206: GFLOPs: 5432.4893. Time: 222.4097 us. Best GFLOPs: 9095.9739
2024-04-28 21:25:52 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #207: GFLOPs: 8798.5880. Time: 137.3218 us. Best GFLOPs: 9095.9739
2024-04-28 21:25:52 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #208: GFLOPs: 5412.6838. Time: 223.2235 us. Best GFLOPs: 9095.9739
2024-04-28 21:25:52 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #209: GFLOPs: 56.7209. Time: 21301.4526 us. Best GFLOPs: 9095.9739
2024-04-28 21:25:52 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #210: GFLOPs: 9528.8277. Time: 126.7982 us. Best GFLOPs: 9528.8277
2024-04-28 21:25:52 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #211: GFLOPs: 8976.9298. Time: 134.5937 us. Best GFLOPs: 9528.8277
2024-04-28 21:25:52 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #212: GFLOPs: 6137.8648. Time: 196.8499 us. Best GFLOPs: 9528.8277
2024-04-28 21:25:52 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #213: GFLOPs: 5737.6704. Time: 210.5799 us. Best GFLOPs: 9528.8277
2024-04-28 21:25:52 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #214: GFLOPs: 9345.0924. Time: 129.2912 us. Best GFLOPs: 9528.8277
2024-04-28 21:25:52 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #215: GFLOPs: 7828.3892. Time: 154.3406 us. Best GFLOPs: 9528.8277
2024-04-28 21:25:52 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #216: GFLOPs: 8705.9846. Time: 138.7825 us. Best GFLOPs: 9528.8277
2024-04-28 21:25:52 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #217: GFLOPs: 9009.2882. Time: 134.1103 us. Best GFLOPs: 9528.8277
2024-04-28 21:25:52 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #218: GFLOPs: 9008.1072. Time: 134.1279 us. Best GFLOPs: 9528.8277
2024-04-28 21:25:52 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #219: GFLOPs: 8582.6122. Time: 140.7774 us. Best GFLOPs: 9528.8277
2024-04-28 21:25:52 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #220: GFLOPs: 8686.6716. Time: 139.0910 us. Best GFLOPs: 9528.8277
2024-04-28 21:25:52 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #221: GFLOPs: 8627.6494. Time: 140.0426 us. Best GFLOPs: 9528.8277
2024-04-28 21:25:52 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #222: GFLOPs: 8676.2627. Time: 139.2579 us. Best GFLOPs: 9528.8277
2024-04-28 21:25:52 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #223: GFLOPs: 8494.6847. Time: 142.2346 us. Best GFLOPs: 9528.8277
2024-04-28 21:25:52 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #224: GFLOPs: 8977.4924. Time: 134.5853 us. Best GFLOPs: 9528.8277
2024-04-28 21:25:52 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #225: GFLOPs: 7791.2283. Time: 155.0767 us. Best GFLOPs: 9528.8277
2024-04-28 21:25:52 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #226: GFLOPs: 8559.7476. Time: 141.1535 us. Best GFLOPs: 9528.8277
2024-04-28 21:25:52 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #227: GFLOPs: 8720.3004. Time: 138.5546 us. Best GFLOPs: 9528.8277
2024-04-28 21:25:52 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #228: GFLOPs: 8775.9237. Time: 137.6765 us. Best GFLOPs: 9528.8277
2024-04-28 21:25:52 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #229: GFLOPs: 8576.4848. Time: 140.8780 us. Best GFLOPs: 9528.8277
2024-04-28 21:25:52 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #230: GFLOPs: 8995.2059. Time: 134.3202 us. Best GFLOPs: 9528.8277
2024-04-28 21:25:52 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #231: GFLOPs: 9037.3120. Time: 133.6944 us. Best GFLOPs: 9528.8277
2024-04-28 21:25:52 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #232: GFLOPs: 8793.8602. Time: 137.3956 us. Best GFLOPs: 9528.8277
2024-04-28 21:25:52 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #233: GFLOPs: 8970.5079. Time: 134.6900 us. Best GFLOPs: 9528.8277
2024-04-28 21:25:52 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #234: GFLOPs: 8822.1742. Time: 136.9547 us. Best GFLOPs: 9528.8277
2024-04-28 21:25:52 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #235: GFLOPs: 5542.4652. Time: 217.9965 us. Best GFLOPs: 9528.8277
2024-04-28 21:25:52 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #236: GFLOPs: 9008.3785. Time: 134.1238 us. Best GFLOPs: 9528.8277
2024-04-28 21:25:52 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #237: GFLOPs: 8900.4116. Time: 135.7508 us. Best GFLOPs: 9528.8277
2024-04-28 21:25:52 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #238: GFLOPs: 9208.7215. Time: 131.2058 us. Best GFLOPs: 9528.8277
2024-04-28 21:25:52 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #239: GFLOPs: 8975.9189. Time: 134.6088 us. Best GFLOPs: 9528.8277
2024-04-28 21:25:52 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #240: GFLOPs: 8980.5869. Time: 134.5389 us. Best GFLOPs: 9528.8277
2024-04-28 21:25:52 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #241: GFLOPs: 9020.6334. Time: 133.9416 us. Best GFLOPs: 9528.8277
2024-04-28 21:25:52 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #242: GFLOPs: 8832.8823. Time: 136.7887 us. Best GFLOPs: 9528.8277
2024-04-28 21:25:52 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #243: GFLOPs: 9024.7634. Time: 133.8803 us. Best GFLOPs: 9528.8277
2024-04-28 21:25:52 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #244: GFLOPs: 8868.3751. Time: 136.2412 us. Best GFLOPs: 9528.8277
2024-04-28 21:25:52 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #245: GFLOPs: 8570.7058. Time: 140.9730 us. Best GFLOPs: 9528.8277
2024-04-28 21:25:52 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #246: GFLOPs: 8585.3988. Time: 140.7317 us. Best GFLOPs: 9528.8277
2024-04-28 21:25:52 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #247: GFLOPs: 8628.0623. Time: 140.0359 us. Best GFLOPs: 9528.8277
2024-04-28 21:25:52 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #248: GFLOPs: 8987.2016. Time: 134.4399 us. Best GFLOPs: 9528.8277
2024-04-28 21:25:52 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #249: GFLOPs: 8386.7566. Time: 144.0650 us. Best GFLOPs: 9528.8277
2024-04-28 21:25:52 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #250: GFLOPs: 9008.0118. Time: 134.1293 us. Best GFLOPs: 9528.8277
2024-04-28 21:25:52 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #251: GFLOPs: 9132.0675. Time: 132.3072 us. Best GFLOPs: 9528.8277
2024-04-28 21:25:52 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #252: GFLOPs: 9084.5505. Time: 132.9992 us. Best GFLOPs: 9528.8277
2024-04-28 21:25:52 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #253: GFLOPs: 326.5278. Time: 3700.2607 us. Best GFLOPs: 9528.8277
2024-04-28 21:25:52 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #254: GFLOPs: 98.4534. Time: 12272.1846 us. Best GFLOPs: 9528.8277
2024-04-28 21:25:52 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #255: GFLOPs: 650.9239. Time: 1856.1896 us. Best GFLOPs: 9528.8277
2024-04-28 21:47:32 [INFO] [evolutionary_search.cc:713] Generating candidates......
2024-04-28 21:47:36 [INFO] [evolutionary_search.cc:715] Picked top 102 candidate(s) from database
2024-04-28 21:47:42 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x43d23b8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x3ad3338)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x72c6e28)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x4cb1ce8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x5905ad8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x7272d28)]: 402 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x3ab3638)]: 0 failure(s)
2024-04-28 21:47:49 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x43d23b8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x3ad3338)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x72c6e28)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x4cb1ce8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x5905ad8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x7272d28)]: 806 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x3ab3638)]: 0 failure(s)
2024-04-28 21:47:55 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x43d23b8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x3ad3338)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x72c6e28)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x4cb1ce8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x5905ad8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x7272d28)]: 1209 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x3ab3638)]: 0 failure(s)
2024-04-28 21:48:01 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x43d23b8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x3ad3338)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x72c6e28)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x4cb1ce8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x5905ad8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x7272d28)]: 1613 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x3ab3638)]: 0 failure(s)
2024-04-28 21:48:08 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x43d23b8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x3ad3338)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x72c6e28)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x4cb1ce8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x5905ad8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x7272d28)]: 2018 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x3ab3638)]: 0 failure(s)
2024-04-28 21:48:15 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x43d23b8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x3ad3338)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x72c6e28)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x4cb1ce8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x5905ad8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x7272d28)]: 2421 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x3ab3638)]: 0 failure(s)
2024-04-28 21:48:21 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x43d23b8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x3ad3338)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x72c6e28)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x4cb1ce8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x5905ad8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x7272d28)]: 2827 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x3ab3638)]: 0 failure(s)
2024-04-28 21:48:28 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x43d23b8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x3ad3338)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x72c6e28)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x4cb1ce8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x5905ad8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x7272d28)]: 3231 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x3ab3638)]: 0 failure(s)
2024-04-28 21:48:34 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x43d23b8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x3ad3338)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x72c6e28)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x4cb1ce8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x5905ad8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x7272d28)]: 3634 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x3ab3638)]: 0 failure(s)
2024-04-28 21:48:34 [INFO] [evolutionary_search.cc:723] Sampled 56 candidate(s)
2024-04-28 21:48:52 [INFO] [evolutionary_search.cc:621] Evolve iter #0 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x43d23b8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x3ad3338)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x72c6e28)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x4cb1ce8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x5905ad8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x7272d28)]: 74 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x3ab3638)]: 0 failure(s)
2024-04-28 21:49:13 [INFO] [evolutionary_search.cc:621] Evolve iter #1 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x43d23b8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x3ad3338)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x72c6e28)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x4cb1ce8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x5905ad8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x7272d28)]: 69 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x3ab3638)]: 0 failure(s)
2024-04-28 21:49:34 [INFO] [evolutionary_search.cc:621] Evolve iter #2 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x43d23b8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x3ad3338)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x72c6e28)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x4cb1ce8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x5905ad8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x7272d28)]: 59 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x3ab3638)]: 0 failure(s)
2024-04-28 21:49:54 [INFO] [evolutionary_search.cc:621] Evolve iter #3 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x43d23b8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x3ad3338)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x72c6e28)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x4cb1ce8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x5905ad8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x7272d28)]: 65 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x3ab3638)]: 0 failure(s)
2024-04-28 21:49:59 [INFO] [evolutionary_search.cc:649] Scores of the best 64 candidates:
[1 : 16]:	0.9868  0.9864  0.9819  0.9684  0.9578  0.9535  0.9507  0.9485  0.9485  0.9476  0.9473  0.9468  0.9466  0.9450  0.9446  0.9443
[17 : 32]:	0.9438  0.9438  0.9431  0.9426  0.9415  0.9410  0.9405  0.9404  0.9401  0.9391  0.9384  0.9383  0.9370  0.9369  0.9368  0.9365
[33 : 48]:	0.9364  0.9363  0.9360  0.9359  0.9357  0.9352  0.9350  0.9346  0.9343  0.9342  0.9341  0.9335  0.9331  0.9330  0.9327  0.9324
[49 : 64]:	0.9324  0.9322  0.9321  0.9320  0.9319  0.9318  0.9316  0.9315  0.9315  0.9312  0.9312  0.9304  0.9304  0.9304  0.9298  0.9297
2024-04-28 21:49:59 [INFO] [evolutionary_search.cc:727] Got 64 candidate(s) with evolutionary search
2024-04-28 21:49:59 [INFO] [evolutionary_search.cc:730] Sending 64 candidates(s) for measurement
2024-04-28 21:51:14 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #256: GFLOPs: 9471.7167. Time: 127.5627 us. Best GFLOPs: 9528.8277
2024-04-28 21:51:14 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #257: GFLOPs: 9240.7084. Time: 130.7517 us. Best GFLOPs: 9528.8277
2024-04-28 21:51:14 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #258: GFLOPs: 9077.1268. Time: 133.1080 us. Best GFLOPs: 9528.8277
2024-04-28 21:51:14 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #259: GFLOPs: 8691.1082. Time: 139.0200 us. Best GFLOPs: 9528.8277
2024-04-28 21:51:14 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #260: GFLOPs: 9630.3585. Time: 125.4614 us. Best GFLOPs: 9630.3585
2024-04-28 21:51:14 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #261: GFLOPs: 9488.9367. Time: 127.3312 us. Best GFLOPs: 9630.3585
2024-04-28 21:51:14 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #262: GFLOPs: 8986.6070. Time: 134.4488 us. Best GFLOPs: 9630.3585
2024-04-28 21:51:14 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #263: GFLOPs: 8989.4985. Time: 134.4055 us. Best GFLOPs: 9630.3585
2024-04-28 21:51:14 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #264: GFLOPs: 9112.1283. Time: 132.5967 us. Best GFLOPs: 9630.3585
2024-04-28 21:51:14 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #265: GFLOPs: 9326.0164. Time: 129.5556 us. Best GFLOPs: 9630.3585
2024-04-28 21:51:14 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #266: GFLOPs: 9432.3927. Time: 128.0945 us. Best GFLOPs: 9630.3585
2024-04-28 21:51:14 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #267: GFLOPs: 9326.5803. Time: 129.5478 us. Best GFLOPs: 9630.3585
2024-04-28 21:51:14 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #268: GFLOPs: 9508.6528. Time: 127.0672 us. Best GFLOPs: 9630.3585
2024-04-28 21:51:14 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #269: GFLOPs: 9448.0335. Time: 127.8825 us. Best GFLOPs: 9630.3585
2024-04-28 21:51:14 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #270: GFLOPs: 9122.6945. Time: 132.4431 us. Best GFLOPs: 9630.3585
2024-04-28 21:51:14 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #271: GFLOPs: 9082.9007. Time: 133.0234 us. Best GFLOPs: 9630.3585
2024-04-28 21:51:14 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #272: GFLOPs: 9077.9531. Time: 133.0959 us. Best GFLOPs: 9630.3585
2024-04-28 21:51:14 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #273: GFLOPs: 9063.2285. Time: 133.3121 us. Best GFLOPs: 9630.3585
2024-04-28 21:51:14 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #274: GFLOPs: 7337.9140. Time: 164.6569 us. Best GFLOPs: 9630.3585
2024-04-28 21:51:14 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #275: GFLOPs: 9211.4183. Time: 131.1674 us. Best GFLOPs: 9630.3585
2024-04-28 21:51:14 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #276: GFLOPs: 6285.3610. Time: 192.2305 us. Best GFLOPs: 9630.3585
2024-04-28 21:51:14 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #277: GFLOPs: 9167.9185. Time: 131.7898 us. Best GFLOPs: 9630.3585
2024-04-28 21:51:14 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #278: GFLOPs: 9080.4601. Time: 133.0591 us. Best GFLOPs: 9630.3585
2024-04-28 21:51:14 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #279: GFLOPs: 9087.5765. Time: 132.9549 us. Best GFLOPs: 9630.3585
2024-04-28 21:51:14 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #280: GFLOPs: 9035.1684. Time: 133.7261 us. Best GFLOPs: 9630.3585
2024-04-28 21:51:14 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #281: GFLOPs: 9064.5238. Time: 133.2931 us. Best GFLOPs: 9630.3585
2024-04-28 21:51:14 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #282: GFLOPs: 9086.1545. Time: 132.9757 us. Best GFLOPs: 9630.3585
2024-04-28 21:51:14 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #283: GFLOPs: 8733.4365. Time: 138.3462 us. Best GFLOPs: 9630.3585
2024-04-28 21:51:14 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #284: GFLOPs: 9262.2114. Time: 130.4481 us. Best GFLOPs: 9630.3585
2024-04-28 21:51:14 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #285: GFLOPs: 9248.9465. Time: 130.6352 us. Best GFLOPs: 9630.3585
2024-04-28 21:51:14 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #286: GFLOPs: 9110.9519. Time: 132.6138 us. Best GFLOPs: 9630.3585
2024-04-28 21:51:14 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #287: GFLOPs: 9178.9362. Time: 131.6316 us. Best GFLOPs: 9630.3585
2024-04-28 21:51:14 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #288: GFLOPs: 9159.0249. Time: 131.9178 us. Best GFLOPs: 9630.3585
2024-04-28 21:51:14 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #289: GFLOPs: 9014.4671. Time: 134.0332 us. Best GFLOPs: 9630.3585
2024-04-28 21:51:14 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #290: GFLOPs: 8988.0554. Time: 134.4271 us. Best GFLOPs: 9630.3585
2024-04-28 21:51:14 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #291: GFLOPs: 9240.1724. Time: 130.7593 us. Best GFLOPs: 9630.3585
2024-04-28 21:51:14 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #292: GFLOPs: 9174.2980. Time: 131.6981 us. Best GFLOPs: 9630.3585
2024-04-28 21:51:14 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #293: GFLOPs: 7335.0040. Time: 164.7222 us. Best GFLOPs: 9630.3585
2024-04-28 21:51:14 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #294: GFLOPs: 9061.7195. Time: 133.3343 us. Best GFLOPs: 9630.3585
2024-04-28 21:51:14 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #295: GFLOPs: 8940.5374. Time: 135.1415 us. Best GFLOPs: 9630.3585
2024-04-28 21:51:14 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #296: GFLOPs: 9106.7920. Time: 132.6744 us. Best GFLOPs: 9630.3585
2024-04-28 21:51:14 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #297: GFLOPs: 9275.9695. Time: 130.2546 us. Best GFLOPs: 9630.3585
2024-04-28 21:51:14 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #298: GFLOPs: 8770.0338. Time: 137.7689 us. Best GFLOPs: 9630.3585
2024-04-28 21:51:14 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #299: GFLOPs: 9098.1928. Time: 132.7998 us. Best GFLOPs: 9630.3585
2024-04-28 21:51:14 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #300: GFLOPs: 8858.3026. Time: 136.3961 us. Best GFLOPs: 9630.3585
2024-04-28 21:51:14 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #301: GFLOPs: 9050.3001. Time: 133.5025 us. Best GFLOPs: 9630.3585
2024-04-28 21:51:14 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #302: GFLOPs: 9012.8174. Time: 134.0578 us. Best GFLOPs: 9630.3585
2024-04-28 21:51:14 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #303: GFLOPs: 9116.2981. Time: 132.5360 us. Best GFLOPs: 9630.3585
2024-04-28 21:51:14 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #304: GFLOPs: 8870.3147. Time: 136.2114 us. Best GFLOPs: 9630.3585
2024-04-28 21:51:14 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #305: GFLOPs: 9937.3507. Time: 121.5855 us. Best GFLOPs: 9937.3507
2024-04-28 21:51:14 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #306: GFLOPs: 9013.1219. Time: 134.0532 us. Best GFLOPs: 9937.3507
2024-04-28 21:51:14 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #307: GFLOPs: 8974.5719. Time: 134.6290 us. Best GFLOPs: 9937.3507
2024-04-28 21:51:14 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #308: GFLOPs: 7351.5498. Time: 164.3515 us. Best GFLOPs: 9937.3507
2024-04-28 21:51:14 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #309: GFLOPs: 9093.0702. Time: 132.8746 us. Best GFLOPs: 9937.3507
2024-04-28 21:51:14 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #310: GFLOPs: 9108.1875. Time: 132.6541 us. Best GFLOPs: 9937.3507
2024-04-28 21:51:14 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #311: GFLOPs: 9123.0929. Time: 132.4373 us. Best GFLOPs: 9937.3507
2024-04-28 21:51:14 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #312: GFLOPs: 8948.2530. Time: 135.0250 us. Best GFLOPs: 9937.3507
2024-04-28 21:51:14 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #313: GFLOPs: 9009.9566. Time: 134.1003 us. Best GFLOPs: 9937.3507
2024-04-28 21:51:14 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #314: GFLOPs: 9096.2506. Time: 132.8281 us. Best GFLOPs: 9937.3507
2024-04-28 21:51:14 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #315: GFLOPs: 9186.7831. Time: 131.5192 us. Best GFLOPs: 9937.3507
2024-04-28 21:51:14 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #316: GFLOPs: 8942.7867. Time: 135.1076 us. Best GFLOPs: 9937.3507
2024-04-28 21:51:14 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #317: GFLOPs: 4440.2207. Time: 272.1122 us. Best GFLOPs: 9937.3507
2024-04-28 21:51:14 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #318: GFLOPs: 4127.4183. Time: 292.7346 us. Best GFLOPs: 9937.3507
2024-04-28 21:51:14 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #319: GFLOPs: 3316.5059. Time: 364.3105 us. Best GFLOPs: 9937.3507
2024-04-28 22:15:58 [INFO] [evolutionary_search.cc:713] Generating candidates......
2024-04-28 22:16:01 [INFO] [evolutionary_search.cc:715] Picked top 102 candidate(s) from database
2024-04-28 22:16:09 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x43d23b8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x3ad3338)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x72c6e28)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x4cb1ce8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x5905ad8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x7272d28)]: 404 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x3ab3638)]: 0 failure(s)
2024-04-28 22:16:16 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x43d23b8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x3ad3338)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x72c6e28)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x4cb1ce8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x5905ad8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x7272d28)]: 804 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x3ab3638)]: 0 failure(s)
2024-04-28 22:16:23 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x43d23b8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x3ad3338)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x72c6e28)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x4cb1ce8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x5905ad8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x7272d28)]: 1210 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x3ab3638)]: 0 failure(s)
2024-04-28 22:16:30 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x43d23b8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x3ad3338)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x72c6e28)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x4cb1ce8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x5905ad8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x7272d28)]: 1617 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x3ab3638)]: 0 failure(s)
2024-04-28 22:16:37 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x43d23b8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x3ad3338)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x72c6e28)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x4cb1ce8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x5905ad8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x7272d28)]: 2023 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x3ab3638)]: 0 failure(s)
2024-04-28 22:16:44 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x43d23b8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x3ad3338)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x72c6e28)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x4cb1ce8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x5905ad8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x7272d28)]: 2426 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x3ab3638)]: 0 failure(s)
2024-04-28 22:16:51 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x43d23b8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x3ad3338)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x72c6e28)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x4cb1ce8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x5905ad8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x7272d28)]: 2833 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x3ab3638)]: 0 failure(s)
2024-04-28 22:16:58 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x43d23b8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x3ad3338)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x72c6e28)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x4cb1ce8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x5905ad8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x7272d28)]: 3236 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x3ab3638)]: 0 failure(s)
2024-04-28 22:17:05 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x43d23b8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x3ad3338)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x72c6e28)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x4cb1ce8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x5905ad8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x7272d28)]: 3640 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x3ab3638)]: 0 failure(s)
2024-04-28 22:17:05 [INFO] [evolutionary_search.cc:723] Sampled 50 candidate(s)
2024-04-28 22:17:23 [INFO] [evolutionary_search.cc:621] Evolve iter #0 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x43d23b8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x3ad3338)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x72c6e28)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x4cb1ce8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x5905ad8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x7272d28)]: 88 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x3ab3638)]: 0 failure(s)
2024-04-28 22:17:44 [INFO] [evolutionary_search.cc:621] Evolve iter #1 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x43d23b8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x3ad3338)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x72c6e28)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x4cb1ce8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x5905ad8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x7272d28)]: 82 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x3ab3638)]: 0 failure(s)
2024-04-28 22:18:05 [INFO] [evolutionary_search.cc:621] Evolve iter #2 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x43d23b8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x3ad3338)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x72c6e28)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x4cb1ce8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x5905ad8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x7272d28)]: 81 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x3ab3638)]: 0 failure(s)
2024-04-28 22:18:26 [INFO] [evolutionary_search.cc:621] Evolve iter #3 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x43d23b8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x3ad3338)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x72c6e28)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x4cb1ce8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x5905ad8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x7272d28)]: 92 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x3ab3638)]: 0 failure(s)
2024-04-28 22:18:31 [INFO] [evolutionary_search.cc:649] Scores of the best 64 candidates:
[1 : 16]:	0.9784  0.9706  0.9632  0.9578  0.9572  0.9530  0.9505  0.9485  0.9447  0.9434  0.9423  0.9401  0.9400  0.9384  0.9375  0.9356
[17 : 32]:	0.9356  0.9350  0.9350  0.9325  0.9317  0.9312  0.9303  0.9303  0.9283  0.9267  0.9262  0.9260  0.9255  0.9251  0.9246  0.9245
[33 : 48]:	0.9245  0.9243  0.9240  0.9228  0.9212  0.9210  0.9210  0.9206  0.9204  0.9189  0.9186  0.9185  0.9183  0.9180  0.9176  0.9176
[49 : 64]:	0.9162  0.9162  0.9156  0.9151  0.9147  0.9147  0.9146  0.9141  0.9136  0.9135  0.9134  0.9129  0.9125  0.9124  0.9124  0.9123
2024-04-28 22:18:31 [INFO] [evolutionary_search.cc:727] Got 64 candidate(s) with evolutionary search
2024-04-28 22:18:31 [INFO] [evolutionary_search.cc:730] Sending 64 candidates(s) for measurement
2024-04-28 22:19:38 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #320: GFLOPs: 8094.9915. Time: 149.2575 us. Best GFLOPs: 9937.3507
2024-04-28 22:19:38 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #321: GFLOPs: 9567.3257. Time: 126.2880 us. Best GFLOPs: 9937.3507
2024-04-28 22:19:38 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #322: GFLOPs: 9181.9817. Time: 131.5879 us. Best GFLOPs: 9937.3507
2024-04-28 22:19:38 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #323: GFLOPs: 9775.1717. Time: 123.6027 us. Best GFLOPs: 9937.3507
2024-04-28 22:19:38 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #324: GFLOPs: 9962.5128. Time: 121.2784 us. Best GFLOPs: 9962.5128
2024-04-28 22:19:38 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #325: GFLOPs: 9517.0796. Time: 126.9547 us. Best GFLOPs: 9962.5128
2024-04-28 22:19:38 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #326: GFLOPs: 9370.7579. Time: 128.9371 us. Best GFLOPs: 9962.5128
2024-04-28 22:19:38 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #327: GFLOPs: 9787.2194. Time: 123.4506 us. Best GFLOPs: 9962.5128
2024-04-28 22:19:38 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #328: GFLOPs: 8583.9998. Time: 140.7547 us. Best GFLOPs: 9962.5128
2024-04-28 22:19:38 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #329: GFLOPs: 9468.2377. Time: 127.6096 us. Best GFLOPs: 9962.5128
2024-04-28 22:19:38 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #330: GFLOPs: 9030.8757. Time: 133.7897 us. Best GFLOPs: 9962.5128
2024-04-28 22:19:38 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #331: GFLOPs: 9525.2622. Time: 126.8456 us. Best GFLOPs: 9962.5128
2024-04-28 22:19:38 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #332: GFLOPs: 9371.9849. Time: 128.9202 us. Best GFLOPs: 9962.5128
2024-04-28 22:19:38 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #333: GFLOPs: 9610.6542. Time: 125.7186 us. Best GFLOPs: 9962.5128
2024-04-28 22:19:38 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #334: GFLOPs: 7934.1911. Time: 152.2825 us. Best GFLOPs: 9962.5128
2024-04-28 22:19:38 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #335: GFLOPs: 9560.8280. Time: 126.3738 us. Best GFLOPs: 9962.5128
2024-04-28 22:19:38 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #336: GFLOPs: 9563.3442. Time: 126.3405 us. Best GFLOPs: 9962.5128
2024-04-28 22:19:38 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #337: GFLOPs: 9002.5316. Time: 134.2109 us. Best GFLOPs: 9962.5128
2024-04-28 22:19:38 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #338: GFLOPs: 9077.8634. Time: 133.0972 us. Best GFLOPs: 9962.5128
2024-04-28 22:19:38 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #339: GFLOPs: 6191.1859. Time: 195.1545 us. Best GFLOPs: 9962.5128
2024-04-28 22:19:38 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #340: GFLOPs: 9335.2978. Time: 129.4268 us. Best GFLOPs: 9962.5128
2024-04-28 22:19:38 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #341: GFLOPs: 8589.6310. Time: 140.6624 us. Best GFLOPs: 9962.5128
2024-04-28 22:19:38 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #342: GFLOPs: 8253.3026. Time: 146.3945 us. Best GFLOPs: 9962.5128
2024-04-28 22:19:38 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #343: GFLOPs: 9374.9146. Time: 128.8799 us. Best GFLOPs: 9962.5128
2024-04-28 22:19:38 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #344: GFLOPs: 9530.0960. Time: 126.7813 us. Best GFLOPs: 9962.5128
2024-04-28 22:19:38 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #345: GFLOPs: 9552.7297. Time: 126.4809 us. Best GFLOPs: 9962.5128
2024-04-28 22:19:38 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #346: GFLOPs: 9576.7396. Time: 126.1638 us. Best GFLOPs: 9962.5128
2024-04-28 22:19:38 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #347: GFLOPs: 8982.2421. Time: 134.5141 us. Best GFLOPs: 9962.5128
2024-04-28 22:19:38 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #348: GFLOPs: 8947.1933. Time: 135.0410 us. Best GFLOPs: 9962.5128
2024-04-28 22:19:38 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #349: GFLOPs: 7357.3609. Time: 164.2217 us. Best GFLOPs: 9962.5128
2024-04-28 22:19:38 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #350: GFLOPs: 7995.6865. Time: 151.1112 us. Best GFLOPs: 9962.5128
2024-04-28 22:19:38 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #351: GFLOPs: 8591.9553. Time: 140.6243 us. Best GFLOPs: 9962.5128
2024-04-28 22:19:38 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #352: GFLOPs: 8661.7103. Time: 139.4919 us. Best GFLOPs: 9962.5128
2024-04-28 22:19:38 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #353: GFLOPs: 7567.2465. Time: 159.6668 us. Best GFLOPs: 9962.5128
2024-04-28 22:19:38 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #354: GFLOPs: 9669.6931. Time: 124.9510 us. Best GFLOPs: 9962.5128
2024-04-28 22:19:38 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #355: GFLOPs: 9241.3909. Time: 130.7420 us. Best GFLOPs: 9962.5128
2024-04-28 22:19:38 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #356: GFLOPs: 9532.1719. Time: 126.7537 us. Best GFLOPs: 9962.5128
2024-04-28 22:19:38 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #357: GFLOPs: 7933.2702. Time: 152.3001 us. Best GFLOPs: 9962.5128
2024-04-28 22:19:38 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #358: GFLOPs: 7683.6953. Time: 157.2470 us. Best GFLOPs: 9962.5128
2024-04-28 22:19:38 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #359: GFLOPs: 8995.2027. Time: 134.3203 us. Best GFLOPs: 9962.5128
2024-04-28 22:19:38 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #360: GFLOPs: 8581.9241. Time: 140.7887 us. Best GFLOPs: 9962.5128
2024-04-28 22:19:38 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #361: GFLOPs: 9135.6240. Time: 132.2557 us. Best GFLOPs: 9962.5128
2024-04-28 22:19:38 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #362: GFLOPs: 9972.9726. Time: 121.1512 us. Best GFLOPs: 9972.9726
2024-04-28 22:19:38 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #363: GFLOPs: 8324.8462. Time: 145.1364 us. Best GFLOPs: 9972.9726
2024-04-28 22:19:38 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #364: GFLOPs: 9110.4422. Time: 132.6212 us. Best GFLOPs: 9972.9726
2024-04-28 22:19:38 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #365: GFLOPs: 7783.5279. Time: 155.2301 us. Best GFLOPs: 9972.9726
2024-04-28 22:19:38 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #366: GFLOPs: 9003.0201. Time: 134.2036 us. Best GFLOPs: 9972.9726
2024-04-28 22:19:38 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #367: GFLOPs: 8893.5993. Time: 135.8548 us. Best GFLOPs: 9972.9726
2024-04-28 22:19:38 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #368: GFLOPs: 8905.9480. Time: 135.6664 us. Best GFLOPs: 9972.9726
2024-04-28 22:19:38 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #369: GFLOPs: 9389.5013. Time: 128.6797 us. Best GFLOPs: 9972.9726
2024-04-28 22:19:38 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #370: GFLOPs: 9297.2785. Time: 129.9561 us. Best GFLOPs: 9972.9726
2024-04-28 22:19:38 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #371: GFLOPs: 9224.5432. Time: 130.9808 us. Best GFLOPs: 9972.9726
2024-04-28 22:19:38 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #372: GFLOPs: 9517.4884. Time: 126.9493 us. Best GFLOPs: 9972.9726
2024-04-28 22:19:38 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #373: GFLOPs: 8975.6318. Time: 134.6132 us. Best GFLOPs: 9972.9726
2024-04-28 22:19:38 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #374: GFLOPs: 9006.5722. Time: 134.1507 us. Best GFLOPs: 9972.9726
2024-04-28 22:19:38 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #375: GFLOPs: 8959.0871. Time: 134.8617 us. Best GFLOPs: 9972.9726
2024-04-28 22:19:38 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #376: GFLOPs: 8870.6970. Time: 136.2055 us. Best GFLOPs: 9972.9726
2024-04-28 22:19:38 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #377: GFLOPs: 8939.6840. Time: 135.1545 us. Best GFLOPs: 9972.9726
2024-04-28 22:19:38 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #378: GFLOPs: 8684.2220. Time: 139.1303 us. Best GFLOPs: 9972.9726
2024-04-28 22:19:38 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #379: GFLOPs: 9008.2996. Time: 134.1250 us. Best GFLOPs: 9972.9726
2024-04-28 22:19:38 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #380: GFLOPs: 8998.4705. Time: 134.2715 us. Best GFLOPs: 9972.9726
2024-04-28 22:19:38 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #381: GFLOPs: 692.4811. Time: 1744.7957 us. Best GFLOPs: 9972.9726
2024-04-28 22:19:38 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #382: GFLOPs: 961.0328. Time: 1257.2288 us. Best GFLOPs: 9972.9726
2024-04-28 22:19:38 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #383: GFLOPs: 2832.6662. Time: 426.5374 us. Best GFLOPs: 9972.9726
2024-04-28 22:37:47 [INFO] [evolutionary_search.cc:713] Generating candidates......
2024-04-28 22:37:50 [INFO] [evolutionary_search.cc:715] Picked top 102 candidate(s) from database
2024-04-28 22:37:57 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x43d23b8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x3ad3338)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x72c6e28)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x4cb1ce8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x5905ad8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x7272d28)]: 406 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x3ab3638)]: 0 failure(s)
2024-04-28 22:38:03 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x43d23b8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x3ad3338)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x72c6e28)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x4cb1ce8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x5905ad8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x7272d28)]: 811 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x3ab3638)]: 0 failure(s)
2024-04-28 22:38:10 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x43d23b8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x3ad3338)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x72c6e28)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x4cb1ce8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x5905ad8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x7272d28)]: 1213 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x3ab3638)]: 0 failure(s)
2024-04-28 22:38:17 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x43d23b8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x3ad3338)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x72c6e28)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x4cb1ce8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x5905ad8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x7272d28)]: 1617 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x3ab3638)]: 0 failure(s)
2024-04-28 22:38:23 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x43d23b8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x3ad3338)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x72c6e28)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x4cb1ce8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x5905ad8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x7272d28)]: 2018 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x3ab3638)]: 0 failure(s)
2024-04-28 22:38:30 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x43d23b8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x3ad3338)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x72c6e28)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x4cb1ce8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x5905ad8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x7272d28)]: 2419 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x3ab3638)]: 0 failure(s)
2024-04-28 22:38:37 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x43d23b8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x3ad3338)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x72c6e28)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x4cb1ce8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x5905ad8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x7272d28)]: 2817 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x3ab3638)]: 0 failure(s)
2024-04-28 22:38:37 [INFO] [evolutionary_search.cc:723] Sampled 53 candidate(s)
2024-04-28 22:38:57 [INFO] [evolutionary_search.cc:621] Evolve iter #0 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x43d23b8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x3ad3338)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x72c6e28)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x4cb1ce8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x5905ad8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x7272d28)]: 92 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x3ab3638)]: 0 failure(s)
2024-04-28 22:39:19 [INFO] [evolutionary_search.cc:621] Evolve iter #1 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x43d23b8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x3ad3338)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x72c6e28)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x4cb1ce8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x5905ad8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x7272d28)]: 84 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x3ab3638)]: 0 failure(s)
2024-04-28 22:39:41 [INFO] [evolutionary_search.cc:621] Evolve iter #2 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x43d23b8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x3ad3338)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x72c6e28)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x4cb1ce8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x5905ad8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x7272d28)]: 83 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x3ab3638)]: 0 failure(s)
2024-04-28 22:40:03 [INFO] [evolutionary_search.cc:621] Evolve iter #3 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x43d23b8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x3ad3338)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x72c6e28)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x4cb1ce8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x5905ad8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x7272d28)]: 81 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x3ab3638)]: 0 failure(s)
2024-04-28 22:40:08 [INFO] [evolutionary_search.cc:649] Scores of the best 64 candidates:
[1 : 16]:	0.9910  0.9845  0.9816  0.9798  0.9760  0.9756  0.9751  0.9744  0.9708  0.9692  0.9659  0.9655  0.9632  0.9630  0.9624  0.9622
[17 : 32]:	0.9616  0.9609  0.9599  0.9578  0.9544  0.9540  0.9534  0.9528  0.9526  0.9503  0.9503  0.9484  0.9472  0.9469  0.9465  0.9454
[33 : 48]:	0.9438  0.9425  0.9410  0.9409  0.9409  0.9397  0.9396  0.9391  0.9388  0.9387  0.9372  0.9370  0.9364  0.9360  0.9356  0.9356
[49 : 64]:	0.9351  0.9346  0.9342  0.9341  0.9327  0.9316  0.9311  0.9310  0.9310  0.9308  0.9306  0.9305  0.9304  0.9303  0.9297  0.9289
2024-04-28 22:40:08 [INFO] [evolutionary_search.cc:727] Got 64 candidate(s) with evolutionary search
2024-04-28 22:40:08 [INFO] [evolutionary_search.cc:730] Sending 64 candidates(s) for measurement
2024-04-28 22:41:16 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #384: GFLOPs: 9925.0488. Time: 121.7362 us. Best GFLOPs: 9972.9726
2024-04-28 22:41:16 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #385: GFLOPs: 9946.8719. Time: 121.4692 us. Best GFLOPs: 9972.9726
2024-04-28 22:41:16 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #386: GFLOPs: 10181.0589. Time: 118.6751 us. Best GFLOPs: 10181.0589
2024-04-28 22:41:16 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #387: GFLOPs: 9946.2102. Time: 121.4772 us. Best GFLOPs: 10181.0589
2024-04-28 22:41:16 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #388: GFLOPs: 9696.1075. Time: 124.6106 us. Best GFLOPs: 10181.0589
2024-04-28 22:41:16 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #389: GFLOPs: 9888.0910. Time: 122.1912 us. Best GFLOPs: 10181.0589
2024-04-28 22:41:16 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #390: GFLOPs: 9935.0521. Time: 121.6137 us. Best GFLOPs: 10181.0589
2024-04-28 22:41:16 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #391: GFLOPs: 9964.1537. Time: 121.2585 us. Best GFLOPs: 10181.0589
2024-04-28 22:41:16 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #392: GFLOPs: 9815.9748. Time: 123.0890 us. Best GFLOPs: 10181.0589
2024-04-28 22:41:16 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #393: GFLOPs: 9722.2929. Time: 124.2750 us. Best GFLOPs: 10181.0589
2024-04-28 22:41:16 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #394: GFLOPs: 9540.3084. Time: 126.6456 us. Best GFLOPs: 10181.0589
2024-04-28 22:41:16 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #395: GFLOPs: 9798.9706. Time: 123.3026 us. Best GFLOPs: 10181.0589
2024-04-28 22:41:16 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #396: GFLOPs: 9940.8865. Time: 121.5423 us. Best GFLOPs: 10181.0589
2024-04-28 22:41:16 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #397: GFLOPs: 10161.4542. Time: 118.9041 us. Best GFLOPs: 10181.0589
2024-04-28 22:41:16 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #398: GFLOPs: 9891.8818. Time: 122.1444 us. Best GFLOPs: 10181.0589
2024-04-28 22:41:16 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #399: GFLOPs: 9862.6413. Time: 122.5065 us. Best GFLOPs: 10181.0589
2024-04-28 22:41:16 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #400: GFLOPs: 9656.4079. Time: 125.1229 us. Best GFLOPs: 10181.0589
2024-04-28 22:41:16 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #401: GFLOPs: 9908.2022. Time: 121.9432 us. Best GFLOPs: 10181.0589
2024-04-28 22:41:16 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #402: GFLOPs: 10042.7645. Time: 120.3093 us. Best GFLOPs: 10181.0589
2024-04-28 22:41:16 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #403: GFLOPs: 9842.0135. Time: 122.7633 us. Best GFLOPs: 10181.0589
2024-04-28 22:41:16 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #404: GFLOPs: 9663.6965. Time: 125.0286 us. Best GFLOPs: 10181.0589
2024-04-28 22:41:16 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #405: GFLOPs: 9762.2795. Time: 123.7660 us. Best GFLOPs: 10181.0589
2024-04-28 22:41:16 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #406: GFLOPs: 9813.1638. Time: 123.1242 us. Best GFLOPs: 10181.0589
2024-04-28 22:41:16 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #407: GFLOPs: 9893.1707. Time: 122.1285 us. Best GFLOPs: 10181.0589
2024-04-28 22:41:16 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #408: GFLOPs: 9948.3571. Time: 121.4510 us. Best GFLOPs: 10181.0589
2024-04-28 22:41:16 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #409: GFLOPs: 9891.5871. Time: 122.1481 us. Best GFLOPs: 10181.0589
2024-04-28 22:41:16 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #410: GFLOPs: 9895.4434. Time: 122.1004 us. Best GFLOPs: 10181.0589
2024-04-28 22:41:16 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #411: GFLOPs: 9588.1100. Time: 126.0142 us. Best GFLOPs: 10181.0589
2024-04-28 22:41:16 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #412: GFLOPs: 9833.1702. Time: 122.8737 us. Best GFLOPs: 10181.0589
2024-04-28 22:41:16 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #413: GFLOPs: 7110.9860. Time: 169.9115 us. Best GFLOPs: 10181.0589
2024-04-28 22:41:16 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #414: GFLOPs: 9923.3390. Time: 121.7572 us. Best GFLOPs: 10181.0589
2024-04-28 22:41:16 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #415: GFLOPs: 9875.3988. Time: 122.3483 us. Best GFLOPs: 10181.0589
2024-04-28 22:41:16 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #416: GFLOPs: 9897.8095. Time: 122.0713 us. Best GFLOPs: 10181.0589
2024-04-28 22:41:16 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #417: GFLOPs: 9772.2598. Time: 123.6396 us. Best GFLOPs: 10181.0589
2024-04-28 22:41:16 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #418: GFLOPs: 9464.0921. Time: 127.6655 us. Best GFLOPs: 10181.0589
2024-04-28 22:41:16 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #419: GFLOPs: 9743.3230. Time: 124.0068 us. Best GFLOPs: 10181.0589
2024-04-28 22:41:16 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #420: GFLOPs: 9711.2279. Time: 124.4166 us. Best GFLOPs: 10181.0589
2024-04-28 22:41:16 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #421: GFLOPs: 9501.3541. Time: 127.1648 us. Best GFLOPs: 10181.0589
2024-04-28 22:41:16 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #422: GFLOPs: 9705.3642. Time: 124.4918 us. Best GFLOPs: 10181.0589
2024-04-28 22:41:16 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #423: GFLOPs: 9713.0109. Time: 124.3938 us. Best GFLOPs: 10181.0589
2024-04-28 22:41:16 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #424: GFLOPs: 9390.5386. Time: 128.6655 us. Best GFLOPs: 10181.0589
2024-04-28 22:41:16 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #425: GFLOPs: 9419.9467. Time: 128.2638 us. Best GFLOPs: 10181.0589
2024-04-28 22:41:16 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #426: GFLOPs: 9481.0648. Time: 127.4370 us. Best GFLOPs: 10181.0589
2024-04-28 22:41:16 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #427: GFLOPs: 9481.2996. Time: 127.4338 us. Best GFLOPs: 10181.0589
2024-04-28 22:41:16 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #428: GFLOPs: 9311.0952. Time: 129.7633 us. Best GFLOPs: 10181.0589
2024-04-28 22:41:16 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #429: GFLOPs: 9188.5862. Time: 131.4934 us. Best GFLOPs: 10181.0589
2024-04-28 22:41:16 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #430: GFLOPs: 9334.9038. Time: 129.4323 us. Best GFLOPs: 10181.0589
2024-04-28 22:41:16 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #431: GFLOPs: 9500.0667. Time: 127.1821 us. Best GFLOPs: 10181.0589
2024-04-28 22:41:16 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #432: GFLOPs: 9724.4842. Time: 124.2470 us. Best GFLOPs: 10181.0589
2024-04-28 22:41:16 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #433: GFLOPs: 9295.0727. Time: 129.9869 us. Best GFLOPs: 10181.0589
2024-04-28 22:41:16 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #434: GFLOPs: 9448.1357. Time: 127.8811 us. Best GFLOPs: 10181.0589
2024-04-28 22:41:16 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #435: GFLOPs: 9818.8318. Time: 123.0531 us. Best GFLOPs: 10181.0589
2024-04-28 22:41:16 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #436: GFLOPs: 9471.9289. Time: 127.5599 us. Best GFLOPs: 10181.0589
2024-04-28 22:41:16 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #437: GFLOPs: 9818.7186. Time: 123.0546 us. Best GFLOPs: 10181.0589
2024-04-28 22:41:16 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #438: GFLOPs: 9569.8495. Time: 126.2547 us. Best GFLOPs: 10181.0589
2024-04-28 22:41:16 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #439: GFLOPs: 9473.9889. Time: 127.5321 us. Best GFLOPs: 10181.0589
2024-04-28 22:41:16 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #440: GFLOPs: 9289.7180. Time: 130.0619 us. Best GFLOPs: 10181.0589
2024-04-28 22:41:16 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #441: GFLOPs: 9478.8708. Time: 127.4665 us. Best GFLOPs: 10181.0589
2024-04-28 22:41:16 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #442: GFLOPs: 9501.4236. Time: 127.1639 us. Best GFLOPs: 10181.0589
2024-04-28 22:41:16 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #443: GFLOPs: 9582.8719. Time: 126.0831 us. Best GFLOPs: 10181.0589
2024-04-28 22:41:16 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #444: GFLOPs: 9221.8639. Time: 131.0189 us. Best GFLOPs: 10181.0589
2024-04-28 22:41:16 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #445: GFLOPs: 5070.1412. Time: 238.3046 us. Best GFLOPs: 10181.0589
2024-04-28 22:41:16 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #446: GFLOPs: 561.0254. Time: 2153.6245 us. Best GFLOPs: 10181.0589
2024-04-28 22:41:16 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #447: GFLOPs: 3810.5469. Time: 317.0773 us. Best GFLOPs: 10181.0589
2024-04-28 22:55:56 [INFO] [evolutionary_search.cc:713] Generating candidates......
2024-04-28 22:56:00 [INFO] [evolutionary_search.cc:715] Picked top 102 candidate(s) from database
2024-04-28 22:56:07 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x43d23b8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x3ad3338)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x72c6e28)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x4cb1ce8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x5905ad8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x7272d28)]: 406 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x3ab3638)]: 0 failure(s)
2024-04-28 22:56:14 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x43d23b8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x3ad3338)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x72c6e28)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x4cb1ce8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x5905ad8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x7272d28)]: 811 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x3ab3638)]: 0 failure(s)
2024-04-28 22:56:22 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x43d23b8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x3ad3338)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x72c6e28)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x4cb1ce8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x5905ad8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x7272d28)]: 1213 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x3ab3638)]: 0 failure(s)
2024-04-28 22:56:29 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x43d23b8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x3ad3338)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x72c6e28)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x4cb1ce8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x5905ad8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x7272d28)]: 1618 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x3ab3638)]: 0 failure(s)
2024-04-28 22:56:36 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x43d23b8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x3ad3338)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x72c6e28)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x4cb1ce8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x5905ad8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x7272d28)]: 2024 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x3ab3638)]: 0 failure(s)
2024-04-28 22:56:43 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x43d23b8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x3ad3338)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x72c6e28)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x4cb1ce8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x5905ad8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x7272d28)]: 2428 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x3ab3638)]: 0 failure(s)
2024-04-28 22:56:50 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x43d23b8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x3ad3338)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x72c6e28)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x4cb1ce8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x5905ad8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x7272d28)]: 2831 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x3ab3638)]: 0 failure(s)
2024-04-28 22:56:57 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x43d23b8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x3ad3338)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x72c6e28)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x4cb1ce8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x5905ad8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x7272d28)]: 3230 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x3ab3638)]: 0 failure(s)
2024-04-28 22:56:57 [INFO] [evolutionary_search.cc:723] Sampled 50 candidate(s)
2024-04-28 22:57:16 [INFO] [evolutionary_search.cc:621] Evolve iter #0 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x43d23b8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x3ad3338)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x72c6e28)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x4cb1ce8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x5905ad8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x7272d28)]: 77 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x3ab3638)]: 0 failure(s)
2024-04-28 22:57:39 [INFO] [evolutionary_search.cc:621] Evolve iter #1 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x43d23b8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x3ad3338)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x72c6e28)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x4cb1ce8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x5905ad8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x7272d28)]: 98 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x3ab3638)]: 0 failure(s)
2024-04-28 22:58:02 [INFO] [evolutionary_search.cc:621] Evolve iter #2 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x43d23b8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x3ad3338)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x72c6e28)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x4cb1ce8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x5905ad8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x7272d28)]: 83 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x3ab3638)]: 0 failure(s)
2024-04-28 22:58:24 [INFO] [evolutionary_search.cc:621] Evolve iter #3 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x43d23b8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x3ad3338)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x72c6e28)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x4cb1ce8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x5905ad8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x7272d28)]: 93 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x3ab3638)]: 0 failure(s)
2024-04-28 22:58:29 [INFO] [evolutionary_search.cc:649] Scores of the best 64 candidates:
[1 : 16]:	0.9924  0.9868  0.9852  0.9835  0.9835  0.9829  0.9828  0.9822  0.9819  0.9815  0.9815  0.9810  0.9793  0.9790  0.9787  0.9787
[17 : 32]:	0.9782  0.9781  0.9751  0.9746  0.9745  0.9743  0.9730  0.9721  0.9714  0.9714  0.9712  0.9711  0.9708  0.9705  0.9702  0.9699
[33 : 48]:	0.9694  0.9692  0.9687  0.9673  0.9670  0.9663  0.9663  0.9662  0.9656  0.9649  0.9647  0.9645  0.9641  0.9639  0.9635  0.9631
[49 : 64]:	0.9623  0.9614  0.9614  0.9608  0.9581  0.9581  0.9580  0.9578  0.9577  0.9577  0.9576  0.9576  0.9562  0.9562  0.9559  0.9559
2024-04-28 22:58:29 [INFO] [evolutionary_search.cc:727] Got 64 candidate(s) with evolutionary search
2024-04-28 22:58:29 [INFO] [evolutionary_search.cc:730] Sending 64 candidates(s) for measurement
2024-04-28 22:59:35 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #448: GFLOPs: 10170.1636. Time: 118.8022 us. Best GFLOPs: 10181.0589
2024-04-28 22:59:35 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #449: GFLOPs: 10212.3029. Time: 118.3120 us. Best GFLOPs: 10212.3029
2024-04-28 22:59:35 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #450: GFLOPs: 10172.0285. Time: 118.7804 us. Best GFLOPs: 10212.3029
2024-04-28 22:59:35 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #451: GFLOPs: 10040.3853. Time: 120.3378 us. Best GFLOPs: 10212.3029
2024-04-28 22:59:35 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #452: GFLOPs: 9990.5298. Time: 120.9383 us. Best GFLOPs: 10212.3029
2024-04-28 22:59:35 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #453: GFLOPs: 10011.6266. Time: 120.6835 us. Best GFLOPs: 10212.3029
2024-04-28 22:59:35 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #454: GFLOPs: 9948.0565. Time: 121.4547 us. Best GFLOPs: 10212.3029
2024-04-28 22:59:35 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #455: GFLOPs: 9980.0327. Time: 121.0655 us. Best GFLOPs: 10212.3029
2024-04-28 22:59:35 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #456: GFLOPs: 9895.5326. Time: 122.0993 us. Best GFLOPs: 10212.3029
2024-04-28 22:59:35 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #457: GFLOPs: 9952.7597. Time: 121.3973 us. Best GFLOPs: 10212.3029
2024-04-28 22:59:35 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #458: GFLOPs: 10070.7699. Time: 119.9747 us. Best GFLOPs: 10212.3029
2024-04-28 22:59:35 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #459: GFLOPs: 9961.6923. Time: 121.2884 us. Best GFLOPs: 10212.3029
2024-04-28 22:59:35 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #460: GFLOPs: 9900.9054. Time: 122.0331 us. Best GFLOPs: 10212.3029
2024-04-28 22:59:35 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #461: GFLOPs: 9974.0250. Time: 121.1385 us. Best GFLOPs: 10212.3029
2024-04-28 22:59:35 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #462: GFLOPs: 10087.3392. Time: 119.7777 us. Best GFLOPs: 10212.3029
2024-04-28 22:59:35 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #463: GFLOPs: 10045.0458. Time: 120.2820 us. Best GFLOPs: 10212.3029
2024-04-28 22:59:35 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #464: GFLOPs: 9987.4138. Time: 120.9761 us. Best GFLOPs: 10212.3029
2024-04-28 22:59:35 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #465: GFLOPs: 9893.4155. Time: 122.1255 us. Best GFLOPs: 10212.3029
2024-04-28 22:59:35 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #466: GFLOPs: 9915.3901. Time: 121.8548 us. Best GFLOPs: 10212.3029
2024-04-28 22:59:35 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #467: GFLOPs: 9860.6841. Time: 122.5309 us. Best GFLOPs: 10212.3029
2024-04-28 22:59:35 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #468: GFLOPs: 9913.7389. Time: 121.8751 us. Best GFLOPs: 10212.3029
2024-04-28 22:59:35 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #469: GFLOPs: 9675.4119. Time: 124.8772 us. Best GFLOPs: 10212.3029
2024-04-28 22:59:35 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #470: GFLOPs: 9690.3231. Time: 124.6850 us. Best GFLOPs: 10212.3029
2024-04-28 22:59:35 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #471: GFLOPs: 10032.1288. Time: 120.4369 us. Best GFLOPs: 10212.3029
2024-04-28 22:59:35 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #472: GFLOPs: 9755.2763. Time: 123.8548 us. Best GFLOPs: 10212.3029
2024-04-28 22:59:35 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #473: GFLOPs: 9897.2433. Time: 122.0782 us. Best GFLOPs: 10212.3029
2024-04-28 22:59:35 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #474: GFLOPs: 9624.4075. Time: 125.5390 us. Best GFLOPs: 10212.3029
2024-04-28 22:59:35 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #475: GFLOPs: 9935.5077. Time: 121.6081 us. Best GFLOPs: 10212.3029
2024-04-28 22:59:35 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #476: GFLOPs: 9662.0853. Time: 125.0494 us. Best GFLOPs: 10212.3029
2024-04-28 22:59:35 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #477: GFLOPs: 9980.6249. Time: 121.0584 us. Best GFLOPs: 10212.3029
2024-04-28 22:59:35 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #478: GFLOPs: 9082.6543. Time: 133.0270 us. Best GFLOPs: 10212.3029
2024-04-28 22:59:35 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #479: GFLOPs: 9717.3842. Time: 124.3378 us. Best GFLOPs: 10212.3029
2024-04-28 22:59:35 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #480: GFLOPs: 9710.6004. Time: 124.4247 us. Best GFLOPs: 10212.3029
2024-04-28 22:59:35 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #481: GFLOPs: 9962.3228. Time: 121.2808 us. Best GFLOPs: 10212.3029
2024-04-28 22:59:35 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #482: GFLOPs: 9701.1634. Time: 124.5457 us. Best GFLOPs: 10212.3029
2024-04-28 22:59:35 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #483: GFLOPs: 10008.9360. Time: 120.7159 us. Best GFLOPs: 10212.3029
2024-04-28 22:59:35 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #484: GFLOPs: 9457.2570. Time: 127.7578 us. Best GFLOPs: 10212.3029
2024-04-28 22:59:35 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #485: GFLOPs: 10074.1368. Time: 119.9347 us. Best GFLOPs: 10212.3029
2024-04-28 22:59:35 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #486: GFLOPs: 9844.2851. Time: 122.7350 us. Best GFLOPs: 10212.3029
2024-04-28 22:59:35 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #487: GFLOPs: 9922.7939. Time: 121.7639 us. Best GFLOPs: 10212.3029
2024-04-28 22:59:35 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #488: GFLOPs: 9974.4724. Time: 121.1330 us. Best GFLOPs: 10212.3029
2024-04-28 22:59:35 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #489: GFLOPs: 9993.7552. Time: 120.8993 us. Best GFLOPs: 10212.3029
2024-04-28 22:59:35 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #490: GFLOPs: 10066.1735. Time: 120.0295 us. Best GFLOPs: 10212.3029
2024-04-28 22:59:35 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #491: GFLOPs: 9818.0805. Time: 123.0626 us. Best GFLOPs: 10212.3029
2024-04-28 22:59:35 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #492: GFLOPs: 9832.4737. Time: 122.8824 us. Best GFLOPs: 10212.3029
2024-04-28 22:59:35 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #493: GFLOPs: 10008.0825. Time: 120.7262 us. Best GFLOPs: 10212.3029
2024-04-28 22:59:35 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #494: GFLOPs: 9949.3343. Time: 121.4391 us. Best GFLOPs: 10212.3029
2024-04-28 22:59:35 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #495: GFLOPs: 10026.6875. Time: 120.5022 us. Best GFLOPs: 10212.3029
2024-04-28 22:59:35 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #496: GFLOPs: 9774.8276. Time: 123.6071 us. Best GFLOPs: 10212.3029
2024-04-28 22:59:35 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #497: GFLOPs: 9542.4953. Time: 126.6166 us. Best GFLOPs: 10212.3029
2024-04-28 22:59:35 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #498: GFLOPs: 9878.1230. Time: 122.3145 us. Best GFLOPs: 10212.3029
2024-04-28 22:59:35 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #499: GFLOPs: 9522.3694. Time: 126.8842 us. Best GFLOPs: 10212.3029
2024-04-28 22:59:35 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #500: GFLOPs: 9767.2972. Time: 123.7024 us. Best GFLOPs: 10212.3029
2024-04-28 22:59:35 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #501: GFLOPs: 9446.7839. Time: 127.8994 us. Best GFLOPs: 10212.3029
2024-04-28 22:59:35 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #502: GFLOPs: 9758.2622. Time: 123.8169 us. Best GFLOPs: 10212.3029
2024-04-28 22:59:35 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #503: GFLOPs: 9965.7187. Time: 121.2394 us. Best GFLOPs: 10212.3029
2024-04-28 22:59:35 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #504: GFLOPs: 9548.3772. Time: 126.5386 us. Best GFLOPs: 10212.3029
2024-04-28 22:59:35 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #505: GFLOPs: 10007.1655. Time: 120.7373 us. Best GFLOPs: 10212.3029
2024-04-28 22:59:35 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #506: GFLOPs: 10121.6376. Time: 119.3718 us. Best GFLOPs: 10212.3029
2024-04-28 22:59:35 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #507: GFLOPs: 9963.6551. Time: 121.2645 us. Best GFLOPs: 10212.3029
2024-04-28 22:59:35 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #508: GFLOPs: 9966.3113. Time: 121.2322 us. Best GFLOPs: 10212.3029
2024-04-28 22:59:35 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #509: GFLOPs: 694.4439. Time: 1739.8642 us. Best GFLOPs: 10212.3029
2024-04-28 22:59:35 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #510: GFLOPs: 3422.7993. Time: 352.9971 us. Best GFLOPs: 10212.3029
2024-04-28 22:59:35 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #511: GFLOPs: 3626.1061. Time: 333.2054 us. Best GFLOPs: 10212.3029
2024-04-28 23:27:07 [INFO] [evolutionary_search.cc:713] Generating candidates......
2024-04-28 23:27:10 [INFO] [evolutionary_search.cc:715] Picked top 102 candidate(s) from database
2024-04-28 23:27:17 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x43d23b8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x3ad3338)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x72c6e28)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x4cb1ce8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x5905ad8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x7272d28)]: 403 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x3ab3638)]: 0 failure(s)
2024-04-28 23:27:24 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x43d23b8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x3ad3338)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x72c6e28)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x4cb1ce8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x5905ad8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x7272d28)]: 810 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x3ab3638)]: 0 failure(s)
2024-04-28 23:27:30 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x43d23b8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x3ad3338)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x72c6e28)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x4cb1ce8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x5905ad8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x7272d28)]: 1215 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x3ab3638)]: 0 failure(s)
2024-04-28 23:27:37 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x43d23b8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x3ad3338)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x72c6e28)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x4cb1ce8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x5905ad8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x7272d28)]: 1616 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x3ab3638)]: 0 failure(s)
2024-04-28 23:27:44 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x43d23b8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x3ad3338)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x72c6e28)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x4cb1ce8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x5905ad8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x7272d28)]: 2015 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x3ab3638)]: 0 failure(s)
2024-04-28 23:27:51 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x43d23b8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x3ad3338)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x72c6e28)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x4cb1ce8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x5905ad8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x7272d28)]: 2416 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x3ab3638)]: 0 failure(s)
2024-04-28 23:27:57 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x43d23b8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x3ad3338)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x72c6e28)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x4cb1ce8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x5905ad8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x7272d28)]: 2815 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x3ab3638)]: 0 failure(s)
2024-04-28 23:27:57 [INFO] [evolutionary_search.cc:723] Sampled 55 candidate(s)
2024-04-28 23:28:15 [INFO] [evolutionary_search.cc:621] Evolve iter #0 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x43d23b8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x3ad3338)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x72c6e28)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x4cb1ce8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x5905ad8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x7272d28)]: 110 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x3ab3638)]: 0 failure(s)
2024-04-28 23:28:36 [INFO] [evolutionary_search.cc:621] Evolve iter #1 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x43d23b8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x3ad3338)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x72c6e28)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x4cb1ce8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x5905ad8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x7272d28)]: 90 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x3ab3638)]: 0 failure(s)
2024-04-28 23:28:56 [INFO] [evolutionary_search.cc:621] Evolve iter #2 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x43d23b8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x3ad3338)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x72c6e28)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x4cb1ce8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x5905ad8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x7272d28)]: 87 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x3ab3638)]: 0 failure(s)
2024-04-28 23:29:17 [INFO] [evolutionary_search.cc:621] Evolve iter #3 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x43d23b8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x3ad3338)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x72c6e28)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x4cb1ce8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x5905ad8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x7272d28)]: 84 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x3ab3638)]: 0 failure(s)
2024-04-28 23:29:22 [INFO] [evolutionary_search.cc:649] Scores of the best 64 candidates:
[1 : 16]:	1.0036  1.0030  1.0030  0.9957  0.9948  0.9944  0.9928  0.9894  0.9879  0.9874  0.9874  0.9869  0.9867  0.9867  0.9856  0.9852
[17 : 32]:	0.9847  0.9836  0.9835  0.9823  0.9821  0.9821  0.9801  0.9793  0.9781  0.9781  0.9779  0.9777  0.9774  0.9763  0.9760  0.9760
[33 : 48]:	0.9759  0.9752  0.9748  0.9746  0.9746  0.9745  0.9740  0.9737  0.9736  0.9730  0.9729  0.9726  0.9723  0.9723  0.9721  0.9720
[49 : 64]:	0.9717  0.9717  0.9714  0.9709  0.9708  0.9707  0.9707  0.9706  0.9703  0.9702  0.9699  0.9698  0.9696  0.9695  0.9694  0.9690
2024-04-28 23:29:22 [INFO] [evolutionary_search.cc:727] Got 64 candidate(s) with evolutionary search
2024-04-28 23:29:22 [INFO] [evolutionary_search.cc:730] Sending 64 candidates(s) for measurement
2024-04-28 23:30:29 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #512: GFLOPs: 10168.8070. Time: 118.8181 us. Best GFLOPs: 10212.3029
2024-04-28 23:30:29 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #513: GFLOPs: 10191.6735. Time: 118.5515 us. Best GFLOPs: 10212.3029
2024-04-28 23:30:29 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #514: GFLOPs: 10192.8854. Time: 118.5374 us. Best GFLOPs: 10212.3029
2024-04-28 23:30:29 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #515: GFLOPs: 10192.8327. Time: 118.5380 us. Best GFLOPs: 10212.3029
2024-04-28 23:30:29 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #516: GFLOPs: 10029.3727. Time: 120.4700 us. Best GFLOPs: 10212.3029
2024-04-28 23:30:29 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #517: GFLOPs: 10200.2239. Time: 118.4521 us. Best GFLOPs: 10212.3029
2024-04-28 23:30:29 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #518: GFLOPs: 10172.2302. Time: 118.7781 us. Best GFLOPs: 10212.3029
2024-04-28 23:30:29 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #519: GFLOPs: 10016.2594. Time: 120.6277 us. Best GFLOPs: 10212.3029
2024-04-28 23:30:29 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #520: GFLOPs: 10189.1911. Time: 118.5804 us. Best GFLOPs: 10212.3029
2024-04-28 23:30:29 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #521: GFLOPs: 9977.8393. Time: 121.0922 us. Best GFLOPs: 10212.3029
2024-04-28 23:30:29 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #522: GFLOPs: 9976.5330. Time: 121.1080 us. Best GFLOPs: 10212.3029
2024-04-28 23:30:29 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #523: GFLOPs: 9988.2600. Time: 120.9658 us. Best GFLOPs: 10212.3029
2024-04-28 23:30:29 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #524: GFLOPs: 9899.8734. Time: 122.0458 us. Best GFLOPs: 10212.3029
2024-04-28 23:30:29 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #525: GFLOPs: 9921.4740. Time: 121.7801 us. Best GFLOPs: 10212.3029
2024-04-28 23:30:29 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #526: GFLOPs: 10024.4606. Time: 120.5290 us. Best GFLOPs: 10212.3029
2024-04-28 23:30:29 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #527: GFLOPs: 9888.3499. Time: 122.1880 us. Best GFLOPs: 10212.3029
2024-04-28 23:30:29 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #528: GFLOPs: 9923.0833. Time: 121.7603 us. Best GFLOPs: 10212.3029
2024-04-28 23:30:29 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #529: GFLOPs: 9997.9531. Time: 120.8485 us. Best GFLOPs: 10212.3029
2024-04-28 23:30:29 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #530: GFLOPs: 10012.7987. Time: 120.6694 us. Best GFLOPs: 10212.3029
2024-04-28 23:30:29 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #531: GFLOPs: 10010.5545. Time: 120.6964 us. Best GFLOPs: 10212.3029
2024-04-28 23:30:29 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #532: GFLOPs: 10334.7599. Time: 116.9101 us. Best GFLOPs: 10334.7599
2024-04-28 23:30:29 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #533: GFLOPs: 10250.4371. Time: 117.8719 us. Best GFLOPs: 10334.7599
2024-04-28 23:30:29 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #534: GFLOPs: 10023.7367. Time: 120.5377 us. Best GFLOPs: 10334.7599
2024-04-28 23:30:29 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #535: GFLOPs: 9930.8985. Time: 121.6645 us. Best GFLOPs: 10334.7599
2024-04-28 23:30:29 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #536: GFLOPs: 9972.4184. Time: 121.1580 us. Best GFLOPs: 10334.7599
2024-04-28 23:30:29 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #537: GFLOPs: 9957.5215. Time: 121.3392 us. Best GFLOPs: 10334.7599
2024-04-28 23:30:29 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #538: GFLOPs: 9958.8316. Time: 121.3233 us. Best GFLOPs: 10334.7599
2024-04-28 23:30:29 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #539: GFLOPs: 10001.4729. Time: 120.8060 us. Best GFLOPs: 10334.7599
2024-04-28 23:30:29 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #540: GFLOPs: 9999.5228. Time: 120.8296 us. Best GFLOPs: 10334.7599
2024-04-28 23:30:29 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #541: GFLOPs: 9893.7966. Time: 122.1208 us. Best GFLOPs: 10334.7599
2024-04-28 23:30:29 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #542: GFLOPs: 9720.0895. Time: 124.3032 us. Best GFLOPs: 10334.7599
2024-04-28 23:30:29 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #543: GFLOPs: 9726.4547. Time: 124.2218 us. Best GFLOPs: 10334.7599
2024-04-28 23:30:29 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #544: GFLOPs: 10059.8499. Time: 120.1050 us. Best GFLOPs: 10334.7599
2024-04-28 23:30:29 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #545: GFLOPs: 9909.8080. Time: 121.9235 us. Best GFLOPs: 10334.7599
2024-04-28 23:30:29 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #546: GFLOPs: 9940.1118. Time: 121.5518 us. Best GFLOPs: 10334.7599
2024-04-28 23:30:29 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #547: GFLOPs: 9979.1914. Time: 121.0757 us. Best GFLOPs: 10334.7599
2024-04-28 23:30:29 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #548: GFLOPs: 9976.8608. Time: 121.1040 us. Best GFLOPs: 10334.7599
2024-04-28 23:30:29 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #549: GFLOPs: 9970.4526. Time: 121.1819 us. Best GFLOPs: 10334.7599
2024-04-28 23:30:29 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #550: GFLOPs: 9995.3669. Time: 120.8798 us. Best GFLOPs: 10334.7599
2024-04-28 23:30:29 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #551: GFLOPs: 10000.8053. Time: 120.8141 us. Best GFLOPs: 10334.7599
2024-04-28 23:30:29 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #552: GFLOPs: 9954.0358. Time: 121.3817 us. Best GFLOPs: 10334.7599
2024-04-28 23:30:29 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #553: GFLOPs: 9799.2341. Time: 123.2992 us. Best GFLOPs: 10334.7599
2024-04-28 23:30:29 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #554: GFLOPs: 9784.5303. Time: 123.4845 us. Best GFLOPs: 10334.7599
2024-04-28 23:30:29 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #555: GFLOPs: 9949.4527. Time: 121.4376 us. Best GFLOPs: 10334.7599
2024-04-28 23:30:29 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #556: GFLOPs: 9975.5885. Time: 121.1195 us. Best GFLOPs: 10334.7599
2024-04-28 23:30:29 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #557: GFLOPs: 9992.6651. Time: 120.9125 us. Best GFLOPs: 10334.7599
2024-04-28 23:30:29 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #558: GFLOPs: 9377.3549. Time: 128.8464 us. Best GFLOPs: 10334.7599
2024-04-28 23:30:29 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #559: GFLOPs: 10164.0827. Time: 118.8733 us. Best GFLOPs: 10334.7599
2024-04-28 23:30:29 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #560: GFLOPs: 10052.2179. Time: 120.1962 us. Best GFLOPs: 10334.7599
2024-04-28 23:30:29 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #561: GFLOPs: 10171.6236. Time: 118.7852 us. Best GFLOPs: 10334.7599
2024-04-28 23:30:29 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #562: GFLOPs: 9274.4706. Time: 130.2757 us. Best GFLOPs: 10334.7599
2024-04-28 23:30:29 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #563: GFLOPs: 10076.9295. Time: 119.9014 us. Best GFLOPs: 10334.7599
2024-04-28 23:30:29 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #564: GFLOPs: 10159.8441. Time: 118.9229 us. Best GFLOPs: 10334.7599
2024-04-28 23:30:29 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #565: GFLOPs: 10022.6424. Time: 120.5509 us. Best GFLOPs: 10334.7599
2024-04-28 23:30:29 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #566: GFLOPs: 9785.8731. Time: 123.4676 us. Best GFLOPs: 10334.7599
2024-04-28 23:30:29 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #567: GFLOPs: 9946.5891. Time: 121.4726 us. Best GFLOPs: 10334.7599
2024-04-28 23:30:29 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #568: GFLOPs: 9881.3954. Time: 122.2740 us. Best GFLOPs: 10334.7599
2024-04-28 23:30:29 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #569: GFLOPs: 10027.8764. Time: 120.4879 us. Best GFLOPs: 10334.7599
2024-04-28 23:30:29 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #570: GFLOPs: 9909.4353. Time: 121.9280 us. Best GFLOPs: 10334.7599
2024-04-28 23:30:29 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #571: GFLOPs: 9306.5907. Time: 129.8261 us. Best GFLOPs: 10334.7599
2024-04-28 23:30:29 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #572: GFLOPs: 9786.9358. Time: 123.4542 us. Best GFLOPs: 10334.7599
2024-04-28 23:30:29 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #573: GFLOPs: 5.5633. Time: 217179.8093 us. Best GFLOPs: 10334.7599
2024-04-28 23:30:29 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #574: GFLOPs: 419.8619. Time: 2877.7034 us. Best GFLOPs: 10334.7599
2024-04-28 23:30:29 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #575: GFLOPs: 155.4446. Time: 7772.7902 us. Best GFLOPs: 10334.7599
2024-04-28 23:51:34 [INFO] [evolutionary_search.cc:713] Generating candidates......
2024-04-28 23:51:38 [INFO] [evolutionary_search.cc:715] Picked top 102 candidate(s) from database
2024-04-28 23:51:45 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x43d23b8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x3ad3338)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x72c6e28)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x4cb1ce8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x5905ad8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x7272d28)]: 405 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x3ab3638)]: 0 failure(s)
2024-04-28 23:51:52 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x43d23b8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x3ad3338)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x72c6e28)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x4cb1ce8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x5905ad8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x7272d28)]: 809 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x3ab3638)]: 0 failure(s)
2024-04-28 23:51:58 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x43d23b8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x3ad3338)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x72c6e28)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x4cb1ce8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x5905ad8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x7272d28)]: 1213 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x3ab3638)]: 0 failure(s)
2024-04-28 23:52:05 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x43d23b8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x3ad3338)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x72c6e28)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x4cb1ce8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x5905ad8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x7272d28)]: 1617 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x3ab3638)]: 0 failure(s)
2024-04-28 23:52:12 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x43d23b8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x3ad3338)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x72c6e28)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x4cb1ce8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x5905ad8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x7272d28)]: 2022 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x3ab3638)]: 0 failure(s)
2024-04-28 23:52:19 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x43d23b8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x3ad3338)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x72c6e28)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x4cb1ce8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x5905ad8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x7272d28)]: 2421 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x3ab3638)]: 0 failure(s)
2024-04-28 23:52:26 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x43d23b8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x3ad3338)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x72c6e28)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x4cb1ce8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x5905ad8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x7272d28)]: 2824 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x3ab3638)]: 0 failure(s)
2024-04-28 23:52:33 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x43d23b8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x3ad3338)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x72c6e28)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x4cb1ce8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x5905ad8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x7272d28)]: 3228 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x3ab3638)]: 0 failure(s)
2024-04-28 23:52:33 [INFO] [evolutionary_search.cc:723] Sampled 52 candidate(s)
2024-04-28 23:52:53 [INFO] [evolutionary_search.cc:621] Evolve iter #0 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x43d23b8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x3ad3338)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x72c6e28)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x4cb1ce8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x5905ad8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x7272d28)]: 119 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x3ab3638)]: 0 failure(s)
2024-04-28 23:53:15 [INFO] [evolutionary_search.cc:621] Evolve iter #1 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x43d23b8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x3ad3338)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x72c6e28)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x4cb1ce8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x5905ad8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x7272d28)]: 100 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x3ab3638)]: 0 failure(s)
2024-04-28 23:53:38 [INFO] [evolutionary_search.cc:621] Evolve iter #2 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x43d23b8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x3ad3338)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x72c6e28)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x4cb1ce8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x5905ad8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x7272d28)]: 142 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x3ab3638)]: 0 failure(s)
2024-04-28 23:54:01 [INFO] [evolutionary_search.cc:621] Evolve iter #3 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x43d23b8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x3ad3338)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x72c6e28)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x4cb1ce8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x5905ad8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x7272d28)]: 125 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x3ab3638)]: 0 failure(s)
2024-04-28 23:54:06 [INFO] [evolutionary_search.cc:649] Scores of the best 64 candidates:
[1 : 16]:	1.0191  0.9932  0.9906  0.9880  0.9862  0.9857  0.9841  0.9839  0.9824  0.9817  0.9812  0.9807  0.9800  0.9787  0.9784  0.9777
[17 : 32]:	0.9775  0.9768  0.9757  0.9755  0.9754  0.9754  0.9753  0.9747  0.9746  0.9745  0.9742  0.9737  0.9730  0.9730  0.9729  0.9723
[33 : 48]:	0.9723  0.9722  0.9722  0.9705  0.9702  0.9697  0.9697  0.9692  0.9690  0.9690  0.9689  0.9689  0.9687  0.9684  0.9683  0.9683
[49 : 64]:	0.9682  0.9676  0.9670  0.9670  0.9659  0.9658  0.9656  0.9654  0.9652  0.9645  0.9640  0.9640  0.9639  0.9637  0.9636  0.9629
2024-04-28 23:54:06 [INFO] [evolutionary_search.cc:727] Got 64 candidate(s) with evolutionary search
2024-04-28 23:54:06 [INFO] [evolutionary_search.cc:730] Sending 64 candidates(s) for measurement
2024-04-28 23:55:12 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #576: GFLOPs: 9531.3942. Time: 126.7640 us. Best GFLOPs: 10334.7599
2024-04-28 23:55:12 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #577: GFLOPs: 9930.5199. Time: 121.6692 us. Best GFLOPs: 10334.7599
2024-04-28 23:55:12 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #578: GFLOPs: 10140.3957. Time: 119.1510 us. Best GFLOPs: 10334.7599
2024-04-28 23:55:12 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #579: GFLOPs: 10142.4438. Time: 119.1269 us. Best GFLOPs: 10334.7599
2024-04-28 23:55:12 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #580: GFLOPs: 9915.2939. Time: 121.8560 us. Best GFLOPs: 10334.7599
2024-04-28 23:55:12 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #581: GFLOPs: 10133.3476. Time: 119.2339 us. Best GFLOPs: 10334.7599
2024-04-28 23:55:12 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #582: GFLOPs: 9997.7309. Time: 120.8512 us. Best GFLOPs: 10334.7599
2024-04-28 23:55:12 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #583: GFLOPs: 10238.7940. Time: 118.0059 us. Best GFLOPs: 10334.7599
2024-04-28 23:55:12 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #584: GFLOPs: 10277.6370. Time: 117.5599 us. Best GFLOPs: 10334.7599
2024-04-28 23:55:12 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #585: GFLOPs: 10374.4082. Time: 116.4633 us. Best GFLOPs: 10374.4082
2024-04-28 23:55:12 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #586: GFLOPs: 10231.7441. Time: 118.0872 us. Best GFLOPs: 10374.4082
2024-04-28 23:55:12 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #587: GFLOPs: 10232.8266. Time: 118.0747 us. Best GFLOPs: 10374.4082
2024-04-28 23:55:12 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #588: GFLOPs: 10269.0222. Time: 117.6585 us. Best GFLOPs: 10374.4082
2024-04-28 23:55:12 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #589: GFLOPs: 10253.8859. Time: 117.8322 us. Best GFLOPs: 10374.4082
2024-04-28 23:55:12 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #590: GFLOPs: 10180.2583. Time: 118.6844 us. Best GFLOPs: 10374.4082
2024-04-28 23:55:12 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #591: GFLOPs: 10144.4899. Time: 119.1029 us. Best GFLOPs: 10374.4082
2024-04-28 23:55:12 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #592: GFLOPs: 10097.9334. Time: 119.6520 us. Best GFLOPs: 10374.4082
2024-04-28 23:55:12 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #593: GFLOPs: 10246.2904. Time: 117.9196 us. Best GFLOPs: 10374.4082
2024-04-28 23:55:12 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #594: GFLOPs: 10022.2005. Time: 120.5562 us. Best GFLOPs: 10374.4082
2024-04-28 23:55:12 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #595: GFLOPs: 10425.6244. Time: 115.8912 us. Best GFLOPs: 10425.6244
2024-04-28 23:55:12 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #596: GFLOPs: 10161.5617. Time: 118.9028 us. Best GFLOPs: 10425.6244
2024-04-28 23:55:12 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #597: GFLOPs: 10131.3666. Time: 119.2572 us. Best GFLOPs: 10425.6244
2024-04-28 23:55:12 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #598: GFLOPs: 10093.4571. Time: 119.7051 us. Best GFLOPs: 10425.6244
2024-04-28 23:55:12 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #599: GFLOPs: 10099.6565. Time: 119.6316 us. Best GFLOPs: 10425.6244
2024-04-28 23:55:12 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #600: GFLOPs: 10182.2175. Time: 118.6616 us. Best GFLOPs: 10425.6244
2024-04-28 23:55:12 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #601: GFLOPs: 10025.7038. Time: 120.5140 us. Best GFLOPs: 10425.6244
2024-04-28 23:55:12 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #602: GFLOPs: 10098.9743. Time: 119.6397 us. Best GFLOPs: 10425.6244
2024-04-28 23:55:12 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #603: GFLOPs: 10170.6398. Time: 118.7967 us. Best GFLOPs: 10425.6244
2024-04-28 23:55:12 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #604: GFLOPs: 10095.3688. Time: 119.6824 us. Best GFLOPs: 10425.6244
2024-04-28 23:55:12 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #605: GFLOPs: 10075.9945. Time: 119.9125 us. Best GFLOPs: 10425.6244
2024-04-28 23:55:12 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #606: GFLOPs: 10088.2269. Time: 119.7671 us. Best GFLOPs: 10425.6244
2024-04-28 23:55:12 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #607: GFLOPs: 8078.5838. Time: 149.5606 us. Best GFLOPs: 10425.6244
2024-04-28 23:55:12 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #608: GFLOPs: 10056.1365. Time: 120.1493 us. Best GFLOPs: 10425.6244
2024-04-28 23:55:12 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #609: GFLOPs: 10073.2230. Time: 119.9455 us. Best GFLOPs: 10425.6244
2024-04-28 23:55:12 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #610: GFLOPs: 10091.2676. Time: 119.7311 us. Best GFLOPs: 10425.6244
2024-04-28 23:55:12 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #611: GFLOPs: 10031.1302. Time: 120.4488 us. Best GFLOPs: 10425.6244
2024-04-28 23:55:12 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #612: GFLOPs: 10073.6082. Time: 119.9409 us. Best GFLOPs: 10425.6244
2024-04-28 23:55:12 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #613: GFLOPs: 10232.2984. Time: 118.0808 us. Best GFLOPs: 10425.6244
2024-04-28 23:55:12 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #614: GFLOPs: 10066.7914. Time: 120.0222 us. Best GFLOPs: 10425.6244
2024-04-28 23:55:12 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #615: GFLOPs: 10396.0836. Time: 116.2205 us. Best GFLOPs: 10425.6244
2024-04-28 23:55:12 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #616: GFLOPs: 10029.6854. Time: 120.4662 us. Best GFLOPs: 10425.6244
2024-04-28 23:55:12 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #617: GFLOPs: 10158.1024. Time: 118.9433 us. Best GFLOPs: 10425.6244
2024-04-28 23:55:12 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #618: GFLOPs: 9920.7397. Time: 121.7891 us. Best GFLOPs: 10425.6244
2024-04-28 23:55:12 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #619: GFLOPs: 9782.1937. Time: 123.5140 us. Best GFLOPs: 10425.6244
2024-04-28 23:55:12 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #620: GFLOPs: 10055.5650. Time: 120.1562 us. Best GFLOPs: 10425.6244
2024-04-28 23:55:12 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #621: GFLOPs: 10136.8499. Time: 119.1927 us. Best GFLOPs: 10425.6244
2024-04-28 23:55:12 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #622: GFLOPs: 10125.4409. Time: 119.3270 us. Best GFLOPs: 10425.6244
2024-04-28 23:55:12 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #623: GFLOPs: 10067.8638. Time: 120.0094 us. Best GFLOPs: 10425.6244
2024-04-28 23:55:12 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #624: GFLOPs: 10088.3958. Time: 119.7651 us. Best GFLOPs: 10425.6244
2024-04-28 23:55:12 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #625: GFLOPs: 10237.1220. Time: 118.0252 us. Best GFLOPs: 10425.6244
2024-04-28 23:55:12 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #626: GFLOPs: 10037.7873. Time: 120.3690 us. Best GFLOPs: 10425.6244
2024-04-28 23:55:12 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #627: GFLOPs: 7373.7015. Time: 163.8577 us. Best GFLOPs: 10425.6244
2024-04-28 23:55:12 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #628: GFLOPs: 9989.8467. Time: 120.9466 us. Best GFLOPs: 10425.6244
2024-04-28 23:55:12 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #629: GFLOPs: 9859.5993. Time: 122.5443 us. Best GFLOPs: 10425.6244
2024-04-28 23:55:12 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #630: GFLOPs: 10057.1429. Time: 120.1373 us. Best GFLOPs: 10425.6244
2024-04-28 23:55:12 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #631: GFLOPs: 10099.6799. Time: 119.6313 us. Best GFLOPs: 10425.6244
2024-04-28 23:55:12 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #632: GFLOPs: 10239.6885. Time: 117.9956 us. Best GFLOPs: 10425.6244
2024-04-28 23:55:12 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #633: GFLOPs: 10047.9236. Time: 120.2475 us. Best GFLOPs: 10425.6244
2024-04-28 23:55:12 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #634: GFLOPs: 9898.8556. Time: 122.0584 us. Best GFLOPs: 10425.6244
2024-04-28 23:55:12 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #635: GFLOPs: 9985.7428. Time: 120.9963 us. Best GFLOPs: 10425.6244
2024-04-28 23:55:12 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #636: GFLOPs: 9991.7378. Time: 120.9237 us. Best GFLOPs: 10425.6244
2024-04-28 23:55:12 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #637: GFLOPs: 6747.6888. Time: 179.0595 us. Best GFLOPs: 10425.6244
2024-04-28 23:55:12 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #638: GFLOPs: 4176.4422. Time: 289.2984 us. Best GFLOPs: 10425.6244
2024-04-28 23:55:12 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #639: GFLOPs: 564.0268. Time: 2142.1643 us. Best GFLOPs: 10425.6244
2024-04-29 00:08:52 [INFO] [evolutionary_search.cc:713] Generating candidates......
2024-04-29 00:08:55 [INFO] [evolutionary_search.cc:715] Picked top 102 candidate(s) from database
2024-04-29 00:09:03 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x43d23b8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x3ad3338)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x72c6e28)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x4cb1ce8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x5905ad8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x7272d28)]: 406 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x3ab3638)]: 0 failure(s)
2024-04-29 00:09:09 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x43d23b8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x3ad3338)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x72c6e28)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x4cb1ce8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x5905ad8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x7272d28)]: 809 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x3ab3638)]: 0 failure(s)
2024-04-29 00:09:16 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x43d23b8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x3ad3338)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x72c6e28)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x4cb1ce8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x5905ad8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x7272d28)]: 1209 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x3ab3638)]: 0 failure(s)
2024-04-29 00:09:23 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x43d23b8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x3ad3338)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x72c6e28)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x4cb1ce8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x5905ad8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x7272d28)]: 1612 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x3ab3638)]: 0 failure(s)
2024-04-29 00:09:30 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x43d23b8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x3ad3338)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x72c6e28)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x4cb1ce8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x5905ad8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x7272d28)]: 2017 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x3ab3638)]: 0 failure(s)
2024-04-29 00:09:37 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x43d23b8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x3ad3338)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x72c6e28)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x4cb1ce8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x5905ad8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x7272d28)]: 2425 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x3ab3638)]: 0 failure(s)
2024-04-29 00:09:44 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x43d23b8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x3ad3338)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x72c6e28)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x4cb1ce8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x5905ad8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x7272d28)]: 2832 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x3ab3638)]: 0 failure(s)
2024-04-29 00:09:51 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x43d23b8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x3ad3338)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x72c6e28)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x4cb1ce8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x5905ad8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x7272d28)]: 3240 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x3ab3638)]: 0 failure(s)
2024-04-29 00:09:58 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x43d23b8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x3ad3338)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x72c6e28)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x4cb1ce8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x5905ad8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x7272d28)]: 3645 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x3ab3638)]: 0 failure(s)
2024-04-29 00:10:05 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x43d23b8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x3ad3338)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x72c6e28)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x4cb1ce8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x5905ad8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x7272d28)]: 4046 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x3ab3638)]: 0 failure(s)
2024-04-29 00:10:05 [INFO] [evolutionary_search.cc:723] Sampled 54 candidate(s)
2024-04-29 00:10:24 [INFO] [evolutionary_search.cc:621] Evolve iter #0 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x43d23b8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x3ad3338)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x72c6e28)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x4cb1ce8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x5905ad8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x7272d28)]: 97 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x3ab3638)]: 0 failure(s)
2024-04-29 00:10:46 [INFO] [evolutionary_search.cc:621] Evolve iter #1 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x43d23b8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x3ad3338)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x72c6e28)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x4cb1ce8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x5905ad8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x7272d28)]: 106 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x3ab3638)]: 0 failure(s)
2024-04-29 00:11:07 [INFO] [evolutionary_search.cc:621] Evolve iter #2 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x43d23b8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x3ad3338)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x72c6e28)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x4cb1ce8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x5905ad8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x7272d28)]: 103 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x3ab3638)]: 0 failure(s)
2024-04-29 00:11:28 [INFO] [evolutionary_search.cc:621] Evolve iter #3 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x43d23b8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x3ad3338)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x72c6e28)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x4cb1ce8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x5905ad8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x7272d28)]: 121 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x3ab3638)]: 0 failure(s)
2024-04-29 00:11:33 [INFO] [evolutionary_search.cc:649] Scores of the best 64 candidates:
[1 : 16]:	1.0012  0.9883  0.9883  0.9859  0.9847  0.9844  0.9836  0.9814  0.9814  0.9810  0.9807  0.9805  0.9797  0.9789  0.9789  0.9778
[17 : 32]:	0.9777  0.9776  0.9775  0.9770  0.9767  0.9764  0.9761  0.9753  0.9746  0.9742  0.9736  0.9735  0.9730  0.9729  0.9728  0.9726
[33 : 48]:	0.9725  0.9724  0.9722  0.9722  0.9722  0.9717  0.9715  0.9712  0.9710  0.9710  0.9703  0.9699  0.9699  0.9698  0.9698  0.9697
[49 : 64]:	0.9695  0.9694  0.9693  0.9692  0.9690  0.9690  0.9689  0.9689  0.9686  0.9684  0.9684  0.9683  0.9683  0.9683  0.9681  0.9678
2024-04-29 00:11:33 [INFO] [evolutionary_search.cc:727] Got 64 candidate(s) with evolutionary search
2024-04-29 00:11:33 [INFO] [evolutionary_search.cc:730] Sending 64 candidates(s) for measurement
2024-04-29 00:12:37 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #640: GFLOPs: 9899.4763. Time: 122.0507 us. Best GFLOPs: 10425.6244
2024-04-29 00:12:37 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #641: GFLOPs: 10125.3056. Time: 119.3286 us. Best GFLOPs: 10425.6244
2024-04-29 00:12:37 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #642: GFLOPs: 10289.3638. Time: 117.4259 us. Best GFLOPs: 10425.6244
2024-04-29 00:12:37 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #643: GFLOPs: 10288.1434. Time: 117.4399 us. Best GFLOPs: 10425.6244
2024-04-29 00:12:37 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #644: GFLOPs: 10065.2988. Time: 120.0400 us. Best GFLOPs: 10425.6244
2024-04-29 00:12:37 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #645: GFLOPs: 10282.7576. Time: 117.5014 us. Best GFLOPs: 10425.6244
2024-04-29 00:12:37 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #646: GFLOPs: 10080.3042. Time: 119.8613 us. Best GFLOPs: 10425.6244
2024-04-29 00:12:37 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #647: GFLOPs: 10128.5198. Time: 119.2907 us. Best GFLOPs: 10425.6244
2024-04-29 00:12:37 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #648: GFLOPs: 10085.0836. Time: 119.8045 us. Best GFLOPs: 10425.6244
2024-04-29 00:12:37 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #649: GFLOPs: 10247.0706. Time: 117.9106 us. Best GFLOPs: 10425.6244
2024-04-29 00:12:37 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #650: GFLOPs: 10247.6815. Time: 117.9036 us. Best GFLOPs: 10425.6244
2024-04-29 00:12:37 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #651: GFLOPs: 10372.5629. Time: 116.4840 us. Best GFLOPs: 10425.6244
2024-04-29 00:12:37 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #652: GFLOPs: 10246.3484. Time: 117.9189 us. Best GFLOPs: 10425.6244
2024-04-29 00:12:37 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #653: GFLOPs: 10031.2751. Time: 120.4471 us. Best GFLOPs: 10425.6244
2024-04-29 00:12:37 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #654: GFLOPs: 10026.1905. Time: 120.5082 us. Best GFLOPs: 10425.6244
2024-04-29 00:12:37 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #655: GFLOPs: 10244.4958. Time: 117.9402 us. Best GFLOPs: 10425.6244
2024-04-29 00:12:37 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #656: GFLOPs: 10393.8522. Time: 116.2455 us. Best GFLOPs: 10425.6244
2024-04-29 00:12:37 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #657: GFLOPs: 10136.3456. Time: 119.1986 us. Best GFLOPs: 10425.6244
2024-04-29 00:12:37 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #658: GFLOPs: 10257.2077. Time: 117.7941 us. Best GFLOPs: 10425.6244
2024-04-29 00:12:37 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #659: GFLOPs: 10246.9161. Time: 117.9124 us. Best GFLOPs: 10425.6244
2024-04-29 00:12:37 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #660: GFLOPs: 9966.5137. Time: 121.2298 us. Best GFLOPs: 10425.6244
2024-04-29 00:12:37 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #661: GFLOPs: 10318.8268. Time: 117.0906 us. Best GFLOPs: 10425.6244
2024-04-29 00:12:37 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #662: GFLOPs: 10355.3484. Time: 116.6777 us. Best GFLOPs: 10425.6244
2024-04-29 00:12:37 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #663: GFLOPs: 10053.7310. Time: 120.1781 us. Best GFLOPs: 10425.6244
2024-04-29 00:12:37 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #664: GFLOPs: 10173.2415. Time: 118.7663 us. Best GFLOPs: 10425.6244
2024-04-29 00:12:37 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #665: GFLOPs: 10058.3961. Time: 120.1223 us. Best GFLOPs: 10425.6244
2024-04-29 00:12:37 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #666: GFLOPs: 10098.1904. Time: 119.6490 us. Best GFLOPs: 10425.6244
2024-04-29 00:12:37 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #667: GFLOPs: 10289.4583. Time: 117.4248 us. Best GFLOPs: 10425.6244
2024-04-29 00:12:37 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #668: GFLOPs: 10169.6853. Time: 118.8078 us. Best GFLOPs: 10425.6244
2024-04-29 00:12:37 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #669: GFLOPs: 10268.6729. Time: 117.6625 us. Best GFLOPs: 10425.6244
2024-04-29 00:12:37 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #670: GFLOPs: 10269.0222. Time: 117.6585 us. Best GFLOPs: 10425.6244
2024-04-29 00:12:37 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #671: GFLOPs: 10198.3532. Time: 118.4738 us. Best GFLOPs: 10425.6244
2024-04-29 00:12:37 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #672: GFLOPs: 10023.0900. Time: 120.5455 us. Best GFLOPs: 10425.6244
2024-04-29 00:12:37 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #673: GFLOPs: 10353.8328. Time: 116.6948 us. Best GFLOPs: 10425.6244
2024-04-29 00:12:37 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #674: GFLOPs: 10242.2577. Time: 117.9660 us. Best GFLOPs: 10425.6244
2024-04-29 00:12:37 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #675: GFLOPs: 10239.2319. Time: 118.0009 us. Best GFLOPs: 10425.6244
2024-04-29 00:12:37 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #676: GFLOPs: 10229.7354. Time: 118.1104 us. Best GFLOPs: 10425.6244
2024-04-29 00:12:37 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #677: GFLOPs: 10055.7719. Time: 120.1537 us. Best GFLOPs: 10425.6244
2024-04-29 00:12:37 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #678: GFLOPs: 10106.6325. Time: 119.5490 us. Best GFLOPs: 10425.6244
2024-04-29 00:12:37 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #679: GFLOPs: 10235.1679. Time: 118.0477 us. Best GFLOPs: 10425.6244
2024-04-29 00:12:37 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #680: GFLOPs: 10154.0164. Time: 118.9911 us. Best GFLOPs: 10425.6244
2024-04-29 00:12:37 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #681: GFLOPs: 10154.6234. Time: 118.9840 us. Best GFLOPs: 10425.6244
2024-04-29 00:12:37 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #682: GFLOPs: 10115.8599. Time: 119.4400 us. Best GFLOPs: 10425.6244
2024-04-29 00:12:37 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #683: GFLOPs: 10258.9364. Time: 117.7742 us. Best GFLOPs: 10425.6244
2024-04-29 00:12:37 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #684: GFLOPs: 10121.3114. Time: 119.3756 us. Best GFLOPs: 10425.6244
2024-04-29 00:12:37 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #685: GFLOPs: 10060.9280. Time: 120.0921 us. Best GFLOPs: 10425.6244
2024-04-29 00:12:37 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #686: GFLOPs: 10215.6561. Time: 118.2732 us. Best GFLOPs: 10425.6244
2024-04-29 00:12:37 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #687: GFLOPs: 10227.6317. Time: 118.1347 us. Best GFLOPs: 10425.6244
2024-04-29 00:12:37 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #688: GFLOPs: 10120.4749. Time: 119.3855 us. Best GFLOPs: 10425.6244
2024-04-29 00:12:37 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #689: GFLOPs: 10233.5292. Time: 118.0666 us. Best GFLOPs: 10425.6244
2024-04-29 00:12:37 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #690: GFLOPs: 10055.4055. Time: 120.1581 us. Best GFLOPs: 10425.6244
2024-04-29 00:12:37 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #691: GFLOPs: 10084.1889. Time: 119.8151 us. Best GFLOPs: 10425.6244
2024-04-29 00:12:37 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #692: GFLOPs: 10307.0288. Time: 117.2247 us. Best GFLOPs: 10425.6244
2024-04-29 00:12:37 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #693: GFLOPs: 10097.7525. Time: 119.6542 us. Best GFLOPs: 10425.6244
2024-04-29 00:12:37 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #694: GFLOPs: 10098.6163. Time: 119.6439 us. Best GFLOPs: 10425.6244
2024-04-29 00:12:37 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #695: GFLOPs: 10109.4450. Time: 119.5158 us. Best GFLOPs: 10425.6244
2024-04-29 00:12:37 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #696: GFLOPs: 10219.9665. Time: 118.2233 us. Best GFLOPs: 10425.6244
2024-04-29 00:12:37 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #697: GFLOPs: 10064.6277. Time: 120.0480 us. Best GFLOPs: 10425.6244
2024-04-29 00:12:37 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #698: GFLOPs: 10228.1473. Time: 118.1287 us. Best GFLOPs: 10425.6244
2024-04-29 00:12:37 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #699: GFLOPs: 9977.3383. Time: 121.0982 us. Best GFLOPs: 10425.6244
2024-04-29 00:12:37 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #700: GFLOPs: 10156.8072. Time: 118.9585 us. Best GFLOPs: 10425.6244
2024-04-29 00:12:37 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #701: GFLOPs: 26.0311. Time: 46415.1913 us. Best GFLOPs: 10425.6244
2024-04-29 00:12:37 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #702: GFLOPs: 1853.4224. Time: 651.8957 us. Best GFLOPs: 10425.6244
2024-04-29 00:12:37 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #703: GFLOPs: 405.8112. Time: 2977.3402 us. Best GFLOPs: 10425.6244
2024-04-29 00:29:53 [INFO] [evolutionary_search.cc:713] Generating candidates......
2024-04-29 00:29:56 [INFO] [evolutionary_search.cc:715] Picked top 102 candidate(s) from database
2024-04-29 00:30:04 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x43d23b8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x3ad3338)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x72c6e28)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x4cb1ce8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x5905ad8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x7272d28)]: 406 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x3ab3638)]: 0 failure(s)
2024-04-29 00:30:10 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x43d23b8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x3ad3338)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x72c6e28)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x4cb1ce8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x5905ad8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x7272d28)]: 808 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x3ab3638)]: 0 failure(s)
2024-04-29 00:30:17 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x43d23b8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x3ad3338)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x72c6e28)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x4cb1ce8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x5905ad8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x7272d28)]: 1211 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x3ab3638)]: 0 failure(s)
2024-04-29 00:30:24 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x43d23b8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x3ad3338)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x72c6e28)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x4cb1ce8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x5905ad8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x7272d28)]: 1616 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x3ab3638)]: 0 failure(s)
2024-04-29 00:30:31 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x43d23b8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x3ad3338)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x72c6e28)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x4cb1ce8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x5905ad8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x7272d28)]: 2019 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x3ab3638)]: 0 failure(s)
2024-04-29 00:30:38 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x43d23b8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x3ad3338)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x72c6e28)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x4cb1ce8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x5905ad8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x7272d28)]: 2421 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x3ab3638)]: 0 failure(s)
2024-04-29 00:30:45 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x43d23b8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x3ad3338)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x72c6e28)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x4cb1ce8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x5905ad8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x7272d28)]: 2829 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x3ab3638)]: 0 failure(s)
2024-04-29 00:30:52 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x43d23b8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x3ad3338)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x72c6e28)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x4cb1ce8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x5905ad8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x7272d28)]: 3235 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x3ab3638)]: 0 failure(s)
2024-04-29 00:30:58 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x43d23b8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x3ad3338)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x72c6e28)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x4cb1ce8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x5905ad8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x7272d28)]: 3640 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x3ab3638)]: 0 failure(s)
2024-04-29 00:30:58 [INFO] [evolutionary_search.cc:723] Sampled 50 candidate(s)
2024-04-29 00:31:17 [INFO] [evolutionary_search.cc:621] Evolve iter #0 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x43d23b8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x3ad3338)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x72c6e28)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x4cb1ce8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x5905ad8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x7272d28)]: 84 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x3ab3638)]: 0 failure(s)
2024-04-29 00:31:39 [INFO] [evolutionary_search.cc:621] Evolve iter #1 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x43d23b8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x3ad3338)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x72c6e28)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x4cb1ce8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x5905ad8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x7272d28)]: 103 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x3ab3638)]: 0 failure(s)
2024-04-29 00:32:00 [INFO] [evolutionary_search.cc:621] Evolve iter #2 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x43d23b8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x3ad3338)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x72c6e28)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x4cb1ce8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x5905ad8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x7272d28)]: 105 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x3ab3638)]: 0 failure(s)
2024-04-29 00:32:22 [INFO] [evolutionary_search.cc:621] Evolve iter #3 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x43d23b8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x3ad3338)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x72c6e28)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x4cb1ce8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x5905ad8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x7272d28)]: 106 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x3ab3638)]: 0 failure(s)
2024-04-29 00:32:27 [INFO] [evolutionary_search.cc:649] Scores of the best 64 candidates:
[1 : 16]:	1.2894  1.2576  1.2056  1.1984  1.1959  1.1948  1.1928  1.1925  1.1776  1.1712  0.9926  0.9922  0.9918  0.9896  0.9892  0.9887
[17 : 32]:	0.9886  0.9881  0.9879  0.9872  0.9868  0.9862  0.9861  0.9856  0.9854  0.9853  0.9852  0.9851  0.9848  0.9847  0.9847  0.9843
[33 : 48]:	0.9840  0.9839  0.9838  0.9826  0.9818  0.9818  0.9814  0.9814  0.9812  0.9810  0.9810  0.9794  0.9794  0.9793  0.9791  0.9786
[49 : 64]:	0.9785  0.9784  0.9782  0.9782  0.9781  0.9780  0.9777  0.9776  0.9775  0.9774  0.9774  0.9774  0.9773  0.9772  0.9771  0.9769
2024-04-29 00:32:27 [INFO] [evolutionary_search.cc:727] Got 64 candidate(s) with evolutionary search
2024-04-29 00:32:27 [INFO] [evolutionary_search.cc:730] Sending 64 candidates(s) for measurement
2024-04-29 00:33:49 [INFO] [task_scheduler.cc:121] [Task #5: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #704: Error in building:
LocalBuilder: Timeout, killed after 30.0 seconds
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(256), T.int64(56), T.int64(56)), "float32"), p1: T.Buffer((T.int64(6), T.int64(6), T.int64(256), T.int64(256)), "float32"), p2: T.Buffer((T.int64(1), T.int64(256), T.int64(1), T.int64(1)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(256), T.int64(56), T.int64(56)), "float32")):
        T.func_attr({"layout_free_buffers": [1], "tir.noalias": T.bool(True)})
        # with T.block("root"):
        input_tile_local = T.alloc_buffer((T.int64(256), T.int64(196), T.int64(6), T.int64(6)), scope="local")
        data_pack = T.alloc_buffer((T.int64(6), T.int64(6), T.int64(256), T.int64(196)))
        bgemm = T.alloc_buffer((T.int64(6), T.int64(6), T.int64(256), T.int64(196)))
        inverse_local = T.alloc_buffer((T.int64(256), T.int64(196), T.int64(4), T.int64(4)), scope="local")
        data_pack_local = T.alloc_buffer((T.int64(6), T.int64(6), T.int64(256), T.int64(196)), scope="local")
        bgemm_local = T.alloc_buffer((T.int64(6), T.int64(6), T.int64(256), T.int64(196)), scope="local")
        data_pack_shared = T.alloc_buffer((T.int64(6), T.int64(6), T.int64(256), T.int64(196)), scope="shared")
        p1_shared = T.alloc_buffer((T.int64(6), T.int64(6), T.int64(256), T.int64(256)), scope="shared")
        for ci_p_fused_0 in T.thread_binding(T.int64(49), thread="blockIdx.x", annotations={"pragma_auto_unroll_max_step": 1024, "pragma_unroll_explicit": 1}):
            for ci_p_fused_1 in T.thread_binding(T.int64(1024), thread="threadIdx.x"):
                for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(1), T.int64(6), T.int64(6)):
                    with T.block("input_tile"):
                        v_ci = T.axis.spatial(T.int64(256), (ci_p_fused_0 * T.int64(1024) + ci_p_fused_1) // T.int64(196) + ax0)
                        v_p = T.axis.spatial(T.int64(196), (ci_p_fused_0 * T.int64(44) + ci_p_fused_1) % T.int64(196) + ax1)
                        v_eps, v_nu = T.axis.remap("SS", [ax2, ax3])
                        T.reads(p0[v_p // T.int64(196), v_ci, v_p % T.int64(196) // T.int64(14) * T.int64(4) + v_eps - T.int64(1), v_p % T.int64(14) * T.int64(4) + v_nu - T.int64(1)])
                        T.writes(input_tile_local[v_ci, v_p, v_eps, v_nu])
                        T.block_attr({"schedule_rule": "None"})
                        input_tile_local[v_ci, v_p, v_eps, v_nu] = T.if_then_else(T.int64(1) <= v_p % T.int64(196) // T.int64(14) * T.int64(4) + v_eps and v_p % T.int64(196) // T.int64(14) * T.int64(4) + v_eps < T.int64(57) and T.int64(1) <= v_p % T.int64(14) * T.int64(4) + v_nu and v_p % T.int64(14) * T.int64(4) + v_nu < T.int64(57), p0[v_p // T.int64(196), v_ci, v_p % T.int64(196) // T.int64(14) * T.int64(4) + v_eps - T.int64(1), v_p % T.int64(14) * T.int64(4) + v_nu - T.int64(1)], T.float32(0))
                for eps in T.unroll(T.int64(6)):
                    for nu in T.unroll(T.int64(6)):
                        with T.block("data_pack_init"):
                            v_eps, v_nu = T.axis.remap("SS", [eps, nu])
                            v_ci = T.axis.spatial(T.int64(256), (ci_p_fused_0 * T.int64(1024) + ci_p_fused_1) // T.int64(196))
                            v_p = T.axis.spatial(T.int64(196), (ci_p_fused_0 * T.int64(1024) + ci_p_fused_1) % T.int64(196))
                            T.reads()
                            T.writes(data_pack_local[v_eps, v_nu, v_ci, v_p])
                            T.block_attr({"schedule_rule": "conv2d_nchw_winograd_data_pack"})
                            data_pack_local[v_eps, v_nu, v_ci, v_p] = T.float32(0)
                        for r_a in T.unroll(T.int64(6)):
                            for r_b in T.unroll(T.int64(6)):
                                with T.block("data_pack_update"):
                                    v_eps, v_nu = T.axis.remap("SS", [eps, nu])
                                    v_ci = T.axis.spatial(T.int64(256), (ci_p_fused_0 * T.int64(1024) + ci_p_fused_1) // T.int64(196))
                                    v_p = T.axis.spatial(T.int64(196), (ci_p_fused_0 * T.int64(1024) + ci_p_fused_1) % T.int64(196))
                                    v_r_a, v_r_b = T.axis.remap("RR", [r_a, r_b])
                                    T.reads(data_pack_local[v_eps, v_nu, v_ci, v_p], input_tile_local[v_ci, v_p, v_r_a, v_r_b])
                                    T.writes(data_pack_local[v_eps, v_nu, v_ci, v_p])
                                    T.block_attr({"schedule_rule": "conv2d_nchw_winograd_data_pack"})
                                    data_pack_local[v_eps, v_nu, v_ci, v_p] = data_pack_local[v_eps, v_nu, v_ci, v_p] + input_tile_local[v_ci, v_p, v_r_a, v_r_b] * T.Select(v_r_a % T.int64(6) == T.int64(5) and v_eps % T.int64(6) == T.int64(5), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(5) and v_eps % T.int64(6) == T.int64(4), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(5) and v_eps % T.int64(6) == T.int64(3), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(5) and v_eps % T.int64(6) == T.int64(2), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(5) and v_eps % T.int64(6) == T.int64(1), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(5) and v_eps % T.int64(6) == T.int64(0), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(4) and v_eps % T.int64(6) == T.int64(5), T.float32(1.5), T.Select(v_r_a % T.int64(6) == T.int64(4) and v_eps % T.int64(6) == T.int64(4), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(4) and v_eps % T.int64(6) == T.int64(3), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(4) and v_eps % T.int64(6) == T.int64(2), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(4) and v_eps % T.int64(6) == T.int64(1), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(4) and v_eps % T.int64(6) == T.int64(0), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(3) and v_eps % T.int64(6) == T.int64(5), T.float32(-2), T.Select(v_r_a % T.int64(6) == T.int64(3) and v_eps % T.int64(6) == T.int64(4), T.float32(-0.5), T.Select(v_r_a % T.int64(6) == T.int64(3) and v_eps % T.int64(6) == T.int64(3), T.float32(2), T.Select(v_r_a % T.int64(6) == T.int64(3) and v_eps % T.int64(6) == T.int64(2), T.float32(2.5), T.Select(v_r_a % T.int64(6) == T.int64(3) and v_eps % T.int64(6) == T.int64(1), T.float32(0.5), T.Select(v_r_a % T.int64(6) == T.int64(3) and v_eps % T.int64(6) == T.int64(0), T.float32(1.5), T.Select(v_r_a % T.int64(6) == T.int64(2) and v_eps % T.int64(6) == T.int64(5), T.float32(-1.5), T.Select(v_r_a % T.int64(6) == T.int64(2) and v_eps % T.int64(6) == T.int64(4), T.float32(-1), T.Select(v_r_a % T.int64(6) == T.int64(2) and v_eps % T.int64(6) == T.int64(3), T.float32(-1), T.Select(v_r_a % T.int64(6) == T.int64(2) and v_eps % T.int64(6) == T.int64(2), T.float32(0.5), T.Select(v_r_a % T.int64(6) == T.int64(2) and v_eps % T.int64(6) == T.int64(1), T.float32(-2.5), T.Select(v_r_a % T.int64(6) == T.int64(2) and v_eps % T.int64(6) == T.int64(0), T.float32(-2), T.Select(v_r_a % T.int64(6) == T.int64(1) and v_eps % T.int64(6) == T.int64(5), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(1) and v_eps % T.int64(6) == T.int64(4), T.float32(0.5), T.Select(v_r_a % T.int64(6) == T.int64(1) and v_eps % T.int64(6) == T.int64(3), T.float32(-2), T.Select(v_r_a % T.int64(6) == T.int64(1) and v_eps % T.int64(6) == T.int64(2), T.float32(-1), T.Select(v_r_a % T.int64(6) == T.int64(1) and v_eps % T.int64(6) == T.int64(1), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(1) and v_eps % T.int64(6) == T.int64(0), T.float32(-1.5), T.Select(v_r_a % T.int64(6) == T.int64(0) and v_eps % T.int64(6) == T.int64(5), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(0) and v_eps % T.int64(6) == T.int64(4), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(0) and v_eps % T.int64(6) == T.int64(3), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(0) and v_eps % T.int64(6) == T.int64(2), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(0) and v_eps % T.int64(6) == T.int64(1), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(0) and v_eps % T.int64(6) == T.int64(0), T.float32(1), T.float32(0))))))))))))))))))))))))))))))))))))) * T.Select(v_r_b % T.int64(6) == T.int64(5) and v_nu % T.int64(6) == T.int64(5), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(5) and v_nu % T.int64(6) == T.int64(4), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(5) and v_nu % T.int64(6) == T.int64(3), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(5) and v_nu % T.int64(6) == T.int64(2), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(5) and v_nu % T.int64(6) == T.int64(1), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(5) and v_nu % T.int64(6) == T.int64(0), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(4) and v_nu % T.int64(6) == T.int64(5), T.float32(1.5), T.Select(v_r_b % T.int64(6) == T.int64(4) and v_nu % T.int64(6) == T.int64(4), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(4) and v_nu % T.int64(6) == T.int64(3), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(4) and v_nu % T.int64(6) == T.int64(2), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(4) and v_nu % T.int64(6) == T.int64(1), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(4) and v_nu % T.int64(6) == T.int64(0), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(3) and v_nu % T.int64(6) == T.int64(5), T.float32(-2), T.Select(v_r_b % T.int64(6) == T.int64(3) and v_nu % T.int64(6) == T.int64(4), T.float32(-0.5), T.Select(v_r_b % T.int64(6) == T.int64(3) and v_nu % T.int64(6) == T.int64(3), T.float32(2), T.Select(v_r_b % T.int64(6) == T.int64(3) and v_nu % T.int64(6) == T.int64(2), T.float32(2.5), T.Select(v_r_b % T.int64(6) == T.int64(3) and v_nu % T.int64(6) == T.int64(1), T.float32(0.5), T.Select(v_r_b % T.int64(6) == T.int64(3) and v_nu % T.int64(6) == T.int64(0), T.float32(1.5), T.Select(v_r_b % T.int64(6) == T.int64(2) and v_nu % T.int64(6) == T.int64(5), T.float32(-1.5), T.Select(v_r_b % T.int64(6) == T.int64(2) and v_nu % T.int64(6) == T.int64(4), T.float32(-1), T.Select(v_r_b % T.int64(6) == T.int64(2) and v_nu % T.int64(6) == T.int64(3), T.float32(-1), T.Select(v_r_b % T.int64(6) == T.int64(2) and v_nu % T.int64(6) == T.int64(2), T.float32(0.5), T.Select(v_r_b % T.int64(6) == T.int64(2) and v_nu % T.int64(6) == T.int64(1), T.float32(-2.5), T.Select(v_r_b % T.int64(6) == T.int64(2) and v_nu % T.int64(6) == T.int64(0), T.float32(-2), T.Select(v_r_b % T.int64(6) == T.int64(1) and v_nu % T.int64(6) == T.int64(5), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(1) and v_nu % T.int64(6) == T.int64(4), T.float32(0.5), T.Select(v_r_b % T.int64(6) == T.int64(1) and v_nu % T.int64(6) == T.int64(3), T.float32(-2), T.Select(v_r_b % T.int64(6) == T.int64(1) and v_nu % T.int64(6) == T.int64(2), T.float32(-1), T.Select(v_r_b % T.int64(6) == T.int64(1) and v_nu % T.int64(6) == T.int64(1), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(1) and v_nu % T.int64(6) == T.int64(0), T.float32(-1.5), T.Select(v_r_b % T.int64(6) == T.int64(0) and v_nu % T.int64(6) == T.int64(5), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(0) and v_nu % T.int64(6) == T.int64(4), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(0) and v_nu % T.int64(6) == T.int64(3), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(0) and v_nu % T.int64(6) == T.int64(2), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(0) and v_nu % T.int64(6) == T.int64(1), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(0) and v_nu % T.int64(6) == T.int64(0), T.float32(1), T.float32(0)))))))))))))))))))))))))))))))))))))
                for ax0, ax1, ax2, ax3 in T.grid(T.int64(6), T.int64(6), T.int64(1), T.int64(1)):
                    with T.block("data_pack_local"):
                        v0, v1 = T.axis.remap("SS", [ax0, ax1])
                        v2 = T.axis.spatial(T.int64(256), (ci_p_fused_0 * T.int64(1024) + ci_p_fused_1) // T.int64(196) + ax2)
                        v3 = T.axis.spatial(T.int64(196), (ci_p_fused_0 * T.int64(44) + ci_p_fused_1) % T.int64(196) + ax3)
                        T.reads(data_pack_local[v0, v1, v2, v3])
                        T.writes(data_pack[v0, v1, v2, v3])
                        data_pack[v0, v1, v2, v3] = data_pack_local[v0, v1, v2, v3]
        for eps_0_nu_0_co_0_p_0_fused in T.thread_binding(T.int64(18), thread="blockIdx.x", annotations={"pragma_auto_unroll_max_step": 1024, "pragma_unroll_explicit": 1}):
            for eps_1_nu_1_co_1_p_1_fused in T.thread_binding(T.int64(224), thread="vthread.x"):
                for eps_2_nu_2_co_2_p_2_fused in T.thread_binding(T.int64(32), thread="threadIdx.x"):
                    for eps_3_init, nu_3_init, co_3_init, p_3_init, eps_4_init, nu_4_init, co_4_init, p_4_init in T.grid(T.int64(1), T.int64(1), T.int64(1), T.int64(7), T.int64(2), T.int64(1), T.int64(1), T.int64(1)):
                        with T.block("bgemm_init"):
                            v_eps = T.axis.spatial(T.int64(6), eps_0_nu_0_co_0_p_0_fused // T.int64(6) * T.int64(2) + eps_3_init * T.int64(2) + eps_4_init)
                            v_nu = T.axis.spatial(T.int64(6), eps_0_nu_0_co_0_p_0_fused % T.int64(6) // T.int64(2) * T.int64(2) + eps_2_nu_2_co_2_p_2_fused // T.int64(16) + nu_3_init + nu_4_init)
                            v_co = T.axis.spatial(T.int64(256), eps_0_nu_0_co_0_p_0_fused % T.int64(2) * T.int64(128) + eps_1_nu_1_co_1_p_1_fused // T.int64(14) * T.int64(8) + eps_2_nu_2_co_2_p_2_fused % T.int64(16) // T.int64(2) + co_3_init + co_4_init)
                            v_p = T.axis.spatial(T.int64(196), eps_1_nu_1_co_1_p_1_fused % T.int64(14) * T.int64(14) + eps_2_nu_2_co_2_p_2_fused % T.int64(2) * T.int64(7) + p_3_init + p_4_init)
                            T.reads()
                            T.writes(bgemm_local[v_eps, v_nu, v_co, v_p])
                            T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 32, "meta_schedule.tiling_structure": "SSSRRSRS"})
                            bgemm_local[v_eps, v_nu, v_co, v_p] = T.float32(0)
                    for ci_0_fused in T.serial(T.int64(256), annotations={"software_pipeline_async_stages": [0], "software_pipeline_order": [0, 1, 2], "software_pipeline_stage": [0, 0, 3]}):
                        for ax0_ax1_ax2_ax3_fused_0 in range(T.int64(7)):
                            for ax0_ax1_ax2_ax3_fused_1 in T.thread_binding(T.int64(32), thread="threadIdx.x"):
                                for ax0_ax1_ax2_ax3_fused_2 in T.vectorized(T.int64(4)):
                                    with T.block("data_pack_shared"):
                                        v0 = T.axis.spatial(T.int64(6), eps_0_nu_0_co_0_p_0_fused // T.int64(6) * T.int64(2) + (ax0_ax1_ax2_ax3_fused_0 * T.int64(128) + ax0_ax1_ax2_ax3_fused_1 * T.int64(4) + ax0_ax1_ax2_ax3_fused_2) // T.int64(392))
                                        v1 = T.axis.spatial(T.int64(6), eps_0_nu_0_co_0_p_0_fused % T.int64(6) // T.int64(2) * T.int64(2) + (ax0_ax1_ax2_ax3_fused_0 * T.int64(128) + ax0_ax1_ax2_ax3_fused_1 * T.int64(4) + ax0_ax1_ax2_ax3_fused_2) % T.int64(392) // T.int64(196))
                                        v2 = T.axis.spatial(T.int64(256), ci_0_fused)
                                        v3 = T.axis.spatial(T.int64(196), (ax0_ax1_ax2_ax3_fused_0 * T.int64(128) + ax0_ax1_ax2_ax3_fused_1 * T.int64(4) + ax0_ax1_ax2_ax3_fused_2) % T.int64(196))
                                        T.where((ax0_ax1_ax2_ax3_fused_0 * T.int64(32) + ax0_ax1_ax2_ax3_fused_1) * T.int64(4) + ax0_ax1_ax2_ax3_fused_2 < T.int64(784))
                                        T.reads(data_pack[v0, v1, v2, v3])
                                        T.writes(data_pack_shared[v0, v1, v2, v3])
                                        data_pack_shared[v0, v1, v2, v3] = data_pack[v0, v1, v2, v3]
                        for ax0_ax1_ax2_ax3_fused_0 in range(T.int64(8)):
                            for ax0_ax1_ax2_ax3_fused_1 in T.thread_binding(T.int64(32), thread="threadIdx.x"):
                                for ax0_ax1_ax2_ax3_fused_2 in T.vectorized(T.int64(2)):
                                    with T.block("p1_shared"):
                                        v0 = T.axis.spatial(T.int64(6), eps_0_nu_0_co_0_p_0_fused // T.int64(6) * T.int64(2) + (ax0_ax1_ax2_ax3_fused_0 * T.int64(64) + ax0_ax1_ax2_ax3_fused_1 * T.int64(2) + ax0_ax1_ax2_ax3_fused_2) // T.int64(256))
                                        v1 = T.axis.spatial(T.int64(6), eps_0_nu_0_co_0_p_0_fused % T.int64(6) // T.int64(2) * T.int64(2) + (ax0_ax1_ax2_ax3_fused_0 * T.int64(64) + ax0_ax1_ax2_ax3_fused_1 * T.int64(2) + ax0_ax1_ax2_ax3_fused_2) % T.int64(256) // T.int64(128))
                                        v2 = T.axis.spatial(T.int64(256), ci_0_fused)
                                        v3 = T.axis.spatial(T.int64(256), eps_0_nu_0_co_0_p_0_fused % T.int64(2) * T.int64(128) + (ax0_ax1_ax2_ax3_fused_0 * T.int64(64) + ax0_ax1_ax2_ax3_fused_1 * T.int64(2) + ax0_ax1_ax2_ax3_fused_2) % T.int64(128))
                                        T.reads(p1[v0, v1, v2, v3])
                                        T.writes(p1_shared[v0, v1, v2, v3])
                                        p1_shared[v0, v1, v2, v3] = p1[v0, v1, v2, v3]
                        for ci_1, eps_3, nu_3, co_3, p_3, ci_2, eps_4, nu_4, co_4, p_4 in T.grid(T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(7), T.int64(1), T.int64(2), T.int64(1), T.int64(1), T.int64(1)):
                            with T.block("bgemm_update"):
                                v_eps = T.axis.spatial(T.int64(6), eps_0_nu_0_co_0_p_0_fused // T.int64(6) * T.int64(2) + eps_3 * T.int64(2) + eps_4)
                                v_nu = T.axis.spatial(T.int64(6), eps_0_nu_0_co_0_p_0_fused % T.int64(6) // T.int64(2) * T.int64(2) + eps_2_nu_2_co_2_p_2_fused // T.int64(16) + nu_3 + nu_4)
                                v_co = T.axis.spatial(T.int64(256), eps_0_nu_0_co_0_p_0_fused % T.int64(2) * T.int64(128) + eps_1_nu_1_co_1_p_1_fused // T.int64(14) * T.int64(8) + eps_2_nu_2_co_2_p_2_fused % T.int64(16) // T.int64(2) + co_3 + co_4)
                                v_p = T.axis.spatial(T.int64(196), eps_1_nu_1_co_1_p_1_fused % T.int64(14) * T.int64(14) + eps_2_nu_2_co_2_p_2_fused % T.int64(2) * T.int64(7) + p_3 + p_4)
                                v_ci = T.axis.reduce(T.int64(256), ci_0_fused + ci_1 + ci_2)
                                T.reads(bgemm_local[v_eps, v_nu, v_co, v_p], data_pack_shared[v_eps, v_nu, v_ci, v_p], p1_shared[v_eps, v_nu, v_ci, v_co])
                                T.writes(bgemm_local[v_eps, v_nu, v_co, v_p])
                                T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 32, "meta_schedule.tiling_structure": "SSSRRSRS"})
                                bgemm_local[v_eps, v_nu, v_co, v_p] = bgemm_local[v_eps, v_nu, v_co, v_p] + data_pack_shared[v_eps, v_nu, v_ci, v_p] * p1_shared[v_eps, v_nu, v_ci, v_co]
                    for ax0, ax1, ax2, ax3 in T.grid(T.int64(2), T.int64(1), T.int64(1), T.int64(7)):
                        with T.block("bgemm_local"):
                            v0 = T.axis.spatial(T.int64(6), eps_0_nu_0_co_0_p_0_fused // T.int64(6) * T.int64(2) + ax0)
                            v1 = T.axis.spatial(T.int64(6), eps_0_nu_0_co_0_p_0_fused % T.int64(6) // T.int64(2) * T.int64(2) + eps_2_nu_2_co_2_p_2_fused // T.int64(16) + ax1)
                            v2 = T.axis.spatial(T.int64(256), eps_0_nu_0_co_0_p_0_fused % T.int64(2) * T.int64(128) + eps_1_nu_1_co_1_p_1_fused // T.int64(14) * T.int64(8) + eps_2_nu_2_co_2_p_2_fused % T.int64(16) // T.int64(2) + ax2)
                            v3 = T.axis.spatial(T.int64(196), eps_1_nu_1_co_1_p_1_fused % T.int64(14) * T.int64(14) + eps_2_nu_2_co_2_p_2_fused % T.int64(2) * T.int64(7) + ax3)
                            T.reads(bgemm_local[v0, v1, v2, v3])
                            T.writes(bgemm[v0, v1, v2, v3])
                            bgemm[v0, v1, v2, v3] = bgemm_local[v0, v1, v2, v3]
        for n_co_h_0_w_0_fused_0 in T.thread_binding(T.int64(392), thread="blockIdx.x", annotations={"pragma_auto_unroll_max_step": 1024, "pragma_unroll_explicit": 1}):
            for n_co_h_0_w_0_fused_1 in T.thread_binding(T.int64(128), thread="threadIdx.x"):
                for ax0, ax1 in T.grid(T.int64(1), T.int64(1)):
                    for ax2 in T.unroll(T.int64(4)):
                        for ax3 in T.unroll(T.int64(4)):
                            with T.block("inverse_init"):
                                v_co = T.axis.spatial(T.int64(256), (n_co_h_0_w_0_fused_0 * T.int64(128) + n_co_h_0_w_0_fused_1) // T.int64(196) + ax0)
                                v_p = T.axis.spatial(T.int64(196), (n_co_h_0_w_0_fused_0 * T.int64(128) + n_co_h_0_w_0_fused_1) % T.int64(196) + ax1)
                                v_vh, v_vw = T.axis.remap("SS", [ax2, ax3])
                                T.reads()
                                T.writes(inverse_local[v_co, v_p, v_vh, v_vw])
                                T.block_attr({"schedule_rule": "conv2d_nchw_winograd_inverse"})
                                inverse_local[v_co, v_p, v_vh, v_vw] = T.float32(0)
                            for ax4 in T.unroll(T.int64(6)):
                                for ax5 in T.unroll(T.int64(6)):
                                    with T.block("inverse_update"):
                                        v_co = T.axis.spatial(T.int64(256), (n_co_h_0_w_0_fused_0 * T.int64(128) + n_co_h_0_w_0_fused_1) // T.int64(196) + ax0)
                                        v_p = T.axis.spatial(T.int64(196), (n_co_h_0_w_0_fused_0 * T.int64(128) + n_co_h_0_w_0_fused_1) % T.int64(196) + ax1)
                                        v_vh, v_vw, v_r_a, v_r_b = T.axis.remap("SSRR", [ax2, ax3, ax4, ax5])
                                        T.reads(inverse_local[v_co, v_p, v_vh, v_vw], bgemm[v_r_a, v_r_b, v_co, v_p])
                                        T.writes(inverse_local[v_co, v_p, v_vh, v_vw])
                                        T.block_attr({"schedule_rule": "conv2d_nchw_winograd_inverse"})
                                        inverse_local[v_co, v_p, v_vh, v_vw] = inverse_local[v_co, v_p, v_vh, v_vw] + bgemm[v_r_a, v_r_b, v_co, v_p] * T.Select(v_r_a % T.int64(6) == T.int64(5) and v_vh % T.int64(4) == T.int64(3), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(5) and v_vh % T.int64(4) == T.int64(2), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(5) and v_vh % T.int64(4) == T.int64(1), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(5) and v_vh % T.int64(4) == T.int64(0), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(4) and v_vh % T.int64(4) == T.int64(3), T.float32(-8), T.Select(v_r_a % T.int64(6) == T.int64(4) and v_vh % T.int64(4) == T.int64(2), T.float32(4), T.Select(v_r_a % T.int64(6) == T.int64(4) and v_vh % T.int64(4) == T.int64(1), T.float32(-2), T.Select(v_r_a % T.int64(6) == T.int64(4) and v_vh % T.int64(4) == T.int64(0), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(3) and v_vh % T.int64(4) == T.int64(3), T.float32(0.125), T.Select(v_r_a % T.int64(6) == T.int64(3) and v_vh % T.int64(4) == T.int64(2), T.float32(0.25), T.Select(v_r_a % T.int64(6) == T.int64(3) and v_vh % T.int64(4) == T.int64(1), T.float32(0.5), T.Select(v_r_a % T.int64(6) == T.int64(3) and v_vh % T.int64(4) == T.int64(0), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(2) and v_vh % T.int64(4) == T.int64(3), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(2) and v_vh % T.int64(4) == T.int64(2), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(2) and v_vh % T.int64(4) == T.int64(1), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(2) and v_vh % T.int64(4) == T.int64(0), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(1) and v_vh % T.int64(4) == T.int64(3), T.float32(-1), T.Select(v_r_a % T.int64(6) == T.int64(1) and v_vh % T.int64(4) == T.int64(2), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(1) and v_vh % T.int64(4) == T.int64(1), T.float32(-1), T.Select(v_r_a % T.int64(6) == T.int64(1) and v_vh % T.int64(4) == T.int64(0), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(0) and v_vh % T.int64(4) == T.int64(3), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(0) and v_vh % T.int64(4) == T.int64(2), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(0) and v_vh % T.int64(4) == T.int64(1), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(0) and v_vh % T.int64(4) == T.int64(0), T.float32(1), T.float32(0))))))))))))))))))))))))) * T.Select(v_r_b % T.int64(6) == T.int64(5) and v_vw % T.int64(4) == T.int64(3), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(5) and v_vw % T.int64(4) == T.int64(2), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(5) and v_vw % T.int64(4) == T.int64(1), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(5) and v_vw % T.int64(4) == T.int64(0), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(4) and v_vw % T.int64(4) == T.int64(3), T.float32(-8), T.Select(v_r_b % T.int64(6) == T.int64(4) and v_vw % T.int64(4) == T.int64(2), T.float32(4), T.Select(v_r_b % T.int64(6) == T.int64(4) and v_vw % T.int64(4) == T.int64(1), T.float32(-2), T.Select(v_r_b % T.int64(6) == T.int64(4) and v_vw % T.int64(4) == T.int64(0), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(3) and v_vw % T.int64(4) == T.int64(3), T.float32(0.125), T.Select(v_r_b % T.int64(6) == T.int64(3) and v_vw % T.int64(4) == T.int64(2), T.float32(0.25), T.Select(v_r_b % T.int64(6) == T.int64(3) and v_vw % T.int64(4) == T.int64(1), T.float32(0.5), T.Select(v_r_b % T.int64(6) == T.int64(3) and v_vw % T.int64(4) == T.int64(0), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(2) and v_vw % T.int64(4) == T.int64(3), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(2) and v_vw % T.int64(4) == T.int64(2), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(2) and v_vw % T.int64(4) == T.int64(1), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(2) and v_vw % T.int64(4) == T.int64(0), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(1) and v_vw % T.int64(4) == T.int64(3), T.float32(-1), T.Select(v_r_b % T.int64(6) == T.int64(1) and v_vw % T.int64(4) == T.int64(2), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(1) and v_vw % T.int64(4) == T.int64(1), T.float32(-1), T.Select(v_r_b % T.int64(6) == T.int64(1) and v_vw % T.int64(4) == T.int64(0), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(0) and v_vw % T.int64(4) == T.int64(3), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(0) and v_vw % T.int64(4) == T.int64(2), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(0) and v_vw % T.int64(4) == T.int64(1), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(0) and v_vw % T.int64(4) == T.int64(0), T.float32(1), T.float32(0)))))))))))))))))))))))))
                for h_1, w_1 in T.grid(T.int64(4), T.int64(4)):
                    with T.block("conv2d_winograd"):
                        v_n = T.axis.spatial(T.int64(1), T.int64(0))
                        v_co = T.axis.spatial(T.int64(256), (n_co_h_0_w_0_fused_0 * T.int64(128) + n_co_h_0_w_0_fused_1) // T.int64(196))
                        v_h = T.axis.spatial(T.int64(56), (n_co_h_0_w_0_fused_0 * T.int64(128) + n_co_h_0_w_0_fused_1) % T.int64(196) // T.int64(14) * T.int64(4) + h_1)
                        v_w = T.axis.spatial(T.int64(56), (n_co_h_0_w_0_fused_0 * T.int64(128) + n_co_h_0_w_0_fused_1) % T.int64(14) * T.int64(4) + w_1)
                        T.reads(inverse_local[v_co, v_n * T.int64(196) + v_h // T.int64(4) * T.int64(14) + v_w // T.int64(4), v_h % T.int64(4), v_w % T.int64(4)], p2[v_n, v_co, T.int64(0), T.int64(0)])
                        T.writes(T_relu[v_n, v_co, v_h, v_w])
                        T_relu[v_n, v_co, v_h, v_w] = T.max(inverse_local[v_co, v_n * T.int64(196) + v_h // T.int64(4) * T.int64(14) + v_w // T.int64(4), v_h % T.int64(4), v_w % T.int64(4)] + p2[v_n, v_co, T.int64(0), T.int64(0)], T.float32(0))
b0 = sch.get_block(name="data_pack", func_name="main")
b1 = sch.get_block(name="bgemm", func_name="main")
b2 = sch.get_block(name="inverse", func_name="main")
b3 = sch.get_block(name="conv2d_winograd", func_name="main")
b4 = sch.get_block(name="T_add", func_name="main")
b5 = sch.get_block(name="T_relu", func_name="main")
b6 = sch.get_block(name="root", func_name="main")
b7, b8 = sch.get_producers(block=b2)
sch.compute_inline(block=b8)
b9, = sch.get_consumers(block=b2)
l10, l11, l12, l13 = sch.get_loops(block=b9)
l14, l15 = sch.split(loop=l12, factors=[None, 4], preserve_unit_iters=True)
l16, l17 = sch.split(loop=l13, factors=[None, 4], preserve_unit_iters=True)
sch.reorder(l14, l16, l15, l17)
sch.compute_at(block=b2, loop=l16, preserve_unit_loops=True, index=-1)
sch.set_scope(block=b2, buffer_index=0, storage_scope="local")
l18, l19, l20, l21, l22, l23, l24, l25, l26, l27 = sch.get_loops(block=b2)
sch.unroll(loop=l24)
sch.unroll(loop=l25)
sch.unroll(loop=l26)
sch.unroll(loop=l27)
b28, b29 = sch.get_producers(block=b0)
sch.compute_inline(block=b29)
b30, = sch.get_producers(block=b28)
l31, l32, l33, l34, l35, l36 = sch.get_loops(block=b0)
sch.reorder(l33, l34, l31, l32, l35, l36)
sch.unroll(loop=l31)
sch.unroll(loop=l32)
sch.unroll(loop=l35)
sch.unroll(loop=l36)
l37 = sch.fuse(l33, l34, preserve_unit_iters=True)
v38 = sch.sample_categorical(candidates=[32, 64, 128, 256, 512, 1024], probs=[0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666], decision=5)
l39, l40 = sch.split(loop=l37, factors=[None, v38], preserve_unit_iters=True)
sch.bind(loop=l39, thread_axis="blockIdx.x")
sch.bind(loop=l40, thread_axis="threadIdx.x")
b41 = sch.cache_write(block=b0, write_buffer_index=0, storage_scope="local")
sch.reverse_compute_at(block=b41, loop=l40, preserve_unit_loops=True, index=-1)
sch.compute_at(block=b28, loop=l40, preserve_unit_loops=True, index=-1)
sch.set_scope(block=b28, buffer_index=0, storage_scope="local")
sch.compute_inline(block=b30)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSSRRSRS")
l42, l43, l44, l45, l46 = sch.get_loops(block=b1)
v47, v48, v49, v50, v51 = sch.sample_perfect_tile(loop=l42, n=5, max_innermost_factor=64, decision=[3, 1, 1, 1, 2])
l52, l53, l54, l55, l56 = sch.split(loop=l42, factors=[v47, v48, v49, v50, v51], preserve_unit_iters=True)
v57, v58, v59, v60, v61 = sch.sample_perfect_tile(loop=l43, n=5, max_innermost_factor=64, decision=[3, 1, 2, 1, 1])
l62, l63, l64, l65, l66 = sch.split(loop=l43, factors=[v57, v58, v59, v60, v61], preserve_unit_iters=True)
v67, v68, v69, v70, v71 = sch.sample_perfect_tile(loop=l44, n=5, max_innermost_factor=64, decision=[2, 16, 8, 1, 1])
l72, l73, l74, l75, l76 = sch.split(loop=l44, factors=[v67, v68, v69, v70, v71], preserve_unit_iters=True)
v77, v78, v79, v80, v81 = sch.sample_perfect_tile(loop=l45, n=5, max_innermost_factor=64, decision=[1, 14, 2, 7, 1])
l82, l83, l84, l85, l86 = sch.split(loop=l45, factors=[v77, v78, v79, v80, v81], preserve_unit_iters=True)
v87, v88, v89 = sch.sample_perfect_tile(loop=l46, n=3, max_innermost_factor=64, decision=[256, 1, 1])
l90, l91, l92 = sch.split(loop=l46, factors=[v87, v88, v89], preserve_unit_iters=True)
sch.reorder(l52, l62, l72, l82, l53, l63, l73, l83, l54, l64, l74, l84, l90, l91, l55, l65, l75, l85, l92, l56, l66, l76, l86)
l93 = sch.fuse(l52, l62, l72, l82, preserve_unit_iters=True)
sch.bind(loop=l93, thread_axis="blockIdx.x")
l94 = sch.fuse(l53, l63, l73, l83, preserve_unit_iters=True)
sch.bind(loop=l94, thread_axis="vthread.x")
l95 = sch.fuse(l54, l64, l74, l84, preserve_unit_iters=True)
sch.bind(loop=l95, thread_axis="threadIdx.x")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_low_inclusive", ann_val=32)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_high_inclusive", ann_val=1024)
b96 = sch.cache_write(block=b1, write_buffer_index=0, storage_scope="local")
sch.reverse_compute_at(block=b96, loop=l95, preserve_unit_loops=True, index=-1)
b97 = sch.cache_read(block=b1, read_buffer_index=0, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b97, loop=l90, preserve_unit_loops=True, index=-1)
l98, l99, l100, l101, l102, l103, l104, l105 = sch.get_loops(block=b97)
l106 = sch.fuse(l102, l103, l104, l105, preserve_unit_iters=True)
v107 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b97, ann_key="meta_schedule.cooperative_fetch", ann_val=v107)
b108 = sch.cache_read(block=b1, read_buffer_index=1, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b108, loop=l90, preserve_unit_loops=True, index=-1)
l109, l110, l111, l112, l113, l114, l115, l116 = sch.get_loops(block=b108)
l117 = sch.fuse(l113, l114, l115, l116, preserve_unit_iters=True)
v118 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=1)
sch.annotate(block_or_loop=b108, ann_key="meta_schedule.cooperative_fetch", ann_val=v118)
l119 = sch.fuse(l90, preserve_unit_iters=True)
sch.annotate(block_or_loop=l119, ann_key="software_pipeline_stage", ann_val=[0, 0, 3])
sch.annotate(block_or_loop=l119, ann_key="software_pipeline_order", ann_val=[0, 1, 2])
sch.annotate(block_or_loop=l119, ann_key="software_pipeline_async_stages", ann_val=[0])
sch.reverse_compute_inline(block=b5)
sch.reverse_compute_inline(block=b4)
v120 = sch.sample_categorical(candidates=[0, 16, 64, 512, 1024], probs=[0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001], decision=4)
sch.annotate(block_or_loop=b6, ann_key="meta_schedule.unroll_explicit", ann_val=v120)
l121, l122, l123, l124, l125, l126 = sch.get_loops(block=b3)
l127 = sch.fuse(l121, l122, l123, l124, preserve_unit_iters=True)
v128 = sch.sample_categorical(candidates=[32, 64, 128, 256, 512, 1024], probs=[0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666], decision=2)
l129, l130 = sch.split(loop=l127, factors=[None, v128], preserve_unit_iters=True)
sch.bind(loop=l129, thread_axis="blockIdx.x")
sch.bind(loop=l130, thread_axis="threadIdx.x")
sch.enter_postproc()
sch.unannotate(block_or_loop=b97, ann_key="meta_schedule.cooperative_fetch")
l131, l132, l133, l134, l135 = sch.get_loops(block=b97)
l136, l137, l138 = sch.split(loop=l135, factors=[None, 32, 4], preserve_unit_iters=True)
sch.vectorize(loop=l138)
sch.bind(loop=l137, thread_axis="threadIdx.x")
sch.unannotate(block_or_loop=b108, ann_key="meta_schedule.cooperative_fetch")
l139, l140, l141, l142, l143 = sch.get_loops(block=b108)
l144, l145, l146 = sch.split(loop=l143, factors=[None, 32, 2], preserve_unit_iters=True)
sch.vectorize(loop=l146)
sch.bind(loop=l145, thread_axis="threadIdx.x")
b147 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b147, ann_key="meta_schedule.unroll_explicit")
b148, b149, b150, b151, b152, b153, b154, b155, b156 = sch.get_child_blocks(b147)
l157, l158, l159, l160, l161, l162 = sch.get_loops(block=b148)
l163, l164, l165, l166, l167, l168 = sch.get_loops(block=b149)
sch.annotate(block_or_loop=l163, ann_key="pragma_auto_unroll_max_step", ann_val=1024)
sch.annotate(block_or_loop=l163, ann_key="pragma_unroll_explicit", ann_val=1)
l169, l170, l171, l172, l173, l174 = sch.get_loops(block=b150)
l175, l176, l177, l178, l179, l180, l181 = sch.get_loops(block=b151)
l182, l183, l184, l185, l186, l187, l188 = sch.get_loops(block=b152)
l189, l190, l191, l192, l193, l194, l195, l196, l197, l198, l199, l200, l201, l202 = sch.get_loops(block=b153)
sch.annotate(block_or_loop=l189, ann_key="pragma_auto_unroll_max_step", ann_val=1024)
sch.annotate(block_or_loop=l189, ann_key="pragma_unroll_explicit", ann_val=1)
l203, l204, l205, l206, l207, l208, l209 = sch.get_loops(block=b154)
l210, l211, l212, l213, l214, l215, l216, l217 = sch.get_loops(block=b155)
sch.annotate(block_or_loop=l210, ann_key="pragma_auto_unroll_max_step", ann_val=1024)
sch.annotate(block_or_loop=l210, ann_key="pragma_unroll_explicit", ann_val=1)
l218, l219, l220, l221 = sch.get_loops(block=b156)
b222 = sch.get_block(name="data_pack", func_name="main")
l223, l224, l225, l226, l227, l228 = sch.get_loops(block=b222)
b229 = sch.decompose_reduction(block=b222, loop=l227)
b230 = sch.get_block(name="bgemm", func_name="main")
l231, l232, l233, l234, l235, l236, l237, l238, l239, l240, l241, l242, l243, l244 = sch.get_loops(block=b230)
b245 = sch.decompose_reduction(block=b230, loop=l234)
b246 = sch.get_block(name="inverse", func_name="main")
l247, l248, l249, l250, l251, l252, l253, l254 = sch.get_loops(block=b246)
b255 = sch.decompose_reduction(block=b246, loop=l253)
2024-04-29 00:33:49 [INFO] [task_scheduler.cc:121] [Task #5: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #705: Error in building:
LocalBuilder: Timeout, killed after 30.0 seconds
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(256), T.int64(56), T.int64(56)), "float32"), p1: T.Buffer((T.int64(6), T.int64(6), T.int64(256), T.int64(256)), "float32"), p2: T.Buffer((T.int64(1), T.int64(256), T.int64(1), T.int64(1)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(256), T.int64(56), T.int64(56)), "float32")):
        T.func_attr({"layout_free_buffers": [1], "tir.noalias": T.bool(True)})
        # with T.block("root"):
        input_tile_local = T.alloc_buffer((T.int64(256), T.int64(196), T.int64(6), T.int64(6)), scope="local")
        data_pack = T.alloc_buffer((T.int64(6), T.int64(6), T.int64(256), T.int64(196)))
        bgemm = T.alloc_buffer((T.int64(6), T.int64(6), T.int64(256), T.int64(196)))
        inverse_local = T.alloc_buffer((T.int64(256), T.int64(196), T.int64(4), T.int64(4)), scope="local")
        data_pack_local = T.alloc_buffer((T.int64(6), T.int64(6), T.int64(256), T.int64(196)), scope="local")
        bgemm_local = T.alloc_buffer((T.int64(6), T.int64(6), T.int64(256), T.int64(196)), scope="local")
        data_pack_shared = T.alloc_buffer((T.int64(6), T.int64(6), T.int64(256), T.int64(196)), scope="shared")
        p1_shared = T.alloc_buffer((T.int64(6), T.int64(6), T.int64(256), T.int64(256)), scope="shared")
        for ci_p_fused_0 in T.thread_binding(T.int64(49), thread="blockIdx.x", annotations={"pragma_auto_unroll_max_step": 1024, "pragma_unroll_explicit": 1}):
            for ci_p_fused_1 in T.thread_binding(T.int64(1024), thread="threadIdx.x"):
                for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(1), T.int64(6), T.int64(6)):
                    with T.block("input_tile"):
                        v_ci = T.axis.spatial(T.int64(256), (ci_p_fused_0 * T.int64(1024) + ci_p_fused_1) // T.int64(196) + ax0)
                        v_p = T.axis.spatial(T.int64(196), (ci_p_fused_0 * T.int64(44) + ci_p_fused_1) % T.int64(196) + ax1)
                        v_eps, v_nu = T.axis.remap("SS", [ax2, ax3])
                        T.reads(p0[v_p // T.int64(196), v_ci, v_p % T.int64(196) // T.int64(14) * T.int64(4) + v_eps - T.int64(1), v_p % T.int64(14) * T.int64(4) + v_nu - T.int64(1)])
                        T.writes(input_tile_local[v_ci, v_p, v_eps, v_nu])
                        T.block_attr({"schedule_rule": "None"})
                        input_tile_local[v_ci, v_p, v_eps, v_nu] = T.if_then_else(T.int64(1) <= v_p % T.int64(196) // T.int64(14) * T.int64(4) + v_eps and v_p % T.int64(196) // T.int64(14) * T.int64(4) + v_eps < T.int64(57) and T.int64(1) <= v_p % T.int64(14) * T.int64(4) + v_nu and v_p % T.int64(14) * T.int64(4) + v_nu < T.int64(57), p0[v_p // T.int64(196), v_ci, v_p % T.int64(196) // T.int64(14) * T.int64(4) + v_eps - T.int64(1), v_p % T.int64(14) * T.int64(4) + v_nu - T.int64(1)], T.float32(0))
                for eps in T.unroll(T.int64(6)):
                    for nu in T.unroll(T.int64(6)):
                        with T.block("data_pack_init"):
                            v_eps, v_nu = T.axis.remap("SS", [eps, nu])
                            v_ci = T.axis.spatial(T.int64(256), (ci_p_fused_0 * T.int64(1024) + ci_p_fused_1) // T.int64(196))
                            v_p = T.axis.spatial(T.int64(196), (ci_p_fused_0 * T.int64(1024) + ci_p_fused_1) % T.int64(196))
                            T.reads()
                            T.writes(data_pack_local[v_eps, v_nu, v_ci, v_p])
                            T.block_attr({"schedule_rule": "conv2d_nchw_winograd_data_pack"})
                            data_pack_local[v_eps, v_nu, v_ci, v_p] = T.float32(0)
                        for r_a in T.unroll(T.int64(6)):
                            for r_b in T.unroll(T.int64(6)):
                                with T.block("data_pack_update"):
                                    v_eps, v_nu = T.axis.remap("SS", [eps, nu])
                                    v_ci = T.axis.spatial(T.int64(256), (ci_p_fused_0 * T.int64(1024) + ci_p_fused_1) // T.int64(196))
                                    v_p = T.axis.spatial(T.int64(196), (ci_p_fused_0 * T.int64(1024) + ci_p_fused_1) % T.int64(196))
                                    v_r_a, v_r_b = T.axis.remap("RR", [r_a, r_b])
                                    T.reads(data_pack_local[v_eps, v_nu, v_ci, v_p], input_tile_local[v_ci, v_p, v_r_a, v_r_b])
                                    T.writes(data_pack_local[v_eps, v_nu, v_ci, v_p])
                                    T.block_attr({"schedule_rule": "conv2d_nchw_winograd_data_pack"})
                                    data_pack_local[v_eps, v_nu, v_ci, v_p] = data_pack_local[v_eps, v_nu, v_ci, v_p] + input_tile_local[v_ci, v_p, v_r_a, v_r_b] * T.Select(v_r_a % T.int64(6) == T.int64(5) and v_eps % T.int64(6) == T.int64(5), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(5) and v_eps % T.int64(6) == T.int64(4), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(5) and v_eps % T.int64(6) == T.int64(3), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(5) and v_eps % T.int64(6) == T.int64(2), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(5) and v_eps % T.int64(6) == T.int64(1), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(5) and v_eps % T.int64(6) == T.int64(0), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(4) and v_eps % T.int64(6) == T.int64(5), T.float32(1.5), T.Select(v_r_a % T.int64(6) == T.int64(4) and v_eps % T.int64(6) == T.int64(4), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(4) and v_eps % T.int64(6) == T.int64(3), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(4) and v_eps % T.int64(6) == T.int64(2), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(4) and v_eps % T.int64(6) == T.int64(1), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(4) and v_eps % T.int64(6) == T.int64(0), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(3) and v_eps % T.int64(6) == T.int64(5), T.float32(-2), T.Select(v_r_a % T.int64(6) == T.int64(3) and v_eps % T.int64(6) == T.int64(4), T.float32(-0.5), T.Select(v_r_a % T.int64(6) == T.int64(3) and v_eps % T.int64(6) == T.int64(3), T.float32(2), T.Select(v_r_a % T.int64(6) == T.int64(3) and v_eps % T.int64(6) == T.int64(2), T.float32(2.5), T.Select(v_r_a % T.int64(6) == T.int64(3) and v_eps % T.int64(6) == T.int64(1), T.float32(0.5), T.Select(v_r_a % T.int64(6) == T.int64(3) and v_eps % T.int64(6) == T.int64(0), T.float32(1.5), T.Select(v_r_a % T.int64(6) == T.int64(2) and v_eps % T.int64(6) == T.int64(5), T.float32(-1.5), T.Select(v_r_a % T.int64(6) == T.int64(2) and v_eps % T.int64(6) == T.int64(4), T.float32(-1), T.Select(v_r_a % T.int64(6) == T.int64(2) and v_eps % T.int64(6) == T.int64(3), T.float32(-1), T.Select(v_r_a % T.int64(6) == T.int64(2) and v_eps % T.int64(6) == T.int64(2), T.float32(0.5), T.Select(v_r_a % T.int64(6) == T.int64(2) and v_eps % T.int64(6) == T.int64(1), T.float32(-2.5), T.Select(v_r_a % T.int64(6) == T.int64(2) and v_eps % T.int64(6) == T.int64(0), T.float32(-2), T.Select(v_r_a % T.int64(6) == T.int64(1) and v_eps % T.int64(6) == T.int64(5), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(1) and v_eps % T.int64(6) == T.int64(4), T.float32(0.5), T.Select(v_r_a % T.int64(6) == T.int64(1) and v_eps % T.int64(6) == T.int64(3), T.float32(-2), T.Select(v_r_a % T.int64(6) == T.int64(1) and v_eps % T.int64(6) == T.int64(2), T.float32(-1), T.Select(v_r_a % T.int64(6) == T.int64(1) and v_eps % T.int64(6) == T.int64(1), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(1) and v_eps % T.int64(6) == T.int64(0), T.float32(-1.5), T.Select(v_r_a % T.int64(6) == T.int64(0) and v_eps % T.int64(6) == T.int64(5), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(0) and v_eps % T.int64(6) == T.int64(4), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(0) and v_eps % T.int64(6) == T.int64(3), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(0) and v_eps % T.int64(6) == T.int64(2), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(0) and v_eps % T.int64(6) == T.int64(1), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(0) and v_eps % T.int64(6) == T.int64(0), T.float32(1), T.float32(0))))))))))))))))))))))))))))))))))))) * T.Select(v_r_b % T.int64(6) == T.int64(5) and v_nu % T.int64(6) == T.int64(5), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(5) and v_nu % T.int64(6) == T.int64(4), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(5) and v_nu % T.int64(6) == T.int64(3), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(5) and v_nu % T.int64(6) == T.int64(2), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(5) and v_nu % T.int64(6) == T.int64(1), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(5) and v_nu % T.int64(6) == T.int64(0), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(4) and v_nu % T.int64(6) == T.int64(5), T.float32(1.5), T.Select(v_r_b % T.int64(6) == T.int64(4) and v_nu % T.int64(6) == T.int64(4), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(4) and v_nu % T.int64(6) == T.int64(3), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(4) and v_nu % T.int64(6) == T.int64(2), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(4) and v_nu % T.int64(6) == T.int64(1), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(4) and v_nu % T.int64(6) == T.int64(0), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(3) and v_nu % T.int64(6) == T.int64(5), T.float32(-2), T.Select(v_r_b % T.int64(6) == T.int64(3) and v_nu % T.int64(6) == T.int64(4), T.float32(-0.5), T.Select(v_r_b % T.int64(6) == T.int64(3) and v_nu % T.int64(6) == T.int64(3), T.float32(2), T.Select(v_r_b % T.int64(6) == T.int64(3) and v_nu % T.int64(6) == T.int64(2), T.float32(2.5), T.Select(v_r_b % T.int64(6) == T.int64(3) and v_nu % T.int64(6) == T.int64(1), T.float32(0.5), T.Select(v_r_b % T.int64(6) == T.int64(3) and v_nu % T.int64(6) == T.int64(0), T.float32(1.5), T.Select(v_r_b % T.int64(6) == T.int64(2) and v_nu % T.int64(6) == T.int64(5), T.float32(-1.5), T.Select(v_r_b % T.int64(6) == T.int64(2) and v_nu % T.int64(6) == T.int64(4), T.float32(-1), T.Select(v_r_b % T.int64(6) == T.int64(2) and v_nu % T.int64(6) == T.int64(3), T.float32(-1), T.Select(v_r_b % T.int64(6) == T.int64(2) and v_nu % T.int64(6) == T.int64(2), T.float32(0.5), T.Select(v_r_b % T.int64(6) == T.int64(2) and v_nu % T.int64(6) == T.int64(1), T.float32(-2.5), T.Select(v_r_b % T.int64(6) == T.int64(2) and v_nu % T.int64(6) == T.int64(0), T.float32(-2), T.Select(v_r_b % T.int64(6) == T.int64(1) and v_nu % T.int64(6) == T.int64(5), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(1) and v_nu % T.int64(6) == T.int64(4), T.float32(0.5), T.Select(v_r_b % T.int64(6) == T.int64(1) and v_nu % T.int64(6) == T.int64(3), T.float32(-2), T.Select(v_r_b % T.int64(6) == T.int64(1) and v_nu % T.int64(6) == T.int64(2), T.float32(-1), T.Select(v_r_b % T.int64(6) == T.int64(1) and v_nu % T.int64(6) == T.int64(1), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(1) and v_nu % T.int64(6) == T.int64(0), T.float32(-1.5), T.Select(v_r_b % T.int64(6) == T.int64(0) and v_nu % T.int64(6) == T.int64(5), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(0) and v_nu % T.int64(6) == T.int64(4), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(0) and v_nu % T.int64(6) == T.int64(3), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(0) and v_nu % T.int64(6) == T.int64(2), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(0) and v_nu % T.int64(6) == T.int64(1), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(0) and v_nu % T.int64(6) == T.int64(0), T.float32(1), T.float32(0)))))))))))))))))))))))))))))))))))))
                for ax0, ax1, ax2, ax3 in T.grid(T.int64(6), T.int64(6), T.int64(1), T.int64(1)):
                    with T.block("data_pack_local"):
                        v0, v1 = T.axis.remap("SS", [ax0, ax1])
                        v2 = T.axis.spatial(T.int64(256), (ci_p_fused_0 * T.int64(1024) + ci_p_fused_1) // T.int64(196) + ax2)
                        v3 = T.axis.spatial(T.int64(196), (ci_p_fused_0 * T.int64(44) + ci_p_fused_1) % T.int64(196) + ax3)
                        T.reads(data_pack_local[v0, v1, v2, v3])
                        T.writes(data_pack[v0, v1, v2, v3])
                        data_pack[v0, v1, v2, v3] = data_pack_local[v0, v1, v2, v3]
        for eps_0_nu_0_co_0_p_0_fused in T.thread_binding(T.int64(18), thread="blockIdx.x", annotations={"pragma_auto_unroll_max_step": 1024, "pragma_unroll_explicit": 1}):
            for eps_1_nu_1_co_1_p_1_fused in T.thread_binding(T.int64(224), thread="vthread.x"):
                for eps_2_nu_2_co_2_p_2_fused in T.thread_binding(T.int64(32), thread="threadIdx.x"):
                    for eps_3_init, nu_3_init, co_3_init, p_3_init, eps_4_init, nu_4_init, co_4_init, p_4_init in T.grid(T.int64(1), T.int64(1), T.int64(1), T.int64(7), T.int64(2), T.int64(1), T.int64(1), T.int64(1)):
                        with T.block("bgemm_init"):
                            v_eps = T.axis.spatial(T.int64(6), eps_0_nu_0_co_0_p_0_fused // T.int64(6) * T.int64(2) + eps_3_init * T.int64(2) + eps_4_init)
                            v_nu = T.axis.spatial(T.int64(6), eps_0_nu_0_co_0_p_0_fused % T.int64(6) // T.int64(2) * T.int64(2) + eps_2_nu_2_co_2_p_2_fused // T.int64(16) + nu_3_init + nu_4_init)
                            v_co = T.axis.spatial(T.int64(256), eps_0_nu_0_co_0_p_0_fused % T.int64(2) * T.int64(128) + eps_1_nu_1_co_1_p_1_fused // T.int64(14) * T.int64(8) + eps_2_nu_2_co_2_p_2_fused % T.int64(16) // T.int64(2) + co_3_init + co_4_init)
                            v_p = T.axis.spatial(T.int64(196), eps_1_nu_1_co_1_p_1_fused % T.int64(14) * T.int64(14) + eps_2_nu_2_co_2_p_2_fused % T.int64(2) * T.int64(7) + p_3_init + p_4_init)
                            T.reads()
                            T.writes(bgemm_local[v_eps, v_nu, v_co, v_p])
                            T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 32, "meta_schedule.tiling_structure": "SSSRRSRS"})
                            bgemm_local[v_eps, v_nu, v_co, v_p] = T.float32(0)
                    for ci_0_fused in T.serial(T.int64(256), annotations={"software_pipeline_async_stages": [0], "software_pipeline_order": [0, 1, 2], "software_pipeline_stage": [0, 0, 3]}):
                        for ax0_ax1_ax2_ax3_fused_0 in range(T.int64(25)):
                            for ax0_ax1_ax2_ax3_fused_1 in T.thread_binding(T.int64(32), thread="threadIdx.x"):
                                with T.block("data_pack_shared"):
                                    v0 = T.axis.spatial(T.int64(6), eps_0_nu_0_co_0_p_0_fused // T.int64(6) * T.int64(2) + (ax0_ax1_ax2_ax3_fused_0 * T.int64(32) + ax0_ax1_ax2_ax3_fused_1) // T.int64(392))
                                    v1 = T.axis.spatial(T.int64(6), eps_0_nu_0_co_0_p_0_fused % T.int64(6) // T.int64(2) * T.int64(2) + (ax0_ax1_ax2_ax3_fused_0 * T.int64(32) + ax0_ax1_ax2_ax3_fused_1) % T.int64(392) // T.int64(196))
                                    v2 = T.axis.spatial(T.int64(256), ci_0_fused)
                                    v3 = T.axis.spatial(T.int64(196), (ax0_ax1_ax2_ax3_fused_0 * T.int64(32) + ax0_ax1_ax2_ax3_fused_1) % T.int64(196))
                                    T.where(ax0_ax1_ax2_ax3_fused_0 * T.int64(32) + ax0_ax1_ax2_ax3_fused_1 < T.int64(784))
                                    T.reads(data_pack[v0, v1, v2, v3])
                                    T.writes(data_pack_shared[v0, v1, v2, v3])
                                    data_pack_shared[v0, v1, v2, v3] = data_pack[v0, v1, v2, v3]
                        for ax0_ax1_ax2_ax3_fused_0 in range(T.int64(8)):
                            for ax0_ax1_ax2_ax3_fused_1 in T.thread_binding(T.int64(32), thread="threadIdx.x"):
                                for ax0_ax1_ax2_ax3_fused_2 in T.vectorized(T.int64(2)):
                                    with T.block("p1_shared"):
                                        v0 = T.axis.spatial(T.int64(6), eps_0_nu_0_co_0_p_0_fused // T.int64(6) * T.int64(2) + (ax0_ax1_ax2_ax3_fused_0 * T.int64(64) + ax0_ax1_ax2_ax3_fused_1 * T.int64(2) + ax0_ax1_ax2_ax3_fused_2) // T.int64(256))
                                        v1 = T.axis.spatial(T.int64(6), eps_0_nu_0_co_0_p_0_fused % T.int64(6) // T.int64(2) * T.int64(2) + (ax0_ax1_ax2_ax3_fused_0 * T.int64(64) + ax0_ax1_ax2_ax3_fused_1 * T.int64(2) + ax0_ax1_ax2_ax3_fused_2) % T.int64(256) // T.int64(128))
                                        v2 = T.axis.spatial(T.int64(256), ci_0_fused)
                                        v3 = T.axis.spatial(T.int64(256), eps_0_nu_0_co_0_p_0_fused % T.int64(2) * T.int64(128) + (ax0_ax1_ax2_ax3_fused_0 * T.int64(64) + ax0_ax1_ax2_ax3_fused_1 * T.int64(2) + ax0_ax1_ax2_ax3_fused_2) % T.int64(128))
                                        T.reads(p1[v0, v1, v2, v3])
                                        T.writes(p1_shared[v0, v1, v2, v3])
                                        p1_shared[v0, v1, v2, v3] = p1[v0, v1, v2, v3]
                        for ci_1, eps_3, nu_3, co_3, p_3, ci_2, eps_4, nu_4, co_4, p_4 in T.grid(T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(7), T.int64(1), T.int64(2), T.int64(1), T.int64(1), T.int64(1)):
                            with T.block("bgemm_update"):
                                v_eps = T.axis.spatial(T.int64(6), eps_0_nu_0_co_0_p_0_fused // T.int64(6) * T.int64(2) + eps_3 * T.int64(2) + eps_4)
                                v_nu = T.axis.spatial(T.int64(6), eps_0_nu_0_co_0_p_0_fused % T.int64(6) // T.int64(2) * T.int64(2) + eps_2_nu_2_co_2_p_2_fused // T.int64(16) + nu_3 + nu_4)
                                v_co = T.axis.spatial(T.int64(256), eps_0_nu_0_co_0_p_0_fused % T.int64(2) * T.int64(128) + eps_1_nu_1_co_1_p_1_fused // T.int64(14) * T.int64(8) + eps_2_nu_2_co_2_p_2_fused % T.int64(16) // T.int64(2) + co_3 + co_4)
                                v_p = T.axis.spatial(T.int64(196), eps_1_nu_1_co_1_p_1_fused % T.int64(14) * T.int64(14) + eps_2_nu_2_co_2_p_2_fused % T.int64(2) * T.int64(7) + p_3 + p_4)
                                v_ci = T.axis.reduce(T.int64(256), ci_0_fused + ci_1 + ci_2)
                                T.reads(bgemm_local[v_eps, v_nu, v_co, v_p], data_pack_shared[v_eps, v_nu, v_ci, v_p], p1_shared[v_eps, v_nu, v_ci, v_co])
                                T.writes(bgemm_local[v_eps, v_nu, v_co, v_p])
                                T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 32, "meta_schedule.tiling_structure": "SSSRRSRS"})
                                bgemm_local[v_eps, v_nu, v_co, v_p] = bgemm_local[v_eps, v_nu, v_co, v_p] + data_pack_shared[v_eps, v_nu, v_ci, v_p] * p1_shared[v_eps, v_nu, v_ci, v_co]
                    for ax0, ax1, ax2, ax3 in T.grid(T.int64(2), T.int64(1), T.int64(1), T.int64(7)):
                        with T.block("bgemm_local"):
                            v0 = T.axis.spatial(T.int64(6), eps_0_nu_0_co_0_p_0_fused // T.int64(6) * T.int64(2) + ax0)
                            v1 = T.axis.spatial(T.int64(6), eps_0_nu_0_co_0_p_0_fused % T.int64(6) // T.int64(2) * T.int64(2) + eps_2_nu_2_co_2_p_2_fused // T.int64(16) + ax1)
                            v2 = T.axis.spatial(T.int64(256), eps_0_nu_0_co_0_p_0_fused % T.int64(2) * T.int64(128) + eps_1_nu_1_co_1_p_1_fused // T.int64(14) * T.int64(8) + eps_2_nu_2_co_2_p_2_fused % T.int64(16) // T.int64(2) + ax2)
                            v3 = T.axis.spatial(T.int64(196), eps_1_nu_1_co_1_p_1_fused % T.int64(14) * T.int64(14) + eps_2_nu_2_co_2_p_2_fused % T.int64(2) * T.int64(7) + ax3)
                            T.reads(bgemm_local[v0, v1, v2, v3])
                            T.writes(bgemm[v0, v1, v2, v3])
                            bgemm[v0, v1, v2, v3] = bgemm_local[v0, v1, v2, v3]
        for n_co_h_0_w_0_fused_0 in T.thread_binding(T.int64(392), thread="blockIdx.x", annotations={"pragma_auto_unroll_max_step": 1024, "pragma_unroll_explicit": 1}):
            for n_co_h_0_w_0_fused_1 in T.thread_binding(T.int64(128), thread="threadIdx.x"):
                for ax0, ax1 in T.grid(T.int64(1), T.int64(1)):
                    for ax2 in T.unroll(T.int64(4)):
                        for ax3 in T.unroll(T.int64(4)):
                            with T.block("inverse_init"):
                                v_co = T.axis.spatial(T.int64(256), (n_co_h_0_w_0_fused_0 * T.int64(128) + n_co_h_0_w_0_fused_1) // T.int64(196) + ax0)
                                v_p = T.axis.spatial(T.int64(196), (n_co_h_0_w_0_fused_0 * T.int64(128) + n_co_h_0_w_0_fused_1) % T.int64(196) + ax1)
                                v_vh, v_vw = T.axis.remap("SS", [ax2, ax3])
                                T.reads()
                                T.writes(inverse_local[v_co, v_p, v_vh, v_vw])
                                T.block_attr({"schedule_rule": "conv2d_nchw_winograd_inverse"})
                                inverse_local[v_co, v_p, v_vh, v_vw] = T.float32(0)
                            for ax4 in T.unroll(T.int64(6)):
                                for ax5 in T.unroll(T.int64(6)):
                                    with T.block("inverse_update"):
                                        v_co = T.axis.spatial(T.int64(256), (n_co_h_0_w_0_fused_0 * T.int64(128) + n_co_h_0_w_0_fused_1) // T.int64(196) + ax0)
                                        v_p = T.axis.spatial(T.int64(196), (n_co_h_0_w_0_fused_0 * T.int64(128) + n_co_h_0_w_0_fused_1) % T.int64(196) + ax1)
                                        v_vh, v_vw, v_r_a, v_r_b = T.axis.remap("SSRR", [ax2, ax3, ax4, ax5])
                                        T.reads(inverse_local[v_co, v_p, v_vh, v_vw], bgemm[v_r_a, v_r_b, v_co, v_p])
                                        T.writes(inverse_local[v_co, v_p, v_vh, v_vw])
                                        T.block_attr({"schedule_rule": "conv2d_nchw_winograd_inverse"})
                                        inverse_local[v_co, v_p, v_vh, v_vw] = inverse_local[v_co, v_p, v_vh, v_vw] + bgemm[v_r_a, v_r_b, v_co, v_p] * T.Select(v_r_a % T.int64(6) == T.int64(5) and v_vh % T.int64(4) == T.int64(3), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(5) and v_vh % T.int64(4) == T.int64(2), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(5) and v_vh % T.int64(4) == T.int64(1), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(5) and v_vh % T.int64(4) == T.int64(0), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(4) and v_vh % T.int64(4) == T.int64(3), T.float32(-8), T.Select(v_r_a % T.int64(6) == T.int64(4) and v_vh % T.int64(4) == T.int64(2), T.float32(4), T.Select(v_r_a % T.int64(6) == T.int64(4) and v_vh % T.int64(4) == T.int64(1), T.float32(-2), T.Select(v_r_a % T.int64(6) == T.int64(4) and v_vh % T.int64(4) == T.int64(0), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(3) and v_vh % T.int64(4) == T.int64(3), T.float32(0.125), T.Select(v_r_a % T.int64(6) == T.int64(3) and v_vh % T.int64(4) == T.int64(2), T.float32(0.25), T.Select(v_r_a % T.int64(6) == T.int64(3) and v_vh % T.int64(4) == T.int64(1), T.float32(0.5), T.Select(v_r_a % T.int64(6) == T.int64(3) and v_vh % T.int64(4) == T.int64(0), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(2) and v_vh % T.int64(4) == T.int64(3), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(2) and v_vh % T.int64(4) == T.int64(2), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(2) and v_vh % T.int64(4) == T.int64(1), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(2) and v_vh % T.int64(4) == T.int64(0), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(1) and v_vh % T.int64(4) == T.int64(3), T.float32(-1), T.Select(v_r_a % T.int64(6) == T.int64(1) and v_vh % T.int64(4) == T.int64(2), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(1) and v_vh % T.int64(4) == T.int64(1), T.float32(-1), T.Select(v_r_a % T.int64(6) == T.int64(1) and v_vh % T.int64(4) == T.int64(0), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(0) and v_vh % T.int64(4) == T.int64(3), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(0) and v_vh % T.int64(4) == T.int64(2), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(0) and v_vh % T.int64(4) == T.int64(1), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(0) and v_vh % T.int64(4) == T.int64(0), T.float32(1), T.float32(0))))))))))))))))))))))))) * T.Select(v_r_b % T.int64(6) == T.int64(5) and v_vw % T.int64(4) == T.int64(3), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(5) and v_vw % T.int64(4) == T.int64(2), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(5) and v_vw % T.int64(4) == T.int64(1), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(5) and v_vw % T.int64(4) == T.int64(0), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(4) and v_vw % T.int64(4) == T.int64(3), T.float32(-8), T.Select(v_r_b % T.int64(6) == T.int64(4) and v_vw % T.int64(4) == T.int64(2), T.float32(4), T.Select(v_r_b % T.int64(6) == T.int64(4) and v_vw % T.int64(4) == T.int64(1), T.float32(-2), T.Select(v_r_b % T.int64(6) == T.int64(4) and v_vw % T.int64(4) == T.int64(0), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(3) and v_vw % T.int64(4) == T.int64(3), T.float32(0.125), T.Select(v_r_b % T.int64(6) == T.int64(3) and v_vw % T.int64(4) == T.int64(2), T.float32(0.25), T.Select(v_r_b % T.int64(6) == T.int64(3) and v_vw % T.int64(4) == T.int64(1), T.float32(0.5), T.Select(v_r_b % T.int64(6) == T.int64(3) and v_vw % T.int64(4) == T.int64(0), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(2) and v_vw % T.int64(4) == T.int64(3), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(2) and v_vw % T.int64(4) == T.int64(2), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(2) and v_vw % T.int64(4) == T.int64(1), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(2) and v_vw % T.int64(4) == T.int64(0), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(1) and v_vw % T.int64(4) == T.int64(3), T.float32(-1), T.Select(v_r_b % T.int64(6) == T.int64(1) and v_vw % T.int64(4) == T.int64(2), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(1) and v_vw % T.int64(4) == T.int64(1), T.float32(-1), T.Select(v_r_b % T.int64(6) == T.int64(1) and v_vw % T.int64(4) == T.int64(0), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(0) and v_vw % T.int64(4) == T.int64(3), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(0) and v_vw % T.int64(4) == T.int64(2), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(0) and v_vw % T.int64(4) == T.int64(1), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(0) and v_vw % T.int64(4) == T.int64(0), T.float32(1), T.float32(0)))))))))))))))))))))))))
                for h_1, w_1 in T.grid(T.int64(4), T.int64(4)):
                    with T.block("conv2d_winograd"):
                        v_n = T.axis.spatial(T.int64(1), T.int64(0))
                        v_co = T.axis.spatial(T.int64(256), (n_co_h_0_w_0_fused_0 * T.int64(128) + n_co_h_0_w_0_fused_1) // T.int64(196))
                        v_h = T.axis.spatial(T.int64(56), (n_co_h_0_w_0_fused_0 * T.int64(128) + n_co_h_0_w_0_fused_1) % T.int64(196) // T.int64(14) * T.int64(4) + h_1)
                        v_w = T.axis.spatial(T.int64(56), (n_co_h_0_w_0_fused_0 * T.int64(128) + n_co_h_0_w_0_fused_1) % T.int64(14) * T.int64(4) + w_1)
                        T.reads(inverse_local[v_co, v_n * T.int64(196) + v_h // T.int64(4) * T.int64(14) + v_w // T.int64(4), v_h % T.int64(4), v_w % T.int64(4)], p2[v_n, v_co, T.int64(0), T.int64(0)])
                        T.writes(T_relu[v_n, v_co, v_h, v_w])
                        T_relu[v_n, v_co, v_h, v_w] = T.max(inverse_local[v_co, v_n * T.int64(196) + v_h // T.int64(4) * T.int64(14) + v_w // T.int64(4), v_h % T.int64(4), v_w % T.int64(4)] + p2[v_n, v_co, T.int64(0), T.int64(0)], T.float32(0))
b0 = sch.get_block(name="data_pack", func_name="main")
b1 = sch.get_block(name="bgemm", func_name="main")
b2 = sch.get_block(name="inverse", func_name="main")
b3 = sch.get_block(name="conv2d_winograd", func_name="main")
b4 = sch.get_block(name="T_add", func_name="main")
b5 = sch.get_block(name="T_relu", func_name="main")
b6 = sch.get_block(name="root", func_name="main")
b7, b8 = sch.get_producers(block=b2)
sch.compute_inline(block=b8)
b9, = sch.get_consumers(block=b2)
l10, l11, l12, l13 = sch.get_loops(block=b9)
l14, l15 = sch.split(loop=l12, factors=[None, 4], preserve_unit_iters=True)
l16, l17 = sch.split(loop=l13, factors=[None, 4], preserve_unit_iters=True)
sch.reorder(l14, l16, l15, l17)
sch.compute_at(block=b2, loop=l16, preserve_unit_loops=True, index=-1)
sch.set_scope(block=b2, buffer_index=0, storage_scope="local")
l18, l19, l20, l21, l22, l23, l24, l25, l26, l27 = sch.get_loops(block=b2)
sch.unroll(loop=l24)
sch.unroll(loop=l25)
sch.unroll(loop=l26)
sch.unroll(loop=l27)
b28, b29 = sch.get_producers(block=b0)
sch.compute_inline(block=b29)
b30, = sch.get_producers(block=b28)
l31, l32, l33, l34, l35, l36 = sch.get_loops(block=b0)
sch.reorder(l33, l34, l31, l32, l35, l36)
sch.unroll(loop=l31)
sch.unroll(loop=l32)
sch.unroll(loop=l35)
sch.unroll(loop=l36)
l37 = sch.fuse(l33, l34, preserve_unit_iters=True)
v38 = sch.sample_categorical(candidates=[32, 64, 128, 256, 512, 1024], probs=[0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666], decision=5)
l39, l40 = sch.split(loop=l37, factors=[None, v38], preserve_unit_iters=True)
sch.bind(loop=l39, thread_axis="blockIdx.x")
sch.bind(loop=l40, thread_axis="threadIdx.x")
b41 = sch.cache_write(block=b0, write_buffer_index=0, storage_scope="local")
sch.reverse_compute_at(block=b41, loop=l40, preserve_unit_loops=True, index=-1)
sch.compute_at(block=b28, loop=l40, preserve_unit_loops=True, index=-1)
sch.set_scope(block=b28, buffer_index=0, storage_scope="local")
sch.compute_inline(block=b30)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSSRRSRS")
l42, l43, l44, l45, l46 = sch.get_loops(block=b1)
v47, v48, v49, v50, v51 = sch.sample_perfect_tile(loop=l42, n=5, max_innermost_factor=64, decision=[3, 1, 1, 1, 2])
l52, l53, l54, l55, l56 = sch.split(loop=l42, factors=[v47, v48, v49, v50, v51], preserve_unit_iters=True)
v57, v58, v59, v60, v61 = sch.sample_perfect_tile(loop=l43, n=5, max_innermost_factor=64, decision=[3, 1, 2, 1, 1])
l62, l63, l64, l65, l66 = sch.split(loop=l43, factors=[v57, v58, v59, v60, v61], preserve_unit_iters=True)
v67, v68, v69, v70, v71 = sch.sample_perfect_tile(loop=l44, n=5, max_innermost_factor=64, decision=[2, 16, 8, 1, 1])
l72, l73, l74, l75, l76 = sch.split(loop=l44, factors=[v67, v68, v69, v70, v71], preserve_unit_iters=True)
v77, v78, v79, v80, v81 = sch.sample_perfect_tile(loop=l45, n=5, max_innermost_factor=64, decision=[1, 14, 2, 7, 1])
l82, l83, l84, l85, l86 = sch.split(loop=l45, factors=[v77, v78, v79, v80, v81], preserve_unit_iters=True)
v87, v88, v89 = sch.sample_perfect_tile(loop=l46, n=3, max_innermost_factor=64, decision=[256, 1, 1])
l90, l91, l92 = sch.split(loop=l46, factors=[v87, v88, v89], preserve_unit_iters=True)
sch.reorder(l52, l62, l72, l82, l53, l63, l73, l83, l54, l64, l74, l84, l90, l91, l55, l65, l75, l85, l92, l56, l66, l76, l86)
l93 = sch.fuse(l52, l62, l72, l82, preserve_unit_iters=True)
sch.bind(loop=l93, thread_axis="blockIdx.x")
l94 = sch.fuse(l53, l63, l73, l83, preserve_unit_iters=True)
sch.bind(loop=l94, thread_axis="vthread.x")
l95 = sch.fuse(l54, l64, l74, l84, preserve_unit_iters=True)
sch.bind(loop=l95, thread_axis="threadIdx.x")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_low_inclusive", ann_val=32)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_high_inclusive", ann_val=1024)
b96 = sch.cache_write(block=b1, write_buffer_index=0, storage_scope="local")
sch.reverse_compute_at(block=b96, loop=l95, preserve_unit_loops=True, index=-1)
b97 = sch.cache_read(block=b1, read_buffer_index=0, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b97, loop=l90, preserve_unit_loops=True, index=-1)
l98, l99, l100, l101, l102, l103, l104, l105 = sch.get_loops(block=b97)
l106 = sch.fuse(l102, l103, l104, l105, preserve_unit_iters=True)
v107 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=0)
sch.annotate(block_or_loop=b97, ann_key="meta_schedule.cooperative_fetch", ann_val=v107)
b108 = sch.cache_read(block=b1, read_buffer_index=1, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b108, loop=l90, preserve_unit_loops=True, index=-1)
l109, l110, l111, l112, l113, l114, l115, l116 = sch.get_loops(block=b108)
l117 = sch.fuse(l113, l114, l115, l116, preserve_unit_iters=True)
v118 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=1)
sch.annotate(block_or_loop=b108, ann_key="meta_schedule.cooperative_fetch", ann_val=v118)
l119 = sch.fuse(l90, preserve_unit_iters=True)
sch.annotate(block_or_loop=l119, ann_key="software_pipeline_stage", ann_val=[0, 0, 3])
sch.annotate(block_or_loop=l119, ann_key="software_pipeline_order", ann_val=[0, 1, 2])
sch.annotate(block_or_loop=l119, ann_key="software_pipeline_async_stages", ann_val=[0])
sch.reverse_compute_inline(block=b5)
sch.reverse_compute_inline(block=b4)
v120 = sch.sample_categorical(candidates=[0, 16, 64, 512, 1024], probs=[0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001], decision=4)
sch.annotate(block_or_loop=b6, ann_key="meta_schedule.unroll_explicit", ann_val=v120)
l121, l122, l123, l124, l125, l126 = sch.get_loops(block=b3)
l127 = sch.fuse(l121, l122, l123, l124, preserve_unit_iters=True)
v128 = sch.sample_categorical(candidates=[32, 64, 128, 256, 512, 1024], probs=[0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666], decision=2)
l129, l130 = sch.split(loop=l127, factors=[None, v128], preserve_unit_iters=True)
sch.bind(loop=l129, thread_axis="blockIdx.x")
sch.bind(loop=l130, thread_axis="threadIdx.x")
sch.enter_postproc()
sch.unannotate(block_or_loop=b97, ann_key="meta_schedule.cooperative_fetch")
l131, l132, l133, l134, l135 = sch.get_loops(block=b97)
l136, l137 = sch.split(loop=l135, factors=[None, 32], preserve_unit_iters=True)
sch.bind(loop=l137, thread_axis="threadIdx.x")
sch.unannotate(block_or_loop=b108, ann_key="meta_schedule.cooperative_fetch")
l138, l139, l140, l141, l142 = sch.get_loops(block=b108)
l143, l144, l145 = sch.split(loop=l142, factors=[None, 32, 2], preserve_unit_iters=True)
sch.vectorize(loop=l145)
sch.bind(loop=l144, thread_axis="threadIdx.x")
b146 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b146, ann_key="meta_schedule.unroll_explicit")
b147, b148, b149, b150, b151, b152, b153, b154, b155 = sch.get_child_blocks(b146)
l156, l157, l158, l159, l160, l161 = sch.get_loops(block=b147)
l162, l163, l164, l165, l166, l167 = sch.get_loops(block=b148)
sch.annotate(block_or_loop=l162, ann_key="pragma_auto_unroll_max_step", ann_val=1024)
sch.annotate(block_or_loop=l162, ann_key="pragma_unroll_explicit", ann_val=1)
l168, l169, l170, l171, l172, l173 = sch.get_loops(block=b149)
l174, l175, l176, l177, l178, l179 = sch.get_loops(block=b150)
l180, l181, l182, l183, l184, l185, l186 = sch.get_loops(block=b151)
l187, l188, l189, l190, l191, l192, l193, l194, l195, l196, l197, l198, l199, l200 = sch.get_loops(block=b152)
sch.annotate(block_or_loop=l187, ann_key="pragma_auto_unroll_max_step", ann_val=1024)
sch.annotate(block_or_loop=l187, ann_key="pragma_unroll_explicit", ann_val=1)
l201, l202, l203, l204, l205, l206, l207 = sch.get_loops(block=b153)
l208, l209, l210, l211, l212, l213, l214, l215 = sch.get_loops(block=b154)
sch.annotate(block_or_loop=l208, ann_key="pragma_auto_unroll_max_step", ann_val=1024)
sch.annotate(block_or_loop=l208, ann_key="pragma_unroll_explicit", ann_val=1)
l216, l217, l218, l219 = sch.get_loops(block=b155)
b220 = sch.get_block(name="data_pack", func_name="main")
l221, l222, l223, l224, l225, l226 = sch.get_loops(block=b220)
b227 = sch.decompose_reduction(block=b220, loop=l225)
b228 = sch.get_block(name="bgemm", func_name="main")
l229, l230, l231, l232, l233, l234, l235, l236, l237, l238, l239, l240, l241, l242 = sch.get_loops(block=b228)
b243 = sch.decompose_reduction(block=b228, loop=l232)
b244 = sch.get_block(name="inverse", func_name="main")
l245, l246, l247, l248, l249, l250, l251, l252 = sch.get_loops(block=b244)
b253 = sch.decompose_reduction(block=b244, loop=l251)
2024-04-29 00:33:49 [INFO] [task_scheduler.cc:121] [Task #5: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #706: Error in building:
LocalBuilder: Timeout, killed after 30.0 seconds
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(256), T.int64(56), T.int64(56)), "float32"), p1: T.Buffer((T.int64(6), T.int64(6), T.int64(256), T.int64(256)), "float32"), p2: T.Buffer((T.int64(1), T.int64(256), T.int64(1), T.int64(1)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(256), T.int64(56), T.int64(56)), "float32")):
        T.func_attr({"layout_free_buffers": [1], "tir.noalias": T.bool(True)})
        # with T.block("root"):
        input_tile_local = T.alloc_buffer((T.int64(256), T.int64(196), T.int64(6), T.int64(6)), scope="local")
        data_pack = T.alloc_buffer((T.int64(6), T.int64(6), T.int64(256), T.int64(196)))
        bgemm = T.alloc_buffer((T.int64(6), T.int64(6), T.int64(256), T.int64(196)))
        inverse_local = T.alloc_buffer((T.int64(256), T.int64(196), T.int64(4), T.int64(4)), scope="local")
        data_pack_local = T.alloc_buffer((T.int64(6), T.int64(6), T.int64(256), T.int64(196)), scope="local")
        bgemm_local = T.alloc_buffer((T.int64(6), T.int64(6), T.int64(256), T.int64(196)), scope="local")
        data_pack_shared = T.alloc_buffer((T.int64(6), T.int64(6), T.int64(256), T.int64(196)), scope="shared")
        p1_shared = T.alloc_buffer((T.int64(6), T.int64(6), T.int64(256), T.int64(256)), scope="shared")
        for ci_p_fused_0 in T.thread_binding(T.int64(49), thread="blockIdx.x", annotations={"pragma_auto_unroll_max_step": 512, "pragma_unroll_explicit": 1}):
            for ci_p_fused_1 in T.thread_binding(T.int64(1024), thread="threadIdx.x"):
                for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(1), T.int64(6), T.int64(6)):
                    with T.block("input_tile"):
                        v_ci = T.axis.spatial(T.int64(256), (ci_p_fused_0 * T.int64(1024) + ci_p_fused_1) // T.int64(196) + ax0)
                        v_p = T.axis.spatial(T.int64(196), (ci_p_fused_0 * T.int64(44) + ci_p_fused_1) % T.int64(196) + ax1)
                        v_eps, v_nu = T.axis.remap("SS", [ax2, ax3])
                        T.reads(p0[v_p // T.int64(196), v_ci, v_p % T.int64(196) // T.int64(14) * T.int64(4) + v_eps - T.int64(1), v_p % T.int64(14) * T.int64(4) + v_nu - T.int64(1)])
                        T.writes(input_tile_local[v_ci, v_p, v_eps, v_nu])
                        T.block_attr({"schedule_rule": "None"})
                        input_tile_local[v_ci, v_p, v_eps, v_nu] = T.if_then_else(T.int64(1) <= v_p % T.int64(196) // T.int64(14) * T.int64(4) + v_eps and v_p % T.int64(196) // T.int64(14) * T.int64(4) + v_eps < T.int64(57) and T.int64(1) <= v_p % T.int64(14) * T.int64(4) + v_nu and v_p % T.int64(14) * T.int64(4) + v_nu < T.int64(57), p0[v_p // T.int64(196), v_ci, v_p % T.int64(196) // T.int64(14) * T.int64(4) + v_eps - T.int64(1), v_p % T.int64(14) * T.int64(4) + v_nu - T.int64(1)], T.float32(0))
                for eps in T.unroll(T.int64(6)):
                    for nu in T.unroll(T.int64(6)):
                        with T.block("data_pack_init"):
                            v_eps, v_nu = T.axis.remap("SS", [eps, nu])
                            v_ci = T.axis.spatial(T.int64(256), (ci_p_fused_0 * T.int64(1024) + ci_p_fused_1) // T.int64(196))
                            v_p = T.axis.spatial(T.int64(196), (ci_p_fused_0 * T.int64(1024) + ci_p_fused_1) % T.int64(196))
                            T.reads()
                            T.writes(data_pack_local[v_eps, v_nu, v_ci, v_p])
                            T.block_attr({"schedule_rule": "conv2d_nchw_winograd_data_pack"})
                            data_pack_local[v_eps, v_nu, v_ci, v_p] = T.float32(0)
                        for r_a in T.unroll(T.int64(6)):
                            for r_b in T.unroll(T.int64(6)):
                                with T.block("data_pack_update"):
                                    v_eps, v_nu = T.axis.remap("SS", [eps, nu])
                                    v_ci = T.axis.spatial(T.int64(256), (ci_p_fused_0 * T.int64(1024) + ci_p_fused_1) // T.int64(196))
                                    v_p = T.axis.spatial(T.int64(196), (ci_p_fused_0 * T.int64(1024) + ci_p_fused_1) % T.int64(196))
                                    v_r_a, v_r_b = T.axis.remap("RR", [r_a, r_b])
                                    T.reads(data_pack_local[v_eps, v_nu, v_ci, v_p], input_tile_local[v_ci, v_p, v_r_a, v_r_b])
                                    T.writes(data_pack_local[v_eps, v_nu, v_ci, v_p])
                                    T.block_attr({"schedule_rule": "conv2d_nchw_winograd_data_pack"})
                                    data_pack_local[v_eps, v_nu, v_ci, v_p] = data_pack_local[v_eps, v_nu, v_ci, v_p] + input_tile_local[v_ci, v_p, v_r_a, v_r_b] * T.Select(v_r_a % T.int64(6) == T.int64(5) and v_eps % T.int64(6) == T.int64(5), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(5) and v_eps % T.int64(6) == T.int64(4), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(5) and v_eps % T.int64(6) == T.int64(3), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(5) and v_eps % T.int64(6) == T.int64(2), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(5) and v_eps % T.int64(6) == T.int64(1), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(5) and v_eps % T.int64(6) == T.int64(0), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(4) and v_eps % T.int64(6) == T.int64(5), T.float32(1.5), T.Select(v_r_a % T.int64(6) == T.int64(4) and v_eps % T.int64(6) == T.int64(4), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(4) and v_eps % T.int64(6) == T.int64(3), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(4) and v_eps % T.int64(6) == T.int64(2), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(4) and v_eps % T.int64(6) == T.int64(1), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(4) and v_eps % T.int64(6) == T.int64(0), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(3) and v_eps % T.int64(6) == T.int64(5), T.float32(-2), T.Select(v_r_a % T.int64(6) == T.int64(3) and v_eps % T.int64(6) == T.int64(4), T.float32(-0.5), T.Select(v_r_a % T.int64(6) == T.int64(3) and v_eps % T.int64(6) == T.int64(3), T.float32(2), T.Select(v_r_a % T.int64(6) == T.int64(3) and v_eps % T.int64(6) == T.int64(2), T.float32(2.5), T.Select(v_r_a % T.int64(6) == T.int64(3) and v_eps % T.int64(6) == T.int64(1), T.float32(0.5), T.Select(v_r_a % T.int64(6) == T.int64(3) and v_eps % T.int64(6) == T.int64(0), T.float32(1.5), T.Select(v_r_a % T.int64(6) == T.int64(2) and v_eps % T.int64(6) == T.int64(5), T.float32(-1.5), T.Select(v_r_a % T.int64(6) == T.int64(2) and v_eps % T.int64(6) == T.int64(4), T.float32(-1), T.Select(v_r_a % T.int64(6) == T.int64(2) and v_eps % T.int64(6) == T.int64(3), T.float32(-1), T.Select(v_r_a % T.int64(6) == T.int64(2) and v_eps % T.int64(6) == T.int64(2), T.float32(0.5), T.Select(v_r_a % T.int64(6) == T.int64(2) and v_eps % T.int64(6) == T.int64(1), T.float32(-2.5), T.Select(v_r_a % T.int64(6) == T.int64(2) and v_eps % T.int64(6) == T.int64(0), T.float32(-2), T.Select(v_r_a % T.int64(6) == T.int64(1) and v_eps % T.int64(6) == T.int64(5), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(1) and v_eps % T.int64(6) == T.int64(4), T.float32(0.5), T.Select(v_r_a % T.int64(6) == T.int64(1) and v_eps % T.int64(6) == T.int64(3), T.float32(-2), T.Select(v_r_a % T.int64(6) == T.int64(1) and v_eps % T.int64(6) == T.int64(2), T.float32(-1), T.Select(v_r_a % T.int64(6) == T.int64(1) and v_eps % T.int64(6) == T.int64(1), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(1) and v_eps % T.int64(6) == T.int64(0), T.float32(-1.5), T.Select(v_r_a % T.int64(6) == T.int64(0) and v_eps % T.int64(6) == T.int64(5), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(0) and v_eps % T.int64(6) == T.int64(4), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(0) and v_eps % T.int64(6) == T.int64(3), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(0) and v_eps % T.int64(6) == T.int64(2), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(0) and v_eps % T.int64(6) == T.int64(1), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(0) and v_eps % T.int64(6) == T.int64(0), T.float32(1), T.float32(0))))))))))))))))))))))))))))))))))))) * T.Select(v_r_b % T.int64(6) == T.int64(5) and v_nu % T.int64(6) == T.int64(5), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(5) and v_nu % T.int64(6) == T.int64(4), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(5) and v_nu % T.int64(6) == T.int64(3), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(5) and v_nu % T.int64(6) == T.int64(2), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(5) and v_nu % T.int64(6) == T.int64(1), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(5) and v_nu % T.int64(6) == T.int64(0), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(4) and v_nu % T.int64(6) == T.int64(5), T.float32(1.5), T.Select(v_r_b % T.int64(6) == T.int64(4) and v_nu % T.int64(6) == T.int64(4), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(4) and v_nu % T.int64(6) == T.int64(3), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(4) and v_nu % T.int64(6) == T.int64(2), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(4) and v_nu % T.int64(6) == T.int64(1), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(4) and v_nu % T.int64(6) == T.int64(0), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(3) and v_nu % T.int64(6) == T.int64(5), T.float32(-2), T.Select(v_r_b % T.int64(6) == T.int64(3) and v_nu % T.int64(6) == T.int64(4), T.float32(-0.5), T.Select(v_r_b % T.int64(6) == T.int64(3) and v_nu % T.int64(6) == T.int64(3), T.float32(2), T.Select(v_r_b % T.int64(6) == T.int64(3) and v_nu % T.int64(6) == T.int64(2), T.float32(2.5), T.Select(v_r_b % T.int64(6) == T.int64(3) and v_nu % T.int64(6) == T.int64(1), T.float32(0.5), T.Select(v_r_b % T.int64(6) == T.int64(3) and v_nu % T.int64(6) == T.int64(0), T.float32(1.5), T.Select(v_r_b % T.int64(6) == T.int64(2) and v_nu % T.int64(6) == T.int64(5), T.float32(-1.5), T.Select(v_r_b % T.int64(6) == T.int64(2) and v_nu % T.int64(6) == T.int64(4), T.float32(-1), T.Select(v_r_b % T.int64(6) == T.int64(2) and v_nu % T.int64(6) == T.int64(3), T.float32(-1), T.Select(v_r_b % T.int64(6) == T.int64(2) and v_nu % T.int64(6) == T.int64(2), T.float32(0.5), T.Select(v_r_b % T.int64(6) == T.int64(2) and v_nu % T.int64(6) == T.int64(1), T.float32(-2.5), T.Select(v_r_b % T.int64(6) == T.int64(2) and v_nu % T.int64(6) == T.int64(0), T.float32(-2), T.Select(v_r_b % T.int64(6) == T.int64(1) and v_nu % T.int64(6) == T.int64(5), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(1) and v_nu % T.int64(6) == T.int64(4), T.float32(0.5), T.Select(v_r_b % T.int64(6) == T.int64(1) and v_nu % T.int64(6) == T.int64(3), T.float32(-2), T.Select(v_r_b % T.int64(6) == T.int64(1) and v_nu % T.int64(6) == T.int64(2), T.float32(-1), T.Select(v_r_b % T.int64(6) == T.int64(1) and v_nu % T.int64(6) == T.int64(1), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(1) and v_nu % T.int64(6) == T.int64(0), T.float32(-1.5), T.Select(v_r_b % T.int64(6) == T.int64(0) and v_nu % T.int64(6) == T.int64(5), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(0) and v_nu % T.int64(6) == T.int64(4), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(0) and v_nu % T.int64(6) == T.int64(3), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(0) and v_nu % T.int64(6) == T.int64(2), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(0) and v_nu % T.int64(6) == T.int64(1), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(0) and v_nu % T.int64(6) == T.int64(0), T.float32(1), T.float32(0)))))))))))))))))))))))))))))))))))))
                for ax0, ax1, ax2, ax3 in T.grid(T.int64(6), T.int64(6), T.int64(1), T.int64(1)):
                    with T.block("data_pack_local"):
                        v0, v1 = T.axis.remap("SS", [ax0, ax1])
                        v2 = T.axis.spatial(T.int64(256), (ci_p_fused_0 * T.int64(1024) + ci_p_fused_1) // T.int64(196) + ax2)
                        v3 = T.axis.spatial(T.int64(196), (ci_p_fused_0 * T.int64(44) + ci_p_fused_1) % T.int64(196) + ax3)
                        T.reads(data_pack_local[v0, v1, v2, v3])
                        T.writes(data_pack[v0, v1, v2, v3])
                        data_pack[v0, v1, v2, v3] = data_pack_local[v0, v1, v2, v3]
        for eps_0_nu_0_co_0_p_0_fused in T.thread_binding(T.int64(18), thread="blockIdx.x", annotations={"pragma_auto_unroll_max_step": 512, "pragma_unroll_explicit": 1}):
            for eps_1_nu_1_co_1_p_1_fused in T.thread_binding(T.int64(448), thread="vthread.x"):
                for eps_2_nu_2_co_2_p_2_fused in T.thread_binding(T.int64(32), thread="threadIdx.x"):
                    for eps_3_init, nu_3_init, co_3_init, p_3_init, eps_4_init, nu_4_init, co_4_init, p_4_init in T.grid(T.int64(1), T.int64(1), T.int64(1), T.int64(7), T.int64(1), T.int64(1), T.int64(1), T.int64(1)):
                        with T.block("bgemm_init"):
                            v_eps = T.axis.spatial(T.int64(6), eps_0_nu_0_co_0_p_0_fused // T.int64(6) * T.int64(2) + eps_1_nu_1_co_1_p_1_fused // T.int64(224) + eps_3_init + eps_4_init)
                            v_nu = T.axis.spatial(T.int64(6), eps_0_nu_0_co_0_p_0_fused % T.int64(6) // T.int64(2) * T.int64(2) + eps_2_nu_2_co_2_p_2_fused // T.int64(16) + nu_3_init + nu_4_init)
                            v_co = T.axis.spatial(T.int64(256), eps_0_nu_0_co_0_p_0_fused % T.int64(2) * T.int64(128) + eps_1_nu_1_co_1_p_1_fused % T.int64(224) // T.int64(14) * T.int64(8) + eps_2_nu_2_co_2_p_2_fused % T.int64(16) // T.int64(2) + co_3_init + co_4_init)
                            v_p = T.axis.spatial(T.int64(196), eps_1_nu_1_co_1_p_1_fused % T.int64(14) * T.int64(14) + eps_2_nu_2_co_2_p_2_fused % T.int64(2) * T.int64(7) + p_3_init + p_4_init)
                            T.reads()
                            T.writes(bgemm_local[v_eps, v_nu, v_co, v_p])
                            T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 32, "meta_schedule.tiling_structure": "SSSRRSRS"})
                            bgemm_local[v_eps, v_nu, v_co, v_p] = T.float32(0)
                    for ci_0_fused in T.serial(T.int64(256), annotations={"software_pipeline_async_stages": [0], "software_pipeline_order": [0, 1, 2], "software_pipeline_stage": [0, 0, 3]}):
                        for ax0_ax1_ax2_ax3_fused_0 in range(T.int64(7)):
                            for ax0_ax1_ax2_ax3_fused_1 in T.thread_binding(T.int64(32), thread="threadIdx.x"):
                                for ax0_ax1_ax2_ax3_fused_2 in T.vectorized(T.int64(4)):
                                    with T.block("data_pack_shared"):
                                        v0 = T.axis.spatial(T.int64(6), eps_0_nu_0_co_0_p_0_fused // T.int64(6) * T.int64(2) + (ax0_ax1_ax2_ax3_fused_0 * T.int64(128) + ax0_ax1_ax2_ax3_fused_1 * T.int64(4) + ax0_ax1_ax2_ax3_fused_2) // T.int64(392))
                                        v1 = T.axis.spatial(T.int64(6), eps_0_nu_0_co_0_p_0_fused % T.int64(6) // T.int64(2) * T.int64(2) + (ax0_ax1_ax2_ax3_fused_0 * T.int64(128) + ax0_ax1_ax2_ax3_fused_1 * T.int64(4) + ax0_ax1_ax2_ax3_fused_2) % T.int64(392) // T.int64(196))
                                        v2 = T.axis.spatial(T.int64(256), ci_0_fused)
                                        v3 = T.axis.spatial(T.int64(196), (ax0_ax1_ax2_ax3_fused_0 * T.int64(128) + ax0_ax1_ax2_ax3_fused_1 * T.int64(4) + ax0_ax1_ax2_ax3_fused_2) % T.int64(196))
                                        T.where((ax0_ax1_ax2_ax3_fused_0 * T.int64(32) + ax0_ax1_ax2_ax3_fused_1) * T.int64(4) + ax0_ax1_ax2_ax3_fused_2 < T.int64(784))
                                        T.reads(data_pack[v0, v1, v2, v3])
                                        T.writes(data_pack_shared[v0, v1, v2, v3])
                                        data_pack_shared[v0, v1, v2, v3] = data_pack[v0, v1, v2, v3]
                        for ax0_ax1_ax2_ax3_fused_0 in range(T.int64(8)):
                            for ax0_ax1_ax2_ax3_fused_1 in T.thread_binding(T.int64(32), thread="threadIdx.x"):
                                for ax0_ax1_ax2_ax3_fused_2 in T.vectorized(T.int64(2)):
                                    with T.block("p1_shared"):
                                        v0 = T.axis.spatial(T.int64(6), eps_0_nu_0_co_0_p_0_fused // T.int64(6) * T.int64(2) + (ax0_ax1_ax2_ax3_fused_0 * T.int64(64) + ax0_ax1_ax2_ax3_fused_1 * T.int64(2) + ax0_ax1_ax2_ax3_fused_2) // T.int64(256))
                                        v1 = T.axis.spatial(T.int64(6), eps_0_nu_0_co_0_p_0_fused % T.int64(6) // T.int64(2) * T.int64(2) + (ax0_ax1_ax2_ax3_fused_0 * T.int64(64) + ax0_ax1_ax2_ax3_fused_1 * T.int64(2) + ax0_ax1_ax2_ax3_fused_2) % T.int64(256) // T.int64(128))
                                        v2 = T.axis.spatial(T.int64(256), ci_0_fused)
                                        v3 = T.axis.spatial(T.int64(256), eps_0_nu_0_co_0_p_0_fused % T.int64(2) * T.int64(128) + (ax0_ax1_ax2_ax3_fused_0 * T.int64(64) + ax0_ax1_ax2_ax3_fused_1 * T.int64(2) + ax0_ax1_ax2_ax3_fused_2) % T.int64(128))
                                        T.reads(p1[v0, v1, v2, v3])
                                        T.writes(p1_shared[v0, v1, v2, v3])
                                        p1_shared[v0, v1, v2, v3] = p1[v0, v1, v2, v3]
                        for ci_1, eps_3, nu_3, co_3, p_3, ci_2, eps_4, nu_4, co_4, p_4 in T.grid(T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(7), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1)):
                            with T.block("bgemm_update"):
                                v_eps = T.axis.spatial(T.int64(6), eps_0_nu_0_co_0_p_0_fused // T.int64(6) * T.int64(2) + eps_1_nu_1_co_1_p_1_fused // T.int64(224) + eps_3 + eps_4)
                                v_nu = T.axis.spatial(T.int64(6), eps_0_nu_0_co_0_p_0_fused % T.int64(6) // T.int64(2) * T.int64(2) + eps_2_nu_2_co_2_p_2_fused // T.int64(16) + nu_3 + nu_4)
                                v_co = T.axis.spatial(T.int64(256), eps_0_nu_0_co_0_p_0_fused % T.int64(2) * T.int64(128) + eps_1_nu_1_co_1_p_1_fused % T.int64(224) // T.int64(14) * T.int64(8) + eps_2_nu_2_co_2_p_2_fused % T.int64(16) // T.int64(2) + co_3 + co_4)
                                v_p = T.axis.spatial(T.int64(196), eps_1_nu_1_co_1_p_1_fused % T.int64(14) * T.int64(14) + eps_2_nu_2_co_2_p_2_fused % T.int64(2) * T.int64(7) + p_3 + p_4)
                                v_ci = T.axis.reduce(T.int64(256), ci_0_fused + ci_1 + ci_2)
                                T.reads(bgemm_local[v_eps, v_nu, v_co, v_p], data_pack_shared[v_eps, v_nu, v_ci, v_p], p1_shared[v_eps, v_nu, v_ci, v_co])
                                T.writes(bgemm_local[v_eps, v_nu, v_co, v_p])
                                T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 32, "meta_schedule.tiling_structure": "SSSRRSRS"})
                                bgemm_local[v_eps, v_nu, v_co, v_p] = bgemm_local[v_eps, v_nu, v_co, v_p] + data_pack_shared[v_eps, v_nu, v_ci, v_p] * p1_shared[v_eps, v_nu, v_ci, v_co]
                    for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(1), T.int64(1), T.int64(7)):
                        with T.block("bgemm_local"):
                            v0 = T.axis.spatial(T.int64(6), eps_0_nu_0_co_0_p_0_fused // T.int64(6) * T.int64(2) + eps_1_nu_1_co_1_p_1_fused // T.int64(224) + ax0)
                            v1 = T.axis.spatial(T.int64(6), eps_0_nu_0_co_0_p_0_fused % T.int64(6) // T.int64(2) * T.int64(2) + eps_2_nu_2_co_2_p_2_fused // T.int64(16) + ax1)
                            v2 = T.axis.spatial(T.int64(256), eps_0_nu_0_co_0_p_0_fused % T.int64(2) * T.int64(128) + eps_1_nu_1_co_1_p_1_fused % T.int64(224) // T.int64(14) * T.int64(8) + eps_2_nu_2_co_2_p_2_fused % T.int64(16) // T.int64(2) + ax2)
                            v3 = T.axis.spatial(T.int64(196), eps_1_nu_1_co_1_p_1_fused % T.int64(14) * T.int64(14) + eps_2_nu_2_co_2_p_2_fused % T.int64(2) * T.int64(7) + ax3)
                            T.reads(bgemm_local[v0, v1, v2, v3])
                            T.writes(bgemm[v0, v1, v2, v3])
                            bgemm[v0, v1, v2, v3] = bgemm_local[v0, v1, v2, v3]
        for n_co_h_0_w_0_fused_0 in T.thread_binding(T.int64(392), thread="blockIdx.x", annotations={"pragma_auto_unroll_max_step": 512, "pragma_unroll_explicit": 1}):
            for n_co_h_0_w_0_fused_1 in T.thread_binding(T.int64(128), thread="threadIdx.x"):
                for ax0, ax1 in T.grid(T.int64(1), T.int64(1)):
                    for ax2 in T.unroll(T.int64(4)):
                        for ax3 in T.unroll(T.int64(4)):
                            with T.block("inverse_init"):
                                v_co = T.axis.spatial(T.int64(256), (n_co_h_0_w_0_fused_0 * T.int64(128) + n_co_h_0_w_0_fused_1) // T.int64(196) + ax0)
                                v_p = T.axis.spatial(T.int64(196), (n_co_h_0_w_0_fused_0 * T.int64(128) + n_co_h_0_w_0_fused_1) % T.int64(196) + ax1)
                                v_vh, v_vw = T.axis.remap("SS", [ax2, ax3])
                                T.reads()
                                T.writes(inverse_local[v_co, v_p, v_vh, v_vw])
                                T.block_attr({"schedule_rule": "conv2d_nchw_winograd_inverse"})
                                inverse_local[v_co, v_p, v_vh, v_vw] = T.float32(0)
                            for ax4 in T.unroll(T.int64(6)):
                                for ax5 in T.unroll(T.int64(6)):
                                    with T.block("inverse_update"):
                                        v_co = T.axis.spatial(T.int64(256), (n_co_h_0_w_0_fused_0 * T.int64(128) + n_co_h_0_w_0_fused_1) // T.int64(196) + ax0)
                                        v_p = T.axis.spatial(T.int64(196), (n_co_h_0_w_0_fused_0 * T.int64(128) + n_co_h_0_w_0_fused_1) % T.int64(196) + ax1)
                                        v_vh, v_vw, v_r_a, v_r_b = T.axis.remap("SSRR", [ax2, ax3, ax4, ax5])
                                        T.reads(inverse_local[v_co, v_p, v_vh, v_vw], bgemm[v_r_a, v_r_b, v_co, v_p])
                                        T.writes(inverse_local[v_co, v_p, v_vh, v_vw])
                                        T.block_attr({"schedule_rule": "conv2d_nchw_winograd_inverse"})
                                        inverse_local[v_co, v_p, v_vh, v_vw] = inverse_local[v_co, v_p, v_vh, v_vw] + bgemm[v_r_a, v_r_b, v_co, v_p] * T.Select(v_r_a % T.int64(6) == T.int64(5) and v_vh % T.int64(4) == T.int64(3), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(5) and v_vh % T.int64(4) == T.int64(2), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(5) and v_vh % T.int64(4) == T.int64(1), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(5) and v_vh % T.int64(4) == T.int64(0), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(4) and v_vh % T.int64(4) == T.int64(3), T.float32(-8), T.Select(v_r_a % T.int64(6) == T.int64(4) and v_vh % T.int64(4) == T.int64(2), T.float32(4), T.Select(v_r_a % T.int64(6) == T.int64(4) and v_vh % T.int64(4) == T.int64(1), T.float32(-2), T.Select(v_r_a % T.int64(6) == T.int64(4) and v_vh % T.int64(4) == T.int64(0), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(3) and v_vh % T.int64(4) == T.int64(3), T.float32(0.125), T.Select(v_r_a % T.int64(6) == T.int64(3) and v_vh % T.int64(4) == T.int64(2), T.float32(0.25), T.Select(v_r_a % T.int64(6) == T.int64(3) and v_vh % T.int64(4) == T.int64(1), T.float32(0.5), T.Select(v_r_a % T.int64(6) == T.int64(3) and v_vh % T.int64(4) == T.int64(0), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(2) and v_vh % T.int64(4) == T.int64(3), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(2) and v_vh % T.int64(4) == T.int64(2), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(2) and v_vh % T.int64(4) == T.int64(1), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(2) and v_vh % T.int64(4) == T.int64(0), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(1) and v_vh % T.int64(4) == T.int64(3), T.float32(-1), T.Select(v_r_a % T.int64(6) == T.int64(1) and v_vh % T.int64(4) == T.int64(2), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(1) and v_vh % T.int64(4) == T.int64(1), T.float32(-1), T.Select(v_r_a % T.int64(6) == T.int64(1) and v_vh % T.int64(4) == T.int64(0), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(0) and v_vh % T.int64(4) == T.int64(3), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(0) and v_vh % T.int64(4) == T.int64(2), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(0) and v_vh % T.int64(4) == T.int64(1), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(0) and v_vh % T.int64(4) == T.int64(0), T.float32(1), T.float32(0))))))))))))))))))))))))) * T.Select(v_r_b % T.int64(6) == T.int64(5) and v_vw % T.int64(4) == T.int64(3), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(5) and v_vw % T.int64(4) == T.int64(2), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(5) and v_vw % T.int64(4) == T.int64(1), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(5) and v_vw % T.int64(4) == T.int64(0), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(4) and v_vw % T.int64(4) == T.int64(3), T.float32(-8), T.Select(v_r_b % T.int64(6) == T.int64(4) and v_vw % T.int64(4) == T.int64(2), T.float32(4), T.Select(v_r_b % T.int64(6) == T.int64(4) and v_vw % T.int64(4) == T.int64(1), T.float32(-2), T.Select(v_r_b % T.int64(6) == T.int64(4) and v_vw % T.int64(4) == T.int64(0), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(3) and v_vw % T.int64(4) == T.int64(3), T.float32(0.125), T.Select(v_r_b % T.int64(6) == T.int64(3) and v_vw % T.int64(4) == T.int64(2), T.float32(0.25), T.Select(v_r_b % T.int64(6) == T.int64(3) and v_vw % T.int64(4) == T.int64(1), T.float32(0.5), T.Select(v_r_b % T.int64(6) == T.int64(3) and v_vw % T.int64(4) == T.int64(0), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(2) and v_vw % T.int64(4) == T.int64(3), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(2) and v_vw % T.int64(4) == T.int64(2), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(2) and v_vw % T.int64(4) == T.int64(1), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(2) and v_vw % T.int64(4) == T.int64(0), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(1) and v_vw % T.int64(4) == T.int64(3), T.float32(-1), T.Select(v_r_b % T.int64(6) == T.int64(1) and v_vw % T.int64(4) == T.int64(2), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(1) and v_vw % T.int64(4) == T.int64(1), T.float32(-1), T.Select(v_r_b % T.int64(6) == T.int64(1) and v_vw % T.int64(4) == T.int64(0), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(0) and v_vw % T.int64(4) == T.int64(3), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(0) and v_vw % T.int64(4) == T.int64(2), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(0) and v_vw % T.int64(4) == T.int64(1), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(0) and v_vw % T.int64(4) == T.int64(0), T.float32(1), T.float32(0)))))))))))))))))))))))))
                for h_1, w_1 in T.grid(T.int64(4), T.int64(4)):
                    with T.block("conv2d_winograd"):
                        v_n = T.axis.spatial(T.int64(1), T.int64(0))
                        v_co = T.axis.spatial(T.int64(256), (n_co_h_0_w_0_fused_0 * T.int64(128) + n_co_h_0_w_0_fused_1) // T.int64(196))
                        v_h = T.axis.spatial(T.int64(56), (n_co_h_0_w_0_fused_0 * T.int64(128) + n_co_h_0_w_0_fused_1) % T.int64(196) // T.int64(14) * T.int64(4) + h_1)
                        v_w = T.axis.spatial(T.int64(56), (n_co_h_0_w_0_fused_0 * T.int64(128) + n_co_h_0_w_0_fused_1) % T.int64(14) * T.int64(4) + w_1)
                        T.reads(inverse_local[v_co, v_n * T.int64(196) + v_h // T.int64(4) * T.int64(14) + v_w // T.int64(4), v_h % T.int64(4), v_w % T.int64(4)], p2[v_n, v_co, T.int64(0), T.int64(0)])
                        T.writes(T_relu[v_n, v_co, v_h, v_w])
                        T_relu[v_n, v_co, v_h, v_w] = T.max(inverse_local[v_co, v_n * T.int64(196) + v_h // T.int64(4) * T.int64(14) + v_w // T.int64(4), v_h % T.int64(4), v_w % T.int64(4)] + p2[v_n, v_co, T.int64(0), T.int64(0)], T.float32(0))
b0 = sch.get_block(name="data_pack", func_name="main")
b1 = sch.get_block(name="bgemm", func_name="main")
b2 = sch.get_block(name="inverse", func_name="main")
b3 = sch.get_block(name="conv2d_winograd", func_name="main")
b4 = sch.get_block(name="T_add", func_name="main")
b5 = sch.get_block(name="T_relu", func_name="main")
b6 = sch.get_block(name="root", func_name="main")
b7, b8 = sch.get_producers(block=b2)
sch.compute_inline(block=b8)
b9, = sch.get_consumers(block=b2)
l10, l11, l12, l13 = sch.get_loops(block=b9)
l14, l15 = sch.split(loop=l12, factors=[None, 4], preserve_unit_iters=True)
l16, l17 = sch.split(loop=l13, factors=[None, 4], preserve_unit_iters=True)
sch.reorder(l14, l16, l15, l17)
sch.compute_at(block=b2, loop=l16, preserve_unit_loops=True, index=-1)
sch.set_scope(block=b2, buffer_index=0, storage_scope="local")
l18, l19, l20, l21, l22, l23, l24, l25, l26, l27 = sch.get_loops(block=b2)
sch.unroll(loop=l24)
sch.unroll(loop=l25)
sch.unroll(loop=l26)
sch.unroll(loop=l27)
b28, b29 = sch.get_producers(block=b0)
sch.compute_inline(block=b29)
b30, = sch.get_producers(block=b28)
l31, l32, l33, l34, l35, l36 = sch.get_loops(block=b0)
sch.reorder(l33, l34, l31, l32, l35, l36)
sch.unroll(loop=l31)
sch.unroll(loop=l32)
sch.unroll(loop=l35)
sch.unroll(loop=l36)
l37 = sch.fuse(l33, l34, preserve_unit_iters=True)
v38 = sch.sample_categorical(candidates=[32, 64, 128, 256, 512, 1024], probs=[0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666], decision=5)
l39, l40 = sch.split(loop=l37, factors=[None, v38], preserve_unit_iters=True)
sch.bind(loop=l39, thread_axis="blockIdx.x")
sch.bind(loop=l40, thread_axis="threadIdx.x")
b41 = sch.cache_write(block=b0, write_buffer_index=0, storage_scope="local")
sch.reverse_compute_at(block=b41, loop=l40, preserve_unit_loops=True, index=-1)
sch.compute_at(block=b28, loop=l40, preserve_unit_loops=True, index=-1)
sch.set_scope(block=b28, buffer_index=0, storage_scope="local")
sch.compute_inline(block=b30)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSSRRSRS")
l42, l43, l44, l45, l46 = sch.get_loops(block=b1)
v47, v48, v49, v50, v51 = sch.sample_perfect_tile(loop=l42, n=5, max_innermost_factor=64, decision=[3, 2, 1, 1, 1])
l52, l53, l54, l55, l56 = sch.split(loop=l42, factors=[v47, v48, v49, v50, v51], preserve_unit_iters=True)
v57, v58, v59, v60, v61 = sch.sample_perfect_tile(loop=l43, n=5, max_innermost_factor=64, decision=[3, 1, 2, 1, 1])
l62, l63, l64, l65, l66 = sch.split(loop=l43, factors=[v57, v58, v59, v60, v61], preserve_unit_iters=True)
v67, v68, v69, v70, v71 = sch.sample_perfect_tile(loop=l44, n=5, max_innermost_factor=64, decision=[2, 16, 8, 1, 1])
l72, l73, l74, l75, l76 = sch.split(loop=l44, factors=[v67, v68, v69, v70, v71], preserve_unit_iters=True)
v77, v78, v79, v80, v81 = sch.sample_perfect_tile(loop=l45, n=5, max_innermost_factor=64, decision=[1, 14, 2, 7, 1])
l82, l83, l84, l85, l86 = sch.split(loop=l45, factors=[v77, v78, v79, v80, v81], preserve_unit_iters=True)
v87, v88, v89 = sch.sample_perfect_tile(loop=l46, n=3, max_innermost_factor=64, decision=[256, 1, 1])
l90, l91, l92 = sch.split(loop=l46, factors=[v87, v88, v89], preserve_unit_iters=True)
sch.reorder(l52, l62, l72, l82, l53, l63, l73, l83, l54, l64, l74, l84, l90, l91, l55, l65, l75, l85, l92, l56, l66, l76, l86)
l93 = sch.fuse(l52, l62, l72, l82, preserve_unit_iters=True)
sch.bind(loop=l93, thread_axis="blockIdx.x")
l94 = sch.fuse(l53, l63, l73, l83, preserve_unit_iters=True)
sch.bind(loop=l94, thread_axis="vthread.x")
l95 = sch.fuse(l54, l64, l74, l84, preserve_unit_iters=True)
sch.bind(loop=l95, thread_axis="threadIdx.x")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_low_inclusive", ann_val=32)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_high_inclusive", ann_val=1024)
b96 = sch.cache_write(block=b1, write_buffer_index=0, storage_scope="local")
sch.reverse_compute_at(block=b96, loop=l95, preserve_unit_loops=True, index=-1)
b97 = sch.cache_read(block=b1, read_buffer_index=0, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b97, loop=l90, preserve_unit_loops=True, index=-1)
l98, l99, l100, l101, l102, l103, l104, l105 = sch.get_loops(block=b97)
l106 = sch.fuse(l102, l103, l104, l105, preserve_unit_iters=True)
v107 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b97, ann_key="meta_schedule.cooperative_fetch", ann_val=v107)
b108 = sch.cache_read(block=b1, read_buffer_index=1, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b108, loop=l90, preserve_unit_loops=True, index=-1)
l109, l110, l111, l112, l113, l114, l115, l116 = sch.get_loops(block=b108)
l117 = sch.fuse(l113, l114, l115, l116, preserve_unit_iters=True)
v118 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=1)
sch.annotate(block_or_loop=b108, ann_key="meta_schedule.cooperative_fetch", ann_val=v118)
l119 = sch.fuse(l90, preserve_unit_iters=True)
sch.annotate(block_or_loop=l119, ann_key="software_pipeline_stage", ann_val=[0, 0, 3])
sch.annotate(block_or_loop=l119, ann_key="software_pipeline_order", ann_val=[0, 1, 2])
sch.annotate(block_or_loop=l119, ann_key="software_pipeline_async_stages", ann_val=[0])
sch.reverse_compute_inline(block=b5)
sch.reverse_compute_inline(block=b4)
v120 = sch.sample_categorical(candidates=[0, 16, 64, 512, 1024], probs=[0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001], decision=3)
sch.annotate(block_or_loop=b6, ann_key="meta_schedule.unroll_explicit", ann_val=v120)
l121, l122, l123, l124, l125, l126 = sch.get_loops(block=b3)
l127 = sch.fuse(l121, l122, l123, l124, preserve_unit_iters=True)
v128 = sch.sample_categorical(candidates=[32, 64, 128, 256, 512, 1024], probs=[0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666], decision=2)
l129, l130 = sch.split(loop=l127, factors=[None, v128], preserve_unit_iters=True)
sch.bind(loop=l129, thread_axis="blockIdx.x")
sch.bind(loop=l130, thread_axis="threadIdx.x")
sch.enter_postproc()
sch.unannotate(block_or_loop=b97, ann_key="meta_schedule.cooperative_fetch")
l131, l132, l133, l134, l135 = sch.get_loops(block=b97)
l136, l137, l138 = sch.split(loop=l135, factors=[None, 32, 4], preserve_unit_iters=True)
sch.vectorize(loop=l138)
sch.bind(loop=l137, thread_axis="threadIdx.x")
sch.unannotate(block_or_loop=b108, ann_key="meta_schedule.cooperative_fetch")
l139, l140, l141, l142, l143 = sch.get_loops(block=b108)
l144, l145, l146 = sch.split(loop=l143, factors=[None, 32, 2], preserve_unit_iters=True)
sch.vectorize(loop=l146)
sch.bind(loop=l145, thread_axis="threadIdx.x")
b147 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b147, ann_key="meta_schedule.unroll_explicit")
b148, b149, b150, b151, b152, b153, b154, b155, b156 = sch.get_child_blocks(b147)
l157, l158, l159, l160, l161, l162 = sch.get_loops(block=b148)
l163, l164, l165, l166, l167, l168 = sch.get_loops(block=b149)
sch.annotate(block_or_loop=l163, ann_key="pragma_auto_unroll_max_step", ann_val=512)
sch.annotate(block_or_loop=l163, ann_key="pragma_unroll_explicit", ann_val=1)
l169, l170, l171, l172, l173, l174 = sch.get_loops(block=b150)
l175, l176, l177, l178, l179, l180, l181 = sch.get_loops(block=b151)
l182, l183, l184, l185, l186, l187, l188 = sch.get_loops(block=b152)
l189, l190, l191, l192, l193, l194, l195, l196, l197, l198, l199, l200, l201, l202 = sch.get_loops(block=b153)
sch.annotate(block_or_loop=l189, ann_key="pragma_auto_unroll_max_step", ann_val=512)
sch.annotate(block_or_loop=l189, ann_key="pragma_unroll_explicit", ann_val=1)
l203, l204, l205, l206, l207, l208, l209 = sch.get_loops(block=b154)
l210, l211, l212, l213, l214, l215, l216, l217 = sch.get_loops(block=b155)
sch.annotate(block_or_loop=l210, ann_key="pragma_auto_unroll_max_step", ann_val=512)
sch.annotate(block_or_loop=l210, ann_key="pragma_unroll_explicit", ann_val=1)
l218, l219, l220, l221 = sch.get_loops(block=b156)
b222 = sch.get_block(name="data_pack", func_name="main")
l223, l224, l225, l226, l227, l228 = sch.get_loops(block=b222)
b229 = sch.decompose_reduction(block=b222, loop=l227)
b230 = sch.get_block(name="bgemm", func_name="main")
l231, l232, l233, l234, l235, l236, l237, l238, l239, l240, l241, l242, l243, l244 = sch.get_loops(block=b230)
b245 = sch.decompose_reduction(block=b230, loop=l234)
b246 = sch.get_block(name="inverse", func_name="main")
l247, l248, l249, l250, l251, l252, l253, l254 = sch.get_loops(block=b246)
b255 = sch.decompose_reduction(block=b246, loop=l253)
2024-04-29 00:33:49 [INFO] [task_scheduler.cc:121] [Task #5: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #707: Error in building:
LocalBuilder: Timeout, killed after 30.0 seconds
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(256), T.int64(56), T.int64(56)), "float32"), p1: T.Buffer((T.int64(6), T.int64(6), T.int64(256), T.int64(256)), "float32"), p2: T.Buffer((T.int64(1), T.int64(256), T.int64(1), T.int64(1)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(256), T.int64(56), T.int64(56)), "float32")):
        T.func_attr({"layout_free_buffers": [1], "tir.noalias": T.bool(True)})
        # with T.block("root"):
        input_tile_local = T.alloc_buffer((T.int64(256), T.int64(196), T.int64(6), T.int64(6)), scope="local")
        data_pack = T.alloc_buffer((T.int64(6), T.int64(6), T.int64(256), T.int64(196)))
        bgemm = T.alloc_buffer((T.int64(6), T.int64(6), T.int64(256), T.int64(196)))
        inverse_local = T.alloc_buffer((T.int64(256), T.int64(196), T.int64(4), T.int64(4)), scope="local")
        data_pack_local = T.alloc_buffer((T.int64(6), T.int64(6), T.int64(256), T.int64(196)), scope="local")
        bgemm_local = T.alloc_buffer((T.int64(6), T.int64(6), T.int64(256), T.int64(196)), scope="local")
        data_pack_shared = T.alloc_buffer((T.int64(6), T.int64(6), T.int64(256), T.int64(196)), scope="shared")
        p1_shared = T.alloc_buffer((T.int64(6), T.int64(6), T.int64(256), T.int64(256)), scope="shared")
        for ci_p_fused_0 in T.thread_binding(T.int64(49), thread="blockIdx.x", annotations={"pragma_auto_unroll_max_step": 1024, "pragma_unroll_explicit": 1}):
            for ci_p_fused_1 in T.thread_binding(T.int64(1024), thread="threadIdx.x"):
                for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(1), T.int64(6), T.int64(6)):
                    with T.block("input_tile"):
                        v_ci = T.axis.spatial(T.int64(256), (ci_p_fused_0 * T.int64(1024) + ci_p_fused_1) // T.int64(196) + ax0)
                        v_p = T.axis.spatial(T.int64(196), (ci_p_fused_0 * T.int64(44) + ci_p_fused_1) % T.int64(196) + ax1)
                        v_eps, v_nu = T.axis.remap("SS", [ax2, ax3])
                        T.reads(p0[v_p // T.int64(196), v_ci, v_p % T.int64(196) // T.int64(14) * T.int64(4) + v_eps - T.int64(1), v_p % T.int64(14) * T.int64(4) + v_nu - T.int64(1)])
                        T.writes(input_tile_local[v_ci, v_p, v_eps, v_nu])
                        T.block_attr({"schedule_rule": "None"})
                        input_tile_local[v_ci, v_p, v_eps, v_nu] = T.if_then_else(T.int64(1) <= v_p % T.int64(196) // T.int64(14) * T.int64(4) + v_eps and v_p % T.int64(196) // T.int64(14) * T.int64(4) + v_eps < T.int64(57) and T.int64(1) <= v_p % T.int64(14) * T.int64(4) + v_nu and v_p % T.int64(14) * T.int64(4) + v_nu < T.int64(57), p0[v_p // T.int64(196), v_ci, v_p % T.int64(196) // T.int64(14) * T.int64(4) + v_eps - T.int64(1), v_p % T.int64(14) * T.int64(4) + v_nu - T.int64(1)], T.float32(0))
                for eps in T.unroll(T.int64(6)):
                    for nu in T.unroll(T.int64(6)):
                        with T.block("data_pack_init"):
                            v_eps, v_nu = T.axis.remap("SS", [eps, nu])
                            v_ci = T.axis.spatial(T.int64(256), (ci_p_fused_0 * T.int64(1024) + ci_p_fused_1) // T.int64(196))
                            v_p = T.axis.spatial(T.int64(196), (ci_p_fused_0 * T.int64(1024) + ci_p_fused_1) % T.int64(196))
                            T.reads()
                            T.writes(data_pack_local[v_eps, v_nu, v_ci, v_p])
                            T.block_attr({"schedule_rule": "conv2d_nchw_winograd_data_pack"})
                            data_pack_local[v_eps, v_nu, v_ci, v_p] = T.float32(0)
                        for r_a in T.unroll(T.int64(6)):
                            for r_b in T.unroll(T.int64(6)):
                                with T.block("data_pack_update"):
                                    v_eps, v_nu = T.axis.remap("SS", [eps, nu])
                                    v_ci = T.axis.spatial(T.int64(256), (ci_p_fused_0 * T.int64(1024) + ci_p_fused_1) // T.int64(196))
                                    v_p = T.axis.spatial(T.int64(196), (ci_p_fused_0 * T.int64(1024) + ci_p_fused_1) % T.int64(196))
                                    v_r_a, v_r_b = T.axis.remap("RR", [r_a, r_b])
                                    T.reads(data_pack_local[v_eps, v_nu, v_ci, v_p], input_tile_local[v_ci, v_p, v_r_a, v_r_b])
                                    T.writes(data_pack_local[v_eps, v_nu, v_ci, v_p])
                                    T.block_attr({"schedule_rule": "conv2d_nchw_winograd_data_pack"})
                                    data_pack_local[v_eps, v_nu, v_ci, v_p] = data_pack_local[v_eps, v_nu, v_ci, v_p] + input_tile_local[v_ci, v_p, v_r_a, v_r_b] * T.Select(v_r_a % T.int64(6) == T.int64(5) and v_eps % T.int64(6) == T.int64(5), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(5) and v_eps % T.int64(6) == T.int64(4), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(5) and v_eps % T.int64(6) == T.int64(3), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(5) and v_eps % T.int64(6) == T.int64(2), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(5) and v_eps % T.int64(6) == T.int64(1), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(5) and v_eps % T.int64(6) == T.int64(0), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(4) and v_eps % T.int64(6) == T.int64(5), T.float32(1.5), T.Select(v_r_a % T.int64(6) == T.int64(4) and v_eps % T.int64(6) == T.int64(4), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(4) and v_eps % T.int64(6) == T.int64(3), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(4) and v_eps % T.int64(6) == T.int64(2), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(4) and v_eps % T.int64(6) == T.int64(1), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(4) and v_eps % T.int64(6) == T.int64(0), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(3) and v_eps % T.int64(6) == T.int64(5), T.float32(-2), T.Select(v_r_a % T.int64(6) == T.int64(3) and v_eps % T.int64(6) == T.int64(4), T.float32(-0.5), T.Select(v_r_a % T.int64(6) == T.int64(3) and v_eps % T.int64(6) == T.int64(3), T.float32(2), T.Select(v_r_a % T.int64(6) == T.int64(3) and v_eps % T.int64(6) == T.int64(2), T.float32(2.5), T.Select(v_r_a % T.int64(6) == T.int64(3) and v_eps % T.int64(6) == T.int64(1), T.float32(0.5), T.Select(v_r_a % T.int64(6) == T.int64(3) and v_eps % T.int64(6) == T.int64(0), T.float32(1.5), T.Select(v_r_a % T.int64(6) == T.int64(2) and v_eps % T.int64(6) == T.int64(5), T.float32(-1.5), T.Select(v_r_a % T.int64(6) == T.int64(2) and v_eps % T.int64(6) == T.int64(4), T.float32(-1), T.Select(v_r_a % T.int64(6) == T.int64(2) and v_eps % T.int64(6) == T.int64(3), T.float32(-1), T.Select(v_r_a % T.int64(6) == T.int64(2) and v_eps % T.int64(6) == T.int64(2), T.float32(0.5), T.Select(v_r_a % T.int64(6) == T.int64(2) and v_eps % T.int64(6) == T.int64(1), T.float32(-2.5), T.Select(v_r_a % T.int64(6) == T.int64(2) and v_eps % T.int64(6) == T.int64(0), T.float32(-2), T.Select(v_r_a % T.int64(6) == T.int64(1) and v_eps % T.int64(6) == T.int64(5), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(1) and v_eps % T.int64(6) == T.int64(4), T.float32(0.5), T.Select(v_r_a % T.int64(6) == T.int64(1) and v_eps % T.int64(6) == T.int64(3), T.float32(-2), T.Select(v_r_a % T.int64(6) == T.int64(1) and v_eps % T.int64(6) == T.int64(2), T.float32(-1), T.Select(v_r_a % T.int64(6) == T.int64(1) and v_eps % T.int64(6) == T.int64(1), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(1) and v_eps % T.int64(6) == T.int64(0), T.float32(-1.5), T.Select(v_r_a % T.int64(6) == T.int64(0) and v_eps % T.int64(6) == T.int64(5), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(0) and v_eps % T.int64(6) == T.int64(4), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(0) and v_eps % T.int64(6) == T.int64(3), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(0) and v_eps % T.int64(6) == T.int64(2), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(0) and v_eps % T.int64(6) == T.int64(1), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(0) and v_eps % T.int64(6) == T.int64(0), T.float32(1), T.float32(0))))))))))))))))))))))))))))))))))))) * T.Select(v_r_b % T.int64(6) == T.int64(5) and v_nu % T.int64(6) == T.int64(5), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(5) and v_nu % T.int64(6) == T.int64(4), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(5) and v_nu % T.int64(6) == T.int64(3), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(5) and v_nu % T.int64(6) == T.int64(2), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(5) and v_nu % T.int64(6) == T.int64(1), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(5) and v_nu % T.int64(6) == T.int64(0), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(4) and v_nu % T.int64(6) == T.int64(5), T.float32(1.5), T.Select(v_r_b % T.int64(6) == T.int64(4) and v_nu % T.int64(6) == T.int64(4), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(4) and v_nu % T.int64(6) == T.int64(3), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(4) and v_nu % T.int64(6) == T.int64(2), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(4) and v_nu % T.int64(6) == T.int64(1), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(4) and v_nu % T.int64(6) == T.int64(0), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(3) and v_nu % T.int64(6) == T.int64(5), T.float32(-2), T.Select(v_r_b % T.int64(6) == T.int64(3) and v_nu % T.int64(6) == T.int64(4), T.float32(-0.5), T.Select(v_r_b % T.int64(6) == T.int64(3) and v_nu % T.int64(6) == T.int64(3), T.float32(2), T.Select(v_r_b % T.int64(6) == T.int64(3) and v_nu % T.int64(6) == T.int64(2), T.float32(2.5), T.Select(v_r_b % T.int64(6) == T.int64(3) and v_nu % T.int64(6) == T.int64(1), T.float32(0.5), T.Select(v_r_b % T.int64(6) == T.int64(3) and v_nu % T.int64(6) == T.int64(0), T.float32(1.5), T.Select(v_r_b % T.int64(6) == T.int64(2) and v_nu % T.int64(6) == T.int64(5), T.float32(-1.5), T.Select(v_r_b % T.int64(6) == T.int64(2) and v_nu % T.int64(6) == T.int64(4), T.float32(-1), T.Select(v_r_b % T.int64(6) == T.int64(2) and v_nu % T.int64(6) == T.int64(3), T.float32(-1), T.Select(v_r_b % T.int64(6) == T.int64(2) and v_nu % T.int64(6) == T.int64(2), T.float32(0.5), T.Select(v_r_b % T.int64(6) == T.int64(2) and v_nu % T.int64(6) == T.int64(1), T.float32(-2.5), T.Select(v_r_b % T.int64(6) == T.int64(2) and v_nu % T.int64(6) == T.int64(0), T.float32(-2), T.Select(v_r_b % T.int64(6) == T.int64(1) and v_nu % T.int64(6) == T.int64(5), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(1) and v_nu % T.int64(6) == T.int64(4), T.float32(0.5), T.Select(v_r_b % T.int64(6) == T.int64(1) and v_nu % T.int64(6) == T.int64(3), T.float32(-2), T.Select(v_r_b % T.int64(6) == T.int64(1) and v_nu % T.int64(6) == T.int64(2), T.float32(-1), T.Select(v_r_b % T.int64(6) == T.int64(1) and v_nu % T.int64(6) == T.int64(1), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(1) and v_nu % T.int64(6) == T.int64(0), T.float32(-1.5), T.Select(v_r_b % T.int64(6) == T.int64(0) and v_nu % T.int64(6) == T.int64(5), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(0) and v_nu % T.int64(6) == T.int64(4), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(0) and v_nu % T.int64(6) == T.int64(3), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(0) and v_nu % T.int64(6) == T.int64(2), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(0) and v_nu % T.int64(6) == T.int64(1), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(0) and v_nu % T.int64(6) == T.int64(0), T.float32(1), T.float32(0)))))))))))))))))))))))))))))))))))))
                for ax0, ax1, ax2, ax3 in T.grid(T.int64(6), T.int64(6), T.int64(1), T.int64(1)):
                    with T.block("data_pack_local"):
                        v0, v1 = T.axis.remap("SS", [ax0, ax1])
                        v2 = T.axis.spatial(T.int64(256), (ci_p_fused_0 * T.int64(1024) + ci_p_fused_1) // T.int64(196) + ax2)
                        v3 = T.axis.spatial(T.int64(196), (ci_p_fused_0 * T.int64(44) + ci_p_fused_1) % T.int64(196) + ax3)
                        T.reads(data_pack_local[v0, v1, v2, v3])
                        T.writes(data_pack[v0, v1, v2, v3])
                        data_pack[v0, v1, v2, v3] = data_pack_local[v0, v1, v2, v3]
        for eps_0_nu_0_co_0_p_0_fused in T.thread_binding(T.int64(18), thread="blockIdx.x", annotations={"pragma_auto_unroll_max_step": 1024, "pragma_unroll_explicit": 1}):
            for eps_1_nu_1_co_1_p_1_fused in T.thread_binding(T.int64(448), thread="vthread.x"):
                for eps_2_nu_2_co_2_p_2_fused in T.thread_binding(T.int64(32), thread="threadIdx.x"):
                    for eps_3_init, nu_3_init, co_3_init, p_3_init, eps_4_init, nu_4_init, co_4_init, p_4_init in T.grid(T.int64(1), T.int64(1), T.int64(1), T.int64(7), T.int64(1), T.int64(1), T.int64(1), T.int64(1)):
                        with T.block("bgemm_init"):
                            v_eps = T.axis.spatial(T.int64(6), eps_0_nu_0_co_0_p_0_fused // T.int64(6) * T.int64(2) + eps_1_nu_1_co_1_p_1_fused // T.int64(224) + eps_3_init + eps_4_init)
                            v_nu = T.axis.spatial(T.int64(6), eps_0_nu_0_co_0_p_0_fused % T.int64(6) // T.int64(2) * T.int64(2) + eps_2_nu_2_co_2_p_2_fused // T.int64(16) + nu_3_init + nu_4_init)
                            v_co = T.axis.spatial(T.int64(256), eps_0_nu_0_co_0_p_0_fused % T.int64(2) * T.int64(128) + eps_1_nu_1_co_1_p_1_fused % T.int64(224) // T.int64(14) * T.int64(8) + eps_2_nu_2_co_2_p_2_fused % T.int64(16) // T.int64(2) + co_3_init + co_4_init)
                            v_p = T.axis.spatial(T.int64(196), eps_1_nu_1_co_1_p_1_fused % T.int64(14) * T.int64(14) + eps_2_nu_2_co_2_p_2_fused % T.int64(2) * T.int64(7) + p_3_init + p_4_init)
                            T.reads()
                            T.writes(bgemm_local[v_eps, v_nu, v_co, v_p])
                            T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 32, "meta_schedule.tiling_structure": "SSSRRSRS"})
                            bgemm_local[v_eps, v_nu, v_co, v_p] = T.float32(0)
                    for ci_0_fused in T.serial(T.int64(256), annotations={"software_pipeline_async_stages": [0], "software_pipeline_order": [0, 1, 2], "software_pipeline_stage": [0, 0, 3]}):
                        for ax0_ax1_ax2_ax3_fused_0 in range(T.int64(25)):
                            for ax0_ax1_ax2_ax3_fused_1 in T.thread_binding(T.int64(32), thread="threadIdx.x"):
                                with T.block("data_pack_shared"):
                                    v0 = T.axis.spatial(T.int64(6), eps_0_nu_0_co_0_p_0_fused // T.int64(6) * T.int64(2) + (ax0_ax1_ax2_ax3_fused_0 * T.int64(32) + ax0_ax1_ax2_ax3_fused_1) // T.int64(392))
                                    v1 = T.axis.spatial(T.int64(6), eps_0_nu_0_co_0_p_0_fused % T.int64(6) // T.int64(2) * T.int64(2) + (ax0_ax1_ax2_ax3_fused_0 * T.int64(32) + ax0_ax1_ax2_ax3_fused_1) % T.int64(392) // T.int64(196))
                                    v2 = T.axis.spatial(T.int64(256), ci_0_fused)
                                    v3 = T.axis.spatial(T.int64(196), (ax0_ax1_ax2_ax3_fused_0 * T.int64(32) + ax0_ax1_ax2_ax3_fused_1) % T.int64(196))
                                    T.where(ax0_ax1_ax2_ax3_fused_0 * T.int64(32) + ax0_ax1_ax2_ax3_fused_1 < T.int64(784))
                                    T.reads(data_pack[v0, v1, v2, v3])
                                    T.writes(data_pack_shared[v0, v1, v2, v3])
                                    data_pack_shared[v0, v1, v2, v3] = data_pack[v0, v1, v2, v3]
                        for ax0_ax1_ax2_ax3_fused_0 in range(T.int64(8)):
                            for ax0_ax1_ax2_ax3_fused_1 in T.thread_binding(T.int64(32), thread="threadIdx.x"):
                                for ax0_ax1_ax2_ax3_fused_2 in T.vectorized(T.int64(2)):
                                    with T.block("p1_shared"):
                                        v0 = T.axis.spatial(T.int64(6), eps_0_nu_0_co_0_p_0_fused // T.int64(6) * T.int64(2) + (ax0_ax1_ax2_ax3_fused_0 * T.int64(64) + ax0_ax1_ax2_ax3_fused_1 * T.int64(2) + ax0_ax1_ax2_ax3_fused_2) // T.int64(256))
                                        v1 = T.axis.spatial(T.int64(6), eps_0_nu_0_co_0_p_0_fused % T.int64(6) // T.int64(2) * T.int64(2) + (ax0_ax1_ax2_ax3_fused_0 * T.int64(64) + ax0_ax1_ax2_ax3_fused_1 * T.int64(2) + ax0_ax1_ax2_ax3_fused_2) % T.int64(256) // T.int64(128))
                                        v2 = T.axis.spatial(T.int64(256), ci_0_fused)
                                        v3 = T.axis.spatial(T.int64(256), eps_0_nu_0_co_0_p_0_fused % T.int64(2) * T.int64(128) + (ax0_ax1_ax2_ax3_fused_0 * T.int64(64) + ax0_ax1_ax2_ax3_fused_1 * T.int64(2) + ax0_ax1_ax2_ax3_fused_2) % T.int64(128))
                                        T.reads(p1[v0, v1, v2, v3])
                                        T.writes(p1_shared[v0, v1, v2, v3])
                                        p1_shared[v0, v1, v2, v3] = p1[v0, v1, v2, v3]
                        for ci_1, eps_3, nu_3, co_3, p_3, ci_2, eps_4, nu_4, co_4, p_4 in T.grid(T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(7), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1)):
                            with T.block("bgemm_update"):
                                v_eps = T.axis.spatial(T.int64(6), eps_0_nu_0_co_0_p_0_fused // T.int64(6) * T.int64(2) + eps_1_nu_1_co_1_p_1_fused // T.int64(224) + eps_3 + eps_4)
                                v_nu = T.axis.spatial(T.int64(6), eps_0_nu_0_co_0_p_0_fused % T.int64(6) // T.int64(2) * T.int64(2) + eps_2_nu_2_co_2_p_2_fused // T.int64(16) + nu_3 + nu_4)
                                v_co = T.axis.spatial(T.int64(256), eps_0_nu_0_co_0_p_0_fused % T.int64(2) * T.int64(128) + eps_1_nu_1_co_1_p_1_fused % T.int64(224) // T.int64(14) * T.int64(8) + eps_2_nu_2_co_2_p_2_fused % T.int64(16) // T.int64(2) + co_3 + co_4)
                                v_p = T.axis.spatial(T.int64(196), eps_1_nu_1_co_1_p_1_fused % T.int64(14) * T.int64(14) + eps_2_nu_2_co_2_p_2_fused % T.int64(2) * T.int64(7) + p_3 + p_4)
                                v_ci = T.axis.reduce(T.int64(256), ci_0_fused + ci_1 + ci_2)
                                T.reads(bgemm_local[v_eps, v_nu, v_co, v_p], data_pack_shared[v_eps, v_nu, v_ci, v_p], p1_shared[v_eps, v_nu, v_ci, v_co])
                                T.writes(bgemm_local[v_eps, v_nu, v_co, v_p])
                                T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 32, "meta_schedule.tiling_structure": "SSSRRSRS"})
                                bgemm_local[v_eps, v_nu, v_co, v_p] = bgemm_local[v_eps, v_nu, v_co, v_p] + data_pack_shared[v_eps, v_nu, v_ci, v_p] * p1_shared[v_eps, v_nu, v_ci, v_co]
                    for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(1), T.int64(1), T.int64(7)):
                        with T.block("bgemm_local"):
                            v0 = T.axis.spatial(T.int64(6), eps_0_nu_0_co_0_p_0_fused // T.int64(6) * T.int64(2) + eps_1_nu_1_co_1_p_1_fused // T.int64(224) + ax0)
                            v1 = T.axis.spatial(T.int64(6), eps_0_nu_0_co_0_p_0_fused % T.int64(6) // T.int64(2) * T.int64(2) + eps_2_nu_2_co_2_p_2_fused // T.int64(16) + ax1)
                            v2 = T.axis.spatial(T.int64(256), eps_0_nu_0_co_0_p_0_fused % T.int64(2) * T.int64(128) + eps_1_nu_1_co_1_p_1_fused % T.int64(224) // T.int64(14) * T.int64(8) + eps_2_nu_2_co_2_p_2_fused % T.int64(16) // T.int64(2) + ax2)
                            v3 = T.axis.spatial(T.int64(196), eps_1_nu_1_co_1_p_1_fused % T.int64(14) * T.int64(14) + eps_2_nu_2_co_2_p_2_fused % T.int64(2) * T.int64(7) + ax3)
                            T.reads(bgemm_local[v0, v1, v2, v3])
                            T.writes(bgemm[v0, v1, v2, v3])
                            bgemm[v0, v1, v2, v3] = bgemm_local[v0, v1, v2, v3]
        for n_co_h_0_w_0_fused_0 in T.thread_binding(T.int64(392), thread="blockIdx.x", annotations={"pragma_auto_unroll_max_step": 1024, "pragma_unroll_explicit": 1}):
            for n_co_h_0_w_0_fused_1 in T.thread_binding(T.int64(128), thread="threadIdx.x"):
                for ax0, ax1 in T.grid(T.int64(1), T.int64(1)):
                    for ax2 in T.unroll(T.int64(4)):
                        for ax3 in T.unroll(T.int64(4)):
                            with T.block("inverse_init"):
                                v_co = T.axis.spatial(T.int64(256), (n_co_h_0_w_0_fused_0 * T.int64(128) + n_co_h_0_w_0_fused_1) // T.int64(196) + ax0)
                                v_p = T.axis.spatial(T.int64(196), (n_co_h_0_w_0_fused_0 * T.int64(128) + n_co_h_0_w_0_fused_1) % T.int64(196) + ax1)
                                v_vh, v_vw = T.axis.remap("SS", [ax2, ax3])
                                T.reads()
                                T.writes(inverse_local[v_co, v_p, v_vh, v_vw])
                                T.block_attr({"schedule_rule": "conv2d_nchw_winograd_inverse"})
                                inverse_local[v_co, v_p, v_vh, v_vw] = T.float32(0)
                            for ax4 in T.unroll(T.int64(6)):
                                for ax5 in T.unroll(T.int64(6)):
                                    with T.block("inverse_update"):
                                        v_co = T.axis.spatial(T.int64(256), (n_co_h_0_w_0_fused_0 * T.int64(128) + n_co_h_0_w_0_fused_1) // T.int64(196) + ax0)
                                        v_p = T.axis.spatial(T.int64(196), (n_co_h_0_w_0_fused_0 * T.int64(128) + n_co_h_0_w_0_fused_1) % T.int64(196) + ax1)
                                        v_vh, v_vw, v_r_a, v_r_b = T.axis.remap("SSRR", [ax2, ax3, ax4, ax5])
                                        T.reads(inverse_local[v_co, v_p, v_vh, v_vw], bgemm[v_r_a, v_r_b, v_co, v_p])
                                        T.writes(inverse_local[v_co, v_p, v_vh, v_vw])
                                        T.block_attr({"schedule_rule": "conv2d_nchw_winograd_inverse"})
                                        inverse_local[v_co, v_p, v_vh, v_vw] = inverse_local[v_co, v_p, v_vh, v_vw] + bgemm[v_r_a, v_r_b, v_co, v_p] * T.Select(v_r_a % T.int64(6) == T.int64(5) and v_vh % T.int64(4) == T.int64(3), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(5) and v_vh % T.int64(4) == T.int64(2), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(5) and v_vh % T.int64(4) == T.int64(1), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(5) and v_vh % T.int64(4) == T.int64(0), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(4) and v_vh % T.int64(4) == T.int64(3), T.float32(-8), T.Select(v_r_a % T.int64(6) == T.int64(4) and v_vh % T.int64(4) == T.int64(2), T.float32(4), T.Select(v_r_a % T.int64(6) == T.int64(4) and v_vh % T.int64(4) == T.int64(1), T.float32(-2), T.Select(v_r_a % T.int64(6) == T.int64(4) and v_vh % T.int64(4) == T.int64(0), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(3) and v_vh % T.int64(4) == T.int64(3), T.float32(0.125), T.Select(v_r_a % T.int64(6) == T.int64(3) and v_vh % T.int64(4) == T.int64(2), T.float32(0.25), T.Select(v_r_a % T.int64(6) == T.int64(3) and v_vh % T.int64(4) == T.int64(1), T.float32(0.5), T.Select(v_r_a % T.int64(6) == T.int64(3) and v_vh % T.int64(4) == T.int64(0), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(2) and v_vh % T.int64(4) == T.int64(3), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(2) and v_vh % T.int64(4) == T.int64(2), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(2) and v_vh % T.int64(4) == T.int64(1), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(2) and v_vh % T.int64(4) == T.int64(0), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(1) and v_vh % T.int64(4) == T.int64(3), T.float32(-1), T.Select(v_r_a % T.int64(6) == T.int64(1) and v_vh % T.int64(4) == T.int64(2), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(1) and v_vh % T.int64(4) == T.int64(1), T.float32(-1), T.Select(v_r_a % T.int64(6) == T.int64(1) and v_vh % T.int64(4) == T.int64(0), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(0) and v_vh % T.int64(4) == T.int64(3), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(0) and v_vh % T.int64(4) == T.int64(2), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(0) and v_vh % T.int64(4) == T.int64(1), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(0) and v_vh % T.int64(4) == T.int64(0), T.float32(1), T.float32(0))))))))))))))))))))))))) * T.Select(v_r_b % T.int64(6) == T.int64(5) and v_vw % T.int64(4) == T.int64(3), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(5) and v_vw % T.int64(4) == T.int64(2), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(5) and v_vw % T.int64(4) == T.int64(1), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(5) and v_vw % T.int64(4) == T.int64(0), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(4) and v_vw % T.int64(4) == T.int64(3), T.float32(-8), T.Select(v_r_b % T.int64(6) == T.int64(4) and v_vw % T.int64(4) == T.int64(2), T.float32(4), T.Select(v_r_b % T.int64(6) == T.int64(4) and v_vw % T.int64(4) == T.int64(1), T.float32(-2), T.Select(v_r_b % T.int64(6) == T.int64(4) and v_vw % T.int64(4) == T.int64(0), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(3) and v_vw % T.int64(4) == T.int64(3), T.float32(0.125), T.Select(v_r_b % T.int64(6) == T.int64(3) and v_vw % T.int64(4) == T.int64(2), T.float32(0.25), T.Select(v_r_b % T.int64(6) == T.int64(3) and v_vw % T.int64(4) == T.int64(1), T.float32(0.5), T.Select(v_r_b % T.int64(6) == T.int64(3) and v_vw % T.int64(4) == T.int64(0), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(2) and v_vw % T.int64(4) == T.int64(3), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(2) and v_vw % T.int64(4) == T.int64(2), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(2) and v_vw % T.int64(4) == T.int64(1), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(2) and v_vw % T.int64(4) == T.int64(0), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(1) and v_vw % T.int64(4) == T.int64(3), T.float32(-1), T.Select(v_r_b % T.int64(6) == T.int64(1) and v_vw % T.int64(4) == T.int64(2), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(1) and v_vw % T.int64(4) == T.int64(1), T.float32(-1), T.Select(v_r_b % T.int64(6) == T.int64(1) and v_vw % T.int64(4) == T.int64(0), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(0) and v_vw % T.int64(4) == T.int64(3), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(0) and v_vw % T.int64(4) == T.int64(2), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(0) and v_vw % T.int64(4) == T.int64(1), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(0) and v_vw % T.int64(4) == T.int64(0), T.float32(1), T.float32(0)))))))))))))))))))))))))
                for h_1, w_1 in T.grid(T.int64(4), T.int64(4)):
                    with T.block("conv2d_winograd"):
                        v_n = T.axis.spatial(T.int64(1), T.int64(0))
                        v_co = T.axis.spatial(T.int64(256), (n_co_h_0_w_0_fused_0 * T.int64(128) + n_co_h_0_w_0_fused_1) // T.int64(196))
                        v_h = T.axis.spatial(T.int64(56), (n_co_h_0_w_0_fused_0 * T.int64(128) + n_co_h_0_w_0_fused_1) % T.int64(196) // T.int64(14) * T.int64(4) + h_1)
                        v_w = T.axis.spatial(T.int64(56), (n_co_h_0_w_0_fused_0 * T.int64(128) + n_co_h_0_w_0_fused_1) % T.int64(14) * T.int64(4) + w_1)
                        T.reads(inverse_local[v_co, v_n * T.int64(196) + v_h // T.int64(4) * T.int64(14) + v_w // T.int64(4), v_h % T.int64(4), v_w % T.int64(4)], p2[v_n, v_co, T.int64(0), T.int64(0)])
                        T.writes(T_relu[v_n, v_co, v_h, v_w])
                        T_relu[v_n, v_co, v_h, v_w] = T.max(inverse_local[v_co, v_n * T.int64(196) + v_h // T.int64(4) * T.int64(14) + v_w // T.int64(4), v_h % T.int64(4), v_w % T.int64(4)] + p2[v_n, v_co, T.int64(0), T.int64(0)], T.float32(0))
b0 = sch.get_block(name="data_pack", func_name="main")
b1 = sch.get_block(name="bgemm", func_name="main")
b2 = sch.get_block(name="inverse", func_name="main")
b3 = sch.get_block(name="conv2d_winograd", func_name="main")
b4 = sch.get_block(name="T_add", func_name="main")
b5 = sch.get_block(name="T_relu", func_name="main")
b6 = sch.get_block(name="root", func_name="main")
b7, b8 = sch.get_producers(block=b2)
sch.compute_inline(block=b8)
b9, = sch.get_consumers(block=b2)
l10, l11, l12, l13 = sch.get_loops(block=b9)
l14, l15 = sch.split(loop=l12, factors=[None, 4], preserve_unit_iters=True)
l16, l17 = sch.split(loop=l13, factors=[None, 4], preserve_unit_iters=True)
sch.reorder(l14, l16, l15, l17)
sch.compute_at(block=b2, loop=l16, preserve_unit_loops=True, index=-1)
sch.set_scope(block=b2, buffer_index=0, storage_scope="local")
l18, l19, l20, l21, l22, l23, l24, l25, l26, l27 = sch.get_loops(block=b2)
sch.unroll(loop=l24)
sch.unroll(loop=l25)
sch.unroll(loop=l26)
sch.unroll(loop=l27)
b28, b29 = sch.get_producers(block=b0)
sch.compute_inline(block=b29)
b30, = sch.get_producers(block=b28)
l31, l32, l33, l34, l35, l36 = sch.get_loops(block=b0)
sch.reorder(l33, l34, l31, l32, l35, l36)
sch.unroll(loop=l31)
sch.unroll(loop=l32)
sch.unroll(loop=l35)
sch.unroll(loop=l36)
l37 = sch.fuse(l33, l34, preserve_unit_iters=True)
v38 = sch.sample_categorical(candidates=[32, 64, 128, 256, 512, 1024], probs=[0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666], decision=5)
l39, l40 = sch.split(loop=l37, factors=[None, v38], preserve_unit_iters=True)
sch.bind(loop=l39, thread_axis="blockIdx.x")
sch.bind(loop=l40, thread_axis="threadIdx.x")
b41 = sch.cache_write(block=b0, write_buffer_index=0, storage_scope="local")
sch.reverse_compute_at(block=b41, loop=l40, preserve_unit_loops=True, index=-1)
sch.compute_at(block=b28, loop=l40, preserve_unit_loops=True, index=-1)
sch.set_scope(block=b28, buffer_index=0, storage_scope="local")
sch.compute_inline(block=b30)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSSRRSRS")
l42, l43, l44, l45, l46 = sch.get_loops(block=b1)
v47, v48, v49, v50, v51 = sch.sample_perfect_tile(loop=l42, n=5, max_innermost_factor=64, decision=[3, 2, 1, 1, 1])
l52, l53, l54, l55, l56 = sch.split(loop=l42, factors=[v47, v48, v49, v50, v51], preserve_unit_iters=True)
v57, v58, v59, v60, v61 = sch.sample_perfect_tile(loop=l43, n=5, max_innermost_factor=64, decision=[3, 1, 2, 1, 1])
l62, l63, l64, l65, l66 = sch.split(loop=l43, factors=[v57, v58, v59, v60, v61], preserve_unit_iters=True)
v67, v68, v69, v70, v71 = sch.sample_perfect_tile(loop=l44, n=5, max_innermost_factor=64, decision=[2, 16, 8, 1, 1])
l72, l73, l74, l75, l76 = sch.split(loop=l44, factors=[v67, v68, v69, v70, v71], preserve_unit_iters=True)
v77, v78, v79, v80, v81 = sch.sample_perfect_tile(loop=l45, n=5, max_innermost_factor=64, decision=[1, 14, 2, 7, 1])
l82, l83, l84, l85, l86 = sch.split(loop=l45, factors=[v77, v78, v79, v80, v81], preserve_unit_iters=True)
v87, v88, v89 = sch.sample_perfect_tile(loop=l46, n=3, max_innermost_factor=64, decision=[256, 1, 1])
l90, l91, l92 = sch.split(loop=l46, factors=[v87, v88, v89], preserve_unit_iters=True)
sch.reorder(l52, l62, l72, l82, l53, l63, l73, l83, l54, l64, l74, l84, l90, l91, l55, l65, l75, l85, l92, l56, l66, l76, l86)
l93 = sch.fuse(l52, l62, l72, l82, preserve_unit_iters=True)
sch.bind(loop=l93, thread_axis="blockIdx.x")
l94 = sch.fuse(l53, l63, l73, l83, preserve_unit_iters=True)
sch.bind(loop=l94, thread_axis="vthread.x")
l95 = sch.fuse(l54, l64, l74, l84, preserve_unit_iters=True)
sch.bind(loop=l95, thread_axis="threadIdx.x")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_low_inclusive", ann_val=32)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_high_inclusive", ann_val=1024)
b96 = sch.cache_write(block=b1, write_buffer_index=0, storage_scope="local")
sch.reverse_compute_at(block=b96, loop=l95, preserve_unit_loops=True, index=-1)
b97 = sch.cache_read(block=b1, read_buffer_index=0, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b97, loop=l90, preserve_unit_loops=True, index=-1)
l98, l99, l100, l101, l102, l103, l104, l105 = sch.get_loops(block=b97)
l106 = sch.fuse(l102, l103, l104, l105, preserve_unit_iters=True)
v107 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=0)
sch.annotate(block_or_loop=b97, ann_key="meta_schedule.cooperative_fetch", ann_val=v107)
b108 = sch.cache_read(block=b1, read_buffer_index=1, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b108, loop=l90, preserve_unit_loops=True, index=-1)
l109, l110, l111, l112, l113, l114, l115, l116 = sch.get_loops(block=b108)
l117 = sch.fuse(l113, l114, l115, l116, preserve_unit_iters=True)
v118 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=1)
sch.annotate(block_or_loop=b108, ann_key="meta_schedule.cooperative_fetch", ann_val=v118)
l119 = sch.fuse(l90, preserve_unit_iters=True)
sch.annotate(block_or_loop=l119, ann_key="software_pipeline_stage", ann_val=[0, 0, 3])
sch.annotate(block_or_loop=l119, ann_key="software_pipeline_order", ann_val=[0, 1, 2])
sch.annotate(block_or_loop=l119, ann_key="software_pipeline_async_stages", ann_val=[0])
sch.reverse_compute_inline(block=b5)
sch.reverse_compute_inline(block=b4)
v120 = sch.sample_categorical(candidates=[0, 16, 64, 512, 1024], probs=[0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001], decision=4)
sch.annotate(block_or_loop=b6, ann_key="meta_schedule.unroll_explicit", ann_val=v120)
l121, l122, l123, l124, l125, l126 = sch.get_loops(block=b3)
l127 = sch.fuse(l121, l122, l123, l124, preserve_unit_iters=True)
v128 = sch.sample_categorical(candidates=[32, 64, 128, 256, 512, 1024], probs=[0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666], decision=2)
l129, l130 = sch.split(loop=l127, factors=[None, v128], preserve_unit_iters=True)
sch.bind(loop=l129, thread_axis="blockIdx.x")
sch.bind(loop=l130, thread_axis="threadIdx.x")
sch.enter_postproc()
sch.unannotate(block_or_loop=b97, ann_key="meta_schedule.cooperative_fetch")
l131, l132, l133, l134, l135 = sch.get_loops(block=b97)
l136, l137 = sch.split(loop=l135, factors=[None, 32], preserve_unit_iters=True)
sch.bind(loop=l137, thread_axis="threadIdx.x")
sch.unannotate(block_or_loop=b108, ann_key="meta_schedule.cooperative_fetch")
l138, l139, l140, l141, l142 = sch.get_loops(block=b108)
l143, l144, l145 = sch.split(loop=l142, factors=[None, 32, 2], preserve_unit_iters=True)
sch.vectorize(loop=l145)
sch.bind(loop=l144, thread_axis="threadIdx.x")
b146 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b146, ann_key="meta_schedule.unroll_explicit")
b147, b148, b149, b150, b151, b152, b153, b154, b155 = sch.get_child_blocks(b146)
l156, l157, l158, l159, l160, l161 = sch.get_loops(block=b147)
l162, l163, l164, l165, l166, l167 = sch.get_loops(block=b148)
sch.annotate(block_or_loop=l162, ann_key="pragma_auto_unroll_max_step", ann_val=1024)
sch.annotate(block_or_loop=l162, ann_key="pragma_unroll_explicit", ann_val=1)
l168, l169, l170, l171, l172, l173 = sch.get_loops(block=b149)
l174, l175, l176, l177, l178, l179 = sch.get_loops(block=b150)
l180, l181, l182, l183, l184, l185, l186 = sch.get_loops(block=b151)
l187, l188, l189, l190, l191, l192, l193, l194, l195, l196, l197, l198, l199, l200 = sch.get_loops(block=b152)
sch.annotate(block_or_loop=l187, ann_key="pragma_auto_unroll_max_step", ann_val=1024)
sch.annotate(block_or_loop=l187, ann_key="pragma_unroll_explicit", ann_val=1)
l201, l202, l203, l204, l205, l206, l207 = sch.get_loops(block=b153)
l208, l209, l210, l211, l212, l213, l214, l215 = sch.get_loops(block=b154)
sch.annotate(block_or_loop=l208, ann_key="pragma_auto_unroll_max_step", ann_val=1024)
sch.annotate(block_or_loop=l208, ann_key="pragma_unroll_explicit", ann_val=1)
l216, l217, l218, l219 = sch.get_loops(block=b155)
b220 = sch.get_block(name="data_pack", func_name="main")
l221, l222, l223, l224, l225, l226 = sch.get_loops(block=b220)
b227 = sch.decompose_reduction(block=b220, loop=l225)
b228 = sch.get_block(name="bgemm", func_name="main")
l229, l230, l231, l232, l233, l234, l235, l236, l237, l238, l239, l240, l241, l242 = sch.get_loops(block=b228)
b243 = sch.decompose_reduction(block=b228, loop=l232)
b244 = sch.get_block(name="inverse", func_name="main")
l245, l246, l247, l248, l249, l250, l251, l252 = sch.get_loops(block=b244)
b253 = sch.decompose_reduction(block=b244, loop=l251)
2024-04-29 00:33:49 [INFO] [task_scheduler.cc:121] [Task #5: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #708: Error in building:
LocalBuilder: Timeout, killed after 30.0 seconds
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(256), T.int64(56), T.int64(56)), "float32"), p1: T.Buffer((T.int64(6), T.int64(6), T.int64(256), T.int64(256)), "float32"), p2: T.Buffer((T.int64(1), T.int64(256), T.int64(1), T.int64(1)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(256), T.int64(56), T.int64(56)), "float32")):
        T.func_attr({"layout_free_buffers": [1], "tir.noalias": T.bool(True)})
        # with T.block("root"):
        input_tile_local = T.alloc_buffer((T.int64(256), T.int64(196), T.int64(6), T.int64(6)), scope="local")
        data_pack = T.alloc_buffer((T.int64(6), T.int64(6), T.int64(256), T.int64(196)))
        bgemm = T.alloc_buffer((T.int64(6), T.int64(6), T.int64(256), T.int64(196)))
        inverse_local = T.alloc_buffer((T.int64(256), T.int64(196), T.int64(4), T.int64(4)), scope="local")
        data_pack_local = T.alloc_buffer((T.int64(6), T.int64(6), T.int64(256), T.int64(196)), scope="local")
        bgemm_local = T.alloc_buffer((T.int64(6), T.int64(6), T.int64(256), T.int64(196)), scope="local")
        data_pack_shared = T.alloc_buffer((T.int64(6), T.int64(6), T.int64(256), T.int64(196)), scope="shared")
        p1_shared = T.alloc_buffer((T.int64(6), T.int64(6), T.int64(256), T.int64(256)), scope="shared")
        for ci_p_fused_0 in T.thread_binding(T.int64(49), thread="blockIdx.x", annotations={"pragma_auto_unroll_max_step": 1024, "pragma_unroll_explicit": 1}):
            for ci_p_fused_1 in T.thread_binding(T.int64(1024), thread="threadIdx.x"):
                for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(1), T.int64(6), T.int64(6)):
                    with T.block("input_tile"):
                        v_ci = T.axis.spatial(T.int64(256), (ci_p_fused_0 * T.int64(1024) + ci_p_fused_1) // T.int64(196) + ax0)
                        v_p = T.axis.spatial(T.int64(196), (ci_p_fused_0 * T.int64(44) + ci_p_fused_1) % T.int64(196) + ax1)
                        v_eps, v_nu = T.axis.remap("SS", [ax2, ax3])
                        T.reads(p0[v_p // T.int64(196), v_ci, v_p % T.int64(196) // T.int64(14) * T.int64(4) + v_eps - T.int64(1), v_p % T.int64(14) * T.int64(4) + v_nu - T.int64(1)])
                        T.writes(input_tile_local[v_ci, v_p, v_eps, v_nu])
                        T.block_attr({"schedule_rule": "None"})
                        input_tile_local[v_ci, v_p, v_eps, v_nu] = T.if_then_else(T.int64(1) <= v_p % T.int64(196) // T.int64(14) * T.int64(4) + v_eps and v_p % T.int64(196) // T.int64(14) * T.int64(4) + v_eps < T.int64(57) and T.int64(1) <= v_p % T.int64(14) * T.int64(4) + v_nu and v_p % T.int64(14) * T.int64(4) + v_nu < T.int64(57), p0[v_p // T.int64(196), v_ci, v_p % T.int64(196) // T.int64(14) * T.int64(4) + v_eps - T.int64(1), v_p % T.int64(14) * T.int64(4) + v_nu - T.int64(1)], T.float32(0))
                for eps in T.unroll(T.int64(6)):
                    for nu in T.unroll(T.int64(6)):
                        with T.block("data_pack_init"):
                            v_eps, v_nu = T.axis.remap("SS", [eps, nu])
                            v_ci = T.axis.spatial(T.int64(256), (ci_p_fused_0 * T.int64(1024) + ci_p_fused_1) // T.int64(196))
                            v_p = T.axis.spatial(T.int64(196), (ci_p_fused_0 * T.int64(1024) + ci_p_fused_1) % T.int64(196))
                            T.reads()
                            T.writes(data_pack_local[v_eps, v_nu, v_ci, v_p])
                            T.block_attr({"schedule_rule": "conv2d_nchw_winograd_data_pack"})
                            data_pack_local[v_eps, v_nu, v_ci, v_p] = T.float32(0)
                        for r_a in T.unroll(T.int64(6)):
                            for r_b in T.unroll(T.int64(6)):
                                with T.block("data_pack_update"):
                                    v_eps, v_nu = T.axis.remap("SS", [eps, nu])
                                    v_ci = T.axis.spatial(T.int64(256), (ci_p_fused_0 * T.int64(1024) + ci_p_fused_1) // T.int64(196))
                                    v_p = T.axis.spatial(T.int64(196), (ci_p_fused_0 * T.int64(1024) + ci_p_fused_1) % T.int64(196))
                                    v_r_a, v_r_b = T.axis.remap("RR", [r_a, r_b])
                                    T.reads(data_pack_local[v_eps, v_nu, v_ci, v_p], input_tile_local[v_ci, v_p, v_r_a, v_r_b])
                                    T.writes(data_pack_local[v_eps, v_nu, v_ci, v_p])
                                    T.block_attr({"schedule_rule": "conv2d_nchw_winograd_data_pack"})
                                    data_pack_local[v_eps, v_nu, v_ci, v_p] = data_pack_local[v_eps, v_nu, v_ci, v_p] + input_tile_local[v_ci, v_p, v_r_a, v_r_b] * T.Select(v_r_a % T.int64(6) == T.int64(5) and v_eps % T.int64(6) == T.int64(5), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(5) and v_eps % T.int64(6) == T.int64(4), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(5) and v_eps % T.int64(6) == T.int64(3), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(5) and v_eps % T.int64(6) == T.int64(2), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(5) and v_eps % T.int64(6) == T.int64(1), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(5) and v_eps % T.int64(6) == T.int64(0), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(4) and v_eps % T.int64(6) == T.int64(5), T.float32(1.5), T.Select(v_r_a % T.int64(6) == T.int64(4) and v_eps % T.int64(6) == T.int64(4), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(4) and v_eps % T.int64(6) == T.int64(3), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(4) and v_eps % T.int64(6) == T.int64(2), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(4) and v_eps % T.int64(6) == T.int64(1), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(4) and v_eps % T.int64(6) == T.int64(0), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(3) and v_eps % T.int64(6) == T.int64(5), T.float32(-2), T.Select(v_r_a % T.int64(6) == T.int64(3) and v_eps % T.int64(6) == T.int64(4), T.float32(-0.5), T.Select(v_r_a % T.int64(6) == T.int64(3) and v_eps % T.int64(6) == T.int64(3), T.float32(2), T.Select(v_r_a % T.int64(6) == T.int64(3) and v_eps % T.int64(6) == T.int64(2), T.float32(2.5), T.Select(v_r_a % T.int64(6) == T.int64(3) and v_eps % T.int64(6) == T.int64(1), T.float32(0.5), T.Select(v_r_a % T.int64(6) == T.int64(3) and v_eps % T.int64(6) == T.int64(0), T.float32(1.5), T.Select(v_r_a % T.int64(6) == T.int64(2) and v_eps % T.int64(6) == T.int64(5), T.float32(-1.5), T.Select(v_r_a % T.int64(6) == T.int64(2) and v_eps % T.int64(6) == T.int64(4), T.float32(-1), T.Select(v_r_a % T.int64(6) == T.int64(2) and v_eps % T.int64(6) == T.int64(3), T.float32(-1), T.Select(v_r_a % T.int64(6) == T.int64(2) and v_eps % T.int64(6) == T.int64(2), T.float32(0.5), T.Select(v_r_a % T.int64(6) == T.int64(2) and v_eps % T.int64(6) == T.int64(1), T.float32(-2.5), T.Select(v_r_a % T.int64(6) == T.int64(2) and v_eps % T.int64(6) == T.int64(0), T.float32(-2), T.Select(v_r_a % T.int64(6) == T.int64(1) and v_eps % T.int64(6) == T.int64(5), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(1) and v_eps % T.int64(6) == T.int64(4), T.float32(0.5), T.Select(v_r_a % T.int64(6) == T.int64(1) and v_eps % T.int64(6) == T.int64(3), T.float32(-2), T.Select(v_r_a % T.int64(6) == T.int64(1) and v_eps % T.int64(6) == T.int64(2), T.float32(-1), T.Select(v_r_a % T.int64(6) == T.int64(1) and v_eps % T.int64(6) == T.int64(1), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(1) and v_eps % T.int64(6) == T.int64(0), T.float32(-1.5), T.Select(v_r_a % T.int64(6) == T.int64(0) and v_eps % T.int64(6) == T.int64(5), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(0) and v_eps % T.int64(6) == T.int64(4), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(0) and v_eps % T.int64(6) == T.int64(3), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(0) and v_eps % T.int64(6) == T.int64(2), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(0) and v_eps % T.int64(6) == T.int64(1), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(0) and v_eps % T.int64(6) == T.int64(0), T.float32(1), T.float32(0))))))))))))))))))))))))))))))))))))) * T.Select(v_r_b % T.int64(6) == T.int64(5) and v_nu % T.int64(6) == T.int64(5), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(5) and v_nu % T.int64(6) == T.int64(4), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(5) and v_nu % T.int64(6) == T.int64(3), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(5) and v_nu % T.int64(6) == T.int64(2), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(5) and v_nu % T.int64(6) == T.int64(1), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(5) and v_nu % T.int64(6) == T.int64(0), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(4) and v_nu % T.int64(6) == T.int64(5), T.float32(1.5), T.Select(v_r_b % T.int64(6) == T.int64(4) and v_nu % T.int64(6) == T.int64(4), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(4) and v_nu % T.int64(6) == T.int64(3), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(4) and v_nu % T.int64(6) == T.int64(2), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(4) and v_nu % T.int64(6) == T.int64(1), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(4) and v_nu % T.int64(6) == T.int64(0), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(3) and v_nu % T.int64(6) == T.int64(5), T.float32(-2), T.Select(v_r_b % T.int64(6) == T.int64(3) and v_nu % T.int64(6) == T.int64(4), T.float32(-0.5), T.Select(v_r_b % T.int64(6) == T.int64(3) and v_nu % T.int64(6) == T.int64(3), T.float32(2), T.Select(v_r_b % T.int64(6) == T.int64(3) and v_nu % T.int64(6) == T.int64(2), T.float32(2.5), T.Select(v_r_b % T.int64(6) == T.int64(3) and v_nu % T.int64(6) == T.int64(1), T.float32(0.5), T.Select(v_r_b % T.int64(6) == T.int64(3) and v_nu % T.int64(6) == T.int64(0), T.float32(1.5), T.Select(v_r_b % T.int64(6) == T.int64(2) and v_nu % T.int64(6) == T.int64(5), T.float32(-1.5), T.Select(v_r_b % T.int64(6) == T.int64(2) and v_nu % T.int64(6) == T.int64(4), T.float32(-1), T.Select(v_r_b % T.int64(6) == T.int64(2) and v_nu % T.int64(6) == T.int64(3), T.float32(-1), T.Select(v_r_b % T.int64(6) == T.int64(2) and v_nu % T.int64(6) == T.int64(2), T.float32(0.5), T.Select(v_r_b % T.int64(6) == T.int64(2) and v_nu % T.int64(6) == T.int64(1), T.float32(-2.5), T.Select(v_r_b % T.int64(6) == T.int64(2) and v_nu % T.int64(6) == T.int64(0), T.float32(-2), T.Select(v_r_b % T.int64(6) == T.int64(1) and v_nu % T.int64(6) == T.int64(5), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(1) and v_nu % T.int64(6) == T.int64(4), T.float32(0.5), T.Select(v_r_b % T.int64(6) == T.int64(1) and v_nu % T.int64(6) == T.int64(3), T.float32(-2), T.Select(v_r_b % T.int64(6) == T.int64(1) and v_nu % T.int64(6) == T.int64(2), T.float32(-1), T.Select(v_r_b % T.int64(6) == T.int64(1) and v_nu % T.int64(6) == T.int64(1), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(1) and v_nu % T.int64(6) == T.int64(0), T.float32(-1.5), T.Select(v_r_b % T.int64(6) == T.int64(0) and v_nu % T.int64(6) == T.int64(5), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(0) and v_nu % T.int64(6) == T.int64(4), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(0) and v_nu % T.int64(6) == T.int64(3), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(0) and v_nu % T.int64(6) == T.int64(2), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(0) and v_nu % T.int64(6) == T.int64(1), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(0) and v_nu % T.int64(6) == T.int64(0), T.float32(1), T.float32(0)))))))))))))))))))))))))))))))))))))
                for ax0, ax1, ax2, ax3 in T.grid(T.int64(6), T.int64(6), T.int64(1), T.int64(1)):
                    with T.block("data_pack_local"):
                        v0, v1 = T.axis.remap("SS", [ax0, ax1])
                        v2 = T.axis.spatial(T.int64(256), (ci_p_fused_0 * T.int64(1024) + ci_p_fused_1) // T.int64(196) + ax2)
                        v3 = T.axis.spatial(T.int64(196), (ci_p_fused_0 * T.int64(44) + ci_p_fused_1) % T.int64(196) + ax3)
                        T.reads(data_pack_local[v0, v1, v2, v3])
                        T.writes(data_pack[v0, v1, v2, v3])
                        data_pack[v0, v1, v2, v3] = data_pack_local[v0, v1, v2, v3]
        for eps_0_nu_0_co_0_p_0_fused in T.thread_binding(T.int64(18), thread="blockIdx.x", annotations={"pragma_auto_unroll_max_step": 1024, "pragma_unroll_explicit": 1}):
            for eps_1_nu_1_co_1_p_1_fused in T.thread_binding(T.int64(224), thread="vthread.x"):
                for eps_2_nu_2_co_2_p_2_fused in T.thread_binding(T.int64(32), thread="threadIdx.x"):
                    for eps_3_init, nu_3_init, co_3_init, p_3_init, eps_4_init, nu_4_init, co_4_init, p_4_init in T.grid(T.int64(1), T.int64(1), T.int64(1), T.int64(7), T.int64(1), T.int64(1), T.int64(2), T.int64(1)):
                        with T.block("bgemm_init"):
                            v_eps = T.axis.spatial(T.int64(6), eps_0_nu_0_co_0_p_0_fused // T.int64(6) * T.int64(2) + eps_1_nu_1_co_1_p_1_fused // T.int64(112) + eps_3_init + eps_4_init)
                            v_nu = T.axis.spatial(T.int64(6), eps_0_nu_0_co_0_p_0_fused % T.int64(6) // T.int64(2) * T.int64(2) + eps_2_nu_2_co_2_p_2_fused // T.int64(16) + nu_3_init + nu_4_init)
                            v_co = T.axis.spatial(T.int64(256), eps_0_nu_0_co_0_p_0_fused % T.int64(2) * T.int64(128) + eps_1_nu_1_co_1_p_1_fused % T.int64(112) // T.int64(14) * T.int64(16) + eps_2_nu_2_co_2_p_2_fused % T.int64(16) // T.int64(2) * T.int64(2) + co_3_init * T.int64(2) + co_4_init)
                            v_p = T.axis.spatial(T.int64(196), eps_1_nu_1_co_1_p_1_fused % T.int64(14) * T.int64(14) + eps_2_nu_2_co_2_p_2_fused % T.int64(2) * T.int64(7) + p_3_init + p_4_init)
                            T.reads()
                            T.writes(bgemm_local[v_eps, v_nu, v_co, v_p])
                            T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 32, "meta_schedule.tiling_structure": "SSSRRSRS"})
                            bgemm_local[v_eps, v_nu, v_co, v_p] = T.float32(0)
                    for ci_0_fused in T.serial(T.int64(256), annotations={"software_pipeline_async_stages": [0], "software_pipeline_order": [0, 1, 2], "software_pipeline_stage": [0, 0, 3]}):
                        for ax0_ax1_ax2_ax3_fused_0 in range(T.int64(25)):
                            for ax0_ax1_ax2_ax3_fused_1 in T.thread_binding(T.int64(32), thread="threadIdx.x"):
                                with T.block("data_pack_shared"):
                                    v0 = T.axis.spatial(T.int64(6), eps_0_nu_0_co_0_p_0_fused // T.int64(6) * T.int64(2) + (ax0_ax1_ax2_ax3_fused_0 * T.int64(32) + ax0_ax1_ax2_ax3_fused_1) // T.int64(392))
                                    v1 = T.axis.spatial(T.int64(6), eps_0_nu_0_co_0_p_0_fused % T.int64(6) // T.int64(2) * T.int64(2) + (ax0_ax1_ax2_ax3_fused_0 * T.int64(32) + ax0_ax1_ax2_ax3_fused_1) % T.int64(392) // T.int64(196))
                                    v2 = T.axis.spatial(T.int64(256), ci_0_fused)
                                    v3 = T.axis.spatial(T.int64(196), (ax0_ax1_ax2_ax3_fused_0 * T.int64(32) + ax0_ax1_ax2_ax3_fused_1) % T.int64(196))
                                    T.where(ax0_ax1_ax2_ax3_fused_0 * T.int64(32) + ax0_ax1_ax2_ax3_fused_1 < T.int64(784))
                                    T.reads(data_pack[v0, v1, v2, v3])
                                    T.writes(data_pack_shared[v0, v1, v2, v3])
                                    data_pack_shared[v0, v1, v2, v3] = data_pack[v0, v1, v2, v3]
                        for ax0_ax1_ax2_ax3_fused_0 in range(T.int64(8)):
                            for ax0_ax1_ax2_ax3_fused_1 in T.thread_binding(T.int64(32), thread="threadIdx.x"):
                                for ax0_ax1_ax2_ax3_fused_2 in T.vectorized(T.int64(2)):
                                    with T.block("p1_shared"):
                                        v0 = T.axis.spatial(T.int64(6), eps_0_nu_0_co_0_p_0_fused // T.int64(6) * T.int64(2) + (ax0_ax1_ax2_ax3_fused_0 * T.int64(64) + ax0_ax1_ax2_ax3_fused_1 * T.int64(2) + ax0_ax1_ax2_ax3_fused_2) // T.int64(256))
                                        v1 = T.axis.spatial(T.int64(6), eps_0_nu_0_co_0_p_0_fused % T.int64(6) // T.int64(2) * T.int64(2) + (ax0_ax1_ax2_ax3_fused_0 * T.int64(64) + ax0_ax1_ax2_ax3_fused_1 * T.int64(2) + ax0_ax1_ax2_ax3_fused_2) % T.int64(256) // T.int64(128))
                                        v2 = T.axis.spatial(T.int64(256), ci_0_fused)
                                        v3 = T.axis.spatial(T.int64(256), eps_0_nu_0_co_0_p_0_fused % T.int64(2) * T.int64(128) + (ax0_ax1_ax2_ax3_fused_0 * T.int64(64) + ax0_ax1_ax2_ax3_fused_1 * T.int64(2) + ax0_ax1_ax2_ax3_fused_2) % T.int64(128))
                                        T.reads(p1[v0, v1, v2, v3])
                                        T.writes(p1_shared[v0, v1, v2, v3])
                                        p1_shared[v0, v1, v2, v3] = p1[v0, v1, v2, v3]
                        for ci_1, eps_3, nu_3, co_3, p_3, ci_2, eps_4, nu_4, co_4, p_4 in T.grid(T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(7), T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(1)):
                            with T.block("bgemm_update"):
                                v_eps = T.axis.spatial(T.int64(6), eps_0_nu_0_co_0_p_0_fused // T.int64(6) * T.int64(2) + eps_1_nu_1_co_1_p_1_fused // T.int64(112) + eps_3 + eps_4)
                                v_nu = T.axis.spatial(T.int64(6), eps_0_nu_0_co_0_p_0_fused % T.int64(6) // T.int64(2) * T.int64(2) + eps_2_nu_2_co_2_p_2_fused // T.int64(16) + nu_3 + nu_4)
                                v_co = T.axis.spatial(T.int64(256), eps_0_nu_0_co_0_p_0_fused % T.int64(2) * T.int64(128) + eps_1_nu_1_co_1_p_1_fused % T.int64(112) // T.int64(14) * T.int64(16) + eps_2_nu_2_co_2_p_2_fused % T.int64(16) // T.int64(2) * T.int64(2) + co_3 * T.int64(2) + co_4)
                                v_p = T.axis.spatial(T.int64(196), eps_1_nu_1_co_1_p_1_fused % T.int64(14) * T.int64(14) + eps_2_nu_2_co_2_p_2_fused % T.int64(2) * T.int64(7) + p_3 + p_4)
                                v_ci = T.axis.reduce(T.int64(256), ci_0_fused + ci_1 + ci_2)
                                T.reads(bgemm_local[v_eps, v_nu, v_co, v_p], data_pack_shared[v_eps, v_nu, v_ci, v_p], p1_shared[v_eps, v_nu, v_ci, v_co])
                                T.writes(bgemm_local[v_eps, v_nu, v_co, v_p])
                                T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 32, "meta_schedule.tiling_structure": "SSSRRSRS"})
                                bgemm_local[v_eps, v_nu, v_co, v_p] = bgemm_local[v_eps, v_nu, v_co, v_p] + data_pack_shared[v_eps, v_nu, v_ci, v_p] * p1_shared[v_eps, v_nu, v_ci, v_co]
                    for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(1), T.int64(2), T.int64(7)):
                        with T.block("bgemm_local"):
                            v0 = T.axis.spatial(T.int64(6), eps_0_nu_0_co_0_p_0_fused // T.int64(6) * T.int64(2) + eps_1_nu_1_co_1_p_1_fused // T.int64(112) + ax0)
                            v1 = T.axis.spatial(T.int64(6), eps_0_nu_0_co_0_p_0_fused % T.int64(6) // T.int64(2) * T.int64(2) + eps_2_nu_2_co_2_p_2_fused // T.int64(16) + ax1)
                            v2 = T.axis.spatial(T.int64(256), eps_0_nu_0_co_0_p_0_fused % T.int64(2) * T.int64(128) + eps_1_nu_1_co_1_p_1_fused % T.int64(112) // T.int64(14) * T.int64(16) + eps_2_nu_2_co_2_p_2_fused % T.int64(16) // T.int64(2) * T.int64(2) + ax2)
                            v3 = T.axis.spatial(T.int64(196), eps_1_nu_1_co_1_p_1_fused % T.int64(14) * T.int64(14) + eps_2_nu_2_co_2_p_2_fused % T.int64(2) * T.int64(7) + ax3)
                            T.reads(bgemm_local[v0, v1, v2, v3])
                            T.writes(bgemm[v0, v1, v2, v3])
                            bgemm[v0, v1, v2, v3] = bgemm_local[v0, v1, v2, v3]
        for n_co_h_0_w_0_fused_0 in T.thread_binding(T.int64(392), thread="blockIdx.x", annotations={"pragma_auto_unroll_max_step": 1024, "pragma_unroll_explicit": 1}):
            for n_co_h_0_w_0_fused_1 in T.thread_binding(T.int64(128), thread="threadIdx.x"):
                for ax0, ax1 in T.grid(T.int64(1), T.int64(1)):
                    for ax2 in T.unroll(T.int64(4)):
                        for ax3 in T.unroll(T.int64(4)):
                            with T.block("inverse_init"):
                                v_co = T.axis.spatial(T.int64(256), (n_co_h_0_w_0_fused_0 * T.int64(128) + n_co_h_0_w_0_fused_1) // T.int64(196) + ax0)
                                v_p = T.axis.spatial(T.int64(196), (n_co_h_0_w_0_fused_0 * T.int64(128) + n_co_h_0_w_0_fused_1) % T.int64(196) + ax1)
                                v_vh, v_vw = T.axis.remap("SS", [ax2, ax3])
                                T.reads()
                                T.writes(inverse_local[v_co, v_p, v_vh, v_vw])
                                T.block_attr({"schedule_rule": "conv2d_nchw_winograd_inverse"})
                                inverse_local[v_co, v_p, v_vh, v_vw] = T.float32(0)
                            for ax4 in T.unroll(T.int64(6)):
                                for ax5 in T.unroll(T.int64(6)):
                                    with T.block("inverse_update"):
                                        v_co = T.axis.spatial(T.int64(256), (n_co_h_0_w_0_fused_0 * T.int64(128) + n_co_h_0_w_0_fused_1) // T.int64(196) + ax0)
                                        v_p = T.axis.spatial(T.int64(196), (n_co_h_0_w_0_fused_0 * T.int64(128) + n_co_h_0_w_0_fused_1) % T.int64(196) + ax1)
                                        v_vh, v_vw, v_r_a, v_r_b = T.axis.remap("SSRR", [ax2, ax3, ax4, ax5])
                                        T.reads(inverse_local[v_co, v_p, v_vh, v_vw], bgemm[v_r_a, v_r_b, v_co, v_p])
                                        T.writes(inverse_local[v_co, v_p, v_vh, v_vw])
                                        T.block_attr({"schedule_rule": "conv2d_nchw_winograd_inverse"})
                                        inverse_local[v_co, v_p, v_vh, v_vw] = inverse_local[v_co, v_p, v_vh, v_vw] + bgemm[v_r_a, v_r_b, v_co, v_p] * T.Select(v_r_a % T.int64(6) == T.int64(5) and v_vh % T.int64(4) == T.int64(3), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(5) and v_vh % T.int64(4) == T.int64(2), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(5) and v_vh % T.int64(4) == T.int64(1), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(5) and v_vh % T.int64(4) == T.int64(0), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(4) and v_vh % T.int64(4) == T.int64(3), T.float32(-8), T.Select(v_r_a % T.int64(6) == T.int64(4) and v_vh % T.int64(4) == T.int64(2), T.float32(4), T.Select(v_r_a % T.int64(6) == T.int64(4) and v_vh % T.int64(4) == T.int64(1), T.float32(-2), T.Select(v_r_a % T.int64(6) == T.int64(4) and v_vh % T.int64(4) == T.int64(0), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(3) and v_vh % T.int64(4) == T.int64(3), T.float32(0.125), T.Select(v_r_a % T.int64(6) == T.int64(3) and v_vh % T.int64(4) == T.int64(2), T.float32(0.25), T.Select(v_r_a % T.int64(6) == T.int64(3) and v_vh % T.int64(4) == T.int64(1), T.float32(0.5), T.Select(v_r_a % T.int64(6) == T.int64(3) and v_vh % T.int64(4) == T.int64(0), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(2) and v_vh % T.int64(4) == T.int64(3), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(2) and v_vh % T.int64(4) == T.int64(2), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(2) and v_vh % T.int64(4) == T.int64(1), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(2) and v_vh % T.int64(4) == T.int64(0), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(1) and v_vh % T.int64(4) == T.int64(3), T.float32(-1), T.Select(v_r_a % T.int64(6) == T.int64(1) and v_vh % T.int64(4) == T.int64(2), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(1) and v_vh % T.int64(4) == T.int64(1), T.float32(-1), T.Select(v_r_a % T.int64(6) == T.int64(1) and v_vh % T.int64(4) == T.int64(0), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(0) and v_vh % T.int64(4) == T.int64(3), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(0) and v_vh % T.int64(4) == T.int64(2), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(0) and v_vh % T.int64(4) == T.int64(1), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(0) and v_vh % T.int64(4) == T.int64(0), T.float32(1), T.float32(0))))))))))))))))))))))))) * T.Select(v_r_b % T.int64(6) == T.int64(5) and v_vw % T.int64(4) == T.int64(3), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(5) and v_vw % T.int64(4) == T.int64(2), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(5) and v_vw % T.int64(4) == T.int64(1), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(5) and v_vw % T.int64(4) == T.int64(0), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(4) and v_vw % T.int64(4) == T.int64(3), T.float32(-8), T.Select(v_r_b % T.int64(6) == T.int64(4) and v_vw % T.int64(4) == T.int64(2), T.float32(4), T.Select(v_r_b % T.int64(6) == T.int64(4) and v_vw % T.int64(4) == T.int64(1), T.float32(-2), T.Select(v_r_b % T.int64(6) == T.int64(4) and v_vw % T.int64(4) == T.int64(0), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(3) and v_vw % T.int64(4) == T.int64(3), T.float32(0.125), T.Select(v_r_b % T.int64(6) == T.int64(3) and v_vw % T.int64(4) == T.int64(2), T.float32(0.25), T.Select(v_r_b % T.int64(6) == T.int64(3) and v_vw % T.int64(4) == T.int64(1), T.float32(0.5), T.Select(v_r_b % T.int64(6) == T.int64(3) and v_vw % T.int64(4) == T.int64(0), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(2) and v_vw % T.int64(4) == T.int64(3), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(2) and v_vw % T.int64(4) == T.int64(2), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(2) and v_vw % T.int64(4) == T.int64(1), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(2) and v_vw % T.int64(4) == T.int64(0), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(1) and v_vw % T.int64(4) == T.int64(3), T.float32(-1), T.Select(v_r_b % T.int64(6) == T.int64(1) and v_vw % T.int64(4) == T.int64(2), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(1) and v_vw % T.int64(4) == T.int64(1), T.float32(-1), T.Select(v_r_b % T.int64(6) == T.int64(1) and v_vw % T.int64(4) == T.int64(0), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(0) and v_vw % T.int64(4) == T.int64(3), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(0) and v_vw % T.int64(4) == T.int64(2), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(0) and v_vw % T.int64(4) == T.int64(1), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(0) and v_vw % T.int64(4) == T.int64(0), T.float32(1), T.float32(0)))))))))))))))))))))))))
                for h_1, w_1 in T.grid(T.int64(4), T.int64(4)):
                    with T.block("conv2d_winograd"):
                        v_n = T.axis.spatial(T.int64(1), T.int64(0))
                        v_co = T.axis.spatial(T.int64(256), (n_co_h_0_w_0_fused_0 * T.int64(128) + n_co_h_0_w_0_fused_1) // T.int64(196))
                        v_h = T.axis.spatial(T.int64(56), (n_co_h_0_w_0_fused_0 * T.int64(128) + n_co_h_0_w_0_fused_1) % T.int64(196) // T.int64(14) * T.int64(4) + h_1)
                        v_w = T.axis.spatial(T.int64(56), (n_co_h_0_w_0_fused_0 * T.int64(128) + n_co_h_0_w_0_fused_1) % T.int64(14) * T.int64(4) + w_1)
                        T.reads(inverse_local[v_co, v_n * T.int64(196) + v_h // T.int64(4) * T.int64(14) + v_w // T.int64(4), v_h % T.int64(4), v_w % T.int64(4)], p2[v_n, v_co, T.int64(0), T.int64(0)])
                        T.writes(T_relu[v_n, v_co, v_h, v_w])
                        T_relu[v_n, v_co, v_h, v_w] = T.max(inverse_local[v_co, v_n * T.int64(196) + v_h // T.int64(4) * T.int64(14) + v_w // T.int64(4), v_h % T.int64(4), v_w % T.int64(4)] + p2[v_n, v_co, T.int64(0), T.int64(0)], T.float32(0))
b0 = sch.get_block(name="data_pack", func_name="main")
b1 = sch.get_block(name="bgemm", func_name="main")
b2 = sch.get_block(name="inverse", func_name="main")
b3 = sch.get_block(name="conv2d_winograd", func_name="main")
b4 = sch.get_block(name="T_add", func_name="main")
b5 = sch.get_block(name="T_relu", func_name="main")
b6 = sch.get_block(name="root", func_name="main")
b7, b8 = sch.get_producers(block=b2)
sch.compute_inline(block=b8)
b9, = sch.get_consumers(block=b2)
l10, l11, l12, l13 = sch.get_loops(block=b9)
l14, l15 = sch.split(loop=l12, factors=[None, 4], preserve_unit_iters=True)
l16, l17 = sch.split(loop=l13, factors=[None, 4], preserve_unit_iters=True)
sch.reorder(l14, l16, l15, l17)
sch.compute_at(block=b2, loop=l16, preserve_unit_loops=True, index=-1)
sch.set_scope(block=b2, buffer_index=0, storage_scope="local")
l18, l19, l20, l21, l22, l23, l24, l25, l26, l27 = sch.get_loops(block=b2)
sch.unroll(loop=l24)
sch.unroll(loop=l25)
sch.unroll(loop=l26)
sch.unroll(loop=l27)
b28, b29 = sch.get_producers(block=b0)
sch.compute_inline(block=b29)
b30, = sch.get_producers(block=b28)
l31, l32, l33, l34, l35, l36 = sch.get_loops(block=b0)
sch.reorder(l33, l34, l31, l32, l35, l36)
sch.unroll(loop=l31)
sch.unroll(loop=l32)
sch.unroll(loop=l35)
sch.unroll(loop=l36)
l37 = sch.fuse(l33, l34, preserve_unit_iters=True)
v38 = sch.sample_categorical(candidates=[32, 64, 128, 256, 512, 1024], probs=[0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666], decision=5)
l39, l40 = sch.split(loop=l37, factors=[None, v38], preserve_unit_iters=True)
sch.bind(loop=l39, thread_axis="blockIdx.x")
sch.bind(loop=l40, thread_axis="threadIdx.x")
b41 = sch.cache_write(block=b0, write_buffer_index=0, storage_scope="local")
sch.reverse_compute_at(block=b41, loop=l40, preserve_unit_loops=True, index=-1)
sch.compute_at(block=b28, loop=l40, preserve_unit_loops=True, index=-1)
sch.set_scope(block=b28, buffer_index=0, storage_scope="local")
sch.compute_inline(block=b30)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSSRRSRS")
l42, l43, l44, l45, l46 = sch.get_loops(block=b1)
v47, v48, v49, v50, v51 = sch.sample_perfect_tile(loop=l42, n=5, max_innermost_factor=64, decision=[3, 2, 1, 1, 1])
l52, l53, l54, l55, l56 = sch.split(loop=l42, factors=[v47, v48, v49, v50, v51], preserve_unit_iters=True)
v57, v58, v59, v60, v61 = sch.sample_perfect_tile(loop=l43, n=5, max_innermost_factor=64, decision=[3, 1, 2, 1, 1])
l62, l63, l64, l65, l66 = sch.split(loop=l43, factors=[v57, v58, v59, v60, v61], preserve_unit_iters=True)
v67, v68, v69, v70, v71 = sch.sample_perfect_tile(loop=l44, n=5, max_innermost_factor=64, decision=[2, 8, 8, 1, 2])
l72, l73, l74, l75, l76 = sch.split(loop=l44, factors=[v67, v68, v69, v70, v71], preserve_unit_iters=True)
v77, v78, v79, v80, v81 = sch.sample_perfect_tile(loop=l45, n=5, max_innermost_factor=64, decision=[1, 14, 2, 7, 1])
l82, l83, l84, l85, l86 = sch.split(loop=l45, factors=[v77, v78, v79, v80, v81], preserve_unit_iters=True)
v87, v88, v89 = sch.sample_perfect_tile(loop=l46, n=3, max_innermost_factor=64, decision=[256, 1, 1])
l90, l91, l92 = sch.split(loop=l46, factors=[v87, v88, v89], preserve_unit_iters=True)
sch.reorder(l52, l62, l72, l82, l53, l63, l73, l83, l54, l64, l74, l84, l90, l91, l55, l65, l75, l85, l92, l56, l66, l76, l86)
l93 = sch.fuse(l52, l62, l72, l82, preserve_unit_iters=True)
sch.bind(loop=l93, thread_axis="blockIdx.x")
l94 = sch.fuse(l53, l63, l73, l83, preserve_unit_iters=True)
sch.bind(loop=l94, thread_axis="vthread.x")
l95 = sch.fuse(l54, l64, l74, l84, preserve_unit_iters=True)
sch.bind(loop=l95, thread_axis="threadIdx.x")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_low_inclusive", ann_val=32)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_high_inclusive", ann_val=1024)
b96 = sch.cache_write(block=b1, write_buffer_index=0, storage_scope="local")
sch.reverse_compute_at(block=b96, loop=l95, preserve_unit_loops=True, index=-1)
b97 = sch.cache_read(block=b1, read_buffer_index=0, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b97, loop=l90, preserve_unit_loops=True, index=-1)
l98, l99, l100, l101, l102, l103, l104, l105 = sch.get_loops(block=b97)
l106 = sch.fuse(l102, l103, l104, l105, preserve_unit_iters=True)
v107 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=0)
sch.annotate(block_or_loop=b97, ann_key="meta_schedule.cooperative_fetch", ann_val=v107)
b108 = sch.cache_read(block=b1, read_buffer_index=1, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b108, loop=l90, preserve_unit_loops=True, index=-1)
l109, l110, l111, l112, l113, l114, l115, l116 = sch.get_loops(block=b108)
l117 = sch.fuse(l113, l114, l115, l116, preserve_unit_iters=True)
v118 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=1)
sch.annotate(block_or_loop=b108, ann_key="meta_schedule.cooperative_fetch", ann_val=v118)
l119 = sch.fuse(l90, preserve_unit_iters=True)
sch.annotate(block_or_loop=l119, ann_key="software_pipeline_stage", ann_val=[0, 0, 3])
sch.annotate(block_or_loop=l119, ann_key="software_pipeline_order", ann_val=[0, 1, 2])
sch.annotate(block_or_loop=l119, ann_key="software_pipeline_async_stages", ann_val=[0])
sch.reverse_compute_inline(block=b5)
sch.reverse_compute_inline(block=b4)
v120 = sch.sample_categorical(candidates=[0, 16, 64, 512, 1024], probs=[0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001], decision=4)
sch.annotate(block_or_loop=b6, ann_key="meta_schedule.unroll_explicit", ann_val=v120)
l121, l122, l123, l124, l125, l126 = sch.get_loops(block=b3)
l127 = sch.fuse(l121, l122, l123, l124, preserve_unit_iters=True)
v128 = sch.sample_categorical(candidates=[32, 64, 128, 256, 512, 1024], probs=[0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666], decision=2)
l129, l130 = sch.split(loop=l127, factors=[None, v128], preserve_unit_iters=True)
sch.bind(loop=l129, thread_axis="blockIdx.x")
sch.bind(loop=l130, thread_axis="threadIdx.x")
sch.enter_postproc()
sch.unannotate(block_or_loop=b97, ann_key="meta_schedule.cooperative_fetch")
l131, l132, l133, l134, l135 = sch.get_loops(block=b97)
l136, l137 = sch.split(loop=l135, factors=[None, 32], preserve_unit_iters=True)
sch.bind(loop=l137, thread_axis="threadIdx.x")
sch.unannotate(block_or_loop=b108, ann_key="meta_schedule.cooperative_fetch")
l138, l139, l140, l141, l142 = sch.get_loops(block=b108)
l143, l144, l145 = sch.split(loop=l142, factors=[None, 32, 2], preserve_unit_iters=True)
sch.vectorize(loop=l145)
sch.bind(loop=l144, thread_axis="threadIdx.x")
b146 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b146, ann_key="meta_schedule.unroll_explicit")
b147, b148, b149, b150, b151, b152, b153, b154, b155 = sch.get_child_blocks(b146)
l156, l157, l158, l159, l160, l161 = sch.get_loops(block=b147)
l162, l163, l164, l165, l166, l167 = sch.get_loops(block=b148)
sch.annotate(block_or_loop=l162, ann_key="pragma_auto_unroll_max_step", ann_val=1024)
sch.annotate(block_or_loop=l162, ann_key="pragma_unroll_explicit", ann_val=1)
l168, l169, l170, l171, l172, l173 = sch.get_loops(block=b149)
l174, l175, l176, l177, l178, l179 = sch.get_loops(block=b150)
l180, l181, l182, l183, l184, l185, l186 = sch.get_loops(block=b151)
l187, l188, l189, l190, l191, l192, l193, l194, l195, l196, l197, l198, l199, l200 = sch.get_loops(block=b152)
sch.annotate(block_or_loop=l187, ann_key="pragma_auto_unroll_max_step", ann_val=1024)
sch.annotate(block_or_loop=l187, ann_key="pragma_unroll_explicit", ann_val=1)
l201, l202, l203, l204, l205, l206, l207 = sch.get_loops(block=b153)
l208, l209, l210, l211, l212, l213, l214, l215 = sch.get_loops(block=b154)
sch.annotate(block_or_loop=l208, ann_key="pragma_auto_unroll_max_step", ann_val=1024)
sch.annotate(block_or_loop=l208, ann_key="pragma_unroll_explicit", ann_val=1)
l216, l217, l218, l219 = sch.get_loops(block=b155)
b220 = sch.get_block(name="data_pack", func_name="main")
l221, l222, l223, l224, l225, l226 = sch.get_loops(block=b220)
b227 = sch.decompose_reduction(block=b220, loop=l225)
b228 = sch.get_block(name="bgemm", func_name="main")
l229, l230, l231, l232, l233, l234, l235, l236, l237, l238, l239, l240, l241, l242 = sch.get_loops(block=b228)
b243 = sch.decompose_reduction(block=b228, loop=l232)
b244 = sch.get_block(name="inverse", func_name="main")
l245, l246, l247, l248, l249, l250, l251, l252 = sch.get_loops(block=b244)
b253 = sch.decompose_reduction(block=b244, loop=l251)
2024-04-29 00:33:49 [INFO] [task_scheduler.cc:121] [Task #5: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #709: Error in building:
LocalBuilder: Timeout, killed after 30.0 seconds
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(256), T.int64(56), T.int64(56)), "float32"), p1: T.Buffer((T.int64(6), T.int64(6), T.int64(256), T.int64(256)), "float32"), p2: T.Buffer((T.int64(1), T.int64(256), T.int64(1), T.int64(1)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(256), T.int64(56), T.int64(56)), "float32")):
        T.func_attr({"layout_free_buffers": [1], "tir.noalias": T.bool(True)})
        # with T.block("root"):
        input_tile_local = T.alloc_buffer((T.int64(256), T.int64(196), T.int64(6), T.int64(6)), scope="local")
        data_pack = T.alloc_buffer((T.int64(6), T.int64(6), T.int64(256), T.int64(196)))
        bgemm = T.alloc_buffer((T.int64(6), T.int64(6), T.int64(256), T.int64(196)))
        inverse_local = T.alloc_buffer((T.int64(256), T.int64(196), T.int64(4), T.int64(4)), scope="local")
        data_pack_local = T.alloc_buffer((T.int64(6), T.int64(6), T.int64(256), T.int64(196)), scope="local")
        bgemm_local = T.alloc_buffer((T.int64(6), T.int64(6), T.int64(256), T.int64(196)), scope="local")
        data_pack_shared = T.alloc_buffer((T.int64(6), T.int64(6), T.int64(256), T.int64(196)), scope="shared")
        p1_shared = T.alloc_buffer((T.int64(6), T.int64(6), T.int64(256), T.int64(256)), scope="shared")
        for ci_p_fused_0 in T.thread_binding(T.int64(49), thread="blockIdx.x", annotations={"pragma_auto_unroll_max_step": 1024, "pragma_unroll_explicit": 1}):
            for ci_p_fused_1 in T.thread_binding(T.int64(1024), thread="threadIdx.x"):
                for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(1), T.int64(6), T.int64(6)):
                    with T.block("input_tile"):
                        v_ci = T.axis.spatial(T.int64(256), (ci_p_fused_0 * T.int64(1024) + ci_p_fused_1) // T.int64(196) + ax0)
                        v_p = T.axis.spatial(T.int64(196), (ci_p_fused_0 * T.int64(44) + ci_p_fused_1) % T.int64(196) + ax1)
                        v_eps, v_nu = T.axis.remap("SS", [ax2, ax3])
                        T.reads(p0[v_p // T.int64(196), v_ci, v_p % T.int64(196) // T.int64(14) * T.int64(4) + v_eps - T.int64(1), v_p % T.int64(14) * T.int64(4) + v_nu - T.int64(1)])
                        T.writes(input_tile_local[v_ci, v_p, v_eps, v_nu])
                        T.block_attr({"schedule_rule": "None"})
                        input_tile_local[v_ci, v_p, v_eps, v_nu] = T.if_then_else(T.int64(1) <= v_p % T.int64(196) // T.int64(14) * T.int64(4) + v_eps and v_p % T.int64(196) // T.int64(14) * T.int64(4) + v_eps < T.int64(57) and T.int64(1) <= v_p % T.int64(14) * T.int64(4) + v_nu and v_p % T.int64(14) * T.int64(4) + v_nu < T.int64(57), p0[v_p // T.int64(196), v_ci, v_p % T.int64(196) // T.int64(14) * T.int64(4) + v_eps - T.int64(1), v_p % T.int64(14) * T.int64(4) + v_nu - T.int64(1)], T.float32(0))
                for eps in T.unroll(T.int64(6)):
                    for nu in T.unroll(T.int64(6)):
                        with T.block("data_pack_init"):
                            v_eps, v_nu = T.axis.remap("SS", [eps, nu])
                            v_ci = T.axis.spatial(T.int64(256), (ci_p_fused_0 * T.int64(1024) + ci_p_fused_1) // T.int64(196))
                            v_p = T.axis.spatial(T.int64(196), (ci_p_fused_0 * T.int64(1024) + ci_p_fused_1) % T.int64(196))
                            T.reads()
                            T.writes(data_pack_local[v_eps, v_nu, v_ci, v_p])
                            T.block_attr({"schedule_rule": "conv2d_nchw_winograd_data_pack"})
                            data_pack_local[v_eps, v_nu, v_ci, v_p] = T.float32(0)
                        for r_a in T.unroll(T.int64(6)):
                            for r_b in T.unroll(T.int64(6)):
                                with T.block("data_pack_update"):
                                    v_eps, v_nu = T.axis.remap("SS", [eps, nu])
                                    v_ci = T.axis.spatial(T.int64(256), (ci_p_fused_0 * T.int64(1024) + ci_p_fused_1) // T.int64(196))
                                    v_p = T.axis.spatial(T.int64(196), (ci_p_fused_0 * T.int64(1024) + ci_p_fused_1) % T.int64(196))
                                    v_r_a, v_r_b = T.axis.remap("RR", [r_a, r_b])
                                    T.reads(data_pack_local[v_eps, v_nu, v_ci, v_p], input_tile_local[v_ci, v_p, v_r_a, v_r_b])
                                    T.writes(data_pack_local[v_eps, v_nu, v_ci, v_p])
                                    T.block_attr({"schedule_rule": "conv2d_nchw_winograd_data_pack"})
                                    data_pack_local[v_eps, v_nu, v_ci, v_p] = data_pack_local[v_eps, v_nu, v_ci, v_p] + input_tile_local[v_ci, v_p, v_r_a, v_r_b] * T.Select(v_r_a % T.int64(6) == T.int64(5) and v_eps % T.int64(6) == T.int64(5), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(5) and v_eps % T.int64(6) == T.int64(4), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(5) and v_eps % T.int64(6) == T.int64(3), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(5) and v_eps % T.int64(6) == T.int64(2), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(5) and v_eps % T.int64(6) == T.int64(1), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(5) and v_eps % T.int64(6) == T.int64(0), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(4) and v_eps % T.int64(6) == T.int64(5), T.float32(1.5), T.Select(v_r_a % T.int64(6) == T.int64(4) and v_eps % T.int64(6) == T.int64(4), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(4) and v_eps % T.int64(6) == T.int64(3), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(4) and v_eps % T.int64(6) == T.int64(2), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(4) and v_eps % T.int64(6) == T.int64(1), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(4) and v_eps % T.int64(6) == T.int64(0), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(3) and v_eps % T.int64(6) == T.int64(5), T.float32(-2), T.Select(v_r_a % T.int64(6) == T.int64(3) and v_eps % T.int64(6) == T.int64(4), T.float32(-0.5), T.Select(v_r_a % T.int64(6) == T.int64(3) and v_eps % T.int64(6) == T.int64(3), T.float32(2), T.Select(v_r_a % T.int64(6) == T.int64(3) and v_eps % T.int64(6) == T.int64(2), T.float32(2.5), T.Select(v_r_a % T.int64(6) == T.int64(3) and v_eps % T.int64(6) == T.int64(1), T.float32(0.5), T.Select(v_r_a % T.int64(6) == T.int64(3) and v_eps % T.int64(6) == T.int64(0), T.float32(1.5), T.Select(v_r_a % T.int64(6) == T.int64(2) and v_eps % T.int64(6) == T.int64(5), T.float32(-1.5), T.Select(v_r_a % T.int64(6) == T.int64(2) and v_eps % T.int64(6) == T.int64(4), T.float32(-1), T.Select(v_r_a % T.int64(6) == T.int64(2) and v_eps % T.int64(6) == T.int64(3), T.float32(-1), T.Select(v_r_a % T.int64(6) == T.int64(2) and v_eps % T.int64(6) == T.int64(2), T.float32(0.5), T.Select(v_r_a % T.int64(6) == T.int64(2) and v_eps % T.int64(6) == T.int64(1), T.float32(-2.5), T.Select(v_r_a % T.int64(6) == T.int64(2) and v_eps % T.int64(6) == T.int64(0), T.float32(-2), T.Select(v_r_a % T.int64(6) == T.int64(1) and v_eps % T.int64(6) == T.int64(5), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(1) and v_eps % T.int64(6) == T.int64(4), T.float32(0.5), T.Select(v_r_a % T.int64(6) == T.int64(1) and v_eps % T.int64(6) == T.int64(3), T.float32(-2), T.Select(v_r_a % T.int64(6) == T.int64(1) and v_eps % T.int64(6) == T.int64(2), T.float32(-1), T.Select(v_r_a % T.int64(6) == T.int64(1) and v_eps % T.int64(6) == T.int64(1), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(1) and v_eps % T.int64(6) == T.int64(0), T.float32(-1.5), T.Select(v_r_a % T.int64(6) == T.int64(0) and v_eps % T.int64(6) == T.int64(5), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(0) and v_eps % T.int64(6) == T.int64(4), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(0) and v_eps % T.int64(6) == T.int64(3), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(0) and v_eps % T.int64(6) == T.int64(2), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(0) and v_eps % T.int64(6) == T.int64(1), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(0) and v_eps % T.int64(6) == T.int64(0), T.float32(1), T.float32(0))))))))))))))))))))))))))))))))))))) * T.Select(v_r_b % T.int64(6) == T.int64(5) and v_nu % T.int64(6) == T.int64(5), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(5) and v_nu % T.int64(6) == T.int64(4), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(5) and v_nu % T.int64(6) == T.int64(3), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(5) and v_nu % T.int64(6) == T.int64(2), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(5) and v_nu % T.int64(6) == T.int64(1), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(5) and v_nu % T.int64(6) == T.int64(0), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(4) and v_nu % T.int64(6) == T.int64(5), T.float32(1.5), T.Select(v_r_b % T.int64(6) == T.int64(4) and v_nu % T.int64(6) == T.int64(4), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(4) and v_nu % T.int64(6) == T.int64(3), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(4) and v_nu % T.int64(6) == T.int64(2), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(4) and v_nu % T.int64(6) == T.int64(1), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(4) and v_nu % T.int64(6) == T.int64(0), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(3) and v_nu % T.int64(6) == T.int64(5), T.float32(-2), T.Select(v_r_b % T.int64(6) == T.int64(3) and v_nu % T.int64(6) == T.int64(4), T.float32(-0.5), T.Select(v_r_b % T.int64(6) == T.int64(3) and v_nu % T.int64(6) == T.int64(3), T.float32(2), T.Select(v_r_b % T.int64(6) == T.int64(3) and v_nu % T.int64(6) == T.int64(2), T.float32(2.5), T.Select(v_r_b % T.int64(6) == T.int64(3) and v_nu % T.int64(6) == T.int64(1), T.float32(0.5), T.Select(v_r_b % T.int64(6) == T.int64(3) and v_nu % T.int64(6) == T.int64(0), T.float32(1.5), T.Select(v_r_b % T.int64(6) == T.int64(2) and v_nu % T.int64(6) == T.int64(5), T.float32(-1.5), T.Select(v_r_b % T.int64(6) == T.int64(2) and v_nu % T.int64(6) == T.int64(4), T.float32(-1), T.Select(v_r_b % T.int64(6) == T.int64(2) and v_nu % T.int64(6) == T.int64(3), T.float32(-1), T.Select(v_r_b % T.int64(6) == T.int64(2) and v_nu % T.int64(6) == T.int64(2), T.float32(0.5), T.Select(v_r_b % T.int64(6) == T.int64(2) and v_nu % T.int64(6) == T.int64(1), T.float32(-2.5), T.Select(v_r_b % T.int64(6) == T.int64(2) and v_nu % T.int64(6) == T.int64(0), T.float32(-2), T.Select(v_r_b % T.int64(6) == T.int64(1) and v_nu % T.int64(6) == T.int64(5), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(1) and v_nu % T.int64(6) == T.int64(4), T.float32(0.5), T.Select(v_r_b % T.int64(6) == T.int64(1) and v_nu % T.int64(6) == T.int64(3), T.float32(-2), T.Select(v_r_b % T.int64(6) == T.int64(1) and v_nu % T.int64(6) == T.int64(2), T.float32(-1), T.Select(v_r_b % T.int64(6) == T.int64(1) and v_nu % T.int64(6) == T.int64(1), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(1) and v_nu % T.int64(6) == T.int64(0), T.float32(-1.5), T.Select(v_r_b % T.int64(6) == T.int64(0) and v_nu % T.int64(6) == T.int64(5), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(0) and v_nu % T.int64(6) == T.int64(4), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(0) and v_nu % T.int64(6) == T.int64(3), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(0) and v_nu % T.int64(6) == T.int64(2), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(0) and v_nu % T.int64(6) == T.int64(1), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(0) and v_nu % T.int64(6) == T.int64(0), T.float32(1), T.float32(0)))))))))))))))))))))))))))))))))))))
                for ax0, ax1, ax2, ax3 in T.grid(T.int64(6), T.int64(6), T.int64(1), T.int64(1)):
                    with T.block("data_pack_local"):
                        v0, v1 = T.axis.remap("SS", [ax0, ax1])
                        v2 = T.axis.spatial(T.int64(256), (ci_p_fused_0 * T.int64(1024) + ci_p_fused_1) // T.int64(196) + ax2)
                        v3 = T.axis.spatial(T.int64(196), (ci_p_fused_0 * T.int64(44) + ci_p_fused_1) % T.int64(196) + ax3)
                        T.reads(data_pack_local[v0, v1, v2, v3])
                        T.writes(data_pack[v0, v1, v2, v3])
                        data_pack[v0, v1, v2, v3] = data_pack_local[v0, v1, v2, v3]
        for eps_0_nu_0_co_0_p_0_fused in T.thread_binding(T.int64(18), thread="blockIdx.x", annotations={"pragma_auto_unroll_max_step": 1024, "pragma_unroll_explicit": 1}):
            for eps_1_nu_1_co_1_p_1_fused in T.thread_binding(T.int64(448), thread="vthread.x"):
                for eps_2_nu_2_co_2_p_2_fused in T.thread_binding(T.int64(32), thread="threadIdx.x"):
                    for eps_3_init, nu_3_init, co_3_init, p_3_init, eps_4_init, nu_4_init, co_4_init, p_4_init in T.grid(T.int64(1), T.int64(1), T.int64(1), T.int64(7), T.int64(1), T.int64(1), T.int64(1), T.int64(1)):
                        with T.block("bgemm_init"):
                            v_eps = T.axis.spatial(T.int64(6), eps_0_nu_0_co_0_p_0_fused // T.int64(6) * T.int64(2) + eps_1_nu_1_co_1_p_1_fused // T.int64(224) + eps_3_init + eps_4_init)
                            v_nu = T.axis.spatial(T.int64(6), eps_0_nu_0_co_0_p_0_fused % T.int64(6) // T.int64(2) * T.int64(2) + eps_2_nu_2_co_2_p_2_fused // T.int64(16) + nu_3_init + nu_4_init)
                            v_co = T.axis.spatial(T.int64(256), eps_0_nu_0_co_0_p_0_fused % T.int64(2) * T.int64(128) + eps_1_nu_1_co_1_p_1_fused % T.int64(224) // T.int64(14) * T.int64(8) + eps_2_nu_2_co_2_p_2_fused % T.int64(16) // T.int64(2) + co_3_init + co_4_init)
                            v_p = T.axis.spatial(T.int64(196), eps_1_nu_1_co_1_p_1_fused % T.int64(14) * T.int64(14) + eps_2_nu_2_co_2_p_2_fused % T.int64(2) * T.int64(7) + p_3_init + p_4_init)
                            T.reads()
                            T.writes(bgemm_local[v_eps, v_nu, v_co, v_p])
                            T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 32, "meta_schedule.tiling_structure": "SSSRRSRS"})
                            bgemm_local[v_eps, v_nu, v_co, v_p] = T.float32(0)
                    for ci_0_fused in T.serial(T.int64(256), annotations={"software_pipeline_async_stages": [0], "software_pipeline_order": [0, 1, 2], "software_pipeline_stage": [0, 0, 3]}):
                        for ax0_ax1_ax2_ax3_fused_0 in range(T.int64(25)):
                            for ax0_ax1_ax2_ax3_fused_1 in T.thread_binding(T.int64(32), thread="threadIdx.x"):
                                with T.block("data_pack_shared"):
                                    v0 = T.axis.spatial(T.int64(6), eps_0_nu_0_co_0_p_0_fused // T.int64(6) * T.int64(2) + (ax0_ax1_ax2_ax3_fused_0 * T.int64(32) + ax0_ax1_ax2_ax3_fused_1) // T.int64(392))
                                    v1 = T.axis.spatial(T.int64(6), eps_0_nu_0_co_0_p_0_fused % T.int64(6) // T.int64(2) * T.int64(2) + (ax0_ax1_ax2_ax3_fused_0 * T.int64(32) + ax0_ax1_ax2_ax3_fused_1) % T.int64(392) // T.int64(196))
                                    v2 = T.axis.spatial(T.int64(256), ci_0_fused)
                                    v3 = T.axis.spatial(T.int64(196), (ax0_ax1_ax2_ax3_fused_0 * T.int64(32) + ax0_ax1_ax2_ax3_fused_1) % T.int64(196))
                                    T.where(ax0_ax1_ax2_ax3_fused_0 * T.int64(32) + ax0_ax1_ax2_ax3_fused_1 < T.int64(784))
                                    T.reads(data_pack[v0, v1, v2, v3])
                                    T.writes(data_pack_shared[v0, v1, v2, v3])
                                    data_pack_shared[v0, v1, v2, v3] = data_pack[v0, v1, v2, v3]
                        for ax0_ax1_ax2_ax3_fused_0 in range(T.int64(16)):
                            for ax0_ax1_ax2_ax3_fused_1 in T.thread_binding(T.int64(32), thread="threadIdx.x"):
                                with T.block("p1_shared"):
                                    v0 = T.axis.spatial(T.int64(6), eps_0_nu_0_co_0_p_0_fused // T.int64(6) * T.int64(2) + (ax0_ax1_ax2_ax3_fused_0 * T.int64(32) + ax0_ax1_ax2_ax3_fused_1) // T.int64(256))
                                    v1 = T.axis.spatial(T.int64(6), eps_0_nu_0_co_0_p_0_fused % T.int64(6) // T.int64(2) * T.int64(2) + (ax0_ax1_ax2_ax3_fused_0 * T.int64(32) + ax0_ax1_ax2_ax3_fused_1) % T.int64(256) // T.int64(128))
                                    v2 = T.axis.spatial(T.int64(256), ci_0_fused)
                                    v3 = T.axis.spatial(T.int64(256), eps_0_nu_0_co_0_p_0_fused % T.int64(2) * T.int64(128) + (ax0_ax1_ax2_ax3_fused_0 * T.int64(32) + ax0_ax1_ax2_ax3_fused_1) % T.int64(128))
                                    T.reads(p1[v0, v1, v2, v3])
                                    T.writes(p1_shared[v0, v1, v2, v3])
                                    p1_shared[v0, v1, v2, v3] = p1[v0, v1, v2, v3]
                        for ci_1, eps_3, nu_3, co_3, p_3, ci_2, eps_4, nu_4, co_4, p_4 in T.grid(T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(7), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1)):
                            with T.block("bgemm_update"):
                                v_eps = T.axis.spatial(T.int64(6), eps_0_nu_0_co_0_p_0_fused // T.int64(6) * T.int64(2) + eps_1_nu_1_co_1_p_1_fused // T.int64(224) + eps_3 + eps_4)
                                v_nu = T.axis.spatial(T.int64(6), eps_0_nu_0_co_0_p_0_fused % T.int64(6) // T.int64(2) * T.int64(2) + eps_2_nu_2_co_2_p_2_fused // T.int64(16) + nu_3 + nu_4)
                                v_co = T.axis.spatial(T.int64(256), eps_0_nu_0_co_0_p_0_fused % T.int64(2) * T.int64(128) + eps_1_nu_1_co_1_p_1_fused % T.int64(224) // T.int64(14) * T.int64(8) + eps_2_nu_2_co_2_p_2_fused % T.int64(16) // T.int64(2) + co_3 + co_4)
                                v_p = T.axis.spatial(T.int64(196), eps_1_nu_1_co_1_p_1_fused % T.int64(14) * T.int64(14) + eps_2_nu_2_co_2_p_2_fused % T.int64(2) * T.int64(7) + p_3 + p_4)
                                v_ci = T.axis.reduce(T.int64(256), ci_0_fused + ci_1 + ci_2)
                                T.reads(bgemm_local[v_eps, v_nu, v_co, v_p], data_pack_shared[v_eps, v_nu, v_ci, v_p], p1_shared[v_eps, v_nu, v_ci, v_co])
                                T.writes(bgemm_local[v_eps, v_nu, v_co, v_p])
                                T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 32, "meta_schedule.tiling_structure": "SSSRRSRS"})
                                bgemm_local[v_eps, v_nu, v_co, v_p] = bgemm_local[v_eps, v_nu, v_co, v_p] + data_pack_shared[v_eps, v_nu, v_ci, v_p] * p1_shared[v_eps, v_nu, v_ci, v_co]
                    for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(1), T.int64(1), T.int64(7)):
                        with T.block("bgemm_local"):
                            v0 = T.axis.spatial(T.int64(6), eps_0_nu_0_co_0_p_0_fused // T.int64(6) * T.int64(2) + eps_1_nu_1_co_1_p_1_fused // T.int64(224) + ax0)
                            v1 = T.axis.spatial(T.int64(6), eps_0_nu_0_co_0_p_0_fused % T.int64(6) // T.int64(2) * T.int64(2) + eps_2_nu_2_co_2_p_2_fused // T.int64(16) + ax1)
                            v2 = T.axis.spatial(T.int64(256), eps_0_nu_0_co_0_p_0_fused % T.int64(2) * T.int64(128) + eps_1_nu_1_co_1_p_1_fused % T.int64(224) // T.int64(14) * T.int64(8) + eps_2_nu_2_co_2_p_2_fused % T.int64(16) // T.int64(2) + ax2)
                            v3 = T.axis.spatial(T.int64(196), eps_1_nu_1_co_1_p_1_fused % T.int64(14) * T.int64(14) + eps_2_nu_2_co_2_p_2_fused % T.int64(2) * T.int64(7) + ax3)
                            T.reads(bgemm_local[v0, v1, v2, v3])
                            T.writes(bgemm[v0, v1, v2, v3])
                            bgemm[v0, v1, v2, v3] = bgemm_local[v0, v1, v2, v3]
        for n_co_h_0_w_0_fused_0 in T.thread_binding(T.int64(392), thread="blockIdx.x", annotations={"pragma_auto_unroll_max_step": 1024, "pragma_unroll_explicit": 1}):
            for n_co_h_0_w_0_fused_1 in T.thread_binding(T.int64(128), thread="threadIdx.x"):
                for ax0, ax1 in T.grid(T.int64(1), T.int64(1)):
                    for ax2 in T.unroll(T.int64(4)):
                        for ax3 in T.unroll(T.int64(4)):
                            with T.block("inverse_init"):
                                v_co = T.axis.spatial(T.int64(256), (n_co_h_0_w_0_fused_0 * T.int64(128) + n_co_h_0_w_0_fused_1) // T.int64(196) + ax0)
                                v_p = T.axis.spatial(T.int64(196), (n_co_h_0_w_0_fused_0 * T.int64(128) + n_co_h_0_w_0_fused_1) % T.int64(196) + ax1)
                                v_vh, v_vw = T.axis.remap("SS", [ax2, ax3])
                                T.reads()
                                T.writes(inverse_local[v_co, v_p, v_vh, v_vw])
                                T.block_attr({"schedule_rule": "conv2d_nchw_winograd_inverse"})
                                inverse_local[v_co, v_p, v_vh, v_vw] = T.float32(0)
                            for ax4 in T.unroll(T.int64(6)):
                                for ax5 in T.unroll(T.int64(6)):
                                    with T.block("inverse_update"):
                                        v_co = T.axis.spatial(T.int64(256), (n_co_h_0_w_0_fused_0 * T.int64(128) + n_co_h_0_w_0_fused_1) // T.int64(196) + ax0)
                                        v_p = T.axis.spatial(T.int64(196), (n_co_h_0_w_0_fused_0 * T.int64(128) + n_co_h_0_w_0_fused_1) % T.int64(196) + ax1)
                                        v_vh, v_vw, v_r_a, v_r_b = T.axis.remap("SSRR", [ax2, ax3, ax4, ax5])
                                        T.reads(inverse_local[v_co, v_p, v_vh, v_vw], bgemm[v_r_a, v_r_b, v_co, v_p])
                                        T.writes(inverse_local[v_co, v_p, v_vh, v_vw])
                                        T.block_attr({"schedule_rule": "conv2d_nchw_winograd_inverse"})
                                        inverse_local[v_co, v_p, v_vh, v_vw] = inverse_local[v_co, v_p, v_vh, v_vw] + bgemm[v_r_a, v_r_b, v_co, v_p] * T.Select(v_r_a % T.int64(6) == T.int64(5) and v_vh % T.int64(4) == T.int64(3), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(5) and v_vh % T.int64(4) == T.int64(2), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(5) and v_vh % T.int64(4) == T.int64(1), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(5) and v_vh % T.int64(4) == T.int64(0), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(4) and v_vh % T.int64(4) == T.int64(3), T.float32(-8), T.Select(v_r_a % T.int64(6) == T.int64(4) and v_vh % T.int64(4) == T.int64(2), T.float32(4), T.Select(v_r_a % T.int64(6) == T.int64(4) and v_vh % T.int64(4) == T.int64(1), T.float32(-2), T.Select(v_r_a % T.int64(6) == T.int64(4) and v_vh % T.int64(4) == T.int64(0), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(3) and v_vh % T.int64(4) == T.int64(3), T.float32(0.125), T.Select(v_r_a % T.int64(6) == T.int64(3) and v_vh % T.int64(4) == T.int64(2), T.float32(0.25), T.Select(v_r_a % T.int64(6) == T.int64(3) and v_vh % T.int64(4) == T.int64(1), T.float32(0.5), T.Select(v_r_a % T.int64(6) == T.int64(3) and v_vh % T.int64(4) == T.int64(0), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(2) and v_vh % T.int64(4) == T.int64(3), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(2) and v_vh % T.int64(4) == T.int64(2), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(2) and v_vh % T.int64(4) == T.int64(1), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(2) and v_vh % T.int64(4) == T.int64(0), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(1) and v_vh % T.int64(4) == T.int64(3), T.float32(-1), T.Select(v_r_a % T.int64(6) == T.int64(1) and v_vh % T.int64(4) == T.int64(2), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(1) and v_vh % T.int64(4) == T.int64(1), T.float32(-1), T.Select(v_r_a % T.int64(6) == T.int64(1) and v_vh % T.int64(4) == T.int64(0), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(0) and v_vh % T.int64(4) == T.int64(3), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(0) and v_vh % T.int64(4) == T.int64(2), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(0) and v_vh % T.int64(4) == T.int64(1), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(0) and v_vh % T.int64(4) == T.int64(0), T.float32(1), T.float32(0))))))))))))))))))))))))) * T.Select(v_r_b % T.int64(6) == T.int64(5) and v_vw % T.int64(4) == T.int64(3), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(5) and v_vw % T.int64(4) == T.int64(2), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(5) and v_vw % T.int64(4) == T.int64(1), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(5) and v_vw % T.int64(4) == T.int64(0), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(4) and v_vw % T.int64(4) == T.int64(3), T.float32(-8), T.Select(v_r_b % T.int64(6) == T.int64(4) and v_vw % T.int64(4) == T.int64(2), T.float32(4), T.Select(v_r_b % T.int64(6) == T.int64(4) and v_vw % T.int64(4) == T.int64(1), T.float32(-2), T.Select(v_r_b % T.int64(6) == T.int64(4) and v_vw % T.int64(4) == T.int64(0), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(3) and v_vw % T.int64(4) == T.int64(3), T.float32(0.125), T.Select(v_r_b % T.int64(6) == T.int64(3) and v_vw % T.int64(4) == T.int64(2), T.float32(0.25), T.Select(v_r_b % T.int64(6) == T.int64(3) and v_vw % T.int64(4) == T.int64(1), T.float32(0.5), T.Select(v_r_b % T.int64(6) == T.int64(3) and v_vw % T.int64(4) == T.int64(0), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(2) and v_vw % T.int64(4) == T.int64(3), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(2) and v_vw % T.int64(4) == T.int64(2), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(2) and v_vw % T.int64(4) == T.int64(1), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(2) and v_vw % T.int64(4) == T.int64(0), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(1) and v_vw % T.int64(4) == T.int64(3), T.float32(-1), T.Select(v_r_b % T.int64(6) == T.int64(1) and v_vw % T.int64(4) == T.int64(2), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(1) and v_vw % T.int64(4) == T.int64(1), T.float32(-1), T.Select(v_r_b % T.int64(6) == T.int64(1) and v_vw % T.int64(4) == T.int64(0), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(0) and v_vw % T.int64(4) == T.int64(3), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(0) and v_vw % T.int64(4) == T.int64(2), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(0) and v_vw % T.int64(4) == T.int64(1), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(0) and v_vw % T.int64(4) == T.int64(0), T.float32(1), T.float32(0)))))))))))))))))))))))))
                for h_1, w_1 in T.grid(T.int64(4), T.int64(4)):
                    with T.block("conv2d_winograd"):
                        v_n = T.axis.spatial(T.int64(1), T.int64(0))
                        v_co = T.axis.spatial(T.int64(256), (n_co_h_0_w_0_fused_0 * T.int64(128) + n_co_h_0_w_0_fused_1) // T.int64(196))
                        v_h = T.axis.spatial(T.int64(56), (n_co_h_0_w_0_fused_0 * T.int64(128) + n_co_h_0_w_0_fused_1) % T.int64(196) // T.int64(14) * T.int64(4) + h_1)
                        v_w = T.axis.spatial(T.int64(56), (n_co_h_0_w_0_fused_0 * T.int64(128) + n_co_h_0_w_0_fused_1) % T.int64(14) * T.int64(4) + w_1)
                        T.reads(inverse_local[v_co, v_n * T.int64(196) + v_h // T.int64(4) * T.int64(14) + v_w // T.int64(4), v_h % T.int64(4), v_w % T.int64(4)], p2[v_n, v_co, T.int64(0), T.int64(0)])
                        T.writes(T_relu[v_n, v_co, v_h, v_w])
                        T_relu[v_n, v_co, v_h, v_w] = T.max(inverse_local[v_co, v_n * T.int64(196) + v_h // T.int64(4) * T.int64(14) + v_w // T.int64(4), v_h % T.int64(4), v_w % T.int64(4)] + p2[v_n, v_co, T.int64(0), T.int64(0)], T.float32(0))
b0 = sch.get_block(name="data_pack", func_name="main")
b1 = sch.get_block(name="bgemm", func_name="main")
b2 = sch.get_block(name="inverse", func_name="main")
b3 = sch.get_block(name="conv2d_winograd", func_name="main")
b4 = sch.get_block(name="T_add", func_name="main")
b5 = sch.get_block(name="T_relu", func_name="main")
b6 = sch.get_block(name="root", func_name="main")
b7, b8 = sch.get_producers(block=b2)
sch.compute_inline(block=b8)
b9, = sch.get_consumers(block=b2)
l10, l11, l12, l13 = sch.get_loops(block=b9)
l14, l15 = sch.split(loop=l12, factors=[None, 4], preserve_unit_iters=True)
l16, l17 = sch.split(loop=l13, factors=[None, 4], preserve_unit_iters=True)
sch.reorder(l14, l16, l15, l17)
sch.compute_at(block=b2, loop=l16, preserve_unit_loops=True, index=-1)
sch.set_scope(block=b2, buffer_index=0, storage_scope="local")
l18, l19, l20, l21, l22, l23, l24, l25, l26, l27 = sch.get_loops(block=b2)
sch.unroll(loop=l24)
sch.unroll(loop=l25)
sch.unroll(loop=l26)
sch.unroll(loop=l27)
b28, b29 = sch.get_producers(block=b0)
sch.compute_inline(block=b29)
b30, = sch.get_producers(block=b28)
l31, l32, l33, l34, l35, l36 = sch.get_loops(block=b0)
sch.reorder(l33, l34, l31, l32, l35, l36)
sch.unroll(loop=l31)
sch.unroll(loop=l32)
sch.unroll(loop=l35)
sch.unroll(loop=l36)
l37 = sch.fuse(l33, l34, preserve_unit_iters=True)
v38 = sch.sample_categorical(candidates=[32, 64, 128, 256, 512, 1024], probs=[0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666], decision=5)
l39, l40 = sch.split(loop=l37, factors=[None, v38], preserve_unit_iters=True)
sch.bind(loop=l39, thread_axis="blockIdx.x")
sch.bind(loop=l40, thread_axis="threadIdx.x")
b41 = sch.cache_write(block=b0, write_buffer_index=0, storage_scope="local")
sch.reverse_compute_at(block=b41, loop=l40, preserve_unit_loops=True, index=-1)
sch.compute_at(block=b28, loop=l40, preserve_unit_loops=True, index=-1)
sch.set_scope(block=b28, buffer_index=0, storage_scope="local")
sch.compute_inline(block=b30)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSSRRSRS")
l42, l43, l44, l45, l46 = sch.get_loops(block=b1)
v47, v48, v49, v50, v51 = sch.sample_perfect_tile(loop=l42, n=5, max_innermost_factor=64, decision=[3, 2, 1, 1, 1])
l52, l53, l54, l55, l56 = sch.split(loop=l42, factors=[v47, v48, v49, v50, v51], preserve_unit_iters=True)
v57, v58, v59, v60, v61 = sch.sample_perfect_tile(loop=l43, n=5, max_innermost_factor=64, decision=[3, 1, 2, 1, 1])
l62, l63, l64, l65, l66 = sch.split(loop=l43, factors=[v57, v58, v59, v60, v61], preserve_unit_iters=True)
v67, v68, v69, v70, v71 = sch.sample_perfect_tile(loop=l44, n=5, max_innermost_factor=64, decision=[2, 16, 8, 1, 1])
l72, l73, l74, l75, l76 = sch.split(loop=l44, factors=[v67, v68, v69, v70, v71], preserve_unit_iters=True)
v77, v78, v79, v80, v81 = sch.sample_perfect_tile(loop=l45, n=5, max_innermost_factor=64, decision=[1, 14, 2, 7, 1])
l82, l83, l84, l85, l86 = sch.split(loop=l45, factors=[v77, v78, v79, v80, v81], preserve_unit_iters=True)
v87, v88, v89 = sch.sample_perfect_tile(loop=l46, n=3, max_innermost_factor=64, decision=[256, 1, 1])
l90, l91, l92 = sch.split(loop=l46, factors=[v87, v88, v89], preserve_unit_iters=True)
sch.reorder(l52, l62, l72, l82, l53, l63, l73, l83, l54, l64, l74, l84, l90, l91, l55, l65, l75, l85, l92, l56, l66, l76, l86)
l93 = sch.fuse(l52, l62, l72, l82, preserve_unit_iters=True)
sch.bind(loop=l93, thread_axis="blockIdx.x")
l94 = sch.fuse(l53, l63, l73, l83, preserve_unit_iters=True)
sch.bind(loop=l94, thread_axis="vthread.x")
l95 = sch.fuse(l54, l64, l74, l84, preserve_unit_iters=True)
sch.bind(loop=l95, thread_axis="threadIdx.x")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_low_inclusive", ann_val=32)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_high_inclusive", ann_val=1024)
b96 = sch.cache_write(block=b1, write_buffer_index=0, storage_scope="local")
sch.reverse_compute_at(block=b96, loop=l95, preserve_unit_loops=True, index=-1)
b97 = sch.cache_read(block=b1, read_buffer_index=0, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b97, loop=l90, preserve_unit_loops=True, index=-1)
l98, l99, l100, l101, l102, l103, l104, l105 = sch.get_loops(block=b97)
l106 = sch.fuse(l102, l103, l104, l105, preserve_unit_iters=True)
v107 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=0)
sch.annotate(block_or_loop=b97, ann_key="meta_schedule.cooperative_fetch", ann_val=v107)
b108 = sch.cache_read(block=b1, read_buffer_index=1, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b108, loop=l90, preserve_unit_loops=True, index=-1)
l109, l110, l111, l112, l113, l114, l115, l116 = sch.get_loops(block=b108)
l117 = sch.fuse(l113, l114, l115, l116, preserve_unit_iters=True)
v118 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=2)
sch.annotate(block_or_loop=b108, ann_key="meta_schedule.cooperative_fetch", ann_val=v118)
l119 = sch.fuse(l90, preserve_unit_iters=True)
sch.annotate(block_or_loop=l119, ann_key="software_pipeline_stage", ann_val=[0, 0, 3])
sch.annotate(block_or_loop=l119, ann_key="software_pipeline_order", ann_val=[0, 1, 2])
sch.annotate(block_or_loop=l119, ann_key="software_pipeline_async_stages", ann_val=[0])
sch.reverse_compute_inline(block=b5)
sch.reverse_compute_inline(block=b4)
v120 = sch.sample_categorical(candidates=[0, 16, 64, 512, 1024], probs=[0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001], decision=4)
sch.annotate(block_or_loop=b6, ann_key="meta_schedule.unroll_explicit", ann_val=v120)
l121, l122, l123, l124, l125, l126 = sch.get_loops(block=b3)
l127 = sch.fuse(l121, l122, l123, l124, preserve_unit_iters=True)
v128 = sch.sample_categorical(candidates=[32, 64, 128, 256, 512, 1024], probs=[0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666], decision=2)
l129, l130 = sch.split(loop=l127, factors=[None, v128], preserve_unit_iters=True)
sch.bind(loop=l129, thread_axis="blockIdx.x")
sch.bind(loop=l130, thread_axis="threadIdx.x")
sch.enter_postproc()
sch.unannotate(block_or_loop=b97, ann_key="meta_schedule.cooperative_fetch")
l131, l132, l133, l134, l135 = sch.get_loops(block=b97)
l136, l137 = sch.split(loop=l135, factors=[None, 32], preserve_unit_iters=True)
sch.bind(loop=l137, thread_axis="threadIdx.x")
sch.unannotate(block_or_loop=b108, ann_key="meta_schedule.cooperative_fetch")
l138, l139, l140, l141, l142 = sch.get_loops(block=b108)
l143, l144 = sch.split(loop=l142, factors=[None, 32], preserve_unit_iters=True)
sch.bind(loop=l144, thread_axis="threadIdx.x")
b145 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b145, ann_key="meta_schedule.unroll_explicit")
b146, b147, b148, b149, b150, b151, b152, b153, b154 = sch.get_child_blocks(b145)
l155, l156, l157, l158, l159, l160 = sch.get_loops(block=b146)
l161, l162, l163, l164, l165, l166 = sch.get_loops(block=b147)
sch.annotate(block_or_loop=l161, ann_key="pragma_auto_unroll_max_step", ann_val=1024)
sch.annotate(block_or_loop=l161, ann_key="pragma_unroll_explicit", ann_val=1)
l167, l168, l169, l170, l171, l172 = sch.get_loops(block=b148)
l173, l174, l175, l176, l177, l178 = sch.get_loops(block=b149)
l179, l180, l181, l182, l183, l184 = sch.get_loops(block=b150)
l185, l186, l187, l188, l189, l190, l191, l192, l193, l194, l195, l196, l197, l198 = sch.get_loops(block=b151)
sch.annotate(block_or_loop=l185, ann_key="pragma_auto_unroll_max_step", ann_val=1024)
sch.annotate(block_or_loop=l185, ann_key="pragma_unroll_explicit", ann_val=1)
l199, l200, l201, l202, l203, l204, l205 = sch.get_loops(block=b152)
l206, l207, l208, l209, l210, l211, l212, l213 = sch.get_loops(block=b153)
sch.annotate(block_or_loop=l206, ann_key="pragma_auto_unroll_max_step", ann_val=1024)
sch.annotate(block_or_loop=l206, ann_key="pragma_unroll_explicit", ann_val=1)
l214, l215, l216, l217 = sch.get_loops(block=b154)
b218 = sch.get_block(name="data_pack", func_name="main")
l219, l220, l221, l222, l223, l224 = sch.get_loops(block=b218)
b225 = sch.decompose_reduction(block=b218, loop=l223)
b226 = sch.get_block(name="bgemm", func_name="main")
l227, l228, l229, l230, l231, l232, l233, l234, l235, l236, l237, l238, l239, l240 = sch.get_loops(block=b226)
b241 = sch.decompose_reduction(block=b226, loop=l230)
b242 = sch.get_block(name="inverse", func_name="main")
l243, l244, l245, l246, l247, l248, l249, l250 = sch.get_loops(block=b242)
b251 = sch.decompose_reduction(block=b242, loop=l249)
2024-04-29 00:33:49 [INFO] [task_scheduler.cc:121] [Task #5: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #710: Error in building:
LocalBuilder: Timeout, killed after 30.0 seconds
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(256), T.int64(56), T.int64(56)), "float32"), p1: T.Buffer((T.int64(6), T.int64(6), T.int64(256), T.int64(256)), "float32"), p2: T.Buffer((T.int64(1), T.int64(256), T.int64(1), T.int64(1)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(256), T.int64(56), T.int64(56)), "float32")):
        T.func_attr({"layout_free_buffers": [1], "tir.noalias": T.bool(True)})
        # with T.block("root"):
        input_tile_local = T.alloc_buffer((T.int64(256), T.int64(196), T.int64(6), T.int64(6)), scope="local")
        data_pack = T.alloc_buffer((T.int64(6), T.int64(6), T.int64(256), T.int64(196)))
        bgemm = T.alloc_buffer((T.int64(6), T.int64(6), T.int64(256), T.int64(196)))
        inverse_local = T.alloc_buffer((T.int64(256), T.int64(196), T.int64(4), T.int64(4)), scope="local")
        data_pack_local = T.alloc_buffer((T.int64(6), T.int64(6), T.int64(256), T.int64(196)), scope="local")
        bgemm_local = T.alloc_buffer((T.int64(6), T.int64(6), T.int64(256), T.int64(196)), scope="local")
        data_pack_shared = T.alloc_buffer((T.int64(6), T.int64(6), T.int64(256), T.int64(196)), scope="shared")
        p1_shared = T.alloc_buffer((T.int64(6), T.int64(6), T.int64(256), T.int64(256)), scope="shared")
        for ci_p_fused_0 in T.thread_binding(T.int64(49), thread="blockIdx.x", annotations={"pragma_auto_unroll_max_step": 1024, "pragma_unroll_explicit": 1}):
            for ci_p_fused_1 in T.thread_binding(T.int64(1024), thread="threadIdx.x"):
                for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(1), T.int64(6), T.int64(6)):
                    with T.block("input_tile"):
                        v_ci = T.axis.spatial(T.int64(256), (ci_p_fused_0 * T.int64(1024) + ci_p_fused_1) // T.int64(196) + ax0)
                        v_p = T.axis.spatial(T.int64(196), (ci_p_fused_0 * T.int64(44) + ci_p_fused_1) % T.int64(196) + ax1)
                        v_eps, v_nu = T.axis.remap("SS", [ax2, ax3])
                        T.reads(p0[v_p // T.int64(196), v_ci, v_p % T.int64(196) // T.int64(14) * T.int64(4) + v_eps - T.int64(1), v_p % T.int64(14) * T.int64(4) + v_nu - T.int64(1)])
                        T.writes(input_tile_local[v_ci, v_p, v_eps, v_nu])
                        T.block_attr({"schedule_rule": "None"})
                        input_tile_local[v_ci, v_p, v_eps, v_nu] = T.if_then_else(T.int64(1) <= v_p % T.int64(196) // T.int64(14) * T.int64(4) + v_eps and v_p % T.int64(196) // T.int64(14) * T.int64(4) + v_eps < T.int64(57) and T.int64(1) <= v_p % T.int64(14) * T.int64(4) + v_nu and v_p % T.int64(14) * T.int64(4) + v_nu < T.int64(57), p0[v_p // T.int64(196), v_ci, v_p % T.int64(196) // T.int64(14) * T.int64(4) + v_eps - T.int64(1), v_p % T.int64(14) * T.int64(4) + v_nu - T.int64(1)], T.float32(0))
                for eps in T.unroll(T.int64(6)):
                    for nu in T.unroll(T.int64(6)):
                        with T.block("data_pack_init"):
                            v_eps, v_nu = T.axis.remap("SS", [eps, nu])
                            v_ci = T.axis.spatial(T.int64(256), (ci_p_fused_0 * T.int64(1024) + ci_p_fused_1) // T.int64(196))
                            v_p = T.axis.spatial(T.int64(196), (ci_p_fused_0 * T.int64(1024) + ci_p_fused_1) % T.int64(196))
                            T.reads()
                            T.writes(data_pack_local[v_eps, v_nu, v_ci, v_p])
                            T.block_attr({"schedule_rule": "conv2d_nchw_winograd_data_pack"})
                            data_pack_local[v_eps, v_nu, v_ci, v_p] = T.float32(0)
                        for r_a in T.unroll(T.int64(6)):
                            for r_b in T.unroll(T.int64(6)):
                                with T.block("data_pack_update"):
                                    v_eps, v_nu = T.axis.remap("SS", [eps, nu])
                                    v_ci = T.axis.spatial(T.int64(256), (ci_p_fused_0 * T.int64(1024) + ci_p_fused_1) // T.int64(196))
                                    v_p = T.axis.spatial(T.int64(196), (ci_p_fused_0 * T.int64(1024) + ci_p_fused_1) % T.int64(196))
                                    v_r_a, v_r_b = T.axis.remap("RR", [r_a, r_b])
                                    T.reads(data_pack_local[v_eps, v_nu, v_ci, v_p], input_tile_local[v_ci, v_p, v_r_a, v_r_b])
                                    T.writes(data_pack_local[v_eps, v_nu, v_ci, v_p])
                                    T.block_attr({"schedule_rule": "conv2d_nchw_winograd_data_pack"})
                                    data_pack_local[v_eps, v_nu, v_ci, v_p] = data_pack_local[v_eps, v_nu, v_ci, v_p] + input_tile_local[v_ci, v_p, v_r_a, v_r_b] * T.Select(v_r_a % T.int64(6) == T.int64(5) and v_eps % T.int64(6) == T.int64(5), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(5) and v_eps % T.int64(6) == T.int64(4), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(5) and v_eps % T.int64(6) == T.int64(3), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(5) and v_eps % T.int64(6) == T.int64(2), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(5) and v_eps % T.int64(6) == T.int64(1), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(5) and v_eps % T.int64(6) == T.int64(0), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(4) and v_eps % T.int64(6) == T.int64(5), T.float32(1.5), T.Select(v_r_a % T.int64(6) == T.int64(4) and v_eps % T.int64(6) == T.int64(4), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(4) and v_eps % T.int64(6) == T.int64(3), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(4) and v_eps % T.int64(6) == T.int64(2), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(4) and v_eps % T.int64(6) == T.int64(1), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(4) and v_eps % T.int64(6) == T.int64(0), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(3) and v_eps % T.int64(6) == T.int64(5), T.float32(-2), T.Select(v_r_a % T.int64(6) == T.int64(3) and v_eps % T.int64(6) == T.int64(4), T.float32(-0.5), T.Select(v_r_a % T.int64(6) == T.int64(3) and v_eps % T.int64(6) == T.int64(3), T.float32(2), T.Select(v_r_a % T.int64(6) == T.int64(3) and v_eps % T.int64(6) == T.int64(2), T.float32(2.5), T.Select(v_r_a % T.int64(6) == T.int64(3) and v_eps % T.int64(6) == T.int64(1), T.float32(0.5), T.Select(v_r_a % T.int64(6) == T.int64(3) and v_eps % T.int64(6) == T.int64(0), T.float32(1.5), T.Select(v_r_a % T.int64(6) == T.int64(2) and v_eps % T.int64(6) == T.int64(5), T.float32(-1.5), T.Select(v_r_a % T.int64(6) == T.int64(2) and v_eps % T.int64(6) == T.int64(4), T.float32(-1), T.Select(v_r_a % T.int64(6) == T.int64(2) and v_eps % T.int64(6) == T.int64(3), T.float32(-1), T.Select(v_r_a % T.int64(6) == T.int64(2) and v_eps % T.int64(6) == T.int64(2), T.float32(0.5), T.Select(v_r_a % T.int64(6) == T.int64(2) and v_eps % T.int64(6) == T.int64(1), T.float32(-2.5), T.Select(v_r_a % T.int64(6) == T.int64(2) and v_eps % T.int64(6) == T.int64(0), T.float32(-2), T.Select(v_r_a % T.int64(6) == T.int64(1) and v_eps % T.int64(6) == T.int64(5), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(1) and v_eps % T.int64(6) == T.int64(4), T.float32(0.5), T.Select(v_r_a % T.int64(6) == T.int64(1) and v_eps % T.int64(6) == T.int64(3), T.float32(-2), T.Select(v_r_a % T.int64(6) == T.int64(1) and v_eps % T.int64(6) == T.int64(2), T.float32(-1), T.Select(v_r_a % T.int64(6) == T.int64(1) and v_eps % T.int64(6) == T.int64(1), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(1) and v_eps % T.int64(6) == T.int64(0), T.float32(-1.5), T.Select(v_r_a % T.int64(6) == T.int64(0) and v_eps % T.int64(6) == T.int64(5), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(0) and v_eps % T.int64(6) == T.int64(4), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(0) and v_eps % T.int64(6) == T.int64(3), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(0) and v_eps % T.int64(6) == T.int64(2), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(0) and v_eps % T.int64(6) == T.int64(1), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(0) and v_eps % T.int64(6) == T.int64(0), T.float32(1), T.float32(0))))))))))))))))))))))))))))))))))))) * T.Select(v_r_b % T.int64(6) == T.int64(5) and v_nu % T.int64(6) == T.int64(5), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(5) and v_nu % T.int64(6) == T.int64(4), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(5) and v_nu % T.int64(6) == T.int64(3), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(5) and v_nu % T.int64(6) == T.int64(2), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(5) and v_nu % T.int64(6) == T.int64(1), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(5) and v_nu % T.int64(6) == T.int64(0), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(4) and v_nu % T.int64(6) == T.int64(5), T.float32(1.5), T.Select(v_r_b % T.int64(6) == T.int64(4) and v_nu % T.int64(6) == T.int64(4), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(4) and v_nu % T.int64(6) == T.int64(3), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(4) and v_nu % T.int64(6) == T.int64(2), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(4) and v_nu % T.int64(6) == T.int64(1), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(4) and v_nu % T.int64(6) == T.int64(0), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(3) and v_nu % T.int64(6) == T.int64(5), T.float32(-2), T.Select(v_r_b % T.int64(6) == T.int64(3) and v_nu % T.int64(6) == T.int64(4), T.float32(-0.5), T.Select(v_r_b % T.int64(6) == T.int64(3) and v_nu % T.int64(6) == T.int64(3), T.float32(2), T.Select(v_r_b % T.int64(6) == T.int64(3) and v_nu % T.int64(6) == T.int64(2), T.float32(2.5), T.Select(v_r_b % T.int64(6) == T.int64(3) and v_nu % T.int64(6) == T.int64(1), T.float32(0.5), T.Select(v_r_b % T.int64(6) == T.int64(3) and v_nu % T.int64(6) == T.int64(0), T.float32(1.5), T.Select(v_r_b % T.int64(6) == T.int64(2) and v_nu % T.int64(6) == T.int64(5), T.float32(-1.5), T.Select(v_r_b % T.int64(6) == T.int64(2) and v_nu % T.int64(6) == T.int64(4), T.float32(-1), T.Select(v_r_b % T.int64(6) == T.int64(2) and v_nu % T.int64(6) == T.int64(3), T.float32(-1), T.Select(v_r_b % T.int64(6) == T.int64(2) and v_nu % T.int64(6) == T.int64(2), T.float32(0.5), T.Select(v_r_b % T.int64(6) == T.int64(2) and v_nu % T.int64(6) == T.int64(1), T.float32(-2.5), T.Select(v_r_b % T.int64(6) == T.int64(2) and v_nu % T.int64(6) == T.int64(0), T.float32(-2), T.Select(v_r_b % T.int64(6) == T.int64(1) and v_nu % T.int64(6) == T.int64(5), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(1) and v_nu % T.int64(6) == T.int64(4), T.float32(0.5), T.Select(v_r_b % T.int64(6) == T.int64(1) and v_nu % T.int64(6) == T.int64(3), T.float32(-2), T.Select(v_r_b % T.int64(6) == T.int64(1) and v_nu % T.int64(6) == T.int64(2), T.float32(-1), T.Select(v_r_b % T.int64(6) == T.int64(1) and v_nu % T.int64(6) == T.int64(1), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(1) and v_nu % T.int64(6) == T.int64(0), T.float32(-1.5), T.Select(v_r_b % T.int64(6) == T.int64(0) and v_nu % T.int64(6) == T.int64(5), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(0) and v_nu % T.int64(6) == T.int64(4), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(0) and v_nu % T.int64(6) == T.int64(3), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(0) and v_nu % T.int64(6) == T.int64(2), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(0) and v_nu % T.int64(6) == T.int64(1), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(0) and v_nu % T.int64(6) == T.int64(0), T.float32(1), T.float32(0)))))))))))))))))))))))))))))))))))))
                for ax0, ax1, ax2, ax3 in T.grid(T.int64(6), T.int64(6), T.int64(1), T.int64(1)):
                    with T.block("data_pack_local"):
                        v0, v1 = T.axis.remap("SS", [ax0, ax1])
                        v2 = T.axis.spatial(T.int64(256), (ci_p_fused_0 * T.int64(1024) + ci_p_fused_1) // T.int64(196) + ax2)
                        v3 = T.axis.spatial(T.int64(196), (ci_p_fused_0 * T.int64(44) + ci_p_fused_1) % T.int64(196) + ax3)
                        T.reads(data_pack_local[v0, v1, v2, v3])
                        T.writes(data_pack[v0, v1, v2, v3])
                        data_pack[v0, v1, v2, v3] = data_pack_local[v0, v1, v2, v3]
        for eps_0_nu_0_co_0_p_0_fused in T.thread_binding(T.int64(18), thread="blockIdx.x", annotations={"pragma_auto_unroll_max_step": 1024, "pragma_unroll_explicit": 1}):
            for eps_1_nu_1_co_1_p_1_fused in T.thread_binding(T.int64(224), thread="vthread.x"):
                for eps_2_nu_2_co_2_p_2_fused in T.thread_binding(T.int64(32), thread="threadIdx.x"):
                    for eps_3_init, nu_3_init, co_3_init, p_3_init, eps_4_init, nu_4_init, co_4_init, p_4_init in T.grid(T.int64(1), T.int64(1), T.int64(1), T.int64(7), T.int64(1), T.int64(1), T.int64(1), T.int64(2)):
                        with T.block("bgemm_init"):
                            v_eps = T.axis.spatial(T.int64(6), eps_0_nu_0_co_0_p_0_fused // T.int64(6) * T.int64(2) + eps_1_nu_1_co_1_p_1_fused // T.int64(112) + eps_3_init + eps_4_init)
                            v_nu = T.axis.spatial(T.int64(6), eps_0_nu_0_co_0_p_0_fused % T.int64(6) // T.int64(2) * T.int64(2) + eps_2_nu_2_co_2_p_2_fused // T.int64(16) + nu_3_init + nu_4_init)
                            v_co = T.axis.spatial(T.int64(256), eps_0_nu_0_co_0_p_0_fused % T.int64(2) * T.int64(128) + eps_1_nu_1_co_1_p_1_fused % T.int64(112) // T.int64(7) * T.int64(8) + eps_2_nu_2_co_2_p_2_fused % T.int64(16) // T.int64(2) + co_3_init + co_4_init)
                            v_p = T.axis.spatial(T.int64(196), eps_1_nu_1_co_1_p_1_fused % T.int64(7) * T.int64(28) + eps_2_nu_2_co_2_p_2_fused % T.int64(2) * T.int64(14) + p_3_init * T.int64(2) + p_4_init)
                            T.reads()
                            T.writes(bgemm_local[v_eps, v_nu, v_co, v_p])
                            T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 32, "meta_schedule.tiling_structure": "SSSRRSRS"})
                            bgemm_local[v_eps, v_nu, v_co, v_p] = T.float32(0)
                    for ci_0_fused in T.serial(T.int64(256), annotations={"software_pipeline_async_stages": [0], "software_pipeline_order": [0, 1, 2], "software_pipeline_stage": [0, 0, 3]}):
                        for ax0_ax1_ax2_ax3_fused_0 in range(T.int64(25)):
                            for ax0_ax1_ax2_ax3_fused_1 in T.thread_binding(T.int64(32), thread="threadIdx.x"):
                                with T.block("data_pack_shared"):
                                    v0 = T.axis.spatial(T.int64(6), eps_0_nu_0_co_0_p_0_fused // T.int64(6) * T.int64(2) + (ax0_ax1_ax2_ax3_fused_0 * T.int64(32) + ax0_ax1_ax2_ax3_fused_1) // T.int64(392))
                                    v1 = T.axis.spatial(T.int64(6), eps_0_nu_0_co_0_p_0_fused % T.int64(6) // T.int64(2) * T.int64(2) + (ax0_ax1_ax2_ax3_fused_0 * T.int64(32) + ax0_ax1_ax2_ax3_fused_1) % T.int64(392) // T.int64(196))
                                    v2 = T.axis.spatial(T.int64(256), ci_0_fused)
                                    v3 = T.axis.spatial(T.int64(196), (ax0_ax1_ax2_ax3_fused_0 * T.int64(32) + ax0_ax1_ax2_ax3_fused_1) % T.int64(196))
                                    T.where(ax0_ax1_ax2_ax3_fused_0 * T.int64(32) + ax0_ax1_ax2_ax3_fused_1 < T.int64(784))
                                    T.reads(data_pack[v0, v1, v2, v3])
                                    T.writes(data_pack_shared[v0, v1, v2, v3])
                                    data_pack_shared[v0, v1, v2, v3] = data_pack[v0, v1, v2, v3]
                        for ax0_ax1_ax2_ax3_fused_0 in range(T.int64(8)):
                            for ax0_ax1_ax2_ax3_fused_1 in T.thread_binding(T.int64(32), thread="threadIdx.x"):
                                for ax0_ax1_ax2_ax3_fused_2 in T.vectorized(T.int64(2)):
                                    with T.block("p1_shared"):
                                        v0 = T.axis.spatial(T.int64(6), eps_0_nu_0_co_0_p_0_fused // T.int64(6) * T.int64(2) + (ax0_ax1_ax2_ax3_fused_0 * T.int64(64) + ax0_ax1_ax2_ax3_fused_1 * T.int64(2) + ax0_ax1_ax2_ax3_fused_2) // T.int64(256))
                                        v1 = T.axis.spatial(T.int64(6), eps_0_nu_0_co_0_p_0_fused % T.int64(6) // T.int64(2) * T.int64(2) + (ax0_ax1_ax2_ax3_fused_0 * T.int64(64) + ax0_ax1_ax2_ax3_fused_1 * T.int64(2) + ax0_ax1_ax2_ax3_fused_2) % T.int64(256) // T.int64(128))
                                        v2 = T.axis.spatial(T.int64(256), ci_0_fused)
                                        v3 = T.axis.spatial(T.int64(256), eps_0_nu_0_co_0_p_0_fused % T.int64(2) * T.int64(128) + (ax0_ax1_ax2_ax3_fused_0 * T.int64(64) + ax0_ax1_ax2_ax3_fused_1 * T.int64(2) + ax0_ax1_ax2_ax3_fused_2) % T.int64(128))
                                        T.reads(p1[v0, v1, v2, v3])
                                        T.writes(p1_shared[v0, v1, v2, v3])
                                        p1_shared[v0, v1, v2, v3] = p1[v0, v1, v2, v3]
                        for ci_1, eps_3, nu_3, co_3, p_3, ci_2, eps_4, nu_4, co_4, p_4 in T.grid(T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(7), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(2)):
                            with T.block("bgemm_update"):
                                v_eps = T.axis.spatial(T.int64(6), eps_0_nu_0_co_0_p_0_fused // T.int64(6) * T.int64(2) + eps_1_nu_1_co_1_p_1_fused // T.int64(112) + eps_3 + eps_4)
                                v_nu = T.axis.spatial(T.int64(6), eps_0_nu_0_co_0_p_0_fused % T.int64(6) // T.int64(2) * T.int64(2) + eps_2_nu_2_co_2_p_2_fused // T.int64(16) + nu_3 + nu_4)
                                v_co = T.axis.spatial(T.int64(256), eps_0_nu_0_co_0_p_0_fused % T.int64(2) * T.int64(128) + eps_1_nu_1_co_1_p_1_fused % T.int64(112) // T.int64(7) * T.int64(8) + eps_2_nu_2_co_2_p_2_fused % T.int64(16) // T.int64(2) + co_3 + co_4)
                                v_p = T.axis.spatial(T.int64(196), eps_1_nu_1_co_1_p_1_fused % T.int64(7) * T.int64(28) + eps_2_nu_2_co_2_p_2_fused % T.int64(2) * T.int64(14) + p_3 * T.int64(2) + p_4)
                                v_ci = T.axis.reduce(T.int64(256), ci_0_fused + ci_1 + ci_2)
                                T.reads(bgemm_local[v_eps, v_nu, v_co, v_p], data_pack_shared[v_eps, v_nu, v_ci, v_p], p1_shared[v_eps, v_nu, v_ci, v_co])
                                T.writes(bgemm_local[v_eps, v_nu, v_co, v_p])
                                T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 32, "meta_schedule.tiling_structure": "SSSRRSRS"})
                                bgemm_local[v_eps, v_nu, v_co, v_p] = bgemm_local[v_eps, v_nu, v_co, v_p] + data_pack_shared[v_eps, v_nu, v_ci, v_p] * p1_shared[v_eps, v_nu, v_ci, v_co]
                    for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(1), T.int64(1), T.int64(14)):
                        with T.block("bgemm_local"):
                            v0 = T.axis.spatial(T.int64(6), eps_0_nu_0_co_0_p_0_fused // T.int64(6) * T.int64(2) + eps_1_nu_1_co_1_p_1_fused // T.int64(112) + ax0)
                            v1 = T.axis.spatial(T.int64(6), eps_0_nu_0_co_0_p_0_fused % T.int64(6) // T.int64(2) * T.int64(2) + eps_2_nu_2_co_2_p_2_fused // T.int64(16) + ax1)
                            v2 = T.axis.spatial(T.int64(256), eps_0_nu_0_co_0_p_0_fused % T.int64(2) * T.int64(128) + eps_1_nu_1_co_1_p_1_fused % T.int64(112) // T.int64(7) * T.int64(8) + eps_2_nu_2_co_2_p_2_fused % T.int64(16) // T.int64(2) + ax2)
                            v3 = T.axis.spatial(T.int64(196), eps_1_nu_1_co_1_p_1_fused % T.int64(7) * T.int64(28) + eps_2_nu_2_co_2_p_2_fused % T.int64(2) * T.int64(14) + ax3)
                            T.reads(bgemm_local[v0, v1, v2, v3])
                            T.writes(bgemm[v0, v1, v2, v3])
                            bgemm[v0, v1, v2, v3] = bgemm_local[v0, v1, v2, v3]
        for n_co_h_0_w_0_fused_0 in T.thread_binding(T.int64(392), thread="blockIdx.x", annotations={"pragma_auto_unroll_max_step": 1024, "pragma_unroll_explicit": 1}):
            for n_co_h_0_w_0_fused_1 in T.thread_binding(T.int64(128), thread="threadIdx.x"):
                for ax0, ax1 in T.grid(T.int64(1), T.int64(1)):
                    for ax2 in T.unroll(T.int64(4)):
                        for ax3 in T.unroll(T.int64(4)):
                            with T.block("inverse_init"):
                                v_co = T.axis.spatial(T.int64(256), (n_co_h_0_w_0_fused_0 * T.int64(128) + n_co_h_0_w_0_fused_1) // T.int64(196) + ax0)
                                v_p = T.axis.spatial(T.int64(196), (n_co_h_0_w_0_fused_0 * T.int64(128) + n_co_h_0_w_0_fused_1) % T.int64(196) + ax1)
                                v_vh, v_vw = T.axis.remap("SS", [ax2, ax3])
                                T.reads()
                                T.writes(inverse_local[v_co, v_p, v_vh, v_vw])
                                T.block_attr({"schedule_rule": "conv2d_nchw_winograd_inverse"})
                                inverse_local[v_co, v_p, v_vh, v_vw] = T.float32(0)
                            for ax4 in T.unroll(T.int64(6)):
                                for ax5 in T.unroll(T.int64(6)):
                                    with T.block("inverse_update"):
                                        v_co = T.axis.spatial(T.int64(256), (n_co_h_0_w_0_fused_0 * T.int64(128) + n_co_h_0_w_0_fused_1) // T.int64(196) + ax0)
                                        v_p = T.axis.spatial(T.int64(196), (n_co_h_0_w_0_fused_0 * T.int64(128) + n_co_h_0_w_0_fused_1) % T.int64(196) + ax1)
                                        v_vh, v_vw, v_r_a, v_r_b = T.axis.remap("SSRR", [ax2, ax3, ax4, ax5])
                                        T.reads(inverse_local[v_co, v_p, v_vh, v_vw], bgemm[v_r_a, v_r_b, v_co, v_p])
                                        T.writes(inverse_local[v_co, v_p, v_vh, v_vw])
                                        T.block_attr({"schedule_rule": "conv2d_nchw_winograd_inverse"})
                                        inverse_local[v_co, v_p, v_vh, v_vw] = inverse_local[v_co, v_p, v_vh, v_vw] + bgemm[v_r_a, v_r_b, v_co, v_p] * T.Select(v_r_a % T.int64(6) == T.int64(5) and v_vh % T.int64(4) == T.int64(3), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(5) and v_vh % T.int64(4) == T.int64(2), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(5) and v_vh % T.int64(4) == T.int64(1), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(5) and v_vh % T.int64(4) == T.int64(0), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(4) and v_vh % T.int64(4) == T.int64(3), T.float32(-8), T.Select(v_r_a % T.int64(6) == T.int64(4) and v_vh % T.int64(4) == T.int64(2), T.float32(4), T.Select(v_r_a % T.int64(6) == T.int64(4) and v_vh % T.int64(4) == T.int64(1), T.float32(-2), T.Select(v_r_a % T.int64(6) == T.int64(4) and v_vh % T.int64(4) == T.int64(0), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(3) and v_vh % T.int64(4) == T.int64(3), T.float32(0.125), T.Select(v_r_a % T.int64(6) == T.int64(3) and v_vh % T.int64(4) == T.int64(2), T.float32(0.25), T.Select(v_r_a % T.int64(6) == T.int64(3) and v_vh % T.int64(4) == T.int64(1), T.float32(0.5), T.Select(v_r_a % T.int64(6) == T.int64(3) and v_vh % T.int64(4) == T.int64(0), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(2) and v_vh % T.int64(4) == T.int64(3), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(2) and v_vh % T.int64(4) == T.int64(2), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(2) and v_vh % T.int64(4) == T.int64(1), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(2) and v_vh % T.int64(4) == T.int64(0), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(1) and v_vh % T.int64(4) == T.int64(3), T.float32(-1), T.Select(v_r_a % T.int64(6) == T.int64(1) and v_vh % T.int64(4) == T.int64(2), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(1) and v_vh % T.int64(4) == T.int64(1), T.float32(-1), T.Select(v_r_a % T.int64(6) == T.int64(1) and v_vh % T.int64(4) == T.int64(0), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(0) and v_vh % T.int64(4) == T.int64(3), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(0) and v_vh % T.int64(4) == T.int64(2), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(0) and v_vh % T.int64(4) == T.int64(1), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(0) and v_vh % T.int64(4) == T.int64(0), T.float32(1), T.float32(0))))))))))))))))))))))))) * T.Select(v_r_b % T.int64(6) == T.int64(5) and v_vw % T.int64(4) == T.int64(3), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(5) and v_vw % T.int64(4) == T.int64(2), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(5) and v_vw % T.int64(4) == T.int64(1), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(5) and v_vw % T.int64(4) == T.int64(0), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(4) and v_vw % T.int64(4) == T.int64(3), T.float32(-8), T.Select(v_r_b % T.int64(6) == T.int64(4) and v_vw % T.int64(4) == T.int64(2), T.float32(4), T.Select(v_r_b % T.int64(6) == T.int64(4) and v_vw % T.int64(4) == T.int64(1), T.float32(-2), T.Select(v_r_b % T.int64(6) == T.int64(4) and v_vw % T.int64(4) == T.int64(0), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(3) and v_vw % T.int64(4) == T.int64(3), T.float32(0.125), T.Select(v_r_b % T.int64(6) == T.int64(3) and v_vw % T.int64(4) == T.int64(2), T.float32(0.25), T.Select(v_r_b % T.int64(6) == T.int64(3) and v_vw % T.int64(4) == T.int64(1), T.float32(0.5), T.Select(v_r_b % T.int64(6) == T.int64(3) and v_vw % T.int64(4) == T.int64(0), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(2) and v_vw % T.int64(4) == T.int64(3), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(2) and v_vw % T.int64(4) == T.int64(2), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(2) and v_vw % T.int64(4) == T.int64(1), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(2) and v_vw % T.int64(4) == T.int64(0), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(1) and v_vw % T.int64(4) == T.int64(3), T.float32(-1), T.Select(v_r_b % T.int64(6) == T.int64(1) and v_vw % T.int64(4) == T.int64(2), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(1) and v_vw % T.int64(4) == T.int64(1), T.float32(-1), T.Select(v_r_b % T.int64(6) == T.int64(1) and v_vw % T.int64(4) == T.int64(0), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(0) and v_vw % T.int64(4) == T.int64(3), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(0) and v_vw % T.int64(4) == T.int64(2), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(0) and v_vw % T.int64(4) == T.int64(1), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(0) and v_vw % T.int64(4) == T.int64(0), T.float32(1), T.float32(0)))))))))))))))))))))))))
                for h_1, w_1 in T.grid(T.int64(4), T.int64(4)):
                    with T.block("conv2d_winograd"):
                        v_n = T.axis.spatial(T.int64(1), T.int64(0))
                        v_co = T.axis.spatial(T.int64(256), (n_co_h_0_w_0_fused_0 * T.int64(128) + n_co_h_0_w_0_fused_1) // T.int64(196))
                        v_h = T.axis.spatial(T.int64(56), (n_co_h_0_w_0_fused_0 * T.int64(128) + n_co_h_0_w_0_fused_1) % T.int64(196) // T.int64(14) * T.int64(4) + h_1)
                        v_w = T.axis.spatial(T.int64(56), (n_co_h_0_w_0_fused_0 * T.int64(128) + n_co_h_0_w_0_fused_1) % T.int64(14) * T.int64(4) + w_1)
                        T.reads(inverse_local[v_co, v_n * T.int64(196) + v_h // T.int64(4) * T.int64(14) + v_w // T.int64(4), v_h % T.int64(4), v_w % T.int64(4)], p2[v_n, v_co, T.int64(0), T.int64(0)])
                        T.writes(T_relu[v_n, v_co, v_h, v_w])
                        T_relu[v_n, v_co, v_h, v_w] = T.max(inverse_local[v_co, v_n * T.int64(196) + v_h // T.int64(4) * T.int64(14) + v_w // T.int64(4), v_h % T.int64(4), v_w % T.int64(4)] + p2[v_n, v_co, T.int64(0), T.int64(0)], T.float32(0))
b0 = sch.get_block(name="data_pack", func_name="main")
b1 = sch.get_block(name="bgemm", func_name="main")
b2 = sch.get_block(name="inverse", func_name="main")
b3 = sch.get_block(name="conv2d_winograd", func_name="main")
b4 = sch.get_block(name="T_add", func_name="main")
b5 = sch.get_block(name="T_relu", func_name="main")
b6 = sch.get_block(name="root", func_name="main")
b7, b8 = sch.get_producers(block=b2)
sch.compute_inline(block=b8)
b9, = sch.get_consumers(block=b2)
l10, l11, l12, l13 = sch.get_loops(block=b9)
l14, l15 = sch.split(loop=l12, factors=[None, 4], preserve_unit_iters=True)
l16, l17 = sch.split(loop=l13, factors=[None, 4], preserve_unit_iters=True)
sch.reorder(l14, l16, l15, l17)
sch.compute_at(block=b2, loop=l16, preserve_unit_loops=True, index=-1)
sch.set_scope(block=b2, buffer_index=0, storage_scope="local")
l18, l19, l20, l21, l22, l23, l24, l25, l26, l27 = sch.get_loops(block=b2)
sch.unroll(loop=l24)
sch.unroll(loop=l25)
sch.unroll(loop=l26)
sch.unroll(loop=l27)
b28, b29 = sch.get_producers(block=b0)
sch.compute_inline(block=b29)
b30, = sch.get_producers(block=b28)
l31, l32, l33, l34, l35, l36 = sch.get_loops(block=b0)
sch.reorder(l33, l34, l31, l32, l35, l36)
sch.unroll(loop=l31)
sch.unroll(loop=l32)
sch.unroll(loop=l35)
sch.unroll(loop=l36)
l37 = sch.fuse(l33, l34, preserve_unit_iters=True)
v38 = sch.sample_categorical(candidates=[32, 64, 128, 256, 512, 1024], probs=[0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666], decision=5)
l39, l40 = sch.split(loop=l37, factors=[None, v38], preserve_unit_iters=True)
sch.bind(loop=l39, thread_axis="blockIdx.x")
sch.bind(loop=l40, thread_axis="threadIdx.x")
b41 = sch.cache_write(block=b0, write_buffer_index=0, storage_scope="local")
sch.reverse_compute_at(block=b41, loop=l40, preserve_unit_loops=True, index=-1)
sch.compute_at(block=b28, loop=l40, preserve_unit_loops=True, index=-1)
sch.set_scope(block=b28, buffer_index=0, storage_scope="local")
sch.compute_inline(block=b30)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSSRRSRS")
l42, l43, l44, l45, l46 = sch.get_loops(block=b1)
v47, v48, v49, v50, v51 = sch.sample_perfect_tile(loop=l42, n=5, max_innermost_factor=64, decision=[3, 2, 1, 1, 1])
l52, l53, l54, l55, l56 = sch.split(loop=l42, factors=[v47, v48, v49, v50, v51], preserve_unit_iters=True)
v57, v58, v59, v60, v61 = sch.sample_perfect_tile(loop=l43, n=5, max_innermost_factor=64, decision=[3, 1, 2, 1, 1])
l62, l63, l64, l65, l66 = sch.split(loop=l43, factors=[v57, v58, v59, v60, v61], preserve_unit_iters=True)
v67, v68, v69, v70, v71 = sch.sample_perfect_tile(loop=l44, n=5, max_innermost_factor=64, decision=[2, 16, 8, 1, 1])
l72, l73, l74, l75, l76 = sch.split(loop=l44, factors=[v67, v68, v69, v70, v71], preserve_unit_iters=True)
v77, v78, v79, v80, v81 = sch.sample_perfect_tile(loop=l45, n=5, max_innermost_factor=64, decision=[1, 7, 2, 7, 2])
l82, l83, l84, l85, l86 = sch.split(loop=l45, factors=[v77, v78, v79, v80, v81], preserve_unit_iters=True)
v87, v88, v89 = sch.sample_perfect_tile(loop=l46, n=3, max_innermost_factor=64, decision=[256, 1, 1])
l90, l91, l92 = sch.split(loop=l46, factors=[v87, v88, v89], preserve_unit_iters=True)
sch.reorder(l52, l62, l72, l82, l53, l63, l73, l83, l54, l64, l74, l84, l90, l91, l55, l65, l75, l85, l92, l56, l66, l76, l86)
l93 = sch.fuse(l52, l62, l72, l82, preserve_unit_iters=True)
sch.bind(loop=l93, thread_axis="blockIdx.x")
l94 = sch.fuse(l53, l63, l73, l83, preserve_unit_iters=True)
sch.bind(loop=l94, thread_axis="vthread.x")
l95 = sch.fuse(l54, l64, l74, l84, preserve_unit_iters=True)
sch.bind(loop=l95, thread_axis="threadIdx.x")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_low_inclusive", ann_val=32)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_high_inclusive", ann_val=1024)
b96 = sch.cache_write(block=b1, write_buffer_index=0, storage_scope="local")
sch.reverse_compute_at(block=b96, loop=l95, preserve_unit_loops=True, index=-1)
b97 = sch.cache_read(block=b1, read_buffer_index=0, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b97, loop=l90, preserve_unit_loops=True, index=-1)
l98, l99, l100, l101, l102, l103, l104, l105 = sch.get_loops(block=b97)
l106 = sch.fuse(l102, l103, l104, l105, preserve_unit_iters=True)
v107 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=0)
sch.annotate(block_or_loop=b97, ann_key="meta_schedule.cooperative_fetch", ann_val=v107)
b108 = sch.cache_read(block=b1, read_buffer_index=1, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b108, loop=l90, preserve_unit_loops=True, index=-1)
l109, l110, l111, l112, l113, l114, l115, l116 = sch.get_loops(block=b108)
l117 = sch.fuse(l113, l114, l115, l116, preserve_unit_iters=True)
v118 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=1)
sch.annotate(block_or_loop=b108, ann_key="meta_schedule.cooperative_fetch", ann_val=v118)
l119 = sch.fuse(l90, preserve_unit_iters=True)
sch.annotate(block_or_loop=l119, ann_key="software_pipeline_stage", ann_val=[0, 0, 3])
sch.annotate(block_or_loop=l119, ann_key="software_pipeline_order", ann_val=[0, 1, 2])
sch.annotate(block_or_loop=l119, ann_key="software_pipeline_async_stages", ann_val=[0])
sch.reverse_compute_inline(block=b5)
sch.reverse_compute_inline(block=b4)
v120 = sch.sample_categorical(candidates=[0, 16, 64, 512, 1024], probs=[0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001], decision=4)
sch.annotate(block_or_loop=b6, ann_key="meta_schedule.unroll_explicit", ann_val=v120)
l121, l122, l123, l124, l125, l126 = sch.get_loops(block=b3)
l127 = sch.fuse(l121, l122, l123, l124, preserve_unit_iters=True)
v128 = sch.sample_categorical(candidates=[32, 64, 128, 256, 512, 1024], probs=[0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666], decision=2)
l129, l130 = sch.split(loop=l127, factors=[None, v128], preserve_unit_iters=True)
sch.bind(loop=l129, thread_axis="blockIdx.x")
sch.bind(loop=l130, thread_axis="threadIdx.x")
sch.enter_postproc()
sch.unannotate(block_or_loop=b97, ann_key="meta_schedule.cooperative_fetch")
l131, l132, l133, l134, l135 = sch.get_loops(block=b97)
l136, l137 = sch.split(loop=l135, factors=[None, 32], preserve_unit_iters=True)
sch.bind(loop=l137, thread_axis="threadIdx.x")
sch.unannotate(block_or_loop=b108, ann_key="meta_schedule.cooperative_fetch")
l138, l139, l140, l141, l142 = sch.get_loops(block=b108)
l143, l144, l145 = sch.split(loop=l142, factors=[None, 32, 2], preserve_unit_iters=True)
sch.vectorize(loop=l145)
sch.bind(loop=l144, thread_axis="threadIdx.x")
b146 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b146, ann_key="meta_schedule.unroll_explicit")
b147, b148, b149, b150, b151, b152, b153, b154, b155 = sch.get_child_blocks(b146)
l156, l157, l158, l159, l160, l161 = sch.get_loops(block=b147)
l162, l163, l164, l165, l166, l167 = sch.get_loops(block=b148)
sch.annotate(block_or_loop=l162, ann_key="pragma_auto_unroll_max_step", ann_val=1024)
sch.annotate(block_or_loop=l162, ann_key="pragma_unroll_explicit", ann_val=1)
l168, l169, l170, l171, l172, l173 = sch.get_loops(block=b149)
l174, l175, l176, l177, l178, l179 = sch.get_loops(block=b150)
l180, l181, l182, l183, l184, l185, l186 = sch.get_loops(block=b151)
l187, l188, l189, l190, l191, l192, l193, l194, l195, l196, l197, l198, l199, l200 = sch.get_loops(block=b152)
sch.annotate(block_or_loop=l187, ann_key="pragma_auto_unroll_max_step", ann_val=1024)
sch.annotate(block_or_loop=l187, ann_key="pragma_unroll_explicit", ann_val=1)
l201, l202, l203, l204, l205, l206, l207 = sch.get_loops(block=b153)
l208, l209, l210, l211, l212, l213, l214, l215 = sch.get_loops(block=b154)
sch.annotate(block_or_loop=l208, ann_key="pragma_auto_unroll_max_step", ann_val=1024)
sch.annotate(block_or_loop=l208, ann_key="pragma_unroll_explicit", ann_val=1)
l216, l217, l218, l219 = sch.get_loops(block=b155)
b220 = sch.get_block(name="data_pack", func_name="main")
l221, l222, l223, l224, l225, l226 = sch.get_loops(block=b220)
b227 = sch.decompose_reduction(block=b220, loop=l225)
b228 = sch.get_block(name="bgemm", func_name="main")
l229, l230, l231, l232, l233, l234, l235, l236, l237, l238, l239, l240, l241, l242 = sch.get_loops(block=b228)
b243 = sch.decompose_reduction(block=b228, loop=l232)
b244 = sch.get_block(name="inverse", func_name="main")
l245, l246, l247, l248, l249, l250, l251, l252 = sch.get_loops(block=b244)
b253 = sch.decompose_reduction(block=b244, loop=l251)
2024-04-29 00:33:49 [INFO] [task_scheduler.cc:121] [Task #5: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #711: Error in building:
LocalBuilder: Timeout, killed after 30.0 seconds
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(256), T.int64(56), T.int64(56)), "float32"), p1: T.Buffer((T.int64(6), T.int64(6), T.int64(256), T.int64(256)), "float32"), p2: T.Buffer((T.int64(1), T.int64(256), T.int64(1), T.int64(1)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(256), T.int64(56), T.int64(56)), "float32")):
        T.func_attr({"layout_free_buffers": [1], "tir.noalias": T.bool(True)})
        # with T.block("root"):
        input_tile_local = T.alloc_buffer((T.int64(256), T.int64(196), T.int64(6), T.int64(6)), scope="local")
        data_pack = T.alloc_buffer((T.int64(6), T.int64(6), T.int64(256), T.int64(196)))
        bgemm = T.alloc_buffer((T.int64(6), T.int64(6), T.int64(256), T.int64(196)))
        inverse_local = T.alloc_buffer((T.int64(256), T.int64(196), T.int64(4), T.int64(4)), scope="local")
        data_pack_local = T.alloc_buffer((T.int64(6), T.int64(6), T.int64(256), T.int64(196)), scope="local")
        bgemm_local = T.alloc_buffer((T.int64(6), T.int64(6), T.int64(256), T.int64(196)), scope="local")
        data_pack_shared = T.alloc_buffer((T.int64(6), T.int64(6), T.int64(256), T.int64(196)), scope="shared")
        p1_shared = T.alloc_buffer((T.int64(6), T.int64(6), T.int64(256), T.int64(256)), scope="shared")
        for ci_p_fused_0 in T.thread_binding(T.int64(49), thread="blockIdx.x", annotations={"pragma_auto_unroll_max_step": 1024, "pragma_unroll_explicit": 1}):
            for ci_p_fused_1 in T.thread_binding(T.int64(1024), thread="threadIdx.x"):
                for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(1), T.int64(6), T.int64(6)):
                    with T.block("input_tile"):
                        v_ci = T.axis.spatial(T.int64(256), (ci_p_fused_0 * T.int64(1024) + ci_p_fused_1) // T.int64(196) + ax0)
                        v_p = T.axis.spatial(T.int64(196), (ci_p_fused_0 * T.int64(44) + ci_p_fused_1) % T.int64(196) + ax1)
                        v_eps, v_nu = T.axis.remap("SS", [ax2, ax3])
                        T.reads(p0[v_p // T.int64(196), v_ci, v_p % T.int64(196) // T.int64(14) * T.int64(4) + v_eps - T.int64(1), v_p % T.int64(14) * T.int64(4) + v_nu - T.int64(1)])
                        T.writes(input_tile_local[v_ci, v_p, v_eps, v_nu])
                        T.block_attr({"schedule_rule": "None"})
                        input_tile_local[v_ci, v_p, v_eps, v_nu] = T.if_then_else(T.int64(1) <= v_p % T.int64(196) // T.int64(14) * T.int64(4) + v_eps and v_p % T.int64(196) // T.int64(14) * T.int64(4) + v_eps < T.int64(57) and T.int64(1) <= v_p % T.int64(14) * T.int64(4) + v_nu and v_p % T.int64(14) * T.int64(4) + v_nu < T.int64(57), p0[v_p // T.int64(196), v_ci, v_p % T.int64(196) // T.int64(14) * T.int64(4) + v_eps - T.int64(1), v_p % T.int64(14) * T.int64(4) + v_nu - T.int64(1)], T.float32(0))
                for eps in T.unroll(T.int64(6)):
                    for nu in T.unroll(T.int64(6)):
                        with T.block("data_pack_init"):
                            v_eps, v_nu = T.axis.remap("SS", [eps, nu])
                            v_ci = T.axis.spatial(T.int64(256), (ci_p_fused_0 * T.int64(1024) + ci_p_fused_1) // T.int64(196))
                            v_p = T.axis.spatial(T.int64(196), (ci_p_fused_0 * T.int64(1024) + ci_p_fused_1) % T.int64(196))
                            T.reads()
                            T.writes(data_pack_local[v_eps, v_nu, v_ci, v_p])
                            T.block_attr({"schedule_rule": "conv2d_nchw_winograd_data_pack"})
                            data_pack_local[v_eps, v_nu, v_ci, v_p] = T.float32(0)
                        for r_a in T.unroll(T.int64(6)):
                            for r_b in T.unroll(T.int64(6)):
                                with T.block("data_pack_update"):
                                    v_eps, v_nu = T.axis.remap("SS", [eps, nu])
                                    v_ci = T.axis.spatial(T.int64(256), (ci_p_fused_0 * T.int64(1024) + ci_p_fused_1) // T.int64(196))
                                    v_p = T.axis.spatial(T.int64(196), (ci_p_fused_0 * T.int64(1024) + ci_p_fused_1) % T.int64(196))
                                    v_r_a, v_r_b = T.axis.remap("RR", [r_a, r_b])
                                    T.reads(data_pack_local[v_eps, v_nu, v_ci, v_p], input_tile_local[v_ci, v_p, v_r_a, v_r_b])
                                    T.writes(data_pack_local[v_eps, v_nu, v_ci, v_p])
                                    T.block_attr({"schedule_rule": "conv2d_nchw_winograd_data_pack"})
                                    data_pack_local[v_eps, v_nu, v_ci, v_p] = data_pack_local[v_eps, v_nu, v_ci, v_p] + input_tile_local[v_ci, v_p, v_r_a, v_r_b] * T.Select(v_r_a % T.int64(6) == T.int64(5) and v_eps % T.int64(6) == T.int64(5), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(5) and v_eps % T.int64(6) == T.int64(4), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(5) and v_eps % T.int64(6) == T.int64(3), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(5) and v_eps % T.int64(6) == T.int64(2), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(5) and v_eps % T.int64(6) == T.int64(1), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(5) and v_eps % T.int64(6) == T.int64(0), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(4) and v_eps % T.int64(6) == T.int64(5), T.float32(1.5), T.Select(v_r_a % T.int64(6) == T.int64(4) and v_eps % T.int64(6) == T.int64(4), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(4) and v_eps % T.int64(6) == T.int64(3), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(4) and v_eps % T.int64(6) == T.int64(2), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(4) and v_eps % T.int64(6) == T.int64(1), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(4) and v_eps % T.int64(6) == T.int64(0), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(3) and v_eps % T.int64(6) == T.int64(5), T.float32(-2), T.Select(v_r_a % T.int64(6) == T.int64(3) and v_eps % T.int64(6) == T.int64(4), T.float32(-0.5), T.Select(v_r_a % T.int64(6) == T.int64(3) and v_eps % T.int64(6) == T.int64(3), T.float32(2), T.Select(v_r_a % T.int64(6) == T.int64(3) and v_eps % T.int64(6) == T.int64(2), T.float32(2.5), T.Select(v_r_a % T.int64(6) == T.int64(3) and v_eps % T.int64(6) == T.int64(1), T.float32(0.5), T.Select(v_r_a % T.int64(6) == T.int64(3) and v_eps % T.int64(6) == T.int64(0), T.float32(1.5), T.Select(v_r_a % T.int64(6) == T.int64(2) and v_eps % T.int64(6) == T.int64(5), T.float32(-1.5), T.Select(v_r_a % T.int64(6) == T.int64(2) and v_eps % T.int64(6) == T.int64(4), T.float32(-1), T.Select(v_r_a % T.int64(6) == T.int64(2) and v_eps % T.int64(6) == T.int64(3), T.float32(-1), T.Select(v_r_a % T.int64(6) == T.int64(2) and v_eps % T.int64(6) == T.int64(2), T.float32(0.5), T.Select(v_r_a % T.int64(6) == T.int64(2) and v_eps % T.int64(6) == T.int64(1), T.float32(-2.5), T.Select(v_r_a % T.int64(6) == T.int64(2) and v_eps % T.int64(6) == T.int64(0), T.float32(-2), T.Select(v_r_a % T.int64(6) == T.int64(1) and v_eps % T.int64(6) == T.int64(5), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(1) and v_eps % T.int64(6) == T.int64(4), T.float32(0.5), T.Select(v_r_a % T.int64(6) == T.int64(1) and v_eps % T.int64(6) == T.int64(3), T.float32(-2), T.Select(v_r_a % T.int64(6) == T.int64(1) and v_eps % T.int64(6) == T.int64(2), T.float32(-1), T.Select(v_r_a % T.int64(6) == T.int64(1) and v_eps % T.int64(6) == T.int64(1), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(1) and v_eps % T.int64(6) == T.int64(0), T.float32(-1.5), T.Select(v_r_a % T.int64(6) == T.int64(0) and v_eps % T.int64(6) == T.int64(5), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(0) and v_eps % T.int64(6) == T.int64(4), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(0) and v_eps % T.int64(6) == T.int64(3), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(0) and v_eps % T.int64(6) == T.int64(2), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(0) and v_eps % T.int64(6) == T.int64(1), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(0) and v_eps % T.int64(6) == T.int64(0), T.float32(1), T.float32(0))))))))))))))))))))))))))))))))))))) * T.Select(v_r_b % T.int64(6) == T.int64(5) and v_nu % T.int64(6) == T.int64(5), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(5) and v_nu % T.int64(6) == T.int64(4), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(5) and v_nu % T.int64(6) == T.int64(3), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(5) and v_nu % T.int64(6) == T.int64(2), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(5) and v_nu % T.int64(6) == T.int64(1), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(5) and v_nu % T.int64(6) == T.int64(0), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(4) and v_nu % T.int64(6) == T.int64(5), T.float32(1.5), T.Select(v_r_b % T.int64(6) == T.int64(4) and v_nu % T.int64(6) == T.int64(4), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(4) and v_nu % T.int64(6) == T.int64(3), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(4) and v_nu % T.int64(6) == T.int64(2), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(4) and v_nu % T.int64(6) == T.int64(1), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(4) and v_nu % T.int64(6) == T.int64(0), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(3) and v_nu % T.int64(6) == T.int64(5), T.float32(-2), T.Select(v_r_b % T.int64(6) == T.int64(3) and v_nu % T.int64(6) == T.int64(4), T.float32(-0.5), T.Select(v_r_b % T.int64(6) == T.int64(3) and v_nu % T.int64(6) == T.int64(3), T.float32(2), T.Select(v_r_b % T.int64(6) == T.int64(3) and v_nu % T.int64(6) == T.int64(2), T.float32(2.5), T.Select(v_r_b % T.int64(6) == T.int64(3) and v_nu % T.int64(6) == T.int64(1), T.float32(0.5), T.Select(v_r_b % T.int64(6) == T.int64(3) and v_nu % T.int64(6) == T.int64(0), T.float32(1.5), T.Select(v_r_b % T.int64(6) == T.int64(2) and v_nu % T.int64(6) == T.int64(5), T.float32(-1.5), T.Select(v_r_b % T.int64(6) == T.int64(2) and v_nu % T.int64(6) == T.int64(4), T.float32(-1), T.Select(v_r_b % T.int64(6) == T.int64(2) and v_nu % T.int64(6) == T.int64(3), T.float32(-1), T.Select(v_r_b % T.int64(6) == T.int64(2) and v_nu % T.int64(6) == T.int64(2), T.float32(0.5), T.Select(v_r_b % T.int64(6) == T.int64(2) and v_nu % T.int64(6) == T.int64(1), T.float32(-2.5), T.Select(v_r_b % T.int64(6) == T.int64(2) and v_nu % T.int64(6) == T.int64(0), T.float32(-2), T.Select(v_r_b % T.int64(6) == T.int64(1) and v_nu % T.int64(6) == T.int64(5), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(1) and v_nu % T.int64(6) == T.int64(4), T.float32(0.5), T.Select(v_r_b % T.int64(6) == T.int64(1) and v_nu % T.int64(6) == T.int64(3), T.float32(-2), T.Select(v_r_b % T.int64(6) == T.int64(1) and v_nu % T.int64(6) == T.int64(2), T.float32(-1), T.Select(v_r_b % T.int64(6) == T.int64(1) and v_nu % T.int64(6) == T.int64(1), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(1) and v_nu % T.int64(6) == T.int64(0), T.float32(-1.5), T.Select(v_r_b % T.int64(6) == T.int64(0) and v_nu % T.int64(6) == T.int64(5), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(0) and v_nu % T.int64(6) == T.int64(4), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(0) and v_nu % T.int64(6) == T.int64(3), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(0) and v_nu % T.int64(6) == T.int64(2), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(0) and v_nu % T.int64(6) == T.int64(1), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(0) and v_nu % T.int64(6) == T.int64(0), T.float32(1), T.float32(0)))))))))))))))))))))))))))))))))))))
                for ax0, ax1, ax2, ax3 in T.grid(T.int64(6), T.int64(6), T.int64(1), T.int64(1)):
                    with T.block("data_pack_local"):
                        v0, v1 = T.axis.remap("SS", [ax0, ax1])
                        v2 = T.axis.spatial(T.int64(256), (ci_p_fused_0 * T.int64(1024) + ci_p_fused_1) // T.int64(196) + ax2)
                        v3 = T.axis.spatial(T.int64(196), (ci_p_fused_0 * T.int64(44) + ci_p_fused_1) % T.int64(196) + ax3)
                        T.reads(data_pack_local[v0, v1, v2, v3])
                        T.writes(data_pack[v0, v1, v2, v3])
                        data_pack[v0, v1, v2, v3] = data_pack_local[v0, v1, v2, v3]
        for eps_0_nu_0_co_0_p_0_fused in T.thread_binding(T.int64(18), thread="blockIdx.x", annotations={"pragma_auto_unroll_max_step": 1024, "pragma_unroll_explicit": 1}):
            for eps_1_nu_1_co_1_p_1_fused in T.thread_binding(T.int64(224), thread="vthread.x"):
                for eps_2_nu_2_co_2_p_2_fused in T.thread_binding(T.int64(32), thread="threadIdx.x"):
                    for eps_3_init, nu_3_init, co_3_init, p_3_init, eps_4_init, nu_4_init, co_4_init, p_4_init in T.grid(T.int64(1), T.int64(1), T.int64(1), T.int64(7), T.int64(1), T.int64(1), T.int64(2), T.int64(1)):
                        with T.block("bgemm_init"):
                            v_eps = T.axis.spatial(T.int64(6), eps_0_nu_0_co_0_p_0_fused // T.int64(6) * T.int64(2) + eps_1_nu_1_co_1_p_1_fused // T.int64(112) + eps_3_init + eps_4_init)
                            v_nu = T.axis.spatial(T.int64(6), eps_0_nu_0_co_0_p_0_fused % T.int64(6) // T.int64(2) * T.int64(2) + eps_2_nu_2_co_2_p_2_fused // T.int64(16) + nu_3_init + nu_4_init)
                            v_co = T.axis.spatial(T.int64(256), eps_0_nu_0_co_0_p_0_fused % T.int64(2) * T.int64(128) + eps_1_nu_1_co_1_p_1_fused % T.int64(112) // T.int64(14) * T.int64(16) + eps_2_nu_2_co_2_p_2_fused % T.int64(16) // T.int64(2) * T.int64(2) + co_3_init * T.int64(2) + co_4_init)
                            v_p = T.axis.spatial(T.int64(196), eps_1_nu_1_co_1_p_1_fused % T.int64(14) * T.int64(14) + eps_2_nu_2_co_2_p_2_fused % T.int64(2) * T.int64(7) + p_3_init + p_4_init)
                            T.reads()
                            T.writes(bgemm_local[v_eps, v_nu, v_co, v_p])
                            T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 32, "meta_schedule.tiling_structure": "SSSRRSRS"})
                            bgemm_local[v_eps, v_nu, v_co, v_p] = T.float32(0)
                    for ci_0_fused in T.serial(T.int64(256), annotations={"software_pipeline_async_stages": [0], "software_pipeline_order": [0, 1, 2], "software_pipeline_stage": [0, 0, 3]}):
                        for ax0_ax1_ax2_ax3_fused_0 in range(T.int64(25)):
                            for ax0_ax1_ax2_ax3_fused_1 in T.thread_binding(T.int64(32), thread="threadIdx.x"):
                                with T.block("data_pack_shared"):
                                    v0 = T.axis.spatial(T.int64(6), eps_0_nu_0_co_0_p_0_fused // T.int64(6) * T.int64(2) + (ax0_ax1_ax2_ax3_fused_0 * T.int64(32) + ax0_ax1_ax2_ax3_fused_1) // T.int64(392))
                                    v1 = T.axis.spatial(T.int64(6), eps_0_nu_0_co_0_p_0_fused % T.int64(6) // T.int64(2) * T.int64(2) + (ax0_ax1_ax2_ax3_fused_0 * T.int64(32) + ax0_ax1_ax2_ax3_fused_1) % T.int64(392) // T.int64(196))
                                    v2 = T.axis.spatial(T.int64(256), ci_0_fused)
                                    v3 = T.axis.spatial(T.int64(196), (ax0_ax1_ax2_ax3_fused_0 * T.int64(32) + ax0_ax1_ax2_ax3_fused_1) % T.int64(196))
                                    T.where(ax0_ax1_ax2_ax3_fused_0 * T.int64(32) + ax0_ax1_ax2_ax3_fused_1 < T.int64(784))
                                    T.reads(data_pack[v0, v1, v2, v3])
                                    T.writes(data_pack_shared[v0, v1, v2, v3])
                                    data_pack_shared[v0, v1, v2, v3] = data_pack[v0, v1, v2, v3]
                        for ax0_ax1_ax2_ax3_fused_0 in range(T.int64(16)):
                            for ax0_ax1_ax2_ax3_fused_1 in T.thread_binding(T.int64(32), thread="threadIdx.x"):
                                with T.block("p1_shared"):
                                    v0 = T.axis.spatial(T.int64(6), eps_0_nu_0_co_0_p_0_fused // T.int64(6) * T.int64(2) + (ax0_ax1_ax2_ax3_fused_0 * T.int64(32) + ax0_ax1_ax2_ax3_fused_1) // T.int64(256))
                                    v1 = T.axis.spatial(T.int64(6), eps_0_nu_0_co_0_p_0_fused % T.int64(6) // T.int64(2) * T.int64(2) + (ax0_ax1_ax2_ax3_fused_0 * T.int64(32) + ax0_ax1_ax2_ax3_fused_1) % T.int64(256) // T.int64(128))
                                    v2 = T.axis.spatial(T.int64(256), ci_0_fused)
                                    v3 = T.axis.spatial(T.int64(256), eps_0_nu_0_co_0_p_0_fused % T.int64(2) * T.int64(128) + (ax0_ax1_ax2_ax3_fused_0 * T.int64(32) + ax0_ax1_ax2_ax3_fused_1) % T.int64(128))
                                    T.reads(p1[v0, v1, v2, v3])
                                    T.writes(p1_shared[v0, v1, v2, v3])
                                    p1_shared[v0, v1, v2, v3] = p1[v0, v1, v2, v3]
                        for ci_1, eps_3, nu_3, co_3, p_3, ci_2, eps_4, nu_4, co_4, p_4 in T.grid(T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(7), T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(1)):
                            with T.block("bgemm_update"):
                                v_eps = T.axis.spatial(T.int64(6), eps_0_nu_0_co_0_p_0_fused // T.int64(6) * T.int64(2) + eps_1_nu_1_co_1_p_1_fused // T.int64(112) + eps_3 + eps_4)
                                v_nu = T.axis.spatial(T.int64(6), eps_0_nu_0_co_0_p_0_fused % T.int64(6) // T.int64(2) * T.int64(2) + eps_2_nu_2_co_2_p_2_fused // T.int64(16) + nu_3 + nu_4)
                                v_co = T.axis.spatial(T.int64(256), eps_0_nu_0_co_0_p_0_fused % T.int64(2) * T.int64(128) + eps_1_nu_1_co_1_p_1_fused % T.int64(112) // T.int64(14) * T.int64(16) + eps_2_nu_2_co_2_p_2_fused % T.int64(16) // T.int64(2) * T.int64(2) + co_3 * T.int64(2) + co_4)
                                v_p = T.axis.spatial(T.int64(196), eps_1_nu_1_co_1_p_1_fused % T.int64(14) * T.int64(14) + eps_2_nu_2_co_2_p_2_fused % T.int64(2) * T.int64(7) + p_3 + p_4)
                                v_ci = T.axis.reduce(T.int64(256), ci_0_fused + ci_1 + ci_2)
                                T.reads(bgemm_local[v_eps, v_nu, v_co, v_p], data_pack_shared[v_eps, v_nu, v_ci, v_p], p1_shared[v_eps, v_nu, v_ci, v_co])
                                T.writes(bgemm_local[v_eps, v_nu, v_co, v_p])
                                T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 32, "meta_schedule.tiling_structure": "SSSRRSRS"})
                                bgemm_local[v_eps, v_nu, v_co, v_p] = bgemm_local[v_eps, v_nu, v_co, v_p] + data_pack_shared[v_eps, v_nu, v_ci, v_p] * p1_shared[v_eps, v_nu, v_ci, v_co]
                    for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(1), T.int64(2), T.int64(7)):
                        with T.block("bgemm_local"):
                            v0 = T.axis.spatial(T.int64(6), eps_0_nu_0_co_0_p_0_fused // T.int64(6) * T.int64(2) + eps_1_nu_1_co_1_p_1_fused // T.int64(112) + ax0)
                            v1 = T.axis.spatial(T.int64(6), eps_0_nu_0_co_0_p_0_fused % T.int64(6) // T.int64(2) * T.int64(2) + eps_2_nu_2_co_2_p_2_fused // T.int64(16) + ax1)
                            v2 = T.axis.spatial(T.int64(256), eps_0_nu_0_co_0_p_0_fused % T.int64(2) * T.int64(128) + eps_1_nu_1_co_1_p_1_fused % T.int64(112) // T.int64(14) * T.int64(16) + eps_2_nu_2_co_2_p_2_fused % T.int64(16) // T.int64(2) * T.int64(2) + ax2)
                            v3 = T.axis.spatial(T.int64(196), eps_1_nu_1_co_1_p_1_fused % T.int64(14) * T.int64(14) + eps_2_nu_2_co_2_p_2_fused % T.int64(2) * T.int64(7) + ax3)
                            T.reads(bgemm_local[v0, v1, v2, v3])
                            T.writes(bgemm[v0, v1, v2, v3])
                            bgemm[v0, v1, v2, v3] = bgemm_local[v0, v1, v2, v3]
        for n_co_h_0_w_0_fused_0 in T.thread_binding(T.int64(392), thread="blockIdx.x", annotations={"pragma_auto_unroll_max_step": 1024, "pragma_unroll_explicit": 1}):
            for n_co_h_0_w_0_fused_1 in T.thread_binding(T.int64(128), thread="threadIdx.x"):
                for ax0, ax1 in T.grid(T.int64(1), T.int64(1)):
                    for ax2 in T.unroll(T.int64(4)):
                        for ax3 in T.unroll(T.int64(4)):
                            with T.block("inverse_init"):
                                v_co = T.axis.spatial(T.int64(256), (n_co_h_0_w_0_fused_0 * T.int64(128) + n_co_h_0_w_0_fused_1) // T.int64(196) + ax0)
                                v_p = T.axis.spatial(T.int64(196), (n_co_h_0_w_0_fused_0 * T.int64(128) + n_co_h_0_w_0_fused_1) % T.int64(196) + ax1)
                                v_vh, v_vw = T.axis.remap("SS", [ax2, ax3])
                                T.reads()
                                T.writes(inverse_local[v_co, v_p, v_vh, v_vw])
                                T.block_attr({"schedule_rule": "conv2d_nchw_winograd_inverse"})
                                inverse_local[v_co, v_p, v_vh, v_vw] = T.float32(0)
                            for ax4 in T.unroll(T.int64(6)):
                                for ax5 in T.unroll(T.int64(6)):
                                    with T.block("inverse_update"):
                                        v_co = T.axis.spatial(T.int64(256), (n_co_h_0_w_0_fused_0 * T.int64(128) + n_co_h_0_w_0_fused_1) // T.int64(196) + ax0)
                                        v_p = T.axis.spatial(T.int64(196), (n_co_h_0_w_0_fused_0 * T.int64(128) + n_co_h_0_w_0_fused_1) % T.int64(196) + ax1)
                                        v_vh, v_vw, v_r_a, v_r_b = T.axis.remap("SSRR", [ax2, ax3, ax4, ax5])
                                        T.reads(inverse_local[v_co, v_p, v_vh, v_vw], bgemm[v_r_a, v_r_b, v_co, v_p])
                                        T.writes(inverse_local[v_co, v_p, v_vh, v_vw])
                                        T.block_attr({"schedule_rule": "conv2d_nchw_winograd_inverse"})
                                        inverse_local[v_co, v_p, v_vh, v_vw] = inverse_local[v_co, v_p, v_vh, v_vw] + bgemm[v_r_a, v_r_b, v_co, v_p] * T.Select(v_r_a % T.int64(6) == T.int64(5) and v_vh % T.int64(4) == T.int64(3), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(5) and v_vh % T.int64(4) == T.int64(2), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(5) and v_vh % T.int64(4) == T.int64(1), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(5) and v_vh % T.int64(4) == T.int64(0), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(4) and v_vh % T.int64(4) == T.int64(3), T.float32(-8), T.Select(v_r_a % T.int64(6) == T.int64(4) and v_vh % T.int64(4) == T.int64(2), T.float32(4), T.Select(v_r_a % T.int64(6) == T.int64(4) and v_vh % T.int64(4) == T.int64(1), T.float32(-2), T.Select(v_r_a % T.int64(6) == T.int64(4) and v_vh % T.int64(4) == T.int64(0), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(3) and v_vh % T.int64(4) == T.int64(3), T.float32(0.125), T.Select(v_r_a % T.int64(6) == T.int64(3) and v_vh % T.int64(4) == T.int64(2), T.float32(0.25), T.Select(v_r_a % T.int64(6) == T.int64(3) and v_vh % T.int64(4) == T.int64(1), T.float32(0.5), T.Select(v_r_a % T.int64(6) == T.int64(3) and v_vh % T.int64(4) == T.int64(0), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(2) and v_vh % T.int64(4) == T.int64(3), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(2) and v_vh % T.int64(4) == T.int64(2), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(2) and v_vh % T.int64(4) == T.int64(1), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(2) and v_vh % T.int64(4) == T.int64(0), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(1) and v_vh % T.int64(4) == T.int64(3), T.float32(-1), T.Select(v_r_a % T.int64(6) == T.int64(1) and v_vh % T.int64(4) == T.int64(2), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(1) and v_vh % T.int64(4) == T.int64(1), T.float32(-1), T.Select(v_r_a % T.int64(6) == T.int64(1) and v_vh % T.int64(4) == T.int64(0), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(0) and v_vh % T.int64(4) == T.int64(3), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(0) and v_vh % T.int64(4) == T.int64(2), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(0) and v_vh % T.int64(4) == T.int64(1), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(0) and v_vh % T.int64(4) == T.int64(0), T.float32(1), T.float32(0))))))))))))))))))))))))) * T.Select(v_r_b % T.int64(6) == T.int64(5) and v_vw % T.int64(4) == T.int64(3), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(5) and v_vw % T.int64(4) == T.int64(2), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(5) and v_vw % T.int64(4) == T.int64(1), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(5) and v_vw % T.int64(4) == T.int64(0), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(4) and v_vw % T.int64(4) == T.int64(3), T.float32(-8), T.Select(v_r_b % T.int64(6) == T.int64(4) and v_vw % T.int64(4) == T.int64(2), T.float32(4), T.Select(v_r_b % T.int64(6) == T.int64(4) and v_vw % T.int64(4) == T.int64(1), T.float32(-2), T.Select(v_r_b % T.int64(6) == T.int64(4) and v_vw % T.int64(4) == T.int64(0), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(3) and v_vw % T.int64(4) == T.int64(3), T.float32(0.125), T.Select(v_r_b % T.int64(6) == T.int64(3) and v_vw % T.int64(4) == T.int64(2), T.float32(0.25), T.Select(v_r_b % T.int64(6) == T.int64(3) and v_vw % T.int64(4) == T.int64(1), T.float32(0.5), T.Select(v_r_b % T.int64(6) == T.int64(3) and v_vw % T.int64(4) == T.int64(0), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(2) and v_vw % T.int64(4) == T.int64(3), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(2) and v_vw % T.int64(4) == T.int64(2), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(2) and v_vw % T.int64(4) == T.int64(1), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(2) and v_vw % T.int64(4) == T.int64(0), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(1) and v_vw % T.int64(4) == T.int64(3), T.float32(-1), T.Select(v_r_b % T.int64(6) == T.int64(1) and v_vw % T.int64(4) == T.int64(2), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(1) and v_vw % T.int64(4) == T.int64(1), T.float32(-1), T.Select(v_r_b % T.int64(6) == T.int64(1) and v_vw % T.int64(4) == T.int64(0), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(0) and v_vw % T.int64(4) == T.int64(3), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(0) and v_vw % T.int64(4) == T.int64(2), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(0) and v_vw % T.int64(4) == T.int64(1), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(0) and v_vw % T.int64(4) == T.int64(0), T.float32(1), T.float32(0)))))))))))))))))))))))))
                for h_1, w_1 in T.grid(T.int64(4), T.int64(4)):
                    with T.block("conv2d_winograd"):
                        v_n = T.axis.spatial(T.int64(1), T.int64(0))
                        v_co = T.axis.spatial(T.int64(256), (n_co_h_0_w_0_fused_0 * T.int64(128) + n_co_h_0_w_0_fused_1) // T.int64(196))
                        v_h = T.axis.spatial(T.int64(56), (n_co_h_0_w_0_fused_0 * T.int64(128) + n_co_h_0_w_0_fused_1) % T.int64(196) // T.int64(14) * T.int64(4) + h_1)
                        v_w = T.axis.spatial(T.int64(56), (n_co_h_0_w_0_fused_0 * T.int64(128) + n_co_h_0_w_0_fused_1) % T.int64(14) * T.int64(4) + w_1)
                        T.reads(inverse_local[v_co, v_n * T.int64(196) + v_h // T.int64(4) * T.int64(14) + v_w // T.int64(4), v_h % T.int64(4), v_w % T.int64(4)], p2[v_n, v_co, T.int64(0), T.int64(0)])
                        T.writes(T_relu[v_n, v_co, v_h, v_w])
                        T_relu[v_n, v_co, v_h, v_w] = T.max(inverse_local[v_co, v_n * T.int64(196) + v_h // T.int64(4) * T.int64(14) + v_w // T.int64(4), v_h % T.int64(4), v_w % T.int64(4)] + p2[v_n, v_co, T.int64(0), T.int64(0)], T.float32(0))
b0 = sch.get_block(name="data_pack", func_name="main")
b1 = sch.get_block(name="bgemm", func_name="main")
b2 = sch.get_block(name="inverse", func_name="main")
b3 = sch.get_block(name="conv2d_winograd", func_name="main")
b4 = sch.get_block(name="T_add", func_name="main")
b5 = sch.get_block(name="T_relu", func_name="main")
b6 = sch.get_block(name="root", func_name="main")
b7, b8 = sch.get_producers(block=b2)
sch.compute_inline(block=b8)
b9, = sch.get_consumers(block=b2)
l10, l11, l12, l13 = sch.get_loops(block=b9)
l14, l15 = sch.split(loop=l12, factors=[None, 4], preserve_unit_iters=True)
l16, l17 = sch.split(loop=l13, factors=[None, 4], preserve_unit_iters=True)
sch.reorder(l14, l16, l15, l17)
sch.compute_at(block=b2, loop=l16, preserve_unit_loops=True, index=-1)
sch.set_scope(block=b2, buffer_index=0, storage_scope="local")
l18, l19, l20, l21, l22, l23, l24, l25, l26, l27 = sch.get_loops(block=b2)
sch.unroll(loop=l24)
sch.unroll(loop=l25)
sch.unroll(loop=l26)
sch.unroll(loop=l27)
b28, b29 = sch.get_producers(block=b0)
sch.compute_inline(block=b29)
b30, = sch.get_producers(block=b28)
l31, l32, l33, l34, l35, l36 = sch.get_loops(block=b0)
sch.reorder(l33, l34, l31, l32, l35, l36)
sch.unroll(loop=l31)
sch.unroll(loop=l32)
sch.unroll(loop=l35)
sch.unroll(loop=l36)
l37 = sch.fuse(l33, l34, preserve_unit_iters=True)
v38 = sch.sample_categorical(candidates=[32, 64, 128, 256, 512, 1024], probs=[0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666], decision=5)
l39, l40 = sch.split(loop=l37, factors=[None, v38], preserve_unit_iters=True)
sch.bind(loop=l39, thread_axis="blockIdx.x")
sch.bind(loop=l40, thread_axis="threadIdx.x")
b41 = sch.cache_write(block=b0, write_buffer_index=0, storage_scope="local")
sch.reverse_compute_at(block=b41, loop=l40, preserve_unit_loops=True, index=-1)
sch.compute_at(block=b28, loop=l40, preserve_unit_loops=True, index=-1)
sch.set_scope(block=b28, buffer_index=0, storage_scope="local")
sch.compute_inline(block=b30)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSSRRSRS")
l42, l43, l44, l45, l46 = sch.get_loops(block=b1)
v47, v48, v49, v50, v51 = sch.sample_perfect_tile(loop=l42, n=5, max_innermost_factor=64, decision=[3, 2, 1, 1, 1])
l52, l53, l54, l55, l56 = sch.split(loop=l42, factors=[v47, v48, v49, v50, v51], preserve_unit_iters=True)
v57, v58, v59, v60, v61 = sch.sample_perfect_tile(loop=l43, n=5, max_innermost_factor=64, decision=[3, 1, 2, 1, 1])
l62, l63, l64, l65, l66 = sch.split(loop=l43, factors=[v57, v58, v59, v60, v61], preserve_unit_iters=True)
v67, v68, v69, v70, v71 = sch.sample_perfect_tile(loop=l44, n=5, max_innermost_factor=64, decision=[2, 8, 8, 1, 2])
l72, l73, l74, l75, l76 = sch.split(loop=l44, factors=[v67, v68, v69, v70, v71], preserve_unit_iters=True)
v77, v78, v79, v80, v81 = sch.sample_perfect_tile(loop=l45, n=5, max_innermost_factor=64, decision=[1, 14, 2, 7, 1])
l82, l83, l84, l85, l86 = sch.split(loop=l45, factors=[v77, v78, v79, v80, v81], preserve_unit_iters=True)
v87, v88, v89 = sch.sample_perfect_tile(loop=l46, n=3, max_innermost_factor=64, decision=[256, 1, 1])
l90, l91, l92 = sch.split(loop=l46, factors=[v87, v88, v89], preserve_unit_iters=True)
sch.reorder(l52, l62, l72, l82, l53, l63, l73, l83, l54, l64, l74, l84, l90, l91, l55, l65, l75, l85, l92, l56, l66, l76, l86)
l93 = sch.fuse(l52, l62, l72, l82, preserve_unit_iters=True)
sch.bind(loop=l93, thread_axis="blockIdx.x")
l94 = sch.fuse(l53, l63, l73, l83, preserve_unit_iters=True)
sch.bind(loop=l94, thread_axis="vthread.x")
l95 = sch.fuse(l54, l64, l74, l84, preserve_unit_iters=True)
sch.bind(loop=l95, thread_axis="threadIdx.x")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_low_inclusive", ann_val=32)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_high_inclusive", ann_val=1024)
b96 = sch.cache_write(block=b1, write_buffer_index=0, storage_scope="local")
sch.reverse_compute_at(block=b96, loop=l95, preserve_unit_loops=True, index=-1)
b97 = sch.cache_read(block=b1, read_buffer_index=0, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b97, loop=l90, preserve_unit_loops=True, index=-1)
l98, l99, l100, l101, l102, l103, l104, l105 = sch.get_loops(block=b97)
l106 = sch.fuse(l102, l103, l104, l105, preserve_unit_iters=True)
v107 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=0)
sch.annotate(block_or_loop=b97, ann_key="meta_schedule.cooperative_fetch", ann_val=v107)
b108 = sch.cache_read(block=b1, read_buffer_index=1, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b108, loop=l90, preserve_unit_loops=True, index=-1)
l109, l110, l111, l112, l113, l114, l115, l116 = sch.get_loops(block=b108)
l117 = sch.fuse(l113, l114, l115, l116, preserve_unit_iters=True)
v118 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=0)
sch.annotate(block_or_loop=b108, ann_key="meta_schedule.cooperative_fetch", ann_val=v118)
l119 = sch.fuse(l90, preserve_unit_iters=True)
sch.annotate(block_or_loop=l119, ann_key="software_pipeline_stage", ann_val=[0, 0, 3])
sch.annotate(block_or_loop=l119, ann_key="software_pipeline_order", ann_val=[0, 1, 2])
sch.annotate(block_or_loop=l119, ann_key="software_pipeline_async_stages", ann_val=[0])
sch.reverse_compute_inline(block=b5)
sch.reverse_compute_inline(block=b4)
v120 = sch.sample_categorical(candidates=[0, 16, 64, 512, 1024], probs=[0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001], decision=4)
sch.annotate(block_or_loop=b6, ann_key="meta_schedule.unroll_explicit", ann_val=v120)
l121, l122, l123, l124, l125, l126 = sch.get_loops(block=b3)
l127 = sch.fuse(l121, l122, l123, l124, preserve_unit_iters=True)
v128 = sch.sample_categorical(candidates=[32, 64, 128, 256, 512, 1024], probs=[0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666], decision=2)
l129, l130 = sch.split(loop=l127, factors=[None, v128], preserve_unit_iters=True)
sch.bind(loop=l129, thread_axis="blockIdx.x")
sch.bind(loop=l130, thread_axis="threadIdx.x")
sch.enter_postproc()
sch.unannotate(block_or_loop=b97, ann_key="meta_schedule.cooperative_fetch")
l131, l132, l133, l134, l135 = sch.get_loops(block=b97)
l136, l137 = sch.split(loop=l135, factors=[None, 32], preserve_unit_iters=True)
sch.bind(loop=l137, thread_axis="threadIdx.x")
sch.unannotate(block_or_loop=b108, ann_key="meta_schedule.cooperative_fetch")
l138, l139, l140, l141, l142 = sch.get_loops(block=b108)
l143, l144 = sch.split(loop=l142, factors=[None, 32], preserve_unit_iters=True)
sch.bind(loop=l144, thread_axis="threadIdx.x")
b145 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b145, ann_key="meta_schedule.unroll_explicit")
b146, b147, b148, b149, b150, b151, b152, b153, b154 = sch.get_child_blocks(b145)
l155, l156, l157, l158, l159, l160 = sch.get_loops(block=b146)
l161, l162, l163, l164, l165, l166 = sch.get_loops(block=b147)
sch.annotate(block_or_loop=l161, ann_key="pragma_auto_unroll_max_step", ann_val=1024)
sch.annotate(block_or_loop=l161, ann_key="pragma_unroll_explicit", ann_val=1)
l167, l168, l169, l170, l171, l172 = sch.get_loops(block=b148)
l173, l174, l175, l176, l177, l178 = sch.get_loops(block=b149)
l179, l180, l181, l182, l183, l184 = sch.get_loops(block=b150)
l185, l186, l187, l188, l189, l190, l191, l192, l193, l194, l195, l196, l197, l198 = sch.get_loops(block=b151)
sch.annotate(block_or_loop=l185, ann_key="pragma_auto_unroll_max_step", ann_val=1024)
sch.annotate(block_or_loop=l185, ann_key="pragma_unroll_explicit", ann_val=1)
l199, l200, l201, l202, l203, l204, l205 = sch.get_loops(block=b152)
l206, l207, l208, l209, l210, l211, l212, l213 = sch.get_loops(block=b153)
sch.annotate(block_or_loop=l206, ann_key="pragma_auto_unroll_max_step", ann_val=1024)
sch.annotate(block_or_loop=l206, ann_key="pragma_unroll_explicit", ann_val=1)
l214, l215, l216, l217 = sch.get_loops(block=b154)
b218 = sch.get_block(name="data_pack", func_name="main")
l219, l220, l221, l222, l223, l224 = sch.get_loops(block=b218)
b225 = sch.decompose_reduction(block=b218, loop=l223)
b226 = sch.get_block(name="bgemm", func_name="main")
l227, l228, l229, l230, l231, l232, l233, l234, l235, l236, l237, l238, l239, l240 = sch.get_loops(block=b226)
b241 = sch.decompose_reduction(block=b226, loop=l230)
b242 = sch.get_block(name="inverse", func_name="main")
l243, l244, l245, l246, l247, l248, l249, l250 = sch.get_loops(block=b242)
b251 = sch.decompose_reduction(block=b242, loop=l249)
2024-04-29 00:33:49 [INFO] [task_scheduler.cc:121] [Task #5: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #712: Error in building:
LocalBuilder: Timeout, killed after 30.0 seconds
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(256), T.int64(56), T.int64(56)), "float32"), p1: T.Buffer((T.int64(6), T.int64(6), T.int64(256), T.int64(256)), "float32"), p2: T.Buffer((T.int64(1), T.int64(256), T.int64(1), T.int64(1)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(256), T.int64(56), T.int64(56)), "float32")):
        T.func_attr({"layout_free_buffers": [1], "tir.noalias": T.bool(True)})
        # with T.block("root"):
        input_tile_local = T.alloc_buffer((T.int64(256), T.int64(196), T.int64(6), T.int64(6)), scope="local")
        data_pack = T.alloc_buffer((T.int64(6), T.int64(6), T.int64(256), T.int64(196)))
        bgemm = T.alloc_buffer((T.int64(6), T.int64(6), T.int64(256), T.int64(196)))
        inverse_local = T.alloc_buffer((T.int64(256), T.int64(196), T.int64(4), T.int64(4)), scope="local")
        data_pack_local = T.alloc_buffer((T.int64(6), T.int64(6), T.int64(256), T.int64(196)), scope="local")
        bgemm_local = T.alloc_buffer((T.int64(6), T.int64(6), T.int64(256), T.int64(196)), scope="local")
        data_pack_shared = T.alloc_buffer((T.int64(6), T.int64(6), T.int64(256), T.int64(196)), scope="shared")
        p1_shared = T.alloc_buffer((T.int64(6), T.int64(6), T.int64(256), T.int64(256)), scope="shared")
        for ci_p_fused_0 in T.thread_binding(T.int64(49), thread="blockIdx.x", annotations={"pragma_auto_unroll_max_step": 512, "pragma_unroll_explicit": 1}):
            for ci_p_fused_1 in T.thread_binding(T.int64(1024), thread="threadIdx.x"):
                for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(1), T.int64(6), T.int64(6)):
                    with T.block("input_tile"):
                        v_ci = T.axis.spatial(T.int64(256), (ci_p_fused_0 * T.int64(1024) + ci_p_fused_1) // T.int64(196) + ax0)
                        v_p = T.axis.spatial(T.int64(196), (ci_p_fused_0 * T.int64(44) + ci_p_fused_1) % T.int64(196) + ax1)
                        v_eps, v_nu = T.axis.remap("SS", [ax2, ax3])
                        T.reads(p0[v_p // T.int64(196), v_ci, v_p % T.int64(196) // T.int64(14) * T.int64(4) + v_eps - T.int64(1), v_p % T.int64(14) * T.int64(4) + v_nu - T.int64(1)])
                        T.writes(input_tile_local[v_ci, v_p, v_eps, v_nu])
                        T.block_attr({"schedule_rule": "None"})
                        input_tile_local[v_ci, v_p, v_eps, v_nu] = T.if_then_else(T.int64(1) <= v_p % T.int64(196) // T.int64(14) * T.int64(4) + v_eps and v_p % T.int64(196) // T.int64(14) * T.int64(4) + v_eps < T.int64(57) and T.int64(1) <= v_p % T.int64(14) * T.int64(4) + v_nu and v_p % T.int64(14) * T.int64(4) + v_nu < T.int64(57), p0[v_p // T.int64(196), v_ci, v_p % T.int64(196) // T.int64(14) * T.int64(4) + v_eps - T.int64(1), v_p % T.int64(14) * T.int64(4) + v_nu - T.int64(1)], T.float32(0))
                for eps in T.unroll(T.int64(6)):
                    for nu in T.unroll(T.int64(6)):
                        with T.block("data_pack_init"):
                            v_eps, v_nu = T.axis.remap("SS", [eps, nu])
                            v_ci = T.axis.spatial(T.int64(256), (ci_p_fused_0 * T.int64(1024) + ci_p_fused_1) // T.int64(196))
                            v_p = T.axis.spatial(T.int64(196), (ci_p_fused_0 * T.int64(1024) + ci_p_fused_1) % T.int64(196))
                            T.reads()
                            T.writes(data_pack_local[v_eps, v_nu, v_ci, v_p])
                            T.block_attr({"schedule_rule": "conv2d_nchw_winograd_data_pack"})
                            data_pack_local[v_eps, v_nu, v_ci, v_p] = T.float32(0)
                        for r_a in T.unroll(T.int64(6)):
                            for r_b in T.unroll(T.int64(6)):
                                with T.block("data_pack_update"):
                                    v_eps, v_nu = T.axis.remap("SS", [eps, nu])
                                    v_ci = T.axis.spatial(T.int64(256), (ci_p_fused_0 * T.int64(1024) + ci_p_fused_1) // T.int64(196))
                                    v_p = T.axis.spatial(T.int64(196), (ci_p_fused_0 * T.int64(1024) + ci_p_fused_1) % T.int64(196))
                                    v_r_a, v_r_b = T.axis.remap("RR", [r_a, r_b])
                                    T.reads(data_pack_local[v_eps, v_nu, v_ci, v_p], input_tile_local[v_ci, v_p, v_r_a, v_r_b])
                                    T.writes(data_pack_local[v_eps, v_nu, v_ci, v_p])
                                    T.block_attr({"schedule_rule": "conv2d_nchw_winograd_data_pack"})
                                    data_pack_local[v_eps, v_nu, v_ci, v_p] = data_pack_local[v_eps, v_nu, v_ci, v_p] + input_tile_local[v_ci, v_p, v_r_a, v_r_b] * T.Select(v_r_a % T.int64(6) == T.int64(5) and v_eps % T.int64(6) == T.int64(5), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(5) and v_eps % T.int64(6) == T.int64(4), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(5) and v_eps % T.int64(6) == T.int64(3), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(5) and v_eps % T.int64(6) == T.int64(2), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(5) and v_eps % T.int64(6) == T.int64(1), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(5) and v_eps % T.int64(6) == T.int64(0), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(4) and v_eps % T.int64(6) == T.int64(5), T.float32(1.5), T.Select(v_r_a % T.int64(6) == T.int64(4) and v_eps % T.int64(6) == T.int64(4), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(4) and v_eps % T.int64(6) == T.int64(3), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(4) and v_eps % T.int64(6) == T.int64(2), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(4) and v_eps % T.int64(6) == T.int64(1), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(4) and v_eps % T.int64(6) == T.int64(0), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(3) and v_eps % T.int64(6) == T.int64(5), T.float32(-2), T.Select(v_r_a % T.int64(6) == T.int64(3) and v_eps % T.int64(6) == T.int64(4), T.float32(-0.5), T.Select(v_r_a % T.int64(6) == T.int64(3) and v_eps % T.int64(6) == T.int64(3), T.float32(2), T.Select(v_r_a % T.int64(6) == T.int64(3) and v_eps % T.int64(6) == T.int64(2), T.float32(2.5), T.Select(v_r_a % T.int64(6) == T.int64(3) and v_eps % T.int64(6) == T.int64(1), T.float32(0.5), T.Select(v_r_a % T.int64(6) == T.int64(3) and v_eps % T.int64(6) == T.int64(0), T.float32(1.5), T.Select(v_r_a % T.int64(6) == T.int64(2) and v_eps % T.int64(6) == T.int64(5), T.float32(-1.5), T.Select(v_r_a % T.int64(6) == T.int64(2) and v_eps % T.int64(6) == T.int64(4), T.float32(-1), T.Select(v_r_a % T.int64(6) == T.int64(2) and v_eps % T.int64(6) == T.int64(3), T.float32(-1), T.Select(v_r_a % T.int64(6) == T.int64(2) and v_eps % T.int64(6) == T.int64(2), T.float32(0.5), T.Select(v_r_a % T.int64(6) == T.int64(2) and v_eps % T.int64(6) == T.int64(1), T.float32(-2.5), T.Select(v_r_a % T.int64(6) == T.int64(2) and v_eps % T.int64(6) == T.int64(0), T.float32(-2), T.Select(v_r_a % T.int64(6) == T.int64(1) and v_eps % T.int64(6) == T.int64(5), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(1) and v_eps % T.int64(6) == T.int64(4), T.float32(0.5), T.Select(v_r_a % T.int64(6) == T.int64(1) and v_eps % T.int64(6) == T.int64(3), T.float32(-2), T.Select(v_r_a % T.int64(6) == T.int64(1) and v_eps % T.int64(6) == T.int64(2), T.float32(-1), T.Select(v_r_a % T.int64(6) == T.int64(1) and v_eps % T.int64(6) == T.int64(1), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(1) and v_eps % T.int64(6) == T.int64(0), T.float32(-1.5), T.Select(v_r_a % T.int64(6) == T.int64(0) and v_eps % T.int64(6) == T.int64(5), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(0) and v_eps % T.int64(6) == T.int64(4), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(0) and v_eps % T.int64(6) == T.int64(3), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(0) and v_eps % T.int64(6) == T.int64(2), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(0) and v_eps % T.int64(6) == T.int64(1), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(0) and v_eps % T.int64(6) == T.int64(0), T.float32(1), T.float32(0))))))))))))))))))))))))))))))))))))) * T.Select(v_r_b % T.int64(6) == T.int64(5) and v_nu % T.int64(6) == T.int64(5), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(5) and v_nu % T.int64(6) == T.int64(4), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(5) and v_nu % T.int64(6) == T.int64(3), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(5) and v_nu % T.int64(6) == T.int64(2), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(5) and v_nu % T.int64(6) == T.int64(1), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(5) and v_nu % T.int64(6) == T.int64(0), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(4) and v_nu % T.int64(6) == T.int64(5), T.float32(1.5), T.Select(v_r_b % T.int64(6) == T.int64(4) and v_nu % T.int64(6) == T.int64(4), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(4) and v_nu % T.int64(6) == T.int64(3), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(4) and v_nu % T.int64(6) == T.int64(2), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(4) and v_nu % T.int64(6) == T.int64(1), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(4) and v_nu % T.int64(6) == T.int64(0), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(3) and v_nu % T.int64(6) == T.int64(5), T.float32(-2), T.Select(v_r_b % T.int64(6) == T.int64(3) and v_nu % T.int64(6) == T.int64(4), T.float32(-0.5), T.Select(v_r_b % T.int64(6) == T.int64(3) and v_nu % T.int64(6) == T.int64(3), T.float32(2), T.Select(v_r_b % T.int64(6) == T.int64(3) and v_nu % T.int64(6) == T.int64(2), T.float32(2.5), T.Select(v_r_b % T.int64(6) == T.int64(3) and v_nu % T.int64(6) == T.int64(1), T.float32(0.5), T.Select(v_r_b % T.int64(6) == T.int64(3) and v_nu % T.int64(6) == T.int64(0), T.float32(1.5), T.Select(v_r_b % T.int64(6) == T.int64(2) and v_nu % T.int64(6) == T.int64(5), T.float32(-1.5), T.Select(v_r_b % T.int64(6) == T.int64(2) and v_nu % T.int64(6) == T.int64(4), T.float32(-1), T.Select(v_r_b % T.int64(6) == T.int64(2) and v_nu % T.int64(6) == T.int64(3), T.float32(-1), T.Select(v_r_b % T.int64(6) == T.int64(2) and v_nu % T.int64(6) == T.int64(2), T.float32(0.5), T.Select(v_r_b % T.int64(6) == T.int64(2) and v_nu % T.int64(6) == T.int64(1), T.float32(-2.5), T.Select(v_r_b % T.int64(6) == T.int64(2) and v_nu % T.int64(6) == T.int64(0), T.float32(-2), T.Select(v_r_b % T.int64(6) == T.int64(1) and v_nu % T.int64(6) == T.int64(5), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(1) and v_nu % T.int64(6) == T.int64(4), T.float32(0.5), T.Select(v_r_b % T.int64(6) == T.int64(1) and v_nu % T.int64(6) == T.int64(3), T.float32(-2), T.Select(v_r_b % T.int64(6) == T.int64(1) and v_nu % T.int64(6) == T.int64(2), T.float32(-1), T.Select(v_r_b % T.int64(6) == T.int64(1) and v_nu % T.int64(6) == T.int64(1), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(1) and v_nu % T.int64(6) == T.int64(0), T.float32(-1.5), T.Select(v_r_b % T.int64(6) == T.int64(0) and v_nu % T.int64(6) == T.int64(5), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(0) and v_nu % T.int64(6) == T.int64(4), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(0) and v_nu % T.int64(6) == T.int64(3), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(0) and v_nu % T.int64(6) == T.int64(2), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(0) and v_nu % T.int64(6) == T.int64(1), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(0) and v_nu % T.int64(6) == T.int64(0), T.float32(1), T.float32(0)))))))))))))))))))))))))))))))))))))
                for ax0, ax1, ax2, ax3 in T.grid(T.int64(6), T.int64(6), T.int64(1), T.int64(1)):
                    with T.block("data_pack_local"):
                        v0, v1 = T.axis.remap("SS", [ax0, ax1])
                        v2 = T.axis.spatial(T.int64(256), (ci_p_fused_0 * T.int64(1024) + ci_p_fused_1) // T.int64(196) + ax2)
                        v3 = T.axis.spatial(T.int64(196), (ci_p_fused_0 * T.int64(44) + ci_p_fused_1) % T.int64(196) + ax3)
                        T.reads(data_pack_local[v0, v1, v2, v3])
                        T.writes(data_pack[v0, v1, v2, v3])
                        data_pack[v0, v1, v2, v3] = data_pack_local[v0, v1, v2, v3]
        for eps_0_nu_0_co_0_p_0_fused in T.thread_binding(T.int64(18), thread="blockIdx.x", annotations={"pragma_auto_unroll_max_step": 512, "pragma_unroll_explicit": 1}):
            for eps_1_nu_1_co_1_p_1_fused in T.thread_binding(T.int64(448), thread="vthread.x"):
                for eps_2_nu_2_co_2_p_2_fused in T.thread_binding(T.int64(32), thread="threadIdx.x"):
                    for eps_3_init, nu_3_init, co_3_init, p_3_init, eps_4_init, nu_4_init, co_4_init, p_4_init in T.grid(T.int64(1), T.int64(1), T.int64(1), T.int64(7), T.int64(1), T.int64(1), T.int64(1), T.int64(1)):
                        with T.block("bgemm_init"):
                            v_eps = T.axis.spatial(T.int64(6), eps_0_nu_0_co_0_p_0_fused // T.int64(6) * T.int64(2) + eps_1_nu_1_co_1_p_1_fused // T.int64(224) + eps_3_init + eps_4_init)
                            v_nu = T.axis.spatial(T.int64(6), eps_0_nu_0_co_0_p_0_fused % T.int64(6) // T.int64(2) * T.int64(2) + eps_2_nu_2_co_2_p_2_fused // T.int64(16) + nu_3_init + nu_4_init)
                            v_co = T.axis.spatial(T.int64(256), eps_0_nu_0_co_0_p_0_fused % T.int64(2) * T.int64(128) + eps_1_nu_1_co_1_p_1_fused % T.int64(224) // T.int64(14) * T.int64(8) + eps_2_nu_2_co_2_p_2_fused % T.int64(16) // T.int64(2) + co_3_init + co_4_init)
                            v_p = T.axis.spatial(T.int64(196), eps_1_nu_1_co_1_p_1_fused % T.int64(14) * T.int64(14) + eps_2_nu_2_co_2_p_2_fused % T.int64(2) * T.int64(7) + p_3_init + p_4_init)
                            T.reads()
                            T.writes(bgemm_local[v_eps, v_nu, v_co, v_p])
                            T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 32, "meta_schedule.tiling_structure": "SSSRRSRS"})
                            bgemm_local[v_eps, v_nu, v_co, v_p] = T.float32(0)
                    for ci_0_fused in T.serial(T.int64(256), annotations={"software_pipeline_async_stages": [0], "software_pipeline_order": [0, 1, 2], "software_pipeline_stage": [0, 0, 3]}):
                        for ax0_ax1_ax2_ax3_fused_0 in range(T.int64(25)):
                            for ax0_ax1_ax2_ax3_fused_1 in T.thread_binding(T.int64(32), thread="threadIdx.x"):
                                with T.block("data_pack_shared"):
                                    v0 = T.axis.spatial(T.int64(6), eps_0_nu_0_co_0_p_0_fused // T.int64(6) * T.int64(2) + (ax0_ax1_ax2_ax3_fused_0 * T.int64(32) + ax0_ax1_ax2_ax3_fused_1) // T.int64(392))
                                    v1 = T.axis.spatial(T.int64(6), eps_0_nu_0_co_0_p_0_fused % T.int64(6) // T.int64(2) * T.int64(2) + (ax0_ax1_ax2_ax3_fused_0 * T.int64(32) + ax0_ax1_ax2_ax3_fused_1) % T.int64(392) // T.int64(196))
                                    v2 = T.axis.spatial(T.int64(256), ci_0_fused)
                                    v3 = T.axis.spatial(T.int64(196), (ax0_ax1_ax2_ax3_fused_0 * T.int64(32) + ax0_ax1_ax2_ax3_fused_1) % T.int64(196))
                                    T.where(ax0_ax1_ax2_ax3_fused_0 * T.int64(32) + ax0_ax1_ax2_ax3_fused_1 < T.int64(784))
                                    T.reads(data_pack[v0, v1, v2, v3])
                                    T.writes(data_pack_shared[v0, v1, v2, v3])
                                    data_pack_shared[v0, v1, v2, v3] = data_pack[v0, v1, v2, v3]
                        for ax0_ax1_ax2_ax3_fused_0 in range(T.int64(8)):
                            for ax0_ax1_ax2_ax3_fused_1 in T.thread_binding(T.int64(32), thread="threadIdx.x"):
                                for ax0_ax1_ax2_ax3_fused_2 in T.vectorized(T.int64(2)):
                                    with T.block("p1_shared"):
                                        v0 = T.axis.spatial(T.int64(6), eps_0_nu_0_co_0_p_0_fused // T.int64(6) * T.int64(2) + (ax0_ax1_ax2_ax3_fused_0 * T.int64(64) + ax0_ax1_ax2_ax3_fused_1 * T.int64(2) + ax0_ax1_ax2_ax3_fused_2) // T.int64(256))
                                        v1 = T.axis.spatial(T.int64(6), eps_0_nu_0_co_0_p_0_fused % T.int64(6) // T.int64(2) * T.int64(2) + (ax0_ax1_ax2_ax3_fused_0 * T.int64(64) + ax0_ax1_ax2_ax3_fused_1 * T.int64(2) + ax0_ax1_ax2_ax3_fused_2) % T.int64(256) // T.int64(128))
                                        v2 = T.axis.spatial(T.int64(256), ci_0_fused)
                                        v3 = T.axis.spatial(T.int64(256), eps_0_nu_0_co_0_p_0_fused % T.int64(2) * T.int64(128) + (ax0_ax1_ax2_ax3_fused_0 * T.int64(64) + ax0_ax1_ax2_ax3_fused_1 * T.int64(2) + ax0_ax1_ax2_ax3_fused_2) % T.int64(128))
                                        T.reads(p1[v0, v1, v2, v3])
                                        T.writes(p1_shared[v0, v1, v2, v3])
                                        p1_shared[v0, v1, v2, v3] = p1[v0, v1, v2, v3]
                        for ci_1, eps_3, nu_3, co_3, p_3, ci_2, eps_4, nu_4, co_4, p_4 in T.grid(T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(7), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1)):
                            with T.block("bgemm_update"):
                                v_eps = T.axis.spatial(T.int64(6), eps_0_nu_0_co_0_p_0_fused // T.int64(6) * T.int64(2) + eps_1_nu_1_co_1_p_1_fused // T.int64(224) + eps_3 + eps_4)
                                v_nu = T.axis.spatial(T.int64(6), eps_0_nu_0_co_0_p_0_fused % T.int64(6) // T.int64(2) * T.int64(2) + eps_2_nu_2_co_2_p_2_fused // T.int64(16) + nu_3 + nu_4)
                                v_co = T.axis.spatial(T.int64(256), eps_0_nu_0_co_0_p_0_fused % T.int64(2) * T.int64(128) + eps_1_nu_1_co_1_p_1_fused % T.int64(224) // T.int64(14) * T.int64(8) + eps_2_nu_2_co_2_p_2_fused % T.int64(16) // T.int64(2) + co_3 + co_4)
                                v_p = T.axis.spatial(T.int64(196), eps_1_nu_1_co_1_p_1_fused % T.int64(14) * T.int64(14) + eps_2_nu_2_co_2_p_2_fused % T.int64(2) * T.int64(7) + p_3 + p_4)
                                v_ci = T.axis.reduce(T.int64(256), ci_0_fused + ci_1 + ci_2)
                                T.reads(bgemm_local[v_eps, v_nu, v_co, v_p], data_pack_shared[v_eps, v_nu, v_ci, v_p], p1_shared[v_eps, v_nu, v_ci, v_co])
                                T.writes(bgemm_local[v_eps, v_nu, v_co, v_p])
                                T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 32, "meta_schedule.tiling_structure": "SSSRRSRS"})
                                bgemm_local[v_eps, v_nu, v_co, v_p] = bgemm_local[v_eps, v_nu, v_co, v_p] + data_pack_shared[v_eps, v_nu, v_ci, v_p] * p1_shared[v_eps, v_nu, v_ci, v_co]
                    for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(1), T.int64(1), T.int64(7)):
                        with T.block("bgemm_local"):
                            v0 = T.axis.spatial(T.int64(6), eps_0_nu_0_co_0_p_0_fused // T.int64(6) * T.int64(2) + eps_1_nu_1_co_1_p_1_fused // T.int64(224) + ax0)
                            v1 = T.axis.spatial(T.int64(6), eps_0_nu_0_co_0_p_0_fused % T.int64(6) // T.int64(2) * T.int64(2) + eps_2_nu_2_co_2_p_2_fused // T.int64(16) + ax1)
                            v2 = T.axis.spatial(T.int64(256), eps_0_nu_0_co_0_p_0_fused % T.int64(2) * T.int64(128) + eps_1_nu_1_co_1_p_1_fused % T.int64(224) // T.int64(14) * T.int64(8) + eps_2_nu_2_co_2_p_2_fused % T.int64(16) // T.int64(2) + ax2)
                            v3 = T.axis.spatial(T.int64(196), eps_1_nu_1_co_1_p_1_fused % T.int64(14) * T.int64(14) + eps_2_nu_2_co_2_p_2_fused % T.int64(2) * T.int64(7) + ax3)
                            T.reads(bgemm_local[v0, v1, v2, v3])
                            T.writes(bgemm[v0, v1, v2, v3])
                            bgemm[v0, v1, v2, v3] = bgemm_local[v0, v1, v2, v3]
        for n_co_h_0_w_0_fused_0 in T.thread_binding(T.int64(392), thread="blockIdx.x", annotations={"pragma_auto_unroll_max_step": 512, "pragma_unroll_explicit": 1}):
            for n_co_h_0_w_0_fused_1 in T.thread_binding(T.int64(128), thread="threadIdx.x"):
                for ax0, ax1 in T.grid(T.int64(1), T.int64(1)):
                    for ax2 in T.unroll(T.int64(4)):
                        for ax3 in T.unroll(T.int64(4)):
                            with T.block("inverse_init"):
                                v_co = T.axis.spatial(T.int64(256), (n_co_h_0_w_0_fused_0 * T.int64(128) + n_co_h_0_w_0_fused_1) // T.int64(196) + ax0)
                                v_p = T.axis.spatial(T.int64(196), (n_co_h_0_w_0_fused_0 * T.int64(128) + n_co_h_0_w_0_fused_1) % T.int64(196) + ax1)
                                v_vh, v_vw = T.axis.remap("SS", [ax2, ax3])
                                T.reads()
                                T.writes(inverse_local[v_co, v_p, v_vh, v_vw])
                                T.block_attr({"schedule_rule": "conv2d_nchw_winograd_inverse"})
                                inverse_local[v_co, v_p, v_vh, v_vw] = T.float32(0)
                            for ax4 in T.unroll(T.int64(6)):
                                for ax5 in T.unroll(T.int64(6)):
                                    with T.block("inverse_update"):
                                        v_co = T.axis.spatial(T.int64(256), (n_co_h_0_w_0_fused_0 * T.int64(128) + n_co_h_0_w_0_fused_1) // T.int64(196) + ax0)
                                        v_p = T.axis.spatial(T.int64(196), (n_co_h_0_w_0_fused_0 * T.int64(128) + n_co_h_0_w_0_fused_1) % T.int64(196) + ax1)
                                        v_vh, v_vw, v_r_a, v_r_b = T.axis.remap("SSRR", [ax2, ax3, ax4, ax5])
                                        T.reads(inverse_local[v_co, v_p, v_vh, v_vw], bgemm[v_r_a, v_r_b, v_co, v_p])
                                        T.writes(inverse_local[v_co, v_p, v_vh, v_vw])
                                        T.block_attr({"schedule_rule": "conv2d_nchw_winograd_inverse"})
                                        inverse_local[v_co, v_p, v_vh, v_vw] = inverse_local[v_co, v_p, v_vh, v_vw] + bgemm[v_r_a, v_r_b, v_co, v_p] * T.Select(v_r_a % T.int64(6) == T.int64(5) and v_vh % T.int64(4) == T.int64(3), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(5) and v_vh % T.int64(4) == T.int64(2), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(5) and v_vh % T.int64(4) == T.int64(1), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(5) and v_vh % T.int64(4) == T.int64(0), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(4) and v_vh % T.int64(4) == T.int64(3), T.float32(-8), T.Select(v_r_a % T.int64(6) == T.int64(4) and v_vh % T.int64(4) == T.int64(2), T.float32(4), T.Select(v_r_a % T.int64(6) == T.int64(4) and v_vh % T.int64(4) == T.int64(1), T.float32(-2), T.Select(v_r_a % T.int64(6) == T.int64(4) and v_vh % T.int64(4) == T.int64(0), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(3) and v_vh % T.int64(4) == T.int64(3), T.float32(0.125), T.Select(v_r_a % T.int64(6) == T.int64(3) and v_vh % T.int64(4) == T.int64(2), T.float32(0.25), T.Select(v_r_a % T.int64(6) == T.int64(3) and v_vh % T.int64(4) == T.int64(1), T.float32(0.5), T.Select(v_r_a % T.int64(6) == T.int64(3) and v_vh % T.int64(4) == T.int64(0), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(2) and v_vh % T.int64(4) == T.int64(3), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(2) and v_vh % T.int64(4) == T.int64(2), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(2) and v_vh % T.int64(4) == T.int64(1), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(2) and v_vh % T.int64(4) == T.int64(0), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(1) and v_vh % T.int64(4) == T.int64(3), T.float32(-1), T.Select(v_r_a % T.int64(6) == T.int64(1) and v_vh % T.int64(4) == T.int64(2), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(1) and v_vh % T.int64(4) == T.int64(1), T.float32(-1), T.Select(v_r_a % T.int64(6) == T.int64(1) and v_vh % T.int64(4) == T.int64(0), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(0) and v_vh % T.int64(4) == T.int64(3), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(0) and v_vh % T.int64(4) == T.int64(2), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(0) and v_vh % T.int64(4) == T.int64(1), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(0) and v_vh % T.int64(4) == T.int64(0), T.float32(1), T.float32(0))))))))))))))))))))))))) * T.Select(v_r_b % T.int64(6) == T.int64(5) and v_vw % T.int64(4) == T.int64(3), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(5) and v_vw % T.int64(4) == T.int64(2), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(5) and v_vw % T.int64(4) == T.int64(1), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(5) and v_vw % T.int64(4) == T.int64(0), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(4) and v_vw % T.int64(4) == T.int64(3), T.float32(-8), T.Select(v_r_b % T.int64(6) == T.int64(4) and v_vw % T.int64(4) == T.int64(2), T.float32(4), T.Select(v_r_b % T.int64(6) == T.int64(4) and v_vw % T.int64(4) == T.int64(1), T.float32(-2), T.Select(v_r_b % T.int64(6) == T.int64(4) and v_vw % T.int64(4) == T.int64(0), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(3) and v_vw % T.int64(4) == T.int64(3), T.float32(0.125), T.Select(v_r_b % T.int64(6) == T.int64(3) and v_vw % T.int64(4) == T.int64(2), T.float32(0.25), T.Select(v_r_b % T.int64(6) == T.int64(3) and v_vw % T.int64(4) == T.int64(1), T.float32(0.5), T.Select(v_r_b % T.int64(6) == T.int64(3) and v_vw % T.int64(4) == T.int64(0), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(2) and v_vw % T.int64(4) == T.int64(3), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(2) and v_vw % T.int64(4) == T.int64(2), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(2) and v_vw % T.int64(4) == T.int64(1), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(2) and v_vw % T.int64(4) == T.int64(0), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(1) and v_vw % T.int64(4) == T.int64(3), T.float32(-1), T.Select(v_r_b % T.int64(6) == T.int64(1) and v_vw % T.int64(4) == T.int64(2), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(1) and v_vw % T.int64(4) == T.int64(1), T.float32(-1), T.Select(v_r_b % T.int64(6) == T.int64(1) and v_vw % T.int64(4) == T.int64(0), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(0) and v_vw % T.int64(4) == T.int64(3), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(0) and v_vw % T.int64(4) == T.int64(2), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(0) and v_vw % T.int64(4) == T.int64(1), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(0) and v_vw % T.int64(4) == T.int64(0), T.float32(1), T.float32(0)))))))))))))))))))))))))
                for h_1, w_1 in T.grid(T.int64(4), T.int64(4)):
                    with T.block("conv2d_winograd"):
                        v_n = T.axis.spatial(T.int64(1), T.int64(0))
                        v_co = T.axis.spatial(T.int64(256), (n_co_h_0_w_0_fused_0 * T.int64(128) + n_co_h_0_w_0_fused_1) // T.int64(196))
                        v_h = T.axis.spatial(T.int64(56), (n_co_h_0_w_0_fused_0 * T.int64(128) + n_co_h_0_w_0_fused_1) % T.int64(196) // T.int64(14) * T.int64(4) + h_1)
                        v_w = T.axis.spatial(T.int64(56), (n_co_h_0_w_0_fused_0 * T.int64(128) + n_co_h_0_w_0_fused_1) % T.int64(14) * T.int64(4) + w_1)
                        T.reads(inverse_local[v_co, v_n * T.int64(196) + v_h // T.int64(4) * T.int64(14) + v_w // T.int64(4), v_h % T.int64(4), v_w % T.int64(4)], p2[v_n, v_co, T.int64(0), T.int64(0)])
                        T.writes(T_relu[v_n, v_co, v_h, v_w])
                        T_relu[v_n, v_co, v_h, v_w] = T.max(inverse_local[v_co, v_n * T.int64(196) + v_h // T.int64(4) * T.int64(14) + v_w // T.int64(4), v_h % T.int64(4), v_w % T.int64(4)] + p2[v_n, v_co, T.int64(0), T.int64(0)], T.float32(0))
b0 = sch.get_block(name="data_pack", func_name="main")
b1 = sch.get_block(name="bgemm", func_name="main")
b2 = sch.get_block(name="inverse", func_name="main")
b3 = sch.get_block(name="conv2d_winograd", func_name="main")
b4 = sch.get_block(name="T_add", func_name="main")
b5 = sch.get_block(name="T_relu", func_name="main")
b6 = sch.get_block(name="root", func_name="main")
b7, b8 = sch.get_producers(block=b2)
sch.compute_inline(block=b8)
b9, = sch.get_consumers(block=b2)
l10, l11, l12, l13 = sch.get_loops(block=b9)
l14, l15 = sch.split(loop=l12, factors=[None, 4], preserve_unit_iters=True)
l16, l17 = sch.split(loop=l13, factors=[None, 4], preserve_unit_iters=True)
sch.reorder(l14, l16, l15, l17)
sch.compute_at(block=b2, loop=l16, preserve_unit_loops=True, index=-1)
sch.set_scope(block=b2, buffer_index=0, storage_scope="local")
l18, l19, l20, l21, l22, l23, l24, l25, l26, l27 = sch.get_loops(block=b2)
sch.unroll(loop=l24)
sch.unroll(loop=l25)
sch.unroll(loop=l26)
sch.unroll(loop=l27)
b28, b29 = sch.get_producers(block=b0)
sch.compute_inline(block=b29)
b30, = sch.get_producers(block=b28)
l31, l32, l33, l34, l35, l36 = sch.get_loops(block=b0)
sch.reorder(l33, l34, l31, l32, l35, l36)
sch.unroll(loop=l31)
sch.unroll(loop=l32)
sch.unroll(loop=l35)
sch.unroll(loop=l36)
l37 = sch.fuse(l33, l34, preserve_unit_iters=True)
v38 = sch.sample_categorical(candidates=[32, 64, 128, 256, 512, 1024], probs=[0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666], decision=5)
l39, l40 = sch.split(loop=l37, factors=[None, v38], preserve_unit_iters=True)
sch.bind(loop=l39, thread_axis="blockIdx.x")
sch.bind(loop=l40, thread_axis="threadIdx.x")
b41 = sch.cache_write(block=b0, write_buffer_index=0, storage_scope="local")
sch.reverse_compute_at(block=b41, loop=l40, preserve_unit_loops=True, index=-1)
sch.compute_at(block=b28, loop=l40, preserve_unit_loops=True, index=-1)
sch.set_scope(block=b28, buffer_index=0, storage_scope="local")
sch.compute_inline(block=b30)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSSRRSRS")
l42, l43, l44, l45, l46 = sch.get_loops(block=b1)
v47, v48, v49, v50, v51 = sch.sample_perfect_tile(loop=l42, n=5, max_innermost_factor=64, decision=[3, 2, 1, 1, 1])
l52, l53, l54, l55, l56 = sch.split(loop=l42, factors=[v47, v48, v49, v50, v51], preserve_unit_iters=True)
v57, v58, v59, v60, v61 = sch.sample_perfect_tile(loop=l43, n=5, max_innermost_factor=64, decision=[3, 1, 2, 1, 1])
l62, l63, l64, l65, l66 = sch.split(loop=l43, factors=[v57, v58, v59, v60, v61], preserve_unit_iters=True)
v67, v68, v69, v70, v71 = sch.sample_perfect_tile(loop=l44, n=5, max_innermost_factor=64, decision=[2, 16, 8, 1, 1])
l72, l73, l74, l75, l76 = sch.split(loop=l44, factors=[v67, v68, v69, v70, v71], preserve_unit_iters=True)
v77, v78, v79, v80, v81 = sch.sample_perfect_tile(loop=l45, n=5, max_innermost_factor=64, decision=[1, 14, 2, 7, 1])
l82, l83, l84, l85, l86 = sch.split(loop=l45, factors=[v77, v78, v79, v80, v81], preserve_unit_iters=True)
v87, v88, v89 = sch.sample_perfect_tile(loop=l46, n=3, max_innermost_factor=64, decision=[256, 1, 1])
l90, l91, l92 = sch.split(loop=l46, factors=[v87, v88, v89], preserve_unit_iters=True)
sch.reorder(l52, l62, l72, l82, l53, l63, l73, l83, l54, l64, l74, l84, l90, l91, l55, l65, l75, l85, l92, l56, l66, l76, l86)
l93 = sch.fuse(l52, l62, l72, l82, preserve_unit_iters=True)
sch.bind(loop=l93, thread_axis="blockIdx.x")
l94 = sch.fuse(l53, l63, l73, l83, preserve_unit_iters=True)
sch.bind(loop=l94, thread_axis="vthread.x")
l95 = sch.fuse(l54, l64, l74, l84, preserve_unit_iters=True)
sch.bind(loop=l95, thread_axis="threadIdx.x")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_low_inclusive", ann_val=32)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_high_inclusive", ann_val=1024)
b96 = sch.cache_write(block=b1, write_buffer_index=0, storage_scope="local")
sch.reverse_compute_at(block=b96, loop=l95, preserve_unit_loops=True, index=-1)
b97 = sch.cache_read(block=b1, read_buffer_index=0, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b97, loop=l90, preserve_unit_loops=True, index=-1)
l98, l99, l100, l101, l102, l103, l104, l105 = sch.get_loops(block=b97)
l106 = sch.fuse(l102, l103, l104, l105, preserve_unit_iters=True)
v107 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=0)
sch.annotate(block_or_loop=b97, ann_key="meta_schedule.cooperative_fetch", ann_val=v107)
b108 = sch.cache_read(block=b1, read_buffer_index=1, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b108, loop=l90, preserve_unit_loops=True, index=-1)
l109, l110, l111, l112, l113, l114, l115, l116 = sch.get_loops(block=b108)
l117 = sch.fuse(l113, l114, l115, l116, preserve_unit_iters=True)
v118 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=1)
sch.annotate(block_or_loop=b108, ann_key="meta_schedule.cooperative_fetch", ann_val=v118)
l119 = sch.fuse(l90, preserve_unit_iters=True)
sch.annotate(block_or_loop=l119, ann_key="software_pipeline_stage", ann_val=[0, 0, 3])
sch.annotate(block_or_loop=l119, ann_key="software_pipeline_order", ann_val=[0, 1, 2])
sch.annotate(block_or_loop=l119, ann_key="software_pipeline_async_stages", ann_val=[0])
sch.reverse_compute_inline(block=b5)
sch.reverse_compute_inline(block=b4)
v120 = sch.sample_categorical(candidates=[0, 16, 64, 512, 1024], probs=[0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001], decision=3)
sch.annotate(block_or_loop=b6, ann_key="meta_schedule.unroll_explicit", ann_val=v120)
l121, l122, l123, l124, l125, l126 = sch.get_loops(block=b3)
l127 = sch.fuse(l121, l122, l123, l124, preserve_unit_iters=True)
v128 = sch.sample_categorical(candidates=[32, 64, 128, 256, 512, 1024], probs=[0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666], decision=2)
l129, l130 = sch.split(loop=l127, factors=[None, v128], preserve_unit_iters=True)
sch.bind(loop=l129, thread_axis="blockIdx.x")
sch.bind(loop=l130, thread_axis="threadIdx.x")
sch.enter_postproc()
sch.unannotate(block_or_loop=b97, ann_key="meta_schedule.cooperative_fetch")
l131, l132, l133, l134, l135 = sch.get_loops(block=b97)
l136, l137 = sch.split(loop=l135, factors=[None, 32], preserve_unit_iters=True)
sch.bind(loop=l137, thread_axis="threadIdx.x")
sch.unannotate(block_or_loop=b108, ann_key="meta_schedule.cooperative_fetch")
l138, l139, l140, l141, l142 = sch.get_loops(block=b108)
l143, l144, l145 = sch.split(loop=l142, factors=[None, 32, 2], preserve_unit_iters=True)
sch.vectorize(loop=l145)
sch.bind(loop=l144, thread_axis="threadIdx.x")
b146 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b146, ann_key="meta_schedule.unroll_explicit")
b147, b148, b149, b150, b151, b152, b153, b154, b155 = sch.get_child_blocks(b146)
l156, l157, l158, l159, l160, l161 = sch.get_loops(block=b147)
l162, l163, l164, l165, l166, l167 = sch.get_loops(block=b148)
sch.annotate(block_or_loop=l162, ann_key="pragma_auto_unroll_max_step", ann_val=512)
sch.annotate(block_or_loop=l162, ann_key="pragma_unroll_explicit", ann_val=1)
l168, l169, l170, l171, l172, l173 = sch.get_loops(block=b149)
l174, l175, l176, l177, l178, l179 = sch.get_loops(block=b150)
l180, l181, l182, l183, l184, l185, l186 = sch.get_loops(block=b151)
l187, l188, l189, l190, l191, l192, l193, l194, l195, l196, l197, l198, l199, l200 = sch.get_loops(block=b152)
sch.annotate(block_or_loop=l187, ann_key="pragma_auto_unroll_max_step", ann_val=512)
sch.annotate(block_or_loop=l187, ann_key="pragma_unroll_explicit", ann_val=1)
l201, l202, l203, l204, l205, l206, l207 = sch.get_loops(block=b153)
l208, l209, l210, l211, l212, l213, l214, l215 = sch.get_loops(block=b154)
sch.annotate(block_or_loop=l208, ann_key="pragma_auto_unroll_max_step", ann_val=512)
sch.annotate(block_or_loop=l208, ann_key="pragma_unroll_explicit", ann_val=1)
l216, l217, l218, l219 = sch.get_loops(block=b155)
b220 = sch.get_block(name="data_pack", func_name="main")
l221, l222, l223, l224, l225, l226 = sch.get_loops(block=b220)
b227 = sch.decompose_reduction(block=b220, loop=l225)
b228 = sch.get_block(name="bgemm", func_name="main")
l229, l230, l231, l232, l233, l234, l235, l236, l237, l238, l239, l240, l241, l242 = sch.get_loops(block=b228)
b243 = sch.decompose_reduction(block=b228, loop=l232)
b244 = sch.get_block(name="inverse", func_name="main")
l245, l246, l247, l248, l249, l250, l251, l252 = sch.get_loops(block=b244)
b253 = sch.decompose_reduction(block=b244, loop=l251)
2024-04-29 00:33:49 [INFO] [task_scheduler.cc:121] [Task #5: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #713: Error in building:
LocalBuilder: Timeout, killed after 30.0 seconds
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(256), T.int64(56), T.int64(56)), "float32"), p1: T.Buffer((T.int64(6), T.int64(6), T.int64(256), T.int64(256)), "float32"), p2: T.Buffer((T.int64(1), T.int64(256), T.int64(1), T.int64(1)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(256), T.int64(56), T.int64(56)), "float32")):
        T.func_attr({"layout_free_buffers": [1], "tir.noalias": T.bool(True)})
        # with T.block("root"):
        input_tile_local = T.alloc_buffer((T.int64(256), T.int64(196), T.int64(6), T.int64(6)), scope="local")
        data_pack = T.alloc_buffer((T.int64(6), T.int64(6), T.int64(256), T.int64(196)))
        bgemm = T.alloc_buffer((T.int64(6), T.int64(6), T.int64(256), T.int64(196)))
        inverse_local = T.alloc_buffer((T.int64(256), T.int64(196), T.int64(4), T.int64(4)), scope="local")
        data_pack_local = T.alloc_buffer((T.int64(6), T.int64(6), T.int64(256), T.int64(196)), scope="local")
        bgemm_local = T.alloc_buffer((T.int64(6), T.int64(6), T.int64(256), T.int64(196)), scope="local")
        data_pack_shared = T.alloc_buffer((T.int64(6), T.int64(6), T.int64(256), T.int64(196)), scope="shared")
        p1_shared = T.alloc_buffer((T.int64(6), T.int64(6), T.int64(256), T.int64(256)), scope="shared")
        for ci_p_fused_0 in T.thread_binding(T.int64(49), thread="blockIdx.x", annotations={"pragma_auto_unroll_max_step": 512, "pragma_unroll_explicit": 1}):
            for ci_p_fused_1 in T.thread_binding(T.int64(1024), thread="threadIdx.x"):
                for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(1), T.int64(6), T.int64(6)):
                    with T.block("input_tile"):
                        v_ci = T.axis.spatial(T.int64(256), (ci_p_fused_0 * T.int64(1024) + ci_p_fused_1) // T.int64(196) + ax0)
                        v_p = T.axis.spatial(T.int64(196), (ci_p_fused_0 * T.int64(44) + ci_p_fused_1) % T.int64(196) + ax1)
                        v_eps, v_nu = T.axis.remap("SS", [ax2, ax3])
                        T.reads(p0[v_p // T.int64(196), v_ci, v_p % T.int64(196) // T.int64(14) * T.int64(4) + v_eps - T.int64(1), v_p % T.int64(14) * T.int64(4) + v_nu - T.int64(1)])
                        T.writes(input_tile_local[v_ci, v_p, v_eps, v_nu])
                        T.block_attr({"schedule_rule": "None"})
                        input_tile_local[v_ci, v_p, v_eps, v_nu] = T.if_then_else(T.int64(1) <= v_p % T.int64(196) // T.int64(14) * T.int64(4) + v_eps and v_p % T.int64(196) // T.int64(14) * T.int64(4) + v_eps < T.int64(57) and T.int64(1) <= v_p % T.int64(14) * T.int64(4) + v_nu and v_p % T.int64(14) * T.int64(4) + v_nu < T.int64(57), p0[v_p // T.int64(196), v_ci, v_p % T.int64(196) // T.int64(14) * T.int64(4) + v_eps - T.int64(1), v_p % T.int64(14) * T.int64(4) + v_nu - T.int64(1)], T.float32(0))
                for eps in T.unroll(T.int64(6)):
                    for nu in T.unroll(T.int64(6)):
                        with T.block("data_pack_init"):
                            v_eps, v_nu = T.axis.remap("SS", [eps, nu])
                            v_ci = T.axis.spatial(T.int64(256), (ci_p_fused_0 * T.int64(1024) + ci_p_fused_1) // T.int64(196))
                            v_p = T.axis.spatial(T.int64(196), (ci_p_fused_0 * T.int64(1024) + ci_p_fused_1) % T.int64(196))
                            T.reads()
                            T.writes(data_pack_local[v_eps, v_nu, v_ci, v_p])
                            T.block_attr({"schedule_rule": "conv2d_nchw_winograd_data_pack"})
                            data_pack_local[v_eps, v_nu, v_ci, v_p] = T.float32(0)
                        for r_a in T.unroll(T.int64(6)):
                            for r_b in T.unroll(T.int64(6)):
                                with T.block("data_pack_update"):
                                    v_eps, v_nu = T.axis.remap("SS", [eps, nu])
                                    v_ci = T.axis.spatial(T.int64(256), (ci_p_fused_0 * T.int64(1024) + ci_p_fused_1) // T.int64(196))
                                    v_p = T.axis.spatial(T.int64(196), (ci_p_fused_0 * T.int64(1024) + ci_p_fused_1) % T.int64(196))
                                    v_r_a, v_r_b = T.axis.remap("RR", [r_a, r_b])
                                    T.reads(data_pack_local[v_eps, v_nu, v_ci, v_p], input_tile_local[v_ci, v_p, v_r_a, v_r_b])
                                    T.writes(data_pack_local[v_eps, v_nu, v_ci, v_p])
                                    T.block_attr({"schedule_rule": "conv2d_nchw_winograd_data_pack"})
                                    data_pack_local[v_eps, v_nu, v_ci, v_p] = data_pack_local[v_eps, v_nu, v_ci, v_p] + input_tile_local[v_ci, v_p, v_r_a, v_r_b] * T.Select(v_r_a % T.int64(6) == T.int64(5) and v_eps % T.int64(6) == T.int64(5), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(5) and v_eps % T.int64(6) == T.int64(4), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(5) and v_eps % T.int64(6) == T.int64(3), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(5) and v_eps % T.int64(6) == T.int64(2), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(5) and v_eps % T.int64(6) == T.int64(1), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(5) and v_eps % T.int64(6) == T.int64(0), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(4) and v_eps % T.int64(6) == T.int64(5), T.float32(1.5), T.Select(v_r_a % T.int64(6) == T.int64(4) and v_eps % T.int64(6) == T.int64(4), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(4) and v_eps % T.int64(6) == T.int64(3), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(4) and v_eps % T.int64(6) == T.int64(2), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(4) and v_eps % T.int64(6) == T.int64(1), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(4) and v_eps % T.int64(6) == T.int64(0), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(3) and v_eps % T.int64(6) == T.int64(5), T.float32(-2), T.Select(v_r_a % T.int64(6) == T.int64(3) and v_eps % T.int64(6) == T.int64(4), T.float32(-0.5), T.Select(v_r_a % T.int64(6) == T.int64(3) and v_eps % T.int64(6) == T.int64(3), T.float32(2), T.Select(v_r_a % T.int64(6) == T.int64(3) and v_eps % T.int64(6) == T.int64(2), T.float32(2.5), T.Select(v_r_a % T.int64(6) == T.int64(3) and v_eps % T.int64(6) == T.int64(1), T.float32(0.5), T.Select(v_r_a % T.int64(6) == T.int64(3) and v_eps % T.int64(6) == T.int64(0), T.float32(1.5), T.Select(v_r_a % T.int64(6) == T.int64(2) and v_eps % T.int64(6) == T.int64(5), T.float32(-1.5), T.Select(v_r_a % T.int64(6) == T.int64(2) and v_eps % T.int64(6) == T.int64(4), T.float32(-1), T.Select(v_r_a % T.int64(6) == T.int64(2) and v_eps % T.int64(6) == T.int64(3), T.float32(-1), T.Select(v_r_a % T.int64(6) == T.int64(2) and v_eps % T.int64(6) == T.int64(2), T.float32(0.5), T.Select(v_r_a % T.int64(6) == T.int64(2) and v_eps % T.int64(6) == T.int64(1), T.float32(-2.5), T.Select(v_r_a % T.int64(6) == T.int64(2) and v_eps % T.int64(6) == T.int64(0), T.float32(-2), T.Select(v_r_a % T.int64(6) == T.int64(1) and v_eps % T.int64(6) == T.int64(5), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(1) and v_eps % T.int64(6) == T.int64(4), T.float32(0.5), T.Select(v_r_a % T.int64(6) == T.int64(1) and v_eps % T.int64(6) == T.int64(3), T.float32(-2), T.Select(v_r_a % T.int64(6) == T.int64(1) and v_eps % T.int64(6) == T.int64(2), T.float32(-1), T.Select(v_r_a % T.int64(6) == T.int64(1) and v_eps % T.int64(6) == T.int64(1), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(1) and v_eps % T.int64(6) == T.int64(0), T.float32(-1.5), T.Select(v_r_a % T.int64(6) == T.int64(0) and v_eps % T.int64(6) == T.int64(5), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(0) and v_eps % T.int64(6) == T.int64(4), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(0) and v_eps % T.int64(6) == T.int64(3), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(0) and v_eps % T.int64(6) == T.int64(2), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(0) and v_eps % T.int64(6) == T.int64(1), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(0) and v_eps % T.int64(6) == T.int64(0), T.float32(1), T.float32(0))))))))))))))))))))))))))))))))))))) * T.Select(v_r_b % T.int64(6) == T.int64(5) and v_nu % T.int64(6) == T.int64(5), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(5) and v_nu % T.int64(6) == T.int64(4), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(5) and v_nu % T.int64(6) == T.int64(3), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(5) and v_nu % T.int64(6) == T.int64(2), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(5) and v_nu % T.int64(6) == T.int64(1), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(5) and v_nu % T.int64(6) == T.int64(0), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(4) and v_nu % T.int64(6) == T.int64(5), T.float32(1.5), T.Select(v_r_b % T.int64(6) == T.int64(4) and v_nu % T.int64(6) == T.int64(4), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(4) and v_nu % T.int64(6) == T.int64(3), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(4) and v_nu % T.int64(6) == T.int64(2), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(4) and v_nu % T.int64(6) == T.int64(1), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(4) and v_nu % T.int64(6) == T.int64(0), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(3) and v_nu % T.int64(6) == T.int64(5), T.float32(-2), T.Select(v_r_b % T.int64(6) == T.int64(3) and v_nu % T.int64(6) == T.int64(4), T.float32(-0.5), T.Select(v_r_b % T.int64(6) == T.int64(3) and v_nu % T.int64(6) == T.int64(3), T.float32(2), T.Select(v_r_b % T.int64(6) == T.int64(3) and v_nu % T.int64(6) == T.int64(2), T.float32(2.5), T.Select(v_r_b % T.int64(6) == T.int64(3) and v_nu % T.int64(6) == T.int64(1), T.float32(0.5), T.Select(v_r_b % T.int64(6) == T.int64(3) and v_nu % T.int64(6) == T.int64(0), T.float32(1.5), T.Select(v_r_b % T.int64(6) == T.int64(2) and v_nu % T.int64(6) == T.int64(5), T.float32(-1.5), T.Select(v_r_b % T.int64(6) == T.int64(2) and v_nu % T.int64(6) == T.int64(4), T.float32(-1), T.Select(v_r_b % T.int64(6) == T.int64(2) and v_nu % T.int64(6) == T.int64(3), T.float32(-1), T.Select(v_r_b % T.int64(6) == T.int64(2) and v_nu % T.int64(6) == T.int64(2), T.float32(0.5), T.Select(v_r_b % T.int64(6) == T.int64(2) and v_nu % T.int64(6) == T.int64(1), T.float32(-2.5), T.Select(v_r_b % T.int64(6) == T.int64(2) and v_nu % T.int64(6) == T.int64(0), T.float32(-2), T.Select(v_r_b % T.int64(6) == T.int64(1) and v_nu % T.int64(6) == T.int64(5), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(1) and v_nu % T.int64(6) == T.int64(4), T.float32(0.5), T.Select(v_r_b % T.int64(6) == T.int64(1) and v_nu % T.int64(6) == T.int64(3), T.float32(-2), T.Select(v_r_b % T.int64(6) == T.int64(1) and v_nu % T.int64(6) == T.int64(2), T.float32(-1), T.Select(v_r_b % T.int64(6) == T.int64(1) and v_nu % T.int64(6) == T.int64(1), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(1) and v_nu % T.int64(6) == T.int64(0), T.float32(-1.5), T.Select(v_r_b % T.int64(6) == T.int64(0) and v_nu % T.int64(6) == T.int64(5), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(0) and v_nu % T.int64(6) == T.int64(4), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(0) and v_nu % T.int64(6) == T.int64(3), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(0) and v_nu % T.int64(6) == T.int64(2), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(0) and v_nu % T.int64(6) == T.int64(1), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(0) and v_nu % T.int64(6) == T.int64(0), T.float32(1), T.float32(0)))))))))))))))))))))))))))))))))))))
                for ax0, ax1, ax2, ax3 in T.grid(T.int64(6), T.int64(6), T.int64(1), T.int64(1)):
                    with T.block("data_pack_local"):
                        v0, v1 = T.axis.remap("SS", [ax0, ax1])
                        v2 = T.axis.spatial(T.int64(256), (ci_p_fused_0 * T.int64(1024) + ci_p_fused_1) // T.int64(196) + ax2)
                        v3 = T.axis.spatial(T.int64(196), (ci_p_fused_0 * T.int64(44) + ci_p_fused_1) % T.int64(196) + ax3)
                        T.reads(data_pack_local[v0, v1, v2, v3])
                        T.writes(data_pack[v0, v1, v2, v3])
                        data_pack[v0, v1, v2, v3] = data_pack_local[v0, v1, v2, v3]
        for eps_0_nu_0_co_0_p_0_fused in T.thread_binding(T.int64(18), thread="blockIdx.x", annotations={"pragma_auto_unroll_max_step": 512, "pragma_unroll_explicit": 1}):
            for eps_1_nu_1_co_1_p_1_fused in T.thread_binding(T.int64(224), thread="vthread.x"):
                for eps_2_nu_2_co_2_p_2_fused in T.thread_binding(T.int64(32), thread="threadIdx.x"):
                    for eps_3_init, nu_3_init, co_3_init, p_3_init, eps_4_init, nu_4_init, co_4_init, p_4_init in T.grid(T.int64(1), T.int64(1), T.int64(1), T.int64(7), T.int64(1), T.int64(1), T.int64(2), T.int64(1)):
                        with T.block("bgemm_init"):
                            v_eps = T.axis.spatial(T.int64(6), eps_0_nu_0_co_0_p_0_fused // T.int64(6) * T.int64(2) + eps_1_nu_1_co_1_p_1_fused // T.int64(112) + eps_3_init + eps_4_init)
                            v_nu = T.axis.spatial(T.int64(6), eps_0_nu_0_co_0_p_0_fused % T.int64(6) // T.int64(2) * T.int64(2) + eps_2_nu_2_co_2_p_2_fused // T.int64(16) + nu_3_init + nu_4_init)
                            v_co = T.axis.spatial(T.int64(256), eps_0_nu_0_co_0_p_0_fused % T.int64(2) * T.int64(128) + eps_1_nu_1_co_1_p_1_fused % T.int64(112) // T.int64(14) * T.int64(16) + eps_2_nu_2_co_2_p_2_fused % T.int64(16) // T.int64(2) * T.int64(2) + co_3_init * T.int64(2) + co_4_init)
                            v_p = T.axis.spatial(T.int64(196), eps_1_nu_1_co_1_p_1_fused % T.int64(14) * T.int64(14) + eps_2_nu_2_co_2_p_2_fused % T.int64(2) * T.int64(7) + p_3_init + p_4_init)
                            T.reads()
                            T.writes(bgemm_local[v_eps, v_nu, v_co, v_p])
                            T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 32, "meta_schedule.tiling_structure": "SSSRRSRS"})
                            bgemm_local[v_eps, v_nu, v_co, v_p] = T.float32(0)
                    for ci_0_fused in T.serial(T.int64(256), annotations={"software_pipeline_async_stages": [0], "software_pipeline_order": [0, 1, 2], "software_pipeline_stage": [0, 0, 3]}):
                        for ax0_ax1_ax2_ax3_fused_0 in range(T.int64(25)):
                            for ax0_ax1_ax2_ax3_fused_1 in T.thread_binding(T.int64(32), thread="threadIdx.x"):
                                with T.block("data_pack_shared"):
                                    v0 = T.axis.spatial(T.int64(6), eps_0_nu_0_co_0_p_0_fused // T.int64(6) * T.int64(2) + (ax0_ax1_ax2_ax3_fused_0 * T.int64(32) + ax0_ax1_ax2_ax3_fused_1) // T.int64(392))
                                    v1 = T.axis.spatial(T.int64(6), eps_0_nu_0_co_0_p_0_fused % T.int64(6) // T.int64(2) * T.int64(2) + (ax0_ax1_ax2_ax3_fused_0 * T.int64(32) + ax0_ax1_ax2_ax3_fused_1) % T.int64(392) // T.int64(196))
                                    v2 = T.axis.spatial(T.int64(256), ci_0_fused)
                                    v3 = T.axis.spatial(T.int64(196), (ax0_ax1_ax2_ax3_fused_0 * T.int64(32) + ax0_ax1_ax2_ax3_fused_1) % T.int64(196))
                                    T.where(ax0_ax1_ax2_ax3_fused_0 * T.int64(32) + ax0_ax1_ax2_ax3_fused_1 < T.int64(784))
                                    T.reads(data_pack[v0, v1, v2, v3])
                                    T.writes(data_pack_shared[v0, v1, v2, v3])
                                    data_pack_shared[v0, v1, v2, v3] = data_pack[v0, v1, v2, v3]
                        for ax0_ax1_ax2_ax3_fused_0 in range(T.int64(8)):
                            for ax0_ax1_ax2_ax3_fused_1 in T.thread_binding(T.int64(32), thread="threadIdx.x"):
                                for ax0_ax1_ax2_ax3_fused_2 in T.vectorized(T.int64(2)):
                                    with T.block("p1_shared"):
                                        v0 = T.axis.spatial(T.int64(6), eps_0_nu_0_co_0_p_0_fused // T.int64(6) * T.int64(2) + (ax0_ax1_ax2_ax3_fused_0 * T.int64(64) + ax0_ax1_ax2_ax3_fused_1 * T.int64(2) + ax0_ax1_ax2_ax3_fused_2) // T.int64(256))
                                        v1 = T.axis.spatial(T.int64(6), eps_0_nu_0_co_0_p_0_fused % T.int64(6) // T.int64(2) * T.int64(2) + (ax0_ax1_ax2_ax3_fused_0 * T.int64(64) + ax0_ax1_ax2_ax3_fused_1 * T.int64(2) + ax0_ax1_ax2_ax3_fused_2) % T.int64(256) // T.int64(128))
                                        v2 = T.axis.spatial(T.int64(256), ci_0_fused)
                                        v3 = T.axis.spatial(T.int64(256), eps_0_nu_0_co_0_p_0_fused % T.int64(2) * T.int64(128) + (ax0_ax1_ax2_ax3_fused_0 * T.int64(64) + ax0_ax1_ax2_ax3_fused_1 * T.int64(2) + ax0_ax1_ax2_ax3_fused_2) % T.int64(128))
                                        T.reads(p1[v0, v1, v2, v3])
                                        T.writes(p1_shared[v0, v1, v2, v3])
                                        p1_shared[v0, v1, v2, v3] = p1[v0, v1, v2, v3]
                        for ci_1, eps_3, nu_3, co_3, p_3, ci_2, eps_4, nu_4, co_4, p_4 in T.grid(T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(7), T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(1)):
                            with T.block("bgemm_update"):
                                v_eps = T.axis.spatial(T.int64(6), eps_0_nu_0_co_0_p_0_fused // T.int64(6) * T.int64(2) + eps_1_nu_1_co_1_p_1_fused // T.int64(112) + eps_3 + eps_4)
                                v_nu = T.axis.spatial(T.int64(6), eps_0_nu_0_co_0_p_0_fused % T.int64(6) // T.int64(2) * T.int64(2) + eps_2_nu_2_co_2_p_2_fused // T.int64(16) + nu_3 + nu_4)
                                v_co = T.axis.spatial(T.int64(256), eps_0_nu_0_co_0_p_0_fused % T.int64(2) * T.int64(128) + eps_1_nu_1_co_1_p_1_fused % T.int64(112) // T.int64(14) * T.int64(16) + eps_2_nu_2_co_2_p_2_fused % T.int64(16) // T.int64(2) * T.int64(2) + co_3 * T.int64(2) + co_4)
                                v_p = T.axis.spatial(T.int64(196), eps_1_nu_1_co_1_p_1_fused % T.int64(14) * T.int64(14) + eps_2_nu_2_co_2_p_2_fused % T.int64(2) * T.int64(7) + p_3 + p_4)
                                v_ci = T.axis.reduce(T.int64(256), ci_0_fused + ci_1 + ci_2)
                                T.reads(bgemm_local[v_eps, v_nu, v_co, v_p], data_pack_shared[v_eps, v_nu, v_ci, v_p], p1_shared[v_eps, v_nu, v_ci, v_co])
                                T.writes(bgemm_local[v_eps, v_nu, v_co, v_p])
                                T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 32, "meta_schedule.tiling_structure": "SSSRRSRS"})
                                bgemm_local[v_eps, v_nu, v_co, v_p] = bgemm_local[v_eps, v_nu, v_co, v_p] + data_pack_shared[v_eps, v_nu, v_ci, v_p] * p1_shared[v_eps, v_nu, v_ci, v_co]
                    for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(1), T.int64(2), T.int64(7)):
                        with T.block("bgemm_local"):
                            v0 = T.axis.spatial(T.int64(6), eps_0_nu_0_co_0_p_0_fused // T.int64(6) * T.int64(2) + eps_1_nu_1_co_1_p_1_fused // T.int64(112) + ax0)
                            v1 = T.axis.spatial(T.int64(6), eps_0_nu_0_co_0_p_0_fused % T.int64(6) // T.int64(2) * T.int64(2) + eps_2_nu_2_co_2_p_2_fused // T.int64(16) + ax1)
                            v2 = T.axis.spatial(T.int64(256), eps_0_nu_0_co_0_p_0_fused % T.int64(2) * T.int64(128) + eps_1_nu_1_co_1_p_1_fused % T.int64(112) // T.int64(14) * T.int64(16) + eps_2_nu_2_co_2_p_2_fused % T.int64(16) // T.int64(2) * T.int64(2) + ax2)
                            v3 = T.axis.spatial(T.int64(196), eps_1_nu_1_co_1_p_1_fused % T.int64(14) * T.int64(14) + eps_2_nu_2_co_2_p_2_fused % T.int64(2) * T.int64(7) + ax3)
                            T.reads(bgemm_local[v0, v1, v2, v3])
                            T.writes(bgemm[v0, v1, v2, v3])
                            bgemm[v0, v1, v2, v3] = bgemm_local[v0, v1, v2, v3]
        for n_co_h_0_w_0_fused_0 in T.thread_binding(T.int64(392), thread="blockIdx.x", annotations={"pragma_auto_unroll_max_step": 512, "pragma_unroll_explicit": 1}):
            for n_co_h_0_w_0_fused_1 in T.thread_binding(T.int64(128), thread="threadIdx.x"):
                for ax0, ax1 in T.grid(T.int64(1), T.int64(1)):
                    for ax2 in T.unroll(T.int64(4)):
                        for ax3 in T.unroll(T.int64(4)):
                            with T.block("inverse_init"):
                                v_co = T.axis.spatial(T.int64(256), (n_co_h_0_w_0_fused_0 * T.int64(128) + n_co_h_0_w_0_fused_1) // T.int64(196) + ax0)
                                v_p = T.axis.spatial(T.int64(196), (n_co_h_0_w_0_fused_0 * T.int64(128) + n_co_h_0_w_0_fused_1) % T.int64(196) + ax1)
                                v_vh, v_vw = T.axis.remap("SS", [ax2, ax3])
                                T.reads()
                                T.writes(inverse_local[v_co, v_p, v_vh, v_vw])
                                T.block_attr({"schedule_rule": "conv2d_nchw_winograd_inverse"})
                                inverse_local[v_co, v_p, v_vh, v_vw] = T.float32(0)
                            for ax4 in T.unroll(T.int64(6)):
                                for ax5 in T.unroll(T.int64(6)):
                                    with T.block("inverse_update"):
                                        v_co = T.axis.spatial(T.int64(256), (n_co_h_0_w_0_fused_0 * T.int64(128) + n_co_h_0_w_0_fused_1) // T.int64(196) + ax0)
                                        v_p = T.axis.spatial(T.int64(196), (n_co_h_0_w_0_fused_0 * T.int64(128) + n_co_h_0_w_0_fused_1) % T.int64(196) + ax1)
                                        v_vh, v_vw, v_r_a, v_r_b = T.axis.remap("SSRR", [ax2, ax3, ax4, ax5])
                                        T.reads(inverse_local[v_co, v_p, v_vh, v_vw], bgemm[v_r_a, v_r_b, v_co, v_p])
                                        T.writes(inverse_local[v_co, v_p, v_vh, v_vw])
                                        T.block_attr({"schedule_rule": "conv2d_nchw_winograd_inverse"})
                                        inverse_local[v_co, v_p, v_vh, v_vw] = inverse_local[v_co, v_p, v_vh, v_vw] + bgemm[v_r_a, v_r_b, v_co, v_p] * T.Select(v_r_a % T.int64(6) == T.int64(5) and v_vh % T.int64(4) == T.int64(3), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(5) and v_vh % T.int64(4) == T.int64(2), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(5) and v_vh % T.int64(4) == T.int64(1), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(5) and v_vh % T.int64(4) == T.int64(0), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(4) and v_vh % T.int64(4) == T.int64(3), T.float32(-8), T.Select(v_r_a % T.int64(6) == T.int64(4) and v_vh % T.int64(4) == T.int64(2), T.float32(4), T.Select(v_r_a % T.int64(6) == T.int64(4) and v_vh % T.int64(4) == T.int64(1), T.float32(-2), T.Select(v_r_a % T.int64(6) == T.int64(4) and v_vh % T.int64(4) == T.int64(0), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(3) and v_vh % T.int64(4) == T.int64(3), T.float32(0.125), T.Select(v_r_a % T.int64(6) == T.int64(3) and v_vh % T.int64(4) == T.int64(2), T.float32(0.25), T.Select(v_r_a % T.int64(6) == T.int64(3) and v_vh % T.int64(4) == T.int64(1), T.float32(0.5), T.Select(v_r_a % T.int64(6) == T.int64(3) and v_vh % T.int64(4) == T.int64(0), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(2) and v_vh % T.int64(4) == T.int64(3), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(2) and v_vh % T.int64(4) == T.int64(2), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(2) and v_vh % T.int64(4) == T.int64(1), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(2) and v_vh % T.int64(4) == T.int64(0), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(1) and v_vh % T.int64(4) == T.int64(3), T.float32(-1), T.Select(v_r_a % T.int64(6) == T.int64(1) and v_vh % T.int64(4) == T.int64(2), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(1) and v_vh % T.int64(4) == T.int64(1), T.float32(-1), T.Select(v_r_a % T.int64(6) == T.int64(1) and v_vh % T.int64(4) == T.int64(0), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(0) and v_vh % T.int64(4) == T.int64(3), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(0) and v_vh % T.int64(4) == T.int64(2), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(0) and v_vh % T.int64(4) == T.int64(1), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(0) and v_vh % T.int64(4) == T.int64(0), T.float32(1), T.float32(0))))))))))))))))))))))))) * T.Select(v_r_b % T.int64(6) == T.int64(5) and v_vw % T.int64(4) == T.int64(3), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(5) and v_vw % T.int64(4) == T.int64(2), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(5) and v_vw % T.int64(4) == T.int64(1), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(5) and v_vw % T.int64(4) == T.int64(0), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(4) and v_vw % T.int64(4) == T.int64(3), T.float32(-8), T.Select(v_r_b % T.int64(6) == T.int64(4) and v_vw % T.int64(4) == T.int64(2), T.float32(4), T.Select(v_r_b % T.int64(6) == T.int64(4) and v_vw % T.int64(4) == T.int64(1), T.float32(-2), T.Select(v_r_b % T.int64(6) == T.int64(4) and v_vw % T.int64(4) == T.int64(0), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(3) and v_vw % T.int64(4) == T.int64(3), T.float32(0.125), T.Select(v_r_b % T.int64(6) == T.int64(3) and v_vw % T.int64(4) == T.int64(2), T.float32(0.25), T.Select(v_r_b % T.int64(6) == T.int64(3) and v_vw % T.int64(4) == T.int64(1), T.float32(0.5), T.Select(v_r_b % T.int64(6) == T.int64(3) and v_vw % T.int64(4) == T.int64(0), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(2) and v_vw % T.int64(4) == T.int64(3), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(2) and v_vw % T.int64(4) == T.int64(2), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(2) and v_vw % T.int64(4) == T.int64(1), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(2) and v_vw % T.int64(4) == T.int64(0), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(1) and v_vw % T.int64(4) == T.int64(3), T.float32(-1), T.Select(v_r_b % T.int64(6) == T.int64(1) and v_vw % T.int64(4) == T.int64(2), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(1) and v_vw % T.int64(4) == T.int64(1), T.float32(-1), T.Select(v_r_b % T.int64(6) == T.int64(1) and v_vw % T.int64(4) == T.int64(0), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(0) and v_vw % T.int64(4) == T.int64(3), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(0) and v_vw % T.int64(4) == T.int64(2), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(0) and v_vw % T.int64(4) == T.int64(1), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(0) and v_vw % T.int64(4) == T.int64(0), T.float32(1), T.float32(0)))))))))))))))))))))))))
                for h_1, w_1 in T.grid(T.int64(4), T.int64(4)):
                    with T.block("conv2d_winograd"):
                        v_n = T.axis.spatial(T.int64(1), T.int64(0))
                        v_co = T.axis.spatial(T.int64(256), (n_co_h_0_w_0_fused_0 * T.int64(128) + n_co_h_0_w_0_fused_1) // T.int64(196))
                        v_h = T.axis.spatial(T.int64(56), (n_co_h_0_w_0_fused_0 * T.int64(128) + n_co_h_0_w_0_fused_1) % T.int64(196) // T.int64(14) * T.int64(4) + h_1)
                        v_w = T.axis.spatial(T.int64(56), (n_co_h_0_w_0_fused_0 * T.int64(128) + n_co_h_0_w_0_fused_1) % T.int64(14) * T.int64(4) + w_1)
                        T.reads(inverse_local[v_co, v_n * T.int64(196) + v_h // T.int64(4) * T.int64(14) + v_w // T.int64(4), v_h % T.int64(4), v_w % T.int64(4)], p2[v_n, v_co, T.int64(0), T.int64(0)])
                        T.writes(T_relu[v_n, v_co, v_h, v_w])
                        T_relu[v_n, v_co, v_h, v_w] = T.max(inverse_local[v_co, v_n * T.int64(196) + v_h // T.int64(4) * T.int64(14) + v_w // T.int64(4), v_h % T.int64(4), v_w % T.int64(4)] + p2[v_n, v_co, T.int64(0), T.int64(0)], T.float32(0))
b0 = sch.get_block(name="data_pack", func_name="main")
b1 = sch.get_block(name="bgemm", func_name="main")
b2 = sch.get_block(name="inverse", func_name="main")
b3 = sch.get_block(name="conv2d_winograd", func_name="main")
b4 = sch.get_block(name="T_add", func_name="main")
b5 = sch.get_block(name="T_relu", func_name="main")
b6 = sch.get_block(name="root", func_name="main")
b7, b8 = sch.get_producers(block=b2)
sch.compute_inline(block=b8)
b9, = sch.get_consumers(block=b2)
l10, l11, l12, l13 = sch.get_loops(block=b9)
l14, l15 = sch.split(loop=l12, factors=[None, 4], preserve_unit_iters=True)
l16, l17 = sch.split(loop=l13, factors=[None, 4], preserve_unit_iters=True)
sch.reorder(l14, l16, l15, l17)
sch.compute_at(block=b2, loop=l16, preserve_unit_loops=True, index=-1)
sch.set_scope(block=b2, buffer_index=0, storage_scope="local")
l18, l19, l20, l21, l22, l23, l24, l25, l26, l27 = sch.get_loops(block=b2)
sch.unroll(loop=l24)
sch.unroll(loop=l25)
sch.unroll(loop=l26)
sch.unroll(loop=l27)
b28, b29 = sch.get_producers(block=b0)
sch.compute_inline(block=b29)
b30, = sch.get_producers(block=b28)
l31, l32, l33, l34, l35, l36 = sch.get_loops(block=b0)
sch.reorder(l33, l34, l31, l32, l35, l36)
sch.unroll(loop=l31)
sch.unroll(loop=l32)
sch.unroll(loop=l35)
sch.unroll(loop=l36)
l37 = sch.fuse(l33, l34, preserve_unit_iters=True)
v38 = sch.sample_categorical(candidates=[32, 64, 128, 256, 512, 1024], probs=[0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666], decision=5)
l39, l40 = sch.split(loop=l37, factors=[None, v38], preserve_unit_iters=True)
sch.bind(loop=l39, thread_axis="blockIdx.x")
sch.bind(loop=l40, thread_axis="threadIdx.x")
b41 = sch.cache_write(block=b0, write_buffer_index=0, storage_scope="local")
sch.reverse_compute_at(block=b41, loop=l40, preserve_unit_loops=True, index=-1)
sch.compute_at(block=b28, loop=l40, preserve_unit_loops=True, index=-1)
sch.set_scope(block=b28, buffer_index=0, storage_scope="local")
sch.compute_inline(block=b30)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSSRRSRS")
l42, l43, l44, l45, l46 = sch.get_loops(block=b1)
v47, v48, v49, v50, v51 = sch.sample_perfect_tile(loop=l42, n=5, max_innermost_factor=64, decision=[3, 2, 1, 1, 1])
l52, l53, l54, l55, l56 = sch.split(loop=l42, factors=[v47, v48, v49, v50, v51], preserve_unit_iters=True)
v57, v58, v59, v60, v61 = sch.sample_perfect_tile(loop=l43, n=5, max_innermost_factor=64, decision=[3, 1, 2, 1, 1])
l62, l63, l64, l65, l66 = sch.split(loop=l43, factors=[v57, v58, v59, v60, v61], preserve_unit_iters=True)
v67, v68, v69, v70, v71 = sch.sample_perfect_tile(loop=l44, n=5, max_innermost_factor=64, decision=[2, 8, 8, 1, 2])
l72, l73, l74, l75, l76 = sch.split(loop=l44, factors=[v67, v68, v69, v70, v71], preserve_unit_iters=True)
v77, v78, v79, v80, v81 = sch.sample_perfect_tile(loop=l45, n=5, max_innermost_factor=64, decision=[1, 14, 2, 7, 1])
l82, l83, l84, l85, l86 = sch.split(loop=l45, factors=[v77, v78, v79, v80, v81], preserve_unit_iters=True)
v87, v88, v89 = sch.sample_perfect_tile(loop=l46, n=3, max_innermost_factor=64, decision=[256, 1, 1])
l90, l91, l92 = sch.split(loop=l46, factors=[v87, v88, v89], preserve_unit_iters=True)
sch.reorder(l52, l62, l72, l82, l53, l63, l73, l83, l54, l64, l74, l84, l90, l91, l55, l65, l75, l85, l92, l56, l66, l76, l86)
l93 = sch.fuse(l52, l62, l72, l82, preserve_unit_iters=True)
sch.bind(loop=l93, thread_axis="blockIdx.x")
l94 = sch.fuse(l53, l63, l73, l83, preserve_unit_iters=True)
sch.bind(loop=l94, thread_axis="vthread.x")
l95 = sch.fuse(l54, l64, l74, l84, preserve_unit_iters=True)
sch.bind(loop=l95, thread_axis="threadIdx.x")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_low_inclusive", ann_val=32)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_high_inclusive", ann_val=1024)
b96 = sch.cache_write(block=b1, write_buffer_index=0, storage_scope="local")
sch.reverse_compute_at(block=b96, loop=l95, preserve_unit_loops=True, index=-1)
b97 = sch.cache_read(block=b1, read_buffer_index=0, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b97, loop=l90, preserve_unit_loops=True, index=-1)
l98, l99, l100, l101, l102, l103, l104, l105 = sch.get_loops(block=b97)
l106 = sch.fuse(l102, l103, l104, l105, preserve_unit_iters=True)
v107 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=0)
sch.annotate(block_or_loop=b97, ann_key="meta_schedule.cooperative_fetch", ann_val=v107)
b108 = sch.cache_read(block=b1, read_buffer_index=1, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b108, loop=l90, preserve_unit_loops=True, index=-1)
l109, l110, l111, l112, l113, l114, l115, l116 = sch.get_loops(block=b108)
l117 = sch.fuse(l113, l114, l115, l116, preserve_unit_iters=True)
v118 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=1)
sch.annotate(block_or_loop=b108, ann_key="meta_schedule.cooperative_fetch", ann_val=v118)
l119 = sch.fuse(l90, preserve_unit_iters=True)
sch.annotate(block_or_loop=l119, ann_key="software_pipeline_stage", ann_val=[0, 0, 3])
sch.annotate(block_or_loop=l119, ann_key="software_pipeline_order", ann_val=[0, 1, 2])
sch.annotate(block_or_loop=l119, ann_key="software_pipeline_async_stages", ann_val=[0])
sch.reverse_compute_inline(block=b5)
sch.reverse_compute_inline(block=b4)
v120 = sch.sample_categorical(candidates=[0, 16, 64, 512, 1024], probs=[0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001], decision=3)
sch.annotate(block_or_loop=b6, ann_key="meta_schedule.unroll_explicit", ann_val=v120)
l121, l122, l123, l124, l125, l126 = sch.get_loops(block=b3)
l127 = sch.fuse(l121, l122, l123, l124, preserve_unit_iters=True)
v128 = sch.sample_categorical(candidates=[32, 64, 128, 256, 512, 1024], probs=[0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666], decision=2)
l129, l130 = sch.split(loop=l127, factors=[None, v128], preserve_unit_iters=True)
sch.bind(loop=l129, thread_axis="blockIdx.x")
sch.bind(loop=l130, thread_axis="threadIdx.x")
sch.enter_postproc()
sch.unannotate(block_or_loop=b97, ann_key="meta_schedule.cooperative_fetch")
l131, l132, l133, l134, l135 = sch.get_loops(block=b97)
l136, l137 = sch.split(loop=l135, factors=[None, 32], preserve_unit_iters=True)
sch.bind(loop=l137, thread_axis="threadIdx.x")
sch.unannotate(block_or_loop=b108, ann_key="meta_schedule.cooperative_fetch")
l138, l139, l140, l141, l142 = sch.get_loops(block=b108)
l143, l144, l145 = sch.split(loop=l142, factors=[None, 32, 2], preserve_unit_iters=True)
sch.vectorize(loop=l145)
sch.bind(loop=l144, thread_axis="threadIdx.x")
b146 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b146, ann_key="meta_schedule.unroll_explicit")
b147, b148, b149, b150, b151, b152, b153, b154, b155 = sch.get_child_blocks(b146)
l156, l157, l158, l159, l160, l161 = sch.get_loops(block=b147)
l162, l163, l164, l165, l166, l167 = sch.get_loops(block=b148)
sch.annotate(block_or_loop=l162, ann_key="pragma_auto_unroll_max_step", ann_val=512)
sch.annotate(block_or_loop=l162, ann_key="pragma_unroll_explicit", ann_val=1)
l168, l169, l170, l171, l172, l173 = sch.get_loops(block=b149)
l174, l175, l176, l177, l178, l179 = sch.get_loops(block=b150)
l180, l181, l182, l183, l184, l185, l186 = sch.get_loops(block=b151)
l187, l188, l189, l190, l191, l192, l193, l194, l195, l196, l197, l198, l199, l200 = sch.get_loops(block=b152)
sch.annotate(block_or_loop=l187, ann_key="pragma_auto_unroll_max_step", ann_val=512)
sch.annotate(block_or_loop=l187, ann_key="pragma_unroll_explicit", ann_val=1)
l201, l202, l203, l204, l205, l206, l207 = sch.get_loops(block=b153)
l208, l209, l210, l211, l212, l213, l214, l215 = sch.get_loops(block=b154)
sch.annotate(block_or_loop=l208, ann_key="pragma_auto_unroll_max_step", ann_val=512)
sch.annotate(block_or_loop=l208, ann_key="pragma_unroll_explicit", ann_val=1)
l216, l217, l218, l219 = sch.get_loops(block=b155)
b220 = sch.get_block(name="data_pack", func_name="main")
l221, l222, l223, l224, l225, l226 = sch.get_loops(block=b220)
b227 = sch.decompose_reduction(block=b220, loop=l225)
b228 = sch.get_block(name="bgemm", func_name="main")
l229, l230, l231, l232, l233, l234, l235, l236, l237, l238, l239, l240, l241, l242 = sch.get_loops(block=b228)
b243 = sch.decompose_reduction(block=b228, loop=l232)
b244 = sch.get_block(name="inverse", func_name="main")
l245, l246, l247, l248, l249, l250, l251, l252 = sch.get_loops(block=b244)
b253 = sch.decompose_reduction(block=b244, loop=l251)
2024-04-29 00:33:49 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #714: GFLOPs: 10070.9708. Time: 119.9724 us. Best GFLOPs: 10425.6244
2024-04-29 00:33:49 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #715: GFLOPs: 10290.8087. Time: 117.4094 us. Best GFLOPs: 10425.6244
2024-04-29 00:33:49 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #716: GFLOPs: 10065.4922. Time: 120.0377 us. Best GFLOPs: 10425.6244
2024-04-29 00:33:49 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #717: GFLOPs: 10109.4452. Time: 119.5158 us. Best GFLOPs: 10425.6244
2024-04-29 00:33:49 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #718: GFLOPs: 10069.2654. Time: 119.9927 us. Best GFLOPs: 10425.6244
2024-04-29 00:33:49 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #719: GFLOPs: 10070.6746. Time: 119.9759 us. Best GFLOPs: 10425.6244
2024-04-29 00:33:49 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #720: GFLOPs: 10288.3988. Time: 117.4369 us. Best GFLOPs: 10425.6244
2024-04-29 00:33:49 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #721: GFLOPs: 10086.1896. Time: 119.7913 us. Best GFLOPs: 10425.6244
2024-04-29 00:33:49 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #722: GFLOPs: 10071.7738. Time: 119.9628 us. Best GFLOPs: 10425.6244
2024-04-29 00:33:49 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #723: GFLOPs: 10017.6330. Time: 120.6111 us. Best GFLOPs: 10425.6244
2024-04-29 00:33:49 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #724: GFLOPs: 10016.0043. Time: 120.6307 us. Best GFLOPs: 10425.6244
2024-04-29 00:33:49 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #725: GFLOPs: 10114.3708. Time: 119.4576 us. Best GFLOPs: 10425.6244
2024-04-29 00:33:49 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #726: GFLOPs: 10038.5248. Time: 120.3601 us. Best GFLOPs: 10425.6244
2024-04-29 00:33:49 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #727: GFLOPs: 10064.1299. Time: 120.0539 us. Best GFLOPs: 10425.6244
2024-04-29 00:33:49 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #728: GFLOPs: 10205.2148. Time: 118.3942 us. Best GFLOPs: 10425.6244
2024-04-29 00:33:49 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #729: GFLOPs: 8631.4227. Time: 139.9813 us. Best GFLOPs: 10425.6244
2024-04-29 00:33:49 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #730: GFLOPs: 10134.3681. Time: 119.2218 us. Best GFLOPs: 10425.6244
2024-04-29 00:33:49 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #731: GFLOPs: 10058.1038. Time: 120.1258 us. Best GFLOPs: 10425.6244
2024-04-29 00:33:49 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #732: GFLOPs: 10279.0660. Time: 117.5436 us. Best GFLOPs: 10425.6244
2024-04-29 00:33:49 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #733: GFLOPs: 10286.4459. Time: 117.4592 us. Best GFLOPs: 10425.6244
2024-04-29 00:33:49 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #734: GFLOPs: 10284.0549. Time: 117.4865 us. Best GFLOPs: 10425.6244
2024-04-29 00:33:49 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #735: GFLOPs: 10282.5275. Time: 117.5040 us. Best GFLOPs: 10425.6244
2024-04-29 00:33:49 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #736: GFLOPs: 10062.8808. Time: 120.0688 us. Best GFLOPs: 10425.6244
2024-04-29 00:33:49 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #737: GFLOPs: 10155.0726. Time: 118.9788 us. Best GFLOPs: 10425.6244
2024-04-29 00:33:49 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #738: GFLOPs: 10280.0271. Time: 117.5326 us. Best GFLOPs: 10425.6244
2024-04-29 00:33:49 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #739: GFLOPs: 10159.6125. Time: 118.9256 us. Best GFLOPs: 10425.6244
2024-04-29 00:33:49 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #740: GFLOPs: 10151.8112. Time: 119.0170 us. Best GFLOPs: 10425.6244
2024-04-29 00:33:49 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #741: GFLOPs: 10065.3799. Time: 120.0390 us. Best GFLOPs: 10425.6244
2024-04-29 00:33:49 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #742: GFLOPs: 10108.2691. Time: 119.5297 us. Best GFLOPs: 10425.6244
2024-04-29 00:33:49 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #743: GFLOPs: 10132.1790. Time: 119.2476 us. Best GFLOPs: 10425.6244
2024-04-29 00:33:49 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #744: GFLOPs: 10281.3454. Time: 117.5175 us. Best GFLOPs: 10425.6244
2024-04-29 00:33:49 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #745: GFLOPs: 10154.4613. Time: 118.9859 us. Best GFLOPs: 10425.6244
2024-04-29 00:33:49 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #746: GFLOPs: 10150.3053. Time: 119.0347 us. Best GFLOPs: 10425.6244
2024-04-29 00:33:49 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #747: GFLOPs: 10086.4771. Time: 119.7879 us. Best GFLOPs: 10425.6244
2024-04-29 00:33:49 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #748: GFLOPs: 10087.0525. Time: 119.7811 us. Best GFLOPs: 10425.6244
2024-04-29 00:33:49 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #749: GFLOPs: 10108.6650. Time: 119.5250 us. Best GFLOPs: 10425.6244
2024-04-29 00:33:49 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #750: GFLOPs: 10063.3775. Time: 120.0629 us. Best GFLOPs: 10425.6244
2024-04-29 00:33:49 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #751: GFLOPs: 10101.5635. Time: 119.6090 us. Best GFLOPs: 10425.6244
2024-04-29 00:33:49 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #752: GFLOPs: 10004.1137. Time: 120.7741 us. Best GFLOPs: 10425.6244
2024-04-29 00:33:49 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #753: GFLOPs: 10130.9338. Time: 119.2623 us. Best GFLOPs: 10425.6244
2024-04-29 00:33:49 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #754: GFLOPs: 10066.4780. Time: 120.0259 us. Best GFLOPs: 10425.6244
2024-04-29 00:33:49 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #755: GFLOPs: 10047.9953. Time: 120.2467 us. Best GFLOPs: 10425.6244
2024-04-29 00:33:49 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #756: GFLOPs: 10101.5158. Time: 119.6096 us. Best GFLOPs: 10425.6244
2024-04-29 00:33:49 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #757: GFLOPs: 10062.1023. Time: 120.0781 us. Best GFLOPs: 10425.6244
2024-04-29 00:33:49 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #758: GFLOPs: 10107.1757. Time: 119.5426 us. Best GFLOPs: 10425.6244
2024-04-29 00:33:49 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #759: GFLOPs: 10037.4539. Time: 120.3730 us. Best GFLOPs: 10425.6244
2024-04-29 00:33:49 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #760: GFLOPs: 10172.9268. Time: 118.7700 us. Best GFLOPs: 10425.6244
2024-04-29 00:33:49 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #761: GFLOPs: 10077.3314. Time: 119.8966 us. Best GFLOPs: 10425.6244
2024-04-29 00:33:49 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #762: GFLOPs: 10030.6710. Time: 120.4544 us. Best GFLOPs: 10425.6244
2024-04-29 00:33:49 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #763: GFLOPs: 10099.3710. Time: 119.6350 us. Best GFLOPs: 10425.6244
2024-04-29 00:33:49 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #764: GFLOPs: 10127.2144. Time: 119.3061 us. Best GFLOPs: 10425.6244
2024-04-29 00:33:49 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #765: GFLOPs: 4137.9959. Time: 291.9863 us. Best GFLOPs: 10425.6244
2024-04-29 00:33:49 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #766: GFLOPs: 222.0751. Time: 5440.6738 us. Best GFLOPs: 10425.6244
2024-04-29 00:33:49 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #767: GFLOPs: 792.1423. Time: 1525.2791 us. Best GFLOPs: 10425.6244
2024-04-29 00:43:08 [INFO] [evolutionary_search.cc:713] Generating candidates......
2024-04-29 00:43:11 [INFO] [evolutionary_search.cc:715] Picked top 102 candidate(s) from database
2024-04-29 00:43:18 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x43d23b8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x3ad3338)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x72c6e28)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x4cb1ce8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x5905ad8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x7272d28)]: 404 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x3ab3638)]: 0 failure(s)
2024-04-29 00:43:25 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x43d23b8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x3ad3338)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x72c6e28)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x4cb1ce8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x5905ad8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x7272d28)]: 807 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x3ab3638)]: 0 failure(s)
2024-04-29 00:43:31 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x43d23b8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x3ad3338)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x72c6e28)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x4cb1ce8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x5905ad8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x7272d28)]: 1213 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x3ab3638)]: 0 failure(s)
2024-04-29 00:43:38 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x43d23b8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x3ad3338)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x72c6e28)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x4cb1ce8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x5905ad8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x7272d28)]: 1619 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x3ab3638)]: 0 failure(s)
2024-04-29 00:43:45 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x43d23b8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x3ad3338)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x72c6e28)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x4cb1ce8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x5905ad8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x7272d28)]: 2025 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x3ab3638)]: 0 failure(s)
2024-04-29 00:43:52 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x43d23b8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x3ad3338)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x72c6e28)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x4cb1ce8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x5905ad8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x7272d28)]: 2431 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x3ab3638)]: 0 failure(s)
2024-04-29 00:43:59 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x43d23b8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x3ad3338)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x72c6e28)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x4cb1ce8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x5905ad8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x7272d28)]: 2838 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x3ab3638)]: 0 failure(s)
2024-04-29 00:44:06 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x43d23b8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x3ad3338)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x72c6e28)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x4cb1ce8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x5905ad8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x7272d28)]: 3243 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x3ab3638)]: 0 failure(s)
2024-04-29 00:44:13 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x43d23b8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x3ad3338)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x72c6e28)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x4cb1ce8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x5905ad8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x7272d28)]: 3647 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x3ab3638)]: 0 failure(s)
2024-04-29 00:44:20 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x43d23b8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x3ad3338)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x72c6e28)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x4cb1ce8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x5905ad8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x7272d28)]: 4051 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x3ab3638)]: 0 failure(s)
2024-04-29 00:44:27 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x43d23b8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x3ad3338)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x72c6e28)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x4cb1ce8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x5905ad8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x7272d28)]: 4458 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x3ab3638)]: 0 failure(s)
2024-04-29 00:44:27 [INFO] [evolutionary_search.cc:723] Sampled 52 candidate(s)
2024-04-29 00:44:45 [INFO] [evolutionary_search.cc:621] Evolve iter #0 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x43d23b8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x3ad3338)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x72c6e28)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x4cb1ce8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x5905ad8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x7272d28)]: 83 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x3ab3638)]: 0 failure(s)
2024-04-29 00:45:07 [INFO] [evolutionary_search.cc:621] Evolve iter #1 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x43d23b8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x3ad3338)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x72c6e28)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x4cb1ce8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x5905ad8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x7272d28)]: 88 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x3ab3638)]: 0 failure(s)
2024-04-29 00:45:29 [INFO] [evolutionary_search.cc:621] Evolve iter #2 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x43d23b8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x3ad3338)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x72c6e28)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x4cb1ce8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x5905ad8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x7272d28)]: 82 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x3ab3638)]: 0 failure(s)
2024-04-29 00:45:50 [INFO] [evolutionary_search.cc:621] Evolve iter #3 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x43d23b8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x3ad3338)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x72c6e28)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x4cb1ce8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x5905ad8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x7272d28)]: 81 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x3ab3638)]: 0 failure(s)
2024-04-29 00:45:55 [INFO] [evolutionary_search.cc:649] Scores of the best 64 candidates:
[1 : 16]:	1.1348  1.0434  1.0423  1.0373  1.0362  1.0330  0.9902  0.9902  0.9850  0.9849  0.9843  0.9841  0.9837  0.9837  0.9835  0.9834
[17 : 32]:	0.9830  0.9817  0.9815  0.9814  0.9814  0.9801  0.9801  0.9797  0.9795  0.9788  0.9786  0.9784  0.9779  0.9779  0.9777  0.9777
[33 : 48]:	0.9777  0.9776  0.9775  0.9774  0.9767  0.9753  0.9748  0.9746  0.9742  0.9742  0.9739  0.9738  0.9738  0.9736  0.9734  0.9734
[49 : 64]:	0.9731  0.9731  0.9727  0.9727  0.9723  0.9722  0.9719  0.9716  0.9715  0.9714  0.9714  0.9712  0.9711  0.9711  0.9711  0.9710
2024-04-29 00:45:55 [INFO] [evolutionary_search.cc:727] Got 64 candidate(s) with evolutionary search
2024-04-29 00:45:55 [INFO] [evolutionary_search.cc:730] Sending 64 candidates(s) for measurement
2024-04-29 00:47:04 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #768: GFLOPs: 3918.8635. Time: 308.3134 us. Best GFLOPs: 10425.6244
2024-04-29 00:47:04 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #769: GFLOPs: 3690.1072. Time: 327.4263 us. Best GFLOPs: 10425.6244
2024-04-29 00:47:04 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #770: GFLOPs: 3759.6438. Time: 321.3704 us. Best GFLOPs: 10425.6244
2024-04-29 00:47:04 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #771: GFLOPs: 3772.1019. Time: 320.3090 us. Best GFLOPs: 10425.6244
2024-04-29 00:47:04 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #772: GFLOPs: 3919.1977. Time: 308.2871 us. Best GFLOPs: 10425.6244
2024-04-29 00:47:04 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #773: GFLOPs: 3785.8277. Time: 319.1477 us. Best GFLOPs: 10425.6244
2024-04-29 00:47:04 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #774: GFLOPs: 3781.6166. Time: 319.5031 us. Best GFLOPs: 10425.6244
2024-04-29 00:47:04 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #775: GFLOPs: 3782.6683. Time: 319.4142 us. Best GFLOPs: 10425.6244
2024-04-29 00:47:04 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #776: GFLOPs: 10284.1093. Time: 117.4859 us. Best GFLOPs: 10425.6244
2024-04-29 00:47:04 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #777: GFLOPs: 10071.7738. Time: 119.9628 us. Best GFLOPs: 10425.6244
2024-04-29 00:47:04 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #778: GFLOPs: 10282.2190. Time: 117.5075 us. Best GFLOPs: 10425.6244
2024-04-29 00:47:04 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #779: GFLOPs: 9412.2312. Time: 128.3689 us. Best GFLOPs: 10425.6244
2024-04-29 00:47:04 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #780: GFLOPs: 10066.4279. Time: 120.0265 us. Best GFLOPs: 10425.6244
2024-04-29 00:47:04 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #781: GFLOPs: 10045.1834. Time: 120.2803 us. Best GFLOPs: 10425.6244
2024-04-29 00:47:04 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #782: GFLOPs: 10071.2058. Time: 119.9696 us. Best GFLOPs: 10425.6244
2024-04-29 00:47:04 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #783: GFLOPs: 9411.4654. Time: 128.3794 us. Best GFLOPs: 10425.6244
2024-04-29 00:47:04 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #784: GFLOPs: 10297.2959. Time: 117.3355 us. Best GFLOPs: 10425.6244
2024-04-29 00:47:04 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #785: GFLOPs: 10098.1793. Time: 119.6491 us. Best GFLOPs: 10425.6244
2024-04-29 00:47:04 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #786: GFLOPs: 9410.0511. Time: 128.3987 us. Best GFLOPs: 10425.6244
2024-04-29 00:47:04 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #787: GFLOPs: 10132.7443. Time: 119.2410 us. Best GFLOPs: 10425.6244
2024-04-29 00:47:04 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #788: GFLOPs: 10056.7661. Time: 120.1418 us. Best GFLOPs: 10425.6244
2024-04-29 00:47:04 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #789: GFLOPs: 10051.0301. Time: 120.2104 us. Best GFLOPs: 10425.6244
2024-04-29 00:47:04 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #790: GFLOPs: 10135.6559. Time: 119.2067 us. Best GFLOPs: 10425.6244
2024-04-29 00:47:04 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #791: GFLOPs: 10161.9792. Time: 118.8979 us. Best GFLOPs: 10425.6244
2024-04-29 00:47:04 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #792: GFLOPs: 10205.0872. Time: 118.3957 us. Best GFLOPs: 10425.6244
2024-04-29 00:47:04 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #793: GFLOPs: 10160.6122. Time: 118.9139 us. Best GFLOPs: 10425.6244
2024-04-29 00:47:04 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #794: GFLOPs: 10070.6092. Time: 119.9767 us. Best GFLOPs: 10425.6244
2024-04-29 00:47:04 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #795: GFLOPs: 10073.5078. Time: 119.9421 us. Best GFLOPs: 10425.6244
2024-04-29 00:47:04 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #796: GFLOPs: 10021.6829. Time: 120.5624 us. Best GFLOPs: 10425.6244
2024-04-29 00:47:04 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #797: GFLOPs: 10133.6675. Time: 119.2301 us. Best GFLOPs: 10425.6244
2024-04-29 00:47:04 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #798: GFLOPs: 10151.7353. Time: 119.0179 us. Best GFLOPs: 10425.6244
2024-04-29 00:47:04 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #799: GFLOPs: 10070.3745. Time: 119.9795 us. Best GFLOPs: 10425.6244
2024-04-29 00:47:04 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #800: GFLOPs: 10146.5137. Time: 119.0791 us. Best GFLOPs: 10425.6244
2024-04-29 00:47:04 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #801: GFLOPs: 10051.8120. Time: 120.2010 us. Best GFLOPs: 10425.6244
2024-04-29 00:47:04 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #802: GFLOPs: 10153.9175. Time: 118.9923 us. Best GFLOPs: 10425.6244
2024-04-29 00:47:04 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #803: GFLOPs: 10074.6505. Time: 119.9285 us. Best GFLOPs: 10425.6244
2024-04-29 00:47:04 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #804: GFLOPs: 10113.4983. Time: 119.4679 us. Best GFLOPs: 10425.6244
2024-04-29 00:47:04 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #805: GFLOPs: 10014.7172. Time: 120.6462 us. Best GFLOPs: 10425.6244
2024-04-29 00:47:04 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #806: GFLOPs: 10161.1927. Time: 118.9071 us. Best GFLOPs: 10425.6244
2024-04-29 00:47:04 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #807: GFLOPs: 10066.2936. Time: 120.0281 us. Best GFLOPs: 10425.6244
2024-04-29 00:47:04 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #808: GFLOPs: 10132.7243. Time: 119.2412 us. Best GFLOPs: 10425.6244
2024-04-29 00:47:04 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #809: GFLOPs: 10149.0042. Time: 119.0499 us. Best GFLOPs: 10425.6244
2024-04-29 00:47:04 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #810: GFLOPs: 10063.3580. Time: 120.0631 us. Best GFLOPs: 10425.6244
2024-04-29 00:47:04 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #811: GFLOPs: 10152.7836. Time: 119.0056 us. Best GFLOPs: 10425.6244
2024-04-29 00:47:04 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #812: GFLOPs: 9899.4157. Time: 122.0515 us. Best GFLOPs: 10425.6244
2024-04-29 00:47:04 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #813: GFLOPs: 10025.0432. Time: 120.5220 us. Best GFLOPs: 10425.6244
2024-04-29 00:47:04 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #814: GFLOPs: 10110.4640. Time: 119.5037 us. Best GFLOPs: 10425.6244
2024-04-29 00:47:04 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #815: GFLOPs: 9974.4662. Time: 121.1331 us. Best GFLOPs: 10425.6244
2024-04-29 00:47:04 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #816: GFLOPs: 10013.5472. Time: 120.6603 us. Best GFLOPs: 10425.6244
2024-04-29 00:47:04 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #817: GFLOPs: 9882.3734. Time: 122.2619 us. Best GFLOPs: 10425.6244
2024-04-29 00:47:04 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #818: GFLOPs: 10038.0064. Time: 120.3663 us. Best GFLOPs: 10425.6244
2024-04-29 00:47:04 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #819: GFLOPs: 10131.7592. Time: 119.2525 us. Best GFLOPs: 10425.6244
2024-04-29 00:47:04 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #820: GFLOPs: 10079.1898. Time: 119.8745 us. Best GFLOPs: 10425.6244
2024-04-29 00:47:04 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #821: GFLOPs: 10135.0421. Time: 119.2139 us. Best GFLOPs: 10425.6244
2024-04-29 00:47:04 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #822: GFLOPs: 10077.4065. Time: 119.8957 us. Best GFLOPs: 10425.6244
2024-04-29 00:47:04 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #823: GFLOPs: 10156.4143. Time: 118.9631 us. Best GFLOPs: 10425.6244
2024-04-29 00:47:04 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #824: GFLOPs: 10075.1085. Time: 119.9231 us. Best GFLOPs: 10425.6244
2024-04-29 00:47:04 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #825: GFLOPs: 10144.6821. Time: 119.1006 us. Best GFLOPs: 10425.6244
2024-04-29 00:47:04 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #826: GFLOPs: 10008.5926. Time: 120.7201 us. Best GFLOPs: 10425.6244
2024-04-29 00:47:04 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #827: GFLOPs: 10012.0002. Time: 120.6790 us. Best GFLOPs: 10425.6244
2024-04-29 00:47:04 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #828: GFLOPs: 10170.6115. Time: 118.7970 us. Best GFLOPs: 10425.6244
2024-04-29 00:47:04 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #829: GFLOPs: 2637.4615. Time: 458.1064 us. Best GFLOPs: 10425.6244
2024-04-29 00:47:04 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #830: GFLOPs: 2741.0768. Time: 440.7896 us. Best GFLOPs: 10425.6244
2024-04-29 00:47:04 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #831: GFLOPs: 3079.2084. Time: 392.3859 us. Best GFLOPs: 10425.6244
2024-04-29 01:13:03 [INFO] [evolutionary_search.cc:713] Generating candidates......
2024-04-29 01:13:06 [INFO] [evolutionary_search.cc:715] Picked top 102 candidate(s) from database
2024-04-29 01:13:13 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x43d23b8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x3ad3338)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x72c6e28)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x4cb1ce8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x5905ad8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x7272d28)]: 404 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x3ab3638)]: 0 failure(s)
2024-04-29 01:13:20 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x43d23b8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x3ad3338)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x72c6e28)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x4cb1ce8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x5905ad8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x7272d28)]: 804 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x3ab3638)]: 0 failure(s)
2024-04-29 01:13:27 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x43d23b8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x3ad3338)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x72c6e28)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x4cb1ce8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x5905ad8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x7272d28)]: 1203 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x3ab3638)]: 0 failure(s)
2024-04-29 01:13:33 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x43d23b8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x3ad3338)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x72c6e28)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x4cb1ce8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x5905ad8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x7272d28)]: 1611 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x3ab3638)]: 0 failure(s)
2024-04-29 01:13:40 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x43d23b8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x3ad3338)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x72c6e28)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x4cb1ce8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x5905ad8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x7272d28)]: 2019 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x3ab3638)]: 0 failure(s)
2024-04-29 01:13:46 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x43d23b8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x3ad3338)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x72c6e28)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x4cb1ce8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x5905ad8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x7272d28)]: 2424 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x3ab3638)]: 0 failure(s)
2024-04-29 01:13:53 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x43d23b8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x3ad3338)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x72c6e28)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x4cb1ce8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x5905ad8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x7272d28)]: 2828 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x3ab3638)]: 0 failure(s)
2024-04-29 01:13:59 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x43d23b8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x3ad3338)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x72c6e28)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x4cb1ce8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x5905ad8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x7272d28)]: 3230 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x3ab3638)]: 0 failure(s)
2024-04-29 01:13:59 [INFO] [evolutionary_search.cc:723] Sampled 50 candidate(s)
2024-04-29 01:14:17 [INFO] [evolutionary_search.cc:621] Evolve iter #0 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x43d23b8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x3ad3338)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x72c6e28)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x4cb1ce8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x5905ad8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x7272d28)]: 85 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x3ab3638)]: 0 failure(s)
2024-04-29 01:14:39 [INFO] [evolutionary_search.cc:621] Evolve iter #1 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x43d23b8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x3ad3338)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x72c6e28)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x4cb1ce8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x5905ad8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x7272d28)]: 108 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x3ab3638)]: 0 failure(s)
2024-04-29 01:15:00 [INFO] [evolutionary_search.cc:621] Evolve iter #2 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x43d23b8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x3ad3338)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x72c6e28)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x4cb1ce8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x5905ad8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x7272d28)]: 107 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x3ab3638)]: 0 failure(s)
2024-04-29 01:15:21 [INFO] [evolutionary_search.cc:621] Evolve iter #3 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x43d23b8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x3ad3338)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x72c6e28)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x4cb1ce8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x5905ad8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x7272d28)]: 109 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x3ab3638)]: 0 failure(s)
2024-04-29 01:15:26 [INFO] [evolutionary_search.cc:649] Scores of the best 64 candidates:
[1 : 16]:	0.9816  0.9807  0.9806  0.9800  0.9795  0.9793  0.9793  0.9792  0.9789  0.9787  0.9786  0.9783  0.9783  0.9783  0.9783  0.9783
[17 : 32]:	0.9780  0.9778  0.9777  0.9776  0.9775  0.9772  0.9771  0.9771  0.9768  0.9768  0.9767  0.9767  0.9766  0.9763  0.9763  0.9761
[33 : 48]:	0.9761  0.9760  0.9757  0.9757  0.9757  0.9756  0.9756  0.9755  0.9751  0.9746  0.9746  0.9745  0.9745  0.9743  0.9743  0.9739
[49 : 64]:	0.9739  0.9735  0.9734  0.9733  0.9730  0.9730  0.9730  0.9730  0.9730  0.9730  0.9729  0.9728  0.9727  0.9727  0.9727  0.9724
2024-04-29 01:15:26 [INFO] [evolutionary_search.cc:727] Got 64 candidate(s) with evolutionary search
2024-04-29 01:15:26 [INFO] [evolutionary_search.cc:730] Sending 64 candidates(s) for measurement
2024-04-29 01:16:43 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #832: GFLOPs: 10092.9985. Time: 119.7105 us. Best GFLOPs: 10425.6244
2024-04-29 01:16:43 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #833: GFLOPs: 10262.3232. Time: 117.7353 us. Best GFLOPs: 10425.6244
2024-04-29 01:16:43 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #834: GFLOPs: 10122.2766. Time: 119.3643 us. Best GFLOPs: 10425.6244
2024-04-29 01:16:43 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #835: GFLOPs: 10301.4310. Time: 117.2884 us. Best GFLOPs: 10425.6244
2024-04-29 01:16:43 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #836: GFLOPs: 10278.7612. Time: 117.5471 us. Best GFLOPs: 10425.6244
2024-04-29 01:16:43 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #837: GFLOPs: 10154.3575. Time: 118.9872 us. Best GFLOPs: 10425.6244
2024-04-29 01:16:43 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #838: GFLOPs: 10211.8035. Time: 118.3178 us. Best GFLOPs: 10425.6244
2024-04-29 01:16:43 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #839: GFLOPs: 10216.7181. Time: 118.2609 us. Best GFLOPs: 10425.6244
2024-04-29 01:16:43 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #840: GFLOPs: 10254.5881. Time: 117.8241 us. Best GFLOPs: 10425.6244
2024-04-29 01:16:43 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #841: GFLOPs: 10079.6295. Time: 119.8693 us. Best GFLOPs: 10425.6244
2024-04-29 01:16:43 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #842: GFLOPs: 10059.7611. Time: 120.1060 us. Best GFLOPs: 10425.6244
2024-04-29 01:16:43 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #843: GFLOPs: 10214.4485. Time: 118.2872 us. Best GFLOPs: 10425.6244
2024-04-29 01:16:43 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #844: GFLOPs: 10106.5292. Time: 119.5502 us. Best GFLOPs: 10425.6244
2024-04-29 01:16:43 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #845: GFLOPs: 10173.5223. Time: 118.7630 us. Best GFLOPs: 10425.6244
2024-04-29 01:16:43 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #846: GFLOPs: 10064.5456. Time: 120.0489 us. Best GFLOPs: 10425.6244
2024-04-29 01:16:43 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #847: GFLOPs: 10112.5000. Time: 119.4797 us. Best GFLOPs: 10425.6244
2024-04-29 01:16:43 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #848: GFLOPs: 10102.8128. Time: 119.5942 us. Best GFLOPs: 10425.6244
2024-04-29 01:16:43 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #849: GFLOPs: 10107.3954. Time: 119.5400 us. Best GFLOPs: 10425.6244
2024-04-29 01:16:43 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #850: GFLOPs: 10110.8634. Time: 119.4990 us. Best GFLOPs: 10425.6244
2024-04-29 01:16:43 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #851: GFLOPs: 10004.6700. Time: 120.7674 us. Best GFLOPs: 10425.6244
2024-04-29 01:16:43 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #852: GFLOPs: 10197.5565. Time: 118.4831 us. Best GFLOPs: 10425.6244
2024-04-29 01:16:43 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #853: GFLOPs: 10281.1322. Time: 117.5199 us. Best GFLOPs: 10425.6244
2024-04-29 01:16:43 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #854: GFLOPs: 10048.9167. Time: 120.2357 us. Best GFLOPs: 10425.6244
2024-04-29 01:16:43 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #855: GFLOPs: 10063.2836. Time: 120.0640 us. Best GFLOPs: 10425.6244
2024-04-29 01:16:43 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #856: GFLOPs: 10259.5565. Time: 117.7671 us. Best GFLOPs: 10425.6244
2024-04-29 01:16:43 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #857: GFLOPs: 10071.9734. Time: 119.9604 us. Best GFLOPs: 10425.6244
2024-04-29 01:16:43 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #858: GFLOPs: 10164.4802. Time: 118.8687 us. Best GFLOPs: 10425.6244
2024-04-29 01:16:43 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #859: GFLOPs: 10260.8944. Time: 117.7517 us. Best GFLOPs: 10425.6244
2024-04-29 01:16:43 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #860: GFLOPs: 10302.0334. Time: 117.2815 us. Best GFLOPs: 10425.6244
2024-04-29 01:16:43 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #861: GFLOPs: 10108.0693. Time: 119.5320 us. Best GFLOPs: 10425.6244
2024-04-29 01:16:43 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #862: GFLOPs: 10055.8712. Time: 120.1525 us. Best GFLOPs: 10425.6244
2024-04-29 01:16:43 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #863: GFLOPs: 10105.2085. Time: 119.5659 us. Best GFLOPs: 10425.6244
2024-04-29 01:16:43 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #864: GFLOPs: 10157.3626. Time: 118.9519 us. Best GFLOPs: 10425.6244
2024-04-29 01:16:43 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #865: GFLOPs: 9974.4662. Time: 121.1331 us. Best GFLOPs: 10425.6244
2024-04-29 01:16:43 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #866: GFLOPs: 10047.0111. Time: 120.2585 us. Best GFLOPs: 10425.6244
2024-04-29 01:16:43 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #867: GFLOPs: 10146.0528. Time: 119.0845 us. Best GFLOPs: 10425.6244
2024-04-29 01:16:43 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #868: GFLOPs: 10061.8076. Time: 120.0816 us. Best GFLOPs: 10425.6244
2024-04-29 01:16:43 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #869: GFLOPs: 10097.6317. Time: 119.6556 us. Best GFLOPs: 10425.6244
2024-04-29 01:16:43 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #870: GFLOPs: 10232.5099. Time: 118.0784 us. Best GFLOPs: 10425.6244
2024-04-29 01:16:43 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #871: GFLOPs: 10153.0891. Time: 119.0020 us. Best GFLOPs: 10425.6244
2024-04-29 01:16:43 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #872: GFLOPs: 10036.4042. Time: 120.3856 us. Best GFLOPs: 10425.6244
2024-04-29 01:16:43 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #873: GFLOPs: 10278.5631. Time: 117.5493 us. Best GFLOPs: 10425.6244
2024-04-29 01:16:43 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #874: GFLOPs: 10143.3207. Time: 119.1166 us. Best GFLOPs: 10425.6244
2024-04-29 01:16:43 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #875: GFLOPs: 10111.4540. Time: 119.4920 us. Best GFLOPs: 10425.6244
2024-04-29 01:16:43 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #876: GFLOPs: 10027.3189. Time: 120.4946 us. Best GFLOPs: 10425.6244
2024-04-29 01:16:43 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #877: GFLOPs: 10286.3981. Time: 117.4598 us. Best GFLOPs: 10425.6244
2024-04-29 01:16:43 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #878: GFLOPs: 10289.8644. Time: 117.4202 us. Best GFLOPs: 10425.6244
2024-04-29 01:16:43 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #879: GFLOPs: 10061.3336. Time: 120.0873 us. Best GFLOPs: 10425.6244
2024-04-29 01:16:43 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #880: GFLOPs: 10132.0125. Time: 119.2496 us. Best GFLOPs: 10425.6244
2024-04-29 01:16:43 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #881: GFLOPs: 10071.7980. Time: 119.9625 us. Best GFLOPs: 10425.6244
2024-04-29 01:16:43 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #882: GFLOPs: 10105.9115. Time: 119.5576 us. Best GFLOPs: 10425.6244
2024-04-29 01:16:43 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #883: GFLOPs: 10264.1524. Time: 117.7144 us. Best GFLOPs: 10425.6244
2024-04-29 01:16:43 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #884: GFLOPs: 10209.2136. Time: 118.3478 us. Best GFLOPs: 10425.6244
2024-04-29 01:16:43 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #885: GFLOPs: 10115.9203. Time: 119.4393 us. Best GFLOPs: 10425.6244
2024-04-29 01:16:43 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #886: GFLOPs: 10100.8252. Time: 119.6178 us. Best GFLOPs: 10425.6244
2024-04-29 01:16:43 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #887: GFLOPs: 10027.2555. Time: 120.4954 us. Best GFLOPs: 10425.6244
2024-04-29 01:16:43 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #888: GFLOPs: 10054.1539. Time: 120.1730 us. Best GFLOPs: 10425.6244
2024-04-29 01:16:43 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #889: GFLOPs: 10106.2348. Time: 119.5537 us. Best GFLOPs: 10425.6244
2024-04-29 01:16:43 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #890: GFLOPs: 10063.5821. Time: 120.0604 us. Best GFLOPs: 10425.6244
2024-04-29 01:16:43 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #891: GFLOPs: 10100.4094. Time: 119.6227 us. Best GFLOPs: 10425.6244
2024-04-29 01:16:43 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #892: GFLOPs: 10085.9865. Time: 119.7937 us. Best GFLOPs: 10425.6244
2024-04-29 01:16:43 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #893: GFLOPs: 3586.8236. Time: 336.8546 us. Best GFLOPs: 10425.6244
2024-04-29 01:16:43 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #894: GFLOPs: 220.4352. Time: 5481.1485 us. Best GFLOPs: 10425.6244
2024-04-29 01:16:43 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #895: GFLOPs: 1644.7137. Time: 734.6191 us. Best GFLOPs: 10425.6244
2024-04-29 01:30:47 [INFO] [evolutionary_search.cc:713] Generating candidates......
2024-04-29 01:30:51 [INFO] [evolutionary_search.cc:715] Picked top 102 candidate(s) from database
2024-04-29 01:30:57 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x43d23b8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x3ad3338)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x72c6e28)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x4cb1ce8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x5905ad8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x7272d28)]: 402 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x3ab3638)]: 0 failure(s)
2024-04-29 01:31:04 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x43d23b8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x3ad3338)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x72c6e28)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x4cb1ce8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x5905ad8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x7272d28)]: 806 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x3ab3638)]: 0 failure(s)
2024-04-29 01:31:11 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x43d23b8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x3ad3338)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x72c6e28)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x4cb1ce8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x5905ad8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x7272d28)]: 1210 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x3ab3638)]: 0 failure(s)
2024-04-29 01:31:18 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x43d23b8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x3ad3338)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x72c6e28)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x4cb1ce8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x5905ad8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x7272d28)]: 1615 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x3ab3638)]: 0 failure(s)
2024-04-29 01:31:25 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x43d23b8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x3ad3338)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x72c6e28)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x4cb1ce8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x5905ad8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x7272d28)]: 2019 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x3ab3638)]: 0 failure(s)
2024-04-29 01:31:31 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x43d23b8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x3ad3338)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x72c6e28)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x4cb1ce8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x5905ad8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x7272d28)]: 2417 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x3ab3638)]: 0 failure(s)
2024-04-29 01:31:39 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x43d23b8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x3ad3338)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x72c6e28)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x4cb1ce8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x5905ad8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x7272d28)]: 2820 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x3ab3638)]: 0 failure(s)
2024-04-29 01:31:39 [INFO] [evolutionary_search.cc:723] Sampled 50 candidate(s)
2024-04-29 01:31:57 [INFO] [evolutionary_search.cc:621] Evolve iter #0 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x43d23b8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x3ad3338)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x72c6e28)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x4cb1ce8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x5905ad8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x7272d28)]: 88 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x3ab3638)]: 0 failure(s)
2024-04-29 01:32:19 [INFO] [evolutionary_search.cc:621] Evolve iter #1 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x43d23b8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x3ad3338)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x72c6e28)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x4cb1ce8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x5905ad8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x7272d28)]: 92 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x3ab3638)]: 0 failure(s)
2024-04-29 01:32:41 [INFO] [evolutionary_search.cc:621] Evolve iter #2 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x43d23b8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x3ad3338)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x72c6e28)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x4cb1ce8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x5905ad8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x7272d28)]: 124 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x3ab3638)]: 0 failure(s)
2024-04-29 01:33:03 [INFO] [evolutionary_search.cc:621] Evolve iter #3 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x43d23b8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x3ad3338)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x72c6e28)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x4cb1ce8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x5905ad8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x7272d28)]: 112 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x3ab3638)]: 0 failure(s)
2024-04-29 01:33:08 [INFO] [evolutionary_search.cc:649] Scores of the best 64 candidates:
[1 : 16]:	0.9856  0.9816  0.9806  0.9806  0.9805  0.9805  0.9804  0.9804  0.9795  0.9790  0.9788  0.9787  0.9783  0.9782  0.9781  0.9779
[17 : 32]:	0.9777  0.9776  0.9774  0.9771  0.9765  0.9765  0.9764  0.9764  0.9764  0.9756  0.9754  0.9752  0.9752  0.9752  0.9752  0.9752
[33 : 48]:	0.9751  0.9749  0.9748  0.9748  0.9745  0.9745  0.9745  0.9744  0.9743  0.9742  0.9742  0.9741  0.9739  0.9737  0.9737  0.9736
[49 : 64]:	0.9733  0.9732  0.9729  0.9728  0.9725  0.9723  0.9722  0.9721  0.9721  0.9720  0.9718  0.9718  0.9716  0.9715  0.9715  0.9714
2024-04-29 01:33:08 [INFO] [evolutionary_search.cc:727] Got 64 candidate(s) with evolutionary search
2024-04-29 01:33:08 [INFO] [evolutionary_search.cc:730] Sending 64 candidates(s) for measurement
2024-04-29 01:34:29 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #896: GFLOPs: 10095.8366. Time: 119.6769 us. Best GFLOPs: 10425.6244
2024-04-29 01:34:29 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #897: GFLOPs: 10174.1300. Time: 118.7559 us. Best GFLOPs: 10425.6244
2024-04-29 01:34:29 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #898: GFLOPs: 10316.4454. Time: 117.1177 us. Best GFLOPs: 10425.6244
2024-04-29 01:34:29 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #899: GFLOPs: 10125.8128. Time: 119.3226 us. Best GFLOPs: 10425.6244
2024-04-29 01:34:29 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #900: GFLOPs: 10328.9659. Time: 116.9757 us. Best GFLOPs: 10425.6244
2024-04-29 01:34:29 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #901: GFLOPs: 10328.0367. Time: 116.9862 us. Best GFLOPs: 10425.6244
2024-04-29 01:34:29 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #902: GFLOPs: 10089.0371. Time: 119.7575 us. Best GFLOPs: 10425.6244
2024-04-29 01:34:29 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #903: GFLOPs: 10329.6333. Time: 116.9681 us. Best GFLOPs: 10425.6244
2024-04-29 01:34:29 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #904: GFLOPs: 10094.5749. Time: 119.6918 us. Best GFLOPs: 10425.6244
2024-04-29 01:34:29 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #905: GFLOPs: 10091.9911. Time: 119.7225 us. Best GFLOPs: 10425.6244
2024-04-29 01:34:29 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #906: GFLOPs: 10029.2133. Time: 120.4719 us. Best GFLOPs: 10425.6244
2024-04-29 01:34:29 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #907: GFLOPs: 10097.1722. Time: 119.6610 us. Best GFLOPs: 10425.6244
2024-04-29 01:34:29 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #908: GFLOPs: 10260.7781. Time: 117.7531 us. Best GFLOPs: 10425.6244
2024-04-29 01:34:29 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #909: GFLOPs: 10226.1145. Time: 118.1522 us. Best GFLOPs: 10425.6244
2024-04-29 01:34:29 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #910: GFLOPs: 10105.4079. Time: 119.5635 us. Best GFLOPs: 10425.6244
2024-04-29 01:34:29 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #911: GFLOPs: 10043.2603. Time: 120.3034 us. Best GFLOPs: 10425.6244
2024-04-29 01:34:29 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #912: GFLOPs: 10114.4433. Time: 119.4567 us. Best GFLOPs: 10425.6244
2024-04-29 01:34:29 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #913: GFLOPs: 10215.0478. Time: 118.2802 us. Best GFLOPs: 10425.6244
2024-04-29 01:34:29 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #914: GFLOPs: 10251.4422. Time: 117.8603 us. Best GFLOPs: 10425.6244
2024-04-29 01:34:29 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #915: GFLOPs: 10226.9509. Time: 118.1426 us. Best GFLOPs: 10425.6244
2024-04-29 01:34:29 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #916: GFLOPs: 10145.5849. Time: 119.0900 us. Best GFLOPs: 10425.6244
2024-04-29 01:34:29 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #917: GFLOPs: 9983.6724. Time: 121.0214 us. Best GFLOPs: 10425.6244
2024-04-29 01:34:29 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #918: GFLOPs: 10136.8688. Time: 119.1924 us. Best GFLOPs: 10425.6244
2024-04-29 01:34:29 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #919: GFLOPs: 10124.0825. Time: 119.3430 us. Best GFLOPs: 10425.6244
2024-04-29 01:34:29 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #920: GFLOPs: 10117.5837. Time: 119.4196 us. Best GFLOPs: 10425.6244
2024-04-29 01:34:29 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #921: GFLOPs: 10220.1521. Time: 118.2211 us. Best GFLOPs: 10425.6244
2024-04-29 01:34:29 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #922: GFLOPs: 9808.9138. Time: 123.1776 us. Best GFLOPs: 10425.6244
2024-04-29 01:34:29 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #923: GFLOPs: 10221.8920. Time: 118.2010 us. Best GFLOPs: 10425.6244
2024-04-29 01:34:29 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #924: GFLOPs: 10233.7696. Time: 118.0638 us. Best GFLOPs: 10425.6244
2024-04-29 01:34:29 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #925: GFLOPs: 10218.8813. Time: 118.2358 us. Best GFLOPs: 10425.6244
2024-04-29 01:34:29 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #926: GFLOPs: 10219.7155. Time: 118.2262 us. Best GFLOPs: 10425.6244
2024-04-29 01:34:29 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #927: GFLOPs: 10234.0476. Time: 118.0606 us. Best GFLOPs: 10425.6244
2024-04-29 01:34:29 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #928: GFLOPs: 10236.6527. Time: 118.0306 us. Best GFLOPs: 10425.6244
2024-04-29 01:34:29 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #929: GFLOPs: 10096.8277. Time: 119.6651 us. Best GFLOPs: 10425.6244
2024-04-29 01:34:29 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #930: GFLOPs: 10102.7471. Time: 119.5950 us. Best GFLOPs: 10425.6244
2024-04-29 01:34:29 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #931: GFLOPs: 10149.0601. Time: 119.0493 us. Best GFLOPs: 10425.6244
2024-04-29 01:34:29 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #932: GFLOPs: 10143.9490. Time: 119.1092 us. Best GFLOPs: 10425.6244
2024-04-29 01:34:29 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #933: GFLOPs: 10142.8101. Time: 119.1226 us. Best GFLOPs: 10425.6244
2024-04-29 01:34:29 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #934: GFLOPs: 10077.8914. Time: 119.8900 us. Best GFLOPs: 10425.6244
2024-04-29 01:34:29 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #935: GFLOPs: 10176.9979. Time: 118.7224 us. Best GFLOPs: 10425.6244
2024-04-29 01:34:29 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #936: GFLOPs: 10175.5850. Time: 118.7389 us. Best GFLOPs: 10425.6244
2024-04-29 01:34:29 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #937: GFLOPs: 10122.8826. Time: 119.3571 us. Best GFLOPs: 10425.6244
2024-04-29 01:34:29 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #938: GFLOPs: 10228.3518. Time: 118.1264 us. Best GFLOPs: 10425.6244
2024-04-29 01:34:29 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #939: GFLOPs: 10152.2420. Time: 119.0119 us. Best GFLOPs: 10425.6244
2024-04-29 01:34:29 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #940: GFLOPs: 10232.8650. Time: 118.0743 us. Best GFLOPs: 10425.6244
2024-04-29 01:34:29 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #941: GFLOPs: 10176.7403. Time: 118.7255 us. Best GFLOPs: 10425.6244
2024-04-29 01:34:29 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #942: GFLOPs: 10105.0553. Time: 119.5677 us. Best GFLOPs: 10425.6244
2024-04-29 01:34:29 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #943: GFLOPs: 10114.5526. Time: 119.4554 us. Best GFLOPs: 10425.6244
2024-04-29 01:34:29 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #944: GFLOPs: 10150.4502. Time: 119.0330 us. Best GFLOPs: 10425.6244
2024-04-29 01:34:29 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #945: GFLOPs: 10099.9677. Time: 119.6279 us. Best GFLOPs: 10425.6244
2024-04-29 01:34:29 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #946: GFLOPs: 10148.3417. Time: 119.0577 us. Best GFLOPs: 10425.6244
2024-04-29 01:34:29 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #947: GFLOPs: 10252.9287. Time: 117.8432 us. Best GFLOPs: 10425.6244
2024-04-29 01:34:29 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #948: GFLOPs: 10194.6243. Time: 118.5172 us. Best GFLOPs: 10425.6244
2024-04-29 01:34:29 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #949: GFLOPs: 10197.0794. Time: 118.4886 us. Best GFLOPs: 10425.6244
2024-04-29 01:34:29 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #950: GFLOPs: 10144.9740. Time: 119.0972 us. Best GFLOPs: 10425.6244
2024-04-29 01:34:29 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #951: GFLOPs: 10099.1395. Time: 119.6377 us. Best GFLOPs: 10425.6244
2024-04-29 01:34:29 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #952: GFLOPs: 10179.6928. Time: 118.6910 us. Best GFLOPs: 10425.6244
2024-04-29 01:34:29 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #953: GFLOPs: 10207.6496. Time: 118.3659 us. Best GFLOPs: 10425.6244
2024-04-29 01:34:29 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #954: GFLOPs: 10226.2214. Time: 118.1510 us. Best GFLOPs: 10425.6244
2024-04-29 01:34:29 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #955: GFLOPs: 10089.0386. Time: 119.7575 us. Best GFLOPs: 10425.6244
2024-04-29 01:34:29 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #956: GFLOPs: 10230.0528. Time: 118.1067 us. Best GFLOPs: 10425.6244
2024-04-29 01:34:29 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #957: GFLOPs: 1546.4220. Time: 781.3120 us. Best GFLOPs: 10425.6244
2024-04-29 01:34:29 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #958: GFLOPs: 165.0914. Time: 7318.6013 us. Best GFLOPs: 10425.6244
2024-04-29 01:34:29 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #959: GFLOPs: 205.8519. Time: 5869.4543 us. Best GFLOPs: 10425.6244
2024-04-29 01:55:43 [INFO] [evolutionary_search.cc:713] Generating candidates......
2024-04-29 01:55:46 [INFO] [evolutionary_search.cc:715] Picked top 102 candidate(s) from database
2024-04-29 01:55:53 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x43d23b8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x3ad3338)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x72c6e28)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x4cb1ce8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x5905ad8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x7272d28)]: 405 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x3ab3638)]: 0 failure(s)
2024-04-29 01:55:59 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x43d23b8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x3ad3338)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x72c6e28)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x4cb1ce8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x5905ad8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x7272d28)]: 814 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x3ab3638)]: 0 failure(s)
2024-04-29 01:56:06 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x43d23b8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x3ad3338)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x72c6e28)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x4cb1ce8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x5905ad8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x7272d28)]: 1216 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x3ab3638)]: 0 failure(s)
2024-04-29 01:56:13 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x43d23b8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x3ad3338)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x72c6e28)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x4cb1ce8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x5905ad8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x7272d28)]: 1620 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x3ab3638)]: 0 failure(s)
2024-04-29 01:56:20 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x43d23b8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x3ad3338)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x72c6e28)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x4cb1ce8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x5905ad8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x7272d28)]: 2024 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x3ab3638)]: 0 failure(s)
2024-04-29 01:56:27 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x43d23b8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x3ad3338)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x72c6e28)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x4cb1ce8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x5905ad8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x7272d28)]: 2428 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x3ab3638)]: 0 failure(s)
2024-04-29 01:56:34 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x43d23b8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x3ad3338)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x72c6e28)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x4cb1ce8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x5905ad8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x7272d28)]: 2834 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x3ab3638)]: 0 failure(s)
2024-04-29 01:56:41 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x43d23b8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x3ad3338)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x72c6e28)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x4cb1ce8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x5905ad8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x7272d28)]: 3235 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x3ab3638)]: 0 failure(s)
2024-04-29 01:56:47 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x43d23b8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x3ad3338)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x72c6e28)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x4cb1ce8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x5905ad8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x7272d28)]: 3638 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x3ab3638)]: 0 failure(s)
2024-04-29 01:56:47 [INFO] [evolutionary_search.cc:723] Sampled 52 candidate(s)
2024-04-29 01:57:06 [INFO] [evolutionary_search.cc:621] Evolve iter #0 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x43d23b8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x3ad3338)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x72c6e28)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x4cb1ce8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x5905ad8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x7272d28)]: 88 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x3ab3638)]: 0 failure(s)
2024-04-29 01:57:29 [INFO] [evolutionary_search.cc:621] Evolve iter #1 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x43d23b8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x3ad3338)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x72c6e28)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x4cb1ce8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x5905ad8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x7272d28)]: 115 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x3ab3638)]: 0 failure(s)
2024-04-29 01:57:51 [INFO] [evolutionary_search.cc:621] Evolve iter #2 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x43d23b8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x3ad3338)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x72c6e28)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x4cb1ce8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x5905ad8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x7272d28)]: 97 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x3ab3638)]: 0 failure(s)
2024-04-29 01:58:13 [INFO] [evolutionary_search.cc:621] Evolve iter #3 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x43d23b8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x3ad3338)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x72c6e28)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x4cb1ce8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x5905ad8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x7272d28)]: 123 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x3ab3638)]: 0 failure(s)
2024-04-29 01:58:18 [INFO] [evolutionary_search.cc:649] Scores of the best 64 candidates:
[1 : 16]:	1.0176  1.0029  0.9997  0.9994  0.9924  0.9857  0.9844  0.9844  0.9826  0.9820  0.9819  0.9818  0.9818  0.9817  0.9816  0.9814
[17 : 32]:	0.9811  0.9809  0.9808  0.9808  0.9805  0.9805  0.9804  0.9802  0.9801  0.9799  0.9798  0.9796  0.9793  0.9792  0.9792  0.9792
[33 : 48]:	0.9790  0.9790  0.9786  0.9781  0.9781  0.9780  0.9779  0.9779  0.9773  0.9770  0.9769  0.9769  0.9767  0.9767  0.9766  0.9766
[49 : 64]:	0.9764  0.9764  0.9761  0.9758  0.9758  0.9756  0.9754  0.9754  0.9754  0.9752  0.9751  0.9751  0.9750  0.9745  0.9742  0.9741
2024-04-29 01:58:19 [INFO] [evolutionary_search.cc:727] Got 64 candidate(s) with evolutionary search
2024-04-29 01:58:19 [INFO] [evolutionary_search.cc:730] Sending 64 candidates(s) for measurement
2024-04-29 01:59:48 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #960: GFLOPs: 8943.4445. Time: 135.0976 us. Best GFLOPs: 10425.6244
2024-04-29 01:59:48 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #961: GFLOPs: 9455.9790. Time: 127.7750 us. Best GFLOPs: 10425.6244
2024-04-29 01:59:48 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #962: GFLOPs: 9053.7759. Time: 133.4513 us. Best GFLOPs: 10425.6244
2024-04-29 01:59:48 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #963: GFLOPs: 8952.5991. Time: 134.9595 us. Best GFLOPs: 10425.6244
2024-04-29 01:59:48 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #964: GFLOPs: 9926.5534. Time: 121.7178 us. Best GFLOPs: 10425.6244
2024-04-29 01:59:48 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #965: GFLOPs: 10239.5334. Time: 117.9974 us. Best GFLOPs: 10425.6244
2024-04-29 01:59:48 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #966: GFLOPs: 10108.5333. Time: 119.5265 us. Best GFLOPs: 10425.6244
2024-04-29 01:59:48 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #967: GFLOPs: 10130.8042. Time: 119.2638 us. Best GFLOPs: 10425.6244
2024-04-29 01:59:48 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #968: GFLOPs: 10103.2768. Time: 119.5887 us. Best GFLOPs: 10425.6244
2024-04-29 01:59:48 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #969: GFLOPs: 10274.4934. Time: 117.5959 us. Best GFLOPs: 10425.6244
2024-04-29 01:59:48 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #970: GFLOPs: 10081.7976. Time: 119.8435 us. Best GFLOPs: 10425.6244
2024-04-29 01:59:48 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #971: GFLOPs: 10174.1989. Time: 118.7551 us. Best GFLOPs: 10425.6244
2024-04-29 01:59:48 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #972: GFLOPs: 10123.4590. Time: 119.3503 us. Best GFLOPs: 10425.6244
2024-04-29 01:59:48 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #973: GFLOPs: 10097.9050. Time: 119.6524 us. Best GFLOPs: 10425.6244
2024-04-29 01:59:48 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #974: GFLOPs: 10082.8710. Time: 119.8308 us. Best GFLOPs: 10425.6244
2024-04-29 01:59:48 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #975: GFLOPs: 10195.6497. Time: 118.5053 us. Best GFLOPs: 10425.6244
2024-04-29 01:59:48 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #976: GFLOPs: 10215.6577. Time: 118.2732 us. Best GFLOPs: 10425.6244
2024-04-29 01:59:48 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #977: GFLOPs: 10129.9069. Time: 119.2744 us. Best GFLOPs: 10425.6244
2024-04-29 01:59:48 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #978: GFLOPs: 10219.1449. Time: 118.2328 us. Best GFLOPs: 10425.6244
2024-04-29 01:59:48 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #979: GFLOPs: 10124.6423. Time: 119.3364 us. Best GFLOPs: 10425.6244
2024-04-29 01:59:48 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #980: GFLOPs: 10215.8579. Time: 118.2708 us. Best GFLOPs: 10425.6244
2024-04-29 01:59:48 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #981: GFLOPs: 10215.1548. Time: 118.2790 us. Best GFLOPs: 10425.6244
2024-04-29 01:59:48 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #982: GFLOPs: 10205.0941. Time: 118.3956 us. Best GFLOPs: 10425.6244
2024-04-29 01:59:48 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #983: GFLOPs: 10163.6210. Time: 118.8787 us. Best GFLOPs: 10425.6244
2024-04-29 01:59:48 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #984: GFLOPs: 10087.7427. Time: 119.7729 us. Best GFLOPs: 10425.6244
2024-04-29 01:59:48 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #985: GFLOPs: 10198.3085. Time: 118.4744 us. Best GFLOPs: 10425.6244
2024-04-29 01:59:48 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #986: GFLOPs: 10122.6882. Time: 119.3594 us. Best GFLOPs: 10425.6244
2024-04-29 01:59:48 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #987: GFLOPs: 10109.0624. Time: 119.5203 us. Best GFLOPs: 10425.6244
2024-04-29 01:59:48 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #988: GFLOPs: 10082.3535. Time: 119.8369 us. Best GFLOPs: 10425.6244
2024-04-29 01:59:48 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #989: GFLOPs: 10169.5072. Time: 118.8099 us. Best GFLOPs: 10425.6244
2024-04-29 01:59:48 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #990: GFLOPs: 10103.4198. Time: 119.5870 us. Best GFLOPs: 10425.6244
2024-04-29 01:59:48 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #991: GFLOPs: 10079.5287. Time: 119.8705 us. Best GFLOPs: 10425.6244
2024-04-29 01:59:48 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #992: GFLOPs: 10206.0003. Time: 118.3851 us. Best GFLOPs: 10425.6244
2024-04-29 01:59:48 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #993: GFLOPs: 10143.6451. Time: 119.1128 us. Best GFLOPs: 10425.6244
2024-04-29 01:59:48 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #994: GFLOPs: 10025.3565. Time: 120.5182 us. Best GFLOPs: 10425.6244
2024-04-29 01:59:48 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #995: GFLOPs: 10092.9114. Time: 119.7116 us. Best GFLOPs: 10425.6244
2024-04-29 01:59:48 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #996: GFLOPs: 10079.9891. Time: 119.8650 us. Best GFLOPs: 10425.6244
2024-04-29 01:59:48 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #997: GFLOPs: 10154.7709. Time: 118.9823 us. Best GFLOPs: 10425.6244
2024-04-29 01:59:48 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #998: GFLOPs: 9636.5602. Time: 125.3806 us. Best GFLOPs: 10425.6244
2024-04-29 01:59:48 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #999: GFLOPs: 10230.8564. Time: 118.0975 us. Best GFLOPs: 10425.6244
2024-04-29 01:59:48 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #1000: GFLOPs: 10158.7466. Time: 118.9357 us. Best GFLOPs: 10425.6244
2024-04-29 01:59:48 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #1001: GFLOPs: 9915.7788. Time: 121.8500 us. Best GFLOPs: 10425.6244
2024-04-29 01:59:48 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #1002: GFLOPs: 10137.1862. Time: 119.1887 us. Best GFLOPs: 10425.6244
2024-04-29 01:59:48 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #1003: GFLOPs: 10133.9836. Time: 119.2264 us. Best GFLOPs: 10425.6244
2024-04-29 01:59:48 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #1004: GFLOPs: 10053.3524. Time: 120.1826 us. Best GFLOPs: 10425.6244
2024-04-29 01:59:48 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #1005: GFLOPs: 10138.6615. Time: 119.1714 us. Best GFLOPs: 10425.6244
2024-04-29 01:59:48 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #1006: GFLOPs: 10058.3646. Time: 120.1227 us. Best GFLOPs: 10425.6244
2024-04-29 01:59:48 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #1007: GFLOPs: 10179.0203. Time: 118.6989 us. Best GFLOPs: 10425.6244
2024-04-29 01:59:48 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #1008: GFLOPs: 9969.6479. Time: 121.1916 us. Best GFLOPs: 10425.6244
2024-04-29 01:59:48 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #1009: GFLOPs: 10077.4350. Time: 119.8954 us. Best GFLOPs: 10425.6244
2024-04-29 01:59:48 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #1010: GFLOPs: 10062.5950. Time: 120.0722 us. Best GFLOPs: 10425.6244
2024-04-29 01:59:48 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #1011: GFLOPs: 10109.6286. Time: 119.5136 us. Best GFLOPs: 10425.6244
2024-04-29 01:59:48 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #1012: GFLOPs: 10106.2316. Time: 119.5538 us. Best GFLOPs: 10425.6244
2024-04-29 01:59:48 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #1013: GFLOPs: 10110.5123. Time: 119.5032 us. Best GFLOPs: 10425.6244
2024-04-29 01:59:48 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #1014: GFLOPs: 9585.3596. Time: 126.0504 us. Best GFLOPs: 10425.6244
2024-04-29 01:59:48 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #1015: GFLOPs: 10158.6328. Time: 118.9371 us. Best GFLOPs: 10425.6244
2024-04-29 01:59:48 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #1016: GFLOPs: 10109.1615. Time: 119.5191 us. Best GFLOPs: 10425.6244
2024-04-29 01:59:48 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #1017: GFLOPs: 10093.2436. Time: 119.7076 us. Best GFLOPs: 10425.6244
2024-04-29 01:59:48 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #1018: GFLOPs: 10207.3002. Time: 118.3700 us. Best GFLOPs: 10425.6244
2024-04-29 01:59:48 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #1019: GFLOPs: 10136.3507. Time: 119.1985 us. Best GFLOPs: 10425.6244
2024-04-29 01:59:48 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #1020: GFLOPs: 6688.2814. Time: 180.6500 us. Best GFLOPs: 10425.6244
2024-04-29 01:59:48 [INFO] [task_scheduler.cc:121] [Task #5: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #1021: Error in building:
LocalBuilder: Timeout, killed after 30.0 seconds
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(256), T.int64(56), T.int64(56)), "float32"), p1: T.Buffer((T.int64(6), T.int64(6), T.int64(256), T.int64(256)), "float32"), p2: T.Buffer((T.int64(1), T.int64(256), T.int64(1), T.int64(1)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(256), T.int64(56), T.int64(56)), "float32")):
        T.func_attr({"layout_free_buffers": [1], "tir.noalias": T.bool(True)})
        # with T.block("root"):
        input_tile_local = T.alloc_buffer((T.int64(256), T.int64(196), T.int64(6), T.int64(6)), scope="local")
        data_pack = T.alloc_buffer((T.int64(6), T.int64(6), T.int64(256), T.int64(196)))
        bgemm = T.alloc_buffer((T.int64(6), T.int64(6), T.int64(256), T.int64(196)))
        inverse_local = T.alloc_buffer((T.int64(256), T.int64(196), T.int64(4), T.int64(4)), scope="local")
        data_pack_local = T.alloc_buffer((T.int64(6), T.int64(6), T.int64(256), T.int64(196)), scope="local")
        bgemm_local = T.alloc_buffer((T.int64(6), T.int64(6), T.int64(256), T.int64(196)), scope="local")
        data_pack_shared = T.alloc_buffer((T.int64(6), T.int64(6), T.int64(256), T.int64(196)), scope="shared")
        p1_shared = T.alloc_buffer((T.int64(6), T.int64(6), T.int64(256), T.int64(256)), scope="shared")
        for ci_p_fused_0 in T.thread_binding(T.int64(196), thread="blockIdx.x", annotations={"pragma_auto_unroll_max_step": 1024, "pragma_unroll_explicit": 1}):
            for ci_p_fused_1 in T.thread_binding(T.int64(256), thread="threadIdx.x"):
                for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(1), T.int64(6), T.int64(6)):
                    with T.block("input_tile"):
                        v_ci = T.axis.spatial(T.int64(256), (ci_p_fused_0 * T.int64(256) + ci_p_fused_1) // T.int64(196) + ax0)
                        v_p = T.axis.spatial(T.int64(196), (ci_p_fused_0 * T.int64(60) + ci_p_fused_1) % T.int64(196) + ax1)
                        v_eps, v_nu = T.axis.remap("SS", [ax2, ax3])
                        T.reads(p0[v_p // T.int64(196), v_ci, v_p % T.int64(196) // T.int64(14) * T.int64(4) + v_eps - T.int64(1), v_p % T.int64(14) * T.int64(4) + v_nu - T.int64(1)])
                        T.writes(input_tile_local[v_ci, v_p, v_eps, v_nu])
                        T.block_attr({"schedule_rule": "None"})
                        input_tile_local[v_ci, v_p, v_eps, v_nu] = T.if_then_else(T.int64(1) <= v_p % T.int64(196) // T.int64(14) * T.int64(4) + v_eps and v_p % T.int64(196) // T.int64(14) * T.int64(4) + v_eps < T.int64(57) and T.int64(1) <= v_p % T.int64(14) * T.int64(4) + v_nu and v_p % T.int64(14) * T.int64(4) + v_nu < T.int64(57), p0[v_p // T.int64(196), v_ci, v_p % T.int64(196) // T.int64(14) * T.int64(4) + v_eps - T.int64(1), v_p % T.int64(14) * T.int64(4) + v_nu - T.int64(1)], T.float32(0))
                for eps in T.unroll(T.int64(6)):
                    for nu in T.unroll(T.int64(6)):
                        with T.block("data_pack_init"):
                            v_eps, v_nu = T.axis.remap("SS", [eps, nu])
                            v_ci = T.axis.spatial(T.int64(256), (ci_p_fused_0 * T.int64(256) + ci_p_fused_1) // T.int64(196))
                            v_p = T.axis.spatial(T.int64(196), (ci_p_fused_0 * T.int64(256) + ci_p_fused_1) % T.int64(196))
                            T.reads()
                            T.writes(data_pack_local[v_eps, v_nu, v_ci, v_p])
                            T.block_attr({"schedule_rule": "conv2d_nchw_winograd_data_pack"})
                            data_pack_local[v_eps, v_nu, v_ci, v_p] = T.float32(0)
                        for r_a in T.unroll(T.int64(6)):
                            for r_b in T.unroll(T.int64(6)):
                                with T.block("data_pack_update"):
                                    v_eps, v_nu = T.axis.remap("SS", [eps, nu])
                                    v_ci = T.axis.spatial(T.int64(256), (ci_p_fused_0 * T.int64(256) + ci_p_fused_1) // T.int64(196))
                                    v_p = T.axis.spatial(T.int64(196), (ci_p_fused_0 * T.int64(256) + ci_p_fused_1) % T.int64(196))
                                    v_r_a, v_r_b = T.axis.remap("RR", [r_a, r_b])
                                    T.reads(data_pack_local[v_eps, v_nu, v_ci, v_p], input_tile_local[v_ci, v_p, v_r_a, v_r_b])
                                    T.writes(data_pack_local[v_eps, v_nu, v_ci, v_p])
                                    T.block_attr({"schedule_rule": "conv2d_nchw_winograd_data_pack"})
                                    data_pack_local[v_eps, v_nu, v_ci, v_p] = data_pack_local[v_eps, v_nu, v_ci, v_p] + input_tile_local[v_ci, v_p, v_r_a, v_r_b] * T.Select(v_r_a % T.int64(6) == T.int64(5) and v_eps % T.int64(6) == T.int64(5), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(5) and v_eps % T.int64(6) == T.int64(4), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(5) and v_eps % T.int64(6) == T.int64(3), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(5) and v_eps % T.int64(6) == T.int64(2), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(5) and v_eps % T.int64(6) == T.int64(1), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(5) and v_eps % T.int64(6) == T.int64(0), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(4) and v_eps % T.int64(6) == T.int64(5), T.float32(1.5), T.Select(v_r_a % T.int64(6) == T.int64(4) and v_eps % T.int64(6) == T.int64(4), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(4) and v_eps % T.int64(6) == T.int64(3), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(4) and v_eps % T.int64(6) == T.int64(2), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(4) and v_eps % T.int64(6) == T.int64(1), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(4) and v_eps % T.int64(6) == T.int64(0), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(3) and v_eps % T.int64(6) == T.int64(5), T.float32(-2), T.Select(v_r_a % T.int64(6) == T.int64(3) and v_eps % T.int64(6) == T.int64(4), T.float32(-0.5), T.Select(v_r_a % T.int64(6) == T.int64(3) and v_eps % T.int64(6) == T.int64(3), T.float32(2), T.Select(v_r_a % T.int64(6) == T.int64(3) and v_eps % T.int64(6) == T.int64(2), T.float32(2.5), T.Select(v_r_a % T.int64(6) == T.int64(3) and v_eps % T.int64(6) == T.int64(1), T.float32(0.5), T.Select(v_r_a % T.int64(6) == T.int64(3) and v_eps % T.int64(6) == T.int64(0), T.float32(1.5), T.Select(v_r_a % T.int64(6) == T.int64(2) and v_eps % T.int64(6) == T.int64(5), T.float32(-1.5), T.Select(v_r_a % T.int64(6) == T.int64(2) and v_eps % T.int64(6) == T.int64(4), T.float32(-1), T.Select(v_r_a % T.int64(6) == T.int64(2) and v_eps % T.int64(6) == T.int64(3), T.float32(-1), T.Select(v_r_a % T.int64(6) == T.int64(2) and v_eps % T.int64(6) == T.int64(2), T.float32(0.5), T.Select(v_r_a % T.int64(6) == T.int64(2) and v_eps % T.int64(6) == T.int64(1), T.float32(-2.5), T.Select(v_r_a % T.int64(6) == T.int64(2) and v_eps % T.int64(6) == T.int64(0), T.float32(-2), T.Select(v_r_a % T.int64(6) == T.int64(1) and v_eps % T.int64(6) == T.int64(5), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(1) and v_eps % T.int64(6) == T.int64(4), T.float32(0.5), T.Select(v_r_a % T.int64(6) == T.int64(1) and v_eps % T.int64(6) == T.int64(3), T.float32(-2), T.Select(v_r_a % T.int64(6) == T.int64(1) and v_eps % T.int64(6) == T.int64(2), T.float32(-1), T.Select(v_r_a % T.int64(6) == T.int64(1) and v_eps % T.int64(6) == T.int64(1), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(1) and v_eps % T.int64(6) == T.int64(0), T.float32(-1.5), T.Select(v_r_a % T.int64(6) == T.int64(0) and v_eps % T.int64(6) == T.int64(5), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(0) and v_eps % T.int64(6) == T.int64(4), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(0) and v_eps % T.int64(6) == T.int64(3), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(0) and v_eps % T.int64(6) == T.int64(2), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(0) and v_eps % T.int64(6) == T.int64(1), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(0) and v_eps % T.int64(6) == T.int64(0), T.float32(1), T.float32(0))))))))))))))))))))))))))))))))))))) * T.Select(v_r_b % T.int64(6) == T.int64(5) and v_nu % T.int64(6) == T.int64(5), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(5) and v_nu % T.int64(6) == T.int64(4), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(5) and v_nu % T.int64(6) == T.int64(3), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(5) and v_nu % T.int64(6) == T.int64(2), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(5) and v_nu % T.int64(6) == T.int64(1), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(5) and v_nu % T.int64(6) == T.int64(0), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(4) and v_nu % T.int64(6) == T.int64(5), T.float32(1.5), T.Select(v_r_b % T.int64(6) == T.int64(4) and v_nu % T.int64(6) == T.int64(4), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(4) and v_nu % T.int64(6) == T.int64(3), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(4) and v_nu % T.int64(6) == T.int64(2), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(4) and v_nu % T.int64(6) == T.int64(1), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(4) and v_nu % T.int64(6) == T.int64(0), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(3) and v_nu % T.int64(6) == T.int64(5), T.float32(-2), T.Select(v_r_b % T.int64(6) == T.int64(3) and v_nu % T.int64(6) == T.int64(4), T.float32(-0.5), T.Select(v_r_b % T.int64(6) == T.int64(3) and v_nu % T.int64(6) == T.int64(3), T.float32(2), T.Select(v_r_b % T.int64(6) == T.int64(3) and v_nu % T.int64(6) == T.int64(2), T.float32(2.5), T.Select(v_r_b % T.int64(6) == T.int64(3) and v_nu % T.int64(6) == T.int64(1), T.float32(0.5), T.Select(v_r_b % T.int64(6) == T.int64(3) and v_nu % T.int64(6) == T.int64(0), T.float32(1.5), T.Select(v_r_b % T.int64(6) == T.int64(2) and v_nu % T.int64(6) == T.int64(5), T.float32(-1.5), T.Select(v_r_b % T.int64(6) == T.int64(2) and v_nu % T.int64(6) == T.int64(4), T.float32(-1), T.Select(v_r_b % T.int64(6) == T.int64(2) and v_nu % T.int64(6) == T.int64(3), T.float32(-1), T.Select(v_r_b % T.int64(6) == T.int64(2) and v_nu % T.int64(6) == T.int64(2), T.float32(0.5), T.Select(v_r_b % T.int64(6) == T.int64(2) and v_nu % T.int64(6) == T.int64(1), T.float32(-2.5), T.Select(v_r_b % T.int64(6) == T.int64(2) and v_nu % T.int64(6) == T.int64(0), T.float32(-2), T.Select(v_r_b % T.int64(6) == T.int64(1) and v_nu % T.int64(6) == T.int64(5), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(1) and v_nu % T.int64(6) == T.int64(4), T.float32(0.5), T.Select(v_r_b % T.int64(6) == T.int64(1) and v_nu % T.int64(6) == T.int64(3), T.float32(-2), T.Select(v_r_b % T.int64(6) == T.int64(1) and v_nu % T.int64(6) == T.int64(2), T.float32(-1), T.Select(v_r_b % T.int64(6) == T.int64(1) and v_nu % T.int64(6) == T.int64(1), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(1) and v_nu % T.int64(6) == T.int64(0), T.float32(-1.5), T.Select(v_r_b % T.int64(6) == T.int64(0) and v_nu % T.int64(6) == T.int64(5), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(0) and v_nu % T.int64(6) == T.int64(4), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(0) and v_nu % T.int64(6) == T.int64(3), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(0) and v_nu % T.int64(6) == T.int64(2), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(0) and v_nu % T.int64(6) == T.int64(1), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(0) and v_nu % T.int64(6) == T.int64(0), T.float32(1), T.float32(0)))))))))))))))))))))))))))))))))))))
                for ax0, ax1, ax2, ax3 in T.grid(T.int64(6), T.int64(6), T.int64(1), T.int64(1)):
                    with T.block("data_pack_local"):
                        v0, v1 = T.axis.remap("SS", [ax0, ax1])
                        v2 = T.axis.spatial(T.int64(256), (ci_p_fused_0 * T.int64(256) + ci_p_fused_1) // T.int64(196) + ax2)
                        v3 = T.axis.spatial(T.int64(196), (ci_p_fused_0 * T.int64(60) + ci_p_fused_1) % T.int64(196) + ax3)
                        T.reads(data_pack_local[v0, v1, v2, v3])
                        T.writes(data_pack[v0, v1, v2, v3])
                        data_pack[v0, v1, v2, v3] = data_pack_local[v0, v1, v2, v3]
        for eps_0_nu_0_co_0_p_0_fused in T.thread_binding(T.int64(6), thread="blockIdx.x", annotations={"pragma_auto_unroll_max_step": 1024, "pragma_unroll_explicit": 1}):
            for eps_1_nu_1_co_1_p_1_fused in T.thread_binding(T.int64(6), thread="vthread.x"):
                for eps_2_nu_2_co_2_p_2_fused in T.thread_binding(T.int64(56), thread="threadIdx.x"):
                    for eps_3_init, nu_3_init, co_3_init, p_3_init, eps_4_init, nu_4_init, co_4_init, p_4_init in T.grid(T.int64(1), T.int64(1), T.int64(8), T.int64(1), T.int64(2), T.int64(1), T.int64(4), T.int64(14)):
                        with T.block("bgemm_init"):
                            v_eps = T.axis.spatial(T.int64(6), eps_0_nu_0_co_0_p_0_fused // T.int64(2) * T.int64(2) + eps_3_init * T.int64(2) + eps_4_init)
                            v_nu = T.axis.spatial(T.int64(6), eps_1_nu_1_co_1_p_1_fused // T.int64(2) * T.int64(2) + eps_2_nu_2_co_2_p_2_fused // T.int64(28) + nu_3_init + nu_4_init)
                            v_co = T.axis.spatial(T.int64(256), eps_0_nu_0_co_0_p_0_fused % T.int64(2) * T.int64(128) + eps_2_nu_2_co_2_p_2_fused % T.int64(28) // T.int64(7) * T.int64(32) + co_3_init * T.int64(4) + co_4_init)
                            v_p = T.axis.spatial(T.int64(196), eps_1_nu_1_co_1_p_1_fused % T.int64(2) * T.int64(98) + eps_2_nu_2_co_2_p_2_fused % T.int64(7) * T.int64(14) + p_3_init * T.int64(14) + p_4_init)
                            T.reads()
                            T.writes(bgemm_local[v_eps, v_nu, v_co, v_p])
                            T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 32, "meta_schedule.tiling_structure": "SSSRRSRS"})
                            bgemm_local[v_eps, v_nu, v_co, v_p] = T.float32(0)
                    for ci_0 in range(T.int64(128)):
                        for ax0_ax1_ax2_ax3_fused_0 in range(T.int64(84)):
                            for ax0_ax1_ax2_ax3_fused_1 in T.thread_binding(T.int64(56), thread="threadIdx.x"):
                                with T.block("data_pack_shared"):
                                    v0 = T.axis.spatial(T.int64(6), eps_0_nu_0_co_0_p_0_fused // T.int64(2) * T.int64(2) + (ax0_ax1_ax2_ax3_fused_0 * T.int64(56) + ax0_ax1_ax2_ax3_fused_1) // T.int64(2352))
                                    v1 = T.axis.spatial(T.int64(6), (ax0_ax1_ax2_ax3_fused_0 * T.int64(56) + ax0_ax1_ax2_ax3_fused_1) % T.int64(2352) // T.int64(392))
                                    v2 = T.axis.spatial(T.int64(256), ci_0 * T.int64(2) + (ax0_ax1_ax2_ax3_fused_0 * T.int64(56) + ax0_ax1_ax2_ax3_fused_1) % T.int64(392) // T.int64(196))
                                    v3 = T.axis.spatial(T.int64(196), (ax0_ax1_ax2_ax3_fused_0 * T.int64(56) + ax0_ax1_ax2_ax3_fused_1) % T.int64(196))
                                    T.reads(data_pack[v0, v1, v2, v3])
                                    T.writes(data_pack_shared[v0, v1, v2, v3])
                                    data_pack_shared[v0, v1, v2, v3] = data_pack[v0, v1, v2, v3]
                        for ax0_ax1_ax2_ax3_fused_0 in range(T.int64(28)):
                            for ax0_ax1_ax2_ax3_fused_1 in T.thread_binding(T.int64(56), thread="threadIdx.x"):
                                for ax0_ax1_ax2_ax3_fused_2 in T.vectorized(T.int64(2)):
                                    with T.block("p1_shared"):
                                        v0 = T.axis.spatial(T.int64(6), eps_0_nu_0_co_0_p_0_fused // T.int64(2) * T.int64(2) + (ax0_ax1_ax2_ax3_fused_0 * T.int64(112) + ax0_ax1_ax2_ax3_fused_1 * T.int64(2) + ax0_ax1_ax2_ax3_fused_2) // T.int64(1536))
                                        v1 = T.axis.spatial(T.int64(6), (ax0_ax1_ax2_ax3_fused_0 * T.int64(112) + ax0_ax1_ax2_ax3_fused_1 * T.int64(2) + ax0_ax1_ax2_ax3_fused_2) % T.int64(1536) // T.int64(256))
                                        v2 = T.axis.spatial(T.int64(256), ci_0 * T.int64(2) + (ax0_ax1_ax2_ax3_fused_0 * T.int64(112) + ax0_ax1_ax2_ax3_fused_1 * T.int64(2) + ax0_ax1_ax2_ax3_fused_2) % T.int64(256) // T.int64(128))
                                        v3 = T.axis.spatial(T.int64(256), eps_0_nu_0_co_0_p_0_fused % T.int64(2) * T.int64(128) + (ax0_ax1_ax2_ax3_fused_0 * T.int64(112) + ax0_ax1_ax2_ax3_fused_1 * T.int64(2) + ax0_ax1_ax2_ax3_fused_2) % T.int64(128))
                                        T.where((ax0_ax1_ax2_ax3_fused_0 * T.int64(56) + ax0_ax1_ax2_ax3_fused_1) * T.int64(2) + ax0_ax1_ax2_ax3_fused_2 < T.int64(3072))
                                        T.reads(p1[v0, v1, v2, v3])
                                        T.writes(p1_shared[v0, v1, v2, v3])
                                        p1_shared[v0, v1, v2, v3] = p1[v0, v1, v2, v3]
                        for ci_1, eps_3, nu_3, co_3, p_3, ci_2, eps_4, nu_4, co_4, p_4 in T.grid(T.int64(2), T.int64(1), T.int64(1), T.int64(8), T.int64(1), T.int64(1), T.int64(2), T.int64(1), T.int64(4), T.int64(14)):
                            with T.block("bgemm_update"):
                                v_eps = T.axis.spatial(T.int64(6), eps_0_nu_0_co_0_p_0_fused // T.int64(2) * T.int64(2) + eps_3 * T.int64(2) + eps_4)
                                v_nu = T.axis.spatial(T.int64(6), eps_1_nu_1_co_1_p_1_fused // T.int64(2) * T.int64(2) + eps_2_nu_2_co_2_p_2_fused // T.int64(28) + nu_3 + nu_4)
                                v_co = T.axis.spatial(T.int64(256), eps_0_nu_0_co_0_p_0_fused % T.int64(2) * T.int64(128) + eps_2_nu_2_co_2_p_2_fused % T.int64(28) // T.int64(7) * T.int64(32) + co_3 * T.int64(4) + co_4)
                                v_p = T.axis.spatial(T.int64(196), eps_1_nu_1_co_1_p_1_fused % T.int64(2) * T.int64(98) + eps_2_nu_2_co_2_p_2_fused % T.int64(7) * T.int64(14) + p_3 * T.int64(14) + p_4)
                                v_ci = T.axis.reduce(T.int64(256), ci_0 * T.int64(2) + ci_1 + ci_2)
                                T.reads(bgemm_local[v_eps, v_nu, v_co, v_p], data_pack_shared[v_eps, v_nu, v_ci, v_p], p1_shared[v_eps, v_nu, v_ci, v_co])
                                T.writes(bgemm_local[v_eps, v_nu, v_co, v_p])
                                T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 32, "meta_schedule.tiling_structure": "SSSRRSRS"})
                                bgemm_local[v_eps, v_nu, v_co, v_p] = bgemm_local[v_eps, v_nu, v_co, v_p] + data_pack_shared[v_eps, v_nu, v_ci, v_p] * p1_shared[v_eps, v_nu, v_ci, v_co]
                    for ax0, ax1, ax2, ax3 in T.grid(T.int64(2), T.int64(1), T.int64(32), T.int64(14)):
                        with T.block("bgemm_local"):
                            v0 = T.axis.spatial(T.int64(6), eps_0_nu_0_co_0_p_0_fused // T.int64(2) * T.int64(2) + ax0)
                            v1 = T.axis.spatial(T.int64(6), eps_1_nu_1_co_1_p_1_fused // T.int64(2) * T.int64(2) + eps_2_nu_2_co_2_p_2_fused // T.int64(28) + ax1)
                            v2 = T.axis.spatial(T.int64(256), eps_0_nu_0_co_0_p_0_fused % T.int64(2) * T.int64(128) + eps_2_nu_2_co_2_p_2_fused % T.int64(28) // T.int64(7) * T.int64(32) + ax2)
                            v3 = T.axis.spatial(T.int64(196), eps_1_nu_1_co_1_p_1_fused % T.int64(2) * T.int64(98) + eps_2_nu_2_co_2_p_2_fused % T.int64(7) * T.int64(14) + ax3)
                            T.reads(bgemm_local[v0, v1, v2, v3])
                            T.writes(bgemm[v0, v1, v2, v3])
                            bgemm[v0, v1, v2, v3] = bgemm_local[v0, v1, v2, v3]
        for n_co_h_0_w_0_fused_0 in T.thread_binding(T.int64(392), thread="blockIdx.x", annotations={"pragma_auto_unroll_max_step": 1024, "pragma_unroll_explicit": 1}):
            for n_co_h_0_w_0_fused_1 in T.thread_binding(T.int64(128), thread="threadIdx.x"):
                for ax0, ax1 in T.grid(T.int64(1), T.int64(1)):
                    for ax2 in T.unroll(T.int64(4)):
                        for ax3 in T.unroll(T.int64(4)):
                            with T.block("inverse_init"):
                                v_co = T.axis.spatial(T.int64(256), (n_co_h_0_w_0_fused_0 * T.int64(128) + n_co_h_0_w_0_fused_1) // T.int64(196) + ax0)
                                v_p = T.axis.spatial(T.int64(196), (n_co_h_0_w_0_fused_0 * T.int64(128) + n_co_h_0_w_0_fused_1) % T.int64(196) + ax1)
                                v_vh, v_vw = T.axis.remap("SS", [ax2, ax3])
                                T.reads()
                                T.writes(inverse_local[v_co, v_p, v_vh, v_vw])
                                T.block_attr({"schedule_rule": "conv2d_nchw_winograd_inverse"})
                                inverse_local[v_co, v_p, v_vh, v_vw] = T.float32(0)
                            for ax4 in T.unroll(T.int64(6)):
                                for ax5 in T.unroll(T.int64(6)):
                                    with T.block("inverse_update"):
                                        v_co = T.axis.spatial(T.int64(256), (n_co_h_0_w_0_fused_0 * T.int64(128) + n_co_h_0_w_0_fused_1) // T.int64(196) + ax0)
                                        v_p = T.axis.spatial(T.int64(196), (n_co_h_0_w_0_fused_0 * T.int64(128) + n_co_h_0_w_0_fused_1) % T.int64(196) + ax1)
                                        v_vh, v_vw, v_r_a, v_r_b = T.axis.remap("SSRR", [ax2, ax3, ax4, ax5])
                                        T.reads(inverse_local[v_co, v_p, v_vh, v_vw], bgemm[v_r_a, v_r_b, v_co, v_p])
                                        T.writes(inverse_local[v_co, v_p, v_vh, v_vw])
                                        T.block_attr({"schedule_rule": "conv2d_nchw_winograd_inverse"})
                                        inverse_local[v_co, v_p, v_vh, v_vw] = inverse_local[v_co, v_p, v_vh, v_vw] + bgemm[v_r_a, v_r_b, v_co, v_p] * T.Select(v_r_a % T.int64(6) == T.int64(5) and v_vh % T.int64(4) == T.int64(3), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(5) and v_vh % T.int64(4) == T.int64(2), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(5) and v_vh % T.int64(4) == T.int64(1), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(5) and v_vh % T.int64(4) == T.int64(0), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(4) and v_vh % T.int64(4) == T.int64(3), T.float32(-8), T.Select(v_r_a % T.int64(6) == T.int64(4) and v_vh % T.int64(4) == T.int64(2), T.float32(4), T.Select(v_r_a % T.int64(6) == T.int64(4) and v_vh % T.int64(4) == T.int64(1), T.float32(-2), T.Select(v_r_a % T.int64(6) == T.int64(4) and v_vh % T.int64(4) == T.int64(0), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(3) and v_vh % T.int64(4) == T.int64(3), T.float32(0.125), T.Select(v_r_a % T.int64(6) == T.int64(3) and v_vh % T.int64(4) == T.int64(2), T.float32(0.25), T.Select(v_r_a % T.int64(6) == T.int64(3) and v_vh % T.int64(4) == T.int64(1), T.float32(0.5), T.Select(v_r_a % T.int64(6) == T.int64(3) and v_vh % T.int64(4) == T.int64(0), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(2) and v_vh % T.int64(4) == T.int64(3), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(2) and v_vh % T.int64(4) == T.int64(2), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(2) and v_vh % T.int64(4) == T.int64(1), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(2) and v_vh % T.int64(4) == T.int64(0), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(1) and v_vh % T.int64(4) == T.int64(3), T.float32(-1), T.Select(v_r_a % T.int64(6) == T.int64(1) and v_vh % T.int64(4) == T.int64(2), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(1) and v_vh % T.int64(4) == T.int64(1), T.float32(-1), T.Select(v_r_a % T.int64(6) == T.int64(1) and v_vh % T.int64(4) == T.int64(0), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(0) and v_vh % T.int64(4) == T.int64(3), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(0) and v_vh % T.int64(4) == T.int64(2), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(0) and v_vh % T.int64(4) == T.int64(1), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(0) and v_vh % T.int64(4) == T.int64(0), T.float32(1), T.float32(0))))))))))))))))))))))))) * T.Select(v_r_b % T.int64(6) == T.int64(5) and v_vw % T.int64(4) == T.int64(3), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(5) and v_vw % T.int64(4) == T.int64(2), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(5) and v_vw % T.int64(4) == T.int64(1), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(5) and v_vw % T.int64(4) == T.int64(0), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(4) and v_vw % T.int64(4) == T.int64(3), T.float32(-8), T.Select(v_r_b % T.int64(6) == T.int64(4) and v_vw % T.int64(4) == T.int64(2), T.float32(4), T.Select(v_r_b % T.int64(6) == T.int64(4) and v_vw % T.int64(4) == T.int64(1), T.float32(-2), T.Select(v_r_b % T.int64(6) == T.int64(4) and v_vw % T.int64(4) == T.int64(0), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(3) and v_vw % T.int64(4) == T.int64(3), T.float32(0.125), T.Select(v_r_b % T.int64(6) == T.int64(3) and v_vw % T.int64(4) == T.int64(2), T.float32(0.25), T.Select(v_r_b % T.int64(6) == T.int64(3) and v_vw % T.int64(4) == T.int64(1), T.float32(0.5), T.Select(v_r_b % T.int64(6) == T.int64(3) and v_vw % T.int64(4) == T.int64(0), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(2) and v_vw % T.int64(4) == T.int64(3), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(2) and v_vw % T.int64(4) == T.int64(2), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(2) and v_vw % T.int64(4) == T.int64(1), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(2) and v_vw % T.int64(4) == T.int64(0), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(1) and v_vw % T.int64(4) == T.int64(3), T.float32(-1), T.Select(v_r_b % T.int64(6) == T.int64(1) and v_vw % T.int64(4) == T.int64(2), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(1) and v_vw % T.int64(4) == T.int64(1), T.float32(-1), T.Select(v_r_b % T.int64(6) == T.int64(1) and v_vw % T.int64(4) == T.int64(0), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(0) and v_vw % T.int64(4) == T.int64(3), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(0) and v_vw % T.int64(4) == T.int64(2), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(0) and v_vw % T.int64(4) == T.int64(1), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(0) and v_vw % T.int64(4) == T.int64(0), T.float32(1), T.float32(0)))))))))))))))))))))))))
                for h_1, w_1 in T.grid(T.int64(4), T.int64(4)):
                    with T.block("conv2d_winograd"):
                        v_n = T.axis.spatial(T.int64(1), T.int64(0))
                        v_co = T.axis.spatial(T.int64(256), (n_co_h_0_w_0_fused_0 * T.int64(128) + n_co_h_0_w_0_fused_1) // T.int64(196))
                        v_h = T.axis.spatial(T.int64(56), (n_co_h_0_w_0_fused_0 * T.int64(128) + n_co_h_0_w_0_fused_1) % T.int64(196) // T.int64(14) * T.int64(4) + h_1)
                        v_w = T.axis.spatial(T.int64(56), (n_co_h_0_w_0_fused_0 * T.int64(128) + n_co_h_0_w_0_fused_1) % T.int64(14) * T.int64(4) + w_1)
                        T.reads(inverse_local[v_co, v_n * T.int64(196) + v_h // T.int64(4) * T.int64(14) + v_w // T.int64(4), v_h % T.int64(4), v_w % T.int64(4)], p2[v_n, v_co, T.int64(0), T.int64(0)])
                        T.writes(T_relu[v_n, v_co, v_h, v_w])
                        T_relu[v_n, v_co, v_h, v_w] = T.max(inverse_local[v_co, v_n * T.int64(196) + v_h // T.int64(4) * T.int64(14) + v_w // T.int64(4), v_h % T.int64(4), v_w % T.int64(4)] + p2[v_n, v_co, T.int64(0), T.int64(0)], T.float32(0))
b0 = sch.get_block(name="data_pack", func_name="main")
b1 = sch.get_block(name="bgemm", func_name="main")
b2 = sch.get_block(name="inverse", func_name="main")
b3 = sch.get_block(name="conv2d_winograd", func_name="main")
b4 = sch.get_block(name="T_add", func_name="main")
b5 = sch.get_block(name="T_relu", func_name="main")
b6 = sch.get_block(name="root", func_name="main")
b7, b8 = sch.get_producers(block=b2)
sch.compute_inline(block=b8)
b9, = sch.get_consumers(block=b2)
l10, l11, l12, l13 = sch.get_loops(block=b9)
l14, l15 = sch.split(loop=l12, factors=[None, 4], preserve_unit_iters=True)
l16, l17 = sch.split(loop=l13, factors=[None, 4], preserve_unit_iters=True)
sch.reorder(l14, l16, l15, l17)
sch.compute_at(block=b2, loop=l16, preserve_unit_loops=True, index=-1)
sch.set_scope(block=b2, buffer_index=0, storage_scope="local")
l18, l19, l20, l21, l22, l23, l24, l25, l26, l27 = sch.get_loops(block=b2)
sch.unroll(loop=l24)
sch.unroll(loop=l25)
sch.unroll(loop=l26)
sch.unroll(loop=l27)
b28, b29 = sch.get_producers(block=b0)
sch.compute_inline(block=b29)
b30, = sch.get_producers(block=b28)
l31, l32, l33, l34, l35, l36 = sch.get_loops(block=b0)
sch.reorder(l33, l34, l31, l32, l35, l36)
sch.unroll(loop=l31)
sch.unroll(loop=l32)
sch.unroll(loop=l35)
sch.unroll(loop=l36)
l37 = sch.fuse(l33, l34, preserve_unit_iters=True)
v38 = sch.sample_categorical(candidates=[32, 64, 128, 256, 512, 1024], probs=[0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666], decision=3)
l39, l40 = sch.split(loop=l37, factors=[None, v38], preserve_unit_iters=True)
sch.bind(loop=l39, thread_axis="blockIdx.x")
sch.bind(loop=l40, thread_axis="threadIdx.x")
b41 = sch.cache_write(block=b0, write_buffer_index=0, storage_scope="local")
sch.reverse_compute_at(block=b41, loop=l40, preserve_unit_loops=True, index=-1)
sch.compute_at(block=b28, loop=l40, preserve_unit_loops=True, index=-1)
sch.set_scope(block=b28, buffer_index=0, storage_scope="local")
sch.compute_inline(block=b30)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSSRRSRS")
l42, l43, l44, l45, l46 = sch.get_loops(block=b1)
v47, v48, v49, v50, v51 = sch.sample_perfect_tile(loop=l42, n=5, max_innermost_factor=64, decision=[3, 1, 1, 1, 2])
l52, l53, l54, l55, l56 = sch.split(loop=l42, factors=[v47, v48, v49, v50, v51], preserve_unit_iters=True)
v57, v58, v59, v60, v61 = sch.sample_perfect_tile(loop=l43, n=5, max_innermost_factor=64, decision=[1, 3, 2, 1, 1])
l62, l63, l64, l65, l66 = sch.split(loop=l43, factors=[v57, v58, v59, v60, v61], preserve_unit_iters=True)
v67, v68, v69, v70, v71 = sch.sample_perfect_tile(loop=l44, n=5, max_innermost_factor=64, decision=[2, 1, 4, 8, 4])
l72, l73, l74, l75, l76 = sch.split(loop=l44, factors=[v67, v68, v69, v70, v71], preserve_unit_iters=True)
v77, v78, v79, v80, v81 = sch.sample_perfect_tile(loop=l45, n=5, max_innermost_factor=64, decision=[1, 2, 7, 1, 14])
l82, l83, l84, l85, l86 = sch.split(loop=l45, factors=[v77, v78, v79, v80, v81], preserve_unit_iters=True)
v87, v88, v89 = sch.sample_perfect_tile(loop=l46, n=3, max_innermost_factor=64, decision=[128, 2, 1])
l90, l91, l92 = sch.split(loop=l46, factors=[v87, v88, v89], preserve_unit_iters=True)
sch.reorder(l52, l62, l72, l82, l53, l63, l73, l83, l54, l64, l74, l84, l90, l91, l55, l65, l75, l85, l92, l56, l66, l76, l86)
l93 = sch.fuse(l52, l62, l72, l82, preserve_unit_iters=True)
sch.bind(loop=l93, thread_axis="blockIdx.x")
l94 = sch.fuse(l53, l63, l73, l83, preserve_unit_iters=True)
sch.bind(loop=l94, thread_axis="vthread.x")
l95 = sch.fuse(l54, l64, l74, l84, preserve_unit_iters=True)
sch.bind(loop=l95, thread_axis="threadIdx.x")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_low_inclusive", ann_val=32)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_high_inclusive", ann_val=1024)
b96 = sch.cache_write(block=b1, write_buffer_index=0, storage_scope="local")
sch.reverse_compute_at(block=b96, loop=l95, preserve_unit_loops=True, index=-1)
b97 = sch.cache_read(block=b1, read_buffer_index=0, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b97, loop=l90, preserve_unit_loops=True, index=-1)
l98, l99, l100, l101, l102, l103, l104, l105 = sch.get_loops(block=b97)
l106 = sch.fuse(l102, l103, l104, l105, preserve_unit_iters=True)
v107 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=0)
sch.annotate(block_or_loop=b97, ann_key="meta_schedule.cooperative_fetch", ann_val=v107)
b108 = sch.cache_read(block=b1, read_buffer_index=1, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b108, loop=l90, preserve_unit_loops=True, index=-1)
l109, l110, l111, l112, l113, l114, l115, l116 = sch.get_loops(block=b108)
l117 = sch.fuse(l113, l114, l115, l116, preserve_unit_iters=True)
v118 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=1)
sch.annotate(block_or_loop=b108, ann_key="meta_schedule.cooperative_fetch", ann_val=v118)
sch.reverse_compute_inline(block=b5)
sch.reverse_compute_inline(block=b4)
v119 = sch.sample_categorical(candidates=[0, 16, 64, 512, 1024], probs=[0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001], decision=4)
sch.annotate(block_or_loop=b6, ann_key="meta_schedule.unroll_explicit", ann_val=v119)
l120, l121, l122, l123, l124, l125 = sch.get_loops(block=b3)
l126 = sch.fuse(l120, l121, l122, l123, preserve_unit_iters=True)
v127 = sch.sample_categorical(candidates=[32, 64, 128, 256, 512, 1024], probs=[0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666], decision=2)
l128, l129 = sch.split(loop=l126, factors=[None, v127], preserve_unit_iters=True)
sch.bind(loop=l128, thread_axis="blockIdx.x")
sch.bind(loop=l129, thread_axis="threadIdx.x")
sch.enter_postproc()
sch.unannotate(block_or_loop=b97, ann_key="meta_schedule.cooperative_fetch")
l130, l131, l132, l133, l134 = sch.get_loops(block=b97)
l135, l136 = sch.split(loop=l134, factors=[None, 56], preserve_unit_iters=True)
sch.bind(loop=l136, thread_axis="threadIdx.x")
sch.unannotate(block_or_loop=b108, ann_key="meta_schedule.cooperative_fetch")
l137, l138, l139, l140, l141 = sch.get_loops(block=b108)
l142, l143, l144 = sch.split(loop=l141, factors=[None, 56, 2], preserve_unit_iters=True)
sch.vectorize(loop=l144)
sch.bind(loop=l143, thread_axis="threadIdx.x")
b145 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b145, ann_key="meta_schedule.unroll_explicit")
b146, b147, b148, b149, b150, b151, b152, b153, b154 = sch.get_child_blocks(b145)
l155, l156, l157, l158, l159, l160 = sch.get_loops(block=b146)
l161, l162, l163, l164, l165, l166 = sch.get_loops(block=b147)
sch.annotate(block_or_loop=l161, ann_key="pragma_auto_unroll_max_step", ann_val=1024)
sch.annotate(block_or_loop=l161, ann_key="pragma_unroll_explicit", ann_val=1)
l167, l168, l169, l170, l171, l172 = sch.get_loops(block=b148)
l173, l174, l175, l176, l177, l178 = sch.get_loops(block=b149)
l179, l180, l181, l182, l183, l184, l185 = sch.get_loops(block=b150)
l186, l187, l188, l189, l190, l191, l192, l193, l194, l195, l196, l197, l198, l199 = sch.get_loops(block=b151)
sch.annotate(block_or_loop=l186, ann_key="pragma_auto_unroll_max_step", ann_val=1024)
sch.annotate(block_or_loop=l186, ann_key="pragma_unroll_explicit", ann_val=1)
l200, l201, l202, l203, l204, l205, l206 = sch.get_loops(block=b152)
l207, l208, l209, l210, l211, l212, l213, l214 = sch.get_loops(block=b153)
sch.annotate(block_or_loop=l207, ann_key="pragma_auto_unroll_max_step", ann_val=1024)
sch.annotate(block_or_loop=l207, ann_key="pragma_unroll_explicit", ann_val=1)
l215, l216, l217, l218 = sch.get_loops(block=b154)
b219 = sch.get_block(name="data_pack", func_name="main")
l220, l221, l222, l223, l224, l225 = sch.get_loops(block=b219)
b226 = sch.decompose_reduction(block=b219, loop=l224)
b227 = sch.get_block(name="bgemm", func_name="main")
l228, l229, l230, l231, l232, l233, l234, l235, l236, l237, l238, l239, l240, l241 = sch.get_loops(block=b227)
b242 = sch.decompose_reduction(block=b227, loop=l231)
b243 = sch.get_block(name="inverse", func_name="main")
l244, l245, l246, l247, l248, l249, l250, l251 = sch.get_loops(block=b243)
b252 = sch.decompose_reduction(block=b243, loop=l250)
2024-04-29 01:59:48 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #1022: GFLOPs: 6964.4779. Time: 173.4858 us. Best GFLOPs: 10425.6244
2024-04-29 01:59:48 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #1023: GFLOPs: 68.6825. Time: 17591.6378 us. Best GFLOPs: 10425.6244
2024-04-29 02:17:56 [INFO] [evolutionary_search.cc:713] Generating candidates......
2024-04-29 02:18:00 [INFO] [evolutionary_search.cc:715] Picked top 102 candidate(s) from database
2024-04-29 02:18:07 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x43d23b8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x3ad3338)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x72c6e28)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x4cb1ce8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x5905ad8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x7272d28)]: 405 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x3ab3638)]: 0 failure(s)
2024-04-29 02:18:13 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x43d23b8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x3ad3338)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x72c6e28)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x4cb1ce8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x5905ad8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x7272d28)]: 808 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x3ab3638)]: 0 failure(s)
2024-04-29 02:18:20 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x43d23b8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x3ad3338)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x72c6e28)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x4cb1ce8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x5905ad8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x7272d28)]: 1213 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x3ab3638)]: 0 failure(s)
2024-04-29 02:18:27 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x43d23b8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x3ad3338)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x72c6e28)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x4cb1ce8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x5905ad8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x7272d28)]: 1619 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x3ab3638)]: 0 failure(s)
2024-04-29 02:18:34 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x43d23b8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x3ad3338)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x72c6e28)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x4cb1ce8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x5905ad8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x7272d28)]: 2021 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x3ab3638)]: 0 failure(s)
2024-04-29 02:18:41 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x43d23b8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x3ad3338)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x72c6e28)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x4cb1ce8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x5905ad8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x7272d28)]: 2425 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x3ab3638)]: 0 failure(s)
2024-04-29 02:18:49 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x43d23b8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x3ad3338)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x72c6e28)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x4cb1ce8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x5905ad8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x7272d28)]: 2831 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x3ab3638)]: 0 failure(s)
2024-04-29 02:18:56 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x43d23b8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x3ad3338)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x72c6e28)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x4cb1ce8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x5905ad8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x7272d28)]: 3236 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x3ab3638)]: 0 failure(s)
2024-04-29 02:19:03 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x43d23b8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x3ad3338)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x72c6e28)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x4cb1ce8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x5905ad8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x7272d28)]: 3640 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x3ab3638)]: 0 failure(s)
2024-04-29 02:19:03 [INFO] [evolutionary_search.cc:723] Sampled 50 candidate(s)
2024-04-29 02:19:23 [INFO] [evolutionary_search.cc:621] Evolve iter #0 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x43d23b8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x3ad3338)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x72c6e28)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x4cb1ce8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x5905ad8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x7272d28)]: 105 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x3ab3638)]: 0 failure(s)
2024-04-29 02:19:45 [INFO] [evolutionary_search.cc:621] Evolve iter #1 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x43d23b8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x3ad3338)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x72c6e28)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x4cb1ce8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x5905ad8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x7272d28)]: 106 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x3ab3638)]: 0 failure(s)
2024-04-29 02:20:06 [INFO] [evolutionary_search.cc:621] Evolve iter #2 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x43d23b8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x3ad3338)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x72c6e28)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x4cb1ce8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x5905ad8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x7272d28)]: 79 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x3ab3638)]: 0 failure(s)
2024-04-29 02:20:28 [INFO] [evolutionary_search.cc:621] Evolve iter #3 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x43d23b8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x3ad3338)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x72c6e28)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x4cb1ce8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x5905ad8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x7272d28)]: 114 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x3ab3638)]: 0 failure(s)
2024-04-29 02:20:33 [INFO] [evolutionary_search.cc:649] Scores of the best 64 candidates:
[1 : 16]:	0.9934  0.9923  0.9899  0.9898  0.9896  0.9888  0.9883  0.9880  0.9852  0.9836  0.9831  0.9831  0.9830  0.9819  0.9819  0.9819
[17 : 32]:	0.9818  0.9803  0.9802  0.9802  0.9801  0.9792  0.9786  0.9785  0.9779  0.9777  0.9776  0.9772  0.9772  0.9772  0.9770  0.9769
[33 : 48]:	0.9769  0.9766  0.9763  0.9759  0.9758  0.9755  0.9753  0.9752  0.9752  0.9747  0.9747  0.9746  0.9746  0.9742  0.9739  0.9739
[49 : 64]:	0.9737  0.9734  0.9733  0.9731  0.9729  0.9729  0.9728  0.9728  0.9724  0.9722  0.9721  0.9719  0.9719  0.9718  0.9717  0.9717
2024-04-29 02:20:34 [INFO] [evolutionary_search.cc:727] Got 64 candidate(s) with evolutionary search
2024-04-29 02:20:34 [INFO] [evolutionary_search.cc:730] Sending 64 candidates(s) for measurement
2024-04-29 02:21:45 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #1024: GFLOPs: 5749.7416. Time: 210.1378 us. Best GFLOPs: 10425.6244
2024-04-29 02:21:45 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #1025: GFLOPs: 10371.6992. Time: 116.4937 us. Best GFLOPs: 10425.6244
2024-04-29 02:21:45 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #1026: GFLOPs: 9904.9608. Time: 121.9831 us. Best GFLOPs: 10425.6244
2024-04-29 02:21:45 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #1027: GFLOPs: 10496.7082. Time: 115.1064 us. Best GFLOPs: 10496.7082
2024-04-29 02:21:45 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #1028: GFLOPs: 10259.1385. Time: 117.7719 us. Best GFLOPs: 10496.7082
2024-04-29 02:21:45 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #1029: GFLOPs: 10108.8584. Time: 119.5227 us. Best GFLOPs: 10496.7082
2024-04-29 02:21:45 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #1030: GFLOPs: 10104.6551. Time: 119.5724 us. Best GFLOPs: 10496.7082
2024-04-29 02:21:45 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #1031: GFLOPs: 10413.0125. Time: 116.0316 us. Best GFLOPs: 10496.7082
2024-04-29 02:21:45 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #1032: GFLOPs: 10194.2791. Time: 118.5212 us. Best GFLOPs: 10496.7082
2024-04-29 02:21:45 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #1033: GFLOPs: 10424.8129. Time: 115.9002 us. Best GFLOPs: 10496.7082
2024-04-29 02:21:45 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #1034: GFLOPs: 10365.3639. Time: 116.5649 us. Best GFLOPs: 10496.7082
2024-04-29 02:21:45 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #1035: GFLOPs: 10417.7873. Time: 115.9784 us. Best GFLOPs: 10496.7082
2024-04-29 02:21:45 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #1036: GFLOPs: 10354.5983. Time: 116.6861 us. Best GFLOPs: 10496.7082
2024-04-29 02:21:45 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #1037: GFLOPs: 10039.3016. Time: 120.3508 us. Best GFLOPs: 10496.7082
2024-04-29 02:21:45 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #1038: GFLOPs: 10181.3086. Time: 118.6722 us. Best GFLOPs: 10496.7082
2024-04-29 02:21:45 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #1039: GFLOPs: 6176.7705. Time: 195.6100 us. Best GFLOPs: 10496.7082
2024-04-29 02:21:45 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #1040: GFLOPs: 10555.8999. Time: 114.4609 us. Best GFLOPs: 10555.8999
2024-04-29 02:21:45 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #1041: GFLOPs: 10392.6709. Time: 116.2587 us. Best GFLOPs: 10555.8999
2024-04-29 02:21:45 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #1042: GFLOPs: 10252.6439. Time: 117.8465 us. Best GFLOPs: 10555.8999
2024-04-29 02:21:45 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #1043: GFLOPs: 10076.7399. Time: 119.9037 us. Best GFLOPs: 10555.8999
2024-04-29 02:21:45 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #1044: GFLOPs: 10426.9306. Time: 115.8767 us. Best GFLOPs: 10555.8999
2024-04-29 02:21:45 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #1045: GFLOPs: 6170.6778. Time: 195.8031 us. Best GFLOPs: 10555.8999
2024-04-29 02:21:45 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #1046: GFLOPs: 10245.6444. Time: 117.9270 us. Best GFLOPs: 10555.8999
2024-04-29 02:21:45 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #1047: GFLOPs: 10244.4418. Time: 117.9408 us. Best GFLOPs: 10555.8999
2024-04-29 02:21:45 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #1048: GFLOPs: 10227.6662. Time: 118.1343 us. Best GFLOPs: 10555.8999
2024-04-29 02:21:45 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #1049: GFLOPs: 10388.9113. Time: 116.3007 us. Best GFLOPs: 10555.8999
2024-04-29 02:21:45 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #1050: GFLOPs: 10437.4157. Time: 115.7603 us. Best GFLOPs: 10555.8999
2024-04-29 02:21:45 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #1051: GFLOPs: 10245.3593. Time: 117.9303 us. Best GFLOPs: 10555.8999
2024-04-29 02:21:45 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #1052: GFLOPs: 10202.1996. Time: 118.4292 us. Best GFLOPs: 10555.8999
2024-04-29 02:21:45 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #1053: GFLOPs: 10250.5161. Time: 117.8710 us. Best GFLOPs: 10555.8999
2024-04-29 02:21:45 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #1054: GFLOPs: 10177.1501. Time: 118.7207 us. Best GFLOPs: 10555.8999
2024-04-29 02:21:45 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #1055: GFLOPs: 10433.2730. Time: 115.8062 us. Best GFLOPs: 10555.8999
2024-04-29 02:21:45 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #1056: GFLOPs: 10204.4710. Time: 118.4028 us. Best GFLOPs: 10555.8999
2024-04-29 02:21:45 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #1057: GFLOPs: 10217.1776. Time: 118.2556 us. Best GFLOPs: 10555.8999
2024-04-29 02:21:45 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #1058: GFLOPs: 10244.3935. Time: 117.9414 us. Best GFLOPs: 10555.8999
2024-04-29 02:21:45 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #1059: GFLOPs: 10198.2912. Time: 118.4746 us. Best GFLOPs: 10555.8999
2024-04-29 02:21:45 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #1060: GFLOPs: 10380.0135. Time: 116.4004 us. Best GFLOPs: 10555.8999
2024-04-29 02:21:45 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #1061: GFLOPs: 10334.5168. Time: 116.9129 us. Best GFLOPs: 10555.8999
2024-04-29 02:21:45 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #1062: GFLOPs: 10286.2883. Time: 117.4610 us. Best GFLOPs: 10555.8999
2024-04-29 02:21:45 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #1063: GFLOPs: 10219.6072. Time: 118.2274 us. Best GFLOPs: 10555.8999
2024-04-29 02:21:45 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #1064: GFLOPs: 10304.2070. Time: 117.2568 us. Best GFLOPs: 10555.8999
2024-04-29 02:21:45 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #1065: GFLOPs: 10176.5534. Time: 118.7276 us. Best GFLOPs: 10555.8999
2024-04-29 02:21:45 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #1066: GFLOPs: 10321.7662. Time: 117.0573 us. Best GFLOPs: 10555.8999
2024-04-29 02:21:45 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #1067: GFLOPs: 10394.5302. Time: 116.2379 us. Best GFLOPs: 10555.8999
2024-04-29 02:21:45 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #1068: GFLOPs: 10278.0487. Time: 117.5552 us. Best GFLOPs: 10555.8999
2024-04-29 02:21:45 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #1069: GFLOPs: 10442.1846. Time: 115.7074 us. Best GFLOPs: 10555.8999
2024-04-29 02:21:45 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #1070: GFLOPs: 10242.2998. Time: 117.9655 us. Best GFLOPs: 10555.8999
2024-04-29 02:21:45 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #1071: GFLOPs: 10237.7136. Time: 118.0184 us. Best GFLOPs: 10555.8999
2024-04-29 02:21:45 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #1072: GFLOPs: 10294.1522. Time: 117.3713 us. Best GFLOPs: 10555.8999
2024-04-29 02:21:45 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #1073: GFLOPs: 9616.3236. Time: 125.6445 us. Best GFLOPs: 10555.8999
2024-04-29 02:21:45 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #1074: GFLOPs: 10266.4421. Time: 117.6881 us. Best GFLOPs: 10555.8999
2024-04-29 02:21:45 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #1075: GFLOPs: 10217.1776. Time: 118.2556 us. Best GFLOPs: 10555.8999
2024-04-29 02:21:45 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #1076: GFLOPs: 10272.0152. Time: 117.6242 us. Best GFLOPs: 10555.8999
2024-04-29 02:21:45 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #1077: GFLOPs: 10204.3956. Time: 118.4037 us. Best GFLOPs: 10555.8999
2024-04-29 02:21:45 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #1078: GFLOPs: 10409.1006. Time: 116.0752 us. Best GFLOPs: 10555.8999
2024-04-29 02:21:45 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #1079: GFLOPs: 10176.7953. Time: 118.7248 us. Best GFLOPs: 10555.8999
2024-04-29 02:21:45 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #1080: GFLOPs: 10098.7051. Time: 119.6429 us. Best GFLOPs: 10555.8999
2024-04-29 02:21:45 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #1081: GFLOPs: 10087.8944. Time: 119.7711 us. Best GFLOPs: 10555.8999
2024-04-29 02:21:45 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #1082: GFLOPs: 10208.8653. Time: 118.3518 us. Best GFLOPs: 10555.8999
2024-04-29 02:21:45 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #1083: GFLOPs: 9166.5468. Time: 131.8095 us. Best GFLOPs: 10555.8999
2024-04-29 02:21:45 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #1084: GFLOPs: 10181.3412. Time: 118.6718 us. Best GFLOPs: 10555.8999
2024-04-29 02:21:45 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #1085: GFLOPs: 419.2609. Time: 2881.8285 us. Best GFLOPs: 10555.8999
2024-04-29 02:21:45 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #1086: GFLOPs: 2220.7716. Time: 544.0623 us. Best GFLOPs: 10555.8999
2024-04-29 02:21:45 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #1087: GFLOPs: 389.6347. Time: 3100.9512 us. Best GFLOPs: 10555.8999
2024-04-29 02:40:11 [INFO] [evolutionary_search.cc:713] Generating candidates......
2024-04-29 02:40:15 [INFO] [evolutionary_search.cc:715] Picked top 102 candidate(s) from database
2024-04-29 02:40:22 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x43d23b8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x3ad3338)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x72c6e28)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x4cb1ce8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x5905ad8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x7272d28)]: 397 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x3ab3638)]: 0 failure(s)
2024-04-29 02:40:29 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x43d23b8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x3ad3338)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x72c6e28)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x4cb1ce8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x5905ad8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x7272d28)]: 804 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x3ab3638)]: 0 failure(s)
2024-04-29 02:40:36 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x43d23b8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x3ad3338)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x72c6e28)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x4cb1ce8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x5905ad8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x7272d28)]: 1207 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x3ab3638)]: 0 failure(s)
2024-04-29 02:40:43 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x43d23b8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x3ad3338)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x72c6e28)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x4cb1ce8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x5905ad8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x7272d28)]: 1610 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x3ab3638)]: 0 failure(s)
2024-04-29 02:40:50 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x43d23b8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x3ad3338)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x72c6e28)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x4cb1ce8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x5905ad8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x7272d28)]: 2011 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x3ab3638)]: 0 failure(s)
2024-04-29 02:40:57 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x43d23b8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x3ad3338)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x72c6e28)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x4cb1ce8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x5905ad8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x7272d28)]: 2417 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x3ab3638)]: 0 failure(s)
2024-04-29 02:41:04 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x43d23b8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x3ad3338)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x72c6e28)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x4cb1ce8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x5905ad8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x7272d28)]: 2819 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x3ab3638)]: 0 failure(s)
2024-04-29 02:41:04 [INFO] [evolutionary_search.cc:723] Sampled 51 candidate(s)
2024-04-29 02:41:24 [INFO] [evolutionary_search.cc:621] Evolve iter #0 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x43d23b8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x3ad3338)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x72c6e28)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x4cb1ce8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x5905ad8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x7272d28)]: 94 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x3ab3638)]: 0 failure(s)
2024-04-29 02:41:47 [INFO] [evolutionary_search.cc:621] Evolve iter #1 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x43d23b8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x3ad3338)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x72c6e28)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x4cb1ce8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x5905ad8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x7272d28)]: 118 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x3ab3638)]: 0 failure(s)
2024-04-29 02:42:11 [INFO] [evolutionary_search.cc:621] Evolve iter #2 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x43d23b8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x3ad3338)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x72c6e28)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x4cb1ce8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x5905ad8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x7272d28)]: 118 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x3ab3638)]: 0 failure(s)
2024-04-29 02:42:33 [INFO] [evolutionary_search.cc:621] Evolve iter #3 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x43d23b8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x3ad3338)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x72c6e28)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x4cb1ce8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x5905ad8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x7272d28)]: 127 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x3ab3638)]: 0 failure(s)
2024-04-29 02:42:38 [INFO] [evolutionary_search.cc:649] Scores of the best 64 candidates:
[1 : 16]:	0.9724  0.9716  0.9714  0.9707  0.9696  0.9695  0.9694  0.9680  0.9679  0.9672  0.9669  0.9661  0.9661  0.9661  0.9656  0.9655
[17 : 32]:	0.9652  0.9651  0.9650  0.9649  0.9647  0.9643  0.9638  0.9637  0.9634  0.9634  0.9631  0.9631  0.9630  0.9629  0.9629  0.9629
[33 : 48]:	0.9628  0.9628  0.9628  0.9627  0.9627  0.9627  0.9626  0.9624  0.9623  0.9623  0.9623  0.9622  0.9621  0.9621  0.9621  0.9619
[49 : 64]:	0.9619  0.9618  0.9615  0.9614  0.9614  0.9614  0.9613  0.9613  0.9613  0.9613  0.9613  0.9613  0.9612  0.9612  0.9609  0.9608
2024-04-29 02:42:39 [INFO] [evolutionary_search.cc:727] Got 64 candidate(s) with evolutionary search
2024-04-29 02:42:39 [INFO] [evolutionary_search.cc:730] Sending 64 candidates(s) for measurement
2024-04-29 02:43:55 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #1088: GFLOPs: 10308.5524. Time: 117.2073 us. Best GFLOPs: 10555.8999
2024-04-29 02:43:55 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #1089: GFLOPs: 10317.5735. Time: 117.1049 us. Best GFLOPs: 10555.8999
2024-04-29 02:43:55 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #1090: GFLOPs: 10312.6020. Time: 117.1613 us. Best GFLOPs: 10555.8999
2024-04-29 02:43:55 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #1091: GFLOPs: 10184.5674. Time: 118.6342 us. Best GFLOPs: 10555.8999
2024-04-29 02:43:55 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #1092: GFLOPs: 10342.6321. Time: 116.8211 us. Best GFLOPs: 10555.8999
2024-04-29 02:43:55 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #1093: GFLOPs: 10115.5714. Time: 119.4434 us. Best GFLOPs: 10555.8999
2024-04-29 02:43:55 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #1094: GFLOPs: 10087.8695. Time: 119.7714 us. Best GFLOPs: 10555.8999
2024-04-29 02:43:55 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #1095: GFLOPs: 10074.5564. Time: 119.9297 us. Best GFLOPs: 10555.8999
2024-04-29 02:43:55 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #1096: GFLOPs: 10068.2146. Time: 120.0052 us. Best GFLOPs: 10555.8999
2024-04-29 02:43:55 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #1097: GFLOPs: 10106.6793. Time: 119.5485 us. Best GFLOPs: 10555.8999
2024-04-29 02:43:55 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #1098: GFLOPs: 10189.0894. Time: 118.5816 us. Best GFLOPs: 10555.8999
2024-04-29 02:43:55 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #1099: GFLOPs: 10233.6581. Time: 118.0651 us. Best GFLOPs: 10555.8999
2024-04-29 02:43:55 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #1100: GFLOPs: 10110.2655. Time: 119.5061 us. Best GFLOPs: 10555.8999
2024-04-29 02:43:55 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #1101: GFLOPs: 10114.4690. Time: 119.4564 us. Best GFLOPs: 10555.8999
2024-04-29 02:43:55 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #1102: GFLOPs: 10111.1481. Time: 119.4956 us. Best GFLOPs: 10555.8999
2024-04-29 02:43:55 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #1103: GFLOPs: 9991.1972. Time: 120.9303 us. Best GFLOPs: 10555.8999
2024-04-29 02:43:55 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #1104: GFLOPs: 10096.4906. Time: 119.6691 us. Best GFLOPs: 10555.8999
2024-04-29 02:43:55 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #1105: GFLOPs: 10125.8334. Time: 119.3223 us. Best GFLOPs: 10555.8999
2024-04-29 02:43:55 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #1106: GFLOPs: 10071.5735. Time: 119.9652 us. Best GFLOPs: 10555.8999
2024-04-29 02:43:55 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #1107: GFLOPs: 10133.6857. Time: 119.2299 us. Best GFLOPs: 10555.8999
2024-04-29 02:43:55 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #1108: GFLOPs: 9967.7801. Time: 121.2144 us. Best GFLOPs: 10555.8999
2024-04-29 02:43:55 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #1109: GFLOPs: 10144.0822. Time: 119.1077 us. Best GFLOPs: 10555.8999
2024-04-29 02:43:55 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #1110: GFLOPs: 10014.3629. Time: 120.6505 us. Best GFLOPs: 10555.8999
2024-04-29 02:43:55 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #1111: GFLOPs: 10216.9559. Time: 118.2581 us. Best GFLOPs: 10555.8999
2024-04-29 02:43:55 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #1112: GFLOPs: 10090.4895. Time: 119.7403 us. Best GFLOPs: 10555.8999
2024-04-29 02:43:55 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #1113: GFLOPs: 10078.6829. Time: 119.8806 us. Best GFLOPs: 10555.8999
2024-04-29 02:43:55 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #1114: GFLOPs: 10131.7672. Time: 119.2525 us. Best GFLOPs: 10555.8999
2024-04-29 02:43:55 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #1115: GFLOPs: 10060.8238. Time: 120.0934 us. Best GFLOPs: 10555.8999
2024-04-29 02:43:55 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #1116: GFLOPs: 10169.6904. Time: 118.8078 us. Best GFLOPs: 10555.8999
2024-04-29 02:43:55 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #1117: GFLOPs: 10160.4187. Time: 118.9162 us. Best GFLOPs: 10555.8999
2024-04-29 02:43:55 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #1118: GFLOPs: 10179.7754. Time: 118.6901 us. Best GFLOPs: 10555.8999
2024-04-29 02:43:55 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #1119: GFLOPs: 10270.2883. Time: 117.6440 us. Best GFLOPs: 10555.8999
2024-04-29 02:43:55 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #1120: GFLOPs: 10240.3296. Time: 117.9882 us. Best GFLOPs: 10555.8999
2024-04-29 02:43:55 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #1121: GFLOPs: 10237.6649. Time: 118.0189 us. Best GFLOPs: 10555.8999
2024-04-29 02:43:55 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #1122: GFLOPs: 10330.4363. Time: 116.9591 us. Best GFLOPs: 10555.8999
2024-04-29 02:43:55 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #1123: GFLOPs: 10391.5089. Time: 116.2717 us. Best GFLOPs: 10555.8999
2024-04-29 02:43:55 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #1124: GFLOPs: 10205.4850. Time: 118.3910 us. Best GFLOPs: 10555.8999
2024-04-29 02:43:55 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #1125: GFLOPs: 10207.9356. Time: 118.3626 us. Best GFLOPs: 10555.8999
2024-04-29 02:43:55 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #1126: GFLOPs: 10230.5880. Time: 118.1006 us. Best GFLOPs: 10555.8999
2024-04-29 02:43:55 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #1127: GFLOPs: 10190.8006. Time: 118.5616 us. Best GFLOPs: 10555.8999
2024-04-29 02:43:55 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #1128: GFLOPs: 10191.4539. Time: 118.5540 us. Best GFLOPs: 10555.8999
2024-04-29 02:43:55 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #1129: GFLOPs: 10294.3470. Time: 117.3691 us. Best GFLOPs: 10555.8999
2024-04-29 02:43:55 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #1130: GFLOPs: 10326.8643. Time: 116.9995 us. Best GFLOPs: 10555.8999
2024-04-29 02:43:55 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #1131: GFLOPs: 10211.6072. Time: 118.3201 us. Best GFLOPs: 10555.8999
2024-04-29 02:43:55 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #1132: GFLOPs: 10249.4140. Time: 117.8836 us. Best GFLOPs: 10555.8999
2024-04-29 02:43:55 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #1133: GFLOPs: 10238.5831. Time: 118.0083 us. Best GFLOPs: 10555.8999
2024-04-29 02:43:55 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #1134: GFLOPs: 10297.9370. Time: 117.3282 us. Best GFLOPs: 10555.8999
2024-04-29 02:43:55 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #1135: GFLOPs: 10271.7092. Time: 117.6278 us. Best GFLOPs: 10555.8999
2024-04-29 02:43:55 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #1136: GFLOPs: 10206.8196. Time: 118.3756 us. Best GFLOPs: 10555.8999
2024-04-29 02:43:55 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #1137: GFLOPs: 10321.6644. Time: 117.0585 us. Best GFLOPs: 10555.8999
2024-04-29 02:43:55 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #1138: GFLOPs: 10250.0439. Time: 117.8764 us. Best GFLOPs: 10555.8999
2024-04-29 02:43:55 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #1139: GFLOPs: 10173.1746. Time: 118.7671 us. Best GFLOPs: 10555.8999
2024-04-29 02:43:55 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #1140: GFLOPs: 10399.5282. Time: 116.1820 us. Best GFLOPs: 10555.8999
2024-04-29 02:43:55 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #1141: GFLOPs: 10240.6269. Time: 117.9848 us. Best GFLOPs: 10555.8999
2024-04-29 02:43:55 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #1142: GFLOPs: 10281.8488. Time: 117.5118 us. Best GFLOPs: 10555.8999
2024-04-29 02:43:55 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #1143: GFLOPs: 10318.5012. Time: 117.0943 us. Best GFLOPs: 10555.8999
2024-04-29 02:43:55 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #1144: GFLOPs: 10325.2500. Time: 117.0178 us. Best GFLOPs: 10555.8999
2024-04-29 02:43:55 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #1145: GFLOPs: 10129.3223. Time: 119.2812 us. Best GFLOPs: 10555.8999
2024-04-29 02:43:55 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #1146: GFLOPs: 10141.6489. Time: 119.1363 us. Best GFLOPs: 10555.8999
2024-04-29 02:43:55 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #1147: GFLOPs: 10215.6561. Time: 118.2732 us. Best GFLOPs: 10555.8999
2024-04-29 02:43:55 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #1148: GFLOPs: 10226.6595. Time: 118.1459 us. Best GFLOPs: 10555.8999
2024-04-29 02:43:55 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #1149: GFLOPs: 228.2941. Time: 5292.4632 us. Best GFLOPs: 10555.8999
2024-04-29 02:43:55 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #1150: GFLOPs: 161.2385. Time: 7493.4856 us. Best GFLOPs: 10555.8999
2024-04-29 02:43:55 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #1151: GFLOPs: 4481.7923. Time: 269.5881 us. Best GFLOPs: 10555.8999
2024-04-29 02:57:54 [INFO] [evolutionary_search.cc:713] Generating candidates......
2024-04-29 02:57:57 [INFO] [evolutionary_search.cc:715] Picked top 102 candidate(s) from database
2024-04-29 02:58:04 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x43d23b8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x3ad3338)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x72c6e28)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x4cb1ce8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x5905ad8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x7272d28)]: 398 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x3ab3638)]: 0 failure(s)
2024-04-29 02:58:11 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x43d23b8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x3ad3338)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x72c6e28)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x4cb1ce8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x5905ad8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x7272d28)]: 800 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x3ab3638)]: 0 failure(s)
2024-04-29 02:58:18 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x43d23b8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x3ad3338)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x72c6e28)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x4cb1ce8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x5905ad8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x7272d28)]: 1204 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x3ab3638)]: 0 failure(s)
2024-04-29 02:58:25 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x43d23b8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x3ad3338)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x72c6e28)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x4cb1ce8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x5905ad8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x7272d28)]: 1603 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x3ab3638)]: 0 failure(s)
2024-04-29 02:58:32 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x43d23b8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x3ad3338)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x72c6e28)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x4cb1ce8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x5905ad8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x7272d28)]: 2005 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x3ab3638)]: 0 failure(s)
2024-04-29 02:58:39 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x43d23b8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x3ad3338)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x72c6e28)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x4cb1ce8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x5905ad8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x7272d28)]: 2410 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x3ab3638)]: 0 failure(s)
2024-04-29 02:58:39 [INFO] [evolutionary_search.cc:723] Sampled 50 candidate(s)
2024-04-29 02:58:58 [INFO] [evolutionary_search.cc:621] Evolve iter #0 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x43d23b8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x3ad3338)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x72c6e28)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x4cb1ce8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x5905ad8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x7272d28)]: 84 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x3ab3638)]: 0 failure(s)
2024-04-29 02:59:20 [INFO] [evolutionary_search.cc:621] Evolve iter #1 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x43d23b8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x3ad3338)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x72c6e28)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x4cb1ce8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x5905ad8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x7272d28)]: 116 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x3ab3638)]: 0 failure(s)
2024-04-29 02:59:43 [INFO] [evolutionary_search.cc:621] Evolve iter #2 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x43d23b8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x3ad3338)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x72c6e28)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x4cb1ce8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x5905ad8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x7272d28)]: 104 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x3ab3638)]: 0 failure(s)
2024-04-29 03:00:05 [INFO] [evolutionary_search.cc:621] Evolve iter #3 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x43d23b8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x3ad3338)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x72c6e28)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x4cb1ce8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x5905ad8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x7272d28)]: 93 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x3ab3638)]: 0 failure(s)
2024-04-29 03:00:10 [INFO] [evolutionary_search.cc:649] Scores of the best 64 candidates:
[1 : 16]:	0.9734  0.9725  0.9708  0.9703  0.9698  0.9695  0.9692  0.9691  0.9687  0.9686  0.9685  0.9682  0.9682  0.9677  0.9677  0.9672
[17 : 32]:	0.9668  0.9667  0.9664  0.9659  0.9655  0.9643  0.9642  0.9642  0.9638  0.9637  0.9636  0.9631  0.9630  0.9630  0.9629  0.9625
[33 : 48]:	0.9625  0.9624  0.9623  0.9623  0.9623  0.9623  0.9621  0.9621  0.9621  0.9620  0.9620  0.9619  0.9619  0.9619  0.9618  0.9617
[49 : 64]:	0.9617  0.9615  0.9614  0.9614  0.9613  0.9613  0.9612  0.9612  0.9612  0.9611  0.9611  0.9609  0.9609  0.9609  0.9608  0.9608
2024-04-29 03:00:10 [INFO] [evolutionary_search.cc:727] Got 64 candidate(s) with evolutionary search
2024-04-29 03:00:10 [INFO] [evolutionary_search.cc:730] Sending 64 candidates(s) for measurement
2024-04-29 03:01:41 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #1152: GFLOPs: 10219.1063. Time: 118.2332 us. Best GFLOPs: 10555.8999
2024-04-29 03:01:41 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #1153: GFLOPs: 8107.5446. Time: 149.0264 us. Best GFLOPs: 10555.8999
2024-04-29 03:01:41 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #1154: GFLOPs: 10073.9252. Time: 119.9372 us. Best GFLOPs: 10555.8999
2024-04-29 03:01:41 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #1155: GFLOPs: 10158.6576. Time: 118.9368 us. Best GFLOPs: 10555.8999
2024-04-29 03:01:41 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #1156: GFLOPs: 10108.2392. Time: 119.5300 us. Best GFLOPs: 10555.8999
2024-04-29 03:01:41 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #1157: GFLOPs: 10296.0891. Time: 117.3492 us. Best GFLOPs: 10555.8999
2024-04-29 03:01:41 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #1158: GFLOPs: 10321.3682. Time: 117.0618 us. Best GFLOPs: 10555.8999
2024-04-29 03:01:41 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #1159: GFLOPs: 10097.6317. Time: 119.6556 us. Best GFLOPs: 10555.8999
2024-04-29 03:01:41 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #1160: GFLOPs: 10090.5225. Time: 119.7399 us. Best GFLOPs: 10555.8999
2024-04-29 03:01:41 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #1161: GFLOPs: 10462.0370. Time: 115.4878 us. Best GFLOPs: 10555.8999
2024-04-29 03:01:41 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #1162: GFLOPs: 10130.8505. Time: 119.2632 us. Best GFLOPs: 10555.8999
2024-04-29 03:01:41 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #1163: GFLOPs: 10308.0472. Time: 117.2131 us. Best GFLOPs: 10555.8999
2024-04-29 03:01:41 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #1164: GFLOPs: 10229.7530. Time: 118.1102 us. Best GFLOPs: 10555.8999
2024-04-29 03:01:41 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #1165: GFLOPs: 10265.8036. Time: 117.6954 us. Best GFLOPs: 10555.8999
2024-04-29 03:01:41 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #1166: GFLOPs: 10241.9573. Time: 117.9695 us. Best GFLOPs: 10555.8999
2024-04-29 03:01:41 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #1167: GFLOPs: 10313.7216. Time: 117.1486 us. Best GFLOPs: 10555.8999
2024-04-29 03:01:41 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #1168: GFLOPs: 10046.6664. Time: 120.2626 us. Best GFLOPs: 10555.8999
2024-04-29 03:01:41 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #1169: GFLOPs: 10267.3771. Time: 117.6774 us. Best GFLOPs: 10555.8999
2024-04-29 03:01:41 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #1170: GFLOPs: 10180.5001. Time: 118.6816 us. Best GFLOPs: 10555.8999
2024-04-29 03:01:41 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #1171: GFLOPs: 10220.5847. Time: 118.2161 us. Best GFLOPs: 10555.8999
2024-04-29 03:01:41 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #1172: GFLOPs: 10198.2080. Time: 118.4755 us. Best GFLOPs: 10555.8999
2024-04-29 03:01:41 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #1173: GFLOPs: 10116.7049. Time: 119.4300 us. Best GFLOPs: 10555.8999
2024-04-29 03:01:41 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #1174: GFLOPs: 10137.6608. Time: 119.1831 us. Best GFLOPs: 10555.8999
2024-04-29 03:01:41 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #1175: GFLOPs: 10168.2865. Time: 118.8242 us. Best GFLOPs: 10555.8999
2024-04-29 03:01:41 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #1176: GFLOPs: 10225.3323. Time: 118.1613 us. Best GFLOPs: 10555.8999
2024-04-29 03:01:41 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #1177: GFLOPs: 10137.8487. Time: 119.1809 us. Best GFLOPs: 10555.8999
2024-04-29 03:01:41 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #1178: GFLOPs: 10075.2845. Time: 119.9210 us. Best GFLOPs: 10555.8999
2024-04-29 03:01:41 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #1179: GFLOPs: 10140.3615. Time: 119.1514 us. Best GFLOPs: 10555.8999
2024-04-29 03:01:41 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #1180: GFLOPs: 10214.2740. Time: 118.2892 us. Best GFLOPs: 10555.8999
2024-04-29 03:01:41 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #1181: GFLOPs: 10166.1973. Time: 118.8486 us. Best GFLOPs: 10555.8999
2024-04-29 03:01:41 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #1182: GFLOPs: 10134.5219. Time: 119.2200 us. Best GFLOPs: 10555.8999
2024-04-29 03:01:41 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #1183: GFLOPs: 10141.8937. Time: 119.1334 us. Best GFLOPs: 10555.8999
2024-04-29 03:01:41 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #1184: GFLOPs: 10225.4457. Time: 118.1599 us. Best GFLOPs: 10555.8999
2024-04-29 03:01:41 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #1185: GFLOPs: 10135.0043. Time: 119.2144 us. Best GFLOPs: 10555.8999
2024-04-29 03:01:41 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #1186: GFLOPs: 10150.6021. Time: 119.0312 us. Best GFLOPs: 10555.8999
2024-04-29 03:01:41 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #1187: GFLOPs: 10134.4809. Time: 119.2205 us. Best GFLOPs: 10555.8999
2024-04-29 03:01:41 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #1188: GFLOPs: 10120.1760. Time: 119.3890 us. Best GFLOPs: 10555.8999
2024-04-29 03:01:41 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #1189: GFLOPs: 10121.1681. Time: 119.3773 us. Best GFLOPs: 10555.8999
2024-04-29 03:01:41 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #1190: GFLOPs: 9987.3149. Time: 120.9773 us. Best GFLOPs: 10555.8999
2024-04-29 03:01:41 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #1191: GFLOPs: 10129.9501. Time: 119.2738 us. Best GFLOPs: 10555.8999
2024-04-29 03:01:41 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #1192: GFLOPs: 10115.6363. Time: 119.4426 us. Best GFLOPs: 10555.8999
2024-04-29 03:01:41 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #1193: GFLOPs: 10139.9644. Time: 119.1560 us. Best GFLOPs: 10555.8999
2024-04-29 03:01:41 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #1194: GFLOPs: 10061.9519. Time: 120.0799 us. Best GFLOPs: 10555.8999
2024-04-29 03:01:41 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #1195: GFLOPs: 10139.1709. Time: 119.1654 us. Best GFLOPs: 10555.8999
2024-04-29 03:01:41 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #1196: GFLOPs: 10142.8439. Time: 119.1222 us. Best GFLOPs: 10555.8999
2024-04-29 03:01:41 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #1197: GFLOPs: 10142.0056. Time: 119.1321 us. Best GFLOPs: 10555.8999
2024-04-29 03:01:41 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #1198: GFLOPs: 10135.0043. Time: 119.2144 us. Best GFLOPs: 10555.8999
2024-04-29 03:01:41 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #1199: GFLOPs: 10058.7527. Time: 120.1181 us. Best GFLOPs: 10555.8999
2024-04-29 03:01:41 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #1200: GFLOPs: 10106.9155. Time: 119.5457 us. Best GFLOPs: 10555.8999
2024-04-29 03:01:41 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #1201: GFLOPs: 10114.3288. Time: 119.4581 us. Best GFLOPs: 10555.8999
2024-04-29 03:01:41 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #1202: GFLOPs: 10153.1547. Time: 119.0012 us. Best GFLOPs: 10555.8999
2024-04-29 03:01:41 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #1203: GFLOPs: 10241.6539. Time: 117.9729 us. Best GFLOPs: 10555.8999
2024-04-29 03:01:41 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #1204: GFLOPs: 10205.8209. Time: 118.3872 us. Best GFLOPs: 10555.8999
2024-04-29 03:01:41 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #1205: GFLOPs: 10177.6239. Time: 118.7151 us. Best GFLOPs: 10555.8999
2024-04-29 03:01:41 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #1206: GFLOPs: 10206.6372. Time: 118.3777 us. Best GFLOPs: 10555.8999
2024-04-29 03:01:41 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #1207: GFLOPs: 10247.5257. Time: 117.9053 us. Best GFLOPs: 10555.8999
2024-04-29 03:01:41 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #1208: GFLOPs: 10240.1136. Time: 117.9907 us. Best GFLOPs: 10555.8999
2024-04-29 03:01:41 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #1209: GFLOPs: 10248.9700. Time: 117.8887 us. Best GFLOPs: 10555.8999
2024-04-29 03:01:41 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #1210: GFLOPs: 10254.4868. Time: 117.8253 us. Best GFLOPs: 10555.8999
2024-04-29 03:01:41 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #1211: GFLOPs: 10234.0476. Time: 118.0606 us. Best GFLOPs: 10555.8999
2024-04-29 03:01:41 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #1212: GFLOPs: 10086.8510. Time: 119.7835 us. Best GFLOPs: 10555.8999
2024-04-29 03:01:41 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #1213: GFLOPs: 4478.8838. Time: 269.7632 us. Best GFLOPs: 10555.8999
2024-04-29 03:01:41 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #1214: GFLOPs: 213.9819. Time: 5646.4496 us. Best GFLOPs: 10555.8999
2024-04-29 03:01:41 [INFO] [task_scheduler.cc:121] [Task #5: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #1215: Error in building:
LocalBuilder: Timeout, killed after 30.0 seconds
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(256), T.int64(56), T.int64(56)), "float32"), p1: T.Buffer((T.int64(6), T.int64(6), T.int64(256), T.int64(256)), "float32"), p2: T.Buffer((T.int64(1), T.int64(256), T.int64(1), T.int64(1)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(256), T.int64(56), T.int64(56)), "float32")):
        T.func_attr({"layout_free_buffers": [1], "tir.noalias": T.bool(True)})
        # with T.block("root"):
        input_tile_local = T.alloc_buffer((T.int64(256), T.int64(196), T.int64(6), T.int64(6)), scope="local")
        data_pack = T.alloc_buffer((T.int64(6), T.int64(6), T.int64(256), T.int64(196)))
        bgemm = T.alloc_buffer((T.int64(6), T.int64(6), T.int64(256), T.int64(196)))
        inverse_local = T.alloc_buffer((T.int64(256), T.int64(196), T.int64(4), T.int64(4)), scope="local")
        data_pack_local = T.alloc_buffer((T.int64(6), T.int64(6), T.int64(256), T.int64(196)), scope="local")
        bgemm_local = T.alloc_buffer((T.int64(6), T.int64(6), T.int64(256), T.int64(196)), scope="local")
        data_pack_shared = T.alloc_buffer((T.int64(6), T.int64(6), T.int64(256), T.int64(196)), scope="shared")
        p1_shared = T.alloc_buffer((T.int64(6), T.int64(6), T.int64(256), T.int64(256)), scope="shared")
        for ci_p_fused_0 in T.thread_binding(T.int64(784), thread="blockIdx.x", annotations={"pragma_auto_unroll_max_step": 1024, "pragma_unroll_explicit": 1}):
            for ci_p_fused_1 in T.thread_binding(T.int64(64), thread="threadIdx.x"):
                for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(1), T.int64(6), T.int64(6)):
                    with T.block("input_tile"):
                        v_ci = T.axis.spatial(T.int64(256), (ci_p_fused_0 * T.int64(64) + ci_p_fused_1) // T.int64(196) + ax0)
                        v_p = T.axis.spatial(T.int64(196), (ci_p_fused_0 * T.int64(64) + ci_p_fused_1) % T.int64(196) + ax1)
                        v_eps, v_nu = T.axis.remap("SS", [ax2, ax3])
                        T.reads(p0[v_p // T.int64(196), v_ci, v_p % T.int64(196) // T.int64(14) * T.int64(4) + v_eps - T.int64(1), v_p % T.int64(14) * T.int64(4) + v_nu - T.int64(1)])
                        T.writes(input_tile_local[v_ci, v_p, v_eps, v_nu])
                        T.block_attr({"schedule_rule": "None"})
                        input_tile_local[v_ci, v_p, v_eps, v_nu] = T.if_then_else(T.int64(1) <= v_p % T.int64(196) // T.int64(14) * T.int64(4) + v_eps and v_p % T.int64(196) // T.int64(14) * T.int64(4) + v_eps < T.int64(57) and T.int64(1) <= v_p % T.int64(14) * T.int64(4) + v_nu and v_p % T.int64(14) * T.int64(4) + v_nu < T.int64(57), p0[v_p // T.int64(196), v_ci, v_p % T.int64(196) // T.int64(14) * T.int64(4) + v_eps - T.int64(1), v_p % T.int64(14) * T.int64(4) + v_nu - T.int64(1)], T.float32(0))
                for eps in T.unroll(T.int64(6)):
                    for nu in T.unroll(T.int64(6)):
                        with T.block("data_pack_init"):
                            v_eps, v_nu = T.axis.remap("SS", [eps, nu])
                            v_ci = T.axis.spatial(T.int64(256), (ci_p_fused_0 * T.int64(64) + ci_p_fused_1) // T.int64(196))
                            v_p = T.axis.spatial(T.int64(196), (ci_p_fused_0 * T.int64(64) + ci_p_fused_1) % T.int64(196))
                            T.reads()
                            T.writes(data_pack_local[v_eps, v_nu, v_ci, v_p])
                            T.block_attr({"schedule_rule": "conv2d_nchw_winograd_data_pack"})
                            data_pack_local[v_eps, v_nu, v_ci, v_p] = T.float32(0)
                        for r_a in T.unroll(T.int64(6)):
                            for r_b in T.unroll(T.int64(6)):
                                with T.block("data_pack_update"):
                                    v_eps, v_nu = T.axis.remap("SS", [eps, nu])
                                    v_ci = T.axis.spatial(T.int64(256), (ci_p_fused_0 * T.int64(64) + ci_p_fused_1) // T.int64(196))
                                    v_p = T.axis.spatial(T.int64(196), (ci_p_fused_0 * T.int64(64) + ci_p_fused_1) % T.int64(196))
                                    v_r_a, v_r_b = T.axis.remap("RR", [r_a, r_b])
                                    T.reads(data_pack_local[v_eps, v_nu, v_ci, v_p], input_tile_local[v_ci, v_p, v_r_a, v_r_b])
                                    T.writes(data_pack_local[v_eps, v_nu, v_ci, v_p])
                                    T.block_attr({"schedule_rule": "conv2d_nchw_winograd_data_pack"})
                                    data_pack_local[v_eps, v_nu, v_ci, v_p] = data_pack_local[v_eps, v_nu, v_ci, v_p] + input_tile_local[v_ci, v_p, v_r_a, v_r_b] * T.Select(v_r_a % T.int64(6) == T.int64(5) and v_eps % T.int64(6) == T.int64(5), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(5) and v_eps % T.int64(6) == T.int64(4), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(5) and v_eps % T.int64(6) == T.int64(3), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(5) and v_eps % T.int64(6) == T.int64(2), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(5) and v_eps % T.int64(6) == T.int64(1), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(5) and v_eps % T.int64(6) == T.int64(0), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(4) and v_eps % T.int64(6) == T.int64(5), T.float32(1.5), T.Select(v_r_a % T.int64(6) == T.int64(4) and v_eps % T.int64(6) == T.int64(4), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(4) and v_eps % T.int64(6) == T.int64(3), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(4) and v_eps % T.int64(6) == T.int64(2), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(4) and v_eps % T.int64(6) == T.int64(1), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(4) and v_eps % T.int64(6) == T.int64(0), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(3) and v_eps % T.int64(6) == T.int64(5), T.float32(-2), T.Select(v_r_a % T.int64(6) == T.int64(3) and v_eps % T.int64(6) == T.int64(4), T.float32(-0.5), T.Select(v_r_a % T.int64(6) == T.int64(3) and v_eps % T.int64(6) == T.int64(3), T.float32(2), T.Select(v_r_a % T.int64(6) == T.int64(3) and v_eps % T.int64(6) == T.int64(2), T.float32(2.5), T.Select(v_r_a % T.int64(6) == T.int64(3) and v_eps % T.int64(6) == T.int64(1), T.float32(0.5), T.Select(v_r_a % T.int64(6) == T.int64(3) and v_eps % T.int64(6) == T.int64(0), T.float32(1.5), T.Select(v_r_a % T.int64(6) == T.int64(2) and v_eps % T.int64(6) == T.int64(5), T.float32(-1.5), T.Select(v_r_a % T.int64(6) == T.int64(2) and v_eps % T.int64(6) == T.int64(4), T.float32(-1), T.Select(v_r_a % T.int64(6) == T.int64(2) and v_eps % T.int64(6) == T.int64(3), T.float32(-1), T.Select(v_r_a % T.int64(6) == T.int64(2) and v_eps % T.int64(6) == T.int64(2), T.float32(0.5), T.Select(v_r_a % T.int64(6) == T.int64(2) and v_eps % T.int64(6) == T.int64(1), T.float32(-2.5), T.Select(v_r_a % T.int64(6) == T.int64(2) and v_eps % T.int64(6) == T.int64(0), T.float32(-2), T.Select(v_r_a % T.int64(6) == T.int64(1) and v_eps % T.int64(6) == T.int64(5), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(1) and v_eps % T.int64(6) == T.int64(4), T.float32(0.5), T.Select(v_r_a % T.int64(6) == T.int64(1) and v_eps % T.int64(6) == T.int64(3), T.float32(-2), T.Select(v_r_a % T.int64(6) == T.int64(1) and v_eps % T.int64(6) == T.int64(2), T.float32(-1), T.Select(v_r_a % T.int64(6) == T.int64(1) and v_eps % T.int64(6) == T.int64(1), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(1) and v_eps % T.int64(6) == T.int64(0), T.float32(-1.5), T.Select(v_r_a % T.int64(6) == T.int64(0) and v_eps % T.int64(6) == T.int64(5), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(0) and v_eps % T.int64(6) == T.int64(4), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(0) and v_eps % T.int64(6) == T.int64(3), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(0) and v_eps % T.int64(6) == T.int64(2), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(0) and v_eps % T.int64(6) == T.int64(1), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(0) and v_eps % T.int64(6) == T.int64(0), T.float32(1), T.float32(0))))))))))))))))))))))))))))))))))))) * T.Select(v_r_b % T.int64(6) == T.int64(5) and v_nu % T.int64(6) == T.int64(5), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(5) and v_nu % T.int64(6) == T.int64(4), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(5) and v_nu % T.int64(6) == T.int64(3), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(5) and v_nu % T.int64(6) == T.int64(2), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(5) and v_nu % T.int64(6) == T.int64(1), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(5) and v_nu % T.int64(6) == T.int64(0), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(4) and v_nu % T.int64(6) == T.int64(5), T.float32(1.5), T.Select(v_r_b % T.int64(6) == T.int64(4) and v_nu % T.int64(6) == T.int64(4), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(4) and v_nu % T.int64(6) == T.int64(3), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(4) and v_nu % T.int64(6) == T.int64(2), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(4) and v_nu % T.int64(6) == T.int64(1), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(4) and v_nu % T.int64(6) == T.int64(0), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(3) and v_nu % T.int64(6) == T.int64(5), T.float32(-2), T.Select(v_r_b % T.int64(6) == T.int64(3) and v_nu % T.int64(6) == T.int64(4), T.float32(-0.5), T.Select(v_r_b % T.int64(6) == T.int64(3) and v_nu % T.int64(6) == T.int64(3), T.float32(2), T.Select(v_r_b % T.int64(6) == T.int64(3) and v_nu % T.int64(6) == T.int64(2), T.float32(2.5), T.Select(v_r_b % T.int64(6) == T.int64(3) and v_nu % T.int64(6) == T.int64(1), T.float32(0.5), T.Select(v_r_b % T.int64(6) == T.int64(3) and v_nu % T.int64(6) == T.int64(0), T.float32(1.5), T.Select(v_r_b % T.int64(6) == T.int64(2) and v_nu % T.int64(6) == T.int64(5), T.float32(-1.5), T.Select(v_r_b % T.int64(6) == T.int64(2) and v_nu % T.int64(6) == T.int64(4), T.float32(-1), T.Select(v_r_b % T.int64(6) == T.int64(2) and v_nu % T.int64(6) == T.int64(3), T.float32(-1), T.Select(v_r_b % T.int64(6) == T.int64(2) and v_nu % T.int64(6) == T.int64(2), T.float32(0.5), T.Select(v_r_b % T.int64(6) == T.int64(2) and v_nu % T.int64(6) == T.int64(1), T.float32(-2.5), T.Select(v_r_b % T.int64(6) == T.int64(2) and v_nu % T.int64(6) == T.int64(0), T.float32(-2), T.Select(v_r_b % T.int64(6) == T.int64(1) and v_nu % T.int64(6) == T.int64(5), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(1) and v_nu % T.int64(6) == T.int64(4), T.float32(0.5), T.Select(v_r_b % T.int64(6) == T.int64(1) and v_nu % T.int64(6) == T.int64(3), T.float32(-2), T.Select(v_r_b % T.int64(6) == T.int64(1) and v_nu % T.int64(6) == T.int64(2), T.float32(-1), T.Select(v_r_b % T.int64(6) == T.int64(1) and v_nu % T.int64(6) == T.int64(1), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(1) and v_nu % T.int64(6) == T.int64(0), T.float32(-1.5), T.Select(v_r_b % T.int64(6) == T.int64(0) and v_nu % T.int64(6) == T.int64(5), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(0) and v_nu % T.int64(6) == T.int64(4), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(0) and v_nu % T.int64(6) == T.int64(3), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(0) and v_nu % T.int64(6) == T.int64(2), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(0) and v_nu % T.int64(6) == T.int64(1), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(0) and v_nu % T.int64(6) == T.int64(0), T.float32(1), T.float32(0)))))))))))))))))))))))))))))))))))))
                for ax0, ax1, ax2, ax3 in T.grid(T.int64(6), T.int64(6), T.int64(1), T.int64(1)):
                    with T.block("data_pack_local"):
                        v0, v1 = T.axis.remap("SS", [ax0, ax1])
                        v2 = T.axis.spatial(T.int64(256), (ci_p_fused_0 * T.int64(64) + ci_p_fused_1) // T.int64(196) + ax2)
                        v3 = T.axis.spatial(T.int64(196), (ci_p_fused_0 * T.int64(64) + ci_p_fused_1) % T.int64(196) + ax3)
                        T.reads(data_pack_local[v0, v1, v2, v3])
                        T.writes(data_pack[v0, v1, v2, v3])
                        data_pack[v0, v1, v2, v3] = data_pack_local[v0, v1, v2, v3]
        for eps_0_nu_0_co_0_p_0_fused in T.thread_binding(T.int64(6), thread="blockIdx.x", annotations={"pragma_auto_unroll_max_step": 1024, "pragma_unroll_explicit": 1}):
            for eps_1_nu_1_co_1_p_1_fused in T.thread_binding(T.int64(6), thread="vthread.x"):
                for eps_2_nu_2_co_2_p_2_fused in T.thread_binding(T.int64(32), thread="threadIdx.x"):
                    for eps_3_init, nu_3_init, co_3_init, p_3_init, eps_4_init, nu_4_init, co_4_init, p_4_init in T.grid(T.int64(1), T.int64(1), T.int64(8), T.int64(2), T.int64(1), T.int64(1), T.int64(2), T.int64(49)):
                        with T.block("bgemm_init"):
                            v_eps = T.axis.spatial(T.int64(6), eps_1_nu_1_co_1_p_1_fused // T.int64(2) * T.int64(2) + eps_2_nu_2_co_2_p_2_fused // T.int64(16) + eps_3_init + eps_4_init)
                            v_nu = T.axis.spatial(T.int64(6), eps_0_nu_0_co_0_p_0_fused // T.int64(2) * T.int64(2) + eps_2_nu_2_co_2_p_2_fused % T.int64(16) // T.int64(8) + nu_3_init + nu_4_init)
                            v_co = T.axis.spatial(T.int64(256), eps_0_nu_0_co_0_p_0_fused % T.int64(2) * T.int64(128) + eps_1_nu_1_co_1_p_1_fused % T.int64(2) * T.int64(64) + eps_2_nu_2_co_2_p_2_fused % T.int64(8) // T.int64(2) * T.int64(16) + co_3_init * T.int64(2) + co_4_init)
                            v_p = T.axis.spatial(T.int64(196), eps_2_nu_2_co_2_p_2_fused % T.int64(2) * T.int64(98) + p_3_init * T.int64(49) + p_4_init)
                            T.reads()
                            T.writes(bgemm_local[v_eps, v_nu, v_co, v_p])
                            T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 32, "meta_schedule.tiling_structure": "SSSRRSRS"})
                            bgemm_local[v_eps, v_nu, v_co, v_p] = T.float32(0)
                    for ci_0 in range(T.int64(128)):
                        for ax0_ax1_ax2_ax3_fused_0 in range(T.int64(37)):
                            for ax0_ax1_ax2_ax3_fused_1 in T.thread_binding(T.int64(32), thread="threadIdx.x"):
                                for ax0_ax1_ax2_ax3_fused_2 in T.vectorized(T.int64(4)):
                                    with T.block("data_pack_shared"):
                                        v0 = T.axis.spatial(T.int64(6), (ax0_ax1_ax2_ax3_fused_0 * T.int64(128) + ax0_ax1_ax2_ax3_fused_1 * T.int64(4) + ax0_ax1_ax2_ax3_fused_2) // T.int64(784))
                                        v1 = T.axis.spatial(T.int64(6), eps_0_nu_0_co_0_p_0_fused // T.int64(2) * T.int64(2) + (ax0_ax1_ax2_ax3_fused_0 * T.int64(128) + ax0_ax1_ax2_ax3_fused_1 * T.int64(4) + ax0_ax1_ax2_ax3_fused_2) % T.int64(784) // T.int64(392))
                                        v2 = T.axis.spatial(T.int64(256), ci_0 * T.int64(2) + (ax0_ax1_ax2_ax3_fused_0 * T.int64(128) + ax0_ax1_ax2_ax3_fused_1 * T.int64(4) + ax0_ax1_ax2_ax3_fused_2) % T.int64(392) // T.int64(196))
                                        v3 = T.axis.spatial(T.int64(196), (ax0_ax1_ax2_ax3_fused_0 * T.int64(128) + ax0_ax1_ax2_ax3_fused_1 * T.int64(4) + ax0_ax1_ax2_ax3_fused_2) % T.int64(196))
                                        T.where((ax0_ax1_ax2_ax3_fused_0 * T.int64(32) + ax0_ax1_ax2_ax3_fused_1) * T.int64(4) + ax0_ax1_ax2_ax3_fused_2 < T.int64(4704))
                                        T.reads(data_pack[v0, v1, v2, v3])
                                        T.writes(data_pack_shared[v0, v1, v2, v3])
                                        data_pack_shared[v0, v1, v2, v3] = data_pack[v0, v1, v2, v3]
                        for ax0_ax1_ax2_ax3_fused_0 in range(T.int64(24)):
                            for ax0_ax1_ax2_ax3_fused_1 in T.thread_binding(T.int64(32), thread="threadIdx.x"):
                                for ax0_ax1_ax2_ax3_fused_2 in T.vectorized(T.int64(4)):
                                    with T.block("p1_shared"):
                                        v0 = T.axis.spatial(T.int64(6), (ax0_ax1_ax2_ax3_fused_0 * T.int64(128) + ax0_ax1_ax2_ax3_fused_1 * T.int64(4) + ax0_ax1_ax2_ax3_fused_2) // T.int64(512))
                                        v1 = T.axis.spatial(T.int64(6), eps_0_nu_0_co_0_p_0_fused // T.int64(2) * T.int64(2) + (ax0_ax1_ax2_ax3_fused_0 * T.int64(128) + ax0_ax1_ax2_ax3_fused_1 * T.int64(4) + ax0_ax1_ax2_ax3_fused_2) % T.int64(512) // T.int64(256))
                                        v2 = T.axis.spatial(T.int64(256), ci_0 * T.int64(2) + (ax0_ax1_ax2_ax3_fused_0 * T.int64(128) + ax0_ax1_ax2_ax3_fused_1 * T.int64(4) + ax0_ax1_ax2_ax3_fused_2) % T.int64(256) // T.int64(128))
                                        v3 = T.axis.spatial(T.int64(256), eps_0_nu_0_co_0_p_0_fused % T.int64(2) * T.int64(128) + (ax0_ax1_ax2_ax3_fused_0 * T.int64(128) + ax0_ax1_ax2_ax3_fused_1 * T.int64(4) + ax0_ax1_ax2_ax3_fused_2) % T.int64(128))
                                        T.reads(p1[v0, v1, v2, v3])
                                        T.writes(p1_shared[v0, v1, v2, v3])
                                        p1_shared[v0, v1, v2, v3] = p1[v0, v1, v2, v3]
                        for ci_1, eps_3, nu_3, co_3, p_3, ci_2, eps_4, nu_4, co_4, p_4 in T.grid(T.int64(1), T.int64(1), T.int64(1), T.int64(8), T.int64(2), T.int64(2), T.int64(1), T.int64(1), T.int64(2), T.int64(49)):
                            with T.block("bgemm_update"):
                                v_eps = T.axis.spatial(T.int64(6), eps_1_nu_1_co_1_p_1_fused // T.int64(2) * T.int64(2) + eps_2_nu_2_co_2_p_2_fused // T.int64(16) + eps_3 + eps_4)
                                v_nu = T.axis.spatial(T.int64(6), eps_0_nu_0_co_0_p_0_fused // T.int64(2) * T.int64(2) + eps_2_nu_2_co_2_p_2_fused % T.int64(16) // T.int64(8) + nu_3 + nu_4)
                                v_co = T.axis.spatial(T.int64(256), eps_0_nu_0_co_0_p_0_fused % T.int64(2) * T.int64(128) + eps_1_nu_1_co_1_p_1_fused % T.int64(2) * T.int64(64) + eps_2_nu_2_co_2_p_2_fused % T.int64(8) // T.int64(2) * T.int64(16) + co_3 * T.int64(2) + co_4)
                                v_p = T.axis.spatial(T.int64(196), eps_2_nu_2_co_2_p_2_fused % T.int64(2) * T.int64(98) + p_3 * T.int64(49) + p_4)
                                v_ci = T.axis.reduce(T.int64(256), ci_0 * T.int64(2) + ci_1 * T.int64(2) + ci_2)
                                T.reads(bgemm_local[v_eps, v_nu, v_co, v_p], data_pack_shared[v_eps, v_nu, v_ci, v_p], p1_shared[v_eps, v_nu, v_ci, v_co])
                                T.writes(bgemm_local[v_eps, v_nu, v_co, v_p])
                                T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 32, "meta_schedule.tiling_structure": "SSSRRSRS"})
                                bgemm_local[v_eps, v_nu, v_co, v_p] = bgemm_local[v_eps, v_nu, v_co, v_p] + data_pack_shared[v_eps, v_nu, v_ci, v_p] * p1_shared[v_eps, v_nu, v_ci, v_co]
                    for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(1), T.int64(16), T.int64(98)):
                        with T.block("bgemm_local"):
                            v0 = T.axis.spatial(T.int64(6), eps_1_nu_1_co_1_p_1_fused // T.int64(2) * T.int64(2) + eps_2_nu_2_co_2_p_2_fused // T.int64(16) + ax0)
                            v1 = T.axis.spatial(T.int64(6), eps_0_nu_0_co_0_p_0_fused // T.int64(2) * T.int64(2) + eps_2_nu_2_co_2_p_2_fused % T.int64(16) // T.int64(8) + ax1)
                            v2 = T.axis.spatial(T.int64(256), eps_0_nu_0_co_0_p_0_fused % T.int64(2) * T.int64(128) + eps_1_nu_1_co_1_p_1_fused % T.int64(2) * T.int64(64) + eps_2_nu_2_co_2_p_2_fused % T.int64(8) // T.int64(2) * T.int64(16) + ax2)
                            v3 = T.axis.spatial(T.int64(196), eps_2_nu_2_co_2_p_2_fused % T.int64(2) * T.int64(98) + ax3)
                            T.reads(bgemm_local[v0, v1, v2, v3])
                            T.writes(bgemm[v0, v1, v2, v3])
                            bgemm[v0, v1, v2, v3] = bgemm_local[v0, v1, v2, v3]
        for n_co_h_0_w_0_fused_0 in T.thread_binding(T.int64(392), thread="blockIdx.x", annotations={"pragma_auto_unroll_max_step": 1024, "pragma_unroll_explicit": 1}):
            for n_co_h_0_w_0_fused_1 in T.thread_binding(T.int64(128), thread="threadIdx.x"):
                for ax0, ax1 in T.grid(T.int64(1), T.int64(1)):
                    for ax2 in T.unroll(T.int64(4)):
                        for ax3 in T.unroll(T.int64(4)):
                            with T.block("inverse_init"):
                                v_co = T.axis.spatial(T.int64(256), (n_co_h_0_w_0_fused_0 * T.int64(128) + n_co_h_0_w_0_fused_1) // T.int64(196) + ax0)
                                v_p = T.axis.spatial(T.int64(196), (n_co_h_0_w_0_fused_0 * T.int64(128) + n_co_h_0_w_0_fused_1) % T.int64(196) + ax1)
                                v_vh, v_vw = T.axis.remap("SS", [ax2, ax3])
                                T.reads()
                                T.writes(inverse_local[v_co, v_p, v_vh, v_vw])
                                T.block_attr({"schedule_rule": "conv2d_nchw_winograd_inverse"})
                                inverse_local[v_co, v_p, v_vh, v_vw] = T.float32(0)
                            for ax4 in T.unroll(T.int64(6)):
                                for ax5 in T.unroll(T.int64(6)):
                                    with T.block("inverse_update"):
                                        v_co = T.axis.spatial(T.int64(256), (n_co_h_0_w_0_fused_0 * T.int64(128) + n_co_h_0_w_0_fused_1) // T.int64(196) + ax0)
                                        v_p = T.axis.spatial(T.int64(196), (n_co_h_0_w_0_fused_0 * T.int64(128) + n_co_h_0_w_0_fused_1) % T.int64(196) + ax1)
                                        v_vh, v_vw, v_r_a, v_r_b = T.axis.remap("SSRR", [ax2, ax3, ax4, ax5])
                                        T.reads(inverse_local[v_co, v_p, v_vh, v_vw], bgemm[v_r_a, v_r_b, v_co, v_p])
                                        T.writes(inverse_local[v_co, v_p, v_vh, v_vw])
                                        T.block_attr({"schedule_rule": "conv2d_nchw_winograd_inverse"})
                                        inverse_local[v_co, v_p, v_vh, v_vw] = inverse_local[v_co, v_p, v_vh, v_vw] + bgemm[v_r_a, v_r_b, v_co, v_p] * T.Select(v_r_a % T.int64(6) == T.int64(5) and v_vh % T.int64(4) == T.int64(3), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(5) and v_vh % T.int64(4) == T.int64(2), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(5) and v_vh % T.int64(4) == T.int64(1), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(5) and v_vh % T.int64(4) == T.int64(0), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(4) and v_vh % T.int64(4) == T.int64(3), T.float32(-8), T.Select(v_r_a % T.int64(6) == T.int64(4) and v_vh % T.int64(4) == T.int64(2), T.float32(4), T.Select(v_r_a % T.int64(6) == T.int64(4) and v_vh % T.int64(4) == T.int64(1), T.float32(-2), T.Select(v_r_a % T.int64(6) == T.int64(4) and v_vh % T.int64(4) == T.int64(0), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(3) and v_vh % T.int64(4) == T.int64(3), T.float32(0.125), T.Select(v_r_a % T.int64(6) == T.int64(3) and v_vh % T.int64(4) == T.int64(2), T.float32(0.25), T.Select(v_r_a % T.int64(6) == T.int64(3) and v_vh % T.int64(4) == T.int64(1), T.float32(0.5), T.Select(v_r_a % T.int64(6) == T.int64(3) and v_vh % T.int64(4) == T.int64(0), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(2) and v_vh % T.int64(4) == T.int64(3), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(2) and v_vh % T.int64(4) == T.int64(2), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(2) and v_vh % T.int64(4) == T.int64(1), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(2) and v_vh % T.int64(4) == T.int64(0), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(1) and v_vh % T.int64(4) == T.int64(3), T.float32(-1), T.Select(v_r_a % T.int64(6) == T.int64(1) and v_vh % T.int64(4) == T.int64(2), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(1) and v_vh % T.int64(4) == T.int64(1), T.float32(-1), T.Select(v_r_a % T.int64(6) == T.int64(1) and v_vh % T.int64(4) == T.int64(0), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(0) and v_vh % T.int64(4) == T.int64(3), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(0) and v_vh % T.int64(4) == T.int64(2), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(0) and v_vh % T.int64(4) == T.int64(1), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(0) and v_vh % T.int64(4) == T.int64(0), T.float32(1), T.float32(0))))))))))))))))))))))))) * T.Select(v_r_b % T.int64(6) == T.int64(5) and v_vw % T.int64(4) == T.int64(3), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(5) and v_vw % T.int64(4) == T.int64(2), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(5) and v_vw % T.int64(4) == T.int64(1), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(5) and v_vw % T.int64(4) == T.int64(0), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(4) and v_vw % T.int64(4) == T.int64(3), T.float32(-8), T.Select(v_r_b % T.int64(6) == T.int64(4) and v_vw % T.int64(4) == T.int64(2), T.float32(4), T.Select(v_r_b % T.int64(6) == T.int64(4) and v_vw % T.int64(4) == T.int64(1), T.float32(-2), T.Select(v_r_b % T.int64(6) == T.int64(4) and v_vw % T.int64(4) == T.int64(0), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(3) and v_vw % T.int64(4) == T.int64(3), T.float32(0.125), T.Select(v_r_b % T.int64(6) == T.int64(3) and v_vw % T.int64(4) == T.int64(2), T.float32(0.25), T.Select(v_r_b % T.int64(6) == T.int64(3) and v_vw % T.int64(4) == T.int64(1), T.float32(0.5), T.Select(v_r_b % T.int64(6) == T.int64(3) and v_vw % T.int64(4) == T.int64(0), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(2) and v_vw % T.int64(4) == T.int64(3), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(2) and v_vw % T.int64(4) == T.int64(2), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(2) and v_vw % T.int64(4) == T.int64(1), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(2) and v_vw % T.int64(4) == T.int64(0), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(1) and v_vw % T.int64(4) == T.int64(3), T.float32(-1), T.Select(v_r_b % T.int64(6) == T.int64(1) and v_vw % T.int64(4) == T.int64(2), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(1) and v_vw % T.int64(4) == T.int64(1), T.float32(-1), T.Select(v_r_b % T.int64(6) == T.int64(1) and v_vw % T.int64(4) == T.int64(0), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(0) and v_vw % T.int64(4) == T.int64(3), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(0) and v_vw % T.int64(4) == T.int64(2), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(0) and v_vw % T.int64(4) == T.int64(1), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(0) and v_vw % T.int64(4) == T.int64(0), T.float32(1), T.float32(0)))))))))))))))))))))))))
                for h_1, w_1 in T.grid(T.int64(4), T.int64(4)):
                    with T.block("conv2d_winograd"):
                        v_n = T.axis.spatial(T.int64(1), T.int64(0))
                        v_co = T.axis.spatial(T.int64(256), (n_co_h_0_w_0_fused_0 * T.int64(128) + n_co_h_0_w_0_fused_1) // T.int64(196))
                        v_h = T.axis.spatial(T.int64(56), (n_co_h_0_w_0_fused_0 * T.int64(128) + n_co_h_0_w_0_fused_1) % T.int64(196) // T.int64(14) * T.int64(4) + h_1)
                        v_w = T.axis.spatial(T.int64(56), (n_co_h_0_w_0_fused_0 * T.int64(128) + n_co_h_0_w_0_fused_1) % T.int64(14) * T.int64(4) + w_1)
                        T.reads(inverse_local[v_co, v_n * T.int64(196) + v_h // T.int64(4) * T.int64(14) + v_w // T.int64(4), v_h % T.int64(4), v_w % T.int64(4)], p2[v_n, v_co, T.int64(0), T.int64(0)])
                        T.writes(T_relu[v_n, v_co, v_h, v_w])
                        T_relu[v_n, v_co, v_h, v_w] = T.max(inverse_local[v_co, v_n * T.int64(196) + v_h // T.int64(4) * T.int64(14) + v_w // T.int64(4), v_h % T.int64(4), v_w % T.int64(4)] + p2[v_n, v_co, T.int64(0), T.int64(0)], T.float32(0))
b0 = sch.get_block(name="data_pack", func_name="main")
b1 = sch.get_block(name="bgemm", func_name="main")
b2 = sch.get_block(name="inverse", func_name="main")
b3 = sch.get_block(name="conv2d_winograd", func_name="main")
b4 = sch.get_block(name="T_add", func_name="main")
b5 = sch.get_block(name="T_relu", func_name="main")
b6 = sch.get_block(name="root", func_name="main")
b7, b8 = sch.get_producers(block=b2)
sch.compute_inline(block=b8)
b9, = sch.get_consumers(block=b2)
l10, l11, l12, l13 = sch.get_loops(block=b9)
l14, l15 = sch.split(loop=l12, factors=[None, 4], preserve_unit_iters=True)
l16, l17 = sch.split(loop=l13, factors=[None, 4], preserve_unit_iters=True)
sch.reorder(l14, l16, l15, l17)
sch.compute_at(block=b2, loop=l16, preserve_unit_loops=True, index=-1)
sch.set_scope(block=b2, buffer_index=0, storage_scope="local")
l18, l19, l20, l21, l22, l23, l24, l25, l26, l27 = sch.get_loops(block=b2)
sch.unroll(loop=l24)
sch.unroll(loop=l25)
sch.unroll(loop=l26)
sch.unroll(loop=l27)
b28, b29 = sch.get_producers(block=b0)
sch.compute_inline(block=b29)
b30, = sch.get_producers(block=b28)
l31, l32, l33, l34, l35, l36 = sch.get_loops(block=b0)
sch.reorder(l33, l34, l31, l32, l35, l36)
sch.unroll(loop=l31)
sch.unroll(loop=l32)
sch.unroll(loop=l35)
sch.unroll(loop=l36)
l37 = sch.fuse(l33, l34, preserve_unit_iters=True)
v38 = sch.sample_categorical(candidates=[32, 64, 128, 256, 512, 1024], probs=[0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666], decision=1)
l39, l40 = sch.split(loop=l37, factors=[None, v38], preserve_unit_iters=True)
sch.bind(loop=l39, thread_axis="blockIdx.x")
sch.bind(loop=l40, thread_axis="threadIdx.x")
b41 = sch.cache_write(block=b0, write_buffer_index=0, storage_scope="local")
sch.reverse_compute_at(block=b41, loop=l40, preserve_unit_loops=True, index=-1)
sch.compute_at(block=b28, loop=l40, preserve_unit_loops=True, index=-1)
sch.set_scope(block=b28, buffer_index=0, storage_scope="local")
sch.compute_inline(block=b30)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSSRRSRS")
l42, l43, l44, l45, l46 = sch.get_loops(block=b1)
v47, v48, v49, v50, v51 = sch.sample_perfect_tile(loop=l42, n=5, max_innermost_factor=64, decision=[1, 3, 2, 1, 1])
l52, l53, l54, l55, l56 = sch.split(loop=l42, factors=[v47, v48, v49, v50, v51], preserve_unit_iters=True)
v57, v58, v59, v60, v61 = sch.sample_perfect_tile(loop=l43, n=5, max_innermost_factor=64, decision=[3, 1, 2, 1, 1])
l62, l63, l64, l65, l66 = sch.split(loop=l43, factors=[v57, v58, v59, v60, v61], preserve_unit_iters=True)
v67, v68, v69, v70, v71 = sch.sample_perfect_tile(loop=l44, n=5, max_innermost_factor=64, decision=[2, 2, 4, 8, 2])
l72, l73, l74, l75, l76 = sch.split(loop=l44, factors=[v67, v68, v69, v70, v71], preserve_unit_iters=True)
v77, v78, v79, v80, v81 = sch.sample_perfect_tile(loop=l45, n=5, max_innermost_factor=64, decision=[1, 1, 2, 2, 49])
l82, l83, l84, l85, l86 = sch.split(loop=l45, factors=[v77, v78, v79, v80, v81], preserve_unit_iters=True)
v87, v88, v89 = sch.sample_perfect_tile(loop=l46, n=3, max_innermost_factor=64, decision=[128, 1, 2])
l90, l91, l92 = sch.split(loop=l46, factors=[v87, v88, v89], preserve_unit_iters=True)
sch.reorder(l52, l62, l72, l82, l53, l63, l73, l83, l54, l64, l74, l84, l90, l91, l55, l65, l75, l85, l92, l56, l66, l76, l86)
l93 = sch.fuse(l52, l62, l72, l82, preserve_unit_iters=True)
sch.bind(loop=l93, thread_axis="blockIdx.x")
l94 = sch.fuse(l53, l63, l73, l83, preserve_unit_iters=True)
sch.bind(loop=l94, thread_axis="vthread.x")
l95 = sch.fuse(l54, l64, l74, l84, preserve_unit_iters=True)
sch.bind(loop=l95, thread_axis="threadIdx.x")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_low_inclusive", ann_val=32)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_high_inclusive", ann_val=1024)
b96 = sch.cache_write(block=b1, write_buffer_index=0, storage_scope="local")
sch.reverse_compute_at(block=b96, loop=l95, preserve_unit_loops=True, index=-1)
b97 = sch.cache_read(block=b1, read_buffer_index=0, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b97, loop=l90, preserve_unit_loops=True, index=-1)
l98, l99, l100, l101, l102, l103, l104, l105 = sch.get_loops(block=b97)
l106 = sch.fuse(l102, l103, l104, l105, preserve_unit_iters=True)
v107 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b97, ann_key="meta_schedule.cooperative_fetch", ann_val=v107)
b108 = sch.cache_read(block=b1, read_buffer_index=1, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b108, loop=l90, preserve_unit_loops=True, index=-1)
l109, l110, l111, l112, l113, l114, l115, l116 = sch.get_loops(block=b108)
l117 = sch.fuse(l113, l114, l115, l116, preserve_unit_iters=True)
v118 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b108, ann_key="meta_schedule.cooperative_fetch", ann_val=v118)
sch.reverse_compute_inline(block=b5)
sch.reverse_compute_inline(block=b4)
v119 = sch.sample_categorical(candidates=[0, 16, 64, 512, 1024], probs=[0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001], decision=4)
sch.annotate(block_or_loop=b6, ann_key="meta_schedule.unroll_explicit", ann_val=v119)
l120, l121, l122, l123, l124, l125 = sch.get_loops(block=b3)
l126 = sch.fuse(l120, l121, l122, l123, preserve_unit_iters=True)
v127 = sch.sample_categorical(candidates=[32, 64, 128, 256, 512, 1024], probs=[0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666], decision=2)
l128, l129 = sch.split(loop=l126, factors=[None, v127], preserve_unit_iters=True)
sch.bind(loop=l128, thread_axis="blockIdx.x")
sch.bind(loop=l129, thread_axis="threadIdx.x")
sch.enter_postproc()
sch.unannotate(block_or_loop=b97, ann_key="meta_schedule.cooperative_fetch")
l130, l131, l132, l133, l134 = sch.get_loops(block=b97)
l135, l136, l137 = sch.split(loop=l134, factors=[None, 32, 4], preserve_unit_iters=True)
sch.vectorize(loop=l137)
sch.bind(loop=l136, thread_axis="threadIdx.x")
sch.unannotate(block_or_loop=b108, ann_key="meta_schedule.cooperative_fetch")
l138, l139, l140, l141, l142 = sch.get_loops(block=b108)
l143, l144, l145 = sch.split(loop=l142, factors=[None, 32, 4], preserve_unit_iters=True)
sch.vectorize(loop=l145)
sch.bind(loop=l144, thread_axis="threadIdx.x")
b146 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b146, ann_key="meta_schedule.unroll_explicit")
b147, b148, b149, b150, b151, b152, b153, b154, b155 = sch.get_child_blocks(b146)
l156, l157, l158, l159, l160, l161 = sch.get_loops(block=b147)
l162, l163, l164, l165, l166, l167 = sch.get_loops(block=b148)
sch.annotate(block_or_loop=l162, ann_key="pragma_auto_unroll_max_step", ann_val=1024)
sch.annotate(block_or_loop=l162, ann_key="pragma_unroll_explicit", ann_val=1)
l168, l169, l170, l171, l172, l173 = sch.get_loops(block=b149)
l174, l175, l176, l177, l178, l179, l180 = sch.get_loops(block=b150)
l181, l182, l183, l184, l185, l186, l187 = sch.get_loops(block=b151)
l188, l189, l190, l191, l192, l193, l194, l195, l196, l197, l198, l199, l200, l201 = sch.get_loops(block=b152)
sch.annotate(block_or_loop=l188, ann_key="pragma_auto_unroll_max_step", ann_val=1024)
sch.annotate(block_or_loop=l188, ann_key="pragma_unroll_explicit", ann_val=1)
l202, l203, l204, l205, l206, l207, l208 = sch.get_loops(block=b153)
l209, l210, l211, l212, l213, l214, l215, l216 = sch.get_loops(block=b154)
sch.annotate(block_or_loop=l209, ann_key="pragma_auto_unroll_max_step", ann_val=1024)
sch.annotate(block_or_loop=l209, ann_key="pragma_unroll_explicit", ann_val=1)
l217, l218, l219, l220 = sch.get_loops(block=b155)
b221 = sch.get_block(name="data_pack", func_name="main")
l222, l223, l224, l225, l226, l227 = sch.get_loops(block=b221)
b228 = sch.decompose_reduction(block=b221, loop=l226)
b229 = sch.get_block(name="bgemm", func_name="main")
l230, l231, l232, l233, l234, l235, l236, l237, l238, l239, l240, l241, l242, l243 = sch.get_loops(block=b229)
b244 = sch.decompose_reduction(block=b229, loop=l233)
b245 = sch.get_block(name="inverse", func_name="main")
l246, l247, l248, l249, l250, l251, l252, l253 = sch.get_loops(block=b245)
b254 = sch.decompose_reduction(block=b245, loop=l252)
2024-04-29 03:17:15 [INFO] [evolutionary_search.cc:713] Generating candidates......
2024-04-29 03:17:19 [INFO] [evolutionary_search.cc:715] Picked top 102 candidate(s) from database
2024-04-29 03:17:26 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x43d23b8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x3ad3338)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x72c6e28)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x4cb1ce8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x5905ad8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x7272d28)]: 406 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x3ab3638)]: 0 failure(s)
2024-04-29 03:17:33 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x43d23b8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x3ad3338)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x72c6e28)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x4cb1ce8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x5905ad8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x7272d28)]: 809 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x3ab3638)]: 0 failure(s)
2024-04-29 03:17:40 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x43d23b8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x3ad3338)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x72c6e28)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x4cb1ce8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x5905ad8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x7272d28)]: 1212 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x3ab3638)]: 0 failure(s)
2024-04-29 03:17:47 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x43d23b8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x3ad3338)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x72c6e28)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x4cb1ce8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x5905ad8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x7272d28)]: 1618 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x3ab3638)]: 0 failure(s)
2024-04-29 03:17:54 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x43d23b8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x3ad3338)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x72c6e28)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x4cb1ce8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x5905ad8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x7272d28)]: 2019 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x3ab3638)]: 0 failure(s)
2024-04-29 03:18:00 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x43d23b8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x3ad3338)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x72c6e28)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x4cb1ce8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x5905ad8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x7272d28)]: 2423 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x3ab3638)]: 0 failure(s)
2024-04-29 03:18:07 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x43d23b8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x3ad3338)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x72c6e28)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x4cb1ce8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x5905ad8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x7272d28)]: 2827 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x3ab3638)]: 0 failure(s)
2024-04-29 03:18:14 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x43d23b8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x3ad3338)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x72c6e28)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x4cb1ce8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x5905ad8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x7272d28)]: 3231 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x3ab3638)]: 0 failure(s)
2024-04-29 03:18:21 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x43d23b8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x3ad3338)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x72c6e28)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x4cb1ce8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x5905ad8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x7272d28)]: 3637 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x3ab3638)]: 0 failure(s)
2024-04-29 03:18:21 [INFO] [evolutionary_search.cc:723] Sampled 53 candidate(s)
2024-04-29 03:18:40 [INFO] [evolutionary_search.cc:621] Evolve iter #0 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x43d23b8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x3ad3338)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x72c6e28)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x4cb1ce8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x5905ad8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x7272d28)]: 86 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x3ab3638)]: 0 failure(s)
2024-04-29 03:19:01 [INFO] [evolutionary_search.cc:621] Evolve iter #1 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x43d23b8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x3ad3338)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x72c6e28)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x4cb1ce8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x5905ad8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x7272d28)]: 111 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x3ab3638)]: 0 failure(s)
2024-04-29 03:19:23 [INFO] [evolutionary_search.cc:621] Evolve iter #2 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x43d23b8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x3ad3338)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x72c6e28)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x4cb1ce8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x5905ad8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x7272d28)]: 108 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x3ab3638)]: 0 failure(s)
2024-04-29 03:19:45 [INFO] [evolutionary_search.cc:621] Evolve iter #3 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x43d23b8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x3ad3338)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x72c6e28)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x4cb1ce8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x5905ad8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x7272d28)]: 98 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x3ab3638)]: 0 failure(s)
2024-04-29 03:19:49 [INFO] [evolutionary_search.cc:649] Scores of the best 64 candidates:
[1 : 16]:	0.9725  0.9721  0.9714  0.9708  0.9707  0.9690  0.9689  0.9688  0.9682  0.9682  0.9677  0.9673  0.9672  0.9666  0.9665  0.9662
[17 : 32]:	0.9662  0.9661  0.9658  0.9658  0.9654  0.9654  0.9654  0.9650  0.9645  0.9644  0.9643  0.9638  0.9635  0.9634  0.9632  0.9632
[33 : 48]:	0.9631  0.9629  0.9629  0.9629  0.9628  0.9628  0.9628  0.9626  0.9626  0.9626  0.9625  0.9623  0.9622  0.9621  0.9620  0.9619
[49 : 64]:	0.9618  0.9617  0.9617  0.9617  0.9617  0.9617  0.9613  0.9613  0.9613  0.9612  0.9612  0.9611  0.9609  0.9609  0.9609  0.9607
2024-04-29 03:19:50 [INFO] [evolutionary_search.cc:727] Got 64 candidate(s) with evolutionary search
2024-04-29 03:19:50 [INFO] [evolutionary_search.cc:730] Sending 64 candidates(s) for measurement
2024-04-29 03:20:57 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #1216: GFLOPs: 10296.8940. Time: 117.3401 us. Best GFLOPs: 10555.8999
2024-04-29 03:20:57 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #1217: GFLOPs: 10268.5959. Time: 117.6634 us. Best GFLOPs: 10555.8999
2024-04-29 03:20:57 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #1218: GFLOPs: 10336.6206. Time: 116.8891 us. Best GFLOPs: 10555.8999
2024-04-29 03:20:57 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #1219: GFLOPs: 10220.4602. Time: 118.2176 us. Best GFLOPs: 10555.8999
2024-04-29 03:20:57 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #1220: GFLOPs: 10314.4176. Time: 117.1407 us. Best GFLOPs: 10555.8999
2024-04-29 03:20:57 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #1221: GFLOPs: 9821.7856. Time: 123.0161 us. Best GFLOPs: 10555.8999
2024-04-29 03:20:57 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #1222: GFLOPs: 10081.3800. Time: 119.8485 us. Best GFLOPs: 10555.8999
2024-04-29 03:20:57 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #1223: GFLOPs: 10066.5144. Time: 120.0255 us. Best GFLOPs: 10555.8999
2024-04-29 03:20:57 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #1224: GFLOPs: 10103.5200. Time: 119.5859 us. Best GFLOPs: 10555.8999
2024-04-29 03:20:57 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #1225: GFLOPs: 10098.8051. Time: 119.6417 us. Best GFLOPs: 10555.8999
2024-04-29 03:20:57 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #1226: GFLOPs: 10269.9163. Time: 117.6483 us. Best GFLOPs: 10555.8999
2024-04-29 03:20:57 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #1227: GFLOPs: 10234.4869. Time: 118.0556 us. Best GFLOPs: 10555.8999
2024-04-29 03:20:57 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #1228: GFLOPs: 10096.3587. Time: 119.6707 us. Best GFLOPs: 10555.8999
2024-04-29 03:20:57 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #1229: GFLOPs: 10202.5074. Time: 118.4256 us. Best GFLOPs: 10555.8999
2024-04-29 03:20:57 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #1230: GFLOPs: 10308.0268. Time: 117.2133 us. Best GFLOPs: 10555.8999
2024-04-29 03:20:57 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #1231: GFLOPs: 10118.5895. Time: 119.4078 us. Best GFLOPs: 10555.8999
2024-04-29 03:20:57 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #1232: GFLOPs: 10119.1040. Time: 119.4017 us. Best GFLOPs: 10555.8999
2024-04-29 03:20:57 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #1233: GFLOPs: 10124.7109. Time: 119.3356 us. Best GFLOPs: 10555.8999
2024-04-29 03:20:57 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #1234: GFLOPs: 10062.7685. Time: 120.0701 us. Best GFLOPs: 10555.8999
2024-04-29 03:20:57 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #1235: GFLOPs: 10195.0154. Time: 118.5126 us. Best GFLOPs: 10555.8999
2024-04-29 03:20:57 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #1236: GFLOPs: 10098.8081. Time: 119.6417 us. Best GFLOPs: 10555.8999
2024-04-29 03:20:57 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #1237: GFLOPs: 10117.0046. Time: 119.4265 us. Best GFLOPs: 10555.8999
2024-04-29 03:20:57 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #1238: GFLOPs: 10209.1285. Time: 118.3488 us. Best GFLOPs: 10555.8999
2024-04-29 03:20:57 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #1239: GFLOPs: 10201.6051. Time: 118.4361 us. Best GFLOPs: 10555.8999
2024-04-29 03:20:57 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #1240: GFLOPs: 10113.1391. Time: 119.4721 us. Best GFLOPs: 10555.8999
2024-04-29 03:20:57 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #1241: GFLOPs: 10538.9100. Time: 114.6454 us. Best GFLOPs: 10555.8999
2024-04-29 03:20:57 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #1242: GFLOPs: 10101.9961. Time: 119.6039 us. Best GFLOPs: 10555.8999
2024-04-29 03:20:57 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #1243: GFLOPs: 10121.3293. Time: 119.3754 us. Best GFLOPs: 10555.8999
2024-04-29 03:20:57 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #1244: GFLOPs: 10095.9332. Time: 119.6757 us. Best GFLOPs: 10555.8999
2024-04-29 03:20:57 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #1245: GFLOPs: 10124.2087. Time: 119.3415 us. Best GFLOPs: 10555.8999
2024-04-29 03:20:57 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #1246: GFLOPs: 10138.3769. Time: 119.1747 us. Best GFLOPs: 10555.8999
2024-04-29 03:20:57 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #1247: GFLOPs: 10122.0611. Time: 119.3668 us. Best GFLOPs: 10555.8999
2024-04-29 03:20:57 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #1248: GFLOPs: 9697.4385. Time: 124.5935 us. Best GFLOPs: 10555.8999
2024-04-29 03:20:57 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #1249: GFLOPs: 10063.3818. Time: 120.0628 us. Best GFLOPs: 10555.8999
2024-04-29 03:20:57 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #1250: GFLOPs: 10134.3816. Time: 119.2217 us. Best GFLOPs: 10555.8999
2024-04-29 03:20:57 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #1251: GFLOPs: 10171.5223. Time: 118.7864 us. Best GFLOPs: 10555.8999
2024-04-29 03:20:57 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #1252: GFLOPs: 10062.4157. Time: 120.0744 us. Best GFLOPs: 10555.8999
2024-04-29 03:20:57 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #1253: GFLOPs: 10087.8227. Time: 119.7719 us. Best GFLOPs: 10555.8999
2024-04-29 03:20:57 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #1254: GFLOPs: 10074.0736. Time: 119.9354 us. Best GFLOPs: 10555.8999
2024-04-29 03:20:57 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #1255: GFLOPs: 10210.6556. Time: 118.3311 us. Best GFLOPs: 10555.8999
2024-04-29 03:20:57 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #1256: GFLOPs: 10211.2365. Time: 118.3244 us. Best GFLOPs: 10555.8999
2024-04-29 03:20:57 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #1257: GFLOPs: 10012.5347. Time: 120.6725 us. Best GFLOPs: 10555.8999
2024-04-29 03:20:57 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #1258: GFLOPs: 10070.3580. Time: 119.9797 us. Best GFLOPs: 10555.8999
2024-04-29 03:20:57 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #1259: GFLOPs: 10121.2411. Time: 119.3765 us. Best GFLOPs: 10555.8999
2024-04-29 03:20:57 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #1260: GFLOPs: 10140.3539. Time: 119.1515 us. Best GFLOPs: 10555.8999
2024-04-29 03:20:57 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #1261: GFLOPs: 10200.4030. Time: 118.4500 us. Best GFLOPs: 10555.8999
2024-04-29 03:20:57 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #1262: GFLOPs: 10128.7620. Time: 119.2878 us. Best GFLOPs: 10555.8999
2024-04-29 03:20:57 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #1263: GFLOPs: 9987.9973. Time: 120.9690 us. Best GFLOPs: 10555.8999
2024-04-29 03:20:57 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #1264: GFLOPs: 10111.7514. Time: 119.4885 us. Best GFLOPs: 10555.8999
2024-04-29 03:20:57 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #1265: GFLOPs: 10124.6046. Time: 119.3368 us. Best GFLOPs: 10555.8999
2024-04-29 03:20:57 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #1266: GFLOPs: 10079.3713. Time: 119.8724 us. Best GFLOPs: 10555.8999
2024-04-29 03:20:57 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #1267: GFLOPs: 10172.6475. Time: 118.7732 us. Best GFLOPs: 10555.8999
2024-04-29 03:20:57 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #1268: GFLOPs: 9995.2462. Time: 120.8813 us. Best GFLOPs: 10555.8999
2024-04-29 03:20:57 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #1269: GFLOPs: 10096.4637. Time: 119.6694 us. Best GFLOPs: 10555.8999
2024-04-29 03:20:57 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #1270: GFLOPs: 10082.1184. Time: 119.8397 us. Best GFLOPs: 10555.8999
2024-04-29 03:20:57 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #1271: GFLOPs: 10137.6654. Time: 119.1831 us. Best GFLOPs: 10555.8999
2024-04-29 03:20:57 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #1272: GFLOPs: 10119.3627. Time: 119.3986 us. Best GFLOPs: 10555.8999
2024-04-29 03:20:57 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #1273: GFLOPs: 10132.4518. Time: 119.2444 us. Best GFLOPs: 10555.8999
2024-04-29 03:20:57 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #1274: GFLOPs: 10119.5608. Time: 119.3963 us. Best GFLOPs: 10555.8999
2024-04-29 03:20:57 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #1275: GFLOPs: 10132.7809. Time: 119.2405 us. Best GFLOPs: 10555.8999
2024-04-29 03:20:57 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #1276: GFLOPs: 10128.1677. Time: 119.2948 us. Best GFLOPs: 10555.8999
2024-04-29 03:20:57 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #1277: GFLOPs: 8048.0683. Time: 150.1277 us. Best GFLOPs: 10555.8999
2024-04-29 03:20:57 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #1278: GFLOPs: 2157.8243. Time: 559.9335 us. Best GFLOPs: 10555.8999
2024-04-29 03:20:57 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #1279: GFLOPs: 3204.5749. Time: 377.0354 us. Best GFLOPs: 10555.8999
2024-04-29 03:34:24 [INFO] [evolutionary_search.cc:713] Generating candidates......
2024-04-29 03:34:27 [INFO] [evolutionary_search.cc:715] Picked top 102 candidate(s) from database
2024-04-29 03:34:34 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x43d23b8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x3ad3338)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x72c6e28)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x4cb1ce8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x5905ad8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x7272d28)]: 404 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x3ab3638)]: 0 failure(s)
2024-04-29 03:34:41 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x43d23b8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x3ad3338)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x72c6e28)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x4cb1ce8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x5905ad8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x7272d28)]: 809 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x3ab3638)]: 0 failure(s)
2024-04-29 03:34:48 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x43d23b8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x3ad3338)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x72c6e28)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x4cb1ce8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x5905ad8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x7272d28)]: 1211 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x3ab3638)]: 0 failure(s)
2024-04-29 03:34:54 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x43d23b8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x3ad3338)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x72c6e28)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x4cb1ce8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x5905ad8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x7272d28)]: 1616 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x3ab3638)]: 0 failure(s)
2024-04-29 03:35:01 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x43d23b8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x3ad3338)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x72c6e28)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x4cb1ce8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x5905ad8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x7272d28)]: 2021 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x3ab3638)]: 0 failure(s)
2024-04-29 03:35:09 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x43d23b8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x3ad3338)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x72c6e28)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x4cb1ce8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x5905ad8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x7272d28)]: 2425 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x3ab3638)]: 0 failure(s)
2024-04-29 03:35:15 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x43d23b8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x3ad3338)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x72c6e28)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x4cb1ce8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x5905ad8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x7272d28)]: 2831 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x3ab3638)]: 0 failure(s)
2024-04-29 03:35:22 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x43d23b8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x3ad3338)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x72c6e28)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x4cb1ce8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x5905ad8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x7272d28)]: 3237 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x3ab3638)]: 0 failure(s)
2024-04-29 03:35:29 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x43d23b8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x3ad3338)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x72c6e28)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x4cb1ce8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x5905ad8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x7272d28)]: 3638 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x3ab3638)]: 0 failure(s)
2024-04-29 03:35:29 [INFO] [evolutionary_search.cc:723] Sampled 52 candidate(s)
2024-04-29 03:35:48 [INFO] [evolutionary_search.cc:621] Evolve iter #0 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x43d23b8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x3ad3338)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x72c6e28)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x4cb1ce8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x5905ad8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x7272d28)]: 97 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x3ab3638)]: 0 failure(s)
2024-04-29 03:36:10 [INFO] [evolutionary_search.cc:621] Evolve iter #1 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x43d23b8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x3ad3338)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x72c6e28)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x4cb1ce8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x5905ad8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x7272d28)]: 95 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x3ab3638)]: 0 failure(s)
2024-04-29 03:36:32 [INFO] [evolutionary_search.cc:621] Evolve iter #2 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x43d23b8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x3ad3338)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x72c6e28)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x4cb1ce8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x5905ad8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x7272d28)]: 89 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x3ab3638)]: 0 failure(s)
2024-04-29 03:36:54 [INFO] [evolutionary_search.cc:621] Evolve iter #3 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x43d23b8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x3ad3338)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x72c6e28)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x4cb1ce8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x5905ad8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x7272d28)]: 120 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x3ab3638)]: 0 failure(s)
2024-04-29 03:36:59 [INFO] [evolutionary_search.cc:649] Scores of the best 64 candidates:
[1 : 16]:	0.9727  0.9720  0.9711  0.9709  0.9704  0.9702  0.9688  0.9686  0.9685  0.9684  0.9681  0.9676  0.9676  0.9675  0.9669  0.9668
[17 : 32]:	0.9666  0.9664  0.9662  0.9661  0.9661  0.9656  0.9654  0.9654  0.9653  0.9652  0.9652  0.9648  0.9648  0.9645  0.9643  0.9643
[33 : 48]:	0.9638  0.9638  0.9638  0.9638  0.9637  0.9634  0.9634  0.9633  0.9633  0.9631  0.9631  0.9630  0.9630  0.9630  0.9629  0.9629
[49 : 64]:	0.9629  0.9627  0.9627  0.9627  0.9622  0.9621  0.9617  0.9616  0.9614  0.9614  0.9614  0.9613  0.9613  0.9613  0.9610  0.9610
2024-04-29 03:36:59 [INFO] [evolutionary_search.cc:727] Got 64 candidate(s) with evolutionary search
2024-04-29 03:36:59 [INFO] [evolutionary_search.cc:730] Sending 64 candidates(s) for measurement
2024-04-29 03:38:04 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #1280: GFLOPs: 10089.7372. Time: 119.7492 us. Best GFLOPs: 10555.8999
2024-04-29 03:38:04 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #1281: GFLOPs: 10316.3691. Time: 117.1185 us. Best GFLOPs: 10555.8999
2024-04-29 03:38:04 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #1282: GFLOPs: 10310.7401. Time: 117.1825 us. Best GFLOPs: 10555.8999
2024-04-29 03:38:04 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #1283: GFLOPs: 10184.2522. Time: 118.6379 us. Best GFLOPs: 10555.8999
2024-04-29 03:38:04 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #1284: GFLOPs: 10248.5280. Time: 117.8938 us. Best GFLOPs: 10555.8999
2024-04-29 03:38:04 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #1285: GFLOPs: 10309.2855. Time: 117.1990 us. Best GFLOPs: 10555.8999
2024-04-29 03:38:04 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #1286: GFLOPs: 10048.3019. Time: 120.2430 us. Best GFLOPs: 10555.8999
2024-04-29 03:38:04 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #1287: GFLOPs: 10101.4093. Time: 119.6108 us. Best GFLOPs: 10555.8999
2024-04-29 03:38:04 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #1288: GFLOPs: 10086.7227. Time: 119.7850 us. Best GFLOPs: 10555.8999
2024-04-29 03:38:04 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #1289: GFLOPs: 10045.0458. Time: 120.2820 us. Best GFLOPs: 10555.8999
2024-04-29 03:38:04 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #1290: GFLOPs: 10169.5072. Time: 118.8099 us. Best GFLOPs: 10555.8999
2024-04-29 03:38:04 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #1291: GFLOPs: 10182.5598. Time: 118.6576 us. Best GFLOPs: 10555.8999
2024-04-29 03:38:04 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #1292: GFLOPs: 10084.2120. Time: 119.8148 us. Best GFLOPs: 10555.8999
2024-04-29 03:38:04 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #1293: GFLOPs: 10070.1236. Time: 119.9824 us. Best GFLOPs: 10555.8999
2024-04-29 03:38:04 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #1294: GFLOPs: 10225.0127. Time: 118.1649 us. Best GFLOPs: 10555.8999
2024-04-29 03:38:04 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #1295: GFLOPs: 10221.6748. Time: 118.2035 us. Best GFLOPs: 10555.8999
2024-04-29 03:38:04 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #1296: GFLOPs: 10216.1603. Time: 118.2673 us. Best GFLOPs: 10555.8999
2024-04-29 03:38:04 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #1297: GFLOPs: 10321.2567. Time: 117.0631 us. Best GFLOPs: 10555.8999
2024-04-29 03:38:04 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #1298: GFLOPs: 10062.5435. Time: 120.0728 us. Best GFLOPs: 10555.8999
2024-04-29 03:38:04 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #1299: GFLOPs: 10229.7501. Time: 118.1102 us. Best GFLOPs: 10555.8999
2024-04-29 03:38:04 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #1300: GFLOPs: 10212.4029. Time: 118.3109 us. Best GFLOPs: 10555.8999
2024-04-29 03:38:04 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #1301: GFLOPs: 10101.5493. Time: 119.6092 us. Best GFLOPs: 10555.8999
2024-04-29 03:38:04 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #1302: GFLOPs: 10017.3867. Time: 120.6141 us. Best GFLOPs: 10555.8999
2024-04-29 03:38:04 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #1303: GFLOPs: 10084.6852. Time: 119.8092 us. Best GFLOPs: 10555.8999
2024-04-29 03:38:04 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #1304: GFLOPs: 10119.7769. Time: 119.3937 us. Best GFLOPs: 10555.8999
2024-04-29 03:38:04 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #1305: GFLOPs: 10227.4405. Time: 118.1369 us. Best GFLOPs: 10555.8999
2024-04-29 03:38:04 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #1306: GFLOPs: 10018.9536. Time: 120.5952 us. Best GFLOPs: 10555.8999
2024-04-29 03:38:04 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #1307: GFLOPs: 10076.7818. Time: 119.9032 us. Best GFLOPs: 10555.8999
2024-04-29 03:38:04 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #1308: GFLOPs: 10098.0947. Time: 119.6501 us. Best GFLOPs: 10555.8999
2024-04-29 03:38:04 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #1309: GFLOPs: 10367.4953. Time: 116.5410 us. Best GFLOPs: 10555.8999
2024-04-29 03:38:04 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #1310: GFLOPs: 10081.6510. Time: 119.8453 us. Best GFLOPs: 10555.8999
2024-04-29 03:38:04 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #1311: GFLOPs: 10187.2923. Time: 118.6025 us. Best GFLOPs: 10555.8999
2024-04-29 03:38:04 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #1312: GFLOPs: 10155.7411. Time: 118.9709 us. Best GFLOPs: 10555.8999
2024-04-29 03:38:04 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #1313: GFLOPs: 10249.1723. Time: 117.8864 us. Best GFLOPs: 10555.8999
2024-04-29 03:38:04 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #1314: GFLOPs: 10201.9818. Time: 118.4317 us. Best GFLOPs: 10555.8999
2024-04-29 03:38:04 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #1315: GFLOPs: 10064.9573. Time: 120.0440 us. Best GFLOPs: 10555.8999
2024-04-29 03:38:04 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #1316: GFLOPs: 10089.8292. Time: 119.7481 us. Best GFLOPs: 10555.8999
2024-04-29 03:38:04 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #1317: GFLOPs: 10097.6573. Time: 119.6553 us. Best GFLOPs: 10555.8999
2024-04-29 03:38:04 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #1318: GFLOPs: 10086.8673. Time: 119.7833 us. Best GFLOPs: 10555.8999
2024-04-29 03:38:04 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #1319: GFLOPs: 10004.0267. Time: 120.7752 us. Best GFLOPs: 10555.8999
2024-04-29 03:38:04 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #1320: GFLOPs: 10036.3451. Time: 120.3863 us. Best GFLOPs: 10555.8999
2024-04-29 03:38:04 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #1321: GFLOPs: 9980.4713. Time: 121.0602 us. Best GFLOPs: 10555.8999
2024-04-29 03:38:04 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #1322: GFLOPs: 10123.0668. Time: 119.3549 us. Best GFLOPs: 10555.8999
2024-04-29 03:38:04 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #1323: GFLOPs: 10201.8295. Time: 118.4335 us. Best GFLOPs: 10555.8999
2024-04-29 03:38:04 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #1324: GFLOPs: 10170.8172. Time: 118.7946 us. Best GFLOPs: 10555.8999
2024-04-29 03:38:04 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #1325: GFLOPs: 10216.2522. Time: 118.2663 us. Best GFLOPs: 10555.8999
2024-04-29 03:38:04 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #1326: GFLOPs: 10085.1893. Time: 119.8032 us. Best GFLOPs: 10555.8999
2024-04-29 03:38:04 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #1327: GFLOPs: 10121.5776. Time: 119.3725 us. Best GFLOPs: 10555.8999
2024-04-29 03:38:04 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #1328: GFLOPs: 10134.3816. Time: 119.2217 us. Best GFLOPs: 10555.8999
2024-04-29 03:38:04 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #1329: GFLOPs: 10088.2471. Time: 119.7669 us. Best GFLOPs: 10555.8999
2024-04-29 03:38:04 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #1330: GFLOPs: 10089.5173. Time: 119.7518 us. Best GFLOPs: 10555.8999
2024-04-29 03:38:04 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #1331: GFLOPs: 10064.4813. Time: 120.0497 us. Best GFLOPs: 10555.8999
2024-04-29 03:38:04 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #1332: GFLOPs: 10134.3681. Time: 119.2218 us. Best GFLOPs: 10555.8999
2024-04-29 03:38:04 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #1333: GFLOPs: 9988.0365. Time: 120.9685 us. Best GFLOPs: 10555.8999
2024-04-29 03:38:04 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #1334: GFLOPs: 10131.1992. Time: 119.2591 us. Best GFLOPs: 10555.8999
2024-04-29 03:38:04 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #1335: GFLOPs: 10092.7186. Time: 119.7138 us. Best GFLOPs: 10555.8999
2024-04-29 03:38:04 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #1336: GFLOPs: 10119.9005. Time: 119.3923 us. Best GFLOPs: 10555.8999
2024-04-29 03:38:04 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #1337: GFLOPs: 10122.3891. Time: 119.3629 us. Best GFLOPs: 10555.8999
2024-04-29 03:38:04 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #1338: GFLOPs: 9999.2244. Time: 120.8332 us. Best GFLOPs: 10555.8999
2024-04-29 03:38:04 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #1339: GFLOPs: 10137.1862. Time: 119.1887 us. Best GFLOPs: 10555.8999
2024-04-29 03:38:04 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #1340: GFLOPs: 10102.4502. Time: 119.5985 us. Best GFLOPs: 10555.8999
2024-04-29 03:38:04 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #1341: GFLOPs: 5776.9252. Time: 209.1490 us. Best GFLOPs: 10555.8999
2024-04-29 03:38:04 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #1342: GFLOPs: 3224.7951. Time: 374.6713 us. Best GFLOPs: 10555.8999
2024-04-29 03:38:04 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_3] Trial #1343: GFLOPs: 4431.4973. Time: 272.6478 us. Best GFLOPs: 10555.8999
