2024-04-28 19:49:56 [INFO] [task_scheduler.cc:160] Initializing Task #0: "fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu"
2024-04-28 19:49:56 [INFO] [task_scheduler.cc:35] 
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(3), T.int64(224), T.int64(224)), "float32"), p1: T.Buffer((T.int64(6), T.int64(6), T.int64(3), T.int64(64)), "float32"), p2: T.Buffer((T.int64(1), T.int64(64), T.int64(1), T.int64(1)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(64), T.int64(224), T.int64(224)), "float32")):
        T.func_attr({"layout_free_buffers": [1], "tir.noalias": T.bool(True)})
        # with T.block("root"):
        data_pad = T.alloc_buffer((T.int64(1), T.int64(3), T.int64(226), T.int64(226)))
        input_tile = T.alloc_buffer((T.int64(3), T.int64(3136), T.int64(6), T.int64(6)))
        B = T.alloc_buffer((T.int64(6), T.int64(6)))
        data_pack = T.alloc_buffer((T.int64(6), T.int64(6), T.int64(3), T.int64(3136)))
        bgemm = T.alloc_buffer((T.int64(6), T.int64(6), T.int64(64), T.int64(3136)))
        A = T.alloc_buffer((T.int64(6), T.int64(4)))
        inverse = T.alloc_buffer((T.int64(64), T.int64(3136), T.int64(4), T.int64(4)))
        conv2d_winograd = T.alloc_buffer((T.int64(1), T.int64(64), T.int64(224), T.int64(224)))
        T_add = T.alloc_buffer((T.int64(1), T.int64(64), T.int64(224), T.int64(224)))
        for i0, i1, i2, i3 in T.grid(T.int64(1), T.int64(3), T.int64(226), T.int64(226)):
            with T.block("data_pad"):
                v_i0, v_i1, v_i2, v_i3 = T.axis.remap("SSSS", [i0, i1, i2, i3])
                T.reads(p0[v_i0, v_i1, v_i2 - T.int64(1), v_i3 - T.int64(1)])
                T.writes(data_pad[v_i0, v_i1, v_i2, v_i3])
                data_pad[v_i0, v_i1, v_i2, v_i3] = T.if_then_else(T.int64(1) <= v_i2 and v_i2 < T.int64(225) and T.int64(1) <= v_i3 and v_i3 < T.int64(225), p0[v_i0, v_i1, v_i2 - T.int64(1), v_i3 - T.int64(1)], T.float32(0))
        for ci, p, eps, nu in T.grid(T.int64(3), T.int64(3136), T.int64(6), T.int64(6)):
            with T.block("input_tile"):
                v_ci, v_p, v_eps, v_nu = T.axis.remap("SSSS", [ci, p, eps, nu])
                T.reads(data_pad[v_p // T.int64(3136), v_ci, v_p % T.int64(3136) // T.int64(56) * T.int64(4) + v_eps, v_p % T.int64(56) * T.int64(4) + v_nu])
                T.writes(input_tile[v_ci, v_p, v_eps, v_nu])
                T.block_attr({"schedule_rule": "None"})
                input_tile[v_ci, v_p, v_eps, v_nu] = data_pad[v_p // T.int64(3136), v_ci, v_p % T.int64(3136) // T.int64(56) * T.int64(4) + v_eps, v_p % T.int64(56) * T.int64(4) + v_nu]
        for i, j in T.grid(T.int64(6), T.int64(6)):
            with T.block("B"):
                v_i, v_j = T.axis.remap("SS", [i, j])
                T.reads()
                T.writes(B[v_i, v_j])
                T.block_attr({"schedule_rule": "None"})
                B[v_i, v_j] = T.Select(v_i % T.int64(6) == T.int64(5) and v_j % T.int64(6) == T.int64(5), T.float32(1), T.Select(v_i % T.int64(6) == T.int64(5) and v_j % T.int64(6) == T.int64(4), T.float32(0), T.Select(v_i % T.int64(6) == T.int64(5) and v_j % T.int64(6) == T.int64(3), T.float32(0), T.Select(v_i % T.int64(6) == T.int64(5) and v_j % T.int64(6) == T.int64(2), T.float32(0), T.Select(v_i % T.int64(6) == T.int64(5) and v_j % T.int64(6) == T.int64(1), T.float32(0), T.Select(v_i % T.int64(6) == T.int64(5) and v_j % T.int64(6) == T.int64(0), T.float32(0), T.Select(v_i % T.int64(6) == T.int64(4) and v_j % T.int64(6) == T.int64(5), T.float32(1.5), T.Select(v_i % T.int64(6) == T.int64(4) and v_j % T.int64(6) == T.int64(4), T.float32(1), T.Select(v_i % T.int64(6) == T.int64(4) and v_j % T.int64(6) == T.int64(3), T.float32(1), T.Select(v_i % T.int64(6) == T.int64(4) and v_j % T.int64(6) == T.int64(2), T.float32(1), T.Select(v_i % T.int64(6) == T.int64(4) and v_j % T.int64(6) == T.int64(1), T.float32(1), T.Select(v_i % T.int64(6) == T.int64(4) and v_j % T.int64(6) == T.int64(0), T.float32(1), T.Select(v_i % T.int64(6) == T.int64(3) and v_j % T.int64(6) == T.int64(5), T.float32(-2), T.Select(v_i % T.int64(6) == T.int64(3) and v_j % T.int64(6) == T.int64(4), T.float32(-0.5), T.Select(v_i % T.int64(6) == T.int64(3) and v_j % T.int64(6) == T.int64(3), T.float32(2), T.Select(v_i % T.int64(6) == T.int64(3) and v_j % T.int64(6) == T.int64(2), T.float32(2.5), T.Select(v_i % T.int64(6) == T.int64(3) and v_j % T.int64(6) == T.int64(1), T.float32(0.5), T.Select(v_i % T.int64(6) == T.int64(3) and v_j % T.int64(6) == T.int64(0), T.float32(1.5), T.Select(v_i % T.int64(6) == T.int64(2) and v_j % T.int64(6) == T.int64(5), T.float32(-1.5), T.Select(v_i % T.int64(6) == T.int64(2) and v_j % T.int64(6) == T.int64(4), T.float32(-1), T.Select(v_i % T.int64(6) == T.int64(2) and v_j % T.int64(6) == T.int64(3), T.float32(-1), T.Select(v_i % T.int64(6) == T.int64(2) and v_j % T.int64(6) == T.int64(2), T.float32(0.5), T.Select(v_i % T.int64(6) == T.int64(2) and v_j % T.int64(6) == T.int64(1), T.float32(-2.5), T.Select(v_i % T.int64(6) == T.int64(2) and v_j % T.int64(6) == T.int64(0), T.float32(-2), T.Select(v_i % T.int64(6) == T.int64(1) and v_j % T.int64(6) == T.int64(5), T.float32(1), T.Select(v_i % T.int64(6) == T.int64(1) and v_j % T.int64(6) == T.int64(4), T.float32(0.5), T.Select(v_i % T.int64(6) == T.int64(1) and v_j % T.int64(6) == T.int64(3), T.float32(-2), T.Select(v_i % T.int64(6) == T.int64(1) and v_j % T.int64(6) == T.int64(2), T.float32(-1), T.Select(v_i % T.int64(6) == T.int64(1) and v_j % T.int64(6) == T.int64(1), T.float32(1), T.Select(v_i % T.int64(6) == T.int64(1) and v_j % T.int64(6) == T.int64(0), T.float32(-1.5), T.Select(v_i % T.int64(6) == T.int64(0) and v_j % T.int64(6) == T.int64(5), T.float32(0), T.Select(v_i % T.int64(6) == T.int64(0) and v_j % T.int64(6) == T.int64(4), T.float32(0), T.Select(v_i % T.int64(6) == T.int64(0) and v_j % T.int64(6) == T.int64(3), T.float32(0), T.Select(v_i % T.int64(6) == T.int64(0) and v_j % T.int64(6) == T.int64(2), T.float32(0), T.Select(v_i % T.int64(6) == T.int64(0) and v_j % T.int64(6) == T.int64(1), T.float32(0), T.Select(v_i % T.int64(6) == T.int64(0) and v_j % T.int64(6) == T.int64(0), T.float32(1), T.float32(0)))))))))))))))))))))))))))))))))))))
        for eps, nu, ci, p, r_a, r_b in T.grid(T.int64(6), T.int64(6), T.int64(3), T.int64(3136), T.int64(6), T.int64(6)):
            with T.block("data_pack"):
                v_eps, v_nu, v_ci, v_p, v_r_a, v_r_b = T.axis.remap("SSSSRR", [eps, nu, ci, p, r_a, r_b])
                T.reads(input_tile[v_ci, v_p, v_r_a, v_r_b], B[T.min(v_r_a, v_r_b):T.min(v_r_a, v_r_b) + (T.max(v_r_a, v_r_b) + T.int64(1) - T.min(v_r_a, v_r_b)), T.min(v_eps, v_nu):T.min(v_eps, v_nu) + (T.max(v_eps, v_nu) + T.int64(1) - T.min(v_eps, v_nu))])
                T.writes(data_pack[v_eps, v_nu, v_ci, v_p])
                T.block_attr({"schedule_rule": "conv2d_nchw_winograd_data_pack"})
                with T.init():
                    data_pack[v_eps, v_nu, v_ci, v_p] = T.float32(0)
                data_pack[v_eps, v_nu, v_ci, v_p] = data_pack[v_eps, v_nu, v_ci, v_p] + input_tile[v_ci, v_p, v_r_a, v_r_b] * B[v_r_a, v_eps] * B[v_r_b, v_nu]
        for eps, nu, co, p, ci in T.grid(T.int64(6), T.int64(6), T.int64(64), T.int64(3136), T.int64(3)):
            with T.block("bgemm"):
                v_eps, v_nu, v_co, v_p, v_ci = T.axis.remap("SSSSR", [eps, nu, co, p, ci])
                T.reads(data_pack[v_eps, v_nu, v_ci, v_p], p1[v_eps, v_nu, v_ci, v_co])
                T.writes(bgemm[v_eps, v_nu, v_co, v_p])
                with T.init():
                    bgemm[v_eps, v_nu, v_co, v_p] = T.float32(0)
                bgemm[v_eps, v_nu, v_co, v_p] = bgemm[v_eps, v_nu, v_co, v_p] + data_pack[v_eps, v_nu, v_ci, v_p] * p1[v_eps, v_nu, v_ci, v_co]
        for i, j in T.grid(T.int64(6), T.int64(4)):
            with T.block("A"):
                v_i, v_j = T.axis.remap("SS", [i, j])
                T.reads()
                T.writes(A[v_i, v_j])
                T.block_attr({"schedule_rule": "None"})
                A[v_i, v_j] = T.Select(v_i % T.int64(6) == T.int64(5) and v_j % T.int64(4) == T.int64(3), T.float32(1), T.Select(v_i % T.int64(6) == T.int64(5) and v_j % T.int64(4) == T.int64(2), T.float32(0), T.Select(v_i % T.int64(6) == T.int64(5) and v_j % T.int64(4) == T.int64(1), T.float32(0), T.Select(v_i % T.int64(6) == T.int64(5) and v_j % T.int64(4) == T.int64(0), T.float32(0), T.Select(v_i % T.int64(6) == T.int64(4) and v_j % T.int64(4) == T.int64(3), T.float32(-8), T.Select(v_i % T.int64(6) == T.int64(4) and v_j % T.int64(4) == T.int64(2), T.float32(4), T.Select(v_i % T.int64(6) == T.int64(4) and v_j % T.int64(4) == T.int64(1), T.float32(-2), T.Select(v_i % T.int64(6) == T.int64(4) and v_j % T.int64(4) == T.int64(0), T.float32(1), T.Select(v_i % T.int64(6) == T.int64(3) and v_j % T.int64(4) == T.int64(3), T.float32(0.125), T.Select(v_i % T.int64(6) == T.int64(3) and v_j % T.int64(4) == T.int64(2), T.float32(0.25), T.Select(v_i % T.int64(6) == T.int64(3) and v_j % T.int64(4) == T.int64(1), T.float32(0.5), T.Select(v_i % T.int64(6) == T.int64(3) and v_j % T.int64(4) == T.int64(0), T.float32(1), T.Select(v_i % T.int64(6) == T.int64(2) and v_j % T.int64(4) == T.int64(3), T.float32(1), T.Select(v_i % T.int64(6) == T.int64(2) and v_j % T.int64(4) == T.int64(2), T.float32(1), T.Select(v_i % T.int64(6) == T.int64(2) and v_j % T.int64(4) == T.int64(1), T.float32(1), T.Select(v_i % T.int64(6) == T.int64(2) and v_j % T.int64(4) == T.int64(0), T.float32(1), T.Select(v_i % T.int64(6) == T.int64(1) and v_j % T.int64(4) == T.int64(3), T.float32(-1), T.Select(v_i % T.int64(6) == T.int64(1) and v_j % T.int64(4) == T.int64(2), T.float32(1), T.Select(v_i % T.int64(6) == T.int64(1) and v_j % T.int64(4) == T.int64(1), T.float32(-1), T.Select(v_i % T.int64(6) == T.int64(1) and v_j % T.int64(4) == T.int64(0), T.float32(1), T.Select(v_i % T.int64(6) == T.int64(0) and v_j % T.int64(4) == T.int64(3), T.float32(0), T.Select(v_i % T.int64(6) == T.int64(0) and v_j % T.int64(4) == T.int64(2), T.float32(0), T.Select(v_i % T.int64(6) == T.int64(0) and v_j % T.int64(4) == T.int64(1), T.float32(0), T.Select(v_i % T.int64(6) == T.int64(0) and v_j % T.int64(4) == T.int64(0), T.float32(1), T.float32(0)))))))))))))))))))))))))
        for co, p, vh, vw, r_a, r_b in T.grid(T.int64(64), T.int64(3136), T.int64(4), T.int64(4), T.int64(6), T.int64(6)):
            with T.block("inverse"):
                v_co, v_p, v_vh, v_vw, v_r_a, v_r_b = T.axis.remap("SSSSRR", [co, p, vh, vw, r_a, r_b])
                T.reads(bgemm[v_r_a, v_r_b, v_co, v_p], A[T.min(v_r_a, v_r_b):T.min(v_r_a, v_r_b) + (T.max(v_r_a, v_r_b) + T.int64(1) - T.min(v_r_a, v_r_b)), T.min(v_vh, v_vw):T.min(v_vh, v_vw) + (T.max(v_vh, v_vw) + T.int64(1) - T.min(v_vh, v_vw))])
                T.writes(inverse[v_co, v_p, v_vh, v_vw])
                T.block_attr({"schedule_rule": "conv2d_nchw_winograd_inverse"})
                with T.init():
                    inverse[v_co, v_p, v_vh, v_vw] = T.float32(0)
                inverse[v_co, v_p, v_vh, v_vw] = inverse[v_co, v_p, v_vh, v_vw] + bgemm[v_r_a, v_r_b, v_co, v_p] * A[v_r_a, v_vh] * A[v_r_b, v_vw]
        for n, co, h, w in T.grid(T.int64(1), T.int64(64), T.int64(224), T.int64(224)):
            with T.block("conv2d_winograd"):
                v_n, v_co, v_h, v_w = T.axis.remap("SSSS", [n, co, h, w])
                T.reads(inverse[v_co, v_n * T.int64(3136) + v_h // T.int64(4) * T.int64(56) + v_w // T.int64(4), v_h % T.int64(4), v_w % T.int64(4)])
                T.writes(conv2d_winograd[v_n, v_co, v_h, v_w])
                conv2d_winograd[v_n, v_co, v_h, v_w] = inverse[v_co, v_n * T.int64(3136) + v_h // T.int64(4) * T.int64(56) + v_w // T.int64(4), v_h % T.int64(4), v_w % T.int64(4)]
        for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(64), T.int64(224), T.int64(224)):
            with T.block("T_add"):
                v_ax0, v_ax1, v_ax2, v_ax3 = T.axis.remap("SSSS", [ax0, ax1, ax2, ax3])
                T.reads(conv2d_winograd[v_ax0, v_ax1, v_ax2, v_ax3], p2[v_ax0, v_ax1, T.int64(0), T.int64(0)])
                T.writes(T_add[v_ax0, v_ax1, v_ax2, v_ax3])
                T_add[v_ax0, v_ax1, v_ax2, v_ax3] = conv2d_winograd[v_ax0, v_ax1, v_ax2, v_ax3] + p2[v_ax0, v_ax1, T.int64(0), T.int64(0)]
        for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(64), T.int64(224), T.int64(224)):
            with T.block("T_relu"):
                v_ax0, v_ax1, v_ax2, v_ax3 = T.axis.remap("SSSS", [ax0, ax1, ax2, ax3])
                T.reads(T_add[v_ax0, v_ax1, v_ax2, v_ax3])
                T.writes(T_relu[v_ax0, v_ax1, v_ax2, v_ax3])
                T_relu[v_ax0, v_ax1, v_ax2, v_ax3] = T.max(T_add[v_ax0, v_ax1, v_ax2, v_ax3], T.float32(0))
2024-04-28 19:49:56 [INFO] [task_scheduler.cc:164] Total 3 design space(s) generated
2024-04-28 19:49:56 [INFO] [task_scheduler.cc:170] Design space #0:
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(3), T.int64(224), T.int64(224)), "float32"), p1: T.Buffer((T.int64(6), T.int64(6), T.int64(3), T.int64(64)), "float32"), p2: T.Buffer((T.int64(1), T.int64(64), T.int64(1), T.int64(1)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(64), T.int64(224), T.int64(224)), "float32")):
        T.func_attr({"layout_free_buffers": [1], "tir.noalias": T.bool(True)})
        with T.block("root"):
            T.reads()
            T.writes()
            T.block_attr({"meta_schedule.unroll_explicit": 0})
            input_tile_local = T.alloc_buffer((T.int64(3), T.int64(3136), T.int64(6), T.int64(6)), scope="local")
            data_pack = T.alloc_buffer((T.int64(6), T.int64(6), T.int64(3), T.int64(3136)))
            bgemm = T.alloc_buffer((T.int64(6), T.int64(6), T.int64(64), T.int64(3136)))
            inverse_local = T.alloc_buffer((T.int64(64), T.int64(3136), T.int64(4), T.int64(4)), scope="local")
            data_pack_local = T.alloc_buffer((T.int64(6), T.int64(6), T.int64(3), T.int64(3136)), scope="local")
            bgemm_local = T.alloc_buffer((T.int64(6), T.int64(6), T.int64(64), T.int64(3136)), scope="local")
            data_pack_shared = T.alloc_buffer((T.int64(6), T.int64(6), T.int64(3), T.int64(3136)), scope="shared")
            p1_shared = T.alloc_buffer((T.int64(6), T.int64(6), T.int64(3), T.int64(64)), scope="shared")
            for ci_p_fused_0 in T.thread_binding(T.int64(74), thread="blockIdx.x"):
                for ci_p_fused_1 in T.thread_binding(T.int64(128), thread="threadIdx.x"):
                    for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(1), T.int64(6), T.int64(6)):
                        with T.block("input_tile"):
                            v_ci = T.axis.spatial(T.int64(3), (ci_p_fused_0 * T.int64(128) + ci_p_fused_1) // T.int64(3136) + ax0)
                            v_p = T.axis.spatial(T.int64(3136), (ci_p_fused_0 * T.int64(128) + ci_p_fused_1) % T.int64(3136) + ax1)
                            v_eps, v_nu = T.axis.remap("SS", [ax2, ax3])
                            T.where(ci_p_fused_0 * T.int64(128) + ci_p_fused_1 < T.int64(9408))
                            T.reads(p0[v_p // T.int64(3136), v_ci, v_p % T.int64(3136) // T.int64(56) * T.int64(4) + v_eps - T.int64(1), v_p % T.int64(56) * T.int64(4) + v_nu - T.int64(1)])
                            T.writes(input_tile_local[v_ci, v_p, v_eps, v_nu])
                            T.block_attr({"schedule_rule": "None"})
                            input_tile_local[v_ci, v_p, v_eps, v_nu] = T.if_then_else(T.int64(1) <= v_p % T.int64(3136) // T.int64(56) * T.int64(4) + v_eps and v_p % T.int64(3136) // T.int64(56) * T.int64(4) + v_eps < T.int64(225) and T.int64(1) <= v_p % T.int64(56) * T.int64(4) + v_nu and v_p % T.int64(56) * T.int64(4) + v_nu < T.int64(225), p0[v_p // T.int64(3136), v_ci, v_p % T.int64(3136) // T.int64(56) * T.int64(4) + v_eps - T.int64(1), v_p % T.int64(56) * T.int64(4) + v_nu - T.int64(1)], T.float32(0))
                    for eps in T.unroll(T.int64(6)):
                        for nu in T.unroll(T.int64(6)):
                            for r_a in T.unroll(T.int64(6)):
                                for r_b in T.unroll(T.int64(6)):
                                    with T.block("data_pack"):
                                        v_eps, v_nu = T.axis.remap("SS", [eps, nu])
                                        v_ci = T.axis.spatial(T.int64(3), (ci_p_fused_0 * T.int64(128) + ci_p_fused_1) // T.int64(3136))
                                        v_p = T.axis.spatial(T.int64(3136), (ci_p_fused_0 * T.int64(128) + ci_p_fused_1) % T.int64(3136))
                                        v_r_a, v_r_b = T.axis.remap("RR", [r_a, r_b])
                                        T.where(ci_p_fused_0 * T.int64(128) + ci_p_fused_1 < T.int64(9408))
                                        T.reads(input_tile_local[v_ci, v_p, v_r_a, v_r_b])
                                        T.writes(data_pack_local[v_eps, v_nu, v_ci, v_p])
                                        T.block_attr({"schedule_rule": "conv2d_nchw_winograd_data_pack"})
                                        with T.init():
                                            data_pack_local[v_eps, v_nu, v_ci, v_p] = T.float32(0)
                                        data_pack_local[v_eps, v_nu, v_ci, v_p] = data_pack_local[v_eps, v_nu, v_ci, v_p] + input_tile_local[v_ci, v_p, v_r_a, v_r_b] * T.Select(v_r_a % T.int64(6) == T.int64(5) and v_eps % T.int64(6) == T.int64(5), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(5) and v_eps % T.int64(6) == T.int64(4), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(5) and v_eps % T.int64(6) == T.int64(3), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(5) and v_eps % T.int64(6) == T.int64(2), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(5) and v_eps % T.int64(6) == T.int64(1), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(5) and v_eps % T.int64(6) == T.int64(0), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(4) and v_eps % T.int64(6) == T.int64(5), T.float32(1.5), T.Select(v_r_a % T.int64(6) == T.int64(4) and v_eps % T.int64(6) == T.int64(4), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(4) and v_eps % T.int64(6) == T.int64(3), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(4) and v_eps % T.int64(6) == T.int64(2), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(4) and v_eps % T.int64(6) == T.int64(1), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(4) and v_eps % T.int64(6) == T.int64(0), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(3) and v_eps % T.int64(6) == T.int64(5), T.float32(-2), T.Select(v_r_a % T.int64(6) == T.int64(3) and v_eps % T.int64(6) == T.int64(4), T.float32(-0.5), T.Select(v_r_a % T.int64(6) == T.int64(3) and v_eps % T.int64(6) == T.int64(3), T.float32(2), T.Select(v_r_a % T.int64(6) == T.int64(3) and v_eps % T.int64(6) == T.int64(2), T.float32(2.5), T.Select(v_r_a % T.int64(6) == T.int64(3) and v_eps % T.int64(6) == T.int64(1), T.float32(0.5), T.Select(v_r_a % T.int64(6) == T.int64(3) and v_eps % T.int64(6) == T.int64(0), T.float32(1.5), T.Select(v_r_a % T.int64(6) == T.int64(2) and v_eps % T.int64(6) == T.int64(5), T.float32(-1.5), T.Select(v_r_a % T.int64(6) == T.int64(2) and v_eps % T.int64(6) == T.int64(4), T.float32(-1), T.Select(v_r_a % T.int64(6) == T.int64(2) and v_eps % T.int64(6) == T.int64(3), T.float32(-1), T.Select(v_r_a % T.int64(6) == T.int64(2) and v_eps % T.int64(6) == T.int64(2), T.float32(0.5), T.Select(v_r_a % T.int64(6) == T.int64(2) and v_eps % T.int64(6) == T.int64(1), T.float32(-2.5), T.Select(v_r_a % T.int64(6) == T.int64(2) and v_eps % T.int64(6) == T.int64(0), T.float32(-2), T.Select(v_r_a % T.int64(6) == T.int64(1) and v_eps % T.int64(6) == T.int64(5), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(1) and v_eps % T.int64(6) == T.int64(4), T.float32(0.5), T.Select(v_r_a % T.int64(6) == T.int64(1) and v_eps % T.int64(6) == T.int64(3), T.float32(-2), T.Select(v_r_a % T.int64(6) == T.int64(1) and v_eps % T.int64(6) == T.int64(2), T.float32(-1), T.Select(v_r_a % T.int64(6) == T.int64(1) and v_eps % T.int64(6) == T.int64(1), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(1) and v_eps % T.int64(6) == T.int64(0), T.float32(-1.5), T.Select(v_r_a % T.int64(6) == T.int64(0) and v_eps % T.int64(6) == T.int64(5), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(0) and v_eps % T.int64(6) == T.int64(4), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(0) and v_eps % T.int64(6) == T.int64(3), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(0) and v_eps % T.int64(6) == T.int64(2), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(0) and v_eps % T.int64(6) == T.int64(1), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(0) and v_eps % T.int64(6) == T.int64(0), T.float32(1), T.float32(0))))))))))))))))))))))))))))))))))))) * T.Select(v_r_b % T.int64(6) == T.int64(5) and v_nu % T.int64(6) == T.int64(5), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(5) and v_nu % T.int64(6) == T.int64(4), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(5) and v_nu % T.int64(6) == T.int64(3), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(5) and v_nu % T.int64(6) == T.int64(2), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(5) and v_nu % T.int64(6) == T.int64(1), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(5) and v_nu % T.int64(6) == T.int64(0), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(4) and v_nu % T.int64(6) == T.int64(5), T.float32(1.5), T.Select(v_r_b % T.int64(6) == T.int64(4) and v_nu % T.int64(6) == T.int64(4), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(4) and v_nu % T.int64(6) == T.int64(3), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(4) and v_nu % T.int64(6) == T.int64(2), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(4) and v_nu % T.int64(6) == T.int64(1), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(4) and v_nu % T.int64(6) == T.int64(0), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(3) and v_nu % T.int64(6) == T.int64(5), T.float32(-2), T.Select(v_r_b % T.int64(6) == T.int64(3) and v_nu % T.int64(6) == T.int64(4), T.float32(-0.5), T.Select(v_r_b % T.int64(6) == T.int64(3) and v_nu % T.int64(6) == T.int64(3), T.float32(2), T.Select(v_r_b % T.int64(6) == T.int64(3) and v_nu % T.int64(6) == T.int64(2), T.float32(2.5), T.Select(v_r_b % T.int64(6) == T.int64(3) and v_nu % T.int64(6) == T.int64(1), T.float32(0.5), T.Select(v_r_b % T.int64(6) == T.int64(3) and v_nu % T.int64(6) == T.int64(0), T.float32(1.5), T.Select(v_r_b % T.int64(6) == T.int64(2) and v_nu % T.int64(6) == T.int64(5), T.float32(-1.5), T.Select(v_r_b % T.int64(6) == T.int64(2) and v_nu % T.int64(6) == T.int64(4), T.float32(-1), T.Select(v_r_b % T.int64(6) == T.int64(2) and v_nu % T.int64(6) == T.int64(3), T.float32(-1), T.Select(v_r_b % T.int64(6) == T.int64(2) and v_nu % T.int64(6) == T.int64(2), T.float32(0.5), T.Select(v_r_b % T.int64(6) == T.int64(2) and v_nu % T.int64(6) == T.int64(1), T.float32(-2.5), T.Select(v_r_b % T.int64(6) == T.int64(2) and v_nu % T.int64(6) == T.int64(0), T.float32(-2), T.Select(v_r_b % T.int64(6) == T.int64(1) and v_nu % T.int64(6) == T.int64(5), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(1) and v_nu % T.int64(6) == T.int64(4), T.float32(0.5), T.Select(v_r_b % T.int64(6) == T.int64(1) and v_nu % T.int64(6) == T.int64(3), T.float32(-2), T.Select(v_r_b % T.int64(6) == T.int64(1) and v_nu % T.int64(6) == T.int64(2), T.float32(-1), T.Select(v_r_b % T.int64(6) == T.int64(1) and v_nu % T.int64(6) == T.int64(1), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(1) and v_nu % T.int64(6) == T.int64(0), T.float32(-1.5), T.Select(v_r_b % T.int64(6) == T.int64(0) and v_nu % T.int64(6) == T.int64(5), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(0) and v_nu % T.int64(6) == T.int64(4), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(0) and v_nu % T.int64(6) == T.int64(3), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(0) and v_nu % T.int64(6) == T.int64(2), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(0) and v_nu % T.int64(6) == T.int64(1), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(0) and v_nu % T.int64(6) == T.int64(0), T.float32(1), T.float32(0)))))))))))))))))))))))))))))))))))))
                    for ax0, ax1, ax2, ax3 in T.grid(T.int64(6), T.int64(6), T.int64(1), T.int64(1)):
                        with T.block("data_pack_local"):
                            v0, v1 = T.axis.remap("SS", [ax0, ax1])
                            v2 = T.axis.spatial(T.int64(3), (ci_p_fused_0 * T.int64(128) + ci_p_fused_1) // T.int64(3136) + ax2)
                            v3 = T.axis.spatial(T.int64(3136), (ci_p_fused_0 * T.int64(128) + ci_p_fused_1) % T.int64(3136) + ax3)
                            T.where(ci_p_fused_0 * T.int64(128) + ci_p_fused_1 < T.int64(9408))
                            T.reads(data_pack_local[v0, v1, v2, v3])
                            T.writes(data_pack[v0, v1, v2, v3])
                            data_pack[v0, v1, v2, v3] = data_pack_local[v0, v1, v2, v3]
            for eps_0_nu_0_co_0_p_0_fused in T.thread_binding(T.int64(6), thread="blockIdx.x"):
                for eps_1_nu_1_co_1_p_1_fused in T.thread_binding(T.int64(32), thread="vthread.x"):
                    for eps_2_nu_2_co_2_p_2_fused in T.thread_binding(T.int64(672), thread="threadIdx.x"):
                        for ci_0 in range(T.int64(3)):
                            for ax0_ax1_ax2_ax3_fused in range(T.int64(37632)):
                                with T.block("data_pack_shared"):
                                    v0 = T.axis.spatial(T.int64(6), eps_0_nu_0_co_0_p_0_fused // T.int64(2) * T.int64(2) + ax0_ax1_ax2_ax3_fused // T.int64(18816))
                                    v1 = T.axis.spatial(T.int64(6), ax0_ax1_ax2_ax3_fused % T.int64(18816) // T.int64(3136))
                                    v2 = T.axis.spatial(T.int64(3), ci_0)
                                    v3 = T.axis.spatial(T.int64(3136), ax0_ax1_ax2_ax3_fused % T.int64(3136))
                                    T.reads(data_pack[v0, v1, v2, v3])
                                    T.writes(data_pack_shared[v0, v1, v2, v3])
                                    T.block_attr({"meta_schedule.cooperative_fetch": 4})
                                    data_pack_shared[v0, v1, v2, v3] = data_pack[v0, v1, v2, v3]
                            for ax0_ax1_ax2_ax3_fused in range(T.int64(384)):
                                with T.block("p1_shared"):
                                    v0 = T.axis.spatial(T.int64(6), eps_0_nu_0_co_0_p_0_fused // T.int64(2) * T.int64(2) + ax0_ax1_ax2_ax3_fused // T.int64(192))
                                    v1 = T.axis.spatial(T.int64(6), ax0_ax1_ax2_ax3_fused % T.int64(192) // T.int64(32))
                                    v2 = T.axis.spatial(T.int64(3), ci_0)
                                    v3 = T.axis.spatial(T.int64(64), eps_0_nu_0_co_0_p_0_fused % T.int64(2) * T.int64(32) + ax0_ax1_ax2_ax3_fused % T.int64(32))
                                    T.reads(p1[v0, v1, v2, v3])
                                    T.writes(p1_shared[v0, v1, v2, v3])
                                    T.block_attr({"meta_schedule.cooperative_fetch": 4})
                                    p1_shared[v0, v1, v2, v3] = p1[v0, v1, v2, v3]
                            for ci_1, eps_3, nu_3, co_3, p_3, ci_2, eps_4, nu_4, co_4, p_4 in T.grid(T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(28), T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(1)):
                                with T.block("bgemm"):
                                    v_eps = T.axis.spatial(T.int64(6), eps_0_nu_0_co_0_p_0_fused // T.int64(2) * T.int64(2) + eps_1_nu_1_co_1_p_1_fused // T.int64(16) + eps_3 + eps_4)
                                    v_nu = T.axis.spatial(T.int64(6), eps_1_nu_1_co_1_p_1_fused % T.int64(16) // T.int64(8) * T.int64(3) + eps_2_nu_2_co_2_p_2_fused // T.int64(224) + nu_3 + nu_4)
                                    v_co = T.axis.spatial(T.int64(64), eps_0_nu_0_co_0_p_0_fused % T.int64(2) * T.int64(32) + eps_1_nu_1_co_1_p_1_fused % T.int64(8) * T.int64(4) + eps_2_nu_2_co_2_p_2_fused % T.int64(224) // T.int64(112) * T.int64(2) + co_3 * T.int64(2) + co_4)
                                    v_p = T.axis.spatial(T.int64(3136), eps_2_nu_2_co_2_p_2_fused % T.int64(112) * T.int64(28) + p_3 + p_4)
                                    v_ci = T.axis.reduce(T.int64(3), ci_0 + ci_1 + ci_2)
                                    T.reads(data_pack_shared[v_eps, v_nu, v_ci, v_p], p1_shared[v_eps, v_nu, v_ci, v_co])
                                    T.writes(bgemm_local[v_eps, v_nu, v_co, v_p])
                                    T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 32, "meta_schedule.tiling_structure": "SSSRRSRS"})
                                    with T.init():
                                        bgemm_local[v_eps, v_nu, v_co, v_p] = T.float32(0)
                                    bgemm_local[v_eps, v_nu, v_co, v_p] = bgemm_local[v_eps, v_nu, v_co, v_p] + data_pack_shared[v_eps, v_nu, v_ci, v_p] * p1_shared[v_eps, v_nu, v_ci, v_co]
                        for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(1), T.int64(2), T.int64(28)):
                            with T.block("bgemm_local"):
                                v0 = T.axis.spatial(T.int64(6), eps_0_nu_0_co_0_p_0_fused // T.int64(2) * T.int64(2) + eps_1_nu_1_co_1_p_1_fused // T.int64(16) + ax0)
                                v1 = T.axis.spatial(T.int64(6), eps_1_nu_1_co_1_p_1_fused % T.int64(16) // T.int64(8) * T.int64(3) + eps_2_nu_2_co_2_p_2_fused // T.int64(224) + ax1)
                                v2 = T.axis.spatial(T.int64(64), eps_0_nu_0_co_0_p_0_fused % T.int64(2) * T.int64(32) + eps_1_nu_1_co_1_p_1_fused % T.int64(8) * T.int64(4) + eps_2_nu_2_co_2_p_2_fused % T.int64(224) // T.int64(112) * T.int64(2) + ax2)
                                v3 = T.axis.spatial(T.int64(3136), eps_2_nu_2_co_2_p_2_fused % T.int64(112) * T.int64(28) + ax3)
                                T.reads(bgemm_local[v0, v1, v2, v3])
                                T.writes(bgemm[v0, v1, v2, v3])
                                bgemm[v0, v1, v2, v3] = bgemm_local[v0, v1, v2, v3]
            for n_co_h_0_w_0_fused_0 in T.thread_binding(T.int64(196), thread="blockIdx.x"):
                for n_co_h_0_w_0_fused_1 in T.thread_binding(T.int64(1024), thread="threadIdx.x"):
                    for ax0, ax1 in T.grid(T.int64(1), T.int64(1)):
                        for ax2 in T.unroll(T.int64(4)):
                            for ax3 in T.unroll(T.int64(4)):
                                for ax4 in T.unroll(T.int64(6)):
                                    for ax5 in T.unroll(T.int64(6)):
                                        with T.block("inverse"):
                                            v_co = T.axis.spatial(T.int64(64), (n_co_h_0_w_0_fused_0 * T.int64(1024) + n_co_h_0_w_0_fused_1) // T.int64(3136) + ax0)
                                            v_p = T.axis.spatial(T.int64(3136), (n_co_h_0_w_0_fused_0 * T.int64(1024) + n_co_h_0_w_0_fused_1) % T.int64(3136) + ax1)
                                            v_vh, v_vw, v_r_a, v_r_b = T.axis.remap("SSRR", [ax2, ax3, ax4, ax5])
                                            T.reads(bgemm[v_r_a, v_r_b, v_co, v_p])
                                            T.writes(inverse_local[v_co, v_p, v_vh, v_vw])
                                            T.block_attr({"schedule_rule": "conv2d_nchw_winograd_inverse"})
                                            with T.init():
                                                inverse_local[v_co, v_p, v_vh, v_vw] = T.float32(0)
                                            inverse_local[v_co, v_p, v_vh, v_vw] = inverse_local[v_co, v_p, v_vh, v_vw] + bgemm[v_r_a, v_r_b, v_co, v_p] * T.Select(v_r_a % T.int64(6) == T.int64(5) and v_vh % T.int64(4) == T.int64(3), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(5) and v_vh % T.int64(4) == T.int64(2), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(5) and v_vh % T.int64(4) == T.int64(1), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(5) and v_vh % T.int64(4) == T.int64(0), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(4) and v_vh % T.int64(4) == T.int64(3), T.float32(-8), T.Select(v_r_a % T.int64(6) == T.int64(4) and v_vh % T.int64(4) == T.int64(2), T.float32(4), T.Select(v_r_a % T.int64(6) == T.int64(4) and v_vh % T.int64(4) == T.int64(1), T.float32(-2), T.Select(v_r_a % T.int64(6) == T.int64(4) and v_vh % T.int64(4) == T.int64(0), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(3) and v_vh % T.int64(4) == T.int64(3), T.float32(0.125), T.Select(v_r_a % T.int64(6) == T.int64(3) and v_vh % T.int64(4) == T.int64(2), T.float32(0.25), T.Select(v_r_a % T.int64(6) == T.int64(3) and v_vh % T.int64(4) == T.int64(1), T.float32(0.5), T.Select(v_r_a % T.int64(6) == T.int64(3) and v_vh % T.int64(4) == T.int64(0), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(2) and v_vh % T.int64(4) == T.int64(3), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(2) and v_vh % T.int64(4) == T.int64(2), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(2) and v_vh % T.int64(4) == T.int64(1), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(2) and v_vh % T.int64(4) == T.int64(0), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(1) and v_vh % T.int64(4) == T.int64(3), T.float32(-1), T.Select(v_r_a % T.int64(6) == T.int64(1) and v_vh % T.int64(4) == T.int64(2), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(1) and v_vh % T.int64(4) == T.int64(1), T.float32(-1), T.Select(v_r_a % T.int64(6) == T.int64(1) and v_vh % T.int64(4) == T.int64(0), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(0) and v_vh % T.int64(4) == T.int64(3), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(0) and v_vh % T.int64(4) == T.int64(2), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(0) and v_vh % T.int64(4) == T.int64(1), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(0) and v_vh % T.int64(4) == T.int64(0), T.float32(1), T.float32(0))))))))))))))))))))))))) * T.Select(v_r_b % T.int64(6) == T.int64(5) and v_vw % T.int64(4) == T.int64(3), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(5) and v_vw % T.int64(4) == T.int64(2), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(5) and v_vw % T.int64(4) == T.int64(1), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(5) and v_vw % T.int64(4) == T.int64(0), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(4) and v_vw % T.int64(4) == T.int64(3), T.float32(-8), T.Select(v_r_b % T.int64(6) == T.int64(4) and v_vw % T.int64(4) == T.int64(2), T.float32(4), T.Select(v_r_b % T.int64(6) == T.int64(4) and v_vw % T.int64(4) == T.int64(1), T.float32(-2), T.Select(v_r_b % T.int64(6) == T.int64(4) and v_vw % T.int64(4) == T.int64(0), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(3) and v_vw % T.int64(4) == T.int64(3), T.float32(0.125), T.Select(v_r_b % T.int64(6) == T.int64(3) and v_vw % T.int64(4) == T.int64(2), T.float32(0.25), T.Select(v_r_b % T.int64(6) == T.int64(3) and v_vw % T.int64(4) == T.int64(1), T.float32(0.5), T.Select(v_r_b % T.int64(6) == T.int64(3) and v_vw % T.int64(4) == T.int64(0), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(2) and v_vw % T.int64(4) == T.int64(3), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(2) and v_vw % T.int64(4) == T.int64(2), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(2) and v_vw % T.int64(4) == T.int64(1), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(2) and v_vw % T.int64(4) == T.int64(0), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(1) and v_vw % T.int64(4) == T.int64(3), T.float32(-1), T.Select(v_r_b % T.int64(6) == T.int64(1) and v_vw % T.int64(4) == T.int64(2), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(1) and v_vw % T.int64(4) == T.int64(1), T.float32(-1), T.Select(v_r_b % T.int64(6) == T.int64(1) and v_vw % T.int64(4) == T.int64(0), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(0) and v_vw % T.int64(4) == T.int64(3), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(0) and v_vw % T.int64(4) == T.int64(2), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(0) and v_vw % T.int64(4) == T.int64(1), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(0) and v_vw % T.int64(4) == T.int64(0), T.float32(1), T.float32(0)))))))))))))))))))))))))
                    for h_1, w_1 in T.grid(T.int64(4), T.int64(4)):
                        with T.block("conv2d_winograd"):
                            v_n = T.axis.spatial(T.int64(1), T.int64(0))
                            v_co = T.axis.spatial(T.int64(64), (n_co_h_0_w_0_fused_0 * T.int64(1024) + n_co_h_0_w_0_fused_1) // T.int64(3136))
                            v_h = T.axis.spatial(T.int64(224), (n_co_h_0_w_0_fused_0 * T.int64(1024) + n_co_h_0_w_0_fused_1) % T.int64(3136) // T.int64(56) * T.int64(4) + h_1)
                            v_w = T.axis.spatial(T.int64(224), (n_co_h_0_w_0_fused_0 * T.int64(1024) + n_co_h_0_w_0_fused_1) % T.int64(56) * T.int64(4) + w_1)
                            T.reads(inverse_local[v_co, v_n * T.int64(3136) + v_h // T.int64(4) * T.int64(56) + v_w // T.int64(4), v_h % T.int64(4), v_w % T.int64(4)], p2[v_n, v_co, T.int64(0), T.int64(0)])
                            T.writes(T_relu[v_n, v_co, v_h, v_w])
                            T_relu[v_n, v_co, v_h, v_w] = T.max(inverse_local[v_co, v_n * T.int64(3136) + v_h // T.int64(4) * T.int64(56) + v_w // T.int64(4), v_h % T.int64(4), v_w % T.int64(4)] + p2[v_n, v_co, T.int64(0), T.int64(0)], T.float32(0))
b0 = sch.get_block(name="data_pack", func_name="main")
b1 = sch.get_block(name="bgemm", func_name="main")
b2 = sch.get_block(name="inverse", func_name="main")
b3 = sch.get_block(name="conv2d_winograd", func_name="main")
b4 = sch.get_block(name="T_add", func_name="main")
b5 = sch.get_block(name="T_relu", func_name="main")
b6 = sch.get_block(name="root", func_name="main")
b7, b8 = sch.get_producers(block=b2)
sch.compute_inline(block=b8)
b9, = sch.get_consumers(block=b2)
l10, l11, l12, l13 = sch.get_loops(block=b9)
l14, l15 = sch.split(loop=l12, factors=[None, 4], preserve_unit_iters=True)
l16, l17 = sch.split(loop=l13, factors=[None, 4], preserve_unit_iters=True)
sch.reorder(l14, l16, l15, l17)
sch.compute_at(block=b2, loop=l16, preserve_unit_loops=True, index=-1)
sch.set_scope(block=b2, buffer_index=0, storage_scope="local")
l18, l19, l20, l21, l22, l23, l24, l25, l26, l27 = sch.get_loops(block=b2)
sch.unroll(loop=l24)
sch.unroll(loop=l25)
sch.unroll(loop=l26)
sch.unroll(loop=l27)
b28, b29 = sch.get_producers(block=b0)
sch.compute_inline(block=b29)
b30, = sch.get_producers(block=b28)
l31, l32, l33, l34, l35, l36 = sch.get_loops(block=b0)
sch.reorder(l33, l34, l31, l32, l35, l36)
sch.unroll(loop=l31)
sch.unroll(loop=l32)
sch.unroll(loop=l35)
sch.unroll(loop=l36)
l37 = sch.fuse(l33, l34, preserve_unit_iters=True)
v38 = sch.sample_categorical(candidates=[32, 64, 128, 256, 512, 1024], probs=[0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666], decision=2)
l39, l40 = sch.split(loop=l37, factors=[None, v38], preserve_unit_iters=True)
sch.bind(loop=l39, thread_axis="blockIdx.x")
sch.bind(loop=l40, thread_axis="threadIdx.x")
b41 = sch.cache_write(block=b0, write_buffer_index=0, storage_scope="local")
sch.reverse_compute_at(block=b41, loop=l40, preserve_unit_loops=True, index=-1)
sch.compute_at(block=b28, loop=l40, preserve_unit_loops=True, index=-1)
sch.set_scope(block=b28, buffer_index=0, storage_scope="local")
sch.compute_inline(block=b30)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSSRRSRS")
l42, l43, l44, l45, l46 = sch.get_loops(block=b1)
v47, v48, v49, v50, v51 = sch.sample_perfect_tile(loop=l42, n=5, max_innermost_factor=64, decision=[3, 2, 1, 1, 1])
l52, l53, l54, l55, l56 = sch.split(loop=l42, factors=[v47, v48, v49, v50, v51], preserve_unit_iters=True)
v57, v58, v59, v60, v61 = sch.sample_perfect_tile(loop=l43, n=5, max_innermost_factor=64, decision=[1, 2, 3, 1, 1])
l62, l63, l64, l65, l66 = sch.split(loop=l43, factors=[v57, v58, v59, v60, v61], preserve_unit_iters=True)
v67, v68, v69, v70, v71 = sch.sample_perfect_tile(loop=l44, n=5, max_innermost_factor=64, decision=[2, 8, 2, 1, 2])
l72, l73, l74, l75, l76 = sch.split(loop=l44, factors=[v67, v68, v69, v70, v71], preserve_unit_iters=True)
v77, v78, v79, v80, v81 = sch.sample_perfect_tile(loop=l45, n=5, max_innermost_factor=64, decision=[1, 1, 112, 28, 1])
l82, l83, l84, l85, l86 = sch.split(loop=l45, factors=[v77, v78, v79, v80, v81], preserve_unit_iters=True)
v87, v88, v89 = sch.sample_perfect_tile(loop=l46, n=3, max_innermost_factor=64, decision=[3, 1, 1])
l90, l91, l92 = sch.split(loop=l46, factors=[v87, v88, v89], preserve_unit_iters=True)
sch.reorder(l52, l62, l72, l82, l53, l63, l73, l83, l54, l64, l74, l84, l90, l91, l55, l65, l75, l85, l92, l56, l66, l76, l86)
l93 = sch.fuse(l52, l62, l72, l82, preserve_unit_iters=True)
sch.bind(loop=l93, thread_axis="blockIdx.x")
l94 = sch.fuse(l53, l63, l73, l83, preserve_unit_iters=True)
sch.bind(loop=l94, thread_axis="vthread.x")
l95 = sch.fuse(l54, l64, l74, l84, preserve_unit_iters=True)
sch.bind(loop=l95, thread_axis="threadIdx.x")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_low_inclusive", ann_val=32)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_high_inclusive", ann_val=1024)
b96 = sch.cache_write(block=b1, write_buffer_index=0, storage_scope="local")
sch.reverse_compute_at(block=b96, loop=l95, preserve_unit_loops=True, index=-1)
b97 = sch.cache_read(block=b1, read_buffer_index=0, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b97, loop=l90, preserve_unit_loops=True, index=-1)
l98, l99, l100, l101, l102, l103, l104, l105 = sch.get_loops(block=b97)
l106 = sch.fuse(l102, l103, l104, l105, preserve_unit_iters=True)
v107 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b97, ann_key="meta_schedule.cooperative_fetch", ann_val=v107)
b108 = sch.cache_read(block=b1, read_buffer_index=1, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b108, loop=l90, preserve_unit_loops=True, index=-1)
l109, l110, l111, l112, l113, l114, l115, l116 = sch.get_loops(block=b108)
l117 = sch.fuse(l113, l114, l115, l116, preserve_unit_iters=True)
v118 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b108, ann_key="meta_schedule.cooperative_fetch", ann_val=v118)
sch.reverse_compute_inline(block=b5)
sch.reverse_compute_inline(block=b4)
v119 = sch.sample_categorical(candidates=[0, 16, 64, 512, 1024], probs=[0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001], decision=0)
sch.annotate(block_or_loop=b6, ann_key="meta_schedule.unroll_explicit", ann_val=v119)
l120, l121, l122, l123, l124, l125 = sch.get_loops(block=b3)
l126 = sch.fuse(l120, l121, l122, l123, preserve_unit_iters=True)
v127 = sch.sample_categorical(candidates=[32, 64, 128, 256, 512, 1024], probs=[0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666], decision=5)
l128, l129 = sch.split(loop=l126, factors=[None, v127], preserve_unit_iters=True)
sch.bind(loop=l128, thread_axis="blockIdx.x")
sch.bind(loop=l129, thread_axis="threadIdx.x")
2024-04-28 19:49:56 [INFO] [task_scheduler.cc:170] Design space #1:
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(3), T.int64(224), T.int64(224)), "float32"), p1: T.Buffer((T.int64(6), T.int64(6), T.int64(3), T.int64(64)), "float32"), p2: T.Buffer((T.int64(1), T.int64(64), T.int64(1), T.int64(1)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(64), T.int64(224), T.int64(224)), "float32")):
        T.func_attr({"layout_free_buffers": [1], "tir.noalias": T.bool(True)})
        with T.block("root"):
            T.reads()
            T.writes()
            T.block_attr({"meta_schedule.unroll_explicit": 16})
            input_tile_local = T.alloc_buffer((T.int64(3), T.int64(3136), T.int64(6), T.int64(6)), scope="local")
            data_pack = T.alloc_buffer((T.int64(6), T.int64(6), T.int64(3), T.int64(3136)))
            bgemm = T.alloc_buffer((T.int64(6), T.int64(6), T.int64(64), T.int64(3136)))
            inverse_local = T.alloc_buffer((T.int64(64), T.int64(3136), T.int64(4), T.int64(4)), scope="local")
            data_pack_local = T.alloc_buffer((T.int64(6), T.int64(6), T.int64(3), T.int64(3136)), scope="local")
            bgemm_local = T.alloc_buffer((T.int64(6), T.int64(6), T.int64(64), T.int64(3136)), scope="local")
            data_pack_shared = T.alloc_buffer((T.int64(6), T.int64(6), T.int64(3), T.int64(3136)), scope="shared")
            p1_shared = T.alloc_buffer((T.int64(6), T.int64(6), T.int64(3), T.int64(64)), scope="shared")
            for ci_p_fused_0 in T.thread_binding(T.int64(74), thread="blockIdx.x"):
                for ci_p_fused_1 in T.thread_binding(T.int64(128), thread="threadIdx.x"):
                    for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(1), T.int64(6), T.int64(6)):
                        with T.block("input_tile"):
                            v_ci = T.axis.spatial(T.int64(3), (ci_p_fused_0 * T.int64(128) + ci_p_fused_1) // T.int64(3136) + ax0)
                            v_p = T.axis.spatial(T.int64(3136), (ci_p_fused_0 * T.int64(128) + ci_p_fused_1) % T.int64(3136) + ax1)
                            v_eps, v_nu = T.axis.remap("SS", [ax2, ax3])
                            T.where(ci_p_fused_0 * T.int64(128) + ci_p_fused_1 < T.int64(9408))
                            T.reads(p0[v_p // T.int64(3136), v_ci, v_p % T.int64(3136) // T.int64(56) * T.int64(4) + v_eps - T.int64(1), v_p % T.int64(56) * T.int64(4) + v_nu - T.int64(1)])
                            T.writes(input_tile_local[v_ci, v_p, v_eps, v_nu])
                            T.block_attr({"schedule_rule": "None"})
                            input_tile_local[v_ci, v_p, v_eps, v_nu] = T.if_then_else(T.int64(1) <= v_p % T.int64(3136) // T.int64(56) * T.int64(4) + v_eps and v_p % T.int64(3136) // T.int64(56) * T.int64(4) + v_eps < T.int64(225) and T.int64(1) <= v_p % T.int64(56) * T.int64(4) + v_nu and v_p % T.int64(56) * T.int64(4) + v_nu < T.int64(225), p0[v_p // T.int64(3136), v_ci, v_p % T.int64(3136) // T.int64(56) * T.int64(4) + v_eps - T.int64(1), v_p % T.int64(56) * T.int64(4) + v_nu - T.int64(1)], T.float32(0))
                    for eps in T.unroll(T.int64(6)):
                        for nu in T.unroll(T.int64(6)):
                            for r_a in T.unroll(T.int64(6)):
                                for r_b in T.unroll(T.int64(6)):
                                    with T.block("data_pack"):
                                        v_eps, v_nu = T.axis.remap("SS", [eps, nu])
                                        v_ci = T.axis.spatial(T.int64(3), (ci_p_fused_0 * T.int64(128) + ci_p_fused_1) // T.int64(3136))
                                        v_p = T.axis.spatial(T.int64(3136), (ci_p_fused_0 * T.int64(128) + ci_p_fused_1) % T.int64(3136))
                                        v_r_a, v_r_b = T.axis.remap("RR", [r_a, r_b])
                                        T.where(ci_p_fused_0 * T.int64(128) + ci_p_fused_1 < T.int64(9408))
                                        T.reads(input_tile_local[v_ci, v_p, v_r_a, v_r_b])
                                        T.writes(data_pack_local[v_eps, v_nu, v_ci, v_p])
                                        T.block_attr({"schedule_rule": "conv2d_nchw_winograd_data_pack"})
                                        with T.init():
                                            data_pack_local[v_eps, v_nu, v_ci, v_p] = T.float32(0)
                                        data_pack_local[v_eps, v_nu, v_ci, v_p] = data_pack_local[v_eps, v_nu, v_ci, v_p] + input_tile_local[v_ci, v_p, v_r_a, v_r_b] * T.Select(v_r_a % T.int64(6) == T.int64(5) and v_eps % T.int64(6) == T.int64(5), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(5) and v_eps % T.int64(6) == T.int64(4), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(5) and v_eps % T.int64(6) == T.int64(3), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(5) and v_eps % T.int64(6) == T.int64(2), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(5) and v_eps % T.int64(6) == T.int64(1), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(5) and v_eps % T.int64(6) == T.int64(0), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(4) and v_eps % T.int64(6) == T.int64(5), T.float32(1.5), T.Select(v_r_a % T.int64(6) == T.int64(4) and v_eps % T.int64(6) == T.int64(4), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(4) and v_eps % T.int64(6) == T.int64(3), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(4) and v_eps % T.int64(6) == T.int64(2), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(4) and v_eps % T.int64(6) == T.int64(1), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(4) and v_eps % T.int64(6) == T.int64(0), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(3) and v_eps % T.int64(6) == T.int64(5), T.float32(-2), T.Select(v_r_a % T.int64(6) == T.int64(3) and v_eps % T.int64(6) == T.int64(4), T.float32(-0.5), T.Select(v_r_a % T.int64(6) == T.int64(3) and v_eps % T.int64(6) == T.int64(3), T.float32(2), T.Select(v_r_a % T.int64(6) == T.int64(3) and v_eps % T.int64(6) == T.int64(2), T.float32(2.5), T.Select(v_r_a % T.int64(6) == T.int64(3) and v_eps % T.int64(6) == T.int64(1), T.float32(0.5), T.Select(v_r_a % T.int64(6) == T.int64(3) and v_eps % T.int64(6) == T.int64(0), T.float32(1.5), T.Select(v_r_a % T.int64(6) == T.int64(2) and v_eps % T.int64(6) == T.int64(5), T.float32(-1.5), T.Select(v_r_a % T.int64(6) == T.int64(2) and v_eps % T.int64(6) == T.int64(4), T.float32(-1), T.Select(v_r_a % T.int64(6) == T.int64(2) and v_eps % T.int64(6) == T.int64(3), T.float32(-1), T.Select(v_r_a % T.int64(6) == T.int64(2) and v_eps % T.int64(6) == T.int64(2), T.float32(0.5), T.Select(v_r_a % T.int64(6) == T.int64(2) and v_eps % T.int64(6) == T.int64(1), T.float32(-2.5), T.Select(v_r_a % T.int64(6) == T.int64(2) and v_eps % T.int64(6) == T.int64(0), T.float32(-2), T.Select(v_r_a % T.int64(6) == T.int64(1) and v_eps % T.int64(6) == T.int64(5), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(1) and v_eps % T.int64(6) == T.int64(4), T.float32(0.5), T.Select(v_r_a % T.int64(6) == T.int64(1) and v_eps % T.int64(6) == T.int64(3), T.float32(-2), T.Select(v_r_a % T.int64(6) == T.int64(1) and v_eps % T.int64(6) == T.int64(2), T.float32(-1), T.Select(v_r_a % T.int64(6) == T.int64(1) and v_eps % T.int64(6) == T.int64(1), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(1) and v_eps % T.int64(6) == T.int64(0), T.float32(-1.5), T.Select(v_r_a % T.int64(6) == T.int64(0) and v_eps % T.int64(6) == T.int64(5), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(0) and v_eps % T.int64(6) == T.int64(4), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(0) and v_eps % T.int64(6) == T.int64(3), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(0) and v_eps % T.int64(6) == T.int64(2), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(0) and v_eps % T.int64(6) == T.int64(1), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(0) and v_eps % T.int64(6) == T.int64(0), T.float32(1), T.float32(0))))))))))))))))))))))))))))))))))))) * T.Select(v_r_b % T.int64(6) == T.int64(5) and v_nu % T.int64(6) == T.int64(5), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(5) and v_nu % T.int64(6) == T.int64(4), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(5) and v_nu % T.int64(6) == T.int64(3), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(5) and v_nu % T.int64(6) == T.int64(2), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(5) and v_nu % T.int64(6) == T.int64(1), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(5) and v_nu % T.int64(6) == T.int64(0), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(4) and v_nu % T.int64(6) == T.int64(5), T.float32(1.5), T.Select(v_r_b % T.int64(6) == T.int64(4) and v_nu % T.int64(6) == T.int64(4), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(4) and v_nu % T.int64(6) == T.int64(3), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(4) and v_nu % T.int64(6) == T.int64(2), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(4) and v_nu % T.int64(6) == T.int64(1), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(4) and v_nu % T.int64(6) == T.int64(0), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(3) and v_nu % T.int64(6) == T.int64(5), T.float32(-2), T.Select(v_r_b % T.int64(6) == T.int64(3) and v_nu % T.int64(6) == T.int64(4), T.float32(-0.5), T.Select(v_r_b % T.int64(6) == T.int64(3) and v_nu % T.int64(6) == T.int64(3), T.float32(2), T.Select(v_r_b % T.int64(6) == T.int64(3) and v_nu % T.int64(6) == T.int64(2), T.float32(2.5), T.Select(v_r_b % T.int64(6) == T.int64(3) and v_nu % T.int64(6) == T.int64(1), T.float32(0.5), T.Select(v_r_b % T.int64(6) == T.int64(3) and v_nu % T.int64(6) == T.int64(0), T.float32(1.5), T.Select(v_r_b % T.int64(6) == T.int64(2) and v_nu % T.int64(6) == T.int64(5), T.float32(-1.5), T.Select(v_r_b % T.int64(6) == T.int64(2) and v_nu % T.int64(6) == T.int64(4), T.float32(-1), T.Select(v_r_b % T.int64(6) == T.int64(2) and v_nu % T.int64(6) == T.int64(3), T.float32(-1), T.Select(v_r_b % T.int64(6) == T.int64(2) and v_nu % T.int64(6) == T.int64(2), T.float32(0.5), T.Select(v_r_b % T.int64(6) == T.int64(2) and v_nu % T.int64(6) == T.int64(1), T.float32(-2.5), T.Select(v_r_b % T.int64(6) == T.int64(2) and v_nu % T.int64(6) == T.int64(0), T.float32(-2), T.Select(v_r_b % T.int64(6) == T.int64(1) and v_nu % T.int64(6) == T.int64(5), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(1) and v_nu % T.int64(6) == T.int64(4), T.float32(0.5), T.Select(v_r_b % T.int64(6) == T.int64(1) and v_nu % T.int64(6) == T.int64(3), T.float32(-2), T.Select(v_r_b % T.int64(6) == T.int64(1) and v_nu % T.int64(6) == T.int64(2), T.float32(-1), T.Select(v_r_b % T.int64(6) == T.int64(1) and v_nu % T.int64(6) == T.int64(1), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(1) and v_nu % T.int64(6) == T.int64(0), T.float32(-1.5), T.Select(v_r_b % T.int64(6) == T.int64(0) and v_nu % T.int64(6) == T.int64(5), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(0) and v_nu % T.int64(6) == T.int64(4), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(0) and v_nu % T.int64(6) == T.int64(3), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(0) and v_nu % T.int64(6) == T.int64(2), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(0) and v_nu % T.int64(6) == T.int64(1), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(0) and v_nu % T.int64(6) == T.int64(0), T.float32(1), T.float32(0)))))))))))))))))))))))))))))))))))))
                    for ax0, ax1, ax2, ax3 in T.grid(T.int64(6), T.int64(6), T.int64(1), T.int64(1)):
                        with T.block("data_pack_local"):
                            v0, v1 = T.axis.remap("SS", [ax0, ax1])
                            v2 = T.axis.spatial(T.int64(3), (ci_p_fused_0 * T.int64(128) + ci_p_fused_1) // T.int64(3136) + ax2)
                            v3 = T.axis.spatial(T.int64(3136), (ci_p_fused_0 * T.int64(128) + ci_p_fused_1) % T.int64(3136) + ax3)
                            T.where(ci_p_fused_0 * T.int64(128) + ci_p_fused_1 < T.int64(9408))
                            T.reads(data_pack_local[v0, v1, v2, v3])
                            T.writes(data_pack[v0, v1, v2, v3])
                            data_pack[v0, v1, v2, v3] = data_pack_local[v0, v1, v2, v3]
            for eps_0_nu_0_co_0_p_0_fused in T.thread_binding(T.int64(6), thread="blockIdx.x"):
                for eps_1_nu_1_co_1_p_1_fused in T.thread_binding(T.int64(32), thread="vthread.x"):
                    for eps_2_nu_2_co_2_p_2_fused in T.thread_binding(T.int64(672), thread="threadIdx.x"):
                        for ci_0_fused in T.serial(T.int64(3), annotations={"software_pipeline_async_stages": [0], "software_pipeline_order": [0, 1, 2], "software_pipeline_stage": [0, 0, 2]}):
                            for ax0_ax1_ax2_ax3_fused in range(T.int64(37632)):
                                with T.block("data_pack_shared"):
                                    v0 = T.axis.spatial(T.int64(6), eps_0_nu_0_co_0_p_0_fused // T.int64(2) * T.int64(2) + ax0_ax1_ax2_ax3_fused // T.int64(18816))
                                    v1 = T.axis.spatial(T.int64(6), ax0_ax1_ax2_ax3_fused % T.int64(18816) // T.int64(3136))
                                    v2 = T.axis.spatial(T.int64(3), ci_0_fused)
                                    v3 = T.axis.spatial(T.int64(3136), ax0_ax1_ax2_ax3_fused % T.int64(3136))
                                    T.reads(data_pack[v0, v1, v2, v3])
                                    T.writes(data_pack_shared[v0, v1, v2, v3])
                                    T.block_attr({"meta_schedule.cooperative_fetch": 4})
                                    data_pack_shared[v0, v1, v2, v3] = data_pack[v0, v1, v2, v3]
                            for ax0_ax1_ax2_ax3_fused in range(T.int64(384)):
                                with T.block("p1_shared"):
                                    v0 = T.axis.spatial(T.int64(6), eps_0_nu_0_co_0_p_0_fused // T.int64(2) * T.int64(2) + ax0_ax1_ax2_ax3_fused // T.int64(192))
                                    v1 = T.axis.spatial(T.int64(6), ax0_ax1_ax2_ax3_fused % T.int64(192) // T.int64(32))
                                    v2 = T.axis.spatial(T.int64(3), ci_0_fused)
                                    v3 = T.axis.spatial(T.int64(64), eps_0_nu_0_co_0_p_0_fused % T.int64(2) * T.int64(32) + ax0_ax1_ax2_ax3_fused % T.int64(32))
                                    T.reads(p1[v0, v1, v2, v3])
                                    T.writes(p1_shared[v0, v1, v2, v3])
                                    T.block_attr({"meta_schedule.cooperative_fetch": 4})
                                    p1_shared[v0, v1, v2, v3] = p1[v0, v1, v2, v3]
                            for ci_1, eps_3, nu_3, co_3, p_3, ci_2, eps_4, nu_4, co_4, p_4 in T.grid(T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(28), T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(1)):
                                with T.block("bgemm"):
                                    v_eps = T.axis.spatial(T.int64(6), eps_0_nu_0_co_0_p_0_fused // T.int64(2) * T.int64(2) + eps_1_nu_1_co_1_p_1_fused // T.int64(16) + eps_3 + eps_4)
                                    v_nu = T.axis.spatial(T.int64(6), eps_1_nu_1_co_1_p_1_fused % T.int64(16) // T.int64(8) * T.int64(3) + eps_2_nu_2_co_2_p_2_fused // T.int64(224) + nu_3 + nu_4)
                                    v_co = T.axis.spatial(T.int64(64), eps_0_nu_0_co_0_p_0_fused % T.int64(2) * T.int64(32) + eps_1_nu_1_co_1_p_1_fused % T.int64(8) * T.int64(4) + eps_2_nu_2_co_2_p_2_fused % T.int64(224) // T.int64(112) * T.int64(2) + co_3 * T.int64(2) + co_4)
                                    v_p = T.axis.spatial(T.int64(3136), eps_2_nu_2_co_2_p_2_fused % T.int64(112) * T.int64(28) + p_3 + p_4)
                                    v_ci = T.axis.reduce(T.int64(3), ci_0_fused + ci_1 + ci_2)
                                    T.reads(data_pack_shared[v_eps, v_nu, v_ci, v_p], p1_shared[v_eps, v_nu, v_ci, v_co])
                                    T.writes(bgemm_local[v_eps, v_nu, v_co, v_p])
                                    T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 32, "meta_schedule.tiling_structure": "SSSRRSRS"})
                                    with T.init():
                                        bgemm_local[v_eps, v_nu, v_co, v_p] = T.float32(0)
                                    bgemm_local[v_eps, v_nu, v_co, v_p] = bgemm_local[v_eps, v_nu, v_co, v_p] + data_pack_shared[v_eps, v_nu, v_ci, v_p] * p1_shared[v_eps, v_nu, v_ci, v_co]
                        for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(1), T.int64(2), T.int64(28)):
                            with T.block("bgemm_local"):
                                v0 = T.axis.spatial(T.int64(6), eps_0_nu_0_co_0_p_0_fused // T.int64(2) * T.int64(2) + eps_1_nu_1_co_1_p_1_fused // T.int64(16) + ax0)
                                v1 = T.axis.spatial(T.int64(6), eps_1_nu_1_co_1_p_1_fused % T.int64(16) // T.int64(8) * T.int64(3) + eps_2_nu_2_co_2_p_2_fused // T.int64(224) + ax1)
                                v2 = T.axis.spatial(T.int64(64), eps_0_nu_0_co_0_p_0_fused % T.int64(2) * T.int64(32) + eps_1_nu_1_co_1_p_1_fused % T.int64(8) * T.int64(4) + eps_2_nu_2_co_2_p_2_fused % T.int64(224) // T.int64(112) * T.int64(2) + ax2)
                                v3 = T.axis.spatial(T.int64(3136), eps_2_nu_2_co_2_p_2_fused % T.int64(112) * T.int64(28) + ax3)
                                T.reads(bgemm_local[v0, v1, v2, v3])
                                T.writes(bgemm[v0, v1, v2, v3])
                                bgemm[v0, v1, v2, v3] = bgemm_local[v0, v1, v2, v3]
            for n_co_h_0_w_0_fused_0 in T.thread_binding(T.int64(196), thread="blockIdx.x"):
                for n_co_h_0_w_0_fused_1 in T.thread_binding(T.int64(1024), thread="threadIdx.x"):
                    for ax0, ax1 in T.grid(T.int64(1), T.int64(1)):
                        for ax2 in T.unroll(T.int64(4)):
                            for ax3 in T.unroll(T.int64(4)):
                                for ax4 in T.unroll(T.int64(6)):
                                    for ax5 in T.unroll(T.int64(6)):
                                        with T.block("inverse"):
                                            v_co = T.axis.spatial(T.int64(64), (n_co_h_0_w_0_fused_0 * T.int64(1024) + n_co_h_0_w_0_fused_1) // T.int64(3136) + ax0)
                                            v_p = T.axis.spatial(T.int64(3136), (n_co_h_0_w_0_fused_0 * T.int64(1024) + n_co_h_0_w_0_fused_1) % T.int64(3136) + ax1)
                                            v_vh, v_vw, v_r_a, v_r_b = T.axis.remap("SSRR", [ax2, ax3, ax4, ax5])
                                            T.reads(bgemm[v_r_a, v_r_b, v_co, v_p])
                                            T.writes(inverse_local[v_co, v_p, v_vh, v_vw])
                                            T.block_attr({"schedule_rule": "conv2d_nchw_winograd_inverse"})
                                            with T.init():
                                                inverse_local[v_co, v_p, v_vh, v_vw] = T.float32(0)
                                            inverse_local[v_co, v_p, v_vh, v_vw] = inverse_local[v_co, v_p, v_vh, v_vw] + bgemm[v_r_a, v_r_b, v_co, v_p] * T.Select(v_r_a % T.int64(6) == T.int64(5) and v_vh % T.int64(4) == T.int64(3), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(5) and v_vh % T.int64(4) == T.int64(2), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(5) and v_vh % T.int64(4) == T.int64(1), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(5) and v_vh % T.int64(4) == T.int64(0), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(4) and v_vh % T.int64(4) == T.int64(3), T.float32(-8), T.Select(v_r_a % T.int64(6) == T.int64(4) and v_vh % T.int64(4) == T.int64(2), T.float32(4), T.Select(v_r_a % T.int64(6) == T.int64(4) and v_vh % T.int64(4) == T.int64(1), T.float32(-2), T.Select(v_r_a % T.int64(6) == T.int64(4) and v_vh % T.int64(4) == T.int64(0), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(3) and v_vh % T.int64(4) == T.int64(3), T.float32(0.125), T.Select(v_r_a % T.int64(6) == T.int64(3) and v_vh % T.int64(4) == T.int64(2), T.float32(0.25), T.Select(v_r_a % T.int64(6) == T.int64(3) and v_vh % T.int64(4) == T.int64(1), T.float32(0.5), T.Select(v_r_a % T.int64(6) == T.int64(3) and v_vh % T.int64(4) == T.int64(0), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(2) and v_vh % T.int64(4) == T.int64(3), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(2) and v_vh % T.int64(4) == T.int64(2), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(2) and v_vh % T.int64(4) == T.int64(1), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(2) and v_vh % T.int64(4) == T.int64(0), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(1) and v_vh % T.int64(4) == T.int64(3), T.float32(-1), T.Select(v_r_a % T.int64(6) == T.int64(1) and v_vh % T.int64(4) == T.int64(2), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(1) and v_vh % T.int64(4) == T.int64(1), T.float32(-1), T.Select(v_r_a % T.int64(6) == T.int64(1) and v_vh % T.int64(4) == T.int64(0), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(0) and v_vh % T.int64(4) == T.int64(3), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(0) and v_vh % T.int64(4) == T.int64(2), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(0) and v_vh % T.int64(4) == T.int64(1), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(0) and v_vh % T.int64(4) == T.int64(0), T.float32(1), T.float32(0))))))))))))))))))))))))) * T.Select(v_r_b % T.int64(6) == T.int64(5) and v_vw % T.int64(4) == T.int64(3), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(5) and v_vw % T.int64(4) == T.int64(2), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(5) and v_vw % T.int64(4) == T.int64(1), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(5) and v_vw % T.int64(4) == T.int64(0), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(4) and v_vw % T.int64(4) == T.int64(3), T.float32(-8), T.Select(v_r_b % T.int64(6) == T.int64(4) and v_vw % T.int64(4) == T.int64(2), T.float32(4), T.Select(v_r_b % T.int64(6) == T.int64(4) and v_vw % T.int64(4) == T.int64(1), T.float32(-2), T.Select(v_r_b % T.int64(6) == T.int64(4) and v_vw % T.int64(4) == T.int64(0), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(3) and v_vw % T.int64(4) == T.int64(3), T.float32(0.125), T.Select(v_r_b % T.int64(6) == T.int64(3) and v_vw % T.int64(4) == T.int64(2), T.float32(0.25), T.Select(v_r_b % T.int64(6) == T.int64(3) and v_vw % T.int64(4) == T.int64(1), T.float32(0.5), T.Select(v_r_b % T.int64(6) == T.int64(3) and v_vw % T.int64(4) == T.int64(0), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(2) and v_vw % T.int64(4) == T.int64(3), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(2) and v_vw % T.int64(4) == T.int64(2), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(2) and v_vw % T.int64(4) == T.int64(1), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(2) and v_vw % T.int64(4) == T.int64(0), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(1) and v_vw % T.int64(4) == T.int64(3), T.float32(-1), T.Select(v_r_b % T.int64(6) == T.int64(1) and v_vw % T.int64(4) == T.int64(2), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(1) and v_vw % T.int64(4) == T.int64(1), T.float32(-1), T.Select(v_r_b % T.int64(6) == T.int64(1) and v_vw % T.int64(4) == T.int64(0), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(0) and v_vw % T.int64(4) == T.int64(3), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(0) and v_vw % T.int64(4) == T.int64(2), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(0) and v_vw % T.int64(4) == T.int64(1), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(0) and v_vw % T.int64(4) == T.int64(0), T.float32(1), T.float32(0)))))))))))))))))))))))))
                    for h_1, w_1 in T.grid(T.int64(4), T.int64(4)):
                        with T.block("conv2d_winograd"):
                            v_n = T.axis.spatial(T.int64(1), T.int64(0))
                            v_co = T.axis.spatial(T.int64(64), (n_co_h_0_w_0_fused_0 * T.int64(1024) + n_co_h_0_w_0_fused_1) // T.int64(3136))
                            v_h = T.axis.spatial(T.int64(224), (n_co_h_0_w_0_fused_0 * T.int64(1024) + n_co_h_0_w_0_fused_1) % T.int64(3136) // T.int64(56) * T.int64(4) + h_1)
                            v_w = T.axis.spatial(T.int64(224), (n_co_h_0_w_0_fused_0 * T.int64(1024) + n_co_h_0_w_0_fused_1) % T.int64(56) * T.int64(4) + w_1)
                            T.reads(inverse_local[v_co, v_n * T.int64(3136) + v_h // T.int64(4) * T.int64(56) + v_w // T.int64(4), v_h % T.int64(4), v_w % T.int64(4)], p2[v_n, v_co, T.int64(0), T.int64(0)])
                            T.writes(T_relu[v_n, v_co, v_h, v_w])
                            T_relu[v_n, v_co, v_h, v_w] = T.max(inverse_local[v_co, v_n * T.int64(3136) + v_h // T.int64(4) * T.int64(56) + v_w // T.int64(4), v_h % T.int64(4), v_w % T.int64(4)] + p2[v_n, v_co, T.int64(0), T.int64(0)], T.float32(0))
b0 = sch.get_block(name="data_pack", func_name="main")
b1 = sch.get_block(name="bgemm", func_name="main")
b2 = sch.get_block(name="inverse", func_name="main")
b3 = sch.get_block(name="conv2d_winograd", func_name="main")
b4 = sch.get_block(name="T_add", func_name="main")
b5 = sch.get_block(name="T_relu", func_name="main")
b6 = sch.get_block(name="root", func_name="main")
b7, b8 = sch.get_producers(block=b2)
sch.compute_inline(block=b8)
b9, = sch.get_consumers(block=b2)
l10, l11, l12, l13 = sch.get_loops(block=b9)
l14, l15 = sch.split(loop=l12, factors=[None, 4], preserve_unit_iters=True)
l16, l17 = sch.split(loop=l13, factors=[None, 4], preserve_unit_iters=True)
sch.reorder(l14, l16, l15, l17)
sch.compute_at(block=b2, loop=l16, preserve_unit_loops=True, index=-1)
sch.set_scope(block=b2, buffer_index=0, storage_scope="local")
l18, l19, l20, l21, l22, l23, l24, l25, l26, l27 = sch.get_loops(block=b2)
sch.unroll(loop=l24)
sch.unroll(loop=l25)
sch.unroll(loop=l26)
sch.unroll(loop=l27)
b28, b29 = sch.get_producers(block=b0)
sch.compute_inline(block=b29)
b30, = sch.get_producers(block=b28)
l31, l32, l33, l34, l35, l36 = sch.get_loops(block=b0)
sch.reorder(l33, l34, l31, l32, l35, l36)
sch.unroll(loop=l31)
sch.unroll(loop=l32)
sch.unroll(loop=l35)
sch.unroll(loop=l36)
l37 = sch.fuse(l33, l34, preserve_unit_iters=True)
v38 = sch.sample_categorical(candidates=[32, 64, 128, 256, 512, 1024], probs=[0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666], decision=2)
l39, l40 = sch.split(loop=l37, factors=[None, v38], preserve_unit_iters=True)
sch.bind(loop=l39, thread_axis="blockIdx.x")
sch.bind(loop=l40, thread_axis="threadIdx.x")
b41 = sch.cache_write(block=b0, write_buffer_index=0, storage_scope="local")
sch.reverse_compute_at(block=b41, loop=l40, preserve_unit_loops=True, index=-1)
sch.compute_at(block=b28, loop=l40, preserve_unit_loops=True, index=-1)
sch.set_scope(block=b28, buffer_index=0, storage_scope="local")
sch.compute_inline(block=b30)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSSRRSRS")
l42, l43, l44, l45, l46 = sch.get_loops(block=b1)
v47, v48, v49, v50, v51 = sch.sample_perfect_tile(loop=l42, n=5, max_innermost_factor=64, decision=[3, 2, 1, 1, 1])
l52, l53, l54, l55, l56 = sch.split(loop=l42, factors=[v47, v48, v49, v50, v51], preserve_unit_iters=True)
v57, v58, v59, v60, v61 = sch.sample_perfect_tile(loop=l43, n=5, max_innermost_factor=64, decision=[1, 2, 3, 1, 1])
l62, l63, l64, l65, l66 = sch.split(loop=l43, factors=[v57, v58, v59, v60, v61], preserve_unit_iters=True)
v67, v68, v69, v70, v71 = sch.sample_perfect_tile(loop=l44, n=5, max_innermost_factor=64, decision=[2, 8, 2, 1, 2])
l72, l73, l74, l75, l76 = sch.split(loop=l44, factors=[v67, v68, v69, v70, v71], preserve_unit_iters=True)
v77, v78, v79, v80, v81 = sch.sample_perfect_tile(loop=l45, n=5, max_innermost_factor=64, decision=[1, 1, 112, 28, 1])
l82, l83, l84, l85, l86 = sch.split(loop=l45, factors=[v77, v78, v79, v80, v81], preserve_unit_iters=True)
v87, v88, v89 = sch.sample_perfect_tile(loop=l46, n=3, max_innermost_factor=64, decision=[3, 1, 1])
l90, l91, l92 = sch.split(loop=l46, factors=[v87, v88, v89], preserve_unit_iters=True)
sch.reorder(l52, l62, l72, l82, l53, l63, l73, l83, l54, l64, l74, l84, l90, l91, l55, l65, l75, l85, l92, l56, l66, l76, l86)
l93 = sch.fuse(l52, l62, l72, l82, preserve_unit_iters=True)
sch.bind(loop=l93, thread_axis="blockIdx.x")
l94 = sch.fuse(l53, l63, l73, l83, preserve_unit_iters=True)
sch.bind(loop=l94, thread_axis="vthread.x")
l95 = sch.fuse(l54, l64, l74, l84, preserve_unit_iters=True)
sch.bind(loop=l95, thread_axis="threadIdx.x")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_low_inclusive", ann_val=32)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_high_inclusive", ann_val=1024)
b96 = sch.cache_write(block=b1, write_buffer_index=0, storage_scope="local")
sch.reverse_compute_at(block=b96, loop=l95, preserve_unit_loops=True, index=-1)
b97 = sch.cache_read(block=b1, read_buffer_index=0, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b97, loop=l90, preserve_unit_loops=True, index=-1)
l98, l99, l100, l101, l102, l103, l104, l105 = sch.get_loops(block=b97)
l106 = sch.fuse(l102, l103, l104, l105, preserve_unit_iters=True)
v107 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b97, ann_key="meta_schedule.cooperative_fetch", ann_val=v107)
b108 = sch.cache_read(block=b1, read_buffer_index=1, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b108, loop=l90, preserve_unit_loops=True, index=-1)
l109, l110, l111, l112, l113, l114, l115, l116 = sch.get_loops(block=b108)
l117 = sch.fuse(l113, l114, l115, l116, preserve_unit_iters=True)
v118 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b108, ann_key="meta_schedule.cooperative_fetch", ann_val=v118)
l119 = sch.fuse(l90, preserve_unit_iters=True)
sch.annotate(block_or_loop=l119, ann_key="software_pipeline_stage", ann_val=[0, 0, 2])
sch.annotate(block_or_loop=l119, ann_key="software_pipeline_order", ann_val=[0, 1, 2])
sch.annotate(block_or_loop=l119, ann_key="software_pipeline_async_stages", ann_val=[0])
sch.reverse_compute_inline(block=b5)
sch.reverse_compute_inline(block=b4)
v120 = sch.sample_categorical(candidates=[0, 16, 64, 512, 1024], probs=[0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001], decision=1)
sch.annotate(block_or_loop=b6, ann_key="meta_schedule.unroll_explicit", ann_val=v120)
l121, l122, l123, l124, l125, l126 = sch.get_loops(block=b3)
l127 = sch.fuse(l121, l122, l123, l124, preserve_unit_iters=True)
v128 = sch.sample_categorical(candidates=[32, 64, 128, 256, 512, 1024], probs=[0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666], decision=5)
l129, l130 = sch.split(loop=l127, factors=[None, v128], preserve_unit_iters=True)
sch.bind(loop=l129, thread_axis="blockIdx.x")
sch.bind(loop=l130, thread_axis="threadIdx.x")
2024-04-28 19:49:56 [INFO] [task_scheduler.cc:170] Design space #2:
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(3), T.int64(224), T.int64(224)), "float32"), p1: T.Buffer((T.int64(6), T.int64(6), T.int64(3), T.int64(64)), "float32"), p2: T.Buffer((T.int64(1), T.int64(64), T.int64(1), T.int64(1)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(64), T.int64(224), T.int64(224)), "float32")):
        T.func_attr({"layout_free_buffers": [1], "tir.noalias": T.bool(True)})
        with T.block("root"):
            T.reads()
            T.writes()
            T.block_attr({"meta_schedule.unroll_explicit": 1024})
            input_tile_local = T.alloc_buffer((T.int64(3), T.int64(3136), T.int64(6), T.int64(6)), scope="local")
            data_pack = T.alloc_buffer((T.int64(6), T.int64(6), T.int64(3), T.int64(3136)))
            bgemm = T.alloc_buffer((T.int64(6), T.int64(6), T.int64(64), T.int64(3136)))
            inverse_local = T.alloc_buffer((T.int64(64), T.int64(3136), T.int64(4), T.int64(4)), scope="local")
            data_pack_local = T.alloc_buffer((T.int64(6), T.int64(6), T.int64(3), T.int64(3136)), scope="local")
            bgemm_local = T.alloc_buffer((T.int64(6), T.int64(6), T.int64(64), T.int64(3136)), scope="local")
            data_pack_shared = T.alloc_buffer((T.int64(6), T.int64(6), T.int64(3), T.int64(3136)), scope="shared")
            p1_shared = T.alloc_buffer((T.int64(6), T.int64(6), T.int64(3), T.int64(64)), scope="shared")
            for ci_p_fused_0 in T.thread_binding(T.int64(74), thread="blockIdx.x"):
                for ci_p_fused_1 in T.thread_binding(T.int64(128), thread="threadIdx.x"):
                    for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(1), T.int64(6), T.int64(6)):
                        with T.block("input_tile"):
                            v_ci = T.axis.spatial(T.int64(3), (ci_p_fused_0 * T.int64(128) + ci_p_fused_1) // T.int64(3136) + ax0)
                            v_p = T.axis.spatial(T.int64(3136), (ci_p_fused_0 * T.int64(128) + ci_p_fused_1) % T.int64(3136) + ax1)
                            v_eps, v_nu = T.axis.remap("SS", [ax2, ax3])
                            T.where(ci_p_fused_0 * T.int64(128) + ci_p_fused_1 < T.int64(9408))
                            T.reads(p0[v_p // T.int64(3136), v_ci, v_p % T.int64(3136) // T.int64(56) * T.int64(4) + v_eps - T.int64(1), v_p % T.int64(56) * T.int64(4) + v_nu - T.int64(1)])
                            T.writes(input_tile_local[v_ci, v_p, v_eps, v_nu])
                            T.block_attr({"schedule_rule": "None"})
                            input_tile_local[v_ci, v_p, v_eps, v_nu] = T.if_then_else(T.int64(1) <= v_p % T.int64(3136) // T.int64(56) * T.int64(4) + v_eps and v_p % T.int64(3136) // T.int64(56) * T.int64(4) + v_eps < T.int64(225) and T.int64(1) <= v_p % T.int64(56) * T.int64(4) + v_nu and v_p % T.int64(56) * T.int64(4) + v_nu < T.int64(225), p0[v_p // T.int64(3136), v_ci, v_p % T.int64(3136) // T.int64(56) * T.int64(4) + v_eps - T.int64(1), v_p % T.int64(56) * T.int64(4) + v_nu - T.int64(1)], T.float32(0))
                    for eps in T.unroll(T.int64(6)):
                        for nu in T.unroll(T.int64(6)):
                            for r_a in T.unroll(T.int64(6)):
                                for r_b in T.unroll(T.int64(6)):
                                    with T.block("data_pack"):
                                        v_eps, v_nu = T.axis.remap("SS", [eps, nu])
                                        v_ci = T.axis.spatial(T.int64(3), (ci_p_fused_0 * T.int64(128) + ci_p_fused_1) // T.int64(3136))
                                        v_p = T.axis.spatial(T.int64(3136), (ci_p_fused_0 * T.int64(128) + ci_p_fused_1) % T.int64(3136))
                                        v_r_a, v_r_b = T.axis.remap("RR", [r_a, r_b])
                                        T.where(ci_p_fused_0 * T.int64(128) + ci_p_fused_1 < T.int64(9408))
                                        T.reads(input_tile_local[v_ci, v_p, v_r_a, v_r_b])
                                        T.writes(data_pack_local[v_eps, v_nu, v_ci, v_p])
                                        T.block_attr({"schedule_rule": "conv2d_nchw_winograd_data_pack"})
                                        with T.init():
                                            data_pack_local[v_eps, v_nu, v_ci, v_p] = T.float32(0)
                                        data_pack_local[v_eps, v_nu, v_ci, v_p] = data_pack_local[v_eps, v_nu, v_ci, v_p] + input_tile_local[v_ci, v_p, v_r_a, v_r_b] * T.Select(v_r_a % T.int64(6) == T.int64(5) and v_eps % T.int64(6) == T.int64(5), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(5) and v_eps % T.int64(6) == T.int64(4), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(5) and v_eps % T.int64(6) == T.int64(3), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(5) and v_eps % T.int64(6) == T.int64(2), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(5) and v_eps % T.int64(6) == T.int64(1), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(5) and v_eps % T.int64(6) == T.int64(0), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(4) and v_eps % T.int64(6) == T.int64(5), T.float32(1.5), T.Select(v_r_a % T.int64(6) == T.int64(4) and v_eps % T.int64(6) == T.int64(4), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(4) and v_eps % T.int64(6) == T.int64(3), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(4) and v_eps % T.int64(6) == T.int64(2), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(4) and v_eps % T.int64(6) == T.int64(1), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(4) and v_eps % T.int64(6) == T.int64(0), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(3) and v_eps % T.int64(6) == T.int64(5), T.float32(-2), T.Select(v_r_a % T.int64(6) == T.int64(3) and v_eps % T.int64(6) == T.int64(4), T.float32(-0.5), T.Select(v_r_a % T.int64(6) == T.int64(3) and v_eps % T.int64(6) == T.int64(3), T.float32(2), T.Select(v_r_a % T.int64(6) == T.int64(3) and v_eps % T.int64(6) == T.int64(2), T.float32(2.5), T.Select(v_r_a % T.int64(6) == T.int64(3) and v_eps % T.int64(6) == T.int64(1), T.float32(0.5), T.Select(v_r_a % T.int64(6) == T.int64(3) and v_eps % T.int64(6) == T.int64(0), T.float32(1.5), T.Select(v_r_a % T.int64(6) == T.int64(2) and v_eps % T.int64(6) == T.int64(5), T.float32(-1.5), T.Select(v_r_a % T.int64(6) == T.int64(2) and v_eps % T.int64(6) == T.int64(4), T.float32(-1), T.Select(v_r_a % T.int64(6) == T.int64(2) and v_eps % T.int64(6) == T.int64(3), T.float32(-1), T.Select(v_r_a % T.int64(6) == T.int64(2) and v_eps % T.int64(6) == T.int64(2), T.float32(0.5), T.Select(v_r_a % T.int64(6) == T.int64(2) and v_eps % T.int64(6) == T.int64(1), T.float32(-2.5), T.Select(v_r_a % T.int64(6) == T.int64(2) and v_eps % T.int64(6) == T.int64(0), T.float32(-2), T.Select(v_r_a % T.int64(6) == T.int64(1) and v_eps % T.int64(6) == T.int64(5), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(1) and v_eps % T.int64(6) == T.int64(4), T.float32(0.5), T.Select(v_r_a % T.int64(6) == T.int64(1) and v_eps % T.int64(6) == T.int64(3), T.float32(-2), T.Select(v_r_a % T.int64(6) == T.int64(1) and v_eps % T.int64(6) == T.int64(2), T.float32(-1), T.Select(v_r_a % T.int64(6) == T.int64(1) and v_eps % T.int64(6) == T.int64(1), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(1) and v_eps % T.int64(6) == T.int64(0), T.float32(-1.5), T.Select(v_r_a % T.int64(6) == T.int64(0) and v_eps % T.int64(6) == T.int64(5), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(0) and v_eps % T.int64(6) == T.int64(4), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(0) and v_eps % T.int64(6) == T.int64(3), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(0) and v_eps % T.int64(6) == T.int64(2), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(0) and v_eps % T.int64(6) == T.int64(1), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(0) and v_eps % T.int64(6) == T.int64(0), T.float32(1), T.float32(0))))))))))))))))))))))))))))))))))))) * T.Select(v_r_b % T.int64(6) == T.int64(5) and v_nu % T.int64(6) == T.int64(5), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(5) and v_nu % T.int64(6) == T.int64(4), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(5) and v_nu % T.int64(6) == T.int64(3), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(5) and v_nu % T.int64(6) == T.int64(2), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(5) and v_nu % T.int64(6) == T.int64(1), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(5) and v_nu % T.int64(6) == T.int64(0), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(4) and v_nu % T.int64(6) == T.int64(5), T.float32(1.5), T.Select(v_r_b % T.int64(6) == T.int64(4) and v_nu % T.int64(6) == T.int64(4), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(4) and v_nu % T.int64(6) == T.int64(3), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(4) and v_nu % T.int64(6) == T.int64(2), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(4) and v_nu % T.int64(6) == T.int64(1), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(4) and v_nu % T.int64(6) == T.int64(0), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(3) and v_nu % T.int64(6) == T.int64(5), T.float32(-2), T.Select(v_r_b % T.int64(6) == T.int64(3) and v_nu % T.int64(6) == T.int64(4), T.float32(-0.5), T.Select(v_r_b % T.int64(6) == T.int64(3) and v_nu % T.int64(6) == T.int64(3), T.float32(2), T.Select(v_r_b % T.int64(6) == T.int64(3) and v_nu % T.int64(6) == T.int64(2), T.float32(2.5), T.Select(v_r_b % T.int64(6) == T.int64(3) and v_nu % T.int64(6) == T.int64(1), T.float32(0.5), T.Select(v_r_b % T.int64(6) == T.int64(3) and v_nu % T.int64(6) == T.int64(0), T.float32(1.5), T.Select(v_r_b % T.int64(6) == T.int64(2) and v_nu % T.int64(6) == T.int64(5), T.float32(-1.5), T.Select(v_r_b % T.int64(6) == T.int64(2) and v_nu % T.int64(6) == T.int64(4), T.float32(-1), T.Select(v_r_b % T.int64(6) == T.int64(2) and v_nu % T.int64(6) == T.int64(3), T.float32(-1), T.Select(v_r_b % T.int64(6) == T.int64(2) and v_nu % T.int64(6) == T.int64(2), T.float32(0.5), T.Select(v_r_b % T.int64(6) == T.int64(2) and v_nu % T.int64(6) == T.int64(1), T.float32(-2.5), T.Select(v_r_b % T.int64(6) == T.int64(2) and v_nu % T.int64(6) == T.int64(0), T.float32(-2), T.Select(v_r_b % T.int64(6) == T.int64(1) and v_nu % T.int64(6) == T.int64(5), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(1) and v_nu % T.int64(6) == T.int64(4), T.float32(0.5), T.Select(v_r_b % T.int64(6) == T.int64(1) and v_nu % T.int64(6) == T.int64(3), T.float32(-2), T.Select(v_r_b % T.int64(6) == T.int64(1) and v_nu % T.int64(6) == T.int64(2), T.float32(-1), T.Select(v_r_b % T.int64(6) == T.int64(1) and v_nu % T.int64(6) == T.int64(1), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(1) and v_nu % T.int64(6) == T.int64(0), T.float32(-1.5), T.Select(v_r_b % T.int64(6) == T.int64(0) and v_nu % T.int64(6) == T.int64(5), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(0) and v_nu % T.int64(6) == T.int64(4), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(0) and v_nu % T.int64(6) == T.int64(3), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(0) and v_nu % T.int64(6) == T.int64(2), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(0) and v_nu % T.int64(6) == T.int64(1), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(0) and v_nu % T.int64(6) == T.int64(0), T.float32(1), T.float32(0)))))))))))))))))))))))))))))))))))))
                    for ax0, ax1, ax2, ax3 in T.grid(T.int64(6), T.int64(6), T.int64(1), T.int64(1)):
                        with T.block("data_pack_local"):
                            v0, v1 = T.axis.remap("SS", [ax0, ax1])
                            v2 = T.axis.spatial(T.int64(3), (ci_p_fused_0 * T.int64(128) + ci_p_fused_1) // T.int64(3136) + ax2)
                            v3 = T.axis.spatial(T.int64(3136), (ci_p_fused_0 * T.int64(128) + ci_p_fused_1) % T.int64(3136) + ax3)
                            T.where(ci_p_fused_0 * T.int64(128) + ci_p_fused_1 < T.int64(9408))
                            T.reads(data_pack_local[v0, v1, v2, v3])
                            T.writes(data_pack[v0, v1, v2, v3])
                            data_pack[v0, v1, v2, v3] = data_pack_local[v0, v1, v2, v3]
            for eps_0_nu_0_co_0_p_0_fused in T.thread_binding(T.int64(6), thread="blockIdx.x"):
                for eps_1_nu_1_co_1_p_1_fused in T.thread_binding(T.int64(32), thread="vthread.x"):
                    for eps_2_nu_2_co_2_p_2_fused in T.thread_binding(T.int64(672), thread="threadIdx.x"):
                        for ci_0_fused in T.serial(T.int64(3), annotations={"software_pipeline_async_stages": [0], "software_pipeline_order": [0, 1, 2], "software_pipeline_stage": [0, 0, 3]}):
                            for ax0_ax1_ax2_ax3_fused in range(T.int64(37632)):
                                with T.block("data_pack_shared"):
                                    v0 = T.axis.spatial(T.int64(6), eps_0_nu_0_co_0_p_0_fused // T.int64(2) * T.int64(2) + ax0_ax1_ax2_ax3_fused // T.int64(18816))
                                    v1 = T.axis.spatial(T.int64(6), ax0_ax1_ax2_ax3_fused % T.int64(18816) // T.int64(3136))
                                    v2 = T.axis.spatial(T.int64(3), ci_0_fused)
                                    v3 = T.axis.spatial(T.int64(3136), ax0_ax1_ax2_ax3_fused % T.int64(3136))
                                    T.reads(data_pack[v0, v1, v2, v3])
                                    T.writes(data_pack_shared[v0, v1, v2, v3])
                                    T.block_attr({"meta_schedule.cooperative_fetch": 4})
                                    data_pack_shared[v0, v1, v2, v3] = data_pack[v0, v1, v2, v3]
                            for ax0_ax1_ax2_ax3_fused in range(T.int64(384)):
                                with T.block("p1_shared"):
                                    v0 = T.axis.spatial(T.int64(6), eps_0_nu_0_co_0_p_0_fused // T.int64(2) * T.int64(2) + ax0_ax1_ax2_ax3_fused // T.int64(192))
                                    v1 = T.axis.spatial(T.int64(6), ax0_ax1_ax2_ax3_fused % T.int64(192) // T.int64(32))
                                    v2 = T.axis.spatial(T.int64(3), ci_0_fused)
                                    v3 = T.axis.spatial(T.int64(64), eps_0_nu_0_co_0_p_0_fused % T.int64(2) * T.int64(32) + ax0_ax1_ax2_ax3_fused % T.int64(32))
                                    T.reads(p1[v0, v1, v2, v3])
                                    T.writes(p1_shared[v0, v1, v2, v3])
                                    T.block_attr({"meta_schedule.cooperative_fetch": 4})
                                    p1_shared[v0, v1, v2, v3] = p1[v0, v1, v2, v3]
                            for ci_1, eps_3, nu_3, co_3, p_3, ci_2, eps_4, nu_4, co_4, p_4 in T.grid(T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(28), T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(1)):
                                with T.block("bgemm"):
                                    v_eps = T.axis.spatial(T.int64(6), eps_0_nu_0_co_0_p_0_fused // T.int64(2) * T.int64(2) + eps_1_nu_1_co_1_p_1_fused // T.int64(16) + eps_3 + eps_4)
                                    v_nu = T.axis.spatial(T.int64(6), eps_1_nu_1_co_1_p_1_fused % T.int64(16) // T.int64(8) * T.int64(3) + eps_2_nu_2_co_2_p_2_fused // T.int64(224) + nu_3 + nu_4)
                                    v_co = T.axis.spatial(T.int64(64), eps_0_nu_0_co_0_p_0_fused % T.int64(2) * T.int64(32) + eps_1_nu_1_co_1_p_1_fused % T.int64(8) * T.int64(4) + eps_2_nu_2_co_2_p_2_fused % T.int64(224) // T.int64(112) * T.int64(2) + co_3 * T.int64(2) + co_4)
                                    v_p = T.axis.spatial(T.int64(3136), eps_2_nu_2_co_2_p_2_fused % T.int64(112) * T.int64(28) + p_3 + p_4)
                                    v_ci = T.axis.reduce(T.int64(3), ci_0_fused + ci_1 + ci_2)
                                    T.reads(data_pack_shared[v_eps, v_nu, v_ci, v_p], p1_shared[v_eps, v_nu, v_ci, v_co])
                                    T.writes(bgemm_local[v_eps, v_nu, v_co, v_p])
                                    T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 32, "meta_schedule.tiling_structure": "SSSRRSRS"})
                                    with T.init():
                                        bgemm_local[v_eps, v_nu, v_co, v_p] = T.float32(0)
                                    bgemm_local[v_eps, v_nu, v_co, v_p] = bgemm_local[v_eps, v_nu, v_co, v_p] + data_pack_shared[v_eps, v_nu, v_ci, v_p] * p1_shared[v_eps, v_nu, v_ci, v_co]
                        for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(1), T.int64(2), T.int64(28)):
                            with T.block("bgemm_local"):
                                v0 = T.axis.spatial(T.int64(6), eps_0_nu_0_co_0_p_0_fused // T.int64(2) * T.int64(2) + eps_1_nu_1_co_1_p_1_fused // T.int64(16) + ax0)
                                v1 = T.axis.spatial(T.int64(6), eps_1_nu_1_co_1_p_1_fused % T.int64(16) // T.int64(8) * T.int64(3) + eps_2_nu_2_co_2_p_2_fused // T.int64(224) + ax1)
                                v2 = T.axis.spatial(T.int64(64), eps_0_nu_0_co_0_p_0_fused % T.int64(2) * T.int64(32) + eps_1_nu_1_co_1_p_1_fused % T.int64(8) * T.int64(4) + eps_2_nu_2_co_2_p_2_fused % T.int64(224) // T.int64(112) * T.int64(2) + ax2)
                                v3 = T.axis.spatial(T.int64(3136), eps_2_nu_2_co_2_p_2_fused % T.int64(112) * T.int64(28) + ax3)
                                T.reads(bgemm_local[v0, v1, v2, v3])
                                T.writes(bgemm[v0, v1, v2, v3])
                                bgemm[v0, v1, v2, v3] = bgemm_local[v0, v1, v2, v3]
            for n_co_h_0_w_0_fused_0 in T.thread_binding(T.int64(6272), thread="blockIdx.x"):
                for n_co_h_0_w_0_fused_1 in T.thread_binding(T.int64(32), thread="threadIdx.x"):
                    for ax0, ax1 in T.grid(T.int64(1), T.int64(1)):
                        for ax2 in T.unroll(T.int64(4)):
                            for ax3 in T.unroll(T.int64(4)):
                                for ax4 in T.unroll(T.int64(6)):
                                    for ax5 in T.unroll(T.int64(6)):
                                        with T.block("inverse"):
                                            v_co = T.axis.spatial(T.int64(64), (n_co_h_0_w_0_fused_0 * T.int64(32) + n_co_h_0_w_0_fused_1) // T.int64(3136) + ax0)
                                            v_p = T.axis.spatial(T.int64(3136), (n_co_h_0_w_0_fused_0 * T.int64(32) + n_co_h_0_w_0_fused_1) % T.int64(3136) + ax1)
                                            v_vh, v_vw, v_r_a, v_r_b = T.axis.remap("SSRR", [ax2, ax3, ax4, ax5])
                                            T.reads(bgemm[v_r_a, v_r_b, v_co, v_p])
                                            T.writes(inverse_local[v_co, v_p, v_vh, v_vw])
                                            T.block_attr({"schedule_rule": "conv2d_nchw_winograd_inverse"})
                                            with T.init():
                                                inverse_local[v_co, v_p, v_vh, v_vw] = T.float32(0)
                                            inverse_local[v_co, v_p, v_vh, v_vw] = inverse_local[v_co, v_p, v_vh, v_vw] + bgemm[v_r_a, v_r_b, v_co, v_p] * T.Select(v_r_a % T.int64(6) == T.int64(5) and v_vh % T.int64(4) == T.int64(3), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(5) and v_vh % T.int64(4) == T.int64(2), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(5) and v_vh % T.int64(4) == T.int64(1), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(5) and v_vh % T.int64(4) == T.int64(0), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(4) and v_vh % T.int64(4) == T.int64(3), T.float32(-8), T.Select(v_r_a % T.int64(6) == T.int64(4) and v_vh % T.int64(4) == T.int64(2), T.float32(4), T.Select(v_r_a % T.int64(6) == T.int64(4) and v_vh % T.int64(4) == T.int64(1), T.float32(-2), T.Select(v_r_a % T.int64(6) == T.int64(4) and v_vh % T.int64(4) == T.int64(0), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(3) and v_vh % T.int64(4) == T.int64(3), T.float32(0.125), T.Select(v_r_a % T.int64(6) == T.int64(3) and v_vh % T.int64(4) == T.int64(2), T.float32(0.25), T.Select(v_r_a % T.int64(6) == T.int64(3) and v_vh % T.int64(4) == T.int64(1), T.float32(0.5), T.Select(v_r_a % T.int64(6) == T.int64(3) and v_vh % T.int64(4) == T.int64(0), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(2) and v_vh % T.int64(4) == T.int64(3), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(2) and v_vh % T.int64(4) == T.int64(2), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(2) and v_vh % T.int64(4) == T.int64(1), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(2) and v_vh % T.int64(4) == T.int64(0), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(1) and v_vh % T.int64(4) == T.int64(3), T.float32(-1), T.Select(v_r_a % T.int64(6) == T.int64(1) and v_vh % T.int64(4) == T.int64(2), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(1) and v_vh % T.int64(4) == T.int64(1), T.float32(-1), T.Select(v_r_a % T.int64(6) == T.int64(1) and v_vh % T.int64(4) == T.int64(0), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(0) and v_vh % T.int64(4) == T.int64(3), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(0) and v_vh % T.int64(4) == T.int64(2), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(0) and v_vh % T.int64(4) == T.int64(1), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(0) and v_vh % T.int64(4) == T.int64(0), T.float32(1), T.float32(0))))))))))))))))))))))))) * T.Select(v_r_b % T.int64(6) == T.int64(5) and v_vw % T.int64(4) == T.int64(3), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(5) and v_vw % T.int64(4) == T.int64(2), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(5) and v_vw % T.int64(4) == T.int64(1), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(5) and v_vw % T.int64(4) == T.int64(0), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(4) and v_vw % T.int64(4) == T.int64(3), T.float32(-8), T.Select(v_r_b % T.int64(6) == T.int64(4) and v_vw % T.int64(4) == T.int64(2), T.float32(4), T.Select(v_r_b % T.int64(6) == T.int64(4) and v_vw % T.int64(4) == T.int64(1), T.float32(-2), T.Select(v_r_b % T.int64(6) == T.int64(4) and v_vw % T.int64(4) == T.int64(0), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(3) and v_vw % T.int64(4) == T.int64(3), T.float32(0.125), T.Select(v_r_b % T.int64(6) == T.int64(3) and v_vw % T.int64(4) == T.int64(2), T.float32(0.25), T.Select(v_r_b % T.int64(6) == T.int64(3) and v_vw % T.int64(4) == T.int64(1), T.float32(0.5), T.Select(v_r_b % T.int64(6) == T.int64(3) and v_vw % T.int64(4) == T.int64(0), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(2) and v_vw % T.int64(4) == T.int64(3), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(2) and v_vw % T.int64(4) == T.int64(2), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(2) and v_vw % T.int64(4) == T.int64(1), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(2) and v_vw % T.int64(4) == T.int64(0), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(1) and v_vw % T.int64(4) == T.int64(3), T.float32(-1), T.Select(v_r_b % T.int64(6) == T.int64(1) and v_vw % T.int64(4) == T.int64(2), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(1) and v_vw % T.int64(4) == T.int64(1), T.float32(-1), T.Select(v_r_b % T.int64(6) == T.int64(1) and v_vw % T.int64(4) == T.int64(0), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(0) and v_vw % T.int64(4) == T.int64(3), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(0) and v_vw % T.int64(4) == T.int64(2), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(0) and v_vw % T.int64(4) == T.int64(1), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(0) and v_vw % T.int64(4) == T.int64(0), T.float32(1), T.float32(0)))))))))))))))))))))))))
                    for h_1, w_1 in T.grid(T.int64(4), T.int64(4)):
                        with T.block("conv2d_winograd"):
                            v_n = T.axis.spatial(T.int64(1), T.int64(0))
                            v_co = T.axis.spatial(T.int64(64), (n_co_h_0_w_0_fused_0 * T.int64(32) + n_co_h_0_w_0_fused_1) // T.int64(3136))
                            v_h = T.axis.spatial(T.int64(224), (n_co_h_0_w_0_fused_0 * T.int64(32) + n_co_h_0_w_0_fused_1) % T.int64(3136) // T.int64(56) * T.int64(4) + h_1)
                            v_w = T.axis.spatial(T.int64(224), (n_co_h_0_w_0_fused_0 * T.int64(32) + n_co_h_0_w_0_fused_1) % T.int64(56) * T.int64(4) + w_1)
                            T.reads(inverse_local[v_co, v_n * T.int64(3136) + v_h // T.int64(4) * T.int64(56) + v_w // T.int64(4), v_h % T.int64(4), v_w % T.int64(4)], p2[v_n, v_co, T.int64(0), T.int64(0)])
                            T.writes(T_relu[v_n, v_co, v_h, v_w])
                            T_relu[v_n, v_co, v_h, v_w] = T.max(inverse_local[v_co, v_n * T.int64(3136) + v_h // T.int64(4) * T.int64(56) + v_w // T.int64(4), v_h % T.int64(4), v_w % T.int64(4)] + p2[v_n, v_co, T.int64(0), T.int64(0)], T.float32(0))
b0 = sch.get_block(name="data_pack", func_name="main")
b1 = sch.get_block(name="bgemm", func_name="main")
b2 = sch.get_block(name="inverse", func_name="main")
b3 = sch.get_block(name="conv2d_winograd", func_name="main")
b4 = sch.get_block(name="T_add", func_name="main")
b5 = sch.get_block(name="T_relu", func_name="main")
b6 = sch.get_block(name="root", func_name="main")
b7, b8 = sch.get_producers(block=b2)
sch.compute_inline(block=b8)
b9, = sch.get_consumers(block=b2)
l10, l11, l12, l13 = sch.get_loops(block=b9)
l14, l15 = sch.split(loop=l12, factors=[None, 4], preserve_unit_iters=True)
l16, l17 = sch.split(loop=l13, factors=[None, 4], preserve_unit_iters=True)
sch.reorder(l14, l16, l15, l17)
sch.compute_at(block=b2, loop=l16, preserve_unit_loops=True, index=-1)
sch.set_scope(block=b2, buffer_index=0, storage_scope="local")
l18, l19, l20, l21, l22, l23, l24, l25, l26, l27 = sch.get_loops(block=b2)
sch.unroll(loop=l24)
sch.unroll(loop=l25)
sch.unroll(loop=l26)
sch.unroll(loop=l27)
b28, b29 = sch.get_producers(block=b0)
sch.compute_inline(block=b29)
b30, = sch.get_producers(block=b28)
l31, l32, l33, l34, l35, l36 = sch.get_loops(block=b0)
sch.reorder(l33, l34, l31, l32, l35, l36)
sch.unroll(loop=l31)
sch.unroll(loop=l32)
sch.unroll(loop=l35)
sch.unroll(loop=l36)
l37 = sch.fuse(l33, l34, preserve_unit_iters=True)
v38 = sch.sample_categorical(candidates=[32, 64, 128, 256, 512, 1024], probs=[0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666], decision=2)
l39, l40 = sch.split(loop=l37, factors=[None, v38], preserve_unit_iters=True)
sch.bind(loop=l39, thread_axis="blockIdx.x")
sch.bind(loop=l40, thread_axis="threadIdx.x")
b41 = sch.cache_write(block=b0, write_buffer_index=0, storage_scope="local")
sch.reverse_compute_at(block=b41, loop=l40, preserve_unit_loops=True, index=-1)
sch.compute_at(block=b28, loop=l40, preserve_unit_loops=True, index=-1)
sch.set_scope(block=b28, buffer_index=0, storage_scope="local")
sch.compute_inline(block=b30)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSSRRSRS")
l42, l43, l44, l45, l46 = sch.get_loops(block=b1)
v47, v48, v49, v50, v51 = sch.sample_perfect_tile(loop=l42, n=5, max_innermost_factor=64, decision=[3, 2, 1, 1, 1])
l52, l53, l54, l55, l56 = sch.split(loop=l42, factors=[v47, v48, v49, v50, v51], preserve_unit_iters=True)
v57, v58, v59, v60, v61 = sch.sample_perfect_tile(loop=l43, n=5, max_innermost_factor=64, decision=[1, 2, 3, 1, 1])
l62, l63, l64, l65, l66 = sch.split(loop=l43, factors=[v57, v58, v59, v60, v61], preserve_unit_iters=True)
v67, v68, v69, v70, v71 = sch.sample_perfect_tile(loop=l44, n=5, max_innermost_factor=64, decision=[2, 8, 2, 1, 2])
l72, l73, l74, l75, l76 = sch.split(loop=l44, factors=[v67, v68, v69, v70, v71], preserve_unit_iters=True)
v77, v78, v79, v80, v81 = sch.sample_perfect_tile(loop=l45, n=5, max_innermost_factor=64, decision=[1, 1, 112, 28, 1])
l82, l83, l84, l85, l86 = sch.split(loop=l45, factors=[v77, v78, v79, v80, v81], preserve_unit_iters=True)
v87, v88, v89 = sch.sample_perfect_tile(loop=l46, n=3, max_innermost_factor=64, decision=[3, 1, 1])
l90, l91, l92 = sch.split(loop=l46, factors=[v87, v88, v89], preserve_unit_iters=True)
sch.reorder(l52, l62, l72, l82, l53, l63, l73, l83, l54, l64, l74, l84, l90, l91, l55, l65, l75, l85, l92, l56, l66, l76, l86)
l93 = sch.fuse(l52, l62, l72, l82, preserve_unit_iters=True)
sch.bind(loop=l93, thread_axis="blockIdx.x")
l94 = sch.fuse(l53, l63, l73, l83, preserve_unit_iters=True)
sch.bind(loop=l94, thread_axis="vthread.x")
l95 = sch.fuse(l54, l64, l74, l84, preserve_unit_iters=True)
sch.bind(loop=l95, thread_axis="threadIdx.x")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_low_inclusive", ann_val=32)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_high_inclusive", ann_val=1024)
b96 = sch.cache_write(block=b1, write_buffer_index=0, storage_scope="local")
sch.reverse_compute_at(block=b96, loop=l95, preserve_unit_loops=True, index=-1)
b97 = sch.cache_read(block=b1, read_buffer_index=0, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b97, loop=l90, preserve_unit_loops=True, index=-1)
l98, l99, l100, l101, l102, l103, l104, l105 = sch.get_loops(block=b97)
l106 = sch.fuse(l102, l103, l104, l105, preserve_unit_iters=True)
v107 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b97, ann_key="meta_schedule.cooperative_fetch", ann_val=v107)
b108 = sch.cache_read(block=b1, read_buffer_index=1, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b108, loop=l90, preserve_unit_loops=True, index=-1)
l109, l110, l111, l112, l113, l114, l115, l116 = sch.get_loops(block=b108)
l117 = sch.fuse(l113, l114, l115, l116, preserve_unit_iters=True)
v118 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b108, ann_key="meta_schedule.cooperative_fetch", ann_val=v118)
l119 = sch.fuse(l90, preserve_unit_iters=True)
sch.annotate(block_or_loop=l119, ann_key="software_pipeline_stage", ann_val=[0, 0, 3])
sch.annotate(block_or_loop=l119, ann_key="software_pipeline_order", ann_val=[0, 1, 2])
sch.annotate(block_or_loop=l119, ann_key="software_pipeline_async_stages", ann_val=[0])
sch.reverse_compute_inline(block=b5)
sch.reverse_compute_inline(block=b4)
v120 = sch.sample_categorical(candidates=[0, 16, 64, 512, 1024], probs=[0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001], decision=4)
sch.annotate(block_or_loop=b6, ann_key="meta_schedule.unroll_explicit", ann_val=v120)
l121, l122, l123, l124, l125, l126 = sch.get_loops(block=b3)
l127 = sch.fuse(l121, l122, l123, l124, preserve_unit_iters=True)
v128 = sch.sample_categorical(candidates=[32, 64, 128, 256, 512, 1024], probs=[0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666], decision=0)
l129, l130 = sch.split(loop=l127, factors=[None, v128], preserve_unit_iters=True)
sch.bind(loop=l129, thread_axis="blockIdx.x")
sch.bind(loop=l130, thread_axis="threadIdx.x")
2024-04-28 19:50:04 [INFO] [evolutionary_search.cc:713] Generating candidates......
2024-04-28 19:50:04 [INFO] [evolutionary_search.cc:715] Picked top 0 candidate(s) from database
2024-04-28 19:50:12 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x76c2cc8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x3ab4108)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x87bd5e8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x77043f8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x485cc78)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x3aa5498)]: 494 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x3aad778)]: 0 failure(s)
2024-04-28 19:50:21 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x76c2cc8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x3ab4108)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x87bd5e8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x77043f8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x485cc78)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x3aa5498)]: 983 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x3aad778)]: 0 failure(s)
2024-04-28 19:50:30 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x76c2cc8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x3ab4108)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x87bd5e8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x77043f8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x485cc78)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x3aa5498)]: 1470 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x3aad778)]: 0 failure(s)
2024-04-28 19:50:30 [INFO] [evolutionary_search.cc:723] Sampled 66 candidate(s)
2024-04-28 19:50:48 [INFO] [evolutionary_search.cc:621] Evolve iter #0 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x76c2cc8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x3ab4108)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x87bd5e8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x77043f8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x485cc78)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x3aa5498)]: 99 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x3aad778)]: 0 failure(s)
2024-04-28 19:51:06 [INFO] [evolutionary_search.cc:621] Evolve iter #1 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x76c2cc8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x3ab4108)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x87bd5e8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x77043f8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x485cc78)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x3aa5498)]: 107 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x3aad778)]: 0 failure(s)
2024-04-28 19:51:24 [INFO] [evolutionary_search.cc:621] Evolve iter #2 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x76c2cc8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x3ab4108)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x87bd5e8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x77043f8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x485cc78)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x3aa5498)]: 96 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x3aad778)]: 0 failure(s)
2024-04-28 19:51:42 [INFO] [evolutionary_search.cc:621] Evolve iter #3 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x76c2cc8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x3ab4108)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x87bd5e8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x77043f8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x485cc78)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x3aa5498)]: 96 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x3aad778)]: 0 failure(s)
2024-04-28 19:51:42 [INFO] [evolutionary_search.cc:649] Scores of the best 64 candidates:
[1 : 16]:	0.9998  0.9996  0.9992  0.9989  0.9984  0.9955  0.9953  0.9947  0.9943  0.9929  0.9925  0.9922  0.9921  0.9907  0.9905  0.9897
[17 : 32]:	0.9886  0.9869  0.9862  0.9851  0.9848  0.9844  0.9835  0.9828  0.9827  0.9825  0.9820  0.9809  0.9802  0.9802  0.9795  0.9784
[33 : 48]:	0.9782  0.9772  0.9766  0.9761  0.9760  0.9757  0.9745  0.9719  0.9713  0.9712  0.9710  0.9709  0.9703  0.9700  0.9698  0.9689
[49 : 64]:	0.9681  0.9678  0.9677  0.9671  0.9659  0.9643  0.9625  0.9617  0.9616  0.9606  0.9598  0.9596  0.9590  0.9587  0.9576  0.9576
2024-04-28 19:51:42 [INFO] [evolutionary_search.cc:727] Got 64 candidate(s) with evolutionary search
2024-04-28 19:51:42 [INFO] [evolutionary_search.cc:730] Sending 64 candidates(s) for measurement
2024-04-28 20:23:56 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu] Trial #1: GFLOPs: 1091.1194. Time: 396.9954 us. Best GFLOPs: 1091.1194
2024-04-28 20:23:56 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu] Trial #2: GFLOPs: 6160.8463. Time: 70.3100 us. Best GFLOPs: 6160.8463
2024-04-28 20:23:56 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu] Trial #3: GFLOPs: 1702.7909. Time: 254.3879 us. Best GFLOPs: 6160.8463
2024-04-28 20:23:56 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu] Trial #4: GFLOPs: 2188.8996. Time: 197.8937 us. Best GFLOPs: 6160.8463
2024-04-28 20:23:56 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu] Trial #5: GFLOPs: 2837.3791. Time: 152.6653 us. Best GFLOPs: 6160.8463
2024-04-28 20:23:56 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu] Trial #6: GFLOPs: 2855.3272. Time: 151.7057 us. Best GFLOPs: 6160.8463
2024-04-28 20:23:56 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu] Trial #7: GFLOPs: 2894.7257. Time: 149.6409 us. Best GFLOPs: 6160.8463
2024-04-28 20:23:56 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu] Trial #8: GFLOPs: 1965.9717. Time: 220.3335 us. Best GFLOPs: 6160.8463
2024-04-28 20:23:56 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu] Trial #9: GFLOPs: 923.7059. Time: 468.9473 us. Best GFLOPs: 6160.8463
2024-04-28 20:23:56 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu] Trial #10: GFLOPs: 1009.9589. Time: 428.8981 us. Best GFLOPs: 6160.8463
2024-04-28 20:23:56 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu] Trial #11: GFLOPs: 1169.7066. Time: 370.3231 us. Best GFLOPs: 6160.8463
2024-04-28 20:23:56 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu] Trial #12: GFLOPs: 2128.5740. Time: 203.5022 us. Best GFLOPs: 6160.8463
2024-04-28 20:23:56 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu] Trial #13: GFLOPs: 1717.5646. Time: 252.1998 us. Best GFLOPs: 6160.8463
2024-04-28 20:23:56 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu] Trial #14: GFLOPs: 2660.3817. Time: 162.8223 us. Best GFLOPs: 6160.8463
2024-04-28 20:23:56 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu] Trial #15: GFLOPs: 6246.2547. Time: 69.3487 us. Best GFLOPs: 6246.2547
2024-04-28 20:23:56 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu] Trial #16: GFLOPs: 1414.3241. Time: 306.2731 us. Best GFLOPs: 6246.2547
2024-04-28 20:23:56 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu] Trial #17: GFLOPs: 6209.2289. Time: 69.7622 us. Best GFLOPs: 6246.2547
2024-04-28 20:23:56 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu] Trial #18: GFLOPs: 1972.8948. Time: 219.5603 us. Best GFLOPs: 6246.2547
2024-04-28 20:23:56 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu] Trial #19: GFLOPs: 1095.2297. Time: 395.5055 us. Best GFLOPs: 6246.2547
2024-04-28 20:23:56 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu] Trial #20: GFLOPs: 5866.6127. Time: 73.8364 us. Best GFLOPs: 6246.2547
2024-04-28 20:23:56 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu] Trial #21: GFLOPs: 497.2906. Time: 871.0589 us. Best GFLOPs: 6246.2547
2024-04-28 20:23:56 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu] Trial #22: GFLOPs: 1973.7346. Time: 219.4669 us. Best GFLOPs: 6246.2547
2024-04-28 20:23:56 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu] Trial #23: GFLOPs: 1367.4605. Time: 316.7692 us. Best GFLOPs: 6246.2547
2024-04-28 20:23:56 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu] Trial #24: GFLOPs: 6949.4962. Time: 62.3311 us. Best GFLOPs: 6949.4962
2024-04-28 20:23:56 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu] Trial #25: GFLOPs: 546.9744. Time: 791.9373 us. Best GFLOPs: 6949.4962
2024-04-28 20:23:56 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu] Trial #26: GFLOPs: 2027.2121. Time: 213.6774 us. Best GFLOPs: 6949.4962
2024-04-28 20:23:56 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu] Trial #27: GFLOPs: 1416.1245. Time: 305.8837 us. Best GFLOPs: 6949.4962
2024-04-28 20:23:56 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu] Trial #28: GFLOPs: 6049.5299. Time: 71.6038 us. Best GFLOPs: 6949.4962
2024-04-28 20:23:56 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu] Trial #29: GFLOPs: 1751.8718. Time: 247.2609 us. Best GFLOPs: 6949.4962
2024-04-28 20:23:56 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu] Trial #30: GFLOPs: 1195.8260. Time: 362.2345 us. Best GFLOPs: 6949.4962
2024-04-28 20:23:56 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu] Trial #31: GFLOPs: 1044.7142. Time: 414.6296 us. Best GFLOPs: 6949.4962
2024-04-28 20:23:56 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu] Trial #32: GFLOPs: 5893.8352. Time: 73.4953 us. Best GFLOPs: 6949.4962
2024-04-28 20:23:56 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu] Trial #33: GFLOPs: 313.6419. Time: 1381.0955 us. Best GFLOPs: 6949.4962
2024-04-28 20:23:56 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu] Trial #34: GFLOPs: 2132.2228. Time: 203.1539 us. Best GFLOPs: 6949.4962
2024-04-28 20:23:56 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu] Trial #35: GFLOPs: 2579.7588. Time: 167.9108 us. Best GFLOPs: 6949.4962
2024-04-28 20:23:56 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu] Trial #36: GFLOPs: 2101.4243. Time: 206.1313 us. Best GFLOPs: 6949.4962
2024-04-28 20:23:56 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu] Trial #37: GFLOPs: 1247.0870. Time: 347.3450 us. Best GFLOPs: 6949.4962
2024-04-28 20:23:56 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu] Trial #38: GFLOPs: 3263.6071. Time: 132.7272 us. Best GFLOPs: 6949.4962
2024-04-28 20:23:56 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu] Trial #39: GFLOPs: 2632.8748. Time: 164.5234 us. Best GFLOPs: 6949.4962
2024-04-28 20:23:56 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu] Trial #40: GFLOPs: 4965.9268. Time: 87.2283 us. Best GFLOPs: 6949.4962
2024-04-28 20:23:56 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu] Trial #41: GFLOPs: 2221.1160. Time: 195.0233 us. Best GFLOPs: 6949.4962
2024-04-28 20:23:56 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu] Trial #42: GFLOPs: 1790.6870. Time: 241.9012 us. Best GFLOPs: 6949.4962
2024-04-28 20:23:56 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu] Trial #43: GFLOPs: 2259.7869. Time: 191.6860 us. Best GFLOPs: 6949.4962
2024-04-28 20:23:56 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu] Trial #44: GFLOPs: 2931.5016. Time: 147.7637 us. Best GFLOPs: 6949.4962
2024-04-28 20:23:56 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu] Trial #45: GFLOPs: 6229.7926. Time: 69.5319 us. Best GFLOPs: 6949.4962
2024-04-28 20:23:56 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu] Trial #46: GFLOPs: 920.5699. Time: 470.5448 us. Best GFLOPs: 6949.4962
2024-04-28 20:23:56 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu] Trial #47: GFLOPs: 2581.0861. Time: 167.8245 us. Best GFLOPs: 6949.4962
2024-04-28 20:23:56 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu] Trial #48: GFLOPs: 436.3851. Time: 992.6311 us. Best GFLOPs: 6949.4962
2024-04-28 20:23:56 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu] Trial #49: GFLOPs: 1025.8578. Time: 422.2509 us. Best GFLOPs: 6949.4962
2024-04-28 20:23:56 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu] Trial #50: GFLOPs: 7164.4923. Time: 60.4606 us. Best GFLOPs: 7164.4923
2024-04-28 20:23:56 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu] Trial #51: GFLOPs: 2014.5845. Time: 215.0168 us. Best GFLOPs: 7164.4923
2024-04-28 20:23:56 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu] Trial #52: GFLOPs: 1456.4041. Time: 297.4239 us. Best GFLOPs: 7164.4923
2024-04-28 20:23:56 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu] Trial #53: GFLOPs: 1108.3673. Time: 390.8175 us. Best GFLOPs: 7164.4923
2024-04-28 20:23:56 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu] Trial #54: GFLOPs: 1102.0457. Time: 393.0594 us. Best GFLOPs: 7164.4923
2024-04-28 20:23:56 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu] Trial #55: GFLOPs: 1007.9064. Time: 429.7714 us. Best GFLOPs: 7164.4923
2024-04-28 20:23:56 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu] Trial #56: GFLOPs: 2528.0114. Time: 171.3479 us. Best GFLOPs: 7164.4923
2024-04-28 20:23:56 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu] Trial #57: GFLOPs: 1420.6106. Time: 304.9178 us. Best GFLOPs: 7164.4923
2024-04-28 20:23:56 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu] Trial #58: GFLOPs: 1107.7967. Time: 391.0189 us. Best GFLOPs: 7164.4923
2024-04-28 20:23:56 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu] Trial #59: GFLOPs: 4659.3603. Time: 92.9676 us. Best GFLOPs: 7164.4923
2024-04-28 20:23:56 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu] Trial #60: GFLOPs: 2626.8473. Time: 164.9009 us. Best GFLOPs: 7164.4923
2024-04-28 20:23:56 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu] Trial #61: GFLOPs: 1253.4436. Time: 345.5835 us. Best GFLOPs: 7164.4923
2024-04-28 20:23:56 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu] Trial #62: GFLOPs: 5686.6072. Time: 76.1736 us. Best GFLOPs: 7164.4923
2024-04-28 20:23:56 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu] Trial #63: GFLOPs: 7107.3692. Time: 60.9465 us. Best GFLOPs: 7164.4923
2024-04-28 20:23:56 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu] Trial #64: GFLOPs: 1113.9853. Time: 388.8466 us. Best GFLOPs: 7164.4923
2024-04-28 21:08:58 [INFO] [evolutionary_search.cc:713] Generating candidates......
2024-04-28 21:09:01 [INFO] [evolutionary_search.cc:715] Picked top 64 candidate(s) from database
2024-04-28 21:09:08 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x76c2cc8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x3ab4108)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x87bd5e8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x77043f8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x485cc78)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x3aa5498)]: 432 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x3aad778)]: 0 failure(s)
2024-04-28 21:09:15 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x76c2cc8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x3ab4108)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x87bd5e8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x77043f8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x485cc78)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x3aa5498)]: 855 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x3aad778)]: 0 failure(s)
2024-04-28 21:09:23 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x76c2cc8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x3ab4108)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x87bd5e8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x77043f8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x485cc78)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x3aa5498)]: 1285 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x3aad778)]: 0 failure(s)
2024-04-28 21:09:23 [INFO] [evolutionary_search.cc:723] Sampled 59 candidate(s)
2024-04-28 21:09:43 [INFO] [evolutionary_search.cc:621] Evolve iter #0 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x76c2cc8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x3ab4108)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x87bd5e8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x77043f8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x485cc78)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x3aa5498)]: 94 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x3aad778)]: 0 failure(s)
2024-04-28 21:10:06 [INFO] [evolutionary_search.cc:621] Evolve iter #1 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x76c2cc8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x3ab4108)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x87bd5e8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x77043f8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x485cc78)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x3aa5498)]: 75 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x3aad778)]: 0 failure(s)
2024-04-28 21:10:30 [INFO] [evolutionary_search.cc:621] Evolve iter #2 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x76c2cc8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x3ab4108)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x87bd5e8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x77043f8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x485cc78)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x3aa5498)]: 88 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x3aad778)]: 0 failure(s)
2024-04-28 21:10:53 [INFO] [evolutionary_search.cc:621] Evolve iter #3 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x76c2cc8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x3ab4108)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x87bd5e8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x77043f8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x485cc78)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x3aa5498)]: 78 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x3aad778)]: 0 failure(s)
2024-04-28 21:10:59 [INFO] [evolutionary_search.cc:649] Scores of the best 64 candidates:
[1 : 16]:	1.3978  1.3740  1.2676  1.2589  1.2172  1.2172  1.2050  1.1846  1.1829  1.1829  1.1564  1.1564  1.1563  1.1546  1.1546  1.1546
[17 : 32]:	1.1546  1.1546  1.1546  1.1541  1.1541  1.1541  1.1541  1.1462  1.1439  1.1418  1.1405  1.1329  1.1324  1.1324  1.1324  1.1324
[33 : 48]:	1.1042  1.0986  1.0900  1.0726  1.0726  1.0726  1.0648  1.0612  1.0612  1.0487  1.0195  1.0166  1.0115  1.0112  1.0092  1.0077
[49 : 64]:	1.0066  0.9997  0.9986  0.9977  0.9954  0.9879  0.9871  0.9862  0.9843  0.9843  0.9822  0.9817  0.9812  0.9809  0.9807  0.9801
2024-04-28 21:10:59 [INFO] [evolutionary_search.cc:727] Got 64 candidate(s) with evolutionary search
2024-04-28 21:10:59 [INFO] [evolutionary_search.cc:730] Sending 64 candidates(s) for measurement
2024-04-28 21:12:17 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu] Trial #65: GFLOPs: 4434.0298. Time: 97.6920 us. Best GFLOPs: 7164.4923
2024-04-28 21:12:17 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu] Trial #66: GFLOPs: 4174.7750. Time: 103.7587 us. Best GFLOPs: 7164.4923
2024-04-28 21:12:17 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu] Trial #67: GFLOPs: 3086.1502. Time: 140.3591 us. Best GFLOPs: 7164.4923
2024-04-28 21:12:17 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu] Trial #68: GFLOPs: 4230.8954. Time: 102.3824 us. Best GFLOPs: 7164.4923
2024-04-28 21:12:17 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu] Trial #69: GFLOPs: 3101.1743. Time: 139.6792 us. Best GFLOPs: 7164.4923
2024-04-28 21:12:17 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu] Trial #70: GFLOPs: 3095.4036. Time: 139.9396 us. Best GFLOPs: 7164.4923
2024-04-28 21:12:17 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu] Trial #71: GFLOPs: 2643.9411. Time: 163.8347 us. Best GFLOPs: 7164.4923
2024-04-28 21:12:17 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu] Trial #72: GFLOPs: 3661.1622. Time: 118.3147 us. Best GFLOPs: 7164.4923
2024-04-28 21:12:17 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu] Trial #73: GFLOPs: 2711.0101. Time: 159.7816 us. Best GFLOPs: 7164.4923
2024-04-28 21:12:17 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu] Trial #74: GFLOPs: 3840.3291. Time: 112.7949 us. Best GFLOPs: 7164.4923
2024-04-28 21:12:17 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu] Trial #75: GFLOPs: 2921.7042. Time: 148.2592 us. Best GFLOPs: 7164.4923
2024-04-28 21:12:17 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu] Trial #76: GFLOPs: 2904.0811. Time: 149.1589 us. Best GFLOPs: 7164.4923
2024-04-28 21:12:17 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu] Trial #77: GFLOPs: 3101.4764. Time: 139.6655 us. Best GFLOPs: 7164.4923
2024-04-28 21:12:17 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu] Trial #78: GFLOPs: 5399.6863. Time: 80.2212 us. Best GFLOPs: 7164.4923
2024-04-28 21:12:17 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu] Trial #79: GFLOPs: 2914.8320. Time: 148.6087 us. Best GFLOPs: 7164.4923
2024-04-28 21:12:17 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu] Trial #80: GFLOPs: 5278.3447. Time: 82.0654 us. Best GFLOPs: 7164.4923
2024-04-28 21:12:17 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu] Trial #81: GFLOPs: 2926.9621. Time: 147.9928 us. Best GFLOPs: 7164.4923
2024-04-28 21:12:17 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu] Trial #82: GFLOPs: 5402.1279. Time: 80.1850 us. Best GFLOPs: 7164.4923
2024-04-28 21:12:17 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu] Trial #83: GFLOPs: 5279.7930. Time: 82.0429 us. Best GFLOPs: 7164.4923
2024-04-28 21:12:17 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu] Trial #84: GFLOPs: 1913.5653. Time: 226.3677 us. Best GFLOPs: 7164.4923
2024-04-28 21:12:17 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu] Trial #85: GFLOPs: 1940.0530. Time: 223.2771 us. Best GFLOPs: 7164.4923
2024-04-28 21:12:17 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu] Trial #86: GFLOPs: 1938.8234. Time: 223.4187 us. Best GFLOPs: 7164.4923
2024-04-28 21:12:17 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu] Trial #87: GFLOPs: 1938.9461. Time: 223.4046 us. Best GFLOPs: 7164.4923
2024-04-28 21:12:17 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu] Trial #88: GFLOPs: 2875.0370. Time: 150.6657 us. Best GFLOPs: 7164.4923
2024-04-28 21:12:17 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu] Trial #89: GFLOPs: 1896.2447. Time: 228.4354 us. Best GFLOPs: 7164.4923
2024-04-28 21:12:17 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu] Trial #90: GFLOPs: 1986.9603. Time: 218.0061 us. Best GFLOPs: 7164.4923
2024-04-28 21:12:17 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu] Trial #91: GFLOPs: 2900.6418. Time: 149.3357 us. Best GFLOPs: 7164.4923
2024-04-28 21:12:17 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu] Trial #92: GFLOPs: 1603.2993. Time: 270.1738 us. Best GFLOPs: 7164.4923
2024-04-28 21:12:17 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu] Trial #93: GFLOPs: 3653.1789. Time: 118.5733 us. Best GFLOPs: 7164.4923
2024-04-28 21:12:17 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu] Trial #94: GFLOPs: 3924.2369. Time: 110.3831 us. Best GFLOPs: 7164.4923
2024-04-28 21:12:17 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu] Trial #95: GFLOPs: 3766.3967. Time: 115.0090 us. Best GFLOPs: 7164.4923
2024-04-28 21:12:17 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu] Trial #96: GFLOPs: 2660.4168. Time: 162.8201 us. Best GFLOPs: 7164.4923
2024-04-28 21:12:17 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu] Trial #97: GFLOPs: 2922.1542. Time: 148.2363 us. Best GFLOPs: 7164.4923
2024-04-28 21:12:17 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu] Trial #98: GFLOPs: 3846.7705. Time: 112.6060 us. Best GFLOPs: 7164.4923
2024-04-28 21:12:17 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu] Trial #99: GFLOPs: 2912.3701. Time: 148.7343 us. Best GFLOPs: 7164.4923
2024-04-28 21:12:17 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu] Trial #100: GFLOPs: 2862.8759. Time: 151.3057 us. Best GFLOPs: 7164.4923
2024-04-28 21:12:17 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu] Trial #101: GFLOPs: 5261.5133. Time: 82.3279 us. Best GFLOPs: 7164.4923
2024-04-28 21:12:17 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu] Trial #102: GFLOPs: 2866.1248. Time: 151.1342 us. Best GFLOPs: 7164.4923
2024-04-28 21:12:17 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu] Trial #103: GFLOPs: 5265.6820. Time: 82.2627 us. Best GFLOPs: 7164.4923
2024-04-28 21:12:17 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu] Trial #104: GFLOPs: 5166.4030. Time: 83.8435 us. Best GFLOPs: 7164.4923
2024-04-28 21:12:17 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu] Trial #105: GFLOPs: 3433.1027. Time: 126.1743 us. Best GFLOPs: 7164.4923
2024-04-28 21:12:17 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu] Trial #106: GFLOPs: 3015.3348. Time: 143.6555 us. Best GFLOPs: 7164.4923
2024-04-28 21:12:17 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu] Trial #107: GFLOPs: 2949.4621. Time: 146.8639 us. Best GFLOPs: 7164.4923
2024-04-28 21:12:17 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu] Trial #108: GFLOPs: 5715.9755. Time: 75.7822 us. Best GFLOPs: 7164.4923
2024-04-28 21:12:17 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu] Trial #109: GFLOPs: 7080.0935. Time: 61.1813 us. Best GFLOPs: 7164.4923
2024-04-28 21:12:17 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu] Trial #110: GFLOPs: 6967.6767. Time: 62.1684 us. Best GFLOPs: 7164.4923
2024-04-28 21:12:17 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu] Trial #111: GFLOPs: 6940.9535. Time: 62.4078 us. Best GFLOPs: 7164.4923
2024-04-28 21:12:17 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu] Trial #112: GFLOPs: 7212.3418. Time: 60.0595 us. Best GFLOPs: 7212.3418
2024-04-28 21:12:17 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu] Trial #113: GFLOPs: 6948.8408. Time: 62.3369 us. Best GFLOPs: 7212.3418
2024-04-28 21:12:17 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu] Trial #114: GFLOPs: 7196.6848. Time: 60.1901 us. Best GFLOPs: 7212.3418
2024-04-28 21:12:17 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu] Trial #115: GFLOPs: 6966.7567. Time: 62.1766 us. Best GFLOPs: 7212.3418
2024-04-28 21:12:17 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu] Trial #116: GFLOPs: 7123.0831. Time: 60.8121 us. Best GFLOPs: 7212.3418
2024-04-28 21:12:17 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu] Trial #117: GFLOPs: 7097.0725. Time: 61.0349 us. Best GFLOPs: 7212.3418
2024-04-28 21:12:17 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu] Trial #118: GFLOPs: 7171.8960. Time: 60.3982 us. Best GFLOPs: 7212.3418
2024-04-28 21:12:17 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu] Trial #119: GFLOPs: 7153.3159. Time: 60.5551 us. Best GFLOPs: 7212.3418
2024-04-28 21:12:17 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu] Trial #120: GFLOPs: 6727.4061. Time: 64.3888 us. Best GFLOPs: 7212.3418
2024-04-28 21:12:17 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu] Trial #121: GFLOPs: 7263.6588. Time: 59.6352 us. Best GFLOPs: 7263.6588
2024-04-28 21:12:17 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu] Trial #122: GFLOPs: 764.4218. Time: 566.6628 us. Best GFLOPs: 7263.6588
2024-04-28 21:12:17 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu] Trial #123: GFLOPs: 6928.8065. Time: 62.5172 us. Best GFLOPs: 7263.6588
2024-04-28 21:12:17 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu] Trial #124: GFLOPs: 7205.3769. Time: 60.1175 us. Best GFLOPs: 7263.6588
2024-04-28 21:12:17 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu] Trial #125: GFLOPs: 7286.6071. Time: 59.4473 us. Best GFLOPs: 7286.6071
2024-04-28 21:12:17 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu] Trial #126: GFLOPs: 1547.7437. Time: 279.8715 us. Best GFLOPs: 7286.6071
2024-04-28 21:12:17 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu] Trial #127: GFLOPs: 827.3209. Time: 523.5809 us. Best GFLOPs: 7286.6071
2024-04-28 21:12:17 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu] Trial #128: GFLOPs: 2045.4792. Time: 211.7692 us. Best GFLOPs: 7286.6071
2024-04-28 21:52:43 [INFO] [evolutionary_search.cc:713] Generating candidates......
2024-04-28 21:52:47 [INFO] [evolutionary_search.cc:715] Picked top 102 candidate(s) from database
2024-04-28 21:52:54 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x76c2cc8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x3ab4108)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x87bd5e8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x77043f8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x485cc78)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x3aa5498)]: 393 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x3aad778)]: 0 failure(s)
2024-04-28 21:53:00 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x76c2cc8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x3ab4108)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x87bd5e8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x77043f8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x485cc78)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x3aa5498)]: 781 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x3aad778)]: 0 failure(s)
2024-04-28 21:53:07 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x76c2cc8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x3ab4108)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x87bd5e8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x77043f8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x485cc78)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x3aa5498)]: 1173 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x3aad778)]: 0 failure(s)
2024-04-28 21:53:07 [INFO] [evolutionary_search.cc:723] Sampled 57 candidate(s)
2024-04-28 21:53:26 [INFO] [evolutionary_search.cc:621] Evolve iter #0 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x76c2cc8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x3ab4108)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x87bd5e8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x77043f8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x485cc78)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x3aa5498)]: 88 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x3aad778)]: 0 failure(s)
2024-04-28 21:53:49 [INFO] [evolutionary_search.cc:621] Evolve iter #1 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x76c2cc8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x3ab4108)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x87bd5e8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x77043f8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x485cc78)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x3aa5498)]: 83 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x3aad778)]: 0 failure(s)
2024-04-28 21:54:11 [INFO] [evolutionary_search.cc:621] Evolve iter #2 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x76c2cc8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x3ab4108)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x87bd5e8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x77043f8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x485cc78)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x3aa5498)]: 63 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x3aad778)]: 0 failure(s)
2024-04-28 21:54:33 [INFO] [evolutionary_search.cc:621] Evolve iter #3 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x76c2cc8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x3ab4108)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x87bd5e8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x77043f8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x485cc78)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x3aa5498)]: 71 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x3aad778)]: 0 failure(s)
2024-04-28 21:54:39 [INFO] [evolutionary_search.cc:649] Scores of the best 64 candidates:
[1 : 16]:	2.3029  1.2593  1.1909  1.1909  1.1635  1.1226  1.0948  1.0942  1.0750  1.0629  1.0573  1.0573  1.0476  1.0469  1.0453  1.0397
[17 : 32]:	1.0392  1.0378  1.0367  1.0367  1.0355  1.0349  1.0337  1.0337  1.0307  1.0301  1.0292  1.0276  1.0268  1.0248  1.0237  1.0144
[33 : 48]:	1.0142  1.0134  1.0066  1.0061  1.0057  1.0042  1.0033  1.0023  0.9999  0.9994  0.9993  0.9989  0.9986  0.9967  0.9961  0.9960
[49 : 64]:	0.9950  0.9950  0.9918  0.9913  0.9913  0.9895  0.9886  0.9865  0.9852  0.9850  0.9848  0.9839  0.9835  0.9825  0.9825  0.9823
2024-04-28 21:54:39 [INFO] [evolutionary_search.cc:727] Got 64 candidate(s) with evolutionary search
2024-04-28 21:54:39 [INFO] [evolutionary_search.cc:730] Sending 64 candidates(s) for measurement
2024-04-28 21:55:53 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu] Trial #129: GFLOPs: 5157.4102. Time: 83.9897 us. Best GFLOPs: 7286.6071
2024-04-28 21:55:53 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu] Trial #130: GFLOPs: 510.7637. Time: 848.0818 us. Best GFLOPs: 7286.6071
2024-04-28 21:55:53 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu] Trial #131: GFLOPs: 5900.7750. Time: 73.4089 us. Best GFLOPs: 7286.6071
2024-04-28 21:55:53 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu] Trial #132: GFLOPs: 5906.3301. Time: 73.3399 us. Best GFLOPs: 7286.6071
2024-04-28 21:55:53 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu] Trial #133: GFLOPs: 559.2191. Time: 774.5969 us. Best GFLOPs: 7286.6071
2024-04-28 21:55:53 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu] Trial #134: GFLOPs: 5913.9560. Time: 73.2453 us. Best GFLOPs: 7286.6071
2024-04-28 21:55:53 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu] Trial #135: GFLOPs: 6147.3248. Time: 70.4647 us. Best GFLOPs: 7286.6071
2024-04-28 21:55:53 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu] Trial #136: GFLOPs: 4786.1479. Time: 90.5048 us. Best GFLOPs: 7286.6071
2024-04-28 21:55:53 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu] Trial #137: GFLOPs: 7335.1370. Time: 59.0540 us. Best GFLOPs: 7335.1370
2024-04-28 21:55:53 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu] Trial #138: GFLOPs: 5735.0030. Time: 75.5308 us. Best GFLOPs: 7335.1370
2024-04-28 21:55:53 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu] Trial #139: GFLOPs: 6221.4744. Time: 69.6249 us. Best GFLOPs: 7335.1370
2024-04-28 21:55:53 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu] Trial #140: GFLOPs: 7425.1375. Time: 58.3382 us. Best GFLOPs: 7425.1375
2024-04-28 21:55:53 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu] Trial #141: GFLOPs: 7147.9192. Time: 60.6008 us. Best GFLOPs: 7425.1375
2024-04-28 21:55:53 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu] Trial #142: GFLOPs: 7194.7484. Time: 60.2063 us. Best GFLOPs: 7425.1375
2024-04-28 21:55:53 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu] Trial #143: GFLOPs: 7179.7649. Time: 60.3320 us. Best GFLOPs: 7425.1375
2024-04-28 21:55:53 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu] Trial #144: GFLOPs: 4680.3285. Time: 92.5511 us. Best GFLOPs: 7425.1375
2024-04-28 21:55:53 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu] Trial #145: GFLOPs: 7202.8076. Time: 60.1390 us. Best GFLOPs: 7425.1375
2024-04-28 21:55:53 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu] Trial #146: GFLOPs: 4525.7289. Time: 95.7126 us. Best GFLOPs: 7425.1375
2024-04-28 21:55:53 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu] Trial #147: GFLOPs: 7210.6062. Time: 60.0739 us. Best GFLOPs: 7425.1375
2024-04-28 21:55:53 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu] Trial #148: GFLOPs: 3699.4339. Time: 117.0907 us. Best GFLOPs: 7425.1375
2024-04-28 21:55:53 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu] Trial #149: GFLOPs: 5293.1731. Time: 81.8355 us. Best GFLOPs: 7425.1375
2024-04-28 21:55:53 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu] Trial #150: GFLOPs: 7250.4198. Time: 59.7440 us. Best GFLOPs: 7425.1375
2024-04-28 21:55:53 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu] Trial #151: GFLOPs: 7265.7120. Time: 59.6183 us. Best GFLOPs: 7425.1375
2024-04-28 21:55:53 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu] Trial #152: GFLOPs: 7266.4492. Time: 59.6123 us. Best GFLOPs: 7425.1375
2024-04-28 21:55:53 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu] Trial #153: GFLOPs: 5380.4450. Time: 80.5081 us. Best GFLOPs: 7425.1375
2024-04-28 21:55:53 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu] Trial #154: GFLOPs: 5229.1004. Time: 82.8382 us. Best GFLOPs: 7425.1375
2024-04-28 21:55:53 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu] Trial #155: GFLOPs: 2619.0115. Time: 165.3942 us. Best GFLOPs: 7425.1375
2024-04-28 21:55:53 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu] Trial #156: GFLOPs: 4721.0413. Time: 91.7529 us. Best GFLOPs: 7425.1375
2024-04-28 21:55:53 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu] Trial #157: GFLOPs: 3710.3658. Time: 116.7457 us. Best GFLOPs: 7425.1375
2024-04-28 21:55:53 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu] Trial #158: GFLOPs: 7222.7762. Time: 59.9727 us. Best GFLOPs: 7425.1375
2024-04-28 21:55:53 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu] Trial #159: GFLOPs: 2320.6304. Time: 186.6602 us. Best GFLOPs: 7425.1375
2024-04-28 21:55:53 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu] Trial #160: GFLOPs: 6055.4751. Time: 71.5335 us. Best GFLOPs: 7425.1375
2024-04-28 21:55:53 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu] Trial #161: GFLOPs: 5351.9708. Time: 80.9364 us. Best GFLOPs: 7425.1375
2024-04-28 21:55:53 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu] Trial #162: GFLOPs: 7009.5918. Time: 61.7967 us. Best GFLOPs: 7425.1375
2024-04-28 21:55:53 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu] Trial #163: GFLOPs: 5868.9456. Time: 73.8070 us. Best GFLOPs: 7425.1375
2024-04-28 21:55:53 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu] Trial #164: GFLOPs: 7271.7251. Time: 59.5690 us. Best GFLOPs: 7425.1375
2024-04-28 21:55:53 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu] Trial #165: GFLOPs: 7275.5703. Time: 59.5375 us. Best GFLOPs: 7425.1375
2024-04-28 21:55:53 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu] Trial #166: GFLOPs: 6053.1128. Time: 71.5614 us. Best GFLOPs: 7425.1375
2024-04-28 21:55:53 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu] Trial #167: GFLOPs: 7264.1901. Time: 59.6308 us. Best GFLOPs: 7425.1375
2024-04-28 21:55:53 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu] Trial #168: GFLOPs: 7254.0764. Time: 59.7139 us. Best GFLOPs: 7425.1375
2024-04-28 21:55:53 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu] Trial #169: GFLOPs: 5169.1796. Time: 83.7985 us. Best GFLOPs: 7425.1375
2024-04-28 21:55:53 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu] Trial #170: GFLOPs: 7030.5263. Time: 61.6127 us. Best GFLOPs: 7425.1375
2024-04-28 21:55:53 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu] Trial #171: GFLOPs: 5162.5830. Time: 83.9056 us. Best GFLOPs: 7425.1375
2024-04-28 21:55:53 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu] Trial #172: GFLOPs: 4350.4220. Time: 99.5695 us. Best GFLOPs: 7425.1375
2024-04-28 21:55:53 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu] Trial #173: GFLOPs: 7202.0157. Time: 60.1456 us. Best GFLOPs: 7425.1375
2024-04-28 21:55:53 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu] Trial #174: GFLOPs: 7403.0962. Time: 58.5119 us. Best GFLOPs: 7425.1375
2024-04-28 21:55:53 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu] Trial #175: GFLOPs: 7038.3223. Time: 61.5444 us. Best GFLOPs: 7425.1375
2024-04-28 21:55:53 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu] Trial #176: GFLOPs: 2314.2344. Time: 187.1761 us. Best GFLOPs: 7425.1375
2024-04-28 21:55:53 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu] Trial #177: GFLOPs: 6734.2756. Time: 64.3231 us. Best GFLOPs: 7425.1375
2024-04-28 21:55:53 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu] Trial #178: GFLOPs: 6720.9979. Time: 64.4502 us. Best GFLOPs: 7425.1375
2024-04-28 21:55:53 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu] Trial #179: GFLOPs: 7297.6408. Time: 59.3575 us. Best GFLOPs: 7425.1375
2024-04-28 21:55:53 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu] Trial #180: GFLOPs: 7012.8273. Time: 61.7682 us. Best GFLOPs: 7425.1375
2024-04-28 21:55:53 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu] Trial #181: GFLOPs: 6962.3510. Time: 62.2160 us. Best GFLOPs: 7425.1375
2024-04-28 21:55:53 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu] Trial #182: GFLOPs: 7278.2854. Time: 59.5153 us. Best GFLOPs: 7425.1375
2024-04-28 21:55:53 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu] Trial #183: GFLOPs: 6987.8488. Time: 61.9889 us. Best GFLOPs: 7425.1375
2024-04-28 21:55:53 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu] Trial #184: GFLOPs: 7145.9875. Time: 60.6172 us. Best GFLOPs: 7425.1375
2024-04-28 21:55:53 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu] Trial #185: GFLOPs: 7184.9687. Time: 60.2883 us. Best GFLOPs: 7425.1375
2024-04-28 21:55:53 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu] Trial #186: GFLOPs: 4638.9111. Time: 93.3774 us. Best GFLOPs: 7425.1375
2024-04-28 21:55:53 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu] Trial #187: GFLOPs: 7208.6188. Time: 60.0905 us. Best GFLOPs: 7425.1375
2024-04-28 21:55:53 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu] Trial #188: GFLOPs: 7017.0601. Time: 61.7309 us. Best GFLOPs: 7425.1375
2024-04-28 21:55:53 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu] Trial #189: GFLOPs: 7294.7359. Time: 59.3811 us. Best GFLOPs: 7425.1375
2024-04-28 21:55:53 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu] Trial #190: GFLOPs: 935.3730. Time: 463.0980 us. Best GFLOPs: 7425.1375
2024-04-28 21:55:53 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu] Trial #191: GFLOPs: 579.8666. Time: 747.0156 us. Best GFLOPs: 7425.1375
2024-04-28 21:55:53 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu] Trial #192: GFLOPs: 3189.9096. Time: 135.7936 us. Best GFLOPs: 7425.1375
2024-04-28 22:45:44 [INFO] [evolutionary_search.cc:713] Generating candidates......
2024-04-28 22:45:47 [INFO] [evolutionary_search.cc:715] Picked top 102 candidate(s) from database
2024-04-28 22:45:54 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x76c2cc8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x3ab4108)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x87bd5e8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x77043f8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x485cc78)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x3aa5498)]: 390 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x3aad778)]: 0 failure(s)
2024-04-28 22:46:01 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x76c2cc8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x3ab4108)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x87bd5e8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x77043f8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x485cc78)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x3aa5498)]: 787 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x3aad778)]: 0 failure(s)
2024-04-28 22:46:08 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x76c2cc8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x3ab4108)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x87bd5e8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x77043f8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x485cc78)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x3aa5498)]: 1175 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x3aad778)]: 0 failure(s)
2024-04-28 22:46:08 [INFO] [evolutionary_search.cc:723] Sampled 55 candidate(s)
2024-04-28 22:46:28 [INFO] [evolutionary_search.cc:621] Evolve iter #0 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x76c2cc8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x3ab4108)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x87bd5e8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x77043f8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x485cc78)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x3aa5498)]: 83 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x3aad778)]: 0 failure(s)
2024-04-28 22:46:50 [INFO] [evolutionary_search.cc:621] Evolve iter #1 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x76c2cc8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x3ab4108)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x87bd5e8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x77043f8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x485cc78)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x3aa5498)]: 61 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x3aad778)]: 0 failure(s)
2024-04-28 22:47:12 [INFO] [evolutionary_search.cc:621] Evolve iter #2 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x76c2cc8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x3ab4108)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x87bd5e8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x77043f8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x485cc78)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x3aa5498)]: 50 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x3aad778)]: 0 failure(s)
2024-04-28 22:47:34 [INFO] [evolutionary_search.cc:621] Evolve iter #3 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x76c2cc8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x3ab4108)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x87bd5e8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x77043f8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x485cc78)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x3aa5498)]: 40 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x3aad778)]: 0 failure(s)
2024-04-28 22:47:39 [INFO] [evolutionary_search.cc:649] Scores of the best 64 candidates:
[1 : 16]:	1.4966  1.4934  1.0812  1.0390  1.0183  1.0183  1.0177  1.0172  1.0164  1.0139  1.0136  1.0122  1.0115  1.0107  1.0103  1.0102
[17 : 32]:	1.0090  1.0085  1.0084  1.0071  1.0038  1.0033  1.0033  1.0013  0.9998  0.9994  0.9990  0.9989  0.9988  0.9988  0.9988  0.9985
[33 : 48]:	0.9981  0.9978  0.9977  0.9972  0.9966  0.9954  0.9943  0.9942  0.9938  0.9933  0.9928  0.9928  0.9927  0.9923  0.9921  0.9919
[49 : 64]:	0.9917  0.9917  0.9914  0.9913  0.9912  0.9912  0.9907  0.9902  0.9899  0.9897  0.9896  0.9893  0.9886  0.9877  0.9871  0.9866
2024-04-28 22:47:40 [INFO] [evolutionary_search.cc:727] Got 64 candidate(s) with evolutionary search
2024-04-28 22:47:40 [INFO] [evolutionary_search.cc:730] Sending 64 candidates(s) for measurement
2024-04-28 22:48:56 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu] Trial #193: GFLOPs: 2752.4876. Time: 157.3738 us. Best GFLOPs: 7425.1375
2024-04-28 22:48:56 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu] Trial #194: GFLOPs: 2831.6795. Time: 152.9726 us. Best GFLOPs: 7425.1375
2024-04-28 22:48:56 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu] Trial #195: GFLOPs: 6604.5407. Time: 65.5866 us. Best GFLOPs: 7425.1375
2024-04-28 22:48:56 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu] Trial #196: GFLOPs: 6558.9737. Time: 66.0423 us. Best GFLOPs: 7425.1375
2024-04-28 22:48:56 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu] Trial #197: GFLOPs: 6853.6694. Time: 63.2026 us. Best GFLOPs: 7425.1375
2024-04-28 22:48:56 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu] Trial #198: GFLOPs: 6764.9386. Time: 64.0315 us. Best GFLOPs: 7425.1375
2024-04-28 22:48:56 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu] Trial #199: GFLOPs: 7109.7424. Time: 60.9262 us. Best GFLOPs: 7425.1375
2024-04-28 22:48:56 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu] Trial #200: GFLOPs: 7268.5611. Time: 59.5949 us. Best GFLOPs: 7425.1375
2024-04-28 22:48:56 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu] Trial #201: GFLOPs: 7237.3397. Time: 59.8520 us. Best GFLOPs: 7425.1375
2024-04-28 22:48:56 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu] Trial #202: GFLOPs: 7169.4211. Time: 60.4190 us. Best GFLOPs: 7425.1375
2024-04-28 22:48:56 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu] Trial #203: GFLOPs: 7294.6294. Time: 59.3820 us. Best GFLOPs: 7425.1375
2024-04-28 22:48:56 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu] Trial #204: GFLOPs: 7233.4010. Time: 59.8846 us. Best GFLOPs: 7425.1375
2024-04-28 22:48:56 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu] Trial #205: GFLOPs: 7303.1998. Time: 59.3123 us. Best GFLOPs: 7425.1375
2024-04-28 22:48:56 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu] Trial #206: GFLOPs: 7181.4867. Time: 60.3175 us. Best GFLOPs: 7425.1375
2024-04-28 22:48:56 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu] Trial #207: GFLOPs: 7331.9632. Time: 59.0796 us. Best GFLOPs: 7425.1375
2024-04-28 22:48:56 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu] Trial #208: GFLOPs: 7305.6746. Time: 59.2922 us. Best GFLOPs: 7425.1375
2024-04-28 22:48:56 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu] Trial #209: GFLOPs: 7310.6522. Time: 59.2518 us. Best GFLOPs: 7425.1375
2024-04-28 22:48:56 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu] Trial #210: GFLOPs: 7238.6221. Time: 59.8414 us. Best GFLOPs: 7425.1375
2024-04-28 22:48:56 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu] Trial #211: GFLOPs: 7306.4344. Time: 59.2860 us. Best GFLOPs: 7425.1375
2024-04-28 22:48:56 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu] Trial #212: GFLOPs: 7316.8298. Time: 59.2018 us. Best GFLOPs: 7425.1375
2024-04-28 22:48:56 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu] Trial #213: GFLOPs: 7038.9852. Time: 61.5386 us. Best GFLOPs: 7425.1375
2024-04-28 22:48:56 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu] Trial #214: GFLOPs: 7222.0179. Time: 59.9790 us. Best GFLOPs: 7425.1375
2024-04-28 22:48:56 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu] Trial #215: GFLOPs: 7232.0237. Time: 59.8960 us. Best GFLOPs: 7425.1375
2024-04-28 22:48:56 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu] Trial #216: GFLOPs: 7303.1481. Time: 59.3127 us. Best GFLOPs: 7425.1375
2024-04-28 22:48:56 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu] Trial #217: GFLOPs: 7195.1747. Time: 60.2028 us. Best GFLOPs: 7425.1375
2024-04-28 22:48:56 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu] Trial #218: GFLOPs: 7279.4915. Time: 59.5054 us. Best GFLOPs: 7425.1375
2024-04-28 22:48:56 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu] Trial #219: GFLOPs: 6657.2921. Time: 65.0669 us. Best GFLOPs: 7425.1375
2024-04-28 22:48:56 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu] Trial #220: GFLOPs: 7170.8888. Time: 60.4067 us. Best GFLOPs: 7425.1375
2024-04-28 22:48:56 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu] Trial #221: GFLOPs: 7302.5132. Time: 59.3179 us. Best GFLOPs: 7425.1375
2024-04-28 22:48:56 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu] Trial #222: GFLOPs: 6859.2224. Time: 63.1514 us. Best GFLOPs: 7425.1375
2024-04-28 22:48:56 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu] Trial #223: GFLOPs: 6967.1906. Time: 62.1728 us. Best GFLOPs: 7425.1375
2024-04-28 22:48:56 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu] Trial #224: GFLOPs: 7240.7792. Time: 59.8236 us. Best GFLOPs: 7425.1375
2024-04-28 22:48:56 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu] Trial #225: GFLOPs: 6816.0834. Time: 63.5511 us. Best GFLOPs: 7425.1375
2024-04-28 22:48:56 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu] Trial #226: GFLOPs: 7198.1454. Time: 60.1779 us. Best GFLOPs: 7425.1375
2024-04-28 22:48:56 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu] Trial #227: GFLOPs: 7299.4887. Time: 59.3424 us. Best GFLOPs: 7425.1375
2024-04-28 22:48:56 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu] Trial #228: GFLOPs: 7197.1456. Time: 60.1863 us. Best GFLOPs: 7425.1375
2024-04-28 22:48:56 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu] Trial #229: GFLOPs: 7306.4841. Time: 59.2856 us. Best GFLOPs: 7425.1375
2024-04-28 22:48:56 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu] Trial #230: GFLOPs: 7282.0357. Time: 59.4847 us. Best GFLOPs: 7425.1375
2024-04-28 22:48:56 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu] Trial #231: GFLOPs: 7240.7723. Time: 59.8236 us. Best GFLOPs: 7425.1375
2024-04-28 22:48:56 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu] Trial #232: GFLOPs: 7203.9592. Time: 60.1294 us. Best GFLOPs: 7425.1375
2024-04-28 22:48:56 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu] Trial #233: GFLOPs: 7355.9277. Time: 58.8871 us. Best GFLOPs: 7425.1375
2024-04-28 22:48:56 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu] Trial #234: GFLOPs: 7315.4935. Time: 59.2126 us. Best GFLOPs: 7425.1375
2024-04-28 22:48:56 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu] Trial #235: GFLOPs: 7195.9724. Time: 60.1961 us. Best GFLOPs: 7425.1375
2024-04-28 22:48:56 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu] Trial #236: GFLOPs: 7268.1964. Time: 59.5979 us. Best GFLOPs: 7425.1375
2024-04-28 22:48:56 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu] Trial #237: GFLOPs: 7116.4234. Time: 60.8690 us. Best GFLOPs: 7425.1375
2024-04-28 22:48:56 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu] Trial #238: GFLOPs: 7326.3962. Time: 59.1245 us. Best GFLOPs: 7425.1375
2024-04-28 22:48:56 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu] Trial #239: GFLOPs: 7212.1171. Time: 60.0613 us. Best GFLOPs: 7425.1375
2024-04-28 22:48:56 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu] Trial #240: GFLOPs: 7292.7442. Time: 59.3973 us. Best GFLOPs: 7425.1375
2024-04-28 22:48:56 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu] Trial #241: GFLOPs: 7198.7690. Time: 60.1727 us. Best GFLOPs: 7425.1375
2024-04-28 22:48:56 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu] Trial #242: GFLOPs: 7209.7566. Time: 60.0810 us. Best GFLOPs: 7425.1375
2024-04-28 22:48:56 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu] Trial #243: GFLOPs: 7335.9986. Time: 59.0471 us. Best GFLOPs: 7425.1375
2024-04-28 22:48:56 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu] Trial #244: GFLOPs: 7213.1867. Time: 60.0524 us. Best GFLOPs: 7425.1375
2024-04-28 22:48:56 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu] Trial #245: GFLOPs: 7144.4746. Time: 60.6300 us. Best GFLOPs: 7425.1375
2024-04-28 22:48:56 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu] Trial #246: GFLOPs: 7191.3547. Time: 60.2347 us. Best GFLOPs: 7425.1375
2024-04-28 22:48:56 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu] Trial #247: GFLOPs: 7278.5581. Time: 59.5131 us. Best GFLOPs: 7425.1375
2024-04-28 22:48:56 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu] Trial #248: GFLOPs: 7181.2761. Time: 60.3193 us. Best GFLOPs: 7425.1375
2024-04-28 22:48:56 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu] Trial #249: GFLOPs: 7271.6624. Time: 59.5695 us. Best GFLOPs: 7425.1375
2024-04-28 22:48:56 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu] Trial #250: GFLOPs: 6783.2051. Time: 63.8591 us. Best GFLOPs: 7425.1375
2024-04-28 22:48:56 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu] Trial #251: GFLOPs: 7229.8869. Time: 59.9137 us. Best GFLOPs: 7425.1375
2024-04-28 22:48:56 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu] Trial #252: GFLOPs: 7087.0701. Time: 61.1211 us. Best GFLOPs: 7425.1375
2024-04-28 22:48:56 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu] Trial #253: GFLOPs: 7279.3547. Time: 59.5066 us. Best GFLOPs: 7425.1375
2024-04-28 22:48:56 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu] Trial #254: GFLOPs: 1481.8123. Time: 292.3241 us. Best GFLOPs: 7425.1375
2024-04-28 22:48:56 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu] Trial #255: GFLOPs: 1008.6366. Time: 429.4603 us. Best GFLOPs: 7425.1375
2024-04-28 22:48:56 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu] Trial #256: GFLOPs: 5101.4698. Time: 84.9107 us. Best GFLOPs: 7425.1375
2024-04-28 23:33:26 [INFO] [evolutionary_search.cc:713] Generating candidates......
2024-04-28 23:33:30 [INFO] [evolutionary_search.cc:715] Picked top 102 candidate(s) from database
2024-04-28 23:33:36 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x76c2cc8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x3ab4108)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x87bd5e8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x77043f8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x485cc78)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x3aa5498)]: 390 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x3aad778)]: 0 failure(s)
2024-04-28 23:33:43 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x76c2cc8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x3ab4108)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x87bd5e8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x77043f8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x485cc78)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x3aa5498)]: 782 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x3aad778)]: 0 failure(s)
2024-04-28 23:33:50 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x76c2cc8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x3ab4108)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x87bd5e8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x77043f8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x485cc78)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x3aa5498)]: 1170 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x3aad778)]: 0 failure(s)
2024-04-28 23:33:50 [INFO] [evolutionary_search.cc:723] Sampled 60 candidate(s)
2024-04-28 23:34:10 [INFO] [evolutionary_search.cc:621] Evolve iter #0 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x76c2cc8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x3ab4108)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x87bd5e8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x77043f8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x485cc78)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x3aa5498)]: 54 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x3aad778)]: 0 failure(s)
2024-04-28 23:34:31 [INFO] [evolutionary_search.cc:621] Evolve iter #1 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x76c2cc8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x3ab4108)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x87bd5e8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x77043f8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x485cc78)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x3aa5498)]: 35 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x3aad778)]: 0 failure(s)
2024-04-28 23:34:53 [INFO] [evolutionary_search.cc:621] Evolve iter #2 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x76c2cc8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x3ab4108)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x87bd5e8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x77043f8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x485cc78)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x3aa5498)]: 51 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x3aad778)]: 0 failure(s)
2024-04-28 23:35:15 [INFO] [evolutionary_search.cc:621] Evolve iter #3 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x76c2cc8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x3ab4108)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x87bd5e8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x77043f8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x485cc78)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x3aa5498)]: 39 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x3aad778)]: 0 failure(s)
2024-04-28 23:35:21 [INFO] [evolutionary_search.cc:649] Scores of the best 64 candidates:
[1 : 16]:	1.0535  1.0532  1.0386  1.0366  1.0351  1.0284  1.0271  1.0218  1.0216  1.0184  1.0184  1.0174  1.0161  1.0156  1.0144  1.0121
[17 : 32]:	1.0119  1.0119  1.0097  1.0088  1.0068  1.0050  1.0050  1.0029  1.0021  1.0010  0.9995  0.9994  0.9982  0.9982  0.9976  0.9973
[33 : 48]:	0.9966  0.9965  0.9958  0.9950  0.9946  0.9939  0.9935  0.9932  0.9928  0.9928  0.9924  0.9920  0.9917  0.9911  0.9911  0.9906
[49 : 64]:	0.9902  0.9894  0.9894  0.9892  0.9889  0.9887  0.9886  0.9883  0.9882  0.9882  0.9881  0.9880  0.9880  0.9878  0.9875  0.9875
2024-04-28 23:35:21 [INFO] [evolutionary_search.cc:727] Got 64 candidate(s) with evolutionary search
2024-04-28 23:35:21 [INFO] [evolutionary_search.cc:730] Sending 64 candidates(s) for measurement
2024-04-28 23:36:58 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu] Trial #257: GFLOPs: 5126.6204. Time: 84.4941 us. Best GFLOPs: 7425.1375
2024-04-28 23:36:58 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu] Trial #258: GFLOPs: 6384.6549. Time: 67.8454 us. Best GFLOPs: 7425.1375
2024-04-28 23:36:58 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu] Trial #259: GFLOPs: 7346.8415. Time: 58.9599 us. Best GFLOPs: 7425.1375
2024-04-28 23:36:58 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu] Trial #260: GFLOPs: 7296.0275. Time: 59.3706 us. Best GFLOPs: 7425.1375
2024-04-28 23:36:58 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu] Trial #261: GFLOPs: 6979.1696. Time: 62.0660 us. Best GFLOPs: 7425.1375
2024-04-28 23:36:58 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu] Trial #262: GFLOPs: 7227.0000. Time: 59.9377 us. Best GFLOPs: 7425.1375
2024-04-28 23:36:58 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu] Trial #263: GFLOPs: 7229.2454. Time: 59.9190 us. Best GFLOPs: 7425.1375
2024-04-28 23:36:58 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu] Trial #264: GFLOPs: 7267.4909. Time: 59.6037 us. Best GFLOPs: 7425.1375
2024-04-28 23:36:58 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu] Trial #265: GFLOPs: 7062.7746. Time: 61.3313 us. Best GFLOPs: 7425.1375
2024-04-28 23:36:58 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu] Trial #266: GFLOPs: 7262.9137. Time: 59.6413 us. Best GFLOPs: 7425.1375
2024-04-28 23:36:58 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu] Trial #267: GFLOPs: 7262.4651. Time: 59.6450 us. Best GFLOPs: 7425.1375
2024-04-28 23:36:58 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu] Trial #268: GFLOPs: 7296.0235. Time: 59.3706 us. Best GFLOPs: 7425.1375
2024-04-28 23:36:58 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu] Trial #269: GFLOPs: 7352.6175. Time: 58.9136 us. Best GFLOPs: 7425.1375
2024-04-28 23:36:58 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu] Trial #270: GFLOPs: 7327.6629. Time: 59.1143 us. Best GFLOPs: 7425.1375
2024-04-28 23:36:58 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu] Trial #271: GFLOPs: 7435.5938. Time: 58.2562 us. Best GFLOPs: 7435.5938
2024-04-28 23:36:58 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu] Trial #272: GFLOPs: 7196.1922. Time: 60.1943 us. Best GFLOPs: 7435.5938
2024-04-28 23:36:58 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu] Trial #273: GFLOPs: 7333.6346. Time: 59.0661 us. Best GFLOPs: 7435.5938
2024-04-28 23:36:58 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu] Trial #274: GFLOPs: 7326.3962. Time: 59.1245 us. Best GFLOPs: 7435.5938
2024-04-28 23:36:58 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu] Trial #275: GFLOPs: 7295.2789. Time: 59.3767 us. Best GFLOPs: 7435.5938
2024-04-28 23:36:58 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu] Trial #276: GFLOPs: 7240.0567. Time: 59.8296 us. Best GFLOPs: 7435.5938
2024-04-28 23:36:58 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu] Trial #277: GFLOPs: 7232.9661. Time: 59.8882 us. Best GFLOPs: 7435.5938
2024-04-28 23:36:58 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu] Trial #278: GFLOPs: 7112.1393. Time: 60.9056 us. Best GFLOPs: 7435.5938
2024-04-28 23:36:58 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu] Trial #279: GFLOPs: 7243.4130. Time: 59.8018 us. Best GFLOPs: 7435.5938
2024-04-28 23:36:58 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu] Trial #280: GFLOPs: 7392.3074. Time: 58.5973 us. Best GFLOPs: 7435.5938
2024-04-28 23:36:58 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu] Trial #281: GFLOPs: 7314.8837. Time: 59.2175 us. Best GFLOPs: 7435.5938
2024-04-28 23:36:58 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu] Trial #282: GFLOPs: 7272.7764. Time: 59.5604 us. Best GFLOPs: 7435.5938
2024-04-28 23:36:58 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu] Trial #283: GFLOPs: 6960.9595. Time: 62.2284 us. Best GFLOPs: 7435.5938
2024-04-28 23:36:58 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu] Trial #284: GFLOPs: 7263.6136. Time: 59.6355 us. Best GFLOPs: 7435.5938
2024-04-28 23:36:58 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu] Trial #285: GFLOPs: 7219.9057. Time: 59.9965 us. Best GFLOPs: 7435.5938
2024-04-28 23:36:58 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu] Trial #286: GFLOPs: 7280.1339. Time: 59.5002 us. Best GFLOPs: 7435.5938
2024-04-28 23:36:58 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu] Trial #287: GFLOPs: 7246.8383. Time: 59.7736 us. Best GFLOPs: 7435.5938
2024-04-28 23:36:58 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu] Trial #288: GFLOPs: 7128.1606. Time: 60.7687 us. Best GFLOPs: 7435.5938
2024-04-28 23:36:58 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu] Trial #289: GFLOPs: 7365.0434. Time: 58.8142 us. Best GFLOPs: 7435.5938
2024-04-28 23:36:58 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu] Trial #290: GFLOPs: 7274.9751. Time: 59.5424 us. Best GFLOPs: 7435.5938
2024-04-28 23:36:58 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu] Trial #291: GFLOPs: 6610.4727. Time: 65.5278 us. Best GFLOPs: 7435.5938
2024-04-28 23:36:58 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu] Trial #292: GFLOPs: 7341.4099. Time: 59.0036 us. Best GFLOPs: 7435.5938
2024-04-28 23:36:58 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu] Trial #293: GFLOPs: 7260.7496. Time: 59.6590 us. Best GFLOPs: 7435.5938
2024-04-28 23:36:58 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu] Trial #294: GFLOPs: 7331.5966. Time: 59.0825 us. Best GFLOPs: 7435.5938
2024-04-28 23:36:58 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu] Trial #295: GFLOPs: 7289.8241. Time: 59.4211 us. Best GFLOPs: 7435.5938
2024-04-28 23:36:58 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu] Trial #296: GFLOPs: 7194.2524. Time: 60.2105 us. Best GFLOPs: 7435.5938
2024-04-28 23:36:58 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu] Trial #297: GFLOPs: 7133.1870. Time: 60.7259 us. Best GFLOPs: 7435.5938
2024-04-28 23:36:58 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu] Trial #298: GFLOPs: 7130.5791. Time: 60.7481 us. Best GFLOPs: 7435.5938
2024-04-28 23:36:58 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu] Trial #299: GFLOPs: 7121.1887. Time: 60.8282 us. Best GFLOPs: 7435.5938
2024-04-28 23:36:58 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu] Trial #300: GFLOPs: 7285.5006. Time: 59.4564 us. Best GFLOPs: 7435.5938
2024-04-28 23:36:58 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu] Trial #301: GFLOPs: 7304.4965. Time: 59.3017 us. Best GFLOPs: 7435.5938
2024-04-28 23:36:58 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu] Trial #302: GFLOPs: 7236.0706. Time: 59.8625 us. Best GFLOPs: 7435.5938
2024-04-28 23:36:58 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu] Trial #303: GFLOPs: 7391.6084. Time: 58.6029 us. Best GFLOPs: 7435.5938
2024-04-28 23:36:58 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu] Trial #304: GFLOPs: 7251.6486. Time: 59.7339 us. Best GFLOPs: 7435.5938
2024-04-28 23:36:58 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu] Trial #305: GFLOPs: 5561.1846. Time: 77.8916 us. Best GFLOPs: 7435.5938
2024-04-28 23:36:58 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu] Trial #306: GFLOPs: 7341.1385. Time: 59.0058 us. Best GFLOPs: 7435.5938
2024-04-28 23:36:58 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu] Trial #307: GFLOPs: 7312.0819. Time: 59.2402 us. Best GFLOPs: 7435.5938
2024-04-28 23:36:58 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu] Trial #308: GFLOPs: 7231.0597. Time: 59.9040 us. Best GFLOPs: 7435.5938
2024-04-28 23:36:58 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu] Trial #309: GFLOPs: 7331.8855. Time: 59.0802 us. Best GFLOPs: 7435.5938
2024-04-28 23:36:58 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu] Trial #310: GFLOPs: 7198.6093. Time: 60.1740 us. Best GFLOPs: 7435.5938
2024-04-28 23:36:58 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu] Trial #311: GFLOPs: 7374.8671. Time: 58.7359 us. Best GFLOPs: 7435.5938
2024-04-28 23:36:58 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu] Trial #312: GFLOPs: 7285.6896. Time: 59.4548 us. Best GFLOPs: 7435.5938
2024-04-28 23:36:58 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu] Trial #313: GFLOPs: 7310.2533. Time: 59.2550 us. Best GFLOPs: 7435.5938
2024-04-28 23:36:58 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu] Trial #314: GFLOPs: 7314.0906. Time: 59.2240 us. Best GFLOPs: 7435.5938
2024-04-28 23:36:58 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu] Trial #315: GFLOPs: 7285.1635. Time: 59.4591 us. Best GFLOPs: 7435.5938
2024-04-28 23:36:58 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu] Trial #316: GFLOPs: 7216.9871. Time: 60.0208 us. Best GFLOPs: 7435.5938
2024-04-28 23:36:58 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu] Trial #317: GFLOPs: 7249.8936. Time: 59.7484 us. Best GFLOPs: 7435.5938
2024-04-28 23:36:58 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu] Trial #318: GFLOPs: 864.5737. Time: 501.0208 us. Best GFLOPs: 7435.5938
2024-04-28 23:36:58 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu] Trial #319: GFLOPs: 3288.0690. Time: 131.7398 us. Best GFLOPs: 7435.5938
2024-04-28 23:36:59 [INFO] [task_scheduler.cc:121] [Task #0: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu] Trial #320: Error in building:
LocalBuilder: Timeout, killed after 30.0 seconds
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(3), T.int64(224), T.int64(224)), "float32"), p1: T.Buffer((T.int64(6), T.int64(6), T.int64(3), T.int64(64)), "float32"), p2: T.Buffer((T.int64(1), T.int64(64), T.int64(1), T.int64(1)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(64), T.int64(224), T.int64(224)), "float32")):
        T.func_attr({"layout_free_buffers": [1], "tir.noalias": T.bool(True)})
        # with T.block("root"):
        input_tile_local = T.alloc_buffer((T.int64(3), T.int64(3136), T.int64(6), T.int64(6)), scope="local")
        data_pack = T.alloc_buffer((T.int64(6), T.int64(6), T.int64(3), T.int64(3136)))
        bgemm = T.alloc_buffer((T.int64(6), T.int64(6), T.int64(64), T.int64(3136)))
        inverse_local = T.alloc_buffer((T.int64(64), T.int64(3136), T.int64(4), T.int64(4)), scope="local")
        data_pack_local = T.alloc_buffer((T.int64(6), T.int64(6), T.int64(3), T.int64(3136)), scope="local")
        bgemm_local = T.alloc_buffer((T.int64(6), T.int64(6), T.int64(64), T.int64(3136)), scope="local")
        data_pack_shared = T.alloc_buffer((T.int64(6), T.int64(6), T.int64(3), T.int64(3136)), scope="shared")
        p1_shared = T.alloc_buffer((T.int64(6), T.int64(6), T.int64(3), T.int64(64)), scope="shared")
        for ci_p_fused_0 in T.thread_binding(T.int64(10), thread="blockIdx.x", annotations={"pragma_auto_unroll_max_step": 1024, "pragma_unroll_explicit": 1}):
            for ci_p_fused_1 in T.thread_binding(T.int64(1024), thread="threadIdx.x"):
                for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(1), T.int64(6), T.int64(6)):
                    with T.block("input_tile"):
                        v_ci = T.axis.spatial(T.int64(3), (ci_p_fused_0 * T.int64(1024) + ci_p_fused_1) // T.int64(3136) + ax0)
                        v_p = T.axis.spatial(T.int64(3136), (ci_p_fused_0 * T.int64(1024) + ci_p_fused_1) % T.int64(3136) + ax1)
                        v_eps, v_nu = T.axis.remap("SS", [ax2, ax3])
                        T.where(ci_p_fused_0 * T.int64(1024) + ci_p_fused_1 < T.int64(9408))
                        T.reads(p0[v_p // T.int64(3136), v_ci, v_p % T.int64(3136) // T.int64(56) * T.int64(4) + v_eps - T.int64(1), v_p % T.int64(56) * T.int64(4) + v_nu - T.int64(1)])
                        T.writes(input_tile_local[v_ci, v_p, v_eps, v_nu])
                        T.block_attr({"schedule_rule": "None"})
                        input_tile_local[v_ci, v_p, v_eps, v_nu] = T.if_then_else(T.int64(1) <= v_p % T.int64(3136) // T.int64(56) * T.int64(4) + v_eps and v_p % T.int64(3136) // T.int64(56) * T.int64(4) + v_eps < T.int64(225) and T.int64(1) <= v_p % T.int64(56) * T.int64(4) + v_nu and v_p % T.int64(56) * T.int64(4) + v_nu < T.int64(225), p0[v_p // T.int64(3136), v_ci, v_p % T.int64(3136) // T.int64(56) * T.int64(4) + v_eps - T.int64(1), v_p % T.int64(56) * T.int64(4) + v_nu - T.int64(1)], T.float32(0))
                for eps in T.unroll(T.int64(6)):
                    for nu in T.unroll(T.int64(6)):
                        with T.block("data_pack_init"):
                            v_eps, v_nu = T.axis.remap("SS", [eps, nu])
                            v_ci = T.axis.spatial(T.int64(3), (ci_p_fused_0 * T.int64(1024) + ci_p_fused_1) // T.int64(3136))
                            v_p = T.axis.spatial(T.int64(3136), (ci_p_fused_0 * T.int64(1024) + ci_p_fused_1) % T.int64(3136))
                            T.where(ci_p_fused_0 * T.int64(1024) + ci_p_fused_1 < T.int64(9408))
                            T.reads()
                            T.writes(data_pack_local[v_eps, v_nu, v_ci, v_p])
                            T.block_attr({"schedule_rule": "conv2d_nchw_winograd_data_pack"})
                            data_pack_local[v_eps, v_nu, v_ci, v_p] = T.float32(0)
                        for r_a in T.unroll(T.int64(6)):
                            for r_b in T.unroll(T.int64(6)):
                                with T.block("data_pack_update"):
                                    v_eps, v_nu = T.axis.remap("SS", [eps, nu])
                                    v_ci = T.axis.spatial(T.int64(3), (ci_p_fused_0 * T.int64(1024) + ci_p_fused_1) // T.int64(3136))
                                    v_p = T.axis.spatial(T.int64(3136), (ci_p_fused_0 * T.int64(1024) + ci_p_fused_1) % T.int64(3136))
                                    v_r_a, v_r_b = T.axis.remap("RR", [r_a, r_b])
                                    T.where(ci_p_fused_0 * T.int64(1024) + ci_p_fused_1 < T.int64(9408))
                                    T.reads(data_pack_local[v_eps, v_nu, v_ci, v_p], input_tile_local[v_ci, v_p, v_r_a, v_r_b])
                                    T.writes(data_pack_local[v_eps, v_nu, v_ci, v_p])
                                    T.block_attr({"schedule_rule": "conv2d_nchw_winograd_data_pack"})
                                    data_pack_local[v_eps, v_nu, v_ci, v_p] = data_pack_local[v_eps, v_nu, v_ci, v_p] + input_tile_local[v_ci, v_p, v_r_a, v_r_b] * T.Select(v_r_a % T.int64(6) == T.int64(5) and v_eps % T.int64(6) == T.int64(5), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(5) and v_eps % T.int64(6) == T.int64(4), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(5) and v_eps % T.int64(6) == T.int64(3), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(5) and v_eps % T.int64(6) == T.int64(2), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(5) and v_eps % T.int64(6) == T.int64(1), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(5) and v_eps % T.int64(6) == T.int64(0), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(4) and v_eps % T.int64(6) == T.int64(5), T.float32(1.5), T.Select(v_r_a % T.int64(6) == T.int64(4) and v_eps % T.int64(6) == T.int64(4), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(4) and v_eps % T.int64(6) == T.int64(3), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(4) and v_eps % T.int64(6) == T.int64(2), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(4) and v_eps % T.int64(6) == T.int64(1), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(4) and v_eps % T.int64(6) == T.int64(0), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(3) and v_eps % T.int64(6) == T.int64(5), T.float32(-2), T.Select(v_r_a % T.int64(6) == T.int64(3) and v_eps % T.int64(6) == T.int64(4), T.float32(-0.5), T.Select(v_r_a % T.int64(6) == T.int64(3) and v_eps % T.int64(6) == T.int64(3), T.float32(2), T.Select(v_r_a % T.int64(6) == T.int64(3) and v_eps % T.int64(6) == T.int64(2), T.float32(2.5), T.Select(v_r_a % T.int64(6) == T.int64(3) and v_eps % T.int64(6) == T.int64(1), T.float32(0.5), T.Select(v_r_a % T.int64(6) == T.int64(3) and v_eps % T.int64(6) == T.int64(0), T.float32(1.5), T.Select(v_r_a % T.int64(6) == T.int64(2) and v_eps % T.int64(6) == T.int64(5), T.float32(-1.5), T.Select(v_r_a % T.int64(6) == T.int64(2) and v_eps % T.int64(6) == T.int64(4), T.float32(-1), T.Select(v_r_a % T.int64(6) == T.int64(2) and v_eps % T.int64(6) == T.int64(3), T.float32(-1), T.Select(v_r_a % T.int64(6) == T.int64(2) and v_eps % T.int64(6) == T.int64(2), T.float32(0.5), T.Select(v_r_a % T.int64(6) == T.int64(2) and v_eps % T.int64(6) == T.int64(1), T.float32(-2.5), T.Select(v_r_a % T.int64(6) == T.int64(2) and v_eps % T.int64(6) == T.int64(0), T.float32(-2), T.Select(v_r_a % T.int64(6) == T.int64(1) and v_eps % T.int64(6) == T.int64(5), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(1) and v_eps % T.int64(6) == T.int64(4), T.float32(0.5), T.Select(v_r_a % T.int64(6) == T.int64(1) and v_eps % T.int64(6) == T.int64(3), T.float32(-2), T.Select(v_r_a % T.int64(6) == T.int64(1) and v_eps % T.int64(6) == T.int64(2), T.float32(-1), T.Select(v_r_a % T.int64(6) == T.int64(1) and v_eps % T.int64(6) == T.int64(1), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(1) and v_eps % T.int64(6) == T.int64(0), T.float32(-1.5), T.Select(v_r_a % T.int64(6) == T.int64(0) and v_eps % T.int64(6) == T.int64(5), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(0) and v_eps % T.int64(6) == T.int64(4), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(0) and v_eps % T.int64(6) == T.int64(3), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(0) and v_eps % T.int64(6) == T.int64(2), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(0) and v_eps % T.int64(6) == T.int64(1), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(0) and v_eps % T.int64(6) == T.int64(0), T.float32(1), T.float32(0))))))))))))))))))))))))))))))))))))) * T.Select(v_r_b % T.int64(6) == T.int64(5) and v_nu % T.int64(6) == T.int64(5), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(5) and v_nu % T.int64(6) == T.int64(4), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(5) and v_nu % T.int64(6) == T.int64(3), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(5) and v_nu % T.int64(6) == T.int64(2), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(5) and v_nu % T.int64(6) == T.int64(1), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(5) and v_nu % T.int64(6) == T.int64(0), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(4) and v_nu % T.int64(6) == T.int64(5), T.float32(1.5), T.Select(v_r_b % T.int64(6) == T.int64(4) and v_nu % T.int64(6) == T.int64(4), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(4) and v_nu % T.int64(6) == T.int64(3), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(4) and v_nu % T.int64(6) == T.int64(2), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(4) and v_nu % T.int64(6) == T.int64(1), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(4) and v_nu % T.int64(6) == T.int64(0), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(3) and v_nu % T.int64(6) == T.int64(5), T.float32(-2), T.Select(v_r_b % T.int64(6) == T.int64(3) and v_nu % T.int64(6) == T.int64(4), T.float32(-0.5), T.Select(v_r_b % T.int64(6) == T.int64(3) and v_nu % T.int64(6) == T.int64(3), T.float32(2), T.Select(v_r_b % T.int64(6) == T.int64(3) and v_nu % T.int64(6) == T.int64(2), T.float32(2.5), T.Select(v_r_b % T.int64(6) == T.int64(3) and v_nu % T.int64(6) == T.int64(1), T.float32(0.5), T.Select(v_r_b % T.int64(6) == T.int64(3) and v_nu % T.int64(6) == T.int64(0), T.float32(1.5), T.Select(v_r_b % T.int64(6) == T.int64(2) and v_nu % T.int64(6) == T.int64(5), T.float32(-1.5), T.Select(v_r_b % T.int64(6) == T.int64(2) and v_nu % T.int64(6) == T.int64(4), T.float32(-1), T.Select(v_r_b % T.int64(6) == T.int64(2) and v_nu % T.int64(6) == T.int64(3), T.float32(-1), T.Select(v_r_b % T.int64(6) == T.int64(2) and v_nu % T.int64(6) == T.int64(2), T.float32(0.5), T.Select(v_r_b % T.int64(6) == T.int64(2) and v_nu % T.int64(6) == T.int64(1), T.float32(-2.5), T.Select(v_r_b % T.int64(6) == T.int64(2) and v_nu % T.int64(6) == T.int64(0), T.float32(-2), T.Select(v_r_b % T.int64(6) == T.int64(1) and v_nu % T.int64(6) == T.int64(5), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(1) and v_nu % T.int64(6) == T.int64(4), T.float32(0.5), T.Select(v_r_b % T.int64(6) == T.int64(1) and v_nu % T.int64(6) == T.int64(3), T.float32(-2), T.Select(v_r_b % T.int64(6) == T.int64(1) and v_nu % T.int64(6) == T.int64(2), T.float32(-1), T.Select(v_r_b % T.int64(6) == T.int64(1) and v_nu % T.int64(6) == T.int64(1), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(1) and v_nu % T.int64(6) == T.int64(0), T.float32(-1.5), T.Select(v_r_b % T.int64(6) == T.int64(0) and v_nu % T.int64(6) == T.int64(5), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(0) and v_nu % T.int64(6) == T.int64(4), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(0) and v_nu % T.int64(6) == T.int64(3), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(0) and v_nu % T.int64(6) == T.int64(2), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(0) and v_nu % T.int64(6) == T.int64(1), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(0) and v_nu % T.int64(6) == T.int64(0), T.float32(1), T.float32(0)))))))))))))))))))))))))))))))))))))
                for ax0, ax1, ax2, ax3 in T.grid(T.int64(6), T.int64(6), T.int64(1), T.int64(1)):
                    with T.block("data_pack_local"):
                        v0, v1 = T.axis.remap("SS", [ax0, ax1])
                        v2 = T.axis.spatial(T.int64(3), (ci_p_fused_0 * T.int64(1024) + ci_p_fused_1) // T.int64(3136) + ax2)
                        v3 = T.axis.spatial(T.int64(3136), (ci_p_fused_0 * T.int64(1024) + ci_p_fused_1) % T.int64(3136) + ax3)
                        T.where(ci_p_fused_0 * T.int64(1024) + ci_p_fused_1 < T.int64(9408))
                        T.reads(data_pack_local[v0, v1, v2, v3])
                        T.writes(data_pack[v0, v1, v2, v3])
                        data_pack[v0, v1, v2, v3] = data_pack_local[v0, v1, v2, v3]
        for eps_0_nu_0_co_0_p_0_fused in T.thread_binding(T.int64(168), thread="blockIdx.x", annotations={"pragma_auto_unroll_max_step": 1024, "pragma_unroll_explicit": 1}):
            for eps_1_nu_1_co_1_p_1_fused in T.thread_binding(T.int64(4), thread="vthread.x"):
                for eps_2_nu_2_co_2_p_2_fused in T.thread_binding(T.int64(32), thread="threadIdx.x"):
                    for eps_3_init, nu_3_init, co_3_init, p_3_init, eps_4_init, nu_4_init, co_4_init, p_4_init in T.grid(T.int64(3), T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(1), T.int64(4), T.int64(14)):
                        with T.block("bgemm_init"):
                            v_eps = T.axis.spatial(T.int64(6), eps_3_init * T.int64(2) + eps_4_init)
                            v_nu = T.axis.spatial(T.int64(6), eps_0_nu_0_co_0_p_0_fused // T.int64(56) * T.int64(2) + eps_1_nu_1_co_1_p_1_fused // T.int64(2) + nu_3_init + nu_4_init)
                            v_co = T.axis.spatial(T.int64(64), eps_0_nu_0_co_0_p_0_fused % T.int64(56) // T.int64(28) * T.int64(32) + eps_2_nu_2_co_2_p_2_fused // T.int64(4) * T.int64(4) + co_3_init * T.int64(4) + co_4_init)
                            v_p = T.axis.spatial(T.int64(3136), eps_0_nu_0_co_0_p_0_fused % T.int64(28) * T.int64(112) + eps_1_nu_1_co_1_p_1_fused % T.int64(2) * T.int64(56) + eps_2_nu_2_co_2_p_2_fused % T.int64(4) * T.int64(14) + p_3_init * T.int64(14) + p_4_init)
                            T.reads()
                            T.writes(bgemm_local[v_eps, v_nu, v_co, v_p])
                            T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 32, "meta_schedule.tiling_structure": "SSSRRSRS"})
                            bgemm_local[v_eps, v_nu, v_co, v_p] = T.float32(0)
                    for ci_0_fused in T.serial(T.int64(3), annotations={"software_pipeline_async_stages": [0], "software_pipeline_order": [0, 1, 2], "software_pipeline_stage": [0, 0, 2]}):
                        for ax0_ax1_ax2_ax3_fused_0 in range(T.int64(11)):
                            for ax0_ax1_ax2_ax3_fused_1 in T.thread_binding(T.int64(32), thread="threadIdx.x"):
                                for ax0_ax1_ax2_ax3_fused_2 in T.vectorized(T.int64(4)):
                                    with T.block("data_pack_shared"):
                                        v0 = T.axis.spatial(T.int64(6), (ax0_ax1_ax2_ax3_fused_0 * T.int64(128) + ax0_ax1_ax2_ax3_fused_1 * T.int64(4) + ax0_ax1_ax2_ax3_fused_2) // T.int64(224))
                                        v1 = T.axis.spatial(T.int64(6), eps_0_nu_0_co_0_p_0_fused // T.int64(56) * T.int64(2) + (ax0_ax1_ax2_ax3_fused_0 * T.int64(128) + ax0_ax1_ax2_ax3_fused_1 * T.int64(4) + ax0_ax1_ax2_ax3_fused_2) % T.int64(224) // T.int64(112))
                                        v2 = T.axis.spatial(T.int64(3), ci_0_fused)
                                        v3 = T.axis.spatial(T.int64(3136), eps_0_nu_0_co_0_p_0_fused % T.int64(28) * T.int64(112) + (ax0_ax1_ax2_ax3_fused_0 * T.int64(128) + ax0_ax1_ax2_ax3_fused_1 * T.int64(4) + ax0_ax1_ax2_ax3_fused_2) % T.int64(112))
                                        T.where((ax0_ax1_ax2_ax3_fused_0 * T.int64(32) + ax0_ax1_ax2_ax3_fused_1) * T.int64(4) + ax0_ax1_ax2_ax3_fused_2 < T.int64(1344))
                                        T.reads(data_pack[v0, v1, v2, v3])
                                        T.writes(data_pack_shared[v0, v1, v2, v3])
                                        data_pack_shared[v0, v1, v2, v3] = data_pack[v0, v1, v2, v3]
                        for ax0_ax1_ax2_ax3_fused_0 in range(T.int64(3)):
                            for ax0_ax1_ax2_ax3_fused_1 in T.thread_binding(T.int64(32), thread="threadIdx.x"):
                                for ax0_ax1_ax2_ax3_fused_2 in T.vectorized(T.int64(4)):
                                    with T.block("p1_shared"):
                                        v0 = T.axis.spatial(T.int64(6), (ax0_ax1_ax2_ax3_fused_0 * T.int64(128) + ax0_ax1_ax2_ax3_fused_1 * T.int64(4) + ax0_ax1_ax2_ax3_fused_2) // T.int64(64))
                                        v1 = T.axis.spatial(T.int64(6), eps_0_nu_0_co_0_p_0_fused // T.int64(56) * T.int64(2) + (ax0_ax1_ax2_ax3_fused_0 * T.int64(128) + ax0_ax1_ax2_ax3_fused_1 * T.int64(4) + ax0_ax1_ax2_ax3_fused_2) % T.int64(64) // T.int64(32))
                                        v2 = T.axis.spatial(T.int64(3), ci_0_fused)
                                        v3 = T.axis.spatial(T.int64(64), eps_0_nu_0_co_0_p_0_fused % T.int64(56) // T.int64(28) * T.int64(32) + (ax0_ax1_ax2_ax3_fused_0 * T.int64(128) + ax0_ax1_ax2_ax3_fused_1 * T.int64(4) + ax0_ax1_ax2_ax3_fused_2) % T.int64(32))
                                        T.reads(p1[v0, v1, v2, v3])
                                        T.writes(p1_shared[v0, v1, v2, v3])
                                        p1_shared[v0, v1, v2, v3] = p1[v0, v1, v2, v3]
                        for ci_1, eps_3, nu_3, co_3, p_3, ci_2, eps_4, nu_4, co_4, p_4 in T.grid(T.int64(1), T.int64(3), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(1), T.int64(4), T.int64(14)):
                            with T.block("bgemm_update"):
                                v_eps = T.axis.spatial(T.int64(6), eps_3 * T.int64(2) + eps_4)
                                v_nu = T.axis.spatial(T.int64(6), eps_0_nu_0_co_0_p_0_fused // T.int64(56) * T.int64(2) + eps_1_nu_1_co_1_p_1_fused // T.int64(2) + nu_3 + nu_4)
                                v_co = T.axis.spatial(T.int64(64), eps_0_nu_0_co_0_p_0_fused % T.int64(56) // T.int64(28) * T.int64(32) + eps_2_nu_2_co_2_p_2_fused // T.int64(4) * T.int64(4) + co_3 * T.int64(4) + co_4)
                                v_p = T.axis.spatial(T.int64(3136), eps_0_nu_0_co_0_p_0_fused % T.int64(28) * T.int64(112) + eps_1_nu_1_co_1_p_1_fused % T.int64(2) * T.int64(56) + eps_2_nu_2_co_2_p_2_fused % T.int64(4) * T.int64(14) + p_3 * T.int64(14) + p_4)
                                v_ci = T.axis.reduce(T.int64(3), ci_0_fused + ci_1 + ci_2)
                                T.reads(bgemm_local[v_eps, v_nu, v_co, v_p], data_pack_shared[v_eps, v_nu, v_ci, v_p], p1_shared[v_eps, v_nu, v_ci, v_co])
                                T.writes(bgemm_local[v_eps, v_nu, v_co, v_p])
                                T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 32, "meta_schedule.tiling_structure": "SSSRRSRS"})
                                bgemm_local[v_eps, v_nu, v_co, v_p] = bgemm_local[v_eps, v_nu, v_co, v_p] + data_pack_shared[v_eps, v_nu, v_ci, v_p] * p1_shared[v_eps, v_nu, v_ci, v_co]
                    for ax0, ax1, ax2, ax3 in T.grid(T.int64(6), T.int64(1), T.int64(4), T.int64(14)):
                        with T.block("bgemm_local"):
                            v0 = T.axis.spatial(T.int64(6), ax0)
                            v1 = T.axis.spatial(T.int64(6), eps_0_nu_0_co_0_p_0_fused // T.int64(56) * T.int64(2) + eps_1_nu_1_co_1_p_1_fused // T.int64(2) + ax1)
                            v2 = T.axis.spatial(T.int64(64), eps_0_nu_0_co_0_p_0_fused % T.int64(56) // T.int64(28) * T.int64(32) + eps_2_nu_2_co_2_p_2_fused // T.int64(4) * T.int64(4) + ax2)
                            v3 = T.axis.spatial(T.int64(3136), eps_0_nu_0_co_0_p_0_fused % T.int64(28) * T.int64(112) + eps_1_nu_1_co_1_p_1_fused % T.int64(2) * T.int64(56) + eps_2_nu_2_co_2_p_2_fused % T.int64(4) * T.int64(14) + ax3)
                            T.reads(bgemm_local[v0, v1, v2, v3])
                            T.writes(bgemm[v0, v1, v2, v3])
                            bgemm[v0, v1, v2, v3] = bgemm_local[v0, v1, v2, v3]
        for n_co_h_0_w_0_fused_0 in T.thread_binding(T.int64(196), thread="blockIdx.x", annotations={"pragma_auto_unroll_max_step": 1024, "pragma_unroll_explicit": 1}):
            for n_co_h_0_w_0_fused_1 in T.thread_binding(T.int64(1024), thread="threadIdx.x"):
                for ax0, ax1 in T.grid(T.int64(1), T.int64(1)):
                    for ax2 in T.unroll(T.int64(4)):
                        for ax3 in T.unroll(T.int64(4)):
                            with T.block("inverse_init"):
                                v_co = T.axis.spatial(T.int64(64), (n_co_h_0_w_0_fused_0 * T.int64(1024) + n_co_h_0_w_0_fused_1) // T.int64(3136) + ax0)
                                v_p = T.axis.spatial(T.int64(3136), (n_co_h_0_w_0_fused_0 * T.int64(1024) + n_co_h_0_w_0_fused_1) % T.int64(3136) + ax1)
                                v_vh, v_vw = T.axis.remap("SS", [ax2, ax3])
                                T.reads()
                                T.writes(inverse_local[v_co, v_p, v_vh, v_vw])
                                T.block_attr({"schedule_rule": "conv2d_nchw_winograd_inverse"})
                                inverse_local[v_co, v_p, v_vh, v_vw] = T.float32(0)
                            for ax4 in T.unroll(T.int64(6)):
                                for ax5 in T.unroll(T.int64(6)):
                                    with T.block("inverse_update"):
                                        v_co = T.axis.spatial(T.int64(64), (n_co_h_0_w_0_fused_0 * T.int64(1024) + n_co_h_0_w_0_fused_1) // T.int64(3136) + ax0)
                                        v_p = T.axis.spatial(T.int64(3136), (n_co_h_0_w_0_fused_0 * T.int64(1024) + n_co_h_0_w_0_fused_1) % T.int64(3136) + ax1)
                                        v_vh, v_vw, v_r_a, v_r_b = T.axis.remap("SSRR", [ax2, ax3, ax4, ax5])
                                        T.reads(inverse_local[v_co, v_p, v_vh, v_vw], bgemm[v_r_a, v_r_b, v_co, v_p])
                                        T.writes(inverse_local[v_co, v_p, v_vh, v_vw])
                                        T.block_attr({"schedule_rule": "conv2d_nchw_winograd_inverse"})
                                        inverse_local[v_co, v_p, v_vh, v_vw] = inverse_local[v_co, v_p, v_vh, v_vw] + bgemm[v_r_a, v_r_b, v_co, v_p] * T.Select(v_r_a % T.int64(6) == T.int64(5) and v_vh % T.int64(4) == T.int64(3), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(5) and v_vh % T.int64(4) == T.int64(2), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(5) and v_vh % T.int64(4) == T.int64(1), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(5) and v_vh % T.int64(4) == T.int64(0), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(4) and v_vh % T.int64(4) == T.int64(3), T.float32(-8), T.Select(v_r_a % T.int64(6) == T.int64(4) and v_vh % T.int64(4) == T.int64(2), T.float32(4), T.Select(v_r_a % T.int64(6) == T.int64(4) and v_vh % T.int64(4) == T.int64(1), T.float32(-2), T.Select(v_r_a % T.int64(6) == T.int64(4) and v_vh % T.int64(4) == T.int64(0), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(3) and v_vh % T.int64(4) == T.int64(3), T.float32(0.125), T.Select(v_r_a % T.int64(6) == T.int64(3) and v_vh % T.int64(4) == T.int64(2), T.float32(0.25), T.Select(v_r_a % T.int64(6) == T.int64(3) and v_vh % T.int64(4) == T.int64(1), T.float32(0.5), T.Select(v_r_a % T.int64(6) == T.int64(3) and v_vh % T.int64(4) == T.int64(0), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(2) and v_vh % T.int64(4) == T.int64(3), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(2) and v_vh % T.int64(4) == T.int64(2), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(2) and v_vh % T.int64(4) == T.int64(1), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(2) and v_vh % T.int64(4) == T.int64(0), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(1) and v_vh % T.int64(4) == T.int64(3), T.float32(-1), T.Select(v_r_a % T.int64(6) == T.int64(1) and v_vh % T.int64(4) == T.int64(2), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(1) and v_vh % T.int64(4) == T.int64(1), T.float32(-1), T.Select(v_r_a % T.int64(6) == T.int64(1) and v_vh % T.int64(4) == T.int64(0), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(0) and v_vh % T.int64(4) == T.int64(3), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(0) and v_vh % T.int64(4) == T.int64(2), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(0) and v_vh % T.int64(4) == T.int64(1), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(0) and v_vh % T.int64(4) == T.int64(0), T.float32(1), T.float32(0))))))))))))))))))))))))) * T.Select(v_r_b % T.int64(6) == T.int64(5) and v_vw % T.int64(4) == T.int64(3), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(5) and v_vw % T.int64(4) == T.int64(2), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(5) and v_vw % T.int64(4) == T.int64(1), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(5) and v_vw % T.int64(4) == T.int64(0), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(4) and v_vw % T.int64(4) == T.int64(3), T.float32(-8), T.Select(v_r_b % T.int64(6) == T.int64(4) and v_vw % T.int64(4) == T.int64(2), T.float32(4), T.Select(v_r_b % T.int64(6) == T.int64(4) and v_vw % T.int64(4) == T.int64(1), T.float32(-2), T.Select(v_r_b % T.int64(6) == T.int64(4) and v_vw % T.int64(4) == T.int64(0), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(3) and v_vw % T.int64(4) == T.int64(3), T.float32(0.125), T.Select(v_r_b % T.int64(6) == T.int64(3) and v_vw % T.int64(4) == T.int64(2), T.float32(0.25), T.Select(v_r_b % T.int64(6) == T.int64(3) and v_vw % T.int64(4) == T.int64(1), T.float32(0.5), T.Select(v_r_b % T.int64(6) == T.int64(3) and v_vw % T.int64(4) == T.int64(0), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(2) and v_vw % T.int64(4) == T.int64(3), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(2) and v_vw % T.int64(4) == T.int64(2), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(2) and v_vw % T.int64(4) == T.int64(1), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(2) and v_vw % T.int64(4) == T.int64(0), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(1) and v_vw % T.int64(4) == T.int64(3), T.float32(-1), T.Select(v_r_b % T.int64(6) == T.int64(1) and v_vw % T.int64(4) == T.int64(2), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(1) and v_vw % T.int64(4) == T.int64(1), T.float32(-1), T.Select(v_r_b % T.int64(6) == T.int64(1) and v_vw % T.int64(4) == T.int64(0), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(0) and v_vw % T.int64(4) == T.int64(3), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(0) and v_vw % T.int64(4) == T.int64(2), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(0) and v_vw % T.int64(4) == T.int64(1), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(0) and v_vw % T.int64(4) == T.int64(0), T.float32(1), T.float32(0)))))))))))))))))))))))))
                for h_1, w_1 in T.grid(T.int64(4), T.int64(4)):
                    with T.block("conv2d_winograd"):
                        v_n = T.axis.spatial(T.int64(1), T.int64(0))
                        v_co = T.axis.spatial(T.int64(64), (n_co_h_0_w_0_fused_0 * T.int64(1024) + n_co_h_0_w_0_fused_1) // T.int64(3136))
                        v_h = T.axis.spatial(T.int64(224), (n_co_h_0_w_0_fused_0 * T.int64(1024) + n_co_h_0_w_0_fused_1) % T.int64(3136) // T.int64(56) * T.int64(4) + h_1)
                        v_w = T.axis.spatial(T.int64(224), (n_co_h_0_w_0_fused_0 * T.int64(1024) + n_co_h_0_w_0_fused_1) % T.int64(56) * T.int64(4) + w_1)
                        T.reads(inverse_local[v_co, v_n * T.int64(3136) + v_h // T.int64(4) * T.int64(56) + v_w // T.int64(4), v_h % T.int64(4), v_w % T.int64(4)], p2[v_n, v_co, T.int64(0), T.int64(0)])
                        T.writes(T_relu[v_n, v_co, v_h, v_w])
                        T_relu[v_n, v_co, v_h, v_w] = T.max(inverse_local[v_co, v_n * T.int64(3136) + v_h // T.int64(4) * T.int64(56) + v_w // T.int64(4), v_h % T.int64(4), v_w % T.int64(4)] + p2[v_n, v_co, T.int64(0), T.int64(0)], T.float32(0))
b0 = sch.get_block(name="data_pack", func_name="main")
b1 = sch.get_block(name="bgemm", func_name="main")
b2 = sch.get_block(name="inverse", func_name="main")
b3 = sch.get_block(name="conv2d_winograd", func_name="main")
b4 = sch.get_block(name="T_add", func_name="main")
b5 = sch.get_block(name="T_relu", func_name="main")
b6 = sch.get_block(name="root", func_name="main")
b7, b8 = sch.get_producers(block=b2)
sch.compute_inline(block=b8)
b9, = sch.get_consumers(block=b2)
l10, l11, l12, l13 = sch.get_loops(block=b9)
l14, l15 = sch.split(loop=l12, factors=[None, 4], preserve_unit_iters=True)
l16, l17 = sch.split(loop=l13, factors=[None, 4], preserve_unit_iters=True)
sch.reorder(l14, l16, l15, l17)
sch.compute_at(block=b2, loop=l16, preserve_unit_loops=True, index=-1)
sch.set_scope(block=b2, buffer_index=0, storage_scope="local")
l18, l19, l20, l21, l22, l23, l24, l25, l26, l27 = sch.get_loops(block=b2)
sch.unroll(loop=l24)
sch.unroll(loop=l25)
sch.unroll(loop=l26)
sch.unroll(loop=l27)
b28, b29 = sch.get_producers(block=b0)
sch.compute_inline(block=b29)
b30, = sch.get_producers(block=b28)
l31, l32, l33, l34, l35, l36 = sch.get_loops(block=b0)
sch.reorder(l33, l34, l31, l32, l35, l36)
sch.unroll(loop=l31)
sch.unroll(loop=l32)
sch.unroll(loop=l35)
sch.unroll(loop=l36)
l37 = sch.fuse(l33, l34, preserve_unit_iters=True)
v38 = sch.sample_categorical(candidates=[32, 64, 128, 256, 512, 1024], probs=[0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666], decision=5)
l39, l40 = sch.split(loop=l37, factors=[None, v38], preserve_unit_iters=True)
sch.bind(loop=l39, thread_axis="blockIdx.x")
sch.bind(loop=l40, thread_axis="threadIdx.x")
b41 = sch.cache_write(block=b0, write_buffer_index=0, storage_scope="local")
sch.reverse_compute_at(block=b41, loop=l40, preserve_unit_loops=True, index=-1)
sch.compute_at(block=b28, loop=l40, preserve_unit_loops=True, index=-1)
sch.set_scope(block=b28, buffer_index=0, storage_scope="local")
sch.compute_inline(block=b30)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSSRRSRS")
l42, l43, l44, l45, l46 = sch.get_loops(block=b1)
v47, v48, v49, v50, v51 = sch.sample_perfect_tile(loop=l42, n=5, max_innermost_factor=64, decision=[1, 1, 1, 3, 2])
l52, l53, l54, l55, l56 = sch.split(loop=l42, factors=[v47, v48, v49, v50, v51], preserve_unit_iters=True)
v57, v58, v59, v60, v61 = sch.sample_perfect_tile(loop=l43, n=5, max_innermost_factor=64, decision=[3, 2, 1, 1, 1])
l62, l63, l64, l65, l66 = sch.split(loop=l43, factors=[v57, v58, v59, v60, v61], preserve_unit_iters=True)
v67, v68, v69, v70, v71 = sch.sample_perfect_tile(loop=l44, n=5, max_innermost_factor=64, decision=[2, 1, 8, 1, 4])
l72, l73, l74, l75, l76 = sch.split(loop=l44, factors=[v67, v68, v69, v70, v71], preserve_unit_iters=True)
v77, v78, v79, v80, v81 = sch.sample_perfect_tile(loop=l45, n=5, max_innermost_factor=64, decision=[28, 2, 4, 1, 14])
l82, l83, l84, l85, l86 = sch.split(loop=l45, factors=[v77, v78, v79, v80, v81], preserve_unit_iters=True)
v87, v88, v89 = sch.sample_perfect_tile(loop=l46, n=3, max_innermost_factor=64, decision=[3, 1, 1])
l90, l91, l92 = sch.split(loop=l46, factors=[v87, v88, v89], preserve_unit_iters=True)
sch.reorder(l52, l62, l72, l82, l53, l63, l73, l83, l54, l64, l74, l84, l90, l91, l55, l65, l75, l85, l92, l56, l66, l76, l86)
l93 = sch.fuse(l52, l62, l72, l82, preserve_unit_iters=True)
sch.bind(loop=l93, thread_axis="blockIdx.x")
l94 = sch.fuse(l53, l63, l73, l83, preserve_unit_iters=True)
sch.bind(loop=l94, thread_axis="vthread.x")
l95 = sch.fuse(l54, l64, l74, l84, preserve_unit_iters=True)
sch.bind(loop=l95, thread_axis="threadIdx.x")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_low_inclusive", ann_val=32)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_high_inclusive", ann_val=1024)
b96 = sch.cache_write(block=b1, write_buffer_index=0, storage_scope="local")
sch.reverse_compute_at(block=b96, loop=l95, preserve_unit_loops=True, index=-1)
b97 = sch.cache_read(block=b1, read_buffer_index=0, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b97, loop=l90, preserve_unit_loops=True, index=-1)
l98, l99, l100, l101, l102, l103, l104, l105 = sch.get_loops(block=b97)
l106 = sch.fuse(l102, l103, l104, l105, preserve_unit_iters=True)
v107 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b97, ann_key="meta_schedule.cooperative_fetch", ann_val=v107)
b108 = sch.cache_read(block=b1, read_buffer_index=1, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b108, loop=l90, preserve_unit_loops=True, index=-1)
l109, l110, l111, l112, l113, l114, l115, l116 = sch.get_loops(block=b108)
l117 = sch.fuse(l113, l114, l115, l116, preserve_unit_iters=True)
v118 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b108, ann_key="meta_schedule.cooperative_fetch", ann_val=v118)
l119 = sch.fuse(l90, preserve_unit_iters=True)
sch.annotate(block_or_loop=l119, ann_key="software_pipeline_stage", ann_val=[0, 0, 2])
sch.annotate(block_or_loop=l119, ann_key="software_pipeline_order", ann_val=[0, 1, 2])
sch.annotate(block_or_loop=l119, ann_key="software_pipeline_async_stages", ann_val=[0])
sch.reverse_compute_inline(block=b5)
sch.reverse_compute_inline(block=b4)
v120 = sch.sample_categorical(candidates=[0, 16, 64, 512, 1024], probs=[0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001], decision=4)
sch.annotate(block_or_loop=b6, ann_key="meta_schedule.unroll_explicit", ann_val=v120)
l121, l122, l123, l124, l125, l126 = sch.get_loops(block=b3)
l127 = sch.fuse(l121, l122, l123, l124, preserve_unit_iters=True)
v128 = sch.sample_categorical(candidates=[32, 64, 128, 256, 512, 1024], probs=[0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666], decision=5)
l129, l130 = sch.split(loop=l127, factors=[None, v128], preserve_unit_iters=True)
sch.bind(loop=l129, thread_axis="blockIdx.x")
sch.bind(loop=l130, thread_axis="threadIdx.x")
sch.enter_postproc()
sch.unannotate(block_or_loop=b97, ann_key="meta_schedule.cooperative_fetch")
l131, l132, l133, l134, l135 = sch.get_loops(block=b97)
l136, l137, l138 = sch.split(loop=l135, factors=[None, 32, 4], preserve_unit_iters=True)
sch.vectorize(loop=l138)
sch.bind(loop=l137, thread_axis="threadIdx.x")
sch.unannotate(block_or_loop=b108, ann_key="meta_schedule.cooperative_fetch")
l139, l140, l141, l142, l143 = sch.get_loops(block=b108)
l144, l145, l146 = sch.split(loop=l143, factors=[None, 32, 4], preserve_unit_iters=True)
sch.vectorize(loop=l146)
sch.bind(loop=l145, thread_axis="threadIdx.x")
b147 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b147, ann_key="meta_schedule.unroll_explicit")
b148, b149, b150, b151, b152, b153, b154, b155, b156 = sch.get_child_blocks(b147)
l157, l158, l159, l160, l161, l162 = sch.get_loops(block=b148)
l163, l164, l165, l166, l167, l168 = sch.get_loops(block=b149)
sch.annotate(block_or_loop=l163, ann_key="pragma_auto_unroll_max_step", ann_val=1024)
sch.annotate(block_or_loop=l163, ann_key="pragma_unroll_explicit", ann_val=1)
l169, l170, l171, l172, l173, l174 = sch.get_loops(block=b150)
l175, l176, l177, l178, l179, l180, l181 = sch.get_loops(block=b151)
l182, l183, l184, l185, l186, l187, l188 = sch.get_loops(block=b152)
l189, l190, l191, l192, l193, l194, l195, l196, l197, l198, l199, l200, l201, l202 = sch.get_loops(block=b153)
sch.annotate(block_or_loop=l189, ann_key="pragma_auto_unroll_max_step", ann_val=1024)
sch.annotate(block_or_loop=l189, ann_key="pragma_unroll_explicit", ann_val=1)
l203, l204, l205, l206, l207, l208, l209 = sch.get_loops(block=b154)
l210, l211, l212, l213, l214, l215, l216, l217 = sch.get_loops(block=b155)
sch.annotate(block_or_loop=l210, ann_key="pragma_auto_unroll_max_step", ann_val=1024)
sch.annotate(block_or_loop=l210, ann_key="pragma_unroll_explicit", ann_val=1)
l218, l219, l220, l221 = sch.get_loops(block=b156)
b222 = sch.get_block(name="data_pack", func_name="main")
l223, l224, l225, l226, l227, l228 = sch.get_loops(block=b222)
b229 = sch.decompose_reduction(block=b222, loop=l227)
b230 = sch.get_block(name="bgemm", func_name="main")
l231, l232, l233, l234, l235, l236, l237, l238, l239, l240, l241, l242, l243, l244 = sch.get_loops(block=b230)
b245 = sch.decompose_reduction(block=b230, loop=l234)
b246 = sch.get_block(name="inverse", func_name="main")
l247, l248, l249, l250, l251, l252, l253, l254 = sch.get_loops(block=b246)
b255 = sch.decompose_reduction(block=b246, loop=l253)
2024-04-29 00:12:37 [INFO] [evolutionary_search.cc:713] Generating candidates......
2024-04-29 00:12:41 [INFO] [evolutionary_search.cc:715] Picked top 102 candidate(s) from database
2024-04-29 00:12:46 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x76c2cc8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x3ab4108)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x87bd5e8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x77043f8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x485cc78)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x3aa5498)]: 394 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x3aad778)]: 0 failure(s)
2024-04-29 00:12:53 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x76c2cc8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x3ab4108)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x87bd5e8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x77043f8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x485cc78)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x3aa5498)]: 777 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x3aad778)]: 0 failure(s)
2024-04-29 00:13:00 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x76c2cc8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x3ab4108)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x87bd5e8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x77043f8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x485cc78)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x3aa5498)]: 1171 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x3aad778)]: 0 failure(s)
2024-04-29 00:13:00 [INFO] [evolutionary_search.cc:723] Sampled 59 candidate(s)
2024-04-29 00:13:19 [INFO] [evolutionary_search.cc:621] Evolve iter #0 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x76c2cc8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x3ab4108)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x87bd5e8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x77043f8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x485cc78)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x3aa5498)]: 55 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x3aad778)]: 0 failure(s)
2024-04-29 00:13:41 [INFO] [evolutionary_search.cc:621] Evolve iter #1 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x76c2cc8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x3ab4108)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x87bd5e8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x77043f8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x485cc78)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x3aa5498)]: 47 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x3aad778)]: 0 failure(s)
2024-04-29 00:14:03 [INFO] [evolutionary_search.cc:621] Evolve iter #2 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x76c2cc8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x3ab4108)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x87bd5e8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x77043f8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x485cc78)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x3aa5498)]: 50 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x3aad778)]: 0 failure(s)
2024-04-29 00:14:25 [INFO] [evolutionary_search.cc:621] Evolve iter #3 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x76c2cc8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x3ab4108)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x87bd5e8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x77043f8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x485cc78)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x3aa5498)]: 37 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x3aad778)]: 0 failure(s)
2024-04-29 00:14:31 [INFO] [evolutionary_search.cc:649] Scores of the best 64 candidates:
[1 : 16]:	1.2359  1.2347  1.1614  1.0289  1.0190  1.0167  1.0161  1.0152  1.0077  1.0069  1.0064  1.0064  1.0045  1.0036  1.0024  1.0021
[17 : 32]:	1.0016  1.0006  1.0000  0.9998  0.9978  0.9976  0.9975  0.9975  0.9975  0.9972  0.9967  0.9957  0.9957  0.9957  0.9951  0.9950
[33 : 48]:	0.9949  0.9947  0.9946  0.9945  0.9938  0.9938  0.9935  0.9935  0.9933  0.9931  0.9930  0.9930  0.9929  0.9927  0.9925  0.9922
[49 : 64]:	0.9922  0.9921  0.9916  0.9908  0.9907  0.9904  0.9904  0.9903  0.9902  0.9900  0.9899  0.9897  0.9893  0.9893  0.9893  0.9890
2024-04-29 00:14:31 [INFO] [evolutionary_search.cc:727] Got 64 candidate(s) with evolutionary search
2024-04-29 00:14:31 [INFO] [evolutionary_search.cc:730] Sending 64 candidates(s) for measurement
2024-04-29 00:15:46 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu] Trial #321: GFLOPs: 6220.5464. Time: 69.6353 us. Best GFLOPs: 7435.5938
2024-04-29 00:15:46 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu] Trial #322: GFLOPs: 7289.6011. Time: 59.4229 us. Best GFLOPs: 7435.5938
2024-04-29 00:15:46 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu] Trial #323: GFLOPs: 7214.3674. Time: 60.0426 us. Best GFLOPs: 7435.5938
2024-04-29 00:15:46 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu] Trial #324: GFLOPs: 7386.0276. Time: 58.6471 us. Best GFLOPs: 7435.5938
2024-04-29 00:15:46 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu] Trial #325: GFLOPs: 7206.1430. Time: 60.1111 us. Best GFLOPs: 7435.5938
2024-04-29 00:15:46 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu] Trial #326: GFLOPs: 7251.1910. Time: 59.7377 us. Best GFLOPs: 7435.5938
2024-04-29 00:15:46 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu] Trial #327: GFLOPs: 7344.4424. Time: 58.9792 us. Best GFLOPs: 7435.5938
2024-04-29 00:15:46 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu] Trial #328: GFLOPs: 7160.8239. Time: 60.4916 us. Best GFLOPs: 7435.5938
2024-04-29 00:15:46 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu] Trial #329: GFLOPs: 7273.2273. Time: 59.5567 us. Best GFLOPs: 7435.5938
2024-04-29 00:15:46 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu] Trial #330: GFLOPs: 6512.3871. Time: 66.5147 us. Best GFLOPs: 7435.5938
2024-04-29 00:15:46 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu] Trial #331: GFLOPs: 7311.2949. Time: 59.2466 us. Best GFLOPs: 7435.5938
2024-04-29 00:15:46 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu] Trial #332: GFLOPs: 7310.6237. Time: 59.2520 us. Best GFLOPs: 7435.5938
2024-04-29 00:15:46 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu] Trial #333: GFLOPs: 7313.4242. Time: 59.2294 us. Best GFLOPs: 7435.5938
2024-04-29 00:15:46 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu] Trial #334: GFLOPs: 7292.0192. Time: 59.4032 us. Best GFLOPs: 7435.5938
2024-04-29 00:15:46 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu] Trial #335: GFLOPs: 7443.5221. Time: 58.1941 us. Best GFLOPs: 7443.5221
2024-04-29 00:15:46 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu] Trial #336: GFLOPs: 7208.9327. Time: 60.0879 us. Best GFLOPs: 7443.5221
2024-04-29 00:15:46 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu] Trial #337: GFLOPs: 7399.3928. Time: 58.5412 us. Best GFLOPs: 7443.5221
2024-04-29 00:15:46 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu] Trial #338: GFLOPs: 7332.7893. Time: 59.0729 us. Best GFLOPs: 7443.5221
2024-04-29 00:15:46 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu] Trial #339: GFLOPs: 7310.4794. Time: 59.2532 us. Best GFLOPs: 7443.5221
2024-04-29 00:15:46 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu] Trial #340: GFLOPs: 7377.0365. Time: 58.7186 us. Best GFLOPs: 7443.5221
2024-04-29 00:15:46 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu] Trial #341: GFLOPs: 7332.1008. Time: 59.0785 us. Best GFLOPs: 7443.5221
2024-04-29 00:15:46 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu] Trial #342: GFLOPs: 7362.0301. Time: 58.8383 us. Best GFLOPs: 7443.5221
2024-04-29 00:15:46 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu] Trial #343: GFLOPs: 7335.3350. Time: 59.0524 us. Best GFLOPs: 7443.5221
2024-04-29 00:15:46 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu] Trial #344: GFLOPs: 7333.2363. Time: 59.0693 us. Best GFLOPs: 7443.5221
2024-04-29 00:15:46 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu] Trial #345: GFLOPs: 7175.4251. Time: 60.3685 us. Best GFLOPs: 7443.5221
2024-04-29 00:15:46 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu] Trial #346: GFLOPs: 7384.5609. Time: 58.6588 us. Best GFLOPs: 7443.5221
2024-04-29 00:15:46 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu] Trial #347: GFLOPs: 7282.4116. Time: 59.4816 us. Best GFLOPs: 7443.5221
2024-04-29 00:15:46 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu] Trial #348: GFLOPs: 7206.9543. Time: 60.1044 us. Best GFLOPs: 7443.5221
2024-04-29 00:15:46 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu] Trial #349: GFLOPs: 7384.3821. Time: 58.6602 us. Best GFLOPs: 7443.5221
2024-04-29 00:15:46 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu] Trial #350: GFLOPs: 7376.2048. Time: 58.7252 us. Best GFLOPs: 7443.5221
2024-04-29 00:15:46 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu] Trial #351: GFLOPs: 7326.1088. Time: 59.1268 us. Best GFLOPs: 7443.5221
2024-04-29 00:15:46 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu] Trial #352: GFLOPs: 7380.8020. Time: 58.6887 us. Best GFLOPs: 7443.5221
2024-04-29 00:15:46 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu] Trial #353: GFLOPs: 6777.2024. Time: 63.9157 us. Best GFLOPs: 7443.5221
2024-04-29 00:15:46 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu] Trial #354: GFLOPs: 7317.6049. Time: 59.1955 us. Best GFLOPs: 7443.5221
2024-04-29 00:15:46 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu] Trial #355: GFLOPs: 7384.4306. Time: 58.6598 us. Best GFLOPs: 7443.5221
2024-04-29 00:15:46 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu] Trial #356: GFLOPs: 7374.9138. Time: 58.7355 us. Best GFLOPs: 7443.5221
2024-04-29 00:15:46 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu] Trial #357: GFLOPs: 7265.3180. Time: 59.6215 us. Best GFLOPs: 7443.5221
2024-04-29 00:15:46 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu] Trial #358: GFLOPs: 7404.4747. Time: 58.5010 us. Best GFLOPs: 7443.5221
2024-04-29 00:15:46 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu] Trial #359: GFLOPs: 7389.4149. Time: 58.6203 us. Best GFLOPs: 7443.5221
2024-04-29 00:15:46 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu] Trial #360: GFLOPs: 7389.4608. Time: 58.6199 us. Best GFLOPs: 7443.5221
2024-04-29 00:15:46 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu] Trial #361: GFLOPs: 7347.0343. Time: 58.9584 us. Best GFLOPs: 7443.5221
2024-04-29 00:15:46 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu] Trial #362: GFLOPs: 7289.2428. Time: 59.4258 us. Best GFLOPs: 7443.5221
2024-04-29 00:15:46 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu] Trial #363: GFLOPs: 7364.0915. Time: 58.8218 us. Best GFLOPs: 7443.5221
2024-04-29 00:15:46 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu] Trial #364: GFLOPs: 7322.4689. Time: 59.1562 us. Best GFLOPs: 7443.5221
2024-04-29 00:15:46 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu] Trial #365: GFLOPs: 7332.5611. Time: 59.0748 us. Best GFLOPs: 7443.5221
2024-04-29 00:15:46 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu] Trial #366: GFLOPs: 7334.0262. Time: 59.0630 us. Best GFLOPs: 7443.5221
2024-04-29 00:15:46 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu] Trial #367: GFLOPs: 7449.6797. Time: 58.1460 us. Best GFLOPs: 7449.6797
2024-04-29 00:15:46 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu] Trial #368: GFLOPs: 7219.9057. Time: 59.9965 us. Best GFLOPs: 7449.6797
2024-04-29 00:15:46 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu] Trial #369: GFLOPs: 7382.6402. Time: 58.6741 us. Best GFLOPs: 7449.6797
2024-04-29 00:15:46 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu] Trial #370: GFLOPs: 7292.8527. Time: 59.3964 us. Best GFLOPs: 7449.6797
2024-04-29 00:15:46 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu] Trial #371: GFLOPs: 6559.3028. Time: 66.0389 us. Best GFLOPs: 7449.6797
2024-04-29 00:15:46 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu] Trial #372: GFLOPs: 7266.3063. Time: 59.6134 us. Best GFLOPs: 7449.6797
2024-04-29 00:15:46 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu] Trial #373: GFLOPs: 7283.3301. Time: 59.4741 us. Best GFLOPs: 7449.6797
2024-04-29 00:15:46 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu] Trial #374: GFLOPs: 7395.8028. Time: 58.5696 us. Best GFLOPs: 7449.6797
2024-04-29 00:15:46 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu] Trial #375: GFLOPs: 7351.4459. Time: 58.9230 us. Best GFLOPs: 7449.6797
2024-04-29 00:15:46 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu] Trial #376: GFLOPs: 7356.7947. Time: 58.8802 us. Best GFLOPs: 7449.6797
2024-04-29 00:15:46 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu] Trial #377: GFLOPs: 6850.3280. Time: 63.2334 us. Best GFLOPs: 7449.6797
2024-04-29 00:15:46 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu] Trial #378: GFLOPs: 7456.2467. Time: 58.0948 us. Best GFLOPs: 7456.2467
2024-04-29 00:15:46 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu] Trial #379: GFLOPs: 7331.1777. Time: 59.0859 us. Best GFLOPs: 7456.2467
2024-04-29 00:15:46 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu] Trial #380: GFLOPs: 7302.0637. Time: 59.3215 us. Best GFLOPs: 7456.2467
2024-04-29 00:15:46 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu] Trial #381: GFLOPs: 7290.9938. Time: 59.4116 us. Best GFLOPs: 7456.2467
2024-04-29 00:15:46 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu] Trial #382: GFLOPs: 5483.6518. Time: 78.9929 us. Best GFLOPs: 7456.2467
2024-04-29 00:15:46 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu] Trial #383: GFLOPs: 2262.6769. Time: 191.4411 us. Best GFLOPs: 7456.2467
2024-04-29 00:15:46 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu] Trial #384: GFLOPs: 1347.2735. Time: 321.5156 us. Best GFLOPs: 7456.2467
2024-04-29 00:47:04 [INFO] [evolutionary_search.cc:713] Generating candidates......
2024-04-29 00:47:08 [INFO] [evolutionary_search.cc:715] Picked top 102 candidate(s) from database
2024-04-29 00:47:14 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x76c2cc8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x3ab4108)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x87bd5e8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x77043f8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x485cc78)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x3aa5498)]: 387 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x3aad778)]: 0 failure(s)
2024-04-29 00:47:21 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x76c2cc8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x3ab4108)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x87bd5e8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x77043f8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x485cc78)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x3aa5498)]: 775 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x3aad778)]: 0 failure(s)
2024-04-29 00:47:28 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x76c2cc8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x3ab4108)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x87bd5e8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x77043f8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x485cc78)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x3aa5498)]: 1164 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x3aad778)]: 0 failure(s)
2024-04-29 00:47:28 [INFO] [evolutionary_search.cc:723] Sampled 66 candidate(s)
2024-04-29 00:47:48 [INFO] [evolutionary_search.cc:621] Evolve iter #0 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x76c2cc8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x3ab4108)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x87bd5e8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x77043f8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x485cc78)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x3aa5498)]: 36 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x3aad778)]: 0 failure(s)
2024-04-29 00:48:10 [INFO] [evolutionary_search.cc:621] Evolve iter #1 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x76c2cc8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x3ab4108)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x87bd5e8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x77043f8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x485cc78)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x3aa5498)]: 38 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x3aad778)]: 0 failure(s)
2024-04-29 00:48:33 [INFO] [evolutionary_search.cc:621] Evolve iter #2 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x76c2cc8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x3ab4108)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x87bd5e8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x77043f8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x485cc78)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x3aa5498)]: 42 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x3aad778)]: 0 failure(s)
2024-04-29 00:48:55 [INFO] [evolutionary_search.cc:621] Evolve iter #3 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x76c2cc8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x3ab4108)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x87bd5e8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x77043f8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x485cc78)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x3aa5498)]: 44 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x3aad778)]: 0 failure(s)
2024-04-29 00:49:01 [INFO] [evolutionary_search.cc:649] Scores of the best 64 candidates:
[1 : 16]:	1.6478  1.6448  1.6448  1.6330  1.5754  1.4651  1.4010  1.4010  1.3642  1.3541  1.3524  1.3347  1.2498  1.2426  1.2291  1.2279
[17 : 32]:	1.2204  1.2061  1.1418  1.1106  1.1017  1.0804  1.0755  1.0601  1.0570  1.0444  1.0444  1.0422  1.0377  1.0351  1.0340  1.0302
[33 : 48]:	1.0271  1.0265  1.0263  1.0247  1.0221  1.0212  1.0203  1.0202  1.0201  1.0199  1.0184  1.0179  1.0176  1.0165  1.0159  1.0136
[49 : 64]:	1.0136  1.0131  1.0125  1.0105  1.0097  1.0076  1.0065  1.0061  1.0059  1.0056  1.0052  1.0046  1.0027  1.0022  1.0008  1.0008
2024-04-29 00:49:01 [INFO] [evolutionary_search.cc:727] Got 64 candidate(s) with evolutionary search
2024-04-29 00:49:01 [INFO] [evolutionary_search.cc:730] Sending 64 candidates(s) for measurement
2024-04-29 00:50:33 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu] Trial #385: GFLOPs: 876.5817. Time: 494.1575 us. Best GFLOPs: 7456.2467
2024-04-29 00:50:33 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu] Trial #386: GFLOPs: 915.7491. Time: 473.0219 us. Best GFLOPs: 7456.2467
2024-04-29 00:50:33 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu] Trial #387: GFLOPs: 921.2429. Time: 470.2011 us. Best GFLOPs: 7456.2467
2024-04-29 00:50:33 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu] Trial #388: GFLOPs: 912.0526. Time: 474.9391 us. Best GFLOPs: 7456.2467
2024-04-29 00:50:33 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu] Trial #389: GFLOPs: 873.1364. Time: 496.1074 us. Best GFLOPs: 7456.2467
2024-04-29 00:50:33 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu] Trial #390: GFLOPs: 121.7231. Time: 3558.6471 us. Best GFLOPs: 7456.2467
2024-04-29 00:50:33 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu] Trial #391: GFLOPs: 731.6386. Time: 592.0538 us. Best GFLOPs: 7456.2467
2024-04-29 00:50:33 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu] Trial #392: GFLOPs: 730.1218. Time: 593.2838 us. Best GFLOPs: 7456.2467
2024-04-29 00:50:33 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu] Trial #393: GFLOPs: 915.4179. Time: 473.1931 us. Best GFLOPs: 7456.2467
2024-04-29 00:50:33 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu] Trial #394: GFLOPs: 915.6212. Time: 473.0880 us. Best GFLOPs: 7456.2467
2024-04-29 00:50:33 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu] Trial #395: GFLOPs: 933.9169. Time: 463.8201 us. Best GFLOPs: 7456.2467
2024-04-29 00:50:33 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu] Trial #396: GFLOPs: 724.4475. Time: 597.9307 us. Best GFLOPs: 7456.2467
2024-04-29 00:50:33 [INFO] [task_scheduler.cc:121] [Task #0: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu] Trial #397: Error in building:
LocalBuilder: Timeout, killed after 30.0 seconds
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(3), T.int64(224), T.int64(224)), "float32"), p1: T.Buffer((T.int64(6), T.int64(6), T.int64(3), T.int64(64)), "float32"), p2: T.Buffer((T.int64(1), T.int64(64), T.int64(1), T.int64(1)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(64), T.int64(224), T.int64(224)), "float32")):
        T.func_attr({"layout_free_buffers": [1], "tir.noalias": T.bool(True)})
        # with T.block("root"):
        input_tile_local = T.alloc_buffer((T.int64(3), T.int64(3136), T.int64(6), T.int64(6)), scope="local")
        data_pack = T.alloc_buffer((T.int64(6), T.int64(6), T.int64(3), T.int64(3136)))
        bgemm = T.alloc_buffer((T.int64(6), T.int64(6), T.int64(64), T.int64(3136)))
        inverse_local = T.alloc_buffer((T.int64(64), T.int64(3136), T.int64(4), T.int64(4)), scope="local")
        data_pack_local = T.alloc_buffer((T.int64(6), T.int64(6), T.int64(3), T.int64(3136)), scope="local")
        bgemm_local = T.alloc_buffer((T.int64(6), T.int64(6), T.int64(64), T.int64(3136)), scope="local")
        data_pack_shared = T.alloc_buffer((T.int64(6), T.int64(6), T.int64(3), T.int64(3136)), scope="shared")
        p1_shared = T.alloc_buffer((T.int64(6), T.int64(6), T.int64(3), T.int64(64)), scope="shared")
        for ci_p_fused_0 in T.thread_binding(T.int64(74), thread="blockIdx.x", annotations={"pragma_auto_unroll_max_step": 1024, "pragma_unroll_explicit": 1}):
            for ci_p_fused_1 in T.thread_binding(T.int64(128), thread="threadIdx.x"):
                for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(1), T.int64(6), T.int64(6)):
                    with T.block("input_tile"):
                        v_ci = T.axis.spatial(T.int64(3), (ci_p_fused_0 * T.int64(128) + ci_p_fused_1) // T.int64(3136) + ax0)
                        v_p = T.axis.spatial(T.int64(3136), (ci_p_fused_0 * T.int64(128) + ci_p_fused_1) % T.int64(3136) + ax1)
                        v_eps, v_nu = T.axis.remap("SS", [ax2, ax3])
                        T.where(ci_p_fused_0 * T.int64(128) + ci_p_fused_1 < T.int64(9408))
                        T.reads(p0[v_p // T.int64(3136), v_ci, v_p % T.int64(3136) // T.int64(56) * T.int64(4) + v_eps - T.int64(1), v_p % T.int64(56) * T.int64(4) + v_nu - T.int64(1)])
                        T.writes(input_tile_local[v_ci, v_p, v_eps, v_nu])
                        T.block_attr({"schedule_rule": "None"})
                        input_tile_local[v_ci, v_p, v_eps, v_nu] = T.if_then_else(T.int64(1) <= v_p % T.int64(3136) // T.int64(56) * T.int64(4) + v_eps and v_p % T.int64(3136) // T.int64(56) * T.int64(4) + v_eps < T.int64(225) and T.int64(1) <= v_p % T.int64(56) * T.int64(4) + v_nu and v_p % T.int64(56) * T.int64(4) + v_nu < T.int64(225), p0[v_p // T.int64(3136), v_ci, v_p % T.int64(3136) // T.int64(56) * T.int64(4) + v_eps - T.int64(1), v_p % T.int64(56) * T.int64(4) + v_nu - T.int64(1)], T.float32(0))
                for eps in T.unroll(T.int64(6)):
                    for nu in T.unroll(T.int64(6)):
                        with T.block("data_pack_init"):
                            v_eps, v_nu = T.axis.remap("SS", [eps, nu])
                            v_ci = T.axis.spatial(T.int64(3), (ci_p_fused_0 * T.int64(128) + ci_p_fused_1) // T.int64(3136))
                            v_p = T.axis.spatial(T.int64(3136), (ci_p_fused_0 * T.int64(128) + ci_p_fused_1) % T.int64(3136))
                            T.where(ci_p_fused_0 * T.int64(128) + ci_p_fused_1 < T.int64(9408))
                            T.reads()
                            T.writes(data_pack_local[v_eps, v_nu, v_ci, v_p])
                            T.block_attr({"schedule_rule": "conv2d_nchw_winograd_data_pack"})
                            data_pack_local[v_eps, v_nu, v_ci, v_p] = T.float32(0)
                        for r_a in T.unroll(T.int64(6)):
                            for r_b in T.unroll(T.int64(6)):
                                with T.block("data_pack_update"):
                                    v_eps, v_nu = T.axis.remap("SS", [eps, nu])
                                    v_ci = T.axis.spatial(T.int64(3), (ci_p_fused_0 * T.int64(128) + ci_p_fused_1) // T.int64(3136))
                                    v_p = T.axis.spatial(T.int64(3136), (ci_p_fused_0 * T.int64(128) + ci_p_fused_1) % T.int64(3136))
                                    v_r_a, v_r_b = T.axis.remap("RR", [r_a, r_b])
                                    T.where(ci_p_fused_0 * T.int64(128) + ci_p_fused_1 < T.int64(9408))
                                    T.reads(data_pack_local[v_eps, v_nu, v_ci, v_p], input_tile_local[v_ci, v_p, v_r_a, v_r_b])
                                    T.writes(data_pack_local[v_eps, v_nu, v_ci, v_p])
                                    T.block_attr({"schedule_rule": "conv2d_nchw_winograd_data_pack"})
                                    data_pack_local[v_eps, v_nu, v_ci, v_p] = data_pack_local[v_eps, v_nu, v_ci, v_p] + input_tile_local[v_ci, v_p, v_r_a, v_r_b] * T.Select(v_r_a % T.int64(6) == T.int64(5) and v_eps % T.int64(6) == T.int64(5), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(5) and v_eps % T.int64(6) == T.int64(4), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(5) and v_eps % T.int64(6) == T.int64(3), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(5) and v_eps % T.int64(6) == T.int64(2), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(5) and v_eps % T.int64(6) == T.int64(1), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(5) and v_eps % T.int64(6) == T.int64(0), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(4) and v_eps % T.int64(6) == T.int64(5), T.float32(1.5), T.Select(v_r_a % T.int64(6) == T.int64(4) and v_eps % T.int64(6) == T.int64(4), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(4) and v_eps % T.int64(6) == T.int64(3), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(4) and v_eps % T.int64(6) == T.int64(2), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(4) and v_eps % T.int64(6) == T.int64(1), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(4) and v_eps % T.int64(6) == T.int64(0), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(3) and v_eps % T.int64(6) == T.int64(5), T.float32(-2), T.Select(v_r_a % T.int64(6) == T.int64(3) and v_eps % T.int64(6) == T.int64(4), T.float32(-0.5), T.Select(v_r_a % T.int64(6) == T.int64(3) and v_eps % T.int64(6) == T.int64(3), T.float32(2), T.Select(v_r_a % T.int64(6) == T.int64(3) and v_eps % T.int64(6) == T.int64(2), T.float32(2.5), T.Select(v_r_a % T.int64(6) == T.int64(3) and v_eps % T.int64(6) == T.int64(1), T.float32(0.5), T.Select(v_r_a % T.int64(6) == T.int64(3) and v_eps % T.int64(6) == T.int64(0), T.float32(1.5), T.Select(v_r_a % T.int64(6) == T.int64(2) and v_eps % T.int64(6) == T.int64(5), T.float32(-1.5), T.Select(v_r_a % T.int64(6) == T.int64(2) and v_eps % T.int64(6) == T.int64(4), T.float32(-1), T.Select(v_r_a % T.int64(6) == T.int64(2) and v_eps % T.int64(6) == T.int64(3), T.float32(-1), T.Select(v_r_a % T.int64(6) == T.int64(2) and v_eps % T.int64(6) == T.int64(2), T.float32(0.5), T.Select(v_r_a % T.int64(6) == T.int64(2) and v_eps % T.int64(6) == T.int64(1), T.float32(-2.5), T.Select(v_r_a % T.int64(6) == T.int64(2) and v_eps % T.int64(6) == T.int64(0), T.float32(-2), T.Select(v_r_a % T.int64(6) == T.int64(1) and v_eps % T.int64(6) == T.int64(5), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(1) and v_eps % T.int64(6) == T.int64(4), T.float32(0.5), T.Select(v_r_a % T.int64(6) == T.int64(1) and v_eps % T.int64(6) == T.int64(3), T.float32(-2), T.Select(v_r_a % T.int64(6) == T.int64(1) and v_eps % T.int64(6) == T.int64(2), T.float32(-1), T.Select(v_r_a % T.int64(6) == T.int64(1) and v_eps % T.int64(6) == T.int64(1), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(1) and v_eps % T.int64(6) == T.int64(0), T.float32(-1.5), T.Select(v_r_a % T.int64(6) == T.int64(0) and v_eps % T.int64(6) == T.int64(5), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(0) and v_eps % T.int64(6) == T.int64(4), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(0) and v_eps % T.int64(6) == T.int64(3), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(0) and v_eps % T.int64(6) == T.int64(2), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(0) and v_eps % T.int64(6) == T.int64(1), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(0) and v_eps % T.int64(6) == T.int64(0), T.float32(1), T.float32(0))))))))))))))))))))))))))))))))))))) * T.Select(v_r_b % T.int64(6) == T.int64(5) and v_nu % T.int64(6) == T.int64(5), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(5) and v_nu % T.int64(6) == T.int64(4), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(5) and v_nu % T.int64(6) == T.int64(3), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(5) and v_nu % T.int64(6) == T.int64(2), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(5) and v_nu % T.int64(6) == T.int64(1), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(5) and v_nu % T.int64(6) == T.int64(0), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(4) and v_nu % T.int64(6) == T.int64(5), T.float32(1.5), T.Select(v_r_b % T.int64(6) == T.int64(4) and v_nu % T.int64(6) == T.int64(4), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(4) and v_nu % T.int64(6) == T.int64(3), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(4) and v_nu % T.int64(6) == T.int64(2), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(4) and v_nu % T.int64(6) == T.int64(1), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(4) and v_nu % T.int64(6) == T.int64(0), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(3) and v_nu % T.int64(6) == T.int64(5), T.float32(-2), T.Select(v_r_b % T.int64(6) == T.int64(3) and v_nu % T.int64(6) == T.int64(4), T.float32(-0.5), T.Select(v_r_b % T.int64(6) == T.int64(3) and v_nu % T.int64(6) == T.int64(3), T.float32(2), T.Select(v_r_b % T.int64(6) == T.int64(3) and v_nu % T.int64(6) == T.int64(2), T.float32(2.5), T.Select(v_r_b % T.int64(6) == T.int64(3) and v_nu % T.int64(6) == T.int64(1), T.float32(0.5), T.Select(v_r_b % T.int64(6) == T.int64(3) and v_nu % T.int64(6) == T.int64(0), T.float32(1.5), T.Select(v_r_b % T.int64(6) == T.int64(2) and v_nu % T.int64(6) == T.int64(5), T.float32(-1.5), T.Select(v_r_b % T.int64(6) == T.int64(2) and v_nu % T.int64(6) == T.int64(4), T.float32(-1), T.Select(v_r_b % T.int64(6) == T.int64(2) and v_nu % T.int64(6) == T.int64(3), T.float32(-1), T.Select(v_r_b % T.int64(6) == T.int64(2) and v_nu % T.int64(6) == T.int64(2), T.float32(0.5), T.Select(v_r_b % T.int64(6) == T.int64(2) and v_nu % T.int64(6) == T.int64(1), T.float32(-2.5), T.Select(v_r_b % T.int64(6) == T.int64(2) and v_nu % T.int64(6) == T.int64(0), T.float32(-2), T.Select(v_r_b % T.int64(6) == T.int64(1) and v_nu % T.int64(6) == T.int64(5), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(1) and v_nu % T.int64(6) == T.int64(4), T.float32(0.5), T.Select(v_r_b % T.int64(6) == T.int64(1) and v_nu % T.int64(6) == T.int64(3), T.float32(-2), T.Select(v_r_b % T.int64(6) == T.int64(1) and v_nu % T.int64(6) == T.int64(2), T.float32(-1), T.Select(v_r_b % T.int64(6) == T.int64(1) and v_nu % T.int64(6) == T.int64(1), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(1) and v_nu % T.int64(6) == T.int64(0), T.float32(-1.5), T.Select(v_r_b % T.int64(6) == T.int64(0) and v_nu % T.int64(6) == T.int64(5), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(0) and v_nu % T.int64(6) == T.int64(4), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(0) and v_nu % T.int64(6) == T.int64(3), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(0) and v_nu % T.int64(6) == T.int64(2), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(0) and v_nu % T.int64(6) == T.int64(1), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(0) and v_nu % T.int64(6) == T.int64(0), T.float32(1), T.float32(0)))))))))))))))))))))))))))))))))))))
                for ax0, ax1, ax2, ax3 in T.grid(T.int64(6), T.int64(6), T.int64(1), T.int64(1)):
                    with T.block("data_pack_local"):
                        v0, v1 = T.axis.remap("SS", [ax0, ax1])
                        v2 = T.axis.spatial(T.int64(3), (ci_p_fused_0 * T.int64(128) + ci_p_fused_1) // T.int64(3136) + ax2)
                        v3 = T.axis.spatial(T.int64(3136), (ci_p_fused_0 * T.int64(128) + ci_p_fused_1) % T.int64(3136) + ax3)
                        T.where(ci_p_fused_0 * T.int64(128) + ci_p_fused_1 < T.int64(9408))
                        T.reads(data_pack_local[v0, v1, v2, v3])
                        T.writes(data_pack[v0, v1, v2, v3])
                        data_pack[v0, v1, v2, v3] = data_pack_local[v0, v1, v2, v3]
        for eps_0_nu_0_co_0_p_0_fused in T.thread_binding(T.int64(28), thread="blockIdx.x", annotations={"pragma_auto_unroll_max_step": 1024, "pragma_unroll_explicit": 1}):
            for eps_1_nu_1_co_1_p_1_fused in T.thread_binding(T.int64(6), thread="vthread.x"):
                for eps_2_nu_2_co_2_p_2_fused in T.thread_binding(T.int64(32), thread="threadIdx.x"):
                    for eps_3_init, nu_3_init, co_3_init, p_3_init, eps_4_init, nu_4_init, co_4_init, p_4_init in T.grid(T.int64(3), T.int64(1), T.int64(4), T.int64(7), T.int64(1), T.int64(1), T.int64(1), T.int64(16)):
                        with T.block("bgemm_init"):
                            v_eps = T.axis.spatial(T.int64(6), eps_1_nu_1_co_1_p_1_fused // T.int64(3) * T.int64(3) + eps_3_init + eps_4_init)
                            v_nu = T.axis.spatial(T.int64(6), eps_1_nu_1_co_1_p_1_fused % T.int64(3) * T.int64(2) + eps_2_nu_2_co_2_p_2_fused // T.int64(16) + nu_3_init + nu_4_init)
                            v_co = T.axis.spatial(T.int64(64), eps_2_nu_2_co_2_p_2_fused % T.int64(16) * T.int64(4) + co_3_init + co_4_init)
                            v_p = T.axis.spatial(T.int64(3136), eps_0_nu_0_co_0_p_0_fused * T.int64(112) + p_3_init * T.int64(16) + p_4_init)
                            T.reads()
                            T.writes(bgemm_local[v_eps, v_nu, v_co, v_p])
                            T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 32, "meta_schedule.tiling_structure": "SSSRRSRS"})
                            bgemm_local[v_eps, v_nu, v_co, v_p] = T.float32(0)
                    for ci_0 in range(T.int64(3)):
                        for ax0_ax1_ax2_ax3_fused_0 in range(T.int64(63)):
                            for ax0_ax1_ax2_ax3_fused_1 in T.thread_binding(T.int64(32), thread="threadIdx.x"):
                                for ax0_ax1_ax2_ax3_fused_2 in T.vectorized(T.int64(2)):
                                    with T.block("data_pack_shared"):
                                        v0 = T.axis.spatial(T.int64(6), (ax0_ax1_ax2_ax3_fused_0 * T.int64(64) + ax0_ax1_ax2_ax3_fused_1 * T.int64(2) + ax0_ax1_ax2_ax3_fused_2) // T.int64(672))
                                        v1 = T.axis.spatial(T.int64(6), (ax0_ax1_ax2_ax3_fused_0 * T.int64(64) + ax0_ax1_ax2_ax3_fused_1 * T.int64(2) + ax0_ax1_ax2_ax3_fused_2) % T.int64(672) // T.int64(112))
                                        v2 = T.axis.spatial(T.int64(3), ci_0)
                                        v3 = T.axis.spatial(T.int64(3136), eps_0_nu_0_co_0_p_0_fused * T.int64(112) + (ax0_ax1_ax2_ax3_fused_0 * T.int64(64) + ax0_ax1_ax2_ax3_fused_1 * T.int64(2) + ax0_ax1_ax2_ax3_fused_2) % T.int64(112))
                                        T.reads(data_pack[v0, v1, v2, v3])
                                        T.writes(data_pack_shared[v0, v1, v2, v3])
                                        data_pack_shared[v0, v1, v2, v3] = data_pack[v0, v1, v2, v3]
                        for ax0_ax1_ax2_ax3_fused_0 in range(T.int64(18)):
                            for ax0_ax1_ax2_ax3_fused_1 in T.thread_binding(T.int64(32), thread="threadIdx.x"):
                                for ax0_ax1_ax2_ax3_fused_2 in T.vectorized(T.int64(4)):
                                    with T.block("p1_shared"):
                                        v0 = T.axis.spatial(T.int64(6), (ax0_ax1_ax2_ax3_fused_0 * T.int64(128) + ax0_ax1_ax2_ax3_fused_1 * T.int64(4) + ax0_ax1_ax2_ax3_fused_2) // T.int64(384))
                                        v1 = T.axis.spatial(T.int64(6), (ax0_ax1_ax2_ax3_fused_0 * T.int64(128) + ax0_ax1_ax2_ax3_fused_1 * T.int64(4) + ax0_ax1_ax2_ax3_fused_2) % T.int64(384) // T.int64(64))
                                        v2 = T.axis.spatial(T.int64(3), ci_0)
                                        v3 = T.axis.spatial(T.int64(64), (ax0_ax1_ax2_ax3_fused_0 * T.int64(128) + ax0_ax1_ax2_ax3_fused_1 * T.int64(4) + ax0_ax1_ax2_ax3_fused_2) % T.int64(64))
                                        T.reads(p1[v0, v1, v2, v3])
                                        T.writes(p1_shared[v0, v1, v2, v3])
                                        p1_shared[v0, v1, v2, v3] = p1[v0, v1, v2, v3]
                        for ci_1, eps_3, nu_3, co_3, p_3, ci_2, eps_4, nu_4, co_4, p_4 in T.grid(T.int64(1), T.int64(3), T.int64(1), T.int64(4), T.int64(7), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(16)):
                            with T.block("bgemm_update"):
                                v_eps = T.axis.spatial(T.int64(6), eps_1_nu_1_co_1_p_1_fused // T.int64(3) * T.int64(3) + eps_3 + eps_4)
                                v_nu = T.axis.spatial(T.int64(6), eps_1_nu_1_co_1_p_1_fused % T.int64(3) * T.int64(2) + eps_2_nu_2_co_2_p_2_fused // T.int64(16) + nu_3 + nu_4)
                                v_co = T.axis.spatial(T.int64(64), eps_2_nu_2_co_2_p_2_fused % T.int64(16) * T.int64(4) + co_3 + co_4)
                                v_p = T.axis.spatial(T.int64(3136), eps_0_nu_0_co_0_p_0_fused * T.int64(112) + p_3 * T.int64(16) + p_4)
                                v_ci = T.axis.reduce(T.int64(3), ci_0 + ci_1 + ci_2)
                                T.reads(bgemm_local[v_eps, v_nu, v_co, v_p], data_pack_shared[v_eps, v_nu, v_ci, v_p], p1_shared[v_eps, v_nu, v_ci, v_co])
                                T.writes(bgemm_local[v_eps, v_nu, v_co, v_p])
                                T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 32, "meta_schedule.tiling_structure": "SSSRRSRS"})
                                bgemm_local[v_eps, v_nu, v_co, v_p] = bgemm_local[v_eps, v_nu, v_co, v_p] + data_pack_shared[v_eps, v_nu, v_ci, v_p] * p1_shared[v_eps, v_nu, v_ci, v_co]
                    for ax0, ax1, ax2, ax3 in T.grid(T.int64(3), T.int64(1), T.int64(4), T.int64(112)):
                        with T.block("bgemm_local"):
                            v0 = T.axis.spatial(T.int64(6), eps_1_nu_1_co_1_p_1_fused // T.int64(3) * T.int64(3) + ax0)
                            v1 = T.axis.spatial(T.int64(6), eps_1_nu_1_co_1_p_1_fused % T.int64(3) * T.int64(2) + eps_2_nu_2_co_2_p_2_fused // T.int64(16) + ax1)
                            v2 = T.axis.spatial(T.int64(64), eps_2_nu_2_co_2_p_2_fused % T.int64(16) * T.int64(4) + ax2)
                            v3 = T.axis.spatial(T.int64(3136), eps_0_nu_0_co_0_p_0_fused * T.int64(112) + ax3)
                            T.reads(bgemm_local[v0, v1, v2, v3])
                            T.writes(bgemm[v0, v1, v2, v3])
                            bgemm[v0, v1, v2, v3] = bgemm_local[v0, v1, v2, v3]
        for n_co_h_0_w_0_fused_0 in T.thread_binding(T.int64(784), thread="blockIdx.x", annotations={"pragma_auto_unroll_max_step": 1024, "pragma_unroll_explicit": 1}):
            for n_co_h_0_w_0_fused_1 in T.thread_binding(T.int64(256), thread="threadIdx.x"):
                for ax0, ax1 in T.grid(T.int64(1), T.int64(1)):
                    for ax2 in T.unroll(T.int64(4)):
                        for ax3 in T.unroll(T.int64(4)):
                            with T.block("inverse_init"):
                                v_co = T.axis.spatial(T.int64(64), (n_co_h_0_w_0_fused_0 * T.int64(256) + n_co_h_0_w_0_fused_1) // T.int64(3136) + ax0)
                                v_p = T.axis.spatial(T.int64(3136), (n_co_h_0_w_0_fused_0 * T.int64(256) + n_co_h_0_w_0_fused_1) % T.int64(3136) + ax1)
                                v_vh, v_vw = T.axis.remap("SS", [ax2, ax3])
                                T.reads()
                                T.writes(inverse_local[v_co, v_p, v_vh, v_vw])
                                T.block_attr({"schedule_rule": "conv2d_nchw_winograd_inverse"})
                                inverse_local[v_co, v_p, v_vh, v_vw] = T.float32(0)
                            for ax4 in T.unroll(T.int64(6)):
                                for ax5 in T.unroll(T.int64(6)):
                                    with T.block("inverse_update"):
                                        v_co = T.axis.spatial(T.int64(64), (n_co_h_0_w_0_fused_0 * T.int64(256) + n_co_h_0_w_0_fused_1) // T.int64(3136) + ax0)
                                        v_p = T.axis.spatial(T.int64(3136), (n_co_h_0_w_0_fused_0 * T.int64(256) + n_co_h_0_w_0_fused_1) % T.int64(3136) + ax1)
                                        v_vh, v_vw, v_r_a, v_r_b = T.axis.remap("SSRR", [ax2, ax3, ax4, ax5])
                                        T.reads(inverse_local[v_co, v_p, v_vh, v_vw], bgemm[v_r_a, v_r_b, v_co, v_p])
                                        T.writes(inverse_local[v_co, v_p, v_vh, v_vw])
                                        T.block_attr({"schedule_rule": "conv2d_nchw_winograd_inverse"})
                                        inverse_local[v_co, v_p, v_vh, v_vw] = inverse_local[v_co, v_p, v_vh, v_vw] + bgemm[v_r_a, v_r_b, v_co, v_p] * T.Select(v_r_a % T.int64(6) == T.int64(5) and v_vh % T.int64(4) == T.int64(3), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(5) and v_vh % T.int64(4) == T.int64(2), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(5) and v_vh % T.int64(4) == T.int64(1), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(5) and v_vh % T.int64(4) == T.int64(0), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(4) and v_vh % T.int64(4) == T.int64(3), T.float32(-8), T.Select(v_r_a % T.int64(6) == T.int64(4) and v_vh % T.int64(4) == T.int64(2), T.float32(4), T.Select(v_r_a % T.int64(6) == T.int64(4) and v_vh % T.int64(4) == T.int64(1), T.float32(-2), T.Select(v_r_a % T.int64(6) == T.int64(4) and v_vh % T.int64(4) == T.int64(0), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(3) and v_vh % T.int64(4) == T.int64(3), T.float32(0.125), T.Select(v_r_a % T.int64(6) == T.int64(3) and v_vh % T.int64(4) == T.int64(2), T.float32(0.25), T.Select(v_r_a % T.int64(6) == T.int64(3) and v_vh % T.int64(4) == T.int64(1), T.float32(0.5), T.Select(v_r_a % T.int64(6) == T.int64(3) and v_vh % T.int64(4) == T.int64(0), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(2) and v_vh % T.int64(4) == T.int64(3), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(2) and v_vh % T.int64(4) == T.int64(2), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(2) and v_vh % T.int64(4) == T.int64(1), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(2) and v_vh % T.int64(4) == T.int64(0), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(1) and v_vh % T.int64(4) == T.int64(3), T.float32(-1), T.Select(v_r_a % T.int64(6) == T.int64(1) and v_vh % T.int64(4) == T.int64(2), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(1) and v_vh % T.int64(4) == T.int64(1), T.float32(-1), T.Select(v_r_a % T.int64(6) == T.int64(1) and v_vh % T.int64(4) == T.int64(0), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(0) and v_vh % T.int64(4) == T.int64(3), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(0) and v_vh % T.int64(4) == T.int64(2), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(0) and v_vh % T.int64(4) == T.int64(1), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(0) and v_vh % T.int64(4) == T.int64(0), T.float32(1), T.float32(0))))))))))))))))))))))))) * T.Select(v_r_b % T.int64(6) == T.int64(5) and v_vw % T.int64(4) == T.int64(3), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(5) and v_vw % T.int64(4) == T.int64(2), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(5) and v_vw % T.int64(4) == T.int64(1), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(5) and v_vw % T.int64(4) == T.int64(0), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(4) and v_vw % T.int64(4) == T.int64(3), T.float32(-8), T.Select(v_r_b % T.int64(6) == T.int64(4) and v_vw % T.int64(4) == T.int64(2), T.float32(4), T.Select(v_r_b % T.int64(6) == T.int64(4) and v_vw % T.int64(4) == T.int64(1), T.float32(-2), T.Select(v_r_b % T.int64(6) == T.int64(4) and v_vw % T.int64(4) == T.int64(0), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(3) and v_vw % T.int64(4) == T.int64(3), T.float32(0.125), T.Select(v_r_b % T.int64(6) == T.int64(3) and v_vw % T.int64(4) == T.int64(2), T.float32(0.25), T.Select(v_r_b % T.int64(6) == T.int64(3) and v_vw % T.int64(4) == T.int64(1), T.float32(0.5), T.Select(v_r_b % T.int64(6) == T.int64(3) and v_vw % T.int64(4) == T.int64(0), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(2) and v_vw % T.int64(4) == T.int64(3), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(2) and v_vw % T.int64(4) == T.int64(2), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(2) and v_vw % T.int64(4) == T.int64(1), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(2) and v_vw % T.int64(4) == T.int64(0), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(1) and v_vw % T.int64(4) == T.int64(3), T.float32(-1), T.Select(v_r_b % T.int64(6) == T.int64(1) and v_vw % T.int64(4) == T.int64(2), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(1) and v_vw % T.int64(4) == T.int64(1), T.float32(-1), T.Select(v_r_b % T.int64(6) == T.int64(1) and v_vw % T.int64(4) == T.int64(0), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(0) and v_vw % T.int64(4) == T.int64(3), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(0) and v_vw % T.int64(4) == T.int64(2), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(0) and v_vw % T.int64(4) == T.int64(1), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(0) and v_vw % T.int64(4) == T.int64(0), T.float32(1), T.float32(0)))))))))))))))))))))))))
                for h_1, w_1 in T.grid(T.int64(4), T.int64(4)):
                    with T.block("conv2d_winograd"):
                        v_n = T.axis.spatial(T.int64(1), T.int64(0))
                        v_co = T.axis.spatial(T.int64(64), (n_co_h_0_w_0_fused_0 * T.int64(256) + n_co_h_0_w_0_fused_1) // T.int64(3136))
                        v_h = T.axis.spatial(T.int64(224), (n_co_h_0_w_0_fused_0 * T.int64(256) + n_co_h_0_w_0_fused_1) % T.int64(3136) // T.int64(56) * T.int64(4) + h_1)
                        v_w = T.axis.spatial(T.int64(224), (n_co_h_0_w_0_fused_0 * T.int64(256) + n_co_h_0_w_0_fused_1) % T.int64(56) * T.int64(4) + w_1)
                        T.reads(inverse_local[v_co, v_n * T.int64(3136) + v_h // T.int64(4) * T.int64(56) + v_w // T.int64(4), v_h % T.int64(4), v_w % T.int64(4)], p2[v_n, v_co, T.int64(0), T.int64(0)])
                        T.writes(T_relu[v_n, v_co, v_h, v_w])
                        T_relu[v_n, v_co, v_h, v_w] = T.max(inverse_local[v_co, v_n * T.int64(3136) + v_h // T.int64(4) * T.int64(56) + v_w // T.int64(4), v_h % T.int64(4), v_w % T.int64(4)] + p2[v_n, v_co, T.int64(0), T.int64(0)], T.float32(0))
b0 = sch.get_block(name="data_pack", func_name="main")
b1 = sch.get_block(name="bgemm", func_name="main")
b2 = sch.get_block(name="inverse", func_name="main")
b3 = sch.get_block(name="conv2d_winograd", func_name="main")
b4 = sch.get_block(name="T_add", func_name="main")
b5 = sch.get_block(name="T_relu", func_name="main")
b6 = sch.get_block(name="root", func_name="main")
b7, b8 = sch.get_producers(block=b2)
sch.compute_inline(block=b8)
b9, = sch.get_consumers(block=b2)
l10, l11, l12, l13 = sch.get_loops(block=b9)
l14, l15 = sch.split(loop=l12, factors=[None, 4], preserve_unit_iters=True)
l16, l17 = sch.split(loop=l13, factors=[None, 4], preserve_unit_iters=True)
sch.reorder(l14, l16, l15, l17)
sch.compute_at(block=b2, loop=l16, preserve_unit_loops=True, index=-1)
sch.set_scope(block=b2, buffer_index=0, storage_scope="local")
l18, l19, l20, l21, l22, l23, l24, l25, l26, l27 = sch.get_loops(block=b2)
sch.unroll(loop=l24)
sch.unroll(loop=l25)
sch.unroll(loop=l26)
sch.unroll(loop=l27)
b28, b29 = sch.get_producers(block=b0)
sch.compute_inline(block=b29)
b30, = sch.get_producers(block=b28)
l31, l32, l33, l34, l35, l36 = sch.get_loops(block=b0)
sch.reorder(l33, l34, l31, l32, l35, l36)
sch.unroll(loop=l31)
sch.unroll(loop=l32)
sch.unroll(loop=l35)
sch.unroll(loop=l36)
l37 = sch.fuse(l33, l34, preserve_unit_iters=True)
v38 = sch.sample_categorical(candidates=[32, 64, 128, 256, 512, 1024], probs=[0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666], decision=2)
l39, l40 = sch.split(loop=l37, factors=[None, v38], preserve_unit_iters=True)
sch.bind(loop=l39, thread_axis="blockIdx.x")
sch.bind(loop=l40, thread_axis="threadIdx.x")
b41 = sch.cache_write(block=b0, write_buffer_index=0, storage_scope="local")
sch.reverse_compute_at(block=b41, loop=l40, preserve_unit_loops=True, index=-1)
sch.compute_at(block=b28, loop=l40, preserve_unit_loops=True, index=-1)
sch.set_scope(block=b28, buffer_index=0, storage_scope="local")
sch.compute_inline(block=b30)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSSRRSRS")
l42, l43, l44, l45, l46 = sch.get_loops(block=b1)
v47, v48, v49, v50, v51 = sch.sample_perfect_tile(loop=l42, n=5, max_innermost_factor=64, decision=[1, 2, 1, 3, 1])
l52, l53, l54, l55, l56 = sch.split(loop=l42, factors=[v47, v48, v49, v50, v51], preserve_unit_iters=True)
v57, v58, v59, v60, v61 = sch.sample_perfect_tile(loop=l43, n=5, max_innermost_factor=64, decision=[1, 3, 2, 1, 1])
l62, l63, l64, l65, l66 = sch.split(loop=l43, factors=[v57, v58, v59, v60, v61], preserve_unit_iters=True)
v67, v68, v69, v70, v71 = sch.sample_perfect_tile(loop=l44, n=5, max_innermost_factor=64, decision=[1, 1, 16, 4, 1])
l72, l73, l74, l75, l76 = sch.split(loop=l44, factors=[v67, v68, v69, v70, v71], preserve_unit_iters=True)
v77, v78, v79, v80, v81 = sch.sample_perfect_tile(loop=l45, n=5, max_innermost_factor=64, decision=[28, 1, 1, 7, 16])
l82, l83, l84, l85, l86 = sch.split(loop=l45, factors=[v77, v78, v79, v80, v81], preserve_unit_iters=True)
v87, v88, v89 = sch.sample_perfect_tile(loop=l46, n=3, max_innermost_factor=64, decision=[3, 1, 1])
l90, l91, l92 = sch.split(loop=l46, factors=[v87, v88, v89], preserve_unit_iters=True)
sch.reorder(l52, l62, l72, l82, l53, l63, l73, l83, l54, l64, l74, l84, l90, l91, l55, l65, l75, l85, l92, l56, l66, l76, l86)
l93 = sch.fuse(l52, l62, l72, l82, preserve_unit_iters=True)
sch.bind(loop=l93, thread_axis="blockIdx.x")
l94 = sch.fuse(l53, l63, l73, l83, preserve_unit_iters=True)
sch.bind(loop=l94, thread_axis="vthread.x")
l95 = sch.fuse(l54, l64, l74, l84, preserve_unit_iters=True)
sch.bind(loop=l95, thread_axis="threadIdx.x")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_low_inclusive", ann_val=32)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_high_inclusive", ann_val=1024)
b96 = sch.cache_write(block=b1, write_buffer_index=0, storage_scope="local")
sch.reverse_compute_at(block=b96, loop=l95, preserve_unit_loops=True, index=-1)
b97 = sch.cache_read(block=b1, read_buffer_index=0, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b97, loop=l90, preserve_unit_loops=True, index=-1)
l98, l99, l100, l101, l102, l103, l104, l105 = sch.get_loops(block=b97)
l106 = sch.fuse(l102, l103, l104, l105, preserve_unit_iters=True)
v107 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=1)
sch.annotate(block_or_loop=b97, ann_key="meta_schedule.cooperative_fetch", ann_val=v107)
b108 = sch.cache_read(block=b1, read_buffer_index=1, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b108, loop=l90, preserve_unit_loops=True, index=-1)
l109, l110, l111, l112, l113, l114, l115, l116 = sch.get_loops(block=b108)
l117 = sch.fuse(l113, l114, l115, l116, preserve_unit_iters=True)
v118 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b108, ann_key="meta_schedule.cooperative_fetch", ann_val=v118)
sch.reverse_compute_inline(block=b5)
sch.reverse_compute_inline(block=b4)
v119 = sch.sample_categorical(candidates=[0, 16, 64, 512, 1024], probs=[0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001], decision=4)
sch.annotate(block_or_loop=b6, ann_key="meta_schedule.unroll_explicit", ann_val=v119)
l120, l121, l122, l123, l124, l125 = sch.get_loops(block=b3)
l126 = sch.fuse(l120, l121, l122, l123, preserve_unit_iters=True)
v127 = sch.sample_categorical(candidates=[32, 64, 128, 256, 512, 1024], probs=[0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666], decision=3)
l128, l129 = sch.split(loop=l126, factors=[None, v127], preserve_unit_iters=True)
sch.bind(loop=l128, thread_axis="blockIdx.x")
sch.bind(loop=l129, thread_axis="threadIdx.x")
sch.enter_postproc()
sch.unannotate(block_or_loop=b97, ann_key="meta_schedule.cooperative_fetch")
l130, l131, l132, l133, l134 = sch.get_loops(block=b97)
l135, l136, l137 = sch.split(loop=l134, factors=[None, 32, 2], preserve_unit_iters=True)
sch.vectorize(loop=l137)
sch.bind(loop=l136, thread_axis="threadIdx.x")
sch.unannotate(block_or_loop=b108, ann_key="meta_schedule.cooperative_fetch")
l138, l139, l140, l141, l142 = sch.get_loops(block=b108)
l143, l144, l145 = sch.split(loop=l142, factors=[None, 32, 4], preserve_unit_iters=True)
sch.vectorize(loop=l145)
sch.bind(loop=l144, thread_axis="threadIdx.x")
b146 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b146, ann_key="meta_schedule.unroll_explicit")
b147, b148, b149, b150, b151, b152, b153, b154, b155 = sch.get_child_blocks(b146)
l156, l157, l158, l159, l160, l161 = sch.get_loops(block=b147)
l162, l163, l164, l165, l166, l167 = sch.get_loops(block=b148)
sch.annotate(block_or_loop=l162, ann_key="pragma_auto_unroll_max_step", ann_val=1024)
sch.annotate(block_or_loop=l162, ann_key="pragma_unroll_explicit", ann_val=1)
l168, l169, l170, l171, l172, l173 = sch.get_loops(block=b149)
l174, l175, l176, l177, l178, l179, l180 = sch.get_loops(block=b150)
l181, l182, l183, l184, l185, l186, l187 = sch.get_loops(block=b151)
l188, l189, l190, l191, l192, l193, l194, l195, l196, l197, l198, l199, l200, l201 = sch.get_loops(block=b152)
sch.annotate(block_or_loop=l188, ann_key="pragma_auto_unroll_max_step", ann_val=1024)
sch.annotate(block_or_loop=l188, ann_key="pragma_unroll_explicit", ann_val=1)
l202, l203, l204, l205, l206, l207, l208 = sch.get_loops(block=b153)
l209, l210, l211, l212, l213, l214, l215, l216 = sch.get_loops(block=b154)
sch.annotate(block_or_loop=l209, ann_key="pragma_auto_unroll_max_step", ann_val=1024)
sch.annotate(block_or_loop=l209, ann_key="pragma_unroll_explicit", ann_val=1)
l217, l218, l219, l220 = sch.get_loops(block=b155)
b221 = sch.get_block(name="data_pack", func_name="main")
l222, l223, l224, l225, l226, l227 = sch.get_loops(block=b221)
b228 = sch.decompose_reduction(block=b221, loop=l226)
b229 = sch.get_block(name="bgemm", func_name="main")
l230, l231, l232, l233, l234, l235, l236, l237, l238, l239, l240, l241, l242, l243 = sch.get_loops(block=b229)
b244 = sch.decompose_reduction(block=b229, loop=l233)
b245 = sch.get_block(name="inverse", func_name="main")
l246, l247, l248, l249, l250, l251, l252, l253 = sch.get_loops(block=b245)
b254 = sch.decompose_reduction(block=b245, loop=l252)
2024-04-29 00:50:33 [INFO] [task_scheduler.cc:121] [Task #0: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu] Trial #398: Error in building:
LocalBuilder: Timeout, killed after 30.0 seconds
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(3), T.int64(224), T.int64(224)), "float32"), p1: T.Buffer((T.int64(6), T.int64(6), T.int64(3), T.int64(64)), "float32"), p2: T.Buffer((T.int64(1), T.int64(64), T.int64(1), T.int64(1)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(64), T.int64(224), T.int64(224)), "float32")):
        T.func_attr({"layout_free_buffers": [1], "tir.noalias": T.bool(True)})
        # with T.block("root"):
        input_tile_local = T.alloc_buffer((T.int64(3), T.int64(3136), T.int64(6), T.int64(6)), scope="local")
        data_pack = T.alloc_buffer((T.int64(6), T.int64(6), T.int64(3), T.int64(3136)))
        bgemm = T.alloc_buffer((T.int64(6), T.int64(6), T.int64(64), T.int64(3136)))
        inverse_local = T.alloc_buffer((T.int64(64), T.int64(3136), T.int64(4), T.int64(4)), scope="local")
        data_pack_local = T.alloc_buffer((T.int64(6), T.int64(6), T.int64(3), T.int64(3136)), scope="local")
        bgemm_local = T.alloc_buffer((T.int64(6), T.int64(6), T.int64(64), T.int64(3136)), scope="local")
        data_pack_shared = T.alloc_buffer((T.int64(6), T.int64(6), T.int64(3), T.int64(3136)), scope="shared")
        p1_shared = T.alloc_buffer((T.int64(6), T.int64(6), T.int64(3), T.int64(64)), scope="shared")
        for ci_p_fused_0 in T.thread_binding(T.int64(74), thread="blockIdx.x", annotations={"pragma_auto_unroll_max_step": 1024, "pragma_unroll_explicit": 1}):
            for ci_p_fused_1 in T.thread_binding(T.int64(128), thread="threadIdx.x"):
                for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(1), T.int64(6), T.int64(6)):
                    with T.block("input_tile"):
                        v_ci = T.axis.spatial(T.int64(3), (ci_p_fused_0 * T.int64(128) + ci_p_fused_1) // T.int64(3136) + ax0)
                        v_p = T.axis.spatial(T.int64(3136), (ci_p_fused_0 * T.int64(128) + ci_p_fused_1) % T.int64(3136) + ax1)
                        v_eps, v_nu = T.axis.remap("SS", [ax2, ax3])
                        T.where(ci_p_fused_0 * T.int64(128) + ci_p_fused_1 < T.int64(9408))
                        T.reads(p0[v_p // T.int64(3136), v_ci, v_p % T.int64(3136) // T.int64(56) * T.int64(4) + v_eps - T.int64(1), v_p % T.int64(56) * T.int64(4) + v_nu - T.int64(1)])
                        T.writes(input_tile_local[v_ci, v_p, v_eps, v_nu])
                        T.block_attr({"schedule_rule": "None"})
                        input_tile_local[v_ci, v_p, v_eps, v_nu] = T.if_then_else(T.int64(1) <= v_p % T.int64(3136) // T.int64(56) * T.int64(4) + v_eps and v_p % T.int64(3136) // T.int64(56) * T.int64(4) + v_eps < T.int64(225) and T.int64(1) <= v_p % T.int64(56) * T.int64(4) + v_nu and v_p % T.int64(56) * T.int64(4) + v_nu < T.int64(225), p0[v_p // T.int64(3136), v_ci, v_p % T.int64(3136) // T.int64(56) * T.int64(4) + v_eps - T.int64(1), v_p % T.int64(56) * T.int64(4) + v_nu - T.int64(1)], T.float32(0))
                for eps in T.unroll(T.int64(6)):
                    for nu in T.unroll(T.int64(6)):
                        with T.block("data_pack_init"):
                            v_eps, v_nu = T.axis.remap("SS", [eps, nu])
                            v_ci = T.axis.spatial(T.int64(3), (ci_p_fused_0 * T.int64(128) + ci_p_fused_1) // T.int64(3136))
                            v_p = T.axis.spatial(T.int64(3136), (ci_p_fused_0 * T.int64(128) + ci_p_fused_1) % T.int64(3136))
                            T.where(ci_p_fused_0 * T.int64(128) + ci_p_fused_1 < T.int64(9408))
                            T.reads()
                            T.writes(data_pack_local[v_eps, v_nu, v_ci, v_p])
                            T.block_attr({"schedule_rule": "conv2d_nchw_winograd_data_pack"})
                            data_pack_local[v_eps, v_nu, v_ci, v_p] = T.float32(0)
                        for r_a in T.unroll(T.int64(6)):
                            for r_b in T.unroll(T.int64(6)):
                                with T.block("data_pack_update"):
                                    v_eps, v_nu = T.axis.remap("SS", [eps, nu])
                                    v_ci = T.axis.spatial(T.int64(3), (ci_p_fused_0 * T.int64(128) + ci_p_fused_1) // T.int64(3136))
                                    v_p = T.axis.spatial(T.int64(3136), (ci_p_fused_0 * T.int64(128) + ci_p_fused_1) % T.int64(3136))
                                    v_r_a, v_r_b = T.axis.remap("RR", [r_a, r_b])
                                    T.where(ci_p_fused_0 * T.int64(128) + ci_p_fused_1 < T.int64(9408))
                                    T.reads(data_pack_local[v_eps, v_nu, v_ci, v_p], input_tile_local[v_ci, v_p, v_r_a, v_r_b])
                                    T.writes(data_pack_local[v_eps, v_nu, v_ci, v_p])
                                    T.block_attr({"schedule_rule": "conv2d_nchw_winograd_data_pack"})
                                    data_pack_local[v_eps, v_nu, v_ci, v_p] = data_pack_local[v_eps, v_nu, v_ci, v_p] + input_tile_local[v_ci, v_p, v_r_a, v_r_b] * T.Select(v_r_a % T.int64(6) == T.int64(5) and v_eps % T.int64(6) == T.int64(5), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(5) and v_eps % T.int64(6) == T.int64(4), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(5) and v_eps % T.int64(6) == T.int64(3), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(5) and v_eps % T.int64(6) == T.int64(2), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(5) and v_eps % T.int64(6) == T.int64(1), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(5) and v_eps % T.int64(6) == T.int64(0), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(4) and v_eps % T.int64(6) == T.int64(5), T.float32(1.5), T.Select(v_r_a % T.int64(6) == T.int64(4) and v_eps % T.int64(6) == T.int64(4), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(4) and v_eps % T.int64(6) == T.int64(3), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(4) and v_eps % T.int64(6) == T.int64(2), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(4) and v_eps % T.int64(6) == T.int64(1), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(4) and v_eps % T.int64(6) == T.int64(0), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(3) and v_eps % T.int64(6) == T.int64(5), T.float32(-2), T.Select(v_r_a % T.int64(6) == T.int64(3) and v_eps % T.int64(6) == T.int64(4), T.float32(-0.5), T.Select(v_r_a % T.int64(6) == T.int64(3) and v_eps % T.int64(6) == T.int64(3), T.float32(2), T.Select(v_r_a % T.int64(6) == T.int64(3) and v_eps % T.int64(6) == T.int64(2), T.float32(2.5), T.Select(v_r_a % T.int64(6) == T.int64(3) and v_eps % T.int64(6) == T.int64(1), T.float32(0.5), T.Select(v_r_a % T.int64(6) == T.int64(3) and v_eps % T.int64(6) == T.int64(0), T.float32(1.5), T.Select(v_r_a % T.int64(6) == T.int64(2) and v_eps % T.int64(6) == T.int64(5), T.float32(-1.5), T.Select(v_r_a % T.int64(6) == T.int64(2) and v_eps % T.int64(6) == T.int64(4), T.float32(-1), T.Select(v_r_a % T.int64(6) == T.int64(2) and v_eps % T.int64(6) == T.int64(3), T.float32(-1), T.Select(v_r_a % T.int64(6) == T.int64(2) and v_eps % T.int64(6) == T.int64(2), T.float32(0.5), T.Select(v_r_a % T.int64(6) == T.int64(2) and v_eps % T.int64(6) == T.int64(1), T.float32(-2.5), T.Select(v_r_a % T.int64(6) == T.int64(2) and v_eps % T.int64(6) == T.int64(0), T.float32(-2), T.Select(v_r_a % T.int64(6) == T.int64(1) and v_eps % T.int64(6) == T.int64(5), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(1) and v_eps % T.int64(6) == T.int64(4), T.float32(0.5), T.Select(v_r_a % T.int64(6) == T.int64(1) and v_eps % T.int64(6) == T.int64(3), T.float32(-2), T.Select(v_r_a % T.int64(6) == T.int64(1) and v_eps % T.int64(6) == T.int64(2), T.float32(-1), T.Select(v_r_a % T.int64(6) == T.int64(1) and v_eps % T.int64(6) == T.int64(1), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(1) and v_eps % T.int64(6) == T.int64(0), T.float32(-1.5), T.Select(v_r_a % T.int64(6) == T.int64(0) and v_eps % T.int64(6) == T.int64(5), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(0) and v_eps % T.int64(6) == T.int64(4), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(0) and v_eps % T.int64(6) == T.int64(3), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(0) and v_eps % T.int64(6) == T.int64(2), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(0) and v_eps % T.int64(6) == T.int64(1), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(0) and v_eps % T.int64(6) == T.int64(0), T.float32(1), T.float32(0))))))))))))))))))))))))))))))))))))) * T.Select(v_r_b % T.int64(6) == T.int64(5) and v_nu % T.int64(6) == T.int64(5), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(5) and v_nu % T.int64(6) == T.int64(4), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(5) and v_nu % T.int64(6) == T.int64(3), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(5) and v_nu % T.int64(6) == T.int64(2), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(5) and v_nu % T.int64(6) == T.int64(1), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(5) and v_nu % T.int64(6) == T.int64(0), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(4) and v_nu % T.int64(6) == T.int64(5), T.float32(1.5), T.Select(v_r_b % T.int64(6) == T.int64(4) and v_nu % T.int64(6) == T.int64(4), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(4) and v_nu % T.int64(6) == T.int64(3), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(4) and v_nu % T.int64(6) == T.int64(2), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(4) and v_nu % T.int64(6) == T.int64(1), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(4) and v_nu % T.int64(6) == T.int64(0), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(3) and v_nu % T.int64(6) == T.int64(5), T.float32(-2), T.Select(v_r_b % T.int64(6) == T.int64(3) and v_nu % T.int64(6) == T.int64(4), T.float32(-0.5), T.Select(v_r_b % T.int64(6) == T.int64(3) and v_nu % T.int64(6) == T.int64(3), T.float32(2), T.Select(v_r_b % T.int64(6) == T.int64(3) and v_nu % T.int64(6) == T.int64(2), T.float32(2.5), T.Select(v_r_b % T.int64(6) == T.int64(3) and v_nu % T.int64(6) == T.int64(1), T.float32(0.5), T.Select(v_r_b % T.int64(6) == T.int64(3) and v_nu % T.int64(6) == T.int64(0), T.float32(1.5), T.Select(v_r_b % T.int64(6) == T.int64(2) and v_nu % T.int64(6) == T.int64(5), T.float32(-1.5), T.Select(v_r_b % T.int64(6) == T.int64(2) and v_nu % T.int64(6) == T.int64(4), T.float32(-1), T.Select(v_r_b % T.int64(6) == T.int64(2) and v_nu % T.int64(6) == T.int64(3), T.float32(-1), T.Select(v_r_b % T.int64(6) == T.int64(2) and v_nu % T.int64(6) == T.int64(2), T.float32(0.5), T.Select(v_r_b % T.int64(6) == T.int64(2) and v_nu % T.int64(6) == T.int64(1), T.float32(-2.5), T.Select(v_r_b % T.int64(6) == T.int64(2) and v_nu % T.int64(6) == T.int64(0), T.float32(-2), T.Select(v_r_b % T.int64(6) == T.int64(1) and v_nu % T.int64(6) == T.int64(5), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(1) and v_nu % T.int64(6) == T.int64(4), T.float32(0.5), T.Select(v_r_b % T.int64(6) == T.int64(1) and v_nu % T.int64(6) == T.int64(3), T.float32(-2), T.Select(v_r_b % T.int64(6) == T.int64(1) and v_nu % T.int64(6) == T.int64(2), T.float32(-1), T.Select(v_r_b % T.int64(6) == T.int64(1) and v_nu % T.int64(6) == T.int64(1), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(1) and v_nu % T.int64(6) == T.int64(0), T.float32(-1.5), T.Select(v_r_b % T.int64(6) == T.int64(0) and v_nu % T.int64(6) == T.int64(5), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(0) and v_nu % T.int64(6) == T.int64(4), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(0) and v_nu % T.int64(6) == T.int64(3), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(0) and v_nu % T.int64(6) == T.int64(2), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(0) and v_nu % T.int64(6) == T.int64(1), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(0) and v_nu % T.int64(6) == T.int64(0), T.float32(1), T.float32(0)))))))))))))))))))))))))))))))))))))
                for ax0, ax1, ax2, ax3 in T.grid(T.int64(6), T.int64(6), T.int64(1), T.int64(1)):
                    with T.block("data_pack_local"):
                        v0, v1 = T.axis.remap("SS", [ax0, ax1])
                        v2 = T.axis.spatial(T.int64(3), (ci_p_fused_0 * T.int64(128) + ci_p_fused_1) // T.int64(3136) + ax2)
                        v3 = T.axis.spatial(T.int64(3136), (ci_p_fused_0 * T.int64(128) + ci_p_fused_1) % T.int64(3136) + ax3)
                        T.where(ci_p_fused_0 * T.int64(128) + ci_p_fused_1 < T.int64(9408))
                        T.reads(data_pack_local[v0, v1, v2, v3])
                        T.writes(data_pack[v0, v1, v2, v3])
                        data_pack[v0, v1, v2, v3] = data_pack_local[v0, v1, v2, v3]
        for eps_0_nu_0_co_0_p_0_fused in T.thread_binding(T.int64(28), thread="blockIdx.x", annotations={"pragma_auto_unroll_max_step": 1024, "pragma_unroll_explicit": 1}):
            for eps_1_nu_1_co_1_p_1_fused in T.thread_binding(T.int64(6), thread="vthread.x"):
                for eps_2_nu_2_co_2_p_2_fused in T.thread_binding(T.int64(32), thread="threadIdx.x"):
                    for eps_3_init, nu_3_init, co_3_init, p_3_init, eps_4_init, nu_4_init, co_4_init, p_4_init in T.grid(T.int64(3), T.int64(1), T.int64(4), T.int64(112), T.int64(1), T.int64(1), T.int64(1), T.int64(1)):
                        with T.block("bgemm_init"):
                            v_eps = T.axis.spatial(T.int64(6), eps_1_nu_1_co_1_p_1_fused // T.int64(3) * T.int64(3) + eps_3_init + eps_4_init)
                            v_nu = T.axis.spatial(T.int64(6), eps_1_nu_1_co_1_p_1_fused % T.int64(3) * T.int64(2) + eps_2_nu_2_co_2_p_2_fused // T.int64(16) + nu_3_init + nu_4_init)
                            v_co = T.axis.spatial(T.int64(64), eps_2_nu_2_co_2_p_2_fused % T.int64(16) * T.int64(4) + co_3_init + co_4_init)
                            v_p = T.axis.spatial(T.int64(3136), eps_0_nu_0_co_0_p_0_fused * T.int64(112) + p_3_init + p_4_init)
                            T.reads()
                            T.writes(bgemm_local[v_eps, v_nu, v_co, v_p])
                            T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 32, "meta_schedule.tiling_structure": "SSSRRSRS"})
                            bgemm_local[v_eps, v_nu, v_co, v_p] = T.float32(0)
                    for ci_0 in range(T.int64(3)):
                        for ax0_ax1_ax2_ax3_fused_0 in range(T.int64(42)):
                            for ax0_ax1_ax2_ax3_fused_1 in T.thread_binding(T.int64(32), thread="threadIdx.x"):
                                for ax0_ax1_ax2_ax3_fused_2 in T.vectorized(T.int64(3)):
                                    with T.block("data_pack_shared"):
                                        v0 = T.axis.spatial(T.int64(6), (ax0_ax1_ax2_ax3_fused_0 * T.int64(96) + ax0_ax1_ax2_ax3_fused_1 * T.int64(3) + ax0_ax1_ax2_ax3_fused_2) // T.int64(672))
                                        v1 = T.axis.spatial(T.int64(6), (ax0_ax1_ax2_ax3_fused_0 * T.int64(96) + ax0_ax1_ax2_ax3_fused_1 * T.int64(3) + ax0_ax1_ax2_ax3_fused_2) % T.int64(672) // T.int64(112))
                                        v2 = T.axis.spatial(T.int64(3), ci_0)
                                        v3 = T.axis.spatial(T.int64(3136), eps_0_nu_0_co_0_p_0_fused * T.int64(112) + (ax0_ax1_ax2_ax3_fused_0 * T.int64(96) + ax0_ax1_ax2_ax3_fused_1 * T.int64(3) + ax0_ax1_ax2_ax3_fused_2) % T.int64(112))
                                        T.reads(data_pack[v0, v1, v2, v3])
                                        T.writes(data_pack_shared[v0, v1, v2, v3])
                                        data_pack_shared[v0, v1, v2, v3] = data_pack[v0, v1, v2, v3]
                        for ax0_ax1_ax2_ax3_fused_0 in range(T.int64(18)):
                            for ax0_ax1_ax2_ax3_fused_1 in T.thread_binding(T.int64(32), thread="threadIdx.x"):
                                for ax0_ax1_ax2_ax3_fused_2 in T.vectorized(T.int64(4)):
                                    with T.block("p1_shared"):
                                        v0 = T.axis.spatial(T.int64(6), (ax0_ax1_ax2_ax3_fused_0 * T.int64(128) + ax0_ax1_ax2_ax3_fused_1 * T.int64(4) + ax0_ax1_ax2_ax3_fused_2) // T.int64(384))
                                        v1 = T.axis.spatial(T.int64(6), (ax0_ax1_ax2_ax3_fused_0 * T.int64(128) + ax0_ax1_ax2_ax3_fused_1 * T.int64(4) + ax0_ax1_ax2_ax3_fused_2) % T.int64(384) // T.int64(64))
                                        v2 = T.axis.spatial(T.int64(3), ci_0)
                                        v3 = T.axis.spatial(T.int64(64), (ax0_ax1_ax2_ax3_fused_0 * T.int64(128) + ax0_ax1_ax2_ax3_fused_1 * T.int64(4) + ax0_ax1_ax2_ax3_fused_2) % T.int64(64))
                                        T.reads(p1[v0, v1, v2, v3])
                                        T.writes(p1_shared[v0, v1, v2, v3])
                                        p1_shared[v0, v1, v2, v3] = p1[v0, v1, v2, v3]
                        for ci_1, eps_3, nu_3, co_3, p_3, ci_2, eps_4, nu_4, co_4, p_4 in T.grid(T.int64(1), T.int64(3), T.int64(1), T.int64(4), T.int64(112), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1)):
                            with T.block("bgemm_update"):
                                v_eps = T.axis.spatial(T.int64(6), eps_1_nu_1_co_1_p_1_fused // T.int64(3) * T.int64(3) + eps_3 + eps_4)
                                v_nu = T.axis.spatial(T.int64(6), eps_1_nu_1_co_1_p_1_fused % T.int64(3) * T.int64(2) + eps_2_nu_2_co_2_p_2_fused // T.int64(16) + nu_3 + nu_4)
                                v_co = T.axis.spatial(T.int64(64), eps_2_nu_2_co_2_p_2_fused % T.int64(16) * T.int64(4) + co_3 + co_4)
                                v_p = T.axis.spatial(T.int64(3136), eps_0_nu_0_co_0_p_0_fused * T.int64(112) + p_3 + p_4)
                                v_ci = T.axis.reduce(T.int64(3), ci_0 + ci_1 + ci_2)
                                T.reads(bgemm_local[v_eps, v_nu, v_co, v_p], data_pack_shared[v_eps, v_nu, v_ci, v_p], p1_shared[v_eps, v_nu, v_ci, v_co])
                                T.writes(bgemm_local[v_eps, v_nu, v_co, v_p])
                                T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 32, "meta_schedule.tiling_structure": "SSSRRSRS"})
                                bgemm_local[v_eps, v_nu, v_co, v_p] = bgemm_local[v_eps, v_nu, v_co, v_p] + data_pack_shared[v_eps, v_nu, v_ci, v_p] * p1_shared[v_eps, v_nu, v_ci, v_co]
                    for ax0, ax1, ax2, ax3 in T.grid(T.int64(3), T.int64(1), T.int64(4), T.int64(112)):
                        with T.block("bgemm_local"):
                            v0 = T.axis.spatial(T.int64(6), eps_1_nu_1_co_1_p_1_fused // T.int64(3) * T.int64(3) + ax0)
                            v1 = T.axis.spatial(T.int64(6), eps_1_nu_1_co_1_p_1_fused % T.int64(3) * T.int64(2) + eps_2_nu_2_co_2_p_2_fused // T.int64(16) + ax1)
                            v2 = T.axis.spatial(T.int64(64), eps_2_nu_2_co_2_p_2_fused % T.int64(16) * T.int64(4) + ax2)
                            v3 = T.axis.spatial(T.int64(3136), eps_0_nu_0_co_0_p_0_fused * T.int64(112) + ax3)
                            T.reads(bgemm_local[v0, v1, v2, v3])
                            T.writes(bgemm[v0, v1, v2, v3])
                            bgemm[v0, v1, v2, v3] = bgemm_local[v0, v1, v2, v3]
        for n_co_h_0_w_0_fused_0 in T.thread_binding(T.int64(784), thread="blockIdx.x", annotations={"pragma_auto_unroll_max_step": 1024, "pragma_unroll_explicit": 1}):
            for n_co_h_0_w_0_fused_1 in T.thread_binding(T.int64(256), thread="threadIdx.x"):
                for ax0, ax1 in T.grid(T.int64(1), T.int64(1)):
                    for ax2 in T.unroll(T.int64(4)):
                        for ax3 in T.unroll(T.int64(4)):
                            with T.block("inverse_init"):
                                v_co = T.axis.spatial(T.int64(64), (n_co_h_0_w_0_fused_0 * T.int64(256) + n_co_h_0_w_0_fused_1) // T.int64(3136) + ax0)
                                v_p = T.axis.spatial(T.int64(3136), (n_co_h_0_w_0_fused_0 * T.int64(256) + n_co_h_0_w_0_fused_1) % T.int64(3136) + ax1)
                                v_vh, v_vw = T.axis.remap("SS", [ax2, ax3])
                                T.reads()
                                T.writes(inverse_local[v_co, v_p, v_vh, v_vw])
                                T.block_attr({"schedule_rule": "conv2d_nchw_winograd_inverse"})
                                inverse_local[v_co, v_p, v_vh, v_vw] = T.float32(0)
                            for ax4 in T.unroll(T.int64(6)):
                                for ax5 in T.unroll(T.int64(6)):
                                    with T.block("inverse_update"):
                                        v_co = T.axis.spatial(T.int64(64), (n_co_h_0_w_0_fused_0 * T.int64(256) + n_co_h_0_w_0_fused_1) // T.int64(3136) + ax0)
                                        v_p = T.axis.spatial(T.int64(3136), (n_co_h_0_w_0_fused_0 * T.int64(256) + n_co_h_0_w_0_fused_1) % T.int64(3136) + ax1)
                                        v_vh, v_vw, v_r_a, v_r_b = T.axis.remap("SSRR", [ax2, ax3, ax4, ax5])
                                        T.reads(inverse_local[v_co, v_p, v_vh, v_vw], bgemm[v_r_a, v_r_b, v_co, v_p])
                                        T.writes(inverse_local[v_co, v_p, v_vh, v_vw])
                                        T.block_attr({"schedule_rule": "conv2d_nchw_winograd_inverse"})
                                        inverse_local[v_co, v_p, v_vh, v_vw] = inverse_local[v_co, v_p, v_vh, v_vw] + bgemm[v_r_a, v_r_b, v_co, v_p] * T.Select(v_r_a % T.int64(6) == T.int64(5) and v_vh % T.int64(4) == T.int64(3), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(5) and v_vh % T.int64(4) == T.int64(2), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(5) and v_vh % T.int64(4) == T.int64(1), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(5) and v_vh % T.int64(4) == T.int64(0), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(4) and v_vh % T.int64(4) == T.int64(3), T.float32(-8), T.Select(v_r_a % T.int64(6) == T.int64(4) and v_vh % T.int64(4) == T.int64(2), T.float32(4), T.Select(v_r_a % T.int64(6) == T.int64(4) and v_vh % T.int64(4) == T.int64(1), T.float32(-2), T.Select(v_r_a % T.int64(6) == T.int64(4) and v_vh % T.int64(4) == T.int64(0), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(3) and v_vh % T.int64(4) == T.int64(3), T.float32(0.125), T.Select(v_r_a % T.int64(6) == T.int64(3) and v_vh % T.int64(4) == T.int64(2), T.float32(0.25), T.Select(v_r_a % T.int64(6) == T.int64(3) and v_vh % T.int64(4) == T.int64(1), T.float32(0.5), T.Select(v_r_a % T.int64(6) == T.int64(3) and v_vh % T.int64(4) == T.int64(0), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(2) and v_vh % T.int64(4) == T.int64(3), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(2) and v_vh % T.int64(4) == T.int64(2), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(2) and v_vh % T.int64(4) == T.int64(1), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(2) and v_vh % T.int64(4) == T.int64(0), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(1) and v_vh % T.int64(4) == T.int64(3), T.float32(-1), T.Select(v_r_a % T.int64(6) == T.int64(1) and v_vh % T.int64(4) == T.int64(2), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(1) and v_vh % T.int64(4) == T.int64(1), T.float32(-1), T.Select(v_r_a % T.int64(6) == T.int64(1) and v_vh % T.int64(4) == T.int64(0), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(0) and v_vh % T.int64(4) == T.int64(3), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(0) and v_vh % T.int64(4) == T.int64(2), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(0) and v_vh % T.int64(4) == T.int64(1), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(0) and v_vh % T.int64(4) == T.int64(0), T.float32(1), T.float32(0))))))))))))))))))))))))) * T.Select(v_r_b % T.int64(6) == T.int64(5) and v_vw % T.int64(4) == T.int64(3), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(5) and v_vw % T.int64(4) == T.int64(2), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(5) and v_vw % T.int64(4) == T.int64(1), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(5) and v_vw % T.int64(4) == T.int64(0), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(4) and v_vw % T.int64(4) == T.int64(3), T.float32(-8), T.Select(v_r_b % T.int64(6) == T.int64(4) and v_vw % T.int64(4) == T.int64(2), T.float32(4), T.Select(v_r_b % T.int64(6) == T.int64(4) and v_vw % T.int64(4) == T.int64(1), T.float32(-2), T.Select(v_r_b % T.int64(6) == T.int64(4) and v_vw % T.int64(4) == T.int64(0), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(3) and v_vw % T.int64(4) == T.int64(3), T.float32(0.125), T.Select(v_r_b % T.int64(6) == T.int64(3) and v_vw % T.int64(4) == T.int64(2), T.float32(0.25), T.Select(v_r_b % T.int64(6) == T.int64(3) and v_vw % T.int64(4) == T.int64(1), T.float32(0.5), T.Select(v_r_b % T.int64(6) == T.int64(3) and v_vw % T.int64(4) == T.int64(0), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(2) and v_vw % T.int64(4) == T.int64(3), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(2) and v_vw % T.int64(4) == T.int64(2), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(2) and v_vw % T.int64(4) == T.int64(1), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(2) and v_vw % T.int64(4) == T.int64(0), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(1) and v_vw % T.int64(4) == T.int64(3), T.float32(-1), T.Select(v_r_b % T.int64(6) == T.int64(1) and v_vw % T.int64(4) == T.int64(2), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(1) and v_vw % T.int64(4) == T.int64(1), T.float32(-1), T.Select(v_r_b % T.int64(6) == T.int64(1) and v_vw % T.int64(4) == T.int64(0), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(0) and v_vw % T.int64(4) == T.int64(3), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(0) and v_vw % T.int64(4) == T.int64(2), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(0) and v_vw % T.int64(4) == T.int64(1), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(0) and v_vw % T.int64(4) == T.int64(0), T.float32(1), T.float32(0)))))))))))))))))))))))))
                for h_1, w_1 in T.grid(T.int64(4), T.int64(4)):
                    with T.block("conv2d_winograd"):
                        v_n = T.axis.spatial(T.int64(1), T.int64(0))
                        v_co = T.axis.spatial(T.int64(64), (n_co_h_0_w_0_fused_0 * T.int64(256) + n_co_h_0_w_0_fused_1) // T.int64(3136))
                        v_h = T.axis.spatial(T.int64(224), (n_co_h_0_w_0_fused_0 * T.int64(256) + n_co_h_0_w_0_fused_1) % T.int64(3136) // T.int64(56) * T.int64(4) + h_1)
                        v_w = T.axis.spatial(T.int64(224), (n_co_h_0_w_0_fused_0 * T.int64(256) + n_co_h_0_w_0_fused_1) % T.int64(56) * T.int64(4) + w_1)
                        T.reads(inverse_local[v_co, v_n * T.int64(3136) + v_h // T.int64(4) * T.int64(56) + v_w // T.int64(4), v_h % T.int64(4), v_w % T.int64(4)], p2[v_n, v_co, T.int64(0), T.int64(0)])
                        T.writes(T_relu[v_n, v_co, v_h, v_w])
                        T_relu[v_n, v_co, v_h, v_w] = T.max(inverse_local[v_co, v_n * T.int64(3136) + v_h // T.int64(4) * T.int64(56) + v_w // T.int64(4), v_h % T.int64(4), v_w % T.int64(4)] + p2[v_n, v_co, T.int64(0), T.int64(0)], T.float32(0))
b0 = sch.get_block(name="data_pack", func_name="main")
b1 = sch.get_block(name="bgemm", func_name="main")
b2 = sch.get_block(name="inverse", func_name="main")
b3 = sch.get_block(name="conv2d_winograd", func_name="main")
b4 = sch.get_block(name="T_add", func_name="main")
b5 = sch.get_block(name="T_relu", func_name="main")
b6 = sch.get_block(name="root", func_name="main")
b7, b8 = sch.get_producers(block=b2)
sch.compute_inline(block=b8)
b9, = sch.get_consumers(block=b2)
l10, l11, l12, l13 = sch.get_loops(block=b9)
l14, l15 = sch.split(loop=l12, factors=[None, 4], preserve_unit_iters=True)
l16, l17 = sch.split(loop=l13, factors=[None, 4], preserve_unit_iters=True)
sch.reorder(l14, l16, l15, l17)
sch.compute_at(block=b2, loop=l16, preserve_unit_loops=True, index=-1)
sch.set_scope(block=b2, buffer_index=0, storage_scope="local")
l18, l19, l20, l21, l22, l23, l24, l25, l26, l27 = sch.get_loops(block=b2)
sch.unroll(loop=l24)
sch.unroll(loop=l25)
sch.unroll(loop=l26)
sch.unroll(loop=l27)
b28, b29 = sch.get_producers(block=b0)
sch.compute_inline(block=b29)
b30, = sch.get_producers(block=b28)
l31, l32, l33, l34, l35, l36 = sch.get_loops(block=b0)
sch.reorder(l33, l34, l31, l32, l35, l36)
sch.unroll(loop=l31)
sch.unroll(loop=l32)
sch.unroll(loop=l35)
sch.unroll(loop=l36)
l37 = sch.fuse(l33, l34, preserve_unit_iters=True)
v38 = sch.sample_categorical(candidates=[32, 64, 128, 256, 512, 1024], probs=[0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666], decision=2)
l39, l40 = sch.split(loop=l37, factors=[None, v38], preserve_unit_iters=True)
sch.bind(loop=l39, thread_axis="blockIdx.x")
sch.bind(loop=l40, thread_axis="threadIdx.x")
b41 = sch.cache_write(block=b0, write_buffer_index=0, storage_scope="local")
sch.reverse_compute_at(block=b41, loop=l40, preserve_unit_loops=True, index=-1)
sch.compute_at(block=b28, loop=l40, preserve_unit_loops=True, index=-1)
sch.set_scope(block=b28, buffer_index=0, storage_scope="local")
sch.compute_inline(block=b30)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSSRRSRS")
l42, l43, l44, l45, l46 = sch.get_loops(block=b1)
v47, v48, v49, v50, v51 = sch.sample_perfect_tile(loop=l42, n=5, max_innermost_factor=64, decision=[1, 2, 1, 3, 1])
l52, l53, l54, l55, l56 = sch.split(loop=l42, factors=[v47, v48, v49, v50, v51], preserve_unit_iters=True)
v57, v58, v59, v60, v61 = sch.sample_perfect_tile(loop=l43, n=5, max_innermost_factor=64, decision=[1, 3, 2, 1, 1])
l62, l63, l64, l65, l66 = sch.split(loop=l43, factors=[v57, v58, v59, v60, v61], preserve_unit_iters=True)
v67, v68, v69, v70, v71 = sch.sample_perfect_tile(loop=l44, n=5, max_innermost_factor=64, decision=[1, 1, 16, 4, 1])
l72, l73, l74, l75, l76 = sch.split(loop=l44, factors=[v67, v68, v69, v70, v71], preserve_unit_iters=True)
v77, v78, v79, v80, v81 = sch.sample_perfect_tile(loop=l45, n=5, max_innermost_factor=64, decision=[28, 1, 1, 112, 1])
l82, l83, l84, l85, l86 = sch.split(loop=l45, factors=[v77, v78, v79, v80, v81], preserve_unit_iters=True)
v87, v88, v89 = sch.sample_perfect_tile(loop=l46, n=3, max_innermost_factor=64, decision=[3, 1, 1])
l90, l91, l92 = sch.split(loop=l46, factors=[v87, v88, v89], preserve_unit_iters=True)
sch.reorder(l52, l62, l72, l82, l53, l63, l73, l83, l54, l64, l74, l84, l90, l91, l55, l65, l75, l85, l92, l56, l66, l76, l86)
l93 = sch.fuse(l52, l62, l72, l82, preserve_unit_iters=True)
sch.bind(loop=l93, thread_axis="blockIdx.x")
l94 = sch.fuse(l53, l63, l73, l83, preserve_unit_iters=True)
sch.bind(loop=l94, thread_axis="vthread.x")
l95 = sch.fuse(l54, l64, l74, l84, preserve_unit_iters=True)
sch.bind(loop=l95, thread_axis="threadIdx.x")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_low_inclusive", ann_val=32)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_high_inclusive", ann_val=1024)
b96 = sch.cache_write(block=b1, write_buffer_index=0, storage_scope="local")
sch.reverse_compute_at(block=b96, loop=l95, preserve_unit_loops=True, index=-1)
b97 = sch.cache_read(block=b1, read_buffer_index=0, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b97, loop=l90, preserve_unit_loops=True, index=-1)
l98, l99, l100, l101, l102, l103, l104, l105 = sch.get_loops(block=b97)
l106 = sch.fuse(l102, l103, l104, l105, preserve_unit_iters=True)
v107 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=2)
sch.annotate(block_or_loop=b97, ann_key="meta_schedule.cooperative_fetch", ann_val=v107)
b108 = sch.cache_read(block=b1, read_buffer_index=1, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b108, loop=l90, preserve_unit_loops=True, index=-1)
l109, l110, l111, l112, l113, l114, l115, l116 = sch.get_loops(block=b108)
l117 = sch.fuse(l113, l114, l115, l116, preserve_unit_iters=True)
v118 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b108, ann_key="meta_schedule.cooperative_fetch", ann_val=v118)
sch.reverse_compute_inline(block=b5)
sch.reverse_compute_inline(block=b4)
v119 = sch.sample_categorical(candidates=[0, 16, 64, 512, 1024], probs=[0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001], decision=4)
sch.annotate(block_or_loop=b6, ann_key="meta_schedule.unroll_explicit", ann_val=v119)
l120, l121, l122, l123, l124, l125 = sch.get_loops(block=b3)
l126 = sch.fuse(l120, l121, l122, l123, preserve_unit_iters=True)
v127 = sch.sample_categorical(candidates=[32, 64, 128, 256, 512, 1024], probs=[0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666], decision=3)
l128, l129 = sch.split(loop=l126, factors=[None, v127], preserve_unit_iters=True)
sch.bind(loop=l128, thread_axis="blockIdx.x")
sch.bind(loop=l129, thread_axis="threadIdx.x")
sch.enter_postproc()
sch.unannotate(block_or_loop=b97, ann_key="meta_schedule.cooperative_fetch")
l130, l131, l132, l133, l134 = sch.get_loops(block=b97)
l135, l136, l137 = sch.split(loop=l134, factors=[None, 32, 3], preserve_unit_iters=True)
sch.vectorize(loop=l137)
sch.bind(loop=l136, thread_axis="threadIdx.x")
sch.unannotate(block_or_loop=b108, ann_key="meta_schedule.cooperative_fetch")
l138, l139, l140, l141, l142 = sch.get_loops(block=b108)
l143, l144, l145 = sch.split(loop=l142, factors=[None, 32, 4], preserve_unit_iters=True)
sch.vectorize(loop=l145)
sch.bind(loop=l144, thread_axis="threadIdx.x")
b146 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b146, ann_key="meta_schedule.unroll_explicit")
b147, b148, b149, b150, b151, b152, b153, b154, b155 = sch.get_child_blocks(b146)
l156, l157, l158, l159, l160, l161 = sch.get_loops(block=b147)
l162, l163, l164, l165, l166, l167 = sch.get_loops(block=b148)
sch.annotate(block_or_loop=l162, ann_key="pragma_auto_unroll_max_step", ann_val=1024)
sch.annotate(block_or_loop=l162, ann_key="pragma_unroll_explicit", ann_val=1)
l168, l169, l170, l171, l172, l173 = sch.get_loops(block=b149)
l174, l175, l176, l177, l178, l179, l180 = sch.get_loops(block=b150)
l181, l182, l183, l184, l185, l186, l187 = sch.get_loops(block=b151)
l188, l189, l190, l191, l192, l193, l194, l195, l196, l197, l198, l199, l200, l201 = sch.get_loops(block=b152)
sch.annotate(block_or_loop=l188, ann_key="pragma_auto_unroll_max_step", ann_val=1024)
sch.annotate(block_or_loop=l188, ann_key="pragma_unroll_explicit", ann_val=1)
l202, l203, l204, l205, l206, l207, l208 = sch.get_loops(block=b153)
l209, l210, l211, l212, l213, l214, l215, l216 = sch.get_loops(block=b154)
sch.annotate(block_or_loop=l209, ann_key="pragma_auto_unroll_max_step", ann_val=1024)
sch.annotate(block_or_loop=l209, ann_key="pragma_unroll_explicit", ann_val=1)
l217, l218, l219, l220 = sch.get_loops(block=b155)
b221 = sch.get_block(name="data_pack", func_name="main")
l222, l223, l224, l225, l226, l227 = sch.get_loops(block=b221)
b228 = sch.decompose_reduction(block=b221, loop=l226)
b229 = sch.get_block(name="bgemm", func_name="main")
l230, l231, l232, l233, l234, l235, l236, l237, l238, l239, l240, l241, l242, l243 = sch.get_loops(block=b229)
b244 = sch.decompose_reduction(block=b229, loop=l233)
b245 = sch.get_block(name="inverse", func_name="main")
l246, l247, l248, l249, l250, l251, l252, l253 = sch.get_loops(block=b245)
b254 = sch.decompose_reduction(block=b245, loop=l252)
2024-04-29 00:50:33 [INFO] [task_scheduler.cc:121] [Task #0: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu] Trial #399: Error in building:
LocalBuilder: Timeout, killed after 30.0 seconds
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(3), T.int64(224), T.int64(224)), "float32"), p1: T.Buffer((T.int64(6), T.int64(6), T.int64(3), T.int64(64)), "float32"), p2: T.Buffer((T.int64(1), T.int64(64), T.int64(1), T.int64(1)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(64), T.int64(224), T.int64(224)), "float32")):
        T.func_attr({"layout_free_buffers": [1], "tir.noalias": T.bool(True)})
        # with T.block("root"):
        input_tile_local = T.alloc_buffer((T.int64(3), T.int64(3136), T.int64(6), T.int64(6)), scope="local")
        data_pack = T.alloc_buffer((T.int64(6), T.int64(6), T.int64(3), T.int64(3136)))
        bgemm = T.alloc_buffer((T.int64(6), T.int64(6), T.int64(64), T.int64(3136)))
        inverse_local = T.alloc_buffer((T.int64(64), T.int64(3136), T.int64(4), T.int64(4)), scope="local")
        data_pack_local = T.alloc_buffer((T.int64(6), T.int64(6), T.int64(3), T.int64(3136)), scope="local")
        bgemm_local = T.alloc_buffer((T.int64(6), T.int64(6), T.int64(64), T.int64(3136)), scope="local")
        data_pack_shared = T.alloc_buffer((T.int64(6), T.int64(6), T.int64(3), T.int64(3136)), scope="shared")
        p1_shared = T.alloc_buffer((T.int64(6), T.int64(6), T.int64(3), T.int64(64)), scope="shared")
        for ci_p_fused_0 in T.thread_binding(T.int64(74), thread="blockIdx.x", annotations={"pragma_auto_unroll_max_step": 1024, "pragma_unroll_explicit": 1}):
            for ci_p_fused_1 in T.thread_binding(T.int64(128), thread="threadIdx.x"):
                for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(1), T.int64(6), T.int64(6)):
                    with T.block("input_tile"):
                        v_ci = T.axis.spatial(T.int64(3), (ci_p_fused_0 * T.int64(128) + ci_p_fused_1) // T.int64(3136) + ax0)
                        v_p = T.axis.spatial(T.int64(3136), (ci_p_fused_0 * T.int64(128) + ci_p_fused_1) % T.int64(3136) + ax1)
                        v_eps, v_nu = T.axis.remap("SS", [ax2, ax3])
                        T.where(ci_p_fused_0 * T.int64(128) + ci_p_fused_1 < T.int64(9408))
                        T.reads(p0[v_p // T.int64(3136), v_ci, v_p % T.int64(3136) // T.int64(56) * T.int64(4) + v_eps - T.int64(1), v_p % T.int64(56) * T.int64(4) + v_nu - T.int64(1)])
                        T.writes(input_tile_local[v_ci, v_p, v_eps, v_nu])
                        T.block_attr({"schedule_rule": "None"})
                        input_tile_local[v_ci, v_p, v_eps, v_nu] = T.if_then_else(T.int64(1) <= v_p % T.int64(3136) // T.int64(56) * T.int64(4) + v_eps and v_p % T.int64(3136) // T.int64(56) * T.int64(4) + v_eps < T.int64(225) and T.int64(1) <= v_p % T.int64(56) * T.int64(4) + v_nu and v_p % T.int64(56) * T.int64(4) + v_nu < T.int64(225), p0[v_p // T.int64(3136), v_ci, v_p % T.int64(3136) // T.int64(56) * T.int64(4) + v_eps - T.int64(1), v_p % T.int64(56) * T.int64(4) + v_nu - T.int64(1)], T.float32(0))
                for eps in T.unroll(T.int64(6)):
                    for nu in T.unroll(T.int64(6)):
                        with T.block("data_pack_init"):
                            v_eps, v_nu = T.axis.remap("SS", [eps, nu])
                            v_ci = T.axis.spatial(T.int64(3), (ci_p_fused_0 * T.int64(128) + ci_p_fused_1) // T.int64(3136))
                            v_p = T.axis.spatial(T.int64(3136), (ci_p_fused_0 * T.int64(128) + ci_p_fused_1) % T.int64(3136))
                            T.where(ci_p_fused_0 * T.int64(128) + ci_p_fused_1 < T.int64(9408))
                            T.reads()
                            T.writes(data_pack_local[v_eps, v_nu, v_ci, v_p])
                            T.block_attr({"schedule_rule": "conv2d_nchw_winograd_data_pack"})
                            data_pack_local[v_eps, v_nu, v_ci, v_p] = T.float32(0)
                        for r_a in T.unroll(T.int64(6)):
                            for r_b in T.unroll(T.int64(6)):
                                with T.block("data_pack_update"):
                                    v_eps, v_nu = T.axis.remap("SS", [eps, nu])
                                    v_ci = T.axis.spatial(T.int64(3), (ci_p_fused_0 * T.int64(128) + ci_p_fused_1) // T.int64(3136))
                                    v_p = T.axis.spatial(T.int64(3136), (ci_p_fused_0 * T.int64(128) + ci_p_fused_1) % T.int64(3136))
                                    v_r_a, v_r_b = T.axis.remap("RR", [r_a, r_b])
                                    T.where(ci_p_fused_0 * T.int64(128) + ci_p_fused_1 < T.int64(9408))
                                    T.reads(data_pack_local[v_eps, v_nu, v_ci, v_p], input_tile_local[v_ci, v_p, v_r_a, v_r_b])
                                    T.writes(data_pack_local[v_eps, v_nu, v_ci, v_p])
                                    T.block_attr({"schedule_rule": "conv2d_nchw_winograd_data_pack"})
                                    data_pack_local[v_eps, v_nu, v_ci, v_p] = data_pack_local[v_eps, v_nu, v_ci, v_p] + input_tile_local[v_ci, v_p, v_r_a, v_r_b] * T.Select(v_r_a % T.int64(6) == T.int64(5) and v_eps % T.int64(6) == T.int64(5), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(5) and v_eps % T.int64(6) == T.int64(4), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(5) and v_eps % T.int64(6) == T.int64(3), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(5) and v_eps % T.int64(6) == T.int64(2), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(5) and v_eps % T.int64(6) == T.int64(1), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(5) and v_eps % T.int64(6) == T.int64(0), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(4) and v_eps % T.int64(6) == T.int64(5), T.float32(1.5), T.Select(v_r_a % T.int64(6) == T.int64(4) and v_eps % T.int64(6) == T.int64(4), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(4) and v_eps % T.int64(6) == T.int64(3), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(4) and v_eps % T.int64(6) == T.int64(2), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(4) and v_eps % T.int64(6) == T.int64(1), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(4) and v_eps % T.int64(6) == T.int64(0), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(3) and v_eps % T.int64(6) == T.int64(5), T.float32(-2), T.Select(v_r_a % T.int64(6) == T.int64(3) and v_eps % T.int64(6) == T.int64(4), T.float32(-0.5), T.Select(v_r_a % T.int64(6) == T.int64(3) and v_eps % T.int64(6) == T.int64(3), T.float32(2), T.Select(v_r_a % T.int64(6) == T.int64(3) and v_eps % T.int64(6) == T.int64(2), T.float32(2.5), T.Select(v_r_a % T.int64(6) == T.int64(3) and v_eps % T.int64(6) == T.int64(1), T.float32(0.5), T.Select(v_r_a % T.int64(6) == T.int64(3) and v_eps % T.int64(6) == T.int64(0), T.float32(1.5), T.Select(v_r_a % T.int64(6) == T.int64(2) and v_eps % T.int64(6) == T.int64(5), T.float32(-1.5), T.Select(v_r_a % T.int64(6) == T.int64(2) and v_eps % T.int64(6) == T.int64(4), T.float32(-1), T.Select(v_r_a % T.int64(6) == T.int64(2) and v_eps % T.int64(6) == T.int64(3), T.float32(-1), T.Select(v_r_a % T.int64(6) == T.int64(2) and v_eps % T.int64(6) == T.int64(2), T.float32(0.5), T.Select(v_r_a % T.int64(6) == T.int64(2) and v_eps % T.int64(6) == T.int64(1), T.float32(-2.5), T.Select(v_r_a % T.int64(6) == T.int64(2) and v_eps % T.int64(6) == T.int64(0), T.float32(-2), T.Select(v_r_a % T.int64(6) == T.int64(1) and v_eps % T.int64(6) == T.int64(5), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(1) and v_eps % T.int64(6) == T.int64(4), T.float32(0.5), T.Select(v_r_a % T.int64(6) == T.int64(1) and v_eps % T.int64(6) == T.int64(3), T.float32(-2), T.Select(v_r_a % T.int64(6) == T.int64(1) and v_eps % T.int64(6) == T.int64(2), T.float32(-1), T.Select(v_r_a % T.int64(6) == T.int64(1) and v_eps % T.int64(6) == T.int64(1), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(1) and v_eps % T.int64(6) == T.int64(0), T.float32(-1.5), T.Select(v_r_a % T.int64(6) == T.int64(0) and v_eps % T.int64(6) == T.int64(5), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(0) and v_eps % T.int64(6) == T.int64(4), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(0) and v_eps % T.int64(6) == T.int64(3), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(0) and v_eps % T.int64(6) == T.int64(2), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(0) and v_eps % T.int64(6) == T.int64(1), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(0) and v_eps % T.int64(6) == T.int64(0), T.float32(1), T.float32(0))))))))))))))))))))))))))))))))))))) * T.Select(v_r_b % T.int64(6) == T.int64(5) and v_nu % T.int64(6) == T.int64(5), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(5) and v_nu % T.int64(6) == T.int64(4), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(5) and v_nu % T.int64(6) == T.int64(3), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(5) and v_nu % T.int64(6) == T.int64(2), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(5) and v_nu % T.int64(6) == T.int64(1), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(5) and v_nu % T.int64(6) == T.int64(0), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(4) and v_nu % T.int64(6) == T.int64(5), T.float32(1.5), T.Select(v_r_b % T.int64(6) == T.int64(4) and v_nu % T.int64(6) == T.int64(4), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(4) and v_nu % T.int64(6) == T.int64(3), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(4) and v_nu % T.int64(6) == T.int64(2), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(4) and v_nu % T.int64(6) == T.int64(1), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(4) and v_nu % T.int64(6) == T.int64(0), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(3) and v_nu % T.int64(6) == T.int64(5), T.float32(-2), T.Select(v_r_b % T.int64(6) == T.int64(3) and v_nu % T.int64(6) == T.int64(4), T.float32(-0.5), T.Select(v_r_b % T.int64(6) == T.int64(3) and v_nu % T.int64(6) == T.int64(3), T.float32(2), T.Select(v_r_b % T.int64(6) == T.int64(3) and v_nu % T.int64(6) == T.int64(2), T.float32(2.5), T.Select(v_r_b % T.int64(6) == T.int64(3) and v_nu % T.int64(6) == T.int64(1), T.float32(0.5), T.Select(v_r_b % T.int64(6) == T.int64(3) and v_nu % T.int64(6) == T.int64(0), T.float32(1.5), T.Select(v_r_b % T.int64(6) == T.int64(2) and v_nu % T.int64(6) == T.int64(5), T.float32(-1.5), T.Select(v_r_b % T.int64(6) == T.int64(2) and v_nu % T.int64(6) == T.int64(4), T.float32(-1), T.Select(v_r_b % T.int64(6) == T.int64(2) and v_nu % T.int64(6) == T.int64(3), T.float32(-1), T.Select(v_r_b % T.int64(6) == T.int64(2) and v_nu % T.int64(6) == T.int64(2), T.float32(0.5), T.Select(v_r_b % T.int64(6) == T.int64(2) and v_nu % T.int64(6) == T.int64(1), T.float32(-2.5), T.Select(v_r_b % T.int64(6) == T.int64(2) and v_nu % T.int64(6) == T.int64(0), T.float32(-2), T.Select(v_r_b % T.int64(6) == T.int64(1) and v_nu % T.int64(6) == T.int64(5), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(1) and v_nu % T.int64(6) == T.int64(4), T.float32(0.5), T.Select(v_r_b % T.int64(6) == T.int64(1) and v_nu % T.int64(6) == T.int64(3), T.float32(-2), T.Select(v_r_b % T.int64(6) == T.int64(1) and v_nu % T.int64(6) == T.int64(2), T.float32(-1), T.Select(v_r_b % T.int64(6) == T.int64(1) and v_nu % T.int64(6) == T.int64(1), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(1) and v_nu % T.int64(6) == T.int64(0), T.float32(-1.5), T.Select(v_r_b % T.int64(6) == T.int64(0) and v_nu % T.int64(6) == T.int64(5), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(0) and v_nu % T.int64(6) == T.int64(4), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(0) and v_nu % T.int64(6) == T.int64(3), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(0) and v_nu % T.int64(6) == T.int64(2), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(0) and v_nu % T.int64(6) == T.int64(1), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(0) and v_nu % T.int64(6) == T.int64(0), T.float32(1), T.float32(0)))))))))))))))))))))))))))))))))))))
                for ax0, ax1, ax2, ax3 in T.grid(T.int64(6), T.int64(6), T.int64(1), T.int64(1)):
                    with T.block("data_pack_local"):
                        v0, v1 = T.axis.remap("SS", [ax0, ax1])
                        v2 = T.axis.spatial(T.int64(3), (ci_p_fused_0 * T.int64(128) + ci_p_fused_1) // T.int64(3136) + ax2)
                        v3 = T.axis.spatial(T.int64(3136), (ci_p_fused_0 * T.int64(128) + ci_p_fused_1) % T.int64(3136) + ax3)
                        T.where(ci_p_fused_0 * T.int64(128) + ci_p_fused_1 < T.int64(9408))
                        T.reads(data_pack_local[v0, v1, v2, v3])
                        T.writes(data_pack[v0, v1, v2, v3])
                        data_pack[v0, v1, v2, v3] = data_pack_local[v0, v1, v2, v3]
        for eps_0_nu_0_co_0_p_0_fused in T.thread_binding(T.int64(28), thread="blockIdx.x", annotations={"pragma_auto_unroll_max_step": 1024, "pragma_unroll_explicit": 1}):
            for eps_1_nu_1_co_1_p_1_fused in T.thread_binding(T.int64(6), thread="vthread.x"):
                for eps_2_nu_2_co_2_p_2_fused in T.thread_binding(T.int64(32), thread="threadIdx.x"):
                    for eps_3_init, nu_3_init, co_3_init, p_3_init, eps_4_init, nu_4_init, co_4_init, p_4_init in T.grid(T.int64(3), T.int64(1), T.int64(4), T.int64(7), T.int64(1), T.int64(1), T.int64(1), T.int64(16)):
                        with T.block("bgemm_init"):
                            v_eps = T.axis.spatial(T.int64(6), eps_1_nu_1_co_1_p_1_fused // T.int64(3) * T.int64(3) + eps_3_init + eps_4_init)
                            v_nu = T.axis.spatial(T.int64(6), eps_1_nu_1_co_1_p_1_fused % T.int64(3) * T.int64(2) + eps_2_nu_2_co_2_p_2_fused // T.int64(16) + nu_3_init + nu_4_init)
                            v_co = T.axis.spatial(T.int64(64), eps_2_nu_2_co_2_p_2_fused % T.int64(16) * T.int64(4) + co_3_init + co_4_init)
                            v_p = T.axis.spatial(T.int64(3136), eps_0_nu_0_co_0_p_0_fused * T.int64(112) + p_3_init * T.int64(16) + p_4_init)
                            T.reads()
                            T.writes(bgemm_local[v_eps, v_nu, v_co, v_p])
                            T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 32, "meta_schedule.tiling_structure": "SSSRRSRS"})
                            bgemm_local[v_eps, v_nu, v_co, v_p] = T.float32(0)
                    for ci_0 in range(T.int64(3)):
                        for ax0_ax1_ax2_ax3_fused_0 in range(T.int64(32)):
                            for ax0_ax1_ax2_ax3_fused_1 in T.thread_binding(T.int64(32), thread="threadIdx.x"):
                                for ax0_ax1_ax2_ax3_fused_2 in T.vectorized(T.int64(4)):
                                    with T.block("data_pack_shared"):
                                        v0 = T.axis.spatial(T.int64(6), (ax0_ax1_ax2_ax3_fused_0 * T.int64(128) + ax0_ax1_ax2_ax3_fused_1 * T.int64(4) + ax0_ax1_ax2_ax3_fused_2) // T.int64(672))
                                        v1 = T.axis.spatial(T.int64(6), (ax0_ax1_ax2_ax3_fused_0 * T.int64(128) + ax0_ax1_ax2_ax3_fused_1 * T.int64(4) + ax0_ax1_ax2_ax3_fused_2) % T.int64(672) // T.int64(112))
                                        v2 = T.axis.spatial(T.int64(3), ci_0)
                                        v3 = T.axis.spatial(T.int64(3136), eps_0_nu_0_co_0_p_0_fused * T.int64(112) + (ax0_ax1_ax2_ax3_fused_0 * T.int64(128) + ax0_ax1_ax2_ax3_fused_1 * T.int64(4) + ax0_ax1_ax2_ax3_fused_2) % T.int64(112))
                                        T.where((ax0_ax1_ax2_ax3_fused_0 * T.int64(32) + ax0_ax1_ax2_ax3_fused_1) * T.int64(4) + ax0_ax1_ax2_ax3_fused_2 < T.int64(4032))
                                        T.reads(data_pack[v0, v1, v2, v3])
                                        T.writes(data_pack_shared[v0, v1, v2, v3])
                                        data_pack_shared[v0, v1, v2, v3] = data_pack[v0, v1, v2, v3]
                        for ax0_ax1_ax2_ax3_fused_0 in range(T.int64(18)):
                            for ax0_ax1_ax2_ax3_fused_1 in T.thread_binding(T.int64(32), thread="threadIdx.x"):
                                for ax0_ax1_ax2_ax3_fused_2 in T.vectorized(T.int64(4)):
                                    with T.block("p1_shared"):
                                        v0 = T.axis.spatial(T.int64(6), (ax0_ax1_ax2_ax3_fused_0 * T.int64(128) + ax0_ax1_ax2_ax3_fused_1 * T.int64(4) + ax0_ax1_ax2_ax3_fused_2) // T.int64(384))
                                        v1 = T.axis.spatial(T.int64(6), (ax0_ax1_ax2_ax3_fused_0 * T.int64(128) + ax0_ax1_ax2_ax3_fused_1 * T.int64(4) + ax0_ax1_ax2_ax3_fused_2) % T.int64(384) // T.int64(64))
                                        v2 = T.axis.spatial(T.int64(3), ci_0)
                                        v3 = T.axis.spatial(T.int64(64), (ax0_ax1_ax2_ax3_fused_0 * T.int64(128) + ax0_ax1_ax2_ax3_fused_1 * T.int64(4) + ax0_ax1_ax2_ax3_fused_2) % T.int64(64))
                                        T.reads(p1[v0, v1, v2, v3])
                                        T.writes(p1_shared[v0, v1, v2, v3])
                                        p1_shared[v0, v1, v2, v3] = p1[v0, v1, v2, v3]
                        for ci_1, eps_3, nu_3, co_3, p_3, ci_2, eps_4, nu_4, co_4, p_4 in T.grid(T.int64(1), T.int64(3), T.int64(1), T.int64(4), T.int64(7), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(16)):
                            with T.block("bgemm_update"):
                                v_eps = T.axis.spatial(T.int64(6), eps_1_nu_1_co_1_p_1_fused // T.int64(3) * T.int64(3) + eps_3 + eps_4)
                                v_nu = T.axis.spatial(T.int64(6), eps_1_nu_1_co_1_p_1_fused % T.int64(3) * T.int64(2) + eps_2_nu_2_co_2_p_2_fused // T.int64(16) + nu_3 + nu_4)
                                v_co = T.axis.spatial(T.int64(64), eps_2_nu_2_co_2_p_2_fused % T.int64(16) * T.int64(4) + co_3 + co_4)
                                v_p = T.axis.spatial(T.int64(3136), eps_0_nu_0_co_0_p_0_fused * T.int64(112) + p_3 * T.int64(16) + p_4)
                                v_ci = T.axis.reduce(T.int64(3), ci_0 + ci_1 + ci_2)
                                T.reads(bgemm_local[v_eps, v_nu, v_co, v_p], data_pack_shared[v_eps, v_nu, v_ci, v_p], p1_shared[v_eps, v_nu, v_ci, v_co])
                                T.writes(bgemm_local[v_eps, v_nu, v_co, v_p])
                                T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 32, "meta_schedule.tiling_structure": "SSSRRSRS"})
                                bgemm_local[v_eps, v_nu, v_co, v_p] = bgemm_local[v_eps, v_nu, v_co, v_p] + data_pack_shared[v_eps, v_nu, v_ci, v_p] * p1_shared[v_eps, v_nu, v_ci, v_co]
                    for ax0, ax1, ax2, ax3 in T.grid(T.int64(3), T.int64(1), T.int64(4), T.int64(112)):
                        with T.block("bgemm_local"):
                            v0 = T.axis.spatial(T.int64(6), eps_1_nu_1_co_1_p_1_fused // T.int64(3) * T.int64(3) + ax0)
                            v1 = T.axis.spatial(T.int64(6), eps_1_nu_1_co_1_p_1_fused % T.int64(3) * T.int64(2) + eps_2_nu_2_co_2_p_2_fused // T.int64(16) + ax1)
                            v2 = T.axis.spatial(T.int64(64), eps_2_nu_2_co_2_p_2_fused % T.int64(16) * T.int64(4) + ax2)
                            v3 = T.axis.spatial(T.int64(3136), eps_0_nu_0_co_0_p_0_fused * T.int64(112) + ax3)
                            T.reads(bgemm_local[v0, v1, v2, v3])
                            T.writes(bgemm[v0, v1, v2, v3])
                            bgemm[v0, v1, v2, v3] = bgemm_local[v0, v1, v2, v3]
        for n_co_h_0_w_0_fused_0 in T.thread_binding(T.int64(784), thread="blockIdx.x", annotations={"pragma_auto_unroll_max_step": 1024, "pragma_unroll_explicit": 1}):
            for n_co_h_0_w_0_fused_1 in T.thread_binding(T.int64(256), thread="threadIdx.x"):
                for ax0, ax1 in T.grid(T.int64(1), T.int64(1)):
                    for ax2 in T.unroll(T.int64(4)):
                        for ax3 in T.unroll(T.int64(4)):
                            with T.block("inverse_init"):
                                v_co = T.axis.spatial(T.int64(64), (n_co_h_0_w_0_fused_0 * T.int64(256) + n_co_h_0_w_0_fused_1) // T.int64(3136) + ax0)
                                v_p = T.axis.spatial(T.int64(3136), (n_co_h_0_w_0_fused_0 * T.int64(256) + n_co_h_0_w_0_fused_1) % T.int64(3136) + ax1)
                                v_vh, v_vw = T.axis.remap("SS", [ax2, ax3])
                                T.reads()
                                T.writes(inverse_local[v_co, v_p, v_vh, v_vw])
                                T.block_attr({"schedule_rule": "conv2d_nchw_winograd_inverse"})
                                inverse_local[v_co, v_p, v_vh, v_vw] = T.float32(0)
                            for ax4 in T.unroll(T.int64(6)):
                                for ax5 in T.unroll(T.int64(6)):
                                    with T.block("inverse_update"):
                                        v_co = T.axis.spatial(T.int64(64), (n_co_h_0_w_0_fused_0 * T.int64(256) + n_co_h_0_w_0_fused_1) // T.int64(3136) + ax0)
                                        v_p = T.axis.spatial(T.int64(3136), (n_co_h_0_w_0_fused_0 * T.int64(256) + n_co_h_0_w_0_fused_1) % T.int64(3136) + ax1)
                                        v_vh, v_vw, v_r_a, v_r_b = T.axis.remap("SSRR", [ax2, ax3, ax4, ax5])
                                        T.reads(inverse_local[v_co, v_p, v_vh, v_vw], bgemm[v_r_a, v_r_b, v_co, v_p])
                                        T.writes(inverse_local[v_co, v_p, v_vh, v_vw])
                                        T.block_attr({"schedule_rule": "conv2d_nchw_winograd_inverse"})
                                        inverse_local[v_co, v_p, v_vh, v_vw] = inverse_local[v_co, v_p, v_vh, v_vw] + bgemm[v_r_a, v_r_b, v_co, v_p] * T.Select(v_r_a % T.int64(6) == T.int64(5) and v_vh % T.int64(4) == T.int64(3), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(5) and v_vh % T.int64(4) == T.int64(2), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(5) and v_vh % T.int64(4) == T.int64(1), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(5) and v_vh % T.int64(4) == T.int64(0), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(4) and v_vh % T.int64(4) == T.int64(3), T.float32(-8), T.Select(v_r_a % T.int64(6) == T.int64(4) and v_vh % T.int64(4) == T.int64(2), T.float32(4), T.Select(v_r_a % T.int64(6) == T.int64(4) and v_vh % T.int64(4) == T.int64(1), T.float32(-2), T.Select(v_r_a % T.int64(6) == T.int64(4) and v_vh % T.int64(4) == T.int64(0), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(3) and v_vh % T.int64(4) == T.int64(3), T.float32(0.125), T.Select(v_r_a % T.int64(6) == T.int64(3) and v_vh % T.int64(4) == T.int64(2), T.float32(0.25), T.Select(v_r_a % T.int64(6) == T.int64(3) and v_vh % T.int64(4) == T.int64(1), T.float32(0.5), T.Select(v_r_a % T.int64(6) == T.int64(3) and v_vh % T.int64(4) == T.int64(0), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(2) and v_vh % T.int64(4) == T.int64(3), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(2) and v_vh % T.int64(4) == T.int64(2), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(2) and v_vh % T.int64(4) == T.int64(1), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(2) and v_vh % T.int64(4) == T.int64(0), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(1) and v_vh % T.int64(4) == T.int64(3), T.float32(-1), T.Select(v_r_a % T.int64(6) == T.int64(1) and v_vh % T.int64(4) == T.int64(2), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(1) and v_vh % T.int64(4) == T.int64(1), T.float32(-1), T.Select(v_r_a % T.int64(6) == T.int64(1) and v_vh % T.int64(4) == T.int64(0), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(0) and v_vh % T.int64(4) == T.int64(3), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(0) and v_vh % T.int64(4) == T.int64(2), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(0) and v_vh % T.int64(4) == T.int64(1), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(0) and v_vh % T.int64(4) == T.int64(0), T.float32(1), T.float32(0))))))))))))))))))))))))) * T.Select(v_r_b % T.int64(6) == T.int64(5) and v_vw % T.int64(4) == T.int64(3), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(5) and v_vw % T.int64(4) == T.int64(2), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(5) and v_vw % T.int64(4) == T.int64(1), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(5) and v_vw % T.int64(4) == T.int64(0), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(4) and v_vw % T.int64(4) == T.int64(3), T.float32(-8), T.Select(v_r_b % T.int64(6) == T.int64(4) and v_vw % T.int64(4) == T.int64(2), T.float32(4), T.Select(v_r_b % T.int64(6) == T.int64(4) and v_vw % T.int64(4) == T.int64(1), T.float32(-2), T.Select(v_r_b % T.int64(6) == T.int64(4) and v_vw % T.int64(4) == T.int64(0), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(3) and v_vw % T.int64(4) == T.int64(3), T.float32(0.125), T.Select(v_r_b % T.int64(6) == T.int64(3) and v_vw % T.int64(4) == T.int64(2), T.float32(0.25), T.Select(v_r_b % T.int64(6) == T.int64(3) and v_vw % T.int64(4) == T.int64(1), T.float32(0.5), T.Select(v_r_b % T.int64(6) == T.int64(3) and v_vw % T.int64(4) == T.int64(0), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(2) and v_vw % T.int64(4) == T.int64(3), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(2) and v_vw % T.int64(4) == T.int64(2), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(2) and v_vw % T.int64(4) == T.int64(1), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(2) and v_vw % T.int64(4) == T.int64(0), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(1) and v_vw % T.int64(4) == T.int64(3), T.float32(-1), T.Select(v_r_b % T.int64(6) == T.int64(1) and v_vw % T.int64(4) == T.int64(2), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(1) and v_vw % T.int64(4) == T.int64(1), T.float32(-1), T.Select(v_r_b % T.int64(6) == T.int64(1) and v_vw % T.int64(4) == T.int64(0), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(0) and v_vw % T.int64(4) == T.int64(3), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(0) and v_vw % T.int64(4) == T.int64(2), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(0) and v_vw % T.int64(4) == T.int64(1), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(0) and v_vw % T.int64(4) == T.int64(0), T.float32(1), T.float32(0)))))))))))))))))))))))))
                for h_1, w_1 in T.grid(T.int64(4), T.int64(4)):
                    with T.block("conv2d_winograd"):
                        v_n = T.axis.spatial(T.int64(1), T.int64(0))
                        v_co = T.axis.spatial(T.int64(64), (n_co_h_0_w_0_fused_0 * T.int64(256) + n_co_h_0_w_0_fused_1) // T.int64(3136))
                        v_h = T.axis.spatial(T.int64(224), (n_co_h_0_w_0_fused_0 * T.int64(256) + n_co_h_0_w_0_fused_1) % T.int64(3136) // T.int64(56) * T.int64(4) + h_1)
                        v_w = T.axis.spatial(T.int64(224), (n_co_h_0_w_0_fused_0 * T.int64(256) + n_co_h_0_w_0_fused_1) % T.int64(56) * T.int64(4) + w_1)
                        T.reads(inverse_local[v_co, v_n * T.int64(3136) + v_h // T.int64(4) * T.int64(56) + v_w // T.int64(4), v_h % T.int64(4), v_w % T.int64(4)], p2[v_n, v_co, T.int64(0), T.int64(0)])
                        T.writes(T_relu[v_n, v_co, v_h, v_w])
                        T_relu[v_n, v_co, v_h, v_w] = T.max(inverse_local[v_co, v_n * T.int64(3136) + v_h // T.int64(4) * T.int64(56) + v_w // T.int64(4), v_h % T.int64(4), v_w % T.int64(4)] + p2[v_n, v_co, T.int64(0), T.int64(0)], T.float32(0))
b0 = sch.get_block(name="data_pack", func_name="main")
b1 = sch.get_block(name="bgemm", func_name="main")
b2 = sch.get_block(name="inverse", func_name="main")
b3 = sch.get_block(name="conv2d_winograd", func_name="main")
b4 = sch.get_block(name="T_add", func_name="main")
b5 = sch.get_block(name="T_relu", func_name="main")
b6 = sch.get_block(name="root", func_name="main")
b7, b8 = sch.get_producers(block=b2)
sch.compute_inline(block=b8)
b9, = sch.get_consumers(block=b2)
l10, l11, l12, l13 = sch.get_loops(block=b9)
l14, l15 = sch.split(loop=l12, factors=[None, 4], preserve_unit_iters=True)
l16, l17 = sch.split(loop=l13, factors=[None, 4], preserve_unit_iters=True)
sch.reorder(l14, l16, l15, l17)
sch.compute_at(block=b2, loop=l16, preserve_unit_loops=True, index=-1)
sch.set_scope(block=b2, buffer_index=0, storage_scope="local")
l18, l19, l20, l21, l22, l23, l24, l25, l26, l27 = sch.get_loops(block=b2)
sch.unroll(loop=l24)
sch.unroll(loop=l25)
sch.unroll(loop=l26)
sch.unroll(loop=l27)
b28, b29 = sch.get_producers(block=b0)
sch.compute_inline(block=b29)
b30, = sch.get_producers(block=b28)
l31, l32, l33, l34, l35, l36 = sch.get_loops(block=b0)
sch.reorder(l33, l34, l31, l32, l35, l36)
sch.unroll(loop=l31)
sch.unroll(loop=l32)
sch.unroll(loop=l35)
sch.unroll(loop=l36)
l37 = sch.fuse(l33, l34, preserve_unit_iters=True)
v38 = sch.sample_categorical(candidates=[32, 64, 128, 256, 512, 1024], probs=[0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666], decision=2)
l39, l40 = sch.split(loop=l37, factors=[None, v38], preserve_unit_iters=True)
sch.bind(loop=l39, thread_axis="blockIdx.x")
sch.bind(loop=l40, thread_axis="threadIdx.x")
b41 = sch.cache_write(block=b0, write_buffer_index=0, storage_scope="local")
sch.reverse_compute_at(block=b41, loop=l40, preserve_unit_loops=True, index=-1)
sch.compute_at(block=b28, loop=l40, preserve_unit_loops=True, index=-1)
sch.set_scope(block=b28, buffer_index=0, storage_scope="local")
sch.compute_inline(block=b30)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSSRRSRS")
l42, l43, l44, l45, l46 = sch.get_loops(block=b1)
v47, v48, v49, v50, v51 = sch.sample_perfect_tile(loop=l42, n=5, max_innermost_factor=64, decision=[1, 2, 1, 3, 1])
l52, l53, l54, l55, l56 = sch.split(loop=l42, factors=[v47, v48, v49, v50, v51], preserve_unit_iters=True)
v57, v58, v59, v60, v61 = sch.sample_perfect_tile(loop=l43, n=5, max_innermost_factor=64, decision=[1, 3, 2, 1, 1])
l62, l63, l64, l65, l66 = sch.split(loop=l43, factors=[v57, v58, v59, v60, v61], preserve_unit_iters=True)
v67, v68, v69, v70, v71 = sch.sample_perfect_tile(loop=l44, n=5, max_innermost_factor=64, decision=[1, 1, 16, 4, 1])
l72, l73, l74, l75, l76 = sch.split(loop=l44, factors=[v67, v68, v69, v70, v71], preserve_unit_iters=True)
v77, v78, v79, v80, v81 = sch.sample_perfect_tile(loop=l45, n=5, max_innermost_factor=64, decision=[28, 1, 1, 7, 16])
l82, l83, l84, l85, l86 = sch.split(loop=l45, factors=[v77, v78, v79, v80, v81], preserve_unit_iters=True)
v87, v88, v89 = sch.sample_perfect_tile(loop=l46, n=3, max_innermost_factor=64, decision=[3, 1, 1])
l90, l91, l92 = sch.split(loop=l46, factors=[v87, v88, v89], preserve_unit_iters=True)
sch.reorder(l52, l62, l72, l82, l53, l63, l73, l83, l54, l64, l74, l84, l90, l91, l55, l65, l75, l85, l92, l56, l66, l76, l86)
l93 = sch.fuse(l52, l62, l72, l82, preserve_unit_iters=True)
sch.bind(loop=l93, thread_axis="blockIdx.x")
l94 = sch.fuse(l53, l63, l73, l83, preserve_unit_iters=True)
sch.bind(loop=l94, thread_axis="vthread.x")
l95 = sch.fuse(l54, l64, l74, l84, preserve_unit_iters=True)
sch.bind(loop=l95, thread_axis="threadIdx.x")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_low_inclusive", ann_val=32)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_high_inclusive", ann_val=1024)
b96 = sch.cache_write(block=b1, write_buffer_index=0, storage_scope="local")
sch.reverse_compute_at(block=b96, loop=l95, preserve_unit_loops=True, index=-1)
b97 = sch.cache_read(block=b1, read_buffer_index=0, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b97, loop=l90, preserve_unit_loops=True, index=-1)
l98, l99, l100, l101, l102, l103, l104, l105 = sch.get_loops(block=b97)
l106 = sch.fuse(l102, l103, l104, l105, preserve_unit_iters=True)
v107 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b97, ann_key="meta_schedule.cooperative_fetch", ann_val=v107)
b108 = sch.cache_read(block=b1, read_buffer_index=1, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b108, loop=l90, preserve_unit_loops=True, index=-1)
l109, l110, l111, l112, l113, l114, l115, l116 = sch.get_loops(block=b108)
l117 = sch.fuse(l113, l114, l115, l116, preserve_unit_iters=True)
v118 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b108, ann_key="meta_schedule.cooperative_fetch", ann_val=v118)
sch.reverse_compute_inline(block=b5)
sch.reverse_compute_inline(block=b4)
v119 = sch.sample_categorical(candidates=[0, 16, 64, 512, 1024], probs=[0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001], decision=4)
sch.annotate(block_or_loop=b6, ann_key="meta_schedule.unroll_explicit", ann_val=v119)
l120, l121, l122, l123, l124, l125 = sch.get_loops(block=b3)
l126 = sch.fuse(l120, l121, l122, l123, preserve_unit_iters=True)
v127 = sch.sample_categorical(candidates=[32, 64, 128, 256, 512, 1024], probs=[0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666], decision=3)
l128, l129 = sch.split(loop=l126, factors=[None, v127], preserve_unit_iters=True)
sch.bind(loop=l128, thread_axis="blockIdx.x")
sch.bind(loop=l129, thread_axis="threadIdx.x")
sch.enter_postproc()
sch.unannotate(block_or_loop=b97, ann_key="meta_schedule.cooperative_fetch")
l130, l131, l132, l133, l134 = sch.get_loops(block=b97)
l135, l136, l137 = sch.split(loop=l134, factors=[None, 32, 4], preserve_unit_iters=True)
sch.vectorize(loop=l137)
sch.bind(loop=l136, thread_axis="threadIdx.x")
sch.unannotate(block_or_loop=b108, ann_key="meta_schedule.cooperative_fetch")
l138, l139, l140, l141, l142 = sch.get_loops(block=b108)
l143, l144, l145 = sch.split(loop=l142, factors=[None, 32, 4], preserve_unit_iters=True)
sch.vectorize(loop=l145)
sch.bind(loop=l144, thread_axis="threadIdx.x")
b146 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b146, ann_key="meta_schedule.unroll_explicit")
b147, b148, b149, b150, b151, b152, b153, b154, b155 = sch.get_child_blocks(b146)
l156, l157, l158, l159, l160, l161 = sch.get_loops(block=b147)
l162, l163, l164, l165, l166, l167 = sch.get_loops(block=b148)
sch.annotate(block_or_loop=l162, ann_key="pragma_auto_unroll_max_step", ann_val=1024)
sch.annotate(block_or_loop=l162, ann_key="pragma_unroll_explicit", ann_val=1)
l168, l169, l170, l171, l172, l173 = sch.get_loops(block=b149)
l174, l175, l176, l177, l178, l179, l180 = sch.get_loops(block=b150)
l181, l182, l183, l184, l185, l186, l187 = sch.get_loops(block=b151)
l188, l189, l190, l191, l192, l193, l194, l195, l196, l197, l198, l199, l200, l201 = sch.get_loops(block=b152)
sch.annotate(block_or_loop=l188, ann_key="pragma_auto_unroll_max_step", ann_val=1024)
sch.annotate(block_or_loop=l188, ann_key="pragma_unroll_explicit", ann_val=1)
l202, l203, l204, l205, l206, l207, l208 = sch.get_loops(block=b153)
l209, l210, l211, l212, l213, l214, l215, l216 = sch.get_loops(block=b154)
sch.annotate(block_or_loop=l209, ann_key="pragma_auto_unroll_max_step", ann_val=1024)
sch.annotate(block_or_loop=l209, ann_key="pragma_unroll_explicit", ann_val=1)
l217, l218, l219, l220 = sch.get_loops(block=b155)
b221 = sch.get_block(name="data_pack", func_name="main")
l222, l223, l224, l225, l226, l227 = sch.get_loops(block=b221)
b228 = sch.decompose_reduction(block=b221, loop=l226)
b229 = sch.get_block(name="bgemm", func_name="main")
l230, l231, l232, l233, l234, l235, l236, l237, l238, l239, l240, l241, l242, l243 = sch.get_loops(block=b229)
b244 = sch.decompose_reduction(block=b229, loop=l233)
b245 = sch.get_block(name="inverse", func_name="main")
l246, l247, l248, l249, l250, l251, l252, l253 = sch.get_loops(block=b245)
b254 = sch.decompose_reduction(block=b245, loop=l252)
2024-04-29 00:50:33 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu] Trial #400: GFLOPs: 517.5153. Time: 837.0176 us. Best GFLOPs: 7456.2467
2024-04-29 00:50:33 [INFO] [task_scheduler.cc:121] [Task #0: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu] Trial #401: Error in building:
LocalBuilder: Timeout, killed after 30.0 seconds
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(3), T.int64(224), T.int64(224)), "float32"), p1: T.Buffer((T.int64(6), T.int64(6), T.int64(3), T.int64(64)), "float32"), p2: T.Buffer((T.int64(1), T.int64(64), T.int64(1), T.int64(1)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(64), T.int64(224), T.int64(224)), "float32")):
        T.func_attr({"layout_free_buffers": [1], "tir.noalias": T.bool(True)})
        # with T.block("root"):
        input_tile_local = T.alloc_buffer((T.int64(3), T.int64(3136), T.int64(6), T.int64(6)), scope="local")
        data_pack = T.alloc_buffer((T.int64(6), T.int64(6), T.int64(3), T.int64(3136)))
        bgemm = T.alloc_buffer((T.int64(6), T.int64(6), T.int64(64), T.int64(3136)))
        inverse_local = T.alloc_buffer((T.int64(64), T.int64(3136), T.int64(4), T.int64(4)), scope="local")
        data_pack_local = T.alloc_buffer((T.int64(6), T.int64(6), T.int64(3), T.int64(3136)), scope="local")
        bgemm_local = T.alloc_buffer((T.int64(6), T.int64(6), T.int64(64), T.int64(3136)), scope="local")
        data_pack_shared = T.alloc_buffer((T.int64(6), T.int64(6), T.int64(3), T.int64(3136)), scope="shared")
        p1_shared = T.alloc_buffer((T.int64(6), T.int64(6), T.int64(3), T.int64(64)), scope="shared")
        for ci_p_fused_0 in T.thread_binding(T.int64(74), thread="blockIdx.x", annotations={"pragma_auto_unroll_max_step": 1024, "pragma_unroll_explicit": 1}):
            for ci_p_fused_1 in T.thread_binding(T.int64(128), thread="threadIdx.x"):
                for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(1), T.int64(6), T.int64(6)):
                    with T.block("input_tile"):
                        v_ci = T.axis.spatial(T.int64(3), (ci_p_fused_0 * T.int64(128) + ci_p_fused_1) // T.int64(3136) + ax0)
                        v_p = T.axis.spatial(T.int64(3136), (ci_p_fused_0 * T.int64(128) + ci_p_fused_1) % T.int64(3136) + ax1)
                        v_eps, v_nu = T.axis.remap("SS", [ax2, ax3])
                        T.where(ci_p_fused_0 * T.int64(128) + ci_p_fused_1 < T.int64(9408))
                        T.reads(p0[v_p // T.int64(3136), v_ci, v_p % T.int64(3136) // T.int64(56) * T.int64(4) + v_eps - T.int64(1), v_p % T.int64(56) * T.int64(4) + v_nu - T.int64(1)])
                        T.writes(input_tile_local[v_ci, v_p, v_eps, v_nu])
                        T.block_attr({"schedule_rule": "None"})
                        input_tile_local[v_ci, v_p, v_eps, v_nu] = T.if_then_else(T.int64(1) <= v_p % T.int64(3136) // T.int64(56) * T.int64(4) + v_eps and v_p % T.int64(3136) // T.int64(56) * T.int64(4) + v_eps < T.int64(225) and T.int64(1) <= v_p % T.int64(56) * T.int64(4) + v_nu and v_p % T.int64(56) * T.int64(4) + v_nu < T.int64(225), p0[v_p // T.int64(3136), v_ci, v_p % T.int64(3136) // T.int64(56) * T.int64(4) + v_eps - T.int64(1), v_p % T.int64(56) * T.int64(4) + v_nu - T.int64(1)], T.float32(0))
                for eps in T.unroll(T.int64(6)):
                    for nu in T.unroll(T.int64(6)):
                        with T.block("data_pack_init"):
                            v_eps, v_nu = T.axis.remap("SS", [eps, nu])
                            v_ci = T.axis.spatial(T.int64(3), (ci_p_fused_0 * T.int64(128) + ci_p_fused_1) // T.int64(3136))
                            v_p = T.axis.spatial(T.int64(3136), (ci_p_fused_0 * T.int64(128) + ci_p_fused_1) % T.int64(3136))
                            T.where(ci_p_fused_0 * T.int64(128) + ci_p_fused_1 < T.int64(9408))
                            T.reads()
                            T.writes(data_pack_local[v_eps, v_nu, v_ci, v_p])
                            T.block_attr({"schedule_rule": "conv2d_nchw_winograd_data_pack"})
                            data_pack_local[v_eps, v_nu, v_ci, v_p] = T.float32(0)
                        for r_a in T.unroll(T.int64(6)):
                            for r_b in T.unroll(T.int64(6)):
                                with T.block("data_pack_update"):
                                    v_eps, v_nu = T.axis.remap("SS", [eps, nu])
                                    v_ci = T.axis.spatial(T.int64(3), (ci_p_fused_0 * T.int64(128) + ci_p_fused_1) // T.int64(3136))
                                    v_p = T.axis.spatial(T.int64(3136), (ci_p_fused_0 * T.int64(128) + ci_p_fused_1) % T.int64(3136))
                                    v_r_a, v_r_b = T.axis.remap("RR", [r_a, r_b])
                                    T.where(ci_p_fused_0 * T.int64(128) + ci_p_fused_1 < T.int64(9408))
                                    T.reads(data_pack_local[v_eps, v_nu, v_ci, v_p], input_tile_local[v_ci, v_p, v_r_a, v_r_b])
                                    T.writes(data_pack_local[v_eps, v_nu, v_ci, v_p])
                                    T.block_attr({"schedule_rule": "conv2d_nchw_winograd_data_pack"})
                                    data_pack_local[v_eps, v_nu, v_ci, v_p] = data_pack_local[v_eps, v_nu, v_ci, v_p] + input_tile_local[v_ci, v_p, v_r_a, v_r_b] * T.Select(v_r_a % T.int64(6) == T.int64(5) and v_eps % T.int64(6) == T.int64(5), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(5) and v_eps % T.int64(6) == T.int64(4), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(5) and v_eps % T.int64(6) == T.int64(3), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(5) and v_eps % T.int64(6) == T.int64(2), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(5) and v_eps % T.int64(6) == T.int64(1), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(5) and v_eps % T.int64(6) == T.int64(0), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(4) and v_eps % T.int64(6) == T.int64(5), T.float32(1.5), T.Select(v_r_a % T.int64(6) == T.int64(4) and v_eps % T.int64(6) == T.int64(4), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(4) and v_eps % T.int64(6) == T.int64(3), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(4) and v_eps % T.int64(6) == T.int64(2), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(4) and v_eps % T.int64(6) == T.int64(1), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(4) and v_eps % T.int64(6) == T.int64(0), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(3) and v_eps % T.int64(6) == T.int64(5), T.float32(-2), T.Select(v_r_a % T.int64(6) == T.int64(3) and v_eps % T.int64(6) == T.int64(4), T.float32(-0.5), T.Select(v_r_a % T.int64(6) == T.int64(3) and v_eps % T.int64(6) == T.int64(3), T.float32(2), T.Select(v_r_a % T.int64(6) == T.int64(3) and v_eps % T.int64(6) == T.int64(2), T.float32(2.5), T.Select(v_r_a % T.int64(6) == T.int64(3) and v_eps % T.int64(6) == T.int64(1), T.float32(0.5), T.Select(v_r_a % T.int64(6) == T.int64(3) and v_eps % T.int64(6) == T.int64(0), T.float32(1.5), T.Select(v_r_a % T.int64(6) == T.int64(2) and v_eps % T.int64(6) == T.int64(5), T.float32(-1.5), T.Select(v_r_a % T.int64(6) == T.int64(2) and v_eps % T.int64(6) == T.int64(4), T.float32(-1), T.Select(v_r_a % T.int64(6) == T.int64(2) and v_eps % T.int64(6) == T.int64(3), T.float32(-1), T.Select(v_r_a % T.int64(6) == T.int64(2) and v_eps % T.int64(6) == T.int64(2), T.float32(0.5), T.Select(v_r_a % T.int64(6) == T.int64(2) and v_eps % T.int64(6) == T.int64(1), T.float32(-2.5), T.Select(v_r_a % T.int64(6) == T.int64(2) and v_eps % T.int64(6) == T.int64(0), T.float32(-2), T.Select(v_r_a % T.int64(6) == T.int64(1) and v_eps % T.int64(6) == T.int64(5), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(1) and v_eps % T.int64(6) == T.int64(4), T.float32(0.5), T.Select(v_r_a % T.int64(6) == T.int64(1) and v_eps % T.int64(6) == T.int64(3), T.float32(-2), T.Select(v_r_a % T.int64(6) == T.int64(1) and v_eps % T.int64(6) == T.int64(2), T.float32(-1), T.Select(v_r_a % T.int64(6) == T.int64(1) and v_eps % T.int64(6) == T.int64(1), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(1) and v_eps % T.int64(6) == T.int64(0), T.float32(-1.5), T.Select(v_r_a % T.int64(6) == T.int64(0) and v_eps % T.int64(6) == T.int64(5), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(0) and v_eps % T.int64(6) == T.int64(4), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(0) and v_eps % T.int64(6) == T.int64(3), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(0) and v_eps % T.int64(6) == T.int64(2), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(0) and v_eps % T.int64(6) == T.int64(1), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(0) and v_eps % T.int64(6) == T.int64(0), T.float32(1), T.float32(0))))))))))))))))))))))))))))))))))))) * T.Select(v_r_b % T.int64(6) == T.int64(5) and v_nu % T.int64(6) == T.int64(5), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(5) and v_nu % T.int64(6) == T.int64(4), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(5) and v_nu % T.int64(6) == T.int64(3), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(5) and v_nu % T.int64(6) == T.int64(2), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(5) and v_nu % T.int64(6) == T.int64(1), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(5) and v_nu % T.int64(6) == T.int64(0), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(4) and v_nu % T.int64(6) == T.int64(5), T.float32(1.5), T.Select(v_r_b % T.int64(6) == T.int64(4) and v_nu % T.int64(6) == T.int64(4), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(4) and v_nu % T.int64(6) == T.int64(3), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(4) and v_nu % T.int64(6) == T.int64(2), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(4) and v_nu % T.int64(6) == T.int64(1), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(4) and v_nu % T.int64(6) == T.int64(0), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(3) and v_nu % T.int64(6) == T.int64(5), T.float32(-2), T.Select(v_r_b % T.int64(6) == T.int64(3) and v_nu % T.int64(6) == T.int64(4), T.float32(-0.5), T.Select(v_r_b % T.int64(6) == T.int64(3) and v_nu % T.int64(6) == T.int64(3), T.float32(2), T.Select(v_r_b % T.int64(6) == T.int64(3) and v_nu % T.int64(6) == T.int64(2), T.float32(2.5), T.Select(v_r_b % T.int64(6) == T.int64(3) and v_nu % T.int64(6) == T.int64(1), T.float32(0.5), T.Select(v_r_b % T.int64(6) == T.int64(3) and v_nu % T.int64(6) == T.int64(0), T.float32(1.5), T.Select(v_r_b % T.int64(6) == T.int64(2) and v_nu % T.int64(6) == T.int64(5), T.float32(-1.5), T.Select(v_r_b % T.int64(6) == T.int64(2) and v_nu % T.int64(6) == T.int64(4), T.float32(-1), T.Select(v_r_b % T.int64(6) == T.int64(2) and v_nu % T.int64(6) == T.int64(3), T.float32(-1), T.Select(v_r_b % T.int64(6) == T.int64(2) and v_nu % T.int64(6) == T.int64(2), T.float32(0.5), T.Select(v_r_b % T.int64(6) == T.int64(2) and v_nu % T.int64(6) == T.int64(1), T.float32(-2.5), T.Select(v_r_b % T.int64(6) == T.int64(2) and v_nu % T.int64(6) == T.int64(0), T.float32(-2), T.Select(v_r_b % T.int64(6) == T.int64(1) and v_nu % T.int64(6) == T.int64(5), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(1) and v_nu % T.int64(6) == T.int64(4), T.float32(0.5), T.Select(v_r_b % T.int64(6) == T.int64(1) and v_nu % T.int64(6) == T.int64(3), T.float32(-2), T.Select(v_r_b % T.int64(6) == T.int64(1) and v_nu % T.int64(6) == T.int64(2), T.float32(-1), T.Select(v_r_b % T.int64(6) == T.int64(1) and v_nu % T.int64(6) == T.int64(1), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(1) and v_nu % T.int64(6) == T.int64(0), T.float32(-1.5), T.Select(v_r_b % T.int64(6) == T.int64(0) and v_nu % T.int64(6) == T.int64(5), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(0) and v_nu % T.int64(6) == T.int64(4), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(0) and v_nu % T.int64(6) == T.int64(3), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(0) and v_nu % T.int64(6) == T.int64(2), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(0) and v_nu % T.int64(6) == T.int64(1), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(0) and v_nu % T.int64(6) == T.int64(0), T.float32(1), T.float32(0)))))))))))))))))))))))))))))))))))))
                for ax0, ax1, ax2, ax3 in T.grid(T.int64(6), T.int64(6), T.int64(1), T.int64(1)):
                    with T.block("data_pack_local"):
                        v0, v1 = T.axis.remap("SS", [ax0, ax1])
                        v2 = T.axis.spatial(T.int64(3), (ci_p_fused_0 * T.int64(128) + ci_p_fused_1) // T.int64(3136) + ax2)
                        v3 = T.axis.spatial(T.int64(3136), (ci_p_fused_0 * T.int64(128) + ci_p_fused_1) % T.int64(3136) + ax3)
                        T.where(ci_p_fused_0 * T.int64(128) + ci_p_fused_1 < T.int64(9408))
                        T.reads(data_pack_local[v0, v1, v2, v3])
                        T.writes(data_pack[v0, v1, v2, v3])
                        data_pack[v0, v1, v2, v3] = data_pack_local[v0, v1, v2, v3]
        for eps_0_nu_0_co_0_p_0_fused in T.thread_binding(T.int64(28), thread="blockIdx.x", annotations={"pragma_auto_unroll_max_step": 1024, "pragma_unroll_explicit": 1}):
            for eps_1_nu_1_co_1_p_1_fused in T.thread_binding(T.int64(6), thread="vthread.x"):
                for eps_2_nu_2_co_2_p_2_fused in T.thread_binding(T.int64(32), thread="threadIdx.x"):
                    for eps_3_init, nu_3_init, co_3_init, p_3_init, eps_4_init, nu_4_init, co_4_init, p_4_init in T.grid(T.int64(3), T.int64(1), T.int64(4), T.int64(112), T.int64(1), T.int64(1), T.int64(1), T.int64(1)):
                        with T.block("bgemm_init"):
                            v_eps = T.axis.spatial(T.int64(6), eps_1_nu_1_co_1_p_1_fused // T.int64(3) * T.int64(3) + eps_3_init + eps_4_init)
                            v_nu = T.axis.spatial(T.int64(6), eps_1_nu_1_co_1_p_1_fused % T.int64(3) * T.int64(2) + eps_2_nu_2_co_2_p_2_fused // T.int64(16) + nu_3_init + nu_4_init)
                            v_co = T.axis.spatial(T.int64(64), eps_2_nu_2_co_2_p_2_fused % T.int64(16) * T.int64(4) + co_3_init + co_4_init)
                            v_p = T.axis.spatial(T.int64(3136), eps_0_nu_0_co_0_p_0_fused * T.int64(112) + p_3_init + p_4_init)
                            T.reads()
                            T.writes(bgemm_local[v_eps, v_nu, v_co, v_p])
                            T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 32, "meta_schedule.tiling_structure": "SSSRRSRS"})
                            bgemm_local[v_eps, v_nu, v_co, v_p] = T.float32(0)
                    for ci_0 in range(T.int64(3)):
                        for ax0_ax1_ax2_ax3_fused_0 in range(T.int64(32)):
                            for ax0_ax1_ax2_ax3_fused_1 in T.thread_binding(T.int64(32), thread="threadIdx.x"):
                                for ax0_ax1_ax2_ax3_fused_2 in T.vectorized(T.int64(4)):
                                    with T.block("data_pack_shared"):
                                        v0 = T.axis.spatial(T.int64(6), (ax0_ax1_ax2_ax3_fused_0 * T.int64(128) + ax0_ax1_ax2_ax3_fused_1 * T.int64(4) + ax0_ax1_ax2_ax3_fused_2) // T.int64(672))
                                        v1 = T.axis.spatial(T.int64(6), (ax0_ax1_ax2_ax3_fused_0 * T.int64(128) + ax0_ax1_ax2_ax3_fused_1 * T.int64(4) + ax0_ax1_ax2_ax3_fused_2) % T.int64(672) // T.int64(112))
                                        v2 = T.axis.spatial(T.int64(3), ci_0)
                                        v3 = T.axis.spatial(T.int64(3136), eps_0_nu_0_co_0_p_0_fused * T.int64(112) + (ax0_ax1_ax2_ax3_fused_0 * T.int64(128) + ax0_ax1_ax2_ax3_fused_1 * T.int64(4) + ax0_ax1_ax2_ax3_fused_2) % T.int64(112))
                                        T.where((ax0_ax1_ax2_ax3_fused_0 * T.int64(32) + ax0_ax1_ax2_ax3_fused_1) * T.int64(4) + ax0_ax1_ax2_ax3_fused_2 < T.int64(4032))
                                        T.reads(data_pack[v0, v1, v2, v3])
                                        T.writes(data_pack_shared[v0, v1, v2, v3])
                                        data_pack_shared[v0, v1, v2, v3] = data_pack[v0, v1, v2, v3]
                        for ax0_ax1_ax2_ax3_fused_0 in range(T.int64(18)):
                            for ax0_ax1_ax2_ax3_fused_1 in T.thread_binding(T.int64(32), thread="threadIdx.x"):
                                for ax0_ax1_ax2_ax3_fused_2 in T.vectorized(T.int64(4)):
                                    with T.block("p1_shared"):
                                        v0 = T.axis.spatial(T.int64(6), (ax0_ax1_ax2_ax3_fused_0 * T.int64(128) + ax0_ax1_ax2_ax3_fused_1 * T.int64(4) + ax0_ax1_ax2_ax3_fused_2) // T.int64(384))
                                        v1 = T.axis.spatial(T.int64(6), (ax0_ax1_ax2_ax3_fused_0 * T.int64(128) + ax0_ax1_ax2_ax3_fused_1 * T.int64(4) + ax0_ax1_ax2_ax3_fused_2) % T.int64(384) // T.int64(64))
                                        v2 = T.axis.spatial(T.int64(3), ci_0)
                                        v3 = T.axis.spatial(T.int64(64), (ax0_ax1_ax2_ax3_fused_0 * T.int64(128) + ax0_ax1_ax2_ax3_fused_1 * T.int64(4) + ax0_ax1_ax2_ax3_fused_2) % T.int64(64))
                                        T.reads(p1[v0, v1, v2, v3])
                                        T.writes(p1_shared[v0, v1, v2, v3])
                                        p1_shared[v0, v1, v2, v3] = p1[v0, v1, v2, v3]
                        for ci_1, eps_3, nu_3, co_3, p_3, ci_2, eps_4, nu_4, co_4, p_4 in T.grid(T.int64(1), T.int64(3), T.int64(1), T.int64(4), T.int64(112), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1)):
                            with T.block("bgemm_update"):
                                v_eps = T.axis.spatial(T.int64(6), eps_1_nu_1_co_1_p_1_fused // T.int64(3) * T.int64(3) + eps_3 + eps_4)
                                v_nu = T.axis.spatial(T.int64(6), eps_1_nu_1_co_1_p_1_fused % T.int64(3) * T.int64(2) + eps_2_nu_2_co_2_p_2_fused // T.int64(16) + nu_3 + nu_4)
                                v_co = T.axis.spatial(T.int64(64), eps_2_nu_2_co_2_p_2_fused % T.int64(16) * T.int64(4) + co_3 + co_4)
                                v_p = T.axis.spatial(T.int64(3136), eps_0_nu_0_co_0_p_0_fused * T.int64(112) + p_3 + p_4)
                                v_ci = T.axis.reduce(T.int64(3), ci_0 + ci_1 + ci_2)
                                T.reads(bgemm_local[v_eps, v_nu, v_co, v_p], data_pack_shared[v_eps, v_nu, v_ci, v_p], p1_shared[v_eps, v_nu, v_ci, v_co])
                                T.writes(bgemm_local[v_eps, v_nu, v_co, v_p])
                                T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 32, "meta_schedule.tiling_structure": "SSSRRSRS"})
                                bgemm_local[v_eps, v_nu, v_co, v_p] = bgemm_local[v_eps, v_nu, v_co, v_p] + data_pack_shared[v_eps, v_nu, v_ci, v_p] * p1_shared[v_eps, v_nu, v_ci, v_co]
                    for ax0, ax1, ax2, ax3 in T.grid(T.int64(3), T.int64(1), T.int64(4), T.int64(112)):
                        with T.block("bgemm_local"):
                            v0 = T.axis.spatial(T.int64(6), eps_1_nu_1_co_1_p_1_fused // T.int64(3) * T.int64(3) + ax0)
                            v1 = T.axis.spatial(T.int64(6), eps_1_nu_1_co_1_p_1_fused % T.int64(3) * T.int64(2) + eps_2_nu_2_co_2_p_2_fused // T.int64(16) + ax1)
                            v2 = T.axis.spatial(T.int64(64), eps_2_nu_2_co_2_p_2_fused % T.int64(16) * T.int64(4) + ax2)
                            v3 = T.axis.spatial(T.int64(3136), eps_0_nu_0_co_0_p_0_fused * T.int64(112) + ax3)
                            T.reads(bgemm_local[v0, v1, v2, v3])
                            T.writes(bgemm[v0, v1, v2, v3])
                            bgemm[v0, v1, v2, v3] = bgemm_local[v0, v1, v2, v3]
        for n_co_h_0_w_0_fused_0 in T.thread_binding(T.int64(784), thread="blockIdx.x", annotations={"pragma_auto_unroll_max_step": 1024, "pragma_unroll_explicit": 1}):
            for n_co_h_0_w_0_fused_1 in T.thread_binding(T.int64(256), thread="threadIdx.x"):
                for ax0, ax1 in T.grid(T.int64(1), T.int64(1)):
                    for ax2 in T.unroll(T.int64(4)):
                        for ax3 in T.unroll(T.int64(4)):
                            with T.block("inverse_init"):
                                v_co = T.axis.spatial(T.int64(64), (n_co_h_0_w_0_fused_0 * T.int64(256) + n_co_h_0_w_0_fused_1) // T.int64(3136) + ax0)
                                v_p = T.axis.spatial(T.int64(3136), (n_co_h_0_w_0_fused_0 * T.int64(256) + n_co_h_0_w_0_fused_1) % T.int64(3136) + ax1)
                                v_vh, v_vw = T.axis.remap("SS", [ax2, ax3])
                                T.reads()
                                T.writes(inverse_local[v_co, v_p, v_vh, v_vw])
                                T.block_attr({"schedule_rule": "conv2d_nchw_winograd_inverse"})
                                inverse_local[v_co, v_p, v_vh, v_vw] = T.float32(0)
                            for ax4 in T.unroll(T.int64(6)):
                                for ax5 in T.unroll(T.int64(6)):
                                    with T.block("inverse_update"):
                                        v_co = T.axis.spatial(T.int64(64), (n_co_h_0_w_0_fused_0 * T.int64(256) + n_co_h_0_w_0_fused_1) // T.int64(3136) + ax0)
                                        v_p = T.axis.spatial(T.int64(3136), (n_co_h_0_w_0_fused_0 * T.int64(256) + n_co_h_0_w_0_fused_1) % T.int64(3136) + ax1)
                                        v_vh, v_vw, v_r_a, v_r_b = T.axis.remap("SSRR", [ax2, ax3, ax4, ax5])
                                        T.reads(inverse_local[v_co, v_p, v_vh, v_vw], bgemm[v_r_a, v_r_b, v_co, v_p])
                                        T.writes(inverse_local[v_co, v_p, v_vh, v_vw])
                                        T.block_attr({"schedule_rule": "conv2d_nchw_winograd_inverse"})
                                        inverse_local[v_co, v_p, v_vh, v_vw] = inverse_local[v_co, v_p, v_vh, v_vw] + bgemm[v_r_a, v_r_b, v_co, v_p] * T.Select(v_r_a % T.int64(6) == T.int64(5) and v_vh % T.int64(4) == T.int64(3), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(5) and v_vh % T.int64(4) == T.int64(2), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(5) and v_vh % T.int64(4) == T.int64(1), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(5) and v_vh % T.int64(4) == T.int64(0), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(4) and v_vh % T.int64(4) == T.int64(3), T.float32(-8), T.Select(v_r_a % T.int64(6) == T.int64(4) and v_vh % T.int64(4) == T.int64(2), T.float32(4), T.Select(v_r_a % T.int64(6) == T.int64(4) and v_vh % T.int64(4) == T.int64(1), T.float32(-2), T.Select(v_r_a % T.int64(6) == T.int64(4) and v_vh % T.int64(4) == T.int64(0), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(3) and v_vh % T.int64(4) == T.int64(3), T.float32(0.125), T.Select(v_r_a % T.int64(6) == T.int64(3) and v_vh % T.int64(4) == T.int64(2), T.float32(0.25), T.Select(v_r_a % T.int64(6) == T.int64(3) and v_vh % T.int64(4) == T.int64(1), T.float32(0.5), T.Select(v_r_a % T.int64(6) == T.int64(3) and v_vh % T.int64(4) == T.int64(0), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(2) and v_vh % T.int64(4) == T.int64(3), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(2) and v_vh % T.int64(4) == T.int64(2), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(2) and v_vh % T.int64(4) == T.int64(1), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(2) and v_vh % T.int64(4) == T.int64(0), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(1) and v_vh % T.int64(4) == T.int64(3), T.float32(-1), T.Select(v_r_a % T.int64(6) == T.int64(1) and v_vh % T.int64(4) == T.int64(2), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(1) and v_vh % T.int64(4) == T.int64(1), T.float32(-1), T.Select(v_r_a % T.int64(6) == T.int64(1) and v_vh % T.int64(4) == T.int64(0), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(0) and v_vh % T.int64(4) == T.int64(3), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(0) and v_vh % T.int64(4) == T.int64(2), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(0) and v_vh % T.int64(4) == T.int64(1), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(0) and v_vh % T.int64(4) == T.int64(0), T.float32(1), T.float32(0))))))))))))))))))))))))) * T.Select(v_r_b % T.int64(6) == T.int64(5) and v_vw % T.int64(4) == T.int64(3), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(5) and v_vw % T.int64(4) == T.int64(2), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(5) and v_vw % T.int64(4) == T.int64(1), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(5) and v_vw % T.int64(4) == T.int64(0), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(4) and v_vw % T.int64(4) == T.int64(3), T.float32(-8), T.Select(v_r_b % T.int64(6) == T.int64(4) and v_vw % T.int64(4) == T.int64(2), T.float32(4), T.Select(v_r_b % T.int64(6) == T.int64(4) and v_vw % T.int64(4) == T.int64(1), T.float32(-2), T.Select(v_r_b % T.int64(6) == T.int64(4) and v_vw % T.int64(4) == T.int64(0), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(3) and v_vw % T.int64(4) == T.int64(3), T.float32(0.125), T.Select(v_r_b % T.int64(6) == T.int64(3) and v_vw % T.int64(4) == T.int64(2), T.float32(0.25), T.Select(v_r_b % T.int64(6) == T.int64(3) and v_vw % T.int64(4) == T.int64(1), T.float32(0.5), T.Select(v_r_b % T.int64(6) == T.int64(3) and v_vw % T.int64(4) == T.int64(0), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(2) and v_vw % T.int64(4) == T.int64(3), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(2) and v_vw % T.int64(4) == T.int64(2), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(2) and v_vw % T.int64(4) == T.int64(1), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(2) and v_vw % T.int64(4) == T.int64(0), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(1) and v_vw % T.int64(4) == T.int64(3), T.float32(-1), T.Select(v_r_b % T.int64(6) == T.int64(1) and v_vw % T.int64(4) == T.int64(2), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(1) and v_vw % T.int64(4) == T.int64(1), T.float32(-1), T.Select(v_r_b % T.int64(6) == T.int64(1) and v_vw % T.int64(4) == T.int64(0), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(0) and v_vw % T.int64(4) == T.int64(3), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(0) and v_vw % T.int64(4) == T.int64(2), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(0) and v_vw % T.int64(4) == T.int64(1), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(0) and v_vw % T.int64(4) == T.int64(0), T.float32(1), T.float32(0)))))))))))))))))))))))))
                for h_1, w_1 in T.grid(T.int64(4), T.int64(4)):
                    with T.block("conv2d_winograd"):
                        v_n = T.axis.spatial(T.int64(1), T.int64(0))
                        v_co = T.axis.spatial(T.int64(64), (n_co_h_0_w_0_fused_0 * T.int64(256) + n_co_h_0_w_0_fused_1) // T.int64(3136))
                        v_h = T.axis.spatial(T.int64(224), (n_co_h_0_w_0_fused_0 * T.int64(256) + n_co_h_0_w_0_fused_1) % T.int64(3136) // T.int64(56) * T.int64(4) + h_1)
                        v_w = T.axis.spatial(T.int64(224), (n_co_h_0_w_0_fused_0 * T.int64(256) + n_co_h_0_w_0_fused_1) % T.int64(56) * T.int64(4) + w_1)
                        T.reads(inverse_local[v_co, v_n * T.int64(3136) + v_h // T.int64(4) * T.int64(56) + v_w // T.int64(4), v_h % T.int64(4), v_w % T.int64(4)], p2[v_n, v_co, T.int64(0), T.int64(0)])
                        T.writes(T_relu[v_n, v_co, v_h, v_w])
                        T_relu[v_n, v_co, v_h, v_w] = T.max(inverse_local[v_co, v_n * T.int64(3136) + v_h // T.int64(4) * T.int64(56) + v_w // T.int64(4), v_h % T.int64(4), v_w % T.int64(4)] + p2[v_n, v_co, T.int64(0), T.int64(0)], T.float32(0))
b0 = sch.get_block(name="data_pack", func_name="main")
b1 = sch.get_block(name="bgemm", func_name="main")
b2 = sch.get_block(name="inverse", func_name="main")
b3 = sch.get_block(name="conv2d_winograd", func_name="main")
b4 = sch.get_block(name="T_add", func_name="main")
b5 = sch.get_block(name="T_relu", func_name="main")
b6 = sch.get_block(name="root", func_name="main")
b7, b8 = sch.get_producers(block=b2)
sch.compute_inline(block=b8)
b9, = sch.get_consumers(block=b2)
l10, l11, l12, l13 = sch.get_loops(block=b9)
l14, l15 = sch.split(loop=l12, factors=[None, 4], preserve_unit_iters=True)
l16, l17 = sch.split(loop=l13, factors=[None, 4], preserve_unit_iters=True)
sch.reorder(l14, l16, l15, l17)
sch.compute_at(block=b2, loop=l16, preserve_unit_loops=True, index=-1)
sch.set_scope(block=b2, buffer_index=0, storage_scope="local")
l18, l19, l20, l21, l22, l23, l24, l25, l26, l27 = sch.get_loops(block=b2)
sch.unroll(loop=l24)
sch.unroll(loop=l25)
sch.unroll(loop=l26)
sch.unroll(loop=l27)
b28, b29 = sch.get_producers(block=b0)
sch.compute_inline(block=b29)
b30, = sch.get_producers(block=b28)
l31, l32, l33, l34, l35, l36 = sch.get_loops(block=b0)
sch.reorder(l33, l34, l31, l32, l35, l36)
sch.unroll(loop=l31)
sch.unroll(loop=l32)
sch.unroll(loop=l35)
sch.unroll(loop=l36)
l37 = sch.fuse(l33, l34, preserve_unit_iters=True)
v38 = sch.sample_categorical(candidates=[32, 64, 128, 256, 512, 1024], probs=[0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666], decision=2)
l39, l40 = sch.split(loop=l37, factors=[None, v38], preserve_unit_iters=True)
sch.bind(loop=l39, thread_axis="blockIdx.x")
sch.bind(loop=l40, thread_axis="threadIdx.x")
b41 = sch.cache_write(block=b0, write_buffer_index=0, storage_scope="local")
sch.reverse_compute_at(block=b41, loop=l40, preserve_unit_loops=True, index=-1)
sch.compute_at(block=b28, loop=l40, preserve_unit_loops=True, index=-1)
sch.set_scope(block=b28, buffer_index=0, storage_scope="local")
sch.compute_inline(block=b30)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSSRRSRS")
l42, l43, l44, l45, l46 = sch.get_loops(block=b1)
v47, v48, v49, v50, v51 = sch.sample_perfect_tile(loop=l42, n=5, max_innermost_factor=64, decision=[1, 2, 1, 3, 1])
l52, l53, l54, l55, l56 = sch.split(loop=l42, factors=[v47, v48, v49, v50, v51], preserve_unit_iters=True)
v57, v58, v59, v60, v61 = sch.sample_perfect_tile(loop=l43, n=5, max_innermost_factor=64, decision=[1, 3, 2, 1, 1])
l62, l63, l64, l65, l66 = sch.split(loop=l43, factors=[v57, v58, v59, v60, v61], preserve_unit_iters=True)
v67, v68, v69, v70, v71 = sch.sample_perfect_tile(loop=l44, n=5, max_innermost_factor=64, decision=[1, 1, 16, 4, 1])
l72, l73, l74, l75, l76 = sch.split(loop=l44, factors=[v67, v68, v69, v70, v71], preserve_unit_iters=True)
v77, v78, v79, v80, v81 = sch.sample_perfect_tile(loop=l45, n=5, max_innermost_factor=64, decision=[28, 1, 1, 112, 1])
l82, l83, l84, l85, l86 = sch.split(loop=l45, factors=[v77, v78, v79, v80, v81], preserve_unit_iters=True)
v87, v88, v89 = sch.sample_perfect_tile(loop=l46, n=3, max_innermost_factor=64, decision=[3, 1, 1])
l90, l91, l92 = sch.split(loop=l46, factors=[v87, v88, v89], preserve_unit_iters=True)
sch.reorder(l52, l62, l72, l82, l53, l63, l73, l83, l54, l64, l74, l84, l90, l91, l55, l65, l75, l85, l92, l56, l66, l76, l86)
l93 = sch.fuse(l52, l62, l72, l82, preserve_unit_iters=True)
sch.bind(loop=l93, thread_axis="blockIdx.x")
l94 = sch.fuse(l53, l63, l73, l83, preserve_unit_iters=True)
sch.bind(loop=l94, thread_axis="vthread.x")
l95 = sch.fuse(l54, l64, l74, l84, preserve_unit_iters=True)
sch.bind(loop=l95, thread_axis="threadIdx.x")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_low_inclusive", ann_val=32)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_high_inclusive", ann_val=1024)
b96 = sch.cache_write(block=b1, write_buffer_index=0, storage_scope="local")
sch.reverse_compute_at(block=b96, loop=l95, preserve_unit_loops=True, index=-1)
b97 = sch.cache_read(block=b1, read_buffer_index=0, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b97, loop=l90, preserve_unit_loops=True, index=-1)
l98, l99, l100, l101, l102, l103, l104, l105 = sch.get_loops(block=b97)
l106 = sch.fuse(l102, l103, l104, l105, preserve_unit_iters=True)
v107 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b97, ann_key="meta_schedule.cooperative_fetch", ann_val=v107)
b108 = sch.cache_read(block=b1, read_buffer_index=1, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b108, loop=l90, preserve_unit_loops=True, index=-1)
l109, l110, l111, l112, l113, l114, l115, l116 = sch.get_loops(block=b108)
l117 = sch.fuse(l113, l114, l115, l116, preserve_unit_iters=True)
v118 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b108, ann_key="meta_schedule.cooperative_fetch", ann_val=v118)
sch.reverse_compute_inline(block=b5)
sch.reverse_compute_inline(block=b4)
v119 = sch.sample_categorical(candidates=[0, 16, 64, 512, 1024], probs=[0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001], decision=4)
sch.annotate(block_or_loop=b6, ann_key="meta_schedule.unroll_explicit", ann_val=v119)
l120, l121, l122, l123, l124, l125 = sch.get_loops(block=b3)
l126 = sch.fuse(l120, l121, l122, l123, preserve_unit_iters=True)
v127 = sch.sample_categorical(candidates=[32, 64, 128, 256, 512, 1024], probs=[0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666], decision=3)
l128, l129 = sch.split(loop=l126, factors=[None, v127], preserve_unit_iters=True)
sch.bind(loop=l128, thread_axis="blockIdx.x")
sch.bind(loop=l129, thread_axis="threadIdx.x")
sch.enter_postproc()
sch.unannotate(block_or_loop=b97, ann_key="meta_schedule.cooperative_fetch")
l130, l131, l132, l133, l134 = sch.get_loops(block=b97)
l135, l136, l137 = sch.split(loop=l134, factors=[None, 32, 4], preserve_unit_iters=True)
sch.vectorize(loop=l137)
sch.bind(loop=l136, thread_axis="threadIdx.x")
sch.unannotate(block_or_loop=b108, ann_key="meta_schedule.cooperative_fetch")
l138, l139, l140, l141, l142 = sch.get_loops(block=b108)
l143, l144, l145 = sch.split(loop=l142, factors=[None, 32, 4], preserve_unit_iters=True)
sch.vectorize(loop=l145)
sch.bind(loop=l144, thread_axis="threadIdx.x")
b146 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b146, ann_key="meta_schedule.unroll_explicit")
b147, b148, b149, b150, b151, b152, b153, b154, b155 = sch.get_child_blocks(b146)
l156, l157, l158, l159, l160, l161 = sch.get_loops(block=b147)
l162, l163, l164, l165, l166, l167 = sch.get_loops(block=b148)
sch.annotate(block_or_loop=l162, ann_key="pragma_auto_unroll_max_step", ann_val=1024)
sch.annotate(block_or_loop=l162, ann_key="pragma_unroll_explicit", ann_val=1)
l168, l169, l170, l171, l172, l173 = sch.get_loops(block=b149)
l174, l175, l176, l177, l178, l179, l180 = sch.get_loops(block=b150)
l181, l182, l183, l184, l185, l186, l187 = sch.get_loops(block=b151)
l188, l189, l190, l191, l192, l193, l194, l195, l196, l197, l198, l199, l200, l201 = sch.get_loops(block=b152)
sch.annotate(block_or_loop=l188, ann_key="pragma_auto_unroll_max_step", ann_val=1024)
sch.annotate(block_or_loop=l188, ann_key="pragma_unroll_explicit", ann_val=1)
l202, l203, l204, l205, l206, l207, l208 = sch.get_loops(block=b153)
l209, l210, l211, l212, l213, l214, l215, l216 = sch.get_loops(block=b154)
sch.annotate(block_or_loop=l209, ann_key="pragma_auto_unroll_max_step", ann_val=1024)
sch.annotate(block_or_loop=l209, ann_key="pragma_unroll_explicit", ann_val=1)
l217, l218, l219, l220 = sch.get_loops(block=b155)
b221 = sch.get_block(name="data_pack", func_name="main")
l222, l223, l224, l225, l226, l227 = sch.get_loops(block=b221)
b228 = sch.decompose_reduction(block=b221, loop=l226)
b229 = sch.get_block(name="bgemm", func_name="main")
l230, l231, l232, l233, l234, l235, l236, l237, l238, l239, l240, l241, l242, l243 = sch.get_loops(block=b229)
b244 = sch.decompose_reduction(block=b229, loop=l233)
b245 = sch.get_block(name="inverse", func_name="main")
l246, l247, l248, l249, l250, l251, l252, l253 = sch.get_loops(block=b245)
b254 = sch.decompose_reduction(block=b245, loop=l252)
2024-04-29 00:50:33 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu] Trial #402: GFLOPs: 914.0280. Time: 473.9126 us. Best GFLOPs: 7456.2467
2024-04-29 00:50:33 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu] Trial #403: GFLOPs: 717.3882. Time: 603.8145 us. Best GFLOPs: 7456.2467
2024-04-29 00:50:33 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu] Trial #404: GFLOPs: 533.0740. Time: 812.5877 us. Best GFLOPs: 7456.2467
2024-04-29 00:50:33 [INFO] [task_scheduler.cc:121] [Task #0: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu] Trial #405: Error in building:
LocalBuilder: Timeout, killed after 30.0 seconds
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(3), T.int64(224), T.int64(224)), "float32"), p1: T.Buffer((T.int64(6), T.int64(6), T.int64(3), T.int64(64)), "float32"), p2: T.Buffer((T.int64(1), T.int64(64), T.int64(1), T.int64(1)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(64), T.int64(224), T.int64(224)), "float32")):
        T.func_attr({"layout_free_buffers": [1], "tir.noalias": T.bool(True)})
        # with T.block("root"):
        input_tile_local = T.alloc_buffer((T.int64(3), T.int64(3136), T.int64(6), T.int64(6)), scope="local")
        data_pack = T.alloc_buffer((T.int64(6), T.int64(6), T.int64(3), T.int64(3136)))
        bgemm = T.alloc_buffer((T.int64(6), T.int64(6), T.int64(64), T.int64(3136)))
        inverse_local = T.alloc_buffer((T.int64(64), T.int64(3136), T.int64(4), T.int64(4)), scope="local")
        data_pack_local = T.alloc_buffer((T.int64(6), T.int64(6), T.int64(3), T.int64(3136)), scope="local")
        bgemm_local = T.alloc_buffer((T.int64(6), T.int64(6), T.int64(64), T.int64(3136)), scope="local")
        data_pack_shared = T.alloc_buffer((T.int64(6), T.int64(6), T.int64(3), T.int64(3136)), scope="shared")
        p1_shared = T.alloc_buffer((T.int64(6), T.int64(6), T.int64(3), T.int64(64)), scope="shared")
        for ci_p_fused_0 in T.thread_binding(T.int64(74), thread="blockIdx.x", annotations={"pragma_auto_unroll_max_step": 1024, "pragma_unroll_explicit": 1}):
            for ci_p_fused_1 in T.thread_binding(T.int64(128), thread="threadIdx.x"):
                for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(1), T.int64(6), T.int64(6)):
                    with T.block("input_tile"):
                        v_ci = T.axis.spatial(T.int64(3), (ci_p_fused_0 * T.int64(128) + ci_p_fused_1) // T.int64(3136) + ax0)
                        v_p = T.axis.spatial(T.int64(3136), (ci_p_fused_0 * T.int64(128) + ci_p_fused_1) % T.int64(3136) + ax1)
                        v_eps, v_nu = T.axis.remap("SS", [ax2, ax3])
                        T.where(ci_p_fused_0 * T.int64(128) + ci_p_fused_1 < T.int64(9408))
                        T.reads(p0[v_p // T.int64(3136), v_ci, v_p % T.int64(3136) // T.int64(56) * T.int64(4) + v_eps - T.int64(1), v_p % T.int64(56) * T.int64(4) + v_nu - T.int64(1)])
                        T.writes(input_tile_local[v_ci, v_p, v_eps, v_nu])
                        T.block_attr({"schedule_rule": "None"})
                        input_tile_local[v_ci, v_p, v_eps, v_nu] = T.if_then_else(T.int64(1) <= v_p % T.int64(3136) // T.int64(56) * T.int64(4) + v_eps and v_p % T.int64(3136) // T.int64(56) * T.int64(4) + v_eps < T.int64(225) and T.int64(1) <= v_p % T.int64(56) * T.int64(4) + v_nu and v_p % T.int64(56) * T.int64(4) + v_nu < T.int64(225), p0[v_p // T.int64(3136), v_ci, v_p % T.int64(3136) // T.int64(56) * T.int64(4) + v_eps - T.int64(1), v_p % T.int64(56) * T.int64(4) + v_nu - T.int64(1)], T.float32(0))
                for eps in T.unroll(T.int64(6)):
                    for nu in T.unroll(T.int64(6)):
                        with T.block("data_pack_init"):
                            v_eps, v_nu = T.axis.remap("SS", [eps, nu])
                            v_ci = T.axis.spatial(T.int64(3), (ci_p_fused_0 * T.int64(128) + ci_p_fused_1) // T.int64(3136))
                            v_p = T.axis.spatial(T.int64(3136), (ci_p_fused_0 * T.int64(128) + ci_p_fused_1) % T.int64(3136))
                            T.where(ci_p_fused_0 * T.int64(128) + ci_p_fused_1 < T.int64(9408))
                            T.reads()
                            T.writes(data_pack_local[v_eps, v_nu, v_ci, v_p])
                            T.block_attr({"schedule_rule": "conv2d_nchw_winograd_data_pack"})
                            data_pack_local[v_eps, v_nu, v_ci, v_p] = T.float32(0)
                        for r_a in T.unroll(T.int64(6)):
                            for r_b in T.unroll(T.int64(6)):
                                with T.block("data_pack_update"):
                                    v_eps, v_nu = T.axis.remap("SS", [eps, nu])
                                    v_ci = T.axis.spatial(T.int64(3), (ci_p_fused_0 * T.int64(128) + ci_p_fused_1) // T.int64(3136))
                                    v_p = T.axis.spatial(T.int64(3136), (ci_p_fused_0 * T.int64(128) + ci_p_fused_1) % T.int64(3136))
                                    v_r_a, v_r_b = T.axis.remap("RR", [r_a, r_b])
                                    T.where(ci_p_fused_0 * T.int64(128) + ci_p_fused_1 < T.int64(9408))
                                    T.reads(data_pack_local[v_eps, v_nu, v_ci, v_p], input_tile_local[v_ci, v_p, v_r_a, v_r_b])
                                    T.writes(data_pack_local[v_eps, v_nu, v_ci, v_p])
                                    T.block_attr({"schedule_rule": "conv2d_nchw_winograd_data_pack"})
                                    data_pack_local[v_eps, v_nu, v_ci, v_p] = data_pack_local[v_eps, v_nu, v_ci, v_p] + input_tile_local[v_ci, v_p, v_r_a, v_r_b] * T.Select(v_r_a % T.int64(6) == T.int64(5) and v_eps % T.int64(6) == T.int64(5), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(5) and v_eps % T.int64(6) == T.int64(4), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(5) and v_eps % T.int64(6) == T.int64(3), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(5) and v_eps % T.int64(6) == T.int64(2), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(5) and v_eps % T.int64(6) == T.int64(1), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(5) and v_eps % T.int64(6) == T.int64(0), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(4) and v_eps % T.int64(6) == T.int64(5), T.float32(1.5), T.Select(v_r_a % T.int64(6) == T.int64(4) and v_eps % T.int64(6) == T.int64(4), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(4) and v_eps % T.int64(6) == T.int64(3), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(4) and v_eps % T.int64(6) == T.int64(2), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(4) and v_eps % T.int64(6) == T.int64(1), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(4) and v_eps % T.int64(6) == T.int64(0), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(3) and v_eps % T.int64(6) == T.int64(5), T.float32(-2), T.Select(v_r_a % T.int64(6) == T.int64(3) and v_eps % T.int64(6) == T.int64(4), T.float32(-0.5), T.Select(v_r_a % T.int64(6) == T.int64(3) and v_eps % T.int64(6) == T.int64(3), T.float32(2), T.Select(v_r_a % T.int64(6) == T.int64(3) and v_eps % T.int64(6) == T.int64(2), T.float32(2.5), T.Select(v_r_a % T.int64(6) == T.int64(3) and v_eps % T.int64(6) == T.int64(1), T.float32(0.5), T.Select(v_r_a % T.int64(6) == T.int64(3) and v_eps % T.int64(6) == T.int64(0), T.float32(1.5), T.Select(v_r_a % T.int64(6) == T.int64(2) and v_eps % T.int64(6) == T.int64(5), T.float32(-1.5), T.Select(v_r_a % T.int64(6) == T.int64(2) and v_eps % T.int64(6) == T.int64(4), T.float32(-1), T.Select(v_r_a % T.int64(6) == T.int64(2) and v_eps % T.int64(6) == T.int64(3), T.float32(-1), T.Select(v_r_a % T.int64(6) == T.int64(2) and v_eps % T.int64(6) == T.int64(2), T.float32(0.5), T.Select(v_r_a % T.int64(6) == T.int64(2) and v_eps % T.int64(6) == T.int64(1), T.float32(-2.5), T.Select(v_r_a % T.int64(6) == T.int64(2) and v_eps % T.int64(6) == T.int64(0), T.float32(-2), T.Select(v_r_a % T.int64(6) == T.int64(1) and v_eps % T.int64(6) == T.int64(5), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(1) and v_eps % T.int64(6) == T.int64(4), T.float32(0.5), T.Select(v_r_a % T.int64(6) == T.int64(1) and v_eps % T.int64(6) == T.int64(3), T.float32(-2), T.Select(v_r_a % T.int64(6) == T.int64(1) and v_eps % T.int64(6) == T.int64(2), T.float32(-1), T.Select(v_r_a % T.int64(6) == T.int64(1) and v_eps % T.int64(6) == T.int64(1), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(1) and v_eps % T.int64(6) == T.int64(0), T.float32(-1.5), T.Select(v_r_a % T.int64(6) == T.int64(0) and v_eps % T.int64(6) == T.int64(5), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(0) and v_eps % T.int64(6) == T.int64(4), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(0) and v_eps % T.int64(6) == T.int64(3), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(0) and v_eps % T.int64(6) == T.int64(2), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(0) and v_eps % T.int64(6) == T.int64(1), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(0) and v_eps % T.int64(6) == T.int64(0), T.float32(1), T.float32(0))))))))))))))))))))))))))))))))))))) * T.Select(v_r_b % T.int64(6) == T.int64(5) and v_nu % T.int64(6) == T.int64(5), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(5) and v_nu % T.int64(6) == T.int64(4), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(5) and v_nu % T.int64(6) == T.int64(3), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(5) and v_nu % T.int64(6) == T.int64(2), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(5) and v_nu % T.int64(6) == T.int64(1), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(5) and v_nu % T.int64(6) == T.int64(0), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(4) and v_nu % T.int64(6) == T.int64(5), T.float32(1.5), T.Select(v_r_b % T.int64(6) == T.int64(4) and v_nu % T.int64(6) == T.int64(4), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(4) and v_nu % T.int64(6) == T.int64(3), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(4) and v_nu % T.int64(6) == T.int64(2), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(4) and v_nu % T.int64(6) == T.int64(1), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(4) and v_nu % T.int64(6) == T.int64(0), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(3) and v_nu % T.int64(6) == T.int64(5), T.float32(-2), T.Select(v_r_b % T.int64(6) == T.int64(3) and v_nu % T.int64(6) == T.int64(4), T.float32(-0.5), T.Select(v_r_b % T.int64(6) == T.int64(3) and v_nu % T.int64(6) == T.int64(3), T.float32(2), T.Select(v_r_b % T.int64(6) == T.int64(3) and v_nu % T.int64(6) == T.int64(2), T.float32(2.5), T.Select(v_r_b % T.int64(6) == T.int64(3) and v_nu % T.int64(6) == T.int64(1), T.float32(0.5), T.Select(v_r_b % T.int64(6) == T.int64(3) and v_nu % T.int64(6) == T.int64(0), T.float32(1.5), T.Select(v_r_b % T.int64(6) == T.int64(2) and v_nu % T.int64(6) == T.int64(5), T.float32(-1.5), T.Select(v_r_b % T.int64(6) == T.int64(2) and v_nu % T.int64(6) == T.int64(4), T.float32(-1), T.Select(v_r_b % T.int64(6) == T.int64(2) and v_nu % T.int64(6) == T.int64(3), T.float32(-1), T.Select(v_r_b % T.int64(6) == T.int64(2) and v_nu % T.int64(6) == T.int64(2), T.float32(0.5), T.Select(v_r_b % T.int64(6) == T.int64(2) and v_nu % T.int64(6) == T.int64(1), T.float32(-2.5), T.Select(v_r_b % T.int64(6) == T.int64(2) and v_nu % T.int64(6) == T.int64(0), T.float32(-2), T.Select(v_r_b % T.int64(6) == T.int64(1) and v_nu % T.int64(6) == T.int64(5), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(1) and v_nu % T.int64(6) == T.int64(4), T.float32(0.5), T.Select(v_r_b % T.int64(6) == T.int64(1) and v_nu % T.int64(6) == T.int64(3), T.float32(-2), T.Select(v_r_b % T.int64(6) == T.int64(1) and v_nu % T.int64(6) == T.int64(2), T.float32(-1), T.Select(v_r_b % T.int64(6) == T.int64(1) and v_nu % T.int64(6) == T.int64(1), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(1) and v_nu % T.int64(6) == T.int64(0), T.float32(-1.5), T.Select(v_r_b % T.int64(6) == T.int64(0) and v_nu % T.int64(6) == T.int64(5), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(0) and v_nu % T.int64(6) == T.int64(4), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(0) and v_nu % T.int64(6) == T.int64(3), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(0) and v_nu % T.int64(6) == T.int64(2), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(0) and v_nu % T.int64(6) == T.int64(1), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(0) and v_nu % T.int64(6) == T.int64(0), T.float32(1), T.float32(0)))))))))))))))))))))))))))))))))))))
                for ax0, ax1, ax2, ax3 in T.grid(T.int64(6), T.int64(6), T.int64(1), T.int64(1)):
                    with T.block("data_pack_local"):
                        v0, v1 = T.axis.remap("SS", [ax0, ax1])
                        v2 = T.axis.spatial(T.int64(3), (ci_p_fused_0 * T.int64(128) + ci_p_fused_1) // T.int64(3136) + ax2)
                        v3 = T.axis.spatial(T.int64(3136), (ci_p_fused_0 * T.int64(128) + ci_p_fused_1) % T.int64(3136) + ax3)
                        T.where(ci_p_fused_0 * T.int64(128) + ci_p_fused_1 < T.int64(9408))
                        T.reads(data_pack_local[v0, v1, v2, v3])
                        T.writes(data_pack[v0, v1, v2, v3])
                        data_pack[v0, v1, v2, v3] = data_pack_local[v0, v1, v2, v3]
        for eps_0_nu_0_co_0_p_0_fused in T.thread_binding(T.int64(28), thread="blockIdx.x", annotations={"pragma_auto_unroll_max_step": 1024, "pragma_unroll_explicit": 1}):
            for eps_1_nu_1_co_1_p_1_fused in T.thread_binding(T.int64(6), thread="vthread.x"):
                for eps_2_nu_2_co_2_p_2_fused in T.thread_binding(T.int64(32), thread="threadIdx.x"):
                    for eps_3_init, nu_3_init, co_3_init, p_3_init, eps_4_init, nu_4_init, co_4_init, p_4_init in T.grid(T.int64(3), T.int64(1), T.int64(4), T.int64(112), T.int64(1), T.int64(1), T.int64(1), T.int64(1)):
                        with T.block("bgemm_init"):
                            v_eps = T.axis.spatial(T.int64(6), eps_1_nu_1_co_1_p_1_fused // T.int64(3) * T.int64(3) + eps_3_init + eps_4_init)
                            v_nu = T.axis.spatial(T.int64(6), eps_1_nu_1_co_1_p_1_fused % T.int64(3) * T.int64(2) + eps_2_nu_2_co_2_p_2_fused // T.int64(16) + nu_3_init + nu_4_init)
                            v_co = T.axis.spatial(T.int64(64), eps_2_nu_2_co_2_p_2_fused % T.int64(16) * T.int64(4) + co_3_init + co_4_init)
                            v_p = T.axis.spatial(T.int64(3136), eps_0_nu_0_co_0_p_0_fused * T.int64(112) + p_3_init + p_4_init)
                            T.reads()
                            T.writes(bgemm_local[v_eps, v_nu, v_co, v_p])
                            T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 32, "meta_schedule.tiling_structure": "SSSRRSRS"})
                            bgemm_local[v_eps, v_nu, v_co, v_p] = T.float32(0)
                    for ci_0 in range(T.int64(3)):
                        for ax0_ax1_ax2_ax3_fused_0 in range(T.int64(126)):
                            for ax0_ax1_ax2_ax3_fused_1 in T.thread_binding(T.int64(32), thread="threadIdx.x"):
                                with T.block("data_pack_shared"):
                                    v0 = T.axis.spatial(T.int64(6), (ax0_ax1_ax2_ax3_fused_0 * T.int64(32) + ax0_ax1_ax2_ax3_fused_1) // T.int64(672))
                                    v1 = T.axis.spatial(T.int64(6), (ax0_ax1_ax2_ax3_fused_0 * T.int64(32) + ax0_ax1_ax2_ax3_fused_1) % T.int64(672) // T.int64(112))
                                    v2 = T.axis.spatial(T.int64(3), ci_0)
                                    v3 = T.axis.spatial(T.int64(3136), eps_0_nu_0_co_0_p_0_fused * T.int64(112) + (ax0_ax1_ax2_ax3_fused_0 * T.int64(32) + ax0_ax1_ax2_ax3_fused_1) % T.int64(112))
                                    T.reads(data_pack[v0, v1, v2, v3])
                                    T.writes(data_pack_shared[v0, v1, v2, v3])
                                    data_pack_shared[v0, v1, v2, v3] = data_pack[v0, v1, v2, v3]
                        for ax0_ax1_ax2_ax3_fused_0 in range(T.int64(18)):
                            for ax0_ax1_ax2_ax3_fused_1 in T.thread_binding(T.int64(32), thread="threadIdx.x"):
                                for ax0_ax1_ax2_ax3_fused_2 in T.vectorized(T.int64(4)):
                                    with T.block("p1_shared"):
                                        v0 = T.axis.spatial(T.int64(6), (ax0_ax1_ax2_ax3_fused_0 * T.int64(128) + ax0_ax1_ax2_ax3_fused_1 * T.int64(4) + ax0_ax1_ax2_ax3_fused_2) // T.int64(384))
                                        v1 = T.axis.spatial(T.int64(6), (ax0_ax1_ax2_ax3_fused_0 * T.int64(128) + ax0_ax1_ax2_ax3_fused_1 * T.int64(4) + ax0_ax1_ax2_ax3_fused_2) % T.int64(384) // T.int64(64))
                                        v2 = T.axis.spatial(T.int64(3), ci_0)
                                        v3 = T.axis.spatial(T.int64(64), (ax0_ax1_ax2_ax3_fused_0 * T.int64(128) + ax0_ax1_ax2_ax3_fused_1 * T.int64(4) + ax0_ax1_ax2_ax3_fused_2) % T.int64(64))
                                        T.reads(p1[v0, v1, v2, v3])
                                        T.writes(p1_shared[v0, v1, v2, v3])
                                        p1_shared[v0, v1, v2, v3] = p1[v0, v1, v2, v3]
                        for ci_1, eps_3, nu_3, co_3, p_3, ci_2, eps_4, nu_4, co_4, p_4 in T.grid(T.int64(1), T.int64(3), T.int64(1), T.int64(4), T.int64(112), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1)):
                            with T.block("bgemm_update"):
                                v_eps = T.axis.spatial(T.int64(6), eps_1_nu_1_co_1_p_1_fused // T.int64(3) * T.int64(3) + eps_3 + eps_4)
                                v_nu = T.axis.spatial(T.int64(6), eps_1_nu_1_co_1_p_1_fused % T.int64(3) * T.int64(2) + eps_2_nu_2_co_2_p_2_fused // T.int64(16) + nu_3 + nu_4)
                                v_co = T.axis.spatial(T.int64(64), eps_2_nu_2_co_2_p_2_fused % T.int64(16) * T.int64(4) + co_3 + co_4)
                                v_p = T.axis.spatial(T.int64(3136), eps_0_nu_0_co_0_p_0_fused * T.int64(112) + p_3 + p_4)
                                v_ci = T.axis.reduce(T.int64(3), ci_0 + ci_1 + ci_2)
                                T.reads(bgemm_local[v_eps, v_nu, v_co, v_p], data_pack_shared[v_eps, v_nu, v_ci, v_p], p1_shared[v_eps, v_nu, v_ci, v_co])
                                T.writes(bgemm_local[v_eps, v_nu, v_co, v_p])
                                T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 32, "meta_schedule.tiling_structure": "SSSRRSRS"})
                                bgemm_local[v_eps, v_nu, v_co, v_p] = bgemm_local[v_eps, v_nu, v_co, v_p] + data_pack_shared[v_eps, v_nu, v_ci, v_p] * p1_shared[v_eps, v_nu, v_ci, v_co]
                    for ax0, ax1, ax2, ax3 in T.grid(T.int64(3), T.int64(1), T.int64(4), T.int64(112)):
                        with T.block("bgemm_local"):
                            v0 = T.axis.spatial(T.int64(6), eps_1_nu_1_co_1_p_1_fused // T.int64(3) * T.int64(3) + ax0)
                            v1 = T.axis.spatial(T.int64(6), eps_1_nu_1_co_1_p_1_fused % T.int64(3) * T.int64(2) + eps_2_nu_2_co_2_p_2_fused // T.int64(16) + ax1)
                            v2 = T.axis.spatial(T.int64(64), eps_2_nu_2_co_2_p_2_fused % T.int64(16) * T.int64(4) + ax2)
                            v3 = T.axis.spatial(T.int64(3136), eps_0_nu_0_co_0_p_0_fused * T.int64(112) + ax3)
                            T.reads(bgemm_local[v0, v1, v2, v3])
                            T.writes(bgemm[v0, v1, v2, v3])
                            bgemm[v0, v1, v2, v3] = bgemm_local[v0, v1, v2, v3]
        for n_co_h_0_w_0_fused_0 in T.thread_binding(T.int64(784), thread="blockIdx.x", annotations={"pragma_auto_unroll_max_step": 1024, "pragma_unroll_explicit": 1}):
            for n_co_h_0_w_0_fused_1 in T.thread_binding(T.int64(256), thread="threadIdx.x"):
                for ax0, ax1 in T.grid(T.int64(1), T.int64(1)):
                    for ax2 in T.unroll(T.int64(4)):
                        for ax3 in T.unroll(T.int64(4)):
                            with T.block("inverse_init"):
                                v_co = T.axis.spatial(T.int64(64), (n_co_h_0_w_0_fused_0 * T.int64(256) + n_co_h_0_w_0_fused_1) // T.int64(3136) + ax0)
                                v_p = T.axis.spatial(T.int64(3136), (n_co_h_0_w_0_fused_0 * T.int64(256) + n_co_h_0_w_0_fused_1) % T.int64(3136) + ax1)
                                v_vh, v_vw = T.axis.remap("SS", [ax2, ax3])
                                T.reads()
                                T.writes(inverse_local[v_co, v_p, v_vh, v_vw])
                                T.block_attr({"schedule_rule": "conv2d_nchw_winograd_inverse"})
                                inverse_local[v_co, v_p, v_vh, v_vw] = T.float32(0)
                            for ax4 in T.unroll(T.int64(6)):
                                for ax5 in T.unroll(T.int64(6)):
                                    with T.block("inverse_update"):
                                        v_co = T.axis.spatial(T.int64(64), (n_co_h_0_w_0_fused_0 * T.int64(256) + n_co_h_0_w_0_fused_1) // T.int64(3136) + ax0)
                                        v_p = T.axis.spatial(T.int64(3136), (n_co_h_0_w_0_fused_0 * T.int64(256) + n_co_h_0_w_0_fused_1) % T.int64(3136) + ax1)
                                        v_vh, v_vw, v_r_a, v_r_b = T.axis.remap("SSRR", [ax2, ax3, ax4, ax5])
                                        T.reads(inverse_local[v_co, v_p, v_vh, v_vw], bgemm[v_r_a, v_r_b, v_co, v_p])
                                        T.writes(inverse_local[v_co, v_p, v_vh, v_vw])
                                        T.block_attr({"schedule_rule": "conv2d_nchw_winograd_inverse"})
                                        inverse_local[v_co, v_p, v_vh, v_vw] = inverse_local[v_co, v_p, v_vh, v_vw] + bgemm[v_r_a, v_r_b, v_co, v_p] * T.Select(v_r_a % T.int64(6) == T.int64(5) and v_vh % T.int64(4) == T.int64(3), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(5) and v_vh % T.int64(4) == T.int64(2), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(5) and v_vh % T.int64(4) == T.int64(1), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(5) and v_vh % T.int64(4) == T.int64(0), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(4) and v_vh % T.int64(4) == T.int64(3), T.float32(-8), T.Select(v_r_a % T.int64(6) == T.int64(4) and v_vh % T.int64(4) == T.int64(2), T.float32(4), T.Select(v_r_a % T.int64(6) == T.int64(4) and v_vh % T.int64(4) == T.int64(1), T.float32(-2), T.Select(v_r_a % T.int64(6) == T.int64(4) and v_vh % T.int64(4) == T.int64(0), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(3) and v_vh % T.int64(4) == T.int64(3), T.float32(0.125), T.Select(v_r_a % T.int64(6) == T.int64(3) and v_vh % T.int64(4) == T.int64(2), T.float32(0.25), T.Select(v_r_a % T.int64(6) == T.int64(3) and v_vh % T.int64(4) == T.int64(1), T.float32(0.5), T.Select(v_r_a % T.int64(6) == T.int64(3) and v_vh % T.int64(4) == T.int64(0), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(2) and v_vh % T.int64(4) == T.int64(3), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(2) and v_vh % T.int64(4) == T.int64(2), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(2) and v_vh % T.int64(4) == T.int64(1), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(2) and v_vh % T.int64(4) == T.int64(0), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(1) and v_vh % T.int64(4) == T.int64(3), T.float32(-1), T.Select(v_r_a % T.int64(6) == T.int64(1) and v_vh % T.int64(4) == T.int64(2), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(1) and v_vh % T.int64(4) == T.int64(1), T.float32(-1), T.Select(v_r_a % T.int64(6) == T.int64(1) and v_vh % T.int64(4) == T.int64(0), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(0) and v_vh % T.int64(4) == T.int64(3), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(0) and v_vh % T.int64(4) == T.int64(2), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(0) and v_vh % T.int64(4) == T.int64(1), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(0) and v_vh % T.int64(4) == T.int64(0), T.float32(1), T.float32(0))))))))))))))))))))))))) * T.Select(v_r_b % T.int64(6) == T.int64(5) and v_vw % T.int64(4) == T.int64(3), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(5) and v_vw % T.int64(4) == T.int64(2), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(5) and v_vw % T.int64(4) == T.int64(1), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(5) and v_vw % T.int64(4) == T.int64(0), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(4) and v_vw % T.int64(4) == T.int64(3), T.float32(-8), T.Select(v_r_b % T.int64(6) == T.int64(4) and v_vw % T.int64(4) == T.int64(2), T.float32(4), T.Select(v_r_b % T.int64(6) == T.int64(4) and v_vw % T.int64(4) == T.int64(1), T.float32(-2), T.Select(v_r_b % T.int64(6) == T.int64(4) and v_vw % T.int64(4) == T.int64(0), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(3) and v_vw % T.int64(4) == T.int64(3), T.float32(0.125), T.Select(v_r_b % T.int64(6) == T.int64(3) and v_vw % T.int64(4) == T.int64(2), T.float32(0.25), T.Select(v_r_b % T.int64(6) == T.int64(3) and v_vw % T.int64(4) == T.int64(1), T.float32(0.5), T.Select(v_r_b % T.int64(6) == T.int64(3) and v_vw % T.int64(4) == T.int64(0), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(2) and v_vw % T.int64(4) == T.int64(3), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(2) and v_vw % T.int64(4) == T.int64(2), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(2) and v_vw % T.int64(4) == T.int64(1), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(2) and v_vw % T.int64(4) == T.int64(0), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(1) and v_vw % T.int64(4) == T.int64(3), T.float32(-1), T.Select(v_r_b % T.int64(6) == T.int64(1) and v_vw % T.int64(4) == T.int64(2), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(1) and v_vw % T.int64(4) == T.int64(1), T.float32(-1), T.Select(v_r_b % T.int64(6) == T.int64(1) and v_vw % T.int64(4) == T.int64(0), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(0) and v_vw % T.int64(4) == T.int64(3), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(0) and v_vw % T.int64(4) == T.int64(2), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(0) and v_vw % T.int64(4) == T.int64(1), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(0) and v_vw % T.int64(4) == T.int64(0), T.float32(1), T.float32(0)))))))))))))))))))))))))
                for h_1, w_1 in T.grid(T.int64(4), T.int64(4)):
                    with T.block("conv2d_winograd"):
                        v_n = T.axis.spatial(T.int64(1), T.int64(0))
                        v_co = T.axis.spatial(T.int64(64), (n_co_h_0_w_0_fused_0 * T.int64(256) + n_co_h_0_w_0_fused_1) // T.int64(3136))
                        v_h = T.axis.spatial(T.int64(224), (n_co_h_0_w_0_fused_0 * T.int64(256) + n_co_h_0_w_0_fused_1) % T.int64(3136) // T.int64(56) * T.int64(4) + h_1)
                        v_w = T.axis.spatial(T.int64(224), (n_co_h_0_w_0_fused_0 * T.int64(256) + n_co_h_0_w_0_fused_1) % T.int64(56) * T.int64(4) + w_1)
                        T.reads(inverse_local[v_co, v_n * T.int64(3136) + v_h // T.int64(4) * T.int64(56) + v_w // T.int64(4), v_h % T.int64(4), v_w % T.int64(4)], p2[v_n, v_co, T.int64(0), T.int64(0)])
                        T.writes(T_relu[v_n, v_co, v_h, v_w])
                        T_relu[v_n, v_co, v_h, v_w] = T.max(inverse_local[v_co, v_n * T.int64(3136) + v_h // T.int64(4) * T.int64(56) + v_w // T.int64(4), v_h % T.int64(4), v_w % T.int64(4)] + p2[v_n, v_co, T.int64(0), T.int64(0)], T.float32(0))
b0 = sch.get_block(name="data_pack", func_name="main")
b1 = sch.get_block(name="bgemm", func_name="main")
b2 = sch.get_block(name="inverse", func_name="main")
b3 = sch.get_block(name="conv2d_winograd", func_name="main")
b4 = sch.get_block(name="T_add", func_name="main")
b5 = sch.get_block(name="T_relu", func_name="main")
b6 = sch.get_block(name="root", func_name="main")
b7, b8 = sch.get_producers(block=b2)
sch.compute_inline(block=b8)
b9, = sch.get_consumers(block=b2)
l10, l11, l12, l13 = sch.get_loops(block=b9)
l14, l15 = sch.split(loop=l12, factors=[None, 4], preserve_unit_iters=True)
l16, l17 = sch.split(loop=l13, factors=[None, 4], preserve_unit_iters=True)
sch.reorder(l14, l16, l15, l17)
sch.compute_at(block=b2, loop=l16, preserve_unit_loops=True, index=-1)
sch.set_scope(block=b2, buffer_index=0, storage_scope="local")
l18, l19, l20, l21, l22, l23, l24, l25, l26, l27 = sch.get_loops(block=b2)
sch.unroll(loop=l24)
sch.unroll(loop=l25)
sch.unroll(loop=l26)
sch.unroll(loop=l27)
b28, b29 = sch.get_producers(block=b0)
sch.compute_inline(block=b29)
b30, = sch.get_producers(block=b28)
l31, l32, l33, l34, l35, l36 = sch.get_loops(block=b0)
sch.reorder(l33, l34, l31, l32, l35, l36)
sch.unroll(loop=l31)
sch.unroll(loop=l32)
sch.unroll(loop=l35)
sch.unroll(loop=l36)
l37 = sch.fuse(l33, l34, preserve_unit_iters=True)
v38 = sch.sample_categorical(candidates=[32, 64, 128, 256, 512, 1024], probs=[0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666], decision=2)
l39, l40 = sch.split(loop=l37, factors=[None, v38], preserve_unit_iters=True)
sch.bind(loop=l39, thread_axis="blockIdx.x")
sch.bind(loop=l40, thread_axis="threadIdx.x")
b41 = sch.cache_write(block=b0, write_buffer_index=0, storage_scope="local")
sch.reverse_compute_at(block=b41, loop=l40, preserve_unit_loops=True, index=-1)
sch.compute_at(block=b28, loop=l40, preserve_unit_loops=True, index=-1)
sch.set_scope(block=b28, buffer_index=0, storage_scope="local")
sch.compute_inline(block=b30)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSSRRSRS")
l42, l43, l44, l45, l46 = sch.get_loops(block=b1)
v47, v48, v49, v50, v51 = sch.sample_perfect_tile(loop=l42, n=5, max_innermost_factor=64, decision=[1, 2, 1, 3, 1])
l52, l53, l54, l55, l56 = sch.split(loop=l42, factors=[v47, v48, v49, v50, v51], preserve_unit_iters=True)
v57, v58, v59, v60, v61 = sch.sample_perfect_tile(loop=l43, n=5, max_innermost_factor=64, decision=[1, 3, 2, 1, 1])
l62, l63, l64, l65, l66 = sch.split(loop=l43, factors=[v57, v58, v59, v60, v61], preserve_unit_iters=True)
v67, v68, v69, v70, v71 = sch.sample_perfect_tile(loop=l44, n=5, max_innermost_factor=64, decision=[1, 1, 16, 4, 1])
l72, l73, l74, l75, l76 = sch.split(loop=l44, factors=[v67, v68, v69, v70, v71], preserve_unit_iters=True)
v77, v78, v79, v80, v81 = sch.sample_perfect_tile(loop=l45, n=5, max_innermost_factor=64, decision=[28, 1, 1, 112, 1])
l82, l83, l84, l85, l86 = sch.split(loop=l45, factors=[v77, v78, v79, v80, v81], preserve_unit_iters=True)
v87, v88, v89 = sch.sample_perfect_tile(loop=l46, n=3, max_innermost_factor=64, decision=[3, 1, 1])
l90, l91, l92 = sch.split(loop=l46, factors=[v87, v88, v89], preserve_unit_iters=True)
sch.reorder(l52, l62, l72, l82, l53, l63, l73, l83, l54, l64, l74, l84, l90, l91, l55, l65, l75, l85, l92, l56, l66, l76, l86)
l93 = sch.fuse(l52, l62, l72, l82, preserve_unit_iters=True)
sch.bind(loop=l93, thread_axis="blockIdx.x")
l94 = sch.fuse(l53, l63, l73, l83, preserve_unit_iters=True)
sch.bind(loop=l94, thread_axis="vthread.x")
l95 = sch.fuse(l54, l64, l74, l84, preserve_unit_iters=True)
sch.bind(loop=l95, thread_axis="threadIdx.x")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_low_inclusive", ann_val=32)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_high_inclusive", ann_val=1024)
b96 = sch.cache_write(block=b1, write_buffer_index=0, storage_scope="local")
sch.reverse_compute_at(block=b96, loop=l95, preserve_unit_loops=True, index=-1)
b97 = sch.cache_read(block=b1, read_buffer_index=0, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b97, loop=l90, preserve_unit_loops=True, index=-1)
l98, l99, l100, l101, l102, l103, l104, l105 = sch.get_loops(block=b97)
l106 = sch.fuse(l102, l103, l104, l105, preserve_unit_iters=True)
v107 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=0)
sch.annotate(block_or_loop=b97, ann_key="meta_schedule.cooperative_fetch", ann_val=v107)
b108 = sch.cache_read(block=b1, read_buffer_index=1, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b108, loop=l90, preserve_unit_loops=True, index=-1)
l109, l110, l111, l112, l113, l114, l115, l116 = sch.get_loops(block=b108)
l117 = sch.fuse(l113, l114, l115, l116, preserve_unit_iters=True)
v118 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b108, ann_key="meta_schedule.cooperative_fetch", ann_val=v118)
sch.reverse_compute_inline(block=b5)
sch.reverse_compute_inline(block=b4)
v119 = sch.sample_categorical(candidates=[0, 16, 64, 512, 1024], probs=[0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001], decision=4)
sch.annotate(block_or_loop=b6, ann_key="meta_schedule.unroll_explicit", ann_val=v119)
l120, l121, l122, l123, l124, l125 = sch.get_loops(block=b3)
l126 = sch.fuse(l120, l121, l122, l123, preserve_unit_iters=True)
v127 = sch.sample_categorical(candidates=[32, 64, 128, 256, 512, 1024], probs=[0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666], decision=3)
l128, l129 = sch.split(loop=l126, factors=[None, v127], preserve_unit_iters=True)
sch.bind(loop=l128, thread_axis="blockIdx.x")
sch.bind(loop=l129, thread_axis="threadIdx.x")
sch.enter_postproc()
sch.unannotate(block_or_loop=b97, ann_key="meta_schedule.cooperative_fetch")
l130, l131, l132, l133, l134 = sch.get_loops(block=b97)
l135, l136 = sch.split(loop=l134, factors=[None, 32], preserve_unit_iters=True)
sch.bind(loop=l136, thread_axis="threadIdx.x")
sch.unannotate(block_or_loop=b108, ann_key="meta_schedule.cooperative_fetch")
l137, l138, l139, l140, l141 = sch.get_loops(block=b108)
l142, l143, l144 = sch.split(loop=l141, factors=[None, 32, 4], preserve_unit_iters=True)
sch.vectorize(loop=l144)
sch.bind(loop=l143, thread_axis="threadIdx.x")
b145 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b145, ann_key="meta_schedule.unroll_explicit")
b146, b147, b148, b149, b150, b151, b152, b153, b154 = sch.get_child_blocks(b145)
l155, l156, l157, l158, l159, l160 = sch.get_loops(block=b146)
l161, l162, l163, l164, l165, l166 = sch.get_loops(block=b147)
sch.annotate(block_or_loop=l161, ann_key="pragma_auto_unroll_max_step", ann_val=1024)
sch.annotate(block_or_loop=l161, ann_key="pragma_unroll_explicit", ann_val=1)
l167, l168, l169, l170, l171, l172 = sch.get_loops(block=b148)
l173, l174, l175, l176, l177, l178 = sch.get_loops(block=b149)
l179, l180, l181, l182, l183, l184, l185 = sch.get_loops(block=b150)
l186, l187, l188, l189, l190, l191, l192, l193, l194, l195, l196, l197, l198, l199 = sch.get_loops(block=b151)
sch.annotate(block_or_loop=l186, ann_key="pragma_auto_unroll_max_step", ann_val=1024)
sch.annotate(block_or_loop=l186, ann_key="pragma_unroll_explicit", ann_val=1)
l200, l201, l202, l203, l204, l205, l206 = sch.get_loops(block=b152)
l207, l208, l209, l210, l211, l212, l213, l214 = sch.get_loops(block=b153)
sch.annotate(block_or_loop=l207, ann_key="pragma_auto_unroll_max_step", ann_val=1024)
sch.annotate(block_or_loop=l207, ann_key="pragma_unroll_explicit", ann_val=1)
l215, l216, l217, l218 = sch.get_loops(block=b154)
b219 = sch.get_block(name="data_pack", func_name="main")
l220, l221, l222, l223, l224, l225 = sch.get_loops(block=b219)
b226 = sch.decompose_reduction(block=b219, loop=l224)
b227 = sch.get_block(name="bgemm", func_name="main")
l228, l229, l230, l231, l232, l233, l234, l235, l236, l237, l238, l239, l240, l241 = sch.get_loops(block=b227)
b242 = sch.decompose_reduction(block=b227, loop=l231)
b243 = sch.get_block(name="inverse", func_name="main")
l244, l245, l246, l247, l248, l249, l250, l251 = sch.get_loops(block=b243)
b252 = sch.decompose_reduction(block=b243, loop=l250)
2024-04-29 00:50:33 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu] Trial #406: GFLOPs: 7856.3348. Time: 55.1363 us. Best GFLOPs: 7856.3348
2024-04-29 00:50:33 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu] Trial #407: GFLOPs: 7839.0848. Time: 55.2577 us. Best GFLOPs: 7856.3348
2024-04-29 00:50:33 [INFO] [task_scheduler.cc:121] [Task #0: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu] Trial #408: Error in building:
LocalBuilder: Timeout, killed after 30.0 seconds
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(3), T.int64(224), T.int64(224)), "float32"), p1: T.Buffer((T.int64(6), T.int64(6), T.int64(3), T.int64(64)), "float32"), p2: T.Buffer((T.int64(1), T.int64(64), T.int64(1), T.int64(1)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(64), T.int64(224), T.int64(224)), "float32")):
        T.func_attr({"layout_free_buffers": [1], "tir.noalias": T.bool(True)})
        # with T.block("root"):
        input_tile_local = T.alloc_buffer((T.int64(3), T.int64(3136), T.int64(6), T.int64(6)), scope="local")
        data_pack = T.alloc_buffer((T.int64(6), T.int64(6), T.int64(3), T.int64(3136)))
        bgemm = T.alloc_buffer((T.int64(6), T.int64(6), T.int64(64), T.int64(3136)))
        inverse_local = T.alloc_buffer((T.int64(64), T.int64(3136), T.int64(4), T.int64(4)), scope="local")
        data_pack_local = T.alloc_buffer((T.int64(6), T.int64(6), T.int64(3), T.int64(3136)), scope="local")
        bgemm_local = T.alloc_buffer((T.int64(6), T.int64(6), T.int64(64), T.int64(3136)), scope="local")
        data_pack_shared = T.alloc_buffer((T.int64(6), T.int64(6), T.int64(3), T.int64(3136)), scope="shared")
        p1_shared = T.alloc_buffer((T.int64(6), T.int64(6), T.int64(3), T.int64(64)), scope="shared")
        for ci_p_fused_0 in T.thread_binding(T.int64(74), thread="blockIdx.x", annotations={"pragma_auto_unroll_max_step": 1024, "pragma_unroll_explicit": 1}):
            for ci_p_fused_1 in T.thread_binding(T.int64(128), thread="threadIdx.x"):
                for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(1), T.int64(6), T.int64(6)):
                    with T.block("input_tile"):
                        v_ci = T.axis.spatial(T.int64(3), (ci_p_fused_0 * T.int64(128) + ci_p_fused_1) // T.int64(3136) + ax0)
                        v_p = T.axis.spatial(T.int64(3136), (ci_p_fused_0 * T.int64(128) + ci_p_fused_1) % T.int64(3136) + ax1)
                        v_eps, v_nu = T.axis.remap("SS", [ax2, ax3])
                        T.where(ci_p_fused_0 * T.int64(128) + ci_p_fused_1 < T.int64(9408))
                        T.reads(p0[v_p // T.int64(3136), v_ci, v_p % T.int64(3136) // T.int64(56) * T.int64(4) + v_eps - T.int64(1), v_p % T.int64(56) * T.int64(4) + v_nu - T.int64(1)])
                        T.writes(input_tile_local[v_ci, v_p, v_eps, v_nu])
                        T.block_attr({"schedule_rule": "None"})
                        input_tile_local[v_ci, v_p, v_eps, v_nu] = T.if_then_else(T.int64(1) <= v_p % T.int64(3136) // T.int64(56) * T.int64(4) + v_eps and v_p % T.int64(3136) // T.int64(56) * T.int64(4) + v_eps < T.int64(225) and T.int64(1) <= v_p % T.int64(56) * T.int64(4) + v_nu and v_p % T.int64(56) * T.int64(4) + v_nu < T.int64(225), p0[v_p // T.int64(3136), v_ci, v_p % T.int64(3136) // T.int64(56) * T.int64(4) + v_eps - T.int64(1), v_p % T.int64(56) * T.int64(4) + v_nu - T.int64(1)], T.float32(0))
                for eps in T.unroll(T.int64(6)):
                    for nu in T.unroll(T.int64(6)):
                        with T.block("data_pack_init"):
                            v_eps, v_nu = T.axis.remap("SS", [eps, nu])
                            v_ci = T.axis.spatial(T.int64(3), (ci_p_fused_0 * T.int64(128) + ci_p_fused_1) // T.int64(3136))
                            v_p = T.axis.spatial(T.int64(3136), (ci_p_fused_0 * T.int64(128) + ci_p_fused_1) % T.int64(3136))
                            T.where(ci_p_fused_0 * T.int64(128) + ci_p_fused_1 < T.int64(9408))
                            T.reads()
                            T.writes(data_pack_local[v_eps, v_nu, v_ci, v_p])
                            T.block_attr({"schedule_rule": "conv2d_nchw_winograd_data_pack"})
                            data_pack_local[v_eps, v_nu, v_ci, v_p] = T.float32(0)
                        for r_a in T.unroll(T.int64(6)):
                            for r_b in T.unroll(T.int64(6)):
                                with T.block("data_pack_update"):
                                    v_eps, v_nu = T.axis.remap("SS", [eps, nu])
                                    v_ci = T.axis.spatial(T.int64(3), (ci_p_fused_0 * T.int64(128) + ci_p_fused_1) // T.int64(3136))
                                    v_p = T.axis.spatial(T.int64(3136), (ci_p_fused_0 * T.int64(128) + ci_p_fused_1) % T.int64(3136))
                                    v_r_a, v_r_b = T.axis.remap("RR", [r_a, r_b])
                                    T.where(ci_p_fused_0 * T.int64(128) + ci_p_fused_1 < T.int64(9408))
                                    T.reads(data_pack_local[v_eps, v_nu, v_ci, v_p], input_tile_local[v_ci, v_p, v_r_a, v_r_b])
                                    T.writes(data_pack_local[v_eps, v_nu, v_ci, v_p])
                                    T.block_attr({"schedule_rule": "conv2d_nchw_winograd_data_pack"})
                                    data_pack_local[v_eps, v_nu, v_ci, v_p] = data_pack_local[v_eps, v_nu, v_ci, v_p] + input_tile_local[v_ci, v_p, v_r_a, v_r_b] * T.Select(v_r_a % T.int64(6) == T.int64(5) and v_eps % T.int64(6) == T.int64(5), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(5) and v_eps % T.int64(6) == T.int64(4), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(5) and v_eps % T.int64(6) == T.int64(3), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(5) and v_eps % T.int64(6) == T.int64(2), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(5) and v_eps % T.int64(6) == T.int64(1), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(5) and v_eps % T.int64(6) == T.int64(0), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(4) and v_eps % T.int64(6) == T.int64(5), T.float32(1.5), T.Select(v_r_a % T.int64(6) == T.int64(4) and v_eps % T.int64(6) == T.int64(4), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(4) and v_eps % T.int64(6) == T.int64(3), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(4) and v_eps % T.int64(6) == T.int64(2), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(4) and v_eps % T.int64(6) == T.int64(1), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(4) and v_eps % T.int64(6) == T.int64(0), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(3) and v_eps % T.int64(6) == T.int64(5), T.float32(-2), T.Select(v_r_a % T.int64(6) == T.int64(3) and v_eps % T.int64(6) == T.int64(4), T.float32(-0.5), T.Select(v_r_a % T.int64(6) == T.int64(3) and v_eps % T.int64(6) == T.int64(3), T.float32(2), T.Select(v_r_a % T.int64(6) == T.int64(3) and v_eps % T.int64(6) == T.int64(2), T.float32(2.5), T.Select(v_r_a % T.int64(6) == T.int64(3) and v_eps % T.int64(6) == T.int64(1), T.float32(0.5), T.Select(v_r_a % T.int64(6) == T.int64(3) and v_eps % T.int64(6) == T.int64(0), T.float32(1.5), T.Select(v_r_a % T.int64(6) == T.int64(2) and v_eps % T.int64(6) == T.int64(5), T.float32(-1.5), T.Select(v_r_a % T.int64(6) == T.int64(2) and v_eps % T.int64(6) == T.int64(4), T.float32(-1), T.Select(v_r_a % T.int64(6) == T.int64(2) and v_eps % T.int64(6) == T.int64(3), T.float32(-1), T.Select(v_r_a % T.int64(6) == T.int64(2) and v_eps % T.int64(6) == T.int64(2), T.float32(0.5), T.Select(v_r_a % T.int64(6) == T.int64(2) and v_eps % T.int64(6) == T.int64(1), T.float32(-2.5), T.Select(v_r_a % T.int64(6) == T.int64(2) and v_eps % T.int64(6) == T.int64(0), T.float32(-2), T.Select(v_r_a % T.int64(6) == T.int64(1) and v_eps % T.int64(6) == T.int64(5), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(1) and v_eps % T.int64(6) == T.int64(4), T.float32(0.5), T.Select(v_r_a % T.int64(6) == T.int64(1) and v_eps % T.int64(6) == T.int64(3), T.float32(-2), T.Select(v_r_a % T.int64(6) == T.int64(1) and v_eps % T.int64(6) == T.int64(2), T.float32(-1), T.Select(v_r_a % T.int64(6) == T.int64(1) and v_eps % T.int64(6) == T.int64(1), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(1) and v_eps % T.int64(6) == T.int64(0), T.float32(-1.5), T.Select(v_r_a % T.int64(6) == T.int64(0) and v_eps % T.int64(6) == T.int64(5), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(0) and v_eps % T.int64(6) == T.int64(4), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(0) and v_eps % T.int64(6) == T.int64(3), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(0) and v_eps % T.int64(6) == T.int64(2), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(0) and v_eps % T.int64(6) == T.int64(1), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(0) and v_eps % T.int64(6) == T.int64(0), T.float32(1), T.float32(0))))))))))))))))))))))))))))))))))))) * T.Select(v_r_b % T.int64(6) == T.int64(5) and v_nu % T.int64(6) == T.int64(5), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(5) and v_nu % T.int64(6) == T.int64(4), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(5) and v_nu % T.int64(6) == T.int64(3), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(5) and v_nu % T.int64(6) == T.int64(2), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(5) and v_nu % T.int64(6) == T.int64(1), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(5) and v_nu % T.int64(6) == T.int64(0), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(4) and v_nu % T.int64(6) == T.int64(5), T.float32(1.5), T.Select(v_r_b % T.int64(6) == T.int64(4) and v_nu % T.int64(6) == T.int64(4), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(4) and v_nu % T.int64(6) == T.int64(3), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(4) and v_nu % T.int64(6) == T.int64(2), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(4) and v_nu % T.int64(6) == T.int64(1), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(4) and v_nu % T.int64(6) == T.int64(0), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(3) and v_nu % T.int64(6) == T.int64(5), T.float32(-2), T.Select(v_r_b % T.int64(6) == T.int64(3) and v_nu % T.int64(6) == T.int64(4), T.float32(-0.5), T.Select(v_r_b % T.int64(6) == T.int64(3) and v_nu % T.int64(6) == T.int64(3), T.float32(2), T.Select(v_r_b % T.int64(6) == T.int64(3) and v_nu % T.int64(6) == T.int64(2), T.float32(2.5), T.Select(v_r_b % T.int64(6) == T.int64(3) and v_nu % T.int64(6) == T.int64(1), T.float32(0.5), T.Select(v_r_b % T.int64(6) == T.int64(3) and v_nu % T.int64(6) == T.int64(0), T.float32(1.5), T.Select(v_r_b % T.int64(6) == T.int64(2) and v_nu % T.int64(6) == T.int64(5), T.float32(-1.5), T.Select(v_r_b % T.int64(6) == T.int64(2) and v_nu % T.int64(6) == T.int64(4), T.float32(-1), T.Select(v_r_b % T.int64(6) == T.int64(2) and v_nu % T.int64(6) == T.int64(3), T.float32(-1), T.Select(v_r_b % T.int64(6) == T.int64(2) and v_nu % T.int64(6) == T.int64(2), T.float32(0.5), T.Select(v_r_b % T.int64(6) == T.int64(2) and v_nu % T.int64(6) == T.int64(1), T.float32(-2.5), T.Select(v_r_b % T.int64(6) == T.int64(2) and v_nu % T.int64(6) == T.int64(0), T.float32(-2), T.Select(v_r_b % T.int64(6) == T.int64(1) and v_nu % T.int64(6) == T.int64(5), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(1) and v_nu % T.int64(6) == T.int64(4), T.float32(0.5), T.Select(v_r_b % T.int64(6) == T.int64(1) and v_nu % T.int64(6) == T.int64(3), T.float32(-2), T.Select(v_r_b % T.int64(6) == T.int64(1) and v_nu % T.int64(6) == T.int64(2), T.float32(-1), T.Select(v_r_b % T.int64(6) == T.int64(1) and v_nu % T.int64(6) == T.int64(1), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(1) and v_nu % T.int64(6) == T.int64(0), T.float32(-1.5), T.Select(v_r_b % T.int64(6) == T.int64(0) and v_nu % T.int64(6) == T.int64(5), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(0) and v_nu % T.int64(6) == T.int64(4), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(0) and v_nu % T.int64(6) == T.int64(3), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(0) and v_nu % T.int64(6) == T.int64(2), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(0) and v_nu % T.int64(6) == T.int64(1), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(0) and v_nu % T.int64(6) == T.int64(0), T.float32(1), T.float32(0)))))))))))))))))))))))))))))))))))))
                for ax0, ax1, ax2, ax3 in T.grid(T.int64(6), T.int64(6), T.int64(1), T.int64(1)):
                    with T.block("data_pack_local"):
                        v0, v1 = T.axis.remap("SS", [ax0, ax1])
                        v2 = T.axis.spatial(T.int64(3), (ci_p_fused_0 * T.int64(128) + ci_p_fused_1) // T.int64(3136) + ax2)
                        v3 = T.axis.spatial(T.int64(3136), (ci_p_fused_0 * T.int64(128) + ci_p_fused_1) % T.int64(3136) + ax3)
                        T.where(ci_p_fused_0 * T.int64(128) + ci_p_fused_1 < T.int64(9408))
                        T.reads(data_pack_local[v0, v1, v2, v3])
                        T.writes(data_pack[v0, v1, v2, v3])
                        data_pack[v0, v1, v2, v3] = data_pack_local[v0, v1, v2, v3]
        for eps_0_nu_0_co_0_p_0_fused in T.thread_binding(T.int64(28), thread="blockIdx.x", annotations={"pragma_auto_unroll_max_step": 1024, "pragma_unroll_explicit": 1}):
            for eps_1_nu_1_co_1_p_1_fused in T.thread_binding(T.int64(2), thread="vthread.x"):
                for eps_2_nu_2_co_2_p_2_fused in T.thread_binding(T.int64(96), thread="threadIdx.x"):
                    for eps_3_init, nu_3_init, co_3_init, p_3_init, eps_4_init, nu_4_init, co_4_init, p_4_init in T.grid(T.int64(3), T.int64(1), T.int64(4), T.int64(7), T.int64(1), T.int64(1), T.int64(1), T.int64(16)):
                        with T.block("bgemm_init"):
                            v_eps = T.axis.spatial(T.int64(6), eps_1_nu_1_co_1_p_1_fused * T.int64(3) + eps_3_init + eps_4_init)
                            v_nu = T.axis.spatial(T.int64(6), eps_2_nu_2_co_2_p_2_fused // T.int64(16) + nu_3_init + nu_4_init)
                            v_co = T.axis.spatial(T.int64(64), eps_2_nu_2_co_2_p_2_fused % T.int64(16) * T.int64(4) + co_3_init + co_4_init)
                            v_p = T.axis.spatial(T.int64(3136), eps_0_nu_0_co_0_p_0_fused * T.int64(112) + p_3_init * T.int64(16) + p_4_init)
                            T.reads()
                            T.writes(bgemm_local[v_eps, v_nu, v_co, v_p])
                            T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 32, "meta_schedule.tiling_structure": "SSSRRSRS"})
                            bgemm_local[v_eps, v_nu, v_co, v_p] = T.float32(0)
                    for ci_0 in range(T.int64(3)):
                        for ax0_ax1_ax2_ax3_fused_0 in range(T.int64(11)):
                            for ax0_ax1_ax2_ax3_fused_1 in T.thread_binding(T.int64(96), thread="threadIdx.x"):
                                for ax0_ax1_ax2_ax3_fused_2 in T.vectorized(T.int64(4)):
                                    with T.block("data_pack_shared"):
                                        v0 = T.axis.spatial(T.int64(6), (ax0_ax1_ax2_ax3_fused_0 * T.int64(384) + ax0_ax1_ax2_ax3_fused_1 * T.int64(4) + ax0_ax1_ax2_ax3_fused_2) // T.int64(672))
                                        v1 = T.axis.spatial(T.int64(6), (ax0_ax1_ax2_ax3_fused_0 * T.int64(384) + ax0_ax1_ax2_ax3_fused_1 * T.int64(4) + ax0_ax1_ax2_ax3_fused_2) % T.int64(672) // T.int64(112))
                                        v2 = T.axis.spatial(T.int64(3), ci_0)
                                        v3 = T.axis.spatial(T.int64(3136), eps_0_nu_0_co_0_p_0_fused * T.int64(112) + (ax0_ax1_ax2_ax3_fused_0 * T.int64(384) + ax0_ax1_ax2_ax3_fused_1 * T.int64(4) + ax0_ax1_ax2_ax3_fused_2) % T.int64(112))
                                        T.where((ax0_ax1_ax2_ax3_fused_0 * T.int64(96) + ax0_ax1_ax2_ax3_fused_1) * T.int64(4) + ax0_ax1_ax2_ax3_fused_2 < T.int64(4032))
                                        T.reads(data_pack[v0, v1, v2, v3])
                                        T.writes(data_pack_shared[v0, v1, v2, v3])
                                        data_pack_shared[v0, v1, v2, v3] = data_pack[v0, v1, v2, v3]
                        for ax0_ax1_ax2_ax3_fused_0 in range(T.int64(6)):
                            for ax0_ax1_ax2_ax3_fused_1 in T.thread_binding(T.int64(96), thread="threadIdx.x"):
                                for ax0_ax1_ax2_ax3_fused_2 in T.vectorized(T.int64(4)):
                                    with T.block("p1_shared"):
                                        v0 = T.axis.spatial(T.int64(6), (ax0_ax1_ax2_ax3_fused_0 * T.int64(384) + ax0_ax1_ax2_ax3_fused_1 * T.int64(4) + ax0_ax1_ax2_ax3_fused_2) // T.int64(384))
                                        v1 = T.axis.spatial(T.int64(6), (ax0_ax1_ax2_ax3_fused_0 * T.int64(384) + ax0_ax1_ax2_ax3_fused_1 * T.int64(4) + ax0_ax1_ax2_ax3_fused_2) % T.int64(384) // T.int64(64))
                                        v2 = T.axis.spatial(T.int64(3), ci_0)
                                        v3 = T.axis.spatial(T.int64(64), (ax0_ax1_ax2_ax3_fused_0 * T.int64(384) + ax0_ax1_ax2_ax3_fused_1 * T.int64(4) + ax0_ax1_ax2_ax3_fused_2) % T.int64(64))
                                        T.reads(p1[v0, v1, v2, v3])
                                        T.writes(p1_shared[v0, v1, v2, v3])
                                        p1_shared[v0, v1, v2, v3] = p1[v0, v1, v2, v3]
                        for ci_1, eps_3, nu_3, co_3, p_3, ci_2, eps_4, nu_4, co_4, p_4 in T.grid(T.int64(1), T.int64(3), T.int64(1), T.int64(4), T.int64(7), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(16)):
                            with T.block("bgemm_update"):
                                v_eps = T.axis.spatial(T.int64(6), eps_1_nu_1_co_1_p_1_fused * T.int64(3) + eps_3 + eps_4)
                                v_nu = T.axis.spatial(T.int64(6), eps_2_nu_2_co_2_p_2_fused // T.int64(16) + nu_3 + nu_4)
                                v_co = T.axis.spatial(T.int64(64), eps_2_nu_2_co_2_p_2_fused % T.int64(16) * T.int64(4) + co_3 + co_4)
                                v_p = T.axis.spatial(T.int64(3136), eps_0_nu_0_co_0_p_0_fused * T.int64(112) + p_3 * T.int64(16) + p_4)
                                v_ci = T.axis.reduce(T.int64(3), ci_0 + ci_1 + ci_2)
                                T.reads(bgemm_local[v_eps, v_nu, v_co, v_p], data_pack_shared[v_eps, v_nu, v_ci, v_p], p1_shared[v_eps, v_nu, v_ci, v_co])
                                T.writes(bgemm_local[v_eps, v_nu, v_co, v_p])
                                T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 32, "meta_schedule.tiling_structure": "SSSRRSRS"})
                                bgemm_local[v_eps, v_nu, v_co, v_p] = bgemm_local[v_eps, v_nu, v_co, v_p] + data_pack_shared[v_eps, v_nu, v_ci, v_p] * p1_shared[v_eps, v_nu, v_ci, v_co]
                    for ax0, ax1, ax2, ax3 in T.grid(T.int64(3), T.int64(1), T.int64(4), T.int64(112)):
                        with T.block("bgemm_local"):
                            v0 = T.axis.spatial(T.int64(6), eps_1_nu_1_co_1_p_1_fused * T.int64(3) + ax0)
                            v1 = T.axis.spatial(T.int64(6), eps_2_nu_2_co_2_p_2_fused // T.int64(16) + ax1)
                            v2 = T.axis.spatial(T.int64(64), eps_2_nu_2_co_2_p_2_fused % T.int64(16) * T.int64(4) + ax2)
                            v3 = T.axis.spatial(T.int64(3136), eps_0_nu_0_co_0_p_0_fused * T.int64(112) + ax3)
                            T.reads(bgemm_local[v0, v1, v2, v3])
                            T.writes(bgemm[v0, v1, v2, v3])
                            bgemm[v0, v1, v2, v3] = bgemm_local[v0, v1, v2, v3]
        for n_co_h_0_w_0_fused_0 in T.thread_binding(T.int64(784), thread="blockIdx.x", annotations={"pragma_auto_unroll_max_step": 1024, "pragma_unroll_explicit": 1}):
            for n_co_h_0_w_0_fused_1 in T.thread_binding(T.int64(256), thread="threadIdx.x"):
                for ax0, ax1 in T.grid(T.int64(1), T.int64(1)):
                    for ax2 in T.unroll(T.int64(4)):
                        for ax3 in T.unroll(T.int64(4)):
                            with T.block("inverse_init"):
                                v_co = T.axis.spatial(T.int64(64), (n_co_h_0_w_0_fused_0 * T.int64(256) + n_co_h_0_w_0_fused_1) // T.int64(3136) + ax0)
                                v_p = T.axis.spatial(T.int64(3136), (n_co_h_0_w_0_fused_0 * T.int64(256) + n_co_h_0_w_0_fused_1) % T.int64(3136) + ax1)
                                v_vh, v_vw = T.axis.remap("SS", [ax2, ax3])
                                T.reads()
                                T.writes(inverse_local[v_co, v_p, v_vh, v_vw])
                                T.block_attr({"schedule_rule": "conv2d_nchw_winograd_inverse"})
                                inverse_local[v_co, v_p, v_vh, v_vw] = T.float32(0)
                            for ax4 in T.unroll(T.int64(6)):
                                for ax5 in T.unroll(T.int64(6)):
                                    with T.block("inverse_update"):
                                        v_co = T.axis.spatial(T.int64(64), (n_co_h_0_w_0_fused_0 * T.int64(256) + n_co_h_0_w_0_fused_1) // T.int64(3136) + ax0)
                                        v_p = T.axis.spatial(T.int64(3136), (n_co_h_0_w_0_fused_0 * T.int64(256) + n_co_h_0_w_0_fused_1) % T.int64(3136) + ax1)
                                        v_vh, v_vw, v_r_a, v_r_b = T.axis.remap("SSRR", [ax2, ax3, ax4, ax5])
                                        T.reads(inverse_local[v_co, v_p, v_vh, v_vw], bgemm[v_r_a, v_r_b, v_co, v_p])
                                        T.writes(inverse_local[v_co, v_p, v_vh, v_vw])
                                        T.block_attr({"schedule_rule": "conv2d_nchw_winograd_inverse"})
                                        inverse_local[v_co, v_p, v_vh, v_vw] = inverse_local[v_co, v_p, v_vh, v_vw] + bgemm[v_r_a, v_r_b, v_co, v_p] * T.Select(v_r_a % T.int64(6) == T.int64(5) and v_vh % T.int64(4) == T.int64(3), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(5) and v_vh % T.int64(4) == T.int64(2), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(5) and v_vh % T.int64(4) == T.int64(1), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(5) and v_vh % T.int64(4) == T.int64(0), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(4) and v_vh % T.int64(4) == T.int64(3), T.float32(-8), T.Select(v_r_a % T.int64(6) == T.int64(4) and v_vh % T.int64(4) == T.int64(2), T.float32(4), T.Select(v_r_a % T.int64(6) == T.int64(4) and v_vh % T.int64(4) == T.int64(1), T.float32(-2), T.Select(v_r_a % T.int64(6) == T.int64(4) and v_vh % T.int64(4) == T.int64(0), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(3) and v_vh % T.int64(4) == T.int64(3), T.float32(0.125), T.Select(v_r_a % T.int64(6) == T.int64(3) and v_vh % T.int64(4) == T.int64(2), T.float32(0.25), T.Select(v_r_a % T.int64(6) == T.int64(3) and v_vh % T.int64(4) == T.int64(1), T.float32(0.5), T.Select(v_r_a % T.int64(6) == T.int64(3) and v_vh % T.int64(4) == T.int64(0), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(2) and v_vh % T.int64(4) == T.int64(3), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(2) and v_vh % T.int64(4) == T.int64(2), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(2) and v_vh % T.int64(4) == T.int64(1), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(2) and v_vh % T.int64(4) == T.int64(0), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(1) and v_vh % T.int64(4) == T.int64(3), T.float32(-1), T.Select(v_r_a % T.int64(6) == T.int64(1) and v_vh % T.int64(4) == T.int64(2), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(1) and v_vh % T.int64(4) == T.int64(1), T.float32(-1), T.Select(v_r_a % T.int64(6) == T.int64(1) and v_vh % T.int64(4) == T.int64(0), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(0) and v_vh % T.int64(4) == T.int64(3), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(0) and v_vh % T.int64(4) == T.int64(2), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(0) and v_vh % T.int64(4) == T.int64(1), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(0) and v_vh % T.int64(4) == T.int64(0), T.float32(1), T.float32(0))))))))))))))))))))))))) * T.Select(v_r_b % T.int64(6) == T.int64(5) and v_vw % T.int64(4) == T.int64(3), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(5) and v_vw % T.int64(4) == T.int64(2), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(5) and v_vw % T.int64(4) == T.int64(1), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(5) and v_vw % T.int64(4) == T.int64(0), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(4) and v_vw % T.int64(4) == T.int64(3), T.float32(-8), T.Select(v_r_b % T.int64(6) == T.int64(4) and v_vw % T.int64(4) == T.int64(2), T.float32(4), T.Select(v_r_b % T.int64(6) == T.int64(4) and v_vw % T.int64(4) == T.int64(1), T.float32(-2), T.Select(v_r_b % T.int64(6) == T.int64(4) and v_vw % T.int64(4) == T.int64(0), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(3) and v_vw % T.int64(4) == T.int64(3), T.float32(0.125), T.Select(v_r_b % T.int64(6) == T.int64(3) and v_vw % T.int64(4) == T.int64(2), T.float32(0.25), T.Select(v_r_b % T.int64(6) == T.int64(3) and v_vw % T.int64(4) == T.int64(1), T.float32(0.5), T.Select(v_r_b % T.int64(6) == T.int64(3) and v_vw % T.int64(4) == T.int64(0), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(2) and v_vw % T.int64(4) == T.int64(3), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(2) and v_vw % T.int64(4) == T.int64(2), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(2) and v_vw % T.int64(4) == T.int64(1), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(2) and v_vw % T.int64(4) == T.int64(0), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(1) and v_vw % T.int64(4) == T.int64(3), T.float32(-1), T.Select(v_r_b % T.int64(6) == T.int64(1) and v_vw % T.int64(4) == T.int64(2), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(1) and v_vw % T.int64(4) == T.int64(1), T.float32(-1), T.Select(v_r_b % T.int64(6) == T.int64(1) and v_vw % T.int64(4) == T.int64(0), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(0) and v_vw % T.int64(4) == T.int64(3), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(0) and v_vw % T.int64(4) == T.int64(2), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(0) and v_vw % T.int64(4) == T.int64(1), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(0) and v_vw % T.int64(4) == T.int64(0), T.float32(1), T.float32(0)))))))))))))))))))))))))
                for h_1, w_1 in T.grid(T.int64(4), T.int64(4)):
                    with T.block("conv2d_winograd"):
                        v_n = T.axis.spatial(T.int64(1), T.int64(0))
                        v_co = T.axis.spatial(T.int64(64), (n_co_h_0_w_0_fused_0 * T.int64(256) + n_co_h_0_w_0_fused_1) // T.int64(3136))
                        v_h = T.axis.spatial(T.int64(224), (n_co_h_0_w_0_fused_0 * T.int64(256) + n_co_h_0_w_0_fused_1) % T.int64(3136) // T.int64(56) * T.int64(4) + h_1)
                        v_w = T.axis.spatial(T.int64(224), (n_co_h_0_w_0_fused_0 * T.int64(256) + n_co_h_0_w_0_fused_1) % T.int64(56) * T.int64(4) + w_1)
                        T.reads(inverse_local[v_co, v_n * T.int64(3136) + v_h // T.int64(4) * T.int64(56) + v_w // T.int64(4), v_h % T.int64(4), v_w % T.int64(4)], p2[v_n, v_co, T.int64(0), T.int64(0)])
                        T.writes(T_relu[v_n, v_co, v_h, v_w])
                        T_relu[v_n, v_co, v_h, v_w] = T.max(inverse_local[v_co, v_n * T.int64(3136) + v_h // T.int64(4) * T.int64(56) + v_w // T.int64(4), v_h % T.int64(4), v_w % T.int64(4)] + p2[v_n, v_co, T.int64(0), T.int64(0)], T.float32(0))
b0 = sch.get_block(name="data_pack", func_name="main")
b1 = sch.get_block(name="bgemm", func_name="main")
b2 = sch.get_block(name="inverse", func_name="main")
b3 = sch.get_block(name="conv2d_winograd", func_name="main")
b4 = sch.get_block(name="T_add", func_name="main")
b5 = sch.get_block(name="T_relu", func_name="main")
b6 = sch.get_block(name="root", func_name="main")
b7, b8 = sch.get_producers(block=b2)
sch.compute_inline(block=b8)
b9, = sch.get_consumers(block=b2)
l10, l11, l12, l13 = sch.get_loops(block=b9)
l14, l15 = sch.split(loop=l12, factors=[None, 4], preserve_unit_iters=True)
l16, l17 = sch.split(loop=l13, factors=[None, 4], preserve_unit_iters=True)
sch.reorder(l14, l16, l15, l17)
sch.compute_at(block=b2, loop=l16, preserve_unit_loops=True, index=-1)
sch.set_scope(block=b2, buffer_index=0, storage_scope="local")
l18, l19, l20, l21, l22, l23, l24, l25, l26, l27 = sch.get_loops(block=b2)
sch.unroll(loop=l24)
sch.unroll(loop=l25)
sch.unroll(loop=l26)
sch.unroll(loop=l27)
b28, b29 = sch.get_producers(block=b0)
sch.compute_inline(block=b29)
b30, = sch.get_producers(block=b28)
l31, l32, l33, l34, l35, l36 = sch.get_loops(block=b0)
sch.reorder(l33, l34, l31, l32, l35, l36)
sch.unroll(loop=l31)
sch.unroll(loop=l32)
sch.unroll(loop=l35)
sch.unroll(loop=l36)
l37 = sch.fuse(l33, l34, preserve_unit_iters=True)
v38 = sch.sample_categorical(candidates=[32, 64, 128, 256, 512, 1024], probs=[0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666], decision=2)
l39, l40 = sch.split(loop=l37, factors=[None, v38], preserve_unit_iters=True)
sch.bind(loop=l39, thread_axis="blockIdx.x")
sch.bind(loop=l40, thread_axis="threadIdx.x")
b41 = sch.cache_write(block=b0, write_buffer_index=0, storage_scope="local")
sch.reverse_compute_at(block=b41, loop=l40, preserve_unit_loops=True, index=-1)
sch.compute_at(block=b28, loop=l40, preserve_unit_loops=True, index=-1)
sch.set_scope(block=b28, buffer_index=0, storage_scope="local")
sch.compute_inline(block=b30)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSSRRSRS")
l42, l43, l44, l45, l46 = sch.get_loops(block=b1)
v47, v48, v49, v50, v51 = sch.sample_perfect_tile(loop=l42, n=5, max_innermost_factor=64, decision=[1, 2, 1, 3, 1])
l52, l53, l54, l55, l56 = sch.split(loop=l42, factors=[v47, v48, v49, v50, v51], preserve_unit_iters=True)
v57, v58, v59, v60, v61 = sch.sample_perfect_tile(loop=l43, n=5, max_innermost_factor=64, decision=[1, 1, 6, 1, 1])
l62, l63, l64, l65, l66 = sch.split(loop=l43, factors=[v57, v58, v59, v60, v61], preserve_unit_iters=True)
v67, v68, v69, v70, v71 = sch.sample_perfect_tile(loop=l44, n=5, max_innermost_factor=64, decision=[1, 1, 16, 4, 1])
l72, l73, l74, l75, l76 = sch.split(loop=l44, factors=[v67, v68, v69, v70, v71], preserve_unit_iters=True)
v77, v78, v79, v80, v81 = sch.sample_perfect_tile(loop=l45, n=5, max_innermost_factor=64, decision=[28, 1, 1, 7, 16])
l82, l83, l84, l85, l86 = sch.split(loop=l45, factors=[v77, v78, v79, v80, v81], preserve_unit_iters=True)
v87, v88, v89 = sch.sample_perfect_tile(loop=l46, n=3, max_innermost_factor=64, decision=[3, 1, 1])
l90, l91, l92 = sch.split(loop=l46, factors=[v87, v88, v89], preserve_unit_iters=True)
sch.reorder(l52, l62, l72, l82, l53, l63, l73, l83, l54, l64, l74, l84, l90, l91, l55, l65, l75, l85, l92, l56, l66, l76, l86)
l93 = sch.fuse(l52, l62, l72, l82, preserve_unit_iters=True)
sch.bind(loop=l93, thread_axis="blockIdx.x")
l94 = sch.fuse(l53, l63, l73, l83, preserve_unit_iters=True)
sch.bind(loop=l94, thread_axis="vthread.x")
l95 = sch.fuse(l54, l64, l74, l84, preserve_unit_iters=True)
sch.bind(loop=l95, thread_axis="threadIdx.x")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_low_inclusive", ann_val=32)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_high_inclusive", ann_val=1024)
b96 = sch.cache_write(block=b1, write_buffer_index=0, storage_scope="local")
sch.reverse_compute_at(block=b96, loop=l95, preserve_unit_loops=True, index=-1)
b97 = sch.cache_read(block=b1, read_buffer_index=0, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b97, loop=l90, preserve_unit_loops=True, index=-1)
l98, l99, l100, l101, l102, l103, l104, l105 = sch.get_loops(block=b97)
l106 = sch.fuse(l102, l103, l104, l105, preserve_unit_iters=True)
v107 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b97, ann_key="meta_schedule.cooperative_fetch", ann_val=v107)
b108 = sch.cache_read(block=b1, read_buffer_index=1, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b108, loop=l90, preserve_unit_loops=True, index=-1)
l109, l110, l111, l112, l113, l114, l115, l116 = sch.get_loops(block=b108)
l117 = sch.fuse(l113, l114, l115, l116, preserve_unit_iters=True)
v118 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b108, ann_key="meta_schedule.cooperative_fetch", ann_val=v118)
sch.reverse_compute_inline(block=b5)
sch.reverse_compute_inline(block=b4)
v119 = sch.sample_categorical(candidates=[0, 16, 64, 512, 1024], probs=[0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001], decision=4)
sch.annotate(block_or_loop=b6, ann_key="meta_schedule.unroll_explicit", ann_val=v119)
l120, l121, l122, l123, l124, l125 = sch.get_loops(block=b3)
l126 = sch.fuse(l120, l121, l122, l123, preserve_unit_iters=True)
v127 = sch.sample_categorical(candidates=[32, 64, 128, 256, 512, 1024], probs=[0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666], decision=3)
l128, l129 = sch.split(loop=l126, factors=[None, v127], preserve_unit_iters=True)
sch.bind(loop=l128, thread_axis="blockIdx.x")
sch.bind(loop=l129, thread_axis="threadIdx.x")
sch.enter_postproc()
sch.unannotate(block_or_loop=b97, ann_key="meta_schedule.cooperative_fetch")
l130, l131, l132, l133, l134 = sch.get_loops(block=b97)
l135, l136, l137 = sch.split(loop=l134, factors=[None, 96, 4], preserve_unit_iters=True)
sch.vectorize(loop=l137)
sch.bind(loop=l136, thread_axis="threadIdx.x")
sch.unannotate(block_or_loop=b108, ann_key="meta_schedule.cooperative_fetch")
l138, l139, l140, l141, l142 = sch.get_loops(block=b108)
l143, l144, l145 = sch.split(loop=l142, factors=[None, 96, 4], preserve_unit_iters=True)
sch.vectorize(loop=l145)
sch.bind(loop=l144, thread_axis="threadIdx.x")
b146 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b146, ann_key="meta_schedule.unroll_explicit")
b147, b148, b149, b150, b151, b152, b153, b154, b155 = sch.get_child_blocks(b146)
l156, l157, l158, l159, l160, l161 = sch.get_loops(block=b147)
l162, l163, l164, l165, l166, l167 = sch.get_loops(block=b148)
sch.annotate(block_or_loop=l162, ann_key="pragma_auto_unroll_max_step", ann_val=1024)
sch.annotate(block_or_loop=l162, ann_key="pragma_unroll_explicit", ann_val=1)
l168, l169, l170, l171, l172, l173 = sch.get_loops(block=b149)
l174, l175, l176, l177, l178, l179, l180 = sch.get_loops(block=b150)
l181, l182, l183, l184, l185, l186, l187 = sch.get_loops(block=b151)
l188, l189, l190, l191, l192, l193, l194, l195, l196, l197, l198, l199, l200, l201 = sch.get_loops(block=b152)
sch.annotate(block_or_loop=l188, ann_key="pragma_auto_unroll_max_step", ann_val=1024)
sch.annotate(block_or_loop=l188, ann_key="pragma_unroll_explicit", ann_val=1)
l202, l203, l204, l205, l206, l207, l208 = sch.get_loops(block=b153)
l209, l210, l211, l212, l213, l214, l215, l216 = sch.get_loops(block=b154)
sch.annotate(block_or_loop=l209, ann_key="pragma_auto_unroll_max_step", ann_val=1024)
sch.annotate(block_or_loop=l209, ann_key="pragma_unroll_explicit", ann_val=1)
l217, l218, l219, l220 = sch.get_loops(block=b155)
b221 = sch.get_block(name="data_pack", func_name="main")
l222, l223, l224, l225, l226, l227 = sch.get_loops(block=b221)
b228 = sch.decompose_reduction(block=b221, loop=l226)
b229 = sch.get_block(name="bgemm", func_name="main")
l230, l231, l232, l233, l234, l235, l236, l237, l238, l239, l240, l241, l242, l243 = sch.get_loops(block=b229)
b244 = sch.decompose_reduction(block=b229, loop=l233)
b245 = sch.get_block(name="inverse", func_name="main")
l246, l247, l248, l249, l250, l251, l252, l253 = sch.get_loops(block=b245)
b254 = sch.decompose_reduction(block=b245, loop=l252)
2024-04-29 00:50:33 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu] Trial #409: GFLOPs: 7702.4080. Time: 56.2382 us. Best GFLOPs: 7856.3348
2024-04-29 00:50:33 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu] Trial #410: GFLOPs: 7350.3298. Time: 58.9320 us. Best GFLOPs: 7856.3348
2024-04-29 00:50:33 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu] Trial #411: GFLOPs: 7350.4726. Time: 58.9308 us. Best GFLOPs: 7856.3348
2024-04-29 00:50:33 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu] Trial #412: GFLOPs: 6993.9364. Time: 61.9350 us. Best GFLOPs: 7856.3348
2024-04-29 00:50:33 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu] Trial #413: GFLOPs: 7346.9433. Time: 58.9591 us. Best GFLOPs: 7856.3348
2024-04-29 00:50:33 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu] Trial #414: GFLOPs: 7284.8322. Time: 59.4618 us. Best GFLOPs: 7856.3348
2024-04-29 00:50:33 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu] Trial #415: GFLOPs: 7366.1116. Time: 58.8057 us. Best GFLOPs: 7856.3348
2024-04-29 00:50:33 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu] Trial #416: GFLOPs: 7317.2935. Time: 59.1980 us. Best GFLOPs: 7856.3348
2024-04-29 00:50:33 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu] Trial #417: GFLOPs: 7282.9212. Time: 59.4774 us. Best GFLOPs: 7856.3348
2024-04-29 00:50:33 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu] Trial #418: GFLOPs: 7070.9504. Time: 61.2604 us. Best GFLOPs: 7856.3348
2024-04-29 00:50:33 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu] Trial #419: GFLOPs: 7207.3150. Time: 60.1014 us. Best GFLOPs: 7856.3348
2024-04-29 00:50:33 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu] Trial #420: GFLOPs: 7205.9756. Time: 60.1125 us. Best GFLOPs: 7856.3348
2024-04-29 00:50:33 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu] Trial #421: GFLOPs: 7118.5352. Time: 60.8509 us. Best GFLOPs: 7856.3348
2024-04-29 00:50:33 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu] Trial #422: GFLOPs: 7048.7130. Time: 61.4537 us. Best GFLOPs: 7856.3348
2024-04-29 00:50:33 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu] Trial #423: GFLOPs: 7129.9019. Time: 60.7539 us. Best GFLOPs: 7856.3348
2024-04-29 00:50:33 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu] Trial #424: GFLOPs: 7182.8673. Time: 60.3059 us. Best GFLOPs: 7856.3348
2024-04-29 00:50:33 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu] Trial #425: GFLOPs: 7141.5977. Time: 60.6544 us. Best GFLOPs: 7856.3348
2024-04-29 00:50:33 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu] Trial #426: GFLOPs: 6908.6867. Time: 62.6992 us. Best GFLOPs: 7856.3348
2024-04-29 00:50:33 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu] Trial #427: GFLOPs: 751.8316. Time: 576.1521 us. Best GFLOPs: 7856.3348
2024-04-29 00:50:33 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu] Trial #428: GFLOPs: 6993.6756. Time: 61.9373 us. Best GFLOPs: 7856.3348
2024-04-29 00:50:33 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu] Trial #429: GFLOPs: 7089.6937. Time: 61.0985 us. Best GFLOPs: 7856.3348
2024-04-29 00:50:33 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu] Trial #430: GFLOPs: 7123.5395. Time: 60.8082 us. Best GFLOPs: 7856.3348
2024-04-29 00:50:33 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu] Trial #431: GFLOPs: 7368.5568. Time: 58.7862 us. Best GFLOPs: 7856.3348
2024-04-29 00:50:33 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu] Trial #432: GFLOPs: 7301.8540. Time: 59.3232 us. Best GFLOPs: 7856.3348
2024-04-29 00:50:33 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu] Trial #433: GFLOPs: 7194.5480. Time: 60.2080 us. Best GFLOPs: 7856.3348
2024-04-29 00:50:33 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu] Trial #434: GFLOPs: 7198.6797. Time: 60.1735 us. Best GFLOPs: 7856.3348
2024-04-29 00:50:33 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu] Trial #435: GFLOPs: 7204.6566. Time: 60.1235 us. Best GFLOPs: 7856.3348
2024-04-29 00:50:33 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu] Trial #436: GFLOPs: 6991.0949. Time: 61.9602 us. Best GFLOPs: 7856.3348
2024-04-29 00:50:33 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu] Trial #437: GFLOPs: 7078.1132. Time: 61.1984 us. Best GFLOPs: 7856.3348
2024-04-29 00:50:33 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu] Trial #438: GFLOPs: 7124.7208. Time: 60.7981 us. Best GFLOPs: 7856.3348
2024-04-29 00:50:33 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu] Trial #439: GFLOPs: 6999.6585. Time: 61.8844 us. Best GFLOPs: 7856.3348
2024-04-29 00:50:33 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu] Trial #440: GFLOPs: 7355.9740. Time: 58.8868 us. Best GFLOPs: 7856.3348
2024-04-29 00:50:33 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu] Trial #441: GFLOPs: 6999.1945. Time: 61.8885 us. Best GFLOPs: 7856.3348
2024-04-29 00:50:33 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu] Trial #442: GFLOPs: 7390.1444. Time: 58.6145 us. Best GFLOPs: 7856.3348
2024-04-29 00:50:33 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu] Trial #443: GFLOPs: 7333.1974. Time: 59.0697 us. Best GFLOPs: 7856.3348
2024-04-29 00:50:33 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu] Trial #444: GFLOPs: 7115.1466. Time: 60.8799 us. Best GFLOPs: 7856.3348
2024-04-29 00:50:33 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu] Trial #445: GFLOPs: 7113.7892. Time: 60.8915 us. Best GFLOPs: 7856.3348
2024-04-29 00:50:33 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu] Trial #446: GFLOPs: 3774.0842. Time: 114.7747 us. Best GFLOPs: 7856.3348
2024-04-29 00:50:33 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu] Trial #447: GFLOPs: 3031.5040. Time: 142.8893 us. Best GFLOPs: 7856.3348
2024-04-29 00:50:33 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu] Trial #448: GFLOPs: 2247.0844. Time: 192.7695 us. Best GFLOPs: 7856.3348
2024-04-29 01:41:20 [INFO] [evolutionary_search.cc:713] Generating candidates......
2024-04-29 01:41:23 [INFO] [evolutionary_search.cc:715] Picked top 102 candidate(s) from database
2024-04-29 01:41:30 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x76c2cc8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x3ab4108)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x87bd5e8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x77043f8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x485cc78)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x3aa5498)]: 391 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x3aad778)]: 0 failure(s)
2024-04-29 01:41:37 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x76c2cc8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x3ab4108)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x87bd5e8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x77043f8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x485cc78)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x3aa5498)]: 783 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x3aad778)]: 0 failure(s)
2024-04-29 01:41:43 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x76c2cc8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x3ab4108)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x87bd5e8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x77043f8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x485cc78)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x3aa5498)]: 1181 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x3aad778)]: 0 failure(s)
2024-04-29 01:41:50 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x76c2cc8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x3ab4108)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x87bd5e8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x77043f8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x485cc78)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x3aa5498)]: 1574 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x3aad778)]: 0 failure(s)
2024-04-29 01:41:50 [INFO] [evolutionary_search.cc:723] Sampled 66 candidate(s)
2024-04-29 01:42:09 [INFO] [evolutionary_search.cc:621] Evolve iter #0 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x76c2cc8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x3ab4108)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x87bd5e8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x77043f8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x485cc78)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x3aa5498)]: 32 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x3aad778)]: 0 failure(s)
2024-04-29 01:42:30 [INFO] [evolutionary_search.cc:621] Evolve iter #1 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x76c2cc8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x3ab4108)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x87bd5e8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x77043f8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x485cc78)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x3aa5498)]: 27 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x3aad778)]: 0 failure(s)
2024-04-29 01:42:52 [INFO] [evolutionary_search.cc:621] Evolve iter #2 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x76c2cc8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x3ab4108)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x87bd5e8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x77043f8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x485cc78)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x3aa5498)]: 38 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x3aad778)]: 0 failure(s)
2024-04-29 01:43:14 [INFO] [evolutionary_search.cc:621] Evolve iter #3 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x76c2cc8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x3ab4108)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x87bd5e8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x77043f8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x485cc78)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x3aa5498)]: 38 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x3aad778)]: 0 failure(s)
2024-04-29 01:43:19 [INFO] [evolutionary_search.cc:649] Scores of the best 64 candidates:
[1 : 16]:	0.9928  0.9928  0.9864  0.9845  0.9837  0.9834  0.9806  0.9784  0.9772  0.9769  0.9753  0.9752  0.9745  0.9743  0.9739  0.9719
[17 : 32]:	0.9718  0.9711  0.9704  0.9698  0.9693  0.9693  0.9689  0.9681  0.9664  0.9658  0.9650  0.9649  0.9642  0.9631  0.9627  0.9627
[33 : 48]:	0.9598  0.9575  0.9575  0.9564  0.9564  0.9564  0.9560  0.9556  0.9556  0.9532  0.9519  0.9519  0.9514  0.9513  0.9509  0.9503
[49 : 64]:	0.9502  0.9499  0.9492  0.9488  0.9483  0.9466  0.9465  0.9443  0.9433  0.9430  0.9430  0.9430  0.9430  0.9423  0.9422  0.9417
2024-04-29 01:43:20 [INFO] [evolutionary_search.cc:727] Got 64 candidate(s) with evolutionary search
2024-04-29 01:43:20 [INFO] [evolutionary_search.cc:730] Sending 64 candidates(s) for measurement
2024-04-29 01:44:53 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu] Trial #449: GFLOPs: 7424.8925. Time: 58.3402 us. Best GFLOPs: 7856.3348
2024-04-29 01:44:53 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu] Trial #450: GFLOPs: 7400.6366. Time: 58.5314 us. Best GFLOPs: 7856.3348
2024-04-29 01:44:53 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu] Trial #451: GFLOPs: 7280.8840. Time: 59.4941 us. Best GFLOPs: 7856.3348
2024-04-29 01:44:53 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu] Trial #452: GFLOPs: 7365.3862. Time: 58.8115 us. Best GFLOPs: 7856.3348
2024-04-29 01:44:53 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu] Trial #453: GFLOPs: 7360.6042. Time: 58.8497 us. Best GFLOPs: 7856.3348
2024-04-29 01:44:53 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu] Trial #454: GFLOPs: 7345.9044. Time: 58.9675 us. Best GFLOPs: 7856.3348
2024-04-29 01:44:53 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu] Trial #455: GFLOPs: 7411.0731. Time: 58.4489 us. Best GFLOPs: 7856.3348
2024-04-29 01:44:53 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu] Trial #456: GFLOPs: 7306.9713. Time: 59.2817 us. Best GFLOPs: 7856.3348
2024-04-29 01:44:53 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu] Trial #457: GFLOPs: 7116.3701. Time: 60.8694 us. Best GFLOPs: 7856.3348
2024-04-29 01:44:53 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu] Trial #458: GFLOPs: 7292.2432. Time: 59.4014 us. Best GFLOPs: 7856.3348
2024-04-29 01:44:53 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu] Trial #459: GFLOPs: 7303.8293. Time: 59.3072 us. Best GFLOPs: 7856.3348
2024-04-29 01:44:53 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu] Trial #460: GFLOPs: 6870.8469. Time: 63.0445 us. Best GFLOPs: 7856.3348
2024-04-29 01:44:53 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu] Trial #461: GFLOPs: 7376.2508. Time: 58.7249 us. Best GFLOPs: 7856.3348
2024-04-29 01:44:53 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu] Trial #462: GFLOPs: 6908.4518. Time: 62.7014 us. Best GFLOPs: 7856.3348
2024-04-29 01:44:53 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu] Trial #463: GFLOPs: 7315.8673. Time: 59.2096 us. Best GFLOPs: 7856.3348
2024-04-29 01:44:53 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu] Trial #464: GFLOPs: 7287.0084. Time: 59.4441 us. Best GFLOPs: 7856.3348
2024-04-29 01:44:53 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu] Trial #465: GFLOPs: 7359.5483. Time: 58.8582 us. Best GFLOPs: 7856.3348
2024-04-29 01:44:53 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu] Trial #466: GFLOPs: 7346.2810. Time: 58.9644 us. Best GFLOPs: 7856.3348
2024-04-29 01:44:53 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu] Trial #467: GFLOPs: 7806.7372. Time: 55.4866 us. Best GFLOPs: 7856.3348
2024-04-29 01:44:53 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu] Trial #468: GFLOPs: 7266.9344. Time: 59.6083 us. Best GFLOPs: 7856.3348
2024-04-29 01:44:53 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu] Trial #469: GFLOPs: 7256.0510. Time: 59.6977 us. Best GFLOPs: 7856.3348
2024-04-29 01:44:53 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu] Trial #470: GFLOPs: 7820.5385. Time: 55.3887 us. Best GFLOPs: 7856.3348
2024-04-29 01:44:53 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu] Trial #471: GFLOPs: 7325.2606. Time: 59.1337 us. Best GFLOPs: 7856.3348
2024-04-29 01:44:53 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu] Trial #472: GFLOPs: 7831.5905. Time: 55.3105 us. Best GFLOPs: 7856.3348
2024-04-29 01:44:53 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu] Trial #473: GFLOPs: 7317.1908. Time: 59.1989 us. Best GFLOPs: 7856.3348
2024-04-29 01:44:53 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu] Trial #474: GFLOPs: 7392.5918. Time: 58.5951 us. Best GFLOPs: 7856.3348
2024-04-29 01:44:53 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu] Trial #475: GFLOPs: 7039.8028. Time: 61.5315 us. Best GFLOPs: 7856.3348
2024-04-29 01:44:53 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu] Trial #476: GFLOPs: 7758.8815. Time: 55.8288 us. Best GFLOPs: 7856.3348
2024-04-29 01:44:53 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu] Trial #477: GFLOPs: 7814.6577. Time: 55.4304 us. Best GFLOPs: 7856.3348
2024-04-29 01:44:53 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu] Trial #478: GFLOPs: 7732.8141. Time: 56.0170 us. Best GFLOPs: 7856.3348
2024-04-29 01:44:53 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu] Trial #479: GFLOPs: 7815.8546. Time: 55.4219 us. Best GFLOPs: 7856.3348
2024-04-29 01:44:53 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu] Trial #480: GFLOPs: 7305.5698. Time: 59.2930 us. Best GFLOPs: 7856.3348
2024-04-29 01:44:53 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu] Trial #481: GFLOPs: 7318.5145. Time: 59.1882 us. Best GFLOPs: 7856.3348
2024-04-29 01:44:53 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu] Trial #482: GFLOPs: 7317.5982. Time: 59.1956 us. Best GFLOPs: 7856.3348
2024-04-29 01:44:53 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu] Trial #483: GFLOPs: 7323.1090. Time: 59.1510 us. Best GFLOPs: 7856.3348
2024-04-29 01:44:53 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu] Trial #484: GFLOPs: 7747.9667. Time: 55.9075 us. Best GFLOPs: 7856.3348
2024-04-29 01:44:53 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu] Trial #485: GFLOPs: 7285.2824. Time: 59.4581 us. Best GFLOPs: 7856.3348
2024-04-29 01:44:53 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu] Trial #486: GFLOPs: 7286.0640. Time: 59.4518 us. Best GFLOPs: 7856.3348
2024-04-29 01:44:53 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu] Trial #487: GFLOPs: 7708.5594. Time: 56.1933 us. Best GFLOPs: 7856.3348
2024-04-29 01:44:53 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu] Trial #488: GFLOPs: 7314.2411. Time: 59.2227 us. Best GFLOPs: 7856.3348
2024-04-29 01:44:53 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu] Trial #489: GFLOPs: 7317.7801. Time: 59.1941 us. Best GFLOPs: 7856.3348
2024-04-29 01:44:53 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu] Trial #490: GFLOPs: 7305.5786. Time: 59.2930 us. Best GFLOPs: 7856.3348
2024-04-29 01:44:53 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu] Trial #491: GFLOPs: 7275.8992. Time: 59.5348 us. Best GFLOPs: 7856.3348
2024-04-29 01:44:53 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu] Trial #492: GFLOPs: 7393.2823. Time: 58.5896 us. Best GFLOPs: 7856.3348
2024-04-29 01:44:53 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu] Trial #493: GFLOPs: 7353.2229. Time: 58.9088 us. Best GFLOPs: 7856.3348
2024-04-29 01:44:53 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu] Trial #494: GFLOPs: 7316.8702. Time: 59.2015 us. Best GFLOPs: 7856.3348
2024-04-29 01:44:53 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu] Trial #495: GFLOPs: 7319.7634. Time: 59.1781 us. Best GFLOPs: 7856.3348
2024-04-29 01:44:53 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu] Trial #496: GFLOPs: 6668.4705. Time: 64.9578 us. Best GFLOPs: 7856.3348
2024-04-29 01:44:53 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu] Trial #497: GFLOPs: 7346.8538. Time: 58.9599 us. Best GFLOPs: 7856.3348
2024-04-29 01:44:53 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu] Trial #498: GFLOPs: 7028.2546. Time: 61.6326 us. Best GFLOPs: 7856.3348
2024-04-29 01:44:53 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu] Trial #499: GFLOPs: 7231.7051. Time: 59.8987 us. Best GFLOPs: 7856.3348
2024-04-29 01:44:53 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu] Trial #500: GFLOPs: 7150.0530. Time: 60.5827 us. Best GFLOPs: 7856.3348
2024-04-29 01:44:53 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu] Trial #501: GFLOPs: 7302.8363. Time: 59.3152 us. Best GFLOPs: 7856.3348
2024-04-29 01:44:53 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu] Trial #502: GFLOPs: 7393.3999. Time: 58.5887 us. Best GFLOPs: 7856.3348
2024-04-29 01:44:53 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu] Trial #503: GFLOPs: 7397.4797. Time: 58.5563 us. Best GFLOPs: 7856.3348
2024-04-29 01:44:53 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu] Trial #504: GFLOPs: 7395.4940. Time: 58.5721 us. Best GFLOPs: 7856.3348
2024-04-29 01:44:53 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu] Trial #505: GFLOPs: 7384.0746. Time: 58.6627 us. Best GFLOPs: 7856.3348
2024-04-29 01:44:53 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu] Trial #506: GFLOPs: 7390.7036. Time: 58.6100 us. Best GFLOPs: 7856.3348
2024-04-29 01:44:53 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu] Trial #507: GFLOPs: 7394.2803. Time: 58.5817 us. Best GFLOPs: 7856.3348
2024-04-29 01:44:53 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu] Trial #508: GFLOPs: 7395.0166. Time: 58.5759 us. Best GFLOPs: 7856.3348
2024-04-29 01:44:53 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu] Trial #509: GFLOPs: 7393.5154. Time: 58.5877 us. Best GFLOPs: 7856.3348
2024-04-29 01:44:53 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu] Trial #510: GFLOPs: 1134.0938. Time: 381.9520 us. Best GFLOPs: 7856.3348
2024-04-29 01:44:53 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu] Trial #511: GFLOPs: 5821.1224. Time: 74.4134 us. Best GFLOPs: 7856.3348
2024-04-29 01:44:53 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu] Trial #512: GFLOPs: 197.9470. Time: 2188.3102 us. Best GFLOPs: 7856.3348
2024-04-29 02:25:59 [INFO] [evolutionary_search.cc:713] Generating candidates......
2024-04-29 02:26:03 [INFO] [evolutionary_search.cc:715] Picked top 102 candidate(s) from database
2024-04-29 02:26:10 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x76c2cc8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x3ab4108)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x87bd5e8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x77043f8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x485cc78)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x3aa5498)]: 393 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x3aad778)]: 0 failure(s)
2024-04-29 02:26:16 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x76c2cc8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x3ab4108)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x87bd5e8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x77043f8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x485cc78)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x3aa5498)]: 789 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x3aad778)]: 0 failure(s)
2024-04-29 02:26:23 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x76c2cc8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x3ab4108)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x87bd5e8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x77043f8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x485cc78)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x3aa5498)]: 1183 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x3aad778)]: 0 failure(s)
2024-04-29 02:26:29 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x76c2cc8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x3ab4108)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x87bd5e8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x77043f8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x485cc78)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x3aa5498)]: 1579 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x3aad778)]: 0 failure(s)
2024-04-29 02:26:29 [INFO] [evolutionary_search.cc:723] Sampled 61 candidate(s)
2024-04-29 02:26:47 [INFO] [evolutionary_search.cc:621] Evolve iter #0 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x76c2cc8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x3ab4108)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x87bd5e8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x77043f8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x485cc78)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x3aa5498)]: 43 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x3aad778)]: 0 failure(s)
2024-04-29 02:27:08 [INFO] [evolutionary_search.cc:621] Evolve iter #1 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x76c2cc8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x3ab4108)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x87bd5e8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x77043f8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x485cc78)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x3aa5498)]: 34 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x3aad778)]: 0 failure(s)
2024-04-29 02:27:29 [INFO] [evolutionary_search.cc:621] Evolve iter #2 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x76c2cc8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x3ab4108)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x87bd5e8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x77043f8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x485cc78)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x3aa5498)]: 29 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x3aad778)]: 0 failure(s)
2024-04-29 02:27:50 [INFO] [evolutionary_search.cc:621] Evolve iter #3 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x76c2cc8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x3ab4108)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x87bd5e8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x77043f8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x485cc78)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x3aa5498)]: 31 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x3aad778)]: 0 failure(s)
2024-04-29 02:27:55 [INFO] [evolutionary_search.cc:649] Scores of the best 64 candidates:
[1 : 16]:	1.0222  0.9992  0.9948  0.9934  0.9896  0.9889  0.9887  0.9875  0.9828  0.9828  0.9821  0.9821  0.9818  0.9807  0.9801  0.9801
[17 : 32]:	0.9796  0.9788  0.9784  0.9773  0.9760  0.9759  0.9746  0.9745  0.9734  0.9732  0.9706  0.9704  0.9704  0.9695  0.9693  0.9684
[33 : 48]:	0.9679  0.9678  0.9677  0.9677  0.9663  0.9655  0.9653  0.9647  0.9634  0.9629  0.9628  0.9625  0.9613  0.9608  0.9588  0.9588
[49 : 64]:	0.9579  0.9579  0.9571  0.9571  0.9563  0.9561  0.9561  0.9559  0.9554  0.9533  0.9528  0.9527  0.9527  0.9514  0.9503  0.9503
2024-04-29 02:27:56 [INFO] [evolutionary_search.cc:727] Got 64 candidate(s) with evolutionary search
2024-04-29 02:27:56 [INFO] [evolutionary_search.cc:730] Sending 64 candidates(s) for measurement
2024-04-29 02:29:27 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu] Trial #513: GFLOPs: 7076.1836. Time: 61.2151 us. Best GFLOPs: 7856.3348
2024-04-29 02:29:27 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu] Trial #514: GFLOPs: 7588.4966. Time: 57.0824 us. Best GFLOPs: 7856.3348
2024-04-29 02:29:27 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu] Trial #515: GFLOPs: 7772.7567. Time: 55.7292 us. Best GFLOPs: 7856.3348
2024-04-29 02:29:27 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu] Trial #516: GFLOPs: 7712.0972. Time: 56.1675 us. Best GFLOPs: 7856.3348
2024-04-29 02:29:27 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu] Trial #517: GFLOPs: 7610.5956. Time: 56.9166 us. Best GFLOPs: 7856.3348
2024-04-29 02:29:27 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu] Trial #518: GFLOPs: 7744.9033. Time: 55.9296 us. Best GFLOPs: 7856.3348
2024-04-29 02:29:27 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu] Trial #519: GFLOPs: 7774.5501. Time: 55.7163 us. Best GFLOPs: 7856.3348
2024-04-29 02:29:27 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu] Trial #520: GFLOPs: 3512.4828. Time: 123.3229 us. Best GFLOPs: 7856.3348
2024-04-29 02:29:27 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu] Trial #521: GFLOPs: 7828.3159. Time: 55.3337 us. Best GFLOPs: 7856.3348
2024-04-29 02:29:27 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu] Trial #522: GFLOPs: 7836.1039. Time: 55.2787 us. Best GFLOPs: 7856.3348
2024-04-29 02:29:27 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu] Trial #523: GFLOPs: 6126.3751. Time: 70.7057 us. Best GFLOPs: 7856.3348
2024-04-29 02:29:27 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu] Trial #524: GFLOPs: 7417.4672. Time: 58.3986 us. Best GFLOPs: 7856.3348
2024-04-29 02:29:27 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu] Trial #525: GFLOPs: 6128.7620. Time: 70.6781 us. Best GFLOPs: 7856.3348
2024-04-29 02:29:27 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu] Trial #526: GFLOPs: 7750.4615. Time: 55.8895 us. Best GFLOPs: 7856.3348
2024-04-29 02:29:27 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu] Trial #527: GFLOPs: 7820.3989. Time: 55.3897 us. Best GFLOPs: 7856.3348
2024-04-29 02:29:27 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu] Trial #528: GFLOPs: 7795.3260. Time: 55.5678 us. Best GFLOPs: 7856.3348
2024-04-29 02:29:27 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu] Trial #529: GFLOPs: 2699.8560. Time: 160.4417 us. Best GFLOPs: 7856.3348
2024-04-29 02:29:27 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu] Trial #530: GFLOPs: 7681.8065. Time: 56.3890 us. Best GFLOPs: 7856.3348
2024-04-29 02:29:27 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu] Trial #531: GFLOPs: 7199.3543. Time: 60.1678 us. Best GFLOPs: 7856.3348
2024-04-29 02:29:27 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu] Trial #532: GFLOPs: 3325.4807. Time: 130.2577 us. Best GFLOPs: 7856.3348
2024-04-29 02:29:27 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu] Trial #533: GFLOPs: 7819.8955. Time: 55.3932 us. Best GFLOPs: 7856.3348
2024-04-29 02:29:27 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu] Trial #534: GFLOPs: 7855.7776. Time: 55.1402 us. Best GFLOPs: 7856.3348
2024-04-29 02:29:27 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu] Trial #535: GFLOPs: 7392.0526. Time: 58.5993 us. Best GFLOPs: 7856.3348
2024-04-29 02:29:27 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu] Trial #536: GFLOPs: 6834.9646. Time: 63.3755 us. Best GFLOPs: 7856.3348
2024-04-29 02:29:27 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu] Trial #537: GFLOPs: 7750.5330. Time: 55.8890 us. Best GFLOPs: 7856.3348
2024-04-29 02:29:27 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu] Trial #538: GFLOPs: 7760.7570. Time: 55.8154 us. Best GFLOPs: 7856.3348
2024-04-29 02:29:27 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu] Trial #539: GFLOPs: 4081.1275. Time: 106.1396 us. Best GFLOPs: 7856.3348
2024-04-29 02:29:27 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu] Trial #540: GFLOPs: 7336.5277. Time: 59.0428 us. Best GFLOPs: 7856.3348
2024-04-29 02:29:27 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu] Trial #541: GFLOPs: 7341.5018. Time: 59.0028 us. Best GFLOPs: 7856.3348
2024-04-29 02:29:27 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu] Trial #542: GFLOPs: 7831.4243. Time: 55.3117 us. Best GFLOPs: 7856.3348
2024-04-29 02:29:27 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu] Trial #543: GFLOPs: 7815.9673. Time: 55.4211 us. Best GFLOPs: 7856.3348
2024-04-29 02:29:27 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu] Trial #544: GFLOPs: 6262.6788. Time: 69.1668 us. Best GFLOPs: 7856.3348
2024-04-29 02:29:27 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu] Trial #545: GFLOPs: 3343.1039. Time: 129.5710 us. Best GFLOPs: 7856.3348
2024-04-29 02:29:27 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu] Trial #546: GFLOPs: 7323.5155. Time: 59.1477 us. Best GFLOPs: 7856.3348
2024-04-29 02:29:27 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu] Trial #547: GFLOPs: 7754.2457. Time: 55.8622 us. Best GFLOPs: 7856.3348
2024-04-29 02:29:27 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu] Trial #548: GFLOPs: 7752.3243. Time: 55.8761 us. Best GFLOPs: 7856.3348
2024-04-29 02:29:27 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu] Trial #549: GFLOPs: 7927.0650. Time: 54.6444 us. Best GFLOPs: 7927.0650
2024-04-29 02:29:27 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu] Trial #550: GFLOPs: 7280.0004. Time: 59.5013 us. Best GFLOPs: 7927.0650
2024-04-29 02:29:27 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu] Trial #551: GFLOPs: 7282.7850. Time: 59.4785 us. Best GFLOPs: 7927.0650
2024-04-29 02:29:27 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu] Trial #552: GFLOPs: 7339.4716. Time: 59.0192 us. Best GFLOPs: 7927.0650
2024-04-29 02:29:27 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu] Trial #553: GFLOPs: 7709.2396. Time: 56.1883 us. Best GFLOPs: 7927.0650
2024-04-29 02:29:27 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu] Trial #554: GFLOPs: 7280.1498. Time: 59.5001 us. Best GFLOPs: 7927.0650
2024-04-29 02:29:27 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu] Trial #555: GFLOPs: 6082.8961. Time: 71.2110 us. Best GFLOPs: 7927.0650
2024-04-29 02:29:27 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu] Trial #556: GFLOPs: 6084.1051. Time: 71.1969 us. Best GFLOPs: 7927.0650
2024-04-29 02:29:27 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu] Trial #557: GFLOPs: 7886.1640. Time: 54.9278 us. Best GFLOPs: 7927.0650
2024-04-29 02:29:27 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu] Trial #558: GFLOPs: 7752.1420. Time: 55.8774 us. Best GFLOPs: 7927.0650
2024-04-29 02:29:27 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu] Trial #559: GFLOPs: 3324.4474. Time: 130.2982 us. Best GFLOPs: 7927.0650
2024-04-29 02:29:27 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu] Trial #560: GFLOPs: 3325.5799. Time: 130.2538 us. Best GFLOPs: 7927.0650
2024-04-29 02:29:27 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu] Trial #561: GFLOPs: 7406.1169. Time: 58.4881 us. Best GFLOPs: 7927.0650
2024-04-29 02:29:27 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu] Trial #562: GFLOPs: 7405.4214. Time: 58.4936 us. Best GFLOPs: 7927.0650
2024-04-29 02:29:27 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu] Trial #563: GFLOPs: 7392.0748. Time: 58.5992 us. Best GFLOPs: 7927.0650
2024-04-29 02:29:27 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu] Trial #564: GFLOPs: 7392.6585. Time: 58.5945 us. Best GFLOPs: 7927.0650
2024-04-29 02:29:27 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu] Trial #565: GFLOPs: 7878.4002. Time: 54.9819 us. Best GFLOPs: 7927.0650
2024-04-29 02:29:27 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu] Trial #566: GFLOPs: 7663.9238. Time: 56.5206 us. Best GFLOPs: 7927.0650
2024-04-29 02:29:27 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu] Trial #567: GFLOPs: 7047.3897. Time: 61.4652 us. Best GFLOPs: 7927.0650
2024-04-29 02:29:27 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu] Trial #568: GFLOPs: 7755.8726. Time: 55.8505 us. Best GFLOPs: 7927.0650
2024-04-29 02:29:27 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu] Trial #569: GFLOPs: 7429.0620. Time: 58.3074 us. Best GFLOPs: 7927.0650
2024-04-29 02:29:27 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu] Trial #570: GFLOPs: 7258.0220. Time: 59.6815 us. Best GFLOPs: 7927.0650
2024-04-29 02:29:27 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu] Trial #571: GFLOPs: 3635.9878. Time: 119.1339 us. Best GFLOPs: 7927.0650
2024-04-29 02:29:27 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu] Trial #572: GFLOPs: 6848.1592. Time: 63.2534 us. Best GFLOPs: 7927.0650
2024-04-29 02:29:27 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu] Trial #573: GFLOPs: 3292.1195. Time: 131.5777 us. Best GFLOPs: 7927.0650
2024-04-29 02:29:27 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu] Trial #574: GFLOPs: 416.4135. Time: 1040.2387 us. Best GFLOPs: 7927.0650
2024-04-29 02:29:27 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu] Trial #575: GFLOPs: 1476.5228. Time: 293.3713 us. Best GFLOPs: 7927.0650
2024-04-29 02:29:27 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu] Trial #576: GFLOPs: 1177.9816. Time: 367.7217 us. Best GFLOPs: 7927.0650
2024-04-29 03:06:40 [INFO] [evolutionary_search.cc:713] Generating candidates......
2024-04-29 03:06:44 [INFO] [evolutionary_search.cc:715] Picked top 102 candidate(s) from database
2024-04-29 03:06:51 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x76c2cc8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x3ab4108)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x87bd5e8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x77043f8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x485cc78)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x3aa5498)]: 397 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x3aad778)]: 0 failure(s)
2024-04-29 03:06:58 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x76c2cc8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x3ab4108)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x87bd5e8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x77043f8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x485cc78)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x3aa5498)]: 793 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x3aad778)]: 0 failure(s)
2024-04-29 03:07:05 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x76c2cc8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x3ab4108)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x87bd5e8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x77043f8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x485cc78)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x3aa5498)]: 1178 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x3aad778)]: 0 failure(s)
2024-04-29 03:07:05 [INFO] [evolutionary_search.cc:723] Sampled 52 candidate(s)
2024-04-29 03:07:23 [INFO] [evolutionary_search.cc:621] Evolve iter #0 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x76c2cc8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x3ab4108)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x87bd5e8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x77043f8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x485cc78)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x3aa5498)]: 34 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x3aad778)]: 0 failure(s)
2024-04-29 03:07:44 [INFO] [evolutionary_search.cc:621] Evolve iter #1 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x76c2cc8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x3ab4108)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x87bd5e8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x77043f8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x485cc78)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x3aa5498)]: 36 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x3aad778)]: 0 failure(s)
2024-04-29 03:08:05 [INFO] [evolutionary_search.cc:621] Evolve iter #2 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x76c2cc8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x3ab4108)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x87bd5e8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x77043f8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x485cc78)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x3aa5498)]: 33 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x3aad778)]: 0 failure(s)
2024-04-29 03:08:27 [INFO] [evolutionary_search.cc:621] Evolve iter #3 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x76c2cc8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x3ab4108)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x87bd5e8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x77043f8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x485cc78)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x3aa5498)]: 43 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x3aad778)]: 0 failure(s)
2024-04-29 03:08:32 [INFO] [evolutionary_search.cc:649] Scores of the best 64 candidates:
[1 : 16]:	1.0528  1.0416  1.0330  1.0263  1.0232  1.0219  1.0163  1.0114  1.0114  1.0110  1.0088  1.0082  1.0047  1.0045  0.9981  0.9950
[17 : 32]:	0.9918  0.9911  0.9909  0.9909  0.9880  0.9861  0.9856  0.9855  0.9837  0.9833  0.9833  0.9819  0.9813  0.9804  0.9801  0.9801
[33 : 48]:	0.9792  0.9792  0.9775  0.9769  0.9768  0.9759  0.9754  0.9751  0.9749  0.9746  0.9743  0.9739  0.9738  0.9738  0.9736  0.9736
[49 : 64]:	0.9731  0.9730  0.9726  0.9722  0.9719  0.9719  0.9719  0.9718  0.9709  0.9706  0.9689  0.9688  0.9683  0.9683  0.9678  0.9678
2024-04-29 03:08:33 [INFO] [evolutionary_search.cc:727] Got 64 candidate(s) with evolutionary search
2024-04-29 03:08:33 [INFO] [evolutionary_search.cc:730] Sending 64 candidates(s) for measurement
2024-04-29 03:09:59 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu] Trial #577: GFLOPs: 7314.7576. Time: 59.2186 us. Best GFLOPs: 7927.0650
2024-04-29 03:09:59 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu] Trial #578: GFLOPs: 6530.2935. Time: 66.3323 us. Best GFLOPs: 7927.0650
2024-04-29 03:09:59 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu] Trial #579: GFLOPs: 7004.5126. Time: 61.8415 us. Best GFLOPs: 7927.0650
2024-04-29 03:09:59 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu] Trial #580: GFLOPs: 6728.0034. Time: 64.3831 us. Best GFLOPs: 7927.0650
2024-04-29 03:09:59 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu] Trial #581: GFLOPs: 7598.7176. Time: 57.0056 us. Best GFLOPs: 7927.0650
2024-04-29 03:09:59 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu] Trial #582: GFLOPs: 6727.8136. Time: 64.3849 us. Best GFLOPs: 7927.0650
2024-04-29 03:09:59 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu] Trial #583: GFLOPs: 7612.5743. Time: 56.9018 us. Best GFLOPs: 7927.0650
2024-04-29 03:09:59 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu] Trial #584: GFLOPs: 7023.8652. Time: 61.6711 us. Best GFLOPs: 7927.0650
2024-04-29 03:09:59 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu] Trial #585: GFLOPs: 7012.2691. Time: 61.7731 us. Best GFLOPs: 7927.0650
2024-04-29 03:09:59 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu] Trial #586: GFLOPs: 6755.9603. Time: 64.1166 us. Best GFLOPs: 7927.0650
2024-04-29 03:09:59 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu] Trial #587: GFLOPs: 7614.3640. Time: 56.8885 us. Best GFLOPs: 7927.0650
2024-04-29 03:09:59 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu] Trial #588: GFLOPs: 6826.7643. Time: 63.4516 us. Best GFLOPs: 7927.0650
2024-04-29 03:09:59 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu] Trial #589: GFLOPs: 7576.9204. Time: 57.1696 us. Best GFLOPs: 7927.0650
2024-04-29 03:09:59 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu] Trial #590: GFLOPs: 6465.7418. Time: 66.9945 us. Best GFLOPs: 7927.0650
2024-04-29 03:09:59 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu] Trial #591: GFLOPs: 7773.2773. Time: 55.7255 us. Best GFLOPs: 7927.0650
2024-04-29 03:09:59 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu] Trial #592: GFLOPs: 7584.9267. Time: 57.1092 us. Best GFLOPs: 7927.0650
2024-04-29 03:09:59 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu] Trial #593: GFLOPs: 7320.9974. Time: 59.1681 us. Best GFLOPs: 7927.0650
2024-04-29 03:09:59 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu] Trial #594: GFLOPs: 7733.2413. Time: 56.0140 us. Best GFLOPs: 7927.0650
2024-04-29 03:09:59 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu] Trial #595: GFLOPs: 7684.8540. Time: 56.3666 us. Best GFLOPs: 7927.0650
2024-04-29 03:09:59 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu] Trial #596: GFLOPs: 7687.8706. Time: 56.3445 us. Best GFLOPs: 7927.0650
2024-04-29 03:09:59 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu] Trial #597: GFLOPs: 7504.3956. Time: 57.7221 us. Best GFLOPs: 7927.0650
2024-04-29 03:09:59 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu] Trial #598: GFLOPs: 7459.5187. Time: 58.0694 us. Best GFLOPs: 7927.0650
2024-04-29 03:09:59 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu] Trial #599: GFLOPs: 7822.8462. Time: 55.3724 us. Best GFLOPs: 7927.0650
2024-04-29 03:09:59 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu] Trial #600: GFLOPs: 7782.8365. Time: 55.6570 us. Best GFLOPs: 7927.0650
2024-04-29 03:09:59 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu] Trial #601: GFLOPs: 7638.2249. Time: 56.7107 us. Best GFLOPs: 7927.0650
2024-04-29 03:09:59 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu] Trial #602: GFLOPs: 7770.7396. Time: 55.7437 us. Best GFLOPs: 7927.0650
2024-04-29 03:09:59 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu] Trial #603: GFLOPs: 7765.6753. Time: 55.7800 us. Best GFLOPs: 7927.0650
2024-04-29 03:09:59 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu] Trial #604: GFLOPs: 7799.5064. Time: 55.5381 us. Best GFLOPs: 7927.0650
2024-04-29 03:09:59 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu] Trial #605: GFLOPs: 7642.6595. Time: 56.6778 us. Best GFLOPs: 7927.0650
2024-04-29 03:09:59 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu] Trial #606: GFLOPs: 7679.4758. Time: 56.4061 us. Best GFLOPs: 7927.0650
2024-04-29 03:09:59 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu] Trial #607: GFLOPs: 7825.9841. Time: 55.3502 us. Best GFLOPs: 7927.0650
2024-04-29 03:09:59 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu] Trial #608: GFLOPs: 7822.3532. Time: 55.3758 us. Best GFLOPs: 7927.0650
2024-04-29 03:09:59 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu] Trial #609: GFLOPs: 7752.9751. Time: 55.8714 us. Best GFLOPs: 7927.0650
2024-04-29 03:09:59 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu] Trial #610: GFLOPs: 7812.4841. Time: 55.4458 us. Best GFLOPs: 7927.0650
2024-04-29 03:09:59 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu] Trial #611: GFLOPs: 7693.4299. Time: 56.3038 us. Best GFLOPs: 7927.0650
2024-04-29 03:09:59 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu] Trial #612: GFLOPs: 7716.0246. Time: 56.1389 us. Best GFLOPs: 7927.0650
2024-04-29 03:09:59 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu] Trial #613: GFLOPs: 7827.0140. Time: 55.3429 us. Best GFLOPs: 7927.0650
2024-04-29 03:09:59 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu] Trial #614: GFLOPs: 7752.7509. Time: 55.8730 us. Best GFLOPs: 7927.0650
2024-04-29 03:09:59 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu] Trial #615: GFLOPs: 7236.1837. Time: 59.8616 us. Best GFLOPs: 7927.0650
2024-04-29 03:09:59 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu] Trial #616: GFLOPs: 7874.6450. Time: 55.0081 us. Best GFLOPs: 7927.0650
2024-04-29 03:09:59 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu] Trial #617: GFLOPs: 7874.4143. Time: 55.0097 us. Best GFLOPs: 7927.0650
2024-04-29 03:09:59 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu] Trial #618: GFLOPs: 7660.5276. Time: 56.5456 us. Best GFLOPs: 7927.0650
2024-04-29 03:09:59 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu] Trial #619: GFLOPs: 7729.3535. Time: 56.0421 us. Best GFLOPs: 7927.0650
2024-04-29 03:09:59 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu] Trial #620: GFLOPs: 7851.0106. Time: 55.1737 us. Best GFLOPs: 7927.0650
2024-04-29 03:09:59 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu] Trial #621: GFLOPs: 7688.5633. Time: 56.3394 us. Best GFLOPs: 7927.0650
2024-04-29 03:09:59 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu] Trial #622: GFLOPs: 7681.8622. Time: 56.3886 us. Best GFLOPs: 7927.0650
2024-04-29 03:09:59 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu] Trial #623: GFLOPs: 7656.4163. Time: 56.5760 us. Best GFLOPs: 7927.0650
2024-04-29 03:09:59 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu] Trial #624: GFLOPs: 7699.9539. Time: 56.2561 us. Best GFLOPs: 7927.0650
2024-04-29 03:09:59 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu] Trial #625: GFLOPs: 7661.1791. Time: 56.5408 us. Best GFLOPs: 7927.0650
2024-04-29 03:09:59 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu] Trial #626: GFLOPs: 7775.2002. Time: 55.7117 us. Best GFLOPs: 7927.0650
2024-04-29 03:09:59 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu] Trial #627: GFLOPs: 7799.5823. Time: 55.5375 us. Best GFLOPs: 7927.0650
2024-04-29 03:09:59 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu] Trial #628: GFLOPs: 7637.9288. Time: 56.7129 us. Best GFLOPs: 7927.0650
2024-04-29 03:09:59 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu] Trial #629: GFLOPs: 7716.7833. Time: 56.1334 us. Best GFLOPs: 7927.0650
2024-04-29 03:09:59 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu] Trial #630: GFLOPs: 7640.2507. Time: 56.6957 us. Best GFLOPs: 7927.0650
2024-04-29 03:09:59 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu] Trial #631: GFLOPs: 7719.5483. Time: 56.1133 us. Best GFLOPs: 7927.0650
2024-04-29 03:09:59 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu] Trial #632: GFLOPs: 7817.0430. Time: 55.4135 us. Best GFLOPs: 7927.0650
2024-04-29 03:09:59 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu] Trial #633: GFLOPs: 7251.2364. Time: 59.7373 us. Best GFLOPs: 7927.0650
2024-04-29 03:09:59 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu] Trial #634: GFLOPs: 7677.0716. Time: 56.4238 us. Best GFLOPs: 7927.0650
2024-04-29 03:09:59 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu] Trial #635: GFLOPs: 7690.2508. Time: 56.3271 us. Best GFLOPs: 7927.0650
2024-04-29 03:09:59 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu] Trial #636: GFLOPs: 7662.8198. Time: 56.5287 us. Best GFLOPs: 7927.0650
2024-04-29 03:09:59 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu] Trial #637: GFLOPs: 7769.3216. Time: 55.7538 us. Best GFLOPs: 7927.0650
2024-04-29 03:09:59 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu] Trial #638: GFLOPs: 3181.1998. Time: 136.1654 us. Best GFLOPs: 7927.0650
2024-04-29 03:09:59 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu] Trial #639: GFLOPs: 1361.5590. Time: 318.1422 us. Best GFLOPs: 7927.0650
2024-04-29 03:09:59 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu] Trial #640: GFLOPs: 5755.5621. Time: 75.2610 us. Best GFLOPs: 7927.0650
2024-04-29 03:49:22 [INFO] [evolutionary_search.cc:713] Generating candidates......
2024-04-29 03:49:26 [INFO] [evolutionary_search.cc:715] Picked top 102 candidate(s) from database
2024-04-29 03:49:32 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x76c2cc8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x3ab4108)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x87bd5e8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x77043f8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x485cc78)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x3aa5498)]: 386 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x3aad778)]: 0 failure(s)
2024-04-29 03:49:39 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x76c2cc8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x3ab4108)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x87bd5e8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x77043f8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x485cc78)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x3aa5498)]: 777 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x3aad778)]: 0 failure(s)
2024-04-29 03:49:45 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x76c2cc8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x3ab4108)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x87bd5e8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x77043f8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x485cc78)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x3aa5498)]: 1162 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x3aad778)]: 0 failure(s)
2024-04-29 03:49:45 [INFO] [evolutionary_search.cc:723] Sampled 68 candidate(s)
2024-04-29 03:50:03 [INFO] [evolutionary_search.cc:621] Evolve iter #0 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x76c2cc8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x3ab4108)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x87bd5e8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x77043f8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x485cc78)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x3aa5498)]: 51 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x3aad778)]: 0 failure(s)
2024-04-29 03:50:24 [INFO] [evolutionary_search.cc:621] Evolve iter #1 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x76c2cc8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x3ab4108)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x87bd5e8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x77043f8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x485cc78)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x3aa5498)]: 31 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x3aad778)]: 0 failure(s)
2024-04-29 03:50:45 [INFO] [evolutionary_search.cc:621] Evolve iter #2 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x76c2cc8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x3ab4108)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x87bd5e8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x77043f8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x485cc78)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x3aa5498)]: 55 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x3aad778)]: 0 failure(s)
2024-04-29 03:51:06 [INFO] [evolutionary_search.cc:621] Evolve iter #3 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x76c2cc8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x3ab4108)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x87bd5e8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x77043f8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x485cc78)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x3aa5498)]: 35 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x3aad778)]: 0 failure(s)
2024-04-29 03:51:11 [INFO] [evolutionary_search.cc:649] Scores of the best 64 candidates:
[1 : 16]:	1.0268  1.0250  1.0221  1.0138  0.9994  0.9983  0.9979  0.9968  0.9964  0.9964  0.9964  0.9963  0.9961  0.9955  0.9953  0.9953
[17 : 32]:	0.9952  0.9948  0.9945  0.9941  0.9935  0.9934  0.9919  0.9899  0.9898  0.9894  0.9888  0.9886  0.9886  0.9885  0.9884  0.9884
[33 : 48]:	0.9883  0.9883  0.9883  0.9883  0.9883  0.9881  0.9880  0.9879  0.9877  0.9875  0.9872  0.9872  0.9872  0.9872  0.9870  0.9870
[49 : 64]:	0.9870  0.9869  0.9869  0.9868  0.9867  0.9866  0.9859  0.9858  0.9858  0.9857  0.9855  0.9855  0.9853  0.9848  0.9847  0.9846
2024-04-29 03:51:12 [INFO] [evolutionary_search.cc:727] Got 64 candidate(s) with evolutionary search
2024-04-29 03:51:12 [INFO] [evolutionary_search.cc:730] Sending 64 candidates(s) for measurement
2024-04-29 03:52:20 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu] Trial #641: GFLOPs: 7716.7824. Time: 56.1334 us. Best GFLOPs: 7927.0650
2024-04-29 03:52:20 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu] Trial #642: GFLOPs: 7864.9513. Time: 55.0759 us. Best GFLOPs: 7927.0650
2024-04-29 03:52:20 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu] Trial #643: GFLOPs: 7699.2947. Time: 56.2609 us. Best GFLOPs: 7927.0650
2024-04-29 03:52:20 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu] Trial #644: GFLOPs: 7674.9598. Time: 56.4393 us. Best GFLOPs: 7927.0650
2024-04-29 03:52:20 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu] Trial #645: GFLOPs: 7657.3999. Time: 56.5687 us. Best GFLOPs: 7927.0650
2024-04-29 03:52:20 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu] Trial #646: GFLOPs: 7801.2116. Time: 55.5259 us. Best GFLOPs: 7927.0650
2024-04-29 03:52:20 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu] Trial #647: GFLOPs: 7760.9738. Time: 55.8138 us. Best GFLOPs: 7927.0650
2024-04-29 03:52:20 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu] Trial #648: GFLOPs: 7735.7867. Time: 55.9955 us. Best GFLOPs: 7927.0650
2024-04-29 03:52:20 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu] Trial #649: GFLOPs: 7691.8287. Time: 56.3155 us. Best GFLOPs: 7927.0650
2024-04-29 03:52:20 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu] Trial #650: GFLOPs: 7685.1163. Time: 56.3647 us. Best GFLOPs: 7927.0650
2024-04-29 03:52:20 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu] Trial #651: GFLOPs: 7762.8792. Time: 55.8001 us. Best GFLOPs: 7927.0650
2024-04-29 03:52:20 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu] Trial #652: GFLOPs: 7819.9245. Time: 55.3930 us. Best GFLOPs: 7927.0650
2024-04-29 03:52:20 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu] Trial #653: GFLOPs: 7832.0373. Time: 55.3074 us. Best GFLOPs: 7927.0650
2024-04-29 03:52:20 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu] Trial #654: GFLOPs: 7779.3105. Time: 55.6822 us. Best GFLOPs: 7927.0650
2024-04-29 03:52:20 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu] Trial #655: GFLOPs: 7669.5034. Time: 56.4795 us. Best GFLOPs: 7927.0650
2024-04-29 03:52:20 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu] Trial #656: GFLOPs: 7740.2415. Time: 55.9633 us. Best GFLOPs: 7927.0650
2024-04-29 03:52:20 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu] Trial #657: GFLOPs: 7866.4424. Time: 55.0655 us. Best GFLOPs: 7927.0650
2024-04-29 03:52:20 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu] Trial #658: GFLOPs: 7787.3199. Time: 55.6250 us. Best GFLOPs: 7927.0650
2024-04-29 03:52:20 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu] Trial #659: GFLOPs: 7808.0013. Time: 55.4776 us. Best GFLOPs: 7927.0650
2024-04-29 03:52:20 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu] Trial #660: GFLOPs: 7761.0597. Time: 55.8132 us. Best GFLOPs: 7927.0650
2024-04-29 03:52:20 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu] Trial #661: GFLOPs: 7707.8072. Time: 56.1988 us. Best GFLOPs: 7927.0650
2024-04-29 03:52:20 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu] Trial #662: GFLOPs: 7764.0347. Time: 55.7918 us. Best GFLOPs: 7927.0650
2024-04-29 03:52:20 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu] Trial #663: GFLOPs: 7659.0649. Time: 56.5564 us. Best GFLOPs: 7927.0650
2024-04-29 03:52:20 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu] Trial #664: GFLOPs: 7801.4838. Time: 55.5240 us. Best GFLOPs: 7927.0650
2024-04-29 03:52:20 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu] Trial #665: GFLOPs: 7700.1995. Time: 56.2543 us. Best GFLOPs: 7927.0650
2024-04-29 03:52:20 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu] Trial #666: GFLOPs: 7715.6875. Time: 56.1414 us. Best GFLOPs: 7927.0650
2024-04-29 03:52:20 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu] Trial #667: GFLOPs: 7810.2524. Time: 55.4616 us. Best GFLOPs: 7927.0650
2024-04-29 03:52:20 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu] Trial #668: GFLOPs: 7820.8533. Time: 55.3865 us. Best GFLOPs: 7927.0650
2024-04-29 03:52:20 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu] Trial #669: GFLOPs: 7824.3770. Time: 55.3615 us. Best GFLOPs: 7927.0650
2024-04-29 03:52:20 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu] Trial #670: GFLOPs: 7821.5462. Time: 55.3816 us. Best GFLOPs: 7927.0650
2024-04-29 03:52:20 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu] Trial #671: GFLOPs: 7777.6147. Time: 55.6944 us. Best GFLOPs: 7927.0650
2024-04-29 03:52:20 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu] Trial #672: GFLOPs: 7822.4032. Time: 55.3755 us. Best GFLOPs: 7927.0650
2024-04-29 03:52:20 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu] Trial #673: GFLOPs: 7748.7498. Time: 55.9018 us. Best GFLOPs: 7927.0650
2024-04-29 03:52:20 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu] Trial #674: GFLOPs: 7750.0112. Time: 55.8927 us. Best GFLOPs: 7927.0650
2024-04-29 03:52:20 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu] Trial #675: GFLOPs: 7815.6986. Time: 55.4230 us. Best GFLOPs: 7927.0650
2024-04-29 03:52:20 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu] Trial #676: GFLOPs: 7815.8546. Time: 55.4219 us. Best GFLOPs: 7927.0650
2024-04-29 03:52:20 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu] Trial #677: GFLOPs: 7705.7678. Time: 56.2137 us. Best GFLOPs: 7927.0650
2024-04-29 03:52:20 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu] Trial #678: GFLOPs: 7821.4375. Time: 55.3823 us. Best GFLOPs: 7927.0650
2024-04-29 03:52:20 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu] Trial #679: GFLOPs: 7774.1986. Time: 55.7189 us. Best GFLOPs: 7927.0650
2024-04-29 03:52:20 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu] Trial #680: GFLOPs: 7718.4281. Time: 56.1215 us. Best GFLOPs: 7927.0650
2024-04-29 03:52:20 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu] Trial #681: GFLOPs: 7827.8196. Time: 55.3372 us. Best GFLOPs: 7927.0650
2024-04-29 03:52:20 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu] Trial #682: GFLOPs: 7815.1987. Time: 55.4265 us. Best GFLOPs: 7927.0650
2024-04-29 03:52:20 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu] Trial #683: GFLOPs: 7723.6189. Time: 56.0837 us. Best GFLOPs: 7927.0650
2024-04-29 03:52:20 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu] Trial #684: GFLOPs: 7689.6249. Time: 56.3317 us. Best GFLOPs: 7927.0650
2024-04-29 03:52:20 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu] Trial #685: GFLOPs: 7679.2528. Time: 56.4078 us. Best GFLOPs: 7927.0650
2024-04-29 03:52:20 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu] Trial #686: GFLOPs: 7690.3635. Time: 56.3263 us. Best GFLOPs: 7927.0650
2024-04-29 03:52:20 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu] Trial #687: GFLOPs: 7826.4582. Time: 55.3468 us. Best GFLOPs: 7927.0650
2024-04-29 03:52:20 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu] Trial #688: GFLOPs: 7838.4381. Time: 55.2622 us. Best GFLOPs: 7927.0650
2024-04-29 03:52:20 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu] Trial #689: GFLOPs: 7814.9400. Time: 55.4284 us. Best GFLOPs: 7927.0650
2024-04-29 03:52:20 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu] Trial #690: GFLOPs: 7832.5915. Time: 55.3035 us. Best GFLOPs: 7927.0650
2024-04-29 03:52:20 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu] Trial #691: GFLOPs: 7764.8313. Time: 55.7861 us. Best GFLOPs: 7927.0650
2024-04-29 03:52:20 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu] Trial #692: GFLOPs: 7817.4443. Time: 55.4106 us. Best GFLOPs: 7927.0650
2024-04-29 03:52:20 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu] Trial #693: GFLOPs: 7822.0783. Time: 55.3778 us. Best GFLOPs: 7927.0650
2024-04-29 03:52:20 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu] Trial #694: GFLOPs: 7810.9299. Time: 55.4568 us. Best GFLOPs: 7927.0650
2024-04-29 03:52:20 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu] Trial #695: GFLOPs: 7893.5443. Time: 54.8764 us. Best GFLOPs: 7927.0650
2024-04-29 03:52:20 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu] Trial #696: GFLOPs: 7684.4944. Time: 56.3693 us. Best GFLOPs: 7927.0650
2024-04-29 03:52:20 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu] Trial #697: GFLOPs: 7647.7273. Time: 56.6403 us. Best GFLOPs: 7927.0650
2024-04-29 03:52:20 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu] Trial #698: GFLOPs: 7686.7728. Time: 56.3526 us. Best GFLOPs: 7927.0650
2024-04-29 03:52:20 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu] Trial #699: GFLOPs: 7791.7548. Time: 55.5933 us. Best GFLOPs: 7927.0650
2024-04-29 03:52:20 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu] Trial #700: GFLOPs: 7792.5606. Time: 55.5876 us. Best GFLOPs: 7927.0650
2024-04-29 03:52:20 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu] Trial #701: GFLOPs: 7819.4156. Time: 55.3966 us. Best GFLOPs: 7927.0650
2024-04-29 03:52:20 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu] Trial #702: GFLOPs: 561.4982. Time: 771.4529 us. Best GFLOPs: 7927.0650
2024-04-29 03:52:20 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu] Trial #703: GFLOPs: 1746.1529. Time: 248.0707 us. Best GFLOPs: 7927.0650
2024-04-29 03:52:20 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu] Trial #704: GFLOPs: 1457.4460. Time: 297.2113 us. Best GFLOPs: 7927.0650
