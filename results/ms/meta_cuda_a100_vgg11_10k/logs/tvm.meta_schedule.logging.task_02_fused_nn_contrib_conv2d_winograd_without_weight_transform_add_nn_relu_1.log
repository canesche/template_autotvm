2024-04-28 19:49:58 [INFO] [task_scheduler.cc:160] Initializing Task #2: "fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1"
2024-04-28 19:49:58 [INFO] [task_scheduler.cc:35] 
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(64), T.int64(112), T.int64(112)), "float32"), p1: T.Buffer((T.int64(6), T.int64(6), T.int64(64), T.int64(128)), "float32"), p2: T.Buffer((T.int64(1), T.int64(128), T.int64(1), T.int64(1)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(128), T.int64(112), T.int64(112)), "float32")):
        T.func_attr({"layout_free_buffers": [1], "tir.noalias": T.bool(True)})
        # with T.block("root"):
        data_pad = T.alloc_buffer((T.int64(1), T.int64(64), T.int64(114), T.int64(114)))
        input_tile = T.alloc_buffer((T.int64(64), T.int64(784), T.int64(6), T.int64(6)))
        B = T.alloc_buffer((T.int64(6), T.int64(6)))
        data_pack = T.alloc_buffer((T.int64(6), T.int64(6), T.int64(64), T.int64(784)))
        bgemm = T.alloc_buffer((T.int64(6), T.int64(6), T.int64(128), T.int64(784)))
        A = T.alloc_buffer((T.int64(6), T.int64(4)))
        inverse = T.alloc_buffer((T.int64(128), T.int64(784), T.int64(4), T.int64(4)))
        conv2d_winograd = T.alloc_buffer((T.int64(1), T.int64(128), T.int64(112), T.int64(112)))
        T_add = T.alloc_buffer((T.int64(1), T.int64(128), T.int64(112), T.int64(112)))
        for i0, i1, i2, i3 in T.grid(T.int64(1), T.int64(64), T.int64(114), T.int64(114)):
            with T.block("data_pad"):
                v_i0, v_i1, v_i2, v_i3 = T.axis.remap("SSSS", [i0, i1, i2, i3])
                T.reads(p0[v_i0, v_i1, v_i2 - T.int64(1), v_i3 - T.int64(1)])
                T.writes(data_pad[v_i0, v_i1, v_i2, v_i3])
                data_pad[v_i0, v_i1, v_i2, v_i3] = T.if_then_else(T.int64(1) <= v_i2 and v_i2 < T.int64(113) and T.int64(1) <= v_i3 and v_i3 < T.int64(113), p0[v_i0, v_i1, v_i2 - T.int64(1), v_i3 - T.int64(1)], T.float32(0))
        for ci, p, eps, nu in T.grid(T.int64(64), T.int64(784), T.int64(6), T.int64(6)):
            with T.block("input_tile"):
                v_ci, v_p, v_eps, v_nu = T.axis.remap("SSSS", [ci, p, eps, nu])
                T.reads(data_pad[v_p // T.int64(784), v_ci, v_p % T.int64(784) // T.int64(28) * T.int64(4) + v_eps, v_p % T.int64(28) * T.int64(4) + v_nu])
                T.writes(input_tile[v_ci, v_p, v_eps, v_nu])
                T.block_attr({"schedule_rule": "None"})
                input_tile[v_ci, v_p, v_eps, v_nu] = data_pad[v_p // T.int64(784), v_ci, v_p % T.int64(784) // T.int64(28) * T.int64(4) + v_eps, v_p % T.int64(28) * T.int64(4) + v_nu]
        for i, j in T.grid(T.int64(6), T.int64(6)):
            with T.block("B"):
                v_i, v_j = T.axis.remap("SS", [i, j])
                T.reads()
                T.writes(B[v_i, v_j])
                T.block_attr({"schedule_rule": "None"})
                B[v_i, v_j] = T.Select(v_i % T.int64(6) == T.int64(5) and v_j % T.int64(6) == T.int64(5), T.float32(1), T.Select(v_i % T.int64(6) == T.int64(5) and v_j % T.int64(6) == T.int64(4), T.float32(0), T.Select(v_i % T.int64(6) == T.int64(5) and v_j % T.int64(6) == T.int64(3), T.float32(0), T.Select(v_i % T.int64(6) == T.int64(5) and v_j % T.int64(6) == T.int64(2), T.float32(0), T.Select(v_i % T.int64(6) == T.int64(5) and v_j % T.int64(6) == T.int64(1), T.float32(0), T.Select(v_i % T.int64(6) == T.int64(5) and v_j % T.int64(6) == T.int64(0), T.float32(0), T.Select(v_i % T.int64(6) == T.int64(4) and v_j % T.int64(6) == T.int64(5), T.float32(1.5), T.Select(v_i % T.int64(6) == T.int64(4) and v_j % T.int64(6) == T.int64(4), T.float32(1), T.Select(v_i % T.int64(6) == T.int64(4) and v_j % T.int64(6) == T.int64(3), T.float32(1), T.Select(v_i % T.int64(6) == T.int64(4) and v_j % T.int64(6) == T.int64(2), T.float32(1), T.Select(v_i % T.int64(6) == T.int64(4) and v_j % T.int64(6) == T.int64(1), T.float32(1), T.Select(v_i % T.int64(6) == T.int64(4) and v_j % T.int64(6) == T.int64(0), T.float32(1), T.Select(v_i % T.int64(6) == T.int64(3) and v_j % T.int64(6) == T.int64(5), T.float32(-2), T.Select(v_i % T.int64(6) == T.int64(3) and v_j % T.int64(6) == T.int64(4), T.float32(-0.5), T.Select(v_i % T.int64(6) == T.int64(3) and v_j % T.int64(6) == T.int64(3), T.float32(2), T.Select(v_i % T.int64(6) == T.int64(3) and v_j % T.int64(6) == T.int64(2), T.float32(2.5), T.Select(v_i % T.int64(6) == T.int64(3) and v_j % T.int64(6) == T.int64(1), T.float32(0.5), T.Select(v_i % T.int64(6) == T.int64(3) and v_j % T.int64(6) == T.int64(0), T.float32(1.5), T.Select(v_i % T.int64(6) == T.int64(2) and v_j % T.int64(6) == T.int64(5), T.float32(-1.5), T.Select(v_i % T.int64(6) == T.int64(2) and v_j % T.int64(6) == T.int64(4), T.float32(-1), T.Select(v_i % T.int64(6) == T.int64(2) and v_j % T.int64(6) == T.int64(3), T.float32(-1), T.Select(v_i % T.int64(6) == T.int64(2) and v_j % T.int64(6) == T.int64(2), T.float32(0.5), T.Select(v_i % T.int64(6) == T.int64(2) and v_j % T.int64(6) == T.int64(1), T.float32(-2.5), T.Select(v_i % T.int64(6) == T.int64(2) and v_j % T.int64(6) == T.int64(0), T.float32(-2), T.Select(v_i % T.int64(6) == T.int64(1) and v_j % T.int64(6) == T.int64(5), T.float32(1), T.Select(v_i % T.int64(6) == T.int64(1) and v_j % T.int64(6) == T.int64(4), T.float32(0.5), T.Select(v_i % T.int64(6) == T.int64(1) and v_j % T.int64(6) == T.int64(3), T.float32(-2), T.Select(v_i % T.int64(6) == T.int64(1) and v_j % T.int64(6) == T.int64(2), T.float32(-1), T.Select(v_i % T.int64(6) == T.int64(1) and v_j % T.int64(6) == T.int64(1), T.float32(1), T.Select(v_i % T.int64(6) == T.int64(1) and v_j % T.int64(6) == T.int64(0), T.float32(-1.5), T.Select(v_i % T.int64(6) == T.int64(0) and v_j % T.int64(6) == T.int64(5), T.float32(0), T.Select(v_i % T.int64(6) == T.int64(0) and v_j % T.int64(6) == T.int64(4), T.float32(0), T.Select(v_i % T.int64(6) == T.int64(0) and v_j % T.int64(6) == T.int64(3), T.float32(0), T.Select(v_i % T.int64(6) == T.int64(0) and v_j % T.int64(6) == T.int64(2), T.float32(0), T.Select(v_i % T.int64(6) == T.int64(0) and v_j % T.int64(6) == T.int64(1), T.float32(0), T.Select(v_i % T.int64(6) == T.int64(0) and v_j % T.int64(6) == T.int64(0), T.float32(1), T.float32(0)))))))))))))))))))))))))))))))))))))
        for eps, nu, ci, p, r_a, r_b in T.grid(T.int64(6), T.int64(6), T.int64(64), T.int64(784), T.int64(6), T.int64(6)):
            with T.block("data_pack"):
                v_eps, v_nu, v_ci, v_p, v_r_a, v_r_b = T.axis.remap("SSSSRR", [eps, nu, ci, p, r_a, r_b])
                T.reads(input_tile[v_ci, v_p, v_r_a, v_r_b], B[T.min(v_r_a, v_r_b):T.min(v_r_a, v_r_b) + (T.max(v_r_a, v_r_b) + T.int64(1) - T.min(v_r_a, v_r_b)), T.min(v_eps, v_nu):T.min(v_eps, v_nu) + (T.max(v_eps, v_nu) + T.int64(1) - T.min(v_eps, v_nu))])
                T.writes(data_pack[v_eps, v_nu, v_ci, v_p])
                T.block_attr({"schedule_rule": "conv2d_nchw_winograd_data_pack"})
                with T.init():
                    data_pack[v_eps, v_nu, v_ci, v_p] = T.float32(0)
                data_pack[v_eps, v_nu, v_ci, v_p] = data_pack[v_eps, v_nu, v_ci, v_p] + input_tile[v_ci, v_p, v_r_a, v_r_b] * B[v_r_a, v_eps] * B[v_r_b, v_nu]
        for eps, nu, co, p, ci in T.grid(T.int64(6), T.int64(6), T.int64(128), T.int64(784), T.int64(64)):
            with T.block("bgemm"):
                v_eps, v_nu, v_co, v_p, v_ci = T.axis.remap("SSSSR", [eps, nu, co, p, ci])
                T.reads(data_pack[v_eps, v_nu, v_ci, v_p], p1[v_eps, v_nu, v_ci, v_co])
                T.writes(bgemm[v_eps, v_nu, v_co, v_p])
                with T.init():
                    bgemm[v_eps, v_nu, v_co, v_p] = T.float32(0)
                bgemm[v_eps, v_nu, v_co, v_p] = bgemm[v_eps, v_nu, v_co, v_p] + data_pack[v_eps, v_nu, v_ci, v_p] * p1[v_eps, v_nu, v_ci, v_co]
        for i, j in T.grid(T.int64(6), T.int64(4)):
            with T.block("A"):
                v_i, v_j = T.axis.remap("SS", [i, j])
                T.reads()
                T.writes(A[v_i, v_j])
                T.block_attr({"schedule_rule": "None"})
                A[v_i, v_j] = T.Select(v_i % T.int64(6) == T.int64(5) and v_j % T.int64(4) == T.int64(3), T.float32(1), T.Select(v_i % T.int64(6) == T.int64(5) and v_j % T.int64(4) == T.int64(2), T.float32(0), T.Select(v_i % T.int64(6) == T.int64(5) and v_j % T.int64(4) == T.int64(1), T.float32(0), T.Select(v_i % T.int64(6) == T.int64(5) and v_j % T.int64(4) == T.int64(0), T.float32(0), T.Select(v_i % T.int64(6) == T.int64(4) and v_j % T.int64(4) == T.int64(3), T.float32(-8), T.Select(v_i % T.int64(6) == T.int64(4) and v_j % T.int64(4) == T.int64(2), T.float32(4), T.Select(v_i % T.int64(6) == T.int64(4) and v_j % T.int64(4) == T.int64(1), T.float32(-2), T.Select(v_i % T.int64(6) == T.int64(4) and v_j % T.int64(4) == T.int64(0), T.float32(1), T.Select(v_i % T.int64(6) == T.int64(3) and v_j % T.int64(4) == T.int64(3), T.float32(0.125), T.Select(v_i % T.int64(6) == T.int64(3) and v_j % T.int64(4) == T.int64(2), T.float32(0.25), T.Select(v_i % T.int64(6) == T.int64(3) and v_j % T.int64(4) == T.int64(1), T.float32(0.5), T.Select(v_i % T.int64(6) == T.int64(3) and v_j % T.int64(4) == T.int64(0), T.float32(1), T.Select(v_i % T.int64(6) == T.int64(2) and v_j % T.int64(4) == T.int64(3), T.float32(1), T.Select(v_i % T.int64(6) == T.int64(2) and v_j % T.int64(4) == T.int64(2), T.float32(1), T.Select(v_i % T.int64(6) == T.int64(2) and v_j % T.int64(4) == T.int64(1), T.float32(1), T.Select(v_i % T.int64(6) == T.int64(2) and v_j % T.int64(4) == T.int64(0), T.float32(1), T.Select(v_i % T.int64(6) == T.int64(1) and v_j % T.int64(4) == T.int64(3), T.float32(-1), T.Select(v_i % T.int64(6) == T.int64(1) and v_j % T.int64(4) == T.int64(2), T.float32(1), T.Select(v_i % T.int64(6) == T.int64(1) and v_j % T.int64(4) == T.int64(1), T.float32(-1), T.Select(v_i % T.int64(6) == T.int64(1) and v_j % T.int64(4) == T.int64(0), T.float32(1), T.Select(v_i % T.int64(6) == T.int64(0) and v_j % T.int64(4) == T.int64(3), T.float32(0), T.Select(v_i % T.int64(6) == T.int64(0) and v_j % T.int64(4) == T.int64(2), T.float32(0), T.Select(v_i % T.int64(6) == T.int64(0) and v_j % T.int64(4) == T.int64(1), T.float32(0), T.Select(v_i % T.int64(6) == T.int64(0) and v_j % T.int64(4) == T.int64(0), T.float32(1), T.float32(0)))))))))))))))))))))))))
        for co, p, vh, vw, r_a, r_b in T.grid(T.int64(128), T.int64(784), T.int64(4), T.int64(4), T.int64(6), T.int64(6)):
            with T.block("inverse"):
                v_co, v_p, v_vh, v_vw, v_r_a, v_r_b = T.axis.remap("SSSSRR", [co, p, vh, vw, r_a, r_b])
                T.reads(bgemm[v_r_a, v_r_b, v_co, v_p], A[T.min(v_r_a, v_r_b):T.min(v_r_a, v_r_b) + (T.max(v_r_a, v_r_b) + T.int64(1) - T.min(v_r_a, v_r_b)), T.min(v_vh, v_vw):T.min(v_vh, v_vw) + (T.max(v_vh, v_vw) + T.int64(1) - T.min(v_vh, v_vw))])
                T.writes(inverse[v_co, v_p, v_vh, v_vw])
                T.block_attr({"schedule_rule": "conv2d_nchw_winograd_inverse"})
                with T.init():
                    inverse[v_co, v_p, v_vh, v_vw] = T.float32(0)
                inverse[v_co, v_p, v_vh, v_vw] = inverse[v_co, v_p, v_vh, v_vw] + bgemm[v_r_a, v_r_b, v_co, v_p] * A[v_r_a, v_vh] * A[v_r_b, v_vw]
        for n, co, h, w in T.grid(T.int64(1), T.int64(128), T.int64(112), T.int64(112)):
            with T.block("conv2d_winograd"):
                v_n, v_co, v_h, v_w = T.axis.remap("SSSS", [n, co, h, w])
                T.reads(inverse[v_co, v_n * T.int64(784) + v_h // T.int64(4) * T.int64(28) + v_w // T.int64(4), v_h % T.int64(4), v_w % T.int64(4)])
                T.writes(conv2d_winograd[v_n, v_co, v_h, v_w])
                conv2d_winograd[v_n, v_co, v_h, v_w] = inverse[v_co, v_n * T.int64(784) + v_h // T.int64(4) * T.int64(28) + v_w // T.int64(4), v_h % T.int64(4), v_w % T.int64(4)]
        for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(128), T.int64(112), T.int64(112)):
            with T.block("T_add"):
                v_ax0, v_ax1, v_ax2, v_ax3 = T.axis.remap("SSSS", [ax0, ax1, ax2, ax3])
                T.reads(conv2d_winograd[v_ax0, v_ax1, v_ax2, v_ax3], p2[v_ax0, v_ax1, T.int64(0), T.int64(0)])
                T.writes(T_add[v_ax0, v_ax1, v_ax2, v_ax3])
                T_add[v_ax0, v_ax1, v_ax2, v_ax3] = conv2d_winograd[v_ax0, v_ax1, v_ax2, v_ax3] + p2[v_ax0, v_ax1, T.int64(0), T.int64(0)]
        for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(128), T.int64(112), T.int64(112)):
            with T.block("T_relu"):
                v_ax0, v_ax1, v_ax2, v_ax3 = T.axis.remap("SSSS", [ax0, ax1, ax2, ax3])
                T.reads(T_add[v_ax0, v_ax1, v_ax2, v_ax3])
                T.writes(T_relu[v_ax0, v_ax1, v_ax2, v_ax3])
                T_relu[v_ax0, v_ax1, v_ax2, v_ax3] = T.max(T_add[v_ax0, v_ax1, v_ax2, v_ax3], T.float32(0))
2024-04-28 19:49:58 [INFO] [task_scheduler.cc:164] Total 3 design space(s) generated
2024-04-28 19:49:58 [INFO] [task_scheduler.cc:170] Design space #0:
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(64), T.int64(112), T.int64(112)), "float32"), p1: T.Buffer((T.int64(6), T.int64(6), T.int64(64), T.int64(128)), "float32"), p2: T.Buffer((T.int64(1), T.int64(128), T.int64(1), T.int64(1)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(128), T.int64(112), T.int64(112)), "float32")):
        T.func_attr({"layout_free_buffers": [1], "tir.noalias": T.bool(True)})
        with T.block("root"):
            T.reads()
            T.writes()
            T.block_attr({"meta_schedule.unroll_explicit": 1024})
            input_tile_local = T.alloc_buffer((T.int64(64), T.int64(784), T.int64(6), T.int64(6)), scope="local")
            data_pack = T.alloc_buffer((T.int64(6), T.int64(6), T.int64(64), T.int64(784)))
            bgemm = T.alloc_buffer((T.int64(6), T.int64(6), T.int64(128), T.int64(784)))
            inverse_local = T.alloc_buffer((T.int64(128), T.int64(784), T.int64(4), T.int64(4)), scope="local")
            data_pack_local = T.alloc_buffer((T.int64(6), T.int64(6), T.int64(64), T.int64(784)), scope="local")
            bgemm_local = T.alloc_buffer((T.int64(6), T.int64(6), T.int64(128), T.int64(784)), scope="local")
            data_pack_shared = T.alloc_buffer((T.int64(6), T.int64(6), T.int64(64), T.int64(784)), scope="shared")
            p1_shared = T.alloc_buffer((T.int64(6), T.int64(6), T.int64(64), T.int64(128)), scope="shared")
            for ci_p_fused_0 in T.thread_binding(T.int64(49), thread="blockIdx.x"):
                for ci_p_fused_1 in T.thread_binding(T.int64(1024), thread="threadIdx.x"):
                    for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(1), T.int64(6), T.int64(6)):
                        with T.block("input_tile"):
                            v_ci = T.axis.spatial(T.int64(64), (ci_p_fused_0 * T.int64(1024) + ci_p_fused_1) // T.int64(784) + ax0)
                            v_p = T.axis.spatial(T.int64(784), (ci_p_fused_0 * T.int64(240) + ci_p_fused_1) % T.int64(784) + ax1)
                            v_eps, v_nu = T.axis.remap("SS", [ax2, ax3])
                            T.reads(p0[v_p // T.int64(784), v_ci, v_p % T.int64(784) // T.int64(28) * T.int64(4) + v_eps - T.int64(1), v_p % T.int64(28) * T.int64(4) + v_nu - T.int64(1)])
                            T.writes(input_tile_local[v_ci, v_p, v_eps, v_nu])
                            T.block_attr({"schedule_rule": "None"})
                            input_tile_local[v_ci, v_p, v_eps, v_nu] = T.if_then_else(T.int64(1) <= v_p % T.int64(784) // T.int64(28) * T.int64(4) + v_eps and v_p % T.int64(784) // T.int64(28) * T.int64(4) + v_eps < T.int64(113) and T.int64(1) <= v_p % T.int64(28) * T.int64(4) + v_nu and v_p % T.int64(28) * T.int64(4) + v_nu < T.int64(113), p0[v_p // T.int64(784), v_ci, v_p % T.int64(784) // T.int64(28) * T.int64(4) + v_eps - T.int64(1), v_p % T.int64(28) * T.int64(4) + v_nu - T.int64(1)], T.float32(0))
                    for eps in T.unroll(T.int64(6)):
                        for nu in T.unroll(T.int64(6)):
                            for r_a in T.unroll(T.int64(6)):
                                for r_b in T.unroll(T.int64(6)):
                                    with T.block("data_pack"):
                                        v_eps, v_nu = T.axis.remap("SS", [eps, nu])
                                        v_ci = T.axis.spatial(T.int64(64), (ci_p_fused_0 * T.int64(1024) + ci_p_fused_1) // T.int64(784))
                                        v_p = T.axis.spatial(T.int64(784), (ci_p_fused_0 * T.int64(1024) + ci_p_fused_1) % T.int64(784))
                                        v_r_a, v_r_b = T.axis.remap("RR", [r_a, r_b])
                                        T.reads(input_tile_local[v_ci, v_p, v_r_a, v_r_b])
                                        T.writes(data_pack_local[v_eps, v_nu, v_ci, v_p])
                                        T.block_attr({"schedule_rule": "conv2d_nchw_winograd_data_pack"})
                                        with T.init():
                                            data_pack_local[v_eps, v_nu, v_ci, v_p] = T.float32(0)
                                        data_pack_local[v_eps, v_nu, v_ci, v_p] = data_pack_local[v_eps, v_nu, v_ci, v_p] + input_tile_local[v_ci, v_p, v_r_a, v_r_b] * T.Select(v_r_a % T.int64(6) == T.int64(5) and v_eps % T.int64(6) == T.int64(5), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(5) and v_eps % T.int64(6) == T.int64(4), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(5) and v_eps % T.int64(6) == T.int64(3), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(5) and v_eps % T.int64(6) == T.int64(2), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(5) and v_eps % T.int64(6) == T.int64(1), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(5) and v_eps % T.int64(6) == T.int64(0), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(4) and v_eps % T.int64(6) == T.int64(5), T.float32(1.5), T.Select(v_r_a % T.int64(6) == T.int64(4) and v_eps % T.int64(6) == T.int64(4), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(4) and v_eps % T.int64(6) == T.int64(3), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(4) and v_eps % T.int64(6) == T.int64(2), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(4) and v_eps % T.int64(6) == T.int64(1), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(4) and v_eps % T.int64(6) == T.int64(0), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(3) and v_eps % T.int64(6) == T.int64(5), T.float32(-2), T.Select(v_r_a % T.int64(6) == T.int64(3) and v_eps % T.int64(6) == T.int64(4), T.float32(-0.5), T.Select(v_r_a % T.int64(6) == T.int64(3) and v_eps % T.int64(6) == T.int64(3), T.float32(2), T.Select(v_r_a % T.int64(6) == T.int64(3) and v_eps % T.int64(6) == T.int64(2), T.float32(2.5), T.Select(v_r_a % T.int64(6) == T.int64(3) and v_eps % T.int64(6) == T.int64(1), T.float32(0.5), T.Select(v_r_a % T.int64(6) == T.int64(3) and v_eps % T.int64(6) == T.int64(0), T.float32(1.5), T.Select(v_r_a % T.int64(6) == T.int64(2) and v_eps % T.int64(6) == T.int64(5), T.float32(-1.5), T.Select(v_r_a % T.int64(6) == T.int64(2) and v_eps % T.int64(6) == T.int64(4), T.float32(-1), T.Select(v_r_a % T.int64(6) == T.int64(2) and v_eps % T.int64(6) == T.int64(3), T.float32(-1), T.Select(v_r_a % T.int64(6) == T.int64(2) and v_eps % T.int64(6) == T.int64(2), T.float32(0.5), T.Select(v_r_a % T.int64(6) == T.int64(2) and v_eps % T.int64(6) == T.int64(1), T.float32(-2.5), T.Select(v_r_a % T.int64(6) == T.int64(2) and v_eps % T.int64(6) == T.int64(0), T.float32(-2), T.Select(v_r_a % T.int64(6) == T.int64(1) and v_eps % T.int64(6) == T.int64(5), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(1) and v_eps % T.int64(6) == T.int64(4), T.float32(0.5), T.Select(v_r_a % T.int64(6) == T.int64(1) and v_eps % T.int64(6) == T.int64(3), T.float32(-2), T.Select(v_r_a % T.int64(6) == T.int64(1) and v_eps % T.int64(6) == T.int64(2), T.float32(-1), T.Select(v_r_a % T.int64(6) == T.int64(1) and v_eps % T.int64(6) == T.int64(1), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(1) and v_eps % T.int64(6) == T.int64(0), T.float32(-1.5), T.Select(v_r_a % T.int64(6) == T.int64(0) and v_eps % T.int64(6) == T.int64(5), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(0) and v_eps % T.int64(6) == T.int64(4), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(0) and v_eps % T.int64(6) == T.int64(3), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(0) and v_eps % T.int64(6) == T.int64(2), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(0) and v_eps % T.int64(6) == T.int64(1), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(0) and v_eps % T.int64(6) == T.int64(0), T.float32(1), T.float32(0))))))))))))))))))))))))))))))))))))) * T.Select(v_r_b % T.int64(6) == T.int64(5) and v_nu % T.int64(6) == T.int64(5), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(5) and v_nu % T.int64(6) == T.int64(4), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(5) and v_nu % T.int64(6) == T.int64(3), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(5) and v_nu % T.int64(6) == T.int64(2), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(5) and v_nu % T.int64(6) == T.int64(1), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(5) and v_nu % T.int64(6) == T.int64(0), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(4) and v_nu % T.int64(6) == T.int64(5), T.float32(1.5), T.Select(v_r_b % T.int64(6) == T.int64(4) and v_nu % T.int64(6) == T.int64(4), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(4) and v_nu % T.int64(6) == T.int64(3), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(4) and v_nu % T.int64(6) == T.int64(2), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(4) and v_nu % T.int64(6) == T.int64(1), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(4) and v_nu % T.int64(6) == T.int64(0), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(3) and v_nu % T.int64(6) == T.int64(5), T.float32(-2), T.Select(v_r_b % T.int64(6) == T.int64(3) and v_nu % T.int64(6) == T.int64(4), T.float32(-0.5), T.Select(v_r_b % T.int64(6) == T.int64(3) and v_nu % T.int64(6) == T.int64(3), T.float32(2), T.Select(v_r_b % T.int64(6) == T.int64(3) and v_nu % T.int64(6) == T.int64(2), T.float32(2.5), T.Select(v_r_b % T.int64(6) == T.int64(3) and v_nu % T.int64(6) == T.int64(1), T.float32(0.5), T.Select(v_r_b % T.int64(6) == T.int64(3) and v_nu % T.int64(6) == T.int64(0), T.float32(1.5), T.Select(v_r_b % T.int64(6) == T.int64(2) and v_nu % T.int64(6) == T.int64(5), T.float32(-1.5), T.Select(v_r_b % T.int64(6) == T.int64(2) and v_nu % T.int64(6) == T.int64(4), T.float32(-1), T.Select(v_r_b % T.int64(6) == T.int64(2) and v_nu % T.int64(6) == T.int64(3), T.float32(-1), T.Select(v_r_b % T.int64(6) == T.int64(2) and v_nu % T.int64(6) == T.int64(2), T.float32(0.5), T.Select(v_r_b % T.int64(6) == T.int64(2) and v_nu % T.int64(6) == T.int64(1), T.float32(-2.5), T.Select(v_r_b % T.int64(6) == T.int64(2) and v_nu % T.int64(6) == T.int64(0), T.float32(-2), T.Select(v_r_b % T.int64(6) == T.int64(1) and v_nu % T.int64(6) == T.int64(5), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(1) and v_nu % T.int64(6) == T.int64(4), T.float32(0.5), T.Select(v_r_b % T.int64(6) == T.int64(1) and v_nu % T.int64(6) == T.int64(3), T.float32(-2), T.Select(v_r_b % T.int64(6) == T.int64(1) and v_nu % T.int64(6) == T.int64(2), T.float32(-1), T.Select(v_r_b % T.int64(6) == T.int64(1) and v_nu % T.int64(6) == T.int64(1), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(1) and v_nu % T.int64(6) == T.int64(0), T.float32(-1.5), T.Select(v_r_b % T.int64(6) == T.int64(0) and v_nu % T.int64(6) == T.int64(5), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(0) and v_nu % T.int64(6) == T.int64(4), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(0) and v_nu % T.int64(6) == T.int64(3), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(0) and v_nu % T.int64(6) == T.int64(2), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(0) and v_nu % T.int64(6) == T.int64(1), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(0) and v_nu % T.int64(6) == T.int64(0), T.float32(1), T.float32(0)))))))))))))))))))))))))))))))))))))
                    for ax0, ax1, ax2, ax3 in T.grid(T.int64(6), T.int64(6), T.int64(1), T.int64(1)):
                        with T.block("data_pack_local"):
                            v0, v1 = T.axis.remap("SS", [ax0, ax1])
                            v2 = T.axis.spatial(T.int64(64), (ci_p_fused_0 * T.int64(1024) + ci_p_fused_1) // T.int64(784) + ax2)
                            v3 = T.axis.spatial(T.int64(784), (ci_p_fused_0 * T.int64(240) + ci_p_fused_1) % T.int64(784) + ax3)
                            T.reads(data_pack_local[v0, v1, v2, v3])
                            T.writes(data_pack[v0, v1, v2, v3])
                            data_pack[v0, v1, v2, v3] = data_pack_local[v0, v1, v2, v3]
            for eps_0_nu_0_co_0_p_0_fused in T.thread_binding(T.int64(64), thread="blockIdx.x"):
                for eps_1_nu_1_co_1_p_1_fused in T.thread_binding(T.int64(8), thread="vthread.x"):
                    for eps_2_nu_2_co_2_p_2_fused in T.thread_binding(T.int64(2), thread="threadIdx.x"):
                        for ci_0 in range(T.int64(2)):
                            for ax0_ax1_ax2_ax3_fused in range(T.int64(225792)):
                                with T.block("data_pack_shared"):
                                    v0 = T.axis.spatial(T.int64(6), eps_0_nu_0_co_0_p_0_fused // T.int64(32) * T.int64(3) + ax0_ax1_ax2_ax3_fused // T.int64(75264))
                                    v1 = T.axis.spatial(T.int64(6), ax0_ax1_ax2_ax3_fused % T.int64(75264) // T.int64(12544))
                                    v2 = T.axis.spatial(T.int64(64), ci_0 * T.int64(32) + ax0_ax1_ax2_ax3_fused % T.int64(12544) // T.int64(392))
                                    v3 = T.axis.spatial(T.int64(784), eps_0_nu_0_co_0_p_0_fused % T.int64(2) * T.int64(392) + ax0_ax1_ax2_ax3_fused % T.int64(392))
                                    T.reads(data_pack[v0, v1, v2, v3])
                                    T.writes(data_pack_shared[v0, v1, v2, v3])
                                    T.block_attr({"meta_schedule.cooperative_fetch": 3})
                                    data_pack_shared[v0, v1, v2, v3] = data_pack[v0, v1, v2, v3]
                            for ax0_ax1_ax2_ax3_fused in range(T.int64(4608)):
                                with T.block("p1_shared"):
                                    v0 = T.axis.spatial(T.int64(6), eps_0_nu_0_co_0_p_0_fused // T.int64(32) * T.int64(3) + ax0_ax1_ax2_ax3_fused // T.int64(1536))
                                    v1 = T.axis.spatial(T.int64(6), ax0_ax1_ax2_ax3_fused % T.int64(1536) // T.int64(256))
                                    v2 = T.axis.spatial(T.int64(64), ci_0 * T.int64(32) + ax0_ax1_ax2_ax3_fused % T.int64(256) // T.int64(8))
                                    v3 = T.axis.spatial(T.int64(128), eps_0_nu_0_co_0_p_0_fused % T.int64(32) // T.int64(2) * T.int64(8) + ax0_ax1_ax2_ax3_fused % T.int64(8))
                                    T.reads(p1[v0, v1, v2, v3])
                                    T.writes(p1_shared[v0, v1, v2, v3])
                                    T.block_attr({"meta_schedule.cooperative_fetch": 2})
                                    p1_shared[v0, v1, v2, v3] = p1[v0, v1, v2, v3]
                            for ci_1, eps_3, nu_3, co_3, p_3, ci_2, eps_4, nu_4, co_4, p_4 in T.grid(T.int64(1), T.int64(1), T.int64(2), T.int64(2), T.int64(7), T.int64(32), T.int64(3), T.int64(3), T.int64(2), T.int64(7)):
                                with T.block("bgemm"):
                                    v_eps = T.axis.spatial(T.int64(6), eps_0_nu_0_co_0_p_0_fused // T.int64(32) * T.int64(3) + eps_3 * T.int64(3) + eps_4)
                                    v_nu = T.axis.spatial(T.int64(6), nu_3 * T.int64(3) + nu_4)
                                    v_co = T.axis.spatial(T.int64(128), eps_0_nu_0_co_0_p_0_fused % T.int64(32) // T.int64(2) * T.int64(8) + eps_1_nu_1_co_1_p_1_fused // T.int64(4) * T.int64(4) + co_3 * T.int64(2) + co_4)
                                    v_p = T.axis.spatial(T.int64(784), eps_0_nu_0_co_0_p_0_fused % T.int64(2) * T.int64(392) + eps_1_nu_1_co_1_p_1_fused % T.int64(4) * T.int64(98) + eps_2_nu_2_co_2_p_2_fused * T.int64(49) + p_3 * T.int64(7) + p_4)
                                    v_ci = T.axis.reduce(T.int64(64), ci_0 * T.int64(32) + ci_1 * T.int64(32) + ci_2)
                                    T.reads(data_pack_shared[v_eps, v_nu, v_ci, v_p], p1_shared[v_eps, v_nu, v_ci, v_co])
                                    T.writes(bgemm_local[v_eps, v_nu, v_co, v_p])
                                    T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 32, "meta_schedule.tiling_structure": "SSSRRSRS"})
                                    with T.init():
                                        bgemm_local[v_eps, v_nu, v_co, v_p] = T.float32(0)
                                    bgemm_local[v_eps, v_nu, v_co, v_p] = bgemm_local[v_eps, v_nu, v_co, v_p] + data_pack_shared[v_eps, v_nu, v_ci, v_p] * p1_shared[v_eps, v_nu, v_ci, v_co]
                        for ax0, ax1, ax2, ax3 in T.grid(T.int64(3), T.int64(6), T.int64(4), T.int64(49)):
                            with T.block("bgemm_local"):
                                v0 = T.axis.spatial(T.int64(6), eps_0_nu_0_co_0_p_0_fused // T.int64(32) * T.int64(3) + ax0)
                                v1 = T.axis.spatial(T.int64(6), ax1)
                                v2 = T.axis.spatial(T.int64(128), eps_0_nu_0_co_0_p_0_fused % T.int64(32) // T.int64(2) * T.int64(8) + eps_1_nu_1_co_1_p_1_fused // T.int64(4) * T.int64(4) + ax2)
                                v3 = T.axis.spatial(T.int64(784), eps_0_nu_0_co_0_p_0_fused % T.int64(2) * T.int64(392) + eps_1_nu_1_co_1_p_1_fused % T.int64(4) * T.int64(98) + eps_2_nu_2_co_2_p_2_fused * T.int64(49) + ax3)
                                T.reads(bgemm_local[v0, v1, v2, v3])
                                T.writes(bgemm[v0, v1, v2, v3])
                                bgemm[v0, v1, v2, v3] = bgemm_local[v0, v1, v2, v3]
            for n_co_h_0_w_0_fused_0 in T.thread_binding(T.int64(392), thread="blockIdx.x"):
                for n_co_h_0_w_0_fused_1 in T.thread_binding(T.int64(256), thread="threadIdx.x"):
                    for ax0, ax1 in T.grid(T.int64(1), T.int64(1)):
                        for ax2 in T.unroll(T.int64(4)):
                            for ax3 in T.unroll(T.int64(4)):
                                for ax4 in T.unroll(T.int64(6)):
                                    for ax5 in T.unroll(T.int64(6)):
                                        with T.block("inverse"):
                                            v_co = T.axis.spatial(T.int64(128), (n_co_h_0_w_0_fused_0 * T.int64(256) + n_co_h_0_w_0_fused_1) // T.int64(784) + ax0)
                                            v_p = T.axis.spatial(T.int64(784), (n_co_h_0_w_0_fused_0 * T.int64(256) + n_co_h_0_w_0_fused_1) % T.int64(784) + ax1)
                                            v_vh, v_vw, v_r_a, v_r_b = T.axis.remap("SSRR", [ax2, ax3, ax4, ax5])
                                            T.reads(bgemm[v_r_a, v_r_b, v_co, v_p])
                                            T.writes(inverse_local[v_co, v_p, v_vh, v_vw])
                                            T.block_attr({"schedule_rule": "conv2d_nchw_winograd_inverse"})
                                            with T.init():
                                                inverse_local[v_co, v_p, v_vh, v_vw] = T.float32(0)
                                            inverse_local[v_co, v_p, v_vh, v_vw] = inverse_local[v_co, v_p, v_vh, v_vw] + bgemm[v_r_a, v_r_b, v_co, v_p] * T.Select(v_r_a % T.int64(6) == T.int64(5) and v_vh % T.int64(4) == T.int64(3), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(5) and v_vh % T.int64(4) == T.int64(2), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(5) and v_vh % T.int64(4) == T.int64(1), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(5) and v_vh % T.int64(4) == T.int64(0), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(4) and v_vh % T.int64(4) == T.int64(3), T.float32(-8), T.Select(v_r_a % T.int64(6) == T.int64(4) and v_vh % T.int64(4) == T.int64(2), T.float32(4), T.Select(v_r_a % T.int64(6) == T.int64(4) and v_vh % T.int64(4) == T.int64(1), T.float32(-2), T.Select(v_r_a % T.int64(6) == T.int64(4) and v_vh % T.int64(4) == T.int64(0), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(3) and v_vh % T.int64(4) == T.int64(3), T.float32(0.125), T.Select(v_r_a % T.int64(6) == T.int64(3) and v_vh % T.int64(4) == T.int64(2), T.float32(0.25), T.Select(v_r_a % T.int64(6) == T.int64(3) and v_vh % T.int64(4) == T.int64(1), T.float32(0.5), T.Select(v_r_a % T.int64(6) == T.int64(3) and v_vh % T.int64(4) == T.int64(0), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(2) and v_vh % T.int64(4) == T.int64(3), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(2) and v_vh % T.int64(4) == T.int64(2), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(2) and v_vh % T.int64(4) == T.int64(1), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(2) and v_vh % T.int64(4) == T.int64(0), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(1) and v_vh % T.int64(4) == T.int64(3), T.float32(-1), T.Select(v_r_a % T.int64(6) == T.int64(1) and v_vh % T.int64(4) == T.int64(2), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(1) and v_vh % T.int64(4) == T.int64(1), T.float32(-1), T.Select(v_r_a % T.int64(6) == T.int64(1) and v_vh % T.int64(4) == T.int64(0), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(0) and v_vh % T.int64(4) == T.int64(3), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(0) and v_vh % T.int64(4) == T.int64(2), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(0) and v_vh % T.int64(4) == T.int64(1), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(0) and v_vh % T.int64(4) == T.int64(0), T.float32(1), T.float32(0))))))))))))))))))))))))) * T.Select(v_r_b % T.int64(6) == T.int64(5) and v_vw % T.int64(4) == T.int64(3), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(5) and v_vw % T.int64(4) == T.int64(2), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(5) and v_vw % T.int64(4) == T.int64(1), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(5) and v_vw % T.int64(4) == T.int64(0), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(4) and v_vw % T.int64(4) == T.int64(3), T.float32(-8), T.Select(v_r_b % T.int64(6) == T.int64(4) and v_vw % T.int64(4) == T.int64(2), T.float32(4), T.Select(v_r_b % T.int64(6) == T.int64(4) and v_vw % T.int64(4) == T.int64(1), T.float32(-2), T.Select(v_r_b % T.int64(6) == T.int64(4) and v_vw % T.int64(4) == T.int64(0), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(3) and v_vw % T.int64(4) == T.int64(3), T.float32(0.125), T.Select(v_r_b % T.int64(6) == T.int64(3) and v_vw % T.int64(4) == T.int64(2), T.float32(0.25), T.Select(v_r_b % T.int64(6) == T.int64(3) and v_vw % T.int64(4) == T.int64(1), T.float32(0.5), T.Select(v_r_b % T.int64(6) == T.int64(3) and v_vw % T.int64(4) == T.int64(0), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(2) and v_vw % T.int64(4) == T.int64(3), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(2) and v_vw % T.int64(4) == T.int64(2), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(2) and v_vw % T.int64(4) == T.int64(1), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(2) and v_vw % T.int64(4) == T.int64(0), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(1) and v_vw % T.int64(4) == T.int64(3), T.float32(-1), T.Select(v_r_b % T.int64(6) == T.int64(1) and v_vw % T.int64(4) == T.int64(2), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(1) and v_vw % T.int64(4) == T.int64(1), T.float32(-1), T.Select(v_r_b % T.int64(6) == T.int64(1) and v_vw % T.int64(4) == T.int64(0), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(0) and v_vw % T.int64(4) == T.int64(3), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(0) and v_vw % T.int64(4) == T.int64(2), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(0) and v_vw % T.int64(4) == T.int64(1), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(0) and v_vw % T.int64(4) == T.int64(0), T.float32(1), T.float32(0)))))))))))))))))))))))))
                    for h_1, w_1 in T.grid(T.int64(4), T.int64(4)):
                        with T.block("conv2d_winograd"):
                            v_n = T.axis.spatial(T.int64(1), T.int64(0))
                            v_co = T.axis.spatial(T.int64(128), (n_co_h_0_w_0_fused_0 * T.int64(256) + n_co_h_0_w_0_fused_1) // T.int64(784))
                            v_h = T.axis.spatial(T.int64(112), (n_co_h_0_w_0_fused_0 * T.int64(256) + n_co_h_0_w_0_fused_1) % T.int64(784) // T.int64(28) * T.int64(4) + h_1)
                            v_w = T.axis.spatial(T.int64(112), (n_co_h_0_w_0_fused_0 * T.int64(256) + n_co_h_0_w_0_fused_1) % T.int64(28) * T.int64(4) + w_1)
                            T.reads(inverse_local[v_co, v_n * T.int64(784) + v_h // T.int64(4) * T.int64(28) + v_w // T.int64(4), v_h % T.int64(4), v_w % T.int64(4)], p2[v_n, v_co, T.int64(0), T.int64(0)])
                            T.writes(T_relu[v_n, v_co, v_h, v_w])
                            T_relu[v_n, v_co, v_h, v_w] = T.max(inverse_local[v_co, v_n * T.int64(784) + v_h // T.int64(4) * T.int64(28) + v_w // T.int64(4), v_h % T.int64(4), v_w % T.int64(4)] + p2[v_n, v_co, T.int64(0), T.int64(0)], T.float32(0))
b0 = sch.get_block(name="data_pack", func_name="main")
b1 = sch.get_block(name="bgemm", func_name="main")
b2 = sch.get_block(name="inverse", func_name="main")
b3 = sch.get_block(name="conv2d_winograd", func_name="main")
b4 = sch.get_block(name="T_add", func_name="main")
b5 = sch.get_block(name="T_relu", func_name="main")
b6 = sch.get_block(name="root", func_name="main")
b7, b8 = sch.get_producers(block=b2)
sch.compute_inline(block=b8)
b9, = sch.get_consumers(block=b2)
l10, l11, l12, l13 = sch.get_loops(block=b9)
l14, l15 = sch.split(loop=l12, factors=[None, 4], preserve_unit_iters=True)
l16, l17 = sch.split(loop=l13, factors=[None, 4], preserve_unit_iters=True)
sch.reorder(l14, l16, l15, l17)
sch.compute_at(block=b2, loop=l16, preserve_unit_loops=True, index=-1)
sch.set_scope(block=b2, buffer_index=0, storage_scope="local")
l18, l19, l20, l21, l22, l23, l24, l25, l26, l27 = sch.get_loops(block=b2)
sch.unroll(loop=l24)
sch.unroll(loop=l25)
sch.unroll(loop=l26)
sch.unroll(loop=l27)
b28, b29 = sch.get_producers(block=b0)
sch.compute_inline(block=b29)
b30, = sch.get_producers(block=b28)
l31, l32, l33, l34, l35, l36 = sch.get_loops(block=b0)
sch.reorder(l33, l34, l31, l32, l35, l36)
sch.unroll(loop=l31)
sch.unroll(loop=l32)
sch.unroll(loop=l35)
sch.unroll(loop=l36)
l37 = sch.fuse(l33, l34, preserve_unit_iters=True)
v38 = sch.sample_categorical(candidates=[32, 64, 128, 256, 512, 1024], probs=[0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666], decision=5)
l39, l40 = sch.split(loop=l37, factors=[None, v38], preserve_unit_iters=True)
sch.bind(loop=l39, thread_axis="blockIdx.x")
sch.bind(loop=l40, thread_axis="threadIdx.x")
b41 = sch.cache_write(block=b0, write_buffer_index=0, storage_scope="local")
sch.reverse_compute_at(block=b41, loop=l40, preserve_unit_loops=True, index=-1)
sch.compute_at(block=b28, loop=l40, preserve_unit_loops=True, index=-1)
sch.set_scope(block=b28, buffer_index=0, storage_scope="local")
sch.compute_inline(block=b30)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSSRRSRS")
l42, l43, l44, l45, l46 = sch.get_loops(block=b1)
v47, v48, v49, v50, v51 = sch.sample_perfect_tile(loop=l42, n=5, max_innermost_factor=64, decision=[2, 1, 1, 1, 3])
l52, l53, l54, l55, l56 = sch.split(loop=l42, factors=[v47, v48, v49, v50, v51], preserve_unit_iters=True)
v57, v58, v59, v60, v61 = sch.sample_perfect_tile(loop=l43, n=5, max_innermost_factor=64, decision=[1, 1, 1, 2, 3])
l62, l63, l64, l65, l66 = sch.split(loop=l43, factors=[v57, v58, v59, v60, v61], preserve_unit_iters=True)
v67, v68, v69, v70, v71 = sch.sample_perfect_tile(loop=l44, n=5, max_innermost_factor=64, decision=[16, 2, 1, 2, 2])
l72, l73, l74, l75, l76 = sch.split(loop=l44, factors=[v67, v68, v69, v70, v71], preserve_unit_iters=True)
v77, v78, v79, v80, v81 = sch.sample_perfect_tile(loop=l45, n=5, max_innermost_factor=64, decision=[2, 4, 2, 7, 7])
l82, l83, l84, l85, l86 = sch.split(loop=l45, factors=[v77, v78, v79, v80, v81], preserve_unit_iters=True)
v87, v88, v89 = sch.sample_perfect_tile(loop=l46, n=3, max_innermost_factor=64, decision=[2, 1, 32])
l90, l91, l92 = sch.split(loop=l46, factors=[v87, v88, v89], preserve_unit_iters=True)
sch.reorder(l52, l62, l72, l82, l53, l63, l73, l83, l54, l64, l74, l84, l90, l91, l55, l65, l75, l85, l92, l56, l66, l76, l86)
l93 = sch.fuse(l52, l62, l72, l82, preserve_unit_iters=True)
sch.bind(loop=l93, thread_axis="blockIdx.x")
l94 = sch.fuse(l53, l63, l73, l83, preserve_unit_iters=True)
sch.bind(loop=l94, thread_axis="vthread.x")
l95 = sch.fuse(l54, l64, l74, l84, preserve_unit_iters=True)
sch.bind(loop=l95, thread_axis="threadIdx.x")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_low_inclusive", ann_val=32)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_high_inclusive", ann_val=1024)
b96 = sch.cache_write(block=b1, write_buffer_index=0, storage_scope="local")
sch.reverse_compute_at(block=b96, loop=l95, preserve_unit_loops=True, index=-1)
b97 = sch.cache_read(block=b1, read_buffer_index=0, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b97, loop=l90, preserve_unit_loops=True, index=-1)
l98, l99, l100, l101, l102, l103, l104, l105 = sch.get_loops(block=b97)
l106 = sch.fuse(l102, l103, l104, l105, preserve_unit_iters=True)
v107 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=2)
sch.annotate(block_or_loop=b97, ann_key="meta_schedule.cooperative_fetch", ann_val=v107)
b108 = sch.cache_read(block=b1, read_buffer_index=1, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b108, loop=l90, preserve_unit_loops=True, index=-1)
l109, l110, l111, l112, l113, l114, l115, l116 = sch.get_loops(block=b108)
l117 = sch.fuse(l113, l114, l115, l116, preserve_unit_iters=True)
v118 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=1)
sch.annotate(block_or_loop=b108, ann_key="meta_schedule.cooperative_fetch", ann_val=v118)
sch.reverse_compute_inline(block=b5)
sch.reverse_compute_inline(block=b4)
v119 = sch.sample_categorical(candidates=[0, 16, 64, 512, 1024], probs=[0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001], decision=4)
sch.annotate(block_or_loop=b6, ann_key="meta_schedule.unroll_explicit", ann_val=v119)
l120, l121, l122, l123, l124, l125 = sch.get_loops(block=b3)
l126 = sch.fuse(l120, l121, l122, l123, preserve_unit_iters=True)
v127 = sch.sample_categorical(candidates=[32, 64, 128, 256, 512, 1024], probs=[0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666], decision=3)
l128, l129 = sch.split(loop=l126, factors=[None, v127], preserve_unit_iters=True)
sch.bind(loop=l128, thread_axis="blockIdx.x")
sch.bind(loop=l129, thread_axis="threadIdx.x")
2024-04-28 19:49:58 [INFO] [task_scheduler.cc:170] Design space #1:
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(64), T.int64(112), T.int64(112)), "float32"), p1: T.Buffer((T.int64(6), T.int64(6), T.int64(64), T.int64(128)), "float32"), p2: T.Buffer((T.int64(1), T.int64(128), T.int64(1), T.int64(1)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(128), T.int64(112), T.int64(112)), "float32")):
        T.func_attr({"layout_free_buffers": [1], "tir.noalias": T.bool(True)})
        with T.block("root"):
            T.reads()
            T.writes()
            T.block_attr({"meta_schedule.unroll_explicit": 64})
            input_tile_local = T.alloc_buffer((T.int64(64), T.int64(784), T.int64(6), T.int64(6)), scope="local")
            data_pack = T.alloc_buffer((T.int64(6), T.int64(6), T.int64(64), T.int64(784)))
            bgemm = T.alloc_buffer((T.int64(6), T.int64(6), T.int64(128), T.int64(784)))
            inverse_local = T.alloc_buffer((T.int64(128), T.int64(784), T.int64(4), T.int64(4)), scope="local")
            data_pack_local = T.alloc_buffer((T.int64(6), T.int64(6), T.int64(64), T.int64(784)), scope="local")
            bgemm_local = T.alloc_buffer((T.int64(6), T.int64(6), T.int64(128), T.int64(784)), scope="local")
            data_pack_shared = T.alloc_buffer((T.int64(6), T.int64(6), T.int64(64), T.int64(784)), scope="shared")
            p1_shared = T.alloc_buffer((T.int64(6), T.int64(6), T.int64(64), T.int64(128)), scope="shared")
            for ci_p_fused_0 in T.thread_binding(T.int64(49), thread="blockIdx.x"):
                for ci_p_fused_1 in T.thread_binding(T.int64(1024), thread="threadIdx.x"):
                    for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(1), T.int64(6), T.int64(6)):
                        with T.block("input_tile"):
                            v_ci = T.axis.spatial(T.int64(64), (ci_p_fused_0 * T.int64(1024) + ci_p_fused_1) // T.int64(784) + ax0)
                            v_p = T.axis.spatial(T.int64(784), (ci_p_fused_0 * T.int64(240) + ci_p_fused_1) % T.int64(784) + ax1)
                            v_eps, v_nu = T.axis.remap("SS", [ax2, ax3])
                            T.reads(p0[v_p // T.int64(784), v_ci, v_p % T.int64(784) // T.int64(28) * T.int64(4) + v_eps - T.int64(1), v_p % T.int64(28) * T.int64(4) + v_nu - T.int64(1)])
                            T.writes(input_tile_local[v_ci, v_p, v_eps, v_nu])
                            T.block_attr({"schedule_rule": "None"})
                            input_tile_local[v_ci, v_p, v_eps, v_nu] = T.if_then_else(T.int64(1) <= v_p % T.int64(784) // T.int64(28) * T.int64(4) + v_eps and v_p % T.int64(784) // T.int64(28) * T.int64(4) + v_eps < T.int64(113) and T.int64(1) <= v_p % T.int64(28) * T.int64(4) + v_nu and v_p % T.int64(28) * T.int64(4) + v_nu < T.int64(113), p0[v_p // T.int64(784), v_ci, v_p % T.int64(784) // T.int64(28) * T.int64(4) + v_eps - T.int64(1), v_p % T.int64(28) * T.int64(4) + v_nu - T.int64(1)], T.float32(0))
                    for eps in T.unroll(T.int64(6)):
                        for nu in T.unroll(T.int64(6)):
                            for r_a in T.unroll(T.int64(6)):
                                for r_b in T.unroll(T.int64(6)):
                                    with T.block("data_pack"):
                                        v_eps, v_nu = T.axis.remap("SS", [eps, nu])
                                        v_ci = T.axis.spatial(T.int64(64), (ci_p_fused_0 * T.int64(1024) + ci_p_fused_1) // T.int64(784))
                                        v_p = T.axis.spatial(T.int64(784), (ci_p_fused_0 * T.int64(1024) + ci_p_fused_1) % T.int64(784))
                                        v_r_a, v_r_b = T.axis.remap("RR", [r_a, r_b])
                                        T.reads(input_tile_local[v_ci, v_p, v_r_a, v_r_b])
                                        T.writes(data_pack_local[v_eps, v_nu, v_ci, v_p])
                                        T.block_attr({"schedule_rule": "conv2d_nchw_winograd_data_pack"})
                                        with T.init():
                                            data_pack_local[v_eps, v_nu, v_ci, v_p] = T.float32(0)
                                        data_pack_local[v_eps, v_nu, v_ci, v_p] = data_pack_local[v_eps, v_nu, v_ci, v_p] + input_tile_local[v_ci, v_p, v_r_a, v_r_b] * T.Select(v_r_a % T.int64(6) == T.int64(5) and v_eps % T.int64(6) == T.int64(5), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(5) and v_eps % T.int64(6) == T.int64(4), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(5) and v_eps % T.int64(6) == T.int64(3), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(5) and v_eps % T.int64(6) == T.int64(2), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(5) and v_eps % T.int64(6) == T.int64(1), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(5) and v_eps % T.int64(6) == T.int64(0), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(4) and v_eps % T.int64(6) == T.int64(5), T.float32(1.5), T.Select(v_r_a % T.int64(6) == T.int64(4) and v_eps % T.int64(6) == T.int64(4), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(4) and v_eps % T.int64(6) == T.int64(3), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(4) and v_eps % T.int64(6) == T.int64(2), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(4) and v_eps % T.int64(6) == T.int64(1), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(4) and v_eps % T.int64(6) == T.int64(0), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(3) and v_eps % T.int64(6) == T.int64(5), T.float32(-2), T.Select(v_r_a % T.int64(6) == T.int64(3) and v_eps % T.int64(6) == T.int64(4), T.float32(-0.5), T.Select(v_r_a % T.int64(6) == T.int64(3) and v_eps % T.int64(6) == T.int64(3), T.float32(2), T.Select(v_r_a % T.int64(6) == T.int64(3) and v_eps % T.int64(6) == T.int64(2), T.float32(2.5), T.Select(v_r_a % T.int64(6) == T.int64(3) and v_eps % T.int64(6) == T.int64(1), T.float32(0.5), T.Select(v_r_a % T.int64(6) == T.int64(3) and v_eps % T.int64(6) == T.int64(0), T.float32(1.5), T.Select(v_r_a % T.int64(6) == T.int64(2) and v_eps % T.int64(6) == T.int64(5), T.float32(-1.5), T.Select(v_r_a % T.int64(6) == T.int64(2) and v_eps % T.int64(6) == T.int64(4), T.float32(-1), T.Select(v_r_a % T.int64(6) == T.int64(2) and v_eps % T.int64(6) == T.int64(3), T.float32(-1), T.Select(v_r_a % T.int64(6) == T.int64(2) and v_eps % T.int64(6) == T.int64(2), T.float32(0.5), T.Select(v_r_a % T.int64(6) == T.int64(2) and v_eps % T.int64(6) == T.int64(1), T.float32(-2.5), T.Select(v_r_a % T.int64(6) == T.int64(2) and v_eps % T.int64(6) == T.int64(0), T.float32(-2), T.Select(v_r_a % T.int64(6) == T.int64(1) and v_eps % T.int64(6) == T.int64(5), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(1) and v_eps % T.int64(6) == T.int64(4), T.float32(0.5), T.Select(v_r_a % T.int64(6) == T.int64(1) and v_eps % T.int64(6) == T.int64(3), T.float32(-2), T.Select(v_r_a % T.int64(6) == T.int64(1) and v_eps % T.int64(6) == T.int64(2), T.float32(-1), T.Select(v_r_a % T.int64(6) == T.int64(1) and v_eps % T.int64(6) == T.int64(1), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(1) and v_eps % T.int64(6) == T.int64(0), T.float32(-1.5), T.Select(v_r_a % T.int64(6) == T.int64(0) and v_eps % T.int64(6) == T.int64(5), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(0) and v_eps % T.int64(6) == T.int64(4), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(0) and v_eps % T.int64(6) == T.int64(3), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(0) and v_eps % T.int64(6) == T.int64(2), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(0) and v_eps % T.int64(6) == T.int64(1), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(0) and v_eps % T.int64(6) == T.int64(0), T.float32(1), T.float32(0))))))))))))))))))))))))))))))))))))) * T.Select(v_r_b % T.int64(6) == T.int64(5) and v_nu % T.int64(6) == T.int64(5), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(5) and v_nu % T.int64(6) == T.int64(4), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(5) and v_nu % T.int64(6) == T.int64(3), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(5) and v_nu % T.int64(6) == T.int64(2), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(5) and v_nu % T.int64(6) == T.int64(1), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(5) and v_nu % T.int64(6) == T.int64(0), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(4) and v_nu % T.int64(6) == T.int64(5), T.float32(1.5), T.Select(v_r_b % T.int64(6) == T.int64(4) and v_nu % T.int64(6) == T.int64(4), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(4) and v_nu % T.int64(6) == T.int64(3), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(4) and v_nu % T.int64(6) == T.int64(2), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(4) and v_nu % T.int64(6) == T.int64(1), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(4) and v_nu % T.int64(6) == T.int64(0), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(3) and v_nu % T.int64(6) == T.int64(5), T.float32(-2), T.Select(v_r_b % T.int64(6) == T.int64(3) and v_nu % T.int64(6) == T.int64(4), T.float32(-0.5), T.Select(v_r_b % T.int64(6) == T.int64(3) and v_nu % T.int64(6) == T.int64(3), T.float32(2), T.Select(v_r_b % T.int64(6) == T.int64(3) and v_nu % T.int64(6) == T.int64(2), T.float32(2.5), T.Select(v_r_b % T.int64(6) == T.int64(3) and v_nu % T.int64(6) == T.int64(1), T.float32(0.5), T.Select(v_r_b % T.int64(6) == T.int64(3) and v_nu % T.int64(6) == T.int64(0), T.float32(1.5), T.Select(v_r_b % T.int64(6) == T.int64(2) and v_nu % T.int64(6) == T.int64(5), T.float32(-1.5), T.Select(v_r_b % T.int64(6) == T.int64(2) and v_nu % T.int64(6) == T.int64(4), T.float32(-1), T.Select(v_r_b % T.int64(6) == T.int64(2) and v_nu % T.int64(6) == T.int64(3), T.float32(-1), T.Select(v_r_b % T.int64(6) == T.int64(2) and v_nu % T.int64(6) == T.int64(2), T.float32(0.5), T.Select(v_r_b % T.int64(6) == T.int64(2) and v_nu % T.int64(6) == T.int64(1), T.float32(-2.5), T.Select(v_r_b % T.int64(6) == T.int64(2) and v_nu % T.int64(6) == T.int64(0), T.float32(-2), T.Select(v_r_b % T.int64(6) == T.int64(1) and v_nu % T.int64(6) == T.int64(5), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(1) and v_nu % T.int64(6) == T.int64(4), T.float32(0.5), T.Select(v_r_b % T.int64(6) == T.int64(1) and v_nu % T.int64(6) == T.int64(3), T.float32(-2), T.Select(v_r_b % T.int64(6) == T.int64(1) and v_nu % T.int64(6) == T.int64(2), T.float32(-1), T.Select(v_r_b % T.int64(6) == T.int64(1) and v_nu % T.int64(6) == T.int64(1), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(1) and v_nu % T.int64(6) == T.int64(0), T.float32(-1.5), T.Select(v_r_b % T.int64(6) == T.int64(0) and v_nu % T.int64(6) == T.int64(5), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(0) and v_nu % T.int64(6) == T.int64(4), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(0) and v_nu % T.int64(6) == T.int64(3), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(0) and v_nu % T.int64(6) == T.int64(2), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(0) and v_nu % T.int64(6) == T.int64(1), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(0) and v_nu % T.int64(6) == T.int64(0), T.float32(1), T.float32(0)))))))))))))))))))))))))))))))))))))
                    for ax0, ax1, ax2, ax3 in T.grid(T.int64(6), T.int64(6), T.int64(1), T.int64(1)):
                        with T.block("data_pack_local"):
                            v0, v1 = T.axis.remap("SS", [ax0, ax1])
                            v2 = T.axis.spatial(T.int64(64), (ci_p_fused_0 * T.int64(1024) + ci_p_fused_1) // T.int64(784) + ax2)
                            v3 = T.axis.spatial(T.int64(784), (ci_p_fused_0 * T.int64(240) + ci_p_fused_1) % T.int64(784) + ax3)
                            T.reads(data_pack_local[v0, v1, v2, v3])
                            T.writes(data_pack[v0, v1, v2, v3])
                            data_pack[v0, v1, v2, v3] = data_pack_local[v0, v1, v2, v3]
            for eps_0_nu_0_co_0_p_0_fused in T.thread_binding(T.int64(64), thread="blockIdx.x"):
                for eps_1_nu_1_co_1_p_1_fused in T.thread_binding(T.int64(8), thread="vthread.x"):
                    for eps_2_nu_2_co_2_p_2_fused in T.thread_binding(T.int64(2), thread="threadIdx.x"):
                        for ci_0_fused in T.serial(T.int64(2), annotations={"software_pipeline_async_stages": [0], "software_pipeline_order": [0, 1, 2], "software_pipeline_stage": [0, 0, 2]}):
                            for ax0_ax1_ax2_ax3_fused in range(T.int64(225792)):
                                with T.block("data_pack_shared"):
                                    v0 = T.axis.spatial(T.int64(6), eps_0_nu_0_co_0_p_0_fused // T.int64(32) * T.int64(3) + ax0_ax1_ax2_ax3_fused // T.int64(75264))
                                    v1 = T.axis.spatial(T.int64(6), ax0_ax1_ax2_ax3_fused % T.int64(75264) // T.int64(12544))
                                    v2 = T.axis.spatial(T.int64(64), ci_0_fused * T.int64(32) + ax0_ax1_ax2_ax3_fused % T.int64(12544) // T.int64(392))
                                    v3 = T.axis.spatial(T.int64(784), eps_0_nu_0_co_0_p_0_fused % T.int64(2) * T.int64(392) + ax0_ax1_ax2_ax3_fused % T.int64(392))
                                    T.reads(data_pack[v0, v1, v2, v3])
                                    T.writes(data_pack_shared[v0, v1, v2, v3])
                                    T.block_attr({"meta_schedule.cooperative_fetch": 3})
                                    data_pack_shared[v0, v1, v2, v3] = data_pack[v0, v1, v2, v3]
                            for ax0_ax1_ax2_ax3_fused in range(T.int64(4608)):
                                with T.block("p1_shared"):
                                    v0 = T.axis.spatial(T.int64(6), eps_0_nu_0_co_0_p_0_fused // T.int64(32) * T.int64(3) + ax0_ax1_ax2_ax3_fused // T.int64(1536))
                                    v1 = T.axis.spatial(T.int64(6), ax0_ax1_ax2_ax3_fused % T.int64(1536) // T.int64(256))
                                    v2 = T.axis.spatial(T.int64(64), ci_0_fused * T.int64(32) + ax0_ax1_ax2_ax3_fused % T.int64(256) // T.int64(8))
                                    v3 = T.axis.spatial(T.int64(128), eps_0_nu_0_co_0_p_0_fused % T.int64(32) // T.int64(2) * T.int64(8) + ax0_ax1_ax2_ax3_fused % T.int64(8))
                                    T.reads(p1[v0, v1, v2, v3])
                                    T.writes(p1_shared[v0, v1, v2, v3])
                                    T.block_attr({"meta_schedule.cooperative_fetch": 2})
                                    p1_shared[v0, v1, v2, v3] = p1[v0, v1, v2, v3]
                            for ci_1, eps_3, nu_3, co_3, p_3, ci_2, eps_4, nu_4, co_4, p_4 in T.grid(T.int64(1), T.int64(1), T.int64(2), T.int64(2), T.int64(7), T.int64(32), T.int64(3), T.int64(3), T.int64(2), T.int64(7)):
                                with T.block("bgemm"):
                                    v_eps = T.axis.spatial(T.int64(6), eps_0_nu_0_co_0_p_0_fused // T.int64(32) * T.int64(3) + eps_3 * T.int64(3) + eps_4)
                                    v_nu = T.axis.spatial(T.int64(6), nu_3 * T.int64(3) + nu_4)
                                    v_co = T.axis.spatial(T.int64(128), eps_0_nu_0_co_0_p_0_fused % T.int64(32) // T.int64(2) * T.int64(8) + eps_1_nu_1_co_1_p_1_fused // T.int64(4) * T.int64(4) + co_3 * T.int64(2) + co_4)
                                    v_p = T.axis.spatial(T.int64(784), eps_0_nu_0_co_0_p_0_fused % T.int64(2) * T.int64(392) + eps_1_nu_1_co_1_p_1_fused % T.int64(4) * T.int64(98) + eps_2_nu_2_co_2_p_2_fused * T.int64(49) + p_3 * T.int64(7) + p_4)
                                    v_ci = T.axis.reduce(T.int64(64), ci_0_fused * T.int64(32) + ci_1 * T.int64(32) + ci_2)
                                    T.reads(data_pack_shared[v_eps, v_nu, v_ci, v_p], p1_shared[v_eps, v_nu, v_ci, v_co])
                                    T.writes(bgemm_local[v_eps, v_nu, v_co, v_p])
                                    T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 32, "meta_schedule.tiling_structure": "SSSRRSRS"})
                                    with T.init():
                                        bgemm_local[v_eps, v_nu, v_co, v_p] = T.float32(0)
                                    bgemm_local[v_eps, v_nu, v_co, v_p] = bgemm_local[v_eps, v_nu, v_co, v_p] + data_pack_shared[v_eps, v_nu, v_ci, v_p] * p1_shared[v_eps, v_nu, v_ci, v_co]
                        for ax0, ax1, ax2, ax3 in T.grid(T.int64(3), T.int64(6), T.int64(4), T.int64(49)):
                            with T.block("bgemm_local"):
                                v0 = T.axis.spatial(T.int64(6), eps_0_nu_0_co_0_p_0_fused // T.int64(32) * T.int64(3) + ax0)
                                v1 = T.axis.spatial(T.int64(6), ax1)
                                v2 = T.axis.spatial(T.int64(128), eps_0_nu_0_co_0_p_0_fused % T.int64(32) // T.int64(2) * T.int64(8) + eps_1_nu_1_co_1_p_1_fused // T.int64(4) * T.int64(4) + ax2)
                                v3 = T.axis.spatial(T.int64(784), eps_0_nu_0_co_0_p_0_fused % T.int64(2) * T.int64(392) + eps_1_nu_1_co_1_p_1_fused % T.int64(4) * T.int64(98) + eps_2_nu_2_co_2_p_2_fused * T.int64(49) + ax3)
                                T.reads(bgemm_local[v0, v1, v2, v3])
                                T.writes(bgemm[v0, v1, v2, v3])
                                bgemm[v0, v1, v2, v3] = bgemm_local[v0, v1, v2, v3]
            for n_co_h_0_w_0_fused_0 in T.thread_binding(T.int64(196), thread="blockIdx.x"):
                for n_co_h_0_w_0_fused_1 in T.thread_binding(T.int64(512), thread="threadIdx.x"):
                    for ax0, ax1 in T.grid(T.int64(1), T.int64(1)):
                        for ax2 in T.unroll(T.int64(4)):
                            for ax3 in T.unroll(T.int64(4)):
                                for ax4 in T.unroll(T.int64(6)):
                                    for ax5 in T.unroll(T.int64(6)):
                                        with T.block("inverse"):
                                            v_co = T.axis.spatial(T.int64(128), (n_co_h_0_w_0_fused_0 * T.int64(512) + n_co_h_0_w_0_fused_1) // T.int64(784) + ax0)
                                            v_p = T.axis.spatial(T.int64(784), (n_co_h_0_w_0_fused_0 * T.int64(512) + n_co_h_0_w_0_fused_1) % T.int64(784) + ax1)
                                            v_vh, v_vw, v_r_a, v_r_b = T.axis.remap("SSRR", [ax2, ax3, ax4, ax5])
                                            T.reads(bgemm[v_r_a, v_r_b, v_co, v_p])
                                            T.writes(inverse_local[v_co, v_p, v_vh, v_vw])
                                            T.block_attr({"schedule_rule": "conv2d_nchw_winograd_inverse"})
                                            with T.init():
                                                inverse_local[v_co, v_p, v_vh, v_vw] = T.float32(0)
                                            inverse_local[v_co, v_p, v_vh, v_vw] = inverse_local[v_co, v_p, v_vh, v_vw] + bgemm[v_r_a, v_r_b, v_co, v_p] * T.Select(v_r_a % T.int64(6) == T.int64(5) and v_vh % T.int64(4) == T.int64(3), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(5) and v_vh % T.int64(4) == T.int64(2), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(5) and v_vh % T.int64(4) == T.int64(1), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(5) and v_vh % T.int64(4) == T.int64(0), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(4) and v_vh % T.int64(4) == T.int64(3), T.float32(-8), T.Select(v_r_a % T.int64(6) == T.int64(4) and v_vh % T.int64(4) == T.int64(2), T.float32(4), T.Select(v_r_a % T.int64(6) == T.int64(4) and v_vh % T.int64(4) == T.int64(1), T.float32(-2), T.Select(v_r_a % T.int64(6) == T.int64(4) and v_vh % T.int64(4) == T.int64(0), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(3) and v_vh % T.int64(4) == T.int64(3), T.float32(0.125), T.Select(v_r_a % T.int64(6) == T.int64(3) and v_vh % T.int64(4) == T.int64(2), T.float32(0.25), T.Select(v_r_a % T.int64(6) == T.int64(3) and v_vh % T.int64(4) == T.int64(1), T.float32(0.5), T.Select(v_r_a % T.int64(6) == T.int64(3) and v_vh % T.int64(4) == T.int64(0), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(2) and v_vh % T.int64(4) == T.int64(3), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(2) and v_vh % T.int64(4) == T.int64(2), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(2) and v_vh % T.int64(4) == T.int64(1), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(2) and v_vh % T.int64(4) == T.int64(0), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(1) and v_vh % T.int64(4) == T.int64(3), T.float32(-1), T.Select(v_r_a % T.int64(6) == T.int64(1) and v_vh % T.int64(4) == T.int64(2), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(1) and v_vh % T.int64(4) == T.int64(1), T.float32(-1), T.Select(v_r_a % T.int64(6) == T.int64(1) and v_vh % T.int64(4) == T.int64(0), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(0) and v_vh % T.int64(4) == T.int64(3), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(0) and v_vh % T.int64(4) == T.int64(2), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(0) and v_vh % T.int64(4) == T.int64(1), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(0) and v_vh % T.int64(4) == T.int64(0), T.float32(1), T.float32(0))))))))))))))))))))))))) * T.Select(v_r_b % T.int64(6) == T.int64(5) and v_vw % T.int64(4) == T.int64(3), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(5) and v_vw % T.int64(4) == T.int64(2), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(5) and v_vw % T.int64(4) == T.int64(1), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(5) and v_vw % T.int64(4) == T.int64(0), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(4) and v_vw % T.int64(4) == T.int64(3), T.float32(-8), T.Select(v_r_b % T.int64(6) == T.int64(4) and v_vw % T.int64(4) == T.int64(2), T.float32(4), T.Select(v_r_b % T.int64(6) == T.int64(4) and v_vw % T.int64(4) == T.int64(1), T.float32(-2), T.Select(v_r_b % T.int64(6) == T.int64(4) and v_vw % T.int64(4) == T.int64(0), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(3) and v_vw % T.int64(4) == T.int64(3), T.float32(0.125), T.Select(v_r_b % T.int64(6) == T.int64(3) and v_vw % T.int64(4) == T.int64(2), T.float32(0.25), T.Select(v_r_b % T.int64(6) == T.int64(3) and v_vw % T.int64(4) == T.int64(1), T.float32(0.5), T.Select(v_r_b % T.int64(6) == T.int64(3) and v_vw % T.int64(4) == T.int64(0), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(2) and v_vw % T.int64(4) == T.int64(3), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(2) and v_vw % T.int64(4) == T.int64(2), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(2) and v_vw % T.int64(4) == T.int64(1), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(2) and v_vw % T.int64(4) == T.int64(0), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(1) and v_vw % T.int64(4) == T.int64(3), T.float32(-1), T.Select(v_r_b % T.int64(6) == T.int64(1) and v_vw % T.int64(4) == T.int64(2), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(1) and v_vw % T.int64(4) == T.int64(1), T.float32(-1), T.Select(v_r_b % T.int64(6) == T.int64(1) and v_vw % T.int64(4) == T.int64(0), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(0) and v_vw % T.int64(4) == T.int64(3), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(0) and v_vw % T.int64(4) == T.int64(2), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(0) and v_vw % T.int64(4) == T.int64(1), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(0) and v_vw % T.int64(4) == T.int64(0), T.float32(1), T.float32(0)))))))))))))))))))))))))
                    for h_1, w_1 in T.grid(T.int64(4), T.int64(4)):
                        with T.block("conv2d_winograd"):
                            v_n = T.axis.spatial(T.int64(1), T.int64(0))
                            v_co = T.axis.spatial(T.int64(128), (n_co_h_0_w_0_fused_0 * T.int64(512) + n_co_h_0_w_0_fused_1) // T.int64(784))
                            v_h = T.axis.spatial(T.int64(112), (n_co_h_0_w_0_fused_0 * T.int64(512) + n_co_h_0_w_0_fused_1) % T.int64(784) // T.int64(28) * T.int64(4) + h_1)
                            v_w = T.axis.spatial(T.int64(112), (n_co_h_0_w_0_fused_0 * T.int64(512) + n_co_h_0_w_0_fused_1) % T.int64(28) * T.int64(4) + w_1)
                            T.reads(inverse_local[v_co, v_n * T.int64(784) + v_h // T.int64(4) * T.int64(28) + v_w // T.int64(4), v_h % T.int64(4), v_w % T.int64(4)], p2[v_n, v_co, T.int64(0), T.int64(0)])
                            T.writes(T_relu[v_n, v_co, v_h, v_w])
                            T_relu[v_n, v_co, v_h, v_w] = T.max(inverse_local[v_co, v_n * T.int64(784) + v_h // T.int64(4) * T.int64(28) + v_w // T.int64(4), v_h % T.int64(4), v_w % T.int64(4)] + p2[v_n, v_co, T.int64(0), T.int64(0)], T.float32(0))
b0 = sch.get_block(name="data_pack", func_name="main")
b1 = sch.get_block(name="bgemm", func_name="main")
b2 = sch.get_block(name="inverse", func_name="main")
b3 = sch.get_block(name="conv2d_winograd", func_name="main")
b4 = sch.get_block(name="T_add", func_name="main")
b5 = sch.get_block(name="T_relu", func_name="main")
b6 = sch.get_block(name="root", func_name="main")
b7, b8 = sch.get_producers(block=b2)
sch.compute_inline(block=b8)
b9, = sch.get_consumers(block=b2)
l10, l11, l12, l13 = sch.get_loops(block=b9)
l14, l15 = sch.split(loop=l12, factors=[None, 4], preserve_unit_iters=True)
l16, l17 = sch.split(loop=l13, factors=[None, 4], preserve_unit_iters=True)
sch.reorder(l14, l16, l15, l17)
sch.compute_at(block=b2, loop=l16, preserve_unit_loops=True, index=-1)
sch.set_scope(block=b2, buffer_index=0, storage_scope="local")
l18, l19, l20, l21, l22, l23, l24, l25, l26, l27 = sch.get_loops(block=b2)
sch.unroll(loop=l24)
sch.unroll(loop=l25)
sch.unroll(loop=l26)
sch.unroll(loop=l27)
b28, b29 = sch.get_producers(block=b0)
sch.compute_inline(block=b29)
b30, = sch.get_producers(block=b28)
l31, l32, l33, l34, l35, l36 = sch.get_loops(block=b0)
sch.reorder(l33, l34, l31, l32, l35, l36)
sch.unroll(loop=l31)
sch.unroll(loop=l32)
sch.unroll(loop=l35)
sch.unroll(loop=l36)
l37 = sch.fuse(l33, l34, preserve_unit_iters=True)
v38 = sch.sample_categorical(candidates=[32, 64, 128, 256, 512, 1024], probs=[0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666], decision=5)
l39, l40 = sch.split(loop=l37, factors=[None, v38], preserve_unit_iters=True)
sch.bind(loop=l39, thread_axis="blockIdx.x")
sch.bind(loop=l40, thread_axis="threadIdx.x")
b41 = sch.cache_write(block=b0, write_buffer_index=0, storage_scope="local")
sch.reverse_compute_at(block=b41, loop=l40, preserve_unit_loops=True, index=-1)
sch.compute_at(block=b28, loop=l40, preserve_unit_loops=True, index=-1)
sch.set_scope(block=b28, buffer_index=0, storage_scope="local")
sch.compute_inline(block=b30)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSSRRSRS")
l42, l43, l44, l45, l46 = sch.get_loops(block=b1)
v47, v48, v49, v50, v51 = sch.sample_perfect_tile(loop=l42, n=5, max_innermost_factor=64, decision=[2, 1, 1, 1, 3])
l52, l53, l54, l55, l56 = sch.split(loop=l42, factors=[v47, v48, v49, v50, v51], preserve_unit_iters=True)
v57, v58, v59, v60, v61 = sch.sample_perfect_tile(loop=l43, n=5, max_innermost_factor=64, decision=[1, 1, 1, 2, 3])
l62, l63, l64, l65, l66 = sch.split(loop=l43, factors=[v57, v58, v59, v60, v61], preserve_unit_iters=True)
v67, v68, v69, v70, v71 = sch.sample_perfect_tile(loop=l44, n=5, max_innermost_factor=64, decision=[16, 2, 1, 2, 2])
l72, l73, l74, l75, l76 = sch.split(loop=l44, factors=[v67, v68, v69, v70, v71], preserve_unit_iters=True)
v77, v78, v79, v80, v81 = sch.sample_perfect_tile(loop=l45, n=5, max_innermost_factor=64, decision=[2, 4, 2, 7, 7])
l82, l83, l84, l85, l86 = sch.split(loop=l45, factors=[v77, v78, v79, v80, v81], preserve_unit_iters=True)
v87, v88, v89 = sch.sample_perfect_tile(loop=l46, n=3, max_innermost_factor=64, decision=[2, 1, 32])
l90, l91, l92 = sch.split(loop=l46, factors=[v87, v88, v89], preserve_unit_iters=True)
sch.reorder(l52, l62, l72, l82, l53, l63, l73, l83, l54, l64, l74, l84, l90, l91, l55, l65, l75, l85, l92, l56, l66, l76, l86)
l93 = sch.fuse(l52, l62, l72, l82, preserve_unit_iters=True)
sch.bind(loop=l93, thread_axis="blockIdx.x")
l94 = sch.fuse(l53, l63, l73, l83, preserve_unit_iters=True)
sch.bind(loop=l94, thread_axis="vthread.x")
l95 = sch.fuse(l54, l64, l74, l84, preserve_unit_iters=True)
sch.bind(loop=l95, thread_axis="threadIdx.x")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_low_inclusive", ann_val=32)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_high_inclusive", ann_val=1024)
b96 = sch.cache_write(block=b1, write_buffer_index=0, storage_scope="local")
sch.reverse_compute_at(block=b96, loop=l95, preserve_unit_loops=True, index=-1)
b97 = sch.cache_read(block=b1, read_buffer_index=0, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b97, loop=l90, preserve_unit_loops=True, index=-1)
l98, l99, l100, l101, l102, l103, l104, l105 = sch.get_loops(block=b97)
l106 = sch.fuse(l102, l103, l104, l105, preserve_unit_iters=True)
v107 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=2)
sch.annotate(block_or_loop=b97, ann_key="meta_schedule.cooperative_fetch", ann_val=v107)
b108 = sch.cache_read(block=b1, read_buffer_index=1, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b108, loop=l90, preserve_unit_loops=True, index=-1)
l109, l110, l111, l112, l113, l114, l115, l116 = sch.get_loops(block=b108)
l117 = sch.fuse(l113, l114, l115, l116, preserve_unit_iters=True)
v118 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=1)
sch.annotate(block_or_loop=b108, ann_key="meta_schedule.cooperative_fetch", ann_val=v118)
l119 = sch.fuse(l90, preserve_unit_iters=True)
sch.annotate(block_or_loop=l119, ann_key="software_pipeline_stage", ann_val=[0, 0, 2])
sch.annotate(block_or_loop=l119, ann_key="software_pipeline_order", ann_val=[0, 1, 2])
sch.annotate(block_or_loop=l119, ann_key="software_pipeline_async_stages", ann_val=[0])
sch.reverse_compute_inline(block=b5)
sch.reverse_compute_inline(block=b4)
v120 = sch.sample_categorical(candidates=[0, 16, 64, 512, 1024], probs=[0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001], decision=2)
sch.annotate(block_or_loop=b6, ann_key="meta_schedule.unroll_explicit", ann_val=v120)
l121, l122, l123, l124, l125, l126 = sch.get_loops(block=b3)
l127 = sch.fuse(l121, l122, l123, l124, preserve_unit_iters=True)
v128 = sch.sample_categorical(candidates=[32, 64, 128, 256, 512, 1024], probs=[0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666], decision=4)
l129, l130 = sch.split(loop=l127, factors=[None, v128], preserve_unit_iters=True)
sch.bind(loop=l129, thread_axis="blockIdx.x")
sch.bind(loop=l130, thread_axis="threadIdx.x")
2024-04-28 19:49:58 [INFO] [task_scheduler.cc:170] Design space #2:
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(64), T.int64(112), T.int64(112)), "float32"), p1: T.Buffer((T.int64(6), T.int64(6), T.int64(64), T.int64(128)), "float32"), p2: T.Buffer((T.int64(1), T.int64(128), T.int64(1), T.int64(1)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(128), T.int64(112), T.int64(112)), "float32")):
        T.func_attr({"layout_free_buffers": [1], "tir.noalias": T.bool(True)})
        with T.block("root"):
            T.reads()
            T.writes()
            T.block_attr({"meta_schedule.unroll_explicit": 16})
            input_tile_local = T.alloc_buffer((T.int64(64), T.int64(784), T.int64(6), T.int64(6)), scope="local")
            data_pack = T.alloc_buffer((T.int64(6), T.int64(6), T.int64(64), T.int64(784)))
            bgemm = T.alloc_buffer((T.int64(6), T.int64(6), T.int64(128), T.int64(784)))
            inverse_local = T.alloc_buffer((T.int64(128), T.int64(784), T.int64(4), T.int64(4)), scope="local")
            data_pack_local = T.alloc_buffer((T.int64(6), T.int64(6), T.int64(64), T.int64(784)), scope="local")
            bgemm_local = T.alloc_buffer((T.int64(6), T.int64(6), T.int64(128), T.int64(784)), scope="local")
            data_pack_shared = T.alloc_buffer((T.int64(6), T.int64(6), T.int64(64), T.int64(784)), scope="shared")
            p1_shared = T.alloc_buffer((T.int64(6), T.int64(6), T.int64(64), T.int64(128)), scope="shared")
            for ci_p_fused_0 in T.thread_binding(T.int64(49), thread="blockIdx.x"):
                for ci_p_fused_1 in T.thread_binding(T.int64(1024), thread="threadIdx.x"):
                    for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(1), T.int64(6), T.int64(6)):
                        with T.block("input_tile"):
                            v_ci = T.axis.spatial(T.int64(64), (ci_p_fused_0 * T.int64(1024) + ci_p_fused_1) // T.int64(784) + ax0)
                            v_p = T.axis.spatial(T.int64(784), (ci_p_fused_0 * T.int64(240) + ci_p_fused_1) % T.int64(784) + ax1)
                            v_eps, v_nu = T.axis.remap("SS", [ax2, ax3])
                            T.reads(p0[v_p // T.int64(784), v_ci, v_p % T.int64(784) // T.int64(28) * T.int64(4) + v_eps - T.int64(1), v_p % T.int64(28) * T.int64(4) + v_nu - T.int64(1)])
                            T.writes(input_tile_local[v_ci, v_p, v_eps, v_nu])
                            T.block_attr({"schedule_rule": "None"})
                            input_tile_local[v_ci, v_p, v_eps, v_nu] = T.if_then_else(T.int64(1) <= v_p % T.int64(784) // T.int64(28) * T.int64(4) + v_eps and v_p % T.int64(784) // T.int64(28) * T.int64(4) + v_eps < T.int64(113) and T.int64(1) <= v_p % T.int64(28) * T.int64(4) + v_nu and v_p % T.int64(28) * T.int64(4) + v_nu < T.int64(113), p0[v_p // T.int64(784), v_ci, v_p % T.int64(784) // T.int64(28) * T.int64(4) + v_eps - T.int64(1), v_p % T.int64(28) * T.int64(4) + v_nu - T.int64(1)], T.float32(0))
                    for eps in T.unroll(T.int64(6)):
                        for nu in T.unroll(T.int64(6)):
                            for r_a in T.unroll(T.int64(6)):
                                for r_b in T.unroll(T.int64(6)):
                                    with T.block("data_pack"):
                                        v_eps, v_nu = T.axis.remap("SS", [eps, nu])
                                        v_ci = T.axis.spatial(T.int64(64), (ci_p_fused_0 * T.int64(1024) + ci_p_fused_1) // T.int64(784))
                                        v_p = T.axis.spatial(T.int64(784), (ci_p_fused_0 * T.int64(1024) + ci_p_fused_1) % T.int64(784))
                                        v_r_a, v_r_b = T.axis.remap("RR", [r_a, r_b])
                                        T.reads(input_tile_local[v_ci, v_p, v_r_a, v_r_b])
                                        T.writes(data_pack_local[v_eps, v_nu, v_ci, v_p])
                                        T.block_attr({"schedule_rule": "conv2d_nchw_winograd_data_pack"})
                                        with T.init():
                                            data_pack_local[v_eps, v_nu, v_ci, v_p] = T.float32(0)
                                        data_pack_local[v_eps, v_nu, v_ci, v_p] = data_pack_local[v_eps, v_nu, v_ci, v_p] + input_tile_local[v_ci, v_p, v_r_a, v_r_b] * T.Select(v_r_a % T.int64(6) == T.int64(5) and v_eps % T.int64(6) == T.int64(5), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(5) and v_eps % T.int64(6) == T.int64(4), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(5) and v_eps % T.int64(6) == T.int64(3), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(5) and v_eps % T.int64(6) == T.int64(2), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(5) and v_eps % T.int64(6) == T.int64(1), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(5) and v_eps % T.int64(6) == T.int64(0), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(4) and v_eps % T.int64(6) == T.int64(5), T.float32(1.5), T.Select(v_r_a % T.int64(6) == T.int64(4) and v_eps % T.int64(6) == T.int64(4), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(4) and v_eps % T.int64(6) == T.int64(3), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(4) and v_eps % T.int64(6) == T.int64(2), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(4) and v_eps % T.int64(6) == T.int64(1), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(4) and v_eps % T.int64(6) == T.int64(0), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(3) and v_eps % T.int64(6) == T.int64(5), T.float32(-2), T.Select(v_r_a % T.int64(6) == T.int64(3) and v_eps % T.int64(6) == T.int64(4), T.float32(-0.5), T.Select(v_r_a % T.int64(6) == T.int64(3) and v_eps % T.int64(6) == T.int64(3), T.float32(2), T.Select(v_r_a % T.int64(6) == T.int64(3) and v_eps % T.int64(6) == T.int64(2), T.float32(2.5), T.Select(v_r_a % T.int64(6) == T.int64(3) and v_eps % T.int64(6) == T.int64(1), T.float32(0.5), T.Select(v_r_a % T.int64(6) == T.int64(3) and v_eps % T.int64(6) == T.int64(0), T.float32(1.5), T.Select(v_r_a % T.int64(6) == T.int64(2) and v_eps % T.int64(6) == T.int64(5), T.float32(-1.5), T.Select(v_r_a % T.int64(6) == T.int64(2) and v_eps % T.int64(6) == T.int64(4), T.float32(-1), T.Select(v_r_a % T.int64(6) == T.int64(2) and v_eps % T.int64(6) == T.int64(3), T.float32(-1), T.Select(v_r_a % T.int64(6) == T.int64(2) and v_eps % T.int64(6) == T.int64(2), T.float32(0.5), T.Select(v_r_a % T.int64(6) == T.int64(2) and v_eps % T.int64(6) == T.int64(1), T.float32(-2.5), T.Select(v_r_a % T.int64(6) == T.int64(2) and v_eps % T.int64(6) == T.int64(0), T.float32(-2), T.Select(v_r_a % T.int64(6) == T.int64(1) and v_eps % T.int64(6) == T.int64(5), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(1) and v_eps % T.int64(6) == T.int64(4), T.float32(0.5), T.Select(v_r_a % T.int64(6) == T.int64(1) and v_eps % T.int64(6) == T.int64(3), T.float32(-2), T.Select(v_r_a % T.int64(6) == T.int64(1) and v_eps % T.int64(6) == T.int64(2), T.float32(-1), T.Select(v_r_a % T.int64(6) == T.int64(1) and v_eps % T.int64(6) == T.int64(1), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(1) and v_eps % T.int64(6) == T.int64(0), T.float32(-1.5), T.Select(v_r_a % T.int64(6) == T.int64(0) and v_eps % T.int64(6) == T.int64(5), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(0) and v_eps % T.int64(6) == T.int64(4), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(0) and v_eps % T.int64(6) == T.int64(3), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(0) and v_eps % T.int64(6) == T.int64(2), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(0) and v_eps % T.int64(6) == T.int64(1), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(0) and v_eps % T.int64(6) == T.int64(0), T.float32(1), T.float32(0))))))))))))))))))))))))))))))))))))) * T.Select(v_r_b % T.int64(6) == T.int64(5) and v_nu % T.int64(6) == T.int64(5), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(5) and v_nu % T.int64(6) == T.int64(4), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(5) and v_nu % T.int64(6) == T.int64(3), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(5) and v_nu % T.int64(6) == T.int64(2), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(5) and v_nu % T.int64(6) == T.int64(1), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(5) and v_nu % T.int64(6) == T.int64(0), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(4) and v_nu % T.int64(6) == T.int64(5), T.float32(1.5), T.Select(v_r_b % T.int64(6) == T.int64(4) and v_nu % T.int64(6) == T.int64(4), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(4) and v_nu % T.int64(6) == T.int64(3), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(4) and v_nu % T.int64(6) == T.int64(2), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(4) and v_nu % T.int64(6) == T.int64(1), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(4) and v_nu % T.int64(6) == T.int64(0), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(3) and v_nu % T.int64(6) == T.int64(5), T.float32(-2), T.Select(v_r_b % T.int64(6) == T.int64(3) and v_nu % T.int64(6) == T.int64(4), T.float32(-0.5), T.Select(v_r_b % T.int64(6) == T.int64(3) and v_nu % T.int64(6) == T.int64(3), T.float32(2), T.Select(v_r_b % T.int64(6) == T.int64(3) and v_nu % T.int64(6) == T.int64(2), T.float32(2.5), T.Select(v_r_b % T.int64(6) == T.int64(3) and v_nu % T.int64(6) == T.int64(1), T.float32(0.5), T.Select(v_r_b % T.int64(6) == T.int64(3) and v_nu % T.int64(6) == T.int64(0), T.float32(1.5), T.Select(v_r_b % T.int64(6) == T.int64(2) and v_nu % T.int64(6) == T.int64(5), T.float32(-1.5), T.Select(v_r_b % T.int64(6) == T.int64(2) and v_nu % T.int64(6) == T.int64(4), T.float32(-1), T.Select(v_r_b % T.int64(6) == T.int64(2) and v_nu % T.int64(6) == T.int64(3), T.float32(-1), T.Select(v_r_b % T.int64(6) == T.int64(2) and v_nu % T.int64(6) == T.int64(2), T.float32(0.5), T.Select(v_r_b % T.int64(6) == T.int64(2) and v_nu % T.int64(6) == T.int64(1), T.float32(-2.5), T.Select(v_r_b % T.int64(6) == T.int64(2) and v_nu % T.int64(6) == T.int64(0), T.float32(-2), T.Select(v_r_b % T.int64(6) == T.int64(1) and v_nu % T.int64(6) == T.int64(5), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(1) and v_nu % T.int64(6) == T.int64(4), T.float32(0.5), T.Select(v_r_b % T.int64(6) == T.int64(1) and v_nu % T.int64(6) == T.int64(3), T.float32(-2), T.Select(v_r_b % T.int64(6) == T.int64(1) and v_nu % T.int64(6) == T.int64(2), T.float32(-1), T.Select(v_r_b % T.int64(6) == T.int64(1) and v_nu % T.int64(6) == T.int64(1), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(1) and v_nu % T.int64(6) == T.int64(0), T.float32(-1.5), T.Select(v_r_b % T.int64(6) == T.int64(0) and v_nu % T.int64(6) == T.int64(5), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(0) and v_nu % T.int64(6) == T.int64(4), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(0) and v_nu % T.int64(6) == T.int64(3), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(0) and v_nu % T.int64(6) == T.int64(2), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(0) and v_nu % T.int64(6) == T.int64(1), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(0) and v_nu % T.int64(6) == T.int64(0), T.float32(1), T.float32(0)))))))))))))))))))))))))))))))))))))
                    for ax0, ax1, ax2, ax3 in T.grid(T.int64(6), T.int64(6), T.int64(1), T.int64(1)):
                        with T.block("data_pack_local"):
                            v0, v1 = T.axis.remap("SS", [ax0, ax1])
                            v2 = T.axis.spatial(T.int64(64), (ci_p_fused_0 * T.int64(1024) + ci_p_fused_1) // T.int64(784) + ax2)
                            v3 = T.axis.spatial(T.int64(784), (ci_p_fused_0 * T.int64(240) + ci_p_fused_1) % T.int64(784) + ax3)
                            T.reads(data_pack_local[v0, v1, v2, v3])
                            T.writes(data_pack[v0, v1, v2, v3])
                            data_pack[v0, v1, v2, v3] = data_pack_local[v0, v1, v2, v3]
            for eps_0_nu_0_co_0_p_0_fused in T.thread_binding(T.int64(64), thread="blockIdx.x"):
                for eps_1_nu_1_co_1_p_1_fused in T.thread_binding(T.int64(8), thread="vthread.x"):
                    for eps_2_nu_2_co_2_p_2_fused in T.thread_binding(T.int64(2), thread="threadIdx.x"):
                        for ci_0_fused in T.serial(T.int64(2), annotations={"software_pipeline_async_stages": [0], "software_pipeline_order": [0, 1, 2], "software_pipeline_stage": [0, 0, 3]}):
                            for ax0_ax1_ax2_ax3_fused in range(T.int64(225792)):
                                with T.block("data_pack_shared"):
                                    v0 = T.axis.spatial(T.int64(6), eps_0_nu_0_co_0_p_0_fused // T.int64(32) * T.int64(3) + ax0_ax1_ax2_ax3_fused // T.int64(75264))
                                    v1 = T.axis.spatial(T.int64(6), ax0_ax1_ax2_ax3_fused % T.int64(75264) // T.int64(12544))
                                    v2 = T.axis.spatial(T.int64(64), ci_0_fused * T.int64(32) + ax0_ax1_ax2_ax3_fused % T.int64(12544) // T.int64(392))
                                    v3 = T.axis.spatial(T.int64(784), eps_0_nu_0_co_0_p_0_fused % T.int64(2) * T.int64(392) + ax0_ax1_ax2_ax3_fused % T.int64(392))
                                    T.reads(data_pack[v0, v1, v2, v3])
                                    T.writes(data_pack_shared[v0, v1, v2, v3])
                                    T.block_attr({"meta_schedule.cooperative_fetch": 3})
                                    data_pack_shared[v0, v1, v2, v3] = data_pack[v0, v1, v2, v3]
                            for ax0_ax1_ax2_ax3_fused in range(T.int64(4608)):
                                with T.block("p1_shared"):
                                    v0 = T.axis.spatial(T.int64(6), eps_0_nu_0_co_0_p_0_fused // T.int64(32) * T.int64(3) + ax0_ax1_ax2_ax3_fused // T.int64(1536))
                                    v1 = T.axis.spatial(T.int64(6), ax0_ax1_ax2_ax3_fused % T.int64(1536) // T.int64(256))
                                    v2 = T.axis.spatial(T.int64(64), ci_0_fused * T.int64(32) + ax0_ax1_ax2_ax3_fused % T.int64(256) // T.int64(8))
                                    v3 = T.axis.spatial(T.int64(128), eps_0_nu_0_co_0_p_0_fused % T.int64(32) // T.int64(2) * T.int64(8) + ax0_ax1_ax2_ax3_fused % T.int64(8))
                                    T.reads(p1[v0, v1, v2, v3])
                                    T.writes(p1_shared[v0, v1, v2, v3])
                                    T.block_attr({"meta_schedule.cooperative_fetch": 2})
                                    p1_shared[v0, v1, v2, v3] = p1[v0, v1, v2, v3]
                            for ci_1, eps_3, nu_3, co_3, p_3, ci_2, eps_4, nu_4, co_4, p_4 in T.grid(T.int64(1), T.int64(1), T.int64(2), T.int64(2), T.int64(7), T.int64(32), T.int64(3), T.int64(3), T.int64(2), T.int64(7)):
                                with T.block("bgemm"):
                                    v_eps = T.axis.spatial(T.int64(6), eps_0_nu_0_co_0_p_0_fused // T.int64(32) * T.int64(3) + eps_3 * T.int64(3) + eps_4)
                                    v_nu = T.axis.spatial(T.int64(6), nu_3 * T.int64(3) + nu_4)
                                    v_co = T.axis.spatial(T.int64(128), eps_0_nu_0_co_0_p_0_fused % T.int64(32) // T.int64(2) * T.int64(8) + eps_1_nu_1_co_1_p_1_fused // T.int64(4) * T.int64(4) + co_3 * T.int64(2) + co_4)
                                    v_p = T.axis.spatial(T.int64(784), eps_0_nu_0_co_0_p_0_fused % T.int64(2) * T.int64(392) + eps_1_nu_1_co_1_p_1_fused % T.int64(4) * T.int64(98) + eps_2_nu_2_co_2_p_2_fused * T.int64(49) + p_3 * T.int64(7) + p_4)
                                    v_ci = T.axis.reduce(T.int64(64), ci_0_fused * T.int64(32) + ci_1 * T.int64(32) + ci_2)
                                    T.reads(data_pack_shared[v_eps, v_nu, v_ci, v_p], p1_shared[v_eps, v_nu, v_ci, v_co])
                                    T.writes(bgemm_local[v_eps, v_nu, v_co, v_p])
                                    T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 32, "meta_schedule.tiling_structure": "SSSRRSRS"})
                                    with T.init():
                                        bgemm_local[v_eps, v_nu, v_co, v_p] = T.float32(0)
                                    bgemm_local[v_eps, v_nu, v_co, v_p] = bgemm_local[v_eps, v_nu, v_co, v_p] + data_pack_shared[v_eps, v_nu, v_ci, v_p] * p1_shared[v_eps, v_nu, v_ci, v_co]
                        for ax0, ax1, ax2, ax3 in T.grid(T.int64(3), T.int64(6), T.int64(4), T.int64(49)):
                            with T.block("bgemm_local"):
                                v0 = T.axis.spatial(T.int64(6), eps_0_nu_0_co_0_p_0_fused // T.int64(32) * T.int64(3) + ax0)
                                v1 = T.axis.spatial(T.int64(6), ax1)
                                v2 = T.axis.spatial(T.int64(128), eps_0_nu_0_co_0_p_0_fused % T.int64(32) // T.int64(2) * T.int64(8) + eps_1_nu_1_co_1_p_1_fused // T.int64(4) * T.int64(4) + ax2)
                                v3 = T.axis.spatial(T.int64(784), eps_0_nu_0_co_0_p_0_fused % T.int64(2) * T.int64(392) + eps_1_nu_1_co_1_p_1_fused % T.int64(4) * T.int64(98) + eps_2_nu_2_co_2_p_2_fused * T.int64(49) + ax3)
                                T.reads(bgemm_local[v0, v1, v2, v3])
                                T.writes(bgemm[v0, v1, v2, v3])
                                bgemm[v0, v1, v2, v3] = bgemm_local[v0, v1, v2, v3]
            for n_co_h_0_w_0_fused_0 in T.thread_binding(T.int64(784), thread="blockIdx.x"):
                for n_co_h_0_w_0_fused_1 in T.thread_binding(T.int64(128), thread="threadIdx.x"):
                    for ax0, ax1 in T.grid(T.int64(1), T.int64(1)):
                        for ax2 in T.unroll(T.int64(4)):
                            for ax3 in T.unroll(T.int64(4)):
                                for ax4 in T.unroll(T.int64(6)):
                                    for ax5 in T.unroll(T.int64(6)):
                                        with T.block("inverse"):
                                            v_co = T.axis.spatial(T.int64(128), (n_co_h_0_w_0_fused_0 * T.int64(128) + n_co_h_0_w_0_fused_1) // T.int64(784) + ax0)
                                            v_p = T.axis.spatial(T.int64(784), (n_co_h_0_w_0_fused_0 * T.int64(128) + n_co_h_0_w_0_fused_1) % T.int64(784) + ax1)
                                            v_vh, v_vw, v_r_a, v_r_b = T.axis.remap("SSRR", [ax2, ax3, ax4, ax5])
                                            T.reads(bgemm[v_r_a, v_r_b, v_co, v_p])
                                            T.writes(inverse_local[v_co, v_p, v_vh, v_vw])
                                            T.block_attr({"schedule_rule": "conv2d_nchw_winograd_inverse"})
                                            with T.init():
                                                inverse_local[v_co, v_p, v_vh, v_vw] = T.float32(0)
                                            inverse_local[v_co, v_p, v_vh, v_vw] = inverse_local[v_co, v_p, v_vh, v_vw] + bgemm[v_r_a, v_r_b, v_co, v_p] * T.Select(v_r_a % T.int64(6) == T.int64(5) and v_vh % T.int64(4) == T.int64(3), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(5) and v_vh % T.int64(4) == T.int64(2), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(5) and v_vh % T.int64(4) == T.int64(1), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(5) and v_vh % T.int64(4) == T.int64(0), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(4) and v_vh % T.int64(4) == T.int64(3), T.float32(-8), T.Select(v_r_a % T.int64(6) == T.int64(4) and v_vh % T.int64(4) == T.int64(2), T.float32(4), T.Select(v_r_a % T.int64(6) == T.int64(4) and v_vh % T.int64(4) == T.int64(1), T.float32(-2), T.Select(v_r_a % T.int64(6) == T.int64(4) and v_vh % T.int64(4) == T.int64(0), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(3) and v_vh % T.int64(4) == T.int64(3), T.float32(0.125), T.Select(v_r_a % T.int64(6) == T.int64(3) and v_vh % T.int64(4) == T.int64(2), T.float32(0.25), T.Select(v_r_a % T.int64(6) == T.int64(3) and v_vh % T.int64(4) == T.int64(1), T.float32(0.5), T.Select(v_r_a % T.int64(6) == T.int64(3) and v_vh % T.int64(4) == T.int64(0), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(2) and v_vh % T.int64(4) == T.int64(3), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(2) and v_vh % T.int64(4) == T.int64(2), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(2) and v_vh % T.int64(4) == T.int64(1), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(2) and v_vh % T.int64(4) == T.int64(0), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(1) and v_vh % T.int64(4) == T.int64(3), T.float32(-1), T.Select(v_r_a % T.int64(6) == T.int64(1) and v_vh % T.int64(4) == T.int64(2), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(1) and v_vh % T.int64(4) == T.int64(1), T.float32(-1), T.Select(v_r_a % T.int64(6) == T.int64(1) and v_vh % T.int64(4) == T.int64(0), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(0) and v_vh % T.int64(4) == T.int64(3), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(0) and v_vh % T.int64(4) == T.int64(2), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(0) and v_vh % T.int64(4) == T.int64(1), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(0) and v_vh % T.int64(4) == T.int64(0), T.float32(1), T.float32(0))))))))))))))))))))))))) * T.Select(v_r_b % T.int64(6) == T.int64(5) and v_vw % T.int64(4) == T.int64(3), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(5) and v_vw % T.int64(4) == T.int64(2), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(5) and v_vw % T.int64(4) == T.int64(1), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(5) and v_vw % T.int64(4) == T.int64(0), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(4) and v_vw % T.int64(4) == T.int64(3), T.float32(-8), T.Select(v_r_b % T.int64(6) == T.int64(4) and v_vw % T.int64(4) == T.int64(2), T.float32(4), T.Select(v_r_b % T.int64(6) == T.int64(4) and v_vw % T.int64(4) == T.int64(1), T.float32(-2), T.Select(v_r_b % T.int64(6) == T.int64(4) and v_vw % T.int64(4) == T.int64(0), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(3) and v_vw % T.int64(4) == T.int64(3), T.float32(0.125), T.Select(v_r_b % T.int64(6) == T.int64(3) and v_vw % T.int64(4) == T.int64(2), T.float32(0.25), T.Select(v_r_b % T.int64(6) == T.int64(3) and v_vw % T.int64(4) == T.int64(1), T.float32(0.5), T.Select(v_r_b % T.int64(6) == T.int64(3) and v_vw % T.int64(4) == T.int64(0), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(2) and v_vw % T.int64(4) == T.int64(3), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(2) and v_vw % T.int64(4) == T.int64(2), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(2) and v_vw % T.int64(4) == T.int64(1), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(2) and v_vw % T.int64(4) == T.int64(0), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(1) and v_vw % T.int64(4) == T.int64(3), T.float32(-1), T.Select(v_r_b % T.int64(6) == T.int64(1) and v_vw % T.int64(4) == T.int64(2), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(1) and v_vw % T.int64(4) == T.int64(1), T.float32(-1), T.Select(v_r_b % T.int64(6) == T.int64(1) and v_vw % T.int64(4) == T.int64(0), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(0) and v_vw % T.int64(4) == T.int64(3), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(0) and v_vw % T.int64(4) == T.int64(2), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(0) and v_vw % T.int64(4) == T.int64(1), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(0) and v_vw % T.int64(4) == T.int64(0), T.float32(1), T.float32(0)))))))))))))))))))))))))
                    for h_1, w_1 in T.grid(T.int64(4), T.int64(4)):
                        with T.block("conv2d_winograd"):
                            v_n = T.axis.spatial(T.int64(1), T.int64(0))
                            v_co = T.axis.spatial(T.int64(128), (n_co_h_0_w_0_fused_0 * T.int64(128) + n_co_h_0_w_0_fused_1) // T.int64(784))
                            v_h = T.axis.spatial(T.int64(112), (n_co_h_0_w_0_fused_0 * T.int64(128) + n_co_h_0_w_0_fused_1) % T.int64(784) // T.int64(28) * T.int64(4) + h_1)
                            v_w = T.axis.spatial(T.int64(112), (n_co_h_0_w_0_fused_0 * T.int64(128) + n_co_h_0_w_0_fused_1) % T.int64(28) * T.int64(4) + w_1)
                            T.reads(inverse_local[v_co, v_n * T.int64(784) + v_h // T.int64(4) * T.int64(28) + v_w // T.int64(4), v_h % T.int64(4), v_w % T.int64(4)], p2[v_n, v_co, T.int64(0), T.int64(0)])
                            T.writes(T_relu[v_n, v_co, v_h, v_w])
                            T_relu[v_n, v_co, v_h, v_w] = T.max(inverse_local[v_co, v_n * T.int64(784) + v_h // T.int64(4) * T.int64(28) + v_w // T.int64(4), v_h % T.int64(4), v_w % T.int64(4)] + p2[v_n, v_co, T.int64(0), T.int64(0)], T.float32(0))
b0 = sch.get_block(name="data_pack", func_name="main")
b1 = sch.get_block(name="bgemm", func_name="main")
b2 = sch.get_block(name="inverse", func_name="main")
b3 = sch.get_block(name="conv2d_winograd", func_name="main")
b4 = sch.get_block(name="T_add", func_name="main")
b5 = sch.get_block(name="T_relu", func_name="main")
b6 = sch.get_block(name="root", func_name="main")
b7, b8 = sch.get_producers(block=b2)
sch.compute_inline(block=b8)
b9, = sch.get_consumers(block=b2)
l10, l11, l12, l13 = sch.get_loops(block=b9)
l14, l15 = sch.split(loop=l12, factors=[None, 4], preserve_unit_iters=True)
l16, l17 = sch.split(loop=l13, factors=[None, 4], preserve_unit_iters=True)
sch.reorder(l14, l16, l15, l17)
sch.compute_at(block=b2, loop=l16, preserve_unit_loops=True, index=-1)
sch.set_scope(block=b2, buffer_index=0, storage_scope="local")
l18, l19, l20, l21, l22, l23, l24, l25, l26, l27 = sch.get_loops(block=b2)
sch.unroll(loop=l24)
sch.unroll(loop=l25)
sch.unroll(loop=l26)
sch.unroll(loop=l27)
b28, b29 = sch.get_producers(block=b0)
sch.compute_inline(block=b29)
b30, = sch.get_producers(block=b28)
l31, l32, l33, l34, l35, l36 = sch.get_loops(block=b0)
sch.reorder(l33, l34, l31, l32, l35, l36)
sch.unroll(loop=l31)
sch.unroll(loop=l32)
sch.unroll(loop=l35)
sch.unroll(loop=l36)
l37 = sch.fuse(l33, l34, preserve_unit_iters=True)
v38 = sch.sample_categorical(candidates=[32, 64, 128, 256, 512, 1024], probs=[0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666], decision=5)
l39, l40 = sch.split(loop=l37, factors=[None, v38], preserve_unit_iters=True)
sch.bind(loop=l39, thread_axis="blockIdx.x")
sch.bind(loop=l40, thread_axis="threadIdx.x")
b41 = sch.cache_write(block=b0, write_buffer_index=0, storage_scope="local")
sch.reverse_compute_at(block=b41, loop=l40, preserve_unit_loops=True, index=-1)
sch.compute_at(block=b28, loop=l40, preserve_unit_loops=True, index=-1)
sch.set_scope(block=b28, buffer_index=0, storage_scope="local")
sch.compute_inline(block=b30)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSSRRSRS")
l42, l43, l44, l45, l46 = sch.get_loops(block=b1)
v47, v48, v49, v50, v51 = sch.sample_perfect_tile(loop=l42, n=5, max_innermost_factor=64, decision=[2, 1, 1, 1, 3])
l52, l53, l54, l55, l56 = sch.split(loop=l42, factors=[v47, v48, v49, v50, v51], preserve_unit_iters=True)
v57, v58, v59, v60, v61 = sch.sample_perfect_tile(loop=l43, n=5, max_innermost_factor=64, decision=[1, 1, 1, 2, 3])
l62, l63, l64, l65, l66 = sch.split(loop=l43, factors=[v57, v58, v59, v60, v61], preserve_unit_iters=True)
v67, v68, v69, v70, v71 = sch.sample_perfect_tile(loop=l44, n=5, max_innermost_factor=64, decision=[16, 2, 1, 2, 2])
l72, l73, l74, l75, l76 = sch.split(loop=l44, factors=[v67, v68, v69, v70, v71], preserve_unit_iters=True)
v77, v78, v79, v80, v81 = sch.sample_perfect_tile(loop=l45, n=5, max_innermost_factor=64, decision=[2, 4, 2, 7, 7])
l82, l83, l84, l85, l86 = sch.split(loop=l45, factors=[v77, v78, v79, v80, v81], preserve_unit_iters=True)
v87, v88, v89 = sch.sample_perfect_tile(loop=l46, n=3, max_innermost_factor=64, decision=[2, 1, 32])
l90, l91, l92 = sch.split(loop=l46, factors=[v87, v88, v89], preserve_unit_iters=True)
sch.reorder(l52, l62, l72, l82, l53, l63, l73, l83, l54, l64, l74, l84, l90, l91, l55, l65, l75, l85, l92, l56, l66, l76, l86)
l93 = sch.fuse(l52, l62, l72, l82, preserve_unit_iters=True)
sch.bind(loop=l93, thread_axis="blockIdx.x")
l94 = sch.fuse(l53, l63, l73, l83, preserve_unit_iters=True)
sch.bind(loop=l94, thread_axis="vthread.x")
l95 = sch.fuse(l54, l64, l74, l84, preserve_unit_iters=True)
sch.bind(loop=l95, thread_axis="threadIdx.x")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_low_inclusive", ann_val=32)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_high_inclusive", ann_val=1024)
b96 = sch.cache_write(block=b1, write_buffer_index=0, storage_scope="local")
sch.reverse_compute_at(block=b96, loop=l95, preserve_unit_loops=True, index=-1)
b97 = sch.cache_read(block=b1, read_buffer_index=0, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b97, loop=l90, preserve_unit_loops=True, index=-1)
l98, l99, l100, l101, l102, l103, l104, l105 = sch.get_loops(block=b97)
l106 = sch.fuse(l102, l103, l104, l105, preserve_unit_iters=True)
v107 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=2)
sch.annotate(block_or_loop=b97, ann_key="meta_schedule.cooperative_fetch", ann_val=v107)
b108 = sch.cache_read(block=b1, read_buffer_index=1, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b108, loop=l90, preserve_unit_loops=True, index=-1)
l109, l110, l111, l112, l113, l114, l115, l116 = sch.get_loops(block=b108)
l117 = sch.fuse(l113, l114, l115, l116, preserve_unit_iters=True)
v118 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=1)
sch.annotate(block_or_loop=b108, ann_key="meta_schedule.cooperative_fetch", ann_val=v118)
l119 = sch.fuse(l90, preserve_unit_iters=True)
sch.annotate(block_or_loop=l119, ann_key="software_pipeline_stage", ann_val=[0, 0, 3])
sch.annotate(block_or_loop=l119, ann_key="software_pipeline_order", ann_val=[0, 1, 2])
sch.annotate(block_or_loop=l119, ann_key="software_pipeline_async_stages", ann_val=[0])
sch.reverse_compute_inline(block=b5)
sch.reverse_compute_inline(block=b4)
v120 = sch.sample_categorical(candidates=[0, 16, 64, 512, 1024], probs=[0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001], decision=1)
sch.annotate(block_or_loop=b6, ann_key="meta_schedule.unroll_explicit", ann_val=v120)
l121, l122, l123, l124, l125, l126 = sch.get_loops(block=b3)
l127 = sch.fuse(l121, l122, l123, l124, preserve_unit_iters=True)
v128 = sch.sample_categorical(candidates=[32, 64, 128, 256, 512, 1024], probs=[0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666], decision=2)
l129, l130 = sch.split(loop=l127, factors=[None, v128], preserve_unit_iters=True)
sch.bind(loop=l129, thread_axis="blockIdx.x")
sch.bind(loop=l130, thread_axis="threadIdx.x")
2024-04-28 19:54:01 [INFO] [evolutionary_search.cc:713] Generating candidates......
2024-04-28 19:54:01 [INFO] [evolutionary_search.cc:715] Picked top 0 candidate(s) from database
2024-04-28 19:54:09 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x43caf38)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x6f9f348)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x70a6218)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x9268ff8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x9288ea8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x70936f8)]: 500 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x3ab3ae8)]: 0 failure(s)
2024-04-28 19:54:18 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x43caf38)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x6f9f348)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x70a6218)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x9268ff8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x9288ea8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x70936f8)]: 1004 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x3ab3ae8)]: 0 failure(s)
2024-04-28 19:54:27 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x43caf38)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x6f9f348)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x70a6218)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x9268ff8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x9288ea8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x70936f8)]: 1509 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x3ab3ae8)]: 0 failure(s)
2024-04-28 19:54:36 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x43caf38)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x6f9f348)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x70a6218)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x9268ff8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x9288ea8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x70936f8)]: 2015 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x3ab3ae8)]: 0 failure(s)
2024-04-28 19:54:46 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x43caf38)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x6f9f348)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x70a6218)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x9268ff8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x9288ea8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x70936f8)]: 2514 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x3ab3ae8)]: 0 failure(s)
2024-04-28 19:54:53 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x43caf38)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x6f9f348)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x70a6218)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x9268ff8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x9288ea8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x70936f8)]: 3018 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x3ab3ae8)]: 0 failure(s)
2024-04-28 19:54:53 [INFO] [evolutionary_search.cc:723] Sampled 54 candidate(s)
2024-04-28 19:55:13 [INFO] [evolutionary_search.cc:621] Evolve iter #0 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x43caf38)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x6f9f348)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x70a6218)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x9268ff8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x9288ea8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x70936f8)]: 144 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x3ab3ae8)]: 0 failure(s)
2024-04-28 19:55:32 [INFO] [evolutionary_search.cc:621] Evolve iter #1 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x43caf38)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x6f9f348)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x70a6218)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x9268ff8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x9288ea8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x70936f8)]: 121 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x3ab3ae8)]: 0 failure(s)
2024-04-28 19:55:50 [INFO] [evolutionary_search.cc:621] Evolve iter #2 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x43caf38)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x6f9f348)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x70a6218)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x9268ff8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x9288ea8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x70936f8)]: 139 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x3ab3ae8)]: 0 failure(s)
2024-04-28 19:56:09 [INFO] [evolutionary_search.cc:621] Evolve iter #3 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x43caf38)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x6f9f348)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x70a6218)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x9268ff8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x9288ea8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x70936f8)]: 122 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x3ab3ae8)]: 0 failure(s)
2024-04-28 19:56:09 [INFO] [evolutionary_search.cc:649] Scores of the best 64 candidates:
[1 : 16]:	0.9998  0.9998  0.9996  0.9996  0.9993  0.9992  0.9990  0.9989  0.9978  0.9978  0.9971  0.9967  0.9955  0.9954  0.9954  0.9953
[17 : 32]:	0.9951  0.9948  0.9938  0.9935  0.9935  0.9919  0.9908  0.9906  0.9892  0.9891  0.9890  0.9890  0.9881  0.9880  0.9863  0.9861
[33 : 48]:	0.9842  0.9840  0.9825  0.9822  0.9821  0.9818  0.9815  0.9800  0.9799  0.9786  0.9784  0.9777  0.9765  0.9753  0.9743  0.9740
[49 : 64]:	0.9718  0.9717  0.9708  0.9707  0.9705  0.9699  0.9696  0.9693  0.9688  0.9687  0.9678  0.9665  0.9665  0.9661  0.9661  0.9655
2024-04-28 19:56:09 [INFO] [evolutionary_search.cc:727] Got 64 candidate(s) with evolutionary search
2024-04-28 19:56:09 [INFO] [evolutionary_search.cc:730] Sending 64 candidates(s) for measurement
2024-04-28 20:23:59 [INFO] [task_scheduler.cc:121] [Task #2: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #1: Error in building:
LocalBuilder: Timeout, killed after 30.0 seconds
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(64), T.int64(112), T.int64(112)), "float32"), p1: T.Buffer((T.int64(6), T.int64(6), T.int64(64), T.int64(128)), "float32"), p2: T.Buffer((T.int64(1), T.int64(128), T.int64(1), T.int64(1)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(128), T.int64(112), T.int64(112)), "float32")):
        T.func_attr({"layout_free_buffers": [1], "tir.noalias": T.bool(True)})
        # with T.block("root"):
        input_tile_local = T.alloc_buffer((T.int64(64), T.int64(784), T.int64(6), T.int64(6)), scope="local")
        data_pack = T.alloc_buffer((T.int64(6), T.int64(6), T.int64(64), T.int64(784)))
        bgemm = T.alloc_buffer((T.int64(6), T.int64(6), T.int64(128), T.int64(784)))
        inverse_local = T.alloc_buffer((T.int64(128), T.int64(784), T.int64(4), T.int64(4)), scope="local")
        data_pack_local = T.alloc_buffer((T.int64(6), T.int64(6), T.int64(64), T.int64(784)), scope="local")
        bgemm_local = T.alloc_buffer((T.int64(6), T.int64(6), T.int64(128), T.int64(784)), scope="local")
        data_pack_shared = T.alloc_buffer((T.int64(6), T.int64(6), T.int64(64), T.int64(784)), scope="shared")
        p1_shared = T.alloc_buffer((T.int64(6), T.int64(6), T.int64(64), T.int64(128)), scope="shared")
        for ci_p_fused_0 in T.thread_binding(T.int64(49), thread="blockIdx.x", annotations={"pragma_auto_unroll_max_step": 1024, "pragma_unroll_explicit": 1}):
            for ci_p_fused_1 in T.thread_binding(T.int64(1024), thread="threadIdx.x"):
                for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(1), T.int64(6), T.int64(6)):
                    with T.block("input_tile"):
                        v_ci = T.axis.spatial(T.int64(64), (ci_p_fused_0 * T.int64(1024) + ci_p_fused_1) // T.int64(784) + ax0)
                        v_p = T.axis.spatial(T.int64(784), (ci_p_fused_0 * T.int64(240) + ci_p_fused_1) % T.int64(784) + ax1)
                        v_eps, v_nu = T.axis.remap("SS", [ax2, ax3])
                        T.reads(p0[v_p // T.int64(784), v_ci, v_p % T.int64(784) // T.int64(28) * T.int64(4) + v_eps - T.int64(1), v_p % T.int64(28) * T.int64(4) + v_nu - T.int64(1)])
                        T.writes(input_tile_local[v_ci, v_p, v_eps, v_nu])
                        T.block_attr({"schedule_rule": "None"})
                        input_tile_local[v_ci, v_p, v_eps, v_nu] = T.if_then_else(T.int64(1) <= v_p % T.int64(784) // T.int64(28) * T.int64(4) + v_eps and v_p % T.int64(784) // T.int64(28) * T.int64(4) + v_eps < T.int64(113) and T.int64(1) <= v_p % T.int64(28) * T.int64(4) + v_nu and v_p % T.int64(28) * T.int64(4) + v_nu < T.int64(113), p0[v_p // T.int64(784), v_ci, v_p % T.int64(784) // T.int64(28) * T.int64(4) + v_eps - T.int64(1), v_p % T.int64(28) * T.int64(4) + v_nu - T.int64(1)], T.float32(0))
                for eps in T.unroll(T.int64(6)):
                    for nu in T.unroll(T.int64(6)):
                        with T.block("data_pack_init"):
                            v_eps, v_nu = T.axis.remap("SS", [eps, nu])
                            v_ci = T.axis.spatial(T.int64(64), (ci_p_fused_0 * T.int64(1024) + ci_p_fused_1) // T.int64(784))
                            v_p = T.axis.spatial(T.int64(784), (ci_p_fused_0 * T.int64(1024) + ci_p_fused_1) % T.int64(784))
                            T.reads()
                            T.writes(data_pack_local[v_eps, v_nu, v_ci, v_p])
                            T.block_attr({"schedule_rule": "conv2d_nchw_winograd_data_pack"})
                            data_pack_local[v_eps, v_nu, v_ci, v_p] = T.float32(0)
                        for r_a in T.unroll(T.int64(6)):
                            for r_b in T.unroll(T.int64(6)):
                                with T.block("data_pack_update"):
                                    v_eps, v_nu = T.axis.remap("SS", [eps, nu])
                                    v_ci = T.axis.spatial(T.int64(64), (ci_p_fused_0 * T.int64(1024) + ci_p_fused_1) // T.int64(784))
                                    v_p = T.axis.spatial(T.int64(784), (ci_p_fused_0 * T.int64(1024) + ci_p_fused_1) % T.int64(784))
                                    v_r_a, v_r_b = T.axis.remap("RR", [r_a, r_b])
                                    T.reads(data_pack_local[v_eps, v_nu, v_ci, v_p], input_tile_local[v_ci, v_p, v_r_a, v_r_b])
                                    T.writes(data_pack_local[v_eps, v_nu, v_ci, v_p])
                                    T.block_attr({"schedule_rule": "conv2d_nchw_winograd_data_pack"})
                                    data_pack_local[v_eps, v_nu, v_ci, v_p] = data_pack_local[v_eps, v_nu, v_ci, v_p] + input_tile_local[v_ci, v_p, v_r_a, v_r_b] * T.Select(v_r_a % T.int64(6) == T.int64(5) and v_eps % T.int64(6) == T.int64(5), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(5) and v_eps % T.int64(6) == T.int64(4), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(5) and v_eps % T.int64(6) == T.int64(3), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(5) and v_eps % T.int64(6) == T.int64(2), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(5) and v_eps % T.int64(6) == T.int64(1), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(5) and v_eps % T.int64(6) == T.int64(0), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(4) and v_eps % T.int64(6) == T.int64(5), T.float32(1.5), T.Select(v_r_a % T.int64(6) == T.int64(4) and v_eps % T.int64(6) == T.int64(4), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(4) and v_eps % T.int64(6) == T.int64(3), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(4) and v_eps % T.int64(6) == T.int64(2), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(4) and v_eps % T.int64(6) == T.int64(1), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(4) and v_eps % T.int64(6) == T.int64(0), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(3) and v_eps % T.int64(6) == T.int64(5), T.float32(-2), T.Select(v_r_a % T.int64(6) == T.int64(3) and v_eps % T.int64(6) == T.int64(4), T.float32(-0.5), T.Select(v_r_a % T.int64(6) == T.int64(3) and v_eps % T.int64(6) == T.int64(3), T.float32(2), T.Select(v_r_a % T.int64(6) == T.int64(3) and v_eps % T.int64(6) == T.int64(2), T.float32(2.5), T.Select(v_r_a % T.int64(6) == T.int64(3) and v_eps % T.int64(6) == T.int64(1), T.float32(0.5), T.Select(v_r_a % T.int64(6) == T.int64(3) and v_eps % T.int64(6) == T.int64(0), T.float32(1.5), T.Select(v_r_a % T.int64(6) == T.int64(2) and v_eps % T.int64(6) == T.int64(5), T.float32(-1.5), T.Select(v_r_a % T.int64(6) == T.int64(2) and v_eps % T.int64(6) == T.int64(4), T.float32(-1), T.Select(v_r_a % T.int64(6) == T.int64(2) and v_eps % T.int64(6) == T.int64(3), T.float32(-1), T.Select(v_r_a % T.int64(6) == T.int64(2) and v_eps % T.int64(6) == T.int64(2), T.float32(0.5), T.Select(v_r_a % T.int64(6) == T.int64(2) and v_eps % T.int64(6) == T.int64(1), T.float32(-2.5), T.Select(v_r_a % T.int64(6) == T.int64(2) and v_eps % T.int64(6) == T.int64(0), T.float32(-2), T.Select(v_r_a % T.int64(6) == T.int64(1) and v_eps % T.int64(6) == T.int64(5), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(1) and v_eps % T.int64(6) == T.int64(4), T.float32(0.5), T.Select(v_r_a % T.int64(6) == T.int64(1) and v_eps % T.int64(6) == T.int64(3), T.float32(-2), T.Select(v_r_a % T.int64(6) == T.int64(1) and v_eps % T.int64(6) == T.int64(2), T.float32(-1), T.Select(v_r_a % T.int64(6) == T.int64(1) and v_eps % T.int64(6) == T.int64(1), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(1) and v_eps % T.int64(6) == T.int64(0), T.float32(-1.5), T.Select(v_r_a % T.int64(6) == T.int64(0) and v_eps % T.int64(6) == T.int64(5), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(0) and v_eps % T.int64(6) == T.int64(4), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(0) and v_eps % T.int64(6) == T.int64(3), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(0) and v_eps % T.int64(6) == T.int64(2), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(0) and v_eps % T.int64(6) == T.int64(1), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(0) and v_eps % T.int64(6) == T.int64(0), T.float32(1), T.float32(0))))))))))))))))))))))))))))))))))))) * T.Select(v_r_b % T.int64(6) == T.int64(5) and v_nu % T.int64(6) == T.int64(5), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(5) and v_nu % T.int64(6) == T.int64(4), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(5) and v_nu % T.int64(6) == T.int64(3), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(5) and v_nu % T.int64(6) == T.int64(2), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(5) and v_nu % T.int64(6) == T.int64(1), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(5) and v_nu % T.int64(6) == T.int64(0), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(4) and v_nu % T.int64(6) == T.int64(5), T.float32(1.5), T.Select(v_r_b % T.int64(6) == T.int64(4) and v_nu % T.int64(6) == T.int64(4), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(4) and v_nu % T.int64(6) == T.int64(3), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(4) and v_nu % T.int64(6) == T.int64(2), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(4) and v_nu % T.int64(6) == T.int64(1), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(4) and v_nu % T.int64(6) == T.int64(0), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(3) and v_nu % T.int64(6) == T.int64(5), T.float32(-2), T.Select(v_r_b % T.int64(6) == T.int64(3) and v_nu % T.int64(6) == T.int64(4), T.float32(-0.5), T.Select(v_r_b % T.int64(6) == T.int64(3) and v_nu % T.int64(6) == T.int64(3), T.float32(2), T.Select(v_r_b % T.int64(6) == T.int64(3) and v_nu % T.int64(6) == T.int64(2), T.float32(2.5), T.Select(v_r_b % T.int64(6) == T.int64(3) and v_nu % T.int64(6) == T.int64(1), T.float32(0.5), T.Select(v_r_b % T.int64(6) == T.int64(3) and v_nu % T.int64(6) == T.int64(0), T.float32(1.5), T.Select(v_r_b % T.int64(6) == T.int64(2) and v_nu % T.int64(6) == T.int64(5), T.float32(-1.5), T.Select(v_r_b % T.int64(6) == T.int64(2) and v_nu % T.int64(6) == T.int64(4), T.float32(-1), T.Select(v_r_b % T.int64(6) == T.int64(2) and v_nu % T.int64(6) == T.int64(3), T.float32(-1), T.Select(v_r_b % T.int64(6) == T.int64(2) and v_nu % T.int64(6) == T.int64(2), T.float32(0.5), T.Select(v_r_b % T.int64(6) == T.int64(2) and v_nu % T.int64(6) == T.int64(1), T.float32(-2.5), T.Select(v_r_b % T.int64(6) == T.int64(2) and v_nu % T.int64(6) == T.int64(0), T.float32(-2), T.Select(v_r_b % T.int64(6) == T.int64(1) and v_nu % T.int64(6) == T.int64(5), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(1) and v_nu % T.int64(6) == T.int64(4), T.float32(0.5), T.Select(v_r_b % T.int64(6) == T.int64(1) and v_nu % T.int64(6) == T.int64(3), T.float32(-2), T.Select(v_r_b % T.int64(6) == T.int64(1) and v_nu % T.int64(6) == T.int64(2), T.float32(-1), T.Select(v_r_b % T.int64(6) == T.int64(1) and v_nu % T.int64(6) == T.int64(1), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(1) and v_nu % T.int64(6) == T.int64(0), T.float32(-1.5), T.Select(v_r_b % T.int64(6) == T.int64(0) and v_nu % T.int64(6) == T.int64(5), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(0) and v_nu % T.int64(6) == T.int64(4), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(0) and v_nu % T.int64(6) == T.int64(3), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(0) and v_nu % T.int64(6) == T.int64(2), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(0) and v_nu % T.int64(6) == T.int64(1), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(0) and v_nu % T.int64(6) == T.int64(0), T.float32(1), T.float32(0)))))))))))))))))))))))))))))))))))))
                for ax0, ax1, ax2, ax3 in T.grid(T.int64(6), T.int64(6), T.int64(1), T.int64(1)):
                    with T.block("data_pack_local"):
                        v0, v1 = T.axis.remap("SS", [ax0, ax1])
                        v2 = T.axis.spatial(T.int64(64), (ci_p_fused_0 * T.int64(1024) + ci_p_fused_1) // T.int64(784) + ax2)
                        v3 = T.axis.spatial(T.int64(784), (ci_p_fused_0 * T.int64(240) + ci_p_fused_1) % T.int64(784) + ax3)
                        T.reads(data_pack_local[v0, v1, v2, v3])
                        T.writes(data_pack[v0, v1, v2, v3])
                        data_pack[v0, v1, v2, v3] = data_pack_local[v0, v1, v2, v3]
        for eps_0_nu_0_co_0_p_0_fused in T.thread_binding(T.int64(12), thread="blockIdx.x", annotations={"pragma_auto_unroll_max_step": 1024, "pragma_unroll_explicit": 1}):
            for eps_1_nu_1_co_1_p_1_fused in T.thread_binding(T.int64(1), thread="vthread.x"):
                for eps_2_nu_2_co_2_p_2_fused in T.thread_binding(T.int64(224), thread="threadIdx.x"):
                    for eps_3_init, nu_3_init, co_3_init, p_3_init, eps_4_init, nu_4_init, co_4_init, p_4_init in T.grid(T.int64(2), T.int64(1), T.int64(2), T.int64(2), T.int64(3), T.int64(1), T.int64(4), T.int64(14)):
                        with T.block("bgemm_init"):
                            v_eps = T.axis.spatial(T.int64(6), eps_3_init * T.int64(3) + eps_4_init)
                            v_nu = T.axis.spatial(T.int64(6), eps_0_nu_0_co_0_p_0_fused // T.int64(4) * T.int64(2) + eps_2_nu_2_co_2_p_2_fused // T.int64(112) + nu_3_init + nu_4_init)
                            v_co = T.axis.spatial(T.int64(128), eps_2_nu_2_co_2_p_2_fused % T.int64(112) // T.int64(7) * T.int64(8) + co_3_init * T.int64(4) + co_4_init)
                            v_p = T.axis.spatial(T.int64(784), eps_0_nu_0_co_0_p_0_fused % T.int64(4) * T.int64(196) + eps_2_nu_2_co_2_p_2_fused % T.int64(7) * T.int64(28) + p_3_init * T.int64(14) + p_4_init)
                            T.reads()
                            T.writes(bgemm_local[v_eps, v_nu, v_co, v_p])
                            T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 32, "meta_schedule.tiling_structure": "SSSRRSRS"})
                            bgemm_local[v_eps, v_nu, v_co, v_p] = T.float32(0)
                    for ci_0_fused in T.serial(T.int64(64), annotations={"software_pipeline_async_stages": [0], "software_pipeline_order": [0, 1, 2], "software_pipeline_stage": [0, 0, 2]}):
                        for ax0_ax1_ax2_ax3_fused_0 in range(T.int64(11)):
                            for ax0_ax1_ax2_ax3_fused_1 in T.thread_binding(T.int64(224), thread="threadIdx.x"):
                                with T.block("data_pack_shared"):
                                    v0 = T.axis.spatial(T.int64(6), (ax0_ax1_ax2_ax3_fused_0 * T.int64(224) + ax0_ax1_ax2_ax3_fused_1) // T.int64(392))
                                    v1 = T.axis.spatial(T.int64(6), eps_0_nu_0_co_0_p_0_fused // T.int64(4) * T.int64(2) + (ax0_ax1_ax2_ax3_fused_0 * T.int64(224) + ax0_ax1_ax2_ax3_fused_1) % T.int64(392) // T.int64(196))
                                    v2 = T.axis.spatial(T.int64(64), ci_0_fused)
                                    v3 = T.axis.spatial(T.int64(784), eps_0_nu_0_co_0_p_0_fused % T.int64(4) * T.int64(196) + (ax0_ax1_ax2_ax3_fused_0 * T.int64(224) + ax0_ax1_ax2_ax3_fused_1) % T.int64(196))
                                    T.where(ax0_ax1_ax2_ax3_fused_0 * T.int64(224) + ax0_ax1_ax2_ax3_fused_1 < T.int64(2352))
                                    T.reads(data_pack[v0, v1, v2, v3])
                                    T.writes(data_pack_shared[v0, v1, v2, v3])
                                    data_pack_shared[v0, v1, v2, v3] = data_pack[v0, v1, v2, v3]
                        for ax0_ax1_ax2_ax3_fused_0 in range(T.int64(4)):
                            for ax0_ax1_ax2_ax3_fused_1 in T.thread_binding(T.int64(224), thread="threadIdx.x"):
                                for ax0_ax1_ax2_ax3_fused_2 in T.vectorized(T.int64(2)):
                                    with T.block("p1_shared"):
                                        v0 = T.axis.spatial(T.int64(6), (ax0_ax1_ax2_ax3_fused_0 * T.int64(448) + ax0_ax1_ax2_ax3_fused_1 * T.int64(2) + ax0_ax1_ax2_ax3_fused_2) // T.int64(256))
                                        v1 = T.axis.spatial(T.int64(6), eps_0_nu_0_co_0_p_0_fused // T.int64(4) * T.int64(2) + (ax0_ax1_ax2_ax3_fused_0 * T.int64(448) + ax0_ax1_ax2_ax3_fused_1 * T.int64(2) + ax0_ax1_ax2_ax3_fused_2) % T.int64(256) // T.int64(128))
                                        v2 = T.axis.spatial(T.int64(64), ci_0_fused)
                                        v3 = T.axis.spatial(T.int64(128), (ax0_ax1_ax2_ax3_fused_0 * T.int64(448) + ax0_ax1_ax2_ax3_fused_1 * T.int64(2) + ax0_ax1_ax2_ax3_fused_2) % T.int64(128))
                                        T.where((ax0_ax1_ax2_ax3_fused_0 * T.int64(224) + ax0_ax1_ax2_ax3_fused_1) * T.int64(2) + ax0_ax1_ax2_ax3_fused_2 < T.int64(1536))
                                        T.reads(p1[v0, v1, v2, v3])
                                        T.writes(p1_shared[v0, v1, v2, v3])
                                        p1_shared[v0, v1, v2, v3] = p1[v0, v1, v2, v3]
                        for ci_1, eps_3, nu_3, co_3, p_3, ci_2, eps_4, nu_4, co_4, p_4 in T.grid(T.int64(1), T.int64(2), T.int64(1), T.int64(2), T.int64(2), T.int64(1), T.int64(3), T.int64(1), T.int64(4), T.int64(14)):
                            with T.block("bgemm_update"):
                                v_eps = T.axis.spatial(T.int64(6), eps_3 * T.int64(3) + eps_4)
                                v_nu = T.axis.spatial(T.int64(6), eps_0_nu_0_co_0_p_0_fused // T.int64(4) * T.int64(2) + eps_2_nu_2_co_2_p_2_fused // T.int64(112) + nu_3 + nu_4)
                                v_co = T.axis.spatial(T.int64(128), eps_2_nu_2_co_2_p_2_fused % T.int64(112) // T.int64(7) * T.int64(8) + co_3 * T.int64(4) + co_4)
                                v_p = T.axis.spatial(T.int64(784), eps_0_nu_0_co_0_p_0_fused % T.int64(4) * T.int64(196) + eps_2_nu_2_co_2_p_2_fused % T.int64(7) * T.int64(28) + p_3 * T.int64(14) + p_4)
                                v_ci = T.axis.reduce(T.int64(64), ci_0_fused + ci_1 + ci_2)
                                T.reads(bgemm_local[v_eps, v_nu, v_co, v_p], data_pack_shared[v_eps, v_nu, v_ci, v_p], p1_shared[v_eps, v_nu, v_ci, v_co])
                                T.writes(bgemm_local[v_eps, v_nu, v_co, v_p])
                                T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 32, "meta_schedule.tiling_structure": "SSSRRSRS"})
                                bgemm_local[v_eps, v_nu, v_co, v_p] = bgemm_local[v_eps, v_nu, v_co, v_p] + data_pack_shared[v_eps, v_nu, v_ci, v_p] * p1_shared[v_eps, v_nu, v_ci, v_co]
                    for ax0, ax1, ax2, ax3 in T.grid(T.int64(6), T.int64(1), T.int64(8), T.int64(28)):
                        with T.block("bgemm_local"):
                            v0 = T.axis.spatial(T.int64(6), ax0)
                            v1 = T.axis.spatial(T.int64(6), eps_0_nu_0_co_0_p_0_fused // T.int64(4) * T.int64(2) + eps_2_nu_2_co_2_p_2_fused // T.int64(112) + ax1)
                            v2 = T.axis.spatial(T.int64(128), eps_2_nu_2_co_2_p_2_fused % T.int64(112) // T.int64(7) * T.int64(8) + ax2)
                            v3 = T.axis.spatial(T.int64(784), eps_0_nu_0_co_0_p_0_fused % T.int64(4) * T.int64(196) + eps_2_nu_2_co_2_p_2_fused % T.int64(7) * T.int64(28) + ax3)
                            T.reads(bgemm_local[v0, v1, v2, v3])
                            T.writes(bgemm[v0, v1, v2, v3])
                            bgemm[v0, v1, v2, v3] = bgemm_local[v0, v1, v2, v3]
        for n_co_h_0_w_0_fused_0 in T.thread_binding(T.int64(1568), thread="blockIdx.x", annotations={"pragma_auto_unroll_max_step": 1024, "pragma_unroll_explicit": 1}):
            for n_co_h_0_w_0_fused_1 in T.thread_binding(T.int64(64), thread="threadIdx.x"):
                for ax0, ax1 in T.grid(T.int64(1), T.int64(1)):
                    for ax2 in T.unroll(T.int64(4)):
                        for ax3 in T.unroll(T.int64(4)):
                            with T.block("inverse_init"):
                                v_co = T.axis.spatial(T.int64(128), (n_co_h_0_w_0_fused_0 * T.int64(64) + n_co_h_0_w_0_fused_1) // T.int64(784) + ax0)
                                v_p = T.axis.spatial(T.int64(784), (n_co_h_0_w_0_fused_0 * T.int64(64) + n_co_h_0_w_0_fused_1) % T.int64(784) + ax1)
                                v_vh, v_vw = T.axis.remap("SS", [ax2, ax3])
                                T.reads()
                                T.writes(inverse_local[v_co, v_p, v_vh, v_vw])
                                T.block_attr({"schedule_rule": "conv2d_nchw_winograd_inverse"})
                                inverse_local[v_co, v_p, v_vh, v_vw] = T.float32(0)
                            for ax4 in T.unroll(T.int64(6)):
                                for ax5 in T.unroll(T.int64(6)):
                                    with T.block("inverse_update"):
                                        v_co = T.axis.spatial(T.int64(128), (n_co_h_0_w_0_fused_0 * T.int64(64) + n_co_h_0_w_0_fused_1) // T.int64(784) + ax0)
                                        v_p = T.axis.spatial(T.int64(784), (n_co_h_0_w_0_fused_0 * T.int64(64) + n_co_h_0_w_0_fused_1) % T.int64(784) + ax1)
                                        v_vh, v_vw, v_r_a, v_r_b = T.axis.remap("SSRR", [ax2, ax3, ax4, ax5])
                                        T.reads(inverse_local[v_co, v_p, v_vh, v_vw], bgemm[v_r_a, v_r_b, v_co, v_p])
                                        T.writes(inverse_local[v_co, v_p, v_vh, v_vw])
                                        T.block_attr({"schedule_rule": "conv2d_nchw_winograd_inverse"})
                                        inverse_local[v_co, v_p, v_vh, v_vw] = inverse_local[v_co, v_p, v_vh, v_vw] + bgemm[v_r_a, v_r_b, v_co, v_p] * T.Select(v_r_a % T.int64(6) == T.int64(5) and v_vh % T.int64(4) == T.int64(3), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(5) and v_vh % T.int64(4) == T.int64(2), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(5) and v_vh % T.int64(4) == T.int64(1), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(5) and v_vh % T.int64(4) == T.int64(0), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(4) and v_vh % T.int64(4) == T.int64(3), T.float32(-8), T.Select(v_r_a % T.int64(6) == T.int64(4) and v_vh % T.int64(4) == T.int64(2), T.float32(4), T.Select(v_r_a % T.int64(6) == T.int64(4) and v_vh % T.int64(4) == T.int64(1), T.float32(-2), T.Select(v_r_a % T.int64(6) == T.int64(4) and v_vh % T.int64(4) == T.int64(0), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(3) and v_vh % T.int64(4) == T.int64(3), T.float32(0.125), T.Select(v_r_a % T.int64(6) == T.int64(3) and v_vh % T.int64(4) == T.int64(2), T.float32(0.25), T.Select(v_r_a % T.int64(6) == T.int64(3) and v_vh % T.int64(4) == T.int64(1), T.float32(0.5), T.Select(v_r_a % T.int64(6) == T.int64(3) and v_vh % T.int64(4) == T.int64(0), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(2) and v_vh % T.int64(4) == T.int64(3), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(2) and v_vh % T.int64(4) == T.int64(2), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(2) and v_vh % T.int64(4) == T.int64(1), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(2) and v_vh % T.int64(4) == T.int64(0), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(1) and v_vh % T.int64(4) == T.int64(3), T.float32(-1), T.Select(v_r_a % T.int64(6) == T.int64(1) and v_vh % T.int64(4) == T.int64(2), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(1) and v_vh % T.int64(4) == T.int64(1), T.float32(-1), T.Select(v_r_a % T.int64(6) == T.int64(1) and v_vh % T.int64(4) == T.int64(0), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(0) and v_vh % T.int64(4) == T.int64(3), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(0) and v_vh % T.int64(4) == T.int64(2), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(0) and v_vh % T.int64(4) == T.int64(1), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(0) and v_vh % T.int64(4) == T.int64(0), T.float32(1), T.float32(0))))))))))))))))))))))))) * T.Select(v_r_b % T.int64(6) == T.int64(5) and v_vw % T.int64(4) == T.int64(3), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(5) and v_vw % T.int64(4) == T.int64(2), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(5) and v_vw % T.int64(4) == T.int64(1), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(5) and v_vw % T.int64(4) == T.int64(0), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(4) and v_vw % T.int64(4) == T.int64(3), T.float32(-8), T.Select(v_r_b % T.int64(6) == T.int64(4) and v_vw % T.int64(4) == T.int64(2), T.float32(4), T.Select(v_r_b % T.int64(6) == T.int64(4) and v_vw % T.int64(4) == T.int64(1), T.float32(-2), T.Select(v_r_b % T.int64(6) == T.int64(4) and v_vw % T.int64(4) == T.int64(0), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(3) and v_vw % T.int64(4) == T.int64(3), T.float32(0.125), T.Select(v_r_b % T.int64(6) == T.int64(3) and v_vw % T.int64(4) == T.int64(2), T.float32(0.25), T.Select(v_r_b % T.int64(6) == T.int64(3) and v_vw % T.int64(4) == T.int64(1), T.float32(0.5), T.Select(v_r_b % T.int64(6) == T.int64(3) and v_vw % T.int64(4) == T.int64(0), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(2) and v_vw % T.int64(4) == T.int64(3), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(2) and v_vw % T.int64(4) == T.int64(2), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(2) and v_vw % T.int64(4) == T.int64(1), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(2) and v_vw % T.int64(4) == T.int64(0), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(1) and v_vw % T.int64(4) == T.int64(3), T.float32(-1), T.Select(v_r_b % T.int64(6) == T.int64(1) and v_vw % T.int64(4) == T.int64(2), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(1) and v_vw % T.int64(4) == T.int64(1), T.float32(-1), T.Select(v_r_b % T.int64(6) == T.int64(1) and v_vw % T.int64(4) == T.int64(0), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(0) and v_vw % T.int64(4) == T.int64(3), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(0) and v_vw % T.int64(4) == T.int64(2), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(0) and v_vw % T.int64(4) == T.int64(1), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(0) and v_vw % T.int64(4) == T.int64(0), T.float32(1), T.float32(0)))))))))))))))))))))))))
                for h_1, w_1 in T.grid(T.int64(4), T.int64(4)):
                    with T.block("conv2d_winograd"):
                        v_n = T.axis.spatial(T.int64(1), T.int64(0))
                        v_co = T.axis.spatial(T.int64(128), (n_co_h_0_w_0_fused_0 * T.int64(64) + n_co_h_0_w_0_fused_1) // T.int64(784))
                        v_h = T.axis.spatial(T.int64(112), (n_co_h_0_w_0_fused_0 * T.int64(64) + n_co_h_0_w_0_fused_1) % T.int64(784) // T.int64(28) * T.int64(4) + h_1)
                        v_w = T.axis.spatial(T.int64(112), (n_co_h_0_w_0_fused_0 * T.int64(64) + n_co_h_0_w_0_fused_1) % T.int64(28) * T.int64(4) + w_1)
                        T.reads(inverse_local[v_co, v_n * T.int64(784) + v_h // T.int64(4) * T.int64(28) + v_w // T.int64(4), v_h % T.int64(4), v_w % T.int64(4)], p2[v_n, v_co, T.int64(0), T.int64(0)])
                        T.writes(T_relu[v_n, v_co, v_h, v_w])
                        T_relu[v_n, v_co, v_h, v_w] = T.max(inverse_local[v_co, v_n * T.int64(784) + v_h // T.int64(4) * T.int64(28) + v_w // T.int64(4), v_h % T.int64(4), v_w % T.int64(4)] + p2[v_n, v_co, T.int64(0), T.int64(0)], T.float32(0))
b0 = sch.get_block(name="data_pack", func_name="main")
b1 = sch.get_block(name="bgemm", func_name="main")
b2 = sch.get_block(name="inverse", func_name="main")
b3 = sch.get_block(name="conv2d_winograd", func_name="main")
b4 = sch.get_block(name="T_add", func_name="main")
b5 = sch.get_block(name="T_relu", func_name="main")
b6 = sch.get_block(name="root", func_name="main")
b7, b8 = sch.get_producers(block=b2)
sch.compute_inline(block=b8)
b9, = sch.get_consumers(block=b2)
l10, l11, l12, l13 = sch.get_loops(block=b9)
l14, l15 = sch.split(loop=l12, factors=[None, 4], preserve_unit_iters=True)
l16, l17 = sch.split(loop=l13, factors=[None, 4], preserve_unit_iters=True)
sch.reorder(l14, l16, l15, l17)
sch.compute_at(block=b2, loop=l16, preserve_unit_loops=True, index=-1)
sch.set_scope(block=b2, buffer_index=0, storage_scope="local")
l18, l19, l20, l21, l22, l23, l24, l25, l26, l27 = sch.get_loops(block=b2)
sch.unroll(loop=l24)
sch.unroll(loop=l25)
sch.unroll(loop=l26)
sch.unroll(loop=l27)
b28, b29 = sch.get_producers(block=b0)
sch.compute_inline(block=b29)
b30, = sch.get_producers(block=b28)
l31, l32, l33, l34, l35, l36 = sch.get_loops(block=b0)
sch.reorder(l33, l34, l31, l32, l35, l36)
sch.unroll(loop=l31)
sch.unroll(loop=l32)
sch.unroll(loop=l35)
sch.unroll(loop=l36)
l37 = sch.fuse(l33, l34, preserve_unit_iters=True)
v38 = sch.sample_categorical(candidates=[32, 64, 128, 256, 512, 1024], probs=[0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666], decision=5)
l39, l40 = sch.split(loop=l37, factors=[None, v38], preserve_unit_iters=True)
sch.bind(loop=l39, thread_axis="blockIdx.x")
sch.bind(loop=l40, thread_axis="threadIdx.x")
b41 = sch.cache_write(block=b0, write_buffer_index=0, storage_scope="local")
sch.reverse_compute_at(block=b41, loop=l40, preserve_unit_loops=True, index=-1)
sch.compute_at(block=b28, loop=l40, preserve_unit_loops=True, index=-1)
sch.set_scope(block=b28, buffer_index=0, storage_scope="local")
sch.compute_inline(block=b30)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSSRRSRS")
l42, l43, l44, l45, l46 = sch.get_loops(block=b1)
v47, v48, v49, v50, v51 = sch.sample_perfect_tile(loop=l42, n=5, max_innermost_factor=64, decision=[1, 1, 1, 2, 3])
l52, l53, l54, l55, l56 = sch.split(loop=l42, factors=[v47, v48, v49, v50, v51], preserve_unit_iters=True)
v57, v58, v59, v60, v61 = sch.sample_perfect_tile(loop=l43, n=5, max_innermost_factor=64, decision=[3, 1, 2, 1, 1])
l62, l63, l64, l65, l66 = sch.split(loop=l43, factors=[v57, v58, v59, v60, v61], preserve_unit_iters=True)
v67, v68, v69, v70, v71 = sch.sample_perfect_tile(loop=l44, n=5, max_innermost_factor=64, decision=[1, 1, 16, 2, 4])
l72, l73, l74, l75, l76 = sch.split(loop=l44, factors=[v67, v68, v69, v70, v71], preserve_unit_iters=True)
v77, v78, v79, v80, v81 = sch.sample_perfect_tile(loop=l45, n=5, max_innermost_factor=64, decision=[4, 1, 7, 2, 14])
l82, l83, l84, l85, l86 = sch.split(loop=l45, factors=[v77, v78, v79, v80, v81], preserve_unit_iters=True)
v87, v88, v89 = sch.sample_perfect_tile(loop=l46, n=3, max_innermost_factor=64, decision=[64, 1, 1])
l90, l91, l92 = sch.split(loop=l46, factors=[v87, v88, v89], preserve_unit_iters=True)
sch.reorder(l52, l62, l72, l82, l53, l63, l73, l83, l54, l64, l74, l84, l90, l91, l55, l65, l75, l85, l92, l56, l66, l76, l86)
l93 = sch.fuse(l52, l62, l72, l82, preserve_unit_iters=True)
sch.bind(loop=l93, thread_axis="blockIdx.x")
l94 = sch.fuse(l53, l63, l73, l83, preserve_unit_iters=True)
sch.bind(loop=l94, thread_axis="vthread.x")
l95 = sch.fuse(l54, l64, l74, l84, preserve_unit_iters=True)
sch.bind(loop=l95, thread_axis="threadIdx.x")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_low_inclusive", ann_val=32)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_high_inclusive", ann_val=1024)
b96 = sch.cache_write(block=b1, write_buffer_index=0, storage_scope="local")
sch.reverse_compute_at(block=b96, loop=l95, preserve_unit_loops=True, index=-1)
b97 = sch.cache_read(block=b1, read_buffer_index=0, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b97, loop=l90, preserve_unit_loops=True, index=-1)
l98, l99, l100, l101, l102, l103, l104, l105 = sch.get_loops(block=b97)
l106 = sch.fuse(l102, l103, l104, l105, preserve_unit_iters=True)
v107 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=0)
sch.annotate(block_or_loop=b97, ann_key="meta_schedule.cooperative_fetch", ann_val=v107)
b108 = sch.cache_read(block=b1, read_buffer_index=1, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b108, loop=l90, preserve_unit_loops=True, index=-1)
l109, l110, l111, l112, l113, l114, l115, l116 = sch.get_loops(block=b108)
l117 = sch.fuse(l113, l114, l115, l116, preserve_unit_iters=True)
v118 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=1)
sch.annotate(block_or_loop=b108, ann_key="meta_schedule.cooperative_fetch", ann_val=v118)
l119 = sch.fuse(l90, preserve_unit_iters=True)
sch.annotate(block_or_loop=l119, ann_key="software_pipeline_stage", ann_val=[0, 0, 2])
sch.annotate(block_or_loop=l119, ann_key="software_pipeline_order", ann_val=[0, 1, 2])
sch.annotate(block_or_loop=l119, ann_key="software_pipeline_async_stages", ann_val=[0])
sch.reverse_compute_inline(block=b5)
sch.reverse_compute_inline(block=b4)
v120 = sch.sample_categorical(candidates=[0, 16, 64, 512, 1024], probs=[0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001], decision=4)
sch.annotate(block_or_loop=b6, ann_key="meta_schedule.unroll_explicit", ann_val=v120)
l121, l122, l123, l124, l125, l126 = sch.get_loops(block=b3)
l127 = sch.fuse(l121, l122, l123, l124, preserve_unit_iters=True)
v128 = sch.sample_categorical(candidates=[32, 64, 128, 256, 512, 1024], probs=[0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666], decision=1)
l129, l130 = sch.split(loop=l127, factors=[None, v128], preserve_unit_iters=True)
sch.bind(loop=l129, thread_axis="blockIdx.x")
sch.bind(loop=l130, thread_axis="threadIdx.x")
sch.enter_postproc()
sch.unannotate(block_or_loop=b97, ann_key="meta_schedule.cooperative_fetch")
l131, l132, l133, l134, l135 = sch.get_loops(block=b97)
l136, l137 = sch.split(loop=l135, factors=[None, 224], preserve_unit_iters=True)
sch.bind(loop=l137, thread_axis="threadIdx.x")
sch.unannotate(block_or_loop=b108, ann_key="meta_schedule.cooperative_fetch")
l138, l139, l140, l141, l142 = sch.get_loops(block=b108)
l143, l144, l145 = sch.split(loop=l142, factors=[None, 224, 2], preserve_unit_iters=True)
sch.vectorize(loop=l145)
sch.bind(loop=l144, thread_axis="threadIdx.x")
b146 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b146, ann_key="meta_schedule.unroll_explicit")
b147, b148, b149, b150, b151, b152, b153, b154, b155 = sch.get_child_blocks(b146)
l156, l157, l158, l159, l160, l161 = sch.get_loops(block=b147)
l162, l163, l164, l165, l166, l167 = sch.get_loops(block=b148)
sch.annotate(block_or_loop=l162, ann_key="pragma_auto_unroll_max_step", ann_val=1024)
sch.annotate(block_or_loop=l162, ann_key="pragma_unroll_explicit", ann_val=1)
l168, l169, l170, l171, l172, l173 = sch.get_loops(block=b149)
l174, l175, l176, l177, l178, l179 = sch.get_loops(block=b150)
l180, l181, l182, l183, l184, l185, l186 = sch.get_loops(block=b151)
l187, l188, l189, l190, l191, l192, l193, l194, l195, l196, l197, l198, l199, l200 = sch.get_loops(block=b152)
sch.annotate(block_or_loop=l187, ann_key="pragma_auto_unroll_max_step", ann_val=1024)
sch.annotate(block_or_loop=l187, ann_key="pragma_unroll_explicit", ann_val=1)
l201, l202, l203, l204, l205, l206, l207 = sch.get_loops(block=b153)
l208, l209, l210, l211, l212, l213, l214, l215 = sch.get_loops(block=b154)
sch.annotate(block_or_loop=l208, ann_key="pragma_auto_unroll_max_step", ann_val=1024)
sch.annotate(block_or_loop=l208, ann_key="pragma_unroll_explicit", ann_val=1)
l216, l217, l218, l219 = sch.get_loops(block=b155)
b220 = sch.get_block(name="data_pack", func_name="main")
l221, l222, l223, l224, l225, l226 = sch.get_loops(block=b220)
b227 = sch.decompose_reduction(block=b220, loop=l225)
b228 = sch.get_block(name="bgemm", func_name="main")
l229, l230, l231, l232, l233, l234, l235, l236, l237, l238, l239, l240, l241, l242 = sch.get_loops(block=b228)
b243 = sch.decompose_reduction(block=b228, loop=l232)
b244 = sch.get_block(name="inverse", func_name="main")
l245, l246, l247, l248, l249, l250, l251, l252 = sch.get_loops(block=b244)
b253 = sch.decompose_reduction(block=b244, loop=l251)
2024-04-28 20:23:59 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #2: GFLOPs: 2213.1972. Time: 376.8873 us. Best GFLOPs: 2213.1972
2024-04-28 20:23:59 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #3: GFLOPs: 165.8339. Time: 5029.8881 us. Best GFLOPs: 2213.1972
2024-04-28 20:23:59 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #4: GFLOPs: 22.0830. Time: 37772.2880 us. Best GFLOPs: 2213.1972
2024-04-28 20:23:59 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #5: GFLOPs: 211.2914. Time: 3947.7505 us. Best GFLOPs: 2213.1972
2024-04-28 20:23:59 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #6: GFLOPs: 242.7416. Time: 3436.2709 us. Best GFLOPs: 2213.1972
2024-04-28 20:23:59 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #7: GFLOPs: 1003.3563. Time: 831.3356 us. Best GFLOPs: 2213.1972
2024-04-28 20:23:59 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #8: GFLOPs: 9.8683. Time: 84525.3957 us. Best GFLOPs: 2213.1972
2024-04-28 20:23:59 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #9: GFLOPs: 140.4712. Time: 5938.0556 us. Best GFLOPs: 2213.1972
2024-04-28 20:23:59 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #10: GFLOPs: 3356.0721. Time: 248.5423 us. Best GFLOPs: 3356.0721
2024-04-28 20:23:59 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #11: GFLOPs: 1658.3693. Time: 502.9795 us. Best GFLOPs: 3356.0721
2024-04-28 20:23:59 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #12: GFLOPs: 81.8785. Time: 10187.3664 us. Best GFLOPs: 3356.0721
2024-04-28 20:23:59 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #13: GFLOPs: 568.0886. Time: 1468.3023 us. Best GFLOPs: 3356.0721
2024-04-28 20:23:59 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #14: GFLOPs: 512.1353. Time: 1628.7215 us. Best GFLOPs: 3356.0721
2024-04-28 20:23:59 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #15: GFLOPs: 263.3862. Time: 3166.9309 us. Best GFLOPs: 3356.0721
2024-04-28 20:23:59 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #16: GFLOPs: 5964.4600. Time: 139.8493 us. Best GFLOPs: 5964.4600
2024-04-28 20:23:59 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #17: GFLOPs: 4252.8233. Time: 196.1346 us. Best GFLOPs: 5964.4600
2024-04-28 20:23:59 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #18: GFLOPs: 8099.6167. Time: 102.9834 us. Best GFLOPs: 8099.6167
2024-04-28 20:23:59 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #19: GFLOPs: 6573.2260. Time: 126.8975 us. Best GFLOPs: 8099.6167
2024-04-28 20:23:59 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #20: GFLOPs: 186.4204. Time: 4474.4349 us. Best GFLOPs: 8099.6167
2024-04-28 20:23:59 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #21: GFLOPs: 3065.9618. Time: 272.0601 us. Best GFLOPs: 8099.6167
2024-04-28 20:23:59 [INFO] [task_scheduler.cc:121] [Task #2: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #22: Error in building:
LocalBuilder: Timeout, killed after 30.0 seconds
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(64), T.int64(112), T.int64(112)), "float32"), p1: T.Buffer((T.int64(6), T.int64(6), T.int64(64), T.int64(128)), "float32"), p2: T.Buffer((T.int64(1), T.int64(128), T.int64(1), T.int64(1)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(128), T.int64(112), T.int64(112)), "float32")):
        T.func_attr({"layout_free_buffers": [1], "tir.noalias": T.bool(True)})
        # with T.block("root"):
        input_tile_local = T.alloc_buffer((T.int64(64), T.int64(784), T.int64(6), T.int64(6)), scope="local")
        data_pack = T.alloc_buffer((T.int64(6), T.int64(6), T.int64(64), T.int64(784)))
        bgemm = T.alloc_buffer((T.int64(6), T.int64(6), T.int64(128), T.int64(784)))
        inverse_local = T.alloc_buffer((T.int64(128), T.int64(784), T.int64(4), T.int64(4)), scope="local")
        data_pack_local = T.alloc_buffer((T.int64(6), T.int64(6), T.int64(64), T.int64(784)), scope="local")
        bgemm_local = T.alloc_buffer((T.int64(6), T.int64(6), T.int64(128), T.int64(784)), scope="local")
        data_pack_shared = T.alloc_buffer((T.int64(6), T.int64(6), T.int64(64), T.int64(784)), scope="shared")
        p1_shared = T.alloc_buffer((T.int64(6), T.int64(6), T.int64(64), T.int64(128)), scope="shared")
        for ci_p_fused_0 in T.thread_binding(T.int64(49), thread="blockIdx.x", annotations={"pragma_auto_unroll_max_step": 512, "pragma_unroll_explicit": 1}):
            for ci_p_fused_1 in T.thread_binding(T.int64(1024), thread="threadIdx.x"):
                for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(1), T.int64(6), T.int64(6)):
                    with T.block("input_tile"):
                        v_ci = T.axis.spatial(T.int64(64), (ci_p_fused_0 * T.int64(1024) + ci_p_fused_1) // T.int64(784) + ax0)
                        v_p = T.axis.spatial(T.int64(784), (ci_p_fused_0 * T.int64(240) + ci_p_fused_1) % T.int64(784) + ax1)
                        v_eps, v_nu = T.axis.remap("SS", [ax2, ax3])
                        T.reads(p0[v_p // T.int64(784), v_ci, v_p % T.int64(784) // T.int64(28) * T.int64(4) + v_eps - T.int64(1), v_p % T.int64(28) * T.int64(4) + v_nu - T.int64(1)])
                        T.writes(input_tile_local[v_ci, v_p, v_eps, v_nu])
                        T.block_attr({"schedule_rule": "None"})
                        input_tile_local[v_ci, v_p, v_eps, v_nu] = T.if_then_else(T.int64(1) <= v_p % T.int64(784) // T.int64(28) * T.int64(4) + v_eps and v_p % T.int64(784) // T.int64(28) * T.int64(4) + v_eps < T.int64(113) and T.int64(1) <= v_p % T.int64(28) * T.int64(4) + v_nu and v_p % T.int64(28) * T.int64(4) + v_nu < T.int64(113), p0[v_p // T.int64(784), v_ci, v_p % T.int64(784) // T.int64(28) * T.int64(4) + v_eps - T.int64(1), v_p % T.int64(28) * T.int64(4) + v_nu - T.int64(1)], T.float32(0))
                for eps in T.unroll(T.int64(6)):
                    for nu in T.unroll(T.int64(6)):
                        with T.block("data_pack_init"):
                            v_eps, v_nu = T.axis.remap("SS", [eps, nu])
                            v_ci = T.axis.spatial(T.int64(64), (ci_p_fused_0 * T.int64(1024) + ci_p_fused_1) // T.int64(784))
                            v_p = T.axis.spatial(T.int64(784), (ci_p_fused_0 * T.int64(1024) + ci_p_fused_1) % T.int64(784))
                            T.reads()
                            T.writes(data_pack_local[v_eps, v_nu, v_ci, v_p])
                            T.block_attr({"schedule_rule": "conv2d_nchw_winograd_data_pack"})
                            data_pack_local[v_eps, v_nu, v_ci, v_p] = T.float32(0)
                        for r_a in T.unroll(T.int64(6)):
                            for r_b in T.unroll(T.int64(6)):
                                with T.block("data_pack_update"):
                                    v_eps, v_nu = T.axis.remap("SS", [eps, nu])
                                    v_ci = T.axis.spatial(T.int64(64), (ci_p_fused_0 * T.int64(1024) + ci_p_fused_1) // T.int64(784))
                                    v_p = T.axis.spatial(T.int64(784), (ci_p_fused_0 * T.int64(1024) + ci_p_fused_1) % T.int64(784))
                                    v_r_a, v_r_b = T.axis.remap("RR", [r_a, r_b])
                                    T.reads(data_pack_local[v_eps, v_nu, v_ci, v_p], input_tile_local[v_ci, v_p, v_r_a, v_r_b])
                                    T.writes(data_pack_local[v_eps, v_nu, v_ci, v_p])
                                    T.block_attr({"schedule_rule": "conv2d_nchw_winograd_data_pack"})
                                    data_pack_local[v_eps, v_nu, v_ci, v_p] = data_pack_local[v_eps, v_nu, v_ci, v_p] + input_tile_local[v_ci, v_p, v_r_a, v_r_b] * T.Select(v_r_a % T.int64(6) == T.int64(5) and v_eps % T.int64(6) == T.int64(5), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(5) and v_eps % T.int64(6) == T.int64(4), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(5) and v_eps % T.int64(6) == T.int64(3), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(5) and v_eps % T.int64(6) == T.int64(2), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(5) and v_eps % T.int64(6) == T.int64(1), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(5) and v_eps % T.int64(6) == T.int64(0), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(4) and v_eps % T.int64(6) == T.int64(5), T.float32(1.5), T.Select(v_r_a % T.int64(6) == T.int64(4) and v_eps % T.int64(6) == T.int64(4), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(4) and v_eps % T.int64(6) == T.int64(3), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(4) and v_eps % T.int64(6) == T.int64(2), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(4) and v_eps % T.int64(6) == T.int64(1), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(4) and v_eps % T.int64(6) == T.int64(0), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(3) and v_eps % T.int64(6) == T.int64(5), T.float32(-2), T.Select(v_r_a % T.int64(6) == T.int64(3) and v_eps % T.int64(6) == T.int64(4), T.float32(-0.5), T.Select(v_r_a % T.int64(6) == T.int64(3) and v_eps % T.int64(6) == T.int64(3), T.float32(2), T.Select(v_r_a % T.int64(6) == T.int64(3) and v_eps % T.int64(6) == T.int64(2), T.float32(2.5), T.Select(v_r_a % T.int64(6) == T.int64(3) and v_eps % T.int64(6) == T.int64(1), T.float32(0.5), T.Select(v_r_a % T.int64(6) == T.int64(3) and v_eps % T.int64(6) == T.int64(0), T.float32(1.5), T.Select(v_r_a % T.int64(6) == T.int64(2) and v_eps % T.int64(6) == T.int64(5), T.float32(-1.5), T.Select(v_r_a % T.int64(6) == T.int64(2) and v_eps % T.int64(6) == T.int64(4), T.float32(-1), T.Select(v_r_a % T.int64(6) == T.int64(2) and v_eps % T.int64(6) == T.int64(3), T.float32(-1), T.Select(v_r_a % T.int64(6) == T.int64(2) and v_eps % T.int64(6) == T.int64(2), T.float32(0.5), T.Select(v_r_a % T.int64(6) == T.int64(2) and v_eps % T.int64(6) == T.int64(1), T.float32(-2.5), T.Select(v_r_a % T.int64(6) == T.int64(2) and v_eps % T.int64(6) == T.int64(0), T.float32(-2), T.Select(v_r_a % T.int64(6) == T.int64(1) and v_eps % T.int64(6) == T.int64(5), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(1) and v_eps % T.int64(6) == T.int64(4), T.float32(0.5), T.Select(v_r_a % T.int64(6) == T.int64(1) and v_eps % T.int64(6) == T.int64(3), T.float32(-2), T.Select(v_r_a % T.int64(6) == T.int64(1) and v_eps % T.int64(6) == T.int64(2), T.float32(-1), T.Select(v_r_a % T.int64(6) == T.int64(1) and v_eps % T.int64(6) == T.int64(1), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(1) and v_eps % T.int64(6) == T.int64(0), T.float32(-1.5), T.Select(v_r_a % T.int64(6) == T.int64(0) and v_eps % T.int64(6) == T.int64(5), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(0) and v_eps % T.int64(6) == T.int64(4), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(0) and v_eps % T.int64(6) == T.int64(3), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(0) and v_eps % T.int64(6) == T.int64(2), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(0) and v_eps % T.int64(6) == T.int64(1), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(0) and v_eps % T.int64(6) == T.int64(0), T.float32(1), T.float32(0))))))))))))))))))))))))))))))))))))) * T.Select(v_r_b % T.int64(6) == T.int64(5) and v_nu % T.int64(6) == T.int64(5), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(5) and v_nu % T.int64(6) == T.int64(4), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(5) and v_nu % T.int64(6) == T.int64(3), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(5) and v_nu % T.int64(6) == T.int64(2), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(5) and v_nu % T.int64(6) == T.int64(1), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(5) and v_nu % T.int64(6) == T.int64(0), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(4) and v_nu % T.int64(6) == T.int64(5), T.float32(1.5), T.Select(v_r_b % T.int64(6) == T.int64(4) and v_nu % T.int64(6) == T.int64(4), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(4) and v_nu % T.int64(6) == T.int64(3), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(4) and v_nu % T.int64(6) == T.int64(2), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(4) and v_nu % T.int64(6) == T.int64(1), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(4) and v_nu % T.int64(6) == T.int64(0), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(3) and v_nu % T.int64(6) == T.int64(5), T.float32(-2), T.Select(v_r_b % T.int64(6) == T.int64(3) and v_nu % T.int64(6) == T.int64(4), T.float32(-0.5), T.Select(v_r_b % T.int64(6) == T.int64(3) and v_nu % T.int64(6) == T.int64(3), T.float32(2), T.Select(v_r_b % T.int64(6) == T.int64(3) and v_nu % T.int64(6) == T.int64(2), T.float32(2.5), T.Select(v_r_b % T.int64(6) == T.int64(3) and v_nu % T.int64(6) == T.int64(1), T.float32(0.5), T.Select(v_r_b % T.int64(6) == T.int64(3) and v_nu % T.int64(6) == T.int64(0), T.float32(1.5), T.Select(v_r_b % T.int64(6) == T.int64(2) and v_nu % T.int64(6) == T.int64(5), T.float32(-1.5), T.Select(v_r_b % T.int64(6) == T.int64(2) and v_nu % T.int64(6) == T.int64(4), T.float32(-1), T.Select(v_r_b % T.int64(6) == T.int64(2) and v_nu % T.int64(6) == T.int64(3), T.float32(-1), T.Select(v_r_b % T.int64(6) == T.int64(2) and v_nu % T.int64(6) == T.int64(2), T.float32(0.5), T.Select(v_r_b % T.int64(6) == T.int64(2) and v_nu % T.int64(6) == T.int64(1), T.float32(-2.5), T.Select(v_r_b % T.int64(6) == T.int64(2) and v_nu % T.int64(6) == T.int64(0), T.float32(-2), T.Select(v_r_b % T.int64(6) == T.int64(1) and v_nu % T.int64(6) == T.int64(5), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(1) and v_nu % T.int64(6) == T.int64(4), T.float32(0.5), T.Select(v_r_b % T.int64(6) == T.int64(1) and v_nu % T.int64(6) == T.int64(3), T.float32(-2), T.Select(v_r_b % T.int64(6) == T.int64(1) and v_nu % T.int64(6) == T.int64(2), T.float32(-1), T.Select(v_r_b % T.int64(6) == T.int64(1) and v_nu % T.int64(6) == T.int64(1), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(1) and v_nu % T.int64(6) == T.int64(0), T.float32(-1.5), T.Select(v_r_b % T.int64(6) == T.int64(0) and v_nu % T.int64(6) == T.int64(5), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(0) and v_nu % T.int64(6) == T.int64(4), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(0) and v_nu % T.int64(6) == T.int64(3), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(0) and v_nu % T.int64(6) == T.int64(2), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(0) and v_nu % T.int64(6) == T.int64(1), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(0) and v_nu % T.int64(6) == T.int64(0), T.float32(1), T.float32(0)))))))))))))))))))))))))))))))))))))
                for ax0, ax1, ax2, ax3 in T.grid(T.int64(6), T.int64(6), T.int64(1), T.int64(1)):
                    with T.block("data_pack_local"):
                        v0, v1 = T.axis.remap("SS", [ax0, ax1])
                        v2 = T.axis.spatial(T.int64(64), (ci_p_fused_0 * T.int64(1024) + ci_p_fused_1) // T.int64(784) + ax2)
                        v3 = T.axis.spatial(T.int64(784), (ci_p_fused_0 * T.int64(240) + ci_p_fused_1) % T.int64(784) + ax3)
                        T.reads(data_pack_local[v0, v1, v2, v3])
                        T.writes(data_pack[v0, v1, v2, v3])
                        data_pack[v0, v1, v2, v3] = data_pack_local[v0, v1, v2, v3]
        for eps_0_nu_0_co_0_p_0_fused in T.thread_binding(T.int64(12), thread="blockIdx.x", annotations={"pragma_auto_unroll_max_step": 512, "pragma_unroll_explicit": 1}):
            for eps_1_nu_1_co_1_p_1_fused in T.thread_binding(T.int64(4), thread="vthread.x"):
                for eps_2_nu_2_co_2_p_2_fused in T.thread_binding(T.int64(224), thread="threadIdx.x"):
                    for eps_3_init, nu_3_init, co_3_init, p_3_init, eps_4_init, nu_4_init, co_4_init, p_4_init in T.grid(T.int64(2), T.int64(1), T.int64(2), T.int64(2), T.int64(3), T.int64(1), T.int64(1), T.int64(14)):
                        with T.block("bgemm_init"):
                            v_eps = T.axis.spatial(T.int64(6), eps_3_init * T.int64(3) + eps_4_init)
                            v_nu = T.axis.spatial(T.int64(6), eps_0_nu_0_co_0_p_0_fused // T.int64(4) * T.int64(2) + eps_2_nu_2_co_2_p_2_fused // T.int64(112) + nu_3_init + nu_4_init)
                            v_co = T.axis.spatial(T.int64(128), eps_1_nu_1_co_1_p_1_fused * T.int64(32) + eps_2_nu_2_co_2_p_2_fused % T.int64(112) // T.int64(7) * T.int64(2) + co_3_init + co_4_init)
                            v_p = T.axis.spatial(T.int64(784), eps_0_nu_0_co_0_p_0_fused % T.int64(4) * T.int64(196) + eps_2_nu_2_co_2_p_2_fused % T.int64(7) * T.int64(28) + p_3_init * T.int64(14) + p_4_init)
                            T.reads()
                            T.writes(bgemm_local[v_eps, v_nu, v_co, v_p])
                            T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 32, "meta_schedule.tiling_structure": "SSSRRSRS"})
                            bgemm_local[v_eps, v_nu, v_co, v_p] = T.float32(0)
                    for ci_0_fused in T.serial(T.int64(64), annotations={"software_pipeline_async_stages": [0], "software_pipeline_order": [0, 1, 2], "software_pipeline_stage": [0, 0, 2]}):
                        for ax0_ax1_ax2_ax3_fused_0 in range(T.int64(11)):
                            for ax0_ax1_ax2_ax3_fused_1 in T.thread_binding(T.int64(224), thread="threadIdx.x"):
                                with T.block("data_pack_shared"):
                                    v0 = T.axis.spatial(T.int64(6), (ax0_ax1_ax2_ax3_fused_0 * T.int64(224) + ax0_ax1_ax2_ax3_fused_1) // T.int64(392))
                                    v1 = T.axis.spatial(T.int64(6), eps_0_nu_0_co_0_p_0_fused // T.int64(4) * T.int64(2) + (ax0_ax1_ax2_ax3_fused_0 * T.int64(224) + ax0_ax1_ax2_ax3_fused_1) % T.int64(392) // T.int64(196))
                                    v2 = T.axis.spatial(T.int64(64), ci_0_fused)
                                    v3 = T.axis.spatial(T.int64(784), eps_0_nu_0_co_0_p_0_fused % T.int64(4) * T.int64(196) + (ax0_ax1_ax2_ax3_fused_0 * T.int64(224) + ax0_ax1_ax2_ax3_fused_1) % T.int64(196))
                                    T.where(ax0_ax1_ax2_ax3_fused_0 * T.int64(224) + ax0_ax1_ax2_ax3_fused_1 < T.int64(2352))
                                    T.reads(data_pack[v0, v1, v2, v3])
                                    T.writes(data_pack_shared[v0, v1, v2, v3])
                                    data_pack_shared[v0, v1, v2, v3] = data_pack[v0, v1, v2, v3]
                        for ax0_ax1_ax2_ax3_fused_0 in range(T.int64(2)):
                            for ax0_ax1_ax2_ax3_fused_1 in T.thread_binding(T.int64(224), thread="threadIdx.x"):
                                for ax0_ax1_ax2_ax3_fused_2 in T.vectorized(T.int64(4)):
                                    with T.block("p1_shared"):
                                        v0 = T.axis.spatial(T.int64(6), (ax0_ax1_ax2_ax3_fused_0 * T.int64(896) + ax0_ax1_ax2_ax3_fused_1 * T.int64(4) + ax0_ax1_ax2_ax3_fused_2) // T.int64(256))
                                        v1 = T.axis.spatial(T.int64(6), eps_0_nu_0_co_0_p_0_fused // T.int64(4) * T.int64(2) + (ax0_ax1_ax2_ax3_fused_0 * T.int64(896) + ax0_ax1_ax2_ax3_fused_1 * T.int64(4) + ax0_ax1_ax2_ax3_fused_2) % T.int64(256) // T.int64(128))
                                        v2 = T.axis.spatial(T.int64(64), ci_0_fused)
                                        v3 = T.axis.spatial(T.int64(128), (ax0_ax1_ax2_ax3_fused_0 * T.int64(896) + ax0_ax1_ax2_ax3_fused_1 * T.int64(4) + ax0_ax1_ax2_ax3_fused_2) % T.int64(128))
                                        T.where((ax0_ax1_ax2_ax3_fused_0 * T.int64(224) + ax0_ax1_ax2_ax3_fused_1) * T.int64(4) + ax0_ax1_ax2_ax3_fused_2 < T.int64(1536))
                                        T.reads(p1[v0, v1, v2, v3])
                                        T.writes(p1_shared[v0, v1, v2, v3])
                                        p1_shared[v0, v1, v2, v3] = p1[v0, v1, v2, v3]
                        for ci_1, eps_3, nu_3, co_3, p_3, ci_2, eps_4, nu_4, co_4, p_4 in T.grid(T.int64(1), T.int64(2), T.int64(1), T.int64(2), T.int64(2), T.int64(1), T.int64(3), T.int64(1), T.int64(1), T.int64(14)):
                            with T.block("bgemm_update"):
                                v_eps = T.axis.spatial(T.int64(6), eps_3 * T.int64(3) + eps_4)
                                v_nu = T.axis.spatial(T.int64(6), eps_0_nu_0_co_0_p_0_fused // T.int64(4) * T.int64(2) + eps_2_nu_2_co_2_p_2_fused // T.int64(112) + nu_3 + nu_4)
                                v_co = T.axis.spatial(T.int64(128), eps_1_nu_1_co_1_p_1_fused * T.int64(32) + eps_2_nu_2_co_2_p_2_fused % T.int64(112) // T.int64(7) * T.int64(2) + co_3 + co_4)
                                v_p = T.axis.spatial(T.int64(784), eps_0_nu_0_co_0_p_0_fused % T.int64(4) * T.int64(196) + eps_2_nu_2_co_2_p_2_fused % T.int64(7) * T.int64(28) + p_3 * T.int64(14) + p_4)
                                v_ci = T.axis.reduce(T.int64(64), ci_0_fused + ci_1 + ci_2)
                                T.reads(bgemm_local[v_eps, v_nu, v_co, v_p], data_pack_shared[v_eps, v_nu, v_ci, v_p], p1_shared[v_eps, v_nu, v_ci, v_co])
                                T.writes(bgemm_local[v_eps, v_nu, v_co, v_p])
                                T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 32, "meta_schedule.tiling_structure": "SSSRRSRS"})
                                bgemm_local[v_eps, v_nu, v_co, v_p] = bgemm_local[v_eps, v_nu, v_co, v_p] + data_pack_shared[v_eps, v_nu, v_ci, v_p] * p1_shared[v_eps, v_nu, v_ci, v_co]
                    for ax0, ax1, ax2, ax3 in T.grid(T.int64(6), T.int64(1), T.int64(2), T.int64(28)):
                        with T.block("bgemm_local"):
                            v0 = T.axis.spatial(T.int64(6), ax0)
                            v1 = T.axis.spatial(T.int64(6), eps_0_nu_0_co_0_p_0_fused // T.int64(4) * T.int64(2) + eps_2_nu_2_co_2_p_2_fused // T.int64(112) + ax1)
                            v2 = T.axis.spatial(T.int64(128), eps_1_nu_1_co_1_p_1_fused * T.int64(32) + eps_2_nu_2_co_2_p_2_fused % T.int64(112) // T.int64(7) * T.int64(2) + ax2)
                            v3 = T.axis.spatial(T.int64(784), eps_0_nu_0_co_0_p_0_fused % T.int64(4) * T.int64(196) + eps_2_nu_2_co_2_p_2_fused % T.int64(7) * T.int64(28) + ax3)
                            T.reads(bgemm_local[v0, v1, v2, v3])
                            T.writes(bgemm[v0, v1, v2, v3])
                            bgemm[v0, v1, v2, v3] = bgemm_local[v0, v1, v2, v3]
        for n_co_h_0_w_0_fused_0 in T.thread_binding(T.int64(1568), thread="blockIdx.x", annotations={"pragma_auto_unroll_max_step": 512, "pragma_unroll_explicit": 1}):
            for n_co_h_0_w_0_fused_1 in T.thread_binding(T.int64(64), thread="threadIdx.x"):
                for ax0, ax1 in T.grid(T.int64(1), T.int64(1)):
                    for ax2 in T.unroll(T.int64(4)):
                        for ax3 in T.unroll(T.int64(4)):
                            with T.block("inverse_init"):
                                v_co = T.axis.spatial(T.int64(128), (n_co_h_0_w_0_fused_0 * T.int64(64) + n_co_h_0_w_0_fused_1) // T.int64(784) + ax0)
                                v_p = T.axis.spatial(T.int64(784), (n_co_h_0_w_0_fused_0 * T.int64(64) + n_co_h_0_w_0_fused_1) % T.int64(784) + ax1)
                                v_vh, v_vw = T.axis.remap("SS", [ax2, ax3])
                                T.reads()
                                T.writes(inverse_local[v_co, v_p, v_vh, v_vw])
                                T.block_attr({"schedule_rule": "conv2d_nchw_winograd_inverse"})
                                inverse_local[v_co, v_p, v_vh, v_vw] = T.float32(0)
                            for ax4 in T.unroll(T.int64(6)):
                                for ax5 in T.unroll(T.int64(6)):
                                    with T.block("inverse_update"):
                                        v_co = T.axis.spatial(T.int64(128), (n_co_h_0_w_0_fused_0 * T.int64(64) + n_co_h_0_w_0_fused_1) // T.int64(784) + ax0)
                                        v_p = T.axis.spatial(T.int64(784), (n_co_h_0_w_0_fused_0 * T.int64(64) + n_co_h_0_w_0_fused_1) % T.int64(784) + ax1)
                                        v_vh, v_vw, v_r_a, v_r_b = T.axis.remap("SSRR", [ax2, ax3, ax4, ax5])
                                        T.reads(inverse_local[v_co, v_p, v_vh, v_vw], bgemm[v_r_a, v_r_b, v_co, v_p])
                                        T.writes(inverse_local[v_co, v_p, v_vh, v_vw])
                                        T.block_attr({"schedule_rule": "conv2d_nchw_winograd_inverse"})
                                        inverse_local[v_co, v_p, v_vh, v_vw] = inverse_local[v_co, v_p, v_vh, v_vw] + bgemm[v_r_a, v_r_b, v_co, v_p] * T.Select(v_r_a % T.int64(6) == T.int64(5) and v_vh % T.int64(4) == T.int64(3), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(5) and v_vh % T.int64(4) == T.int64(2), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(5) and v_vh % T.int64(4) == T.int64(1), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(5) and v_vh % T.int64(4) == T.int64(0), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(4) and v_vh % T.int64(4) == T.int64(3), T.float32(-8), T.Select(v_r_a % T.int64(6) == T.int64(4) and v_vh % T.int64(4) == T.int64(2), T.float32(4), T.Select(v_r_a % T.int64(6) == T.int64(4) and v_vh % T.int64(4) == T.int64(1), T.float32(-2), T.Select(v_r_a % T.int64(6) == T.int64(4) and v_vh % T.int64(4) == T.int64(0), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(3) and v_vh % T.int64(4) == T.int64(3), T.float32(0.125), T.Select(v_r_a % T.int64(6) == T.int64(3) and v_vh % T.int64(4) == T.int64(2), T.float32(0.25), T.Select(v_r_a % T.int64(6) == T.int64(3) and v_vh % T.int64(4) == T.int64(1), T.float32(0.5), T.Select(v_r_a % T.int64(6) == T.int64(3) and v_vh % T.int64(4) == T.int64(0), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(2) and v_vh % T.int64(4) == T.int64(3), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(2) and v_vh % T.int64(4) == T.int64(2), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(2) and v_vh % T.int64(4) == T.int64(1), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(2) and v_vh % T.int64(4) == T.int64(0), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(1) and v_vh % T.int64(4) == T.int64(3), T.float32(-1), T.Select(v_r_a % T.int64(6) == T.int64(1) and v_vh % T.int64(4) == T.int64(2), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(1) and v_vh % T.int64(4) == T.int64(1), T.float32(-1), T.Select(v_r_a % T.int64(6) == T.int64(1) and v_vh % T.int64(4) == T.int64(0), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(0) and v_vh % T.int64(4) == T.int64(3), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(0) and v_vh % T.int64(4) == T.int64(2), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(0) and v_vh % T.int64(4) == T.int64(1), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(0) and v_vh % T.int64(4) == T.int64(0), T.float32(1), T.float32(0))))))))))))))))))))))))) * T.Select(v_r_b % T.int64(6) == T.int64(5) and v_vw % T.int64(4) == T.int64(3), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(5) and v_vw % T.int64(4) == T.int64(2), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(5) and v_vw % T.int64(4) == T.int64(1), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(5) and v_vw % T.int64(4) == T.int64(0), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(4) and v_vw % T.int64(4) == T.int64(3), T.float32(-8), T.Select(v_r_b % T.int64(6) == T.int64(4) and v_vw % T.int64(4) == T.int64(2), T.float32(4), T.Select(v_r_b % T.int64(6) == T.int64(4) and v_vw % T.int64(4) == T.int64(1), T.float32(-2), T.Select(v_r_b % T.int64(6) == T.int64(4) and v_vw % T.int64(4) == T.int64(0), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(3) and v_vw % T.int64(4) == T.int64(3), T.float32(0.125), T.Select(v_r_b % T.int64(6) == T.int64(3) and v_vw % T.int64(4) == T.int64(2), T.float32(0.25), T.Select(v_r_b % T.int64(6) == T.int64(3) and v_vw % T.int64(4) == T.int64(1), T.float32(0.5), T.Select(v_r_b % T.int64(6) == T.int64(3) and v_vw % T.int64(4) == T.int64(0), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(2) and v_vw % T.int64(4) == T.int64(3), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(2) and v_vw % T.int64(4) == T.int64(2), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(2) and v_vw % T.int64(4) == T.int64(1), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(2) and v_vw % T.int64(4) == T.int64(0), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(1) and v_vw % T.int64(4) == T.int64(3), T.float32(-1), T.Select(v_r_b % T.int64(6) == T.int64(1) and v_vw % T.int64(4) == T.int64(2), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(1) and v_vw % T.int64(4) == T.int64(1), T.float32(-1), T.Select(v_r_b % T.int64(6) == T.int64(1) and v_vw % T.int64(4) == T.int64(0), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(0) and v_vw % T.int64(4) == T.int64(3), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(0) and v_vw % T.int64(4) == T.int64(2), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(0) and v_vw % T.int64(4) == T.int64(1), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(0) and v_vw % T.int64(4) == T.int64(0), T.float32(1), T.float32(0)))))))))))))))))))))))))
                for h_1, w_1 in T.grid(T.int64(4), T.int64(4)):
                    with T.block("conv2d_winograd"):
                        v_n = T.axis.spatial(T.int64(1), T.int64(0))
                        v_co = T.axis.spatial(T.int64(128), (n_co_h_0_w_0_fused_0 * T.int64(64) + n_co_h_0_w_0_fused_1) // T.int64(784))
                        v_h = T.axis.spatial(T.int64(112), (n_co_h_0_w_0_fused_0 * T.int64(64) + n_co_h_0_w_0_fused_1) % T.int64(784) // T.int64(28) * T.int64(4) + h_1)
                        v_w = T.axis.spatial(T.int64(112), (n_co_h_0_w_0_fused_0 * T.int64(64) + n_co_h_0_w_0_fused_1) % T.int64(28) * T.int64(4) + w_1)
                        T.reads(inverse_local[v_co, v_n * T.int64(784) + v_h // T.int64(4) * T.int64(28) + v_w // T.int64(4), v_h % T.int64(4), v_w % T.int64(4)], p2[v_n, v_co, T.int64(0), T.int64(0)])
                        T.writes(T_relu[v_n, v_co, v_h, v_w])
                        T_relu[v_n, v_co, v_h, v_w] = T.max(inverse_local[v_co, v_n * T.int64(784) + v_h // T.int64(4) * T.int64(28) + v_w // T.int64(4), v_h % T.int64(4), v_w % T.int64(4)] + p2[v_n, v_co, T.int64(0), T.int64(0)], T.float32(0))
b0 = sch.get_block(name="data_pack", func_name="main")
b1 = sch.get_block(name="bgemm", func_name="main")
b2 = sch.get_block(name="inverse", func_name="main")
b3 = sch.get_block(name="conv2d_winograd", func_name="main")
b4 = sch.get_block(name="T_add", func_name="main")
b5 = sch.get_block(name="T_relu", func_name="main")
b6 = sch.get_block(name="root", func_name="main")
b7, b8 = sch.get_producers(block=b2)
sch.compute_inline(block=b8)
b9, = sch.get_consumers(block=b2)
l10, l11, l12, l13 = sch.get_loops(block=b9)
l14, l15 = sch.split(loop=l12, factors=[None, 4], preserve_unit_iters=True)
l16, l17 = sch.split(loop=l13, factors=[None, 4], preserve_unit_iters=True)
sch.reorder(l14, l16, l15, l17)
sch.compute_at(block=b2, loop=l16, preserve_unit_loops=True, index=-1)
sch.set_scope(block=b2, buffer_index=0, storage_scope="local")
l18, l19, l20, l21, l22, l23, l24, l25, l26, l27 = sch.get_loops(block=b2)
sch.unroll(loop=l24)
sch.unroll(loop=l25)
sch.unroll(loop=l26)
sch.unroll(loop=l27)
b28, b29 = sch.get_producers(block=b0)
sch.compute_inline(block=b29)
b30, = sch.get_producers(block=b28)
l31, l32, l33, l34, l35, l36 = sch.get_loops(block=b0)
sch.reorder(l33, l34, l31, l32, l35, l36)
sch.unroll(loop=l31)
sch.unroll(loop=l32)
sch.unroll(loop=l35)
sch.unroll(loop=l36)
l37 = sch.fuse(l33, l34, preserve_unit_iters=True)
v38 = sch.sample_categorical(candidates=[32, 64, 128, 256, 512, 1024], probs=[0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666], decision=5)
l39, l40 = sch.split(loop=l37, factors=[None, v38], preserve_unit_iters=True)
sch.bind(loop=l39, thread_axis="blockIdx.x")
sch.bind(loop=l40, thread_axis="threadIdx.x")
b41 = sch.cache_write(block=b0, write_buffer_index=0, storage_scope="local")
sch.reverse_compute_at(block=b41, loop=l40, preserve_unit_loops=True, index=-1)
sch.compute_at(block=b28, loop=l40, preserve_unit_loops=True, index=-1)
sch.set_scope(block=b28, buffer_index=0, storage_scope="local")
sch.compute_inline(block=b30)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSSRRSRS")
l42, l43, l44, l45, l46 = sch.get_loops(block=b1)
v47, v48, v49, v50, v51 = sch.sample_perfect_tile(loop=l42, n=5, max_innermost_factor=64, decision=[1, 1, 1, 2, 3])
l52, l53, l54, l55, l56 = sch.split(loop=l42, factors=[v47, v48, v49, v50, v51], preserve_unit_iters=True)
v57, v58, v59, v60, v61 = sch.sample_perfect_tile(loop=l43, n=5, max_innermost_factor=64, decision=[3, 1, 2, 1, 1])
l62, l63, l64, l65, l66 = sch.split(loop=l43, factors=[v57, v58, v59, v60, v61], preserve_unit_iters=True)
v67, v68, v69, v70, v71 = sch.sample_perfect_tile(loop=l44, n=5, max_innermost_factor=64, decision=[1, 4, 16, 2, 1])
l72, l73, l74, l75, l76 = sch.split(loop=l44, factors=[v67, v68, v69, v70, v71], preserve_unit_iters=True)
v77, v78, v79, v80, v81 = sch.sample_perfect_tile(loop=l45, n=5, max_innermost_factor=64, decision=[4, 1, 7, 2, 14])
l82, l83, l84, l85, l86 = sch.split(loop=l45, factors=[v77, v78, v79, v80, v81], preserve_unit_iters=True)
v87, v88, v89 = sch.sample_perfect_tile(loop=l46, n=3, max_innermost_factor=64, decision=[64, 1, 1])
l90, l91, l92 = sch.split(loop=l46, factors=[v87, v88, v89], preserve_unit_iters=True)
sch.reorder(l52, l62, l72, l82, l53, l63, l73, l83, l54, l64, l74, l84, l90, l91, l55, l65, l75, l85, l92, l56, l66, l76, l86)
l93 = sch.fuse(l52, l62, l72, l82, preserve_unit_iters=True)
sch.bind(loop=l93, thread_axis="blockIdx.x")
l94 = sch.fuse(l53, l63, l73, l83, preserve_unit_iters=True)
sch.bind(loop=l94, thread_axis="vthread.x")
l95 = sch.fuse(l54, l64, l74, l84, preserve_unit_iters=True)
sch.bind(loop=l95, thread_axis="threadIdx.x")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_low_inclusive", ann_val=32)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_high_inclusive", ann_val=1024)
b96 = sch.cache_write(block=b1, write_buffer_index=0, storage_scope="local")
sch.reverse_compute_at(block=b96, loop=l95, preserve_unit_loops=True, index=-1)
b97 = sch.cache_read(block=b1, read_buffer_index=0, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b97, loop=l90, preserve_unit_loops=True, index=-1)
l98, l99, l100, l101, l102, l103, l104, l105 = sch.get_loops(block=b97)
l106 = sch.fuse(l102, l103, l104, l105, preserve_unit_iters=True)
v107 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=0)
sch.annotate(block_or_loop=b97, ann_key="meta_schedule.cooperative_fetch", ann_val=v107)
b108 = sch.cache_read(block=b1, read_buffer_index=1, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b108, loop=l90, preserve_unit_loops=True, index=-1)
l109, l110, l111, l112, l113, l114, l115, l116 = sch.get_loops(block=b108)
l117 = sch.fuse(l113, l114, l115, l116, preserve_unit_iters=True)
v118 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b108, ann_key="meta_schedule.cooperative_fetch", ann_val=v118)
l119 = sch.fuse(l90, preserve_unit_iters=True)
sch.annotate(block_or_loop=l119, ann_key="software_pipeline_stage", ann_val=[0, 0, 2])
sch.annotate(block_or_loop=l119, ann_key="software_pipeline_order", ann_val=[0, 1, 2])
sch.annotate(block_or_loop=l119, ann_key="software_pipeline_async_stages", ann_val=[0])
sch.reverse_compute_inline(block=b5)
sch.reverse_compute_inline(block=b4)
v120 = sch.sample_categorical(candidates=[0, 16, 64, 512, 1024], probs=[0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001], decision=3)
sch.annotate(block_or_loop=b6, ann_key="meta_schedule.unroll_explicit", ann_val=v120)
l121, l122, l123, l124, l125, l126 = sch.get_loops(block=b3)
l127 = sch.fuse(l121, l122, l123, l124, preserve_unit_iters=True)
v128 = sch.sample_categorical(candidates=[32, 64, 128, 256, 512, 1024], probs=[0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666], decision=1)
l129, l130 = sch.split(loop=l127, factors=[None, v128], preserve_unit_iters=True)
sch.bind(loop=l129, thread_axis="blockIdx.x")
sch.bind(loop=l130, thread_axis="threadIdx.x")
sch.enter_postproc()
sch.unannotate(block_or_loop=b97, ann_key="meta_schedule.cooperative_fetch")
l131, l132, l133, l134, l135 = sch.get_loops(block=b97)
l136, l137 = sch.split(loop=l135, factors=[None, 224], preserve_unit_iters=True)
sch.bind(loop=l137, thread_axis="threadIdx.x")
sch.unannotate(block_or_loop=b108, ann_key="meta_schedule.cooperative_fetch")
l138, l139, l140, l141, l142 = sch.get_loops(block=b108)
l143, l144, l145 = sch.split(loop=l142, factors=[None, 224, 4], preserve_unit_iters=True)
sch.vectorize(loop=l145)
sch.bind(loop=l144, thread_axis="threadIdx.x")
b146 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b146, ann_key="meta_schedule.unroll_explicit")
b147, b148, b149, b150, b151, b152, b153, b154, b155 = sch.get_child_blocks(b146)
l156, l157, l158, l159, l160, l161 = sch.get_loops(block=b147)
l162, l163, l164, l165, l166, l167 = sch.get_loops(block=b148)
sch.annotate(block_or_loop=l162, ann_key="pragma_auto_unroll_max_step", ann_val=512)
sch.annotate(block_or_loop=l162, ann_key="pragma_unroll_explicit", ann_val=1)
l168, l169, l170, l171, l172, l173 = sch.get_loops(block=b149)
l174, l175, l176, l177, l178, l179 = sch.get_loops(block=b150)
l180, l181, l182, l183, l184, l185, l186 = sch.get_loops(block=b151)
l187, l188, l189, l190, l191, l192, l193, l194, l195, l196, l197, l198, l199, l200 = sch.get_loops(block=b152)
sch.annotate(block_or_loop=l187, ann_key="pragma_auto_unroll_max_step", ann_val=512)
sch.annotate(block_or_loop=l187, ann_key="pragma_unroll_explicit", ann_val=1)
l201, l202, l203, l204, l205, l206, l207 = sch.get_loops(block=b153)
l208, l209, l210, l211, l212, l213, l214, l215 = sch.get_loops(block=b154)
sch.annotate(block_or_loop=l208, ann_key="pragma_auto_unroll_max_step", ann_val=512)
sch.annotate(block_or_loop=l208, ann_key="pragma_unroll_explicit", ann_val=1)
l216, l217, l218, l219 = sch.get_loops(block=b155)
b220 = sch.get_block(name="data_pack", func_name="main")
l221, l222, l223, l224, l225, l226 = sch.get_loops(block=b220)
b227 = sch.decompose_reduction(block=b220, loop=l225)
b228 = sch.get_block(name="bgemm", func_name="main")
l229, l230, l231, l232, l233, l234, l235, l236, l237, l238, l239, l240, l241, l242 = sch.get_loops(block=b228)
b243 = sch.decompose_reduction(block=b228, loop=l232)
b244 = sch.get_block(name="inverse", func_name="main")
l245, l246, l247, l248, l249, l250, l251, l252 = sch.get_loops(block=b244)
b253 = sch.decompose_reduction(block=b244, loop=l251)
2024-04-28 20:23:59 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #23: GFLOPs: 98.6807. Time: 8452.7784 us. Best GFLOPs: 8099.6167
2024-04-28 20:23:59 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #24: GFLOPs: 41.2263. Time: 20232.8745 us. Best GFLOPs: 8099.6167
2024-04-28 20:23:59 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #25: GFLOPs: 70.8738. Time: 11769.1734 us. Best GFLOPs: 8099.6167
2024-04-28 20:23:59 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #26: GFLOPs: 2381.1989. Time: 350.2966 us. Best GFLOPs: 8099.6167
2024-04-28 20:23:59 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #27: GFLOPs: 2838.0081. Time: 293.9124 us. Best GFLOPs: 8099.6167
2024-04-28 20:23:59 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #28: GFLOPs: 6569.4102. Time: 126.9712 us. Best GFLOPs: 8099.6167
2024-04-28 20:23:59 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #29: GFLOPs: 5485.2796. Time: 152.0662 us. Best GFLOPs: 8099.6167
2024-04-28 20:23:59 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #30: GFLOPs: 1430.3171. Time: 583.1754 us. Best GFLOPs: 8099.6167
2024-04-28 20:23:59 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #31: GFLOPs: 242.1163. Time: 3445.1457 us. Best GFLOPs: 8099.6167
2024-04-28 20:23:59 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #32: GFLOPs: 603.5917. Time: 1381.9371 us. Best GFLOPs: 8099.6167
2024-04-28 20:23:59 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #33: GFLOPs: 157.3244. Time: 5301.9485 us. Best GFLOPs: 8099.6167
2024-04-28 20:23:59 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #34: GFLOPs: 355.6306. Time: 2345.4838 us. Best GFLOPs: 8099.6167
2024-04-28 20:23:59 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #35: GFLOPs: 2190.0550. Time: 380.8698 us. Best GFLOPs: 8099.6167
2024-04-28 20:23:59 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #36: GFLOPs: 516.9619. Time: 1613.5152 us. Best GFLOPs: 8099.6167
2024-04-28 20:23:59 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #37: GFLOPs: 1419.3018. Time: 587.7015 us. Best GFLOPs: 8099.6167
2024-04-28 20:23:59 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #38: GFLOPs: 4570.9019. Time: 182.4860 us. Best GFLOPs: 8099.6167
2024-04-28 20:23:59 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #39: GFLOPs: 99.4578. Time: 8386.7308 us. Best GFLOPs: 8099.6167
2024-04-28 20:23:59 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #40: GFLOPs: 265.8646. Time: 3137.4080 us. Best GFLOPs: 8099.6167
2024-04-28 20:23:59 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #41: GFLOPs: 213.2119. Time: 3912.1921 us. Best GFLOPs: 8099.6167
2024-04-28 20:23:59 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #42: GFLOPs: 39.3090. Time: 21219.7372 us. Best GFLOPs: 8099.6167
2024-04-28 20:23:59 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #43: GFLOPs: 5398.9048. Time: 154.4991 us. Best GFLOPs: 8099.6167
2024-04-28 20:23:59 [INFO] [task_scheduler.cc:121] [Task #2: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #44: Error in building:
LocalBuilder: Timeout, killed after 30.0 seconds
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(64), T.int64(112), T.int64(112)), "float32"), p1: T.Buffer((T.int64(6), T.int64(6), T.int64(64), T.int64(128)), "float32"), p2: T.Buffer((T.int64(1), T.int64(128), T.int64(1), T.int64(1)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(128), T.int64(112), T.int64(112)), "float32")):
        T.func_attr({"layout_free_buffers": [1], "tir.noalias": T.bool(True)})
        # with T.block("root"):
        input_tile_local = T.alloc_buffer((T.int64(64), T.int64(784), T.int64(6), T.int64(6)), scope="local")
        data_pack = T.alloc_buffer((T.int64(6), T.int64(6), T.int64(64), T.int64(784)))
        bgemm = T.alloc_buffer((T.int64(6), T.int64(6), T.int64(128), T.int64(784)))
        inverse_local = T.alloc_buffer((T.int64(128), T.int64(784), T.int64(4), T.int64(4)), scope="local")
        data_pack_local = T.alloc_buffer((T.int64(6), T.int64(6), T.int64(64), T.int64(784)), scope="local")
        bgemm_local = T.alloc_buffer((T.int64(6), T.int64(6), T.int64(128), T.int64(784)), scope="local")
        data_pack_shared = T.alloc_buffer((T.int64(6), T.int64(6), T.int64(64), T.int64(784)), scope="shared")
        p1_shared = T.alloc_buffer((T.int64(6), T.int64(6), T.int64(64), T.int64(128)), scope="shared")
        for ci_p_fused_0 in T.thread_binding(T.int64(784), thread="blockIdx.x", annotations={"pragma_auto_unroll_max_step": 1024, "pragma_unroll_explicit": 1}):
            for ci_p_fused_1 in T.thread_binding(T.int64(64), thread="threadIdx.x"):
                for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(1), T.int64(6), T.int64(6)):
                    with T.block("input_tile"):
                        v_ci = T.axis.spatial(T.int64(64), (ci_p_fused_0 * T.int64(64) + ci_p_fused_1) // T.int64(784) + ax0)
                        v_p = T.axis.spatial(T.int64(784), (ci_p_fused_0 * T.int64(64) + ci_p_fused_1) % T.int64(784) + ax1)
                        v_eps, v_nu = T.axis.remap("SS", [ax2, ax3])
                        T.reads(p0[v_p // T.int64(784), v_ci, v_p % T.int64(784) // T.int64(28) * T.int64(4) + v_eps - T.int64(1), v_p % T.int64(28) * T.int64(4) + v_nu - T.int64(1)])
                        T.writes(input_tile_local[v_ci, v_p, v_eps, v_nu])
                        T.block_attr({"schedule_rule": "None"})
                        input_tile_local[v_ci, v_p, v_eps, v_nu] = T.if_then_else(T.int64(1) <= v_p % T.int64(784) // T.int64(28) * T.int64(4) + v_eps and v_p % T.int64(784) // T.int64(28) * T.int64(4) + v_eps < T.int64(113) and T.int64(1) <= v_p % T.int64(28) * T.int64(4) + v_nu and v_p % T.int64(28) * T.int64(4) + v_nu < T.int64(113), p0[v_p // T.int64(784), v_ci, v_p % T.int64(784) // T.int64(28) * T.int64(4) + v_eps - T.int64(1), v_p % T.int64(28) * T.int64(4) + v_nu - T.int64(1)], T.float32(0))
                for eps in T.unroll(T.int64(6)):
                    for nu in T.unroll(T.int64(6)):
                        with T.block("data_pack_init"):
                            v_eps, v_nu = T.axis.remap("SS", [eps, nu])
                            v_ci = T.axis.spatial(T.int64(64), (ci_p_fused_0 * T.int64(64) + ci_p_fused_1) // T.int64(784))
                            v_p = T.axis.spatial(T.int64(784), (ci_p_fused_0 * T.int64(64) + ci_p_fused_1) % T.int64(784))
                            T.reads()
                            T.writes(data_pack_local[v_eps, v_nu, v_ci, v_p])
                            T.block_attr({"schedule_rule": "conv2d_nchw_winograd_data_pack"})
                            data_pack_local[v_eps, v_nu, v_ci, v_p] = T.float32(0)
                        for r_a in T.unroll(T.int64(6)):
                            for r_b in T.unroll(T.int64(6)):
                                with T.block("data_pack_update"):
                                    v_eps, v_nu = T.axis.remap("SS", [eps, nu])
                                    v_ci = T.axis.spatial(T.int64(64), (ci_p_fused_0 * T.int64(64) + ci_p_fused_1) // T.int64(784))
                                    v_p = T.axis.spatial(T.int64(784), (ci_p_fused_0 * T.int64(64) + ci_p_fused_1) % T.int64(784))
                                    v_r_a, v_r_b = T.axis.remap("RR", [r_a, r_b])
                                    T.reads(data_pack_local[v_eps, v_nu, v_ci, v_p], input_tile_local[v_ci, v_p, v_r_a, v_r_b])
                                    T.writes(data_pack_local[v_eps, v_nu, v_ci, v_p])
                                    T.block_attr({"schedule_rule": "conv2d_nchw_winograd_data_pack"})
                                    data_pack_local[v_eps, v_nu, v_ci, v_p] = data_pack_local[v_eps, v_nu, v_ci, v_p] + input_tile_local[v_ci, v_p, v_r_a, v_r_b] * T.Select(v_r_a % T.int64(6) == T.int64(5) and v_eps % T.int64(6) == T.int64(5), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(5) and v_eps % T.int64(6) == T.int64(4), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(5) and v_eps % T.int64(6) == T.int64(3), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(5) and v_eps % T.int64(6) == T.int64(2), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(5) and v_eps % T.int64(6) == T.int64(1), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(5) and v_eps % T.int64(6) == T.int64(0), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(4) and v_eps % T.int64(6) == T.int64(5), T.float32(1.5), T.Select(v_r_a % T.int64(6) == T.int64(4) and v_eps % T.int64(6) == T.int64(4), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(4) and v_eps % T.int64(6) == T.int64(3), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(4) and v_eps % T.int64(6) == T.int64(2), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(4) and v_eps % T.int64(6) == T.int64(1), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(4) and v_eps % T.int64(6) == T.int64(0), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(3) and v_eps % T.int64(6) == T.int64(5), T.float32(-2), T.Select(v_r_a % T.int64(6) == T.int64(3) and v_eps % T.int64(6) == T.int64(4), T.float32(-0.5), T.Select(v_r_a % T.int64(6) == T.int64(3) and v_eps % T.int64(6) == T.int64(3), T.float32(2), T.Select(v_r_a % T.int64(6) == T.int64(3) and v_eps % T.int64(6) == T.int64(2), T.float32(2.5), T.Select(v_r_a % T.int64(6) == T.int64(3) and v_eps % T.int64(6) == T.int64(1), T.float32(0.5), T.Select(v_r_a % T.int64(6) == T.int64(3) and v_eps % T.int64(6) == T.int64(0), T.float32(1.5), T.Select(v_r_a % T.int64(6) == T.int64(2) and v_eps % T.int64(6) == T.int64(5), T.float32(-1.5), T.Select(v_r_a % T.int64(6) == T.int64(2) and v_eps % T.int64(6) == T.int64(4), T.float32(-1), T.Select(v_r_a % T.int64(6) == T.int64(2) and v_eps % T.int64(6) == T.int64(3), T.float32(-1), T.Select(v_r_a % T.int64(6) == T.int64(2) and v_eps % T.int64(6) == T.int64(2), T.float32(0.5), T.Select(v_r_a % T.int64(6) == T.int64(2) and v_eps % T.int64(6) == T.int64(1), T.float32(-2.5), T.Select(v_r_a % T.int64(6) == T.int64(2) and v_eps % T.int64(6) == T.int64(0), T.float32(-2), T.Select(v_r_a % T.int64(6) == T.int64(1) and v_eps % T.int64(6) == T.int64(5), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(1) and v_eps % T.int64(6) == T.int64(4), T.float32(0.5), T.Select(v_r_a % T.int64(6) == T.int64(1) and v_eps % T.int64(6) == T.int64(3), T.float32(-2), T.Select(v_r_a % T.int64(6) == T.int64(1) and v_eps % T.int64(6) == T.int64(2), T.float32(-1), T.Select(v_r_a % T.int64(6) == T.int64(1) and v_eps % T.int64(6) == T.int64(1), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(1) and v_eps % T.int64(6) == T.int64(0), T.float32(-1.5), T.Select(v_r_a % T.int64(6) == T.int64(0) and v_eps % T.int64(6) == T.int64(5), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(0) and v_eps % T.int64(6) == T.int64(4), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(0) and v_eps % T.int64(6) == T.int64(3), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(0) and v_eps % T.int64(6) == T.int64(2), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(0) and v_eps % T.int64(6) == T.int64(1), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(0) and v_eps % T.int64(6) == T.int64(0), T.float32(1), T.float32(0))))))))))))))))))))))))))))))))))))) * T.Select(v_r_b % T.int64(6) == T.int64(5) and v_nu % T.int64(6) == T.int64(5), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(5) and v_nu % T.int64(6) == T.int64(4), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(5) and v_nu % T.int64(6) == T.int64(3), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(5) and v_nu % T.int64(6) == T.int64(2), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(5) and v_nu % T.int64(6) == T.int64(1), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(5) and v_nu % T.int64(6) == T.int64(0), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(4) and v_nu % T.int64(6) == T.int64(5), T.float32(1.5), T.Select(v_r_b % T.int64(6) == T.int64(4) and v_nu % T.int64(6) == T.int64(4), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(4) and v_nu % T.int64(6) == T.int64(3), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(4) and v_nu % T.int64(6) == T.int64(2), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(4) and v_nu % T.int64(6) == T.int64(1), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(4) and v_nu % T.int64(6) == T.int64(0), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(3) and v_nu % T.int64(6) == T.int64(5), T.float32(-2), T.Select(v_r_b % T.int64(6) == T.int64(3) and v_nu % T.int64(6) == T.int64(4), T.float32(-0.5), T.Select(v_r_b % T.int64(6) == T.int64(3) and v_nu % T.int64(6) == T.int64(3), T.float32(2), T.Select(v_r_b % T.int64(6) == T.int64(3) and v_nu % T.int64(6) == T.int64(2), T.float32(2.5), T.Select(v_r_b % T.int64(6) == T.int64(3) and v_nu % T.int64(6) == T.int64(1), T.float32(0.5), T.Select(v_r_b % T.int64(6) == T.int64(3) and v_nu % T.int64(6) == T.int64(0), T.float32(1.5), T.Select(v_r_b % T.int64(6) == T.int64(2) and v_nu % T.int64(6) == T.int64(5), T.float32(-1.5), T.Select(v_r_b % T.int64(6) == T.int64(2) and v_nu % T.int64(6) == T.int64(4), T.float32(-1), T.Select(v_r_b % T.int64(6) == T.int64(2) and v_nu % T.int64(6) == T.int64(3), T.float32(-1), T.Select(v_r_b % T.int64(6) == T.int64(2) and v_nu % T.int64(6) == T.int64(2), T.float32(0.5), T.Select(v_r_b % T.int64(6) == T.int64(2) and v_nu % T.int64(6) == T.int64(1), T.float32(-2.5), T.Select(v_r_b % T.int64(6) == T.int64(2) and v_nu % T.int64(6) == T.int64(0), T.float32(-2), T.Select(v_r_b % T.int64(6) == T.int64(1) and v_nu % T.int64(6) == T.int64(5), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(1) and v_nu % T.int64(6) == T.int64(4), T.float32(0.5), T.Select(v_r_b % T.int64(6) == T.int64(1) and v_nu % T.int64(6) == T.int64(3), T.float32(-2), T.Select(v_r_b % T.int64(6) == T.int64(1) and v_nu % T.int64(6) == T.int64(2), T.float32(-1), T.Select(v_r_b % T.int64(6) == T.int64(1) and v_nu % T.int64(6) == T.int64(1), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(1) and v_nu % T.int64(6) == T.int64(0), T.float32(-1.5), T.Select(v_r_b % T.int64(6) == T.int64(0) and v_nu % T.int64(6) == T.int64(5), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(0) and v_nu % T.int64(6) == T.int64(4), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(0) and v_nu % T.int64(6) == T.int64(3), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(0) and v_nu % T.int64(6) == T.int64(2), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(0) and v_nu % T.int64(6) == T.int64(1), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(0) and v_nu % T.int64(6) == T.int64(0), T.float32(1), T.float32(0)))))))))))))))))))))))))))))))))))))
                for ax0, ax1, ax2, ax3 in T.grid(T.int64(6), T.int64(6), T.int64(1), T.int64(1)):
                    with T.block("data_pack_local"):
                        v0, v1 = T.axis.remap("SS", [ax0, ax1])
                        v2 = T.axis.spatial(T.int64(64), (ci_p_fused_0 * T.int64(64) + ci_p_fused_1) // T.int64(784) + ax2)
                        v3 = T.axis.spatial(T.int64(784), (ci_p_fused_0 * T.int64(64) + ci_p_fused_1) % T.int64(784) + ax3)
                        T.reads(data_pack_local[v0, v1, v2, v3])
                        T.writes(data_pack[v0, v1, v2, v3])
                        data_pack[v0, v1, v2, v3] = data_pack_local[v0, v1, v2, v3]
        for eps_0_nu_0_co_0_p_0_fused in T.thread_binding(T.int64(28), thread="blockIdx.x", annotations={"pragma_auto_unroll_max_step": 1024, "pragma_unroll_explicit": 1}):
            for eps_1_nu_1_co_1_p_1_fused in T.thread_binding(T.int64(56), thread="vthread.x"):
                for eps_2_nu_2_co_2_p_2_fused in T.thread_binding(T.int64(48), thread="threadIdx.x"):
                    for eps_3_init, nu_3_init, co_3_init, p_3_init, eps_4_init, nu_4_init, co_4_init, p_4_init in T.grid(T.int64(1), T.int64(1), T.int64(2), T.int64(2), T.int64(3), T.int64(2), T.int64(1), T.int64(2)):
                        with T.block("bgemm_init"):
                            v_eps = T.axis.spatial(T.int64(6), eps_1_nu_1_co_1_p_1_fused // T.int64(28) * T.int64(3) + eps_3_init * T.int64(3) + eps_4_init)
                            v_nu = T.axis.spatial(T.int64(6), eps_2_nu_2_co_2_p_2_fused // T.int64(16) * T.int64(2) + nu_3_init * T.int64(2) + nu_4_init)
                            v_co = T.axis.spatial(T.int64(128), eps_0_nu_0_co_0_p_0_fused // T.int64(7) * T.int64(32) + eps_1_nu_1_co_1_p_1_fused % T.int64(28) // T.int64(7) * T.int64(8) + eps_2_nu_2_co_2_p_2_fused % T.int64(16) // T.int64(4) * T.int64(2) + co_3_init + co_4_init)
                            v_p = T.axis.spatial(T.int64(784), eps_0_nu_0_co_0_p_0_fused % T.int64(7) * T.int64(112) + eps_1_nu_1_co_1_p_1_fused % T.int64(7) * T.int64(16) + eps_2_nu_2_co_2_p_2_fused % T.int64(4) * T.int64(4) + p_3_init * T.int64(2) + p_4_init)
                            T.reads()
                            T.writes(bgemm_local[v_eps, v_nu, v_co, v_p])
                            T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 32, "meta_schedule.tiling_structure": "SSSRRSRS"})
                            bgemm_local[v_eps, v_nu, v_co, v_p] = T.float32(0)
                    for ci_0 in range(T.int64(32)):
                        for ax0_ax1_ax2_ax3_fused_0 in range(T.int64(84)):
                            for ax0_ax1_ax2_ax3_fused_1 in T.thread_binding(T.int64(48), thread="threadIdx.x"):
                                for ax0_ax1_ax2_ax3_fused_2 in T.vectorized(T.int64(2)):
                                    with T.block("data_pack_shared"):
                                        v0 = T.axis.spatial(T.int64(6), (ax0_ax1_ax2_ax3_fused_0 * T.int64(96) + ax0_ax1_ax2_ax3_fused_1 * T.int64(2) + ax0_ax1_ax2_ax3_fused_2) // T.int64(1344))
                                        v1 = T.axis.spatial(T.int64(6), (ax0_ax1_ax2_ax3_fused_0 * T.int64(96) + ax0_ax1_ax2_ax3_fused_1 * T.int64(2) + ax0_ax1_ax2_ax3_fused_2) % T.int64(1344) // T.int64(224))
                                        v2 = T.axis.spatial(T.int64(64), ci_0 * T.int64(2) + (ax0_ax1_ax2_ax3_fused_0 * T.int64(96) + ax0_ax1_ax2_ax3_fused_1 * T.int64(2) + ax0_ax1_ax2_ax3_fused_2) % T.int64(224) // T.int64(112))
                                        v3 = T.axis.spatial(T.int64(784), eps_0_nu_0_co_0_p_0_fused % T.int64(7) * T.int64(112) + (ax0_ax1_ax2_ax3_fused_0 * T.int64(96) + ax0_ax1_ax2_ax3_fused_1 * T.int64(2) + ax0_ax1_ax2_ax3_fused_2) % T.int64(112))
                                        T.reads(data_pack[v0, v1, v2, v3])
                                        T.writes(data_pack_shared[v0, v1, v2, v3])
                                        data_pack_shared[v0, v1, v2, v3] = data_pack[v0, v1, v2, v3]
                        for ax0_ax1_ax2_ax3_fused_0 in range(T.int64(12)):
                            for ax0_ax1_ax2_ax3_fused_1 in T.thread_binding(T.int64(48), thread="threadIdx.x"):
                                for ax0_ax1_ax2_ax3_fused_2 in T.vectorized(T.int64(4)):
                                    with T.block("p1_shared"):
                                        v0 = T.axis.spatial(T.int64(6), (ax0_ax1_ax2_ax3_fused_0 * T.int64(192) + ax0_ax1_ax2_ax3_fused_1 * T.int64(4) + ax0_ax1_ax2_ax3_fused_2) // T.int64(384))
                                        v1 = T.axis.spatial(T.int64(6), (ax0_ax1_ax2_ax3_fused_0 * T.int64(192) + ax0_ax1_ax2_ax3_fused_1 * T.int64(4) + ax0_ax1_ax2_ax3_fused_2) % T.int64(384) // T.int64(64))
                                        v2 = T.axis.spatial(T.int64(64), ci_0 * T.int64(2) + (ax0_ax1_ax2_ax3_fused_0 * T.int64(192) + ax0_ax1_ax2_ax3_fused_1 * T.int64(4) + ax0_ax1_ax2_ax3_fused_2) % T.int64(64) // T.int64(32))
                                        v3 = T.axis.spatial(T.int64(128), eps_0_nu_0_co_0_p_0_fused // T.int64(7) * T.int64(32) + (ax0_ax1_ax2_ax3_fused_0 * T.int64(192) + ax0_ax1_ax2_ax3_fused_1 * T.int64(4) + ax0_ax1_ax2_ax3_fused_2) % T.int64(32))
                                        T.reads(p1[v0, v1, v2, v3])
                                        T.writes(p1_shared[v0, v1, v2, v3])
                                        p1_shared[v0, v1, v2, v3] = p1[v0, v1, v2, v3]
                        for ci_1, eps_3, nu_3, co_3, p_3, ci_2, eps_4, nu_4, co_4, p_4 in T.grid(T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(2), T.int64(2), T.int64(3), T.int64(2), T.int64(1), T.int64(2)):
                            with T.block("bgemm_update"):
                                v_eps = T.axis.spatial(T.int64(6), eps_1_nu_1_co_1_p_1_fused // T.int64(28) * T.int64(3) + eps_3 * T.int64(3) + eps_4)
                                v_nu = T.axis.spatial(T.int64(6), eps_2_nu_2_co_2_p_2_fused // T.int64(16) * T.int64(2) + nu_3 * T.int64(2) + nu_4)
                                v_co = T.axis.spatial(T.int64(128), eps_0_nu_0_co_0_p_0_fused // T.int64(7) * T.int64(32) + eps_1_nu_1_co_1_p_1_fused % T.int64(28) // T.int64(7) * T.int64(8) + eps_2_nu_2_co_2_p_2_fused % T.int64(16) // T.int64(4) * T.int64(2) + co_3 + co_4)
                                v_p = T.axis.spatial(T.int64(784), eps_0_nu_0_co_0_p_0_fused % T.int64(7) * T.int64(112) + eps_1_nu_1_co_1_p_1_fused % T.int64(7) * T.int64(16) + eps_2_nu_2_co_2_p_2_fused % T.int64(4) * T.int64(4) + p_3 * T.int64(2) + p_4)
                                v_ci = T.axis.reduce(T.int64(64), ci_0 * T.int64(2) + ci_1 * T.int64(2) + ci_2)
                                T.reads(bgemm_local[v_eps, v_nu, v_co, v_p], data_pack_shared[v_eps, v_nu, v_ci, v_p], p1_shared[v_eps, v_nu, v_ci, v_co])
                                T.writes(bgemm_local[v_eps, v_nu, v_co, v_p])
                                T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 32, "meta_schedule.tiling_structure": "SSSRRSRS"})
                                bgemm_local[v_eps, v_nu, v_co, v_p] = bgemm_local[v_eps, v_nu, v_co, v_p] + data_pack_shared[v_eps, v_nu, v_ci, v_p] * p1_shared[v_eps, v_nu, v_ci, v_co]
                    for ax0, ax1, ax2, ax3 in T.grid(T.int64(3), T.int64(2), T.int64(2), T.int64(4)):
                        with T.block("bgemm_local"):
                            v0 = T.axis.spatial(T.int64(6), eps_1_nu_1_co_1_p_1_fused // T.int64(28) * T.int64(3) + ax0)
                            v1 = T.axis.spatial(T.int64(6), eps_2_nu_2_co_2_p_2_fused // T.int64(16) * T.int64(2) + ax1)
                            v2 = T.axis.spatial(T.int64(128), eps_0_nu_0_co_0_p_0_fused // T.int64(7) * T.int64(32) + eps_1_nu_1_co_1_p_1_fused % T.int64(28) // T.int64(7) * T.int64(8) + eps_2_nu_2_co_2_p_2_fused % T.int64(16) // T.int64(4) * T.int64(2) + ax2)
                            v3 = T.axis.spatial(T.int64(784), eps_0_nu_0_co_0_p_0_fused % T.int64(7) * T.int64(112) + eps_1_nu_1_co_1_p_1_fused % T.int64(7) * T.int64(16) + eps_2_nu_2_co_2_p_2_fused % T.int64(4) * T.int64(4) + ax3)
                            T.reads(bgemm_local[v0, v1, v2, v3])
                            T.writes(bgemm[v0, v1, v2, v3])
                            bgemm[v0, v1, v2, v3] = bgemm_local[v0, v1, v2, v3]
        for n_co_h_0_w_0_fused_0 in T.thread_binding(T.int64(1568), thread="blockIdx.x", annotations={"pragma_auto_unroll_max_step": 1024, "pragma_unroll_explicit": 1}):
            for n_co_h_0_w_0_fused_1 in T.thread_binding(T.int64(64), thread="threadIdx.x"):
                for ax0, ax1 in T.grid(T.int64(1), T.int64(1)):
                    for ax2 in T.unroll(T.int64(4)):
                        for ax3 in T.unroll(T.int64(4)):
                            with T.block("inverse_init"):
                                v_co = T.axis.spatial(T.int64(128), (n_co_h_0_w_0_fused_0 * T.int64(64) + n_co_h_0_w_0_fused_1) // T.int64(784) + ax0)
                                v_p = T.axis.spatial(T.int64(784), (n_co_h_0_w_0_fused_0 * T.int64(64) + n_co_h_0_w_0_fused_1) % T.int64(784) + ax1)
                                v_vh, v_vw = T.axis.remap("SS", [ax2, ax3])
                                T.reads()
                                T.writes(inverse_local[v_co, v_p, v_vh, v_vw])
                                T.block_attr({"schedule_rule": "conv2d_nchw_winograd_inverse"})
                                inverse_local[v_co, v_p, v_vh, v_vw] = T.float32(0)
                            for ax4 in T.unroll(T.int64(6)):
                                for ax5 in T.unroll(T.int64(6)):
                                    with T.block("inverse_update"):
                                        v_co = T.axis.spatial(T.int64(128), (n_co_h_0_w_0_fused_0 * T.int64(64) + n_co_h_0_w_0_fused_1) // T.int64(784) + ax0)
                                        v_p = T.axis.spatial(T.int64(784), (n_co_h_0_w_0_fused_0 * T.int64(64) + n_co_h_0_w_0_fused_1) % T.int64(784) + ax1)
                                        v_vh, v_vw, v_r_a, v_r_b = T.axis.remap("SSRR", [ax2, ax3, ax4, ax5])
                                        T.reads(inverse_local[v_co, v_p, v_vh, v_vw], bgemm[v_r_a, v_r_b, v_co, v_p])
                                        T.writes(inverse_local[v_co, v_p, v_vh, v_vw])
                                        T.block_attr({"schedule_rule": "conv2d_nchw_winograd_inverse"})
                                        inverse_local[v_co, v_p, v_vh, v_vw] = inverse_local[v_co, v_p, v_vh, v_vw] + bgemm[v_r_a, v_r_b, v_co, v_p] * T.Select(v_r_a % T.int64(6) == T.int64(5) and v_vh % T.int64(4) == T.int64(3), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(5) and v_vh % T.int64(4) == T.int64(2), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(5) and v_vh % T.int64(4) == T.int64(1), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(5) and v_vh % T.int64(4) == T.int64(0), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(4) and v_vh % T.int64(4) == T.int64(3), T.float32(-8), T.Select(v_r_a % T.int64(6) == T.int64(4) and v_vh % T.int64(4) == T.int64(2), T.float32(4), T.Select(v_r_a % T.int64(6) == T.int64(4) and v_vh % T.int64(4) == T.int64(1), T.float32(-2), T.Select(v_r_a % T.int64(6) == T.int64(4) and v_vh % T.int64(4) == T.int64(0), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(3) and v_vh % T.int64(4) == T.int64(3), T.float32(0.125), T.Select(v_r_a % T.int64(6) == T.int64(3) and v_vh % T.int64(4) == T.int64(2), T.float32(0.25), T.Select(v_r_a % T.int64(6) == T.int64(3) and v_vh % T.int64(4) == T.int64(1), T.float32(0.5), T.Select(v_r_a % T.int64(6) == T.int64(3) and v_vh % T.int64(4) == T.int64(0), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(2) and v_vh % T.int64(4) == T.int64(3), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(2) and v_vh % T.int64(4) == T.int64(2), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(2) and v_vh % T.int64(4) == T.int64(1), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(2) and v_vh % T.int64(4) == T.int64(0), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(1) and v_vh % T.int64(4) == T.int64(3), T.float32(-1), T.Select(v_r_a % T.int64(6) == T.int64(1) and v_vh % T.int64(4) == T.int64(2), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(1) and v_vh % T.int64(4) == T.int64(1), T.float32(-1), T.Select(v_r_a % T.int64(6) == T.int64(1) and v_vh % T.int64(4) == T.int64(0), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(0) and v_vh % T.int64(4) == T.int64(3), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(0) and v_vh % T.int64(4) == T.int64(2), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(0) and v_vh % T.int64(4) == T.int64(1), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(0) and v_vh % T.int64(4) == T.int64(0), T.float32(1), T.float32(0))))))))))))))))))))))))) * T.Select(v_r_b % T.int64(6) == T.int64(5) and v_vw % T.int64(4) == T.int64(3), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(5) and v_vw % T.int64(4) == T.int64(2), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(5) and v_vw % T.int64(4) == T.int64(1), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(5) and v_vw % T.int64(4) == T.int64(0), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(4) and v_vw % T.int64(4) == T.int64(3), T.float32(-8), T.Select(v_r_b % T.int64(6) == T.int64(4) and v_vw % T.int64(4) == T.int64(2), T.float32(4), T.Select(v_r_b % T.int64(6) == T.int64(4) and v_vw % T.int64(4) == T.int64(1), T.float32(-2), T.Select(v_r_b % T.int64(6) == T.int64(4) and v_vw % T.int64(4) == T.int64(0), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(3) and v_vw % T.int64(4) == T.int64(3), T.float32(0.125), T.Select(v_r_b % T.int64(6) == T.int64(3) and v_vw % T.int64(4) == T.int64(2), T.float32(0.25), T.Select(v_r_b % T.int64(6) == T.int64(3) and v_vw % T.int64(4) == T.int64(1), T.float32(0.5), T.Select(v_r_b % T.int64(6) == T.int64(3) and v_vw % T.int64(4) == T.int64(0), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(2) and v_vw % T.int64(4) == T.int64(3), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(2) and v_vw % T.int64(4) == T.int64(2), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(2) and v_vw % T.int64(4) == T.int64(1), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(2) and v_vw % T.int64(4) == T.int64(0), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(1) and v_vw % T.int64(4) == T.int64(3), T.float32(-1), T.Select(v_r_b % T.int64(6) == T.int64(1) and v_vw % T.int64(4) == T.int64(2), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(1) and v_vw % T.int64(4) == T.int64(1), T.float32(-1), T.Select(v_r_b % T.int64(6) == T.int64(1) and v_vw % T.int64(4) == T.int64(0), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(0) and v_vw % T.int64(4) == T.int64(3), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(0) and v_vw % T.int64(4) == T.int64(2), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(0) and v_vw % T.int64(4) == T.int64(1), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(0) and v_vw % T.int64(4) == T.int64(0), T.float32(1), T.float32(0)))))))))))))))))))))))))
                for h_1, w_1 in T.grid(T.int64(4), T.int64(4)):
                    with T.block("conv2d_winograd"):
                        v_n = T.axis.spatial(T.int64(1), T.int64(0))
                        v_co = T.axis.spatial(T.int64(128), (n_co_h_0_w_0_fused_0 * T.int64(64) + n_co_h_0_w_0_fused_1) // T.int64(784))
                        v_h = T.axis.spatial(T.int64(112), (n_co_h_0_w_0_fused_0 * T.int64(64) + n_co_h_0_w_0_fused_1) % T.int64(784) // T.int64(28) * T.int64(4) + h_1)
                        v_w = T.axis.spatial(T.int64(112), (n_co_h_0_w_0_fused_0 * T.int64(64) + n_co_h_0_w_0_fused_1) % T.int64(28) * T.int64(4) + w_1)
                        T.reads(inverse_local[v_co, v_n * T.int64(784) + v_h // T.int64(4) * T.int64(28) + v_w // T.int64(4), v_h % T.int64(4), v_w % T.int64(4)], p2[v_n, v_co, T.int64(0), T.int64(0)])
                        T.writes(T_relu[v_n, v_co, v_h, v_w])
                        T_relu[v_n, v_co, v_h, v_w] = T.max(inverse_local[v_co, v_n * T.int64(784) + v_h // T.int64(4) * T.int64(28) + v_w // T.int64(4), v_h % T.int64(4), v_w % T.int64(4)] + p2[v_n, v_co, T.int64(0), T.int64(0)], T.float32(0))
b0 = sch.get_block(name="data_pack", func_name="main")
b1 = sch.get_block(name="bgemm", func_name="main")
b2 = sch.get_block(name="inverse", func_name="main")
b3 = sch.get_block(name="conv2d_winograd", func_name="main")
b4 = sch.get_block(name="T_add", func_name="main")
b5 = sch.get_block(name="T_relu", func_name="main")
b6 = sch.get_block(name="root", func_name="main")
b7, b8 = sch.get_producers(block=b2)
sch.compute_inline(block=b8)
b9, = sch.get_consumers(block=b2)
l10, l11, l12, l13 = sch.get_loops(block=b9)
l14, l15 = sch.split(loop=l12, factors=[None, 4], preserve_unit_iters=True)
l16, l17 = sch.split(loop=l13, factors=[None, 4], preserve_unit_iters=True)
sch.reorder(l14, l16, l15, l17)
sch.compute_at(block=b2, loop=l16, preserve_unit_loops=True, index=-1)
sch.set_scope(block=b2, buffer_index=0, storage_scope="local")
l18, l19, l20, l21, l22, l23, l24, l25, l26, l27 = sch.get_loops(block=b2)
sch.unroll(loop=l24)
sch.unroll(loop=l25)
sch.unroll(loop=l26)
sch.unroll(loop=l27)
b28, b29 = sch.get_producers(block=b0)
sch.compute_inline(block=b29)
b30, = sch.get_producers(block=b28)
l31, l32, l33, l34, l35, l36 = sch.get_loops(block=b0)
sch.reorder(l33, l34, l31, l32, l35, l36)
sch.unroll(loop=l31)
sch.unroll(loop=l32)
sch.unroll(loop=l35)
sch.unroll(loop=l36)
l37 = sch.fuse(l33, l34, preserve_unit_iters=True)
v38 = sch.sample_categorical(candidates=[32, 64, 128, 256, 512, 1024], probs=[0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666], decision=1)
l39, l40 = sch.split(loop=l37, factors=[None, v38], preserve_unit_iters=True)
sch.bind(loop=l39, thread_axis="blockIdx.x")
sch.bind(loop=l40, thread_axis="threadIdx.x")
b41 = sch.cache_write(block=b0, write_buffer_index=0, storage_scope="local")
sch.reverse_compute_at(block=b41, loop=l40, preserve_unit_loops=True, index=-1)
sch.compute_at(block=b28, loop=l40, preserve_unit_loops=True, index=-1)
sch.set_scope(block=b28, buffer_index=0, storage_scope="local")
sch.compute_inline(block=b30)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSSRRSRS")
l42, l43, l44, l45, l46 = sch.get_loops(block=b1)
v47, v48, v49, v50, v51 = sch.sample_perfect_tile(loop=l42, n=5, max_innermost_factor=64, decision=[1, 2, 1, 1, 3])
l52, l53, l54, l55, l56 = sch.split(loop=l42, factors=[v47, v48, v49, v50, v51], preserve_unit_iters=True)
v57, v58, v59, v60, v61 = sch.sample_perfect_tile(loop=l43, n=5, max_innermost_factor=64, decision=[1, 1, 3, 1, 2])
l62, l63, l64, l65, l66 = sch.split(loop=l43, factors=[v57, v58, v59, v60, v61], preserve_unit_iters=True)
v67, v68, v69, v70, v71 = sch.sample_perfect_tile(loop=l44, n=5, max_innermost_factor=64, decision=[4, 4, 4, 2, 1])
l72, l73, l74, l75, l76 = sch.split(loop=l44, factors=[v67, v68, v69, v70, v71], preserve_unit_iters=True)
v77, v78, v79, v80, v81 = sch.sample_perfect_tile(loop=l45, n=5, max_innermost_factor=64, decision=[7, 7, 4, 2, 2])
l82, l83, l84, l85, l86 = sch.split(loop=l45, factors=[v77, v78, v79, v80, v81], preserve_unit_iters=True)
v87, v88, v89 = sch.sample_perfect_tile(loop=l46, n=3, max_innermost_factor=64, decision=[32, 1, 2])
l90, l91, l92 = sch.split(loop=l46, factors=[v87, v88, v89], preserve_unit_iters=True)
sch.reorder(l52, l62, l72, l82, l53, l63, l73, l83, l54, l64, l74, l84, l90, l91, l55, l65, l75, l85, l92, l56, l66, l76, l86)
l93 = sch.fuse(l52, l62, l72, l82, preserve_unit_iters=True)
sch.bind(loop=l93, thread_axis="blockIdx.x")
l94 = sch.fuse(l53, l63, l73, l83, preserve_unit_iters=True)
sch.bind(loop=l94, thread_axis="vthread.x")
l95 = sch.fuse(l54, l64, l74, l84, preserve_unit_iters=True)
sch.bind(loop=l95, thread_axis="threadIdx.x")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_low_inclusive", ann_val=32)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_high_inclusive", ann_val=1024)
b96 = sch.cache_write(block=b1, write_buffer_index=0, storage_scope="local")
sch.reverse_compute_at(block=b96, loop=l95, preserve_unit_loops=True, index=-1)
b97 = sch.cache_read(block=b1, read_buffer_index=0, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b97, loop=l90, preserve_unit_loops=True, index=-1)
l98, l99, l100, l101, l102, l103, l104, l105 = sch.get_loops(block=b97)
l106 = sch.fuse(l102, l103, l104, l105, preserve_unit_iters=True)
v107 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=1)
sch.annotate(block_or_loop=b97, ann_key="meta_schedule.cooperative_fetch", ann_val=v107)
b108 = sch.cache_read(block=b1, read_buffer_index=1, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b108, loop=l90, preserve_unit_loops=True, index=-1)
l109, l110, l111, l112, l113, l114, l115, l116 = sch.get_loops(block=b108)
l117 = sch.fuse(l113, l114, l115, l116, preserve_unit_iters=True)
v118 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b108, ann_key="meta_schedule.cooperative_fetch", ann_val=v118)
sch.reverse_compute_inline(block=b5)
sch.reverse_compute_inline(block=b4)
v119 = sch.sample_categorical(candidates=[0, 16, 64, 512, 1024], probs=[0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001], decision=4)
sch.annotate(block_or_loop=b6, ann_key="meta_schedule.unroll_explicit", ann_val=v119)
l120, l121, l122, l123, l124, l125 = sch.get_loops(block=b3)
l126 = sch.fuse(l120, l121, l122, l123, preserve_unit_iters=True)
v127 = sch.sample_categorical(candidates=[32, 64, 128, 256, 512, 1024], probs=[0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666], decision=1)
l128, l129 = sch.split(loop=l126, factors=[None, v127], preserve_unit_iters=True)
sch.bind(loop=l128, thread_axis="blockIdx.x")
sch.bind(loop=l129, thread_axis="threadIdx.x")
sch.enter_postproc()
sch.unannotate(block_or_loop=b97, ann_key="meta_schedule.cooperative_fetch")
l130, l131, l132, l133, l134 = sch.get_loops(block=b97)
l135, l136, l137 = sch.split(loop=l134, factors=[None, 48, 2], preserve_unit_iters=True)
sch.vectorize(loop=l137)
sch.bind(loop=l136, thread_axis="threadIdx.x")
sch.unannotate(block_or_loop=b108, ann_key="meta_schedule.cooperative_fetch")
l138, l139, l140, l141, l142 = sch.get_loops(block=b108)
l143, l144, l145 = sch.split(loop=l142, factors=[None, 48, 4], preserve_unit_iters=True)
sch.vectorize(loop=l145)
sch.bind(loop=l144, thread_axis="threadIdx.x")
b146 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b146, ann_key="meta_schedule.unroll_explicit")
b147, b148, b149, b150, b151, b152, b153, b154, b155 = sch.get_child_blocks(b146)
l156, l157, l158, l159, l160, l161 = sch.get_loops(block=b147)
l162, l163, l164, l165, l166, l167 = sch.get_loops(block=b148)
sch.annotate(block_or_loop=l162, ann_key="pragma_auto_unroll_max_step", ann_val=1024)
sch.annotate(block_or_loop=l162, ann_key="pragma_unroll_explicit", ann_val=1)
l168, l169, l170, l171, l172, l173 = sch.get_loops(block=b149)
l174, l175, l176, l177, l178, l179, l180 = sch.get_loops(block=b150)
l181, l182, l183, l184, l185, l186, l187 = sch.get_loops(block=b151)
l188, l189, l190, l191, l192, l193, l194, l195, l196, l197, l198, l199, l200, l201 = sch.get_loops(block=b152)
sch.annotate(block_or_loop=l188, ann_key="pragma_auto_unroll_max_step", ann_val=1024)
sch.annotate(block_or_loop=l188, ann_key="pragma_unroll_explicit", ann_val=1)
l202, l203, l204, l205, l206, l207, l208 = sch.get_loops(block=b153)
l209, l210, l211, l212, l213, l214, l215, l216 = sch.get_loops(block=b154)
sch.annotate(block_or_loop=l209, ann_key="pragma_auto_unroll_max_step", ann_val=1024)
sch.annotate(block_or_loop=l209, ann_key="pragma_unroll_explicit", ann_val=1)
l217, l218, l219, l220 = sch.get_loops(block=b155)
b221 = sch.get_block(name="data_pack", func_name="main")
l222, l223, l224, l225, l226, l227 = sch.get_loops(block=b221)
b228 = sch.decompose_reduction(block=b221, loop=l226)
b229 = sch.get_block(name="bgemm", func_name="main")
l230, l231, l232, l233, l234, l235, l236, l237, l238, l239, l240, l241, l242, l243 = sch.get_loops(block=b229)
b244 = sch.decompose_reduction(block=b229, loop=l233)
b245 = sch.get_block(name="inverse", func_name="main")
l246, l247, l248, l249, l250, l251, l252, l253 = sch.get_loops(block=b245)
b254 = sch.decompose_reduction(block=b245, loop=l252)
2024-04-28 20:23:59 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #45: GFLOPs: 33.3634. Time: 25001.2167 us. Best GFLOPs: 8099.6167
2024-04-28 20:23:59 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #46: GFLOPs: 2580.7525. Time: 323.2103 us. Best GFLOPs: 8099.6167
2024-04-28 20:23:59 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #47: GFLOPs: 7036.0684. Time: 118.5500 us. Best GFLOPs: 8099.6167
2024-04-28 20:23:59 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #48: GFLOPs: 1151.6983. Time: 724.2573 us. Best GFLOPs: 8099.6167
2024-04-28 20:23:59 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #49: GFLOPs: 4946.5657. Time: 168.6273 us. Best GFLOPs: 8099.6167
2024-04-28 20:23:59 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #50: GFLOPs: 2000.1420. Time: 417.0333 us. Best GFLOPs: 8099.6167
2024-04-28 20:23:59 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #51: GFLOPs: 253.5887. Time: 3289.2862 us. Best GFLOPs: 8099.6167
2024-04-28 20:23:59 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #52: GFLOPs: 8674.5521. Time: 96.1578 us. Best GFLOPs: 8674.5521
2024-04-28 20:23:59 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #53: GFLOPs: 223.8575. Time: 3726.1463 us. Best GFLOPs: 8674.5521
2024-04-28 20:23:59 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #54: GFLOPs: 601.7259. Time: 1386.2223 us. Best GFLOPs: 8674.5521
2024-04-28 20:23:59 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #55: GFLOPs: 1427.7412. Time: 584.2276 us. Best GFLOPs: 8674.5521
2024-04-28 20:23:59 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #56: GFLOPs: 352.8577. Time: 2363.9159 us. Best GFLOPs: 8674.5521
2024-04-28 20:23:59 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #57: GFLOPs: 2528.3686. Time: 329.9067 us. Best GFLOPs: 8674.5521
2024-04-28 20:23:59 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #58: GFLOPs: 490.3730. Time: 1701.0029 us. Best GFLOPs: 8674.5521
2024-04-28 20:23:59 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #59: GFLOPs: 1028.9016. Time: 810.6954 us. Best GFLOPs: 8674.5521
2024-04-28 20:23:59 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #60: GFLOPs: 2559.3558. Time: 325.9124 us. Best GFLOPs: 8674.5521
2024-04-28 20:23:59 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #61: GFLOPs: 108.5819. Time: 7681.9995 us. Best GFLOPs: 8674.5521
2024-04-28 20:23:59 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #62: GFLOPs: 2435.7162. Time: 342.4561 us. Best GFLOPs: 8674.5521
2024-04-28 20:23:59 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #63: GFLOPs: 588.1706. Time: 1418.1698 us. Best GFLOPs: 8674.5521
2024-04-28 20:23:59 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #64: GFLOPs: 37.2579. Time: 22387.9164 us. Best GFLOPs: 8674.5521
2024-04-28 20:46:37 [INFO] [evolutionary_search.cc:713] Generating candidates......
2024-04-28 20:46:39 [INFO] [evolutionary_search.cc:715] Picked top 61 candidate(s) from database
2024-04-28 20:46:47 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x43caf38)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x6f9f348)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x70a6218)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x9268ff8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x9288ea8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x70936f8)]: 442 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x3ab3ae8)]: 0 failure(s)
2024-04-28 20:46:54 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x43caf38)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x6f9f348)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x70a6218)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x9268ff8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x9288ea8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x70936f8)]: 886 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x3ab3ae8)]: 0 failure(s)
2024-04-28 20:47:01 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x43caf38)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x6f9f348)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x70a6218)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x9268ff8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x9288ea8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x70936f8)]: 1322 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x3ab3ae8)]: 0 failure(s)
2024-04-28 20:47:08 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x43caf38)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x6f9f348)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x70a6218)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x9268ff8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x9288ea8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x70936f8)]: 1766 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x3ab3ae8)]: 0 failure(s)
2024-04-28 20:47:16 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x43caf38)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x6f9f348)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x70a6218)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x9268ff8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x9288ea8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x70936f8)]: 2204 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x3ab3ae8)]: 0 failure(s)
2024-04-28 20:47:16 [INFO] [evolutionary_search.cc:723] Sampled 51 candidate(s)
2024-04-28 20:47:36 [INFO] [evolutionary_search.cc:621] Evolve iter #0 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x43caf38)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x6f9f348)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x70a6218)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x9268ff8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x9288ea8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x70936f8)]: 140 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x3ab3ae8)]: 0 failure(s)
2024-04-28 20:47:59 [INFO] [evolutionary_search.cc:621] Evolve iter #1 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x43caf38)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x6f9f348)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x70a6218)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x9268ff8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x9288ea8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x70936f8)]: 142 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x3ab3ae8)]: 0 failure(s)
2024-04-28 20:48:22 [INFO] [evolutionary_search.cc:621] Evolve iter #2 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x43caf38)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x6f9f348)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x70a6218)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x9268ff8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x9288ea8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x70936f8)]: 95 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x3ab3ae8)]: 0 failure(s)
2024-04-28 20:48:44 [INFO] [evolutionary_search.cc:621] Evolve iter #3 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x43caf38)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x6f9f348)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x70a6218)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x9268ff8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x9288ea8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x70936f8)]: 116 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x3ab3ae8)]: 0 failure(s)
2024-04-28 20:48:49 [INFO] [evolutionary_search.cc:649] Scores of the best 64 candidates:
[1 : 16]:	1.1098  1.0633  1.0371  1.0308  1.0293  0.9959  0.9860  0.9838  0.9838  0.9838  0.9838  0.9770  0.9750  0.9750  0.9750  0.9748
[17 : 32]:	0.9748  0.9748  0.9748  0.9740  0.9740  0.9740  0.9739  0.9739  0.9727  0.9722  0.9698  0.9672  0.9672  0.9665  0.9665  0.9600
[33 : 48]:	0.9558  0.9558  0.9537  0.9537  0.9425  0.9354  0.9341  0.9312  0.9312  0.9302  0.9284  0.9282  0.9263  0.9247  0.9246  0.9246
[49 : 64]:	0.9221  0.9220  0.9215  0.9191  0.9187  0.9171  0.9143  0.9143  0.9109  0.9105  0.9101  0.9099  0.9084  0.9053  0.9045  0.9045
2024-04-28 20:48:49 [INFO] [evolutionary_search.cc:727] Got 64 candidate(s) with evolutionary search
2024-04-28 20:48:49 [INFO] [evolutionary_search.cc:730] Sending 64 candidates(s) for measurement
2024-04-28 20:50:05 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #65: GFLOPs: 3957.8935. Time: 210.7499 us. Best GFLOPs: 8674.5521
2024-04-28 20:50:05 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #66: GFLOPs: 5865.9851. Time: 142.1971 us. Best GFLOPs: 8674.5521
2024-04-28 20:50:05 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #67: GFLOPs: 7362.8615. Time: 113.2883 us. Best GFLOPs: 8674.5521
2024-04-28 20:50:05 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #68: GFLOPs: 8666.5763. Time: 96.2463 us. Best GFLOPs: 8674.5521
2024-04-28 20:50:05 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #69: GFLOPs: 6903.2292. Time: 120.8313 us. Best GFLOPs: 8674.5521
2024-04-28 20:50:05 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #70: GFLOPs: 8618.7255. Time: 96.7806 us. Best GFLOPs: 8674.5521
2024-04-28 20:50:05 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #71: GFLOPs: 8922.6303. Time: 93.4843 us. Best GFLOPs: 8922.6303
2024-04-28 20:50:05 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #72: GFLOPs: 9030.1608. Time: 92.3711 us. Best GFLOPs: 9030.1608
2024-04-28 20:50:05 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #73: GFLOPs: 8149.7459. Time: 102.3499 us. Best GFLOPs: 9030.1608
2024-04-28 20:50:05 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #74: GFLOPs: 8780.5354. Time: 94.9971 us. Best GFLOPs: 9030.1608
2024-04-28 20:50:05 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #75: GFLOPs: 8878.8675. Time: 93.9451 us. Best GFLOPs: 9030.1608
2024-04-28 20:50:05 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #76: GFLOPs: 9047.6104. Time: 92.1929 us. Best GFLOPs: 9047.6104
2024-04-28 20:50:05 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #77: GFLOPs: 8646.6571. Time: 96.4680 us. Best GFLOPs: 9047.6104
2024-04-28 20:50:05 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #78: GFLOPs: 8673.1978. Time: 96.1728 us. Best GFLOPs: 9047.6104
2024-04-28 20:50:05 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #79: GFLOPs: 8552.0989. Time: 97.5346 us. Best GFLOPs: 9047.6104
2024-04-28 20:50:05 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #80: GFLOPs: 9277.6196. Time: 89.9073 us. Best GFLOPs: 9277.6196
2024-04-28 20:50:05 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #81: GFLOPs: 9403.8469. Time: 88.7005 us. Best GFLOPs: 9403.8469
2024-04-28 20:50:05 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #82: GFLOPs: 9061.6905. Time: 92.0497 us. Best GFLOPs: 9403.8469
2024-04-28 20:50:05 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #83: GFLOPs: 9212.2715. Time: 90.5451 us. Best GFLOPs: 9403.8469
2024-04-28 20:50:05 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #84: GFLOPs: 8781.5682. Time: 94.9860 us. Best GFLOPs: 9403.8469
2024-04-28 20:50:05 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #85: GFLOPs: 8710.2185. Time: 95.7641 us. Best GFLOPs: 9403.8469
2024-04-28 20:50:05 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #86: GFLOPs: 8691.5194. Time: 95.9701 us. Best GFLOPs: 9403.8469
2024-04-28 20:50:05 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #87: GFLOPs: 8775.4137. Time: 95.0526 us. Best GFLOPs: 9403.8469
2024-04-28 20:50:05 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #88: GFLOPs: 8841.5229. Time: 94.3419 us. Best GFLOPs: 9403.8469
2024-04-28 20:50:05 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #89: GFLOPs: 9265.6290. Time: 90.0237 us. Best GFLOPs: 9403.8469
2024-04-28 20:50:05 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #90: GFLOPs: 9329.2322. Time: 89.4099 us. Best GFLOPs: 9403.8469
2024-04-28 20:50:05 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #91: GFLOPs: 9007.1933. Time: 92.6066 us. Best GFLOPs: 9403.8469
2024-04-28 20:50:05 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #92: GFLOPs: 9083.4682. Time: 91.8290 us. Best GFLOPs: 9403.8469
2024-04-28 20:50:05 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #93: GFLOPs: 9142.1817. Time: 91.2393 us. Best GFLOPs: 9403.8469
2024-04-28 20:50:05 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #94: GFLOPs: 8974.2882. Time: 92.9462 us. Best GFLOPs: 9403.8469
2024-04-28 20:50:05 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #95: GFLOPs: 8907.4765. Time: 93.6433 us. Best GFLOPs: 9403.8469
2024-04-28 20:50:05 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #96: GFLOPs: 9015.3357. Time: 92.5230 us. Best GFLOPs: 9403.8469
2024-04-28 20:50:05 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #97: GFLOPs: 8145.1129. Time: 102.4081 us. Best GFLOPs: 9403.8469
2024-04-28 20:50:05 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #98: GFLOPs: 7991.4118. Time: 104.3778 us. Best GFLOPs: 9403.8469
2024-04-28 20:50:05 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #99: GFLOPs: 8568.1860. Time: 97.3515 us. Best GFLOPs: 9403.8469
2024-04-28 20:50:05 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #100: GFLOPs: 8537.8414. Time: 97.6975 us. Best GFLOPs: 9403.8469
2024-04-28 20:50:05 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #101: GFLOPs: 8072.0606. Time: 103.3349 us. Best GFLOPs: 9403.8469
2024-04-28 20:50:05 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #102: GFLOPs: 8775.7618. Time: 95.0488 us. Best GFLOPs: 9403.8469
2024-04-28 20:50:05 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #103: GFLOPs: 8860.3904. Time: 94.1410 us. Best GFLOPs: 9403.8469
2024-04-28 20:50:05 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #104: GFLOPs: 9225.9400. Time: 90.4109 us. Best GFLOPs: 9403.8469
2024-04-28 20:50:05 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #105: GFLOPs: 9243.7401. Time: 90.2368 us. Best GFLOPs: 9403.8469
2024-04-28 20:50:05 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #106: GFLOPs: 8964.1213. Time: 93.0516 us. Best GFLOPs: 9403.8469
2024-04-28 20:50:05 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #107: GFLOPs: 8275.3435. Time: 100.7965 us. Best GFLOPs: 9403.8469
2024-04-28 20:50:05 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #108: GFLOPs: 8443.1586. Time: 98.7931 us. Best GFLOPs: 9403.8469
2024-04-28 20:50:05 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #109: GFLOPs: 5521.9076. Time: 151.0575 us. Best GFLOPs: 9403.8469
2024-04-28 20:50:05 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #110: GFLOPs: 9805.9372. Time: 85.0633 us. Best GFLOPs: 9805.9372
2024-04-28 20:50:05 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #111: GFLOPs: 6120.0417. Time: 136.2941 us. Best GFLOPs: 9805.9372
2024-04-28 20:50:05 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #112: GFLOPs: 6200.7446. Time: 134.5203 us. Best GFLOPs: 9805.9372
2024-04-28 20:50:05 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #113: GFLOPs: 7401.6731. Time: 112.6942 us. Best GFLOPs: 9805.9372
2024-04-28 20:50:05 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #114: GFLOPs: 8271.1039. Time: 100.8482 us. Best GFLOPs: 9805.9372
2024-04-28 20:50:05 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #115: GFLOPs: 8117.0594. Time: 102.7621 us. Best GFLOPs: 9805.9372
2024-04-28 20:50:05 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #116: GFLOPs: 9205.2176. Time: 90.6145 us. Best GFLOPs: 9805.9372
2024-04-28 20:50:05 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #117: GFLOPs: 8646.8592. Time: 96.4658 us. Best GFLOPs: 9805.9372
2024-04-28 20:50:05 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #118: GFLOPs: 6818.1471. Time: 122.3391 us. Best GFLOPs: 9805.9372
2024-04-28 20:50:05 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #119: GFLOPs: 6664.0419. Time: 125.1682 us. Best GFLOPs: 9805.9372
2024-04-28 20:50:05 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #120: GFLOPs: 6664.5488. Time: 125.1586 us. Best GFLOPs: 9805.9372
2024-04-28 20:50:05 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #121: GFLOPs: 5075.3208. Time: 164.3494 us. Best GFLOPs: 9805.9372
2024-04-28 20:50:05 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #122: GFLOPs: 7002.0419. Time: 119.1261 us. Best GFLOPs: 9805.9372
2024-04-28 20:50:05 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #123: GFLOPs: 6200.5815. Time: 134.5238 us. Best GFLOPs: 9805.9372
2024-04-28 20:50:05 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #124: GFLOPs: 6578.5331. Time: 126.7951 us. Best GFLOPs: 9805.9372
2024-04-28 20:50:05 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #125: GFLOPs: 6988.9877. Time: 119.3486 us. Best GFLOPs: 9805.9372
2024-04-28 20:50:05 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #126: GFLOPs: 247.0383. Time: 3376.5035 us. Best GFLOPs: 9805.9372
2024-04-28 20:50:05 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #127: GFLOPs: 5432.7572. Time: 153.5364 us. Best GFLOPs: 9805.9372
2024-04-28 20:50:05 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #128: GFLOPs: 679.6352. Time: 1227.3140 us. Best GFLOPs: 9805.9372
2024-04-28 21:32:53 [INFO] [evolutionary_search.cc:713] Generating candidates......
2024-04-28 21:32:56 [INFO] [evolutionary_search.cc:715] Picked top 102 candidate(s) from database
2024-04-28 21:33:04 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x43caf38)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x6f9f348)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x70a6218)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x9268ff8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x9288ea8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x70936f8)]: 405 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x3ab3ae8)]: 0 failure(s)
2024-04-28 21:33:11 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x43caf38)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x6f9f348)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x70a6218)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x9268ff8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x9288ea8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x70936f8)]: 809 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x3ab3ae8)]: 0 failure(s)
2024-04-28 21:33:18 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x43caf38)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x6f9f348)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x70a6218)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x9268ff8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x9288ea8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x70936f8)]: 1206 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x3ab3ae8)]: 0 failure(s)
2024-04-28 21:33:25 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x43caf38)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x6f9f348)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x70a6218)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x9268ff8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x9288ea8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x70936f8)]: 1608 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x3ab3ae8)]: 0 failure(s)
2024-04-28 21:33:33 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x43caf38)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x6f9f348)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x70a6218)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x9268ff8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x9288ea8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x70936f8)]: 2007 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x3ab3ae8)]: 0 failure(s)
2024-04-28 21:33:40 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x43caf38)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x6f9f348)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x70a6218)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x9268ff8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x9288ea8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x70936f8)]: 2415 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x3ab3ae8)]: 0 failure(s)
2024-04-28 21:33:47 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x43caf38)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x6f9f348)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x70a6218)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x9268ff8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x9288ea8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x70936f8)]: 2820 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x3ab3ae8)]: 0 failure(s)
2024-04-28 21:33:47 [INFO] [evolutionary_search.cc:723] Sampled 50 candidate(s)
2024-04-28 21:34:09 [INFO] [evolutionary_search.cc:621] Evolve iter #0 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x43caf38)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x6f9f348)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x70a6218)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x9268ff8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x9288ea8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x70936f8)]: 170 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x3ab3ae8)]: 0 failure(s)
2024-04-28 21:34:34 [INFO] [evolutionary_search.cc:621] Evolve iter #1 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x43caf38)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x6f9f348)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x70a6218)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x9268ff8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x9288ea8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x70936f8)]: 152 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x3ab3ae8)]: 0 failure(s)
2024-04-28 21:34:59 [INFO] [evolutionary_search.cc:621] Evolve iter #2 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x43caf38)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x6f9f348)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x70a6218)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x9268ff8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x9288ea8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x70936f8)]: 147 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x3ab3ae8)]: 0 failure(s)
2024-04-28 21:35:24 [INFO] [evolutionary_search.cc:621] Evolve iter #3 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x43caf38)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x6f9f348)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x70a6218)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x9268ff8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x9288ea8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x70936f8)]: 147 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x3ab3ae8)]: 0 failure(s)
2024-04-28 21:35:29 [INFO] [evolutionary_search.cc:649] Scores of the best 64 candidates:
[1 : 16]:	0.9759  0.9759  0.9724  0.9631  0.9592  0.9559  0.9499  0.9486  0.9475  0.9464  0.9436  0.9371  0.9371  0.9346  0.9340  0.9298
[17 : 32]:	0.9297  0.9296  0.9296  0.9289  0.9289  0.9278  0.9273  0.9269  0.9269  0.9262  0.9259  0.9257  0.9255  0.9251  0.9247  0.9244
[33 : 48]:	0.9239  0.9238  0.9234  0.9225  0.9222  0.9220  0.9219  0.9218  0.9218  0.9214  0.9214  0.9214  0.9210  0.9210  0.9209  0.9209
[49 : 64]:	0.9207  0.9204  0.9204  0.9195  0.9194  0.9194  0.9188  0.9186  0.9180  0.9173  0.9170  0.9170  0.9170  0.9170  0.9170  0.9170
2024-04-28 21:35:30 [INFO] [evolutionary_search.cc:727] Got 64 candidate(s) with evolutionary search
2024-04-28 21:35:30 [INFO] [evolutionary_search.cc:730] Sending 64 candidates(s) for measurement
2024-04-28 21:36:33 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #129: GFLOPs: 9697.5877. Time: 86.0137 us. Best GFLOPs: 9805.9372
2024-04-28 21:36:33 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #130: GFLOPs: 9741.6015. Time: 85.6251 us. Best GFLOPs: 9805.9372
2024-04-28 21:36:33 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #131: GFLOPs: 8883.6010. Time: 93.8950 us. Best GFLOPs: 9805.9372
2024-04-28 21:36:33 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #132: GFLOPs: 9650.3431. Time: 86.4348 us. Best GFLOPs: 9805.9372
2024-04-28 21:36:33 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #133: GFLOPs: 9613.8157. Time: 86.7632 us. Best GFLOPs: 9805.9372
2024-04-28 21:36:33 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #134: GFLOPs: 10057.9365. Time: 82.9321 us. Best GFLOPs: 10057.9365
2024-04-28 21:36:33 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #135: GFLOPs: 9635.2051. Time: 86.5706 us. Best GFLOPs: 10057.9365
2024-04-28 21:36:33 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #136: GFLOPs: 9278.2770. Time: 89.9009 us. Best GFLOPs: 10057.9365
2024-04-28 21:36:33 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #137: GFLOPs: 8735.6047. Time: 95.4858 us. Best GFLOPs: 10057.9365
2024-04-28 21:36:33 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #138: GFLOPs: 9575.5260. Time: 87.1102 us. Best GFLOPs: 10057.9365
2024-04-28 21:36:33 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #139: GFLOPs: 8872.9338. Time: 94.0079 us. Best GFLOPs: 10057.9365
2024-04-28 21:36:33 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #140: GFLOPs: 9564.1571. Time: 87.2137 us. Best GFLOPs: 10057.9365
2024-04-28 21:36:33 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #141: GFLOPs: 9566.2643. Time: 87.1945 us. Best GFLOPs: 10057.9365
2024-04-28 21:36:33 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #142: GFLOPs: 9218.8284. Time: 90.4807 us. Best GFLOPs: 10057.9365
2024-04-28 21:36:33 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #143: GFLOPs: 8467.6281. Time: 98.5076 us. Best GFLOPs: 10057.9365
2024-04-28 21:36:33 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #144: GFLOPs: 9139.1614. Time: 91.2694 us. Best GFLOPs: 10057.9365
2024-04-28 21:36:33 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #145: GFLOPs: 8771.8703. Time: 95.0910 us. Best GFLOPs: 10057.9365
2024-04-28 21:36:33 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #146: GFLOPs: 9267.0305. Time: 90.0100 us. Best GFLOPs: 10057.9365
2024-04-28 21:36:33 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #147: GFLOPs: 9593.0972. Time: 86.9506 us. Best GFLOPs: 10057.9365
2024-04-28 21:36:33 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #148: GFLOPs: 9275.6934. Time: 89.9260 us. Best GFLOPs: 10057.9365
2024-04-28 21:36:33 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #149: GFLOPs: 9017.0871. Time: 92.5050 us. Best GFLOPs: 10057.9365
2024-04-28 21:36:33 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #150: GFLOPs: 8708.2718. Time: 95.7855 us. Best GFLOPs: 10057.9365
2024-04-28 21:36:33 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #151: GFLOPs: 9067.0662. Time: 91.9951 us. Best GFLOPs: 10057.9365
2024-04-28 21:36:33 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #152: GFLOPs: 9225.1877. Time: 90.4183 us. Best GFLOPs: 10057.9365
2024-04-28 21:36:33 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #153: GFLOPs: 8345.0052. Time: 99.9551 us. Best GFLOPs: 10057.9365
2024-04-28 21:36:33 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #154: GFLOPs: 9287.2386. Time: 89.8142 us. Best GFLOPs: 10057.9365
2024-04-28 21:36:33 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #155: GFLOPs: 10202.3825. Time: 81.7579 us. Best GFLOPs: 10202.3825
2024-04-28 21:36:33 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #156: GFLOPs: 7422.5310. Time: 112.3775 us. Best GFLOPs: 10202.3825
2024-04-28 21:36:33 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #157: GFLOPs: 9095.8618. Time: 91.7039 us. Best GFLOPs: 10202.3825
2024-04-28 21:36:33 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #158: GFLOPs: 5463.0141. Time: 152.6860 us. Best GFLOPs: 10202.3825
2024-04-28 21:36:33 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #159: GFLOPs: 9146.8857. Time: 91.1923 us. Best GFLOPs: 10202.3825
2024-04-28 21:36:33 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #160: GFLOPs: 9088.0706. Time: 91.7825 us. Best GFLOPs: 10202.3825
2024-04-28 21:36:33 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #161: GFLOPs: 8862.8242. Time: 94.1151 us. Best GFLOPs: 10202.3825
2024-04-28 21:36:33 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #162: GFLOPs: 9980.8056. Time: 83.5730 us. Best GFLOPs: 10202.3825
2024-04-28 21:36:33 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #163: GFLOPs: 8215.6010. Time: 101.5295 us. Best GFLOPs: 10202.3825
2024-04-28 21:36:33 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #164: GFLOPs: 8813.6305. Time: 94.6404 us. Best GFLOPs: 10202.3825
2024-04-28 21:36:33 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #165: GFLOPs: 9044.1689. Time: 92.2280 us. Best GFLOPs: 10202.3825
2024-04-28 21:36:33 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #166: GFLOPs: 8954.3305. Time: 93.1533 us. Best GFLOPs: 10202.3825
2024-04-28 21:36:33 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #167: GFLOPs: 8236.6815. Time: 101.2696 us. Best GFLOPs: 10202.3825
2024-04-28 21:36:33 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #168: GFLOPs: 8806.5737. Time: 94.7163 us. Best GFLOPs: 10202.3825
2024-04-28 21:36:33 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #169: GFLOPs: 8003.4400. Time: 104.2209 us. Best GFLOPs: 10202.3825
2024-04-28 21:36:33 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #170: GFLOPs: 8830.9266. Time: 94.4551 us. Best GFLOPs: 10202.3825
2024-04-28 21:36:33 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #171: GFLOPs: 9036.7178. Time: 92.3041 us. Best GFLOPs: 10202.3825
2024-04-28 21:36:33 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #172: GFLOPs: 9091.6606. Time: 91.7463 us. Best GFLOPs: 10202.3825
2024-04-28 21:36:33 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #173: GFLOPs: 7659.8437. Time: 108.8959 us. Best GFLOPs: 10202.3825
2024-04-28 21:36:33 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #174: GFLOPs: 8858.5038. Time: 94.1610 us. Best GFLOPs: 10202.3825
2024-04-28 21:36:33 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #175: GFLOPs: 9038.3596. Time: 92.2873 us. Best GFLOPs: 10202.3825
2024-04-28 21:36:33 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #176: GFLOPs: 8982.9661. Time: 92.8564 us. Best GFLOPs: 10202.3825
2024-04-28 21:36:33 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #177: GFLOPs: 9079.3702. Time: 91.8704 us. Best GFLOPs: 10202.3825
2024-04-28 21:36:33 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #178: GFLOPs: 9452.3701. Time: 88.2452 us. Best GFLOPs: 10202.3825
2024-04-28 21:36:33 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #179: GFLOPs: 9480.4266. Time: 87.9840 us. Best GFLOPs: 10202.3825
2024-04-28 21:36:33 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #180: GFLOPs: 8755.7493. Time: 95.2661 us. Best GFLOPs: 10202.3825
2024-04-28 21:36:33 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #181: GFLOPs: 8621.9218. Time: 96.7448 us. Best GFLOPs: 10202.3825
2024-04-28 21:36:33 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #182: GFLOPs: 8759.4078. Time: 95.2263 us. Best GFLOPs: 10202.3825
2024-04-28 21:36:33 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #183: GFLOPs: 9167.2281. Time: 90.9900 us. Best GFLOPs: 10202.3825
2024-04-28 21:36:33 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #184: GFLOPs: 8867.1532. Time: 94.0692 us. Best GFLOPs: 10202.3825
2024-04-28 21:36:33 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #185: GFLOPs: 8266.1235. Time: 100.9089 us. Best GFLOPs: 10202.3825
2024-04-28 21:36:33 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #186: GFLOPs: 8296.2212. Time: 100.5429 us. Best GFLOPs: 10202.3825
2024-04-28 21:36:33 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #187: GFLOPs: 7700.7808. Time: 108.3170 us. Best GFLOPs: 10202.3825
2024-04-28 21:36:33 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #188: GFLOPs: 9129.3607. Time: 91.3674 us. Best GFLOPs: 10202.3825
2024-04-28 21:36:33 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #189: GFLOPs: 9183.3311. Time: 90.8304 us. Best GFLOPs: 10202.3825
2024-04-28 21:36:33 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #190: GFLOPs: 484.2389. Time: 1722.5501 us. Best GFLOPs: 10202.3825
2024-04-28 21:36:33 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #191: GFLOPs: 4853.6580. Time: 171.8551 us. Best GFLOPs: 10202.3825
2024-04-28 21:36:33 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #192: GFLOPs: 1633.3894. Time: 510.6717 us. Best GFLOPs: 10202.3825
2024-04-28 22:09:13 [INFO] [evolutionary_search.cc:713] Generating candidates......
2024-04-28 22:09:17 [INFO] [evolutionary_search.cc:715] Picked top 102 candidate(s) from database
2024-04-28 22:09:24 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x43caf38)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x6f9f348)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x70a6218)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x9268ff8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x9288ea8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x70936f8)]: 401 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x3ab3ae8)]: 0 failure(s)
2024-04-28 22:09:30 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x43caf38)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x6f9f348)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x70a6218)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x9268ff8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x9288ea8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x70936f8)]: 806 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x3ab3ae8)]: 0 failure(s)
2024-04-28 22:09:37 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x43caf38)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x6f9f348)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x70a6218)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x9268ff8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x9288ea8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x70936f8)]: 1213 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x3ab3ae8)]: 0 failure(s)
2024-04-28 22:09:44 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x43caf38)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x6f9f348)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x70a6218)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x9268ff8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x9288ea8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x70936f8)]: 1617 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x3ab3ae8)]: 0 failure(s)
2024-04-28 22:09:50 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x43caf38)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x6f9f348)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x70a6218)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x9268ff8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x9288ea8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x70936f8)]: 2020 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x3ab3ae8)]: 0 failure(s)
2024-04-28 22:09:58 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x43caf38)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x6f9f348)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x70a6218)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x9268ff8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x9288ea8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x70936f8)]: 2426 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x3ab3ae8)]: 0 failure(s)
2024-04-28 22:10:04 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x43caf38)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x6f9f348)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x70a6218)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x9268ff8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x9288ea8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x70936f8)]: 2828 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x3ab3ae8)]: 0 failure(s)
2024-04-28 22:10:12 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x43caf38)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x6f9f348)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x70a6218)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x9268ff8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x9288ea8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x70936f8)]: 3229 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x3ab3ae8)]: 0 failure(s)
2024-04-28 22:10:12 [INFO] [evolutionary_search.cc:723] Sampled 51 candidate(s)
2024-04-28 22:10:34 [INFO] [evolutionary_search.cc:621] Evolve iter #0 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x43caf38)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x6f9f348)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x70a6218)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x9268ff8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x9288ea8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x70936f8)]: 171 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x3ab3ae8)]: 0 failure(s)
2024-04-28 22:11:00 [INFO] [evolutionary_search.cc:621] Evolve iter #1 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x43caf38)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x6f9f348)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x70a6218)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x9268ff8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x9288ea8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x70936f8)]: 166 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x3ab3ae8)]: 0 failure(s)
2024-04-28 22:11:25 [INFO] [evolutionary_search.cc:621] Evolve iter #2 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x43caf38)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x6f9f348)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x70a6218)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x9268ff8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x9288ea8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x70936f8)]: 143 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x3ab3ae8)]: 0 failure(s)
2024-04-28 22:11:50 [INFO] [evolutionary_search.cc:621] Evolve iter #3 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x43caf38)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x6f9f348)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x70a6218)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x9268ff8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x9288ea8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x70936f8)]: 141 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x3ab3ae8)]: 0 failure(s)
2024-04-28 22:11:55 [INFO] [evolutionary_search.cc:649] Scores of the best 64 candidates:
[1 : 16]:	1.0513  1.0462  1.0445  1.0389  1.0385  1.0374  1.0374  1.0373  1.0333  1.0331  1.0322  1.0322  1.0318  1.0281  1.0270  1.0242
[17 : 32]:	1.0199  1.0193  1.0189  1.0155  1.0148  1.0087  1.0071  1.0033  0.9889  0.9848  0.9825  0.9821  0.9818  0.9772  0.9757  0.9727
[33 : 48]:	0.9687  0.9668  0.9658  0.9657  0.9652  0.9602  0.9599  0.9593  0.9590  0.9577  0.9565  0.9551  0.9547  0.9546  0.9545  0.9534
[49 : 64]:	0.9530  0.9500  0.9498  0.9487  0.9453  0.9450  0.9427  0.9424  0.9411  0.9411  0.9406  0.9404  0.9389  0.9385  0.9372  0.9368
2024-04-28 22:11:55 [INFO] [evolutionary_search.cc:727] Got 64 candidate(s) with evolutionary search
2024-04-28 22:11:55 [INFO] [evolutionary_search.cc:730] Sending 64 candidates(s) for measurement
2024-04-28 22:12:59 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #193: GFLOPs: 9748.0886. Time: 85.5681 us. Best GFLOPs: 10202.3825
2024-04-28 22:12:59 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #194: GFLOPs: 9785.5323. Time: 85.2407 us. Best GFLOPs: 10202.3825
2024-04-28 22:12:59 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #195: GFLOPs: 9658.3391. Time: 86.3633 us. Best GFLOPs: 10202.3825
2024-04-28 22:12:59 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #196: GFLOPs: 9970.5162. Time: 83.6592 us. Best GFLOPs: 10202.3825
2024-04-28 22:12:59 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #197: GFLOPs: 9533.9358. Time: 87.4902 us. Best GFLOPs: 10202.3825
2024-04-28 22:12:59 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #198: GFLOPs: 9686.8411. Time: 86.1092 us. Best GFLOPs: 10202.3825
2024-04-28 22:12:59 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #199: GFLOPs: 9687.3982. Time: 86.1042 us. Best GFLOPs: 10202.3825
2024-04-28 22:12:59 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #200: GFLOPs: 9931.2542. Time: 83.9900 us. Best GFLOPs: 10202.3825
2024-04-28 22:12:59 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #201: GFLOPs: 9811.6217. Time: 85.0141 us. Best GFLOPs: 10202.3825
2024-04-28 22:12:59 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #202: GFLOPs: 9712.0793. Time: 85.8854 us. Best GFLOPs: 10202.3825
2024-04-28 22:12:59 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #203: GFLOPs: 9697.5206. Time: 86.0143 us. Best GFLOPs: 10202.3825
2024-04-28 22:12:59 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #204: GFLOPs: 9655.7795. Time: 86.3862 us. Best GFLOPs: 10202.3825
2024-04-28 22:12:59 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #205: GFLOPs: 9875.2321. Time: 84.4665 us. Best GFLOPs: 10202.3825
2024-04-28 22:12:59 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #206: GFLOPs: 9758.8828. Time: 85.4735 us. Best GFLOPs: 10202.3825
2024-04-28 22:12:59 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #207: GFLOPs: 9782.5681. Time: 85.2665 us. Best GFLOPs: 10202.3825
2024-04-28 22:12:59 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #208: GFLOPs: 10278.5612. Time: 81.1520 us. Best GFLOPs: 10278.5612
2024-04-28 22:12:59 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #209: GFLOPs: 9874.0860. Time: 84.4763 us. Best GFLOPs: 10278.5612
2024-04-28 22:12:59 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #210: GFLOPs: 9725.2108. Time: 85.7694 us. Best GFLOPs: 10278.5612
2024-04-28 22:12:59 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #211: GFLOPs: 10149.7062. Time: 82.1823 us. Best GFLOPs: 10278.5612
2024-04-28 22:12:59 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #212: GFLOPs: 10175.1717. Time: 81.9766 us. Best GFLOPs: 10278.5612
2024-04-28 22:12:59 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #213: GFLOPs: 9975.7063. Time: 83.6157 us. Best GFLOPs: 10278.5612
2024-04-28 22:12:59 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #214: GFLOPs: 10101.8623. Time: 82.5715 us. Best GFLOPs: 10278.5612
2024-04-28 22:12:59 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #215: GFLOPs: 9845.6222. Time: 84.7205 us. Best GFLOPs: 10278.5612
2024-04-28 22:12:59 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #216: GFLOPs: 9547.3720. Time: 87.3671 us. Best GFLOPs: 10278.5612
2024-04-28 22:12:59 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #217: GFLOPs: 7688.1898. Time: 108.4944 us. Best GFLOPs: 10278.5612
2024-04-28 22:12:59 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #218: GFLOPs: 9646.3160. Time: 86.4709 us. Best GFLOPs: 10278.5612
2024-04-28 22:12:59 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #219: GFLOPs: 10063.3583. Time: 82.8874 us. Best GFLOPs: 10278.5612
2024-04-28 22:12:59 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #220: GFLOPs: 7732.4961. Time: 107.8728 us. Best GFLOPs: 10278.5612
2024-04-28 22:12:59 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #221: GFLOPs: 10317.0161. Time: 80.8495 us. Best GFLOPs: 10317.0161
2024-04-28 22:12:59 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #222: GFLOPs: 9506.7369. Time: 87.7405 us. Best GFLOPs: 10317.0161
2024-04-28 22:12:59 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #223: GFLOPs: 10096.8647. Time: 82.6124 us. Best GFLOPs: 10317.0161
2024-04-28 22:12:59 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #224: GFLOPs: 9940.7674. Time: 83.9096 us. Best GFLOPs: 10317.0161
2024-04-28 22:12:59 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #225: GFLOPs: 10230.2762. Time: 81.5350 us. Best GFLOPs: 10317.0161
2024-04-28 22:12:59 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #226: GFLOPs: 9955.7636. Time: 83.7832 us. Best GFLOPs: 10317.0161
2024-04-28 22:12:59 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #227: GFLOPs: 9840.8862. Time: 84.7613 us. Best GFLOPs: 10317.0161
2024-04-28 22:12:59 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #228: GFLOPs: 8221.6708. Time: 101.4545 us. Best GFLOPs: 10317.0161
2024-04-28 22:12:59 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #229: GFLOPs: 9631.2248. Time: 86.6064 us. Best GFLOPs: 10317.0161
2024-04-28 22:12:59 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #230: GFLOPs: 9755.2590. Time: 85.5052 us. Best GFLOPs: 10317.0161
2024-04-28 22:12:59 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #231: GFLOPs: 9455.0661. Time: 88.2200 us. Best GFLOPs: 10317.0161
2024-04-28 22:12:59 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #232: GFLOPs: 10314.5821. Time: 80.8686 us. Best GFLOPs: 10317.0161
2024-04-28 22:12:59 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #233: GFLOPs: 9615.3808. Time: 86.7491 us. Best GFLOPs: 10317.0161
2024-04-28 22:12:59 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #234: GFLOPs: 6446.1453. Time: 129.3992 us. Best GFLOPs: 10317.0161
2024-04-28 22:12:59 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #235: GFLOPs: 9431.9246. Time: 88.4364 us. Best GFLOPs: 10317.0161
2024-04-28 22:12:59 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #236: GFLOPs: 9687.4376. Time: 86.1039 us. Best GFLOPs: 10317.0161
2024-04-28 22:12:59 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #237: GFLOPs: 9444.0600. Time: 88.3228 us. Best GFLOPs: 10317.0161
2024-04-28 22:12:59 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #238: GFLOPs: 10201.8643. Time: 81.7621 us. Best GFLOPs: 10317.0161
2024-04-28 22:12:59 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #239: GFLOPs: 10199.7626. Time: 81.7789 us. Best GFLOPs: 10317.0161
2024-04-28 22:12:59 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #240: GFLOPs: 10218.6252. Time: 81.6280 us. Best GFLOPs: 10317.0161
2024-04-28 22:12:59 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #241: GFLOPs: 9722.2080. Time: 85.7959 us. Best GFLOPs: 10317.0161
2024-04-28 22:12:59 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #242: GFLOPs: 9622.4151. Time: 86.6857 us. Best GFLOPs: 10317.0161
2024-04-28 22:12:59 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #243: GFLOPs: 9720.9984. Time: 85.8066 us. Best GFLOPs: 10317.0161
2024-04-28 22:12:59 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #244: GFLOPs: 9863.2191. Time: 84.5693 us. Best GFLOPs: 10317.0161
2024-04-28 22:12:59 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #245: GFLOPs: 9992.3072. Time: 83.4768 us. Best GFLOPs: 10317.0161
2024-04-28 22:12:59 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #246: GFLOPs: 9665.6132. Time: 86.2983 us. Best GFLOPs: 10317.0161
2024-04-28 22:12:59 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #247: GFLOPs: 9388.8535. Time: 88.8421 us. Best GFLOPs: 10317.0161
2024-04-28 22:12:59 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #248: GFLOPs: 9709.6845. Time: 85.9066 us. Best GFLOPs: 10317.0161
2024-04-28 22:12:59 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #249: GFLOPs: 10493.4056. Time: 79.4905 us. Best GFLOPs: 10493.4056
2024-04-28 22:12:59 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #250: GFLOPs: 9166.6278. Time: 90.9959 us. Best GFLOPs: 10493.4056
2024-04-28 22:12:59 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #251: GFLOPs: 7610.7204. Time: 109.5988 us. Best GFLOPs: 10493.4056
2024-04-28 22:12:59 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #252: GFLOPs: 9240.8205. Time: 90.2653 us. Best GFLOPs: 10493.4056
2024-04-28 22:12:59 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #253: GFLOPs: 8947.4791. Time: 93.2247 us. Best GFLOPs: 10493.4056
2024-04-28 22:12:59 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #254: GFLOPs: 97.6329. Time: 8543.4882 us. Best GFLOPs: 10493.4056
2024-04-28 22:12:59 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #255: GFLOPs: 1537.5610. Time: 542.4993 us. Best GFLOPs: 10493.4056
2024-04-28 22:12:59 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #256: GFLOPs: 3029.9596. Time: 275.2927 us. Best GFLOPs: 10493.4056
2024-04-28 22:33:38 [INFO] [evolutionary_search.cc:713] Generating candidates......
2024-04-28 22:33:42 [INFO] [evolutionary_search.cc:715] Picked top 102 candidate(s) from database
2024-04-28 22:33:49 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x43caf38)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x6f9f348)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x70a6218)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x9268ff8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x9288ea8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x70936f8)]: 405 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x3ab3ae8)]: 0 failure(s)
2024-04-28 22:33:57 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x43caf38)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x6f9f348)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x70a6218)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x9268ff8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x9288ea8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x70936f8)]: 803 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x3ab3ae8)]: 0 failure(s)
2024-04-28 22:34:04 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x43caf38)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x6f9f348)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x70a6218)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x9268ff8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x9288ea8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x70936f8)]: 1205 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x3ab3ae8)]: 0 failure(s)
2024-04-28 22:34:11 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x43caf38)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x6f9f348)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x70a6218)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x9268ff8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x9288ea8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x70936f8)]: 1610 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x3ab3ae8)]: 0 failure(s)
2024-04-28 22:34:18 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x43caf38)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x6f9f348)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x70a6218)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x9268ff8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x9288ea8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x70936f8)]: 2018 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x3ab3ae8)]: 0 failure(s)
2024-04-28 22:34:26 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x43caf38)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x6f9f348)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x70a6218)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x9268ff8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x9288ea8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x70936f8)]: 2419 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x3ab3ae8)]: 0 failure(s)
2024-04-28 22:34:32 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x43caf38)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x6f9f348)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x70a6218)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x9268ff8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x9288ea8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x70936f8)]: 2826 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x3ab3ae8)]: 0 failure(s)
2024-04-28 22:34:39 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x43caf38)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x6f9f348)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x70a6218)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x9268ff8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x9288ea8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x70936f8)]: 3227 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x3ab3ae8)]: 0 failure(s)
2024-04-28 22:34:39 [INFO] [evolutionary_search.cc:723] Sampled 53 candidate(s)
2024-04-28 22:34:59 [INFO] [evolutionary_search.cc:621] Evolve iter #0 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x43caf38)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x6f9f348)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x70a6218)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x9268ff8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x9288ea8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x70936f8)]: 135 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x3ab3ae8)]: 0 failure(s)
2024-04-28 22:35:23 [INFO] [evolutionary_search.cc:621] Evolve iter #1 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x43caf38)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x6f9f348)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x70a6218)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x9268ff8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x9288ea8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x70936f8)]: 128 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x3ab3ae8)]: 0 failure(s)
2024-04-28 22:35:48 [INFO] [evolutionary_search.cc:621] Evolve iter #2 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x43caf38)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x6f9f348)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x70a6218)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x9268ff8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x9288ea8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x70936f8)]: 131 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x3ab3ae8)]: 0 failure(s)
2024-04-28 22:36:12 [INFO] [evolutionary_search.cc:621] Evolve iter #3 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x43caf38)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x6f9f348)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x70a6218)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x9268ff8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x9288ea8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x70936f8)]: 140 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x3ab3ae8)]: 0 failure(s)
2024-04-28 22:36:17 [INFO] [evolutionary_search.cc:649] Scores of the best 64 candidates:
[1 : 16]:	0.9975  0.9794  0.9794  0.9780  0.9749  0.9698  0.9691  0.9680  0.9678  0.9677  0.9656  0.9641  0.9628  0.9619  0.9613  0.9613
[17 : 32]:	0.9607  0.9578  0.9566  0.9553  0.9553  0.9553  0.9536  0.9531  0.9531  0.9529  0.9527  0.9524  0.9517  0.9516  0.9515  0.9512
[33 : 48]:	0.9509  0.9509  0.9508  0.9487  0.9473  0.9471  0.9470  0.9467  0.9466  0.9463  0.9462  0.9457  0.9457  0.9456  0.9445  0.9445
[49 : 64]:	0.9444  0.9439  0.9438  0.9437  0.9433  0.9429  0.9428  0.9423  0.9420  0.9420  0.9419  0.9416  0.9415  0.9415  0.9415  0.9413
2024-04-28 22:36:18 [INFO] [evolutionary_search.cc:727] Got 64 candidate(s) with evolutionary search
2024-04-28 22:36:18 [INFO] [evolutionary_search.cc:730] Sending 64 candidates(s) for measurement
2024-04-28 22:37:47 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #257: GFLOPs: 9076.4650. Time: 91.8999 us. Best GFLOPs: 10493.4056
2024-04-28 22:37:47 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #258: GFLOPs: 10124.0603. Time: 82.3904 us. Best GFLOPs: 10493.4056
2024-04-28 22:37:47 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #259: GFLOPs: 10235.9030. Time: 81.4902 us. Best GFLOPs: 10493.4056
2024-04-28 22:37:47 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #260: GFLOPs: 10330.0092. Time: 80.7478 us. Best GFLOPs: 10493.4056
2024-04-28 22:37:47 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #261: GFLOPs: 10319.9367. Time: 80.8266 us. Best GFLOPs: 10493.4056
2024-04-28 22:37:47 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #262: GFLOPs: 10159.0935. Time: 82.1063 us. Best GFLOPs: 10493.4056
2024-04-28 22:37:47 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #263: GFLOPs: 10375.1627. Time: 80.3964 us. Best GFLOPs: 10493.4056
2024-04-28 22:37:47 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #264: GFLOPs: 10333.1733. Time: 80.7231 us. Best GFLOPs: 10493.4056
2024-04-28 22:37:47 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #265: GFLOPs: 10446.6953. Time: 79.8459 us. Best GFLOPs: 10493.4056
2024-04-28 22:37:47 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #266: GFLOPs: 9771.6470. Time: 85.3618 us. Best GFLOPs: 10493.4056
2024-04-28 22:37:47 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #267: GFLOPs: 10012.8425. Time: 83.3056 us. Best GFLOPs: 10493.4056
2024-04-28 22:37:47 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #268: GFLOPs: 9916.4695. Time: 84.1152 us. Best GFLOPs: 10493.4056
2024-04-28 22:37:47 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #269: GFLOPs: 10548.4896. Time: 79.0754 us. Best GFLOPs: 10548.4896
2024-04-28 22:37:47 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #270: GFLOPs: 10319.0052. Time: 80.8339 us. Best GFLOPs: 10548.4896
2024-04-28 22:37:47 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #271: GFLOPs: 9585.3801. Time: 87.0206 us. Best GFLOPs: 10548.4896
2024-04-28 22:37:47 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #272: GFLOPs: 10350.9747. Time: 80.5843 us. Best GFLOPs: 10548.4896
2024-04-28 22:37:47 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #273: GFLOPs: 10242.8900. Time: 81.4346 us. Best GFLOPs: 10548.4896
2024-04-28 22:37:47 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #274: GFLOPs: 9809.7522. Time: 85.0303 us. Best GFLOPs: 10548.4896
2024-04-28 22:37:47 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #275: GFLOPs: 10313.4626. Time: 80.8774 us. Best GFLOPs: 10548.4896
2024-04-28 22:37:47 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #276: GFLOPs: 10305.4565. Time: 80.9402 us. Best GFLOPs: 10548.4896
2024-04-28 22:37:47 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #277: GFLOPs: 9028.2387. Time: 92.3908 us. Best GFLOPs: 10548.4896
2024-04-28 22:37:47 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #278: GFLOPs: 10119.9693. Time: 82.4238 us. Best GFLOPs: 10548.4896
2024-04-28 22:37:47 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #279: GFLOPs: 10241.3451. Time: 81.4469 us. Best GFLOPs: 10548.4896
2024-04-28 22:37:47 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #280: GFLOPs: 10256.2358. Time: 81.3287 us. Best GFLOPs: 10548.4896
2024-04-28 22:37:47 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #281: GFLOPs: 10266.0828. Time: 81.2506 us. Best GFLOPs: 10548.4896
2024-04-28 22:37:47 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #282: GFLOPs: 10669.3789. Time: 78.1794 us. Best GFLOPs: 10669.3789
2024-04-28 22:37:47 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #283: GFLOPs: 10620.2258. Time: 78.5413 us. Best GFLOPs: 10669.3789
2024-04-28 22:37:47 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #284: GFLOPs: 10398.7436. Time: 80.2141 us. Best GFLOPs: 10669.3789
2024-04-28 22:37:47 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #285: GFLOPs: 10279.0994. Time: 81.1478 us. Best GFLOPs: 10669.3789
2024-04-28 22:37:47 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #286: GFLOPs: 10162.8065. Time: 82.0763 us. Best GFLOPs: 10669.3789
2024-04-28 22:37:47 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #287: GFLOPs: 10229.2250. Time: 81.5434 us. Best GFLOPs: 10669.3789
2024-04-28 22:37:47 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #288: GFLOPs: 10154.1050. Time: 82.1467 us. Best GFLOPs: 10669.3789
2024-04-28 22:37:47 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #289: GFLOPs: 9364.0228. Time: 89.0777 us. Best GFLOPs: 10669.3789
2024-04-28 22:37:47 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #290: GFLOPs: 10387.6916. Time: 80.2994 us. Best GFLOPs: 10669.3789
2024-04-28 22:37:47 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #291: GFLOPs: 10499.7425. Time: 79.4425 us. Best GFLOPs: 10669.3789
2024-04-28 22:37:47 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #292: GFLOPs: 10318.6432. Time: 80.8368 us. Best GFLOPs: 10669.3789
2024-04-28 22:37:47 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #293: GFLOPs: 10424.3044. Time: 80.0174 us. Best GFLOPs: 10669.3789
2024-04-28 22:37:47 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #294: GFLOPs: 10030.3084. Time: 83.1605 us. Best GFLOPs: 10669.3789
2024-04-28 22:37:47 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #295: GFLOPs: 9662.5718. Time: 86.3254 us. Best GFLOPs: 10669.3789
2024-04-28 22:37:47 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #296: GFLOPs: 10333.6861. Time: 80.7191 us. Best GFLOPs: 10669.3789
2024-04-28 22:37:47 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #297: GFLOPs: 9780.9283. Time: 85.2808 us. Best GFLOPs: 10669.3789
2024-04-28 22:37:47 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #298: GFLOPs: 10103.5808. Time: 82.5574 us. Best GFLOPs: 10669.3789
2024-04-28 22:37:47 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #299: GFLOPs: 10122.3915. Time: 82.4040 us. Best GFLOPs: 10669.3789
2024-04-28 22:37:47 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #300: GFLOPs: 10146.5502. Time: 82.2078 us. Best GFLOPs: 10669.3789
2024-04-28 22:37:47 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #301: GFLOPs: 9801.6625. Time: 85.1004 us. Best GFLOPs: 10669.3789
2024-04-28 22:37:47 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #302: GFLOPs: 9797.5086. Time: 85.1365 us. Best GFLOPs: 10669.3789
2024-04-28 22:37:47 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #303: GFLOPs: 10086.8797. Time: 82.6941 us. Best GFLOPs: 10669.3789
2024-04-28 22:37:47 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #304: GFLOPs: 10278.1215. Time: 81.1555 us. Best GFLOPs: 10669.3789
2024-04-28 22:37:47 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #305: GFLOPs: 9987.4763. Time: 83.5172 us. Best GFLOPs: 10669.3789
2024-04-28 22:37:47 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #306: GFLOPs: 10639.3469. Time: 78.4001 us. Best GFLOPs: 10669.3789
2024-04-28 22:37:47 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #307: GFLOPs: 10008.1664. Time: 83.3445 us. Best GFLOPs: 10669.3789
2024-04-28 22:37:47 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #308: GFLOPs: 10035.9264. Time: 83.1140 us. Best GFLOPs: 10669.3789
2024-04-28 22:37:47 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #309: GFLOPs: 9936.7806. Time: 83.9433 us. Best GFLOPs: 10669.3789
2024-04-28 22:37:47 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #310: GFLOPs: 10220.1455. Time: 81.6158 us. Best GFLOPs: 10669.3789
2024-04-28 22:37:47 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #311: GFLOPs: 10170.1442. Time: 82.0171 us. Best GFLOPs: 10669.3789
2024-04-28 22:37:47 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #312: GFLOPs: 9792.9967. Time: 85.1757 us. Best GFLOPs: 10669.3789
2024-04-28 22:37:47 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #313: GFLOPs: 9331.1368. Time: 89.3917 us. Best GFLOPs: 10669.3789
2024-04-28 22:37:47 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #314: GFLOPs: 9863.1108. Time: 84.5703 us. Best GFLOPs: 10669.3789
2024-04-28 22:37:47 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #315: GFLOPs: 8311.3606. Time: 100.3597 us. Best GFLOPs: 10669.3789
2024-04-28 22:37:47 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #316: GFLOPs: 8650.5609. Time: 96.4245 us. Best GFLOPs: 10669.3789
2024-04-28 22:37:47 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #317: GFLOPs: 8916.9560. Time: 93.5438 us. Best GFLOPs: 10669.3789
2024-04-28 22:37:47 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #318: GFLOPs: 333.9762. Time: 2497.5604 us. Best GFLOPs: 10669.3789
2024-04-28 22:37:47 [INFO] [task_scheduler.cc:121] [Task #2: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #319: Error in building:
LocalBuilder: Timeout, killed after 30.0 seconds
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(64), T.int64(112), T.int64(112)), "float32"), p1: T.Buffer((T.int64(6), T.int64(6), T.int64(64), T.int64(128)), "float32"), p2: T.Buffer((T.int64(1), T.int64(128), T.int64(1), T.int64(1)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(128), T.int64(112), T.int64(112)), "float32")):
        T.func_attr({"layout_free_buffers": [1], "tir.noalias": T.bool(True)})
        # with T.block("root"):
        input_tile_local = T.alloc_buffer((T.int64(64), T.int64(784), T.int64(6), T.int64(6)), scope="local")
        data_pack = T.alloc_buffer((T.int64(6), T.int64(6), T.int64(64), T.int64(784)))
        bgemm = T.alloc_buffer((T.int64(6), T.int64(6), T.int64(128), T.int64(784)))
        inverse_local = T.alloc_buffer((T.int64(128), T.int64(784), T.int64(4), T.int64(4)), scope="local")
        data_pack_local = T.alloc_buffer((T.int64(6), T.int64(6), T.int64(64), T.int64(784)), scope="local")
        bgemm_local = T.alloc_buffer((T.int64(6), T.int64(6), T.int64(128), T.int64(784)), scope="local")
        data_pack_shared = T.alloc_buffer((T.int64(6), T.int64(6), T.int64(64), T.int64(784)), scope="shared")
        p1_shared = T.alloc_buffer((T.int64(6), T.int64(6), T.int64(64), T.int64(128)), scope="shared")
        for ci_p_fused_0 in T.thread_binding(T.int64(784), thread="blockIdx.x", annotations={"pragma_auto_unroll_max_step": 1024, "pragma_unroll_explicit": 1}):
            for ci_p_fused_1 in T.thread_binding(T.int64(64), thread="threadIdx.x"):
                for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(1), T.int64(6), T.int64(6)):
                    with T.block("input_tile"):
                        v_ci = T.axis.spatial(T.int64(64), (ci_p_fused_0 * T.int64(64) + ci_p_fused_1) // T.int64(784) + ax0)
                        v_p = T.axis.spatial(T.int64(784), (ci_p_fused_0 * T.int64(64) + ci_p_fused_1) % T.int64(784) + ax1)
                        v_eps, v_nu = T.axis.remap("SS", [ax2, ax3])
                        T.reads(p0[v_p // T.int64(784), v_ci, v_p % T.int64(784) // T.int64(28) * T.int64(4) + v_eps - T.int64(1), v_p % T.int64(28) * T.int64(4) + v_nu - T.int64(1)])
                        T.writes(input_tile_local[v_ci, v_p, v_eps, v_nu])
                        T.block_attr({"schedule_rule": "None"})
                        input_tile_local[v_ci, v_p, v_eps, v_nu] = T.if_then_else(T.int64(1) <= v_p % T.int64(784) // T.int64(28) * T.int64(4) + v_eps and v_p % T.int64(784) // T.int64(28) * T.int64(4) + v_eps < T.int64(113) and T.int64(1) <= v_p % T.int64(28) * T.int64(4) + v_nu and v_p % T.int64(28) * T.int64(4) + v_nu < T.int64(113), p0[v_p // T.int64(784), v_ci, v_p % T.int64(784) // T.int64(28) * T.int64(4) + v_eps - T.int64(1), v_p % T.int64(28) * T.int64(4) + v_nu - T.int64(1)], T.float32(0))
                for eps in T.unroll(T.int64(6)):
                    for nu in T.unroll(T.int64(6)):
                        with T.block("data_pack_init"):
                            v_eps, v_nu = T.axis.remap("SS", [eps, nu])
                            v_ci = T.axis.spatial(T.int64(64), (ci_p_fused_0 * T.int64(64) + ci_p_fused_1) // T.int64(784))
                            v_p = T.axis.spatial(T.int64(784), (ci_p_fused_0 * T.int64(64) + ci_p_fused_1) % T.int64(784))
                            T.reads()
                            T.writes(data_pack_local[v_eps, v_nu, v_ci, v_p])
                            T.block_attr({"schedule_rule": "conv2d_nchw_winograd_data_pack"})
                            data_pack_local[v_eps, v_nu, v_ci, v_p] = T.float32(0)
                        for r_a in T.unroll(T.int64(6)):
                            for r_b in T.unroll(T.int64(6)):
                                with T.block("data_pack_update"):
                                    v_eps, v_nu = T.axis.remap("SS", [eps, nu])
                                    v_ci = T.axis.spatial(T.int64(64), (ci_p_fused_0 * T.int64(64) + ci_p_fused_1) // T.int64(784))
                                    v_p = T.axis.spatial(T.int64(784), (ci_p_fused_0 * T.int64(64) + ci_p_fused_1) % T.int64(784))
                                    v_r_a, v_r_b = T.axis.remap("RR", [r_a, r_b])
                                    T.reads(data_pack_local[v_eps, v_nu, v_ci, v_p], input_tile_local[v_ci, v_p, v_r_a, v_r_b])
                                    T.writes(data_pack_local[v_eps, v_nu, v_ci, v_p])
                                    T.block_attr({"schedule_rule": "conv2d_nchw_winograd_data_pack"})
                                    data_pack_local[v_eps, v_nu, v_ci, v_p] = data_pack_local[v_eps, v_nu, v_ci, v_p] + input_tile_local[v_ci, v_p, v_r_a, v_r_b] * T.Select(v_r_a % T.int64(6) == T.int64(5) and v_eps % T.int64(6) == T.int64(5), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(5) and v_eps % T.int64(6) == T.int64(4), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(5) and v_eps % T.int64(6) == T.int64(3), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(5) and v_eps % T.int64(6) == T.int64(2), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(5) and v_eps % T.int64(6) == T.int64(1), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(5) and v_eps % T.int64(6) == T.int64(0), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(4) and v_eps % T.int64(6) == T.int64(5), T.float32(1.5), T.Select(v_r_a % T.int64(6) == T.int64(4) and v_eps % T.int64(6) == T.int64(4), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(4) and v_eps % T.int64(6) == T.int64(3), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(4) and v_eps % T.int64(6) == T.int64(2), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(4) and v_eps % T.int64(6) == T.int64(1), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(4) and v_eps % T.int64(6) == T.int64(0), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(3) and v_eps % T.int64(6) == T.int64(5), T.float32(-2), T.Select(v_r_a % T.int64(6) == T.int64(3) and v_eps % T.int64(6) == T.int64(4), T.float32(-0.5), T.Select(v_r_a % T.int64(6) == T.int64(3) and v_eps % T.int64(6) == T.int64(3), T.float32(2), T.Select(v_r_a % T.int64(6) == T.int64(3) and v_eps % T.int64(6) == T.int64(2), T.float32(2.5), T.Select(v_r_a % T.int64(6) == T.int64(3) and v_eps % T.int64(6) == T.int64(1), T.float32(0.5), T.Select(v_r_a % T.int64(6) == T.int64(3) and v_eps % T.int64(6) == T.int64(0), T.float32(1.5), T.Select(v_r_a % T.int64(6) == T.int64(2) and v_eps % T.int64(6) == T.int64(5), T.float32(-1.5), T.Select(v_r_a % T.int64(6) == T.int64(2) and v_eps % T.int64(6) == T.int64(4), T.float32(-1), T.Select(v_r_a % T.int64(6) == T.int64(2) and v_eps % T.int64(6) == T.int64(3), T.float32(-1), T.Select(v_r_a % T.int64(6) == T.int64(2) and v_eps % T.int64(6) == T.int64(2), T.float32(0.5), T.Select(v_r_a % T.int64(6) == T.int64(2) and v_eps % T.int64(6) == T.int64(1), T.float32(-2.5), T.Select(v_r_a % T.int64(6) == T.int64(2) and v_eps % T.int64(6) == T.int64(0), T.float32(-2), T.Select(v_r_a % T.int64(6) == T.int64(1) and v_eps % T.int64(6) == T.int64(5), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(1) and v_eps % T.int64(6) == T.int64(4), T.float32(0.5), T.Select(v_r_a % T.int64(6) == T.int64(1) and v_eps % T.int64(6) == T.int64(3), T.float32(-2), T.Select(v_r_a % T.int64(6) == T.int64(1) and v_eps % T.int64(6) == T.int64(2), T.float32(-1), T.Select(v_r_a % T.int64(6) == T.int64(1) and v_eps % T.int64(6) == T.int64(1), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(1) and v_eps % T.int64(6) == T.int64(0), T.float32(-1.5), T.Select(v_r_a % T.int64(6) == T.int64(0) and v_eps % T.int64(6) == T.int64(5), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(0) and v_eps % T.int64(6) == T.int64(4), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(0) and v_eps % T.int64(6) == T.int64(3), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(0) and v_eps % T.int64(6) == T.int64(2), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(0) and v_eps % T.int64(6) == T.int64(1), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(0) and v_eps % T.int64(6) == T.int64(0), T.float32(1), T.float32(0))))))))))))))))))))))))))))))))))))) * T.Select(v_r_b % T.int64(6) == T.int64(5) and v_nu % T.int64(6) == T.int64(5), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(5) and v_nu % T.int64(6) == T.int64(4), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(5) and v_nu % T.int64(6) == T.int64(3), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(5) and v_nu % T.int64(6) == T.int64(2), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(5) and v_nu % T.int64(6) == T.int64(1), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(5) and v_nu % T.int64(6) == T.int64(0), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(4) and v_nu % T.int64(6) == T.int64(5), T.float32(1.5), T.Select(v_r_b % T.int64(6) == T.int64(4) and v_nu % T.int64(6) == T.int64(4), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(4) and v_nu % T.int64(6) == T.int64(3), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(4) and v_nu % T.int64(6) == T.int64(2), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(4) and v_nu % T.int64(6) == T.int64(1), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(4) and v_nu % T.int64(6) == T.int64(0), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(3) and v_nu % T.int64(6) == T.int64(5), T.float32(-2), T.Select(v_r_b % T.int64(6) == T.int64(3) and v_nu % T.int64(6) == T.int64(4), T.float32(-0.5), T.Select(v_r_b % T.int64(6) == T.int64(3) and v_nu % T.int64(6) == T.int64(3), T.float32(2), T.Select(v_r_b % T.int64(6) == T.int64(3) and v_nu % T.int64(6) == T.int64(2), T.float32(2.5), T.Select(v_r_b % T.int64(6) == T.int64(3) and v_nu % T.int64(6) == T.int64(1), T.float32(0.5), T.Select(v_r_b % T.int64(6) == T.int64(3) and v_nu % T.int64(6) == T.int64(0), T.float32(1.5), T.Select(v_r_b % T.int64(6) == T.int64(2) and v_nu % T.int64(6) == T.int64(5), T.float32(-1.5), T.Select(v_r_b % T.int64(6) == T.int64(2) and v_nu % T.int64(6) == T.int64(4), T.float32(-1), T.Select(v_r_b % T.int64(6) == T.int64(2) and v_nu % T.int64(6) == T.int64(3), T.float32(-1), T.Select(v_r_b % T.int64(6) == T.int64(2) and v_nu % T.int64(6) == T.int64(2), T.float32(0.5), T.Select(v_r_b % T.int64(6) == T.int64(2) and v_nu % T.int64(6) == T.int64(1), T.float32(-2.5), T.Select(v_r_b % T.int64(6) == T.int64(2) and v_nu % T.int64(6) == T.int64(0), T.float32(-2), T.Select(v_r_b % T.int64(6) == T.int64(1) and v_nu % T.int64(6) == T.int64(5), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(1) and v_nu % T.int64(6) == T.int64(4), T.float32(0.5), T.Select(v_r_b % T.int64(6) == T.int64(1) and v_nu % T.int64(6) == T.int64(3), T.float32(-2), T.Select(v_r_b % T.int64(6) == T.int64(1) and v_nu % T.int64(6) == T.int64(2), T.float32(-1), T.Select(v_r_b % T.int64(6) == T.int64(1) and v_nu % T.int64(6) == T.int64(1), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(1) and v_nu % T.int64(6) == T.int64(0), T.float32(-1.5), T.Select(v_r_b % T.int64(6) == T.int64(0) and v_nu % T.int64(6) == T.int64(5), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(0) and v_nu % T.int64(6) == T.int64(4), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(0) and v_nu % T.int64(6) == T.int64(3), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(0) and v_nu % T.int64(6) == T.int64(2), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(0) and v_nu % T.int64(6) == T.int64(1), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(0) and v_nu % T.int64(6) == T.int64(0), T.float32(1), T.float32(0)))))))))))))))))))))))))))))))))))))
                for ax0, ax1, ax2, ax3 in T.grid(T.int64(6), T.int64(6), T.int64(1), T.int64(1)):
                    with T.block("data_pack_local"):
                        v0, v1 = T.axis.remap("SS", [ax0, ax1])
                        v2 = T.axis.spatial(T.int64(64), (ci_p_fused_0 * T.int64(64) + ci_p_fused_1) // T.int64(784) + ax2)
                        v3 = T.axis.spatial(T.int64(784), (ci_p_fused_0 * T.int64(64) + ci_p_fused_1) % T.int64(784) + ax3)
                        T.reads(data_pack_local[v0, v1, v2, v3])
                        T.writes(data_pack[v0, v1, v2, v3])
                        data_pack[v0, v1, v2, v3] = data_pack_local[v0, v1, v2, v3]
        for eps_0_nu_0_co_0_p_0_fused in T.thread_binding(T.int64(56), thread="blockIdx.x", annotations={"pragma_auto_unroll_max_step": 1024, "pragma_unroll_explicit": 1}):
            for eps_1_nu_1_co_1_p_1_fused in T.thread_binding(T.int64(56), thread="vthread.x"):
                for eps_2_nu_2_co_2_p_2_fused in T.thread_binding(T.int64(72), thread="threadIdx.x"):
                    for eps_3_init, nu_3_init, co_3_init, p_3_init, eps_4_init, nu_4_init, co_4_init, p_4_init in T.grid(T.int64(1), T.int64(2), T.int64(4), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(2)):
                        with T.block("bgemm_init"):
                            v_eps = T.axis.spatial(T.int64(6), eps_0_nu_0_co_0_p_0_fused // T.int64(28) * T.int64(3) + eps_2_nu_2_co_2_p_2_fused // T.int64(24) + eps_3_init + eps_4_init)
                            v_nu = T.axis.spatial(T.int64(6), eps_2_nu_2_co_2_p_2_fused % T.int64(24) // T.int64(8) * T.int64(2) + nu_3_init + nu_4_init)
                            v_co = T.axis.spatial(T.int64(128), eps_0_nu_0_co_0_p_0_fused % T.int64(28) // T.int64(7) * T.int64(32) + eps_2_nu_2_co_2_p_2_fused % T.int64(8) * T.int64(4) + co_3_init + co_4_init)
                            v_p = T.axis.spatial(T.int64(784), eps_0_nu_0_co_0_p_0_fused % T.int64(7) * T.int64(112) + eps_1_nu_1_co_1_p_1_fused * T.int64(2) + p_3_init * T.int64(2) + p_4_init)
                            T.reads()
                            T.writes(bgemm_local[v_eps, v_nu, v_co, v_p])
                            T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 32, "meta_schedule.tiling_structure": "SSSRRSRS"})
                            bgemm_local[v_eps, v_nu, v_co, v_p] = T.float32(0)
                    for ci_0 in range(T.int64(16)):
                        for ax0_ax1_ax2_ax3_fused_0 in range(T.int64(56)):
                            for ax0_ax1_ax2_ax3_fused_1 in T.thread_binding(T.int64(72), thread="threadIdx.x"):
                                for ax0_ax1_ax2_ax3_fused_2 in T.vectorized(T.int64(2)):
                                    with T.block("data_pack_shared"):
                                        v0 = T.axis.spatial(T.int64(6), eps_0_nu_0_co_0_p_0_fused // T.int64(28) * T.int64(3) + (ax0_ax1_ax2_ax3_fused_0 * T.int64(144) + ax0_ax1_ax2_ax3_fused_1 * T.int64(2) + ax0_ax1_ax2_ax3_fused_2) // T.int64(2688))
                                        v1 = T.axis.spatial(T.int64(6), (ax0_ax1_ax2_ax3_fused_0 * T.int64(144) + ax0_ax1_ax2_ax3_fused_1 * T.int64(2) + ax0_ax1_ax2_ax3_fused_2) % T.int64(2688) // T.int64(448))
                                        v2 = T.axis.spatial(T.int64(64), ci_0 * T.int64(4) + (ax0_ax1_ax2_ax3_fused_0 * T.int64(144) + ax0_ax1_ax2_ax3_fused_1 * T.int64(2) + ax0_ax1_ax2_ax3_fused_2) % T.int64(448) // T.int64(112))
                                        v3 = T.axis.spatial(T.int64(784), eps_0_nu_0_co_0_p_0_fused % T.int64(7) * T.int64(112) + (ax0_ax1_ax2_ax3_fused_0 * T.int64(144) + ax0_ax1_ax2_ax3_fused_1 * T.int64(2) + ax0_ax1_ax2_ax3_fused_2) % T.int64(112))
                                        T.reads(data_pack[v0, v1, v2, v3])
                                        T.writes(data_pack_shared[v0, v1, v2, v3])
                                        data_pack_shared[v0, v1, v2, v3] = data_pack[v0, v1, v2, v3]
                        for ax0_ax1_ax2_ax3_fused_0 in range(T.int64(32)):
                            for ax0_ax1_ax2_ax3_fused_1 in T.thread_binding(T.int64(72), thread="threadIdx.x"):
                                with T.block("p1_shared"):
                                    v0 = T.axis.spatial(T.int64(6), eps_0_nu_0_co_0_p_0_fused // T.int64(28) * T.int64(3) + (ax0_ax1_ax2_ax3_fused_0 * T.int64(72) + ax0_ax1_ax2_ax3_fused_1) // T.int64(768))
                                    v1 = T.axis.spatial(T.int64(6), (ax0_ax1_ax2_ax3_fused_0 * T.int64(72) + ax0_ax1_ax2_ax3_fused_1) % T.int64(768) // T.int64(128))
                                    v2 = T.axis.spatial(T.int64(64), ci_0 * T.int64(4) + (ax0_ax1_ax2_ax3_fused_0 * T.int64(72) + ax0_ax1_ax2_ax3_fused_1) % T.int64(128) // T.int64(32))
                                    v3 = T.axis.spatial(T.int64(128), eps_0_nu_0_co_0_p_0_fused % T.int64(28) // T.int64(7) * T.int64(32) + (ax0_ax1_ax2_ax3_fused_0 * T.int64(72) + ax0_ax1_ax2_ax3_fused_1) % T.int64(32))
                                    T.reads(p1[v0, v1, v2, v3])
                                    T.writes(p1_shared[v0, v1, v2, v3])
                                    p1_shared[v0, v1, v2, v3] = p1[v0, v1, v2, v3]
                        for ci_1, eps_3, nu_3, co_3, p_3, ci_2, eps_4, nu_4, co_4, p_4 in T.grid(T.int64(2), T.int64(1), T.int64(2), T.int64(4), T.int64(1), T.int64(2), T.int64(1), T.int64(1), T.int64(1), T.int64(2)):
                            with T.block("bgemm_update"):
                                v_eps = T.axis.spatial(T.int64(6), eps_0_nu_0_co_0_p_0_fused // T.int64(28) * T.int64(3) + eps_2_nu_2_co_2_p_2_fused // T.int64(24) + eps_3 + eps_4)
                                v_nu = T.axis.spatial(T.int64(6), eps_2_nu_2_co_2_p_2_fused % T.int64(24) // T.int64(8) * T.int64(2) + nu_3 + nu_4)
                                v_co = T.axis.spatial(T.int64(128), eps_0_nu_0_co_0_p_0_fused % T.int64(28) // T.int64(7) * T.int64(32) + eps_2_nu_2_co_2_p_2_fused % T.int64(8) * T.int64(4) + co_3 + co_4)
                                v_p = T.axis.spatial(T.int64(784), eps_0_nu_0_co_0_p_0_fused % T.int64(7) * T.int64(112) + eps_1_nu_1_co_1_p_1_fused * T.int64(2) + p_3 * T.int64(2) + p_4)
                                v_ci = T.axis.reduce(T.int64(64), ci_0 * T.int64(4) + ci_1 * T.int64(2) + ci_2)
                                T.reads(bgemm_local[v_eps, v_nu, v_co, v_p], data_pack_shared[v_eps, v_nu, v_ci, v_p], p1_shared[v_eps, v_nu, v_ci, v_co])
                                T.writes(bgemm_local[v_eps, v_nu, v_co, v_p])
                                T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 32, "meta_schedule.tiling_structure": "SSSRRSRS"})
                                bgemm_local[v_eps, v_nu, v_co, v_p] = bgemm_local[v_eps, v_nu, v_co, v_p] + data_pack_shared[v_eps, v_nu, v_ci, v_p] * p1_shared[v_eps, v_nu, v_ci, v_co]
                    for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(2), T.int64(4), T.int64(2)):
                        with T.block("bgemm_local"):
                            v0 = T.axis.spatial(T.int64(6), eps_0_nu_0_co_0_p_0_fused // T.int64(28) * T.int64(3) + eps_2_nu_2_co_2_p_2_fused // T.int64(24) + ax0)
                            v1 = T.axis.spatial(T.int64(6), eps_2_nu_2_co_2_p_2_fused % T.int64(24) // T.int64(8) * T.int64(2) + ax1)
                            v2 = T.axis.spatial(T.int64(128), eps_0_nu_0_co_0_p_0_fused % T.int64(28) // T.int64(7) * T.int64(32) + eps_2_nu_2_co_2_p_2_fused % T.int64(8) * T.int64(4) + ax2)
                            v3 = T.axis.spatial(T.int64(784), eps_0_nu_0_co_0_p_0_fused % T.int64(7) * T.int64(112) + eps_1_nu_1_co_1_p_1_fused * T.int64(2) + ax3)
                            T.reads(bgemm_local[v0, v1, v2, v3])
                            T.writes(bgemm[v0, v1, v2, v3])
                            bgemm[v0, v1, v2, v3] = bgemm_local[v0, v1, v2, v3]
        for n_co_h_0_w_0_fused_0 in T.thread_binding(T.int64(3136), thread="blockIdx.x", annotations={"pragma_auto_unroll_max_step": 1024, "pragma_unroll_explicit": 1}):
            for n_co_h_0_w_0_fused_1 in T.thread_binding(T.int64(32), thread="threadIdx.x"):
                for ax0, ax1 in T.grid(T.int64(1), T.int64(1)):
                    for ax2 in T.unroll(T.int64(4)):
                        for ax3 in T.unroll(T.int64(4)):
                            with T.block("inverse_init"):
                                v_co = T.axis.spatial(T.int64(128), (n_co_h_0_w_0_fused_0 * T.int64(32) + n_co_h_0_w_0_fused_1) // T.int64(784) + ax0)
                                v_p = T.axis.spatial(T.int64(784), (n_co_h_0_w_0_fused_0 * T.int64(32) + n_co_h_0_w_0_fused_1) % T.int64(784) + ax1)
                                v_vh, v_vw = T.axis.remap("SS", [ax2, ax3])
                                T.reads()
                                T.writes(inverse_local[v_co, v_p, v_vh, v_vw])
                                T.block_attr({"schedule_rule": "conv2d_nchw_winograd_inverse"})
                                inverse_local[v_co, v_p, v_vh, v_vw] = T.float32(0)
                            for ax4 in T.unroll(T.int64(6)):
                                for ax5 in T.unroll(T.int64(6)):
                                    with T.block("inverse_update"):
                                        v_co = T.axis.spatial(T.int64(128), (n_co_h_0_w_0_fused_0 * T.int64(32) + n_co_h_0_w_0_fused_1) // T.int64(784) + ax0)
                                        v_p = T.axis.spatial(T.int64(784), (n_co_h_0_w_0_fused_0 * T.int64(32) + n_co_h_0_w_0_fused_1) % T.int64(784) + ax1)
                                        v_vh, v_vw, v_r_a, v_r_b = T.axis.remap("SSRR", [ax2, ax3, ax4, ax5])
                                        T.reads(inverse_local[v_co, v_p, v_vh, v_vw], bgemm[v_r_a, v_r_b, v_co, v_p])
                                        T.writes(inverse_local[v_co, v_p, v_vh, v_vw])
                                        T.block_attr({"schedule_rule": "conv2d_nchw_winograd_inverse"})
                                        inverse_local[v_co, v_p, v_vh, v_vw] = inverse_local[v_co, v_p, v_vh, v_vw] + bgemm[v_r_a, v_r_b, v_co, v_p] * T.Select(v_r_a % T.int64(6) == T.int64(5) and v_vh % T.int64(4) == T.int64(3), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(5) and v_vh % T.int64(4) == T.int64(2), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(5) and v_vh % T.int64(4) == T.int64(1), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(5) and v_vh % T.int64(4) == T.int64(0), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(4) and v_vh % T.int64(4) == T.int64(3), T.float32(-8), T.Select(v_r_a % T.int64(6) == T.int64(4) and v_vh % T.int64(4) == T.int64(2), T.float32(4), T.Select(v_r_a % T.int64(6) == T.int64(4) and v_vh % T.int64(4) == T.int64(1), T.float32(-2), T.Select(v_r_a % T.int64(6) == T.int64(4) and v_vh % T.int64(4) == T.int64(0), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(3) and v_vh % T.int64(4) == T.int64(3), T.float32(0.125), T.Select(v_r_a % T.int64(6) == T.int64(3) and v_vh % T.int64(4) == T.int64(2), T.float32(0.25), T.Select(v_r_a % T.int64(6) == T.int64(3) and v_vh % T.int64(4) == T.int64(1), T.float32(0.5), T.Select(v_r_a % T.int64(6) == T.int64(3) and v_vh % T.int64(4) == T.int64(0), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(2) and v_vh % T.int64(4) == T.int64(3), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(2) and v_vh % T.int64(4) == T.int64(2), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(2) and v_vh % T.int64(4) == T.int64(1), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(2) and v_vh % T.int64(4) == T.int64(0), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(1) and v_vh % T.int64(4) == T.int64(3), T.float32(-1), T.Select(v_r_a % T.int64(6) == T.int64(1) and v_vh % T.int64(4) == T.int64(2), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(1) and v_vh % T.int64(4) == T.int64(1), T.float32(-1), T.Select(v_r_a % T.int64(6) == T.int64(1) and v_vh % T.int64(4) == T.int64(0), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(0) and v_vh % T.int64(4) == T.int64(3), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(0) and v_vh % T.int64(4) == T.int64(2), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(0) and v_vh % T.int64(4) == T.int64(1), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(0) and v_vh % T.int64(4) == T.int64(0), T.float32(1), T.float32(0))))))))))))))))))))))))) * T.Select(v_r_b % T.int64(6) == T.int64(5) and v_vw % T.int64(4) == T.int64(3), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(5) and v_vw % T.int64(4) == T.int64(2), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(5) and v_vw % T.int64(4) == T.int64(1), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(5) and v_vw % T.int64(4) == T.int64(0), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(4) and v_vw % T.int64(4) == T.int64(3), T.float32(-8), T.Select(v_r_b % T.int64(6) == T.int64(4) and v_vw % T.int64(4) == T.int64(2), T.float32(4), T.Select(v_r_b % T.int64(6) == T.int64(4) and v_vw % T.int64(4) == T.int64(1), T.float32(-2), T.Select(v_r_b % T.int64(6) == T.int64(4) and v_vw % T.int64(4) == T.int64(0), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(3) and v_vw % T.int64(4) == T.int64(3), T.float32(0.125), T.Select(v_r_b % T.int64(6) == T.int64(3) and v_vw % T.int64(4) == T.int64(2), T.float32(0.25), T.Select(v_r_b % T.int64(6) == T.int64(3) and v_vw % T.int64(4) == T.int64(1), T.float32(0.5), T.Select(v_r_b % T.int64(6) == T.int64(3) and v_vw % T.int64(4) == T.int64(0), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(2) and v_vw % T.int64(4) == T.int64(3), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(2) and v_vw % T.int64(4) == T.int64(2), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(2) and v_vw % T.int64(4) == T.int64(1), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(2) and v_vw % T.int64(4) == T.int64(0), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(1) and v_vw % T.int64(4) == T.int64(3), T.float32(-1), T.Select(v_r_b % T.int64(6) == T.int64(1) and v_vw % T.int64(4) == T.int64(2), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(1) and v_vw % T.int64(4) == T.int64(1), T.float32(-1), T.Select(v_r_b % T.int64(6) == T.int64(1) and v_vw % T.int64(4) == T.int64(0), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(0) and v_vw % T.int64(4) == T.int64(3), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(0) and v_vw % T.int64(4) == T.int64(2), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(0) and v_vw % T.int64(4) == T.int64(1), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(0) and v_vw % T.int64(4) == T.int64(0), T.float32(1), T.float32(0)))))))))))))))))))))))))
                for h_1, w_1 in T.grid(T.int64(4), T.int64(4)):
                    with T.block("conv2d_winograd"):
                        v_n = T.axis.spatial(T.int64(1), T.int64(0))
                        v_co = T.axis.spatial(T.int64(128), (n_co_h_0_w_0_fused_0 * T.int64(32) + n_co_h_0_w_0_fused_1) // T.int64(784))
                        v_h = T.axis.spatial(T.int64(112), (n_co_h_0_w_0_fused_0 * T.int64(32) + n_co_h_0_w_0_fused_1) % T.int64(784) // T.int64(28) * T.int64(4) + h_1)
                        v_w = T.axis.spatial(T.int64(112), (n_co_h_0_w_0_fused_0 * T.int64(32) + n_co_h_0_w_0_fused_1) % T.int64(28) * T.int64(4) + w_1)
                        T.reads(inverse_local[v_co, v_n * T.int64(784) + v_h // T.int64(4) * T.int64(28) + v_w // T.int64(4), v_h % T.int64(4), v_w % T.int64(4)], p2[v_n, v_co, T.int64(0), T.int64(0)])
                        T.writes(T_relu[v_n, v_co, v_h, v_w])
                        T_relu[v_n, v_co, v_h, v_w] = T.max(inverse_local[v_co, v_n * T.int64(784) + v_h // T.int64(4) * T.int64(28) + v_w // T.int64(4), v_h % T.int64(4), v_w % T.int64(4)] + p2[v_n, v_co, T.int64(0), T.int64(0)], T.float32(0))
b0 = sch.get_block(name="data_pack", func_name="main")
b1 = sch.get_block(name="bgemm", func_name="main")
b2 = sch.get_block(name="inverse", func_name="main")
b3 = sch.get_block(name="conv2d_winograd", func_name="main")
b4 = sch.get_block(name="T_add", func_name="main")
b5 = sch.get_block(name="T_relu", func_name="main")
b6 = sch.get_block(name="root", func_name="main")
b7, b8 = sch.get_producers(block=b2)
sch.compute_inline(block=b8)
b9, = sch.get_consumers(block=b2)
l10, l11, l12, l13 = sch.get_loops(block=b9)
l14, l15 = sch.split(loop=l12, factors=[None, 4], preserve_unit_iters=True)
l16, l17 = sch.split(loop=l13, factors=[None, 4], preserve_unit_iters=True)
sch.reorder(l14, l16, l15, l17)
sch.compute_at(block=b2, loop=l16, preserve_unit_loops=True, index=-1)
sch.set_scope(block=b2, buffer_index=0, storage_scope="local")
l18, l19, l20, l21, l22, l23, l24, l25, l26, l27 = sch.get_loops(block=b2)
sch.unroll(loop=l24)
sch.unroll(loop=l25)
sch.unroll(loop=l26)
sch.unroll(loop=l27)
b28, b29 = sch.get_producers(block=b0)
sch.compute_inline(block=b29)
b30, = sch.get_producers(block=b28)
l31, l32, l33, l34, l35, l36 = sch.get_loops(block=b0)
sch.reorder(l33, l34, l31, l32, l35, l36)
sch.unroll(loop=l31)
sch.unroll(loop=l32)
sch.unroll(loop=l35)
sch.unroll(loop=l36)
l37 = sch.fuse(l33, l34, preserve_unit_iters=True)
v38 = sch.sample_categorical(candidates=[32, 64, 128, 256, 512, 1024], probs=[0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666], decision=1)
l39, l40 = sch.split(loop=l37, factors=[None, v38], preserve_unit_iters=True)
sch.bind(loop=l39, thread_axis="blockIdx.x")
sch.bind(loop=l40, thread_axis="threadIdx.x")
b41 = sch.cache_write(block=b0, write_buffer_index=0, storage_scope="local")
sch.reverse_compute_at(block=b41, loop=l40, preserve_unit_loops=True, index=-1)
sch.compute_at(block=b28, loop=l40, preserve_unit_loops=True, index=-1)
sch.set_scope(block=b28, buffer_index=0, storage_scope="local")
sch.compute_inline(block=b30)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSSRRSRS")
l42, l43, l44, l45, l46 = sch.get_loops(block=b1)
v47, v48, v49, v50, v51 = sch.sample_perfect_tile(loop=l42, n=5, max_innermost_factor=64, decision=[2, 1, 3, 1, 1])
l52, l53, l54, l55, l56 = sch.split(loop=l42, factors=[v47, v48, v49, v50, v51], preserve_unit_iters=True)
v57, v58, v59, v60, v61 = sch.sample_perfect_tile(loop=l43, n=5, max_innermost_factor=64, decision=[1, 1, 3, 2, 1])
l62, l63, l64, l65, l66 = sch.split(loop=l43, factors=[v57, v58, v59, v60, v61], preserve_unit_iters=True)
v67, v68, v69, v70, v71 = sch.sample_perfect_tile(loop=l44, n=5, max_innermost_factor=64, decision=[4, 1, 8, 4, 1])
l72, l73, l74, l75, l76 = sch.split(loop=l44, factors=[v67, v68, v69, v70, v71], preserve_unit_iters=True)
v77, v78, v79, v80, v81 = sch.sample_perfect_tile(loop=l45, n=5, max_innermost_factor=64, decision=[7, 56, 1, 1, 2])
l82, l83, l84, l85, l86 = sch.split(loop=l45, factors=[v77, v78, v79, v80, v81], preserve_unit_iters=True)
v87, v88, v89 = sch.sample_perfect_tile(loop=l46, n=3, max_innermost_factor=64, decision=[16, 2, 2])
l90, l91, l92 = sch.split(loop=l46, factors=[v87, v88, v89], preserve_unit_iters=True)
sch.reorder(l52, l62, l72, l82, l53, l63, l73, l83, l54, l64, l74, l84, l90, l91, l55, l65, l75, l85, l92, l56, l66, l76, l86)
l93 = sch.fuse(l52, l62, l72, l82, preserve_unit_iters=True)
sch.bind(loop=l93, thread_axis="blockIdx.x")
l94 = sch.fuse(l53, l63, l73, l83, preserve_unit_iters=True)
sch.bind(loop=l94, thread_axis="vthread.x")
l95 = sch.fuse(l54, l64, l74, l84, preserve_unit_iters=True)
sch.bind(loop=l95, thread_axis="threadIdx.x")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_low_inclusive", ann_val=32)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_high_inclusive", ann_val=1024)
b96 = sch.cache_write(block=b1, write_buffer_index=0, storage_scope="local")
sch.reverse_compute_at(block=b96, loop=l95, preserve_unit_loops=True, index=-1)
b97 = sch.cache_read(block=b1, read_buffer_index=0, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b97, loop=l90, preserve_unit_loops=True, index=-1)
l98, l99, l100, l101, l102, l103, l104, l105 = sch.get_loops(block=b97)
l106 = sch.fuse(l102, l103, l104, l105, preserve_unit_iters=True)
v107 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=1)
sch.annotate(block_or_loop=b97, ann_key="meta_schedule.cooperative_fetch", ann_val=v107)
b108 = sch.cache_read(block=b1, read_buffer_index=1, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b108, loop=l90, preserve_unit_loops=True, index=-1)
l109, l110, l111, l112, l113, l114, l115, l116 = sch.get_loops(block=b108)
l117 = sch.fuse(l113, l114, l115, l116, preserve_unit_iters=True)
v118 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=0)
sch.annotate(block_or_loop=b108, ann_key="meta_schedule.cooperative_fetch", ann_val=v118)
sch.reverse_compute_inline(block=b5)
sch.reverse_compute_inline(block=b4)
v119 = sch.sample_categorical(candidates=[0, 16, 64, 512, 1024], probs=[0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001], decision=4)
sch.annotate(block_or_loop=b6, ann_key="meta_schedule.unroll_explicit", ann_val=v119)
l120, l121, l122, l123, l124, l125 = sch.get_loops(block=b3)
l126 = sch.fuse(l120, l121, l122, l123, preserve_unit_iters=True)
v127 = sch.sample_categorical(candidates=[32, 64, 128, 256, 512, 1024], probs=[0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666], decision=0)
l128, l129 = sch.split(loop=l126, factors=[None, v127], preserve_unit_iters=True)
sch.bind(loop=l128, thread_axis="blockIdx.x")
sch.bind(loop=l129, thread_axis="threadIdx.x")
sch.enter_postproc()
sch.unannotate(block_or_loop=b97, ann_key="meta_schedule.cooperative_fetch")
l130, l131, l132, l133, l134 = sch.get_loops(block=b97)
l135, l136, l137 = sch.split(loop=l134, factors=[None, 72, 2], preserve_unit_iters=True)
sch.vectorize(loop=l137)
sch.bind(loop=l136, thread_axis="threadIdx.x")
sch.unannotate(block_or_loop=b108, ann_key="meta_schedule.cooperative_fetch")
l138, l139, l140, l141, l142 = sch.get_loops(block=b108)
l143, l144 = sch.split(loop=l142, factors=[None, 72], preserve_unit_iters=True)
sch.bind(loop=l144, thread_axis="threadIdx.x")
b145 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b145, ann_key="meta_schedule.unroll_explicit")
b146, b147, b148, b149, b150, b151, b152, b153, b154 = sch.get_child_blocks(b145)
l155, l156, l157, l158, l159, l160 = sch.get_loops(block=b146)
l161, l162, l163, l164, l165, l166 = sch.get_loops(block=b147)
sch.annotate(block_or_loop=l161, ann_key="pragma_auto_unroll_max_step", ann_val=1024)
sch.annotate(block_or_loop=l161, ann_key="pragma_unroll_explicit", ann_val=1)
l167, l168, l169, l170, l171, l172 = sch.get_loops(block=b148)
l173, l174, l175, l176, l177, l178, l179 = sch.get_loops(block=b149)
l180, l181, l182, l183, l184, l185 = sch.get_loops(block=b150)
l186, l187, l188, l189, l190, l191, l192, l193, l194, l195, l196, l197, l198, l199 = sch.get_loops(block=b151)
sch.annotate(block_or_loop=l186, ann_key="pragma_auto_unroll_max_step", ann_val=1024)
sch.annotate(block_or_loop=l186, ann_key="pragma_unroll_explicit", ann_val=1)
l200, l201, l202, l203, l204, l205, l206 = sch.get_loops(block=b152)
l207, l208, l209, l210, l211, l212, l213, l214 = sch.get_loops(block=b153)
sch.annotate(block_or_loop=l207, ann_key="pragma_auto_unroll_max_step", ann_val=1024)
sch.annotate(block_or_loop=l207, ann_key="pragma_unroll_explicit", ann_val=1)
l215, l216, l217, l218 = sch.get_loops(block=b154)
b219 = sch.get_block(name="data_pack", func_name="main")
l220, l221, l222, l223, l224, l225 = sch.get_loops(block=b219)
b226 = sch.decompose_reduction(block=b219, loop=l224)
b227 = sch.get_block(name="bgemm", func_name="main")
l228, l229, l230, l231, l232, l233, l234, l235, l236, l237, l238, l239, l240, l241 = sch.get_loops(block=b227)
b242 = sch.decompose_reduction(block=b227, loop=l231)
b243 = sch.get_block(name="inverse", func_name="main")
l244, l245, l246, l247, l248, l249, l250, l251 = sch.get_loops(block=b243)
b252 = sch.decompose_reduction(block=b243, loop=l250)
2024-04-28 22:37:47 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #320: GFLOPs: 3854.3706. Time: 216.4104 us. Best GFLOPs: 10669.3789
2024-04-28 23:07:14 [INFO] [evolutionary_search.cc:713] Generating candidates......
2024-04-28 23:07:18 [INFO] [evolutionary_search.cc:715] Picked top 102 candidate(s) from database
2024-04-28 23:07:25 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x43caf38)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x6f9f348)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x70a6218)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x9268ff8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x9288ea8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x70936f8)]: 405 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x3ab3ae8)]: 0 failure(s)
2024-04-28 23:07:32 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x43caf38)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x6f9f348)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x70a6218)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x9268ff8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x9288ea8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x70936f8)]: 810 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x3ab3ae8)]: 0 failure(s)
2024-04-28 23:07:40 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x43caf38)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x6f9f348)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x70a6218)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x9268ff8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x9288ea8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x70936f8)]: 1217 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x3ab3ae8)]: 0 failure(s)
2024-04-28 23:07:47 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x43caf38)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x6f9f348)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x70a6218)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x9268ff8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x9288ea8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x70936f8)]: 1619 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x3ab3ae8)]: 0 failure(s)
2024-04-28 23:07:53 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x43caf38)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x6f9f348)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x70a6218)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x9268ff8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x9288ea8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x70936f8)]: 2022 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x3ab3ae8)]: 0 failure(s)
2024-04-28 23:08:00 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x43caf38)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x6f9f348)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x70a6218)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x9268ff8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x9288ea8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x70936f8)]: 2423 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x3ab3ae8)]: 0 failure(s)
2024-04-28 23:08:07 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x43caf38)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x6f9f348)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x70a6218)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x9268ff8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x9288ea8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x70936f8)]: 2829 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x3ab3ae8)]: 0 failure(s)
2024-04-28 23:08:13 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x43caf38)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x6f9f348)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x70a6218)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x9268ff8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x9288ea8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x70936f8)]: 3236 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x3ab3ae8)]: 0 failure(s)
2024-04-28 23:08:20 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x43caf38)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x6f9f348)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x70a6218)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x9268ff8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x9288ea8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x70936f8)]: 3637 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x3ab3ae8)]: 0 failure(s)
2024-04-28 23:08:20 [INFO] [evolutionary_search.cc:723] Sampled 53 candidate(s)
2024-04-28 23:08:42 [INFO] [evolutionary_search.cc:621] Evolve iter #0 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x43caf38)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x6f9f348)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x70a6218)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x9268ff8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x9288ea8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x70936f8)]: 160 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x3ab3ae8)]: 0 failure(s)
2024-04-28 23:09:06 [INFO] [evolutionary_search.cc:621] Evolve iter #1 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x43caf38)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x6f9f348)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x70a6218)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x9268ff8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x9288ea8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x70936f8)]: 146 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x3ab3ae8)]: 0 failure(s)
2024-04-28 23:09:29 [INFO] [evolutionary_search.cc:621] Evolve iter #2 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x43caf38)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x6f9f348)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x70a6218)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x9268ff8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x9288ea8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x70936f8)]: 160 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x3ab3ae8)]: 0 failure(s)
2024-04-28 23:09:54 [INFO] [evolutionary_search.cc:621] Evolve iter #3 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x43caf38)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x6f9f348)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x70a6218)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x9268ff8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x9288ea8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x70936f8)]: 172 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x3ab3ae8)]: 0 failure(s)
2024-04-28 23:09:59 [INFO] [evolutionary_search.cc:649] Scores of the best 64 candidates:
[1 : 16]:	1.0527  1.0505  1.0440  1.0394  1.0311  1.0230  1.0195  1.0095  1.0006  0.9978  0.9973  0.9941  0.9939  0.9938  0.9919  0.9905
[17 : 32]:	0.9899  0.9891  0.9884  0.9878  0.9866  0.9865  0.9863  0.9863  0.9853  0.9828  0.9826  0.9813  0.9800  0.9797  0.9797  0.9793
[33 : 48]:	0.9792  0.9790  0.9781  0.9778  0.9771  0.9754  0.9749  0.9747  0.9742  0.9739  0.9737  0.9729  0.9727  0.9722  0.9714  0.9713
[49 : 64]:	0.9710  0.9706  0.9700  0.9699  0.9699  0.9695  0.9694  0.9688  0.9687  0.9686  0.9683  0.9678  0.9670  0.9670  0.9662  0.9661
2024-04-28 23:09:59 [INFO] [evolutionary_search.cc:727] Got 64 candidate(s) with evolutionary search
2024-04-28 23:09:59 [INFO] [evolutionary_search.cc:730] Sending 64 candidates(s) for measurement
2024-04-28 23:11:31 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #321: GFLOPs: 10683.3097. Time: 78.0775 us. Best GFLOPs: 10683.3097
2024-04-28 23:11:31 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #322: GFLOPs: 10573.8691. Time: 78.8856 us. Best GFLOPs: 10683.3097
2024-04-28 23:11:31 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #323: GFLOPs: 11214.5698. Time: 74.3788 us. Best GFLOPs: 11214.5698
2024-04-28 23:11:31 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #324: GFLOPs: 10499.5450. Time: 79.4440 us. Best GFLOPs: 11214.5698
2024-04-28 23:11:31 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #325: GFLOPs: 10487.9276. Time: 79.5320 us. Best GFLOPs: 11214.5698
2024-04-28 23:11:31 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #326: GFLOPs: 10410.5523. Time: 80.1231 us. Best GFLOPs: 11214.5698
2024-04-28 23:11:31 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #327: GFLOPs: 10453.4909. Time: 79.7940 us. Best GFLOPs: 11214.5698
2024-04-28 23:11:31 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #328: GFLOPs: 10104.2947. Time: 82.5516 us. Best GFLOPs: 11214.5698
2024-04-28 23:11:31 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #329: GFLOPs: 10042.2811. Time: 83.0614 us. Best GFLOPs: 11214.5698
2024-04-28 23:11:31 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #330: GFLOPs: 10054.5799. Time: 82.9598 us. Best GFLOPs: 11214.5698
2024-04-28 23:11:31 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #331: GFLOPs: 10310.5787. Time: 80.9000 us. Best GFLOPs: 11214.5698
2024-04-28 23:11:31 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #332: GFLOPs: 10473.0176. Time: 79.6452 us. Best GFLOPs: 11214.5698
2024-04-28 23:11:31 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #333: GFLOPs: 10525.1902. Time: 79.2504 us. Best GFLOPs: 11214.5698
2024-04-28 23:11:31 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #334: GFLOPs: 9344.2112. Time: 89.2666 us. Best GFLOPs: 11214.5698
2024-04-28 23:11:31 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #335: GFLOPs: 9405.6586. Time: 88.6834 us. Best GFLOPs: 11214.5698
2024-04-28 23:11:31 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #336: GFLOPs: 9598.3073. Time: 86.9034 us. Best GFLOPs: 11214.5698
2024-04-28 23:11:31 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #337: GFLOPs: 10244.2777. Time: 81.4236 us. Best GFLOPs: 11214.5698
2024-04-28 23:11:31 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #338: GFLOPs: 10087.7986. Time: 82.6866 us. Best GFLOPs: 11214.5698
2024-04-28 23:11:31 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #339: GFLOPs: 10062.9417. Time: 82.8909 us. Best GFLOPs: 11214.5698
2024-04-28 23:11:31 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #340: GFLOPs: 9260.1801. Time: 90.0766 us. Best GFLOPs: 11214.5698
2024-04-28 23:11:31 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #341: GFLOPs: 10114.9216. Time: 82.4649 us. Best GFLOPs: 11214.5698
2024-04-28 23:11:31 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #342: GFLOPs: 10622.0914. Time: 78.5275 us. Best GFLOPs: 11214.5698
2024-04-28 23:11:31 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #343: GFLOPs: 10278.3353. Time: 81.1538 us. Best GFLOPs: 11214.5698
2024-04-28 23:11:31 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #344: GFLOPs: 10699.2807. Time: 77.9609 us. Best GFLOPs: 11214.5698
2024-04-28 23:11:31 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #345: GFLOPs: 10116.2079. Time: 82.4544 us. Best GFLOPs: 11214.5698
2024-04-28 23:11:31 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #346: GFLOPs: 10562.8748. Time: 78.9677 us. Best GFLOPs: 11214.5698
2024-04-28 23:11:31 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #347: GFLOPs: 10317.4334. Time: 80.8463 us. Best GFLOPs: 11214.5698
2024-04-28 23:11:31 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #348: GFLOPs: 10157.0609. Time: 82.1228 us. Best GFLOPs: 11214.5698
2024-04-28 23:11:31 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #349: GFLOPs: 9252.6384. Time: 90.1501 us. Best GFLOPs: 11214.5698
2024-04-28 23:11:31 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #350: GFLOPs: 10760.4512. Time: 77.5177 us. Best GFLOPs: 11214.5698
2024-04-28 23:11:31 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #351: GFLOPs: 10259.7061. Time: 81.3011 us. Best GFLOPs: 11214.5698
2024-04-28 23:11:31 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #352: GFLOPs: 10166.0044. Time: 82.0505 us. Best GFLOPs: 11214.5698
2024-04-28 23:11:31 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #353: GFLOPs: 10458.0375. Time: 79.7593 us. Best GFLOPs: 11214.5698
2024-04-28 23:11:31 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #354: GFLOPs: 9950.7862. Time: 83.8251 us. Best GFLOPs: 11214.5698
2024-04-28 23:11:31 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #355: GFLOPs: 10161.7996. Time: 82.0845 us. Best GFLOPs: 11214.5698
2024-04-28 23:11:31 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #356: GFLOPs: 10283.8635. Time: 81.1102 us. Best GFLOPs: 11214.5698
2024-04-28 23:11:31 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #357: GFLOPs: 10460.5768. Time: 79.7399 us. Best GFLOPs: 11214.5698
2024-04-28 23:11:31 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #358: GFLOPs: 10801.3510. Time: 77.2242 us. Best GFLOPs: 11214.5698
2024-04-28 23:11:31 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #359: GFLOPs: 10317.0961. Time: 80.8489 us. Best GFLOPs: 11214.5698
2024-04-28 23:11:31 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #360: GFLOPs: 9184.3735. Time: 90.8201 us. Best GFLOPs: 11214.5698
2024-04-28 23:11:31 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #361: GFLOPs: 10409.8386. Time: 80.1286 us. Best GFLOPs: 11214.5698
2024-04-28 23:11:31 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #362: GFLOPs: 10235.6569. Time: 81.4922 us. Best GFLOPs: 11214.5698
2024-04-28 23:11:31 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #363: GFLOPs: 10677.8950. Time: 78.1171 us. Best GFLOPs: 11214.5698
2024-04-28 23:11:31 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #364: GFLOPs: 10565.3130. Time: 78.9495 us. Best GFLOPs: 11214.5698
2024-04-28 23:11:31 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #365: GFLOPs: 10160.5566. Time: 82.0945 us. Best GFLOPs: 11214.5698
2024-04-28 23:11:31 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #366: GFLOPs: 10282.4269. Time: 81.1215 us. Best GFLOPs: 11214.5698
2024-04-28 23:11:31 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #367: GFLOPs: 10409.8432. Time: 80.1286 us. Best GFLOPs: 11214.5698
2024-04-28 23:11:31 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #368: GFLOPs: 9544.1221. Time: 87.3968 us. Best GFLOPs: 11214.5698
2024-04-28 23:11:31 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #369: GFLOPs: 10360.2059. Time: 80.5125 us. Best GFLOPs: 11214.5698
2024-04-28 23:11:31 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #370: GFLOPs: 10113.6975. Time: 82.4749 us. Best GFLOPs: 11214.5698
2024-04-28 23:11:31 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #371: GFLOPs: 10616.6408. Time: 78.5678 us. Best GFLOPs: 11214.5698
2024-04-28 23:11:31 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #372: GFLOPs: 10356.8457. Time: 80.5386 us. Best GFLOPs: 11214.5698
2024-04-28 23:11:31 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #373: GFLOPs: 10356.7565. Time: 80.5393 us. Best GFLOPs: 11214.5698
2024-04-28 23:11:31 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #374: GFLOPs: 10314.6019. Time: 80.8684 us. Best GFLOPs: 11214.5698
2024-04-28 23:11:31 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #375: GFLOPs: 10234.2978. Time: 81.5030 us. Best GFLOPs: 11214.5698
2024-04-28 23:11:31 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #376: GFLOPs: 10323.3086. Time: 80.8002 us. Best GFLOPs: 11214.5698
2024-04-28 23:11:31 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #377: GFLOPs: 10499.8450. Time: 79.4417 us. Best GFLOPs: 11214.5698
2024-04-28 23:11:31 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #378: GFLOPs: 10401.0177. Time: 80.1966 us. Best GFLOPs: 11214.5698
2024-04-28 23:11:31 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #379: GFLOPs: 10334.5462. Time: 80.7124 us. Best GFLOPs: 11214.5698
2024-04-28 23:11:31 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #380: GFLOPs: 10197.9661. Time: 81.7934 us. Best GFLOPs: 11214.5698
2024-04-28 23:11:31 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #381: GFLOPs: 10215.1266. Time: 81.6559 us. Best GFLOPs: 11214.5698
2024-04-28 23:11:31 [INFO] [task_scheduler.cc:121] [Task #2: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #382: Error in building:
LocalBuilder: Timeout, killed after 30.0 seconds
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(64), T.int64(112), T.int64(112)), "float32"), p1: T.Buffer((T.int64(6), T.int64(6), T.int64(64), T.int64(128)), "float32"), p2: T.Buffer((T.int64(1), T.int64(128), T.int64(1), T.int64(1)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(128), T.int64(112), T.int64(112)), "float32")):
        T.func_attr({"layout_free_buffers": [1], "tir.noalias": T.bool(True)})
        # with T.block("root"):
        input_tile_local = T.alloc_buffer((T.int64(64), T.int64(784), T.int64(6), T.int64(6)), scope="local")
        data_pack = T.alloc_buffer((T.int64(6), T.int64(6), T.int64(64), T.int64(784)))
        bgemm = T.alloc_buffer((T.int64(6), T.int64(6), T.int64(128), T.int64(784)))
        inverse_local = T.alloc_buffer((T.int64(128), T.int64(784), T.int64(4), T.int64(4)), scope="local")
        data_pack_local = T.alloc_buffer((T.int64(6), T.int64(6), T.int64(64), T.int64(784)), scope="local")
        bgemm_local = T.alloc_buffer((T.int64(6), T.int64(6), T.int64(128), T.int64(784)), scope="local")
        data_pack_shared = T.alloc_buffer((T.int64(6), T.int64(6), T.int64(64), T.int64(784)), scope="shared")
        p1_shared = T.alloc_buffer((T.int64(6), T.int64(6), T.int64(64), T.int64(128)), scope="shared")
        for ci_p_fused_0 in T.thread_binding(T.int64(196), thread="blockIdx.x", annotations={"pragma_auto_unroll_max_step": 1024, "pragma_unroll_explicit": 1}):
            for ci_p_fused_1 in T.thread_binding(T.int64(256), thread="threadIdx.x"):
                for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(1), T.int64(6), T.int64(6)):
                    with T.block("input_tile"):
                        v_ci = T.axis.spatial(T.int64(64), (ci_p_fused_0 * T.int64(256) + ci_p_fused_1) // T.int64(784) + ax0)
                        v_p = T.axis.spatial(T.int64(784), (ci_p_fused_0 * T.int64(256) + ci_p_fused_1) % T.int64(784) + ax1)
                        v_eps, v_nu = T.axis.remap("SS", [ax2, ax3])
                        T.reads(p0[v_p // T.int64(784), v_ci, v_p % T.int64(784) // T.int64(28) * T.int64(4) + v_eps - T.int64(1), v_p % T.int64(28) * T.int64(4) + v_nu - T.int64(1)])
                        T.writes(input_tile_local[v_ci, v_p, v_eps, v_nu])
                        T.block_attr({"schedule_rule": "None"})
                        input_tile_local[v_ci, v_p, v_eps, v_nu] = T.if_then_else(T.int64(1) <= v_p % T.int64(784) // T.int64(28) * T.int64(4) + v_eps and v_p % T.int64(784) // T.int64(28) * T.int64(4) + v_eps < T.int64(113) and T.int64(1) <= v_p % T.int64(28) * T.int64(4) + v_nu and v_p % T.int64(28) * T.int64(4) + v_nu < T.int64(113), p0[v_p // T.int64(784), v_ci, v_p % T.int64(784) // T.int64(28) * T.int64(4) + v_eps - T.int64(1), v_p % T.int64(28) * T.int64(4) + v_nu - T.int64(1)], T.float32(0))
                for eps in T.unroll(T.int64(6)):
                    for nu in T.unroll(T.int64(6)):
                        with T.block("data_pack_init"):
                            v_eps, v_nu = T.axis.remap("SS", [eps, nu])
                            v_ci = T.axis.spatial(T.int64(64), (ci_p_fused_0 * T.int64(256) + ci_p_fused_1) // T.int64(784))
                            v_p = T.axis.spatial(T.int64(784), (ci_p_fused_0 * T.int64(256) + ci_p_fused_1) % T.int64(784))
                            T.reads()
                            T.writes(data_pack_local[v_eps, v_nu, v_ci, v_p])
                            T.block_attr({"schedule_rule": "conv2d_nchw_winograd_data_pack"})
                            data_pack_local[v_eps, v_nu, v_ci, v_p] = T.float32(0)
                        for r_a in T.unroll(T.int64(6)):
                            for r_b in T.unroll(T.int64(6)):
                                with T.block("data_pack_update"):
                                    v_eps, v_nu = T.axis.remap("SS", [eps, nu])
                                    v_ci = T.axis.spatial(T.int64(64), (ci_p_fused_0 * T.int64(256) + ci_p_fused_1) // T.int64(784))
                                    v_p = T.axis.spatial(T.int64(784), (ci_p_fused_0 * T.int64(256) + ci_p_fused_1) % T.int64(784))
                                    v_r_a, v_r_b = T.axis.remap("RR", [r_a, r_b])
                                    T.reads(data_pack_local[v_eps, v_nu, v_ci, v_p], input_tile_local[v_ci, v_p, v_r_a, v_r_b])
                                    T.writes(data_pack_local[v_eps, v_nu, v_ci, v_p])
                                    T.block_attr({"schedule_rule": "conv2d_nchw_winograd_data_pack"})
                                    data_pack_local[v_eps, v_nu, v_ci, v_p] = data_pack_local[v_eps, v_nu, v_ci, v_p] + input_tile_local[v_ci, v_p, v_r_a, v_r_b] * T.Select(v_r_a % T.int64(6) == T.int64(5) and v_eps % T.int64(6) == T.int64(5), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(5) and v_eps % T.int64(6) == T.int64(4), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(5) and v_eps % T.int64(6) == T.int64(3), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(5) and v_eps % T.int64(6) == T.int64(2), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(5) and v_eps % T.int64(6) == T.int64(1), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(5) and v_eps % T.int64(6) == T.int64(0), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(4) and v_eps % T.int64(6) == T.int64(5), T.float32(1.5), T.Select(v_r_a % T.int64(6) == T.int64(4) and v_eps % T.int64(6) == T.int64(4), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(4) and v_eps % T.int64(6) == T.int64(3), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(4) and v_eps % T.int64(6) == T.int64(2), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(4) and v_eps % T.int64(6) == T.int64(1), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(4) and v_eps % T.int64(6) == T.int64(0), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(3) and v_eps % T.int64(6) == T.int64(5), T.float32(-2), T.Select(v_r_a % T.int64(6) == T.int64(3) and v_eps % T.int64(6) == T.int64(4), T.float32(-0.5), T.Select(v_r_a % T.int64(6) == T.int64(3) and v_eps % T.int64(6) == T.int64(3), T.float32(2), T.Select(v_r_a % T.int64(6) == T.int64(3) and v_eps % T.int64(6) == T.int64(2), T.float32(2.5), T.Select(v_r_a % T.int64(6) == T.int64(3) and v_eps % T.int64(6) == T.int64(1), T.float32(0.5), T.Select(v_r_a % T.int64(6) == T.int64(3) and v_eps % T.int64(6) == T.int64(0), T.float32(1.5), T.Select(v_r_a % T.int64(6) == T.int64(2) and v_eps % T.int64(6) == T.int64(5), T.float32(-1.5), T.Select(v_r_a % T.int64(6) == T.int64(2) and v_eps % T.int64(6) == T.int64(4), T.float32(-1), T.Select(v_r_a % T.int64(6) == T.int64(2) and v_eps % T.int64(6) == T.int64(3), T.float32(-1), T.Select(v_r_a % T.int64(6) == T.int64(2) and v_eps % T.int64(6) == T.int64(2), T.float32(0.5), T.Select(v_r_a % T.int64(6) == T.int64(2) and v_eps % T.int64(6) == T.int64(1), T.float32(-2.5), T.Select(v_r_a % T.int64(6) == T.int64(2) and v_eps % T.int64(6) == T.int64(0), T.float32(-2), T.Select(v_r_a % T.int64(6) == T.int64(1) and v_eps % T.int64(6) == T.int64(5), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(1) and v_eps % T.int64(6) == T.int64(4), T.float32(0.5), T.Select(v_r_a % T.int64(6) == T.int64(1) and v_eps % T.int64(6) == T.int64(3), T.float32(-2), T.Select(v_r_a % T.int64(6) == T.int64(1) and v_eps % T.int64(6) == T.int64(2), T.float32(-1), T.Select(v_r_a % T.int64(6) == T.int64(1) and v_eps % T.int64(6) == T.int64(1), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(1) and v_eps % T.int64(6) == T.int64(0), T.float32(-1.5), T.Select(v_r_a % T.int64(6) == T.int64(0) and v_eps % T.int64(6) == T.int64(5), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(0) and v_eps % T.int64(6) == T.int64(4), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(0) and v_eps % T.int64(6) == T.int64(3), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(0) and v_eps % T.int64(6) == T.int64(2), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(0) and v_eps % T.int64(6) == T.int64(1), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(0) and v_eps % T.int64(6) == T.int64(0), T.float32(1), T.float32(0))))))))))))))))))))))))))))))))))))) * T.Select(v_r_b % T.int64(6) == T.int64(5) and v_nu % T.int64(6) == T.int64(5), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(5) and v_nu % T.int64(6) == T.int64(4), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(5) and v_nu % T.int64(6) == T.int64(3), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(5) and v_nu % T.int64(6) == T.int64(2), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(5) and v_nu % T.int64(6) == T.int64(1), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(5) and v_nu % T.int64(6) == T.int64(0), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(4) and v_nu % T.int64(6) == T.int64(5), T.float32(1.5), T.Select(v_r_b % T.int64(6) == T.int64(4) and v_nu % T.int64(6) == T.int64(4), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(4) and v_nu % T.int64(6) == T.int64(3), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(4) and v_nu % T.int64(6) == T.int64(2), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(4) and v_nu % T.int64(6) == T.int64(1), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(4) and v_nu % T.int64(6) == T.int64(0), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(3) and v_nu % T.int64(6) == T.int64(5), T.float32(-2), T.Select(v_r_b % T.int64(6) == T.int64(3) and v_nu % T.int64(6) == T.int64(4), T.float32(-0.5), T.Select(v_r_b % T.int64(6) == T.int64(3) and v_nu % T.int64(6) == T.int64(3), T.float32(2), T.Select(v_r_b % T.int64(6) == T.int64(3) and v_nu % T.int64(6) == T.int64(2), T.float32(2.5), T.Select(v_r_b % T.int64(6) == T.int64(3) and v_nu % T.int64(6) == T.int64(1), T.float32(0.5), T.Select(v_r_b % T.int64(6) == T.int64(3) and v_nu % T.int64(6) == T.int64(0), T.float32(1.5), T.Select(v_r_b % T.int64(6) == T.int64(2) and v_nu % T.int64(6) == T.int64(5), T.float32(-1.5), T.Select(v_r_b % T.int64(6) == T.int64(2) and v_nu % T.int64(6) == T.int64(4), T.float32(-1), T.Select(v_r_b % T.int64(6) == T.int64(2) and v_nu % T.int64(6) == T.int64(3), T.float32(-1), T.Select(v_r_b % T.int64(6) == T.int64(2) and v_nu % T.int64(6) == T.int64(2), T.float32(0.5), T.Select(v_r_b % T.int64(6) == T.int64(2) and v_nu % T.int64(6) == T.int64(1), T.float32(-2.5), T.Select(v_r_b % T.int64(6) == T.int64(2) and v_nu % T.int64(6) == T.int64(0), T.float32(-2), T.Select(v_r_b % T.int64(6) == T.int64(1) and v_nu % T.int64(6) == T.int64(5), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(1) and v_nu % T.int64(6) == T.int64(4), T.float32(0.5), T.Select(v_r_b % T.int64(6) == T.int64(1) and v_nu % T.int64(6) == T.int64(3), T.float32(-2), T.Select(v_r_b % T.int64(6) == T.int64(1) and v_nu % T.int64(6) == T.int64(2), T.float32(-1), T.Select(v_r_b % T.int64(6) == T.int64(1) and v_nu % T.int64(6) == T.int64(1), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(1) and v_nu % T.int64(6) == T.int64(0), T.float32(-1.5), T.Select(v_r_b % T.int64(6) == T.int64(0) and v_nu % T.int64(6) == T.int64(5), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(0) and v_nu % T.int64(6) == T.int64(4), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(0) and v_nu % T.int64(6) == T.int64(3), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(0) and v_nu % T.int64(6) == T.int64(2), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(0) and v_nu % T.int64(6) == T.int64(1), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(0) and v_nu % T.int64(6) == T.int64(0), T.float32(1), T.float32(0)))))))))))))))))))))))))))))))))))))
                for ax0, ax1, ax2, ax3 in T.grid(T.int64(6), T.int64(6), T.int64(1), T.int64(1)):
                    with T.block("data_pack_local"):
                        v0, v1 = T.axis.remap("SS", [ax0, ax1])
                        v2 = T.axis.spatial(T.int64(64), (ci_p_fused_0 * T.int64(256) + ci_p_fused_1) // T.int64(784) + ax2)
                        v3 = T.axis.spatial(T.int64(784), (ci_p_fused_0 * T.int64(256) + ci_p_fused_1) % T.int64(784) + ax3)
                        T.reads(data_pack_local[v0, v1, v2, v3])
                        T.writes(data_pack[v0, v1, v2, v3])
                        data_pack[v0, v1, v2, v3] = data_pack_local[v0, v1, v2, v3]
        for eps_0_nu_0_co_0_p_0_fused in T.thread_binding(T.int64(84), thread="blockIdx.x", annotations={"pragma_auto_unroll_max_step": 1024, "pragma_unroll_explicit": 1}):
            for eps_1_nu_1_co_1_p_1_fused in T.thread_binding(T.int64(1), thread="vthread.x"):
                for eps_2_nu_2_co_2_p_2_fused in T.thread_binding(T.int64(42), thread="threadIdx.x"):
                    for eps_3_init, nu_3_init, co_3_init, p_3_init, eps_4_init, nu_4_init, co_4_init, p_4_init in T.grid(T.int64(2), T.int64(1), T.int64(32), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(16)):
                        with T.block("bgemm_init"):
                            v_eps = T.axis.spatial(T.int64(6), eps_0_nu_0_co_0_p_0_fused // T.int64(28) * T.int64(2) + eps_3_init + eps_4_init)
                            v_nu = T.axis.spatial(T.int64(6), eps_2_nu_2_co_2_p_2_fused // T.int64(7) + nu_3_init + nu_4_init)
                            v_co = T.axis.spatial(T.int64(128), eps_0_nu_0_co_0_p_0_fused % T.int64(28) // T.int64(7) * T.int64(32) + co_3_init + co_4_init)
                            v_p = T.axis.spatial(T.int64(784), eps_0_nu_0_co_0_p_0_fused % T.int64(7) * T.int64(112) + eps_2_nu_2_co_2_p_2_fused % T.int64(7) * T.int64(16) + p_3_init * T.int64(16) + p_4_init)
                            T.reads()
                            T.writes(bgemm_local[v_eps, v_nu, v_co, v_p])
                            T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 32, "meta_schedule.tiling_structure": "SSSRRSRS"})
                            bgemm_local[v_eps, v_nu, v_co, v_p] = T.float32(0)
                    for ci_0 in range(T.int64(32)):
                        for ax0_ax1_ax2_ax3_fused_0 in range(T.int64(16)):
                            for ax0_ax1_ax2_ax3_fused_1 in T.thread_binding(T.int64(42), thread="threadIdx.x"):
                                for ax0_ax1_ax2_ax3_fused_2 in T.vectorized(T.int64(4)):
                                    with T.block("data_pack_shared"):
                                        v0 = T.axis.spatial(T.int64(6), eps_0_nu_0_co_0_p_0_fused // T.int64(28) * T.int64(2) + (ax0_ax1_ax2_ax3_fused_0 * T.int64(168) + ax0_ax1_ax2_ax3_fused_1 * T.int64(4) + ax0_ax1_ax2_ax3_fused_2) // T.int64(1344))
                                        v1 = T.axis.spatial(T.int64(6), (ax0_ax1_ax2_ax3_fused_0 * T.int64(168) + ax0_ax1_ax2_ax3_fused_1 * T.int64(4) + ax0_ax1_ax2_ax3_fused_2) % T.int64(1344) // T.int64(224))
                                        v2 = T.axis.spatial(T.int64(64), ci_0 * T.int64(2) + (ax0_ax1_ax2_ax3_fused_0 * T.int64(168) + ax0_ax1_ax2_ax3_fused_1 * T.int64(4) + ax0_ax1_ax2_ax3_fused_2) % T.int64(224) // T.int64(112))
                                        v3 = T.axis.spatial(T.int64(784), eps_0_nu_0_co_0_p_0_fused % T.int64(7) * T.int64(112) + (ax0_ax1_ax2_ax3_fused_0 * T.int64(168) + ax0_ax1_ax2_ax3_fused_1 * T.int64(4) + ax0_ax1_ax2_ax3_fused_2) % T.int64(112))
                                        T.reads(data_pack[v0, v1, v2, v3])
                                        T.writes(data_pack_shared[v0, v1, v2, v3])
                                        data_pack_shared[v0, v1, v2, v3] = data_pack[v0, v1, v2, v3]
                        for ax0_ax1_ax2_ax3_fused_0 in range(T.int64(5)):
                            for ax0_ax1_ax2_ax3_fused_1 in T.thread_binding(T.int64(42), thread="threadIdx.x"):
                                for ax0_ax1_ax2_ax3_fused_2 in T.vectorized(T.int64(4)):
                                    with T.block("p1_shared"):
                                        v0 = T.axis.spatial(T.int64(6), eps_0_nu_0_co_0_p_0_fused // T.int64(28) * T.int64(2) + (ax0_ax1_ax2_ax3_fused_0 * T.int64(168) + ax0_ax1_ax2_ax3_fused_1 * T.int64(4) + ax0_ax1_ax2_ax3_fused_2) // T.int64(384))
                                        v1 = T.axis.spatial(T.int64(6), (ax0_ax1_ax2_ax3_fused_0 * T.int64(168) + ax0_ax1_ax2_ax3_fused_1 * T.int64(4) + ax0_ax1_ax2_ax3_fused_2) % T.int64(384) // T.int64(64))
                                        v2 = T.axis.spatial(T.int64(64), ci_0 * T.int64(2) + (ax0_ax1_ax2_ax3_fused_0 * T.int64(168) + ax0_ax1_ax2_ax3_fused_1 * T.int64(4) + ax0_ax1_ax2_ax3_fused_2) % T.int64(64) // T.int64(32))
                                        v3 = T.axis.spatial(T.int64(128), eps_0_nu_0_co_0_p_0_fused % T.int64(28) // T.int64(7) * T.int64(32) + (ax0_ax1_ax2_ax3_fused_0 * T.int64(168) + ax0_ax1_ax2_ax3_fused_1 * T.int64(4) + ax0_ax1_ax2_ax3_fused_2) % T.int64(32))
                                        T.where((ax0_ax1_ax2_ax3_fused_0 * T.int64(42) + ax0_ax1_ax2_ax3_fused_1) * T.int64(4) + ax0_ax1_ax2_ax3_fused_2 < T.int64(768))
                                        T.reads(p1[v0, v1, v2, v3])
                                        T.writes(p1_shared[v0, v1, v2, v3])
                                        p1_shared[v0, v1, v2, v3] = p1[v0, v1, v2, v3]
                        for ci_1, eps_3, nu_3, co_3, p_3, ci_2, eps_4, nu_4, co_4, p_4 in T.grid(T.int64(1), T.int64(2), T.int64(1), T.int64(32), T.int64(1), T.int64(2), T.int64(1), T.int64(1), T.int64(1), T.int64(16)):
                            with T.block("bgemm_update"):
                                v_eps = T.axis.spatial(T.int64(6), eps_0_nu_0_co_0_p_0_fused // T.int64(28) * T.int64(2) + eps_3 + eps_4)
                                v_nu = T.axis.spatial(T.int64(6), eps_2_nu_2_co_2_p_2_fused // T.int64(7) + nu_3 + nu_4)
                                v_co = T.axis.spatial(T.int64(128), eps_0_nu_0_co_0_p_0_fused % T.int64(28) // T.int64(7) * T.int64(32) + co_3 + co_4)
                                v_p = T.axis.spatial(T.int64(784), eps_0_nu_0_co_0_p_0_fused % T.int64(7) * T.int64(112) + eps_2_nu_2_co_2_p_2_fused % T.int64(7) * T.int64(16) + p_3 * T.int64(16) + p_4)
                                v_ci = T.axis.reduce(T.int64(64), ci_0 * T.int64(2) + ci_1 * T.int64(2) + ci_2)
                                T.reads(bgemm_local[v_eps, v_nu, v_co, v_p], data_pack_shared[v_eps, v_nu, v_ci, v_p], p1_shared[v_eps, v_nu, v_ci, v_co])
                                T.writes(bgemm_local[v_eps, v_nu, v_co, v_p])
                                T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 32, "meta_schedule.tiling_structure": "SSSRRSRS"})
                                bgemm_local[v_eps, v_nu, v_co, v_p] = bgemm_local[v_eps, v_nu, v_co, v_p] + data_pack_shared[v_eps, v_nu, v_ci, v_p] * p1_shared[v_eps, v_nu, v_ci, v_co]
                    for ax0, ax1, ax2, ax3 in T.grid(T.int64(2), T.int64(1), T.int64(32), T.int64(16)):
                        with T.block("bgemm_local"):
                            v0 = T.axis.spatial(T.int64(6), eps_0_nu_0_co_0_p_0_fused // T.int64(28) * T.int64(2) + ax0)
                            v1 = T.axis.spatial(T.int64(6), eps_2_nu_2_co_2_p_2_fused // T.int64(7) + ax1)
                            v2 = T.axis.spatial(T.int64(128), eps_0_nu_0_co_0_p_0_fused % T.int64(28) // T.int64(7) * T.int64(32) + ax2)
                            v3 = T.axis.spatial(T.int64(784), eps_0_nu_0_co_0_p_0_fused % T.int64(7) * T.int64(112) + eps_2_nu_2_co_2_p_2_fused % T.int64(7) * T.int64(16) + ax3)
                            T.reads(bgemm_local[v0, v1, v2, v3])
                            T.writes(bgemm[v0, v1, v2, v3])
                            bgemm[v0, v1, v2, v3] = bgemm_local[v0, v1, v2, v3]
        for n_co_h_0_w_0_fused_0 in T.thread_binding(T.int64(784), thread="blockIdx.x", annotations={"pragma_auto_unroll_max_step": 1024, "pragma_unroll_explicit": 1}):
            for n_co_h_0_w_0_fused_1 in T.thread_binding(T.int64(128), thread="threadIdx.x"):
                for ax0, ax1 in T.grid(T.int64(1), T.int64(1)):
                    for ax2 in T.unroll(T.int64(4)):
                        for ax3 in T.unroll(T.int64(4)):
                            with T.block("inverse_init"):
                                v_co = T.axis.spatial(T.int64(128), (n_co_h_0_w_0_fused_0 * T.int64(128) + n_co_h_0_w_0_fused_1) // T.int64(784) + ax0)
                                v_p = T.axis.spatial(T.int64(784), (n_co_h_0_w_0_fused_0 * T.int64(128) + n_co_h_0_w_0_fused_1) % T.int64(784) + ax1)
                                v_vh, v_vw = T.axis.remap("SS", [ax2, ax3])
                                T.reads()
                                T.writes(inverse_local[v_co, v_p, v_vh, v_vw])
                                T.block_attr({"schedule_rule": "conv2d_nchw_winograd_inverse"})
                                inverse_local[v_co, v_p, v_vh, v_vw] = T.float32(0)
                            for ax4 in T.unroll(T.int64(6)):
                                for ax5 in T.unroll(T.int64(6)):
                                    with T.block("inverse_update"):
                                        v_co = T.axis.spatial(T.int64(128), (n_co_h_0_w_0_fused_0 * T.int64(128) + n_co_h_0_w_0_fused_1) // T.int64(784) + ax0)
                                        v_p = T.axis.spatial(T.int64(784), (n_co_h_0_w_0_fused_0 * T.int64(128) + n_co_h_0_w_0_fused_1) % T.int64(784) + ax1)
                                        v_vh, v_vw, v_r_a, v_r_b = T.axis.remap("SSRR", [ax2, ax3, ax4, ax5])
                                        T.reads(inverse_local[v_co, v_p, v_vh, v_vw], bgemm[v_r_a, v_r_b, v_co, v_p])
                                        T.writes(inverse_local[v_co, v_p, v_vh, v_vw])
                                        T.block_attr({"schedule_rule": "conv2d_nchw_winograd_inverse"})
                                        inverse_local[v_co, v_p, v_vh, v_vw] = inverse_local[v_co, v_p, v_vh, v_vw] + bgemm[v_r_a, v_r_b, v_co, v_p] * T.Select(v_r_a % T.int64(6) == T.int64(5) and v_vh % T.int64(4) == T.int64(3), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(5) and v_vh % T.int64(4) == T.int64(2), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(5) and v_vh % T.int64(4) == T.int64(1), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(5) and v_vh % T.int64(4) == T.int64(0), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(4) and v_vh % T.int64(4) == T.int64(3), T.float32(-8), T.Select(v_r_a % T.int64(6) == T.int64(4) and v_vh % T.int64(4) == T.int64(2), T.float32(4), T.Select(v_r_a % T.int64(6) == T.int64(4) and v_vh % T.int64(4) == T.int64(1), T.float32(-2), T.Select(v_r_a % T.int64(6) == T.int64(4) and v_vh % T.int64(4) == T.int64(0), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(3) and v_vh % T.int64(4) == T.int64(3), T.float32(0.125), T.Select(v_r_a % T.int64(6) == T.int64(3) and v_vh % T.int64(4) == T.int64(2), T.float32(0.25), T.Select(v_r_a % T.int64(6) == T.int64(3) and v_vh % T.int64(4) == T.int64(1), T.float32(0.5), T.Select(v_r_a % T.int64(6) == T.int64(3) and v_vh % T.int64(4) == T.int64(0), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(2) and v_vh % T.int64(4) == T.int64(3), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(2) and v_vh % T.int64(4) == T.int64(2), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(2) and v_vh % T.int64(4) == T.int64(1), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(2) and v_vh % T.int64(4) == T.int64(0), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(1) and v_vh % T.int64(4) == T.int64(3), T.float32(-1), T.Select(v_r_a % T.int64(6) == T.int64(1) and v_vh % T.int64(4) == T.int64(2), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(1) and v_vh % T.int64(4) == T.int64(1), T.float32(-1), T.Select(v_r_a % T.int64(6) == T.int64(1) and v_vh % T.int64(4) == T.int64(0), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(0) and v_vh % T.int64(4) == T.int64(3), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(0) and v_vh % T.int64(4) == T.int64(2), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(0) and v_vh % T.int64(4) == T.int64(1), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(0) and v_vh % T.int64(4) == T.int64(0), T.float32(1), T.float32(0))))))))))))))))))))))))) * T.Select(v_r_b % T.int64(6) == T.int64(5) and v_vw % T.int64(4) == T.int64(3), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(5) and v_vw % T.int64(4) == T.int64(2), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(5) and v_vw % T.int64(4) == T.int64(1), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(5) and v_vw % T.int64(4) == T.int64(0), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(4) and v_vw % T.int64(4) == T.int64(3), T.float32(-8), T.Select(v_r_b % T.int64(6) == T.int64(4) and v_vw % T.int64(4) == T.int64(2), T.float32(4), T.Select(v_r_b % T.int64(6) == T.int64(4) and v_vw % T.int64(4) == T.int64(1), T.float32(-2), T.Select(v_r_b % T.int64(6) == T.int64(4) and v_vw % T.int64(4) == T.int64(0), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(3) and v_vw % T.int64(4) == T.int64(3), T.float32(0.125), T.Select(v_r_b % T.int64(6) == T.int64(3) and v_vw % T.int64(4) == T.int64(2), T.float32(0.25), T.Select(v_r_b % T.int64(6) == T.int64(3) and v_vw % T.int64(4) == T.int64(1), T.float32(0.5), T.Select(v_r_b % T.int64(6) == T.int64(3) and v_vw % T.int64(4) == T.int64(0), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(2) and v_vw % T.int64(4) == T.int64(3), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(2) and v_vw % T.int64(4) == T.int64(2), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(2) and v_vw % T.int64(4) == T.int64(1), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(2) and v_vw % T.int64(4) == T.int64(0), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(1) and v_vw % T.int64(4) == T.int64(3), T.float32(-1), T.Select(v_r_b % T.int64(6) == T.int64(1) and v_vw % T.int64(4) == T.int64(2), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(1) and v_vw % T.int64(4) == T.int64(1), T.float32(-1), T.Select(v_r_b % T.int64(6) == T.int64(1) and v_vw % T.int64(4) == T.int64(0), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(0) and v_vw % T.int64(4) == T.int64(3), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(0) and v_vw % T.int64(4) == T.int64(2), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(0) and v_vw % T.int64(4) == T.int64(1), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(0) and v_vw % T.int64(4) == T.int64(0), T.float32(1), T.float32(0)))))))))))))))))))))))))
                for h_1, w_1 in T.grid(T.int64(4), T.int64(4)):
                    with T.block("conv2d_winograd"):
                        v_n = T.axis.spatial(T.int64(1), T.int64(0))
                        v_co = T.axis.spatial(T.int64(128), (n_co_h_0_w_0_fused_0 * T.int64(128) + n_co_h_0_w_0_fused_1) // T.int64(784))
                        v_h = T.axis.spatial(T.int64(112), (n_co_h_0_w_0_fused_0 * T.int64(128) + n_co_h_0_w_0_fused_1) % T.int64(784) // T.int64(28) * T.int64(4) + h_1)
                        v_w = T.axis.spatial(T.int64(112), (n_co_h_0_w_0_fused_0 * T.int64(128) + n_co_h_0_w_0_fused_1) % T.int64(28) * T.int64(4) + w_1)
                        T.reads(inverse_local[v_co, v_n * T.int64(784) + v_h // T.int64(4) * T.int64(28) + v_w // T.int64(4), v_h % T.int64(4), v_w % T.int64(4)], p2[v_n, v_co, T.int64(0), T.int64(0)])
                        T.writes(T_relu[v_n, v_co, v_h, v_w])
                        T_relu[v_n, v_co, v_h, v_w] = T.max(inverse_local[v_co, v_n * T.int64(784) + v_h // T.int64(4) * T.int64(28) + v_w // T.int64(4), v_h % T.int64(4), v_w % T.int64(4)] + p2[v_n, v_co, T.int64(0), T.int64(0)], T.float32(0))
b0 = sch.get_block(name="data_pack", func_name="main")
b1 = sch.get_block(name="bgemm", func_name="main")
b2 = sch.get_block(name="inverse", func_name="main")
b3 = sch.get_block(name="conv2d_winograd", func_name="main")
b4 = sch.get_block(name="T_add", func_name="main")
b5 = sch.get_block(name="T_relu", func_name="main")
b6 = sch.get_block(name="root", func_name="main")
b7, b8 = sch.get_producers(block=b2)
sch.compute_inline(block=b8)
b9, = sch.get_consumers(block=b2)
l10, l11, l12, l13 = sch.get_loops(block=b9)
l14, l15 = sch.split(loop=l12, factors=[None, 4], preserve_unit_iters=True)
l16, l17 = sch.split(loop=l13, factors=[None, 4], preserve_unit_iters=True)
sch.reorder(l14, l16, l15, l17)
sch.compute_at(block=b2, loop=l16, preserve_unit_loops=True, index=-1)
sch.set_scope(block=b2, buffer_index=0, storage_scope="local")
l18, l19, l20, l21, l22, l23, l24, l25, l26, l27 = sch.get_loops(block=b2)
sch.unroll(loop=l24)
sch.unroll(loop=l25)
sch.unroll(loop=l26)
sch.unroll(loop=l27)
b28, b29 = sch.get_producers(block=b0)
sch.compute_inline(block=b29)
b30, = sch.get_producers(block=b28)
l31, l32, l33, l34, l35, l36 = sch.get_loops(block=b0)
sch.reorder(l33, l34, l31, l32, l35, l36)
sch.unroll(loop=l31)
sch.unroll(loop=l32)
sch.unroll(loop=l35)
sch.unroll(loop=l36)
l37 = sch.fuse(l33, l34, preserve_unit_iters=True)
v38 = sch.sample_categorical(candidates=[32, 64, 128, 256, 512, 1024], probs=[0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666], decision=3)
l39, l40 = sch.split(loop=l37, factors=[None, v38], preserve_unit_iters=True)
sch.bind(loop=l39, thread_axis="blockIdx.x")
sch.bind(loop=l40, thread_axis="threadIdx.x")
b41 = sch.cache_write(block=b0, write_buffer_index=0, storage_scope="local")
sch.reverse_compute_at(block=b41, loop=l40, preserve_unit_loops=True, index=-1)
sch.compute_at(block=b28, loop=l40, preserve_unit_loops=True, index=-1)
sch.set_scope(block=b28, buffer_index=0, storage_scope="local")
sch.compute_inline(block=b30)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSSRRSRS")
l42, l43, l44, l45, l46 = sch.get_loops(block=b1)
v47, v48, v49, v50, v51 = sch.sample_perfect_tile(loop=l42, n=5, max_innermost_factor=64, decision=[3, 1, 1, 2, 1])
l52, l53, l54, l55, l56 = sch.split(loop=l42, factors=[v47, v48, v49, v50, v51], preserve_unit_iters=True)
v57, v58, v59, v60, v61 = sch.sample_perfect_tile(loop=l43, n=5, max_innermost_factor=64, decision=[1, 1, 6, 1, 1])
l62, l63, l64, l65, l66 = sch.split(loop=l43, factors=[v57, v58, v59, v60, v61], preserve_unit_iters=True)
v67, v68, v69, v70, v71 = sch.sample_perfect_tile(loop=l44, n=5, max_innermost_factor=64, decision=[4, 1, 1, 32, 1])
l72, l73, l74, l75, l76 = sch.split(loop=l44, factors=[v67, v68, v69, v70, v71], preserve_unit_iters=True)
v77, v78, v79, v80, v81 = sch.sample_perfect_tile(loop=l45, n=5, max_innermost_factor=64, decision=[7, 1, 7, 1, 16])
l82, l83, l84, l85, l86 = sch.split(loop=l45, factors=[v77, v78, v79, v80, v81], preserve_unit_iters=True)
v87, v88, v89 = sch.sample_perfect_tile(loop=l46, n=3, max_innermost_factor=64, decision=[32, 1, 2])
l90, l91, l92 = sch.split(loop=l46, factors=[v87, v88, v89], preserve_unit_iters=True)
sch.reorder(l52, l62, l72, l82, l53, l63, l73, l83, l54, l64, l74, l84, l90, l91, l55, l65, l75, l85, l92, l56, l66, l76, l86)
l93 = sch.fuse(l52, l62, l72, l82, preserve_unit_iters=True)
sch.bind(loop=l93, thread_axis="blockIdx.x")
l94 = sch.fuse(l53, l63, l73, l83, preserve_unit_iters=True)
sch.bind(loop=l94, thread_axis="vthread.x")
l95 = sch.fuse(l54, l64, l74, l84, preserve_unit_iters=True)
sch.bind(loop=l95, thread_axis="threadIdx.x")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_low_inclusive", ann_val=32)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_high_inclusive", ann_val=1024)
b96 = sch.cache_write(block=b1, write_buffer_index=0, storage_scope="local")
sch.reverse_compute_at(block=b96, loop=l95, preserve_unit_loops=True, index=-1)
b97 = sch.cache_read(block=b1, read_buffer_index=0, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b97, loop=l90, preserve_unit_loops=True, index=-1)
l98, l99, l100, l101, l102, l103, l104, l105 = sch.get_loops(block=b97)
l106 = sch.fuse(l102, l103, l104, l105, preserve_unit_iters=True)
v107 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b97, ann_key="meta_schedule.cooperative_fetch", ann_val=v107)
b108 = sch.cache_read(block=b1, read_buffer_index=1, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b108, loop=l90, preserve_unit_loops=True, index=-1)
l109, l110, l111, l112, l113, l114, l115, l116 = sch.get_loops(block=b108)
l117 = sch.fuse(l113, l114, l115, l116, preserve_unit_iters=True)
v118 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b108, ann_key="meta_schedule.cooperative_fetch", ann_val=v118)
sch.reverse_compute_inline(block=b5)
sch.reverse_compute_inline(block=b4)
v119 = sch.sample_categorical(candidates=[0, 16, 64, 512, 1024], probs=[0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001], decision=4)
sch.annotate(block_or_loop=b6, ann_key="meta_schedule.unroll_explicit", ann_val=v119)
l120, l121, l122, l123, l124, l125 = sch.get_loops(block=b3)
l126 = sch.fuse(l120, l121, l122, l123, preserve_unit_iters=True)
v127 = sch.sample_categorical(candidates=[32, 64, 128, 256, 512, 1024], probs=[0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666], decision=2)
l128, l129 = sch.split(loop=l126, factors=[None, v127], preserve_unit_iters=True)
sch.bind(loop=l128, thread_axis="blockIdx.x")
sch.bind(loop=l129, thread_axis="threadIdx.x")
sch.enter_postproc()
sch.unannotate(block_or_loop=b97, ann_key="meta_schedule.cooperative_fetch")
l130, l131, l132, l133, l134 = sch.get_loops(block=b97)
l135, l136, l137 = sch.split(loop=l134, factors=[None, 42, 4], preserve_unit_iters=True)
sch.vectorize(loop=l137)
sch.bind(loop=l136, thread_axis="threadIdx.x")
sch.unannotate(block_or_loop=b108, ann_key="meta_schedule.cooperative_fetch")
l138, l139, l140, l141, l142 = sch.get_loops(block=b108)
l143, l144, l145 = sch.split(loop=l142, factors=[None, 42, 4], preserve_unit_iters=True)
sch.vectorize(loop=l145)
sch.bind(loop=l144, thread_axis="threadIdx.x")
b146 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b146, ann_key="meta_schedule.unroll_explicit")
b147, b148, b149, b150, b151, b152, b153, b154, b155 = sch.get_child_blocks(b146)
l156, l157, l158, l159, l160, l161 = sch.get_loops(block=b147)
l162, l163, l164, l165, l166, l167 = sch.get_loops(block=b148)
sch.annotate(block_or_loop=l162, ann_key="pragma_auto_unroll_max_step", ann_val=1024)
sch.annotate(block_or_loop=l162, ann_key="pragma_unroll_explicit", ann_val=1)
l168, l169, l170, l171, l172, l173 = sch.get_loops(block=b149)
l174, l175, l176, l177, l178, l179, l180 = sch.get_loops(block=b150)
l181, l182, l183, l184, l185, l186, l187 = sch.get_loops(block=b151)
l188, l189, l190, l191, l192, l193, l194, l195, l196, l197, l198, l199, l200, l201 = sch.get_loops(block=b152)
sch.annotate(block_or_loop=l188, ann_key="pragma_auto_unroll_max_step", ann_val=1024)
sch.annotate(block_or_loop=l188, ann_key="pragma_unroll_explicit", ann_val=1)
l202, l203, l204, l205, l206, l207, l208 = sch.get_loops(block=b153)
l209, l210, l211, l212, l213, l214, l215, l216 = sch.get_loops(block=b154)
sch.annotate(block_or_loop=l209, ann_key="pragma_auto_unroll_max_step", ann_val=1024)
sch.annotate(block_or_loop=l209, ann_key="pragma_unroll_explicit", ann_val=1)
l217, l218, l219, l220 = sch.get_loops(block=b155)
b221 = sch.get_block(name="data_pack", func_name="main")
l222, l223, l224, l225, l226, l227 = sch.get_loops(block=b221)
b228 = sch.decompose_reduction(block=b221, loop=l226)
b229 = sch.get_block(name="bgemm", func_name="main")
l230, l231, l232, l233, l234, l235, l236, l237, l238, l239, l240, l241, l242, l243 = sch.get_loops(block=b229)
b244 = sch.decompose_reduction(block=b229, loop=l233)
b245 = sch.get_block(name="inverse", func_name="main")
l246, l247, l248, l249, l250, l251, l252, l253 = sch.get_loops(block=b245)
b254 = sch.decompose_reduction(block=b245, loop=l252)
2024-04-28 23:11:31 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #383: GFLOPs: 5023.1922. Time: 166.0549 us. Best GFLOPs: 11214.5698
2024-04-28 23:11:31 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #384: GFLOPs: 317.1114. Time: 2630.3873 us. Best GFLOPs: 11214.5698
2024-04-28 23:55:12 [INFO] [evolutionary_search.cc:713] Generating candidates......
2024-04-28 23:55:16 [INFO] [evolutionary_search.cc:715] Picked top 102 candidate(s) from database
2024-04-28 23:55:23 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x43caf38)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x6f9f348)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x70a6218)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x9268ff8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x9288ea8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x70936f8)]: 403 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x3ab3ae8)]: 0 failure(s)
2024-04-28 23:55:30 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x43caf38)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x6f9f348)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x70a6218)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x9268ff8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x9288ea8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x70936f8)]: 809 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x3ab3ae8)]: 0 failure(s)
2024-04-28 23:55:37 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x43caf38)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x6f9f348)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x70a6218)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x9268ff8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x9288ea8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x70936f8)]: 1215 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x3ab3ae8)]: 0 failure(s)
2024-04-28 23:55:44 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x43caf38)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x6f9f348)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x70a6218)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x9268ff8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x9288ea8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x70936f8)]: 1620 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x3ab3ae8)]: 0 failure(s)
2024-04-28 23:55:51 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x43caf38)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x6f9f348)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x70a6218)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x9268ff8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x9288ea8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x70936f8)]: 2023 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x3ab3ae8)]: 0 failure(s)
2024-04-28 23:55:58 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x43caf38)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x6f9f348)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x70a6218)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x9268ff8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x9288ea8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x70936f8)]: 2429 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x3ab3ae8)]: 0 failure(s)
2024-04-28 23:56:05 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x43caf38)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x6f9f348)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x70a6218)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x9268ff8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x9288ea8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x70936f8)]: 2834 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x3ab3ae8)]: 0 failure(s)
2024-04-28 23:56:12 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x43caf38)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x6f9f348)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x70a6218)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x9268ff8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x9288ea8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x70936f8)]: 3236 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x3ab3ae8)]: 0 failure(s)
2024-04-28 23:56:19 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x43caf38)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x6f9f348)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x70a6218)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x9268ff8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x9288ea8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x70936f8)]: 3637 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x3ab3ae8)]: 0 failure(s)
2024-04-28 23:56:19 [INFO] [evolutionary_search.cc:723] Sampled 53 candidate(s)
2024-04-28 23:56:41 [INFO] [evolutionary_search.cc:621] Evolve iter #0 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x43caf38)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x6f9f348)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x70a6218)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x9268ff8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x9288ea8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x70936f8)]: 184 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x3ab3ae8)]: 0 failure(s)
2024-04-28 23:57:07 [INFO] [evolutionary_search.cc:621] Evolve iter #1 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x43caf38)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x6f9f348)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x70a6218)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x9268ff8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x9288ea8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x70936f8)]: 205 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x3ab3ae8)]: 0 failure(s)
2024-04-28 23:57:33 [INFO] [evolutionary_search.cc:621] Evolve iter #2 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x43caf38)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x6f9f348)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x70a6218)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x9268ff8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x9288ea8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x70936f8)]: 179 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x3ab3ae8)]: 0 failure(s)
2024-04-28 23:57:59 [INFO] [evolutionary_search.cc:621] Evolve iter #3 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x43caf38)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x6f9f348)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x70a6218)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x9268ff8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x9288ea8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x70936f8)]: 174 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x3ab3ae8)]: 0 failure(s)
2024-04-28 23:58:04 [INFO] [evolutionary_search.cc:649] Scores of the best 64 candidates:
[1 : 16]:	0.9966  0.9743  0.9741  0.9730  0.9722  0.9705  0.9644  0.9620  0.9617  0.9587  0.9577  0.9575  0.9570  0.9565  0.9557  0.9532
[17 : 32]:	0.9532  0.9524  0.9520  0.9505  0.9499  0.9497  0.9494  0.9490  0.9471  0.9470  0.9464  0.9462  0.9459  0.9459  0.9455  0.9451
[33 : 48]:	0.9449  0.9447  0.9442  0.9441  0.9440  0.9437  0.9434  0.9430  0.9428  0.9424  0.9424  0.9423  0.9423  0.9414  0.9413  0.9413
[49 : 64]:	0.9409  0.9405  0.9385  0.9375  0.9375  0.9374  0.9374  0.9353  0.9349  0.9341  0.9331  0.9331  0.9326  0.9318  0.9309  0.9306
2024-04-28 23:58:04 [INFO] [evolutionary_search.cc:727] Got 64 candidate(s) with evolutionary search
2024-04-28 23:58:04 [INFO] [evolutionary_search.cc:730] Sending 64 candidates(s) for measurement
2024-04-28 23:59:40 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #385: GFLOPs: 11527.7316. Time: 72.3582 us. Best GFLOPs: 11527.7316
2024-04-28 23:59:40 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #386: GFLOPs: 11203.6631. Time: 74.4512 us. Best GFLOPs: 11527.7316
2024-04-28 23:59:40 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #387: GFLOPs: 11008.5154. Time: 75.7710 us. Best GFLOPs: 11527.7316
2024-04-28 23:59:40 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #388: GFLOPs: 10967.0697. Time: 76.0573 us. Best GFLOPs: 11527.7316
2024-04-28 23:59:40 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #389: GFLOPs: 10854.5363. Time: 76.8458 us. Best GFLOPs: 11527.7316
2024-04-28 23:59:40 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #390: GFLOPs: 4975.2095. Time: 167.6564 us. Best GFLOPs: 11527.7316
2024-04-28 23:59:40 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #391: GFLOPs: 10676.4144. Time: 78.1279 us. Best GFLOPs: 11527.7316
2024-04-28 23:59:40 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #392: GFLOPs: 11109.9875. Time: 75.0789 us. Best GFLOPs: 11527.7316
2024-04-28 23:59:40 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #393: GFLOPs: 10966.6216. Time: 76.0604 us. Best GFLOPs: 11527.7316
2024-04-28 23:59:40 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #394: GFLOPs: 11070.8745. Time: 75.3442 us. Best GFLOPs: 11527.7316
2024-04-28 23:59:40 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #395: GFLOPs: 11082.8226. Time: 75.2629 us. Best GFLOPs: 11527.7316
2024-04-28 23:59:40 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #396: GFLOPs: 10925.3850. Time: 76.3475 us. Best GFLOPs: 11527.7316
2024-04-28 23:59:40 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #397: GFLOPs: 10646.1957. Time: 78.3497 us. Best GFLOPs: 11527.7316
2024-04-28 23:59:40 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #398: GFLOPs: 10806.5665. Time: 77.1869 us. Best GFLOPs: 11527.7316
2024-04-28 23:59:40 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #399: GFLOPs: 10881.1934. Time: 76.6576 us. Best GFLOPs: 11527.7316
2024-04-28 23:59:40 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #400: GFLOPs: 11039.5296. Time: 75.5581 us. Best GFLOPs: 11527.7316
2024-04-28 23:59:40 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #401: GFLOPs: 10908.4602. Time: 76.4660 us. Best GFLOPs: 11527.7316
2024-04-28 23:59:40 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #402: GFLOPs: 10645.3614. Time: 78.3558 us. Best GFLOPs: 11527.7316
2024-04-28 23:59:40 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #403: GFLOPs: 10703.0044. Time: 77.9338 us. Best GFLOPs: 11527.7316
2024-04-28 23:59:40 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #404: GFLOPs: 10899.7183. Time: 76.5273 us. Best GFLOPs: 11527.7316
2024-04-28 23:59:40 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #405: GFLOPs: 5018.6535. Time: 166.2051 us. Best GFLOPs: 11527.7316
2024-04-28 23:59:40 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #406: GFLOPs: 10566.3765. Time: 78.9415 us. Best GFLOPs: 11527.7316
2024-04-28 23:59:40 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #407: GFLOPs: 10856.9642. Time: 76.8286 us. Best GFLOPs: 11527.7316
2024-04-28 23:59:40 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #408: GFLOPs: 10565.3266. Time: 78.9494 us. Best GFLOPs: 11527.7316
2024-04-28 23:59:40 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #409: GFLOPs: 10821.8500. Time: 77.0779 us. Best GFLOPs: 11527.7316
2024-04-28 23:59:40 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #410: GFLOPs: 10647.7447. Time: 78.3383 us. Best GFLOPs: 11527.7316
2024-04-28 23:59:40 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #411: GFLOPs: 11209.3417. Time: 74.4135 us. Best GFLOPs: 11527.7316
2024-04-28 23:59:40 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #412: GFLOPs: 10842.4497. Time: 76.9315 us. Best GFLOPs: 11527.7316
2024-04-28 23:59:40 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #413: GFLOPs: 11064.3500. Time: 75.3886 us. Best GFLOPs: 11527.7316
2024-04-28 23:59:40 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #414: GFLOPs: 10456.4940. Time: 79.7711 us. Best GFLOPs: 11527.7316
2024-04-28 23:59:40 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #415: GFLOPs: 10907.5444. Time: 76.4724 us. Best GFLOPs: 11527.7316
2024-04-28 23:59:40 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #416: GFLOPs: 4994.9628. Time: 166.9934 us. Best GFLOPs: 11527.7316
2024-04-28 23:59:40 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #417: GFLOPs: 10598.6111. Time: 78.7014 us. Best GFLOPs: 11527.7316
2024-04-28 23:59:40 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #418: GFLOPs: 10989.6828. Time: 75.9008 us. Best GFLOPs: 11527.7316
2024-04-28 23:59:40 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #419: GFLOPs: 10963.2343. Time: 76.0839 us. Best GFLOPs: 11527.7316
2024-04-28 23:59:40 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #420: GFLOPs: 10584.3144. Time: 78.8077 us. Best GFLOPs: 11527.7316
2024-04-28 23:59:40 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #421: GFLOPs: 10744.1632. Time: 77.6353 us. Best GFLOPs: 11527.7316
2024-04-28 23:59:40 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #422: GFLOPs: 10902.2426. Time: 76.5096 us. Best GFLOPs: 11527.7316
2024-04-28 23:59:40 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #423: GFLOPs: 10596.1109. Time: 78.7200 us. Best GFLOPs: 11527.7316
2024-04-28 23:59:40 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #424: GFLOPs: 10815.0178. Time: 77.1266 us. Best GFLOPs: 11527.7316
2024-04-28 23:59:40 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #425: GFLOPs: 10671.0956. Time: 78.1668 us. Best GFLOPs: 11527.7316
2024-04-28 23:59:40 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #426: GFLOPs: 11047.6860. Time: 75.5023 us. Best GFLOPs: 11527.7316
2024-04-28 23:59:40 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #427: GFLOPs: 10916.5281. Time: 76.4094 us. Best GFLOPs: 11527.7316
2024-04-28 23:59:40 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #428: GFLOPs: 10916.3864. Time: 76.4104 us. Best GFLOPs: 11527.7316
2024-04-28 23:59:40 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #429: GFLOPs: 10499.0475. Time: 79.4478 us. Best GFLOPs: 11527.7316
2024-04-28 23:59:40 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #430: GFLOPs: 10652.8342. Time: 78.3008 us. Best GFLOPs: 11527.7316
2024-04-28 23:59:40 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #431: GFLOPs: 10372.0388. Time: 80.4206 us. Best GFLOPs: 11527.7316
2024-04-28 23:59:40 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #432: GFLOPs: 10893.8937. Time: 76.5682 us. Best GFLOPs: 11527.7316
2024-04-28 23:59:40 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #433: GFLOPs: 10590.7214. Time: 78.7601 us. Best GFLOPs: 11527.7316
2024-04-28 23:59:40 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #434: GFLOPs: 10411.6841. Time: 80.1144 us. Best GFLOPs: 11527.7316
2024-04-28 23:59:40 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #435: GFLOPs: 10673.1330. Time: 78.1519 us. Best GFLOPs: 11527.7316
2024-04-28 23:59:40 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #436: GFLOPs: 10476.1763. Time: 79.6212 us. Best GFLOPs: 11527.7316
2024-04-28 23:59:40 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #437: GFLOPs: 10495.5335. Time: 79.4744 us. Best GFLOPs: 11527.7316
2024-04-28 23:59:40 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #438: GFLOPs: 10567.6866. Time: 78.9317 us. Best GFLOPs: 11527.7316
2024-04-28 23:59:40 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #439: GFLOPs: 10251.0565. Time: 81.3697 us. Best GFLOPs: 11527.7316
2024-04-28 23:59:40 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #440: GFLOPs: 10647.1230. Time: 78.3428 us. Best GFLOPs: 11527.7316
2024-04-28 23:59:40 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #441: GFLOPs: 10079.2506. Time: 82.7567 us. Best GFLOPs: 11527.7316
2024-04-28 23:59:40 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #442: GFLOPs: 10780.9383. Time: 77.3704 us. Best GFLOPs: 11527.7316
2024-04-28 23:59:40 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #443: GFLOPs: 8060.1015. Time: 103.4883 us. Best GFLOPs: 11527.7316
2024-04-28 23:59:40 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #444: GFLOPs: 10486.3184. Time: 79.5442 us. Best GFLOPs: 11527.7316
2024-04-28 23:59:40 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #445: GFLOPs: 10135.8589. Time: 82.2945 us. Best GFLOPs: 11527.7316
2024-04-28 23:59:40 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #446: GFLOPs: 438.6070. Time: 1901.7612 us. Best GFLOPs: 11527.7316
2024-04-28 23:59:40 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #447: GFLOPs: 1874.5421. Time: 444.9758 us. Best GFLOPs: 11527.7316
2024-04-28 23:59:40 [INFO] [task_scheduler.cc:121] [Task #2: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #448: Error in building:
LocalBuilder: Timeout, killed after 30.0 seconds
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(64), T.int64(112), T.int64(112)), "float32"), p1: T.Buffer((T.int64(6), T.int64(6), T.int64(64), T.int64(128)), "float32"), p2: T.Buffer((T.int64(1), T.int64(128), T.int64(1), T.int64(1)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(128), T.int64(112), T.int64(112)), "float32")):
        T.func_attr({"layout_free_buffers": [1], "tir.noalias": T.bool(True)})
        # with T.block("root"):
        input_tile_local = T.alloc_buffer((T.int64(64), T.int64(784), T.int64(6), T.int64(6)), scope="local")
        data_pack = T.alloc_buffer((T.int64(6), T.int64(6), T.int64(64), T.int64(784)))
        bgemm = T.alloc_buffer((T.int64(6), T.int64(6), T.int64(128), T.int64(784)))
        inverse_local = T.alloc_buffer((T.int64(128), T.int64(784), T.int64(4), T.int64(4)), scope="local")
        data_pack_local = T.alloc_buffer((T.int64(6), T.int64(6), T.int64(64), T.int64(784)), scope="local")
        bgemm_local = T.alloc_buffer((T.int64(6), T.int64(6), T.int64(128), T.int64(784)), scope="local")
        data_pack_shared = T.alloc_buffer((T.int64(6), T.int64(6), T.int64(64), T.int64(784)), scope="shared")
        p1_shared = T.alloc_buffer((T.int64(6), T.int64(6), T.int64(64), T.int64(128)), scope="shared")
        for ci_p_fused_0 in T.thread_binding(T.int64(49), thread="blockIdx.x", annotations={"pragma_auto_unroll_max_step": 1024, "pragma_unroll_explicit": 1}):
            for ci_p_fused_1 in T.thread_binding(T.int64(1024), thread="threadIdx.x"):
                for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(1), T.int64(6), T.int64(6)):
                    with T.block("input_tile"):
                        v_ci = T.axis.spatial(T.int64(64), (ci_p_fused_0 * T.int64(1024) + ci_p_fused_1) // T.int64(784) + ax0)
                        v_p = T.axis.spatial(T.int64(784), (ci_p_fused_0 * T.int64(240) + ci_p_fused_1) % T.int64(784) + ax1)
                        v_eps, v_nu = T.axis.remap("SS", [ax2, ax3])
                        T.reads(p0[v_p // T.int64(784), v_ci, v_p % T.int64(784) // T.int64(28) * T.int64(4) + v_eps - T.int64(1), v_p % T.int64(28) * T.int64(4) + v_nu - T.int64(1)])
                        T.writes(input_tile_local[v_ci, v_p, v_eps, v_nu])
                        T.block_attr({"schedule_rule": "None"})
                        input_tile_local[v_ci, v_p, v_eps, v_nu] = T.if_then_else(T.int64(1) <= v_p % T.int64(784) // T.int64(28) * T.int64(4) + v_eps and v_p % T.int64(784) // T.int64(28) * T.int64(4) + v_eps < T.int64(113) and T.int64(1) <= v_p % T.int64(28) * T.int64(4) + v_nu and v_p % T.int64(28) * T.int64(4) + v_nu < T.int64(113), p0[v_p // T.int64(784), v_ci, v_p % T.int64(784) // T.int64(28) * T.int64(4) + v_eps - T.int64(1), v_p % T.int64(28) * T.int64(4) + v_nu - T.int64(1)], T.float32(0))
                for eps in T.unroll(T.int64(6)):
                    for nu in T.unroll(T.int64(6)):
                        with T.block("data_pack_init"):
                            v_eps, v_nu = T.axis.remap("SS", [eps, nu])
                            v_ci = T.axis.spatial(T.int64(64), (ci_p_fused_0 * T.int64(1024) + ci_p_fused_1) // T.int64(784))
                            v_p = T.axis.spatial(T.int64(784), (ci_p_fused_0 * T.int64(1024) + ci_p_fused_1) % T.int64(784))
                            T.reads()
                            T.writes(data_pack_local[v_eps, v_nu, v_ci, v_p])
                            T.block_attr({"schedule_rule": "conv2d_nchw_winograd_data_pack"})
                            data_pack_local[v_eps, v_nu, v_ci, v_p] = T.float32(0)
                        for r_a in T.unroll(T.int64(6)):
                            for r_b in T.unroll(T.int64(6)):
                                with T.block("data_pack_update"):
                                    v_eps, v_nu = T.axis.remap("SS", [eps, nu])
                                    v_ci = T.axis.spatial(T.int64(64), (ci_p_fused_0 * T.int64(1024) + ci_p_fused_1) // T.int64(784))
                                    v_p = T.axis.spatial(T.int64(784), (ci_p_fused_0 * T.int64(1024) + ci_p_fused_1) % T.int64(784))
                                    v_r_a, v_r_b = T.axis.remap("RR", [r_a, r_b])
                                    T.reads(data_pack_local[v_eps, v_nu, v_ci, v_p], input_tile_local[v_ci, v_p, v_r_a, v_r_b])
                                    T.writes(data_pack_local[v_eps, v_nu, v_ci, v_p])
                                    T.block_attr({"schedule_rule": "conv2d_nchw_winograd_data_pack"})
                                    data_pack_local[v_eps, v_nu, v_ci, v_p] = data_pack_local[v_eps, v_nu, v_ci, v_p] + input_tile_local[v_ci, v_p, v_r_a, v_r_b] * T.Select(v_r_a % T.int64(6) == T.int64(5) and v_eps % T.int64(6) == T.int64(5), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(5) and v_eps % T.int64(6) == T.int64(4), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(5) and v_eps % T.int64(6) == T.int64(3), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(5) and v_eps % T.int64(6) == T.int64(2), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(5) and v_eps % T.int64(6) == T.int64(1), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(5) and v_eps % T.int64(6) == T.int64(0), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(4) and v_eps % T.int64(6) == T.int64(5), T.float32(1.5), T.Select(v_r_a % T.int64(6) == T.int64(4) and v_eps % T.int64(6) == T.int64(4), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(4) and v_eps % T.int64(6) == T.int64(3), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(4) and v_eps % T.int64(6) == T.int64(2), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(4) and v_eps % T.int64(6) == T.int64(1), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(4) and v_eps % T.int64(6) == T.int64(0), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(3) and v_eps % T.int64(6) == T.int64(5), T.float32(-2), T.Select(v_r_a % T.int64(6) == T.int64(3) and v_eps % T.int64(6) == T.int64(4), T.float32(-0.5), T.Select(v_r_a % T.int64(6) == T.int64(3) and v_eps % T.int64(6) == T.int64(3), T.float32(2), T.Select(v_r_a % T.int64(6) == T.int64(3) and v_eps % T.int64(6) == T.int64(2), T.float32(2.5), T.Select(v_r_a % T.int64(6) == T.int64(3) and v_eps % T.int64(6) == T.int64(1), T.float32(0.5), T.Select(v_r_a % T.int64(6) == T.int64(3) and v_eps % T.int64(6) == T.int64(0), T.float32(1.5), T.Select(v_r_a % T.int64(6) == T.int64(2) and v_eps % T.int64(6) == T.int64(5), T.float32(-1.5), T.Select(v_r_a % T.int64(6) == T.int64(2) and v_eps % T.int64(6) == T.int64(4), T.float32(-1), T.Select(v_r_a % T.int64(6) == T.int64(2) and v_eps % T.int64(6) == T.int64(3), T.float32(-1), T.Select(v_r_a % T.int64(6) == T.int64(2) and v_eps % T.int64(6) == T.int64(2), T.float32(0.5), T.Select(v_r_a % T.int64(6) == T.int64(2) and v_eps % T.int64(6) == T.int64(1), T.float32(-2.5), T.Select(v_r_a % T.int64(6) == T.int64(2) and v_eps % T.int64(6) == T.int64(0), T.float32(-2), T.Select(v_r_a % T.int64(6) == T.int64(1) and v_eps % T.int64(6) == T.int64(5), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(1) and v_eps % T.int64(6) == T.int64(4), T.float32(0.5), T.Select(v_r_a % T.int64(6) == T.int64(1) and v_eps % T.int64(6) == T.int64(3), T.float32(-2), T.Select(v_r_a % T.int64(6) == T.int64(1) and v_eps % T.int64(6) == T.int64(2), T.float32(-1), T.Select(v_r_a % T.int64(6) == T.int64(1) and v_eps % T.int64(6) == T.int64(1), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(1) and v_eps % T.int64(6) == T.int64(0), T.float32(-1.5), T.Select(v_r_a % T.int64(6) == T.int64(0) and v_eps % T.int64(6) == T.int64(5), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(0) and v_eps % T.int64(6) == T.int64(4), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(0) and v_eps % T.int64(6) == T.int64(3), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(0) and v_eps % T.int64(6) == T.int64(2), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(0) and v_eps % T.int64(6) == T.int64(1), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(0) and v_eps % T.int64(6) == T.int64(0), T.float32(1), T.float32(0))))))))))))))))))))))))))))))))))))) * T.Select(v_r_b % T.int64(6) == T.int64(5) and v_nu % T.int64(6) == T.int64(5), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(5) and v_nu % T.int64(6) == T.int64(4), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(5) and v_nu % T.int64(6) == T.int64(3), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(5) and v_nu % T.int64(6) == T.int64(2), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(5) and v_nu % T.int64(6) == T.int64(1), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(5) and v_nu % T.int64(6) == T.int64(0), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(4) and v_nu % T.int64(6) == T.int64(5), T.float32(1.5), T.Select(v_r_b % T.int64(6) == T.int64(4) and v_nu % T.int64(6) == T.int64(4), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(4) and v_nu % T.int64(6) == T.int64(3), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(4) and v_nu % T.int64(6) == T.int64(2), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(4) and v_nu % T.int64(6) == T.int64(1), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(4) and v_nu % T.int64(6) == T.int64(0), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(3) and v_nu % T.int64(6) == T.int64(5), T.float32(-2), T.Select(v_r_b % T.int64(6) == T.int64(3) and v_nu % T.int64(6) == T.int64(4), T.float32(-0.5), T.Select(v_r_b % T.int64(6) == T.int64(3) and v_nu % T.int64(6) == T.int64(3), T.float32(2), T.Select(v_r_b % T.int64(6) == T.int64(3) and v_nu % T.int64(6) == T.int64(2), T.float32(2.5), T.Select(v_r_b % T.int64(6) == T.int64(3) and v_nu % T.int64(6) == T.int64(1), T.float32(0.5), T.Select(v_r_b % T.int64(6) == T.int64(3) and v_nu % T.int64(6) == T.int64(0), T.float32(1.5), T.Select(v_r_b % T.int64(6) == T.int64(2) and v_nu % T.int64(6) == T.int64(5), T.float32(-1.5), T.Select(v_r_b % T.int64(6) == T.int64(2) and v_nu % T.int64(6) == T.int64(4), T.float32(-1), T.Select(v_r_b % T.int64(6) == T.int64(2) and v_nu % T.int64(6) == T.int64(3), T.float32(-1), T.Select(v_r_b % T.int64(6) == T.int64(2) and v_nu % T.int64(6) == T.int64(2), T.float32(0.5), T.Select(v_r_b % T.int64(6) == T.int64(2) and v_nu % T.int64(6) == T.int64(1), T.float32(-2.5), T.Select(v_r_b % T.int64(6) == T.int64(2) and v_nu % T.int64(6) == T.int64(0), T.float32(-2), T.Select(v_r_b % T.int64(6) == T.int64(1) and v_nu % T.int64(6) == T.int64(5), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(1) and v_nu % T.int64(6) == T.int64(4), T.float32(0.5), T.Select(v_r_b % T.int64(6) == T.int64(1) and v_nu % T.int64(6) == T.int64(3), T.float32(-2), T.Select(v_r_b % T.int64(6) == T.int64(1) and v_nu % T.int64(6) == T.int64(2), T.float32(-1), T.Select(v_r_b % T.int64(6) == T.int64(1) and v_nu % T.int64(6) == T.int64(1), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(1) and v_nu % T.int64(6) == T.int64(0), T.float32(-1.5), T.Select(v_r_b % T.int64(6) == T.int64(0) and v_nu % T.int64(6) == T.int64(5), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(0) and v_nu % T.int64(6) == T.int64(4), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(0) and v_nu % T.int64(6) == T.int64(3), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(0) and v_nu % T.int64(6) == T.int64(2), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(0) and v_nu % T.int64(6) == T.int64(1), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(0) and v_nu % T.int64(6) == T.int64(0), T.float32(1), T.float32(0)))))))))))))))))))))))))))))))))))))
                for ax0, ax1, ax2, ax3 in T.grid(T.int64(6), T.int64(6), T.int64(1), T.int64(1)):
                    with T.block("data_pack_local"):
                        v0, v1 = T.axis.remap("SS", [ax0, ax1])
                        v2 = T.axis.spatial(T.int64(64), (ci_p_fused_0 * T.int64(1024) + ci_p_fused_1) // T.int64(784) + ax2)
                        v3 = T.axis.spatial(T.int64(784), (ci_p_fused_0 * T.int64(240) + ci_p_fused_1) % T.int64(784) + ax3)
                        T.reads(data_pack_local[v0, v1, v2, v3])
                        T.writes(data_pack[v0, v1, v2, v3])
                        data_pack[v0, v1, v2, v3] = data_pack_local[v0, v1, v2, v3]
        for eps_0_nu_0_co_0_p_0_fused in T.thread_binding(T.int64(48), thread="blockIdx.x", annotations={"pragma_auto_unroll_max_step": 1024, "pragma_unroll_explicit": 1}):
            for eps_1_nu_1_co_1_p_1_fused in T.thread_binding(T.int64(128), thread="vthread.x"):
                for eps_2_nu_2_co_2_p_2_fused in T.thread_binding(T.int64(49), thread="threadIdx.x"):
                    for eps_3_init, nu_3_init, co_3_init, p_3_init, eps_4_init, nu_4_init, co_4_init, p_4_init in T.grid(T.int64(1), T.int64(3), T.int64(1), T.int64(2), T.int64(1), T.int64(1), T.int64(2), T.int64(1)):
                        with T.block("bgemm_init"):
                            v_eps = T.axis.spatial(T.int64(6), eps_0_nu_0_co_0_p_0_fused // T.int64(8) + eps_3_init + eps_4_init)
                            v_nu = T.axis.spatial(T.int64(6), eps_1_nu_1_co_1_p_1_fused // T.int64(64) * T.int64(3) + nu_3_init + nu_4_init)
                            v_co = T.axis.spatial(T.int64(128), eps_1_nu_1_co_1_p_1_fused % T.int64(64) * T.int64(2) + co_3_init * T.int64(2) + co_4_init)
                            v_p = T.axis.spatial(T.int64(784), eps_0_nu_0_co_0_p_0_fused % T.int64(8) * T.int64(98) + eps_2_nu_2_co_2_p_2_fused * T.int64(2) + p_3_init + p_4_init)
                            T.reads()
                            T.writes(bgemm_local[v_eps, v_nu, v_co, v_p])
                            T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 32, "meta_schedule.tiling_structure": "SSSRRSRS"})
                            bgemm_local[v_eps, v_nu, v_co, v_p] = T.float32(0)
                    for ci_0_fused in T.serial(T.int64(32), annotations={"software_pipeline_async_stages": [0], "software_pipeline_order": [0, 1, 2], "software_pipeline_stage": [0, 0, 2]}):
                        for ax0_ax1_ax2_ax3_fused_0 in range(T.int64(12)):
                            for ax0_ax1_ax2_ax3_fused_1 in T.thread_binding(T.int64(49), thread="threadIdx.x"):
                                for ax0_ax1_ax2_ax3_fused_2 in T.vectorized(T.int64(2)):
                                    with T.block("data_pack_shared"):
                                        v0 = T.axis.spatial(T.int64(6), eps_0_nu_0_co_0_p_0_fused // T.int64(8))
                                        v1 = T.axis.spatial(T.int64(6), (ax0_ax1_ax2_ax3_fused_0 * T.int64(98) + ax0_ax1_ax2_ax3_fused_1 * T.int64(2) + ax0_ax1_ax2_ax3_fused_2) // T.int64(196))
                                        v2 = T.axis.spatial(T.int64(64), ci_0_fused * T.int64(2) + (ax0_ax1_ax2_ax3_fused_0 * T.int64(98) + ax0_ax1_ax2_ax3_fused_1 * T.int64(2) + ax0_ax1_ax2_ax3_fused_2) % T.int64(196) // T.int64(98))
                                        v3 = T.axis.spatial(T.int64(784), eps_0_nu_0_co_0_p_0_fused % T.int64(8) * T.int64(98) + (ax0_ax1_ax2_ax3_fused_0 * T.int64(98) + ax0_ax1_ax2_ax3_fused_1 * T.int64(2) + ax0_ax1_ax2_ax3_fused_2) % T.int64(98))
                                        T.reads(data_pack[v0, v1, v2, v3])
                                        T.writes(data_pack_shared[v0, v1, v2, v3])
                                        data_pack_shared[v0, v1, v2, v3] = data_pack[v0, v1, v2, v3]
                        for ax0_ax1_ax2_ax3_fused_0 in range(T.int64(16)):
                            for ax0_ax1_ax2_ax3_fused_1 in T.thread_binding(T.int64(49), thread="threadIdx.x"):
                                for ax0_ax1_ax2_ax3_fused_2 in T.vectorized(T.int64(2)):
                                    with T.block("p1_shared"):
                                        v0 = T.axis.spatial(T.int64(6), eps_0_nu_0_co_0_p_0_fused // T.int64(8))
                                        v1 = T.axis.spatial(T.int64(6), (ax0_ax1_ax2_ax3_fused_0 * T.int64(98) + ax0_ax1_ax2_ax3_fused_1 * T.int64(2) + ax0_ax1_ax2_ax3_fused_2) // T.int64(256))
                                        v2 = T.axis.spatial(T.int64(64), ci_0_fused * T.int64(2) + (ax0_ax1_ax2_ax3_fused_0 * T.int64(98) + ax0_ax1_ax2_ax3_fused_1 * T.int64(2) + ax0_ax1_ax2_ax3_fused_2) % T.int64(256) // T.int64(128))
                                        v3 = T.axis.spatial(T.int64(128), (ax0_ax1_ax2_ax3_fused_0 * T.int64(98) + ax0_ax1_ax2_ax3_fused_1 * T.int64(2) + ax0_ax1_ax2_ax3_fused_2) % T.int64(128))
                                        T.where((ax0_ax1_ax2_ax3_fused_0 * T.int64(49) + ax0_ax1_ax2_ax3_fused_1) * T.int64(2) + ax0_ax1_ax2_ax3_fused_2 < T.int64(1536))
                                        T.reads(p1[v0, v1, v2, v3])
                                        T.writes(p1_shared[v0, v1, v2, v3])
                                        p1_shared[v0, v1, v2, v3] = p1[v0, v1, v2, v3]
                        for ci_1, eps_3, nu_3, co_3, p_3, ci_2, eps_4, nu_4, co_4, p_4 in T.grid(T.int64(2), T.int64(1), T.int64(3), T.int64(1), T.int64(2), T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(1)):
                            with T.block("bgemm_update"):
                                v_eps = T.axis.spatial(T.int64(6), eps_0_nu_0_co_0_p_0_fused // T.int64(8) + eps_3 + eps_4)
                                v_nu = T.axis.spatial(T.int64(6), eps_1_nu_1_co_1_p_1_fused // T.int64(64) * T.int64(3) + nu_3 + nu_4)
                                v_co = T.axis.spatial(T.int64(128), eps_1_nu_1_co_1_p_1_fused % T.int64(64) * T.int64(2) + co_3 * T.int64(2) + co_4)
                                v_p = T.axis.spatial(T.int64(784), eps_0_nu_0_co_0_p_0_fused % T.int64(8) * T.int64(98) + eps_2_nu_2_co_2_p_2_fused * T.int64(2) + p_3 + p_4)
                                v_ci = T.axis.reduce(T.int64(64), ci_0_fused * T.int64(2) + ci_1 + ci_2)
                                T.reads(bgemm_local[v_eps, v_nu, v_co, v_p], data_pack_shared[v_eps, v_nu, v_ci, v_p], p1_shared[v_eps, v_nu, v_ci, v_co])
                                T.writes(bgemm_local[v_eps, v_nu, v_co, v_p])
                                T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 32, "meta_schedule.tiling_structure": "SSSRRSRS"})
                                bgemm_local[v_eps, v_nu, v_co, v_p] = bgemm_local[v_eps, v_nu, v_co, v_p] + data_pack_shared[v_eps, v_nu, v_ci, v_p] * p1_shared[v_eps, v_nu, v_ci, v_co]
                    for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(3), T.int64(2), T.int64(2)):
                        with T.block("bgemm_local"):
                            v0 = T.axis.spatial(T.int64(6), eps_0_nu_0_co_0_p_0_fused // T.int64(8) + ax0)
                            v1 = T.axis.spatial(T.int64(6), eps_1_nu_1_co_1_p_1_fused // T.int64(64) * T.int64(3) + ax1)
                            v2 = T.axis.spatial(T.int64(128), eps_1_nu_1_co_1_p_1_fused % T.int64(64) * T.int64(2) + ax2)
                            v3 = T.axis.spatial(T.int64(784), eps_0_nu_0_co_0_p_0_fused % T.int64(8) * T.int64(98) + eps_2_nu_2_co_2_p_2_fused * T.int64(2) + ax3)
                            T.reads(bgemm_local[v0, v1, v2, v3])
                            T.writes(bgemm[v0, v1, v2, v3])
                            bgemm[v0, v1, v2, v3] = bgemm_local[v0, v1, v2, v3]
        for n_co_h_0_w_0_fused_0 in T.thread_binding(T.int64(392), thread="blockIdx.x", annotations={"pragma_auto_unroll_max_step": 1024, "pragma_unroll_explicit": 1}):
            for n_co_h_0_w_0_fused_1 in T.thread_binding(T.int64(256), thread="threadIdx.x"):
                for ax0, ax1 in T.grid(T.int64(1), T.int64(1)):
                    for ax2 in T.unroll(T.int64(4)):
                        for ax3 in T.unroll(T.int64(4)):
                            with T.block("inverse_init"):
                                v_co = T.axis.spatial(T.int64(128), (n_co_h_0_w_0_fused_0 * T.int64(256) + n_co_h_0_w_0_fused_1) // T.int64(784) + ax0)
                                v_p = T.axis.spatial(T.int64(784), (n_co_h_0_w_0_fused_0 * T.int64(256) + n_co_h_0_w_0_fused_1) % T.int64(784) + ax1)
                                v_vh, v_vw = T.axis.remap("SS", [ax2, ax3])
                                T.reads()
                                T.writes(inverse_local[v_co, v_p, v_vh, v_vw])
                                T.block_attr({"schedule_rule": "conv2d_nchw_winograd_inverse"})
                                inverse_local[v_co, v_p, v_vh, v_vw] = T.float32(0)
                            for ax4 in T.unroll(T.int64(6)):
                                for ax5 in T.unroll(T.int64(6)):
                                    with T.block("inverse_update"):
                                        v_co = T.axis.spatial(T.int64(128), (n_co_h_0_w_0_fused_0 * T.int64(256) + n_co_h_0_w_0_fused_1) // T.int64(784) + ax0)
                                        v_p = T.axis.spatial(T.int64(784), (n_co_h_0_w_0_fused_0 * T.int64(256) + n_co_h_0_w_0_fused_1) % T.int64(784) + ax1)
                                        v_vh, v_vw, v_r_a, v_r_b = T.axis.remap("SSRR", [ax2, ax3, ax4, ax5])
                                        T.reads(inverse_local[v_co, v_p, v_vh, v_vw], bgemm[v_r_a, v_r_b, v_co, v_p])
                                        T.writes(inverse_local[v_co, v_p, v_vh, v_vw])
                                        T.block_attr({"schedule_rule": "conv2d_nchw_winograd_inverse"})
                                        inverse_local[v_co, v_p, v_vh, v_vw] = inverse_local[v_co, v_p, v_vh, v_vw] + bgemm[v_r_a, v_r_b, v_co, v_p] * T.Select(v_r_a % T.int64(6) == T.int64(5) and v_vh % T.int64(4) == T.int64(3), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(5) and v_vh % T.int64(4) == T.int64(2), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(5) and v_vh % T.int64(4) == T.int64(1), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(5) and v_vh % T.int64(4) == T.int64(0), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(4) and v_vh % T.int64(4) == T.int64(3), T.float32(-8), T.Select(v_r_a % T.int64(6) == T.int64(4) and v_vh % T.int64(4) == T.int64(2), T.float32(4), T.Select(v_r_a % T.int64(6) == T.int64(4) and v_vh % T.int64(4) == T.int64(1), T.float32(-2), T.Select(v_r_a % T.int64(6) == T.int64(4) and v_vh % T.int64(4) == T.int64(0), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(3) and v_vh % T.int64(4) == T.int64(3), T.float32(0.125), T.Select(v_r_a % T.int64(6) == T.int64(3) and v_vh % T.int64(4) == T.int64(2), T.float32(0.25), T.Select(v_r_a % T.int64(6) == T.int64(3) and v_vh % T.int64(4) == T.int64(1), T.float32(0.5), T.Select(v_r_a % T.int64(6) == T.int64(3) and v_vh % T.int64(4) == T.int64(0), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(2) and v_vh % T.int64(4) == T.int64(3), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(2) and v_vh % T.int64(4) == T.int64(2), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(2) and v_vh % T.int64(4) == T.int64(1), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(2) and v_vh % T.int64(4) == T.int64(0), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(1) and v_vh % T.int64(4) == T.int64(3), T.float32(-1), T.Select(v_r_a % T.int64(6) == T.int64(1) and v_vh % T.int64(4) == T.int64(2), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(1) and v_vh % T.int64(4) == T.int64(1), T.float32(-1), T.Select(v_r_a % T.int64(6) == T.int64(1) and v_vh % T.int64(4) == T.int64(0), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(0) and v_vh % T.int64(4) == T.int64(3), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(0) and v_vh % T.int64(4) == T.int64(2), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(0) and v_vh % T.int64(4) == T.int64(1), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(0) and v_vh % T.int64(4) == T.int64(0), T.float32(1), T.float32(0))))))))))))))))))))))))) * T.Select(v_r_b % T.int64(6) == T.int64(5) and v_vw % T.int64(4) == T.int64(3), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(5) and v_vw % T.int64(4) == T.int64(2), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(5) and v_vw % T.int64(4) == T.int64(1), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(5) and v_vw % T.int64(4) == T.int64(0), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(4) and v_vw % T.int64(4) == T.int64(3), T.float32(-8), T.Select(v_r_b % T.int64(6) == T.int64(4) and v_vw % T.int64(4) == T.int64(2), T.float32(4), T.Select(v_r_b % T.int64(6) == T.int64(4) and v_vw % T.int64(4) == T.int64(1), T.float32(-2), T.Select(v_r_b % T.int64(6) == T.int64(4) and v_vw % T.int64(4) == T.int64(0), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(3) and v_vw % T.int64(4) == T.int64(3), T.float32(0.125), T.Select(v_r_b % T.int64(6) == T.int64(3) and v_vw % T.int64(4) == T.int64(2), T.float32(0.25), T.Select(v_r_b % T.int64(6) == T.int64(3) and v_vw % T.int64(4) == T.int64(1), T.float32(0.5), T.Select(v_r_b % T.int64(6) == T.int64(3) and v_vw % T.int64(4) == T.int64(0), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(2) and v_vw % T.int64(4) == T.int64(3), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(2) and v_vw % T.int64(4) == T.int64(2), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(2) and v_vw % T.int64(4) == T.int64(1), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(2) and v_vw % T.int64(4) == T.int64(0), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(1) and v_vw % T.int64(4) == T.int64(3), T.float32(-1), T.Select(v_r_b % T.int64(6) == T.int64(1) and v_vw % T.int64(4) == T.int64(2), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(1) and v_vw % T.int64(4) == T.int64(1), T.float32(-1), T.Select(v_r_b % T.int64(6) == T.int64(1) and v_vw % T.int64(4) == T.int64(0), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(0) and v_vw % T.int64(4) == T.int64(3), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(0) and v_vw % T.int64(4) == T.int64(2), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(0) and v_vw % T.int64(4) == T.int64(1), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(0) and v_vw % T.int64(4) == T.int64(0), T.float32(1), T.float32(0)))))))))))))))))))))))))
                for h_1, w_1 in T.grid(T.int64(4), T.int64(4)):
                    with T.block("conv2d_winograd"):
                        v_n = T.axis.spatial(T.int64(1), T.int64(0))
                        v_co = T.axis.spatial(T.int64(128), (n_co_h_0_w_0_fused_0 * T.int64(256) + n_co_h_0_w_0_fused_1) // T.int64(784))
                        v_h = T.axis.spatial(T.int64(112), (n_co_h_0_w_0_fused_0 * T.int64(256) + n_co_h_0_w_0_fused_1) % T.int64(784) // T.int64(28) * T.int64(4) + h_1)
                        v_w = T.axis.spatial(T.int64(112), (n_co_h_0_w_0_fused_0 * T.int64(256) + n_co_h_0_w_0_fused_1) % T.int64(28) * T.int64(4) + w_1)
                        T.reads(inverse_local[v_co, v_n * T.int64(784) + v_h // T.int64(4) * T.int64(28) + v_w // T.int64(4), v_h % T.int64(4), v_w % T.int64(4)], p2[v_n, v_co, T.int64(0), T.int64(0)])
                        T.writes(T_relu[v_n, v_co, v_h, v_w])
                        T_relu[v_n, v_co, v_h, v_w] = T.max(inverse_local[v_co, v_n * T.int64(784) + v_h // T.int64(4) * T.int64(28) + v_w // T.int64(4), v_h % T.int64(4), v_w % T.int64(4)] + p2[v_n, v_co, T.int64(0), T.int64(0)], T.float32(0))
b0 = sch.get_block(name="data_pack", func_name="main")
b1 = sch.get_block(name="bgemm", func_name="main")
b2 = sch.get_block(name="inverse", func_name="main")
b3 = sch.get_block(name="conv2d_winograd", func_name="main")
b4 = sch.get_block(name="T_add", func_name="main")
b5 = sch.get_block(name="T_relu", func_name="main")
b6 = sch.get_block(name="root", func_name="main")
b7, b8 = sch.get_producers(block=b2)
sch.compute_inline(block=b8)
b9, = sch.get_consumers(block=b2)
l10, l11, l12, l13 = sch.get_loops(block=b9)
l14, l15 = sch.split(loop=l12, factors=[None, 4], preserve_unit_iters=True)
l16, l17 = sch.split(loop=l13, factors=[None, 4], preserve_unit_iters=True)
sch.reorder(l14, l16, l15, l17)
sch.compute_at(block=b2, loop=l16, preserve_unit_loops=True, index=-1)
sch.set_scope(block=b2, buffer_index=0, storage_scope="local")
l18, l19, l20, l21, l22, l23, l24, l25, l26, l27 = sch.get_loops(block=b2)
sch.unroll(loop=l24)
sch.unroll(loop=l25)
sch.unroll(loop=l26)
sch.unroll(loop=l27)
b28, b29 = sch.get_producers(block=b0)
sch.compute_inline(block=b29)
b30, = sch.get_producers(block=b28)
l31, l32, l33, l34, l35, l36 = sch.get_loops(block=b0)
sch.reorder(l33, l34, l31, l32, l35, l36)
sch.unroll(loop=l31)
sch.unroll(loop=l32)
sch.unroll(loop=l35)
sch.unroll(loop=l36)
l37 = sch.fuse(l33, l34, preserve_unit_iters=True)
v38 = sch.sample_categorical(candidates=[32, 64, 128, 256, 512, 1024], probs=[0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666], decision=5)
l39, l40 = sch.split(loop=l37, factors=[None, v38], preserve_unit_iters=True)
sch.bind(loop=l39, thread_axis="blockIdx.x")
sch.bind(loop=l40, thread_axis="threadIdx.x")
b41 = sch.cache_write(block=b0, write_buffer_index=0, storage_scope="local")
sch.reverse_compute_at(block=b41, loop=l40, preserve_unit_loops=True, index=-1)
sch.compute_at(block=b28, loop=l40, preserve_unit_loops=True, index=-1)
sch.set_scope(block=b28, buffer_index=0, storage_scope="local")
sch.compute_inline(block=b30)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSSRRSRS")
l42, l43, l44, l45, l46 = sch.get_loops(block=b1)
v47, v48, v49, v50, v51 = sch.sample_perfect_tile(loop=l42, n=5, max_innermost_factor=64, decision=[6, 1, 1, 1, 1])
l52, l53, l54, l55, l56 = sch.split(loop=l42, factors=[v47, v48, v49, v50, v51], preserve_unit_iters=True)
v57, v58, v59, v60, v61 = sch.sample_perfect_tile(loop=l43, n=5, max_innermost_factor=64, decision=[1, 2, 1, 3, 1])
l62, l63, l64, l65, l66 = sch.split(loop=l43, factors=[v57, v58, v59, v60, v61], preserve_unit_iters=True)
v67, v68, v69, v70, v71 = sch.sample_perfect_tile(loop=l44, n=5, max_innermost_factor=64, decision=[1, 64, 1, 1, 2])
l72, l73, l74, l75, l76 = sch.split(loop=l44, factors=[v67, v68, v69, v70, v71], preserve_unit_iters=True)
v77, v78, v79, v80, v81 = sch.sample_perfect_tile(loop=l45, n=5, max_innermost_factor=64, decision=[8, 1, 49, 2, 1])
l82, l83, l84, l85, l86 = sch.split(loop=l45, factors=[v77, v78, v79, v80, v81], preserve_unit_iters=True)
v87, v88, v89 = sch.sample_perfect_tile(loop=l46, n=3, max_innermost_factor=64, decision=[32, 2, 1])
l90, l91, l92 = sch.split(loop=l46, factors=[v87, v88, v89], preserve_unit_iters=True)
sch.reorder(l52, l62, l72, l82, l53, l63, l73, l83, l54, l64, l74, l84, l90, l91, l55, l65, l75, l85, l92, l56, l66, l76, l86)
l93 = sch.fuse(l52, l62, l72, l82, preserve_unit_iters=True)
sch.bind(loop=l93, thread_axis="blockIdx.x")
l94 = sch.fuse(l53, l63, l73, l83, preserve_unit_iters=True)
sch.bind(loop=l94, thread_axis="vthread.x")
l95 = sch.fuse(l54, l64, l74, l84, preserve_unit_iters=True)
sch.bind(loop=l95, thread_axis="threadIdx.x")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_low_inclusive", ann_val=32)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_high_inclusive", ann_val=1024)
b96 = sch.cache_write(block=b1, write_buffer_index=0, storage_scope="local")
sch.reverse_compute_at(block=b96, loop=l95, preserve_unit_loops=True, index=-1)
b97 = sch.cache_read(block=b1, read_buffer_index=0, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b97, loop=l90, preserve_unit_loops=True, index=-1)
l98, l99, l100, l101, l102, l103, l104, l105 = sch.get_loops(block=b97)
l106 = sch.fuse(l102, l103, l104, l105, preserve_unit_iters=True)
v107 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=1)
sch.annotate(block_or_loop=b97, ann_key="meta_schedule.cooperative_fetch", ann_val=v107)
b108 = sch.cache_read(block=b1, read_buffer_index=1, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b108, loop=l90, preserve_unit_loops=True, index=-1)
l109, l110, l111, l112, l113, l114, l115, l116 = sch.get_loops(block=b108)
l117 = sch.fuse(l113, l114, l115, l116, preserve_unit_iters=True)
v118 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=1)
sch.annotate(block_or_loop=b108, ann_key="meta_schedule.cooperative_fetch", ann_val=v118)
l119 = sch.fuse(l90, preserve_unit_iters=True)
sch.annotate(block_or_loop=l119, ann_key="software_pipeline_stage", ann_val=[0, 0, 2])
sch.annotate(block_or_loop=l119, ann_key="software_pipeline_order", ann_val=[0, 1, 2])
sch.annotate(block_or_loop=l119, ann_key="software_pipeline_async_stages", ann_val=[0])
sch.reverse_compute_inline(block=b5)
sch.reverse_compute_inline(block=b4)
v120 = sch.sample_categorical(candidates=[0, 16, 64, 512, 1024], probs=[0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001], decision=4)
sch.annotate(block_or_loop=b6, ann_key="meta_schedule.unroll_explicit", ann_val=v120)
l121, l122, l123, l124, l125, l126 = sch.get_loops(block=b3)
l127 = sch.fuse(l121, l122, l123, l124, preserve_unit_iters=True)
v128 = sch.sample_categorical(candidates=[32, 64, 128, 256, 512, 1024], probs=[0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666], decision=3)
l129, l130 = sch.split(loop=l127, factors=[None, v128], preserve_unit_iters=True)
sch.bind(loop=l129, thread_axis="blockIdx.x")
sch.bind(loop=l130, thread_axis="threadIdx.x")
sch.enter_postproc()
sch.unannotate(block_or_loop=b97, ann_key="meta_schedule.cooperative_fetch")
l131, l132, l133, l134, l135 = sch.get_loops(block=b97)
l136, l137, l138 = sch.split(loop=l135, factors=[None, 49, 2], preserve_unit_iters=True)
sch.vectorize(loop=l138)
sch.bind(loop=l137, thread_axis="threadIdx.x")
sch.unannotate(block_or_loop=b108, ann_key="meta_schedule.cooperative_fetch")
l139, l140, l141, l142, l143 = sch.get_loops(block=b108)
l144, l145, l146 = sch.split(loop=l143, factors=[None, 49, 2], preserve_unit_iters=True)
sch.vectorize(loop=l146)
sch.bind(loop=l145, thread_axis="threadIdx.x")
b147 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b147, ann_key="meta_schedule.unroll_explicit")
b148, b149, b150, b151, b152, b153, b154, b155, b156 = sch.get_child_blocks(b147)
l157, l158, l159, l160, l161, l162 = sch.get_loops(block=b148)
l163, l164, l165, l166, l167, l168 = sch.get_loops(block=b149)
sch.annotate(block_or_loop=l163, ann_key="pragma_auto_unroll_max_step", ann_val=1024)
sch.annotate(block_or_loop=l163, ann_key="pragma_unroll_explicit", ann_val=1)
l169, l170, l171, l172, l173, l174 = sch.get_loops(block=b150)
l175, l176, l177, l178, l179, l180, l181 = sch.get_loops(block=b151)
l182, l183, l184, l185, l186, l187, l188 = sch.get_loops(block=b152)
l189, l190, l191, l192, l193, l194, l195, l196, l197, l198, l199, l200, l201, l202 = sch.get_loops(block=b153)
sch.annotate(block_or_loop=l189, ann_key="pragma_auto_unroll_max_step", ann_val=1024)
sch.annotate(block_or_loop=l189, ann_key="pragma_unroll_explicit", ann_val=1)
l203, l204, l205, l206, l207, l208, l209 = sch.get_loops(block=b154)
l210, l211, l212, l213, l214, l215, l216, l217 = sch.get_loops(block=b155)
sch.annotate(block_or_loop=l210, ann_key="pragma_auto_unroll_max_step", ann_val=1024)
sch.annotate(block_or_loop=l210, ann_key="pragma_unroll_explicit", ann_val=1)
l218, l219, l220, l221 = sch.get_loops(block=b156)
b222 = sch.get_block(name="data_pack", func_name="main")
l223, l224, l225, l226, l227, l228 = sch.get_loops(block=b222)
b229 = sch.decompose_reduction(block=b222, loop=l227)
b230 = sch.get_block(name="bgemm", func_name="main")
l231, l232, l233, l234, l235, l236, l237, l238, l239, l240, l241, l242, l243, l244 = sch.get_loops(block=b230)
b245 = sch.decompose_reduction(block=b230, loop=l234)
b246 = sch.get_block(name="inverse", func_name="main")
l247, l248, l249, l250, l251, l252, l253, l254 = sch.get_loops(block=b246)
b255 = sch.decompose_reduction(block=b246, loop=l253)
2024-04-29 00:26:11 [INFO] [evolutionary_search.cc:713] Generating candidates......
2024-04-29 00:26:15 [INFO] [evolutionary_search.cc:715] Picked top 102 candidate(s) from database
2024-04-29 00:26:22 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x43caf38)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x6f9f348)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x70a6218)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x9268ff8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x9288ea8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x70936f8)]: 406 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x3ab3ae8)]: 0 failure(s)
2024-04-29 00:26:29 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x43caf38)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x6f9f348)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x70a6218)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x9268ff8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x9288ea8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x70936f8)]: 810 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x3ab3ae8)]: 0 failure(s)
2024-04-29 00:26:36 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x43caf38)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x6f9f348)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x70a6218)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x9268ff8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x9288ea8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x70936f8)]: 1211 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x3ab3ae8)]: 0 failure(s)
2024-04-29 00:26:42 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x43caf38)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x6f9f348)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x70a6218)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x9268ff8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x9288ea8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x70936f8)]: 1615 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x3ab3ae8)]: 0 failure(s)
2024-04-29 00:26:49 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x43caf38)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x6f9f348)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x70a6218)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x9268ff8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x9288ea8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x70936f8)]: 2016 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x3ab3ae8)]: 0 failure(s)
2024-04-29 00:26:56 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x43caf38)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x6f9f348)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x70a6218)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x9268ff8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x9288ea8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x70936f8)]: 2419 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x3ab3ae8)]: 0 failure(s)
2024-04-29 00:27:02 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x43caf38)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x6f9f348)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x70a6218)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x9268ff8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x9288ea8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x70936f8)]: 2819 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x3ab3ae8)]: 0 failure(s)
2024-04-29 00:27:02 [INFO] [evolutionary_search.cc:723] Sampled 51 candidate(s)
2024-04-29 00:27:26 [INFO] [evolutionary_search.cc:621] Evolve iter #0 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x43caf38)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x6f9f348)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x70a6218)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x9268ff8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x9288ea8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x70936f8)]: 181 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x3ab3ae8)]: 0 failure(s)
2024-04-29 00:27:49 [INFO] [evolutionary_search.cc:621] Evolve iter #1 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x43caf38)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x6f9f348)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x70a6218)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x9268ff8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x9288ea8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x70936f8)]: 163 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x3ab3ae8)]: 0 failure(s)
2024-04-29 00:28:14 [INFO] [evolutionary_search.cc:621] Evolve iter #2 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x43caf38)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x6f9f348)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x70a6218)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x9268ff8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x9288ea8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x70936f8)]: 190 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x3ab3ae8)]: 0 failure(s)
2024-04-29 00:28:40 [INFO] [evolutionary_search.cc:621] Evolve iter #3 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x43caf38)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x6f9f348)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x70a6218)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x9268ff8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x9288ea8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x70936f8)]: 190 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x3ab3ae8)]: 0 failure(s)
2024-04-29 00:28:45 [INFO] [evolutionary_search.cc:649] Scores of the best 64 candidates:
[1 : 16]:	1.1707  1.0322  1.0254  1.0227  1.0113  1.0080  1.0001  0.9995  0.9963  0.9960  0.9956  0.9954  0.9939  0.9923  0.9912  0.9909
[17 : 32]:	0.9906  0.9898  0.9892  0.9883  0.9870  0.9870  0.9870  0.9846  0.9844  0.9805  0.9792  0.9788  0.9785  0.9778  0.9777  0.9774
[33 : 48]:	0.9747  0.9741  0.9736  0.9732  0.9715  0.9714  0.9711  0.9710  0.9709  0.9705  0.9705  0.9696  0.9693  0.9692  0.9680  0.9676
[49 : 64]:	0.9666  0.9664  0.9645  0.9637  0.9636  0.9635  0.9626  0.9626  0.9625  0.9625  0.9624  0.9622  0.9618  0.9615  0.9614  0.9613
2024-04-29 00:28:45 [INFO] [evolutionary_search.cc:727] Got 64 candidate(s) with evolutionary search
2024-04-29 00:28:45 [INFO] [evolutionary_search.cc:730] Sending 64 candidates(s) for measurement
2024-04-29 00:29:53 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #449: GFLOPs: 706.2312. Time: 1181.0946 us. Best GFLOPs: 11527.7316
2024-04-29 00:29:53 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #450: GFLOPs: 11587.4650. Time: 71.9852 us. Best GFLOPs: 11587.4650
2024-04-29 00:29:53 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #451: GFLOPs: 11593.2937. Time: 71.9490 us. Best GFLOPs: 11593.2937
2024-04-29 00:29:53 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #452: GFLOPs: 11645.8585. Time: 71.6242 us. Best GFLOPs: 11645.8585
2024-04-29 00:29:53 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #453: GFLOPs: 11644.8257. Time: 71.6306 us. Best GFLOPs: 11645.8585
2024-04-29 00:29:53 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #454: GFLOPs: 11298.7807. Time: 73.8244 us. Best GFLOPs: 11645.8585
2024-04-29 00:29:53 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #455: GFLOPs: 11339.2474. Time: 73.5610 us. Best GFLOPs: 11645.8585
2024-04-29 00:29:53 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #456: GFLOPs: 11415.2214. Time: 73.0714 us. Best GFLOPs: 11645.8585
2024-04-29 00:29:53 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #457: GFLOPs: 11417.5938. Time: 73.0562 us. Best GFLOPs: 11645.8585
2024-04-29 00:29:53 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #458: GFLOPs: 11060.1413. Time: 75.4173 us. Best GFLOPs: 11645.8585
2024-04-29 00:29:53 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #459: GFLOPs: 10958.2512. Time: 76.1185 us. Best GFLOPs: 11645.8585
2024-04-29 00:29:53 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #460: GFLOPs: 10964.9938. Time: 76.0717 us. Best GFLOPs: 11645.8585
2024-04-29 00:29:53 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #461: GFLOPs: 11080.2909. Time: 75.2801 us. Best GFLOPs: 11645.8585
2024-04-29 00:29:53 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #462: GFLOPs: 11146.1367. Time: 74.8354 us. Best GFLOPs: 11645.8585
2024-04-29 00:29:53 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #463: GFLOPs: 11292.8589. Time: 73.8631 us. Best GFLOPs: 11645.8585
2024-04-29 00:29:53 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #464: GFLOPs: 11433.4066. Time: 72.9551 us. Best GFLOPs: 11645.8585
2024-04-29 00:29:53 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #465: GFLOPs: 11477.6287. Time: 72.6741 us. Best GFLOPs: 11645.8585
2024-04-29 00:29:53 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #466: GFLOPs: 10951.2803. Time: 76.1670 us. Best GFLOPs: 11645.8585
2024-04-29 00:29:53 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #467: GFLOPs: 11584.6978. Time: 72.0024 us. Best GFLOPs: 11645.8585
2024-04-29 00:29:53 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #468: GFLOPs: 11307.6478. Time: 73.7665 us. Best GFLOPs: 11645.8585
2024-04-29 00:29:53 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #469: GFLOPs: 10983.8142. Time: 75.9414 us. Best GFLOPs: 11645.8585
2024-04-29 00:29:53 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #470: GFLOPs: 10977.9113. Time: 75.9822 us. Best GFLOPs: 11645.8585
2024-04-29 00:29:53 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #471: GFLOPs: 11455.5262. Time: 72.8143 us. Best GFLOPs: 11645.8585
2024-04-29 00:29:53 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #472: GFLOPs: 10921.2267. Time: 76.3766 us. Best GFLOPs: 11645.8585
2024-04-29 00:29:53 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #473: GFLOPs: 10954.4200. Time: 76.1451 us. Best GFLOPs: 11645.8585
2024-04-29 00:29:53 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #474: GFLOPs: 11053.2569. Time: 75.4643 us. Best GFLOPs: 11645.8585
2024-04-29 00:29:53 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #475: GFLOPs: 10955.6198. Time: 76.1368 us. Best GFLOPs: 11645.8585
2024-04-29 00:29:53 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #476: GFLOPs: 11476.3093. Time: 72.6824 us. Best GFLOPs: 11645.8585
2024-04-29 00:29:53 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #477: GFLOPs: 10974.3192. Time: 76.0071 us. Best GFLOPs: 11645.8585
2024-04-29 00:29:53 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #478: GFLOPs: 10909.1527. Time: 76.4611 us. Best GFLOPs: 11645.8585
2024-04-29 00:29:53 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #479: GFLOPs: 11469.9784. Time: 72.7225 us. Best GFLOPs: 11645.8585
2024-04-29 00:29:53 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #480: GFLOPs: 11157.6910. Time: 74.7579 us. Best GFLOPs: 11645.8585
2024-04-29 00:29:53 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #481: GFLOPs: 10256.8442. Time: 81.3238 us. Best GFLOPs: 11645.8585
2024-04-29 00:29:53 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #482: GFLOPs: 10316.1412. Time: 80.8564 us. Best GFLOPs: 11645.8585
2024-04-29 00:29:53 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #483: GFLOPs: 10604.3024. Time: 78.6592 us. Best GFLOPs: 11645.8585
2024-04-29 00:29:53 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #484: GFLOPs: 10327.1582. Time: 80.7701 us. Best GFLOPs: 11645.8585
2024-04-29 00:29:53 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #485: GFLOPs: 10986.3947. Time: 75.9235 us. Best GFLOPs: 11645.8585
2024-04-29 00:29:53 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #486: GFLOPs: 10039.6571. Time: 83.0831 us. Best GFLOPs: 11645.8585
2024-04-29 00:29:53 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #487: GFLOPs: 10811.8957. Time: 77.1489 us. Best GFLOPs: 11645.8585
2024-04-29 00:29:53 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #488: GFLOPs: 10072.7946. Time: 82.8098 us. Best GFLOPs: 11645.8585
2024-04-29 00:29:53 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #489: GFLOPs: 10973.3820. Time: 76.0136 us. Best GFLOPs: 11645.8585
2024-04-29 00:29:53 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #490: GFLOPs: 9238.2332. Time: 90.2906 us. Best GFLOPs: 11645.8585
2024-04-29 00:29:53 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #491: GFLOPs: 11153.0218. Time: 74.7892 us. Best GFLOPs: 11645.8585
2024-04-29 00:29:53 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #492: GFLOPs: 11019.9648. Time: 75.6922 us. Best GFLOPs: 11645.8585
2024-04-29 00:29:53 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #493: GFLOPs: 10437.3735. Time: 79.9172 us. Best GFLOPs: 11645.8585
2024-04-29 00:29:53 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #494: GFLOPs: 11398.1047. Time: 73.1811 us. Best GFLOPs: 11645.8585
2024-04-29 00:29:53 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #495: GFLOPs: 10146.4503. Time: 82.2086 us. Best GFLOPs: 11645.8585
2024-04-29 00:29:53 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #496: GFLOPs: 11347.7221. Time: 73.5060 us. Best GFLOPs: 11645.8585
2024-04-29 00:29:53 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #497: GFLOPs: 10733.1217. Time: 77.7151 us. Best GFLOPs: 11645.8585
2024-04-29 00:29:53 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #498: GFLOPs: 10899.3068. Time: 76.5302 us. Best GFLOPs: 11645.8585
2024-04-29 00:29:53 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #499: GFLOPs: 11070.4627. Time: 75.3470 us. Best GFLOPs: 11645.8585
2024-04-29 00:29:53 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #500: GFLOPs: 11052.8707. Time: 75.4669 us. Best GFLOPs: 11645.8585
2024-04-29 00:29:53 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #501: GFLOPs: 10611.1835. Time: 78.6082 us. Best GFLOPs: 11645.8585
2024-04-29 00:29:53 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #502: GFLOPs: 11168.1286. Time: 74.6881 us. Best GFLOPs: 11645.8585
2024-04-29 00:29:53 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #503: GFLOPs: 9603.7469. Time: 86.8542 us. Best GFLOPs: 11645.8585
2024-04-29 00:29:53 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #504: GFLOPs: 11396.0482. Time: 73.1943 us. Best GFLOPs: 11645.8585
2024-04-29 00:29:53 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #505: GFLOPs: 11408.5375. Time: 73.1142 us. Best GFLOPs: 11645.8585
2024-04-29 00:29:53 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #506: GFLOPs: 11234.6723. Time: 74.2457 us. Best GFLOPs: 11645.8585
2024-04-29 00:29:53 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #507: GFLOPs: 11415.1636. Time: 73.0717 us. Best GFLOPs: 11645.8585
2024-04-29 00:29:53 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #508: GFLOPs: 11167.6924. Time: 74.6910 us. Best GFLOPs: 11645.8585
2024-04-29 00:29:53 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #509: GFLOPs: 10677.9323. Time: 78.1168 us. Best GFLOPs: 11645.8585
2024-04-29 00:29:53 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #510: GFLOPs: 286.0283. Time: 2916.2349 us. Best GFLOPs: 11645.8585
2024-04-29 00:29:53 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #511: GFLOPs: 2956.5681. Time: 282.1264 us. Best GFLOPs: 11645.8585
2024-04-29 00:29:53 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #512: GFLOPs: 3950.7803. Time: 211.1294 us. Best GFLOPs: 11645.8585
2024-04-29 00:55:05 [INFO] [evolutionary_search.cc:713] Generating candidates......
2024-04-29 00:55:08 [INFO] [evolutionary_search.cc:715] Picked top 102 candidate(s) from database
2024-04-29 00:55:16 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x43caf38)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x6f9f348)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x70a6218)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x9268ff8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x9288ea8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x70936f8)]: 402 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x3ab3ae8)]: 0 failure(s)
2024-04-29 00:55:22 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x43caf38)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x6f9f348)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x70a6218)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x9268ff8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x9288ea8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x70936f8)]: 797 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x3ab3ae8)]: 0 failure(s)
2024-04-29 00:55:29 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x43caf38)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x6f9f348)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x70a6218)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x9268ff8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x9288ea8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x70936f8)]: 1201 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x3ab3ae8)]: 0 failure(s)
2024-04-29 00:55:36 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x43caf38)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x6f9f348)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x70a6218)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x9268ff8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x9288ea8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x70936f8)]: 1608 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x3ab3ae8)]: 0 failure(s)
2024-04-29 00:55:44 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x43caf38)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x6f9f348)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x70a6218)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x9268ff8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x9288ea8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x70936f8)]: 2014 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x3ab3ae8)]: 0 failure(s)
2024-04-29 00:55:51 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x43caf38)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x6f9f348)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x70a6218)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x9268ff8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x9288ea8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x70936f8)]: 2416 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x3ab3ae8)]: 0 failure(s)
2024-04-29 00:55:59 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x43caf38)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x6f9f348)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x70a6218)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x9268ff8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x9288ea8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x70936f8)]: 2820 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x3ab3ae8)]: 0 failure(s)
2024-04-29 00:55:59 [INFO] [evolutionary_search.cc:723] Sampled 50 candidate(s)
2024-04-29 00:56:23 [INFO] [evolutionary_search.cc:621] Evolve iter #0 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x43caf38)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x6f9f348)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x70a6218)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x9268ff8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x9288ea8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x70936f8)]: 214 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x3ab3ae8)]: 0 failure(s)
2024-04-29 00:56:49 [INFO] [evolutionary_search.cc:621] Evolve iter #1 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x43caf38)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x6f9f348)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x70a6218)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x9268ff8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x9288ea8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x70936f8)]: 185 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x3ab3ae8)]: 0 failure(s)
2024-04-29 00:57:14 [INFO] [evolutionary_search.cc:621] Evolve iter #2 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x43caf38)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x6f9f348)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x70a6218)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x9268ff8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x9288ea8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x70936f8)]: 174 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x3ab3ae8)]: 0 failure(s)
2024-04-29 00:57:39 [INFO] [evolutionary_search.cc:621] Evolve iter #3 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x43caf38)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x6f9f348)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x70a6218)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x9268ff8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x9288ea8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x70936f8)]: 157 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x3ab3ae8)]: 0 failure(s)
2024-04-29 00:57:44 [INFO] [evolutionary_search.cc:649] Scores of the best 64 candidates:
[1 : 16]:	0.9968  0.9899  0.9891  0.9875  0.9874  0.9874  0.9873  0.9869  0.9860  0.9852  0.9838  0.9835  0.9834  0.9826  0.9823  0.9819
[17 : 32]:	0.9815  0.9813  0.9812  0.9799  0.9798  0.9787  0.9784  0.9783  0.9780  0.9780  0.9777  0.9773  0.9772  0.9766  0.9760  0.9759
[33 : 48]:	0.9757  0.9755  0.9744  0.9737  0.9734  0.9733  0.9732  0.9730  0.9728  0.9724  0.9724  0.9716  0.9706  0.9705  0.9701  0.9694
[49 : 64]:	0.9694  0.9688  0.9686  0.9686  0.9682  0.9681  0.9678  0.9677  0.9677  0.9677  0.9677  0.9673  0.9671  0.9670  0.9663  0.9662
2024-04-29 00:57:45 [INFO] [evolutionary_search.cc:727] Got 64 candidate(s) with evolutionary search
2024-04-29 00:57:45 [INFO] [evolutionary_search.cc:730] Sending 64 candidates(s) for measurement
2024-04-29 00:58:56 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #513: GFLOPs: 11539.0556. Time: 72.2872 us. Best GFLOPs: 11645.8585
2024-04-29 00:58:56 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #514: GFLOPs: 11295.4628. Time: 73.8461 us. Best GFLOPs: 11645.8585
2024-04-29 00:58:56 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #515: GFLOPs: 7925.2223. Time: 105.2495 us. Best GFLOPs: 11645.8585
2024-04-29 00:58:56 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #516: GFLOPs: 7785.6200. Time: 107.1367 us. Best GFLOPs: 11645.8585
2024-04-29 00:58:56 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #517: GFLOPs: 7895.1580. Time: 105.6503 us. Best GFLOPs: 11645.8585
2024-04-29 00:58:56 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #518: GFLOPs: 11463.3049. Time: 72.7649 us. Best GFLOPs: 11645.8585
2024-04-29 00:58:56 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #519: GFLOPs: 11538.8178. Time: 72.2887 us. Best GFLOPs: 11645.8585
2024-04-29 00:58:56 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #520: GFLOPs: 11289.9615. Time: 73.8821 us. Best GFLOPs: 11645.8585
2024-04-29 00:58:56 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #521: GFLOPs: 10672.4689. Time: 78.1568 us. Best GFLOPs: 11645.8585
2024-04-29 00:58:56 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #522: GFLOPs: 11446.8283. Time: 72.8696 us. Best GFLOPs: 11645.8585
2024-04-29 00:58:56 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #523: GFLOPs: 11264.6775. Time: 74.0479 us. Best GFLOPs: 11645.8585
2024-04-29 00:58:56 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #524: GFLOPs: 11647.2208. Time: 71.6159 us. Best GFLOPs: 11647.2208
2024-04-29 00:58:56 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #525: GFLOPs: 11308.9625. Time: 73.7579 us. Best GFLOPs: 11647.2208
2024-04-29 00:58:56 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #526: GFLOPs: 11569.3194. Time: 72.0981 us. Best GFLOPs: 11647.2208
2024-04-29 00:58:56 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #527: GFLOPs: 11337.3592. Time: 73.5732 us. Best GFLOPs: 11647.2208
2024-04-29 00:58:56 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #528: GFLOPs: 11407.2711. Time: 73.1223 us. Best GFLOPs: 11647.2208
2024-04-29 00:58:56 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #529: GFLOPs: 11464.5773. Time: 72.7568 us. Best GFLOPs: 11647.2208
2024-04-29 00:58:56 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #530: GFLOPs: 11429.4864. Time: 72.9802 us. Best GFLOPs: 11647.2208
2024-04-29 00:58:56 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #531: GFLOPs: 11293.1068. Time: 73.8615 us. Best GFLOPs: 11647.2208
2024-04-29 00:58:56 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #532: GFLOPs: 11400.0106. Time: 73.1689 us. Best GFLOPs: 11647.2208
2024-04-29 00:58:56 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #533: GFLOPs: 11141.2855. Time: 74.8680 us. Best GFLOPs: 11647.2208
2024-04-29 00:58:56 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #534: GFLOPs: 11686.6064. Time: 71.3745 us. Best GFLOPs: 11686.6064
2024-04-29 00:58:56 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #535: GFLOPs: 11364.9764. Time: 73.3944 us. Best GFLOPs: 11686.6064
2024-04-29 00:58:56 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #536: GFLOPs: 11378.5959. Time: 73.3066 us. Best GFLOPs: 11686.6064
2024-04-29 00:58:56 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #537: GFLOPs: 11273.9614. Time: 73.9869 us. Best GFLOPs: 11686.6064
2024-04-29 00:58:56 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #538: GFLOPs: 11439.1086. Time: 72.9188 us. Best GFLOPs: 11686.6064
2024-04-29 00:58:56 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #539: GFLOPs: 11109.9267. Time: 75.0793 us. Best GFLOPs: 11686.6064
2024-04-29 00:58:56 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #540: GFLOPs: 11323.7635. Time: 73.6615 us. Best GFLOPs: 11686.6064
2024-04-29 00:58:56 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #541: GFLOPs: 11617.7664. Time: 71.7974 us. Best GFLOPs: 11686.6064
2024-04-29 00:58:56 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #542: GFLOPs: 11293.8505. Time: 73.8566 us. Best GFLOPs: 11686.6064
2024-04-29 00:58:56 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #543: GFLOPs: 11458.5834. Time: 72.7948 us. Best GFLOPs: 11686.6064
2024-04-29 00:58:56 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #544: GFLOPs: 11423.1347. Time: 73.0207 us. Best GFLOPs: 11686.6064
2024-04-29 00:58:56 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #545: GFLOPs: 11543.3963. Time: 72.2600 us. Best GFLOPs: 11686.6064
2024-04-29 00:58:56 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #546: GFLOPs: 11162.1900. Time: 74.7278 us. Best GFLOPs: 11686.6064
2024-04-29 00:58:56 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #547: GFLOPs: 11128.9807. Time: 74.9508 us. Best GFLOPs: 11686.6064
2024-04-29 00:58:56 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #548: GFLOPs: 11512.2121. Time: 72.4557 us. Best GFLOPs: 11686.6064
2024-04-29 00:58:56 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #549: GFLOPs: 11268.5983. Time: 74.0221 us. Best GFLOPs: 11686.6064
2024-04-29 00:58:56 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #550: GFLOPs: 11307.8183. Time: 73.7654 us. Best GFLOPs: 11686.6064
2024-04-29 00:58:56 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #551: GFLOPs: 10775.3511. Time: 77.4105 us. Best GFLOPs: 11686.6064
2024-04-29 00:58:56 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #552: GFLOPs: 11272.7518. Time: 73.9949 us. Best GFLOPs: 11686.6064
2024-04-29 00:58:56 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #553: GFLOPs: 11374.9167. Time: 73.3303 us. Best GFLOPs: 11686.6064
2024-04-29 00:58:56 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #554: GFLOPs: 11201.5535. Time: 74.4652 us. Best GFLOPs: 11686.6064
2024-04-29 00:58:56 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #555: GFLOPs: 11467.1332. Time: 72.7406 us. Best GFLOPs: 11686.6064
2024-04-29 00:58:56 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #556: GFLOPs: 11060.4032. Time: 75.4155 us. Best GFLOPs: 11686.6064
2024-04-29 00:58:56 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #557: GFLOPs: 11212.3669. Time: 74.3934 us. Best GFLOPs: 11686.6064
2024-04-29 00:58:56 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #558: GFLOPs: 11615.3895. Time: 71.8121 us. Best GFLOPs: 11686.6064
2024-04-29 00:58:56 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #559: GFLOPs: 11407.0929. Time: 73.1234 us. Best GFLOPs: 11686.6064
2024-04-29 00:58:56 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #560: GFLOPs: 11002.0931. Time: 75.8152 us. Best GFLOPs: 11686.6064
2024-04-29 00:58:56 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #561: GFLOPs: 11278.5842. Time: 73.9566 us. Best GFLOPs: 11686.6064
2024-04-29 00:58:56 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #562: GFLOPs: 10852.4583. Time: 76.8605 us. Best GFLOPs: 11686.6064
2024-04-29 00:58:56 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #563: GFLOPs: 11202.5976. Time: 74.4583 us. Best GFLOPs: 11686.6064
2024-04-29 00:58:56 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #564: GFLOPs: 11360.3468. Time: 73.4243 us. Best GFLOPs: 11686.6064
2024-04-29 00:58:56 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #565: GFLOPs: 11371.7326. Time: 73.3508 us. Best GFLOPs: 11686.6064
2024-04-29 00:58:56 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #566: GFLOPs: 11452.4463. Time: 72.8339 us. Best GFLOPs: 11686.6064
2024-04-29 00:58:56 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #567: GFLOPs: 10969.1677. Time: 76.0428 us. Best GFLOPs: 11686.6064
2024-04-29 00:58:56 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #568: GFLOPs: 11401.0041. Time: 73.1625 us. Best GFLOPs: 11686.6064
2024-04-29 00:58:56 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #569: GFLOPs: 11230.7486. Time: 74.2716 us. Best GFLOPs: 11686.6064
2024-04-29 00:58:56 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #570: GFLOPs: 11299.6329. Time: 73.8188 us. Best GFLOPs: 11686.6064
2024-04-29 00:58:56 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #571: GFLOPs: 11164.7413. Time: 74.7107 us. Best GFLOPs: 11686.6064
2024-04-29 00:58:56 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #572: GFLOPs: 11553.4824. Time: 72.1969 us. Best GFLOPs: 11686.6064
2024-04-29 00:58:56 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #573: GFLOPs: 11426.5316. Time: 72.9990 us. Best GFLOPs: 11686.6064
2024-04-29 00:58:56 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #574: GFLOPs: 5069.3705. Time: 164.5423 us. Best GFLOPs: 11686.6064
2024-04-29 00:58:56 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #575: GFLOPs: 7090.5155. Time: 117.6397 us. Best GFLOPs: 11686.6064
2024-04-29 00:58:56 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #576: GFLOPs: 263.1670. Time: 3169.5680 us. Best GFLOPs: 11686.6064
2024-04-29 01:37:40 [INFO] [evolutionary_search.cc:713] Generating candidates......
2024-04-29 01:37:43 [INFO] [evolutionary_search.cc:715] Picked top 102 candidate(s) from database
2024-04-29 01:37:50 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x43caf38)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x6f9f348)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x70a6218)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x9268ff8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x9288ea8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x70936f8)]: 399 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x3ab3ae8)]: 0 failure(s)
2024-04-29 01:37:57 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x43caf38)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x6f9f348)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x70a6218)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x9268ff8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x9288ea8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x70936f8)]: 800 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x3ab3ae8)]: 0 failure(s)
2024-04-29 01:38:04 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x43caf38)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x6f9f348)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x70a6218)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x9268ff8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x9288ea8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x70936f8)]: 1203 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x3ab3ae8)]: 0 failure(s)
2024-04-29 01:38:11 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x43caf38)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x6f9f348)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x70a6218)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x9268ff8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x9288ea8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x70936f8)]: 1606 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x3ab3ae8)]: 0 failure(s)
2024-04-29 01:38:17 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x43caf38)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x6f9f348)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x70a6218)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x9268ff8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x9288ea8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x70936f8)]: 2008 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x3ab3ae8)]: 0 failure(s)
2024-04-29 01:38:25 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x43caf38)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x6f9f348)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x70a6218)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x9268ff8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x9288ea8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x70936f8)]: 2410 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x3ab3ae8)]: 0 failure(s)
2024-04-29 01:38:25 [INFO] [evolutionary_search.cc:723] Sampled 50 candidate(s)
2024-04-29 01:38:48 [INFO] [evolutionary_search.cc:621] Evolve iter #0 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x43caf38)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x6f9f348)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x70a6218)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x9268ff8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x9288ea8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x70936f8)]: 228 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x3ab3ae8)]: 0 failure(s)
2024-04-29 01:39:12 [INFO] [evolutionary_search.cc:621] Evolve iter #1 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x43caf38)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x6f9f348)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x70a6218)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x9268ff8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x9288ea8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x70936f8)]: 187 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x3ab3ae8)]: 0 failure(s)
2024-04-29 01:39:36 [INFO] [evolutionary_search.cc:621] Evolve iter #2 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x43caf38)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x6f9f348)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x70a6218)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x9268ff8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x9288ea8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x70936f8)]: 192 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x3ab3ae8)]: 0 failure(s)
2024-04-29 01:40:00 [INFO] [evolutionary_search.cc:621] Evolve iter #3 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x43caf38)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x6f9f348)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x70a6218)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x9268ff8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x9288ea8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x70936f8)]: 170 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x3ab3ae8)]: 0 failure(s)
2024-04-29 01:40:05 [INFO] [evolutionary_search.cc:649] Scores of the best 64 candidates:
[1 : 16]:	1.0092  1.0042  1.0036  1.0013  1.0013  0.9987  0.9966  0.9939  0.9931  0.9931  0.9928  0.9898  0.9897  0.9881  0.9877  0.9876
[17 : 32]:	0.9876  0.9874  0.9872  0.9872  0.9870  0.9869  0.9869  0.9869  0.9869  0.9867  0.9864  0.9863  0.9849  0.9842  0.9831  0.9824
[33 : 48]:	0.9822  0.9818  0.9817  0.9807  0.9802  0.9800  0.9800  0.9799  0.9799  0.9797  0.9794  0.9794  0.9792  0.9790  0.9790  0.9790
[49 : 64]:	0.9785  0.9785  0.9783  0.9780  0.9780  0.9774  0.9772  0.9771  0.9769  0.9768  0.9766  0.9765  0.9763  0.9759  0.9757  0.9755
2024-04-29 01:40:05 [INFO] [evolutionary_search.cc:727] Got 64 candidate(s) with evolutionary search
2024-04-29 01:40:06 [INFO] [evolutionary_search.cc:730] Sending 64 candidates(s) for measurement
2024-04-29 01:41:20 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #577: GFLOPs: 11421.3801. Time: 73.0320 us. Best GFLOPs: 11686.6064
2024-04-29 01:41:20 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #578: GFLOPs: 11354.8385. Time: 73.4599 us. Best GFLOPs: 11686.6064
2024-04-29 01:41:20 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #579: GFLOPs: 11495.9203. Time: 72.5584 us. Best GFLOPs: 11686.6064
2024-04-29 01:41:20 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #580: GFLOPs: 11452.1579. Time: 72.8357 us. Best GFLOPs: 11686.6064
2024-04-29 01:41:20 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #581: GFLOPs: 11618.6122. Time: 71.7922 us. Best GFLOPs: 11686.6064
2024-04-29 01:41:20 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #582: GFLOPs: 11284.3690. Time: 73.9187 us. Best GFLOPs: 11686.6064
2024-04-29 01:41:20 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #583: GFLOPs: 11398.5261. Time: 73.1784 us. Best GFLOPs: 11686.6064
2024-04-29 01:41:20 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #584: GFLOPs: 11498.6847. Time: 72.5410 us. Best GFLOPs: 11686.6064
2024-04-29 01:41:20 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #585: GFLOPs: 11356.3513. Time: 73.4502 us. Best GFLOPs: 11686.6064
2024-04-29 01:41:20 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #586: GFLOPs: 11317.8853. Time: 73.6998 us. Best GFLOPs: 11686.6064
2024-04-29 01:41:20 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #587: GFLOPs: 11374.6347. Time: 73.3321 us. Best GFLOPs: 11686.6064
2024-04-29 01:41:20 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #588: GFLOPs: 11148.0321. Time: 74.8227 us. Best GFLOPs: 11686.6064
2024-04-29 01:41:20 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #589: GFLOPs: 11353.5963. Time: 73.4680 us. Best GFLOPs: 11686.6064
2024-04-29 01:41:20 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #590: GFLOPs: 11453.8170. Time: 72.8251 us. Best GFLOPs: 11686.6064
2024-04-29 01:41:20 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #591: GFLOPs: 11418.4568. Time: 73.0507 us. Best GFLOPs: 11686.6064
2024-04-29 01:41:20 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #592: GFLOPs: 11262.6835. Time: 74.0610 us. Best GFLOPs: 11686.6064
2024-04-29 01:41:20 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #593: GFLOPs: 11099.8994. Time: 75.1472 us. Best GFLOPs: 11686.6064
2024-04-29 01:41:20 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #594: GFLOPs: 11140.5378. Time: 74.8730 us. Best GFLOPs: 11686.6064
2024-04-29 01:41:20 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #595: GFLOPs: 11456.2020. Time: 72.8100 us. Best GFLOPs: 11686.6064
2024-04-29 01:41:20 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #596: GFLOPs: 11519.0785. Time: 72.4125 us. Best GFLOPs: 11686.6064
2024-04-29 01:41:20 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #597: GFLOPs: 11472.4074. Time: 72.7071 us. Best GFLOPs: 11686.6064
2024-04-29 01:41:20 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #598: GFLOPs: 11435.2427. Time: 72.9434 us. Best GFLOPs: 11686.6064
2024-04-29 01:41:20 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #599: GFLOPs: 11513.5846. Time: 72.4471 us. Best GFLOPs: 11686.6064
2024-04-29 01:41:20 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #600: GFLOPs: 11361.0270. Time: 73.4199 us. Best GFLOPs: 11686.6064
2024-04-29 01:41:20 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #601: GFLOPs: 11396.7596. Time: 73.1897 us. Best GFLOPs: 11686.6064
2024-04-29 01:41:20 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #602: GFLOPs: 11251.2052. Time: 74.1366 us. Best GFLOPs: 11686.6064
2024-04-29 01:41:20 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #603: GFLOPs: 11286.4100. Time: 73.9053 us. Best GFLOPs: 11686.6064
2024-04-29 01:41:20 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #604: GFLOPs: 11427.9861. Time: 72.9897 us. Best GFLOPs: 11686.6064
2024-04-29 01:41:20 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #605: GFLOPs: 11441.0807. Time: 72.9062 us. Best GFLOPs: 11686.6064
2024-04-29 01:41:20 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #606: GFLOPs: 11315.8072. Time: 73.7133 us. Best GFLOPs: 11686.6064
2024-04-29 01:41:20 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #607: GFLOPs: 11368.7412. Time: 73.3701 us. Best GFLOPs: 11686.6064
2024-04-29 01:41:20 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #608: GFLOPs: 11234.4260. Time: 74.2473 us. Best GFLOPs: 11686.6064
2024-04-29 01:41:20 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #609: GFLOPs: 11402.6954. Time: 73.1516 us. Best GFLOPs: 11686.6064
2024-04-29 01:41:20 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #610: GFLOPs: 11336.9112. Time: 73.5761 us. Best GFLOPs: 11686.6064
2024-04-29 01:41:20 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #611: GFLOPs: 11419.4793. Time: 73.0441 us. Best GFLOPs: 11686.6064
2024-04-29 01:41:20 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #612: GFLOPs: 11060.4032. Time: 75.4155 us. Best GFLOPs: 11686.6064
2024-04-29 01:41:20 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #613: GFLOPs: 11282.5746. Time: 73.9305 us. Best GFLOPs: 11686.6064
2024-04-29 01:41:20 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #614: GFLOPs: 11484.0444. Time: 72.6335 us. Best GFLOPs: 11686.6064
2024-04-29 01:41:20 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #615: GFLOPs: 11567.9139. Time: 72.1068 us. Best GFLOPs: 11686.6064
2024-04-29 01:41:20 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #616: GFLOPs: 11530.1447. Time: 72.3430 us. Best GFLOPs: 11686.6064
2024-04-29 01:41:20 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #617: GFLOPs: 11208.2945. Time: 74.4204 us. Best GFLOPs: 11686.6064
2024-04-29 01:41:20 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #618: GFLOPs: 11525.5742. Time: 72.3717 us. Best GFLOPs: 11686.6064
2024-04-29 01:41:20 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #619: GFLOPs: 11447.7580. Time: 72.8637 us. Best GFLOPs: 11686.6064
2024-04-29 01:41:20 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #620: GFLOPs: 11284.9364. Time: 73.9150 us. Best GFLOPs: 11686.6064
2024-04-29 01:41:20 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #621: GFLOPs: 11069.7940. Time: 75.3515 us. Best GFLOPs: 11686.6064
2024-04-29 01:41:20 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #622: GFLOPs: 11523.0477. Time: 72.3876 us. Best GFLOPs: 11686.6064
2024-04-29 01:41:20 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #623: GFLOPs: 11590.5940. Time: 71.9658 us. Best GFLOPs: 11686.6064
2024-04-29 01:41:20 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #624: GFLOPs: 11437.5808. Time: 72.9285 us. Best GFLOPs: 11686.6064
2024-04-29 01:41:20 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #625: GFLOPs: 11310.0994. Time: 73.7505 us. Best GFLOPs: 11686.6064
2024-04-29 01:41:20 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #626: GFLOPs: 11256.3284. Time: 74.1028 us. Best GFLOPs: 11686.6064
2024-04-29 01:41:20 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #627: GFLOPs: 11407.7520. Time: 73.1192 us. Best GFLOPs: 11686.6064
2024-04-29 01:41:20 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #628: GFLOPs: 11080.7673. Time: 75.2769 us. Best GFLOPs: 11686.6064
2024-04-29 01:41:20 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #629: GFLOPs: 11483.8668. Time: 72.6346 us. Best GFLOPs: 11686.6064
2024-04-29 01:41:20 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #630: GFLOPs: 11405.1760. Time: 73.1357 us. Best GFLOPs: 11686.6064
2024-04-29 01:41:20 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #631: GFLOPs: 11435.9571. Time: 72.9389 us. Best GFLOPs: 11686.6064
2024-04-29 01:41:20 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #632: GFLOPs: 11522.8558. Time: 72.3888 us. Best GFLOPs: 11686.6064
2024-04-29 01:41:20 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #633: GFLOPs: 11071.5009. Time: 75.3399 us. Best GFLOPs: 11686.6064
2024-04-29 01:41:20 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #634: GFLOPs: 11253.1343. Time: 74.1239 us. Best GFLOPs: 11686.6064
2024-04-29 01:41:20 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #635: GFLOPs: 10964.5761. Time: 76.0746 us. Best GFLOPs: 11686.6064
2024-04-29 01:41:20 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #636: GFLOPs: 11102.7346. Time: 75.1280 us. Best GFLOPs: 11686.6064
2024-04-29 01:41:20 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #637: GFLOPs: 11140.1012. Time: 74.8760 us. Best GFLOPs: 11686.6064
2024-04-29 01:41:20 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #638: GFLOPs: 1135.6416. Time: 734.4974 us. Best GFLOPs: 11686.6064
2024-04-29 01:41:20 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #639: GFLOPs: 3986.5398. Time: 209.2355 us. Best GFLOPs: 11686.6064
2024-04-29 01:41:20 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #640: GFLOPs: 408.3825. Time: 2042.5113 us. Best GFLOPs: 11686.6064
2024-04-29 02:21:45 [INFO] [evolutionary_search.cc:713] Generating candidates......
2024-04-29 02:21:49 [INFO] [evolutionary_search.cc:715] Picked top 102 candidate(s) from database
2024-04-29 02:21:56 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x43caf38)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x6f9f348)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x70a6218)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x9268ff8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x9288ea8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x70936f8)]: 395 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x3ab3ae8)]: 0 failure(s)
2024-04-29 02:22:04 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x43caf38)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x6f9f348)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x70a6218)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x9268ff8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x9288ea8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x70936f8)]: 801 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x3ab3ae8)]: 0 failure(s)
2024-04-29 02:22:11 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x43caf38)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x6f9f348)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x70a6218)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x9268ff8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x9288ea8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x70936f8)]: 1204 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x3ab3ae8)]: 0 failure(s)
2024-04-29 02:22:18 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x43caf38)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x6f9f348)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x70a6218)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x9268ff8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x9288ea8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x70936f8)]: 1609 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x3ab3ae8)]: 0 failure(s)
2024-04-29 02:22:25 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x43caf38)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x6f9f348)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x70a6218)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x9268ff8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x9288ea8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x70936f8)]: 2012 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x3ab3ae8)]: 0 failure(s)
2024-04-29 02:22:32 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x43caf38)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x6f9f348)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x70a6218)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x9268ff8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x9288ea8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x70936f8)]: 2417 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x3ab3ae8)]: 0 failure(s)
2024-04-29 02:22:39 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x43caf38)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x6f9f348)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x70a6218)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x9268ff8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x9288ea8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x70936f8)]: 2821 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x3ab3ae8)]: 0 failure(s)
2024-04-29 02:22:47 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x43caf38)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x6f9f348)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x70a6218)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x9268ff8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x9288ea8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x70936f8)]: 3222 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x3ab3ae8)]: 0 failure(s)
2024-04-29 02:22:47 [INFO] [evolutionary_search.cc:723] Sampled 58 candidate(s)
2024-04-29 02:23:11 [INFO] [evolutionary_search.cc:621] Evolve iter #0 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x43caf38)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x6f9f348)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x70a6218)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x9268ff8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x9288ea8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x70936f8)]: 225 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x3ab3ae8)]: 0 failure(s)
2024-04-29 02:23:40 [INFO] [evolutionary_search.cc:621] Evolve iter #1 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x43caf38)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x6f9f348)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x70a6218)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x9268ff8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x9288ea8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x70936f8)]: 250 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x3ab3ae8)]: 0 failure(s)
2024-04-29 02:24:07 [INFO] [evolutionary_search.cc:621] Evolve iter #2 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x43caf38)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x6f9f348)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x70a6218)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x9268ff8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x9288ea8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x70936f8)]: 225 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x3ab3ae8)]: 0 failure(s)
2024-04-29 02:24:34 [INFO] [evolutionary_search.cc:621] Evolve iter #3 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x43caf38)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x6f9f348)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x70a6218)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x9268ff8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x9288ea8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x70936f8)]: 218 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x3ab3ae8)]: 0 failure(s)
2024-04-29 02:24:40 [INFO] [evolutionary_search.cc:649] Scores of the best 64 candidates:
[1 : 16]:	1.0094  1.0072  1.0019  1.0014  0.9996  0.9980  0.9959  0.9951  0.9939  0.9934  0.9932  0.9927  0.9918  0.9898  0.9894  0.9888
[17 : 32]:	0.9886  0.9886  0.9881  0.9867  0.9867  0.9858  0.9856  0.9856  0.9854  0.9854  0.9853  0.9850  0.9850  0.9848  0.9844  0.9843
[33 : 48]:	0.9842  0.9841  0.9834  0.9833  0.9832  0.9828  0.9825  0.9821  0.9821  0.9819  0.9818  0.9816  0.9816  0.9815  0.9812  0.9810
[49 : 64]:	0.9810  0.9809  0.9802  0.9802  0.9800  0.9800  0.9799  0.9799  0.9799  0.9798  0.9796  0.9796  0.9795  0.9792  0.9792  0.9791
2024-04-29 02:24:40 [INFO] [evolutionary_search.cc:727] Got 64 candidate(s) with evolutionary search
2024-04-29 02:24:40 [INFO] [evolutionary_search.cc:730] Sending 64 candidates(s) for measurement
2024-04-29 02:25:59 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #641: GFLOPs: 11545.0270. Time: 72.2498 us. Best GFLOPs: 11686.6064
2024-04-29 02:25:59 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #642: GFLOPs: 11722.9013. Time: 71.1535 us. Best GFLOPs: 11722.9013
2024-04-29 02:25:59 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #643: GFLOPs: 7916.8740. Time: 105.3605 us. Best GFLOPs: 11722.9013
2024-04-29 02:25:59 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #644: GFLOPs: 11578.3270. Time: 72.0420 us. Best GFLOPs: 11722.9013
2024-04-29 02:25:59 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #645: GFLOPs: 11364.2729. Time: 73.3990 us. Best GFLOPs: 11722.9013
2024-04-29 02:25:59 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #646: GFLOPs: 11566.0862. Time: 72.1182 us. Best GFLOPs: 11722.9013
2024-04-29 02:25:59 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #647: GFLOPs: 11388.9221. Time: 73.2401 us. Best GFLOPs: 11722.9013
2024-04-29 02:25:59 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #648: GFLOPs: 11349.5342. Time: 73.4943 us. Best GFLOPs: 11722.9013
2024-04-29 02:25:59 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #649: GFLOPs: 11422.6822. Time: 73.0236 us. Best GFLOPs: 11722.9013
2024-04-29 02:25:59 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #650: GFLOPs: 11552.5021. Time: 72.2030 us. Best GFLOPs: 11722.9013
2024-04-29 02:25:59 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #651: GFLOPs: 11428.3346. Time: 72.9875 us. Best GFLOPs: 11722.9013
2024-04-29 02:25:59 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #652: GFLOPs: 11569.3194. Time: 72.0981 us. Best GFLOPs: 11722.9013
2024-04-29 02:25:59 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #653: GFLOPs: 11361.1641. Time: 73.4190 us. Best GFLOPs: 11722.9013
2024-04-29 02:25:59 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #654: GFLOPs: 11632.0126. Time: 71.7095 us. Best GFLOPs: 11722.9013
2024-04-29 02:25:59 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #655: GFLOPs: 11590.0227. Time: 71.9693 us. Best GFLOPs: 11722.9013
2024-04-29 02:25:59 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #656: GFLOPs: 11507.7497. Time: 72.4838 us. Best GFLOPs: 11722.9013
2024-04-29 02:25:59 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #657: GFLOPs: 11595.2979. Time: 71.9366 us. Best GFLOPs: 11722.9013
2024-04-29 02:25:59 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #658: GFLOPs: 11588.4060. Time: 71.9793 us. Best GFLOPs: 11722.9013
2024-04-29 02:25:59 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #659: GFLOPs: 11675.1023. Time: 71.4448 us. Best GFLOPs: 11722.9013
2024-04-29 02:25:59 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #660: GFLOPs: 11383.7758. Time: 73.2732 us. Best GFLOPs: 11722.9013
2024-04-29 02:25:59 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #661: GFLOPs: 11517.5311. Time: 72.4223 us. Best GFLOPs: 11722.9013
2024-04-29 02:25:59 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #662: GFLOPs: 11588.2874. Time: 71.9801 us. Best GFLOPs: 11722.9013
2024-04-29 02:25:59 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #663: GFLOPs: 11439.9174. Time: 72.9136 us. Best GFLOPs: 11722.9013
2024-04-29 02:25:59 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #664: GFLOPs: 10277.0097. Time: 81.1643 us. Best GFLOPs: 11722.9013
2024-04-29 02:25:59 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #665: GFLOPs: 11582.8122. Time: 72.0141 us. Best GFLOPs: 11722.9013
2024-04-29 02:25:59 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #666: GFLOPs: 11634.5914. Time: 71.6936 us. Best GFLOPs: 11722.9013
2024-04-29 02:25:59 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #667: GFLOPs: 11732.3670. Time: 71.0961 us. Best GFLOPs: 11732.3670
2024-04-29 02:25:59 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #668: GFLOPs: 10377.4002. Time: 80.3791 us. Best GFLOPs: 11732.3670
2024-04-29 02:25:59 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #669: GFLOPs: 10316.5982. Time: 80.8528 us. Best GFLOPs: 11732.3670
2024-04-29 02:25:59 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #670: GFLOPs: 11617.7208. Time: 71.7977 us. Best GFLOPs: 11732.3670
2024-04-29 02:25:59 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #671: GFLOPs: 11654.7001. Time: 71.5699 us. Best GFLOPs: 11732.3670
2024-04-29 02:25:59 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #672: GFLOPs: 10232.6146. Time: 81.5164 us. Best GFLOPs: 11732.3670
2024-04-29 02:25:59 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #673: GFLOPs: 11608.5603. Time: 71.8544 us. Best GFLOPs: 11732.3670
2024-04-29 02:25:59 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #674: GFLOPs: 10448.2861. Time: 79.8337 us. Best GFLOPs: 11732.3670
2024-04-29 02:25:59 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #675: GFLOPs: 10347.2469. Time: 80.6133 us. Best GFLOPs: 11732.3670
2024-04-29 02:25:59 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #676: GFLOPs: 11435.2638. Time: 72.9433 us. Best GFLOPs: 11732.3670
2024-04-29 02:25:59 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #677: GFLOPs: 11606.9440. Time: 71.8644 us. Best GFLOPs: 11732.3670
2024-04-29 02:25:59 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #678: GFLOPs: 11588.7510. Time: 71.9772 us. Best GFLOPs: 11732.3670
2024-04-29 02:25:59 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #679: GFLOPs: 11510.7470. Time: 72.4650 us. Best GFLOPs: 11732.3670
2024-04-29 02:25:59 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #680: GFLOPs: 11573.9396. Time: 72.0693 us. Best GFLOPs: 11732.3670
2024-04-29 02:25:59 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #681: GFLOPs: 11577.4722. Time: 72.0473 us. Best GFLOPs: 11732.3670
2024-04-29 02:25:59 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #682: GFLOPs: 11372.5909. Time: 73.3453 us. Best GFLOPs: 11732.3670
2024-04-29 02:25:59 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #683: GFLOPs: 11408.4690. Time: 73.1146 us. Best GFLOPs: 11732.3670
2024-04-29 02:25:59 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #684: GFLOPs: 11532.7147. Time: 72.3269 us. Best GFLOPs: 11732.3670
2024-04-29 02:25:59 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #685: GFLOPs: 11572.7177. Time: 72.0769 us. Best GFLOPs: 11732.3670
2024-04-29 02:25:59 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #686: GFLOPs: 11768.5401. Time: 70.8776 us. Best GFLOPs: 11768.5401
2024-04-29 02:25:59 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #687: GFLOPs: 11544.5334. Time: 72.2529 us. Best GFLOPs: 11768.5401
2024-04-29 02:25:59 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #688: GFLOPs: 11713.7233. Time: 71.2093 us. Best GFLOPs: 11768.5401
2024-04-29 02:25:59 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #689: GFLOPs: 11562.1831. Time: 72.1426 us. Best GFLOPs: 11768.5401
2024-04-29 02:25:59 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #690: GFLOPs: 11580.7755. Time: 72.0268 us. Best GFLOPs: 11768.5401
2024-04-29 02:25:59 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #691: GFLOPs: 11574.5146. Time: 72.0657 us. Best GFLOPs: 11768.5401
2024-04-29 02:25:59 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #692: GFLOPs: 11605.2651. Time: 71.8748 us. Best GFLOPs: 11768.5401
2024-04-29 02:25:59 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #693: GFLOPs: 11667.7011. Time: 71.4902 us. Best GFLOPs: 11768.5401
2024-04-29 02:25:59 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #694: GFLOPs: 11690.8668. Time: 71.3485 us. Best GFLOPs: 11768.5401
2024-04-29 02:25:59 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #695: GFLOPs: 11707.9188. Time: 71.2446 us. Best GFLOPs: 11768.5401
2024-04-29 02:25:59 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #696: GFLOPs: 11713.8134. Time: 71.2087 us. Best GFLOPs: 11768.5401
2024-04-29 02:25:59 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #697: GFLOPs: 11597.0620. Time: 71.9256 us. Best GFLOPs: 11768.5401
2024-04-29 02:25:59 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #698: GFLOPs: 11574.1305. Time: 72.0681 us. Best GFLOPs: 11768.5401
2024-04-29 02:25:59 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #699: GFLOPs: 11369.5654. Time: 73.3648 us. Best GFLOPs: 11768.5401
2024-04-29 02:25:59 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #700: GFLOPs: 11569.1566. Time: 72.0991 us. Best GFLOPs: 11768.5401
2024-04-29 02:25:59 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #701: GFLOPs: 11683.2767. Time: 71.3949 us. Best GFLOPs: 11768.5401
2024-04-29 02:25:59 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #702: GFLOPs: 1409.9754. Time: 591.5889 us. Best GFLOPs: 11768.5401
2024-04-29 02:25:59 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #703: GFLOPs: 110.9755. Time: 7516.3061 us. Best GFLOPs: 11768.5401
2024-04-29 02:25:59 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #704: GFLOPs: 6491.0005. Time: 128.5050 us. Best GFLOPs: 11768.5401
2024-04-29 02:53:36 [INFO] [evolutionary_search.cc:713] Generating candidates......
2024-04-29 02:53:40 [INFO] [evolutionary_search.cc:715] Picked top 102 candidate(s) from database
2024-04-29 02:53:47 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x43caf38)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x6f9f348)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x70a6218)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x9268ff8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x9288ea8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x70936f8)]: 404 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x3ab3ae8)]: 0 failure(s)
2024-04-29 02:53:53 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x43caf38)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x6f9f348)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x70a6218)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x9268ff8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x9288ea8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x70936f8)]: 805 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x3ab3ae8)]: 0 failure(s)
2024-04-29 02:54:00 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x43caf38)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x6f9f348)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x70a6218)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x9268ff8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x9288ea8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x70936f8)]: 1210 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x3ab3ae8)]: 0 failure(s)
2024-04-29 02:54:07 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x43caf38)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x6f9f348)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x70a6218)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x9268ff8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x9288ea8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x70936f8)]: 1616 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x3ab3ae8)]: 0 failure(s)
2024-04-29 02:54:14 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x43caf38)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x6f9f348)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x70a6218)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x9268ff8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x9288ea8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x70936f8)]: 2021 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x3ab3ae8)]: 0 failure(s)
2024-04-29 02:54:21 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x43caf38)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x6f9f348)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x70a6218)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x9268ff8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x9288ea8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x70936f8)]: 2424 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x3ab3ae8)]: 0 failure(s)
2024-04-29 02:54:29 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x43caf38)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x6f9f348)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x70a6218)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x9268ff8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x9288ea8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x70936f8)]: 2829 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x3ab3ae8)]: 0 failure(s)
2024-04-29 02:54:36 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x43caf38)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x6f9f348)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x70a6218)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x9268ff8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x9288ea8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x70936f8)]: 3230 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x3ab3ae8)]: 0 failure(s)
2024-04-29 02:54:36 [INFO] [evolutionary_search.cc:723] Sampled 50 candidate(s)
2024-04-29 02:55:00 [INFO] [evolutionary_search.cc:621] Evolve iter #0 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x43caf38)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x6f9f348)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x70a6218)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x9268ff8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x9288ea8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x70936f8)]: 244 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x3ab3ae8)]: 0 failure(s)
2024-04-29 02:55:27 [INFO] [evolutionary_search.cc:621] Evolve iter #1 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x43caf38)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x6f9f348)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x70a6218)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x9268ff8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x9288ea8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x70936f8)]: 239 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x3ab3ae8)]: 0 failure(s)
2024-04-29 02:55:53 [INFO] [evolutionary_search.cc:621] Evolve iter #2 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x43caf38)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x6f9f348)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x70a6218)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x9268ff8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x9288ea8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x70936f8)]: 214 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x3ab3ae8)]: 0 failure(s)
2024-04-29 02:56:20 [INFO] [evolutionary_search.cc:621] Evolve iter #3 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x43caf38)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x6f9f348)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x70a6218)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x9268ff8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x9288ea8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x70936f8)]: 245 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x3ab3ae8)]: 0 failure(s)
2024-04-29 02:56:25 [INFO] [evolutionary_search.cc:649] Scores of the best 64 candidates:
[1 : 16]:	0.9940  0.9924  0.9897  0.9885  0.9879  0.9872  0.9863  0.9862  0.9856  0.9846  0.9845  0.9842  0.9834  0.9833  0.9829  0.9828
[17 : 32]:	0.9822  0.9822  0.9821  0.9818  0.9817  0.9815  0.9815  0.9815  0.9803  0.9801  0.9801  0.9799  0.9798  0.9793  0.9791  0.9791
[33 : 48]:	0.9788  0.9788  0.9787  0.9786  0.9786  0.9786  0.9786  0.9784  0.9782  0.9779  0.9778  0.9777  0.9775  0.9774  0.9772  0.9768
[49 : 64]:	0.9767  0.9767  0.9766  0.9764  0.9763  0.9762  0.9757  0.9756  0.9755  0.9754  0.9752  0.9752  0.9752  0.9751  0.9751  0.9749
2024-04-29 02:56:25 [INFO] [evolutionary_search.cc:727] Got 64 candidate(s) with evolutionary search
2024-04-29 02:56:25 [INFO] [evolutionary_search.cc:730] Sending 64 candidates(s) for measurement
2024-04-29 02:57:53 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #705: GFLOPs: 11481.0434. Time: 72.6524 us. Best GFLOPs: 11768.5401
2024-04-29 02:57:53 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #706: GFLOPs: 11733.7873. Time: 71.0875 us. Best GFLOPs: 11768.5401
2024-04-29 02:57:53 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #707: GFLOPs: 11549.2945. Time: 72.2231 us. Best GFLOPs: 11768.5401
2024-04-29 02:57:53 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #708: GFLOPs: 11720.4617. Time: 71.1683 us. Best GFLOPs: 11768.5401
2024-04-29 02:57:53 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #709: GFLOPs: 11706.3087. Time: 71.2544 us. Best GFLOPs: 11768.5401
2024-04-29 02:57:53 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #710: GFLOPs: 11582.8778. Time: 72.0137 us. Best GFLOPs: 11768.5401
2024-04-29 02:57:53 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #711: GFLOPs: 11634.4865. Time: 71.6943 us. Best GFLOPs: 11768.5401
2024-04-29 02:57:53 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #712: GFLOPs: 11576.2519. Time: 72.0549 us. Best GFLOPs: 11768.5401
2024-04-29 02:57:53 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #713: GFLOPs: 11574.2462. Time: 72.0674 us. Best GFLOPs: 11768.5401
2024-04-29 02:57:53 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #714: GFLOPs: 11588.5245. Time: 71.9786 us. Best GFLOPs: 11768.5401
2024-04-29 02:57:53 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #715: GFLOPs: 11371.3448. Time: 73.3533 us. Best GFLOPs: 11768.5401
2024-04-29 02:57:53 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #716: GFLOPs: 11362.2401. Time: 73.4121 us. Best GFLOPs: 11768.5401
2024-04-29 02:57:53 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #717: GFLOPs: 11544.9937. Time: 72.2500 us. Best GFLOPs: 11768.5401
2024-04-29 02:57:53 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #718: GFLOPs: 11519.4191. Time: 72.4104 us. Best GFLOPs: 11768.5401
2024-04-29 02:57:53 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #719: GFLOPs: 11597.4079. Time: 71.9235 us. Best GFLOPs: 11768.5401
2024-04-29 02:57:53 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #720: GFLOPs: 11431.3296. Time: 72.9684 us. Best GFLOPs: 11768.5401
2024-04-29 02:57:53 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #721: GFLOPs: 11383.8009. Time: 73.2731 us. Best GFLOPs: 11768.5401
2024-04-29 02:57:53 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #722: GFLOPs: 11500.5397. Time: 72.5293 us. Best GFLOPs: 11768.5401
2024-04-29 02:57:53 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #723: GFLOPs: 11685.0747. Time: 71.3839 us. Best GFLOPs: 11768.5401
2024-04-29 02:57:53 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #724: GFLOPs: 11580.1082. Time: 72.0309 us. Best GFLOPs: 11768.5401
2024-04-29 02:57:53 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #725: GFLOPs: 11550.5639. Time: 72.2152 us. Best GFLOPs: 11768.5401
2024-04-29 02:57:53 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #726: GFLOPs: 11441.7580. Time: 72.9019 us. Best GFLOPs: 11768.5401
2024-04-29 02:57:53 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #727: GFLOPs: 11430.9460. Time: 72.9708 us. Best GFLOPs: 11768.5401
2024-04-29 02:57:53 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #728: GFLOPs: 11510.8093. Time: 72.4646 us. Best GFLOPs: 11768.5401
2024-04-29 02:57:53 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #729: GFLOPs: 11571.2312. Time: 72.0862 us. Best GFLOPs: 11768.5401
2024-04-29 02:57:53 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #730: GFLOPs: 11578.8477. Time: 72.0388 us. Best GFLOPs: 11768.5401
2024-04-29 02:57:53 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #731: GFLOPs: 11437.5206. Time: 72.9289 us. Best GFLOPs: 11768.5401
2024-04-29 02:57:53 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #732: GFLOPs: 11581.8786. Time: 72.0199 us. Best GFLOPs: 11768.5401
2024-04-29 02:57:53 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #733: GFLOPs: 11582.3719. Time: 72.0168 us. Best GFLOPs: 11768.5401
2024-04-29 02:57:53 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #734: GFLOPs: 11436.6786. Time: 72.9343 us. Best GFLOPs: 11768.5401
2024-04-29 02:57:53 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #735: GFLOPs: 11553.0208. Time: 72.1998 us. Best GFLOPs: 11768.5401
2024-04-29 02:57:53 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #736: GFLOPs: 11461.8425. Time: 72.7741 us. Best GFLOPs: 11768.5401
2024-04-29 02:57:53 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #737: GFLOPs: 11525.9972. Time: 72.3691 us. Best GFLOPs: 11768.5401
2024-04-29 02:57:53 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #738: GFLOPs: 11579.3579. Time: 72.0356 us. Best GFLOPs: 11768.5401
2024-04-29 02:57:53 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #739: GFLOPs: 11431.1518. Time: 72.9695 us. Best GFLOPs: 11768.5401
2024-04-29 02:57:53 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #740: GFLOPs: 11618.4091. Time: 71.7935 us. Best GFLOPs: 11768.5401
2024-04-29 02:57:53 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #741: GFLOPs: 11578.2674. Time: 72.0424 us. Best GFLOPs: 11768.5401
2024-04-29 02:57:53 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #742: GFLOPs: 11576.9080. Time: 72.0508 us. Best GFLOPs: 11768.5401
2024-04-29 02:57:53 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #743: GFLOPs: 11650.2856. Time: 71.5970 us. Best GFLOPs: 11768.5401
2024-04-29 02:57:53 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #744: GFLOPs: 11550.6777. Time: 72.2144 us. Best GFLOPs: 11768.5401
2024-04-29 02:57:53 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #745: GFLOPs: 11434.6478. Time: 72.9472 us. Best GFLOPs: 11768.5401
2024-04-29 02:57:53 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #746: GFLOPs: 11430.8133. Time: 72.9717 us. Best GFLOPs: 11768.5401
2024-04-29 02:57:53 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #747: GFLOPs: 11564.3640. Time: 72.1290 us. Best GFLOPs: 11768.5401
2024-04-29 02:57:53 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #748: GFLOPs: 11495.5440. Time: 72.5608 us. Best GFLOPs: 11768.5401
2024-04-29 02:57:53 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #749: GFLOPs: 11409.0112. Time: 73.1111 us. Best GFLOPs: 11768.5401
2024-04-29 02:57:53 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #750: GFLOPs: 11540.9824. Time: 72.2751 us. Best GFLOPs: 11768.5401
2024-04-29 02:57:53 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #751: GFLOPs: 11609.2171. Time: 71.8503 us. Best GFLOPs: 11768.5401
2024-04-29 02:57:53 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #752: GFLOPs: 11583.7995. Time: 72.0080 us. Best GFLOPs: 11768.5401
2024-04-29 02:57:53 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #753: GFLOPs: 11472.4453. Time: 72.7069 us. Best GFLOPs: 11768.5401
2024-04-29 02:57:53 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #754: GFLOPs: 11534.9699. Time: 72.3128 us. Best GFLOPs: 11768.5401
2024-04-29 02:57:53 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #755: GFLOPs: 11502.3264. Time: 72.5180 us. Best GFLOPs: 11768.5401
2024-04-29 02:57:53 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #756: GFLOPs: 11552.3883. Time: 72.2038 us. Best GFLOPs: 11768.5401
2024-04-29 02:57:53 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #757: GFLOPs: 10254.8285. Time: 81.3398 us. Best GFLOPs: 11768.5401
2024-04-29 02:57:53 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #758: GFLOPs: 11543.7406. Time: 72.2578 us. Best GFLOPs: 11768.5401
2024-04-29 02:57:53 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #759: GFLOPs: 11345.3166. Time: 73.5216 us. Best GFLOPs: 11768.5401
2024-04-29 02:57:53 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #760: GFLOPs: 11493.6296. Time: 72.5729 us. Best GFLOPs: 11768.5401
2024-04-29 02:57:53 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #761: GFLOPs: 11569.4009. Time: 72.0976 us. Best GFLOPs: 11768.5401
2024-04-29 02:57:53 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #762: GFLOPs: 11461.2160. Time: 72.7781 us. Best GFLOPs: 11768.5401
2024-04-29 02:57:53 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #763: GFLOPs: 11384.6876. Time: 73.2673 us. Best GFLOPs: 11768.5401
2024-04-29 02:57:53 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #764: GFLOPs: 11100.5488. Time: 75.1428 us. Best GFLOPs: 11768.5401
2024-04-29 02:57:53 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #765: GFLOPs: 11571.8031. Time: 72.0826 us. Best GFLOPs: 11768.5401
2024-04-29 02:57:54 [INFO] [task_scheduler.cc:121] [Task #2: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #766: Error in building:
LocalBuilder: Timeout, killed after 30.0 seconds
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(64), T.int64(112), T.int64(112)), "float32"), p1: T.Buffer((T.int64(6), T.int64(6), T.int64(64), T.int64(128)), "float32"), p2: T.Buffer((T.int64(1), T.int64(128), T.int64(1), T.int64(1)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(128), T.int64(112), T.int64(112)), "float32")):
        T.func_attr({"layout_free_buffers": [1], "tir.noalias": T.bool(True)})
        # with T.block("root"):
        input_tile_local = T.alloc_buffer((T.int64(64), T.int64(784), T.int64(6), T.int64(6)), scope="local")
        data_pack = T.alloc_buffer((T.int64(6), T.int64(6), T.int64(64), T.int64(784)))
        bgemm = T.alloc_buffer((T.int64(6), T.int64(6), T.int64(128), T.int64(784)))
        inverse_local = T.alloc_buffer((T.int64(128), T.int64(784), T.int64(4), T.int64(4)), scope="local")
        data_pack_local = T.alloc_buffer((T.int64(6), T.int64(6), T.int64(64), T.int64(784)), scope="local")
        bgemm_local = T.alloc_buffer((T.int64(6), T.int64(6), T.int64(128), T.int64(784)), scope="local")
        data_pack_shared = T.alloc_buffer((T.int64(6), T.int64(6), T.int64(64), T.int64(784)), scope="shared")
        p1_shared = T.alloc_buffer((T.int64(6), T.int64(6), T.int64(64), T.int64(128)), scope="shared")
        for ci_p_fused_0 in T.thread_binding(T.int64(196), thread="blockIdx.x", annotations={"pragma_auto_unroll_max_step": 1024, "pragma_unroll_explicit": 1}):
            for ci_p_fused_1 in T.thread_binding(T.int64(256), thread="threadIdx.x"):
                for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(1), T.int64(6), T.int64(6)):
                    with T.block("input_tile"):
                        v_ci = T.axis.spatial(T.int64(64), (ci_p_fused_0 * T.int64(256) + ci_p_fused_1) // T.int64(784) + ax0)
                        v_p = T.axis.spatial(T.int64(784), (ci_p_fused_0 * T.int64(256) + ci_p_fused_1) % T.int64(784) + ax1)
                        v_eps, v_nu = T.axis.remap("SS", [ax2, ax3])
                        T.reads(p0[v_p // T.int64(784), v_ci, v_p % T.int64(784) // T.int64(28) * T.int64(4) + v_eps - T.int64(1), v_p % T.int64(28) * T.int64(4) + v_nu - T.int64(1)])
                        T.writes(input_tile_local[v_ci, v_p, v_eps, v_nu])
                        T.block_attr({"schedule_rule": "None"})
                        input_tile_local[v_ci, v_p, v_eps, v_nu] = T.if_then_else(T.int64(1) <= v_p % T.int64(784) // T.int64(28) * T.int64(4) + v_eps and v_p % T.int64(784) // T.int64(28) * T.int64(4) + v_eps < T.int64(113) and T.int64(1) <= v_p % T.int64(28) * T.int64(4) + v_nu and v_p % T.int64(28) * T.int64(4) + v_nu < T.int64(113), p0[v_p // T.int64(784), v_ci, v_p % T.int64(784) // T.int64(28) * T.int64(4) + v_eps - T.int64(1), v_p % T.int64(28) * T.int64(4) + v_nu - T.int64(1)], T.float32(0))
                for eps in T.unroll(T.int64(6)):
                    for nu in T.unroll(T.int64(6)):
                        with T.block("data_pack_init"):
                            v_eps, v_nu = T.axis.remap("SS", [eps, nu])
                            v_ci = T.axis.spatial(T.int64(64), (ci_p_fused_0 * T.int64(256) + ci_p_fused_1) // T.int64(784))
                            v_p = T.axis.spatial(T.int64(784), (ci_p_fused_0 * T.int64(256) + ci_p_fused_1) % T.int64(784))
                            T.reads()
                            T.writes(data_pack_local[v_eps, v_nu, v_ci, v_p])
                            T.block_attr({"schedule_rule": "conv2d_nchw_winograd_data_pack"})
                            data_pack_local[v_eps, v_nu, v_ci, v_p] = T.float32(0)
                        for r_a in T.unroll(T.int64(6)):
                            for r_b in T.unroll(T.int64(6)):
                                with T.block("data_pack_update"):
                                    v_eps, v_nu = T.axis.remap("SS", [eps, nu])
                                    v_ci = T.axis.spatial(T.int64(64), (ci_p_fused_0 * T.int64(256) + ci_p_fused_1) // T.int64(784))
                                    v_p = T.axis.spatial(T.int64(784), (ci_p_fused_0 * T.int64(256) + ci_p_fused_1) % T.int64(784))
                                    v_r_a, v_r_b = T.axis.remap("RR", [r_a, r_b])
                                    T.reads(data_pack_local[v_eps, v_nu, v_ci, v_p], input_tile_local[v_ci, v_p, v_r_a, v_r_b])
                                    T.writes(data_pack_local[v_eps, v_nu, v_ci, v_p])
                                    T.block_attr({"schedule_rule": "conv2d_nchw_winograd_data_pack"})
                                    data_pack_local[v_eps, v_nu, v_ci, v_p] = data_pack_local[v_eps, v_nu, v_ci, v_p] + input_tile_local[v_ci, v_p, v_r_a, v_r_b] * T.Select(v_r_a % T.int64(6) == T.int64(5) and v_eps % T.int64(6) == T.int64(5), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(5) and v_eps % T.int64(6) == T.int64(4), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(5) and v_eps % T.int64(6) == T.int64(3), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(5) and v_eps % T.int64(6) == T.int64(2), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(5) and v_eps % T.int64(6) == T.int64(1), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(5) and v_eps % T.int64(6) == T.int64(0), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(4) and v_eps % T.int64(6) == T.int64(5), T.float32(1.5), T.Select(v_r_a % T.int64(6) == T.int64(4) and v_eps % T.int64(6) == T.int64(4), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(4) and v_eps % T.int64(6) == T.int64(3), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(4) and v_eps % T.int64(6) == T.int64(2), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(4) and v_eps % T.int64(6) == T.int64(1), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(4) and v_eps % T.int64(6) == T.int64(0), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(3) and v_eps % T.int64(6) == T.int64(5), T.float32(-2), T.Select(v_r_a % T.int64(6) == T.int64(3) and v_eps % T.int64(6) == T.int64(4), T.float32(-0.5), T.Select(v_r_a % T.int64(6) == T.int64(3) and v_eps % T.int64(6) == T.int64(3), T.float32(2), T.Select(v_r_a % T.int64(6) == T.int64(3) and v_eps % T.int64(6) == T.int64(2), T.float32(2.5), T.Select(v_r_a % T.int64(6) == T.int64(3) and v_eps % T.int64(6) == T.int64(1), T.float32(0.5), T.Select(v_r_a % T.int64(6) == T.int64(3) and v_eps % T.int64(6) == T.int64(0), T.float32(1.5), T.Select(v_r_a % T.int64(6) == T.int64(2) and v_eps % T.int64(6) == T.int64(5), T.float32(-1.5), T.Select(v_r_a % T.int64(6) == T.int64(2) and v_eps % T.int64(6) == T.int64(4), T.float32(-1), T.Select(v_r_a % T.int64(6) == T.int64(2) and v_eps % T.int64(6) == T.int64(3), T.float32(-1), T.Select(v_r_a % T.int64(6) == T.int64(2) and v_eps % T.int64(6) == T.int64(2), T.float32(0.5), T.Select(v_r_a % T.int64(6) == T.int64(2) and v_eps % T.int64(6) == T.int64(1), T.float32(-2.5), T.Select(v_r_a % T.int64(6) == T.int64(2) and v_eps % T.int64(6) == T.int64(0), T.float32(-2), T.Select(v_r_a % T.int64(6) == T.int64(1) and v_eps % T.int64(6) == T.int64(5), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(1) and v_eps % T.int64(6) == T.int64(4), T.float32(0.5), T.Select(v_r_a % T.int64(6) == T.int64(1) and v_eps % T.int64(6) == T.int64(3), T.float32(-2), T.Select(v_r_a % T.int64(6) == T.int64(1) and v_eps % T.int64(6) == T.int64(2), T.float32(-1), T.Select(v_r_a % T.int64(6) == T.int64(1) and v_eps % T.int64(6) == T.int64(1), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(1) and v_eps % T.int64(6) == T.int64(0), T.float32(-1.5), T.Select(v_r_a % T.int64(6) == T.int64(0) and v_eps % T.int64(6) == T.int64(5), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(0) and v_eps % T.int64(6) == T.int64(4), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(0) and v_eps % T.int64(6) == T.int64(3), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(0) and v_eps % T.int64(6) == T.int64(2), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(0) and v_eps % T.int64(6) == T.int64(1), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(0) and v_eps % T.int64(6) == T.int64(0), T.float32(1), T.float32(0))))))))))))))))))))))))))))))))))))) * T.Select(v_r_b % T.int64(6) == T.int64(5) and v_nu % T.int64(6) == T.int64(5), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(5) and v_nu % T.int64(6) == T.int64(4), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(5) and v_nu % T.int64(6) == T.int64(3), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(5) and v_nu % T.int64(6) == T.int64(2), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(5) and v_nu % T.int64(6) == T.int64(1), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(5) and v_nu % T.int64(6) == T.int64(0), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(4) and v_nu % T.int64(6) == T.int64(5), T.float32(1.5), T.Select(v_r_b % T.int64(6) == T.int64(4) and v_nu % T.int64(6) == T.int64(4), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(4) and v_nu % T.int64(6) == T.int64(3), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(4) and v_nu % T.int64(6) == T.int64(2), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(4) and v_nu % T.int64(6) == T.int64(1), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(4) and v_nu % T.int64(6) == T.int64(0), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(3) and v_nu % T.int64(6) == T.int64(5), T.float32(-2), T.Select(v_r_b % T.int64(6) == T.int64(3) and v_nu % T.int64(6) == T.int64(4), T.float32(-0.5), T.Select(v_r_b % T.int64(6) == T.int64(3) and v_nu % T.int64(6) == T.int64(3), T.float32(2), T.Select(v_r_b % T.int64(6) == T.int64(3) and v_nu % T.int64(6) == T.int64(2), T.float32(2.5), T.Select(v_r_b % T.int64(6) == T.int64(3) and v_nu % T.int64(6) == T.int64(1), T.float32(0.5), T.Select(v_r_b % T.int64(6) == T.int64(3) and v_nu % T.int64(6) == T.int64(0), T.float32(1.5), T.Select(v_r_b % T.int64(6) == T.int64(2) and v_nu % T.int64(6) == T.int64(5), T.float32(-1.5), T.Select(v_r_b % T.int64(6) == T.int64(2) and v_nu % T.int64(6) == T.int64(4), T.float32(-1), T.Select(v_r_b % T.int64(6) == T.int64(2) and v_nu % T.int64(6) == T.int64(3), T.float32(-1), T.Select(v_r_b % T.int64(6) == T.int64(2) and v_nu % T.int64(6) == T.int64(2), T.float32(0.5), T.Select(v_r_b % T.int64(6) == T.int64(2) and v_nu % T.int64(6) == T.int64(1), T.float32(-2.5), T.Select(v_r_b % T.int64(6) == T.int64(2) and v_nu % T.int64(6) == T.int64(0), T.float32(-2), T.Select(v_r_b % T.int64(6) == T.int64(1) and v_nu % T.int64(6) == T.int64(5), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(1) and v_nu % T.int64(6) == T.int64(4), T.float32(0.5), T.Select(v_r_b % T.int64(6) == T.int64(1) and v_nu % T.int64(6) == T.int64(3), T.float32(-2), T.Select(v_r_b % T.int64(6) == T.int64(1) and v_nu % T.int64(6) == T.int64(2), T.float32(-1), T.Select(v_r_b % T.int64(6) == T.int64(1) and v_nu % T.int64(6) == T.int64(1), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(1) and v_nu % T.int64(6) == T.int64(0), T.float32(-1.5), T.Select(v_r_b % T.int64(6) == T.int64(0) and v_nu % T.int64(6) == T.int64(5), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(0) and v_nu % T.int64(6) == T.int64(4), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(0) and v_nu % T.int64(6) == T.int64(3), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(0) and v_nu % T.int64(6) == T.int64(2), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(0) and v_nu % T.int64(6) == T.int64(1), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(0) and v_nu % T.int64(6) == T.int64(0), T.float32(1), T.float32(0)))))))))))))))))))))))))))))))))))))
                for ax0, ax1, ax2, ax3 in T.grid(T.int64(6), T.int64(6), T.int64(1), T.int64(1)):
                    with T.block("data_pack_local"):
                        v0, v1 = T.axis.remap("SS", [ax0, ax1])
                        v2 = T.axis.spatial(T.int64(64), (ci_p_fused_0 * T.int64(256) + ci_p_fused_1) // T.int64(784) + ax2)
                        v3 = T.axis.spatial(T.int64(784), (ci_p_fused_0 * T.int64(256) + ci_p_fused_1) % T.int64(784) + ax3)
                        T.reads(data_pack_local[v0, v1, v2, v3])
                        T.writes(data_pack[v0, v1, v2, v3])
                        data_pack[v0, v1, v2, v3] = data_pack_local[v0, v1, v2, v3]
        for eps_0_nu_0_co_0_p_0_fused in T.thread_binding(T.int64(8), thread="blockIdx.x", annotations={"pragma_auto_unroll_max_step": 1024, "pragma_unroll_explicit": 1}):
            for eps_1_nu_1_co_1_p_1_fused in T.thread_binding(T.int64(336), thread="vthread.x"):
                for eps_2_nu_2_co_2_p_2_fused in T.thread_binding(T.int64(112), thread="threadIdx.x"):
                    for eps_3_init, nu_3_init, co_3_init, p_3_init, eps_4_init, nu_4_init, co_4_init, p_4_init in T.grid(T.int64(1), T.int64(1), T.int64(4), T.int64(1), T.int64(1), T.int64(3), T.int64(1), T.int64(1)):
                        with T.block("bgemm_init"):
                            v_eps = T.axis.spatial(T.int64(6), eps_1_nu_1_co_1_p_1_fused // T.int64(112) * T.int64(2) + eps_2_nu_2_co_2_p_2_fused // T.int64(56) + eps_3_init + eps_4_init)
                            v_nu = T.axis.spatial(T.int64(6), eps_1_nu_1_co_1_p_1_fused % T.int64(112) // T.int64(56) * T.int64(3) + nu_3_init * T.int64(3) + nu_4_init)
                            v_co = T.axis.spatial(T.int64(128), eps_1_nu_1_co_1_p_1_fused % T.int64(56) // T.int64(14) * T.int64(32) + eps_2_nu_2_co_2_p_2_fused % T.int64(56) // T.int64(7) * T.int64(4) + co_3_init + co_4_init)
                            v_p = T.axis.spatial(T.int64(784), eps_0_nu_0_co_0_p_0_fused * T.int64(98) + eps_1_nu_1_co_1_p_1_fused % T.int64(14) * T.int64(7) + eps_2_nu_2_co_2_p_2_fused % T.int64(7) + p_3_init + p_4_init)
                            T.reads()
                            T.writes(bgemm_local[v_eps, v_nu, v_co, v_p])
                            T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 32, "meta_schedule.tiling_structure": "SSSRRSRS"})
                            bgemm_local[v_eps, v_nu, v_co, v_p] = T.float32(0)
                    for ci_0 in range(T.int64(64)):
                        for ax0_ax1_ax2_ax3_fused_0 in range(T.int64(8)):
                            for ax0_ax1_ax2_ax3_fused_1 in T.thread_binding(T.int64(112), thread="threadIdx.x"):
                                for ax0_ax1_ax2_ax3_fused_2 in T.vectorized(T.int64(4)):
                                    with T.block("data_pack_shared"):
                                        v0 = T.axis.spatial(T.int64(6), (ax0_ax1_ax2_ax3_fused_0 * T.int64(448) + ax0_ax1_ax2_ax3_fused_1 * T.int64(4) + ax0_ax1_ax2_ax3_fused_2) // T.int64(588))
                                        v1 = T.axis.spatial(T.int64(6), (ax0_ax1_ax2_ax3_fused_0 * T.int64(448) + ax0_ax1_ax2_ax3_fused_1 * T.int64(4) + ax0_ax1_ax2_ax3_fused_2) % T.int64(588) // T.int64(98))
                                        v2 = T.axis.spatial(T.int64(64), ci_0)
                                        v3 = T.axis.spatial(T.int64(784), eps_0_nu_0_co_0_p_0_fused * T.int64(98) + (ax0_ax1_ax2_ax3_fused_0 * T.int64(448) + ax0_ax1_ax2_ax3_fused_1 * T.int64(4) + ax0_ax1_ax2_ax3_fused_2) % T.int64(98))
                                        T.where((ax0_ax1_ax2_ax3_fused_0 * T.int64(112) + ax0_ax1_ax2_ax3_fused_1) * T.int64(4) + ax0_ax1_ax2_ax3_fused_2 < T.int64(3528))
                                        T.reads(data_pack[v0, v1, v2, v3])
                                        T.writes(data_pack_shared[v0, v1, v2, v3])
                                        data_pack_shared[v0, v1, v2, v3] = data_pack[v0, v1, v2, v3]
                        for ax0_ax1_ax2_ax3_fused_0 in range(T.int64(21)):
                            for ax0_ax1_ax2_ax3_fused_1 in T.thread_binding(T.int64(112), thread="threadIdx.x"):
                                for ax0_ax1_ax2_ax3_fused_2 in T.vectorized(T.int64(2)):
                                    with T.block("p1_shared"):
                                        v0 = T.axis.spatial(T.int64(6), (ax0_ax1_ax2_ax3_fused_0 * T.int64(224) + ax0_ax1_ax2_ax3_fused_1 * T.int64(2) + ax0_ax1_ax2_ax3_fused_2) // T.int64(768))
                                        v1 = T.axis.spatial(T.int64(6), (ax0_ax1_ax2_ax3_fused_0 * T.int64(224) + ax0_ax1_ax2_ax3_fused_1 * T.int64(2) + ax0_ax1_ax2_ax3_fused_2) % T.int64(768) // T.int64(128))
                                        v2 = T.axis.spatial(T.int64(64), ci_0)
                                        v3 = T.axis.spatial(T.int64(128), (ax0_ax1_ax2_ax3_fused_0 * T.int64(224) + ax0_ax1_ax2_ax3_fused_1 * T.int64(2) + ax0_ax1_ax2_ax3_fused_2) % T.int64(128))
                                        T.where((ax0_ax1_ax2_ax3_fused_0 * T.int64(112) + ax0_ax1_ax2_ax3_fused_1) * T.int64(2) + ax0_ax1_ax2_ax3_fused_2 < T.int64(4608))
                                        T.reads(p1[v0, v1, v2, v3])
                                        T.writes(p1_shared[v0, v1, v2, v3])
                                        p1_shared[v0, v1, v2, v3] = p1[v0, v1, v2, v3]
                        for ci_1, eps_3, nu_3, co_3, p_3, ci_2, eps_4, nu_4, co_4, p_4 in T.grid(T.int64(1), T.int64(1), T.int64(1), T.int64(4), T.int64(1), T.int64(1), T.int64(1), T.int64(3), T.int64(1), T.int64(1)):
                            with T.block("bgemm_update"):
                                v_eps = T.axis.spatial(T.int64(6), eps_1_nu_1_co_1_p_1_fused // T.int64(112) * T.int64(2) + eps_2_nu_2_co_2_p_2_fused // T.int64(56) + eps_3 + eps_4)
                                v_nu = T.axis.spatial(T.int64(6), eps_1_nu_1_co_1_p_1_fused % T.int64(112) // T.int64(56) * T.int64(3) + nu_3 * T.int64(3) + nu_4)
                                v_co = T.axis.spatial(T.int64(128), eps_1_nu_1_co_1_p_1_fused % T.int64(56) // T.int64(14) * T.int64(32) + eps_2_nu_2_co_2_p_2_fused % T.int64(56) // T.int64(7) * T.int64(4) + co_3 + co_4)
                                v_p = T.axis.spatial(T.int64(784), eps_0_nu_0_co_0_p_0_fused * T.int64(98) + eps_1_nu_1_co_1_p_1_fused % T.int64(14) * T.int64(7) + eps_2_nu_2_co_2_p_2_fused % T.int64(7) + p_3 + p_4)
                                v_ci = T.axis.reduce(T.int64(64), ci_0 + ci_1 + ci_2)
                                T.reads(bgemm_local[v_eps, v_nu, v_co, v_p], data_pack_shared[v_eps, v_nu, v_ci, v_p], p1_shared[v_eps, v_nu, v_ci, v_co])
                                T.writes(bgemm_local[v_eps, v_nu, v_co, v_p])
                                T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 32, "meta_schedule.tiling_structure": "SSSRRSRS"})
                                bgemm_local[v_eps, v_nu, v_co, v_p] = bgemm_local[v_eps, v_nu, v_co, v_p] + data_pack_shared[v_eps, v_nu, v_ci, v_p] * p1_shared[v_eps, v_nu, v_ci, v_co]
                    for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(3), T.int64(4), T.int64(1)):
                        with T.block("bgemm_local"):
                            v0 = T.axis.spatial(T.int64(6), eps_1_nu_1_co_1_p_1_fused // T.int64(112) * T.int64(2) + eps_2_nu_2_co_2_p_2_fused // T.int64(56) + ax0)
                            v1 = T.axis.spatial(T.int64(6), eps_1_nu_1_co_1_p_1_fused % T.int64(112) // T.int64(56) * T.int64(3) + ax1)
                            v2 = T.axis.spatial(T.int64(128), eps_1_nu_1_co_1_p_1_fused % T.int64(56) // T.int64(14) * T.int64(32) + eps_2_nu_2_co_2_p_2_fused % T.int64(56) // T.int64(7) * T.int64(4) + ax2)
                            v3 = T.axis.spatial(T.int64(784), eps_0_nu_0_co_0_p_0_fused * T.int64(98) + eps_1_nu_1_co_1_p_1_fused % T.int64(14) * T.int64(7) + eps_2_nu_2_co_2_p_2_fused % T.int64(7) + ax3)
                            T.reads(bgemm_local[v0, v1, v2, v3])
                            T.writes(bgemm[v0, v1, v2, v3])
                            bgemm[v0, v1, v2, v3] = bgemm_local[v0, v1, v2, v3]
        for n_co_h_0_w_0_fused_0 in T.thread_binding(T.int64(98), thread="blockIdx.x", annotations={"pragma_auto_unroll_max_step": 1024, "pragma_unroll_explicit": 1}):
            for n_co_h_0_w_0_fused_1 in T.thread_binding(T.int64(1024), thread="threadIdx.x"):
                for ax0, ax1 in T.grid(T.int64(1), T.int64(1)):
                    for ax2 in T.unroll(T.int64(4)):
                        for ax3 in T.unroll(T.int64(4)):
                            with T.block("inverse_init"):
                                v_co = T.axis.spatial(T.int64(128), (n_co_h_0_w_0_fused_0 * T.int64(1024) + n_co_h_0_w_0_fused_1) // T.int64(784) + ax0)
                                v_p = T.axis.spatial(T.int64(784), (n_co_h_0_w_0_fused_0 * T.int64(1024) + n_co_h_0_w_0_fused_1) % T.int64(784) + ax1)
                                v_vh, v_vw = T.axis.remap("SS", [ax2, ax3])
                                T.reads()
                                T.writes(inverse_local[v_co, v_p, v_vh, v_vw])
                                T.block_attr({"schedule_rule": "conv2d_nchw_winograd_inverse"})
                                inverse_local[v_co, v_p, v_vh, v_vw] = T.float32(0)
                            for ax4 in T.unroll(T.int64(6)):
                                for ax5 in T.unroll(T.int64(6)):
                                    with T.block("inverse_update"):
                                        v_co = T.axis.spatial(T.int64(128), (n_co_h_0_w_0_fused_0 * T.int64(1024) + n_co_h_0_w_0_fused_1) // T.int64(784) + ax0)
                                        v_p = T.axis.spatial(T.int64(784), (n_co_h_0_w_0_fused_0 * T.int64(1024) + n_co_h_0_w_0_fused_1) % T.int64(784) + ax1)
                                        v_vh, v_vw, v_r_a, v_r_b = T.axis.remap("SSRR", [ax2, ax3, ax4, ax5])
                                        T.reads(inverse_local[v_co, v_p, v_vh, v_vw], bgemm[v_r_a, v_r_b, v_co, v_p])
                                        T.writes(inverse_local[v_co, v_p, v_vh, v_vw])
                                        T.block_attr({"schedule_rule": "conv2d_nchw_winograd_inverse"})
                                        inverse_local[v_co, v_p, v_vh, v_vw] = inverse_local[v_co, v_p, v_vh, v_vw] + bgemm[v_r_a, v_r_b, v_co, v_p] * T.Select(v_r_a % T.int64(6) == T.int64(5) and v_vh % T.int64(4) == T.int64(3), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(5) and v_vh % T.int64(4) == T.int64(2), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(5) and v_vh % T.int64(4) == T.int64(1), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(5) and v_vh % T.int64(4) == T.int64(0), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(4) and v_vh % T.int64(4) == T.int64(3), T.float32(-8), T.Select(v_r_a % T.int64(6) == T.int64(4) and v_vh % T.int64(4) == T.int64(2), T.float32(4), T.Select(v_r_a % T.int64(6) == T.int64(4) and v_vh % T.int64(4) == T.int64(1), T.float32(-2), T.Select(v_r_a % T.int64(6) == T.int64(4) and v_vh % T.int64(4) == T.int64(0), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(3) and v_vh % T.int64(4) == T.int64(3), T.float32(0.125), T.Select(v_r_a % T.int64(6) == T.int64(3) and v_vh % T.int64(4) == T.int64(2), T.float32(0.25), T.Select(v_r_a % T.int64(6) == T.int64(3) and v_vh % T.int64(4) == T.int64(1), T.float32(0.5), T.Select(v_r_a % T.int64(6) == T.int64(3) and v_vh % T.int64(4) == T.int64(0), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(2) and v_vh % T.int64(4) == T.int64(3), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(2) and v_vh % T.int64(4) == T.int64(2), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(2) and v_vh % T.int64(4) == T.int64(1), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(2) and v_vh % T.int64(4) == T.int64(0), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(1) and v_vh % T.int64(4) == T.int64(3), T.float32(-1), T.Select(v_r_a % T.int64(6) == T.int64(1) and v_vh % T.int64(4) == T.int64(2), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(1) and v_vh % T.int64(4) == T.int64(1), T.float32(-1), T.Select(v_r_a % T.int64(6) == T.int64(1) and v_vh % T.int64(4) == T.int64(0), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(0) and v_vh % T.int64(4) == T.int64(3), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(0) and v_vh % T.int64(4) == T.int64(2), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(0) and v_vh % T.int64(4) == T.int64(1), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(0) and v_vh % T.int64(4) == T.int64(0), T.float32(1), T.float32(0))))))))))))))))))))))))) * T.Select(v_r_b % T.int64(6) == T.int64(5) and v_vw % T.int64(4) == T.int64(3), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(5) and v_vw % T.int64(4) == T.int64(2), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(5) and v_vw % T.int64(4) == T.int64(1), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(5) and v_vw % T.int64(4) == T.int64(0), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(4) and v_vw % T.int64(4) == T.int64(3), T.float32(-8), T.Select(v_r_b % T.int64(6) == T.int64(4) and v_vw % T.int64(4) == T.int64(2), T.float32(4), T.Select(v_r_b % T.int64(6) == T.int64(4) and v_vw % T.int64(4) == T.int64(1), T.float32(-2), T.Select(v_r_b % T.int64(6) == T.int64(4) and v_vw % T.int64(4) == T.int64(0), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(3) and v_vw % T.int64(4) == T.int64(3), T.float32(0.125), T.Select(v_r_b % T.int64(6) == T.int64(3) and v_vw % T.int64(4) == T.int64(2), T.float32(0.25), T.Select(v_r_b % T.int64(6) == T.int64(3) and v_vw % T.int64(4) == T.int64(1), T.float32(0.5), T.Select(v_r_b % T.int64(6) == T.int64(3) and v_vw % T.int64(4) == T.int64(0), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(2) and v_vw % T.int64(4) == T.int64(3), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(2) and v_vw % T.int64(4) == T.int64(2), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(2) and v_vw % T.int64(4) == T.int64(1), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(2) and v_vw % T.int64(4) == T.int64(0), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(1) and v_vw % T.int64(4) == T.int64(3), T.float32(-1), T.Select(v_r_b % T.int64(6) == T.int64(1) and v_vw % T.int64(4) == T.int64(2), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(1) and v_vw % T.int64(4) == T.int64(1), T.float32(-1), T.Select(v_r_b % T.int64(6) == T.int64(1) and v_vw % T.int64(4) == T.int64(0), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(0) and v_vw % T.int64(4) == T.int64(3), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(0) and v_vw % T.int64(4) == T.int64(2), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(0) and v_vw % T.int64(4) == T.int64(1), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(0) and v_vw % T.int64(4) == T.int64(0), T.float32(1), T.float32(0)))))))))))))))))))))))))
                for h_1, w_1 in T.grid(T.int64(4), T.int64(4)):
                    with T.block("conv2d_winograd"):
                        v_n = T.axis.spatial(T.int64(1), T.int64(0))
                        v_co = T.axis.spatial(T.int64(128), (n_co_h_0_w_0_fused_0 * T.int64(1024) + n_co_h_0_w_0_fused_1) // T.int64(784))
                        v_h = T.axis.spatial(T.int64(112), (n_co_h_0_w_0_fused_0 * T.int64(1024) + n_co_h_0_w_0_fused_1) % T.int64(784) // T.int64(28) * T.int64(4) + h_1)
                        v_w = T.axis.spatial(T.int64(112), (n_co_h_0_w_0_fused_0 * T.int64(1024) + n_co_h_0_w_0_fused_1) % T.int64(28) * T.int64(4) + w_1)
                        T.reads(inverse_local[v_co, v_n * T.int64(784) + v_h // T.int64(4) * T.int64(28) + v_w // T.int64(4), v_h % T.int64(4), v_w % T.int64(4)], p2[v_n, v_co, T.int64(0), T.int64(0)])
                        T.writes(T_relu[v_n, v_co, v_h, v_w])
                        T_relu[v_n, v_co, v_h, v_w] = T.max(inverse_local[v_co, v_n * T.int64(784) + v_h // T.int64(4) * T.int64(28) + v_w // T.int64(4), v_h % T.int64(4), v_w % T.int64(4)] + p2[v_n, v_co, T.int64(0), T.int64(0)], T.float32(0))
b0 = sch.get_block(name="data_pack", func_name="main")
b1 = sch.get_block(name="bgemm", func_name="main")
b2 = sch.get_block(name="inverse", func_name="main")
b3 = sch.get_block(name="conv2d_winograd", func_name="main")
b4 = sch.get_block(name="T_add", func_name="main")
b5 = sch.get_block(name="T_relu", func_name="main")
b6 = sch.get_block(name="root", func_name="main")
b7, b8 = sch.get_producers(block=b2)
sch.compute_inline(block=b8)
b9, = sch.get_consumers(block=b2)
l10, l11, l12, l13 = sch.get_loops(block=b9)
l14, l15 = sch.split(loop=l12, factors=[None, 4], preserve_unit_iters=True)
l16, l17 = sch.split(loop=l13, factors=[None, 4], preserve_unit_iters=True)
sch.reorder(l14, l16, l15, l17)
sch.compute_at(block=b2, loop=l16, preserve_unit_loops=True, index=-1)
sch.set_scope(block=b2, buffer_index=0, storage_scope="local")
l18, l19, l20, l21, l22, l23, l24, l25, l26, l27 = sch.get_loops(block=b2)
sch.unroll(loop=l24)
sch.unroll(loop=l25)
sch.unroll(loop=l26)
sch.unroll(loop=l27)
b28, b29 = sch.get_producers(block=b0)
sch.compute_inline(block=b29)
b30, = sch.get_producers(block=b28)
l31, l32, l33, l34, l35, l36 = sch.get_loops(block=b0)
sch.reorder(l33, l34, l31, l32, l35, l36)
sch.unroll(loop=l31)
sch.unroll(loop=l32)
sch.unroll(loop=l35)
sch.unroll(loop=l36)
l37 = sch.fuse(l33, l34, preserve_unit_iters=True)
v38 = sch.sample_categorical(candidates=[32, 64, 128, 256, 512, 1024], probs=[0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666], decision=3)
l39, l40 = sch.split(loop=l37, factors=[None, v38], preserve_unit_iters=True)
sch.bind(loop=l39, thread_axis="blockIdx.x")
sch.bind(loop=l40, thread_axis="threadIdx.x")
b41 = sch.cache_write(block=b0, write_buffer_index=0, storage_scope="local")
sch.reverse_compute_at(block=b41, loop=l40, preserve_unit_loops=True, index=-1)
sch.compute_at(block=b28, loop=l40, preserve_unit_loops=True, index=-1)
sch.set_scope(block=b28, buffer_index=0, storage_scope="local")
sch.compute_inline(block=b30)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSSRRSRS")
l42, l43, l44, l45, l46 = sch.get_loops(block=b1)
v47, v48, v49, v50, v51 = sch.sample_perfect_tile(loop=l42, n=5, max_innermost_factor=64, decision=[1, 3, 2, 1, 1])
l52, l53, l54, l55, l56 = sch.split(loop=l42, factors=[v47, v48, v49, v50, v51], preserve_unit_iters=True)
v57, v58, v59, v60, v61 = sch.sample_perfect_tile(loop=l43, n=5, max_innermost_factor=64, decision=[1, 2, 1, 1, 3])
l62, l63, l64, l65, l66 = sch.split(loop=l43, factors=[v57, v58, v59, v60, v61], preserve_unit_iters=True)
v67, v68, v69, v70, v71 = sch.sample_perfect_tile(loop=l44, n=5, max_innermost_factor=64, decision=[1, 4, 8, 4, 1])
l72, l73, l74, l75, l76 = sch.split(loop=l44, factors=[v67, v68, v69, v70, v71], preserve_unit_iters=True)
v77, v78, v79, v80, v81 = sch.sample_perfect_tile(loop=l45, n=5, max_innermost_factor=64, decision=[8, 14, 7, 1, 1])
l82, l83, l84, l85, l86 = sch.split(loop=l45, factors=[v77, v78, v79, v80, v81], preserve_unit_iters=True)
v87, v88, v89 = sch.sample_perfect_tile(loop=l46, n=3, max_innermost_factor=64, decision=[64, 1, 1])
l90, l91, l92 = sch.split(loop=l46, factors=[v87, v88, v89], preserve_unit_iters=True)
sch.reorder(l52, l62, l72, l82, l53, l63, l73, l83, l54, l64, l74, l84, l90, l91, l55, l65, l75, l85, l92, l56, l66, l76, l86)
l93 = sch.fuse(l52, l62, l72, l82, preserve_unit_iters=True)
sch.bind(loop=l93, thread_axis="blockIdx.x")
l94 = sch.fuse(l53, l63, l73, l83, preserve_unit_iters=True)
sch.bind(loop=l94, thread_axis="vthread.x")
l95 = sch.fuse(l54, l64, l74, l84, preserve_unit_iters=True)
sch.bind(loop=l95, thread_axis="threadIdx.x")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_low_inclusive", ann_val=32)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_high_inclusive", ann_val=1024)
b96 = sch.cache_write(block=b1, write_buffer_index=0, storage_scope="local")
sch.reverse_compute_at(block=b96, loop=l95, preserve_unit_loops=True, index=-1)
b97 = sch.cache_read(block=b1, read_buffer_index=0, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b97, loop=l90, preserve_unit_loops=True, index=-1)
l98, l99, l100, l101, l102, l103, l104, l105 = sch.get_loops(block=b97)
l106 = sch.fuse(l102, l103, l104, l105, preserve_unit_iters=True)
v107 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b97, ann_key="meta_schedule.cooperative_fetch", ann_val=v107)
b108 = sch.cache_read(block=b1, read_buffer_index=1, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b108, loop=l90, preserve_unit_loops=True, index=-1)
l109, l110, l111, l112, l113, l114, l115, l116 = sch.get_loops(block=b108)
l117 = sch.fuse(l113, l114, l115, l116, preserve_unit_iters=True)
v118 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=1)
sch.annotate(block_or_loop=b108, ann_key="meta_schedule.cooperative_fetch", ann_val=v118)
sch.reverse_compute_inline(block=b5)
sch.reverse_compute_inline(block=b4)
v119 = sch.sample_categorical(candidates=[0, 16, 64, 512, 1024], probs=[0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001], decision=4)
sch.annotate(block_or_loop=b6, ann_key="meta_schedule.unroll_explicit", ann_val=v119)
l120, l121, l122, l123, l124, l125 = sch.get_loops(block=b3)
l126 = sch.fuse(l120, l121, l122, l123, preserve_unit_iters=True)
v127 = sch.sample_categorical(candidates=[32, 64, 128, 256, 512, 1024], probs=[0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666], decision=5)
l128, l129 = sch.split(loop=l126, factors=[None, v127], preserve_unit_iters=True)
sch.bind(loop=l128, thread_axis="blockIdx.x")
sch.bind(loop=l129, thread_axis="threadIdx.x")
sch.enter_postproc()
sch.unannotate(block_or_loop=b97, ann_key="meta_schedule.cooperative_fetch")
l130, l131, l132, l133, l134 = sch.get_loops(block=b97)
l135, l136, l137 = sch.split(loop=l134, factors=[None, 112, 4], preserve_unit_iters=True)
sch.vectorize(loop=l137)
sch.bind(loop=l136, thread_axis="threadIdx.x")
sch.unannotate(block_or_loop=b108, ann_key="meta_schedule.cooperative_fetch")
l138, l139, l140, l141, l142 = sch.get_loops(block=b108)
l143, l144, l145 = sch.split(loop=l142, factors=[None, 112, 2], preserve_unit_iters=True)
sch.vectorize(loop=l145)
sch.bind(loop=l144, thread_axis="threadIdx.x")
b146 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b146, ann_key="meta_schedule.unroll_explicit")
b147, b148, b149, b150, b151, b152, b153, b154, b155 = sch.get_child_blocks(b146)
l156, l157, l158, l159, l160, l161 = sch.get_loops(block=b147)
l162, l163, l164, l165, l166, l167 = sch.get_loops(block=b148)
sch.annotate(block_or_loop=l162, ann_key="pragma_auto_unroll_max_step", ann_val=1024)
sch.annotate(block_or_loop=l162, ann_key="pragma_unroll_explicit", ann_val=1)
l168, l169, l170, l171, l172, l173 = sch.get_loops(block=b149)
l174, l175, l176, l177, l178, l179, l180 = sch.get_loops(block=b150)
l181, l182, l183, l184, l185, l186, l187 = sch.get_loops(block=b151)
l188, l189, l190, l191, l192, l193, l194, l195, l196, l197, l198, l199, l200, l201 = sch.get_loops(block=b152)
sch.annotate(block_or_loop=l188, ann_key="pragma_auto_unroll_max_step", ann_val=1024)
sch.annotate(block_or_loop=l188, ann_key="pragma_unroll_explicit", ann_val=1)
l202, l203, l204, l205, l206, l207, l208 = sch.get_loops(block=b153)
l209, l210, l211, l212, l213, l214, l215, l216 = sch.get_loops(block=b154)
sch.annotate(block_or_loop=l209, ann_key="pragma_auto_unroll_max_step", ann_val=1024)
sch.annotate(block_or_loop=l209, ann_key="pragma_unroll_explicit", ann_val=1)
l217, l218, l219, l220 = sch.get_loops(block=b155)
b221 = sch.get_block(name="data_pack", func_name="main")
l222, l223, l224, l225, l226, l227 = sch.get_loops(block=b221)
b228 = sch.decompose_reduction(block=b221, loop=l226)
b229 = sch.get_block(name="bgemm", func_name="main")
l230, l231, l232, l233, l234, l235, l236, l237, l238, l239, l240, l241, l242, l243 = sch.get_loops(block=b229)
b244 = sch.decompose_reduction(block=b229, loop=l233)
b245 = sch.get_block(name="inverse", func_name="main")
l246, l247, l248, l249, l250, l251, l252, l253 = sch.get_loops(block=b245)
b254 = sch.decompose_reduction(block=b245, loop=l252)
2024-04-29 02:57:54 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #767: GFLOPs: 4193.4212. Time: 198.9130 us. Best GFLOPs: 11768.5401
2024-04-29 02:57:54 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #768: GFLOPs: 158.1425. Time: 5274.5216 us. Best GFLOPs: 11768.5401
2024-04-29 03:23:56 [INFO] [evolutionary_search.cc:713] Generating candidates......
2024-04-29 03:23:59 [INFO] [evolutionary_search.cc:715] Picked top 102 candidate(s) from database
2024-04-29 03:24:06 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x43caf38)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x6f9f348)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x70a6218)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x9268ff8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x9288ea8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x70936f8)]: 401 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x3ab3ae8)]: 0 failure(s)
2024-04-29 03:24:13 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x43caf38)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x6f9f348)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x70a6218)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x9268ff8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x9288ea8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x70936f8)]: 802 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x3ab3ae8)]: 0 failure(s)
2024-04-29 03:24:20 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x43caf38)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x6f9f348)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x70a6218)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x9268ff8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x9288ea8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x70936f8)]: 1202 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x3ab3ae8)]: 0 failure(s)
2024-04-29 03:24:27 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x43caf38)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x6f9f348)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x70a6218)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x9268ff8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x9288ea8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x70936f8)]: 1605 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x3ab3ae8)]: 0 failure(s)
2024-04-29 03:24:34 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x43caf38)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x6f9f348)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x70a6218)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x9268ff8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x9288ea8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x70936f8)]: 2012 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x3ab3ae8)]: 0 failure(s)
2024-04-29 03:24:41 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x43caf38)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x6f9f348)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x70a6218)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x9268ff8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x9288ea8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x70936f8)]: 2416 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x3ab3ae8)]: 0 failure(s)
2024-04-29 03:24:48 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x43caf38)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x6f9f348)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x70a6218)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x9268ff8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x9288ea8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x70936f8)]: 2820 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x3ab3ae8)]: 0 failure(s)
2024-04-29 03:24:48 [INFO] [evolutionary_search.cc:723] Sampled 50 candidate(s)
2024-04-29 03:25:12 [INFO] [evolutionary_search.cc:621] Evolve iter #0 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x43caf38)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x6f9f348)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x70a6218)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x9268ff8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x9288ea8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x70936f8)]: 230 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x3ab3ae8)]: 0 failure(s)
2024-04-29 03:25:38 [INFO] [evolutionary_search.cc:621] Evolve iter #1 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x43caf38)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x6f9f348)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x70a6218)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x9268ff8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x9288ea8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x70936f8)]: 233 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x3ab3ae8)]: 0 failure(s)
2024-04-29 03:26:06 [INFO] [evolutionary_search.cc:621] Evolve iter #2 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x43caf38)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x6f9f348)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x70a6218)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x9268ff8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x9288ea8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x70936f8)]: 232 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x3ab3ae8)]: 0 failure(s)
2024-04-29 03:26:32 [INFO] [evolutionary_search.cc:621] Evolve iter #3 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x43caf38)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x6f9f348)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x70a6218)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x9268ff8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x9288ea8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x70936f8)]: 222 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x3ab3ae8)]: 0 failure(s)
2024-04-29 03:26:38 [INFO] [evolutionary_search.cc:649] Scores of the best 64 candidates:
[1 : 16]:	1.0411  1.0292  1.0163  1.0155  0.9963  0.9949  0.9919  0.9907  0.9886  0.9876  0.9872  0.9870  0.9865  0.9865  0.9864  0.9855
[17 : 32]:	0.9855  0.9853  0.9853  0.9852  0.9849  0.9847  0.9844  0.9843  0.9842  0.9834  0.9829  0.9825  0.9822  0.9822  0.9817  0.9817
[33 : 48]:	0.9813  0.9813  0.9812  0.9811  0.9807  0.9807  0.9806  0.9806  0.9801  0.9800  0.9799  0.9799  0.9799  0.9796  0.9791  0.9789
[49 : 64]:	0.9788  0.9784  0.9784  0.9783  0.9783  0.9783  0.9783  0.9782  0.9782  0.9779  0.9777  0.9776  0.9775  0.9775  0.9773  0.9772
2024-04-29 03:26:38 [INFO] [evolutionary_search.cc:727] Got 64 candidate(s) with evolutionary search
2024-04-29 03:26:38 [INFO] [evolutionary_search.cc:730] Sending 64 candidates(s) for measurement
2024-04-29 03:27:53 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #769: GFLOPs: 11515.3939. Time: 72.4357 us. Best GFLOPs: 11768.5401
2024-04-29 03:27:53 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #770: GFLOPs: 11416.8396. Time: 73.0610 us. Best GFLOPs: 11768.5401
2024-04-29 03:27:53 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #771: GFLOPs: 11426.7602. Time: 72.9976 us. Best GFLOPs: 11768.5401
2024-04-29 03:27:53 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #772: GFLOPs: 11407.7158. Time: 73.1194 us. Best GFLOPs: 11768.5401
2024-04-29 03:27:53 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #773: GFLOPs: 11694.8309. Time: 71.3243 us. Best GFLOPs: 11768.5401
2024-04-29 03:27:53 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #774: GFLOPs: 11543.1579. Time: 72.2615 us. Best GFLOPs: 11768.5401
2024-04-29 03:27:53 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #775: GFLOPs: 11577.8707. Time: 72.0448 us. Best GFLOPs: 11768.5401
2024-04-29 03:27:53 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #776: GFLOPs: 11565.6907. Time: 72.1207 us. Best GFLOPs: 11768.5401
2024-04-29 03:27:53 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #777: GFLOPs: 11575.6936. Time: 72.0584 us. Best GFLOPs: 11768.5401
2024-04-29 03:27:53 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #778: GFLOPs: 11738.3117. Time: 71.0601 us. Best GFLOPs: 11768.5401
2024-04-29 03:27:53 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #779: GFLOPs: 11509.0625. Time: 72.4756 us. Best GFLOPs: 11768.5401
2024-04-29 03:27:53 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #780: GFLOPs: 11407.4149. Time: 73.1214 us. Best GFLOPs: 11768.5401
2024-04-29 03:27:53 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #781: GFLOPs: 11564.3722. Time: 72.1289 us. Best GFLOPs: 11768.5401
2024-04-29 03:27:53 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #782: GFLOPs: 11458.9065. Time: 72.7928 us. Best GFLOPs: 11768.5401
2024-04-29 03:27:53 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #783: GFLOPs: 11508.6695. Time: 72.4780 us. Best GFLOPs: 11768.5401
2024-04-29 03:27:53 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #784: GFLOPs: 11517.3688. Time: 72.4233 us. Best GFLOPs: 11768.5401
2024-04-29 03:27:53 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #785: GFLOPs: 11483.3688. Time: 72.6377 us. Best GFLOPs: 11768.5401
2024-04-29 03:27:53 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #786: GFLOPs: 11548.6867. Time: 72.2269 us. Best GFLOPs: 11768.5401
2024-04-29 03:27:53 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #787: GFLOPs: 11515.9216. Time: 72.4324 us. Best GFLOPs: 11768.5401
2024-04-29 03:27:53 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #788: GFLOPs: 11530.1522. Time: 72.3430 us. Best GFLOPs: 11768.5401
2024-04-29 03:27:53 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #789: GFLOPs: 10666.7218. Time: 78.1989 us. Best GFLOPs: 11768.5401
2024-04-29 03:27:53 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #790: GFLOPs: 11551.9546. Time: 72.2065 us. Best GFLOPs: 11768.5401
2024-04-29 03:27:53 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #791: GFLOPs: 11517.2647. Time: 72.4240 us. Best GFLOPs: 11768.5401
2024-04-29 03:27:53 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #792: GFLOPs: 11546.0072. Time: 72.2437 us. Best GFLOPs: 11768.5401
2024-04-29 03:27:53 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #793: GFLOPs: 11516.2156. Time: 72.4305 us. Best GFLOPs: 11768.5401
2024-04-29 03:27:53 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #794: GFLOPs: 11494.9689. Time: 72.5644 us. Best GFLOPs: 11768.5401
2024-04-29 03:27:53 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #795: GFLOPs: 11427.5456. Time: 72.9926 us. Best GFLOPs: 11768.5401
2024-04-29 03:27:53 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #796: GFLOPs: 11518.5048. Time: 72.4162 us. Best GFLOPs: 11768.5401
2024-04-29 03:27:53 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #797: GFLOPs: 11485.1118. Time: 72.6267 us. Best GFLOPs: 11768.5401
2024-04-29 03:27:53 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #798: GFLOPs: 11501.4817. Time: 72.5233 us. Best GFLOPs: 11768.5401
2024-04-29 03:27:53 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #799: GFLOPs: 11682.3465. Time: 71.4005 us. Best GFLOPs: 11768.5401
2024-04-29 03:27:53 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #800: GFLOPs: 11562.7880. Time: 72.1388 us. Best GFLOPs: 11768.5401
2024-04-29 03:27:53 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #801: GFLOPs: 11574.2054. Time: 72.0677 us. Best GFLOPs: 11768.5401
2024-04-29 03:27:53 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #802: GFLOPs: 11270.1952. Time: 74.0117 us. Best GFLOPs: 11768.5401
2024-04-29 03:27:53 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #803: GFLOPs: 11558.3973. Time: 72.1662 us. Best GFLOPs: 11768.5401
2024-04-29 03:27:53 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #804: GFLOPs: 11353.7337. Time: 73.4671 us. Best GFLOPs: 11768.5401
2024-04-29 03:27:53 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #805: GFLOPs: 11530.8944. Time: 72.3383 us. Best GFLOPs: 11768.5401
2024-04-29 03:27:53 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #806: GFLOPs: 11565.4006. Time: 72.1225 us. Best GFLOPs: 11768.5401
2024-04-29 03:27:53 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #807: GFLOPs: 11539.4052. Time: 72.2850 us. Best GFLOPs: 11768.5401
2024-04-29 03:27:53 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #808: GFLOPs: 11555.0716. Time: 72.1870 us. Best GFLOPs: 11768.5401
2024-04-29 03:27:53 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #809: GFLOPs: 11548.1115. Time: 72.2305 us. Best GFLOPs: 11768.5401
2024-04-29 03:27:53 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #810: GFLOPs: 11554.3262. Time: 72.1916 us. Best GFLOPs: 11768.5401
2024-04-29 03:27:53 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #811: GFLOPs: 11556.9765. Time: 72.1751 us. Best GFLOPs: 11768.5401
2024-04-29 03:27:53 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #812: GFLOPs: 11562.7880. Time: 72.1388 us. Best GFLOPs: 11768.5401
2024-04-29 03:27:53 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #813: GFLOPs: 11491.8351. Time: 72.5842 us. Best GFLOPs: 11768.5401
2024-04-29 03:27:53 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #814: GFLOPs: 11558.6141. Time: 72.1649 us. Best GFLOPs: 11768.5401
2024-04-29 03:27:53 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #815: GFLOPs: 11599.7335. Time: 71.9091 us. Best GFLOPs: 11768.5401
2024-04-29 03:27:53 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #816: GFLOPs: 11608.7773. Time: 71.8530 us. Best GFLOPs: 11768.5401
2024-04-29 03:27:53 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #817: GFLOPs: 11535.8784. Time: 72.3071 us. Best GFLOPs: 11768.5401
2024-04-29 03:27:53 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #818: GFLOPs: 11533.3789. Time: 72.3228 us. Best GFLOPs: 11768.5401
2024-04-29 03:27:53 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #819: GFLOPs: 11555.8745. Time: 72.1820 us. Best GFLOPs: 11768.5401
2024-04-29 03:27:53 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #820: GFLOPs: 11562.8869. Time: 72.1382 us. Best GFLOPs: 11768.5401
2024-04-29 03:27:53 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #821: GFLOPs: 11503.6437. Time: 72.5097 us. Best GFLOPs: 11768.5401
2024-04-29 03:27:53 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #822: GFLOPs: 11257.5727. Time: 74.0946 us. Best GFLOPs: 11768.5401
2024-04-29 03:27:53 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #823: GFLOPs: 11312.2308. Time: 73.7366 us. Best GFLOPs: 11768.5401
2024-04-29 03:27:53 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #824: GFLOPs: 11545.5516. Time: 72.2465 us. Best GFLOPs: 11768.5401
2024-04-29 03:27:53 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #825: GFLOPs: 11571.5738. Time: 72.0840 us. Best GFLOPs: 11768.5401
2024-04-29 03:27:53 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #826: GFLOPs: 11539.7325. Time: 72.2829 us. Best GFLOPs: 11768.5401
2024-04-29 03:27:53 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #827: GFLOPs: 11494.4034. Time: 72.5680 us. Best GFLOPs: 11768.5401
2024-04-29 03:27:53 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #828: GFLOPs: 11529.3385. Time: 72.3481 us. Best GFLOPs: 11768.5401
2024-04-29 03:27:53 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #829: GFLOPs: 11558.0919. Time: 72.1681 us. Best GFLOPs: 11768.5401
2024-04-29 03:27:53 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #830: GFLOPs: 4561.8097. Time: 182.8498 us. Best GFLOPs: 11768.5401
2024-04-29 03:27:53 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #831: GFLOPs: 8356.1295. Time: 99.8220 us. Best GFLOPs: 11768.5401
2024-04-29 03:27:53 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #832: GFLOPs: 952.7398. Time: 875.5022 us. Best GFLOPs: 11768.5401
2024-04-29 03:56:39 [INFO] [evolutionary_search.cc:713] Generating candidates......
2024-04-29 03:56:42 [INFO] [evolutionary_search.cc:715] Picked top 102 candidate(s) from database
2024-04-29 03:56:49 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x43caf38)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x6f9f348)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x70a6218)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x9268ff8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x9288ea8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x70936f8)]: 404 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x3ab3ae8)]: 0 failure(s)
2024-04-29 03:56:56 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x43caf38)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x6f9f348)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x70a6218)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x9268ff8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x9288ea8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x70936f8)]: 809 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x3ab3ae8)]: 0 failure(s)
2024-04-29 03:57:04 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x43caf38)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x6f9f348)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x70a6218)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x9268ff8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x9288ea8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x70936f8)]: 1213 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x3ab3ae8)]: 0 failure(s)
2024-04-29 03:57:11 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x43caf38)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x6f9f348)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x70a6218)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x9268ff8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x9288ea8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x70936f8)]: 1616 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x3ab3ae8)]: 0 failure(s)
2024-04-29 03:57:18 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x43caf38)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x6f9f348)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x70a6218)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x9268ff8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x9288ea8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x70936f8)]: 2020 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x3ab3ae8)]: 0 failure(s)
2024-04-29 03:57:25 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x43caf38)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x6f9f348)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x70a6218)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x9268ff8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x9288ea8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x70936f8)]: 2418 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x3ab3ae8)]: 0 failure(s)
2024-04-29 03:57:32 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x43caf38)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x6f9f348)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x70a6218)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x9268ff8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x9288ea8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x70936f8)]: 2822 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x3ab3ae8)]: 0 failure(s)
2024-04-29 03:57:39 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x43caf38)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x6f9f348)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x70a6218)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x9268ff8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x9288ea8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x70936f8)]: 3219 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x3ab3ae8)]: 0 failure(s)
2024-04-29 03:57:39 [INFO] [evolutionary_search.cc:723] Sampled 61 candidate(s)
2024-04-29 03:58:05 [INFO] [evolutionary_search.cc:621] Evolve iter #0 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x43caf38)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x6f9f348)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x70a6218)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x9268ff8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x9288ea8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x70936f8)]: 255 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x3ab3ae8)]: 0 failure(s)
2024-04-29 03:58:32 [INFO] [evolutionary_search.cc:621] Evolve iter #1 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x43caf38)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x6f9f348)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x70a6218)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x9268ff8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x9288ea8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x70936f8)]: 240 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x3ab3ae8)]: 0 failure(s)
2024-04-29 03:58:56 [INFO] [evolutionary_search.cc:621] Evolve iter #2 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x43caf38)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x6f9f348)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x70a6218)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x9268ff8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x9288ea8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x70936f8)]: 213 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x3ab3ae8)]: 0 failure(s)
2024-04-29 03:59:21 [INFO] [evolutionary_search.cc:621] Evolve iter #3 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x43caf38)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x6f9f348)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x70a6218)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x9268ff8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x9288ea8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x70936f8)]: 246 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x3ab3ae8)]: 0 failure(s)
2024-04-29 03:59:26 [INFO] [evolutionary_search.cc:649] Scores of the best 64 candidates:
[1 : 16]:	0.9955  0.9955  0.9945  0.9936  0.9926  0.9923  0.9920  0.9917  0.9907  0.9907  0.9900  0.9900  0.9897  0.9896  0.9895  0.9888
[17 : 32]:	0.9888  0.9882  0.9881  0.9879  0.9879  0.9878  0.9876  0.9874  0.9868  0.9867  0.9866  0.9856  0.9855  0.9854  0.9854  0.9849
[33 : 48]:	0.9848  0.9842  0.9842  0.9841  0.9839  0.9836  0.9836  0.9835  0.9835  0.9834  0.9834  0.9834  0.9833  0.9833  0.9831  0.9831
[49 : 64]:	0.9829  0.9829  0.9828  0.9824  0.9824  0.9823  0.9823  0.9818  0.9817  0.9807  0.9806  0.9805  0.9804  0.9802  0.9802  0.9801
2024-04-29 03:59:26 [INFO] [evolutionary_search.cc:727] Got 64 candidate(s) with evolutionary search
2024-04-29 03:59:26 [INFO] [evolutionary_search.cc:730] Sending 64 candidates(s) for measurement
2024-04-29 04:00:49 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #833: GFLOPs: 11628.3676. Time: 71.7320 us. Best GFLOPs: 11768.5401
2024-04-29 04:00:49 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #834: GFLOPs: 11481.4668. Time: 72.6498 us. Best GFLOPs: 11768.5401
2024-04-29 04:00:49 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #835: GFLOPs: 11503.4253. Time: 72.5111 us. Best GFLOPs: 11768.5401
2024-04-29 04:00:49 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #836: GFLOPs: 11578.6178. Time: 72.0402 us. Best GFLOPs: 11768.5401
2024-04-29 04:00:49 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #837: GFLOPs: 11399.6696. Time: 73.1711 us. Best GFLOPs: 11768.5401
2024-04-29 04:00:49 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #838: GFLOPs: 11568.0000. Time: 72.1063 us. Best GFLOPs: 11768.5401
2024-04-29 04:00:49 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #839: GFLOPs: 11504.3525. Time: 72.5052 us. Best GFLOPs: 11768.5401
2024-04-29 04:00:49 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #840: GFLOPs: 11563.7677. Time: 72.1327 us. Best GFLOPs: 11768.5401
2024-04-29 04:00:49 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #841: GFLOPs: 11542.9276. Time: 72.2629 us. Best GFLOPs: 11768.5401
2024-04-29 04:00:49 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #842: GFLOPs: 11407.2102. Time: 73.1227 us. Best GFLOPs: 11768.5401
2024-04-29 04:00:49 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #843: GFLOPs: 11486.7722. Time: 72.6162 us. Best GFLOPs: 11768.5401
2024-04-29 04:00:49 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #844: GFLOPs: 11653.2224. Time: 71.5790 us. Best GFLOPs: 11768.5401
2024-04-29 04:00:49 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #845: GFLOPs: 11602.0672. Time: 71.8946 us. Best GFLOPs: 11768.5401
2024-04-29 04:00:49 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #846: GFLOPs: 11557.6752. Time: 72.1707 us. Best GFLOPs: 11768.5401
2024-04-29 04:00:49 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #847: GFLOPs: 11594.0712. Time: 71.9442 us. Best GFLOPs: 11768.5401
2024-04-29 04:00:49 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #848: GFLOPs: 11396.0601. Time: 73.1942 us. Best GFLOPs: 11768.5401
2024-04-29 04:00:49 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #849: GFLOPs: 11397.9110. Time: 73.1823 us. Best GFLOPs: 11768.5401
2024-04-29 04:00:49 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #850: GFLOPs: 11484.8300. Time: 72.6285 us. Best GFLOPs: 11768.5401
2024-04-29 04:00:49 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #851: GFLOPs: 11736.8610. Time: 71.0689 us. Best GFLOPs: 11768.5401
2024-04-29 04:00:49 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #852: GFLOPs: 11711.6188. Time: 71.2221 us. Best GFLOPs: 11768.5401
2024-04-29 04:00:49 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #853: GFLOPs: 11576.3168. Time: 72.0545 us. Best GFLOPs: 11768.5401
2024-04-29 04:00:49 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #854: GFLOPs: 11503.3082. Time: 72.5118 us. Best GFLOPs: 11768.5401
2024-04-29 04:00:49 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #855: GFLOPs: 11516.5851. Time: 72.4282 us. Best GFLOPs: 11768.5401
2024-04-29 04:00:49 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #856: GFLOPs: 11569.6301. Time: 72.0962 us. Best GFLOPs: 11768.5401
2024-04-29 04:00:49 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #857: GFLOPs: 11172.4584. Time: 74.6591 us. Best GFLOPs: 11768.5401
2024-04-29 04:00:49 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #858: GFLOPs: 11449.2174. Time: 72.8544 us. Best GFLOPs: 11768.5401
2024-04-29 04:00:49 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #859: GFLOPs: 11558.8904. Time: 72.1631 us. Best GFLOPs: 11768.5401
2024-04-29 04:00:49 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #860: GFLOPs: 11644.2531. Time: 71.6341 us. Best GFLOPs: 11768.5401
2024-04-29 04:00:49 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #861: GFLOPs: 11541.6806. Time: 72.2707 us. Best GFLOPs: 11768.5401
2024-04-29 04:00:49 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #862: GFLOPs: 11486.2031. Time: 72.6198 us. Best GFLOPs: 11768.5401
2024-04-29 04:00:49 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #863: GFLOPs: 11405.9746. Time: 73.1306 us. Best GFLOPs: 11768.5401
2024-04-29 04:00:49 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #864: GFLOPs: 11529.8162. Time: 72.3451 us. Best GFLOPs: 11768.5401
2024-04-29 04:00:49 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #865: GFLOPs: 11574.7352. Time: 72.0644 us. Best GFLOPs: 11768.5401
2024-04-29 04:00:49 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #866: GFLOPs: 11426.9827. Time: 72.9962 us. Best GFLOPs: 11768.5401
2024-04-29 04:00:49 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #867: GFLOPs: 11556.8808. Time: 72.1757 us. Best GFLOPs: 11768.5401
2024-04-29 04:00:49 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #868: GFLOPs: 11473.4690. Time: 72.7004 us. Best GFLOPs: 11768.5401
2024-04-29 04:00:49 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #869: GFLOPs: 11594.2763. Time: 71.9429 us. Best GFLOPs: 11768.5401
2024-04-29 04:00:49 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #870: GFLOPs: 11684.1827. Time: 71.3893 us. Best GFLOPs: 11768.5401
2024-04-29 04:00:49 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #871: GFLOPs: 11554.8371. Time: 72.1885 us. Best GFLOPs: 11768.5401
2024-04-29 04:00:49 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #872: GFLOPs: 10339.2787. Time: 80.6754 us. Best GFLOPs: 11768.5401
2024-04-29 04:00:49 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #873: GFLOPs: 11701.9786. Time: 71.2808 us. Best GFLOPs: 11768.5401
2024-04-29 04:00:49 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #874: GFLOPs: 11777.5527. Time: 70.8234 us. Best GFLOPs: 11777.5527
2024-04-29 04:00:49 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #875: GFLOPs: 11694.1138. Time: 71.3287 us. Best GFLOPs: 11777.5527
2024-04-29 04:00:49 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #876: GFLOPs: 11695.5163. Time: 71.3201 us. Best GFLOPs: 11777.5527
2024-04-29 04:00:49 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #877: GFLOPs: 11667.9583. Time: 71.4886 us. Best GFLOPs: 11777.5527
2024-04-29 04:00:49 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #878: GFLOPs: 11735.1596. Time: 71.0792 us. Best GFLOPs: 11777.5527
2024-04-29 04:00:49 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #879: GFLOPs: 11555.5945. Time: 72.1837 us. Best GFLOPs: 11777.5527
2024-04-29 04:00:49 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #880: GFLOPs: 11708.9655. Time: 71.2382 us. Best GFLOPs: 11777.5527
2024-04-29 04:00:49 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #881: GFLOPs: 11687.1209. Time: 71.3714 us. Best GFLOPs: 11777.5527
2024-04-29 04:00:49 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #882: GFLOPs: 11704.3504. Time: 71.2663 us. Best GFLOPs: 11777.5527
2024-04-29 04:00:49 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #883: GFLOPs: 11701.5956. Time: 71.2831 us. Best GFLOPs: 11777.5527
2024-04-29 04:00:49 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #884: GFLOPs: 11449.1046. Time: 72.8551 us. Best GFLOPs: 11777.5527
2024-04-29 04:00:49 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #885: GFLOPs: 11686.1668. Time: 71.3772 us. Best GFLOPs: 11777.5527
2024-04-29 04:00:49 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #886: GFLOPs: 11694.2523. Time: 71.3278 us. Best GFLOPs: 11777.5527
2024-04-29 04:00:49 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #887: GFLOPs: 11283.2788. Time: 73.9258 us. Best GFLOPs: 11777.5527
2024-04-29 04:00:49 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #888: GFLOPs: 11668.3049. Time: 71.4865 us. Best GFLOPs: 11777.5527
2024-04-29 04:00:49 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #889: GFLOPs: 11585.6004. Time: 71.9968 us. Best GFLOPs: 11777.5527
2024-04-29 04:00:49 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #890: GFLOPs: 11705.4862. Time: 71.2594 us. Best GFLOPs: 11777.5527
2024-04-29 04:00:49 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #891: GFLOPs: 11407.9957. Time: 73.1176 us. Best GFLOPs: 11777.5527
2024-04-29 04:00:49 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #892: GFLOPs: 11549.8803. Time: 72.2194 us. Best GFLOPs: 11777.5527
2024-04-29 04:00:49 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #893: GFLOPs: 11609.9231. Time: 71.8459 us. Best GFLOPs: 11777.5527
2024-04-29 04:00:49 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #894: GFLOPs: 2784.5448. Time: 299.5555 us. Best GFLOPs: 11777.5527
2024-04-29 04:00:49 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #895: GFLOPs: 4732.9804. Time: 176.2369 us. Best GFLOPs: 11777.5527
2024-04-29 04:00:49 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #896: GFLOPs: 113.5388. Time: 7346.6148 us. Best GFLOPs: 11777.5527
