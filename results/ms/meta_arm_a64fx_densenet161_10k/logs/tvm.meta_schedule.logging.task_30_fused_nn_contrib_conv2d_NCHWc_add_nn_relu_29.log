2024-04-29 02:30:17 [INFO] [task_scheduler.cc:160] Initializing Task #30: "fused_nn_contrib_conv2d_NCHWc_add_nn_relu_29"
2024-04-29 02:30:17 [INFO] [task_scheduler.cc:35] 
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(456), T.int64(14), T.int64(14), T.int64(4)), "float32"), p1: T.Buffer((T.int64(48), T.int64(456), T.int64(1), T.int64(1), T.int64(4), T.int64(4)), "float32"), p2: T.Buffer((T.int64(1), T.int64(48), T.int64(1), T.int64(1), T.int64(4)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(48), T.int64(14), T.int64(14), T.int64(4)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        conv2d_NCHWc = T.alloc_buffer((T.int64(1), T.int64(48), T.int64(14), T.int64(14), T.int64(4)))
        T_add = T.alloc_buffer((T.int64(1), T.int64(48), T.int64(14), T.int64(14), T.int64(4)))
        for n, oc_chunk, oh, ow, oc_block, ic, kh, kw in T.grid(T.int64(1), T.int64(48), T.int64(14), T.int64(14), T.int64(4), T.int64(1824), T.int64(1), T.int64(1)):
            with T.block("conv2d_NCHWc"):
                v_n, v_oc_chunk, v_oh, v_ow, v_oc_block, v_ic, v_kh, v_kw = T.axis.remap("SSSSSRRR", [n, oc_chunk, oh, ow, oc_block, ic, kh, kw])
                T.reads(p0[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)], p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block])
                T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                with T.init():
                    conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = T.float32(0)
                conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] + p0[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)] * p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block]
        for ax0, ax1, ax2, ax3, ax4 in T.grid(T.int64(1), T.int64(48), T.int64(14), T.int64(14), T.int64(4)):
            with T.block("T_add"):
                v_ax0, v_ax1, v_ax2, v_ax3, v_ax4 = T.axis.remap("SSSSS", [ax0, ax1, ax2, ax3, ax4])
                T.reads(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4])
                T.writes(T_add[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                T_add[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] + p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4]
        for ax0, ax1, ax2, ax3, ax4 in T.grid(T.int64(1), T.int64(48), T.int64(14), T.int64(14), T.int64(4)):
            with T.block("T_relu"):
                v_ax0, v_ax1, v_ax2, v_ax3, v_ax4 = T.axis.remap("SSSSS", [ax0, ax1, ax2, ax3, ax4])
                T.reads(T_add[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                T.writes(T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.max(T_add[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], T.float32(0))
2024-04-29 02:30:17 [INFO] [task_scheduler.cc:164] Total 3 design space(s) generated
2024-04-29 02:30:17 [INFO] [task_scheduler.cc:170] Design space #0:
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(456), T.int64(14), T.int64(14), T.int64(4)), "float32"), p1: T.Buffer((T.int64(48), T.int64(456), T.int64(1), T.int64(1), T.int64(4), T.int64(4)), "float32"), p2: T.Buffer((T.int64(1), T.int64(48), T.int64(1), T.int64(1), T.int64(4)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(48), T.int64(14), T.int64(14), T.int64(4)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        with T.block("root"):
            T.reads()
            T.writes()
            T.block_attr({"meta_schedule.parallel": 768, "meta_schedule.unroll_explicit": 64, "meta_schedule.vectorize": 64})
            conv2d_NCHWc = T.alloc_buffer((T.int64(1), T.int64(48), T.int64(14), T.int64(14), T.int64(4)))
            for n_0, oc_chunk_0, oh_0, ow_0, oc_block_0, n_1, oc_chunk_1, oh_1, ow_1, oc_block_1, ic_0, kh_0, kw_0, n_2, oc_chunk_2, oh_2, ow_2, oc_block_2, ic_1, kh_1, kw_1, n_3, oc_chunk_3, oh_3, ow_3, oc_block_3 in T.grid(T.int64(1), T.int64(12), T.int64(2), T.int64(1), T.int64(2), T.int64(1), T.int64(1), T.int64(7), T.int64(14), T.int64(2), T.int64(304), T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(1), T.int64(1), T.int64(1), T.int64(6), T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(1), T.int64(1), T.int64(1)):
                with T.block("conv2d_NCHWc"):
                    v_n = T.axis.spatial(T.int64(1), n_0 + n_1 + n_2 + n_3)
                    v_oc_chunk = T.axis.spatial(T.int64(48), oc_chunk_0 * T.int64(4) + oc_chunk_1 * T.int64(4) + oc_chunk_2 * T.int64(2) + oc_chunk_3)
                    v_oh = T.axis.spatial(T.int64(14), oh_0 * T.int64(7) + oh_1 + oh_2 + oh_3)
                    v_ow = T.axis.spatial(T.int64(14), ow_0 * T.int64(14) + ow_1 + ow_2 + ow_3)
                    v_oc_block = T.axis.spatial(T.int64(4), oc_block_0 * T.int64(2) + oc_block_1 + oc_block_2 + oc_block_3)
                    v_ic = T.axis.reduce(T.int64(1824), ic_0 * T.int64(6) + ic_1)
                    v_kh = T.axis.reduce(T.int64(1), kh_0 + kh_1)
                    v_kw = T.axis.reduce(T.int64(1), kw_0 + kw_1)
                    T.reads(p0[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)], p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block])
                    T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                    T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                    with T.init():
                        conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = T.float32(0)
                    conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] + p0[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)] * p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block]
            for ax0, ax1, ax2, ax3, ax4 in T.grid(T.int64(1), T.int64(48), T.int64(14), T.int64(14), T.int64(4)):
                with T.block("T_relu"):
                    v_ax0, v_ax1, v_ax2, v_ax3, v_ax4 = T.axis.remap("SSSSS", [ax0, ax1, ax2, ax3, ax4])
                    T.reads(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4])
                    T.writes(T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                    T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.max(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] + p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4], T.float32(0))
b0 = sch.get_block(name="conv2d_NCHWc", func_name="main")
b1 = sch.get_block(name="T_add", func_name="main")
b2 = sch.get_block(name="root", func_name="main")
sch.compute_inline(block=b1)
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.tiling_structure", ann_val="SSRSRS")
l3, l4, l5, l6, l7, l8, l9, l10 = sch.get_loops(block=b0)
v11, v12, v13, v14 = sch.sample_perfect_tile(loop=l3, n=4, max_innermost_factor=64, decision=[1, 1, 1, 1])
l15, l16, l17, l18 = sch.split(loop=l3, factors=[v11, v12, v13, v14], preserve_unit_iters=True)
v19, v20, v21, v22 = sch.sample_perfect_tile(loop=l4, n=4, max_innermost_factor=64, decision=[12, 1, 2, 2])
l23, l24, l25, l26 = sch.split(loop=l4, factors=[v19, v20, v21, v22], preserve_unit_iters=True)
v27, v28, v29, v30 = sch.sample_perfect_tile(loop=l5, n=4, max_innermost_factor=64, decision=[2, 7, 1, 1])
l31, l32, l33, l34 = sch.split(loop=l5, factors=[v27, v28, v29, v30], preserve_unit_iters=True)
v35, v36, v37, v38 = sch.sample_perfect_tile(loop=l6, n=4, max_innermost_factor=64, decision=[1, 14, 1, 1])
l39, l40, l41, l42 = sch.split(loop=l6, factors=[v35, v36, v37, v38], preserve_unit_iters=True)
v43, v44, v45, v46 = sch.sample_perfect_tile(loop=l7, n=4, max_innermost_factor=64, decision=[2, 2, 1, 1])
l47, l48, l49, l50 = sch.split(loop=l7, factors=[v43, v44, v45, v46], preserve_unit_iters=True)
v51, v52 = sch.sample_perfect_tile(loop=l8, n=2, max_innermost_factor=64, decision=[304, 6])
l53, l54 = sch.split(loop=l8, factors=[v51, v52], preserve_unit_iters=True)
v55, v56 = sch.sample_perfect_tile(loop=l9, n=2, max_innermost_factor=64, decision=[1, 1])
l57, l58 = sch.split(loop=l9, factors=[v55, v56], preserve_unit_iters=True)
v59, v60 = sch.sample_perfect_tile(loop=l10, n=2, max_innermost_factor=64, decision=[1, 1])
l61, l62 = sch.split(loop=l10, factors=[v59, v60], preserve_unit_iters=True)
sch.reorder(l15, l23, l31, l39, l47, l16, l24, l32, l40, l48, l53, l57, l61, l17, l25, l33, l41, l49, l54, l58, l62, l18, l26, l34, l42, l50)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.vectorize", ann_val=64)
v63 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=2)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.unroll_explicit", ann_val=v63)
2024-04-29 02:30:17 [INFO] [task_scheduler.cc:170] Design space #1:
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(456), T.int64(14), T.int64(14), T.int64(4)), "float32"), p1: T.Buffer((T.int64(48), T.int64(456), T.int64(1), T.int64(1), T.int64(4), T.int64(4)), "float32"), p2: T.Buffer((T.int64(1), T.int64(48), T.int64(1), T.int64(1), T.int64(4)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(48), T.int64(14), T.int64(14), T.int64(4)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        with T.block("root"):
            T.reads()
            T.writes()
            T.block_attr({"meta_schedule.parallel": 768, "meta_schedule.unroll_explicit": 16, "meta_schedule.vectorize": 64})
            conv2d_NCHWc = T.alloc_buffer((T.int64(1), T.int64(48), T.int64(14), T.int64(14), T.int64(4)))
            for n_0, oc_chunk_0, oh_0, ow_0, oc_block_0, n_1, oc_chunk_1, oh_1, ow_1, oc_block_1 in T.grid(T.int64(1), T.int64(12), T.int64(2), T.int64(1), T.int64(2), T.int64(1), T.int64(1), T.int64(7), T.int64(14), T.int64(2)):
                for ic_0, kh_0, kw_0, n_2, oc_chunk_2, oh_2, ow_2, oc_block_2, ic_1, kh_1, kw_1, n_3, oc_chunk_3, oh_3, ow_3, oc_block_3 in T.grid(T.int64(304), T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(1), T.int64(1), T.int64(1), T.int64(6), T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(1), T.int64(1), T.int64(1)):
                    with T.block("conv2d_NCHWc"):
                        v_n = T.axis.spatial(T.int64(1), n_0 + n_1 + n_2 + n_3)
                        v_oc_chunk = T.axis.spatial(T.int64(48), oc_chunk_0 * T.int64(4) + oc_chunk_1 * T.int64(4) + oc_chunk_2 * T.int64(2) + oc_chunk_3)
                        v_oh = T.axis.spatial(T.int64(14), oh_0 * T.int64(7) + oh_1 + oh_2 + oh_3)
                        v_ow = T.axis.spatial(T.int64(14), ow_0 * T.int64(14) + ow_1 + ow_2 + ow_3)
                        v_oc_block = T.axis.spatial(T.int64(4), oc_block_0 * T.int64(2) + oc_block_1 + oc_block_2 + oc_block_3)
                        v_ic = T.axis.reduce(T.int64(1824), ic_0 * T.int64(6) + ic_1)
                        v_kh = T.axis.reduce(T.int64(1), kh_0 + kh_1)
                        v_kw = T.axis.reduce(T.int64(1), kw_0 + kw_1)
                        T.reads(p0[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)], p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block])
                        T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                        T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                        with T.init():
                            conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = T.float32(0)
                        conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] + p0[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)] * p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block]
                for ax0, ax1, ax2, ax3, ax4 in T.grid(T.int64(1), T.int64(4), T.int64(1), T.int64(1), T.int64(1)):
                    with T.block("T_relu"):
                        v_ax0 = T.axis.spatial(T.int64(1), ax0)
                        v_ax1 = T.axis.spatial(T.int64(48), oc_chunk_0 * T.int64(4) + ax1)
                        v_ax2 = T.axis.spatial(T.int64(14), oh_0 * T.int64(7) + oh_1 + ax2)
                        v_ax3 = T.axis.spatial(T.int64(14), ow_1 + ax3)
                        v_ax4 = T.axis.spatial(T.int64(4), oc_block_0 * T.int64(2) + oc_block_1 + ax4)
                        T.reads(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4])
                        T.writes(T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                        T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.max(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] + p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4], T.float32(0))
b0 = sch.get_block(name="conv2d_NCHWc", func_name="main")
b1 = sch.get_block(name="T_add", func_name="main")
b2 = sch.get_block(name="root", func_name="main")
sch.compute_inline(block=b1)
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.tiling_structure", ann_val="SSRSRS")
l3, l4, l5, l6, l7, l8, l9, l10 = sch.get_loops(block=b0)
v11, v12, v13, v14 = sch.sample_perfect_tile(loop=l3, n=4, max_innermost_factor=64, decision=[1, 1, 1, 1])
l15, l16, l17, l18 = sch.split(loop=l3, factors=[v11, v12, v13, v14], preserve_unit_iters=True)
v19, v20, v21, v22 = sch.sample_perfect_tile(loop=l4, n=4, max_innermost_factor=64, decision=[12, 1, 2, 2])
l23, l24, l25, l26 = sch.split(loop=l4, factors=[v19, v20, v21, v22], preserve_unit_iters=True)
v27, v28, v29, v30 = sch.sample_perfect_tile(loop=l5, n=4, max_innermost_factor=64, decision=[2, 7, 1, 1])
l31, l32, l33, l34 = sch.split(loop=l5, factors=[v27, v28, v29, v30], preserve_unit_iters=True)
v35, v36, v37, v38 = sch.sample_perfect_tile(loop=l6, n=4, max_innermost_factor=64, decision=[1, 14, 1, 1])
l39, l40, l41, l42 = sch.split(loop=l6, factors=[v35, v36, v37, v38], preserve_unit_iters=True)
v43, v44, v45, v46 = sch.sample_perfect_tile(loop=l7, n=4, max_innermost_factor=64, decision=[2, 2, 1, 1])
l47, l48, l49, l50 = sch.split(loop=l7, factors=[v43, v44, v45, v46], preserve_unit_iters=True)
v51, v52 = sch.sample_perfect_tile(loop=l8, n=2, max_innermost_factor=64, decision=[304, 6])
l53, l54 = sch.split(loop=l8, factors=[v51, v52], preserve_unit_iters=True)
v55, v56 = sch.sample_perfect_tile(loop=l9, n=2, max_innermost_factor=64, decision=[1, 1])
l57, l58 = sch.split(loop=l9, factors=[v55, v56], preserve_unit_iters=True)
v59, v60 = sch.sample_perfect_tile(loop=l10, n=2, max_innermost_factor=64, decision=[1, 1])
l61, l62 = sch.split(loop=l10, factors=[v59, v60], preserve_unit_iters=True)
sch.reorder(l15, l23, l31, l39, l47, l16, l24, l32, l40, l48, l53, l57, l61, l17, l25, l33, l41, l49, l54, l58, l62, l18, l26, l34, l42, l50)
b63, = sch.get_consumers(block=b0)
sch.reverse_compute_at(block=b63, loop=l48, preserve_unit_loops=True, index=-1)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.vectorize", ann_val=64)
v64 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=1)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.unroll_explicit", ann_val=v64)
2024-04-29 02:30:17 [INFO] [task_scheduler.cc:170] Design space #2:
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(456), T.int64(14), T.int64(14), T.int64(4)), "float32"), p1: T.Buffer((T.int64(48), T.int64(456), T.int64(1), T.int64(1), T.int64(4), T.int64(4)), "float32"), p2: T.Buffer((T.int64(1), T.int64(48), T.int64(1), T.int64(1), T.int64(4)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(48), T.int64(14), T.int64(14), T.int64(4)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        with T.block("root"):
            T.reads()
            T.writes()
            T.block_attr({"meta_schedule.parallel": 768, "meta_schedule.unroll_explicit": 512, "meta_schedule.vectorize": 64})
            conv2d_NCHWc = T.alloc_buffer((T.int64(1), T.int64(48), T.int64(14), T.int64(14), T.int64(4)))
            for n_0, oc_chunk_0, oh_0, ow_0, oc_block_0 in T.grid(T.int64(1), T.int64(12), T.int64(2), T.int64(1), T.int64(2)):
                for n_1, oc_chunk_1, oh_1, ow_1, oc_block_1, ic_0, kh_0, kw_0, n_2, oc_chunk_2, oh_2, ow_2, oc_block_2, ic_1, kh_1, kw_1, n_3, oc_chunk_3, oh_3, ow_3, oc_block_3 in T.grid(T.int64(1), T.int64(1), T.int64(7), T.int64(14), T.int64(2), T.int64(304), T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(1), T.int64(1), T.int64(1), T.int64(6), T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(1), T.int64(1), T.int64(1)):
                    with T.block("conv2d_NCHWc"):
                        v_n = T.axis.spatial(T.int64(1), n_0 + n_1 + n_2 + n_3)
                        v_oc_chunk = T.axis.spatial(T.int64(48), oc_chunk_0 * T.int64(4) + oc_chunk_1 * T.int64(4) + oc_chunk_2 * T.int64(2) + oc_chunk_3)
                        v_oh = T.axis.spatial(T.int64(14), oh_0 * T.int64(7) + oh_1 + oh_2 + oh_3)
                        v_ow = T.axis.spatial(T.int64(14), ow_0 * T.int64(14) + ow_1 + ow_2 + ow_3)
                        v_oc_block = T.axis.spatial(T.int64(4), oc_block_0 * T.int64(2) + oc_block_1 + oc_block_2 + oc_block_3)
                        v_ic = T.axis.reduce(T.int64(1824), ic_0 * T.int64(6) + ic_1)
                        v_kh = T.axis.reduce(T.int64(1), kh_0 + kh_1)
                        v_kw = T.axis.reduce(T.int64(1), kw_0 + kw_1)
                        T.reads(p0[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)], p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block])
                        T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                        T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                        with T.init():
                            conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = T.float32(0)
                        conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] + p0[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)] * p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block]
                for ax0, ax1, ax2, ax3, ax4 in T.grid(T.int64(1), T.int64(4), T.int64(7), T.int64(14), T.int64(2)):
                    with T.block("T_relu"):
                        v_ax0 = T.axis.spatial(T.int64(1), ax0)
                        v_ax1 = T.axis.spatial(T.int64(48), oc_chunk_0 * T.int64(4) + ax1)
                        v_ax2 = T.axis.spatial(T.int64(14), oh_0 * T.int64(7) + ax2)
                        v_ax3 = T.axis.spatial(T.int64(14), ax3)
                        v_ax4 = T.axis.spatial(T.int64(4), oc_block_0 * T.int64(2) + ax4)
                        T.reads(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4])
                        T.writes(T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                        T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.max(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] + p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4], T.float32(0))
b0 = sch.get_block(name="conv2d_NCHWc", func_name="main")
b1 = sch.get_block(name="T_add", func_name="main")
b2 = sch.get_block(name="root", func_name="main")
sch.compute_inline(block=b1)
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.tiling_structure", ann_val="SSRSRS")
l3, l4, l5, l6, l7, l8, l9, l10 = sch.get_loops(block=b0)
v11, v12, v13, v14 = sch.sample_perfect_tile(loop=l3, n=4, max_innermost_factor=64, decision=[1, 1, 1, 1])
l15, l16, l17, l18 = sch.split(loop=l3, factors=[v11, v12, v13, v14], preserve_unit_iters=True)
v19, v20, v21, v22 = sch.sample_perfect_tile(loop=l4, n=4, max_innermost_factor=64, decision=[12, 1, 2, 2])
l23, l24, l25, l26 = sch.split(loop=l4, factors=[v19, v20, v21, v22], preserve_unit_iters=True)
v27, v28, v29, v30 = sch.sample_perfect_tile(loop=l5, n=4, max_innermost_factor=64, decision=[2, 7, 1, 1])
l31, l32, l33, l34 = sch.split(loop=l5, factors=[v27, v28, v29, v30], preserve_unit_iters=True)
v35, v36, v37, v38 = sch.sample_perfect_tile(loop=l6, n=4, max_innermost_factor=64, decision=[1, 14, 1, 1])
l39, l40, l41, l42 = sch.split(loop=l6, factors=[v35, v36, v37, v38], preserve_unit_iters=True)
v43, v44, v45, v46 = sch.sample_perfect_tile(loop=l7, n=4, max_innermost_factor=64, decision=[2, 2, 1, 1])
l47, l48, l49, l50 = sch.split(loop=l7, factors=[v43, v44, v45, v46], preserve_unit_iters=True)
v51, v52 = sch.sample_perfect_tile(loop=l8, n=2, max_innermost_factor=64, decision=[304, 6])
l53, l54 = sch.split(loop=l8, factors=[v51, v52], preserve_unit_iters=True)
v55, v56 = sch.sample_perfect_tile(loop=l9, n=2, max_innermost_factor=64, decision=[1, 1])
l57, l58 = sch.split(loop=l9, factors=[v55, v56], preserve_unit_iters=True)
v59, v60 = sch.sample_perfect_tile(loop=l10, n=2, max_innermost_factor=64, decision=[1, 1])
l61, l62 = sch.split(loop=l10, factors=[v59, v60], preserve_unit_iters=True)
sch.reorder(l15, l23, l31, l39, l47, l16, l24, l32, l40, l48, l53, l57, l61, l17, l25, l33, l41, l49, l54, l58, l62, l18, l26, l34, l42, l50)
b63, = sch.get_consumers(block=b0)
sch.reverse_compute_at(block=b63, loop=l47, preserve_unit_loops=True, index=-1)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.vectorize", ann_val=64)
v64 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.unroll_explicit", ann_val=v64)
2024-04-29 03:19:56 [INFO] [evolutionary_search.cc:713] Generating candidates......
2024-04-29 03:19:56 [INFO] [evolutionary_search.cc:715] Picked top 0 candidate(s) from database
2024-04-29 03:19:59 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x12628038)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x1397a928)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0xdb80008)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x164b48f8)]: 0 failure(s)
2024-04-29 03:19:59 [INFO] [evolutionary_search.cc:723] Sampled 512 candidate(s)
2024-04-29 03:20:01 [INFO] [evolutionary_search.cc:621] Evolve iter #0 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x12628038)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x1397a928)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0xdb80008)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x164b48f8)]: 0 failure(s)
2024-04-29 03:20:04 [INFO] [evolutionary_search.cc:621] Evolve iter #1 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x12628038)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x1397a928)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0xdb80008)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x164b48f8)]: 0 failure(s)
2024-04-29 03:20:08 [INFO] [evolutionary_search.cc:621] Evolve iter #2 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x12628038)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x1397a928)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0xdb80008)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x164b48f8)]: 0 failure(s)
2024-04-29 03:20:11 [INFO] [evolutionary_search.cc:621] Evolve iter #3 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x12628038)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x1397a928)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0xdb80008)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x164b48f8)]: 0 failure(s)
2024-04-29 03:20:11 [INFO] [evolutionary_search.cc:649] Scores of the best 64 candidates:
[1 : 16]:	0.9999  0.9997  0.9994  0.9994  0.9991  0.9985  0.9985  0.9981  0.9973  0.9971  0.9970  0.9952  0.9951  0.9949  0.9943  0.9924
[17 : 32]:	0.9914  0.9910  0.9889  0.9889  0.9882  0.9877  0.9873  0.9870  0.9868  0.9859  0.9855  0.9851  0.9849  0.9828  0.9828  0.9828
[33 : 48]:	0.9819  0.9808  0.9804  0.9804  0.9803  0.9803  0.9801  0.9799  0.9797  0.9796  0.9795  0.9792  0.9786  0.9780  0.9780  0.9776
[49 : 64]:	0.9775  0.9769  0.9766  0.9764  0.9757  0.9754  0.9754  0.9754  0.9743  0.9743  0.9741  0.9735  0.9728  0.9721  0.9710  0.9702
2024-04-29 03:20:12 [INFO] [evolutionary_search.cc:727] Got 64 candidate(s) with evolutionary search
2024-04-29 03:20:12 [INFO] [evolutionary_search.cc:730] Sending 64 candidates(s) for measurement
2024-04-29 05:05:11 [INFO] [task_scheduler.cc:131] [Task #30: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_29] Trial #1: GFLOPs: 3.5219. Time: 39000.7703 us. Best GFLOPs: 3.5219
2024-04-29 05:05:11 [INFO] [task_scheduler.cc:131] [Task #30: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_29] Trial #2: GFLOPs: 61.0936. Time: 2248.3014 us. Best GFLOPs: 61.0936
2024-04-29 05:05:11 [INFO] [task_scheduler.cc:131] [Task #30: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_29] Trial #3: GFLOPs: 213.2103. Time: 644.2317 us. Best GFLOPs: 213.2103
2024-04-29 05:05:11 [INFO] [task_scheduler.cc:131] [Task #30: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_29] Trial #4: GFLOPs: 0.9136. Time: 150352.5257 us. Best GFLOPs: 213.2103
2024-04-29 05:05:11 [INFO] [task_scheduler.cc:131] [Task #30: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_29] Trial #5: GFLOPs: 70.2107. Time: 1956.3506 us. Best GFLOPs: 213.2103
2024-04-29 05:05:11 [INFO] [task_scheduler.cc:131] [Task #30: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_29] Trial #6: GFLOPs: 88.9563. Time: 1544.0937 us. Best GFLOPs: 213.2103
2024-04-29 05:05:11 [INFO] [task_scheduler.cc:131] [Task #30: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_29] Trial #7: GFLOPs: 63.5918. Time: 2159.9778 us. Best GFLOPs: 213.2103
2024-04-29 05:05:11 [INFO] [task_scheduler.cc:121] [Task #30: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_29] Trial #8: Error in building:
LocalBuilder: Timeout, killed after 30.0 seconds
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(456), T.int64(14), T.int64(14), T.int64(4)), "float32"), p1: T.Buffer((T.int64(48), T.int64(456), T.int64(1), T.int64(1), T.int64(4), T.int64(4)), "float32"), p2: T.Buffer((T.int64(1), T.int64(48), T.int64(1), T.int64(1), T.int64(4)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(48), T.int64(14), T.int64(14), T.int64(4)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        conv2d_NCHWc = T.alloc_buffer((T.int64(1), T.int64(48), T.int64(14), T.int64(14), T.int64(4)))
        for n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused in T.parallel(T.int64(48), annotations={"pragma_auto_unroll_max_step": 512, "pragma_unroll_explicit": 1}):
            for n_2_init, oc_chunk_2_init, oh_2_init, ow_2_init, oc_block_2_init, n_3_init, oc_chunk_3_init, oh_3_init, ow_3_init, oc_block_3_init in T.grid(T.int64(1), T.int64(2), T.int64(7), T.int64(1), T.int64(2), T.int64(1), T.int64(1), T.int64(2), T.int64(14), T.int64(1)):
                with T.block("conv2d_NCHWc_init"):
                    v_n = T.axis.spatial(T.int64(1), n_2_init + n_3_init)
                    v_oc_chunk = T.axis.spatial(T.int64(48), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused // T.int64(4) * T.int64(4) + n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused % T.int64(2) * T.int64(2) + oc_chunk_2_init + oc_chunk_3_init)
                    v_oh = T.axis.spatial(T.int64(14), oh_2_init * T.int64(2) + oh_3_init)
                    v_ow = T.axis.spatial(T.int64(14), ow_2_init * T.int64(14) + ow_3_init)
                    v_oc_block = T.axis.spatial(T.int64(4), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused % T.int64(4) // T.int64(2) * T.int64(2) + oc_block_2_init + oc_block_3_init)
                    T.reads()
                    T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                    T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                    conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = T.float32(0)
            for ic_0, kh_0, kw_0, n_2, oc_chunk_2, oh_2, ow_2, oc_block_2, ic_1, kh_1, kw_1, n_3, oc_chunk_3, oh_3, ow_3, oc_block_3 in T.grid(T.int64(1824), T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(7), T.int64(1), T.int64(2), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(14), T.int64(1)):
                with T.block("conv2d_NCHWc_update"):
                    v_n = T.axis.spatial(T.int64(1), n_2 + n_3)
                    v_oc_chunk = T.axis.spatial(T.int64(48), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused // T.int64(4) * T.int64(4) + n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused % T.int64(2) * T.int64(2) + oc_chunk_2 + oc_chunk_3)
                    v_oh = T.axis.spatial(T.int64(14), oh_2 * T.int64(2) + oh_3)
                    v_ow = T.axis.spatial(T.int64(14), ow_2 * T.int64(14) + ow_3)
                    v_oc_block = T.axis.spatial(T.int64(4), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused % T.int64(4) // T.int64(2) * T.int64(2) + oc_block_2 + oc_block_3)
                    v_ic = T.axis.reduce(T.int64(1824), ic_0 + ic_1)
                    v_kh = T.axis.reduce(T.int64(1), kh_0 + kh_1)
                    v_kw = T.axis.reduce(T.int64(1), kw_0 + kw_1)
                    T.reads(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block], p0[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)], p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block])
                    T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                    T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                    conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] + p0[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)] * p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block]
        for ax0_ax1_ax2_ax3_ax4_fused_0 in T.parallel(T.int64(588)):
            for ax0_ax1_ax2_ax3_ax4_fused_1 in T.vectorized(T.int64(64)):
                with T.block("T_relu"):
                    v_ax0 = T.axis.spatial(T.int64(1), T.int64(0))
                    v_ax1 = T.axis.spatial(T.int64(48), (ax0_ax1_ax2_ax3_ax4_fused_0 * T.int64(64) + ax0_ax1_ax2_ax3_ax4_fused_1) // T.int64(784))
                    v_ax2 = T.axis.spatial(T.int64(14), (ax0_ax1_ax2_ax3_ax4_fused_0 * T.int64(64) + ax0_ax1_ax2_ax3_ax4_fused_1) % T.int64(784) // T.int64(56))
                    v_ax3 = T.axis.spatial(T.int64(14), (ax0_ax1_ax2_ax3_ax4_fused_0 * T.int64(64) + ax0_ax1_ax2_ax3_ax4_fused_1) % T.int64(56) // T.int64(4))
                    v_ax4 = T.axis.spatial(T.int64(4), (ax0_ax1_ax2_ax3_ax4_fused_0 * T.int64(64) + ax0_ax1_ax2_ax3_ax4_fused_1) % T.int64(4))
                    T.reads(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4])
                    T.writes(T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                    T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.max(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] + p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4], T.float32(0))
b0 = sch.get_block(name="conv2d_NCHWc", func_name="main")
b1 = sch.get_block(name="T_add", func_name="main")
b2 = sch.get_block(name="root", func_name="main")
sch.compute_inline(block=b1)
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.tiling_structure", ann_val="SSRSRS")
l3, l4, l5, l6, l7, l8, l9, l10 = sch.get_loops(block=b0)
v11, v12, v13, v14 = sch.sample_perfect_tile(loop=l3, n=4, max_innermost_factor=64, decision=[1, 1, 1, 1])
l15, l16, l17, l18 = sch.split(loop=l3, factors=[v11, v12, v13, v14], preserve_unit_iters=True)
v19, v20, v21, v22 = sch.sample_perfect_tile(loop=l4, n=4, max_innermost_factor=64, decision=[12, 2, 2, 1])
l23, l24, l25, l26 = sch.split(loop=l4, factors=[v19, v20, v21, v22], preserve_unit_iters=True)
v27, v28, v29, v30 = sch.sample_perfect_tile(loop=l5, n=4, max_innermost_factor=64, decision=[1, 1, 7, 2])
l31, l32, l33, l34 = sch.split(loop=l5, factors=[v27, v28, v29, v30], preserve_unit_iters=True)
v35, v36, v37, v38 = sch.sample_perfect_tile(loop=l6, n=4, max_innermost_factor=64, decision=[1, 1, 1, 14])
l39, l40, l41, l42 = sch.split(loop=l6, factors=[v35, v36, v37, v38], preserve_unit_iters=True)
v43, v44, v45, v46 = sch.sample_perfect_tile(loop=l7, n=4, max_innermost_factor=64, decision=[2, 1, 2, 1])
l47, l48, l49, l50 = sch.split(loop=l7, factors=[v43, v44, v45, v46], preserve_unit_iters=True)
v51, v52 = sch.sample_perfect_tile(loop=l8, n=2, max_innermost_factor=64, decision=[1824, 1])
l53, l54 = sch.split(loop=l8, factors=[v51, v52], preserve_unit_iters=True)
v55, v56 = sch.sample_perfect_tile(loop=l9, n=2, max_innermost_factor=64, decision=[1, 1])
l57, l58 = sch.split(loop=l9, factors=[v55, v56], preserve_unit_iters=True)
v59, v60 = sch.sample_perfect_tile(loop=l10, n=2, max_innermost_factor=64, decision=[1, 1])
l61, l62 = sch.split(loop=l10, factors=[v59, v60], preserve_unit_iters=True)
sch.reorder(l15, l23, l31, l39, l47, l16, l24, l32, l40, l48, l53, l57, l61, l17, l25, l33, l41, l49, l54, l58, l62, l18, l26, l34, l42, l50)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.vectorize", ann_val=64)
v63 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.unroll_explicit", ann_val=v63)
sch.enter_postproc()
b64 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b64, ann_key="meta_schedule.parallel")
sch.unannotate(block_or_loop=b64, ann_key="meta_schedule.vectorize")
sch.unannotate(block_or_loop=b64, ann_key="meta_schedule.unroll_explicit")
b65, b66 = sch.get_child_blocks(b64)
l67, l68, l69, l70, l71, l72, l73, l74, l75, l76, l77, l78, l79, l80, l81, l82, l83, l84, l85, l86, l87, l88, l89, l90, l91, l92 = sch.get_loops(block=b65)
l93 = sch.fuse(l67, l68, l69, l70, l71, l72, l73, l74, l75, l76, preserve_unit_iters=True)
sch.parallel(loop=l93)
sch.annotate(block_or_loop=l93, ann_key="pragma_auto_unroll_max_step", ann_val=512)
sch.annotate(block_or_loop=l93, ann_key="pragma_unroll_explicit", ann_val=1)
l94, l95, l96, l97, l98 = sch.get_loops(block=b66)
l99 = sch.fuse(l94, l95, l96, l97, l98, preserve_unit_iters=True)
l100, l101 = sch.split(loop=l99, factors=[None, 64], preserve_unit_iters=True)
sch.parallel(loop=l100)
sch.vectorize(loop=l101)
b102 = sch.get_block(name="conv2d_NCHWc", func_name="main")
l103, l104, l105, l106, l107, l108, l109, l110, l111, l112, l113, l114, l115, l116, l117, l118, l119 = sch.get_loops(block=b102)
b120 = sch.decompose_reduction(block=b102, loop=l104)
2024-04-29 05:05:11 [INFO] [task_scheduler.cc:131] [Task #30: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_29] Trial #9: GFLOPs: 53.5102. Time: 2566.9277 us. Best GFLOPs: 213.2103
2024-04-29 05:05:11 [INFO] [task_scheduler.cc:131] [Task #30: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_29] Trial #10: GFLOPs: 45.9137. Time: 2991.6274 us. Best GFLOPs: 213.2103
2024-04-29 05:05:11 [INFO] [task_scheduler.cc:131] [Task #30: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_29] Trial #11: GFLOPs: 112.8325. Time: 1217.3517 us. Best GFLOPs: 213.2103
2024-04-29 05:05:11 [INFO] [task_scheduler.cc:131] [Task #30: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_29] Trial #12: GFLOPs: 43.9039. Time: 3128.5814 us. Best GFLOPs: 213.2103
2024-04-29 05:05:11 [INFO] [task_scheduler.cc:131] [Task #30: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_29] Trial #13: GFLOPs: 78.0883. Time: 1758.9942 us. Best GFLOPs: 213.2103
2024-04-29 05:05:11 [INFO] [task_scheduler.cc:131] [Task #30: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_29] Trial #14: GFLOPs: 87.6381. Time: 1567.3192 us. Best GFLOPs: 213.2103
2024-04-29 05:05:11 [INFO] [task_scheduler.cc:131] [Task #30: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_29] Trial #15: GFLOPs: 57.7569. Time: 2378.1901 us. Best GFLOPs: 213.2103
2024-04-29 05:05:11 [INFO] [task_scheduler.cc:131] [Task #30: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_29] Trial #16: GFLOPs: 24.8766. Time: 5521.5189 us. Best GFLOPs: 213.2103
2024-04-29 05:05:11 [INFO] [task_scheduler.cc:131] [Task #30: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_29] Trial #17: GFLOPs: 12.5042. Time: 10984.8165 us. Best GFLOPs: 213.2103
2024-04-29 05:05:11 [INFO] [task_scheduler.cc:131] [Task #30: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_29] Trial #18: GFLOPs: 14.5043. Time: 9470.0948 us. Best GFLOPs: 213.2103
2024-04-29 05:05:11 [INFO] [task_scheduler.cc:131] [Task #30: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_29] Trial #19: GFLOPs: 3.0428. Time: 45141.0837 us. Best GFLOPs: 213.2103
2024-04-29 05:05:11 [INFO] [task_scheduler.cc:131] [Task #30: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_29] Trial #20: GFLOPs: 108.1791. Time: 1269.7169 us. Best GFLOPs: 213.2103
2024-04-29 05:05:11 [INFO] [task_scheduler.cc:131] [Task #30: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_29] Trial #21: GFLOPs: 76.4912. Time: 1795.7200 us. Best GFLOPs: 213.2103
2024-04-29 05:05:11 [INFO] [task_scheduler.cc:131] [Task #30: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_29] Trial #22: GFLOPs: 41.3114. Time: 3324.9126 us. Best GFLOPs: 213.2103
2024-04-29 05:05:11 [INFO] [task_scheduler.cc:131] [Task #30: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_29] Trial #23: GFLOPs: 37.9140. Time: 3622.8485 us. Best GFLOPs: 213.2103
2024-04-29 05:05:11 [INFO] [task_scheduler.cc:131] [Task #30: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_29] Trial #24: GFLOPs: 27.4442. Time: 5004.9475 us. Best GFLOPs: 213.2103
2024-04-29 05:05:11 [INFO] [task_scheduler.cc:131] [Task #30: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_29] Trial #25: GFLOPs: 34.4549. Time: 3986.5710 us. Best GFLOPs: 213.2103
2024-04-29 05:05:11 [INFO] [task_scheduler.cc:131] [Task #30: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_29] Trial #26: GFLOPs: 109.2467. Time: 1257.3085 us. Best GFLOPs: 213.2103
2024-04-29 05:05:11 [INFO] [task_scheduler.cc:131] [Task #30: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_29] Trial #27: GFLOPs: 22.3867. Time: 6135.6520 us. Best GFLOPs: 213.2103
2024-04-29 05:05:11 [INFO] [task_scheduler.cc:131] [Task #30: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_29] Trial #28: GFLOPs: 29.3877. Time: 4673.9559 us. Best GFLOPs: 213.2103
2024-04-29 05:05:11 [INFO] [task_scheduler.cc:131] [Task #30: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_29] Trial #29: GFLOPs: 105.4026. Time: 1303.1637 us. Best GFLOPs: 213.2103
2024-04-29 05:05:11 [INFO] [task_scheduler.cc:131] [Task #30: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_29] Trial #30: GFLOPs: 22.7844. Time: 6028.5569 us. Best GFLOPs: 213.2103
2024-04-29 05:05:11 [INFO] [task_scheduler.cc:131] [Task #30: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_29] Trial #31: GFLOPs: 237.3354. Time: 578.7456 us. Best GFLOPs: 237.3354
2024-04-29 05:05:11 [INFO] [task_scheduler.cc:131] [Task #30: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_29] Trial #32: GFLOPs: 5.2848. Time: 25991.1133 us. Best GFLOPs: 237.3354
2024-04-29 05:05:11 [INFO] [task_scheduler.cc:131] [Task #30: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_29] Trial #33: GFLOPs: 96.0858. Time: 1429.5224 us. Best GFLOPs: 237.3354
2024-04-29 05:05:11 [INFO] [task_scheduler.cc:131] [Task #30: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_29] Trial #34: GFLOPs: 49.2842. Time: 2787.0364 us. Best GFLOPs: 237.3354
2024-04-29 05:05:11 [INFO] [task_scheduler.cc:131] [Task #30: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_29] Trial #35: GFLOPs: 8.1053. Time: 16946.6070 us. Best GFLOPs: 237.3354
2024-04-29 05:05:11 [INFO] [task_scheduler.cc:131] [Task #30: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_29] Trial #36: GFLOPs: 9.3297. Time: 14722.5739 us. Best GFLOPs: 237.3354
2024-04-29 05:05:11 [INFO] [task_scheduler.cc:131] [Task #30: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_29] Trial #37: GFLOPs: 55.4961. Time: 2475.0693 us. Best GFLOPs: 237.3354
2024-04-29 05:05:11 [INFO] [task_scheduler.cc:131] [Task #30: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_29] Trial #38: GFLOPs: 99.7975. Time: 1376.3555 us. Best GFLOPs: 237.3354
2024-04-29 05:05:11 [INFO] [task_scheduler.cc:131] [Task #30: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_29] Trial #39: GFLOPs: 45.2110. Time: 3038.1272 us. Best GFLOPs: 237.3354
2024-04-29 05:05:11 [INFO] [task_scheduler.cc:131] [Task #30: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_29] Trial #40: GFLOPs: 28.9928. Time: 4737.6257 us. Best GFLOPs: 237.3354
2024-04-29 05:05:11 [INFO] [task_scheduler.cc:131] [Task #30: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_29] Trial #41: GFLOPs: 38.5934. Time: 3559.0760 us. Best GFLOPs: 237.3354
2024-04-29 05:05:11 [INFO] [task_scheduler.cc:131] [Task #30: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_29] Trial #42: GFLOPs: 97.9256. Time: 1402.6651 us. Best GFLOPs: 237.3354
2024-04-29 05:05:11 [INFO] [task_scheduler.cc:131] [Task #30: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_29] Trial #43: GFLOPs: 4.5517. Time: 30177.2695 us. Best GFLOPs: 237.3354
2024-04-29 05:05:11 [INFO] [task_scheduler.cc:131] [Task #30: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_29] Trial #44: GFLOPs: 385.6903. Time: 356.1323 us. Best GFLOPs: 385.6903
2024-04-29 05:05:11 [INFO] [task_scheduler.cc:131] [Task #30: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_29] Trial #45: GFLOPs: 1.8235. Time: 75324.5343 us. Best GFLOPs: 385.6903
2024-04-29 05:05:11 [INFO] [task_scheduler.cc:131] [Task #30: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_29] Trial #46: GFLOPs: 31.4685. Time: 4364.9026 us. Best GFLOPs: 385.6903
2024-04-29 05:05:11 [INFO] [task_scheduler.cc:131] [Task #30: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_29] Trial #47: GFLOPs: 1.6172. Time: 84933.8267 us. Best GFLOPs: 385.6903
2024-04-29 05:05:11 [INFO] [task_scheduler.cc:131] [Task #30: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_29] Trial #48: GFLOPs: 79.6279. Time: 1724.9827 us. Best GFLOPs: 385.6903
2024-04-29 05:05:11 [INFO] [task_scheduler.cc:131] [Task #30: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_29] Trial #49: GFLOPs: 111.3219. Time: 1233.8706 us. Best GFLOPs: 385.6903
2024-04-29 05:05:11 [INFO] [task_scheduler.cc:131] [Task #30: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_29] Trial #50: GFLOPs: 1.9533. Time: 70320.0380 us. Best GFLOPs: 385.6903
2024-04-29 05:05:11 [INFO] [task_scheduler.cc:131] [Task #30: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_29] Trial #51: GFLOPs: 150.4527. Time: 912.9565 us. Best GFLOPs: 385.6903
2024-04-29 05:05:11 [INFO] [task_scheduler.cc:131] [Task #30: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_29] Trial #52: GFLOPs: 119.3895. Time: 1150.4928 us. Best GFLOPs: 385.6903
2024-04-29 05:05:11 [INFO] [task_scheduler.cc:131] [Task #30: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_29] Trial #53: GFLOPs: 81.5821. Time: 1683.6634 us. Best GFLOPs: 385.6903
2024-04-29 05:05:11 [INFO] [task_scheduler.cc:131] [Task #30: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_29] Trial #54: GFLOPs: 3.3830. Time: 40601.5393 us. Best GFLOPs: 385.6903
2024-04-29 05:05:11 [INFO] [task_scheduler.cc:131] [Task #30: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_29] Trial #55: GFLOPs: 28.4597. Time: 4826.3670 us. Best GFLOPs: 385.6903
2024-04-29 05:05:11 [INFO] [task_scheduler.cc:131] [Task #30: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_29] Trial #56: GFLOPs: 53.0311. Time: 2590.1186 us. Best GFLOPs: 385.6903
2024-04-29 05:05:11 [INFO] [task_scheduler.cc:131] [Task #30: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_29] Trial #57: GFLOPs: 93.2165. Time: 1473.5243 us. Best GFLOPs: 385.6903
2024-04-29 05:05:11 [INFO] [task_scheduler.cc:131] [Task #30: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_29] Trial #58: GFLOPs: 1.1095. Time: 123805.8403 us. Best GFLOPs: 385.6903
2024-04-29 05:05:11 [INFO] [task_scheduler.cc:131] [Task #30: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_29] Trial #59: GFLOPs: 90.0903. Time: 1524.6565 us. Best GFLOPs: 385.6903
2024-04-29 05:05:11 [INFO] [task_scheduler.cc:131] [Task #30: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_29] Trial #60: GFLOPs: 46.0705. Time: 2981.4468 us. Best GFLOPs: 385.6903
2024-04-29 05:05:11 [INFO] [task_scheduler.cc:131] [Task #30: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_29] Trial #61: GFLOPs: 47.3210. Time: 2902.6620 us. Best GFLOPs: 385.6903
2024-04-29 05:05:11 [INFO] [task_scheduler.cc:131] [Task #30: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_29] Trial #62: GFLOPs: 4.0224. Time: 34147.6830 us. Best GFLOPs: 385.6903
2024-04-29 05:05:11 [INFO] [task_scheduler.cc:131] [Task #30: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_29] Trial #63: GFLOPs: 82.4876. Time: 1665.1810 us. Best GFLOPs: 385.6903
2024-04-29 05:05:11 [INFO] [task_scheduler.cc:131] [Task #30: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_29] Trial #64: GFLOPs: 9.5130. Time: 14438.8251 us. Best GFLOPs: 385.6903
