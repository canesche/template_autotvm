2024-04-29 02:30:49 [INFO] [task_scheduler.cc:160] Initializing Task #38: "fused_nn_contrib_conv2d_NCHWc_add_nn_relu_37"
2024-04-29 02:30:49 [INFO] [task_scheduler.cc:35] 
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(360), T.int64(14), T.int64(14), T.int64(4)), "float32"), p1: T.Buffer((T.int64(48), T.int64(360), T.int64(1), T.int64(1), T.int64(4), T.int64(4)), "float32"), p2: T.Buffer((T.int64(1), T.int64(48), T.int64(1), T.int64(1), T.int64(4)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(48), T.int64(14), T.int64(14), T.int64(4)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        conv2d_NCHWc = T.alloc_buffer((T.int64(1), T.int64(48), T.int64(14), T.int64(14), T.int64(4)))
        T_add = T.alloc_buffer((T.int64(1), T.int64(48), T.int64(14), T.int64(14), T.int64(4)))
        for n, oc_chunk, oh, ow, oc_block, ic, kh, kw in T.grid(T.int64(1), T.int64(48), T.int64(14), T.int64(14), T.int64(4), T.int64(1440), T.int64(1), T.int64(1)):
            with T.block("conv2d_NCHWc"):
                v_n, v_oc_chunk, v_oh, v_ow, v_oc_block, v_ic, v_kh, v_kw = T.axis.remap("SSSSSRRR", [n, oc_chunk, oh, ow, oc_block, ic, kh, kw])
                T.reads(p0[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)], p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block])
                T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                with T.init():
                    conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = T.float32(0)
                conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] + p0[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)] * p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block]
        for ax0, ax1, ax2, ax3, ax4 in T.grid(T.int64(1), T.int64(48), T.int64(14), T.int64(14), T.int64(4)):
            with T.block("T_add"):
                v_ax0, v_ax1, v_ax2, v_ax3, v_ax4 = T.axis.remap("SSSSS", [ax0, ax1, ax2, ax3, ax4])
                T.reads(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4])
                T.writes(T_add[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                T_add[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] + p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4]
        for ax0, ax1, ax2, ax3, ax4 in T.grid(T.int64(1), T.int64(48), T.int64(14), T.int64(14), T.int64(4)):
            with T.block("T_relu"):
                v_ax0, v_ax1, v_ax2, v_ax3, v_ax4 = T.axis.remap("SSSSS", [ax0, ax1, ax2, ax3, ax4])
                T.reads(T_add[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                T.writes(T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.max(T_add[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], T.float32(0))
2024-04-29 02:30:49 [INFO] [task_scheduler.cc:164] Total 3 design space(s) generated
2024-04-29 02:30:49 [INFO] [task_scheduler.cc:170] Design space #0:
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(360), T.int64(14), T.int64(14), T.int64(4)), "float32"), p1: T.Buffer((T.int64(48), T.int64(360), T.int64(1), T.int64(1), T.int64(4), T.int64(4)), "float32"), p2: T.Buffer((T.int64(1), T.int64(48), T.int64(1), T.int64(1), T.int64(4)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(48), T.int64(14), T.int64(14), T.int64(4)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        with T.block("root"):
            T.reads()
            T.writes()
            T.block_attr({"meta_schedule.parallel": 768, "meta_schedule.unroll_explicit": 512, "meta_schedule.vectorize": 64})
            conv2d_NCHWc = T.alloc_buffer((T.int64(1), T.int64(48), T.int64(14), T.int64(14), T.int64(4)))
            for n_0, oc_chunk_0, oh_0, ow_0, oc_block_0, n_1, oc_chunk_1, oh_1, ow_1, oc_block_1, ic_0, kh_0, kw_0, n_2, oc_chunk_2, oh_2, ow_2, oc_block_2, ic_1, kh_1, kw_1, n_3, oc_chunk_3, oh_3, ow_3, oc_block_3 in T.grid(T.int64(1), T.int64(1), T.int64(7), T.int64(1), T.int64(4), T.int64(1), T.int64(4), T.int64(1), T.int64(1), T.int64(1), T.int64(90), T.int64(1), T.int64(1), T.int64(1), T.int64(4), T.int64(1), T.int64(1), T.int64(1), T.int64(16), T.int64(1), T.int64(1), T.int64(1), T.int64(3), T.int64(2), T.int64(14), T.int64(1)):
                with T.block("conv2d_NCHWc"):
                    v_n = T.axis.spatial(T.int64(1), n_0 + n_1 + n_2 + n_3)
                    v_oc_chunk = T.axis.spatial(T.int64(48), oc_chunk_0 * T.int64(48) + oc_chunk_1 * T.int64(12) + oc_chunk_2 * T.int64(3) + oc_chunk_3)
                    v_oh = T.axis.spatial(T.int64(14), oh_0 * T.int64(2) + oh_1 * T.int64(2) + oh_2 * T.int64(2) + oh_3)
                    v_ow = T.axis.spatial(T.int64(14), ow_0 * T.int64(14) + ow_1 * T.int64(14) + ow_2 * T.int64(14) + ow_3)
                    v_oc_block = T.axis.spatial(T.int64(4), oc_block_0 + oc_block_1 + oc_block_2 + oc_block_3)
                    v_ic = T.axis.reduce(T.int64(1440), ic_0 * T.int64(16) + ic_1)
                    v_kh = T.axis.reduce(T.int64(1), kh_0 + kh_1)
                    v_kw = T.axis.reduce(T.int64(1), kw_0 + kw_1)
                    T.reads(p0[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)], p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block])
                    T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                    T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                    with T.init():
                        conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = T.float32(0)
                    conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] + p0[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)] * p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block]
            for ax0, ax1, ax2, ax3, ax4 in T.grid(T.int64(1), T.int64(48), T.int64(14), T.int64(14), T.int64(4)):
                with T.block("T_relu"):
                    v_ax0, v_ax1, v_ax2, v_ax3, v_ax4 = T.axis.remap("SSSSS", [ax0, ax1, ax2, ax3, ax4])
                    T.reads(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4])
                    T.writes(T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                    T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.max(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] + p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4], T.float32(0))
b0 = sch.get_block(name="conv2d_NCHWc", func_name="main")
b1 = sch.get_block(name="T_add", func_name="main")
b2 = sch.get_block(name="root", func_name="main")
sch.compute_inline(block=b1)
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.tiling_structure", ann_val="SSRSRS")
l3, l4, l5, l6, l7, l8, l9, l10 = sch.get_loops(block=b0)
v11, v12, v13, v14 = sch.sample_perfect_tile(loop=l3, n=4, max_innermost_factor=64, decision=[1, 1, 1, 1])
l15, l16, l17, l18 = sch.split(loop=l3, factors=[v11, v12, v13, v14], preserve_unit_iters=True)
v19, v20, v21, v22 = sch.sample_perfect_tile(loop=l4, n=4, max_innermost_factor=64, decision=[1, 4, 4, 3])
l23, l24, l25, l26 = sch.split(loop=l4, factors=[v19, v20, v21, v22], preserve_unit_iters=True)
v27, v28, v29, v30 = sch.sample_perfect_tile(loop=l5, n=4, max_innermost_factor=64, decision=[7, 1, 1, 2])
l31, l32, l33, l34 = sch.split(loop=l5, factors=[v27, v28, v29, v30], preserve_unit_iters=True)
v35, v36, v37, v38 = sch.sample_perfect_tile(loop=l6, n=4, max_innermost_factor=64, decision=[1, 1, 1, 14])
l39, l40, l41, l42 = sch.split(loop=l6, factors=[v35, v36, v37, v38], preserve_unit_iters=True)
v43, v44, v45, v46 = sch.sample_perfect_tile(loop=l7, n=4, max_innermost_factor=64, decision=[4, 1, 1, 1])
l47, l48, l49, l50 = sch.split(loop=l7, factors=[v43, v44, v45, v46], preserve_unit_iters=True)
v51, v52 = sch.sample_perfect_tile(loop=l8, n=2, max_innermost_factor=64, decision=[90, 16])
l53, l54 = sch.split(loop=l8, factors=[v51, v52], preserve_unit_iters=True)
v55, v56 = sch.sample_perfect_tile(loop=l9, n=2, max_innermost_factor=64, decision=[1, 1])
l57, l58 = sch.split(loop=l9, factors=[v55, v56], preserve_unit_iters=True)
v59, v60 = sch.sample_perfect_tile(loop=l10, n=2, max_innermost_factor=64, decision=[1, 1])
l61, l62 = sch.split(loop=l10, factors=[v59, v60], preserve_unit_iters=True)
sch.reorder(l15, l23, l31, l39, l47, l16, l24, l32, l40, l48, l53, l57, l61, l17, l25, l33, l41, l49, l54, l58, l62, l18, l26, l34, l42, l50)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.vectorize", ann_val=64)
v63 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.unroll_explicit", ann_val=v63)
2024-04-29 02:30:49 [INFO] [task_scheduler.cc:170] Design space #1:
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(360), T.int64(14), T.int64(14), T.int64(4)), "float32"), p1: T.Buffer((T.int64(48), T.int64(360), T.int64(1), T.int64(1), T.int64(4), T.int64(4)), "float32"), p2: T.Buffer((T.int64(1), T.int64(48), T.int64(1), T.int64(1), T.int64(4)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(48), T.int64(14), T.int64(14), T.int64(4)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        with T.block("root"):
            T.reads()
            T.writes()
            T.block_attr({"meta_schedule.parallel": 768, "meta_schedule.unroll_explicit": 512, "meta_schedule.vectorize": 64})
            conv2d_NCHWc = T.alloc_buffer((T.int64(1), T.int64(48), T.int64(14), T.int64(14), T.int64(4)))
            for n_0, oc_chunk_0, oh_0, ow_0, oc_block_0, n_1, oc_chunk_1, oh_1, ow_1, oc_block_1 in T.grid(T.int64(1), T.int64(1), T.int64(7), T.int64(1), T.int64(4), T.int64(1), T.int64(4), T.int64(1), T.int64(1), T.int64(1)):
                for ic_0, kh_0, kw_0, n_2, oc_chunk_2, oh_2, ow_2, oc_block_2, ic_1, kh_1, kw_1, n_3, oc_chunk_3, oh_3, ow_3, oc_block_3 in T.grid(T.int64(90), T.int64(1), T.int64(1), T.int64(1), T.int64(4), T.int64(1), T.int64(1), T.int64(1), T.int64(16), T.int64(1), T.int64(1), T.int64(1), T.int64(3), T.int64(2), T.int64(14), T.int64(1)):
                    with T.block("conv2d_NCHWc"):
                        v_n = T.axis.spatial(T.int64(1), n_0 + n_1 + n_2 + n_3)
                        v_oc_chunk = T.axis.spatial(T.int64(48), oc_chunk_0 * T.int64(48) + oc_chunk_1 * T.int64(12) + oc_chunk_2 * T.int64(3) + oc_chunk_3)
                        v_oh = T.axis.spatial(T.int64(14), oh_0 * T.int64(2) + oh_1 * T.int64(2) + oh_2 * T.int64(2) + oh_3)
                        v_ow = T.axis.spatial(T.int64(14), ow_0 * T.int64(14) + ow_1 * T.int64(14) + ow_2 * T.int64(14) + ow_3)
                        v_oc_block = T.axis.spatial(T.int64(4), oc_block_0 + oc_block_1 + oc_block_2 + oc_block_3)
                        v_ic = T.axis.reduce(T.int64(1440), ic_0 * T.int64(16) + ic_1)
                        v_kh = T.axis.reduce(T.int64(1), kh_0 + kh_1)
                        v_kw = T.axis.reduce(T.int64(1), kw_0 + kw_1)
                        T.reads(p0[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)], p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block])
                        T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                        T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                        with T.init():
                            conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = T.float32(0)
                        conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] + p0[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)] * p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block]
                for ax0, ax1, ax2, ax3, ax4 in T.grid(T.int64(1), T.int64(12), T.int64(2), T.int64(14), T.int64(1)):
                    with T.block("T_relu"):
                        v_ax0 = T.axis.spatial(T.int64(1), ax0)
                        v_ax1 = T.axis.spatial(T.int64(48), oc_chunk_1 * T.int64(12) + ax1)
                        v_ax2 = T.axis.spatial(T.int64(14), oh_0 * T.int64(2) + ax2)
                        v_ax3 = T.axis.spatial(T.int64(14), ax3)
                        v_ax4 = T.axis.spatial(T.int64(4), oc_block_0 + ax4)
                        T.reads(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4])
                        T.writes(T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                        T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.max(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] + p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4], T.float32(0))
b0 = sch.get_block(name="conv2d_NCHWc", func_name="main")
b1 = sch.get_block(name="T_add", func_name="main")
b2 = sch.get_block(name="root", func_name="main")
sch.compute_inline(block=b1)
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.tiling_structure", ann_val="SSRSRS")
l3, l4, l5, l6, l7, l8, l9, l10 = sch.get_loops(block=b0)
v11, v12, v13, v14 = sch.sample_perfect_tile(loop=l3, n=4, max_innermost_factor=64, decision=[1, 1, 1, 1])
l15, l16, l17, l18 = sch.split(loop=l3, factors=[v11, v12, v13, v14], preserve_unit_iters=True)
v19, v20, v21, v22 = sch.sample_perfect_tile(loop=l4, n=4, max_innermost_factor=64, decision=[1, 4, 4, 3])
l23, l24, l25, l26 = sch.split(loop=l4, factors=[v19, v20, v21, v22], preserve_unit_iters=True)
v27, v28, v29, v30 = sch.sample_perfect_tile(loop=l5, n=4, max_innermost_factor=64, decision=[7, 1, 1, 2])
l31, l32, l33, l34 = sch.split(loop=l5, factors=[v27, v28, v29, v30], preserve_unit_iters=True)
v35, v36, v37, v38 = sch.sample_perfect_tile(loop=l6, n=4, max_innermost_factor=64, decision=[1, 1, 1, 14])
l39, l40, l41, l42 = sch.split(loop=l6, factors=[v35, v36, v37, v38], preserve_unit_iters=True)
v43, v44, v45, v46 = sch.sample_perfect_tile(loop=l7, n=4, max_innermost_factor=64, decision=[4, 1, 1, 1])
l47, l48, l49, l50 = sch.split(loop=l7, factors=[v43, v44, v45, v46], preserve_unit_iters=True)
v51, v52 = sch.sample_perfect_tile(loop=l8, n=2, max_innermost_factor=64, decision=[90, 16])
l53, l54 = sch.split(loop=l8, factors=[v51, v52], preserve_unit_iters=True)
v55, v56 = sch.sample_perfect_tile(loop=l9, n=2, max_innermost_factor=64, decision=[1, 1])
l57, l58 = sch.split(loop=l9, factors=[v55, v56], preserve_unit_iters=True)
v59, v60 = sch.sample_perfect_tile(loop=l10, n=2, max_innermost_factor=64, decision=[1, 1])
l61, l62 = sch.split(loop=l10, factors=[v59, v60], preserve_unit_iters=True)
sch.reorder(l15, l23, l31, l39, l47, l16, l24, l32, l40, l48, l53, l57, l61, l17, l25, l33, l41, l49, l54, l58, l62, l18, l26, l34, l42, l50)
b63, = sch.get_consumers(block=b0)
sch.reverse_compute_at(block=b63, loop=l48, preserve_unit_loops=True, index=-1)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.vectorize", ann_val=64)
v64 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.unroll_explicit", ann_val=v64)
2024-04-29 02:30:49 [INFO] [task_scheduler.cc:170] Design space #2:
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(360), T.int64(14), T.int64(14), T.int64(4)), "float32"), p1: T.Buffer((T.int64(48), T.int64(360), T.int64(1), T.int64(1), T.int64(4), T.int64(4)), "float32"), p2: T.Buffer((T.int64(1), T.int64(48), T.int64(1), T.int64(1), T.int64(4)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(48), T.int64(14), T.int64(14), T.int64(4)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        with T.block("root"):
            T.reads()
            T.writes()
            T.block_attr({"meta_schedule.parallel": 768, "meta_schedule.unroll_explicit": 64, "meta_schedule.vectorize": 64})
            conv2d_NCHWc = T.alloc_buffer((T.int64(1), T.int64(48), T.int64(14), T.int64(14), T.int64(4)))
            for n_0, oc_chunk_0, oh_0, ow_0, oc_block_0 in T.grid(T.int64(1), T.int64(1), T.int64(7), T.int64(1), T.int64(4)):
                for n_1, oc_chunk_1, oh_1, ow_1, oc_block_1, ic_0, kh_0, kw_0, n_2, oc_chunk_2, oh_2, ow_2, oc_block_2, ic_1, kh_1, kw_1, n_3, oc_chunk_3, oh_3, ow_3, oc_block_3 in T.grid(T.int64(1), T.int64(4), T.int64(1), T.int64(1), T.int64(1), T.int64(90), T.int64(1), T.int64(1), T.int64(1), T.int64(4), T.int64(1), T.int64(1), T.int64(1), T.int64(16), T.int64(1), T.int64(1), T.int64(1), T.int64(3), T.int64(2), T.int64(14), T.int64(1)):
                    with T.block("conv2d_NCHWc"):
                        v_n = T.axis.spatial(T.int64(1), n_0 + n_1 + n_2 + n_3)
                        v_oc_chunk = T.axis.spatial(T.int64(48), oc_chunk_0 * T.int64(48) + oc_chunk_1 * T.int64(12) + oc_chunk_2 * T.int64(3) + oc_chunk_3)
                        v_oh = T.axis.spatial(T.int64(14), oh_0 * T.int64(2) + oh_1 * T.int64(2) + oh_2 * T.int64(2) + oh_3)
                        v_ow = T.axis.spatial(T.int64(14), ow_0 * T.int64(14) + ow_1 * T.int64(14) + ow_2 * T.int64(14) + ow_3)
                        v_oc_block = T.axis.spatial(T.int64(4), oc_block_0 + oc_block_1 + oc_block_2 + oc_block_3)
                        v_ic = T.axis.reduce(T.int64(1440), ic_0 * T.int64(16) + ic_1)
                        v_kh = T.axis.reduce(T.int64(1), kh_0 + kh_1)
                        v_kw = T.axis.reduce(T.int64(1), kw_0 + kw_1)
                        T.reads(p0[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)], p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block])
                        T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                        T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                        with T.init():
                            conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = T.float32(0)
                        conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] + p0[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)] * p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block]
                for ax0, ax1, ax2, ax3, ax4 in T.grid(T.int64(1), T.int64(48), T.int64(2), T.int64(14), T.int64(1)):
                    with T.block("T_relu"):
                        v_ax0, v_ax1 = T.axis.remap("SS", [ax0, ax1])
                        v_ax2 = T.axis.spatial(T.int64(14), oh_0 * T.int64(2) + ax2)
                        v_ax3 = T.axis.spatial(T.int64(14), ax3)
                        v_ax4 = T.axis.spatial(T.int64(4), oc_block_0 + ax4)
                        T.reads(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4])
                        T.writes(T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                        T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.max(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] + p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4], T.float32(0))
b0 = sch.get_block(name="conv2d_NCHWc", func_name="main")
b1 = sch.get_block(name="T_add", func_name="main")
b2 = sch.get_block(name="root", func_name="main")
sch.compute_inline(block=b1)
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.tiling_structure", ann_val="SSRSRS")
l3, l4, l5, l6, l7, l8, l9, l10 = sch.get_loops(block=b0)
v11, v12, v13, v14 = sch.sample_perfect_tile(loop=l3, n=4, max_innermost_factor=64, decision=[1, 1, 1, 1])
l15, l16, l17, l18 = sch.split(loop=l3, factors=[v11, v12, v13, v14], preserve_unit_iters=True)
v19, v20, v21, v22 = sch.sample_perfect_tile(loop=l4, n=4, max_innermost_factor=64, decision=[1, 4, 4, 3])
l23, l24, l25, l26 = sch.split(loop=l4, factors=[v19, v20, v21, v22], preserve_unit_iters=True)
v27, v28, v29, v30 = sch.sample_perfect_tile(loop=l5, n=4, max_innermost_factor=64, decision=[7, 1, 1, 2])
l31, l32, l33, l34 = sch.split(loop=l5, factors=[v27, v28, v29, v30], preserve_unit_iters=True)
v35, v36, v37, v38 = sch.sample_perfect_tile(loop=l6, n=4, max_innermost_factor=64, decision=[1, 1, 1, 14])
l39, l40, l41, l42 = sch.split(loop=l6, factors=[v35, v36, v37, v38], preserve_unit_iters=True)
v43, v44, v45, v46 = sch.sample_perfect_tile(loop=l7, n=4, max_innermost_factor=64, decision=[4, 1, 1, 1])
l47, l48, l49, l50 = sch.split(loop=l7, factors=[v43, v44, v45, v46], preserve_unit_iters=True)
v51, v52 = sch.sample_perfect_tile(loop=l8, n=2, max_innermost_factor=64, decision=[90, 16])
l53, l54 = sch.split(loop=l8, factors=[v51, v52], preserve_unit_iters=True)
v55, v56 = sch.sample_perfect_tile(loop=l9, n=2, max_innermost_factor=64, decision=[1, 1])
l57, l58 = sch.split(loop=l9, factors=[v55, v56], preserve_unit_iters=True)
v59, v60 = sch.sample_perfect_tile(loop=l10, n=2, max_innermost_factor=64, decision=[1, 1])
l61, l62 = sch.split(loop=l10, factors=[v59, v60], preserve_unit_iters=True)
sch.reorder(l15, l23, l31, l39, l47, l16, l24, l32, l40, l48, l53, l57, l61, l17, l25, l33, l41, l49, l54, l58, l62, l18, l26, l34, l42, l50)
b63, = sch.get_consumers(block=b0)
sch.reverse_compute_at(block=b63, loop=l47, preserve_unit_loops=True, index=-1)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.vectorize", ann_val=64)
v64 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=2)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.unroll_explicit", ann_val=v64)
2024-04-29 03:33:47 [INFO] [evolutionary_search.cc:713] Generating candidates......
2024-04-29 03:33:47 [INFO] [evolutionary_search.cc:715] Picked top 0 candidate(s) from database
2024-04-29 03:33:49 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0xbc4ec28)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0xd010648)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x107eac48)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0xb99d0d8)]: 0 failure(s)
2024-04-29 03:33:49 [INFO] [evolutionary_search.cc:723] Sampled 512 candidate(s)
2024-04-29 03:33:52 [INFO] [evolutionary_search.cc:621] Evolve iter #0 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0xbc4ec28)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0xd010648)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x107eac48)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0xb99d0d8)]: 0 failure(s)
2024-04-29 03:33:55 [INFO] [evolutionary_search.cc:621] Evolve iter #1 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0xbc4ec28)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0xd010648)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x107eac48)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0xb99d0d8)]: 0 failure(s)
2024-04-29 03:33:58 [INFO] [evolutionary_search.cc:621] Evolve iter #2 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0xbc4ec28)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0xd010648)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x107eac48)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0xb99d0d8)]: 0 failure(s)
2024-04-29 03:34:01 [INFO] [evolutionary_search.cc:621] Evolve iter #3 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0xbc4ec28)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0xd010648)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x107eac48)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0xb99d0d8)]: 0 failure(s)
2024-04-29 03:34:02 [INFO] [evolutionary_search.cc:649] Scores of the best 64 candidates:
[1 : 16]:	0.9999  0.9998  0.9995  0.9992  0.9987  0.9985  0.9979  0.9978  0.9974  0.9970  0.9969  0.9959  0.9953  0.9947  0.9945  0.9940
[17 : 32]:	0.9931  0.9924  0.9921  0.9919  0.9898  0.9888  0.9888  0.9882  0.9876  0.9870  0.9867  0.9864  0.9857  0.9854  0.9851  0.9842
[33 : 48]:	0.9838  0.9820  0.9814  0.9793  0.9793  0.9789  0.9788  0.9774  0.9769  0.9768  0.9764  0.9755  0.9753  0.9739  0.9737  0.9735
[49 : 64]:	0.9735  0.9732  0.9726  0.9720  0.9716  0.9716  0.9709  0.9708  0.9706  0.9701  0.9700  0.9698  0.9689  0.9688  0.9688  0.9686
2024-04-29 03:34:03 [INFO] [evolutionary_search.cc:727] Got 64 candidate(s) with evolutionary search
2024-04-29 03:34:03 [INFO] [evolutionary_search.cc:730] Sending 64 candidates(s) for measurement
2024-04-29 05:05:53 [INFO] [task_scheduler.cc:131] [Task #38: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_37] Trial #1: GFLOPs: 2.8285. Time: 38343.8937 us. Best GFLOPs: 2.8285
2024-04-29 05:05:53 [INFO] [task_scheduler.cc:131] [Task #38: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_37] Trial #2: GFLOPs: 105.6543. Time: 1026.5120 us. Best GFLOPs: 105.6543
2024-04-29 05:05:53 [INFO] [task_scheduler.cc:131] [Task #38: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_37] Trial #3: GFLOPs: 53.7374. Time: 2018.2471 us. Best GFLOPs: 105.6543
2024-04-29 05:05:53 [INFO] [task_scheduler.cc:131] [Task #38: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_37] Trial #4: GFLOPs: 30.3295. Time: 3575.9007 us. Best GFLOPs: 105.6543
2024-04-29 05:05:53 [INFO] [task_scheduler.cc:131] [Task #38: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_37] Trial #5: GFLOPs: 4.2398. Time: 25580.4578 us. Best GFLOPs: 105.6543
2024-04-29 05:05:53 [INFO] [task_scheduler.cc:121] [Task #38: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_37] Trial #6: Error in building:
LocalBuilder: Timeout, killed after 30.0 seconds
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(360), T.int64(14), T.int64(14), T.int64(4)), "float32"), p1: T.Buffer((T.int64(48), T.int64(360), T.int64(1), T.int64(1), T.int64(4), T.int64(4)), "float32"), p2: T.Buffer((T.int64(1), T.int64(48), T.int64(1), T.int64(1), T.int64(4)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(48), T.int64(14), T.int64(14), T.int64(4)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        conv2d_NCHWc = T.alloc_buffer((T.int64(1), T.int64(48), T.int64(14), T.int64(14), T.int64(4)))
        for n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused in T.parallel(T.int64(24), annotations={"pragma_auto_unroll_max_step": 512, "pragma_unroll_explicit": 1}):
            for n_2_init, oc_chunk_2_init, oh_2_init, ow_2_init, oc_block_2_init, n_3_init, oc_chunk_3_init, oh_3_init, ow_3_init in T.grid(T.int64(1), T.int64(4), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(14), T.int64(14)):
                for oc_block_3_fused_init in T.vectorized(T.int64(2)):
                    with T.block("conv2d_NCHWc_init"):
                        v_n = T.axis.spatial(T.int64(1), n_2_init + n_3_init)
                        v_oc_chunk = T.axis.spatial(T.int64(48), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused // T.int64(2) * T.int64(4) + oc_chunk_2_init + oc_chunk_3_init)
                        v_oh = T.axis.spatial(T.int64(14), oh_2_init * T.int64(14) + oh_3_init)
                        v_ow = T.axis.spatial(T.int64(14), ow_2_init * T.int64(14) + ow_3_init)
                        v_oc_block = T.axis.spatial(T.int64(4), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused % T.int64(2) * T.int64(2) + oc_block_2_init * T.int64(2) + oc_block_3_fused_init)
                        T.reads()
                        T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                        T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                        conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = T.float32(0)
            for ic_0, kh_0, kw_0, n_2, oc_chunk_2, oh_2, ow_2, oc_block_2, ic_1, kh_1, kw_1, n_3, oc_chunk_3, oh_3, ow_3 in T.grid(T.int64(180), T.int64(1), T.int64(1), T.int64(1), T.int64(4), T.int64(1), T.int64(1), T.int64(1), T.int64(8), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(14), T.int64(14)):
                for oc_block_3_fused in T.vectorized(T.int64(2)):
                    with T.block("conv2d_NCHWc_update"):
                        v_n = T.axis.spatial(T.int64(1), n_2 + n_3)
                        v_oc_chunk = T.axis.spatial(T.int64(48), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused // T.int64(2) * T.int64(4) + oc_chunk_2 + oc_chunk_3)
                        v_oh = T.axis.spatial(T.int64(14), oh_2 * T.int64(14) + oh_3)
                        v_ow = T.axis.spatial(T.int64(14), ow_2 * T.int64(14) + ow_3)
                        v_oc_block = T.axis.spatial(T.int64(4), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused % T.int64(2) * T.int64(2) + oc_block_2 * T.int64(2) + oc_block_3_fused)
                        v_ic = T.axis.reduce(T.int64(1440), ic_0 * T.int64(8) + ic_1)
                        v_kh = T.axis.reduce(T.int64(1), kh_0 + kh_1)
                        v_kw = T.axis.reduce(T.int64(1), kw_0 + kw_1)
                        T.reads(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block], p0[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)], p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block])
                        T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                        T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                        conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] + p0[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)] * p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block]
            for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(4), T.int64(14), T.int64(14)):
                for ax4_fused in T.vectorized(T.int64(2)):
                    with T.block("T_relu"):
                        v_ax0 = T.axis.spatial(T.int64(1), ax0)
                        v_ax1 = T.axis.spatial(T.int64(48), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused // T.int64(2) * T.int64(4) + ax1)
                        v_ax2, v_ax3 = T.axis.remap("SS", [ax2, ax3])
                        v_ax4 = T.axis.spatial(T.int64(4), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused % T.int64(2) * T.int64(2) + ax4_fused)
                        T.reads(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4])
                        T.writes(T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                        T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.max(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] + p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4], T.float32(0))
b0 = sch.get_block(name="conv2d_NCHWc", func_name="main")
b1 = sch.get_block(name="T_add", func_name="main")
b2 = sch.get_block(name="root", func_name="main")
sch.compute_inline(block=b1)
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.tiling_structure", ann_val="SSRSRS")
l3, l4, l5, l6, l7, l8, l9, l10 = sch.get_loops(block=b0)
v11, v12, v13, v14 = sch.sample_perfect_tile(loop=l3, n=4, max_innermost_factor=64, decision=[1, 1, 1, 1])
l15, l16, l17, l18 = sch.split(loop=l3, factors=[v11, v12, v13, v14], preserve_unit_iters=True)
v19, v20, v21, v22 = sch.sample_perfect_tile(loop=l4, n=4, max_innermost_factor=64, decision=[1, 12, 4, 1])
l23, l24, l25, l26 = sch.split(loop=l4, factors=[v19, v20, v21, v22], preserve_unit_iters=True)
v27, v28, v29, v30 = sch.sample_perfect_tile(loop=l5, n=4, max_innermost_factor=64, decision=[1, 1, 1, 14])
l31, l32, l33, l34 = sch.split(loop=l5, factors=[v27, v28, v29, v30], preserve_unit_iters=True)
v35, v36, v37, v38 = sch.sample_perfect_tile(loop=l6, n=4, max_innermost_factor=64, decision=[1, 1, 1, 14])
l39, l40, l41, l42 = sch.split(loop=l6, factors=[v35, v36, v37, v38], preserve_unit_iters=True)
v43, v44, v45, v46 = sch.sample_perfect_tile(loop=l7, n=4, max_innermost_factor=64, decision=[1, 2, 1, 2])
l47, l48, l49, l50 = sch.split(loop=l7, factors=[v43, v44, v45, v46], preserve_unit_iters=True)
v51, v52 = sch.sample_perfect_tile(loop=l8, n=2, max_innermost_factor=64, decision=[180, 8])
l53, l54 = sch.split(loop=l8, factors=[v51, v52], preserve_unit_iters=True)
v55, v56 = sch.sample_perfect_tile(loop=l9, n=2, max_innermost_factor=64, decision=[1, 1])
l57, l58 = sch.split(loop=l9, factors=[v55, v56], preserve_unit_iters=True)
v59, v60 = sch.sample_perfect_tile(loop=l10, n=2, max_innermost_factor=64, decision=[1, 1])
l61, l62 = sch.split(loop=l10, factors=[v59, v60], preserve_unit_iters=True)
sch.reorder(l15, l23, l31, l39, l47, l16, l24, l32, l40, l48, l53, l57, l61, l17, l25, l33, l41, l49, l54, l58, l62, l18, l26, l34, l42, l50)
b63, = sch.get_consumers(block=b0)
sch.reverse_compute_at(block=b63, loop=l48, preserve_unit_loops=True, index=-1)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.vectorize", ann_val=64)
v64 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.unroll_explicit", ann_val=v64)
sch.enter_postproc()
b65 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b65, ann_key="meta_schedule.parallel")
sch.unannotate(block_or_loop=b65, ann_key="meta_schedule.vectorize")
sch.unannotate(block_or_loop=b65, ann_key="meta_schedule.unroll_explicit")
b66, b67 = sch.get_child_blocks(b65)
l68, l69, l70, l71, l72, l73, l74, l75, l76, l77, l78, l79, l80, l81, l82, l83, l84, l85, l86, l87, l88, l89, l90, l91, l92, l93 = sch.get_loops(block=b66)
l94 = sch.fuse(l68, l69, l70, l71, l72, l73, l74, l75, l76, l77, preserve_unit_iters=True)
sch.parallel(loop=l94)
l95 = sch.fuse(l93, preserve_unit_iters=True)
sch.vectorize(loop=l95)
sch.annotate(block_or_loop=l94, ann_key="pragma_auto_unroll_max_step", ann_val=512)
sch.annotate(block_or_loop=l94, ann_key="pragma_unroll_explicit", ann_val=1)
l96, l97, l98, l99, l100, l101 = sch.get_loops(block=b67)
l102 = sch.fuse(l101, preserve_unit_iters=True)
sch.vectorize(loop=l102)
b103 = sch.get_block(name="conv2d_NCHWc", func_name="main")
l104, l105, l106, l107, l108, l109, l110, l111, l112, l113, l114, l115, l116, l117, l118, l119, l120 = sch.get_loops(block=b103)
b121 = sch.decompose_reduction(block=b103, loop=l105)
2024-04-29 05:05:53 [INFO] [task_scheduler.cc:131] [Task #38: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_37] Trial #7: GFLOPs: 70.3033. Time: 1542.6785 us. Best GFLOPs: 105.6543
2024-04-29 05:05:53 [INFO] [task_scheduler.cc:131] [Task #38: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_37] Trial #8: GFLOPs: 125.8153. Time: 862.0209 us. Best GFLOPs: 125.8153
2024-04-29 05:05:53 [INFO] [task_scheduler.cc:131] [Task #38: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_37] Trial #9: GFLOPs: 26.0580. Time: 4162.0735 us. Best GFLOPs: 125.8153
2024-04-29 05:05:53 [INFO] [task_scheduler.cc:131] [Task #38: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_37] Trial #10: GFLOPs: 6.3779. Time: 17004.9897 us. Best GFLOPs: 125.8153
2024-04-29 05:05:53 [INFO] [task_scheduler.cc:131] [Task #38: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_37] Trial #11: GFLOPs: 28.5130. Time: 3803.7198 us. Best GFLOPs: 125.8153
2024-04-29 05:05:53 [INFO] [task_scheduler.cc:131] [Task #38: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_37] Trial #12: GFLOPs: 0.6400. Time: 169461.3273 us. Best GFLOPs: 125.8153
2024-04-29 05:05:53 [INFO] [task_scheduler.cc:131] [Task #38: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_37] Trial #13: GFLOPs: 27.3709. Time: 3962.4358 us. Best GFLOPs: 125.8153
2024-04-29 05:05:53 [INFO] [task_scheduler.cc:131] [Task #38: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_37] Trial #14: GFLOPs: 34.2216. Time: 3169.2057 us. Best GFLOPs: 125.8153
2024-04-29 05:05:53 [INFO] [task_scheduler.cc:131] [Task #38: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_37] Trial #15: GFLOPs: 148.5634. Time: 730.0278 us. Best GFLOPs: 148.5634
2024-04-29 05:05:53 [INFO] [task_scheduler.cc:131] [Task #38: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_37] Trial #16: GFLOPs: 93.3944. Time: 1161.2620 us. Best GFLOPs: 148.5634
2024-04-29 05:05:53 [INFO] [task_scheduler.cc:131] [Task #38: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_37] Trial #17: GFLOPs: 63.7373. Time: 1701.6004 us. Best GFLOPs: 148.5634
2024-04-29 05:05:53 [INFO] [task_scheduler.cc:131] [Task #38: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_37] Trial #18: GFLOPs: 43.7178. Time: 2480.8089 us. Best GFLOPs: 148.5634
2024-04-29 05:05:53 [INFO] [task_scheduler.cc:131] [Task #38: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_37] Trial #19: GFLOPs: 91.0797. Time: 1190.7752 us. Best GFLOPs: 148.5634
2024-04-29 05:05:53 [INFO] [task_scheduler.cc:131] [Task #38: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_37] Trial #20: GFLOPs: 52.2252. Time: 2076.6881 us. Best GFLOPs: 148.5634
2024-04-29 05:05:53 [INFO] [task_scheduler.cc:131] [Task #38: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_37] Trial #21: GFLOPs: 21.0118. Time: 5161.6414 us. Best GFLOPs: 148.5634
2024-04-29 05:05:53 [INFO] [task_scheduler.cc:131] [Task #38: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_37] Trial #22: GFLOPs: 67.7264. Time: 1601.3752 us. Best GFLOPs: 148.5634
2024-04-29 05:05:53 [INFO] [task_scheduler.cc:131] [Task #38: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_37] Trial #23: GFLOPs: 28.5353. Time: 3800.7513 us. Best GFLOPs: 148.5634
2024-04-29 05:05:53 [INFO] [task_scheduler.cc:131] [Task #38: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_37] Trial #24: GFLOPs: 193.3186. Time: 561.0192 us. Best GFLOPs: 193.3186
2024-04-29 05:05:53 [INFO] [task_scheduler.cc:131] [Task #38: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_37] Trial #25: GFLOPs: 28.9778. Time: 3742.7089 us. Best GFLOPs: 193.3186
2024-04-29 05:05:53 [INFO] [task_scheduler.cc:131] [Task #38: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_37] Trial #26: GFLOPs: 37.8380. Time: 2866.3112 us. Best GFLOPs: 193.3186
2024-04-29 05:05:53 [INFO] [task_scheduler.cc:131] [Task #38: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_37] Trial #27: GFLOPs: 55.2810. Time: 1961.8947 us. Best GFLOPs: 193.3186
2024-04-29 05:05:53 [INFO] [task_scheduler.cc:131] [Task #38: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_37] Trial #28: GFLOPs: 20.6471. Time: 5252.8053 us. Best GFLOPs: 193.3186
2024-04-29 05:05:53 [INFO] [task_scheduler.cc:131] [Task #38: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_37] Trial #29: GFLOPs: 72.8758. Time: 1488.2226 us. Best GFLOPs: 193.3186
2024-04-29 05:05:53 [INFO] [task_scheduler.cc:131] [Task #38: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_37] Trial #30: GFLOPs: 39.6013. Time: 2738.6822 us. Best GFLOPs: 193.3186
2024-04-29 05:05:53 [INFO] [task_scheduler.cc:131] [Task #38: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_37] Trial #31: GFLOPs: 6.6801. Time: 16235.6954 us. Best GFLOPs: 193.3186
2024-04-29 05:05:53 [INFO] [task_scheduler.cc:131] [Task #38: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_37] Trial #32: GFLOPs: 4.4409. Time: 24421.8216 us. Best GFLOPs: 193.3186
2024-04-29 05:05:53 [INFO] [task_scheduler.cc:131] [Task #38: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_37] Trial #33: GFLOPs: 15.8894. Time: 6825.6387 us. Best GFLOPs: 193.3186
2024-04-29 05:05:53 [INFO] [task_scheduler.cc:131] [Task #38: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_37] Trial #34: GFLOPs: 5.4463. Time: 19913.5372 us. Best GFLOPs: 193.3186
2024-04-29 05:05:53 [INFO] [task_scheduler.cc:131] [Task #38: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_37] Trial #35: GFLOPs: 107.9740. Time: 1004.4586 us. Best GFLOPs: 193.3186
2024-04-29 05:05:53 [INFO] [task_scheduler.cc:131] [Task #38: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_37] Trial #36: GFLOPs: 69.8796. Time: 1552.0337 us. Best GFLOPs: 193.3186
2024-04-29 05:05:53 [INFO] [task_scheduler.cc:131] [Task #38: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_37] Trial #37: GFLOPs: 104.4185. Time: 1038.6606 us. Best GFLOPs: 193.3186
2024-04-29 05:05:53 [INFO] [task_scheduler.cc:131] [Task #38: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_37] Trial #38: GFLOPs: 144.7990. Time: 749.0069 us. Best GFLOPs: 193.3186
2024-04-29 05:05:53 [INFO] [task_scheduler.cc:131] [Task #38: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_37] Trial #39: GFLOPs: 37.9846. Time: 2855.2496 us. Best GFLOPs: 193.3186
2024-04-29 05:05:53 [INFO] [task_scheduler.cc:131] [Task #38: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_37] Trial #40: GFLOPs: 1.9554. Time: 55463.7463 us. Best GFLOPs: 193.3186
2024-04-29 05:05:53 [INFO] [task_scheduler.cc:131] [Task #38: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_37] Trial #41: GFLOPs: 26.1195. Time: 4152.2807 us. Best GFLOPs: 193.3186
2024-04-29 05:05:53 [INFO] [task_scheduler.cc:131] [Task #38: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_37] Trial #42: GFLOPs: 153.9792. Time: 704.3512 us. Best GFLOPs: 193.3186
2024-04-29 05:05:53 [INFO] [task_scheduler.cc:131] [Task #38: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_37] Trial #43: GFLOPs: 32.7482. Time: 3311.7995 us. Best GFLOPs: 193.3186
2024-04-29 05:05:53 [INFO] [task_scheduler.cc:131] [Task #38: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_37] Trial #44: GFLOPs: 40.6392. Time: 2668.7372 us. Best GFLOPs: 193.3186
2024-04-29 05:05:53 [INFO] [task_scheduler.cc:131] [Task #38: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_37] Trial #45: GFLOPs: 223.0945. Time: 486.1413 us. Best GFLOPs: 223.0945
2024-04-29 05:05:53 [INFO] [task_scheduler.cc:131] [Task #38: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_37] Trial #46: GFLOPs: 20.2876. Time: 5345.8949 us. Best GFLOPs: 223.0945
2024-04-29 05:05:53 [INFO] [task_scheduler.cc:131] [Task #38: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_37] Trial #47: GFLOPs: 92.4707. Time: 1172.8623 us. Best GFLOPs: 223.0945
2024-04-29 05:05:53 [INFO] [task_scheduler.cc:131] [Task #38: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_37] Trial #48: GFLOPs: 29.7500. Time: 3645.5557 us. Best GFLOPs: 223.0945
2024-04-29 05:05:53 [INFO] [task_scheduler.cc:131] [Task #38: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_37] Trial #49: GFLOPs: 16.0929. Time: 6739.3266 us. Best GFLOPs: 223.0945
2024-04-29 05:05:53 [INFO] [task_scheduler.cc:131] [Task #38: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_37] Trial #50: GFLOPs: 71.1945. Time: 1523.3681 us. Best GFLOPs: 223.0945
2024-04-29 05:05:53 [INFO] [task_scheduler.cc:131] [Task #38: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_37] Trial #51: GFLOPs: 3.4441. Time: 31490.6470 us. Best GFLOPs: 223.0945
2024-04-29 05:05:53 [INFO] [task_scheduler.cc:131] [Task #38: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_37] Trial #52: GFLOPs: 68.9157. Time: 1573.7404 us. Best GFLOPs: 223.0945
2024-04-29 05:05:53 [INFO] [task_scheduler.cc:131] [Task #38: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_37] Trial #53: GFLOPs: 66.2769. Time: 1636.3981 us. Best GFLOPs: 223.0945
2024-04-29 05:05:53 [INFO] [task_scheduler.cc:131] [Task #38: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_37] Trial #54: GFLOPs: 43.6717. Time: 2483.4254 us. Best GFLOPs: 223.0945
2024-04-29 05:05:53 [INFO] [task_scheduler.cc:131] [Task #38: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_37] Trial #55: GFLOPs: 172.9074. Time: 627.2459 us. Best GFLOPs: 223.0945
2024-04-29 05:05:53 [INFO] [task_scheduler.cc:131] [Task #38: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_37] Trial #56: GFLOPs: 93.0245. Time: 1165.8800 us. Best GFLOPs: 223.0945
2024-04-29 05:05:53 [INFO] [task_scheduler.cc:131] [Task #38: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_37] Trial #57: GFLOPs: 85.1057. Time: 1274.3608 us. Best GFLOPs: 223.0945
2024-04-29 05:05:53 [INFO] [task_scheduler.cc:131] [Task #38: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_37] Trial #58: GFLOPs: 32.6248. Time: 3324.3268 us. Best GFLOPs: 223.0945
2024-04-29 05:05:53 [INFO] [task_scheduler.cc:131] [Task #38: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_37] Trial #59: GFLOPs: 45.5600. Time: 2380.4960 us. Best GFLOPs: 223.0945
2024-04-29 05:05:53 [INFO] [task_scheduler.cc:131] [Task #38: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_37] Trial #60: GFLOPs: 9.5018. Time: 11414.1421 us. Best GFLOPs: 223.0945
2024-04-29 05:05:53 [INFO] [task_scheduler.cc:131] [Task #38: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_37] Trial #61: GFLOPs: 27.5245. Time: 3940.3249 us. Best GFLOPs: 223.0945
2024-04-29 05:05:53 [INFO] [task_scheduler.cc:131] [Task #38: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_37] Trial #62: GFLOPs: 95.7201. Time: 1133.0481 us. Best GFLOPs: 223.0945
2024-04-29 05:05:53 [INFO] [task_scheduler.cc:131] [Task #38: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_37] Trial #63: GFLOPs: 3.4108. Time: 31797.7950 us. Best GFLOPs: 223.0945
2024-04-29 05:05:53 [INFO] [task_scheduler.cc:131] [Task #38: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_37] Trial #64: GFLOPs: 39.1206. Time: 2772.3356 us. Best GFLOPs: 223.0945
