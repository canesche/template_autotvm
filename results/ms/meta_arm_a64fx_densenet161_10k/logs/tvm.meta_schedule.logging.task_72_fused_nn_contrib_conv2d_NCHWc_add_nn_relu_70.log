2024-04-29 02:33:02 [INFO] [task_scheduler.cc:160] Initializing Task #72: "fused_nn_contrib_conv2d_NCHWc_add_nn_relu_70"
2024-04-29 02:33:02 [INFO] [task_scheduler.cc:35] 
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(60), T.int64(28), T.int64(28), T.int64(4)), "float32"), p1: T.Buffer((T.int64(48), T.int64(60), T.int64(1), T.int64(1), T.int64(4), T.int64(4)), "float32"), p2: T.Buffer((T.int64(1), T.int64(48), T.int64(1), T.int64(1), T.int64(4)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(48), T.int64(28), T.int64(28), T.int64(4)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        conv2d_NCHWc = T.alloc_buffer((T.int64(1), T.int64(48), T.int64(28), T.int64(28), T.int64(4)))
        T_add = T.alloc_buffer((T.int64(1), T.int64(48), T.int64(28), T.int64(28), T.int64(4)))
        for n, oc_chunk, oh, ow, oc_block, ic, kh, kw in T.grid(T.int64(1), T.int64(48), T.int64(28), T.int64(28), T.int64(4), T.int64(240), T.int64(1), T.int64(1)):
            with T.block("conv2d_NCHWc"):
                v_n, v_oc_chunk, v_oh, v_ow, v_oc_block, v_ic, v_kh, v_kw = T.axis.remap("SSSSSRRR", [n, oc_chunk, oh, ow, oc_block, ic, kh, kw])
                T.reads(p0[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)], p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block])
                T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                with T.init():
                    conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = T.float32(0)
                conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] + p0[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)] * p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block]
        for ax0, ax1, ax2, ax3, ax4 in T.grid(T.int64(1), T.int64(48), T.int64(28), T.int64(28), T.int64(4)):
            with T.block("T_add"):
                v_ax0, v_ax1, v_ax2, v_ax3, v_ax4 = T.axis.remap("SSSSS", [ax0, ax1, ax2, ax3, ax4])
                T.reads(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4])
                T.writes(T_add[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                T_add[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] + p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4]
        for ax0, ax1, ax2, ax3, ax4 in T.grid(T.int64(1), T.int64(48), T.int64(28), T.int64(28), T.int64(4)):
            with T.block("T_relu"):
                v_ax0, v_ax1, v_ax2, v_ax3, v_ax4 = T.axis.remap("SSSSS", [ax0, ax1, ax2, ax3, ax4])
                T.reads(T_add[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                T.writes(T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.max(T_add[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], T.float32(0))
2024-04-29 02:33:02 [INFO] [task_scheduler.cc:164] Total 3 design space(s) generated
2024-04-29 02:33:02 [INFO] [task_scheduler.cc:170] Design space #0:
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(60), T.int64(28), T.int64(28), T.int64(4)), "float32"), p1: T.Buffer((T.int64(48), T.int64(60), T.int64(1), T.int64(1), T.int64(4), T.int64(4)), "float32"), p2: T.Buffer((T.int64(1), T.int64(48), T.int64(1), T.int64(1), T.int64(4)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(48), T.int64(28), T.int64(28), T.int64(4)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        with T.block("root"):
            T.reads()
            T.writes()
            T.block_attr({"meta_schedule.parallel": 768, "meta_schedule.unroll_explicit": 16, "meta_schedule.vectorize": 64})
            conv2d_NCHWc = T.alloc_buffer((T.int64(1), T.int64(48), T.int64(28), T.int64(28), T.int64(4)))
            for n_0, oc_chunk_0, oh_0, ow_0, oc_block_0, n_1, oc_chunk_1, oh_1, ow_1, oc_block_1, ic_0, kh_0, kw_0, n_2, oc_chunk_2, oh_2, ow_2, oc_block_2, ic_1, kh_1, kw_1, n_3, oc_chunk_3, oh_3, ow_3, oc_block_3 in T.grid(T.int64(1), T.int64(1), T.int64(2), T.int64(2), T.int64(2), T.int64(1), T.int64(3), T.int64(1), T.int64(1), T.int64(1), T.int64(8), T.int64(1), T.int64(1), T.int64(1), T.int64(4), T.int64(14), T.int64(14), T.int64(1), T.int64(30), T.int64(1), T.int64(1), T.int64(1), T.int64(4), T.int64(1), T.int64(1), T.int64(2)):
                with T.block("conv2d_NCHWc"):
                    v_n = T.axis.spatial(T.int64(1), n_0 + n_1 + n_2 + n_3)
                    v_oc_chunk = T.axis.spatial(T.int64(48), oc_chunk_0 * T.int64(48) + oc_chunk_1 * T.int64(16) + oc_chunk_2 * T.int64(4) + oc_chunk_3)
                    v_oh = T.axis.spatial(T.int64(28), oh_0 * T.int64(14) + oh_1 * T.int64(14) + oh_2 + oh_3)
                    v_ow = T.axis.spatial(T.int64(28), ow_0 * T.int64(14) + ow_1 * T.int64(14) + ow_2 + ow_3)
                    v_oc_block = T.axis.spatial(T.int64(4), oc_block_0 * T.int64(2) + oc_block_1 * T.int64(2) + oc_block_2 * T.int64(2) + oc_block_3)
                    v_ic = T.axis.reduce(T.int64(240), ic_0 * T.int64(30) + ic_1)
                    v_kh = T.axis.reduce(T.int64(1), kh_0 + kh_1)
                    v_kw = T.axis.reduce(T.int64(1), kw_0 + kw_1)
                    T.reads(p0[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)], p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block])
                    T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                    T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                    with T.init():
                        conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = T.float32(0)
                    conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] + p0[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)] * p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block]
            for ax0, ax1, ax2, ax3, ax4 in T.grid(T.int64(1), T.int64(48), T.int64(28), T.int64(28), T.int64(4)):
                with T.block("T_relu"):
                    v_ax0, v_ax1, v_ax2, v_ax3, v_ax4 = T.axis.remap("SSSSS", [ax0, ax1, ax2, ax3, ax4])
                    T.reads(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4])
                    T.writes(T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                    T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.max(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] + p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4], T.float32(0))
b0 = sch.get_block(name="conv2d_NCHWc", func_name="main")
b1 = sch.get_block(name="T_add", func_name="main")
b2 = sch.get_block(name="root", func_name="main")
sch.compute_inline(block=b1)
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.tiling_structure", ann_val="SSRSRS")
l3, l4, l5, l6, l7, l8, l9, l10 = sch.get_loops(block=b0)
v11, v12, v13, v14 = sch.sample_perfect_tile(loop=l3, n=4, max_innermost_factor=64, decision=[1, 1, 1, 1])
l15, l16, l17, l18 = sch.split(loop=l3, factors=[v11, v12, v13, v14], preserve_unit_iters=True)
v19, v20, v21, v22 = sch.sample_perfect_tile(loop=l4, n=4, max_innermost_factor=64, decision=[1, 3, 4, 4])
l23, l24, l25, l26 = sch.split(loop=l4, factors=[v19, v20, v21, v22], preserve_unit_iters=True)
v27, v28, v29, v30 = sch.sample_perfect_tile(loop=l5, n=4, max_innermost_factor=64, decision=[2, 1, 14, 1])
l31, l32, l33, l34 = sch.split(loop=l5, factors=[v27, v28, v29, v30], preserve_unit_iters=True)
v35, v36, v37, v38 = sch.sample_perfect_tile(loop=l6, n=4, max_innermost_factor=64, decision=[2, 1, 14, 1])
l39, l40, l41, l42 = sch.split(loop=l6, factors=[v35, v36, v37, v38], preserve_unit_iters=True)
v43, v44, v45, v46 = sch.sample_perfect_tile(loop=l7, n=4, max_innermost_factor=64, decision=[2, 1, 1, 2])
l47, l48, l49, l50 = sch.split(loop=l7, factors=[v43, v44, v45, v46], preserve_unit_iters=True)
v51, v52 = sch.sample_perfect_tile(loop=l8, n=2, max_innermost_factor=64, decision=[8, 30])
l53, l54 = sch.split(loop=l8, factors=[v51, v52], preserve_unit_iters=True)
v55, v56 = sch.sample_perfect_tile(loop=l9, n=2, max_innermost_factor=64, decision=[1, 1])
l57, l58 = sch.split(loop=l9, factors=[v55, v56], preserve_unit_iters=True)
v59, v60 = sch.sample_perfect_tile(loop=l10, n=2, max_innermost_factor=64, decision=[1, 1])
l61, l62 = sch.split(loop=l10, factors=[v59, v60], preserve_unit_iters=True)
sch.reorder(l15, l23, l31, l39, l47, l16, l24, l32, l40, l48, l53, l57, l61, l17, l25, l33, l41, l49, l54, l58, l62, l18, l26, l34, l42, l50)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.vectorize", ann_val=64)
v63 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=1)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.unroll_explicit", ann_val=v63)
2024-04-29 02:33:02 [INFO] [task_scheduler.cc:170] Design space #1:
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(60), T.int64(28), T.int64(28), T.int64(4)), "float32"), p1: T.Buffer((T.int64(48), T.int64(60), T.int64(1), T.int64(1), T.int64(4), T.int64(4)), "float32"), p2: T.Buffer((T.int64(1), T.int64(48), T.int64(1), T.int64(1), T.int64(4)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(48), T.int64(28), T.int64(28), T.int64(4)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        with T.block("root"):
            T.reads()
            T.writes()
            T.block_attr({"meta_schedule.parallel": 768, "meta_schedule.unroll_explicit": 512, "meta_schedule.vectorize": 64})
            conv2d_NCHWc = T.alloc_buffer((T.int64(1), T.int64(48), T.int64(28), T.int64(28), T.int64(4)))
            for n_0, oc_chunk_0, oh_0, ow_0, oc_block_0, n_1, oc_chunk_1, oh_1, ow_1, oc_block_1 in T.grid(T.int64(1), T.int64(1), T.int64(2), T.int64(2), T.int64(2), T.int64(1), T.int64(3), T.int64(1), T.int64(1), T.int64(1)):
                for ic_0, kh_0, kw_0, n_2, oc_chunk_2, oh_2, ow_2, oc_block_2, ic_1, kh_1, kw_1, n_3, oc_chunk_3, oh_3, ow_3, oc_block_3 in T.grid(T.int64(8), T.int64(1), T.int64(1), T.int64(1), T.int64(4), T.int64(14), T.int64(14), T.int64(1), T.int64(30), T.int64(1), T.int64(1), T.int64(1), T.int64(4), T.int64(1), T.int64(1), T.int64(2)):
                    with T.block("conv2d_NCHWc"):
                        v_n = T.axis.spatial(T.int64(1), n_0 + n_1 + n_2 + n_3)
                        v_oc_chunk = T.axis.spatial(T.int64(48), oc_chunk_0 * T.int64(48) + oc_chunk_1 * T.int64(16) + oc_chunk_2 * T.int64(4) + oc_chunk_3)
                        v_oh = T.axis.spatial(T.int64(28), oh_0 * T.int64(14) + oh_1 * T.int64(14) + oh_2 + oh_3)
                        v_ow = T.axis.spatial(T.int64(28), ow_0 * T.int64(14) + ow_1 * T.int64(14) + ow_2 + ow_3)
                        v_oc_block = T.axis.spatial(T.int64(4), oc_block_0 * T.int64(2) + oc_block_1 * T.int64(2) + oc_block_2 * T.int64(2) + oc_block_3)
                        v_ic = T.axis.reduce(T.int64(240), ic_0 * T.int64(30) + ic_1)
                        v_kh = T.axis.reduce(T.int64(1), kh_0 + kh_1)
                        v_kw = T.axis.reduce(T.int64(1), kw_0 + kw_1)
                        T.reads(p0[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)], p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block])
                        T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                        T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                        with T.init():
                            conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = T.float32(0)
                        conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] + p0[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)] * p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block]
                for ax0, ax1, ax2, ax3, ax4 in T.grid(T.int64(1), T.int64(16), T.int64(14), T.int64(14), T.int64(2)):
                    with T.block("T_relu"):
                        v_ax0 = T.axis.spatial(T.int64(1), ax0)
                        v_ax1 = T.axis.spatial(T.int64(48), oc_chunk_1 * T.int64(16) + ax1)
                        v_ax2 = T.axis.spatial(T.int64(28), oh_0 * T.int64(14) + ax2)
                        v_ax3 = T.axis.spatial(T.int64(28), ow_0 * T.int64(14) + ax3)
                        v_ax4 = T.axis.spatial(T.int64(4), oc_block_0 * T.int64(2) + ax4)
                        T.reads(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4])
                        T.writes(T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                        T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.max(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] + p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4], T.float32(0))
b0 = sch.get_block(name="conv2d_NCHWc", func_name="main")
b1 = sch.get_block(name="T_add", func_name="main")
b2 = sch.get_block(name="root", func_name="main")
sch.compute_inline(block=b1)
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.tiling_structure", ann_val="SSRSRS")
l3, l4, l5, l6, l7, l8, l9, l10 = sch.get_loops(block=b0)
v11, v12, v13, v14 = sch.sample_perfect_tile(loop=l3, n=4, max_innermost_factor=64, decision=[1, 1, 1, 1])
l15, l16, l17, l18 = sch.split(loop=l3, factors=[v11, v12, v13, v14], preserve_unit_iters=True)
v19, v20, v21, v22 = sch.sample_perfect_tile(loop=l4, n=4, max_innermost_factor=64, decision=[1, 3, 4, 4])
l23, l24, l25, l26 = sch.split(loop=l4, factors=[v19, v20, v21, v22], preserve_unit_iters=True)
v27, v28, v29, v30 = sch.sample_perfect_tile(loop=l5, n=4, max_innermost_factor=64, decision=[2, 1, 14, 1])
l31, l32, l33, l34 = sch.split(loop=l5, factors=[v27, v28, v29, v30], preserve_unit_iters=True)
v35, v36, v37, v38 = sch.sample_perfect_tile(loop=l6, n=4, max_innermost_factor=64, decision=[2, 1, 14, 1])
l39, l40, l41, l42 = sch.split(loop=l6, factors=[v35, v36, v37, v38], preserve_unit_iters=True)
v43, v44, v45, v46 = sch.sample_perfect_tile(loop=l7, n=4, max_innermost_factor=64, decision=[2, 1, 1, 2])
l47, l48, l49, l50 = sch.split(loop=l7, factors=[v43, v44, v45, v46], preserve_unit_iters=True)
v51, v52 = sch.sample_perfect_tile(loop=l8, n=2, max_innermost_factor=64, decision=[8, 30])
l53, l54 = sch.split(loop=l8, factors=[v51, v52], preserve_unit_iters=True)
v55, v56 = sch.sample_perfect_tile(loop=l9, n=2, max_innermost_factor=64, decision=[1, 1])
l57, l58 = sch.split(loop=l9, factors=[v55, v56], preserve_unit_iters=True)
v59, v60 = sch.sample_perfect_tile(loop=l10, n=2, max_innermost_factor=64, decision=[1, 1])
l61, l62 = sch.split(loop=l10, factors=[v59, v60], preserve_unit_iters=True)
sch.reorder(l15, l23, l31, l39, l47, l16, l24, l32, l40, l48, l53, l57, l61, l17, l25, l33, l41, l49, l54, l58, l62, l18, l26, l34, l42, l50)
b63, = sch.get_consumers(block=b0)
sch.reverse_compute_at(block=b63, loop=l48, preserve_unit_loops=True, index=-1)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.vectorize", ann_val=64)
v64 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.unroll_explicit", ann_val=v64)
2024-04-29 02:33:02 [INFO] [task_scheduler.cc:170] Design space #2:
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(60), T.int64(28), T.int64(28), T.int64(4)), "float32"), p1: T.Buffer((T.int64(48), T.int64(60), T.int64(1), T.int64(1), T.int64(4), T.int64(4)), "float32"), p2: T.Buffer((T.int64(1), T.int64(48), T.int64(1), T.int64(1), T.int64(4)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(48), T.int64(28), T.int64(28), T.int64(4)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        with T.block("root"):
            T.reads()
            T.writes()
            T.block_attr({"meta_schedule.parallel": 768, "meta_schedule.unroll_explicit": 512, "meta_schedule.vectorize": 64})
            conv2d_NCHWc = T.alloc_buffer((T.int64(1), T.int64(48), T.int64(28), T.int64(28), T.int64(4)))
            for n_0, oc_chunk_0, oh_0, ow_0, oc_block_0 in T.grid(T.int64(1), T.int64(1), T.int64(2), T.int64(2), T.int64(2)):
                for n_1, oc_chunk_1, oh_1, ow_1, oc_block_1, ic_0, kh_0, kw_0, n_2, oc_chunk_2, oh_2, ow_2, oc_block_2, ic_1, kh_1, kw_1, n_3, oc_chunk_3, oh_3, ow_3, oc_block_3 in T.grid(T.int64(1), T.int64(3), T.int64(1), T.int64(1), T.int64(1), T.int64(8), T.int64(1), T.int64(1), T.int64(1), T.int64(4), T.int64(14), T.int64(14), T.int64(1), T.int64(30), T.int64(1), T.int64(1), T.int64(1), T.int64(4), T.int64(1), T.int64(1), T.int64(2)):
                    with T.block("conv2d_NCHWc"):
                        v_n = T.axis.spatial(T.int64(1), n_0 + n_1 + n_2 + n_3)
                        v_oc_chunk = T.axis.spatial(T.int64(48), oc_chunk_0 * T.int64(48) + oc_chunk_1 * T.int64(16) + oc_chunk_2 * T.int64(4) + oc_chunk_3)
                        v_oh = T.axis.spatial(T.int64(28), oh_0 * T.int64(14) + oh_1 * T.int64(14) + oh_2 + oh_3)
                        v_ow = T.axis.spatial(T.int64(28), ow_0 * T.int64(14) + ow_1 * T.int64(14) + ow_2 + ow_3)
                        v_oc_block = T.axis.spatial(T.int64(4), oc_block_0 * T.int64(2) + oc_block_1 * T.int64(2) + oc_block_2 * T.int64(2) + oc_block_3)
                        v_ic = T.axis.reduce(T.int64(240), ic_0 * T.int64(30) + ic_1)
                        v_kh = T.axis.reduce(T.int64(1), kh_0 + kh_1)
                        v_kw = T.axis.reduce(T.int64(1), kw_0 + kw_1)
                        T.reads(p0[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)], p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block])
                        T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                        T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                        with T.init():
                            conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = T.float32(0)
                        conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] + p0[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)] * p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block]
                for ax0, ax1, ax2, ax3, ax4 in T.grid(T.int64(1), T.int64(48), T.int64(14), T.int64(14), T.int64(2)):
                    with T.block("T_relu"):
                        v_ax0, v_ax1 = T.axis.remap("SS", [ax0, ax1])
                        v_ax2 = T.axis.spatial(T.int64(28), oh_0 * T.int64(14) + ax2)
                        v_ax3 = T.axis.spatial(T.int64(28), ow_0 * T.int64(14) + ax3)
                        v_ax4 = T.axis.spatial(T.int64(4), oc_block_0 * T.int64(2) + ax4)
                        T.reads(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4])
                        T.writes(T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                        T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.max(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] + p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4], T.float32(0))
b0 = sch.get_block(name="conv2d_NCHWc", func_name="main")
b1 = sch.get_block(name="T_add", func_name="main")
b2 = sch.get_block(name="root", func_name="main")
sch.compute_inline(block=b1)
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.tiling_structure", ann_val="SSRSRS")
l3, l4, l5, l6, l7, l8, l9, l10 = sch.get_loops(block=b0)
v11, v12, v13, v14 = sch.sample_perfect_tile(loop=l3, n=4, max_innermost_factor=64, decision=[1, 1, 1, 1])
l15, l16, l17, l18 = sch.split(loop=l3, factors=[v11, v12, v13, v14], preserve_unit_iters=True)
v19, v20, v21, v22 = sch.sample_perfect_tile(loop=l4, n=4, max_innermost_factor=64, decision=[1, 3, 4, 4])
l23, l24, l25, l26 = sch.split(loop=l4, factors=[v19, v20, v21, v22], preserve_unit_iters=True)
v27, v28, v29, v30 = sch.sample_perfect_tile(loop=l5, n=4, max_innermost_factor=64, decision=[2, 1, 14, 1])
l31, l32, l33, l34 = sch.split(loop=l5, factors=[v27, v28, v29, v30], preserve_unit_iters=True)
v35, v36, v37, v38 = sch.sample_perfect_tile(loop=l6, n=4, max_innermost_factor=64, decision=[2, 1, 14, 1])
l39, l40, l41, l42 = sch.split(loop=l6, factors=[v35, v36, v37, v38], preserve_unit_iters=True)
v43, v44, v45, v46 = sch.sample_perfect_tile(loop=l7, n=4, max_innermost_factor=64, decision=[2, 1, 1, 2])
l47, l48, l49, l50 = sch.split(loop=l7, factors=[v43, v44, v45, v46], preserve_unit_iters=True)
v51, v52 = sch.sample_perfect_tile(loop=l8, n=2, max_innermost_factor=64, decision=[8, 30])
l53, l54 = sch.split(loop=l8, factors=[v51, v52], preserve_unit_iters=True)
v55, v56 = sch.sample_perfect_tile(loop=l9, n=2, max_innermost_factor=64, decision=[1, 1])
l57, l58 = sch.split(loop=l9, factors=[v55, v56], preserve_unit_iters=True)
v59, v60 = sch.sample_perfect_tile(loop=l10, n=2, max_innermost_factor=64, decision=[1, 1])
l61, l62 = sch.split(loop=l10, factors=[v59, v60], preserve_unit_iters=True)
sch.reorder(l15, l23, l31, l39, l47, l16, l24, l32, l40, l48, l53, l57, l61, l17, l25, l33, l41, l49, l54, l58, l62, l18, l26, l34, l42, l50)
b63, = sch.get_consumers(block=b0)
sch.reverse_compute_at(block=b63, loop=l47, preserve_unit_loops=True, index=-1)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.vectorize", ann_val=64)
v64 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.unroll_explicit", ann_val=v64)
2024-04-29 04:26:43 [INFO] [evolutionary_search.cc:713] Generating candidates......
2024-04-29 04:26:43 [INFO] [evolutionary_search.cc:715] Picked top 0 candidate(s) from database
2024-04-29 04:26:46 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0xa098d78)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x11bd6218)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x70986b8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0xdb73c08)]: 0 failure(s)
2024-04-29 04:26:46 [INFO] [evolutionary_search.cc:723] Sampled 512 candidate(s)
2024-04-29 04:26:49 [INFO] [evolutionary_search.cc:621] Evolve iter #0 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0xa098d78)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x11bd6218)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x70986b8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0xdb73c08)]: 0 failure(s)
2024-04-29 04:26:52 [INFO] [evolutionary_search.cc:621] Evolve iter #1 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0xa098d78)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x11bd6218)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x70986b8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0xdb73c08)]: 0 failure(s)
2024-04-29 04:26:55 [INFO] [evolutionary_search.cc:621] Evolve iter #2 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0xa098d78)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x11bd6218)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x70986b8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0xdb73c08)]: 0 failure(s)
2024-04-29 04:26:58 [INFO] [evolutionary_search.cc:621] Evolve iter #3 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0xa098d78)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x11bd6218)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x70986b8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0xdb73c08)]: 0 failure(s)
2024-04-29 04:26:59 [INFO] [evolutionary_search.cc:649] Scores of the best 64 candidates:
[1 : 16]:	0.9998  0.9996  0.9992  0.9988  0.9985  0.9984  0.9979  0.9962  0.9954  0.9953  0.9950  0.9947  0.9941  0.9934  0.9934  0.9926
[17 : 32]:	0.9925  0.9919  0.9915  0.9915  0.9905  0.9903  0.9893  0.9892  0.9888  0.9875  0.9866  0.9859  0.9856  0.9849  0.9847  0.9845
[33 : 48]:	0.9843  0.9838  0.9830  0.9828  0.9817  0.9811  0.9809  0.9808  0.9804  0.9802  0.9800  0.9799  0.9791  0.9785  0.9778  0.9769
[49 : 64]:	0.9762  0.9761  0.9757  0.9752  0.9743  0.9741  0.9722  0.9722  0.9715  0.9714  0.9713  0.9710  0.9704  0.9696  0.9690  0.9688
2024-04-29 04:27:00 [INFO] [evolutionary_search.cc:727] Got 64 candidate(s) with evolutionary search
2024-04-29 04:27:00 [INFO] [evolutionary_search.cc:730] Sending 64 candidates(s) for measurement
2024-04-29 05:10:19 [INFO] [task_scheduler.cc:131] [Task #72: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_70] Trial #1: GFLOPs: 16.8103. Time: 4316.0708 us. Best GFLOPs: 16.8103
2024-04-29 05:10:19 [INFO] [task_scheduler.cc:131] [Task #72: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_70] Trial #2: GFLOPs: 91.1974. Time: 795.5762 us. Best GFLOPs: 91.1974
2024-04-29 05:10:19 [INFO] [task_scheduler.cc:131] [Task #72: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_70] Trial #3: GFLOPs: 28.9409. Time: 2506.9876 us. Best GFLOPs: 91.1974
2024-04-29 05:10:19 [INFO] [task_scheduler.cc:131] [Task #72: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_70] Trial #4: GFLOPs: 77.6631. Time: 934.2213 us. Best GFLOPs: 91.1974
2024-04-29 05:10:19 [INFO] [task_scheduler.cc:131] [Task #72: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_70] Trial #5: GFLOPs: 67.8190. Time: 1069.8252 us. Best GFLOPs: 91.1974
2024-04-29 05:10:19 [INFO] [task_scheduler.cc:131] [Task #72: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_70] Trial #6: GFLOPs: 72.5349. Time: 1000.2696 us. Best GFLOPs: 91.1974
2024-04-29 05:10:19 [INFO] [task_scheduler.cc:131] [Task #72: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_70] Trial #7: GFLOPs: 177.4456. Time: 408.8830 us. Best GFLOPs: 177.4456
2024-04-29 05:10:19 [INFO] [task_scheduler.cc:131] [Task #72: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_70] Trial #8: GFLOPs: 7.8755. Time: 9212.6567 us. Best GFLOPs: 177.4456
2024-04-29 05:10:19 [INFO] [task_scheduler.cc:131] [Task #72: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_70] Trial #9: GFLOPs: 99.4334. Time: 729.6793 us. Best GFLOPs: 177.4456
2024-04-29 05:10:19 [INFO] [task_scheduler.cc:131] [Task #72: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_70] Trial #10: GFLOPs: 81.3982. Time: 891.3531 us. Best GFLOPs: 177.4456
2024-04-29 05:10:19 [INFO] [task_scheduler.cc:131] [Task #72: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_70] Trial #11: GFLOPs: 50.9975. Time: 1422.7058 us. Best GFLOPs: 177.4456
2024-04-29 05:10:19 [INFO] [task_scheduler.cc:131] [Task #72: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_70] Trial #12: GFLOPs: 76.6167. Time: 946.9801 us. Best GFLOPs: 177.4456
2024-04-29 05:10:19 [INFO] [task_scheduler.cc:131] [Task #72: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_70] Trial #13: GFLOPs: 11.4896. Time: 6314.8032 us. Best GFLOPs: 177.4456
2024-04-29 05:10:19 [INFO] [task_scheduler.cc:131] [Task #72: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_70] Trial #14: GFLOPs: 86.6315. Time: 837.5068 us. Best GFLOPs: 177.4456
2024-04-29 05:10:19 [INFO] [task_scheduler.cc:131] [Task #72: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_70] Trial #15: GFLOPs: 96.3670. Time: 752.8974 us. Best GFLOPs: 177.4456
2024-04-29 05:10:19 [INFO] [task_scheduler.cc:131] [Task #72: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_70] Trial #16: GFLOPs: 0.9468. Time: 76628.6030 us. Best GFLOPs: 177.4456
2024-04-29 05:10:19 [INFO] [task_scheduler.cc:131] [Task #72: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_70] Trial #17: GFLOPs: 29.8549. Time: 2430.2358 us. Best GFLOPs: 177.4456
2024-04-29 05:10:19 [INFO] [task_scheduler.cc:131] [Task #72: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_70] Trial #18: GFLOPs: 11.1656. Time: 6498.0541 us. Best GFLOPs: 177.4456
2024-04-29 05:10:19 [INFO] [task_scheduler.cc:131] [Task #72: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_70] Trial #19: GFLOPs: 56.8868. Time: 1275.4191 us. Best GFLOPs: 177.4456
2024-04-29 05:10:19 [INFO] [task_scheduler.cc:131] [Task #72: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_70] Trial #20: GFLOPs: 61.7345. Time: 1175.2658 us. Best GFLOPs: 177.4456
2024-04-29 05:10:19 [INFO] [task_scheduler.cc:131] [Task #72: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_70] Trial #21: GFLOPs: 5.0783. Time: 14287.2412 us. Best GFLOPs: 177.4456
2024-04-29 05:10:19 [INFO] [task_scheduler.cc:131] [Task #72: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_70] Trial #22: GFLOPs: 79.3791. Time: 914.0256 us. Best GFLOPs: 177.4456
2024-04-29 05:10:19 [INFO] [task_scheduler.cc:131] [Task #72: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_70] Trial #23: GFLOPs: 12.4079. Time: 5847.4203 us. Best GFLOPs: 177.4456
2024-04-29 05:10:19 [INFO] [task_scheduler.cc:131] [Task #72: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_70] Trial #24: GFLOPs: 97.5295. Time: 743.9238 us. Best GFLOPs: 177.4456
2024-04-29 05:10:19 [INFO] [task_scheduler.cc:131] [Task #72: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_70] Trial #25: GFLOPs: 12.6859. Time: 5719.3112 us. Best GFLOPs: 177.4456
2024-04-29 05:10:19 [INFO] [task_scheduler.cc:131] [Task #72: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_70] Trial #26: GFLOPs: 86.2808. Time: 840.9115 us. Best GFLOPs: 177.4456
2024-04-29 05:10:19 [INFO] [task_scheduler.cc:131] [Task #72: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_70] Trial #27: GFLOPs: 128.1334. Time: 566.2419 us. Best GFLOPs: 177.4456
2024-04-29 05:10:19 [INFO] [task_scheduler.cc:131] [Task #72: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_70] Trial #28: GFLOPs: 72.2082. Time: 1004.7957 us. Best GFLOPs: 177.4456
2024-04-29 05:10:19 [INFO] [task_scheduler.cc:131] [Task #72: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_70] Trial #29: GFLOPs: 6.4748. Time: 11205.6887 us. Best GFLOPs: 177.4456
2024-04-29 05:10:19 [INFO] [task_scheduler.cc:131] [Task #72: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_70] Trial #30: GFLOPs: 4.9777. Time: 14575.8817 us. Best GFLOPs: 177.4456
2024-04-29 05:10:19 [INFO] [task_scheduler.cc:131] [Task #72: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_70] Trial #31: GFLOPs: 105.9740. Time: 684.6441 us. Best GFLOPs: 177.4456
2024-04-29 05:10:19 [INFO] [task_scheduler.cc:131] [Task #72: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_70] Trial #32: GFLOPs: 9.7180. Time: 7465.9941 us. Best GFLOPs: 177.4456
2024-04-29 05:10:19 [INFO] [task_scheduler.cc:131] [Task #72: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_70] Trial #33: GFLOPs: 88.4912. Time: 819.9059 us. Best GFLOPs: 177.4456
2024-04-29 05:10:19 [INFO] [task_scheduler.cc:131] [Task #72: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_70] Trial #34: GFLOPs: 49.4851. Time: 1466.1880 us. Best GFLOPs: 177.4456
2024-04-29 05:10:19 [INFO] [task_scheduler.cc:131] [Task #72: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_70] Trial #35: GFLOPs: 36.4102. Time: 1992.6995 us. Best GFLOPs: 177.4456
2024-04-29 05:10:19 [INFO] [task_scheduler.cc:131] [Task #72: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_70] Trial #36: GFLOPs: 2.9738. Time: 24397.8430 us. Best GFLOPs: 177.4456
2024-04-29 05:10:19 [INFO] [task_scheduler.cc:131] [Task #72: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_70] Trial #37: GFLOPs: 3.9747. Time: 18253.9620 us. Best GFLOPs: 177.4456
2024-04-29 05:10:19 [INFO] [task_scheduler.cc:131] [Task #72: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_70] Trial #38: GFLOPs: 168.6601. Time: 430.1817 us. Best GFLOPs: 177.4456
2024-04-29 05:10:19 [INFO] [task_scheduler.cc:131] [Task #72: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_70] Trial #39: GFLOPs: 106.5929. Time: 680.6694 us. Best GFLOPs: 177.4456
2024-04-29 05:10:19 [INFO] [task_scheduler.cc:131] [Task #72: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_70] Trial #40: GFLOPs: 66.9267. Time: 1084.0887 us. Best GFLOPs: 177.4456
2024-04-29 05:10:19 [INFO] [task_scheduler.cc:131] [Task #72: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_70] Trial #41: GFLOPs: 19.7791. Time: 3668.2321 us. Best GFLOPs: 177.4456
2024-04-29 05:10:19 [INFO] [task_scheduler.cc:131] [Task #72: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_70] Trial #42: GFLOPs: 67.4587. Time: 1075.5389 us. Best GFLOPs: 177.4456
2024-04-29 05:10:19 [INFO] [task_scheduler.cc:131] [Task #72: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_70] Trial #43: GFLOPs: 19.9466. Time: 3637.4357 us. Best GFLOPs: 177.4456
2024-04-29 05:10:19 [INFO] [task_scheduler.cc:131] [Task #72: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_70] Trial #44: GFLOPs: 16.9961. Time: 4268.8903 us. Best GFLOPs: 177.4456
2024-04-29 05:10:19 [INFO] [task_scheduler.cc:131] [Task #72: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_70] Trial #45: GFLOPs: 97.7945. Time: 741.9080 us. Best GFLOPs: 177.4456
2024-04-29 05:10:19 [INFO] [task_scheduler.cc:131] [Task #72: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_70] Trial #46: GFLOPs: 94.7378. Time: 765.8453 us. Best GFLOPs: 177.4456
2024-04-29 05:10:19 [INFO] [task_scheduler.cc:131] [Task #72: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_70] Trial #47: GFLOPs: 128.1940. Time: 565.9744 us. Best GFLOPs: 177.4456
2024-04-29 05:10:19 [INFO] [task_scheduler.cc:131] [Task #72: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_70] Trial #48: GFLOPs: 81.1540. Time: 894.0348 us. Best GFLOPs: 177.4456
2024-04-29 05:10:19 [INFO] [task_scheduler.cc:131] [Task #72: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_70] Trial #49: GFLOPs: 42.2862. Time: 1715.7951 us. Best GFLOPs: 177.4456
2024-04-29 05:10:19 [INFO] [task_scheduler.cc:131] [Task #72: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_70] Trial #50: GFLOPs: 39.9888. Time: 1814.3686 us. Best GFLOPs: 177.4456
2024-04-29 05:10:19 [INFO] [task_scheduler.cc:131] [Task #72: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_70] Trial #51: GFLOPs: 17.5731. Time: 4128.7312 us. Best GFLOPs: 177.4456
2024-04-29 05:10:19 [INFO] [task_scheduler.cc:131] [Task #72: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_70] Trial #52: GFLOPs: 6.8724. Time: 10557.3461 us. Best GFLOPs: 177.4456
2024-04-29 05:10:19 [INFO] [task_scheduler.cc:131] [Task #72: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_70] Trial #53: GFLOPs: 6.5081. Time: 11148.2783 us. Best GFLOPs: 177.4456
2024-04-29 05:10:19 [INFO] [task_scheduler.cc:131] [Task #72: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_70] Trial #54: GFLOPs: 142.3608. Time: 509.6522 us. Best GFLOPs: 177.4456
2024-04-29 05:10:19 [INFO] [task_scheduler.cc:131] [Task #72: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_70] Trial #55: GFLOPs: 34.7771. Time: 2086.2702 us. Best GFLOPs: 177.4456
2024-04-29 05:10:19 [INFO] [task_scheduler.cc:131] [Task #72: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_70] Trial #56: GFLOPs: 20.9370. Time: 3465.3645 us. Best GFLOPs: 177.4456
2024-04-29 05:10:19 [INFO] [task_scheduler.cc:131] [Task #72: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_70] Trial #57: GFLOPs: 43.9032. Time: 1652.6009 us. Best GFLOPs: 177.4456
2024-04-29 05:10:19 [INFO] [task_scheduler.cc:131] [Task #72: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_70] Trial #58: GFLOPs: 20.3913. Time: 3558.1151 us. Best GFLOPs: 177.4456
2024-04-29 05:10:19 [INFO] [task_scheduler.cc:131] [Task #72: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_70] Trial #59: GFLOPs: 67.3501. Time: 1077.2736 us. Best GFLOPs: 177.4456
2024-04-29 05:10:19 [INFO] [task_scheduler.cc:131] [Task #72: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_70] Trial #60: GFLOPs: 122.1270. Time: 594.0904 us. Best GFLOPs: 177.4456
2024-04-29 05:10:19 [INFO] [task_scheduler.cc:131] [Task #72: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_70] Trial #61: GFLOPs: 75.7625. Time: 957.6565 us. Best GFLOPs: 177.4456
2024-04-29 05:10:19 [INFO] [task_scheduler.cc:131] [Task #72: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_70] Trial #62: GFLOPs: 8.7126. Time: 8327.5052 us. Best GFLOPs: 177.4456
2024-04-29 05:10:19 [INFO] [task_scheduler.cc:131] [Task #72: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_70] Trial #63: GFLOPs: 101.9390. Time: 711.7443 us. Best GFLOPs: 177.4456
2024-04-29 05:10:19 [INFO] [task_scheduler.cc:131] [Task #72: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_70] Trial #64: GFLOPs: 44.1307. Time: 1644.0814 us. Best GFLOPs: 177.4456
