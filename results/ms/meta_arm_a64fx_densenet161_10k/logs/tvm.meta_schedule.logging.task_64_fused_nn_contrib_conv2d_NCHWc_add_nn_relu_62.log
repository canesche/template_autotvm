2024-04-29 02:32:30 [INFO] [task_scheduler.cc:160] Initializing Task #64: "fused_nn_contrib_conv2d_NCHWc_add_nn_relu_62"
2024-04-29 02:32:30 [INFO] [task_scheduler.cc:35] 
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(156), T.int64(28), T.int64(28), T.int64(4)), "float32"), p1: T.Buffer((T.int64(48), T.int64(156), T.int64(1), T.int64(1), T.int64(4), T.int64(4)), "float32"), p2: T.Buffer((T.int64(1), T.int64(48), T.int64(1), T.int64(1), T.int64(4)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(48), T.int64(28), T.int64(28), T.int64(4)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        conv2d_NCHWc = T.alloc_buffer((T.int64(1), T.int64(48), T.int64(28), T.int64(28), T.int64(4)))
        T_add = T.alloc_buffer((T.int64(1), T.int64(48), T.int64(28), T.int64(28), T.int64(4)))
        for n, oc_chunk, oh, ow, oc_block, ic, kh, kw in T.grid(T.int64(1), T.int64(48), T.int64(28), T.int64(28), T.int64(4), T.int64(624), T.int64(1), T.int64(1)):
            with T.block("conv2d_NCHWc"):
                v_n, v_oc_chunk, v_oh, v_ow, v_oc_block, v_ic, v_kh, v_kw = T.axis.remap("SSSSSRRR", [n, oc_chunk, oh, ow, oc_block, ic, kh, kw])
                T.reads(p0[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)], p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block])
                T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                with T.init():
                    conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = T.float32(0)
                conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] + p0[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)] * p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block]
        for ax0, ax1, ax2, ax3, ax4 in T.grid(T.int64(1), T.int64(48), T.int64(28), T.int64(28), T.int64(4)):
            with T.block("T_add"):
                v_ax0, v_ax1, v_ax2, v_ax3, v_ax4 = T.axis.remap("SSSSS", [ax0, ax1, ax2, ax3, ax4])
                T.reads(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4])
                T.writes(T_add[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                T_add[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] + p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4]
        for ax0, ax1, ax2, ax3, ax4 in T.grid(T.int64(1), T.int64(48), T.int64(28), T.int64(28), T.int64(4)):
            with T.block("T_relu"):
                v_ax0, v_ax1, v_ax2, v_ax3, v_ax4 = T.axis.remap("SSSSS", [ax0, ax1, ax2, ax3, ax4])
                T.reads(T_add[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                T.writes(T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.max(T_add[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], T.float32(0))
2024-04-29 02:32:30 [INFO] [task_scheduler.cc:164] Total 3 design space(s) generated
2024-04-29 02:32:30 [INFO] [task_scheduler.cc:170] Design space #0:
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(156), T.int64(28), T.int64(28), T.int64(4)), "float32"), p1: T.Buffer((T.int64(48), T.int64(156), T.int64(1), T.int64(1), T.int64(4), T.int64(4)), "float32"), p2: T.Buffer((T.int64(1), T.int64(48), T.int64(1), T.int64(1), T.int64(4)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(48), T.int64(28), T.int64(28), T.int64(4)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        with T.block("root"):
            T.reads()
            T.writes()
            T.block_attr({"meta_schedule.parallel": 768, "meta_schedule.unroll_explicit": 64, "meta_schedule.vectorize": 64})
            conv2d_NCHWc = T.alloc_buffer((T.int64(1), T.int64(48), T.int64(28), T.int64(28), T.int64(4)))
            for n_0, oc_chunk_0, oh_0, ow_0, oc_block_0, n_1, oc_chunk_1, oh_1, ow_1, oc_block_1, ic_0, kh_0, kw_0, n_2, oc_chunk_2, oh_2, ow_2, oc_block_2, ic_1, kh_1, kw_1, n_3, oc_chunk_3, oh_3, ow_3, oc_block_3 in T.grid(T.int64(1), T.int64(16), T.int64(1), T.int64(4), T.int64(1), T.int64(1), T.int64(3), T.int64(14), T.int64(1), T.int64(2), T.int64(208), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(7), T.int64(1), T.int64(3), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(1), T.int64(2)):
                with T.block("conv2d_NCHWc"):
                    v_n = T.axis.spatial(T.int64(1), n_0 + n_1 + n_2 + n_3)
                    v_oc_chunk = T.axis.spatial(T.int64(48), oc_chunk_0 * T.int64(3) + oc_chunk_1 + oc_chunk_2 + oc_chunk_3)
                    v_oh = T.axis.spatial(T.int64(28), oh_0 * T.int64(28) + oh_1 * T.int64(2) + oh_2 * T.int64(2) + oh_3)
                    v_ow = T.axis.spatial(T.int64(28), ow_0 * T.int64(7) + ow_1 * T.int64(7) + ow_2 + ow_3)
                    v_oc_block = T.axis.spatial(T.int64(4), oc_block_0 * T.int64(4) + oc_block_1 * T.int64(2) + oc_block_2 * T.int64(2) + oc_block_3)
                    v_ic = T.axis.reduce(T.int64(624), ic_0 * T.int64(3) + ic_1)
                    v_kh = T.axis.reduce(T.int64(1), kh_0 + kh_1)
                    v_kw = T.axis.reduce(T.int64(1), kw_0 + kw_1)
                    T.reads(p0[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)], p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block])
                    T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                    T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                    with T.init():
                        conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = T.float32(0)
                    conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] + p0[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)] * p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block]
            for ax0, ax1, ax2, ax3, ax4 in T.grid(T.int64(1), T.int64(48), T.int64(28), T.int64(28), T.int64(4)):
                with T.block("T_relu"):
                    v_ax0, v_ax1, v_ax2, v_ax3, v_ax4 = T.axis.remap("SSSSS", [ax0, ax1, ax2, ax3, ax4])
                    T.reads(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4])
                    T.writes(T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                    T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.max(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] + p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4], T.float32(0))
b0 = sch.get_block(name="conv2d_NCHWc", func_name="main")
b1 = sch.get_block(name="T_add", func_name="main")
b2 = sch.get_block(name="root", func_name="main")
sch.compute_inline(block=b1)
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.tiling_structure", ann_val="SSRSRS")
l3, l4, l5, l6, l7, l8, l9, l10 = sch.get_loops(block=b0)
v11, v12, v13, v14 = sch.sample_perfect_tile(loop=l3, n=4, max_innermost_factor=64, decision=[1, 1, 1, 1])
l15, l16, l17, l18 = sch.split(loop=l3, factors=[v11, v12, v13, v14], preserve_unit_iters=True)
v19, v20, v21, v22 = sch.sample_perfect_tile(loop=l4, n=4, max_innermost_factor=64, decision=[16, 3, 1, 1])
l23, l24, l25, l26 = sch.split(loop=l4, factors=[v19, v20, v21, v22], preserve_unit_iters=True)
v27, v28, v29, v30 = sch.sample_perfect_tile(loop=l5, n=4, max_innermost_factor=64, decision=[1, 14, 1, 2])
l31, l32, l33, l34 = sch.split(loop=l5, factors=[v27, v28, v29, v30], preserve_unit_iters=True)
v35, v36, v37, v38 = sch.sample_perfect_tile(loop=l6, n=4, max_innermost_factor=64, decision=[4, 1, 7, 1])
l39, l40, l41, l42 = sch.split(loop=l6, factors=[v35, v36, v37, v38], preserve_unit_iters=True)
v43, v44, v45, v46 = sch.sample_perfect_tile(loop=l7, n=4, max_innermost_factor=64, decision=[1, 2, 1, 2])
l47, l48, l49, l50 = sch.split(loop=l7, factors=[v43, v44, v45, v46], preserve_unit_iters=True)
v51, v52 = sch.sample_perfect_tile(loop=l8, n=2, max_innermost_factor=64, decision=[208, 3])
l53, l54 = sch.split(loop=l8, factors=[v51, v52], preserve_unit_iters=True)
v55, v56 = sch.sample_perfect_tile(loop=l9, n=2, max_innermost_factor=64, decision=[1, 1])
l57, l58 = sch.split(loop=l9, factors=[v55, v56], preserve_unit_iters=True)
v59, v60 = sch.sample_perfect_tile(loop=l10, n=2, max_innermost_factor=64, decision=[1, 1])
l61, l62 = sch.split(loop=l10, factors=[v59, v60], preserve_unit_iters=True)
sch.reorder(l15, l23, l31, l39, l47, l16, l24, l32, l40, l48, l53, l57, l61, l17, l25, l33, l41, l49, l54, l58, l62, l18, l26, l34, l42, l50)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.vectorize", ann_val=64)
v63 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=2)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.unroll_explicit", ann_val=v63)
2024-04-29 02:32:30 [INFO] [task_scheduler.cc:170] Design space #1:
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(156), T.int64(28), T.int64(28), T.int64(4)), "float32"), p1: T.Buffer((T.int64(48), T.int64(156), T.int64(1), T.int64(1), T.int64(4), T.int64(4)), "float32"), p2: T.Buffer((T.int64(1), T.int64(48), T.int64(1), T.int64(1), T.int64(4)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(48), T.int64(28), T.int64(28), T.int64(4)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        with T.block("root"):
            T.reads()
            T.writes()
            T.block_attr({"meta_schedule.parallel": 768, "meta_schedule.unroll_explicit": 64, "meta_schedule.vectorize": 64})
            conv2d_NCHWc = T.alloc_buffer((T.int64(1), T.int64(48), T.int64(28), T.int64(28), T.int64(4)))
            for n_0, oc_chunk_0, oh_0, ow_0, oc_block_0, n_1, oc_chunk_1, oh_1, ow_1, oc_block_1 in T.grid(T.int64(1), T.int64(16), T.int64(1), T.int64(4), T.int64(1), T.int64(1), T.int64(3), T.int64(14), T.int64(1), T.int64(2)):
                for ic_0, kh_0, kw_0, n_2, oc_chunk_2, oh_2, ow_2, oc_block_2, ic_1, kh_1, kw_1, n_3, oc_chunk_3, oh_3, ow_3, oc_block_3 in T.grid(T.int64(208), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(7), T.int64(1), T.int64(3), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(1), T.int64(2)):
                    with T.block("conv2d_NCHWc"):
                        v_n = T.axis.spatial(T.int64(1), n_0 + n_1 + n_2 + n_3)
                        v_oc_chunk = T.axis.spatial(T.int64(48), oc_chunk_0 * T.int64(3) + oc_chunk_1 + oc_chunk_2 + oc_chunk_3)
                        v_oh = T.axis.spatial(T.int64(28), oh_0 * T.int64(28) + oh_1 * T.int64(2) + oh_2 * T.int64(2) + oh_3)
                        v_ow = T.axis.spatial(T.int64(28), ow_0 * T.int64(7) + ow_1 * T.int64(7) + ow_2 + ow_3)
                        v_oc_block = T.axis.spatial(T.int64(4), oc_block_0 * T.int64(4) + oc_block_1 * T.int64(2) + oc_block_2 * T.int64(2) + oc_block_3)
                        v_ic = T.axis.reduce(T.int64(624), ic_0 * T.int64(3) + ic_1)
                        v_kh = T.axis.reduce(T.int64(1), kh_0 + kh_1)
                        v_kw = T.axis.reduce(T.int64(1), kw_0 + kw_1)
                        T.reads(p0[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)], p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block])
                        T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                        T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                        with T.init():
                            conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = T.float32(0)
                        conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] + p0[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)] * p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block]
                for ax0, ax1, ax2, ax3, ax4 in T.grid(T.int64(1), T.int64(1), T.int64(2), T.int64(7), T.int64(2)):
                    with T.block("T_relu"):
                        v_ax0 = T.axis.spatial(T.int64(1), ax0)
                        v_ax1 = T.axis.spatial(T.int64(48), oc_chunk_0 * T.int64(3) + oc_chunk_1 + ax1)
                        v_ax2 = T.axis.spatial(T.int64(28), oh_1 * T.int64(2) + ax2)
                        v_ax3 = T.axis.spatial(T.int64(28), ow_0 * T.int64(7) + ax3)
                        v_ax4 = T.axis.spatial(T.int64(4), oc_block_1 * T.int64(2) + ax4)
                        T.reads(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4])
                        T.writes(T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                        T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.max(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] + p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4], T.float32(0))
b0 = sch.get_block(name="conv2d_NCHWc", func_name="main")
b1 = sch.get_block(name="T_add", func_name="main")
b2 = sch.get_block(name="root", func_name="main")
sch.compute_inline(block=b1)
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.tiling_structure", ann_val="SSRSRS")
l3, l4, l5, l6, l7, l8, l9, l10 = sch.get_loops(block=b0)
v11, v12, v13, v14 = sch.sample_perfect_tile(loop=l3, n=4, max_innermost_factor=64, decision=[1, 1, 1, 1])
l15, l16, l17, l18 = sch.split(loop=l3, factors=[v11, v12, v13, v14], preserve_unit_iters=True)
v19, v20, v21, v22 = sch.sample_perfect_tile(loop=l4, n=4, max_innermost_factor=64, decision=[16, 3, 1, 1])
l23, l24, l25, l26 = sch.split(loop=l4, factors=[v19, v20, v21, v22], preserve_unit_iters=True)
v27, v28, v29, v30 = sch.sample_perfect_tile(loop=l5, n=4, max_innermost_factor=64, decision=[1, 14, 1, 2])
l31, l32, l33, l34 = sch.split(loop=l5, factors=[v27, v28, v29, v30], preserve_unit_iters=True)
v35, v36, v37, v38 = sch.sample_perfect_tile(loop=l6, n=4, max_innermost_factor=64, decision=[4, 1, 7, 1])
l39, l40, l41, l42 = sch.split(loop=l6, factors=[v35, v36, v37, v38], preserve_unit_iters=True)
v43, v44, v45, v46 = sch.sample_perfect_tile(loop=l7, n=4, max_innermost_factor=64, decision=[1, 2, 1, 2])
l47, l48, l49, l50 = sch.split(loop=l7, factors=[v43, v44, v45, v46], preserve_unit_iters=True)
v51, v52 = sch.sample_perfect_tile(loop=l8, n=2, max_innermost_factor=64, decision=[208, 3])
l53, l54 = sch.split(loop=l8, factors=[v51, v52], preserve_unit_iters=True)
v55, v56 = sch.sample_perfect_tile(loop=l9, n=2, max_innermost_factor=64, decision=[1, 1])
l57, l58 = sch.split(loop=l9, factors=[v55, v56], preserve_unit_iters=True)
v59, v60 = sch.sample_perfect_tile(loop=l10, n=2, max_innermost_factor=64, decision=[1, 1])
l61, l62 = sch.split(loop=l10, factors=[v59, v60], preserve_unit_iters=True)
sch.reorder(l15, l23, l31, l39, l47, l16, l24, l32, l40, l48, l53, l57, l61, l17, l25, l33, l41, l49, l54, l58, l62, l18, l26, l34, l42, l50)
b63, = sch.get_consumers(block=b0)
sch.reverse_compute_at(block=b63, loop=l48, preserve_unit_loops=True, index=-1)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.vectorize", ann_val=64)
v64 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=2)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.unroll_explicit", ann_val=v64)
2024-04-29 02:32:30 [INFO] [task_scheduler.cc:170] Design space #2:
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(156), T.int64(28), T.int64(28), T.int64(4)), "float32"), p1: T.Buffer((T.int64(48), T.int64(156), T.int64(1), T.int64(1), T.int64(4), T.int64(4)), "float32"), p2: T.Buffer((T.int64(1), T.int64(48), T.int64(1), T.int64(1), T.int64(4)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(48), T.int64(28), T.int64(28), T.int64(4)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        with T.block("root"):
            T.reads()
            T.writes()
            T.block_attr({"meta_schedule.parallel": 768, "meta_schedule.unroll_explicit": 0, "meta_schedule.vectorize": 64})
            conv2d_NCHWc = T.alloc_buffer((T.int64(1), T.int64(48), T.int64(28), T.int64(28), T.int64(4)))
            for n_0, oc_chunk_0, oh_0, ow_0, oc_block_0 in T.grid(T.int64(1), T.int64(16), T.int64(1), T.int64(4), T.int64(1)):
                for n_1, oc_chunk_1, oh_1, ow_1, oc_block_1, ic_0, kh_0, kw_0, n_2, oc_chunk_2, oh_2, ow_2, oc_block_2, ic_1, kh_1, kw_1, n_3, oc_chunk_3, oh_3, ow_3, oc_block_3 in T.grid(T.int64(1), T.int64(3), T.int64(14), T.int64(1), T.int64(2), T.int64(208), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(7), T.int64(1), T.int64(3), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(1), T.int64(2)):
                    with T.block("conv2d_NCHWc"):
                        v_n = T.axis.spatial(T.int64(1), n_0 + n_1 + n_2 + n_3)
                        v_oc_chunk = T.axis.spatial(T.int64(48), oc_chunk_0 * T.int64(3) + oc_chunk_1 + oc_chunk_2 + oc_chunk_3)
                        v_oh = T.axis.spatial(T.int64(28), oh_0 * T.int64(28) + oh_1 * T.int64(2) + oh_2 * T.int64(2) + oh_3)
                        v_ow = T.axis.spatial(T.int64(28), ow_0 * T.int64(7) + ow_1 * T.int64(7) + ow_2 + ow_3)
                        v_oc_block = T.axis.spatial(T.int64(4), oc_block_0 * T.int64(4) + oc_block_1 * T.int64(2) + oc_block_2 * T.int64(2) + oc_block_3)
                        v_ic = T.axis.reduce(T.int64(624), ic_0 * T.int64(3) + ic_1)
                        v_kh = T.axis.reduce(T.int64(1), kh_0 + kh_1)
                        v_kw = T.axis.reduce(T.int64(1), kw_0 + kw_1)
                        T.reads(p0[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)], p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block])
                        T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                        T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                        with T.init():
                            conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = T.float32(0)
                        conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] + p0[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)] * p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block]
                for ax0, ax1, ax2, ax3, ax4 in T.grid(T.int64(1), T.int64(3), T.int64(28), T.int64(7), T.int64(4)):
                    with T.block("T_relu"):
                        v_ax0 = T.axis.spatial(T.int64(1), ax0)
                        v_ax1 = T.axis.spatial(T.int64(48), oc_chunk_0 * T.int64(3) + ax1)
                        v_ax2 = T.axis.spatial(T.int64(28), ax2)
                        v_ax3 = T.axis.spatial(T.int64(28), ow_0 * T.int64(7) + ax3)
                        v_ax4 = T.axis.spatial(T.int64(4), ax4)
                        T.reads(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4])
                        T.writes(T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                        T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.max(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] + p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4], T.float32(0))
b0 = sch.get_block(name="conv2d_NCHWc", func_name="main")
b1 = sch.get_block(name="T_add", func_name="main")
b2 = sch.get_block(name="root", func_name="main")
sch.compute_inline(block=b1)
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.tiling_structure", ann_val="SSRSRS")
l3, l4, l5, l6, l7, l8, l9, l10 = sch.get_loops(block=b0)
v11, v12, v13, v14 = sch.sample_perfect_tile(loop=l3, n=4, max_innermost_factor=64, decision=[1, 1, 1, 1])
l15, l16, l17, l18 = sch.split(loop=l3, factors=[v11, v12, v13, v14], preserve_unit_iters=True)
v19, v20, v21, v22 = sch.sample_perfect_tile(loop=l4, n=4, max_innermost_factor=64, decision=[16, 3, 1, 1])
l23, l24, l25, l26 = sch.split(loop=l4, factors=[v19, v20, v21, v22], preserve_unit_iters=True)
v27, v28, v29, v30 = sch.sample_perfect_tile(loop=l5, n=4, max_innermost_factor=64, decision=[1, 14, 1, 2])
l31, l32, l33, l34 = sch.split(loop=l5, factors=[v27, v28, v29, v30], preserve_unit_iters=True)
v35, v36, v37, v38 = sch.sample_perfect_tile(loop=l6, n=4, max_innermost_factor=64, decision=[4, 1, 7, 1])
l39, l40, l41, l42 = sch.split(loop=l6, factors=[v35, v36, v37, v38], preserve_unit_iters=True)
v43, v44, v45, v46 = sch.sample_perfect_tile(loop=l7, n=4, max_innermost_factor=64, decision=[1, 2, 1, 2])
l47, l48, l49, l50 = sch.split(loop=l7, factors=[v43, v44, v45, v46], preserve_unit_iters=True)
v51, v52 = sch.sample_perfect_tile(loop=l8, n=2, max_innermost_factor=64, decision=[208, 3])
l53, l54 = sch.split(loop=l8, factors=[v51, v52], preserve_unit_iters=True)
v55, v56 = sch.sample_perfect_tile(loop=l9, n=2, max_innermost_factor=64, decision=[1, 1])
l57, l58 = sch.split(loop=l9, factors=[v55, v56], preserve_unit_iters=True)
v59, v60 = sch.sample_perfect_tile(loop=l10, n=2, max_innermost_factor=64, decision=[1, 1])
l61, l62 = sch.split(loop=l10, factors=[v59, v60], preserve_unit_iters=True)
sch.reorder(l15, l23, l31, l39, l47, l16, l24, l32, l40, l48, l53, l57, l61, l17, l25, l33, l41, l49, l54, l58, l62, l18, l26, l34, l42, l50)
b63, = sch.get_consumers(block=b0)
sch.reverse_compute_at(block=b63, loop=l47, preserve_unit_loops=True, index=-1)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.vectorize", ann_val=64)
v64 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=0)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.unroll_explicit", ann_val=v64)
2024-04-29 04:14:11 [INFO] [evolutionary_search.cc:713] Generating candidates......
2024-04-29 04:14:11 [INFO] [evolutionary_search.cc:715] Picked top 0 candidate(s) from database
2024-04-29 04:14:14 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0xd9c1638)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0xc097108)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x70cfe78)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x107f1768)]: 0 failure(s)
2024-04-29 04:14:14 [INFO] [evolutionary_search.cc:723] Sampled 512 candidate(s)
2024-04-29 04:14:17 [INFO] [evolutionary_search.cc:621] Evolve iter #0 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0xd9c1638)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0xc097108)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x70cfe78)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x107f1768)]: 0 failure(s)
2024-04-29 04:14:20 [INFO] [evolutionary_search.cc:621] Evolve iter #1 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0xd9c1638)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0xc097108)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x70cfe78)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x107f1768)]: 0 failure(s)
2024-04-29 04:14:23 [INFO] [evolutionary_search.cc:621] Evolve iter #2 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0xd9c1638)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0xc097108)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x70cfe78)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x107f1768)]: 0 failure(s)
2024-04-29 04:14:26 [INFO] [evolutionary_search.cc:621] Evolve iter #3 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0xd9c1638)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0xc097108)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x70cfe78)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x107f1768)]: 0 failure(s)
2024-04-29 04:14:27 [INFO] [evolutionary_search.cc:649] Scores of the best 64 candidates:
[1 : 16]:	0.9999  0.9999  0.9995  0.9993  0.9993  0.9988  0.9987  0.9982  0.9974  0.9965  0.9964  0.9963  0.9962  0.9955  0.9953  0.9946
[17 : 32]:	0.9940  0.9927  0.9926  0.9924  0.9924  0.9918  0.9918  0.9905  0.9891  0.9878  0.9877  0.9874  0.9862  0.9861  0.9860  0.9849
[33 : 48]:	0.9846  0.9842  0.9838  0.9834  0.9819  0.9817  0.9817  0.9817  0.9816  0.9814  0.9811  0.9809  0.9808  0.9803  0.9799  0.9796
[49 : 64]:	0.9786  0.9774  0.9772  0.9771  0.9764  0.9763  0.9758  0.9758  0.9757  0.9755  0.9751  0.9747  0.9745  0.9745  0.9744  0.9739
2024-04-29 04:14:27 [INFO] [evolutionary_search.cc:727] Got 64 candidate(s) with evolutionary search
2024-04-29 04:14:27 [INFO] [evolutionary_search.cc:730] Sending 64 candidates(s) for measurement
2024-04-29 05:09:10 [INFO] [task_scheduler.cc:131] [Task #64: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_62] Trial #1: GFLOPs: 33.0723. Time: 5689.3574 us. Best GFLOPs: 33.0723
2024-04-29 05:09:10 [INFO] [task_scheduler.cc:131] [Task #64: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_62] Trial #2: GFLOPs: 55.5411. Time: 3387.7599 us. Best GFLOPs: 55.5411
2024-04-29 05:09:11 [INFO] [task_scheduler.cc:131] [Task #64: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_62] Trial #3: GFLOPs: 35.2241. Time: 5341.7913 us. Best GFLOPs: 55.5411
2024-04-29 05:09:11 [INFO] [task_scheduler.cc:121] [Task #64: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_62] Trial #4: Error in building:
LocalBuilder: Timeout, killed after 30.0 seconds
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(156), T.int64(28), T.int64(28), T.int64(4)), "float32"), p1: T.Buffer((T.int64(48), T.int64(156), T.int64(1), T.int64(1), T.int64(4), T.int64(4)), "float32"), p2: T.Buffer((T.int64(1), T.int64(48), T.int64(1), T.int64(1), T.int64(4)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(48), T.int64(28), T.int64(28), T.int64(4)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        conv2d_NCHWc = T.alloc_buffer((T.int64(1), T.int64(48), T.int64(28), T.int64(28), T.int64(4)))
        for n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused in T.parallel(T.int64(768), annotations={"pragma_auto_unroll_max_step": 512, "pragma_unroll_explicit": 1}):
            for n_2_init, oc_chunk_2_init, oh_2_init, ow_2_init, oc_block_2_init, n_3_init, oc_chunk_3_init, oh_3_init, ow_3_init, oc_block_3_init in T.grid(T.int64(1), T.int64(1), T.int64(7), T.int64(7), T.int64(2), T.int64(1), T.int64(1), T.int64(2), T.int64(1), T.int64(1)):
                with T.block("conv2d_NCHWc_init"):
                    v_n = T.axis.spatial(T.int64(1), n_2_init + n_3_init)
                    v_oc_chunk = T.axis.spatial(T.int64(48), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused // T.int64(16) + oc_chunk_2_init + oc_chunk_3_init)
                    v_oh = T.axis.spatial(T.int64(28), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused % T.int64(8) // T.int64(4) * T.int64(14) + oh_2_init * T.int64(2) + oh_3_init)
                    v_ow = T.axis.spatial(T.int64(28), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused % T.int64(4) * T.int64(7) + ow_2_init + ow_3_init)
                    v_oc_block = T.axis.spatial(T.int64(4), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused % T.int64(16) // T.int64(8) * T.int64(2) + oc_block_2_init + oc_block_3_init)
                    T.reads()
                    T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                    T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                    conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = T.float32(0)
            for ic_0, kh_0, kw_0, n_2, oc_chunk_2, oh_2, ow_2, oc_block_2, ic_1, kh_1, kw_1, n_3, oc_chunk_3, oh_3, ow_3, oc_block_3 in T.grid(T.int64(39), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(7), T.int64(7), T.int64(2), T.int64(16), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(1), T.int64(1)):
                with T.block("conv2d_NCHWc_update"):
                    v_n = T.axis.spatial(T.int64(1), n_2 + n_3)
                    v_oc_chunk = T.axis.spatial(T.int64(48), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused // T.int64(16) + oc_chunk_2 + oc_chunk_3)
                    v_oh = T.axis.spatial(T.int64(28), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused % T.int64(8) // T.int64(4) * T.int64(14) + oh_2 * T.int64(2) + oh_3)
                    v_ow = T.axis.spatial(T.int64(28), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused % T.int64(4) * T.int64(7) + ow_2 + ow_3)
                    v_oc_block = T.axis.spatial(T.int64(4), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused % T.int64(16) // T.int64(8) * T.int64(2) + oc_block_2 + oc_block_3)
                    v_ic = T.axis.reduce(T.int64(624), ic_0 * T.int64(16) + ic_1)
                    v_kh = T.axis.reduce(T.int64(1), kh_0 + kh_1)
                    v_kw = T.axis.reduce(T.int64(1), kw_0 + kw_1)
                    T.reads(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block], p0[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)], p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block])
                    T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                    T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                    conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] + p0[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)] * p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block]
        for ax0_ax1_ax2_ax3_ax4_fused_0 in T.parallel(T.int64(2352)):
            for ax0_ax1_ax2_ax3_ax4_fused_1 in T.vectorized(T.int64(64)):
                with T.block("T_relu"):
                    v_ax0 = T.axis.spatial(T.int64(1), T.int64(0))
                    v_ax1 = T.axis.spatial(T.int64(48), (ax0_ax1_ax2_ax3_ax4_fused_0 * T.int64(64) + ax0_ax1_ax2_ax3_ax4_fused_1) // T.int64(3136))
                    v_ax2 = T.axis.spatial(T.int64(28), (ax0_ax1_ax2_ax3_ax4_fused_0 * T.int64(64) + ax0_ax1_ax2_ax3_ax4_fused_1) % T.int64(3136) // T.int64(112))
                    v_ax3 = T.axis.spatial(T.int64(28), (ax0_ax1_ax2_ax3_ax4_fused_0 * T.int64(64) + ax0_ax1_ax2_ax3_ax4_fused_1) % T.int64(112) // T.int64(4))
                    v_ax4 = T.axis.spatial(T.int64(4), (ax0_ax1_ax2_ax3_ax4_fused_0 * T.int64(64) + ax0_ax1_ax2_ax3_ax4_fused_1) % T.int64(4))
                    T.reads(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4])
                    T.writes(T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                    T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.max(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] + p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4], T.float32(0))
b0 = sch.get_block(name="conv2d_NCHWc", func_name="main")
b1 = sch.get_block(name="T_add", func_name="main")
b2 = sch.get_block(name="root", func_name="main")
sch.compute_inline(block=b1)
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.tiling_structure", ann_val="SSRSRS")
l3, l4, l5, l6, l7, l8, l9, l10 = sch.get_loops(block=b0)
v11, v12, v13, v14 = sch.sample_perfect_tile(loop=l3, n=4, max_innermost_factor=64, decision=[1, 1, 1, 1])
l15, l16, l17, l18 = sch.split(loop=l3, factors=[v11, v12, v13, v14], preserve_unit_iters=True)
v19, v20, v21, v22 = sch.sample_perfect_tile(loop=l4, n=4, max_innermost_factor=64, decision=[48, 1, 1, 1])
l23, l24, l25, l26 = sch.split(loop=l4, factors=[v19, v20, v21, v22], preserve_unit_iters=True)
v27, v28, v29, v30 = sch.sample_perfect_tile(loop=l5, n=4, max_innermost_factor=64, decision=[1, 2, 7, 2])
l31, l32, l33, l34 = sch.split(loop=l5, factors=[v27, v28, v29, v30], preserve_unit_iters=True)
v35, v36, v37, v38 = sch.sample_perfect_tile(loop=l6, n=4, max_innermost_factor=64, decision=[1, 4, 7, 1])
l39, l40, l41, l42 = sch.split(loop=l6, factors=[v35, v36, v37, v38], preserve_unit_iters=True)
v43, v44, v45, v46 = sch.sample_perfect_tile(loop=l7, n=4, max_innermost_factor=64, decision=[2, 1, 2, 1])
l47, l48, l49, l50 = sch.split(loop=l7, factors=[v43, v44, v45, v46], preserve_unit_iters=True)
v51, v52 = sch.sample_perfect_tile(loop=l8, n=2, max_innermost_factor=64, decision=[39, 16])
l53, l54 = sch.split(loop=l8, factors=[v51, v52], preserve_unit_iters=True)
v55, v56 = sch.sample_perfect_tile(loop=l9, n=2, max_innermost_factor=64, decision=[1, 1])
l57, l58 = sch.split(loop=l9, factors=[v55, v56], preserve_unit_iters=True)
v59, v60 = sch.sample_perfect_tile(loop=l10, n=2, max_innermost_factor=64, decision=[1, 1])
l61, l62 = sch.split(loop=l10, factors=[v59, v60], preserve_unit_iters=True)
sch.reorder(l15, l23, l31, l39, l47, l16, l24, l32, l40, l48, l53, l57, l61, l17, l25, l33, l41, l49, l54, l58, l62, l18, l26, l34, l42, l50)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.vectorize", ann_val=64)
v63 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.unroll_explicit", ann_val=v63)
sch.enter_postproc()
b64 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b64, ann_key="meta_schedule.parallel")
sch.unannotate(block_or_loop=b64, ann_key="meta_schedule.vectorize")
sch.unannotate(block_or_loop=b64, ann_key="meta_schedule.unroll_explicit")
b65, b66 = sch.get_child_blocks(b64)
l67, l68, l69, l70, l71, l72, l73, l74, l75, l76, l77, l78, l79, l80, l81, l82, l83, l84, l85, l86, l87, l88, l89, l90, l91, l92 = sch.get_loops(block=b65)
l93 = sch.fuse(l67, l68, l69, l70, l71, l72, l73, l74, l75, l76, preserve_unit_iters=True)
sch.parallel(loop=l93)
sch.annotate(block_or_loop=l93, ann_key="pragma_auto_unroll_max_step", ann_val=512)
sch.annotate(block_or_loop=l93, ann_key="pragma_unroll_explicit", ann_val=1)
l94, l95, l96, l97, l98 = sch.get_loops(block=b66)
l99 = sch.fuse(l94, l95, l96, l97, l98, preserve_unit_iters=True)
l100, l101 = sch.split(loop=l99, factors=[None, 64], preserve_unit_iters=True)
sch.parallel(loop=l100)
sch.vectorize(loop=l101)
b102 = sch.get_block(name="conv2d_NCHWc", func_name="main")
l103, l104, l105, l106, l107, l108, l109, l110, l111, l112, l113, l114, l115, l116, l117, l118, l119 = sch.get_loops(block=b102)
b120 = sch.decompose_reduction(block=b102, loop=l104)
2024-04-29 05:09:11 [INFO] [task_scheduler.cc:131] [Task #64: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_62] Trial #5: GFLOPs: 93.5958. Time: 2010.3461 us. Best GFLOPs: 93.5958
2024-04-29 05:09:11 [INFO] [task_scheduler.cc:131] [Task #64: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_62] Trial #6: GFLOPs: 57.7142. Time: 3260.2007 us. Best GFLOPs: 93.5958
2024-04-29 05:09:11 [INFO] [task_scheduler.cc:131] [Task #64: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_62] Trial #7: GFLOPs: 112.6548. Time: 1670.2357 us. Best GFLOPs: 112.6548
2024-04-29 05:09:11 [INFO] [task_scheduler.cc:131] [Task #64: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_62] Trial #8: GFLOPs: 144.8656. Time: 1298.8594 us. Best GFLOPs: 144.8656
2024-04-29 05:09:11 [INFO] [task_scheduler.cc:131] [Task #64: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_62] Trial #9: GFLOPs: 79.6214. Time: 2363.1834 us. Best GFLOPs: 144.8656
2024-04-29 05:09:11 [INFO] [task_scheduler.cc:131] [Task #64: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_62] Trial #10: GFLOPs: 74.2784. Time: 2533.1738 us. Best GFLOPs: 144.8656
2024-04-29 05:09:11 [INFO] [task_scheduler.cc:131] [Task #64: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_62] Trial #11: GFLOPs: 77.8217. Time: 2417.8332 us. Best GFLOPs: 144.8656
2024-04-29 05:09:11 [INFO] [task_scheduler.cc:131] [Task #64: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_62] Trial #12: GFLOPs: 94.9541. Time: 1981.5898 us. Best GFLOPs: 144.8656
2024-04-29 05:09:11 [INFO] [task_scheduler.cc:131] [Task #64: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_62] Trial #13: GFLOPs: 6.2078. Time: 30310.1897 us. Best GFLOPs: 144.8656
2024-04-29 05:09:11 [INFO] [task_scheduler.cc:131] [Task #64: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_62] Trial #14: GFLOPs: 87.5249. Time: 2149.7892 us. Best GFLOPs: 144.8656
2024-04-29 05:09:11 [INFO] [task_scheduler.cc:131] [Task #64: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_62] Trial #15: GFLOPs: 87.6066. Time: 2147.7843 us. Best GFLOPs: 144.8656
2024-04-29 05:09:11 [INFO] [task_scheduler.cc:131] [Task #64: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_62] Trial #16: GFLOPs: 115.3104. Time: 1631.7699 us. Best GFLOPs: 144.8656
2024-04-29 05:09:11 [INFO] [task_scheduler.cc:131] [Task #64: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_62] Trial #17: GFLOPs: 19.3742. Time: 9711.8647 us. Best GFLOPs: 144.8656
2024-04-29 05:09:11 [INFO] [task_scheduler.cc:131] [Task #64: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_62] Trial #18: GFLOPs: 19.6671. Time: 9567.2455 us. Best GFLOPs: 144.8656
2024-04-29 05:09:11 [INFO] [task_scheduler.cc:131] [Task #64: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_62] Trial #19: GFLOPs: 5.4048. Time: 34813.2610 us. Best GFLOPs: 144.8656
2024-04-29 05:09:11 [INFO] [task_scheduler.cc:131] [Task #64: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_62] Trial #20: GFLOPs: 105.0861. Time: 1790.5311 us. Best GFLOPs: 144.8656
2024-04-29 05:09:11 [INFO] [task_scheduler.cc:131] [Task #64: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_62] Trial #21: GFLOPs: 134.4990. Time: 1398.9700 us. Best GFLOPs: 144.8656
2024-04-29 05:09:11 [INFO] [task_scheduler.cc:131] [Task #64: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_62] Trial #22: GFLOPs: 17.7190. Time: 10619.0809 us. Best GFLOPs: 144.8656
2024-04-29 05:09:11 [INFO] [task_scheduler.cc:131] [Task #64: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_62] Trial #23: GFLOPs: 150.1907. Time: 1252.8069 us. Best GFLOPs: 150.1907
2024-04-29 05:09:11 [INFO] [task_scheduler.cc:131] [Task #64: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_62] Trial #24: GFLOPs: 40.6114. Time: 4633.1855 us. Best GFLOPs: 150.1907
2024-04-29 05:09:11 [INFO] [task_scheduler.cc:121] [Task #64: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_62] Trial #25: Error in building:
LocalBuilder: Timeout, killed after 30.0 seconds
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(156), T.int64(28), T.int64(28), T.int64(4)), "float32"), p1: T.Buffer((T.int64(48), T.int64(156), T.int64(1), T.int64(1), T.int64(4), T.int64(4)), "float32"), p2: T.Buffer((T.int64(1), T.int64(48), T.int64(1), T.int64(1), T.int64(4)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(48), T.int64(28), T.int64(28), T.int64(4)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        conv2d_NCHWc = T.alloc_buffer((T.int64(1), T.int64(48), T.int64(28), T.int64(28), T.int64(4)))
        for n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused in T.parallel(T.int64(96), annotations={"pragma_auto_unroll_max_step": 512, "pragma_unroll_explicit": 1}):
            for n_2_init, oc_chunk_2_init, oh_2_init, ow_2_init, oc_block_2_init, n_3_init, oc_chunk_3_init, oh_3_init, ow_3_init, oc_block_3_init in T.grid(T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(4), T.int64(1), T.int64(4), T.int64(14), T.int64(7), T.int64(1)):
                with T.block("conv2d_NCHWc_init"):
                    v_n = T.axis.spatial(T.int64(1), n_2_init + n_3_init)
                    v_oc_chunk = T.axis.spatial(T.int64(48), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused // T.int64(32) * T.int64(16) + n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused % T.int64(16) // T.int64(4) * T.int64(4) + oc_chunk_2_init * T.int64(4) + oc_chunk_3_init)
                    v_oh = T.axis.spatial(T.int64(28), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused % T.int64(32) // T.int64(16) * T.int64(14) + oh_2_init * T.int64(14) + oh_3_init)
                    v_ow = T.axis.spatial(T.int64(28), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused % T.int64(4) * T.int64(7) + ow_2_init * T.int64(7) + ow_3_init)
                    v_oc_block = T.axis.spatial(T.int64(4), oc_block_2_init + oc_block_3_init)
                    T.reads()
                    T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                    T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                    conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = T.float32(0)
            for ic_0, kh_0, kw_0, n_2, oc_chunk_2, oh_2, ow_2, oc_block_2, ic_1, kh_1, kw_1, n_3, oc_chunk_3, oh_3, ow_3, oc_block_3 in T.grid(T.int64(16), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(4), T.int64(39), T.int64(1), T.int64(1), T.int64(1), T.int64(4), T.int64(14), T.int64(7), T.int64(1)):
                with T.block("conv2d_NCHWc_update"):
                    v_n = T.axis.spatial(T.int64(1), n_2 + n_3)
                    v_oc_chunk = T.axis.spatial(T.int64(48), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused // T.int64(32) * T.int64(16) + n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused % T.int64(16) // T.int64(4) * T.int64(4) + oc_chunk_2 * T.int64(4) + oc_chunk_3)
                    v_oh = T.axis.spatial(T.int64(28), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused % T.int64(32) // T.int64(16) * T.int64(14) + oh_2 * T.int64(14) + oh_3)
                    v_ow = T.axis.spatial(T.int64(28), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused % T.int64(4) * T.int64(7) + ow_2 * T.int64(7) + ow_3)
                    v_oc_block = T.axis.spatial(T.int64(4), oc_block_2 + oc_block_3)
                    v_ic = T.axis.reduce(T.int64(624), ic_0 * T.int64(39) + ic_1)
                    v_kh = T.axis.reduce(T.int64(1), kh_0 + kh_1)
                    v_kw = T.axis.reduce(T.int64(1), kw_0 + kw_1)
                    T.reads(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block], p0[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)], p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block])
                    T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                    T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                    conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] + p0[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)] * p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block]
        for ax0_ax1_ax2_ax3_ax4_fused_0 in T.parallel(T.int64(2352)):
            for ax0_ax1_ax2_ax3_ax4_fused_1 in T.vectorized(T.int64(64)):
                with T.block("T_relu"):
                    v_ax0 = T.axis.spatial(T.int64(1), T.int64(0))
                    v_ax1 = T.axis.spatial(T.int64(48), (ax0_ax1_ax2_ax3_ax4_fused_0 * T.int64(64) + ax0_ax1_ax2_ax3_ax4_fused_1) // T.int64(3136))
                    v_ax2 = T.axis.spatial(T.int64(28), (ax0_ax1_ax2_ax3_ax4_fused_0 * T.int64(64) + ax0_ax1_ax2_ax3_ax4_fused_1) % T.int64(3136) // T.int64(112))
                    v_ax3 = T.axis.spatial(T.int64(28), (ax0_ax1_ax2_ax3_ax4_fused_0 * T.int64(64) + ax0_ax1_ax2_ax3_ax4_fused_1) % T.int64(112) // T.int64(4))
                    v_ax4 = T.axis.spatial(T.int64(4), (ax0_ax1_ax2_ax3_ax4_fused_0 * T.int64(64) + ax0_ax1_ax2_ax3_ax4_fused_1) % T.int64(4))
                    T.reads(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4])
                    T.writes(T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                    T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.max(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] + p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4], T.float32(0))
b0 = sch.get_block(name="conv2d_NCHWc", func_name="main")
b1 = sch.get_block(name="T_add", func_name="main")
b2 = sch.get_block(name="root", func_name="main")
sch.compute_inline(block=b1)
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.tiling_structure", ann_val="SSRSRS")
l3, l4, l5, l6, l7, l8, l9, l10 = sch.get_loops(block=b0)
v11, v12, v13, v14 = sch.sample_perfect_tile(loop=l3, n=4, max_innermost_factor=64, decision=[1, 1, 1, 1])
l15, l16, l17, l18 = sch.split(loop=l3, factors=[v11, v12, v13, v14], preserve_unit_iters=True)
v19, v20, v21, v22 = sch.sample_perfect_tile(loop=l4, n=4, max_innermost_factor=64, decision=[3, 4, 1, 4])
l23, l24, l25, l26 = sch.split(loop=l4, factors=[v19, v20, v21, v22], preserve_unit_iters=True)
v27, v28, v29, v30 = sch.sample_perfect_tile(loop=l5, n=4, max_innermost_factor=64, decision=[2, 1, 1, 14])
l31, l32, l33, l34 = sch.split(loop=l5, factors=[v27, v28, v29, v30], preserve_unit_iters=True)
v35, v36, v37, v38 = sch.sample_perfect_tile(loop=l6, n=4, max_innermost_factor=64, decision=[1, 4, 1, 7])
l39, l40, l41, l42 = sch.split(loop=l6, factors=[v35, v36, v37, v38], preserve_unit_iters=True)
v43, v44, v45, v46 = sch.sample_perfect_tile(loop=l7, n=4, max_innermost_factor=64, decision=[1, 1, 4, 1])
l47, l48, l49, l50 = sch.split(loop=l7, factors=[v43, v44, v45, v46], preserve_unit_iters=True)
v51, v52 = sch.sample_perfect_tile(loop=l8, n=2, max_innermost_factor=64, decision=[16, 39])
l53, l54 = sch.split(loop=l8, factors=[v51, v52], preserve_unit_iters=True)
v55, v56 = sch.sample_perfect_tile(loop=l9, n=2, max_innermost_factor=64, decision=[1, 1])
l57, l58 = sch.split(loop=l9, factors=[v55, v56], preserve_unit_iters=True)
v59, v60 = sch.sample_perfect_tile(loop=l10, n=2, max_innermost_factor=64, decision=[1, 1])
l61, l62 = sch.split(loop=l10, factors=[v59, v60], preserve_unit_iters=True)
sch.reorder(l15, l23, l31, l39, l47, l16, l24, l32, l40, l48, l53, l57, l61, l17, l25, l33, l41, l49, l54, l58, l62, l18, l26, l34, l42, l50)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.vectorize", ann_val=64)
v63 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.unroll_explicit", ann_val=v63)
sch.enter_postproc()
b64 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b64, ann_key="meta_schedule.parallel")
sch.unannotate(block_or_loop=b64, ann_key="meta_schedule.vectorize")
sch.unannotate(block_or_loop=b64, ann_key="meta_schedule.unroll_explicit")
b65, b66 = sch.get_child_blocks(b64)
l67, l68, l69, l70, l71, l72, l73, l74, l75, l76, l77, l78, l79, l80, l81, l82, l83, l84, l85, l86, l87, l88, l89, l90, l91, l92 = sch.get_loops(block=b65)
l93 = sch.fuse(l67, l68, l69, l70, l71, l72, l73, l74, l75, l76, preserve_unit_iters=True)
sch.parallel(loop=l93)
sch.annotate(block_or_loop=l93, ann_key="pragma_auto_unroll_max_step", ann_val=512)
sch.annotate(block_or_loop=l93, ann_key="pragma_unroll_explicit", ann_val=1)
l94, l95, l96, l97, l98 = sch.get_loops(block=b66)
l99 = sch.fuse(l94, l95, l96, l97, l98, preserve_unit_iters=True)
l100, l101 = sch.split(loop=l99, factors=[None, 64], preserve_unit_iters=True)
sch.parallel(loop=l100)
sch.vectorize(loop=l101)
b102 = sch.get_block(name="conv2d_NCHWc", func_name="main")
l103, l104, l105, l106, l107, l108, l109, l110, l111, l112, l113, l114, l115, l116, l117, l118, l119 = sch.get_loops(block=b102)
b120 = sch.decompose_reduction(block=b102, loop=l104)
2024-04-29 05:09:11 [INFO] [task_scheduler.cc:131] [Task #64: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_62] Trial #26: GFLOPs: 9.6103. Time: 19578.9923 us. Best GFLOPs: 150.1907
2024-04-29 05:09:11 [INFO] [task_scheduler.cc:131] [Task #64: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_62] Trial #27: GFLOPs: 62.5233. Time: 3009.4363 us. Best GFLOPs: 150.1907
2024-04-29 05:09:11 [INFO] [task_scheduler.cc:131] [Task #64: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_62] Trial #28: GFLOPs: 61.2183. Time: 3073.5919 us. Best GFLOPs: 150.1907
2024-04-29 05:09:11 [INFO] [task_scheduler.cc:131] [Task #64: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_62] Trial #29: GFLOPs: 127.9477. Time: 1470.6008 us. Best GFLOPs: 150.1907
2024-04-29 05:09:11 [INFO] [task_scheduler.cc:131] [Task #64: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_62] Trial #30: GFLOPs: 105.9260. Time: 1776.3346 us. Best GFLOPs: 150.1907
2024-04-29 05:09:11 [INFO] [task_scheduler.cc:131] [Task #64: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_62] Trial #31: GFLOPs: 71.3616. Time: 2636.7105 us. Best GFLOPs: 150.1907
2024-04-29 05:09:11 [INFO] [task_scheduler.cc:131] [Task #64: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_62] Trial #32: GFLOPs: 3.8767. Time: 48535.5153 us. Best GFLOPs: 150.1907
2024-04-29 05:09:11 [INFO] [task_scheduler.cc:131] [Task #64: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_62] Trial #33: GFLOPs: 3.7175. Time: 50614.2447 us. Best GFLOPs: 150.1907
2024-04-29 05:09:11 [INFO] [task_scheduler.cc:131] [Task #64: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_62] Trial #34: GFLOPs: 91.1579. Time: 2064.1098 us. Best GFLOPs: 150.1907
2024-04-29 05:09:11 [INFO] [task_scheduler.cc:131] [Task #64: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_62] Trial #35: GFLOPs: 7.8085. Time: 24096.7024 us. Best GFLOPs: 150.1907
2024-04-29 05:09:11 [INFO] [task_scheduler.cc:131] [Task #64: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_62] Trial #36: GFLOPs: 55.3826. Time: 3397.4600 us. Best GFLOPs: 150.1907
2024-04-29 05:09:11 [INFO] [task_scheduler.cc:131] [Task #64: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_62] Trial #37: GFLOPs: 115.3205. Time: 1631.6267 us. Best GFLOPs: 150.1907
2024-04-29 05:09:11 [INFO] [task_scheduler.cc:121] [Task #64: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_62] Trial #38: Error in building:
LocalBuilder: Timeout, killed after 30.0 seconds
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(156), T.int64(28), T.int64(28), T.int64(4)), "float32"), p1: T.Buffer((T.int64(48), T.int64(156), T.int64(1), T.int64(1), T.int64(4), T.int64(4)), "float32"), p2: T.Buffer((T.int64(1), T.int64(48), T.int64(1), T.int64(1), T.int64(4)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(48), T.int64(28), T.int64(28), T.int64(4)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        conv2d_NCHWc = T.alloc_buffer((T.int64(1), T.int64(48), T.int64(28), T.int64(28), T.int64(4)))
        for n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_fused in T.parallel(T.int64(28), annotations={"pragma_auto_unroll_max_step": 512, "pragma_unroll_explicit": 1}):
            for n_1, oc_chunk_1, oh_1, ow_1, oc_block_1 in T.grid(T.int64(1), T.int64(48), T.int64(1), T.int64(1), T.int64(4)):
                for n_2_init, oc_chunk_2_init, oh_2_init, ow_2_init, oc_block_2_init, n_3_init, oc_chunk_3_init, oh_3_init, ow_3_init, oc_block_3_init in T.grid(T.int64(1), T.int64(1), T.int64(7), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(4), T.int64(1)):
                    with T.block("conv2d_NCHWc_init"):
                        v_n = T.axis.spatial(T.int64(1), n_1 + n_2_init + n_3_init)
                        v_oc_chunk = T.axis.spatial(T.int64(48), oc_chunk_1 + oc_chunk_2_init + oc_chunk_3_init)
                        v_oh = T.axis.spatial(T.int64(28), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_fused // T.int64(7) * T.int64(7) + oh_1 * T.int64(7) + oh_2_init + oh_3_init)
                        v_ow = T.axis.spatial(T.int64(28), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_fused % T.int64(7) * T.int64(4) + ow_1 * T.int64(4) + ow_2_init * T.int64(4) + ow_3_init)
                        v_oc_block = T.axis.spatial(T.int64(4), oc_block_1 + oc_block_2_init + oc_block_3_init)
                        T.reads()
                        T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                        T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                        conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = T.float32(0)
                for ic_0, kh_0, kw_0, n_2, oc_chunk_2, oh_2, ow_2, oc_block_2, ic_1, kh_1, kw_1, n_3, oc_chunk_3, oh_3, ow_3, oc_block_3 in T.grid(T.int64(39), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(7), T.int64(1), T.int64(1), T.int64(16), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(4), T.int64(1)):
                    with T.block("conv2d_NCHWc_update"):
                        v_n = T.axis.spatial(T.int64(1), n_1 + n_2 + n_3)
                        v_oc_chunk = T.axis.spatial(T.int64(48), oc_chunk_1 + oc_chunk_2 + oc_chunk_3)
                        v_oh = T.axis.spatial(T.int64(28), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_fused // T.int64(7) * T.int64(7) + oh_1 * T.int64(7) + oh_2 + oh_3)
                        v_ow = T.axis.spatial(T.int64(28), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_fused % T.int64(7) * T.int64(4) + ow_1 * T.int64(4) + ow_2 * T.int64(4) + ow_3)
                        v_oc_block = T.axis.spatial(T.int64(4), oc_block_1 + oc_block_2 + oc_block_3)
                        v_ic = T.axis.reduce(T.int64(624), ic_0 * T.int64(16) + ic_1)
                        v_kh = T.axis.reduce(T.int64(1), kh_0 + kh_1)
                        v_kw = T.axis.reduce(T.int64(1), kw_0 + kw_1)
                        T.reads(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block], p0[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)], p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block])
                        T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                        T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                        conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] + p0[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)] * p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block]
            for ax0, ax1, ax2 in T.grid(T.int64(1), T.int64(48), T.int64(7)):
                for ax3_ax4_fused in T.vectorized(T.int64(16)):
                    with T.block("T_relu"):
                        v_ax0, v_ax1 = T.axis.remap("SS", [ax0, ax1])
                        v_ax2 = T.axis.spatial(T.int64(28), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_fused // T.int64(7) * T.int64(7) + ax2)
                        v_ax3 = T.axis.spatial(T.int64(28), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_fused % T.int64(7) * T.int64(4) + ax3_ax4_fused // T.int64(4))
                        v_ax4 = T.axis.spatial(T.int64(4), ax3_ax4_fused % T.int64(4))
                        T.reads(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4])
                        T.writes(T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                        T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.max(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] + p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4], T.float32(0))
b0 = sch.get_block(name="conv2d_NCHWc", func_name="main")
b1 = sch.get_block(name="T_add", func_name="main")
b2 = sch.get_block(name="root", func_name="main")
sch.compute_inline(block=b1)
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.tiling_structure", ann_val="SSRSRS")
l3, l4, l5, l6, l7, l8, l9, l10 = sch.get_loops(block=b0)
v11, v12, v13, v14 = sch.sample_perfect_tile(loop=l3, n=4, max_innermost_factor=64, decision=[1, 1, 1, 1])
l15, l16, l17, l18 = sch.split(loop=l3, factors=[v11, v12, v13, v14], preserve_unit_iters=True)
v19, v20, v21, v22 = sch.sample_perfect_tile(loop=l4, n=4, max_innermost_factor=64, decision=[1, 48, 1, 1])
l23, l24, l25, l26 = sch.split(loop=l4, factors=[v19, v20, v21, v22], preserve_unit_iters=True)
v27, v28, v29, v30 = sch.sample_perfect_tile(loop=l5, n=4, max_innermost_factor=64, decision=[4, 1, 7, 1])
l31, l32, l33, l34 = sch.split(loop=l5, factors=[v27, v28, v29, v30], preserve_unit_iters=True)
v35, v36, v37, v38 = sch.sample_perfect_tile(loop=l6, n=4, max_innermost_factor=64, decision=[7, 1, 1, 4])
l39, l40, l41, l42 = sch.split(loop=l6, factors=[v35, v36, v37, v38], preserve_unit_iters=True)
v43, v44, v45, v46 = sch.sample_perfect_tile(loop=l7, n=4, max_innermost_factor=64, decision=[1, 4, 1, 1])
l47, l48, l49, l50 = sch.split(loop=l7, factors=[v43, v44, v45, v46], preserve_unit_iters=True)
v51, v52 = sch.sample_perfect_tile(loop=l8, n=2, max_innermost_factor=64, decision=[39, 16])
l53, l54 = sch.split(loop=l8, factors=[v51, v52], preserve_unit_iters=True)
v55, v56 = sch.sample_perfect_tile(loop=l9, n=2, max_innermost_factor=64, decision=[1, 1])
l57, l58 = sch.split(loop=l9, factors=[v55, v56], preserve_unit_iters=True)
v59, v60 = sch.sample_perfect_tile(loop=l10, n=2, max_innermost_factor=64, decision=[1, 1])
l61, l62 = sch.split(loop=l10, factors=[v59, v60], preserve_unit_iters=True)
sch.reorder(l15, l23, l31, l39, l47, l16, l24, l32, l40, l48, l53, l57, l61, l17, l25, l33, l41, l49, l54, l58, l62, l18, l26, l34, l42, l50)
b63, = sch.get_consumers(block=b0)
sch.reverse_compute_at(block=b63, loop=l47, preserve_unit_loops=True, index=-1)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.vectorize", ann_val=64)
v64 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.unroll_explicit", ann_val=v64)
sch.enter_postproc()
b65 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b65, ann_key="meta_schedule.parallel")
sch.unannotate(block_or_loop=b65, ann_key="meta_schedule.vectorize")
sch.unannotate(block_or_loop=b65, ann_key="meta_schedule.unroll_explicit")
b66, b67 = sch.get_child_blocks(b65)
l68, l69, l70, l71, l72, l73, l74, l75, l76, l77, l78, l79, l80, l81, l82, l83, l84, l85, l86, l87, l88, l89, l90, l91, l92, l93 = sch.get_loops(block=b66)
l94 = sch.fuse(l68, l69, l70, l71, l72, preserve_unit_iters=True)
sch.parallel(loop=l94)
sch.annotate(block_or_loop=l94, ann_key="pragma_auto_unroll_max_step", ann_val=512)
sch.annotate(block_or_loop=l94, ann_key="pragma_unroll_explicit", ann_val=1)
l95, l96, l97, l98, l99, l100 = sch.get_loops(block=b67)
l101 = sch.fuse(l99, l100, preserve_unit_iters=True)
sch.vectorize(loop=l101)
b102 = sch.get_block(name="conv2d_NCHWc", func_name="main")
l103, l104, l105, l106, l107, l108, l109, l110, l111, l112, l113, l114, l115, l116, l117, l118, l119, l120, l121, l122, l123, l124 = sch.get_loops(block=b102)
b125 = sch.decompose_reduction(block=b102, loop=l109)
2024-04-29 05:09:11 [INFO] [task_scheduler.cc:131] [Task #64: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_62] Trial #39: GFLOPs: 75.4537. Time: 2493.7145 us. Best GFLOPs: 150.1907
2024-04-29 05:09:11 [INFO] [task_scheduler.cc:131] [Task #64: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_62] Trial #40: GFLOPs: 68.4550. Time: 2748.6656 us. Best GFLOPs: 150.1907
2024-04-29 05:09:11 [INFO] [task_scheduler.cc:131] [Task #64: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_62] Trial #41: GFLOPs: 32.0279. Time: 5874.8731 us. Best GFLOPs: 150.1907
2024-04-29 05:09:11 [INFO] [task_scheduler.cc:131] [Task #64: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_62] Trial #42: GFLOPs: 5.0322. Time: 37391.5083 us. Best GFLOPs: 150.1907
2024-04-29 05:09:11 [INFO] [task_scheduler.cc:131] [Task #64: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_62] Trial #43: GFLOPs: 74.0382. Time: 2541.3909 us. Best GFLOPs: 150.1907
2024-04-29 05:09:11 [INFO] [task_scheduler.cc:131] [Task #64: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_62] Trial #44: GFLOPs: 119.3697. Time: 1576.2791 us. Best GFLOPs: 150.1907
2024-04-29 05:09:11 [INFO] [task_scheduler.cc:131] [Task #64: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_62] Trial #45: GFLOPs: 49.4100. Time: 3808.1325 us. Best GFLOPs: 150.1907
2024-04-29 05:09:11 [INFO] [task_scheduler.cc:131] [Task #64: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_62] Trial #46: GFLOPs: 12.9759. Time: 14500.7623 us. Best GFLOPs: 150.1907
2024-04-29 05:09:11 [INFO] [task_scheduler.cc:131] [Task #64: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_62] Trial #47: GFLOPs: 29.4312. Time: 6393.2239 us. Best GFLOPs: 150.1907
2024-04-29 05:09:11 [INFO] [task_scheduler.cc:131] [Task #64: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_62] Trial #48: GFLOPs: 72.3446. Time: 2600.8842 us. Best GFLOPs: 150.1907
2024-04-29 05:09:11 [INFO] [task_scheduler.cc:131] [Task #64: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_62] Trial #49: GFLOPs: 30.6628. Time: 6136.4318 us. Best GFLOPs: 150.1907
2024-04-29 05:09:11 [INFO] [task_scheduler.cc:131] [Task #64: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_62] Trial #50: GFLOPs: 15.0032. Time: 12541.3581 us. Best GFLOPs: 150.1907
2024-04-29 05:09:11 [INFO] [task_scheduler.cc:131] [Task #64: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_62] Trial #51: GFLOPs: 85.4393. Time: 2202.2660 us. Best GFLOPs: 150.1907
2024-04-29 05:09:11 [INFO] [task_scheduler.cc:131] [Task #64: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_62] Trial #52: GFLOPs: 2.6563. Time: 70834.2530 us. Best GFLOPs: 150.1907
2024-04-29 05:09:11 [INFO] [task_scheduler.cc:131] [Task #64: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_62] Trial #53: GFLOPs: 113.0655. Time: 1664.1684 us. Best GFLOPs: 150.1907
2024-04-29 05:09:11 [INFO] [task_scheduler.cc:121] [Task #64: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_62] Trial #54: Error in building:
LocalBuilder: Timeout, killed after 30.0 seconds
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(156), T.int64(28), T.int64(28), T.int64(4)), "float32"), p1: T.Buffer((T.int64(48), T.int64(156), T.int64(1), T.int64(1), T.int64(4), T.int64(4)), "float32"), p2: T.Buffer((T.int64(1), T.int64(48), T.int64(1), T.int64(1), T.int64(4)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(48), T.int64(28), T.int64(28), T.int64(4)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        conv2d_NCHWc = T.alloc_buffer((T.int64(1), T.int64(48), T.int64(28), T.int64(28), T.int64(4)))
        for n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_fused in T.parallel(T.int64(1344), annotations={"pragma_auto_unroll_max_step": 512, "pragma_unroll_explicit": 1}):
            for ow_1, oc_block_1 in T.grid(T.int64(4), T.int64(1)):
                for n_2_init, oc_chunk_2_init, oh_2_init, ow_2_init, oc_block_2_init, n_3_init, oc_chunk_3_init, oh_3_init, ow_3_init, oc_block_3_init in T.grid(T.int64(1), T.int64(1), T.int64(7), T.int64(1), T.int64(2), T.int64(1), T.int64(1), T.int64(2), T.int64(1), T.int64(1)):
                    with T.block("conv2d_NCHWc_init"):
                        v_n = T.axis.spatial(T.int64(1), n_2_init + n_3_init)
                        v_oc_chunk = T.axis.spatial(T.int64(48), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_fused // T.int64(28) + oc_chunk_2_init + oc_chunk_3_init)
                        v_oh = T.axis.spatial(T.int64(28), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_fused % T.int64(2) * T.int64(14) + oh_2_init * T.int64(2) + oh_3_init)
                        v_ow = T.axis.spatial(T.int64(28), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_fused % T.int64(28) // T.int64(4) * T.int64(4) + ow_1 + ow_2_init + ow_3_init)
                        v_oc_block = T.axis.spatial(T.int64(4), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_fused % T.int64(4) // T.int64(2) * T.int64(2) + oc_block_1 * T.int64(2) + oc_block_2_init + oc_block_3_init)
                        T.reads()
                        T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                        T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                        conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = T.float32(0)
                for ic_0, kh_0, kw_0, n_2, oc_chunk_2, oh_2, ow_2, oc_block_2, ic_1, kh_1, kw_1, n_3, oc_chunk_3, oh_3, ow_3, oc_block_3 in T.grid(T.int64(39), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(7), T.int64(1), T.int64(2), T.int64(16), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(1), T.int64(1)):
                    with T.block("conv2d_NCHWc_update"):
                        v_n = T.axis.spatial(T.int64(1), n_2 + n_3)
                        v_oc_chunk = T.axis.spatial(T.int64(48), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_fused // T.int64(28) + oc_chunk_2 + oc_chunk_3)
                        v_oh = T.axis.spatial(T.int64(28), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_fused % T.int64(2) * T.int64(14) + oh_2 * T.int64(2) + oh_3)
                        v_ow = T.axis.spatial(T.int64(28), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_fused % T.int64(28) // T.int64(4) * T.int64(4) + ow_1 + ow_2 + ow_3)
                        v_oc_block = T.axis.spatial(T.int64(4), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_fused % T.int64(4) // T.int64(2) * T.int64(2) + oc_block_1 * T.int64(2) + oc_block_2 + oc_block_3)
                        v_ic = T.axis.reduce(T.int64(624), ic_0 * T.int64(16) + ic_1)
                        v_kh = T.axis.reduce(T.int64(1), kh_0 + kh_1)
                        v_kw = T.axis.reduce(T.int64(1), kw_0 + kw_1)
                        T.reads(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block], p0[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)], p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block])
                        T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                        T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                        conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] + p0[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)] * p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block]
        for ax0_ax1_ax2_ax3_ax4_fused_0 in T.parallel(T.int64(2352)):
            for ax0_ax1_ax2_ax3_ax4_fused_1 in T.vectorized(T.int64(64)):
                with T.block("T_relu"):
                    v_ax0 = T.axis.spatial(T.int64(1), T.int64(0))
                    v_ax1 = T.axis.spatial(T.int64(48), (ax0_ax1_ax2_ax3_ax4_fused_0 * T.int64(64) + ax0_ax1_ax2_ax3_ax4_fused_1) // T.int64(3136))
                    v_ax2 = T.axis.spatial(T.int64(28), (ax0_ax1_ax2_ax3_ax4_fused_0 * T.int64(64) + ax0_ax1_ax2_ax3_ax4_fused_1) % T.int64(3136) // T.int64(112))
                    v_ax3 = T.axis.spatial(T.int64(28), (ax0_ax1_ax2_ax3_ax4_fused_0 * T.int64(64) + ax0_ax1_ax2_ax3_ax4_fused_1) % T.int64(112) // T.int64(4))
                    v_ax4 = T.axis.spatial(T.int64(4), (ax0_ax1_ax2_ax3_ax4_fused_0 * T.int64(64) + ax0_ax1_ax2_ax3_ax4_fused_1) % T.int64(4))
                    T.reads(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4])
                    T.writes(T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                    T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.max(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] + p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4], T.float32(0))
b0 = sch.get_block(name="conv2d_NCHWc", func_name="main")
b1 = sch.get_block(name="T_add", func_name="main")
b2 = sch.get_block(name="root", func_name="main")
sch.compute_inline(block=b1)
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.tiling_structure", ann_val="SSRSRS")
l3, l4, l5, l6, l7, l8, l9, l10 = sch.get_loops(block=b0)
v11, v12, v13, v14 = sch.sample_perfect_tile(loop=l3, n=4, max_innermost_factor=64, decision=[1, 1, 1, 1])
l15, l16, l17, l18 = sch.split(loop=l3, factors=[v11, v12, v13, v14], preserve_unit_iters=True)
v19, v20, v21, v22 = sch.sample_perfect_tile(loop=l4, n=4, max_innermost_factor=64, decision=[48, 1, 1, 1])
l23, l24, l25, l26 = sch.split(loop=l4, factors=[v19, v20, v21, v22], preserve_unit_iters=True)
v27, v28, v29, v30 = sch.sample_perfect_tile(loop=l5, n=4, max_innermost_factor=64, decision=[1, 2, 7, 2])
l31, l32, l33, l34 = sch.split(loop=l5, factors=[v27, v28, v29, v30], preserve_unit_iters=True)
v35, v36, v37, v38 = sch.sample_perfect_tile(loop=l6, n=4, max_innermost_factor=64, decision=[7, 4, 1, 1])
l39, l40, l41, l42 = sch.split(loop=l6, factors=[v35, v36, v37, v38], preserve_unit_iters=True)
v43, v44, v45, v46 = sch.sample_perfect_tile(loop=l7, n=4, max_innermost_factor=64, decision=[2, 1, 2, 1])
l47, l48, l49, l50 = sch.split(loop=l7, factors=[v43, v44, v45, v46], preserve_unit_iters=True)
v51, v52 = sch.sample_perfect_tile(loop=l8, n=2, max_innermost_factor=64, decision=[39, 16])
l53, l54 = sch.split(loop=l8, factors=[v51, v52], preserve_unit_iters=True)
v55, v56 = sch.sample_perfect_tile(loop=l9, n=2, max_innermost_factor=64, decision=[1, 1])
l57, l58 = sch.split(loop=l9, factors=[v55, v56], preserve_unit_iters=True)
v59, v60 = sch.sample_perfect_tile(loop=l10, n=2, max_innermost_factor=64, decision=[1, 1])
l61, l62 = sch.split(loop=l10, factors=[v59, v60], preserve_unit_iters=True)
sch.reorder(l15, l23, l31, l39, l47, l16, l24, l32, l40, l48, l53, l57, l61, l17, l25, l33, l41, l49, l54, l58, l62, l18, l26, l34, l42, l50)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.vectorize", ann_val=64)
v63 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.unroll_explicit", ann_val=v63)
sch.enter_postproc()
b64 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b64, ann_key="meta_schedule.parallel")
sch.unannotate(block_or_loop=b64, ann_key="meta_schedule.vectorize")
sch.unannotate(block_or_loop=b64, ann_key="meta_schedule.unroll_explicit")
b65, b66 = sch.get_child_blocks(b64)
l67, l68, l69, l70, l71, l72, l73, l74, l75, l76, l77, l78, l79, l80, l81, l82, l83, l84, l85, l86, l87, l88, l89, l90, l91, l92 = sch.get_loops(block=b65)
l93 = sch.fuse(l67, l68, l69, l70, l71, l72, l73, l74, preserve_unit_iters=True)
sch.parallel(loop=l93)
sch.annotate(block_or_loop=l93, ann_key="pragma_auto_unroll_max_step", ann_val=512)
sch.annotate(block_or_loop=l93, ann_key="pragma_unroll_explicit", ann_val=1)
l94, l95, l96, l97, l98 = sch.get_loops(block=b66)
l99 = sch.fuse(l94, l95, l96, l97, l98, preserve_unit_iters=True)
l100, l101 = sch.split(loop=l99, factors=[None, 64], preserve_unit_iters=True)
sch.parallel(loop=l100)
sch.vectorize(loop=l101)
b102 = sch.get_block(name="conv2d_NCHWc", func_name="main")
l103, l104, l105, l106, l107, l108, l109, l110, l111, l112, l113, l114, l115, l116, l117, l118, l119, l120, l121 = sch.get_loops(block=b102)
b122 = sch.decompose_reduction(block=b102, loop=l106)
2024-04-29 05:09:11 [INFO] [task_scheduler.cc:131] [Task #64: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_62] Trial #55: GFLOPs: 68.7758. Time: 2735.8441 us. Best GFLOPs: 150.1907
2024-04-29 05:09:11 [INFO] [task_scheduler.cc:131] [Task #64: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_62] Trial #56: GFLOPs: 270.1372. Time: 696.5349 us. Best GFLOPs: 270.1372
2024-04-29 05:09:11 [INFO] [task_scheduler.cc:131] [Task #64: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_62] Trial #57: GFLOPs: 106.2255. Time: 1771.3260 us. Best GFLOPs: 270.1372
2024-04-29 05:09:11 [INFO] [task_scheduler.cc:131] [Task #64: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_62] Trial #58: GFLOPs: 142.9427. Time: 1316.3320 us. Best GFLOPs: 270.1372
2024-04-29 05:09:11 [INFO] [task_scheduler.cc:131] [Task #64: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_62] Trial #59: GFLOPs: 65.2384. Time: 2884.1900 us. Best GFLOPs: 270.1372
2024-04-29 05:09:11 [INFO] [task_scheduler.cc:131] [Task #64: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_62] Trial #60: GFLOPs: 66.1924. Time: 2842.6208 us. Best GFLOPs: 270.1372
2024-04-29 05:09:11 [INFO] [task_scheduler.cc:131] [Task #64: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_62] Trial #61: GFLOPs: 61.8163. Time: 3043.8595 us. Best GFLOPs: 270.1372
2024-04-29 05:09:11 [INFO] [task_scheduler.cc:131] [Task #64: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_62] Trial #62: GFLOPs: 24.9463. Time: 7542.6031 us. Best GFLOPs: 270.1372
2024-04-29 05:09:11 [INFO] [task_scheduler.cc:131] [Task #64: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_62] Trial #63: GFLOPs: 6.1839. Time: 30427.4360 us. Best GFLOPs: 270.1372
2024-04-29 05:09:11 [INFO] [task_scheduler.cc:131] [Task #64: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_62] Trial #64: GFLOPs: 8.6370. Time: 21785.3108 us. Best GFLOPs: 270.1372
2024-04-29 07:05:23 [INFO] [evolutionary_search.cc:713] Generating candidates......
2024-04-29 07:05:24 [INFO] [evolutionary_search.cc:715] Picked top 60 candidate(s) from database
2024-04-29 07:05:26 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0xd9c1638)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0xc097108)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x70cfe78)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x107f1768)]: 0 failure(s)
2024-04-29 07:05:26 [INFO] [evolutionary_search.cc:723] Sampled 452 candidate(s)
2024-04-29 07:05:32 [INFO] [evolutionary_search.cc:621] Evolve iter #0 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0xd9c1638)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0xc097108)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x70cfe78)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x107f1768)]: 0 failure(s)
2024-04-29 07:05:37 [INFO] [evolutionary_search.cc:621] Evolve iter #1 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0xd9c1638)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0xc097108)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x70cfe78)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x107f1768)]: 0 failure(s)
2024-04-29 07:05:42 [INFO] [evolutionary_search.cc:621] Evolve iter #2 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0xd9c1638)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0xc097108)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x70cfe78)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x107f1768)]: 0 failure(s)
2024-04-29 07:05:48 [INFO] [evolutionary_search.cc:621] Evolve iter #3 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0xd9c1638)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0xc097108)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x70cfe78)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x107f1768)]: 0 failure(s)
2024-04-29 07:05:51 [INFO] [evolutionary_search.cc:649] Scores of the best 64 candidates:
[1 : 16]:	0.8859  0.8639  0.7731  0.7544  0.7544  0.7107  0.6945  0.6874  0.6829  0.6829  0.6829  0.6746  0.6703  0.6684  0.6678  0.6619
[17 : 32]:	0.6586  0.6582  0.6557  0.6482  0.6476  0.6470  0.6458  0.6329  0.6315  0.6295  0.6291  0.6291  0.6268  0.6260  0.6234  0.6160
[33 : 48]:	0.6147  0.6134  0.6134  0.6088  0.6042  0.6042  0.6042  0.6038  0.6038  0.6025  0.6001  0.5997  0.5974  0.5960  0.5932  0.5921
[49 : 64]:	0.5908  0.5906  0.5882  0.5872  0.5871  0.5869  0.5866  0.5846  0.5846  0.5844  0.5814  0.5769  0.5764  0.5743  0.5734  0.5708
2024-04-29 07:05:51 [INFO] [evolutionary_search.cc:727] Got 64 candidate(s) with evolutionary search
2024-04-29 07:05:51 [INFO] [evolutionary_search.cc:730] Sending 64 candidates(s) for measurement
2024-04-29 07:07:21 [INFO] [task_scheduler.cc:131] [Task #64: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_62] Trial #65: GFLOPs: 130.7221. Time: 1439.3890 us. Best GFLOPs: 270.1372
2024-04-29 07:07:21 [INFO] [task_scheduler.cc:131] [Task #64: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_62] Trial #66: GFLOPs: 141.0312. Time: 1334.1729 us. Best GFLOPs: 270.1372
2024-04-29 07:07:21 [INFO] [task_scheduler.cc:131] [Task #64: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_62] Trial #67: GFLOPs: 328.7071. Time: 572.4245 us. Best GFLOPs: 328.7071
2024-04-29 07:07:21 [INFO] [task_scheduler.cc:131] [Task #64: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_62] Trial #68: GFLOPs: 328.8085. Time: 572.2480 us. Best GFLOPs: 328.8085
2024-04-29 07:07:21 [INFO] [task_scheduler.cc:131] [Task #64: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_62] Trial #69: GFLOPs: 328.0589. Time: 573.5555 us. Best GFLOPs: 328.8085
2024-04-29 07:07:21 [INFO] [task_scheduler.cc:131] [Task #64: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_62] Trial #70: GFLOPs: 92.1751. Time: 2041.3323 us. Best GFLOPs: 328.8085
2024-04-29 07:07:21 [INFO] [task_scheduler.cc:131] [Task #64: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_62] Trial #71: GFLOPs: 170.2685. Time: 1105.0779 us. Best GFLOPs: 328.8085
2024-04-29 07:07:21 [INFO] [task_scheduler.cc:131] [Task #64: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_62] Trial #72: GFLOPs: 199.3385. Time: 943.9222 us. Best GFLOPs: 328.8085
2024-04-29 07:07:21 [INFO] [task_scheduler.cc:131] [Task #64: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_62] Trial #73: GFLOPs: 198.5003. Time: 947.9079 us. Best GFLOPs: 328.8085
2024-04-29 07:07:21 [INFO] [task_scheduler.cc:131] [Task #64: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_62] Trial #74: GFLOPs: 199.1477. Time: 944.8266 us. Best GFLOPs: 328.8085
2024-04-29 07:07:21 [INFO] [task_scheduler.cc:131] [Task #64: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_62] Trial #75: GFLOPs: 175.9528. Time: 1069.3778 us. Best GFLOPs: 328.8085
2024-04-29 07:07:21 [INFO] [task_scheduler.cc:131] [Task #64: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_62] Trial #76: GFLOPs: 195.5596. Time: 962.1619 us. Best GFLOPs: 328.8085
2024-04-29 07:07:21 [INFO] [task_scheduler.cc:131] [Task #64: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_62] Trial #77: GFLOPs: 155.7475. Time: 1208.1093 us. Best GFLOPs: 328.8085
2024-04-29 07:07:21 [INFO] [task_scheduler.cc:131] [Task #64: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_62] Trial #78: GFLOPs: 107.5059. Time: 1750.2292 us. Best GFLOPs: 328.8085
2024-04-29 07:07:21 [INFO] [task_scheduler.cc:131] [Task #64: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_62] Trial #79: GFLOPs: 183.7284. Time: 1024.1205 us. Best GFLOPs: 328.8085
2024-04-29 07:07:21 [INFO] [task_scheduler.cc:131] [Task #64: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_62] Trial #80: GFLOPs: 190.6536. Time: 986.9208 us. Best GFLOPs: 328.8085
2024-04-29 07:07:21 [INFO] [task_scheduler.cc:131] [Task #64: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_62] Trial #81: GFLOPs: 153.0594. Time: 1229.3266 us. Best GFLOPs: 328.8085
2024-04-29 07:07:21 [INFO] [task_scheduler.cc:131] [Task #64: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_62] Trial #82: GFLOPs: 193.5503. Time: 972.1503 us. Best GFLOPs: 328.8085
2024-04-29 07:07:21 [INFO] [task_scheduler.cc:131] [Task #64: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_62] Trial #83: GFLOPs: 161.6325. Time: 1164.1222 us. Best GFLOPs: 328.8085
2024-04-29 07:07:21 [INFO] [task_scheduler.cc:131] [Task #64: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_62] Trial #84: GFLOPs: 81.2247. Time: 2316.5369 us. Best GFLOPs: 328.8085
2024-04-29 07:07:21 [INFO] [task_scheduler.cc:131] [Task #64: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_62] Trial #85: GFLOPs: 259.1812. Time: 725.9786 us. Best GFLOPs: 328.8085
2024-04-29 07:07:21 [INFO] [task_scheduler.cc:131] [Task #64: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_62] Trial #86: GFLOPs: 203.7576. Time: 923.4503 us. Best GFLOPs: 328.8085
2024-04-29 07:07:21 [INFO] [task_scheduler.cc:131] [Task #64: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_62] Trial #87: GFLOPs: 202.4813. Time: 929.2712 us. Best GFLOPs: 328.8085
2024-04-29 07:07:21 [INFO] [task_scheduler.cc:131] [Task #64: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_62] Trial #88: GFLOPs: 163.0887. Time: 1153.7282 us. Best GFLOPs: 328.8085
2024-04-29 07:07:21 [INFO] [task_scheduler.cc:131] [Task #64: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_62] Trial #89: GFLOPs: 230.8571. Time: 815.0497 us. Best GFLOPs: 328.8085
2024-04-29 07:07:21 [INFO] [task_scheduler.cc:131] [Task #64: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_62] Trial #90: GFLOPs: 158.4509. Time: 1187.4973 us. Best GFLOPs: 328.8085
2024-04-29 07:07:21 [INFO] [task_scheduler.cc:131] [Task #64: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_62] Trial #91: GFLOPs: 177.2006. Time: 1061.8472 us. Best GFLOPs: 328.8085
2024-04-29 07:07:21 [INFO] [task_scheduler.cc:131] [Task #64: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_62] Trial #92: GFLOPs: 237.7295. Time: 791.4878 us. Best GFLOPs: 328.8085
2024-04-29 07:07:21 [INFO] [task_scheduler.cc:131] [Task #64: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_62] Trial #93: GFLOPs: 205.5982. Time: 915.1830 us. Best GFLOPs: 328.8085
2024-04-29 07:07:21 [INFO] [task_scheduler.cc:131] [Task #64: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_62] Trial #94: GFLOPs: 85.1727. Time: 2209.1595 us. Best GFLOPs: 328.8085
2024-04-29 07:07:21 [INFO] [task_scheduler.cc:131] [Task #64: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_62] Trial #95: GFLOPs: 142.7720. Time: 1317.9055 us. Best GFLOPs: 328.8085
2024-04-29 07:07:21 [INFO] [task_scheduler.cc:131] [Task #64: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_62] Trial #96: GFLOPs: 166.0474. Time: 1133.1702 us. Best GFLOPs: 328.8085
2024-04-29 07:07:21 [INFO] [task_scheduler.cc:131] [Task #64: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_62] Trial #97: GFLOPs: 89.1767. Time: 2109.9680 us. Best GFLOPs: 328.8085
2024-04-29 07:07:21 [INFO] [task_scheduler.cc:131] [Task #64: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_62] Trial #98: GFLOPs: 166.7292. Time: 1128.5368 us. Best GFLOPs: 328.8085
2024-04-29 07:07:21 [INFO] [task_scheduler.cc:131] [Task #64: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_62] Trial #99: GFLOPs: 166.8103. Time: 1127.9882 us. Best GFLOPs: 328.8085
2024-04-29 07:07:21 [INFO] [task_scheduler.cc:131] [Task #64: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_62] Trial #100: GFLOPs: 153.6872. Time: 1224.3047 us. Best GFLOPs: 328.8085
2024-04-29 07:07:21 [INFO] [task_scheduler.cc:131] [Task #64: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_62] Trial #101: GFLOPs: 108.0944. Time: 1740.7007 us. Best GFLOPs: 328.8085
2024-04-29 07:07:21 [INFO] [task_scheduler.cc:131] [Task #64: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_62] Trial #102: GFLOPs: 107.2050. Time: 1755.1417 us. Best GFLOPs: 328.8085
2024-04-29 07:07:21 [INFO] [task_scheduler.cc:131] [Task #64: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_62] Trial #103: GFLOPs: 107.5911. Time: 1748.8441 us. Best GFLOPs: 328.8085
2024-04-29 07:07:21 [INFO] [task_scheduler.cc:131] [Task #64: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_62] Trial #104: GFLOPs: 105.7748. Time: 1778.8733 us. Best GFLOPs: 328.8085
2024-04-29 07:07:21 [INFO] [task_scheduler.cc:131] [Task #64: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_62] Trial #105: GFLOPs: 107.8429. Time: 1744.7601 us. Best GFLOPs: 328.8085
2024-04-29 07:07:21 [INFO] [task_scheduler.cc:131] [Task #64: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_62] Trial #106: GFLOPs: 128.6289. Time: 1462.8125 us. Best GFLOPs: 328.8085
2024-04-29 07:07:21 [INFO] [task_scheduler.cc:131] [Task #64: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_62] Trial #107: GFLOPs: 181.9098. Time: 1034.3590 us. Best GFLOPs: 328.8085
2024-04-29 07:07:21 [INFO] [task_scheduler.cc:131] [Task #64: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_62] Trial #108: GFLOPs: 260.0514. Time: 723.5494 us. Best GFLOPs: 328.8085
2024-04-29 07:07:21 [INFO] [task_scheduler.cc:131] [Task #64: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_62] Trial #109: GFLOPs: 132.4023. Time: 1421.1237 us. Best GFLOPs: 328.8085
2024-04-29 07:07:21 [INFO] [task_scheduler.cc:131] [Task #64: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_62] Trial #110: GFLOPs: 166.0778. Time: 1132.9628 us. Best GFLOPs: 328.8085
2024-04-29 07:07:21 [INFO] [task_scheduler.cc:131] [Task #64: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_62] Trial #111: GFLOPs: 175.5824. Time: 1071.6334 us. Best GFLOPs: 328.8085
2024-04-29 07:07:21 [INFO] [task_scheduler.cc:131] [Task #64: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_62] Trial #112: GFLOPs: 164.5964. Time: 1143.1600 us. Best GFLOPs: 328.8085
2024-04-29 07:07:21 [INFO] [task_scheduler.cc:131] [Task #64: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_62] Trial #113: GFLOPs: 165.1725. Time: 1139.1725 us. Best GFLOPs: 328.8085
2024-04-29 07:07:21 [INFO] [task_scheduler.cc:131] [Task #64: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_62] Trial #114: GFLOPs: 171.2837. Time: 1098.5284 us. Best GFLOPs: 328.8085
2024-04-29 07:07:21 [INFO] [task_scheduler.cc:131] [Task #64: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_62] Trial #115: GFLOPs: 198.8075. Time: 946.4430 us. Best GFLOPs: 328.8085
2024-04-29 07:07:21 [INFO] [task_scheduler.cc:131] [Task #64: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_62] Trial #116: GFLOPs: 89.7076. Time: 2097.4806 us. Best GFLOPs: 328.8085
2024-04-29 07:07:21 [INFO] [task_scheduler.cc:131] [Task #64: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_62] Trial #117: GFLOPs: 257.8535. Time: 729.7167 us. Best GFLOPs: 328.8085
2024-04-29 07:07:21 [INFO] [task_scheduler.cc:131] [Task #64: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_62] Trial #118: GFLOPs: 175.5762. Time: 1071.6715 us. Best GFLOPs: 328.8085
2024-04-29 07:07:21 [INFO] [task_scheduler.cc:131] [Task #64: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_62] Trial #119: GFLOPs: 278.3428. Time: 676.0009 us. Best GFLOPs: 328.8085
2024-04-29 07:07:21 [INFO] [task_scheduler.cc:131] [Task #64: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_62] Trial #120: GFLOPs: 97.8269. Time: 1923.3972 us. Best GFLOPs: 328.8085
2024-04-29 07:07:21 [INFO] [task_scheduler.cc:131] [Task #64: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_62] Trial #121: GFLOPs: 191.9700. Time: 980.1529 us. Best GFLOPs: 328.8085
2024-04-29 07:07:21 [INFO] [task_scheduler.cc:131] [Task #64: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_62] Trial #122: GFLOPs: 213.8996. Time: 879.6650 us. Best GFLOPs: 328.8085
2024-04-29 07:07:21 [INFO] [task_scheduler.cc:131] [Task #64: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_62] Trial #123: GFLOPs: 257.5029. Time: 730.7103 us. Best GFLOPs: 328.8085
2024-04-29 07:07:21 [INFO] [task_scheduler.cc:131] [Task #64: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_62] Trial #124: GFLOPs: 66.6901. Time: 2821.4089 us. Best GFLOPs: 328.8085
2024-04-29 07:07:21 [INFO] [task_scheduler.cc:131] [Task #64: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_62] Trial #125: GFLOPs: 208.4650. Time: 902.5974 us. Best GFLOPs: 328.8085
2024-04-29 07:07:21 [INFO] [task_scheduler.cc:131] [Task #64: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_62] Trial #126: GFLOPs: 1.2455. Time: 151072.7027 us. Best GFLOPs: 328.8085
2024-04-29 07:07:21 [INFO] [task_scheduler.cc:131] [Task #64: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_62] Trial #127: GFLOPs: 61.1588. Time: 3076.5829 us. Best GFLOPs: 328.8085
2024-04-29 07:07:21 [INFO] [task_scheduler.cc:131] [Task #64: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_62] Trial #128: GFLOPs: 44.8367. Time: 4196.5617 us. Best GFLOPs: 328.8085
