2024-04-29 02:34:05 [INFO] [task_scheduler.cc:160] Initializing Task #93: "fused_nn_avg_pool2d_2"
2024-04-29 02:34:05 [INFO] [task_scheduler.cc:35] 
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(264), T.int64(14), T.int64(14), T.int64(4)), "float32"), pool_avg: T.Buffer((T.int64(1), T.int64(264), T.int64(7), T.int64(7), T.int64(4)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        pool_sum = T.alloc_buffer((T.int64(1), T.int64(264), T.int64(7), T.int64(7), T.int64(4)))
        for ax0, ax1, ax2, ax3, ax4, rv0, rv1 in T.grid(T.int64(1), T.int64(264), T.int64(7), T.int64(7), T.int64(4), T.int64(2), T.int64(2)):
            with T.block("pool_sum"):
                v_ax0, v_ax1, v_ax2, v_ax3, v_ax4, v_rv0, v_rv1 = T.axis.remap("SSSSSRR", [ax0, ax1, ax2, ax3, ax4, rv0, rv1])
                T.reads(p0[v_ax0, v_ax1, v_ax2 * T.int64(2) + v_rv0, v_ax3 * T.int64(2) + v_rv1, v_ax4])
                T.writes(pool_sum[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                with T.init():
                    pool_sum[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.float32(0)
                pool_sum[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = pool_sum[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] + p0[v_ax0, v_ax1, v_ax2 * T.int64(2) + v_rv0, v_ax3 * T.int64(2) + v_rv1, v_ax4]
        for ax0, ax1, ax2, ax3, ax4 in T.grid(T.int64(1), T.int64(264), T.int64(7), T.int64(7), T.int64(4)):
            with T.block("pool_avg"):
                v_ax0, v_ax1, v_ax2, v_ax3, v_ax4 = T.axis.remap("SSSSS", [ax0, ax1, ax2, ax3, ax4])
                T.reads(pool_sum[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                T.writes(pool_avg[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                T.block_attr({"schedule_rule": "meta_schedule.pool_avg"})
                pool_avg[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = pool_sum[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] / T.Cast("float32", T.max((T.min(v_ax2, T.int64(0)) * T.int64(2) + T.min(v_ax2 * T.int64(2) + T.int64(1), T.int64(13)) + T.int64(1) - v_ax2 * T.int64(2)) * (T.min(v_ax3, T.int64(0)) * T.int64(2) + T.min(v_ax3 * T.int64(2) + T.int64(1), T.int64(13)) + T.int64(1) - v_ax3 * T.int64(2)), T.int64(1)))
2024-04-29 02:34:05 [INFO] [task_scheduler.cc:164] Total 3 design space(s) generated
2024-04-29 02:34:05 [INFO] [task_scheduler.cc:170] Design space #0:
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(264), T.int64(14), T.int64(14), T.int64(4)), "float32"), pool_avg: T.Buffer((T.int64(1), T.int64(264), T.int64(7), T.int64(7), T.int64(4)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        with T.block("root"):
            T.reads()
            T.writes()
            T.block_attr({"meta_schedule.parallel": 768, "meta_schedule.unroll_explicit": 0, "meta_schedule.vectorize": 64})
            pool_sum = T.alloc_buffer((T.int64(1), T.int64(264), T.int64(7), T.int64(7), T.int64(4)))
            pool_sum_rf = T.alloc_buffer((T.int64(1), T.int64(264), T.int64(7), T.int64(7), T.int64(4), T.int64(4)))
            for ax0, ax1, ax2, ax3, ax4, rv0_rv1_fused_0, rv0_rv1_fused_1 in T.grid(T.int64(1), T.int64(264), T.int64(7), T.int64(7), T.int64(4), T.int64(4), T.int64(1)):
                with T.block("pool_sum_rf"):
                    vrv0_rv1_fused_0, v_ax0, v_ax1, v_ax2, v_ax3, v_ax4, vrv0_rv1_fused_1 = T.axis.remap("SSSSSSR", [rv0_rv1_fused_0, ax0, ax1, ax2, ax3, ax4, rv0_rv1_fused_1])
                    T.reads(p0[v_ax0, v_ax1, v_ax2 * T.int64(2) + (vrv0_rv1_fused_0 + vrv0_rv1_fused_1) // T.int64(2), v_ax3 * T.int64(2) + (vrv0_rv1_fused_0 + vrv0_rv1_fused_1) % T.int64(2), v_ax4])
                    T.writes(pool_sum_rf[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4, vrv0_rv1_fused_0])
                    with T.init():
                        pool_sum_rf[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4, vrv0_rv1_fused_0] = T.float32(0)
                    pool_sum_rf[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4, vrv0_rv1_fused_0] = pool_sum_rf[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4, vrv0_rv1_fused_0] + p0[v_ax0, v_ax1, v_ax2 * T.int64(2) + (vrv0_rv1_fused_0 + vrv0_rv1_fused_1) // T.int64(2), v_ax3 * T.int64(2) + (vrv0_rv1_fused_0 + vrv0_rv1_fused_1) % T.int64(2), v_ax4]
            for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(264), T.int64(7), T.int64(7)):
                for ax0_1, ax1_1, ax2_1, ax3_1, ax4, ax5 in T.grid(T.int64(4), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(4)):
                    with T.block("pool_sum"):
                        vrv0_rv1_fused_0, v_ax0 = T.axis.remap("RS", [ax0_1, ax1_1])
                        v_ax1 = T.axis.spatial(T.int64(264), ax1 + ax2_1)
                        v_ax2 = T.axis.spatial(T.int64(7), ax2 + ax3_1)
                        v_ax3 = T.axis.spatial(T.int64(7), ax3 + ax4)
                        v_ax4 = T.axis.spatial(T.int64(4), ax5)
                        T.reads(pool_sum_rf[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4, vrv0_rv1_fused_0])
                        T.writes(pool_sum[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                        with T.init():
                            pool_sum[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.float32(0)
                        pool_sum[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = pool_sum[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] + pool_sum_rf[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4, vrv0_rv1_fused_0]
                for ax4 in range(T.int64(4)):
                    with T.block("pool_avg"):
                        v_ax0, v_ax1, v_ax2, v_ax3, v_ax4 = T.axis.remap("SSSSS", [ax0, ax1, ax2, ax3, ax4])
                        T.reads(pool_sum[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                        T.writes(pool_avg[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                        pool_avg[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = pool_sum[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] / T.Cast("float32", T.max((T.min(v_ax2, T.int64(0)) * T.int64(2) + T.min(v_ax2 * T.int64(2) + T.int64(1), T.int64(13)) + T.int64(1) - v_ax2 * T.int64(2)) * (T.min(v_ax3, T.int64(0)) * T.int64(2) + T.min(v_ax3 * T.int64(2) + T.int64(1), T.int64(13)) + T.int64(1) - v_ax3 * T.int64(2)), T.int64(1)))
b0 = sch.get_block(name="pool_sum", func_name="main")
b1 = sch.get_block(name="pool_avg", func_name="main")
b2 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b1, ann_key="schedule_rule")
l3, l4, l5, l6, l7, l8, l9 = sch.get_loops(block=b0)
l10 = sch.fuse(l8, l9, preserve_unit_iters=True)
v11, v12 = sch.sample_perfect_tile(loop=l10, n=2, max_innermost_factor=64, decision=[4, 1])
l13, l14 = sch.split(loop=l10, factors=[v11, v12], preserve_unit_iters=True)
b15 = sch.rfactor(loop=l13, factor_axis=5)
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.random_compute_producer", ann_val=1)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.vectorize", ann_val=64)
v16 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=0)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.unroll_explicit", ann_val=v16)
b17, = sch.get_producers(block=b0)
sch.unannotate(block_or_loop=b0, ann_key="meta_schedule.random_compute_producer")
l18 = sch.sample_compute_location(block=b0, decision=3)
sch.compute_at(block=b0, loop=l18, preserve_unit_loops=True, index=-1)
l19 = sch.sample_compute_location(block=b17, decision=-1)
sch.compute_at(block=b17, loop=l19, preserve_unit_loops=True, index=-1)
2024-04-29 02:34:05 [INFO] [task_scheduler.cc:170] Design space #1:
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(264), T.int64(14), T.int64(14), T.int64(4)), "float32"), pool_avg: T.Buffer((T.int64(1), T.int64(264), T.int64(7), T.int64(7), T.int64(4)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        with T.block("root"):
            T.reads()
            T.writes()
            T.block_attr({"meta_schedule.parallel": 768, "meta_schedule.unroll_explicit": 64, "meta_schedule.vectorize": 64})
            pool_sum = T.alloc_buffer((T.int64(1), T.int64(264), T.int64(7), T.int64(7), T.int64(4)))
            pool_sum_rf = T.alloc_buffer((T.int64(1), T.int64(264), T.int64(7), T.int64(7), T.int64(4), T.int64(1)))
            for ax0, ax1, ax2 in T.grid(T.int64(1), T.int64(264), T.int64(7)):
                for ax0_1, ax1_1, ax2_1, ax3, ax4, ax5, ax6 in T.grid(T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(7), T.int64(4), T.int64(4)):
                    with T.block("pool_sum_rf"):
                        vrv0_rv1_fused_1, v_ax0 = T.axis.remap("SS", [ax0_1, ax1_1])
                        v_ax1 = T.axis.spatial(T.int64(264), ax1 + ax2_1)
                        v_ax2 = T.axis.spatial(T.int64(7), ax2 + ax3)
                        v_ax3, v_ax4, vrv0_rv1_fused_0 = T.axis.remap("SSR", [ax4, ax5, ax6])
                        T.reads(p0[v_ax0, v_ax1, v_ax2 * T.int64(2) + (vrv0_rv1_fused_0 + vrv0_rv1_fused_1) // T.int64(2), v_ax3 * T.int64(2) + (vrv0_rv1_fused_0 + vrv0_rv1_fused_1) % T.int64(2), v_ax4])
                        T.writes(pool_sum_rf[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4, vrv0_rv1_fused_1])
                        with T.init():
                            pool_sum_rf[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4, vrv0_rv1_fused_1] = T.float32(0)
                        pool_sum_rf[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4, vrv0_rv1_fused_1] = pool_sum_rf[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4, vrv0_rv1_fused_1] + p0[v_ax0, v_ax1, v_ax2 * T.int64(2) + (vrv0_rv1_fused_0 + vrv0_rv1_fused_1) // T.int64(2), v_ax3 * T.int64(2) + (vrv0_rv1_fused_0 + vrv0_rv1_fused_1) % T.int64(2), v_ax4]
                for ax3, ax4 in T.grid(T.int64(7), T.int64(4)):
                    for ax0_1, ax1_1, ax2_1, ax3_1, ax4_1, ax5 in T.grid(T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1)):
                        with T.block("pool_sum"):
                            vrv0_rv1_fused_1, v_ax0 = T.axis.remap("RS", [ax0_1, ax1_1])
                            v_ax1 = T.axis.spatial(T.int64(264), ax1 + ax2_1)
                            v_ax2 = T.axis.spatial(T.int64(7), ax2 + ax3_1)
                            v_ax3 = T.axis.spatial(T.int64(7), ax3 + ax4_1)
                            v_ax4 = T.axis.spatial(T.int64(4), ax4 + ax5)
                            T.reads(pool_sum_rf[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4, vrv0_rv1_fused_1])
                            T.writes(pool_sum[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                            with T.init():
                                pool_sum[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.float32(0)
                            pool_sum[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = pool_sum[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] + pool_sum_rf[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4, vrv0_rv1_fused_1]
                    with T.block("pool_avg"):
                        v_ax0, v_ax1, v_ax2, v_ax3, v_ax4 = T.axis.remap("SSSSS", [ax0, ax1, ax2, ax3, ax4])
                        T.reads(pool_sum[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                        T.writes(pool_avg[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                        pool_avg[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = pool_sum[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] / T.Cast("float32", T.max((T.min(v_ax2, T.int64(0)) * T.int64(2) + T.min(v_ax2 * T.int64(2) + T.int64(1), T.int64(13)) + T.int64(1) - v_ax2 * T.int64(2)) * (T.min(v_ax3, T.int64(0)) * T.int64(2) + T.min(v_ax3 * T.int64(2) + T.int64(1), T.int64(13)) + T.int64(1) - v_ax3 * T.int64(2)), T.int64(1)))
b0 = sch.get_block(name="pool_sum", func_name="main")
b1 = sch.get_block(name="pool_avg", func_name="main")
b2 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b1, ann_key="schedule_rule")
l3, l4, l5, l6, l7, l8, l9 = sch.get_loops(block=b0)
l10 = sch.fuse(l8, l9, preserve_unit_iters=True)
v11, v12 = sch.sample_perfect_tile(loop=l10, n=2, max_innermost_factor=64, decision=[4, 1])
l13, l14 = sch.split(loop=l10, factors=[v11, v12], preserve_unit_iters=True)
b15 = sch.rfactor(loop=l14, factor_axis=5)
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.random_compute_producer", ann_val=1)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.vectorize", ann_val=64)
v16 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=2)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.unroll_explicit", ann_val=v16)
b17, = sch.get_producers(block=b0)
sch.unannotate(block_or_loop=b0, ann_key="meta_schedule.random_compute_producer")
l18 = sch.sample_compute_location(block=b0, decision=4)
sch.compute_at(block=b0, loop=l18, preserve_unit_loops=True, index=-1)
l19 = sch.sample_compute_location(block=b17, decision=2)
sch.compute_at(block=b17, loop=l19, preserve_unit_loops=True, index=-1)
2024-04-29 02:34:05 [INFO] [task_scheduler.cc:170] Design space #2:
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(264), T.int64(14), T.int64(14), T.int64(4)), "float32"), pool_avg: T.Buffer((T.int64(1), T.int64(264), T.int64(7), T.int64(7), T.int64(4)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        with T.block("root"):
            T.reads()
            T.writes()
            T.block_attr({"meta_schedule.parallel": 768, "meta_schedule.unroll_explicit": 512, "meta_schedule.vectorize": 64})
            pool_sum = T.alloc_buffer((T.int64(1), T.int64(264), T.int64(7), T.int64(7), T.int64(4)))
            for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(264), T.int64(7), T.int64(7)):
                for ax0_1, ax1_1, ax2_1, ax3_1, ax4, ax5, ax6 in T.grid(T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(4), T.int64(2), T.int64(2)):
                    with T.block("pool_sum"):
                        v_ax0 = T.axis.spatial(T.int64(1), ax0_1)
                        v_ax1 = T.axis.spatial(T.int64(264), ax1 + ax1_1)
                        v_ax2 = T.axis.spatial(T.int64(7), ax2 + ax2_1)
                        v_ax3 = T.axis.spatial(T.int64(7), ax3 + ax3_1)
                        v_ax4, v_rv0, v_rv1 = T.axis.remap("SRR", [ax4, ax5, ax6])
                        T.reads(p0[v_ax0, v_ax1, v_ax2 * T.int64(2) + v_rv0, v_ax3 * T.int64(2) + v_rv1, v_ax4])
                        T.writes(pool_sum[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                        with T.init():
                            pool_sum[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.float32(0)
                        pool_sum[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = pool_sum[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] + p0[v_ax0, v_ax1, v_ax2 * T.int64(2) + v_rv0, v_ax3 * T.int64(2) + v_rv1, v_ax4]
                for ax4 in range(T.int64(4)):
                    with T.block("pool_avg"):
                        v_ax0, v_ax1, v_ax2, v_ax3, v_ax4 = T.axis.remap("SSSSS", [ax0, ax1, ax2, ax3, ax4])
                        T.reads(pool_sum[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                        T.writes(pool_avg[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                        pool_avg[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = pool_sum[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] / T.Cast("float32", T.max((T.min(v_ax2, T.int64(0)) * T.int64(2) + T.min(v_ax2 * T.int64(2) + T.int64(1), T.int64(13)) + T.int64(1) - v_ax2 * T.int64(2)) * (T.min(v_ax3, T.int64(0)) * T.int64(2) + T.min(v_ax3 * T.int64(2) + T.int64(1), T.int64(13)) + T.int64(1) - v_ax3 * T.int64(2)), T.int64(1)))
b0 = sch.get_block(name="pool_sum", func_name="main")
b1 = sch.get_block(name="pool_avg", func_name="main")
b2 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b1, ann_key="schedule_rule")
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.vectorize", ann_val=64)
v3 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.unroll_explicit", ann_val=v3)
l4 = sch.sample_compute_location(block=b0, decision=3)
sch.compute_at(block=b0, loop=l4, preserve_unit_loops=True, index=-1)
2024-04-29 04:57:28 [INFO] [evolutionary_search.cc:713] Generating candidates......
2024-04-29 04:57:28 [INFO] [evolutionary_search.cc:715] Picked top 0 candidate(s) from database
2024-04-29 04:57:31 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x62373e8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0xcc0a608)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0xd67f638)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0xed992f8)]: 0 failure(s)
2024-04-29 04:57:31 [INFO] [evolutionary_search.cc:723] Sampled 512 candidate(s)
2024-04-29 04:57:34 [INFO] [evolutionary_search.cc:621] Evolve iter #0 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x62373e8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0xcc0a608)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0xd67f638)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0xed992f8)]: 0 failure(s)
2024-04-29 04:57:38 [INFO] [evolutionary_search.cc:621] Evolve iter #1 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x62373e8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0xcc0a608)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0xd67f638)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0xed992f8)]: 0 failure(s)
2024-04-29 04:57:42 [INFO] [evolutionary_search.cc:621] Evolve iter #2 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x62373e8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0xcc0a608)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0xd67f638)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0xed992f8)]: 0 failure(s)
2024-04-29 04:57:46 [INFO] [evolutionary_search.cc:621] Evolve iter #3 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x62373e8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0xcc0a608)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0xd67f638)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0xed992f8)]: 0 failure(s)
2024-04-29 04:57:47 [INFO] [evolutionary_search.cc:649] Scores of the best 64 candidates:
[1 : 16]:	0.9980  0.9977  0.9970  0.9960  0.9950  0.9912  0.9909  0.9900  0.9893  0.9840  0.9833  0.9826  0.9816  0.9802  0.9773  0.9716
[17 : 32]:	0.9701  0.9684  0.9674  0.9640  0.9639  0.9630  0.9614  0.9600  0.9582  0.9503  0.9500  0.9466  0.9435  0.9403  0.9348  0.9333
[33 : 48]:	0.9331  0.9304  0.9298  0.9295  0.9275  0.9251  0.9221  0.9218  0.9160  0.9112  0.9067  0.9047  0.9035  0.9011  0.9002  0.8976
[49 : 64]:	0.8972  0.8965  0.8938  0.8933  0.8920  0.8886  0.8880  0.8874  0.8843  0.8833  0.8806  0.8765  0.8754  0.8754  0.8749  0.8731
2024-04-29 04:57:47 [INFO] [evolutionary_search.cc:727] Got 64 candidate(s) with evolutionary search
2024-04-29 04:57:47 [INFO] [evolutionary_search.cc:730] Sending 64 candidates(s) for measurement
2024-04-29 05:13:33 [INFO] [task_scheduler.cc:131] [Task #93: fused_nn_avg_pool2d_2] Trial #1: GFLOPs: 27.1735. Time: 47.6051 us. Best GFLOPs: 27.1735
2024-04-29 05:13:33 [INFO] [task_scheduler.cc:131] [Task #93: fused_nn_avg_pool2d_2] Trial #2: GFLOPs: 23.2656. Time: 55.6013 us. Best GFLOPs: 27.1735
2024-04-29 05:13:33 [INFO] [task_scheduler.cc:131] [Task #93: fused_nn_avg_pool2d_2] Trial #3: GFLOPs: 23.8386. Time: 54.2648 us. Best GFLOPs: 27.1735
2024-04-29 05:13:33 [INFO] [task_scheduler.cc:131] [Task #93: fused_nn_avg_pool2d_2] Trial #4: GFLOPs: 96.5677. Time: 13.3958 us. Best GFLOPs: 96.5677
2024-04-29 05:13:33 [INFO] [task_scheduler.cc:131] [Task #93: fused_nn_avg_pool2d_2] Trial #5: GFLOPs: 104.6863. Time: 12.3569 us. Best GFLOPs: 104.6863
2024-04-29 05:13:33 [INFO] [task_scheduler.cc:131] [Task #93: fused_nn_avg_pool2d_2] Trial #6: GFLOPs: 108.1115. Time: 11.9654 us. Best GFLOPs: 108.1115
2024-04-29 05:13:33 [INFO] [task_scheduler.cc:131] [Task #93: fused_nn_avg_pool2d_2] Trial #7: GFLOPs: 37.0556. Time: 34.9097 us. Best GFLOPs: 108.1115
2024-04-29 05:13:33 [INFO] [task_scheduler.cc:131] [Task #93: fused_nn_avg_pool2d_2] Trial #8: GFLOPs: 114.2638. Time: 11.3212 us. Best GFLOPs: 114.2638
2024-04-29 05:13:33 [INFO] [task_scheduler.cc:131] [Task #93: fused_nn_avg_pool2d_2] Trial #9: GFLOPs: 79.0063. Time: 16.3734 us. Best GFLOPs: 114.2638
2024-04-29 05:13:33 [INFO] [task_scheduler.cc:131] [Task #93: fused_nn_avg_pool2d_2] Trial #10: GFLOPs: 90.7694. Time: 14.2515 us. Best GFLOPs: 114.2638
2024-04-29 05:13:33 [INFO] [task_scheduler.cc:131] [Task #93: fused_nn_avg_pool2d_2] Trial #11: GFLOPs: 37.2846. Time: 34.6953 us. Best GFLOPs: 114.2638
2024-04-29 05:13:33 [INFO] [task_scheduler.cc:131] [Task #93: fused_nn_avg_pool2d_2] Trial #12: GFLOPs: 56.1490. Time: 23.0387 us. Best GFLOPs: 114.2638
2024-04-29 05:13:33 [INFO] [task_scheduler.cc:131] [Task #93: fused_nn_avg_pool2d_2] Trial #13: GFLOPs: 70.4999. Time: 18.3490 us. Best GFLOPs: 114.2638
2024-04-29 05:13:33 [INFO] [task_scheduler.cc:131] [Task #93: fused_nn_avg_pool2d_2] Trial #14: GFLOPs: 26.5482. Time: 48.7264 us. Best GFLOPs: 114.2638
2024-04-29 05:13:33 [INFO] [task_scheduler.cc:131] [Task #93: fused_nn_avg_pool2d_2] Trial #15: GFLOPs: 40.6063. Time: 31.8571 us. Best GFLOPs: 114.2638
2024-04-29 05:13:33 [INFO] [task_scheduler.cc:131] [Task #93: fused_nn_avg_pool2d_2] Trial #16: GFLOPs: 31.0359. Time: 41.6807 us. Best GFLOPs: 114.2638
2024-04-29 05:13:33 [INFO] [task_scheduler.cc:131] [Task #93: fused_nn_avg_pool2d_2] Trial #17: GFLOPs: 59.0970. Time: 21.8894 us. Best GFLOPs: 114.2638
2024-04-29 05:13:33 [INFO] [task_scheduler.cc:131] [Task #93: fused_nn_avg_pool2d_2] Trial #18: GFLOPs: 59.2460. Time: 21.8344 us. Best GFLOPs: 114.2638
2024-04-29 05:13:33 [INFO] [task_scheduler.cc:131] [Task #93: fused_nn_avg_pool2d_2] Trial #19: GFLOPs: 116.2033. Time: 11.1322 us. Best GFLOPs: 116.2033
2024-04-29 05:13:33 [INFO] [task_scheduler.cc:131] [Task #93: fused_nn_avg_pool2d_2] Trial #20: GFLOPs: 69.9305. Time: 18.4984 us. Best GFLOPs: 116.2033
2024-04-29 05:13:33 [INFO] [task_scheduler.cc:131] [Task #93: fused_nn_avg_pool2d_2] Trial #21: GFLOPs: 117.4263. Time: 11.0163 us. Best GFLOPs: 117.4263
2024-04-29 05:13:33 [INFO] [task_scheduler.cc:131] [Task #93: fused_nn_avg_pool2d_2] Trial #22: GFLOPs: 25.9380. Time: 49.8728 us. Best GFLOPs: 117.4263
2024-04-29 05:13:33 [INFO] [task_scheduler.cc:131] [Task #93: fused_nn_avg_pool2d_2] Trial #23: GFLOPs: 70.6373. Time: 18.3133 us. Best GFLOPs: 117.4263
2024-04-29 05:13:33 [INFO] [task_scheduler.cc:131] [Task #93: fused_nn_avg_pool2d_2] Trial #24: GFLOPs: 64.2906. Time: 20.1211 us. Best GFLOPs: 117.4263
2024-04-29 05:13:33 [INFO] [task_scheduler.cc:131] [Task #93: fused_nn_avg_pool2d_2] Trial #25: GFLOPs: 86.4782. Time: 14.9587 us. Best GFLOPs: 117.4263
2024-04-29 05:13:33 [INFO] [task_scheduler.cc:131] [Task #93: fused_nn_avg_pool2d_2] Trial #26: GFLOPs: 76.9232. Time: 16.8168 us. Best GFLOPs: 117.4263
2024-04-29 05:13:33 [INFO] [task_scheduler.cc:131] [Task #93: fused_nn_avg_pool2d_2] Trial #27: GFLOPs: 85.9881. Time: 15.0439 us. Best GFLOPs: 117.4263
2024-04-29 05:13:33 [INFO] [task_scheduler.cc:131] [Task #93: fused_nn_avg_pool2d_2] Trial #28: GFLOPs: 54.2667. Time: 23.8378 us. Best GFLOPs: 117.4263
2024-04-29 05:13:33 [INFO] [task_scheduler.cc:131] [Task #93: fused_nn_avg_pool2d_2] Trial #29: GFLOPs: 38.9987. Time: 33.1703 us. Best GFLOPs: 117.4263
2024-04-29 05:13:33 [INFO] [task_scheduler.cc:131] [Task #93: fused_nn_avg_pool2d_2] Trial #30: GFLOPs: 94.2018. Time: 13.7322 us. Best GFLOPs: 117.4263
2024-04-29 05:13:33 [INFO] [task_scheduler.cc:131] [Task #93: fused_nn_avg_pool2d_2] Trial #31: GFLOPs: 77.5377. Time: 16.6835 us. Best GFLOPs: 117.4263
2024-04-29 05:13:33 [INFO] [task_scheduler.cc:131] [Task #93: fused_nn_avg_pool2d_2] Trial #32: GFLOPs: 24.9401. Time: 51.8682 us. Best GFLOPs: 117.4263
2024-04-29 05:13:33 [INFO] [task_scheduler.cc:131] [Task #93: fused_nn_avg_pool2d_2] Trial #33: GFLOPs: 47.7382. Time: 27.0978 us. Best GFLOPs: 117.4263
2024-04-29 05:13:33 [INFO] [task_scheduler.cc:121] [Task #93: fused_nn_avg_pool2d_2] Trial #34: Error in building:
LocalBuilder: Timeout, killed after 30.0 seconds
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(264), T.int64(14), T.int64(14), T.int64(4)), "float32"), pool_avg: T.Buffer((T.int64(1), T.int64(264), T.int64(7), T.int64(7), T.int64(4)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        pool_sum = T.alloc_buffer((T.int64(1), T.int64(264), T.int64(7), T.int64(7), T.int64(4)))
        pool_sum_rf = T.alloc_buffer((T.int64(1), T.int64(264), T.int64(7), T.int64(7), T.int64(4), T.int64(2)))
        for ax0_ax1_fused in T.parallel(T.int64(264), annotations={"pragma_auto_unroll_max_step": 512, "pragma_unroll_explicit": 1}):
            for ax0_init, ax0_init_1, ax1_init, ax2_init, ax3_init, ax4_init, ax5_init in T.grid(T.int64(2), T.int64(1), T.int64(1), T.int64(1), T.int64(7), T.int64(7), T.int64(4)):
                with T.block("pool_sum_rf_init"):
                    vrv0_rv1_fused_1 = T.axis.spatial(T.int64(2), ax0_init + ax0_init_1)
                    v_ax0 = T.axis.spatial(T.int64(1), ax1_init)
                    v_ax1 = T.axis.spatial(T.int64(264), ax0_ax1_fused + ax2_init)
                    v_ax2, v_ax3, v_ax4 = T.axis.remap("SSS", [ax3_init, ax4_init, ax5_init])
                    T.reads()
                    T.writes(pool_sum_rf[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4, vrv0_rv1_fused_1])
                    pool_sum_rf[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4, vrv0_rv1_fused_1] = T.float32(0)
            for ax1_init, ax2_init, ax3_init in T.grid(T.int64(1), T.int64(1), T.int64(7)):
                for ax4_ax5_fused_init in T.vectorized(T.int64(28)):
                    with T.block("pool_sum_init"):
                        v_ax0 = T.axis.spatial(T.int64(1), ax1_init)
                        v_ax1 = T.axis.spatial(T.int64(264), ax0_ax1_fused + ax2_init)
                        v_ax2 = T.axis.spatial(T.int64(7), ax3_init)
                        v_ax3 = T.axis.spatial(T.int64(7), ax4_ax5_fused_init // T.int64(4))
                        v_ax4 = T.axis.spatial(T.int64(4), ax4_ax5_fused_init % T.int64(4))
                        T.reads()
                        T.writes(pool_sum[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                        pool_sum[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.float32(0)
            for ax0 in range(T.int64(2)):
                for ax0_1, ax1, ax2, ax3, ax4, ax5, ax6 in T.grid(T.int64(1), T.int64(1), T.int64(1), T.int64(7), T.int64(7), T.int64(4), T.int64(2)):
                    with T.block("pool_sum_rf_update"):
                        vrv0_rv1_fused_1 = T.axis.spatial(T.int64(2), ax0 + ax0_1)
                        v_ax0 = T.axis.spatial(T.int64(1), ax1)
                        v_ax1 = T.axis.spatial(T.int64(264), ax0_ax1_fused + ax2)
                        v_ax2, v_ax3, v_ax4, vrv0_rv1_fused_0 = T.axis.remap("SSSR", [ax3, ax4, ax5, ax6])
                        T.reads(pool_sum_rf[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4, vrv0_rv1_fused_1], p0[v_ax0, v_ax1, v_ax2 * T.int64(2) + (vrv0_rv1_fused_0 * T.int64(2) + vrv0_rv1_fused_1) // T.int64(2), v_ax3 * T.int64(2) + (vrv0_rv1_fused_0 * T.int64(2) + vrv0_rv1_fused_1) % T.int64(2), v_ax4])
                        T.writes(pool_sum_rf[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4, vrv0_rv1_fused_1])
                        pool_sum_rf[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4, vrv0_rv1_fused_1] = pool_sum_rf[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4, vrv0_rv1_fused_1] + p0[v_ax0, v_ax1, v_ax2 * T.int64(2) + (vrv0_rv1_fused_0 * T.int64(2) + vrv0_rv1_fused_1) // T.int64(2), v_ax3 * T.int64(2) + (vrv0_rv1_fused_0 * T.int64(2) + vrv0_rv1_fused_1) % T.int64(2), v_ax4]
                for ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(1), T.int64(7)):
                    for ax4_ax5_fused in T.vectorized(T.int64(28)):
                        with T.block("pool_sum_update"):
                            vrv0_rv1_fused_1, v_ax0 = T.axis.remap("RS", [ax0, ax1])
                            v_ax1 = T.axis.spatial(T.int64(264), ax0_ax1_fused + ax2)
                            v_ax2 = T.axis.spatial(T.int64(7), ax3)
                            v_ax3 = T.axis.spatial(T.int64(7), ax4_ax5_fused // T.int64(4))
                            v_ax4 = T.axis.spatial(T.int64(4), ax4_ax5_fused % T.int64(4))
                            T.reads(pool_sum[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], pool_sum_rf[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4, vrv0_rv1_fused_1])
                            T.writes(pool_sum[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                            pool_sum[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = pool_sum[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] + pool_sum_rf[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4, vrv0_rv1_fused_1]
            for ax2 in range(T.int64(7)):
                for ax3_ax4_fused in T.vectorized(T.int64(28)):
                    with T.block("pool_avg"):
                        v_ax0 = T.axis.spatial(T.int64(1), T.int64(0))
                        v_ax1, v_ax2 = T.axis.remap("SS", [ax0_ax1_fused, ax2])
                        v_ax3 = T.axis.spatial(T.int64(7), ax3_ax4_fused // T.int64(4))
                        v_ax4 = T.axis.spatial(T.int64(4), ax3_ax4_fused % T.int64(4))
                        T.reads(pool_sum[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                        T.writes(pool_avg[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                        pool_avg[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = pool_sum[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] / T.Cast("float32", T.max((T.min(v_ax2, T.int64(0)) * T.int64(2) + T.min(v_ax2 * T.int64(2) + T.int64(1), T.int64(13)) + T.int64(1) - v_ax2 * T.int64(2)) * (T.min(v_ax3, T.int64(0)) * T.int64(2) + T.min(v_ax3 * T.int64(2) + T.int64(1), T.int64(13)) + T.int64(1) - v_ax3 * T.int64(2)), T.int64(1)))
b0 = sch.get_block(name="pool_sum", func_name="main")
b1 = sch.get_block(name="pool_avg", func_name="main")
b2 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b1, ann_key="schedule_rule")
l3, l4, l5, l6, l7, l8, l9 = sch.get_loops(block=b0)
l10 = sch.fuse(l8, l9, preserve_unit_iters=True)
v11, v12 = sch.sample_perfect_tile(loop=l10, n=2, max_innermost_factor=64, decision=[2, 2])
l13, l14 = sch.split(loop=l10, factors=[v11, v12], preserve_unit_iters=True)
b15 = sch.rfactor(loop=l14, factor_axis=5)
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.random_compute_producer", ann_val=1)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.vectorize", ann_val=64)
v16 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.unroll_explicit", ann_val=v16)
b17, = sch.get_producers(block=b0)
sch.unannotate(block_or_loop=b0, ann_key="meta_schedule.random_compute_producer")
l18 = sch.sample_compute_location(block=b0, decision=1)
sch.compute_at(block=b0, loop=l18, preserve_unit_loops=True, index=-1)
l19 = sch.sample_compute_location(block=b17, decision=2)
sch.compute_at(block=b17, loop=l19, preserve_unit_loops=True, index=-1)
sch.enter_postproc()
b20 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b20, ann_key="meta_schedule.parallel")
sch.unannotate(block_or_loop=b20, ann_key="meta_schedule.vectorize")
sch.unannotate(block_or_loop=b20, ann_key="meta_schedule.unroll_explicit")
b21, b22, b23 = sch.get_child_blocks(b20)
l24, l25, l26, l27, l28, l29, l30, l31, l32, l33 = sch.get_loops(block=b21)
l34 = sch.fuse(l24, l25, preserve_unit_iters=True)
sch.parallel(loop=l34)
sch.annotate(block_or_loop=l34, ann_key="pragma_auto_unroll_max_step", ann_val=512)
sch.annotate(block_or_loop=l34, ann_key="pragma_unroll_explicit", ann_val=1)
l35, l36, l37, l38, l39, l40, l41 = sch.get_loops(block=b22)
l42 = sch.fuse(l40, l41, preserve_unit_iters=True)
sch.vectorize(loop=l42)
sch.annotate(block_or_loop=l35, ann_key="pragma_auto_unroll_max_step", ann_val=512)
sch.annotate(block_or_loop=l35, ann_key="pragma_unroll_explicit", ann_val=1)
l43, l44, l45, l46 = sch.get_loops(block=b23)
l47 = sch.fuse(l45, l46, preserve_unit_iters=True)
sch.vectorize(loop=l47)
b48 = sch.get_block(name="pool_sum_rf", func_name="main")
l49, l50, l51, l52, l53, l54, l55, l56, l57 = sch.get_loops(block=b48)
b58 = sch.decompose_reduction(block=b48, loop=l50)
b59 = sch.get_block(name="pool_sum", func_name="main")
l60, l61, l62, l63, l64, l65 = sch.get_loops(block=b59)
b66 = sch.decompose_reduction(block=b59, loop=l61)
2024-04-29 05:13:33 [INFO] [task_scheduler.cc:131] [Task #93: fused_nn_avg_pool2d_2] Trial #35: GFLOPs: 21.7273. Time: 59.5379 us. Best GFLOPs: 117.4263
2024-04-29 05:13:33 [INFO] [task_scheduler.cc:121] [Task #93: fused_nn_avg_pool2d_2] Trial #36: Error in building:
LocalBuilder: Timeout, killed after 30.0 seconds
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(264), T.int64(14), T.int64(14), T.int64(4)), "float32"), pool_avg: T.Buffer((T.int64(1), T.int64(264), T.int64(7), T.int64(7), T.int64(4)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        pool_sum = T.alloc_buffer((T.int64(1), T.int64(264), T.int64(7), T.int64(7), T.int64(4)))
        pool_sum_rf = T.alloc_buffer((T.int64(1), T.int64(264), T.int64(7), T.int64(7), T.int64(4), T.int64(4)))
        for ax0_ax1_fused in T.parallel(T.int64(264), annotations={"pragma_auto_unroll_max_step": 512, "pragma_unroll_explicit": 1}):
            for ax0, ax1, ax2, ax3, ax4, ax5 in T.grid(T.int64(4), T.int64(1), T.int64(1), T.int64(7), T.int64(7), T.int64(4)):
                with T.block("pool_sum_rf_init"):
                    vrv0_rv1_fused_0, v_ax0 = T.axis.remap("SS", [ax0, ax1])
                    v_ax1 = T.axis.spatial(T.int64(264), ax0_ax1_fused + ax2)
                    v_ax2, v_ax3, v_ax4 = T.axis.remap("SSS", [ax3, ax4, ax5])
                    T.reads()
                    T.writes(pool_sum_rf[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4, vrv0_rv1_fused_0])
                    pool_sum_rf[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4, vrv0_rv1_fused_0] = T.float32(0)
                for ax6 in range(T.int64(1)):
                    with T.block("pool_sum_rf_update"):
                        vrv0_rv1_fused_0, v_ax0 = T.axis.remap("SS", [ax0, ax1])
                        v_ax1 = T.axis.spatial(T.int64(264), ax0_ax1_fused + ax2)
                        v_ax2, v_ax3, v_ax4, vrv0_rv1_fused_1 = T.axis.remap("SSSR", [ax3, ax4, ax5, ax6])
                        T.reads(pool_sum_rf[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4, vrv0_rv1_fused_0], p0[v_ax0, v_ax1, v_ax2 * T.int64(2) + (vrv0_rv1_fused_0 + vrv0_rv1_fused_1) // T.int64(2), v_ax3 * T.int64(2) + (vrv0_rv1_fused_0 + vrv0_rv1_fused_1) % T.int64(2), v_ax4])
                        T.writes(pool_sum_rf[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4, vrv0_rv1_fused_0])
                        pool_sum_rf[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4, vrv0_rv1_fused_0] = pool_sum_rf[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4, vrv0_rv1_fused_0] + p0[v_ax0, v_ax1, v_ax2 * T.int64(2) + (vrv0_rv1_fused_0 + vrv0_rv1_fused_1) // T.int64(2), v_ax3 * T.int64(2) + (vrv0_rv1_fused_0 + vrv0_rv1_fused_1) % T.int64(2), v_ax4]
            for ax1_init, ax2_init, ax3_init in T.grid(T.int64(1), T.int64(1), T.int64(7)):
                for ax4_ax5_fused_init in T.vectorized(T.int64(28)):
                    with T.block("pool_sum_init"):
                        v_ax0 = T.axis.spatial(T.int64(1), ax1_init)
                        v_ax1 = T.axis.spatial(T.int64(264), ax0_ax1_fused + ax2_init)
                        v_ax2 = T.axis.spatial(T.int64(7), ax3_init)
                        v_ax3 = T.axis.spatial(T.int64(7), ax4_ax5_fused_init // T.int64(4))
                        v_ax4 = T.axis.spatial(T.int64(4), ax4_ax5_fused_init % T.int64(4))
                        T.reads()
                        T.writes(pool_sum[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                        pool_sum[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.float32(0)
            for ax0, ax1, ax2, ax3 in T.grid(T.int64(4), T.int64(1), T.int64(1), T.int64(7)):
                for ax4_ax5_fused in T.vectorized(T.int64(28)):
                    with T.block("pool_sum_update"):
                        vrv0_rv1_fused_0, v_ax0 = T.axis.remap("RS", [ax0, ax1])
                        v_ax1 = T.axis.spatial(T.int64(264), ax0_ax1_fused + ax2)
                        v_ax2 = T.axis.spatial(T.int64(7), ax3)
                        v_ax3 = T.axis.spatial(T.int64(7), ax4_ax5_fused // T.int64(4))
                        v_ax4 = T.axis.spatial(T.int64(4), ax4_ax5_fused % T.int64(4))
                        T.reads(pool_sum[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], pool_sum_rf[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4, vrv0_rv1_fused_0])
                        T.writes(pool_sum[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                        pool_sum[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = pool_sum[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] + pool_sum_rf[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4, vrv0_rv1_fused_0]
            for ax2 in range(T.int64(7)):
                for ax3_ax4_fused in T.vectorized(T.int64(28)):
                    with T.block("pool_avg"):
                        v_ax0 = T.axis.spatial(T.int64(1), T.int64(0))
                        v_ax1, v_ax2 = T.axis.remap("SS", [ax0_ax1_fused, ax2])
                        v_ax3 = T.axis.spatial(T.int64(7), ax3_ax4_fused // T.int64(4))
                        v_ax4 = T.axis.spatial(T.int64(4), ax3_ax4_fused % T.int64(4))
                        T.reads(pool_sum[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                        T.writes(pool_avg[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                        pool_avg[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = pool_sum[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] / T.Cast("float32", T.max((T.min(v_ax2, T.int64(0)) * T.int64(2) + T.min(v_ax2 * T.int64(2) + T.int64(1), T.int64(13)) + T.int64(1) - v_ax2 * T.int64(2)) * (T.min(v_ax3, T.int64(0)) * T.int64(2) + T.min(v_ax3 * T.int64(2) + T.int64(1), T.int64(13)) + T.int64(1) - v_ax3 * T.int64(2)), T.int64(1)))
b0 = sch.get_block(name="pool_sum", func_name="main")
b1 = sch.get_block(name="pool_avg", func_name="main")
b2 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b1, ann_key="schedule_rule")
l3, l4, l5, l6, l7, l8, l9 = sch.get_loops(block=b0)
l10 = sch.fuse(l8, l9, preserve_unit_iters=True)
v11, v12 = sch.sample_perfect_tile(loop=l10, n=2, max_innermost_factor=64, decision=[4, 1])
l13, l14 = sch.split(loop=l10, factors=[v11, v12], preserve_unit_iters=True)
b15 = sch.rfactor(loop=l13, factor_axis=5)
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.random_compute_producer", ann_val=1)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.vectorize", ann_val=64)
v16 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.unroll_explicit", ann_val=v16)
b17, = sch.get_producers(block=b0)
sch.unannotate(block_or_loop=b0, ann_key="meta_schedule.random_compute_producer")
l18 = sch.sample_compute_location(block=b0, decision=1)
sch.compute_at(block=b0, loop=l18, preserve_unit_loops=True, index=-1)
l19 = sch.sample_compute_location(block=b17, decision=1)
sch.compute_at(block=b17, loop=l19, preserve_unit_loops=True, index=-1)
sch.enter_postproc()
b20 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b20, ann_key="meta_schedule.parallel")
sch.unannotate(block_or_loop=b20, ann_key="meta_schedule.vectorize")
sch.unannotate(block_or_loop=b20, ann_key="meta_schedule.unroll_explicit")
b21, b22, b23 = sch.get_child_blocks(b20)
l24, l25, l26, l27, l28, l29, l30, l31, l32 = sch.get_loops(block=b21)
l33 = sch.fuse(l24, l25, preserve_unit_iters=True)
sch.parallel(loop=l33)
sch.annotate(block_or_loop=l33, ann_key="pragma_auto_unroll_max_step", ann_val=512)
sch.annotate(block_or_loop=l33, ann_key="pragma_unroll_explicit", ann_val=1)
l34, l35, l36, l37, l38, l39, l40 = sch.get_loops(block=b22)
l41 = sch.fuse(l39, l40, preserve_unit_iters=True)
sch.vectorize(loop=l41)
sch.annotate(block_or_loop=l34, ann_key="pragma_auto_unroll_max_step", ann_val=512)
sch.annotate(block_or_loop=l34, ann_key="pragma_unroll_explicit", ann_val=1)
l42, l43, l44, l45 = sch.get_loops(block=b23)
l46 = sch.fuse(l44, l45, preserve_unit_iters=True)
sch.vectorize(loop=l46)
b47 = sch.get_block(name="pool_sum_rf", func_name="main")
l48, l49, l50, l51, l52, l53, l54, l55 = sch.get_loops(block=b47)
b56 = sch.decompose_reduction(block=b47, loop=l55)
b57 = sch.get_block(name="pool_sum", func_name="main")
l58, l59, l60, l61, l62, l63 = sch.get_loops(block=b57)
b64 = sch.decompose_reduction(block=b57, loop=l59)
2024-04-29 05:13:33 [INFO] [task_scheduler.cc:131] [Task #93: fused_nn_avg_pool2d_2] Trial #37: GFLOPs: 36.5857. Time: 35.3581 us. Best GFLOPs: 117.4263
2024-04-29 05:13:33 [INFO] [task_scheduler.cc:131] [Task #93: fused_nn_avg_pool2d_2] Trial #38: GFLOPs: 29.8666. Time: 43.3126 us. Best GFLOPs: 117.4263
2024-04-29 05:13:33 [INFO] [task_scheduler.cc:131] [Task #93: fused_nn_avg_pool2d_2] Trial #39: GFLOPs: 105.1091. Time: 12.3072 us. Best GFLOPs: 117.4263
2024-04-29 05:13:33 [INFO] [task_scheduler.cc:131] [Task #93: fused_nn_avg_pool2d_2] Trial #40: GFLOPs: 108.6510. Time: 11.9060 us. Best GFLOPs: 117.4263
2024-04-29 05:13:33 [INFO] [task_scheduler.cc:131] [Task #93: fused_nn_avg_pool2d_2] Trial #41: GFLOPs: 110.3619. Time: 11.7214 us. Best GFLOPs: 117.4263
2024-04-29 05:13:33 [INFO] [task_scheduler.cc:131] [Task #93: fused_nn_avg_pool2d_2] Trial #42: GFLOPs: 34.2044. Time: 37.8196 us. Best GFLOPs: 117.4263
2024-04-29 05:13:33 [INFO] [task_scheduler.cc:131] [Task #93: fused_nn_avg_pool2d_2] Trial #43: GFLOPs: 104.9352. Time: 12.3276 us. Best GFLOPs: 117.4263
2024-04-29 05:13:33 [INFO] [task_scheduler.cc:131] [Task #93: fused_nn_avg_pool2d_2] Trial #44: GFLOPs: 86.7198. Time: 14.9170 us. Best GFLOPs: 117.4263
2024-04-29 05:13:33 [INFO] [task_scheduler.cc:131] [Task #93: fused_nn_avg_pool2d_2] Trial #45: GFLOPs: 47.0958. Time: 27.4674 us. Best GFLOPs: 117.4263
2024-04-29 05:13:33 [INFO] [task_scheduler.cc:121] [Task #93: fused_nn_avg_pool2d_2] Trial #46: Error in building:
LocalBuilder: Timeout, killed after 30.0 seconds
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(264), T.int64(14), T.int64(14), T.int64(4)), "float32"), pool_avg: T.Buffer((T.int64(1), T.int64(264), T.int64(7), T.int64(7), T.int64(4)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        pool_sum = T.alloc_buffer((T.int64(1), T.int64(264), T.int64(7), T.int64(7), T.int64(4)))
        pool_sum_rf = T.alloc_buffer((T.int64(1), T.int64(264), T.int64(7), T.int64(7), T.int64(4), T.int64(4)))
        for ax0_ax1_fused in T.parallel(T.int64(264), annotations={"pragma_auto_unroll_max_step": 512, "pragma_unroll_explicit": 1}):
            for ax0, ax1, ax2, ax3, ax4, ax5 in T.grid(T.int64(4), T.int64(1), T.int64(1), T.int64(7), T.int64(7), T.int64(4)):
                with T.block("pool_sum_rf_init"):
                    vrv0_rv1_fused_0, v_ax0 = T.axis.remap("SS", [ax0, ax1])
                    v_ax1 = T.axis.spatial(T.int64(264), ax0_ax1_fused + ax2)
                    v_ax2, v_ax3, v_ax4 = T.axis.remap("SSS", [ax3, ax4, ax5])
                    T.reads()
                    T.writes(pool_sum_rf[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4, vrv0_rv1_fused_0])
                    pool_sum_rf[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4, vrv0_rv1_fused_0] = T.float32(0)
                for ax6 in range(T.int64(1)):
                    with T.block("pool_sum_rf_update"):
                        vrv0_rv1_fused_0, v_ax0 = T.axis.remap("SS", [ax0, ax1])
                        v_ax1 = T.axis.spatial(T.int64(264), ax0_ax1_fused + ax2)
                        v_ax2, v_ax3, v_ax4, vrv0_rv1_fused_1 = T.axis.remap("SSSR", [ax3, ax4, ax5, ax6])
                        T.reads(pool_sum_rf[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4, vrv0_rv1_fused_0], p0[v_ax0, v_ax1, v_ax2 * T.int64(2) + (vrv0_rv1_fused_0 + vrv0_rv1_fused_1) // T.int64(2), v_ax3 * T.int64(2) + (vrv0_rv1_fused_0 + vrv0_rv1_fused_1) % T.int64(2), v_ax4])
                        T.writes(pool_sum_rf[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4, vrv0_rv1_fused_0])
                        pool_sum_rf[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4, vrv0_rv1_fused_0] = pool_sum_rf[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4, vrv0_rv1_fused_0] + p0[v_ax0, v_ax1, v_ax2 * T.int64(2) + (vrv0_rv1_fused_0 + vrv0_rv1_fused_1) // T.int64(2), v_ax3 * T.int64(2) + (vrv0_rv1_fused_0 + vrv0_rv1_fused_1) % T.int64(2), v_ax4]
            for ax2, ax3, ax4 in T.grid(T.int64(7), T.int64(7), T.int64(4)):
                for ax1_init, ax2_init, ax3_init, ax4_init, ax5_init in T.grid(T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1)):
                    with T.block("pool_sum_init"):
                        v_ax0 = T.axis.spatial(T.int64(1), ax1_init)
                        v_ax1 = T.axis.spatial(T.int64(264), ax0_ax1_fused + ax2_init)
                        v_ax2 = T.axis.spatial(T.int64(7), ax2 + ax3_init)
                        v_ax3 = T.axis.spatial(T.int64(7), ax3 + ax4_init)
                        v_ax4 = T.axis.spatial(T.int64(4), ax4 + ax5_init)
                        T.reads()
                        T.writes(pool_sum[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                        pool_sum[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.float32(0)
                for ax0, ax1, ax2_1, ax3_1, ax4_1, ax5 in T.grid(T.int64(4), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1)):
                    with T.block("pool_sum_update"):
                        vrv0_rv1_fused_0, v_ax0 = T.axis.remap("RS", [ax0, ax1])
                        v_ax1 = T.axis.spatial(T.int64(264), ax0_ax1_fused + ax2_1)
                        v_ax2 = T.axis.spatial(T.int64(7), ax2 + ax3_1)
                        v_ax3 = T.axis.spatial(T.int64(7), ax3 + ax4_1)
                        v_ax4 = T.axis.spatial(T.int64(4), ax4 + ax5)
                        T.reads(pool_sum[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], pool_sum_rf[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4, vrv0_rv1_fused_0])
                        T.writes(pool_sum[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                        pool_sum[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = pool_sum[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] + pool_sum_rf[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4, vrv0_rv1_fused_0]
                with T.block("pool_avg"):
                    v_ax0 = T.axis.spatial(T.int64(1), T.int64(0))
                    v_ax1, v_ax2, v_ax3, v_ax4 = T.axis.remap("SSSS", [ax0_ax1_fused, ax2, ax3, ax4])
                    T.reads(pool_sum[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                    T.writes(pool_avg[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                    pool_avg[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = pool_sum[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] / T.Cast("float32", T.max((T.min(v_ax2, T.int64(0)) * T.int64(2) + T.min(v_ax2 * T.int64(2) + T.int64(1), T.int64(13)) + T.int64(1) - v_ax2 * T.int64(2)) * (T.min(v_ax3, T.int64(0)) * T.int64(2) + T.min(v_ax3 * T.int64(2) + T.int64(1), T.int64(13)) + T.int64(1) - v_ax3 * T.int64(2)), T.int64(1)))
b0 = sch.get_block(name="pool_sum", func_name="main")
b1 = sch.get_block(name="pool_avg", func_name="main")
b2 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b1, ann_key="schedule_rule")
l3, l4, l5, l6, l7, l8, l9 = sch.get_loops(block=b0)
l10 = sch.fuse(l8, l9, preserve_unit_iters=True)
v11, v12 = sch.sample_perfect_tile(loop=l10, n=2, max_innermost_factor=64, decision=[4, 1])
l13, l14 = sch.split(loop=l10, factors=[v11, v12], preserve_unit_iters=True)
b15 = sch.rfactor(loop=l13, factor_axis=5)
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.random_compute_producer", ann_val=1)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.vectorize", ann_val=64)
v16 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.unroll_explicit", ann_val=v16)
b17, = sch.get_producers(block=b0)
sch.unannotate(block_or_loop=b0, ann_key="meta_schedule.random_compute_producer")
l18 = sch.sample_compute_location(block=b0, decision=4)
sch.compute_at(block=b0, loop=l18, preserve_unit_loops=True, index=-1)
l19 = sch.sample_compute_location(block=b17, decision=1)
sch.compute_at(block=b17, loop=l19, preserve_unit_loops=True, index=-1)
sch.enter_postproc()
b20 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b20, ann_key="meta_schedule.parallel")
sch.unannotate(block_or_loop=b20, ann_key="meta_schedule.vectorize")
sch.unannotate(block_or_loop=b20, ann_key="meta_schedule.unroll_explicit")
b21, b22, b23 = sch.get_child_blocks(b20)
l24, l25, l26, l27, l28, l29, l30, l31, l32 = sch.get_loops(block=b21)
l33 = sch.fuse(l24, l25, preserve_unit_iters=True)
sch.parallel(loop=l33)
sch.annotate(block_or_loop=l33, ann_key="pragma_auto_unroll_max_step", ann_val=512)
sch.annotate(block_or_loop=l33, ann_key="pragma_unroll_explicit", ann_val=1)
l34, l35, l36, l37, l38, l39, l40, l41, l42, l43 = sch.get_loops(block=b22)
sch.annotate(block_or_loop=l34, ann_key="pragma_auto_unroll_max_step", ann_val=512)
sch.annotate(block_or_loop=l34, ann_key="pragma_unroll_explicit", ann_val=1)
l44, l45, l46, l47 = sch.get_loops(block=b23)
b48 = sch.get_block(name="pool_sum_rf", func_name="main")
l49, l50, l51, l52, l53, l54, l55, l56 = sch.get_loops(block=b48)
b57 = sch.decompose_reduction(block=b48, loop=l56)
b58 = sch.get_block(name="pool_sum", func_name="main")
l59, l60, l61, l62, l63, l64, l65, l66, l67, l68 = sch.get_loops(block=b58)
b69 = sch.decompose_reduction(block=b58, loop=l63)
2024-04-29 05:13:33 [INFO] [task_scheduler.cc:131] [Task #93: fused_nn_avg_pool2d_2] Trial #47: GFLOPs: 34.5120. Time: 37.4826 us. Best GFLOPs: 117.4263
2024-04-29 05:13:33 [INFO] [task_scheduler.cc:131] [Task #93: fused_nn_avg_pool2d_2] Trial #48: GFLOPs: 38.2773. Time: 33.7955 us. Best GFLOPs: 117.4263
2024-04-29 05:13:33 [INFO] [task_scheduler.cc:131] [Task #93: fused_nn_avg_pool2d_2] Trial #49: GFLOPs: 104.6770. Time: 12.3580 us. Best GFLOPs: 117.4263
2024-04-29 05:13:33 [INFO] [task_scheduler.cc:131] [Task #93: fused_nn_avg_pool2d_2] Trial #50: GFLOPs: 61.2135. Time: 21.1326 us. Best GFLOPs: 117.4263
2024-04-29 05:13:33 [INFO] [task_scheduler.cc:131] [Task #93: fused_nn_avg_pool2d_2] Trial #51: GFLOPs: 29.8608. Time: 43.3210 us. Best GFLOPs: 117.4263
2024-04-29 05:13:33 [INFO] [task_scheduler.cc:131] [Task #93: fused_nn_avg_pool2d_2] Trial #52: GFLOPs: 75.0579. Time: 17.2347 us. Best GFLOPs: 117.4263
2024-04-29 05:13:33 [INFO] [task_scheduler.cc:131] [Task #93: fused_nn_avg_pool2d_2] Trial #53: GFLOPs: 32.8357. Time: 39.3961 us. Best GFLOPs: 117.4263
2024-04-29 05:13:33 [INFO] [task_scheduler.cc:131] [Task #93: fused_nn_avg_pool2d_2] Trial #54: GFLOPs: 29.6205. Time: 43.6725 us. Best GFLOPs: 117.4263
2024-04-29 05:13:33 [INFO] [task_scheduler.cc:131] [Task #93: fused_nn_avg_pool2d_2] Trial #55: GFLOPs: 58.8163. Time: 21.9939 us. Best GFLOPs: 117.4263
2024-04-29 05:13:33 [INFO] [task_scheduler.cc:131] [Task #93: fused_nn_avg_pool2d_2] Trial #56: GFLOPs: 37.3336. Time: 34.6498 us. Best GFLOPs: 117.4263
2024-04-29 05:13:33 [INFO] [task_scheduler.cc:131] [Task #93: fused_nn_avg_pool2d_2] Trial #57: GFLOPs: 42.2040. Time: 30.6511 us. Best GFLOPs: 117.4263
2024-04-29 05:13:33 [INFO] [task_scheduler.cc:131] [Task #93: fused_nn_avg_pool2d_2] Trial #58: GFLOPs: 35.9462. Time: 35.9871 us. Best GFLOPs: 117.4263
2024-04-29 05:13:33 [INFO] [task_scheduler.cc:131] [Task #93: fused_nn_avg_pool2d_2] Trial #59: GFLOPs: 60.8537. Time: 21.2575 us. Best GFLOPs: 117.4263
2024-04-29 05:13:33 [INFO] [task_scheduler.cc:131] [Task #93: fused_nn_avg_pool2d_2] Trial #60: GFLOPs: 33.0559. Time: 39.1338 us. Best GFLOPs: 117.4263
2024-04-29 05:13:33 [INFO] [task_scheduler.cc:131] [Task #93: fused_nn_avg_pool2d_2] Trial #61: GFLOPs: 36.4649. Time: 35.4752 us. Best GFLOPs: 117.4263
2024-04-29 05:13:33 [INFO] [task_scheduler.cc:131] [Task #93: fused_nn_avg_pool2d_2] Trial #62: GFLOPs: 104.1834. Time: 12.4166 us. Best GFLOPs: 117.4263
2024-04-29 05:13:33 [INFO] [task_scheduler.cc:131] [Task #93: fused_nn_avg_pool2d_2] Trial #63: GFLOPs: 94.5400. Time: 13.6831 us. Best GFLOPs: 117.4263
2024-04-29 05:13:33 [INFO] [task_scheduler.cc:131] [Task #93: fused_nn_avg_pool2d_2] Trial #64: GFLOPs: 89.0073. Time: 14.5336 us. Best GFLOPs: 117.4263
