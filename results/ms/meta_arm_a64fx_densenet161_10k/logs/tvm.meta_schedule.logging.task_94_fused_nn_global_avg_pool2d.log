2024-04-29 02:34:07 [INFO] [task_scheduler.cc:160] Initializing Task #94: "fused_nn_global_avg_pool2d"
2024-04-29 02:34:07 [INFO] [task_scheduler.cc:35] 
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(552), T.int64(7), T.int64(7), T.int64(4)), "float32"), adaptive_pool_avg: T.Buffer((T.int64(1), T.int64(552), T.int64(1), T.int64(1), T.int64(4)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        adaptive_pool_sum = T.alloc_buffer((T.int64(1), T.int64(552), T.int64(1), T.int64(1), T.int64(4)))
        for ax0, ax1, ax2, ax3, ax4, rv0, rv1 in T.grid(T.int64(1), T.int64(552), T.int64(1), T.int64(1), T.int64(4), T.int64(7), T.int64(7)):
            with T.block("adaptive_pool_sum"):
                v_ax0, v_ax1, v_ax2, v_ax3, v_ax4, v_rv0, v_rv1 = T.axis.remap("SSSSSRR", [ax0, ax1, ax2, ax3, ax4, rv0, rv1])
                T.reads(p0[v_ax0, v_ax1, v_ax2 * T.int64(7) + v_rv0, v_ax3 * T.int64(7) + v_rv1, v_ax4])
                T.writes(adaptive_pool_sum[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                with T.init():
                    adaptive_pool_sum[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.float32(0)
                adaptive_pool_sum[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = adaptive_pool_sum[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] + p0[v_ax0, v_ax1, v_ax2 * T.int64(7) + v_rv0, v_ax3 * T.int64(7) + v_rv1, v_ax4]
        for ax0, ax1, ax2, ax3, ax4 in T.grid(T.int64(1), T.int64(552), T.int64(1), T.int64(1), T.int64(4)):
            with T.block("adaptive_pool_avg"):
                v_ax0, v_ax1, v_ax2, v_ax3, v_ax4 = T.axis.remap("SSSSS", [ax0, ax1, ax2, ax3, ax4])
                T.reads(adaptive_pool_sum[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                T.writes(adaptive_pool_avg[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                T.block_attr({"schedule_rule": "meta_schedule.adaptive_pool_avg"})
                adaptive_pool_avg[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = adaptive_pool_sum[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] * T.float32(0.020408163265306121)
2024-04-29 02:34:07 [INFO] [task_scheduler.cc:164] Total 3 design space(s) generated
2024-04-29 02:34:07 [INFO] [task_scheduler.cc:170] Design space #0:
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(552), T.int64(7), T.int64(7), T.int64(4)), "float32"), adaptive_pool_avg: T.Buffer((T.int64(1), T.int64(552), T.int64(1), T.int64(1), T.int64(4)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        with T.block("root"):
            T.reads()
            T.writes()
            T.block_attr({"meta_schedule.parallel": 768, "meta_schedule.unroll_explicit": 0, "meta_schedule.vectorize": 64})
            adaptive_pool_sum = T.alloc_buffer((T.int64(1), T.int64(552), T.int64(1), T.int64(1), T.int64(4)))
            adaptive_pool_sum_rf = T.alloc_buffer((T.int64(1), T.int64(552), T.int64(1), T.int64(1), T.int64(4), T.int64(1)))
            for ax0, ax1, ax2, ax3, ax4, rv0_rv1_fused_0, rv0_rv1_fused_1 in T.grid(T.int64(1), T.int64(552), T.int64(1), T.int64(1), T.int64(4), T.int64(1), T.int64(49)):
                with T.block("adaptive_pool_sum_rf"):
                    vrv0_rv1_fused_0, v_ax0, v_ax1, v_ax2, v_ax3, v_ax4, vrv0_rv1_fused_1 = T.axis.remap("SSSSSSR", [rv0_rv1_fused_0, ax0, ax1, ax2, ax3, ax4, rv0_rv1_fused_1])
                    T.reads(p0[v_ax0, v_ax1, v_ax2 * T.int64(7) + (vrv0_rv1_fused_0 * T.int64(49) + vrv0_rv1_fused_1) // T.int64(7), v_ax3 * T.int64(7) + (vrv0_rv1_fused_0 * T.int64(49) + vrv0_rv1_fused_1) % T.int64(7), v_ax4])
                    T.writes(adaptive_pool_sum_rf[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4, vrv0_rv1_fused_0])
                    with T.init():
                        adaptive_pool_sum_rf[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4, vrv0_rv1_fused_0] = T.float32(0)
                    adaptive_pool_sum_rf[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4, vrv0_rv1_fused_0] = adaptive_pool_sum_rf[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4, vrv0_rv1_fused_0] + p0[v_ax0, v_ax1, v_ax2 * T.int64(7) + (vrv0_rv1_fused_0 * T.int64(49) + vrv0_rv1_fused_1) // T.int64(7), v_ax3 * T.int64(7) + (vrv0_rv1_fused_0 * T.int64(49) + vrv0_rv1_fused_1) % T.int64(7), v_ax4]
            for ax0, ax1 in T.grid(T.int64(1), T.int64(552)):
                for ax0_1, ax1_1, ax2, ax3, ax4, ax5 in T.grid(T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(4)):
                    with T.block("adaptive_pool_sum"):
                        vrv0_rv1_fused_0, v_ax0 = T.axis.remap("RS", [ax0_1, ax1_1])
                        v_ax1 = T.axis.spatial(T.int64(552), ax1 + ax2)
                        v_ax2, v_ax3, v_ax4 = T.axis.remap("SSS", [ax3, ax4, ax5])
                        T.reads(adaptive_pool_sum_rf[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4, vrv0_rv1_fused_0])
                        T.writes(adaptive_pool_sum[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                        with T.init():
                            adaptive_pool_sum[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.float32(0)
                        adaptive_pool_sum[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = adaptive_pool_sum[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] + adaptive_pool_sum_rf[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4, vrv0_rv1_fused_0]
                for ax2, ax3, ax4 in T.grid(T.int64(1), T.int64(1), T.int64(4)):
                    with T.block("adaptive_pool_avg"):
                        v_ax0, v_ax1, v_ax2, v_ax3, v_ax4 = T.axis.remap("SSSSS", [ax0, ax1, ax2, ax3, ax4])
                        T.reads(adaptive_pool_sum[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                        T.writes(adaptive_pool_avg[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                        adaptive_pool_avg[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = adaptive_pool_sum[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] * T.float32(0.020408163265306121)
b0 = sch.get_block(name="adaptive_pool_sum", func_name="main")
b1 = sch.get_block(name="adaptive_pool_avg", func_name="main")
b2 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b1, ann_key="schedule_rule")
l3, l4, l5, l6, l7, l8, l9 = sch.get_loops(block=b0)
l10 = sch.fuse(l8, l9, preserve_unit_iters=True)
v11, v12 = sch.sample_perfect_tile(loop=l10, n=2, max_innermost_factor=64, decision=[1, 49])
l13, l14 = sch.split(loop=l10, factors=[v11, v12], preserve_unit_iters=True)
b15 = sch.rfactor(loop=l13, factor_axis=5)
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.random_compute_producer", ann_val=1)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.vectorize", ann_val=64)
v16 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=0)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.unroll_explicit", ann_val=v16)
b17, = sch.get_producers(block=b0)
sch.unannotate(block_or_loop=b0, ann_key="meta_schedule.random_compute_producer")
l18 = sch.sample_compute_location(block=b0, decision=1)
sch.compute_at(block=b0, loop=l18, preserve_unit_loops=True, index=-1)
l19 = sch.sample_compute_location(block=b17, decision=-1)
sch.compute_at(block=b17, loop=l19, preserve_unit_loops=True, index=-1)
2024-04-29 02:34:07 [INFO] [task_scheduler.cc:170] Design space #1:
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(552), T.int64(7), T.int64(7), T.int64(4)), "float32"), adaptive_pool_avg: T.Buffer((T.int64(1), T.int64(552), T.int64(1), T.int64(1), T.int64(4)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        with T.block("root"):
            T.reads()
            T.writes()
            T.block_attr({"meta_schedule.parallel": 768, "meta_schedule.unroll_explicit": 0, "meta_schedule.vectorize": 64})
            adaptive_pool_sum = T.alloc_buffer((T.int64(1), T.int64(552), T.int64(1), T.int64(1), T.int64(4)))
            adaptive_pool_sum_rf = T.alloc_buffer((T.int64(1), T.int64(552), T.int64(1), T.int64(1), T.int64(4), T.int64(49)))
            for ax0, ax1 in T.grid(T.int64(1), T.int64(552)):
                for ax0_1, ax1_1, ax2, ax3, ax4, ax5, ax6 in T.grid(T.int64(49), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(4), T.int64(1)):
                    with T.block("adaptive_pool_sum_rf"):
                        vrv0_rv1_fused_1, v_ax0 = T.axis.remap("SS", [ax0_1, ax1_1])
                        v_ax1 = T.axis.spatial(T.int64(552), ax1 + ax2)
                        v_ax2, v_ax3, v_ax4, vrv0_rv1_fused_0 = T.axis.remap("SSSR", [ax3, ax4, ax5, ax6])
                        T.reads(p0[v_ax0, v_ax1, v_ax2 * T.int64(7) + (vrv0_rv1_fused_0 * T.int64(49) + vrv0_rv1_fused_1) // T.int64(7), v_ax3 * T.int64(7) + (vrv0_rv1_fused_0 * T.int64(49) + vrv0_rv1_fused_1) % T.int64(7), v_ax4])
                        T.writes(adaptive_pool_sum_rf[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4, vrv0_rv1_fused_1])
                        with T.init():
                            adaptive_pool_sum_rf[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4, vrv0_rv1_fused_1] = T.float32(0)
                        adaptive_pool_sum_rf[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4, vrv0_rv1_fused_1] = adaptive_pool_sum_rf[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4, vrv0_rv1_fused_1] + p0[v_ax0, v_ax1, v_ax2 * T.int64(7) + (vrv0_rv1_fused_0 * T.int64(49) + vrv0_rv1_fused_1) // T.int64(7), v_ax3 * T.int64(7) + (vrv0_rv1_fused_0 * T.int64(49) + vrv0_rv1_fused_1) % T.int64(7), v_ax4]
                for ax0_1, ax1_1, ax2, ax3, ax4, ax5 in T.grid(T.int64(49), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(4)):
                    with T.block("adaptive_pool_sum"):
                        vrv0_rv1_fused_1, v_ax0 = T.axis.remap("RS", [ax0_1, ax1_1])
                        v_ax1 = T.axis.spatial(T.int64(552), ax1 + ax2)
                        v_ax2, v_ax3, v_ax4 = T.axis.remap("SSS", [ax3, ax4, ax5])
                        T.reads(adaptive_pool_sum_rf[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4, vrv0_rv1_fused_1])
                        T.writes(adaptive_pool_sum[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                        with T.init():
                            adaptive_pool_sum[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.float32(0)
                        adaptive_pool_sum[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = adaptive_pool_sum[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] + adaptive_pool_sum_rf[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4, vrv0_rv1_fused_1]
                for ax2, ax3, ax4 in T.grid(T.int64(1), T.int64(1), T.int64(4)):
                    with T.block("adaptive_pool_avg"):
                        v_ax0, v_ax1, v_ax2, v_ax3, v_ax4 = T.axis.remap("SSSSS", [ax0, ax1, ax2, ax3, ax4])
                        T.reads(adaptive_pool_sum[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                        T.writes(adaptive_pool_avg[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                        adaptive_pool_avg[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = adaptive_pool_sum[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] * T.float32(0.020408163265306121)
b0 = sch.get_block(name="adaptive_pool_sum", func_name="main")
b1 = sch.get_block(name="adaptive_pool_avg", func_name="main")
b2 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b1, ann_key="schedule_rule")
l3, l4, l5, l6, l7, l8, l9 = sch.get_loops(block=b0)
l10 = sch.fuse(l8, l9, preserve_unit_iters=True)
v11, v12 = sch.sample_perfect_tile(loop=l10, n=2, max_innermost_factor=64, decision=[1, 49])
l13, l14 = sch.split(loop=l10, factors=[v11, v12], preserve_unit_iters=True)
b15 = sch.rfactor(loop=l14, factor_axis=5)
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.random_compute_producer", ann_val=1)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.vectorize", ann_val=64)
v16 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=0)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.unroll_explicit", ann_val=v16)
b17, = sch.get_producers(block=b0)
sch.unannotate(block_or_loop=b0, ann_key="meta_schedule.random_compute_producer")
l18 = sch.sample_compute_location(block=b0, decision=1)
sch.compute_at(block=b0, loop=l18, preserve_unit_loops=True, index=-1)
l19 = sch.sample_compute_location(block=b17, decision=1)
sch.compute_at(block=b17, loop=l19, preserve_unit_loops=True, index=-1)
2024-04-29 02:34:07 [INFO] [task_scheduler.cc:170] Design space #2:
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(552), T.int64(7), T.int64(7), T.int64(4)), "float32"), adaptive_pool_avg: T.Buffer((T.int64(1), T.int64(552), T.int64(1), T.int64(1), T.int64(4)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        with T.block("root"):
            T.reads()
            T.writes()
            T.block_attr({"meta_schedule.parallel": 768, "meta_schedule.unroll_explicit": 512, "meta_schedule.vectorize": 64})
            adaptive_pool_sum = T.alloc_buffer((T.int64(1), T.int64(552), T.int64(1), T.int64(1), T.int64(4)))
            for ax0, ax1 in T.grid(T.int64(1), T.int64(552)):
                for ax0_1, ax1_1, ax2, ax3, ax4, ax5, ax6 in T.grid(T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(4), T.int64(7), T.int64(7)):
                    with T.block("adaptive_pool_sum"):
                        v_ax0 = T.axis.spatial(T.int64(1), ax0_1)
                        v_ax1 = T.axis.spatial(T.int64(552), ax1 + ax1_1)
                        v_ax2, v_ax3, v_ax4, v_rv0, v_rv1 = T.axis.remap("SSSRR", [ax2, ax3, ax4, ax5, ax6])
                        T.reads(p0[v_ax0, v_ax1, v_ax2 * T.int64(7) + v_rv0, v_ax3 * T.int64(7) + v_rv1, v_ax4])
                        T.writes(adaptive_pool_sum[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                        with T.init():
                            adaptive_pool_sum[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.float32(0)
                        adaptive_pool_sum[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = adaptive_pool_sum[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] + p0[v_ax0, v_ax1, v_ax2 * T.int64(7) + v_rv0, v_ax3 * T.int64(7) + v_rv1, v_ax4]
                for ax2, ax3, ax4 in T.grid(T.int64(1), T.int64(1), T.int64(4)):
                    with T.block("adaptive_pool_avg"):
                        v_ax0, v_ax1, v_ax2, v_ax3, v_ax4 = T.axis.remap("SSSSS", [ax0, ax1, ax2, ax3, ax4])
                        T.reads(adaptive_pool_sum[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                        T.writes(adaptive_pool_avg[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                        adaptive_pool_avg[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = adaptive_pool_sum[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] * T.float32(0.020408163265306121)
b0 = sch.get_block(name="adaptive_pool_sum", func_name="main")
b1 = sch.get_block(name="adaptive_pool_avg", func_name="main")
b2 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b1, ann_key="schedule_rule")
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.vectorize", ann_val=64)
v3 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.unroll_explicit", ann_val=v3)
l4 = sch.sample_compute_location(block=b0, decision=1)
sch.compute_at(block=b0, loop=l4, preserve_unit_loops=True, index=-1)
2024-04-29 04:59:07 [INFO] [evolutionary_search.cc:713] Generating candidates......
2024-04-29 04:59:07 [INFO] [evolutionary_search.cc:715] Picked top 0 candidate(s) from database
2024-04-29 04:59:09 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x16167aa8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0xd0ce4a8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x114c00a8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0xc475c38)]: 0 failure(s)
2024-04-29 04:59:09 [INFO] [evolutionary_search.cc:723] Sampled 512 candidate(s)
2024-04-29 04:59:11 [INFO] [evolutionary_search.cc:621] Evolve iter #0 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x16167aa8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0xd0ce4a8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x114c00a8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0xc475c38)]: 0 failure(s)
2024-04-29 04:59:14 [INFO] [evolutionary_search.cc:621] Evolve iter #1 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x16167aa8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0xd0ce4a8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x114c00a8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0xc475c38)]: 0 failure(s)
2024-04-29 04:59:17 [INFO] [evolutionary_search.cc:621] Evolve iter #2 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x16167aa8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0xd0ce4a8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x114c00a8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0xc475c38)]: 0 failure(s)
2024-04-29 04:59:19 [INFO] [evolutionary_search.cc:621] Evolve iter #3 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x16167aa8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0xd0ce4a8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x114c00a8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0xc475c38)]: 0 failure(s)
2024-04-29 04:59:21 [INFO] [evolutionary_search.cc:649] Scores of the best 64 candidates:
[1 : 16]:	0.9960  0.9942  0.9867  0.9867  0.9861  0.9755  0.9707  0.9695  0.9601  0.9557  0.9537  0.9489  0.9433  0.9432  0.9416  0.9391
[17 : 32]:	0.9376  0.9360  0.9261  0.9158  0.9075  0.8983  0.8959  0.8856  0.8837  0.8836  0.8832  0.8729  0.8644  0.8603  0.8594  0.8579
[33 : 48]:	0.8412  0.8405  0.8384  0.8364  0.8355  0.8346  0.8342  0.8311  0.8277  0.8262  0.8208  0.8181  0.8155  0.8105  0.8095  0.8024
[49 : 64]:	0.8023  0.7984  0.7977  0.7970  0.7928  0.7902  0.7746  0.7535  0.7471  0.7451  0.7392  0.7330  0.7252  0.7215  0.7110  0.7014
2024-04-29 04:59:21 [INFO] [evolutionary_search.cc:727] Got 64 candidate(s) with evolutionary search
2024-04-29 04:59:21 [INFO] [evolutionary_search.cc:730] Sending 63 candidates(s) for measurement
2024-04-29 05:13:43 [INFO] [task_scheduler.cc:131] [Task #94: fused_nn_global_avg_pool2d] Trial #1: GFLOPs: 4.5391. Time: 24.3219 us. Best GFLOPs: 4.5391
2024-04-29 05:13:43 [INFO] [task_scheduler.cc:131] [Task #94: fused_nn_global_avg_pool2d] Trial #2: GFLOPs: 7.0084. Time: 15.7526 us. Best GFLOPs: 7.0084
2024-04-29 05:13:43 [INFO] [task_scheduler.cc:131] [Task #94: fused_nn_global_avg_pool2d] Trial #3: GFLOPs: 4.4171. Time: 24.9936 us. Best GFLOPs: 7.0084
2024-04-29 05:13:43 [INFO] [task_scheduler.cc:131] [Task #94: fused_nn_global_avg_pool2d] Trial #4: GFLOPs: 3.2445. Time: 34.0271 us. Best GFLOPs: 7.0084
2024-04-29 05:13:43 [INFO] [task_scheduler.cc:131] [Task #94: fused_nn_global_avg_pool2d] Trial #5: GFLOPs: 9.3965. Time: 11.7490 us. Best GFLOPs: 9.3965
2024-04-29 05:13:43 [INFO] [task_scheduler.cc:131] [Task #94: fused_nn_global_avg_pool2d] Trial #6: GFLOPs: 3.9157. Time: 28.1942 us. Best GFLOPs: 9.3965
2024-04-29 05:13:43 [INFO] [task_scheduler.cc:131] [Task #94: fused_nn_global_avg_pool2d] Trial #7: GFLOPs: 4.2584. Time: 25.9251 us. Best GFLOPs: 9.3965
2024-04-29 05:13:43 [INFO] [task_scheduler.cc:131] [Task #94: fused_nn_global_avg_pool2d] Trial #8: GFLOPs: 1.8155. Time: 60.8097 us. Best GFLOPs: 9.3965
2024-04-29 05:13:43 [INFO] [task_scheduler.cc:131] [Task #94: fused_nn_global_avg_pool2d] Trial #9: GFLOPs: 4.5826. Time: 24.0912 us. Best GFLOPs: 9.3965
2024-04-29 05:13:43 [INFO] [task_scheduler.cc:131] [Task #94: fused_nn_global_avg_pool2d] Trial #10: GFLOPs: 7.5275. Time: 14.6662 us. Best GFLOPs: 9.3965
2024-04-29 05:13:43 [INFO] [task_scheduler.cc:131] [Task #94: fused_nn_global_avg_pool2d] Trial #11: GFLOPs: 6.8626. Time: 16.0872 us. Best GFLOPs: 9.3965
2024-04-29 05:13:43 [INFO] [task_scheduler.cc:131] [Task #94: fused_nn_global_avg_pool2d] Trial #12: GFLOPs: 3.7160. Time: 29.7095 us. Best GFLOPs: 9.3965
2024-04-29 05:13:43 [INFO] [task_scheduler.cc:131] [Task #94: fused_nn_global_avg_pool2d] Trial #13: GFLOPs: 9.5514. Time: 11.5585 us. Best GFLOPs: 9.5514
2024-04-29 05:13:43 [INFO] [task_scheduler.cc:131] [Task #94: fused_nn_global_avg_pool2d] Trial #14: GFLOPs: 4.2068. Time: 26.2435 us. Best GFLOPs: 9.5514
2024-04-29 05:13:43 [INFO] [task_scheduler.cc:131] [Task #94: fused_nn_global_avg_pool2d] Trial #15: GFLOPs: 3.8804. Time: 28.4504 us. Best GFLOPs: 9.5514
2024-04-29 05:13:43 [INFO] [task_scheduler.cc:131] [Task #94: fused_nn_global_avg_pool2d] Trial #16: GFLOPs: 6.4084. Time: 17.2274 us. Best GFLOPs: 9.5514
2024-04-29 05:13:43 [INFO] [task_scheduler.cc:131] [Task #94: fused_nn_global_avg_pool2d] Trial #17: GFLOPs: 2.8940. Time: 38.1473 us. Best GFLOPs: 9.5514
2024-04-29 05:13:43 [INFO] [task_scheduler.cc:131] [Task #94: fused_nn_global_avg_pool2d] Trial #18: GFLOPs: 2.3092. Time: 47.8097 us. Best GFLOPs: 9.5514
2024-04-29 05:13:43 [INFO] [task_scheduler.cc:131] [Task #94: fused_nn_global_avg_pool2d] Trial #19: GFLOPs: 7.2509. Time: 15.2258 us. Best GFLOPs: 9.5514
2024-04-29 05:13:43 [INFO] [task_scheduler.cc:131] [Task #94: fused_nn_global_avg_pool2d] Trial #20: GFLOPs: 5.7469. Time: 19.2103 us. Best GFLOPs: 9.5514
2024-04-29 05:13:43 [INFO] [task_scheduler.cc:131] [Task #94: fused_nn_global_avg_pool2d] Trial #21: GFLOPs: 7.7697. Time: 14.2091 us. Best GFLOPs: 9.5514
2024-04-29 05:13:43 [INFO] [task_scheduler.cc:131] [Task #94: fused_nn_global_avg_pool2d] Trial #22: GFLOPs: 3.6920. Time: 29.9021 us. Best GFLOPs: 9.5514
2024-04-29 05:13:43 [INFO] [task_scheduler.cc:131] [Task #94: fused_nn_global_avg_pool2d] Trial #23: GFLOPs: 3.1148. Time: 35.4435 us. Best GFLOPs: 9.5514
2024-04-29 05:13:43 [INFO] [task_scheduler.cc:131] [Task #94: fused_nn_global_avg_pool2d] Trial #24: GFLOPs: 7.6365. Time: 14.4568 us. Best GFLOPs: 9.5514
2024-04-29 05:13:43 [INFO] [task_scheduler.cc:131] [Task #94: fused_nn_global_avg_pool2d] Trial #25: GFLOPs: 4.4345. Time: 24.8957 us. Best GFLOPs: 9.5514
2024-04-29 05:13:43 [INFO] [task_scheduler.cc:131] [Task #94: fused_nn_global_avg_pool2d] Trial #26: GFLOPs: 8.6985. Time: 12.6918 us. Best GFLOPs: 9.5514
2024-04-29 05:13:43 [INFO] [task_scheduler.cc:131] [Task #94: fused_nn_global_avg_pool2d] Trial #27: GFLOPs: 8.7841. Time: 12.5681 us. Best GFLOPs: 9.5514
2024-04-29 05:13:43 [INFO] [task_scheduler.cc:131] [Task #94: fused_nn_global_avg_pool2d] Trial #28: GFLOPs: 6.5214. Time: 16.9288 us. Best GFLOPs: 9.5514
2024-04-29 05:13:43 [INFO] [task_scheduler.cc:131] [Task #94: fused_nn_global_avg_pool2d] Trial #29: GFLOPs: 6.3179. Time: 17.4742 us. Best GFLOPs: 9.5514
2024-04-29 05:13:43 [INFO] [task_scheduler.cc:131] [Task #94: fused_nn_global_avg_pool2d] Trial #30: GFLOPs: 6.6536. Time: 16.5926 us. Best GFLOPs: 9.5514
2024-04-29 05:13:43 [INFO] [task_scheduler.cc:131] [Task #94: fused_nn_global_avg_pool2d] Trial #31: GFLOPs: 6.2913. Time: 17.5479 us. Best GFLOPs: 9.5514
2024-04-29 05:13:43 [INFO] [task_scheduler.cc:131] [Task #94: fused_nn_global_avg_pool2d] Trial #32: GFLOPs: 3.6437. Time: 30.2985 us. Best GFLOPs: 9.5514
2024-04-29 05:13:43 [INFO] [task_scheduler.cc:131] [Task #94: fused_nn_global_avg_pool2d] Trial #33: GFLOPs: 3.9873. Time: 27.6877 us. Best GFLOPs: 9.5514
2024-04-29 05:13:43 [INFO] [task_scheduler.cc:131] [Task #94: fused_nn_global_avg_pool2d] Trial #34: GFLOPs: 3.3883. Time: 32.5828 us. Best GFLOPs: 9.5514
2024-04-29 05:13:43 [INFO] [task_scheduler.cc:131] [Task #94: fused_nn_global_avg_pool2d] Trial #35: GFLOPs: 2.9157. Time: 37.8635 us. Best GFLOPs: 9.5514
2024-04-29 05:13:43 [INFO] [task_scheduler.cc:131] [Task #94: fused_nn_global_avg_pool2d] Trial #36: GFLOPs: 3.7666. Time: 29.3103 us. Best GFLOPs: 9.5514
2024-04-29 05:13:43 [INFO] [task_scheduler.cc:131] [Task #94: fused_nn_global_avg_pool2d] Trial #37: GFLOPs: 2.7465. Time: 40.1959 us. Best GFLOPs: 9.5514
2024-04-29 05:13:43 [INFO] [task_scheduler.cc:131] [Task #94: fused_nn_global_avg_pool2d] Trial #38: GFLOPs: 2.6149. Time: 42.2197 us. Best GFLOPs: 9.5514
2024-04-29 05:13:43 [INFO] [task_scheduler.cc:131] [Task #94: fused_nn_global_avg_pool2d] Trial #39: GFLOPs: 3.6856. Time: 29.9544 us. Best GFLOPs: 9.5514
2024-04-29 05:13:43 [INFO] [task_scheduler.cc:131] [Task #94: fused_nn_global_avg_pool2d] Trial #40: GFLOPs: 1.8855. Time: 58.5516 us. Best GFLOPs: 9.5514
2024-04-29 05:13:43 [INFO] [task_scheduler.cc:131] [Task #94: fused_nn_global_avg_pool2d] Trial #41: GFLOPs: 2.6654. Time: 41.4197 us. Best GFLOPs: 9.5514
2024-04-29 05:13:43 [INFO] [task_scheduler.cc:131] [Task #94: fused_nn_global_avg_pool2d] Trial #42: GFLOPs: 6.4556. Time: 17.1014 us. Best GFLOPs: 9.5514
2024-04-29 05:13:43 [INFO] [task_scheduler.cc:131] [Task #94: fused_nn_global_avg_pool2d] Trial #43: GFLOPs: 4.0753. Time: 27.0899 us. Best GFLOPs: 9.5514
2024-04-29 05:13:43 [INFO] [task_scheduler.cc:131] [Task #94: fused_nn_global_avg_pool2d] Trial #44: GFLOPs: 7.1055. Time: 15.5373 us. Best GFLOPs: 9.5514
2024-04-29 05:13:43 [INFO] [task_scheduler.cc:131] [Task #94: fused_nn_global_avg_pool2d] Trial #45: GFLOPs: 7.2294. Time: 15.2711 us. Best GFLOPs: 9.5514
2024-04-29 05:13:43 [INFO] [task_scheduler.cc:131] [Task #94: fused_nn_global_avg_pool2d] Trial #46: GFLOPs: 4.1368. Time: 26.6871 us. Best GFLOPs: 9.5514
2024-04-29 05:13:43 [INFO] [task_scheduler.cc:131] [Task #94: fused_nn_global_avg_pool2d] Trial #47: GFLOPs: 7.2825. Time: 15.1596 us. Best GFLOPs: 9.5514
2024-04-29 05:13:43 [INFO] [task_scheduler.cc:131] [Task #94: fused_nn_global_avg_pool2d] Trial #48: GFLOPs: 3.8202. Time: 28.8988 us. Best GFLOPs: 9.5514
2024-04-29 05:13:43 [INFO] [task_scheduler.cc:131] [Task #94: fused_nn_global_avg_pool2d] Trial #49: GFLOPs: 2.1183. Time: 52.1163 us. Best GFLOPs: 9.5514
2024-04-29 05:13:43 [INFO] [task_scheduler.cc:131] [Task #94: fused_nn_global_avg_pool2d] Trial #50: GFLOPs: 3.3976. Time: 32.4933 us. Best GFLOPs: 9.5514
2024-04-29 05:13:43 [INFO] [task_scheduler.cc:131] [Task #94: fused_nn_global_avg_pool2d] Trial #51: GFLOPs: 3.9523. Time: 27.9332 us. Best GFLOPs: 9.5514
2024-04-29 05:13:43 [INFO] [task_scheduler.cc:131] [Task #94: fused_nn_global_avg_pool2d] Trial #52: GFLOPs: 7.6455. Time: 14.4399 us. Best GFLOPs: 9.5514
2024-04-29 05:13:43 [INFO] [task_scheduler.cc:131] [Task #94: fused_nn_global_avg_pool2d] Trial #53: GFLOPs: 6.7685. Time: 16.3109 us. Best GFLOPs: 9.5514
2024-04-29 05:13:43 [INFO] [task_scheduler.cc:131] [Task #94: fused_nn_global_avg_pool2d] Trial #54: GFLOPs: 6.7668. Time: 16.3149 us. Best GFLOPs: 9.5514
2024-04-29 05:13:43 [INFO] [task_scheduler.cc:131] [Task #94: fused_nn_global_avg_pool2d] Trial #55: GFLOPs: 7.5436. Time: 14.6349 us. Best GFLOPs: 9.5514
2024-04-29 05:13:43 [INFO] [task_scheduler.cc:131] [Task #94: fused_nn_global_avg_pool2d] Trial #56: GFLOPs: 9.6813. Time: 11.4035 us. Best GFLOPs: 9.6813
2024-04-29 05:13:43 [INFO] [task_scheduler.cc:131] [Task #94: fused_nn_global_avg_pool2d] Trial #57: GFLOPs: 3.0841. Time: 35.7970 us. Best GFLOPs: 9.6813
2024-04-29 05:13:43 [INFO] [task_scheduler.cc:131] [Task #94: fused_nn_global_avg_pool2d] Trial #58: GFLOPs: 4.3439. Time: 25.4147 us. Best GFLOPs: 9.6813
2024-04-29 05:13:43 [INFO] [task_scheduler.cc:131] [Task #94: fused_nn_global_avg_pool2d] Trial #59: GFLOPs: 8.7233. Time: 12.6558 us. Best GFLOPs: 9.6813
2024-04-29 05:13:43 [INFO] [task_scheduler.cc:131] [Task #94: fused_nn_global_avg_pool2d] Trial #60: GFLOPs: 6.7530. Time: 16.3484 us. Best GFLOPs: 9.6813
2024-04-29 05:13:43 [INFO] [task_scheduler.cc:131] [Task #94: fused_nn_global_avg_pool2d] Trial #61: GFLOPs: 4.6469. Time: 23.7576 us. Best GFLOPs: 9.6813
2024-04-29 05:13:43 [INFO] [task_scheduler.cc:131] [Task #94: fused_nn_global_avg_pool2d] Trial #62: GFLOPs: 6.4572. Time: 17.0972 us. Best GFLOPs: 9.6813
2024-04-29 05:13:43 [INFO] [task_scheduler.cc:131] [Task #94: fused_nn_global_avg_pool2d] Trial #63: GFLOPs: 4.8828. Time: 22.6099 us. Best GFLOPs: 9.6813
