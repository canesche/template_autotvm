2024-04-29 02:32:38 [INFO] [task_scheduler.cc:160] Initializing Task #66: "fused_nn_contrib_conv2d_NCHWc_add_nn_relu_64"
2024-04-29 02:32:38 [INFO] [task_scheduler.cc:35] 
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(132), T.int64(28), T.int64(28), T.int64(4)), "float32"), p1: T.Buffer((T.int64(48), T.int64(132), T.int64(1), T.int64(1), T.int64(4), T.int64(4)), "float32"), p2: T.Buffer((T.int64(1), T.int64(48), T.int64(1), T.int64(1), T.int64(4)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(48), T.int64(28), T.int64(28), T.int64(4)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        conv2d_NCHWc = T.alloc_buffer((T.int64(1), T.int64(48), T.int64(28), T.int64(28), T.int64(4)))
        T_add = T.alloc_buffer((T.int64(1), T.int64(48), T.int64(28), T.int64(28), T.int64(4)))
        for n, oc_chunk, oh, ow, oc_block, ic, kh, kw in T.grid(T.int64(1), T.int64(48), T.int64(28), T.int64(28), T.int64(4), T.int64(528), T.int64(1), T.int64(1)):
            with T.block("conv2d_NCHWc"):
                v_n, v_oc_chunk, v_oh, v_ow, v_oc_block, v_ic, v_kh, v_kw = T.axis.remap("SSSSSRRR", [n, oc_chunk, oh, ow, oc_block, ic, kh, kw])
                T.reads(p0[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)], p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block])
                T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                with T.init():
                    conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = T.float32(0)
                conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] + p0[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)] * p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block]
        for ax0, ax1, ax2, ax3, ax4 in T.grid(T.int64(1), T.int64(48), T.int64(28), T.int64(28), T.int64(4)):
            with T.block("T_add"):
                v_ax0, v_ax1, v_ax2, v_ax3, v_ax4 = T.axis.remap("SSSSS", [ax0, ax1, ax2, ax3, ax4])
                T.reads(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4])
                T.writes(T_add[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                T_add[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] + p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4]
        for ax0, ax1, ax2, ax3, ax4 in T.grid(T.int64(1), T.int64(48), T.int64(28), T.int64(28), T.int64(4)):
            with T.block("T_relu"):
                v_ax0, v_ax1, v_ax2, v_ax3, v_ax4 = T.axis.remap("SSSSS", [ax0, ax1, ax2, ax3, ax4])
                T.reads(T_add[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                T.writes(T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.max(T_add[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], T.float32(0))
2024-04-29 02:32:38 [INFO] [task_scheduler.cc:164] Total 3 design space(s) generated
2024-04-29 02:32:38 [INFO] [task_scheduler.cc:170] Design space #0:
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(132), T.int64(28), T.int64(28), T.int64(4)), "float32"), p1: T.Buffer((T.int64(48), T.int64(132), T.int64(1), T.int64(1), T.int64(4), T.int64(4)), "float32"), p2: T.Buffer((T.int64(1), T.int64(48), T.int64(1), T.int64(1), T.int64(4)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(48), T.int64(28), T.int64(28), T.int64(4)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        with T.block("root"):
            T.reads()
            T.writes()
            T.block_attr({"meta_schedule.parallel": 768, "meta_schedule.unroll_explicit": 0, "meta_schedule.vectorize": 64})
            conv2d_NCHWc = T.alloc_buffer((T.int64(1), T.int64(48), T.int64(28), T.int64(28), T.int64(4)))
            for n_0, oc_chunk_0, oh_0, ow_0, oc_block_0, n_1, oc_chunk_1, oh_1, ow_1, oc_block_1, ic_0, kh_0, kw_0, n_2, oc_chunk_2, oh_2, ow_2, oc_block_2, ic_1, kh_1, kw_1, n_3, oc_chunk_3, oh_3, ow_3, oc_block_3 in T.grid(T.int64(1), T.int64(1), T.int64(2), T.int64(7), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(2), T.int64(88), T.int64(1), T.int64(1), T.int64(1), T.int64(24), T.int64(1), T.int64(2), T.int64(2), T.int64(6), T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(14), T.int64(1), T.int64(1)):
                with T.block("conv2d_NCHWc"):
                    v_n = T.axis.spatial(T.int64(1), n_0 + n_1 + n_2 + n_3)
                    v_oc_chunk = T.axis.spatial(T.int64(48), oc_chunk_0 * T.int64(48) + oc_chunk_1 * T.int64(48) + oc_chunk_2 * T.int64(2) + oc_chunk_3)
                    v_oh = T.axis.spatial(T.int64(28), oh_0 * T.int64(14) + oh_1 * T.int64(14) + oh_2 * T.int64(14) + oh_3)
                    v_ow = T.axis.spatial(T.int64(28), ow_0 * T.int64(4) + ow_1 * T.int64(2) + ow_2 + ow_3)
                    v_oc_block = T.axis.spatial(T.int64(4), oc_block_0 * T.int64(4) + oc_block_1 * T.int64(2) + oc_block_2 + oc_block_3)
                    v_ic = T.axis.reduce(T.int64(528), ic_0 * T.int64(6) + ic_1)
                    v_kh = T.axis.reduce(T.int64(1), kh_0 + kh_1)
                    v_kw = T.axis.reduce(T.int64(1), kw_0 + kw_1)
                    T.reads(p0[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)], p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block])
                    T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                    T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                    with T.init():
                        conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = T.float32(0)
                    conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] + p0[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)] * p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block]
            for ax0, ax1, ax2, ax3, ax4 in T.grid(T.int64(1), T.int64(48), T.int64(28), T.int64(28), T.int64(4)):
                with T.block("T_relu"):
                    v_ax0, v_ax1, v_ax2, v_ax3, v_ax4 = T.axis.remap("SSSSS", [ax0, ax1, ax2, ax3, ax4])
                    T.reads(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4])
                    T.writes(T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                    T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.max(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] + p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4], T.float32(0))
b0 = sch.get_block(name="conv2d_NCHWc", func_name="main")
b1 = sch.get_block(name="T_add", func_name="main")
b2 = sch.get_block(name="root", func_name="main")
sch.compute_inline(block=b1)
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.tiling_structure", ann_val="SSRSRS")
l3, l4, l5, l6, l7, l8, l9, l10 = sch.get_loops(block=b0)
v11, v12, v13, v14 = sch.sample_perfect_tile(loop=l3, n=4, max_innermost_factor=64, decision=[1, 1, 1, 1])
l15, l16, l17, l18 = sch.split(loop=l3, factors=[v11, v12, v13, v14], preserve_unit_iters=True)
v19, v20, v21, v22 = sch.sample_perfect_tile(loop=l4, n=4, max_innermost_factor=64, decision=[1, 1, 24, 2])
l23, l24, l25, l26 = sch.split(loop=l4, factors=[v19, v20, v21, v22], preserve_unit_iters=True)
v27, v28, v29, v30 = sch.sample_perfect_tile(loop=l5, n=4, max_innermost_factor=64, decision=[2, 1, 1, 14])
l31, l32, l33, l34 = sch.split(loop=l5, factors=[v27, v28, v29, v30], preserve_unit_iters=True)
v35, v36, v37, v38 = sch.sample_perfect_tile(loop=l6, n=4, max_innermost_factor=64, decision=[7, 2, 2, 1])
l39, l40, l41, l42 = sch.split(loop=l6, factors=[v35, v36, v37, v38], preserve_unit_iters=True)
v43, v44, v45, v46 = sch.sample_perfect_tile(loop=l7, n=4, max_innermost_factor=64, decision=[1, 2, 2, 1])
l47, l48, l49, l50 = sch.split(loop=l7, factors=[v43, v44, v45, v46], preserve_unit_iters=True)
v51, v52 = sch.sample_perfect_tile(loop=l8, n=2, max_innermost_factor=64, decision=[88, 6])
l53, l54 = sch.split(loop=l8, factors=[v51, v52], preserve_unit_iters=True)
v55, v56 = sch.sample_perfect_tile(loop=l9, n=2, max_innermost_factor=64, decision=[1, 1])
l57, l58 = sch.split(loop=l9, factors=[v55, v56], preserve_unit_iters=True)
v59, v60 = sch.sample_perfect_tile(loop=l10, n=2, max_innermost_factor=64, decision=[1, 1])
l61, l62 = sch.split(loop=l10, factors=[v59, v60], preserve_unit_iters=True)
sch.reorder(l15, l23, l31, l39, l47, l16, l24, l32, l40, l48, l53, l57, l61, l17, l25, l33, l41, l49, l54, l58, l62, l18, l26, l34, l42, l50)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.vectorize", ann_val=64)
v63 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=0)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.unroll_explicit", ann_val=v63)
2024-04-29 02:32:38 [INFO] [task_scheduler.cc:170] Design space #1:
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(132), T.int64(28), T.int64(28), T.int64(4)), "float32"), p1: T.Buffer((T.int64(48), T.int64(132), T.int64(1), T.int64(1), T.int64(4), T.int64(4)), "float32"), p2: T.Buffer((T.int64(1), T.int64(48), T.int64(1), T.int64(1), T.int64(4)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(48), T.int64(28), T.int64(28), T.int64(4)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        with T.block("root"):
            T.reads()
            T.writes()
            T.block_attr({"meta_schedule.parallel": 768, "meta_schedule.unroll_explicit": 64, "meta_schedule.vectorize": 64})
            conv2d_NCHWc = T.alloc_buffer((T.int64(1), T.int64(48), T.int64(28), T.int64(28), T.int64(4)))
            for n_0, oc_chunk_0, oh_0, ow_0, oc_block_0, n_1, oc_chunk_1, oh_1, ow_1, oc_block_1 in T.grid(T.int64(1), T.int64(1), T.int64(2), T.int64(7), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(2)):
                for ic_0, kh_0, kw_0, n_2, oc_chunk_2, oh_2, ow_2, oc_block_2, ic_1, kh_1, kw_1, n_3, oc_chunk_3, oh_3, ow_3, oc_block_3 in T.grid(T.int64(88), T.int64(1), T.int64(1), T.int64(1), T.int64(24), T.int64(1), T.int64(2), T.int64(2), T.int64(6), T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(14), T.int64(1), T.int64(1)):
                    with T.block("conv2d_NCHWc"):
                        v_n = T.axis.spatial(T.int64(1), n_0 + n_1 + n_2 + n_3)
                        v_oc_chunk = T.axis.spatial(T.int64(48), oc_chunk_0 * T.int64(48) + oc_chunk_1 * T.int64(48) + oc_chunk_2 * T.int64(2) + oc_chunk_3)
                        v_oh = T.axis.spatial(T.int64(28), oh_0 * T.int64(14) + oh_1 * T.int64(14) + oh_2 * T.int64(14) + oh_3)
                        v_ow = T.axis.spatial(T.int64(28), ow_0 * T.int64(4) + ow_1 * T.int64(2) + ow_2 + ow_3)
                        v_oc_block = T.axis.spatial(T.int64(4), oc_block_0 * T.int64(4) + oc_block_1 * T.int64(2) + oc_block_2 + oc_block_3)
                        v_ic = T.axis.reduce(T.int64(528), ic_0 * T.int64(6) + ic_1)
                        v_kh = T.axis.reduce(T.int64(1), kh_0 + kh_1)
                        v_kw = T.axis.reduce(T.int64(1), kw_0 + kw_1)
                        T.reads(p0[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)], p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block])
                        T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                        T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                        with T.init():
                            conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = T.float32(0)
                        conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] + p0[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)] * p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block]
                for ax0, ax1, ax2, ax3, ax4 in T.grid(T.int64(1), T.int64(48), T.int64(14), T.int64(2), T.int64(2)):
                    with T.block("T_relu"):
                        v_ax0, v_ax1 = T.axis.remap("SS", [ax0, ax1])
                        v_ax2 = T.axis.spatial(T.int64(28), oh_0 * T.int64(14) + ax2)
                        v_ax3 = T.axis.spatial(T.int64(28), ow_0 * T.int64(4) + ow_1 * T.int64(2) + ax3)
                        v_ax4 = T.axis.spatial(T.int64(4), oc_block_1 * T.int64(2) + ax4)
                        T.reads(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4])
                        T.writes(T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                        T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.max(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] + p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4], T.float32(0))
b0 = sch.get_block(name="conv2d_NCHWc", func_name="main")
b1 = sch.get_block(name="T_add", func_name="main")
b2 = sch.get_block(name="root", func_name="main")
sch.compute_inline(block=b1)
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.tiling_structure", ann_val="SSRSRS")
l3, l4, l5, l6, l7, l8, l9, l10 = sch.get_loops(block=b0)
v11, v12, v13, v14 = sch.sample_perfect_tile(loop=l3, n=4, max_innermost_factor=64, decision=[1, 1, 1, 1])
l15, l16, l17, l18 = sch.split(loop=l3, factors=[v11, v12, v13, v14], preserve_unit_iters=True)
v19, v20, v21, v22 = sch.sample_perfect_tile(loop=l4, n=4, max_innermost_factor=64, decision=[1, 1, 24, 2])
l23, l24, l25, l26 = sch.split(loop=l4, factors=[v19, v20, v21, v22], preserve_unit_iters=True)
v27, v28, v29, v30 = sch.sample_perfect_tile(loop=l5, n=4, max_innermost_factor=64, decision=[2, 1, 1, 14])
l31, l32, l33, l34 = sch.split(loop=l5, factors=[v27, v28, v29, v30], preserve_unit_iters=True)
v35, v36, v37, v38 = sch.sample_perfect_tile(loop=l6, n=4, max_innermost_factor=64, decision=[7, 2, 2, 1])
l39, l40, l41, l42 = sch.split(loop=l6, factors=[v35, v36, v37, v38], preserve_unit_iters=True)
v43, v44, v45, v46 = sch.sample_perfect_tile(loop=l7, n=4, max_innermost_factor=64, decision=[1, 2, 2, 1])
l47, l48, l49, l50 = sch.split(loop=l7, factors=[v43, v44, v45, v46], preserve_unit_iters=True)
v51, v52 = sch.sample_perfect_tile(loop=l8, n=2, max_innermost_factor=64, decision=[88, 6])
l53, l54 = sch.split(loop=l8, factors=[v51, v52], preserve_unit_iters=True)
v55, v56 = sch.sample_perfect_tile(loop=l9, n=2, max_innermost_factor=64, decision=[1, 1])
l57, l58 = sch.split(loop=l9, factors=[v55, v56], preserve_unit_iters=True)
v59, v60 = sch.sample_perfect_tile(loop=l10, n=2, max_innermost_factor=64, decision=[1, 1])
l61, l62 = sch.split(loop=l10, factors=[v59, v60], preserve_unit_iters=True)
sch.reorder(l15, l23, l31, l39, l47, l16, l24, l32, l40, l48, l53, l57, l61, l17, l25, l33, l41, l49, l54, l58, l62, l18, l26, l34, l42, l50)
b63, = sch.get_consumers(block=b0)
sch.reverse_compute_at(block=b63, loop=l48, preserve_unit_loops=True, index=-1)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.vectorize", ann_val=64)
v64 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=2)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.unroll_explicit", ann_val=v64)
2024-04-29 02:32:38 [INFO] [task_scheduler.cc:170] Design space #2:
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(132), T.int64(28), T.int64(28), T.int64(4)), "float32"), p1: T.Buffer((T.int64(48), T.int64(132), T.int64(1), T.int64(1), T.int64(4), T.int64(4)), "float32"), p2: T.Buffer((T.int64(1), T.int64(48), T.int64(1), T.int64(1), T.int64(4)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(48), T.int64(28), T.int64(28), T.int64(4)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        with T.block("root"):
            T.reads()
            T.writes()
            T.block_attr({"meta_schedule.parallel": 768, "meta_schedule.unroll_explicit": 64, "meta_schedule.vectorize": 64})
            conv2d_NCHWc = T.alloc_buffer((T.int64(1), T.int64(48), T.int64(28), T.int64(28), T.int64(4)))
            for n_0, oc_chunk_0, oh_0, ow_0, oc_block_0 in T.grid(T.int64(1), T.int64(1), T.int64(2), T.int64(7), T.int64(1)):
                for n_1, oc_chunk_1, oh_1, ow_1, oc_block_1, ic_0, kh_0, kw_0, n_2, oc_chunk_2, oh_2, ow_2, oc_block_2, ic_1, kh_1, kw_1, n_3, oc_chunk_3, oh_3, ow_3, oc_block_3 in T.grid(T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(2), T.int64(88), T.int64(1), T.int64(1), T.int64(1), T.int64(24), T.int64(1), T.int64(2), T.int64(2), T.int64(6), T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(14), T.int64(1), T.int64(1)):
                    with T.block("conv2d_NCHWc"):
                        v_n = T.axis.spatial(T.int64(1), n_0 + n_1 + n_2 + n_3)
                        v_oc_chunk = T.axis.spatial(T.int64(48), oc_chunk_0 * T.int64(48) + oc_chunk_1 * T.int64(48) + oc_chunk_2 * T.int64(2) + oc_chunk_3)
                        v_oh = T.axis.spatial(T.int64(28), oh_0 * T.int64(14) + oh_1 * T.int64(14) + oh_2 * T.int64(14) + oh_3)
                        v_ow = T.axis.spatial(T.int64(28), ow_0 * T.int64(4) + ow_1 * T.int64(2) + ow_2 + ow_3)
                        v_oc_block = T.axis.spatial(T.int64(4), oc_block_0 * T.int64(4) + oc_block_1 * T.int64(2) + oc_block_2 + oc_block_3)
                        v_ic = T.axis.reduce(T.int64(528), ic_0 * T.int64(6) + ic_1)
                        v_kh = T.axis.reduce(T.int64(1), kh_0 + kh_1)
                        v_kw = T.axis.reduce(T.int64(1), kw_0 + kw_1)
                        T.reads(p0[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)], p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block])
                        T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                        T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                        with T.init():
                            conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = T.float32(0)
                        conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] + p0[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)] * p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block]
                for ax0, ax1, ax2, ax3, ax4 in T.grid(T.int64(1), T.int64(48), T.int64(14), T.int64(4), T.int64(4)):
                    with T.block("T_relu"):
                        v_ax0, v_ax1 = T.axis.remap("SS", [ax0, ax1])
                        v_ax2 = T.axis.spatial(T.int64(28), oh_0 * T.int64(14) + ax2)
                        v_ax3 = T.axis.spatial(T.int64(28), ow_0 * T.int64(4) + ax3)
                        v_ax4 = T.axis.spatial(T.int64(4), ax4)
                        T.reads(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4])
                        T.writes(T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                        T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.max(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] + p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4], T.float32(0))
b0 = sch.get_block(name="conv2d_NCHWc", func_name="main")
b1 = sch.get_block(name="T_add", func_name="main")
b2 = sch.get_block(name="root", func_name="main")
sch.compute_inline(block=b1)
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.tiling_structure", ann_val="SSRSRS")
l3, l4, l5, l6, l7, l8, l9, l10 = sch.get_loops(block=b0)
v11, v12, v13, v14 = sch.sample_perfect_tile(loop=l3, n=4, max_innermost_factor=64, decision=[1, 1, 1, 1])
l15, l16, l17, l18 = sch.split(loop=l3, factors=[v11, v12, v13, v14], preserve_unit_iters=True)
v19, v20, v21, v22 = sch.sample_perfect_tile(loop=l4, n=4, max_innermost_factor=64, decision=[1, 1, 24, 2])
l23, l24, l25, l26 = sch.split(loop=l4, factors=[v19, v20, v21, v22], preserve_unit_iters=True)
v27, v28, v29, v30 = sch.sample_perfect_tile(loop=l5, n=4, max_innermost_factor=64, decision=[2, 1, 1, 14])
l31, l32, l33, l34 = sch.split(loop=l5, factors=[v27, v28, v29, v30], preserve_unit_iters=True)
v35, v36, v37, v38 = sch.sample_perfect_tile(loop=l6, n=4, max_innermost_factor=64, decision=[7, 2, 2, 1])
l39, l40, l41, l42 = sch.split(loop=l6, factors=[v35, v36, v37, v38], preserve_unit_iters=True)
v43, v44, v45, v46 = sch.sample_perfect_tile(loop=l7, n=4, max_innermost_factor=64, decision=[1, 2, 2, 1])
l47, l48, l49, l50 = sch.split(loop=l7, factors=[v43, v44, v45, v46], preserve_unit_iters=True)
v51, v52 = sch.sample_perfect_tile(loop=l8, n=2, max_innermost_factor=64, decision=[88, 6])
l53, l54 = sch.split(loop=l8, factors=[v51, v52], preserve_unit_iters=True)
v55, v56 = sch.sample_perfect_tile(loop=l9, n=2, max_innermost_factor=64, decision=[1, 1])
l57, l58 = sch.split(loop=l9, factors=[v55, v56], preserve_unit_iters=True)
v59, v60 = sch.sample_perfect_tile(loop=l10, n=2, max_innermost_factor=64, decision=[1, 1])
l61, l62 = sch.split(loop=l10, factors=[v59, v60], preserve_unit_iters=True)
sch.reorder(l15, l23, l31, l39, l47, l16, l24, l32, l40, l48, l53, l57, l61, l17, l25, l33, l41, l49, l54, l58, l62, l18, l26, l34, l42, l50)
b63, = sch.get_consumers(block=b0)
sch.reverse_compute_at(block=b63, loop=l47, preserve_unit_loops=True, index=-1)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.vectorize", ann_val=64)
v64 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=2)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.unroll_explicit", ann_val=v64)
2024-04-29 04:17:14 [INFO] [evolutionary_search.cc:713] Generating candidates......
2024-04-29 04:17:14 [INFO] [evolutionary_search.cc:715] Picked top 0 candidate(s) from database
2024-04-29 04:17:17 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x7993bc8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x10105d98)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x86b16e8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x3571798)]: 0 failure(s)
2024-04-29 04:17:17 [INFO] [evolutionary_search.cc:723] Sampled 512 candidate(s)
2024-04-29 04:17:20 [INFO] [evolutionary_search.cc:621] Evolve iter #0 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x7993bc8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x10105d98)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x86b16e8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x3571798)]: 0 failure(s)
2024-04-29 04:17:23 [INFO] [evolutionary_search.cc:621] Evolve iter #1 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x7993bc8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x10105d98)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x86b16e8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x3571798)]: 0 failure(s)
2024-04-29 04:17:26 [INFO] [evolutionary_search.cc:621] Evolve iter #2 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x7993bc8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x10105d98)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x86b16e8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x3571798)]: 0 failure(s)
2024-04-29 04:17:29 [INFO] [evolutionary_search.cc:621] Evolve iter #3 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x7993bc8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x10105d98)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x86b16e8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x3571798)]: 0 failure(s)
2024-04-29 04:17:30 [INFO] [evolutionary_search.cc:649] Scores of the best 64 candidates:
[1 : 16]:	0.9996  0.9990  0.9985  0.9974  0.9963  0.9963  0.9963  0.9960  0.9956  0.9955  0.9954  0.9948  0.9943  0.9936  0.9932  0.9932
[17 : 32]:	0.9923  0.9917  0.9915  0.9913  0.9904  0.9902  0.9898  0.9895  0.9893  0.9892  0.9891  0.9880  0.9869  0.9868  0.9868  0.9862
[33 : 48]:	0.9860  0.9856  0.9848  0.9846  0.9845  0.9843  0.9841  0.9839  0.9836  0.9833  0.9831  0.9826  0.9826  0.9825  0.9816  0.9813
[49 : 64]:	0.9802  0.9800  0.9798  0.9792  0.9785  0.9780  0.9773  0.9773  0.9765  0.9764  0.9763  0.9754  0.9754  0.9750  0.9744  0.9744
2024-04-29 04:17:31 [INFO] [evolutionary_search.cc:727] Got 64 candidate(s) with evolutionary search
2024-04-29 04:17:31 [INFO] [evolutionary_search.cc:730] Sending 64 candidates(s) for measurement
2024-04-29 05:09:27 [INFO] [task_scheduler.cc:131] [Task #66: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_64] Trial #1: GFLOPs: 52.5070. Time: 3033.0922 us. Best GFLOPs: 52.5070
2024-04-29 05:09:27 [INFO] [task_scheduler.cc:131] [Task #66: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_64] Trial #2: GFLOPs: 93.3125. Time: 1706.7231 us. Best GFLOPs: 93.3125
2024-04-29 05:09:27 [INFO] [task_scheduler.cc:131] [Task #66: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_64] Trial #3: GFLOPs: 11.4641. Time: 13891.9084 us. Best GFLOPs: 93.3125
2024-04-29 05:09:27 [INFO] [task_scheduler.cc:131] [Task #66: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_64] Trial #4: GFLOPs: 43.8443. Time: 3632.3693 us. Best GFLOPs: 93.3125
2024-04-29 05:09:27 [INFO] [task_scheduler.cc:131] [Task #66: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_64] Trial #5: GFLOPs: 68.2768. Time: 2332.5434 us. Best GFLOPs: 93.3125
2024-04-29 05:09:27 [INFO] [task_scheduler.cc:131] [Task #66: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_64] Trial #6: GFLOPs: 74.1689. Time: 2147.2434 us. Best GFLOPs: 93.3125
2024-04-29 05:09:27 [INFO] [task_scheduler.cc:131] [Task #66: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_64] Trial #7: GFLOPs: 161.5611. Time: 985.7488 us. Best GFLOPs: 161.5611
2024-04-29 05:09:27 [INFO] [task_scheduler.cc:131] [Task #66: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_64] Trial #8: GFLOPs: 98.9353. Time: 1609.7255 us. Best GFLOPs: 161.5611
2024-04-29 05:09:27 [INFO] [task_scheduler.cc:131] [Task #66: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_64] Trial #9: GFLOPs: 120.2416. Time: 1324.4891 us. Best GFLOPs: 161.5611
2024-04-29 05:09:27 [INFO] [task_scheduler.cc:131] [Task #66: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_64] Trial #10: GFLOPs: 7.6013. Time: 20951.4814 us. Best GFLOPs: 161.5611
2024-04-29 05:09:27 [INFO] [task_scheduler.cc:131] [Task #66: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_64] Trial #11: GFLOPs: 3.7203. Time: 42808.2630 us. Best GFLOPs: 161.5611
2024-04-29 05:09:27 [INFO] [task_scheduler.cc:131] [Task #66: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_64] Trial #12: GFLOPs: 28.2513. Time: 5637.2043 us. Best GFLOPs: 161.5611
2024-04-29 05:09:27 [INFO] [task_scheduler.cc:131] [Task #66: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_64] Trial #13: GFLOPs: 31.1243. Time: 5116.8541 us. Best GFLOPs: 161.5611
2024-04-29 05:09:27 [INFO] [task_scheduler.cc:121] [Task #66: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_64] Trial #14: Error in building:
LocalBuilder: Timeout, killed after 30.0 seconds
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(132), T.int64(28), T.int64(28), T.int64(4)), "float32"), p1: T.Buffer((T.int64(48), T.int64(132), T.int64(1), T.int64(1), T.int64(4), T.int64(4)), "float32"), p2: T.Buffer((T.int64(1), T.int64(48), T.int64(1), T.int64(1), T.int64(4)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(48), T.int64(28), T.int64(28), T.int64(4)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        conv2d_NCHWc = T.alloc_buffer((T.int64(1), T.int64(48), T.int64(28), T.int64(28), T.int64(4)))
        for n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_fused in T.parallel(T.int64(6), annotations={"pragma_auto_unroll_max_step": 512, "pragma_unroll_explicit": 1}):
            for n_1, oc_chunk_1, oh_1, ow_1, oc_block_1 in T.grid(T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1)):
                for n_2_init, oc_chunk_2_init, oh_2_init, ow_2_init, oc_block_2_init, n_3_init, oc_chunk_3_init, oh_3_init, ow_3_init, oc_block_3_init in T.grid(T.int64(1), T.int64(1), T.int64(28), T.int64(1), T.int64(2), T.int64(1), T.int64(16), T.int64(1), T.int64(28), T.int64(1)):
                    with T.block("conv2d_NCHWc_init"):
                        v_n = T.axis.spatial(T.int64(1), n_1 + n_2_init + n_3_init)
                        v_oc_chunk = T.axis.spatial(T.int64(48), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_fused // T.int64(2) * T.int64(16) + oc_chunk_1 * T.int64(16) + oc_chunk_2_init * T.int64(16) + oc_chunk_3_init)
                        v_oh = T.axis.spatial(T.int64(28), oh_1 * T.int64(28) + oh_2_init + oh_3_init)
                        v_ow = T.axis.spatial(T.int64(28), ow_1 * T.int64(28) + ow_2_init * T.int64(28) + ow_3_init)
                        v_oc_block = T.axis.spatial(T.int64(4), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_fused % T.int64(2) * T.int64(2) + oc_block_1 * T.int64(2) + oc_block_2_init + oc_block_3_init)
                        T.reads()
                        T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                        T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                        conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = T.float32(0)
                for ic_0, kh_0, kw_0, n_2, oc_chunk_2, oh_2, ow_2, oc_block_2, ic_1, kh_1, kw_1, n_3, oc_chunk_3, oh_3, ow_3, oc_block_3 in T.grid(T.int64(264), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(28), T.int64(1), T.int64(2), T.int64(2), T.int64(1), T.int64(1), T.int64(1), T.int64(16), T.int64(1), T.int64(28), T.int64(1)):
                    with T.block("conv2d_NCHWc_update"):
                        v_n = T.axis.spatial(T.int64(1), n_1 + n_2 + n_3)
                        v_oc_chunk = T.axis.spatial(T.int64(48), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_fused // T.int64(2) * T.int64(16) + oc_chunk_1 * T.int64(16) + oc_chunk_2 * T.int64(16) + oc_chunk_3)
                        v_oh = T.axis.spatial(T.int64(28), oh_1 * T.int64(28) + oh_2 + oh_3)
                        v_ow = T.axis.spatial(T.int64(28), ow_1 * T.int64(28) + ow_2 * T.int64(28) + ow_3)
                        v_oc_block = T.axis.spatial(T.int64(4), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_fused % T.int64(2) * T.int64(2) + oc_block_1 * T.int64(2) + oc_block_2 + oc_block_3)
                        v_ic = T.axis.reduce(T.int64(528), ic_0 * T.int64(2) + ic_1)
                        v_kh = T.axis.reduce(T.int64(1), kh_0 + kh_1)
                        v_kw = T.axis.reduce(T.int64(1), kw_0 + kw_1)
                        T.reads(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block], p0[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)], p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block])
                        T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                        T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                        conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] + p0[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)] * p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block]
            for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(16), T.int64(28), T.int64(28)):
                for ax4_fused in T.vectorized(T.int64(2)):
                    with T.block("T_relu"):
                        v_ax0 = T.axis.spatial(T.int64(1), ax0)
                        v_ax1 = T.axis.spatial(T.int64(48), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_fused // T.int64(2) * T.int64(16) + ax1)
                        v_ax2, v_ax3 = T.axis.remap("SS", [ax2, ax3])
                        v_ax4 = T.axis.spatial(T.int64(4), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_fused % T.int64(2) * T.int64(2) + ax4_fused)
                        T.reads(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4])
                        T.writes(T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                        T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.max(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] + p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4], T.float32(0))
b0 = sch.get_block(name="conv2d_NCHWc", func_name="main")
b1 = sch.get_block(name="T_add", func_name="main")
b2 = sch.get_block(name="root", func_name="main")
sch.compute_inline(block=b1)
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.tiling_structure", ann_val="SSRSRS")
l3, l4, l5, l6, l7, l8, l9, l10 = sch.get_loops(block=b0)
v11, v12, v13, v14 = sch.sample_perfect_tile(loop=l3, n=4, max_innermost_factor=64, decision=[1, 1, 1, 1])
l15, l16, l17, l18 = sch.split(loop=l3, factors=[v11, v12, v13, v14], preserve_unit_iters=True)
v19, v20, v21, v22 = sch.sample_perfect_tile(loop=l4, n=4, max_innermost_factor=64, decision=[3, 1, 1, 16])
l23, l24, l25, l26 = sch.split(loop=l4, factors=[v19, v20, v21, v22], preserve_unit_iters=True)
v27, v28, v29, v30 = sch.sample_perfect_tile(loop=l5, n=4, max_innermost_factor=64, decision=[1, 1, 28, 1])
l31, l32, l33, l34 = sch.split(loop=l5, factors=[v27, v28, v29, v30], preserve_unit_iters=True)
v35, v36, v37, v38 = sch.sample_perfect_tile(loop=l6, n=4, max_innermost_factor=64, decision=[1, 1, 1, 28])
l39, l40, l41, l42 = sch.split(loop=l6, factors=[v35, v36, v37, v38], preserve_unit_iters=True)
v43, v44, v45, v46 = sch.sample_perfect_tile(loop=l7, n=4, max_innermost_factor=64, decision=[2, 1, 2, 1])
l47, l48, l49, l50 = sch.split(loop=l7, factors=[v43, v44, v45, v46], preserve_unit_iters=True)
v51, v52 = sch.sample_perfect_tile(loop=l8, n=2, max_innermost_factor=64, decision=[264, 2])
l53, l54 = sch.split(loop=l8, factors=[v51, v52], preserve_unit_iters=True)
v55, v56 = sch.sample_perfect_tile(loop=l9, n=2, max_innermost_factor=64, decision=[1, 1])
l57, l58 = sch.split(loop=l9, factors=[v55, v56], preserve_unit_iters=True)
v59, v60 = sch.sample_perfect_tile(loop=l10, n=2, max_innermost_factor=64, decision=[1, 1])
l61, l62 = sch.split(loop=l10, factors=[v59, v60], preserve_unit_iters=True)
sch.reorder(l15, l23, l31, l39, l47, l16, l24, l32, l40, l48, l53, l57, l61, l17, l25, l33, l41, l49, l54, l58, l62, l18, l26, l34, l42, l50)
b63, = sch.get_consumers(block=b0)
sch.reverse_compute_at(block=b63, loop=l47, preserve_unit_loops=True, index=-1)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.vectorize", ann_val=64)
v64 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.unroll_explicit", ann_val=v64)
sch.enter_postproc()
b65 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b65, ann_key="meta_schedule.parallel")
sch.unannotate(block_or_loop=b65, ann_key="meta_schedule.vectorize")
sch.unannotate(block_or_loop=b65, ann_key="meta_schedule.unroll_explicit")
b66, b67 = sch.get_child_blocks(b65)
l68, l69, l70, l71, l72, l73, l74, l75, l76, l77, l78, l79, l80, l81, l82, l83, l84, l85, l86, l87, l88, l89, l90, l91, l92, l93 = sch.get_loops(block=b66)
l94 = sch.fuse(l68, l69, l70, l71, l72, preserve_unit_iters=True)
sch.parallel(loop=l94)
sch.annotate(block_or_loop=l94, ann_key="pragma_auto_unroll_max_step", ann_val=512)
sch.annotate(block_or_loop=l94, ann_key="pragma_unroll_explicit", ann_val=1)
l95, l96, l97, l98, l99, l100 = sch.get_loops(block=b67)
l101 = sch.fuse(l100, preserve_unit_iters=True)
sch.vectorize(loop=l101)
b102 = sch.get_block(name="conv2d_NCHWc", func_name="main")
l103, l104, l105, l106, l107, l108, l109, l110, l111, l112, l113, l114, l115, l116, l117, l118, l119, l120, l121, l122, l123, l124 = sch.get_loops(block=b102)
b125 = sch.decompose_reduction(block=b102, loop=l109)
2024-04-29 05:09:27 [INFO] [task_scheduler.cc:131] [Task #66: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_64] Trial #15: GFLOPs: 32.8605. Time: 4846.5122 us. Best GFLOPs: 161.5611
2024-04-29 05:09:27 [INFO] [task_scheduler.cc:131] [Task #66: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_64] Trial #16: GFLOPs: 80.9768. Time: 1966.7200 us. Best GFLOPs: 161.5611
2024-04-29 05:09:27 [INFO] [task_scheduler.cc:131] [Task #66: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_64] Trial #17: GFLOPs: 7.2036. Time: 22108.0530 us. Best GFLOPs: 161.5611
2024-04-29 05:09:27 [INFO] [task_scheduler.cc:131] [Task #66: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_64] Trial #18: GFLOPs: 34.1353. Time: 4665.5153 us. Best GFLOPs: 161.5611
2024-04-29 05:09:27 [INFO] [task_scheduler.cc:131] [Task #66: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_64] Trial #19: GFLOPs: 55.8172. Time: 2853.2202 us. Best GFLOPs: 161.5611
2024-04-29 05:09:27 [INFO] [task_scheduler.cc:131] [Task #66: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_64] Trial #20: GFLOPs: 156.1208. Time: 1020.0985 us. Best GFLOPs: 161.5611
2024-04-29 05:09:27 [INFO] [task_scheduler.cc:131] [Task #66: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_64] Trial #21: GFLOPs: 73.0622. Time: 2179.7673 us. Best GFLOPs: 161.5611
2024-04-29 05:09:27 [INFO] [task_scheduler.cc:131] [Task #66: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_64] Trial #22: GFLOPs: 163.7190. Time: 972.7556 us. Best GFLOPs: 163.7190
2024-04-29 05:09:27 [INFO] [task_scheduler.cc:131] [Task #66: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_64] Trial #23: GFLOPs: 0.1810. Time: 880053.8557 us. Best GFLOPs: 163.7190
2024-04-29 05:09:27 [INFO] [task_scheduler.cc:131] [Task #66: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_64] Trial #24: GFLOPs: 47.3355. Time: 3364.4654 us. Best GFLOPs: 163.7190
2024-04-29 05:09:27 [INFO] [task_scheduler.cc:131] [Task #66: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_64] Trial #25: GFLOPs: 12.6881. Time: 12551.7709 us. Best GFLOPs: 163.7190
2024-04-29 05:09:27 [INFO] [task_scheduler.cc:131] [Task #66: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_64] Trial #26: GFLOPs: 32.7885. Time: 4857.1453 us. Best GFLOPs: 163.7190
2024-04-29 05:09:27 [INFO] [task_scheduler.cc:131] [Task #66: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_64] Trial #27: GFLOPs: 16.3013. Time: 9769.6666 us. Best GFLOPs: 163.7190
2024-04-29 05:09:27 [INFO] [task_scheduler.cc:131] [Task #66: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_64] Trial #28: GFLOPs: 24.5899. Time: 6476.5954 us. Best GFLOPs: 163.7190
2024-04-29 05:09:27 [INFO] [task_scheduler.cc:131] [Task #66: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_64] Trial #29: GFLOPs: 42.9108. Time: 3711.3880 us. Best GFLOPs: 163.7190
2024-04-29 05:09:27 [INFO] [task_scheduler.cc:131] [Task #66: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_64] Trial #30: GFLOPs: 90.4321. Time: 1761.0849 us. Best GFLOPs: 163.7190
2024-04-29 05:09:27 [INFO] [task_scheduler.cc:131] [Task #66: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_64] Trial #31: GFLOPs: 98.2879. Time: 1620.3275 us. Best GFLOPs: 163.7190
2024-04-29 05:09:27 [INFO] [task_scheduler.cc:131] [Task #66: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_64] Trial #32: GFLOPs: 42.6439. Time: 3734.6182 us. Best GFLOPs: 163.7190
2024-04-29 05:09:27 [INFO] [task_scheduler.cc:131] [Task #66: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_64] Trial #33: GFLOPs: 27.9562. Time: 5696.7093 us. Best GFLOPs: 163.7190
2024-04-29 05:09:27 [INFO] [task_scheduler.cc:131] [Task #66: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_64] Trial #34: GFLOPs: 1.1354. Time: 140272.0923 us. Best GFLOPs: 163.7190
2024-04-29 05:09:27 [INFO] [task_scheduler.cc:131] [Task #66: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_64] Trial #35: GFLOPs: 26.7363. Time: 5956.6332 us. Best GFLOPs: 163.7190
2024-04-29 05:09:27 [INFO] [task_scheduler.cc:131] [Task #66: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_64] Trial #36: GFLOPs: 49.0827. Time: 3244.7019 us. Best GFLOPs: 163.7190
2024-04-29 05:09:27 [INFO] [task_scheduler.cc:131] [Task #66: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_64] Trial #37: GFLOPs: 0.1764. Time: 902655.3430 us. Best GFLOPs: 163.7190
2024-04-29 05:09:27 [INFO] [task_scheduler.cc:131] [Task #66: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_64] Trial #38: GFLOPs: 72.0694. Time: 2209.7959 us. Best GFLOPs: 163.7190
2024-04-29 05:09:27 [INFO] [task_scheduler.cc:131] [Task #66: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_64] Trial #39: GFLOPs: 76.5072. Time: 2081.6172 us. Best GFLOPs: 163.7190
2024-04-29 05:09:27 [INFO] [task_scheduler.cc:131] [Task #66: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_64] Trial #40: GFLOPs: 4.0255. Time: 39562.0490 us. Best GFLOPs: 163.7190
2024-04-29 05:09:27 [INFO] [task_scheduler.cc:131] [Task #66: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_64] Trial #41: GFLOPs: 42.0255. Time: 3789.5687 us. Best GFLOPs: 163.7190
2024-04-29 05:09:27 [INFO] [task_scheduler.cc:131] [Task #66: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_64] Trial #42: GFLOPs: 84.3812. Time: 1887.3704 us. Best GFLOPs: 163.7190
2024-04-29 05:09:27 [INFO] [task_scheduler.cc:131] [Task #66: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_64] Trial #43: GFLOPs: 24.4572. Time: 6511.7301 us. Best GFLOPs: 163.7190
2024-04-29 05:09:27 [INFO] [task_scheduler.cc:131] [Task #66: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_64] Trial #44: GFLOPs: 7.4349. Time: 21420.5398 us. Best GFLOPs: 163.7190
2024-04-29 05:09:27 [INFO] [task_scheduler.cc:131] [Task #66: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_64] Trial #45: GFLOPs: 2.9556. Time: 53883.1027 us. Best GFLOPs: 163.7190
2024-04-29 05:09:27 [INFO] [task_scheduler.cc:131] [Task #66: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_64] Trial #46: GFLOPs: 3.8824. Time: 41020.8660 us. Best GFLOPs: 163.7190
2024-04-29 05:09:27 [INFO] [task_scheduler.cc:131] [Task #66: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_64] Trial #47: GFLOPs: 105.8870. Time: 1504.0434 us. Best GFLOPs: 163.7190
2024-04-29 05:09:27 [INFO] [task_scheduler.cc:131] [Task #66: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_64] Trial #48: GFLOPs: 77.8636. Time: 2045.3553 us. Best GFLOPs: 163.7190
2024-04-29 05:09:27 [INFO] [task_scheduler.cc:131] [Task #66: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_64] Trial #49: GFLOPs: 111.9946. Time: 1422.0210 us. Best GFLOPs: 163.7190
2024-04-29 05:09:27 [INFO] [task_scheduler.cc:131] [Task #66: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_64] Trial #50: GFLOPs: 145.3922. Time: 1095.3728 us. Best GFLOPs: 163.7190
2024-04-29 05:09:27 [INFO] [task_scheduler.cc:131] [Task #66: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_64] Trial #51: GFLOPs: 23.6953. Time: 6721.1000 us. Best GFLOPs: 163.7190
2024-04-29 05:09:27 [INFO] [task_scheduler.cc:131] [Task #66: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_64] Trial #52: GFLOPs: 149.7323. Time: 1063.6224 us. Best GFLOPs: 163.7190
2024-04-29 05:09:27 [INFO] [task_scheduler.cc:131] [Task #66: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_64] Trial #53: GFLOPs: 116.5372. Time: 1366.5905 us. Best GFLOPs: 163.7190
2024-04-29 05:09:27 [INFO] [task_scheduler.cc:121] [Task #66: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_64] Trial #54: Error in building:
LocalBuilder: Timeout, killed after 30.0 seconds
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(132), T.int64(28), T.int64(28), T.int64(4)), "float32"), p1: T.Buffer((T.int64(48), T.int64(132), T.int64(1), T.int64(1), T.int64(4), T.int64(4)), "float32"), p2: T.Buffer((T.int64(1), T.int64(48), T.int64(1), T.int64(1), T.int64(4)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(48), T.int64(28), T.int64(28), T.int64(4)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        conv2d_NCHWc = T.alloc_buffer((T.int64(1), T.int64(48), T.int64(28), T.int64(28), T.int64(4)))
        for n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_fused in T.parallel(T.int64(7), annotations={"pragma_auto_unroll_max_step": 512, "pragma_unroll_explicit": 1}):
            for n_1, oc_chunk_1, oh_1, ow_1, oc_block_1 in T.grid(T.int64(1), T.int64(4), T.int64(1), T.int64(1), T.int64(1)):
                for n_2_init, oc_chunk_2_init, oh_2_init, ow_2_init, oc_block_2_init, n_3_init, oc_chunk_3_init, oh_3_init, ow_3_init, oc_block_3_init in T.grid(T.int64(1), T.int64(3), T.int64(2), T.int64(28), T.int64(4), T.int64(1), T.int64(4), T.int64(2), T.int64(1), T.int64(1)):
                    with T.block("conv2d_NCHWc_init"):
                        v_n = T.axis.spatial(T.int64(1), n_1 + n_2_init + n_3_init)
                        v_oc_chunk = T.axis.spatial(T.int64(48), oc_chunk_1 * T.int64(12) + oc_chunk_2_init * T.int64(4) + oc_chunk_3_init)
                        v_oh = T.axis.spatial(T.int64(28), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_fused * T.int64(4) + oh_1 * T.int64(4) + oh_2_init * T.int64(2) + oh_3_init)
                        v_ow = T.axis.spatial(T.int64(28), ow_1 * T.int64(28) + ow_2_init + ow_3_init)
                        v_oc_block = T.axis.spatial(T.int64(4), oc_block_1 * T.int64(4) + oc_block_2_init + oc_block_3_init)
                        T.reads()
                        T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                        T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                        conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = T.float32(0)
                for ic_0, kh_0, kw_0, n_2, oc_chunk_2, oh_2, ow_2, oc_block_2, ic_1, kh_1, kw_1, n_3, oc_chunk_3, oh_3, ow_3, oc_block_3 in T.grid(T.int64(33), T.int64(1), T.int64(1), T.int64(1), T.int64(3), T.int64(2), T.int64(28), T.int64(4), T.int64(16), T.int64(1), T.int64(1), T.int64(1), T.int64(4), T.int64(2), T.int64(1), T.int64(1)):
                    with T.block("conv2d_NCHWc_update"):
                        v_n = T.axis.spatial(T.int64(1), n_1 + n_2 + n_3)
                        v_oc_chunk = T.axis.spatial(T.int64(48), oc_chunk_1 * T.int64(12) + oc_chunk_2 * T.int64(4) + oc_chunk_3)
                        v_oh = T.axis.spatial(T.int64(28), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_fused * T.int64(4) + oh_1 * T.int64(4) + oh_2 * T.int64(2) + oh_3)
                        v_ow = T.axis.spatial(T.int64(28), ow_1 * T.int64(28) + ow_2 + ow_3)
                        v_oc_block = T.axis.spatial(T.int64(4), oc_block_1 * T.int64(4) + oc_block_2 + oc_block_3)
                        v_ic = T.axis.reduce(T.int64(528), ic_0 * T.int64(16) + ic_1)
                        v_kh = T.axis.reduce(T.int64(1), kh_0 + kh_1)
                        v_kw = T.axis.reduce(T.int64(1), kw_0 + kw_1)
                        T.reads(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block], p0[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)], p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block])
                        T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                        T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                        conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] + p0[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)] * p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block]
            for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(48), T.int64(4), T.int64(28)):
                for ax4_fused in T.vectorized(T.int64(4)):
                    with T.block("T_relu"):
                        v_ax0, v_ax1 = T.axis.remap("SS", [ax0, ax1])
                        v_ax2 = T.axis.spatial(T.int64(28), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_fused * T.int64(4) + ax2)
                        v_ax3, v_ax4 = T.axis.remap("SS", [ax3, ax4_fused])
                        T.reads(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4])
                        T.writes(T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                        T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.max(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] + p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4], T.float32(0))
b0 = sch.get_block(name="conv2d_NCHWc", func_name="main")
b1 = sch.get_block(name="T_add", func_name="main")
b2 = sch.get_block(name="root", func_name="main")
sch.compute_inline(block=b1)
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.tiling_structure", ann_val="SSRSRS")
l3, l4, l5, l6, l7, l8, l9, l10 = sch.get_loops(block=b0)
v11, v12, v13, v14 = sch.sample_perfect_tile(loop=l3, n=4, max_innermost_factor=64, decision=[1, 1, 1, 1])
l15, l16, l17, l18 = sch.split(loop=l3, factors=[v11, v12, v13, v14], preserve_unit_iters=True)
v19, v20, v21, v22 = sch.sample_perfect_tile(loop=l4, n=4, max_innermost_factor=64, decision=[1, 4, 3, 4])
l23, l24, l25, l26 = sch.split(loop=l4, factors=[v19, v20, v21, v22], preserve_unit_iters=True)
v27, v28, v29, v30 = sch.sample_perfect_tile(loop=l5, n=4, max_innermost_factor=64, decision=[7, 1, 2, 2])
l31, l32, l33, l34 = sch.split(loop=l5, factors=[v27, v28, v29, v30], preserve_unit_iters=True)
v35, v36, v37, v38 = sch.sample_perfect_tile(loop=l6, n=4, max_innermost_factor=64, decision=[1, 1, 28, 1])
l39, l40, l41, l42 = sch.split(loop=l6, factors=[v35, v36, v37, v38], preserve_unit_iters=True)
v43, v44, v45, v46 = sch.sample_perfect_tile(loop=l7, n=4, max_innermost_factor=64, decision=[1, 1, 4, 1])
l47, l48, l49, l50 = sch.split(loop=l7, factors=[v43, v44, v45, v46], preserve_unit_iters=True)
v51, v52 = sch.sample_perfect_tile(loop=l8, n=2, max_innermost_factor=64, decision=[33, 16])
l53, l54 = sch.split(loop=l8, factors=[v51, v52], preserve_unit_iters=True)
v55, v56 = sch.sample_perfect_tile(loop=l9, n=2, max_innermost_factor=64, decision=[1, 1])
l57, l58 = sch.split(loop=l9, factors=[v55, v56], preserve_unit_iters=True)
v59, v60 = sch.sample_perfect_tile(loop=l10, n=2, max_innermost_factor=64, decision=[1, 1])
l61, l62 = sch.split(loop=l10, factors=[v59, v60], preserve_unit_iters=True)
sch.reorder(l15, l23, l31, l39, l47, l16, l24, l32, l40, l48, l53, l57, l61, l17, l25, l33, l41, l49, l54, l58, l62, l18, l26, l34, l42, l50)
b63, = sch.get_consumers(block=b0)
sch.reverse_compute_at(block=b63, loop=l47, preserve_unit_loops=True, index=-1)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.vectorize", ann_val=64)
v64 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.unroll_explicit", ann_val=v64)
sch.enter_postproc()
b65 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b65, ann_key="meta_schedule.parallel")
sch.unannotate(block_or_loop=b65, ann_key="meta_schedule.vectorize")
sch.unannotate(block_or_loop=b65, ann_key="meta_schedule.unroll_explicit")
b66, b67 = sch.get_child_blocks(b65)
l68, l69, l70, l71, l72, l73, l74, l75, l76, l77, l78, l79, l80, l81, l82, l83, l84, l85, l86, l87, l88, l89, l90, l91, l92, l93 = sch.get_loops(block=b66)
l94 = sch.fuse(l68, l69, l70, l71, l72, preserve_unit_iters=True)
sch.parallel(loop=l94)
sch.annotate(block_or_loop=l94, ann_key="pragma_auto_unroll_max_step", ann_val=512)
sch.annotate(block_or_loop=l94, ann_key="pragma_unroll_explicit", ann_val=1)
l95, l96, l97, l98, l99, l100 = sch.get_loops(block=b67)
l101 = sch.fuse(l100, preserve_unit_iters=True)
sch.vectorize(loop=l101)
b102 = sch.get_block(name="conv2d_NCHWc", func_name="main")
l103, l104, l105, l106, l107, l108, l109, l110, l111, l112, l113, l114, l115, l116, l117, l118, l119, l120, l121, l122, l123, l124 = sch.get_loops(block=b102)
b125 = sch.decompose_reduction(block=b102, loop=l109)
2024-04-29 05:09:27 [INFO] [task_scheduler.cc:131] [Task #66: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_64] Trial #55: GFLOPs: 185.2779. Time: 859.5660 us. Best GFLOPs: 185.2779
2024-04-29 05:09:27 [INFO] [task_scheduler.cc:131] [Task #66: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_64] Trial #56: GFLOPs: 85.8694. Time: 1854.6610 us. Best GFLOPs: 185.2779
2024-04-29 05:09:27 [INFO] [task_scheduler.cc:131] [Task #66: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_64] Trial #57: GFLOPs: 132.1844. Time: 1204.8214 us. Best GFLOPs: 185.2779
2024-04-29 05:09:27 [INFO] [task_scheduler.cc:131] [Task #66: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_64] Trial #58: GFLOPs: 189.7288. Time: 839.4013 us. Best GFLOPs: 189.7288
2024-04-29 05:09:27 [INFO] [task_scheduler.cc:131] [Task #66: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_64] Trial #59: GFLOPs: 47.7017. Time: 3338.6336 us. Best GFLOPs: 189.7288
2024-04-29 05:09:27 [INFO] [task_scheduler.cc:131] [Task #66: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_64] Trial #60: GFLOPs: 1.9255. Time: 82709.0550 us. Best GFLOPs: 189.7288
2024-04-29 05:09:27 [INFO] [task_scheduler.cc:131] [Task #66: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_64] Trial #61: GFLOPs: 19.1428. Time: 8319.4892 us. Best GFLOPs: 189.7288
2024-04-29 05:09:27 [INFO] [task_scheduler.cc:131] [Task #66: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_64] Trial #62: GFLOPs: 46.5541. Time: 3420.9392 us. Best GFLOPs: 189.7288
2024-04-29 05:09:27 [INFO] [task_scheduler.cc:131] [Task #66: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_64] Trial #63: GFLOPs: 80.4726. Time: 1979.0426 us. Best GFLOPs: 189.7288
2024-04-29 05:09:27 [INFO] [task_scheduler.cc:131] [Task #66: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_64] Trial #64: GFLOPs: 120.3833. Time: 1322.9297 us. Best GFLOPs: 189.7288
2024-04-29 06:47:54 [INFO] [evolutionary_search.cc:713] Generating candidates......
2024-04-29 06:47:55 [INFO] [evolutionary_search.cc:715] Picked top 62 candidate(s) from database
2024-04-29 06:47:57 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x7993bc8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x10105d98)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x86b16e8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x3571798)]: 0 failure(s)
2024-04-29 06:47:57 [INFO] [evolutionary_search.cc:723] Sampled 450 candidate(s)
2024-04-29 06:48:02 [INFO] [evolutionary_search.cc:621] Evolve iter #0 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x7993bc8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x10105d98)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x86b16e8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x3571798)]: 0 failure(s)
2024-04-29 06:48:08 [INFO] [evolutionary_search.cc:621] Evolve iter #1 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x7993bc8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x10105d98)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x86b16e8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x3571798)]: 0 failure(s)
2024-04-29 06:48:13 [INFO] [evolutionary_search.cc:621] Evolve iter #2 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x7993bc8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x10105d98)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x86b16e8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x3571798)]: 0 failure(s)
2024-04-29 06:48:19 [INFO] [evolutionary_search.cc:621] Evolve iter #3 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x7993bc8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x10105d98)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x86b16e8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x3571798)]: 0 failure(s)
2024-04-29 06:48:22 [INFO] [evolutionary_search.cc:649] Scores of the best 64 candidates:
[1 : 16]:	0.9449  0.9376  0.9329  0.9087  0.8896  0.8794  0.8695  0.8695  0.8545  0.8422  0.8393  0.8393  0.8393  0.8390  0.8326  0.8313
[17 : 32]:	0.8217  0.8167  0.8091  0.8085  0.8056  0.7944  0.7944  0.7856  0.7793  0.7763  0.7698  0.7678  0.7657  0.7657  0.7657  0.7623
[33 : 48]:	0.7623  0.7623  0.7571  0.7544  0.7531  0.7531  0.7522  0.7519  0.7453  0.7425  0.7412  0.7305  0.7297  0.7297  0.7267  0.7261
[49 : 64]:	0.7206  0.7170  0.7143  0.7130  0.7110  0.7100  0.7083  0.7039  0.7007  0.7007  0.6962  0.6960  0.6942  0.6935  0.6886  0.6886
2024-04-29 06:48:22 [INFO] [evolutionary_search.cc:727] Got 64 candidate(s) with evolutionary search
2024-04-29 06:48:22 [INFO] [evolutionary_search.cc:730] Sending 64 candidates(s) for measurement
2024-04-29 06:50:02 [INFO] [task_scheduler.cc:131] [Task #66: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_64] Trial #65: GFLOPs: 68.8631. Time: 2312.6857 us. Best GFLOPs: 189.7288
2024-04-29 06:50:02 [INFO] [task_scheduler.cc:131] [Task #66: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_64] Trial #66: GFLOPs: 120.8128. Time: 1318.2267 us. Best GFLOPs: 189.7288
2024-04-29 06:50:02 [INFO] [task_scheduler.cc:131] [Task #66: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_64] Trial #67: GFLOPs: 118.1016. Time: 1348.4887 us. Best GFLOPs: 189.7288
2024-04-29 06:50:02 [INFO] [task_scheduler.cc:131] [Task #66: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_64] Trial #68: GFLOPs: 114.6555. Time: 1389.0182 us. Best GFLOPs: 189.7288
2024-04-29 06:50:02 [INFO] [task_scheduler.cc:131] [Task #66: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_64] Trial #69: GFLOPs: 186.7361. Time: 852.8538 us. Best GFLOPs: 189.7288
2024-04-29 06:50:02 [INFO] [task_scheduler.cc:131] [Task #66: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_64] Trial #70: GFLOPs: 173.6411. Time: 917.1713 us. Best GFLOPs: 189.7288
2024-04-29 06:50:02 [INFO] [task_scheduler.cc:131] [Task #66: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_64] Trial #71: GFLOPs: 250.0348. Time: 636.9460 us. Best GFLOPs: 250.0348
2024-04-29 06:50:02 [INFO] [task_scheduler.cc:131] [Task #66: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_64] Trial #72: GFLOPs: 200.7169. Time: 793.4489 us. Best GFLOPs: 250.0348
2024-04-29 06:50:02 [INFO] [task_scheduler.cc:131] [Task #66: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_64] Trial #73: GFLOPs: 217.4868. Time: 732.2680 us. Best GFLOPs: 250.0348
2024-04-29 06:50:02 [INFO] [task_scheduler.cc:131] [Task #66: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_64] Trial #74: GFLOPs: 245.8199. Time: 647.8671 us. Best GFLOPs: 250.0348
2024-04-29 06:50:02 [INFO] [task_scheduler.cc:131] [Task #66: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_64] Trial #75: GFLOPs: 81.2037. Time: 1961.2240 us. Best GFLOPs: 250.0348
2024-04-29 06:50:02 [INFO] [task_scheduler.cc:131] [Task #66: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_64] Trial #76: GFLOPs: 81.7532. Time: 1948.0407 us. Best GFLOPs: 250.0348
2024-04-29 06:50:02 [INFO] [task_scheduler.cc:131] [Task #66: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_64] Trial #77: GFLOPs: 81.9463. Time: 1943.4509 us. Best GFLOPs: 250.0348
2024-04-29 06:50:02 [INFO] [task_scheduler.cc:131] [Task #66: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_64] Trial #78: GFLOPs: 81.7920. Time: 1947.1167 us. Best GFLOPs: 250.0348
2024-04-29 06:50:02 [INFO] [task_scheduler.cc:131] [Task #66: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_64] Trial #79: GFLOPs: 118.5474. Time: 1343.4167 us. Best GFLOPs: 250.0348
2024-04-29 06:50:02 [INFO] [task_scheduler.cc:131] [Task #66: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_64] Trial #80: GFLOPs: 162.8223. Time: 978.1133 us. Best GFLOPs: 250.0348
2024-04-29 06:50:02 [INFO] [task_scheduler.cc:131] [Task #66: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_64] Trial #81: GFLOPs: 175.3204. Time: 908.3862 us. Best GFLOPs: 250.0348
2024-04-29 06:50:02 [INFO] [task_scheduler.cc:131] [Task #66: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_64] Trial #82: GFLOPs: 159.4524. Time: 998.7849 us. Best GFLOPs: 250.0348
2024-04-29 06:50:02 [INFO] [task_scheduler.cc:131] [Task #66: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_64] Trial #83: GFLOPs: 172.5584. Time: 922.9261 us. Best GFLOPs: 250.0348
2024-04-29 06:50:02 [INFO] [task_scheduler.cc:131] [Task #66: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_64] Trial #84: GFLOPs: 199.9987. Time: 796.2984 us. Best GFLOPs: 250.0348
2024-04-29 06:50:02 [INFO] [task_scheduler.cc:131] [Task #66: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_64] Trial #85: GFLOPs: 129.5851. Time: 1228.9886 us. Best GFLOPs: 250.0348
2024-04-29 06:50:02 [INFO] [task_scheduler.cc:131] [Task #66: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_64] Trial #86: GFLOPs: 164.4966. Time: 968.1575 us. Best GFLOPs: 250.0348
2024-04-29 06:50:02 [INFO] [task_scheduler.cc:131] [Task #66: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_64] Trial #87: GFLOPs: 138.4210. Time: 1150.5377 us. Best GFLOPs: 250.0348
2024-04-29 06:50:02 [INFO] [task_scheduler.cc:131] [Task #66: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_64] Trial #88: GFLOPs: 175.5723. Time: 907.0829 us. Best GFLOPs: 250.0348
2024-04-29 06:50:02 [INFO] [task_scheduler.cc:131] [Task #66: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_64] Trial #89: GFLOPs: 135.2615. Time: 1177.4127 us. Best GFLOPs: 250.0348
2024-04-29 06:50:02 [INFO] [task_scheduler.cc:131] [Task #66: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_64] Trial #90: GFLOPs: 110.8853. Time: 1436.2461 us. Best GFLOPs: 250.0348
2024-04-29 06:50:02 [INFO] [task_scheduler.cc:131] [Task #66: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_64] Trial #91: GFLOPs: 184.4910. Time: 863.2325 us. Best GFLOPs: 250.0348
2024-04-29 06:50:02 [INFO] [task_scheduler.cc:131] [Task #66: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_64] Trial #92: GFLOPs: 198.5268. Time: 802.2020 us. Best GFLOPs: 250.0348
2024-04-29 06:50:02 [INFO] [task_scheduler.cc:131] [Task #66: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_64] Trial #93: GFLOPs: 81.9031. Time: 1944.4768 us. Best GFLOPs: 250.0348
2024-04-29 06:50:02 [INFO] [task_scheduler.cc:131] [Task #66: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_64] Trial #94: GFLOPs: 143.1064. Time: 1112.8687 us. Best GFLOPs: 250.0348
2024-04-29 06:50:02 [INFO] [task_scheduler.cc:131] [Task #66: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_64] Trial #95: GFLOPs: 159.5350. Time: 998.2679 us. Best GFLOPs: 250.0348
2024-04-29 06:50:02 [INFO] [task_scheduler.cc:131] [Task #66: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_64] Trial #96: GFLOPs: 137.4414. Time: 1158.7384 us. Best GFLOPs: 250.0348
2024-04-29 06:50:02 [INFO] [task_scheduler.cc:131] [Task #66: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_64] Trial #97: GFLOPs: 113.3370. Time: 1405.1774 us. Best GFLOPs: 250.0348
2024-04-29 06:50:02 [INFO] [task_scheduler.cc:131] [Task #66: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_64] Trial #98: GFLOPs: 181.3801. Time: 878.0380 us. Best GFLOPs: 250.0348
2024-04-29 06:50:02 [INFO] [task_scheduler.cc:131] [Task #66: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_64] Trial #99: GFLOPs: 198.2079. Time: 803.4927 us. Best GFLOPs: 250.0348
2024-04-29 06:50:02 [INFO] [task_scheduler.cc:131] [Task #66: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_64] Trial #100: GFLOPs: 124.2015. Time: 1282.2605 us. Best GFLOPs: 250.0348
2024-04-29 06:50:02 [INFO] [task_scheduler.cc:131] [Task #66: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_64] Trial #101: GFLOPs: 184.1682. Time: 864.7457 us. Best GFLOPs: 250.0348
2024-04-29 06:50:02 [INFO] [task_scheduler.cc:131] [Task #66: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_64] Trial #102: GFLOPs: 127.2757. Time: 1251.2886 us. Best GFLOPs: 250.0348
2024-04-29 06:50:02 [INFO] [task_scheduler.cc:131] [Task #66: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_64] Trial #103: GFLOPs: 213.0876. Time: 747.3856 us. Best GFLOPs: 250.0348
2024-04-29 06:50:02 [INFO] [task_scheduler.cc:131] [Task #66: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_64] Trial #104: GFLOPs: 91.8357. Time: 1734.1690 us. Best GFLOPs: 250.0348
2024-04-29 06:50:02 [INFO] [task_scheduler.cc:131] [Task #66: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_64] Trial #105: GFLOPs: 120.9500. Time: 1316.7311 us. Best GFLOPs: 250.0348
2024-04-29 06:50:02 [INFO] [task_scheduler.cc:131] [Task #66: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_64] Trial #106: GFLOPs: 117.3204. Time: 1357.4673 us. Best GFLOPs: 250.0348
2024-04-29 06:50:02 [INFO] [task_scheduler.cc:131] [Task #66: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_64] Trial #107: GFLOPs: 169.8642. Time: 937.5643 us. Best GFLOPs: 250.0348
2024-04-29 06:50:02 [INFO] [task_scheduler.cc:131] [Task #66: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_64] Trial #108: GFLOPs: 111.2829. Time: 1431.1151 us. Best GFLOPs: 250.0348
2024-04-29 06:50:02 [INFO] [task_scheduler.cc:131] [Task #66: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_64] Trial #109: GFLOPs: 116.3806. Time: 1368.4292 us. Best GFLOPs: 250.0348
2024-04-29 06:50:02 [INFO] [task_scheduler.cc:131] [Task #66: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_64] Trial #110: GFLOPs: 115.6981. Time: 1376.5016 us. Best GFLOPs: 250.0348
2024-04-29 06:50:02 [INFO] [task_scheduler.cc:131] [Task #66: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_64] Trial #111: GFLOPs: 130.3462. Time: 1221.8127 us. Best GFLOPs: 250.0348
2024-04-29 06:50:02 [INFO] [task_scheduler.cc:131] [Task #66: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_64] Trial #112: GFLOPs: 144.9605. Time: 1098.6350 us. Best GFLOPs: 250.0348
2024-04-29 06:50:02 [INFO] [task_scheduler.cc:131] [Task #66: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_64] Trial #113: GFLOPs: 3.7900. Time: 42020.9600 us. Best GFLOPs: 250.0348
2024-04-29 06:50:02 [INFO] [task_scheduler.cc:131] [Task #66: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_64] Trial #114: GFLOPs: 230.3713. Time: 691.3127 us. Best GFLOPs: 250.0348
2024-04-29 06:50:02 [INFO] [task_scheduler.cc:131] [Task #66: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_64] Trial #115: GFLOPs: 98.0391. Time: 1624.4400 us. Best GFLOPs: 250.0348
2024-04-29 06:50:02 [INFO] [task_scheduler.cc:131] [Task #66: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_64] Trial #116: GFLOPs: 99.7402. Time: 1596.7342 us. Best GFLOPs: 250.0348
2024-04-29 06:50:02 [INFO] [task_scheduler.cc:131] [Task #66: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_64] Trial #117: GFLOPs: 117.4771. Time: 1355.6564 us. Best GFLOPs: 250.0348
2024-04-29 06:50:02 [INFO] [task_scheduler.cc:131] [Task #66: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_64] Trial #118: GFLOPs: 95.7035. Time: 1664.0839 us. Best GFLOPs: 250.0348
2024-04-29 06:50:02 [INFO] [task_scheduler.cc:131] [Task #66: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_64] Trial #119: GFLOPs: 172.2573. Time: 924.5394 us. Best GFLOPs: 250.0348
2024-04-29 06:50:02 [INFO] [task_scheduler.cc:121] [Task #66: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_64] Trial #120: Error in building:
LocalBuilder: Timeout, killed after 30.0 seconds
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(132), T.int64(28), T.int64(28), T.int64(4)), "float32"), p1: T.Buffer((T.int64(48), T.int64(132), T.int64(1), T.int64(1), T.int64(4), T.int64(4)), "float32"), p2: T.Buffer((T.int64(1), T.int64(48), T.int64(1), T.int64(1), T.int64(4)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(48), T.int64(28), T.int64(28), T.int64(4)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        conv2d_NCHWc = T.alloc_buffer((T.int64(1), T.int64(48), T.int64(28), T.int64(28), T.int64(4)))
        for n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused in T.parallel(T.int64(672), annotations={"pragma_auto_unroll_max_step": 512, "pragma_unroll_explicit": 1}):
            for n_2_init, oc_chunk_2_init, oh_2_init, ow_2_init, oc_block_2_init, n_3_init, oc_chunk_3_init, oh_3_init, ow_3_init, oc_block_3_init in T.grid(T.int64(1), T.int64(1), T.int64(7), T.int64(2), T.int64(1), T.int64(1), T.int64(8), T.int64(1), T.int64(2), T.int64(1)):
                with T.block("conv2d_NCHWc_init"):
                    v_n = T.axis.spatial(T.int64(1), n_2_init + n_3_init)
                    v_oc_chunk = T.axis.spatial(T.int64(48), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused // T.int64(112) * T.int64(8) + oc_chunk_2_init * T.int64(8) + oc_chunk_3_init)
                    v_oh = T.axis.spatial(T.int64(28), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused % T.int64(56) // T.int64(14) * T.int64(7) + oh_2_init + oh_3_init)
                    v_ow = T.axis.spatial(T.int64(28), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused % T.int64(14) // T.int64(2) * T.int64(4) + ow_2_init * T.int64(2) + ow_3_init)
                    v_oc_block = T.axis.spatial(T.int64(4), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused % T.int64(112) // T.int64(56) * T.int64(2) + n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused % T.int64(2) + oc_block_2_init + oc_block_3_init)
                    T.reads()
                    T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                    T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                    conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = T.float32(0)
            for ic_0, kh_0, kw_0, n_2, oc_chunk_2, oh_2, ow_2, oc_block_2, ic_1, kh_1, kw_1, n_3, oc_chunk_3, oh_3, ow_3, oc_block_3 in T.grid(T.int64(264), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(7), T.int64(2), T.int64(1), T.int64(2), T.int64(1), T.int64(1), T.int64(1), T.int64(8), T.int64(1), T.int64(2), T.int64(1)):
                with T.block("conv2d_NCHWc_update"):
                    v_n = T.axis.spatial(T.int64(1), n_2 + n_3)
                    v_oc_chunk = T.axis.spatial(T.int64(48), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused // T.int64(112) * T.int64(8) + oc_chunk_2 * T.int64(8) + oc_chunk_3)
                    v_oh = T.axis.spatial(T.int64(28), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused % T.int64(56) // T.int64(14) * T.int64(7) + oh_2 + oh_3)
                    v_ow = T.axis.spatial(T.int64(28), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused % T.int64(14) // T.int64(2) * T.int64(4) + ow_2 * T.int64(2) + ow_3)
                    v_oc_block = T.axis.spatial(T.int64(4), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused % T.int64(112) // T.int64(56) * T.int64(2) + n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused % T.int64(2) + oc_block_2 + oc_block_3)
                    v_ic = T.axis.reduce(T.int64(528), ic_0 * T.int64(2) + ic_1)
                    v_kh = T.axis.reduce(T.int64(1), kh_0 + kh_1)
                    v_kw = T.axis.reduce(T.int64(1), kw_0 + kw_1)
                    T.reads(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block], p0[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)], p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block])
                    T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                    T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                    conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] + p0[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)] * p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block]
        for ax0_ax1_ax2_ax3_ax4_fused_0 in T.parallel(T.int64(2352)):
            for ax0_ax1_ax2_ax3_ax4_fused_1 in T.vectorized(T.int64(64)):
                with T.block("T_relu"):
                    v_ax0 = T.axis.spatial(T.int64(1), T.int64(0))
                    v_ax1 = T.axis.spatial(T.int64(48), (ax0_ax1_ax2_ax3_ax4_fused_0 * T.int64(64) + ax0_ax1_ax2_ax3_ax4_fused_1) // T.int64(3136))
                    v_ax2 = T.axis.spatial(T.int64(28), (ax0_ax1_ax2_ax3_ax4_fused_0 * T.int64(64) + ax0_ax1_ax2_ax3_ax4_fused_1) % T.int64(3136) // T.int64(112))
                    v_ax3 = T.axis.spatial(T.int64(28), (ax0_ax1_ax2_ax3_ax4_fused_0 * T.int64(64) + ax0_ax1_ax2_ax3_ax4_fused_1) % T.int64(112) // T.int64(4))
                    v_ax4 = T.axis.spatial(T.int64(4), (ax0_ax1_ax2_ax3_ax4_fused_0 * T.int64(64) + ax0_ax1_ax2_ax3_ax4_fused_1) % T.int64(4))
                    T.reads(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4])
                    T.writes(T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                    T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.max(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] + p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4], T.float32(0))
b0 = sch.get_block(name="conv2d_NCHWc", func_name="main")
b1 = sch.get_block(name="T_add", func_name="main")
b2 = sch.get_block(name="root", func_name="main")
sch.compute_inline(block=b1)
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.tiling_structure", ann_val="SSRSRS")
l3, l4, l5, l6, l7, l8, l9, l10 = sch.get_loops(block=b0)
v11, v12, v13, v14 = sch.sample_perfect_tile(loop=l3, n=4, max_innermost_factor=64, decision=[1, 1, 1, 1])
l15, l16, l17, l18 = sch.split(loop=l3, factors=[v11, v12, v13, v14], preserve_unit_iters=True)
v19, v20, v21, v22 = sch.sample_perfect_tile(loop=l4, n=4, max_innermost_factor=64, decision=[6, 1, 1, 8])
l23, l24, l25, l26 = sch.split(loop=l4, factors=[v19, v20, v21, v22], preserve_unit_iters=True)
v27, v28, v29, v30 = sch.sample_perfect_tile(loop=l5, n=4, max_innermost_factor=64, decision=[1, 4, 7, 1])
l31, l32, l33, l34 = sch.split(loop=l5, factors=[v27, v28, v29, v30], preserve_unit_iters=True)
v35, v36, v37, v38 = sch.sample_perfect_tile(loop=l6, n=4, max_innermost_factor=64, decision=[1, 7, 2, 2])
l39, l40, l41, l42 = sch.split(loop=l6, factors=[v35, v36, v37, v38], preserve_unit_iters=True)
v43, v44, v45, v46 = sch.sample_perfect_tile(loop=l7, n=4, max_innermost_factor=64, decision=[2, 2, 1, 1])
l47, l48, l49, l50 = sch.split(loop=l7, factors=[v43, v44, v45, v46], preserve_unit_iters=True)
v51, v52 = sch.sample_perfect_tile(loop=l8, n=2, max_innermost_factor=64, decision=[264, 2])
l53, l54 = sch.split(loop=l8, factors=[v51, v52], preserve_unit_iters=True)
v55, v56 = sch.sample_perfect_tile(loop=l9, n=2, max_innermost_factor=64, decision=[1, 1])
l57, l58 = sch.split(loop=l9, factors=[v55, v56], preserve_unit_iters=True)
v59, v60 = sch.sample_perfect_tile(loop=l10, n=2, max_innermost_factor=64, decision=[1, 1])
l61, l62 = sch.split(loop=l10, factors=[v59, v60], preserve_unit_iters=True)
sch.reorder(l15, l23, l31, l39, l47, l16, l24, l32, l40, l48, l53, l57, l61, l17, l25, l33, l41, l49, l54, l58, l62, l18, l26, l34, l42, l50)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.vectorize", ann_val=64)
v63 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.unroll_explicit", ann_val=v63)
sch.enter_postproc()
b64 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b64, ann_key="meta_schedule.parallel")
sch.unannotate(block_or_loop=b64, ann_key="meta_schedule.vectorize")
sch.unannotate(block_or_loop=b64, ann_key="meta_schedule.unroll_explicit")
b65, b66 = sch.get_child_blocks(b64)
l67, l68, l69, l70, l71, l72, l73, l74, l75, l76, l77, l78, l79, l80, l81, l82, l83, l84, l85, l86, l87, l88, l89, l90, l91, l92 = sch.get_loops(block=b65)
l93 = sch.fuse(l67, l68, l69, l70, l71, l72, l73, l74, l75, l76, preserve_unit_iters=True)
sch.parallel(loop=l93)
sch.annotate(block_or_loop=l93, ann_key="pragma_auto_unroll_max_step", ann_val=512)
sch.annotate(block_or_loop=l93, ann_key="pragma_unroll_explicit", ann_val=1)
l94, l95, l96, l97, l98 = sch.get_loops(block=b66)
l99 = sch.fuse(l94, l95, l96, l97, l98, preserve_unit_iters=True)
l100, l101 = sch.split(loop=l99, factors=[None, 64], preserve_unit_iters=True)
sch.parallel(loop=l100)
sch.vectorize(loop=l101)
b102 = sch.get_block(name="conv2d_NCHWc", func_name="main")
l103, l104, l105, l106, l107, l108, l109, l110, l111, l112, l113, l114, l115, l116, l117, l118, l119 = sch.get_loops(block=b102)
b120 = sch.decompose_reduction(block=b102, loop=l104)
2024-04-29 06:50:02 [INFO] [task_scheduler.cc:131] [Task #66: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_64] Trial #121: GFLOPs: 180.4902. Time: 882.3674 us. Best GFLOPs: 250.0348
2024-04-29 06:50:02 [INFO] [task_scheduler.cc:131] [Task #66: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_64] Trial #122: GFLOPs: 220.6694. Time: 721.7067 us. Best GFLOPs: 250.0348
2024-04-29 06:50:02 [INFO] [task_scheduler.cc:131] [Task #66: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_64] Trial #123: GFLOPs: 103.4537. Time: 1539.4191 us. Best GFLOPs: 250.0348
2024-04-29 06:50:02 [INFO] [task_scheduler.cc:131] [Task #66: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_64] Trial #124: GFLOPs: 46.4918. Time: 3425.5217 us. Best GFLOPs: 250.0348
2024-04-29 06:50:02 [INFO] [task_scheduler.cc:131] [Task #66: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_64] Trial #125: GFLOPs: 230.3220. Time: 691.4607 us. Best GFLOPs: 250.0348
2024-04-29 06:50:02 [INFO] [task_scheduler.cc:131] [Task #66: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_64] Trial #126: GFLOPs: 45.6266. Time: 3490.4778 us. Best GFLOPs: 250.0348
2024-04-29 06:50:02 [INFO] [task_scheduler.cc:131] [Task #66: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_64] Trial #127: GFLOPs: 76.7620. Time: 2074.7055 us. Best GFLOPs: 250.0348
2024-04-29 06:50:02 [INFO] [task_scheduler.cc:131] [Task #66: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_64] Trial #128: GFLOPs: 55.6262. Time: 2863.0164 us. Best GFLOPs: 250.0348
