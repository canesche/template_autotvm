2024-04-29 02:30:21 [INFO] [task_scheduler.cc:160] Initializing Task #31: "fused_nn_contrib_conv2d_NCHWc_add_nn_relu_30"
2024-04-29 02:30:21 [INFO] [task_scheduler.cc:35] 
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(444), T.int64(14), T.int64(14), T.int64(4)), "float32"), p1: T.Buffer((T.int64(48), T.int64(444), T.int64(1), T.int64(1), T.int64(4), T.int64(4)), "float32"), p2: T.Buffer((T.int64(1), T.int64(48), T.int64(1), T.int64(1), T.int64(4)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(48), T.int64(14), T.int64(14), T.int64(4)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        conv2d_NCHWc = T.alloc_buffer((T.int64(1), T.int64(48), T.int64(14), T.int64(14), T.int64(4)))
        T_add = T.alloc_buffer((T.int64(1), T.int64(48), T.int64(14), T.int64(14), T.int64(4)))
        for n, oc_chunk, oh, ow, oc_block, ic, kh, kw in T.grid(T.int64(1), T.int64(48), T.int64(14), T.int64(14), T.int64(4), T.int64(1776), T.int64(1), T.int64(1)):
            with T.block("conv2d_NCHWc"):
                v_n, v_oc_chunk, v_oh, v_ow, v_oc_block, v_ic, v_kh, v_kw = T.axis.remap("SSSSSRRR", [n, oc_chunk, oh, ow, oc_block, ic, kh, kw])
                T.reads(p0[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)], p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block])
                T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                with T.init():
                    conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = T.float32(0)
                conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] + p0[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)] * p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block]
        for ax0, ax1, ax2, ax3, ax4 in T.grid(T.int64(1), T.int64(48), T.int64(14), T.int64(14), T.int64(4)):
            with T.block("T_add"):
                v_ax0, v_ax1, v_ax2, v_ax3, v_ax4 = T.axis.remap("SSSSS", [ax0, ax1, ax2, ax3, ax4])
                T.reads(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4])
                T.writes(T_add[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                T_add[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] + p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4]
        for ax0, ax1, ax2, ax3, ax4 in T.grid(T.int64(1), T.int64(48), T.int64(14), T.int64(14), T.int64(4)):
            with T.block("T_relu"):
                v_ax0, v_ax1, v_ax2, v_ax3, v_ax4 = T.axis.remap("SSSSS", [ax0, ax1, ax2, ax3, ax4])
                T.reads(T_add[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                T.writes(T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.max(T_add[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], T.float32(0))
2024-04-29 02:30:21 [INFO] [task_scheduler.cc:164] Total 3 design space(s) generated
2024-04-29 02:30:21 [INFO] [task_scheduler.cc:170] Design space #0:
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(444), T.int64(14), T.int64(14), T.int64(4)), "float32"), p1: T.Buffer((T.int64(48), T.int64(444), T.int64(1), T.int64(1), T.int64(4), T.int64(4)), "float32"), p2: T.Buffer((T.int64(1), T.int64(48), T.int64(1), T.int64(1), T.int64(4)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(48), T.int64(14), T.int64(14), T.int64(4)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        with T.block("root"):
            T.reads()
            T.writes()
            T.block_attr({"meta_schedule.parallel": 768, "meta_schedule.unroll_explicit": 64, "meta_schedule.vectorize": 64})
            conv2d_NCHWc = T.alloc_buffer((T.int64(1), T.int64(48), T.int64(14), T.int64(14), T.int64(4)))
            for n_0, oc_chunk_0, oh_0, ow_0, oc_block_0, n_1, oc_chunk_1, oh_1, ow_1, oc_block_1, ic_0, kh_0, kw_0, n_2, oc_chunk_2, oh_2, ow_2, oc_block_2, ic_1, kh_1, kw_1, n_3, oc_chunk_3, oh_3, ow_3, oc_block_3 in T.grid(T.int64(1), T.int64(8), T.int64(1), T.int64(7), T.int64(4), T.int64(1), T.int64(2), T.int64(1), T.int64(2), T.int64(1), T.int64(296), T.int64(1), T.int64(1), T.int64(1), T.int64(3), T.int64(1), T.int64(1), T.int64(1), T.int64(6), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(14), T.int64(1), T.int64(1)):
                with T.block("conv2d_NCHWc"):
                    v_n = T.axis.spatial(T.int64(1), n_0 + n_1 + n_2 + n_3)
                    v_oc_chunk = T.axis.spatial(T.int64(48), oc_chunk_0 * T.int64(6) + oc_chunk_1 * T.int64(3) + oc_chunk_2 + oc_chunk_3)
                    v_oh = T.axis.spatial(T.int64(14), oh_0 * T.int64(14) + oh_1 * T.int64(14) + oh_2 * T.int64(14) + oh_3)
                    v_ow = T.axis.spatial(T.int64(14), ow_0 * T.int64(2) + ow_1 + ow_2 + ow_3)
                    v_oc_block = T.axis.spatial(T.int64(4), oc_block_0 + oc_block_1 + oc_block_2 + oc_block_3)
                    v_ic = T.axis.reduce(T.int64(1776), ic_0 * T.int64(6) + ic_1)
                    v_kh = T.axis.reduce(T.int64(1), kh_0 + kh_1)
                    v_kw = T.axis.reduce(T.int64(1), kw_0 + kw_1)
                    T.reads(p0[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)], p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block])
                    T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                    T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                    with T.init():
                        conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = T.float32(0)
                    conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] + p0[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)] * p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block]
            for ax0, ax1, ax2, ax3, ax4 in T.grid(T.int64(1), T.int64(48), T.int64(14), T.int64(14), T.int64(4)):
                with T.block("T_relu"):
                    v_ax0, v_ax1, v_ax2, v_ax3, v_ax4 = T.axis.remap("SSSSS", [ax0, ax1, ax2, ax3, ax4])
                    T.reads(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4])
                    T.writes(T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                    T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.max(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] + p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4], T.float32(0))
b0 = sch.get_block(name="conv2d_NCHWc", func_name="main")
b1 = sch.get_block(name="T_add", func_name="main")
b2 = sch.get_block(name="root", func_name="main")
sch.compute_inline(block=b1)
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.tiling_structure", ann_val="SSRSRS")
l3, l4, l5, l6, l7, l8, l9, l10 = sch.get_loops(block=b0)
v11, v12, v13, v14 = sch.sample_perfect_tile(loop=l3, n=4, max_innermost_factor=64, decision=[1, 1, 1, 1])
l15, l16, l17, l18 = sch.split(loop=l3, factors=[v11, v12, v13, v14], preserve_unit_iters=True)
v19, v20, v21, v22 = sch.sample_perfect_tile(loop=l4, n=4, max_innermost_factor=64, decision=[8, 2, 3, 1])
l23, l24, l25, l26 = sch.split(loop=l4, factors=[v19, v20, v21, v22], preserve_unit_iters=True)
v27, v28, v29, v30 = sch.sample_perfect_tile(loop=l5, n=4, max_innermost_factor=64, decision=[1, 1, 1, 14])
l31, l32, l33, l34 = sch.split(loop=l5, factors=[v27, v28, v29, v30], preserve_unit_iters=True)
v35, v36, v37, v38 = sch.sample_perfect_tile(loop=l6, n=4, max_innermost_factor=64, decision=[7, 2, 1, 1])
l39, l40, l41, l42 = sch.split(loop=l6, factors=[v35, v36, v37, v38], preserve_unit_iters=True)
v43, v44, v45, v46 = sch.sample_perfect_tile(loop=l7, n=4, max_innermost_factor=64, decision=[4, 1, 1, 1])
l47, l48, l49, l50 = sch.split(loop=l7, factors=[v43, v44, v45, v46], preserve_unit_iters=True)
v51, v52 = sch.sample_perfect_tile(loop=l8, n=2, max_innermost_factor=64, decision=[296, 6])
l53, l54 = sch.split(loop=l8, factors=[v51, v52], preserve_unit_iters=True)
v55, v56 = sch.sample_perfect_tile(loop=l9, n=2, max_innermost_factor=64, decision=[1, 1])
l57, l58 = sch.split(loop=l9, factors=[v55, v56], preserve_unit_iters=True)
v59, v60 = sch.sample_perfect_tile(loop=l10, n=2, max_innermost_factor=64, decision=[1, 1])
l61, l62 = sch.split(loop=l10, factors=[v59, v60], preserve_unit_iters=True)
sch.reorder(l15, l23, l31, l39, l47, l16, l24, l32, l40, l48, l53, l57, l61, l17, l25, l33, l41, l49, l54, l58, l62, l18, l26, l34, l42, l50)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.vectorize", ann_val=64)
v63 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=2)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.unroll_explicit", ann_val=v63)
2024-04-29 02:30:21 [INFO] [task_scheduler.cc:170] Design space #1:
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(444), T.int64(14), T.int64(14), T.int64(4)), "float32"), p1: T.Buffer((T.int64(48), T.int64(444), T.int64(1), T.int64(1), T.int64(4), T.int64(4)), "float32"), p2: T.Buffer((T.int64(1), T.int64(48), T.int64(1), T.int64(1), T.int64(4)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(48), T.int64(14), T.int64(14), T.int64(4)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        with T.block("root"):
            T.reads()
            T.writes()
            T.block_attr({"meta_schedule.parallel": 768, "meta_schedule.unroll_explicit": 16, "meta_schedule.vectorize": 64})
            conv2d_NCHWc = T.alloc_buffer((T.int64(1), T.int64(48), T.int64(14), T.int64(14), T.int64(4)))
            for n_0, oc_chunk_0, oh_0, ow_0, oc_block_0, n_1, oc_chunk_1, oh_1, ow_1, oc_block_1 in T.grid(T.int64(1), T.int64(8), T.int64(1), T.int64(7), T.int64(4), T.int64(1), T.int64(2), T.int64(1), T.int64(2), T.int64(1)):
                for ic_0, kh_0, kw_0, n_2, oc_chunk_2, oh_2, ow_2, oc_block_2, ic_1, kh_1, kw_1, n_3, oc_chunk_3, oh_3, ow_3, oc_block_3 in T.grid(T.int64(296), T.int64(1), T.int64(1), T.int64(1), T.int64(3), T.int64(1), T.int64(1), T.int64(1), T.int64(6), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(14), T.int64(1), T.int64(1)):
                    with T.block("conv2d_NCHWc"):
                        v_n = T.axis.spatial(T.int64(1), n_0 + n_1 + n_2 + n_3)
                        v_oc_chunk = T.axis.spatial(T.int64(48), oc_chunk_0 * T.int64(6) + oc_chunk_1 * T.int64(3) + oc_chunk_2 + oc_chunk_3)
                        v_oh = T.axis.spatial(T.int64(14), oh_0 * T.int64(14) + oh_1 * T.int64(14) + oh_2 * T.int64(14) + oh_3)
                        v_ow = T.axis.spatial(T.int64(14), ow_0 * T.int64(2) + ow_1 + ow_2 + ow_3)
                        v_oc_block = T.axis.spatial(T.int64(4), oc_block_0 + oc_block_1 + oc_block_2 + oc_block_3)
                        v_ic = T.axis.reduce(T.int64(1776), ic_0 * T.int64(6) + ic_1)
                        v_kh = T.axis.reduce(T.int64(1), kh_0 + kh_1)
                        v_kw = T.axis.reduce(T.int64(1), kw_0 + kw_1)
                        T.reads(p0[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)], p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block])
                        T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                        T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                        with T.init():
                            conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = T.float32(0)
                        conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] + p0[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)] * p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block]
                for ax0, ax1, ax2, ax3, ax4 in T.grid(T.int64(1), T.int64(3), T.int64(14), T.int64(1), T.int64(1)):
                    with T.block("T_relu"):
                        v_ax0 = T.axis.spatial(T.int64(1), ax0)
                        v_ax1 = T.axis.spatial(T.int64(48), oc_chunk_0 * T.int64(6) + oc_chunk_1 * T.int64(3) + ax1)
                        v_ax2 = T.axis.spatial(T.int64(14), ax2)
                        v_ax3 = T.axis.spatial(T.int64(14), ow_0 * T.int64(2) + ow_1 + ax3)
                        v_ax4 = T.axis.spatial(T.int64(4), oc_block_0 + ax4)
                        T.reads(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4])
                        T.writes(T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                        T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.max(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] + p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4], T.float32(0))
b0 = sch.get_block(name="conv2d_NCHWc", func_name="main")
b1 = sch.get_block(name="T_add", func_name="main")
b2 = sch.get_block(name="root", func_name="main")
sch.compute_inline(block=b1)
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.tiling_structure", ann_val="SSRSRS")
l3, l4, l5, l6, l7, l8, l9, l10 = sch.get_loops(block=b0)
v11, v12, v13, v14 = sch.sample_perfect_tile(loop=l3, n=4, max_innermost_factor=64, decision=[1, 1, 1, 1])
l15, l16, l17, l18 = sch.split(loop=l3, factors=[v11, v12, v13, v14], preserve_unit_iters=True)
v19, v20, v21, v22 = sch.sample_perfect_tile(loop=l4, n=4, max_innermost_factor=64, decision=[8, 2, 3, 1])
l23, l24, l25, l26 = sch.split(loop=l4, factors=[v19, v20, v21, v22], preserve_unit_iters=True)
v27, v28, v29, v30 = sch.sample_perfect_tile(loop=l5, n=4, max_innermost_factor=64, decision=[1, 1, 1, 14])
l31, l32, l33, l34 = sch.split(loop=l5, factors=[v27, v28, v29, v30], preserve_unit_iters=True)
v35, v36, v37, v38 = sch.sample_perfect_tile(loop=l6, n=4, max_innermost_factor=64, decision=[7, 2, 1, 1])
l39, l40, l41, l42 = sch.split(loop=l6, factors=[v35, v36, v37, v38], preserve_unit_iters=True)
v43, v44, v45, v46 = sch.sample_perfect_tile(loop=l7, n=4, max_innermost_factor=64, decision=[4, 1, 1, 1])
l47, l48, l49, l50 = sch.split(loop=l7, factors=[v43, v44, v45, v46], preserve_unit_iters=True)
v51, v52 = sch.sample_perfect_tile(loop=l8, n=2, max_innermost_factor=64, decision=[296, 6])
l53, l54 = sch.split(loop=l8, factors=[v51, v52], preserve_unit_iters=True)
v55, v56 = sch.sample_perfect_tile(loop=l9, n=2, max_innermost_factor=64, decision=[1, 1])
l57, l58 = sch.split(loop=l9, factors=[v55, v56], preserve_unit_iters=True)
v59, v60 = sch.sample_perfect_tile(loop=l10, n=2, max_innermost_factor=64, decision=[1, 1])
l61, l62 = sch.split(loop=l10, factors=[v59, v60], preserve_unit_iters=True)
sch.reorder(l15, l23, l31, l39, l47, l16, l24, l32, l40, l48, l53, l57, l61, l17, l25, l33, l41, l49, l54, l58, l62, l18, l26, l34, l42, l50)
b63, = sch.get_consumers(block=b0)
sch.reverse_compute_at(block=b63, loop=l48, preserve_unit_loops=True, index=-1)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.vectorize", ann_val=64)
v64 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=1)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.unroll_explicit", ann_val=v64)
2024-04-29 02:30:21 [INFO] [task_scheduler.cc:170] Design space #2:
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(444), T.int64(14), T.int64(14), T.int64(4)), "float32"), p1: T.Buffer((T.int64(48), T.int64(444), T.int64(1), T.int64(1), T.int64(4), T.int64(4)), "float32"), p2: T.Buffer((T.int64(1), T.int64(48), T.int64(1), T.int64(1), T.int64(4)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(48), T.int64(14), T.int64(14), T.int64(4)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        with T.block("root"):
            T.reads()
            T.writes()
            T.block_attr({"meta_schedule.parallel": 768, "meta_schedule.unroll_explicit": 64, "meta_schedule.vectorize": 64})
            conv2d_NCHWc = T.alloc_buffer((T.int64(1), T.int64(48), T.int64(14), T.int64(14), T.int64(4)))
            for n_0, oc_chunk_0, oh_0, ow_0, oc_block_0 in T.grid(T.int64(1), T.int64(8), T.int64(1), T.int64(7), T.int64(4)):
                for n_1, oc_chunk_1, oh_1, ow_1, oc_block_1, ic_0, kh_0, kw_0, n_2, oc_chunk_2, oh_2, ow_2, oc_block_2, ic_1, kh_1, kw_1, n_3, oc_chunk_3, oh_3, ow_3, oc_block_3 in T.grid(T.int64(1), T.int64(2), T.int64(1), T.int64(2), T.int64(1), T.int64(296), T.int64(1), T.int64(1), T.int64(1), T.int64(3), T.int64(1), T.int64(1), T.int64(1), T.int64(6), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(14), T.int64(1), T.int64(1)):
                    with T.block("conv2d_NCHWc"):
                        v_n = T.axis.spatial(T.int64(1), n_0 + n_1 + n_2 + n_3)
                        v_oc_chunk = T.axis.spatial(T.int64(48), oc_chunk_0 * T.int64(6) + oc_chunk_1 * T.int64(3) + oc_chunk_2 + oc_chunk_3)
                        v_oh = T.axis.spatial(T.int64(14), oh_0 * T.int64(14) + oh_1 * T.int64(14) + oh_2 * T.int64(14) + oh_3)
                        v_ow = T.axis.spatial(T.int64(14), ow_0 * T.int64(2) + ow_1 + ow_2 + ow_3)
                        v_oc_block = T.axis.spatial(T.int64(4), oc_block_0 + oc_block_1 + oc_block_2 + oc_block_3)
                        v_ic = T.axis.reduce(T.int64(1776), ic_0 * T.int64(6) + ic_1)
                        v_kh = T.axis.reduce(T.int64(1), kh_0 + kh_1)
                        v_kw = T.axis.reduce(T.int64(1), kw_0 + kw_1)
                        T.reads(p0[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)], p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block])
                        T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                        T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                        with T.init():
                            conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = T.float32(0)
                        conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] + p0[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)] * p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block]
                for ax0, ax1, ax2, ax3, ax4 in T.grid(T.int64(1), T.int64(6), T.int64(14), T.int64(2), T.int64(1)):
                    with T.block("T_relu"):
                        v_ax0 = T.axis.spatial(T.int64(1), ax0)
                        v_ax1 = T.axis.spatial(T.int64(48), oc_chunk_0 * T.int64(6) + ax1)
                        v_ax2 = T.axis.spatial(T.int64(14), ax2)
                        v_ax3 = T.axis.spatial(T.int64(14), ow_0 * T.int64(2) + ax3)
                        v_ax4 = T.axis.spatial(T.int64(4), oc_block_0 + ax4)
                        T.reads(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4])
                        T.writes(T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                        T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.max(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] + p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4], T.float32(0))
b0 = sch.get_block(name="conv2d_NCHWc", func_name="main")
b1 = sch.get_block(name="T_add", func_name="main")
b2 = sch.get_block(name="root", func_name="main")
sch.compute_inline(block=b1)
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.tiling_structure", ann_val="SSRSRS")
l3, l4, l5, l6, l7, l8, l9, l10 = sch.get_loops(block=b0)
v11, v12, v13, v14 = sch.sample_perfect_tile(loop=l3, n=4, max_innermost_factor=64, decision=[1, 1, 1, 1])
l15, l16, l17, l18 = sch.split(loop=l3, factors=[v11, v12, v13, v14], preserve_unit_iters=True)
v19, v20, v21, v22 = sch.sample_perfect_tile(loop=l4, n=4, max_innermost_factor=64, decision=[8, 2, 3, 1])
l23, l24, l25, l26 = sch.split(loop=l4, factors=[v19, v20, v21, v22], preserve_unit_iters=True)
v27, v28, v29, v30 = sch.sample_perfect_tile(loop=l5, n=4, max_innermost_factor=64, decision=[1, 1, 1, 14])
l31, l32, l33, l34 = sch.split(loop=l5, factors=[v27, v28, v29, v30], preserve_unit_iters=True)
v35, v36, v37, v38 = sch.sample_perfect_tile(loop=l6, n=4, max_innermost_factor=64, decision=[7, 2, 1, 1])
l39, l40, l41, l42 = sch.split(loop=l6, factors=[v35, v36, v37, v38], preserve_unit_iters=True)
v43, v44, v45, v46 = sch.sample_perfect_tile(loop=l7, n=4, max_innermost_factor=64, decision=[4, 1, 1, 1])
l47, l48, l49, l50 = sch.split(loop=l7, factors=[v43, v44, v45, v46], preserve_unit_iters=True)
v51, v52 = sch.sample_perfect_tile(loop=l8, n=2, max_innermost_factor=64, decision=[296, 6])
l53, l54 = sch.split(loop=l8, factors=[v51, v52], preserve_unit_iters=True)
v55, v56 = sch.sample_perfect_tile(loop=l9, n=2, max_innermost_factor=64, decision=[1, 1])
l57, l58 = sch.split(loop=l9, factors=[v55, v56], preserve_unit_iters=True)
v59, v60 = sch.sample_perfect_tile(loop=l10, n=2, max_innermost_factor=64, decision=[1, 1])
l61, l62 = sch.split(loop=l10, factors=[v59, v60], preserve_unit_iters=True)
sch.reorder(l15, l23, l31, l39, l47, l16, l24, l32, l40, l48, l53, l57, l61, l17, l25, l33, l41, l49, l54, l58, l62, l18, l26, l34, l42, l50)
b63, = sch.get_consumers(block=b0)
sch.reverse_compute_at(block=b63, loop=l47, preserve_unit_loops=True, index=-1)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.vectorize", ann_val=64)
v64 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=2)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.unroll_explicit", ann_val=v64)
2024-04-29 03:21:31 [INFO] [evolutionary_search.cc:713] Generating candidates......
2024-04-29 03:21:31 [INFO] [evolutionary_search.cc:715] Picked top 0 candidate(s) from database
2024-04-29 03:21:33 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0xba40da8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x5c63588)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0xc0468a8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0xc7c6cf8)]: 0 failure(s)
2024-04-29 03:21:33 [INFO] [evolutionary_search.cc:723] Sampled 512 candidate(s)
2024-04-29 03:21:36 [INFO] [evolutionary_search.cc:621] Evolve iter #0 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0xba40da8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x5c63588)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0xc0468a8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0xc7c6cf8)]: 0 failure(s)
2024-04-29 03:21:39 [INFO] [evolutionary_search.cc:621] Evolve iter #1 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0xba40da8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x5c63588)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0xc0468a8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0xc7c6cf8)]: 0 failure(s)
2024-04-29 03:21:42 [INFO] [evolutionary_search.cc:621] Evolve iter #2 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0xba40da8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x5c63588)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0xc0468a8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0xc7c6cf8)]: 0 failure(s)
2024-04-29 03:21:45 [INFO] [evolutionary_search.cc:621] Evolve iter #3 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0xba40da8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x5c63588)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0xc0468a8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0xc7c6cf8)]: 0 failure(s)
2024-04-29 03:21:46 [INFO] [evolutionary_search.cc:649] Scores of the best 64 candidates:
[1 : 16]:	0.9974  0.9972  0.9971  0.9971  0.9968  0.9952  0.9945  0.9944  0.9943  0.9940  0.9922  0.9922  0.9920  0.9919  0.9919  0.9918
[17 : 32]:	0.9907  0.9891  0.9891  0.9876  0.9874  0.9872  0.9871  0.9867  0.9858  0.9846  0.9830  0.9827  0.9818  0.9817  0.9805  0.9796
[33 : 48]:	0.9786  0.9783  0.9782  0.9778  0.9777  0.9774  0.9774  0.9770  0.9770  0.9761  0.9754  0.9748  0.9744  0.9743  0.9735  0.9734
[49 : 64]:	0.9732  0.9723  0.9719  0.9693  0.9677  0.9675  0.9673  0.9673  0.9667  0.9666  0.9663  0.9658  0.9639  0.9636  0.9636  0.9629
2024-04-29 03:21:46 [INFO] [evolutionary_search.cc:727] Got 64 candidate(s) with evolutionary search
2024-04-29 03:21:46 [INFO] [evolutionary_search.cc:730] Sending 64 candidates(s) for measurement
2024-04-29 05:05:15 [INFO] [task_scheduler.cc:131] [Task #31: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_30] Trial #1: GFLOPs: 17.5214. Time: 7633.1674 us. Best GFLOPs: 17.5214
2024-04-29 05:05:16 [INFO] [task_scheduler.cc:121] [Task #31: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_30] Trial #2: Error in building:
LocalBuilder: Timeout, killed after 30.0 seconds
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(444), T.int64(14), T.int64(14), T.int64(4)), "float32"), p1: T.Buffer((T.int64(48), T.int64(444), T.int64(1), T.int64(1), T.int64(4), T.int64(4)), "float32"), p2: T.Buffer((T.int64(1), T.int64(48), T.int64(1), T.int64(1), T.int64(4)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(48), T.int64(14), T.int64(14), T.int64(4)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        conv2d_NCHWc = T.alloc_buffer((T.int64(1), T.int64(48), T.int64(14), T.int64(14), T.int64(4)))
        for n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_fused in T.parallel(T.int64(2), annotations={"pragma_auto_unroll_max_step": 512, "pragma_unroll_explicit": 1}):
            for n_1, oc_chunk_1, oh_1, ow_1, oc_block_1 in T.grid(T.int64(1), T.int64(3), T.int64(7), T.int64(2), T.int64(1)):
                for n_2_init, oc_chunk_2_init, oh_2_init, ow_2_init, oc_block_2_init, n_3_init, oc_chunk_3_init, oh_3_init, ow_3_init in T.grid(T.int64(1), T.int64(16), T.int64(1), T.int64(7), T.int64(2), T.int64(1), T.int64(1), T.int64(1), T.int64(1)):
                    for oc_block_3_fused_init in T.vectorized(T.int64(2)):
                        with T.block("conv2d_NCHWc_init"):
                            v_n = T.axis.spatial(T.int64(1), n_1 + n_2_init + n_3_init)
                            v_oc_chunk = T.axis.spatial(T.int64(48), oc_chunk_1 * T.int64(16) + oc_chunk_2_init + oc_chunk_3_init)
                            v_oh = T.axis.spatial(T.int64(14), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_fused * T.int64(7) + oh_1 + oh_2_init + oh_3_init)
                            v_ow = T.axis.spatial(T.int64(14), ow_1 * T.int64(7) + ow_2_init + ow_3_init)
                            v_oc_block = T.axis.spatial(T.int64(4), oc_block_1 * T.int64(4) + oc_block_2_init * T.int64(2) + oc_block_3_fused_init)
                            T.reads()
                            T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                            T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                            conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = T.float32(0)
                for ic_0, kh_0, kw_0, n_2, oc_chunk_2, oh_2, ow_2, oc_block_2, ic_1, kh_1, kw_1, n_3, oc_chunk_3, oh_3, ow_3 in T.grid(T.int64(148), T.int64(1), T.int64(1), T.int64(1), T.int64(16), T.int64(1), T.int64(7), T.int64(2), T.int64(12), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1)):
                    for oc_block_3_fused in T.vectorized(T.int64(2)):
                        with T.block("conv2d_NCHWc_update"):
                            v_n = T.axis.spatial(T.int64(1), n_1 + n_2 + n_3)
                            v_oc_chunk = T.axis.spatial(T.int64(48), oc_chunk_1 * T.int64(16) + oc_chunk_2 + oc_chunk_3)
                            v_oh = T.axis.spatial(T.int64(14), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_fused * T.int64(7) + oh_1 + oh_2 + oh_3)
                            v_ow = T.axis.spatial(T.int64(14), ow_1 * T.int64(7) + ow_2 + ow_3)
                            v_oc_block = T.axis.spatial(T.int64(4), oc_block_1 * T.int64(4) + oc_block_2 * T.int64(2) + oc_block_3_fused)
                            v_ic = T.axis.reduce(T.int64(1776), ic_0 * T.int64(12) + ic_1)
                            v_kh = T.axis.reduce(T.int64(1), kh_0 + kh_1)
                            v_kw = T.axis.reduce(T.int64(1), kw_0 + kw_1)
                            T.reads(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block], p0[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)], p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block])
                            T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                            T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                            conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] + p0[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)] * p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block]
            for ax0, ax1, ax2 in T.grid(T.int64(1), T.int64(48), T.int64(7)):
                for ax3_ax4_fused in T.vectorized(T.int64(56)):
                    with T.block("T_relu"):
                        v_ax0, v_ax1 = T.axis.remap("SS", [ax0, ax1])
                        v_ax2 = T.axis.spatial(T.int64(14), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_fused * T.int64(7) + ax2)
                        v_ax3 = T.axis.spatial(T.int64(14), ax3_ax4_fused // T.int64(4))
                        v_ax4 = T.axis.spatial(T.int64(4), ax3_ax4_fused % T.int64(4))
                        T.reads(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4])
                        T.writes(T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                        T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.max(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] + p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4], T.float32(0))
b0 = sch.get_block(name="conv2d_NCHWc", func_name="main")
b1 = sch.get_block(name="T_add", func_name="main")
b2 = sch.get_block(name="root", func_name="main")
sch.compute_inline(block=b1)
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.tiling_structure", ann_val="SSRSRS")
l3, l4, l5, l6, l7, l8, l9, l10 = sch.get_loops(block=b0)
v11, v12, v13, v14 = sch.sample_perfect_tile(loop=l3, n=4, max_innermost_factor=64, decision=[1, 1, 1, 1])
l15, l16, l17, l18 = sch.split(loop=l3, factors=[v11, v12, v13, v14], preserve_unit_iters=True)
v19, v20, v21, v22 = sch.sample_perfect_tile(loop=l4, n=4, max_innermost_factor=64, decision=[1, 3, 16, 1])
l23, l24, l25, l26 = sch.split(loop=l4, factors=[v19, v20, v21, v22], preserve_unit_iters=True)
v27, v28, v29, v30 = sch.sample_perfect_tile(loop=l5, n=4, max_innermost_factor=64, decision=[2, 7, 1, 1])
l31, l32, l33, l34 = sch.split(loop=l5, factors=[v27, v28, v29, v30], preserve_unit_iters=True)
v35, v36, v37, v38 = sch.sample_perfect_tile(loop=l6, n=4, max_innermost_factor=64, decision=[1, 2, 7, 1])
l39, l40, l41, l42 = sch.split(loop=l6, factors=[v35, v36, v37, v38], preserve_unit_iters=True)
v43, v44, v45, v46 = sch.sample_perfect_tile(loop=l7, n=4, max_innermost_factor=64, decision=[1, 1, 2, 2])
l47, l48, l49, l50 = sch.split(loop=l7, factors=[v43, v44, v45, v46], preserve_unit_iters=True)
v51, v52 = sch.sample_perfect_tile(loop=l8, n=2, max_innermost_factor=64, decision=[148, 12])
l53, l54 = sch.split(loop=l8, factors=[v51, v52], preserve_unit_iters=True)
v55, v56 = sch.sample_perfect_tile(loop=l9, n=2, max_innermost_factor=64, decision=[1, 1])
l57, l58 = sch.split(loop=l9, factors=[v55, v56], preserve_unit_iters=True)
v59, v60 = sch.sample_perfect_tile(loop=l10, n=2, max_innermost_factor=64, decision=[1, 1])
l61, l62 = sch.split(loop=l10, factors=[v59, v60], preserve_unit_iters=True)
sch.reorder(l15, l23, l31, l39, l47, l16, l24, l32, l40, l48, l53, l57, l61, l17, l25, l33, l41, l49, l54, l58, l62, l18, l26, l34, l42, l50)
b63, = sch.get_consumers(block=b0)
sch.reverse_compute_at(block=b63, loop=l47, preserve_unit_loops=True, index=-1)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.vectorize", ann_val=64)
v64 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.unroll_explicit", ann_val=v64)
sch.enter_postproc()
b65 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b65, ann_key="meta_schedule.parallel")
sch.unannotate(block_or_loop=b65, ann_key="meta_schedule.vectorize")
sch.unannotate(block_or_loop=b65, ann_key="meta_schedule.unroll_explicit")
b66, b67 = sch.get_child_blocks(b65)
l68, l69, l70, l71, l72, l73, l74, l75, l76, l77, l78, l79, l80, l81, l82, l83, l84, l85, l86, l87, l88, l89, l90, l91, l92, l93 = sch.get_loops(block=b66)
l94 = sch.fuse(l68, l69, l70, l71, l72, preserve_unit_iters=True)
sch.parallel(loop=l94)
l95 = sch.fuse(l93, preserve_unit_iters=True)
sch.vectorize(loop=l95)
sch.annotate(block_or_loop=l94, ann_key="pragma_auto_unroll_max_step", ann_val=512)
sch.annotate(block_or_loop=l94, ann_key="pragma_unroll_explicit", ann_val=1)
l96, l97, l98, l99, l100, l101 = sch.get_loops(block=b67)
l102 = sch.fuse(l100, l101, preserve_unit_iters=True)
sch.vectorize(loop=l102)
b103 = sch.get_block(name="conv2d_NCHWc", func_name="main")
l104, l105, l106, l107, l108, l109, l110, l111, l112, l113, l114, l115, l116, l117, l118, l119, l120, l121, l122, l123, l124, l125 = sch.get_loops(block=b103)
b126 = sch.decompose_reduction(block=b103, loop=l110)
2024-04-29 05:05:16 [INFO] [task_scheduler.cc:131] [Task #31: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_30] Trial #3: GFLOPs: 77.4218. Time: 1727.4747 us. Best GFLOPs: 77.4218
2024-04-29 05:05:16 [INFO] [task_scheduler.cc:131] [Task #31: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_30] Trial #4: GFLOPs: 87.4456. Time: 1529.4548 us. Best GFLOPs: 87.4456
2024-04-29 05:05:16 [INFO] [task_scheduler.cc:131] [Task #31: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_30] Trial #5: GFLOPs: 38.0572. Time: 3514.2953 us. Best GFLOPs: 87.4456
2024-04-29 05:05:16 [INFO] [task_scheduler.cc:131] [Task #31: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_30] Trial #6: GFLOPs: 1.5500. Time: 86284.0343 us. Best GFLOPs: 87.4456
2024-04-29 05:05:16 [INFO] [task_scheduler.cc:131] [Task #31: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_30] Trial #7: GFLOPs: 113.1410. Time: 1182.1012 us. Best GFLOPs: 113.1410
2024-04-29 05:05:16 [INFO] [task_scheduler.cc:131] [Task #31: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_30] Trial #8: GFLOPs: 77.2233. Time: 1731.9151 us. Best GFLOPs: 113.1410
2024-04-29 05:05:16 [INFO] [task_scheduler.cc:131] [Task #31: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_30] Trial #9: GFLOPs: 96.3870. Time: 1387.5738 us. Best GFLOPs: 113.1410
2024-04-29 05:05:16 [INFO] [task_scheduler.cc:131] [Task #31: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_30] Trial #10: GFLOPs: 79.5539. Time: 1681.1762 us. Best GFLOPs: 113.1410
2024-04-29 05:05:16 [INFO] [task_scheduler.cc:121] [Task #31: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_30] Trial #11: Error in building:
LocalBuilder: Timeout, killed after 30.0 seconds
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(444), T.int64(14), T.int64(14), T.int64(4)), "float32"), p1: T.Buffer((T.int64(48), T.int64(444), T.int64(1), T.int64(1), T.int64(4), T.int64(4)), "float32"), p2: T.Buffer((T.int64(1), T.int64(48), T.int64(1), T.int64(1), T.int64(4)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(48), T.int64(14), T.int64(14), T.int64(4)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        conv2d_NCHWc = T.alloc_buffer((T.int64(1), T.int64(48), T.int64(14), T.int64(14), T.int64(4)))
        for n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused in T.parallel(T.int64(21), annotations={"pragma_auto_unroll_max_step": 512, "pragma_unroll_explicit": 1}):
            for n_2_init, oc_chunk_2_init, oh_2_init, ow_2_init, oc_block_2_init, n_3_init, oc_chunk_3_init, oh_3_init, ow_3_init, oc_block_3_init in T.grid(T.int64(1), T.int64(2), T.int64(1), T.int64(1), T.int64(4), T.int64(1), T.int64(8), T.int64(2), T.int64(14), T.int64(1)):
                with T.block("conv2d_NCHWc_init"):
                    v_n = T.axis.spatial(T.int64(1), n_2_init + n_3_init)
                    v_oc_chunk = T.axis.spatial(T.int64(48), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused // T.int64(7) * T.int64(16) + oc_chunk_2_init * T.int64(8) + oc_chunk_3_init)
                    v_oh = T.axis.spatial(T.int64(14), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused % T.int64(7) * T.int64(2) + oh_2_init * T.int64(2) + oh_3_init)
                    v_ow = T.axis.spatial(T.int64(14), ow_2_init * T.int64(14) + ow_3_init)
                    v_oc_block = T.axis.spatial(T.int64(4), oc_block_2_init + oc_block_3_init)
                    T.reads()
                    T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                    T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                    conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = T.float32(0)
            for ic_0, kh_0, kw_0, n_2, oc_chunk_2, oh_2, ow_2, oc_block_2, ic_1, kh_1, kw_1, n_3, oc_chunk_3, oh_3, ow_3, oc_block_3 in T.grid(T.int64(37), T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(1), T.int64(1), T.int64(4), T.int64(48), T.int64(1), T.int64(1), T.int64(1), T.int64(8), T.int64(2), T.int64(14), T.int64(1)):
                with T.block("conv2d_NCHWc_update"):
                    v_n = T.axis.spatial(T.int64(1), n_2 + n_3)
                    v_oc_chunk = T.axis.spatial(T.int64(48), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused // T.int64(7) * T.int64(16) + oc_chunk_2 * T.int64(8) + oc_chunk_3)
                    v_oh = T.axis.spatial(T.int64(14), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused % T.int64(7) * T.int64(2) + oh_2 * T.int64(2) + oh_3)
                    v_ow = T.axis.spatial(T.int64(14), ow_2 * T.int64(14) + ow_3)
                    v_oc_block = T.axis.spatial(T.int64(4), oc_block_2 + oc_block_3)
                    v_ic = T.axis.reduce(T.int64(1776), ic_0 * T.int64(48) + ic_1)
                    v_kh = T.axis.reduce(T.int64(1), kh_0 + kh_1)
                    v_kw = T.axis.reduce(T.int64(1), kw_0 + kw_1)
                    T.reads(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block], p0[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)], p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block])
                    T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                    T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                    conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] + p0[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)] * p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block]
            for ax0, ax1, ax2 in T.grid(T.int64(1), T.int64(16), T.int64(2)):
                for ax3_ax4_fused in T.vectorized(T.int64(56)):
                    with T.block("T_relu"):
                        v_ax0 = T.axis.spatial(T.int64(1), ax0)
                        v_ax1 = T.axis.spatial(T.int64(48), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused // T.int64(7) * T.int64(16) + ax1)
                        v_ax2 = T.axis.spatial(T.int64(14), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused % T.int64(7) * T.int64(2) + ax2)
                        v_ax3 = T.axis.spatial(T.int64(14), ax3_ax4_fused // T.int64(4))
                        v_ax4 = T.axis.spatial(T.int64(4), ax3_ax4_fused % T.int64(4))
                        T.reads(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4])
                        T.writes(T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                        T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.max(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] + p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4], T.float32(0))
b0 = sch.get_block(name="conv2d_NCHWc", func_name="main")
b1 = sch.get_block(name="T_add", func_name="main")
b2 = sch.get_block(name="root", func_name="main")
sch.compute_inline(block=b1)
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.tiling_structure", ann_val="SSRSRS")
l3, l4, l5, l6, l7, l8, l9, l10 = sch.get_loops(block=b0)
v11, v12, v13, v14 = sch.sample_perfect_tile(loop=l3, n=4, max_innermost_factor=64, decision=[1, 1, 1, 1])
l15, l16, l17, l18 = sch.split(loop=l3, factors=[v11, v12, v13, v14], preserve_unit_iters=True)
v19, v20, v21, v22 = sch.sample_perfect_tile(loop=l4, n=4, max_innermost_factor=64, decision=[1, 3, 2, 8])
l23, l24, l25, l26 = sch.split(loop=l4, factors=[v19, v20, v21, v22], preserve_unit_iters=True)
v27, v28, v29, v30 = sch.sample_perfect_tile(loop=l5, n=4, max_innermost_factor=64, decision=[1, 7, 1, 2])
l31, l32, l33, l34 = sch.split(loop=l5, factors=[v27, v28, v29, v30], preserve_unit_iters=True)
v35, v36, v37, v38 = sch.sample_perfect_tile(loop=l6, n=4, max_innermost_factor=64, decision=[1, 1, 1, 14])
l39, l40, l41, l42 = sch.split(loop=l6, factors=[v35, v36, v37, v38], preserve_unit_iters=True)
v43, v44, v45, v46 = sch.sample_perfect_tile(loop=l7, n=4, max_innermost_factor=64, decision=[1, 1, 4, 1])
l47, l48, l49, l50 = sch.split(loop=l7, factors=[v43, v44, v45, v46], preserve_unit_iters=True)
v51, v52 = sch.sample_perfect_tile(loop=l8, n=2, max_innermost_factor=64, decision=[37, 48])
l53, l54 = sch.split(loop=l8, factors=[v51, v52], preserve_unit_iters=True)
v55, v56 = sch.sample_perfect_tile(loop=l9, n=2, max_innermost_factor=64, decision=[1, 1])
l57, l58 = sch.split(loop=l9, factors=[v55, v56], preserve_unit_iters=True)
v59, v60 = sch.sample_perfect_tile(loop=l10, n=2, max_innermost_factor=64, decision=[1, 1])
l61, l62 = sch.split(loop=l10, factors=[v59, v60], preserve_unit_iters=True)
sch.reorder(l15, l23, l31, l39, l47, l16, l24, l32, l40, l48, l53, l57, l61, l17, l25, l33, l41, l49, l54, l58, l62, l18, l26, l34, l42, l50)
b63, = sch.get_consumers(block=b0)
sch.reverse_compute_at(block=b63, loop=l48, preserve_unit_loops=True, index=-1)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.vectorize", ann_val=64)
v64 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.unroll_explicit", ann_val=v64)
sch.enter_postproc()
b65 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b65, ann_key="meta_schedule.parallel")
sch.unannotate(block_or_loop=b65, ann_key="meta_schedule.vectorize")
sch.unannotate(block_or_loop=b65, ann_key="meta_schedule.unroll_explicit")
b66, b67 = sch.get_child_blocks(b65)
l68, l69, l70, l71, l72, l73, l74, l75, l76, l77, l78, l79, l80, l81, l82, l83, l84, l85, l86, l87, l88, l89, l90, l91, l92, l93 = sch.get_loops(block=b66)
l94 = sch.fuse(l68, l69, l70, l71, l72, l73, l74, l75, l76, l77, preserve_unit_iters=True)
sch.parallel(loop=l94)
sch.annotate(block_or_loop=l94, ann_key="pragma_auto_unroll_max_step", ann_val=512)
sch.annotate(block_or_loop=l94, ann_key="pragma_unroll_explicit", ann_val=1)
l95, l96, l97, l98, l99, l100 = sch.get_loops(block=b67)
l101 = sch.fuse(l99, l100, preserve_unit_iters=True)
sch.vectorize(loop=l101)
b102 = sch.get_block(name="conv2d_NCHWc", func_name="main")
l103, l104, l105, l106, l107, l108, l109, l110, l111, l112, l113, l114, l115, l116, l117, l118, l119 = sch.get_loops(block=b102)
b120 = sch.decompose_reduction(block=b102, loop=l104)
2024-04-29 05:05:16 [INFO] [task_scheduler.cc:131] [Task #31: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_30] Trial #12: GFLOPs: 78.8413. Time: 1696.3710 us. Best GFLOPs: 113.1410
2024-04-29 05:05:16 [INFO] [task_scheduler.cc:131] [Task #31: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_30] Trial #13: GFLOPs: 8.3527. Time: 16012.0317 us. Best GFLOPs: 113.1410
2024-04-29 05:05:16 [INFO] [task_scheduler.cc:131] [Task #31: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_30] Trial #14: GFLOPs: 32.4513. Time: 4121.3856 us. Best GFLOPs: 113.1410
2024-04-29 05:05:16 [INFO] [task_scheduler.cc:131] [Task #31: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_30] Trial #15: GFLOPs: 66.1852. Time: 2020.7562 us. Best GFLOPs: 113.1410
2024-04-29 05:05:16 [INFO] [task_scheduler.cc:131] [Task #31: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_30] Trial #16: GFLOPs: 0.2923. Time: 457622.9750 us. Best GFLOPs: 113.1410
2024-04-29 05:05:16 [INFO] [task_scheduler.cc:131] [Task #31: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_30] Trial #17: GFLOPs: 6.5988. Time: 20267.8346 us. Best GFLOPs: 113.1410
2024-04-29 05:05:16 [INFO] [task_scheduler.cc:131] [Task #31: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_30] Trial #18: GFLOPs: 31.4078. Time: 4258.3042 us. Best GFLOPs: 113.1410
2024-04-29 05:05:16 [INFO] [task_scheduler.cc:131] [Task #31: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_30] Trial #19: GFLOPs: 41.7180. Time: 3205.9058 us. Best GFLOPs: 113.1410
2024-04-29 05:05:16 [INFO] [task_scheduler.cc:131] [Task #31: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_30] Trial #20: GFLOPs: 68.3861. Time: 1955.7214 us. Best GFLOPs: 113.1410
2024-04-29 05:05:16 [INFO] [task_scheduler.cc:131] [Task #31: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_30] Trial #21: GFLOPs: 40.7770. Time: 3279.8904 us. Best GFLOPs: 113.1410
2024-04-29 05:05:16 [INFO] [task_scheduler.cc:131] [Task #31: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_30] Trial #22: GFLOPs: 44.6807. Time: 2993.3326 us. Best GFLOPs: 113.1410
2024-04-29 05:05:16 [INFO] [task_scheduler.cc:131] [Task #31: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_30] Trial #23: GFLOPs: 25.5417. Time: 5236.3061 us. Best GFLOPs: 113.1410
2024-04-29 05:05:16 [INFO] [task_scheduler.cc:131] [Task #31: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_30] Trial #24: GFLOPs: 47.4565. Time: 2818.2465 us. Best GFLOPs: 113.1410
2024-04-29 05:05:16 [INFO] [task_scheduler.cc:131] [Task #31: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_30] Trial #25: GFLOPs: 1.1050. Time: 121034.2007 us. Best GFLOPs: 113.1410
2024-04-29 05:05:16 [INFO] [task_scheduler.cc:131] [Task #31: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_30] Trial #26: GFLOPs: 115.5690. Time: 1157.2663 us. Best GFLOPs: 115.5690
2024-04-29 05:05:16 [INFO] [task_scheduler.cc:131] [Task #31: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_30] Trial #27: GFLOPs: 31.2850. Time: 4275.0175 us. Best GFLOPs: 115.5690
2024-04-29 05:05:16 [INFO] [task_scheduler.cc:131] [Task #31: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_30] Trial #28: GFLOPs: 89.1567. Time: 1500.1013 us. Best GFLOPs: 115.5690
2024-04-29 05:05:16 [INFO] [task_scheduler.cc:131] [Task #31: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_30] Trial #29: GFLOPs: 1.3696. Time: 97650.2487 us. Best GFLOPs: 115.5690
2024-04-29 05:05:16 [INFO] [task_scheduler.cc:131] [Task #31: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_30] Trial #30: GFLOPs: 1.7684. Time: 75630.5393 us. Best GFLOPs: 115.5690
2024-04-29 05:05:16 [INFO] [task_scheduler.cc:131] [Task #31: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_30] Trial #31: GFLOPs: 18.2798. Time: 7316.5045 us. Best GFLOPs: 115.5690
2024-04-29 05:05:16 [INFO] [task_scheduler.cc:131] [Task #31: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_30] Trial #32: GFLOPs: 7.6390. Time: 17508.0795 us. Best GFLOPs: 115.5690
2024-04-29 05:05:16 [INFO] [task_scheduler.cc:131] [Task #31: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_30] Trial #33: GFLOPs: 99.4858. Time: 1344.3536 us. Best GFLOPs: 115.5690
2024-04-29 05:05:16 [INFO] [task_scheduler.cc:131] [Task #31: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_30] Trial #34: GFLOPs: 34.2627. Time: 3903.4878 us. Best GFLOPs: 115.5690
2024-04-29 05:05:16 [INFO] [task_scheduler.cc:131] [Task #31: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_30] Trial #35: GFLOPs: 79.8083. Time: 1675.8182 us. Best GFLOPs: 115.5690
2024-04-29 05:05:16 [INFO] [task_scheduler.cc:131] [Task #31: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_30] Trial #36: GFLOPs: 91.4187. Time: 1462.9843 us. Best GFLOPs: 115.5690
2024-04-29 05:05:16 [INFO] [task_scheduler.cc:131] [Task #31: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_30] Trial #37: GFLOPs: 46.7882. Time: 2858.5040 us. Best GFLOPs: 115.5690
2024-04-29 05:05:16 [INFO] [task_scheduler.cc:131] [Task #31: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_30] Trial #38: GFLOPs: 18.0519. Time: 7408.8554 us. Best GFLOPs: 115.5690
2024-04-29 05:05:16 [INFO] [task_scheduler.cc:131] [Task #31: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_30] Trial #39: GFLOPs: 44.9757. Time: 2973.6988 us. Best GFLOPs: 115.5690
2024-04-29 05:05:16 [INFO] [task_scheduler.cc:131] [Task #31: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_30] Trial #40: GFLOPs: 25.8406. Time: 5175.7436 us. Best GFLOPs: 115.5690
2024-04-29 05:05:16 [INFO] [task_scheduler.cc:131] [Task #31: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_30] Trial #41: GFLOPs: 40.5393. Time: 3299.1249 us. Best GFLOPs: 115.5690
2024-04-29 05:05:16 [INFO] [task_scheduler.cc:131] [Task #31: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_30] Trial #42: GFLOPs: 62.0552. Time: 2155.2433 us. Best GFLOPs: 115.5690
2024-04-29 05:05:16 [INFO] [task_scheduler.cc:131] [Task #31: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_30] Trial #43: GFLOPs: 27.7934. Time: 4812.0805 us. Best GFLOPs: 115.5690
2024-04-29 05:05:16 [INFO] [task_scheduler.cc:131] [Task #31: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_30] Trial #44: GFLOPs: 99.6448. Time: 1342.2089 us. Best GFLOPs: 115.5690
2024-04-29 05:05:16 [INFO] [task_scheduler.cc:131] [Task #31: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_30] Trial #45: GFLOPs: 63.1421. Time: 2118.1458 us. Best GFLOPs: 115.5690
2024-04-29 05:05:16 [INFO] [task_scheduler.cc:131] [Task #31: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_30] Trial #46: GFLOPs: 10.0261. Time: 13339.6079 us. Best GFLOPs: 115.5690
2024-04-29 05:05:16 [INFO] [task_scheduler.cc:131] [Task #31: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_30] Trial #47: GFLOPs: 17.6550. Time: 7575.4261 us. Best GFLOPs: 115.5690
2024-04-29 05:05:16 [INFO] [task_scheduler.cc:131] [Task #31: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_30] Trial #48: GFLOPs: 3.0414. Time: 43974.5080 us. Best GFLOPs: 115.5690
2024-04-29 05:05:16 [INFO] [task_scheduler.cc:131] [Task #31: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_30] Trial #49: GFLOPs: 47.4335. Time: 2819.6135 us. Best GFLOPs: 115.5690
2024-04-29 05:05:16 [INFO] [task_scheduler.cc:131] [Task #31: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_30] Trial #50: GFLOPs: 83.5596. Time: 1600.5833 us. Best GFLOPs: 115.5690
2024-04-29 05:05:16 [INFO] [task_scheduler.cc:131] [Task #31: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_30] Trial #51: GFLOPs: 86.5377. Time: 1545.5017 us. Best GFLOPs: 115.5690
2024-04-29 05:05:16 [INFO] [task_scheduler.cc:131] [Task #31: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_30] Trial #52: GFLOPs: 72.4463. Time: 1846.1145 us. Best GFLOPs: 115.5690
2024-04-29 05:05:16 [INFO] [task_scheduler.cc:131] [Task #31: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_30] Trial #53: GFLOPs: 19.4412. Time: 6879.4319 us. Best GFLOPs: 115.5690
2024-04-29 05:05:16 [INFO] [task_scheduler.cc:131] [Task #31: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_30] Trial #54: GFLOPs: 52.6082. Time: 2542.2664 us. Best GFLOPs: 115.5690
2024-04-29 05:05:16 [INFO] [task_scheduler.cc:131] [Task #31: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_30] Trial #55: GFLOPs: 23.2874. Time: 5743.1889 us. Best GFLOPs: 115.5690
2024-04-29 05:05:16 [INFO] [task_scheduler.cc:131] [Task #31: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_30] Trial #56: GFLOPs: 161.4926. Time: 828.1751 us. Best GFLOPs: 161.4926
2024-04-29 05:05:16 [INFO] [task_scheduler.cc:131] [Task #31: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_30] Trial #57: GFLOPs: 1.9243. Time: 69503.4730 us. Best GFLOPs: 161.4926
2024-04-29 05:05:16 [INFO] [task_scheduler.cc:131] [Task #31: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_30] Trial #58: GFLOPs: 20.7890. Time: 6433.4236 us. Best GFLOPs: 161.4926
2024-04-29 05:05:16 [INFO] [task_scheduler.cc:131] [Task #31: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_30] Trial #59: GFLOPs: 102.7860. Time: 1301.1902 us. Best GFLOPs: 161.4926
2024-04-29 05:05:16 [INFO] [task_scheduler.cc:131] [Task #31: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_30] Trial #60: GFLOPs: 165.2300. Time: 809.4420 us. Best GFLOPs: 165.2300
2024-04-29 05:05:16 [INFO] [task_scheduler.cc:131] [Task #31: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_30] Trial #61: GFLOPs: 76.0327. Time: 1759.0334 us. Best GFLOPs: 165.2300
2024-04-29 05:05:16 [INFO] [task_scheduler.cc:131] [Task #31: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_30] Trial #62: GFLOPs: 11.5014. Time: 11628.4870 us. Best GFLOPs: 165.2300
2024-04-29 05:05:16 [INFO] [task_scheduler.cc:131] [Task #31: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_30] Trial #63: GFLOPs: 8.9431. Time: 14955.0749 us. Best GFLOPs: 165.2300
2024-04-29 05:05:16 [INFO] [task_scheduler.cc:131] [Task #31: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_30] Trial #64: GFLOPs: 59.5855. Time: 2244.5753 us. Best GFLOPs: 165.2300
2024-04-29 06:52:21 [INFO] [evolutionary_search.cc:713] Generating candidates......
2024-04-29 06:52:22 [INFO] [evolutionary_search.cc:715] Picked top 62 candidate(s) from database
2024-04-29 06:52:24 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0xba40da8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x5c63588)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0xc0468a8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0xc7c6cf8)]: 0 failure(s)
2024-04-29 06:52:24 [INFO] [evolutionary_search.cc:723] Sampled 450 candidate(s)
2024-04-29 06:52:29 [INFO] [evolutionary_search.cc:621] Evolve iter #0 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0xba40da8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x5c63588)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0xc0468a8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0xc7c6cf8)]: 0 failure(s)
2024-04-29 06:52:34 [INFO] [evolutionary_search.cc:621] Evolve iter #1 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0xba40da8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x5c63588)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0xc0468a8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0xc7c6cf8)]: 0 failure(s)
2024-04-29 06:52:40 [INFO] [evolutionary_search.cc:621] Evolve iter #2 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0xba40da8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x5c63588)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0xc0468a8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0xc7c6cf8)]: 0 failure(s)
2024-04-29 06:52:45 [INFO] [evolutionary_search.cc:621] Evolve iter #3 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0xba40da8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x5c63588)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0xc0468a8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0xc7c6cf8)]: 0 failure(s)
2024-04-29 06:52:48 [INFO] [evolutionary_search.cc:649] Scores of the best 64 candidates:
[1 : 16]:	0.9246  0.9218  0.8878  0.8632  0.8590  0.8563  0.8553  0.8295  0.7972  0.7869  0.7814  0.7623  0.7554  0.7482  0.7448  0.7435
[17 : 32]:	0.7400  0.7393  0.7297  0.7286  0.7252  0.7245  0.7223  0.7214  0.7184  0.7139  0.7104  0.7091  0.7088  0.7036  0.7032  0.7010
[33 : 48]:	0.6992  0.6980  0.6968  0.6968  0.6954  0.6914  0.6909  0.6873  0.6858  0.6858  0.6825  0.6820  0.6808  0.6766  0.6759  0.6715
[49 : 64]:	0.6688  0.6634  0.6610  0.6603  0.6592  0.6590  0.6529  0.6504  0.6488  0.6474  0.6455  0.6453  0.6445  0.6401  0.6401  0.6401
2024-04-29 06:52:49 [INFO] [evolutionary_search.cc:727] Got 64 candidate(s) with evolutionary search
2024-04-29 06:52:49 [INFO] [evolutionary_search.cc:730] Sending 64 candidates(s) for measurement
2024-04-29 06:54:24 [INFO] [task_scheduler.cc:131] [Task #31: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_30] Trial #65: GFLOPs: 164.8667. Time: 811.2257 us. Best GFLOPs: 165.2300
2024-04-29 06:54:24 [INFO] [task_scheduler.cc:131] [Task #31: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_30] Trial #66: GFLOPs: 166.0598. Time: 805.3973 us. Best GFLOPs: 166.0598
2024-04-29 06:54:24 [INFO] [task_scheduler.cc:131] [Task #31: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_30] Trial #67: GFLOPs: 169.1756. Time: 790.5641 us. Best GFLOPs: 169.1756
2024-04-29 06:54:24 [INFO] [task_scheduler.cc:131] [Task #31: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_30] Trial #68: GFLOPs: 175.6178. Time: 761.5637 us. Best GFLOPs: 175.6178
2024-04-29 06:54:24 [INFO] [task_scheduler.cc:131] [Task #31: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_30] Trial #69: GFLOPs: 172.0554. Time: 777.3316 us. Best GFLOPs: 175.6178
2024-04-29 06:54:24 [INFO] [task_scheduler.cc:131] [Task #31: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_30] Trial #70: GFLOPs: 173.8388. Time: 769.3571 us. Best GFLOPs: 175.6178
2024-04-29 06:54:24 [INFO] [task_scheduler.cc:131] [Task #31: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_30] Trial #71: GFLOPs: 126.0189. Time: 1061.3018 us. Best GFLOPs: 175.6178
2024-04-29 06:54:24 [INFO] [task_scheduler.cc:131] [Task #31: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_30] Trial #72: GFLOPs: 122.2553. Time: 1093.9745 us. Best GFLOPs: 175.6178
2024-04-29 06:54:24 [INFO] [task_scheduler.cc:131] [Task #31: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_30] Trial #73: GFLOPs: 29.5803. Time: 4521.3912 us. Best GFLOPs: 175.6178
2024-04-29 06:54:24 [INFO] [task_scheduler.cc:131] [Task #31: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_30] Trial #74: GFLOPs: 250.6303. Time: 533.6310 us. Best GFLOPs: 250.6303
2024-04-29 06:54:24 [INFO] [task_scheduler.cc:131] [Task #31: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_30] Trial #75: GFLOPs: 174.6434. Time: 765.8125 us. Best GFLOPs: 250.6303
2024-04-29 06:54:24 [INFO] [task_scheduler.cc:131] [Task #31: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_30] Trial #76: GFLOPs: 148.4557. Time: 900.9024 us. Best GFLOPs: 250.6303
2024-04-29 06:54:24 [INFO] [task_scheduler.cc:131] [Task #31: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_30] Trial #77: GFLOPs: 163.3865. Time: 818.5754 us. Best GFLOPs: 250.6303
2024-04-29 06:54:24 [INFO] [task_scheduler.cc:131] [Task #31: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_30] Trial #78: GFLOPs: 108.8286. Time: 1228.9431 us. Best GFLOPs: 250.6303
2024-04-29 06:54:24 [INFO] [task_scheduler.cc:131] [Task #31: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_30] Trial #79: GFLOPs: 196.7931. Time: 679.6179 us. Best GFLOPs: 250.6303
2024-04-29 06:54:24 [INFO] [task_scheduler.cc:131] [Task #31: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_30] Trial #80: GFLOPs: 133.6351. Time: 1000.8155 us. Best GFLOPs: 250.6303
2024-04-29 06:54:24 [INFO] [task_scheduler.cc:131] [Task #31: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_30] Trial #81: GFLOPs: 178.2495. Time: 750.3197 us. Best GFLOPs: 250.6303
2024-04-29 06:54:24 [INFO] [task_scheduler.cc:131] [Task #31: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_30] Trial #82: GFLOPs: 200.0502. Time: 668.5528 us. Best GFLOPs: 250.6303
2024-04-29 06:54:24 [INFO] [task_scheduler.cc:131] [Task #31: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_30] Trial #83: GFLOPs: 172.0804. Time: 777.2191 us. Best GFLOPs: 250.6303
2024-04-29 06:54:24 [INFO] [task_scheduler.cc:131] [Task #31: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_30] Trial #84: GFLOPs: 138.5318. Time: 965.4396 us. Best GFLOPs: 250.6303
2024-04-29 06:54:24 [INFO] [task_scheduler.cc:131] [Task #31: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_30] Trial #85: GFLOPs: 88.6826. Time: 1508.1209 us. Best GFLOPs: 250.6303
2024-04-29 06:54:24 [INFO] [task_scheduler.cc:131] [Task #31: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_30] Trial #86: GFLOPs: 213.4353. Time: 626.6262 us. Best GFLOPs: 250.6303
2024-04-29 06:54:24 [INFO] [task_scheduler.cc:131] [Task #31: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_30] Trial #87: GFLOPs: 122.6180. Time: 1090.7379 us. Best GFLOPs: 250.6303
2024-04-29 06:54:24 [INFO] [task_scheduler.cc:131] [Task #31: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_30] Trial #88: GFLOPs: 107.2092. Time: 1247.5059 us. Best GFLOPs: 250.6303
2024-04-29 06:54:24 [INFO] [task_scheduler.cc:131] [Task #31: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_30] Trial #89: GFLOPs: 151.6287. Time: 882.0502 us. Best GFLOPs: 250.6303
2024-04-29 06:54:24 [INFO] [task_scheduler.cc:131] [Task #31: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_30] Trial #90: GFLOPs: 198.2148. Time: 674.7433 us. Best GFLOPs: 250.6303
2024-04-29 06:54:24 [INFO] [task_scheduler.cc:131] [Task #31: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_30] Trial #91: GFLOPs: 99.3235. Time: 1346.5507 us. Best GFLOPs: 250.6303
2024-04-29 06:54:24 [INFO] [task_scheduler.cc:131] [Task #31: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_30] Trial #92: GFLOPs: 196.8394. Time: 679.4581 us. Best GFLOPs: 250.6303
2024-04-29 06:54:24 [INFO] [task_scheduler.cc:131] [Task #31: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_30] Trial #93: GFLOPs: 183.1152. Time: 730.3823 us. Best GFLOPs: 250.6303
2024-04-29 06:54:24 [INFO] [task_scheduler.cc:131] [Task #31: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_30] Trial #94: GFLOPs: 140.6591. Time: 950.8390 us. Best GFLOPs: 250.6303
2024-04-29 06:54:24 [INFO] [task_scheduler.cc:131] [Task #31: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_30] Trial #95: GFLOPs: 197.1608. Time: 678.3506 us. Best GFLOPs: 250.6303
2024-04-29 06:54:24 [INFO] [task_scheduler.cc:131] [Task #31: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_30] Trial #96: GFLOPs: 162.6463. Time: 822.3003 us. Best GFLOPs: 250.6303
2024-04-29 06:54:24 [INFO] [task_scheduler.cc:131] [Task #31: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_30] Trial #97: GFLOPs: 98.3071. Time: 1360.4726 us. Best GFLOPs: 250.6303
2024-04-29 06:54:24 [INFO] [task_scheduler.cc:131] [Task #31: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_30] Trial #98: GFLOPs: 391.2889. Time: 341.8040 us. Best GFLOPs: 391.2889
2024-04-29 06:54:24 [INFO] [task_scheduler.cc:131] [Task #31: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_30] Trial #99: GFLOPs: 166.7163. Time: 802.2260 us. Best GFLOPs: 391.2889
2024-04-29 06:54:24 [INFO] [task_scheduler.cc:131] [Task #31: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_30] Trial #100: GFLOPs: 163.8622. Time: 816.1986 us. Best GFLOPs: 391.2889
2024-04-29 06:54:24 [INFO] [task_scheduler.cc:131] [Task #31: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_30] Trial #101: GFLOPs: 192.3072. Time: 695.4713 us. Best GFLOPs: 391.2889
2024-04-29 06:54:24 [INFO] [task_scheduler.cc:131] [Task #31: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_30] Trial #102: GFLOPs: 118.9554. Time: 1124.3217 us. Best GFLOPs: 391.2889
2024-04-29 06:54:24 [INFO] [task_scheduler.cc:131] [Task #31: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_30] Trial #103: GFLOPs: 114.0012. Time: 1173.1820 us. Best GFLOPs: 391.2889
2024-04-29 06:54:24 [INFO] [task_scheduler.cc:131] [Task #31: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_30] Trial #104: GFLOPs: 174.3089. Time: 767.2824 us. Best GFLOPs: 391.2889
2024-04-29 06:54:24 [INFO] [task_scheduler.cc:131] [Task #31: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_30] Trial #105: GFLOPs: 181.4470. Time: 737.0976 us. Best GFLOPs: 391.2889
2024-04-29 06:54:24 [INFO] [task_scheduler.cc:131] [Task #31: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_30] Trial #106: GFLOPs: 76.4467. Time: 1749.5078 us. Best GFLOPs: 391.2889
2024-04-29 06:54:24 [INFO] [task_scheduler.cc:131] [Task #31: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_30] Trial #107: GFLOPs: 168.1300. Time: 795.4803 us. Best GFLOPs: 391.2889
2024-04-29 06:54:24 [INFO] [task_scheduler.cc:131] [Task #31: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_30] Trial #108: GFLOPs: 85.5914. Time: 1562.5892 us. Best GFLOPs: 391.2889
2024-04-29 06:54:24 [INFO] [task_scheduler.cc:131] [Task #31: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_30] Trial #109: GFLOPs: 11.2521. Time: 11886.1706 us. Best GFLOPs: 391.2889
2024-04-29 06:54:24 [INFO] [task_scheduler.cc:131] [Task #31: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_30] Trial #110: GFLOPs: 147.4374. Time: 907.1248 us. Best GFLOPs: 391.2889
2024-04-29 06:54:24 [INFO] [task_scheduler.cc:131] [Task #31: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_30] Trial #111: GFLOPs: 147.0331. Time: 909.6192 us. Best GFLOPs: 391.2889
2024-04-29 06:54:24 [INFO] [task_scheduler.cc:131] [Task #31: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_30] Trial #112: GFLOPs: 138.0395. Time: 968.8832 us. Best GFLOPs: 391.2889
2024-04-29 06:54:24 [INFO] [task_scheduler.cc:131] [Task #31: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_30] Trial #113: GFLOPs: 26.5905. Time: 5029.7748 us. Best GFLOPs: 391.2889
2024-04-29 06:54:24 [INFO] [task_scheduler.cc:131] [Task #31: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_30] Trial #114: GFLOPs: 169.1501. Time: 790.6829 us. Best GFLOPs: 391.2889
2024-04-29 06:54:24 [INFO] [task_scheduler.cc:131] [Task #31: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_30] Trial #115: GFLOPs: 290.9455. Time: 459.6879 us. Best GFLOPs: 391.2889
2024-04-29 06:54:24 [INFO] [task_scheduler.cc:131] [Task #31: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_30] Trial #116: GFLOPs: 214.6365. Time: 623.1191 us. Best GFLOPs: 391.2889
2024-04-29 06:54:24 [INFO] [task_scheduler.cc:131] [Task #31: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_30] Trial #117: GFLOPs: 122.0783. Time: 1095.5602 us. Best GFLOPs: 391.2889
2024-04-29 06:54:24 [INFO] [task_scheduler.cc:131] [Task #31: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_30] Trial #118: GFLOPs: 31.4627. Time: 4250.8826 us. Best GFLOPs: 391.2889
2024-04-29 06:54:24 [INFO] [task_scheduler.cc:131] [Task #31: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_30] Trial #119: GFLOPs: 33.6822. Time: 3970.7619 us. Best GFLOPs: 391.2889
2024-04-29 06:54:24 [INFO] [task_scheduler.cc:131] [Task #31: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_30] Trial #120: GFLOPs: 166.8814. Time: 801.4322 us. Best GFLOPs: 391.2889
2024-04-29 06:54:24 [INFO] [task_scheduler.cc:131] [Task #31: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_30] Trial #121: GFLOPs: 131.0967. Time: 1020.1944 us. Best GFLOPs: 391.2889
2024-04-29 06:54:24 [INFO] [task_scheduler.cc:131] [Task #31: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_30] Trial #122: GFLOPs: 176.6759. Time: 757.0025 us. Best GFLOPs: 391.2889
2024-04-29 06:54:24 [INFO] [task_scheduler.cc:131] [Task #31: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_30] Trial #123: GFLOPs: 167.6048. Time: 797.9730 us. Best GFLOPs: 391.2889
2024-04-29 06:54:24 [INFO] [task_scheduler.cc:131] [Task #31: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_30] Trial #124: GFLOPs: 92.7972. Time: 1441.2513 us. Best GFLOPs: 391.2889
2024-04-29 06:54:24 [INFO] [task_scheduler.cc:131] [Task #31: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_30] Trial #125: GFLOPs: 140.1210. Time: 954.4902 us. Best GFLOPs: 391.2889
2024-04-29 06:54:24 [INFO] [task_scheduler.cc:131] [Task #31: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_30] Trial #126: GFLOPs: 30.2403. Time: 4422.7147 us. Best GFLOPs: 391.2889
2024-04-29 06:54:24 [INFO] [task_scheduler.cc:131] [Task #31: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_30] Trial #127: GFLOPs: 83.4189. Time: 1603.2832 us. Best GFLOPs: 391.2889
2024-04-29 06:54:24 [INFO] [task_scheduler.cc:121] [Task #31: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_30] Trial #128: Error in building:
LocalBuilder: Timeout, killed after 30.0 seconds
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(444), T.int64(14), T.int64(14), T.int64(4)), "float32"), p1: T.Buffer((T.int64(48), T.int64(444), T.int64(1), T.int64(1), T.int64(4), T.int64(4)), "float32"), p2: T.Buffer((T.int64(1), T.int64(48), T.int64(1), T.int64(1), T.int64(4)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(48), T.int64(14), T.int64(14), T.int64(4)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        conv2d_NCHWc = T.alloc_buffer((T.int64(1), T.int64(48), T.int64(14), T.int64(14), T.int64(4)))
        for n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_fused in T.parallel(T.int64(8), annotations={"pragma_auto_unroll_max_step": 512, "pragma_unroll_explicit": 1}):
            for n_1, oc_chunk_1, oh_1, ow_1, oc_block_1 in T.grid(T.int64(1), T.int64(1), T.int64(7), T.int64(7), T.int64(4)):
                for n_2_init, oc_chunk_2_init, oh_2_init, ow_2_init, oc_block_2_init, n_3_init, oc_chunk_3_init, oh_3_init, ow_3_init, oc_block_3_init in T.grid(T.int64(1), T.int64(6), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(1), T.int64(2), T.int64(1)):
                    with T.block("conv2d_NCHWc_init"):
                        v_n = T.axis.spatial(T.int64(1), n_1 + n_2_init + n_3_init)
                        v_oc_chunk = T.axis.spatial(T.int64(48), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_fused // T.int64(2) * T.int64(12) + oc_chunk_1 * T.int64(12) + oc_chunk_2_init * T.int64(2) + oc_chunk_3_init)
                        v_oh = T.axis.spatial(T.int64(14), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_fused % T.int64(2) * T.int64(7) + oh_1 + oh_2_init + oh_3_init)
                        v_ow = T.axis.spatial(T.int64(14), ow_1 * T.int64(2) + ow_2_init * T.int64(2) + ow_3_init)
                        v_oc_block = T.axis.spatial(T.int64(4), oc_block_1 + oc_block_2_init + oc_block_3_init)
                        T.reads()
                        T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                        T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                        conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = T.float32(0)
                for ic_0, kh_0, kw_0, n_2, oc_chunk_2, oh_2, ow_2, oc_block_2, ic_1, kh_1, kw_1, n_3, oc_chunk_3, oh_3, ow_3, oc_block_3 in T.grid(T.int64(888), T.int64(1), T.int64(1), T.int64(1), T.int64(6), T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(1), T.int64(2), T.int64(1)):
                    with T.block("conv2d_NCHWc_update"):
                        v_n = T.axis.spatial(T.int64(1), n_1 + n_2 + n_3)
                        v_oc_chunk = T.axis.spatial(T.int64(48), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_fused // T.int64(2) * T.int64(12) + oc_chunk_1 * T.int64(12) + oc_chunk_2 * T.int64(2) + oc_chunk_3)
                        v_oh = T.axis.spatial(T.int64(14), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_fused % T.int64(2) * T.int64(7) + oh_1 + oh_2 + oh_3)
                        v_ow = T.axis.spatial(T.int64(14), ow_1 * T.int64(2) + ow_2 * T.int64(2) + ow_3)
                        v_oc_block = T.axis.spatial(T.int64(4), oc_block_1 + oc_block_2 + oc_block_3)
                        v_ic = T.axis.reduce(T.int64(1776), ic_0 * T.int64(2) + ic_1)
                        v_kh = T.axis.reduce(T.int64(1), kh_0 + kh_1)
                        v_kw = T.axis.reduce(T.int64(1), kw_0 + kw_1)
                        T.reads(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block], p0[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)], p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block])
                        T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                        T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                        conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] + p0[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)] * p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block]
            for ax0, ax1, ax2 in T.grid(T.int64(1), T.int64(12), T.int64(7)):
                for ax3_ax4_fused in T.vectorized(T.int64(56)):
                    with T.block("T_relu"):
                        v_ax0 = T.axis.spatial(T.int64(1), ax0)
                        v_ax1 = T.axis.spatial(T.int64(48), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_fused // T.int64(2) * T.int64(12) + ax1)
                        v_ax2 = T.axis.spatial(T.int64(14), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_fused % T.int64(2) * T.int64(7) + ax2)
                        v_ax3 = T.axis.spatial(T.int64(14), ax3_ax4_fused // T.int64(4))
                        v_ax4 = T.axis.spatial(T.int64(4), ax3_ax4_fused % T.int64(4))
                        T.reads(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4])
                        T.writes(T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                        T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.max(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] + p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4], T.float32(0))
b0 = sch.get_block(name="conv2d_NCHWc", func_name="main")
b1 = sch.get_block(name="T_add", func_name="main")
b2 = sch.get_block(name="root", func_name="main")
sch.compute_inline(block=b1)
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.tiling_structure", ann_val="SSRSRS")
l3, l4, l5, l6, l7, l8, l9, l10 = sch.get_loops(block=b0)
v11, v12, v13, v14 = sch.sample_perfect_tile(loop=l3, n=4, max_innermost_factor=64, decision=[1, 1, 1, 1])
l15, l16, l17, l18 = sch.split(loop=l3, factors=[v11, v12, v13, v14], preserve_unit_iters=True)
v19, v20, v21, v22 = sch.sample_perfect_tile(loop=l4, n=4, max_innermost_factor=64, decision=[4, 1, 6, 2])
l23, l24, l25, l26 = sch.split(loop=l4, factors=[v19, v20, v21, v22], preserve_unit_iters=True)
v27, v28, v29, v30 = sch.sample_perfect_tile(loop=l5, n=4, max_innermost_factor=64, decision=[2, 7, 1, 1])
l31, l32, l33, l34 = sch.split(loop=l5, factors=[v27, v28, v29, v30], preserve_unit_iters=True)
v35, v36, v37, v38 = sch.sample_perfect_tile(loop=l6, n=4, max_innermost_factor=64, decision=[1, 7, 1, 2])
l39, l40, l41, l42 = sch.split(loop=l6, factors=[v35, v36, v37, v38], preserve_unit_iters=True)
v43, v44, v45, v46 = sch.sample_perfect_tile(loop=l7, n=4, max_innermost_factor=64, decision=[1, 4, 1, 1])
l47, l48, l49, l50 = sch.split(loop=l7, factors=[v43, v44, v45, v46], preserve_unit_iters=True)
v51, v52 = sch.sample_perfect_tile(loop=l8, n=2, max_innermost_factor=64, decision=[888, 2])
l53, l54 = sch.split(loop=l8, factors=[v51, v52], preserve_unit_iters=True)
v55, v56 = sch.sample_perfect_tile(loop=l9, n=2, max_innermost_factor=64, decision=[1, 1])
l57, l58 = sch.split(loop=l9, factors=[v55, v56], preserve_unit_iters=True)
v59, v60 = sch.sample_perfect_tile(loop=l10, n=2, max_innermost_factor=64, decision=[1, 1])
l61, l62 = sch.split(loop=l10, factors=[v59, v60], preserve_unit_iters=True)
sch.reorder(l15, l23, l31, l39, l47, l16, l24, l32, l40, l48, l53, l57, l61, l17, l25, l33, l41, l49, l54, l58, l62, l18, l26, l34, l42, l50)
b63, = sch.get_consumers(block=b0)
sch.reverse_compute_at(block=b63, loop=l47, preserve_unit_loops=True, index=-1)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.vectorize", ann_val=64)
v64 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.unroll_explicit", ann_val=v64)
sch.enter_postproc()
b65 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b65, ann_key="meta_schedule.parallel")
sch.unannotate(block_or_loop=b65, ann_key="meta_schedule.vectorize")
sch.unannotate(block_or_loop=b65, ann_key="meta_schedule.unroll_explicit")
b66, b67 = sch.get_child_blocks(b65)
l68, l69, l70, l71, l72, l73, l74, l75, l76, l77, l78, l79, l80, l81, l82, l83, l84, l85, l86, l87, l88, l89, l90, l91, l92, l93 = sch.get_loops(block=b66)
l94 = sch.fuse(l68, l69, l70, l71, l72, preserve_unit_iters=True)
sch.parallel(loop=l94)
sch.annotate(block_or_loop=l94, ann_key="pragma_auto_unroll_max_step", ann_val=512)
sch.annotate(block_or_loop=l94, ann_key="pragma_unroll_explicit", ann_val=1)
l95, l96, l97, l98, l99, l100 = sch.get_loops(block=b67)
l101 = sch.fuse(l99, l100, preserve_unit_iters=True)
sch.vectorize(loop=l101)
b102 = sch.get_block(name="conv2d_NCHWc", func_name="main")
l103, l104, l105, l106, l107, l108, l109, l110, l111, l112, l113, l114, l115, l116, l117, l118, l119, l120, l121, l122, l123, l124 = sch.get_loops(block=b102)
b125 = sch.decompose_reduction(block=b102, loop=l109)
