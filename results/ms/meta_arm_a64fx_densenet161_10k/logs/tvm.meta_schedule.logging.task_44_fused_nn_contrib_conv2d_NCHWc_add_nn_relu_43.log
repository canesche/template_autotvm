2024-04-29 02:31:12 [INFO] [task_scheduler.cc:160] Initializing Task #44: "fused_nn_contrib_conv2d_NCHWc_add_nn_relu_43"
2024-04-29 02:31:12 [INFO] [task_scheduler.cc:35] 
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(288), T.int64(14), T.int64(14), T.int64(4)), "float32"), p1: T.Buffer((T.int64(48), T.int64(288), T.int64(1), T.int64(1), T.int64(4), T.int64(4)), "float32"), p2: T.Buffer((T.int64(1), T.int64(48), T.int64(1), T.int64(1), T.int64(4)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(48), T.int64(14), T.int64(14), T.int64(4)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        conv2d_NCHWc = T.alloc_buffer((T.int64(1), T.int64(48), T.int64(14), T.int64(14), T.int64(4)))
        T_add = T.alloc_buffer((T.int64(1), T.int64(48), T.int64(14), T.int64(14), T.int64(4)))
        for n, oc_chunk, oh, ow, oc_block, ic, kh, kw in T.grid(T.int64(1), T.int64(48), T.int64(14), T.int64(14), T.int64(4), T.int64(1152), T.int64(1), T.int64(1)):
            with T.block("conv2d_NCHWc"):
                v_n, v_oc_chunk, v_oh, v_ow, v_oc_block, v_ic, v_kh, v_kw = T.axis.remap("SSSSSRRR", [n, oc_chunk, oh, ow, oc_block, ic, kh, kw])
                T.reads(p0[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)], p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block])
                T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                with T.init():
                    conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = T.float32(0)
                conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] + p0[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)] * p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block]
        for ax0, ax1, ax2, ax3, ax4 in T.grid(T.int64(1), T.int64(48), T.int64(14), T.int64(14), T.int64(4)):
            with T.block("T_add"):
                v_ax0, v_ax1, v_ax2, v_ax3, v_ax4 = T.axis.remap("SSSSS", [ax0, ax1, ax2, ax3, ax4])
                T.reads(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4])
                T.writes(T_add[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                T_add[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] + p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4]
        for ax0, ax1, ax2, ax3, ax4 in T.grid(T.int64(1), T.int64(48), T.int64(14), T.int64(14), T.int64(4)):
            with T.block("T_relu"):
                v_ax0, v_ax1, v_ax2, v_ax3, v_ax4 = T.axis.remap("SSSSS", [ax0, ax1, ax2, ax3, ax4])
                T.reads(T_add[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                T.writes(T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.max(T_add[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], T.float32(0))
2024-04-29 02:31:12 [INFO] [task_scheduler.cc:164] Total 3 design space(s) generated
2024-04-29 02:31:12 [INFO] [task_scheduler.cc:170] Design space #0:
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(288), T.int64(14), T.int64(14), T.int64(4)), "float32"), p1: T.Buffer((T.int64(48), T.int64(288), T.int64(1), T.int64(1), T.int64(4), T.int64(4)), "float32"), p2: T.Buffer((T.int64(1), T.int64(48), T.int64(1), T.int64(1), T.int64(4)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(48), T.int64(14), T.int64(14), T.int64(4)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        with T.block("root"):
            T.reads()
            T.writes()
            T.block_attr({"meta_schedule.parallel": 768, "meta_schedule.unroll_explicit": 0, "meta_schedule.vectorize": 64})
            conv2d_NCHWc = T.alloc_buffer((T.int64(1), T.int64(48), T.int64(14), T.int64(14), T.int64(4)))
            for n_0, oc_chunk_0, oh_0, ow_0, oc_block_0, n_1, oc_chunk_1, oh_1, ow_1, oc_block_1, ic_0, kh_0, kw_0, n_2, oc_chunk_2, oh_2, ow_2, oc_block_2, ic_1, kh_1, kw_1, n_3, oc_chunk_3, oh_3, ow_3, oc_block_3 in T.grid(T.int64(1), T.int64(12), T.int64(7), T.int64(14), T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(1), T.int64(2), T.int64(128), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(9), T.int64(1), T.int64(1), T.int64(1), T.int64(4), T.int64(1), T.int64(1), T.int64(1)):
                with T.block("conv2d_NCHWc"):
                    v_n = T.axis.spatial(T.int64(1), n_0 + n_1 + n_2 + n_3)
                    v_oc_chunk = T.axis.spatial(T.int64(48), oc_chunk_0 * T.int64(4) + oc_chunk_1 * T.int64(4) + oc_chunk_2 * T.int64(4) + oc_chunk_3)
                    v_oh = T.axis.spatial(T.int64(14), oh_0 * T.int64(2) + oh_1 + oh_2 + oh_3)
                    v_ow = T.axis.spatial(T.int64(14), ow_0 + ow_1 + ow_2 + ow_3)
                    v_oc_block = T.axis.spatial(T.int64(4), oc_block_0 * T.int64(4) + oc_block_1 * T.int64(2) + oc_block_2 + oc_block_3)
                    v_ic = T.axis.reduce(T.int64(1152), ic_0 * T.int64(9) + ic_1)
                    v_kh = T.axis.reduce(T.int64(1), kh_0 + kh_1)
                    v_kw = T.axis.reduce(T.int64(1), kw_0 + kw_1)
                    T.reads(p0[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)], p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block])
                    T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                    T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                    with T.init():
                        conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = T.float32(0)
                    conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] + p0[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)] * p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block]
            for ax0, ax1, ax2, ax3, ax4 in T.grid(T.int64(1), T.int64(48), T.int64(14), T.int64(14), T.int64(4)):
                with T.block("T_relu"):
                    v_ax0, v_ax1, v_ax2, v_ax3, v_ax4 = T.axis.remap("SSSSS", [ax0, ax1, ax2, ax3, ax4])
                    T.reads(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4])
                    T.writes(T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                    T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.max(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] + p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4], T.float32(0))
b0 = sch.get_block(name="conv2d_NCHWc", func_name="main")
b1 = sch.get_block(name="T_add", func_name="main")
b2 = sch.get_block(name="root", func_name="main")
sch.compute_inline(block=b1)
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.tiling_structure", ann_val="SSRSRS")
l3, l4, l5, l6, l7, l8, l9, l10 = sch.get_loops(block=b0)
v11, v12, v13, v14 = sch.sample_perfect_tile(loop=l3, n=4, max_innermost_factor=64, decision=[1, 1, 1, 1])
l15, l16, l17, l18 = sch.split(loop=l3, factors=[v11, v12, v13, v14], preserve_unit_iters=True)
v19, v20, v21, v22 = sch.sample_perfect_tile(loop=l4, n=4, max_innermost_factor=64, decision=[12, 1, 1, 4])
l23, l24, l25, l26 = sch.split(loop=l4, factors=[v19, v20, v21, v22], preserve_unit_iters=True)
v27, v28, v29, v30 = sch.sample_perfect_tile(loop=l5, n=4, max_innermost_factor=64, decision=[7, 2, 1, 1])
l31, l32, l33, l34 = sch.split(loop=l5, factors=[v27, v28, v29, v30], preserve_unit_iters=True)
v35, v36, v37, v38 = sch.sample_perfect_tile(loop=l6, n=4, max_innermost_factor=64, decision=[14, 1, 1, 1])
l39, l40, l41, l42 = sch.split(loop=l6, factors=[v35, v36, v37, v38], preserve_unit_iters=True)
v43, v44, v45, v46 = sch.sample_perfect_tile(loop=l7, n=4, max_innermost_factor=64, decision=[1, 2, 2, 1])
l47, l48, l49, l50 = sch.split(loop=l7, factors=[v43, v44, v45, v46], preserve_unit_iters=True)
v51, v52 = sch.sample_perfect_tile(loop=l8, n=2, max_innermost_factor=64, decision=[128, 9])
l53, l54 = sch.split(loop=l8, factors=[v51, v52], preserve_unit_iters=True)
v55, v56 = sch.sample_perfect_tile(loop=l9, n=2, max_innermost_factor=64, decision=[1, 1])
l57, l58 = sch.split(loop=l9, factors=[v55, v56], preserve_unit_iters=True)
v59, v60 = sch.sample_perfect_tile(loop=l10, n=2, max_innermost_factor=64, decision=[1, 1])
l61, l62 = sch.split(loop=l10, factors=[v59, v60], preserve_unit_iters=True)
sch.reorder(l15, l23, l31, l39, l47, l16, l24, l32, l40, l48, l53, l57, l61, l17, l25, l33, l41, l49, l54, l58, l62, l18, l26, l34, l42, l50)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.vectorize", ann_val=64)
v63 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=0)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.unroll_explicit", ann_val=v63)
2024-04-29 02:31:12 [INFO] [task_scheduler.cc:170] Design space #1:
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(288), T.int64(14), T.int64(14), T.int64(4)), "float32"), p1: T.Buffer((T.int64(48), T.int64(288), T.int64(1), T.int64(1), T.int64(4), T.int64(4)), "float32"), p2: T.Buffer((T.int64(1), T.int64(48), T.int64(1), T.int64(1), T.int64(4)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(48), T.int64(14), T.int64(14), T.int64(4)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        with T.block("root"):
            T.reads()
            T.writes()
            T.block_attr({"meta_schedule.parallel": 768, "meta_schedule.unroll_explicit": 64, "meta_schedule.vectorize": 64})
            conv2d_NCHWc = T.alloc_buffer((T.int64(1), T.int64(48), T.int64(14), T.int64(14), T.int64(4)))
            for n_0, oc_chunk_0, oh_0, ow_0, oc_block_0, n_1, oc_chunk_1, oh_1, ow_1, oc_block_1 in T.grid(T.int64(1), T.int64(12), T.int64(7), T.int64(14), T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(1), T.int64(2)):
                for ic_0, kh_0, kw_0, n_2, oc_chunk_2, oh_2, ow_2, oc_block_2, ic_1, kh_1, kw_1, n_3, oc_chunk_3, oh_3, ow_3, oc_block_3 in T.grid(T.int64(128), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(9), T.int64(1), T.int64(1), T.int64(1), T.int64(4), T.int64(1), T.int64(1), T.int64(1)):
                    with T.block("conv2d_NCHWc"):
                        v_n = T.axis.spatial(T.int64(1), n_0 + n_1 + n_2 + n_3)
                        v_oc_chunk = T.axis.spatial(T.int64(48), oc_chunk_0 * T.int64(4) + oc_chunk_1 * T.int64(4) + oc_chunk_2 * T.int64(4) + oc_chunk_3)
                        v_oh = T.axis.spatial(T.int64(14), oh_0 * T.int64(2) + oh_1 + oh_2 + oh_3)
                        v_ow = T.axis.spatial(T.int64(14), ow_0 + ow_1 + ow_2 + ow_3)
                        v_oc_block = T.axis.spatial(T.int64(4), oc_block_0 * T.int64(4) + oc_block_1 * T.int64(2) + oc_block_2 + oc_block_3)
                        v_ic = T.axis.reduce(T.int64(1152), ic_0 * T.int64(9) + ic_1)
                        v_kh = T.axis.reduce(T.int64(1), kh_0 + kh_1)
                        v_kw = T.axis.reduce(T.int64(1), kw_0 + kw_1)
                        T.reads(p0[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)], p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block])
                        T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                        T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                        with T.init():
                            conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = T.float32(0)
                        conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] + p0[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)] * p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block]
                for ax0, ax1, ax2, ax3, ax4 in T.grid(T.int64(1), T.int64(4), T.int64(1), T.int64(1), T.int64(2)):
                    with T.block("T_relu"):
                        v_ax0 = T.axis.spatial(T.int64(1), ax0)
                        v_ax1 = T.axis.spatial(T.int64(48), oc_chunk_0 * T.int64(4) + ax1)
                        v_ax2 = T.axis.spatial(T.int64(14), oh_0 * T.int64(2) + oh_1 + ax2)
                        v_ax3 = T.axis.spatial(T.int64(14), ow_0 + ax3)
                        v_ax4 = T.axis.spatial(T.int64(4), oc_block_1 * T.int64(2) + ax4)
                        T.reads(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4])
                        T.writes(T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                        T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.max(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] + p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4], T.float32(0))
b0 = sch.get_block(name="conv2d_NCHWc", func_name="main")
b1 = sch.get_block(name="T_add", func_name="main")
b2 = sch.get_block(name="root", func_name="main")
sch.compute_inline(block=b1)
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.tiling_structure", ann_val="SSRSRS")
l3, l4, l5, l6, l7, l8, l9, l10 = sch.get_loops(block=b0)
v11, v12, v13, v14 = sch.sample_perfect_tile(loop=l3, n=4, max_innermost_factor=64, decision=[1, 1, 1, 1])
l15, l16, l17, l18 = sch.split(loop=l3, factors=[v11, v12, v13, v14], preserve_unit_iters=True)
v19, v20, v21, v22 = sch.sample_perfect_tile(loop=l4, n=4, max_innermost_factor=64, decision=[12, 1, 1, 4])
l23, l24, l25, l26 = sch.split(loop=l4, factors=[v19, v20, v21, v22], preserve_unit_iters=True)
v27, v28, v29, v30 = sch.sample_perfect_tile(loop=l5, n=4, max_innermost_factor=64, decision=[7, 2, 1, 1])
l31, l32, l33, l34 = sch.split(loop=l5, factors=[v27, v28, v29, v30], preserve_unit_iters=True)
v35, v36, v37, v38 = sch.sample_perfect_tile(loop=l6, n=4, max_innermost_factor=64, decision=[14, 1, 1, 1])
l39, l40, l41, l42 = sch.split(loop=l6, factors=[v35, v36, v37, v38], preserve_unit_iters=True)
v43, v44, v45, v46 = sch.sample_perfect_tile(loop=l7, n=4, max_innermost_factor=64, decision=[1, 2, 2, 1])
l47, l48, l49, l50 = sch.split(loop=l7, factors=[v43, v44, v45, v46], preserve_unit_iters=True)
v51, v52 = sch.sample_perfect_tile(loop=l8, n=2, max_innermost_factor=64, decision=[128, 9])
l53, l54 = sch.split(loop=l8, factors=[v51, v52], preserve_unit_iters=True)
v55, v56 = sch.sample_perfect_tile(loop=l9, n=2, max_innermost_factor=64, decision=[1, 1])
l57, l58 = sch.split(loop=l9, factors=[v55, v56], preserve_unit_iters=True)
v59, v60 = sch.sample_perfect_tile(loop=l10, n=2, max_innermost_factor=64, decision=[1, 1])
l61, l62 = sch.split(loop=l10, factors=[v59, v60], preserve_unit_iters=True)
sch.reorder(l15, l23, l31, l39, l47, l16, l24, l32, l40, l48, l53, l57, l61, l17, l25, l33, l41, l49, l54, l58, l62, l18, l26, l34, l42, l50)
b63, = sch.get_consumers(block=b0)
sch.reverse_compute_at(block=b63, loop=l48, preserve_unit_loops=True, index=-1)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.vectorize", ann_val=64)
v64 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=2)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.unroll_explicit", ann_val=v64)
2024-04-29 02:31:12 [INFO] [task_scheduler.cc:170] Design space #2:
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(288), T.int64(14), T.int64(14), T.int64(4)), "float32"), p1: T.Buffer((T.int64(48), T.int64(288), T.int64(1), T.int64(1), T.int64(4), T.int64(4)), "float32"), p2: T.Buffer((T.int64(1), T.int64(48), T.int64(1), T.int64(1), T.int64(4)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(48), T.int64(14), T.int64(14), T.int64(4)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        with T.block("root"):
            T.reads()
            T.writes()
            T.block_attr({"meta_schedule.parallel": 768, "meta_schedule.unroll_explicit": 16, "meta_schedule.vectorize": 64})
            conv2d_NCHWc = T.alloc_buffer((T.int64(1), T.int64(48), T.int64(14), T.int64(14), T.int64(4)))
            for n_0, oc_chunk_0, oh_0, ow_0, oc_block_0 in T.grid(T.int64(1), T.int64(12), T.int64(7), T.int64(14), T.int64(1)):
                for n_1, oc_chunk_1, oh_1, ow_1, oc_block_1, ic_0, kh_0, kw_0, n_2, oc_chunk_2, oh_2, ow_2, oc_block_2, ic_1, kh_1, kw_1, n_3, oc_chunk_3, oh_3, ow_3, oc_block_3 in T.grid(T.int64(1), T.int64(1), T.int64(2), T.int64(1), T.int64(2), T.int64(128), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(9), T.int64(1), T.int64(1), T.int64(1), T.int64(4), T.int64(1), T.int64(1), T.int64(1)):
                    with T.block("conv2d_NCHWc"):
                        v_n = T.axis.spatial(T.int64(1), n_0 + n_1 + n_2 + n_3)
                        v_oc_chunk = T.axis.spatial(T.int64(48), oc_chunk_0 * T.int64(4) + oc_chunk_1 * T.int64(4) + oc_chunk_2 * T.int64(4) + oc_chunk_3)
                        v_oh = T.axis.spatial(T.int64(14), oh_0 * T.int64(2) + oh_1 + oh_2 + oh_3)
                        v_ow = T.axis.spatial(T.int64(14), ow_0 + ow_1 + ow_2 + ow_3)
                        v_oc_block = T.axis.spatial(T.int64(4), oc_block_0 * T.int64(4) + oc_block_1 * T.int64(2) + oc_block_2 + oc_block_3)
                        v_ic = T.axis.reduce(T.int64(1152), ic_0 * T.int64(9) + ic_1)
                        v_kh = T.axis.reduce(T.int64(1), kh_0 + kh_1)
                        v_kw = T.axis.reduce(T.int64(1), kw_0 + kw_1)
                        T.reads(p0[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)], p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block])
                        T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                        T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                        with T.init():
                            conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = T.float32(0)
                        conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] + p0[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)] * p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block]
                for ax0, ax1, ax2, ax3, ax4 in T.grid(T.int64(1), T.int64(4), T.int64(2), T.int64(1), T.int64(4)):
                    with T.block("T_relu"):
                        v_ax0 = T.axis.spatial(T.int64(1), ax0)
                        v_ax1 = T.axis.spatial(T.int64(48), oc_chunk_0 * T.int64(4) + ax1)
                        v_ax2 = T.axis.spatial(T.int64(14), oh_0 * T.int64(2) + ax2)
                        v_ax3 = T.axis.spatial(T.int64(14), ow_0 + ax3)
                        v_ax4 = T.axis.spatial(T.int64(4), ax4)
                        T.reads(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4])
                        T.writes(T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                        T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.max(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] + p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4], T.float32(0))
b0 = sch.get_block(name="conv2d_NCHWc", func_name="main")
b1 = sch.get_block(name="T_add", func_name="main")
b2 = sch.get_block(name="root", func_name="main")
sch.compute_inline(block=b1)
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.tiling_structure", ann_val="SSRSRS")
l3, l4, l5, l6, l7, l8, l9, l10 = sch.get_loops(block=b0)
v11, v12, v13, v14 = sch.sample_perfect_tile(loop=l3, n=4, max_innermost_factor=64, decision=[1, 1, 1, 1])
l15, l16, l17, l18 = sch.split(loop=l3, factors=[v11, v12, v13, v14], preserve_unit_iters=True)
v19, v20, v21, v22 = sch.sample_perfect_tile(loop=l4, n=4, max_innermost_factor=64, decision=[12, 1, 1, 4])
l23, l24, l25, l26 = sch.split(loop=l4, factors=[v19, v20, v21, v22], preserve_unit_iters=True)
v27, v28, v29, v30 = sch.sample_perfect_tile(loop=l5, n=4, max_innermost_factor=64, decision=[7, 2, 1, 1])
l31, l32, l33, l34 = sch.split(loop=l5, factors=[v27, v28, v29, v30], preserve_unit_iters=True)
v35, v36, v37, v38 = sch.sample_perfect_tile(loop=l6, n=4, max_innermost_factor=64, decision=[14, 1, 1, 1])
l39, l40, l41, l42 = sch.split(loop=l6, factors=[v35, v36, v37, v38], preserve_unit_iters=True)
v43, v44, v45, v46 = sch.sample_perfect_tile(loop=l7, n=4, max_innermost_factor=64, decision=[1, 2, 2, 1])
l47, l48, l49, l50 = sch.split(loop=l7, factors=[v43, v44, v45, v46], preserve_unit_iters=True)
v51, v52 = sch.sample_perfect_tile(loop=l8, n=2, max_innermost_factor=64, decision=[128, 9])
l53, l54 = sch.split(loop=l8, factors=[v51, v52], preserve_unit_iters=True)
v55, v56 = sch.sample_perfect_tile(loop=l9, n=2, max_innermost_factor=64, decision=[1, 1])
l57, l58 = sch.split(loop=l9, factors=[v55, v56], preserve_unit_iters=True)
v59, v60 = sch.sample_perfect_tile(loop=l10, n=2, max_innermost_factor=64, decision=[1, 1])
l61, l62 = sch.split(loop=l10, factors=[v59, v60], preserve_unit_iters=True)
sch.reorder(l15, l23, l31, l39, l47, l16, l24, l32, l40, l48, l53, l57, l61, l17, l25, l33, l41, l49, l54, l58, l62, l18, l26, l34, l42, l50)
b63, = sch.get_consumers(block=b0)
sch.reverse_compute_at(block=b63, loop=l47, preserve_unit_loops=True, index=-1)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.vectorize", ann_val=64)
v64 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=1)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.unroll_explicit", ann_val=v64)
2024-04-29 03:42:58 [INFO] [evolutionary_search.cc:713] Generating candidates......
2024-04-29 03:42:58 [INFO] [evolutionary_search.cc:715] Picked top 0 candidate(s) from database
2024-04-29 03:43:01 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0xef9c248)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x74f8a18)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x86a16b8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0xfaee3c8)]: 0 failure(s)
2024-04-29 03:43:01 [INFO] [evolutionary_search.cc:723] Sampled 512 candidate(s)
2024-04-29 03:43:04 [INFO] [evolutionary_search.cc:621] Evolve iter #0 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0xef9c248)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x74f8a18)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x86a16b8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0xfaee3c8)]: 0 failure(s)
2024-04-29 03:43:07 [INFO] [evolutionary_search.cc:621] Evolve iter #1 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0xef9c248)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x74f8a18)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x86a16b8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0xfaee3c8)]: 0 failure(s)
2024-04-29 03:43:10 [INFO] [evolutionary_search.cc:621] Evolve iter #2 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0xef9c248)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x74f8a18)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x86a16b8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0xfaee3c8)]: 0 failure(s)
2024-04-29 03:43:13 [INFO] [evolutionary_search.cc:621] Evolve iter #3 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0xef9c248)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x74f8a18)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x86a16b8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0xfaee3c8)]: 0 failure(s)
2024-04-29 03:43:14 [INFO] [evolutionary_search.cc:649] Scores of the best 64 candidates:
[1 : 16]:	0.9998  0.9992  0.9988  0.9985  0.9984  0.9972  0.9972  0.9970  0.9969  0.9965  0.9964  0.9960  0.9958  0.9952  0.9952  0.9949
[17 : 32]:	0.9948  0.9948  0.9948  0.9947  0.9944  0.9943  0.9943  0.9930  0.9925  0.9922  0.9913  0.9911  0.9911  0.9899  0.9898  0.9896
[33 : 48]:	0.9895  0.9889  0.9878  0.9876  0.9875  0.9872  0.9866  0.9864  0.9862  0.9858  0.9853  0.9852  0.9849  0.9846  0.9845  0.9834
[49 : 64]:	0.9824  0.9820  0.9818  0.9811  0.9807  0.9806  0.9802  0.9799  0.9799  0.9797  0.9797  0.9792  0.9790  0.9789  0.9781  0.9777
2024-04-29 03:43:14 [INFO] [evolutionary_search.cc:727] Got 64 candidate(s) with evolutionary search
2024-04-29 03:43:14 [INFO] [evolutionary_search.cc:730] Sending 64 candidates(s) for measurement
2024-04-29 05:06:29 [INFO] [task_scheduler.cc:131] [Task #44: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_43] Trial #1: GFLOPs: 81.5858. Time: 1063.6574 us. Best GFLOPs: 81.5858
2024-04-29 05:06:29 [INFO] [task_scheduler.cc:131] [Task #44: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_43] Trial #2: GFLOPs: 22.1809. Time: 3912.3390 us. Best GFLOPs: 81.5858
2024-04-29 05:06:29 [INFO] [task_scheduler.cc:131] [Task #44: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_43] Trial #3: GFLOPs: 24.0023. Time: 3615.4577 us. Best GFLOPs: 81.5858
2024-04-29 05:06:29 [INFO] [task_scheduler.cc:131] [Task #44: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_43] Trial #4: GFLOPs: 53.4725. Time: 1622.8801 us. Best GFLOPs: 81.5858
2024-04-29 05:06:29 [INFO] [task_scheduler.cc:131] [Task #44: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_43] Trial #5: GFLOPs: 62.9010. Time: 1379.6197 us. Best GFLOPs: 81.5858
2024-04-29 05:06:29 [INFO] [task_scheduler.cc:131] [Task #44: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_43] Trial #6: GFLOPs: 54.1612. Time: 1602.2423 us. Best GFLOPs: 81.5858
2024-04-29 05:06:29 [INFO] [task_scheduler.cc:131] [Task #44: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_43] Trial #7: GFLOPs: 65.9283. Time: 1316.2686 us. Best GFLOPs: 81.5858
2024-04-29 05:06:29 [INFO] [task_scheduler.cc:131] [Task #44: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_43] Trial #8: GFLOPs: 73.8116. Time: 1175.6879 us. Best GFLOPs: 81.5858
2024-04-29 05:06:29 [INFO] [task_scheduler.cc:131] [Task #44: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_43] Trial #9: GFLOPs: 87.3775. Time: 993.1549 us. Best GFLOPs: 87.3775
2024-04-29 05:06:29 [INFO] [task_scheduler.cc:131] [Task #44: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_43] Trial #10: GFLOPs: 49.1759. Time: 1764.6748 us. Best GFLOPs: 87.3775
2024-04-29 05:06:29 [INFO] [task_scheduler.cc:131] [Task #44: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_43] Trial #11: GFLOPs: 94.4214. Time: 919.0652 us. Best GFLOPs: 94.4214
2024-04-29 05:06:29 [INFO] [task_scheduler.cc:121] [Task #44: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_43] Trial #12: Error in building:
LocalBuilder: Timeout, killed after 30.0 seconds
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(288), T.int64(14), T.int64(14), T.int64(4)), "float32"), p1: T.Buffer((T.int64(48), T.int64(288), T.int64(1), T.int64(1), T.int64(4), T.int64(4)), "float32"), p2: T.Buffer((T.int64(1), T.int64(48), T.int64(1), T.int64(1), T.int64(4)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(48), T.int64(14), T.int64(14), T.int64(4)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        conv2d_NCHWc = T.alloc_buffer((T.int64(1), T.int64(48), T.int64(14), T.int64(14), T.int64(4)))
        for n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused in T.parallel(T.int64(112), annotations={"pragma_auto_unroll_max_step": 512, "pragma_unroll_explicit": 1}):
            for n_2_init, oc_chunk_2_init, oh_2_init, ow_2_init, oc_block_2_init, n_3_init, oc_chunk_3_init, oh_3_init, ow_3_init, oc_block_3_init in T.grid(T.int64(1), T.int64(12), T.int64(1), T.int64(7), T.int64(2), T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(1)):
                with T.block("conv2d_NCHWc_init"):
                    v_n = T.axis.spatial(T.int64(1), n_2_init + n_3_init)
                    v_oc_chunk = T.axis.spatial(T.int64(48), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused // T.int64(56) * T.int64(24) + n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused % T.int64(14) // T.int64(7) * T.int64(12) + oc_chunk_2_init + oc_chunk_3_init)
                    v_oh = T.axis.spatial(T.int64(14), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused % T.int64(56) // T.int64(28) * T.int64(7) + n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused % T.int64(7) + oh_2_init + oh_3_init)
                    v_ow = T.axis.spatial(T.int64(14), ow_2_init * T.int64(2) + ow_3_init)
                    v_oc_block = T.axis.spatial(T.int64(4), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused % T.int64(28) // T.int64(14) * T.int64(2) + oc_block_2_init + oc_block_3_init)
                    T.reads()
                    T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                    T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                    conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = T.float32(0)
            for ic_0, kh_0, kw_0, n_2, oc_chunk_2, oh_2, ow_2, oc_block_2, ic_1, kh_1, kw_1, n_3, oc_chunk_3, oh_3, ow_3, oc_block_3 in T.grid(T.int64(72), T.int64(1), T.int64(1), T.int64(1), T.int64(12), T.int64(1), T.int64(7), T.int64(2), T.int64(16), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(1)):
                with T.block("conv2d_NCHWc_update"):
                    v_n = T.axis.spatial(T.int64(1), n_2 + n_3)
                    v_oc_chunk = T.axis.spatial(T.int64(48), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused // T.int64(56) * T.int64(24) + n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused % T.int64(14) // T.int64(7) * T.int64(12) + oc_chunk_2 + oc_chunk_3)
                    v_oh = T.axis.spatial(T.int64(14), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused % T.int64(56) // T.int64(28) * T.int64(7) + n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused % T.int64(7) + oh_2 + oh_3)
                    v_ow = T.axis.spatial(T.int64(14), ow_2 * T.int64(2) + ow_3)
                    v_oc_block = T.axis.spatial(T.int64(4), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused % T.int64(28) // T.int64(14) * T.int64(2) + oc_block_2 + oc_block_3)
                    v_ic = T.axis.reduce(T.int64(1152), ic_0 * T.int64(16) + ic_1)
                    v_kh = T.axis.reduce(T.int64(1), kh_0 + kh_1)
                    v_kw = T.axis.reduce(T.int64(1), kw_0 + kw_1)
                    T.reads(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block], p0[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)], p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block])
                    T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                    T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                    conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] + p0[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)] * p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block]
        for ax0_ax1_ax2_ax3_ax4_fused_0 in T.parallel(T.int64(588)):
            for ax0_ax1_ax2_ax3_ax4_fused_1 in T.vectorized(T.int64(64)):
                with T.block("T_relu"):
                    v_ax0 = T.axis.spatial(T.int64(1), T.int64(0))
                    v_ax1 = T.axis.spatial(T.int64(48), (ax0_ax1_ax2_ax3_ax4_fused_0 * T.int64(64) + ax0_ax1_ax2_ax3_ax4_fused_1) // T.int64(784))
                    v_ax2 = T.axis.spatial(T.int64(14), (ax0_ax1_ax2_ax3_ax4_fused_0 * T.int64(64) + ax0_ax1_ax2_ax3_ax4_fused_1) % T.int64(784) // T.int64(56))
                    v_ax3 = T.axis.spatial(T.int64(14), (ax0_ax1_ax2_ax3_ax4_fused_0 * T.int64(64) + ax0_ax1_ax2_ax3_ax4_fused_1) % T.int64(56) // T.int64(4))
                    v_ax4 = T.axis.spatial(T.int64(4), (ax0_ax1_ax2_ax3_ax4_fused_0 * T.int64(64) + ax0_ax1_ax2_ax3_ax4_fused_1) % T.int64(4))
                    T.reads(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4])
                    T.writes(T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                    T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.max(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] + p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4], T.float32(0))
b0 = sch.get_block(name="conv2d_NCHWc", func_name="main")
b1 = sch.get_block(name="T_add", func_name="main")
b2 = sch.get_block(name="root", func_name="main")
sch.compute_inline(block=b1)
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.tiling_structure", ann_val="SSRSRS")
l3, l4, l5, l6, l7, l8, l9, l10 = sch.get_loops(block=b0)
v11, v12, v13, v14 = sch.sample_perfect_tile(loop=l3, n=4, max_innermost_factor=64, decision=[1, 1, 1, 1])
l15, l16, l17, l18 = sch.split(loop=l3, factors=[v11, v12, v13, v14], preserve_unit_iters=True)
v19, v20, v21, v22 = sch.sample_perfect_tile(loop=l4, n=4, max_innermost_factor=64, decision=[2, 2, 12, 1])
l23, l24, l25, l26 = sch.split(loop=l4, factors=[v19, v20, v21, v22], preserve_unit_iters=True)
v27, v28, v29, v30 = sch.sample_perfect_tile(loop=l5, n=4, max_innermost_factor=64, decision=[2, 7, 1, 1])
l31, l32, l33, l34 = sch.split(loop=l5, factors=[v27, v28, v29, v30], preserve_unit_iters=True)
v35, v36, v37, v38 = sch.sample_perfect_tile(loop=l6, n=4, max_innermost_factor=64, decision=[1, 1, 7, 2])
l39, l40, l41, l42 = sch.split(loop=l6, factors=[v35, v36, v37, v38], preserve_unit_iters=True)
v43, v44, v45, v46 = sch.sample_perfect_tile(loop=l7, n=4, max_innermost_factor=64, decision=[2, 1, 2, 1])
l47, l48, l49, l50 = sch.split(loop=l7, factors=[v43, v44, v45, v46], preserve_unit_iters=True)
v51, v52 = sch.sample_perfect_tile(loop=l8, n=2, max_innermost_factor=64, decision=[72, 16])
l53, l54 = sch.split(loop=l8, factors=[v51, v52], preserve_unit_iters=True)
v55, v56 = sch.sample_perfect_tile(loop=l9, n=2, max_innermost_factor=64, decision=[1, 1])
l57, l58 = sch.split(loop=l9, factors=[v55, v56], preserve_unit_iters=True)
v59, v60 = sch.sample_perfect_tile(loop=l10, n=2, max_innermost_factor=64, decision=[1, 1])
l61, l62 = sch.split(loop=l10, factors=[v59, v60], preserve_unit_iters=True)
sch.reorder(l15, l23, l31, l39, l47, l16, l24, l32, l40, l48, l53, l57, l61, l17, l25, l33, l41, l49, l54, l58, l62, l18, l26, l34, l42, l50)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.vectorize", ann_val=64)
v63 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.unroll_explicit", ann_val=v63)
sch.enter_postproc()
b64 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b64, ann_key="meta_schedule.parallel")
sch.unannotate(block_or_loop=b64, ann_key="meta_schedule.vectorize")
sch.unannotate(block_or_loop=b64, ann_key="meta_schedule.unroll_explicit")
b65, b66 = sch.get_child_blocks(b64)
l67, l68, l69, l70, l71, l72, l73, l74, l75, l76, l77, l78, l79, l80, l81, l82, l83, l84, l85, l86, l87, l88, l89, l90, l91, l92 = sch.get_loops(block=b65)
l93 = sch.fuse(l67, l68, l69, l70, l71, l72, l73, l74, l75, l76, preserve_unit_iters=True)
sch.parallel(loop=l93)
sch.annotate(block_or_loop=l93, ann_key="pragma_auto_unroll_max_step", ann_val=512)
sch.annotate(block_or_loop=l93, ann_key="pragma_unroll_explicit", ann_val=1)
l94, l95, l96, l97, l98 = sch.get_loops(block=b66)
l99 = sch.fuse(l94, l95, l96, l97, l98, preserve_unit_iters=True)
l100, l101 = sch.split(loop=l99, factors=[None, 64], preserve_unit_iters=True)
sch.parallel(loop=l100)
sch.vectorize(loop=l101)
b102 = sch.get_block(name="conv2d_NCHWc", func_name="main")
l103, l104, l105, l106, l107, l108, l109, l110, l111, l112, l113, l114, l115, l116, l117, l118, l119 = sch.get_loops(block=b102)
b120 = sch.decompose_reduction(block=b102, loop=l104)
2024-04-29 05:06:29 [INFO] [task_scheduler.cc:131] [Task #44: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_43] Trial #13: GFLOPs: 84.4064. Time: 1028.1139 us. Best GFLOPs: 94.4214
2024-04-29 05:06:29 [INFO] [task_scheduler.cc:131] [Task #44: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_43] Trial #14: GFLOPs: 65.8900. Time: 1317.0352 us. Best GFLOPs: 94.4214
2024-04-29 05:06:29 [INFO] [task_scheduler.cc:131] [Task #44: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_43] Trial #15: GFLOPs: 71.5990. Time: 1212.0196 us. Best GFLOPs: 94.4214
2024-04-29 05:06:29 [INFO] [task_scheduler.cc:131] [Task #44: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_43] Trial #16: GFLOPs: 90.3381. Time: 960.6071 us. Best GFLOPs: 94.4214
2024-04-29 05:06:29 [INFO] [task_scheduler.cc:131] [Task #44: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_43] Trial #17: GFLOPs: 81.2568. Time: 1067.9642 us. Best GFLOPs: 94.4214
2024-04-29 05:06:29 [INFO] [task_scheduler.cc:131] [Task #44: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_43] Trial #18: GFLOPs: 61.9977. Time: 1399.7196 us. Best GFLOPs: 94.4214
2024-04-29 05:06:29 [INFO] [task_scheduler.cc:131] [Task #44: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_43] Trial #19: GFLOPs: 96.2456. Time: 901.6452 us. Best GFLOPs: 96.2456
2024-04-29 05:06:29 [INFO] [task_scheduler.cc:131] [Task #44: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_43] Trial #20: GFLOPs: 3.8504. Time: 22537.9366 us. Best GFLOPs: 96.2456
2024-04-29 05:06:29 [INFO] [task_scheduler.cc:131] [Task #44: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_43] Trial #21: GFLOPs: 37.9196. Time: 2288.5122 us. Best GFLOPs: 96.2456
2024-04-29 05:06:29 [INFO] [task_scheduler.cc:131] [Task #44: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_43] Trial #22: GFLOPs: 2.0017. Time: 43353.5367 us. Best GFLOPs: 96.2456
2024-04-29 05:06:29 [INFO] [task_scheduler.cc:131] [Task #44: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_43] Trial #23: GFLOPs: 103.1634. Time: 841.1839 us. Best GFLOPs: 103.1634
2024-04-29 05:06:29 [INFO] [task_scheduler.cc:131] [Task #44: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_43] Trial #24: GFLOPs: 46.6423. Time: 1860.5304 us. Best GFLOPs: 103.1634
2024-04-29 05:06:29 [INFO] [task_scheduler.cc:131] [Task #44: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_43] Trial #25: GFLOPs: 3.2675. Time: 26558.5037 us. Best GFLOPs: 103.1634
2024-04-29 05:06:29 [INFO] [task_scheduler.cc:131] [Task #44: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_43] Trial #26: GFLOPs: 6.5503. Time: 13248.1116 us. Best GFLOPs: 103.1634
2024-04-29 05:06:29 [INFO] [task_scheduler.cc:131] [Task #44: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_43] Trial #27: GFLOPs: 13.6583. Time: 6353.6165 us. Best GFLOPs: 103.1634
2024-04-29 05:06:29 [INFO] [task_scheduler.cc:131] [Task #44: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_43] Trial #28: GFLOPs: 108.6143. Time: 798.9685 us. Best GFLOPs: 108.6143
2024-04-29 05:06:29 [INFO] [task_scheduler.cc:131] [Task #44: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_43] Trial #29: GFLOPs: 94.6659. Time: 916.6912 us. Best GFLOPs: 108.6143
2024-04-29 05:06:29 [INFO] [task_scheduler.cc:131] [Task #44: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_43] Trial #30: GFLOPs: 7.1453. Time: 12144.9481 us. Best GFLOPs: 108.6143
2024-04-29 05:06:29 [INFO] [task_scheduler.cc:131] [Task #44: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_43] Trial #31: GFLOPs: 24.6264. Time: 3523.8338 us. Best GFLOPs: 108.6143
2024-04-29 05:06:30 [INFO] [task_scheduler.cc:131] [Task #44: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_43] Trial #32: GFLOPs: 69.6580. Time: 1245.7921 us. Best GFLOPs: 108.6143
2024-04-29 05:06:30 [INFO] [task_scheduler.cc:131] [Task #44: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_43] Trial #33: GFLOPs: 17.2989. Time: 5016.4712 us. Best GFLOPs: 108.6143
2024-04-29 05:06:30 [INFO] [task_scheduler.cc:131] [Task #44: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_43] Trial #34: GFLOPs: 6.0859. Time: 14259.2020 us. Best GFLOPs: 108.6143
2024-04-29 05:06:30 [INFO] [task_scheduler.cc:131] [Task #44: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_43] Trial #35: GFLOPs: 32.9331. Time: 2635.0194 us. Best GFLOPs: 108.6143
2024-04-29 05:06:30 [INFO] [task_scheduler.cc:131] [Task #44: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_43] Trial #36: GFLOPs: 51.2430. Time: 1693.4882 us. Best GFLOPs: 108.6143
2024-04-29 05:06:30 [INFO] [task_scheduler.cc:121] [Task #44: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_43] Trial #37: Error in building:
LocalBuilder: Timeout, killed after 30.0 seconds
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(288), T.int64(14), T.int64(14), T.int64(4)), "float32"), p1: T.Buffer((T.int64(48), T.int64(288), T.int64(1), T.int64(1), T.int64(4), T.int64(4)), "float32"), p2: T.Buffer((T.int64(1), T.int64(48), T.int64(1), T.int64(1), T.int64(4)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(48), T.int64(14), T.int64(14), T.int64(4)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        conv2d_NCHWc = T.alloc_buffer((T.int64(1), T.int64(48), T.int64(14), T.int64(14), T.int64(4)))
        for n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused in T.parallel(T.int64(48), annotations={"pragma_auto_unroll_max_step": 512, "pragma_unroll_explicit": 1}):
            for n_2_init, oc_chunk_2_init, oh_2_init, ow_2_init, oc_block_2_init, n_3_init, oc_chunk_3_init, oh_3_init, ow_3_init, oc_block_3_init in T.grid(T.int64(1), T.int64(2), T.int64(1), T.int64(7), T.int64(2), T.int64(1), T.int64(2), T.int64(14), T.int64(1), T.int64(1)):
                with T.block("conv2d_NCHWc_init"):
                    v_n = T.axis.spatial(T.int64(1), n_2_init + n_3_init)
                    v_oc_chunk = T.axis.spatial(T.int64(48), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused // T.int64(8) * T.int64(8) + n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused % T.int64(2) * T.int64(4) + oc_chunk_2_init * T.int64(2) + oc_chunk_3_init)
                    v_oh = T.axis.spatial(T.int64(14), oh_2_init * T.int64(14) + oh_3_init)
                    v_ow = T.axis.spatial(T.int64(14), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused % T.int64(8) // T.int64(4) * T.int64(7) + ow_2_init + ow_3_init)
                    v_oc_block = T.axis.spatial(T.int64(4), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused % T.int64(4) // T.int64(2) * T.int64(2) + oc_block_2_init + oc_block_3_init)
                    T.reads()
                    T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                    T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                    conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = T.float32(0)
            for ic_0, kh_0, kw_0, n_2, oc_chunk_2, oh_2, ow_2, oc_block_2, ic_1, kh_1, kw_1, n_3, oc_chunk_3, oh_3, ow_3, oc_block_3 in T.grid(T.int64(72), T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(1), T.int64(7), T.int64(2), T.int64(16), T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(14), T.int64(1), T.int64(1)):
                with T.block("conv2d_NCHWc_update"):
                    v_n = T.axis.spatial(T.int64(1), n_2 + n_3)
                    v_oc_chunk = T.axis.spatial(T.int64(48), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused // T.int64(8) * T.int64(8) + n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused % T.int64(2) * T.int64(4) + oc_chunk_2 * T.int64(2) + oc_chunk_3)
                    v_oh = T.axis.spatial(T.int64(14), oh_2 * T.int64(14) + oh_3)
                    v_ow = T.axis.spatial(T.int64(14), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused % T.int64(8) // T.int64(4) * T.int64(7) + ow_2 + ow_3)
                    v_oc_block = T.axis.spatial(T.int64(4), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused % T.int64(4) // T.int64(2) * T.int64(2) + oc_block_2 + oc_block_3)
                    v_ic = T.axis.reduce(T.int64(1152), ic_0 * T.int64(16) + ic_1)
                    v_kh = T.axis.reduce(T.int64(1), kh_0 + kh_1)
                    v_kw = T.axis.reduce(T.int64(1), kw_0 + kw_1)
                    T.reads(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block], p0[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)], p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block])
                    T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                    T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                    conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] + p0[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)] * p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block]
        for ax0_ax1_ax2_ax3_ax4_fused_0 in T.parallel(T.int64(588)):
            for ax0_ax1_ax2_ax3_ax4_fused_1 in T.vectorized(T.int64(64)):
                with T.block("T_relu"):
                    v_ax0 = T.axis.spatial(T.int64(1), T.int64(0))
                    v_ax1 = T.axis.spatial(T.int64(48), (ax0_ax1_ax2_ax3_ax4_fused_0 * T.int64(64) + ax0_ax1_ax2_ax3_ax4_fused_1) // T.int64(784))
                    v_ax2 = T.axis.spatial(T.int64(14), (ax0_ax1_ax2_ax3_ax4_fused_0 * T.int64(64) + ax0_ax1_ax2_ax3_ax4_fused_1) % T.int64(784) // T.int64(56))
                    v_ax3 = T.axis.spatial(T.int64(14), (ax0_ax1_ax2_ax3_ax4_fused_0 * T.int64(64) + ax0_ax1_ax2_ax3_ax4_fused_1) % T.int64(56) // T.int64(4))
                    v_ax4 = T.axis.spatial(T.int64(4), (ax0_ax1_ax2_ax3_ax4_fused_0 * T.int64(64) + ax0_ax1_ax2_ax3_ax4_fused_1) % T.int64(4))
                    T.reads(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4])
                    T.writes(T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                    T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.max(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] + p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4], T.float32(0))
b0 = sch.get_block(name="conv2d_NCHWc", func_name="main")
b1 = sch.get_block(name="T_add", func_name="main")
b2 = sch.get_block(name="root", func_name="main")
sch.compute_inline(block=b1)
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.tiling_structure", ann_val="SSRSRS")
l3, l4, l5, l6, l7, l8, l9, l10 = sch.get_loops(block=b0)
v11, v12, v13, v14 = sch.sample_perfect_tile(loop=l3, n=4, max_innermost_factor=64, decision=[1, 1, 1, 1])
l15, l16, l17, l18 = sch.split(loop=l3, factors=[v11, v12, v13, v14], preserve_unit_iters=True)
v19, v20, v21, v22 = sch.sample_perfect_tile(loop=l4, n=4, max_innermost_factor=64, decision=[6, 2, 2, 2])
l23, l24, l25, l26 = sch.split(loop=l4, factors=[v19, v20, v21, v22], preserve_unit_iters=True)
v27, v28, v29, v30 = sch.sample_perfect_tile(loop=l5, n=4, max_innermost_factor=64, decision=[1, 1, 1, 14])
l31, l32, l33, l34 = sch.split(loop=l5, factors=[v27, v28, v29, v30], preserve_unit_iters=True)
v35, v36, v37, v38 = sch.sample_perfect_tile(loop=l6, n=4, max_innermost_factor=64, decision=[2, 1, 7, 1])
l39, l40, l41, l42 = sch.split(loop=l6, factors=[v35, v36, v37, v38], preserve_unit_iters=True)
v43, v44, v45, v46 = sch.sample_perfect_tile(loop=l7, n=4, max_innermost_factor=64, decision=[2, 1, 2, 1])
l47, l48, l49, l50 = sch.split(loop=l7, factors=[v43, v44, v45, v46], preserve_unit_iters=True)
v51, v52 = sch.sample_perfect_tile(loop=l8, n=2, max_innermost_factor=64, decision=[72, 16])
l53, l54 = sch.split(loop=l8, factors=[v51, v52], preserve_unit_iters=True)
v55, v56 = sch.sample_perfect_tile(loop=l9, n=2, max_innermost_factor=64, decision=[1, 1])
l57, l58 = sch.split(loop=l9, factors=[v55, v56], preserve_unit_iters=True)
v59, v60 = sch.sample_perfect_tile(loop=l10, n=2, max_innermost_factor=64, decision=[1, 1])
l61, l62 = sch.split(loop=l10, factors=[v59, v60], preserve_unit_iters=True)
sch.reorder(l15, l23, l31, l39, l47, l16, l24, l32, l40, l48, l53, l57, l61, l17, l25, l33, l41, l49, l54, l58, l62, l18, l26, l34, l42, l50)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.vectorize", ann_val=64)
v63 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.unroll_explicit", ann_val=v63)
sch.enter_postproc()
b64 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b64, ann_key="meta_schedule.parallel")
sch.unannotate(block_or_loop=b64, ann_key="meta_schedule.vectorize")
sch.unannotate(block_or_loop=b64, ann_key="meta_schedule.unroll_explicit")
b65, b66 = sch.get_child_blocks(b64)
l67, l68, l69, l70, l71, l72, l73, l74, l75, l76, l77, l78, l79, l80, l81, l82, l83, l84, l85, l86, l87, l88, l89, l90, l91, l92 = sch.get_loops(block=b65)
l93 = sch.fuse(l67, l68, l69, l70, l71, l72, l73, l74, l75, l76, preserve_unit_iters=True)
sch.parallel(loop=l93)
sch.annotate(block_or_loop=l93, ann_key="pragma_auto_unroll_max_step", ann_val=512)
sch.annotate(block_or_loop=l93, ann_key="pragma_unroll_explicit", ann_val=1)
l94, l95, l96, l97, l98 = sch.get_loops(block=b66)
l99 = sch.fuse(l94, l95, l96, l97, l98, preserve_unit_iters=True)
l100, l101 = sch.split(loop=l99, factors=[None, 64], preserve_unit_iters=True)
sch.parallel(loop=l100)
sch.vectorize(loop=l101)
b102 = sch.get_block(name="conv2d_NCHWc", func_name="main")
l103, l104, l105, l106, l107, l108, l109, l110, l111, l112, l113, l114, l115, l116, l117, l118, l119 = sch.get_loops(block=b102)
b120 = sch.decompose_reduction(block=b102, loop=l104)
2024-04-29 05:06:30 [INFO] [task_scheduler.cc:131] [Task #44: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_43] Trial #38: GFLOPs: 139.9421. Time: 620.1093 us. Best GFLOPs: 139.9421
2024-04-29 05:06:30 [INFO] [task_scheduler.cc:131] [Task #44: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_43] Trial #39: GFLOPs: 96.2496. Time: 901.6078 us. Best GFLOPs: 139.9421
2024-04-29 05:06:30 [INFO] [task_scheduler.cc:131] [Task #44: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_43] Trial #40: GFLOPs: 8.4155. Time: 10311.8418 us. Best GFLOPs: 139.9421
2024-04-29 05:06:30 [INFO] [task_scheduler.cc:131] [Task #44: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_43] Trial #41: GFLOPs: 21.9894. Time: 3946.4235 us. Best GFLOPs: 139.9421
2024-04-29 05:06:30 [INFO] [task_scheduler.cc:131] [Task #44: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_43] Trial #42: GFLOPs: 15.1362. Time: 5733.2293 us. Best GFLOPs: 139.9421
2024-04-29 05:06:30 [INFO] [task_scheduler.cc:131] [Task #44: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_43] Trial #43: GFLOPs: 61.2240. Time: 1417.4077 us. Best GFLOPs: 139.9421
2024-04-29 05:06:30 [INFO] [task_scheduler.cc:131] [Task #44: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_43] Trial #44: GFLOPs: 37.8014. Time: 2295.6677 us. Best GFLOPs: 139.9421
2024-04-29 05:06:30 [INFO] [task_scheduler.cc:131] [Task #44: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_43] Trial #45: GFLOPs: 53.8657. Time: 1611.0329 us. Best GFLOPs: 139.9421
2024-04-29 05:06:30 [INFO] [task_scheduler.cc:131] [Task #44: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_43] Trial #46: GFLOPs: 0.7493. Time: 115811.9413 us. Best GFLOPs: 139.9421
2024-04-29 05:06:30 [INFO] [task_scheduler.cc:131] [Task #44: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_43] Trial #47: GFLOPs: 41.8624. Time: 2072.9694 us. Best GFLOPs: 139.9421
2024-04-29 05:06:30 [INFO] [task_scheduler.cc:131] [Task #44: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_43] Trial #48: GFLOPs: 13.3581. Time: 6496.4053 us. Best GFLOPs: 139.9421
2024-04-29 05:06:30 [INFO] [task_scheduler.cc:131] [Task #44: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_43] Trial #49: GFLOPs: 20.7463. Time: 4182.8833 us. Best GFLOPs: 139.9421
2024-04-29 05:06:30 [INFO] [task_scheduler.cc:131] [Task #44: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_43] Trial #50: GFLOPs: 70.8984. Time: 1223.9964 us. Best GFLOPs: 139.9421
2024-04-29 05:06:30 [INFO] [task_scheduler.cc:131] [Task #44: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_43] Trial #51: GFLOPs: 0.4079. Time: 212753.8867 us. Best GFLOPs: 139.9421
2024-04-29 05:06:30 [INFO] [task_scheduler.cc:131] [Task #44: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_43] Trial #52: GFLOPs: 85.0971. Time: 1019.7686 us. Best GFLOPs: 139.9421
2024-04-29 05:06:30 [INFO] [task_scheduler.cc:121] [Task #44: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_43] Trial #53: Error in building:
LocalBuilder: Timeout, killed after 30.0 seconds
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(288), T.int64(14), T.int64(14), T.int64(4)), "float32"), p1: T.Buffer((T.int64(48), T.int64(288), T.int64(1), T.int64(1), T.int64(4), T.int64(4)), "float32"), p2: T.Buffer((T.int64(1), T.int64(48), T.int64(1), T.int64(1), T.int64(4)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(48), T.int64(14), T.int64(14), T.int64(4)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        conv2d_NCHWc = T.alloc_buffer((T.int64(1), T.int64(48), T.int64(14), T.int64(14), T.int64(4)))
        for n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_fused in T.parallel(T.int64(2), annotations={"pragma_auto_unroll_max_step": 512, "pragma_unroll_explicit": 1}):
            for n_1, oc_chunk_1, oh_1, ow_1, oc_block_1 in T.grid(T.int64(1), T.int64(1), T.int64(1), T.int64(14), T.int64(4)):
                for n_2_init, oc_chunk_2_init, oh_2_init, ow_2_init, oc_block_2_init, n_3_init, oc_chunk_3_init, oh_3_init, ow_3_init, oc_block_3_init in T.grid(T.int64(1), T.int64(6), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(8), T.int64(7), T.int64(1), T.int64(1)):
                    with T.block("conv2d_NCHWc_init"):
                        v_n = T.axis.spatial(T.int64(1), n_1 + n_2_init + n_3_init)
                        v_oc_chunk = T.axis.spatial(T.int64(48), oc_chunk_1 * T.int64(48) + oc_chunk_2_init * T.int64(8) + oc_chunk_3_init)
                        v_oh = T.axis.spatial(T.int64(14), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_fused * T.int64(7) + oh_1 * T.int64(7) + oh_2_init * T.int64(7) + oh_3_init)
                        v_ow = T.axis.spatial(T.int64(14), ow_1 + ow_2_init + ow_3_init)
                        v_oc_block = T.axis.spatial(T.int64(4), oc_block_1 + oc_block_2_init + oc_block_3_init)
                        T.reads()
                        T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                        T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                        conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = T.float32(0)
                for ic_0, kh_0, kw_0, n_2, oc_chunk_2, oh_2, ow_2, oc_block_2, ic_1, kh_1, kw_1, n_3, oc_chunk_3, oh_3, ow_3, oc_block_3 in T.grid(T.int64(18), T.int64(1), T.int64(1), T.int64(1), T.int64(6), T.int64(1), T.int64(1), T.int64(1), T.int64(64), T.int64(1), T.int64(1), T.int64(1), T.int64(8), T.int64(7), T.int64(1), T.int64(1)):
                    with T.block("conv2d_NCHWc_update"):
                        v_n = T.axis.spatial(T.int64(1), n_1 + n_2 + n_3)
                        v_oc_chunk = T.axis.spatial(T.int64(48), oc_chunk_1 * T.int64(48) + oc_chunk_2 * T.int64(8) + oc_chunk_3)
                        v_oh = T.axis.spatial(T.int64(14), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_fused * T.int64(7) + oh_1 * T.int64(7) + oh_2 * T.int64(7) + oh_3)
                        v_ow = T.axis.spatial(T.int64(14), ow_1 + ow_2 + ow_3)
                        v_oc_block = T.axis.spatial(T.int64(4), oc_block_1 + oc_block_2 + oc_block_3)
                        v_ic = T.axis.reduce(T.int64(1152), ic_0 * T.int64(64) + ic_1)
                        v_kh = T.axis.reduce(T.int64(1), kh_0 + kh_1)
                        v_kw = T.axis.reduce(T.int64(1), kw_0 + kw_1)
                        T.reads(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block], p0[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)], p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block])
                        T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                        T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                        conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] + p0[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)] * p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block]
            for ax0, ax1, ax2 in T.grid(T.int64(1), T.int64(48), T.int64(7)):
                for ax3_ax4_fused in T.vectorized(T.int64(56)):
                    with T.block("T_relu"):
                        v_ax0, v_ax1 = T.axis.remap("SS", [ax0, ax1])
                        v_ax2 = T.axis.spatial(T.int64(14), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_fused * T.int64(7) + ax2)
                        v_ax3 = T.axis.spatial(T.int64(14), ax3_ax4_fused // T.int64(4))
                        v_ax4 = T.axis.spatial(T.int64(4), ax3_ax4_fused % T.int64(4))
                        T.reads(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4])
                        T.writes(T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                        T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.max(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] + p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4], T.float32(0))
b0 = sch.get_block(name="conv2d_NCHWc", func_name="main")
b1 = sch.get_block(name="T_add", func_name="main")
b2 = sch.get_block(name="root", func_name="main")
sch.compute_inline(block=b1)
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.tiling_structure", ann_val="SSRSRS")
l3, l4, l5, l6, l7, l8, l9, l10 = sch.get_loops(block=b0)
v11, v12, v13, v14 = sch.sample_perfect_tile(loop=l3, n=4, max_innermost_factor=64, decision=[1, 1, 1, 1])
l15, l16, l17, l18 = sch.split(loop=l3, factors=[v11, v12, v13, v14], preserve_unit_iters=True)
v19, v20, v21, v22 = sch.sample_perfect_tile(loop=l4, n=4, max_innermost_factor=64, decision=[1, 1, 6, 8])
l23, l24, l25, l26 = sch.split(loop=l4, factors=[v19, v20, v21, v22], preserve_unit_iters=True)
v27, v28, v29, v30 = sch.sample_perfect_tile(loop=l5, n=4, max_innermost_factor=64, decision=[2, 1, 1, 7])
l31, l32, l33, l34 = sch.split(loop=l5, factors=[v27, v28, v29, v30], preserve_unit_iters=True)
v35, v36, v37, v38 = sch.sample_perfect_tile(loop=l6, n=4, max_innermost_factor=64, decision=[1, 14, 1, 1])
l39, l40, l41, l42 = sch.split(loop=l6, factors=[v35, v36, v37, v38], preserve_unit_iters=True)
v43, v44, v45, v46 = sch.sample_perfect_tile(loop=l7, n=4, max_innermost_factor=64, decision=[1, 4, 1, 1])
l47, l48, l49, l50 = sch.split(loop=l7, factors=[v43, v44, v45, v46], preserve_unit_iters=True)
v51, v52 = sch.sample_perfect_tile(loop=l8, n=2, max_innermost_factor=64, decision=[18, 64])
l53, l54 = sch.split(loop=l8, factors=[v51, v52], preserve_unit_iters=True)
v55, v56 = sch.sample_perfect_tile(loop=l9, n=2, max_innermost_factor=64, decision=[1, 1])
l57, l58 = sch.split(loop=l9, factors=[v55, v56], preserve_unit_iters=True)
v59, v60 = sch.sample_perfect_tile(loop=l10, n=2, max_innermost_factor=64, decision=[1, 1])
l61, l62 = sch.split(loop=l10, factors=[v59, v60], preserve_unit_iters=True)
sch.reorder(l15, l23, l31, l39, l47, l16, l24, l32, l40, l48, l53, l57, l61, l17, l25, l33, l41, l49, l54, l58, l62, l18, l26, l34, l42, l50)
b63, = sch.get_consumers(block=b0)
sch.reverse_compute_at(block=b63, loop=l47, preserve_unit_loops=True, index=-1)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.vectorize", ann_val=64)
v64 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.unroll_explicit", ann_val=v64)
sch.enter_postproc()
b65 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b65, ann_key="meta_schedule.parallel")
sch.unannotate(block_or_loop=b65, ann_key="meta_schedule.vectorize")
sch.unannotate(block_or_loop=b65, ann_key="meta_schedule.unroll_explicit")
b66, b67 = sch.get_child_blocks(b65)
l68, l69, l70, l71, l72, l73, l74, l75, l76, l77, l78, l79, l80, l81, l82, l83, l84, l85, l86, l87, l88, l89, l90, l91, l92, l93 = sch.get_loops(block=b66)
l94 = sch.fuse(l68, l69, l70, l71, l72, preserve_unit_iters=True)
sch.parallel(loop=l94)
sch.annotate(block_or_loop=l94, ann_key="pragma_auto_unroll_max_step", ann_val=512)
sch.annotate(block_or_loop=l94, ann_key="pragma_unroll_explicit", ann_val=1)
l95, l96, l97, l98, l99, l100 = sch.get_loops(block=b67)
l101 = sch.fuse(l99, l100, preserve_unit_iters=True)
sch.vectorize(loop=l101)
b102 = sch.get_block(name="conv2d_NCHWc", func_name="main")
l103, l104, l105, l106, l107, l108, l109, l110, l111, l112, l113, l114, l115, l116, l117, l118, l119, l120, l121, l122, l123, l124 = sch.get_loops(block=b102)
b125 = sch.decompose_reduction(block=b102, loop=l109)
2024-04-29 05:06:30 [INFO] [task_scheduler.cc:131] [Task #44: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_43] Trial #54: GFLOPs: 89.2550. Time: 972.2639 us. Best GFLOPs: 139.9421
2024-04-29 05:06:30 [INFO] [task_scheduler.cc:131] [Task #44: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_43] Trial #55: GFLOPs: 4.0733. Time: 21304.5716 us. Best GFLOPs: 139.9421
2024-04-29 05:06:30 [INFO] [task_scheduler.cc:131] [Task #44: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_43] Trial #56: GFLOPs: 5.0591. Time: 17153.2429 us. Best GFLOPs: 139.9421
2024-04-29 05:06:30 [INFO] [task_scheduler.cc:131] [Task #44: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_43] Trial #57: GFLOPs: 85.4818. Time: 1015.1802 us. Best GFLOPs: 139.9421
2024-04-29 05:06:30 [INFO] [task_scheduler.cc:131] [Task #44: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_43] Trial #58: GFLOPs: 3.6217. Time: 23960.6514 us. Best GFLOPs: 139.9421
2024-04-29 05:06:30 [INFO] [task_scheduler.cc:131] [Task #44: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_43] Trial #59: GFLOPs: 31.3456. Time: 2768.4700 us. Best GFLOPs: 139.9421
2024-04-29 05:06:30 [INFO] [task_scheduler.cc:131] [Task #44: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_43] Trial #60: GFLOPs: 87.3030. Time: 994.0021 us. Best GFLOPs: 139.9421
2024-04-29 05:06:30 [INFO] [task_scheduler.cc:131] [Task #44: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_43] Trial #61: GFLOPs: 73.6255. Time: 1178.6598 us. Best GFLOPs: 139.9421
2024-04-29 05:06:30 [INFO] [task_scheduler.cc:131] [Task #44: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_43] Trial #62: GFLOPs: 26.0566. Time: 3330.4149 us. Best GFLOPs: 139.9421
2024-04-29 05:06:30 [INFO] [task_scheduler.cc:131] [Task #44: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_43] Trial #63: GFLOPs: 42.1692. Time: 2057.8857 us. Best GFLOPs: 139.9421
2024-04-29 05:06:30 [INFO] [task_scheduler.cc:131] [Task #44: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_43] Trial #64: GFLOPs: 49.2742. Time: 1761.1521 us. Best GFLOPs: 139.9421
2024-04-29 07:30:17 [INFO] [evolutionary_search.cc:713] Generating candidates......
2024-04-29 07:30:17 [INFO] [evolutionary_search.cc:715] Picked top 61 candidate(s) from database
2024-04-29 07:30:20 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0xef9c248)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x74f8a18)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x86a16b8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0xfaee3c8)]: 0 failure(s)
2024-04-29 07:30:20 [INFO] [evolutionary_search.cc:723] Sampled 451 candidate(s)
2024-04-29 07:30:25 [INFO] [evolutionary_search.cc:621] Evolve iter #0 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0xef9c248)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x74f8a18)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x86a16b8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0xfaee3c8)]: 0 failure(s)
2024-04-29 07:30:30 [INFO] [evolutionary_search.cc:621] Evolve iter #1 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0xef9c248)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x74f8a18)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x86a16b8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0xfaee3c8)]: 0 failure(s)
2024-04-29 07:30:36 [INFO] [evolutionary_search.cc:621] Evolve iter #2 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0xef9c248)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x74f8a18)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x86a16b8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0xfaee3c8)]: 0 failure(s)
2024-04-29 07:30:41 [INFO] [evolutionary_search.cc:621] Evolve iter #3 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0xef9c248)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x74f8a18)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x86a16b8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0xfaee3c8)]: 0 failure(s)
2024-04-29 07:30:44 [INFO] [evolutionary_search.cc:649] Scores of the best 64 candidates:
[1 : 16]:	0.8906  0.8821  0.8691  0.8677  0.8675  0.8627  0.8505  0.8502  0.8350  0.8306  0.8285  0.8220  0.8182  0.8148  0.8142  0.8120
[17 : 32]:	0.8041  0.8018  0.8014  0.7976  0.7952  0.7941  0.7898  0.7878  0.7861  0.7815  0.7746  0.7654  0.7615  0.7573  0.7555  0.7541
[33 : 48]:	0.7533  0.7516  0.7511  0.7497  0.7497  0.7481  0.7424  0.7407  0.7363  0.7359  0.7352  0.7351  0.7351  0.7323  0.7317  0.7291
[49 : 64]:	0.7273  0.7252  0.7243  0.7240  0.7230  0.7217  0.7207  0.7206  0.7206  0.7199  0.7184  0.7177  0.7160  0.7150  0.7136  0.7135
2024-04-29 07:30:44 [INFO] [evolutionary_search.cc:727] Got 64 candidate(s) with evolutionary search
2024-04-29 07:30:44 [INFO] [evolutionary_search.cc:730] Sending 64 candidates(s) for measurement
2024-04-29 07:32:26 [INFO] [task_scheduler.cc:131] [Task #44: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_43] Trial #65: GFLOPs: 186.4121. Time: 465.5245 us. Best GFLOPs: 186.4121
2024-04-29 07:32:26 [INFO] [task_scheduler.cc:131] [Task #44: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_43] Trial #66: GFLOPs: 144.6164. Time: 600.0661 us. Best GFLOPs: 186.4121
2024-04-29 07:32:26 [INFO] [task_scheduler.cc:131] [Task #44: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_43] Trial #67: GFLOPs: 142.8101. Time: 607.6558 us. Best GFLOPs: 186.4121
2024-04-29 07:32:26 [INFO] [task_scheduler.cc:131] [Task #44: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_43] Trial #68: GFLOPs: 115.2722. Time: 752.8213 us. Best GFLOPs: 186.4121
2024-04-29 07:32:26 [INFO] [task_scheduler.cc:131] [Task #44: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_43] Trial #69: GFLOPs: 139.3219. Time: 622.8695 us. Best GFLOPs: 186.4121
2024-04-29 07:32:26 [INFO] [task_scheduler.cc:131] [Task #44: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_43] Trial #70: GFLOPs: 208.5528. Time: 416.1027 us. Best GFLOPs: 208.5528
2024-04-29 07:32:26 [INFO] [task_scheduler.cc:131] [Task #44: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_43] Trial #71: GFLOPs: 152.1233. Time: 570.4545 us. Best GFLOPs: 208.5528
2024-04-29 07:32:26 [INFO] [task_scheduler.cc:131] [Task #44: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_43] Trial #72: GFLOPs: 149.9793. Time: 578.6090 us. Best GFLOPs: 208.5528
2024-04-29 07:32:26 [INFO] [task_scheduler.cc:131] [Task #44: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_43] Trial #73: GFLOPs: 155.6585. Time: 557.4985 us. Best GFLOPs: 208.5528
2024-04-29 07:32:26 [INFO] [task_scheduler.cc:131] [Task #44: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_43] Trial #74: GFLOPs: 174.4420. Time: 497.4685 us. Best GFLOPs: 208.5528
2024-04-29 07:32:26 [INFO] [task_scheduler.cc:131] [Task #44: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_43] Trial #75: GFLOPs: 237.4215. Time: 365.5078 us. Best GFLOPs: 237.4215
2024-04-29 07:32:26 [INFO] [task_scheduler.cc:131] [Task #44: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_43] Trial #76: GFLOPs: 144.8865. Time: 598.9473 us. Best GFLOPs: 237.4215
2024-04-29 07:32:26 [INFO] [task_scheduler.cc:131] [Task #44: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_43] Trial #77: GFLOPs: 89.6893. Time: 967.5561 us. Best GFLOPs: 237.4215
2024-04-29 07:32:26 [INFO] [task_scheduler.cc:131] [Task #44: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_43] Trial #78: GFLOPs: 255.3710. Time: 339.8169 us. Best GFLOPs: 255.3710
2024-04-29 07:32:26 [INFO] [task_scheduler.cc:131] [Task #44: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_43] Trial #79: GFLOPs: 132.6867. Time: 654.0171 us. Best GFLOPs: 255.3710
2024-04-29 07:32:26 [INFO] [task_scheduler.cc:131] [Task #44: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_43] Trial #80: GFLOPs: 249.7193. Time: 347.5078 us. Best GFLOPs: 255.3710
2024-04-29 07:32:26 [INFO] [task_scheduler.cc:131] [Task #44: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_43] Trial #81: GFLOPs: 152.2875. Time: 569.8392 us. Best GFLOPs: 255.3710
2024-04-29 07:32:26 [INFO] [task_scheduler.cc:131] [Task #44: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_43] Trial #82: GFLOPs: 143.0170. Time: 606.7766 us. Best GFLOPs: 255.3710
2024-04-29 07:32:26 [INFO] [task_scheduler.cc:131] [Task #44: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_43] Trial #83: GFLOPs: 114.6042. Time: 757.2096 us. Best GFLOPs: 255.3710
2024-04-29 07:32:26 [INFO] [task_scheduler.cc:131] [Task #44: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_43] Trial #84: GFLOPs: 127.0700. Time: 682.9259 us. Best GFLOPs: 255.3710
2024-04-29 07:32:26 [INFO] [task_scheduler.cc:131] [Task #44: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_43] Trial #85: GFLOPs: 157.7310. Time: 550.1732 us. Best GFLOPs: 255.3710
2024-04-29 07:32:26 [INFO] [task_scheduler.cc:131] [Task #44: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_43] Trial #86: GFLOPs: 247.8261. Time: 350.1625 us. Best GFLOPs: 255.3710
2024-04-29 07:32:26 [INFO] [task_scheduler.cc:131] [Task #44: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_43] Trial #87: GFLOPs: 167.7077. Time: 517.4444 us. Best GFLOPs: 255.3710
2024-04-29 07:32:26 [INFO] [task_scheduler.cc:131] [Task #44: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_43] Trial #88: GFLOPs: 191.8949. Time: 452.2234 us. Best GFLOPs: 255.3710
2024-04-29 07:32:26 [INFO] [task_scheduler.cc:131] [Task #44: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_43] Trial #89: GFLOPs: 101.0474. Time: 858.7991 us. Best GFLOPs: 255.3710
2024-04-29 07:32:26 [INFO] [task_scheduler.cc:131] [Task #44: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_43] Trial #90: GFLOPs: 167.7431. Time: 517.3350 us. Best GFLOPs: 255.3710
2024-04-29 07:32:26 [INFO] [task_scheduler.cc:131] [Task #44: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_43] Trial #91: GFLOPs: 199.4586. Time: 435.0747 us. Best GFLOPs: 255.3710
2024-04-29 07:32:26 [INFO] [task_scheduler.cc:131] [Task #44: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_43] Trial #92: GFLOPs: 183.1596. Time: 473.7910 us. Best GFLOPs: 255.3710
2024-04-29 07:32:26 [INFO] [task_scheduler.cc:131] [Task #44: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_43] Trial #93: GFLOPs: 120.2169. Time: 721.8569 us. Best GFLOPs: 255.3710
2024-04-29 07:32:26 [INFO] [task_scheduler.cc:131] [Task #44: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_43] Trial #94: GFLOPs: 207.3680. Time: 418.4802 us. Best GFLOPs: 255.3710
2024-04-29 07:32:26 [INFO] [task_scheduler.cc:131] [Task #44: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_43] Trial #95: GFLOPs: 115.4520. Time: 751.6491 us. Best GFLOPs: 255.3710
2024-04-29 07:32:26 [INFO] [task_scheduler.cc:131] [Task #44: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_43] Trial #96: GFLOPs: 237.0832. Time: 366.0293 us. Best GFLOPs: 255.3710
2024-04-29 07:32:26 [INFO] [task_scheduler.cc:131] [Task #44: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_43] Trial #97: GFLOPs: 236.6099. Time: 366.7615 us. Best GFLOPs: 255.3710
2024-04-29 07:32:26 [INFO] [task_scheduler.cc:131] [Task #44: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_43] Trial #98: GFLOPs: 228.3268. Time: 380.0666 us. Best GFLOPs: 255.3710
2024-04-29 07:32:26 [INFO] [task_scheduler.cc:131] [Task #44: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_43] Trial #99: GFLOPs: 146.2033. Time: 593.5529 us. Best GFLOPs: 255.3710
2024-04-29 07:32:26 [INFO] [task_scheduler.cc:131] [Task #44: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_43] Trial #100: GFLOPs: 107.1064. Time: 810.2164 us. Best GFLOPs: 255.3710
2024-04-29 07:32:26 [INFO] [task_scheduler.cc:131] [Task #44: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_43] Trial #101: GFLOPs: 105.7181. Time: 820.8564 us. Best GFLOPs: 255.3710
2024-04-29 07:32:26 [INFO] [task_scheduler.cc:131] [Task #44: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_43] Trial #102: GFLOPs: 93.1958. Time: 931.1518 us. Best GFLOPs: 255.3710
2024-04-29 07:32:26 [INFO] [task_scheduler.cc:131] [Task #44: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_43] Trial #103: GFLOPs: 195.1974. Time: 444.5724 us. Best GFLOPs: 255.3710
2024-04-29 07:32:26 [INFO] [task_scheduler.cc:131] [Task #44: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_43] Trial #104: GFLOPs: 176.5180. Time: 491.6178 us. Best GFLOPs: 255.3710
2024-04-29 07:32:26 [INFO] [task_scheduler.cc:131] [Task #44: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_43] Trial #105: GFLOPs: 179.0500. Time: 484.6657 us. Best GFLOPs: 255.3710
2024-04-29 07:32:26 [INFO] [task_scheduler.cc:131] [Task #44: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_43] Trial #106: GFLOPs: 232.9434. Time: 372.5342 us. Best GFLOPs: 255.3710
2024-04-29 07:32:26 [INFO] [task_scheduler.cc:131] [Task #44: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_43] Trial #107: GFLOPs: 216.6207. Time: 400.6053 us. Best GFLOPs: 255.3710
2024-04-29 07:32:26 [INFO] [task_scheduler.cc:131] [Task #44: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_43] Trial #108: GFLOPs: 166.0870. Time: 522.4937 us. Best GFLOPs: 255.3710
2024-04-29 07:32:26 [INFO] [task_scheduler.cc:131] [Task #44: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_43] Trial #109: GFLOPs: 165.9907. Time: 522.7968 us. Best GFLOPs: 255.3710
2024-04-29 07:32:26 [INFO] [task_scheduler.cc:131] [Task #44: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_43] Trial #110: GFLOPs: 131.6478. Time: 659.1787 us. Best GFLOPs: 255.3710
2024-04-29 07:32:26 [INFO] [task_scheduler.cc:131] [Task #44: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_43] Trial #111: GFLOPs: 105.7052. Time: 820.9565 us. Best GFLOPs: 255.3710
2024-04-29 07:32:26 [INFO] [task_scheduler.cc:131] [Task #44: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_43] Trial #112: GFLOPs: 142.9435. Time: 607.0888 us. Best GFLOPs: 255.3710
2024-04-29 07:32:26 [INFO] [task_scheduler.cc:131] [Task #44: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_43] Trial #113: GFLOPs: 394.6682. Time: 219.8794 us. Best GFLOPs: 394.6682
2024-04-29 07:32:26 [INFO] [task_scheduler.cc:131] [Task #44: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_43] Trial #114: GFLOPs: 176.7262. Time: 491.0387 us. Best GFLOPs: 394.6682
2024-04-29 07:32:26 [INFO] [task_scheduler.cc:131] [Task #44: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_43] Trial #115: GFLOPs: 64.6594. Time: 1342.1000 us. Best GFLOPs: 394.6682
2024-04-29 07:32:26 [INFO] [task_scheduler.cc:131] [Task #44: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_43] Trial #116: GFLOPs: 203.2244. Time: 427.0126 us. Best GFLOPs: 394.6682
2024-04-29 07:32:26 [INFO] [task_scheduler.cc:131] [Task #44: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_43] Trial #117: GFLOPs: 145.3864. Time: 596.8880 us. Best GFLOPs: 394.6682
2024-04-29 07:32:26 [INFO] [task_scheduler.cc:131] [Task #44: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_43] Trial #118: GFLOPs: 112.9330. Time: 768.4150 us. Best GFLOPs: 394.6682
2024-04-29 07:32:26 [INFO] [task_scheduler.cc:131] [Task #44: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_43] Trial #119: GFLOPs: 157.0916. Time: 552.4128 us. Best GFLOPs: 394.6682
2024-04-29 07:32:26 [INFO] [task_scheduler.cc:131] [Task #44: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_43] Trial #120: GFLOPs: 196.9612. Time: 440.5912 us. Best GFLOPs: 394.6682
2024-04-29 07:32:26 [INFO] [task_scheduler.cc:131] [Task #44: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_43] Trial #121: GFLOPs: 91.1002. Time: 952.5708 us. Best GFLOPs: 394.6682
2024-04-29 07:32:26 [INFO] [task_scheduler.cc:131] [Task #44: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_43] Trial #122: GFLOPs: 45.1368. Time: 1922.5843 us. Best GFLOPs: 394.6682
2024-04-29 07:32:26 [INFO] [task_scheduler.cc:131] [Task #44: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_43] Trial #123: GFLOPs: 174.6898. Time: 496.7629 us. Best GFLOPs: 394.6682
2024-04-29 07:32:26 [INFO] [task_scheduler.cc:131] [Task #44: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_43] Trial #124: GFLOPs: 141.0835. Time: 615.0923 us. Best GFLOPs: 394.6682
2024-04-29 07:32:26 [INFO] [task_scheduler.cc:131] [Task #44: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_43] Trial #125: GFLOPs: 162.6085. Time: 533.6708 us. Best GFLOPs: 394.6682
2024-04-29 07:32:26 [INFO] [task_scheduler.cc:121] [Task #44: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_43] Trial #126: Error in building:
LocalBuilder: Timeout, killed after 30.0 seconds
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(288), T.int64(14), T.int64(14), T.int64(4)), "float32"), p1: T.Buffer((T.int64(48), T.int64(288), T.int64(1), T.int64(1), T.int64(4), T.int64(4)), "float32"), p2: T.Buffer((T.int64(1), T.int64(48), T.int64(1), T.int64(1), T.int64(4)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(48), T.int64(14), T.int64(14), T.int64(4)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        conv2d_NCHWc = T.alloc_buffer((T.int64(1), T.int64(48), T.int64(14), T.int64(14), T.int64(4)))
        for n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused in T.parallel(T.int64(168), annotations={"pragma_auto_unroll_max_step": 512, "pragma_unroll_explicit": 1}):
            for n_2_init, oc_chunk_2_init, oh_2_init, ow_2_init, oc_block_2_init, n_3_init, oc_chunk_3_init, oh_3_init, ow_3_init, oc_block_3_init in T.grid(T.int64(1), T.int64(4), T.int64(1), T.int64(1), T.int64(2), T.int64(1), T.int64(1), T.int64(14), T.int64(2), T.int64(1)):
                with T.block("conv2d_NCHWc_init"):
                    v_n = T.axis.spatial(T.int64(1), n_2_init + n_3_init)
                    v_oc_chunk = T.axis.spatial(T.int64(48), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused // T.int64(42) * T.int64(12) + n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused % T.int64(6) // T.int64(2) * T.int64(4) + oc_chunk_2_init + oc_chunk_3_init)
                    v_oh = T.axis.spatial(T.int64(14), oh_2_init * T.int64(14) + oh_3_init)
                    v_ow = T.axis.spatial(T.int64(14), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused % T.int64(42) // T.int64(6) * T.int64(2) + ow_2_init * T.int64(2) + ow_3_init)
                    v_oc_block = T.axis.spatial(T.int64(4), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused % T.int64(2) * T.int64(2) + oc_block_2_init + oc_block_3_init)
                    T.reads()
                    T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                    T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                    conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = T.float32(0)
            for ic_0, kh_0, kw_0, n_2, oc_chunk_2, oh_2, ow_2, oc_block_2, ic_1, kh_1, kw_1, n_3, oc_chunk_3, oh_3, ow_3, oc_block_3 in T.grid(T.int64(576), T.int64(1), T.int64(1), T.int64(1), T.int64(4), T.int64(1), T.int64(1), T.int64(2), T.int64(2), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(14), T.int64(2), T.int64(1)):
                with T.block("conv2d_NCHWc_update"):
                    v_n = T.axis.spatial(T.int64(1), n_2 + n_3)
                    v_oc_chunk = T.axis.spatial(T.int64(48), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused // T.int64(42) * T.int64(12) + n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused % T.int64(6) // T.int64(2) * T.int64(4) + oc_chunk_2 + oc_chunk_3)
                    v_oh = T.axis.spatial(T.int64(14), oh_2 * T.int64(14) + oh_3)
                    v_ow = T.axis.spatial(T.int64(14), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused % T.int64(42) // T.int64(6) * T.int64(2) + ow_2 * T.int64(2) + ow_3)
                    v_oc_block = T.axis.spatial(T.int64(4), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused % T.int64(2) * T.int64(2) + oc_block_2 + oc_block_3)
                    v_ic = T.axis.reduce(T.int64(1152), ic_0 * T.int64(2) + ic_1)
                    v_kh = T.axis.reduce(T.int64(1), kh_0 + kh_1)
                    v_kw = T.axis.reduce(T.int64(1), kw_0 + kw_1)
                    T.reads(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block], p0[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)], p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block])
                    T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                    T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                    conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] + p0[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)] * p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block]
        for ax0_ax1_ax2_ax3_ax4_fused_0 in T.parallel(T.int64(588)):
            for ax0_ax1_ax2_ax3_ax4_fused_1 in T.vectorized(T.int64(64)):
                with T.block("T_relu"):
                    v_ax0 = T.axis.spatial(T.int64(1), T.int64(0))
                    v_ax1 = T.axis.spatial(T.int64(48), (ax0_ax1_ax2_ax3_ax4_fused_0 * T.int64(64) + ax0_ax1_ax2_ax3_ax4_fused_1) // T.int64(784))
                    v_ax2 = T.axis.spatial(T.int64(14), (ax0_ax1_ax2_ax3_ax4_fused_0 * T.int64(64) + ax0_ax1_ax2_ax3_ax4_fused_1) % T.int64(784) // T.int64(56))
                    v_ax3 = T.axis.spatial(T.int64(14), (ax0_ax1_ax2_ax3_ax4_fused_0 * T.int64(64) + ax0_ax1_ax2_ax3_ax4_fused_1) % T.int64(56) // T.int64(4))
                    v_ax4 = T.axis.spatial(T.int64(4), (ax0_ax1_ax2_ax3_ax4_fused_0 * T.int64(64) + ax0_ax1_ax2_ax3_ax4_fused_1) % T.int64(4))
                    T.reads(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4])
                    T.writes(T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                    T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.max(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] + p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4], T.float32(0))
b0 = sch.get_block(name="conv2d_NCHWc", func_name="main")
b1 = sch.get_block(name="T_add", func_name="main")
b2 = sch.get_block(name="root", func_name="main")
sch.compute_inline(block=b1)
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.tiling_structure", ann_val="SSRSRS")
l3, l4, l5, l6, l7, l8, l9, l10 = sch.get_loops(block=b0)
v11, v12, v13, v14 = sch.sample_perfect_tile(loop=l3, n=4, max_innermost_factor=64, decision=[1, 1, 1, 1])
l15, l16, l17, l18 = sch.split(loop=l3, factors=[v11, v12, v13, v14], preserve_unit_iters=True)
v19, v20, v21, v22 = sch.sample_perfect_tile(loop=l4, n=4, max_innermost_factor=64, decision=[4, 3, 4, 1])
l23, l24, l25, l26 = sch.split(loop=l4, factors=[v19, v20, v21, v22], preserve_unit_iters=True)
v27, v28, v29, v30 = sch.sample_perfect_tile(loop=l5, n=4, max_innermost_factor=64, decision=[1, 1, 1, 14])
l31, l32, l33, l34 = sch.split(loop=l5, factors=[v27, v28, v29, v30], preserve_unit_iters=True)
v35, v36, v37, v38 = sch.sample_perfect_tile(loop=l6, n=4, max_innermost_factor=64, decision=[7, 1, 1, 2])
l39, l40, l41, l42 = sch.split(loop=l6, factors=[v35, v36, v37, v38], preserve_unit_iters=True)
v43, v44, v45, v46 = sch.sample_perfect_tile(loop=l7, n=4, max_innermost_factor=64, decision=[1, 2, 2, 1])
l47, l48, l49, l50 = sch.split(loop=l7, factors=[v43, v44, v45, v46], preserve_unit_iters=True)
v51, v52 = sch.sample_perfect_tile(loop=l8, n=2, max_innermost_factor=64, decision=[576, 2])
l53, l54 = sch.split(loop=l8, factors=[v51, v52], preserve_unit_iters=True)
v55, v56 = sch.sample_perfect_tile(loop=l9, n=2, max_innermost_factor=64, decision=[1, 1])
l57, l58 = sch.split(loop=l9, factors=[v55, v56], preserve_unit_iters=True)
v59, v60 = sch.sample_perfect_tile(loop=l10, n=2, max_innermost_factor=64, decision=[1, 1])
l61, l62 = sch.split(loop=l10, factors=[v59, v60], preserve_unit_iters=True)
sch.reorder(l15, l23, l31, l39, l47, l16, l24, l32, l40, l48, l53, l57, l61, l17, l25, l33, l41, l49, l54, l58, l62, l18, l26, l34, l42, l50)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.vectorize", ann_val=64)
v63 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.unroll_explicit", ann_val=v63)
sch.enter_postproc()
b64 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b64, ann_key="meta_schedule.parallel")
sch.unannotate(block_or_loop=b64, ann_key="meta_schedule.vectorize")
sch.unannotate(block_or_loop=b64, ann_key="meta_schedule.unroll_explicit")
b65, b66 = sch.get_child_blocks(b64)
l67, l68, l69, l70, l71, l72, l73, l74, l75, l76, l77, l78, l79, l80, l81, l82, l83, l84, l85, l86, l87, l88, l89, l90, l91, l92 = sch.get_loops(block=b65)
l93 = sch.fuse(l67, l68, l69, l70, l71, l72, l73, l74, l75, l76, preserve_unit_iters=True)
sch.parallel(loop=l93)
sch.annotate(block_or_loop=l93, ann_key="pragma_auto_unroll_max_step", ann_val=512)
sch.annotate(block_or_loop=l93, ann_key="pragma_unroll_explicit", ann_val=1)
l94, l95, l96, l97, l98 = sch.get_loops(block=b66)
l99 = sch.fuse(l94, l95, l96, l97, l98, preserve_unit_iters=True)
l100, l101 = sch.split(loop=l99, factors=[None, 64], preserve_unit_iters=True)
sch.parallel(loop=l100)
sch.vectorize(loop=l101)
b102 = sch.get_block(name="conv2d_NCHWc", func_name="main")
l103, l104, l105, l106, l107, l108, l109, l110, l111, l112, l113, l114, l115, l116, l117, l118, l119 = sch.get_loops(block=b102)
b120 = sch.decompose_reduction(block=b102, loop=l104)
2024-04-29 07:32:26 [INFO] [task_scheduler.cc:131] [Task #44: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_43] Trial #127: GFLOPs: 87.6249. Time: 990.3508 us. Best GFLOPs: 394.6682
2024-04-29 07:32:26 [INFO] [task_scheduler.cc:131] [Task #44: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_43] Trial #128: GFLOPs: 5.5417. Time: 15659.3576 us. Best GFLOPs: 394.6682
