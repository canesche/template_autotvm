2024-04-29 02:31:48 [INFO] [task_scheduler.cc:160] Initializing Task #53: "fused_nn_contrib_conv2d_NCHWc_add_nn_relu_52"
2024-04-29 02:31:48 [INFO] [task_scheduler.cc:35] 
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(180), T.int64(14), T.int64(14), T.int64(4)), "float32"), p1: T.Buffer((T.int64(48), T.int64(180), T.int64(1), T.int64(1), T.int64(4), T.int64(4)), "float32"), p2: T.Buffer((T.int64(1), T.int64(48), T.int64(1), T.int64(1), T.int64(4)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(48), T.int64(14), T.int64(14), T.int64(4)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        conv2d_NCHWc = T.alloc_buffer((T.int64(1), T.int64(48), T.int64(14), T.int64(14), T.int64(4)))
        T_add = T.alloc_buffer((T.int64(1), T.int64(48), T.int64(14), T.int64(14), T.int64(4)))
        for n, oc_chunk, oh, ow, oc_block, ic, kh, kw in T.grid(T.int64(1), T.int64(48), T.int64(14), T.int64(14), T.int64(4), T.int64(720), T.int64(1), T.int64(1)):
            with T.block("conv2d_NCHWc"):
                v_n, v_oc_chunk, v_oh, v_ow, v_oc_block, v_ic, v_kh, v_kw = T.axis.remap("SSSSSRRR", [n, oc_chunk, oh, ow, oc_block, ic, kh, kw])
                T.reads(p0[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)], p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block])
                T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                with T.init():
                    conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = T.float32(0)
                conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] + p0[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)] * p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block]
        for ax0, ax1, ax2, ax3, ax4 in T.grid(T.int64(1), T.int64(48), T.int64(14), T.int64(14), T.int64(4)):
            with T.block("T_add"):
                v_ax0, v_ax1, v_ax2, v_ax3, v_ax4 = T.axis.remap("SSSSS", [ax0, ax1, ax2, ax3, ax4])
                T.reads(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4])
                T.writes(T_add[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                T_add[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] + p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4]
        for ax0, ax1, ax2, ax3, ax4 in T.grid(T.int64(1), T.int64(48), T.int64(14), T.int64(14), T.int64(4)):
            with T.block("T_relu"):
                v_ax0, v_ax1, v_ax2, v_ax3, v_ax4 = T.axis.remap("SSSSS", [ax0, ax1, ax2, ax3, ax4])
                T.reads(T_add[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                T.writes(T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.max(T_add[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], T.float32(0))
2024-04-29 02:31:48 [INFO] [task_scheduler.cc:164] Total 3 design space(s) generated
2024-04-29 02:31:48 [INFO] [task_scheduler.cc:170] Design space #0:
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(180), T.int64(14), T.int64(14), T.int64(4)), "float32"), p1: T.Buffer((T.int64(48), T.int64(180), T.int64(1), T.int64(1), T.int64(4), T.int64(4)), "float32"), p2: T.Buffer((T.int64(1), T.int64(48), T.int64(1), T.int64(1), T.int64(4)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(48), T.int64(14), T.int64(14), T.int64(4)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        with T.block("root"):
            T.reads()
            T.writes()
            T.block_attr({"meta_schedule.parallel": 768, "meta_schedule.unroll_explicit": 0, "meta_schedule.vectorize": 64})
            conv2d_NCHWc = T.alloc_buffer((T.int64(1), T.int64(48), T.int64(14), T.int64(14), T.int64(4)))
            for n_0, oc_chunk_0, oh_0, ow_0, oc_block_0, n_1, oc_chunk_1, oh_1, ow_1, oc_block_1, ic_0, kh_0, kw_0, n_2, oc_chunk_2, oh_2, ow_2, oc_block_2, ic_1, kh_1, kw_1, n_3, oc_chunk_3, oh_3, ow_3, oc_block_3 in T.grid(T.int64(1), T.int64(1), T.int64(2), T.int64(1), T.int64(4), T.int64(1), T.int64(2), T.int64(1), T.int64(2), T.int64(1), T.int64(60), T.int64(1), T.int64(1), T.int64(1), T.int64(4), T.int64(7), T.int64(7), T.int64(1), T.int64(12), T.int64(1), T.int64(1), T.int64(1), T.int64(6), T.int64(1), T.int64(1), T.int64(1)):
                with T.block("conv2d_NCHWc"):
                    v_n = T.axis.spatial(T.int64(1), n_0 + n_1 + n_2 + n_3)
                    v_oc_chunk = T.axis.spatial(T.int64(48), oc_chunk_0 * T.int64(48) + oc_chunk_1 * T.int64(24) + oc_chunk_2 * T.int64(6) + oc_chunk_3)
                    v_oh = T.axis.spatial(T.int64(14), oh_0 * T.int64(7) + oh_1 * T.int64(7) + oh_2 + oh_3)
                    v_ow = T.axis.spatial(T.int64(14), ow_0 * T.int64(14) + ow_1 * T.int64(7) + ow_2 + ow_3)
                    v_oc_block = T.axis.spatial(T.int64(4), oc_block_0 + oc_block_1 + oc_block_2 + oc_block_3)
                    v_ic = T.axis.reduce(T.int64(720), ic_0 * T.int64(12) + ic_1)
                    v_kh = T.axis.reduce(T.int64(1), kh_0 + kh_1)
                    v_kw = T.axis.reduce(T.int64(1), kw_0 + kw_1)
                    T.reads(p0[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)], p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block])
                    T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                    T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                    with T.init():
                        conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = T.float32(0)
                    conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] + p0[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)] * p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block]
            for ax0, ax1, ax2, ax3, ax4 in T.grid(T.int64(1), T.int64(48), T.int64(14), T.int64(14), T.int64(4)):
                with T.block("T_relu"):
                    v_ax0, v_ax1, v_ax2, v_ax3, v_ax4 = T.axis.remap("SSSSS", [ax0, ax1, ax2, ax3, ax4])
                    T.reads(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4])
                    T.writes(T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                    T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.max(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] + p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4], T.float32(0))
b0 = sch.get_block(name="conv2d_NCHWc", func_name="main")
b1 = sch.get_block(name="T_add", func_name="main")
b2 = sch.get_block(name="root", func_name="main")
sch.compute_inline(block=b1)
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.tiling_structure", ann_val="SSRSRS")
l3, l4, l5, l6, l7, l8, l9, l10 = sch.get_loops(block=b0)
v11, v12, v13, v14 = sch.sample_perfect_tile(loop=l3, n=4, max_innermost_factor=64, decision=[1, 1, 1, 1])
l15, l16, l17, l18 = sch.split(loop=l3, factors=[v11, v12, v13, v14], preserve_unit_iters=True)
v19, v20, v21, v22 = sch.sample_perfect_tile(loop=l4, n=4, max_innermost_factor=64, decision=[1, 2, 4, 6])
l23, l24, l25, l26 = sch.split(loop=l4, factors=[v19, v20, v21, v22], preserve_unit_iters=True)
v27, v28, v29, v30 = sch.sample_perfect_tile(loop=l5, n=4, max_innermost_factor=64, decision=[2, 1, 7, 1])
l31, l32, l33, l34 = sch.split(loop=l5, factors=[v27, v28, v29, v30], preserve_unit_iters=True)
v35, v36, v37, v38 = sch.sample_perfect_tile(loop=l6, n=4, max_innermost_factor=64, decision=[1, 2, 7, 1])
l39, l40, l41, l42 = sch.split(loop=l6, factors=[v35, v36, v37, v38], preserve_unit_iters=True)
v43, v44, v45, v46 = sch.sample_perfect_tile(loop=l7, n=4, max_innermost_factor=64, decision=[4, 1, 1, 1])
l47, l48, l49, l50 = sch.split(loop=l7, factors=[v43, v44, v45, v46], preserve_unit_iters=True)
v51, v52 = sch.sample_perfect_tile(loop=l8, n=2, max_innermost_factor=64, decision=[60, 12])
l53, l54 = sch.split(loop=l8, factors=[v51, v52], preserve_unit_iters=True)
v55, v56 = sch.sample_perfect_tile(loop=l9, n=2, max_innermost_factor=64, decision=[1, 1])
l57, l58 = sch.split(loop=l9, factors=[v55, v56], preserve_unit_iters=True)
v59, v60 = sch.sample_perfect_tile(loop=l10, n=2, max_innermost_factor=64, decision=[1, 1])
l61, l62 = sch.split(loop=l10, factors=[v59, v60], preserve_unit_iters=True)
sch.reorder(l15, l23, l31, l39, l47, l16, l24, l32, l40, l48, l53, l57, l61, l17, l25, l33, l41, l49, l54, l58, l62, l18, l26, l34, l42, l50)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.vectorize", ann_val=64)
v63 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=0)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.unroll_explicit", ann_val=v63)
2024-04-29 02:31:48 [INFO] [task_scheduler.cc:170] Design space #1:
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(180), T.int64(14), T.int64(14), T.int64(4)), "float32"), p1: T.Buffer((T.int64(48), T.int64(180), T.int64(1), T.int64(1), T.int64(4), T.int64(4)), "float32"), p2: T.Buffer((T.int64(1), T.int64(48), T.int64(1), T.int64(1), T.int64(4)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(48), T.int64(14), T.int64(14), T.int64(4)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        with T.block("root"):
            T.reads()
            T.writes()
            T.block_attr({"meta_schedule.parallel": 768, "meta_schedule.unroll_explicit": 16, "meta_schedule.vectorize": 64})
            conv2d_NCHWc = T.alloc_buffer((T.int64(1), T.int64(48), T.int64(14), T.int64(14), T.int64(4)))
            for n_0, oc_chunk_0, oh_0, ow_0, oc_block_0, n_1, oc_chunk_1, oh_1, ow_1, oc_block_1 in T.grid(T.int64(1), T.int64(1), T.int64(2), T.int64(1), T.int64(4), T.int64(1), T.int64(2), T.int64(1), T.int64(2), T.int64(1)):
                for ic_0, kh_0, kw_0, n_2, oc_chunk_2, oh_2, ow_2, oc_block_2, ic_1, kh_1, kw_1, n_3, oc_chunk_3, oh_3, ow_3, oc_block_3 in T.grid(T.int64(60), T.int64(1), T.int64(1), T.int64(1), T.int64(4), T.int64(7), T.int64(7), T.int64(1), T.int64(12), T.int64(1), T.int64(1), T.int64(1), T.int64(6), T.int64(1), T.int64(1), T.int64(1)):
                    with T.block("conv2d_NCHWc"):
                        v_n = T.axis.spatial(T.int64(1), n_0 + n_1 + n_2 + n_3)
                        v_oc_chunk = T.axis.spatial(T.int64(48), oc_chunk_0 * T.int64(48) + oc_chunk_1 * T.int64(24) + oc_chunk_2 * T.int64(6) + oc_chunk_3)
                        v_oh = T.axis.spatial(T.int64(14), oh_0 * T.int64(7) + oh_1 * T.int64(7) + oh_2 + oh_3)
                        v_ow = T.axis.spatial(T.int64(14), ow_0 * T.int64(14) + ow_1 * T.int64(7) + ow_2 + ow_3)
                        v_oc_block = T.axis.spatial(T.int64(4), oc_block_0 + oc_block_1 + oc_block_2 + oc_block_3)
                        v_ic = T.axis.reduce(T.int64(720), ic_0 * T.int64(12) + ic_1)
                        v_kh = T.axis.reduce(T.int64(1), kh_0 + kh_1)
                        v_kw = T.axis.reduce(T.int64(1), kw_0 + kw_1)
                        T.reads(p0[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)], p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block])
                        T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                        T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                        with T.init():
                            conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = T.float32(0)
                        conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] + p0[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)] * p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block]
                for ax0, ax1, ax2, ax3, ax4 in T.grid(T.int64(1), T.int64(24), T.int64(7), T.int64(7), T.int64(1)):
                    with T.block("T_relu"):
                        v_ax0 = T.axis.spatial(T.int64(1), ax0)
                        v_ax1 = T.axis.spatial(T.int64(48), oc_chunk_1 * T.int64(24) + ax1)
                        v_ax2 = T.axis.spatial(T.int64(14), oh_0 * T.int64(7) + ax2)
                        v_ax3 = T.axis.spatial(T.int64(14), ow_1 * T.int64(7) + ax3)
                        v_ax4 = T.axis.spatial(T.int64(4), oc_block_0 + ax4)
                        T.reads(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4])
                        T.writes(T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                        T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.max(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] + p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4], T.float32(0))
b0 = sch.get_block(name="conv2d_NCHWc", func_name="main")
b1 = sch.get_block(name="T_add", func_name="main")
b2 = sch.get_block(name="root", func_name="main")
sch.compute_inline(block=b1)
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.tiling_structure", ann_val="SSRSRS")
l3, l4, l5, l6, l7, l8, l9, l10 = sch.get_loops(block=b0)
v11, v12, v13, v14 = sch.sample_perfect_tile(loop=l3, n=4, max_innermost_factor=64, decision=[1, 1, 1, 1])
l15, l16, l17, l18 = sch.split(loop=l3, factors=[v11, v12, v13, v14], preserve_unit_iters=True)
v19, v20, v21, v22 = sch.sample_perfect_tile(loop=l4, n=4, max_innermost_factor=64, decision=[1, 2, 4, 6])
l23, l24, l25, l26 = sch.split(loop=l4, factors=[v19, v20, v21, v22], preserve_unit_iters=True)
v27, v28, v29, v30 = sch.sample_perfect_tile(loop=l5, n=4, max_innermost_factor=64, decision=[2, 1, 7, 1])
l31, l32, l33, l34 = sch.split(loop=l5, factors=[v27, v28, v29, v30], preserve_unit_iters=True)
v35, v36, v37, v38 = sch.sample_perfect_tile(loop=l6, n=4, max_innermost_factor=64, decision=[1, 2, 7, 1])
l39, l40, l41, l42 = sch.split(loop=l6, factors=[v35, v36, v37, v38], preserve_unit_iters=True)
v43, v44, v45, v46 = sch.sample_perfect_tile(loop=l7, n=4, max_innermost_factor=64, decision=[4, 1, 1, 1])
l47, l48, l49, l50 = sch.split(loop=l7, factors=[v43, v44, v45, v46], preserve_unit_iters=True)
v51, v52 = sch.sample_perfect_tile(loop=l8, n=2, max_innermost_factor=64, decision=[60, 12])
l53, l54 = sch.split(loop=l8, factors=[v51, v52], preserve_unit_iters=True)
v55, v56 = sch.sample_perfect_tile(loop=l9, n=2, max_innermost_factor=64, decision=[1, 1])
l57, l58 = sch.split(loop=l9, factors=[v55, v56], preserve_unit_iters=True)
v59, v60 = sch.sample_perfect_tile(loop=l10, n=2, max_innermost_factor=64, decision=[1, 1])
l61, l62 = sch.split(loop=l10, factors=[v59, v60], preserve_unit_iters=True)
sch.reorder(l15, l23, l31, l39, l47, l16, l24, l32, l40, l48, l53, l57, l61, l17, l25, l33, l41, l49, l54, l58, l62, l18, l26, l34, l42, l50)
b63, = sch.get_consumers(block=b0)
sch.reverse_compute_at(block=b63, loop=l48, preserve_unit_loops=True, index=-1)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.vectorize", ann_val=64)
v64 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=1)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.unroll_explicit", ann_val=v64)
2024-04-29 02:31:48 [INFO] [task_scheduler.cc:170] Design space #2:
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(180), T.int64(14), T.int64(14), T.int64(4)), "float32"), p1: T.Buffer((T.int64(48), T.int64(180), T.int64(1), T.int64(1), T.int64(4), T.int64(4)), "float32"), p2: T.Buffer((T.int64(1), T.int64(48), T.int64(1), T.int64(1), T.int64(4)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(48), T.int64(14), T.int64(14), T.int64(4)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        with T.block("root"):
            T.reads()
            T.writes()
            T.block_attr({"meta_schedule.parallel": 768, "meta_schedule.unroll_explicit": 512, "meta_schedule.vectorize": 64})
            conv2d_NCHWc = T.alloc_buffer((T.int64(1), T.int64(48), T.int64(14), T.int64(14), T.int64(4)))
            for n_0, oc_chunk_0, oh_0, ow_0, oc_block_0 in T.grid(T.int64(1), T.int64(1), T.int64(2), T.int64(1), T.int64(4)):
                for n_1, oc_chunk_1, oh_1, ow_1, oc_block_1, ic_0, kh_0, kw_0, n_2, oc_chunk_2, oh_2, ow_2, oc_block_2, ic_1, kh_1, kw_1, n_3, oc_chunk_3, oh_3, ow_3, oc_block_3 in T.grid(T.int64(1), T.int64(2), T.int64(1), T.int64(2), T.int64(1), T.int64(60), T.int64(1), T.int64(1), T.int64(1), T.int64(4), T.int64(7), T.int64(7), T.int64(1), T.int64(12), T.int64(1), T.int64(1), T.int64(1), T.int64(6), T.int64(1), T.int64(1), T.int64(1)):
                    with T.block("conv2d_NCHWc"):
                        v_n = T.axis.spatial(T.int64(1), n_0 + n_1 + n_2 + n_3)
                        v_oc_chunk = T.axis.spatial(T.int64(48), oc_chunk_0 * T.int64(48) + oc_chunk_1 * T.int64(24) + oc_chunk_2 * T.int64(6) + oc_chunk_3)
                        v_oh = T.axis.spatial(T.int64(14), oh_0 * T.int64(7) + oh_1 * T.int64(7) + oh_2 + oh_3)
                        v_ow = T.axis.spatial(T.int64(14), ow_0 * T.int64(14) + ow_1 * T.int64(7) + ow_2 + ow_3)
                        v_oc_block = T.axis.spatial(T.int64(4), oc_block_0 + oc_block_1 + oc_block_2 + oc_block_3)
                        v_ic = T.axis.reduce(T.int64(720), ic_0 * T.int64(12) + ic_1)
                        v_kh = T.axis.reduce(T.int64(1), kh_0 + kh_1)
                        v_kw = T.axis.reduce(T.int64(1), kw_0 + kw_1)
                        T.reads(p0[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)], p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block])
                        T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                        T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                        with T.init():
                            conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = T.float32(0)
                        conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] + p0[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)] * p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block]
                for ax0, ax1, ax2, ax3, ax4 in T.grid(T.int64(1), T.int64(48), T.int64(7), T.int64(14), T.int64(1)):
                    with T.block("T_relu"):
                        v_ax0, v_ax1 = T.axis.remap("SS", [ax0, ax1])
                        v_ax2 = T.axis.spatial(T.int64(14), oh_0 * T.int64(7) + ax2)
                        v_ax3 = T.axis.spatial(T.int64(14), ax3)
                        v_ax4 = T.axis.spatial(T.int64(4), oc_block_0 + ax4)
                        T.reads(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4])
                        T.writes(T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                        T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.max(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] + p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4], T.float32(0))
b0 = sch.get_block(name="conv2d_NCHWc", func_name="main")
b1 = sch.get_block(name="T_add", func_name="main")
b2 = sch.get_block(name="root", func_name="main")
sch.compute_inline(block=b1)
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.tiling_structure", ann_val="SSRSRS")
l3, l4, l5, l6, l7, l8, l9, l10 = sch.get_loops(block=b0)
v11, v12, v13, v14 = sch.sample_perfect_tile(loop=l3, n=4, max_innermost_factor=64, decision=[1, 1, 1, 1])
l15, l16, l17, l18 = sch.split(loop=l3, factors=[v11, v12, v13, v14], preserve_unit_iters=True)
v19, v20, v21, v22 = sch.sample_perfect_tile(loop=l4, n=4, max_innermost_factor=64, decision=[1, 2, 4, 6])
l23, l24, l25, l26 = sch.split(loop=l4, factors=[v19, v20, v21, v22], preserve_unit_iters=True)
v27, v28, v29, v30 = sch.sample_perfect_tile(loop=l5, n=4, max_innermost_factor=64, decision=[2, 1, 7, 1])
l31, l32, l33, l34 = sch.split(loop=l5, factors=[v27, v28, v29, v30], preserve_unit_iters=True)
v35, v36, v37, v38 = sch.sample_perfect_tile(loop=l6, n=4, max_innermost_factor=64, decision=[1, 2, 7, 1])
l39, l40, l41, l42 = sch.split(loop=l6, factors=[v35, v36, v37, v38], preserve_unit_iters=True)
v43, v44, v45, v46 = sch.sample_perfect_tile(loop=l7, n=4, max_innermost_factor=64, decision=[4, 1, 1, 1])
l47, l48, l49, l50 = sch.split(loop=l7, factors=[v43, v44, v45, v46], preserve_unit_iters=True)
v51, v52 = sch.sample_perfect_tile(loop=l8, n=2, max_innermost_factor=64, decision=[60, 12])
l53, l54 = sch.split(loop=l8, factors=[v51, v52], preserve_unit_iters=True)
v55, v56 = sch.sample_perfect_tile(loop=l9, n=2, max_innermost_factor=64, decision=[1, 1])
l57, l58 = sch.split(loop=l9, factors=[v55, v56], preserve_unit_iters=True)
v59, v60 = sch.sample_perfect_tile(loop=l10, n=2, max_innermost_factor=64, decision=[1, 1])
l61, l62 = sch.split(loop=l10, factors=[v59, v60], preserve_unit_iters=True)
sch.reorder(l15, l23, l31, l39, l47, l16, l24, l32, l40, l48, l53, l57, l61, l17, l25, l33, l41, l49, l54, l58, l62, l18, l26, l34, l42, l50)
b63, = sch.get_consumers(block=b0)
sch.reverse_compute_at(block=b63, loop=l47, preserve_unit_loops=True, index=-1)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.vectorize", ann_val=64)
v64 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.unroll_explicit", ann_val=v64)
2024-04-29 03:56:41 [INFO] [evolutionary_search.cc:713] Generating candidates......
2024-04-29 03:56:41 [INFO] [evolutionary_search.cc:715] Picked top 0 candidate(s) from database
2024-04-29 03:56:43 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0xa2bdc58)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0xe475028)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x13569438)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0xc64b2d8)]: 0 failure(s)
2024-04-29 03:56:43 [INFO] [evolutionary_search.cc:723] Sampled 512 candidate(s)
2024-04-29 03:56:46 [INFO] [evolutionary_search.cc:621] Evolve iter #0 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0xa2bdc58)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0xe475028)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x13569438)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0xc64b2d8)]: 0 failure(s)
2024-04-29 03:56:49 [INFO] [evolutionary_search.cc:621] Evolve iter #1 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0xa2bdc58)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0xe475028)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x13569438)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0xc64b2d8)]: 0 failure(s)
2024-04-29 03:56:52 [INFO] [evolutionary_search.cc:621] Evolve iter #2 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0xa2bdc58)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0xe475028)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x13569438)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0xc64b2d8)]: 0 failure(s)
2024-04-29 03:56:55 [INFO] [evolutionary_search.cc:621] Evolve iter #3 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0xa2bdc58)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0xe475028)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x13569438)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0xc64b2d8)]: 0 failure(s)
2024-04-29 03:56:56 [INFO] [evolutionary_search.cc:649] Scores of the best 64 candidates:
[1 : 16]:	0.9998  0.9997  0.9996  0.9990  0.9982  0.9975  0.9975  0.9968  0.9966  0.9956  0.9955  0.9953  0.9942  0.9940  0.9938  0.9937
[17 : 32]:	0.9928  0.9927  0.9927  0.9913  0.9913  0.9911  0.9907  0.9906  0.9896  0.9888  0.9886  0.9879  0.9873  0.9873  0.9866  0.9863
[33 : 48]:	0.9862  0.9831  0.9822  0.9822  0.9819  0.9807  0.9806  0.9794  0.9793  0.9779  0.9778  0.9775  0.9775  0.9773  0.9772  0.9772
[49 : 64]:	0.9772  0.9765  0.9763  0.9763  0.9753  0.9746  0.9742  0.9742  0.9732  0.9721  0.9710  0.9705  0.9696  0.9692  0.9687  0.9682
2024-04-29 03:56:57 [INFO] [evolutionary_search.cc:727] Got 64 candidate(s) with evolutionary search
2024-04-29 03:56:57 [INFO] [evolutionary_search.cc:730] Sending 64 candidates(s) for measurement
2024-04-29 05:07:29 [INFO] [task_scheduler.cc:131] [Task #53: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_52] Trial #1: GFLOPs: 75.5375. Time: 718.3892 us. Best GFLOPs: 75.5375
2024-04-29 05:07:29 [INFO] [task_scheduler.cc:131] [Task #53: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_52] Trial #2: GFLOPs: 2.7560. Time: 19690.0835 us. Best GFLOPs: 75.5375
2024-04-29 05:07:29 [INFO] [task_scheduler.cc:131] [Task #53: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_52] Trial #3: GFLOPs: 4.3966. Time: 12342.7061 us. Best GFLOPs: 75.5375
2024-04-29 05:07:29 [INFO] [task_scheduler.cc:131] [Task #53: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_52] Trial #4: GFLOPs: 28.3119. Time: 1916.6983 us. Best GFLOPs: 75.5375
2024-04-29 05:07:29 [INFO] [task_scheduler.cc:131] [Task #53: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_52] Trial #5: GFLOPs: 54.1401. Time: 1002.3129 us. Best GFLOPs: 75.5375
2024-04-29 05:07:29 [INFO] [task_scheduler.cc:131] [Task #53: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_52] Trial #6: GFLOPs: 21.5029. Time: 2523.6235 us. Best GFLOPs: 75.5375
2024-04-29 05:07:29 [INFO] [task_scheduler.cc:121] [Task #53: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_52] Trial #7: Error in building:
LocalBuilder: Timeout, killed after 30.0 seconds
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(180), T.int64(14), T.int64(14), T.int64(4)), "float32"), p1: T.Buffer((T.int64(48), T.int64(180), T.int64(1), T.int64(1), T.int64(4), T.int64(4)), "float32"), p2: T.Buffer((T.int64(1), T.int64(48), T.int64(1), T.int64(1), T.int64(4)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(48), T.int64(14), T.int64(14), T.int64(4)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        conv2d_NCHWc = T.alloc_buffer((T.int64(1), T.int64(48), T.int64(14), T.int64(14), T.int64(4)))
        for n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_fused in T.parallel(T.int64(6), annotations={"pragma_auto_unroll_max_step": 512, "pragma_unroll_explicit": 1}):
            for n_1, oc_chunk_1, oh_1, ow_1, oc_block_1 in T.grid(T.int64(1), T.int64(8), T.int64(1), T.int64(2), T.int64(1)):
                for n_2_init, oc_chunk_2_init, oh_2_init, ow_2_init, oc_block_2_init, n_3_init, oc_chunk_3_init, oh_3_init, ow_3_init, oc_block_3_init in T.grid(T.int64(1), T.int64(2), T.int64(1), T.int64(7), T.int64(4), T.int64(1), T.int64(1), T.int64(7), T.int64(1), T.int64(1)):
                    with T.block("conv2d_NCHWc_init"):
                        v_n = T.axis.spatial(T.int64(1), n_1 + n_2_init + n_3_init)
                        v_oc_chunk = T.axis.spatial(T.int64(48), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_fused // T.int64(2) * T.int64(16) + oc_chunk_1 * T.int64(2) + oc_chunk_2_init + oc_chunk_3_init)
                        v_oh = T.axis.spatial(T.int64(14), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_fused % T.int64(2) * T.int64(7) + oh_1 * T.int64(7) + oh_2_init * T.int64(7) + oh_3_init)
                        v_ow = T.axis.spatial(T.int64(14), ow_1 * T.int64(7) + ow_2_init + ow_3_init)
                        v_oc_block = T.axis.spatial(T.int64(4), oc_block_1 * T.int64(4) + oc_block_2_init + oc_block_3_init)
                        T.reads()
                        T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                        T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                        conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = T.float32(0)
                for ic_0, kh_0, kw_0, n_2, oc_chunk_2, oh_2, ow_2, oc_block_2, ic_1, kh_1, kw_1, n_3, oc_chunk_3, oh_3, ow_3, oc_block_3 in T.grid(T.int64(24), T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(1), T.int64(7), T.int64(4), T.int64(30), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(7), T.int64(1), T.int64(1)):
                    with T.block("conv2d_NCHWc_update"):
                        v_n = T.axis.spatial(T.int64(1), n_1 + n_2 + n_3)
                        v_oc_chunk = T.axis.spatial(T.int64(48), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_fused // T.int64(2) * T.int64(16) + oc_chunk_1 * T.int64(2) + oc_chunk_2 + oc_chunk_3)
                        v_oh = T.axis.spatial(T.int64(14), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_fused % T.int64(2) * T.int64(7) + oh_1 * T.int64(7) + oh_2 * T.int64(7) + oh_3)
                        v_ow = T.axis.spatial(T.int64(14), ow_1 * T.int64(7) + ow_2 + ow_3)
                        v_oc_block = T.axis.spatial(T.int64(4), oc_block_1 * T.int64(4) + oc_block_2 + oc_block_3)
                        v_ic = T.axis.reduce(T.int64(720), ic_0 * T.int64(30) + ic_1)
                        v_kh = T.axis.reduce(T.int64(1), kh_0 + kh_1)
                        v_kw = T.axis.reduce(T.int64(1), kw_0 + kw_1)
                        T.reads(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block], p0[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)], p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block])
                        T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                        T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                        conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] + p0[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)] * p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block]
            for ax0, ax1, ax2 in T.grid(T.int64(1), T.int64(16), T.int64(7)):
                for ax3_ax4_fused in T.vectorized(T.int64(56)):
                    with T.block("T_relu"):
                        v_ax0 = T.axis.spatial(T.int64(1), ax0)
                        v_ax1 = T.axis.spatial(T.int64(48), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_fused // T.int64(2) * T.int64(16) + ax1)
                        v_ax2 = T.axis.spatial(T.int64(14), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_fused % T.int64(2) * T.int64(7) + ax2)
                        v_ax3 = T.axis.spatial(T.int64(14), ax3_ax4_fused // T.int64(4))
                        v_ax4 = T.axis.spatial(T.int64(4), ax3_ax4_fused % T.int64(4))
                        T.reads(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4])
                        T.writes(T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                        T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.max(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] + p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4], T.float32(0))
b0 = sch.get_block(name="conv2d_NCHWc", func_name="main")
b1 = sch.get_block(name="T_add", func_name="main")
b2 = sch.get_block(name="root", func_name="main")
sch.compute_inline(block=b1)
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.tiling_structure", ann_val="SSRSRS")
l3, l4, l5, l6, l7, l8, l9, l10 = sch.get_loops(block=b0)
v11, v12, v13, v14 = sch.sample_perfect_tile(loop=l3, n=4, max_innermost_factor=64, decision=[1, 1, 1, 1])
l15, l16, l17, l18 = sch.split(loop=l3, factors=[v11, v12, v13, v14], preserve_unit_iters=True)
v19, v20, v21, v22 = sch.sample_perfect_tile(loop=l4, n=4, max_innermost_factor=64, decision=[3, 8, 2, 1])
l23, l24, l25, l26 = sch.split(loop=l4, factors=[v19, v20, v21, v22], preserve_unit_iters=True)
v27, v28, v29, v30 = sch.sample_perfect_tile(loop=l5, n=4, max_innermost_factor=64, decision=[2, 1, 1, 7])
l31, l32, l33, l34 = sch.split(loop=l5, factors=[v27, v28, v29, v30], preserve_unit_iters=True)
v35, v36, v37, v38 = sch.sample_perfect_tile(loop=l6, n=4, max_innermost_factor=64, decision=[1, 2, 7, 1])
l39, l40, l41, l42 = sch.split(loop=l6, factors=[v35, v36, v37, v38], preserve_unit_iters=True)
v43, v44, v45, v46 = sch.sample_perfect_tile(loop=l7, n=4, max_innermost_factor=64, decision=[1, 1, 4, 1])
l47, l48, l49, l50 = sch.split(loop=l7, factors=[v43, v44, v45, v46], preserve_unit_iters=True)
v51, v52 = sch.sample_perfect_tile(loop=l8, n=2, max_innermost_factor=64, decision=[24, 30])
l53, l54 = sch.split(loop=l8, factors=[v51, v52], preserve_unit_iters=True)
v55, v56 = sch.sample_perfect_tile(loop=l9, n=2, max_innermost_factor=64, decision=[1, 1])
l57, l58 = sch.split(loop=l9, factors=[v55, v56], preserve_unit_iters=True)
v59, v60 = sch.sample_perfect_tile(loop=l10, n=2, max_innermost_factor=64, decision=[1, 1])
l61, l62 = sch.split(loop=l10, factors=[v59, v60], preserve_unit_iters=True)
sch.reorder(l15, l23, l31, l39, l47, l16, l24, l32, l40, l48, l53, l57, l61, l17, l25, l33, l41, l49, l54, l58, l62, l18, l26, l34, l42, l50)
b63, = sch.get_consumers(block=b0)
sch.reverse_compute_at(block=b63, loop=l47, preserve_unit_loops=True, index=-1)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.vectorize", ann_val=64)
v64 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.unroll_explicit", ann_val=v64)
sch.enter_postproc()
b65 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b65, ann_key="meta_schedule.parallel")
sch.unannotate(block_or_loop=b65, ann_key="meta_schedule.vectorize")
sch.unannotate(block_or_loop=b65, ann_key="meta_schedule.unroll_explicit")
b66, b67 = sch.get_child_blocks(b65)
l68, l69, l70, l71, l72, l73, l74, l75, l76, l77, l78, l79, l80, l81, l82, l83, l84, l85, l86, l87, l88, l89, l90, l91, l92, l93 = sch.get_loops(block=b66)
l94 = sch.fuse(l68, l69, l70, l71, l72, preserve_unit_iters=True)
sch.parallel(loop=l94)
sch.annotate(block_or_loop=l94, ann_key="pragma_auto_unroll_max_step", ann_val=512)
sch.annotate(block_or_loop=l94, ann_key="pragma_unroll_explicit", ann_val=1)
l95, l96, l97, l98, l99, l100 = sch.get_loops(block=b67)
l101 = sch.fuse(l99, l100, preserve_unit_iters=True)
sch.vectorize(loop=l101)
b102 = sch.get_block(name="conv2d_NCHWc", func_name="main")
l103, l104, l105, l106, l107, l108, l109, l110, l111, l112, l113, l114, l115, l116, l117, l118, l119, l120, l121, l122, l123, l124 = sch.get_loops(block=b102)
b125 = sch.decompose_reduction(block=b102, loop=l109)
2024-04-29 05:07:29 [INFO] [task_scheduler.cc:131] [Task #53: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_52] Trial #8: GFLOPs: 80.4699. Time: 674.3556 us. Best GFLOPs: 80.4699
2024-04-29 05:07:29 [INFO] [task_scheduler.cc:131] [Task #53: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_52] Trial #9: GFLOPs: 13.3790. Time: 4055.9954 us. Best GFLOPs: 80.4699
2024-04-29 05:07:29 [INFO] [task_scheduler.cc:131] [Task #53: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_52] Trial #10: GFLOPs: 5.1549. Time: 10526.9121 us. Best GFLOPs: 80.4699
2024-04-29 05:07:29 [INFO] [task_scheduler.cc:131] [Task #53: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_52] Trial #11: GFLOPs: 53.7635. Time: 1009.3351 us. Best GFLOPs: 80.4699
2024-04-29 05:07:29 [INFO] [task_scheduler.cc:131] [Task #53: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_52] Trial #12: GFLOPs: 5.0718. Time: 10699.4326 us. Best GFLOPs: 80.4699
2024-04-29 05:07:29 [INFO] [task_scheduler.cc:131] [Task #53: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_52] Trial #13: GFLOPs: 7.9115. Time: 6859.0039 us. Best GFLOPs: 80.4699
2024-04-29 05:07:29 [INFO] [task_scheduler.cc:131] [Task #53: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_52] Trial #14: GFLOPs: 110.2759. Time: 492.0871 us. Best GFLOPs: 110.2759
2024-04-29 05:07:29 [INFO] [task_scheduler.cc:131] [Task #53: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_52] Trial #15: GFLOPs: 156.4885. Time: 346.7688 us. Best GFLOPs: 156.4885
2024-04-29 05:07:29 [INFO] [task_scheduler.cc:131] [Task #53: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_52] Trial #16: GFLOPs: 2.0326. Time: 26697.2513 us. Best GFLOPs: 156.4885
2024-04-29 05:07:29 [INFO] [task_scheduler.cc:131] [Task #53: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_52] Trial #17: GFLOPs: 24.6235. Time: 2203.8007 us. Best GFLOPs: 156.4885
2024-04-29 05:07:29 [INFO] [task_scheduler.cc:131] [Task #53: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_52] Trial #18: GFLOPs: 59.2814. Time: 915.3850 us. Best GFLOPs: 156.4885
2024-04-29 05:07:29 [INFO] [task_scheduler.cc:131] [Task #53: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_52] Trial #19: GFLOPs: 81.8149. Time: 663.2698 us. Best GFLOPs: 156.4885
2024-04-29 05:07:29 [INFO] [task_scheduler.cc:131] [Task #53: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_52] Trial #20: GFLOPs: 106.0545. Time: 511.6743 us. Best GFLOPs: 156.4885
2024-04-29 05:07:29 [INFO] [task_scheduler.cc:131] [Task #53: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_52] Trial #21: GFLOPs: 84.3040. Time: 643.6861 us. Best GFLOPs: 156.4885
2024-04-29 05:07:29 [INFO] [task_scheduler.cc:131] [Task #53: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_52] Trial #22: GFLOPs: 43.2402. Time: 1254.9751 us. Best GFLOPs: 156.4885
2024-04-29 05:07:29 [INFO] [task_scheduler.cc:131] [Task #53: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_52] Trial #23: GFLOPs: 13.9780. Time: 3882.1966 us. Best GFLOPs: 156.4885
2024-04-29 05:07:29 [INFO] [task_scheduler.cc:131] [Task #53: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_52] Trial #24: GFLOPs: 10.2953. Time: 5270.8739 us. Best GFLOPs: 156.4885
2024-04-29 05:07:29 [INFO] [task_scheduler.cc:131] [Task #53: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_52] Trial #25: GFLOPs: 31.8337. Time: 1704.6525 us. Best GFLOPs: 156.4885
2024-04-29 05:07:29 [INFO] [task_scheduler.cc:131] [Task #53: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_52] Trial #26: GFLOPs: 77.8840. Time: 696.7453 us. Best GFLOPs: 156.4885
2024-04-29 05:07:29 [INFO] [task_scheduler.cc:131] [Task #53: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_52] Trial #27: GFLOPs: 105.9241. Time: 512.3042 us. Best GFLOPs: 156.4885
2024-04-29 05:07:29 [INFO] [task_scheduler.cc:131] [Task #53: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_52] Trial #28: GFLOPs: 68.2270. Time: 795.3648 us. Best GFLOPs: 156.4885
2024-04-29 05:07:29 [INFO] [task_scheduler.cc:131] [Task #53: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_52] Trial #29: GFLOPs: 80.2891. Time: 675.8741 us. Best GFLOPs: 156.4885
2024-04-29 05:07:29 [INFO] [task_scheduler.cc:131] [Task #53: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_52] Trial #30: GFLOPs: 2.1327. Time: 25443.9470 us. Best GFLOPs: 156.4885
2024-04-29 05:07:29 [INFO] [task_scheduler.cc:131] [Task #53: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_52] Trial #31: GFLOPs: 58.2169. Time: 932.1234 us. Best GFLOPs: 156.4885
2024-04-29 05:07:29 [INFO] [task_scheduler.cc:131] [Task #53: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_52] Trial #32: GFLOPs: 104.8163. Time: 517.7187 us. Best GFLOPs: 156.4885
2024-04-29 05:07:29 [INFO] [task_scheduler.cc:131] [Task #53: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_52] Trial #33: GFLOPs: 4.9404. Time: 10983.9109 us. Best GFLOPs: 156.4885
2024-04-29 05:07:29 [INFO] [task_scheduler.cc:131] [Task #53: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_52] Trial #34: GFLOPs: 4.9371. Time: 10991.4294 us. Best GFLOPs: 156.4885
2024-04-29 05:07:29 [INFO] [task_scheduler.cc:131] [Task #53: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_52] Trial #35: GFLOPs: 79.6418. Time: 681.3674 us. Best GFLOPs: 156.4885
2024-04-29 05:07:29 [INFO] [task_scheduler.cc:131] [Task #53: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_52] Trial #36: GFLOPs: 47.5136. Time: 1142.1002 us. Best GFLOPs: 156.4885
2024-04-29 05:07:29 [INFO] [task_scheduler.cc:131] [Task #53: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_52] Trial #37: GFLOPs: 78.7394. Time: 689.1769 us. Best GFLOPs: 156.4885
2024-04-29 05:07:29 [INFO] [task_scheduler.cc:131] [Task #53: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_52] Trial #38: GFLOPs: 27.6836. Time: 1960.2013 us. Best GFLOPs: 156.4885
2024-04-29 05:07:29 [INFO] [task_scheduler.cc:131] [Task #53: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_52] Trial #39: GFLOPs: 110.2087. Time: 492.3871 us. Best GFLOPs: 156.4885
2024-04-29 05:07:29 [INFO] [task_scheduler.cc:131] [Task #53: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_52] Trial #40: GFLOPs: 94.3667. Time: 575.0478 us. Best GFLOPs: 156.4885
2024-04-29 05:07:29 [INFO] [task_scheduler.cc:131] [Task #53: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_52] Trial #41: GFLOPs: 7.2655. Time: 7468.8781 us. Best GFLOPs: 156.4885
2024-04-29 05:07:29 [INFO] [task_scheduler.cc:131] [Task #53: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_52] Trial #42: GFLOPs: 18.1317. Time: 2992.8455 us. Best GFLOPs: 156.4885
2024-04-29 05:07:29 [INFO] [task_scheduler.cc:131] [Task #53: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_52] Trial #43: GFLOPs: 67.5882. Time: 802.8816 us. Best GFLOPs: 156.4885
2024-04-29 05:07:29 [INFO] [task_scheduler.cc:131] [Task #53: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_52] Trial #44: GFLOPs: 12.7371. Time: 4260.4317 us. Best GFLOPs: 156.4885
2024-04-29 05:07:29 [INFO] [task_scheduler.cc:131] [Task #53: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_52] Trial #45: GFLOPs: 4.9792. Time: 10898.3546 us. Best GFLOPs: 156.4885
2024-04-29 05:07:29 [INFO] [task_scheduler.cc:131] [Task #53: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_52] Trial #46: GFLOPs: 104.9093. Time: 517.2594 us. Best GFLOPs: 156.4885
2024-04-29 05:07:29 [INFO] [task_scheduler.cc:131] [Task #53: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_52] Trial #47: GFLOPs: 64.0389. Time: 847.3806 us. Best GFLOPs: 156.4885
2024-04-29 05:07:29 [INFO] [task_scheduler.cc:131] [Task #53: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_52] Trial #48: GFLOPs: 54.9179. Time: 988.1177 us. Best GFLOPs: 156.4885
2024-04-29 05:07:29 [INFO] [task_scheduler.cc:131] [Task #53: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_52] Trial #49: GFLOPs: 81.5861. Time: 665.1295 us. Best GFLOPs: 156.4885
2024-04-29 05:07:29 [INFO] [task_scheduler.cc:131] [Task #53: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_52] Trial #50: GFLOPs: 113.4931. Time: 478.1380 us. Best GFLOPs: 156.4885
2024-04-29 05:07:29 [INFO] [task_scheduler.cc:131] [Task #53: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_52] Trial #51: GFLOPs: 32.8857. Time: 1650.1203 us. Best GFLOPs: 156.4885
2024-04-29 05:07:29 [INFO] [task_scheduler.cc:131] [Task #53: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_52] Trial #52: GFLOPs: 8.1285. Time: 6675.9149 us. Best GFLOPs: 156.4885
2024-04-29 05:07:29 [INFO] [task_scheduler.cc:131] [Task #53: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_52] Trial #53: GFLOPs: 32.0655. Time: 1692.3295 us. Best GFLOPs: 156.4885
2024-04-29 05:07:29 [INFO] [task_scheduler.cc:131] [Task #53: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_52] Trial #54: GFLOPs: 57.8738. Time: 937.6497 us. Best GFLOPs: 156.4885
2024-04-29 05:07:29 [INFO] [task_scheduler.cc:131] [Task #53: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_52] Trial #55: GFLOPs: 94.1059. Time: 576.6414 us. Best GFLOPs: 156.4885
2024-04-29 05:07:29 [INFO] [task_scheduler.cc:131] [Task #53: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_52] Trial #56: GFLOPs: 136.5721. Time: 397.3383 us. Best GFLOPs: 156.4885
2024-04-29 05:07:29 [INFO] [task_scheduler.cc:131] [Task #53: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_52] Trial #57: GFLOPs: 65.7038. Time: 825.9091 us. Best GFLOPs: 156.4885
2024-04-29 05:07:29 [INFO] [task_scheduler.cc:131] [Task #53: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_52] Trial #58: GFLOPs: 7.9799. Time: 6800.2513 us. Best GFLOPs: 156.4885
2024-04-29 05:07:29 [INFO] [task_scheduler.cc:131] [Task #53: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_52] Trial #59: GFLOPs: 37.6858. Time: 1439.9409 us. Best GFLOPs: 156.4885
2024-04-29 05:07:29 [INFO] [task_scheduler.cc:131] [Task #53: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_52] Trial #60: GFLOPs: 39.4563. Time: 1375.3293 us. Best GFLOPs: 156.4885
2024-04-29 05:07:29 [INFO] [task_scheduler.cc:131] [Task #53: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_52] Trial #61: GFLOPs: 50.9209. Time: 1065.6797 us. Best GFLOPs: 156.4885
2024-04-29 05:07:29 [INFO] [task_scheduler.cc:131] [Task #53: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_52] Trial #62: GFLOPs: 18.2379. Time: 2975.4209 us. Best GFLOPs: 156.4885
2024-04-29 05:07:29 [INFO] [task_scheduler.cc:131] [Task #53: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_52] Trial #63: GFLOPs: 19.9595. Time: 2718.7718 us. Best GFLOPs: 156.4885
2024-04-29 05:07:29 [INFO] [task_scheduler.cc:131] [Task #53: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_52] Trial #64: GFLOPs: 23.8803. Time: 2272.3932 us. Best GFLOPs: 156.4885
