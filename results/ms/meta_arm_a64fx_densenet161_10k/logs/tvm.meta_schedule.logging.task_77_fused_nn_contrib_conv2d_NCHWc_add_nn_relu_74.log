2024-04-29 02:33:21 [INFO] [task_scheduler.cc:160] Initializing Task #77: "fused_nn_contrib_conv2d_NCHWc_add_nn_relu_74"
2024-04-29 02:33:21 [INFO] [task_scheduler.cc:35] 
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(60), T.int64(56), T.int64(56), T.int64(4)), "float32"), p1: T.Buffer((T.int64(48), T.int64(60), T.int64(1), T.int64(1), T.int64(4), T.int64(4)), "float32"), p2: T.Buffer((T.int64(1), T.int64(48), T.int64(1), T.int64(1), T.int64(4)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(48), T.int64(56), T.int64(56), T.int64(4)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        conv2d_NCHWc = T.alloc_buffer((T.int64(1), T.int64(48), T.int64(56), T.int64(56), T.int64(4)))
        T_add = T.alloc_buffer((T.int64(1), T.int64(48), T.int64(56), T.int64(56), T.int64(4)))
        for n, oc_chunk, oh, ow, oc_block, ic, kh, kw in T.grid(T.int64(1), T.int64(48), T.int64(56), T.int64(56), T.int64(4), T.int64(240), T.int64(1), T.int64(1)):
            with T.block("conv2d_NCHWc"):
                v_n, v_oc_chunk, v_oh, v_ow, v_oc_block, v_ic, v_kh, v_kw = T.axis.remap("SSSSSRRR", [n, oc_chunk, oh, ow, oc_block, ic, kh, kw])
                T.reads(p0[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)], p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block])
                T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                with T.init():
                    conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = T.float32(0)
                conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] + p0[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)] * p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block]
        for ax0, ax1, ax2, ax3, ax4 in T.grid(T.int64(1), T.int64(48), T.int64(56), T.int64(56), T.int64(4)):
            with T.block("T_add"):
                v_ax0, v_ax1, v_ax2, v_ax3, v_ax4 = T.axis.remap("SSSSS", [ax0, ax1, ax2, ax3, ax4])
                T.reads(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4])
                T.writes(T_add[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                T_add[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] + p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4]
        for ax0, ax1, ax2, ax3, ax4 in T.grid(T.int64(1), T.int64(48), T.int64(56), T.int64(56), T.int64(4)):
            with T.block("T_relu"):
                v_ax0, v_ax1, v_ax2, v_ax3, v_ax4 = T.axis.remap("SSSSS", [ax0, ax1, ax2, ax3, ax4])
                T.reads(T_add[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                T.writes(T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.max(T_add[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], T.float32(0))
2024-04-29 02:33:21 [INFO] [task_scheduler.cc:164] Total 3 design space(s) generated
2024-04-29 02:33:21 [INFO] [task_scheduler.cc:170] Design space #0:
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(60), T.int64(56), T.int64(56), T.int64(4)), "float32"), p1: T.Buffer((T.int64(48), T.int64(60), T.int64(1), T.int64(1), T.int64(4), T.int64(4)), "float32"), p2: T.Buffer((T.int64(1), T.int64(48), T.int64(1), T.int64(1), T.int64(4)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(48), T.int64(56), T.int64(56), T.int64(4)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        with T.block("root"):
            T.reads()
            T.writes()
            T.block_attr({"meta_schedule.parallel": 768, "meta_schedule.unroll_explicit": 16, "meta_schedule.vectorize": 64})
            conv2d_NCHWc = T.alloc_buffer((T.int64(1), T.int64(48), T.int64(56), T.int64(56), T.int64(4)))
            for n_0, oc_chunk_0, oh_0, ow_0, oc_block_0, n_1, oc_chunk_1, oh_1, ow_1, oc_block_1, ic_0, kh_0, kw_0, n_2, oc_chunk_2, oh_2, ow_2, oc_block_2, ic_1, kh_1, kw_1, n_3, oc_chunk_3, oh_3, ow_3, oc_block_3 in T.grid(T.int64(1), T.int64(8), T.int64(2), T.int64(1), T.int64(2), T.int64(1), T.int64(1), T.int64(1), T.int64(14), T.int64(2), T.int64(40), T.int64(1), T.int64(1), T.int64(1), T.int64(3), T.int64(14), T.int64(4), T.int64(1), T.int64(6), T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(2), T.int64(1), T.int64(1)):
                with T.block("conv2d_NCHWc"):
                    v_n = T.axis.spatial(T.int64(1), n_0 + n_1 + n_2 + n_3)
                    v_oc_chunk = T.axis.spatial(T.int64(48), oc_chunk_0 * T.int64(6) + oc_chunk_1 * T.int64(6) + oc_chunk_2 * T.int64(2) + oc_chunk_3)
                    v_oh = T.axis.spatial(T.int64(56), oh_0 * T.int64(28) + oh_1 * T.int64(28) + oh_2 * T.int64(2) + oh_3)
                    v_ow = T.axis.spatial(T.int64(56), ow_0 * T.int64(56) + ow_1 * T.int64(4) + ow_2 + ow_3)
                    v_oc_block = T.axis.spatial(T.int64(4), oc_block_0 * T.int64(2) + oc_block_1 + oc_block_2 + oc_block_3)
                    v_ic = T.axis.reduce(T.int64(240), ic_0 * T.int64(6) + ic_1)
                    v_kh = T.axis.reduce(T.int64(1), kh_0 + kh_1)
                    v_kw = T.axis.reduce(T.int64(1), kw_0 + kw_1)
                    T.reads(p0[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)], p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block])
                    T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                    T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                    with T.init():
                        conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = T.float32(0)
                    conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] + p0[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)] * p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block]
            for ax0, ax1, ax2, ax3, ax4 in T.grid(T.int64(1), T.int64(48), T.int64(56), T.int64(56), T.int64(4)):
                with T.block("T_relu"):
                    v_ax0, v_ax1, v_ax2, v_ax3, v_ax4 = T.axis.remap("SSSSS", [ax0, ax1, ax2, ax3, ax4])
                    T.reads(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4])
                    T.writes(T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                    T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.max(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] + p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4], T.float32(0))
b0 = sch.get_block(name="conv2d_NCHWc", func_name="main")
b1 = sch.get_block(name="T_add", func_name="main")
b2 = sch.get_block(name="root", func_name="main")
sch.compute_inline(block=b1)
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.tiling_structure", ann_val="SSRSRS")
l3, l4, l5, l6, l7, l8, l9, l10 = sch.get_loops(block=b0)
v11, v12, v13, v14 = sch.sample_perfect_tile(loop=l3, n=4, max_innermost_factor=64, decision=[1, 1, 1, 1])
l15, l16, l17, l18 = sch.split(loop=l3, factors=[v11, v12, v13, v14], preserve_unit_iters=True)
v19, v20, v21, v22 = sch.sample_perfect_tile(loop=l4, n=4, max_innermost_factor=64, decision=[8, 1, 3, 2])
l23, l24, l25, l26 = sch.split(loop=l4, factors=[v19, v20, v21, v22], preserve_unit_iters=True)
v27, v28, v29, v30 = sch.sample_perfect_tile(loop=l5, n=4, max_innermost_factor=64, decision=[2, 1, 14, 2])
l31, l32, l33, l34 = sch.split(loop=l5, factors=[v27, v28, v29, v30], preserve_unit_iters=True)
v35, v36, v37, v38 = sch.sample_perfect_tile(loop=l6, n=4, max_innermost_factor=64, decision=[1, 14, 4, 1])
l39, l40, l41, l42 = sch.split(loop=l6, factors=[v35, v36, v37, v38], preserve_unit_iters=True)
v43, v44, v45, v46 = sch.sample_perfect_tile(loop=l7, n=4, max_innermost_factor=64, decision=[2, 2, 1, 1])
l47, l48, l49, l50 = sch.split(loop=l7, factors=[v43, v44, v45, v46], preserve_unit_iters=True)
v51, v52 = sch.sample_perfect_tile(loop=l8, n=2, max_innermost_factor=64, decision=[40, 6])
l53, l54 = sch.split(loop=l8, factors=[v51, v52], preserve_unit_iters=True)
v55, v56 = sch.sample_perfect_tile(loop=l9, n=2, max_innermost_factor=64, decision=[1, 1])
l57, l58 = sch.split(loop=l9, factors=[v55, v56], preserve_unit_iters=True)
v59, v60 = sch.sample_perfect_tile(loop=l10, n=2, max_innermost_factor=64, decision=[1, 1])
l61, l62 = sch.split(loop=l10, factors=[v59, v60], preserve_unit_iters=True)
sch.reorder(l15, l23, l31, l39, l47, l16, l24, l32, l40, l48, l53, l57, l61, l17, l25, l33, l41, l49, l54, l58, l62, l18, l26, l34, l42, l50)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.vectorize", ann_val=64)
v63 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=1)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.unroll_explicit", ann_val=v63)
2024-04-29 02:33:21 [INFO] [task_scheduler.cc:170] Design space #1:
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(60), T.int64(56), T.int64(56), T.int64(4)), "float32"), p1: T.Buffer((T.int64(48), T.int64(60), T.int64(1), T.int64(1), T.int64(4), T.int64(4)), "float32"), p2: T.Buffer((T.int64(1), T.int64(48), T.int64(1), T.int64(1), T.int64(4)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(48), T.int64(56), T.int64(56), T.int64(4)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        with T.block("root"):
            T.reads()
            T.writes()
            T.block_attr({"meta_schedule.parallel": 768, "meta_schedule.unroll_explicit": 16, "meta_schedule.vectorize": 64})
            conv2d_NCHWc = T.alloc_buffer((T.int64(1), T.int64(48), T.int64(56), T.int64(56), T.int64(4)))
            for n_0, oc_chunk_0, oh_0, ow_0, oc_block_0, n_1, oc_chunk_1, oh_1, ow_1, oc_block_1 in T.grid(T.int64(1), T.int64(8), T.int64(2), T.int64(1), T.int64(2), T.int64(1), T.int64(1), T.int64(1), T.int64(14), T.int64(2)):
                for ic_0, kh_0, kw_0, n_2, oc_chunk_2, oh_2, ow_2, oc_block_2, ic_1, kh_1, kw_1, n_3, oc_chunk_3, oh_3, ow_3, oc_block_3 in T.grid(T.int64(40), T.int64(1), T.int64(1), T.int64(1), T.int64(3), T.int64(14), T.int64(4), T.int64(1), T.int64(6), T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(2), T.int64(1), T.int64(1)):
                    with T.block("conv2d_NCHWc"):
                        v_n = T.axis.spatial(T.int64(1), n_0 + n_1 + n_2 + n_3)
                        v_oc_chunk = T.axis.spatial(T.int64(48), oc_chunk_0 * T.int64(6) + oc_chunk_1 * T.int64(6) + oc_chunk_2 * T.int64(2) + oc_chunk_3)
                        v_oh = T.axis.spatial(T.int64(56), oh_0 * T.int64(28) + oh_1 * T.int64(28) + oh_2 * T.int64(2) + oh_3)
                        v_ow = T.axis.spatial(T.int64(56), ow_0 * T.int64(56) + ow_1 * T.int64(4) + ow_2 + ow_3)
                        v_oc_block = T.axis.spatial(T.int64(4), oc_block_0 * T.int64(2) + oc_block_1 + oc_block_2 + oc_block_3)
                        v_ic = T.axis.reduce(T.int64(240), ic_0 * T.int64(6) + ic_1)
                        v_kh = T.axis.reduce(T.int64(1), kh_0 + kh_1)
                        v_kw = T.axis.reduce(T.int64(1), kw_0 + kw_1)
                        T.reads(p0[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)], p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block])
                        T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                        T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                        with T.init():
                            conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = T.float32(0)
                        conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] + p0[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)] * p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block]
                for ax0, ax1, ax2, ax3, ax4 in T.grid(T.int64(1), T.int64(6), T.int64(28), T.int64(4), T.int64(1)):
                    with T.block("T_relu"):
                        v_ax0 = T.axis.spatial(T.int64(1), ax0)
                        v_ax1 = T.axis.spatial(T.int64(48), oc_chunk_0 * T.int64(6) + ax1)
                        v_ax2 = T.axis.spatial(T.int64(56), oh_0 * T.int64(28) + ax2)
                        v_ax3 = T.axis.spatial(T.int64(56), ow_1 * T.int64(4) + ax3)
                        v_ax4 = T.axis.spatial(T.int64(4), oc_block_0 * T.int64(2) + oc_block_1 + ax4)
                        T.reads(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4])
                        T.writes(T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                        T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.max(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] + p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4], T.float32(0))
b0 = sch.get_block(name="conv2d_NCHWc", func_name="main")
b1 = sch.get_block(name="T_add", func_name="main")
b2 = sch.get_block(name="root", func_name="main")
sch.compute_inline(block=b1)
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.tiling_structure", ann_val="SSRSRS")
l3, l4, l5, l6, l7, l8, l9, l10 = sch.get_loops(block=b0)
v11, v12, v13, v14 = sch.sample_perfect_tile(loop=l3, n=4, max_innermost_factor=64, decision=[1, 1, 1, 1])
l15, l16, l17, l18 = sch.split(loop=l3, factors=[v11, v12, v13, v14], preserve_unit_iters=True)
v19, v20, v21, v22 = sch.sample_perfect_tile(loop=l4, n=4, max_innermost_factor=64, decision=[8, 1, 3, 2])
l23, l24, l25, l26 = sch.split(loop=l4, factors=[v19, v20, v21, v22], preserve_unit_iters=True)
v27, v28, v29, v30 = sch.sample_perfect_tile(loop=l5, n=4, max_innermost_factor=64, decision=[2, 1, 14, 2])
l31, l32, l33, l34 = sch.split(loop=l5, factors=[v27, v28, v29, v30], preserve_unit_iters=True)
v35, v36, v37, v38 = sch.sample_perfect_tile(loop=l6, n=4, max_innermost_factor=64, decision=[1, 14, 4, 1])
l39, l40, l41, l42 = sch.split(loop=l6, factors=[v35, v36, v37, v38], preserve_unit_iters=True)
v43, v44, v45, v46 = sch.sample_perfect_tile(loop=l7, n=4, max_innermost_factor=64, decision=[2, 2, 1, 1])
l47, l48, l49, l50 = sch.split(loop=l7, factors=[v43, v44, v45, v46], preserve_unit_iters=True)
v51, v52 = sch.sample_perfect_tile(loop=l8, n=2, max_innermost_factor=64, decision=[40, 6])
l53, l54 = sch.split(loop=l8, factors=[v51, v52], preserve_unit_iters=True)
v55, v56 = sch.sample_perfect_tile(loop=l9, n=2, max_innermost_factor=64, decision=[1, 1])
l57, l58 = sch.split(loop=l9, factors=[v55, v56], preserve_unit_iters=True)
v59, v60 = sch.sample_perfect_tile(loop=l10, n=2, max_innermost_factor=64, decision=[1, 1])
l61, l62 = sch.split(loop=l10, factors=[v59, v60], preserve_unit_iters=True)
sch.reorder(l15, l23, l31, l39, l47, l16, l24, l32, l40, l48, l53, l57, l61, l17, l25, l33, l41, l49, l54, l58, l62, l18, l26, l34, l42, l50)
b63, = sch.get_consumers(block=b0)
sch.reverse_compute_at(block=b63, loop=l48, preserve_unit_loops=True, index=-1)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.vectorize", ann_val=64)
v64 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=1)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.unroll_explicit", ann_val=v64)
2024-04-29 02:33:21 [INFO] [task_scheduler.cc:170] Design space #2:
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(60), T.int64(56), T.int64(56), T.int64(4)), "float32"), p1: T.Buffer((T.int64(48), T.int64(60), T.int64(1), T.int64(1), T.int64(4), T.int64(4)), "float32"), p2: T.Buffer((T.int64(1), T.int64(48), T.int64(1), T.int64(1), T.int64(4)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(48), T.int64(56), T.int64(56), T.int64(4)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        with T.block("root"):
            T.reads()
            T.writes()
            T.block_attr({"meta_schedule.parallel": 768, "meta_schedule.unroll_explicit": 64, "meta_schedule.vectorize": 64})
            conv2d_NCHWc = T.alloc_buffer((T.int64(1), T.int64(48), T.int64(56), T.int64(56), T.int64(4)))
            for n_0, oc_chunk_0, oh_0, ow_0, oc_block_0 in T.grid(T.int64(1), T.int64(8), T.int64(2), T.int64(1), T.int64(2)):
                for n_1, oc_chunk_1, oh_1, ow_1, oc_block_1, ic_0, kh_0, kw_0, n_2, oc_chunk_2, oh_2, ow_2, oc_block_2, ic_1, kh_1, kw_1, n_3, oc_chunk_3, oh_3, ow_3, oc_block_3 in T.grid(T.int64(1), T.int64(1), T.int64(1), T.int64(14), T.int64(2), T.int64(40), T.int64(1), T.int64(1), T.int64(1), T.int64(3), T.int64(14), T.int64(4), T.int64(1), T.int64(6), T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(2), T.int64(1), T.int64(1)):
                    with T.block("conv2d_NCHWc"):
                        v_n = T.axis.spatial(T.int64(1), n_0 + n_1 + n_2 + n_3)
                        v_oc_chunk = T.axis.spatial(T.int64(48), oc_chunk_0 * T.int64(6) + oc_chunk_1 * T.int64(6) + oc_chunk_2 * T.int64(2) + oc_chunk_3)
                        v_oh = T.axis.spatial(T.int64(56), oh_0 * T.int64(28) + oh_1 * T.int64(28) + oh_2 * T.int64(2) + oh_3)
                        v_ow = T.axis.spatial(T.int64(56), ow_0 * T.int64(56) + ow_1 * T.int64(4) + ow_2 + ow_3)
                        v_oc_block = T.axis.spatial(T.int64(4), oc_block_0 * T.int64(2) + oc_block_1 + oc_block_2 + oc_block_3)
                        v_ic = T.axis.reduce(T.int64(240), ic_0 * T.int64(6) + ic_1)
                        v_kh = T.axis.reduce(T.int64(1), kh_0 + kh_1)
                        v_kw = T.axis.reduce(T.int64(1), kw_0 + kw_1)
                        T.reads(p0[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)], p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block])
                        T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                        T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                        with T.init():
                            conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = T.float32(0)
                        conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] + p0[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)] * p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block]
                for ax0, ax1, ax2, ax3, ax4 in T.grid(T.int64(1), T.int64(6), T.int64(28), T.int64(56), T.int64(2)):
                    with T.block("T_relu"):
                        v_ax0 = T.axis.spatial(T.int64(1), ax0)
                        v_ax1 = T.axis.spatial(T.int64(48), oc_chunk_0 * T.int64(6) + ax1)
                        v_ax2 = T.axis.spatial(T.int64(56), oh_0 * T.int64(28) + ax2)
                        v_ax3 = T.axis.spatial(T.int64(56), ax3)
                        v_ax4 = T.axis.spatial(T.int64(4), oc_block_0 * T.int64(2) + ax4)
                        T.reads(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4])
                        T.writes(T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                        T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.max(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] + p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4], T.float32(0))
b0 = sch.get_block(name="conv2d_NCHWc", func_name="main")
b1 = sch.get_block(name="T_add", func_name="main")
b2 = sch.get_block(name="root", func_name="main")
sch.compute_inline(block=b1)
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.tiling_structure", ann_val="SSRSRS")
l3, l4, l5, l6, l7, l8, l9, l10 = sch.get_loops(block=b0)
v11, v12, v13, v14 = sch.sample_perfect_tile(loop=l3, n=4, max_innermost_factor=64, decision=[1, 1, 1, 1])
l15, l16, l17, l18 = sch.split(loop=l3, factors=[v11, v12, v13, v14], preserve_unit_iters=True)
v19, v20, v21, v22 = sch.sample_perfect_tile(loop=l4, n=4, max_innermost_factor=64, decision=[8, 1, 3, 2])
l23, l24, l25, l26 = sch.split(loop=l4, factors=[v19, v20, v21, v22], preserve_unit_iters=True)
v27, v28, v29, v30 = sch.sample_perfect_tile(loop=l5, n=4, max_innermost_factor=64, decision=[2, 1, 14, 2])
l31, l32, l33, l34 = sch.split(loop=l5, factors=[v27, v28, v29, v30], preserve_unit_iters=True)
v35, v36, v37, v38 = sch.sample_perfect_tile(loop=l6, n=4, max_innermost_factor=64, decision=[1, 14, 4, 1])
l39, l40, l41, l42 = sch.split(loop=l6, factors=[v35, v36, v37, v38], preserve_unit_iters=True)
v43, v44, v45, v46 = sch.sample_perfect_tile(loop=l7, n=4, max_innermost_factor=64, decision=[2, 2, 1, 1])
l47, l48, l49, l50 = sch.split(loop=l7, factors=[v43, v44, v45, v46], preserve_unit_iters=True)
v51, v52 = sch.sample_perfect_tile(loop=l8, n=2, max_innermost_factor=64, decision=[40, 6])
l53, l54 = sch.split(loop=l8, factors=[v51, v52], preserve_unit_iters=True)
v55, v56 = sch.sample_perfect_tile(loop=l9, n=2, max_innermost_factor=64, decision=[1, 1])
l57, l58 = sch.split(loop=l9, factors=[v55, v56], preserve_unit_iters=True)
v59, v60 = sch.sample_perfect_tile(loop=l10, n=2, max_innermost_factor=64, decision=[1, 1])
l61, l62 = sch.split(loop=l10, factors=[v59, v60], preserve_unit_iters=True)
sch.reorder(l15, l23, l31, l39, l47, l16, l24, l32, l40, l48, l53, l57, l61, l17, l25, l33, l41, l49, l54, l58, l62, l18, l26, l34, l42, l50)
b63, = sch.get_consumers(block=b0)
sch.reverse_compute_at(block=b63, loop=l47, preserve_unit_loops=True, index=-1)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.vectorize", ann_val=64)
v64 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=2)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.unroll_explicit", ann_val=v64)
2024-04-29 04:34:58 [INFO] [evolutionary_search.cc:713] Generating candidates......
2024-04-29 04:34:58 [INFO] [evolutionary_search.cc:715] Picked top 0 candidate(s) from database
2024-04-29 04:35:01 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x11bbb7a8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0xff00018)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0xb3c34a8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0xba3b978)]: 0 failure(s)
2024-04-29 04:35:01 [INFO] [evolutionary_search.cc:723] Sampled 512 candidate(s)
2024-04-29 04:35:04 [INFO] [evolutionary_search.cc:621] Evolve iter #0 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x11bbb7a8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0xff00018)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0xb3c34a8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0xba3b978)]: 0 failure(s)
2024-04-29 04:35:07 [INFO] [evolutionary_search.cc:621] Evolve iter #1 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x11bbb7a8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0xff00018)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0xb3c34a8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0xba3b978)]: 0 failure(s)
2024-04-29 04:35:10 [INFO] [evolutionary_search.cc:621] Evolve iter #2 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x11bbb7a8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0xff00018)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0xb3c34a8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0xba3b978)]: 0 failure(s)
2024-04-29 04:35:13 [INFO] [evolutionary_search.cc:621] Evolve iter #3 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x11bbb7a8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0xff00018)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0xb3c34a8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0xba3b978)]: 0 failure(s)
2024-04-29 04:35:14 [INFO] [evolutionary_search.cc:649] Scores of the best 64 candidates:
[1 : 16]:	0.9992  0.9991  0.9987  0.9987  0.9966  0.9965  0.9963  0.9962  0.9954  0.9952  0.9946  0.9945  0.9943  0.9937  0.9931  0.9929
[17 : 32]:	0.9928  0.9909  0.9904  0.9897  0.9897  0.9889  0.9879  0.9869  0.9868  0.9858  0.9856  0.9855  0.9846  0.9846  0.9846  0.9843
[33 : 48]:	0.9840  0.9834  0.9822  0.9818  0.9812  0.9803  0.9797  0.9796  0.9794  0.9792  0.9786  0.9783  0.9783  0.9770  0.9770  0.9769
[49 : 64]:	0.9763  0.9756  0.9741  0.9739  0.9739  0.9738  0.9734  0.9730  0.9711  0.9709  0.9706  0.9705  0.9702  0.9702  0.9699  0.9696
2024-04-29 04:35:15 [INFO] [evolutionary_search.cc:727] Got 64 candidate(s) with evolutionary search
2024-04-29 04:35:15 [INFO] [evolutionary_search.cc:730] Sending 64 candidates(s) for measurement
2024-04-29 05:11:04 [INFO] [task_scheduler.cc:131] [Task #77: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_74] Trial #1: GFLOPs: 120.9752. Time: 2398.9875 us. Best GFLOPs: 120.9752
2024-04-29 05:11:04 [INFO] [task_scheduler.cc:131] [Task #77: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_74] Trial #2: GFLOPs: 137.4798. Time: 2110.9869 us. Best GFLOPs: 137.4798
2024-04-29 05:11:04 [INFO] [task_scheduler.cc:131] [Task #77: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_74] Trial #3: GFLOPs: 95.3757. Time: 3042.8913 us. Best GFLOPs: 137.4798
2024-04-29 05:11:04 [INFO] [task_scheduler.cc:131] [Task #77: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_74] Trial #4: GFLOPs: 56.3026. Time: 5154.6084 us. Best GFLOPs: 137.4798
2024-04-29 05:11:04 [INFO] [task_scheduler.cc:131] [Task #77: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_74] Trial #5: GFLOPs: 8.8963. Time: 32622.2822 us. Best GFLOPs: 137.4798
2024-04-29 05:11:04 [INFO] [task_scheduler.cc:131] [Task #77: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_74] Trial #6: GFLOPs: 46.6511. Time: 6221.0367 us. Best GFLOPs: 137.4798
2024-04-29 05:11:04 [INFO] [task_scheduler.cc:131] [Task #77: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_74] Trial #7: GFLOPs: 114.7169. Time: 2529.8630 us. Best GFLOPs: 137.4798
2024-04-29 05:11:04 [INFO] [task_scheduler.cc:121] [Task #77: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_74] Trial #8: Error in building:
LocalBuilder: Timeout, killed after 30.0 seconds
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(60), T.int64(56), T.int64(56), T.int64(4)), "float32"), p1: T.Buffer((T.int64(48), T.int64(60), T.int64(1), T.int64(1), T.int64(4), T.int64(4)), "float32"), p2: T.Buffer((T.int64(1), T.int64(48), T.int64(1), T.int64(1), T.int64(4)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(48), T.int64(56), T.int64(56), T.int64(4)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        conv2d_NCHWc = T.alloc_buffer((T.int64(1), T.int64(48), T.int64(56), T.int64(56), T.int64(4)))
        for n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused in T.parallel(T.int64(112), annotations={"pragma_auto_unroll_max_step": 512, "pragma_unroll_explicit": 1}):
            for n_2_init, oc_chunk_2_init, oh_2_init, ow_2_init, oc_block_2_init, n_3_init, oc_chunk_3_init, oh_3_init, ow_3_init, oc_block_3_init in T.grid(T.int64(1), T.int64(6), T.int64(2), T.int64(4), T.int64(1), T.int64(1), T.int64(2), T.int64(28), T.int64(2), T.int64(1)):
                with T.block("conv2d_NCHWc_init"):
                    v_n = T.axis.spatial(T.int64(1), n_2_init + n_3_init)
                    v_oc_chunk = T.axis.spatial(T.int64(48), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused // T.int64(28) * T.int64(12) + oc_chunk_2_init * T.int64(2) + oc_chunk_3_init)
                    v_oh = T.axis.spatial(T.int64(56), oh_2_init * T.int64(28) + oh_3_init)
                    v_ow = T.axis.spatial(T.int64(56), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused % T.int64(28) // T.int64(4) * T.int64(8) + ow_2_init * T.int64(2) + ow_3_init)
                    v_oc_block = T.axis.spatial(T.int64(4), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused % T.int64(4) + oc_block_2_init + oc_block_3_init)
                    T.reads()
                    T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                    T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                    conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = T.float32(0)
            for ic_0, kh_0, kw_0, n_2, oc_chunk_2, oh_2, ow_2, oc_block_2, ic_1, kh_1, kw_1, n_3, oc_chunk_3, oh_3, ow_3, oc_block_3 in T.grid(T.int64(60), T.int64(1), T.int64(1), T.int64(1), T.int64(6), T.int64(2), T.int64(4), T.int64(1), T.int64(4), T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(28), T.int64(2), T.int64(1)):
                with T.block("conv2d_NCHWc_update"):
                    v_n = T.axis.spatial(T.int64(1), n_2 + n_3)
                    v_oc_chunk = T.axis.spatial(T.int64(48), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused // T.int64(28) * T.int64(12) + oc_chunk_2 * T.int64(2) + oc_chunk_3)
                    v_oh = T.axis.spatial(T.int64(56), oh_2 * T.int64(28) + oh_3)
                    v_ow = T.axis.spatial(T.int64(56), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused % T.int64(28) // T.int64(4) * T.int64(8) + ow_2 * T.int64(2) + ow_3)
                    v_oc_block = T.axis.spatial(T.int64(4), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused % T.int64(4) + oc_block_2 + oc_block_3)
                    v_ic = T.axis.reduce(T.int64(240), ic_0 * T.int64(4) + ic_1)
                    v_kh = T.axis.reduce(T.int64(1), kh_0 + kh_1)
                    v_kw = T.axis.reduce(T.int64(1), kw_0 + kw_1)
                    T.reads(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block], p0[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)], p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block])
                    T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                    T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                    conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] + p0[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)] * p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block]
            for ax0, ax1, ax2, ax3, ax4 in T.grid(T.int64(1), T.int64(12), T.int64(56), T.int64(8), T.int64(1)):
                with T.block("T_relu"):
                    v_ax0 = T.axis.spatial(T.int64(1), ax0)
                    v_ax1 = T.axis.spatial(T.int64(48), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused // T.int64(28) * T.int64(12) + ax1)
                    v_ax2 = T.axis.spatial(T.int64(56), ax2)
                    v_ax3 = T.axis.spatial(T.int64(56), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused % T.int64(28) // T.int64(4) * T.int64(8) + ax3)
                    v_ax4 = T.axis.spatial(T.int64(4), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused % T.int64(4) + ax4)
                    T.reads(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4])
                    T.writes(T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                    T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.max(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] + p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4], T.float32(0))
b0 = sch.get_block(name="conv2d_NCHWc", func_name="main")
b1 = sch.get_block(name="T_add", func_name="main")
b2 = sch.get_block(name="root", func_name="main")
sch.compute_inline(block=b1)
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.tiling_structure", ann_val="SSRSRS")
l3, l4, l5, l6, l7, l8, l9, l10 = sch.get_loops(block=b0)
v11, v12, v13, v14 = sch.sample_perfect_tile(loop=l3, n=4, max_innermost_factor=64, decision=[1, 1, 1, 1])
l15, l16, l17, l18 = sch.split(loop=l3, factors=[v11, v12, v13, v14], preserve_unit_iters=True)
v19, v20, v21, v22 = sch.sample_perfect_tile(loop=l4, n=4, max_innermost_factor=64, decision=[4, 1, 6, 2])
l23, l24, l25, l26 = sch.split(loop=l4, factors=[v19, v20, v21, v22], preserve_unit_iters=True)
v27, v28, v29, v30 = sch.sample_perfect_tile(loop=l5, n=4, max_innermost_factor=64, decision=[1, 1, 2, 28])
l31, l32, l33, l34 = sch.split(loop=l5, factors=[v27, v28, v29, v30], preserve_unit_iters=True)
v35, v36, v37, v38 = sch.sample_perfect_tile(loop=l6, n=4, max_innermost_factor=64, decision=[1, 7, 4, 2])
l39, l40, l41, l42 = sch.split(loop=l6, factors=[v35, v36, v37, v38], preserve_unit_iters=True)
v43, v44, v45, v46 = sch.sample_perfect_tile(loop=l7, n=4, max_innermost_factor=64, decision=[1, 4, 1, 1])
l47, l48, l49, l50 = sch.split(loop=l7, factors=[v43, v44, v45, v46], preserve_unit_iters=True)
v51, v52 = sch.sample_perfect_tile(loop=l8, n=2, max_innermost_factor=64, decision=[60, 4])
l53, l54 = sch.split(loop=l8, factors=[v51, v52], preserve_unit_iters=True)
v55, v56 = sch.sample_perfect_tile(loop=l9, n=2, max_innermost_factor=64, decision=[1, 1])
l57, l58 = sch.split(loop=l9, factors=[v55, v56], preserve_unit_iters=True)
v59, v60 = sch.sample_perfect_tile(loop=l10, n=2, max_innermost_factor=64, decision=[1, 1])
l61, l62 = sch.split(loop=l10, factors=[v59, v60], preserve_unit_iters=True)
sch.reorder(l15, l23, l31, l39, l47, l16, l24, l32, l40, l48, l53, l57, l61, l17, l25, l33, l41, l49, l54, l58, l62, l18, l26, l34, l42, l50)
b63, = sch.get_consumers(block=b0)
sch.reverse_compute_at(block=b63, loop=l48, preserve_unit_loops=True, index=-1)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.vectorize", ann_val=64)
v64 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.unroll_explicit", ann_val=v64)
sch.enter_postproc()
b65 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b65, ann_key="meta_schedule.parallel")
sch.unannotate(block_or_loop=b65, ann_key="meta_schedule.vectorize")
sch.unannotate(block_or_loop=b65, ann_key="meta_schedule.unroll_explicit")
b66, b67 = sch.get_child_blocks(b65)
l68, l69, l70, l71, l72, l73, l74, l75, l76, l77, l78, l79, l80, l81, l82, l83, l84, l85, l86, l87, l88, l89, l90, l91, l92, l93 = sch.get_loops(block=b66)
l94 = sch.fuse(l68, l69, l70, l71, l72, l73, l74, l75, l76, l77, preserve_unit_iters=True)
sch.parallel(loop=l94)
sch.annotate(block_or_loop=l94, ann_key="pragma_auto_unroll_max_step", ann_val=512)
sch.annotate(block_or_loop=l94, ann_key="pragma_unroll_explicit", ann_val=1)
l95, l96, l97, l98, l99, l100 = sch.get_loops(block=b67)
b101 = sch.get_block(name="conv2d_NCHWc", func_name="main")
l102, l103, l104, l105, l106, l107, l108, l109, l110, l111, l112, l113, l114, l115, l116, l117, l118 = sch.get_loops(block=b101)
b119 = sch.decompose_reduction(block=b101, loop=l103)
2024-04-29 05:11:04 [INFO] [task_scheduler.cc:131] [Task #77: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_74] Trial #9: GFLOPs: 20.1610. Time: 14395.0496 us. Best GFLOPs: 137.4798
2024-04-29 05:11:04 [INFO] [task_scheduler.cc:131] [Task #77: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_74] Trial #10: GFLOPs: 67.1712. Time: 4320.5731 us. Best GFLOPs: 137.4798
2024-04-29 05:11:04 [INFO] [task_scheduler.cc:131] [Task #77: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_74] Trial #11: GFLOPs: 63.0382. Time: 4603.8415 us. Best GFLOPs: 137.4798
2024-04-29 05:11:04 [INFO] [task_scheduler.cc:131] [Task #77: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_74] Trial #12: GFLOPs: 17.5359. Time: 16549.8900 us. Best GFLOPs: 137.4798
2024-04-29 05:11:04 [INFO] [task_scheduler.cc:131] [Task #77: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_74] Trial #13: GFLOPs: 94.5357. Time: 3069.9316 us. Best GFLOPs: 137.4798
2024-04-29 05:11:04 [INFO] [task_scheduler.cc:131] [Task #77: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_74] Trial #14: GFLOPs: 102.5168. Time: 2830.9299 us. Best GFLOPs: 137.4798
2024-04-29 05:11:04 [INFO] [task_scheduler.cc:131] [Task #77: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_74] Trial #15: GFLOPs: 175.3331. Time: 1655.2377 us. Best GFLOPs: 175.3331
2024-04-29 05:11:04 [INFO] [task_scheduler.cc:121] [Task #77: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_74] Trial #16: Error in building:
LocalBuilder: Timeout, killed after 30.0 seconds
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(60), T.int64(56), T.int64(56), T.int64(4)), "float32"), p1: T.Buffer((T.int64(48), T.int64(60), T.int64(1), T.int64(1), T.int64(4), T.int64(4)), "float32"), p2: T.Buffer((T.int64(1), T.int64(48), T.int64(1), T.int64(1), T.int64(4)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(48), T.int64(56), T.int64(56), T.int64(4)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        conv2d_NCHWc = T.alloc_buffer((T.int64(1), T.int64(48), T.int64(56), T.int64(56), T.int64(4)))
        for n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_fused in T.parallel(T.int64(112), annotations={"pragma_auto_unroll_max_step": 512, "pragma_unroll_explicit": 1}):
            for n_1, oc_chunk_1, oh_1, ow_1, oc_block_1 in T.grid(T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(4)):
                for n_2_init, oc_chunk_2_init, oh_2_init, ow_2_init, oc_block_2_init, n_3_init, oc_chunk_3_init, oh_3_init, ow_3_init, oc_block_3_init in T.grid(T.int64(1), T.int64(8), T.int64(8), T.int64(7), T.int64(1), T.int64(1), T.int64(3), T.int64(1), T.int64(1), T.int64(1)):
                    with T.block("conv2d_NCHWc_init"):
                        v_n = T.axis.spatial(T.int64(1), n_1 + n_2_init + n_3_init)
                        v_oc_chunk = T.axis.spatial(T.int64(48), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_fused // T.int64(56) * T.int64(24) + oc_chunk_1 * T.int64(24) + oc_chunk_2_init * T.int64(3) + oc_chunk_3_init)
                        v_oh = T.axis.spatial(T.int64(56), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_fused % T.int64(56) // T.int64(8) * T.int64(8) + oh_1 * T.int64(8) + oh_2_init + oh_3_init)
                        v_ow = T.axis.spatial(T.int64(56), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_fused % T.int64(8) * T.int64(7) + ow_1 * T.int64(7) + ow_2_init + ow_3_init)
                        v_oc_block = T.axis.spatial(T.int64(4), oc_block_1 + oc_block_2_init + oc_block_3_init)
                        T.reads()
                        T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                        T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                        conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = T.float32(0)
                for ic_0, kh_0, kw_0, n_2, oc_chunk_2, oh_2, ow_2, oc_block_2, ic_1, kh_1, kw_1, n_3, oc_chunk_3, oh_3, ow_3, oc_block_3 in T.grid(T.int64(40), T.int64(1), T.int64(1), T.int64(1), T.int64(8), T.int64(8), T.int64(7), T.int64(1), T.int64(6), T.int64(1), T.int64(1), T.int64(1), T.int64(3), T.int64(1), T.int64(1), T.int64(1)):
                    with T.block("conv2d_NCHWc_update"):
                        v_n = T.axis.spatial(T.int64(1), n_1 + n_2 + n_3)
                        v_oc_chunk = T.axis.spatial(T.int64(48), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_fused // T.int64(56) * T.int64(24) + oc_chunk_1 * T.int64(24) + oc_chunk_2 * T.int64(3) + oc_chunk_3)
                        v_oh = T.axis.spatial(T.int64(56), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_fused % T.int64(56) // T.int64(8) * T.int64(8) + oh_1 * T.int64(8) + oh_2 + oh_3)
                        v_ow = T.axis.spatial(T.int64(56), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_fused % T.int64(8) * T.int64(7) + ow_1 * T.int64(7) + ow_2 + ow_3)
                        v_oc_block = T.axis.spatial(T.int64(4), oc_block_1 + oc_block_2 + oc_block_3)
                        v_ic = T.axis.reduce(T.int64(240), ic_0 * T.int64(6) + ic_1)
                        v_kh = T.axis.reduce(T.int64(1), kh_0 + kh_1)
                        v_kw = T.axis.reduce(T.int64(1), kw_0 + kw_1)
                        T.reads(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block], p0[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)], p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block])
                        T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                        T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                        conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] + p0[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)] * p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block]
            for ax0, ax1, ax2 in T.grid(T.int64(1), T.int64(24), T.int64(8)):
                for ax3_ax4_fused in T.vectorized(T.int64(28)):
                    with T.block("T_relu"):
                        v_ax0 = T.axis.spatial(T.int64(1), ax0)
                        v_ax1 = T.axis.spatial(T.int64(48), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_fused // T.int64(56) * T.int64(24) + ax1)
                        v_ax2 = T.axis.spatial(T.int64(56), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_fused % T.int64(56) // T.int64(8) * T.int64(8) + ax2)
                        v_ax3 = T.axis.spatial(T.int64(56), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_fused % T.int64(8) * T.int64(7) + ax3_ax4_fused // T.int64(4))
                        v_ax4 = T.axis.spatial(T.int64(4), ax3_ax4_fused % T.int64(4))
                        T.reads(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4])
                        T.writes(T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                        T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.max(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] + p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4], T.float32(0))
b0 = sch.get_block(name="conv2d_NCHWc", func_name="main")
b1 = sch.get_block(name="T_add", func_name="main")
b2 = sch.get_block(name="root", func_name="main")
sch.compute_inline(block=b1)
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.tiling_structure", ann_val="SSRSRS")
l3, l4, l5, l6, l7, l8, l9, l10 = sch.get_loops(block=b0)
v11, v12, v13, v14 = sch.sample_perfect_tile(loop=l3, n=4, max_innermost_factor=64, decision=[1, 1, 1, 1])
l15, l16, l17, l18 = sch.split(loop=l3, factors=[v11, v12, v13, v14], preserve_unit_iters=True)
v19, v20, v21, v22 = sch.sample_perfect_tile(loop=l4, n=4, max_innermost_factor=64, decision=[2, 1, 8, 3])
l23, l24, l25, l26 = sch.split(loop=l4, factors=[v19, v20, v21, v22], preserve_unit_iters=True)
v27, v28, v29, v30 = sch.sample_perfect_tile(loop=l5, n=4, max_innermost_factor=64, decision=[7, 1, 8, 1])
l31, l32, l33, l34 = sch.split(loop=l5, factors=[v27, v28, v29, v30], preserve_unit_iters=True)
v35, v36, v37, v38 = sch.sample_perfect_tile(loop=l6, n=4, max_innermost_factor=64, decision=[8, 1, 7, 1])
l39, l40, l41, l42 = sch.split(loop=l6, factors=[v35, v36, v37, v38], preserve_unit_iters=True)
v43, v44, v45, v46 = sch.sample_perfect_tile(loop=l7, n=4, max_innermost_factor=64, decision=[1, 4, 1, 1])
l47, l48, l49, l50 = sch.split(loop=l7, factors=[v43, v44, v45, v46], preserve_unit_iters=True)
v51, v52 = sch.sample_perfect_tile(loop=l8, n=2, max_innermost_factor=64, decision=[40, 6])
l53, l54 = sch.split(loop=l8, factors=[v51, v52], preserve_unit_iters=True)
v55, v56 = sch.sample_perfect_tile(loop=l9, n=2, max_innermost_factor=64, decision=[1, 1])
l57, l58 = sch.split(loop=l9, factors=[v55, v56], preserve_unit_iters=True)
v59, v60 = sch.sample_perfect_tile(loop=l10, n=2, max_innermost_factor=64, decision=[1, 1])
l61, l62 = sch.split(loop=l10, factors=[v59, v60], preserve_unit_iters=True)
sch.reorder(l15, l23, l31, l39, l47, l16, l24, l32, l40, l48, l53, l57, l61, l17, l25, l33, l41, l49, l54, l58, l62, l18, l26, l34, l42, l50)
b63, = sch.get_consumers(block=b0)
sch.reverse_compute_at(block=b63, loop=l47, preserve_unit_loops=True, index=-1)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.vectorize", ann_val=64)
v64 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.unroll_explicit", ann_val=v64)
sch.enter_postproc()
b65 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b65, ann_key="meta_schedule.parallel")
sch.unannotate(block_or_loop=b65, ann_key="meta_schedule.vectorize")
sch.unannotate(block_or_loop=b65, ann_key="meta_schedule.unroll_explicit")
b66, b67 = sch.get_child_blocks(b65)
l68, l69, l70, l71, l72, l73, l74, l75, l76, l77, l78, l79, l80, l81, l82, l83, l84, l85, l86, l87, l88, l89, l90, l91, l92, l93 = sch.get_loops(block=b66)
l94 = sch.fuse(l68, l69, l70, l71, l72, preserve_unit_iters=True)
sch.parallel(loop=l94)
sch.annotate(block_or_loop=l94, ann_key="pragma_auto_unroll_max_step", ann_val=512)
sch.annotate(block_or_loop=l94, ann_key="pragma_unroll_explicit", ann_val=1)
l95, l96, l97, l98, l99, l100 = sch.get_loops(block=b67)
l101 = sch.fuse(l99, l100, preserve_unit_iters=True)
sch.vectorize(loop=l101)
b102 = sch.get_block(name="conv2d_NCHWc", func_name="main")
l103, l104, l105, l106, l107, l108, l109, l110, l111, l112, l113, l114, l115, l116, l117, l118, l119, l120, l121, l122, l123, l124 = sch.get_loops(block=b102)
b125 = sch.decompose_reduction(block=b102, loop=l109)
2024-04-29 05:11:04 [INFO] [task_scheduler.cc:131] [Task #77: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_74] Trial #17: GFLOPs: 71.0630. Time: 4083.9548 us. Best GFLOPs: 175.3331
2024-04-29 05:11:04 [INFO] [task_scheduler.cc:121] [Task #77: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_74] Trial #18: Error in building:
LocalBuilder: Timeout, killed after 30.0 seconds
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(60), T.int64(56), T.int64(56), T.int64(4)), "float32"), p1: T.Buffer((T.int64(48), T.int64(60), T.int64(1), T.int64(1), T.int64(4), T.int64(4)), "float32"), p2: T.Buffer((T.int64(1), T.int64(48), T.int64(1), T.int64(1), T.int64(4)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(48), T.int64(56), T.int64(56), T.int64(4)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        conv2d_NCHWc = T.alloc_buffer((T.int64(1), T.int64(48), T.int64(56), T.int64(56), T.int64(4)))
        for n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused in T.parallel(T.int64(128), annotations={"pragma_auto_unroll_max_step": 512, "pragma_unroll_explicit": 1}):
            for n_2_init, oc_chunk_2_init, oh_2_init, ow_2_init, oc_block_2_init, n_3_init, oc_chunk_3_init, oh_3_init, ow_3_init, oc_block_3_init in T.grid(T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(4), T.int64(1), T.int64(3), T.int64(14), T.int64(28), T.int64(1)):
                with T.block("conv2d_NCHWc_init"):
                    v_n = T.axis.spatial(T.int64(1), n_2_init + n_3_init)
                    v_oc_chunk = T.axis.spatial(T.int64(48), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused // T.int64(32) * T.int64(12) + n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused % T.int64(16) // T.int64(4) * T.int64(3) + oc_chunk_2_init * T.int64(3) + oc_chunk_3_init)
                    v_oh = T.axis.spatial(T.int64(56), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused % T.int64(4) * T.int64(14) + oh_2_init * T.int64(14) + oh_3_init)
                    v_ow = T.axis.spatial(T.int64(56), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused % T.int64(32) // T.int64(16) * T.int64(28) + ow_2_init * T.int64(28) + ow_3_init)
                    v_oc_block = T.axis.spatial(T.int64(4), oc_block_2_init + oc_block_3_init)
                    T.reads()
                    T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                    T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                    conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = T.float32(0)
            for ic_0, kh_0, kw_0, n_2, oc_chunk_2, oh_2, ow_2, oc_block_2, ic_1, kh_1, kw_1, n_3, oc_chunk_3, oh_3, ow_3, oc_block_3 in T.grid(T.int64(4), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(4), T.int64(60), T.int64(1), T.int64(1), T.int64(1), T.int64(3), T.int64(14), T.int64(28), T.int64(1)):
                with T.block("conv2d_NCHWc_update"):
                    v_n = T.axis.spatial(T.int64(1), n_2 + n_3)
                    v_oc_chunk = T.axis.spatial(T.int64(48), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused // T.int64(32) * T.int64(12) + n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused % T.int64(16) // T.int64(4) * T.int64(3) + oc_chunk_2 * T.int64(3) + oc_chunk_3)
                    v_oh = T.axis.spatial(T.int64(56), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused % T.int64(4) * T.int64(14) + oh_2 * T.int64(14) + oh_3)
                    v_ow = T.axis.spatial(T.int64(56), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused % T.int64(32) // T.int64(16) * T.int64(28) + ow_2 * T.int64(28) + ow_3)
                    v_oc_block = T.axis.spatial(T.int64(4), oc_block_2 + oc_block_3)
                    v_ic = T.axis.reduce(T.int64(240), ic_0 * T.int64(60) + ic_1)
                    v_kh = T.axis.reduce(T.int64(1), kh_0 + kh_1)
                    v_kw = T.axis.reduce(T.int64(1), kw_0 + kw_1)
                    T.reads(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block], p0[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)], p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block])
                    T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                    T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                    conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] + p0[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)] * p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block]
        for ax0_ax1_ax2_ax3_ax4_fused_0 in T.parallel(T.int64(9408)):
            for ax0_ax1_ax2_ax3_ax4_fused_1 in T.vectorized(T.int64(64)):
                with T.block("T_relu"):
                    v_ax0 = T.axis.spatial(T.int64(1), T.int64(0))
                    v_ax1 = T.axis.spatial(T.int64(48), (ax0_ax1_ax2_ax3_ax4_fused_0 * T.int64(64) + ax0_ax1_ax2_ax3_ax4_fused_1) // T.int64(12544))
                    v_ax2 = T.axis.spatial(T.int64(56), (ax0_ax1_ax2_ax3_ax4_fused_0 * T.int64(64) + ax0_ax1_ax2_ax3_ax4_fused_1) % T.int64(12544) // T.int64(224))
                    v_ax3 = T.axis.spatial(T.int64(56), (ax0_ax1_ax2_ax3_ax4_fused_0 * T.int64(64) + ax0_ax1_ax2_ax3_ax4_fused_1) % T.int64(224) // T.int64(4))
                    v_ax4 = T.axis.spatial(T.int64(4), (ax0_ax1_ax2_ax3_ax4_fused_0 * T.int64(64) + ax0_ax1_ax2_ax3_ax4_fused_1) % T.int64(4))
                    T.reads(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4])
                    T.writes(T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                    T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.max(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] + p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4], T.float32(0))
b0 = sch.get_block(name="conv2d_NCHWc", func_name="main")
b1 = sch.get_block(name="T_add", func_name="main")
b2 = sch.get_block(name="root", func_name="main")
sch.compute_inline(block=b1)
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.tiling_structure", ann_val="SSRSRS")
l3, l4, l5, l6, l7, l8, l9, l10 = sch.get_loops(block=b0)
v11, v12, v13, v14 = sch.sample_perfect_tile(loop=l3, n=4, max_innermost_factor=64, decision=[1, 1, 1, 1])
l15, l16, l17, l18 = sch.split(loop=l3, factors=[v11, v12, v13, v14], preserve_unit_iters=True)
v19, v20, v21, v22 = sch.sample_perfect_tile(loop=l4, n=4, max_innermost_factor=64, decision=[4, 4, 1, 3])
l23, l24, l25, l26 = sch.split(loop=l4, factors=[v19, v20, v21, v22], preserve_unit_iters=True)
v27, v28, v29, v30 = sch.sample_perfect_tile(loop=l5, n=4, max_innermost_factor=64, decision=[1, 4, 1, 14])
l31, l32, l33, l34 = sch.split(loop=l5, factors=[v27, v28, v29, v30], preserve_unit_iters=True)
v35, v36, v37, v38 = sch.sample_perfect_tile(loop=l6, n=4, max_innermost_factor=64, decision=[2, 1, 1, 28])
l39, l40, l41, l42 = sch.split(loop=l6, factors=[v35, v36, v37, v38], preserve_unit_iters=True)
v43, v44, v45, v46 = sch.sample_perfect_tile(loop=l7, n=4, max_innermost_factor=64, decision=[1, 1, 4, 1])
l47, l48, l49, l50 = sch.split(loop=l7, factors=[v43, v44, v45, v46], preserve_unit_iters=True)
v51, v52 = sch.sample_perfect_tile(loop=l8, n=2, max_innermost_factor=64, decision=[4, 60])
l53, l54 = sch.split(loop=l8, factors=[v51, v52], preserve_unit_iters=True)
v55, v56 = sch.sample_perfect_tile(loop=l9, n=2, max_innermost_factor=64, decision=[1, 1])
l57, l58 = sch.split(loop=l9, factors=[v55, v56], preserve_unit_iters=True)
v59, v60 = sch.sample_perfect_tile(loop=l10, n=2, max_innermost_factor=64, decision=[1, 1])
l61, l62 = sch.split(loop=l10, factors=[v59, v60], preserve_unit_iters=True)
sch.reorder(l15, l23, l31, l39, l47, l16, l24, l32, l40, l48, l53, l57, l61, l17, l25, l33, l41, l49, l54, l58, l62, l18, l26, l34, l42, l50)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.vectorize", ann_val=64)
v63 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.unroll_explicit", ann_val=v63)
sch.enter_postproc()
b64 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b64, ann_key="meta_schedule.parallel")
sch.unannotate(block_or_loop=b64, ann_key="meta_schedule.vectorize")
sch.unannotate(block_or_loop=b64, ann_key="meta_schedule.unroll_explicit")
b65, b66 = sch.get_child_blocks(b64)
l67, l68, l69, l70, l71, l72, l73, l74, l75, l76, l77, l78, l79, l80, l81, l82, l83, l84, l85, l86, l87, l88, l89, l90, l91, l92 = sch.get_loops(block=b65)
l93 = sch.fuse(l67, l68, l69, l70, l71, l72, l73, l74, l75, l76, preserve_unit_iters=True)
sch.parallel(loop=l93)
sch.annotate(block_or_loop=l93, ann_key="pragma_auto_unroll_max_step", ann_val=512)
sch.annotate(block_or_loop=l93, ann_key="pragma_unroll_explicit", ann_val=1)
l94, l95, l96, l97, l98 = sch.get_loops(block=b66)
l99 = sch.fuse(l94, l95, l96, l97, l98, preserve_unit_iters=True)
l100, l101 = sch.split(loop=l99, factors=[None, 64], preserve_unit_iters=True)
sch.parallel(loop=l100)
sch.vectorize(loop=l101)
b102 = sch.get_block(name="conv2d_NCHWc", func_name="main")
l103, l104, l105, l106, l107, l108, l109, l110, l111, l112, l113, l114, l115, l116, l117, l118, l119 = sch.get_loops(block=b102)
b120 = sch.decompose_reduction(block=b102, loop=l104)
2024-04-29 05:11:04 [INFO] [task_scheduler.cc:131] [Task #77: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_74] Trial #19: GFLOPs: 45.1520. Time: 6427.5756 us. Best GFLOPs: 175.3331
2024-04-29 05:11:04 [INFO] [task_scheduler.cc:131] [Task #77: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_74] Trial #20: GFLOPs: 49.4381. Time: 5870.3246 us. Best GFLOPs: 175.3331
2024-04-29 05:11:04 [INFO] [task_scheduler.cc:131] [Task #77: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_74] Trial #21: GFLOPs: 31.3399. Time: 9260.3425 us. Best GFLOPs: 175.3331
2024-04-29 05:11:04 [INFO] [task_scheduler.cc:131] [Task #77: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_74] Trial #22: GFLOPs: 66.9344. Time: 4335.8566 us. Best GFLOPs: 175.3331
2024-04-29 05:11:04 [INFO] [task_scheduler.cc:131] [Task #77: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_74] Trial #23: GFLOPs: 47.3613. Time: 6127.7411 us. Best GFLOPs: 175.3331
2024-04-29 05:11:04 [INFO] [task_scheduler.cc:131] [Task #77: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_74] Trial #24: GFLOPs: 85.3641. Time: 3399.7673 us. Best GFLOPs: 175.3331
2024-04-29 05:11:04 [INFO] [task_scheduler.cc:131] [Task #77: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_74] Trial #25: GFLOPs: 52.9356. Time: 5482.4703 us. Best GFLOPs: 175.3331
2024-04-29 05:11:04 [INFO] [task_scheduler.cc:131] [Task #77: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_74] Trial #26: GFLOPs: 16.4006. Time: 17695.5213 us. Best GFLOPs: 175.3331
2024-04-29 05:11:04 [INFO] [task_scheduler.cc:131] [Task #77: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_74] Trial #27: GFLOPs: 100.1375. Time: 2898.1941 us. Best GFLOPs: 175.3331
2024-04-29 05:11:04 [INFO] [task_scheduler.cc:131] [Task #77: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_74] Trial #28: GFLOPs: 82.4379. Time: 3520.4438 us. Best GFLOPs: 175.3331
2024-04-29 05:11:04 [INFO] [task_scheduler.cc:131] [Task #77: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_74] Trial #29: GFLOPs: 93.9151. Time: 3090.2163 us. Best GFLOPs: 175.3331
2024-04-29 05:11:04 [INFO] [task_scheduler.cc:131] [Task #77: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_74] Trial #30: GFLOPs: 29.7170. Time: 9766.0455 us. Best GFLOPs: 175.3331
2024-04-29 05:11:04 [INFO] [task_scheduler.cc:131] [Task #77: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_74] Trial #31: GFLOPs: 67.5711. Time: 4295.0012 us. Best GFLOPs: 175.3331
2024-04-29 05:11:04 [INFO] [task_scheduler.cc:131] [Task #77: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_74] Trial #32: GFLOPs: 122.0183. Time: 2378.4786 us. Best GFLOPs: 175.3331
2024-04-29 05:11:04 [INFO] [task_scheduler.cc:131] [Task #77: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_74] Trial #33: GFLOPs: 156.1313. Time: 1858.8078 us. Best GFLOPs: 175.3331
2024-04-29 05:11:04 [INFO] [task_scheduler.cc:131] [Task #77: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_74] Trial #34: GFLOPs: 130.8554. Time: 2217.8526 us. Best GFLOPs: 175.3331
2024-04-29 05:11:04 [INFO] [task_scheduler.cc:131] [Task #77: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_74] Trial #35: GFLOPs: 19.5930. Time: 14812.3594 us. Best GFLOPs: 175.3331
2024-04-29 05:11:04 [INFO] [task_scheduler.cc:131] [Task #77: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_74] Trial #36: GFLOPs: 110.3672. Time: 2629.5672 us. Best GFLOPs: 175.3331
2024-04-29 05:11:04 [INFO] [task_scheduler.cc:131] [Task #77: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_74] Trial #37: GFLOPs: 29.6843. Time: 9776.8155 us. Best GFLOPs: 175.3331
2024-04-29 05:11:04 [INFO] [task_scheduler.cc:131] [Task #77: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_74] Trial #38: GFLOPs: 89.6704. Time: 3236.4958 us. Best GFLOPs: 175.3331
2024-04-29 05:11:04 [INFO] [task_scheduler.cc:131] [Task #77: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_74] Trial #39: GFLOPs: 26.0270. Time: 11150.6681 us. Best GFLOPs: 175.3331
2024-04-29 05:11:04 [INFO] [task_scheduler.cc:131] [Task #77: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_74] Trial #40: GFLOPs: 104.2456. Time: 2783.9842 us. Best GFLOPs: 175.3331
2024-04-29 05:11:04 [INFO] [task_scheduler.cc:131] [Task #77: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_74] Trial #41: GFLOPs: 86.3790. Time: 3359.8229 us. Best GFLOPs: 175.3331
2024-04-29 05:11:04 [INFO] [task_scheduler.cc:131] [Task #77: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_74] Trial #42: GFLOPs: 7.3115. Time: 39693.3567 us. Best GFLOPs: 175.3331
2024-04-29 05:11:04 [INFO] [task_scheduler.cc:131] [Task #77: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_74] Trial #43: GFLOPs: 189.4399. Time: 1531.9788 us. Best GFLOPs: 189.4399
2024-04-29 05:11:04 [INFO] [task_scheduler.cc:131] [Task #77: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_74] Trial #44: GFLOPs: 82.2767. Time: 3527.3397 us. Best GFLOPs: 189.4399
2024-04-29 05:11:04 [INFO] [task_scheduler.cc:131] [Task #77: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_74] Trial #45: GFLOPs: 161.5750. Time: 1796.1812 us. Best GFLOPs: 189.4399
2024-04-29 05:11:04 [INFO] [task_scheduler.cc:131] [Task #77: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_74] Trial #46: GFLOPs: 36.0744. Time: 8044.9802 us. Best GFLOPs: 189.4399
2024-04-29 05:11:04 [INFO] [task_scheduler.cc:131] [Task #77: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_74] Trial #47: GFLOPs: 191.8668. Time: 1512.6013 us. Best GFLOPs: 191.8668
2024-04-29 05:11:04 [INFO] [task_scheduler.cc:131] [Task #77: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_74] Trial #48: GFLOPs: 22.9122. Time: 12666.5115 us. Best GFLOPs: 191.8668
2024-04-29 05:11:04 [INFO] [task_scheduler.cc:131] [Task #77: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_74] Trial #49: GFLOPs: 61.8364. Time: 4693.3228 us. Best GFLOPs: 191.8668
2024-04-29 05:11:04 [INFO] [task_scheduler.cc:131] [Task #77: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_74] Trial #50: GFLOPs: 32.1937. Time: 9014.7457 us. Best GFLOPs: 191.8668
2024-04-29 05:11:04 [INFO] [task_scheduler.cc:131] [Task #77: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_74] Trial #51: GFLOPs: 143.3656. Time: 2024.3212 us. Best GFLOPs: 191.8668
2024-04-29 05:11:04 [INFO] [task_scheduler.cc:131] [Task #77: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_74] Trial #52: GFLOPs: 62.6856. Time: 4629.7371 us. Best GFLOPs: 191.8668
2024-04-29 05:11:04 [INFO] [task_scheduler.cc:131] [Task #77: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_74] Trial #53: GFLOPs: 42.7976. Time: 6781.1791 us. Best GFLOPs: 191.8668
2024-04-29 05:11:04 [INFO] [task_scheduler.cc:131] [Task #77: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_74] Trial #54: GFLOPs: 84.6195. Time: 3429.6816 us. Best GFLOPs: 191.8668
2024-04-29 05:11:04 [INFO] [task_scheduler.cc:131] [Task #77: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_74] Trial #55: GFLOPs: 109.7637. Time: 2644.0256 us. Best GFLOPs: 191.8668
2024-04-29 05:11:04 [INFO] [task_scheduler.cc:131] [Task #77: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_74] Trial #56: GFLOPs: 67.0565. Time: 4327.9607 us. Best GFLOPs: 191.8668
2024-04-29 05:11:04 [INFO] [task_scheduler.cc:131] [Task #77: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_74] Trial #57: GFLOPs: 2.2172. Time: 130894.7327 us. Best GFLOPs: 191.8668
2024-04-29 05:11:04 [INFO] [task_scheduler.cc:131] [Task #77: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_74] Trial #58: GFLOPs: 113.2176. Time: 2563.3646 us. Best GFLOPs: 191.8668
2024-04-29 05:11:04 [INFO] [task_scheduler.cc:131] [Task #77: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_74] Trial #59: GFLOPs: 48.5821. Time: 5973.7667 us. Best GFLOPs: 191.8668
2024-04-29 05:11:04 [INFO] [task_scheduler.cc:131] [Task #77: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_74] Trial #60: GFLOPs: 12.3460. Time: 23507.0952 us. Best GFLOPs: 191.8668
2024-04-29 05:11:04 [INFO] [task_scheduler.cc:131] [Task #77: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_74] Trial #61: GFLOPs: 2.6435. Time: 109786.2890 us. Best GFLOPs: 191.8668
2024-04-29 05:11:04 [INFO] [task_scheduler.cc:131] [Task #77: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_74] Trial #62: GFLOPs: 59.1783. Time: 4904.1280 us. Best GFLOPs: 191.8668
2024-04-29 05:11:04 [INFO] [task_scheduler.cc:131] [Task #77: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_74] Trial #63: GFLOPs: 90.8770. Time: 3193.5235 us. Best GFLOPs: 191.8668
2024-04-29 05:11:04 [INFO] [task_scheduler.cc:131] [Task #77: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_74] Trial #64: GFLOPs: 89.4939. Time: 3242.8814 us. Best GFLOPs: 191.8668
2024-04-29 06:00:12 [INFO] [evolutionary_search.cc:713] Generating candidates......
2024-04-29 06:00:12 [INFO] [evolutionary_search.cc:715] Picked top 61 candidate(s) from database
2024-04-29 06:00:15 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x11bbb7a8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0xff00018)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0xb3c34a8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0xba3b978)]: 0 failure(s)
2024-04-29 06:00:15 [INFO] [evolutionary_search.cc:723] Sampled 451 candidate(s)
2024-04-29 06:00:20 [INFO] [evolutionary_search.cc:621] Evolve iter #0 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x11bbb7a8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0xff00018)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0xb3c34a8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0xba3b978)]: 0 failure(s)
2024-04-29 06:00:26 [INFO] [evolutionary_search.cc:621] Evolve iter #1 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x11bbb7a8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0xff00018)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0xb3c34a8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0xba3b978)]: 0 failure(s)
2024-04-29 06:00:31 [INFO] [evolutionary_search.cc:621] Evolve iter #2 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x11bbb7a8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0xff00018)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0xb3c34a8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0xba3b978)]: 0 failure(s)
2024-04-29 06:00:37 [INFO] [evolutionary_search.cc:621] Evolve iter #3 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x11bbb7a8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0xff00018)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0xb3c34a8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0xba3b978)]: 0 failure(s)
2024-04-29 06:00:40 [INFO] [evolutionary_search.cc:649] Scores of the best 64 candidates:
[1 : 16]:	0.9953  0.9927  0.9927  0.9925  0.9877  0.9807  0.9431  0.9381  0.9321  0.9280  0.9267  0.9201  0.8886  0.8770  0.8770  0.8753
[17 : 32]:	0.8753  0.8725  0.8708  0.8657  0.8652  0.8573  0.8565  0.8553  0.8550  0.8538  0.8510  0.8508  0.8492  0.8476  0.8466  0.8378
[33 : 48]:	0.8369  0.8324  0.8305  0.8293  0.8285  0.8269  0.8210  0.8210  0.8209  0.8204  0.8152  0.8132  0.8119  0.8093  0.8033  0.7969
[49 : 64]:	0.7915  0.7873  0.7868  0.7860  0.7838  0.7804  0.7798  0.7736  0.7733  0.7723  0.7703  0.7702  0.7665  0.7656  0.7652  0.7651
2024-04-29 06:00:40 [INFO] [evolutionary_search.cc:727] Got 64 candidate(s) with evolutionary search
2024-04-29 06:00:40 [INFO] [evolutionary_search.cc:730] Sending 64 candidates(s) for measurement
2024-04-29 06:02:26 [INFO] [task_scheduler.cc:131] [Task #77: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_74] Trial #65: GFLOPs: 192.5463. Time: 1507.2632 us. Best GFLOPs: 192.5463
2024-04-29 06:02:26 [INFO] [task_scheduler.cc:131] [Task #77: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_74] Trial #66: GFLOPs: 175.5657. Time: 1653.0447 us. Best GFLOPs: 192.5463
2024-04-29 06:02:26 [INFO] [task_scheduler.cc:131] [Task #77: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_74] Trial #67: GFLOPs: 187.5620. Time: 1547.3180 us. Best GFLOPs: 192.5463
2024-04-29 06:02:26 [INFO] [task_scheduler.cc:131] [Task #77: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_74] Trial #68: GFLOPs: 229.0577. Time: 1267.0081 us. Best GFLOPs: 229.0577
2024-04-29 06:02:26 [INFO] [task_scheduler.cc:131] [Task #77: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_74] Trial #69: GFLOPs: 192.4010. Time: 1508.4014 us. Best GFLOPs: 229.0577
2024-04-29 06:02:26 [INFO] [task_scheduler.cc:131] [Task #77: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_74] Trial #70: GFLOPs: 180.6679. Time: 1606.3612 us. Best GFLOPs: 229.0577
2024-04-29 06:02:26 [INFO] [task_scheduler.cc:131] [Task #77: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_74] Trial #71: GFLOPs: 160.2063. Time: 1811.5262 us. Best GFLOPs: 229.0577
2024-04-29 06:02:26 [INFO] [task_scheduler.cc:131] [Task #77: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_74] Trial #72: GFLOPs: 178.4686. Time: 1626.1567 us. Best GFLOPs: 229.0577
2024-04-29 06:02:26 [INFO] [task_scheduler.cc:131] [Task #77: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_74] Trial #73: GFLOPs: 205.5604. Time: 1411.8377 us. Best GFLOPs: 229.0577
2024-04-29 06:02:26 [INFO] [task_scheduler.cc:131] [Task #77: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_74] Trial #74: GFLOPs: 198.0755. Time: 1465.1885 us. Best GFLOPs: 229.0577
2024-04-29 06:02:26 [INFO] [task_scheduler.cc:131] [Task #77: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_74] Trial #75: GFLOPs: 125.4290. Time: 2313.8021 us. Best GFLOPs: 229.0577
2024-04-29 06:02:26 [INFO] [task_scheduler.cc:131] [Task #77: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_74] Trial #76: GFLOPs: 170.9480. Time: 1697.6978 us. Best GFLOPs: 229.0577
2024-04-29 06:02:26 [INFO] [task_scheduler.cc:131] [Task #77: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_74] Trial #77: GFLOPs: 153.4734. Time: 1890.9990 us. Best GFLOPs: 229.0577
2024-04-29 06:02:26 [INFO] [task_scheduler.cc:131] [Task #77: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_74] Trial #78: GFLOPs: 142.6825. Time: 2034.0118 us. Best GFLOPs: 229.0577
2024-04-29 06:02:26 [INFO] [task_scheduler.cc:131] [Task #77: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_74] Trial #79: GFLOPs: 176.3283. Time: 1645.8954 us. Best GFLOPs: 229.0577
2024-04-29 06:02:26 [INFO] [task_scheduler.cc:131] [Task #77: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_74] Trial #80: GFLOPs: 129.4427. Time: 2242.0574 us. Best GFLOPs: 229.0577
2024-04-29 06:02:26 [INFO] [task_scheduler.cc:131] [Task #77: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_74] Trial #81: GFLOPs: 81.5913. Time: 3556.9706 us. Best GFLOPs: 229.0577
2024-04-29 06:02:26 [INFO] [task_scheduler.cc:131] [Task #77: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_74] Trial #82: GFLOPs: 135.6159. Time: 2140.0005 us. Best GFLOPs: 229.0577
2024-04-29 06:02:26 [INFO] [task_scheduler.cc:131] [Task #77: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_74] Trial #83: GFLOPs: 176.6687. Time: 1642.7246 us. Best GFLOPs: 229.0577
2024-04-29 06:02:26 [INFO] [task_scheduler.cc:131] [Task #77: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_74] Trial #84: GFLOPs: 160.3340. Time: 1810.0837 us. Best GFLOPs: 229.0577
2024-04-29 06:02:26 [INFO] [task_scheduler.cc:131] [Task #77: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_74] Trial #85: GFLOPs: 33.2230. Time: 8735.4651 us. Best GFLOPs: 229.0577
2024-04-29 06:02:26 [INFO] [task_scheduler.cc:131] [Task #77: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_74] Trial #86: GFLOPs: 32.2294. Time: 9004.7542 us. Best GFLOPs: 229.0577
2024-04-29 06:02:26 [INFO] [task_scheduler.cc:131] [Task #77: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_74] Trial #87: GFLOPs: 71.0924. Time: 4082.2659 us. Best GFLOPs: 229.0577
2024-04-29 06:02:26 [INFO] [task_scheduler.cc:131] [Task #77: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_74] Trial #88: GFLOPs: 154.8503. Time: 1874.1842 us. Best GFLOPs: 229.0577
2024-04-29 06:02:26 [INFO] [task_scheduler.cc:131] [Task #77: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_74] Trial #89: GFLOPs: 181.5420. Time: 1598.6272 us. Best GFLOPs: 229.0577
2024-04-29 06:02:26 [INFO] [task_scheduler.cc:131] [Task #77: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_74] Trial #90: GFLOPs: 30.7926. Time: 9424.9383 us. Best GFLOPs: 229.0577
2024-04-29 06:02:26 [INFO] [task_scheduler.cc:131] [Task #77: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_74] Trial #91: GFLOPs: 178.0045. Time: 1630.3971 us. Best GFLOPs: 229.0577
2024-04-29 06:02:26 [INFO] [task_scheduler.cc:131] [Task #77: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_74] Trial #92: GFLOPs: 111.9377. Time: 2592.6732 us. Best GFLOPs: 229.0577
2024-04-29 06:02:26 [INFO] [task_scheduler.cc:131] [Task #77: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_74] Trial #93: GFLOPs: 149.4096. Time: 1942.4326 us. Best GFLOPs: 229.0577
2024-04-29 06:02:26 [INFO] [task_scheduler.cc:131] [Task #77: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_74] Trial #94: GFLOPs: 127.9811. Time: 2267.6626 us. Best GFLOPs: 229.0577
2024-04-29 06:02:26 [INFO] [task_scheduler.cc:121] [Task #77: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_74] Trial #95: Error in building:
LocalBuilder: Timeout, killed after 30.0 seconds
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(60), T.int64(56), T.int64(56), T.int64(4)), "float32"), p1: T.Buffer((T.int64(48), T.int64(60), T.int64(1), T.int64(1), T.int64(4), T.int64(4)), "float32"), p2: T.Buffer((T.int64(1), T.int64(48), T.int64(1), T.int64(1), T.int64(4)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(48), T.int64(56), T.int64(56), T.int64(4)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        conv2d_NCHWc = T.alloc_buffer((T.int64(1), T.int64(48), T.int64(56), T.int64(56), T.int64(4)))
        for n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_fused in T.parallel(T.int64(168), annotations={"pragma_auto_unroll_max_step": 512, "pragma_unroll_explicit": 1}):
            for n_1, oc_chunk_1, oh_1, ow_1, oc_block_1 in T.grid(T.int64(1), T.int64(2), T.int64(8), T.int64(2), T.int64(1)):
                for n_2_init, oc_chunk_2_init, oh_2_init, ow_2_init, oc_block_2_init, n_3_init, oc_chunk_3_init, oh_3_init, ow_3_init in T.grid(T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(14)):
                    for oc_block_3_fused_init in T.vectorized(T.int64(4)):
                        with T.block("conv2d_NCHWc_init"):
                            v_n = T.axis.spatial(T.int64(1), n_1 + n_2_init + n_3_init)
                            v_oc_chunk = T.axis.spatial(T.int64(48), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_fused // T.int64(7) * T.int64(2) + oc_chunk_1 + oc_chunk_2_init + oc_chunk_3_init)
                            v_oh = T.axis.spatial(T.int64(56), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_fused % T.int64(7) * T.int64(8) + oh_1 + oh_2_init + oh_3_init)
                            v_ow = T.axis.spatial(T.int64(56), ow_1 * T.int64(28) + ow_2_init * T.int64(14) + ow_3_init)
                            v_oc_block = T.axis.spatial(T.int64(4), oc_block_1 * T.int64(4) + oc_block_2_init * T.int64(4) + oc_block_3_fused_init)
                            T.reads()
                            T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                            T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                            conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = T.float32(0)
                for ic_0, kh_0, kw_0, n_2, oc_chunk_2, oh_2, ow_2, oc_block_2, ic_1, kh_1, kw_1, n_3, oc_chunk_3, oh_3, ow_3 in T.grid(T.int64(8), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(1), T.int64(30), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(14)):
                    for oc_block_3_fused in T.vectorized(T.int64(4)):
                        with T.block("conv2d_NCHWc_update"):
                            v_n = T.axis.spatial(T.int64(1), n_1 + n_2 + n_3)
                            v_oc_chunk = T.axis.spatial(T.int64(48), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_fused // T.int64(7) * T.int64(2) + oc_chunk_1 + oc_chunk_2 + oc_chunk_3)
                            v_oh = T.axis.spatial(T.int64(56), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_fused % T.int64(7) * T.int64(8) + oh_1 + oh_2 + oh_3)
                            v_ow = T.axis.spatial(T.int64(56), ow_1 * T.int64(28) + ow_2 * T.int64(14) + ow_3)
                            v_oc_block = T.axis.spatial(T.int64(4), oc_block_1 * T.int64(4) + oc_block_2 * T.int64(4) + oc_block_3_fused)
                            v_ic = T.axis.reduce(T.int64(240), ic_0 * T.int64(30) + ic_1)
                            v_kh = T.axis.reduce(T.int64(1), kh_0 + kh_1)
                            v_kw = T.axis.reduce(T.int64(1), kw_0 + kw_1)
                            T.reads(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block], p0[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)], p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block])
                            T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                            T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                            conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] + p0[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)] * p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block]
            for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(2), T.int64(8), T.int64(56)):
                for ax4_fused in T.vectorized(T.int64(4)):
                    with T.block("T_relu"):
                        v_ax0 = T.axis.spatial(T.int64(1), ax0)
                        v_ax1 = T.axis.spatial(T.int64(48), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_fused // T.int64(7) * T.int64(2) + ax1)
                        v_ax2 = T.axis.spatial(T.int64(56), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_fused % T.int64(7) * T.int64(8) + ax2)
                        v_ax3, v_ax4 = T.axis.remap("SS", [ax3, ax4_fused])
                        T.reads(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4])
                        T.writes(T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                        T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.max(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] + p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4], T.float32(0))
b0 = sch.get_block(name="conv2d_NCHWc", func_name="main")
b1 = sch.get_block(name="T_add", func_name="main")
b2 = sch.get_block(name="root", func_name="main")
sch.compute_inline(block=b1)
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.tiling_structure", ann_val="SSRSRS")
l3, l4, l5, l6, l7, l8, l9, l10 = sch.get_loops(block=b0)
v11, v12, v13, v14 = sch.sample_perfect_tile(loop=l3, n=4, max_innermost_factor=64, decision=[1, 1, 1, 1])
l15, l16, l17, l18 = sch.split(loop=l3, factors=[v11, v12, v13, v14], preserve_unit_iters=True)
v19, v20, v21, v22 = sch.sample_perfect_tile(loop=l4, n=4, max_innermost_factor=64, decision=[24, 2, 1, 1])
l23, l24, l25, l26 = sch.split(loop=l4, factors=[v19, v20, v21, v22], preserve_unit_iters=True)
v27, v28, v29, v30 = sch.sample_perfect_tile(loop=l5, n=4, max_innermost_factor=64, decision=[7, 8, 1, 1])
l31, l32, l33, l34 = sch.split(loop=l5, factors=[v27, v28, v29, v30], preserve_unit_iters=True)
v35, v36, v37, v38 = sch.sample_perfect_tile(loop=l6, n=4, max_innermost_factor=64, decision=[1, 2, 2, 14])
l39, l40, l41, l42 = sch.split(loop=l6, factors=[v35, v36, v37, v38], preserve_unit_iters=True)
v43, v44, v45, v46 = sch.sample_perfect_tile(loop=l7, n=4, max_innermost_factor=64, decision=[1, 1, 1, 4])
l47, l48, l49, l50 = sch.split(loop=l7, factors=[v43, v44, v45, v46], preserve_unit_iters=True)
v51, v52 = sch.sample_perfect_tile(loop=l8, n=2, max_innermost_factor=64, decision=[8, 30])
l53, l54 = sch.split(loop=l8, factors=[v51, v52], preserve_unit_iters=True)
v55, v56 = sch.sample_perfect_tile(loop=l9, n=2, max_innermost_factor=64, decision=[1, 1])
l57, l58 = sch.split(loop=l9, factors=[v55, v56], preserve_unit_iters=True)
v59, v60 = sch.sample_perfect_tile(loop=l10, n=2, max_innermost_factor=64, decision=[1, 1])
l61, l62 = sch.split(loop=l10, factors=[v59, v60], preserve_unit_iters=True)
sch.reorder(l15, l23, l31, l39, l47, l16, l24, l32, l40, l48, l53, l57, l61, l17, l25, l33, l41, l49, l54, l58, l62, l18, l26, l34, l42, l50)
b63, = sch.get_consumers(block=b0)
sch.reverse_compute_at(block=b63, loop=l47, preserve_unit_loops=True, index=-1)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.vectorize", ann_val=64)
v64 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.unroll_explicit", ann_val=v64)
sch.enter_postproc()
b65 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b65, ann_key="meta_schedule.parallel")
sch.unannotate(block_or_loop=b65, ann_key="meta_schedule.vectorize")
sch.unannotate(block_or_loop=b65, ann_key="meta_schedule.unroll_explicit")
b66, b67 = sch.get_child_blocks(b65)
l68, l69, l70, l71, l72, l73, l74, l75, l76, l77, l78, l79, l80, l81, l82, l83, l84, l85, l86, l87, l88, l89, l90, l91, l92, l93 = sch.get_loops(block=b66)
l94 = sch.fuse(l68, l69, l70, l71, l72, preserve_unit_iters=True)
sch.parallel(loop=l94)
l95 = sch.fuse(l93, preserve_unit_iters=True)
sch.vectorize(loop=l95)
sch.annotate(block_or_loop=l94, ann_key="pragma_auto_unroll_max_step", ann_val=512)
sch.annotate(block_or_loop=l94, ann_key="pragma_unroll_explicit", ann_val=1)
l96, l97, l98, l99, l100, l101 = sch.get_loops(block=b67)
l102 = sch.fuse(l101, preserve_unit_iters=True)
sch.vectorize(loop=l102)
b103 = sch.get_block(name="conv2d_NCHWc", func_name="main")
l104, l105, l106, l107, l108, l109, l110, l111, l112, l113, l114, l115, l116, l117, l118, l119, l120, l121, l122, l123, l124, l125 = sch.get_loops(block=b103)
b126 = sch.decompose_reduction(block=b103, loop=l110)
2024-04-29 06:02:26 [INFO] [task_scheduler.cc:131] [Task #77: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_74] Trial #96: GFLOPs: 188.6780. Time: 1538.1652 us. Best GFLOPs: 229.0577
2024-04-29 06:02:26 [INFO] [task_scheduler.cc:131] [Task #77: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_74] Trial #97: GFLOPs: 118.3642. Time: 2451.9073 us. Best GFLOPs: 229.0577
2024-04-29 06:02:26 [INFO] [task_scheduler.cc:131] [Task #77: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_74] Trial #98: GFLOPs: 140.2033. Time: 2069.9800 us. Best GFLOPs: 229.0577
2024-04-29 06:02:26 [INFO] [task_scheduler.cc:131] [Task #77: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_74] Trial #99: GFLOPs: 144.0950. Time: 2014.0741 us. Best GFLOPs: 229.0577
2024-04-29 06:02:26 [INFO] [task_scheduler.cc:121] [Task #77: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_74] Trial #100: Error in building:
LocalBuilder: Timeout, killed after 30.0 seconds
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(60), T.int64(56), T.int64(56), T.int64(4)), "float32"), p1: T.Buffer((T.int64(48), T.int64(60), T.int64(1), T.int64(1), T.int64(4), T.int64(4)), "float32"), p2: T.Buffer((T.int64(1), T.int64(48), T.int64(1), T.int64(1), T.int64(4)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(48), T.int64(56), T.int64(56), T.int64(4)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        conv2d_NCHWc = T.alloc_buffer((T.int64(1), T.int64(48), T.int64(56), T.int64(56), T.int64(4)))
        for n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_fused in T.parallel(T.int64(9408), annotations={"pragma_auto_unroll_max_step": 512, "pragma_unroll_explicit": 1}):
            for oc_block_1 in range(T.int64(1)):
                for n_2_init, oc_chunk_2_init, oh_2_init, ow_2_init, oc_block_2_init, n_3_init, oc_chunk_3_init, oh_3_init, ow_3_init in T.grid(T.int64(1), T.int64(2), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(4)):
                    for oc_block_3_fused_init in T.vectorized(T.int64(4)):
                        with T.block("conv2d_NCHWc_init"):
                            v_n = T.axis.spatial(T.int64(1), n_2_init + n_3_init)
                            v_oc_chunk = T.axis.spatial(T.int64(48), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_fused // T.int64(3136) * T.int64(16) + n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_fused % T.int64(448) // T.int64(56) * T.int64(2) + oc_chunk_2_init + oc_chunk_3_init)
                            v_oh = T.axis.spatial(T.int64(56), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_fused % T.int64(3136) // T.int64(448) * T.int64(8) + n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_fused % T.int64(56) // T.int64(14) * T.int64(2) + oh_2_init * T.int64(2) + oh_3_init)
                            v_ow = T.axis.spatial(T.int64(56), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_fused % T.int64(14) * T.int64(4) + ow_2_init * T.int64(4) + ow_3_init)
                            v_oc_block = T.axis.spatial(T.int64(4), oc_block_1 * T.int64(4) + oc_block_2_init * T.int64(4) + oc_block_3_fused_init)
                            T.reads()
                            T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                            T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                            conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = T.float32(0)
                for ic_0, kh_0, kw_0, n_2, oc_chunk_2, oh_2, ow_2, oc_block_2, ic_1, kh_1, kw_1, n_3, oc_chunk_3, oh_3, ow_3 in T.grid(T.int64(8), T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(1), T.int64(1), T.int64(1), T.int64(30), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(4)):
                    for oc_block_3_fused in T.vectorized(T.int64(4)):
                        with T.block("conv2d_NCHWc_update"):
                            v_n = T.axis.spatial(T.int64(1), n_2 + n_3)
                            v_oc_chunk = T.axis.spatial(T.int64(48), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_fused // T.int64(3136) * T.int64(16) + n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_fused % T.int64(448) // T.int64(56) * T.int64(2) + oc_chunk_2 + oc_chunk_3)
                            v_oh = T.axis.spatial(T.int64(56), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_fused % T.int64(3136) // T.int64(448) * T.int64(8) + n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_fused % T.int64(56) // T.int64(14) * T.int64(2) + oh_2 * T.int64(2) + oh_3)
                            v_ow = T.axis.spatial(T.int64(56), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_fused % T.int64(14) * T.int64(4) + ow_2 * T.int64(4) + ow_3)
                            v_oc_block = T.axis.spatial(T.int64(4), oc_block_1 * T.int64(4) + oc_block_2 * T.int64(4) + oc_block_3_fused)
                            v_ic = T.axis.reduce(T.int64(240), ic_0 * T.int64(30) + ic_1)
                            v_kh = T.axis.reduce(T.int64(1), kh_0 + kh_1)
                            v_kw = T.axis.reduce(T.int64(1), kw_0 + kw_1)
                            T.reads(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block], p0[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)], p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block])
                            T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                            T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                            conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] + p0[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)] * p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block]
        for ax0_ax1_ax2_ax3_ax4_fused_0 in T.parallel(T.int64(9408)):
            for ax0_ax1_ax2_ax3_ax4_fused_1 in T.vectorized(T.int64(64)):
                with T.block("T_relu"):
                    v_ax0 = T.axis.spatial(T.int64(1), T.int64(0))
                    v_ax1 = T.axis.spatial(T.int64(48), (ax0_ax1_ax2_ax3_ax4_fused_0 * T.int64(64) + ax0_ax1_ax2_ax3_ax4_fused_1) // T.int64(12544))
                    v_ax2 = T.axis.spatial(T.int64(56), (ax0_ax1_ax2_ax3_ax4_fused_0 * T.int64(64) + ax0_ax1_ax2_ax3_ax4_fused_1) % T.int64(12544) // T.int64(224))
                    v_ax3 = T.axis.spatial(T.int64(56), (ax0_ax1_ax2_ax3_ax4_fused_0 * T.int64(64) + ax0_ax1_ax2_ax3_ax4_fused_1) % T.int64(224) // T.int64(4))
                    v_ax4 = T.axis.spatial(T.int64(4), (ax0_ax1_ax2_ax3_ax4_fused_0 * T.int64(64) + ax0_ax1_ax2_ax3_ax4_fused_1) % T.int64(4))
                    T.reads(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4])
                    T.writes(T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                    T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.max(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] + p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4], T.float32(0))
b0 = sch.get_block(name="conv2d_NCHWc", func_name="main")
b1 = sch.get_block(name="T_add", func_name="main")
b2 = sch.get_block(name="root", func_name="main")
sch.compute_inline(block=b1)
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.tiling_structure", ann_val="SSRSRS")
l3, l4, l5, l6, l7, l8, l9, l10 = sch.get_loops(block=b0)
v11, v12, v13, v14 = sch.sample_perfect_tile(loop=l3, n=4, max_innermost_factor=64, decision=[1, 1, 1, 1])
l15, l16, l17, l18 = sch.split(loop=l3, factors=[v11, v12, v13, v14], preserve_unit_iters=True)
v19, v20, v21, v22 = sch.sample_perfect_tile(loop=l4, n=4, max_innermost_factor=64, decision=[3, 8, 2, 1])
l23, l24, l25, l26 = sch.split(loop=l4, factors=[v19, v20, v21, v22], preserve_unit_iters=True)
v27, v28, v29, v30 = sch.sample_perfect_tile(loop=l5, n=4, max_innermost_factor=64, decision=[7, 4, 1, 2])
l31, l32, l33, l34 = sch.split(loop=l5, factors=[v27, v28, v29, v30], preserve_unit_iters=True)
v35, v36, v37, v38 = sch.sample_perfect_tile(loop=l6, n=4, max_innermost_factor=64, decision=[1, 14, 1, 4])
l39, l40, l41, l42 = sch.split(loop=l6, factors=[v35, v36, v37, v38], preserve_unit_iters=True)
v43, v44, v45, v46 = sch.sample_perfect_tile(loop=l7, n=4, max_innermost_factor=64, decision=[1, 1, 1, 4])
l47, l48, l49, l50 = sch.split(loop=l7, factors=[v43, v44, v45, v46], preserve_unit_iters=True)
v51, v52 = sch.sample_perfect_tile(loop=l8, n=2, max_innermost_factor=64, decision=[8, 30])
l53, l54 = sch.split(loop=l8, factors=[v51, v52], preserve_unit_iters=True)
v55, v56 = sch.sample_perfect_tile(loop=l9, n=2, max_innermost_factor=64, decision=[1, 1])
l57, l58 = sch.split(loop=l9, factors=[v55, v56], preserve_unit_iters=True)
v59, v60 = sch.sample_perfect_tile(loop=l10, n=2, max_innermost_factor=64, decision=[1, 1])
l61, l62 = sch.split(loop=l10, factors=[v59, v60], preserve_unit_iters=True)
sch.reorder(l15, l23, l31, l39, l47, l16, l24, l32, l40, l48, l53, l57, l61, l17, l25, l33, l41, l49, l54, l58, l62, l18, l26, l34, l42, l50)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.vectorize", ann_val=64)
v63 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.unroll_explicit", ann_val=v63)
sch.enter_postproc()
b64 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b64, ann_key="meta_schedule.parallel")
sch.unannotate(block_or_loop=b64, ann_key="meta_schedule.vectorize")
sch.unannotate(block_or_loop=b64, ann_key="meta_schedule.unroll_explicit")
b65, b66 = sch.get_child_blocks(b64)
l67, l68, l69, l70, l71, l72, l73, l74, l75, l76, l77, l78, l79, l80, l81, l82, l83, l84, l85, l86, l87, l88, l89, l90, l91, l92 = sch.get_loops(block=b65)
l93 = sch.fuse(l67, l68, l69, l70, l71, l72, l73, l74, l75, preserve_unit_iters=True)
sch.parallel(loop=l93)
l94 = sch.fuse(l92, preserve_unit_iters=True)
sch.vectorize(loop=l94)
sch.annotate(block_or_loop=l93, ann_key="pragma_auto_unroll_max_step", ann_val=512)
sch.annotate(block_or_loop=l93, ann_key="pragma_unroll_explicit", ann_val=1)
l95, l96, l97, l98, l99 = sch.get_loops(block=b66)
l100 = sch.fuse(l95, l96, l97, l98, l99, preserve_unit_iters=True)
l101, l102 = sch.split(loop=l100, factors=[None, 64], preserve_unit_iters=True)
sch.parallel(loop=l101)
sch.vectorize(loop=l102)
b103 = sch.get_block(name="conv2d_NCHWc", func_name="main")
l104, l105, l106, l107, l108, l109, l110, l111, l112, l113, l114, l115, l116, l117, l118, l119, l120, l121 = sch.get_loops(block=b103)
b122 = sch.decompose_reduction(block=b103, loop=l106)
2024-04-29 06:02:26 [INFO] [task_scheduler.cc:131] [Task #77: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_74] Trial #101: GFLOPs: 141.7234. Time: 2047.7772 us. Best GFLOPs: 229.0577
2024-04-29 06:02:26 [INFO] [task_scheduler.cc:131] [Task #77: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_74] Trial #102: GFLOPs: 166.5659. Time: 1742.3613 us. Best GFLOPs: 229.0577
2024-04-29 06:02:26 [INFO] [task_scheduler.cc:131] [Task #77: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_74] Trial #103: GFLOPs: 114.6148. Time: 2532.1165 us. Best GFLOPs: 229.0577
2024-04-29 06:02:26 [INFO] [task_scheduler.cc:131] [Task #77: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_74] Trial #104: GFLOPs: 168.8260. Time: 1719.0359 us. Best GFLOPs: 229.0577
2024-04-29 06:02:26 [INFO] [task_scheduler.cc:131] [Task #77: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_74] Trial #105: GFLOPs: 168.0806. Time: 1726.6592 us. Best GFLOPs: 229.0577
2024-04-29 06:02:26 [INFO] [task_scheduler.cc:131] [Task #77: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_74] Trial #106: GFLOPs: 154.0079. Time: 1884.4361 us. Best GFLOPs: 229.0577
2024-04-29 06:02:26 [INFO] [task_scheduler.cc:131] [Task #77: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_74] Trial #107: GFLOPs: 149.0426. Time: 1947.2153 us. Best GFLOPs: 229.0577
2024-04-29 06:02:26 [INFO] [task_scheduler.cc:131] [Task #77: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_74] Trial #108: GFLOPs: 196.6891. Time: 1475.5162 us. Best GFLOPs: 229.0577
2024-04-29 06:02:26 [INFO] [task_scheduler.cc:131] [Task #77: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_74] Trial #109: GFLOPs: 145.2724. Time: 1997.7506 us. Best GFLOPs: 229.0577
2024-04-29 06:02:26 [INFO] [task_scheduler.cc:131] [Task #77: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_74] Trial #110: GFLOPs: 175.4327. Time: 1654.2985 us. Best GFLOPs: 229.0577
2024-04-29 06:02:26 [INFO] [task_scheduler.cc:131] [Task #77: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_74] Trial #111: GFLOPs: 176.7041. Time: 1642.3955 us. Best GFLOPs: 229.0577
2024-04-29 06:02:26 [INFO] [task_scheduler.cc:131] [Task #77: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_74] Trial #112: GFLOPs: 130.1856. Time: 2229.2637 us. Best GFLOPs: 229.0577
2024-04-29 06:02:26 [INFO] [task_scheduler.cc:131] [Task #77: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_74] Trial #113: GFLOPs: 145.7254. Time: 1991.5408 us. Best GFLOPs: 229.0577
2024-04-29 06:02:26 [INFO] [task_scheduler.cc:131] [Task #77: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_74] Trial #114: GFLOPs: 147.7871. Time: 1963.7578 us. Best GFLOPs: 229.0577
2024-04-29 06:02:26 [INFO] [task_scheduler.cc:131] [Task #77: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_74] Trial #115: GFLOPs: 175.7917. Time: 1650.9197 us. Best GFLOPs: 229.0577
2024-04-29 06:02:26 [INFO] [task_scheduler.cc:131] [Task #77: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_74] Trial #116: GFLOPs: 166.2390. Time: 1745.7880 us. Best GFLOPs: 229.0577
2024-04-29 06:02:26 [INFO] [task_scheduler.cc:131] [Task #77: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_74] Trial #117: GFLOPs: 208.2053. Time: 1393.9033 us. Best GFLOPs: 229.0577
2024-04-29 06:02:26 [INFO] [task_scheduler.cc:131] [Task #77: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_74] Trial #118: GFLOPs: 180.9428. Time: 1603.9208 us. Best GFLOPs: 229.0577
2024-04-29 06:02:26 [INFO] [task_scheduler.cc:131] [Task #77: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_74] Trial #119: GFLOPs: 113.8277. Time: 2549.6256 us. Best GFLOPs: 229.0577
2024-04-29 06:02:26 [INFO] [task_scheduler.cc:131] [Task #77: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_74] Trial #120: GFLOPs: 148.1414. Time: 1959.0606 us. Best GFLOPs: 229.0577
2024-04-29 06:02:26 [INFO] [task_scheduler.cc:131] [Task #77: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_74] Trial #121: GFLOPs: 147.5604. Time: 1966.7740 us. Best GFLOPs: 229.0577
2024-04-29 06:02:26 [INFO] [task_scheduler.cc:131] [Task #77: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_74] Trial #122: GFLOPs: 106.6258. Time: 2721.8365 us. Best GFLOPs: 229.0577
2024-04-29 06:02:26 [INFO] [task_scheduler.cc:131] [Task #77: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_74] Trial #123: GFLOPs: 204.9506. Time: 1416.0384 us. Best GFLOPs: 229.0577
2024-04-29 06:02:26 [INFO] [task_scheduler.cc:131] [Task #77: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_74] Trial #124: GFLOPs: 137.0281. Time: 2117.9453 us. Best GFLOPs: 229.0577
2024-04-29 06:02:26 [INFO] [task_scheduler.cc:131] [Task #77: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_74] Trial #125: GFLOPs: 222.9888. Time: 1301.4912 us. Best GFLOPs: 229.0577
2024-04-29 06:02:26 [INFO] [task_scheduler.cc:131] [Task #77: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_74] Trial #126: GFLOPs: 12.2826. Time: 23628.4632 us. Best GFLOPs: 229.0577
2024-04-29 06:02:26 [INFO] [task_scheduler.cc:131] [Task #77: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_74] Trial #127: GFLOPs: 18.2306. Time: 15919.2955 us. Best GFLOPs: 229.0577
2024-04-29 06:02:26 [INFO] [task_scheduler.cc:131] [Task #77: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_74] Trial #128: GFLOPs: 2.6200. Time: 110770.7603 us. Best GFLOPs: 229.0577
2024-04-29 07:21:52 [INFO] [evolutionary_search.cc:713] Generating candidates......
2024-04-29 07:21:52 [INFO] [evolutionary_search.cc:715] Picked top 102 candidate(s) from database
2024-04-29 07:21:54 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x11bbb7a8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0xff00018)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0xb3c34a8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0xba3b978)]: 0 failure(s)
2024-04-29 07:21:54 [INFO] [evolutionary_search.cc:723] Sampled 410 candidate(s)
2024-04-29 07:22:00 [INFO] [evolutionary_search.cc:621] Evolve iter #0 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x11bbb7a8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0xff00018)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0xb3c34a8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0xba3b978)]: 0 failure(s)
2024-04-29 07:22:06 [INFO] [evolutionary_search.cc:621] Evolve iter #1 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x11bbb7a8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0xff00018)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0xb3c34a8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0xba3b978)]: 0 failure(s)
2024-04-29 07:22:11 [INFO] [evolutionary_search.cc:621] Evolve iter #2 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x11bbb7a8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0xff00018)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0xb3c34a8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0xba3b978)]: 0 failure(s)
2024-04-29 07:22:17 [INFO] [evolutionary_search.cc:621] Evolve iter #3 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x11bbb7a8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0xff00018)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0xb3c34a8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0xba3b978)]: 0 failure(s)
2024-04-29 07:22:20 [INFO] [evolutionary_search.cc:649] Scores of the best 64 candidates:
[1 : 16]:	0.9403  0.9354  0.9308  0.9076  0.9013  0.8915  0.8890  0.8822  0.8799  0.8799  0.8610  0.8476  0.8417  0.8391  0.8350  0.8324
[17 : 32]:	0.8318  0.8307  0.8292  0.8254  0.8232  0.8215  0.8209  0.8177  0.8134  0.8128  0.8120  0.8084  0.8072  0.8069  0.8054  0.8043
[33 : 48]:	0.7964  0.7963  0.7945  0.7886  0.7877  0.7855  0.7846  0.7825  0.7818  0.7814  0.7788  0.7763  0.7753  0.7742  0.7735  0.7731
[49 : 64]:	0.7726  0.7710  0.7709  0.7697  0.7697  0.7645  0.7605  0.7603  0.7595  0.7593  0.7554  0.7552  0.7533  0.7522  0.7512  0.7486
2024-04-29 07:22:20 [INFO] [evolutionary_search.cc:727] Got 64 candidate(s) with evolutionary search
2024-04-29 07:22:20 [INFO] [evolutionary_search.cc:730] Sending 64 candidates(s) for measurement
2024-04-29 07:23:56 [INFO] [task_scheduler.cc:131] [Task #77: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_74] Trial #129: GFLOPs: 229.6761. Time: 1263.5968 us. Best GFLOPs: 229.6761
2024-04-29 07:23:56 [INFO] [task_scheduler.cc:131] [Task #77: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_74] Trial #130: GFLOPs: 398.7118. Time: 727.8891 us. Best GFLOPs: 398.7118
2024-04-29 07:23:56 [INFO] [task_scheduler.cc:131] [Task #77: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_74] Trial #131: GFLOPs: 187.1451. Time: 1550.7644 us. Best GFLOPs: 398.7118
2024-04-29 07:23:56 [INFO] [task_scheduler.cc:131] [Task #77: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_74] Trial #132: GFLOPs: 421.6288. Time: 688.3258 us. Best GFLOPs: 421.6288
2024-04-29 07:23:56 [INFO] [task_scheduler.cc:131] [Task #77: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_74] Trial #133: GFLOPs: 395.5382. Time: 733.7293 us. Best GFLOPs: 421.6288
2024-04-29 07:23:56 [INFO] [task_scheduler.cc:131] [Task #77: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_74] Trial #134: GFLOPs: 193.7941. Time: 1497.5585 us. Best GFLOPs: 421.6288
2024-04-29 07:23:56 [INFO] [task_scheduler.cc:131] [Task #77: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_74] Trial #135: GFLOPs: 174.2486. Time: 1665.5401 us. Best GFLOPs: 421.6288
2024-04-29 07:23:56 [INFO] [task_scheduler.cc:131] [Task #77: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_74] Trial #136: GFLOPs: 156.0857. Time: 1859.3504 us. Best GFLOPs: 421.6288
2024-04-29 07:23:56 [INFO] [task_scheduler.cc:131] [Task #77: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_74] Trial #137: GFLOPs: 204.1111. Time: 1421.8630 us. Best GFLOPs: 421.6288
2024-04-29 07:23:56 [INFO] [task_scheduler.cc:131] [Task #77: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_74] Trial #138: GFLOPs: 115.0333. Time: 2522.9044 us. Best GFLOPs: 421.6288
2024-04-29 07:23:56 [INFO] [task_scheduler.cc:131] [Task #77: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_74] Trial #139: GFLOPs: 187.3863. Time: 1548.7685 us. Best GFLOPs: 421.6288
2024-04-29 07:23:56 [INFO] [task_scheduler.cc:131] [Task #77: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_74] Trial #140: GFLOPs: 275.2697. Time: 1054.3042 us. Best GFLOPs: 421.6288
2024-04-29 07:23:56 [INFO] [task_scheduler.cc:131] [Task #77: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_74] Trial #141: GFLOPs: 90.4205. Time: 3209.6485 us. Best GFLOPs: 421.6288
2024-04-29 07:23:56 [INFO] [task_scheduler.cc:131] [Task #77: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_74] Trial #142: GFLOPs: 203.1432. Time: 1428.6372 us. Best GFLOPs: 421.6288
2024-04-29 07:23:56 [INFO] [task_scheduler.cc:131] [Task #77: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_74] Trial #143: GFLOPs: 168.1303. Time: 1726.1492 us. Best GFLOPs: 421.6288
2024-04-29 07:23:56 [INFO] [task_scheduler.cc:131] [Task #77: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_74] Trial #144: GFLOPs: 320.4843. Time: 905.5608 us. Best GFLOPs: 421.6288
2024-04-29 07:23:56 [INFO] [task_scheduler.cc:131] [Task #77: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_74] Trial #145: GFLOPs: 183.4032. Time: 1582.4040 us. Best GFLOPs: 421.6288
2024-04-29 07:23:56 [INFO] [task_scheduler.cc:131] [Task #77: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_74] Trial #146: GFLOPs: 177.9510. Time: 1630.8867 us. Best GFLOPs: 421.6288
2024-04-29 07:23:56 [INFO] [task_scheduler.cc:131] [Task #77: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_74] Trial #147: GFLOPs: 164.5943. Time: 1763.2320 us. Best GFLOPs: 421.6288
2024-04-29 07:23:56 [INFO] [task_scheduler.cc:131] [Task #77: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_74] Trial #148: GFLOPs: 168.1969. Time: 1725.4662 us. Best GFLOPs: 421.6288
2024-04-29 07:23:56 [INFO] [task_scheduler.cc:131] [Task #77: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_74] Trial #149: GFLOPs: 163.5403. Time: 1774.5963 us. Best GFLOPs: 421.6288
2024-04-29 07:23:56 [INFO] [task_scheduler.cc:131] [Task #77: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_74] Trial #150: GFLOPs: 83.3812. Time: 3480.6180 us. Best GFLOPs: 421.6288
2024-04-29 07:23:56 [INFO] [task_scheduler.cc:131] [Task #77: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_74] Trial #151: GFLOPs: 279.7865. Time: 1037.2837 us. Best GFLOPs: 421.6288
2024-04-29 07:23:56 [INFO] [task_scheduler.cc:131] [Task #77: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_74] Trial #152: GFLOPs: 152.3155. Time: 1905.3735 us. Best GFLOPs: 421.6288
2024-04-29 07:23:56 [INFO] [task_scheduler.cc:131] [Task #77: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_74] Trial #153: GFLOPs: 145.8800. Time: 1989.4294 us. Best GFLOPs: 421.6288
2024-04-29 07:23:56 [INFO] [task_scheduler.cc:131] [Task #77: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_74] Trial #154: GFLOPs: 214.2124. Time: 1354.8143 us. Best GFLOPs: 421.6288
2024-04-29 07:23:56 [INFO] [task_scheduler.cc:131] [Task #77: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_74] Trial #155: GFLOPs: 202.1668. Time: 1435.5370 us. Best GFLOPs: 421.6288
2024-04-29 07:23:56 [INFO] [task_scheduler.cc:131] [Task #77: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_74] Trial #156: GFLOPs: 116.7270. Time: 2486.2974 us. Best GFLOPs: 421.6288
2024-04-29 07:23:56 [INFO] [task_scheduler.cc:131] [Task #77: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_74] Trial #157: GFLOPs: 200.9812. Time: 1444.0060 us. Best GFLOPs: 421.6288
2024-04-29 07:23:56 [INFO] [task_scheduler.cc:131] [Task #77: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_74] Trial #158: GFLOPs: 202.7720. Time: 1431.2527 us. Best GFLOPs: 421.6288
2024-04-29 07:23:56 [INFO] [task_scheduler.cc:131] [Task #77: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_74] Trial #159: GFLOPs: 140.2238. Time: 2069.6774 us. Best GFLOPs: 421.6288
2024-04-29 07:23:56 [INFO] [task_scheduler.cc:131] [Task #77: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_74] Trial #160: GFLOPs: 192.5868. Time: 1506.9460 us. Best GFLOPs: 421.6288
2024-04-29 07:23:56 [INFO] [task_scheduler.cc:131] [Task #77: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_74] Trial #161: GFLOPs: 146.9835. Time: 1974.4936 us. Best GFLOPs: 421.6288
2024-04-29 07:23:56 [INFO] [task_scheduler.cc:131] [Task #77: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_74] Trial #162: GFLOPs: 487.0539. Time: 595.8641 us. Best GFLOPs: 487.0539
2024-04-29 07:23:56 [INFO] [task_scheduler.cc:131] [Task #77: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_74] Trial #163: GFLOPs: 190.8592. Time: 1520.5870 us. Best GFLOPs: 487.0539
2024-04-29 07:23:56 [INFO] [task_scheduler.cc:131] [Task #77: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_74] Trial #164: GFLOPs: 101.1586. Time: 2868.9400 us. Best GFLOPs: 487.0539
2024-04-29 07:23:56 [INFO] [task_scheduler.cc:131] [Task #77: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_74] Trial #165: GFLOPs: 82.5697. Time: 3514.8236 us. Best GFLOPs: 487.0539
2024-04-29 07:23:56 [INFO] [task_scheduler.cc:131] [Task #77: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_74] Trial #166: GFLOPs: 172.1016. Time: 1686.3180 us. Best GFLOPs: 487.0539
2024-04-29 07:23:56 [INFO] [task_scheduler.cc:131] [Task #77: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_74] Trial #167: GFLOPs: 170.7265. Time: 1699.9000 us. Best GFLOPs: 487.0539
2024-04-29 07:23:56 [INFO] [task_scheduler.cc:131] [Task #77: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_74] Trial #168: GFLOPs: 144.5464. Time: 2007.7846 us. Best GFLOPs: 487.0539
2024-04-29 07:23:56 [INFO] [task_scheduler.cc:131] [Task #77: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_74] Trial #169: GFLOPs: 159.6395. Time: 1817.9588 us. Best GFLOPs: 487.0539
2024-04-29 07:23:56 [INFO] [task_scheduler.cc:131] [Task #77: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_74] Trial #170: GFLOPs: 168.5897. Time: 1721.4459 us. Best GFLOPs: 487.0539
2024-04-29 07:23:56 [INFO] [task_scheduler.cc:131] [Task #77: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_74] Trial #171: GFLOPs: 159.8814. Time: 1815.2074 us. Best GFLOPs: 487.0539
2024-04-29 07:23:56 [INFO] [task_scheduler.cc:131] [Task #77: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_74] Trial #172: GFLOPs: 144.5276. Time: 2008.0450 us. Best GFLOPs: 487.0539
2024-04-29 07:23:56 [INFO] [task_scheduler.cc:131] [Task #77: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_74] Trial #173: GFLOPs: 189.3240. Time: 1532.9171 us. Best GFLOPs: 487.0539
2024-04-29 07:23:56 [INFO] [task_scheduler.cc:131] [Task #77: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_74] Trial #174: GFLOPs: 167.4858. Time: 1732.7912 us. Best GFLOPs: 487.0539
2024-04-29 07:23:56 [INFO] [task_scheduler.cc:131] [Task #77: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_74] Trial #175: GFLOPs: 140.1034. Time: 2071.4551 us. Best GFLOPs: 487.0539
2024-04-29 07:23:56 [INFO] [task_scheduler.cc:131] [Task #77: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_74] Trial #176: GFLOPs: 346.3718. Time: 837.8800 us. Best GFLOPs: 487.0539
2024-04-29 07:23:56 [INFO] [task_scheduler.cc:131] [Task #77: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_74] Trial #177: GFLOPs: 165.4951. Time: 1753.6352 us. Best GFLOPs: 487.0539
2024-04-29 07:23:56 [INFO] [task_scheduler.cc:131] [Task #77: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_74] Trial #178: GFLOPs: 144.8558. Time: 2003.4962 us. Best GFLOPs: 487.0539
2024-04-29 07:23:56 [INFO] [task_scheduler.cc:131] [Task #77: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_74] Trial #179: GFLOPs: 203.3405. Time: 1427.2512 us. Best GFLOPs: 487.0539
2024-04-29 07:23:56 [INFO] [task_scheduler.cc:131] [Task #77: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_74] Trial #180: GFLOPs: 129.7440. Time: 2236.8507 us. Best GFLOPs: 487.0539
2024-04-29 07:23:56 [INFO] [task_scheduler.cc:131] [Task #77: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_74] Trial #181: GFLOPs: 121.1373. Time: 2395.7765 us. Best GFLOPs: 487.0539
2024-04-29 07:23:56 [INFO] [task_scheduler.cc:131] [Task #77: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_74] Trial #182: GFLOPs: 168.8710. Time: 1718.5778 us. Best GFLOPs: 487.0539
2024-04-29 07:23:56 [INFO] [task_scheduler.cc:131] [Task #77: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_74] Trial #183: GFLOPs: 167.5436. Time: 1732.1938 us. Best GFLOPs: 487.0539
2024-04-29 07:23:56 [INFO] [task_scheduler.cc:131] [Task #77: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_74] Trial #184: GFLOPs: 195.2580. Time: 1486.3311 us. Best GFLOPs: 487.0539
2024-04-29 07:23:56 [INFO] [task_scheduler.cc:131] [Task #77: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_74] Trial #185: GFLOPs: 172.1664. Time: 1685.6830 us. Best GFLOPs: 487.0539
2024-04-29 07:23:56 [INFO] [task_scheduler.cc:131] [Task #77: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_74] Trial #186: GFLOPs: 101.6797. Time: 2854.2379 us. Best GFLOPs: 487.0539
2024-04-29 07:23:56 [INFO] [task_scheduler.cc:131] [Task #77: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_74] Trial #187: GFLOPs: 101.5815. Time: 2856.9953 us. Best GFLOPs: 487.0539
2024-04-29 07:23:56 [INFO] [task_scheduler.cc:131] [Task #77: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_74] Trial #188: GFLOPs: 173.4039. Time: 1673.6535 us. Best GFLOPs: 487.0539
2024-04-29 07:23:56 [INFO] [task_scheduler.cc:131] [Task #77: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_74] Trial #189: GFLOPs: 65.4413. Time: 4434.7815 us. Best GFLOPs: 487.0539
2024-04-29 07:23:56 [INFO] [task_scheduler.cc:131] [Task #77: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_74] Trial #190: GFLOPs: 45.9764. Time: 6312.3255 us. Best GFLOPs: 487.0539
2024-04-29 07:23:56 [INFO] [task_scheduler.cc:131] [Task #77: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_74] Trial #191: GFLOPs: 3.7335. Time: 77733.9657 us. Best GFLOPs: 487.0539
2024-04-29 07:23:56 [INFO] [task_scheduler.cc:131] [Task #77: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_74] Trial #192: GFLOPs: 174.2140. Time: 1665.8705 us. Best GFLOPs: 487.0539
