2024-04-29 02:33:53 [INFO] [task_scheduler.cc:160] Initializing Task #87: "fused_nn_avg_pool2d"
2024-04-29 02:33:53 [INFO] [task_scheduler.cc:35] 
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(48), T.int64(56), T.int64(56), T.int64(4)), "float32"), pool_avg: T.Buffer((T.int64(1), T.int64(48), T.int64(28), T.int64(28), T.int64(4)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        pool_sum = T.alloc_buffer((T.int64(1), T.int64(48), T.int64(28), T.int64(28), T.int64(4)))
        for ax0, ax1, ax2, ax3, ax4, rv0, rv1 in T.grid(T.int64(1), T.int64(48), T.int64(28), T.int64(28), T.int64(4), T.int64(2), T.int64(2)):
            with T.block("pool_sum"):
                v_ax0, v_ax1, v_ax2, v_ax3, v_ax4, v_rv0, v_rv1 = T.axis.remap("SSSSSRR", [ax0, ax1, ax2, ax3, ax4, rv0, rv1])
                T.reads(p0[v_ax0, v_ax1, v_ax2 * T.int64(2) + v_rv0, v_ax3 * T.int64(2) + v_rv1, v_ax4])
                T.writes(pool_sum[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                with T.init():
                    pool_sum[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.float32(0)
                pool_sum[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = pool_sum[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] + p0[v_ax0, v_ax1, v_ax2 * T.int64(2) + v_rv0, v_ax3 * T.int64(2) + v_rv1, v_ax4]
        for ax0, ax1, ax2, ax3, ax4 in T.grid(T.int64(1), T.int64(48), T.int64(28), T.int64(28), T.int64(4)):
            with T.block("pool_avg"):
                v_ax0, v_ax1, v_ax2, v_ax3, v_ax4 = T.axis.remap("SSSSS", [ax0, ax1, ax2, ax3, ax4])
                T.reads(pool_sum[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                T.writes(pool_avg[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                T.block_attr({"schedule_rule": "meta_schedule.pool_avg"})
                pool_avg[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = pool_sum[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] / T.Cast("float32", T.max((T.min(v_ax2, T.int64(0)) * T.int64(2) + T.min(v_ax2 * T.int64(2) + T.int64(1), T.int64(55)) + T.int64(1) - v_ax2 * T.int64(2)) * (T.min(v_ax3, T.int64(0)) * T.int64(2) + T.min(v_ax3 * T.int64(2) + T.int64(1), T.int64(55)) + T.int64(1) - v_ax3 * T.int64(2)), T.int64(1)))
2024-04-29 02:33:53 [INFO] [task_scheduler.cc:164] Total 3 design space(s) generated
2024-04-29 02:33:53 [INFO] [task_scheduler.cc:170] Design space #0:
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(48), T.int64(56), T.int64(56), T.int64(4)), "float32"), pool_avg: T.Buffer((T.int64(1), T.int64(48), T.int64(28), T.int64(28), T.int64(4)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        with T.block("root"):
            T.reads()
            T.writes()
            T.block_attr({"meta_schedule.parallel": 768, "meta_schedule.unroll_explicit": 0, "meta_schedule.vectorize": 64})
            pool_sum = T.alloc_buffer((T.int64(1), T.int64(48), T.int64(28), T.int64(28), T.int64(4)))
            pool_sum_rf = T.alloc_buffer((T.int64(1), T.int64(48), T.int64(28), T.int64(28), T.int64(4), T.int64(4)))
            for ax0, ax1 in T.grid(T.int64(1), T.int64(48)):
                for ax0_1, ax1_1, ax2, ax3, ax4, ax5, ax6 in T.grid(T.int64(4), T.int64(1), T.int64(1), T.int64(28), T.int64(28), T.int64(4), T.int64(1)):
                    with T.block("pool_sum_rf"):
                        vrv0_rv1_fused_0, v_ax0 = T.axis.remap("SS", [ax0_1, ax1_1])
                        v_ax1 = T.axis.spatial(T.int64(48), ax1 + ax2)
                        v_ax2, v_ax3, v_ax4, vrv0_rv1_fused_1 = T.axis.remap("SSSR", [ax3, ax4, ax5, ax6])
                        T.reads(p0[v_ax0, v_ax1, v_ax2 * T.int64(2) + (vrv0_rv1_fused_0 + vrv0_rv1_fused_1) // T.int64(2), v_ax3 * T.int64(2) + (vrv0_rv1_fused_0 + vrv0_rv1_fused_1) % T.int64(2), v_ax4])
                        T.writes(pool_sum_rf[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4, vrv0_rv1_fused_0])
                        with T.init():
                            pool_sum_rf[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4, vrv0_rv1_fused_0] = T.float32(0)
                        pool_sum_rf[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4, vrv0_rv1_fused_0] = pool_sum_rf[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4, vrv0_rv1_fused_0] + p0[v_ax0, v_ax1, v_ax2 * T.int64(2) + (vrv0_rv1_fused_0 + vrv0_rv1_fused_1) // T.int64(2), v_ax3 * T.int64(2) + (vrv0_rv1_fused_0 + vrv0_rv1_fused_1) % T.int64(2), v_ax4]
                for ax2, ax3, ax4, rv0_rv1_fused_0 in T.grid(T.int64(28), T.int64(28), T.int64(4), T.int64(4)):
                    with T.block("pool_sum"):
                        vrv0_rv1_fused_0, v_ax0, v_ax1, v_ax2, v_ax3, v_ax4 = T.axis.remap("RSSSSS", [rv0_rv1_fused_0, ax0, ax1, ax2, ax3, ax4])
                        T.reads(pool_sum_rf[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4, vrv0_rv1_fused_0])
                        T.writes(pool_sum[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                        with T.init():
                            pool_sum[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.float32(0)
                        pool_sum[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = pool_sum[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] + pool_sum_rf[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4, vrv0_rv1_fused_0]
            for ax0, ax1, ax2, ax3, ax4 in T.grid(T.int64(1), T.int64(48), T.int64(28), T.int64(28), T.int64(4)):
                with T.block("pool_avg"):
                    v_ax0, v_ax1, v_ax2, v_ax3, v_ax4 = T.axis.remap("SSSSS", [ax0, ax1, ax2, ax3, ax4])
                    T.reads(pool_sum[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                    T.writes(pool_avg[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                    pool_avg[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = pool_sum[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] / T.Cast("float32", T.max((T.min(v_ax2, T.int64(0)) * T.int64(2) + T.min(v_ax2 * T.int64(2) + T.int64(1), T.int64(55)) + T.int64(1) - v_ax2 * T.int64(2)) * (T.min(v_ax3, T.int64(0)) * T.int64(2) + T.min(v_ax3 * T.int64(2) + T.int64(1), T.int64(55)) + T.int64(1) - v_ax3 * T.int64(2)), T.int64(1)))
b0 = sch.get_block(name="pool_sum", func_name="main")
b1 = sch.get_block(name="pool_avg", func_name="main")
b2 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b1, ann_key="schedule_rule")
l3, l4, l5, l6, l7, l8, l9 = sch.get_loops(block=b0)
l10 = sch.fuse(l8, l9, preserve_unit_iters=True)
v11, v12 = sch.sample_perfect_tile(loop=l10, n=2, max_innermost_factor=64, decision=[4, 1])
l13, l14 = sch.split(loop=l10, factors=[v11, v12], preserve_unit_iters=True)
b15 = sch.rfactor(loop=l13, factor_axis=5)
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.random_compute_producer", ann_val=1)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.vectorize", ann_val=64)
v16 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=0)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.unroll_explicit", ann_val=v16)
b17, = sch.get_producers(block=b0)
sch.unannotate(block_or_loop=b0, ann_key="meta_schedule.random_compute_producer")
l18 = sch.sample_compute_location(block=b0, decision=-1)
sch.compute_at(block=b0, loop=l18, preserve_unit_loops=True, index=-1)
l19 = sch.sample_compute_location(block=b17, decision=1)
sch.compute_at(block=b17, loop=l19, preserve_unit_loops=True, index=-1)
2024-04-29 02:33:53 [INFO] [task_scheduler.cc:170] Design space #1:
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(48), T.int64(56), T.int64(56), T.int64(4)), "float32"), pool_avg: T.Buffer((T.int64(1), T.int64(48), T.int64(28), T.int64(28), T.int64(4)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        with T.block("root"):
            T.reads()
            T.writes()
            T.block_attr({"meta_schedule.parallel": 768, "meta_schedule.unroll_explicit": 16, "meta_schedule.vectorize": 64})
            pool_sum = T.alloc_buffer((T.int64(1), T.int64(48), T.int64(28), T.int64(28), T.int64(4)))
            pool_sum_rf = T.alloc_buffer((T.int64(1), T.int64(48), T.int64(28), T.int64(28), T.int64(4), T.int64(1)))
            for ax0, ax1 in T.grid(T.int64(1), T.int64(48)):
                for ax0_1, ax1_1, ax2, ax3, ax4, ax5, ax6 in T.grid(T.int64(1), T.int64(1), T.int64(1), T.int64(28), T.int64(28), T.int64(4), T.int64(4)):
                    with T.block("pool_sum_rf"):
                        vrv0_rv1_fused_1, v_ax0 = T.axis.remap("SS", [ax0_1, ax1_1])
                        v_ax1 = T.axis.spatial(T.int64(48), ax1 + ax2)
                        v_ax2, v_ax3, v_ax4, vrv0_rv1_fused_0 = T.axis.remap("SSSR", [ax3, ax4, ax5, ax6])
                        T.reads(p0[v_ax0, v_ax1, v_ax2 * T.int64(2) + (vrv0_rv1_fused_0 + vrv0_rv1_fused_1) // T.int64(2), v_ax3 * T.int64(2) + (vrv0_rv1_fused_0 + vrv0_rv1_fused_1) % T.int64(2), v_ax4])
                        T.writes(pool_sum_rf[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4, vrv0_rv1_fused_1])
                        with T.init():
                            pool_sum_rf[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4, vrv0_rv1_fused_1] = T.float32(0)
                        pool_sum_rf[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4, vrv0_rv1_fused_1] = pool_sum_rf[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4, vrv0_rv1_fused_1] + p0[v_ax0, v_ax1, v_ax2 * T.int64(2) + (vrv0_rv1_fused_0 + vrv0_rv1_fused_1) // T.int64(2), v_ax3 * T.int64(2) + (vrv0_rv1_fused_0 + vrv0_rv1_fused_1) % T.int64(2), v_ax4]
                for ax2, ax3, ax4, rv0_rv1_fused_1 in T.grid(T.int64(28), T.int64(28), T.int64(4), T.int64(1)):
                    with T.block("pool_sum"):
                        vrv0_rv1_fused_1, v_ax0, v_ax1, v_ax2, v_ax3, v_ax4 = T.axis.remap("RSSSSS", [rv0_rv1_fused_1, ax0, ax1, ax2, ax3, ax4])
                        T.reads(pool_sum_rf[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4, vrv0_rv1_fused_1])
                        T.writes(pool_sum[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                        with T.init():
                            pool_sum[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.float32(0)
                        pool_sum[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = pool_sum[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] + pool_sum_rf[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4, vrv0_rv1_fused_1]
            for ax0, ax1, ax2, ax3, ax4 in T.grid(T.int64(1), T.int64(48), T.int64(28), T.int64(28), T.int64(4)):
                with T.block("pool_avg"):
                    v_ax0, v_ax1, v_ax2, v_ax3, v_ax4 = T.axis.remap("SSSSS", [ax0, ax1, ax2, ax3, ax4])
                    T.reads(pool_sum[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                    T.writes(pool_avg[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                    pool_avg[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = pool_sum[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] / T.Cast("float32", T.max((T.min(v_ax2, T.int64(0)) * T.int64(2) + T.min(v_ax2 * T.int64(2) + T.int64(1), T.int64(55)) + T.int64(1) - v_ax2 * T.int64(2)) * (T.min(v_ax3, T.int64(0)) * T.int64(2) + T.min(v_ax3 * T.int64(2) + T.int64(1), T.int64(55)) + T.int64(1) - v_ax3 * T.int64(2)), T.int64(1)))
b0 = sch.get_block(name="pool_sum", func_name="main")
b1 = sch.get_block(name="pool_avg", func_name="main")
b2 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b1, ann_key="schedule_rule")
l3, l4, l5, l6, l7, l8, l9 = sch.get_loops(block=b0)
l10 = sch.fuse(l8, l9, preserve_unit_iters=True)
v11, v12 = sch.sample_perfect_tile(loop=l10, n=2, max_innermost_factor=64, decision=[4, 1])
l13, l14 = sch.split(loop=l10, factors=[v11, v12], preserve_unit_iters=True)
b15 = sch.rfactor(loop=l14, factor_axis=5)
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.random_compute_producer", ann_val=1)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.vectorize", ann_val=64)
v16 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=1)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.unroll_explicit", ann_val=v16)
b17, = sch.get_producers(block=b0)
sch.unannotate(block_or_loop=b0, ann_key="meta_schedule.random_compute_producer")
l18 = sch.sample_compute_location(block=b0, decision=-1)
sch.compute_at(block=b0, loop=l18, preserve_unit_loops=True, index=-1)
l19 = sch.sample_compute_location(block=b17, decision=1)
sch.compute_at(block=b17, loop=l19, preserve_unit_loops=True, index=-1)
2024-04-29 02:33:53 [INFO] [task_scheduler.cc:170] Design space #2:
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(48), T.int64(56), T.int64(56), T.int64(4)), "float32"), pool_avg: T.Buffer((T.int64(1), T.int64(48), T.int64(28), T.int64(28), T.int64(4)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        with T.block("root"):
            T.reads()
            T.writes()
            T.block_attr({"meta_schedule.parallel": 768, "meta_schedule.unroll_explicit": 512, "meta_schedule.vectorize": 64})
            pool_sum = T.alloc_buffer((T.int64(1), T.int64(48), T.int64(28), T.int64(28), T.int64(4)))
            for ax0, ax1 in T.grid(T.int64(1), T.int64(48)):
                for ax0_1, ax1_1, ax2, ax3, ax4, ax5, ax6 in T.grid(T.int64(1), T.int64(1), T.int64(28), T.int64(28), T.int64(4), T.int64(2), T.int64(2)):
                    with T.block("pool_sum"):
                        v_ax0 = T.axis.spatial(T.int64(1), ax0_1)
                        v_ax1 = T.axis.spatial(T.int64(48), ax1 + ax1_1)
                        v_ax2, v_ax3, v_ax4, v_rv0, v_rv1 = T.axis.remap("SSSRR", [ax2, ax3, ax4, ax5, ax6])
                        T.reads(p0[v_ax0, v_ax1, v_ax2 * T.int64(2) + v_rv0, v_ax3 * T.int64(2) + v_rv1, v_ax4])
                        T.writes(pool_sum[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                        with T.init():
                            pool_sum[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.float32(0)
                        pool_sum[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = pool_sum[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] + p0[v_ax0, v_ax1, v_ax2 * T.int64(2) + v_rv0, v_ax3 * T.int64(2) + v_rv1, v_ax4]
                for ax2, ax3, ax4 in T.grid(T.int64(28), T.int64(28), T.int64(4)):
                    with T.block("pool_avg"):
                        v_ax0, v_ax1, v_ax2, v_ax3, v_ax4 = T.axis.remap("SSSSS", [ax0, ax1, ax2, ax3, ax4])
                        T.reads(pool_sum[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                        T.writes(pool_avg[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                        pool_avg[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = pool_sum[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] / T.Cast("float32", T.max((T.min(v_ax2, T.int64(0)) * T.int64(2) + T.min(v_ax2 * T.int64(2) + T.int64(1), T.int64(55)) + T.int64(1) - v_ax2 * T.int64(2)) * (T.min(v_ax3, T.int64(0)) * T.int64(2) + T.min(v_ax3 * T.int64(2) + T.int64(1), T.int64(55)) + T.int64(1) - v_ax3 * T.int64(2)), T.int64(1)))
b0 = sch.get_block(name="pool_sum", func_name="main")
b1 = sch.get_block(name="pool_avg", func_name="main")
b2 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b1, ann_key="schedule_rule")
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.vectorize", ann_val=64)
v3 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.unroll_explicit", ann_val=v3)
l4 = sch.sample_compute_location(block=b0, decision=1)
sch.compute_at(block=b0, loop=l4, preserve_unit_loops=True, index=-1)
2024-04-29 04:50:09 [INFO] [evolutionary_search.cc:713] Generating candidates......
2024-04-29 04:50:09 [INFO] [evolutionary_search.cc:715] Picked top 0 candidate(s) from database
2024-04-29 04:50:11 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x16189b78)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0xd972968)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x9d9fe98)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x105d1e88)]: 0 failure(s)
2024-04-29 04:50:11 [INFO] [evolutionary_search.cc:723] Sampled 512 candidate(s)
2024-04-29 04:50:15 [INFO] [evolutionary_search.cc:621] Evolve iter #0 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x16189b78)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0xd972968)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x9d9fe98)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x105d1e88)]: 0 failure(s)
2024-04-29 04:50:18 [INFO] [evolutionary_search.cc:621] Evolve iter #1 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x16189b78)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0xd972968)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x9d9fe98)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x105d1e88)]: 0 failure(s)
2024-04-29 04:50:22 [INFO] [evolutionary_search.cc:621] Evolve iter #2 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x16189b78)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0xd972968)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x9d9fe98)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x105d1e88)]: 0 failure(s)
2024-04-29 04:50:26 [INFO] [evolutionary_search.cc:621] Evolve iter #3 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x16189b78)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0xd972968)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x9d9fe98)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x105d1e88)]: 0 failure(s)
2024-04-29 04:50:28 [INFO] [evolutionary_search.cc:649] Scores of the best 64 candidates:
[1 : 16]:	0.9958  0.9956  0.9950  0.9935  0.9924  0.9917  0.9909  0.9889  0.9881  0.9870  0.9858  0.9839  0.9744  0.9743  0.9732  0.9722
[17 : 32]:	0.9692  0.9593  0.9586  0.9574  0.9567  0.9538  0.9520  0.9491  0.9462  0.9424  0.9387  0.9369  0.9349  0.9346  0.9339  0.9335
[33 : 48]:	0.9290  0.9263  0.9251  0.9241  0.9217  0.9158  0.9148  0.9130  0.9113  0.9113  0.9112  0.9103  0.9086  0.9074  0.9072  0.9050
[49 : 64]:	0.9043  0.8982  0.8957  0.8955  0.8922  0.8903  0.8899  0.8828  0.8782  0.8779  0.8777  0.8769  0.8683  0.8676  0.8659  0.8647
2024-04-29 04:50:28 [INFO] [evolutionary_search.cc:727] Got 64 candidate(s) with evolutionary search
2024-04-29 04:50:28 [INFO] [evolutionary_search.cc:730] Sending 62 candidates(s) for measurement
2024-04-29 05:12:36 [INFO] [task_scheduler.cc:131] [Task #87: fused_nn_avg_pool2d] Trial #1: GFLOPs: 61.7444. Time: 60.9481 us. Best GFLOPs: 61.7444
2024-04-29 05:12:36 [INFO] [task_scheduler.cc:131] [Task #87: fused_nn_avg_pool2d] Trial #2: GFLOPs: 66.9323. Time: 56.2240 us. Best GFLOPs: 66.9323
2024-04-29 05:12:36 [INFO] [task_scheduler.cc:131] [Task #87: fused_nn_avg_pool2d] Trial #3: GFLOPs: 65.5694. Time: 57.3926 us. Best GFLOPs: 66.9323
2024-04-29 05:12:36 [INFO] [task_scheduler.cc:131] [Task #87: fused_nn_avg_pool2d] Trial #4: GFLOPs: 67.8961. Time: 55.4259 us. Best GFLOPs: 67.8961
2024-04-29 05:12:36 [INFO] [task_scheduler.cc:131] [Task #87: fused_nn_avg_pool2d] Trial #5: GFLOPs: 49.9911. Time: 75.2773 us. Best GFLOPs: 67.8961
2024-04-29 05:12:36 [INFO] [task_scheduler.cc:131] [Task #87: fused_nn_avg_pool2d] Trial #6: GFLOPs: 71.3742. Time: 52.7250 us. Best GFLOPs: 71.3742
2024-04-29 05:12:36 [INFO] [task_scheduler.cc:131] [Task #87: fused_nn_avg_pool2d] Trial #7: GFLOPs: 70.1876. Time: 53.6163 us. Best GFLOPs: 71.3742
2024-04-29 05:12:36 [INFO] [task_scheduler.cc:131] [Task #87: fused_nn_avg_pool2d] Trial #8: GFLOPs: 103.3221. Time: 36.4220 us. Best GFLOPs: 103.3221
2024-04-29 05:12:36 [INFO] [task_scheduler.cc:131] [Task #87: fused_nn_avg_pool2d] Trial #9: GFLOPs: 93.2067. Time: 40.3748 us. Best GFLOPs: 103.3221
2024-04-29 05:12:36 [INFO] [task_scheduler.cc:131] [Task #87: fused_nn_avg_pool2d] Trial #10: GFLOPs: 205.8116. Time: 18.2847 us. Best GFLOPs: 205.8116
2024-04-29 05:12:36 [INFO] [task_scheduler.cc:131] [Task #87: fused_nn_avg_pool2d] Trial #11: GFLOPs: 201.5064. Time: 18.6753 us. Best GFLOPs: 205.8116
2024-04-29 05:12:36 [INFO] [task_scheduler.cc:131] [Task #87: fused_nn_avg_pool2d] Trial #12: GFLOPs: 144.2957. Time: 26.0798 us. Best GFLOPs: 205.8116
2024-04-29 05:12:36 [INFO] [task_scheduler.cc:131] [Task #87: fused_nn_avg_pool2d] Trial #13: GFLOPs: 192.1780. Time: 19.5818 us. Best GFLOPs: 205.8116
2024-04-29 05:12:36 [INFO] [task_scheduler.cc:131] [Task #87: fused_nn_avg_pool2d] Trial #14: GFLOPs: 66.7345. Time: 56.3907 us. Best GFLOPs: 205.8116
2024-04-29 05:12:36 [INFO] [task_scheduler.cc:131] [Task #87: fused_nn_avg_pool2d] Trial #15: GFLOPs: 58.4670. Time: 64.3645 us. Best GFLOPs: 205.8116
2024-04-29 05:12:36 [INFO] [task_scheduler.cc:131] [Task #87: fused_nn_avg_pool2d] Trial #16: GFLOPs: 164.4556. Time: 22.8828 us. Best GFLOPs: 205.8116
2024-04-29 05:12:36 [INFO] [task_scheduler.cc:131] [Task #87: fused_nn_avg_pool2d] Trial #17: GFLOPs: 160.6226. Time: 23.4288 us. Best GFLOPs: 205.8116
2024-04-29 05:12:36 [INFO] [task_scheduler.cc:131] [Task #87: fused_nn_avg_pool2d] Trial #18: GFLOPs: 174.7982. Time: 21.5288 us. Best GFLOPs: 205.8116
2024-04-29 05:12:36 [INFO] [task_scheduler.cc:131] [Task #87: fused_nn_avg_pool2d] Trial #19: GFLOPs: 241.4708. Time: 15.5845 us. Best GFLOPs: 241.4708
2024-04-29 05:12:36 [INFO] [task_scheduler.cc:131] [Task #87: fused_nn_avg_pool2d] Trial #20: GFLOPs: 45.8664. Time: 82.0470 us. Best GFLOPs: 241.4708
2024-04-29 05:12:36 [INFO] [task_scheduler.cc:131] [Task #87: fused_nn_avg_pool2d] Trial #21: GFLOPs: 144.3724. Time: 26.0659 us. Best GFLOPs: 241.4708
2024-04-29 05:12:36 [INFO] [task_scheduler.cc:131] [Task #87: fused_nn_avg_pool2d] Trial #22: GFLOPs: 61.0417. Time: 61.6497 us. Best GFLOPs: 241.4708
2024-04-29 05:12:36 [INFO] [task_scheduler.cc:131] [Task #87: fused_nn_avg_pool2d] Trial #23: GFLOPs: 59.9316. Time: 62.7915 us. Best GFLOPs: 241.4708
2024-04-29 05:12:36 [INFO] [task_scheduler.cc:131] [Task #87: fused_nn_avg_pool2d] Trial #24: GFLOPs: 66.5364. Time: 56.5585 us. Best GFLOPs: 241.4708
2024-04-29 05:12:36 [INFO] [task_scheduler.cc:131] [Task #87: fused_nn_avg_pool2d] Trial #25: GFLOPs: 130.4994. Time: 28.8369 us. Best GFLOPs: 241.4708
2024-04-29 05:12:36 [INFO] [task_scheduler.cc:131] [Task #87: fused_nn_avg_pool2d] Trial #26: GFLOPs: 88.4397. Time: 42.5510 us. Best GFLOPs: 241.4708
2024-04-29 05:12:36 [INFO] [task_scheduler.cc:131] [Task #87: fused_nn_avg_pool2d] Trial #27: GFLOPs: 50.9639. Time: 73.8405 us. Best GFLOPs: 241.4708
2024-04-29 05:12:36 [INFO] [task_scheduler.cc:131] [Task #87: fused_nn_avg_pool2d] Trial #28: GFLOPs: 105.7916. Time: 35.5718 us. Best GFLOPs: 241.4708
2024-04-29 05:12:36 [INFO] [task_scheduler.cc:131] [Task #87: fused_nn_avg_pool2d] Trial #29: GFLOPs: 92.6140. Time: 40.6332 us. Best GFLOPs: 241.4708
2024-04-29 05:12:36 [INFO] [task_scheduler.cc:131] [Task #87: fused_nn_avg_pool2d] Trial #30: GFLOPs: 98.5385. Time: 38.1901 us. Best GFLOPs: 241.4708
2024-04-29 05:12:36 [INFO] [task_scheduler.cc:131] [Task #87: fused_nn_avg_pool2d] Trial #31: GFLOPs: 102.6111. Time: 36.6744 us. Best GFLOPs: 241.4708
2024-04-29 05:12:36 [INFO] [task_scheduler.cc:131] [Task #87: fused_nn_avg_pool2d] Trial #32: GFLOPs: 125.3252. Time: 30.0275 us. Best GFLOPs: 241.4708
2024-04-29 05:12:36 [INFO] [task_scheduler.cc:131] [Task #87: fused_nn_avg_pool2d] Trial #33: GFLOPs: 47.7417. Time: 78.8242 us. Best GFLOPs: 241.4708
2024-04-29 05:12:36 [INFO] [task_scheduler.cc:131] [Task #87: fused_nn_avg_pool2d] Trial #34: GFLOPs: 161.4673. Time: 23.3063 us. Best GFLOPs: 241.4708
2024-04-29 05:12:36 [INFO] [task_scheduler.cc:131] [Task #87: fused_nn_avg_pool2d] Trial #35: GFLOPs: 144.8267. Time: 25.9842 us. Best GFLOPs: 241.4708
2024-04-29 05:12:36 [INFO] [task_scheduler.cc:131] [Task #87: fused_nn_avg_pool2d] Trial #36: GFLOPs: 71.0518. Time: 52.9642 us. Best GFLOPs: 241.4708
2024-04-29 05:12:36 [INFO] [task_scheduler.cc:131] [Task #87: fused_nn_avg_pool2d] Trial #37: GFLOPs: 240.7399. Time: 15.6318 us. Best GFLOPs: 241.4708
2024-04-29 05:12:36 [INFO] [task_scheduler.cc:131] [Task #87: fused_nn_avg_pool2d] Trial #38: GFLOPs: 64.0697. Time: 58.7360 us. Best GFLOPs: 241.4708
2024-04-29 05:12:36 [INFO] [task_scheduler.cc:131] [Task #87: fused_nn_avg_pool2d] Trial #39: GFLOPs: 99.4953. Time: 37.8229 us. Best GFLOPs: 241.4708
2024-04-29 05:12:36 [INFO] [task_scheduler.cc:131] [Task #87: fused_nn_avg_pool2d] Trial #40: GFLOPs: 132.7401. Time: 28.3501 us. Best GFLOPs: 241.4708
2024-04-29 05:12:36 [INFO] [task_scheduler.cc:131] [Task #87: fused_nn_avg_pool2d] Trial #41: GFLOPs: 61.1987. Time: 61.4915 us. Best GFLOPs: 241.4708
2024-04-29 05:12:36 [INFO] [task_scheduler.cc:131] [Task #87: fused_nn_avg_pool2d] Trial #42: GFLOPs: 78.0786. Time: 48.1976 us. Best GFLOPs: 241.4708
2024-04-29 05:12:36 [INFO] [task_scheduler.cc:131] [Task #87: fused_nn_avg_pool2d] Trial #43: GFLOPs: 59.4494. Time: 63.3009 us. Best GFLOPs: 241.4708
2024-04-29 05:12:36 [INFO] [task_scheduler.cc:131] [Task #87: fused_nn_avg_pool2d] Trial #44: GFLOPs: 33.9456. Time: 110.8598 us. Best GFLOPs: 241.4708
2024-04-29 05:12:36 [INFO] [task_scheduler.cc:131] [Task #87: fused_nn_avg_pool2d] Trial #45: GFLOPs: 61.9816. Time: 60.7148 us. Best GFLOPs: 241.4708
2024-04-29 05:12:36 [INFO] [task_scheduler.cc:131] [Task #87: fused_nn_avg_pool2d] Trial #46: GFLOPs: 64.4833. Time: 58.3593 us. Best GFLOPs: 241.4708
2024-04-29 05:12:36 [INFO] [task_scheduler.cc:131] [Task #87: fused_nn_avg_pool2d] Trial #47: GFLOPs: 44.7645. Time: 84.0667 us. Best GFLOPs: 241.4708
2024-04-29 05:12:36 [INFO] [task_scheduler.cc:131] [Task #87: fused_nn_avg_pool2d] Trial #48: GFLOPs: 59.9297. Time: 62.7936 us. Best GFLOPs: 241.4708
2024-04-29 05:12:36 [INFO] [task_scheduler.cc:131] [Task #87: fused_nn_avg_pool2d] Trial #49: GFLOPs: 144.5911. Time: 26.0265 us. Best GFLOPs: 241.4708
2024-04-29 05:12:36 [INFO] [task_scheduler.cc:131] [Task #87: fused_nn_avg_pool2d] Trial #50: GFLOPs: 199.1655. Time: 18.8948 us. Best GFLOPs: 241.4708
2024-04-29 05:12:36 [INFO] [task_scheduler.cc:131] [Task #87: fused_nn_avg_pool2d] Trial #51: GFLOPs: 133.1987. Time: 28.2525 us. Best GFLOPs: 241.4708
2024-04-29 05:12:36 [INFO] [task_scheduler.cc:131] [Task #87: fused_nn_avg_pool2d] Trial #52: GFLOPs: 157.6284. Time: 23.8739 us. Best GFLOPs: 241.4708
2024-04-29 05:12:36 [INFO] [task_scheduler.cc:131] [Task #87: fused_nn_avg_pool2d] Trial #53: GFLOPs: 103.7406. Time: 36.2751 us. Best GFLOPs: 241.4708
2024-04-29 05:12:36 [INFO] [task_scheduler.cc:131] [Task #87: fused_nn_avg_pool2d] Trial #54: GFLOPs: 211.7809. Time: 17.7693 us. Best GFLOPs: 241.4708
2024-04-29 05:12:36 [INFO] [task_scheduler.cc:131] [Task #87: fused_nn_avg_pool2d] Trial #55: GFLOPs: 147.9115. Time: 25.4422 us. Best GFLOPs: 241.4708
2024-04-29 05:12:36 [INFO] [task_scheduler.cc:131] [Task #87: fused_nn_avg_pool2d] Trial #56: GFLOPs: 86.7876. Time: 43.3610 us. Best GFLOPs: 241.4708
2024-04-29 05:12:36 [INFO] [task_scheduler.cc:131] [Task #87: fused_nn_avg_pool2d] Trial #57: GFLOPs: 89.8652. Time: 41.8760 us. Best GFLOPs: 241.4708
2024-04-29 05:12:36 [INFO] [task_scheduler.cc:131] [Task #87: fused_nn_avg_pool2d] Trial #58: GFLOPs: 77.6469. Time: 48.4656 us. Best GFLOPs: 241.4708
2024-04-29 05:12:36 [INFO] [task_scheduler.cc:131] [Task #87: fused_nn_avg_pool2d] Trial #59: GFLOPs: 200.0113. Time: 18.8149 us. Best GFLOPs: 241.4708
2024-04-29 05:12:36 [INFO] [task_scheduler.cc:131] [Task #87: fused_nn_avg_pool2d] Trial #60: GFLOPs: 187.0623. Time: 20.1174 us. Best GFLOPs: 241.4708
2024-04-29 05:12:36 [INFO] [task_scheduler.cc:131] [Task #87: fused_nn_avg_pool2d] Trial #61: GFLOPs: 33.1162. Time: 113.6364 us. Best GFLOPs: 241.4708
2024-04-29 05:12:36 [INFO] [task_scheduler.cc:131] [Task #87: fused_nn_avg_pool2d] Trial #62: GFLOPs: 56.5355. Time: 66.5634 us. Best GFLOPs: 241.4708
