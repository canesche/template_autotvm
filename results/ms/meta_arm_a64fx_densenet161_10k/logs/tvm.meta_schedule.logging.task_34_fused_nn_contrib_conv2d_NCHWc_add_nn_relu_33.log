2024-04-29 02:30:33 [INFO] [task_scheduler.cc:160] Initializing Task #34: "fused_nn_contrib_conv2d_NCHWc_add_nn_relu_33"
2024-04-29 02:30:33 [INFO] [task_scheduler.cc:35] 
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(408), T.int64(14), T.int64(14), T.int64(4)), "float32"), p1: T.Buffer((T.int64(48), T.int64(408), T.int64(1), T.int64(1), T.int64(4), T.int64(4)), "float32"), p2: T.Buffer((T.int64(1), T.int64(48), T.int64(1), T.int64(1), T.int64(4)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(48), T.int64(14), T.int64(14), T.int64(4)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        conv2d_NCHWc = T.alloc_buffer((T.int64(1), T.int64(48), T.int64(14), T.int64(14), T.int64(4)))
        T_add = T.alloc_buffer((T.int64(1), T.int64(48), T.int64(14), T.int64(14), T.int64(4)))
        for n, oc_chunk, oh, ow, oc_block, ic, kh, kw in T.grid(T.int64(1), T.int64(48), T.int64(14), T.int64(14), T.int64(4), T.int64(1632), T.int64(1), T.int64(1)):
            with T.block("conv2d_NCHWc"):
                v_n, v_oc_chunk, v_oh, v_ow, v_oc_block, v_ic, v_kh, v_kw = T.axis.remap("SSSSSRRR", [n, oc_chunk, oh, ow, oc_block, ic, kh, kw])
                T.reads(p0[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)], p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block])
                T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                with T.init():
                    conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = T.float32(0)
                conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] + p0[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)] * p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block]
        for ax0, ax1, ax2, ax3, ax4 in T.grid(T.int64(1), T.int64(48), T.int64(14), T.int64(14), T.int64(4)):
            with T.block("T_add"):
                v_ax0, v_ax1, v_ax2, v_ax3, v_ax4 = T.axis.remap("SSSSS", [ax0, ax1, ax2, ax3, ax4])
                T.reads(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4])
                T.writes(T_add[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                T_add[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] + p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4]
        for ax0, ax1, ax2, ax3, ax4 in T.grid(T.int64(1), T.int64(48), T.int64(14), T.int64(14), T.int64(4)):
            with T.block("T_relu"):
                v_ax0, v_ax1, v_ax2, v_ax3, v_ax4 = T.axis.remap("SSSSS", [ax0, ax1, ax2, ax3, ax4])
                T.reads(T_add[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                T.writes(T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.max(T_add[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], T.float32(0))
2024-04-29 02:30:33 [INFO] [task_scheduler.cc:164] Total 3 design space(s) generated
2024-04-29 02:30:33 [INFO] [task_scheduler.cc:170] Design space #0:
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(408), T.int64(14), T.int64(14), T.int64(4)), "float32"), p1: T.Buffer((T.int64(48), T.int64(408), T.int64(1), T.int64(1), T.int64(4), T.int64(4)), "float32"), p2: T.Buffer((T.int64(1), T.int64(48), T.int64(1), T.int64(1), T.int64(4)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(48), T.int64(14), T.int64(14), T.int64(4)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        with T.block("root"):
            T.reads()
            T.writes()
            T.block_attr({"meta_schedule.parallel": 768, "meta_schedule.unroll_explicit": 64, "meta_schedule.vectorize": 64})
            conv2d_NCHWc = T.alloc_buffer((T.int64(1), T.int64(48), T.int64(14), T.int64(14), T.int64(4)))
            for n_0, oc_chunk_0, oh_0, ow_0, oc_block_0, n_1, oc_chunk_1, oh_1, ow_1, oc_block_1, ic_0, kh_0, kw_0, n_2, oc_chunk_2, oh_2, ow_2, oc_block_2, ic_1, kh_1, kw_1, n_3, oc_chunk_3, oh_3, ow_3, oc_block_3 in T.grid(T.int64(1), T.int64(2), T.int64(1), T.int64(2), T.int64(1), T.int64(1), T.int64(4), T.int64(7), T.int64(1), T.int64(2), T.int64(51), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(7), T.int64(1), T.int64(32), T.int64(1), T.int64(1), T.int64(1), T.int64(6), T.int64(1), T.int64(1), T.int64(2)):
                with T.block("conv2d_NCHWc"):
                    v_n = T.axis.spatial(T.int64(1), n_0 + n_1 + n_2 + n_3)
                    v_oc_chunk = T.axis.spatial(T.int64(48), oc_chunk_0 * T.int64(24) + oc_chunk_1 * T.int64(6) + oc_chunk_2 * T.int64(6) + oc_chunk_3)
                    v_oh = T.axis.spatial(T.int64(14), oh_0 * T.int64(14) + oh_1 * T.int64(2) + oh_2 + oh_3)
                    v_ow = T.axis.spatial(T.int64(14), ow_0 * T.int64(7) + ow_1 * T.int64(7) + ow_2 + ow_3)
                    v_oc_block = T.axis.spatial(T.int64(4), oc_block_0 * T.int64(4) + oc_block_1 * T.int64(2) + oc_block_2 * T.int64(2) + oc_block_3)
                    v_ic = T.axis.reduce(T.int64(1632), ic_0 * T.int64(32) + ic_1)
                    v_kh = T.axis.reduce(T.int64(1), kh_0 + kh_1)
                    v_kw = T.axis.reduce(T.int64(1), kw_0 + kw_1)
                    T.reads(p0[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)], p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block])
                    T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                    T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                    with T.init():
                        conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = T.float32(0)
                    conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] + p0[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)] * p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block]
            for ax0, ax1, ax2, ax3, ax4 in T.grid(T.int64(1), T.int64(48), T.int64(14), T.int64(14), T.int64(4)):
                with T.block("T_relu"):
                    v_ax0, v_ax1, v_ax2, v_ax3, v_ax4 = T.axis.remap("SSSSS", [ax0, ax1, ax2, ax3, ax4])
                    T.reads(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4])
                    T.writes(T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                    T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.max(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] + p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4], T.float32(0))
b0 = sch.get_block(name="conv2d_NCHWc", func_name="main")
b1 = sch.get_block(name="T_add", func_name="main")
b2 = sch.get_block(name="root", func_name="main")
sch.compute_inline(block=b1)
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.tiling_structure", ann_val="SSRSRS")
l3, l4, l5, l6, l7, l8, l9, l10 = sch.get_loops(block=b0)
v11, v12, v13, v14 = sch.sample_perfect_tile(loop=l3, n=4, max_innermost_factor=64, decision=[1, 1, 1, 1])
l15, l16, l17, l18 = sch.split(loop=l3, factors=[v11, v12, v13, v14], preserve_unit_iters=True)
v19, v20, v21, v22 = sch.sample_perfect_tile(loop=l4, n=4, max_innermost_factor=64, decision=[2, 4, 1, 6])
l23, l24, l25, l26 = sch.split(loop=l4, factors=[v19, v20, v21, v22], preserve_unit_iters=True)
v27, v28, v29, v30 = sch.sample_perfect_tile(loop=l5, n=4, max_innermost_factor=64, decision=[1, 7, 2, 1])
l31, l32, l33, l34 = sch.split(loop=l5, factors=[v27, v28, v29, v30], preserve_unit_iters=True)
v35, v36, v37, v38 = sch.sample_perfect_tile(loop=l6, n=4, max_innermost_factor=64, decision=[2, 1, 7, 1])
l39, l40, l41, l42 = sch.split(loop=l6, factors=[v35, v36, v37, v38], preserve_unit_iters=True)
v43, v44, v45, v46 = sch.sample_perfect_tile(loop=l7, n=4, max_innermost_factor=64, decision=[1, 2, 1, 2])
l47, l48, l49, l50 = sch.split(loop=l7, factors=[v43, v44, v45, v46], preserve_unit_iters=True)
v51, v52 = sch.sample_perfect_tile(loop=l8, n=2, max_innermost_factor=64, decision=[51, 32])
l53, l54 = sch.split(loop=l8, factors=[v51, v52], preserve_unit_iters=True)
v55, v56 = sch.sample_perfect_tile(loop=l9, n=2, max_innermost_factor=64, decision=[1, 1])
l57, l58 = sch.split(loop=l9, factors=[v55, v56], preserve_unit_iters=True)
v59, v60 = sch.sample_perfect_tile(loop=l10, n=2, max_innermost_factor=64, decision=[1, 1])
l61, l62 = sch.split(loop=l10, factors=[v59, v60], preserve_unit_iters=True)
sch.reorder(l15, l23, l31, l39, l47, l16, l24, l32, l40, l48, l53, l57, l61, l17, l25, l33, l41, l49, l54, l58, l62, l18, l26, l34, l42, l50)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.vectorize", ann_val=64)
v63 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=2)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.unroll_explicit", ann_val=v63)
2024-04-29 02:30:33 [INFO] [task_scheduler.cc:170] Design space #1:
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(408), T.int64(14), T.int64(14), T.int64(4)), "float32"), p1: T.Buffer((T.int64(48), T.int64(408), T.int64(1), T.int64(1), T.int64(4), T.int64(4)), "float32"), p2: T.Buffer((T.int64(1), T.int64(48), T.int64(1), T.int64(1), T.int64(4)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(48), T.int64(14), T.int64(14), T.int64(4)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        with T.block("root"):
            T.reads()
            T.writes()
            T.block_attr({"meta_schedule.parallel": 768, "meta_schedule.unroll_explicit": 16, "meta_schedule.vectorize": 64})
            conv2d_NCHWc = T.alloc_buffer((T.int64(1), T.int64(48), T.int64(14), T.int64(14), T.int64(4)))
            for n_0, oc_chunk_0, oh_0, ow_0, oc_block_0, n_1, oc_chunk_1, oh_1, ow_1, oc_block_1 in T.grid(T.int64(1), T.int64(2), T.int64(1), T.int64(2), T.int64(1), T.int64(1), T.int64(4), T.int64(7), T.int64(1), T.int64(2)):
                for ic_0, kh_0, kw_0, n_2, oc_chunk_2, oh_2, ow_2, oc_block_2, ic_1, kh_1, kw_1, n_3, oc_chunk_3, oh_3, ow_3, oc_block_3 in T.grid(T.int64(51), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(7), T.int64(1), T.int64(32), T.int64(1), T.int64(1), T.int64(1), T.int64(6), T.int64(1), T.int64(1), T.int64(2)):
                    with T.block("conv2d_NCHWc"):
                        v_n = T.axis.spatial(T.int64(1), n_0 + n_1 + n_2 + n_3)
                        v_oc_chunk = T.axis.spatial(T.int64(48), oc_chunk_0 * T.int64(24) + oc_chunk_1 * T.int64(6) + oc_chunk_2 * T.int64(6) + oc_chunk_3)
                        v_oh = T.axis.spatial(T.int64(14), oh_0 * T.int64(14) + oh_1 * T.int64(2) + oh_2 + oh_3)
                        v_ow = T.axis.spatial(T.int64(14), ow_0 * T.int64(7) + ow_1 * T.int64(7) + ow_2 + ow_3)
                        v_oc_block = T.axis.spatial(T.int64(4), oc_block_0 * T.int64(4) + oc_block_1 * T.int64(2) + oc_block_2 * T.int64(2) + oc_block_3)
                        v_ic = T.axis.reduce(T.int64(1632), ic_0 * T.int64(32) + ic_1)
                        v_kh = T.axis.reduce(T.int64(1), kh_0 + kh_1)
                        v_kw = T.axis.reduce(T.int64(1), kw_0 + kw_1)
                        T.reads(p0[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)], p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block])
                        T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                        T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                        with T.init():
                            conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = T.float32(0)
                        conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] + p0[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)] * p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block]
                for ax0, ax1, ax2, ax3, ax4 in T.grid(T.int64(1), T.int64(6), T.int64(2), T.int64(7), T.int64(2)):
                    with T.block("T_relu"):
                        v_ax0 = T.axis.spatial(T.int64(1), ax0)
                        v_ax1 = T.axis.spatial(T.int64(48), oc_chunk_0 * T.int64(24) + oc_chunk_1 * T.int64(6) + ax1)
                        v_ax2 = T.axis.spatial(T.int64(14), oh_1 * T.int64(2) + ax2)
                        v_ax3 = T.axis.spatial(T.int64(14), ow_0 * T.int64(7) + ax3)
                        v_ax4 = T.axis.spatial(T.int64(4), oc_block_1 * T.int64(2) + ax4)
                        T.reads(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4])
                        T.writes(T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                        T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.max(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] + p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4], T.float32(0))
b0 = sch.get_block(name="conv2d_NCHWc", func_name="main")
b1 = sch.get_block(name="T_add", func_name="main")
b2 = sch.get_block(name="root", func_name="main")
sch.compute_inline(block=b1)
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.tiling_structure", ann_val="SSRSRS")
l3, l4, l5, l6, l7, l8, l9, l10 = sch.get_loops(block=b0)
v11, v12, v13, v14 = sch.sample_perfect_tile(loop=l3, n=4, max_innermost_factor=64, decision=[1, 1, 1, 1])
l15, l16, l17, l18 = sch.split(loop=l3, factors=[v11, v12, v13, v14], preserve_unit_iters=True)
v19, v20, v21, v22 = sch.sample_perfect_tile(loop=l4, n=4, max_innermost_factor=64, decision=[2, 4, 1, 6])
l23, l24, l25, l26 = sch.split(loop=l4, factors=[v19, v20, v21, v22], preserve_unit_iters=True)
v27, v28, v29, v30 = sch.sample_perfect_tile(loop=l5, n=4, max_innermost_factor=64, decision=[1, 7, 2, 1])
l31, l32, l33, l34 = sch.split(loop=l5, factors=[v27, v28, v29, v30], preserve_unit_iters=True)
v35, v36, v37, v38 = sch.sample_perfect_tile(loop=l6, n=4, max_innermost_factor=64, decision=[2, 1, 7, 1])
l39, l40, l41, l42 = sch.split(loop=l6, factors=[v35, v36, v37, v38], preserve_unit_iters=True)
v43, v44, v45, v46 = sch.sample_perfect_tile(loop=l7, n=4, max_innermost_factor=64, decision=[1, 2, 1, 2])
l47, l48, l49, l50 = sch.split(loop=l7, factors=[v43, v44, v45, v46], preserve_unit_iters=True)
v51, v52 = sch.sample_perfect_tile(loop=l8, n=2, max_innermost_factor=64, decision=[51, 32])
l53, l54 = sch.split(loop=l8, factors=[v51, v52], preserve_unit_iters=True)
v55, v56 = sch.sample_perfect_tile(loop=l9, n=2, max_innermost_factor=64, decision=[1, 1])
l57, l58 = sch.split(loop=l9, factors=[v55, v56], preserve_unit_iters=True)
v59, v60 = sch.sample_perfect_tile(loop=l10, n=2, max_innermost_factor=64, decision=[1, 1])
l61, l62 = sch.split(loop=l10, factors=[v59, v60], preserve_unit_iters=True)
sch.reorder(l15, l23, l31, l39, l47, l16, l24, l32, l40, l48, l53, l57, l61, l17, l25, l33, l41, l49, l54, l58, l62, l18, l26, l34, l42, l50)
b63, = sch.get_consumers(block=b0)
sch.reverse_compute_at(block=b63, loop=l48, preserve_unit_loops=True, index=-1)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.vectorize", ann_val=64)
v64 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=1)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.unroll_explicit", ann_val=v64)
2024-04-29 02:30:33 [INFO] [task_scheduler.cc:170] Design space #2:
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(408), T.int64(14), T.int64(14), T.int64(4)), "float32"), p1: T.Buffer((T.int64(48), T.int64(408), T.int64(1), T.int64(1), T.int64(4), T.int64(4)), "float32"), p2: T.Buffer((T.int64(1), T.int64(48), T.int64(1), T.int64(1), T.int64(4)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(48), T.int64(14), T.int64(14), T.int64(4)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        with T.block("root"):
            T.reads()
            T.writes()
            T.block_attr({"meta_schedule.parallel": 768, "meta_schedule.unroll_explicit": 16, "meta_schedule.vectorize": 64})
            conv2d_NCHWc = T.alloc_buffer((T.int64(1), T.int64(48), T.int64(14), T.int64(14), T.int64(4)))
            for n_0, oc_chunk_0, oh_0, ow_0, oc_block_0 in T.grid(T.int64(1), T.int64(2), T.int64(1), T.int64(2), T.int64(1)):
                for n_1, oc_chunk_1, oh_1, ow_1, oc_block_1, ic_0, kh_0, kw_0, n_2, oc_chunk_2, oh_2, ow_2, oc_block_2, ic_1, kh_1, kw_1, n_3, oc_chunk_3, oh_3, ow_3, oc_block_3 in T.grid(T.int64(1), T.int64(4), T.int64(7), T.int64(1), T.int64(2), T.int64(51), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(7), T.int64(1), T.int64(32), T.int64(1), T.int64(1), T.int64(1), T.int64(6), T.int64(1), T.int64(1), T.int64(2)):
                    with T.block("conv2d_NCHWc"):
                        v_n = T.axis.spatial(T.int64(1), n_0 + n_1 + n_2 + n_3)
                        v_oc_chunk = T.axis.spatial(T.int64(48), oc_chunk_0 * T.int64(24) + oc_chunk_1 * T.int64(6) + oc_chunk_2 * T.int64(6) + oc_chunk_3)
                        v_oh = T.axis.spatial(T.int64(14), oh_0 * T.int64(14) + oh_1 * T.int64(2) + oh_2 + oh_3)
                        v_ow = T.axis.spatial(T.int64(14), ow_0 * T.int64(7) + ow_1 * T.int64(7) + ow_2 + ow_3)
                        v_oc_block = T.axis.spatial(T.int64(4), oc_block_0 * T.int64(4) + oc_block_1 * T.int64(2) + oc_block_2 * T.int64(2) + oc_block_3)
                        v_ic = T.axis.reduce(T.int64(1632), ic_0 * T.int64(32) + ic_1)
                        v_kh = T.axis.reduce(T.int64(1), kh_0 + kh_1)
                        v_kw = T.axis.reduce(T.int64(1), kw_0 + kw_1)
                        T.reads(p0[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)], p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block])
                        T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                        T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                        with T.init():
                            conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = T.float32(0)
                        conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] + p0[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)] * p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block]
                for ax0, ax1, ax2, ax3, ax4 in T.grid(T.int64(1), T.int64(24), T.int64(14), T.int64(7), T.int64(4)):
                    with T.block("T_relu"):
                        v_ax0 = T.axis.spatial(T.int64(1), ax0)
                        v_ax1 = T.axis.spatial(T.int64(48), oc_chunk_0 * T.int64(24) + ax1)
                        v_ax2 = T.axis.spatial(T.int64(14), ax2)
                        v_ax3 = T.axis.spatial(T.int64(14), ow_0 * T.int64(7) + ax3)
                        v_ax4 = T.axis.spatial(T.int64(4), ax4)
                        T.reads(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4])
                        T.writes(T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                        T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.max(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] + p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4], T.float32(0))
b0 = sch.get_block(name="conv2d_NCHWc", func_name="main")
b1 = sch.get_block(name="T_add", func_name="main")
b2 = sch.get_block(name="root", func_name="main")
sch.compute_inline(block=b1)
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.tiling_structure", ann_val="SSRSRS")
l3, l4, l5, l6, l7, l8, l9, l10 = sch.get_loops(block=b0)
v11, v12, v13, v14 = sch.sample_perfect_tile(loop=l3, n=4, max_innermost_factor=64, decision=[1, 1, 1, 1])
l15, l16, l17, l18 = sch.split(loop=l3, factors=[v11, v12, v13, v14], preserve_unit_iters=True)
v19, v20, v21, v22 = sch.sample_perfect_tile(loop=l4, n=4, max_innermost_factor=64, decision=[2, 4, 1, 6])
l23, l24, l25, l26 = sch.split(loop=l4, factors=[v19, v20, v21, v22], preserve_unit_iters=True)
v27, v28, v29, v30 = sch.sample_perfect_tile(loop=l5, n=4, max_innermost_factor=64, decision=[1, 7, 2, 1])
l31, l32, l33, l34 = sch.split(loop=l5, factors=[v27, v28, v29, v30], preserve_unit_iters=True)
v35, v36, v37, v38 = sch.sample_perfect_tile(loop=l6, n=4, max_innermost_factor=64, decision=[2, 1, 7, 1])
l39, l40, l41, l42 = sch.split(loop=l6, factors=[v35, v36, v37, v38], preserve_unit_iters=True)
v43, v44, v45, v46 = sch.sample_perfect_tile(loop=l7, n=4, max_innermost_factor=64, decision=[1, 2, 1, 2])
l47, l48, l49, l50 = sch.split(loop=l7, factors=[v43, v44, v45, v46], preserve_unit_iters=True)
v51, v52 = sch.sample_perfect_tile(loop=l8, n=2, max_innermost_factor=64, decision=[51, 32])
l53, l54 = sch.split(loop=l8, factors=[v51, v52], preserve_unit_iters=True)
v55, v56 = sch.sample_perfect_tile(loop=l9, n=2, max_innermost_factor=64, decision=[1, 1])
l57, l58 = sch.split(loop=l9, factors=[v55, v56], preserve_unit_iters=True)
v59, v60 = sch.sample_perfect_tile(loop=l10, n=2, max_innermost_factor=64, decision=[1, 1])
l61, l62 = sch.split(loop=l10, factors=[v59, v60], preserve_unit_iters=True)
sch.reorder(l15, l23, l31, l39, l47, l16, l24, l32, l40, l48, l53, l57, l61, l17, l25, l33, l41, l49, l54, l58, l62, l18, l26, l34, l42, l50)
b63, = sch.get_consumers(block=b0)
sch.reverse_compute_at(block=b63, loop=l47, preserve_unit_loops=True, index=-1)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.vectorize", ann_val=64)
v64 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=1)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.unroll_explicit", ann_val=v64)
2024-04-29 03:26:28 [INFO] [evolutionary_search.cc:713] Generating candidates......
2024-04-29 03:26:28 [INFO] [evolutionary_search.cc:715] Picked top 0 candidate(s) from database
2024-04-29 03:26:30 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0xc1382d8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x1452d318)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0xd6e3f88)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0xc647978)]: 0 failure(s)
2024-04-29 03:26:30 [INFO] [evolutionary_search.cc:723] Sampled 512 candidate(s)
2024-04-29 03:26:33 [INFO] [evolutionary_search.cc:621] Evolve iter #0 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0xc1382d8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x1452d318)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0xd6e3f88)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0xc647978)]: 0 failure(s)
2024-04-29 03:26:36 [INFO] [evolutionary_search.cc:621] Evolve iter #1 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0xc1382d8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x1452d318)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0xd6e3f88)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0xc647978)]: 0 failure(s)
2024-04-29 03:26:39 [INFO] [evolutionary_search.cc:621] Evolve iter #2 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0xc1382d8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x1452d318)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0xd6e3f88)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0xc647978)]: 0 failure(s)
2024-04-29 03:26:42 [INFO] [evolutionary_search.cc:621] Evolve iter #3 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0xc1382d8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x1452d318)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0xd6e3f88)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0xc647978)]: 0 failure(s)
2024-04-29 03:26:43 [INFO] [evolutionary_search.cc:649] Scores of the best 64 candidates:
[1 : 16]:	1.0000  0.9998  0.9990  0.9988  0.9984  0.9982  0.9979  0.9977  0.9973  0.9971  0.9962  0.9959  0.9956  0.9950  0.9939  0.9939
[17 : 32]:	0.9914  0.9901  0.9899  0.9898  0.9895  0.9894  0.9887  0.9883  0.9882  0.9881  0.9877  0.9873  0.9850  0.9843  0.9838  0.9831
[33 : 48]:	0.9828  0.9822  0.9819  0.9818  0.9796  0.9789  0.9784  0.9780  0.9779  0.9776  0.9772  0.9764  0.9757  0.9755  0.9755  0.9752
[49 : 64]:	0.9748  0.9745  0.9743  0.9738  0.9735  0.9734  0.9727  0.9725  0.9725  0.9715  0.9707  0.9703  0.9693  0.9693  0.9693  0.9690
2024-04-29 03:26:44 [INFO] [evolutionary_search.cc:727] Got 64 candidate(s) with evolutionary search
2024-04-29 03:26:44 [INFO] [evolutionary_search.cc:730] Sending 64 candidates(s) for measurement
2024-04-29 05:05:30 [INFO] [task_scheduler.cc:131] [Task #34: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_33] Trial #1: GFLOPs: 22.3490. Time: 5499.4062 us. Best GFLOPs: 22.3490
2024-04-29 05:05:30 [INFO] [task_scheduler.cc:131] [Task #34: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_33] Trial #2: GFLOPs: 106.3171. Time: 1156.0330 us. Best GFLOPs: 106.3171
2024-04-29 05:05:31 [INFO] [task_scheduler.cc:131] [Task #34: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_33] Trial #3: GFLOPs: 35.6702. Time: 3445.6263 us. Best GFLOPs: 106.3171
2024-04-29 05:05:31 [INFO] [task_scheduler.cc:131] [Task #34: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_33] Trial #4: GFLOPs: 80.6277. Time: 1524.3665 us. Best GFLOPs: 106.3171
2024-04-29 05:05:31 [INFO] [task_scheduler.cc:131] [Task #34: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_33] Trial #5: GFLOPs: 118.9043. Time: 1033.6562 us. Best GFLOPs: 118.9043
2024-04-29 05:05:31 [INFO] [task_scheduler.cc:131] [Task #34: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_33] Trial #6: GFLOPs: 18.4835. Time: 6649.5029 us. Best GFLOPs: 118.9043
2024-04-29 05:05:31 [INFO] [task_scheduler.cc:131] [Task #34: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_33] Trial #7: GFLOPs: 59.1393. Time: 2078.2486 us. Best GFLOPs: 118.9043
2024-04-29 05:05:31 [INFO] [task_scheduler.cc:131] [Task #34: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_33] Trial #8: GFLOPs: 55.8106. Time: 2202.1991 us. Best GFLOPs: 118.9043
2024-04-29 05:05:31 [INFO] [task_scheduler.cc:131] [Task #34: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_33] Trial #9: GFLOPs: 138.4652. Time: 887.6318 us. Best GFLOPs: 138.4652
2024-04-29 05:05:31 [INFO] [task_scheduler.cc:131] [Task #34: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_33] Trial #10: GFLOPs: 79.1136. Time: 1553.5397 us. Best GFLOPs: 138.4652
2024-04-29 05:05:31 [INFO] [task_scheduler.cc:131] [Task #34: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_33] Trial #11: GFLOPs: 8.3129. Time: 14785.0240 us. Best GFLOPs: 138.4652
2024-04-29 05:05:31 [INFO] [task_scheduler.cc:131] [Task #34: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_33] Trial #12: GFLOPs: 24.5461. Time: 5007.1479 us. Best GFLOPs: 138.4652
2024-04-29 05:05:31 [INFO] [task_scheduler.cc:131] [Task #34: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_33] Trial #13: GFLOPs: 77.1165. Time: 1593.7719 us. Best GFLOPs: 138.4652
2024-04-29 05:05:31 [INFO] [task_scheduler.cc:131] [Task #34: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_33] Trial #14: GFLOPs: 91.5576. Time: 1342.3917 us. Best GFLOPs: 138.4652
2024-04-29 05:05:31 [INFO] [task_scheduler.cc:131] [Task #34: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_33] Trial #15: GFLOPs: 7.4281. Time: 16546.1279 us. Best GFLOPs: 138.4652
2024-04-29 05:05:31 [INFO] [task_scheduler.cc:131] [Task #34: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_33] Trial #16: GFLOPs: 34.4530. Time: 3567.3535 us. Best GFLOPs: 138.4652
2024-04-29 05:05:31 [INFO] [task_scheduler.cc:131] [Task #34: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_33] Trial #17: GFLOPs: 15.6265. Time: 7865.2261 us. Best GFLOPs: 138.4652
2024-04-29 05:05:31 [INFO] [task_scheduler.cc:131] [Task #34: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_33] Trial #18: GFLOPs: 73.0553. Time: 1682.3708 us. Best GFLOPs: 138.4652
2024-04-29 05:05:31 [INFO] [task_scheduler.cc:131] [Task #34: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_33] Trial #19: GFLOPs: 21.2492. Time: 5784.0282 us. Best GFLOPs: 138.4652
2024-04-29 05:05:31 [INFO] [task_scheduler.cc:131] [Task #34: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_33] Trial #20: GFLOPs: 90.8954. Time: 1352.1713 us. Best GFLOPs: 138.4652
2024-04-29 05:05:31 [INFO] [task_scheduler.cc:131] [Task #34: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_33] Trial #21: GFLOPs: 32.3269. Time: 3801.9801 us. Best GFLOPs: 138.4652
2024-04-29 05:05:31 [INFO] [task_scheduler.cc:131] [Task #34: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_33] Trial #22: GFLOPs: 20.0547. Time: 6128.5399 us. Best GFLOPs: 138.4652
2024-04-29 05:05:31 [INFO] [task_scheduler.cc:131] [Task #34: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_33] Trial #23: GFLOPs: 57.3016. Time: 2144.8971 us. Best GFLOPs: 138.4652
2024-04-29 05:05:31 [INFO] [task_scheduler.cc:131] [Task #34: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_33] Trial #24: GFLOPs: 65.2934. Time: 1882.3666 us. Best GFLOPs: 138.4652
2024-04-29 05:05:31 [INFO] [task_scheduler.cc:131] [Task #34: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_33] Trial #25: GFLOPs: 3.5758. Time: 34371.7260 us. Best GFLOPs: 138.4652
2024-04-29 05:05:31 [INFO] [task_scheduler.cc:131] [Task #34: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_33] Trial #26: GFLOPs: 48.7402. Time: 2521.6556 us. Best GFLOPs: 138.4652
2024-04-29 05:05:31 [INFO] [task_scheduler.cc:131] [Task #34: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_33] Trial #27: GFLOPs: 41.2295. Time: 2981.0243 us. Best GFLOPs: 138.4652
2024-04-29 05:05:31 [INFO] [task_scheduler.cc:131] [Task #34: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_33] Trial #28: GFLOPs: 38.3859. Time: 3201.8594 us. Best GFLOPs: 138.4652
2024-04-29 05:05:31 [INFO] [task_scheduler.cc:131] [Task #34: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_33] Trial #29: GFLOPs: 177.7234. Time: 691.5585 us. Best GFLOPs: 177.7234
2024-04-29 05:05:31 [INFO] [task_scheduler.cc:131] [Task #34: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_33] Trial #30: GFLOPs: 2.3881. Time: 51467.0080 us. Best GFLOPs: 177.7234
2024-04-29 05:05:31 [INFO] [task_scheduler.cc:131] [Task #34: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_33] Trial #31: GFLOPs: 17.5246. Time: 7013.3586 us. Best GFLOPs: 177.7234
2024-04-29 05:05:31 [INFO] [task_scheduler.cc:131] [Task #34: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_33] Trial #32: GFLOPs: 83.2158. Time: 1476.9560 us. Best GFLOPs: 177.7234
2024-04-29 05:05:31 [INFO] [task_scheduler.cc:131] [Task #34: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_33] Trial #33: GFLOPs: 131.8870. Time: 931.9049 us. Best GFLOPs: 177.7234
2024-04-29 05:05:31 [INFO] [task_scheduler.cc:131] [Task #34: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_33] Trial #34: GFLOPs: 125.6317. Time: 978.3047 us. Best GFLOPs: 177.7234
2024-04-29 05:05:31 [INFO] [task_scheduler.cc:131] [Task #34: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_33] Trial #35: GFLOPs: 19.1405. Time: 6421.2619 us. Best GFLOPs: 177.7234
2024-04-29 05:05:31 [INFO] [task_scheduler.cc:131] [Task #34: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_33] Trial #36: GFLOPs: 168.5226. Time: 729.3155 us. Best GFLOPs: 177.7234
2024-04-29 05:05:31 [INFO] [task_scheduler.cc:131] [Task #34: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_33] Trial #37: GFLOPs: 94.0849. Time: 1306.3324 us. Best GFLOPs: 177.7234
2024-04-29 05:05:31 [INFO] [task_scheduler.cc:121] [Task #34: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_33] Trial #38: Error in building:
LocalBuilder: Timeout, killed after 30.0 seconds
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(408), T.int64(14), T.int64(14), T.int64(4)), "float32"), p1: T.Buffer((T.int64(48), T.int64(408), T.int64(1), T.int64(1), T.int64(4), T.int64(4)), "float32"), p2: T.Buffer((T.int64(1), T.int64(48), T.int64(1), T.int64(1), T.int64(4)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(48), T.int64(14), T.int64(14), T.int64(4)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        conv2d_NCHWc = T.alloc_buffer((T.int64(1), T.int64(48), T.int64(14), T.int64(14), T.int64(4)))
        for n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_fused in T.parallel(T.int64(4), annotations={"pragma_auto_unroll_max_step": 512, "pragma_unroll_explicit": 1}):
            for n_1, oc_chunk_1, oh_1, ow_1, oc_block_1 in T.grid(T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1)):
                for n_2_init, oc_chunk_2_init, oh_2_init, ow_2_init, oc_block_2_init, n_3_init, oc_chunk_3_init, oh_3_init, ow_3_init, oc_block_3_init in T.grid(T.int64(1), T.int64(24), T.int64(1), T.int64(7), T.int64(4), T.int64(1), T.int64(1), T.int64(14), T.int64(1), T.int64(1)):
                    with T.block("conv2d_NCHWc_init"):
                        v_n = T.axis.spatial(T.int64(1), n_1 + n_2_init + n_3_init)
                        v_oc_chunk = T.axis.spatial(T.int64(48), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_fused // T.int64(2) * T.int64(24) + oc_chunk_1 * T.int64(24) + oc_chunk_2_init + oc_chunk_3_init)
                        v_oh = T.axis.spatial(T.int64(14), oh_1 * T.int64(14) + oh_2_init * T.int64(14) + oh_3_init)
                        v_ow = T.axis.spatial(T.int64(14), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_fused % T.int64(2) * T.int64(7) + ow_1 * T.int64(7) + ow_2_init + ow_3_init)
                        v_oc_block = T.axis.spatial(T.int64(4), oc_block_1 * T.int64(4) + oc_block_2_init + oc_block_3_init)
                        T.reads()
                        T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                        T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                        conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = T.float32(0)
                for ic_0, kh_0, kw_0, n_2, oc_chunk_2, oh_2, ow_2, oc_block_2, ic_1, kh_1, kw_1, n_3, oc_chunk_3, oh_3, ow_3, oc_block_3 in T.grid(T.int64(204), T.int64(1), T.int64(1), T.int64(1), T.int64(24), T.int64(1), T.int64(7), T.int64(4), T.int64(8), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(14), T.int64(1), T.int64(1)):
                    with T.block("conv2d_NCHWc_update"):
                        v_n = T.axis.spatial(T.int64(1), n_1 + n_2 + n_3)
                        v_oc_chunk = T.axis.spatial(T.int64(48), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_fused // T.int64(2) * T.int64(24) + oc_chunk_1 * T.int64(24) + oc_chunk_2 + oc_chunk_3)
                        v_oh = T.axis.spatial(T.int64(14), oh_1 * T.int64(14) + oh_2 * T.int64(14) + oh_3)
                        v_ow = T.axis.spatial(T.int64(14), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_fused % T.int64(2) * T.int64(7) + ow_1 * T.int64(7) + ow_2 + ow_3)
                        v_oc_block = T.axis.spatial(T.int64(4), oc_block_1 * T.int64(4) + oc_block_2 + oc_block_3)
                        v_ic = T.axis.reduce(T.int64(1632), ic_0 * T.int64(8) + ic_1)
                        v_kh = T.axis.reduce(T.int64(1), kh_0 + kh_1)
                        v_kw = T.axis.reduce(T.int64(1), kw_0 + kw_1)
                        T.reads(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block], p0[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)], p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block])
                        T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                        T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                        conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] + p0[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)] * p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block]
            for ax0, ax1, ax2 in T.grid(T.int64(1), T.int64(24), T.int64(14)):
                for ax3_ax4_fused in T.vectorized(T.int64(28)):
                    with T.block("T_relu"):
                        v_ax0 = T.axis.spatial(T.int64(1), ax0)
                        v_ax1 = T.axis.spatial(T.int64(48), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_fused // T.int64(2) * T.int64(24) + ax1)
                        v_ax2 = T.axis.spatial(T.int64(14), ax2)
                        v_ax3 = T.axis.spatial(T.int64(14), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_fused % T.int64(2) * T.int64(7) + ax3_ax4_fused // T.int64(4))
                        v_ax4 = T.axis.spatial(T.int64(4), ax3_ax4_fused % T.int64(4))
                        T.reads(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4])
                        T.writes(T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                        T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.max(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] + p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4], T.float32(0))
b0 = sch.get_block(name="conv2d_NCHWc", func_name="main")
b1 = sch.get_block(name="T_add", func_name="main")
b2 = sch.get_block(name="root", func_name="main")
sch.compute_inline(block=b1)
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.tiling_structure", ann_val="SSRSRS")
l3, l4, l5, l6, l7, l8, l9, l10 = sch.get_loops(block=b0)
v11, v12, v13, v14 = sch.sample_perfect_tile(loop=l3, n=4, max_innermost_factor=64, decision=[1, 1, 1, 1])
l15, l16, l17, l18 = sch.split(loop=l3, factors=[v11, v12, v13, v14], preserve_unit_iters=True)
v19, v20, v21, v22 = sch.sample_perfect_tile(loop=l4, n=4, max_innermost_factor=64, decision=[2, 1, 24, 1])
l23, l24, l25, l26 = sch.split(loop=l4, factors=[v19, v20, v21, v22], preserve_unit_iters=True)
v27, v28, v29, v30 = sch.sample_perfect_tile(loop=l5, n=4, max_innermost_factor=64, decision=[1, 1, 1, 14])
l31, l32, l33, l34 = sch.split(loop=l5, factors=[v27, v28, v29, v30], preserve_unit_iters=True)
v35, v36, v37, v38 = sch.sample_perfect_tile(loop=l6, n=4, max_innermost_factor=64, decision=[2, 1, 7, 1])
l39, l40, l41, l42 = sch.split(loop=l6, factors=[v35, v36, v37, v38], preserve_unit_iters=True)
v43, v44, v45, v46 = sch.sample_perfect_tile(loop=l7, n=4, max_innermost_factor=64, decision=[1, 1, 4, 1])
l47, l48, l49, l50 = sch.split(loop=l7, factors=[v43, v44, v45, v46], preserve_unit_iters=True)
v51, v52 = sch.sample_perfect_tile(loop=l8, n=2, max_innermost_factor=64, decision=[204, 8])
l53, l54 = sch.split(loop=l8, factors=[v51, v52], preserve_unit_iters=True)
v55, v56 = sch.sample_perfect_tile(loop=l9, n=2, max_innermost_factor=64, decision=[1, 1])
l57, l58 = sch.split(loop=l9, factors=[v55, v56], preserve_unit_iters=True)
v59, v60 = sch.sample_perfect_tile(loop=l10, n=2, max_innermost_factor=64, decision=[1, 1])
l61, l62 = sch.split(loop=l10, factors=[v59, v60], preserve_unit_iters=True)
sch.reorder(l15, l23, l31, l39, l47, l16, l24, l32, l40, l48, l53, l57, l61, l17, l25, l33, l41, l49, l54, l58, l62, l18, l26, l34, l42, l50)
b63, = sch.get_consumers(block=b0)
sch.reverse_compute_at(block=b63, loop=l47, preserve_unit_loops=True, index=-1)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.vectorize", ann_val=64)
v64 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.unroll_explicit", ann_val=v64)
sch.enter_postproc()
b65 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b65, ann_key="meta_schedule.parallel")
sch.unannotate(block_or_loop=b65, ann_key="meta_schedule.vectorize")
sch.unannotate(block_or_loop=b65, ann_key="meta_schedule.unroll_explicit")
b66, b67 = sch.get_child_blocks(b65)
l68, l69, l70, l71, l72, l73, l74, l75, l76, l77, l78, l79, l80, l81, l82, l83, l84, l85, l86, l87, l88, l89, l90, l91, l92, l93 = sch.get_loops(block=b66)
l94 = sch.fuse(l68, l69, l70, l71, l72, preserve_unit_iters=True)
sch.parallel(loop=l94)
sch.annotate(block_or_loop=l94, ann_key="pragma_auto_unroll_max_step", ann_val=512)
sch.annotate(block_or_loop=l94, ann_key="pragma_unroll_explicit", ann_val=1)
l95, l96, l97, l98, l99, l100 = sch.get_loops(block=b67)
l101 = sch.fuse(l99, l100, preserve_unit_iters=True)
sch.vectorize(loop=l101)
b102 = sch.get_block(name="conv2d_NCHWc", func_name="main")
l103, l104, l105, l106, l107, l108, l109, l110, l111, l112, l113, l114, l115, l116, l117, l118, l119, l120, l121, l122, l123, l124 = sch.get_loops(block=b102)
b125 = sch.decompose_reduction(block=b102, loop=l109)
2024-04-29 05:05:31 [INFO] [task_scheduler.cc:131] [Task #34: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_33] Trial #39: GFLOPs: 118.8092. Time: 1034.4835 us. Best GFLOPs: 177.7234
2024-04-29 05:05:31 [INFO] [task_scheduler.cc:131] [Task #34: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_33] Trial #40: GFLOPs: 76.0717. Time: 1615.6609 us. Best GFLOPs: 177.7234
2024-04-29 05:05:31 [INFO] [task_scheduler.cc:131] [Task #34: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_33] Trial #41: GFLOPs: 50.1825. Time: 2449.1824 us. Best GFLOPs: 177.7234
2024-04-29 05:05:31 [INFO] [task_scheduler.cc:131] [Task #34: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_33] Trial #42: GFLOPs: 67.1479. Time: 1830.3799 us. Best GFLOPs: 177.7234
2024-04-29 05:05:31 [INFO] [task_scheduler.cc:131] [Task #34: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_33] Trial #43: GFLOPs: 91.8359. Time: 1338.3235 us. Best GFLOPs: 177.7234
2024-04-29 05:05:31 [INFO] [task_scheduler.cc:121] [Task #34: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_33] Trial #44: Error in building:
LocalBuilder: Timeout, killed after 30.0 seconds
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(408), T.int64(14), T.int64(14), T.int64(4)), "float32"), p1: T.Buffer((T.int64(48), T.int64(408), T.int64(1), T.int64(1), T.int64(4), T.int64(4)), "float32"), p2: T.Buffer((T.int64(1), T.int64(48), T.int64(1), T.int64(1), T.int64(4)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(48), T.int64(14), T.int64(14), T.int64(4)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        conv2d_NCHWc = T.alloc_buffer((T.int64(1), T.int64(48), T.int64(14), T.int64(14), T.int64(4)))
        for n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_fused in T.parallel(T.int64(3), annotations={"pragma_auto_unroll_max_step": 512, "pragma_unroll_explicit": 1}):
            for n_1, oc_chunk_1, oh_1, ow_1, oc_block_1 in T.grid(T.int64(1), T.int64(16), T.int64(1), T.int64(14), T.int64(4)):
                for n_2_init, oc_chunk_2_init, oh_2_init, ow_2_init, oc_block_2_init, n_3_init, oc_chunk_3_init, oh_3_init, ow_3_init, oc_block_3_init in T.grid(T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(14), T.int64(1), T.int64(1)):
                    with T.block("conv2d_NCHWc_init"):
                        v_n = T.axis.spatial(T.int64(1), n_1 + n_2_init + n_3_init)
                        v_oc_chunk = T.axis.spatial(T.int64(48), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_fused * T.int64(16) + oc_chunk_1 + oc_chunk_2_init + oc_chunk_3_init)
                        v_oh = T.axis.spatial(T.int64(14), oh_1 * T.int64(14) + oh_2_init * T.int64(14) + oh_3_init)
                        v_ow = T.axis.spatial(T.int64(14), ow_1 + ow_2_init + ow_3_init)
                        v_oc_block = T.axis.spatial(T.int64(4), oc_block_1 + oc_block_2_init + oc_block_3_init)
                        T.reads()
                        T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                        T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                        conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = T.float32(0)
                for ic_0, kh_0, kw_0, n_2, oc_chunk_2, oh_2, ow_2, oc_block_2, ic_1, kh_1, kw_1, n_3, oc_chunk_3, oh_3, ow_3, oc_block_3 in T.grid(T.int64(48), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(34), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(14), T.int64(1), T.int64(1)):
                    with T.block("conv2d_NCHWc_update"):
                        v_n = T.axis.spatial(T.int64(1), n_1 + n_2 + n_3)
                        v_oc_chunk = T.axis.spatial(T.int64(48), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_fused * T.int64(16) + oc_chunk_1 + oc_chunk_2 + oc_chunk_3)
                        v_oh = T.axis.spatial(T.int64(14), oh_1 * T.int64(14) + oh_2 * T.int64(14) + oh_3)
                        v_ow = T.axis.spatial(T.int64(14), ow_1 + ow_2 + ow_3)
                        v_oc_block = T.axis.spatial(T.int64(4), oc_block_1 + oc_block_2 + oc_block_3)
                        v_ic = T.axis.reduce(T.int64(1632), ic_0 * T.int64(34) + ic_1)
                        v_kh = T.axis.reduce(T.int64(1), kh_0 + kh_1)
                        v_kw = T.axis.reduce(T.int64(1), kw_0 + kw_1)
                        T.reads(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block], p0[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)], p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block])
                        T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                        T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                        conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] + p0[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)] * p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block]
            for ax0, ax1, ax2 in T.grid(T.int64(1), T.int64(16), T.int64(14)):
                for ax3_ax4_fused in T.vectorized(T.int64(56)):
                    with T.block("T_relu"):
                        v_ax0 = T.axis.spatial(T.int64(1), ax0)
                        v_ax1 = T.axis.spatial(T.int64(48), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_fused * T.int64(16) + ax1)
                        v_ax2 = T.axis.spatial(T.int64(14), ax2)
                        v_ax3 = T.axis.spatial(T.int64(14), ax3_ax4_fused // T.int64(4))
                        v_ax4 = T.axis.spatial(T.int64(4), ax3_ax4_fused % T.int64(4))
                        T.reads(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4])
                        T.writes(T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                        T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.max(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] + p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4], T.float32(0))
b0 = sch.get_block(name="conv2d_NCHWc", func_name="main")
b1 = sch.get_block(name="T_add", func_name="main")
b2 = sch.get_block(name="root", func_name="main")
sch.compute_inline(block=b1)
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.tiling_structure", ann_val="SSRSRS")
l3, l4, l5, l6, l7, l8, l9, l10 = sch.get_loops(block=b0)
v11, v12, v13, v14 = sch.sample_perfect_tile(loop=l3, n=4, max_innermost_factor=64, decision=[1, 1, 1, 1])
l15, l16, l17, l18 = sch.split(loop=l3, factors=[v11, v12, v13, v14], preserve_unit_iters=True)
v19, v20, v21, v22 = sch.sample_perfect_tile(loop=l4, n=4, max_innermost_factor=64, decision=[3, 16, 1, 1])
l23, l24, l25, l26 = sch.split(loop=l4, factors=[v19, v20, v21, v22], preserve_unit_iters=True)
v27, v28, v29, v30 = sch.sample_perfect_tile(loop=l5, n=4, max_innermost_factor=64, decision=[1, 1, 1, 14])
l31, l32, l33, l34 = sch.split(loop=l5, factors=[v27, v28, v29, v30], preserve_unit_iters=True)
v35, v36, v37, v38 = sch.sample_perfect_tile(loop=l6, n=4, max_innermost_factor=64, decision=[1, 14, 1, 1])
l39, l40, l41, l42 = sch.split(loop=l6, factors=[v35, v36, v37, v38], preserve_unit_iters=True)
v43, v44, v45, v46 = sch.sample_perfect_tile(loop=l7, n=4, max_innermost_factor=64, decision=[1, 4, 1, 1])
l47, l48, l49, l50 = sch.split(loop=l7, factors=[v43, v44, v45, v46], preserve_unit_iters=True)
v51, v52 = sch.sample_perfect_tile(loop=l8, n=2, max_innermost_factor=64, decision=[48, 34])
l53, l54 = sch.split(loop=l8, factors=[v51, v52], preserve_unit_iters=True)
v55, v56 = sch.sample_perfect_tile(loop=l9, n=2, max_innermost_factor=64, decision=[1, 1])
l57, l58 = sch.split(loop=l9, factors=[v55, v56], preserve_unit_iters=True)
v59, v60 = sch.sample_perfect_tile(loop=l10, n=2, max_innermost_factor=64, decision=[1, 1])
l61, l62 = sch.split(loop=l10, factors=[v59, v60], preserve_unit_iters=True)
sch.reorder(l15, l23, l31, l39, l47, l16, l24, l32, l40, l48, l53, l57, l61, l17, l25, l33, l41, l49, l54, l58, l62, l18, l26, l34, l42, l50)
b63, = sch.get_consumers(block=b0)
sch.reverse_compute_at(block=b63, loop=l47, preserve_unit_loops=True, index=-1)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.vectorize", ann_val=64)
v64 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.unroll_explicit", ann_val=v64)
sch.enter_postproc()
b65 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b65, ann_key="meta_schedule.parallel")
sch.unannotate(block_or_loop=b65, ann_key="meta_schedule.vectorize")
sch.unannotate(block_or_loop=b65, ann_key="meta_schedule.unroll_explicit")
b66, b67 = sch.get_child_blocks(b65)
l68, l69, l70, l71, l72, l73, l74, l75, l76, l77, l78, l79, l80, l81, l82, l83, l84, l85, l86, l87, l88, l89, l90, l91, l92, l93 = sch.get_loops(block=b66)
l94 = sch.fuse(l68, l69, l70, l71, l72, preserve_unit_iters=True)
sch.parallel(loop=l94)
sch.annotate(block_or_loop=l94, ann_key="pragma_auto_unroll_max_step", ann_val=512)
sch.annotate(block_or_loop=l94, ann_key="pragma_unroll_explicit", ann_val=1)
l95, l96, l97, l98, l99, l100 = sch.get_loops(block=b67)
l101 = sch.fuse(l99, l100, preserve_unit_iters=True)
sch.vectorize(loop=l101)
b102 = sch.get_block(name="conv2d_NCHWc", func_name="main")
l103, l104, l105, l106, l107, l108, l109, l110, l111, l112, l113, l114, l115, l116, l117, l118, l119, l120, l121, l122, l123, l124 = sch.get_loops(block=b102)
b125 = sch.decompose_reduction(block=b102, loop=l109)
2024-04-29 05:05:31 [INFO] [task_scheduler.cc:131] [Task #34: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_33] Trial #45: GFLOPs: 57.0015. Time: 2156.1908 us. Best GFLOPs: 177.7234
2024-04-29 05:05:31 [INFO] [task_scheduler.cc:131] [Task #34: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_33] Trial #46: GFLOPs: 14.6673. Time: 8379.6276 us. Best GFLOPs: 177.7234
2024-04-29 05:05:31 [INFO] [task_scheduler.cc:131] [Task #34: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_33] Trial #47: GFLOPs: 1.9414. Time: 63306.5523 us. Best GFLOPs: 177.7234
2024-04-29 05:05:31 [INFO] [task_scheduler.cc:131] [Task #34: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_33] Trial #48: GFLOPs: 66.6892. Time: 1842.9680 us. Best GFLOPs: 177.7234
2024-04-29 05:05:31 [INFO] [task_scheduler.cc:131] [Task #34: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_33] Trial #49: GFLOPs: 40.3431. Time: 3046.5193 us. Best GFLOPs: 177.7234
2024-04-29 05:05:31 [INFO] [task_scheduler.cc:131] [Task #34: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_33] Trial #50: GFLOPs: 113.2663. Time: 1085.1070 us. Best GFLOPs: 177.7234
2024-04-29 05:05:31 [INFO] [task_scheduler.cc:131] [Task #34: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_33] Trial #51: GFLOPs: 70.4717. Time: 1744.0486 us. Best GFLOPs: 177.7234
2024-04-29 05:05:31 [INFO] [task_scheduler.cc:131] [Task #34: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_33] Trial #52: GFLOPs: 4.9597. Time: 24780.7938 us. Best GFLOPs: 177.7234
2024-04-29 05:05:31 [INFO] [task_scheduler.cc:131] [Task #34: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_33] Trial #53: GFLOPs: 47.9577. Time: 2562.8037 us. Best GFLOPs: 177.7234
2024-04-29 05:05:31 [INFO] [task_scheduler.cc:131] [Task #34: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_33] Trial #54: GFLOPs: 25.9505. Time: 4736.1684 us. Best GFLOPs: 177.7234
2024-04-29 05:05:31 [INFO] [task_scheduler.cc:131] [Task #34: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_33] Trial #55: GFLOPs: 20.8005. Time: 5908.7988 us. Best GFLOPs: 177.7234
2024-04-29 05:05:31 [INFO] [task_scheduler.cc:131] [Task #34: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_33] Trial #56: GFLOPs: 11.9064. Time: 10322.7026 us. Best GFLOPs: 177.7234
2024-04-29 05:05:31 [INFO] [task_scheduler.cc:131] [Task #34: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_33] Trial #57: GFLOPs: 66.3868. Time: 1851.3635 us. Best GFLOPs: 177.7234
2024-04-29 05:05:31 [INFO] [task_scheduler.cc:131] [Task #34: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_33] Trial #58: GFLOPs: 20.9889. Time: 5855.7648 us. Best GFLOPs: 177.7234
2024-04-29 05:05:31 [INFO] [task_scheduler.cc:121] [Task #34: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_33] Trial #59: Error in building:
LocalBuilder: Timeout, killed after 30.0 seconds
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(408), T.int64(14), T.int64(14), T.int64(4)), "float32"), p1: T.Buffer((T.int64(48), T.int64(408), T.int64(1), T.int64(1), T.int64(4), T.int64(4)), "float32"), p2: T.Buffer((T.int64(1), T.int64(48), T.int64(1), T.int64(1), T.int64(4)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(48), T.int64(14), T.int64(14), T.int64(4)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        conv2d_NCHWc = T.alloc_buffer((T.int64(1), T.int64(48), T.int64(14), T.int64(14), T.int64(4)))
        for n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_fused in T.parallel(T.int64(4), annotations={"pragma_auto_unroll_max_step": 512, "pragma_unroll_explicit": 1}):
            for n_1, oc_chunk_1, oh_1, ow_1, oc_block_1 in T.grid(T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1)):
                for n_2_init, oc_chunk_2_init, oh_2_init, ow_2_init, oc_block_2_init, n_3_init, oc_chunk_3_init, oh_3_init, ow_3_init, oc_block_3_init in T.grid(T.int64(1), T.int64(24), T.int64(1), T.int64(7), T.int64(4), T.int64(1), T.int64(1), T.int64(14), T.int64(1), T.int64(1)):
                    with T.block("conv2d_NCHWc_init"):
                        v_n = T.axis.spatial(T.int64(1), n_1 + n_2_init + n_3_init)
                        v_oc_chunk = T.axis.spatial(T.int64(48), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_fused // T.int64(2) * T.int64(24) + oc_chunk_1 * T.int64(24) + oc_chunk_2_init + oc_chunk_3_init)
                        v_oh = T.axis.spatial(T.int64(14), oh_1 * T.int64(14) + oh_2_init * T.int64(14) + oh_3_init)
                        v_ow = T.axis.spatial(T.int64(14), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_fused % T.int64(2) * T.int64(7) + ow_1 * T.int64(7) + ow_2_init + ow_3_init)
                        v_oc_block = T.axis.spatial(T.int64(4), oc_block_1 * T.int64(4) + oc_block_2_init + oc_block_3_init)
                        T.reads()
                        T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                        T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                        conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = T.float32(0)
                for ic_0, kh_0, kw_0, n_2, oc_chunk_2, oh_2, ow_2, oc_block_2, ic_1, kh_1, kw_1, n_3, oc_chunk_3, oh_3, ow_3, oc_block_3 in T.grid(T.int64(34), T.int64(1), T.int64(1), T.int64(1), T.int64(24), T.int64(1), T.int64(7), T.int64(4), T.int64(48), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(14), T.int64(1), T.int64(1)):
                    with T.block("conv2d_NCHWc_update"):
                        v_n = T.axis.spatial(T.int64(1), n_1 + n_2 + n_3)
                        v_oc_chunk = T.axis.spatial(T.int64(48), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_fused // T.int64(2) * T.int64(24) + oc_chunk_1 * T.int64(24) + oc_chunk_2 + oc_chunk_3)
                        v_oh = T.axis.spatial(T.int64(14), oh_1 * T.int64(14) + oh_2 * T.int64(14) + oh_3)
                        v_ow = T.axis.spatial(T.int64(14), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_fused % T.int64(2) * T.int64(7) + ow_1 * T.int64(7) + ow_2 + ow_3)
                        v_oc_block = T.axis.spatial(T.int64(4), oc_block_1 * T.int64(4) + oc_block_2 + oc_block_3)
                        v_ic = T.axis.reduce(T.int64(1632), ic_0 * T.int64(48) + ic_1)
                        v_kh = T.axis.reduce(T.int64(1), kh_0 + kh_1)
                        v_kw = T.axis.reduce(T.int64(1), kw_0 + kw_1)
                        T.reads(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block], p0[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)], p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block])
                        T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                        T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                        conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] + p0[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)] * p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block]
            for ax0, ax1, ax2 in T.grid(T.int64(1), T.int64(24), T.int64(14)):
                for ax3_ax4_fused in T.vectorized(T.int64(28)):
                    with T.block("T_relu"):
                        v_ax0 = T.axis.spatial(T.int64(1), ax0)
                        v_ax1 = T.axis.spatial(T.int64(48), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_fused // T.int64(2) * T.int64(24) + ax1)
                        v_ax2 = T.axis.spatial(T.int64(14), ax2)
                        v_ax3 = T.axis.spatial(T.int64(14), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_fused % T.int64(2) * T.int64(7) + ax3_ax4_fused // T.int64(4))
                        v_ax4 = T.axis.spatial(T.int64(4), ax3_ax4_fused % T.int64(4))
                        T.reads(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4])
                        T.writes(T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                        T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.max(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] + p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4], T.float32(0))
b0 = sch.get_block(name="conv2d_NCHWc", func_name="main")
b1 = sch.get_block(name="T_add", func_name="main")
b2 = sch.get_block(name="root", func_name="main")
sch.compute_inline(block=b1)
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.tiling_structure", ann_val="SSRSRS")
l3, l4, l5, l6, l7, l8, l9, l10 = sch.get_loops(block=b0)
v11, v12, v13, v14 = sch.sample_perfect_tile(loop=l3, n=4, max_innermost_factor=64, decision=[1, 1, 1, 1])
l15, l16, l17, l18 = sch.split(loop=l3, factors=[v11, v12, v13, v14], preserve_unit_iters=True)
v19, v20, v21, v22 = sch.sample_perfect_tile(loop=l4, n=4, max_innermost_factor=64, decision=[2, 1, 24, 1])
l23, l24, l25, l26 = sch.split(loop=l4, factors=[v19, v20, v21, v22], preserve_unit_iters=True)
v27, v28, v29, v30 = sch.sample_perfect_tile(loop=l5, n=4, max_innermost_factor=64, decision=[1, 1, 1, 14])
l31, l32, l33, l34 = sch.split(loop=l5, factors=[v27, v28, v29, v30], preserve_unit_iters=True)
v35, v36, v37, v38 = sch.sample_perfect_tile(loop=l6, n=4, max_innermost_factor=64, decision=[2, 1, 7, 1])
l39, l40, l41, l42 = sch.split(loop=l6, factors=[v35, v36, v37, v38], preserve_unit_iters=True)
v43, v44, v45, v46 = sch.sample_perfect_tile(loop=l7, n=4, max_innermost_factor=64, decision=[1, 1, 4, 1])
l47, l48, l49, l50 = sch.split(loop=l7, factors=[v43, v44, v45, v46], preserve_unit_iters=True)
v51, v52 = sch.sample_perfect_tile(loop=l8, n=2, max_innermost_factor=64, decision=[34, 48])
l53, l54 = sch.split(loop=l8, factors=[v51, v52], preserve_unit_iters=True)
v55, v56 = sch.sample_perfect_tile(loop=l9, n=2, max_innermost_factor=64, decision=[1, 1])
l57, l58 = sch.split(loop=l9, factors=[v55, v56], preserve_unit_iters=True)
v59, v60 = sch.sample_perfect_tile(loop=l10, n=2, max_innermost_factor=64, decision=[1, 1])
l61, l62 = sch.split(loop=l10, factors=[v59, v60], preserve_unit_iters=True)
sch.reorder(l15, l23, l31, l39, l47, l16, l24, l32, l40, l48, l53, l57, l61, l17, l25, l33, l41, l49, l54, l58, l62, l18, l26, l34, l42, l50)
b63, = sch.get_consumers(block=b0)
sch.reverse_compute_at(block=b63, loop=l47, preserve_unit_loops=True, index=-1)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.vectorize", ann_val=64)
v64 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.unroll_explicit", ann_val=v64)
sch.enter_postproc()
b65 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b65, ann_key="meta_schedule.parallel")
sch.unannotate(block_or_loop=b65, ann_key="meta_schedule.vectorize")
sch.unannotate(block_or_loop=b65, ann_key="meta_schedule.unroll_explicit")
b66, b67 = sch.get_child_blocks(b65)
l68, l69, l70, l71, l72, l73, l74, l75, l76, l77, l78, l79, l80, l81, l82, l83, l84, l85, l86, l87, l88, l89, l90, l91, l92, l93 = sch.get_loops(block=b66)
l94 = sch.fuse(l68, l69, l70, l71, l72, preserve_unit_iters=True)
sch.parallel(loop=l94)
sch.annotate(block_or_loop=l94, ann_key="pragma_auto_unroll_max_step", ann_val=512)
sch.annotate(block_or_loop=l94, ann_key="pragma_unroll_explicit", ann_val=1)
l95, l96, l97, l98, l99, l100 = sch.get_loops(block=b67)
l101 = sch.fuse(l99, l100, preserve_unit_iters=True)
sch.vectorize(loop=l101)
b102 = sch.get_block(name="conv2d_NCHWc", func_name="main")
l103, l104, l105, l106, l107, l108, l109, l110, l111, l112, l113, l114, l115, l116, l117, l118, l119, l120, l121, l122, l123, l124 = sch.get_loops(block=b102)
b125 = sch.decompose_reduction(block=b102, loop=l109)
2024-04-29 05:05:31 [INFO] [task_scheduler.cc:131] [Task #34: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_33] Trial #60: GFLOPs: 136.0478. Time: 903.4039 us. Best GFLOPs: 177.7234
2024-04-29 05:05:31 [INFO] [task_scheduler.cc:131] [Task #34: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_33] Trial #61: GFLOPs: 56.0184. Time: 2194.0305 us. Best GFLOPs: 177.7234
2024-04-29 05:05:31 [INFO] [task_scheduler.cc:121] [Task #34: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_33] Trial #62: Error in building:
LocalBuilder: Timeout, killed after 30.0 seconds
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(408), T.int64(14), T.int64(14), T.int64(4)), "float32"), p1: T.Buffer((T.int64(48), T.int64(408), T.int64(1), T.int64(1), T.int64(4), T.int64(4)), "float32"), p2: T.Buffer((T.int64(1), T.int64(48), T.int64(1), T.int64(1), T.int64(4)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(48), T.int64(14), T.int64(14), T.int64(4)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        conv2d_NCHWc = T.alloc_buffer((T.int64(1), T.int64(48), T.int64(14), T.int64(14), T.int64(4)))
        for n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused in T.parallel(T.int64(4), annotations={"pragma_auto_unroll_max_step": 512, "pragma_unroll_explicit": 1}):
            for n_2_init, oc_chunk_2_init, oh_2_init, ow_2_init, oc_block_2_init, n_3_init, oc_chunk_3_init, oh_3_init, ow_3_init in T.grid(T.int64(1), T.int64(12), T.int64(1), T.int64(2), T.int64(2), T.int64(1), T.int64(2), T.int64(7), T.int64(7)):
                for oc_block_3_fused_init in T.vectorized(T.int64(2)):
                    with T.block("conv2d_NCHWc_init"):
                        v_n = T.axis.spatial(T.int64(1), n_2_init + n_3_init)
                        v_oc_chunk = T.axis.spatial(T.int64(48), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused % T.int64(2) * T.int64(24) + oc_chunk_2_init * T.int64(2) + oc_chunk_3_init)
                        v_oh = T.axis.spatial(T.int64(14), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused // T.int64(2) * T.int64(7) + oh_2_init * T.int64(7) + oh_3_init)
                        v_ow = T.axis.spatial(T.int64(14), ow_2_init * T.int64(7) + ow_3_init)
                        v_oc_block = T.axis.spatial(T.int64(4), oc_block_2_init * T.int64(2) + oc_block_3_fused_init)
                        T.reads()
                        T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                        T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                        conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = T.float32(0)
            for ic_0, kh_0, kw_0, n_2, oc_chunk_2, oh_2, ow_2, oc_block_2, ic_1, kh_1, kw_1, n_3, oc_chunk_3, oh_3, ow_3 in T.grid(T.int64(816), T.int64(1), T.int64(1), T.int64(1), T.int64(12), T.int64(1), T.int64(2), T.int64(2), T.int64(2), T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(7), T.int64(7)):
                for oc_block_3_fused in T.vectorized(T.int64(2)):
                    with T.block("conv2d_NCHWc_update"):
                        v_n = T.axis.spatial(T.int64(1), n_2 + n_3)
                        v_oc_chunk = T.axis.spatial(T.int64(48), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused % T.int64(2) * T.int64(24) + oc_chunk_2 * T.int64(2) + oc_chunk_3)
                        v_oh = T.axis.spatial(T.int64(14), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused // T.int64(2) * T.int64(7) + oh_2 * T.int64(7) + oh_3)
                        v_ow = T.axis.spatial(T.int64(14), ow_2 * T.int64(7) + ow_3)
                        v_oc_block = T.axis.spatial(T.int64(4), oc_block_2 * T.int64(2) + oc_block_3_fused)
                        v_ic = T.axis.reduce(T.int64(1632), ic_0 * T.int64(2) + ic_1)
                        v_kh = T.axis.reduce(T.int64(1), kh_0 + kh_1)
                        v_kw = T.axis.reduce(T.int64(1), kw_0 + kw_1)
                        T.reads(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block], p0[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)], p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block])
                        T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                        T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                        conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] + p0[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)] * p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block]
        for ax0_ax1_ax2_ax3_ax4_fused_0 in T.parallel(T.int64(588)):
            for ax0_ax1_ax2_ax3_ax4_fused_1 in T.vectorized(T.int64(64)):
                with T.block("T_relu"):
                    v_ax0 = T.axis.spatial(T.int64(1), T.int64(0))
                    v_ax1 = T.axis.spatial(T.int64(48), (ax0_ax1_ax2_ax3_ax4_fused_0 * T.int64(64) + ax0_ax1_ax2_ax3_ax4_fused_1) // T.int64(784))
                    v_ax2 = T.axis.spatial(T.int64(14), (ax0_ax1_ax2_ax3_ax4_fused_0 * T.int64(64) + ax0_ax1_ax2_ax3_ax4_fused_1) % T.int64(784) // T.int64(56))
                    v_ax3 = T.axis.spatial(T.int64(14), (ax0_ax1_ax2_ax3_ax4_fused_0 * T.int64(64) + ax0_ax1_ax2_ax3_ax4_fused_1) % T.int64(56) // T.int64(4))
                    v_ax4 = T.axis.spatial(T.int64(4), (ax0_ax1_ax2_ax3_ax4_fused_0 * T.int64(64) + ax0_ax1_ax2_ax3_ax4_fused_1) % T.int64(4))
                    T.reads(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4])
                    T.writes(T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                    T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.max(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] + p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4], T.float32(0))
b0 = sch.get_block(name="conv2d_NCHWc", func_name="main")
b1 = sch.get_block(name="T_add", func_name="main")
b2 = sch.get_block(name="root", func_name="main")
sch.compute_inline(block=b1)
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.tiling_structure", ann_val="SSRSRS")
l3, l4, l5, l6, l7, l8, l9, l10 = sch.get_loops(block=b0)
v11, v12, v13, v14 = sch.sample_perfect_tile(loop=l3, n=4, max_innermost_factor=64, decision=[1, 1, 1, 1])
l15, l16, l17, l18 = sch.split(loop=l3, factors=[v11, v12, v13, v14], preserve_unit_iters=True)
v19, v20, v21, v22 = sch.sample_perfect_tile(loop=l4, n=4, max_innermost_factor=64, decision=[1, 2, 12, 2])
l23, l24, l25, l26 = sch.split(loop=l4, factors=[v19, v20, v21, v22], preserve_unit_iters=True)
v27, v28, v29, v30 = sch.sample_perfect_tile(loop=l5, n=4, max_innermost_factor=64, decision=[2, 1, 1, 7])
l31, l32, l33, l34 = sch.split(loop=l5, factors=[v27, v28, v29, v30], preserve_unit_iters=True)
v35, v36, v37, v38 = sch.sample_perfect_tile(loop=l6, n=4, max_innermost_factor=64, decision=[1, 1, 2, 7])
l39, l40, l41, l42 = sch.split(loop=l6, factors=[v35, v36, v37, v38], preserve_unit_iters=True)
v43, v44, v45, v46 = sch.sample_perfect_tile(loop=l7, n=4, max_innermost_factor=64, decision=[1, 1, 2, 2])
l47, l48, l49, l50 = sch.split(loop=l7, factors=[v43, v44, v45, v46], preserve_unit_iters=True)
v51, v52 = sch.sample_perfect_tile(loop=l8, n=2, max_innermost_factor=64, decision=[816, 2])
l53, l54 = sch.split(loop=l8, factors=[v51, v52], preserve_unit_iters=True)
v55, v56 = sch.sample_perfect_tile(loop=l9, n=2, max_innermost_factor=64, decision=[1, 1])
l57, l58 = sch.split(loop=l9, factors=[v55, v56], preserve_unit_iters=True)
v59, v60 = sch.sample_perfect_tile(loop=l10, n=2, max_innermost_factor=64, decision=[1, 1])
l61, l62 = sch.split(loop=l10, factors=[v59, v60], preserve_unit_iters=True)
sch.reorder(l15, l23, l31, l39, l47, l16, l24, l32, l40, l48, l53, l57, l61, l17, l25, l33, l41, l49, l54, l58, l62, l18, l26, l34, l42, l50)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.vectorize", ann_val=64)
v63 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.unroll_explicit", ann_val=v63)
sch.enter_postproc()
b64 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b64, ann_key="meta_schedule.parallel")
sch.unannotate(block_or_loop=b64, ann_key="meta_schedule.vectorize")
sch.unannotate(block_or_loop=b64, ann_key="meta_schedule.unroll_explicit")
b65, b66 = sch.get_child_blocks(b64)
l67, l68, l69, l70, l71, l72, l73, l74, l75, l76, l77, l78, l79, l80, l81, l82, l83, l84, l85, l86, l87, l88, l89, l90, l91, l92 = sch.get_loops(block=b65)
l93 = sch.fuse(l67, l68, l69, l70, l71, l72, l73, l74, l75, l76, preserve_unit_iters=True)
sch.parallel(loop=l93)
l94 = sch.fuse(l92, preserve_unit_iters=True)
sch.vectorize(loop=l94)
sch.annotate(block_or_loop=l93, ann_key="pragma_auto_unroll_max_step", ann_val=512)
sch.annotate(block_or_loop=l93, ann_key="pragma_unroll_explicit", ann_val=1)
l95, l96, l97, l98, l99 = sch.get_loops(block=b66)
l100 = sch.fuse(l95, l96, l97, l98, l99, preserve_unit_iters=True)
l101, l102 = sch.split(loop=l100, factors=[None, 64], preserve_unit_iters=True)
sch.parallel(loop=l101)
sch.vectorize(loop=l102)
b103 = sch.get_block(name="conv2d_NCHWc", func_name="main")
l104, l105, l106, l107, l108, l109, l110, l111, l112, l113, l114, l115, l116, l117, l118, l119, l120 = sch.get_loops(block=b103)
b121 = sch.decompose_reduction(block=b103, loop=l105)
2024-04-29 05:05:31 [INFO] [task_scheduler.cc:131] [Task #34: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_33] Trial #63: GFLOPs: 87.7250. Time: 1401.0378 us. Best GFLOPs: 177.7234
2024-04-29 05:05:31 [INFO] [task_scheduler.cc:131] [Task #34: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_33] Trial #64: GFLOPs: 163.4049. Time: 752.1568 us. Best GFLOPs: 177.7234
2024-04-29 07:07:21 [INFO] [evolutionary_search.cc:713] Generating candidates......
2024-04-29 07:07:21 [INFO] [evolutionary_search.cc:715] Picked top 60 candidate(s) from database
2024-04-29 07:07:24 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0xc1382d8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x1452d318)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0xd6e3f88)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0xc647978)]: 0 failure(s)
2024-04-29 07:07:24 [INFO] [evolutionary_search.cc:723] Sampled 452 candidate(s)
2024-04-29 07:07:29 [INFO] [evolutionary_search.cc:621] Evolve iter #0 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0xc1382d8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x1452d318)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0xd6e3f88)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0xc647978)]: 0 failure(s)
2024-04-29 07:07:34 [INFO] [evolutionary_search.cc:621] Evolve iter #1 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0xc1382d8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x1452d318)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0xd6e3f88)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0xc647978)]: 0 failure(s)
2024-04-29 07:07:40 [INFO] [evolutionary_search.cc:621] Evolve iter #2 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0xc1382d8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x1452d318)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0xd6e3f88)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0xc647978)]: 0 failure(s)
2024-04-29 07:07:45 [INFO] [evolutionary_search.cc:621] Evolve iter #3 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0xc1382d8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x1452d318)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0xd6e3f88)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0xc647978)]: 0 failure(s)
2024-04-29 07:07:48 [INFO] [evolutionary_search.cc:649] Scores of the best 64 candidates:
[1 : 16]:	0.9789  0.8341  0.8146  0.8137  0.8021  0.7863  0.7676  0.7601  0.7527  0.7459  0.7455  0.7450  0.7399  0.7376  0.7223  0.7185
[17 : 32]:	0.7185  0.7133  0.7124  0.7078  0.7049  0.6936  0.6924  0.6921  0.6912  0.6907  0.6897  0.6870  0.6847  0.6842  0.6828  0.6811
[33 : 48]:	0.6730  0.6722  0.6718  0.6718  0.6673  0.6662  0.6643  0.6632  0.6631  0.6625  0.6623  0.6606  0.6604  0.6587  0.6587  0.6577
[49 : 64]:	0.6560  0.6555  0.6536  0.6534  0.6528  0.6515  0.6513  0.6506  0.6503  0.6495  0.6492  0.6490  0.6488  0.6469  0.6452  0.6448
2024-04-29 07:07:49 [INFO] [evolutionary_search.cc:727] Got 64 candidate(s) with evolutionary search
2024-04-29 07:07:49 [INFO] [evolutionary_search.cc:730] Sending 64 candidates(s) for measurement
2024-04-29 07:09:21 [INFO] [task_scheduler.cc:131] [Task #34: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_33] Trial #65: GFLOPs: 47.1550. Time: 2606.4269 us. Best GFLOPs: 177.7234
2024-04-29 07:09:21 [INFO] [task_scheduler.cc:131] [Task #34: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_33] Trial #66: GFLOPs: 192.7529. Time: 637.6355 us. Best GFLOPs: 192.7529
2024-04-29 07:09:21 [INFO] [task_scheduler.cc:131] [Task #34: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_33] Trial #67: GFLOPs: 103.8854. Time: 1183.0936 us. Best GFLOPs: 192.7529
2024-04-29 07:09:21 [INFO] [task_scheduler.cc:131] [Task #34: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_33] Trial #68: GFLOPs: 248.8336. Time: 493.9289 us. Best GFLOPs: 248.8336
2024-04-29 07:09:21 [INFO] [task_scheduler.cc:131] [Task #34: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_33] Trial #69: GFLOPs: 209.2364. Time: 587.4032 us. Best GFLOPs: 248.8336
2024-04-29 07:09:21 [INFO] [task_scheduler.cc:131] [Task #34: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_33] Trial #70: GFLOPs: 155.0665. Time: 792.6025 us. Best GFLOPs: 248.8336
2024-04-29 07:09:21 [INFO] [task_scheduler.cc:131] [Task #34: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_33] Trial #71: GFLOPs: 175.0051. Time: 702.3001 us. Best GFLOPs: 248.8336
2024-04-29 07:09:21 [INFO] [task_scheduler.cc:131] [Task #34: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_33] Trial #72: GFLOPs: 156.2500. Time: 786.5990 us. Best GFLOPs: 248.8336
2024-04-29 07:09:21 [INFO] [task_scheduler.cc:131] [Task #34: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_33] Trial #73: GFLOPs: 91.5636. Time: 1342.3032 us. Best GFLOPs: 248.8336
2024-04-29 07:09:21 [INFO] [task_scheduler.cc:131] [Task #34: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_33] Trial #74: GFLOPs: 141.9150. Time: 866.0544 us. Best GFLOPs: 248.8336
2024-04-29 07:09:21 [INFO] [task_scheduler.cc:131] [Task #34: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_33] Trial #75: GFLOPs: 201.1060. Time: 611.1508 us. Best GFLOPs: 248.8336
2024-04-29 07:09:21 [INFO] [task_scheduler.cc:131] [Task #34: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_33] Trial #76: GFLOPs: 97.6193. Time: 1259.0352 us. Best GFLOPs: 248.8336
2024-04-29 07:09:21 [INFO] [task_scheduler.cc:131] [Task #34: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_33] Trial #77: GFLOPs: 414.6878. Time: 296.3823 us. Best GFLOPs: 414.6878
2024-04-29 07:09:21 [INFO] [task_scheduler.cc:131] [Task #34: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_33] Trial #78: GFLOPs: 138.2050. Time: 889.3028 us. Best GFLOPs: 414.6878
2024-04-29 07:09:21 [INFO] [task_scheduler.cc:131] [Task #34: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_33] Trial #79: GFLOPs: 93.6082. Time: 1312.9845 us. Best GFLOPs: 414.6878
2024-04-29 07:09:21 [INFO] [task_scheduler.cc:131] [Task #34: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_33] Trial #80: GFLOPs: 393.8662. Time: 312.0504 us. Best GFLOPs: 414.6878
2024-04-29 07:09:21 [INFO] [task_scheduler.cc:131] [Task #34: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_33] Trial #81: GFLOPs: 394.4673. Time: 311.5749 us. Best GFLOPs: 414.6878
2024-04-29 07:09:21 [INFO] [task_scheduler.cc:131] [Task #34: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_33] Trial #82: GFLOPs: 150.2573. Time: 817.9712 us. Best GFLOPs: 414.6878
2024-04-29 07:09:21 [INFO] [task_scheduler.cc:131] [Task #34: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_33] Trial #83: GFLOPs: 141.5398. Time: 868.3504 us. Best GFLOPs: 414.6878
2024-04-29 07:09:21 [INFO] [task_scheduler.cc:131] [Task #34: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_33] Trial #84: GFLOPs: 286.8083. Time: 428.5305 us. Best GFLOPs: 414.6878
2024-04-29 07:09:21 [INFO] [task_scheduler.cc:131] [Task #34: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_33] Trial #85: GFLOPs: 111.0842. Time: 1106.4231 us. Best GFLOPs: 414.6878
2024-04-29 07:09:21 [INFO] [task_scheduler.cc:131] [Task #34: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_33] Trial #86: GFLOPs: 125.5324. Time: 979.0791 us. Best GFLOPs: 414.6878
2024-04-29 07:09:21 [INFO] [task_scheduler.cc:131] [Task #34: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_33] Trial #87: GFLOPs: 177.9660. Time: 690.6158 us. Best GFLOPs: 414.6878
2024-04-29 07:09:21 [INFO] [task_scheduler.cc:131] [Task #34: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_33] Trial #88: GFLOPs: 196.9911. Time: 623.9172 us. Best GFLOPs: 414.6878
2024-04-29 07:09:21 [INFO] [task_scheduler.cc:131] [Task #34: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_33] Trial #89: GFLOPs: 182.6775. Time: 672.8038 us. Best GFLOPs: 414.6878
2024-04-29 07:09:21 [INFO] [task_scheduler.cc:131] [Task #34: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_33] Trial #90: GFLOPs: 202.8487. Time: 605.9006 us. Best GFLOPs: 414.6878
2024-04-29 07:09:21 [INFO] [task_scheduler.cc:131] [Task #34: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_33] Trial #91: GFLOPs: 116.4004. Time: 1055.8905 us. Best GFLOPs: 414.6878
2024-04-29 07:09:21 [INFO] [task_scheduler.cc:131] [Task #34: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_33] Trial #92: GFLOPs: 152.2974. Time: 807.0138 us. Best GFLOPs: 414.6878
2024-04-29 07:09:21 [INFO] [task_scheduler.cc:131] [Task #34: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_33] Trial #93: GFLOPs: 91.4025. Time: 1344.6695 us. Best GFLOPs: 414.6878
2024-04-29 07:09:21 [INFO] [task_scheduler.cc:131] [Task #34: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_33] Trial #94: GFLOPs: 165.3349. Time: 743.3769 us. Best GFLOPs: 414.6878
2024-04-29 07:09:21 [INFO] [task_scheduler.cc:131] [Task #34: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_33] Trial #95: GFLOPs: 152.4560. Time: 806.1741 us. Best GFLOPs: 414.6878
2024-04-29 07:09:21 [INFO] [task_scheduler.cc:131] [Task #34: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_33] Trial #96: GFLOPs: 141.4861. Time: 868.6797 us. Best GFLOPs: 414.6878
2024-04-29 07:09:21 [INFO] [task_scheduler.cc:131] [Task #34: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_33] Trial #97: GFLOPs: 112.1593. Time: 1095.8175 us. Best GFLOPs: 414.6878
2024-04-29 07:09:21 [INFO] [task_scheduler.cc:131] [Task #34: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_33] Trial #98: GFLOPs: 116.6571. Time: 1053.5671 us. Best GFLOPs: 414.6878
2024-04-29 07:09:21 [INFO] [task_scheduler.cc:131] [Task #34: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_33] Trial #99: GFLOPs: 184.4354. Time: 666.3911 us. Best GFLOPs: 414.6878
2024-04-29 07:09:21 [INFO] [task_scheduler.cc:131] [Task #34: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_33] Trial #100: GFLOPs: 184.7078. Time: 665.4083 us. Best GFLOPs: 414.6878
2024-04-29 07:09:21 [INFO] [task_scheduler.cc:131] [Task #34: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_33] Trial #101: GFLOPs: 167.9034. Time: 732.0049 us. Best GFLOPs: 414.6878
2024-04-29 07:09:21 [INFO] [task_scheduler.cc:131] [Task #34: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_33] Trial #102: GFLOPs: 214.9170. Time: 571.8770 us. Best GFLOPs: 414.6878
2024-04-29 07:09:21 [INFO] [task_scheduler.cc:131] [Task #34: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_33] Trial #103: GFLOPs: 160.1430. Time: 767.4774 us. Best GFLOPs: 414.6878
2024-04-29 07:09:21 [INFO] [task_scheduler.cc:131] [Task #34: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_33] Trial #104: GFLOPs: 168.1094. Time: 731.1080 us. Best GFLOPs: 414.6878
2024-04-29 07:09:21 [INFO] [task_scheduler.cc:131] [Task #34: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_33] Trial #105: GFLOPs: 91.7825. Time: 1339.1018 us. Best GFLOPs: 414.6878
2024-04-29 07:09:21 [INFO] [task_scheduler.cc:131] [Task #34: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_33] Trial #106: GFLOPs: 186.7220. Time: 658.2304 us. Best GFLOPs: 414.6878
2024-04-29 07:09:21 [INFO] [task_scheduler.cc:131] [Task #34: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_33] Trial #107: GFLOPs: 307.7292. Time: 399.3970 us. Best GFLOPs: 414.6878
2024-04-29 07:09:21 [INFO] [task_scheduler.cc:131] [Task #34: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_33] Trial #108: GFLOPs: 128.4755. Time: 956.6500 us. Best GFLOPs: 414.6878
2024-04-29 07:09:21 [INFO] [task_scheduler.cc:131] [Task #34: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_33] Trial #109: GFLOPs: 124.0073. Time: 991.1200 us. Best GFLOPs: 414.6878
2024-04-29 07:09:21 [INFO] [task_scheduler.cc:131] [Task #34: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_33] Trial #110: GFLOPs: 136.6149. Time: 899.6539 us. Best GFLOPs: 414.6878
2024-04-29 07:09:21 [INFO] [task_scheduler.cc:131] [Task #34: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_33] Trial #111: GFLOPs: 136.2369. Time: 902.1501 us. Best GFLOPs: 414.6878
2024-04-29 07:09:21 [INFO] [task_scheduler.cc:131] [Task #34: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_33] Trial #112: GFLOPs: 409.2046. Time: 300.3537 us. Best GFLOPs: 414.6878
2024-04-29 07:09:21 [INFO] [task_scheduler.cc:131] [Task #34: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_33] Trial #113: GFLOPs: 41.0502. Time: 2994.0459 us. Best GFLOPs: 414.6878
2024-04-29 07:09:21 [INFO] [task_scheduler.cc:131] [Task #34: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_33] Trial #114: GFLOPs: 93.7917. Time: 1310.4155 us. Best GFLOPs: 414.6878
2024-04-29 07:09:21 [INFO] [task_scheduler.cc:131] [Task #34: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_33] Trial #115: GFLOPs: 238.0669. Time: 516.2671 us. Best GFLOPs: 414.6878
2024-04-29 07:09:21 [INFO] [task_scheduler.cc:131] [Task #34: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_33] Trial #116: GFLOPs: 80.7671. Time: 1521.7344 us. Best GFLOPs: 414.6878
2024-04-29 07:09:21 [INFO] [task_scheduler.cc:131] [Task #34: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_33] Trial #117: GFLOPs: 146.7535. Time: 837.5004 us. Best GFLOPs: 414.6878
2024-04-29 07:09:21 [INFO] [task_scheduler.cc:131] [Task #34: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_33] Trial #118: GFLOPs: 144.7992. Time: 848.8038 us. Best GFLOPs: 414.6878
2024-04-29 07:09:21 [INFO] [task_scheduler.cc:131] [Task #34: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_33] Trial #119: GFLOPs: 153.6681. Time: 799.8155 us. Best GFLOPs: 414.6878
2024-04-29 07:09:21 [INFO] [task_scheduler.cc:131] [Task #34: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_33] Trial #120: GFLOPs: 161.8418. Time: 759.4215 us. Best GFLOPs: 414.6878
2024-04-29 07:09:21 [INFO] [task_scheduler.cc:131] [Task #34: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_33] Trial #121: GFLOPs: 151.2911. Time: 812.3818 us. Best GFLOPs: 414.6878
2024-04-29 07:09:21 [INFO] [task_scheduler.cc:131] [Task #34: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_33] Trial #122: GFLOPs: 126.6483. Time: 970.4520 us. Best GFLOPs: 414.6878
2024-04-29 07:09:21 [INFO] [task_scheduler.cc:131] [Task #34: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_33] Trial #123: GFLOPs: 128.6873. Time: 955.0755 us. Best GFLOPs: 414.6878
2024-04-29 07:09:21 [INFO] [task_scheduler.cc:131] [Task #34: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_33] Trial #124: GFLOPs: 426.8516. Time: 287.9364 us. Best GFLOPs: 426.8516
2024-04-29 07:09:21 [INFO] [task_scheduler.cc:131] [Task #34: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_33] Trial #125: GFLOPs: 126.3503. Time: 972.7410 us. Best GFLOPs: 426.8516
2024-04-29 07:09:21 [INFO] [task_scheduler.cc:131] [Task #34: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_33] Trial #126: GFLOPs: 113.6902. Time: 1081.0614 us. Best GFLOPs: 426.8516
2024-04-29 07:09:21 [INFO] [task_scheduler.cc:131] [Task #34: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_33] Trial #127: GFLOPs: 125.2700. Time: 981.1294 us. Best GFLOPs: 426.8516
2024-04-29 07:09:21 [INFO] [task_scheduler.cc:131] [Task #34: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_33] Trial #128: GFLOPs: 8.7609. Time: 14028.9960 us. Best GFLOPs: 426.8516
