2024-04-29 02:32:26 [INFO] [task_scheduler.cc:160] Initializing Task #63: "fused_nn_contrib_conv2d_NCHWc_add_nn_relu_61"
2024-04-29 02:32:26 [INFO] [task_scheduler.cc:35] 
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(168), T.int64(28), T.int64(28), T.int64(4)), "float32"), p1: T.Buffer((T.int64(48), T.int64(168), T.int64(1), T.int64(1), T.int64(4), T.int64(4)), "float32"), p2: T.Buffer((T.int64(1), T.int64(48), T.int64(1), T.int64(1), T.int64(4)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(48), T.int64(28), T.int64(28), T.int64(4)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        conv2d_NCHWc = T.alloc_buffer((T.int64(1), T.int64(48), T.int64(28), T.int64(28), T.int64(4)))
        T_add = T.alloc_buffer((T.int64(1), T.int64(48), T.int64(28), T.int64(28), T.int64(4)))
        for n, oc_chunk, oh, ow, oc_block, ic, kh, kw in T.grid(T.int64(1), T.int64(48), T.int64(28), T.int64(28), T.int64(4), T.int64(672), T.int64(1), T.int64(1)):
            with T.block("conv2d_NCHWc"):
                v_n, v_oc_chunk, v_oh, v_ow, v_oc_block, v_ic, v_kh, v_kw = T.axis.remap("SSSSSRRR", [n, oc_chunk, oh, ow, oc_block, ic, kh, kw])
                T.reads(p0[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)], p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block])
                T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                with T.init():
                    conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = T.float32(0)
                conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] + p0[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)] * p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block]
        for ax0, ax1, ax2, ax3, ax4 in T.grid(T.int64(1), T.int64(48), T.int64(28), T.int64(28), T.int64(4)):
            with T.block("T_add"):
                v_ax0, v_ax1, v_ax2, v_ax3, v_ax4 = T.axis.remap("SSSSS", [ax0, ax1, ax2, ax3, ax4])
                T.reads(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4])
                T.writes(T_add[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                T_add[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] + p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4]
        for ax0, ax1, ax2, ax3, ax4 in T.grid(T.int64(1), T.int64(48), T.int64(28), T.int64(28), T.int64(4)):
            with T.block("T_relu"):
                v_ax0, v_ax1, v_ax2, v_ax3, v_ax4 = T.axis.remap("SSSSS", [ax0, ax1, ax2, ax3, ax4])
                T.reads(T_add[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                T.writes(T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.max(T_add[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], T.float32(0))
2024-04-29 02:32:26 [INFO] [task_scheduler.cc:164] Total 3 design space(s) generated
2024-04-29 02:32:26 [INFO] [task_scheduler.cc:170] Design space #0:
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(168), T.int64(28), T.int64(28), T.int64(4)), "float32"), p1: T.Buffer((T.int64(48), T.int64(168), T.int64(1), T.int64(1), T.int64(4), T.int64(4)), "float32"), p2: T.Buffer((T.int64(1), T.int64(48), T.int64(1), T.int64(1), T.int64(4)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(48), T.int64(28), T.int64(28), T.int64(4)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        with T.block("root"):
            T.reads()
            T.writes()
            T.block_attr({"meta_schedule.parallel": 768, "meta_schedule.unroll_explicit": 0, "meta_schedule.vectorize": 64})
            conv2d_NCHWc = T.alloc_buffer((T.int64(1), T.int64(48), T.int64(28), T.int64(28), T.int64(4)))
            for n_0, oc_chunk_0, oh_0, ow_0, oc_block_0, n_1, oc_chunk_1, oh_1, ow_1, oc_block_1, ic_0, kh_0, kw_0, n_2, oc_chunk_2, oh_2, ow_2, oc_block_2, ic_1, kh_1, kw_1, n_3, oc_chunk_3, oh_3, ow_3, oc_block_3 in T.grid(T.int64(1), T.int64(8), T.int64(1), T.int64(1), T.int64(2), T.int64(1), T.int64(1), T.int64(28), T.int64(2), T.int64(2), T.int64(84), T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(1), T.int64(1), T.int64(1), T.int64(8), T.int64(1), T.int64(1), T.int64(1), T.int64(3), T.int64(1), T.int64(14), T.int64(1)):
                with T.block("conv2d_NCHWc"):
                    v_n = T.axis.spatial(T.int64(1), n_0 + n_1 + n_2 + n_3)
                    v_oc_chunk = T.axis.spatial(T.int64(48), oc_chunk_0 * T.int64(6) + oc_chunk_1 * T.int64(6) + oc_chunk_2 * T.int64(3) + oc_chunk_3)
                    v_oh = T.axis.spatial(T.int64(28), oh_0 * T.int64(28) + oh_1 + oh_2 + oh_3)
                    v_ow = T.axis.spatial(T.int64(28), ow_0 * T.int64(28) + ow_1 * T.int64(14) + ow_2 * T.int64(14) + ow_3)
                    v_oc_block = T.axis.spatial(T.int64(4), oc_block_0 * T.int64(2) + oc_block_1 + oc_block_2 + oc_block_3)
                    v_ic = T.axis.reduce(T.int64(672), ic_0 * T.int64(8) + ic_1)
                    v_kh = T.axis.reduce(T.int64(1), kh_0 + kh_1)
                    v_kw = T.axis.reduce(T.int64(1), kw_0 + kw_1)
                    T.reads(p0[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)], p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block])
                    T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                    T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                    with T.init():
                        conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = T.float32(0)
                    conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] + p0[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)] * p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block]
            for ax0, ax1, ax2, ax3, ax4 in T.grid(T.int64(1), T.int64(48), T.int64(28), T.int64(28), T.int64(4)):
                with T.block("T_relu"):
                    v_ax0, v_ax1, v_ax2, v_ax3, v_ax4 = T.axis.remap("SSSSS", [ax0, ax1, ax2, ax3, ax4])
                    T.reads(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4])
                    T.writes(T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                    T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.max(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] + p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4], T.float32(0))
b0 = sch.get_block(name="conv2d_NCHWc", func_name="main")
b1 = sch.get_block(name="T_add", func_name="main")
b2 = sch.get_block(name="root", func_name="main")
sch.compute_inline(block=b1)
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.tiling_structure", ann_val="SSRSRS")
l3, l4, l5, l6, l7, l8, l9, l10 = sch.get_loops(block=b0)
v11, v12, v13, v14 = sch.sample_perfect_tile(loop=l3, n=4, max_innermost_factor=64, decision=[1, 1, 1, 1])
l15, l16, l17, l18 = sch.split(loop=l3, factors=[v11, v12, v13, v14], preserve_unit_iters=True)
v19, v20, v21, v22 = sch.sample_perfect_tile(loop=l4, n=4, max_innermost_factor=64, decision=[8, 1, 2, 3])
l23, l24, l25, l26 = sch.split(loop=l4, factors=[v19, v20, v21, v22], preserve_unit_iters=True)
v27, v28, v29, v30 = sch.sample_perfect_tile(loop=l5, n=4, max_innermost_factor=64, decision=[1, 28, 1, 1])
l31, l32, l33, l34 = sch.split(loop=l5, factors=[v27, v28, v29, v30], preserve_unit_iters=True)
v35, v36, v37, v38 = sch.sample_perfect_tile(loop=l6, n=4, max_innermost_factor=64, decision=[1, 2, 1, 14])
l39, l40, l41, l42 = sch.split(loop=l6, factors=[v35, v36, v37, v38], preserve_unit_iters=True)
v43, v44, v45, v46 = sch.sample_perfect_tile(loop=l7, n=4, max_innermost_factor=64, decision=[2, 2, 1, 1])
l47, l48, l49, l50 = sch.split(loop=l7, factors=[v43, v44, v45, v46], preserve_unit_iters=True)
v51, v52 = sch.sample_perfect_tile(loop=l8, n=2, max_innermost_factor=64, decision=[84, 8])
l53, l54 = sch.split(loop=l8, factors=[v51, v52], preserve_unit_iters=True)
v55, v56 = sch.sample_perfect_tile(loop=l9, n=2, max_innermost_factor=64, decision=[1, 1])
l57, l58 = sch.split(loop=l9, factors=[v55, v56], preserve_unit_iters=True)
v59, v60 = sch.sample_perfect_tile(loop=l10, n=2, max_innermost_factor=64, decision=[1, 1])
l61, l62 = sch.split(loop=l10, factors=[v59, v60], preserve_unit_iters=True)
sch.reorder(l15, l23, l31, l39, l47, l16, l24, l32, l40, l48, l53, l57, l61, l17, l25, l33, l41, l49, l54, l58, l62, l18, l26, l34, l42, l50)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.vectorize", ann_val=64)
v63 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=0)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.unroll_explicit", ann_val=v63)
2024-04-29 02:32:26 [INFO] [task_scheduler.cc:170] Design space #1:
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(168), T.int64(28), T.int64(28), T.int64(4)), "float32"), p1: T.Buffer((T.int64(48), T.int64(168), T.int64(1), T.int64(1), T.int64(4), T.int64(4)), "float32"), p2: T.Buffer((T.int64(1), T.int64(48), T.int64(1), T.int64(1), T.int64(4)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(48), T.int64(28), T.int64(28), T.int64(4)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        with T.block("root"):
            T.reads()
            T.writes()
            T.block_attr({"meta_schedule.parallel": 768, "meta_schedule.unroll_explicit": 512, "meta_schedule.vectorize": 64})
            conv2d_NCHWc = T.alloc_buffer((T.int64(1), T.int64(48), T.int64(28), T.int64(28), T.int64(4)))
            for n_0, oc_chunk_0, oh_0, ow_0, oc_block_0, n_1, oc_chunk_1, oh_1, ow_1, oc_block_1 in T.grid(T.int64(1), T.int64(8), T.int64(1), T.int64(1), T.int64(2), T.int64(1), T.int64(1), T.int64(28), T.int64(2), T.int64(2)):
                for ic_0, kh_0, kw_0, n_2, oc_chunk_2, oh_2, ow_2, oc_block_2, ic_1, kh_1, kw_1, n_3, oc_chunk_3, oh_3, ow_3, oc_block_3 in T.grid(T.int64(84), T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(1), T.int64(1), T.int64(1), T.int64(8), T.int64(1), T.int64(1), T.int64(1), T.int64(3), T.int64(1), T.int64(14), T.int64(1)):
                    with T.block("conv2d_NCHWc"):
                        v_n = T.axis.spatial(T.int64(1), n_0 + n_1 + n_2 + n_3)
                        v_oc_chunk = T.axis.spatial(T.int64(48), oc_chunk_0 * T.int64(6) + oc_chunk_1 * T.int64(6) + oc_chunk_2 * T.int64(3) + oc_chunk_3)
                        v_oh = T.axis.spatial(T.int64(28), oh_0 * T.int64(28) + oh_1 + oh_2 + oh_3)
                        v_ow = T.axis.spatial(T.int64(28), ow_0 * T.int64(28) + ow_1 * T.int64(14) + ow_2 * T.int64(14) + ow_3)
                        v_oc_block = T.axis.spatial(T.int64(4), oc_block_0 * T.int64(2) + oc_block_1 + oc_block_2 + oc_block_3)
                        v_ic = T.axis.reduce(T.int64(672), ic_0 * T.int64(8) + ic_1)
                        v_kh = T.axis.reduce(T.int64(1), kh_0 + kh_1)
                        v_kw = T.axis.reduce(T.int64(1), kw_0 + kw_1)
                        T.reads(p0[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)], p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block])
                        T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                        T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                        with T.init():
                            conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = T.float32(0)
                        conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] + p0[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)] * p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block]
                for ax0, ax1, ax2, ax3, ax4 in T.grid(T.int64(1), T.int64(6), T.int64(1), T.int64(14), T.int64(1)):
                    with T.block("T_relu"):
                        v_ax0 = T.axis.spatial(T.int64(1), ax0)
                        v_ax1 = T.axis.spatial(T.int64(48), oc_chunk_0 * T.int64(6) + ax1)
                        v_ax2 = T.axis.spatial(T.int64(28), oh_1 + ax2)
                        v_ax3 = T.axis.spatial(T.int64(28), ow_1 * T.int64(14) + ax3)
                        v_ax4 = T.axis.spatial(T.int64(4), oc_block_0 * T.int64(2) + oc_block_1 + ax4)
                        T.reads(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4])
                        T.writes(T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                        T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.max(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] + p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4], T.float32(0))
b0 = sch.get_block(name="conv2d_NCHWc", func_name="main")
b1 = sch.get_block(name="T_add", func_name="main")
b2 = sch.get_block(name="root", func_name="main")
sch.compute_inline(block=b1)
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.tiling_structure", ann_val="SSRSRS")
l3, l4, l5, l6, l7, l8, l9, l10 = sch.get_loops(block=b0)
v11, v12, v13, v14 = sch.sample_perfect_tile(loop=l3, n=4, max_innermost_factor=64, decision=[1, 1, 1, 1])
l15, l16, l17, l18 = sch.split(loop=l3, factors=[v11, v12, v13, v14], preserve_unit_iters=True)
v19, v20, v21, v22 = sch.sample_perfect_tile(loop=l4, n=4, max_innermost_factor=64, decision=[8, 1, 2, 3])
l23, l24, l25, l26 = sch.split(loop=l4, factors=[v19, v20, v21, v22], preserve_unit_iters=True)
v27, v28, v29, v30 = sch.sample_perfect_tile(loop=l5, n=4, max_innermost_factor=64, decision=[1, 28, 1, 1])
l31, l32, l33, l34 = sch.split(loop=l5, factors=[v27, v28, v29, v30], preserve_unit_iters=True)
v35, v36, v37, v38 = sch.sample_perfect_tile(loop=l6, n=4, max_innermost_factor=64, decision=[1, 2, 1, 14])
l39, l40, l41, l42 = sch.split(loop=l6, factors=[v35, v36, v37, v38], preserve_unit_iters=True)
v43, v44, v45, v46 = sch.sample_perfect_tile(loop=l7, n=4, max_innermost_factor=64, decision=[2, 2, 1, 1])
l47, l48, l49, l50 = sch.split(loop=l7, factors=[v43, v44, v45, v46], preserve_unit_iters=True)
v51, v52 = sch.sample_perfect_tile(loop=l8, n=2, max_innermost_factor=64, decision=[84, 8])
l53, l54 = sch.split(loop=l8, factors=[v51, v52], preserve_unit_iters=True)
v55, v56 = sch.sample_perfect_tile(loop=l9, n=2, max_innermost_factor=64, decision=[1, 1])
l57, l58 = sch.split(loop=l9, factors=[v55, v56], preserve_unit_iters=True)
v59, v60 = sch.sample_perfect_tile(loop=l10, n=2, max_innermost_factor=64, decision=[1, 1])
l61, l62 = sch.split(loop=l10, factors=[v59, v60], preserve_unit_iters=True)
sch.reorder(l15, l23, l31, l39, l47, l16, l24, l32, l40, l48, l53, l57, l61, l17, l25, l33, l41, l49, l54, l58, l62, l18, l26, l34, l42, l50)
b63, = sch.get_consumers(block=b0)
sch.reverse_compute_at(block=b63, loop=l48, preserve_unit_loops=True, index=-1)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.vectorize", ann_val=64)
v64 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.unroll_explicit", ann_val=v64)
2024-04-29 02:32:26 [INFO] [task_scheduler.cc:170] Design space #2:
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(168), T.int64(28), T.int64(28), T.int64(4)), "float32"), p1: T.Buffer((T.int64(48), T.int64(168), T.int64(1), T.int64(1), T.int64(4), T.int64(4)), "float32"), p2: T.Buffer((T.int64(1), T.int64(48), T.int64(1), T.int64(1), T.int64(4)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(48), T.int64(28), T.int64(28), T.int64(4)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        with T.block("root"):
            T.reads()
            T.writes()
            T.block_attr({"meta_schedule.parallel": 768, "meta_schedule.unroll_explicit": 0, "meta_schedule.vectorize": 64})
            conv2d_NCHWc = T.alloc_buffer((T.int64(1), T.int64(48), T.int64(28), T.int64(28), T.int64(4)))
            for n_0, oc_chunk_0, oh_0, ow_0, oc_block_0 in T.grid(T.int64(1), T.int64(8), T.int64(1), T.int64(1), T.int64(2)):
                for n_1, oc_chunk_1, oh_1, ow_1, oc_block_1, ic_0, kh_0, kw_0, n_2, oc_chunk_2, oh_2, ow_2, oc_block_2, ic_1, kh_1, kw_1, n_3, oc_chunk_3, oh_3, ow_3, oc_block_3 in T.grid(T.int64(1), T.int64(1), T.int64(28), T.int64(2), T.int64(2), T.int64(84), T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(1), T.int64(1), T.int64(1), T.int64(8), T.int64(1), T.int64(1), T.int64(1), T.int64(3), T.int64(1), T.int64(14), T.int64(1)):
                    with T.block("conv2d_NCHWc"):
                        v_n = T.axis.spatial(T.int64(1), n_0 + n_1 + n_2 + n_3)
                        v_oc_chunk = T.axis.spatial(T.int64(48), oc_chunk_0 * T.int64(6) + oc_chunk_1 * T.int64(6) + oc_chunk_2 * T.int64(3) + oc_chunk_3)
                        v_oh = T.axis.spatial(T.int64(28), oh_0 * T.int64(28) + oh_1 + oh_2 + oh_3)
                        v_ow = T.axis.spatial(T.int64(28), ow_0 * T.int64(28) + ow_1 * T.int64(14) + ow_2 * T.int64(14) + ow_3)
                        v_oc_block = T.axis.spatial(T.int64(4), oc_block_0 * T.int64(2) + oc_block_1 + oc_block_2 + oc_block_3)
                        v_ic = T.axis.reduce(T.int64(672), ic_0 * T.int64(8) + ic_1)
                        v_kh = T.axis.reduce(T.int64(1), kh_0 + kh_1)
                        v_kw = T.axis.reduce(T.int64(1), kw_0 + kw_1)
                        T.reads(p0[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)], p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block])
                        T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                        T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                        with T.init():
                            conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = T.float32(0)
                        conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] + p0[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)] * p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block]
                for ax0, ax1, ax2, ax3, ax4 in T.grid(T.int64(1), T.int64(6), T.int64(28), T.int64(28), T.int64(2)):
                    with T.block("T_relu"):
                        v_ax0 = T.axis.spatial(T.int64(1), ax0)
                        v_ax1 = T.axis.spatial(T.int64(48), oc_chunk_0 * T.int64(6) + ax1)
                        v_ax2, v_ax3 = T.axis.remap("SS", [ax2, ax3])
                        v_ax4 = T.axis.spatial(T.int64(4), oc_block_0 * T.int64(2) + ax4)
                        T.reads(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4])
                        T.writes(T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                        T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.max(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] + p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4], T.float32(0))
b0 = sch.get_block(name="conv2d_NCHWc", func_name="main")
b1 = sch.get_block(name="T_add", func_name="main")
b2 = sch.get_block(name="root", func_name="main")
sch.compute_inline(block=b1)
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.tiling_structure", ann_val="SSRSRS")
l3, l4, l5, l6, l7, l8, l9, l10 = sch.get_loops(block=b0)
v11, v12, v13, v14 = sch.sample_perfect_tile(loop=l3, n=4, max_innermost_factor=64, decision=[1, 1, 1, 1])
l15, l16, l17, l18 = sch.split(loop=l3, factors=[v11, v12, v13, v14], preserve_unit_iters=True)
v19, v20, v21, v22 = sch.sample_perfect_tile(loop=l4, n=4, max_innermost_factor=64, decision=[8, 1, 2, 3])
l23, l24, l25, l26 = sch.split(loop=l4, factors=[v19, v20, v21, v22], preserve_unit_iters=True)
v27, v28, v29, v30 = sch.sample_perfect_tile(loop=l5, n=4, max_innermost_factor=64, decision=[1, 28, 1, 1])
l31, l32, l33, l34 = sch.split(loop=l5, factors=[v27, v28, v29, v30], preserve_unit_iters=True)
v35, v36, v37, v38 = sch.sample_perfect_tile(loop=l6, n=4, max_innermost_factor=64, decision=[1, 2, 1, 14])
l39, l40, l41, l42 = sch.split(loop=l6, factors=[v35, v36, v37, v38], preserve_unit_iters=True)
v43, v44, v45, v46 = sch.sample_perfect_tile(loop=l7, n=4, max_innermost_factor=64, decision=[2, 2, 1, 1])
l47, l48, l49, l50 = sch.split(loop=l7, factors=[v43, v44, v45, v46], preserve_unit_iters=True)
v51, v52 = sch.sample_perfect_tile(loop=l8, n=2, max_innermost_factor=64, decision=[84, 8])
l53, l54 = sch.split(loop=l8, factors=[v51, v52], preserve_unit_iters=True)
v55, v56 = sch.sample_perfect_tile(loop=l9, n=2, max_innermost_factor=64, decision=[1, 1])
l57, l58 = sch.split(loop=l9, factors=[v55, v56], preserve_unit_iters=True)
v59, v60 = sch.sample_perfect_tile(loop=l10, n=2, max_innermost_factor=64, decision=[1, 1])
l61, l62 = sch.split(loop=l10, factors=[v59, v60], preserve_unit_iters=True)
sch.reorder(l15, l23, l31, l39, l47, l16, l24, l32, l40, l48, l53, l57, l61, l17, l25, l33, l41, l49, l54, l58, l62, l18, l26, l34, l42, l50)
b63, = sch.get_consumers(block=b0)
sch.reverse_compute_at(block=b63, loop=l47, preserve_unit_loops=True, index=-1)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.vectorize", ann_val=64)
v64 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=0)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.unroll_explicit", ann_val=v64)
2024-04-29 04:12:37 [INFO] [evolutionary_search.cc:713] Generating candidates......
2024-04-29 04:12:37 [INFO] [evolutionary_search.cc:715] Picked top 0 candidate(s) from database
2024-04-29 04:12:40 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x8107148)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x7086ba8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0xd9f2af8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0xd2b0d98)]: 0 failure(s)
2024-04-29 04:12:40 [INFO] [evolutionary_search.cc:723] Sampled 512 candidate(s)
2024-04-29 04:12:43 [INFO] [evolutionary_search.cc:621] Evolve iter #0 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x8107148)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x7086ba8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0xd9f2af8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0xd2b0d98)]: 0 failure(s)
2024-04-29 04:12:46 [INFO] [evolutionary_search.cc:621] Evolve iter #1 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x8107148)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x7086ba8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0xd9f2af8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0xd2b0d98)]: 0 failure(s)
2024-04-29 04:12:49 [INFO] [evolutionary_search.cc:621] Evolve iter #2 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x8107148)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x7086ba8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0xd9f2af8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0xd2b0d98)]: 0 failure(s)
2024-04-29 04:12:52 [INFO] [evolutionary_search.cc:621] Evolve iter #3 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x8107148)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x7086ba8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0xd9f2af8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0xd2b0d98)]: 0 failure(s)
2024-04-29 04:12:53 [INFO] [evolutionary_search.cc:649] Scores of the best 64 candidates:
[1 : 16]:	0.9991  0.9989  0.9985  0.9984  0.9983  0.9978  0.9976  0.9964  0.9961  0.9955  0.9950  0.9946  0.9937  0.9921  0.9910  0.9908
[17 : 32]:	0.9899  0.9894  0.9894  0.9893  0.9886  0.9875  0.9864  0.9857  0.9848  0.9843  0.9842  0.9824  0.9815  0.9806  0.9804  0.9795
[33 : 48]:	0.9787  0.9784  0.9777  0.9771  0.9761  0.9753  0.9752  0.9750  0.9749  0.9745  0.9742  0.9735  0.9730  0.9728  0.9728  0.9724
[49 : 64]:	0.9722  0.9722  0.9714  0.9704  0.9704  0.9704  0.9700  0.9700  0.9698  0.9696  0.9692  0.9682  0.9682  0.9666  0.9660  0.9649
2024-04-29 04:12:53 [INFO] [evolutionary_search.cc:727] Got 64 candidate(s) with evolutionary search
2024-04-29 04:12:53 [INFO] [evolutionary_search.cc:730] Sending 64 candidates(s) for measurement
2024-04-29 05:09:02 [INFO] [task_scheduler.cc:131] [Task #63: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_61] Trial #1: GFLOPs: 90.6303. Time: 2235.5722 us. Best GFLOPs: 90.6303
2024-04-29 05:09:02 [INFO] [task_scheduler.cc:131] [Task #63: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_61] Trial #2: GFLOPs: 14.1523. Time: 14316.4333 us. Best GFLOPs: 90.6303
2024-04-29 05:09:02 [INFO] [task_scheduler.cc:131] [Task #63: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_61] Trial #3: GFLOPs: 79.3332. Time: 2553.9205 us. Best GFLOPs: 90.6303
2024-04-29 05:09:02 [INFO] [task_scheduler.cc:131] [Task #63: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_61] Trial #4: GFLOPs: 92.0255. Time: 2201.6799 us. Best GFLOPs: 92.0255
2024-04-29 05:09:02 [INFO] [task_scheduler.cc:131] [Task #63: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_61] Trial #5: GFLOPs: 57.3169. Time: 3534.9194 us. Best GFLOPs: 92.0255
2024-04-29 05:09:02 [INFO] [task_scheduler.cc:131] [Task #63: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_61] Trial #6: GFLOPs: 51.9486. Time: 3900.2120 us. Best GFLOPs: 92.0255
2024-04-29 05:09:02 [INFO] [task_scheduler.cc:131] [Task #63: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_61] Trial #7: GFLOPs: 76.0102. Time: 2665.5721 us. Best GFLOPs: 92.0255
2024-04-29 05:09:02 [INFO] [task_scheduler.cc:131] [Task #63: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_61] Trial #8: GFLOPs: 9.3141. Time: 21753.0186 us. Best GFLOPs: 92.0255
2024-04-29 05:09:02 [INFO] [task_scheduler.cc:131] [Task #63: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_61] Trial #9: GFLOPs: 168.0103. Time: 1205.9418 us. Best GFLOPs: 168.0103
2024-04-29 05:09:02 [INFO] [task_scheduler.cc:131] [Task #63: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_61] Trial #10: GFLOPs: 125.2106. Time: 1618.1596 us. Best GFLOPs: 168.0103
2024-04-29 05:09:02 [INFO] [task_scheduler.cc:131] [Task #63: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_61] Trial #11: GFLOPs: 73.3924. Time: 2760.6482 us. Best GFLOPs: 168.0103
2024-04-29 05:09:02 [INFO] [task_scheduler.cc:131] [Task #63: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_61] Trial #12: GFLOPs: 88.4828. Time: 2289.8318 us. Best GFLOPs: 168.0103
2024-04-29 05:09:02 [INFO] [task_scheduler.cc:121] [Task #63: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_61] Trial #13: Error in building:
LocalBuilder: Timeout, killed after 30.0 seconds
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(168), T.int64(28), T.int64(28), T.int64(4)), "float32"), p1: T.Buffer((T.int64(48), T.int64(168), T.int64(1), T.int64(1), T.int64(4), T.int64(4)), "float32"), p2: T.Buffer((T.int64(1), T.int64(48), T.int64(1), T.int64(1), T.int64(4)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(48), T.int64(28), T.int64(28), T.int64(4)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        conv2d_NCHWc = T.alloc_buffer((T.int64(1), T.int64(48), T.int64(28), T.int64(28), T.int64(4)))
        for n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_fused in T.parallel(T.int64(16), annotations={"pragma_auto_unroll_max_step": 512, "pragma_unroll_explicit": 1}):
            for n_1, oc_chunk_1, oh_1, ow_1, oc_block_1 in T.grid(T.int64(1), T.int64(1), T.int64(2), T.int64(7), T.int64(1)):
                for n_2_init, oc_chunk_2_init, oh_2_init, ow_2_init, oc_block_2_init, n_3_init, oc_chunk_3_init, oh_3_init, ow_3_init, oc_block_3_init in T.grid(T.int64(1), T.int64(12), T.int64(1), T.int64(1), T.int64(2), T.int64(1), T.int64(2), T.int64(7), T.int64(2), T.int64(1)):
                    with T.block("conv2d_NCHWc_init"):
                        v_n = T.axis.spatial(T.int64(1), n_1 + n_2_init + n_3_init)
                        v_oc_chunk = T.axis.spatial(T.int64(48), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_fused // T.int64(8) * T.int64(24) + oc_chunk_1 * T.int64(24) + oc_chunk_2_init * T.int64(2) + oc_chunk_3_init)
                        v_oh = T.axis.spatial(T.int64(28), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_fused % T.int64(8) // T.int64(4) * T.int64(14) + oh_1 * T.int64(7) + oh_2_init * T.int64(7) + oh_3_init)
                        v_ow = T.axis.spatial(T.int64(28), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_fused % T.int64(4) // T.int64(2) * T.int64(14) + ow_1 * T.int64(2) + ow_2_init * T.int64(2) + ow_3_init)
                        v_oc_block = T.axis.spatial(T.int64(4), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_fused % T.int64(2) * T.int64(2) + oc_block_1 * T.int64(2) + oc_block_2_init + oc_block_3_init)
                        T.reads()
                        T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                        T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                        conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = T.float32(0)
                for ic_0, kh_0, kw_0, n_2, oc_chunk_2, oh_2, ow_2, oc_block_2, ic_1, kh_1, kw_1, n_3, oc_chunk_3, oh_3, ow_3, oc_block_3 in T.grid(T.int64(42), T.int64(1), T.int64(1), T.int64(1), T.int64(12), T.int64(1), T.int64(1), T.int64(2), T.int64(16), T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(7), T.int64(2), T.int64(1)):
                    with T.block("conv2d_NCHWc_update"):
                        v_n = T.axis.spatial(T.int64(1), n_1 + n_2 + n_3)
                        v_oc_chunk = T.axis.spatial(T.int64(48), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_fused // T.int64(8) * T.int64(24) + oc_chunk_1 * T.int64(24) + oc_chunk_2 * T.int64(2) + oc_chunk_3)
                        v_oh = T.axis.spatial(T.int64(28), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_fused % T.int64(8) // T.int64(4) * T.int64(14) + oh_1 * T.int64(7) + oh_2 * T.int64(7) + oh_3)
                        v_ow = T.axis.spatial(T.int64(28), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_fused % T.int64(4) // T.int64(2) * T.int64(14) + ow_1 * T.int64(2) + ow_2 * T.int64(2) + ow_3)
                        v_oc_block = T.axis.spatial(T.int64(4), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_fused % T.int64(2) * T.int64(2) + oc_block_1 * T.int64(2) + oc_block_2 + oc_block_3)
                        v_ic = T.axis.reduce(T.int64(672), ic_0 * T.int64(16) + ic_1)
                        v_kh = T.axis.reduce(T.int64(1), kh_0 + kh_1)
                        v_kw = T.axis.reduce(T.int64(1), kw_0 + kw_1)
                        T.reads(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block], p0[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)], p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block])
                        T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                        T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                        conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] + p0[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)] * p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block]
            for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(24), T.int64(14), T.int64(14)):
                for ax4_fused in T.vectorized(T.int64(2)):
                    with T.block("T_relu"):
                        v_ax0 = T.axis.spatial(T.int64(1), ax0)
                        v_ax1 = T.axis.spatial(T.int64(48), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_fused // T.int64(8) * T.int64(24) + ax1)
                        v_ax2 = T.axis.spatial(T.int64(28), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_fused % T.int64(8) // T.int64(4) * T.int64(14) + ax2)
                        v_ax3 = T.axis.spatial(T.int64(28), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_fused % T.int64(4) // T.int64(2) * T.int64(14) + ax3)
                        v_ax4 = T.axis.spatial(T.int64(4), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_fused % T.int64(2) * T.int64(2) + ax4_fused)
                        T.reads(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4])
                        T.writes(T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                        T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.max(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] + p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4], T.float32(0))
b0 = sch.get_block(name="conv2d_NCHWc", func_name="main")
b1 = sch.get_block(name="T_add", func_name="main")
b2 = sch.get_block(name="root", func_name="main")
sch.compute_inline(block=b1)
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.tiling_structure", ann_val="SSRSRS")
l3, l4, l5, l6, l7, l8, l9, l10 = sch.get_loops(block=b0)
v11, v12, v13, v14 = sch.sample_perfect_tile(loop=l3, n=4, max_innermost_factor=64, decision=[1, 1, 1, 1])
l15, l16, l17, l18 = sch.split(loop=l3, factors=[v11, v12, v13, v14], preserve_unit_iters=True)
v19, v20, v21, v22 = sch.sample_perfect_tile(loop=l4, n=4, max_innermost_factor=64, decision=[2, 1, 12, 2])
l23, l24, l25, l26 = sch.split(loop=l4, factors=[v19, v20, v21, v22], preserve_unit_iters=True)
v27, v28, v29, v30 = sch.sample_perfect_tile(loop=l5, n=4, max_innermost_factor=64, decision=[2, 2, 1, 7])
l31, l32, l33, l34 = sch.split(loop=l5, factors=[v27, v28, v29, v30], preserve_unit_iters=True)
v35, v36, v37, v38 = sch.sample_perfect_tile(loop=l6, n=4, max_innermost_factor=64, decision=[2, 7, 1, 2])
l39, l40, l41, l42 = sch.split(loop=l6, factors=[v35, v36, v37, v38], preserve_unit_iters=True)
v43, v44, v45, v46 = sch.sample_perfect_tile(loop=l7, n=4, max_innermost_factor=64, decision=[2, 1, 2, 1])
l47, l48, l49, l50 = sch.split(loop=l7, factors=[v43, v44, v45, v46], preserve_unit_iters=True)
v51, v52 = sch.sample_perfect_tile(loop=l8, n=2, max_innermost_factor=64, decision=[42, 16])
l53, l54 = sch.split(loop=l8, factors=[v51, v52], preserve_unit_iters=True)
v55, v56 = sch.sample_perfect_tile(loop=l9, n=2, max_innermost_factor=64, decision=[1, 1])
l57, l58 = sch.split(loop=l9, factors=[v55, v56], preserve_unit_iters=True)
v59, v60 = sch.sample_perfect_tile(loop=l10, n=2, max_innermost_factor=64, decision=[1, 1])
l61, l62 = sch.split(loop=l10, factors=[v59, v60], preserve_unit_iters=True)
sch.reorder(l15, l23, l31, l39, l47, l16, l24, l32, l40, l48, l53, l57, l61, l17, l25, l33, l41, l49, l54, l58, l62, l18, l26, l34, l42, l50)
b63, = sch.get_consumers(block=b0)
sch.reverse_compute_at(block=b63, loop=l47, preserve_unit_loops=True, index=-1)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.vectorize", ann_val=64)
v64 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.unroll_explicit", ann_val=v64)
sch.enter_postproc()
b65 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b65, ann_key="meta_schedule.parallel")
sch.unannotate(block_or_loop=b65, ann_key="meta_schedule.vectorize")
sch.unannotate(block_or_loop=b65, ann_key="meta_schedule.unroll_explicit")
b66, b67 = sch.get_child_blocks(b65)
l68, l69, l70, l71, l72, l73, l74, l75, l76, l77, l78, l79, l80, l81, l82, l83, l84, l85, l86, l87, l88, l89, l90, l91, l92, l93 = sch.get_loops(block=b66)
l94 = sch.fuse(l68, l69, l70, l71, l72, preserve_unit_iters=True)
sch.parallel(loop=l94)
sch.annotate(block_or_loop=l94, ann_key="pragma_auto_unroll_max_step", ann_val=512)
sch.annotate(block_or_loop=l94, ann_key="pragma_unroll_explicit", ann_val=1)
l95, l96, l97, l98, l99, l100 = sch.get_loops(block=b67)
l101 = sch.fuse(l100, preserve_unit_iters=True)
sch.vectorize(loop=l101)
b102 = sch.get_block(name="conv2d_NCHWc", func_name="main")
l103, l104, l105, l106, l107, l108, l109, l110, l111, l112, l113, l114, l115, l116, l117, l118, l119, l120, l121, l122, l123, l124 = sch.get_loops(block=b102)
b125 = sch.decompose_reduction(block=b102, loop=l109)
2024-04-29 05:09:02 [INFO] [task_scheduler.cc:131] [Task #63: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_61] Trial #14: GFLOPs: 31.8980. Time: 6351.8385 us. Best GFLOPs: 168.0103
2024-04-29 05:09:02 [INFO] [task_scheduler.cc:131] [Task #63: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_61] Trial #15: GFLOPs: 67.1340. Time: 3018.0025 us. Best GFLOPs: 168.0103
2024-04-29 05:09:02 [INFO] [task_scheduler.cc:131] [Task #63: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_61] Trial #16: GFLOPs: 71.2209. Time: 2844.8188 us. Best GFLOPs: 168.0103
2024-04-29 05:09:02 [INFO] [task_scheduler.cc:131] [Task #63: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_61] Trial #17: GFLOPs: 88.5589. Time: 2287.8636 us. Best GFLOPs: 168.0103
2024-04-29 05:09:02 [INFO] [task_scheduler.cc:131] [Task #63: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_61] Trial #18: GFLOPs: 86.5132. Time: 2341.9639 us. Best GFLOPs: 168.0103
2024-04-29 05:09:02 [INFO] [task_scheduler.cc:131] [Task #63: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_61] Trial #19: GFLOPs: 144.1746. Time: 1405.3149 us. Best GFLOPs: 168.0103
2024-04-29 05:09:02 [INFO] [task_scheduler.cc:131] [Task #63: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_61] Trial #20: GFLOPs: 11.5590. Time: 17528.3548 us. Best GFLOPs: 168.0103
2024-04-29 05:09:02 [INFO] [task_scheduler.cc:131] [Task #63: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_61] Trial #21: GFLOPs: 10.0235. Time: 20213.4842 us. Best GFLOPs: 168.0103
2024-04-29 05:09:02 [INFO] [task_scheduler.cc:131] [Task #63: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_61] Trial #22: GFLOPs: 9.7490. Time: 20782.7214 us. Best GFLOPs: 168.0103
2024-04-29 05:09:02 [INFO] [task_scheduler.cc:131] [Task #63: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_61] Trial #23: GFLOPs: 44.1972. Time: 4584.2436 us. Best GFLOPs: 168.0103
2024-04-29 05:09:02 [INFO] [task_scheduler.cc:131] [Task #63: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_61] Trial #24: GFLOPs: 58.2176. Time: 3480.2300 us. Best GFLOPs: 168.0103
2024-04-29 05:09:02 [INFO] [task_scheduler.cc:131] [Task #63: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_61] Trial #25: GFLOPs: 8.4123. Time: 24085.0622 us. Best GFLOPs: 168.0103
2024-04-29 05:09:02 [INFO] [task_scheduler.cc:131] [Task #63: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_61] Trial #26: GFLOPs: 67.7123. Time: 2992.2296 us. Best GFLOPs: 168.0103
2024-04-29 05:09:02 [INFO] [task_scheduler.cc:131] [Task #63: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_61] Trial #27: GFLOPs: 82.0599. Time: 2469.0596 us. Best GFLOPs: 168.0103
2024-04-29 05:09:02 [INFO] [task_scheduler.cc:131] [Task #63: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_61] Trial #28: GFLOPs: 71.0628. Time: 2851.1499 us. Best GFLOPs: 168.0103
2024-04-29 05:09:02 [INFO] [task_scheduler.cc:131] [Task #63: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_61] Trial #29: GFLOPs: 44.5489. Time: 4548.0510 us. Best GFLOPs: 168.0103
2024-04-29 05:09:02 [INFO] [task_scheduler.cc:131] [Task #63: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_61] Trial #30: GFLOPs: 80.1622. Time: 2527.5078 us. Best GFLOPs: 168.0103
2024-04-29 05:09:02 [INFO] [task_scheduler.cc:131] [Task #63: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_61] Trial #31: GFLOPs: 11.4524. Time: 17691.5363 us. Best GFLOPs: 168.0103
2024-04-29 05:09:02 [INFO] [task_scheduler.cc:131] [Task #63: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_61] Trial #32: GFLOPs: 40.6246. Time: 4987.3869 us. Best GFLOPs: 168.0103
2024-04-29 05:09:02 [INFO] [task_scheduler.cc:131] [Task #63: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_61] Trial #33: GFLOPs: 141.2847. Time: 1434.0601 us. Best GFLOPs: 168.0103
2024-04-29 05:09:02 [INFO] [task_scheduler.cc:131] [Task #63: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_61] Trial #34: GFLOPs: 60.9498. Time: 3324.2230 us. Best GFLOPs: 168.0103
2024-04-29 05:09:02 [INFO] [task_scheduler.cc:131] [Task #63: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_61] Trial #35: GFLOPs: 1.5896. Time: 127457.6100 us. Best GFLOPs: 168.0103
2024-04-29 05:09:02 [INFO] [task_scheduler.cc:121] [Task #63: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_61] Trial #36: Error in building:
LocalBuilder: Timeout, killed after 30.0 seconds
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(168), T.int64(28), T.int64(28), T.int64(4)), "float32"), p1: T.Buffer((T.int64(48), T.int64(168), T.int64(1), T.int64(1), T.int64(4), T.int64(4)), "float32"), p2: T.Buffer((T.int64(1), T.int64(48), T.int64(1), T.int64(1), T.int64(4)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(48), T.int64(28), T.int64(28), T.int64(4)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        conv2d_NCHWc = T.alloc_buffer((T.int64(1), T.int64(48), T.int64(28), T.int64(28), T.int64(4)))
        for n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_fused in T.parallel(T.int64(32), annotations={"pragma_auto_unroll_max_step": 512, "pragma_unroll_explicit": 1}):
            for n_1, oc_chunk_1, oh_1, ow_1, oc_block_1 in T.grid(T.int64(1), T.int64(6), T.int64(1), T.int64(4), T.int64(1)):
                for n_2_init, oc_chunk_2_init, oh_2_init, ow_2_init, oc_block_2_init, n_3_init, oc_chunk_3_init, oh_3_init, ow_3_init, oc_block_3_init in T.grid(T.int64(1), T.int64(2), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(14), T.int64(7), T.int64(1)):
                    with T.block("conv2d_NCHWc_init"):
                        v_n = T.axis.spatial(T.int64(1), n_1 + n_2_init + n_3_init)
                        v_oc_chunk = T.axis.spatial(T.int64(48), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_fused // T.int64(8) * T.int64(12) + oc_chunk_1 * T.int64(2) + oc_chunk_2_init + oc_chunk_3_init)
                        v_oh = T.axis.spatial(T.int64(28), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_fused % T.int64(8) // T.int64(4) * T.int64(14) + oh_1 * T.int64(14) + oh_2_init * T.int64(14) + oh_3_init)
                        v_ow = T.axis.spatial(T.int64(28), ow_1 * T.int64(7) + ow_2_init * T.int64(7) + ow_3_init)
                        v_oc_block = T.axis.spatial(T.int64(4), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_fused % T.int64(4) + oc_block_1 + oc_block_2_init + oc_block_3_init)
                        T.reads()
                        T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                        T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                        conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = T.float32(0)
                for ic_0, kh_0, kw_0, n_2, oc_chunk_2, oh_2, ow_2, oc_block_2, ic_1, kh_1, kw_1, n_3, oc_chunk_3, oh_3, ow_3, oc_block_3 in T.grid(T.int64(672), T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(14), T.int64(7), T.int64(1)):
                    with T.block("conv2d_NCHWc_update"):
                        v_n = T.axis.spatial(T.int64(1), n_1 + n_2 + n_3)
                        v_oc_chunk = T.axis.spatial(T.int64(48), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_fused // T.int64(8) * T.int64(12) + oc_chunk_1 * T.int64(2) + oc_chunk_2 + oc_chunk_3)
                        v_oh = T.axis.spatial(T.int64(28), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_fused % T.int64(8) // T.int64(4) * T.int64(14) + oh_1 * T.int64(14) + oh_2 * T.int64(14) + oh_3)
                        v_ow = T.axis.spatial(T.int64(28), ow_1 * T.int64(7) + ow_2 * T.int64(7) + ow_3)
                        v_oc_block = T.axis.spatial(T.int64(4), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_fused % T.int64(4) + oc_block_1 + oc_block_2 + oc_block_3)
                        v_ic = T.axis.reduce(T.int64(672), ic_0 + ic_1)
                        v_kh = T.axis.reduce(T.int64(1), kh_0 + kh_1)
                        v_kw = T.axis.reduce(T.int64(1), kw_0 + kw_1)
                        T.reads(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block], p0[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)], p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block])
                        T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                        T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                        conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] + p0[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)] * p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block]
            for ax0, ax1, ax2, ax3, ax4 in T.grid(T.int64(1), T.int64(12), T.int64(14), T.int64(28), T.int64(1)):
                with T.block("T_relu"):
                    v_ax0 = T.axis.spatial(T.int64(1), ax0)
                    v_ax1 = T.axis.spatial(T.int64(48), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_fused // T.int64(8) * T.int64(12) + ax1)
                    v_ax2 = T.axis.spatial(T.int64(28), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_fused % T.int64(8) // T.int64(4) * T.int64(14) + ax2)
                    v_ax3 = T.axis.spatial(T.int64(28), ax3)
                    v_ax4 = T.axis.spatial(T.int64(4), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_fused % T.int64(4) + ax4)
                    T.reads(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4])
                    T.writes(T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                    T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.max(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] + p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4], T.float32(0))
b0 = sch.get_block(name="conv2d_NCHWc", func_name="main")
b1 = sch.get_block(name="T_add", func_name="main")
b2 = sch.get_block(name="root", func_name="main")
sch.compute_inline(block=b1)
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.tiling_structure", ann_val="SSRSRS")
l3, l4, l5, l6, l7, l8, l9, l10 = sch.get_loops(block=b0)
v11, v12, v13, v14 = sch.sample_perfect_tile(loop=l3, n=4, max_innermost_factor=64, decision=[1, 1, 1, 1])
l15, l16, l17, l18 = sch.split(loop=l3, factors=[v11, v12, v13, v14], preserve_unit_iters=True)
v19, v20, v21, v22 = sch.sample_perfect_tile(loop=l4, n=4, max_innermost_factor=64, decision=[4, 6, 2, 1])
l23, l24, l25, l26 = sch.split(loop=l4, factors=[v19, v20, v21, v22], preserve_unit_iters=True)
v27, v28, v29, v30 = sch.sample_perfect_tile(loop=l5, n=4, max_innermost_factor=64, decision=[2, 1, 1, 14])
l31, l32, l33, l34 = sch.split(loop=l5, factors=[v27, v28, v29, v30], preserve_unit_iters=True)
v35, v36, v37, v38 = sch.sample_perfect_tile(loop=l6, n=4, max_innermost_factor=64, decision=[1, 4, 1, 7])
l39, l40, l41, l42 = sch.split(loop=l6, factors=[v35, v36, v37, v38], preserve_unit_iters=True)
v43, v44, v45, v46 = sch.sample_perfect_tile(loop=l7, n=4, max_innermost_factor=64, decision=[4, 1, 1, 1])
l47, l48, l49, l50 = sch.split(loop=l7, factors=[v43, v44, v45, v46], preserve_unit_iters=True)
v51, v52 = sch.sample_perfect_tile(loop=l8, n=2, max_innermost_factor=64, decision=[672, 1])
l53, l54 = sch.split(loop=l8, factors=[v51, v52], preserve_unit_iters=True)
v55, v56 = sch.sample_perfect_tile(loop=l9, n=2, max_innermost_factor=64, decision=[1, 1])
l57, l58 = sch.split(loop=l9, factors=[v55, v56], preserve_unit_iters=True)
v59, v60 = sch.sample_perfect_tile(loop=l10, n=2, max_innermost_factor=64, decision=[1, 1])
l61, l62 = sch.split(loop=l10, factors=[v59, v60], preserve_unit_iters=True)
sch.reorder(l15, l23, l31, l39, l47, l16, l24, l32, l40, l48, l53, l57, l61, l17, l25, l33, l41, l49, l54, l58, l62, l18, l26, l34, l42, l50)
b63, = sch.get_consumers(block=b0)
sch.reverse_compute_at(block=b63, loop=l47, preserve_unit_loops=True, index=-1)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.vectorize", ann_val=64)
v64 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.unroll_explicit", ann_val=v64)
sch.enter_postproc()
b65 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b65, ann_key="meta_schedule.parallel")
sch.unannotate(block_or_loop=b65, ann_key="meta_schedule.vectorize")
sch.unannotate(block_or_loop=b65, ann_key="meta_schedule.unroll_explicit")
b66, b67 = sch.get_child_blocks(b65)
l68, l69, l70, l71, l72, l73, l74, l75, l76, l77, l78, l79, l80, l81, l82, l83, l84, l85, l86, l87, l88, l89, l90, l91, l92, l93 = sch.get_loops(block=b66)
l94 = sch.fuse(l68, l69, l70, l71, l72, preserve_unit_iters=True)
sch.parallel(loop=l94)
sch.annotate(block_or_loop=l94, ann_key="pragma_auto_unroll_max_step", ann_val=512)
sch.annotate(block_or_loop=l94, ann_key="pragma_unroll_explicit", ann_val=1)
l95, l96, l97, l98, l99, l100 = sch.get_loops(block=b67)
b101 = sch.get_block(name="conv2d_NCHWc", func_name="main")
l102, l103, l104, l105, l106, l107, l108, l109, l110, l111, l112, l113, l114, l115, l116, l117, l118, l119, l120, l121, l122, l123 = sch.get_loops(block=b101)
b124 = sch.decompose_reduction(block=b101, loop=l108)
2024-04-29 05:09:02 [INFO] [task_scheduler.cc:121] [Task #63: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_61] Trial #37: Error in building:
LocalBuilder: Timeout, killed after 30.0 seconds
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(168), T.int64(28), T.int64(28), T.int64(4)), "float32"), p1: T.Buffer((T.int64(48), T.int64(168), T.int64(1), T.int64(1), T.int64(4), T.int64(4)), "float32"), p2: T.Buffer((T.int64(1), T.int64(48), T.int64(1), T.int64(1), T.int64(4)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(48), T.int64(28), T.int64(28), T.int64(4)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        conv2d_NCHWc = T.alloc_buffer((T.int64(1), T.int64(48), T.int64(28), T.int64(28), T.int64(4)))
        for n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused in T.parallel(T.int64(28), annotations={"pragma_auto_unroll_max_step": 512, "pragma_unroll_explicit": 1}):
            for n_2_init, oc_chunk_2_init, oh_2_init, ow_2_init, oc_block_2_init, n_3_init, oc_chunk_3_init, oh_3_init, ow_3_init, oc_block_3_init in T.grid(T.int64(1), T.int64(16), T.int64(14), T.int64(2), T.int64(2), T.int64(1), T.int64(3), T.int64(2), T.int64(1), T.int64(1)):
                with T.block("conv2d_NCHWc_init"):
                    v_n = T.axis.spatial(T.int64(1), n_2_init + n_3_init)
                    v_oc_chunk = T.axis.spatial(T.int64(48), oc_chunk_2_init * T.int64(3) + oc_chunk_3_init)
                    v_oh = T.axis.spatial(T.int64(28), oh_2_init * T.int64(2) + oh_3_init)
                    v_ow = T.axis.spatial(T.int64(28), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused // T.int64(4) * T.int64(4) + n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused % T.int64(2) * T.int64(2) + ow_2_init + ow_3_init)
                    v_oc_block = T.axis.spatial(T.int64(4), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused % T.int64(4) // T.int64(2) * T.int64(2) + oc_block_2_init + oc_block_3_init)
                    T.reads()
                    T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                    T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                    conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = T.float32(0)
            for ic_0, kh_0, kw_0, n_2, oc_chunk_2, oh_2, ow_2, oc_block_2, ic_1, kh_1, kw_1, n_3, oc_chunk_3, oh_3, ow_3, oc_block_3 in T.grid(T.int64(16), T.int64(1), T.int64(1), T.int64(1), T.int64(16), T.int64(14), T.int64(2), T.int64(2), T.int64(42), T.int64(1), T.int64(1), T.int64(1), T.int64(3), T.int64(2), T.int64(1), T.int64(1)):
                with T.block("conv2d_NCHWc_update"):
                    v_n = T.axis.spatial(T.int64(1), n_2 + n_3)
                    v_oc_chunk = T.axis.spatial(T.int64(48), oc_chunk_2 * T.int64(3) + oc_chunk_3)
                    v_oh = T.axis.spatial(T.int64(28), oh_2 * T.int64(2) + oh_3)
                    v_ow = T.axis.spatial(T.int64(28), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused // T.int64(4) * T.int64(4) + n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused % T.int64(2) * T.int64(2) + ow_2 + ow_3)
                    v_oc_block = T.axis.spatial(T.int64(4), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused % T.int64(4) // T.int64(2) * T.int64(2) + oc_block_2 + oc_block_3)
                    v_ic = T.axis.reduce(T.int64(672), ic_0 * T.int64(42) + ic_1)
                    v_kh = T.axis.reduce(T.int64(1), kh_0 + kh_1)
                    v_kw = T.axis.reduce(T.int64(1), kw_0 + kw_1)
                    T.reads(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block], p0[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)], p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block])
                    T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                    T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                    conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] + p0[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)] * p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block]
            for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(48), T.int64(28), T.int64(2)):
                for ax4_fused in T.vectorized(T.int64(2)):
                    with T.block("T_relu"):
                        v_ax0, v_ax1, v_ax2 = T.axis.remap("SSS", [ax0, ax1, ax2])
                        v_ax3 = T.axis.spatial(T.int64(28), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused // T.int64(4) * T.int64(4) + n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused % T.int64(2) * T.int64(2) + ax3)
                        v_ax4 = T.axis.spatial(T.int64(4), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused % T.int64(4) // T.int64(2) * T.int64(2) + ax4_fused)
                        T.reads(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4])
                        T.writes(T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                        T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.max(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] + p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4], T.float32(0))
b0 = sch.get_block(name="conv2d_NCHWc", func_name="main")
b1 = sch.get_block(name="T_add", func_name="main")
b2 = sch.get_block(name="root", func_name="main")
sch.compute_inline(block=b1)
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.tiling_structure", ann_val="SSRSRS")
l3, l4, l5, l6, l7, l8, l9, l10 = sch.get_loops(block=b0)
v11, v12, v13, v14 = sch.sample_perfect_tile(loop=l3, n=4, max_innermost_factor=64, decision=[1, 1, 1, 1])
l15, l16, l17, l18 = sch.split(loop=l3, factors=[v11, v12, v13, v14], preserve_unit_iters=True)
v19, v20, v21, v22 = sch.sample_perfect_tile(loop=l4, n=4, max_innermost_factor=64, decision=[1, 1, 16, 3])
l23, l24, l25, l26 = sch.split(loop=l4, factors=[v19, v20, v21, v22], preserve_unit_iters=True)
v27, v28, v29, v30 = sch.sample_perfect_tile(loop=l5, n=4, max_innermost_factor=64, decision=[1, 1, 14, 2])
l31, l32, l33, l34 = sch.split(loop=l5, factors=[v27, v28, v29, v30], preserve_unit_iters=True)
v35, v36, v37, v38 = sch.sample_perfect_tile(loop=l6, n=4, max_innermost_factor=64, decision=[7, 2, 2, 1])
l39, l40, l41, l42 = sch.split(loop=l6, factors=[v35, v36, v37, v38], preserve_unit_iters=True)
v43, v44, v45, v46 = sch.sample_perfect_tile(loop=l7, n=4, max_innermost_factor=64, decision=[2, 1, 2, 1])
l47, l48, l49, l50 = sch.split(loop=l7, factors=[v43, v44, v45, v46], preserve_unit_iters=True)
v51, v52 = sch.sample_perfect_tile(loop=l8, n=2, max_innermost_factor=64, decision=[16, 42])
l53, l54 = sch.split(loop=l8, factors=[v51, v52], preserve_unit_iters=True)
v55, v56 = sch.sample_perfect_tile(loop=l9, n=2, max_innermost_factor=64, decision=[1, 1])
l57, l58 = sch.split(loop=l9, factors=[v55, v56], preserve_unit_iters=True)
v59, v60 = sch.sample_perfect_tile(loop=l10, n=2, max_innermost_factor=64, decision=[1, 1])
l61, l62 = sch.split(loop=l10, factors=[v59, v60], preserve_unit_iters=True)
sch.reorder(l15, l23, l31, l39, l47, l16, l24, l32, l40, l48, l53, l57, l61, l17, l25, l33, l41, l49, l54, l58, l62, l18, l26, l34, l42, l50)
b63, = sch.get_consumers(block=b0)
sch.reverse_compute_at(block=b63, loop=l48, preserve_unit_loops=True, index=-1)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.vectorize", ann_val=64)
v64 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.unroll_explicit", ann_val=v64)
sch.enter_postproc()
b65 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b65, ann_key="meta_schedule.parallel")
sch.unannotate(block_or_loop=b65, ann_key="meta_schedule.vectorize")
sch.unannotate(block_or_loop=b65, ann_key="meta_schedule.unroll_explicit")
b66, b67 = sch.get_child_blocks(b65)
l68, l69, l70, l71, l72, l73, l74, l75, l76, l77, l78, l79, l80, l81, l82, l83, l84, l85, l86, l87, l88, l89, l90, l91, l92, l93 = sch.get_loops(block=b66)
l94 = sch.fuse(l68, l69, l70, l71, l72, l73, l74, l75, l76, l77, preserve_unit_iters=True)
sch.parallel(loop=l94)
sch.annotate(block_or_loop=l94, ann_key="pragma_auto_unroll_max_step", ann_val=512)
sch.annotate(block_or_loop=l94, ann_key="pragma_unroll_explicit", ann_val=1)
l95, l96, l97, l98, l99, l100 = sch.get_loops(block=b67)
l101 = sch.fuse(l100, preserve_unit_iters=True)
sch.vectorize(loop=l101)
b102 = sch.get_block(name="conv2d_NCHWc", func_name="main")
l103, l104, l105, l106, l107, l108, l109, l110, l111, l112, l113, l114, l115, l116, l117, l118, l119 = sch.get_loops(block=b102)
b120 = sch.decompose_reduction(block=b102, loop=l104)
2024-04-29 05:09:02 [INFO] [task_scheduler.cc:131] [Task #63: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_61] Trial #38: GFLOPs: 87.0330. Time: 2327.9752 us. Best GFLOPs: 168.0103
2024-04-29 05:09:02 [INFO] [task_scheduler.cc:131] [Task #63: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_61] Trial #39: GFLOPs: 20.8488. Time: 9718.1124 us. Best GFLOPs: 168.0103
2024-04-29 05:09:02 [INFO] [task_scheduler.cc:131] [Task #63: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_61] Trial #40: GFLOPs: 4.0955. Time: 49471.8870 us. Best GFLOPs: 168.0103
2024-04-29 05:09:02 [INFO] [task_scheduler.cc:131] [Task #63: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_61] Trial #41: GFLOPs: 61.1760. Time: 3311.9334 us. Best GFLOPs: 168.0103
2024-04-29 05:09:02 [INFO] [task_scheduler.cc:131] [Task #63: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_61] Trial #42: GFLOPs: 86.4600. Time: 2343.4051 us. Best GFLOPs: 168.0103
2024-04-29 05:09:02 [INFO] [task_scheduler.cc:131] [Task #63: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_61] Trial #43: GFLOPs: 31.3328. Time: 6466.4059 us. Best GFLOPs: 168.0103
2024-04-29 05:09:02 [INFO] [task_scheduler.cc:131] [Task #63: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_61] Trial #44: GFLOPs: 55.3854. Time: 3658.1948 us. Best GFLOPs: 168.0103
2024-04-29 05:09:02 [INFO] [task_scheduler.cc:131] [Task #63: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_61] Trial #45: GFLOPs: 46.0788. Time: 4397.0470 us. Best GFLOPs: 168.0103
2024-04-29 05:09:02 [INFO] [task_scheduler.cc:131] [Task #63: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_61] Trial #46: GFLOPs: 4.3523. Time: 46552.9437 us. Best GFLOPs: 168.0103
2024-04-29 05:09:02 [INFO] [task_scheduler.cc:131] [Task #63: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_61] Trial #47: GFLOPs: 67.2666. Time: 3012.0569 us. Best GFLOPs: 168.0103
2024-04-29 05:09:02 [INFO] [task_scheduler.cc:131] [Task #63: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_61] Trial #48: GFLOPs: 48.5774. Time: 4170.8800 us. Best GFLOPs: 168.0103
2024-04-29 05:09:02 [INFO] [task_scheduler.cc:131] [Task #63: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_61] Trial #49: GFLOPs: 155.9540. Time: 1299.1695 us. Best GFLOPs: 168.0103
2024-04-29 05:09:02 [INFO] [task_scheduler.cc:131] [Task #63: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_61] Trial #50: GFLOPs: 54.4554. Time: 3720.6710 us. Best GFLOPs: 168.0103
2024-04-29 05:09:02 [INFO] [task_scheduler.cc:131] [Task #63: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_61] Trial #51: GFLOPs: 165.1822. Time: 1226.5894 us. Best GFLOPs: 168.0103
2024-04-29 05:09:02 [INFO] [task_scheduler.cc:131] [Task #63: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_61] Trial #52: GFLOPs: 189.2412. Time: 1070.6477 us. Best GFLOPs: 189.2412
2024-04-29 05:09:02 [INFO] [task_scheduler.cc:131] [Task #63: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_61] Trial #53: GFLOPs: 45.1008. Time: 4492.3966 us. Best GFLOPs: 189.2412
2024-04-29 05:09:02 [INFO] [task_scheduler.cc:131] [Task #63: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_61] Trial #54: GFLOPs: 16.4776. Time: 12296.1332 us. Best GFLOPs: 189.2412
2024-04-29 05:09:02 [INFO] [task_scheduler.cc:121] [Task #63: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_61] Trial #55: Error in building:
LocalBuilder: Timeout, killed after 30.0 seconds
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(168), T.int64(28), T.int64(28), T.int64(4)), "float32"), p1: T.Buffer((T.int64(48), T.int64(168), T.int64(1), T.int64(1), T.int64(4), T.int64(4)), "float32"), p2: T.Buffer((T.int64(1), T.int64(48), T.int64(1), T.int64(1), T.int64(4)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(48), T.int64(28), T.int64(28), T.int64(4)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        conv2d_NCHWc = T.alloc_buffer((T.int64(1), T.int64(48), T.int64(28), T.int64(28), T.int64(4)))
        for n_0 in T.serial(T.int64(1), annotations={"pragma_auto_unroll_max_step": 512, "pragma_unroll_explicit": 1}):
            for oc_chunk_0, oh_0, ow_0, oc_block_0 in T.grid(T.int64(1), T.int64(1), T.int64(1), T.int64(1)):
                for n_1, oc_chunk_1, oh_1, ow_1, oc_block_1 in T.grid(T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(2)):
                    for n_2_init, oc_chunk_2_init, oh_2_init, ow_2_init, oc_block_2_init, n_3_init, oc_chunk_3_init, oh_3_init, ow_3_init, oc_block_3_init in T.grid(T.int64(1), T.int64(24), T.int64(1), T.int64(1), T.int64(2), T.int64(1), T.int64(2), T.int64(28), T.int64(14), T.int64(1)):
                        with T.block("conv2d_NCHWc_init"):
                            v_n = T.axis.spatial(T.int64(1), n_0 + n_1 + n_2_init + n_3_init)
                            v_oc_chunk = T.axis.spatial(T.int64(48), oc_chunk_0 * T.int64(48) + oc_chunk_1 * T.int64(48) + oc_chunk_2_init * T.int64(2) + oc_chunk_3_init)
                            v_oh = T.axis.spatial(T.int64(28), oh_0 * T.int64(28) + oh_1 * T.int64(28) + oh_2_init * T.int64(28) + oh_3_init)
                            v_ow = T.axis.spatial(T.int64(28), ow_0 * T.int64(28) + ow_1 * T.int64(14) + ow_2_init * T.int64(14) + ow_3_init)
                            v_oc_block = T.axis.spatial(T.int64(4), oc_block_0 * T.int64(4) + oc_block_1 * T.int64(2) + oc_block_2_init + oc_block_3_init)
                            T.reads()
                            T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                            T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                            conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = T.float32(0)
                    for ic_0, kh_0, kw_0, n_2, oc_chunk_2, oh_2, ow_2, oc_block_2, ic_1, kh_1, kw_1, n_3, oc_chunk_3, oh_3, ow_3, oc_block_3 in T.grid(T.int64(336), T.int64(1), T.int64(1), T.int64(1), T.int64(24), T.int64(1), T.int64(1), T.int64(2), T.int64(2), T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(28), T.int64(14), T.int64(1)):
                        with T.block("conv2d_NCHWc_update"):
                            v_n = T.axis.spatial(T.int64(1), n_0 + n_1 + n_2 + n_3)
                            v_oc_chunk = T.axis.spatial(T.int64(48), oc_chunk_0 * T.int64(48) + oc_chunk_1 * T.int64(48) + oc_chunk_2 * T.int64(2) + oc_chunk_3)
                            v_oh = T.axis.spatial(T.int64(28), oh_0 * T.int64(28) + oh_1 * T.int64(28) + oh_2 * T.int64(28) + oh_3)
                            v_ow = T.axis.spatial(T.int64(28), ow_0 * T.int64(28) + ow_1 * T.int64(14) + ow_2 * T.int64(14) + ow_3)
                            v_oc_block = T.axis.spatial(T.int64(4), oc_block_0 * T.int64(4) + oc_block_1 * T.int64(2) + oc_block_2 + oc_block_3)
                            v_ic = T.axis.reduce(T.int64(672), ic_0 * T.int64(2) + ic_1)
                            v_kh = T.axis.reduce(T.int64(1), kh_0 + kh_1)
                            v_kw = T.axis.reduce(T.int64(1), kw_0 + kw_1)
                            T.reads(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block], p0[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)], p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block])
                            T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                            T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                            conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] + p0[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)] * p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block]
                for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(48), T.int64(28), T.int64(28)):
                    for ax4_fused in T.vectorized(T.int64(4)):
                        with T.block("T_relu"):
                            v_ax0, v_ax1, v_ax2, v_ax3, v_ax4 = T.axis.remap("SSSSS", [ax0, ax1, ax2, ax3, ax4_fused])
                            T.reads(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4])
                            T.writes(T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                            T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.max(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] + p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4], T.float32(0))
b0 = sch.get_block(name="conv2d_NCHWc", func_name="main")
b1 = sch.get_block(name="T_add", func_name="main")
b2 = sch.get_block(name="root", func_name="main")
sch.compute_inline(block=b1)
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.tiling_structure", ann_val="SSRSRS")
l3, l4, l5, l6, l7, l8, l9, l10 = sch.get_loops(block=b0)
v11, v12, v13, v14 = sch.sample_perfect_tile(loop=l3, n=4, max_innermost_factor=64, decision=[1, 1, 1, 1])
l15, l16, l17, l18 = sch.split(loop=l3, factors=[v11, v12, v13, v14], preserve_unit_iters=True)
v19, v20, v21, v22 = sch.sample_perfect_tile(loop=l4, n=4, max_innermost_factor=64, decision=[1, 1, 24, 2])
l23, l24, l25, l26 = sch.split(loop=l4, factors=[v19, v20, v21, v22], preserve_unit_iters=True)
v27, v28, v29, v30 = sch.sample_perfect_tile(loop=l5, n=4, max_innermost_factor=64, decision=[1, 1, 1, 28])
l31, l32, l33, l34 = sch.split(loop=l5, factors=[v27, v28, v29, v30], preserve_unit_iters=True)
v35, v36, v37, v38 = sch.sample_perfect_tile(loop=l6, n=4, max_innermost_factor=64, decision=[1, 2, 1, 14])
l39, l40, l41, l42 = sch.split(loop=l6, factors=[v35, v36, v37, v38], preserve_unit_iters=True)
v43, v44, v45, v46 = sch.sample_perfect_tile(loop=l7, n=4, max_innermost_factor=64, decision=[1, 2, 2, 1])
l47, l48, l49, l50 = sch.split(loop=l7, factors=[v43, v44, v45, v46], preserve_unit_iters=True)
v51, v52 = sch.sample_perfect_tile(loop=l8, n=2, max_innermost_factor=64, decision=[336, 2])
l53, l54 = sch.split(loop=l8, factors=[v51, v52], preserve_unit_iters=True)
v55, v56 = sch.sample_perfect_tile(loop=l9, n=2, max_innermost_factor=64, decision=[1, 1])
l57, l58 = sch.split(loop=l9, factors=[v55, v56], preserve_unit_iters=True)
v59, v60 = sch.sample_perfect_tile(loop=l10, n=2, max_innermost_factor=64, decision=[1, 1])
l61, l62 = sch.split(loop=l10, factors=[v59, v60], preserve_unit_iters=True)
sch.reorder(l15, l23, l31, l39, l47, l16, l24, l32, l40, l48, l53, l57, l61, l17, l25, l33, l41, l49, l54, l58, l62, l18, l26, l34, l42, l50)
b63, = sch.get_consumers(block=b0)
sch.reverse_compute_at(block=b63, loop=l47, preserve_unit_loops=True, index=-1)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.vectorize", ann_val=64)
v64 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.unroll_explicit", ann_val=v64)
sch.enter_postproc()
b65 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b65, ann_key="meta_schedule.parallel")
sch.unannotate(block_or_loop=b65, ann_key="meta_schedule.vectorize")
sch.unannotate(block_or_loop=b65, ann_key="meta_schedule.unroll_explicit")
b66, b67 = sch.get_child_blocks(b65)
l68, l69, l70, l71, l72, l73, l74, l75, l76, l77, l78, l79, l80, l81, l82, l83, l84, l85, l86, l87, l88, l89, l90, l91, l92, l93 = sch.get_loops(block=b66)
sch.annotate(block_or_loop=l68, ann_key="pragma_auto_unroll_max_step", ann_val=512)
sch.annotate(block_or_loop=l68, ann_key="pragma_unroll_explicit", ann_val=1)
l94, l95, l96, l97, l98, l99, l100, l101, l102, l103 = sch.get_loops(block=b67)
l104 = sch.fuse(l103, preserve_unit_iters=True)
sch.vectorize(loop=l104)
b105 = sch.get_block(name="conv2d_NCHWc", func_name="main")
l106, l107, l108, l109, l110, l111, l112, l113, l114, l115, l116, l117, l118, l119, l120, l121, l122, l123, l124, l125, l126, l127, l128, l129, l130, l131 = sch.get_loops(block=b105)
b132 = sch.decompose_reduction(block=b105, loop=l116)
2024-04-29 05:09:02 [INFO] [task_scheduler.cc:131] [Task #63: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_61] Trial #56: GFLOPs: 13.8544. Time: 14624.3363 us. Best GFLOPs: 189.2412
2024-04-29 05:09:02 [INFO] [task_scheduler.cc:131] [Task #63: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_61] Trial #57: GFLOPs: 68.9323. Time: 2939.2700 us. Best GFLOPs: 189.2412
2024-04-29 05:09:02 [INFO] [task_scheduler.cc:131] [Task #63: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_61] Trial #58: GFLOPs: 138.7258. Time: 1460.5114 us. Best GFLOPs: 189.2412
2024-04-29 05:09:02 [INFO] [task_scheduler.cc:131] [Task #63: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_61] Trial #59: GFLOPs: 11.3094. Time: 17915.2820 us. Best GFLOPs: 189.2412
2024-04-29 05:09:02 [INFO] [task_scheduler.cc:131] [Task #63: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_61] Trial #60: GFLOPs: 6.7980. Time: 29804.2952 us. Best GFLOPs: 189.2412
2024-04-29 05:09:02 [INFO] [task_scheduler.cc:131] [Task #63: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_61] Trial #61: GFLOPs: 101.8262. Time: 1989.7705 us. Best GFLOPs: 189.2412
2024-04-29 05:09:02 [INFO] [task_scheduler.cc:131] [Task #63: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_61] Trial #62: GFLOPs: 15.9529. Time: 12700.5307 us. Best GFLOPs: 189.2412
2024-04-29 05:09:02 [INFO] [task_scheduler.cc:131] [Task #63: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_61] Trial #63: GFLOPs: 49.7350. Time: 4073.8056 us. Best GFLOPs: 189.2412
2024-04-29 05:09:02 [INFO] [task_scheduler.cc:131] [Task #63: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_61] Trial #64: GFLOPs: 36.2112. Time: 5595.2466 us. Best GFLOPs: 189.2412
2024-04-29 06:20:54 [INFO] [evolutionary_search.cc:713] Generating candidates......
2024-04-29 06:20:55 [INFO] [evolutionary_search.cc:715] Picked top 60 candidate(s) from database
2024-04-29 06:20:57 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x8107148)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x7086ba8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0xd9f2af8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0xd2b0d98)]: 0 failure(s)
2024-04-29 06:20:57 [INFO] [evolutionary_search.cc:723] Sampled 452 candidate(s)
2024-04-29 06:21:02 [INFO] [evolutionary_search.cc:621] Evolve iter #0 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x8107148)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x7086ba8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0xd9f2af8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0xd2b0d98)]: 0 failure(s)
2024-04-29 06:21:08 [INFO] [evolutionary_search.cc:621] Evolve iter #1 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x8107148)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x7086ba8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0xd9f2af8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0xd2b0d98)]: 0 failure(s)
2024-04-29 06:21:13 [INFO] [evolutionary_search.cc:621] Evolve iter #2 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x8107148)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x7086ba8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0xd9f2af8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0xd2b0d98)]: 0 failure(s)
2024-04-29 06:21:19 [INFO] [evolutionary_search.cc:621] Evolve iter #3 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x8107148)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x7086ba8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0xd9f2af8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0xd2b0d98)]: 0 failure(s)
2024-04-29 06:21:22 [INFO] [evolutionary_search.cc:649] Scores of the best 64 candidates:
[1 : 16]:	0.9419  0.8872  0.8705  0.8705  0.8415  0.8377  0.8331  0.8278  0.8271  0.8228  0.7929  0.7926  0.7888  0.7839  0.7827  0.7758
[17 : 32]:	0.7730  0.7719  0.7686  0.7619  0.7619  0.7612  0.7588  0.7574  0.7525  0.7525  0.7516  0.7509  0.7500  0.7499  0.7467  0.7460
[33 : 48]:	0.7438  0.7340  0.7336  0.7329  0.7314  0.7290  0.7235  0.7230  0.7219  0.7207  0.7206  0.7187  0.7183  0.7176  0.7124  0.7119
[49 : 64]:	0.7088  0.7076  0.7074  0.7055  0.7049  0.7045  0.7023  0.7016  0.7004  0.7004  0.6984  0.6970  0.6940  0.6907  0.6902  0.6901
2024-04-29 06:21:22 [INFO] [evolutionary_search.cc:727] Got 64 candidate(s) with evolutionary search
2024-04-29 06:21:22 [INFO] [evolutionary_search.cc:730] Sending 64 candidates(s) for measurement
2024-04-29 06:22:49 [INFO] [task_scheduler.cc:131] [Task #63: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_61] Trial #65: GFLOPs: 188.0143. Time: 1077.6342 us. Best GFLOPs: 189.2412
2024-04-29 06:22:49 [INFO] [task_scheduler.cc:131] [Task #63: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_61] Trial #66: GFLOPs: 134.6702. Time: 1504.4956 us. Best GFLOPs: 189.2412
2024-04-29 06:22:49 [INFO] [task_scheduler.cc:131] [Task #63: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_61] Trial #67: GFLOPs: 146.1089. Time: 1386.7103 us. Best GFLOPs: 189.2412
2024-04-29 06:22:49 [INFO] [task_scheduler.cc:131] [Task #63: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_61] Trial #68: GFLOPs: 198.4770. Time: 1020.8273 us. Best GFLOPs: 198.4770
2024-04-29 06:22:49 [INFO] [task_scheduler.cc:131] [Task #63: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_61] Trial #69: GFLOPs: 170.6594. Time: 1187.2228 us. Best GFLOPs: 198.4770
2024-04-29 06:22:49 [INFO] [task_scheduler.cc:131] [Task #63: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_61] Trial #70: GFLOPs: 81.7504. Time: 2478.4062 us. Best GFLOPs: 198.4770
2024-04-29 06:22:49 [INFO] [task_scheduler.cc:131] [Task #63: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_61] Trial #71: GFLOPs: 172.4053. Time: 1175.1999 us. Best GFLOPs: 198.4770
2024-04-29 06:22:49 [INFO] [task_scheduler.cc:131] [Task #63: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_61] Trial #72: GFLOPs: 242.9791. Time: 833.8606 us. Best GFLOPs: 242.9791
2024-04-29 06:22:49 [INFO] [task_scheduler.cc:131] [Task #63: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_61] Trial #73: GFLOPs: 128.4619. Time: 1577.2040 us. Best GFLOPs: 242.9791
2024-04-29 06:22:49 [INFO] [task_scheduler.cc:131] [Task #63: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_61] Trial #74: GFLOPs: 162.3323. Time: 1248.1230 us. Best GFLOPs: 242.9791
2024-04-29 06:22:49 [INFO] [task_scheduler.cc:131] [Task #63: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_61] Trial #75: GFLOPs: 172.7741. Time: 1172.6914 us. Best GFLOPs: 242.9791
2024-04-29 06:22:49 [INFO] [task_scheduler.cc:131] [Task #63: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_61] Trial #76: GFLOPs: 156.8882. Time: 1291.4339 us. Best GFLOPs: 242.9791
2024-04-29 06:22:49 [INFO] [task_scheduler.cc:131] [Task #63: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_61] Trial #77: GFLOPs: 305.2626. Time: 663.7258 us. Best GFLOPs: 305.2626
2024-04-29 06:22:49 [INFO] [task_scheduler.cc:131] [Task #63: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_61] Trial #78: GFLOPs: 163.1830. Time: 1241.6165 us. Best GFLOPs: 305.2626
2024-04-29 06:22:49 [INFO] [task_scheduler.cc:131] [Task #63: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_61] Trial #79: GFLOPs: 407.2653. Time: 497.4907 us. Best GFLOPs: 407.2653
2024-04-29 06:22:49 [INFO] [task_scheduler.cc:131] [Task #63: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_61] Trial #80: GFLOPs: 151.9028. Time: 1333.8183 us. Best GFLOPs: 407.2653
2024-04-29 06:22:49 [INFO] [task_scheduler.cc:131] [Task #63: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_61] Trial #81: GFLOPs: 132.1522. Time: 1533.1616 us. Best GFLOPs: 407.2653
2024-04-29 06:22:49 [INFO] [task_scheduler.cc:131] [Task #63: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_61] Trial #82: GFLOPs: 240.0568. Time: 844.0113 us. Best GFLOPs: 407.2653
2024-04-29 06:22:49 [INFO] [task_scheduler.cc:131] [Task #63: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_61] Trial #83: GFLOPs: 216.2433. Time: 936.9569 us. Best GFLOPs: 407.2653
2024-04-29 06:22:49 [INFO] [task_scheduler.cc:131] [Task #63: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_61] Trial #84: GFLOPs: 101.8689. Time: 1988.9349 us. Best GFLOPs: 407.2653
2024-04-29 06:22:49 [INFO] [task_scheduler.cc:131] [Task #63: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_61] Trial #85: GFLOPs: 151.9412. Time: 1333.4812 us. Best GFLOPs: 407.2653
2024-04-29 06:22:49 [INFO] [task_scheduler.cc:131] [Task #63: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_61] Trial #86: GFLOPs: 300.5650. Time: 674.0994 us. Best GFLOPs: 407.2653
2024-04-29 06:22:49 [INFO] [task_scheduler.cc:131] [Task #63: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_61] Trial #87: GFLOPs: 171.4938. Time: 1181.4464 us. Best GFLOPs: 407.2653
2024-04-29 06:22:49 [INFO] [task_scheduler.cc:131] [Task #63: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_61] Trial #88: GFLOPs: 188.8949. Time: 1072.6109 us. Best GFLOPs: 407.2653
2024-04-29 06:22:49 [INFO] [task_scheduler.cc:131] [Task #63: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_61] Trial #89: GFLOPs: 221.6761. Time: 913.9943 us. Best GFLOPs: 407.2653
2024-04-29 06:22:49 [INFO] [task_scheduler.cc:131] [Task #63: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_61] Trial #90: GFLOPs: 135.5304. Time: 1494.9460 us. Best GFLOPs: 407.2653
2024-04-29 06:22:49 [INFO] [task_scheduler.cc:131] [Task #63: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_61] Trial #91: GFLOPs: 162.0665. Time: 1250.1703 us. Best GFLOPs: 407.2653
2024-04-29 06:22:49 [INFO] [task_scheduler.cc:131] [Task #63: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_61] Trial #92: GFLOPs: 350.5800. Time: 577.9300 us. Best GFLOPs: 407.2653
2024-04-29 06:22:49 [INFO] [task_scheduler.cc:131] [Task #63: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_61] Trial #93: GFLOPs: 160.3776. Time: 1263.3356 us. Best GFLOPs: 407.2653
2024-04-29 06:22:49 [INFO] [task_scheduler.cc:131] [Task #63: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_61] Trial #94: GFLOPs: 145.1157. Time: 1396.2010 us. Best GFLOPs: 407.2653
2024-04-29 06:22:49 [INFO] [task_scheduler.cc:131] [Task #63: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_61] Trial #95: GFLOPs: 152.2825. Time: 1330.4926 us. Best GFLOPs: 407.2653
2024-04-29 06:22:49 [INFO] [task_scheduler.cc:131] [Task #63: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_61] Trial #96: GFLOPs: 142.1090. Time: 1425.7411 us. Best GFLOPs: 407.2653
2024-04-29 06:22:49 [INFO] [task_scheduler.cc:131] [Task #63: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_61] Trial #97: GFLOPs: 244.5871. Time: 828.3786 us. Best GFLOPs: 407.2653
2024-04-29 06:22:49 [INFO] [task_scheduler.cc:131] [Task #63: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_61] Trial #98: GFLOPs: 141.1530. Time: 1435.3973 us. Best GFLOPs: 407.2653
2024-04-29 06:22:49 [INFO] [task_scheduler.cc:131] [Task #63: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_61] Trial #99: GFLOPs: 138.0887. Time: 1467.2506 us. Best GFLOPs: 407.2653
2024-04-29 06:22:49 [INFO] [task_scheduler.cc:131] [Task #63: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_61] Trial #100: GFLOPs: 156.8586. Time: 1291.6771 us. Best GFLOPs: 407.2653
2024-04-29 06:22:49 [INFO] [task_scheduler.cc:131] [Task #63: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_61] Trial #101: GFLOPs: 113.9034. Time: 1778.7948 us. Best GFLOPs: 407.2653
2024-04-29 06:22:49 [INFO] [task_scheduler.cc:131] [Task #63: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_61] Trial #102: GFLOPs: 137.8879. Time: 1469.3868 us. Best GFLOPs: 407.2653
2024-04-29 06:22:49 [INFO] [task_scheduler.cc:131] [Task #63: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_61] Trial #103: GFLOPs: 199.4484. Time: 1015.8554 us. Best GFLOPs: 407.2653
2024-04-29 06:22:49 [INFO] [task_scheduler.cc:131] [Task #63: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_61] Trial #104: GFLOPs: 45.1505. Time: 4487.4504 us. Best GFLOPs: 407.2653
2024-04-29 06:22:49 [INFO] [task_scheduler.cc:131] [Task #63: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_61] Trial #105: GFLOPs: 103.2353. Time: 1962.6112 us. Best GFLOPs: 407.2653
2024-04-29 06:22:49 [INFO] [task_scheduler.cc:131] [Task #63: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_61] Trial #106: GFLOPs: 197.8567. Time: 1024.0275 us. Best GFLOPs: 407.2653
2024-04-29 06:22:49 [INFO] [task_scheduler.cc:131] [Task #63: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_61] Trial #107: GFLOPs: 206.6512. Time: 980.4474 us. Best GFLOPs: 407.2653
2024-04-29 06:22:49 [INFO] [task_scheduler.cc:131] [Task #63: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_61] Trial #108: GFLOPs: 121.8407. Time: 1662.9146 us. Best GFLOPs: 407.2653
2024-04-29 06:22:49 [INFO] [task_scheduler.cc:131] [Task #63: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_61] Trial #109: GFLOPs: 339.1970. Time: 597.3245 us. Best GFLOPs: 407.2653
2024-04-29 06:22:49 [INFO] [task_scheduler.cc:131] [Task #63: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_61] Trial #110: GFLOPs: 257.3057. Time: 787.4319 us. Best GFLOPs: 407.2653
2024-04-29 06:22:49 [INFO] [task_scheduler.cc:131] [Task #63: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_61] Trial #111: GFLOPs: 157.7429. Time: 1284.4359 us. Best GFLOPs: 407.2653
2024-04-29 06:22:49 [INFO] [task_scheduler.cc:131] [Task #63: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_61] Trial #112: GFLOPs: 244.0556. Time: 830.1826 us. Best GFLOPs: 407.2653
2024-04-29 06:22:49 [INFO] [task_scheduler.cc:131] [Task #63: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_61] Trial #113: GFLOPs: 300.4238. Time: 674.4161 us. Best GFLOPs: 407.2653
2024-04-29 06:22:49 [INFO] [task_scheduler.cc:131] [Task #63: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_61] Trial #114: GFLOPs: 224.5996. Time: 902.0972 us. Best GFLOPs: 407.2653
2024-04-29 06:22:49 [INFO] [task_scheduler.cc:131] [Task #63: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_61] Trial #115: GFLOPs: 124.8387. Time: 1622.9798 us. Best GFLOPs: 407.2653
2024-04-29 06:22:49 [INFO] [task_scheduler.cc:131] [Task #63: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_61] Trial #116: GFLOPs: 158.7504. Time: 1276.2848 us. Best GFLOPs: 407.2653
2024-04-29 06:22:49 [INFO] [task_scheduler.cc:131] [Task #63: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_61] Trial #117: GFLOPs: 130.7017. Time: 1550.1759 us. Best GFLOPs: 407.2653
2024-04-29 06:22:49 [INFO] [task_scheduler.cc:131] [Task #63: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_61] Trial #118: GFLOPs: 209.5392. Time: 966.9348 us. Best GFLOPs: 407.2653
2024-04-29 06:22:49 [INFO] [task_scheduler.cc:131] [Task #63: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_61] Trial #119: GFLOPs: 158.3677. Time: 1279.3691 us. Best GFLOPs: 407.2653
2024-04-29 06:22:49 [INFO] [task_scheduler.cc:131] [Task #63: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_61] Trial #120: GFLOPs: 174.9822. Time: 1157.8934 us. Best GFLOPs: 407.2653
2024-04-29 06:22:49 [INFO] [task_scheduler.cc:131] [Task #63: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_61] Trial #121: GFLOPs: 152.1839. Time: 1331.3545 us. Best GFLOPs: 407.2653
2024-04-29 06:22:49 [INFO] [task_scheduler.cc:131] [Task #63: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_61] Trial #122: GFLOPs: 117.0485. Time: 1730.9974 us. Best GFLOPs: 407.2653
2024-04-29 06:22:49 [INFO] [task_scheduler.cc:131] [Task #63: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_61] Trial #123: GFLOPs: 214.6931. Time: 943.7223 us. Best GFLOPs: 407.2653
2024-04-29 06:22:49 [INFO] [task_scheduler.cc:131] [Task #63: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_61] Trial #124: GFLOPs: 140.4978. Time: 1442.0915 us. Best GFLOPs: 407.2653
2024-04-29 06:22:49 [INFO] [task_scheduler.cc:131] [Task #63: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_61] Trial #125: GFLOPs: 229.0693. Time: 884.4951 us. Best GFLOPs: 407.2653
2024-04-29 06:22:49 [INFO] [task_scheduler.cc:131] [Task #63: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_61] Trial #126: GFLOPs: 1.3042. Time: 155355.5587 us. Best GFLOPs: 407.2653
2024-04-29 06:22:49 [INFO] [task_scheduler.cc:131] [Task #63: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_61] Trial #127: GFLOPs: 129.5058. Time: 1564.4914 us. Best GFLOPs: 407.2653
2024-04-29 06:22:49 [INFO] [task_scheduler.cc:131] [Task #63: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_61] Trial #128: GFLOPs: 256.8089. Time: 788.9552 us. Best GFLOPs: 407.2653
