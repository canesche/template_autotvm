2024-04-29 02:33:37 [INFO] [task_scheduler.cc:160] Initializing Task #81: "fused_nn_contrib_conv2d_NCHWc_3"
2024-04-29 02:33:37 [INFO] [task_scheduler.cc:35] 
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(48), T.int64(56), T.int64(56), T.int64(4)), "float32"), p1: T.Buffer((T.int64(12), T.int64(48), T.int64(3), T.int64(3), T.int64(4), T.int64(4)), "float32"), conv2d_NCHWc: T.Buffer((T.int64(1), T.int64(12), T.int64(56), T.int64(56), T.int64(4)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        data_pad = T.alloc_buffer((T.int64(1), T.int64(48), T.int64(58), T.int64(58), T.int64(4)))
        for i0, i1, i2, i3, i4 in T.grid(T.int64(1), T.int64(48), T.int64(58), T.int64(58), T.int64(4)):
            with T.block("data_pad"):
                v_i0, v_i1, v_i2, v_i3, v_i4 = T.axis.remap("SSSSS", [i0, i1, i2, i3, i4])
                T.reads(p0[v_i0, v_i1, v_i2 - T.int64(1), v_i3 - T.int64(1), v_i4])
                T.writes(data_pad[v_i0, v_i1, v_i2, v_i3, v_i4])
                data_pad[v_i0, v_i1, v_i2, v_i3, v_i4] = T.if_then_else(T.int64(1) <= v_i2 and v_i2 < T.int64(57) and T.int64(1) <= v_i3 and v_i3 < T.int64(57), p0[v_i0, v_i1, v_i2 - T.int64(1), v_i3 - T.int64(1), v_i4], T.float32(0))
        for n, oc_chunk, oh, ow, oc_block, ic, kh, kw in T.grid(T.int64(1), T.int64(12), T.int64(56), T.int64(56), T.int64(4), T.int64(192), T.int64(3), T.int64(3)):
            with T.block("conv2d_NCHWc"):
                v_n, v_oc_chunk, v_oh, v_ow, v_oc_block, v_ic, v_kh, v_kw = T.axis.remap("SSSSSRRR", [n, oc_chunk, oh, ow, oc_block, ic, kh, kw])
                T.reads(data_pad[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)], p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block])
                T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                with T.init():
                    conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = T.float32(0)
                conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] + data_pad[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)] * p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block]
2024-04-29 02:33:37 [INFO] [task_scheduler.cc:164] Total 3 design space(s) generated
2024-04-29 02:33:37 [INFO] [task_scheduler.cc:170] Design space #0:
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(48), T.int64(56), T.int64(56), T.int64(4)), "float32"), p1: T.Buffer((T.int64(12), T.int64(48), T.int64(3), T.int64(3), T.int64(4), T.int64(4)), "float32"), conv2d_NCHWc: T.Buffer((T.int64(1), T.int64(12), T.int64(56), T.int64(56), T.int64(4)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        with T.block("root"):
            T.reads()
            T.writes()
            T.block_attr({"meta_schedule.parallel": 768, "meta_schedule.unroll_explicit": 0, "meta_schedule.vectorize": 64})
            data_pad = T.alloc_buffer((T.int64(1), T.int64(48), T.int64(58), T.int64(58), T.int64(4)))
            conv2d_NCHWc_global = T.alloc_buffer((T.int64(1), T.int64(12), T.int64(56), T.int64(56), T.int64(4)))
            for n_0, oc_chunk_0, oh_0, ow_0, oc_block_0, n_1, oc_chunk_1, oh_1, ow_1, oc_block_1 in T.grid(T.int64(1), T.int64(2), T.int64(14), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(2)):
                for ic_0 in range(T.int64(64)):
                    for ax0, ax1, ax2, ax3, ax4 in T.grid(T.int64(1), (ic_0 * T.int64(3) % T.int64(4) + T.int64(2)) // T.int64(4) + T.int64(1), T.int64(6), T.int64(58), T.int64(4)):
                        with T.block("data_pad"):
                            v_i0 = T.axis.spatial(T.int64(1), ax0)
                            v_i1 = T.axis.spatial(T.int64(48), ic_0 * T.int64(3) // T.int64(4) + ax1)
                            v_i2 = T.axis.spatial(T.int64(58), oh_0 * T.int64(4) + ax2)
                            v_i3, v_i4 = T.axis.remap("SS", [ax3, ax4])
                            T.reads(p0[v_i0, v_i1, v_i2 - T.int64(1), v_i3 - T.int64(1), v_i4])
                            T.writes(data_pad[v_i0, v_i1, v_i2, v_i3, v_i4])
                            data_pad[v_i0, v_i1, v_i2, v_i3, v_i4] = T.if_then_else(T.int64(1) <= v_i2 and v_i2 < T.int64(57) and T.int64(1) <= v_i3 and v_i3 < T.int64(57), p0[v_i0, v_i1, v_i2 - T.int64(1), v_i3 - T.int64(1), v_i4], T.float32(0))
                    for kh_0, kw_0, n_2, oc_chunk_2, oh_2, ow_2, oc_block_2, ic_1, kh_1, kw_1, n_3, oc_chunk_3, oh_3, ow_3, oc_block_3 in T.grid(T.int64(1), T.int64(1), T.int64(1), T.int64(6), T.int64(2), T.int64(56), T.int64(1), T.int64(3), T.int64(3), T.int64(3), T.int64(1), T.int64(1), T.int64(2), T.int64(1), T.int64(2)):
                        with T.block("conv2d_NCHWc"):
                            v_n = T.axis.spatial(T.int64(1), n_0 + n_1 + n_2 + n_3)
                            v_oc_chunk = T.axis.spatial(T.int64(12), oc_chunk_0 * T.int64(6) + oc_chunk_1 * T.int64(6) + oc_chunk_2 + oc_chunk_3)
                            v_oh = T.axis.spatial(T.int64(56), oh_0 * T.int64(4) + oh_1 * T.int64(4) + oh_2 * T.int64(2) + oh_3)
                            v_ow = T.axis.spatial(T.int64(56), ow_0 * T.int64(56) + ow_1 * T.int64(56) + ow_2 + ow_3)
                            v_oc_block = T.axis.spatial(T.int64(4), oc_block_0 * T.int64(4) + oc_block_1 * T.int64(2) + oc_block_2 * T.int64(2) + oc_block_3)
                            v_ic = T.axis.reduce(T.int64(192), ic_0 * T.int64(3) + ic_1)
                            v_kh = T.axis.reduce(T.int64(3), kh_0 * T.int64(3) + kh_1)
                            v_kw = T.axis.reduce(T.int64(3), kw_0 * T.int64(3) + kw_1)
                            T.reads(data_pad[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)], p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block])
                            T.writes(conv2d_NCHWc_global[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                            T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                            with T.init():
                                conv2d_NCHWc_global[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = T.float32(0)
                            conv2d_NCHWc_global[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = conv2d_NCHWc_global[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] + data_pad[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)] * p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block]
                for ax0, ax1, ax2, ax3, ax4 in T.grid(T.int64(1), T.int64(6), T.int64(4), T.int64(56), T.int64(2)):
                    with T.block("conv2d_NCHWc_global"):
                        v0 = T.axis.spatial(T.int64(1), ax0)
                        v1 = T.axis.spatial(T.int64(12), oc_chunk_0 * T.int64(6) + ax1)
                        v2 = T.axis.spatial(T.int64(56), oh_0 * T.int64(4) + ax2)
                        v3 = T.axis.spatial(T.int64(56), ax3)
                        v4 = T.axis.spatial(T.int64(4), oc_block_1 * T.int64(2) + ax4)
                        T.reads(conv2d_NCHWc_global[v0, v1, v2, v3, v4])
                        T.writes(conv2d_NCHWc[v0, v1, v2, v3, v4])
                        conv2d_NCHWc[v0, v1, v2, v3, v4] = conv2d_NCHWc_global[v0, v1, v2, v3, v4]
b0 = sch.get_block(name="data_pad", func_name="main")
b1 = sch.get_block(name="conv2d_NCHWc", func_name="main")
b2 = sch.get_block(name="root", func_name="main")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSRSRS")
l3, l4, l5, l6, l7, l8, l9, l10 = sch.get_loops(block=b1)
v11, v12, v13, v14 = sch.sample_perfect_tile(loop=l3, n=4, max_innermost_factor=64, decision=[1, 1, 1, 1])
l15, l16, l17, l18 = sch.split(loop=l3, factors=[v11, v12, v13, v14], preserve_unit_iters=True)
v19, v20, v21, v22 = sch.sample_perfect_tile(loop=l4, n=4, max_innermost_factor=64, decision=[2, 1, 6, 1])
l23, l24, l25, l26 = sch.split(loop=l4, factors=[v19, v20, v21, v22], preserve_unit_iters=True)
v27, v28, v29, v30 = sch.sample_perfect_tile(loop=l5, n=4, max_innermost_factor=64, decision=[14, 1, 2, 2])
l31, l32, l33, l34 = sch.split(loop=l5, factors=[v27, v28, v29, v30], preserve_unit_iters=True)
v35, v36, v37, v38 = sch.sample_perfect_tile(loop=l6, n=4, max_innermost_factor=64, decision=[1, 1, 56, 1])
l39, l40, l41, l42 = sch.split(loop=l6, factors=[v35, v36, v37, v38], preserve_unit_iters=True)
v43, v44, v45, v46 = sch.sample_perfect_tile(loop=l7, n=4, max_innermost_factor=64, decision=[1, 2, 1, 2])
l47, l48, l49, l50 = sch.split(loop=l7, factors=[v43, v44, v45, v46], preserve_unit_iters=True)
v51, v52 = sch.sample_perfect_tile(loop=l8, n=2, max_innermost_factor=64, decision=[64, 3])
l53, l54 = sch.split(loop=l8, factors=[v51, v52], preserve_unit_iters=True)
v55, v56 = sch.sample_perfect_tile(loop=l9, n=2, max_innermost_factor=64, decision=[1, 3])
l57, l58 = sch.split(loop=l9, factors=[v55, v56], preserve_unit_iters=True)
v59, v60 = sch.sample_perfect_tile(loop=l10, n=2, max_innermost_factor=64, decision=[1, 3])
l61, l62 = sch.split(loop=l10, factors=[v59, v60], preserve_unit_iters=True)
sch.reorder(l15, l23, l31, l39, l47, l16, l24, l32, l40, l48, l53, l57, l61, l17, l25, l33, l41, l49, l54, l58, l62, l18, l26, l34, l42, l50)
b63 = sch.cache_write(block=b1, write_buffer_index=0, storage_scope="global")
sch.reverse_compute_at(block=b63, loop=l48, preserve_unit_loops=True, index=-1)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.vectorize", ann_val=64)
v64 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=0)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.unroll_explicit", ann_val=v64)
l65 = sch.sample_compute_location(block=b0, decision=10)
sch.compute_at(block=b0, loop=l65, preserve_unit_loops=True, index=-1)
2024-04-29 02:33:37 [INFO] [task_scheduler.cc:170] Design space #1:
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(48), T.int64(56), T.int64(56), T.int64(4)), "float32"), p1: T.Buffer((T.int64(12), T.int64(48), T.int64(3), T.int64(3), T.int64(4), T.int64(4)), "float32"), conv2d_NCHWc: T.Buffer((T.int64(1), T.int64(12), T.int64(56), T.int64(56), T.int64(4)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        with T.block("root"):
            T.reads()
            T.writes()
            T.block_attr({"meta_schedule.parallel": 768, "meta_schedule.unroll_explicit": 512, "meta_schedule.vectorize": 64})
            data_pad = T.alloc_buffer((T.int64(1), T.int64(48), T.int64(58), T.int64(58), T.int64(4)))
            conv2d_NCHWc_global = T.alloc_buffer((T.int64(1), T.int64(12), T.int64(56), T.int64(56), T.int64(4)))
            for n_0, oc_chunk_0 in T.grid(T.int64(1), T.int64(2)):
                for ax0, ax1, ax2, ax3, ax4 in T.grid(T.int64(1), T.int64(48), T.int64(58), T.int64(58), T.int64(4)):
                    with T.block("data_pad"):
                        v_i0, v_i1, v_i2, v_i3, v_i4 = T.axis.remap("SSSSS", [ax0, ax1, ax2, ax3, ax4])
                        T.reads(p0[v_i0, v_i1, v_i2 - T.int64(1), v_i3 - T.int64(1), v_i4])
                        T.writes(data_pad[v_i0, v_i1, v_i2, v_i3, v_i4])
                        data_pad[v_i0, v_i1, v_i2, v_i3, v_i4] = T.if_then_else(T.int64(1) <= v_i2 and v_i2 < T.int64(57) and T.int64(1) <= v_i3 and v_i3 < T.int64(57), p0[v_i0, v_i1, v_i2 - T.int64(1), v_i3 - T.int64(1), v_i4], T.float32(0))
                for oh_0, ow_0, oc_block_0 in T.grid(T.int64(14), T.int64(1), T.int64(1)):
                    for n_1, oc_chunk_1, oh_1, ow_1, oc_block_1, ic_0, kh_0, kw_0, n_2, oc_chunk_2, oh_2, ow_2, oc_block_2, ic_1, kh_1, kw_1, n_3, oc_chunk_3, oh_3, ow_3, oc_block_3 in T.grid(T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(64), T.int64(1), T.int64(1), T.int64(1), T.int64(6), T.int64(2), T.int64(56), T.int64(1), T.int64(3), T.int64(3), T.int64(3), T.int64(1), T.int64(1), T.int64(2), T.int64(1), T.int64(2)):
                        with T.block("conv2d_NCHWc"):
                            v_n = T.axis.spatial(T.int64(1), n_0 + n_1 + n_2 + n_3)
                            v_oc_chunk = T.axis.spatial(T.int64(12), oc_chunk_0 * T.int64(6) + oc_chunk_1 * T.int64(6) + oc_chunk_2 + oc_chunk_3)
                            v_oh = T.axis.spatial(T.int64(56), oh_0 * T.int64(4) + oh_1 * T.int64(4) + oh_2 * T.int64(2) + oh_3)
                            v_ow = T.axis.spatial(T.int64(56), ow_0 * T.int64(56) + ow_1 * T.int64(56) + ow_2 + ow_3)
                            v_oc_block = T.axis.spatial(T.int64(4), oc_block_0 * T.int64(4) + oc_block_1 * T.int64(2) + oc_block_2 * T.int64(2) + oc_block_3)
                            v_ic = T.axis.reduce(T.int64(192), ic_0 * T.int64(3) + ic_1)
                            v_kh = T.axis.reduce(T.int64(3), kh_0 * T.int64(3) + kh_1)
                            v_kw = T.axis.reduce(T.int64(3), kw_0 * T.int64(3) + kw_1)
                            T.reads(data_pad[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)], p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block])
                            T.writes(conv2d_NCHWc_global[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                            T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                            with T.init():
                                conv2d_NCHWc_global[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = T.float32(0)
                            conv2d_NCHWc_global[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = conv2d_NCHWc_global[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] + data_pad[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)] * p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block]
                    for ax0, ax1, ax2, ax3, ax4 in T.grid(T.int64(1), T.int64(6), T.int64(4), T.int64(56), T.int64(4)):
                        with T.block("conv2d_NCHWc_global"):
                            v0 = T.axis.spatial(T.int64(1), ax0)
                            v1 = T.axis.spatial(T.int64(12), oc_chunk_0 * T.int64(6) + ax1)
                            v2 = T.axis.spatial(T.int64(56), oh_0 * T.int64(4) + ax2)
                            v3, v4 = T.axis.remap("SS", [ax3, ax4])
                            T.reads(conv2d_NCHWc_global[v0, v1, v2, v3, v4])
                            T.writes(conv2d_NCHWc[v0, v1, v2, v3, v4])
                            conv2d_NCHWc[v0, v1, v2, v3, v4] = conv2d_NCHWc_global[v0, v1, v2, v3, v4]
b0 = sch.get_block(name="data_pad", func_name="main")
b1 = sch.get_block(name="conv2d_NCHWc", func_name="main")
b2 = sch.get_block(name="root", func_name="main")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSRSRS")
l3, l4, l5, l6, l7, l8, l9, l10 = sch.get_loops(block=b1)
v11, v12, v13, v14 = sch.sample_perfect_tile(loop=l3, n=4, max_innermost_factor=64, decision=[1, 1, 1, 1])
l15, l16, l17, l18 = sch.split(loop=l3, factors=[v11, v12, v13, v14], preserve_unit_iters=True)
v19, v20, v21, v22 = sch.sample_perfect_tile(loop=l4, n=4, max_innermost_factor=64, decision=[2, 1, 6, 1])
l23, l24, l25, l26 = sch.split(loop=l4, factors=[v19, v20, v21, v22], preserve_unit_iters=True)
v27, v28, v29, v30 = sch.sample_perfect_tile(loop=l5, n=4, max_innermost_factor=64, decision=[14, 1, 2, 2])
l31, l32, l33, l34 = sch.split(loop=l5, factors=[v27, v28, v29, v30], preserve_unit_iters=True)
v35, v36, v37, v38 = sch.sample_perfect_tile(loop=l6, n=4, max_innermost_factor=64, decision=[1, 1, 56, 1])
l39, l40, l41, l42 = sch.split(loop=l6, factors=[v35, v36, v37, v38], preserve_unit_iters=True)
v43, v44, v45, v46 = sch.sample_perfect_tile(loop=l7, n=4, max_innermost_factor=64, decision=[1, 2, 1, 2])
l47, l48, l49, l50 = sch.split(loop=l7, factors=[v43, v44, v45, v46], preserve_unit_iters=True)
v51, v52 = sch.sample_perfect_tile(loop=l8, n=2, max_innermost_factor=64, decision=[64, 3])
l53, l54 = sch.split(loop=l8, factors=[v51, v52], preserve_unit_iters=True)
v55, v56 = sch.sample_perfect_tile(loop=l9, n=2, max_innermost_factor=64, decision=[1, 3])
l57, l58 = sch.split(loop=l9, factors=[v55, v56], preserve_unit_iters=True)
v59, v60 = sch.sample_perfect_tile(loop=l10, n=2, max_innermost_factor=64, decision=[1, 3])
l61, l62 = sch.split(loop=l10, factors=[v59, v60], preserve_unit_iters=True)
sch.reorder(l15, l23, l31, l39, l47, l16, l24, l32, l40, l48, l53, l57, l61, l17, l25, l33, l41, l49, l54, l58, l62, l18, l26, l34, l42, l50)
b63 = sch.cache_write(block=b1, write_buffer_index=0, storage_scope="global")
sch.reverse_compute_at(block=b63, loop=l47, preserve_unit_loops=True, index=-1)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.vectorize", ann_val=64)
v64 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.unroll_explicit", ann_val=v64)
l65 = sch.sample_compute_location(block=b0, decision=1)
sch.compute_at(block=b0, loop=l65, preserve_unit_loops=True, index=-1)
2024-04-29 02:33:37 [INFO] [task_scheduler.cc:170] Design space #2:
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(48), T.int64(56), T.int64(56), T.int64(4)), "float32"), p1: T.Buffer((T.int64(12), T.int64(48), T.int64(3), T.int64(3), T.int64(4), T.int64(4)), "float32"), conv2d_NCHWc: T.Buffer((T.int64(1), T.int64(12), T.int64(56), T.int64(56), T.int64(4)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        with T.block("root"):
            T.reads()
            T.writes()
            T.block_attr({"meta_schedule.parallel": 768, "meta_schedule.unroll_explicit": 0, "meta_schedule.vectorize": 64})
            data_pad = T.alloc_buffer((T.int64(1), T.int64(48), T.int64(58), T.int64(58), T.int64(4)))
            for n_0, oc_chunk_0 in T.grid(T.int64(1), T.int64(2)):
                for ax0, ax1, ax2, ax3, ax4 in T.grid(T.int64(1), T.int64(48), T.int64(58), T.int64(58), T.int64(4)):
                    with T.block("data_pad"):
                        v_i0, v_i1, v_i2, v_i3, v_i4 = T.axis.remap("SSSSS", [ax0, ax1, ax2, ax3, ax4])
                        T.reads(p0[v_i0, v_i1, v_i2 - T.int64(1), v_i3 - T.int64(1), v_i4])
                        T.writes(data_pad[v_i0, v_i1, v_i2, v_i3, v_i4])
                        data_pad[v_i0, v_i1, v_i2, v_i3, v_i4] = T.if_then_else(T.int64(1) <= v_i2 and v_i2 < T.int64(57) and T.int64(1) <= v_i3 and v_i3 < T.int64(57), p0[v_i0, v_i1, v_i2 - T.int64(1), v_i3 - T.int64(1), v_i4], T.float32(0))
                for oh_0, ow_0, oc_block_0, n_1, oc_chunk_1, oh_1, ow_1, oc_block_1, ic_0, kh_0, kw_0, n_2, oc_chunk_2, oh_2, ow_2, oc_block_2, ic_1, kh_1, kw_1, n_3, oc_chunk_3, oh_3, ow_3, oc_block_3 in T.grid(T.int64(14), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(64), T.int64(1), T.int64(1), T.int64(1), T.int64(6), T.int64(2), T.int64(56), T.int64(1), T.int64(3), T.int64(3), T.int64(3), T.int64(1), T.int64(1), T.int64(2), T.int64(1), T.int64(2)):
                    with T.block("conv2d_NCHWc"):
                        v_n = T.axis.spatial(T.int64(1), n_0 + n_1 + n_2 + n_3)
                        v_oc_chunk = T.axis.spatial(T.int64(12), oc_chunk_0 * T.int64(6) + oc_chunk_1 * T.int64(6) + oc_chunk_2 + oc_chunk_3)
                        v_oh = T.axis.spatial(T.int64(56), oh_0 * T.int64(4) + oh_1 * T.int64(4) + oh_2 * T.int64(2) + oh_3)
                        v_ow = T.axis.spatial(T.int64(56), ow_0 * T.int64(56) + ow_1 * T.int64(56) + ow_2 + ow_3)
                        v_oc_block = T.axis.spatial(T.int64(4), oc_block_0 * T.int64(4) + oc_block_1 * T.int64(2) + oc_block_2 * T.int64(2) + oc_block_3)
                        v_ic = T.axis.reduce(T.int64(192), ic_0 * T.int64(3) + ic_1)
                        v_kh = T.axis.reduce(T.int64(3), kh_0 * T.int64(3) + kh_1)
                        v_kw = T.axis.reduce(T.int64(3), kw_0 * T.int64(3) + kw_1)
                        T.reads(data_pad[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)], p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block])
                        T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                        T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                        with T.init():
                            conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = T.float32(0)
                        conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] + data_pad[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)] * p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block]
b0 = sch.get_block(name="data_pad", func_name="main")
b1 = sch.get_block(name="conv2d_NCHWc", func_name="main")
b2 = sch.get_block(name="root", func_name="main")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSRSRS")
l3, l4, l5, l6, l7, l8, l9, l10 = sch.get_loops(block=b1)
v11, v12, v13, v14 = sch.sample_perfect_tile(loop=l3, n=4, max_innermost_factor=64, decision=[1, 1, 1, 1])
l15, l16, l17, l18 = sch.split(loop=l3, factors=[v11, v12, v13, v14], preserve_unit_iters=True)
v19, v20, v21, v22 = sch.sample_perfect_tile(loop=l4, n=4, max_innermost_factor=64, decision=[2, 1, 6, 1])
l23, l24, l25, l26 = sch.split(loop=l4, factors=[v19, v20, v21, v22], preserve_unit_iters=True)
v27, v28, v29, v30 = sch.sample_perfect_tile(loop=l5, n=4, max_innermost_factor=64, decision=[14, 1, 2, 2])
l31, l32, l33, l34 = sch.split(loop=l5, factors=[v27, v28, v29, v30], preserve_unit_iters=True)
v35, v36, v37, v38 = sch.sample_perfect_tile(loop=l6, n=4, max_innermost_factor=64, decision=[1, 1, 56, 1])
l39, l40, l41, l42 = sch.split(loop=l6, factors=[v35, v36, v37, v38], preserve_unit_iters=True)
v43, v44, v45, v46 = sch.sample_perfect_tile(loop=l7, n=4, max_innermost_factor=64, decision=[1, 2, 1, 2])
l47, l48, l49, l50 = sch.split(loop=l7, factors=[v43, v44, v45, v46], preserve_unit_iters=True)
v51, v52 = sch.sample_perfect_tile(loop=l8, n=2, max_innermost_factor=64, decision=[64, 3])
l53, l54 = sch.split(loop=l8, factors=[v51, v52], preserve_unit_iters=True)
v55, v56 = sch.sample_perfect_tile(loop=l9, n=2, max_innermost_factor=64, decision=[1, 3])
l57, l58 = sch.split(loop=l9, factors=[v55, v56], preserve_unit_iters=True)
v59, v60 = sch.sample_perfect_tile(loop=l10, n=2, max_innermost_factor=64, decision=[1, 3])
l61, l62 = sch.split(loop=l10, factors=[v59, v60], preserve_unit_iters=True)
sch.reorder(l15, l23, l31, l39, l47, l16, l24, l32, l40, l48, l53, l57, l61, l17, l25, l33, l41, l49, l54, l58, l62, l18, l26, l34, l42, l50)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.vectorize", ann_val=64)
v63 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=0)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.unroll_explicit", ann_val=v63)
l64 = sch.sample_compute_location(block=b0, decision=1)
sch.compute_at(block=b0, loop=l64, preserve_unit_loops=True, index=-1)
2024-04-29 04:42:11 [INFO] [evolutionary_search.cc:713] Generating candidates......
2024-04-29 04:42:11 [INFO] [evolutionary_search.cc:715] Picked top 0 candidate(s) from database
2024-04-29 04:42:16 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x119191d8)]: 11 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x91eb9d8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0xb6918a8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x10e07d28)]: 0 failure(s)
2024-04-29 04:42:16 [INFO] [evolutionary_search.cc:723] Sampled 501 candidate(s)
2024-04-29 04:42:22 [INFO] [evolutionary_search.cc:621] Evolve iter #0 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x119191d8)]: 2 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x91eb9d8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0xb6918a8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x10e07d28)]: 0 failure(s)
2024-04-29 04:42:28 [INFO] [evolutionary_search.cc:621] Evolve iter #1 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x119191d8)]: 3 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x91eb9d8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0xb6918a8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x10e07d28)]: 0 failure(s)
2024-04-29 04:42:34 [INFO] [evolutionary_search.cc:621] Evolve iter #2 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x119191d8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x91eb9d8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0xb6918a8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x10e07d28)]: 0 failure(s)
2024-04-29 04:42:39 [INFO] [evolutionary_search.cc:621] Evolve iter #3 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x119191d8)]: 1 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x91eb9d8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0xb6918a8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x10e07d28)]: 0 failure(s)
2024-04-29 04:42:40 [INFO] [evolutionary_search.cc:649] Scores of the best 64 candidates:
[1 : 16]:	0.9995  0.9992  0.9991  0.9990  0.9989  0.9988  0.9988  0.9985  0.9983  0.9980  0.9977  0.9972  0.9972  0.9969  0.9967  0.9964
[17 : 32]:	0.9961  0.9956  0.9950  0.9948  0.9945  0.9926  0.9924  0.9922  0.9911  0.9910  0.9906  0.9904  0.9896  0.9890  0.9882  0.9881
[33 : 48]:	0.9872  0.9871  0.9870  0.9870  0.9869  0.9869  0.9863  0.9858  0.9856  0.9849  0.9847  0.9846  0.9839  0.9837  0.9829  0.9820
[49 : 64]:	0.9812  0.9804  0.9803  0.9799  0.9797  0.9786  0.9782  0.9770  0.9769  0.9769  0.9768  0.9766  0.9765  0.9764  0.9758  0.9758
2024-04-29 04:42:41 [INFO] [evolutionary_search.cc:727] Got 64 candidate(s) with evolutionary search
2024-04-29 04:42:41 [INFO] [evolutionary_search.cc:730] Sending 64 candidates(s) for measurement
2024-04-29 05:11:41 [INFO] [task_scheduler.cc:131] [Task #81: fused_nn_contrib_conv2d_NCHWc_3] Trial #1: GFLOPs: 56.2542. Time: 9247.7566 us. Best GFLOPs: 56.2542
2024-04-29 05:11:41 [INFO] [task_scheduler.cc:131] [Task #81: fused_nn_contrib_conv2d_NCHWc_3] Trial #2: GFLOPs: 19.7887. Time: 26288.9283 us. Best GFLOPs: 56.2542
2024-04-29 05:11:41 [INFO] [task_scheduler.cc:131] [Task #81: fused_nn_contrib_conv2d_NCHWc_3] Trial #3: GFLOPs: 37.1779. Time: 13992.8569 us. Best GFLOPs: 56.2542
2024-04-29 05:11:41 [INFO] [task_scheduler.cc:131] [Task #81: fused_nn_contrib_conv2d_NCHWc_3] Trial #4: GFLOPs: 192.3739. Time: 2704.2372 us. Best GFLOPs: 192.3739
2024-04-29 05:11:41 [INFO] [task_scheduler.cc:131] [Task #81: fused_nn_contrib_conv2d_NCHWc_3] Trial #5: GFLOPs: 88.4623. Time: 5880.7528 us. Best GFLOPs: 192.3739
2024-04-29 05:11:41 [INFO] [task_scheduler.cc:131] [Task #81: fused_nn_contrib_conv2d_NCHWc_3] Trial #6: GFLOPs: 16.4468. Time: 31630.6715 us. Best GFLOPs: 192.3739
2024-04-29 05:11:41 [INFO] [task_scheduler.cc:131] [Task #81: fused_nn_contrib_conv2d_NCHWc_3] Trial #7: GFLOPs: 61.3932. Time: 8473.6569 us. Best GFLOPs: 192.3739
2024-04-29 05:11:41 [INFO] [task_scheduler.cc:131] [Task #81: fused_nn_contrib_conv2d_NCHWc_3] Trial #8: GFLOPs: 5.4254. Time: 95886.2673 us. Best GFLOPs: 192.3739
2024-04-29 05:11:41 [INFO] [task_scheduler.cc:131] [Task #81: fused_nn_contrib_conv2d_NCHWc_3] Trial #9: GFLOPs: 21.5834. Time: 24103.0282 us. Best GFLOPs: 192.3739
2024-04-29 05:11:41 [INFO] [task_scheduler.cc:131] [Task #81: fused_nn_contrib_conv2d_NCHWc_3] Trial #10: GFLOPs: 93.5791. Time: 5559.1955 us. Best GFLOPs: 192.3739
2024-04-29 05:11:41 [INFO] [task_scheduler.cc:131] [Task #81: fused_nn_contrib_conv2d_NCHWc_3] Trial #11: GFLOPs: 175.3564. Time: 2966.6704 us. Best GFLOPs: 192.3739
2024-04-29 05:11:41 [INFO] [task_scheduler.cc:131] [Task #81: fused_nn_contrib_conv2d_NCHWc_3] Trial #12: GFLOPs: 17.3031. Time: 30065.3575 us. Best GFLOPs: 192.3739
2024-04-29 05:11:41 [INFO] [task_scheduler.cc:131] [Task #81: fused_nn_contrib_conv2d_NCHWc_3] Trial #13: GFLOPs: 79.2429. Time: 6564.9389 us. Best GFLOPs: 192.3739
2024-04-29 05:11:41 [INFO] [task_scheduler.cc:131] [Task #81: fused_nn_contrib_conv2d_NCHWc_3] Trial #14: GFLOPs: 36.7341. Time: 14161.8971 us. Best GFLOPs: 192.3739
2024-04-29 05:11:41 [INFO] [task_scheduler.cc:131] [Task #81: fused_nn_contrib_conv2d_NCHWc_3] Trial #15: GFLOPs: 20.9353. Time: 24849.1990 us. Best GFLOPs: 192.3739
2024-04-29 05:11:41 [INFO] [task_scheduler.cc:131] [Task #81: fused_nn_contrib_conv2d_NCHWc_3] Trial #16: GFLOPs: 73.9188. Time: 7037.7871 us. Best GFLOPs: 192.3739
2024-04-29 05:11:41 [INFO] [task_scheduler.cc:121] [Task #81: fused_nn_contrib_conv2d_NCHWc_3] Trial #17: Error in building:
LocalBuilder: Timeout, killed after 30.0 seconds
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(48), T.int64(56), T.int64(56), T.int64(4)), "float32"), p1: T.Buffer((T.int64(12), T.int64(48), T.int64(3), T.int64(3), T.int64(4), T.int64(4)), "float32"), conv2d_NCHWc: T.Buffer((T.int64(1), T.int64(12), T.int64(56), T.int64(56), T.int64(4)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        for n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused in T.parallel(T.int64(336), annotations={"pragma_auto_unroll_max_step": 512, "pragma_unroll_explicit": 1}):
            for n_2_init, oc_chunk_2_init, oh_2_init, ow_2_init, oc_block_2_init, n_3_init, oc_chunk_3_init, oh_3_init, ow_3_init in T.grid(T.int64(1), T.int64(2), T.int64(1), T.int64(14), T.int64(1), T.int64(1), T.int64(2), T.int64(4), T.int64(1)):
                for oc_block_3_fused_init in T.vectorized(T.int64(2)):
                    with T.block("conv2d_NCHWc_init"):
                        v_n = T.axis.spatial(T.int64(1), n_2_init + n_3_init)
                        v_oc_chunk = T.axis.spatial(T.int64(12), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused // T.int64(112) * T.int64(4) + oc_chunk_2_init * T.int64(2) + oc_chunk_3_init)
                        v_oh = T.axis.spatial(T.int64(56), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused % T.int64(112) // T.int64(8) * T.int64(4) + oh_2_init * T.int64(4) + oh_3_init)
                        v_ow = T.axis.spatial(T.int64(56), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused % T.int64(4) * T.int64(14) + ow_2_init + ow_3_init)
                        v_oc_block = T.axis.spatial(T.int64(4), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused % T.int64(8) // T.int64(4) * T.int64(2) + oc_block_2_init * T.int64(2) + oc_block_3_fused_init)
                        T.reads()
                        T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                        T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                        conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = T.float32(0)
            for ic_0, kh_0, kw_0, n_2, oc_chunk_2, oh_2, ow_2, oc_block_2, ic_1, kh_1, kw_1, n_3, oc_chunk_3, oh_3, ow_3 in T.grid(T.int64(12), T.int64(3), T.int64(1), T.int64(1), T.int64(2), T.int64(1), T.int64(14), T.int64(1), T.int64(16), T.int64(1), T.int64(3), T.int64(1), T.int64(2), T.int64(4), T.int64(1)):
                for oc_block_3_fused in T.vectorized(T.int64(2)):
                    with T.block("conv2d_NCHWc_update"):
                        v_n = T.axis.spatial(T.int64(1), n_2 + n_3)
                        v_oc_chunk = T.axis.spatial(T.int64(12), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused // T.int64(112) * T.int64(4) + oc_chunk_2 * T.int64(2) + oc_chunk_3)
                        v_oh = T.axis.spatial(T.int64(56), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused % T.int64(112) // T.int64(8) * T.int64(4) + oh_2 * T.int64(4) + oh_3)
                        v_ow = T.axis.spatial(T.int64(56), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused % T.int64(4) * T.int64(14) + ow_2 + ow_3)
                        v_oc_block = T.axis.spatial(T.int64(4), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused % T.int64(8) // T.int64(4) * T.int64(2) + oc_block_2 * T.int64(2) + oc_block_3_fused)
                        v_ic = T.axis.reduce(T.int64(192), ic_0 * T.int64(16) + ic_1)
                        v_kh = T.axis.reduce(T.int64(3), kh_0 + kh_1)
                        v_kw = T.axis.reduce(T.int64(3), kw_0 * T.int64(3) + kw_1)
                        T.reads(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block], p0[v_n, v_ic // T.int64(4), v_oh + v_kh - T.int64(1), v_ow + v_kw - T.int64(1), v_ic % T.int64(4)], p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block])
                        T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                        T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                        conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] + T.if_then_else(T.int64(1) <= v_oh + v_kh and v_oh + v_kh < T.int64(57) and T.int64(1) <= v_ow + v_kw and v_ow + v_kw < T.int64(57), p0[v_n, v_ic // T.int64(4), v_oh + v_kh - T.int64(1), v_ow + v_kw - T.int64(1), v_ic % T.int64(4)], T.float32(0)) * p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block]
b0 = sch.get_block(name="data_pad", func_name="main")
b1 = sch.get_block(name="conv2d_NCHWc", func_name="main")
b2 = sch.get_block(name="root", func_name="main")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSRSRS")
l3, l4, l5, l6, l7, l8, l9, l10 = sch.get_loops(block=b1)
v11, v12, v13, v14 = sch.sample_perfect_tile(loop=l3, n=4, max_innermost_factor=64, decision=[1, 1, 1, 1])
l15, l16, l17, l18 = sch.split(loop=l3, factors=[v11, v12, v13, v14], preserve_unit_iters=True)
v19, v20, v21, v22 = sch.sample_perfect_tile(loop=l4, n=4, max_innermost_factor=64, decision=[3, 1, 2, 2])
l23, l24, l25, l26 = sch.split(loop=l4, factors=[v19, v20, v21, v22], preserve_unit_iters=True)
v27, v28, v29, v30 = sch.sample_perfect_tile(loop=l5, n=4, max_innermost_factor=64, decision=[14, 1, 1, 4])
l31, l32, l33, l34 = sch.split(loop=l5, factors=[v27, v28, v29, v30], preserve_unit_iters=True)
v35, v36, v37, v38 = sch.sample_perfect_tile(loop=l6, n=4, max_innermost_factor=64, decision=[1, 4, 14, 1])
l39, l40, l41, l42 = sch.split(loop=l6, factors=[v35, v36, v37, v38], preserve_unit_iters=True)
v43, v44, v45, v46 = sch.sample_perfect_tile(loop=l7, n=4, max_innermost_factor=64, decision=[2, 1, 1, 2])
l47, l48, l49, l50 = sch.split(loop=l7, factors=[v43, v44, v45, v46], preserve_unit_iters=True)
v51, v52 = sch.sample_perfect_tile(loop=l8, n=2, max_innermost_factor=64, decision=[12, 16])
l53, l54 = sch.split(loop=l8, factors=[v51, v52], preserve_unit_iters=True)
v55, v56 = sch.sample_perfect_tile(loop=l9, n=2, max_innermost_factor=64, decision=[3, 1])
l57, l58 = sch.split(loop=l9, factors=[v55, v56], preserve_unit_iters=True)
v59, v60 = sch.sample_perfect_tile(loop=l10, n=2, max_innermost_factor=64, decision=[1, 3])
l61, l62 = sch.split(loop=l10, factors=[v59, v60], preserve_unit_iters=True)
sch.reorder(l15, l23, l31, l39, l47, l16, l24, l32, l40, l48, l53, l57, l61, l17, l25, l33, l41, l49, l54, l58, l62, l18, l26, l34, l42, l50)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.vectorize", ann_val=64)
v63 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.unroll_explicit", ann_val=v63)
l64 = sch.sample_compute_location(block=b0, decision=-2)
sch.compute_at(block=b0, loop=l64, preserve_unit_loops=True, index=-1)
sch.enter_postproc()
b65 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b65, ann_key="meta_schedule.parallel")
sch.unannotate(block_or_loop=b65, ann_key="meta_schedule.vectorize")
sch.unannotate(block_or_loop=b65, ann_key="meta_schedule.unroll_explicit")
b66, = sch.get_child_blocks(b65)
l67, l68, l69, l70, l71, l72, l73, l74, l75, l76, l77, l78, l79, l80, l81, l82, l83, l84, l85, l86, l87, l88, l89, l90, l91, l92 = sch.get_loops(block=b66)
l93 = sch.fuse(l67, l68, l69, l70, l71, l72, l73, l74, l75, l76, preserve_unit_iters=True)
sch.parallel(loop=l93)
l94 = sch.fuse(l92, preserve_unit_iters=True)
sch.vectorize(loop=l94)
sch.annotate(block_or_loop=l93, ann_key="pragma_auto_unroll_max_step", ann_val=512)
sch.annotate(block_or_loop=l93, ann_key="pragma_unroll_explicit", ann_val=1)
b95 = sch.get_block(name="conv2d_NCHWc", func_name="main")
l96, l97, l98, l99, l100, l101, l102, l103, l104, l105, l106, l107, l108, l109, l110, l111, l112 = sch.get_loops(block=b95)
b113 = sch.decompose_reduction(block=b95, loop=l97)
2024-04-29 05:11:41 [INFO] [task_scheduler.cc:131] [Task #81: fused_nn_contrib_conv2d_NCHWc_3] Trial #18: GFLOPs: 143.8526. Time: 3616.3728 us. Best GFLOPs: 192.3739
2024-04-29 05:11:41 [INFO] [task_scheduler.cc:131] [Task #81: fused_nn_contrib_conv2d_NCHWc_3] Trial #19: GFLOPs: 89.5972. Time: 5806.2638 us. Best GFLOPs: 192.3739
2024-04-29 05:11:41 [INFO] [task_scheduler.cc:131] [Task #81: fused_nn_contrib_conv2d_NCHWc_3] Trial #20: GFLOPs: 56.1067. Time: 9272.0595 us. Best GFLOPs: 192.3739
2024-04-29 05:11:41 [INFO] [task_scheduler.cc:131] [Task #81: fused_nn_contrib_conv2d_NCHWc_3] Trial #21: GFLOPs: 16.7482. Time: 31061.4762 us. Best GFLOPs: 192.3739
2024-04-29 05:11:41 [INFO] [task_scheduler.cc:131] [Task #81: fused_nn_contrib_conv2d_NCHWc_3] Trial #22: GFLOPs: 57.9433. Time: 8978.1640 us. Best GFLOPs: 192.3739
2024-04-29 05:11:41 [INFO] [task_scheduler.cc:131] [Task #81: fused_nn_contrib_conv2d_NCHWc_3] Trial #23: GFLOPs: 75.5309. Time: 6887.5712 us. Best GFLOPs: 192.3739
2024-04-29 05:11:41 [INFO] [task_scheduler.cc:131] [Task #81: fused_nn_contrib_conv2d_NCHWc_3] Trial #24: GFLOPs: 70.0188. Time: 7429.7866 us. Best GFLOPs: 192.3739
2024-04-29 05:11:41 [INFO] [task_scheduler.cc:131] [Task #81: fused_nn_contrib_conv2d_NCHWc_3] Trial #25: GFLOPs: 149.0177. Time: 3491.0266 us. Best GFLOPs: 192.3739
2024-04-29 05:11:41 [INFO] [task_scheduler.cc:131] [Task #81: fused_nn_contrib_conv2d_NCHWc_3] Trial #26: GFLOPs: 8.4345. Time: 61678.3837 us. Best GFLOPs: 192.3739
2024-04-29 05:11:41 [INFO] [task_scheduler.cc:131] [Task #81: fused_nn_contrib_conv2d_NCHWc_3] Trial #27: GFLOPs: 56.6463. Time: 9183.7415 us. Best GFLOPs: 192.3739
2024-04-29 05:11:41 [INFO] [task_scheduler.cc:131] [Task #81: fused_nn_contrib_conv2d_NCHWc_3] Trial #28: GFLOPs: 31.2247. Time: 16660.6767 us. Best GFLOPs: 192.3739
2024-04-29 05:11:41 [INFO] [task_scheduler.cc:121] [Task #81: fused_nn_contrib_conv2d_NCHWc_3] Trial #29: Error in building:
LocalBuilder: Timeout, killed after 30.0 seconds
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(48), T.int64(56), T.int64(56), T.int64(4)), "float32"), p1: T.Buffer((T.int64(12), T.int64(48), T.int64(3), T.int64(3), T.int64(4), T.int64(4)), "float32"), conv2d_NCHWc: T.Buffer((T.int64(1), T.int64(12), T.int64(56), T.int64(56), T.int64(4)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        data_pad = T.alloc_buffer((T.int64(1), T.int64(48), T.int64(58), T.int64(58), T.int64(4)))
        for n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_fused_fused in T.parallel(T.int64(64), annotations={"pragma_auto_unroll_max_step": 512, "pragma_unroll_explicit": 1}):
            for ax0, ax1, ax2 in T.grid(T.int64(1), T.int64(48), T.int64(16)):
                for ax3_ax4_fused in T.vectorized(T.int64(64)):
                    with T.block("data_pad"):
                        v_i0, v_i1 = T.axis.remap("SS", [ax0, ax1])
                        v_i2 = T.axis.spatial(T.int64(58), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_fused_fused % T.int64(32) // T.int64(8) * T.int64(14) + ax2)
                        v_i3 = T.axis.spatial(T.int64(58), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_fused_fused % T.int64(8) // T.int64(4) * T.int64(28) + n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_fused_fused % T.int64(2) * T.int64(14) + ax3_ax4_fused // T.int64(4))
                        v_i4 = T.axis.spatial(T.int64(4), ax3_ax4_fused % T.int64(4))
                        T.reads(p0[v_i0, v_i1, v_i2 - T.int64(1), v_i3 - T.int64(1), v_i4])
                        T.writes(data_pad[v_i0, v_i1, v_i2, v_i3, v_i4])
                        data_pad[v_i0, v_i1, v_i2, v_i3, v_i4] = T.if_then_else(T.int64(1) <= v_i2 and v_i2 < T.int64(57) and T.int64(1) <= v_i3 and v_i3 < T.int64(57), p0[v_i0, v_i1, v_i2 - T.int64(1), v_i3 - T.int64(1), v_i4], T.float32(0))
            for oc_block_1 in range(T.int64(1)):
                for n_2_init, oc_chunk_2_init, oh_2_init, ow_2_init, oc_block_2_init, n_3_init, oc_chunk_3_init, oh_3_init, ow_3_init, oc_block_3_init in T.grid(T.int64(1), T.int64(3), T.int64(1), T.int64(1), T.int64(2), T.int64(1), T.int64(2), T.int64(14), T.int64(14), T.int64(1)):
                    with T.block("conv2d_NCHWc_init"):
                        v_n = T.axis.spatial(T.int64(1), n_2_init + n_3_init)
                        v_oc_chunk = T.axis.spatial(T.int64(12), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_fused_fused // T.int64(32) * T.int64(6) + oc_chunk_2_init * T.int64(2) + oc_chunk_3_init)
                        v_oh = T.axis.spatial(T.int64(56), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_fused_fused % T.int64(32) // T.int64(8) * T.int64(14) + oh_2_init * T.int64(14) + oh_3_init)
                        v_ow = T.axis.spatial(T.int64(56), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_fused_fused % T.int64(8) // T.int64(4) * T.int64(28) + n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_fused_fused % T.int64(2) * T.int64(14) + ow_2_init * T.int64(14) + ow_3_init)
                        v_oc_block = T.axis.spatial(T.int64(4), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_fused_fused % T.int64(4) // T.int64(2) * T.int64(2) + oc_block_1 * T.int64(2) + oc_block_2_init + oc_block_3_init)
                        T.reads()
                        T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                        T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                        conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = T.float32(0)
                for ic_0, kh_0, kw_0, n_2, oc_chunk_2, oh_2, ow_2, oc_block_2, ic_1, kh_1, kw_1, n_3, oc_chunk_3, oh_3, ow_3, oc_block_3 in T.grid(T.int64(16), T.int64(3), T.int64(3), T.int64(1), T.int64(3), T.int64(1), T.int64(1), T.int64(2), T.int64(12), T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(14), T.int64(14), T.int64(1)):
                    with T.block("conv2d_NCHWc_update"):
                        v_n = T.axis.spatial(T.int64(1), n_2 + n_3)
                        v_oc_chunk = T.axis.spatial(T.int64(12), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_fused_fused // T.int64(32) * T.int64(6) + oc_chunk_2 * T.int64(2) + oc_chunk_3)
                        v_oh = T.axis.spatial(T.int64(56), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_fused_fused % T.int64(32) // T.int64(8) * T.int64(14) + oh_2 * T.int64(14) + oh_3)
                        v_ow = T.axis.spatial(T.int64(56), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_fused_fused % T.int64(8) // T.int64(4) * T.int64(28) + n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_fused_fused % T.int64(2) * T.int64(14) + ow_2 * T.int64(14) + ow_3)
                        v_oc_block = T.axis.spatial(T.int64(4), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_fused_fused % T.int64(4) // T.int64(2) * T.int64(2) + oc_block_1 * T.int64(2) + oc_block_2 + oc_block_3)
                        v_ic = T.axis.reduce(T.int64(192), ic_0 * T.int64(12) + ic_1)
                        v_kh = T.axis.reduce(T.int64(3), kh_0 + kh_1)
                        v_kw = T.axis.reduce(T.int64(3), kw_0 + kw_1)
                        T.reads(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block], data_pad[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)], p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block])
                        T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                        T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                        conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] + data_pad[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)] * p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block]
b0 = sch.get_block(name="data_pad", func_name="main")
b1 = sch.get_block(name="conv2d_NCHWc", func_name="main")
b2 = sch.get_block(name="root", func_name="main")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSRSRS")
l3, l4, l5, l6, l7, l8, l9, l10 = sch.get_loops(block=b1)
v11, v12, v13, v14 = sch.sample_perfect_tile(loop=l3, n=4, max_innermost_factor=64, decision=[1, 1, 1, 1])
l15, l16, l17, l18 = sch.split(loop=l3, factors=[v11, v12, v13, v14], preserve_unit_iters=True)
v19, v20, v21, v22 = sch.sample_perfect_tile(loop=l4, n=4, max_innermost_factor=64, decision=[2, 1, 3, 2])
l23, l24, l25, l26 = sch.split(loop=l4, factors=[v19, v20, v21, v22], preserve_unit_iters=True)
v27, v28, v29, v30 = sch.sample_perfect_tile(loop=l5, n=4, max_innermost_factor=64, decision=[4, 1, 1, 14])
l31, l32, l33, l34 = sch.split(loop=l5, factors=[v27, v28, v29, v30], preserve_unit_iters=True)
v35, v36, v37, v38 = sch.sample_perfect_tile(loop=l6, n=4, max_innermost_factor=64, decision=[2, 2, 1, 14])
l39, l40, l41, l42 = sch.split(loop=l6, factors=[v35, v36, v37, v38], preserve_unit_iters=True)
v43, v44, v45, v46 = sch.sample_perfect_tile(loop=l7, n=4, max_innermost_factor=64, decision=[2, 1, 2, 1])
l47, l48, l49, l50 = sch.split(loop=l7, factors=[v43, v44, v45, v46], preserve_unit_iters=True)
v51, v52 = sch.sample_perfect_tile(loop=l8, n=2, max_innermost_factor=64, decision=[16, 12])
l53, l54 = sch.split(loop=l8, factors=[v51, v52], preserve_unit_iters=True)
v55, v56 = sch.sample_perfect_tile(loop=l9, n=2, max_innermost_factor=64, decision=[3, 1])
l57, l58 = sch.split(loop=l9, factors=[v55, v56], preserve_unit_iters=True)
v59, v60 = sch.sample_perfect_tile(loop=l10, n=2, max_innermost_factor=64, decision=[3, 1])
l61, l62 = sch.split(loop=l10, factors=[v59, v60], preserve_unit_iters=True)
sch.reorder(l15, l23, l31, l39, l47, l16, l24, l32, l40, l48, l53, l57, l61, l17, l25, l33, l41, l49, l54, l58, l62, l18, l26, l34, l42, l50)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.vectorize", ann_val=64)
v63 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.unroll_explicit", ann_val=v63)
l64 = sch.sample_compute_location(block=b0, decision=8)
sch.compute_at(block=b0, loop=l64, preserve_unit_loops=True, index=-1)
sch.enter_postproc()
b65 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b65, ann_key="meta_schedule.parallel")
sch.unannotate(block_or_loop=b65, ann_key="meta_schedule.vectorize")
sch.unannotate(block_or_loop=b65, ann_key="meta_schedule.unroll_explicit")
b66, b67 = sch.get_child_blocks(b65)
l68, l69, l70, l71, l72, l73, l74, l75, l76, l77, l78, l79, l80, l81 = sch.get_loops(block=b66)
l82 = sch.fuse(l68, l69, l70, l71, l72, l73, l74, l75, l76, preserve_unit_iters=True)
sch.parallel(loop=l82)
l83 = sch.fuse(l80, l81, preserve_unit_iters=True)
sch.vectorize(loop=l83)
l84, l85, l86, l87, l88, l89, l90, l91, l92, l93, l94, l95, l96, l97, l98, l99, l100, l101 = sch.get_loops(block=b67)
l102 = sch.fuse(l84, preserve_unit_iters=True)
sch.parallel(loop=l102)
sch.annotate(block_or_loop=l102, ann_key="pragma_auto_unroll_max_step", ann_val=512)
sch.annotate(block_or_loop=l102, ann_key="pragma_unroll_explicit", ann_val=1)
b103 = sch.get_block(name="conv2d_NCHWc", func_name="main")
l104, l105, l106, l107, l108, l109, l110, l111, l112, l113, l114, l115, l116, l117, l118, l119, l120, l121 = sch.get_loops(block=b103)
b122 = sch.decompose_reduction(block=b103, loop=l106)
2024-04-29 05:11:41 [INFO] [task_scheduler.cc:131] [Task #81: fused_nn_contrib_conv2d_NCHWc_3] Trial #30: GFLOPs: 44.3736. Time: 11723.7463 us. Best GFLOPs: 192.3739
2024-04-29 05:11:41 [INFO] [task_scheduler.cc:131] [Task #81: fused_nn_contrib_conv2d_NCHWc_3] Trial #31: GFLOPs: 13.6877. Time: 38006.7113 us. Best GFLOPs: 192.3739
2024-04-29 05:11:41 [INFO] [task_scheduler.cc:131] [Task #81: fused_nn_contrib_conv2d_NCHWc_3] Trial #32: GFLOPs: 109.0848. Time: 4768.9923 us. Best GFLOPs: 192.3739
2024-04-29 05:11:41 [INFO] [task_scheduler.cc:131] [Task #81: fused_nn_contrib_conv2d_NCHWc_3] Trial #33: GFLOPs: 47.3698. Time: 10982.2046 us. Best GFLOPs: 192.3739
2024-04-29 05:11:41 [INFO] [task_scheduler.cc:131] [Task #81: fused_nn_contrib_conv2d_NCHWc_3] Trial #34: GFLOPs: 85.9340. Time: 6053.7719 us. Best GFLOPs: 192.3739
2024-04-29 05:11:41 [INFO] [task_scheduler.cc:131] [Task #81: fused_nn_contrib_conv2d_NCHWc_3] Trial #35: GFLOPs: 59.7456. Time: 8707.3323 us. Best GFLOPs: 192.3739
2024-04-29 05:11:41 [INFO] [task_scheduler.cc:131] [Task #81: fused_nn_contrib_conv2d_NCHWc_3] Trial #36: GFLOPs: 39.7618. Time: 13083.5436 us. Best GFLOPs: 192.3739
2024-04-29 05:11:41 [INFO] [task_scheduler.cc:131] [Task #81: fused_nn_contrib_conv2d_NCHWc_3] Trial #37: GFLOPs: 5.2715. Time: 98686.4190 us. Best GFLOPs: 192.3739
2024-04-29 05:11:41 [INFO] [task_scheduler.cc:121] [Task #81: fused_nn_contrib_conv2d_NCHWc_3] Trial #38: Error in building:
LocalBuilder: Timeout, killed after 30.0 seconds
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(48), T.int64(56), T.int64(56), T.int64(4)), "float32"), p1: T.Buffer((T.int64(12), T.int64(48), T.int64(3), T.int64(3), T.int64(4), T.int64(4)), "float32"), conv2d_NCHWc: T.Buffer((T.int64(1), T.int64(12), T.int64(56), T.int64(56), T.int64(4)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        data_pad = T.alloc_buffer((T.int64(1), T.int64(48), T.int64(58), T.int64(58), T.int64(4)))
        conv2d_NCHWc_global = T.alloc_buffer((T.int64(1), T.int64(12), T.int64(56), T.int64(56), T.int64(4)))
        for i0_i1_i2_fused in T.parallel(T.int64(2784)):
            for i3 in range(T.int64(58)):
                for i4_fused in T.vectorized(T.int64(4)):
                    with T.block("data_pad"):
                        v_i0 = T.axis.spatial(T.int64(1), T.int64(0))
                        v_i1 = T.axis.spatial(T.int64(48), i0_i1_i2_fused // T.int64(58))
                        v_i2 = T.axis.spatial(T.int64(58), i0_i1_i2_fused % T.int64(58))
                        v_i3, v_i4 = T.axis.remap("SS", [i3, i4_fused])
                        T.reads(p0[v_i0, v_i1, v_i2 - T.int64(1), v_i3 - T.int64(1), v_i4])
                        T.writes(data_pad[v_i0, v_i1, v_i2, v_i3, v_i4])
                        data_pad[v_i0, v_i1, v_i2, v_i3, v_i4] = T.if_then_else(T.int64(1) <= v_i2 and v_i2 < T.int64(57) and T.int64(1) <= v_i3 and v_i3 < T.int64(57), p0[v_i0, v_i1, v_i2 - T.int64(1), v_i3 - T.int64(1), v_i4], T.float32(0))
        for n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused in T.parallel(T.int64(96), annotations={"pragma_auto_unroll_max_step": 512, "pragma_unroll_explicit": 1}):
            for n_2_init, oc_chunk_2_init, oh_2_init, ow_2_init, oc_block_2_init, n_3_init, oc_chunk_3_init, oh_3_init, ow_3_init, oc_block_3_init in T.grid(T.int64(1), T.int64(4), T.int64(2), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(14), T.int64(14), T.int64(1)):
                with T.block("conv2d_NCHWc_init"):
                    v_n = T.axis.spatial(T.int64(1), n_2_init + n_3_init)
                    v_oc_chunk = T.axis.spatial(T.int64(12), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused % T.int64(12) // T.int64(4) * T.int64(4) + oc_chunk_2_init + oc_chunk_3_init)
                    v_oh = T.axis.spatial(T.int64(56), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused % T.int64(4) // T.int64(2) * T.int64(28) + oh_2_init * T.int64(14) + oh_3_init)
                    v_ow = T.axis.spatial(T.int64(56), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused // T.int64(48) * T.int64(28) + n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused % T.int64(2) * T.int64(14) + ow_2_init * T.int64(14) + ow_3_init)
                    v_oc_block = T.axis.spatial(T.int64(4), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused % T.int64(48) // T.int64(12) + oc_block_2_init + oc_block_3_init)
                    T.reads()
                    T.writes(conv2d_NCHWc_global[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                    T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                    conv2d_NCHWc_global[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = T.float32(0)
            for ic_0, kh_0, kw_0, n_2, oc_chunk_2, oh_2, ow_2, oc_block_2, ic_1, kh_1, kw_1, n_3, oc_chunk_3, oh_3, ow_3, oc_block_3 in T.grid(T.int64(12), T.int64(1), T.int64(3), T.int64(1), T.int64(4), T.int64(2), T.int64(1), T.int64(1), T.int64(16), T.int64(3), T.int64(1), T.int64(1), T.int64(1), T.int64(14), T.int64(14), T.int64(1)):
                with T.block("conv2d_NCHWc_update"):
                    v_n = T.axis.spatial(T.int64(1), n_2 + n_3)
                    v_oc_chunk = T.axis.spatial(T.int64(12), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused % T.int64(12) // T.int64(4) * T.int64(4) + oc_chunk_2 + oc_chunk_3)
                    v_oh = T.axis.spatial(T.int64(56), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused % T.int64(4) // T.int64(2) * T.int64(28) + oh_2 * T.int64(14) + oh_3)
                    v_ow = T.axis.spatial(T.int64(56), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused // T.int64(48) * T.int64(28) + n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused % T.int64(2) * T.int64(14) + ow_2 * T.int64(14) + ow_3)
                    v_oc_block = T.axis.spatial(T.int64(4), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused % T.int64(48) // T.int64(12) + oc_block_2 + oc_block_3)
                    v_ic = T.axis.reduce(T.int64(192), ic_0 * T.int64(16) + ic_1)
                    v_kh = T.axis.reduce(T.int64(3), kh_0 * T.int64(3) + kh_1)
                    v_kw = T.axis.reduce(T.int64(3), kw_0 + kw_1)
                    T.reads(conv2d_NCHWc_global[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block], data_pad[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)], p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block])
                    T.writes(conv2d_NCHWc_global[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                    T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                    conv2d_NCHWc_global[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = conv2d_NCHWc_global[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] + data_pad[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)] * p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block]
            for ax0, ax1, ax2, ax3, ax4 in T.grid(T.int64(1), T.int64(4), T.int64(28), T.int64(14), T.int64(1)):
                with T.block("conv2d_NCHWc_global"):
                    v0 = T.axis.spatial(T.int64(1), ax0)
                    v1 = T.axis.spatial(T.int64(12), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused % T.int64(12) // T.int64(4) * T.int64(4) + ax1)
                    v2 = T.axis.spatial(T.int64(56), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused % T.int64(4) // T.int64(2) * T.int64(28) + ax2)
                    v3 = T.axis.spatial(T.int64(56), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused // T.int64(48) * T.int64(28) + n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused % T.int64(2) * T.int64(14) + ax3)
                    v4 = T.axis.spatial(T.int64(4), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused % T.int64(48) // T.int64(12) + ax4)
                    T.reads(conv2d_NCHWc_global[v0, v1, v2, v3, v4])
                    T.writes(conv2d_NCHWc[v0, v1, v2, v3, v4])
                    conv2d_NCHWc[v0, v1, v2, v3, v4] = conv2d_NCHWc_global[v0, v1, v2, v3, v4]
b0 = sch.get_block(name="data_pad", func_name="main")
b1 = sch.get_block(name="conv2d_NCHWc", func_name="main")
b2 = sch.get_block(name="root", func_name="main")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSRSRS")
l3, l4, l5, l6, l7, l8, l9, l10 = sch.get_loops(block=b1)
v11, v12, v13, v14 = sch.sample_perfect_tile(loop=l3, n=4, max_innermost_factor=64, decision=[1, 1, 1, 1])
l15, l16, l17, l18 = sch.split(loop=l3, factors=[v11, v12, v13, v14], preserve_unit_iters=True)
v19, v20, v21, v22 = sch.sample_perfect_tile(loop=l4, n=4, max_innermost_factor=64, decision=[1, 3, 4, 1])
l23, l24, l25, l26 = sch.split(loop=l4, factors=[v19, v20, v21, v22], preserve_unit_iters=True)
v27, v28, v29, v30 = sch.sample_perfect_tile(loop=l5, n=4, max_innermost_factor=64, decision=[1, 2, 2, 14])
l31, l32, l33, l34 = sch.split(loop=l5, factors=[v27, v28, v29, v30], preserve_unit_iters=True)
v35, v36, v37, v38 = sch.sample_perfect_tile(loop=l6, n=4, max_innermost_factor=64, decision=[2, 2, 1, 14])
l39, l40, l41, l42 = sch.split(loop=l6, factors=[v35, v36, v37, v38], preserve_unit_iters=True)
v43, v44, v45, v46 = sch.sample_perfect_tile(loop=l7, n=4, max_innermost_factor=64, decision=[4, 1, 1, 1])
l47, l48, l49, l50 = sch.split(loop=l7, factors=[v43, v44, v45, v46], preserve_unit_iters=True)
v51, v52 = sch.sample_perfect_tile(loop=l8, n=2, max_innermost_factor=64, decision=[12, 16])
l53, l54 = sch.split(loop=l8, factors=[v51, v52], preserve_unit_iters=True)
v55, v56 = sch.sample_perfect_tile(loop=l9, n=2, max_innermost_factor=64, decision=[1, 3])
l57, l58 = sch.split(loop=l9, factors=[v55, v56], preserve_unit_iters=True)
v59, v60 = sch.sample_perfect_tile(loop=l10, n=2, max_innermost_factor=64, decision=[3, 1])
l61, l62 = sch.split(loop=l10, factors=[v59, v60], preserve_unit_iters=True)
sch.reorder(l15, l23, l31, l39, l47, l16, l24, l32, l40, l48, l53, l57, l61, l17, l25, l33, l41, l49, l54, l58, l62, l18, l26, l34, l42, l50)
b63 = sch.cache_write(block=b1, write_buffer_index=0, storage_scope="global")
sch.reverse_compute_at(block=b63, loop=l48, preserve_unit_loops=True, index=-1)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.vectorize", ann_val=64)
v64 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.unroll_explicit", ann_val=v64)
l65 = sch.sample_compute_location(block=b0, decision=-1)
sch.compute_at(block=b0, loop=l65, preserve_unit_loops=True, index=-1)
sch.enter_postproc()
b66 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b66, ann_key="meta_schedule.parallel")
sch.unannotate(block_or_loop=b66, ann_key="meta_schedule.vectorize")
sch.unannotate(block_or_loop=b66, ann_key="meta_schedule.unroll_explicit")
b67, b68, b69 = sch.get_child_blocks(b66)
l70, l71, l72, l73, l74 = sch.get_loops(block=b67)
l75 = sch.fuse(l70, l71, l72, preserve_unit_iters=True)
sch.parallel(loop=l75)
l76 = sch.fuse(l74, preserve_unit_iters=True)
sch.vectorize(loop=l76)
l77, l78, l79, l80, l81, l82, l83, l84, l85, l86, l87, l88, l89, l90, l91, l92, l93, l94, l95, l96, l97, l98, l99, l100, l101, l102 = sch.get_loops(block=b68)
l103 = sch.fuse(l77, l78, l79, l80, l81, l82, l83, l84, l85, l86, preserve_unit_iters=True)
sch.parallel(loop=l103)
sch.annotate(block_or_loop=l103, ann_key="pragma_auto_unroll_max_step", ann_val=512)
sch.annotate(block_or_loop=l103, ann_key="pragma_unroll_explicit", ann_val=1)
l104, l105, l106, l107, l108, l109 = sch.get_loops(block=b69)
b110 = sch.get_block(name="conv2d_NCHWc", func_name="main")
l111, l112, l113, l114, l115, l116, l117, l118, l119, l120, l121, l122, l123, l124, l125, l126, l127 = sch.get_loops(block=b110)
b128 = sch.decompose_reduction(block=b110, loop=l112)
2024-04-29 05:11:41 [INFO] [task_scheduler.cc:131] [Task #81: fused_nn_contrib_conv2d_NCHWc_3] Trial #39: GFLOPs: 141.9978. Time: 3663.6122 us. Best GFLOPs: 192.3739
2024-04-29 05:11:41 [INFO] [task_scheduler.cc:131] [Task #81: fused_nn_contrib_conv2d_NCHWc_3] Trial #40: GFLOPs: 166.3998. Time: 3126.3553 us. Best GFLOPs: 192.3739
2024-04-29 05:11:41 [INFO] [task_scheduler.cc:131] [Task #81: fused_nn_contrib_conv2d_NCHWc_3] Trial #41: GFLOPs: 124.1879. Time: 4189.0143 us. Best GFLOPs: 192.3739
2024-04-29 05:11:41 [INFO] [task_scheduler.cc:131] [Task #81: fused_nn_contrib_conv2d_NCHWc_3] Trial #42: GFLOPs: 51.8451. Time: 10034.2121 us. Best GFLOPs: 192.3739
2024-04-29 05:11:41 [INFO] [task_scheduler.cc:131] [Task #81: fused_nn_contrib_conv2d_NCHWc_3] Trial #43: GFLOPs: 23.7987. Time: 21859.4122 us. Best GFLOPs: 192.3739
2024-04-29 05:11:41 [INFO] [task_scheduler.cc:121] [Task #81: fused_nn_contrib_conv2d_NCHWc_3] Trial #44: Error in building:
LocalBuilder: Timeout, killed after 30.0 seconds
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(48), T.int64(56), T.int64(56), T.int64(4)), "float32"), p1: T.Buffer((T.int64(12), T.int64(48), T.int64(3), T.int64(3), T.int64(4), T.int64(4)), "float32"), conv2d_NCHWc: T.Buffer((T.int64(1), T.int64(12), T.int64(56), T.int64(56), T.int64(4)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        data_pad = T.alloc_buffer((T.int64(1), T.int64(48), T.int64(58), T.int64(58), T.int64(4)))
        conv2d_NCHWc_global = T.alloc_buffer((T.int64(1), T.int64(12), T.int64(56), T.int64(56), T.int64(4)))
        for n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_fused_fused in T.parallel(T.int64(48), annotations={"pragma_auto_unroll_max_step": 512, "pragma_unroll_explicit": 1}):
            for n_1, oc_chunk_1, oh_1, ow_1, oc_block_1 in T.grid(T.int64(1), T.int64(1), T.int64(7), T.int64(1), T.int64(2)):
                for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(48), T.int64(4), T.int64(30)):
                    for ax4_fused in T.vectorized(T.int64(4)):
                        with T.block("data_pad"):
                            v_i0, v_i1 = T.axis.remap("SS", [ax0, ax1])
                            v_i2 = T.axis.spatial(T.int64(58), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_fused_fused % T.int64(8) // T.int64(2) * T.int64(14) + oh_1 * T.int64(2) + ax2)
                            v_i3 = T.axis.spatial(T.int64(58), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_fused_fused % T.int64(2) * T.int64(28) + ax3)
                            v_i4 = T.axis.spatial(T.int64(4), ax4_fused)
                            T.reads(p0[v_i0, v_i1, v_i2 - T.int64(1), v_i3 - T.int64(1), v_i4])
                            T.writes(data_pad[v_i0, v_i1, v_i2, v_i3, v_i4])
                            data_pad[v_i0, v_i1, v_i2, v_i3, v_i4] = T.if_then_else(T.int64(1) <= v_i2 and v_i2 < T.int64(57) and T.int64(1) <= v_i3 and v_i3 < T.int64(57), p0[v_i0, v_i1, v_i2 - T.int64(1), v_i3 - T.int64(1), v_i4], T.float32(0))
                for n_2_init, oc_chunk_2_init, oh_2_init, ow_2_init, oc_block_2_init, n_3_init, oc_chunk_3_init, oh_3_init, ow_3_init in T.grid(T.int64(1), T.int64(2), T.int64(1), T.int64(2), T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(14)):
                    for oc_block_3_fused_init in T.vectorized(T.int64(2)):
                        with T.block("conv2d_NCHWc_init"):
                            v_n = T.axis.spatial(T.int64(1), n_1 + n_2_init + n_3_init)
                            v_oc_chunk = T.axis.spatial(T.int64(12), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_fused_fused // T.int64(8) * T.int64(2) + oc_chunk_1 * T.int64(2) + oc_chunk_2_init + oc_chunk_3_init)
                            v_oh = T.axis.spatial(T.int64(56), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_fused_fused % T.int64(8) // T.int64(2) * T.int64(14) + oh_1 * T.int64(2) + oh_2_init * T.int64(2) + oh_3_init)
                            v_ow = T.axis.spatial(T.int64(56), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_fused_fused % T.int64(2) * T.int64(28) + ow_1 * T.int64(28) + ow_2_init * T.int64(14) + ow_3_init)
                            v_oc_block = T.axis.spatial(T.int64(4), oc_block_1 * T.int64(2) + oc_block_2_init * T.int64(2) + oc_block_3_fused_init)
                            T.reads()
                            T.writes(conv2d_NCHWc_global[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                            T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                            conv2d_NCHWc_global[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = T.float32(0)
                for ic_0, kh_0, kw_0, n_2, oc_chunk_2, oh_2, ow_2, oc_block_2, ic_1, kh_1, kw_1, n_3, oc_chunk_3, oh_3, ow_3 in T.grid(T.int64(64), T.int64(1), T.int64(3), T.int64(1), T.int64(2), T.int64(1), T.int64(2), T.int64(1), T.int64(3), T.int64(3), T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(14)):
                    for oc_block_3_fused in T.vectorized(T.int64(2)):
                        with T.block("conv2d_NCHWc_update"):
                            v_n = T.axis.spatial(T.int64(1), n_1 + n_2 + n_3)
                            v_oc_chunk = T.axis.spatial(T.int64(12), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_fused_fused // T.int64(8) * T.int64(2) + oc_chunk_1 * T.int64(2) + oc_chunk_2 + oc_chunk_3)
                            v_oh = T.axis.spatial(T.int64(56), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_fused_fused % T.int64(8) // T.int64(2) * T.int64(14) + oh_1 * T.int64(2) + oh_2 * T.int64(2) + oh_3)
                            v_ow = T.axis.spatial(T.int64(56), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_fused_fused % T.int64(2) * T.int64(28) + ow_1 * T.int64(28) + ow_2 * T.int64(14) + ow_3)
                            v_oc_block = T.axis.spatial(T.int64(4), oc_block_1 * T.int64(2) + oc_block_2 * T.int64(2) + oc_block_3_fused)
                            v_ic = T.axis.reduce(T.int64(192), ic_0 * T.int64(3) + ic_1)
                            v_kh = T.axis.reduce(T.int64(3), kh_0 * T.int64(3) + kh_1)
                            v_kw = T.axis.reduce(T.int64(3), kw_0 + kw_1)
                            T.reads(conv2d_NCHWc_global[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block], data_pad[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)], p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block])
                            T.writes(conv2d_NCHWc_global[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                            T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                            conv2d_NCHWc_global[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = conv2d_NCHWc_global[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] + data_pad[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)] * p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block]
            for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(2), T.int64(14), T.int64(28)):
                for ax4_fused in T.vectorized(T.int64(4)):
                    with T.block("conv2d_NCHWc_global"):
                        v0 = T.axis.spatial(T.int64(1), ax0)
                        v1 = T.axis.spatial(T.int64(12), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_fused_fused // T.int64(8) * T.int64(2) + ax1)
                        v2 = T.axis.spatial(T.int64(56), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_fused_fused % T.int64(8) // T.int64(2) * T.int64(14) + ax2)
                        v3 = T.axis.spatial(T.int64(56), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_fused_fused % T.int64(2) * T.int64(28) + ax3)
                        v4 = T.axis.spatial(T.int64(4), ax4_fused)
                        T.reads(conv2d_NCHWc_global[v0, v1, v2, v3, v4])
                        T.writes(conv2d_NCHWc[v0, v1, v2, v3, v4])
                        conv2d_NCHWc[v0, v1, v2, v3, v4] = conv2d_NCHWc_global[v0, v1, v2, v3, v4]
b0 = sch.get_block(name="data_pad", func_name="main")
b1 = sch.get_block(name="conv2d_NCHWc", func_name="main")
b2 = sch.get_block(name="root", func_name="main")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSRSRS")
l3, l4, l5, l6, l7, l8, l9, l10 = sch.get_loops(block=b1)
v11, v12, v13, v14 = sch.sample_perfect_tile(loop=l3, n=4, max_innermost_factor=64, decision=[1, 1, 1, 1])
l15, l16, l17, l18 = sch.split(loop=l3, factors=[v11, v12, v13, v14], preserve_unit_iters=True)
v19, v20, v21, v22 = sch.sample_perfect_tile(loop=l4, n=4, max_innermost_factor=64, decision=[6, 1, 2, 1])
l23, l24, l25, l26 = sch.split(loop=l4, factors=[v19, v20, v21, v22], preserve_unit_iters=True)
v27, v28, v29, v30 = sch.sample_perfect_tile(loop=l5, n=4, max_innermost_factor=64, decision=[4, 7, 1, 2])
l31, l32, l33, l34 = sch.split(loop=l5, factors=[v27, v28, v29, v30], preserve_unit_iters=True)
v35, v36, v37, v38 = sch.sample_perfect_tile(loop=l6, n=4, max_innermost_factor=64, decision=[2, 1, 2, 14])
l39, l40, l41, l42 = sch.split(loop=l6, factors=[v35, v36, v37, v38], preserve_unit_iters=True)
v43, v44, v45, v46 = sch.sample_perfect_tile(loop=l7, n=4, max_innermost_factor=64, decision=[1, 2, 1, 2])
l47, l48, l49, l50 = sch.split(loop=l7, factors=[v43, v44, v45, v46], preserve_unit_iters=True)
v51, v52 = sch.sample_perfect_tile(loop=l8, n=2, max_innermost_factor=64, decision=[64, 3])
l53, l54 = sch.split(loop=l8, factors=[v51, v52], preserve_unit_iters=True)
v55, v56 = sch.sample_perfect_tile(loop=l9, n=2, max_innermost_factor=64, decision=[1, 3])
l57, l58 = sch.split(loop=l9, factors=[v55, v56], preserve_unit_iters=True)
v59, v60 = sch.sample_perfect_tile(loop=l10, n=2, max_innermost_factor=64, decision=[3, 1])
l61, l62 = sch.split(loop=l10, factors=[v59, v60], preserve_unit_iters=True)
sch.reorder(l15, l23, l31, l39, l47, l16, l24, l32, l40, l48, l53, l57, l61, l17, l25, l33, l41, l49, l54, l58, l62, l18, l26, l34, l42, l50)
b63 = sch.cache_write(block=b1, write_buffer_index=0, storage_scope="global")
sch.reverse_compute_at(block=b63, loop=l47, preserve_unit_loops=True, index=-1)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.vectorize", ann_val=64)
v64 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.unroll_explicit", ann_val=v64)
l65 = sch.sample_compute_location(block=b0, decision=9)
sch.compute_at(block=b0, loop=l65, preserve_unit_loops=True, index=-1)
sch.enter_postproc()
b66 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b66, ann_key="meta_schedule.parallel")
sch.unannotate(block_or_loop=b66, ann_key="meta_schedule.vectorize")
sch.unannotate(block_or_loop=b66, ann_key="meta_schedule.unroll_explicit")
b67, b68, b69 = sch.get_child_blocks(b66)
l70, l71, l72, l73, l74, l75, l76, l77, l78, l79, l80, l81, l82, l83, l84 = sch.get_loops(block=b67)
l85 = sch.fuse(l70, l71, l72, l73, l74, preserve_unit_iters=True)
sch.parallel(loop=l85)
l86 = sch.fuse(l84, preserve_unit_iters=True)
sch.vectorize(loop=l86)
l87, l88, l89, l90, l91, l92, l93, l94, l95, l96, l97, l98, l99, l100, l101, l102, l103, l104, l105, l106, l107, l108 = sch.get_loops(block=b68)
l109 = sch.fuse(l87, preserve_unit_iters=True)
sch.parallel(loop=l109)
l110 = sch.fuse(l108, preserve_unit_iters=True)
sch.vectorize(loop=l110)
sch.annotate(block_or_loop=l109, ann_key="pragma_auto_unroll_max_step", ann_val=512)
sch.annotate(block_or_loop=l109, ann_key="pragma_unroll_explicit", ann_val=1)
l111, l112, l113, l114, l115, l116 = sch.get_loops(block=b69)
l117 = sch.fuse(l116, preserve_unit_iters=True)
sch.vectorize(loop=l117)
b118 = sch.get_block(name="conv2d_NCHWc", func_name="main")
l119, l120, l121, l122, l123, l124, l125, l126, l127, l128, l129, l130, l131, l132, l133, l134, l135, l136, l137, l138, l139, l140 = sch.get_loops(block=b118)
b141 = sch.decompose_reduction(block=b118, loop=l125)
2024-04-29 05:11:41 [INFO] [task_scheduler.cc:131] [Task #81: fused_nn_contrib_conv2d_NCHWc_3] Trial #45: GFLOPs: 1.6036. Time: 324419.3553 us. Best GFLOPs: 192.3739
2024-04-29 05:11:41 [INFO] [task_scheduler.cc:131] [Task #81: fused_nn_contrib_conv2d_NCHWc_3] Trial #46: GFLOPs: 56.7103. Time: 9173.3669 us. Best GFLOPs: 192.3739
2024-04-29 05:11:41 [INFO] [task_scheduler.cc:131] [Task #81: fused_nn_contrib_conv2d_NCHWc_3] Trial #47: GFLOPs: 31.9343. Time: 16290.4591 us. Best GFLOPs: 192.3739
2024-04-29 05:11:41 [INFO] [task_scheduler.cc:131] [Task #81: fused_nn_contrib_conv2d_NCHWc_3] Trial #48: GFLOPs: 18.9875. Time: 27398.2258 us. Best GFLOPs: 192.3739
2024-04-29 05:11:41 [INFO] [task_scheduler.cc:131] [Task #81: fused_nn_contrib_conv2d_NCHWc_3] Trial #49: GFLOPs: 73.4367. Time: 7083.9904 us. Best GFLOPs: 192.3739
2024-04-29 05:11:41 [INFO] [task_scheduler.cc:131] [Task #81: fused_nn_contrib_conv2d_NCHWc_3] Trial #50: GFLOPs: 44.0419. Time: 11812.0428 us. Best GFLOPs: 192.3739
2024-04-29 05:11:41 [INFO] [task_scheduler.cc:131] [Task #81: fused_nn_contrib_conv2d_NCHWc_3] Trial #51: GFLOPs: 57.3036. Time: 9078.4023 us. Best GFLOPs: 192.3739
2024-04-29 05:11:41 [INFO] [task_scheduler.cc:131] [Task #81: fused_nn_contrib_conv2d_NCHWc_3] Trial #52: GFLOPs: 55.2868. Time: 9409.5581 us. Best GFLOPs: 192.3739
2024-04-29 05:11:41 [INFO] [task_scheduler.cc:131] [Task #81: fused_nn_contrib_conv2d_NCHWc_3] Trial #53: GFLOPs: 69.2405. Time: 7513.3060 us. Best GFLOPs: 192.3739
2024-04-29 05:11:41 [INFO] [task_scheduler.cc:131] [Task #81: fused_nn_contrib_conv2d_NCHWc_3] Trial #54: GFLOPs: 58.3697. Time: 8912.5833 us. Best GFLOPs: 192.3739
2024-04-29 05:11:41 [INFO] [task_scheduler.cc:131] [Task #81: fused_nn_contrib_conv2d_NCHWc_3] Trial #55: GFLOPs: 20.6379. Time: 25207.1963 us. Best GFLOPs: 192.3739
2024-04-29 05:11:41 [INFO] [task_scheduler.cc:131] [Task #81: fused_nn_contrib_conv2d_NCHWc_3] Trial #56: GFLOPs: 69.4115. Time: 7494.7873 us. Best GFLOPs: 192.3739
2024-04-29 05:11:41 [INFO] [task_scheduler.cc:131] [Task #81: fused_nn_contrib_conv2d_NCHWc_3] Trial #57: GFLOPs: 13.4566. Time: 38659.5370 us. Best GFLOPs: 192.3739
2024-04-29 05:11:41 [INFO] [task_scheduler.cc:131] [Task #81: fused_nn_contrib_conv2d_NCHWc_3] Trial #58: GFLOPs: 17.5726. Time: 29604.3583 us. Best GFLOPs: 192.3739
2024-04-29 05:11:41 [INFO] [task_scheduler.cc:131] [Task #81: fused_nn_contrib_conv2d_NCHWc_3] Trial #59: GFLOPs: 160.7783. Time: 3235.6645 us. Best GFLOPs: 192.3739
2024-04-29 05:11:41 [INFO] [task_scheduler.cc:131] [Task #81: fused_nn_contrib_conv2d_NCHWc_3] Trial #60: GFLOPs: 136.5919. Time: 3808.6060 us. Best GFLOPs: 192.3739
2024-04-29 05:11:41 [INFO] [task_scheduler.cc:131] [Task #81: fused_nn_contrib_conv2d_NCHWc_3] Trial #61: GFLOPs: 5.7135. Time: 91052.1907 us. Best GFLOPs: 192.3739
2024-04-29 05:11:41 [INFO] [task_scheduler.cc:131] [Task #81: fused_nn_contrib_conv2d_NCHWc_3] Trial #62: GFLOPs: 75.2165. Time: 6916.3647 us. Best GFLOPs: 192.3739
2024-04-29 05:11:41 [INFO] [task_scheduler.cc:131] [Task #81: fused_nn_contrib_conv2d_NCHWc_3] Trial #63: GFLOPs: 146.8415. Time: 3542.7635 us. Best GFLOPs: 192.3739
2024-04-29 05:11:41 [INFO] [task_scheduler.cc:131] [Task #81: fused_nn_contrib_conv2d_NCHWc_3] Trial #64: GFLOPs: 72.7491. Time: 7150.9449 us. Best GFLOPs: 192.3739
2024-04-29 05:14:16 [INFO] [evolutionary_search.cc:713] Generating candidates......
2024-04-29 05:14:17 [INFO] [evolutionary_search.cc:715] Picked top 60 candidate(s) from database
2024-04-29 05:14:22 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x119191d8)]: 11 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x91eb9d8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0xb6918a8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x10e07d28)]: 0 failure(s)
2024-04-29 05:14:22 [INFO] [evolutionary_search.cc:723] Sampled 441 candidate(s)
2024-04-29 05:14:33 [INFO] [evolutionary_search.cc:621] Evolve iter #0 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x119191d8)]: 2 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x91eb9d8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0xb6918a8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x10e07d28)]: 0 failure(s)
2024-04-29 05:14:45 [INFO] [evolutionary_search.cc:621] Evolve iter #1 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x119191d8)]: 2 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x91eb9d8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0xb6918a8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x10e07d28)]: 0 failure(s)
2024-04-29 05:14:58 [INFO] [evolutionary_search.cc:621] Evolve iter #2 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x119191d8)]: 2 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x91eb9d8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0xb6918a8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x10e07d28)]: 0 failure(s)
2024-04-29 05:15:10 [INFO] [evolutionary_search.cc:621] Evolve iter #3 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x119191d8)]: 2 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x91eb9d8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0xb6918a8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x10e07d28)]: 0 failure(s)
2024-04-29 05:15:17 [INFO] [evolutionary_search.cc:649] Scores of the best 64 candidates:
[1 : 16]:	1.0531  1.0063  0.9982  0.9980  0.9946  0.9886  0.9733  0.9732  0.9605  0.9563  0.9494  0.9489  0.9326  0.9318  0.9304  0.9224
[17 : 32]:	0.9224  0.9224  0.9205  0.9124  0.9117  0.9117  0.9117  0.9079  0.8989  0.8946  0.8944  0.8935  0.8907  0.8893  0.8779  0.8779
[33 : 48]:	0.8737  0.8725  0.8693  0.8693  0.8663  0.8642  0.8642  0.8528  0.8517  0.8513  0.8500  0.8476  0.8399  0.8372  0.8363  0.8355
[49 : 64]:	0.8333  0.8310  0.8303  0.8290  0.8264  0.8264  0.8264  0.8263  0.8259  0.8239  0.8237  0.8232  0.8229  0.8211  0.8211  0.8211
2024-04-29 05:15:18 [INFO] [evolutionary_search.cc:727] Got 64 candidate(s) with evolutionary search
2024-04-29 05:15:18 [INFO] [evolutionary_search.cc:730] Sending 64 candidates(s) for measurement
2024-04-29 05:16:49 [INFO] [task_scheduler.cc:131] [Task #81: fused_nn_contrib_conv2d_NCHWc_3] Trial #65: GFLOPs: 187.1697. Time: 2779.4288 us. Best GFLOPs: 192.3739
2024-04-29 05:16:49 [INFO] [task_scheduler.cc:131] [Task #81: fused_nn_contrib_conv2d_NCHWc_3] Trial #66: GFLOPs: 195.0368. Time: 2667.3158 us. Best GFLOPs: 195.0368
2024-04-29 05:16:49 [INFO] [task_scheduler.cc:131] [Task #81: fused_nn_contrib_conv2d_NCHWc_3] Trial #67: GFLOPs: 199.0705. Time: 2613.2693 us. Best GFLOPs: 199.0705
2024-04-29 05:16:49 [INFO] [task_scheduler.cc:131] [Task #81: fused_nn_contrib_conv2d_NCHWc_3] Trial #68: GFLOPs: 174.2878. Time: 2984.8603 us. Best GFLOPs: 199.0705
2024-04-29 05:16:49 [INFO] [task_scheduler.cc:131] [Task #81: fused_nn_contrib_conv2d_NCHWc_3] Trial #69: GFLOPs: 177.2301. Time: 2935.3064 us. Best GFLOPs: 199.0705
2024-04-29 05:16:49 [INFO] [task_scheduler.cc:131] [Task #81: fused_nn_contrib_conv2d_NCHWc_3] Trial #70: GFLOPs: 166.7303. Time: 3120.1580 us. Best GFLOPs: 199.0705
2024-04-29 05:16:49 [INFO] [task_scheduler.cc:131] [Task #81: fused_nn_contrib_conv2d_NCHWc_3] Trial #71: GFLOPs: 93.3977. Time: 5569.9983 us. Best GFLOPs: 199.0705
2024-04-29 05:16:49 [INFO] [task_scheduler.cc:131] [Task #81: fused_nn_contrib_conv2d_NCHWc_3] Trial #72: GFLOPs: 171.5924. Time: 3031.7472 us. Best GFLOPs: 199.0705
2024-04-29 05:16:49 [INFO] [task_scheduler.cc:131] [Task #81: fused_nn_contrib_conv2d_NCHWc_3] Trial #73: GFLOPs: 121.8817. Time: 4268.2754 us. Best GFLOPs: 199.0705
2024-04-29 05:16:49 [INFO] [task_scheduler.cc:131] [Task #81: fused_nn_contrib_conv2d_NCHWc_3] Trial #74: GFLOPs: 198.4502. Time: 2621.4371 us. Best GFLOPs: 199.0705
2024-04-29 05:16:49 [INFO] [task_scheduler.cc:131] [Task #81: fused_nn_contrib_conv2d_NCHWc_3] Trial #75: GFLOPs: 148.9124. Time: 3493.4955 us. Best GFLOPs: 199.0705
2024-04-29 05:16:49 [INFO] [task_scheduler.cc:131] [Task #81: fused_nn_contrib_conv2d_NCHWc_3] Trial #76: GFLOPs: 68.3586. Time: 7610.2270 us. Best GFLOPs: 199.0705
2024-04-29 05:16:49 [INFO] [task_scheduler.cc:131] [Task #81: fused_nn_contrib_conv2d_NCHWc_3] Trial #77: GFLOPs: 134.3810. Time: 3871.2670 us. Best GFLOPs: 199.0705
2024-04-29 05:16:49 [INFO] [task_scheduler.cc:131] [Task #81: fused_nn_contrib_conv2d_NCHWc_3] Trial #78: GFLOPs: 197.1938. Time: 2638.1394 us. Best GFLOPs: 199.0705
2024-04-29 05:16:49 [INFO] [task_scheduler.cc:131] [Task #81: fused_nn_contrib_conv2d_NCHWc_3] Trial #79: GFLOPs: 74.1897. Time: 7012.0851 us. Best GFLOPs: 199.0705
2024-04-29 05:16:49 [INFO] [task_scheduler.cc:131] [Task #81: fused_nn_contrib_conv2d_NCHWc_3] Trial #80: GFLOPs: 169.9637. Time: 3060.7999 us. Best GFLOPs: 199.0705
2024-04-29 05:16:49 [INFO] [task_scheduler.cc:131] [Task #81: fused_nn_contrib_conv2d_NCHWc_3] Trial #81: GFLOPs: 181.4627. Time: 2866.8406 us. Best GFLOPs: 199.0705
2024-04-29 05:16:49 [INFO] [task_scheduler.cc:131] [Task #81: fused_nn_contrib_conv2d_NCHWc_3] Trial #82: GFLOPs: 196.1317. Time: 2652.4251 us. Best GFLOPs: 199.0705
2024-04-29 05:16:49 [INFO] [task_scheduler.cc:131] [Task #81: fused_nn_contrib_conv2d_NCHWc_3] Trial #83: GFLOPs: 133.8965. Time: 3885.2752 us. Best GFLOPs: 199.0705
2024-04-29 05:16:49 [INFO] [task_scheduler.cc:131] [Task #81: fused_nn_contrib_conv2d_NCHWc_3] Trial #84: GFLOPs: 76.1155. Time: 6834.6754 us. Best GFLOPs: 199.0705
2024-04-29 05:16:49 [INFO] [task_scheduler.cc:131] [Task #81: fused_nn_contrib_conv2d_NCHWc_3] Trial #85: GFLOPs: 74.1032. Time: 7020.2708 us. Best GFLOPs: 199.0705
2024-04-29 05:16:49 [INFO] [task_scheduler.cc:131] [Task #81: fused_nn_contrib_conv2d_NCHWc_3] Trial #86: GFLOPs: 112.1441. Time: 4638.8971 us. Best GFLOPs: 199.0705
2024-04-29 05:16:49 [INFO] [task_scheduler.cc:131] [Task #81: fused_nn_contrib_conv2d_NCHWc_3] Trial #87: GFLOPs: 141.1785. Time: 3684.8716 us. Best GFLOPs: 199.0705
2024-04-29 05:16:49 [INFO] [task_scheduler.cc:131] [Task #81: fused_nn_contrib_conv2d_NCHWc_3] Trial #88: GFLOPs: 121.5918. Time: 4278.4522 us. Best GFLOPs: 199.0705
2024-04-29 05:16:49 [INFO] [task_scheduler.cc:131] [Task #81: fused_nn_contrib_conv2d_NCHWc_3] Trial #89: GFLOPs: 192.7951. Time: 2698.3300 us. Best GFLOPs: 199.0705
2024-04-29 05:16:49 [INFO] [task_scheduler.cc:131] [Task #81: fused_nn_contrib_conv2d_NCHWc_3] Trial #90: GFLOPs: 163.8289. Time: 3175.4147 us. Best GFLOPs: 199.0705
2024-04-29 05:16:49 [INFO] [task_scheduler.cc:131] [Task #81: fused_nn_contrib_conv2d_NCHWc_3] Trial #91: GFLOPs: 166.1094. Time: 3131.8193 us. Best GFLOPs: 199.0705
2024-04-29 05:16:49 [INFO] [task_scheduler.cc:131] [Task #81: fused_nn_contrib_conv2d_NCHWc_3] Trial #92: GFLOPs: 117.6505. Time: 4421.7823 us. Best GFLOPs: 199.0705
2024-04-29 05:16:49 [INFO] [task_scheduler.cc:131] [Task #81: fused_nn_contrib_conv2d_NCHWc_3] Trial #93: GFLOPs: 118.6748. Time: 4383.6176 us. Best GFLOPs: 199.0705
2024-04-29 05:16:49 [INFO] [task_scheduler.cc:131] [Task #81: fused_nn_contrib_conv2d_NCHWc_3] Trial #94: GFLOPs: 108.9174. Time: 4776.3233 us. Best GFLOPs: 199.0705
2024-04-29 05:16:49 [INFO] [task_scheduler.cc:131] [Task #81: fused_nn_contrib_conv2d_NCHWc_3] Trial #95: GFLOPs: 48.7540. Time: 10670.3910 us. Best GFLOPs: 199.0705
2024-04-29 05:16:49 [INFO] [task_scheduler.cc:131] [Task #81: fused_nn_contrib_conv2d_NCHWc_3] Trial #96: GFLOPs: 49.5705. Time: 10494.6443 us. Best GFLOPs: 199.0705
2024-04-29 05:16:49 [INFO] [task_scheduler.cc:131] [Task #81: fused_nn_contrib_conv2d_NCHWc_3] Trial #97: GFLOPs: 95.6853. Time: 5436.8299 us. Best GFLOPs: 199.0705
2024-04-29 05:16:49 [INFO] [task_scheduler.cc:131] [Task #81: fused_nn_contrib_conv2d_NCHWc_3] Trial #98: GFLOPs: 121.4396. Time: 4283.8152 us. Best GFLOPs: 199.0705
2024-04-29 05:16:49 [INFO] [task_scheduler.cc:131] [Task #81: fused_nn_contrib_conv2d_NCHWc_3] Trial #99: GFLOPs: 155.5513. Time: 3344.3930 us. Best GFLOPs: 199.0705
2024-04-29 05:16:49 [INFO] [task_scheduler.cc:131] [Task #81: fused_nn_contrib_conv2d_NCHWc_3] Trial #100: GFLOPs: 97.4654. Time: 5337.5321 us. Best GFLOPs: 199.0705
2024-04-29 05:16:49 [INFO] [task_scheduler.cc:131] [Task #81: fused_nn_contrib_conv2d_NCHWc_3] Trial #101: GFLOPs: 135.7661. Time: 3831.7714 us. Best GFLOPs: 199.0705
2024-04-29 05:16:49 [INFO] [task_scheduler.cc:131] [Task #81: fused_nn_contrib_conv2d_NCHWc_3] Trial #102: GFLOPs: 128.2410. Time: 4056.6196 us. Best GFLOPs: 199.0705
2024-04-29 05:16:49 [INFO] [task_scheduler.cc:131] [Task #81: fused_nn_contrib_conv2d_NCHWc_3] Trial #103: GFLOPs: 180.0838. Time: 2888.7931 us. Best GFLOPs: 199.0705
2024-04-29 05:16:49 [INFO] [task_scheduler.cc:131] [Task #81: fused_nn_contrib_conv2d_NCHWc_3] Trial #104: GFLOPs: 137.0194. Time: 3796.7230 us. Best GFLOPs: 199.0705
2024-04-29 05:16:49 [INFO] [task_scheduler.cc:131] [Task #81: fused_nn_contrib_conv2d_NCHWc_3] Trial #105: GFLOPs: 166.5681. Time: 3123.1965 us. Best GFLOPs: 199.0705
2024-04-29 05:16:49 [INFO] [task_scheduler.cc:131] [Task #81: fused_nn_contrib_conv2d_NCHWc_3] Trial #106: GFLOPs: 136.6719. Time: 3806.3764 us. Best GFLOPs: 199.0705
2024-04-29 05:16:49 [INFO] [task_scheduler.cc:131] [Task #81: fused_nn_contrib_conv2d_NCHWc_3] Trial #107: GFLOPs: 176.3802. Time: 2949.4509 us. Best GFLOPs: 199.0705
2024-04-29 05:16:49 [INFO] [task_scheduler.cc:131] [Task #81: fused_nn_contrib_conv2d_NCHWc_3] Trial #108: GFLOPs: 144.4275. Time: 3601.9784 us. Best GFLOPs: 199.0705
2024-04-29 05:16:49 [INFO] [task_scheduler.cc:131] [Task #81: fused_nn_contrib_conv2d_NCHWc_3] Trial #109: GFLOPs: 111.1476. Time: 4680.4875 us. Best GFLOPs: 199.0705
2024-04-29 05:16:49 [INFO] [task_scheduler.cc:131] [Task #81: fused_nn_contrib_conv2d_NCHWc_3] Trial #110: GFLOPs: 160.9848. Time: 3231.5150 us. Best GFLOPs: 199.0705
2024-04-29 05:16:49 [INFO] [task_scheduler.cc:131] [Task #81: fused_nn_contrib_conv2d_NCHWc_3] Trial #111: GFLOPs: 107.2416. Time: 4850.9588 us. Best GFLOPs: 199.0705
2024-04-29 05:16:49 [INFO] [task_scheduler.cc:121] [Task #81: fused_nn_contrib_conv2d_NCHWc_3] Trial #112: Error in building:
LocalBuilder: Timeout, killed after 30.0 seconds
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(48), T.int64(56), T.int64(56), T.int64(4)), "float32"), p1: T.Buffer((T.int64(12), T.int64(48), T.int64(3), T.int64(3), T.int64(4), T.int64(4)), "float32"), conv2d_NCHWc: T.Buffer((T.int64(1), T.int64(12), T.int64(56), T.int64(56), T.int64(4)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        data_pad = T.alloc_buffer((T.int64(1), T.int64(48), T.int64(58), T.int64(58), T.int64(4)))
        conv2d_NCHWc_global = T.alloc_buffer((T.int64(1), T.int64(12), T.int64(56), T.int64(56), T.int64(4)))
        for n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_fused_fused in T.parallel(T.int64(168), annotations={"pragma_auto_unroll_max_step": 512, "pragma_unroll_explicit": 1}):
            for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(48), T.int64(4), T.int64(58)):
                for ax4_fused in T.vectorized(T.int64(4)):
                    with T.block("data_pad"):
                        v_i0, v_i1 = T.axis.remap("SS", [ax0, ax1])
                        v_i2 = T.axis.spatial(T.int64(58), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_fused_fused % T.int64(84) // T.int64(3) * T.int64(2) + ax2)
                        v_i3, v_i4 = T.axis.remap("SS", [ax3, ax4_fused])
                        T.reads(p0[v_i0, v_i1, v_i2 - T.int64(1), v_i3 - T.int64(1), v_i4])
                        T.writes(data_pad[v_i0, v_i1, v_i2, v_i3, v_i4])
                        data_pad[v_i0, v_i1, v_i2, v_i3, v_i4] = T.if_then_else(T.int64(1) <= v_i2 and v_i2 < T.int64(57) and T.int64(1) <= v_i3 and v_i3 < T.int64(57), p0[v_i0, v_i1, v_i2 - T.int64(1), v_i3 - T.int64(1), v_i4], T.float32(0))
            for oh_1, ow_1, oc_block_1 in T.grid(T.int64(2), T.int64(14), T.int64(1)):
                for n_2_init, oc_chunk_2_init, oh_2_init, ow_2_init, oc_block_2_init, n_3_init, oc_chunk_3_init, oh_3_init, ow_3_init in T.grid(T.int64(1), T.int64(1), T.int64(1), T.int64(4), T.int64(2), T.int64(1), T.int64(2), T.int64(1), T.int64(1)):
                    for oc_block_3_fused_init in T.vectorized(T.int64(2)):
                        with T.block("conv2d_NCHWc_init"):
                            v_n = T.axis.spatial(T.int64(1), n_2_init + n_3_init)
                            v_oc_chunk = T.axis.spatial(T.int64(12), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_fused_fused // T.int64(84) * T.int64(6) + n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_fused_fused % T.int64(3) * T.int64(2) + oc_chunk_2_init * T.int64(2) + oc_chunk_3_init)
                            v_oh = T.axis.spatial(T.int64(56), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_fused_fused % T.int64(84) // T.int64(3) * T.int64(2) + oh_1 + oh_2_init + oh_3_init)
                            v_ow = T.axis.spatial(T.int64(56), ow_1 * T.int64(4) + ow_2_init + ow_3_init)
                            v_oc_block = T.axis.spatial(T.int64(4), oc_block_1 * T.int64(4) + oc_block_2_init * T.int64(2) + oc_block_3_fused_init)
                            T.reads()
                            T.writes(conv2d_NCHWc_global[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                            T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                            conv2d_NCHWc_global[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = T.float32(0)
                for ic_0, kh_0, kw_0, n_2, oc_chunk_2, oh_2, ow_2, oc_block_2, ic_1, kh_1, kw_1, n_3, oc_chunk_3, oh_3, ow_3 in T.grid(T.int64(12), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(4), T.int64(2), T.int64(16), T.int64(3), T.int64(3), T.int64(1), T.int64(2), T.int64(1), T.int64(1)):
                    for oc_block_3_fused in T.vectorized(T.int64(2)):
                        with T.block("conv2d_NCHWc_update"):
                            v_n = T.axis.spatial(T.int64(1), n_2 + n_3)
                            v_oc_chunk = T.axis.spatial(T.int64(12), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_fused_fused // T.int64(84) * T.int64(6) + n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_fused_fused % T.int64(3) * T.int64(2) + oc_chunk_2 * T.int64(2) + oc_chunk_3)
                            v_oh = T.axis.spatial(T.int64(56), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_fused_fused % T.int64(84) // T.int64(3) * T.int64(2) + oh_1 + oh_2 + oh_3)
                            v_ow = T.axis.spatial(T.int64(56), ow_1 * T.int64(4) + ow_2 + ow_3)
                            v_oc_block = T.axis.spatial(T.int64(4), oc_block_1 * T.int64(4) + oc_block_2 * T.int64(2) + oc_block_3_fused)
                            v_ic = T.axis.reduce(T.int64(192), ic_0 * T.int64(16) + ic_1)
                            v_kh = T.axis.reduce(T.int64(3), kh_0 * T.int64(3) + kh_1)
                            v_kw = T.axis.reduce(T.int64(3), kw_0 * T.int64(3) + kw_1)
                            T.reads(conv2d_NCHWc_global[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block], data_pad[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)], p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block])
                            T.writes(conv2d_NCHWc_global[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                            T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                            conv2d_NCHWc_global[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = conv2d_NCHWc_global[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] + data_pad[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)] * p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block]
                for ax0, ax1, ax2 in T.grid(T.int64(1), T.int64(2), T.int64(1)):
                    for ax3_ax4_fused in T.vectorized(T.int64(16)):
                        with T.block("conv2d_NCHWc_global"):
                            v0 = T.axis.spatial(T.int64(1), ax0)
                            v1 = T.axis.spatial(T.int64(12), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_fused_fused // T.int64(84) * T.int64(6) + n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_fused_fused % T.int64(3) * T.int64(2) + ax1)
                            v2 = T.axis.spatial(T.int64(56), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_fused_fused % T.int64(84) // T.int64(3) * T.int64(2) + oh_1 + ax2)
                            v3 = T.axis.spatial(T.int64(56), ow_1 * T.int64(4) + ax3_ax4_fused // T.int64(4))
                            v4 = T.axis.spatial(T.int64(4), ax3_ax4_fused % T.int64(4))
                            T.reads(conv2d_NCHWc_global[v0, v1, v2, v3, v4])
                            T.writes(conv2d_NCHWc[v0, v1, v2, v3, v4])
                            conv2d_NCHWc[v0, v1, v2, v3, v4] = conv2d_NCHWc_global[v0, v1, v2, v3, v4]
b0 = sch.get_block(name="data_pad", func_name="main")
b1 = sch.get_block(name="conv2d_NCHWc", func_name="main")
b2 = sch.get_block(name="root", func_name="main")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSRSRS")
l3, l4, l5, l6, l7, l8, l9, l10 = sch.get_loops(block=b1)
v11, v12, v13, v14 = sch.sample_perfect_tile(loop=l3, n=4, max_innermost_factor=64, decision=[1, 1, 1, 1])
l15, l16, l17, l18 = sch.split(loop=l3, factors=[v11, v12, v13, v14], preserve_unit_iters=True)
v19, v20, v21, v22 = sch.sample_perfect_tile(loop=l4, n=4, max_innermost_factor=64, decision=[2, 3, 1, 2])
l23, l24, l25, l26 = sch.split(loop=l4, factors=[v19, v20, v21, v22], preserve_unit_iters=True)
v27, v28, v29, v30 = sch.sample_perfect_tile(loop=l5, n=4, max_innermost_factor=64, decision=[28, 2, 1, 1])
l31, l32, l33, l34 = sch.split(loop=l5, factors=[v27, v28, v29, v30], preserve_unit_iters=True)
v35, v36, v37, v38 = sch.sample_perfect_tile(loop=l6, n=4, max_innermost_factor=64, decision=[1, 14, 4, 1])
l39, l40, l41, l42 = sch.split(loop=l6, factors=[v35, v36, v37, v38], preserve_unit_iters=True)
v43, v44, v45, v46 = sch.sample_perfect_tile(loop=l7, n=4, max_innermost_factor=64, decision=[1, 1, 2, 2])
l47, l48, l49, l50 = sch.split(loop=l7, factors=[v43, v44, v45, v46], preserve_unit_iters=True)
v51, v52 = sch.sample_perfect_tile(loop=l8, n=2, max_innermost_factor=64, decision=[12, 16])
l53, l54 = sch.split(loop=l8, factors=[v51, v52], preserve_unit_iters=True)
v55, v56 = sch.sample_perfect_tile(loop=l9, n=2, max_innermost_factor=64, decision=[1, 3])
l57, l58 = sch.split(loop=l9, factors=[v55, v56], preserve_unit_iters=True)
v59, v60 = sch.sample_perfect_tile(loop=l10, n=2, max_innermost_factor=64, decision=[1, 3])
l61, l62 = sch.split(loop=l10, factors=[v59, v60], preserve_unit_iters=True)
sch.reorder(l15, l23, l31, l39, l47, l16, l24, l32, l40, l48, l53, l57, l61, l17, l25, l33, l41, l49, l54, l58, l62, l18, l26, l34, l42, l50)
b63 = sch.cache_write(block=b1, write_buffer_index=0, storage_scope="global")
sch.reverse_compute_at(block=b63, loop=l48, preserve_unit_loops=True, index=-1)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.vectorize", ann_val=64)
v64 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.unroll_explicit", ann_val=v64)
l65 = sch.sample_compute_location(block=b0, decision=6)
sch.compute_at(block=b0, loop=l65, preserve_unit_loops=True, index=-1)
sch.enter_postproc()
b66 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b66, ann_key="meta_schedule.parallel")
sch.unannotate(block_or_loop=b66, ann_key="meta_schedule.vectorize")
sch.unannotate(block_or_loop=b66, ann_key="meta_schedule.unroll_explicit")
b67, b68, b69 = sch.get_child_blocks(b66)
l70, l71, l72, l73, l74, l75, l76, l77, l78, l79, l80, l81 = sch.get_loops(block=b67)
l82 = sch.fuse(l70, l71, l72, l73, l74, l75, l76, preserve_unit_iters=True)
sch.parallel(loop=l82)
l83 = sch.fuse(l81, preserve_unit_iters=True)
sch.vectorize(loop=l83)
l84, l85, l86, l87, l88, l89, l90, l91, l92, l93, l94, l95, l96, l97, l98, l99, l100, l101, l102, l103 = sch.get_loops(block=b68)
l104 = sch.fuse(l84, preserve_unit_iters=True)
sch.parallel(loop=l104)
l105 = sch.fuse(l103, preserve_unit_iters=True)
sch.vectorize(loop=l105)
sch.annotate(block_or_loop=l104, ann_key="pragma_auto_unroll_max_step", ann_val=512)
sch.annotate(block_or_loop=l104, ann_key="pragma_unroll_explicit", ann_val=1)
l106, l107, l108, l109, l110, l111, l112, l113, l114 = sch.get_loops(block=b69)
l115 = sch.fuse(l113, l114, preserve_unit_iters=True)
sch.vectorize(loop=l115)
b116 = sch.get_block(name="conv2d_NCHWc", func_name="main")
l117, l118, l119, l120, l121, l122, l123, l124, l125, l126, l127, l128, l129, l130, l131, l132, l133, l134, l135, l136 = sch.get_loops(block=b116)
b137 = sch.decompose_reduction(block=b116, loop=l121)
2024-04-29 05:16:49 [INFO] [task_scheduler.cc:131] [Task #81: fused_nn_contrib_conv2d_NCHWc_3] Trial #113: GFLOPs: 94.0882. Time: 5529.1197 us. Best GFLOPs: 199.0705
2024-04-29 05:16:49 [INFO] [task_scheduler.cc:131] [Task #81: fused_nn_contrib_conv2d_NCHWc_3] Trial #114: GFLOPs: 28.1127. Time: 18504.9685 us. Best GFLOPs: 199.0705
2024-04-29 05:16:49 [INFO] [task_scheduler.cc:131] [Task #81: fused_nn_contrib_conv2d_NCHWc_3] Trial #115: GFLOPs: 116.9933. Time: 4446.6199 us. Best GFLOPs: 199.0705
2024-04-29 05:16:49 [INFO] [task_scheduler.cc:131] [Task #81: fused_nn_contrib_conv2d_NCHWc_3] Trial #116: GFLOPs: 100.5269. Time: 5174.9784 us. Best GFLOPs: 199.0705
2024-04-29 05:16:49 [INFO] [task_scheduler.cc:131] [Task #81: fused_nn_contrib_conv2d_NCHWc_3] Trial #117: GFLOPs: 135.9862. Time: 3825.5713 us. Best GFLOPs: 199.0705
2024-04-29 05:16:49 [INFO] [task_scheduler.cc:131] [Task #81: fused_nn_contrib_conv2d_NCHWc_3] Trial #118: GFLOPs: 102.0588. Time: 5097.3041 us. Best GFLOPs: 199.0705
2024-04-29 05:16:49 [INFO] [task_scheduler.cc:131] [Task #81: fused_nn_contrib_conv2d_NCHWc_3] Trial #119: GFLOPs: 95.8570. Time: 5427.0907 us. Best GFLOPs: 199.0705
2024-04-29 05:16:49 [INFO] [task_scheduler.cc:131] [Task #81: fused_nn_contrib_conv2d_NCHWc_3] Trial #120: GFLOPs: 152.5501. Time: 3410.1906 us. Best GFLOPs: 199.0705
2024-04-29 05:16:49 [INFO] [task_scheduler.cc:131] [Task #81: fused_nn_contrib_conv2d_NCHWc_3] Trial #121: GFLOPs: 81.8962. Time: 6352.2449 us. Best GFLOPs: 199.0705
2024-04-29 05:16:49 [INFO] [task_scheduler.cc:131] [Task #81: fused_nn_contrib_conv2d_NCHWc_3] Trial #122: GFLOPs: 75.2325. Time: 6914.8973 us. Best GFLOPs: 199.0705
2024-04-29 05:16:49 [INFO] [task_scheduler.cc:131] [Task #81: fused_nn_contrib_conv2d_NCHWc_3] Trial #123: GFLOPs: 122.5394. Time: 4245.3688 us. Best GFLOPs: 199.0705
2024-04-29 05:16:49 [INFO] [task_scheduler.cc:131] [Task #81: fused_nn_contrib_conv2d_NCHWc_3] Trial #124: GFLOPs: 128.0908. Time: 4061.3755 us. Best GFLOPs: 199.0705
2024-04-29 05:16:49 [INFO] [task_scheduler.cc:131] [Task #81: fused_nn_contrib_conv2d_NCHWc_3] Trial #125: GFLOPs: 109.7321. Time: 4740.8643 us. Best GFLOPs: 199.0705
2024-04-29 05:16:49 [INFO] [task_scheduler.cc:131] [Task #81: fused_nn_contrib_conv2d_NCHWc_3] Trial #126: GFLOPs: 33.2330. Time: 15653.8377 us. Best GFLOPs: 199.0705
2024-04-29 05:16:49 [INFO] [task_scheduler.cc:131] [Task #81: fused_nn_contrib_conv2d_NCHWc_3] Trial #127: GFLOPs: 41.0123. Time: 12684.5963 us. Best GFLOPs: 199.0705
2024-04-29 05:16:49 [INFO] [task_scheduler.cc:131] [Task #81: fused_nn_contrib_conv2d_NCHWc_3] Trial #128: GFLOPs: 136.0882. Time: 3822.7042 us. Best GFLOPs: 199.0705
2024-04-29 05:21:59 [INFO] [evolutionary_search.cc:713] Generating candidates......
2024-04-29 05:22:00 [INFO] [evolutionary_search.cc:715] Picked top 102 candidate(s) from database
2024-04-29 05:22:04 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x119191d8)]: 7 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x91eb9d8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0xb6918a8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x10e07d28)]: 0 failure(s)
2024-04-29 05:22:04 [INFO] [evolutionary_search.cc:723] Sampled 403 candidate(s)
2024-04-29 05:22:17 [INFO] [evolutionary_search.cc:621] Evolve iter #0 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x119191d8)]: 1 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x91eb9d8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0xb6918a8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x10e07d28)]: 0 failure(s)
2024-04-29 05:22:29 [INFO] [evolutionary_search.cc:621] Evolve iter #1 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x119191d8)]: 1 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x91eb9d8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0xb6918a8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x10e07d28)]: 0 failure(s)
2024-04-29 05:22:42 [INFO] [evolutionary_search.cc:621] Evolve iter #2 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x119191d8)]: 3 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x91eb9d8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0xb6918a8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x10e07d28)]: 0 failure(s)
2024-04-29 05:22:55 [INFO] [evolutionary_search.cc:621] Evolve iter #3 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x119191d8)]: 3 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x91eb9d8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0xb6918a8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x10e07d28)]: 0 failure(s)
2024-04-29 05:23:02 [INFO] [evolutionary_search.cc:649] Scores of the best 64 candidates:
[1 : 16]:	0.9897  0.9897  0.9767  0.9767  0.9700  0.9700  0.9673  0.9503  0.9482  0.9319  0.9304  0.9278  0.9278  0.9237  0.9237  0.9227
[17 : 32]:	0.9225  0.9225  0.9160  0.9121  0.9121  0.9121  0.9121  0.9096  0.9014  0.9014  0.9012  0.8987  0.8955  0.8934  0.8919  0.8919
[33 : 48]:	0.8919  0.8900  0.8874  0.8874  0.8871  0.8818  0.8801  0.8782  0.8704  0.8700  0.8686  0.8682  0.8672  0.8672  0.8663  0.8646
[49 : 64]:	0.8609  0.8565  0.8484  0.8473  0.8469  0.8469  0.8454  0.8419  0.8419  0.8419  0.8413  0.8413  0.8411  0.8391  0.8381  0.8380
2024-04-29 05:23:02 [INFO] [evolutionary_search.cc:727] Got 64 candidate(s) with evolutionary search
2024-04-29 05:23:02 [INFO] [evolutionary_search.cc:730] Sending 64 candidates(s) for measurement
2024-04-29 05:24:34 [INFO] [task_scheduler.cc:131] [Task #81: fused_nn_contrib_conv2d_NCHWc_3] Trial #129: GFLOPs: 101.1184. Time: 5144.7089 us. Best GFLOPs: 199.0705
2024-04-29 05:24:34 [INFO] [task_scheduler.cc:131] [Task #81: fused_nn_contrib_conv2d_NCHWc_3] Trial #130: GFLOPs: 194.5904. Time: 2673.4344 us. Best GFLOPs: 199.0705
2024-04-29 05:24:34 [INFO] [task_scheduler.cc:131] [Task #81: fused_nn_contrib_conv2d_NCHWc_3] Trial #131: GFLOPs: 273.4919. Time: 1902.1575 us. Best GFLOPs: 273.4919
2024-04-29 05:24:34 [INFO] [task_scheduler.cc:131] [Task #81: fused_nn_contrib_conv2d_NCHWc_3] Trial #132: GFLOPs: 272.1535. Time: 1911.5123 us. Best GFLOPs: 273.4919
2024-04-29 05:24:34 [INFO] [task_scheduler.cc:131] [Task #81: fused_nn_contrib_conv2d_NCHWc_3] Trial #133: GFLOPs: 217.7004. Time: 2389.6360 us. Best GFLOPs: 273.4919
2024-04-29 05:24:34 [INFO] [task_scheduler.cc:131] [Task #81: fused_nn_contrib_conv2d_NCHWc_3] Trial #134: GFLOPs: 185.5630. Time: 2803.4944 us. Best GFLOPs: 273.4919
2024-04-29 05:24:34 [INFO] [task_scheduler.cc:131] [Task #81: fused_nn_contrib_conv2d_NCHWc_3] Trial #135: GFLOPs: 204.7097. Time: 2541.2809 us. Best GFLOPs: 273.4919
2024-04-29 05:24:34 [INFO] [task_scheduler.cc:131] [Task #81: fused_nn_contrib_conv2d_NCHWc_3] Trial #136: GFLOPs: 195.7824. Time: 2657.1577 us. Best GFLOPs: 273.4919
2024-04-29 05:24:34 [INFO] [task_scheduler.cc:131] [Task #81: fused_nn_contrib_conv2d_NCHWc_3] Trial #137: GFLOPs: 193.8000. Time: 2684.3379 us. Best GFLOPs: 273.4919
2024-04-29 05:24:34 [INFO] [task_scheduler.cc:131] [Task #81: fused_nn_contrib_conv2d_NCHWc_3] Trial #138: GFLOPs: 195.8362. Time: 2656.4277 us. Best GFLOPs: 273.4919
2024-04-29 05:24:34 [INFO] [task_scheduler.cc:131] [Task #81: fused_nn_contrib_conv2d_NCHWc_3] Trial #139: GFLOPs: 272.6548. Time: 1907.9976 us. Best GFLOPs: 273.4919
2024-04-29 05:24:34 [INFO] [task_scheduler.cc:121] [Task #81: fused_nn_contrib_conv2d_NCHWc_3] Trial #140: Error in building:
LocalBuilder: Timeout, killed after 30.0 seconds
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(48), T.int64(56), T.int64(56), T.int64(4)), "float32"), p1: T.Buffer((T.int64(12), T.int64(48), T.int64(3), T.int64(3), T.int64(4), T.int64(4)), "float32"), conv2d_NCHWc: T.Buffer((T.int64(1), T.int64(12), T.int64(56), T.int64(56), T.int64(4)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        data_pad = T.alloc_buffer((T.int64(1), T.int64(48), T.int64(58), T.int64(58), T.int64(4)))
        for n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_fused_fused in T.parallel(T.int64(224), annotations={"pragma_auto_unroll_max_step": 512, "pragma_unroll_explicit": 1}):
            for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(48), T.int64(4), T.int64(30)):
                for ax4_fused in T.vectorized(T.int64(4)):
                    with T.block("data_pad"):
                        v_i0, v_i1 = T.axis.remap("SS", [ax0, ax1])
                        v_i2 = T.axis.spatial(T.int64(58), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_fused_fused // T.int64(32) * T.int64(8) + n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_fused_fused % T.int64(4) * T.int64(2) + ax2)
                        v_i3 = T.axis.spatial(T.int64(58), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_fused_fused % T.int64(32) // T.int64(16) * T.int64(28) + ax3)
                        v_i4 = T.axis.spatial(T.int64(4), ax4_fused)
                        T.reads(p0[v_i0, v_i1, v_i2 - T.int64(1), v_i3 - T.int64(1), v_i4])
                        T.writes(data_pad[v_i0, v_i1, v_i2, v_i3, v_i4])
                        data_pad[v_i0, v_i1, v_i2, v_i3, v_i4] = T.if_then_else(T.int64(1) <= v_i2 and v_i2 < T.int64(57) and T.int64(1) <= v_i3 and v_i3 < T.int64(57), p0[v_i0, v_i1, v_i2 - T.int64(1), v_i3 - T.int64(1), v_i4], T.float32(0))
            for ow_1, oc_block_1 in T.grid(T.int64(2), T.int64(1)):
                for n_2_init, oc_chunk_2_init, oh_2_init, ow_2_init, oc_block_2_init, n_3_init, oc_chunk_3_init, oh_3_init, ow_3_init, oc_block_3_init in T.grid(T.int64(1), T.int64(6), T.int64(2), T.int64(2), T.int64(1), T.int64(1), T.int64(2), T.int64(1), T.int64(7), T.int64(1)):
                    with T.block("conv2d_NCHWc_init"):
                        v_n = T.axis.spatial(T.int64(1), n_2_init + n_3_init)
                        v_oc_chunk = T.axis.spatial(T.int64(12), oc_chunk_2_init * T.int64(2) + oc_chunk_3_init)
                        v_oh = T.axis.spatial(T.int64(56), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_fused_fused // T.int64(32) * T.int64(8) + n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_fused_fused % T.int64(4) * T.int64(2) + oh_2_init + oh_3_init)
                        v_ow = T.axis.spatial(T.int64(56), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_fused_fused % T.int64(32) // T.int64(16) * T.int64(28) + ow_1 * T.int64(14) + ow_2_init * T.int64(7) + ow_3_init)
                        v_oc_block = T.axis.spatial(T.int64(4), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_fused_fused % T.int64(16) // T.int64(4) + oc_block_1 + oc_block_2_init + oc_block_3_init)
                        T.reads()
                        T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                        T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                        conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = T.float32(0)
                for ic_0, kh_0, kw_0, n_2, oc_chunk_2, oh_2, ow_2, oc_block_2, ic_1, kh_1, kw_1, n_3, oc_chunk_3, oh_3, ow_3, oc_block_3 in T.grid(T.int64(16), T.int64(1), T.int64(3), T.int64(1), T.int64(6), T.int64(2), T.int64(2), T.int64(1), T.int64(12), T.int64(3), T.int64(1), T.int64(1), T.int64(2), T.int64(1), T.int64(7), T.int64(1)):
                    with T.block("conv2d_NCHWc_update"):
                        v_n = T.axis.spatial(T.int64(1), n_2 + n_3)
                        v_oc_chunk = T.axis.spatial(T.int64(12), oc_chunk_2 * T.int64(2) + oc_chunk_3)
                        v_oh = T.axis.spatial(T.int64(56), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_fused_fused // T.int64(32) * T.int64(8) + n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_fused_fused % T.int64(4) * T.int64(2) + oh_2 + oh_3)
                        v_ow = T.axis.spatial(T.int64(56), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_fused_fused % T.int64(32) // T.int64(16) * T.int64(28) + ow_1 * T.int64(14) + ow_2 * T.int64(7) + ow_3)
                        v_oc_block = T.axis.spatial(T.int64(4), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_fused_fused % T.int64(16) // T.int64(4) + oc_block_1 + oc_block_2 + oc_block_3)
                        v_ic = T.axis.reduce(T.int64(192), ic_0 * T.int64(12) + ic_1)
                        v_kh = T.axis.reduce(T.int64(3), kh_0 * T.int64(3) + kh_1)
                        v_kw = T.axis.reduce(T.int64(3), kw_0 + kw_1)
                        T.reads(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block], data_pad[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)], p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block])
                        T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                        T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                        conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] + data_pad[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)] * p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block]
b0 = sch.get_block(name="data_pad", func_name="main")
b1 = sch.get_block(name="conv2d_NCHWc", func_name="main")
b2 = sch.get_block(name="root", func_name="main")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSRSRS")
l3, l4, l5, l6, l7, l8, l9, l10 = sch.get_loops(block=b1)
v11, v12, v13, v14 = sch.sample_perfect_tile(loop=l3, n=4, max_innermost_factor=64, decision=[1, 1, 1, 1])
l15, l16, l17, l18 = sch.split(loop=l3, factors=[v11, v12, v13, v14], preserve_unit_iters=True)
v19, v20, v21, v22 = sch.sample_perfect_tile(loop=l4, n=4, max_innermost_factor=64, decision=[1, 1, 6, 2])
l23, l24, l25, l26 = sch.split(loop=l4, factors=[v19, v20, v21, v22], preserve_unit_iters=True)
v27, v28, v29, v30 = sch.sample_perfect_tile(loop=l5, n=4, max_innermost_factor=64, decision=[7, 4, 2, 1])
l31, l32, l33, l34 = sch.split(loop=l5, factors=[v27, v28, v29, v30], preserve_unit_iters=True)
v35, v36, v37, v38 = sch.sample_perfect_tile(loop=l6, n=4, max_innermost_factor=64, decision=[2, 2, 2, 7])
l39, l40, l41, l42 = sch.split(loop=l6, factors=[v35, v36, v37, v38], preserve_unit_iters=True)
v43, v44, v45, v46 = sch.sample_perfect_tile(loop=l7, n=4, max_innermost_factor=64, decision=[4, 1, 1, 1])
l47, l48, l49, l50 = sch.split(loop=l7, factors=[v43, v44, v45, v46], preserve_unit_iters=True)
v51, v52 = sch.sample_perfect_tile(loop=l8, n=2, max_innermost_factor=64, decision=[16, 12])
l53, l54 = sch.split(loop=l8, factors=[v51, v52], preserve_unit_iters=True)
v55, v56 = sch.sample_perfect_tile(loop=l9, n=2, max_innermost_factor=64, decision=[1, 3])
l57, l58 = sch.split(loop=l9, factors=[v55, v56], preserve_unit_iters=True)
v59, v60 = sch.sample_perfect_tile(loop=l10, n=2, max_innermost_factor=64, decision=[3, 1])
l61, l62 = sch.split(loop=l10, factors=[v59, v60], preserve_unit_iters=True)
sch.reorder(l15, l23, l31, l39, l47, l16, l24, l32, l40, l48, l53, l57, l61, l17, l25, l33, l41, l49, l54, l58, l62, l18, l26, l34, l42, l50)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.vectorize", ann_val=64)
v63 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.unroll_explicit", ann_val=v63)
l64 = sch.sample_compute_location(block=b0, decision=7)
sch.compute_at(block=b0, loop=l64, preserve_unit_loops=True, index=-1)
sch.enter_postproc()
b65 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b65, ann_key="meta_schedule.parallel")
sch.unannotate(block_or_loop=b65, ann_key="meta_schedule.vectorize")
sch.unannotate(block_or_loop=b65, ann_key="meta_schedule.unroll_explicit")
b66, b67 = sch.get_child_blocks(b65)
l68, l69, l70, l71, l72, l73, l74, l75, l76, l77, l78, l79, l80 = sch.get_loops(block=b66)
l81 = sch.fuse(l68, l69, l70, l71, l72, l73, l74, l75, preserve_unit_iters=True)
sch.parallel(loop=l81)
l82 = sch.fuse(l80, preserve_unit_iters=True)
sch.vectorize(loop=l82)
l83, l84, l85, l86, l87, l88, l89, l90, l91, l92, l93, l94, l95, l96, l97, l98, l99, l100, l101 = sch.get_loops(block=b67)
l102 = sch.fuse(l83, preserve_unit_iters=True)
sch.parallel(loop=l102)
sch.annotate(block_or_loop=l102, ann_key="pragma_auto_unroll_max_step", ann_val=512)
sch.annotate(block_or_loop=l102, ann_key="pragma_unroll_explicit", ann_val=1)
b103 = sch.get_block(name="conv2d_NCHWc", func_name="main")
l104, l105, l106, l107, l108, l109, l110, l111, l112, l113, l114, l115, l116, l117, l118, l119, l120, l121, l122 = sch.get_loops(block=b103)
b123 = sch.decompose_reduction(block=b103, loop=l107)
2024-04-29 05:24:34 [INFO] [task_scheduler.cc:131] [Task #81: fused_nn_contrib_conv2d_NCHWc_3] Trial #141: GFLOPs: 192.6074. Time: 2700.9599 us. Best GFLOPs: 273.4919
2024-04-29 05:24:34 [INFO] [task_scheduler.cc:131] [Task #81: fused_nn_contrib_conv2d_NCHWc_3] Trial #142: GFLOPs: 161.9324. Time: 3212.6040 us. Best GFLOPs: 273.4919
2024-04-29 05:24:34 [INFO] [task_scheduler.cc:131] [Task #81: fused_nn_contrib_conv2d_NCHWc_3] Trial #143: GFLOPs: 122.4085. Time: 4249.9075 us. Best GFLOPs: 273.4919
2024-04-29 05:24:34 [INFO] [task_scheduler.cc:131] [Task #81: fused_nn_contrib_conv2d_NCHWc_3] Trial #144: GFLOPs: 115.5980. Time: 4500.2911 us. Best GFLOPs: 273.4919
2024-04-29 05:24:34 [INFO] [task_scheduler.cc:131] [Task #81: fused_nn_contrib_conv2d_NCHWc_3] Trial #145: GFLOPs: 156.8405. Time: 3316.9032 us. Best GFLOPs: 273.4919
2024-04-29 05:24:34 [INFO] [task_scheduler.cc:131] [Task #81: fused_nn_contrib_conv2d_NCHWc_3] Trial #146: GFLOPs: 154.1426. Time: 3374.9568 us. Best GFLOPs: 273.4919
2024-04-29 05:24:34 [INFO] [task_scheduler.cc:131] [Task #81: fused_nn_contrib_conv2d_NCHWc_3] Trial #147: GFLOPs: 54.4756. Time: 9549.6917 us. Best GFLOPs: 273.4919
2024-04-29 05:24:34 [INFO] [task_scheduler.cc:131] [Task #81: fused_nn_contrib_conv2d_NCHWc_3] Trial #148: GFLOPs: 88.9310. Time: 5849.7579 us. Best GFLOPs: 273.4919
2024-04-29 05:24:34 [INFO] [task_scheduler.cc:131] [Task #81: fused_nn_contrib_conv2d_NCHWc_3] Trial #149: GFLOPs: 169.6966. Time: 3065.6177 us. Best GFLOPs: 273.4919
2024-04-29 05:24:34 [INFO] [task_scheduler.cc:131] [Task #81: fused_nn_contrib_conv2d_NCHWc_3] Trial #150: GFLOPs: 150.0285. Time: 3467.5054 us. Best GFLOPs: 273.4919
2024-04-29 05:24:34 [INFO] [task_scheduler.cc:131] [Task #81: fused_nn_contrib_conv2d_NCHWc_3] Trial #151: GFLOPs: 184.5072. Time: 2819.5357 us. Best GFLOPs: 273.4919
2024-04-29 05:24:34 [INFO] [task_scheduler.cc:131] [Task #81: fused_nn_contrib_conv2d_NCHWc_3] Trial #152: GFLOPs: 200.2555. Time: 2597.8057 us. Best GFLOPs: 273.4919
2024-04-29 05:24:34 [INFO] [task_scheduler.cc:131] [Task #81: fused_nn_contrib_conv2d_NCHWc_3] Trial #153: GFLOPs: 207.9201. Time: 2502.0413 us. Best GFLOPs: 273.4919
2024-04-29 05:24:34 [INFO] [task_scheduler.cc:131] [Task #81: fused_nn_contrib_conv2d_NCHWc_3] Trial #154: GFLOPs: 163.2353. Time: 3186.9622 us. Best GFLOPs: 273.4919
2024-04-29 05:24:34 [INFO] [task_scheduler.cc:131] [Task #81: fused_nn_contrib_conv2d_NCHWc_3] Trial #155: GFLOPs: 133.0721. Time: 3909.3451 us. Best GFLOPs: 273.4919
2024-04-29 05:24:34 [INFO] [task_scheduler.cc:131] [Task #81: fused_nn_contrib_conv2d_NCHWc_3] Trial #156: GFLOPs: 81.3862. Time: 6392.0539 us. Best GFLOPs: 273.4919
2024-04-29 05:24:34 [INFO] [task_scheduler.cc:131] [Task #81: fused_nn_contrib_conv2d_NCHWc_3] Trial #157: GFLOPs: 114.9106. Time: 4527.2128 us. Best GFLOPs: 273.4919
2024-04-29 05:24:34 [INFO] [task_scheduler.cc:131] [Task #81: fused_nn_contrib_conv2d_NCHWc_3] Trial #158: GFLOPs: 122.1269. Time: 4259.7067 us. Best GFLOPs: 273.4919
2024-04-29 05:24:34 [INFO] [task_scheduler.cc:131] [Task #81: fused_nn_contrib_conv2d_NCHWc_3] Trial #159: GFLOPs: 175.9245. Time: 2957.0905 us. Best GFLOPs: 273.4919
2024-04-29 05:24:34 [INFO] [task_scheduler.cc:131] [Task #81: fused_nn_contrib_conv2d_NCHWc_3] Trial #160: GFLOPs: 163.2051. Time: 3187.5516 us. Best GFLOPs: 273.4919
2024-04-29 05:24:34 [INFO] [task_scheduler.cc:131] [Task #81: fused_nn_contrib_conv2d_NCHWc_3] Trial #161: GFLOPs: 153.7821. Time: 3382.8692 us. Best GFLOPs: 273.4919
2024-04-29 05:24:34 [INFO] [task_scheduler.cc:131] [Task #81: fused_nn_contrib_conv2d_NCHWc_3] Trial #162: GFLOPs: 140.3682. Time: 3706.1448 us. Best GFLOPs: 273.4919
2024-04-29 05:24:34 [INFO] [task_scheduler.cc:131] [Task #81: fused_nn_contrib_conv2d_NCHWc_3] Trial #163: GFLOPs: 227.1116. Time: 2290.6133 us. Best GFLOPs: 273.4919
2024-04-29 05:24:34 [INFO] [task_scheduler.cc:131] [Task #81: fused_nn_contrib_conv2d_NCHWc_3] Trial #164: GFLOPs: 110.0811. Time: 4725.8309 us. Best GFLOPs: 273.4919
2024-04-29 05:24:34 [INFO] [task_scheduler.cc:131] [Task #81: fused_nn_contrib_conv2d_NCHWc_3] Trial #165: GFLOPs: 246.3467. Time: 2111.7589 us. Best GFLOPs: 273.4919
2024-04-29 05:24:34 [INFO] [task_scheduler.cc:131] [Task #81: fused_nn_contrib_conv2d_NCHWc_3] Trial #166: GFLOPs: 149.0352. Time: 3490.6177 us. Best GFLOPs: 273.4919
2024-04-29 05:24:34 [INFO] [task_scheduler.cc:131] [Task #81: fused_nn_contrib_conv2d_NCHWc_3] Trial #167: GFLOPs: 138.1083. Time: 3766.7873 us. Best GFLOPs: 273.4919
2024-04-29 05:24:34 [INFO] [task_scheduler.cc:131] [Task #81: fused_nn_contrib_conv2d_NCHWc_3] Trial #168: GFLOPs: 201.6209. Time: 2580.2127 us. Best GFLOPs: 273.4919
2024-04-29 05:24:34 [INFO] [task_scheduler.cc:131] [Task #81: fused_nn_contrib_conv2d_NCHWc_3] Trial #169: GFLOPs: 99.6992. Time: 5217.9416 us. Best GFLOPs: 273.4919
2024-04-29 05:24:34 [INFO] [task_scheduler.cc:121] [Task #81: fused_nn_contrib_conv2d_NCHWc_3] Trial #170: Error in building:
LocalBuilder: Timeout, killed after 30.0 seconds
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(48), T.int64(56), T.int64(56), T.int64(4)), "float32"), p1: T.Buffer((T.int64(12), T.int64(48), T.int64(3), T.int64(3), T.int64(4), T.int64(4)), "float32"), conv2d_NCHWc: T.Buffer((T.int64(1), T.int64(12), T.int64(56), T.int64(56), T.int64(4)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        data_pad = T.alloc_buffer((T.int64(1), T.int64(48), T.int64(58), T.int64(58), T.int64(4)))
        conv2d_NCHWc_global = T.alloc_buffer((T.int64(1), T.int64(12), T.int64(56), T.int64(56), T.int64(4)))
        for n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_fused_fused in T.parallel(T.int64(168), annotations={"pragma_auto_unroll_max_step": 512, "pragma_unroll_explicit": 1}):
            for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(48), T.int64(4), T.int64(58)):
                for ax4_fused in T.vectorized(T.int64(4)):
                    with T.block("data_pad"):
                        v_i0, v_i1 = T.axis.remap("SS", [ax0, ax1])
                        v_i2 = T.axis.spatial(T.int64(58), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_fused_fused % T.int64(84) // T.int64(3) * T.int64(2) + ax2)
                        v_i3, v_i4 = T.axis.remap("SS", [ax3, ax4_fused])
                        T.reads(p0[v_i0, v_i1, v_i2 - T.int64(1), v_i3 - T.int64(1), v_i4])
                        T.writes(data_pad[v_i0, v_i1, v_i2, v_i3, v_i4])
                        data_pad[v_i0, v_i1, v_i2, v_i3, v_i4] = T.if_then_else(T.int64(1) <= v_i2 and v_i2 < T.int64(57) and T.int64(1) <= v_i3 and v_i3 < T.int64(57), p0[v_i0, v_i1, v_i2 - T.int64(1), v_i3 - T.int64(1), v_i4], T.float32(0))
            for oh_1, ow_1, oc_block_1 in T.grid(T.int64(2), T.int64(14), T.int64(1)):
                for n_2_init, oc_chunk_2_init, oh_2_init, ow_2_init, oc_block_2_init, n_3_init, oc_chunk_3_init, oh_3_init, ow_3_init in T.grid(T.int64(1), T.int64(1), T.int64(1), T.int64(4), T.int64(1), T.int64(1), T.int64(2), T.int64(1), T.int64(1)):
                    for oc_block_3_fused_init in T.vectorized(T.int64(4)):
                        with T.block("conv2d_NCHWc_init"):
                            v_n = T.axis.spatial(T.int64(1), n_2_init + n_3_init)
                            v_oc_chunk = T.axis.spatial(T.int64(12), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_fused_fused // T.int64(84) * T.int64(6) + n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_fused_fused % T.int64(3) * T.int64(2) + oc_chunk_2_init * T.int64(2) + oc_chunk_3_init)
                            v_oh = T.axis.spatial(T.int64(56), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_fused_fused % T.int64(84) // T.int64(3) * T.int64(2) + oh_1 + oh_2_init + oh_3_init)
                            v_ow = T.axis.spatial(T.int64(56), ow_1 * T.int64(4) + ow_2_init + ow_3_init)
                            v_oc_block = T.axis.spatial(T.int64(4), oc_block_1 * T.int64(4) + oc_block_2_init * T.int64(4) + oc_block_3_fused_init)
                            T.reads()
                            T.writes(conv2d_NCHWc_global[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                            T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                            conv2d_NCHWc_global[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = T.float32(0)
                for ic_0, kh_0, kw_0, n_2, oc_chunk_2, oh_2, ow_2, oc_block_2, ic_1, kh_1, kw_1, n_3, oc_chunk_3, oh_3, ow_3 in T.grid(T.int64(12), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(4), T.int64(1), T.int64(16), T.int64(3), T.int64(3), T.int64(1), T.int64(2), T.int64(1), T.int64(1)):
                    for oc_block_3_fused in T.vectorized(T.int64(4)):
                        with T.block("conv2d_NCHWc_update"):
                            v_n = T.axis.spatial(T.int64(1), n_2 + n_3)
                            v_oc_chunk = T.axis.spatial(T.int64(12), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_fused_fused // T.int64(84) * T.int64(6) + n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_fused_fused % T.int64(3) * T.int64(2) + oc_chunk_2 * T.int64(2) + oc_chunk_3)
                            v_oh = T.axis.spatial(T.int64(56), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_fused_fused % T.int64(84) // T.int64(3) * T.int64(2) + oh_1 + oh_2 + oh_3)
                            v_ow = T.axis.spatial(T.int64(56), ow_1 * T.int64(4) + ow_2 + ow_3)
                            v_oc_block = T.axis.spatial(T.int64(4), oc_block_1 * T.int64(4) + oc_block_2 * T.int64(4) + oc_block_3_fused)
                            v_ic = T.axis.reduce(T.int64(192), ic_0 * T.int64(16) + ic_1)
                            v_kh = T.axis.reduce(T.int64(3), kh_0 * T.int64(3) + kh_1)
                            v_kw = T.axis.reduce(T.int64(3), kw_0 * T.int64(3) + kw_1)
                            T.reads(conv2d_NCHWc_global[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block], data_pad[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)], p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block])
                            T.writes(conv2d_NCHWc_global[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                            T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                            conv2d_NCHWc_global[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = conv2d_NCHWc_global[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] + data_pad[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)] * p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block]
                for ax0, ax1, ax2 in T.grid(T.int64(1), T.int64(2), T.int64(1)):
                    for ax3_ax4_fused in T.vectorized(T.int64(16)):
                        with T.block("conv2d_NCHWc_global"):
                            v0 = T.axis.spatial(T.int64(1), ax0)
                            v1 = T.axis.spatial(T.int64(12), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_fused_fused // T.int64(84) * T.int64(6) + n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_fused_fused % T.int64(3) * T.int64(2) + ax1)
                            v2 = T.axis.spatial(T.int64(56), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_fused_fused % T.int64(84) // T.int64(3) * T.int64(2) + oh_1 + ax2)
                            v3 = T.axis.spatial(T.int64(56), ow_1 * T.int64(4) + ax3_ax4_fused // T.int64(4))
                            v4 = T.axis.spatial(T.int64(4), ax3_ax4_fused % T.int64(4))
                            T.reads(conv2d_NCHWc_global[v0, v1, v2, v3, v4])
                            T.writes(conv2d_NCHWc[v0, v1, v2, v3, v4])
                            conv2d_NCHWc[v0, v1, v2, v3, v4] = conv2d_NCHWc_global[v0, v1, v2, v3, v4]
b0 = sch.get_block(name="data_pad", func_name="main")
b1 = sch.get_block(name="conv2d_NCHWc", func_name="main")
b2 = sch.get_block(name="root", func_name="main")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSRSRS")
l3, l4, l5, l6, l7, l8, l9, l10 = sch.get_loops(block=b1)
v11, v12, v13, v14 = sch.sample_perfect_tile(loop=l3, n=4, max_innermost_factor=64, decision=[1, 1, 1, 1])
l15, l16, l17, l18 = sch.split(loop=l3, factors=[v11, v12, v13, v14], preserve_unit_iters=True)
v19, v20, v21, v22 = sch.sample_perfect_tile(loop=l4, n=4, max_innermost_factor=64, decision=[2, 3, 1, 2])
l23, l24, l25, l26 = sch.split(loop=l4, factors=[v19, v20, v21, v22], preserve_unit_iters=True)
v27, v28, v29, v30 = sch.sample_perfect_tile(loop=l5, n=4, max_innermost_factor=64, decision=[28, 2, 1, 1])
l31, l32, l33, l34 = sch.split(loop=l5, factors=[v27, v28, v29, v30], preserve_unit_iters=True)
v35, v36, v37, v38 = sch.sample_perfect_tile(loop=l6, n=4, max_innermost_factor=64, decision=[1, 14, 4, 1])
l39, l40, l41, l42 = sch.split(loop=l6, factors=[v35, v36, v37, v38], preserve_unit_iters=True)
v43, v44, v45, v46 = sch.sample_perfect_tile(loop=l7, n=4, max_innermost_factor=64, decision=[1, 1, 1, 4])
l47, l48, l49, l50 = sch.split(loop=l7, factors=[v43, v44, v45, v46], preserve_unit_iters=True)
v51, v52 = sch.sample_perfect_tile(loop=l8, n=2, max_innermost_factor=64, decision=[12, 16])
l53, l54 = sch.split(loop=l8, factors=[v51, v52], preserve_unit_iters=True)
v55, v56 = sch.sample_perfect_tile(loop=l9, n=2, max_innermost_factor=64, decision=[1, 3])
l57, l58 = sch.split(loop=l9, factors=[v55, v56], preserve_unit_iters=True)
v59, v60 = sch.sample_perfect_tile(loop=l10, n=2, max_innermost_factor=64, decision=[1, 3])
l61, l62 = sch.split(loop=l10, factors=[v59, v60], preserve_unit_iters=True)
sch.reorder(l15, l23, l31, l39, l47, l16, l24, l32, l40, l48, l53, l57, l61, l17, l25, l33, l41, l49, l54, l58, l62, l18, l26, l34, l42, l50)
b63 = sch.cache_write(block=b1, write_buffer_index=0, storage_scope="global")
sch.reverse_compute_at(block=b63, loop=l48, preserve_unit_loops=True, index=-1)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.vectorize", ann_val=64)
v64 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.unroll_explicit", ann_val=v64)
l65 = sch.sample_compute_location(block=b0, decision=6)
sch.compute_at(block=b0, loop=l65, preserve_unit_loops=True, index=-1)
sch.enter_postproc()
b66 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b66, ann_key="meta_schedule.parallel")
sch.unannotate(block_or_loop=b66, ann_key="meta_schedule.vectorize")
sch.unannotate(block_or_loop=b66, ann_key="meta_schedule.unroll_explicit")
b67, b68, b69 = sch.get_child_blocks(b66)
l70, l71, l72, l73, l74, l75, l76, l77, l78, l79, l80, l81 = sch.get_loops(block=b67)
l82 = sch.fuse(l70, l71, l72, l73, l74, l75, l76, preserve_unit_iters=True)
sch.parallel(loop=l82)
l83 = sch.fuse(l81, preserve_unit_iters=True)
sch.vectorize(loop=l83)
l84, l85, l86, l87, l88, l89, l90, l91, l92, l93, l94, l95, l96, l97, l98, l99, l100, l101, l102, l103 = sch.get_loops(block=b68)
l104 = sch.fuse(l84, preserve_unit_iters=True)
sch.parallel(loop=l104)
l105 = sch.fuse(l103, preserve_unit_iters=True)
sch.vectorize(loop=l105)
sch.annotate(block_or_loop=l104, ann_key="pragma_auto_unroll_max_step", ann_val=512)
sch.annotate(block_or_loop=l104, ann_key="pragma_unroll_explicit", ann_val=1)
l106, l107, l108, l109, l110, l111, l112, l113, l114 = sch.get_loops(block=b69)
l115 = sch.fuse(l113, l114, preserve_unit_iters=True)
sch.vectorize(loop=l115)
b116 = sch.get_block(name="conv2d_NCHWc", func_name="main")
l117, l118, l119, l120, l121, l122, l123, l124, l125, l126, l127, l128, l129, l130, l131, l132, l133, l134, l135, l136 = sch.get_loops(block=b116)
b137 = sch.decompose_reduction(block=b116, loop=l121)
2024-04-29 05:24:34 [INFO] [task_scheduler.cc:131] [Task #81: fused_nn_contrib_conv2d_NCHWc_3] Trial #171: GFLOPs: 159.1061. Time: 3269.6724 us. Best GFLOPs: 273.4919
2024-04-29 05:24:34 [INFO] [task_scheduler.cc:131] [Task #81: fused_nn_contrib_conv2d_NCHWc_3] Trial #172: GFLOPs: 75.2861. Time: 6909.9736 us. Best GFLOPs: 273.4919
2024-04-29 05:24:34 [INFO] [task_scheduler.cc:131] [Task #81: fused_nn_contrib_conv2d_NCHWc_3] Trial #173: GFLOPs: 192.9492. Time: 2696.1749 us. Best GFLOPs: 273.4919
2024-04-29 05:24:34 [INFO] [task_scheduler.cc:131] [Task #81: fused_nn_contrib_conv2d_NCHWc_3] Trial #174: GFLOPs: 181.1530. Time: 2871.7422 us. Best GFLOPs: 273.4919
2024-04-29 05:24:34 [INFO] [task_scheduler.cc:121] [Task #81: fused_nn_contrib_conv2d_NCHWc_3] Trial #175: Error in building:
LocalBuilder: Timeout, killed after 30.0 seconds
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(48), T.int64(56), T.int64(56), T.int64(4)), "float32"), p1: T.Buffer((T.int64(12), T.int64(48), T.int64(3), T.int64(3), T.int64(4), T.int64(4)), "float32"), conv2d_NCHWc: T.Buffer((T.int64(1), T.int64(12), T.int64(56), T.int64(56), T.int64(4)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        data_pad = T.alloc_buffer((T.int64(1), T.int64(48), T.int64(58), T.int64(58), T.int64(4)))
        conv2d_NCHWc_global = T.alloc_buffer((T.int64(1), T.int64(12), T.int64(56), T.int64(56), T.int64(4)))
        for n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_fused_fused in T.parallel(T.int64(168), annotations={"pragma_auto_unroll_max_step": 512, "pragma_unroll_explicit": 1}):
            for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(48), T.int64(4), T.int64(58)):
                for ax4_fused in T.vectorized(T.int64(4)):
                    with T.block("data_pad"):
                        v_i0, v_i1 = T.axis.remap("SS", [ax0, ax1])
                        v_i2 = T.axis.spatial(T.int64(58), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_fused_fused % T.int64(84) // T.int64(3) * T.int64(2) + ax2)
                        v_i3, v_i4 = T.axis.remap("SS", [ax3, ax4_fused])
                        T.reads(p0[v_i0, v_i1, v_i2 - T.int64(1), v_i3 - T.int64(1), v_i4])
                        T.writes(data_pad[v_i0, v_i1, v_i2, v_i3, v_i4])
                        data_pad[v_i0, v_i1, v_i2, v_i3, v_i4] = T.if_then_else(T.int64(1) <= v_i2 and v_i2 < T.int64(57) and T.int64(1) <= v_i3 and v_i3 < T.int64(57), p0[v_i0, v_i1, v_i2 - T.int64(1), v_i3 - T.int64(1), v_i4], T.float32(0))
            for oh_1, ow_1, oc_block_1 in T.grid(T.int64(1), T.int64(14), T.int64(1)):
                for n_2_init, oc_chunk_2_init, oh_2_init, ow_2_init, oc_block_2_init, n_3_init, oc_chunk_3_init, oh_3_init, ow_3_init in T.grid(T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(1), T.int64(1), T.int64(2), T.int64(2), T.int64(2)):
                    for oc_block_3_fused_init in T.vectorized(T.int64(4)):
                        with T.block("conv2d_NCHWc_init"):
                            v_n = T.axis.spatial(T.int64(1), n_2_init + n_3_init)
                            v_oc_chunk = T.axis.spatial(T.int64(12), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_fused_fused // T.int64(84) * T.int64(6) + n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_fused_fused % T.int64(3) * T.int64(2) + oc_chunk_2_init * T.int64(2) + oc_chunk_3_init)
                            v_oh = T.axis.spatial(T.int64(56), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_fused_fused % T.int64(84) // T.int64(3) * T.int64(2) + oh_1 * T.int64(2) + oh_2_init * T.int64(2) + oh_3_init)
                            v_ow = T.axis.spatial(T.int64(56), ow_1 * T.int64(4) + ow_2_init * T.int64(2) + ow_3_init)
                            v_oc_block = T.axis.spatial(T.int64(4), oc_block_1 * T.int64(4) + oc_block_2_init * T.int64(4) + oc_block_3_fused_init)
                            T.reads()
                            T.writes(conv2d_NCHWc_global[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                            T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                            conv2d_NCHWc_global[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = T.float32(0)
                for ic_0, kh_0, kw_0, n_2, oc_chunk_2, oh_2, ow_2, oc_block_2, ic_1, kh_1, kw_1, n_3, oc_chunk_3, oh_3, ow_3 in T.grid(T.int64(6), T.int64(3), T.int64(3), T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(1), T.int64(32), T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(2), T.int64(2)):
                    for oc_block_3_fused in T.vectorized(T.int64(4)):
                        with T.block("conv2d_NCHWc_update"):
                            v_n = T.axis.spatial(T.int64(1), n_2 + n_3)
                            v_oc_chunk = T.axis.spatial(T.int64(12), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_fused_fused // T.int64(84) * T.int64(6) + n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_fused_fused % T.int64(3) * T.int64(2) + oc_chunk_2 * T.int64(2) + oc_chunk_3)
                            v_oh = T.axis.spatial(T.int64(56), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_fused_fused % T.int64(84) // T.int64(3) * T.int64(2) + oh_1 * T.int64(2) + oh_2 * T.int64(2) + oh_3)
                            v_ow = T.axis.spatial(T.int64(56), ow_1 * T.int64(4) + ow_2 * T.int64(2) + ow_3)
                            v_oc_block = T.axis.spatial(T.int64(4), oc_block_1 * T.int64(4) + oc_block_2 * T.int64(4) + oc_block_3_fused)
                            v_ic = T.axis.reduce(T.int64(192), ic_0 * T.int64(32) + ic_1)
                            v_kh = T.axis.reduce(T.int64(3), kh_0 + kh_1)
                            v_kw = T.axis.reduce(T.int64(3), kw_0 + kw_1)
                            T.reads(conv2d_NCHWc_global[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block], data_pad[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)], p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block])
                            T.writes(conv2d_NCHWc_global[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                            T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                            conv2d_NCHWc_global[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = conv2d_NCHWc_global[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] + data_pad[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)] * p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block]
                for ax0, ax1, ax2 in T.grid(T.int64(1), T.int64(2), T.int64(2)):
                    for ax3_ax4_fused in T.vectorized(T.int64(16)):
                        with T.block("conv2d_NCHWc_global"):
                            v0 = T.axis.spatial(T.int64(1), ax0)
                            v1 = T.axis.spatial(T.int64(12), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_fused_fused // T.int64(84) * T.int64(6) + n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_fused_fused % T.int64(3) * T.int64(2) + ax1)
                            v2 = T.axis.spatial(T.int64(56), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_fused_fused % T.int64(84) // T.int64(3) * T.int64(2) + ax2)
                            v3 = T.axis.spatial(T.int64(56), ow_1 * T.int64(4) + ax3_ax4_fused // T.int64(4))
                            v4 = T.axis.spatial(T.int64(4), ax3_ax4_fused % T.int64(4))
                            T.reads(conv2d_NCHWc_global[v0, v1, v2, v3, v4])
                            T.writes(conv2d_NCHWc[v0, v1, v2, v3, v4])
                            conv2d_NCHWc[v0, v1, v2, v3, v4] = conv2d_NCHWc_global[v0, v1, v2, v3, v4]
b0 = sch.get_block(name="data_pad", func_name="main")
b1 = sch.get_block(name="conv2d_NCHWc", func_name="main")
b2 = sch.get_block(name="root", func_name="main")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSRSRS")
l3, l4, l5, l6, l7, l8, l9, l10 = sch.get_loops(block=b1)
v11, v12, v13, v14 = sch.sample_perfect_tile(loop=l3, n=4, max_innermost_factor=64, decision=[1, 1, 1, 1])
l15, l16, l17, l18 = sch.split(loop=l3, factors=[v11, v12, v13, v14], preserve_unit_iters=True)
v19, v20, v21, v22 = sch.sample_perfect_tile(loop=l4, n=4, max_innermost_factor=64, decision=[2, 3, 1, 2])
l23, l24, l25, l26 = sch.split(loop=l4, factors=[v19, v20, v21, v22], preserve_unit_iters=True)
v27, v28, v29, v30 = sch.sample_perfect_tile(loop=l5, n=4, max_innermost_factor=64, decision=[28, 1, 1, 2])
l31, l32, l33, l34 = sch.split(loop=l5, factors=[v27, v28, v29, v30], preserve_unit_iters=True)
v35, v36, v37, v38 = sch.sample_perfect_tile(loop=l6, n=4, max_innermost_factor=64, decision=[1, 14, 2, 2])
l39, l40, l41, l42 = sch.split(loop=l6, factors=[v35, v36, v37, v38], preserve_unit_iters=True)
v43, v44, v45, v46 = sch.sample_perfect_tile(loop=l7, n=4, max_innermost_factor=64, decision=[1, 1, 1, 4])
l47, l48, l49, l50 = sch.split(loop=l7, factors=[v43, v44, v45, v46], preserve_unit_iters=True)
v51, v52 = sch.sample_perfect_tile(loop=l8, n=2, max_innermost_factor=64, decision=[6, 32])
l53, l54 = sch.split(loop=l8, factors=[v51, v52], preserve_unit_iters=True)
v55, v56 = sch.sample_perfect_tile(loop=l9, n=2, max_innermost_factor=64, decision=[3, 1])
l57, l58 = sch.split(loop=l9, factors=[v55, v56], preserve_unit_iters=True)
v59, v60 = sch.sample_perfect_tile(loop=l10, n=2, max_innermost_factor=64, decision=[3, 1])
l61, l62 = sch.split(loop=l10, factors=[v59, v60], preserve_unit_iters=True)
sch.reorder(l15, l23, l31, l39, l47, l16, l24, l32, l40, l48, l53, l57, l61, l17, l25, l33, l41, l49, l54, l58, l62, l18, l26, l34, l42, l50)
b63 = sch.cache_write(block=b1, write_buffer_index=0, storage_scope="global")
sch.reverse_compute_at(block=b63, loop=l48, preserve_unit_loops=True, index=-1)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.vectorize", ann_val=64)
v64 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.unroll_explicit", ann_val=v64)
l65 = sch.sample_compute_location(block=b0, decision=6)
sch.compute_at(block=b0, loop=l65, preserve_unit_loops=True, index=-1)
sch.enter_postproc()
b66 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b66, ann_key="meta_schedule.parallel")
sch.unannotate(block_or_loop=b66, ann_key="meta_schedule.vectorize")
sch.unannotate(block_or_loop=b66, ann_key="meta_schedule.unroll_explicit")
b67, b68, b69 = sch.get_child_blocks(b66)
l70, l71, l72, l73, l74, l75, l76, l77, l78, l79, l80, l81 = sch.get_loops(block=b67)
l82 = sch.fuse(l70, l71, l72, l73, l74, l75, l76, preserve_unit_iters=True)
sch.parallel(loop=l82)
l83 = sch.fuse(l81, preserve_unit_iters=True)
sch.vectorize(loop=l83)
l84, l85, l86, l87, l88, l89, l90, l91, l92, l93, l94, l95, l96, l97, l98, l99, l100, l101, l102, l103 = sch.get_loops(block=b68)
l104 = sch.fuse(l84, preserve_unit_iters=True)
sch.parallel(loop=l104)
l105 = sch.fuse(l103, preserve_unit_iters=True)
sch.vectorize(loop=l105)
sch.annotate(block_or_loop=l104, ann_key="pragma_auto_unroll_max_step", ann_val=512)
sch.annotate(block_or_loop=l104, ann_key="pragma_unroll_explicit", ann_val=1)
l106, l107, l108, l109, l110, l111, l112, l113, l114 = sch.get_loops(block=b69)
l115 = sch.fuse(l113, l114, preserve_unit_iters=True)
sch.vectorize(loop=l115)
b116 = sch.get_block(name="conv2d_NCHWc", func_name="main")
l117, l118, l119, l120, l121, l122, l123, l124, l125, l126, l127, l128, l129, l130, l131, l132, l133, l134, l135, l136 = sch.get_loops(block=b116)
b137 = sch.decompose_reduction(block=b116, loop=l121)
2024-04-29 05:24:34 [INFO] [task_scheduler.cc:131] [Task #81: fused_nn_contrib_conv2d_NCHWc_3] Trial #176: GFLOPs: 208.4320. Time: 2495.8974 us. Best GFLOPs: 273.4919
2024-04-29 05:24:34 [INFO] [task_scheduler.cc:131] [Task #81: fused_nn_contrib_conv2d_NCHWc_3] Trial #177: GFLOPs: 157.9177. Time: 3294.2768 us. Best GFLOPs: 273.4919
2024-04-29 05:24:34 [INFO] [task_scheduler.cc:131] [Task #81: fused_nn_contrib_conv2d_NCHWc_3] Trial #178: GFLOPs: 136.8125. Time: 3802.4640 us. Best GFLOPs: 273.4919
2024-04-29 05:24:34 [INFO] [task_scheduler.cc:131] [Task #81: fused_nn_contrib_conv2d_NCHWc_3] Trial #179: GFLOPs: 182.1801. Time: 2855.5516 us. Best GFLOPs: 273.4919
2024-04-29 05:24:34 [INFO] [task_scheduler.cc:131] [Task #81: fused_nn_contrib_conv2d_NCHWc_3] Trial #180: GFLOPs: 157.8222. Time: 3296.2717 us. Best GFLOPs: 273.4919
2024-04-29 05:24:34 [INFO] [task_scheduler.cc:131] [Task #81: fused_nn_contrib_conv2d_NCHWc_3] Trial #181: GFLOPs: 156.9435. Time: 3314.7260 us. Best GFLOPs: 273.4919
2024-04-29 05:24:34 [INFO] [task_scheduler.cc:131] [Task #81: fused_nn_contrib_conv2d_NCHWc_3] Trial #182: GFLOPs: 152.4648. Time: 3412.0985 us. Best GFLOPs: 273.4919
2024-04-29 05:24:34 [INFO] [task_scheduler.cc:131] [Task #81: fused_nn_contrib_conv2d_NCHWc_3] Trial #183: GFLOPs: 171.3036. Time: 3036.8586 us. Best GFLOPs: 273.4919
2024-04-29 05:24:34 [INFO] [task_scheduler.cc:131] [Task #81: fused_nn_contrib_conv2d_NCHWc_3] Trial #184: GFLOPs: 174.4635. Time: 2981.8551 us. Best GFLOPs: 273.4919
2024-04-29 05:24:34 [INFO] [task_scheduler.cc:131] [Task #81: fused_nn_contrib_conv2d_NCHWc_3] Trial #185: GFLOPs: 195.5317. Time: 2660.5643 us. Best GFLOPs: 273.4919
2024-04-29 05:24:34 [INFO] [task_scheduler.cc:131] [Task #81: fused_nn_contrib_conv2d_NCHWc_3] Trial #186: GFLOPs: 175.9666. Time: 2956.3831 us. Best GFLOPs: 273.4919
2024-04-29 05:24:34 [INFO] [task_scheduler.cc:131] [Task #81: fused_nn_contrib_conv2d_NCHWc_3] Trial #187: GFLOPs: 165.5031. Time: 3143.2937 us. Best GFLOPs: 273.4919
2024-04-29 05:24:34 [INFO] [task_scheduler.cc:131] [Task #81: fused_nn_contrib_conv2d_NCHWc_3] Trial #188: GFLOPs: 141.2495. Time: 3683.0208 us. Best GFLOPs: 273.4919
2024-04-29 05:24:34 [INFO] [task_scheduler.cc:131] [Task #81: fused_nn_contrib_conv2d_NCHWc_3] Trial #189: GFLOPs: 146.0641. Time: 3561.6195 us. Best GFLOPs: 273.4919
2024-04-29 05:24:34 [INFO] [task_scheduler.cc:131] [Task #81: fused_nn_contrib_conv2d_NCHWc_3] Trial #190: GFLOPs: 62.5039. Time: 8323.0776 us. Best GFLOPs: 273.4919
2024-04-29 05:24:34 [INFO] [task_scheduler.cc:131] [Task #81: fused_nn_contrib_conv2d_NCHWc_3] Trial #191: GFLOPs: 84.5612. Time: 6152.0497 us. Best GFLOPs: 273.4919
2024-04-29 05:24:34 [INFO] [task_scheduler.cc:131] [Task #81: fused_nn_contrib_conv2d_NCHWc_3] Trial #192: GFLOPs: 81.4983. Time: 6383.2601 us. Best GFLOPs: 273.4919
2024-04-29 05:24:34 [INFO] [evolutionary_search.cc:713] Generating candidates......
2024-04-29 05:24:36 [INFO] [evolutionary_search.cc:715] Picked top 102 candidate(s) from database
2024-04-29 05:24:40 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x119191d8)]: 10 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x91eb9d8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0xb6918a8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x10e07d28)]: 0 failure(s)
2024-04-29 05:24:40 [INFO] [evolutionary_search.cc:723] Sampled 400 candidate(s)
2024-04-29 05:24:52 [INFO] [evolutionary_search.cc:621] Evolve iter #0 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x119191d8)]: 1 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x91eb9d8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0xb6918a8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x10e07d28)]: 0 failure(s)
2024-04-29 05:25:04 [INFO] [evolutionary_search.cc:621] Evolve iter #1 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x119191d8)]: 2 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x91eb9d8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0xb6918a8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x10e07d28)]: 0 failure(s)
2024-04-29 05:25:17 [INFO] [evolutionary_search.cc:621] Evolve iter #2 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x119191d8)]: 1 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x91eb9d8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0xb6918a8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x10e07d28)]: 0 failure(s)
2024-04-29 05:25:29 [INFO] [evolutionary_search.cc:621] Evolve iter #3 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x119191d8)]: 3 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x91eb9d8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0xb6918a8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x10e07d28)]: 0 failure(s)
2024-04-29 05:25:37 [INFO] [evolutionary_search.cc:649] Scores of the best 64 candidates:
[1 : 16]:	0.9848  0.9655  0.9639  0.9426  0.9418  0.8867  0.8789  0.8594  0.8435  0.8397  0.8251  0.8247  0.8243  0.8243  0.8192  0.7906
[17 : 32]:	0.7846  0.7768  0.7717  0.7548  0.7500  0.7415  0.7355  0.7334  0.7334  0.7334  0.7333  0.7293  0.7272  0.7257  0.7222  0.7148
[33 : 48]:	0.7115  0.7115  0.7115  0.7112  0.7067  0.7057  0.7052  0.6922  0.6882  0.6866  0.6853  0.6852  0.6851  0.6851  0.6850  0.6835
[49 : 64]:	0.6834  0.6776  0.6763  0.6745  0.6707  0.6707  0.6707  0.6696  0.6689  0.6686  0.6671  0.6671  0.6654  0.6651  0.6642  0.6632
2024-04-29 05:25:37 [INFO] [evolutionary_search.cc:727] Got 64 candidate(s) with evolutionary search
2024-04-29 05:25:37 [INFO] [evolutionary_search.cc:730] Sending 64 candidates(s) for measurement
2024-04-29 05:27:18 [INFO] [task_scheduler.cc:131] [Task #81: fused_nn_contrib_conv2d_NCHWc_3] Trial #193: GFLOPs: 136.9942. Time: 3797.4229 us. Best GFLOPs: 273.4919
2024-04-29 05:27:18 [INFO] [task_scheduler.cc:131] [Task #81: fused_nn_contrib_conv2d_NCHWc_3] Trial #194: GFLOPs: 137.8742. Time: 3773.1830 us. Best GFLOPs: 273.4919
2024-04-29 05:27:18 [INFO] [task_scheduler.cc:131] [Task #81: fused_nn_contrib_conv2d_NCHWc_3] Trial #195: GFLOPs: 281.7413. Time: 1846.4625 us. Best GFLOPs: 281.7413
2024-04-29 05:27:18 [INFO] [task_scheduler.cc:131] [Task #81: fused_nn_contrib_conv2d_NCHWc_3] Trial #196: GFLOPs: 177.6903. Time: 2927.7056 us. Best GFLOPs: 281.7413
2024-04-29 05:27:18 [INFO] [task_scheduler.cc:131] [Task #81: fused_nn_contrib_conv2d_NCHWc_3] Trial #197: GFLOPs: 176.9396. Time: 2940.1257 us. Best GFLOPs: 281.7413
2024-04-29 05:27:18 [INFO] [task_scheduler.cc:131] [Task #81: fused_nn_contrib_conv2d_NCHWc_3] Trial #198: GFLOPs: 149.8925. Time: 3470.6517 us. Best GFLOPs: 281.7413
2024-04-29 05:27:18 [INFO] [task_scheduler.cc:131] [Task #81: fused_nn_contrib_conv2d_NCHWc_3] Trial #199: GFLOPs: 261.5278. Time: 1989.1756 us. Best GFLOPs: 281.7413
2024-04-29 05:27:18 [INFO] [task_scheduler.cc:131] [Task #81: fused_nn_contrib_conv2d_NCHWc_3] Trial #200: GFLOPs: 226.9427. Time: 2292.3180 us. Best GFLOPs: 281.7413
2024-04-29 05:27:18 [INFO] [task_scheduler.cc:131] [Task #81: fused_nn_contrib_conv2d_NCHWc_3] Trial #201: GFLOPs: 125.2940. Time: 4152.0312 us. Best GFLOPs: 281.7413
2024-04-29 05:27:18 [INFO] [task_scheduler.cc:131] [Task #81: fused_nn_contrib_conv2d_NCHWc_3] Trial #202: GFLOPs: 292.5402. Time: 1778.3017 us. Best GFLOPs: 292.5402
2024-04-29 05:27:18 [INFO] [task_scheduler.cc:131] [Task #81: fused_nn_contrib_conv2d_NCHWc_3] Trial #203: GFLOPs: 381.6752. Time: 1363.0039 us. Best GFLOPs: 381.6752
2024-04-29 05:27:18 [INFO] [task_scheduler.cc:131] [Task #81: fused_nn_contrib_conv2d_NCHWc_3] Trial #204: GFLOPs: 100.2218. Time: 5190.7367 us. Best GFLOPs: 381.6752
2024-04-29 05:27:18 [INFO] [task_scheduler.cc:131] [Task #81: fused_nn_contrib_conv2d_NCHWc_3] Trial #205: GFLOPs: 374.3025. Time: 1389.8513 us. Best GFLOPs: 381.6752
2024-04-29 05:27:18 [INFO] [task_scheduler.cc:131] [Task #81: fused_nn_contrib_conv2d_NCHWc_3] Trial #206: GFLOPs: 196.7728. Time: 2643.7836 us. Best GFLOPs: 381.6752
2024-04-29 05:27:18 [INFO] [task_scheduler.cc:131] [Task #81: fused_nn_contrib_conv2d_NCHWc_3] Trial #207: GFLOPs: 377.0118. Time: 1379.8634 us. Best GFLOPs: 381.6752
2024-04-29 05:27:18 [INFO] [task_scheduler.cc:131] [Task #81: fused_nn_contrib_conv2d_NCHWc_3] Trial #208: GFLOPs: 121.6532. Time: 4276.2936 us. Best GFLOPs: 381.6752
2024-04-29 05:27:18 [INFO] [task_scheduler.cc:131] [Task #81: fused_nn_contrib_conv2d_NCHWc_3] Trial #209: GFLOPs: 121.1459. Time: 4294.1992 us. Best GFLOPs: 381.6752
2024-04-29 05:27:18 [INFO] [task_scheduler.cc:131] [Task #81: fused_nn_contrib_conv2d_NCHWc_3] Trial #210: GFLOPs: 172.8285. Time: 3010.0634 us. Best GFLOPs: 381.6752
2024-04-29 05:27:18 [INFO] [task_scheduler.cc:131] [Task #81: fused_nn_contrib_conv2d_NCHWc_3] Trial #211: GFLOPs: 196.9842. Time: 2640.9465 us. Best GFLOPs: 381.6752
2024-04-29 05:27:18 [INFO] [task_scheduler.cc:131] [Task #81: fused_nn_contrib_conv2d_NCHWc_3] Trial #212: GFLOPs: 193.8027. Time: 2684.3006 us. Best GFLOPs: 381.6752
2024-04-29 05:27:18 [INFO] [task_scheduler.cc:131] [Task #81: fused_nn_contrib_conv2d_NCHWc_3] Trial #213: GFLOPs: 212.8868. Time: 2443.6689 us. Best GFLOPs: 381.6752
2024-04-29 05:27:18 [INFO] [task_scheduler.cc:131] [Task #81: fused_nn_contrib_conv2d_NCHWc_3] Trial #214: GFLOPs: 78.2218. Time: 6650.6333 us. Best GFLOPs: 381.6752
2024-04-29 05:27:18 [INFO] [task_scheduler.cc:131] [Task #81: fused_nn_contrib_conv2d_NCHWc_3] Trial #215: GFLOPs: 176.0666. Time: 2954.7049 us. Best GFLOPs: 381.6752
2024-04-29 05:27:18 [INFO] [task_scheduler.cc:131] [Task #81: fused_nn_contrib_conv2d_NCHWc_3] Trial #216: GFLOPs: 161.5917. Time: 3219.3778 us. Best GFLOPs: 381.6752
2024-04-29 05:27:18 [INFO] [task_scheduler.cc:131] [Task #81: fused_nn_contrib_conv2d_NCHWc_3] Trial #217: GFLOPs: 187.3217. Time: 2777.1727 us. Best GFLOPs: 381.6752
2024-04-29 05:27:18 [INFO] [task_scheduler.cc:131] [Task #81: fused_nn_contrib_conv2d_NCHWc_3] Trial #218: GFLOPs: 206.0091. Time: 2525.2511 us. Best GFLOPs: 381.6752
2024-04-29 05:27:18 [INFO] [task_scheduler.cc:131] [Task #81: fused_nn_contrib_conv2d_NCHWc_3] Trial #219: GFLOPs: 126.3602. Time: 4116.9984 us. Best GFLOPs: 381.6752
2024-04-29 05:27:18 [INFO] [task_scheduler.cc:131] [Task #81: fused_nn_contrib_conv2d_NCHWc_3] Trial #220: GFLOPs: 182.0734. Time: 2857.2261 us. Best GFLOPs: 381.6752
2024-04-29 05:27:18 [INFO] [task_scheduler.cc:131] [Task #81: fused_nn_contrib_conv2d_NCHWc_3] Trial #221: GFLOPs: 165.3946. Time: 3145.3553 us. Best GFLOPs: 381.6752
2024-04-29 05:27:18 [INFO] [task_scheduler.cc:131] [Task #81: fused_nn_contrib_conv2d_NCHWc_3] Trial #222: GFLOPs: 171.6326. Time: 3031.0371 us. Best GFLOPs: 381.6752
2024-04-29 05:27:18 [INFO] [task_scheduler.cc:131] [Task #81: fused_nn_contrib_conv2d_NCHWc_3] Trial #223: GFLOPs: 181.9450. Time: 2859.2419 us. Best GFLOPs: 381.6752
2024-04-29 05:27:18 [INFO] [task_scheduler.cc:131] [Task #81: fused_nn_contrib_conv2d_NCHWc_3] Trial #224: GFLOPs: 247.0671. Time: 2105.6013 us. Best GFLOPs: 381.6752
2024-04-29 05:27:18 [INFO] [task_scheduler.cc:131] [Task #81: fused_nn_contrib_conv2d_NCHWc_3] Trial #225: GFLOPs: 100.3864. Time: 5182.2234 us. Best GFLOPs: 381.6752
2024-04-29 05:27:18 [INFO] [task_scheduler.cc:131] [Task #81: fused_nn_contrib_conv2d_NCHWc_3] Trial #226: GFLOPs: 182.2558. Time: 2854.3666 us. Best GFLOPs: 381.6752
2024-04-29 05:27:18 [INFO] [task_scheduler.cc:131] [Task #81: fused_nn_contrib_conv2d_NCHWc_3] Trial #227: GFLOPs: 170.3720. Time: 3053.4643 us. Best GFLOPs: 381.6752
2024-04-29 05:27:18 [INFO] [task_scheduler.cc:131] [Task #81: fused_nn_contrib_conv2d_NCHWc_3] Trial #228: GFLOPs: 172.8453. Time: 3009.7707 us. Best GFLOPs: 381.6752
2024-04-29 05:27:18 [INFO] [task_scheduler.cc:131] [Task #81: fused_nn_contrib_conv2d_NCHWc_3] Trial #229: GFLOPs: 115.4674. Time: 4505.3816 us. Best GFLOPs: 381.6752
2024-04-29 05:27:18 [INFO] [task_scheduler.cc:131] [Task #81: fused_nn_contrib_conv2d_NCHWc_3] Trial #230: GFLOPs: 182.9744. Time: 2843.1554 us. Best GFLOPs: 381.6752
2024-04-29 05:27:18 [INFO] [task_scheduler.cc:131] [Task #81: fused_nn_contrib_conv2d_NCHWc_3] Trial #231: GFLOPs: 207.5264. Time: 2506.7878 us. Best GFLOPs: 381.6752
2024-04-29 05:27:18 [INFO] [task_scheduler.cc:131] [Task #81: fused_nn_contrib_conv2d_NCHWc_3] Trial #232: GFLOPs: 171.1014. Time: 3040.4478 us. Best GFLOPs: 381.6752
2024-04-29 05:27:18 [INFO] [task_scheduler.cc:131] [Task #81: fused_nn_contrib_conv2d_NCHWc_3] Trial #233: GFLOPs: 185.8726. Time: 2798.8247 us. Best GFLOPs: 381.6752
2024-04-29 05:27:18 [INFO] [task_scheduler.cc:131] [Task #81: fused_nn_contrib_conv2d_NCHWc_3] Trial #234: GFLOPs: 150.2027. Time: 3463.4854 us. Best GFLOPs: 381.6752
2024-04-29 05:27:18 [INFO] [task_scheduler.cc:131] [Task #81: fused_nn_contrib_conv2d_NCHWc_3] Trial #235: GFLOPs: 234.6797. Time: 2216.7442 us. Best GFLOPs: 381.6752
2024-04-29 05:27:18 [INFO] [task_scheduler.cc:131] [Task #81: fused_nn_contrib_conv2d_NCHWc_3] Trial #236: GFLOPs: 201.5304. Time: 2581.3718 us. Best GFLOPs: 381.6752
2024-04-29 05:27:18 [INFO] [task_scheduler.cc:131] [Task #81: fused_nn_contrib_conv2d_NCHWc_3] Trial #237: GFLOPs: 219.6836. Time: 2368.0642 us. Best GFLOPs: 381.6752
2024-04-29 05:27:18 [INFO] [task_scheduler.cc:131] [Task #81: fused_nn_contrib_conv2d_NCHWc_3] Trial #238: GFLOPs: 228.5644. Time: 2276.0531 us. Best GFLOPs: 381.6752
2024-04-29 05:27:18 [INFO] [task_scheduler.cc:131] [Task #81: fused_nn_contrib_conv2d_NCHWc_3] Trial #239: GFLOPs: 201.6221. Time: 2580.1977 us. Best GFLOPs: 381.6752
2024-04-29 05:27:18 [INFO] [task_scheduler.cc:131] [Task #81: fused_nn_contrib_conv2d_NCHWc_3] Trial #240: GFLOPs: 154.3233. Time: 3371.0069 us. Best GFLOPs: 381.6752
2024-04-29 05:27:18 [INFO] [task_scheduler.cc:131] [Task #81: fused_nn_contrib_conv2d_NCHWc_3] Trial #241: GFLOPs: 108.3866. Time: 4799.7158 us. Best GFLOPs: 381.6752
2024-04-29 05:27:18 [INFO] [task_scheduler.cc:131] [Task #81: fused_nn_contrib_conv2d_NCHWc_3] Trial #242: GFLOPs: 186.5817. Time: 2788.1877 us. Best GFLOPs: 381.6752
2024-04-29 05:27:18 [INFO] [task_scheduler.cc:131] [Task #81: fused_nn_contrib_conv2d_NCHWc_3] Trial #243: GFLOPs: 320.9073. Time: 1621.1063 us. Best GFLOPs: 381.6752
2024-04-29 05:27:18 [INFO] [task_scheduler.cc:131] [Task #81: fused_nn_contrib_conv2d_NCHWc_3] Trial #244: GFLOPs: 184.6333. Time: 2817.6113 us. Best GFLOPs: 381.6752
2024-04-29 05:27:18 [INFO] [task_scheduler.cc:131] [Task #81: fused_nn_contrib_conv2d_NCHWc_3] Trial #245: GFLOPs: 202.4498. Time: 2569.6476 us. Best GFLOPs: 381.6752
2024-04-29 05:27:18 [INFO] [task_scheduler.cc:131] [Task #81: fused_nn_contrib_conv2d_NCHWc_3] Trial #246: GFLOPs: 201.7942. Time: 2577.9966 us. Best GFLOPs: 381.6752
2024-04-29 05:27:18 [INFO] [task_scheduler.cc:131] [Task #81: fused_nn_contrib_conv2d_NCHWc_3] Trial #247: GFLOPs: 195.2127. Time: 2664.9128 us. Best GFLOPs: 381.6752
2024-04-29 05:27:18 [INFO] [task_scheduler.cc:121] [Task #81: fused_nn_contrib_conv2d_NCHWc_3] Trial #248: Error in building:
LocalBuilder: Timeout, killed after 30.0 seconds
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(48), T.int64(56), T.int64(56), T.int64(4)), "float32"), p1: T.Buffer((T.int64(12), T.int64(48), T.int64(3), T.int64(3), T.int64(4), T.int64(4)), "float32"), conv2d_NCHWc: T.Buffer((T.int64(1), T.int64(12), T.int64(56), T.int64(56), T.int64(4)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        data_pad = T.alloc_buffer((T.int64(1), T.int64(48), T.int64(58), T.int64(58), T.int64(4)))
        conv2d_NCHWc_global = T.alloc_buffer((T.int64(1), T.int64(12), T.int64(56), T.int64(56), T.int64(4)))
        for n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused_fused in T.parallel(T.int64(1344), annotations={"pragma_auto_unroll_max_step": 512, "pragma_unroll_explicit": 1}):
            for n_2_init, oc_chunk_2_init, oh_2_init, ow_2_init, oc_block_2_init, n_3_init, oc_chunk_3_init, oh_3_init, ow_3_init, oc_block_3_init in T.grid(T.int64(1), T.int64(1), T.int64(1), T.int64(28), T.int64(1), T.int64(1), T.int64(4), T.int64(1), T.int64(1), T.int64(1)):
                with T.block("conv2d_NCHWc_init"):
                    v_n = T.axis.spatial(T.int64(1), n_2_init + n_3_init)
                    v_oc_chunk = T.axis.spatial(T.int64(12), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused_fused % T.int64(24) // T.int64(8) * T.int64(4) + oc_chunk_2_init * T.int64(4) + oc_chunk_3_init)
                    v_oh = T.axis.spatial(T.int64(56), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused_fused // T.int64(24) + oh_2_init + oh_3_init)
                    v_ow = T.axis.spatial(T.int64(56), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused_fused % T.int64(8) // T.int64(4) * T.int64(28) + ow_2_init + ow_3_init)
                    v_oc_block = T.axis.spatial(T.int64(4), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused_fused % T.int64(4) + oc_block_2_init + oc_block_3_init)
                    T.reads()
                    T.writes(conv2d_NCHWc_global[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                    T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                    conv2d_NCHWc_global[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = T.float32(0)
            for ic_0 in range(T.int64(16)):
                for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(3), T.int64(3), T.int64(30)):
                    for ax4_fused in T.vectorized(T.int64(4)):
                        with T.block("data_pad"):
                            v_i0 = T.axis.spatial(T.int64(1), ax0)
                            v_i1 = T.axis.spatial(T.int64(48), ic_0 * T.int64(3) + ax1)
                            v_i2 = T.axis.spatial(T.int64(58), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused_fused // T.int64(24) + ax2)
                            v_i3 = T.axis.spatial(T.int64(58), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused_fused % T.int64(8) // T.int64(4) * T.int64(28) + ax3)
                            v_i4 = T.axis.spatial(T.int64(4), ax4_fused)
                            T.reads(p0[v_i0, v_i1, v_i2 - T.int64(1), v_i3 - T.int64(1), v_i4])
                            T.writes(data_pad[v_i0, v_i1, v_i2, v_i3, v_i4])
                            data_pad[v_i0, v_i1, v_i2, v_i3, v_i4] = T.if_then_else(T.int64(1) <= v_i2 and v_i2 < T.int64(57) and T.int64(1) <= v_i3 and v_i3 < T.int64(57), p0[v_i0, v_i1, v_i2 - T.int64(1), v_i3 - T.int64(1), v_i4], T.float32(0))
                for kh_0, kw_0, n_2, oc_chunk_2, oh_2, ow_2, oc_block_2, ic_1, kh_1, kw_1, n_3, oc_chunk_3, oh_3, ow_3, oc_block_3 in T.grid(T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(28), T.int64(1), T.int64(12), T.int64(3), T.int64(3), T.int64(1), T.int64(4), T.int64(1), T.int64(1), T.int64(1)):
                    with T.block("conv2d_NCHWc_update"):
                        v_n = T.axis.spatial(T.int64(1), n_2 + n_3)
                        v_oc_chunk = T.axis.spatial(T.int64(12), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused_fused % T.int64(24) // T.int64(8) * T.int64(4) + oc_chunk_2 * T.int64(4) + oc_chunk_3)
                        v_oh = T.axis.spatial(T.int64(56), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused_fused // T.int64(24) + oh_2 + oh_3)
                        v_ow = T.axis.spatial(T.int64(56), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused_fused % T.int64(8) // T.int64(4) * T.int64(28) + ow_2 + ow_3)
                        v_oc_block = T.axis.spatial(T.int64(4), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused_fused % T.int64(4) + oc_block_2 + oc_block_3)
                        v_ic = T.axis.reduce(T.int64(192), ic_0 * T.int64(12) + ic_1)
                        v_kh = T.axis.reduce(T.int64(3), kh_0 * T.int64(3) + kh_1)
                        v_kw = T.axis.reduce(T.int64(3), kw_0 * T.int64(3) + kw_1)
                        T.reads(conv2d_NCHWc_global[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block], data_pad[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)], p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block])
                        T.writes(conv2d_NCHWc_global[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                        T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                        conv2d_NCHWc_global[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = conv2d_NCHWc_global[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] + data_pad[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)] * p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block]
            for ax0, ax1, ax2, ax3, ax4 in T.grid(T.int64(1), T.int64(4), T.int64(1), T.int64(28), T.int64(1)):
                with T.block("conv2d_NCHWc_global"):
                    v0 = T.axis.spatial(T.int64(1), ax0)
                    v1 = T.axis.spatial(T.int64(12), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused_fused % T.int64(24) // T.int64(8) * T.int64(4) + ax1)
                    v2 = T.axis.spatial(T.int64(56), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused_fused // T.int64(24) + ax2)
                    v3 = T.axis.spatial(T.int64(56), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused_fused % T.int64(8) // T.int64(4) * T.int64(28) + ax3)
                    v4 = T.axis.spatial(T.int64(4), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused_fused % T.int64(4) + ax4)
                    T.reads(conv2d_NCHWc_global[v0, v1, v2, v3, v4])
                    T.writes(conv2d_NCHWc[v0, v1, v2, v3, v4])
                    conv2d_NCHWc[v0, v1, v2, v3, v4] = conv2d_NCHWc_global[v0, v1, v2, v3, v4]
b0 = sch.get_block(name="data_pad", func_name="main")
b1 = sch.get_block(name="conv2d_NCHWc", func_name="main")
b2 = sch.get_block(name="root", func_name="main")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSRSRS")
l3, l4, l5, l6, l7, l8, l9, l10 = sch.get_loops(block=b1)
v11, v12, v13, v14 = sch.sample_perfect_tile(loop=l3, n=4, max_innermost_factor=64, decision=[1, 1, 1, 1])
l15, l16, l17, l18 = sch.split(loop=l3, factors=[v11, v12, v13, v14], preserve_unit_iters=True)
v19, v20, v21, v22 = sch.sample_perfect_tile(loop=l4, n=4, max_innermost_factor=64, decision=[1, 3, 1, 4])
l23, l24, l25, l26 = sch.split(loop=l4, factors=[v19, v20, v21, v22], preserve_unit_iters=True)
v27, v28, v29, v30 = sch.sample_perfect_tile(loop=l5, n=4, max_innermost_factor=64, decision=[56, 1, 1, 1])
l31, l32, l33, l34 = sch.split(loop=l5, factors=[v27, v28, v29, v30], preserve_unit_iters=True)
v35, v36, v37, v38 = sch.sample_perfect_tile(loop=l6, n=4, max_innermost_factor=64, decision=[1, 2, 28, 1])
l39, l40, l41, l42 = sch.split(loop=l6, factors=[v35, v36, v37, v38], preserve_unit_iters=True)
v43, v44, v45, v46 = sch.sample_perfect_tile(loop=l7, n=4, max_innermost_factor=64, decision=[1, 4, 1, 1])
l47, l48, l49, l50 = sch.split(loop=l7, factors=[v43, v44, v45, v46], preserve_unit_iters=True)
v51, v52 = sch.sample_perfect_tile(loop=l8, n=2, max_innermost_factor=64, decision=[16, 12])
l53, l54 = sch.split(loop=l8, factors=[v51, v52], preserve_unit_iters=True)
v55, v56 = sch.sample_perfect_tile(loop=l9, n=2, max_innermost_factor=64, decision=[1, 3])
l57, l58 = sch.split(loop=l9, factors=[v55, v56], preserve_unit_iters=True)
v59, v60 = sch.sample_perfect_tile(loop=l10, n=2, max_innermost_factor=64, decision=[1, 3])
l61, l62 = sch.split(loop=l10, factors=[v59, v60], preserve_unit_iters=True)
sch.reorder(l15, l23, l31, l39, l47, l16, l24, l32, l40, l48, l53, l57, l61, l17, l25, l33, l41, l49, l54, l58, l62, l18, l26, l34, l42, l50)
b63 = sch.cache_write(block=b1, write_buffer_index=0, storage_scope="global")
sch.reverse_compute_at(block=b63, loop=l48, preserve_unit_loops=True, index=-1)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.vectorize", ann_val=64)
v64 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.unroll_explicit", ann_val=v64)
l65 = sch.sample_compute_location(block=b0, decision=10)
sch.compute_at(block=b0, loop=l65, preserve_unit_loops=True, index=-1)
sch.enter_postproc()
b66 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b66, ann_key="meta_schedule.parallel")
sch.unannotate(block_or_loop=b66, ann_key="meta_schedule.vectorize")
sch.unannotate(block_or_loop=b66, ann_key="meta_schedule.unroll_explicit")
b67, b68, b69 = sch.get_child_blocks(b66)
l70, l71, l72, l73, l74, l75, l76, l77, l78, l79, l80, l81, l82, l83, l84, l85 = sch.get_loops(block=b67)
l86 = sch.fuse(l70, l71, l72, l73, l74, l75, l76, l77, l78, l79, preserve_unit_iters=True)
sch.parallel(loop=l86)
l87 = sch.fuse(l85, preserve_unit_iters=True)
sch.vectorize(loop=l87)
l88, l89, l90, l91, l92, l93, l94, l95, l96, l97, l98, l99, l100, l101, l102, l103, l104 = sch.get_loops(block=b68)
l105 = sch.fuse(l88, preserve_unit_iters=True)
sch.parallel(loop=l105)
sch.annotate(block_or_loop=l105, ann_key="pragma_auto_unroll_max_step", ann_val=512)
sch.annotate(block_or_loop=l105, ann_key="pragma_unroll_explicit", ann_val=1)
l106, l107, l108, l109, l110, l111 = sch.get_loops(block=b69)
b112 = sch.get_block(name="conv2d_NCHWc", func_name="main")
l113, l114, l115, l116, l117, l118, l119, l120, l121, l122, l123, l124, l125, l126, l127, l128, l129 = sch.get_loops(block=b112)
b130 = sch.decompose_reduction(block=b112, loop=l114)
2024-04-29 05:27:18 [INFO] [task_scheduler.cc:131] [Task #81: fused_nn_contrib_conv2d_NCHWc_3] Trial #249: GFLOPs: 163.2327. Time: 3187.0138 us. Best GFLOPs: 381.6752
2024-04-29 05:27:18 [INFO] [task_scheduler.cc:131] [Task #81: fused_nn_contrib_conv2d_NCHWc_3] Trial #250: GFLOPs: 197.3392. Time: 2636.1959 us. Best GFLOPs: 381.6752
2024-04-29 05:27:18 [INFO] [task_scheduler.cc:131] [Task #81: fused_nn_contrib_conv2d_NCHWc_3] Trial #251: GFLOPs: 186.8794. Time: 2783.7457 us. Best GFLOPs: 381.6752
2024-04-29 05:27:18 [INFO] [task_scheduler.cc:131] [Task #81: fused_nn_contrib_conv2d_NCHWc_3] Trial #252: GFLOPs: 161.1744. Time: 3227.7131 us. Best GFLOPs: 381.6752
2024-04-29 05:27:18 [INFO] [task_scheduler.cc:131] [Task #81: fused_nn_contrib_conv2d_NCHWc_3] Trial #253: GFLOPs: 191.1061. Time: 2722.1776 us. Best GFLOPs: 381.6752
2024-04-29 05:27:18 [INFO] [task_scheduler.cc:131] [Task #81: fused_nn_contrib_conv2d_NCHWc_3] Trial #254: GFLOPs: 27.8923. Time: 18651.2204 us. Best GFLOPs: 381.6752
2024-04-29 05:27:18 [INFO] [task_scheduler.cc:131] [Task #81: fused_nn_contrib_conv2d_NCHWc_3] Trial #255: GFLOPs: 6.0802. Time: 85560.1917 us. Best GFLOPs: 381.6752
2024-04-29 05:27:18 [INFO] [task_scheduler.cc:131] [Task #81: fused_nn_contrib_conv2d_NCHWc_3] Trial #256: GFLOPs: 8.2006. Time: 63437.7197 us. Best GFLOPs: 381.6752
2024-04-29 05:31:39 [INFO] [evolutionary_search.cc:713] Generating candidates......
2024-04-29 05:31:40 [INFO] [evolutionary_search.cc:715] Picked top 102 candidate(s) from database
2024-04-29 05:31:44 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x119191d8)]: 4 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x91eb9d8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0xb6918a8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x10e07d28)]: 0 failure(s)
2024-04-29 05:31:44 [INFO] [evolutionary_search.cc:723] Sampled 406 candidate(s)
2024-04-29 05:31:57 [INFO] [evolutionary_search.cc:621] Evolve iter #0 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x119191d8)]: 2 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x91eb9d8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0xb6918a8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x10e07d28)]: 0 failure(s)
2024-04-29 05:32:09 [INFO] [evolutionary_search.cc:621] Evolve iter #1 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x119191d8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x91eb9d8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0xb6918a8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x10e07d28)]: 0 failure(s)
2024-04-29 05:32:22 [INFO] [evolutionary_search.cc:621] Evolve iter #2 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x119191d8)]: 3 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x91eb9d8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0xb6918a8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x10e07d28)]: 0 failure(s)
2024-04-29 05:32:34 [INFO] [evolutionary_search.cc:621] Evolve iter #3 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x119191d8)]: 1 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x91eb9d8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0xb6918a8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x10e07d28)]: 0 failure(s)
2024-04-29 05:32:41 [INFO] [evolutionary_search.cc:649] Scores of the best 64 candidates:
[1 : 16]:	0.9907  0.9827  0.9772  0.9303  0.9219  0.9187  0.9187  0.9113  0.9079  0.9079  0.9033  0.8738  0.8660  0.8660  0.8538  0.8475
[17 : 32]:	0.8444  0.8188  0.8155  0.8155  0.8089  0.8089  0.8062  0.8047  0.8047  0.8047  0.8036  0.7984  0.7976  0.7973  0.7968  0.7636
[33 : 48]:	0.7563  0.7533  0.7508  0.7341  0.7303  0.7219  0.7127  0.7111  0.7109  0.7073  0.6963  0.6963  0.6963  0.6945  0.6945  0.6939
[49 : 64]:	0.6915  0.6911  0.6911  0.6911  0.6880  0.6861  0.6861  0.6846  0.6820  0.6816  0.6763  0.6762  0.6744  0.6743  0.6698  0.6672
2024-04-29 05:32:42 [INFO] [evolutionary_search.cc:727] Got 64 candidate(s) with evolutionary search
2024-04-29 05:32:42 [INFO] [evolutionary_search.cc:730] Sending 64 candidates(s) for measurement
2024-04-29 05:34:28 [INFO] [task_scheduler.cc:131] [Task #81: fused_nn_contrib_conv2d_NCHWc_3] Trial #257: GFLOPs: 381.4084. Time: 1363.9574 us. Best GFLOPs: 381.6752
2024-04-29 05:34:28 [INFO] [task_scheduler.cc:131] [Task #81: fused_nn_contrib_conv2d_NCHWc_3] Trial #258: GFLOPs: 177.9449. Time: 2923.5165 us. Best GFLOPs: 381.6752
2024-04-29 05:34:28 [INFO] [task_scheduler.cc:131] [Task #81: fused_nn_contrib_conv2d_NCHWc_3] Trial #259: GFLOPs: 420.0759. Time: 1238.4067 us. Best GFLOPs: 420.0759
2024-04-29 05:34:28 [INFO] [task_scheduler.cc:131] [Task #81: fused_nn_contrib_conv2d_NCHWc_3] Trial #260: GFLOPs: 380.4185. Time: 1367.5065 us. Best GFLOPs: 420.0759
2024-04-29 05:34:28 [INFO] [task_scheduler.cc:131] [Task #81: fused_nn_contrib_conv2d_NCHWc_3] Trial #261: GFLOPs: 380.1125. Time: 1368.6073 us. Best GFLOPs: 420.0759
2024-04-29 05:34:28 [INFO] [task_scheduler.cc:131] [Task #81: fused_nn_contrib_conv2d_NCHWc_3] Trial #262: GFLOPs: 214.7085. Time: 2422.9346 us. Best GFLOPs: 420.0759
2024-04-29 05:34:28 [INFO] [task_scheduler.cc:131] [Task #81: fused_nn_contrib_conv2d_NCHWc_3] Trial #263: GFLOPs: 218.9107. Time: 2376.4244 us. Best GFLOPs: 420.0759
2024-04-29 05:34:28 [INFO] [task_scheduler.cc:131] [Task #81: fused_nn_contrib_conv2d_NCHWc_3] Trial #264: GFLOPs: 211.9664. Time: 2454.2791 us. Best GFLOPs: 420.0759
2024-04-29 05:34:28 [INFO] [task_scheduler.cc:131] [Task #81: fused_nn_contrib_conv2d_NCHWc_3] Trial #265: GFLOPs: 221.5277. Time: 2348.3511 us. Best GFLOPs: 420.0759
2024-04-29 05:34:28 [INFO] [task_scheduler.cc:131] [Task #81: fused_nn_contrib_conv2d_NCHWc_3] Trial #266: GFLOPs: 212.2991. Time: 2450.4335 us. Best GFLOPs: 420.0759
2024-04-29 05:34:28 [INFO] [task_scheduler.cc:131] [Task #81: fused_nn_contrib_conv2d_NCHWc_3] Trial #267: GFLOPs: 347.3514. Time: 1497.6900 us. Best GFLOPs: 420.0759
2024-04-29 05:34:28 [INFO] [task_scheduler.cc:131] [Task #81: fused_nn_contrib_conv2d_NCHWc_3] Trial #268: GFLOPs: 409.4619. Time: 1270.5083 us. Best GFLOPs: 420.0759
2024-04-29 05:34:28 [INFO] [task_scheduler.cc:131] [Task #81: fused_nn_contrib_conv2d_NCHWc_3] Trial #269: GFLOPs: 410.1177. Time: 1268.4768 us. Best GFLOPs: 420.0759
2024-04-29 05:34:28 [INFO] [task_scheduler.cc:131] [Task #81: fused_nn_contrib_conv2d_NCHWc_3] Trial #270: GFLOPs: 407.7886. Time: 1275.7216 us. Best GFLOPs: 420.0759
2024-04-29 05:34:28 [INFO] [task_scheduler.cc:131] [Task #81: fused_nn_contrib_conv2d_NCHWc_3] Trial #271: GFLOPs: 214.5295. Time: 2424.9563 us. Best GFLOPs: 420.0759
2024-04-29 05:34:28 [INFO] [task_scheduler.cc:131] [Task #81: fused_nn_contrib_conv2d_NCHWc_3] Trial #272: GFLOPs: 437.7438. Time: 1188.4230 us. Best GFLOPs: 437.7438
2024-04-29 05:34:28 [INFO] [task_scheduler.cc:131] [Task #81: fused_nn_contrib_conv2d_NCHWc_3] Trial #273: GFLOPs: 500.6714. Time: 1039.0542 us. Best GFLOPs: 500.6714
2024-04-29 05:34:28 [INFO] [task_scheduler.cc:131] [Task #81: fused_nn_contrib_conv2d_NCHWc_3] Trial #274: GFLOPs: 218.5663. Time: 2380.1690 us. Best GFLOPs: 500.6714
2024-04-29 05:34:28 [INFO] [task_scheduler.cc:131] [Task #81: fused_nn_contrib_conv2d_NCHWc_3] Trial #275: GFLOPs: 221.0736. Time: 2353.1749 us. Best GFLOPs: 500.6714
2024-04-29 05:34:28 [INFO] [task_scheduler.cc:131] [Task #81: fused_nn_contrib_conv2d_NCHWc_3] Trial #276: GFLOPs: 219.5047. Time: 2369.9936 us. Best GFLOPs: 500.6714
2024-04-29 05:34:28 [INFO] [task_scheduler.cc:131] [Task #81: fused_nn_contrib_conv2d_NCHWc_3] Trial #277: GFLOPs: 324.4808. Time: 1603.2527 us. Best GFLOPs: 500.6714
2024-04-29 05:34:28 [INFO] [task_scheduler.cc:131] [Task #81: fused_nn_contrib_conv2d_NCHWc_3] Trial #278: GFLOPs: 324.2926. Time: 1604.1831 us. Best GFLOPs: 500.6714
2024-04-29 05:34:28 [INFO] [task_scheduler.cc:131] [Task #81: fused_nn_contrib_conv2d_NCHWc_3] Trial #279: GFLOPs: 324.3792. Time: 1603.7552 us. Best GFLOPs: 500.6714
2024-04-29 05:34:28 [INFO] [task_scheduler.cc:131] [Task #81: fused_nn_contrib_conv2d_NCHWc_3] Trial #280: GFLOPs: 220.8640. Time: 2355.4072 us. Best GFLOPs: 500.6714
2024-04-29 05:34:28 [INFO] [task_scheduler.cc:131] [Task #81: fused_nn_contrib_conv2d_NCHWc_3] Trial #281: GFLOPs: 223.8163. Time: 2324.3382 us. Best GFLOPs: 500.6714
2024-04-29 05:34:28 [INFO] [task_scheduler.cc:131] [Task #81: fused_nn_contrib_conv2d_NCHWc_3] Trial #282: GFLOPs: 221.9107. Time: 2344.2973 us. Best GFLOPs: 500.6714
2024-04-29 05:34:28 [INFO] [task_scheduler.cc:131] [Task #81: fused_nn_contrib_conv2d_NCHWc_3] Trial #283: GFLOPs: 387.9805. Time: 1340.8530 us. Best GFLOPs: 500.6714
2024-04-29 05:34:28 [INFO] [task_scheduler.cc:131] [Task #81: fused_nn_contrib_conv2d_NCHWc_3] Trial #284: GFLOPs: 301.2299. Time: 1727.0022 us. Best GFLOPs: 500.6714
2024-04-29 05:34:28 [INFO] [task_scheduler.cc:131] [Task #81: fused_nn_contrib_conv2d_NCHWc_3] Trial #285: GFLOPs: 458.7896. Time: 1133.9070 us. Best GFLOPs: 500.6714
2024-04-29 05:34:28 [INFO] [task_scheduler.cc:131] [Task #81: fused_nn_contrib_conv2d_NCHWc_3] Trial #286: GFLOPs: 302.5367. Time: 1719.5426 us. Best GFLOPs: 500.6714
2024-04-29 05:34:28 [INFO] [task_scheduler.cc:131] [Task #81: fused_nn_contrib_conv2d_NCHWc_3] Trial #287: GFLOPs: 301.0358. Time: 1728.1158 us. Best GFLOPs: 500.6714
2024-04-29 05:34:28 [INFO] [task_scheduler.cc:131] [Task #81: fused_nn_contrib_conv2d_NCHWc_3] Trial #288: GFLOPs: 285.3009. Time: 1823.4250 us. Best GFLOPs: 500.6714
2024-04-29 05:34:28 [INFO] [task_scheduler.cc:131] [Task #81: fused_nn_contrib_conv2d_NCHWc_3] Trial #289: GFLOPs: 293.5412. Time: 1772.2374 us. Best GFLOPs: 500.6714
2024-04-29 05:34:28 [INFO] [task_scheduler.cc:131] [Task #81: fused_nn_contrib_conv2d_NCHWc_3] Trial #290: GFLOPs: 285.5153. Time: 1822.0559 us. Best GFLOPs: 500.6714
2024-04-29 05:34:28 [INFO] [task_scheduler.cc:131] [Task #81: fused_nn_contrib_conv2d_NCHWc_3] Trial #291: GFLOPs: 306.3385. Time: 1698.2021 us. Best GFLOPs: 500.6714
2024-04-29 05:34:28 [INFO] [task_scheduler.cc:131] [Task #81: fused_nn_contrib_conv2d_NCHWc_3] Trial #292: GFLOPs: 277.6165. Time: 1873.8973 us. Best GFLOPs: 500.6714
2024-04-29 05:34:28 [INFO] [task_scheduler.cc:131] [Task #81: fused_nn_contrib_conv2d_NCHWc_3] Trial #293: GFLOPs: 277.0706. Time: 1877.5894 us. Best GFLOPs: 500.6714
2024-04-29 05:34:28 [INFO] [task_scheduler.cc:131] [Task #81: fused_nn_contrib_conv2d_NCHWc_3] Trial #294: GFLOPs: 205.2701. Time: 2534.3421 us. Best GFLOPs: 500.6714
2024-04-29 05:34:28 [INFO] [task_scheduler.cc:121] [Task #81: fused_nn_contrib_conv2d_NCHWc_3] Trial #295: Error in building:
LocalBuilder: Timeout, killed after 30.0 seconds
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(48), T.int64(56), T.int64(56), T.int64(4)), "float32"), p1: T.Buffer((T.int64(12), T.int64(48), T.int64(3), T.int64(3), T.int64(4), T.int64(4)), "float32"), conv2d_NCHWc: T.Buffer((T.int64(1), T.int64(12), T.int64(56), T.int64(56), T.int64(4)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        data_pad = T.alloc_buffer((T.int64(1), T.int64(48), T.int64(58), T.int64(58), T.int64(4)))
        conv2d_NCHWc_global = T.alloc_buffer((T.int64(1), T.int64(12), T.int64(56), T.int64(56), T.int64(4)))
        for n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused_fused in T.parallel(T.int64(168), annotations={"pragma_auto_unroll_max_step": 512, "pragma_unroll_explicit": 1}):
            for n_2_init, oc_chunk_2_init, oh_2_init, ow_2_init, oc_block_2_init, n_3_init, oc_chunk_3_init, oh_3_init, ow_3_init, oc_block_3_init in T.grid(T.int64(1), T.int64(1), T.int64(2), T.int64(14), T.int64(2), T.int64(1), T.int64(4), T.int64(4), T.int64(1), T.int64(1)):
                with T.block("conv2d_NCHWc_init"):
                    v_n = T.axis.spatial(T.int64(1), n_2_init + n_3_init)
                    v_oc_chunk = T.axis.spatial(T.int64(12), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused_fused // T.int64(56) * T.int64(4) + oc_chunk_2_init * T.int64(4) + oc_chunk_3_init)
                    v_oh = T.axis.spatial(T.int64(56), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused_fused % T.int64(56) // T.int64(8) * T.int64(8) + oh_2_init * T.int64(4) + oh_3_init)
                    v_ow = T.axis.spatial(T.int64(56), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused_fused % T.int64(4) * T.int64(14) + ow_2_init + ow_3_init)
                    v_oc_block = T.axis.spatial(T.int64(4), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused_fused % T.int64(8) // T.int64(4) * T.int64(2) + oc_block_2_init + oc_block_3_init)
                    T.reads()
                    T.writes(conv2d_NCHWc_global[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                    T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                    conv2d_NCHWc_global[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = T.float32(0)
            for ic_0, kh_0 in T.grid(T.int64(16), T.int64(3)):
                for ax0, ax1, ax2 in T.grid(T.int64(1), T.int64(3), T.int64(8)):
                    for ax3_ax4_fused in T.vectorized(T.int64(64)):
                        with T.block("data_pad"):
                            v_i0 = T.axis.spatial(T.int64(1), ax0)
                            v_i1 = T.axis.spatial(T.int64(48), ic_0 * T.int64(3) + ax1)
                            v_i2 = T.axis.spatial(T.int64(58), kh_0 + n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused_fused % T.int64(56) // T.int64(8) * T.int64(8) + ax2)
                            v_i3 = T.axis.spatial(T.int64(58), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused_fused % T.int64(4) * T.int64(14) + ax3_ax4_fused // T.int64(4))
                            v_i4 = T.axis.spatial(T.int64(4), ax3_ax4_fused % T.int64(4))
                            T.reads(p0[v_i0, v_i1, v_i2 - T.int64(1), v_i3 - T.int64(1), v_i4])
                            T.writes(data_pad[v_i0, v_i1, v_i2, v_i3, v_i4])
                            data_pad[v_i0, v_i1, v_i2, v_i3, v_i4] = T.if_then_else(T.int64(1) <= v_i2 and v_i2 < T.int64(57) and T.int64(1) <= v_i3 and v_i3 < T.int64(57), p0[v_i0, v_i1, v_i2 - T.int64(1), v_i3 - T.int64(1), v_i4], T.float32(0))
                for kw_0, n_2, oc_chunk_2, oh_2, ow_2, oc_block_2, ic_1, kh_1, kw_1, n_3, oc_chunk_3, oh_3, ow_3, oc_block_3 in T.grid(T.int64(3), T.int64(1), T.int64(1), T.int64(2), T.int64(14), T.int64(2), T.int64(12), T.int64(1), T.int64(1), T.int64(1), T.int64(4), T.int64(4), T.int64(1), T.int64(1)):
                    with T.block("conv2d_NCHWc_update"):
                        v_n = T.axis.spatial(T.int64(1), n_2 + n_3)
                        v_oc_chunk = T.axis.spatial(T.int64(12), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused_fused // T.int64(56) * T.int64(4) + oc_chunk_2 * T.int64(4) + oc_chunk_3)
                        v_oh = T.axis.spatial(T.int64(56), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused_fused % T.int64(56) // T.int64(8) * T.int64(8) + oh_2 * T.int64(4) + oh_3)
                        v_ow = T.axis.spatial(T.int64(56), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused_fused % T.int64(4) * T.int64(14) + ow_2 + ow_3)
                        v_oc_block = T.axis.spatial(T.int64(4), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused_fused % T.int64(8) // T.int64(4) * T.int64(2) + oc_block_2 + oc_block_3)
                        v_ic = T.axis.reduce(T.int64(192), ic_0 * T.int64(12) + ic_1)
                        v_kh = T.axis.reduce(T.int64(3), kh_0 + kh_1)
                        v_kw = T.axis.reduce(T.int64(3), kw_0 + kw_1)
                        T.reads(conv2d_NCHWc_global[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block], data_pad[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)], p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block])
                        T.writes(conv2d_NCHWc_global[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                        T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                        conv2d_NCHWc_global[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = conv2d_NCHWc_global[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] + data_pad[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)] * p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block]
            for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(4), T.int64(8), T.int64(14)):
                for ax4_fused in T.vectorized(T.int64(2)):
                    with T.block("conv2d_NCHWc_global"):
                        v0 = T.axis.spatial(T.int64(1), ax0)
                        v1 = T.axis.spatial(T.int64(12), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused_fused // T.int64(56) * T.int64(4) + ax1)
                        v2 = T.axis.spatial(T.int64(56), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused_fused % T.int64(56) // T.int64(8) * T.int64(8) + ax2)
                        v3 = T.axis.spatial(T.int64(56), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused_fused % T.int64(4) * T.int64(14) + ax3)
                        v4 = T.axis.spatial(T.int64(4), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused_fused % T.int64(8) // T.int64(4) * T.int64(2) + ax4_fused)
                        T.reads(conv2d_NCHWc_global[v0, v1, v2, v3, v4])
                        T.writes(conv2d_NCHWc[v0, v1, v2, v3, v4])
                        conv2d_NCHWc[v0, v1, v2, v3, v4] = conv2d_NCHWc_global[v0, v1, v2, v3, v4]
b0 = sch.get_block(name="data_pad", func_name="main")
b1 = sch.get_block(name="conv2d_NCHWc", func_name="main")
b2 = sch.get_block(name="root", func_name="main")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSRSRS")
l3, l4, l5, l6, l7, l8, l9, l10 = sch.get_loops(block=b1)
v11, v12, v13, v14 = sch.sample_perfect_tile(loop=l3, n=4, max_innermost_factor=64, decision=[1, 1, 1, 1])
l15, l16, l17, l18 = sch.split(loop=l3, factors=[v11, v12, v13, v14], preserve_unit_iters=True)
v19, v20, v21, v22 = sch.sample_perfect_tile(loop=l4, n=4, max_innermost_factor=64, decision=[3, 1, 1, 4])
l23, l24, l25, l26 = sch.split(loop=l4, factors=[v19, v20, v21, v22], preserve_unit_iters=True)
v27, v28, v29, v30 = sch.sample_perfect_tile(loop=l5, n=4, max_innermost_factor=64, decision=[7, 1, 2, 4])
l31, l32, l33, l34 = sch.split(loop=l5, factors=[v27, v28, v29, v30], preserve_unit_iters=True)
v35, v36, v37, v38 = sch.sample_perfect_tile(loop=l6, n=4, max_innermost_factor=64, decision=[1, 4, 14, 1])
l39, l40, l41, l42 = sch.split(loop=l6, factors=[v35, v36, v37, v38], preserve_unit_iters=True)
v43, v44, v45, v46 = sch.sample_perfect_tile(loop=l7, n=4, max_innermost_factor=64, decision=[2, 1, 2, 1])
l47, l48, l49, l50 = sch.split(loop=l7, factors=[v43, v44, v45, v46], preserve_unit_iters=True)
v51, v52 = sch.sample_perfect_tile(loop=l8, n=2, max_innermost_factor=64, decision=[16, 12])
l53, l54 = sch.split(loop=l8, factors=[v51, v52], preserve_unit_iters=True)
v55, v56 = sch.sample_perfect_tile(loop=l9, n=2, max_innermost_factor=64, decision=[3, 1])
l57, l58 = sch.split(loop=l9, factors=[v55, v56], preserve_unit_iters=True)
v59, v60 = sch.sample_perfect_tile(loop=l10, n=2, max_innermost_factor=64, decision=[3, 1])
l61, l62 = sch.split(loop=l10, factors=[v59, v60], preserve_unit_iters=True)
sch.reorder(l15, l23, l31, l39, l47, l16, l24, l32, l40, l48, l53, l57, l61, l17, l25, l33, l41, l49, l54, l58, l62, l18, l26, l34, l42, l50)
b63 = sch.cache_write(block=b1, write_buffer_index=0, storage_scope="global")
sch.reverse_compute_at(block=b63, loop=l48, preserve_unit_loops=True, index=-1)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.vectorize", ann_val=64)
v64 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.unroll_explicit", ann_val=v64)
l65 = sch.sample_compute_location(block=b0, decision=11)
sch.compute_at(block=b0, loop=l65, preserve_unit_loops=True, index=-1)
sch.enter_postproc()
b66 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b66, ann_key="meta_schedule.parallel")
sch.unannotate(block_or_loop=b66, ann_key="meta_schedule.vectorize")
sch.unannotate(block_or_loop=b66, ann_key="meta_schedule.unroll_explicit")
b67, b68, b69 = sch.get_child_blocks(b66)
l70, l71, l72, l73, l74, l75, l76, l77, l78, l79, l80, l81, l82, l83, l84, l85, l86 = sch.get_loops(block=b67)
l87 = sch.fuse(l70, l71, l72, l73, l74, l75, l76, l77, l78, l79, preserve_unit_iters=True)
sch.parallel(loop=l87)
l88 = sch.fuse(l85, l86, preserve_unit_iters=True)
sch.vectorize(loop=l88)
l89, l90, l91, l92, l93, l94, l95, l96, l97, l98, l99, l100, l101, l102, l103, l104, l105 = sch.get_loops(block=b68)
l106 = sch.fuse(l89, preserve_unit_iters=True)
sch.parallel(loop=l106)
sch.annotate(block_or_loop=l106, ann_key="pragma_auto_unroll_max_step", ann_val=512)
sch.annotate(block_or_loop=l106, ann_key="pragma_unroll_explicit", ann_val=1)
l107, l108, l109, l110, l111, l112 = sch.get_loops(block=b69)
l113 = sch.fuse(l112, preserve_unit_iters=True)
sch.vectorize(loop=l113)
b114 = sch.get_block(name="conv2d_NCHWc", func_name="main")
l115, l116, l117, l118, l119, l120, l121, l122, l123, l124, l125, l126, l127, l128, l129, l130, l131 = sch.get_loops(block=b114)
b132 = sch.decompose_reduction(block=b114, loop=l116)
2024-04-29 05:34:28 [INFO] [task_scheduler.cc:121] [Task #81: fused_nn_contrib_conv2d_NCHWc_3] Trial #296: Error in building:
LocalBuilder: Timeout, killed after 30.0 seconds
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(48), T.int64(56), T.int64(56), T.int64(4)), "float32"), p1: T.Buffer((T.int64(12), T.int64(48), T.int64(3), T.int64(3), T.int64(4), T.int64(4)), "float32"), conv2d_NCHWc: T.Buffer((T.int64(1), T.int64(12), T.int64(56), T.int64(56), T.int64(4)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        data_pad = T.alloc_buffer((T.int64(1), T.int64(48), T.int64(58), T.int64(58), T.int64(4)))
        conv2d_NCHWc_global = T.alloc_buffer((T.int64(1), T.int64(12), T.int64(56), T.int64(56), T.int64(4)))
        for n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused_fused in T.parallel(T.int64(336), annotations={"pragma_auto_unroll_max_step": 512, "pragma_unroll_explicit": 1}):
            for n_2_init, oc_chunk_2_init, oh_2_init, ow_2_init, oc_block_2_init, n_3_init, oc_chunk_3_init, oh_3_init, ow_3_init, oc_block_3_init in T.grid(T.int64(1), T.int64(1), T.int64(1), T.int64(28), T.int64(1), T.int64(1), T.int64(4), T.int64(4), T.int64(1), T.int64(1)):
                with T.block("conv2d_NCHWc_init"):
                    v_n = T.axis.spatial(T.int64(1), n_2_init + n_3_init)
                    v_oc_chunk = T.axis.spatial(T.int64(12), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused_fused // T.int64(112) * T.int64(4) + oc_chunk_2_init * T.int64(4) + oc_chunk_3_init)
                    v_oh = T.axis.spatial(T.int64(56), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused_fused % T.int64(112) // T.int64(8) * T.int64(4) + oh_2_init * T.int64(4) + oh_3_init)
                    v_ow = T.axis.spatial(T.int64(56), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused_fused % T.int64(4) // T.int64(2) * T.int64(28) + ow_2_init + ow_3_init)
                    v_oc_block = T.axis.spatial(T.int64(4), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused_fused % T.int64(8) // T.int64(4) * T.int64(2) + n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused_fused % T.int64(2) + oc_block_2_init + oc_block_3_init)
                    T.reads()
                    T.writes(conv2d_NCHWc_global[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                    T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                    conv2d_NCHWc_global[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = T.float32(0)
            for ic_0 in range(T.int64(6)):
                for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(8), T.int64(6), T.int64(30)):
                    for ax4_fused in T.vectorized(T.int64(4)):
                        with T.block("data_pad"):
                            v_i0 = T.axis.spatial(T.int64(1), ax0)
                            v_i1 = T.axis.spatial(T.int64(48), ic_0 * T.int64(8) + ax1)
                            v_i2 = T.axis.spatial(T.int64(58), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused_fused % T.int64(112) // T.int64(8) * T.int64(4) + ax2)
                            v_i3 = T.axis.spatial(T.int64(58), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused_fused % T.int64(4) // T.int64(2) * T.int64(28) + ax3)
                            v_i4 = T.axis.spatial(T.int64(4), ax4_fused)
                            T.reads(p0[v_i0, v_i1, v_i2 - T.int64(1), v_i3 - T.int64(1), v_i4])
                            T.writes(data_pad[v_i0, v_i1, v_i2, v_i3, v_i4])
                            data_pad[v_i0, v_i1, v_i2, v_i3, v_i4] = T.if_then_else(T.int64(1) <= v_i2 and v_i2 < T.int64(57) and T.int64(1) <= v_i3 and v_i3 < T.int64(57), p0[v_i0, v_i1, v_i2 - T.int64(1), v_i3 - T.int64(1), v_i4], T.float32(0))
                for kh_0, kw_0, n_2, oc_chunk_2, oh_2, ow_2, oc_block_2, ic_1, kh_1, kw_1, n_3, oc_chunk_3, oh_3, ow_3, oc_block_3 in T.grid(T.int64(3), T.int64(3), T.int64(1), T.int64(1), T.int64(1), T.int64(28), T.int64(1), T.int64(32), T.int64(1), T.int64(1), T.int64(1), T.int64(4), T.int64(4), T.int64(1), T.int64(1)):
                    with T.block("conv2d_NCHWc_update"):
                        v_n = T.axis.spatial(T.int64(1), n_2 + n_3)
                        v_oc_chunk = T.axis.spatial(T.int64(12), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused_fused // T.int64(112) * T.int64(4) + oc_chunk_2 * T.int64(4) + oc_chunk_3)
                        v_oh = T.axis.spatial(T.int64(56), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused_fused % T.int64(112) // T.int64(8) * T.int64(4) + oh_2 * T.int64(4) + oh_3)
                        v_ow = T.axis.spatial(T.int64(56), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused_fused % T.int64(4) // T.int64(2) * T.int64(28) + ow_2 + ow_3)
                        v_oc_block = T.axis.spatial(T.int64(4), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused_fused % T.int64(8) // T.int64(4) * T.int64(2) + n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused_fused % T.int64(2) + oc_block_2 + oc_block_3)
                        v_ic = T.axis.reduce(T.int64(192), ic_0 * T.int64(32) + ic_1)
                        v_kh = T.axis.reduce(T.int64(3), kh_0 + kh_1)
                        v_kw = T.axis.reduce(T.int64(3), kw_0 + kw_1)
                        T.reads(conv2d_NCHWc_global[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block], data_pad[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)], p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block])
                        T.writes(conv2d_NCHWc_global[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                        T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                        conv2d_NCHWc_global[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = conv2d_NCHWc_global[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] + data_pad[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)] * p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block]
            for ax0, ax1, ax2, ax3, ax4 in T.grid(T.int64(1), T.int64(4), T.int64(4), T.int64(28), T.int64(1)):
                with T.block("conv2d_NCHWc_global"):
                    v0 = T.axis.spatial(T.int64(1), ax0)
                    v1 = T.axis.spatial(T.int64(12), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused_fused // T.int64(112) * T.int64(4) + ax1)
                    v2 = T.axis.spatial(T.int64(56), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused_fused % T.int64(112) // T.int64(8) * T.int64(4) + ax2)
                    v3 = T.axis.spatial(T.int64(56), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused_fused % T.int64(4) // T.int64(2) * T.int64(28) + ax3)
                    v4 = T.axis.spatial(T.int64(4), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused_fused % T.int64(8) // T.int64(4) * T.int64(2) + n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused_fused % T.int64(2) + ax4)
                    T.reads(conv2d_NCHWc_global[v0, v1, v2, v3, v4])
                    T.writes(conv2d_NCHWc[v0, v1, v2, v3, v4])
                    conv2d_NCHWc[v0, v1, v2, v3, v4] = conv2d_NCHWc_global[v0, v1, v2, v3, v4]
b0 = sch.get_block(name="data_pad", func_name="main")
b1 = sch.get_block(name="conv2d_NCHWc", func_name="main")
b2 = sch.get_block(name="root", func_name="main")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSRSRS")
l3, l4, l5, l6, l7, l8, l9, l10 = sch.get_loops(block=b1)
v11, v12, v13, v14 = sch.sample_perfect_tile(loop=l3, n=4, max_innermost_factor=64, decision=[1, 1, 1, 1])
l15, l16, l17, l18 = sch.split(loop=l3, factors=[v11, v12, v13, v14], preserve_unit_iters=True)
v19, v20, v21, v22 = sch.sample_perfect_tile(loop=l4, n=4, max_innermost_factor=64, decision=[3, 1, 1, 4])
l23, l24, l25, l26 = sch.split(loop=l4, factors=[v19, v20, v21, v22], preserve_unit_iters=True)
v27, v28, v29, v30 = sch.sample_perfect_tile(loop=l5, n=4, max_innermost_factor=64, decision=[14, 1, 1, 4])
l31, l32, l33, l34 = sch.split(loop=l5, factors=[v27, v28, v29, v30], preserve_unit_iters=True)
v35, v36, v37, v38 = sch.sample_perfect_tile(loop=l6, n=4, max_innermost_factor=64, decision=[1, 2, 28, 1])
l39, l40, l41, l42 = sch.split(loop=l6, factors=[v35, v36, v37, v38], preserve_unit_iters=True)
v43, v44, v45, v46 = sch.sample_perfect_tile(loop=l7, n=4, max_innermost_factor=64, decision=[2, 2, 1, 1])
l47, l48, l49, l50 = sch.split(loop=l7, factors=[v43, v44, v45, v46], preserve_unit_iters=True)
v51, v52 = sch.sample_perfect_tile(loop=l8, n=2, max_innermost_factor=64, decision=[6, 32])
l53, l54 = sch.split(loop=l8, factors=[v51, v52], preserve_unit_iters=True)
v55, v56 = sch.sample_perfect_tile(loop=l9, n=2, max_innermost_factor=64, decision=[3, 1])
l57, l58 = sch.split(loop=l9, factors=[v55, v56], preserve_unit_iters=True)
v59, v60 = sch.sample_perfect_tile(loop=l10, n=2, max_innermost_factor=64, decision=[3, 1])
l61, l62 = sch.split(loop=l10, factors=[v59, v60], preserve_unit_iters=True)
sch.reorder(l15, l23, l31, l39, l47, l16, l24, l32, l40, l48, l53, l57, l61, l17, l25, l33, l41, l49, l54, l58, l62, l18, l26, l34, l42, l50)
b63 = sch.cache_write(block=b1, write_buffer_index=0, storage_scope="global")
sch.reverse_compute_at(block=b63, loop=l48, preserve_unit_loops=True, index=-1)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.vectorize", ann_val=64)
v64 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.unroll_explicit", ann_val=v64)
l65 = sch.sample_compute_location(block=b0, decision=10)
sch.compute_at(block=b0, loop=l65, preserve_unit_loops=True, index=-1)
sch.enter_postproc()
b66 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b66, ann_key="meta_schedule.parallel")
sch.unannotate(block_or_loop=b66, ann_key="meta_schedule.vectorize")
sch.unannotate(block_or_loop=b66, ann_key="meta_schedule.unroll_explicit")
b67, b68, b69 = sch.get_child_blocks(b66)
l70, l71, l72, l73, l74, l75, l76, l77, l78, l79, l80, l81, l82, l83, l84, l85 = sch.get_loops(block=b67)
l86 = sch.fuse(l70, l71, l72, l73, l74, l75, l76, l77, l78, l79, preserve_unit_iters=True)
sch.parallel(loop=l86)
l87 = sch.fuse(l85, preserve_unit_iters=True)
sch.vectorize(loop=l87)
l88, l89, l90, l91, l92, l93, l94, l95, l96, l97, l98, l99, l100, l101, l102, l103, l104 = sch.get_loops(block=b68)
l105 = sch.fuse(l88, preserve_unit_iters=True)
sch.parallel(loop=l105)
sch.annotate(block_or_loop=l105, ann_key="pragma_auto_unroll_max_step", ann_val=512)
sch.annotate(block_or_loop=l105, ann_key="pragma_unroll_explicit", ann_val=1)
l106, l107, l108, l109, l110, l111 = sch.get_loops(block=b69)
b112 = sch.get_block(name="conv2d_NCHWc", func_name="main")
l113, l114, l115, l116, l117, l118, l119, l120, l121, l122, l123, l124, l125, l126, l127, l128, l129 = sch.get_loops(block=b112)
b130 = sch.decompose_reduction(block=b112, loop=l114)
2024-04-29 05:34:28 [INFO] [task_scheduler.cc:131] [Task #81: fused_nn_contrib_conv2d_NCHWc_3] Trial #297: GFLOPs: 51.7940. Time: 10044.1177 us. Best GFLOPs: 500.6714
2024-04-29 05:34:28 [INFO] [task_scheduler.cc:131] [Task #81: fused_nn_contrib_conv2d_NCHWc_3] Trial #298: GFLOPs: 422.4827. Time: 1231.3517 us. Best GFLOPs: 500.6714
2024-04-29 05:34:28 [INFO] [task_scheduler.cc:131] [Task #81: fused_nn_contrib_conv2d_NCHWc_3] Trial #299: GFLOPs: 283.3184. Time: 1836.1841 us. Best GFLOPs: 500.6714
2024-04-29 05:34:28 [INFO] [task_scheduler.cc:131] [Task #81: fused_nn_contrib_conv2d_NCHWc_3] Trial #300: GFLOPs: 255.6087. Time: 2035.2392 us. Best GFLOPs: 500.6714
2024-04-29 05:34:28 [INFO] [task_scheduler.cc:131] [Task #81: fused_nn_contrib_conv2d_NCHWc_3] Trial #301: GFLOPs: 258.8455. Time: 2009.7883 us. Best GFLOPs: 500.6714
2024-04-29 05:34:28 [INFO] [task_scheduler.cc:131] [Task #81: fused_nn_contrib_conv2d_NCHWc_3] Trial #302: GFLOPs: 208.4455. Time: 2495.7350 us. Best GFLOPs: 500.6714
2024-04-29 05:34:28 [INFO] [task_scheduler.cc:131] [Task #81: fused_nn_contrib_conv2d_NCHWc_3] Trial #303: GFLOPs: 328.3655. Time: 1584.2857 us. Best GFLOPs: 500.6714
2024-04-29 05:34:28 [INFO] [task_scheduler.cc:131] [Task #81: fused_nn_contrib_conv2d_NCHWc_3] Trial #304: GFLOPs: 76.1999. Time: 6827.1029 us. Best GFLOPs: 500.6714
2024-04-29 05:34:28 [INFO] [task_scheduler.cc:131] [Task #81: fused_nn_contrib_conv2d_NCHWc_3] Trial #305: GFLOPs: 97.6750. Time: 5326.0786 us. Best GFLOPs: 500.6714
2024-04-29 05:34:28 [INFO] [task_scheduler.cc:131] [Task #81: fused_nn_contrib_conv2d_NCHWc_3] Trial #306: GFLOPs: 356.0396. Time: 1461.1431 us. Best GFLOPs: 500.6714
2024-04-29 05:34:28 [INFO] [task_scheduler.cc:131] [Task #81: fused_nn_contrib_conv2d_NCHWc_3] Trial #307: GFLOPs: 363.2329. Time: 1432.2071 us. Best GFLOPs: 500.6714
2024-04-29 05:34:28 [INFO] [task_scheduler.cc:131] [Task #81: fused_nn_contrib_conv2d_NCHWc_3] Trial #308: GFLOPs: 251.7153. Time: 2066.7193 us. Best GFLOPs: 500.6714
2024-04-29 05:34:28 [INFO] [task_scheduler.cc:131] [Task #81: fused_nn_contrib_conv2d_NCHWc_3] Trial #309: GFLOPs: 146.7808. Time: 3544.2281 us. Best GFLOPs: 500.6714
2024-04-29 05:34:28 [INFO] [task_scheduler.cc:131] [Task #81: fused_nn_contrib_conv2d_NCHWc_3] Trial #310: GFLOPs: 100.7253. Time: 5164.7860 us. Best GFLOPs: 500.6714
2024-04-29 05:34:28 [INFO] [task_scheduler.cc:131] [Task #81: fused_nn_contrib_conv2d_NCHWc_3] Trial #311: GFLOPs: 123.4636. Time: 4213.5885 us. Best GFLOPs: 500.6714
2024-04-29 05:34:28 [INFO] [task_scheduler.cc:131] [Task #81: fused_nn_contrib_conv2d_NCHWc_3] Trial #312: GFLOPs: 31.0128. Time: 16774.5032 us. Best GFLOPs: 500.6714
2024-04-29 05:34:28 [INFO] [task_scheduler.cc:131] [Task #81: fused_nn_contrib_conv2d_NCHWc_3] Trial #313: GFLOPs: 146.6385. Time: 3547.6677 us. Best GFLOPs: 500.6714
2024-04-29 05:34:28 [INFO] [task_scheduler.cc:131] [Task #81: fused_nn_contrib_conv2d_NCHWc_3] Trial #314: GFLOPs: 113.1063. Time: 4599.4329 us. Best GFLOPs: 500.6714
2024-04-29 05:34:28 [INFO] [task_scheduler.cc:131] [Task #81: fused_nn_contrib_conv2d_NCHWc_3] Trial #315: GFLOPs: 246.3320. Time: 2111.8847 us. Best GFLOPs: 500.6714
2024-04-29 05:34:28 [INFO] [task_scheduler.cc:131] [Task #81: fused_nn_contrib_conv2d_NCHWc_3] Trial #316: GFLOPs: 136.9114. Time: 3799.7176 us. Best GFLOPs: 500.6714
2024-04-29 05:34:28 [INFO] [task_scheduler.cc:131] [Task #81: fused_nn_contrib_conv2d_NCHWc_3] Trial #317: GFLOPs: 200.5312. Time: 2594.2336 us. Best GFLOPs: 500.6714
2024-04-29 05:34:28 [INFO] [task_scheduler.cc:131] [Task #81: fused_nn_contrib_conv2d_NCHWc_3] Trial #318: GFLOPs: 21.5435. Time: 24147.6928 us. Best GFLOPs: 500.6714
2024-04-29 05:34:28 [INFO] [task_scheduler.cc:131] [Task #81: fused_nn_contrib_conv2d_NCHWc_3] Trial #319: GFLOPs: 39.7396. Time: 13090.8288 us. Best GFLOPs: 500.6714
2024-04-29 05:34:28 [INFO] [task_scheduler.cc:131] [Task #81: fused_nn_contrib_conv2d_NCHWc_3] Trial #320: GFLOPs: 32.6232. Time: 15946.4586 us. Best GFLOPs: 500.6714
2024-04-29 05:45:36 [INFO] [evolutionary_search.cc:713] Generating candidates......
2024-04-29 05:45:37 [INFO] [evolutionary_search.cc:715] Picked top 102 candidate(s) from database
2024-04-29 05:45:42 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x119191d8)]: 11 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x91eb9d8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0xb6918a8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x10e07d28)]: 0 failure(s)
2024-04-29 05:45:42 [INFO] [evolutionary_search.cc:723] Sampled 399 candidate(s)
2024-04-29 05:45:54 [INFO] [evolutionary_search.cc:621] Evolve iter #0 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x119191d8)]: 5 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x91eb9d8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0xb6918a8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x10e07d28)]: 0 failure(s)
2024-04-29 05:46:06 [INFO] [evolutionary_search.cc:621] Evolve iter #1 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x119191d8)]: 3 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x91eb9d8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0xb6918a8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x10e07d28)]: 0 failure(s)
2024-04-29 05:46:18 [INFO] [evolutionary_search.cc:621] Evolve iter #2 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x119191d8)]: 3 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x91eb9d8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0xb6918a8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x10e07d28)]: 0 failure(s)
2024-04-29 05:46:31 [INFO] [evolutionary_search.cc:621] Evolve iter #3 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x119191d8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x91eb9d8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0xb6918a8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x10e07d28)]: 0 failure(s)
2024-04-29 05:46:38 [INFO] [evolutionary_search.cc:649] Scores of the best 64 candidates:
[1 : 16]:	0.9752  0.9682  0.9636  0.9373  0.9001  0.8974  0.8974  0.8931  0.8931  0.8885  0.8885  0.8734  0.8734  0.8734  0.8715  0.8664
[17 : 32]:	0.8664  0.8585  0.8493  0.8478  0.8464  0.8464  0.8390  0.8390  0.8232  0.8206  0.8179  0.8158  0.8158  0.8158  0.8079  0.8077
[33 : 48]:	0.8005  0.7971  0.7697  0.7697  0.7693  0.7693  0.7650  0.7647  0.7623  0.7619  0.7619  0.7619  0.7619  0.7619  0.7584  0.7566
[49 : 64]:	0.7566  0.7558  0.7543  0.7543  0.7543  0.7518  0.7508  0.7479  0.7474  0.7389  0.7372  0.7244  0.7244  0.7244  0.7217  0.7213
2024-04-29 05:46:39 [INFO] [evolutionary_search.cc:727] Got 64 candidate(s) with evolutionary search
2024-04-29 05:46:39 [INFO] [evolutionary_search.cc:730] Sending 64 candidates(s) for measurement
2024-04-29 05:48:27 [INFO] [task_scheduler.cc:131] [Task #81: fused_nn_contrib_conv2d_NCHWc_3] Trial #321: GFLOPs: 500.1356. Time: 1040.1675 us. Best GFLOPs: 500.6714
2024-04-29 05:48:27 [INFO] [task_scheduler.cc:131] [Task #81: fused_nn_contrib_conv2d_NCHWc_3] Trial #322: GFLOPs: 504.5426. Time: 1031.0819 us. Best GFLOPs: 504.5426
2024-04-29 05:48:27 [INFO] [task_scheduler.cc:131] [Task #81: fused_nn_contrib_conv2d_NCHWc_3] Trial #323: GFLOPs: 502.7957. Time: 1034.6644 us. Best GFLOPs: 504.5426
2024-04-29 05:48:27 [INFO] [task_scheduler.cc:131] [Task #81: fused_nn_contrib_conv2d_NCHWc_3] Trial #324: GFLOPs: 502.3290. Time: 1035.6255 us. Best GFLOPs: 504.5426
2024-04-29 05:48:27 [INFO] [task_scheduler.cc:131] [Task #81: fused_nn_contrib_conv2d_NCHWc_3] Trial #325: GFLOPs: 434.3315. Time: 1197.7596 us. Best GFLOPs: 504.5426
2024-04-29 05:48:27 [INFO] [task_scheduler.cc:131] [Task #81: fused_nn_contrib_conv2d_NCHWc_3] Trial #326: GFLOPs: 424.8352. Time: 1224.5332 us. Best GFLOPs: 504.5426
2024-04-29 05:48:27 [INFO] [task_scheduler.cc:131] [Task #81: fused_nn_contrib_conv2d_NCHWc_3] Trial #327: GFLOPs: 362.0618. Time: 1436.8398 us. Best GFLOPs: 504.5426
2024-04-29 05:48:27 [INFO] [task_scheduler.cc:131] [Task #81: fused_nn_contrib_conv2d_NCHWc_3] Trial #328: GFLOPs: 442.0715. Time: 1176.7888 us. Best GFLOPs: 504.5426
2024-04-29 05:48:27 [INFO] [task_scheduler.cc:131] [Task #81: fused_nn_contrib_conv2d_NCHWc_3] Trial #329: GFLOPs: 427.2155. Time: 1217.7105 us. Best GFLOPs: 504.5426
2024-04-29 05:48:27 [INFO] [task_scheduler.cc:131] [Task #81: fused_nn_contrib_conv2d_NCHWc_3] Trial #330: GFLOPs: 439.2504. Time: 1184.3468 us. Best GFLOPs: 504.5426
2024-04-29 05:48:27 [INFO] [task_scheduler.cc:131] [Task #81: fused_nn_contrib_conv2d_NCHWc_3] Trial #331: GFLOPs: 423.6666. Time: 1227.9109 us. Best GFLOPs: 504.5426
2024-04-29 05:48:27 [INFO] [task_scheduler.cc:131] [Task #81: fused_nn_contrib_conv2d_NCHWc_3] Trial #332: GFLOPs: 438.8675. Time: 1185.3801 us. Best GFLOPs: 504.5426
2024-04-29 05:48:27 [INFO] [task_scheduler.cc:131] [Task #81: fused_nn_contrib_conv2d_NCHWc_3] Trial #333: GFLOPs: 422.9686. Time: 1229.9370 us. Best GFLOPs: 504.5426
2024-04-29 05:48:27 [INFO] [task_scheduler.cc:131] [Task #81: fused_nn_contrib_conv2d_NCHWc_3] Trial #334: GFLOPs: 361.2207. Time: 1440.1854 us. Best GFLOPs: 504.5426
2024-04-29 05:48:27 [INFO] [task_scheduler.cc:131] [Task #81: fused_nn_contrib_conv2d_NCHWc_3] Trial #335: GFLOPs: 359.2841. Time: 1447.9481 us. Best GFLOPs: 504.5426
2024-04-29 05:48:27 [INFO] [task_scheduler.cc:131] [Task #81: fused_nn_contrib_conv2d_NCHWc_3] Trial #336: GFLOPs: 438.9189. Time: 1185.2413 us. Best GFLOPs: 504.5426
2024-04-29 05:48:27 [INFO] [task_scheduler.cc:131] [Task #81: fused_nn_contrib_conv2d_NCHWc_3] Trial #337: GFLOPs: 358.0820. Time: 1452.8092 us. Best GFLOPs: 504.5426
2024-04-29 05:48:27 [INFO] [task_scheduler.cc:131] [Task #81: fused_nn_contrib_conv2d_NCHWc_3] Trial #338: GFLOPs: 460.0073. Time: 1130.9054 us. Best GFLOPs: 504.5426
2024-04-29 05:48:27 [INFO] [task_scheduler.cc:131] [Task #81: fused_nn_contrib_conv2d_NCHWc_3] Trial #339: GFLOPs: 418.9207. Time: 1241.8216 us. Best GFLOPs: 504.5426
2024-04-29 05:48:27 [INFO] [task_scheduler.cc:131] [Task #81: fused_nn_contrib_conv2d_NCHWc_3] Trial #340: GFLOPs: 457.0093. Time: 1138.3242 us. Best GFLOPs: 504.5426
2024-04-29 05:48:27 [INFO] [task_scheduler.cc:131] [Task #81: fused_nn_contrib_conv2d_NCHWc_3] Trial #341: GFLOPs: 415.2903. Time: 1252.6775 us. Best GFLOPs: 504.5426
2024-04-29 05:48:27 [INFO] [task_scheduler.cc:131] [Task #81: fused_nn_contrib_conv2d_NCHWc_3] Trial #342: GFLOPs: 415.0192. Time: 1253.4956 us. Best GFLOPs: 504.5426
2024-04-29 05:48:27 [INFO] [task_scheduler.cc:131] [Task #81: fused_nn_contrib_conv2d_NCHWc_3] Trial #343: GFLOPs: 414.9977. Time: 1253.5607 us. Best GFLOPs: 504.5426
2024-04-29 05:48:27 [INFO] [task_scheduler.cc:131] [Task #81: fused_nn_contrib_conv2d_NCHWc_3] Trial #344: GFLOPs: 418.0722. Time: 1244.3420 us. Best GFLOPs: 504.5426
2024-04-29 05:48:27 [INFO] [task_scheduler.cc:131] [Task #81: fused_nn_contrib_conv2d_NCHWc_3] Trial #345: GFLOPs: 402.7052. Time: 1291.8253 us. Best GFLOPs: 504.5426
2024-04-29 05:48:27 [INFO] [task_scheduler.cc:131] [Task #81: fused_nn_contrib_conv2d_NCHWc_3] Trial #346: GFLOPs: 404.0588. Time: 1287.4976 us. Best GFLOPs: 504.5426
2024-04-29 05:48:27 [INFO] [task_scheduler.cc:121] [Task #81: fused_nn_contrib_conv2d_NCHWc_3] Trial #347: Error in building:
LocalBuilder: Timeout, killed after 30.0 seconds
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(48), T.int64(56), T.int64(56), T.int64(4)), "float32"), p1: T.Buffer((T.int64(12), T.int64(48), T.int64(3), T.int64(3), T.int64(4), T.int64(4)), "float32"), conv2d_NCHWc: T.Buffer((T.int64(1), T.int64(12), T.int64(56), T.int64(56), T.int64(4)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        data_pad = T.alloc_buffer((T.int64(1), T.int64(48), T.int64(58), T.int64(58), T.int64(4)))
        conv2d_NCHWc_global = T.alloc_buffer((T.int64(1), T.int64(12), T.int64(56), T.int64(56), T.int64(4)))
        for n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused_fused in T.parallel(T.int64(336), annotations={"pragma_auto_unroll_max_step": 512, "pragma_unroll_explicit": 1}):
            for n_2_init, oc_chunk_2_init, oh_2_init, ow_2_init, oc_block_2_init, n_3_init, oc_chunk_3_init, oh_3_init, ow_3_init, oc_block_3_init in T.grid(T.int64(1), T.int64(4), T.int64(1), T.int64(28), T.int64(1), T.int64(1), T.int64(1), T.int64(4), T.int64(1), T.int64(1)):
                with T.block("conv2d_NCHWc_init"):
                    v_n = T.axis.spatial(T.int64(1), n_2_init + n_3_init)
                    v_oc_chunk = T.axis.spatial(T.int64(12), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused_fused // T.int64(112) * T.int64(4) + oc_chunk_2_init + oc_chunk_3_init)
                    v_oh = T.axis.spatial(T.int64(56), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused_fused % T.int64(112) // T.int64(8) * T.int64(4) + oh_2_init * T.int64(4) + oh_3_init)
                    v_ow = T.axis.spatial(T.int64(56), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused_fused % T.int64(8) // T.int64(4) * T.int64(28) + ow_2_init + ow_3_init)
                    v_oc_block = T.axis.spatial(T.int64(4), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused_fused % T.int64(4) + oc_block_2_init + oc_block_3_init)
                    T.reads()
                    T.writes(conv2d_NCHWc_global[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                    T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                    conv2d_NCHWc_global[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = T.float32(0)
            for ic_0 in range(T.int64(96)):
                for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(1), T.int64(6), T.int64(30)):
                    for ax4_fused in T.vectorized(T.int64(2)):
                        with T.block("data_pad"):
                            v_i0 = T.axis.spatial(T.int64(1), ax0)
                            v_i1 = T.axis.spatial(T.int64(48), ic_0 // T.int64(2) + ax1)
                            v_i2 = T.axis.spatial(T.int64(58), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused_fused % T.int64(112) // T.int64(8) * T.int64(4) + ax2)
                            v_i3 = T.axis.spatial(T.int64(58), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused_fused % T.int64(8) // T.int64(4) * T.int64(28) + ax3)
                            v_i4 = T.axis.spatial(T.int64(4), ic_0 % T.int64(2) * T.int64(2) + ax4_fused)
                            T.reads(p0[v_i0, v_i1, v_i2 - T.int64(1), v_i3 - T.int64(1), v_i4])
                            T.writes(data_pad[v_i0, v_i1, v_i2, v_i3, v_i4])
                            data_pad[v_i0, v_i1, v_i2, v_i3, v_i4] = T.if_then_else(T.int64(1) <= v_i2 and v_i2 < T.int64(57) and T.int64(1) <= v_i3 and v_i3 < T.int64(57), p0[v_i0, v_i1, v_i2 - T.int64(1), v_i3 - T.int64(1), v_i4], T.float32(0))
                for kh_0, kw_0, n_2, oc_chunk_2, oh_2, ow_2, oc_block_2, ic_1, kh_1, kw_1, n_3, oc_chunk_3, oh_3, ow_3, oc_block_3 in T.grid(T.int64(3), T.int64(3), T.int64(1), T.int64(4), T.int64(1), T.int64(28), T.int64(1), T.int64(2), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(4), T.int64(1), T.int64(1)):
                    with T.block("conv2d_NCHWc_update"):
                        v_n = T.axis.spatial(T.int64(1), n_2 + n_3)
                        v_oc_chunk = T.axis.spatial(T.int64(12), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused_fused // T.int64(112) * T.int64(4) + oc_chunk_2 + oc_chunk_3)
                        v_oh = T.axis.spatial(T.int64(56), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused_fused % T.int64(112) // T.int64(8) * T.int64(4) + oh_2 * T.int64(4) + oh_3)
                        v_ow = T.axis.spatial(T.int64(56), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused_fused % T.int64(8) // T.int64(4) * T.int64(28) + ow_2 + ow_3)
                        v_oc_block = T.axis.spatial(T.int64(4), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused_fused % T.int64(4) + oc_block_2 + oc_block_3)
                        v_ic = T.axis.reduce(T.int64(192), ic_0 * T.int64(2) + ic_1)
                        v_kh = T.axis.reduce(T.int64(3), kh_0 + kh_1)
                        v_kw = T.axis.reduce(T.int64(3), kw_0 + kw_1)
                        T.reads(conv2d_NCHWc_global[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block], data_pad[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)], p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block])
                        T.writes(conv2d_NCHWc_global[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                        T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                        conv2d_NCHWc_global[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = conv2d_NCHWc_global[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] + data_pad[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)] * p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block]
            for ax0, ax1, ax2, ax3, ax4 in T.grid(T.int64(1), T.int64(4), T.int64(4), T.int64(28), T.int64(1)):
                with T.block("conv2d_NCHWc_global"):
                    v0 = T.axis.spatial(T.int64(1), ax0)
                    v1 = T.axis.spatial(T.int64(12), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused_fused // T.int64(112) * T.int64(4) + ax1)
                    v2 = T.axis.spatial(T.int64(56), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused_fused % T.int64(112) // T.int64(8) * T.int64(4) + ax2)
                    v3 = T.axis.spatial(T.int64(56), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused_fused % T.int64(8) // T.int64(4) * T.int64(28) + ax3)
                    v4 = T.axis.spatial(T.int64(4), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused_fused % T.int64(4) + ax4)
                    T.reads(conv2d_NCHWc_global[v0, v1, v2, v3, v4])
                    T.writes(conv2d_NCHWc[v0, v1, v2, v3, v4])
                    conv2d_NCHWc[v0, v1, v2, v3, v4] = conv2d_NCHWc_global[v0, v1, v2, v3, v4]
b0 = sch.get_block(name="data_pad", func_name="main")
b1 = sch.get_block(name="conv2d_NCHWc", func_name="main")
b2 = sch.get_block(name="root", func_name="main")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSRSRS")
l3, l4, l5, l6, l7, l8, l9, l10 = sch.get_loops(block=b1)
v11, v12, v13, v14 = sch.sample_perfect_tile(loop=l3, n=4, max_innermost_factor=64, decision=[1, 1, 1, 1])
l15, l16, l17, l18 = sch.split(loop=l3, factors=[v11, v12, v13, v14], preserve_unit_iters=True)
v19, v20, v21, v22 = sch.sample_perfect_tile(loop=l4, n=4, max_innermost_factor=64, decision=[3, 1, 4, 1])
l23, l24, l25, l26 = sch.split(loop=l4, factors=[v19, v20, v21, v22], preserve_unit_iters=True)
v27, v28, v29, v30 = sch.sample_perfect_tile(loop=l5, n=4, max_innermost_factor=64, decision=[14, 1, 1, 4])
l31, l32, l33, l34 = sch.split(loop=l5, factors=[v27, v28, v29, v30], preserve_unit_iters=True)
v35, v36, v37, v38 = sch.sample_perfect_tile(loop=l6, n=4, max_innermost_factor=64, decision=[1, 2, 28, 1])
l39, l40, l41, l42 = sch.split(loop=l6, factors=[v35, v36, v37, v38], preserve_unit_iters=True)
v43, v44, v45, v46 = sch.sample_perfect_tile(loop=l7, n=4, max_innermost_factor=64, decision=[1, 4, 1, 1])
l47, l48, l49, l50 = sch.split(loop=l7, factors=[v43, v44, v45, v46], preserve_unit_iters=True)
v51, v52 = sch.sample_perfect_tile(loop=l8, n=2, max_innermost_factor=64, decision=[96, 2])
l53, l54 = sch.split(loop=l8, factors=[v51, v52], preserve_unit_iters=True)
v55, v56 = sch.sample_perfect_tile(loop=l9, n=2, max_innermost_factor=64, decision=[3, 1])
l57, l58 = sch.split(loop=l9, factors=[v55, v56], preserve_unit_iters=True)
v59, v60 = sch.sample_perfect_tile(loop=l10, n=2, max_innermost_factor=64, decision=[3, 1])
l61, l62 = sch.split(loop=l10, factors=[v59, v60], preserve_unit_iters=True)
sch.reorder(l15, l23, l31, l39, l47, l16, l24, l32, l40, l48, l53, l57, l61, l17, l25, l33, l41, l49, l54, l58, l62, l18, l26, l34, l42, l50)
b63 = sch.cache_write(block=b1, write_buffer_index=0, storage_scope="global")
sch.reverse_compute_at(block=b63, loop=l48, preserve_unit_loops=True, index=-1)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.vectorize", ann_val=64)
v64 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.unroll_explicit", ann_val=v64)
l65 = sch.sample_compute_location(block=b0, decision=10)
sch.compute_at(block=b0, loop=l65, preserve_unit_loops=True, index=-1)
sch.enter_postproc()
b66 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b66, ann_key="meta_schedule.parallel")
sch.unannotate(block_or_loop=b66, ann_key="meta_schedule.vectorize")
sch.unannotate(block_or_loop=b66, ann_key="meta_schedule.unroll_explicit")
b67, b68, b69 = sch.get_child_blocks(b66)
l70, l71, l72, l73, l74, l75, l76, l77, l78, l79, l80, l81, l82, l83, l84, l85 = sch.get_loops(block=b67)
l86 = sch.fuse(l70, l71, l72, l73, l74, l75, l76, l77, l78, l79, preserve_unit_iters=True)
sch.parallel(loop=l86)
l87 = sch.fuse(l85, preserve_unit_iters=True)
sch.vectorize(loop=l87)
l88, l89, l90, l91, l92, l93, l94, l95, l96, l97, l98, l99, l100, l101, l102, l103, l104 = sch.get_loops(block=b68)
l105 = sch.fuse(l88, preserve_unit_iters=True)
sch.parallel(loop=l105)
sch.annotate(block_or_loop=l105, ann_key="pragma_auto_unroll_max_step", ann_val=512)
sch.annotate(block_or_loop=l105, ann_key="pragma_unroll_explicit", ann_val=1)
l106, l107, l108, l109, l110, l111 = sch.get_loops(block=b69)
b112 = sch.get_block(name="conv2d_NCHWc", func_name="main")
l113, l114, l115, l116, l117, l118, l119, l120, l121, l122, l123, l124, l125, l126, l127, l128, l129 = sch.get_loops(block=b112)
b130 = sch.decompose_reduction(block=b112, loop=l114)
2024-04-29 05:48:27 [INFO] [task_scheduler.cc:131] [Task #81: fused_nn_contrib_conv2d_NCHWc_3] Trial #348: GFLOPs: 429.9415. Time: 1209.9897 us. Best GFLOPs: 504.5426
2024-04-29 05:48:27 [INFO] [task_scheduler.cc:131] [Task #81: fused_nn_contrib_conv2d_NCHWc_3] Trial #349: GFLOPs: 89.7172. Time: 5798.4934 us. Best GFLOPs: 504.5426
2024-04-29 05:48:27 [INFO] [task_scheduler.cc:131] [Task #81: fused_nn_contrib_conv2d_NCHWc_3] Trial #350: GFLOPs: 318.8620. Time: 1631.5045 us. Best GFLOPs: 504.5426
2024-04-29 05:48:27 [INFO] [task_scheduler.cc:131] [Task #81: fused_nn_contrib_conv2d_NCHWc_3] Trial #351: GFLOPs: 406.4335. Time: 1279.9752 us. Best GFLOPs: 504.5426
2024-04-29 05:48:27 [INFO] [task_scheduler.cc:131] [Task #81: fused_nn_contrib_conv2d_NCHWc_3] Trial #352: GFLOPs: 833.6492. Time: 624.0332 us. Best GFLOPs: 833.6492
2024-04-29 05:48:27 [INFO] [task_scheduler.cc:131] [Task #81: fused_nn_contrib_conv2d_NCHWc_3] Trial #353: GFLOPs: 307.6480. Time: 1690.9739 us. Best GFLOPs: 833.6492
2024-04-29 05:48:27 [INFO] [task_scheduler.cc:131] [Task #81: fused_nn_contrib_conv2d_NCHWc_3] Trial #354: GFLOPs: 363.1097. Time: 1432.6930 us. Best GFLOPs: 833.6492
2024-04-29 05:48:27 [INFO] [task_scheduler.cc:131] [Task #81: fused_nn_contrib_conv2d_NCHWc_3] Trial #355: GFLOPs: 232.1770. Time: 2240.6391 us. Best GFLOPs: 833.6492
2024-04-29 05:48:27 [INFO] [task_scheduler.cc:131] [Task #81: fused_nn_contrib_conv2d_NCHWc_3] Trial #356: GFLOPs: 475.9019. Time: 1093.1344 us. Best GFLOPs: 833.6492
2024-04-29 05:48:27 [INFO] [task_scheduler.cc:131] [Task #81: fused_nn_contrib_conv2d_NCHWc_3] Trial #357: GFLOPs: 363.6038. Time: 1430.7462 us. Best GFLOPs: 833.6492
2024-04-29 05:48:27 [INFO] [task_scheduler.cc:131] [Task #81: fused_nn_contrib_conv2d_NCHWc_3] Trial #358: GFLOPs: 202.2352. Time: 2572.3748 us. Best GFLOPs: 833.6492
2024-04-29 05:48:27 [INFO] [task_scheduler.cc:131] [Task #81: fused_nn_contrib_conv2d_NCHWc_3] Trial #359: GFLOPs: 396.1122. Time: 1313.3266 us. Best GFLOPs: 833.6492
2024-04-29 05:48:27 [INFO] [task_scheduler.cc:131] [Task #81: fused_nn_contrib_conv2d_NCHWc_3] Trial #360: GFLOPs: 477.0006. Time: 1090.6167 us. Best GFLOPs: 833.6492
2024-04-29 05:48:27 [INFO] [task_scheduler.cc:131] [Task #81: fused_nn_contrib_conv2d_NCHWc_3] Trial #361: GFLOPs: 476.2670. Time: 1092.2966 us. Best GFLOPs: 833.6492
2024-04-29 05:48:27 [INFO] [task_scheduler.cc:131] [Task #81: fused_nn_contrib_conv2d_NCHWc_3] Trial #362: GFLOPs: 364.9431. Time: 1425.4956 us. Best GFLOPs: 833.6492
2024-04-29 05:48:27 [INFO] [task_scheduler.cc:131] [Task #81: fused_nn_contrib_conv2d_NCHWc_3] Trial #363: GFLOPs: 364.3568. Time: 1427.7892 us. Best GFLOPs: 833.6492
2024-04-29 05:48:27 [INFO] [task_scheduler.cc:131] [Task #81: fused_nn_contrib_conv2d_NCHWc_3] Trial #364: GFLOPs: 259.9241. Time: 2001.4490 us. Best GFLOPs: 833.6492
2024-04-29 05:48:27 [INFO] [task_scheduler.cc:131] [Task #81: fused_nn_contrib_conv2d_NCHWc_3] Trial #365: GFLOPs: 362.9776. Time: 1433.2145 us. Best GFLOPs: 833.6492
2024-04-29 05:48:27 [INFO] [task_scheduler.cc:131] [Task #81: fused_nn_contrib_conv2d_NCHWc_3] Trial #366: GFLOPs: 254.7745. Time: 2041.9032 us. Best GFLOPs: 833.6492
2024-04-29 05:48:27 [INFO] [task_scheduler.cc:131] [Task #81: fused_nn_contrib_conv2d_NCHWc_3] Trial #367: GFLOPs: 450.7960. Time: 1154.0136 us. Best GFLOPs: 833.6492
2024-04-29 05:48:27 [INFO] [task_scheduler.cc:131] [Task #81: fused_nn_contrib_conv2d_NCHWc_3] Trial #368: GFLOPs: 465.2214. Time: 1118.2305 us. Best GFLOPs: 833.6492
2024-04-29 05:48:27 [INFO] [task_scheduler.cc:131] [Task #81: fused_nn_contrib_conv2d_NCHWc_3] Trial #369: GFLOPs: 497.7933. Time: 1045.0619 us. Best GFLOPs: 833.6492
2024-04-29 05:48:27 [INFO] [task_scheduler.cc:131] [Task #81: fused_nn_contrib_conv2d_NCHWc_3] Trial #370: GFLOPs: 377.1737. Time: 1379.2712 us. Best GFLOPs: 833.6492
2024-04-29 05:48:27 [INFO] [task_scheduler.cc:131] [Task #81: fused_nn_contrib_conv2d_NCHWc_3] Trial #371: GFLOPs: 465.9394. Time: 1116.5073 us. Best GFLOPs: 833.6492
2024-04-29 05:48:27 [INFO] [task_scheduler.cc:131] [Task #81: fused_nn_contrib_conv2d_NCHWc_3] Trial #372: GFLOPs: 498.2548. Time: 1044.0938 us. Best GFLOPs: 833.6492
2024-04-29 05:48:27 [INFO] [task_scheduler.cc:131] [Task #81: fused_nn_contrib_conv2d_NCHWc_3] Trial #373: GFLOPs: 435.2081. Time: 1195.3472 us. Best GFLOPs: 833.6492
2024-04-29 05:48:27 [INFO] [task_scheduler.cc:131] [Task #81: fused_nn_contrib_conv2d_NCHWc_3] Trial #374: GFLOPs: 177.0755. Time: 2937.8693 us. Best GFLOPs: 833.6492
2024-04-29 05:48:27 [INFO] [task_scheduler.cc:131] [Task #81: fused_nn_contrib_conv2d_NCHWc_3] Trial #375: GFLOPs: 553.3600. Time: 940.1199 us. Best GFLOPs: 833.6492
2024-04-29 05:48:27 [INFO] [task_scheduler.cc:131] [Task #81: fused_nn_contrib_conv2d_NCHWc_3] Trial #376: GFLOPs: 138.7382. Time: 3749.6853 us. Best GFLOPs: 833.6492
2024-04-29 05:48:27 [INFO] [task_scheduler.cc:131] [Task #81: fused_nn_contrib_conv2d_NCHWc_3] Trial #377: GFLOPs: 138.7745. Time: 3748.7056 us. Best GFLOPs: 833.6492
2024-04-29 05:48:27 [INFO] [task_scheduler.cc:131] [Task #81: fused_nn_contrib_conv2d_NCHWc_3] Trial #378: GFLOPs: 427.1295. Time: 1217.9557 us. Best GFLOPs: 833.6492
2024-04-29 05:48:27 [INFO] [task_scheduler.cc:131] [Task #81: fused_nn_contrib_conv2d_NCHWc_3] Trial #379: GFLOPs: 372.8336. Time: 1395.3270 us. Best GFLOPs: 833.6492
2024-04-29 05:48:27 [INFO] [task_scheduler.cc:131] [Task #81: fused_nn_contrib_conv2d_NCHWc_3] Trial #380: GFLOPs: 222.1355. Time: 2341.9257 us. Best GFLOPs: 833.6492
2024-04-29 05:48:27 [INFO] [task_scheduler.cc:131] [Task #81: fused_nn_contrib_conv2d_NCHWc_3] Trial #381: GFLOPs: 252.0276. Time: 2064.1576 us. Best GFLOPs: 833.6492
2024-04-29 05:48:27 [INFO] [task_scheduler.cc:131] [Task #81: fused_nn_contrib_conv2d_NCHWc_3] Trial #382: GFLOPs: 102.8088. Time: 5060.1186 us. Best GFLOPs: 833.6492
2024-04-29 05:48:27 [INFO] [task_scheduler.cc:131] [Task #81: fused_nn_contrib_conv2d_NCHWc_3] Trial #383: GFLOPs: 114.3938. Time: 4547.6659 us. Best GFLOPs: 833.6492
2024-04-29 05:48:27 [INFO] [task_scheduler.cc:131] [Task #81: fused_nn_contrib_conv2d_NCHWc_3] Trial #384: GFLOPs: 21.1695. Time: 24574.2632 us. Best GFLOPs: 833.6492
2024-04-29 06:13:33 [INFO] [evolutionary_search.cc:713] Generating candidates......
2024-04-29 06:13:34 [INFO] [evolutionary_search.cc:715] Picked top 102 candidate(s) from database
2024-04-29 06:13:38 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x119191d8)]: 6 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x91eb9d8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0xb6918a8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x10e07d28)]: 0 failure(s)
2024-04-29 06:13:38 [INFO] [evolutionary_search.cc:723] Sampled 404 candidate(s)
2024-04-29 06:13:50 [INFO] [evolutionary_search.cc:621] Evolve iter #0 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x119191d8)]: 1 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x91eb9d8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0xb6918a8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x10e07d28)]: 0 failure(s)
2024-04-29 06:14:03 [INFO] [evolutionary_search.cc:621] Evolve iter #1 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x119191d8)]: 2 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x91eb9d8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0xb6918a8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x10e07d28)]: 0 failure(s)
2024-04-29 06:14:16 [INFO] [evolutionary_search.cc:621] Evolve iter #2 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x119191d8)]: 1 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x91eb9d8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0xb6918a8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x10e07d28)]: 0 failure(s)
2024-04-29 06:14:29 [INFO] [evolutionary_search.cc:621] Evolve iter #3 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x119191d8)]: 1 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x91eb9d8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0xb6918a8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x10e07d28)]: 0 failure(s)
2024-04-29 06:14:36 [INFO] [evolutionary_search.cc:649] Scores of the best 64 candidates:
[1 : 16]:	0.9820  0.9820  0.9820  0.9820  0.9799  0.9799  0.9799  0.9390  0.9390  0.9201  0.8688  0.8667  0.8667  0.8289  0.8047  0.7861
[17 : 32]:	0.7861  0.7861  0.7861  0.6764  0.6371  0.6309  0.6262  0.6205  0.6205  0.6205  0.6122  0.6117  0.6099  0.6051  0.6029  0.5979
[33 : 48]:	0.5971  0.5964  0.5960  0.5944  0.5934  0.5934  0.5884  0.5840  0.5812  0.5747  0.5747  0.5733  0.5733  0.5723  0.5708  0.5701
[49 : 64]:	0.5695  0.5695  0.5695  0.5693  0.5693  0.5691  0.5598  0.5596  0.5596  0.5596  0.5596  0.5596  0.5580  0.5580  0.5580  0.5566
2024-04-29 06:14:36 [INFO] [evolutionary_search.cc:727] Got 64 candidate(s) with evolutionary search
2024-04-29 06:14:37 [INFO] [evolutionary_search.cc:730] Sending 64 candidates(s) for measurement
2024-04-29 06:16:20 [INFO] [task_scheduler.cc:131] [Task #81: fused_nn_contrib_conv2d_NCHWc_3] Trial #385: GFLOPs: 104.5455. Time: 4976.0632 us. Best GFLOPs: 833.6492
2024-04-29 06:16:20 [INFO] [task_scheduler.cc:131] [Task #81: fused_nn_contrib_conv2d_NCHWc_3] Trial #386: GFLOPs: 105.1492. Time: 4947.4924 us. Best GFLOPs: 833.6492
2024-04-29 06:16:20 [INFO] [task_scheduler.cc:131] [Task #81: fused_nn_contrib_conv2d_NCHWc_3] Trial #387: GFLOPs: 105.3725. Time: 4937.0057 us. Best GFLOPs: 833.6492
2024-04-29 06:16:20 [INFO] [task_scheduler.cc:131] [Task #81: fused_nn_contrib_conv2d_NCHWc_3] Trial #388: GFLOPs: 831.5545. Time: 625.6051 us. Best GFLOPs: 833.6492
2024-04-29 06:16:20 [INFO] [task_scheduler.cc:131] [Task #81: fused_nn_contrib_conv2d_NCHWc_3] Trial #389: GFLOPs: 105.4585. Time: 4932.9829 us. Best GFLOPs: 833.6492
2024-04-29 06:16:20 [INFO] [task_scheduler.cc:131] [Task #81: fused_nn_contrib_conv2d_NCHWc_3] Trial #390: GFLOPs: 695.0307. Time: 748.4918 us. Best GFLOPs: 833.6492
2024-04-29 06:16:20 [INFO] [task_scheduler.cc:131] [Task #81: fused_nn_contrib_conv2d_NCHWc_3] Trial #391: GFLOPs: 837.0435. Time: 621.5026 us. Best GFLOPs: 837.0435
2024-04-29 06:16:20 [INFO] [task_scheduler.cc:131] [Task #81: fused_nn_contrib_conv2d_NCHWc_3] Trial #392: GFLOPs: 832.7207. Time: 624.7290 us. Best GFLOPs: 837.0435
2024-04-29 06:16:20 [INFO] [task_scheduler.cc:131] [Task #81: fused_nn_contrib_conv2d_NCHWc_3] Trial #393: GFLOPs: 111.0545. Time: 4684.4115 us. Best GFLOPs: 837.0435
2024-04-29 06:16:20 [INFO] [task_scheduler.cc:131] [Task #81: fused_nn_contrib_conv2d_NCHWc_3] Trial #394: GFLOPs: 609.3282. Time: 853.7678 us. Best GFLOPs: 837.0435
2024-04-29 06:16:20 [INFO] [task_scheduler.cc:131] [Task #81: fused_nn_contrib_conv2d_NCHWc_3] Trial #395: GFLOPs: 851.2452. Time: 611.1339 us. Best GFLOPs: 851.2452
2024-04-29 06:16:20 [INFO] [task_scheduler.cc:131] [Task #81: fused_nn_contrib_conv2d_NCHWc_3] Trial #396: GFLOPs: 833.6877. Time: 624.0043 us. Best GFLOPs: 851.2452
2024-04-29 06:16:20 [INFO] [task_scheduler.cc:131] [Task #81: fused_nn_contrib_conv2d_NCHWc_3] Trial #397: GFLOPs: 105.3348. Time: 4938.7719 us. Best GFLOPs: 851.2452
2024-04-29 06:16:20 [INFO] [task_scheduler.cc:131] [Task #81: fused_nn_contrib_conv2d_NCHWc_3] Trial #398: GFLOPs: 784.6143. Time: 663.0325 us. Best GFLOPs: 851.2452
2024-04-29 06:16:20 [INFO] [task_scheduler.cc:131] [Task #81: fused_nn_contrib_conv2d_NCHWc_3] Trial #399: GFLOPs: 580.4181. Time: 896.2932 us. Best GFLOPs: 851.2452
2024-04-29 06:16:20 [INFO] [task_scheduler.cc:131] [Task #81: fused_nn_contrib_conv2d_NCHWc_3] Trial #400: GFLOPs: 594.4410. Time: 875.1495 us. Best GFLOPs: 851.2452
2024-04-29 06:16:20 [INFO] [task_scheduler.cc:131] [Task #81: fused_nn_contrib_conv2d_NCHWc_3] Trial #401: GFLOPs: 795.2722. Time: 654.1468 us. Best GFLOPs: 851.2452
2024-04-29 06:16:20 [INFO] [task_scheduler.cc:131] [Task #81: fused_nn_contrib_conv2d_NCHWc_3] Trial #402: GFLOPs: 794.3949. Time: 654.8692 us. Best GFLOPs: 851.2452
2024-04-29 06:16:20 [INFO] [task_scheduler.cc:131] [Task #81: fused_nn_contrib_conv2d_NCHWc_3] Trial #403: GFLOPs: 611.3756. Time: 850.9086 us. Best GFLOPs: 851.2452
2024-04-29 06:16:20 [INFO] [task_scheduler.cc:131] [Task #81: fused_nn_contrib_conv2d_NCHWc_3] Trial #404: GFLOPs: 117.6337. Time: 4422.4140 us. Best GFLOPs: 851.2452
2024-04-29 06:16:20 [INFO] [task_scheduler.cc:121] [Task #81: fused_nn_contrib_conv2d_NCHWc_3] Trial #405: Error in building:
LocalBuilder: Timeout, killed after 30.0 seconds
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(48), T.int64(56), T.int64(56), T.int64(4)), "float32"), p1: T.Buffer((T.int64(12), T.int64(48), T.int64(3), T.int64(3), T.int64(4), T.int64(4)), "float32"), conv2d_NCHWc: T.Buffer((T.int64(1), T.int64(12), T.int64(56), T.int64(56), T.int64(4)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        data_pad = T.alloc_buffer((T.int64(1), T.int64(48), T.int64(58), T.int64(58), T.int64(4)))
        conv2d_NCHWc_global = T.alloc_buffer((T.int64(1), T.int64(12), T.int64(56), T.int64(56), T.int64(4)))
        for n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused_fused in T.parallel(T.int64(336), annotations={"pragma_auto_unroll_max_step": 512, "pragma_unroll_explicit": 1}):
            for n_2_init, oc_chunk_2_init, oh_2_init, ow_2_init, oc_block_2_init, n_3_init, oc_chunk_3_init, oh_3_init, ow_3_init, oc_block_3_init in T.grid(T.int64(1), T.int64(2), T.int64(1), T.int64(28), T.int64(1), T.int64(1), T.int64(2), T.int64(4), T.int64(1), T.int64(1)):
                with T.block("conv2d_NCHWc_init"):
                    v_n = T.axis.spatial(T.int64(1), n_2_init + n_3_init)
                    v_oc_chunk = T.axis.spatial(T.int64(12), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused_fused // T.int64(112) * T.int64(4) + oc_chunk_2_init * T.int64(2) + oc_chunk_3_init)
                    v_oh = T.axis.spatial(T.int64(56), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused_fused % T.int64(112) // T.int64(8) * T.int64(4) + oh_2_init * T.int64(4) + oh_3_init)
                    v_ow = T.axis.spatial(T.int64(56), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused_fused % T.int64(4) // T.int64(2) * T.int64(28) + ow_2_init + ow_3_init)
                    v_oc_block = T.axis.spatial(T.int64(4), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused_fused % T.int64(8) // T.int64(4) * T.int64(2) + n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused_fused % T.int64(2) + oc_block_2_init + oc_block_3_init)
                    T.reads()
                    T.writes(conv2d_NCHWc_global[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                    T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                    conv2d_NCHWc_global[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = T.float32(0)
            for ic_0 in range(T.int64(96)):
                for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(1), T.int64(6), T.int64(30)):
                    for ax4_fused in T.vectorized(T.int64(2)):
                        with T.block("data_pad"):
                            v_i0 = T.axis.spatial(T.int64(1), ax0)
                            v_i1 = T.axis.spatial(T.int64(48), ic_0 // T.int64(2) + ax1)
                            v_i2 = T.axis.spatial(T.int64(58), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused_fused % T.int64(112) // T.int64(8) * T.int64(4) + ax2)
                            v_i3 = T.axis.spatial(T.int64(58), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused_fused % T.int64(4) // T.int64(2) * T.int64(28) + ax3)
                            v_i4 = T.axis.spatial(T.int64(4), ic_0 % T.int64(2) * T.int64(2) + ax4_fused)
                            T.reads(p0[v_i0, v_i1, v_i2 - T.int64(1), v_i3 - T.int64(1), v_i4])
                            T.writes(data_pad[v_i0, v_i1, v_i2, v_i3, v_i4])
                            data_pad[v_i0, v_i1, v_i2, v_i3, v_i4] = T.if_then_else(T.int64(1) <= v_i2 and v_i2 < T.int64(57) and T.int64(1) <= v_i3 and v_i3 < T.int64(57), p0[v_i0, v_i1, v_i2 - T.int64(1), v_i3 - T.int64(1), v_i4], T.float32(0))
                for kh_0, kw_0, n_2, oc_chunk_2, oh_2, ow_2, oc_block_2, ic_1, kh_1, kw_1, n_3, oc_chunk_3, oh_3, ow_3, oc_block_3 in T.grid(T.int64(3), T.int64(3), T.int64(1), T.int64(2), T.int64(1), T.int64(28), T.int64(1), T.int64(2), T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(4), T.int64(1), T.int64(1)):
                    with T.block("conv2d_NCHWc_update"):
                        v_n = T.axis.spatial(T.int64(1), n_2 + n_3)
                        v_oc_chunk = T.axis.spatial(T.int64(12), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused_fused // T.int64(112) * T.int64(4) + oc_chunk_2 * T.int64(2) + oc_chunk_3)
                        v_oh = T.axis.spatial(T.int64(56), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused_fused % T.int64(112) // T.int64(8) * T.int64(4) + oh_2 * T.int64(4) + oh_3)
                        v_ow = T.axis.spatial(T.int64(56), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused_fused % T.int64(4) // T.int64(2) * T.int64(28) + ow_2 + ow_3)
                        v_oc_block = T.axis.spatial(T.int64(4), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused_fused % T.int64(8) // T.int64(4) * T.int64(2) + n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused_fused % T.int64(2) + oc_block_2 + oc_block_3)
                        v_ic = T.axis.reduce(T.int64(192), ic_0 * T.int64(2) + ic_1)
                        v_kh = T.axis.reduce(T.int64(3), kh_0 + kh_1)
                        v_kw = T.axis.reduce(T.int64(3), kw_0 + kw_1)
                        T.reads(conv2d_NCHWc_global[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block], data_pad[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)], p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block])
                        T.writes(conv2d_NCHWc_global[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                        T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                        conv2d_NCHWc_global[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = conv2d_NCHWc_global[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] + data_pad[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)] * p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block]
            for ax0, ax1, ax2, ax3, ax4 in T.grid(T.int64(1), T.int64(4), T.int64(4), T.int64(28), T.int64(1)):
                with T.block("conv2d_NCHWc_global"):
                    v0 = T.axis.spatial(T.int64(1), ax0)
                    v1 = T.axis.spatial(T.int64(12), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused_fused // T.int64(112) * T.int64(4) + ax1)
                    v2 = T.axis.spatial(T.int64(56), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused_fused % T.int64(112) // T.int64(8) * T.int64(4) + ax2)
                    v3 = T.axis.spatial(T.int64(56), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused_fused % T.int64(4) // T.int64(2) * T.int64(28) + ax3)
                    v4 = T.axis.spatial(T.int64(4), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused_fused % T.int64(8) // T.int64(4) * T.int64(2) + n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused_fused % T.int64(2) + ax4)
                    T.reads(conv2d_NCHWc_global[v0, v1, v2, v3, v4])
                    T.writes(conv2d_NCHWc[v0, v1, v2, v3, v4])
                    conv2d_NCHWc[v0, v1, v2, v3, v4] = conv2d_NCHWc_global[v0, v1, v2, v3, v4]
b0 = sch.get_block(name="data_pad", func_name="main")
b1 = sch.get_block(name="conv2d_NCHWc", func_name="main")
b2 = sch.get_block(name="root", func_name="main")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSRSRS")
l3, l4, l5, l6, l7, l8, l9, l10 = sch.get_loops(block=b1)
v11, v12, v13, v14 = sch.sample_perfect_tile(loop=l3, n=4, max_innermost_factor=64, decision=[1, 1, 1, 1])
l15, l16, l17, l18 = sch.split(loop=l3, factors=[v11, v12, v13, v14], preserve_unit_iters=True)
v19, v20, v21, v22 = sch.sample_perfect_tile(loop=l4, n=4, max_innermost_factor=64, decision=[3, 1, 2, 2])
l23, l24, l25, l26 = sch.split(loop=l4, factors=[v19, v20, v21, v22], preserve_unit_iters=True)
v27, v28, v29, v30 = sch.sample_perfect_tile(loop=l5, n=4, max_innermost_factor=64, decision=[14, 1, 1, 4])
l31, l32, l33, l34 = sch.split(loop=l5, factors=[v27, v28, v29, v30], preserve_unit_iters=True)
v35, v36, v37, v38 = sch.sample_perfect_tile(loop=l6, n=4, max_innermost_factor=64, decision=[1, 2, 28, 1])
l39, l40, l41, l42 = sch.split(loop=l6, factors=[v35, v36, v37, v38], preserve_unit_iters=True)
v43, v44, v45, v46 = sch.sample_perfect_tile(loop=l7, n=4, max_innermost_factor=64, decision=[2, 2, 1, 1])
l47, l48, l49, l50 = sch.split(loop=l7, factors=[v43, v44, v45, v46], preserve_unit_iters=True)
v51, v52 = sch.sample_perfect_tile(loop=l8, n=2, max_innermost_factor=64, decision=[96, 2])
l53, l54 = sch.split(loop=l8, factors=[v51, v52], preserve_unit_iters=True)
v55, v56 = sch.sample_perfect_tile(loop=l9, n=2, max_innermost_factor=64, decision=[3, 1])
l57, l58 = sch.split(loop=l9, factors=[v55, v56], preserve_unit_iters=True)
v59, v60 = sch.sample_perfect_tile(loop=l10, n=2, max_innermost_factor=64, decision=[3, 1])
l61, l62 = sch.split(loop=l10, factors=[v59, v60], preserve_unit_iters=True)
sch.reorder(l15, l23, l31, l39, l47, l16, l24, l32, l40, l48, l53, l57, l61, l17, l25, l33, l41, l49, l54, l58, l62, l18, l26, l34, l42, l50)
b63 = sch.cache_write(block=b1, write_buffer_index=0, storage_scope="global")
sch.reverse_compute_at(block=b63, loop=l48, preserve_unit_loops=True, index=-1)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.vectorize", ann_val=64)
v64 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.unroll_explicit", ann_val=v64)
l65 = sch.sample_compute_location(block=b0, decision=10)
sch.compute_at(block=b0, loop=l65, preserve_unit_loops=True, index=-1)
sch.enter_postproc()
b66 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b66, ann_key="meta_schedule.parallel")
sch.unannotate(block_or_loop=b66, ann_key="meta_schedule.vectorize")
sch.unannotate(block_or_loop=b66, ann_key="meta_schedule.unroll_explicit")
b67, b68, b69 = sch.get_child_blocks(b66)
l70, l71, l72, l73, l74, l75, l76, l77, l78, l79, l80, l81, l82, l83, l84, l85 = sch.get_loops(block=b67)
l86 = sch.fuse(l70, l71, l72, l73, l74, l75, l76, l77, l78, l79, preserve_unit_iters=True)
sch.parallel(loop=l86)
l87 = sch.fuse(l85, preserve_unit_iters=True)
sch.vectorize(loop=l87)
l88, l89, l90, l91, l92, l93, l94, l95, l96, l97, l98, l99, l100, l101, l102, l103, l104 = sch.get_loops(block=b68)
l105 = sch.fuse(l88, preserve_unit_iters=True)
sch.parallel(loop=l105)
sch.annotate(block_or_loop=l105, ann_key="pragma_auto_unroll_max_step", ann_val=512)
sch.annotate(block_or_loop=l105, ann_key="pragma_unroll_explicit", ann_val=1)
l106, l107, l108, l109, l110, l111 = sch.get_loops(block=b69)
b112 = sch.get_block(name="conv2d_NCHWc", func_name="main")
l113, l114, l115, l116, l117, l118, l119, l120, l121, l122, l123, l124, l125, l126, l127, l128, l129 = sch.get_loops(block=b112)
b130 = sch.decompose_reduction(block=b112, loop=l114)
2024-04-29 06:16:20 [INFO] [task_scheduler.cc:121] [Task #81: fused_nn_contrib_conv2d_NCHWc_3] Trial #406: Error in building:
LocalBuilder: Timeout, killed after 30.0 seconds
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(48), T.int64(56), T.int64(56), T.int64(4)), "float32"), p1: T.Buffer((T.int64(12), T.int64(48), T.int64(3), T.int64(3), T.int64(4), T.int64(4)), "float32"), conv2d_NCHWc: T.Buffer((T.int64(1), T.int64(12), T.int64(56), T.int64(56), T.int64(4)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        data_pad = T.alloc_buffer((T.int64(1), T.int64(48), T.int64(58), T.int64(58), T.int64(4)))
        conv2d_NCHWc_global = T.alloc_buffer((T.int64(1), T.int64(12), T.int64(56), T.int64(56), T.int64(4)))
        for n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused_fused in T.parallel(T.int64(336), annotations={"pragma_auto_unroll_max_step": 512, "pragma_unroll_explicit": 1}):
            for n_2_init, oc_chunk_2_init, oh_2_init, ow_2_init, oc_block_2_init, n_3_init, oc_chunk_3_init, oh_3_init, ow_3_init, oc_block_3_init in T.grid(T.int64(1), T.int64(2), T.int64(1), T.int64(28), T.int64(1), T.int64(1), T.int64(2), T.int64(4), T.int64(1), T.int64(1)):
                with T.block("conv2d_NCHWc_init"):
                    v_n = T.axis.spatial(T.int64(1), n_2_init + n_3_init)
                    v_oc_chunk = T.axis.spatial(T.int64(12), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused_fused % T.int64(48) // T.int64(16) * T.int64(4) + oc_chunk_2_init * T.int64(2) + oc_chunk_3_init)
                    v_oh = T.axis.spatial(T.int64(56), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused_fused // T.int64(48) * T.int64(8) + n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused_fused % T.int64(16) // T.int64(8) * T.int64(4) + oh_2_init * T.int64(4) + oh_3_init)
                    v_ow = T.axis.spatial(T.int64(56), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused_fused % T.int64(8) // T.int64(4) * T.int64(28) + ow_2_init + ow_3_init)
                    v_oc_block = T.axis.spatial(T.int64(4), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused_fused % T.int64(4) + oc_block_2_init + oc_block_3_init)
                    T.reads()
                    T.writes(conv2d_NCHWc_global[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                    T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                    conv2d_NCHWc_global[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = T.float32(0)
            for ic_0 in range(T.int64(96)):
                for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(1), T.int64(6), T.int64(30)):
                    for ax4_fused in T.vectorized(T.int64(2)):
                        with T.block("data_pad"):
                            v_i0 = T.axis.spatial(T.int64(1), ax0)
                            v_i1 = T.axis.spatial(T.int64(48), ic_0 // T.int64(2) + ax1)
                            v_i2 = T.axis.spatial(T.int64(58), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused_fused // T.int64(48) * T.int64(8) + n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused_fused % T.int64(16) // T.int64(8) * T.int64(4) + ax2)
                            v_i3 = T.axis.spatial(T.int64(58), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused_fused % T.int64(8) // T.int64(4) * T.int64(28) + ax3)
                            v_i4 = T.axis.spatial(T.int64(4), ic_0 % T.int64(2) * T.int64(2) + ax4_fused)
                            T.reads(p0[v_i0, v_i1, v_i2 - T.int64(1), v_i3 - T.int64(1), v_i4])
                            T.writes(data_pad[v_i0, v_i1, v_i2, v_i3, v_i4])
                            data_pad[v_i0, v_i1, v_i2, v_i3, v_i4] = T.if_then_else(T.int64(1) <= v_i2 and v_i2 < T.int64(57) and T.int64(1) <= v_i3 and v_i3 < T.int64(57), p0[v_i0, v_i1, v_i2 - T.int64(1), v_i3 - T.int64(1), v_i4], T.float32(0))
                for kh_0, kw_0, n_2, oc_chunk_2, oh_2, ow_2, oc_block_2, ic_1, kh_1, kw_1, n_3, oc_chunk_3, oh_3, ow_3, oc_block_3 in T.grid(T.int64(3), T.int64(3), T.int64(1), T.int64(2), T.int64(1), T.int64(28), T.int64(1), T.int64(2), T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(4), T.int64(1), T.int64(1)):
                    with T.block("conv2d_NCHWc_update"):
                        v_n = T.axis.spatial(T.int64(1), n_2 + n_3)
                        v_oc_chunk = T.axis.spatial(T.int64(12), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused_fused % T.int64(48) // T.int64(16) * T.int64(4) + oc_chunk_2 * T.int64(2) + oc_chunk_3)
                        v_oh = T.axis.spatial(T.int64(56), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused_fused // T.int64(48) * T.int64(8) + n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused_fused % T.int64(16) // T.int64(8) * T.int64(4) + oh_2 * T.int64(4) + oh_3)
                        v_ow = T.axis.spatial(T.int64(56), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused_fused % T.int64(8) // T.int64(4) * T.int64(28) + ow_2 + ow_3)
                        v_oc_block = T.axis.spatial(T.int64(4), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused_fused % T.int64(4) + oc_block_2 + oc_block_3)
                        v_ic = T.axis.reduce(T.int64(192), ic_0 * T.int64(2) + ic_1)
                        v_kh = T.axis.reduce(T.int64(3), kh_0 + kh_1)
                        v_kw = T.axis.reduce(T.int64(3), kw_0 + kw_1)
                        T.reads(conv2d_NCHWc_global[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block], data_pad[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)], p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block])
                        T.writes(conv2d_NCHWc_global[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                        T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                        conv2d_NCHWc_global[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = conv2d_NCHWc_global[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] + data_pad[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)] * p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block]
            for ax0, ax1, ax2, ax3, ax4 in T.grid(T.int64(1), T.int64(4), T.int64(4), T.int64(28), T.int64(1)):
                with T.block("conv2d_NCHWc_global"):
                    v0 = T.axis.spatial(T.int64(1), ax0)
                    v1 = T.axis.spatial(T.int64(12), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused_fused % T.int64(48) // T.int64(16) * T.int64(4) + ax1)
                    v2 = T.axis.spatial(T.int64(56), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused_fused // T.int64(48) * T.int64(8) + n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused_fused % T.int64(16) // T.int64(8) * T.int64(4) + ax2)
                    v3 = T.axis.spatial(T.int64(56), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused_fused % T.int64(8) // T.int64(4) * T.int64(28) + ax3)
                    v4 = T.axis.spatial(T.int64(4), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused_fused % T.int64(4) + ax4)
                    T.reads(conv2d_NCHWc_global[v0, v1, v2, v3, v4])
                    T.writes(conv2d_NCHWc[v0, v1, v2, v3, v4])
                    conv2d_NCHWc[v0, v1, v2, v3, v4] = conv2d_NCHWc_global[v0, v1, v2, v3, v4]
b0 = sch.get_block(name="data_pad", func_name="main")
b1 = sch.get_block(name="conv2d_NCHWc", func_name="main")
b2 = sch.get_block(name="root", func_name="main")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSRSRS")
l3, l4, l5, l6, l7, l8, l9, l10 = sch.get_loops(block=b1)
v11, v12, v13, v14 = sch.sample_perfect_tile(loop=l3, n=4, max_innermost_factor=64, decision=[1, 1, 1, 1])
l15, l16, l17, l18 = sch.split(loop=l3, factors=[v11, v12, v13, v14], preserve_unit_iters=True)
v19, v20, v21, v22 = sch.sample_perfect_tile(loop=l4, n=4, max_innermost_factor=64, decision=[1, 3, 2, 2])
l23, l24, l25, l26 = sch.split(loop=l4, factors=[v19, v20, v21, v22], preserve_unit_iters=True)
v27, v28, v29, v30 = sch.sample_perfect_tile(loop=l5, n=4, max_innermost_factor=64, decision=[7, 2, 1, 4])
l31, l32, l33, l34 = sch.split(loop=l5, factors=[v27, v28, v29, v30], preserve_unit_iters=True)
v35, v36, v37, v38 = sch.sample_perfect_tile(loop=l6, n=4, max_innermost_factor=64, decision=[1, 2, 28, 1])
l39, l40, l41, l42 = sch.split(loop=l6, factors=[v35, v36, v37, v38], preserve_unit_iters=True)
v43, v44, v45, v46 = sch.sample_perfect_tile(loop=l7, n=4, max_innermost_factor=64, decision=[1, 4, 1, 1])
l47, l48, l49, l50 = sch.split(loop=l7, factors=[v43, v44, v45, v46], preserve_unit_iters=True)
v51, v52 = sch.sample_perfect_tile(loop=l8, n=2, max_innermost_factor=64, decision=[96, 2])
l53, l54 = sch.split(loop=l8, factors=[v51, v52], preserve_unit_iters=True)
v55, v56 = sch.sample_perfect_tile(loop=l9, n=2, max_innermost_factor=64, decision=[3, 1])
l57, l58 = sch.split(loop=l9, factors=[v55, v56], preserve_unit_iters=True)
v59, v60 = sch.sample_perfect_tile(loop=l10, n=2, max_innermost_factor=64, decision=[3, 1])
l61, l62 = sch.split(loop=l10, factors=[v59, v60], preserve_unit_iters=True)
sch.reorder(l15, l23, l31, l39, l47, l16, l24, l32, l40, l48, l53, l57, l61, l17, l25, l33, l41, l49, l54, l58, l62, l18, l26, l34, l42, l50)
b63 = sch.cache_write(block=b1, write_buffer_index=0, storage_scope="global")
sch.reverse_compute_at(block=b63, loop=l48, preserve_unit_loops=True, index=-1)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.vectorize", ann_val=64)
v64 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.unroll_explicit", ann_val=v64)
l65 = sch.sample_compute_location(block=b0, decision=10)
sch.compute_at(block=b0, loop=l65, preserve_unit_loops=True, index=-1)
sch.enter_postproc()
b66 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b66, ann_key="meta_schedule.parallel")
sch.unannotate(block_or_loop=b66, ann_key="meta_schedule.vectorize")
sch.unannotate(block_or_loop=b66, ann_key="meta_schedule.unroll_explicit")
b67, b68, b69 = sch.get_child_blocks(b66)
l70, l71, l72, l73, l74, l75, l76, l77, l78, l79, l80, l81, l82, l83, l84, l85 = sch.get_loops(block=b67)
l86 = sch.fuse(l70, l71, l72, l73, l74, l75, l76, l77, l78, l79, preserve_unit_iters=True)
sch.parallel(loop=l86)
l87 = sch.fuse(l85, preserve_unit_iters=True)
sch.vectorize(loop=l87)
l88, l89, l90, l91, l92, l93, l94, l95, l96, l97, l98, l99, l100, l101, l102, l103, l104 = sch.get_loops(block=b68)
l105 = sch.fuse(l88, preserve_unit_iters=True)
sch.parallel(loop=l105)
sch.annotate(block_or_loop=l105, ann_key="pragma_auto_unroll_max_step", ann_val=512)
sch.annotate(block_or_loop=l105, ann_key="pragma_unroll_explicit", ann_val=1)
l106, l107, l108, l109, l110, l111 = sch.get_loops(block=b69)
b112 = sch.get_block(name="conv2d_NCHWc", func_name="main")
l113, l114, l115, l116, l117, l118, l119, l120, l121, l122, l123, l124, l125, l126, l127, l128, l129 = sch.get_loops(block=b112)
b130 = sch.decompose_reduction(block=b112, loop=l114)
2024-04-29 06:16:20 [INFO] [task_scheduler.cc:131] [Task #81: fused_nn_contrib_conv2d_NCHWc_3] Trial #407: GFLOPs: 498.8767. Time: 1042.7923 us. Best GFLOPs: 851.2452
2024-04-29 06:16:20 [INFO] [task_scheduler.cc:131] [Task #81: fused_nn_contrib_conv2d_NCHWc_3] Trial #408: GFLOPs: 466.2402. Time: 1115.7871 us. Best GFLOPs: 851.2452
2024-04-29 06:16:20 [INFO] [task_scheduler.cc:131] [Task #81: fused_nn_contrib_conv2d_NCHWc_3] Trial #409: GFLOPs: 219.1568. Time: 2373.7564 us. Best GFLOPs: 851.2452
2024-04-29 06:16:20 [INFO] [task_scheduler.cc:131] [Task #81: fused_nn_contrib_conv2d_NCHWc_3] Trial #410: GFLOPs: 446.8529. Time: 1164.1969 us. Best GFLOPs: 851.2452
2024-04-29 06:16:20 [INFO] [task_scheduler.cc:131] [Task #81: fused_nn_contrib_conv2d_NCHWc_3] Trial #411: GFLOPs: 444.3898. Time: 1170.6497 us. Best GFLOPs: 851.2452
2024-04-29 06:16:20 [INFO] [task_scheduler.cc:131] [Task #81: fused_nn_contrib_conv2d_NCHWc_3] Trial #412: GFLOPs: 501.9983. Time: 1036.3077 us. Best GFLOPs: 851.2452
2024-04-29 06:16:20 [INFO] [task_scheduler.cc:131] [Task #81: fused_nn_contrib_conv2d_NCHWc_3] Trial #413: GFLOPs: 163.1226. Time: 3189.1635 us. Best GFLOPs: 851.2452
2024-04-29 06:16:20 [INFO] [task_scheduler.cc:131] [Task #81: fused_nn_contrib_conv2d_NCHWc_3] Trial #414: GFLOPs: 530.2303. Time: 981.1298 us. Best GFLOPs: 851.2452
2024-04-29 06:16:20 [INFO] [task_scheduler.cc:131] [Task #81: fused_nn_contrib_conv2d_NCHWc_3] Trial #415: GFLOPs: 544.8665. Time: 954.7747 us. Best GFLOPs: 851.2452
2024-04-29 06:16:20 [INFO] [task_scheduler.cc:131] [Task #81: fused_nn_contrib_conv2d_NCHWc_3] Trial #416: GFLOPs: 491.9064. Time: 1057.5686 us. Best GFLOPs: 851.2452
2024-04-29 06:16:20 [INFO] [task_scheduler.cc:131] [Task #81: fused_nn_contrib_conv2d_NCHWc_3] Trial #417: GFLOPs: 553.4692. Time: 939.9345 us. Best GFLOPs: 851.2452
2024-04-29 06:16:20 [INFO] [task_scheduler.cc:131] [Task #81: fused_nn_contrib_conv2d_NCHWc_3] Trial #418: GFLOPs: 495.5145. Time: 1049.8678 us. Best GFLOPs: 851.2452
2024-04-29 06:16:20 [INFO] [task_scheduler.cc:131] [Task #81: fused_nn_contrib_conv2d_NCHWc_3] Trial #419: GFLOPs: 494.3229. Time: 1052.3987 us. Best GFLOPs: 851.2452
2024-04-29 06:16:20 [INFO] [task_scheduler.cc:131] [Task #81: fused_nn_contrib_conv2d_NCHWc_3] Trial #420: GFLOPs: 79.0146. Time: 6583.9064 us. Best GFLOPs: 851.2452
2024-04-29 06:16:20 [INFO] [task_scheduler.cc:131] [Task #81: fused_nn_contrib_conv2d_NCHWc_3] Trial #421: GFLOPs: 460.1753. Time: 1130.4927 us. Best GFLOPs: 851.2452
2024-04-29 06:16:20 [INFO] [task_scheduler.cc:131] [Task #81: fused_nn_contrib_conv2d_NCHWc_3] Trial #422: GFLOPs: 607.8817. Time: 855.7994 us. Best GFLOPs: 851.2452
2024-04-29 06:16:20 [INFO] [task_scheduler.cc:131] [Task #81: fused_nn_contrib_conv2d_NCHWc_3] Trial #423: GFLOPs: 113.1677. Time: 4596.9356 us. Best GFLOPs: 851.2452
2024-04-29 06:16:20 [INFO] [task_scheduler.cc:131] [Task #81: fused_nn_contrib_conv2d_NCHWc_3] Trial #424: GFLOPs: 558.9840. Time: 930.6613 us. Best GFLOPs: 851.2452
2024-04-29 06:16:20 [INFO] [task_scheduler.cc:131] [Task #81: fused_nn_contrib_conv2d_NCHWc_3] Trial #425: GFLOPs: 588.7131. Time: 883.6643 us. Best GFLOPs: 851.2452
2024-04-29 06:16:20 [INFO] [task_scheduler.cc:131] [Task #81: fused_nn_contrib_conv2d_NCHWc_3] Trial #426: GFLOPs: 95.1175. Time: 5469.2857 us. Best GFLOPs: 851.2452
2024-04-29 06:16:20 [INFO] [task_scheduler.cc:131] [Task #81: fused_nn_contrib_conv2d_NCHWc_3] Trial #427: GFLOPs: 94.9369. Time: 5479.6901 us. Best GFLOPs: 851.2452
2024-04-29 06:16:20 [INFO] [task_scheduler.cc:131] [Task #81: fused_nn_contrib_conv2d_NCHWc_3] Trial #428: GFLOPs: 457.1135. Time: 1138.0647 us. Best GFLOPs: 851.2452
2024-04-29 06:16:20 [INFO] [task_scheduler.cc:131] [Task #81: fused_nn_contrib_conv2d_NCHWc_3] Trial #429: GFLOPs: 430.7250. Time: 1207.7885 us. Best GFLOPs: 851.2452
2024-04-29 06:16:20 [INFO] [task_scheduler.cc:131] [Task #81: fused_nn_contrib_conv2d_NCHWc_3] Trial #430: GFLOPs: 101.6559. Time: 5117.5067 us. Best GFLOPs: 851.2452
2024-04-29 06:16:20 [INFO] [task_scheduler.cc:131] [Task #81: fused_nn_contrib_conv2d_NCHWc_3] Trial #431: GFLOPs: 336.8466. Time: 1544.3966 us. Best GFLOPs: 851.2452
2024-04-29 06:16:20 [INFO] [task_scheduler.cc:121] [Task #81: fused_nn_contrib_conv2d_NCHWc_3] Trial #432: Error in building:
LocalBuilder: Timeout, killed after 30.0 seconds
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(48), T.int64(56), T.int64(56), T.int64(4)), "float32"), p1: T.Buffer((T.int64(12), T.int64(48), T.int64(3), T.int64(3), T.int64(4), T.int64(4)), "float32"), conv2d_NCHWc: T.Buffer((T.int64(1), T.int64(12), T.int64(56), T.int64(56), T.int64(4)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        data_pad = T.alloc_buffer((T.int64(1), T.int64(48), T.int64(58), T.int64(58), T.int64(4)))
        conv2d_NCHWc_global = T.alloc_buffer((T.int64(1), T.int64(12), T.int64(56), T.int64(56), T.int64(4)))
        for n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused_fused in T.parallel(T.int64(336), annotations={"pragma_auto_unroll_max_step": 512, "pragma_unroll_explicit": 1}):
            for n_2_init, oc_chunk_2_init, oh_2_init, ow_2_init, oc_block_2_init, n_3_init, oc_chunk_3_init, oh_3_init, ow_3_init, oc_block_3_init in T.grid(T.int64(1), T.int64(4), T.int64(1), T.int64(28), T.int64(1), T.int64(1), T.int64(1), T.int64(4), T.int64(1), T.int64(1)):
                with T.block("conv2d_NCHWc_init"):
                    v_n = T.axis.spatial(T.int64(1), n_2_init + n_3_init)
                    v_oc_chunk = T.axis.spatial(T.int64(12), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused_fused // T.int64(112) * T.int64(4) + oc_chunk_2_init + oc_chunk_3_init)
                    v_oh = T.axis.spatial(T.int64(56), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused_fused % T.int64(112) // T.int64(8) * T.int64(4) + oh_2_init * T.int64(4) + oh_3_init)
                    v_ow = T.axis.spatial(T.int64(56), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused_fused % T.int64(4) // T.int64(2) * T.int64(28) + ow_2_init + ow_3_init)
                    v_oc_block = T.axis.spatial(T.int64(4), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused_fused % T.int64(8) // T.int64(4) * T.int64(2) + n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused_fused % T.int64(2) + oc_block_2_init + oc_block_3_init)
                    T.reads()
                    T.writes(conv2d_NCHWc_global[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                    T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                    conv2d_NCHWc_global[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = T.float32(0)
            for ic_0 in range(T.int64(96)):
                for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(1), T.int64(6), T.int64(30)):
                    for ax4_fused in T.vectorized(T.int64(2)):
                        with T.block("data_pad"):
                            v_i0 = T.axis.spatial(T.int64(1), ax0)
                            v_i1 = T.axis.spatial(T.int64(48), ic_0 // T.int64(2) + ax1)
                            v_i2 = T.axis.spatial(T.int64(58), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused_fused % T.int64(112) // T.int64(8) * T.int64(4) + ax2)
                            v_i3 = T.axis.spatial(T.int64(58), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused_fused % T.int64(4) // T.int64(2) * T.int64(28) + ax3)
                            v_i4 = T.axis.spatial(T.int64(4), ic_0 % T.int64(2) * T.int64(2) + ax4_fused)
                            T.reads(p0[v_i0, v_i1, v_i2 - T.int64(1), v_i3 - T.int64(1), v_i4])
                            T.writes(data_pad[v_i0, v_i1, v_i2, v_i3, v_i4])
                            data_pad[v_i0, v_i1, v_i2, v_i3, v_i4] = T.if_then_else(T.int64(1) <= v_i2 and v_i2 < T.int64(57) and T.int64(1) <= v_i3 and v_i3 < T.int64(57), p0[v_i0, v_i1, v_i2 - T.int64(1), v_i3 - T.int64(1), v_i4], T.float32(0))
                for kh_0, kw_0, n_2, oc_chunk_2, oh_2, ow_2, oc_block_2, ic_1, kh_1, kw_1, n_3, oc_chunk_3, oh_3, ow_3, oc_block_3 in T.grid(T.int64(3), T.int64(3), T.int64(1), T.int64(4), T.int64(1), T.int64(28), T.int64(1), T.int64(2), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(4), T.int64(1), T.int64(1)):
                    with T.block("conv2d_NCHWc_update"):
                        v_n = T.axis.spatial(T.int64(1), n_2 + n_3)
                        v_oc_chunk = T.axis.spatial(T.int64(12), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused_fused // T.int64(112) * T.int64(4) + oc_chunk_2 + oc_chunk_3)
                        v_oh = T.axis.spatial(T.int64(56), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused_fused % T.int64(112) // T.int64(8) * T.int64(4) + oh_2 * T.int64(4) + oh_3)
                        v_ow = T.axis.spatial(T.int64(56), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused_fused % T.int64(4) // T.int64(2) * T.int64(28) + ow_2 + ow_3)
                        v_oc_block = T.axis.spatial(T.int64(4), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused_fused % T.int64(8) // T.int64(4) * T.int64(2) + n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused_fused % T.int64(2) + oc_block_2 + oc_block_3)
                        v_ic = T.axis.reduce(T.int64(192), ic_0 * T.int64(2) + ic_1)
                        v_kh = T.axis.reduce(T.int64(3), kh_0 + kh_1)
                        v_kw = T.axis.reduce(T.int64(3), kw_0 + kw_1)
                        T.reads(conv2d_NCHWc_global[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block], data_pad[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)], p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block])
                        T.writes(conv2d_NCHWc_global[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                        T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                        conv2d_NCHWc_global[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = conv2d_NCHWc_global[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] + data_pad[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)] * p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block]
            for ax0, ax1, ax2, ax3, ax4 in T.grid(T.int64(1), T.int64(4), T.int64(4), T.int64(28), T.int64(1)):
                with T.block("conv2d_NCHWc_global"):
                    v0 = T.axis.spatial(T.int64(1), ax0)
                    v1 = T.axis.spatial(T.int64(12), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused_fused // T.int64(112) * T.int64(4) + ax1)
                    v2 = T.axis.spatial(T.int64(56), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused_fused % T.int64(112) // T.int64(8) * T.int64(4) + ax2)
                    v3 = T.axis.spatial(T.int64(56), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused_fused % T.int64(4) // T.int64(2) * T.int64(28) + ax3)
                    v4 = T.axis.spatial(T.int64(4), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused_fused % T.int64(8) // T.int64(4) * T.int64(2) + n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused_fused % T.int64(2) + ax4)
                    T.reads(conv2d_NCHWc_global[v0, v1, v2, v3, v4])
                    T.writes(conv2d_NCHWc[v0, v1, v2, v3, v4])
                    conv2d_NCHWc[v0, v1, v2, v3, v4] = conv2d_NCHWc_global[v0, v1, v2, v3, v4]
b0 = sch.get_block(name="data_pad", func_name="main")
b1 = sch.get_block(name="conv2d_NCHWc", func_name="main")
b2 = sch.get_block(name="root", func_name="main")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSRSRS")
l3, l4, l5, l6, l7, l8, l9, l10 = sch.get_loops(block=b1)
v11, v12, v13, v14 = sch.sample_perfect_tile(loop=l3, n=4, max_innermost_factor=64, decision=[1, 1, 1, 1])
l15, l16, l17, l18 = sch.split(loop=l3, factors=[v11, v12, v13, v14], preserve_unit_iters=True)
v19, v20, v21, v22 = sch.sample_perfect_tile(loop=l4, n=4, max_innermost_factor=64, decision=[3, 1, 4, 1])
l23, l24, l25, l26 = sch.split(loop=l4, factors=[v19, v20, v21, v22], preserve_unit_iters=True)
v27, v28, v29, v30 = sch.sample_perfect_tile(loop=l5, n=4, max_innermost_factor=64, decision=[14, 1, 1, 4])
l31, l32, l33, l34 = sch.split(loop=l5, factors=[v27, v28, v29, v30], preserve_unit_iters=True)
v35, v36, v37, v38 = sch.sample_perfect_tile(loop=l6, n=4, max_innermost_factor=64, decision=[1, 2, 28, 1])
l39, l40, l41, l42 = sch.split(loop=l6, factors=[v35, v36, v37, v38], preserve_unit_iters=True)
v43, v44, v45, v46 = sch.sample_perfect_tile(loop=l7, n=4, max_innermost_factor=64, decision=[2, 2, 1, 1])
l47, l48, l49, l50 = sch.split(loop=l7, factors=[v43, v44, v45, v46], preserve_unit_iters=True)
v51, v52 = sch.sample_perfect_tile(loop=l8, n=2, max_innermost_factor=64, decision=[96, 2])
l53, l54 = sch.split(loop=l8, factors=[v51, v52], preserve_unit_iters=True)
v55, v56 = sch.sample_perfect_tile(loop=l9, n=2, max_innermost_factor=64, decision=[3, 1])
l57, l58 = sch.split(loop=l9, factors=[v55, v56], preserve_unit_iters=True)
v59, v60 = sch.sample_perfect_tile(loop=l10, n=2, max_innermost_factor=64, decision=[3, 1])
l61, l62 = sch.split(loop=l10, factors=[v59, v60], preserve_unit_iters=True)
sch.reorder(l15, l23, l31, l39, l47, l16, l24, l32, l40, l48, l53, l57, l61, l17, l25, l33, l41, l49, l54, l58, l62, l18, l26, l34, l42, l50)
b63 = sch.cache_write(block=b1, write_buffer_index=0, storage_scope="global")
sch.reverse_compute_at(block=b63, loop=l48, preserve_unit_loops=True, index=-1)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.vectorize", ann_val=64)
v64 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.unroll_explicit", ann_val=v64)
l65 = sch.sample_compute_location(block=b0, decision=10)
sch.compute_at(block=b0, loop=l65, preserve_unit_loops=True, index=-1)
sch.enter_postproc()
b66 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b66, ann_key="meta_schedule.parallel")
sch.unannotate(block_or_loop=b66, ann_key="meta_schedule.vectorize")
sch.unannotate(block_or_loop=b66, ann_key="meta_schedule.unroll_explicit")
b67, b68, b69 = sch.get_child_blocks(b66)
l70, l71, l72, l73, l74, l75, l76, l77, l78, l79, l80, l81, l82, l83, l84, l85 = sch.get_loops(block=b67)
l86 = sch.fuse(l70, l71, l72, l73, l74, l75, l76, l77, l78, l79, preserve_unit_iters=True)
sch.parallel(loop=l86)
l87 = sch.fuse(l85, preserve_unit_iters=True)
sch.vectorize(loop=l87)
l88, l89, l90, l91, l92, l93, l94, l95, l96, l97, l98, l99, l100, l101, l102, l103, l104 = sch.get_loops(block=b68)
l105 = sch.fuse(l88, preserve_unit_iters=True)
sch.parallel(loop=l105)
sch.annotate(block_or_loop=l105, ann_key="pragma_auto_unroll_max_step", ann_val=512)
sch.annotate(block_or_loop=l105, ann_key="pragma_unroll_explicit", ann_val=1)
l106, l107, l108, l109, l110, l111 = sch.get_loops(block=b69)
b112 = sch.get_block(name="conv2d_NCHWc", func_name="main")
l113, l114, l115, l116, l117, l118, l119, l120, l121, l122, l123, l124, l125, l126, l127, l128, l129 = sch.get_loops(block=b112)
b130 = sch.decompose_reduction(block=b112, loop=l114)
2024-04-29 06:16:20 [INFO] [task_scheduler.cc:131] [Task #81: fused_nn_contrib_conv2d_NCHWc_3] Trial #433: GFLOPs: 497.5165. Time: 1045.6432 us. Best GFLOPs: 851.2452
2024-04-29 06:16:20 [INFO] [task_scheduler.cc:131] [Task #81: fused_nn_contrib_conv2d_NCHWc_3] Trial #434: GFLOPs: 464.9232. Time: 1118.9477 us. Best GFLOPs: 851.2452
2024-04-29 06:16:20 [INFO] [task_scheduler.cc:131] [Task #81: fused_nn_contrib_conv2d_NCHWc_3] Trial #435: GFLOPs: 435.3549. Time: 1194.9441 us. Best GFLOPs: 851.2452
2024-04-29 06:16:20 [INFO] [task_scheduler.cc:131] [Task #81: fused_nn_contrib_conv2d_NCHWc_3] Trial #436: GFLOPs: 104.8938. Time: 4959.5372 us. Best GFLOPs: 851.2452
2024-04-29 06:16:20 [INFO] [task_scheduler.cc:131] [Task #81: fused_nn_contrib_conv2d_NCHWc_3] Trial #437: GFLOPs: 98.1205. Time: 5301.8953 us. Best GFLOPs: 851.2452
2024-04-29 06:16:20 [INFO] [task_scheduler.cc:131] [Task #81: fused_nn_contrib_conv2d_NCHWc_3] Trial #438: GFLOPs: 502.4547. Time: 1035.3665 us. Best GFLOPs: 851.2452
2024-04-29 06:16:20 [INFO] [task_scheduler.cc:131] [Task #81: fused_nn_contrib_conv2d_NCHWc_3] Trial #439: GFLOPs: 607.2293. Time: 856.7188 us. Best GFLOPs: 851.2452
2024-04-29 06:16:20 [INFO] [task_scheduler.cc:131] [Task #81: fused_nn_contrib_conv2d_NCHWc_3] Trial #440: GFLOPs: 498.4827. Time: 1043.6164 us. Best GFLOPs: 851.2452
2024-04-29 06:16:20 [INFO] [task_scheduler.cc:131] [Task #81: fused_nn_contrib_conv2d_NCHWc_3] Trial #441: GFLOPs: 459.8004. Time: 1131.4144 us. Best GFLOPs: 851.2452
2024-04-29 06:16:20 [INFO] [task_scheduler.cc:131] [Task #81: fused_nn_contrib_conv2d_NCHWc_3] Trial #442: GFLOPs: 423.5133. Time: 1228.3551 us. Best GFLOPs: 851.2452
2024-04-29 06:16:20 [INFO] [task_scheduler.cc:131] [Task #81: fused_nn_contrib_conv2d_NCHWc_3] Trial #443: GFLOPs: 431.4641. Time: 1205.7197 us. Best GFLOPs: 851.2452
2024-04-29 06:16:20 [INFO] [task_scheduler.cc:131] [Task #81: fused_nn_contrib_conv2d_NCHWc_3] Trial #444: GFLOPs: 499.8133. Time: 1040.8383 us. Best GFLOPs: 851.2452
2024-04-29 06:16:20 [INFO] [task_scheduler.cc:131] [Task #81: fused_nn_contrib_conv2d_NCHWc_3] Trial #445: GFLOPs: 467.4911. Time: 1112.8014 us. Best GFLOPs: 851.2452
2024-04-29 06:16:20 [INFO] [task_scheduler.cc:131] [Task #81: fused_nn_contrib_conv2d_NCHWc_3] Trial #446: GFLOPs: 164.1305. Time: 3169.5810 us. Best GFLOPs: 851.2452
2024-04-29 06:16:20 [INFO] [task_scheduler.cc:131] [Task #81: fused_nn_contrib_conv2d_NCHWc_3] Trial #447: GFLOPs: 144.6877. Time: 3595.5014 us. Best GFLOPs: 851.2452
2024-04-29 06:16:20 [INFO] [task_scheduler.cc:131] [Task #81: fused_nn_contrib_conv2d_NCHWc_3] Trial #448: GFLOPs: 61.0543. Time: 8520.6945 us. Best GFLOPs: 851.2452
2024-04-29 06:36:12 [INFO] [evolutionary_search.cc:713] Generating candidates......
2024-04-29 06:36:13 [INFO] [evolutionary_search.cc:715] Picked top 102 candidate(s) from database
2024-04-29 06:36:18 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x119191d8)]: 6 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x91eb9d8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0xb6918a8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x10e07d28)]: 0 failure(s)
2024-04-29 06:36:18 [INFO] [evolutionary_search.cc:723] Sampled 404 candidate(s)
2024-04-29 06:36:30 [INFO] [evolutionary_search.cc:621] Evolve iter #0 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x119191d8)]: 2 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x91eb9d8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0xb6918a8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x10e07d28)]: 0 failure(s)
2024-04-29 06:36:43 [INFO] [evolutionary_search.cc:621] Evolve iter #1 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x119191d8)]: 2 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x91eb9d8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0xb6918a8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x10e07d28)]: 0 failure(s)
2024-04-29 06:36:56 [INFO] [evolutionary_search.cc:621] Evolve iter #2 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x119191d8)]: 2 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x91eb9d8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0xb6918a8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x10e07d28)]: 0 failure(s)
2024-04-29 06:37:08 [INFO] [evolutionary_search.cc:621] Evolve iter #3 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x119191d8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x91eb9d8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0xb6918a8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x10e07d28)]: 0 failure(s)
2024-04-29 06:37:16 [INFO] [evolutionary_search.cc:649] Scores of the best 64 candidates:
[1 : 16]:	0.9508  0.9508  0.9433  0.9433  0.8998  0.8998  0.8926  0.8922  0.8870  0.8870  0.8766  0.8674  0.8494  0.8479  0.8294  0.8294
[17 : 32]:	0.8280  0.8280  0.8259  0.8259  0.8259  0.8259  0.8259  0.8259  0.8259  0.8259  0.8259  0.8259  0.8256  0.8226  0.8226  0.8226
[33 : 48]:	0.8226  0.8086  0.8083  0.8011  0.7949  0.7908  0.7845  0.7845  0.7845  0.7784  0.7624  0.7624  0.7605  0.7605  0.7562  0.7548
[49 : 64]:	0.7369  0.7095  0.7064  0.7008  0.6906  0.6740  0.6718  0.6677  0.6664  0.6598  0.6596  0.6569  0.6569  0.6540  0.6493  0.6493
2024-04-29 06:37:16 [INFO] [evolutionary_search.cc:727] Got 64 candidate(s) with evolutionary search
2024-04-29 06:37:17 [INFO] [evolutionary_search.cc:730] Sending 64 candidates(s) for measurement
2024-04-29 06:38:58 [INFO] [task_scheduler.cc:131] [Task #81: fused_nn_contrib_conv2d_NCHWc_3] Trial #449: GFLOPs: 821.1006. Time: 633.5700 us. Best GFLOPs: 851.2452
2024-04-29 06:38:58 [INFO] [task_scheduler.cc:131] [Task #81: fused_nn_contrib_conv2d_NCHWc_3] Trial #450: GFLOPs: 107.7099. Time: 4829.8685 us. Best GFLOPs: 851.2452
2024-04-29 06:38:58 [INFO] [task_scheduler.cc:131] [Task #81: fused_nn_contrib_conv2d_NCHWc_3] Trial #451: GFLOPs: 108.1001. Time: 4812.4374 us. Best GFLOPs: 851.2452
2024-04-29 06:38:58 [INFO] [task_scheduler.cc:131] [Task #81: fused_nn_contrib_conv2d_NCHWc_3] Trial #452: GFLOPs: 813.5932. Time: 639.4163 us. Best GFLOPs: 851.2452
2024-04-29 06:38:58 [INFO] [task_scheduler.cc:131] [Task #81: fused_nn_contrib_conv2d_NCHWc_3] Trial #453: GFLOPs: 457.1751. Time: 1137.9115 us. Best GFLOPs: 851.2452
2024-04-29 06:38:58 [INFO] [task_scheduler.cc:131] [Task #81: fused_nn_contrib_conv2d_NCHWc_3] Trial #454: GFLOPs: 423.2420. Time: 1229.1427 us. Best GFLOPs: 851.2452
2024-04-29 06:38:58 [INFO] [task_scheduler.cc:131] [Task #81: fused_nn_contrib_conv2d_NCHWc_3] Trial #455: GFLOPs: 661.6737. Time: 786.2256 us. Best GFLOPs: 851.2452
2024-04-29 06:38:58 [INFO] [task_scheduler.cc:131] [Task #81: fused_nn_contrib_conv2d_NCHWc_3] Trial #456: GFLOPs: 602.2182. Time: 863.8477 us. Best GFLOPs: 851.2452
2024-04-29 06:38:58 [INFO] [task_scheduler.cc:131] [Task #81: fused_nn_contrib_conv2d_NCHWc_3] Trial #457: GFLOPs: 655.5000. Time: 793.6305 us. Best GFLOPs: 851.2452
2024-04-29 06:38:58 [INFO] [task_scheduler.cc:131] [Task #81: fused_nn_contrib_conv2d_NCHWc_3] Trial #458: GFLOPs: 606.0179. Time: 858.4314 us. Best GFLOPs: 851.2452
2024-04-29 06:38:58 [INFO] [task_scheduler.cc:131] [Task #81: fused_nn_contrib_conv2d_NCHWc_3] Trial #459: GFLOPs: 792.2115. Time: 656.6741 us. Best GFLOPs: 851.2452
2024-04-29 06:38:58 [INFO] [task_scheduler.cc:131] [Task #81: fused_nn_contrib_conv2d_NCHWc_3] Trial #460: GFLOPs: 327.0185. Time: 1590.8113 us. Best GFLOPs: 851.2452
2024-04-29 06:38:58 [INFO] [task_scheduler.cc:131] [Task #81: fused_nn_contrib_conv2d_NCHWc_3] Trial #461: GFLOPs: 107.5712. Time: 4836.0953 us. Best GFLOPs: 851.2452
2024-04-29 06:38:58 [INFO] [task_scheduler.cc:131] [Task #81: fused_nn_contrib_conv2d_NCHWc_3] Trial #462: GFLOPs: 132.2496. Time: 3933.6599 us. Best GFLOPs: 851.2452
2024-04-29 06:38:58 [INFO] [task_scheduler.cc:131] [Task #81: fused_nn_contrib_conv2d_NCHWc_3] Trial #463: GFLOPs: 804.4520. Time: 646.6822 us. Best GFLOPs: 851.2452
2024-04-29 06:38:58 [INFO] [task_scheduler.cc:131] [Task #81: fused_nn_contrib_conv2d_NCHWc_3] Trial #464: GFLOPs: 695.9514. Time: 747.5016 us. Best GFLOPs: 851.2452
2024-04-29 06:38:58 [INFO] [task_scheduler.cc:131] [Task #81: fused_nn_contrib_conv2d_NCHWc_3] Trial #465: GFLOPs: 795.8409. Time: 653.6793 us. Best GFLOPs: 851.2452
2024-04-29 06:38:58 [INFO] [task_scheduler.cc:131] [Task #81: fused_nn_contrib_conv2d_NCHWc_3] Trial #466: GFLOPs: 624.5927. Time: 832.9024 us. Best GFLOPs: 851.2452
2024-04-29 06:38:58 [INFO] [task_scheduler.cc:131] [Task #81: fused_nn_contrib_conv2d_NCHWc_3] Trial #467: GFLOPs: 496.9596. Time: 1046.8151 us. Best GFLOPs: 851.2452
2024-04-29 06:38:58 [INFO] [task_scheduler.cc:131] [Task #81: fused_nn_contrib_conv2d_NCHWc_3] Trial #468: GFLOPs: 422.3178. Time: 1231.8326 us. Best GFLOPs: 851.2452
2024-04-29 06:38:58 [INFO] [task_scheduler.cc:131] [Task #81: fused_nn_contrib_conv2d_NCHWc_3] Trial #469: GFLOPs: 407.4347. Time: 1276.8297 us. Best GFLOPs: 851.2452
2024-04-29 06:38:58 [INFO] [task_scheduler.cc:131] [Task #81: fused_nn_contrib_conv2d_NCHWc_3] Trial #470: GFLOPs: 625.2015. Time: 832.0914 us. Best GFLOPs: 851.2452
2024-04-29 06:38:58 [INFO] [task_scheduler.cc:131] [Task #81: fused_nn_contrib_conv2d_NCHWc_3] Trial #471: GFLOPs: 641.1659. Time: 811.3731 us. Best GFLOPs: 851.2452
2024-04-29 06:38:58 [INFO] [task_scheduler.cc:131] [Task #81: fused_nn_contrib_conv2d_NCHWc_3] Trial #472: GFLOPs: 636.1051. Time: 817.8284 us. Best GFLOPs: 851.2452
2024-04-29 06:38:58 [INFO] [task_scheduler.cc:131] [Task #81: fused_nn_contrib_conv2d_NCHWc_3] Trial #473: GFLOPs: 797.4363. Time: 652.3716 us. Best GFLOPs: 851.2452
2024-04-29 06:38:58 [INFO] [task_scheduler.cc:131] [Task #81: fused_nn_contrib_conv2d_NCHWc_3] Trial #474: GFLOPs: 804.2674. Time: 646.8306 us. Best GFLOPs: 851.2452
2024-04-29 06:38:58 [INFO] [task_scheduler.cc:131] [Task #81: fused_nn_contrib_conv2d_NCHWc_3] Trial #475: GFLOPs: 787.0513. Time: 660.9795 us. Best GFLOPs: 851.2452
2024-04-29 06:38:58 [INFO] [task_scheduler.cc:131] [Task #81: fused_nn_contrib_conv2d_NCHWc_3] Trial #476: GFLOPs: 616.5872. Time: 843.7164 us. Best GFLOPs: 851.2452
2024-04-29 06:38:58 [INFO] [task_scheduler.cc:131] [Task #81: fused_nn_contrib_conv2d_NCHWc_3] Trial #477: GFLOPs: 779.7056. Time: 667.2067 us. Best GFLOPs: 851.2452
2024-04-29 06:38:58 [INFO] [task_scheduler.cc:131] [Task #81: fused_nn_contrib_conv2d_NCHWc_3] Trial #478: GFLOPs: 594.2309. Time: 875.4590 us. Best GFLOPs: 851.2452
2024-04-29 06:38:58 [INFO] [task_scheduler.cc:131] [Task #81: fused_nn_contrib_conv2d_NCHWc_3] Trial #479: GFLOPs: 590.2851. Time: 881.3110 us. Best GFLOPs: 851.2452
2024-04-29 06:38:58 [INFO] [task_scheduler.cc:131] [Task #81: fused_nn_contrib_conv2d_NCHWc_3] Trial #480: GFLOPs: 651.2420. Time: 798.8194 us. Best GFLOPs: 851.2452
2024-04-29 06:38:58 [INFO] [task_scheduler.cc:131] [Task #81: fused_nn_contrib_conv2d_NCHWc_3] Trial #481: GFLOPs: 790.9464. Time: 657.7244 us. Best GFLOPs: 851.2452
2024-04-29 06:38:58 [INFO] [task_scheduler.cc:131] [Task #81: fused_nn_contrib_conv2d_NCHWc_3] Trial #482: GFLOPs: 729.2403. Time: 713.3790 us. Best GFLOPs: 851.2452
2024-04-29 06:38:58 [INFO] [task_scheduler.cc:131] [Task #81: fused_nn_contrib_conv2d_NCHWc_3] Trial #483: GFLOPs: 93.6120. Time: 5557.2458 us. Best GFLOPs: 851.2452
2024-04-29 06:38:58 [INFO] [task_scheduler.cc:131] [Task #81: fused_nn_contrib_conv2d_NCHWc_3] Trial #484: GFLOPs: 500.1007. Time: 1040.2399 us. Best GFLOPs: 851.2452
2024-04-29 06:38:58 [INFO] [task_scheduler.cc:131] [Task #81: fused_nn_contrib_conv2d_NCHWc_3] Trial #485: GFLOPs: 498.5576. Time: 1043.4597 us. Best GFLOPs: 851.2452
2024-04-29 06:38:58 [INFO] [task_scheduler.cc:131] [Task #81: fused_nn_contrib_conv2d_NCHWc_3] Trial #486: GFLOPs: 819.4982. Time: 634.8089 us. Best GFLOPs: 851.2452
2024-04-29 06:38:58 [INFO] [task_scheduler.cc:131] [Task #81: fused_nn_contrib_conv2d_NCHWc_3] Trial #487: GFLOPs: 810.9611. Time: 641.4917 us. Best GFLOPs: 851.2452
2024-04-29 06:38:58 [INFO] [task_scheduler.cc:131] [Task #81: fused_nn_contrib_conv2d_NCHWc_3] Trial #488: GFLOPs: 613.1251. Time: 848.4806 us. Best GFLOPs: 851.2452
2024-04-29 06:38:58 [INFO] [task_scheduler.cc:131] [Task #81: fused_nn_contrib_conv2d_NCHWc_3] Trial #489: GFLOPs: 808.5682. Time: 643.3901 us. Best GFLOPs: 851.2452
2024-04-29 06:38:58 [INFO] [task_scheduler.cc:131] [Task #81: fused_nn_contrib_conv2d_NCHWc_3] Trial #490: GFLOPs: 112.0235. Time: 4643.8876 us. Best GFLOPs: 851.2452
2024-04-29 06:38:58 [INFO] [task_scheduler.cc:131] [Task #81: fused_nn_contrib_conv2d_NCHWc_3] Trial #491: GFLOPs: 95.5129. Time: 5446.6426 us. Best GFLOPs: 851.2452
2024-04-29 06:38:58 [INFO] [task_scheduler.cc:131] [Task #81: fused_nn_contrib_conv2d_NCHWc_3] Trial #492: GFLOPs: 618.5680. Time: 841.0147 us. Best GFLOPs: 851.2452
2024-04-29 06:38:58 [INFO] [task_scheduler.cc:131] [Task #81: fused_nn_contrib_conv2d_NCHWc_3] Trial #493: GFLOPs: 95.2441. Time: 5462.0159 us. Best GFLOPs: 851.2452
2024-04-29 06:38:58 [INFO] [task_scheduler.cc:131] [Task #81: fused_nn_contrib_conv2d_NCHWc_3] Trial #494: GFLOPs: 670.0391. Time: 776.4096 us. Best GFLOPs: 851.2452
2024-04-29 06:38:58 [INFO] [task_scheduler.cc:131] [Task #81: fused_nn_contrib_conv2d_NCHWc_3] Trial #495: GFLOPs: 662.5288. Time: 785.2108 us. Best GFLOPs: 851.2452
2024-04-29 06:38:58 [INFO] [task_scheduler.cc:131] [Task #81: fused_nn_contrib_conv2d_NCHWc_3] Trial #496: GFLOPs: 149.0661. Time: 3489.8927 us. Best GFLOPs: 851.2452
2024-04-29 06:38:58 [INFO] [task_scheduler.cc:131] [Task #81: fused_nn_contrib_conv2d_NCHWc_3] Trial #497: GFLOPs: 589.5991. Time: 882.3365 us. Best GFLOPs: 851.2452
2024-04-29 06:38:58 [INFO] [task_scheduler.cc:131] [Task #81: fused_nn_contrib_conv2d_NCHWc_3] Trial #498: GFLOPs: 561.9407. Time: 925.7645 us. Best GFLOPs: 851.2452
2024-04-29 06:38:58 [INFO] [task_scheduler.cc:131] [Task #81: fused_nn_contrib_conv2d_NCHWc_3] Trial #499: GFLOPs: 345.7923. Time: 1504.4431 us. Best GFLOPs: 851.2452
2024-04-29 06:38:58 [INFO] [task_scheduler.cc:131] [Task #81: fused_nn_contrib_conv2d_NCHWc_3] Trial #500: GFLOPs: 592.8702. Time: 877.4682 us. Best GFLOPs: 851.2452
2024-04-29 06:38:58 [INFO] [task_scheduler.cc:131] [Task #81: fused_nn_contrib_conv2d_NCHWc_3] Trial #501: GFLOPs: 774.9358. Time: 671.3133 us. Best GFLOPs: 851.2452
2024-04-29 06:38:58 [INFO] [task_scheduler.cc:131] [Task #81: fused_nn_contrib_conv2d_NCHWc_3] Trial #502: GFLOPs: 103.6987. Time: 5016.6945 us. Best GFLOPs: 851.2452
2024-04-29 06:38:58 [INFO] [task_scheduler.cc:131] [Task #81: fused_nn_contrib_conv2d_NCHWc_3] Trial #503: GFLOPs: 564.3585. Time: 921.7985 us. Best GFLOPs: 851.2452
2024-04-29 06:38:58 [INFO] [task_scheduler.cc:131] [Task #81: fused_nn_contrib_conv2d_NCHWc_3] Trial #504: GFLOPs: 158.2710. Time: 3286.9240 us. Best GFLOPs: 851.2452
2024-04-29 06:38:58 [INFO] [task_scheduler.cc:131] [Task #81: fused_nn_contrib_conv2d_NCHWc_3] Trial #505: GFLOPs: 48.9243. Time: 10633.2636 us. Best GFLOPs: 851.2452
2024-04-29 06:38:58 [INFO] [task_scheduler.cc:131] [Task #81: fused_nn_contrib_conv2d_NCHWc_3] Trial #506: GFLOPs: 188.4489. Time: 2760.5607 us. Best GFLOPs: 851.2452
2024-04-29 06:38:58 [INFO] [task_scheduler.cc:131] [Task #81: fused_nn_contrib_conv2d_NCHWc_3] Trial #507: GFLOPs: 447.3877. Time: 1162.8052 us. Best GFLOPs: 851.2452
2024-04-29 06:38:58 [INFO] [task_scheduler.cc:131] [Task #81: fused_nn_contrib_conv2d_NCHWc_3] Trial #508: GFLOPs: 752.9320. Time: 690.9319 us. Best GFLOPs: 851.2452
2024-04-29 06:38:58 [INFO] [task_scheduler.cc:131] [Task #81: fused_nn_contrib_conv2d_NCHWc_3] Trial #509: GFLOPs: 760.0012. Time: 684.5052 us. Best GFLOPs: 851.2452
2024-04-29 06:38:58 [INFO] [task_scheduler.cc:131] [Task #81: fused_nn_contrib_conv2d_NCHWc_3] Trial #510: GFLOPs: 32.6940. Time: 15911.9517 us. Best GFLOPs: 851.2452
2024-04-29 06:38:58 [INFO] [task_scheduler.cc:131] [Task #81: fused_nn_contrib_conv2d_NCHWc_3] Trial #511: GFLOPs: 134.7102. Time: 3861.8078 us. Best GFLOPs: 851.2452
2024-04-29 06:38:58 [INFO] [task_scheduler.cc:131] [Task #81: fused_nn_contrib_conv2d_NCHWc_3] Trial #512: GFLOPs: 52.9898. Time: 9817.4583 us. Best GFLOPs: 851.2452
2024-04-29 07:11:43 [INFO] [evolutionary_search.cc:713] Generating candidates......
2024-04-29 07:11:44 [INFO] [evolutionary_search.cc:715] Picked top 102 candidate(s) from database
2024-04-29 07:11:49 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x119191d8)]: 8 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x91eb9d8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0xb6918a8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x10e07d28)]: 0 failure(s)
2024-04-29 07:11:49 [INFO] [evolutionary_search.cc:723] Sampled 402 candidate(s)
2024-04-29 07:12:01 [INFO] [evolutionary_search.cc:621] Evolve iter #0 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x119191d8)]: 1 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x91eb9d8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0xb6918a8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x10e07d28)]: 0 failure(s)
2024-04-29 07:12:14 [INFO] [evolutionary_search.cc:621] Evolve iter #1 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x119191d8)]: 1 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x91eb9d8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0xb6918a8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x10e07d28)]: 0 failure(s)
2024-04-29 07:12:27 [INFO] [evolutionary_search.cc:621] Evolve iter #2 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x119191d8)]: 1 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x91eb9d8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0xb6918a8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x10e07d28)]: 0 failure(s)
2024-04-29 07:12:40 [INFO] [evolutionary_search.cc:621] Evolve iter #3 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x119191d8)]: 3 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x91eb9d8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0xb6918a8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x10e07d28)]: 0 failure(s)
2024-04-29 07:12:48 [INFO] [evolutionary_search.cc:649] Scores of the best 64 candidates:
[1 : 16]:	0.9208  0.9032  0.9023  0.9023  0.9020  0.9020  0.9005  0.9005  0.8953  0.8940  0.8918  0.8906  0.8906  0.8899  0.8885  0.8870
[17 : 32]:	0.8870  0.8870  0.8854  0.8838  0.8838  0.8824  0.8824  0.8766  0.8730  0.8730  0.8721  0.8721  0.8721  0.8683  0.8683  0.8646
[33 : 48]:	0.8646  0.8646  0.8618  0.8361  0.8322  0.8304  0.8304  0.8287  0.8287  0.8287  0.8231  0.8084  0.8084  0.8084  0.8084  0.8084
[49 : 64]:	0.7928  0.7928  0.7885  0.7718  0.7718  0.7718  0.7705  0.7705  0.7705  0.7705  0.7700  0.7686  0.7686  0.7683  0.7683  0.7683
2024-04-29 07:12:48 [INFO] [evolutionary_search.cc:727] Got 64 candidate(s) with evolutionary search
2024-04-29 07:12:48 [INFO] [evolutionary_search.cc:730] Sending 64 candidates(s) for measurement
2024-04-29 07:14:26 [INFO] [task_scheduler.cc:131] [Task #81: fused_nn_contrib_conv2d_NCHWc_3] Trial #513: GFLOPs: 861.4935. Time: 603.8639 us. Best GFLOPs: 861.4935
2024-04-29 07:14:26 [INFO] [task_scheduler.cc:131] [Task #81: fused_nn_contrib_conv2d_NCHWc_3] Trial #514: GFLOPs: 751.5706. Time: 692.1835 us. Best GFLOPs: 861.4935
2024-04-29 07:14:26 [INFO] [task_scheduler.cc:131] [Task #81: fused_nn_contrib_conv2d_NCHWc_3] Trial #515: GFLOPs: 701.6232. Time: 741.4589 us. Best GFLOPs: 861.4935
2024-04-29 07:14:26 [INFO] [task_scheduler.cc:131] [Task #81: fused_nn_contrib_conv2d_NCHWc_3] Trial #516: GFLOPs: 107.5247. Time: 4838.1899 us. Best GFLOPs: 861.4935
2024-04-29 07:14:26 [INFO] [task_scheduler.cc:131] [Task #81: fused_nn_contrib_conv2d_NCHWc_3] Trial #517: GFLOPs: 599.3939. Time: 867.9181 us. Best GFLOPs: 861.4935
2024-04-29 07:14:26 [INFO] [task_scheduler.cc:131] [Task #81: fused_nn_contrib_conv2d_NCHWc_3] Trial #518: GFLOPs: 755.7798. Time: 688.3285 us. Best GFLOPs: 861.4935
2024-04-29 07:14:26 [INFO] [task_scheduler.cc:131] [Task #81: fused_nn_contrib_conv2d_NCHWc_3] Trial #519: GFLOPs: 616.1646. Time: 844.2952 us. Best GFLOPs: 861.4935
2024-04-29 07:14:26 [INFO] [task_scheduler.cc:131] [Task #81: fused_nn_contrib_conv2d_NCHWc_3] Trial #520: GFLOPs: 845.0434. Time: 615.6190 us. Best GFLOPs: 861.4935
2024-04-29 07:14:26 [INFO] [task_scheduler.cc:131] [Task #81: fused_nn_contrib_conv2d_NCHWc_3] Trial #521: GFLOPs: 620.0424. Time: 839.0149 us. Best GFLOPs: 861.4935
2024-04-29 07:14:26 [INFO] [task_scheduler.cc:131] [Task #81: fused_nn_contrib_conv2d_NCHWc_3] Trial #522: GFLOPs: 590.6648. Time: 880.7445 us. Best GFLOPs: 861.4935
2024-04-29 07:14:26 [INFO] [task_scheduler.cc:131] [Task #81: fused_nn_contrib_conv2d_NCHWc_3] Trial #523: GFLOPs: 750.6994. Time: 692.9868 us. Best GFLOPs: 861.4935
2024-04-29 07:14:26 [INFO] [task_scheduler.cc:131] [Task #81: fused_nn_contrib_conv2d_NCHWc_3] Trial #524: GFLOPs: 773.3457. Time: 672.6937 us. Best GFLOPs: 861.4935
2024-04-29 07:14:26 [INFO] [task_scheduler.cc:131] [Task #81: fused_nn_contrib_conv2d_NCHWc_3] Trial #525: GFLOPs: 754.4081. Time: 689.5801 us. Best GFLOPs: 861.4935
2024-04-29 07:14:26 [INFO] [task_scheduler.cc:131] [Task #81: fused_nn_contrib_conv2d_NCHWc_3] Trial #526: GFLOPs: 861.1783. Time: 604.0849 us. Best GFLOPs: 861.4935
2024-04-29 07:14:26 [INFO] [task_scheduler.cc:131] [Task #81: fused_nn_contrib_conv2d_NCHWc_3] Trial #527: GFLOPs: 628.3865. Time: 827.8739 us. Best GFLOPs: 861.4935
2024-04-29 07:14:26 [INFO] [task_scheduler.cc:131] [Task #81: fused_nn_contrib_conv2d_NCHWc_3] Trial #528: GFLOPs: 745.6286. Time: 697.6996 us. Best GFLOPs: 861.4935
2024-04-29 07:14:26 [INFO] [task_scheduler.cc:131] [Task #81: fused_nn_contrib_conv2d_NCHWc_3] Trial #529: GFLOPs: 752.5569. Time: 691.2763 us. Best GFLOPs: 861.4935
2024-04-29 07:14:26 [INFO] [task_scheduler.cc:131] [Task #81: fused_nn_contrib_conv2d_NCHWc_3] Trial #530: GFLOPs: 630.1838. Time: 825.5128 us. Best GFLOPs: 861.4935
2024-04-29 07:14:26 [INFO] [task_scheduler.cc:131] [Task #81: fused_nn_contrib_conv2d_NCHWc_3] Trial #531: GFLOPs: 776.8005. Time: 669.7019 us. Best GFLOPs: 861.4935
2024-04-29 07:14:26 [INFO] [task_scheduler.cc:131] [Task #81: fused_nn_contrib_conv2d_NCHWc_3] Trial #532: GFLOPs: 771.8817. Time: 673.9696 us. Best GFLOPs: 861.4935
2024-04-29 07:14:26 [INFO] [task_scheduler.cc:131] [Task #81: fused_nn_contrib_conv2d_NCHWc_3] Trial #533: GFLOPs: 756.6564. Time: 687.5311 us. Best GFLOPs: 861.4935
2024-04-29 07:14:26 [INFO] [task_scheduler.cc:131] [Task #81: fused_nn_contrib_conv2d_NCHWc_3] Trial #534: GFLOPs: 708.6075. Time: 734.1508 us. Best GFLOPs: 861.4935
2024-04-29 07:14:26 [INFO] [task_scheduler.cc:131] [Task #81: fused_nn_contrib_conv2d_NCHWc_3] Trial #535: GFLOPs: 871.5914. Time: 596.8677 us. Best GFLOPs: 871.5914
2024-04-29 07:14:26 [INFO] [task_scheduler.cc:131] [Task #81: fused_nn_contrib_conv2d_NCHWc_3] Trial #536: GFLOPs: 104.2287. Time: 4991.1875 us. Best GFLOPs: 871.5914
2024-04-29 07:14:26 [INFO] [task_scheduler.cc:131] [Task #81: fused_nn_contrib_conv2d_NCHWc_3] Trial #537: GFLOPs: 762.3998. Time: 682.3517 us. Best GFLOPs: 871.5914
2024-04-29 07:14:26 [INFO] [task_scheduler.cc:131] [Task #81: fused_nn_contrib_conv2d_NCHWc_3] Trial #538: GFLOPs: 784.7733. Time: 662.8982 us. Best GFLOPs: 871.5914
2024-04-29 07:14:26 [INFO] [task_scheduler.cc:131] [Task #81: fused_nn_contrib_conv2d_NCHWc_3] Trial #539: GFLOPs: 878.1894. Time: 592.3833 us. Best GFLOPs: 878.1894
2024-04-29 07:14:26 [INFO] [task_scheduler.cc:131] [Task #81: fused_nn_contrib_conv2d_NCHWc_3] Trial #540: GFLOPs: 770.6271. Time: 675.0668 us. Best GFLOPs: 878.1894
2024-04-29 07:14:26 [INFO] [task_scheduler.cc:131] [Task #81: fused_nn_contrib_conv2d_NCHWc_3] Trial #541: GFLOPs: 708.7088. Time: 734.0458 us. Best GFLOPs: 878.1894
2024-04-29 07:14:26 [INFO] [task_scheduler.cc:131] [Task #81: fused_nn_contrib_conv2d_NCHWc_3] Trial #542: GFLOPs: 692.0510. Time: 751.7145 us. Best GFLOPs: 878.1894
2024-04-29 07:14:26 [INFO] [task_scheduler.cc:131] [Task #81: fused_nn_contrib_conv2d_NCHWc_3] Trial #543: GFLOPs: 695.4732. Time: 748.0156 us. Best GFLOPs: 878.1894
2024-04-29 07:14:26 [INFO] [task_scheduler.cc:131] [Task #81: fused_nn_contrib_conv2d_NCHWc_3] Trial #544: GFLOPs: 835.0746. Time: 622.9680 us. Best GFLOPs: 878.1894
2024-04-29 07:14:26 [INFO] [task_scheduler.cc:131] [Task #81: fused_nn_contrib_conv2d_NCHWc_3] Trial #545: GFLOPs: 789.0209. Time: 659.3295 us. Best GFLOPs: 878.1894
2024-04-29 07:14:26 [INFO] [task_scheduler.cc:131] [Task #81: fused_nn_contrib_conv2d_NCHWc_3] Trial #546: GFLOPs: 852.2720. Time: 610.3976 us. Best GFLOPs: 878.1894
2024-04-29 07:14:26 [INFO] [task_scheduler.cc:131] [Task #81: fused_nn_contrib_conv2d_NCHWc_3] Trial #547: GFLOPs: 712.2829. Time: 730.3626 us. Best GFLOPs: 878.1894
2024-04-29 07:14:26 [INFO] [task_scheduler.cc:131] [Task #81: fused_nn_contrib_conv2d_NCHWc_3] Trial #548: GFLOPs: 688.2038. Time: 755.9167 us. Best GFLOPs: 878.1894
2024-04-29 07:14:26 [INFO] [task_scheduler.cc:131] [Task #81: fused_nn_contrib_conv2d_NCHWc_3] Trial #549: GFLOPs: 855.8651. Time: 607.8350 us. Best GFLOPs: 878.1894
2024-04-29 07:14:26 [INFO] [task_scheduler.cc:131] [Task #81: fused_nn_contrib_conv2d_NCHWc_3] Trial #550: GFLOPs: 754.2641. Time: 689.7117 us. Best GFLOPs: 878.1894
2024-04-29 07:14:26 [INFO] [task_scheduler.cc:131] [Task #81: fused_nn_contrib_conv2d_NCHWc_3] Trial #551: GFLOPs: 763.2000. Time: 681.6362 us. Best GFLOPs: 878.1894
2024-04-29 07:14:26 [INFO] [task_scheduler.cc:131] [Task #81: fused_nn_contrib_conv2d_NCHWc_3] Trial #552: GFLOPs: 868.9157. Time: 598.7057 us. Best GFLOPs: 878.1894
2024-04-29 07:14:26 [INFO] [task_scheduler.cc:131] [Task #81: fused_nn_contrib_conv2d_NCHWc_3] Trial #553: GFLOPs: 855.9045. Time: 607.8070 us. Best GFLOPs: 878.1894
2024-04-29 07:14:26 [INFO] [task_scheduler.cc:131] [Task #81: fused_nn_contrib_conv2d_NCHWc_3] Trial #554: GFLOPs: 608.1193. Time: 855.4650 us. Best GFLOPs: 878.1894
2024-04-29 07:14:26 [INFO] [task_scheduler.cc:131] [Task #81: fused_nn_contrib_conv2d_NCHWc_3] Trial #555: GFLOPs: 711.8929. Time: 730.7627 us. Best GFLOPs: 878.1894
2024-04-29 07:14:26 [INFO] [task_scheduler.cc:131] [Task #81: fused_nn_contrib_conv2d_NCHWc_3] Trial #556: GFLOPs: 595.3848. Time: 873.7623 us. Best GFLOPs: 878.1894
2024-04-29 07:14:26 [INFO] [task_scheduler.cc:131] [Task #81: fused_nn_contrib_conv2d_NCHWc_3] Trial #557: GFLOPs: 637.0793. Time: 816.5777 us. Best GFLOPs: 878.1894
2024-04-29 07:14:26 [INFO] [task_scheduler.cc:131] [Task #81: fused_nn_contrib_conv2d_NCHWc_3] Trial #558: GFLOPs: 592.8248. Time: 877.5354 us. Best GFLOPs: 878.1894
2024-04-29 07:14:26 [INFO] [task_scheduler.cc:131] [Task #81: fused_nn_contrib_conv2d_NCHWc_3] Trial #559: GFLOPs: 607.7084. Time: 856.0434 us. Best GFLOPs: 878.1894
2024-04-29 07:14:26 [INFO] [task_scheduler.cc:131] [Task #81: fused_nn_contrib_conv2d_NCHWc_3] Trial #560: GFLOPs: 784.9351. Time: 662.7615 us. Best GFLOPs: 878.1894
2024-04-29 07:14:26 [INFO] [task_scheduler.cc:131] [Task #81: fused_nn_contrib_conv2d_NCHWc_3] Trial #561: GFLOPs: 720.8327. Time: 721.6997 us. Best GFLOPs: 878.1894
2024-04-29 07:14:26 [INFO] [task_scheduler.cc:131] [Task #81: fused_nn_contrib_conv2d_NCHWc_3] Trial #562: GFLOPs: 764.5632. Time: 680.4209 us. Best GFLOPs: 878.1894
2024-04-29 07:14:26 [INFO] [task_scheduler.cc:131] [Task #81: fused_nn_contrib_conv2d_NCHWc_3] Trial #563: GFLOPs: 793.5282. Time: 655.5845 us. Best GFLOPs: 878.1894
2024-04-29 07:14:26 [INFO] [task_scheduler.cc:131] [Task #81: fused_nn_contrib_conv2d_NCHWc_3] Trial #564: GFLOPs: 796.0067. Time: 653.5432 us. Best GFLOPs: 878.1894
2024-04-29 07:14:26 [INFO] [task_scheduler.cc:131] [Task #81: fused_nn_contrib_conv2d_NCHWc_3] Trial #565: GFLOPs: 608.5245. Time: 854.8953 us. Best GFLOPs: 878.1894
2024-04-29 07:14:26 [INFO] [task_scheduler.cc:131] [Task #81: fused_nn_contrib_conv2d_NCHWc_3] Trial #566: GFLOPs: 795.8775. Time: 653.6493 us. Best GFLOPs: 878.1894
2024-04-29 07:14:26 [INFO] [task_scheduler.cc:131] [Task #81: fused_nn_contrib_conv2d_NCHWc_3] Trial #567: GFLOPs: 609.6915. Time: 853.2590 us. Best GFLOPs: 878.1894
2024-04-29 07:14:26 [INFO] [task_scheduler.cc:131] [Task #81: fused_nn_contrib_conv2d_NCHWc_3] Trial #568: GFLOPs: 645.3417. Time: 806.1230 us. Best GFLOPs: 878.1894
2024-04-29 07:14:26 [INFO] [task_scheduler.cc:131] [Task #81: fused_nn_contrib_conv2d_NCHWc_3] Trial #569: GFLOPs: 610.4995. Time: 852.1297 us. Best GFLOPs: 878.1894
2024-04-29 07:14:26 [INFO] [task_scheduler.cc:131] [Task #81: fused_nn_contrib_conv2d_NCHWc_3] Trial #570: GFLOPs: 592.6514. Time: 877.7922 us. Best GFLOPs: 878.1894
2024-04-29 07:14:26 [INFO] [task_scheduler.cc:131] [Task #81: fused_nn_contrib_conv2d_NCHWc_3] Trial #571: GFLOPs: 742.1198. Time: 700.9983 us. Best GFLOPs: 878.1894
2024-04-29 07:14:26 [INFO] [task_scheduler.cc:131] [Task #81: fused_nn_contrib_conv2d_NCHWc_3] Trial #572: GFLOPs: 860.1345. Time: 604.8179 us. Best GFLOPs: 878.1894
2024-04-29 07:14:26 [INFO] [task_scheduler.cc:131] [Task #81: fused_nn_contrib_conv2d_NCHWc_3] Trial #573: GFLOPs: 738.5258. Time: 704.4098 us. Best GFLOPs: 878.1894
2024-04-29 07:14:26 [INFO] [task_scheduler.cc:131] [Task #81: fused_nn_contrib_conv2d_NCHWc_3] Trial #574: GFLOPs: 16.8101. Time: 30947.1443 us. Best GFLOPs: 878.1894
2024-04-29 07:14:26 [INFO] [task_scheduler.cc:131] [Task #81: fused_nn_contrib_conv2d_NCHWc_3] Trial #575: GFLOPs: 35.0690. Time: 14834.3380 us. Best GFLOPs: 878.1894
2024-04-29 07:14:26 [INFO] [task_scheduler.cc:131] [Task #81: fused_nn_contrib_conv2d_NCHWc_3] Trial #576: GFLOPs: 1.8629. Time: 279262.6443 us. Best GFLOPs: 878.1894
