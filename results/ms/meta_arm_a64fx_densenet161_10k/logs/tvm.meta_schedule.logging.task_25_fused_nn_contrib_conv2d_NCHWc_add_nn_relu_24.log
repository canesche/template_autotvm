2024-04-29 02:29:58 [INFO] [task_scheduler.cc:160] Initializing Task #25: "fused_nn_contrib_conv2d_NCHWc_add_nn_relu_24"
2024-04-29 02:29:58 [INFO] [task_scheduler.cc:35] 
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(516), T.int64(14), T.int64(14), T.int64(4)), "float32"), p1: T.Buffer((T.int64(48), T.int64(516), T.int64(1), T.int64(1), T.int64(4), T.int64(4)), "float32"), p2: T.Buffer((T.int64(1), T.int64(48), T.int64(1), T.int64(1), T.int64(4)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(48), T.int64(14), T.int64(14), T.int64(4)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        conv2d_NCHWc = T.alloc_buffer((T.int64(1), T.int64(48), T.int64(14), T.int64(14), T.int64(4)))
        T_add = T.alloc_buffer((T.int64(1), T.int64(48), T.int64(14), T.int64(14), T.int64(4)))
        for n, oc_chunk, oh, ow, oc_block, ic, kh, kw in T.grid(T.int64(1), T.int64(48), T.int64(14), T.int64(14), T.int64(4), T.int64(2064), T.int64(1), T.int64(1)):
            with T.block("conv2d_NCHWc"):
                v_n, v_oc_chunk, v_oh, v_ow, v_oc_block, v_ic, v_kh, v_kw = T.axis.remap("SSSSSRRR", [n, oc_chunk, oh, ow, oc_block, ic, kh, kw])
                T.reads(p0[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)], p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block])
                T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                with T.init():
                    conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = T.float32(0)
                conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] + p0[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)] * p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block]
        for ax0, ax1, ax2, ax3, ax4 in T.grid(T.int64(1), T.int64(48), T.int64(14), T.int64(14), T.int64(4)):
            with T.block("T_add"):
                v_ax0, v_ax1, v_ax2, v_ax3, v_ax4 = T.axis.remap("SSSSS", [ax0, ax1, ax2, ax3, ax4])
                T.reads(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4])
                T.writes(T_add[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                T_add[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] + p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4]
        for ax0, ax1, ax2, ax3, ax4 in T.grid(T.int64(1), T.int64(48), T.int64(14), T.int64(14), T.int64(4)):
            with T.block("T_relu"):
                v_ax0, v_ax1, v_ax2, v_ax3, v_ax4 = T.axis.remap("SSSSS", [ax0, ax1, ax2, ax3, ax4])
                T.reads(T_add[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                T.writes(T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.max(T_add[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], T.float32(0))
2024-04-29 02:29:58 [INFO] [task_scheduler.cc:164] Total 3 design space(s) generated
2024-04-29 02:29:58 [INFO] [task_scheduler.cc:170] Design space #0:
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(516), T.int64(14), T.int64(14), T.int64(4)), "float32"), p1: T.Buffer((T.int64(48), T.int64(516), T.int64(1), T.int64(1), T.int64(4), T.int64(4)), "float32"), p2: T.Buffer((T.int64(1), T.int64(48), T.int64(1), T.int64(1), T.int64(4)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(48), T.int64(14), T.int64(14), T.int64(4)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        with T.block("root"):
            T.reads()
            T.writes()
            T.block_attr({"meta_schedule.parallel": 768, "meta_schedule.unroll_explicit": 64, "meta_schedule.vectorize": 64})
            conv2d_NCHWc = T.alloc_buffer((T.int64(1), T.int64(48), T.int64(14), T.int64(14), T.int64(4)))
            for n_0, oc_chunk_0, oh_0, ow_0, oc_block_0, n_1, oc_chunk_1, oh_1, ow_1, oc_block_1, ic_0, kh_0, kw_0, n_2, oc_chunk_2, oh_2, ow_2, oc_block_2, ic_1, kh_1, kw_1, n_3, oc_chunk_3, oh_3, ow_3, oc_block_3 in T.grid(T.int64(1), T.int64(3), T.int64(2), T.int64(2), T.int64(1), T.int64(1), T.int64(4), T.int64(1), T.int64(1), T.int64(2), T.int64(1032), T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(1), T.int64(1), T.int64(2), T.int64(2), T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(7), T.int64(7), T.int64(1)):
                with T.block("conv2d_NCHWc"):
                    v_n = T.axis.spatial(T.int64(1), n_0 + n_1 + n_2 + n_3)
                    v_oc_chunk = T.axis.spatial(T.int64(48), oc_chunk_0 * T.int64(16) + oc_chunk_1 * T.int64(4) + oc_chunk_2 * T.int64(2) + oc_chunk_3)
                    v_oh = T.axis.spatial(T.int64(14), oh_0 * T.int64(7) + oh_1 * T.int64(7) + oh_2 * T.int64(7) + oh_3)
                    v_ow = T.axis.spatial(T.int64(14), ow_0 * T.int64(7) + ow_1 * T.int64(7) + ow_2 * T.int64(7) + ow_3)
                    v_oc_block = T.axis.spatial(T.int64(4), oc_block_0 * T.int64(4) + oc_block_1 * T.int64(2) + oc_block_2 + oc_block_3)
                    v_ic = T.axis.reduce(T.int64(2064), ic_0 * T.int64(2) + ic_1)
                    v_kh = T.axis.reduce(T.int64(1), kh_0 + kh_1)
                    v_kw = T.axis.reduce(T.int64(1), kw_0 + kw_1)
                    T.reads(p0[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)], p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block])
                    T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                    T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                    with T.init():
                        conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = T.float32(0)
                    conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] + p0[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)] * p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block]
            for ax0, ax1, ax2, ax3, ax4 in T.grid(T.int64(1), T.int64(48), T.int64(14), T.int64(14), T.int64(4)):
                with T.block("T_relu"):
                    v_ax0, v_ax1, v_ax2, v_ax3, v_ax4 = T.axis.remap("SSSSS", [ax0, ax1, ax2, ax3, ax4])
                    T.reads(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4])
                    T.writes(T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                    T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.max(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] + p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4], T.float32(0))
b0 = sch.get_block(name="conv2d_NCHWc", func_name="main")
b1 = sch.get_block(name="T_add", func_name="main")
b2 = sch.get_block(name="root", func_name="main")
sch.compute_inline(block=b1)
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.tiling_structure", ann_val="SSRSRS")
l3, l4, l5, l6, l7, l8, l9, l10 = sch.get_loops(block=b0)
v11, v12, v13, v14 = sch.sample_perfect_tile(loop=l3, n=4, max_innermost_factor=64, decision=[1, 1, 1, 1])
l15, l16, l17, l18 = sch.split(loop=l3, factors=[v11, v12, v13, v14], preserve_unit_iters=True)
v19, v20, v21, v22 = sch.sample_perfect_tile(loop=l4, n=4, max_innermost_factor=64, decision=[3, 4, 2, 2])
l23, l24, l25, l26 = sch.split(loop=l4, factors=[v19, v20, v21, v22], preserve_unit_iters=True)
v27, v28, v29, v30 = sch.sample_perfect_tile(loop=l5, n=4, max_innermost_factor=64, decision=[2, 1, 1, 7])
l31, l32, l33, l34 = sch.split(loop=l5, factors=[v27, v28, v29, v30], preserve_unit_iters=True)
v35, v36, v37, v38 = sch.sample_perfect_tile(loop=l6, n=4, max_innermost_factor=64, decision=[2, 1, 1, 7])
l39, l40, l41, l42 = sch.split(loop=l6, factors=[v35, v36, v37, v38], preserve_unit_iters=True)
v43, v44, v45, v46 = sch.sample_perfect_tile(loop=l7, n=4, max_innermost_factor=64, decision=[1, 2, 2, 1])
l47, l48, l49, l50 = sch.split(loop=l7, factors=[v43, v44, v45, v46], preserve_unit_iters=True)
v51, v52 = sch.sample_perfect_tile(loop=l8, n=2, max_innermost_factor=64, decision=[1032, 2])
l53, l54 = sch.split(loop=l8, factors=[v51, v52], preserve_unit_iters=True)
v55, v56 = sch.sample_perfect_tile(loop=l9, n=2, max_innermost_factor=64, decision=[1, 1])
l57, l58 = sch.split(loop=l9, factors=[v55, v56], preserve_unit_iters=True)
v59, v60 = sch.sample_perfect_tile(loop=l10, n=2, max_innermost_factor=64, decision=[1, 1])
l61, l62 = sch.split(loop=l10, factors=[v59, v60], preserve_unit_iters=True)
sch.reorder(l15, l23, l31, l39, l47, l16, l24, l32, l40, l48, l53, l57, l61, l17, l25, l33, l41, l49, l54, l58, l62, l18, l26, l34, l42, l50)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.vectorize", ann_val=64)
v63 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=2)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.unroll_explicit", ann_val=v63)
2024-04-29 02:29:58 [INFO] [task_scheduler.cc:170] Design space #1:
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(516), T.int64(14), T.int64(14), T.int64(4)), "float32"), p1: T.Buffer((T.int64(48), T.int64(516), T.int64(1), T.int64(1), T.int64(4), T.int64(4)), "float32"), p2: T.Buffer((T.int64(1), T.int64(48), T.int64(1), T.int64(1), T.int64(4)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(48), T.int64(14), T.int64(14), T.int64(4)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        with T.block("root"):
            T.reads()
            T.writes()
            T.block_attr({"meta_schedule.parallel": 768, "meta_schedule.unroll_explicit": 0, "meta_schedule.vectorize": 64})
            conv2d_NCHWc = T.alloc_buffer((T.int64(1), T.int64(48), T.int64(14), T.int64(14), T.int64(4)))
            for n_0, oc_chunk_0, oh_0, ow_0, oc_block_0, n_1, oc_chunk_1, oh_1, ow_1, oc_block_1 in T.grid(T.int64(1), T.int64(3), T.int64(2), T.int64(2), T.int64(1), T.int64(1), T.int64(4), T.int64(1), T.int64(1), T.int64(2)):
                for ic_0, kh_0, kw_0, n_2, oc_chunk_2, oh_2, ow_2, oc_block_2, ic_1, kh_1, kw_1, n_3, oc_chunk_3, oh_3, ow_3, oc_block_3 in T.grid(T.int64(1032), T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(1), T.int64(1), T.int64(2), T.int64(2), T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(7), T.int64(7), T.int64(1)):
                    with T.block("conv2d_NCHWc"):
                        v_n = T.axis.spatial(T.int64(1), n_0 + n_1 + n_2 + n_3)
                        v_oc_chunk = T.axis.spatial(T.int64(48), oc_chunk_0 * T.int64(16) + oc_chunk_1 * T.int64(4) + oc_chunk_2 * T.int64(2) + oc_chunk_3)
                        v_oh = T.axis.spatial(T.int64(14), oh_0 * T.int64(7) + oh_1 * T.int64(7) + oh_2 * T.int64(7) + oh_3)
                        v_ow = T.axis.spatial(T.int64(14), ow_0 * T.int64(7) + ow_1 * T.int64(7) + ow_2 * T.int64(7) + ow_3)
                        v_oc_block = T.axis.spatial(T.int64(4), oc_block_0 * T.int64(4) + oc_block_1 * T.int64(2) + oc_block_2 + oc_block_3)
                        v_ic = T.axis.reduce(T.int64(2064), ic_0 * T.int64(2) + ic_1)
                        v_kh = T.axis.reduce(T.int64(1), kh_0 + kh_1)
                        v_kw = T.axis.reduce(T.int64(1), kw_0 + kw_1)
                        T.reads(p0[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)], p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block])
                        T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                        T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                        with T.init():
                            conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = T.float32(0)
                        conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] + p0[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)] * p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block]
                for ax0, ax1, ax2, ax3, ax4 in T.grid(T.int64(1), T.int64(4), T.int64(7), T.int64(7), T.int64(2)):
                    with T.block("T_relu"):
                        v_ax0 = T.axis.spatial(T.int64(1), ax0)
                        v_ax1 = T.axis.spatial(T.int64(48), oc_chunk_0 * T.int64(16) + oc_chunk_1 * T.int64(4) + ax1)
                        v_ax2 = T.axis.spatial(T.int64(14), oh_0 * T.int64(7) + ax2)
                        v_ax3 = T.axis.spatial(T.int64(14), ow_0 * T.int64(7) + ax3)
                        v_ax4 = T.axis.spatial(T.int64(4), oc_block_1 * T.int64(2) + ax4)
                        T.reads(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4])
                        T.writes(T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                        T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.max(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] + p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4], T.float32(0))
b0 = sch.get_block(name="conv2d_NCHWc", func_name="main")
b1 = sch.get_block(name="T_add", func_name="main")
b2 = sch.get_block(name="root", func_name="main")
sch.compute_inline(block=b1)
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.tiling_structure", ann_val="SSRSRS")
l3, l4, l5, l6, l7, l8, l9, l10 = sch.get_loops(block=b0)
v11, v12, v13, v14 = sch.sample_perfect_tile(loop=l3, n=4, max_innermost_factor=64, decision=[1, 1, 1, 1])
l15, l16, l17, l18 = sch.split(loop=l3, factors=[v11, v12, v13, v14], preserve_unit_iters=True)
v19, v20, v21, v22 = sch.sample_perfect_tile(loop=l4, n=4, max_innermost_factor=64, decision=[3, 4, 2, 2])
l23, l24, l25, l26 = sch.split(loop=l4, factors=[v19, v20, v21, v22], preserve_unit_iters=True)
v27, v28, v29, v30 = sch.sample_perfect_tile(loop=l5, n=4, max_innermost_factor=64, decision=[2, 1, 1, 7])
l31, l32, l33, l34 = sch.split(loop=l5, factors=[v27, v28, v29, v30], preserve_unit_iters=True)
v35, v36, v37, v38 = sch.sample_perfect_tile(loop=l6, n=4, max_innermost_factor=64, decision=[2, 1, 1, 7])
l39, l40, l41, l42 = sch.split(loop=l6, factors=[v35, v36, v37, v38], preserve_unit_iters=True)
v43, v44, v45, v46 = sch.sample_perfect_tile(loop=l7, n=4, max_innermost_factor=64, decision=[1, 2, 2, 1])
l47, l48, l49, l50 = sch.split(loop=l7, factors=[v43, v44, v45, v46], preserve_unit_iters=True)
v51, v52 = sch.sample_perfect_tile(loop=l8, n=2, max_innermost_factor=64, decision=[1032, 2])
l53, l54 = sch.split(loop=l8, factors=[v51, v52], preserve_unit_iters=True)
v55, v56 = sch.sample_perfect_tile(loop=l9, n=2, max_innermost_factor=64, decision=[1, 1])
l57, l58 = sch.split(loop=l9, factors=[v55, v56], preserve_unit_iters=True)
v59, v60 = sch.sample_perfect_tile(loop=l10, n=2, max_innermost_factor=64, decision=[1, 1])
l61, l62 = sch.split(loop=l10, factors=[v59, v60], preserve_unit_iters=True)
sch.reorder(l15, l23, l31, l39, l47, l16, l24, l32, l40, l48, l53, l57, l61, l17, l25, l33, l41, l49, l54, l58, l62, l18, l26, l34, l42, l50)
b63, = sch.get_consumers(block=b0)
sch.reverse_compute_at(block=b63, loop=l48, preserve_unit_loops=True, index=-1)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.vectorize", ann_val=64)
v64 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=0)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.unroll_explicit", ann_val=v64)
2024-04-29 02:29:58 [INFO] [task_scheduler.cc:170] Design space #2:
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(516), T.int64(14), T.int64(14), T.int64(4)), "float32"), p1: T.Buffer((T.int64(48), T.int64(516), T.int64(1), T.int64(1), T.int64(4), T.int64(4)), "float32"), p2: T.Buffer((T.int64(1), T.int64(48), T.int64(1), T.int64(1), T.int64(4)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(48), T.int64(14), T.int64(14), T.int64(4)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        with T.block("root"):
            T.reads()
            T.writes()
            T.block_attr({"meta_schedule.parallel": 768, "meta_schedule.unroll_explicit": 16, "meta_schedule.vectorize": 64})
            conv2d_NCHWc = T.alloc_buffer((T.int64(1), T.int64(48), T.int64(14), T.int64(14), T.int64(4)))
            for n_0, oc_chunk_0, oh_0, ow_0, oc_block_0 in T.grid(T.int64(1), T.int64(3), T.int64(2), T.int64(2), T.int64(1)):
                for n_1, oc_chunk_1, oh_1, ow_1, oc_block_1, ic_0, kh_0, kw_0, n_2, oc_chunk_2, oh_2, ow_2, oc_block_2, ic_1, kh_1, kw_1, n_3, oc_chunk_3, oh_3, ow_3, oc_block_3 in T.grid(T.int64(1), T.int64(4), T.int64(1), T.int64(1), T.int64(2), T.int64(1032), T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(1), T.int64(1), T.int64(2), T.int64(2), T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(7), T.int64(7), T.int64(1)):
                    with T.block("conv2d_NCHWc"):
                        v_n = T.axis.spatial(T.int64(1), n_0 + n_1 + n_2 + n_3)
                        v_oc_chunk = T.axis.spatial(T.int64(48), oc_chunk_0 * T.int64(16) + oc_chunk_1 * T.int64(4) + oc_chunk_2 * T.int64(2) + oc_chunk_3)
                        v_oh = T.axis.spatial(T.int64(14), oh_0 * T.int64(7) + oh_1 * T.int64(7) + oh_2 * T.int64(7) + oh_3)
                        v_ow = T.axis.spatial(T.int64(14), ow_0 * T.int64(7) + ow_1 * T.int64(7) + ow_2 * T.int64(7) + ow_3)
                        v_oc_block = T.axis.spatial(T.int64(4), oc_block_0 * T.int64(4) + oc_block_1 * T.int64(2) + oc_block_2 + oc_block_3)
                        v_ic = T.axis.reduce(T.int64(2064), ic_0 * T.int64(2) + ic_1)
                        v_kh = T.axis.reduce(T.int64(1), kh_0 + kh_1)
                        v_kw = T.axis.reduce(T.int64(1), kw_0 + kw_1)
                        T.reads(p0[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)], p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block])
                        T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                        T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                        with T.init():
                            conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = T.float32(0)
                        conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] + p0[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)] * p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block]
                for ax0, ax1, ax2, ax3, ax4 in T.grid(T.int64(1), T.int64(16), T.int64(7), T.int64(7), T.int64(4)):
                    with T.block("T_relu"):
                        v_ax0 = T.axis.spatial(T.int64(1), ax0)
                        v_ax1 = T.axis.spatial(T.int64(48), oc_chunk_0 * T.int64(16) + ax1)
                        v_ax2 = T.axis.spatial(T.int64(14), oh_0 * T.int64(7) + ax2)
                        v_ax3 = T.axis.spatial(T.int64(14), ow_0 * T.int64(7) + ax3)
                        v_ax4 = T.axis.spatial(T.int64(4), ax4)
                        T.reads(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4])
                        T.writes(T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                        T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.max(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] + p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4], T.float32(0))
b0 = sch.get_block(name="conv2d_NCHWc", func_name="main")
b1 = sch.get_block(name="T_add", func_name="main")
b2 = sch.get_block(name="root", func_name="main")
sch.compute_inline(block=b1)
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.tiling_structure", ann_val="SSRSRS")
l3, l4, l5, l6, l7, l8, l9, l10 = sch.get_loops(block=b0)
v11, v12, v13, v14 = sch.sample_perfect_tile(loop=l3, n=4, max_innermost_factor=64, decision=[1, 1, 1, 1])
l15, l16, l17, l18 = sch.split(loop=l3, factors=[v11, v12, v13, v14], preserve_unit_iters=True)
v19, v20, v21, v22 = sch.sample_perfect_tile(loop=l4, n=4, max_innermost_factor=64, decision=[3, 4, 2, 2])
l23, l24, l25, l26 = sch.split(loop=l4, factors=[v19, v20, v21, v22], preserve_unit_iters=True)
v27, v28, v29, v30 = sch.sample_perfect_tile(loop=l5, n=4, max_innermost_factor=64, decision=[2, 1, 1, 7])
l31, l32, l33, l34 = sch.split(loop=l5, factors=[v27, v28, v29, v30], preserve_unit_iters=True)
v35, v36, v37, v38 = sch.sample_perfect_tile(loop=l6, n=4, max_innermost_factor=64, decision=[2, 1, 1, 7])
l39, l40, l41, l42 = sch.split(loop=l6, factors=[v35, v36, v37, v38], preserve_unit_iters=True)
v43, v44, v45, v46 = sch.sample_perfect_tile(loop=l7, n=4, max_innermost_factor=64, decision=[1, 2, 2, 1])
l47, l48, l49, l50 = sch.split(loop=l7, factors=[v43, v44, v45, v46], preserve_unit_iters=True)
v51, v52 = sch.sample_perfect_tile(loop=l8, n=2, max_innermost_factor=64, decision=[1032, 2])
l53, l54 = sch.split(loop=l8, factors=[v51, v52], preserve_unit_iters=True)
v55, v56 = sch.sample_perfect_tile(loop=l9, n=2, max_innermost_factor=64, decision=[1, 1])
l57, l58 = sch.split(loop=l9, factors=[v55, v56], preserve_unit_iters=True)
v59, v60 = sch.sample_perfect_tile(loop=l10, n=2, max_innermost_factor=64, decision=[1, 1])
l61, l62 = sch.split(loop=l10, factors=[v59, v60], preserve_unit_iters=True)
sch.reorder(l15, l23, l31, l39, l47, l16, l24, l32, l40, l48, l53, l57, l61, l17, l25, l33, l41, l49, l54, l58, l62, l18, l26, l34, l42, l50)
b63, = sch.get_consumers(block=b0)
sch.reverse_compute_at(block=b63, loop=l47, preserve_unit_loops=True, index=-1)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.vectorize", ann_val=64)
v64 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=1)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.unroll_explicit", ann_val=v64)
2024-04-29 03:11:46 [INFO] [evolutionary_search.cc:713] Generating candidates......
2024-04-29 03:11:46 [INFO] [evolutionary_search.cc:715] Picked top 0 candidate(s) from database
2024-04-29 03:11:48 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x123cc7f8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x5c67878)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0xa2cbed8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x5b5a3f8)]: 0 failure(s)
2024-04-29 03:11:48 [INFO] [evolutionary_search.cc:723] Sampled 512 candidate(s)
2024-04-29 03:11:51 [INFO] [evolutionary_search.cc:621] Evolve iter #0 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x123cc7f8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x5c67878)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0xa2cbed8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x5b5a3f8)]: 0 failure(s)
2024-04-29 03:11:54 [INFO] [evolutionary_search.cc:621] Evolve iter #1 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x123cc7f8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x5c67878)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0xa2cbed8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x5b5a3f8)]: 0 failure(s)
2024-04-29 03:11:57 [INFO] [evolutionary_search.cc:621] Evolve iter #2 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x123cc7f8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x5c67878)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0xa2cbed8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x5b5a3f8)]: 0 failure(s)
2024-04-29 03:12:00 [INFO] [evolutionary_search.cc:621] Evolve iter #3 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x123cc7f8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x5c67878)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0xa2cbed8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x5b5a3f8)]: 0 failure(s)
2024-04-29 03:12:01 [INFO] [evolutionary_search.cc:649] Scores of the best 64 candidates:
[1 : 16]:	0.9997  0.9994  0.9984  0.9983  0.9978  0.9962  0.9961  0.9957  0.9949  0.9949  0.9926  0.9913  0.9912  0.9908  0.9908  0.9901
[17 : 32]:	0.9889  0.9889  0.9871  0.9869  0.9866  0.9864  0.9861  0.9852  0.9849  0.9846  0.9840  0.9838  0.9838  0.9837  0.9836  0.9835
[33 : 48]:	0.9833  0.9831  0.9829  0.9827  0.9822  0.9822  0.9806  0.9803  0.9802  0.9799  0.9794  0.9792  0.9791  0.9773  0.9770  0.9763
[49 : 64]:	0.9760  0.9752  0.9752  0.9751  0.9750  0.9740  0.9740  0.9740  0.9738  0.9733  0.9728  0.9727  0.9726  0.9725  0.9724  0.9723
2024-04-29 03:12:01 [INFO] [evolutionary_search.cc:727] Got 64 candidate(s) with evolutionary search
2024-04-29 03:12:02 [INFO] [evolutionary_search.cc:730] Sending 64 candidates(s) for measurement
2024-04-29 05:04:48 [INFO] [task_scheduler.cc:131] [Task #25: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_24] Trial #1: GFLOPs: 74.8865. Time: 2075.4093 us. Best GFLOPs: 74.8865
2024-04-29 05:04:48 [INFO] [task_scheduler.cc:131] [Task #25: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_24] Trial #2: GFLOPs: 89.5214. Time: 1736.1233 us. Best GFLOPs: 89.5214
2024-04-29 05:04:48 [INFO] [task_scheduler.cc:131] [Task #25: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_24] Trial #3: GFLOPs: 10.3562. Time: 15007.4497 us. Best GFLOPs: 89.5214
2024-04-29 05:04:48 [INFO] [task_scheduler.cc:131] [Task #25: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_24] Trial #4: GFLOPs: 71.3201. Time: 2179.1918 us. Best GFLOPs: 89.5214
2024-04-29 05:04:48 [INFO] [task_scheduler.cc:131] [Task #25: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_24] Trial #5: GFLOPs: 57.5555. Time: 2700.3522 us. Best GFLOPs: 89.5214
2024-04-29 05:04:48 [INFO] [task_scheduler.cc:131] [Task #25: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_24] Trial #6: GFLOPs: 27.2601. Time: 5701.3764 us. Best GFLOPs: 89.5214
2024-04-29 05:04:48 [INFO] [task_scheduler.cc:131] [Task #25: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_24] Trial #7: GFLOPs: 72.0438. Time: 2157.2997 us. Best GFLOPs: 89.5214
2024-04-29 05:04:48 [INFO] [task_scheduler.cc:131] [Task #25: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_24] Trial #8: GFLOPs: 2.6971. Time: 57625.5340 us. Best GFLOPs: 89.5214
2024-04-29 05:04:48 [INFO] [task_scheduler.cc:131] [Task #25: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_24] Trial #9: GFLOPs: 4.0699. Time: 38187.4017 us. Best GFLOPs: 89.5214
2024-04-29 05:04:48 [INFO] [task_scheduler.cc:131] [Task #25: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_24] Trial #10: GFLOPs: 61.8685. Time: 2512.1054 us. Best GFLOPs: 89.5214
2024-04-29 05:04:48 [INFO] [task_scheduler.cc:131] [Task #25: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_24] Trial #11: GFLOPs: 71.6251. Time: 2169.9123 us. Best GFLOPs: 89.5214
2024-04-29 05:04:48 [INFO] [task_scheduler.cc:131] [Task #25: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_24] Trial #12: GFLOPs: 1.1935. Time: 130224.6793 us. Best GFLOPs: 89.5214
2024-04-29 05:04:48 [INFO] [task_scheduler.cc:131] [Task #25: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_24] Trial #13: GFLOPs: 47.6351. Time: 3262.7226 us. Best GFLOPs: 89.5214
2024-04-29 05:04:48 [INFO] [task_scheduler.cc:131] [Task #25: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_24] Trial #14: GFLOPs: 88.7199. Time: 1751.8067 us. Best GFLOPs: 89.5214
2024-04-29 05:04:48 [INFO] [task_scheduler.cc:131] [Task #25: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_24] Trial #15: GFLOPs: 57.3445. Time: 2710.2912 us. Best GFLOPs: 89.5214
2024-04-29 05:04:48 [INFO] [task_scheduler.cc:131] [Task #25: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_24] Trial #16: GFLOPs: 96.9027. Time: 1603.8789 us. Best GFLOPs: 96.9027
2024-04-29 05:04:48 [INFO] [task_scheduler.cc:131] [Task #25: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_24] Trial #17: GFLOPs: 118.8195. Time: 1308.0356 us. Best GFLOPs: 118.8195
2024-04-29 05:04:48 [INFO] [task_scheduler.cc:131] [Task #25: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_24] Trial #18: GFLOPs: 37.3211. Time: 4164.4084 us. Best GFLOPs: 118.8195
2024-04-29 05:04:48 [INFO] [task_scheduler.cc:131] [Task #25: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_24] Trial #19: GFLOPs: 79.6940. Time: 1950.2128 us. Best GFLOPs: 118.8195
2024-04-29 05:04:48 [INFO] [task_scheduler.cc:131] [Task #25: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_24] Trial #20: GFLOPs: 2.2032. Time: 70542.2763 us. Best GFLOPs: 118.8195
2024-04-29 05:04:48 [INFO] [task_scheduler.cc:131] [Task #25: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_24] Trial #21: GFLOPs: 77.3763. Time: 2008.6285 us. Best GFLOPs: 118.8195
2024-04-29 05:04:48 [INFO] [task_scheduler.cc:131] [Task #25: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_24] Trial #22: GFLOPs: 117.7727. Time: 1319.6618 us. Best GFLOPs: 118.8195
2024-04-29 05:04:48 [INFO] [task_scheduler.cc:131] [Task #25: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_24] Trial #23: GFLOPs: 3.6601. Time: 42463.6643 us. Best GFLOPs: 118.8195
2024-04-29 05:04:48 [INFO] [task_scheduler.cc:131] [Task #25: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_24] Trial #24: GFLOPs: 44.4491. Time: 3496.5857 us. Best GFLOPs: 118.8195
2024-04-29 05:04:48 [INFO] [task_scheduler.cc:131] [Task #25: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_24] Trial #25: GFLOPs: 2.1433. Time: 72513.6310 us. Best GFLOPs: 118.8195
2024-04-29 05:04:48 [INFO] [task_scheduler.cc:131] [Task #25: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_24] Trial #26: GFLOPs: 127.4368. Time: 1219.5857 us. Best GFLOPs: 127.4368
2024-04-29 05:04:48 [INFO] [task_scheduler.cc:131] [Task #25: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_24] Trial #27: GFLOPs: 64.5440. Time: 2407.9734 us. Best GFLOPs: 127.4368
2024-04-29 05:04:48 [INFO] [task_scheduler.cc:131] [Task #25: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_24] Trial #28: GFLOPs: 38.6564. Time: 4020.5574 us. Best GFLOPs: 127.4368
2024-04-29 05:04:48 [INFO] [task_scheduler.cc:131] [Task #25: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_24] Trial #29: GFLOPs: 6.7968. Time: 22866.6584 us. Best GFLOPs: 127.4368
2024-04-29 05:04:48 [INFO] [task_scheduler.cc:131] [Task #25: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_24] Trial #30: GFLOPs: 115.2550. Time: 1348.4890 us. Best GFLOPs: 127.4368
2024-04-29 05:04:48 [INFO] [task_scheduler.cc:131] [Task #25: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_24] Trial #31: GFLOPs: 84.2565. Time: 1844.6075 us. Best GFLOPs: 127.4368
2024-04-29 05:04:48 [INFO] [task_scheduler.cc:131] [Task #25: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_24] Trial #32: GFLOPs: 8.7758. Time: 17710.0832 us. Best GFLOPs: 127.4368
2024-04-29 05:04:48 [INFO] [task_scheduler.cc:131] [Task #25: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_24] Trial #33: GFLOPs: 1.2539. Time: 123946.7613 us. Best GFLOPs: 127.4368
2024-04-29 05:04:48 [INFO] [task_scheduler.cc:131] [Task #25: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_24] Trial #34: GFLOPs: 3.6616. Time: 42445.4443 us. Best GFLOPs: 127.4368
2024-04-29 05:04:48 [INFO] [task_scheduler.cc:131] [Task #25: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_24] Trial #35: GFLOPs: 14.7659. Time: 10525.6009 us. Best GFLOPs: 127.4368
2024-04-29 05:04:48 [INFO] [task_scheduler.cc:121] [Task #25: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_24] Trial #36: Error in building:
LocalBuilder: Timeout, killed after 30.0 seconds
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(516), T.int64(14), T.int64(14), T.int64(4)), "float32"), p1: T.Buffer((T.int64(48), T.int64(516), T.int64(1), T.int64(1), T.int64(4), T.int64(4)), "float32"), p2: T.Buffer((T.int64(1), T.int64(48), T.int64(1), T.int64(1), T.int64(4)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(48), T.int64(14), T.int64(14), T.int64(4)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        conv2d_NCHWc = T.alloc_buffer((T.int64(1), T.int64(48), T.int64(14), T.int64(14), T.int64(4)))
        for n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused in T.parallel(T.int64(168), annotations={"pragma_auto_unroll_max_step": 512, "pragma_unroll_explicit": 1}):
            for n_2_init, oc_chunk_2_init, oh_2_init, ow_2_init, oc_block_2_init, n_3_init, oc_chunk_3_init, oh_3_init, ow_3_init in T.grid(T.int64(1), T.int64(2), T.int64(1), T.int64(7), T.int64(1), T.int64(1), T.int64(2), T.int64(2), T.int64(2)):
                for oc_block_3_fused_init in T.vectorized(T.int64(2)):
                    with T.block("conv2d_NCHWc_init"):
                        v_n = T.axis.spatial(T.int64(1), n_2_init + n_3_init)
                        v_oc_chunk = T.axis.spatial(T.int64(48), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused // T.int64(56) * T.int64(16) + n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused % T.int64(4) * T.int64(4) + oc_chunk_2_init * T.int64(2) + oc_chunk_3_init)
                        v_oh = T.axis.spatial(T.int64(14), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused % T.int64(56) // T.int64(8) * T.int64(2) + oh_2_init * T.int64(2) + oh_3_init)
                        v_ow = T.axis.spatial(T.int64(14), ow_2_init * T.int64(2) + ow_3_init)
                        v_oc_block = T.axis.spatial(T.int64(4), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused % T.int64(8) // T.int64(4) * T.int64(2) + oc_block_2_init * T.int64(2) + oc_block_3_fused_init)
                        T.reads()
                        T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                        T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                        conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = T.float32(0)
            for ic_0, kh_0, kw_0, n_2, oc_chunk_2, oh_2, ow_2, oc_block_2, ic_1, kh_1, kw_1, n_3, oc_chunk_3, oh_3, ow_3 in T.grid(T.int64(48), T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(1), T.int64(7), T.int64(1), T.int64(43), T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(2), T.int64(2)):
                for oc_block_3_fused in T.vectorized(T.int64(2)):
                    with T.block("conv2d_NCHWc_update"):
                        v_n = T.axis.spatial(T.int64(1), n_2 + n_3)
                        v_oc_chunk = T.axis.spatial(T.int64(48), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused // T.int64(56) * T.int64(16) + n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused % T.int64(4) * T.int64(4) + oc_chunk_2 * T.int64(2) + oc_chunk_3)
                        v_oh = T.axis.spatial(T.int64(14), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused % T.int64(56) // T.int64(8) * T.int64(2) + oh_2 * T.int64(2) + oh_3)
                        v_ow = T.axis.spatial(T.int64(14), ow_2 * T.int64(2) + ow_3)
                        v_oc_block = T.axis.spatial(T.int64(4), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused % T.int64(8) // T.int64(4) * T.int64(2) + oc_block_2 * T.int64(2) + oc_block_3_fused)
                        v_ic = T.axis.reduce(T.int64(2064), ic_0 * T.int64(43) + ic_1)
                        v_kh = T.axis.reduce(T.int64(1), kh_0 + kh_1)
                        v_kw = T.axis.reduce(T.int64(1), kw_0 + kw_1)
                        T.reads(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block], p0[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)], p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block])
                        T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                        T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                        conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] + p0[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)] * p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block]
            for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(4), T.int64(2), T.int64(14)):
                for ax4_fused in T.vectorized(T.int64(2)):
                    with T.block("T_relu"):
                        v_ax0 = T.axis.spatial(T.int64(1), ax0)
                        v_ax1 = T.axis.spatial(T.int64(48), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused // T.int64(56) * T.int64(16) + n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused % T.int64(4) * T.int64(4) + ax1)
                        v_ax2 = T.axis.spatial(T.int64(14), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused % T.int64(56) // T.int64(8) * T.int64(2) + ax2)
                        v_ax3 = T.axis.spatial(T.int64(14), ax3)
                        v_ax4 = T.axis.spatial(T.int64(4), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused % T.int64(8) // T.int64(4) * T.int64(2) + ax4_fused)
                        T.reads(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4])
                        T.writes(T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                        T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.max(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] + p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4], T.float32(0))
b0 = sch.get_block(name="conv2d_NCHWc", func_name="main")
b1 = sch.get_block(name="T_add", func_name="main")
b2 = sch.get_block(name="root", func_name="main")
sch.compute_inline(block=b1)
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.tiling_structure", ann_val="SSRSRS")
l3, l4, l5, l6, l7, l8, l9, l10 = sch.get_loops(block=b0)
v11, v12, v13, v14 = sch.sample_perfect_tile(loop=l3, n=4, max_innermost_factor=64, decision=[1, 1, 1, 1])
l15, l16, l17, l18 = sch.split(loop=l3, factors=[v11, v12, v13, v14], preserve_unit_iters=True)
v19, v20, v21, v22 = sch.sample_perfect_tile(loop=l4, n=4, max_innermost_factor=64, decision=[3, 4, 2, 2])
l23, l24, l25, l26 = sch.split(loop=l4, factors=[v19, v20, v21, v22], preserve_unit_iters=True)
v27, v28, v29, v30 = sch.sample_perfect_tile(loop=l5, n=4, max_innermost_factor=64, decision=[7, 1, 1, 2])
l31, l32, l33, l34 = sch.split(loop=l5, factors=[v27, v28, v29, v30], preserve_unit_iters=True)
v35, v36, v37, v38 = sch.sample_perfect_tile(loop=l6, n=4, max_innermost_factor=64, decision=[1, 1, 7, 2])
l39, l40, l41, l42 = sch.split(loop=l6, factors=[v35, v36, v37, v38], preserve_unit_iters=True)
v43, v44, v45, v46 = sch.sample_perfect_tile(loop=l7, n=4, max_innermost_factor=64, decision=[2, 1, 1, 2])
l47, l48, l49, l50 = sch.split(loop=l7, factors=[v43, v44, v45, v46], preserve_unit_iters=True)
v51, v52 = sch.sample_perfect_tile(loop=l8, n=2, max_innermost_factor=64, decision=[48, 43])
l53, l54 = sch.split(loop=l8, factors=[v51, v52], preserve_unit_iters=True)
v55, v56 = sch.sample_perfect_tile(loop=l9, n=2, max_innermost_factor=64, decision=[1, 1])
l57, l58 = sch.split(loop=l9, factors=[v55, v56], preserve_unit_iters=True)
v59, v60 = sch.sample_perfect_tile(loop=l10, n=2, max_innermost_factor=64, decision=[1, 1])
l61, l62 = sch.split(loop=l10, factors=[v59, v60], preserve_unit_iters=True)
sch.reorder(l15, l23, l31, l39, l47, l16, l24, l32, l40, l48, l53, l57, l61, l17, l25, l33, l41, l49, l54, l58, l62, l18, l26, l34, l42, l50)
b63, = sch.get_consumers(block=b0)
sch.reverse_compute_at(block=b63, loop=l48, preserve_unit_loops=True, index=-1)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.vectorize", ann_val=64)
v64 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.unroll_explicit", ann_val=v64)
sch.enter_postproc()
b65 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b65, ann_key="meta_schedule.parallel")
sch.unannotate(block_or_loop=b65, ann_key="meta_schedule.vectorize")
sch.unannotate(block_or_loop=b65, ann_key="meta_schedule.unroll_explicit")
b66, b67 = sch.get_child_blocks(b65)
l68, l69, l70, l71, l72, l73, l74, l75, l76, l77, l78, l79, l80, l81, l82, l83, l84, l85, l86, l87, l88, l89, l90, l91, l92, l93 = sch.get_loops(block=b66)
l94 = sch.fuse(l68, l69, l70, l71, l72, l73, l74, l75, l76, l77, preserve_unit_iters=True)
sch.parallel(loop=l94)
l95 = sch.fuse(l93, preserve_unit_iters=True)
sch.vectorize(loop=l95)
sch.annotate(block_or_loop=l94, ann_key="pragma_auto_unroll_max_step", ann_val=512)
sch.annotate(block_or_loop=l94, ann_key="pragma_unroll_explicit", ann_val=1)
l96, l97, l98, l99, l100, l101 = sch.get_loops(block=b67)
l102 = sch.fuse(l101, preserve_unit_iters=True)
sch.vectorize(loop=l102)
b103 = sch.get_block(name="conv2d_NCHWc", func_name="main")
l104, l105, l106, l107, l108, l109, l110, l111, l112, l113, l114, l115, l116, l117, l118, l119, l120 = sch.get_loops(block=b103)
b121 = sch.decompose_reduction(block=b103, loop=l105)
2024-04-29 05:04:48 [INFO] [task_scheduler.cc:131] [Task #25: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_24] Trial #37: GFLOPs: 102.0704. Time: 1522.6760 us. Best GFLOPs: 127.4368
2024-04-29 05:04:48 [INFO] [task_scheduler.cc:131] [Task #25: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_24] Trial #38: GFLOPs: 31.3215. Time: 4962.0941 us. Best GFLOPs: 127.4368
2024-04-29 05:04:48 [INFO] [task_scheduler.cc:131] [Task #25: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_24] Trial #39: GFLOPs: 18.3345. Time: 8476.9406 us. Best GFLOPs: 127.4368
2024-04-29 05:04:48 [INFO] [task_scheduler.cc:131] [Task #25: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_24] Trial #40: GFLOPs: 43.3487. Time: 3585.3484 us. Best GFLOPs: 127.4368
2024-04-29 05:04:48 [INFO] [task_scheduler.cc:131] [Task #25: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_24] Trial #41: GFLOPs: 22.3814. Time: 6944.1553 us. Best GFLOPs: 127.4368
2024-04-29 05:04:48 [INFO] [task_scheduler.cc:131] [Task #25: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_24] Trial #42: GFLOPs: 16.3623. Time: 9498.6811 us. Best GFLOPs: 127.4368
2024-04-29 05:04:48 [INFO] [task_scheduler.cc:131] [Task #25: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_24] Trial #43: GFLOPs: 91.7352. Time: 1694.2254 us. Best GFLOPs: 127.4368
2024-04-29 05:04:48 [INFO] [task_scheduler.cc:131] [Task #25: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_24] Trial #44: GFLOPs: 59.1161. Time: 2629.0675 us. Best GFLOPs: 127.4368
2024-04-29 05:04:48 [INFO] [task_scheduler.cc:121] [Task #25: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_24] Trial #45: Error in building:
LocalBuilder: Timeout, killed after 30.0 seconds
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(516), T.int64(14), T.int64(14), T.int64(4)), "float32"), p1: T.Buffer((T.int64(48), T.int64(516), T.int64(1), T.int64(1), T.int64(4), T.int64(4)), "float32"), p2: T.Buffer((T.int64(1), T.int64(48), T.int64(1), T.int64(1), T.int64(4)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(48), T.int64(14), T.int64(14), T.int64(4)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        conv2d_NCHWc = T.alloc_buffer((T.int64(1), T.int64(48), T.int64(14), T.int64(14), T.int64(4)))
        for n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_fused in T.parallel(T.int64(16), annotations={"pragma_auto_unroll_max_step": 512, "pragma_unroll_explicit": 1}):
            for n_1, oc_chunk_1, oh_1, ow_1, oc_block_1 in T.grid(T.int64(1), T.int64(3), T.int64(14), T.int64(7), T.int64(1)):
                for n_2_init, oc_chunk_2_init, oh_2_init, ow_2_init, oc_block_2_init, n_3_init, oc_chunk_3_init, oh_3_init, ow_3_init, oc_block_3_init in T.grid(T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(1), T.int64(2), T.int64(1), T.int64(2), T.int64(1)):
                    with T.block("conv2d_NCHWc_init"):
                        v_n = T.axis.spatial(T.int64(1), n_1 + n_2_init + n_3_init)
                        v_oc_chunk = T.axis.spatial(T.int64(48), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_fused // T.int64(2) * T.int64(6) + oc_chunk_1 * T.int64(2) + oc_chunk_2_init * T.int64(2) + oc_chunk_3_init)
                        v_oh = T.axis.spatial(T.int64(14), oh_1 + oh_2_init + oh_3_init)
                        v_ow = T.axis.spatial(T.int64(14), ow_1 * T.int64(2) + ow_2_init * T.int64(2) + ow_3_init)
                        v_oc_block = T.axis.spatial(T.int64(4), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_fused % T.int64(2) * T.int64(2) + oc_block_1 * T.int64(2) + oc_block_2_init + oc_block_3_init)
                        T.reads()
                        T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                        T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                        conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = T.float32(0)
                for ic_0, kh_0, kw_0, n_2, oc_chunk_2, oh_2, ow_2, oc_block_2, ic_1, kh_1, kw_1, n_3, oc_chunk_3, oh_3, ow_3, oc_block_3 in T.grid(T.int64(43), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(48), T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(1), T.int64(2), T.int64(1)):
                    with T.block("conv2d_NCHWc_update"):
                        v_n = T.axis.spatial(T.int64(1), n_1 + n_2 + n_3)
                        v_oc_chunk = T.axis.spatial(T.int64(48), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_fused // T.int64(2) * T.int64(6) + oc_chunk_1 * T.int64(2) + oc_chunk_2 * T.int64(2) + oc_chunk_3)
                        v_oh = T.axis.spatial(T.int64(14), oh_1 + oh_2 + oh_3)
                        v_ow = T.axis.spatial(T.int64(14), ow_1 * T.int64(2) + ow_2 * T.int64(2) + ow_3)
                        v_oc_block = T.axis.spatial(T.int64(4), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_fused % T.int64(2) * T.int64(2) + oc_block_1 * T.int64(2) + oc_block_2 + oc_block_3)
                        v_ic = T.axis.reduce(T.int64(2064), ic_0 * T.int64(48) + ic_1)
                        v_kh = T.axis.reduce(T.int64(1), kh_0 + kh_1)
                        v_kw = T.axis.reduce(T.int64(1), kw_0 + kw_1)
                        T.reads(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block], p0[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)], p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block])
                        T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                        T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                        conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] + p0[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)] * p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block]
            for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(6), T.int64(14), T.int64(14)):
                for ax4_fused in T.vectorized(T.int64(2)):
                    with T.block("T_relu"):
                        v_ax0 = T.axis.spatial(T.int64(1), ax0)
                        v_ax1 = T.axis.spatial(T.int64(48), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_fused // T.int64(2) * T.int64(6) + ax1)
                        v_ax2, v_ax3 = T.axis.remap("SS", [ax2, ax3])
                        v_ax4 = T.axis.spatial(T.int64(4), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_fused % T.int64(2) * T.int64(2) + ax4_fused)
                        T.reads(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4])
                        T.writes(T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                        T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.max(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] + p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4], T.float32(0))
b0 = sch.get_block(name="conv2d_NCHWc", func_name="main")
b1 = sch.get_block(name="T_add", func_name="main")
b2 = sch.get_block(name="root", func_name="main")
sch.compute_inline(block=b1)
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.tiling_structure", ann_val="SSRSRS")
l3, l4, l5, l6, l7, l8, l9, l10 = sch.get_loops(block=b0)
v11, v12, v13, v14 = sch.sample_perfect_tile(loop=l3, n=4, max_innermost_factor=64, decision=[1, 1, 1, 1])
l15, l16, l17, l18 = sch.split(loop=l3, factors=[v11, v12, v13, v14], preserve_unit_iters=True)
v19, v20, v21, v22 = sch.sample_perfect_tile(loop=l4, n=4, max_innermost_factor=64, decision=[8, 3, 1, 2])
l23, l24, l25, l26 = sch.split(loop=l4, factors=[v19, v20, v21, v22], preserve_unit_iters=True)
v27, v28, v29, v30 = sch.sample_perfect_tile(loop=l5, n=4, max_innermost_factor=64, decision=[1, 14, 1, 1])
l31, l32, l33, l34 = sch.split(loop=l5, factors=[v27, v28, v29, v30], preserve_unit_iters=True)
v35, v36, v37, v38 = sch.sample_perfect_tile(loop=l6, n=4, max_innermost_factor=64, decision=[1, 7, 1, 2])
l39, l40, l41, l42 = sch.split(loop=l6, factors=[v35, v36, v37, v38], preserve_unit_iters=True)
v43, v44, v45, v46 = sch.sample_perfect_tile(loop=l7, n=4, max_innermost_factor=64, decision=[2, 1, 2, 1])
l47, l48, l49, l50 = sch.split(loop=l7, factors=[v43, v44, v45, v46], preserve_unit_iters=True)
v51, v52 = sch.sample_perfect_tile(loop=l8, n=2, max_innermost_factor=64, decision=[43, 48])
l53, l54 = sch.split(loop=l8, factors=[v51, v52], preserve_unit_iters=True)
v55, v56 = sch.sample_perfect_tile(loop=l9, n=2, max_innermost_factor=64, decision=[1, 1])
l57, l58 = sch.split(loop=l9, factors=[v55, v56], preserve_unit_iters=True)
v59, v60 = sch.sample_perfect_tile(loop=l10, n=2, max_innermost_factor=64, decision=[1, 1])
l61, l62 = sch.split(loop=l10, factors=[v59, v60], preserve_unit_iters=True)
sch.reorder(l15, l23, l31, l39, l47, l16, l24, l32, l40, l48, l53, l57, l61, l17, l25, l33, l41, l49, l54, l58, l62, l18, l26, l34, l42, l50)
b63, = sch.get_consumers(block=b0)
sch.reverse_compute_at(block=b63, loop=l47, preserve_unit_loops=True, index=-1)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.vectorize", ann_val=64)
v64 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.unroll_explicit", ann_val=v64)
sch.enter_postproc()
b65 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b65, ann_key="meta_schedule.parallel")
sch.unannotate(block_or_loop=b65, ann_key="meta_schedule.vectorize")
sch.unannotate(block_or_loop=b65, ann_key="meta_schedule.unroll_explicit")
b66, b67 = sch.get_child_blocks(b65)
l68, l69, l70, l71, l72, l73, l74, l75, l76, l77, l78, l79, l80, l81, l82, l83, l84, l85, l86, l87, l88, l89, l90, l91, l92, l93 = sch.get_loops(block=b66)
l94 = sch.fuse(l68, l69, l70, l71, l72, preserve_unit_iters=True)
sch.parallel(loop=l94)
sch.annotate(block_or_loop=l94, ann_key="pragma_auto_unroll_max_step", ann_val=512)
sch.annotate(block_or_loop=l94, ann_key="pragma_unroll_explicit", ann_val=1)
l95, l96, l97, l98, l99, l100 = sch.get_loops(block=b67)
l101 = sch.fuse(l100, preserve_unit_iters=True)
sch.vectorize(loop=l101)
b102 = sch.get_block(name="conv2d_NCHWc", func_name="main")
l103, l104, l105, l106, l107, l108, l109, l110, l111, l112, l113, l114, l115, l116, l117, l118, l119, l120, l121, l122, l123, l124 = sch.get_loops(block=b102)
b125 = sch.decompose_reduction(block=b102, loop=l109)
2024-04-29 05:04:48 [INFO] [task_scheduler.cc:131] [Task #25: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_24] Trial #46: GFLOPs: 153.8364. Time: 1010.2952 us. Best GFLOPs: 153.8364
2024-04-29 05:04:48 [INFO] [task_scheduler.cc:131] [Task #25: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_24] Trial #47: GFLOPs: 63.5301. Time: 2446.4013 us. Best GFLOPs: 153.8364
2024-04-29 05:04:48 [INFO] [task_scheduler.cc:131] [Task #25: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_24] Trial #48: GFLOPs: 48.2298. Time: 3222.4891 us. Best GFLOPs: 153.8364
2024-04-29 05:04:48 [INFO] [task_scheduler.cc:131] [Task #25: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_24] Trial #49: GFLOPs: 14.8731. Time: 10449.7322 us. Best GFLOPs: 153.8364
2024-04-29 05:04:48 [INFO] [task_scheduler.cc:131] [Task #25: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_24] Trial #50: GFLOPs: 90.0613. Time: 1725.7162 us. Best GFLOPs: 153.8364
2024-04-29 05:04:48 [INFO] [task_scheduler.cc:131] [Task #25: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_24] Trial #51: GFLOPs: 59.9147. Time: 2594.0254 us. Best GFLOPs: 153.8364
2024-04-29 05:04:48 [INFO] [task_scheduler.cc:131] [Task #25: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_24] Trial #52: GFLOPs: 12.0824. Time: 12863.3335 us. Best GFLOPs: 153.8364
2024-04-29 05:04:48 [INFO] [task_scheduler.cc:131] [Task #25: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_24] Trial #53: GFLOPs: 20.9065. Time: 7434.0435 us. Best GFLOPs: 153.8364
2024-04-29 05:04:48 [INFO] [task_scheduler.cc:131] [Task #25: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_24] Trial #54: GFLOPs: 94.7072. Time: 1641.0588 us. Best GFLOPs: 153.8364
2024-04-29 05:04:48 [INFO] [task_scheduler.cc:131] [Task #25: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_24] Trial #55: GFLOPs: 24.6784. Time: 6297.8274 us. Best GFLOPs: 153.8364
2024-04-29 05:04:48 [INFO] [task_scheduler.cc:131] [Task #25: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_24] Trial #56: GFLOPs: 21.3786. Time: 7269.8849 us. Best GFLOPs: 153.8364
2024-04-29 05:04:48 [INFO] [task_scheduler.cc:131] [Task #25: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_24] Trial #57: GFLOPs: 46.3705. Time: 3351.7069 us. Best GFLOPs: 153.8364
2024-04-29 05:04:48 [INFO] [task_scheduler.cc:131] [Task #25: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_24] Trial #58: GFLOPs: 10.2740. Time: 15127.4579 us. Best GFLOPs: 153.8364
2024-04-29 05:04:48 [INFO] [task_scheduler.cc:131] [Task #25: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_24] Trial #59: GFLOPs: 94.5149. Time: 1644.3986 us. Best GFLOPs: 153.8364
2024-04-29 05:04:48 [INFO] [task_scheduler.cc:131] [Task #25: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_24] Trial #60: GFLOPs: 3.0449. Time: 51043.5067 us. Best GFLOPs: 153.8364
2024-04-29 05:04:48 [INFO] [task_scheduler.cc:131] [Task #25: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_24] Trial #61: GFLOPs: 77.5840. Time: 2003.2498 us. Best GFLOPs: 153.8364
2024-04-29 05:04:48 [INFO] [task_scheduler.cc:131] [Task #25: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_24] Trial #62: GFLOPs: 25.1676. Time: 6175.4168 us. Best GFLOPs: 153.8364
2024-04-29 05:04:48 [INFO] [task_scheduler.cc:131] [Task #25: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_24] Trial #63: GFLOPs: 146.5717. Time: 1060.3698 us. Best GFLOPs: 153.8364
2024-04-29 05:04:48 [INFO] [task_scheduler.cc:131] [Task #25: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_24] Trial #64: GFLOPs: 24.9235. Time: 6235.8783 us. Best GFLOPs: 153.8364
2024-04-29 06:27:42 [INFO] [evolutionary_search.cc:713] Generating candidates......
2024-04-29 06:27:42 [INFO] [evolutionary_search.cc:715] Picked top 62 candidate(s) from database
2024-04-29 06:27:44 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x123cc7f8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x5c67878)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0xa2cbed8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x5b5a3f8)]: 0 failure(s)
2024-04-29 06:27:44 [INFO] [evolutionary_search.cc:723] Sampled 450 candidate(s)
2024-04-29 06:27:50 [INFO] [evolutionary_search.cc:621] Evolve iter #0 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x123cc7f8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x5c67878)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0xa2cbed8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x5b5a3f8)]: 0 failure(s)
2024-04-29 06:27:55 [INFO] [evolutionary_search.cc:621] Evolve iter #1 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x123cc7f8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x5c67878)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0xa2cbed8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x5b5a3f8)]: 0 failure(s)
2024-04-29 06:28:00 [INFO] [evolutionary_search.cc:621] Evolve iter #2 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x123cc7f8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x5c67878)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0xa2cbed8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x5b5a3f8)]: 0 failure(s)
2024-04-29 06:28:05 [INFO] [evolutionary_search.cc:621] Evolve iter #3 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x123cc7f8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x5c67878)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0xa2cbed8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x5b5a3f8)]: 0 failure(s)
2024-04-29 06:28:09 [INFO] [evolutionary_search.cc:649] Scores of the best 64 candidates:
[1 : 16]:	0.9749  0.9393  0.9338  0.9338  0.9218  0.9214  0.9132  0.9127  0.9029  0.9029  0.9009  0.9009  0.8932  0.8811  0.8809  0.8796
[17 : 32]:	0.8723  0.8638  0.8629  0.8551  0.8455  0.8449  0.8449  0.8434  0.8420  0.8376  0.8325  0.8313  0.8313  0.8299  0.8299  0.8286
[33 : 48]:	0.8256  0.8207  0.8200  0.8192  0.8191  0.8153  0.8138  0.8125  0.8101  0.8090  0.8086  0.8081  0.8059  0.8029  0.8027  0.8017
[49 : 64]:	0.8007  0.8007  0.7978  0.7958  0.7958  0.7932  0.7918  0.7902  0.7901  0.7881  0.7874  0.7870  0.7853  0.7839  0.7832  0.7825
2024-04-29 06:28:09 [INFO] [evolutionary_search.cc:727] Got 64 candidate(s) with evolutionary search
2024-04-29 06:28:09 [INFO] [evolutionary_search.cc:730] Sending 64 candidates(s) for measurement
2024-04-29 06:29:42 [INFO] [task_scheduler.cc:131] [Task #25: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_24] Trial #65: GFLOPs: 232.9655. Time: 667.1382 us. Best GFLOPs: 232.9655
2024-04-29 06:29:42 [INFO] [task_scheduler.cc:131] [Task #25: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_24] Trial #66: GFLOPs: 162.9235. Time: 953.9459 us. Best GFLOPs: 232.9655
2024-04-29 06:29:42 [INFO] [task_scheduler.cc:131] [Task #25: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_24] Trial #67: GFLOPs: 132.5533. Time: 1172.5104 us. Best GFLOPs: 232.9655
2024-04-29 06:29:42 [INFO] [task_scheduler.cc:131] [Task #25: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_24] Trial #68: GFLOPs: 162.4928. Time: 956.4741 us. Best GFLOPs: 232.9655
2024-04-29 06:29:42 [INFO] [task_scheduler.cc:131] [Task #25: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_24] Trial #69: GFLOPs: 214.7919. Time: 723.5847 us. Best GFLOPs: 232.9655
2024-04-29 06:29:42 [INFO] [task_scheduler.cc:131] [Task #25: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_24] Trial #70: GFLOPs: 197.3293. Time: 787.6184 us. Best GFLOPs: 232.9655
2024-04-29 06:29:42 [INFO] [task_scheduler.cc:131] [Task #25: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_24] Trial #71: GFLOPs: 175.2804. Time: 886.6945 us. Best GFLOPs: 232.9655
2024-04-29 06:29:42 [INFO] [task_scheduler.cc:131] [Task #25: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_24] Trial #72: GFLOPs: 155.2143. Time: 1001.3266 us. Best GFLOPs: 232.9655
2024-04-29 06:29:42 [INFO] [task_scheduler.cc:131] [Task #25: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_24] Trial #73: GFLOPs: 155.9358. Time: 996.6935 us. Best GFLOPs: 232.9655
2024-04-29 06:29:42 [INFO] [task_scheduler.cc:131] [Task #25: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_24] Trial #74: GFLOPs: 146.1496. Time: 1063.4322 us. Best GFLOPs: 232.9655
2024-04-29 06:29:42 [INFO] [task_scheduler.cc:131] [Task #25: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_24] Trial #75: GFLOPs: 146.6643. Time: 1059.6999 us. Best GFLOPs: 232.9655
2024-04-29 06:29:42 [INFO] [task_scheduler.cc:131] [Task #25: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_24] Trial #76: GFLOPs: 154.7111. Time: 1004.5832 us. Best GFLOPs: 232.9655
2024-04-29 06:29:42 [INFO] [task_scheduler.cc:131] [Task #25: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_24] Trial #77: GFLOPs: 154.6705. Time: 1004.8471 us. Best GFLOPs: 232.9655
2024-04-29 06:29:42 [INFO] [task_scheduler.cc:131] [Task #25: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_24] Trial #78: GFLOPs: 168.8135. Time: 920.6618 us. Best GFLOPs: 232.9655
2024-04-29 06:29:42 [INFO] [task_scheduler.cc:131] [Task #25: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_24] Trial #79: GFLOPs: 152.2252. Time: 1020.9886 us. Best GFLOPs: 232.9655
2024-04-29 06:29:42 [INFO] [task_scheduler.cc:131] [Task #25: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_24] Trial #80: GFLOPs: 154.2975. Time: 1007.2761 us. Best GFLOPs: 232.9655
2024-04-29 06:29:42 [INFO] [task_scheduler.cc:131] [Task #25: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_24] Trial #81: GFLOPs: 271.7892. Time: 571.8408 us. Best GFLOPs: 271.7892
2024-04-29 06:29:42 [INFO] [task_scheduler.cc:131] [Task #25: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_24] Trial #82: GFLOPs: 131.4642. Time: 1182.2245 us. Best GFLOPs: 271.7892
2024-04-29 06:29:42 [INFO] [task_scheduler.cc:131] [Task #25: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_24] Trial #83: GFLOPs: 319.7955. Time: 485.9986 us. Best GFLOPs: 319.7955
2024-04-29 06:29:42 [INFO] [task_scheduler.cc:131] [Task #25: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_24] Trial #84: GFLOPs: 141.2504. Time: 1100.3165 us. Best GFLOPs: 319.7955
2024-04-29 06:29:42 [INFO] [task_scheduler.cc:131] [Task #25: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_24] Trial #85: GFLOPs: 180.3050. Time: 861.9848 us. Best GFLOPs: 319.7955
2024-04-29 06:29:42 [INFO] [task_scheduler.cc:131] [Task #25: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_24] Trial #86: GFLOPs: 202.7486. Time: 766.5657 us. Best GFLOPs: 319.7955
2024-04-29 06:29:42 [INFO] [task_scheduler.cc:131] [Task #25: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_24] Trial #87: GFLOPs: 163.0744. Time: 953.0627 us. Best GFLOPs: 319.7955
2024-04-29 06:29:42 [INFO] [task_scheduler.cc:131] [Task #25: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_24] Trial #88: GFLOPs: 146.8484. Time: 1058.3712 us. Best GFLOPs: 319.7955
2024-04-29 06:29:42 [INFO] [task_scheduler.cc:131] [Task #25: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_24] Trial #89: GFLOPs: 154.7818. Time: 1004.1242 us. Best GFLOPs: 319.7955
2024-04-29 06:29:42 [INFO] [task_scheduler.cc:131] [Task #25: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_24] Trial #90: GFLOPs: 129.0019. Time: 1204.7899 us. Best GFLOPs: 319.7955
2024-04-29 06:29:42 [INFO] [task_scheduler.cc:131] [Task #25: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_24] Trial #91: GFLOPs: 146.6177. Time: 1060.0371 us. Best GFLOPs: 319.7955
2024-04-29 06:29:42 [INFO] [task_scheduler.cc:131] [Task #25: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_24] Trial #92: GFLOPs: 57.5300. Time: 2701.5505 us. Best GFLOPs: 319.7955
2024-04-29 06:29:42 [INFO] [task_scheduler.cc:131] [Task #25: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_24] Trial #93: GFLOPs: 56.5380. Time: 2748.9519 us. Best GFLOPs: 319.7955
2024-04-29 06:29:42 [INFO] [task_scheduler.cc:131] [Task #25: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_24] Trial #94: GFLOPs: 41.8787. Time: 3711.1997 us. Best GFLOPs: 319.7955
2024-04-29 06:29:42 [INFO] [task_scheduler.cc:131] [Task #25: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_24] Trial #95: GFLOPs: 41.9494. Time: 3704.9440 us. Best GFLOPs: 319.7955
2024-04-29 06:29:42 [INFO] [task_scheduler.cc:131] [Task #25: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_24] Trial #96: GFLOPs: 56.9808. Time: 2727.5873 us. Best GFLOPs: 319.7955
2024-04-29 06:29:42 [INFO] [task_scheduler.cc:131] [Task #25: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_24] Trial #97: GFLOPs: 208.2838. Time: 746.1942 us. Best GFLOPs: 319.7955
2024-04-29 06:29:42 [INFO] [task_scheduler.cc:131] [Task #25: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_24] Trial #98: GFLOPs: 208.2377. Time: 746.3594 us. Best GFLOPs: 319.7955
2024-04-29 06:29:42 [INFO] [task_scheduler.cc:131] [Task #25: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_24] Trial #99: GFLOPs: 95.5403. Time: 1626.7491 us. Best GFLOPs: 319.7955
2024-04-29 06:29:42 [INFO] [task_scheduler.cc:131] [Task #25: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_24] Trial #100: GFLOPs: 70.7745. Time: 2195.9923 us. Best GFLOPs: 319.7955
2024-04-29 06:29:42 [INFO] [task_scheduler.cc:131] [Task #25: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_24] Trial #101: GFLOPs: 92.6756. Time: 1677.0345 us. Best GFLOPs: 319.7955
2024-04-29 06:29:42 [INFO] [task_scheduler.cc:131] [Task #25: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_24] Trial #102: GFLOPs: 172.1228. Time: 902.9610 us. Best GFLOPs: 319.7955
2024-04-29 06:29:42 [INFO] [task_scheduler.cc:131] [Task #25: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_24] Trial #103: GFLOPs: 158.0045. Time: 983.6437 us. Best GFLOPs: 319.7955
2024-04-29 06:29:42 [INFO] [task_scheduler.cc:131] [Task #25: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_24] Trial #104: GFLOPs: 283.4688. Time: 548.2795 us. Best GFLOPs: 319.7955
2024-04-29 06:29:42 [INFO] [task_scheduler.cc:131] [Task #25: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_24] Trial #105: GFLOPs: 85.0347. Time: 1827.7255 us. Best GFLOPs: 319.7955
2024-04-29 06:29:42 [INFO] [task_scheduler.cc:131] [Task #25: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_24] Trial #106: GFLOPs: 267.9399. Time: 580.0561 us. Best GFLOPs: 319.7955
2024-04-29 06:29:42 [INFO] [task_scheduler.cc:131] [Task #25: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_24] Trial #107: GFLOPs: 131.9571. Time: 1177.8081 us. Best GFLOPs: 319.7955
2024-04-29 06:29:42 [INFO] [task_scheduler.cc:131] [Task #25: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_24] Trial #108: GFLOPs: 63.2732. Time: 2456.3362 us. Best GFLOPs: 319.7955
2024-04-29 06:29:42 [INFO] [task_scheduler.cc:131] [Task #25: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_24] Trial #109: GFLOPs: 264.4998. Time: 587.6002 us. Best GFLOPs: 319.7955
2024-04-29 06:29:42 [INFO] [task_scheduler.cc:131] [Task #25: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_24] Trial #110: GFLOPs: 101.3399. Time: 1533.6527 us. Best GFLOPs: 319.7955
2024-04-29 06:29:42 [INFO] [task_scheduler.cc:131] [Task #25: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_24] Trial #111: GFLOPs: 142.7743. Time: 1088.5723 us. Best GFLOPs: 319.7955
2024-04-29 06:29:42 [INFO] [task_scheduler.cc:131] [Task #25: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_24] Trial #112: GFLOPs: 75.3150. Time: 2063.6020 us. Best GFLOPs: 319.7955
2024-04-29 06:29:42 [INFO] [task_scheduler.cc:131] [Task #25: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_24] Trial #113: GFLOPs: 81.5841. Time: 1905.0295 us. Best GFLOPs: 319.7955
2024-04-29 06:29:42 [INFO] [task_scheduler.cc:131] [Task #25: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_24] Trial #114: GFLOPs: 116.5532. Time: 1333.4695 us. Best GFLOPs: 319.7955
2024-04-29 06:29:42 [INFO] [task_scheduler.cc:131] [Task #25: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_24] Trial #115: GFLOPs: 266.8890. Time: 582.3401 us. Best GFLOPs: 319.7955
2024-04-29 06:29:42 [INFO] [task_scheduler.cc:131] [Task #25: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_24] Trial #116: GFLOPs: 71.3378. Time: 2178.6515 us. Best GFLOPs: 319.7955
2024-04-29 06:29:42 [INFO] [task_scheduler.cc:131] [Task #25: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_24] Trial #117: GFLOPs: 81.0574. Time: 1917.4088 us. Best GFLOPs: 319.7955
2024-04-29 06:29:42 [INFO] [task_scheduler.cc:131] [Task #25: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_24] Trial #118: GFLOPs: 151.8868. Time: 1023.2634 us. Best GFLOPs: 319.7955
2024-04-29 06:29:42 [INFO] [task_scheduler.cc:131] [Task #25: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_24] Trial #119: GFLOPs: 218.1015. Time: 712.6047 us. Best GFLOPs: 319.7955
2024-04-29 06:29:42 [INFO] [task_scheduler.cc:131] [Task #25: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_24] Trial #120: GFLOPs: 143.9473. Time: 1079.7022 us. Best GFLOPs: 319.7955
2024-04-29 06:29:42 [INFO] [task_scheduler.cc:131] [Task #25: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_24] Trial #121: GFLOPs: 136.7992. Time: 1136.1193 us. Best GFLOPs: 319.7955
2024-04-29 06:29:42 [INFO] [task_scheduler.cc:131] [Task #25: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_24] Trial #122: GFLOPs: 127.8059. Time: 1216.0641 us. Best GFLOPs: 319.7955
2024-04-29 06:29:42 [INFO] [task_scheduler.cc:131] [Task #25: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_24] Trial #123: GFLOPs: 150.3306. Time: 1033.8559 us. Best GFLOPs: 319.7955
2024-04-29 06:29:42 [INFO] [task_scheduler.cc:131] [Task #25: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_24] Trial #124: GFLOPs: 183.5899. Time: 846.5618 us. Best GFLOPs: 319.7955
2024-04-29 06:29:42 [INFO] [task_scheduler.cc:131] [Task #25: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_24] Trial #125: GFLOPs: 84.6933. Time: 1835.0938 us. Best GFLOPs: 319.7955
2024-04-29 06:29:42 [INFO] [task_scheduler.cc:131] [Task #25: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_24] Trial #126: GFLOPs: 47.4480. Time: 3275.5865 us. Best GFLOPs: 319.7955
2024-04-29 06:29:42 [INFO] [task_scheduler.cc:131] [Task #25: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_24] Trial #127: GFLOPs: 115.0021. Time: 1351.4553 us. Best GFLOPs: 319.7955
2024-04-29 06:29:42 [INFO] [task_scheduler.cc:131] [Task #25: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_24] Trial #128: GFLOPs: 98.4045. Time: 1579.4007 us. Best GFLOPs: 319.7955
