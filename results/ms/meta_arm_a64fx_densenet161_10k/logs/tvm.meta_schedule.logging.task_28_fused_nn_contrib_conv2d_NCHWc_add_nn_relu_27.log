2024-04-29 02:30:09 [INFO] [task_scheduler.cc:160] Initializing Task #28: "fused_nn_contrib_conv2d_NCHWc_add_nn_relu_27"
2024-04-29 02:30:09 [INFO] [task_scheduler.cc:35] 
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(480), T.int64(14), T.int64(14), T.int64(4)), "float32"), p1: T.Buffer((T.int64(48), T.int64(480), T.int64(1), T.int64(1), T.int64(4), T.int64(4)), "float32"), p2: T.Buffer((T.int64(1), T.int64(48), T.int64(1), T.int64(1), T.int64(4)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(48), T.int64(14), T.int64(14), T.int64(4)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        conv2d_NCHWc = T.alloc_buffer((T.int64(1), T.int64(48), T.int64(14), T.int64(14), T.int64(4)))
        T_add = T.alloc_buffer((T.int64(1), T.int64(48), T.int64(14), T.int64(14), T.int64(4)))
        for n, oc_chunk, oh, ow, oc_block, ic, kh, kw in T.grid(T.int64(1), T.int64(48), T.int64(14), T.int64(14), T.int64(4), T.int64(1920), T.int64(1), T.int64(1)):
            with T.block("conv2d_NCHWc"):
                v_n, v_oc_chunk, v_oh, v_ow, v_oc_block, v_ic, v_kh, v_kw = T.axis.remap("SSSSSRRR", [n, oc_chunk, oh, ow, oc_block, ic, kh, kw])
                T.reads(p0[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)], p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block])
                T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                with T.init():
                    conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = T.float32(0)
                conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] + p0[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)] * p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block]
        for ax0, ax1, ax2, ax3, ax4 in T.grid(T.int64(1), T.int64(48), T.int64(14), T.int64(14), T.int64(4)):
            with T.block("T_add"):
                v_ax0, v_ax1, v_ax2, v_ax3, v_ax4 = T.axis.remap("SSSSS", [ax0, ax1, ax2, ax3, ax4])
                T.reads(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4])
                T.writes(T_add[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                T_add[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] + p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4]
        for ax0, ax1, ax2, ax3, ax4 in T.grid(T.int64(1), T.int64(48), T.int64(14), T.int64(14), T.int64(4)):
            with T.block("T_relu"):
                v_ax0, v_ax1, v_ax2, v_ax3, v_ax4 = T.axis.remap("SSSSS", [ax0, ax1, ax2, ax3, ax4])
                T.reads(T_add[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                T.writes(T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.max(T_add[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], T.float32(0))
2024-04-29 02:30:09 [INFO] [task_scheduler.cc:164] Total 3 design space(s) generated
2024-04-29 02:30:09 [INFO] [task_scheduler.cc:170] Design space #0:
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(480), T.int64(14), T.int64(14), T.int64(4)), "float32"), p1: T.Buffer((T.int64(48), T.int64(480), T.int64(1), T.int64(1), T.int64(4), T.int64(4)), "float32"), p2: T.Buffer((T.int64(1), T.int64(48), T.int64(1), T.int64(1), T.int64(4)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(48), T.int64(14), T.int64(14), T.int64(4)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        with T.block("root"):
            T.reads()
            T.writes()
            T.block_attr({"meta_schedule.parallel": 768, "meta_schedule.unroll_explicit": 0, "meta_schedule.vectorize": 64})
            conv2d_NCHWc = T.alloc_buffer((T.int64(1), T.int64(48), T.int64(14), T.int64(14), T.int64(4)))
            for n_0, oc_chunk_0, oh_0, ow_0, oc_block_0, n_1, oc_chunk_1, oh_1, ow_1, oc_block_1, ic_0, kh_0, kw_0, n_2, oc_chunk_2, oh_2, ow_2, oc_block_2, ic_1, kh_1, kw_1, n_3, oc_chunk_3, oh_3, ow_3, oc_block_3 in T.grid(T.int64(1), T.int64(8), T.int64(1), T.int64(2), T.int64(1), T.int64(1), T.int64(6), T.int64(1), T.int64(7), T.int64(2), T.int64(640), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(3), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(14), T.int64(1), T.int64(2)):
                with T.block("conv2d_NCHWc"):
                    v_n = T.axis.spatial(T.int64(1), n_0 + n_1 + n_2 + n_3)
                    v_oc_chunk = T.axis.spatial(T.int64(48), oc_chunk_0 * T.int64(6) + oc_chunk_1 + oc_chunk_2 + oc_chunk_3)
                    v_oh = T.axis.spatial(T.int64(14), oh_0 * T.int64(14) + oh_1 * T.int64(14) + oh_2 * T.int64(14) + oh_3)
                    v_ow = T.axis.spatial(T.int64(14), ow_0 * T.int64(7) + ow_1 + ow_2 + ow_3)
                    v_oc_block = T.axis.spatial(T.int64(4), oc_block_0 * T.int64(4) + oc_block_1 * T.int64(2) + oc_block_2 * T.int64(2) + oc_block_3)
                    v_ic = T.axis.reduce(T.int64(1920), ic_0 * T.int64(3) + ic_1)
                    v_kh = T.axis.reduce(T.int64(1), kh_0 + kh_1)
                    v_kw = T.axis.reduce(T.int64(1), kw_0 + kw_1)
                    T.reads(p0[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)], p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block])
                    T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                    T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                    with T.init():
                        conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = T.float32(0)
                    conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] + p0[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)] * p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block]
            for ax0, ax1, ax2, ax3, ax4 in T.grid(T.int64(1), T.int64(48), T.int64(14), T.int64(14), T.int64(4)):
                with T.block("T_relu"):
                    v_ax0, v_ax1, v_ax2, v_ax3, v_ax4 = T.axis.remap("SSSSS", [ax0, ax1, ax2, ax3, ax4])
                    T.reads(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4])
                    T.writes(T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                    T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.max(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] + p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4], T.float32(0))
b0 = sch.get_block(name="conv2d_NCHWc", func_name="main")
b1 = sch.get_block(name="T_add", func_name="main")
b2 = sch.get_block(name="root", func_name="main")
sch.compute_inline(block=b1)
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.tiling_structure", ann_val="SSRSRS")
l3, l4, l5, l6, l7, l8, l9, l10 = sch.get_loops(block=b0)
v11, v12, v13, v14 = sch.sample_perfect_tile(loop=l3, n=4, max_innermost_factor=64, decision=[1, 1, 1, 1])
l15, l16, l17, l18 = sch.split(loop=l3, factors=[v11, v12, v13, v14], preserve_unit_iters=True)
v19, v20, v21, v22 = sch.sample_perfect_tile(loop=l4, n=4, max_innermost_factor=64, decision=[8, 6, 1, 1])
l23, l24, l25, l26 = sch.split(loop=l4, factors=[v19, v20, v21, v22], preserve_unit_iters=True)
v27, v28, v29, v30 = sch.sample_perfect_tile(loop=l5, n=4, max_innermost_factor=64, decision=[1, 1, 1, 14])
l31, l32, l33, l34 = sch.split(loop=l5, factors=[v27, v28, v29, v30], preserve_unit_iters=True)
v35, v36, v37, v38 = sch.sample_perfect_tile(loop=l6, n=4, max_innermost_factor=64, decision=[2, 7, 1, 1])
l39, l40, l41, l42 = sch.split(loop=l6, factors=[v35, v36, v37, v38], preserve_unit_iters=True)
v43, v44, v45, v46 = sch.sample_perfect_tile(loop=l7, n=4, max_innermost_factor=64, decision=[1, 2, 1, 2])
l47, l48, l49, l50 = sch.split(loop=l7, factors=[v43, v44, v45, v46], preserve_unit_iters=True)
v51, v52 = sch.sample_perfect_tile(loop=l8, n=2, max_innermost_factor=64, decision=[640, 3])
l53, l54 = sch.split(loop=l8, factors=[v51, v52], preserve_unit_iters=True)
v55, v56 = sch.sample_perfect_tile(loop=l9, n=2, max_innermost_factor=64, decision=[1, 1])
l57, l58 = sch.split(loop=l9, factors=[v55, v56], preserve_unit_iters=True)
v59, v60 = sch.sample_perfect_tile(loop=l10, n=2, max_innermost_factor=64, decision=[1, 1])
l61, l62 = sch.split(loop=l10, factors=[v59, v60], preserve_unit_iters=True)
sch.reorder(l15, l23, l31, l39, l47, l16, l24, l32, l40, l48, l53, l57, l61, l17, l25, l33, l41, l49, l54, l58, l62, l18, l26, l34, l42, l50)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.vectorize", ann_val=64)
v63 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=0)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.unroll_explicit", ann_val=v63)
2024-04-29 02:30:09 [INFO] [task_scheduler.cc:170] Design space #1:
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(480), T.int64(14), T.int64(14), T.int64(4)), "float32"), p1: T.Buffer((T.int64(48), T.int64(480), T.int64(1), T.int64(1), T.int64(4), T.int64(4)), "float32"), p2: T.Buffer((T.int64(1), T.int64(48), T.int64(1), T.int64(1), T.int64(4)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(48), T.int64(14), T.int64(14), T.int64(4)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        with T.block("root"):
            T.reads()
            T.writes()
            T.block_attr({"meta_schedule.parallel": 768, "meta_schedule.unroll_explicit": 512, "meta_schedule.vectorize": 64})
            conv2d_NCHWc = T.alloc_buffer((T.int64(1), T.int64(48), T.int64(14), T.int64(14), T.int64(4)))
            for n_0, oc_chunk_0, oh_0, ow_0, oc_block_0, n_1, oc_chunk_1, oh_1, ow_1, oc_block_1 in T.grid(T.int64(1), T.int64(8), T.int64(1), T.int64(2), T.int64(1), T.int64(1), T.int64(6), T.int64(1), T.int64(7), T.int64(2)):
                for ic_0, kh_0, kw_0, n_2, oc_chunk_2, oh_2, ow_2, oc_block_2, ic_1, kh_1, kw_1, n_3, oc_chunk_3, oh_3, ow_3, oc_block_3 in T.grid(T.int64(640), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(3), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(14), T.int64(1), T.int64(2)):
                    with T.block("conv2d_NCHWc"):
                        v_n = T.axis.spatial(T.int64(1), n_0 + n_1 + n_2 + n_3)
                        v_oc_chunk = T.axis.spatial(T.int64(48), oc_chunk_0 * T.int64(6) + oc_chunk_1 + oc_chunk_2 + oc_chunk_3)
                        v_oh = T.axis.spatial(T.int64(14), oh_0 * T.int64(14) + oh_1 * T.int64(14) + oh_2 * T.int64(14) + oh_3)
                        v_ow = T.axis.spatial(T.int64(14), ow_0 * T.int64(7) + ow_1 + ow_2 + ow_3)
                        v_oc_block = T.axis.spatial(T.int64(4), oc_block_0 * T.int64(4) + oc_block_1 * T.int64(2) + oc_block_2 * T.int64(2) + oc_block_3)
                        v_ic = T.axis.reduce(T.int64(1920), ic_0 * T.int64(3) + ic_1)
                        v_kh = T.axis.reduce(T.int64(1), kh_0 + kh_1)
                        v_kw = T.axis.reduce(T.int64(1), kw_0 + kw_1)
                        T.reads(p0[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)], p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block])
                        T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                        T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                        with T.init():
                            conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = T.float32(0)
                        conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] + p0[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)] * p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block]
                for ax0, ax1, ax2, ax3, ax4 in T.grid(T.int64(1), T.int64(1), T.int64(14), T.int64(1), T.int64(2)):
                    with T.block("T_relu"):
                        v_ax0 = T.axis.spatial(T.int64(1), ax0)
                        v_ax1 = T.axis.spatial(T.int64(48), oc_chunk_0 * T.int64(6) + oc_chunk_1 + ax1)
                        v_ax2 = T.axis.spatial(T.int64(14), ax2)
                        v_ax3 = T.axis.spatial(T.int64(14), ow_0 * T.int64(7) + ow_1 + ax3)
                        v_ax4 = T.axis.spatial(T.int64(4), oc_block_1 * T.int64(2) + ax4)
                        T.reads(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4])
                        T.writes(T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                        T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.max(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] + p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4], T.float32(0))
b0 = sch.get_block(name="conv2d_NCHWc", func_name="main")
b1 = sch.get_block(name="T_add", func_name="main")
b2 = sch.get_block(name="root", func_name="main")
sch.compute_inline(block=b1)
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.tiling_structure", ann_val="SSRSRS")
l3, l4, l5, l6, l7, l8, l9, l10 = sch.get_loops(block=b0)
v11, v12, v13, v14 = sch.sample_perfect_tile(loop=l3, n=4, max_innermost_factor=64, decision=[1, 1, 1, 1])
l15, l16, l17, l18 = sch.split(loop=l3, factors=[v11, v12, v13, v14], preserve_unit_iters=True)
v19, v20, v21, v22 = sch.sample_perfect_tile(loop=l4, n=4, max_innermost_factor=64, decision=[8, 6, 1, 1])
l23, l24, l25, l26 = sch.split(loop=l4, factors=[v19, v20, v21, v22], preserve_unit_iters=True)
v27, v28, v29, v30 = sch.sample_perfect_tile(loop=l5, n=4, max_innermost_factor=64, decision=[1, 1, 1, 14])
l31, l32, l33, l34 = sch.split(loop=l5, factors=[v27, v28, v29, v30], preserve_unit_iters=True)
v35, v36, v37, v38 = sch.sample_perfect_tile(loop=l6, n=4, max_innermost_factor=64, decision=[2, 7, 1, 1])
l39, l40, l41, l42 = sch.split(loop=l6, factors=[v35, v36, v37, v38], preserve_unit_iters=True)
v43, v44, v45, v46 = sch.sample_perfect_tile(loop=l7, n=4, max_innermost_factor=64, decision=[1, 2, 1, 2])
l47, l48, l49, l50 = sch.split(loop=l7, factors=[v43, v44, v45, v46], preserve_unit_iters=True)
v51, v52 = sch.sample_perfect_tile(loop=l8, n=2, max_innermost_factor=64, decision=[640, 3])
l53, l54 = sch.split(loop=l8, factors=[v51, v52], preserve_unit_iters=True)
v55, v56 = sch.sample_perfect_tile(loop=l9, n=2, max_innermost_factor=64, decision=[1, 1])
l57, l58 = sch.split(loop=l9, factors=[v55, v56], preserve_unit_iters=True)
v59, v60 = sch.sample_perfect_tile(loop=l10, n=2, max_innermost_factor=64, decision=[1, 1])
l61, l62 = sch.split(loop=l10, factors=[v59, v60], preserve_unit_iters=True)
sch.reorder(l15, l23, l31, l39, l47, l16, l24, l32, l40, l48, l53, l57, l61, l17, l25, l33, l41, l49, l54, l58, l62, l18, l26, l34, l42, l50)
b63, = sch.get_consumers(block=b0)
sch.reverse_compute_at(block=b63, loop=l48, preserve_unit_loops=True, index=-1)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.vectorize", ann_val=64)
v64 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.unroll_explicit", ann_val=v64)
2024-04-29 02:30:09 [INFO] [task_scheduler.cc:170] Design space #2:
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(480), T.int64(14), T.int64(14), T.int64(4)), "float32"), p1: T.Buffer((T.int64(48), T.int64(480), T.int64(1), T.int64(1), T.int64(4), T.int64(4)), "float32"), p2: T.Buffer((T.int64(1), T.int64(48), T.int64(1), T.int64(1), T.int64(4)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(48), T.int64(14), T.int64(14), T.int64(4)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        with T.block("root"):
            T.reads()
            T.writes()
            T.block_attr({"meta_schedule.parallel": 768, "meta_schedule.unroll_explicit": 512, "meta_schedule.vectorize": 64})
            conv2d_NCHWc = T.alloc_buffer((T.int64(1), T.int64(48), T.int64(14), T.int64(14), T.int64(4)))
            for n_0, oc_chunk_0, oh_0, ow_0, oc_block_0 in T.grid(T.int64(1), T.int64(8), T.int64(1), T.int64(2), T.int64(1)):
                for n_1, oc_chunk_1, oh_1, ow_1, oc_block_1, ic_0, kh_0, kw_0, n_2, oc_chunk_2, oh_2, ow_2, oc_block_2, ic_1, kh_1, kw_1, n_3, oc_chunk_3, oh_3, ow_3, oc_block_3 in T.grid(T.int64(1), T.int64(6), T.int64(1), T.int64(7), T.int64(2), T.int64(640), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(3), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(14), T.int64(1), T.int64(2)):
                    with T.block("conv2d_NCHWc"):
                        v_n = T.axis.spatial(T.int64(1), n_0 + n_1 + n_2 + n_3)
                        v_oc_chunk = T.axis.spatial(T.int64(48), oc_chunk_0 * T.int64(6) + oc_chunk_1 + oc_chunk_2 + oc_chunk_3)
                        v_oh = T.axis.spatial(T.int64(14), oh_0 * T.int64(14) + oh_1 * T.int64(14) + oh_2 * T.int64(14) + oh_3)
                        v_ow = T.axis.spatial(T.int64(14), ow_0 * T.int64(7) + ow_1 + ow_2 + ow_3)
                        v_oc_block = T.axis.spatial(T.int64(4), oc_block_0 * T.int64(4) + oc_block_1 * T.int64(2) + oc_block_2 * T.int64(2) + oc_block_3)
                        v_ic = T.axis.reduce(T.int64(1920), ic_0 * T.int64(3) + ic_1)
                        v_kh = T.axis.reduce(T.int64(1), kh_0 + kh_1)
                        v_kw = T.axis.reduce(T.int64(1), kw_0 + kw_1)
                        T.reads(p0[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)], p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block])
                        T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                        T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                        with T.init():
                            conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = T.float32(0)
                        conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] + p0[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)] * p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block]
                for ax0, ax1, ax2, ax3, ax4 in T.grid(T.int64(1), T.int64(6), T.int64(14), T.int64(7), T.int64(4)):
                    with T.block("T_relu"):
                        v_ax0 = T.axis.spatial(T.int64(1), ax0)
                        v_ax1 = T.axis.spatial(T.int64(48), oc_chunk_0 * T.int64(6) + ax1)
                        v_ax2 = T.axis.spatial(T.int64(14), ax2)
                        v_ax3 = T.axis.spatial(T.int64(14), ow_0 * T.int64(7) + ax3)
                        v_ax4 = T.axis.spatial(T.int64(4), ax4)
                        T.reads(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4])
                        T.writes(T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                        T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.max(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] + p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4], T.float32(0))
b0 = sch.get_block(name="conv2d_NCHWc", func_name="main")
b1 = sch.get_block(name="T_add", func_name="main")
b2 = sch.get_block(name="root", func_name="main")
sch.compute_inline(block=b1)
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.tiling_structure", ann_val="SSRSRS")
l3, l4, l5, l6, l7, l8, l9, l10 = sch.get_loops(block=b0)
v11, v12, v13, v14 = sch.sample_perfect_tile(loop=l3, n=4, max_innermost_factor=64, decision=[1, 1, 1, 1])
l15, l16, l17, l18 = sch.split(loop=l3, factors=[v11, v12, v13, v14], preserve_unit_iters=True)
v19, v20, v21, v22 = sch.sample_perfect_tile(loop=l4, n=4, max_innermost_factor=64, decision=[8, 6, 1, 1])
l23, l24, l25, l26 = sch.split(loop=l4, factors=[v19, v20, v21, v22], preserve_unit_iters=True)
v27, v28, v29, v30 = sch.sample_perfect_tile(loop=l5, n=4, max_innermost_factor=64, decision=[1, 1, 1, 14])
l31, l32, l33, l34 = sch.split(loop=l5, factors=[v27, v28, v29, v30], preserve_unit_iters=True)
v35, v36, v37, v38 = sch.sample_perfect_tile(loop=l6, n=4, max_innermost_factor=64, decision=[2, 7, 1, 1])
l39, l40, l41, l42 = sch.split(loop=l6, factors=[v35, v36, v37, v38], preserve_unit_iters=True)
v43, v44, v45, v46 = sch.sample_perfect_tile(loop=l7, n=4, max_innermost_factor=64, decision=[1, 2, 1, 2])
l47, l48, l49, l50 = sch.split(loop=l7, factors=[v43, v44, v45, v46], preserve_unit_iters=True)
v51, v52 = sch.sample_perfect_tile(loop=l8, n=2, max_innermost_factor=64, decision=[640, 3])
l53, l54 = sch.split(loop=l8, factors=[v51, v52], preserve_unit_iters=True)
v55, v56 = sch.sample_perfect_tile(loop=l9, n=2, max_innermost_factor=64, decision=[1, 1])
l57, l58 = sch.split(loop=l9, factors=[v55, v56], preserve_unit_iters=True)
v59, v60 = sch.sample_perfect_tile(loop=l10, n=2, max_innermost_factor=64, decision=[1, 1])
l61, l62 = sch.split(loop=l10, factors=[v59, v60], preserve_unit_iters=True)
sch.reorder(l15, l23, l31, l39, l47, l16, l24, l32, l40, l48, l53, l57, l61, l17, l25, l33, l41, l49, l54, l58, l62, l18, l26, l34, l42, l50)
b63, = sch.get_consumers(block=b0)
sch.reverse_compute_at(block=b63, loop=l47, preserve_unit_loops=True, index=-1)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.vectorize", ann_val=64)
v64 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.unroll_explicit", ann_val=v64)
2024-04-29 03:16:43 [INFO] [evolutionary_search.cc:713] Generating candidates......
2024-04-29 03:16:43 [INFO] [evolutionary_search.cc:715] Picked top 0 candidate(s) from database
2024-04-29 03:16:45 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x7061168)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x75d9288)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0xe8703a8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0xd38e158)]: 0 failure(s)
2024-04-29 03:16:45 [INFO] [evolutionary_search.cc:723] Sampled 512 candidate(s)
2024-04-29 03:16:48 [INFO] [evolutionary_search.cc:621] Evolve iter #0 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x7061168)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x75d9288)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0xe8703a8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0xd38e158)]: 0 failure(s)
2024-04-29 03:16:51 [INFO] [evolutionary_search.cc:621] Evolve iter #1 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x7061168)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x75d9288)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0xe8703a8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0xd38e158)]: 0 failure(s)
2024-04-29 03:16:54 [INFO] [evolutionary_search.cc:621] Evolve iter #2 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x7061168)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x75d9288)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0xe8703a8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0xd38e158)]: 0 failure(s)
2024-04-29 03:16:57 [INFO] [evolutionary_search.cc:621] Evolve iter #3 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x7061168)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x75d9288)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0xe8703a8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0xd38e158)]: 0 failure(s)
2024-04-29 03:16:58 [INFO] [evolutionary_search.cc:649] Scores of the best 64 candidates:
[1 : 16]:	0.9972  0.9969  0.9968  0.9967  0.9966  0.9963  0.9956  0.9949  0.9949  0.9948  0.9943  0.9942  0.9941  0.9939  0.9938  0.9932
[17 : 32]:	0.9925  0.9923  0.9922  0.9917  0.9916  0.9913  0.9912  0.9909  0.9908  0.9907  0.9904  0.9902  0.9899  0.9888  0.9887  0.9884
[33 : 48]:	0.9884  0.9883  0.9860  0.9853  0.9852  0.9852  0.9847  0.9844  0.9837  0.9834  0.9831  0.9827  0.9821  0.9817  0.9805  0.9799
[49 : 64]:	0.9794  0.9794  0.9794  0.9785  0.9779  0.9775  0.9773  0.9770  0.9769  0.9769  0.9766  0.9765  0.9765  0.9745  0.9740  0.9734
2024-04-29 03:16:59 [INFO] [evolutionary_search.cc:727] Got 64 candidate(s) with evolutionary search
2024-04-29 03:16:59 [INFO] [evolutionary_search.cc:730] Sending 64 candidates(s) for measurement
2024-04-29 05:05:02 [INFO] [task_scheduler.cc:131] [Task #28: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_27] Trial #1: GFLOPs: 4.9693. Time: 29095.0825 us. Best GFLOPs: 4.9693
2024-04-29 05:05:02 [INFO] [task_scheduler.cc:131] [Task #28: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_27] Trial #2: GFLOPs: 12.9800. Time: 11138.8444 us. Best GFLOPs: 12.9800
2024-04-29 05:05:02 [INFO] [task_scheduler.cc:131] [Task #28: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_27] Trial #3: GFLOPs: 71.9481. Time: 2009.5346 us. Best GFLOPs: 71.9481
2024-04-29 05:05:02 [INFO] [task_scheduler.cc:131] [Task #28: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_27] Trial #4: GFLOPs: 37.6457. Time: 3840.5983 us. Best GFLOPs: 71.9481
2024-04-29 05:05:02 [INFO] [task_scheduler.cc:131] [Task #28: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_27] Trial #5: GFLOPs: 31.2959. Time: 4619.8474 us. Best GFLOPs: 71.9481
2024-04-29 05:05:02 [INFO] [task_scheduler.cc:131] [Task #28: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_27] Trial #6: GFLOPs: 10.4548. Time: 13829.2659 us. Best GFLOPs: 71.9481
2024-04-29 05:05:02 [INFO] [task_scheduler.cc:131] [Task #28: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_27] Trial #7: GFLOPs: 70.9693. Time: 2037.2491 us. Best GFLOPs: 71.9481
2024-04-29 05:05:02 [INFO] [task_scheduler.cc:131] [Task #28: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_27] Trial #8: GFLOPs: 119.5358. Time: 1209.5304 us. Best GFLOPs: 119.5358
2024-04-29 05:05:02 [INFO] [task_scheduler.cc:131] [Task #28: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_27] Trial #9: GFLOPs: 59.0909. Time: 2446.7740 us. Best GFLOPs: 119.5358
2024-04-29 05:05:02 [INFO] [task_scheduler.cc:131] [Task #28: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_27] Trial #10: GFLOPs: 73.2306. Time: 1974.3405 us. Best GFLOPs: 119.5358
2024-04-29 05:05:02 [INFO] [task_scheduler.cc:131] [Task #28: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_27] Trial #11: GFLOPs: 78.0098. Time: 1853.3848 us. Best GFLOPs: 119.5358
2024-04-29 05:05:02 [INFO] [task_scheduler.cc:131] [Task #28: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_27] Trial #12: GFLOPs: 3.8612. Time: 37445.2177 us. Best GFLOPs: 119.5358
2024-04-29 05:05:02 [INFO] [task_scheduler.cc:131] [Task #28: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_27] Trial #13: GFLOPs: 46.3047. Time: 3122.4096 us. Best GFLOPs: 119.5358
2024-04-29 05:05:02 [INFO] [task_scheduler.cc:131] [Task #28: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_27] Trial #14: GFLOPs: 87.0917. Time: 1660.1132 us. Best GFLOPs: 119.5358
2024-04-29 05:05:02 [INFO] [task_scheduler.cc:131] [Task #28: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_27] Trial #15: GFLOPs: 7.2998. Time: 19806.2223 us. Best GFLOPs: 119.5358
2024-04-29 05:05:02 [INFO] [task_scheduler.cc:131] [Task #28: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_27] Trial #16: GFLOPs: 11.7954. Time: 12257.4571 us. Best GFLOPs: 119.5358
2024-04-29 05:05:02 [INFO] [task_scheduler.cc:121] [Task #28: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_27] Trial #17: Error in building:
LocalBuilder: Timeout, killed after 30.0 seconds
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(480), T.int64(14), T.int64(14), T.int64(4)), "float32"), p1: T.Buffer((T.int64(48), T.int64(480), T.int64(1), T.int64(1), T.int64(4), T.int64(4)), "float32"), p2: T.Buffer((T.int64(1), T.int64(48), T.int64(1), T.int64(1), T.int64(4)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(48), T.int64(14), T.int64(14), T.int64(4)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        conv2d_NCHWc = T.alloc_buffer((T.int64(1), T.int64(48), T.int64(14), T.int64(14), T.int64(4)))
        for n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_fused in T.parallel(T.int64(8), annotations={"pragma_auto_unroll_max_step": 512, "pragma_unroll_explicit": 1}):
            for n_1, oc_chunk_1, oh_1, ow_1, oc_block_1 in T.grid(T.int64(1), T.int64(3), T.int64(1), T.int64(1), T.int64(2)):
                for n_2_init, oc_chunk_2_init, oh_2_init, ow_2_init, oc_block_2_init, n_3_init, oc_chunk_3_init, oh_3_init, ow_3_init in T.grid(T.int64(1), T.int64(2), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(7), T.int64(14)):
                    for oc_block_3_fused_init in T.vectorized(T.int64(2)):
                        with T.block("conv2d_NCHWc_init"):
                            v_n = T.axis.spatial(T.int64(1), n_1 + n_2_init + n_3_init)
                            v_oc_chunk = T.axis.spatial(T.int64(48), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_fused // T.int64(2) * T.int64(12) + oc_chunk_1 * T.int64(4) + oc_chunk_2_init * T.int64(2) + oc_chunk_3_init)
                            v_oh = T.axis.spatial(T.int64(14), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_fused % T.int64(2) * T.int64(7) + oh_1 * T.int64(7) + oh_2_init * T.int64(7) + oh_3_init)
                            v_ow = T.axis.spatial(T.int64(14), ow_1 * T.int64(14) + ow_2_init * T.int64(14) + ow_3_init)
                            v_oc_block = T.axis.spatial(T.int64(4), oc_block_1 * T.int64(2) + oc_block_2_init * T.int64(2) + oc_block_3_fused_init)
                            T.reads()
                            T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                            T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                            conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = T.float32(0)
                for ic_0, kh_0, kw_0, n_2, oc_chunk_2, oh_2, ow_2, oc_block_2, ic_1, kh_1, kw_1, n_3, oc_chunk_3, oh_3, ow_3 in T.grid(T.int64(128), T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(1), T.int64(1), T.int64(1), T.int64(15), T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(7), T.int64(14)):
                    for oc_block_3_fused in T.vectorized(T.int64(2)):
                        with T.block("conv2d_NCHWc_update"):
                            v_n = T.axis.spatial(T.int64(1), n_1 + n_2 + n_3)
                            v_oc_chunk = T.axis.spatial(T.int64(48), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_fused // T.int64(2) * T.int64(12) + oc_chunk_1 * T.int64(4) + oc_chunk_2 * T.int64(2) + oc_chunk_3)
                            v_oh = T.axis.spatial(T.int64(14), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_fused % T.int64(2) * T.int64(7) + oh_1 * T.int64(7) + oh_2 * T.int64(7) + oh_3)
                            v_ow = T.axis.spatial(T.int64(14), ow_1 * T.int64(14) + ow_2 * T.int64(14) + ow_3)
                            v_oc_block = T.axis.spatial(T.int64(4), oc_block_1 * T.int64(2) + oc_block_2 * T.int64(2) + oc_block_3_fused)
                            v_ic = T.axis.reduce(T.int64(1920), ic_0 * T.int64(15) + ic_1)
                            v_kh = T.axis.reduce(T.int64(1), kh_0 + kh_1)
                            v_kw = T.axis.reduce(T.int64(1), kw_0 + kw_1)
                            T.reads(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block], p0[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)], p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block])
                            T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                            T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                            conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] + p0[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)] * p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block]
            for ax0, ax1, ax2 in T.grid(T.int64(1), T.int64(12), T.int64(7)):
                for ax3_ax4_fused in T.vectorized(T.int64(56)):
                    with T.block("T_relu"):
                        v_ax0 = T.axis.spatial(T.int64(1), ax0)
                        v_ax1 = T.axis.spatial(T.int64(48), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_fused // T.int64(2) * T.int64(12) + ax1)
                        v_ax2 = T.axis.spatial(T.int64(14), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_fused % T.int64(2) * T.int64(7) + ax2)
                        v_ax3 = T.axis.spatial(T.int64(14), ax3_ax4_fused // T.int64(4))
                        v_ax4 = T.axis.spatial(T.int64(4), ax3_ax4_fused % T.int64(4))
                        T.reads(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4])
                        T.writes(T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                        T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.max(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] + p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4], T.float32(0))
b0 = sch.get_block(name="conv2d_NCHWc", func_name="main")
b1 = sch.get_block(name="T_add", func_name="main")
b2 = sch.get_block(name="root", func_name="main")
sch.compute_inline(block=b1)
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.tiling_structure", ann_val="SSRSRS")
l3, l4, l5, l6, l7, l8, l9, l10 = sch.get_loops(block=b0)
v11, v12, v13, v14 = sch.sample_perfect_tile(loop=l3, n=4, max_innermost_factor=64, decision=[1, 1, 1, 1])
l15, l16, l17, l18 = sch.split(loop=l3, factors=[v11, v12, v13, v14], preserve_unit_iters=True)
v19, v20, v21, v22 = sch.sample_perfect_tile(loop=l4, n=4, max_innermost_factor=64, decision=[4, 3, 2, 2])
l23, l24, l25, l26 = sch.split(loop=l4, factors=[v19, v20, v21, v22], preserve_unit_iters=True)
v27, v28, v29, v30 = sch.sample_perfect_tile(loop=l5, n=4, max_innermost_factor=64, decision=[2, 1, 1, 7])
l31, l32, l33, l34 = sch.split(loop=l5, factors=[v27, v28, v29, v30], preserve_unit_iters=True)
v35, v36, v37, v38 = sch.sample_perfect_tile(loop=l6, n=4, max_innermost_factor=64, decision=[1, 1, 1, 14])
l39, l40, l41, l42 = sch.split(loop=l6, factors=[v35, v36, v37, v38], preserve_unit_iters=True)
v43, v44, v45, v46 = sch.sample_perfect_tile(loop=l7, n=4, max_innermost_factor=64, decision=[1, 2, 1, 2])
l47, l48, l49, l50 = sch.split(loop=l7, factors=[v43, v44, v45, v46], preserve_unit_iters=True)
v51, v52 = sch.sample_perfect_tile(loop=l8, n=2, max_innermost_factor=64, decision=[128, 15])
l53, l54 = sch.split(loop=l8, factors=[v51, v52], preserve_unit_iters=True)
v55, v56 = sch.sample_perfect_tile(loop=l9, n=2, max_innermost_factor=64, decision=[1, 1])
l57, l58 = sch.split(loop=l9, factors=[v55, v56], preserve_unit_iters=True)
v59, v60 = sch.sample_perfect_tile(loop=l10, n=2, max_innermost_factor=64, decision=[1, 1])
l61, l62 = sch.split(loop=l10, factors=[v59, v60], preserve_unit_iters=True)
sch.reorder(l15, l23, l31, l39, l47, l16, l24, l32, l40, l48, l53, l57, l61, l17, l25, l33, l41, l49, l54, l58, l62, l18, l26, l34, l42, l50)
b63, = sch.get_consumers(block=b0)
sch.reverse_compute_at(block=b63, loop=l47, preserve_unit_loops=True, index=-1)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.vectorize", ann_val=64)
v64 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.unroll_explicit", ann_val=v64)
sch.enter_postproc()
b65 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b65, ann_key="meta_schedule.parallel")
sch.unannotate(block_or_loop=b65, ann_key="meta_schedule.vectorize")
sch.unannotate(block_or_loop=b65, ann_key="meta_schedule.unroll_explicit")
b66, b67 = sch.get_child_blocks(b65)
l68, l69, l70, l71, l72, l73, l74, l75, l76, l77, l78, l79, l80, l81, l82, l83, l84, l85, l86, l87, l88, l89, l90, l91, l92, l93 = sch.get_loops(block=b66)
l94 = sch.fuse(l68, l69, l70, l71, l72, preserve_unit_iters=True)
sch.parallel(loop=l94)
l95 = sch.fuse(l93, preserve_unit_iters=True)
sch.vectorize(loop=l95)
sch.annotate(block_or_loop=l94, ann_key="pragma_auto_unroll_max_step", ann_val=512)
sch.annotate(block_or_loop=l94, ann_key="pragma_unroll_explicit", ann_val=1)
l96, l97, l98, l99, l100, l101 = sch.get_loops(block=b67)
l102 = sch.fuse(l100, l101, preserve_unit_iters=True)
sch.vectorize(loop=l102)
b103 = sch.get_block(name="conv2d_NCHWc", func_name="main")
l104, l105, l106, l107, l108, l109, l110, l111, l112, l113, l114, l115, l116, l117, l118, l119, l120, l121, l122, l123, l124, l125 = sch.get_loops(block=b103)
b126 = sch.decompose_reduction(block=b103, loop=l110)
2024-04-29 05:05:02 [INFO] [task_scheduler.cc:131] [Task #28: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_27] Trial #18: GFLOPs: 38.0282. Time: 3801.9760 us. Best GFLOPs: 119.5358
2024-04-29 05:05:02 [INFO] [task_scheduler.cc:131] [Task #28: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_27] Trial #19: GFLOPs: 49.2058. Time: 2938.3176 us. Best GFLOPs: 119.5358
2024-04-29 05:05:02 [INFO] [task_scheduler.cc:131] [Task #28: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_27] Trial #20: GFLOPs: 96.1336. Time: 1503.9705 us. Best GFLOPs: 119.5358
2024-04-29 05:05:02 [INFO] [task_scheduler.cc:131] [Task #28: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_27] Trial #21: GFLOPs: 9.3671. Time: 15435.0276 us. Best GFLOPs: 119.5358
2024-04-29 05:05:02 [INFO] [task_scheduler.cc:131] [Task #28: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_27] Trial #22: GFLOPs: 71.7928. Time: 2013.8801 us. Best GFLOPs: 119.5358
2024-04-29 05:05:02 [INFO] [task_scheduler.cc:131] [Task #28: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_27] Trial #23: GFLOPs: 48.6017. Time: 2974.8359 us. Best GFLOPs: 119.5358
2024-04-29 05:05:02 [INFO] [task_scheduler.cc:131] [Task #28: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_27] Trial #24: GFLOPs: 36.2077. Time: 3993.1353 us. Best GFLOPs: 119.5358
2024-04-29 05:05:02 [INFO] [task_scheduler.cc:131] [Task #28: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_27] Trial #25: GFLOPs: 88.5536. Time: 1632.7074 us. Best GFLOPs: 119.5358
2024-04-29 05:05:02 [INFO] [task_scheduler.cc:131] [Task #28: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_27] Trial #26: GFLOPs: 27.8597. Time: 5189.6591 us. Best GFLOPs: 119.5358
2024-04-29 05:05:02 [INFO] [task_scheduler.cc:131] [Task #28: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_27] Trial #27: GFLOPs: 31.9239. Time: 4528.9641 us. Best GFLOPs: 119.5358
2024-04-29 05:05:02 [INFO] [task_scheduler.cc:131] [Task #28: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_27] Trial #28: GFLOPs: 103.9640. Time: 1390.6947 us. Best GFLOPs: 119.5358
2024-04-29 05:05:02 [INFO] [task_scheduler.cc:131] [Task #28: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_27] Trial #29: GFLOPs: 72.5171. Time: 1993.7653 us. Best GFLOPs: 119.5358
2024-04-29 05:05:02 [INFO] [task_scheduler.cc:131] [Task #28: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_27] Trial #30: GFLOPs: 99.6071. Time: 1451.5238 us. Best GFLOPs: 119.5358
2024-04-29 05:05:02 [INFO] [task_scheduler.cc:131] [Task #28: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_27] Trial #31: GFLOPs: 139.9789. Time: 1032.8854 us. Best GFLOPs: 139.9789
2024-04-29 05:05:02 [INFO] [task_scheduler.cc:131] [Task #28: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_27] Trial #32: GFLOPs: 142.3410. Time: 1015.7448 us. Best GFLOPs: 142.3410
2024-04-29 05:05:02 [INFO] [task_scheduler.cc:131] [Task #28: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_27] Trial #33: GFLOPs: 22.7139. Time: 6365.3537 us. Best GFLOPs: 142.3410
2024-04-29 05:05:02 [INFO] [task_scheduler.cc:131] [Task #28: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_27] Trial #34: GFLOPs: 19.7141. Time: 7333.9476 us. Best GFLOPs: 142.3410
2024-04-29 05:05:02 [INFO] [task_scheduler.cc:131] [Task #28: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_27] Trial #35: GFLOPs: 21.4411. Time: 6743.2355 us. Best GFLOPs: 142.3410
2024-04-29 05:05:02 [INFO] [task_scheduler.cc:131] [Task #28: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_27] Trial #36: GFLOPs: 13.2728. Time: 10893.0986 us. Best GFLOPs: 142.3410
2024-04-29 05:05:02 [INFO] [task_scheduler.cc:131] [Task #28: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_27] Trial #37: GFLOPs: 79.7613. Time: 1812.6848 us. Best GFLOPs: 142.3410
2024-04-29 05:05:02 [INFO] [task_scheduler.cc:131] [Task #28: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_27] Trial #38: GFLOPs: 43.1858. Time: 3347.9075 us. Best GFLOPs: 142.3410
2024-04-29 05:05:02 [INFO] [task_scheduler.cc:131] [Task #28: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_27] Trial #39: GFLOPs: 2.9044. Time: 49780.8287 us. Best GFLOPs: 142.3410
2024-04-29 05:05:02 [INFO] [task_scheduler.cc:131] [Task #28: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_27] Trial #40: GFLOPs: 58.5654. Time: 2468.7303 us. Best GFLOPs: 142.3410
2024-04-29 05:05:02 [INFO] [task_scheduler.cc:131] [Task #28: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_27] Trial #41: GFLOPs: 7.1173. Time: 20314.1613 us. Best GFLOPs: 142.3410
2024-04-29 05:05:02 [INFO] [task_scheduler.cc:121] [Task #28: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_27] Trial #42: Error in building:
LocalBuilder: Timeout, killed after 30.0 seconds
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(480), T.int64(14), T.int64(14), T.int64(4)), "float32"), p1: T.Buffer((T.int64(48), T.int64(480), T.int64(1), T.int64(1), T.int64(4), T.int64(4)), "float32"), p2: T.Buffer((T.int64(1), T.int64(48), T.int64(1), T.int64(1), T.int64(4)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(48), T.int64(14), T.int64(14), T.int64(4)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        conv2d_NCHWc = T.alloc_buffer((T.int64(1), T.int64(48), T.int64(14), T.int64(14), T.int64(4)))
        for n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused in T.parallel(T.int64(28), annotations={"pragma_auto_unroll_max_step": 512, "pragma_unroll_explicit": 1}):
            for n_2_init, oc_chunk_2_init, oh_2_init, ow_2_init, oc_block_2_init, n_3_init, oc_chunk_3_init, oh_3_init, ow_3_init in T.grid(T.int64(1), T.int64(2), T.int64(1), T.int64(2), T.int64(1), T.int64(1), T.int64(12), T.int64(7), T.int64(1)):
                for oc_block_3_fused_init in T.vectorized(T.int64(4)):
                    with T.block("conv2d_NCHWc_init"):
                        v_n = T.axis.spatial(T.int64(1), n_2_init + n_3_init)
                        v_oc_chunk = T.axis.spatial(T.int64(48), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused // T.int64(14) * T.int64(24) + oc_chunk_2_init * T.int64(12) + oc_chunk_3_init)
                        v_oh = T.axis.spatial(T.int64(14), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused % T.int64(2) * T.int64(7) + oh_2_init * T.int64(7) + oh_3_init)
                        v_ow = T.axis.spatial(T.int64(14), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused % T.int64(14) // T.int64(2) * T.int64(2) + ow_2_init + ow_3_init)
                        v_oc_block = T.axis.spatial(T.int64(4), oc_block_2_init * T.int64(4) + oc_block_3_fused_init)
                        T.reads()
                        T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                        T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                        conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = T.float32(0)
            for ic_0, kh_0, kw_0, n_2, oc_chunk_2, oh_2, ow_2, oc_block_2, ic_1, kh_1, kw_1, n_3, oc_chunk_3, oh_3, ow_3 in T.grid(T.int64(1920), T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(1), T.int64(2), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(12), T.int64(7), T.int64(1)):
                for oc_block_3_fused in T.vectorized(T.int64(4)):
                    with T.block("conv2d_NCHWc_update"):
                        v_n = T.axis.spatial(T.int64(1), n_2 + n_3)
                        v_oc_chunk = T.axis.spatial(T.int64(48), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused // T.int64(14) * T.int64(24) + oc_chunk_2 * T.int64(12) + oc_chunk_3)
                        v_oh = T.axis.spatial(T.int64(14), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused % T.int64(2) * T.int64(7) + oh_2 * T.int64(7) + oh_3)
                        v_ow = T.axis.spatial(T.int64(14), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused % T.int64(14) // T.int64(2) * T.int64(2) + ow_2 + ow_3)
                        v_oc_block = T.axis.spatial(T.int64(4), oc_block_2 * T.int64(4) + oc_block_3_fused)
                        v_ic = T.axis.reduce(T.int64(1920), ic_0 + ic_1)
                        v_kh = T.axis.reduce(T.int64(1), kh_0 + kh_1)
                        v_kw = T.axis.reduce(T.int64(1), kw_0 + kw_1)
                        T.reads(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block], p0[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)], p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block])
                        T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                        T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                        conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] + p0[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)] * p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block]
        for ax0_ax1_ax2_ax3_ax4_fused_0 in T.parallel(T.int64(588)):
            for ax0_ax1_ax2_ax3_ax4_fused_1 in T.vectorized(T.int64(64)):
                with T.block("T_relu"):
                    v_ax0 = T.axis.spatial(T.int64(1), T.int64(0))
                    v_ax1 = T.axis.spatial(T.int64(48), (ax0_ax1_ax2_ax3_ax4_fused_0 * T.int64(64) + ax0_ax1_ax2_ax3_ax4_fused_1) // T.int64(784))
                    v_ax2 = T.axis.spatial(T.int64(14), (ax0_ax1_ax2_ax3_ax4_fused_0 * T.int64(64) + ax0_ax1_ax2_ax3_ax4_fused_1) % T.int64(784) // T.int64(56))
                    v_ax3 = T.axis.spatial(T.int64(14), (ax0_ax1_ax2_ax3_ax4_fused_0 * T.int64(64) + ax0_ax1_ax2_ax3_ax4_fused_1) % T.int64(56) // T.int64(4))
                    v_ax4 = T.axis.spatial(T.int64(4), (ax0_ax1_ax2_ax3_ax4_fused_0 * T.int64(64) + ax0_ax1_ax2_ax3_ax4_fused_1) % T.int64(4))
                    T.reads(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4])
                    T.writes(T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                    T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.max(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] + p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4], T.float32(0))
b0 = sch.get_block(name="conv2d_NCHWc", func_name="main")
b1 = sch.get_block(name="T_add", func_name="main")
b2 = sch.get_block(name="root", func_name="main")
sch.compute_inline(block=b1)
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.tiling_structure", ann_val="SSRSRS")
l3, l4, l5, l6, l7, l8, l9, l10 = sch.get_loops(block=b0)
v11, v12, v13, v14 = sch.sample_perfect_tile(loop=l3, n=4, max_innermost_factor=64, decision=[1, 1, 1, 1])
l15, l16, l17, l18 = sch.split(loop=l3, factors=[v11, v12, v13, v14], preserve_unit_iters=True)
v19, v20, v21, v22 = sch.sample_perfect_tile(loop=l4, n=4, max_innermost_factor=64, decision=[2, 1, 2, 12])
l23, l24, l25, l26 = sch.split(loop=l4, factors=[v19, v20, v21, v22], preserve_unit_iters=True)
v27, v28, v29, v30 = sch.sample_perfect_tile(loop=l5, n=4, max_innermost_factor=64, decision=[1, 2, 1, 7])
l31, l32, l33, l34 = sch.split(loop=l5, factors=[v27, v28, v29, v30], preserve_unit_iters=True)
v35, v36, v37, v38 = sch.sample_perfect_tile(loop=l6, n=4, max_innermost_factor=64, decision=[7, 1, 2, 1])
l39, l40, l41, l42 = sch.split(loop=l6, factors=[v35, v36, v37, v38], preserve_unit_iters=True)
v43, v44, v45, v46 = sch.sample_perfect_tile(loop=l7, n=4, max_innermost_factor=64, decision=[1, 1, 1, 4])
l47, l48, l49, l50 = sch.split(loop=l7, factors=[v43, v44, v45, v46], preserve_unit_iters=True)
v51, v52 = sch.sample_perfect_tile(loop=l8, n=2, max_innermost_factor=64, decision=[1920, 1])
l53, l54 = sch.split(loop=l8, factors=[v51, v52], preserve_unit_iters=True)
v55, v56 = sch.sample_perfect_tile(loop=l9, n=2, max_innermost_factor=64, decision=[1, 1])
l57, l58 = sch.split(loop=l9, factors=[v55, v56], preserve_unit_iters=True)
v59, v60 = sch.sample_perfect_tile(loop=l10, n=2, max_innermost_factor=64, decision=[1, 1])
l61, l62 = sch.split(loop=l10, factors=[v59, v60], preserve_unit_iters=True)
sch.reorder(l15, l23, l31, l39, l47, l16, l24, l32, l40, l48, l53, l57, l61, l17, l25, l33, l41, l49, l54, l58, l62, l18, l26, l34, l42, l50)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.vectorize", ann_val=64)
v63 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.unroll_explicit", ann_val=v63)
sch.enter_postproc()
b64 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b64, ann_key="meta_schedule.parallel")
sch.unannotate(block_or_loop=b64, ann_key="meta_schedule.vectorize")
sch.unannotate(block_or_loop=b64, ann_key="meta_schedule.unroll_explicit")
b65, b66 = sch.get_child_blocks(b64)
l67, l68, l69, l70, l71, l72, l73, l74, l75, l76, l77, l78, l79, l80, l81, l82, l83, l84, l85, l86, l87, l88, l89, l90, l91, l92 = sch.get_loops(block=b65)
l93 = sch.fuse(l67, l68, l69, l70, l71, l72, l73, l74, l75, l76, preserve_unit_iters=True)
sch.parallel(loop=l93)
l94 = sch.fuse(l92, preserve_unit_iters=True)
sch.vectorize(loop=l94)
sch.annotate(block_or_loop=l93, ann_key="pragma_auto_unroll_max_step", ann_val=512)
sch.annotate(block_or_loop=l93, ann_key="pragma_unroll_explicit", ann_val=1)
l95, l96, l97, l98, l99 = sch.get_loops(block=b66)
l100 = sch.fuse(l95, l96, l97, l98, l99, preserve_unit_iters=True)
l101, l102 = sch.split(loop=l100, factors=[None, 64], preserve_unit_iters=True)
sch.parallel(loop=l101)
sch.vectorize(loop=l102)
b103 = sch.get_block(name="conv2d_NCHWc", func_name="main")
l104, l105, l106, l107, l108, l109, l110, l111, l112, l113, l114, l115, l116, l117, l118, l119, l120 = sch.get_loops(block=b103)
b121 = sch.decompose_reduction(block=b103, loop=l105)
2024-04-29 05:05:02 [INFO] [task_scheduler.cc:131] [Task #28: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_27] Trial #43: GFLOPs: 50.2102. Time: 2879.5396 us. Best GFLOPs: 142.3410
2024-04-29 05:05:02 [INFO] [task_scheduler.cc:131] [Task #28: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_27] Trial #44: GFLOPs: 1.5718. Time: 91986.1330 us. Best GFLOPs: 142.3410
2024-04-29 05:05:02 [INFO] [task_scheduler.cc:131] [Task #28: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_27] Trial #45: GFLOPs: 107.4775. Time: 1345.2321 us. Best GFLOPs: 142.3410
2024-04-29 05:05:02 [INFO] [task_scheduler.cc:131] [Task #28: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_27] Trial #46: GFLOPs: 102.0266. Time: 1417.1019 us. Best GFLOPs: 142.3410
2024-04-29 05:05:02 [INFO] [task_scheduler.cc:131] [Task #28: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_27] Trial #47: GFLOPs: 154.0786. Time: 938.3660 us. Best GFLOPs: 154.0786
2024-04-29 05:05:02 [INFO] [task_scheduler.cc:131] [Task #28: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_27] Trial #48: GFLOPs: 157.7319. Time: 916.6322 us. Best GFLOPs: 157.7319
2024-04-29 05:05:02 [INFO] [task_scheduler.cc:131] [Task #28: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_27] Trial #49: GFLOPs: 132.9063. Time: 1087.8503 us. Best GFLOPs: 157.7319
2024-04-29 05:05:02 [INFO] [task_scheduler.cc:131] [Task #28: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_27] Trial #50: GFLOPs: 57.1412. Time: 2530.2596 us. Best GFLOPs: 157.7319
2024-04-29 05:05:02 [INFO] [task_scheduler.cc:131] [Task #28: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_27] Trial #51: GFLOPs: 85.2360. Time: 1696.2562 us. Best GFLOPs: 157.7319
2024-04-29 05:05:02 [INFO] [task_scheduler.cc:131] [Task #28: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_27] Trial #52: GFLOPs: 75.0039. Time: 1927.6612 us. Best GFLOPs: 157.7319
2024-04-29 05:05:02 [INFO] [task_scheduler.cc:131] [Task #28: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_27] Trial #53: GFLOPs: 31.0366. Time: 4658.4390 us. Best GFLOPs: 157.7319
2024-04-29 05:05:02 [INFO] [task_scheduler.cc:131] [Task #28: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_27] Trial #54: GFLOPs: 6.6787. Time: 21648.3680 us. Best GFLOPs: 157.7319
2024-04-29 05:05:02 [INFO] [task_scheduler.cc:131] [Task #28: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_27] Trial #55: GFLOPs: 0.5171. Time: 279617.7437 us. Best GFLOPs: 157.7319
2024-04-29 05:05:02 [INFO] [task_scheduler.cc:131] [Task #28: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_27] Trial #56: GFLOPs: 6.2919. Time: 22979.2446 us. Best GFLOPs: 157.7319
2024-04-29 05:05:02 [INFO] [task_scheduler.cc:131] [Task #28: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_27] Trial #57: GFLOPs: 40.3905. Time: 3579.6069 us. Best GFLOPs: 157.7319
2024-04-29 05:05:02 [INFO] [task_scheduler.cc:131] [Task #28: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_27] Trial #58: GFLOPs: 14.2792. Time: 10125.3553 us. Best GFLOPs: 157.7319
2024-04-29 05:05:02 [INFO] [task_scheduler.cc:131] [Task #28: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_27] Trial #59: GFLOPs: 31.9635. Time: 4523.3574 us. Best GFLOPs: 157.7319
2024-04-29 05:05:02 [INFO] [task_scheduler.cc:131] [Task #28: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_27] Trial #60: GFLOPs: 7.1239. Time: 20295.2652 us. Best GFLOPs: 157.7319
2024-04-29 05:05:02 [INFO] [task_scheduler.cc:131] [Task #28: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_27] Trial #61: GFLOPs: 84.8477. Time: 1704.0193 us. Best GFLOPs: 157.7319
2024-04-29 05:05:02 [INFO] [task_scheduler.cc:131] [Task #28: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_27] Trial #62: GFLOPs: 28.3484. Time: 5100.1910 us. Best GFLOPs: 157.7319
2024-04-29 05:05:02 [INFO] [task_scheduler.cc:131] [Task #28: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_27] Trial #63: GFLOPs: 123.4384. Time: 1171.2902 us. Best GFLOPs: 157.7319
2024-04-29 05:05:02 [INFO] [task_scheduler.cc:131] [Task #28: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_27] Trial #64: GFLOPs: 62.3665. Time: 2318.2657 us. Best GFLOPs: 157.7319
2024-04-29 06:34:13 [INFO] [evolutionary_search.cc:713] Generating candidates......
2024-04-29 06:34:13 [INFO] [evolutionary_search.cc:715] Picked top 62 candidate(s) from database
2024-04-29 06:34:16 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x7061168)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x75d9288)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0xe8703a8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0xd38e158)]: 0 failure(s)
2024-04-29 06:34:16 [INFO] [evolutionary_search.cc:723] Sampled 450 candidate(s)
2024-04-29 06:34:21 [INFO] [evolutionary_search.cc:621] Evolve iter #0 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x7061168)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x75d9288)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0xe8703a8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0xd38e158)]: 0 failure(s)
2024-04-29 06:34:26 [INFO] [evolutionary_search.cc:621] Evolve iter #1 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x7061168)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x75d9288)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0xe8703a8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0xd38e158)]: 0 failure(s)
2024-04-29 06:34:32 [INFO] [evolutionary_search.cc:621] Evolve iter #2 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x7061168)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x75d9288)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0xe8703a8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0xd38e158)]: 0 failure(s)
2024-04-29 06:34:37 [INFO] [evolutionary_search.cc:621] Evolve iter #3 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x7061168)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x75d9288)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0xe8703a8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0xd38e158)]: 0 failure(s)
2024-04-29 06:34:41 [INFO] [evolutionary_search.cc:649] Scores of the best 64 candidates:
[1 : 16]:	0.9638  0.9314  0.9280  0.9114  0.9068  0.9044  0.8997  0.8997  0.8978  0.8908  0.8860  0.8823  0.8796  0.8795  0.8739  0.8732
[17 : 32]:	0.8694  0.8683  0.8679  0.8654  0.8643  0.8589  0.8514  0.8507  0.8442  0.8324  0.8288  0.8285  0.8284  0.8199  0.8124  0.8062
[33 : 48]:	0.8060  0.8045  0.8014  0.8005  0.8000  0.8000  0.7958  0.7953  0.7951  0.7940  0.7933  0.7921  0.7899  0.7877  0.7809  0.7752
[49 : 64]:	0.7751  0.7675  0.7649  0.7630  0.7628  0.7624  0.7624  0.7604  0.7588  0.7547  0.7541  0.7519  0.7512  0.7505  0.7504  0.7436
2024-04-29 06:34:41 [INFO] [evolutionary_search.cc:727] Got 64 candidate(s) with evolutionary search
2024-04-29 06:34:41 [INFO] [evolutionary_search.cc:730] Sending 64 candidates(s) for measurement
2024-04-29 06:36:12 [INFO] [task_scheduler.cc:131] [Task #28: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_27] Trial #65: GFLOPs: 192.7715. Time: 750.0182 us. Best GFLOPs: 192.7715
2024-04-29 06:36:12 [INFO] [task_scheduler.cc:131] [Task #28: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_27] Trial #66: GFLOPs: 153.4028. Time: 942.4999 us. Best GFLOPs: 192.7715
2024-04-29 06:36:12 [INFO] [task_scheduler.cc:131] [Task #28: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_27] Trial #67: GFLOPs: 170.2515. Time: 849.2270 us. Best GFLOPs: 192.7715
2024-04-29 06:36:12 [INFO] [task_scheduler.cc:131] [Task #28: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_27] Trial #68: GFLOPs: 162.1470. Time: 891.6730 us. Best GFLOPs: 192.7715
2024-04-29 06:36:12 [INFO] [task_scheduler.cc:131] [Task #28: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_27] Trial #69: GFLOPs: 189.9782. Time: 761.0458 us. Best GFLOPs: 192.7715
2024-04-29 06:36:12 [INFO] [task_scheduler.cc:131] [Task #28: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_27] Trial #70: GFLOPs: 176.3970. Time: 819.6407 us. Best GFLOPs: 192.7715
2024-04-29 06:36:12 [INFO] [task_scheduler.cc:131] [Task #28: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_27] Trial #71: GFLOPs: 138.1454. Time: 1046.5938 us. Best GFLOPs: 192.7715
2024-04-29 06:36:12 [INFO] [task_scheduler.cc:131] [Task #28: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_27] Trial #72: GFLOPs: 112.6574. Time: 1283.3796 us. Best GFLOPs: 192.7715
2024-04-29 06:36:12 [INFO] [task_scheduler.cc:131] [Task #28: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_27] Trial #73: GFLOPs: 108.7025. Time: 1330.0714 us. Best GFLOPs: 192.7715
2024-04-29 06:36:12 [INFO] [task_scheduler.cc:121] [Task #28: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_27] Trial #74: Error in building:
LocalBuilder: Timeout, killed after 30.0 seconds
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(480), T.int64(14), T.int64(14), T.int64(4)), "float32"), p1: T.Buffer((T.int64(48), T.int64(480), T.int64(1), T.int64(1), T.int64(4), T.int64(4)), "float32"), p2: T.Buffer((T.int64(1), T.int64(48), T.int64(1), T.int64(1), T.int64(4)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(48), T.int64(14), T.int64(14), T.int64(4)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        conv2d_NCHWc = T.alloc_buffer((T.int64(1), T.int64(48), T.int64(14), T.int64(14), T.int64(4)))
        for n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused in T.parallel(T.int64(112), annotations={"pragma_auto_unroll_max_step": 512, "pragma_unroll_explicit": 1}):
            for n_2_init, oc_chunk_2_init, oh_2_init, ow_2_init, oc_block_2_init, n_3_init, oc_chunk_3_init, oh_3_init, ow_3_init in T.grid(T.int64(1), T.int64(6), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(1), T.int64(7)):
                for oc_block_3_fused_init in T.vectorized(T.int64(4)):
                    with T.block("conv2d_NCHWc_init"):
                        v_n = T.axis.spatial(T.int64(1), n_2_init + n_3_init)
                        v_oc_chunk = T.axis.spatial(T.int64(48), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused % T.int64(28) // T.int64(7) * T.int64(12) + oc_chunk_2_init * T.int64(2) + oc_chunk_3_init)
                        v_oh = T.axis.spatial(T.int64(14), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused // T.int64(56) * T.int64(7) + n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused % T.int64(7) + oh_2_init + oh_3_init)
                        v_ow = T.axis.spatial(T.int64(14), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused % T.int64(56) // T.int64(28) * T.int64(7) + ow_2_init * T.int64(7) + ow_3_init)
                        v_oc_block = T.axis.spatial(T.int64(4), oc_block_2_init * T.int64(4) + oc_block_3_fused_init)
                        T.reads()
                        T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                        T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                        conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = T.float32(0)
            for ic_0, kh_0, kw_0, n_2, oc_chunk_2, oh_2, ow_2, oc_block_2, ic_1, kh_1, kw_1, n_3, oc_chunk_3, oh_3, ow_3 in T.grid(T.int64(60), T.int64(1), T.int64(1), T.int64(1), T.int64(6), T.int64(1), T.int64(1), T.int64(1), T.int64(32), T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(1), T.int64(7)):
                for oc_block_3_fused in T.vectorized(T.int64(4)):
                    with T.block("conv2d_NCHWc_update"):
                        v_n = T.axis.spatial(T.int64(1), n_2 + n_3)
                        v_oc_chunk = T.axis.spatial(T.int64(48), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused % T.int64(28) // T.int64(7) * T.int64(12) + oc_chunk_2 * T.int64(2) + oc_chunk_3)
                        v_oh = T.axis.spatial(T.int64(14), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused // T.int64(56) * T.int64(7) + n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused % T.int64(7) + oh_2 + oh_3)
                        v_ow = T.axis.spatial(T.int64(14), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused % T.int64(56) // T.int64(28) * T.int64(7) + ow_2 * T.int64(7) + ow_3)
                        v_oc_block = T.axis.spatial(T.int64(4), oc_block_2 * T.int64(4) + oc_block_3_fused)
                        v_ic = T.axis.reduce(T.int64(1920), ic_0 * T.int64(32) + ic_1)
                        v_kh = T.axis.reduce(T.int64(1), kh_0 + kh_1)
                        v_kw = T.axis.reduce(T.int64(1), kw_0 + kw_1)
                        T.reads(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block], p0[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)], p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block])
                        T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                        T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                        conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] + p0[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)] * p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block]
            for ax0, ax1, ax2 in T.grid(T.int64(1), T.int64(12), T.int64(1)):
                for ax3_ax4_fused in T.vectorized(T.int64(28)):
                    with T.block("T_relu"):
                        v_ax0 = T.axis.spatial(T.int64(1), ax0)
                        v_ax1 = T.axis.spatial(T.int64(48), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused % T.int64(28) // T.int64(7) * T.int64(12) + ax1)
                        v_ax2 = T.axis.spatial(T.int64(14), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused // T.int64(56) * T.int64(7) + n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused % T.int64(7) + ax2)
                        v_ax3 = T.axis.spatial(T.int64(14), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused % T.int64(56) // T.int64(28) * T.int64(7) + ax3_ax4_fused // T.int64(4))
                        v_ax4 = T.axis.spatial(T.int64(4), ax3_ax4_fused % T.int64(4))
                        T.reads(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4])
                        T.writes(T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                        T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.max(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] + p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4], T.float32(0))
b0 = sch.get_block(name="conv2d_NCHWc", func_name="main")
b1 = sch.get_block(name="T_add", func_name="main")
b2 = sch.get_block(name="root", func_name="main")
sch.compute_inline(block=b1)
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.tiling_structure", ann_val="SSRSRS")
l3, l4, l5, l6, l7, l8, l9, l10 = sch.get_loops(block=b0)
v11, v12, v13, v14 = sch.sample_perfect_tile(loop=l3, n=4, max_innermost_factor=64, decision=[1, 1, 1, 1])
l15, l16, l17, l18 = sch.split(loop=l3, factors=[v11, v12, v13, v14], preserve_unit_iters=True)
v19, v20, v21, v22 = sch.sample_perfect_tile(loop=l4, n=4, max_innermost_factor=64, decision=[1, 4, 6, 2])
l23, l24, l25, l26 = sch.split(loop=l4, factors=[v19, v20, v21, v22], preserve_unit_iters=True)
v27, v28, v29, v30 = sch.sample_perfect_tile(loop=l5, n=4, max_innermost_factor=64, decision=[2, 7, 1, 1])
l31, l32, l33, l34 = sch.split(loop=l5, factors=[v27, v28, v29, v30], preserve_unit_iters=True)
v35, v36, v37, v38 = sch.sample_perfect_tile(loop=l6, n=4, max_innermost_factor=64, decision=[2, 1, 1, 7])
l39, l40, l41, l42 = sch.split(loop=l6, factors=[v35, v36, v37, v38], preserve_unit_iters=True)
v43, v44, v45, v46 = sch.sample_perfect_tile(loop=l7, n=4, max_innermost_factor=64, decision=[1, 1, 1, 4])
l47, l48, l49, l50 = sch.split(loop=l7, factors=[v43, v44, v45, v46], preserve_unit_iters=True)
v51, v52 = sch.sample_perfect_tile(loop=l8, n=2, max_innermost_factor=64, decision=[60, 32])
l53, l54 = sch.split(loop=l8, factors=[v51, v52], preserve_unit_iters=True)
v55, v56 = sch.sample_perfect_tile(loop=l9, n=2, max_innermost_factor=64, decision=[1, 1])
l57, l58 = sch.split(loop=l9, factors=[v55, v56], preserve_unit_iters=True)
v59, v60 = sch.sample_perfect_tile(loop=l10, n=2, max_innermost_factor=64, decision=[1, 1])
l61, l62 = sch.split(loop=l10, factors=[v59, v60], preserve_unit_iters=True)
sch.reorder(l15, l23, l31, l39, l47, l16, l24, l32, l40, l48, l53, l57, l61, l17, l25, l33, l41, l49, l54, l58, l62, l18, l26, l34, l42, l50)
b63, = sch.get_consumers(block=b0)
sch.reverse_compute_at(block=b63, loop=l48, preserve_unit_loops=True, index=-1)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.vectorize", ann_val=64)
v64 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.unroll_explicit", ann_val=v64)
sch.enter_postproc()
b65 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b65, ann_key="meta_schedule.parallel")
sch.unannotate(block_or_loop=b65, ann_key="meta_schedule.vectorize")
sch.unannotate(block_or_loop=b65, ann_key="meta_schedule.unroll_explicit")
b66, b67 = sch.get_child_blocks(b65)
l68, l69, l70, l71, l72, l73, l74, l75, l76, l77, l78, l79, l80, l81, l82, l83, l84, l85, l86, l87, l88, l89, l90, l91, l92, l93 = sch.get_loops(block=b66)
l94 = sch.fuse(l68, l69, l70, l71, l72, l73, l74, l75, l76, l77, preserve_unit_iters=True)
sch.parallel(loop=l94)
l95 = sch.fuse(l93, preserve_unit_iters=True)
sch.vectorize(loop=l95)
sch.annotate(block_or_loop=l94, ann_key="pragma_auto_unroll_max_step", ann_val=512)
sch.annotate(block_or_loop=l94, ann_key="pragma_unroll_explicit", ann_val=1)
l96, l97, l98, l99, l100, l101 = sch.get_loops(block=b67)
l102 = sch.fuse(l100, l101, preserve_unit_iters=True)
sch.vectorize(loop=l102)
b103 = sch.get_block(name="conv2d_NCHWc", func_name="main")
l104, l105, l106, l107, l108, l109, l110, l111, l112, l113, l114, l115, l116, l117, l118, l119, l120 = sch.get_loops(block=b103)
b121 = sch.decompose_reduction(block=b103, loop=l105)
2024-04-29 06:36:12 [INFO] [task_scheduler.cc:131] [Task #28: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_27] Trial #75: GFLOPs: 159.8296. Time: 904.6016 us. Best GFLOPs: 192.7715
2024-04-29 06:36:12 [INFO] [task_scheduler.cc:131] [Task #28: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_27] Trial #76: GFLOPs: 106.3054. Time: 1360.0643 us. Best GFLOPs: 192.7715
2024-04-29 06:36:12 [INFO] [task_scheduler.cc:131] [Task #28: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_27] Trial #77: GFLOPs: 199.0663. Time: 726.3015 us. Best GFLOPs: 199.0663
2024-04-29 06:36:12 [INFO] [task_scheduler.cc:131] [Task #28: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_27] Trial #78: GFLOPs: 178.8369. Time: 808.4581 us. Best GFLOPs: 199.0663
2024-04-29 06:36:12 [INFO] [task_scheduler.cc:131] [Task #28: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_27] Trial #79: GFLOPs: 144.5138. Time: 1000.4731 us. Best GFLOPs: 199.0663
2024-04-29 06:36:12 [INFO] [task_scheduler.cc:131] [Task #28: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_27] Trial #80: GFLOPs: 172.4798. Time: 838.2556 us. Best GFLOPs: 199.0663
2024-04-29 06:36:12 [INFO] [task_scheduler.cc:131] [Task #28: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_27] Trial #81: GFLOPs: 104.5845. Time: 1382.4429 us. Best GFLOPs: 199.0663
2024-04-29 06:36:12 [INFO] [task_scheduler.cc:131] [Task #28: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_27] Trial #82: GFLOPs: 138.8281. Time: 1041.4470 us. Best GFLOPs: 199.0663
2024-04-29 06:36:12 [INFO] [task_scheduler.cc:131] [Task #28: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_27] Trial #83: GFLOPs: 158.8334. Time: 910.2756 us. Best GFLOPs: 199.0663
2024-04-29 06:36:12 [INFO] [task_scheduler.cc:131] [Task #28: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_27] Trial #84: GFLOPs: 116.2792. Time: 1243.4048 us. Best GFLOPs: 199.0663
2024-04-29 06:36:12 [INFO] [task_scheduler.cc:131] [Task #28: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_27] Trial #85: GFLOPs: 98.0243. Time: 1474.9616 us. Best GFLOPs: 199.0663
2024-04-29 06:36:12 [INFO] [task_scheduler.cc:131] [Task #28: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_27] Trial #86: GFLOPs: 163.7420. Time: 882.9873 us. Best GFLOPs: 199.0663
2024-04-29 06:36:12 [INFO] [task_scheduler.cc:131] [Task #28: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_27] Trial #87: GFLOPs: 237.0199. Time: 610.0000 us. Best GFLOPs: 237.0199
2024-04-29 06:36:12 [INFO] [task_scheduler.cc:121] [Task #28: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_27] Trial #88: Error in building:
LocalBuilder: Timeout, killed after 30.0 seconds
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(480), T.int64(14), T.int64(14), T.int64(4)), "float32"), p1: T.Buffer((T.int64(48), T.int64(480), T.int64(1), T.int64(1), T.int64(4), T.int64(4)), "float32"), p2: T.Buffer((T.int64(1), T.int64(48), T.int64(1), T.int64(1), T.int64(4)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(48), T.int64(14), T.int64(14), T.int64(4)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        conv2d_NCHWc = T.alloc_buffer((T.int64(1), T.int64(48), T.int64(14), T.int64(14), T.int64(4)))
        for n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused in T.parallel(T.int64(168), annotations={"pragma_auto_unroll_max_step": 512, "pragma_unroll_explicit": 1}):
            for n_2_init, oc_chunk_2_init, oh_2_init, ow_2_init, oc_block_2_init, n_3_init, oc_chunk_3_init, oh_3_init, ow_3_init in T.grid(T.int64(1), T.int64(1), T.int64(7), T.int64(1), T.int64(1), T.int64(1), T.int64(4), T.int64(1), T.int64(2)):
                for oc_block_3_fused_init in T.vectorized(T.int64(4)):
                    with T.block("conv2d_NCHWc_init"):
                        v_n = T.axis.spatial(T.int64(1), n_2_init + n_3_init)
                        v_oc_chunk = T.axis.spatial(T.int64(48), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused // T.int64(42) * T.int64(12) + n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused % T.int64(6) // T.int64(2) * T.int64(4) + oc_chunk_2_init * T.int64(4) + oc_chunk_3_init)
                        v_oh = T.axis.spatial(T.int64(14), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused % T.int64(2) * T.int64(7) + oh_2_init + oh_3_init)
                        v_ow = T.axis.spatial(T.int64(14), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused % T.int64(42) // T.int64(6) * T.int64(2) + ow_2_init * T.int64(2) + ow_3_init)
                        v_oc_block = T.axis.spatial(T.int64(4), oc_block_2_init * T.int64(4) + oc_block_3_fused_init)
                        T.reads()
                        T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                        T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                        conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = T.float32(0)
            for ic_0, kh_0, kw_0, n_2, oc_chunk_2, oh_2, ow_2, oc_block_2, ic_1, kh_1, kw_1, n_3, oc_chunk_3, oh_3, ow_3 in T.grid(T.int64(30), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(7), T.int64(1), T.int64(1), T.int64(64), T.int64(1), T.int64(1), T.int64(1), T.int64(4), T.int64(1), T.int64(2)):
                for oc_block_3_fused in T.vectorized(T.int64(4)):
                    with T.block("conv2d_NCHWc_update"):
                        v_n = T.axis.spatial(T.int64(1), n_2 + n_3)
                        v_oc_chunk = T.axis.spatial(T.int64(48), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused // T.int64(42) * T.int64(12) + n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused % T.int64(6) // T.int64(2) * T.int64(4) + oc_chunk_2 * T.int64(4) + oc_chunk_3)
                        v_oh = T.axis.spatial(T.int64(14), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused % T.int64(2) * T.int64(7) + oh_2 + oh_3)
                        v_ow = T.axis.spatial(T.int64(14), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused % T.int64(42) // T.int64(6) * T.int64(2) + ow_2 * T.int64(2) + ow_3)
                        v_oc_block = T.axis.spatial(T.int64(4), oc_block_2 * T.int64(4) + oc_block_3_fused)
                        v_ic = T.axis.reduce(T.int64(1920), ic_0 * T.int64(64) + ic_1)
                        v_kh = T.axis.reduce(T.int64(1), kh_0 + kh_1)
                        v_kw = T.axis.reduce(T.int64(1), kw_0 + kw_1)
                        T.reads(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block], p0[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)], p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block])
                        T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                        T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                        conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] + p0[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)] * p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block]
            for ax0, ax1, ax2 in T.grid(T.int64(1), T.int64(4), T.int64(7)):
                for ax3_ax4_fused in T.vectorized(T.int64(8)):
                    with T.block("T_relu"):
                        v_ax0 = T.axis.spatial(T.int64(1), ax0)
                        v_ax1 = T.axis.spatial(T.int64(48), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused // T.int64(42) * T.int64(12) + n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused % T.int64(6) // T.int64(2) * T.int64(4) + ax1)
                        v_ax2 = T.axis.spatial(T.int64(14), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused % T.int64(2) * T.int64(7) + ax2)
                        v_ax3 = T.axis.spatial(T.int64(14), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused % T.int64(42) // T.int64(6) * T.int64(2) + ax3_ax4_fused // T.int64(4))
                        v_ax4 = T.axis.spatial(T.int64(4), ax3_ax4_fused % T.int64(4))
                        T.reads(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4])
                        T.writes(T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                        T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.max(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] + p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4], T.float32(0))
b0 = sch.get_block(name="conv2d_NCHWc", func_name="main")
b1 = sch.get_block(name="T_add", func_name="main")
b2 = sch.get_block(name="root", func_name="main")
sch.compute_inline(block=b1)
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.tiling_structure", ann_val="SSRSRS")
l3, l4, l5, l6, l7, l8, l9, l10 = sch.get_loops(block=b0)
v11, v12, v13, v14 = sch.sample_perfect_tile(loop=l3, n=4, max_innermost_factor=64, decision=[1, 1, 1, 1])
l15, l16, l17, l18 = sch.split(loop=l3, factors=[v11, v12, v13, v14], preserve_unit_iters=True)
v19, v20, v21, v22 = sch.sample_perfect_tile(loop=l4, n=4, max_innermost_factor=64, decision=[4, 3, 1, 4])
l23, l24, l25, l26 = sch.split(loop=l4, factors=[v19, v20, v21, v22], preserve_unit_iters=True)
v27, v28, v29, v30 = sch.sample_perfect_tile(loop=l5, n=4, max_innermost_factor=64, decision=[1, 2, 7, 1])
l31, l32, l33, l34 = sch.split(loop=l5, factors=[v27, v28, v29, v30], preserve_unit_iters=True)
v35, v36, v37, v38 = sch.sample_perfect_tile(loop=l6, n=4, max_innermost_factor=64, decision=[7, 1, 1, 2])
l39, l40, l41, l42 = sch.split(loop=l6, factors=[v35, v36, v37, v38], preserve_unit_iters=True)
v43, v44, v45, v46 = sch.sample_perfect_tile(loop=l7, n=4, max_innermost_factor=64, decision=[1, 1, 1, 4])
l47, l48, l49, l50 = sch.split(loop=l7, factors=[v43, v44, v45, v46], preserve_unit_iters=True)
v51, v52 = sch.sample_perfect_tile(loop=l8, n=2, max_innermost_factor=64, decision=[30, 64])
l53, l54 = sch.split(loop=l8, factors=[v51, v52], preserve_unit_iters=True)
v55, v56 = sch.sample_perfect_tile(loop=l9, n=2, max_innermost_factor=64, decision=[1, 1])
l57, l58 = sch.split(loop=l9, factors=[v55, v56], preserve_unit_iters=True)
v59, v60 = sch.sample_perfect_tile(loop=l10, n=2, max_innermost_factor=64, decision=[1, 1])
l61, l62 = sch.split(loop=l10, factors=[v59, v60], preserve_unit_iters=True)
sch.reorder(l15, l23, l31, l39, l47, l16, l24, l32, l40, l48, l53, l57, l61, l17, l25, l33, l41, l49, l54, l58, l62, l18, l26, l34, l42, l50)
b63, = sch.get_consumers(block=b0)
sch.reverse_compute_at(block=b63, loop=l48, preserve_unit_loops=True, index=-1)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.vectorize", ann_val=64)
v64 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.unroll_explicit", ann_val=v64)
sch.enter_postproc()
b65 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b65, ann_key="meta_schedule.parallel")
sch.unannotate(block_or_loop=b65, ann_key="meta_schedule.vectorize")
sch.unannotate(block_or_loop=b65, ann_key="meta_schedule.unroll_explicit")
b66, b67 = sch.get_child_blocks(b65)
l68, l69, l70, l71, l72, l73, l74, l75, l76, l77, l78, l79, l80, l81, l82, l83, l84, l85, l86, l87, l88, l89, l90, l91, l92, l93 = sch.get_loops(block=b66)
l94 = sch.fuse(l68, l69, l70, l71, l72, l73, l74, l75, l76, l77, preserve_unit_iters=True)
sch.parallel(loop=l94)
l95 = sch.fuse(l93, preserve_unit_iters=True)
sch.vectorize(loop=l95)
sch.annotate(block_or_loop=l94, ann_key="pragma_auto_unroll_max_step", ann_val=512)
sch.annotate(block_or_loop=l94, ann_key="pragma_unroll_explicit", ann_val=1)
l96, l97, l98, l99, l100, l101 = sch.get_loops(block=b67)
l102 = sch.fuse(l100, l101, preserve_unit_iters=True)
sch.vectorize(loop=l102)
b103 = sch.get_block(name="conv2d_NCHWc", func_name="main")
l104, l105, l106, l107, l108, l109, l110, l111, l112, l113, l114, l115, l116, l117, l118, l119, l120 = sch.get_loops(block=b103)
b121 = sch.decompose_reduction(block=b103, loop=l105)
2024-04-29 06:36:12 [INFO] [task_scheduler.cc:131] [Task #28: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_27] Trial #89: GFLOPs: 137.8198. Time: 1049.0668 us. Best GFLOPs: 237.0199
2024-04-29 06:36:12 [INFO] [task_scheduler.cc:131] [Task #28: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_27] Trial #90: GFLOPs: 152.3820. Time: 948.8139 us. Best GFLOPs: 237.0199
2024-04-29 06:36:12 [INFO] [task_scheduler.cc:131] [Task #28: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_27] Trial #91: GFLOPs: 38.5159. Time: 3753.8313 us. Best GFLOPs: 237.0199
2024-04-29 06:36:12 [INFO] [task_scheduler.cc:131] [Task #28: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_27] Trial #92: GFLOPs: 119.5532. Time: 1209.3539 us. Best GFLOPs: 237.0199
2024-04-29 06:36:12 [INFO] [task_scheduler.cc:131] [Task #28: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_27] Trial #93: GFLOPs: 122.0237. Time: 1184.8698 us. Best GFLOPs: 237.0199
2024-04-29 06:36:12 [INFO] [task_scheduler.cc:131] [Task #28: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_27] Trial #94: GFLOPs: 111.1854. Time: 1300.3699 us. Best GFLOPs: 237.0199
2024-04-29 06:36:12 [INFO] [task_scheduler.cc:131] [Task #28: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_27] Trial #95: GFLOPs: 59.3270. Time: 2437.0381 us. Best GFLOPs: 237.0199
2024-04-29 06:36:12 [INFO] [task_scheduler.cc:131] [Task #28: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_27] Trial #96: GFLOPs: 238.2883. Time: 606.7531 us. Best GFLOPs: 238.2883
2024-04-29 06:36:12 [INFO] [task_scheduler.cc:131] [Task #28: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_27] Trial #97: GFLOPs: 119.1871. Time: 1213.0687 us. Best GFLOPs: 238.2883
2024-04-29 06:36:12 [INFO] [task_scheduler.cc:131] [Task #28: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_27] Trial #98: GFLOPs: 129.7689. Time: 1114.1507 us. Best GFLOPs: 238.2883
2024-04-29 06:36:12 [INFO] [task_scheduler.cc:131] [Task #28: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_27] Trial #99: GFLOPs: 110.7588. Time: 1305.3787 us. Best GFLOPs: 238.2883
2024-04-29 06:36:12 [INFO] [task_scheduler.cc:131] [Task #28: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_27] Trial #100: GFLOPs: 97.4000. Time: 1484.4169 us. Best GFLOPs: 238.2883
2024-04-29 06:36:12 [INFO] [task_scheduler.cc:131] [Task #28: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_27] Trial #101: GFLOPs: 116.0594. Time: 1245.7600 us. Best GFLOPs: 238.2883
2024-04-29 06:36:12 [INFO] [task_scheduler.cc:131] [Task #28: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_27] Trial #102: GFLOPs: 89.0708. Time: 1623.2276 us. Best GFLOPs: 238.2883
2024-04-29 06:36:12 [INFO] [task_scheduler.cc:131] [Task #28: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_27] Trial #103: GFLOPs: 214.4988. Time: 674.0464 us. Best GFLOPs: 238.2883
2024-04-29 06:36:12 [INFO] [task_scheduler.cc:131] [Task #28: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_27] Trial #104: GFLOPs: 238.4318. Time: 606.3878 us. Best GFLOPs: 238.4318
2024-04-29 06:36:12 [INFO] [task_scheduler.cc:131] [Task #28: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_27] Trial #105: GFLOPs: 96.1568. Time: 1503.6076 us. Best GFLOPs: 238.4318
2024-04-29 06:36:12 [INFO] [task_scheduler.cc:131] [Task #28: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_27] Trial #106: GFLOPs: 125.6463. Time: 1150.7075 us. Best GFLOPs: 238.4318
2024-04-29 06:36:12 [INFO] [task_scheduler.cc:131] [Task #28: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_27] Trial #107: GFLOPs: 100.4818. Time: 1438.8890 us. Best GFLOPs: 238.4318
2024-04-29 06:36:12 [INFO] [task_scheduler.cc:131] [Task #28: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_27] Trial #108: GFLOPs: 272.9093. Time: 529.7809 us. Best GFLOPs: 272.9093
2024-04-29 06:36:12 [INFO] [task_scheduler.cc:131] [Task #28: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_27] Trial #109: GFLOPs: 100.2623. Time: 1442.0396 us. Best GFLOPs: 272.9093
2024-04-29 06:36:12 [INFO] [task_scheduler.cc:131] [Task #28: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_27] Trial #110: GFLOPs: 200.1750. Time: 722.2785 us. Best GFLOPs: 272.9093
2024-04-29 06:36:12 [INFO] [task_scheduler.cc:131] [Task #28: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_27] Trial #111: GFLOPs: 126.7135. Time: 1141.0163 us. Best GFLOPs: 272.9093
2024-04-29 06:36:12 [INFO] [task_scheduler.cc:131] [Task #28: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_27] Trial #112: GFLOPs: 134.5902. Time: 1074.2400 us. Best GFLOPs: 272.9093
2024-04-29 06:36:12 [INFO] [task_scheduler.cc:131] [Task #28: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_27] Trial #113: GFLOPs: 237.7322. Time: 608.1723 us. Best GFLOPs: 272.9093
2024-04-29 06:36:12 [INFO] [task_scheduler.cc:131] [Task #28: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_27] Trial #114: GFLOPs: 119.9459. Time: 1205.3949 us. Best GFLOPs: 272.9093
2024-04-29 06:36:12 [INFO] [task_scheduler.cc:131] [Task #28: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_27] Trial #115: GFLOPs: 119.3128. Time: 1211.7908 us. Best GFLOPs: 272.9093
2024-04-29 06:36:12 [INFO] [task_scheduler.cc:131] [Task #28: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_27] Trial #116: GFLOPs: 61.8910. Time: 2336.0772 us. Best GFLOPs: 272.9093
2024-04-29 06:36:12 [INFO] [task_scheduler.cc:131] [Task #28: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_27] Trial #117: GFLOPs: 222.7092. Time: 649.1970 us. Best GFLOPs: 272.9093
2024-04-29 06:36:12 [INFO] [task_scheduler.cc:131] [Task #28: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_27] Trial #118: GFLOPs: 99.2394. Time: 1456.9033 us. Best GFLOPs: 272.9093
2024-04-29 06:36:12 [INFO] [task_scheduler.cc:131] [Task #28: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_27] Trial #119: GFLOPs: 98.9383. Time: 1461.3365 us. Best GFLOPs: 272.9093
2024-04-29 06:36:12 [INFO] [task_scheduler.cc:131] [Task #28: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_27] Trial #120: GFLOPs: 119.9771. Time: 1205.0811 us. Best GFLOPs: 272.9093
2024-04-29 06:36:12 [INFO] [task_scheduler.cc:131] [Task #28: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_27] Trial #121: GFLOPs: 154.2571. Time: 937.2802 us. Best GFLOPs: 272.9093
2024-04-29 06:36:12 [INFO] [task_scheduler.cc:131] [Task #28: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_27] Trial #122: GFLOPs: 101.7816. Time: 1420.5130 us. Best GFLOPs: 272.9093
2024-04-29 06:36:12 [INFO] [task_scheduler.cc:131] [Task #28: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_27] Trial #123: GFLOPs: 127.8503. Time: 1130.8709 us. Best GFLOPs: 272.9093
2024-04-29 06:36:12 [INFO] [task_scheduler.cc:131] [Task #28: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_27] Trial #124: GFLOPs: 131.1383. Time: 1102.5167 us. Best GFLOPs: 272.9093
2024-04-29 06:36:12 [INFO] [task_scheduler.cc:131] [Task #28: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_27] Trial #125: GFLOPs: 123.9250. Time: 1166.6909 us. Best GFLOPs: 272.9093
2024-04-29 06:36:12 [INFO] [task_scheduler.cc:131] [Task #28: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_27] Trial #126: GFLOPs: 90.5211. Time: 1597.2209 us. Best GFLOPs: 272.9093
2024-04-29 06:36:12 [INFO] [task_scheduler.cc:131] [Task #28: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_27] Trial #127: GFLOPs: 55.2000. Time: 2619.2408 us. Best GFLOPs: 272.9093
2024-04-29 06:36:12 [INFO] [task_scheduler.cc:131] [Task #28: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_27] Trial #128: GFLOPs: 28.9717. Time: 4990.4526 us. Best GFLOPs: 272.9093
