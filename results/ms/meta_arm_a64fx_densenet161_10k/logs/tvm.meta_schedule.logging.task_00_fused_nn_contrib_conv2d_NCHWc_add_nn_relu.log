2024-04-29 02:28:20 [INFO] [task_scheduler.cc:160] Initializing Task #0: "fused_nn_contrib_conv2d_NCHWc_add_nn_relu"
2024-04-29 02:28:20 [INFO] [task_scheduler.cc:35] 
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(540), T.int64(7), T.int64(7), T.int64(4)), "float32"), p1: T.Buffer((T.int64(48), T.int64(540), T.int64(1), T.int64(1), T.int64(4), T.int64(4)), "float32"), p2: T.Buffer((T.int64(1), T.int64(48), T.int64(1), T.int64(1), T.int64(4)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(48), T.int64(7), T.int64(7), T.int64(4)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        conv2d_NCHWc = T.alloc_buffer((T.int64(1), T.int64(48), T.int64(7), T.int64(7), T.int64(4)))
        T_add = T.alloc_buffer((T.int64(1), T.int64(48), T.int64(7), T.int64(7), T.int64(4)))
        for n, oc_chunk, oh, ow, oc_block, ic, kh, kw in T.grid(T.int64(1), T.int64(48), T.int64(7), T.int64(7), T.int64(4), T.int64(2160), T.int64(1), T.int64(1)):
            with T.block("conv2d_NCHWc"):
                v_n, v_oc_chunk, v_oh, v_ow, v_oc_block, v_ic, v_kh, v_kw = T.axis.remap("SSSSSRRR", [n, oc_chunk, oh, ow, oc_block, ic, kh, kw])
                T.reads(p0[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)], p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block])
                T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                with T.init():
                    conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = T.float32(0)
                conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] + p0[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)] * p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block]
        for ax0, ax1, ax2, ax3, ax4 in T.grid(T.int64(1), T.int64(48), T.int64(7), T.int64(7), T.int64(4)):
            with T.block("T_add"):
                v_ax0, v_ax1, v_ax2, v_ax3, v_ax4 = T.axis.remap("SSSSS", [ax0, ax1, ax2, ax3, ax4])
                T.reads(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4])
                T.writes(T_add[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                T_add[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] + p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4]
        for ax0, ax1, ax2, ax3, ax4 in T.grid(T.int64(1), T.int64(48), T.int64(7), T.int64(7), T.int64(4)):
            with T.block("T_relu"):
                v_ax0, v_ax1, v_ax2, v_ax3, v_ax4 = T.axis.remap("SSSSS", [ax0, ax1, ax2, ax3, ax4])
                T.reads(T_add[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                T.writes(T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.max(T_add[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], T.float32(0))
2024-04-29 02:28:20 [INFO] [task_scheduler.cc:164] Total 3 design space(s) generated
2024-04-29 02:28:20 [INFO] [task_scheduler.cc:170] Design space #0:
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(540), T.int64(7), T.int64(7), T.int64(4)), "float32"), p1: T.Buffer((T.int64(48), T.int64(540), T.int64(1), T.int64(1), T.int64(4), T.int64(4)), "float32"), p2: T.Buffer((T.int64(1), T.int64(48), T.int64(1), T.int64(1), T.int64(4)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(48), T.int64(7), T.int64(7), T.int64(4)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        with T.block("root"):
            T.reads()
            T.writes()
            T.block_attr({"meta_schedule.parallel": 768, "meta_schedule.unroll_explicit": 512, "meta_schedule.vectorize": 64})
            conv2d_NCHWc = T.alloc_buffer((T.int64(1), T.int64(48), T.int64(7), T.int64(7), T.int64(4)))
            for n_0, oc_chunk_0, oh_0, ow_0, oc_block_0, n_1, oc_chunk_1, oh_1, ow_1, oc_block_1, ic_0, kh_0, kw_0, n_2, oc_chunk_2, oh_2, ow_2, oc_block_2, ic_1, kh_1, kw_1, n_3, oc_chunk_3, oh_3, ow_3, oc_block_3 in T.grid(T.int64(1), T.int64(3), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(2160), T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(7), T.int64(1), T.int64(2), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(8), T.int64(1), T.int64(7), T.int64(2)):
                with T.block("conv2d_NCHWc"):
                    v_n = T.axis.spatial(T.int64(1), n_0 + n_1 + n_2 + n_3)
                    v_oc_chunk = T.axis.spatial(T.int64(48), oc_chunk_0 * T.int64(16) + oc_chunk_1 * T.int64(16) + oc_chunk_2 * T.int64(8) + oc_chunk_3)
                    v_oh = T.axis.spatial(T.int64(7), oh_0 * T.int64(7) + oh_1 * T.int64(7) + oh_2 + oh_3)
                    v_ow = T.axis.spatial(T.int64(7), ow_0 * T.int64(7) + ow_1 * T.int64(7) + ow_2 * T.int64(7) + ow_3)
                    v_oc_block = T.axis.spatial(T.int64(4), oc_block_0 * T.int64(4) + oc_block_1 * T.int64(4) + oc_block_2 * T.int64(2) + oc_block_3)
                    v_ic = T.axis.reduce(T.int64(2160), ic_0 + ic_1)
                    v_kh = T.axis.reduce(T.int64(1), kh_0 + kh_1)
                    v_kw = T.axis.reduce(T.int64(1), kw_0 + kw_1)
                    T.reads(p0[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)], p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block])
                    T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                    T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                    with T.init():
                        conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = T.float32(0)
                    conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] + p0[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)] * p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block]
            for ax0, ax1, ax2, ax3, ax4 in T.grid(T.int64(1), T.int64(48), T.int64(7), T.int64(7), T.int64(4)):
                with T.block("T_relu"):
                    v_ax0, v_ax1, v_ax2, v_ax3, v_ax4 = T.axis.remap("SSSSS", [ax0, ax1, ax2, ax3, ax4])
                    T.reads(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4])
                    T.writes(T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                    T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.max(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] + p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4], T.float32(0))
b0 = sch.get_block(name="conv2d_NCHWc", func_name="main")
b1 = sch.get_block(name="T_add", func_name="main")
b2 = sch.get_block(name="root", func_name="main")
sch.compute_inline(block=b1)
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.tiling_structure", ann_val="SSRSRS")
l3, l4, l5, l6, l7, l8, l9, l10 = sch.get_loops(block=b0)
v11, v12, v13, v14 = sch.sample_perfect_tile(loop=l3, n=4, max_innermost_factor=64, decision=[1, 1, 1, 1])
l15, l16, l17, l18 = sch.split(loop=l3, factors=[v11, v12, v13, v14], preserve_unit_iters=True)
v19, v20, v21, v22 = sch.sample_perfect_tile(loop=l4, n=4, max_innermost_factor=64, decision=[3, 1, 2, 8])
l23, l24, l25, l26 = sch.split(loop=l4, factors=[v19, v20, v21, v22], preserve_unit_iters=True)
v27, v28, v29, v30 = sch.sample_perfect_tile(loop=l5, n=4, max_innermost_factor=64, decision=[1, 1, 7, 1])
l31, l32, l33, l34 = sch.split(loop=l5, factors=[v27, v28, v29, v30], preserve_unit_iters=True)
v35, v36, v37, v38 = sch.sample_perfect_tile(loop=l6, n=4, max_innermost_factor=64, decision=[1, 1, 1, 7])
l39, l40, l41, l42 = sch.split(loop=l6, factors=[v35, v36, v37, v38], preserve_unit_iters=True)
v43, v44, v45, v46 = sch.sample_perfect_tile(loop=l7, n=4, max_innermost_factor=64, decision=[1, 1, 2, 2])
l47, l48, l49, l50 = sch.split(loop=l7, factors=[v43, v44, v45, v46], preserve_unit_iters=True)
v51, v52 = sch.sample_perfect_tile(loop=l8, n=2, max_innermost_factor=64, decision=[2160, 1])
l53, l54 = sch.split(loop=l8, factors=[v51, v52], preserve_unit_iters=True)
v55, v56 = sch.sample_perfect_tile(loop=l9, n=2, max_innermost_factor=64, decision=[1, 1])
l57, l58 = sch.split(loop=l9, factors=[v55, v56], preserve_unit_iters=True)
v59, v60 = sch.sample_perfect_tile(loop=l10, n=2, max_innermost_factor=64, decision=[1, 1])
l61, l62 = sch.split(loop=l10, factors=[v59, v60], preserve_unit_iters=True)
sch.reorder(l15, l23, l31, l39, l47, l16, l24, l32, l40, l48, l53, l57, l61, l17, l25, l33, l41, l49, l54, l58, l62, l18, l26, l34, l42, l50)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.vectorize", ann_val=64)
v63 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.unroll_explicit", ann_val=v63)
2024-04-29 02:28:20 [INFO] [task_scheduler.cc:170] Design space #1:
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(540), T.int64(7), T.int64(7), T.int64(4)), "float32"), p1: T.Buffer((T.int64(48), T.int64(540), T.int64(1), T.int64(1), T.int64(4), T.int64(4)), "float32"), p2: T.Buffer((T.int64(1), T.int64(48), T.int64(1), T.int64(1), T.int64(4)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(48), T.int64(7), T.int64(7), T.int64(4)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        with T.block("root"):
            T.reads()
            T.writes()
            T.block_attr({"meta_schedule.parallel": 768, "meta_schedule.unroll_explicit": 512, "meta_schedule.vectorize": 64})
            conv2d_NCHWc = T.alloc_buffer((T.int64(1), T.int64(48), T.int64(7), T.int64(7), T.int64(4)))
            for n_0, oc_chunk_0, oh_0, ow_0, oc_block_0, n_1, oc_chunk_1, oh_1, ow_1, oc_block_1 in T.grid(T.int64(1), T.int64(3), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1)):
                for ic_0, kh_0, kw_0, n_2, oc_chunk_2, oh_2, ow_2, oc_block_2, ic_1, kh_1, kw_1, n_3, oc_chunk_3, oh_3, ow_3, oc_block_3 in T.grid(T.int64(2160), T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(7), T.int64(1), T.int64(2), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(8), T.int64(1), T.int64(7), T.int64(2)):
                    with T.block("conv2d_NCHWc"):
                        v_n = T.axis.spatial(T.int64(1), n_0 + n_1 + n_2 + n_3)
                        v_oc_chunk = T.axis.spatial(T.int64(48), oc_chunk_0 * T.int64(16) + oc_chunk_1 * T.int64(16) + oc_chunk_2 * T.int64(8) + oc_chunk_3)
                        v_oh = T.axis.spatial(T.int64(7), oh_0 * T.int64(7) + oh_1 * T.int64(7) + oh_2 + oh_3)
                        v_ow = T.axis.spatial(T.int64(7), ow_0 * T.int64(7) + ow_1 * T.int64(7) + ow_2 * T.int64(7) + ow_3)
                        v_oc_block = T.axis.spatial(T.int64(4), oc_block_0 * T.int64(4) + oc_block_1 * T.int64(4) + oc_block_2 * T.int64(2) + oc_block_3)
                        v_ic = T.axis.reduce(T.int64(2160), ic_0 + ic_1)
                        v_kh = T.axis.reduce(T.int64(1), kh_0 + kh_1)
                        v_kw = T.axis.reduce(T.int64(1), kw_0 + kw_1)
                        T.reads(p0[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)], p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block])
                        T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                        T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                        with T.init():
                            conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = T.float32(0)
                        conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] + p0[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)] * p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block]
                for ax0, ax1, ax2, ax3, ax4 in T.grid(T.int64(1), T.int64(16), T.int64(7), T.int64(7), T.int64(4)):
                    with T.block("T_relu"):
                        v_ax0 = T.axis.spatial(T.int64(1), ax0)
                        v_ax1 = T.axis.spatial(T.int64(48), oc_chunk_0 * T.int64(16) + ax1)
                        v_ax2, v_ax3, v_ax4 = T.axis.remap("SSS", [ax2, ax3, ax4])
                        T.reads(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4])
                        T.writes(T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                        T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.max(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] + p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4], T.float32(0))
b0 = sch.get_block(name="conv2d_NCHWc", func_name="main")
b1 = sch.get_block(name="T_add", func_name="main")
b2 = sch.get_block(name="root", func_name="main")
sch.compute_inline(block=b1)
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.tiling_structure", ann_val="SSRSRS")
l3, l4, l5, l6, l7, l8, l9, l10 = sch.get_loops(block=b0)
v11, v12, v13, v14 = sch.sample_perfect_tile(loop=l3, n=4, max_innermost_factor=64, decision=[1, 1, 1, 1])
l15, l16, l17, l18 = sch.split(loop=l3, factors=[v11, v12, v13, v14], preserve_unit_iters=True)
v19, v20, v21, v22 = sch.sample_perfect_tile(loop=l4, n=4, max_innermost_factor=64, decision=[3, 1, 2, 8])
l23, l24, l25, l26 = sch.split(loop=l4, factors=[v19, v20, v21, v22], preserve_unit_iters=True)
v27, v28, v29, v30 = sch.sample_perfect_tile(loop=l5, n=4, max_innermost_factor=64, decision=[1, 1, 7, 1])
l31, l32, l33, l34 = sch.split(loop=l5, factors=[v27, v28, v29, v30], preserve_unit_iters=True)
v35, v36, v37, v38 = sch.sample_perfect_tile(loop=l6, n=4, max_innermost_factor=64, decision=[1, 1, 1, 7])
l39, l40, l41, l42 = sch.split(loop=l6, factors=[v35, v36, v37, v38], preserve_unit_iters=True)
v43, v44, v45, v46 = sch.sample_perfect_tile(loop=l7, n=4, max_innermost_factor=64, decision=[1, 1, 2, 2])
l47, l48, l49, l50 = sch.split(loop=l7, factors=[v43, v44, v45, v46], preserve_unit_iters=True)
v51, v52 = sch.sample_perfect_tile(loop=l8, n=2, max_innermost_factor=64, decision=[2160, 1])
l53, l54 = sch.split(loop=l8, factors=[v51, v52], preserve_unit_iters=True)
v55, v56 = sch.sample_perfect_tile(loop=l9, n=2, max_innermost_factor=64, decision=[1, 1])
l57, l58 = sch.split(loop=l9, factors=[v55, v56], preserve_unit_iters=True)
v59, v60 = sch.sample_perfect_tile(loop=l10, n=2, max_innermost_factor=64, decision=[1, 1])
l61, l62 = sch.split(loop=l10, factors=[v59, v60], preserve_unit_iters=True)
sch.reorder(l15, l23, l31, l39, l47, l16, l24, l32, l40, l48, l53, l57, l61, l17, l25, l33, l41, l49, l54, l58, l62, l18, l26, l34, l42, l50)
b63, = sch.get_consumers(block=b0)
sch.reverse_compute_at(block=b63, loop=l48, preserve_unit_loops=True, index=-1)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.vectorize", ann_val=64)
v64 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.unroll_explicit", ann_val=v64)
2024-04-29 02:28:20 [INFO] [task_scheduler.cc:170] Design space #2:
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(540), T.int64(7), T.int64(7), T.int64(4)), "float32"), p1: T.Buffer((T.int64(48), T.int64(540), T.int64(1), T.int64(1), T.int64(4), T.int64(4)), "float32"), p2: T.Buffer((T.int64(1), T.int64(48), T.int64(1), T.int64(1), T.int64(4)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(48), T.int64(7), T.int64(7), T.int64(4)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        with T.block("root"):
            T.reads()
            T.writes()
            T.block_attr({"meta_schedule.parallel": 768, "meta_schedule.unroll_explicit": 512, "meta_schedule.vectorize": 64})
            conv2d_NCHWc = T.alloc_buffer((T.int64(1), T.int64(48), T.int64(7), T.int64(7), T.int64(4)))
            for n_0, oc_chunk_0, oh_0, ow_0, oc_block_0 in T.grid(T.int64(1), T.int64(3), T.int64(1), T.int64(1), T.int64(1)):
                for n_1, oc_chunk_1, oh_1, ow_1, oc_block_1, ic_0, kh_0, kw_0, n_2, oc_chunk_2, oh_2, ow_2, oc_block_2, ic_1, kh_1, kw_1, n_3, oc_chunk_3, oh_3, ow_3, oc_block_3 in T.grid(T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(2160), T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(7), T.int64(1), T.int64(2), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(8), T.int64(1), T.int64(7), T.int64(2)):
                    with T.block("conv2d_NCHWc"):
                        v_n = T.axis.spatial(T.int64(1), n_0 + n_1 + n_2 + n_3)
                        v_oc_chunk = T.axis.spatial(T.int64(48), oc_chunk_0 * T.int64(16) + oc_chunk_1 * T.int64(16) + oc_chunk_2 * T.int64(8) + oc_chunk_3)
                        v_oh = T.axis.spatial(T.int64(7), oh_0 * T.int64(7) + oh_1 * T.int64(7) + oh_2 + oh_3)
                        v_ow = T.axis.spatial(T.int64(7), ow_0 * T.int64(7) + ow_1 * T.int64(7) + ow_2 * T.int64(7) + ow_3)
                        v_oc_block = T.axis.spatial(T.int64(4), oc_block_0 * T.int64(4) + oc_block_1 * T.int64(4) + oc_block_2 * T.int64(2) + oc_block_3)
                        v_ic = T.axis.reduce(T.int64(2160), ic_0 + ic_1)
                        v_kh = T.axis.reduce(T.int64(1), kh_0 + kh_1)
                        v_kw = T.axis.reduce(T.int64(1), kw_0 + kw_1)
                        T.reads(p0[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)], p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block])
                        T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                        T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                        with T.init():
                            conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = T.float32(0)
                        conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] + p0[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)] * p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block]
                for ax0, ax1, ax2, ax3, ax4 in T.grid(T.int64(1), T.int64(16), T.int64(7), T.int64(7), T.int64(4)):
                    with T.block("T_relu"):
                        v_ax0 = T.axis.spatial(T.int64(1), ax0)
                        v_ax1 = T.axis.spatial(T.int64(48), oc_chunk_0 * T.int64(16) + ax1)
                        v_ax2, v_ax3, v_ax4 = T.axis.remap("SSS", [ax2, ax3, ax4])
                        T.reads(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4])
                        T.writes(T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                        T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.max(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] + p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4], T.float32(0))
b0 = sch.get_block(name="conv2d_NCHWc", func_name="main")
b1 = sch.get_block(name="T_add", func_name="main")
b2 = sch.get_block(name="root", func_name="main")
sch.compute_inline(block=b1)
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.tiling_structure", ann_val="SSRSRS")
l3, l4, l5, l6, l7, l8, l9, l10 = sch.get_loops(block=b0)
v11, v12, v13, v14 = sch.sample_perfect_tile(loop=l3, n=4, max_innermost_factor=64, decision=[1, 1, 1, 1])
l15, l16, l17, l18 = sch.split(loop=l3, factors=[v11, v12, v13, v14], preserve_unit_iters=True)
v19, v20, v21, v22 = sch.sample_perfect_tile(loop=l4, n=4, max_innermost_factor=64, decision=[3, 1, 2, 8])
l23, l24, l25, l26 = sch.split(loop=l4, factors=[v19, v20, v21, v22], preserve_unit_iters=True)
v27, v28, v29, v30 = sch.sample_perfect_tile(loop=l5, n=4, max_innermost_factor=64, decision=[1, 1, 7, 1])
l31, l32, l33, l34 = sch.split(loop=l5, factors=[v27, v28, v29, v30], preserve_unit_iters=True)
v35, v36, v37, v38 = sch.sample_perfect_tile(loop=l6, n=4, max_innermost_factor=64, decision=[1, 1, 1, 7])
l39, l40, l41, l42 = sch.split(loop=l6, factors=[v35, v36, v37, v38], preserve_unit_iters=True)
v43, v44, v45, v46 = sch.sample_perfect_tile(loop=l7, n=4, max_innermost_factor=64, decision=[1, 1, 2, 2])
l47, l48, l49, l50 = sch.split(loop=l7, factors=[v43, v44, v45, v46], preserve_unit_iters=True)
v51, v52 = sch.sample_perfect_tile(loop=l8, n=2, max_innermost_factor=64, decision=[2160, 1])
l53, l54 = sch.split(loop=l8, factors=[v51, v52], preserve_unit_iters=True)
v55, v56 = sch.sample_perfect_tile(loop=l9, n=2, max_innermost_factor=64, decision=[1, 1])
l57, l58 = sch.split(loop=l9, factors=[v55, v56], preserve_unit_iters=True)
v59, v60 = sch.sample_perfect_tile(loop=l10, n=2, max_innermost_factor=64, decision=[1, 1])
l61, l62 = sch.split(loop=l10, factors=[v59, v60], preserve_unit_iters=True)
sch.reorder(l15, l23, l31, l39, l47, l16, l24, l32, l40, l48, l53, l57, l61, l17, l25, l33, l41, l49, l54, l58, l62, l18, l26, l34, l42, l50)
b63, = sch.get_consumers(block=b0)
sch.reverse_compute_at(block=b63, loop=l47, preserve_unit_loops=True, index=-1)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.vectorize", ann_val=64)
v64 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.unroll_explicit", ann_val=v64)
2024-04-29 02:34:16 [INFO] [evolutionary_search.cc:713] Generating candidates......
2024-04-29 02:34:16 [INFO] [evolutionary_search.cc:715] Picked top 0 candidate(s) from database
2024-04-29 02:34:18 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0xa080d28)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x83095c8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x10c05408)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0xaa09de8)]: 0 failure(s)
2024-04-29 02:34:18 [INFO] [evolutionary_search.cc:723] Sampled 512 candidate(s)
2024-04-29 02:34:21 [INFO] [evolutionary_search.cc:621] Evolve iter #0 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0xa080d28)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x83095c8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x10c05408)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0xaa09de8)]: 0 failure(s)
2024-04-29 02:34:24 [INFO] [evolutionary_search.cc:621] Evolve iter #1 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0xa080d28)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x83095c8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x10c05408)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0xaa09de8)]: 0 failure(s)
2024-04-29 02:34:27 [INFO] [evolutionary_search.cc:621] Evolve iter #2 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0xa080d28)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x83095c8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x10c05408)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0xaa09de8)]: 0 failure(s)
2024-04-29 02:34:30 [INFO] [evolutionary_search.cc:621] Evolve iter #3 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0xa080d28)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x83095c8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x10c05408)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0xaa09de8)]: 0 failure(s)
2024-04-29 02:34:31 [INFO] [evolutionary_search.cc:649] Scores of the best 64 candidates:
[1 : 16]:	0.9981  0.9978  0.9977  0.9973  0.9971  0.9968  0.9967  0.9956  0.9946  0.9946  0.9945  0.9937  0.9934  0.9933  0.9930  0.9928
[17 : 32]:	0.9922  0.9917  0.9915  0.9910  0.9903  0.9901  0.9901  0.9895  0.9893  0.9893  0.9893  0.9892  0.9887  0.9880  0.9879  0.9868
[33 : 48]:	0.9863  0.9859  0.9857  0.9849  0.9847  0.9846  0.9844  0.9841  0.9836  0.9835  0.9831  0.9821  0.9814  0.9810  0.9806  0.9802
[49 : 64]:	0.9799  0.9798  0.9794  0.9791  0.9787  0.9778  0.9778  0.9769  0.9765  0.9762  0.9760  0.9758  0.9754  0.9753  0.9744  0.9742
2024-04-29 02:34:31 [INFO] [evolutionary_search.cc:727] Got 64 candidate(s) with evolutionary search
2024-04-29 02:34:31 [INFO] [evolutionary_search.cc:730] Sending 64 candidates(s) for measurement
2024-04-29 05:03:26 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_NCHWc_add_nn_relu] Trial #1: GFLOPs: 37.2294. Time: 1092.1840 us. Best GFLOPs: 37.2294
2024-04-29 05:03:26 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_NCHWc_add_nn_relu] Trial #2: GFLOPs: 2.4983. Time: 16275.6060 us. Best GFLOPs: 37.2294
2024-04-29 05:03:26 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_NCHWc_add_nn_relu] Trial #3: GFLOPs: 4.1900. Time: 9704.4949 us. Best GFLOPs: 37.2294
2024-04-29 05:03:26 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_NCHWc_add_nn_relu] Trial #4: GFLOPs: 9.9297. Time: 4094.9070 us. Best GFLOPs: 37.2294
2024-04-29 05:03:26 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_NCHWc_add_nn_relu] Trial #5: GFLOPs: 14.1799. Time: 2867.5267 us. Best GFLOPs: 37.2294
2024-04-29 05:03:26 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_NCHWc_add_nn_relu] Trial #6: GFLOPs: 15.7626. Time: 2579.6059 us. Best GFLOPs: 37.2294
2024-04-29 05:03:26 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_NCHWc_add_nn_relu] Trial #7: GFLOPs: 5.9797. Time: 6799.8461 us. Best GFLOPs: 37.2294
2024-04-29 05:03:26 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_NCHWc_add_nn_relu] Trial #8: GFLOPs: 19.6677. Time: 2067.4207 us. Best GFLOPs: 37.2294
2024-04-29 05:03:26 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_NCHWc_add_nn_relu] Trial #9: GFLOPs: 35.5065. Time: 1145.1816 us. Best GFLOPs: 37.2294
2024-04-29 05:03:26 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_NCHWc_add_nn_relu] Trial #10: GFLOPs: 64.8951. Time: 626.5711 us. Best GFLOPs: 64.8951
2024-04-29 05:03:26 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_NCHWc_add_nn_relu] Trial #11: GFLOPs: 15.5042. Time: 2622.5975 us. Best GFLOPs: 64.8951
2024-04-29 05:03:26 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_NCHWc_add_nn_relu] Trial #12: GFLOPs: 41.5944. Time: 977.5674 us. Best GFLOPs: 64.8951
2024-04-29 05:03:26 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_NCHWc_add_nn_relu] Trial #13: GFLOPs: 21.6158. Time: 1881.0939 us. Best GFLOPs: 64.8951
2024-04-29 05:03:26 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_NCHWc_add_nn_relu] Trial #14: GFLOPs: 68.1496. Time: 596.6488 us. Best GFLOPs: 68.1496
2024-04-29 05:03:26 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_NCHWc_add_nn_relu] Trial #15: GFLOPs: 59.3966. Time: 684.5744 us. Best GFLOPs: 68.1496
2024-04-29 05:03:26 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_NCHWc_add_nn_relu] Trial #16: GFLOPs: 13.4347. Time: 3026.5924 us. Best GFLOPs: 68.1496
2024-04-29 05:03:26 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_NCHWc_add_nn_relu] Trial #17: GFLOPs: 73.7551. Time: 551.3022 us. Best GFLOPs: 73.7551
2024-04-29 05:03:26 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_NCHWc_add_nn_relu] Trial #18: GFLOPs: 35.2505. Time: 1153.4987 us. Best GFLOPs: 73.7551
2024-04-29 05:03:26 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_NCHWc_add_nn_relu] Trial #19: GFLOPs: 0.8060. Time: 50450.6690 us. Best GFLOPs: 73.7551
2024-04-29 05:03:26 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_NCHWc_add_nn_relu] Trial #20: GFLOPs: 36.3020. Time: 1120.0879 us. Best GFLOPs: 73.7551
2024-04-29 05:03:26 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_NCHWc_add_nn_relu] Trial #21: GFLOPs: 67.4531. Time: 602.8100 us. Best GFLOPs: 73.7551
2024-04-29 05:03:26 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_NCHWc_add_nn_relu] Trial #22: GFLOPs: 68.7404. Time: 591.5208 us. Best GFLOPs: 73.7551
2024-04-29 05:03:26 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_NCHWc_add_nn_relu] Trial #23: GFLOPs: 27.7799. Time: 1463.6979 us. Best GFLOPs: 73.7551
2024-04-29 05:03:26 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_NCHWc_add_nn_relu] Trial #24: GFLOPs: 27.2548. Time: 1491.8977 us. Best GFLOPs: 73.7551
2024-04-29 05:03:26 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_NCHWc_add_nn_relu] Trial #25: GFLOPs: 130.9422. Time: 310.5292 us. Best GFLOPs: 130.9422
2024-04-29 05:03:26 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_NCHWc_add_nn_relu] Trial #26: GFLOPs: 153.2368. Time: 265.3499 us. Best GFLOPs: 153.2368
2024-04-29 05:03:26 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_NCHWc_add_nn_relu] Trial #27: GFLOPs: 19.0874. Time: 2130.2677 us. Best GFLOPs: 153.2368
2024-04-29 05:03:26 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_NCHWc_add_nn_relu] Trial #28: GFLOPs: 88.0104. Time: 462.0062 us. Best GFLOPs: 153.2368
2024-04-29 05:03:26 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_NCHWc_add_nn_relu] Trial #29: GFLOPs: 57.8167. Time: 703.2808 us. Best GFLOPs: 153.2368
2024-04-29 05:03:26 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_NCHWc_add_nn_relu] Trial #30: GFLOPs: 67.6338. Time: 601.1990 us. Best GFLOPs: 153.2368
2024-04-29 05:03:26 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_NCHWc_add_nn_relu] Trial #31: GFLOPs: 31.8585. Time: 1276.3123 us. Best GFLOPs: 153.2368
2024-04-29 05:03:26 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_NCHWc_add_nn_relu] Trial #32: GFLOPs: 62.5428. Time: 650.1368 us. Best GFLOPs: 153.2368
2024-04-29 05:03:26 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_NCHWc_add_nn_relu] Trial #33: GFLOPs: 47.9800. Time: 847.4651 us. Best GFLOPs: 153.2368
2024-04-29 05:03:26 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_NCHWc_add_nn_relu] Trial #34: GFLOPs: 7.2485. Time: 5609.6591 us. Best GFLOPs: 153.2368
2024-04-29 05:03:26 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_NCHWc_add_nn_relu] Trial #35: GFLOPs: 92.7214. Time: 438.5328 us. Best GFLOPs: 153.2368
2024-04-29 05:03:26 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_NCHWc_add_nn_relu] Trial #36: GFLOPs: 24.6534. Time: 1649.3182 us. Best GFLOPs: 153.2368
2024-04-29 05:03:26 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_NCHWc_add_nn_relu] Trial #37: GFLOPs: 6.5451. Time: 6212.4485 us. Best GFLOPs: 153.2368
2024-04-29 05:03:26 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_NCHWc_add_nn_relu] Trial #38: GFLOPs: 17.8249. Time: 2281.1595 us. Best GFLOPs: 153.2368
2024-04-29 05:03:26 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_NCHWc_add_nn_relu] Trial #39: GFLOPs: 1.6986. Time: 23938.8744 us. Best GFLOPs: 153.2368
2024-04-29 05:03:26 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_NCHWc_add_nn_relu] Trial #40: GFLOPs: 36.4773. Time: 1114.7046 us. Best GFLOPs: 153.2368
2024-04-29 05:03:26 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_NCHWc_add_nn_relu] Trial #41: GFLOPs: 2.5131. Time: 16179.9772 us. Best GFLOPs: 153.2368
2024-04-29 05:03:26 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_NCHWc_add_nn_relu] Trial #42: GFLOPs: 72.2012. Time: 563.1678 us. Best GFLOPs: 153.2368
2024-04-29 05:03:26 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_NCHWc_add_nn_relu] Trial #43: GFLOPs: 99.0113. Time: 410.6743 us. Best GFLOPs: 153.2368
2024-04-29 05:03:26 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_NCHWc_add_nn_relu] Trial #44: GFLOPs: 53.6164. Time: 758.3754 us. Best GFLOPs: 153.2368
2024-04-29 05:03:26 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_NCHWc_add_nn_relu] Trial #45: GFLOPs: 15.4524. Time: 2631.3928 us. Best GFLOPs: 153.2368
2024-04-29 05:03:26 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_NCHWc_add_nn_relu] Trial #46: GFLOPs: 43.8424. Time: 927.4437 us. Best GFLOPs: 153.2368
2024-04-29 05:03:26 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_NCHWc_add_nn_relu] Trial #47: GFLOPs: 114.5698. Time: 354.9048 us. Best GFLOPs: 153.2368
2024-04-29 05:03:26 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_NCHWc_add_nn_relu] Trial #48: GFLOPs: 17.8756. Time: 2274.6889 us. Best GFLOPs: 153.2368
2024-04-29 05:03:26 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_NCHWc_add_nn_relu] Trial #49: GFLOPs: 72.8805. Time: 557.9183 us. Best GFLOPs: 153.2368
2024-04-29 05:03:26 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_NCHWc_add_nn_relu] Trial #50: GFLOPs: 18.8699. Time: 2154.8293 us. Best GFLOPs: 153.2368
2024-04-29 05:03:26 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_NCHWc_add_nn_relu] Trial #51: GFLOPs: 29.9361. Time: 1358.2723 us. Best GFLOPs: 153.2368
2024-04-29 05:03:26 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_NCHWc_add_nn_relu] Trial #52: GFLOPs: 70.3060. Time: 578.3488 us. Best GFLOPs: 153.2368
2024-04-29 05:03:26 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_NCHWc_add_nn_relu] Trial #53: GFLOPs: 88.7028. Time: 458.4001 us. Best GFLOPs: 153.2368
2024-04-29 05:03:26 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_NCHWc_add_nn_relu] Trial #54: GFLOPs: 1.1037. Time: 36841.9130 us. Best GFLOPs: 153.2368
2024-04-29 05:03:26 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_NCHWc_add_nn_relu] Trial #55: GFLOPs: 66.9251. Time: 607.5658 us. Best GFLOPs: 153.2368
2024-04-29 05:03:26 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_NCHWc_add_nn_relu] Trial #56: GFLOPs: 145.2852. Time: 279.8727 us. Best GFLOPs: 153.2368
2024-04-29 05:03:26 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_NCHWc_add_nn_relu] Trial #57: GFLOPs: 74.8396. Time: 543.3140 us. Best GFLOPs: 153.2368
2024-04-29 05:03:26 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_NCHWc_add_nn_relu] Trial #58: GFLOPs: 71.6779. Time: 567.2788 us. Best GFLOPs: 153.2368
2024-04-29 05:03:26 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_NCHWc_add_nn_relu] Trial #59: GFLOPs: 69.9465. Time: 581.3208 us. Best GFLOPs: 153.2368
2024-04-29 05:03:26 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_NCHWc_add_nn_relu] Trial #60: GFLOPs: 95.2829. Time: 426.7436 us. Best GFLOPs: 153.2368
2024-04-29 05:03:26 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_NCHWc_add_nn_relu] Trial #61: GFLOPs: 102.6767. Time: 396.0136 us. Best GFLOPs: 153.2368
2024-04-29 05:03:26 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_NCHWc_add_nn_relu] Trial #62: GFLOPs: 136.4949. Time: 297.8968 us. Best GFLOPs: 153.2368
2024-04-29 05:03:26 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_NCHWc_add_nn_relu] Trial #63: GFLOPs: 21.3454. Time: 1904.9263 us. Best GFLOPs: 153.2368
2024-04-29 05:03:26 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_NCHWc_add_nn_relu] Trial #64: GFLOPs: 86.8588. Time: 468.1317 us. Best GFLOPs: 153.2368
