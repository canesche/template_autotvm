2024-04-29 02:32:03 [INFO] [task_scheduler.cc:160] Initializing Task #57: "fused_nn_contrib_conv2d_NCHWc_add_nn_relu_56"
2024-04-29 02:32:03 [INFO] [task_scheduler.cc:35] 
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(132), T.int64(14), T.int64(14), T.int64(4)), "float32"), p1: T.Buffer((T.int64(48), T.int64(132), T.int64(1), T.int64(1), T.int64(4), T.int64(4)), "float32"), p2: T.Buffer((T.int64(1), T.int64(48), T.int64(1), T.int64(1), T.int64(4)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(48), T.int64(14), T.int64(14), T.int64(4)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        conv2d_NCHWc = T.alloc_buffer((T.int64(1), T.int64(48), T.int64(14), T.int64(14), T.int64(4)))
        T_add = T.alloc_buffer((T.int64(1), T.int64(48), T.int64(14), T.int64(14), T.int64(4)))
        for n, oc_chunk, oh, ow, oc_block, ic, kh, kw in T.grid(T.int64(1), T.int64(48), T.int64(14), T.int64(14), T.int64(4), T.int64(528), T.int64(1), T.int64(1)):
            with T.block("conv2d_NCHWc"):
                v_n, v_oc_chunk, v_oh, v_ow, v_oc_block, v_ic, v_kh, v_kw = T.axis.remap("SSSSSRRR", [n, oc_chunk, oh, ow, oc_block, ic, kh, kw])
                T.reads(p0[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)], p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block])
                T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                with T.init():
                    conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = T.float32(0)
                conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] + p0[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)] * p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block]
        for ax0, ax1, ax2, ax3, ax4 in T.grid(T.int64(1), T.int64(48), T.int64(14), T.int64(14), T.int64(4)):
            with T.block("T_add"):
                v_ax0, v_ax1, v_ax2, v_ax3, v_ax4 = T.axis.remap("SSSSS", [ax0, ax1, ax2, ax3, ax4])
                T.reads(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4])
                T.writes(T_add[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                T_add[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] + p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4]
        for ax0, ax1, ax2, ax3, ax4 in T.grid(T.int64(1), T.int64(48), T.int64(14), T.int64(14), T.int64(4)):
            with T.block("T_relu"):
                v_ax0, v_ax1, v_ax2, v_ax3, v_ax4 = T.axis.remap("SSSSS", [ax0, ax1, ax2, ax3, ax4])
                T.reads(T_add[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                T.writes(T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.max(T_add[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], T.float32(0))
2024-04-29 02:32:04 [INFO] [task_scheduler.cc:164] Total 3 design space(s) generated
2024-04-29 02:32:04 [INFO] [task_scheduler.cc:170] Design space #0:
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(132), T.int64(14), T.int64(14), T.int64(4)), "float32"), p1: T.Buffer((T.int64(48), T.int64(132), T.int64(1), T.int64(1), T.int64(4), T.int64(4)), "float32"), p2: T.Buffer((T.int64(1), T.int64(48), T.int64(1), T.int64(1), T.int64(4)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(48), T.int64(14), T.int64(14), T.int64(4)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        with T.block("root"):
            T.reads()
            T.writes()
            T.block_attr({"meta_schedule.parallel": 768, "meta_schedule.unroll_explicit": 0, "meta_schedule.vectorize": 64})
            conv2d_NCHWc = T.alloc_buffer((T.int64(1), T.int64(48), T.int64(14), T.int64(14), T.int64(4)))
            for n_0, oc_chunk_0, oh_0, ow_0, oc_block_0, n_1, oc_chunk_1, oh_1, ow_1, oc_block_1, ic_0, kh_0, kw_0, n_2, oc_chunk_2, oh_2, ow_2, oc_block_2, ic_1, kh_1, kw_1, n_3, oc_chunk_3, oh_3, ow_3, oc_block_3 in T.grid(T.int64(1), T.int64(6), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(8), T.int64(1), T.int64(1), T.int64(1), T.int64(528), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(2), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(7), T.int64(7), T.int64(4)):
                with T.block("conv2d_NCHWc"):
                    v_n = T.axis.spatial(T.int64(1), n_0 + n_1 + n_2 + n_3)
                    v_oc_chunk = T.axis.spatial(T.int64(48), oc_chunk_0 * T.int64(8) + oc_chunk_1 + oc_chunk_2 + oc_chunk_3)
                    v_oh = T.axis.spatial(T.int64(14), oh_0 * T.int64(14) + oh_1 * T.int64(14) + oh_2 * T.int64(7) + oh_3)
                    v_ow = T.axis.spatial(T.int64(14), ow_0 * T.int64(14) + ow_1 * T.int64(14) + ow_2 * T.int64(7) + ow_3)
                    v_oc_block = T.axis.spatial(T.int64(4), oc_block_0 * T.int64(4) + oc_block_1 * T.int64(4) + oc_block_2 * T.int64(4) + oc_block_3)
                    v_ic = T.axis.reduce(T.int64(528), ic_0 + ic_1)
                    v_kh = T.axis.reduce(T.int64(1), kh_0 + kh_1)
                    v_kw = T.axis.reduce(T.int64(1), kw_0 + kw_1)
                    T.reads(p0[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)], p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block])
                    T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                    T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                    with T.init():
                        conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = T.float32(0)
                    conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] + p0[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)] * p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block]
            for ax0, ax1, ax2, ax3, ax4 in T.grid(T.int64(1), T.int64(48), T.int64(14), T.int64(14), T.int64(4)):
                with T.block("T_relu"):
                    v_ax0, v_ax1, v_ax2, v_ax3, v_ax4 = T.axis.remap("SSSSS", [ax0, ax1, ax2, ax3, ax4])
                    T.reads(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4])
                    T.writes(T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                    T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.max(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] + p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4], T.float32(0))
b0 = sch.get_block(name="conv2d_NCHWc", func_name="main")
b1 = sch.get_block(name="T_add", func_name="main")
b2 = sch.get_block(name="root", func_name="main")
sch.compute_inline(block=b1)
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.tiling_structure", ann_val="SSRSRS")
l3, l4, l5, l6, l7, l8, l9, l10 = sch.get_loops(block=b0)
v11, v12, v13, v14 = sch.sample_perfect_tile(loop=l3, n=4, max_innermost_factor=64, decision=[1, 1, 1, 1])
l15, l16, l17, l18 = sch.split(loop=l3, factors=[v11, v12, v13, v14], preserve_unit_iters=True)
v19, v20, v21, v22 = sch.sample_perfect_tile(loop=l4, n=4, max_innermost_factor=64, decision=[6, 8, 1, 1])
l23, l24, l25, l26 = sch.split(loop=l4, factors=[v19, v20, v21, v22], preserve_unit_iters=True)
v27, v28, v29, v30 = sch.sample_perfect_tile(loop=l5, n=4, max_innermost_factor=64, decision=[1, 1, 2, 7])
l31, l32, l33, l34 = sch.split(loop=l5, factors=[v27, v28, v29, v30], preserve_unit_iters=True)
v35, v36, v37, v38 = sch.sample_perfect_tile(loop=l6, n=4, max_innermost_factor=64, decision=[1, 1, 2, 7])
l39, l40, l41, l42 = sch.split(loop=l6, factors=[v35, v36, v37, v38], preserve_unit_iters=True)
v43, v44, v45, v46 = sch.sample_perfect_tile(loop=l7, n=4, max_innermost_factor=64, decision=[1, 1, 1, 4])
l47, l48, l49, l50 = sch.split(loop=l7, factors=[v43, v44, v45, v46], preserve_unit_iters=True)
v51, v52 = sch.sample_perfect_tile(loop=l8, n=2, max_innermost_factor=64, decision=[528, 1])
l53, l54 = sch.split(loop=l8, factors=[v51, v52], preserve_unit_iters=True)
v55, v56 = sch.sample_perfect_tile(loop=l9, n=2, max_innermost_factor=64, decision=[1, 1])
l57, l58 = sch.split(loop=l9, factors=[v55, v56], preserve_unit_iters=True)
v59, v60 = sch.sample_perfect_tile(loop=l10, n=2, max_innermost_factor=64, decision=[1, 1])
l61, l62 = sch.split(loop=l10, factors=[v59, v60], preserve_unit_iters=True)
sch.reorder(l15, l23, l31, l39, l47, l16, l24, l32, l40, l48, l53, l57, l61, l17, l25, l33, l41, l49, l54, l58, l62, l18, l26, l34, l42, l50)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.vectorize", ann_val=64)
v63 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=0)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.unroll_explicit", ann_val=v63)
2024-04-29 02:32:04 [INFO] [task_scheduler.cc:170] Design space #1:
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(132), T.int64(14), T.int64(14), T.int64(4)), "float32"), p1: T.Buffer((T.int64(48), T.int64(132), T.int64(1), T.int64(1), T.int64(4), T.int64(4)), "float32"), p2: T.Buffer((T.int64(1), T.int64(48), T.int64(1), T.int64(1), T.int64(4)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(48), T.int64(14), T.int64(14), T.int64(4)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        with T.block("root"):
            T.reads()
            T.writes()
            T.block_attr({"meta_schedule.parallel": 768, "meta_schedule.unroll_explicit": 64, "meta_schedule.vectorize": 64})
            conv2d_NCHWc = T.alloc_buffer((T.int64(1), T.int64(48), T.int64(14), T.int64(14), T.int64(4)))
            for n_0, oc_chunk_0, oh_0, ow_0, oc_block_0, n_1, oc_chunk_1, oh_1, ow_1, oc_block_1 in T.grid(T.int64(1), T.int64(6), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(8), T.int64(1), T.int64(1), T.int64(1)):
                for ic_0, kh_0, kw_0, n_2, oc_chunk_2, oh_2, ow_2, oc_block_2, ic_1, kh_1, kw_1, n_3, oc_chunk_3, oh_3, ow_3, oc_block_3 in T.grid(T.int64(528), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(2), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(7), T.int64(7), T.int64(4)):
                    with T.block("conv2d_NCHWc"):
                        v_n = T.axis.spatial(T.int64(1), n_0 + n_1 + n_2 + n_3)
                        v_oc_chunk = T.axis.spatial(T.int64(48), oc_chunk_0 * T.int64(8) + oc_chunk_1 + oc_chunk_2 + oc_chunk_3)
                        v_oh = T.axis.spatial(T.int64(14), oh_0 * T.int64(14) + oh_1 * T.int64(14) + oh_2 * T.int64(7) + oh_3)
                        v_ow = T.axis.spatial(T.int64(14), ow_0 * T.int64(14) + ow_1 * T.int64(14) + ow_2 * T.int64(7) + ow_3)
                        v_oc_block = T.axis.spatial(T.int64(4), oc_block_0 * T.int64(4) + oc_block_1 * T.int64(4) + oc_block_2 * T.int64(4) + oc_block_3)
                        v_ic = T.axis.reduce(T.int64(528), ic_0 + ic_1)
                        v_kh = T.axis.reduce(T.int64(1), kh_0 + kh_1)
                        v_kw = T.axis.reduce(T.int64(1), kw_0 + kw_1)
                        T.reads(p0[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)], p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block])
                        T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                        T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                        with T.init():
                            conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = T.float32(0)
                        conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] + p0[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)] * p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block]
                for ax0, ax1, ax2, ax3, ax4 in T.grid(T.int64(1), T.int64(1), T.int64(14), T.int64(14), T.int64(4)):
                    with T.block("T_relu"):
                        v_ax0 = T.axis.spatial(T.int64(1), ax0)
                        v_ax1 = T.axis.spatial(T.int64(48), oc_chunk_0 * T.int64(8) + oc_chunk_1 + ax1)
                        v_ax2, v_ax3, v_ax4 = T.axis.remap("SSS", [ax2, ax3, ax4])
                        T.reads(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4])
                        T.writes(T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                        T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.max(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] + p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4], T.float32(0))
b0 = sch.get_block(name="conv2d_NCHWc", func_name="main")
b1 = sch.get_block(name="T_add", func_name="main")
b2 = sch.get_block(name="root", func_name="main")
sch.compute_inline(block=b1)
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.tiling_structure", ann_val="SSRSRS")
l3, l4, l5, l6, l7, l8, l9, l10 = sch.get_loops(block=b0)
v11, v12, v13, v14 = sch.sample_perfect_tile(loop=l3, n=4, max_innermost_factor=64, decision=[1, 1, 1, 1])
l15, l16, l17, l18 = sch.split(loop=l3, factors=[v11, v12, v13, v14], preserve_unit_iters=True)
v19, v20, v21, v22 = sch.sample_perfect_tile(loop=l4, n=4, max_innermost_factor=64, decision=[6, 8, 1, 1])
l23, l24, l25, l26 = sch.split(loop=l4, factors=[v19, v20, v21, v22], preserve_unit_iters=True)
v27, v28, v29, v30 = sch.sample_perfect_tile(loop=l5, n=4, max_innermost_factor=64, decision=[1, 1, 2, 7])
l31, l32, l33, l34 = sch.split(loop=l5, factors=[v27, v28, v29, v30], preserve_unit_iters=True)
v35, v36, v37, v38 = sch.sample_perfect_tile(loop=l6, n=4, max_innermost_factor=64, decision=[1, 1, 2, 7])
l39, l40, l41, l42 = sch.split(loop=l6, factors=[v35, v36, v37, v38], preserve_unit_iters=True)
v43, v44, v45, v46 = sch.sample_perfect_tile(loop=l7, n=4, max_innermost_factor=64, decision=[1, 1, 1, 4])
l47, l48, l49, l50 = sch.split(loop=l7, factors=[v43, v44, v45, v46], preserve_unit_iters=True)
v51, v52 = sch.sample_perfect_tile(loop=l8, n=2, max_innermost_factor=64, decision=[528, 1])
l53, l54 = sch.split(loop=l8, factors=[v51, v52], preserve_unit_iters=True)
v55, v56 = sch.sample_perfect_tile(loop=l9, n=2, max_innermost_factor=64, decision=[1, 1])
l57, l58 = sch.split(loop=l9, factors=[v55, v56], preserve_unit_iters=True)
v59, v60 = sch.sample_perfect_tile(loop=l10, n=2, max_innermost_factor=64, decision=[1, 1])
l61, l62 = sch.split(loop=l10, factors=[v59, v60], preserve_unit_iters=True)
sch.reorder(l15, l23, l31, l39, l47, l16, l24, l32, l40, l48, l53, l57, l61, l17, l25, l33, l41, l49, l54, l58, l62, l18, l26, l34, l42, l50)
b63, = sch.get_consumers(block=b0)
sch.reverse_compute_at(block=b63, loop=l48, preserve_unit_loops=True, index=-1)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.vectorize", ann_val=64)
v64 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=2)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.unroll_explicit", ann_val=v64)
2024-04-29 02:32:04 [INFO] [task_scheduler.cc:170] Design space #2:
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(132), T.int64(14), T.int64(14), T.int64(4)), "float32"), p1: T.Buffer((T.int64(48), T.int64(132), T.int64(1), T.int64(1), T.int64(4), T.int64(4)), "float32"), p2: T.Buffer((T.int64(1), T.int64(48), T.int64(1), T.int64(1), T.int64(4)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(48), T.int64(14), T.int64(14), T.int64(4)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        with T.block("root"):
            T.reads()
            T.writes()
            T.block_attr({"meta_schedule.parallel": 768, "meta_schedule.unroll_explicit": 512, "meta_schedule.vectorize": 64})
            conv2d_NCHWc = T.alloc_buffer((T.int64(1), T.int64(48), T.int64(14), T.int64(14), T.int64(4)))
            for n_0, oc_chunk_0, oh_0, ow_0, oc_block_0 in T.grid(T.int64(1), T.int64(6), T.int64(1), T.int64(1), T.int64(1)):
                for n_1, oc_chunk_1, oh_1, ow_1, oc_block_1, ic_0, kh_0, kw_0, n_2, oc_chunk_2, oh_2, ow_2, oc_block_2, ic_1, kh_1, kw_1, n_3, oc_chunk_3, oh_3, ow_3, oc_block_3 in T.grid(T.int64(1), T.int64(8), T.int64(1), T.int64(1), T.int64(1), T.int64(528), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(2), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(7), T.int64(7), T.int64(4)):
                    with T.block("conv2d_NCHWc"):
                        v_n = T.axis.spatial(T.int64(1), n_0 + n_1 + n_2 + n_3)
                        v_oc_chunk = T.axis.spatial(T.int64(48), oc_chunk_0 * T.int64(8) + oc_chunk_1 + oc_chunk_2 + oc_chunk_3)
                        v_oh = T.axis.spatial(T.int64(14), oh_0 * T.int64(14) + oh_1 * T.int64(14) + oh_2 * T.int64(7) + oh_3)
                        v_ow = T.axis.spatial(T.int64(14), ow_0 * T.int64(14) + ow_1 * T.int64(14) + ow_2 * T.int64(7) + ow_3)
                        v_oc_block = T.axis.spatial(T.int64(4), oc_block_0 * T.int64(4) + oc_block_1 * T.int64(4) + oc_block_2 * T.int64(4) + oc_block_3)
                        v_ic = T.axis.reduce(T.int64(528), ic_0 + ic_1)
                        v_kh = T.axis.reduce(T.int64(1), kh_0 + kh_1)
                        v_kw = T.axis.reduce(T.int64(1), kw_0 + kw_1)
                        T.reads(p0[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)], p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block])
                        T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                        T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                        with T.init():
                            conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = T.float32(0)
                        conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] + p0[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)] * p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block]
                for ax0, ax1, ax2, ax3, ax4 in T.grid(T.int64(1), T.int64(8), T.int64(14), T.int64(14), T.int64(4)):
                    with T.block("T_relu"):
                        v_ax0 = T.axis.spatial(T.int64(1), ax0)
                        v_ax1 = T.axis.spatial(T.int64(48), oc_chunk_0 * T.int64(8) + ax1)
                        v_ax2, v_ax3, v_ax4 = T.axis.remap("SSS", [ax2, ax3, ax4])
                        T.reads(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4])
                        T.writes(T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                        T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.max(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] + p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4], T.float32(0))
b0 = sch.get_block(name="conv2d_NCHWc", func_name="main")
b1 = sch.get_block(name="T_add", func_name="main")
b2 = sch.get_block(name="root", func_name="main")
sch.compute_inline(block=b1)
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.tiling_structure", ann_val="SSRSRS")
l3, l4, l5, l6, l7, l8, l9, l10 = sch.get_loops(block=b0)
v11, v12, v13, v14 = sch.sample_perfect_tile(loop=l3, n=4, max_innermost_factor=64, decision=[1, 1, 1, 1])
l15, l16, l17, l18 = sch.split(loop=l3, factors=[v11, v12, v13, v14], preserve_unit_iters=True)
v19, v20, v21, v22 = sch.sample_perfect_tile(loop=l4, n=4, max_innermost_factor=64, decision=[6, 8, 1, 1])
l23, l24, l25, l26 = sch.split(loop=l4, factors=[v19, v20, v21, v22], preserve_unit_iters=True)
v27, v28, v29, v30 = sch.sample_perfect_tile(loop=l5, n=4, max_innermost_factor=64, decision=[1, 1, 2, 7])
l31, l32, l33, l34 = sch.split(loop=l5, factors=[v27, v28, v29, v30], preserve_unit_iters=True)
v35, v36, v37, v38 = sch.sample_perfect_tile(loop=l6, n=4, max_innermost_factor=64, decision=[1, 1, 2, 7])
l39, l40, l41, l42 = sch.split(loop=l6, factors=[v35, v36, v37, v38], preserve_unit_iters=True)
v43, v44, v45, v46 = sch.sample_perfect_tile(loop=l7, n=4, max_innermost_factor=64, decision=[1, 1, 1, 4])
l47, l48, l49, l50 = sch.split(loop=l7, factors=[v43, v44, v45, v46], preserve_unit_iters=True)
v51, v52 = sch.sample_perfect_tile(loop=l8, n=2, max_innermost_factor=64, decision=[528, 1])
l53, l54 = sch.split(loop=l8, factors=[v51, v52], preserve_unit_iters=True)
v55, v56 = sch.sample_perfect_tile(loop=l9, n=2, max_innermost_factor=64, decision=[1, 1])
l57, l58 = sch.split(loop=l9, factors=[v55, v56], preserve_unit_iters=True)
v59, v60 = sch.sample_perfect_tile(loop=l10, n=2, max_innermost_factor=64, decision=[1, 1])
l61, l62 = sch.split(loop=l10, factors=[v59, v60], preserve_unit_iters=True)
sch.reorder(l15, l23, l31, l39, l47, l16, l24, l32, l40, l48, l53, l57, l61, l17, l25, l33, l41, l49, l54, l58, l62, l18, l26, l34, l42, l50)
b63, = sch.get_consumers(block=b0)
sch.reverse_compute_at(block=b63, loop=l47, preserve_unit_loops=True, index=-1)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.vectorize", ann_val=64)
v64 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.unroll_explicit", ann_val=v64)
2024-04-29 04:03:18 [INFO] [evolutionary_search.cc:713] Generating candidates......
2024-04-29 04:03:18 [INFO] [evolutionary_search.cc:715] Picked top 0 candidate(s) from database
2024-04-29 04:03:21 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x1428caf8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0xec420e8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x1267df18)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0xbcc1548)]: 0 failure(s)
2024-04-29 04:03:21 [INFO] [evolutionary_search.cc:723] Sampled 512 candidate(s)
2024-04-29 04:03:24 [INFO] [evolutionary_search.cc:621] Evolve iter #0 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x1428caf8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0xec420e8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x1267df18)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0xbcc1548)]: 0 failure(s)
2024-04-29 04:03:27 [INFO] [evolutionary_search.cc:621] Evolve iter #1 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x1428caf8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0xec420e8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x1267df18)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0xbcc1548)]: 0 failure(s)
2024-04-29 04:03:30 [INFO] [evolutionary_search.cc:621] Evolve iter #2 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x1428caf8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0xec420e8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x1267df18)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0xbcc1548)]: 0 failure(s)
2024-04-29 04:03:33 [INFO] [evolutionary_search.cc:621] Evolve iter #3 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x1428caf8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0xec420e8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x1267df18)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0xbcc1548)]: 0 failure(s)
2024-04-29 04:03:34 [INFO] [evolutionary_search.cc:649] Scores of the best 64 candidates:
[1 : 16]:	0.9992  0.9991  0.9991  0.9990  0.9987  0.9982  0.9981  0.9975  0.9973  0.9971  0.9953  0.9953  0.9953  0.9952  0.9951  0.9949
[17 : 32]:	0.9938  0.9933  0.9928  0.9920  0.9918  0.9908  0.9905  0.9903  0.9900  0.9899  0.9896  0.9892  0.9883  0.9879  0.9876  0.9871
[33 : 48]:	0.9870  0.9864  0.9861  0.9853  0.9845  0.9845  0.9843  0.9841  0.9836  0.9834  0.9833  0.9832  0.9831  0.9828  0.9828  0.9815
[49 : 64]:	0.9807  0.9801  0.9797  0.9790  0.9783  0.9783  0.9781  0.9779  0.9777  0.9777  0.9773  0.9769  0.9768  0.9765  0.9762  0.9757
2024-04-29 04:03:34 [INFO] [evolutionary_search.cc:727] Got 64 candidate(s) with evolutionary search
2024-04-29 04:03:34 [INFO] [evolutionary_search.cc:730] Sending 63 candidates(s) for measurement
2024-04-29 05:08:16 [INFO] [task_scheduler.cc:131] [Task #57: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_56] Trial #1: GFLOPs: 13.8943. Time: 2865.5342 us. Best GFLOPs: 13.8943
2024-04-29 05:08:16 [INFO] [task_scheduler.cc:131] [Task #57: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_56] Trial #2: GFLOPs: 43.9273. Time: 906.3760 us. Best GFLOPs: 43.9273
2024-04-29 05:08:16 [INFO] [task_scheduler.cc:131] [Task #57: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_56] Trial #3: GFLOPs: 104.9166. Time: 379.4886 us. Best GFLOPs: 104.9166
2024-04-29 05:08:16 [INFO] [task_scheduler.cc:131] [Task #57: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_56] Trial #4: GFLOPs: 90.1894. Time: 441.4562 us. Best GFLOPs: 104.9166
2024-04-29 05:08:16 [INFO] [task_scheduler.cc:131] [Task #57: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_56] Trial #5: GFLOPs: 19.0110. Time: 2094.2968 us. Best GFLOPs: 104.9166
2024-04-29 05:08:16 [INFO] [task_scheduler.cc:131] [Task #57: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_56] Trial #6: GFLOPs: 10.2201. Time: 3895.7108 us. Best GFLOPs: 104.9166
2024-04-29 05:08:16 [INFO] [task_scheduler.cc:131] [Task #57: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_56] Trial #7: GFLOPs: 92.7279. Time: 429.3709 us. Best GFLOPs: 104.9166
2024-04-29 05:08:16 [INFO] [task_scheduler.cc:131] [Task #57: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_56] Trial #8: GFLOPs: 56.5505. Time: 704.0554 us. Best GFLOPs: 104.9166
2024-04-29 05:08:16 [INFO] [task_scheduler.cc:131] [Task #57: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_56] Trial #9: GFLOPs: 2.4776. Time: 16070.0266 us. Best GFLOPs: 104.9166
2024-04-29 05:08:16 [INFO] [task_scheduler.cc:131] [Task #57: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_56] Trial #10: GFLOPs: 29.3241. Time: 1357.7432 us. Best GFLOPs: 104.9166
2024-04-29 05:08:16 [INFO] [task_scheduler.cc:131] [Task #57: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_56] Trial #11: GFLOPs: 85.5102. Time: 465.6132 us. Best GFLOPs: 104.9166
2024-04-29 05:08:16 [INFO] [task_scheduler.cc:131] [Task #57: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_56] Trial #12: GFLOPs: 2.3565. Time: 16895.8955 us. Best GFLOPs: 104.9166
2024-04-29 05:08:16 [INFO] [task_scheduler.cc:131] [Task #57: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_56] Trial #13: GFLOPs: 122.9952. Time: 323.7090 us. Best GFLOPs: 122.9952
2024-04-29 05:08:16 [INFO] [task_scheduler.cc:131] [Task #57: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_56] Trial #14: GFLOPs: 1.8104. Time: 21992.4766 us. Best GFLOPs: 122.9952
2024-04-29 05:08:16 [INFO] [task_scheduler.cc:131] [Task #57: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_56] Trial #15: GFLOPs: 59.4010. Time: 670.2686 us. Best GFLOPs: 122.9952
2024-04-29 05:08:16 [INFO] [task_scheduler.cc:131] [Task #57: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_56] Trial #16: GFLOPs: 2.3388. Time: 17023.6100 us. Best GFLOPs: 122.9952
2024-04-29 05:08:16 [INFO] [task_scheduler.cc:131] [Task #57: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_56] Trial #17: GFLOPs: 32.9247. Time: 1209.2652 us. Best GFLOPs: 122.9952
2024-04-29 05:08:16 [INFO] [task_scheduler.cc:131] [Task #57: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_56] Trial #18: GFLOPs: 80.1340. Time: 496.8511 us. Best GFLOPs: 122.9952
2024-04-29 05:08:16 [INFO] [task_scheduler.cc:131] [Task #57: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_56] Trial #19: GFLOPs: 70.5355. Time: 564.4628 us. Best GFLOPs: 122.9952
2024-04-29 05:08:16 [INFO] [task_scheduler.cc:131] [Task #57: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_56] Trial #20: GFLOPs: 2.9784. Time: 13367.7906 us. Best GFLOPs: 122.9952
2024-04-29 05:08:16 [INFO] [task_scheduler.cc:131] [Task #57: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_56] Trial #21: GFLOPs: 104.2668. Time: 381.8535 us. Best GFLOPs: 122.9952
2024-04-29 05:08:16 [INFO] [task_scheduler.cc:131] [Task #57: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_56] Trial #22: GFLOPs: 95.0318. Time: 418.9615 us. Best GFLOPs: 122.9952
2024-04-29 05:08:16 [INFO] [task_scheduler.cc:131] [Task #57: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_56] Trial #23: GFLOPs: 88.1660. Time: 451.5872 us. Best GFLOPs: 122.9952
2024-04-29 05:08:16 [INFO] [task_scheduler.cc:131] [Task #57: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_56] Trial #24: GFLOPs: 99.9923. Time: 398.1773 us. Best GFLOPs: 122.9952
2024-04-29 05:08:16 [INFO] [task_scheduler.cc:131] [Task #57: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_56] Trial #25: GFLOPs: 90.1138. Time: 441.8266 us. Best GFLOPs: 122.9952
2024-04-29 05:08:16 [INFO] [task_scheduler.cc:131] [Task #57: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_56] Trial #26: GFLOPs: 10.8652. Time: 3664.4120 us. Best GFLOPs: 122.9952
2024-04-29 05:08:16 [INFO] [task_scheduler.cc:131] [Task #57: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_56] Trial #27: GFLOPs: 108.4929. Time: 366.9795 us. Best GFLOPs: 122.9952
2024-04-29 05:08:16 [INFO] [task_scheduler.cc:131] [Task #57: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_56] Trial #28: GFLOPs: 7.4102. Time: 5372.9742 us. Best GFLOPs: 122.9952
2024-04-29 05:08:16 [INFO] [task_scheduler.cc:131] [Task #57: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_56] Trial #29: GFLOPs: 55.1921. Time: 721.3829 us. Best GFLOPs: 122.9952
2024-04-29 05:08:16 [INFO] [task_scheduler.cc:131] [Task #57: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_56] Trial #30: GFLOPs: 70.4286. Time: 565.3191 us. Best GFLOPs: 122.9952
2024-04-29 05:08:16 [INFO] [task_scheduler.cc:131] [Task #57: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_56] Trial #31: GFLOPs: 261.0218. Time: 152.5338 us. Best GFLOPs: 261.0218
2024-04-29 05:08:16 [INFO] [task_scheduler.cc:131] [Task #57: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_56] Trial #32: GFLOPs: 155.8365. Time: 255.4900 us. Best GFLOPs: 261.0218
2024-04-29 05:08:16 [INFO] [task_scheduler.cc:131] [Task #57: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_56] Trial #33: GFLOPs: 26.9922. Time: 1475.0405 us. Best GFLOPs: 261.0218
2024-04-29 05:08:16 [INFO] [task_scheduler.cc:131] [Task #57: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_56] Trial #34: GFLOPs: 139.4836. Time: 285.4432 us. Best GFLOPs: 261.0218
2024-04-29 05:08:16 [INFO] [task_scheduler.cc:131] [Task #57: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_56] Trial #35: GFLOPs: 55.7238. Time: 714.5005 us. Best GFLOPs: 261.0218
2024-04-29 05:08:16 [INFO] [task_scheduler.cc:131] [Task #57: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_56] Trial #36: GFLOPs: 263.4392. Time: 151.1342 us. Best GFLOPs: 263.4392
2024-04-29 05:08:16 [INFO] [task_scheduler.cc:131] [Task #57: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_56] Trial #37: GFLOPs: 87.0904. Time: 457.1648 us. Best GFLOPs: 263.4392
2024-04-29 05:08:16 [INFO] [task_scheduler.cc:131] [Task #57: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_56] Trial #38: GFLOPs: 189.4940. Time: 210.1103 us. Best GFLOPs: 263.4392
2024-04-29 05:08:16 [INFO] [task_scheduler.cc:131] [Task #57: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_56] Trial #39: GFLOPs: 8.8941. Time: 4476.5177 us. Best GFLOPs: 263.4392
2024-04-29 05:08:16 [INFO] [task_scheduler.cc:131] [Task #57: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_56] Trial #40: GFLOPs: 38.5747. Time: 1032.1437 us. Best GFLOPs: 263.4392
2024-04-29 05:08:16 [INFO] [task_scheduler.cc:131] [Task #57: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_56] Trial #41: GFLOPs: 43.6575. Time: 911.9778 us. Best GFLOPs: 263.4392
2024-04-29 05:08:16 [INFO] [task_scheduler.cc:131] [Task #57: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_56] Trial #42: GFLOPs: 8.5728. Time: 4644.2737 us. Best GFLOPs: 263.4392
2024-04-29 05:08:16 [INFO] [task_scheduler.cc:131] [Task #57: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_56] Trial #43: GFLOPs: 46.5030. Time: 856.1738 us. Best GFLOPs: 263.4392
2024-04-29 05:08:16 [INFO] [task_scheduler.cc:131] [Task #57: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_56] Trial #44: GFLOPs: 44.7195. Time: 890.3200 us. Best GFLOPs: 263.4392
2024-04-29 05:08:16 [INFO] [task_scheduler.cc:131] [Task #57: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_56] Trial #45: GFLOPs: 54.0933. Time: 736.0370 us. Best GFLOPs: 263.4392
2024-04-29 05:08:16 [INFO] [task_scheduler.cc:131] [Task #57: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_56] Trial #46: GFLOPs: 48.5751. Time: 819.6523 us. Best GFLOPs: 263.4392
2024-04-29 05:08:16 [INFO] [task_scheduler.cc:131] [Task #57: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_56] Trial #47: GFLOPs: 14.6411. Time: 2719.3837 us. Best GFLOPs: 263.4392
2024-04-29 05:08:16 [INFO] [task_scheduler.cc:131] [Task #57: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_56] Trial #48: GFLOPs: 43.2648. Time: 920.2555 us. Best GFLOPs: 263.4392
2024-04-29 05:08:16 [INFO] [task_scheduler.cc:131] [Task #57: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_56] Trial #49: GFLOPs: 80.0202. Time: 497.5575 us. Best GFLOPs: 263.4392
2024-04-29 05:08:16 [INFO] [task_scheduler.cc:131] [Task #57: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_56] Trial #50: GFLOPs: 55.3955. Time: 718.7345 us. Best GFLOPs: 263.4392
2024-04-29 05:08:16 [INFO] [task_scheduler.cc:131] [Task #57: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_56] Trial #51: GFLOPs: 7.4501. Time: 5344.2018 us. Best GFLOPs: 263.4392
2024-04-29 05:08:16 [INFO] [task_scheduler.cc:131] [Task #57: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_56] Trial #52: GFLOPs: 102.4043. Time: 388.7987 us. Best GFLOPs: 263.4392
2024-04-29 05:08:16 [INFO] [task_scheduler.cc:131] [Task #57: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_56] Trial #53: GFLOPs: 76.8652. Time: 517.9802 us. Best GFLOPs: 263.4392
2024-04-29 05:08:16 [INFO] [task_scheduler.cc:131] [Task #57: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_56] Trial #54: GFLOPs: 20.8423. Time: 1910.2823 us. Best GFLOPs: 263.4392
2024-04-29 05:08:16 [INFO] [task_scheduler.cc:131] [Task #57: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_56] Trial #55: GFLOPs: 48.2567. Time: 825.0600 us. Best GFLOPs: 263.4392
2024-04-29 05:08:16 [INFO] [task_scheduler.cc:131] [Task #57: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_56] Trial #56: GFLOPs: 41.7654. Time: 953.2923 us. Best GFLOPs: 263.4392
2024-04-29 05:08:16 [INFO] [task_scheduler.cc:131] [Task #57: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_56] Trial #57: GFLOPs: 2.6001. Time: 15312.8539 us. Best GFLOPs: 263.4392
2024-04-29 05:08:16 [INFO] [task_scheduler.cc:131] [Task #57: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_56] Trial #58: GFLOPs: 19.8863. Time: 2002.1173 us. Best GFLOPs: 263.4392
2024-04-29 05:08:16 [INFO] [task_scheduler.cc:131] [Task #57: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_56] Trial #59: GFLOPs: 128.6616. Time: 309.4526 us. Best GFLOPs: 263.4392
2024-04-29 05:08:16 [INFO] [task_scheduler.cc:131] [Task #57: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_56] Trial #60: GFLOPs: 45.7983. Time: 869.3470 us. Best GFLOPs: 263.4392
2024-04-29 05:08:16 [INFO] [task_scheduler.cc:131] [Task #57: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_56] Trial #61: GFLOPs: 43.6208. Time: 912.7453 us. Best GFLOPs: 263.4392
2024-04-29 05:08:16 [INFO] [task_scheduler.cc:121] [Task #57: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_56] Trial #62: Error in building:
LocalBuilder: Timeout, killed after 30.0 seconds
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(132), T.int64(14), T.int64(14), T.int64(4)), "float32"), p1: T.Buffer((T.int64(48), T.int64(132), T.int64(1), T.int64(1), T.int64(4), T.int64(4)), "float32"), p2: T.Buffer((T.int64(1), T.int64(48), T.int64(1), T.int64(1), T.int64(4)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(48), T.int64(14), T.int64(14), T.int64(4)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        conv2d_NCHWc = T.alloc_buffer((T.int64(1), T.int64(48), T.int64(14), T.int64(14), T.int64(4)))
        for n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_fused in T.parallel(T.int64(7), annotations={"pragma_auto_unroll_max_step": 512, "pragma_unroll_explicit": 1}):
            for n_1, oc_chunk_1, oh_1, ow_1, oc_block_1 in T.grid(T.int64(1), T.int64(2), T.int64(1), T.int64(1), T.int64(1)):
                for n_2_init, oc_chunk_2_init, oh_2_init, ow_2_init, oc_block_2_init, n_3_init, oc_chunk_3_init, oh_3_init, ow_3_init in T.grid(T.int64(1), T.int64(4), T.int64(1), T.int64(2), T.int64(1), T.int64(1), T.int64(6), T.int64(2), T.int64(7)):
                    for oc_block_3_fused_init in T.vectorized(T.int64(4)):
                        with T.block("conv2d_NCHWc_init"):
                            v_n = T.axis.spatial(T.int64(1), n_1 + n_2_init + n_3_init)
                            v_oc_chunk = T.axis.spatial(T.int64(48), oc_chunk_1 * T.int64(24) + oc_chunk_2_init * T.int64(6) + oc_chunk_3_init)
                            v_oh = T.axis.spatial(T.int64(14), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_fused * T.int64(2) + oh_1 * T.int64(2) + oh_2_init * T.int64(2) + oh_3_init)
                            v_ow = T.axis.spatial(T.int64(14), ow_1 * T.int64(14) + ow_2_init * T.int64(7) + ow_3_init)
                            v_oc_block = T.axis.spatial(T.int64(4), oc_block_1 * T.int64(4) + oc_block_2_init * T.int64(4) + oc_block_3_fused_init)
                            T.reads()
                            T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                            T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                            conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = T.float32(0)
                for ic_0, kh_0, kw_0, n_2, oc_chunk_2, oh_2, ow_2, oc_block_2, ic_1, kh_1, kw_1, n_3, oc_chunk_3, oh_3, ow_3 in T.grid(T.int64(528), T.int64(1), T.int64(1), T.int64(1), T.int64(4), T.int64(1), T.int64(2), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(6), T.int64(2), T.int64(7)):
                    for oc_block_3_fused in T.vectorized(T.int64(4)):
                        with T.block("conv2d_NCHWc_update"):
                            v_n = T.axis.spatial(T.int64(1), n_1 + n_2 + n_3)
                            v_oc_chunk = T.axis.spatial(T.int64(48), oc_chunk_1 * T.int64(24) + oc_chunk_2 * T.int64(6) + oc_chunk_3)
                            v_oh = T.axis.spatial(T.int64(14), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_fused * T.int64(2) + oh_1 * T.int64(2) + oh_2 * T.int64(2) + oh_3)
                            v_ow = T.axis.spatial(T.int64(14), ow_1 * T.int64(14) + ow_2 * T.int64(7) + ow_3)
                            v_oc_block = T.axis.spatial(T.int64(4), oc_block_1 * T.int64(4) + oc_block_2 * T.int64(4) + oc_block_3_fused)
                            v_ic = T.axis.reduce(T.int64(528), ic_0 + ic_1)
                            v_kh = T.axis.reduce(T.int64(1), kh_0 + kh_1)
                            v_kw = T.axis.reduce(T.int64(1), kw_0 + kw_1)
                            T.reads(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block], p0[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)], p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block])
                            T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                            T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                            conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] + p0[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)] * p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block]
            for ax0, ax1, ax2 in T.grid(T.int64(1), T.int64(48), T.int64(2)):
                for ax3_ax4_fused in T.vectorized(T.int64(56)):
                    with T.block("T_relu"):
                        v_ax0, v_ax1 = T.axis.remap("SS", [ax0, ax1])
                        v_ax2 = T.axis.spatial(T.int64(14), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_fused * T.int64(2) + ax2)
                        v_ax3 = T.axis.spatial(T.int64(14), ax3_ax4_fused // T.int64(4))
                        v_ax4 = T.axis.spatial(T.int64(4), ax3_ax4_fused % T.int64(4))
                        T.reads(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4])
                        T.writes(T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                        T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.max(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] + p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4], T.float32(0))
b0 = sch.get_block(name="conv2d_NCHWc", func_name="main")
b1 = sch.get_block(name="T_add", func_name="main")
b2 = sch.get_block(name="root", func_name="main")
sch.compute_inline(block=b1)
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.tiling_structure", ann_val="SSRSRS")
l3, l4, l5, l6, l7, l8, l9, l10 = sch.get_loops(block=b0)
v11, v12, v13, v14 = sch.sample_perfect_tile(loop=l3, n=4, max_innermost_factor=64, decision=[1, 1, 1, 1])
l15, l16, l17, l18 = sch.split(loop=l3, factors=[v11, v12, v13, v14], preserve_unit_iters=True)
v19, v20, v21, v22 = sch.sample_perfect_tile(loop=l4, n=4, max_innermost_factor=64, decision=[1, 2, 4, 6])
l23, l24, l25, l26 = sch.split(loop=l4, factors=[v19, v20, v21, v22], preserve_unit_iters=True)
v27, v28, v29, v30 = sch.sample_perfect_tile(loop=l5, n=4, max_innermost_factor=64, decision=[7, 1, 1, 2])
l31, l32, l33, l34 = sch.split(loop=l5, factors=[v27, v28, v29, v30], preserve_unit_iters=True)
v35, v36, v37, v38 = sch.sample_perfect_tile(loop=l6, n=4, max_innermost_factor=64, decision=[1, 1, 2, 7])
l39, l40, l41, l42 = sch.split(loop=l6, factors=[v35, v36, v37, v38], preserve_unit_iters=True)
v43, v44, v45, v46 = sch.sample_perfect_tile(loop=l7, n=4, max_innermost_factor=64, decision=[1, 1, 1, 4])
l47, l48, l49, l50 = sch.split(loop=l7, factors=[v43, v44, v45, v46], preserve_unit_iters=True)
v51, v52 = sch.sample_perfect_tile(loop=l8, n=2, max_innermost_factor=64, decision=[528, 1])
l53, l54 = sch.split(loop=l8, factors=[v51, v52], preserve_unit_iters=True)
v55, v56 = sch.sample_perfect_tile(loop=l9, n=2, max_innermost_factor=64, decision=[1, 1])
l57, l58 = sch.split(loop=l9, factors=[v55, v56], preserve_unit_iters=True)
v59, v60 = sch.sample_perfect_tile(loop=l10, n=2, max_innermost_factor=64, decision=[1, 1])
l61, l62 = sch.split(loop=l10, factors=[v59, v60], preserve_unit_iters=True)
sch.reorder(l15, l23, l31, l39, l47, l16, l24, l32, l40, l48, l53, l57, l61, l17, l25, l33, l41, l49, l54, l58, l62, l18, l26, l34, l42, l50)
b63, = sch.get_consumers(block=b0)
sch.reverse_compute_at(block=b63, loop=l47, preserve_unit_loops=True, index=-1)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.vectorize", ann_val=64)
v64 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.unroll_explicit", ann_val=v64)
sch.enter_postproc()
b65 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b65, ann_key="meta_schedule.parallel")
sch.unannotate(block_or_loop=b65, ann_key="meta_schedule.vectorize")
sch.unannotate(block_or_loop=b65, ann_key="meta_schedule.unroll_explicit")
b66, b67 = sch.get_child_blocks(b65)
l68, l69, l70, l71, l72, l73, l74, l75, l76, l77, l78, l79, l80, l81, l82, l83, l84, l85, l86, l87, l88, l89, l90, l91, l92, l93 = sch.get_loops(block=b66)
l94 = sch.fuse(l68, l69, l70, l71, l72, preserve_unit_iters=True)
sch.parallel(loop=l94)
l95 = sch.fuse(l93, preserve_unit_iters=True)
sch.vectorize(loop=l95)
sch.annotate(block_or_loop=l94, ann_key="pragma_auto_unroll_max_step", ann_val=512)
sch.annotate(block_or_loop=l94, ann_key="pragma_unroll_explicit", ann_val=1)
l96, l97, l98, l99, l100, l101 = sch.get_loops(block=b67)
l102 = sch.fuse(l100, l101, preserve_unit_iters=True)
sch.vectorize(loop=l102)
b103 = sch.get_block(name="conv2d_NCHWc", func_name="main")
l104, l105, l106, l107, l108, l109, l110, l111, l112, l113, l114, l115, l116, l117, l118, l119, l120, l121, l122, l123, l124, l125 = sch.get_loops(block=b103)
b126 = sch.decompose_reduction(block=b103, loop=l110)
2024-04-29 05:08:16 [INFO] [task_scheduler.cc:131] [Task #57: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_56] Trial #63: GFLOPs: 22.9200. Time: 1737.1105 us. Best GFLOPs: 263.4392
