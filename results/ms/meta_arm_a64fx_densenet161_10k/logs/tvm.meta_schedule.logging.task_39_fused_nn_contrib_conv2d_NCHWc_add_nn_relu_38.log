2024-04-29 02:30:53 [INFO] [task_scheduler.cc:160] Initializing Task #39: "fused_nn_contrib_conv2d_NCHWc_add_nn_relu_38"
2024-04-29 02:30:53 [INFO] [task_scheduler.cc:35] 
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(348), T.int64(14), T.int64(14), T.int64(4)), "float32"), p1: T.Buffer((T.int64(48), T.int64(348), T.int64(1), T.int64(1), T.int64(4), T.int64(4)), "float32"), p2: T.Buffer((T.int64(1), T.int64(48), T.int64(1), T.int64(1), T.int64(4)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(48), T.int64(14), T.int64(14), T.int64(4)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        conv2d_NCHWc = T.alloc_buffer((T.int64(1), T.int64(48), T.int64(14), T.int64(14), T.int64(4)))
        T_add = T.alloc_buffer((T.int64(1), T.int64(48), T.int64(14), T.int64(14), T.int64(4)))
        for n, oc_chunk, oh, ow, oc_block, ic, kh, kw in T.grid(T.int64(1), T.int64(48), T.int64(14), T.int64(14), T.int64(4), T.int64(1392), T.int64(1), T.int64(1)):
            with T.block("conv2d_NCHWc"):
                v_n, v_oc_chunk, v_oh, v_ow, v_oc_block, v_ic, v_kh, v_kw = T.axis.remap("SSSSSRRR", [n, oc_chunk, oh, ow, oc_block, ic, kh, kw])
                T.reads(p0[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)], p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block])
                T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                with T.init():
                    conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = T.float32(0)
                conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] + p0[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)] * p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block]
        for ax0, ax1, ax2, ax3, ax4 in T.grid(T.int64(1), T.int64(48), T.int64(14), T.int64(14), T.int64(4)):
            with T.block("T_add"):
                v_ax0, v_ax1, v_ax2, v_ax3, v_ax4 = T.axis.remap("SSSSS", [ax0, ax1, ax2, ax3, ax4])
                T.reads(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4])
                T.writes(T_add[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                T_add[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] + p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4]
        for ax0, ax1, ax2, ax3, ax4 in T.grid(T.int64(1), T.int64(48), T.int64(14), T.int64(14), T.int64(4)):
            with T.block("T_relu"):
                v_ax0, v_ax1, v_ax2, v_ax3, v_ax4 = T.axis.remap("SSSSS", [ax0, ax1, ax2, ax3, ax4])
                T.reads(T_add[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                T.writes(T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.max(T_add[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], T.float32(0))
2024-04-29 02:30:53 [INFO] [task_scheduler.cc:164] Total 3 design space(s) generated
2024-04-29 02:30:53 [INFO] [task_scheduler.cc:170] Design space #0:
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(348), T.int64(14), T.int64(14), T.int64(4)), "float32"), p1: T.Buffer((T.int64(48), T.int64(348), T.int64(1), T.int64(1), T.int64(4), T.int64(4)), "float32"), p2: T.Buffer((T.int64(1), T.int64(48), T.int64(1), T.int64(1), T.int64(4)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(48), T.int64(14), T.int64(14), T.int64(4)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        with T.block("root"):
            T.reads()
            T.writes()
            T.block_attr({"meta_schedule.parallel": 768, "meta_schedule.unroll_explicit": 64, "meta_schedule.vectorize": 64})
            conv2d_NCHWc = T.alloc_buffer((T.int64(1), T.int64(48), T.int64(14), T.int64(14), T.int64(4)))
            for n_0, oc_chunk_0, oh_0, ow_0, oc_block_0, n_1, oc_chunk_1, oh_1, ow_1, oc_block_1, ic_0, kh_0, kw_0, n_2, oc_chunk_2, oh_2, ow_2, oc_block_2, ic_1, kh_1, kw_1, n_3, oc_chunk_3, oh_3, ow_3, oc_block_3 in T.grid(T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(464), T.int64(1), T.int64(1), T.int64(1), T.int64(12), T.int64(1), T.int64(7), T.int64(1), T.int64(3), T.int64(1), T.int64(1), T.int64(1), T.int64(4), T.int64(14), T.int64(2), T.int64(2)):
                with T.block("conv2d_NCHWc"):
                    v_n = T.axis.spatial(T.int64(1), n_0 + n_1 + n_2 + n_3)
                    v_oc_chunk = T.axis.spatial(T.int64(48), oc_chunk_0 * T.int64(48) + oc_chunk_1 * T.int64(48) + oc_chunk_2 * T.int64(4) + oc_chunk_3)
                    v_oh = T.axis.spatial(T.int64(14), oh_0 * T.int64(14) + oh_1 * T.int64(14) + oh_2 * T.int64(14) + oh_3)
                    v_ow = T.axis.spatial(T.int64(14), ow_0 * T.int64(14) + ow_1 * T.int64(14) + ow_2 * T.int64(2) + ow_3)
                    v_oc_block = T.axis.spatial(T.int64(4), oc_block_0 * T.int64(4) + oc_block_1 * T.int64(2) + oc_block_2 * T.int64(2) + oc_block_3)
                    v_ic = T.axis.reduce(T.int64(1392), ic_0 * T.int64(3) + ic_1)
                    v_kh = T.axis.reduce(T.int64(1), kh_0 + kh_1)
                    v_kw = T.axis.reduce(T.int64(1), kw_0 + kw_1)
                    T.reads(p0[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)], p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block])
                    T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                    T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                    with T.init():
                        conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = T.float32(0)
                    conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] + p0[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)] * p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block]
            for ax0, ax1, ax2, ax3, ax4 in T.grid(T.int64(1), T.int64(48), T.int64(14), T.int64(14), T.int64(4)):
                with T.block("T_relu"):
                    v_ax0, v_ax1, v_ax2, v_ax3, v_ax4 = T.axis.remap("SSSSS", [ax0, ax1, ax2, ax3, ax4])
                    T.reads(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4])
                    T.writes(T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                    T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.max(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] + p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4], T.float32(0))
b0 = sch.get_block(name="conv2d_NCHWc", func_name="main")
b1 = sch.get_block(name="T_add", func_name="main")
b2 = sch.get_block(name="root", func_name="main")
sch.compute_inline(block=b1)
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.tiling_structure", ann_val="SSRSRS")
l3, l4, l5, l6, l7, l8, l9, l10 = sch.get_loops(block=b0)
v11, v12, v13, v14 = sch.sample_perfect_tile(loop=l3, n=4, max_innermost_factor=64, decision=[1, 1, 1, 1])
l15, l16, l17, l18 = sch.split(loop=l3, factors=[v11, v12, v13, v14], preserve_unit_iters=True)
v19, v20, v21, v22 = sch.sample_perfect_tile(loop=l4, n=4, max_innermost_factor=64, decision=[1, 1, 12, 4])
l23, l24, l25, l26 = sch.split(loop=l4, factors=[v19, v20, v21, v22], preserve_unit_iters=True)
v27, v28, v29, v30 = sch.sample_perfect_tile(loop=l5, n=4, max_innermost_factor=64, decision=[1, 1, 1, 14])
l31, l32, l33, l34 = sch.split(loop=l5, factors=[v27, v28, v29, v30], preserve_unit_iters=True)
v35, v36, v37, v38 = sch.sample_perfect_tile(loop=l6, n=4, max_innermost_factor=64, decision=[1, 1, 7, 2])
l39, l40, l41, l42 = sch.split(loop=l6, factors=[v35, v36, v37, v38], preserve_unit_iters=True)
v43, v44, v45, v46 = sch.sample_perfect_tile(loop=l7, n=4, max_innermost_factor=64, decision=[1, 2, 1, 2])
l47, l48, l49, l50 = sch.split(loop=l7, factors=[v43, v44, v45, v46], preserve_unit_iters=True)
v51, v52 = sch.sample_perfect_tile(loop=l8, n=2, max_innermost_factor=64, decision=[464, 3])
l53, l54 = sch.split(loop=l8, factors=[v51, v52], preserve_unit_iters=True)
v55, v56 = sch.sample_perfect_tile(loop=l9, n=2, max_innermost_factor=64, decision=[1, 1])
l57, l58 = sch.split(loop=l9, factors=[v55, v56], preserve_unit_iters=True)
v59, v60 = sch.sample_perfect_tile(loop=l10, n=2, max_innermost_factor=64, decision=[1, 1])
l61, l62 = sch.split(loop=l10, factors=[v59, v60], preserve_unit_iters=True)
sch.reorder(l15, l23, l31, l39, l47, l16, l24, l32, l40, l48, l53, l57, l61, l17, l25, l33, l41, l49, l54, l58, l62, l18, l26, l34, l42, l50)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.vectorize", ann_val=64)
v63 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=2)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.unroll_explicit", ann_val=v63)
2024-04-29 02:30:53 [INFO] [task_scheduler.cc:170] Design space #1:
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(348), T.int64(14), T.int64(14), T.int64(4)), "float32"), p1: T.Buffer((T.int64(48), T.int64(348), T.int64(1), T.int64(1), T.int64(4), T.int64(4)), "float32"), p2: T.Buffer((T.int64(1), T.int64(48), T.int64(1), T.int64(1), T.int64(4)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(48), T.int64(14), T.int64(14), T.int64(4)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        with T.block("root"):
            T.reads()
            T.writes()
            T.block_attr({"meta_schedule.parallel": 768, "meta_schedule.unroll_explicit": 0, "meta_schedule.vectorize": 64})
            conv2d_NCHWc = T.alloc_buffer((T.int64(1), T.int64(48), T.int64(14), T.int64(14), T.int64(4)))
            for n_0, oc_chunk_0, oh_0, ow_0, oc_block_0, n_1, oc_chunk_1, oh_1, ow_1, oc_block_1 in T.grid(T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(2)):
                for ic_0, kh_0, kw_0, n_2, oc_chunk_2, oh_2, ow_2, oc_block_2, ic_1, kh_1, kw_1, n_3, oc_chunk_3, oh_3, ow_3, oc_block_3 in T.grid(T.int64(464), T.int64(1), T.int64(1), T.int64(1), T.int64(12), T.int64(1), T.int64(7), T.int64(1), T.int64(3), T.int64(1), T.int64(1), T.int64(1), T.int64(4), T.int64(14), T.int64(2), T.int64(2)):
                    with T.block("conv2d_NCHWc"):
                        v_n = T.axis.spatial(T.int64(1), n_0 + n_1 + n_2 + n_3)
                        v_oc_chunk = T.axis.spatial(T.int64(48), oc_chunk_0 * T.int64(48) + oc_chunk_1 * T.int64(48) + oc_chunk_2 * T.int64(4) + oc_chunk_3)
                        v_oh = T.axis.spatial(T.int64(14), oh_0 * T.int64(14) + oh_1 * T.int64(14) + oh_2 * T.int64(14) + oh_3)
                        v_ow = T.axis.spatial(T.int64(14), ow_0 * T.int64(14) + ow_1 * T.int64(14) + ow_2 * T.int64(2) + ow_3)
                        v_oc_block = T.axis.spatial(T.int64(4), oc_block_0 * T.int64(4) + oc_block_1 * T.int64(2) + oc_block_2 * T.int64(2) + oc_block_3)
                        v_ic = T.axis.reduce(T.int64(1392), ic_0 * T.int64(3) + ic_1)
                        v_kh = T.axis.reduce(T.int64(1), kh_0 + kh_1)
                        v_kw = T.axis.reduce(T.int64(1), kw_0 + kw_1)
                        T.reads(p0[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)], p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block])
                        T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                        T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                        with T.init():
                            conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = T.float32(0)
                        conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] + p0[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)] * p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block]
                for ax0, ax1, ax2, ax3, ax4 in T.grid(T.int64(1), T.int64(48), T.int64(14), T.int64(14), T.int64(2)):
                    with T.block("T_relu"):
                        v_ax0, v_ax1, v_ax2, v_ax3 = T.axis.remap("SSSS", [ax0, ax1, ax2, ax3])
                        v_ax4 = T.axis.spatial(T.int64(4), oc_block_1 * T.int64(2) + ax4)
                        T.reads(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4])
                        T.writes(T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                        T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.max(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] + p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4], T.float32(0))
b0 = sch.get_block(name="conv2d_NCHWc", func_name="main")
b1 = sch.get_block(name="T_add", func_name="main")
b2 = sch.get_block(name="root", func_name="main")
sch.compute_inline(block=b1)
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.tiling_structure", ann_val="SSRSRS")
l3, l4, l5, l6, l7, l8, l9, l10 = sch.get_loops(block=b0)
v11, v12, v13, v14 = sch.sample_perfect_tile(loop=l3, n=4, max_innermost_factor=64, decision=[1, 1, 1, 1])
l15, l16, l17, l18 = sch.split(loop=l3, factors=[v11, v12, v13, v14], preserve_unit_iters=True)
v19, v20, v21, v22 = sch.sample_perfect_tile(loop=l4, n=4, max_innermost_factor=64, decision=[1, 1, 12, 4])
l23, l24, l25, l26 = sch.split(loop=l4, factors=[v19, v20, v21, v22], preserve_unit_iters=True)
v27, v28, v29, v30 = sch.sample_perfect_tile(loop=l5, n=4, max_innermost_factor=64, decision=[1, 1, 1, 14])
l31, l32, l33, l34 = sch.split(loop=l5, factors=[v27, v28, v29, v30], preserve_unit_iters=True)
v35, v36, v37, v38 = sch.sample_perfect_tile(loop=l6, n=4, max_innermost_factor=64, decision=[1, 1, 7, 2])
l39, l40, l41, l42 = sch.split(loop=l6, factors=[v35, v36, v37, v38], preserve_unit_iters=True)
v43, v44, v45, v46 = sch.sample_perfect_tile(loop=l7, n=4, max_innermost_factor=64, decision=[1, 2, 1, 2])
l47, l48, l49, l50 = sch.split(loop=l7, factors=[v43, v44, v45, v46], preserve_unit_iters=True)
v51, v52 = sch.sample_perfect_tile(loop=l8, n=2, max_innermost_factor=64, decision=[464, 3])
l53, l54 = sch.split(loop=l8, factors=[v51, v52], preserve_unit_iters=True)
v55, v56 = sch.sample_perfect_tile(loop=l9, n=2, max_innermost_factor=64, decision=[1, 1])
l57, l58 = sch.split(loop=l9, factors=[v55, v56], preserve_unit_iters=True)
v59, v60 = sch.sample_perfect_tile(loop=l10, n=2, max_innermost_factor=64, decision=[1, 1])
l61, l62 = sch.split(loop=l10, factors=[v59, v60], preserve_unit_iters=True)
sch.reorder(l15, l23, l31, l39, l47, l16, l24, l32, l40, l48, l53, l57, l61, l17, l25, l33, l41, l49, l54, l58, l62, l18, l26, l34, l42, l50)
b63, = sch.get_consumers(block=b0)
sch.reverse_compute_at(block=b63, loop=l48, preserve_unit_loops=True, index=-1)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.vectorize", ann_val=64)
v64 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=0)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.unroll_explicit", ann_val=v64)
2024-04-29 02:30:53 [INFO] [task_scheduler.cc:170] Design space #2:
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(348), T.int64(14), T.int64(14), T.int64(4)), "float32"), p1: T.Buffer((T.int64(48), T.int64(348), T.int64(1), T.int64(1), T.int64(4), T.int64(4)), "float32"), p2: T.Buffer((T.int64(1), T.int64(48), T.int64(1), T.int64(1), T.int64(4)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(48), T.int64(14), T.int64(14), T.int64(4)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        with T.block("root"):
            T.reads()
            T.writes()
            T.block_attr({"meta_schedule.parallel": 768, "meta_schedule.unroll_explicit": 0, "meta_schedule.vectorize": 64})
            conv2d_NCHWc = T.alloc_buffer((T.int64(1), T.int64(48), T.int64(14), T.int64(14), T.int64(4)))
            for n_0, oc_chunk_0, oh_0, ow_0, oc_block_0 in T.grid(T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1)):
                for n_1, oc_chunk_1, oh_1, ow_1, oc_block_1, ic_0, kh_0, kw_0, n_2, oc_chunk_2, oh_2, ow_2, oc_block_2, ic_1, kh_1, kw_1, n_3, oc_chunk_3, oh_3, ow_3, oc_block_3 in T.grid(T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(464), T.int64(1), T.int64(1), T.int64(1), T.int64(12), T.int64(1), T.int64(7), T.int64(1), T.int64(3), T.int64(1), T.int64(1), T.int64(1), T.int64(4), T.int64(14), T.int64(2), T.int64(2)):
                    with T.block("conv2d_NCHWc"):
                        v_n = T.axis.spatial(T.int64(1), n_0 + n_1 + n_2 + n_3)
                        v_oc_chunk = T.axis.spatial(T.int64(48), oc_chunk_0 * T.int64(48) + oc_chunk_1 * T.int64(48) + oc_chunk_2 * T.int64(4) + oc_chunk_3)
                        v_oh = T.axis.spatial(T.int64(14), oh_0 * T.int64(14) + oh_1 * T.int64(14) + oh_2 * T.int64(14) + oh_3)
                        v_ow = T.axis.spatial(T.int64(14), ow_0 * T.int64(14) + ow_1 * T.int64(14) + ow_2 * T.int64(2) + ow_3)
                        v_oc_block = T.axis.spatial(T.int64(4), oc_block_0 * T.int64(4) + oc_block_1 * T.int64(2) + oc_block_2 * T.int64(2) + oc_block_3)
                        v_ic = T.axis.reduce(T.int64(1392), ic_0 * T.int64(3) + ic_1)
                        v_kh = T.axis.reduce(T.int64(1), kh_0 + kh_1)
                        v_kw = T.axis.reduce(T.int64(1), kw_0 + kw_1)
                        T.reads(p0[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)], p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block])
                        T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                        T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                        with T.init():
                            conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = T.float32(0)
                        conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] + p0[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)] * p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block]
                for ax0, ax1, ax2, ax3, ax4 in T.grid(T.int64(1), T.int64(48), T.int64(14), T.int64(14), T.int64(4)):
                    with T.block("T_relu"):
                        v_ax0, v_ax1, v_ax2, v_ax3, v_ax4 = T.axis.remap("SSSSS", [ax0, ax1, ax2, ax3, ax4])
                        T.reads(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4])
                        T.writes(T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                        T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.max(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] + p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4], T.float32(0))
b0 = sch.get_block(name="conv2d_NCHWc", func_name="main")
b1 = sch.get_block(name="T_add", func_name="main")
b2 = sch.get_block(name="root", func_name="main")
sch.compute_inline(block=b1)
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.tiling_structure", ann_val="SSRSRS")
l3, l4, l5, l6, l7, l8, l9, l10 = sch.get_loops(block=b0)
v11, v12, v13, v14 = sch.sample_perfect_tile(loop=l3, n=4, max_innermost_factor=64, decision=[1, 1, 1, 1])
l15, l16, l17, l18 = sch.split(loop=l3, factors=[v11, v12, v13, v14], preserve_unit_iters=True)
v19, v20, v21, v22 = sch.sample_perfect_tile(loop=l4, n=4, max_innermost_factor=64, decision=[1, 1, 12, 4])
l23, l24, l25, l26 = sch.split(loop=l4, factors=[v19, v20, v21, v22], preserve_unit_iters=True)
v27, v28, v29, v30 = sch.sample_perfect_tile(loop=l5, n=4, max_innermost_factor=64, decision=[1, 1, 1, 14])
l31, l32, l33, l34 = sch.split(loop=l5, factors=[v27, v28, v29, v30], preserve_unit_iters=True)
v35, v36, v37, v38 = sch.sample_perfect_tile(loop=l6, n=4, max_innermost_factor=64, decision=[1, 1, 7, 2])
l39, l40, l41, l42 = sch.split(loop=l6, factors=[v35, v36, v37, v38], preserve_unit_iters=True)
v43, v44, v45, v46 = sch.sample_perfect_tile(loop=l7, n=4, max_innermost_factor=64, decision=[1, 2, 1, 2])
l47, l48, l49, l50 = sch.split(loop=l7, factors=[v43, v44, v45, v46], preserve_unit_iters=True)
v51, v52 = sch.sample_perfect_tile(loop=l8, n=2, max_innermost_factor=64, decision=[464, 3])
l53, l54 = sch.split(loop=l8, factors=[v51, v52], preserve_unit_iters=True)
v55, v56 = sch.sample_perfect_tile(loop=l9, n=2, max_innermost_factor=64, decision=[1, 1])
l57, l58 = sch.split(loop=l9, factors=[v55, v56], preserve_unit_iters=True)
v59, v60 = sch.sample_perfect_tile(loop=l10, n=2, max_innermost_factor=64, decision=[1, 1])
l61, l62 = sch.split(loop=l10, factors=[v59, v60], preserve_unit_iters=True)
sch.reorder(l15, l23, l31, l39, l47, l16, l24, l32, l40, l48, l53, l57, l61, l17, l25, l33, l41, l49, l54, l58, l62, l18, l26, l34, l42, l50)
b63, = sch.get_consumers(block=b0)
sch.reverse_compute_at(block=b63, loop=l47, preserve_unit_loops=True, index=-1)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.vectorize", ann_val=64)
v64 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=0)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.unroll_explicit", ann_val=v64)
2024-04-29 03:35:17 [INFO] [evolutionary_search.cc:713] Generating candidates......
2024-04-29 03:35:17 [INFO] [evolutionary_search.cc:715] Picked top 0 candidate(s) from database
2024-04-29 03:35:20 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x158a6fd8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x6e066c8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x10b77898)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x161691b8)]: 0 failure(s)
2024-04-29 03:35:20 [INFO] [evolutionary_search.cc:723] Sampled 512 candidate(s)
2024-04-29 03:35:23 [INFO] [evolutionary_search.cc:621] Evolve iter #0 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x158a6fd8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x6e066c8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x10b77898)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x161691b8)]: 0 failure(s)
2024-04-29 03:35:26 [INFO] [evolutionary_search.cc:621] Evolve iter #1 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x158a6fd8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x6e066c8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x10b77898)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x161691b8)]: 0 failure(s)
2024-04-29 03:35:29 [INFO] [evolutionary_search.cc:621] Evolve iter #2 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x158a6fd8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x6e066c8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x10b77898)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x161691b8)]: 0 failure(s)
2024-04-29 03:35:32 [INFO] [evolutionary_search.cc:621] Evolve iter #3 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x158a6fd8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x6e066c8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x10b77898)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x161691b8)]: 0 failure(s)
2024-04-29 03:35:33 [INFO] [evolutionary_search.cc:649] Scores of the best 64 candidates:
[1 : 16]:	0.9999  0.9995  0.9994  0.9992  0.9990  0.9989  0.9988  0.9985  0.9984  0.9972  0.9969  0.9962  0.9960  0.9956  0.9953  0.9951
[17 : 32]:	0.9946  0.9932  0.9930  0.9918  0.9917  0.9917  0.9903  0.9900  0.9900  0.9889  0.9876  0.9874  0.9873  0.9855  0.9855  0.9854
[33 : 48]:	0.9852  0.9850  0.9846  0.9845  0.9842  0.9840  0.9839  0.9836  0.9822  0.9822  0.9820  0.9815  0.9807  0.9806  0.9805  0.9804
[49 : 64]:	0.9801  0.9800  0.9796  0.9791  0.9787  0.9776  0.9775  0.9773  0.9772  0.9771  0.9771  0.9767  0.9763  0.9760  0.9757  0.9747
2024-04-29 03:35:33 [INFO] [evolutionary_search.cc:727] Got 64 candidate(s) with evolutionary search
2024-04-29 03:35:33 [INFO] [evolutionary_search.cc:730] Sending 64 candidates(s) for measurement
2024-04-29 05:06:00 [INFO] [task_scheduler.cc:131] [Task #39: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_38] Trial #1: GFLOPs: 66.9904. Time: 1565.0413 us. Best GFLOPs: 66.9904
2024-04-29 05:06:00 [INFO] [task_scheduler.cc:131] [Task #39: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_38] Trial #2: GFLOPs: 96.6450. Time: 1084.8232 us. Best GFLOPs: 96.6450
2024-04-29 05:06:00 [INFO] [task_scheduler.cc:131] [Task #39: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_38] Trial #3: GFLOPs: 54.6339. Time: 1919.0064 us. Best GFLOPs: 96.6450
2024-04-29 05:06:00 [INFO] [task_scheduler.cc:131] [Task #39: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_38] Trial #4: GFLOPs: 132.7331. Time: 789.8766 us. Best GFLOPs: 132.7331
2024-04-29 05:06:00 [INFO] [task_scheduler.cc:131] [Task #39: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_38] Trial #5: GFLOPs: 35.1009. Time: 2986.8961 us. Best GFLOPs: 132.7331
2024-04-29 05:06:00 [INFO] [task_scheduler.cc:131] [Task #39: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_38] Trial #6: GFLOPs: 81.4747. Time: 1286.8137 us. Best GFLOPs: 132.7331
2024-04-29 05:06:00 [INFO] [task_scheduler.cc:131] [Task #39: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_38] Trial #7: GFLOPs: 49.0320. Time: 2138.2519 us. Best GFLOPs: 132.7331
2024-04-29 05:06:00 [INFO] [task_scheduler.cc:131] [Task #39: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_38] Trial #8: GFLOPs: 55.1274. Time: 1901.8256 us. Best GFLOPs: 132.7331
2024-04-29 05:06:00 [INFO] [task_scheduler.cc:131] [Task #39: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_38] Trial #9: GFLOPs: 21.9785. Time: 4770.2498 us. Best GFLOPs: 132.7331
2024-04-29 05:06:00 [INFO] [task_scheduler.cc:121] [Task #39: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_38] Trial #10: Error in building:
LocalBuilder: Timeout, killed after 30.0 seconds
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(348), T.int64(14), T.int64(14), T.int64(4)), "float32"), p1: T.Buffer((T.int64(48), T.int64(348), T.int64(1), T.int64(1), T.int64(4), T.int64(4)), "float32"), p2: T.Buffer((T.int64(1), T.int64(48), T.int64(1), T.int64(1), T.int64(4)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(48), T.int64(14), T.int64(14), T.int64(4)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        conv2d_NCHWc = T.alloc_buffer((T.int64(1), T.int64(48), T.int64(14), T.int64(14), T.int64(4)))
        for n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused in T.parallel(T.int64(336), annotations={"pragma_auto_unroll_max_step": 512, "pragma_unroll_explicit": 1}):
            for n_2_init, oc_chunk_2_init, oh_2_init, ow_2_init, oc_block_2_init, n_3_init, oc_chunk_3_init, oh_3_init, ow_3_init, oc_block_3_init in T.grid(T.int64(1), T.int64(1), T.int64(7), T.int64(2), T.int64(4), T.int64(1), T.int64(2), T.int64(1), T.int64(1), T.int64(1)):
                with T.block("conv2d_NCHWc_init"):
                    v_n = T.axis.spatial(T.int64(1), n_2_init + n_3_init)
                    v_oc_chunk = T.axis.spatial(T.int64(48), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused // T.int64(14) * T.int64(2) + oc_chunk_2_init * T.int64(2) + oc_chunk_3_init)
                    v_oh = T.axis.spatial(T.int64(14), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused % T.int64(14) // T.int64(7) * T.int64(7) + oh_2_init + oh_3_init)
                    v_ow = T.axis.spatial(T.int64(14), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused % T.int64(7) * T.int64(2) + ow_2_init + ow_3_init)
                    v_oc_block = T.axis.spatial(T.int64(4), oc_block_2_init + oc_block_3_init)
                    T.reads()
                    T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                    T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                    conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = T.float32(0)
            for ic_0, kh_0, kw_0, n_2, oc_chunk_2, oh_2, ow_2, oc_block_2, ic_1, kh_1, kw_1, n_3, oc_chunk_3, oh_3, ow_3, oc_block_3 in T.grid(T.int64(48), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(7), T.int64(2), T.int64(4), T.int64(29), T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(1), T.int64(1), T.int64(1)):
                with T.block("conv2d_NCHWc_update"):
                    v_n = T.axis.spatial(T.int64(1), n_2 + n_3)
                    v_oc_chunk = T.axis.spatial(T.int64(48), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused // T.int64(14) * T.int64(2) + oc_chunk_2 * T.int64(2) + oc_chunk_3)
                    v_oh = T.axis.spatial(T.int64(14), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused % T.int64(14) // T.int64(7) * T.int64(7) + oh_2 + oh_3)
                    v_ow = T.axis.spatial(T.int64(14), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused % T.int64(7) * T.int64(2) + ow_2 + ow_3)
                    v_oc_block = T.axis.spatial(T.int64(4), oc_block_2 + oc_block_3)
                    v_ic = T.axis.reduce(T.int64(1392), ic_0 * T.int64(29) + ic_1)
                    v_kh = T.axis.reduce(T.int64(1), kh_0 + kh_1)
                    v_kw = T.axis.reduce(T.int64(1), kw_0 + kw_1)
                    T.reads(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block], p0[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)], p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block])
                    T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                    T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                    conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] + p0[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)] * p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block]
            for ax0, ax1, ax2 in T.grid(T.int64(1), T.int64(2), T.int64(7)):
                for ax3_ax4_fused in T.vectorized(T.int64(8)):
                    with T.block("T_relu"):
                        v_ax0 = T.axis.spatial(T.int64(1), ax0)
                        v_ax1 = T.axis.spatial(T.int64(48), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused // T.int64(14) * T.int64(2) + ax1)
                        v_ax2 = T.axis.spatial(T.int64(14), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused % T.int64(14) // T.int64(7) * T.int64(7) + ax2)
                        v_ax3 = T.axis.spatial(T.int64(14), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused % T.int64(7) * T.int64(2) + ax3_ax4_fused // T.int64(4))
                        v_ax4 = T.axis.spatial(T.int64(4), ax3_ax4_fused % T.int64(4))
                        T.reads(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4])
                        T.writes(T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                        T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.max(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] + p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4], T.float32(0))
b0 = sch.get_block(name="conv2d_NCHWc", func_name="main")
b1 = sch.get_block(name="T_add", func_name="main")
b2 = sch.get_block(name="root", func_name="main")
sch.compute_inline(block=b1)
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.tiling_structure", ann_val="SSRSRS")
l3, l4, l5, l6, l7, l8, l9, l10 = sch.get_loops(block=b0)
v11, v12, v13, v14 = sch.sample_perfect_tile(loop=l3, n=4, max_innermost_factor=64, decision=[1, 1, 1, 1])
l15, l16, l17, l18 = sch.split(loop=l3, factors=[v11, v12, v13, v14], preserve_unit_iters=True)
v19, v20, v21, v22 = sch.sample_perfect_tile(loop=l4, n=4, max_innermost_factor=64, decision=[8, 3, 1, 2])
l23, l24, l25, l26 = sch.split(loop=l4, factors=[v19, v20, v21, v22], preserve_unit_iters=True)
v27, v28, v29, v30 = sch.sample_perfect_tile(loop=l5, n=4, max_innermost_factor=64, decision=[1, 2, 7, 1])
l31, l32, l33, l34 = sch.split(loop=l5, factors=[v27, v28, v29, v30], preserve_unit_iters=True)
v35, v36, v37, v38 = sch.sample_perfect_tile(loop=l6, n=4, max_innermost_factor=64, decision=[1, 7, 2, 1])
l39, l40, l41, l42 = sch.split(loop=l6, factors=[v35, v36, v37, v38], preserve_unit_iters=True)
v43, v44, v45, v46 = sch.sample_perfect_tile(loop=l7, n=4, max_innermost_factor=64, decision=[1, 1, 4, 1])
l47, l48, l49, l50 = sch.split(loop=l7, factors=[v43, v44, v45, v46], preserve_unit_iters=True)
v51, v52 = sch.sample_perfect_tile(loop=l8, n=2, max_innermost_factor=64, decision=[48, 29])
l53, l54 = sch.split(loop=l8, factors=[v51, v52], preserve_unit_iters=True)
v55, v56 = sch.sample_perfect_tile(loop=l9, n=2, max_innermost_factor=64, decision=[1, 1])
l57, l58 = sch.split(loop=l9, factors=[v55, v56], preserve_unit_iters=True)
v59, v60 = sch.sample_perfect_tile(loop=l10, n=2, max_innermost_factor=64, decision=[1, 1])
l61, l62 = sch.split(loop=l10, factors=[v59, v60], preserve_unit_iters=True)
sch.reorder(l15, l23, l31, l39, l47, l16, l24, l32, l40, l48, l53, l57, l61, l17, l25, l33, l41, l49, l54, l58, l62, l18, l26, l34, l42, l50)
b63, = sch.get_consumers(block=b0)
sch.reverse_compute_at(block=b63, loop=l48, preserve_unit_loops=True, index=-1)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.vectorize", ann_val=64)
v64 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.unroll_explicit", ann_val=v64)
sch.enter_postproc()
b65 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b65, ann_key="meta_schedule.parallel")
sch.unannotate(block_or_loop=b65, ann_key="meta_schedule.vectorize")
sch.unannotate(block_or_loop=b65, ann_key="meta_schedule.unroll_explicit")
b66, b67 = sch.get_child_blocks(b65)
l68, l69, l70, l71, l72, l73, l74, l75, l76, l77, l78, l79, l80, l81, l82, l83, l84, l85, l86, l87, l88, l89, l90, l91, l92, l93 = sch.get_loops(block=b66)
l94 = sch.fuse(l68, l69, l70, l71, l72, l73, l74, l75, l76, l77, preserve_unit_iters=True)
sch.parallel(loop=l94)
sch.annotate(block_or_loop=l94, ann_key="pragma_auto_unroll_max_step", ann_val=512)
sch.annotate(block_or_loop=l94, ann_key="pragma_unroll_explicit", ann_val=1)
l95, l96, l97, l98, l99, l100 = sch.get_loops(block=b67)
l101 = sch.fuse(l99, l100, preserve_unit_iters=True)
sch.vectorize(loop=l101)
b102 = sch.get_block(name="conv2d_NCHWc", func_name="main")
l103, l104, l105, l106, l107, l108, l109, l110, l111, l112, l113, l114, l115, l116, l117, l118, l119 = sch.get_loops(block=b102)
b120 = sch.decompose_reduction(block=b102, loop=l104)
2024-04-29 05:06:00 [INFO] [task_scheduler.cc:131] [Task #39: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_38] Trial #11: GFLOPs: 16.4298. Time: 6381.2476 us. Best GFLOPs: 132.7331
2024-04-29 05:06:00 [INFO] [task_scheduler.cc:131] [Task #39: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_38] Trial #12: GFLOPs: 23.3363. Time: 4492.6811 us. Best GFLOPs: 132.7331
2024-04-29 05:06:00 [INFO] [task_scheduler.cc:131] [Task #39: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_38] Trial #13: GFLOPs: 62.3917. Time: 1680.3967 us. Best GFLOPs: 132.7331
2024-04-29 05:06:00 [INFO] [task_scheduler.cc:131] [Task #39: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_38] Trial #14: GFLOPs: 17.8388. Time: 5877.2327 us. Best GFLOPs: 132.7331
2024-04-29 05:06:00 [INFO] [task_scheduler.cc:131] [Task #39: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_38] Trial #15: GFLOPs: 1.6773. Time: 62505.9663 us. Best GFLOPs: 132.7331
2024-04-29 05:06:00 [INFO] [task_scheduler.cc:131] [Task #39: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_38] Trial #16: GFLOPs: 96.4671. Time: 1086.8241 us. Best GFLOPs: 132.7331
2024-04-29 05:06:00 [INFO] [task_scheduler.cc:131] [Task #39: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_38] Trial #17: GFLOPs: 14.8987. Time: 7037.0624 us. Best GFLOPs: 132.7331
2024-04-29 05:06:00 [INFO] [task_scheduler.cc:131] [Task #39: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_38] Trial #18: GFLOPs: 105.5488. Time: 993.3110 us. Best GFLOPs: 132.7331
2024-04-29 05:06:00 [INFO] [task_scheduler.cc:131] [Task #39: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_38] Trial #19: GFLOPs: 25.8232. Time: 4060.0259 us. Best GFLOPs: 132.7331
2024-04-29 05:06:00 [INFO] [task_scheduler.cc:131] [Task #39: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_38] Trial #20: GFLOPs: 101.6542. Time: 1031.3667 us. Best GFLOPs: 132.7331
2024-04-29 05:06:00 [INFO] [task_scheduler.cc:131] [Task #39: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_38] Trial #21: GFLOPs: 48.6411. Time: 2155.4371 us. Best GFLOPs: 132.7331
2024-04-29 05:06:00 [INFO] [task_scheduler.cc:131] [Task #39: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_38] Trial #22: GFLOPs: 25.0408. Time: 4186.8779 us. Best GFLOPs: 132.7331
2024-04-29 05:06:00 [INFO] [task_scheduler.cc:131] [Task #39: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_38] Trial #23: GFLOPs: 13.8751. Time: 7556.1649 us. Best GFLOPs: 132.7331
2024-04-29 05:06:00 [INFO] [task_scheduler.cc:131] [Task #39: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_38] Trial #24: GFLOPs: 3.4218. Time: 30640.0015 us. Best GFLOPs: 132.7331
2024-04-29 05:06:00 [INFO] [task_scheduler.cc:131] [Task #39: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_38] Trial #25: GFLOPs: 136.3322. Time: 769.0244 us. Best GFLOPs: 136.3322
2024-04-29 05:06:00 [INFO] [task_scheduler.cc:131] [Task #39: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_38] Trial #26: GFLOPs: 33.3817. Time: 3140.7231 us. Best GFLOPs: 136.3322
2024-04-29 05:06:00 [INFO] [task_scheduler.cc:131] [Task #39: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_38] Trial #27: GFLOPs: 134.3003. Time: 780.6593 us. Best GFLOPs: 136.3322
2024-04-29 05:06:00 [INFO] [task_scheduler.cc:131] [Task #39: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_38] Trial #28: GFLOPs: 65.8891. Time: 1591.1997 us. Best GFLOPs: 136.3322
2024-04-29 05:06:00 [INFO] [task_scheduler.cc:131] [Task #39: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_38] Trial #29: GFLOPs: 5.4063. Time: 19392.7843 us. Best GFLOPs: 136.3322
2024-04-29 05:06:00 [INFO] [task_scheduler.cc:131] [Task #39: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_38] Trial #30: GFLOPs: 89.7081. Time: 1168.7094 us. Best GFLOPs: 136.3322
2024-04-29 05:06:00 [INFO] [task_scheduler.cc:131] [Task #39: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_38] Trial #31: GFLOPs: 10.9995. Time: 9531.5608 us. Best GFLOPs: 136.3322
2024-04-29 05:06:00 [INFO] [task_scheduler.cc:131] [Task #39: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_38] Trial #32: GFLOPs: 131.2569. Time: 798.7598 us. Best GFLOPs: 136.3322
2024-04-29 05:06:00 [INFO] [task_scheduler.cc:131] [Task #39: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_38] Trial #33: GFLOPs: 47.7036. Time: 2197.7953 us. Best GFLOPs: 136.3322
2024-04-29 05:06:00 [INFO] [task_scheduler.cc:131] [Task #39: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_38] Trial #34: GFLOPs: 30.4896. Time: 3438.6374 us. Best GFLOPs: 136.3322
2024-04-29 05:06:00 [INFO] [task_scheduler.cc:131] [Task #39: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_38] Trial #35: GFLOPs: 16.6058. Time: 6313.6389 us. Best GFLOPs: 136.3322
2024-04-29 05:06:00 [INFO] [task_scheduler.cc:131] [Task #39: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_38] Trial #36: GFLOPs: 18.0473. Time: 5809.3314 us. Best GFLOPs: 136.3322
2024-04-29 05:06:00 [INFO] [task_scheduler.cc:131] [Task #39: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_38] Trial #37: GFLOPs: 25.4633. Time: 4117.4040 us. Best GFLOPs: 136.3322
2024-04-29 05:06:00 [INFO] [task_scheduler.cc:131] [Task #39: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_38] Trial #38: GFLOPs: 54.1532. Time: 1936.0413 us. Best GFLOPs: 136.3322
2024-04-29 05:06:00 [INFO] [task_scheduler.cc:131] [Task #39: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_38] Trial #39: GFLOPs: 56.2285. Time: 1864.5850 us. Best GFLOPs: 136.3322
2024-04-29 05:06:00 [INFO] [task_scheduler.cc:131] [Task #39: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_38] Trial #40: GFLOPs: 57.5257. Time: 1822.5390 us. Best GFLOPs: 136.3322
2024-04-29 05:06:00 [INFO] [task_scheduler.cc:131] [Task #39: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_38] Trial #41: GFLOPs: 40.7431. Time: 2573.2630 us. Best GFLOPs: 136.3322
2024-04-29 05:06:00 [INFO] [task_scheduler.cc:131] [Task #39: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_38] Trial #42: GFLOPs: 66.0460. Time: 1587.4197 us. Best GFLOPs: 136.3322
2024-04-29 05:06:00 [INFO] [task_scheduler.cc:131] [Task #39: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_38] Trial #43: GFLOPs: 12.3990. Time: 8455.7514 us. Best GFLOPs: 136.3322
2024-04-29 05:06:00 [INFO] [task_scheduler.cc:131] [Task #39: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_38] Trial #44: GFLOPs: 139.2536. Time: 752.8908 us. Best GFLOPs: 139.2536
2024-04-29 05:06:00 [INFO] [task_scheduler.cc:131] [Task #39: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_38] Trial #45: GFLOPs: 0.9452. Time: 110922.2627 us. Best GFLOPs: 139.2536
2024-04-29 05:06:00 [INFO] [task_scheduler.cc:131] [Task #39: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_38] Trial #46: GFLOPs: 98.2352. Time: 1067.2625 us. Best GFLOPs: 139.2536
2024-04-29 05:06:00 [INFO] [task_scheduler.cc:131] [Task #39: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_38] Trial #47: GFLOPs: 95.8040. Time: 1094.3461 us. Best GFLOPs: 139.2536
2024-04-29 05:06:00 [INFO] [task_scheduler.cc:131] [Task #39: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_38] Trial #48: GFLOPs: 86.1310. Time: 1217.2482 us. Best GFLOPs: 139.2536
2024-04-29 05:06:00 [INFO] [task_scheduler.cc:131] [Task #39: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_38] Trial #49: GFLOPs: 13.1342. Time: 7982.4075 us. Best GFLOPs: 139.2536
2024-04-29 05:06:00 [INFO] [task_scheduler.cc:131] [Task #39: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_38] Trial #50: GFLOPs: 138.0533. Time: 759.4368 us. Best GFLOPs: 139.2536
2024-04-29 05:06:00 [INFO] [task_scheduler.cc:131] [Task #39: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_38] Trial #51: GFLOPs: 13.0845. Time: 8012.7278 us. Best GFLOPs: 139.2536
2024-04-29 05:06:00 [INFO] [task_scheduler.cc:121] [Task #39: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_38] Trial #52: Error in building:
LocalBuilder: Timeout, killed after 30.0 seconds
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(348), T.int64(14), T.int64(14), T.int64(4)), "float32"), p1: T.Buffer((T.int64(48), T.int64(348), T.int64(1), T.int64(1), T.int64(4), T.int64(4)), "float32"), p2: T.Buffer((T.int64(1), T.int64(48), T.int64(1), T.int64(1), T.int64(4)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(48), T.int64(14), T.int64(14), T.int64(4)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        conv2d_NCHWc = T.alloc_buffer((T.int64(1), T.int64(48), T.int64(14), T.int64(14), T.int64(4)))
        for n_0 in T.serial(T.int64(1), annotations={"pragma_auto_unroll_max_step": 512, "pragma_unroll_explicit": 1}):
            for oc_chunk_0, oh_0, ow_0, oc_block_0 in T.grid(T.int64(1), T.int64(1), T.int64(1), T.int64(1)):
                for n_1, oc_chunk_1, oh_1, ow_1, oc_block_1 in T.grid(T.int64(1), T.int64(2), T.int64(7), T.int64(14), T.int64(1)):
                    for n_2_init, oc_chunk_2_init, oh_2_init, ow_2_init, oc_block_2_init, n_3_init, oc_chunk_3_init, oh_3_init, ow_3_init, oc_block_3_init in T.grid(T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(4), T.int64(1), T.int64(24), T.int64(2), T.int64(1), T.int64(1)):
                        with T.block("conv2d_NCHWc_init"):
                            v_n = T.axis.spatial(T.int64(1), n_0 + n_1 + n_2_init + n_3_init)
                            v_oc_chunk = T.axis.spatial(T.int64(48), oc_chunk_0 * T.int64(48) + oc_chunk_1 * T.int64(24) + oc_chunk_2_init * T.int64(24) + oc_chunk_3_init)
                            v_oh = T.axis.spatial(T.int64(14), oh_0 * T.int64(14) + oh_1 * T.int64(2) + oh_2_init * T.int64(2) + oh_3_init)
                            v_ow = T.axis.spatial(T.int64(14), ow_0 * T.int64(14) + ow_1 + ow_2_init + ow_3_init)
                            v_oc_block = T.axis.spatial(T.int64(4), oc_block_0 * T.int64(4) + oc_block_1 * T.int64(4) + oc_block_2_init + oc_block_3_init)
                            T.reads()
                            T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                            T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                            conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = T.float32(0)
                    for ic_0, kh_0, kw_0, n_2, oc_chunk_2, oh_2, ow_2, oc_block_2, ic_1, kh_1, kw_1, n_3, oc_chunk_3, oh_3, ow_3, oc_block_3 in T.grid(T.int64(696), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(4), T.int64(2), T.int64(1), T.int64(1), T.int64(1), T.int64(24), T.int64(2), T.int64(1), T.int64(1)):
                        with T.block("conv2d_NCHWc_update"):
                            v_n = T.axis.spatial(T.int64(1), n_0 + n_1 + n_2 + n_3)
                            v_oc_chunk = T.axis.spatial(T.int64(48), oc_chunk_0 * T.int64(48) + oc_chunk_1 * T.int64(24) + oc_chunk_2 * T.int64(24) + oc_chunk_3)
                            v_oh = T.axis.spatial(T.int64(14), oh_0 * T.int64(14) + oh_1 * T.int64(2) + oh_2 * T.int64(2) + oh_3)
                            v_ow = T.axis.spatial(T.int64(14), ow_0 * T.int64(14) + ow_1 + ow_2 + ow_3)
                            v_oc_block = T.axis.spatial(T.int64(4), oc_block_0 * T.int64(4) + oc_block_1 * T.int64(4) + oc_block_2 + oc_block_3)
                            v_ic = T.axis.reduce(T.int64(1392), ic_0 * T.int64(2) + ic_1)
                            v_kh = T.axis.reduce(T.int64(1), kh_0 + kh_1)
                            v_kw = T.axis.reduce(T.int64(1), kw_0 + kw_1)
                            T.reads(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block], p0[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)], p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block])
                            T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                            T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                            conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] + p0[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)] * p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block]
                for ax0, ax1, ax2 in T.grid(T.int64(1), T.int64(48), T.int64(14)):
                    for ax3_ax4_fused in T.vectorized(T.int64(56)):
                        with T.block("T_relu"):
                            v_ax0, v_ax1, v_ax2 = T.axis.remap("SSS", [ax0, ax1, ax2])
                            v_ax3 = T.axis.spatial(T.int64(14), ax3_ax4_fused // T.int64(4))
                            v_ax4 = T.axis.spatial(T.int64(4), ax3_ax4_fused % T.int64(4))
                            T.reads(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4])
                            T.writes(T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                            T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.max(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] + p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4], T.float32(0))
b0 = sch.get_block(name="conv2d_NCHWc", func_name="main")
b1 = sch.get_block(name="T_add", func_name="main")
b2 = sch.get_block(name="root", func_name="main")
sch.compute_inline(block=b1)
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.tiling_structure", ann_val="SSRSRS")
l3, l4, l5, l6, l7, l8, l9, l10 = sch.get_loops(block=b0)
v11, v12, v13, v14 = sch.sample_perfect_tile(loop=l3, n=4, max_innermost_factor=64, decision=[1, 1, 1, 1])
l15, l16, l17, l18 = sch.split(loop=l3, factors=[v11, v12, v13, v14], preserve_unit_iters=True)
v19, v20, v21, v22 = sch.sample_perfect_tile(loop=l4, n=4, max_innermost_factor=64, decision=[1, 2, 1, 24])
l23, l24, l25, l26 = sch.split(loop=l4, factors=[v19, v20, v21, v22], preserve_unit_iters=True)
v27, v28, v29, v30 = sch.sample_perfect_tile(loop=l5, n=4, max_innermost_factor=64, decision=[1, 7, 1, 2])
l31, l32, l33, l34 = sch.split(loop=l5, factors=[v27, v28, v29, v30], preserve_unit_iters=True)
v35, v36, v37, v38 = sch.sample_perfect_tile(loop=l6, n=4, max_innermost_factor=64, decision=[1, 14, 1, 1])
l39, l40, l41, l42 = sch.split(loop=l6, factors=[v35, v36, v37, v38], preserve_unit_iters=True)
v43, v44, v45, v46 = sch.sample_perfect_tile(loop=l7, n=4, max_innermost_factor=64, decision=[1, 1, 4, 1])
l47, l48, l49, l50 = sch.split(loop=l7, factors=[v43, v44, v45, v46], preserve_unit_iters=True)
v51, v52 = sch.sample_perfect_tile(loop=l8, n=2, max_innermost_factor=64, decision=[696, 2])
l53, l54 = sch.split(loop=l8, factors=[v51, v52], preserve_unit_iters=True)
v55, v56 = sch.sample_perfect_tile(loop=l9, n=2, max_innermost_factor=64, decision=[1, 1])
l57, l58 = sch.split(loop=l9, factors=[v55, v56], preserve_unit_iters=True)
v59, v60 = sch.sample_perfect_tile(loop=l10, n=2, max_innermost_factor=64, decision=[1, 1])
l61, l62 = sch.split(loop=l10, factors=[v59, v60], preserve_unit_iters=True)
sch.reorder(l15, l23, l31, l39, l47, l16, l24, l32, l40, l48, l53, l57, l61, l17, l25, l33, l41, l49, l54, l58, l62, l18, l26, l34, l42, l50)
b63, = sch.get_consumers(block=b0)
sch.reverse_compute_at(block=b63, loop=l47, preserve_unit_loops=True, index=-1)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.vectorize", ann_val=64)
v64 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.unroll_explicit", ann_val=v64)
sch.enter_postproc()
b65 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b65, ann_key="meta_schedule.parallel")
sch.unannotate(block_or_loop=b65, ann_key="meta_schedule.vectorize")
sch.unannotate(block_or_loop=b65, ann_key="meta_schedule.unroll_explicit")
b66, b67 = sch.get_child_blocks(b65)
l68, l69, l70, l71, l72, l73, l74, l75, l76, l77, l78, l79, l80, l81, l82, l83, l84, l85, l86, l87, l88, l89, l90, l91, l92, l93 = sch.get_loops(block=b66)
sch.annotate(block_or_loop=l68, ann_key="pragma_auto_unroll_max_step", ann_val=512)
sch.annotate(block_or_loop=l68, ann_key="pragma_unroll_explicit", ann_val=1)
l94, l95, l96, l97, l98, l99, l100, l101, l102, l103 = sch.get_loops(block=b67)
l104 = sch.fuse(l102, l103, preserve_unit_iters=True)
sch.vectorize(loop=l104)
b105 = sch.get_block(name="conv2d_NCHWc", func_name="main")
l106, l107, l108, l109, l110, l111, l112, l113, l114, l115, l116, l117, l118, l119, l120, l121, l122, l123, l124, l125, l126, l127, l128, l129, l130, l131 = sch.get_loops(block=b105)
b132 = sch.decompose_reduction(block=b105, loop=l116)
2024-04-29 05:06:00 [INFO] [task_scheduler.cc:131] [Task #39: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_38] Trial #53: GFLOPs: 72.4027. Time: 1448.0504 us. Best GFLOPs: 139.2536
2024-04-29 05:06:00 [INFO] [task_scheduler.cc:131] [Task #39: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_38] Trial #54: GFLOPs: 2.6598. Time: 39418.1850 us. Best GFLOPs: 139.2536
2024-04-29 05:06:00 [INFO] [task_scheduler.cc:131] [Task #39: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_38] Trial #55: GFLOPs: 9.8942. Time: 10596.3850 us. Best GFLOPs: 139.2536
2024-04-29 05:06:00 [INFO] [task_scheduler.cc:131] [Task #39: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_38] Trial #56: GFLOPs: 80.9764. Time: 1294.7325 us. Best GFLOPs: 139.2536
2024-04-29 05:06:00 [INFO] [task_scheduler.cc:131] [Task #39: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_38] Trial #57: GFLOPs: 165.9180. Time: 631.8949 us. Best GFLOPs: 165.9180
2024-04-29 05:06:00 [INFO] [task_scheduler.cc:131] [Task #39: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_38] Trial #58: GFLOPs: 41.8374. Time: 2505.9573 us. Best GFLOPs: 165.9180
2024-04-29 05:06:00 [INFO] [task_scheduler.cc:131] [Task #39: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_38] Trial #59: GFLOPs: 58.7581. Time: 1784.3107 us. Best GFLOPs: 165.9180
2024-04-29 05:06:00 [INFO] [task_scheduler.cc:131] [Task #39: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_38] Trial #60: GFLOPs: 52.1722. Time: 2009.5511 us. Best GFLOPs: 165.9180
2024-04-29 05:06:00 [INFO] [task_scheduler.cc:121] [Task #39: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_38] Trial #61: Error in building:
LocalBuilder: Timeout, killed after 30.0 seconds
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(348), T.int64(14), T.int64(14), T.int64(4)), "float32"), p1: T.Buffer((T.int64(48), T.int64(348), T.int64(1), T.int64(1), T.int64(4), T.int64(4)), "float32"), p2: T.Buffer((T.int64(1), T.int64(48), T.int64(1), T.int64(1), T.int64(4)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(48), T.int64(14), T.int64(14), T.int64(4)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        conv2d_NCHWc = T.alloc_buffer((T.int64(1), T.int64(48), T.int64(14), T.int64(14), T.int64(4)))
        for n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused in T.parallel(T.int64(12), annotations={"pragma_auto_unroll_max_step": 512, "pragma_unroll_explicit": 1}):
            for n_2_init, oc_chunk_2_init, oh_2_init, ow_2_init, oc_block_2_init, n_3_init, oc_chunk_3_init, oh_3_init, ow_3_init in T.grid(T.int64(1), T.int64(4), T.int64(1), T.int64(2), T.int64(1), T.int64(1), T.int64(2), T.int64(14), T.int64(7)):
                for oc_block_3_fused_init in T.vectorized(T.int64(2)):
                    with T.block("conv2d_NCHWc_init"):
                        v_n = T.axis.spatial(T.int64(1), n_2_init + n_3_init)
                        v_oc_chunk = T.axis.spatial(T.int64(48), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused % T.int64(6) * T.int64(8) + oc_chunk_2_init * T.int64(2) + oc_chunk_3_init)
                        v_oh = T.axis.spatial(T.int64(14), oh_2_init * T.int64(14) + oh_3_init)
                        v_ow = T.axis.spatial(T.int64(14), ow_2_init * T.int64(7) + ow_3_init)
                        v_oc_block = T.axis.spatial(T.int64(4), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused // T.int64(6) * T.int64(2) + oc_block_2_init * T.int64(2) + oc_block_3_fused_init)
                        T.reads()
                        T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                        T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                        conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = T.float32(0)
            for ic_0, kh_0, kw_0, n_2, oc_chunk_2, oh_2, ow_2, oc_block_2, ic_1, kh_1, kw_1, n_3, oc_chunk_3, oh_3, ow_3 in T.grid(T.int64(348), T.int64(1), T.int64(1), T.int64(1), T.int64(4), T.int64(1), T.int64(2), T.int64(1), T.int64(4), T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(14), T.int64(7)):
                for oc_block_3_fused in T.vectorized(T.int64(2)):
                    with T.block("conv2d_NCHWc_update"):
                        v_n = T.axis.spatial(T.int64(1), n_2 + n_3)
                        v_oc_chunk = T.axis.spatial(T.int64(48), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused % T.int64(6) * T.int64(8) + oc_chunk_2 * T.int64(2) + oc_chunk_3)
                        v_oh = T.axis.spatial(T.int64(14), oh_2 * T.int64(14) + oh_3)
                        v_ow = T.axis.spatial(T.int64(14), ow_2 * T.int64(7) + ow_3)
                        v_oc_block = T.axis.spatial(T.int64(4), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused // T.int64(6) * T.int64(2) + oc_block_2 * T.int64(2) + oc_block_3_fused)
                        v_ic = T.axis.reduce(T.int64(1392), ic_0 * T.int64(4) + ic_1)
                        v_kh = T.axis.reduce(T.int64(1), kh_0 + kh_1)
                        v_kw = T.axis.reduce(T.int64(1), kw_0 + kw_1)
                        T.reads(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block], p0[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)], p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block])
                        T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                        T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                        conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] + p0[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)] * p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block]
        for ax0_ax1_ax2_ax3_ax4_fused_0 in T.parallel(T.int64(588)):
            for ax0_ax1_ax2_ax3_ax4_fused_1 in T.vectorized(T.int64(64)):
                with T.block("T_relu"):
                    v_ax0 = T.axis.spatial(T.int64(1), T.int64(0))
                    v_ax1 = T.axis.spatial(T.int64(48), (ax0_ax1_ax2_ax3_ax4_fused_0 * T.int64(64) + ax0_ax1_ax2_ax3_ax4_fused_1) // T.int64(784))
                    v_ax2 = T.axis.spatial(T.int64(14), (ax0_ax1_ax2_ax3_ax4_fused_0 * T.int64(64) + ax0_ax1_ax2_ax3_ax4_fused_1) % T.int64(784) // T.int64(56))
                    v_ax3 = T.axis.spatial(T.int64(14), (ax0_ax1_ax2_ax3_ax4_fused_0 * T.int64(64) + ax0_ax1_ax2_ax3_ax4_fused_1) % T.int64(56) // T.int64(4))
                    v_ax4 = T.axis.spatial(T.int64(4), (ax0_ax1_ax2_ax3_ax4_fused_0 * T.int64(64) + ax0_ax1_ax2_ax3_ax4_fused_1) % T.int64(4))
                    T.reads(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4])
                    T.writes(T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                    T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.max(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] + p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4], T.float32(0))
b0 = sch.get_block(name="conv2d_NCHWc", func_name="main")
b1 = sch.get_block(name="T_add", func_name="main")
b2 = sch.get_block(name="root", func_name="main")
sch.compute_inline(block=b1)
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.tiling_structure", ann_val="SSRSRS")
l3, l4, l5, l6, l7, l8, l9, l10 = sch.get_loops(block=b0)
v11, v12, v13, v14 = sch.sample_perfect_tile(loop=l3, n=4, max_innermost_factor=64, decision=[1, 1, 1, 1])
l15, l16, l17, l18 = sch.split(loop=l3, factors=[v11, v12, v13, v14], preserve_unit_iters=True)
v19, v20, v21, v22 = sch.sample_perfect_tile(loop=l4, n=4, max_innermost_factor=64, decision=[1, 6, 4, 2])
l23, l24, l25, l26 = sch.split(loop=l4, factors=[v19, v20, v21, v22], preserve_unit_iters=True)
v27, v28, v29, v30 = sch.sample_perfect_tile(loop=l5, n=4, max_innermost_factor=64, decision=[1, 1, 1, 14])
l31, l32, l33, l34 = sch.split(loop=l5, factors=[v27, v28, v29, v30], preserve_unit_iters=True)
v35, v36, v37, v38 = sch.sample_perfect_tile(loop=l6, n=4, max_innermost_factor=64, decision=[1, 1, 2, 7])
l39, l40, l41, l42 = sch.split(loop=l6, factors=[v35, v36, v37, v38], preserve_unit_iters=True)
v43, v44, v45, v46 = sch.sample_perfect_tile(loop=l7, n=4, max_innermost_factor=64, decision=[2, 1, 1, 2])
l47, l48, l49, l50 = sch.split(loop=l7, factors=[v43, v44, v45, v46], preserve_unit_iters=True)
v51, v52 = sch.sample_perfect_tile(loop=l8, n=2, max_innermost_factor=64, decision=[348, 4])
l53, l54 = sch.split(loop=l8, factors=[v51, v52], preserve_unit_iters=True)
v55, v56 = sch.sample_perfect_tile(loop=l9, n=2, max_innermost_factor=64, decision=[1, 1])
l57, l58 = sch.split(loop=l9, factors=[v55, v56], preserve_unit_iters=True)
v59, v60 = sch.sample_perfect_tile(loop=l10, n=2, max_innermost_factor=64, decision=[1, 1])
l61, l62 = sch.split(loop=l10, factors=[v59, v60], preserve_unit_iters=True)
sch.reorder(l15, l23, l31, l39, l47, l16, l24, l32, l40, l48, l53, l57, l61, l17, l25, l33, l41, l49, l54, l58, l62, l18, l26, l34, l42, l50)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.vectorize", ann_val=64)
v63 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.unroll_explicit", ann_val=v63)
sch.enter_postproc()
b64 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b64, ann_key="meta_schedule.parallel")
sch.unannotate(block_or_loop=b64, ann_key="meta_schedule.vectorize")
sch.unannotate(block_or_loop=b64, ann_key="meta_schedule.unroll_explicit")
b65, b66 = sch.get_child_blocks(b64)
l67, l68, l69, l70, l71, l72, l73, l74, l75, l76, l77, l78, l79, l80, l81, l82, l83, l84, l85, l86, l87, l88, l89, l90, l91, l92 = sch.get_loops(block=b65)
l93 = sch.fuse(l67, l68, l69, l70, l71, l72, l73, l74, l75, l76, preserve_unit_iters=True)
sch.parallel(loop=l93)
l94 = sch.fuse(l92, preserve_unit_iters=True)
sch.vectorize(loop=l94)
sch.annotate(block_or_loop=l93, ann_key="pragma_auto_unroll_max_step", ann_val=512)
sch.annotate(block_or_loop=l93, ann_key="pragma_unroll_explicit", ann_val=1)
l95, l96, l97, l98, l99 = sch.get_loops(block=b66)
l100 = sch.fuse(l95, l96, l97, l98, l99, preserve_unit_iters=True)
l101, l102 = sch.split(loop=l100, factors=[None, 64], preserve_unit_iters=True)
sch.parallel(loop=l101)
sch.vectorize(loop=l102)
b103 = sch.get_block(name="conv2d_NCHWc", func_name="main")
l104, l105, l106, l107, l108, l109, l110, l111, l112, l113, l114, l115, l116, l117, l118, l119, l120 = sch.get_loops(block=b103)
b121 = sch.decompose_reduction(block=b103, loop=l105)
2024-04-29 05:06:00 [INFO] [task_scheduler.cc:131] [Task #39: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_38] Trial #62: GFLOPs: 6.9297. Time: 15129.5356 us. Best GFLOPs: 165.9180
2024-04-29 05:06:00 [INFO] [task_scheduler.cc:131] [Task #39: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_38] Trial #63: GFLOPs: 81.9234. Time: 1279.7650 us. Best GFLOPs: 165.9180
2024-04-29 05:06:00 [INFO] [task_scheduler.cc:131] [Task #39: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_38] Trial #64: GFLOPs: 36.9006. Time: 2841.2240 us. Best GFLOPs: 165.9180
2024-04-29 07:25:45 [INFO] [evolutionary_search.cc:713] Generating candidates......
2024-04-29 07:25:45 [INFO] [evolutionary_search.cc:715] Picked top 61 candidate(s) from database
2024-04-29 07:25:47 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x158a6fd8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x6e066c8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x10b77898)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x161691b8)]: 0 failure(s)
2024-04-29 07:25:47 [INFO] [evolutionary_search.cc:723] Sampled 451 candidate(s)
2024-04-29 07:25:53 [INFO] [evolutionary_search.cc:621] Evolve iter #0 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x158a6fd8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x6e066c8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x10b77898)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x161691b8)]: 0 failure(s)
2024-04-29 07:25:58 [INFO] [evolutionary_search.cc:621] Evolve iter #1 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x158a6fd8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x6e066c8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x10b77898)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x161691b8)]: 0 failure(s)
2024-04-29 07:26:04 [INFO] [evolutionary_search.cc:621] Evolve iter #2 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x158a6fd8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x6e066c8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x10b77898)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x161691b8)]: 0 failure(s)
2024-04-29 07:26:09 [INFO] [evolutionary_search.cc:621] Evolve iter #3 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x158a6fd8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x6e066c8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x10b77898)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x161691b8)]: 0 failure(s)
2024-04-29 07:26:12 [INFO] [evolutionary_search.cc:649] Scores of the best 64 candidates:
[1 : 16]:	0.8872  0.8842  0.8331  0.8220  0.8203  0.8162  0.8125  0.8066  0.7927  0.7889  0.7887  0.7873  0.7871  0.7861  0.7857  0.7800
[17 : 32]:	0.7790  0.7728  0.7702  0.7697  0.7697  0.7631  0.7629  0.7583  0.7551  0.7533  0.7533  0.7521  0.7487  0.7480  0.7458  0.7458
[33 : 48]:	0.7428  0.7414  0.7395  0.7305  0.7303  0.7302  0.7278  0.7278  0.7276  0.7272  0.7266  0.7262  0.7254  0.7248  0.7201  0.7175
[49 : 64]:	0.7168  0.7135  0.7133  0.7133  0.7122  0.7102  0.7099  0.7052  0.7042  0.7040  0.7018  0.6995  0.6983  0.6973  0.6961  0.6958
2024-04-29 07:26:13 [INFO] [evolutionary_search.cc:727] Got 64 candidate(s) with evolutionary search
2024-04-29 07:26:13 [INFO] [evolutionary_search.cc:730] Sending 64 candidates(s) for measurement
2024-04-29 07:27:49 [INFO] [task_scheduler.cc:131] [Task #39: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_38] Trial #65: GFLOPs: 145.3067. Time: 721.5272 us. Best GFLOPs: 165.9180
2024-04-29 07:27:49 [INFO] [task_scheduler.cc:131] [Task #39: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_38] Trial #66: GFLOPs: 134.7277. Time: 778.1823 us. Best GFLOPs: 165.9180
2024-04-29 07:27:49 [INFO] [task_scheduler.cc:131] [Task #39: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_38] Trial #67: GFLOPs: 117.7578. Time: 890.3255 us. Best GFLOPs: 165.9180
2024-04-29 07:27:49 [INFO] [task_scheduler.cc:131] [Task #39: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_38] Trial #68: GFLOPs: 160.8013. Time: 652.0020 us. Best GFLOPs: 165.9180
2024-04-29 07:27:49 [INFO] [task_scheduler.cc:131] [Task #39: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_38] Trial #69: GFLOPs: 138.7721. Time: 755.5030 us. Best GFLOPs: 165.9180
2024-04-29 07:27:49 [INFO] [task_scheduler.cc:131] [Task #39: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_38] Trial #70: GFLOPs: 103.5271. Time: 1012.7088 us. Best GFLOPs: 165.9180
2024-04-29 07:27:49 [INFO] [task_scheduler.cc:131] [Task #39: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_38] Trial #71: GFLOPs: 149.5777. Time: 700.9248 us. Best GFLOPs: 165.9180
2024-04-29 07:27:49 [INFO] [task_scheduler.cc:131] [Task #39: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_38] Trial #72: GFLOPs: 171.1861. Time: 612.4491 us. Best GFLOPs: 171.1861
2024-04-29 07:27:49 [INFO] [task_scheduler.cc:131] [Task #39: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_38] Trial #73: GFLOPs: 130.9843. Time: 800.4223 us. Best GFLOPs: 171.1861
2024-04-29 07:27:49 [INFO] [task_scheduler.cc:131] [Task #39: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_38] Trial #74: GFLOPs: 165.0447. Time: 635.2385 us. Best GFLOPs: 171.1861
2024-04-29 07:27:49 [INFO] [task_scheduler.cc:131] [Task #39: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_38] Trial #75: GFLOPs: 136.3023. Time: 769.1931 us. Best GFLOPs: 171.1861
2024-04-29 07:27:49 [INFO] [task_scheduler.cc:131] [Task #39: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_38] Trial #76: GFLOPs: 135.6788. Time: 772.7278 us. Best GFLOPs: 171.1861
2024-04-29 07:27:49 [INFO] [task_scheduler.cc:131] [Task #39: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_38] Trial #77: GFLOPs: 213.6580. Time: 490.7037 us. Best GFLOPs: 213.6580
2024-04-29 07:27:49 [INFO] [task_scheduler.cc:131] [Task #39: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_38] Trial #78: GFLOPs: 143.7179. Time: 729.5039 us. Best GFLOPs: 213.6580
2024-04-29 07:27:49 [INFO] [task_scheduler.cc:131] [Task #39: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_38] Trial #79: GFLOPs: 87.3383. Time: 1200.4216 us. Best GFLOPs: 213.6580
2024-04-29 07:27:49 [INFO] [task_scheduler.cc:131] [Task #39: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_38] Trial #80: GFLOPs: 148.5865. Time: 705.6006 us. Best GFLOPs: 213.6580
2024-04-29 07:27:49 [INFO] [task_scheduler.cc:131] [Task #39: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_38] Trial #81: GFLOPs: 145.7361. Time: 719.4015 us. Best GFLOPs: 213.6580
2024-04-29 07:27:49 [INFO] [task_scheduler.cc:121] [Task #39: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_38] Trial #82: Error in building:
LocalBuilder: Timeout, killed after 30.0 seconds
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(348), T.int64(14), T.int64(14), T.int64(4)), "float32"), p1: T.Buffer((T.int64(48), T.int64(348), T.int64(1), T.int64(1), T.int64(4), T.int64(4)), "float32"), p2: T.Buffer((T.int64(1), T.int64(48), T.int64(1), T.int64(1), T.int64(4)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(48), T.int64(14), T.int64(14), T.int64(4)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        conv2d_NCHWc = T.alloc_buffer((T.int64(1), T.int64(48), T.int64(14), T.int64(14), T.int64(4)))
        for n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused in T.parallel(T.int64(112), annotations={"pragma_auto_unroll_max_step": 512, "pragma_unroll_explicit": 1}):
            for n_2_init, oc_chunk_2_init, oh_2_init, ow_2_init, oc_block_2_init, n_3_init, oc_chunk_3_init, oh_3_init, ow_3_init, oc_block_3_init in T.grid(T.int64(1), T.int64(6), T.int64(1), T.int64(1), T.int64(4), T.int64(1), T.int64(2), T.int64(7), T.int64(1), T.int64(1)):
                with T.block("conv2d_NCHWc_init"):
                    v_n = T.axis.spatial(T.int64(1), n_2_init + n_3_init)
                    v_oc_chunk = T.axis.spatial(T.int64(48), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused // T.int64(28) * T.int64(12) + oc_chunk_2_init * T.int64(2) + oc_chunk_3_init)
                    v_oh = T.axis.spatial(T.int64(14), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused % T.int64(28) // T.int64(14) * T.int64(7) + oh_2_init * T.int64(7) + oh_3_init)
                    v_ow = T.axis.spatial(T.int64(14), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused % T.int64(14) + ow_2_init + ow_3_init)
                    v_oc_block = T.axis.spatial(T.int64(4), oc_block_2_init + oc_block_3_init)
                    T.reads()
                    T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                    T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                    conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = T.float32(0)
            for ic_0, kh_0, kw_0, n_2, oc_chunk_2, oh_2, ow_2, oc_block_2, ic_1, kh_1, kw_1, n_3, oc_chunk_3, oh_3, ow_3, oc_block_3 in T.grid(T.int64(48), T.int64(1), T.int64(1), T.int64(1), T.int64(6), T.int64(1), T.int64(1), T.int64(4), T.int64(29), T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(7), T.int64(1), T.int64(1)):
                with T.block("conv2d_NCHWc_update"):
                    v_n = T.axis.spatial(T.int64(1), n_2 + n_3)
                    v_oc_chunk = T.axis.spatial(T.int64(48), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused // T.int64(28) * T.int64(12) + oc_chunk_2 * T.int64(2) + oc_chunk_3)
                    v_oh = T.axis.spatial(T.int64(14), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused % T.int64(28) // T.int64(14) * T.int64(7) + oh_2 * T.int64(7) + oh_3)
                    v_ow = T.axis.spatial(T.int64(14), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused % T.int64(14) + ow_2 + ow_3)
                    v_oc_block = T.axis.spatial(T.int64(4), oc_block_2 + oc_block_3)
                    v_ic = T.axis.reduce(T.int64(1392), ic_0 * T.int64(29) + ic_1)
                    v_kh = T.axis.reduce(T.int64(1), kh_0 + kh_1)
                    v_kw = T.axis.reduce(T.int64(1), kw_0 + kw_1)
                    T.reads(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block], p0[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)], p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block])
                    T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                    T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                    conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] + p0[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)] * p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block]
            for ax0, ax1, ax2 in T.grid(T.int64(1), T.int64(12), T.int64(7)):
                for ax3_ax4_fused in T.vectorized(T.int64(4)):
                    with T.block("T_relu"):
                        v_ax0 = T.axis.spatial(T.int64(1), ax0)
                        v_ax1 = T.axis.spatial(T.int64(48), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused // T.int64(28) * T.int64(12) + ax1)
                        v_ax2 = T.axis.spatial(T.int64(14), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused % T.int64(28) // T.int64(14) * T.int64(7) + ax2)
                        v_ax3 = T.axis.spatial(T.int64(14), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused % T.int64(14))
                        v_ax4 = T.axis.spatial(T.int64(4), ax3_ax4_fused)
                        T.reads(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4])
                        T.writes(T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                        T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.max(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] + p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4], T.float32(0))
b0 = sch.get_block(name="conv2d_NCHWc", func_name="main")
b1 = sch.get_block(name="T_add", func_name="main")
b2 = sch.get_block(name="root", func_name="main")
sch.compute_inline(block=b1)
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.tiling_structure", ann_val="SSRSRS")
l3, l4, l5, l6, l7, l8, l9, l10 = sch.get_loops(block=b0)
v11, v12, v13, v14 = sch.sample_perfect_tile(loop=l3, n=4, max_innermost_factor=64, decision=[1, 1, 1, 1])
l15, l16, l17, l18 = sch.split(loop=l3, factors=[v11, v12, v13, v14], preserve_unit_iters=True)
v19, v20, v21, v22 = sch.sample_perfect_tile(loop=l4, n=4, max_innermost_factor=64, decision=[4, 1, 6, 2])
l23, l24, l25, l26 = sch.split(loop=l4, factors=[v19, v20, v21, v22], preserve_unit_iters=True)
v27, v28, v29, v30 = sch.sample_perfect_tile(loop=l5, n=4, max_innermost_factor=64, decision=[2, 1, 1, 7])
l31, l32, l33, l34 = sch.split(loop=l5, factors=[v27, v28, v29, v30], preserve_unit_iters=True)
v35, v36, v37, v38 = sch.sample_perfect_tile(loop=l6, n=4, max_innermost_factor=64, decision=[1, 14, 1, 1])
l39, l40, l41, l42 = sch.split(loop=l6, factors=[v35, v36, v37, v38], preserve_unit_iters=True)
v43, v44, v45, v46 = sch.sample_perfect_tile(loop=l7, n=4, max_innermost_factor=64, decision=[1, 1, 4, 1])
l47, l48, l49, l50 = sch.split(loop=l7, factors=[v43, v44, v45, v46], preserve_unit_iters=True)
v51, v52 = sch.sample_perfect_tile(loop=l8, n=2, max_innermost_factor=64, decision=[48, 29])
l53, l54 = sch.split(loop=l8, factors=[v51, v52], preserve_unit_iters=True)
v55, v56 = sch.sample_perfect_tile(loop=l9, n=2, max_innermost_factor=64, decision=[1, 1])
l57, l58 = sch.split(loop=l9, factors=[v55, v56], preserve_unit_iters=True)
v59, v60 = sch.sample_perfect_tile(loop=l10, n=2, max_innermost_factor=64, decision=[1, 1])
l61, l62 = sch.split(loop=l10, factors=[v59, v60], preserve_unit_iters=True)
sch.reorder(l15, l23, l31, l39, l47, l16, l24, l32, l40, l48, l53, l57, l61, l17, l25, l33, l41, l49, l54, l58, l62, l18, l26, l34, l42, l50)
b63, = sch.get_consumers(block=b0)
sch.reverse_compute_at(block=b63, loop=l48, preserve_unit_loops=True, index=-1)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.vectorize", ann_val=64)
v64 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.unroll_explicit", ann_val=v64)
sch.enter_postproc()
b65 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b65, ann_key="meta_schedule.parallel")
sch.unannotate(block_or_loop=b65, ann_key="meta_schedule.vectorize")
sch.unannotate(block_or_loop=b65, ann_key="meta_schedule.unroll_explicit")
b66, b67 = sch.get_child_blocks(b65)
l68, l69, l70, l71, l72, l73, l74, l75, l76, l77, l78, l79, l80, l81, l82, l83, l84, l85, l86, l87, l88, l89, l90, l91, l92, l93 = sch.get_loops(block=b66)
l94 = sch.fuse(l68, l69, l70, l71, l72, l73, l74, l75, l76, l77, preserve_unit_iters=True)
sch.parallel(loop=l94)
sch.annotate(block_or_loop=l94, ann_key="pragma_auto_unroll_max_step", ann_val=512)
sch.annotate(block_or_loop=l94, ann_key="pragma_unroll_explicit", ann_val=1)
l95, l96, l97, l98, l99, l100 = sch.get_loops(block=b67)
l101 = sch.fuse(l99, l100, preserve_unit_iters=True)
sch.vectorize(loop=l101)
b102 = sch.get_block(name="conv2d_NCHWc", func_name="main")
l103, l104, l105, l106, l107, l108, l109, l110, l111, l112, l113, l114, l115, l116, l117, l118, l119 = sch.get_loops(block=b102)
b120 = sch.decompose_reduction(block=b102, loop=l104)
2024-04-29 07:27:49 [INFO] [task_scheduler.cc:131] [Task #39: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_38] Trial #83: GFLOPs: 137.8033. Time: 760.8146 us. Best GFLOPs: 213.6580
2024-04-29 07:27:49 [INFO] [task_scheduler.cc:131] [Task #39: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_38] Trial #84: GFLOPs: 140.4418. Time: 746.5212 us. Best GFLOPs: 213.6580
2024-04-29 07:27:49 [INFO] [task_scheduler.cc:131] [Task #39: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_38] Trial #85: GFLOPs: 98.1932. Time: 1067.7194 us. Best GFLOPs: 213.6580
2024-04-29 07:27:49 [INFO] [task_scheduler.cc:131] [Task #39: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_38] Trial #86: GFLOPs: 131.3367. Time: 798.2743 us. Best GFLOPs: 213.6580
2024-04-29 07:27:49 [INFO] [task_scheduler.cc:131] [Task #39: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_38] Trial #87: GFLOPs: 182.3184. Time: 575.0532 us. Best GFLOPs: 213.6580
2024-04-29 07:27:49 [INFO] [task_scheduler.cc:131] [Task #39: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_38] Trial #88: GFLOPs: 160.4598. Time: 653.3895 us. Best GFLOPs: 213.6580
2024-04-29 07:27:49 [INFO] [task_scheduler.cc:131] [Task #39: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_38] Trial #89: GFLOPs: 109.8972. Time: 954.0076 us. Best GFLOPs: 213.6580
2024-04-29 07:27:49 [INFO] [task_scheduler.cc:131] [Task #39: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_38] Trial #90: GFLOPs: 142.7259. Time: 734.5740 us. Best GFLOPs: 213.6580
2024-04-29 07:27:49 [INFO] [task_scheduler.cc:131] [Task #39: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_38] Trial #91: GFLOPs: 142.6863. Time: 734.7780 us. Best GFLOPs: 213.6580
2024-04-29 07:27:49 [INFO] [task_scheduler.cc:131] [Task #39: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_38] Trial #92: GFLOPs: 104.8636. Time: 999.8015 us. Best GFLOPs: 213.6580
2024-04-29 07:27:49 [INFO] [task_scheduler.cc:131] [Task #39: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_38] Trial #93: GFLOPs: 109.6872. Time: 955.8337 us. Best GFLOPs: 213.6580
2024-04-29 07:27:49 [INFO] [task_scheduler.cc:131] [Task #39: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_38] Trial #94: GFLOPs: 73.3683. Time: 1428.9922 us. Best GFLOPs: 213.6580
2024-04-29 07:27:49 [INFO] [task_scheduler.cc:131] [Task #39: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_38] Trial #95: GFLOPs: 109.4776. Time: 957.6644 us. Best GFLOPs: 213.6580
2024-04-29 07:27:49 [INFO] [task_scheduler.cc:131] [Task #39: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_38] Trial #96: GFLOPs: 137.5603. Time: 762.1583 us. Best GFLOPs: 213.6580
2024-04-29 07:27:49 [INFO] [task_scheduler.cc:131] [Task #39: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_38] Trial #97: GFLOPs: 191.8250. Time: 546.5540 us. Best GFLOPs: 213.6580
2024-04-29 07:27:49 [INFO] [task_scheduler.cc:131] [Task #39: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_38] Trial #98: GFLOPs: 110.3551. Time: 950.0491 us. Best GFLOPs: 213.6580
2024-04-29 07:27:49 [INFO] [task_scheduler.cc:131] [Task #39: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_38] Trial #99: GFLOPs: 125.2945. Time: 836.7707 us. Best GFLOPs: 213.6580
2024-04-29 07:27:49 [INFO] [task_scheduler.cc:131] [Task #39: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_38] Trial #100: GFLOPs: 166.1606. Time: 630.9722 us. Best GFLOPs: 213.6580
2024-04-29 07:27:49 [INFO] [task_scheduler.cc:131] [Task #39: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_38] Trial #101: GFLOPs: 100.3727. Time: 1044.5347 us. Best GFLOPs: 213.6580
2024-04-29 07:27:49 [INFO] [task_scheduler.cc:131] [Task #39: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_38] Trial #102: GFLOPs: 204.8412. Time: 511.8245 us. Best GFLOPs: 213.6580
2024-04-29 07:27:49 [INFO] [task_scheduler.cc:131] [Task #39: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_38] Trial #103: GFLOPs: 133.8104. Time: 783.5169 us. Best GFLOPs: 213.6580
2024-04-29 07:27:49 [INFO] [task_scheduler.cc:131] [Task #39: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_38] Trial #104: GFLOPs: 135.4589. Time: 773.9818 us. Best GFLOPs: 213.6580
2024-04-29 07:27:49 [INFO] [task_scheduler.cc:131] [Task #39: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_38] Trial #105: GFLOPs: 203.2022. Time: 515.9528 us. Best GFLOPs: 213.6580
2024-04-29 07:27:49 [INFO] [task_scheduler.cc:131] [Task #39: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_38] Trial #106: GFLOPs: 149.3801. Time: 701.8523 us. Best GFLOPs: 213.6580
2024-04-29 07:27:49 [INFO] [task_scheduler.cc:131] [Task #39: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_38] Trial #107: GFLOPs: 241.3852. Time: 434.3379 us. Best GFLOPs: 241.3852
2024-04-29 07:27:49 [INFO] [task_scheduler.cc:131] [Task #39: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_38] Trial #108: GFLOPs: 138.7279. Time: 755.7440 us. Best GFLOPs: 241.3852
2024-04-29 07:27:49 [INFO] [task_scheduler.cc:131] [Task #39: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_38] Trial #109: GFLOPs: 153.3714. Time: 683.5872 us. Best GFLOPs: 241.3852
2024-04-29 07:27:49 [INFO] [task_scheduler.cc:131] [Task #39: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_38] Trial #110: GFLOPs: 99.9181. Time: 1049.2869 us. Best GFLOPs: 241.3852
2024-04-29 07:27:49 [INFO] [task_scheduler.cc:131] [Task #39: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_38] Trial #111: GFLOPs: 156.2375. Time: 671.0473 us. Best GFLOPs: 241.3852
2024-04-29 07:27:49 [INFO] [task_scheduler.cc:131] [Task #39: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_38] Trial #112: GFLOPs: 89.6377. Time: 1169.6282 us. Best GFLOPs: 241.3852
2024-04-29 07:27:49 [INFO] [task_scheduler.cc:131] [Task #39: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_38] Trial #113: GFLOPs: 154.5108. Time: 678.5466 us. Best GFLOPs: 241.3852
2024-04-29 07:27:49 [INFO] [task_scheduler.cc:131] [Task #39: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_38] Trial #114: GFLOPs: 166.9544. Time: 627.9724 us. Best GFLOPs: 241.3852
2024-04-29 07:27:49 [INFO] [task_scheduler.cc:131] [Task #39: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_38] Trial #115: GFLOPs: 166.1429. Time: 631.0395 us. Best GFLOPs: 241.3852
2024-04-29 07:27:49 [INFO] [task_scheduler.cc:131] [Task #39: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_38] Trial #116: GFLOPs: 324.9326. Time: 322.6600 us. Best GFLOPs: 324.9326
2024-04-29 07:27:49 [INFO] [task_scheduler.cc:131] [Task #39: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_38] Trial #117: GFLOPs: 102.4232. Time: 1023.6228 us. Best GFLOPs: 324.9326
2024-04-29 07:27:49 [INFO] [task_scheduler.cc:131] [Task #39: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_38] Trial #118: GFLOPs: 141.6301. Time: 740.2576 us. Best GFLOPs: 324.9326
2024-04-29 07:27:49 [INFO] [task_scheduler.cc:131] [Task #39: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_38] Trial #119: GFLOPs: 71.7293. Time: 1461.6456 us. Best GFLOPs: 324.9326
2024-04-29 07:27:49 [INFO] [task_scheduler.cc:131] [Task #39: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_38] Trial #120: GFLOPs: 144.6155. Time: 724.9758 us. Best GFLOPs: 324.9326
2024-04-29 07:27:49 [INFO] [task_scheduler.cc:131] [Task #39: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_38] Trial #121: GFLOPs: 128.3381. Time: 816.9260 us. Best GFLOPs: 324.9326
2024-04-29 07:27:49 [INFO] [task_scheduler.cc:131] [Task #39: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_38] Trial #122: GFLOPs: 25.9745. Time: 4036.3742 us. Best GFLOPs: 324.9326
2024-04-29 07:27:49 [INFO] [task_scheduler.cc:131] [Task #39: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_38] Trial #123: GFLOPs: 138.7851. Time: 755.4325 us. Best GFLOPs: 324.9326
2024-04-29 07:27:49 [INFO] [task_scheduler.cc:131] [Task #39: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_38] Trial #124: GFLOPs: 159.4873. Time: 657.3737 us. Best GFLOPs: 324.9326
2024-04-29 07:27:49 [INFO] [task_scheduler.cc:131] [Task #39: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_38] Trial #125: GFLOPs: 133.0790. Time: 787.8236 us. Best GFLOPs: 324.9326
2024-04-29 07:27:49 [INFO] [task_scheduler.cc:131] [Task #39: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_38] Trial #126: GFLOPs: 3.1216. Time: 33586.7443 us. Best GFLOPs: 324.9326
2024-04-29 07:27:49 [INFO] [task_scheduler.cc:131] [Task #39: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_38] Trial #127: GFLOPs: 60.6539. Time: 1728.5415 us. Best GFLOPs: 324.9326
2024-04-29 07:27:49 [INFO] [task_scheduler.cc:131] [Task #39: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_38] Trial #128: GFLOPs: 103.0669. Time: 1017.2299 us. Best GFLOPs: 324.9326
