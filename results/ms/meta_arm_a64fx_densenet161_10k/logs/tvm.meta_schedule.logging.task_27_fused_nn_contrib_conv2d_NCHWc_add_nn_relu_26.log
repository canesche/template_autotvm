2024-04-29 02:30:05 [INFO] [task_scheduler.cc:160] Initializing Task #27: "fused_nn_contrib_conv2d_NCHWc_add_nn_relu_26"
2024-04-29 02:30:05 [INFO] [task_scheduler.cc:35] 
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(492), T.int64(14), T.int64(14), T.int64(4)), "float32"), p1: T.Buffer((T.int64(48), T.int64(492), T.int64(1), T.int64(1), T.int64(4), T.int64(4)), "float32"), p2: T.Buffer((T.int64(1), T.int64(48), T.int64(1), T.int64(1), T.int64(4)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(48), T.int64(14), T.int64(14), T.int64(4)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        conv2d_NCHWc = T.alloc_buffer((T.int64(1), T.int64(48), T.int64(14), T.int64(14), T.int64(4)))
        T_add = T.alloc_buffer((T.int64(1), T.int64(48), T.int64(14), T.int64(14), T.int64(4)))
        for n, oc_chunk, oh, ow, oc_block, ic, kh, kw in T.grid(T.int64(1), T.int64(48), T.int64(14), T.int64(14), T.int64(4), T.int64(1968), T.int64(1), T.int64(1)):
            with T.block("conv2d_NCHWc"):
                v_n, v_oc_chunk, v_oh, v_ow, v_oc_block, v_ic, v_kh, v_kw = T.axis.remap("SSSSSRRR", [n, oc_chunk, oh, ow, oc_block, ic, kh, kw])
                T.reads(p0[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)], p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block])
                T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                with T.init():
                    conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = T.float32(0)
                conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] + p0[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)] * p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block]
        for ax0, ax1, ax2, ax3, ax4 in T.grid(T.int64(1), T.int64(48), T.int64(14), T.int64(14), T.int64(4)):
            with T.block("T_add"):
                v_ax0, v_ax1, v_ax2, v_ax3, v_ax4 = T.axis.remap("SSSSS", [ax0, ax1, ax2, ax3, ax4])
                T.reads(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4])
                T.writes(T_add[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                T_add[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] + p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4]
        for ax0, ax1, ax2, ax3, ax4 in T.grid(T.int64(1), T.int64(48), T.int64(14), T.int64(14), T.int64(4)):
            with T.block("T_relu"):
                v_ax0, v_ax1, v_ax2, v_ax3, v_ax4 = T.axis.remap("SSSSS", [ax0, ax1, ax2, ax3, ax4])
                T.reads(T_add[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                T.writes(T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.max(T_add[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], T.float32(0))
2024-04-29 02:30:05 [INFO] [task_scheduler.cc:164] Total 3 design space(s) generated
2024-04-29 02:30:05 [INFO] [task_scheduler.cc:170] Design space #0:
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(492), T.int64(14), T.int64(14), T.int64(4)), "float32"), p1: T.Buffer((T.int64(48), T.int64(492), T.int64(1), T.int64(1), T.int64(4), T.int64(4)), "float32"), p2: T.Buffer((T.int64(1), T.int64(48), T.int64(1), T.int64(1), T.int64(4)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(48), T.int64(14), T.int64(14), T.int64(4)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        with T.block("root"):
            T.reads()
            T.writes()
            T.block_attr({"meta_schedule.parallel": 768, "meta_schedule.unroll_explicit": 16, "meta_schedule.vectorize": 64})
            conv2d_NCHWc = T.alloc_buffer((T.int64(1), T.int64(48), T.int64(14), T.int64(14), T.int64(4)))
            for n_0, oc_chunk_0, oh_0, ow_0, oc_block_0, n_1, oc_chunk_1, oh_1, ow_1, oc_block_1, ic_0, kh_0, kw_0, n_2, oc_chunk_2, oh_2, ow_2, oc_block_2, ic_1, kh_1, kw_1, n_3, oc_chunk_3, oh_3, ow_3, oc_block_3 in T.grid(T.int64(1), T.int64(4), T.int64(1), T.int64(7), T.int64(1), T.int64(1), T.int64(6), T.int64(2), T.int64(2), T.int64(4), T.int64(984), T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(7), T.int64(1), T.int64(1)):
                with T.block("conv2d_NCHWc"):
                    v_n = T.axis.spatial(T.int64(1), n_0 + n_1 + n_2 + n_3)
                    v_oc_chunk = T.axis.spatial(T.int64(48), oc_chunk_0 * T.int64(12) + oc_chunk_1 * T.int64(2) + oc_chunk_2 + oc_chunk_3)
                    v_oh = T.axis.spatial(T.int64(14), oh_0 * T.int64(14) + oh_1 * T.int64(7) + oh_2 * T.int64(7) + oh_3)
                    v_ow = T.axis.spatial(T.int64(14), ow_0 * T.int64(2) + ow_1 + ow_2 + ow_3)
                    v_oc_block = T.axis.spatial(T.int64(4), oc_block_0 * T.int64(4) + oc_block_1 + oc_block_2 + oc_block_3)
                    v_ic = T.axis.reduce(T.int64(1968), ic_0 * T.int64(2) + ic_1)
                    v_kh = T.axis.reduce(T.int64(1), kh_0 + kh_1)
                    v_kw = T.axis.reduce(T.int64(1), kw_0 + kw_1)
                    T.reads(p0[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)], p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block])
                    T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                    T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                    with T.init():
                        conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = T.float32(0)
                    conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] + p0[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)] * p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block]
            for ax0, ax1, ax2, ax3, ax4 in T.grid(T.int64(1), T.int64(48), T.int64(14), T.int64(14), T.int64(4)):
                with T.block("T_relu"):
                    v_ax0, v_ax1, v_ax2, v_ax3, v_ax4 = T.axis.remap("SSSSS", [ax0, ax1, ax2, ax3, ax4])
                    T.reads(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4])
                    T.writes(T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                    T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.max(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] + p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4], T.float32(0))
b0 = sch.get_block(name="conv2d_NCHWc", func_name="main")
b1 = sch.get_block(name="T_add", func_name="main")
b2 = sch.get_block(name="root", func_name="main")
sch.compute_inline(block=b1)
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.tiling_structure", ann_val="SSRSRS")
l3, l4, l5, l6, l7, l8, l9, l10 = sch.get_loops(block=b0)
v11, v12, v13, v14 = sch.sample_perfect_tile(loop=l3, n=4, max_innermost_factor=64, decision=[1, 1, 1, 1])
l15, l16, l17, l18 = sch.split(loop=l3, factors=[v11, v12, v13, v14], preserve_unit_iters=True)
v19, v20, v21, v22 = sch.sample_perfect_tile(loop=l4, n=4, max_innermost_factor=64, decision=[4, 6, 2, 1])
l23, l24, l25, l26 = sch.split(loop=l4, factors=[v19, v20, v21, v22], preserve_unit_iters=True)
v27, v28, v29, v30 = sch.sample_perfect_tile(loop=l5, n=4, max_innermost_factor=64, decision=[1, 2, 1, 7])
l31, l32, l33, l34 = sch.split(loop=l5, factors=[v27, v28, v29, v30], preserve_unit_iters=True)
v35, v36, v37, v38 = sch.sample_perfect_tile(loop=l6, n=4, max_innermost_factor=64, decision=[7, 2, 1, 1])
l39, l40, l41, l42 = sch.split(loop=l6, factors=[v35, v36, v37, v38], preserve_unit_iters=True)
v43, v44, v45, v46 = sch.sample_perfect_tile(loop=l7, n=4, max_innermost_factor=64, decision=[1, 4, 1, 1])
l47, l48, l49, l50 = sch.split(loop=l7, factors=[v43, v44, v45, v46], preserve_unit_iters=True)
v51, v52 = sch.sample_perfect_tile(loop=l8, n=2, max_innermost_factor=64, decision=[984, 2])
l53, l54 = sch.split(loop=l8, factors=[v51, v52], preserve_unit_iters=True)
v55, v56 = sch.sample_perfect_tile(loop=l9, n=2, max_innermost_factor=64, decision=[1, 1])
l57, l58 = sch.split(loop=l9, factors=[v55, v56], preserve_unit_iters=True)
v59, v60 = sch.sample_perfect_tile(loop=l10, n=2, max_innermost_factor=64, decision=[1, 1])
l61, l62 = sch.split(loop=l10, factors=[v59, v60], preserve_unit_iters=True)
sch.reorder(l15, l23, l31, l39, l47, l16, l24, l32, l40, l48, l53, l57, l61, l17, l25, l33, l41, l49, l54, l58, l62, l18, l26, l34, l42, l50)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.vectorize", ann_val=64)
v63 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=1)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.unroll_explicit", ann_val=v63)
2024-04-29 02:30:05 [INFO] [task_scheduler.cc:170] Design space #1:
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(492), T.int64(14), T.int64(14), T.int64(4)), "float32"), p1: T.Buffer((T.int64(48), T.int64(492), T.int64(1), T.int64(1), T.int64(4), T.int64(4)), "float32"), p2: T.Buffer((T.int64(1), T.int64(48), T.int64(1), T.int64(1), T.int64(4)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(48), T.int64(14), T.int64(14), T.int64(4)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        with T.block("root"):
            T.reads()
            T.writes()
            T.block_attr({"meta_schedule.parallel": 768, "meta_schedule.unroll_explicit": 16, "meta_schedule.vectorize": 64})
            conv2d_NCHWc = T.alloc_buffer((T.int64(1), T.int64(48), T.int64(14), T.int64(14), T.int64(4)))
            for n_0, oc_chunk_0, oh_0, ow_0, oc_block_0, n_1, oc_chunk_1, oh_1, ow_1, oc_block_1 in T.grid(T.int64(1), T.int64(4), T.int64(1), T.int64(7), T.int64(1), T.int64(1), T.int64(6), T.int64(2), T.int64(2), T.int64(4)):
                for ic_0, kh_0, kw_0, n_2, oc_chunk_2, oh_2, ow_2, oc_block_2, ic_1, kh_1, kw_1, n_3, oc_chunk_3, oh_3, ow_3, oc_block_3 in T.grid(T.int64(984), T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(7), T.int64(1), T.int64(1)):
                    with T.block("conv2d_NCHWc"):
                        v_n = T.axis.spatial(T.int64(1), n_0 + n_1 + n_2 + n_3)
                        v_oc_chunk = T.axis.spatial(T.int64(48), oc_chunk_0 * T.int64(12) + oc_chunk_1 * T.int64(2) + oc_chunk_2 + oc_chunk_3)
                        v_oh = T.axis.spatial(T.int64(14), oh_0 * T.int64(14) + oh_1 * T.int64(7) + oh_2 * T.int64(7) + oh_3)
                        v_ow = T.axis.spatial(T.int64(14), ow_0 * T.int64(2) + ow_1 + ow_2 + ow_3)
                        v_oc_block = T.axis.spatial(T.int64(4), oc_block_0 * T.int64(4) + oc_block_1 + oc_block_2 + oc_block_3)
                        v_ic = T.axis.reduce(T.int64(1968), ic_0 * T.int64(2) + ic_1)
                        v_kh = T.axis.reduce(T.int64(1), kh_0 + kh_1)
                        v_kw = T.axis.reduce(T.int64(1), kw_0 + kw_1)
                        T.reads(p0[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)], p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block])
                        T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                        T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                        with T.init():
                            conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = T.float32(0)
                        conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] + p0[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)] * p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block]
                for ax0, ax1, ax2, ax3, ax4 in T.grid(T.int64(1), T.int64(2), T.int64(7), T.int64(1), T.int64(1)):
                    with T.block("T_relu"):
                        v_ax0 = T.axis.spatial(T.int64(1), ax0)
                        v_ax1 = T.axis.spatial(T.int64(48), oc_chunk_0 * T.int64(12) + oc_chunk_1 * T.int64(2) + ax1)
                        v_ax2 = T.axis.spatial(T.int64(14), oh_1 * T.int64(7) + ax2)
                        v_ax3 = T.axis.spatial(T.int64(14), ow_0 * T.int64(2) + ow_1 + ax3)
                        v_ax4 = T.axis.spatial(T.int64(4), oc_block_1 + ax4)
                        T.reads(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4])
                        T.writes(T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                        T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.max(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] + p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4], T.float32(0))
b0 = sch.get_block(name="conv2d_NCHWc", func_name="main")
b1 = sch.get_block(name="T_add", func_name="main")
b2 = sch.get_block(name="root", func_name="main")
sch.compute_inline(block=b1)
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.tiling_structure", ann_val="SSRSRS")
l3, l4, l5, l6, l7, l8, l9, l10 = sch.get_loops(block=b0)
v11, v12, v13, v14 = sch.sample_perfect_tile(loop=l3, n=4, max_innermost_factor=64, decision=[1, 1, 1, 1])
l15, l16, l17, l18 = sch.split(loop=l3, factors=[v11, v12, v13, v14], preserve_unit_iters=True)
v19, v20, v21, v22 = sch.sample_perfect_tile(loop=l4, n=4, max_innermost_factor=64, decision=[4, 6, 2, 1])
l23, l24, l25, l26 = sch.split(loop=l4, factors=[v19, v20, v21, v22], preserve_unit_iters=True)
v27, v28, v29, v30 = sch.sample_perfect_tile(loop=l5, n=4, max_innermost_factor=64, decision=[1, 2, 1, 7])
l31, l32, l33, l34 = sch.split(loop=l5, factors=[v27, v28, v29, v30], preserve_unit_iters=True)
v35, v36, v37, v38 = sch.sample_perfect_tile(loop=l6, n=4, max_innermost_factor=64, decision=[7, 2, 1, 1])
l39, l40, l41, l42 = sch.split(loop=l6, factors=[v35, v36, v37, v38], preserve_unit_iters=True)
v43, v44, v45, v46 = sch.sample_perfect_tile(loop=l7, n=4, max_innermost_factor=64, decision=[1, 4, 1, 1])
l47, l48, l49, l50 = sch.split(loop=l7, factors=[v43, v44, v45, v46], preserve_unit_iters=True)
v51, v52 = sch.sample_perfect_tile(loop=l8, n=2, max_innermost_factor=64, decision=[984, 2])
l53, l54 = sch.split(loop=l8, factors=[v51, v52], preserve_unit_iters=True)
v55, v56 = sch.sample_perfect_tile(loop=l9, n=2, max_innermost_factor=64, decision=[1, 1])
l57, l58 = sch.split(loop=l9, factors=[v55, v56], preserve_unit_iters=True)
v59, v60 = sch.sample_perfect_tile(loop=l10, n=2, max_innermost_factor=64, decision=[1, 1])
l61, l62 = sch.split(loop=l10, factors=[v59, v60], preserve_unit_iters=True)
sch.reorder(l15, l23, l31, l39, l47, l16, l24, l32, l40, l48, l53, l57, l61, l17, l25, l33, l41, l49, l54, l58, l62, l18, l26, l34, l42, l50)
b63, = sch.get_consumers(block=b0)
sch.reverse_compute_at(block=b63, loop=l48, preserve_unit_loops=True, index=-1)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.vectorize", ann_val=64)
v64 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=1)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.unroll_explicit", ann_val=v64)
2024-04-29 02:30:06 [INFO] [task_scheduler.cc:170] Design space #2:
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(492), T.int64(14), T.int64(14), T.int64(4)), "float32"), p1: T.Buffer((T.int64(48), T.int64(492), T.int64(1), T.int64(1), T.int64(4), T.int64(4)), "float32"), p2: T.Buffer((T.int64(1), T.int64(48), T.int64(1), T.int64(1), T.int64(4)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(48), T.int64(14), T.int64(14), T.int64(4)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        with T.block("root"):
            T.reads()
            T.writes()
            T.block_attr({"meta_schedule.parallel": 768, "meta_schedule.unroll_explicit": 512, "meta_schedule.vectorize": 64})
            conv2d_NCHWc = T.alloc_buffer((T.int64(1), T.int64(48), T.int64(14), T.int64(14), T.int64(4)))
            for n_0, oc_chunk_0, oh_0, ow_0, oc_block_0 in T.grid(T.int64(1), T.int64(4), T.int64(1), T.int64(7), T.int64(1)):
                for n_1, oc_chunk_1, oh_1, ow_1, oc_block_1, ic_0, kh_0, kw_0, n_2, oc_chunk_2, oh_2, ow_2, oc_block_2, ic_1, kh_1, kw_1, n_3, oc_chunk_3, oh_3, ow_3, oc_block_3 in T.grid(T.int64(1), T.int64(6), T.int64(2), T.int64(2), T.int64(4), T.int64(984), T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(7), T.int64(1), T.int64(1)):
                    with T.block("conv2d_NCHWc"):
                        v_n = T.axis.spatial(T.int64(1), n_0 + n_1 + n_2 + n_3)
                        v_oc_chunk = T.axis.spatial(T.int64(48), oc_chunk_0 * T.int64(12) + oc_chunk_1 * T.int64(2) + oc_chunk_2 + oc_chunk_3)
                        v_oh = T.axis.spatial(T.int64(14), oh_0 * T.int64(14) + oh_1 * T.int64(7) + oh_2 * T.int64(7) + oh_3)
                        v_ow = T.axis.spatial(T.int64(14), ow_0 * T.int64(2) + ow_1 + ow_2 + ow_3)
                        v_oc_block = T.axis.spatial(T.int64(4), oc_block_0 * T.int64(4) + oc_block_1 + oc_block_2 + oc_block_3)
                        v_ic = T.axis.reduce(T.int64(1968), ic_0 * T.int64(2) + ic_1)
                        v_kh = T.axis.reduce(T.int64(1), kh_0 + kh_1)
                        v_kw = T.axis.reduce(T.int64(1), kw_0 + kw_1)
                        T.reads(p0[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)], p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block])
                        T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                        T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                        with T.init():
                            conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = T.float32(0)
                        conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] + p0[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)] * p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block]
                for ax0, ax1, ax2, ax3, ax4 in T.grid(T.int64(1), T.int64(12), T.int64(14), T.int64(2), T.int64(4)):
                    with T.block("T_relu"):
                        v_ax0 = T.axis.spatial(T.int64(1), ax0)
                        v_ax1 = T.axis.spatial(T.int64(48), oc_chunk_0 * T.int64(12) + ax1)
                        v_ax2 = T.axis.spatial(T.int64(14), ax2)
                        v_ax3 = T.axis.spatial(T.int64(14), ow_0 * T.int64(2) + ax3)
                        v_ax4 = T.axis.spatial(T.int64(4), ax4)
                        T.reads(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4])
                        T.writes(T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                        T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.max(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] + p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4], T.float32(0))
b0 = sch.get_block(name="conv2d_NCHWc", func_name="main")
b1 = sch.get_block(name="T_add", func_name="main")
b2 = sch.get_block(name="root", func_name="main")
sch.compute_inline(block=b1)
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.tiling_structure", ann_val="SSRSRS")
l3, l4, l5, l6, l7, l8, l9, l10 = sch.get_loops(block=b0)
v11, v12, v13, v14 = sch.sample_perfect_tile(loop=l3, n=4, max_innermost_factor=64, decision=[1, 1, 1, 1])
l15, l16, l17, l18 = sch.split(loop=l3, factors=[v11, v12, v13, v14], preserve_unit_iters=True)
v19, v20, v21, v22 = sch.sample_perfect_tile(loop=l4, n=4, max_innermost_factor=64, decision=[4, 6, 2, 1])
l23, l24, l25, l26 = sch.split(loop=l4, factors=[v19, v20, v21, v22], preserve_unit_iters=True)
v27, v28, v29, v30 = sch.sample_perfect_tile(loop=l5, n=4, max_innermost_factor=64, decision=[1, 2, 1, 7])
l31, l32, l33, l34 = sch.split(loop=l5, factors=[v27, v28, v29, v30], preserve_unit_iters=True)
v35, v36, v37, v38 = sch.sample_perfect_tile(loop=l6, n=4, max_innermost_factor=64, decision=[7, 2, 1, 1])
l39, l40, l41, l42 = sch.split(loop=l6, factors=[v35, v36, v37, v38], preserve_unit_iters=True)
v43, v44, v45, v46 = sch.sample_perfect_tile(loop=l7, n=4, max_innermost_factor=64, decision=[1, 4, 1, 1])
l47, l48, l49, l50 = sch.split(loop=l7, factors=[v43, v44, v45, v46], preserve_unit_iters=True)
v51, v52 = sch.sample_perfect_tile(loop=l8, n=2, max_innermost_factor=64, decision=[984, 2])
l53, l54 = sch.split(loop=l8, factors=[v51, v52], preserve_unit_iters=True)
v55, v56 = sch.sample_perfect_tile(loop=l9, n=2, max_innermost_factor=64, decision=[1, 1])
l57, l58 = sch.split(loop=l9, factors=[v55, v56], preserve_unit_iters=True)
v59, v60 = sch.sample_perfect_tile(loop=l10, n=2, max_innermost_factor=64, decision=[1, 1])
l61, l62 = sch.split(loop=l10, factors=[v59, v60], preserve_unit_iters=True)
sch.reorder(l15, l23, l31, l39, l47, l16, l24, l32, l40, l48, l53, l57, l61, l17, l25, l33, l41, l49, l54, l58, l62, l18, l26, l34, l42, l50)
b63, = sch.get_consumers(block=b0)
sch.reverse_compute_at(block=b63, loop=l47, preserve_unit_loops=True, index=-1)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.vectorize", ann_val=64)
v64 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.unroll_explicit", ann_val=v64)
2024-04-29 03:14:59 [INFO] [evolutionary_search.cc:713] Generating candidates......
2024-04-29 03:14:59 [INFO] [evolutionary_search.cc:715] Picked top 0 candidate(s) from database
2024-04-29 03:15:02 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0xc648158)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x86d71c8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x6c149e8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0xd9f8718)]: 0 failure(s)
2024-04-29 03:15:02 [INFO] [evolutionary_search.cc:723] Sampled 512 candidate(s)
2024-04-29 03:15:05 [INFO] [evolutionary_search.cc:621] Evolve iter #0 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0xc648158)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x86d71c8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x6c149e8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0xd9f8718)]: 0 failure(s)
2024-04-29 03:15:07 [INFO] [evolutionary_search.cc:621] Evolve iter #1 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0xc648158)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x86d71c8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x6c149e8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0xd9f8718)]: 0 failure(s)
2024-04-29 03:15:11 [INFO] [evolutionary_search.cc:621] Evolve iter #2 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0xc648158)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x86d71c8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x6c149e8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0xd9f8718)]: 0 failure(s)
2024-04-29 03:15:14 [INFO] [evolutionary_search.cc:621] Evolve iter #3 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0xc648158)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x86d71c8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x6c149e8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0xd9f8718)]: 0 failure(s)
2024-04-29 03:15:15 [INFO] [evolutionary_search.cc:649] Scores of the best 64 candidates:
[1 : 16]:	0.9995  0.9993  0.9984  0.9978  0.9975  0.9971  0.9969  0.9967  0.9964  0.9959  0.9950  0.9950  0.9936  0.9934  0.9934  0.9930
[17 : 32]:	0.9930  0.9923  0.9923  0.9922  0.9902  0.9902  0.9901  0.9899  0.9897  0.9894  0.9894  0.9885  0.9880  0.9879  0.9874  0.9874
[33 : 48]:	0.9865  0.9860  0.9860  0.9859  0.9842  0.9839  0.9837  0.9837  0.9835  0.9832  0.9823  0.9821  0.9819  0.9816  0.9815  0.9796
[49 : 64]:	0.9792  0.9784  0.9781  0.9774  0.9773  0.9767  0.9762  0.9751  0.9743  0.9738  0.9736  0.9735  0.9733  0.9727  0.9724  0.9724
2024-04-29 03:15:15 [INFO] [evolutionary_search.cc:727] Got 64 candidate(s) with evolutionary search
2024-04-29 03:15:15 [INFO] [evolutionary_search.cc:730] Sending 64 candidates(s) for measurement
2024-04-29 05:04:57 [INFO] [task_scheduler.cc:131] [Task #27: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_26] Trial #1: GFLOPs: 1.5389. Time: 96300.2310 us. Best GFLOPs: 1.5389
2024-04-29 05:04:57 [INFO] [task_scheduler.cc:131] [Task #27: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_26] Trial #2: GFLOPs: 133.9100. Time: 1106.6749 us. Best GFLOPs: 133.9100
2024-04-29 05:04:57 [INFO] [task_scheduler.cc:131] [Task #27: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_26] Trial #3: GFLOPs: 37.4343. Time: 3958.7926 us. Best GFLOPs: 133.9100
2024-04-29 05:04:57 [INFO] [task_scheduler.cc:131] [Task #27: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_26] Trial #4: GFLOPs: 1.3450. Time: 110181.5680 us. Best GFLOPs: 133.9100
2024-04-29 05:04:57 [INFO] [task_scheduler.cc:131] [Task #27: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_26] Trial #5: GFLOPs: 88.0908. Time: 1682.2970 us. Best GFLOPs: 133.9100
2024-04-29 05:04:57 [INFO] [task_scheduler.cc:131] [Task #27: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_26] Trial #6: GFLOPs: 85.1047. Time: 1741.3234 us. Best GFLOPs: 133.9100
2024-04-29 05:04:57 [INFO] [task_scheduler.cc:131] [Task #27: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_26] Trial #7: GFLOPs: 17.4844. Time: 8475.8205 us. Best GFLOPs: 133.9100
2024-04-29 05:04:57 [INFO] [task_scheduler.cc:131] [Task #27: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_26] Trial #8: GFLOPs: 85.9174. Time: 1724.8526 us. Best GFLOPs: 133.9100
2024-04-29 05:04:57 [INFO] [task_scheduler.cc:131] [Task #27: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_26] Trial #9: GFLOPs: 18.1331. Time: 8172.6051 us. Best GFLOPs: 133.9100
2024-04-29 05:04:57 [INFO] [task_scheduler.cc:131] [Task #27: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_26] Trial #10: GFLOPs: 0.3795. Time: 390477.5140 us. Best GFLOPs: 133.9100
2024-04-29 05:04:57 [INFO] [task_scheduler.cc:131] [Task #27: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_26] Trial #11: GFLOPs: 4.6638. Time: 31775.8055 us. Best GFLOPs: 133.9100
2024-04-29 05:04:57 [INFO] [task_scheduler.cc:131] [Task #27: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_26] Trial #12: GFLOPs: 51.7627. Time: 2862.9661 us. Best GFLOPs: 133.9100
2024-04-29 05:04:57 [INFO] [task_scheduler.cc:131] [Task #27: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_26] Trial #13: GFLOPs: 13.2152. Time: 11213.9832 us. Best GFLOPs: 133.9100
2024-04-29 05:04:57 [INFO] [task_scheduler.cc:131] [Task #27: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_26] Trial #14: GFLOPs: 83.8296. Time: 1767.8095 us. Best GFLOPs: 133.9100
2024-04-29 05:04:57 [INFO] [task_scheduler.cc:131] [Task #27: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_26] Trial #15: GFLOPs: 44.6489. Time: 3319.1169 us. Best GFLOPs: 133.9100
2024-04-29 05:04:57 [INFO] [task_scheduler.cc:131] [Task #27: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_26] Trial #16: GFLOPs: 4.2390. Time: 34960.0747 us. Best GFLOPs: 133.9100
2024-04-29 05:04:57 [INFO] [task_scheduler.cc:131] [Task #27: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_26] Trial #17: GFLOPs: 85.4048. Time: 1735.2053 us. Best GFLOPs: 133.9100
2024-04-29 05:04:57 [INFO] [task_scheduler.cc:131] [Task #27: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_26] Trial #18: GFLOPs: 38.5232. Time: 3846.8931 us. Best GFLOPs: 133.9100
2024-04-29 05:04:57 [INFO] [task_scheduler.cc:131] [Task #27: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_26] Trial #19: GFLOPs: 7.1494. Time: 20728.3766 us. Best GFLOPs: 133.9100
2024-04-29 05:04:57 [INFO] [task_scheduler.cc:131] [Task #27: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_26] Trial #20: GFLOPs: 75.5505. Time: 1961.5325 us. Best GFLOPs: 133.9100
2024-04-29 05:04:57 [INFO] [task_scheduler.cc:121] [Task #27: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_26] Trial #21: Error in building:
LocalBuilder: Timeout, killed after 30.0 seconds
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(492), T.int64(14), T.int64(14), T.int64(4)), "float32"), p1: T.Buffer((T.int64(48), T.int64(492), T.int64(1), T.int64(1), T.int64(4), T.int64(4)), "float32"), p2: T.Buffer((T.int64(1), T.int64(48), T.int64(1), T.int64(1), T.int64(4)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(48), T.int64(14), T.int64(14), T.int64(4)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        conv2d_NCHWc = T.alloc_buffer((T.int64(1), T.int64(48), T.int64(14), T.int64(14), T.int64(4)))
        for n_0 in T.serial(T.int64(1), annotations={"pragma_auto_unroll_max_step": 512, "pragma_unroll_explicit": 1}):
            for oc_chunk_0, oh_0, ow_0, oc_block_0 in T.grid(T.int64(1), T.int64(1), T.int64(1), T.int64(1)):
                for n_1, oc_chunk_1, oh_1, ow_1, oc_block_1 in T.grid(T.int64(1), T.int64(1), T.int64(7), T.int64(1), T.int64(2)):
                    for n_2_init, oc_chunk_2_init, oh_2_init, ow_2_init, oc_block_2_init, n_3_init, oc_chunk_3_init, oh_3_init, ow_3_init in T.grid(T.int64(1), T.int64(8), T.int64(1), T.int64(2), T.int64(1), T.int64(1), T.int64(6), T.int64(2), T.int64(7)):
                        for oc_block_3_fused_init in T.vectorized(T.int64(2)):
                            with T.block("conv2d_NCHWc_init"):
                                v_n = T.axis.spatial(T.int64(1), n_0 + n_1 + n_2_init + n_3_init)
                                v_oc_chunk = T.axis.spatial(T.int64(48), oc_chunk_0 * T.int64(48) + oc_chunk_1 * T.int64(48) + oc_chunk_2_init * T.int64(6) + oc_chunk_3_init)
                                v_oh = T.axis.spatial(T.int64(14), oh_0 * T.int64(14) + oh_1 * T.int64(2) + oh_2_init * T.int64(2) + oh_3_init)
                                v_ow = T.axis.spatial(T.int64(14), ow_0 * T.int64(14) + ow_1 * T.int64(14) + ow_2_init * T.int64(7) + ow_3_init)
                                v_oc_block = T.axis.spatial(T.int64(4), oc_block_0 * T.int64(4) + oc_block_1 * T.int64(2) + oc_block_2_init * T.int64(2) + oc_block_3_fused_init)
                                T.reads()
                                T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                                T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                                conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = T.float32(0)
                    for ic_0, kh_0, kw_0, n_2, oc_chunk_2, oh_2, ow_2, oc_block_2, ic_1, kh_1, kw_1, n_3, oc_chunk_3, oh_3, ow_3 in T.grid(T.int64(656), T.int64(1), T.int64(1), T.int64(1), T.int64(8), T.int64(1), T.int64(2), T.int64(1), T.int64(3), T.int64(1), T.int64(1), T.int64(1), T.int64(6), T.int64(2), T.int64(7)):
                        for oc_block_3_fused in T.vectorized(T.int64(2)):
                            with T.block("conv2d_NCHWc_update"):
                                v_n = T.axis.spatial(T.int64(1), n_0 + n_1 + n_2 + n_3)
                                v_oc_chunk = T.axis.spatial(T.int64(48), oc_chunk_0 * T.int64(48) + oc_chunk_1 * T.int64(48) + oc_chunk_2 * T.int64(6) + oc_chunk_3)
                                v_oh = T.axis.spatial(T.int64(14), oh_0 * T.int64(14) + oh_1 * T.int64(2) + oh_2 * T.int64(2) + oh_3)
                                v_ow = T.axis.spatial(T.int64(14), ow_0 * T.int64(14) + ow_1 * T.int64(14) + ow_2 * T.int64(7) + ow_3)
                                v_oc_block = T.axis.spatial(T.int64(4), oc_block_0 * T.int64(4) + oc_block_1 * T.int64(2) + oc_block_2 * T.int64(2) + oc_block_3_fused)
                                v_ic = T.axis.reduce(T.int64(1968), ic_0 * T.int64(3) + ic_1)
                                v_kh = T.axis.reduce(T.int64(1), kh_0 + kh_1)
                                v_kw = T.axis.reduce(T.int64(1), kw_0 + kw_1)
                                T.reads(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block], p0[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)], p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block])
                                T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                                T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                                conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] + p0[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)] * p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block]
                for ax0, ax1, ax2 in T.grid(T.int64(1), T.int64(48), T.int64(14)):
                    for ax3_ax4_fused in T.vectorized(T.int64(56)):
                        with T.block("T_relu"):
                            v_ax0, v_ax1, v_ax2 = T.axis.remap("SSS", [ax0, ax1, ax2])
                            v_ax3 = T.axis.spatial(T.int64(14), ax3_ax4_fused // T.int64(4))
                            v_ax4 = T.axis.spatial(T.int64(4), ax3_ax4_fused % T.int64(4))
                            T.reads(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4])
                            T.writes(T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                            T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.max(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] + p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4], T.float32(0))
b0 = sch.get_block(name="conv2d_NCHWc", func_name="main")
b1 = sch.get_block(name="T_add", func_name="main")
b2 = sch.get_block(name="root", func_name="main")
sch.compute_inline(block=b1)
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.tiling_structure", ann_val="SSRSRS")
l3, l4, l5, l6, l7, l8, l9, l10 = sch.get_loops(block=b0)
v11, v12, v13, v14 = sch.sample_perfect_tile(loop=l3, n=4, max_innermost_factor=64, decision=[1, 1, 1, 1])
l15, l16, l17, l18 = sch.split(loop=l3, factors=[v11, v12, v13, v14], preserve_unit_iters=True)
v19, v20, v21, v22 = sch.sample_perfect_tile(loop=l4, n=4, max_innermost_factor=64, decision=[1, 1, 8, 6])
l23, l24, l25, l26 = sch.split(loop=l4, factors=[v19, v20, v21, v22], preserve_unit_iters=True)
v27, v28, v29, v30 = sch.sample_perfect_tile(loop=l5, n=4, max_innermost_factor=64, decision=[1, 7, 1, 2])
l31, l32, l33, l34 = sch.split(loop=l5, factors=[v27, v28, v29, v30], preserve_unit_iters=True)
v35, v36, v37, v38 = sch.sample_perfect_tile(loop=l6, n=4, max_innermost_factor=64, decision=[1, 1, 2, 7])
l39, l40, l41, l42 = sch.split(loop=l6, factors=[v35, v36, v37, v38], preserve_unit_iters=True)
v43, v44, v45, v46 = sch.sample_perfect_tile(loop=l7, n=4, max_innermost_factor=64, decision=[1, 2, 1, 2])
l47, l48, l49, l50 = sch.split(loop=l7, factors=[v43, v44, v45, v46], preserve_unit_iters=True)
v51, v52 = sch.sample_perfect_tile(loop=l8, n=2, max_innermost_factor=64, decision=[656, 3])
l53, l54 = sch.split(loop=l8, factors=[v51, v52], preserve_unit_iters=True)
v55, v56 = sch.sample_perfect_tile(loop=l9, n=2, max_innermost_factor=64, decision=[1, 1])
l57, l58 = sch.split(loop=l9, factors=[v55, v56], preserve_unit_iters=True)
v59, v60 = sch.sample_perfect_tile(loop=l10, n=2, max_innermost_factor=64, decision=[1, 1])
l61, l62 = sch.split(loop=l10, factors=[v59, v60], preserve_unit_iters=True)
sch.reorder(l15, l23, l31, l39, l47, l16, l24, l32, l40, l48, l53, l57, l61, l17, l25, l33, l41, l49, l54, l58, l62, l18, l26, l34, l42, l50)
b63, = sch.get_consumers(block=b0)
sch.reverse_compute_at(block=b63, loop=l47, preserve_unit_loops=True, index=-1)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.vectorize", ann_val=64)
v64 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.unroll_explicit", ann_val=v64)
sch.enter_postproc()
b65 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b65, ann_key="meta_schedule.parallel")
sch.unannotate(block_or_loop=b65, ann_key="meta_schedule.vectorize")
sch.unannotate(block_or_loop=b65, ann_key="meta_schedule.unroll_explicit")
b66, b67 = sch.get_child_blocks(b65)
l68, l69, l70, l71, l72, l73, l74, l75, l76, l77, l78, l79, l80, l81, l82, l83, l84, l85, l86, l87, l88, l89, l90, l91, l92, l93 = sch.get_loops(block=b66)
l94 = sch.fuse(l93, preserve_unit_iters=True)
sch.vectorize(loop=l94)
sch.annotate(block_or_loop=l68, ann_key="pragma_auto_unroll_max_step", ann_val=512)
sch.annotate(block_or_loop=l68, ann_key="pragma_unroll_explicit", ann_val=1)
l95, l96, l97, l98, l99, l100, l101, l102, l103, l104 = sch.get_loops(block=b67)
l105 = sch.fuse(l103, l104, preserve_unit_iters=True)
sch.vectorize(loop=l105)
b106 = sch.get_block(name="conv2d_NCHWc", func_name="main")
l107, l108, l109, l110, l111, l112, l113, l114, l115, l116, l117, l118, l119, l120, l121, l122, l123, l124, l125, l126, l127, l128, l129, l130, l131, l132 = sch.get_loops(block=b106)
b133 = sch.decompose_reduction(block=b106, loop=l117)
2024-04-29 05:04:57 [INFO] [task_scheduler.cc:131] [Task #27: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_26] Trial #22: GFLOPs: 24.6624. Time: 6008.9376 us. Best GFLOPs: 133.9100
2024-04-29 05:04:57 [INFO] [task_scheduler.cc:131] [Task #27: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_26] Trial #23: GFLOPs: 43.8254. Time: 3381.4831 us. Best GFLOPs: 133.9100
2024-04-29 05:04:57 [INFO] [task_scheduler.cc:131] [Task #27: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_26] Trial #24: GFLOPs: 76.1077. Time: 1947.1725 us. Best GFLOPs: 133.9100
2024-04-29 05:04:57 [INFO] [task_scheduler.cc:131] [Task #27: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_26] Trial #25: GFLOPs: 106.2995. Time: 1394.1256 us. Best GFLOPs: 133.9100
2024-04-29 05:04:57 [INFO] [task_scheduler.cc:121] [Task #27: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_26] Trial #26: Error in building:
LocalBuilder: Timeout, killed after 30.0 seconds
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(492), T.int64(14), T.int64(14), T.int64(4)), "float32"), p1: T.Buffer((T.int64(48), T.int64(492), T.int64(1), T.int64(1), T.int64(4), T.int64(4)), "float32"), p2: T.Buffer((T.int64(1), T.int64(48), T.int64(1), T.int64(1), T.int64(4)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(48), T.int64(14), T.int64(14), T.int64(4)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        conv2d_NCHWc = T.alloc_buffer((T.int64(1), T.int64(48), T.int64(14), T.int64(14), T.int64(4)))
        for n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused in T.parallel(T.int64(24), annotations={"pragma_auto_unroll_max_step": 512, "pragma_unroll_explicit": 1}):
            for n_2_init, oc_chunk_2_init, oh_2_init, ow_2_init, oc_block_2_init, n_3_init, oc_chunk_3_init, oh_3_init, ow_3_init in T.grid(T.int64(1), T.int64(2), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(14), T.int64(14)):
                for oc_block_3_fused_init in T.vectorized(T.int64(4)):
                    with T.block("conv2d_NCHWc_init"):
                        v_n = T.axis.spatial(T.int64(1), n_2_init + n_3_init)
                        v_oc_chunk = T.axis.spatial(T.int64(48), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused * T.int64(2) + oc_chunk_2_init + oc_chunk_3_init)
                        v_oh = T.axis.spatial(T.int64(14), oh_2_init * T.int64(14) + oh_3_init)
                        v_ow = T.axis.spatial(T.int64(14), ow_2_init * T.int64(14) + ow_3_init)
                        v_oc_block = T.axis.spatial(T.int64(4), oc_block_2_init * T.int64(4) + oc_block_3_fused_init)
                        T.reads()
                        T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                        T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                        conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = T.float32(0)
            for ic_0, kh_0, kw_0, n_2, oc_chunk_2, oh_2, ow_2, oc_block_2, ic_1, kh_1, kw_1, n_3, oc_chunk_3, oh_3, ow_3 in T.grid(T.int64(246), T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(1), T.int64(1), T.int64(1), T.int64(8), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(14), T.int64(14)):
                for oc_block_3_fused in T.vectorized(T.int64(4)):
                    with T.block("conv2d_NCHWc_update"):
                        v_n = T.axis.spatial(T.int64(1), n_2 + n_3)
                        v_oc_chunk = T.axis.spatial(T.int64(48), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused * T.int64(2) + oc_chunk_2 + oc_chunk_3)
                        v_oh = T.axis.spatial(T.int64(14), oh_2 * T.int64(14) + oh_3)
                        v_ow = T.axis.spatial(T.int64(14), ow_2 * T.int64(14) + ow_3)
                        v_oc_block = T.axis.spatial(T.int64(4), oc_block_2 * T.int64(4) + oc_block_3_fused)
                        v_ic = T.axis.reduce(T.int64(1968), ic_0 * T.int64(8) + ic_1)
                        v_kh = T.axis.reduce(T.int64(1), kh_0 + kh_1)
                        v_kw = T.axis.reduce(T.int64(1), kw_0 + kw_1)
                        T.reads(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block], p0[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)], p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block])
                        T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                        T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                        conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] + p0[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)] * p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block]
        for ax0_ax1_ax2_ax3_ax4_fused_0 in T.parallel(T.int64(588)):
            for ax0_ax1_ax2_ax3_ax4_fused_1 in T.vectorized(T.int64(64)):
                with T.block("T_relu"):
                    v_ax0 = T.axis.spatial(T.int64(1), T.int64(0))
                    v_ax1 = T.axis.spatial(T.int64(48), (ax0_ax1_ax2_ax3_ax4_fused_0 * T.int64(64) + ax0_ax1_ax2_ax3_ax4_fused_1) // T.int64(784))
                    v_ax2 = T.axis.spatial(T.int64(14), (ax0_ax1_ax2_ax3_ax4_fused_0 * T.int64(64) + ax0_ax1_ax2_ax3_ax4_fused_1) % T.int64(784) // T.int64(56))
                    v_ax3 = T.axis.spatial(T.int64(14), (ax0_ax1_ax2_ax3_ax4_fused_0 * T.int64(64) + ax0_ax1_ax2_ax3_ax4_fused_1) % T.int64(56) // T.int64(4))
                    v_ax4 = T.axis.spatial(T.int64(4), (ax0_ax1_ax2_ax3_ax4_fused_0 * T.int64(64) + ax0_ax1_ax2_ax3_ax4_fused_1) % T.int64(4))
                    T.reads(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4])
                    T.writes(T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                    T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.max(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] + p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4], T.float32(0))
b0 = sch.get_block(name="conv2d_NCHWc", func_name="main")
b1 = sch.get_block(name="T_add", func_name="main")
b2 = sch.get_block(name="root", func_name="main")
sch.compute_inline(block=b1)
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.tiling_structure", ann_val="SSRSRS")
l3, l4, l5, l6, l7, l8, l9, l10 = sch.get_loops(block=b0)
v11, v12, v13, v14 = sch.sample_perfect_tile(loop=l3, n=4, max_innermost_factor=64, decision=[1, 1, 1, 1])
l15, l16, l17, l18 = sch.split(loop=l3, factors=[v11, v12, v13, v14], preserve_unit_iters=True)
v19, v20, v21, v22 = sch.sample_perfect_tile(loop=l4, n=4, max_innermost_factor=64, decision=[24, 1, 2, 1])
l23, l24, l25, l26 = sch.split(loop=l4, factors=[v19, v20, v21, v22], preserve_unit_iters=True)
v27, v28, v29, v30 = sch.sample_perfect_tile(loop=l5, n=4, max_innermost_factor=64, decision=[1, 1, 1, 14])
l31, l32, l33, l34 = sch.split(loop=l5, factors=[v27, v28, v29, v30], preserve_unit_iters=True)
v35, v36, v37, v38 = sch.sample_perfect_tile(loop=l6, n=4, max_innermost_factor=64, decision=[1, 1, 1, 14])
l39, l40, l41, l42 = sch.split(loop=l6, factors=[v35, v36, v37, v38], preserve_unit_iters=True)
v43, v44, v45, v46 = sch.sample_perfect_tile(loop=l7, n=4, max_innermost_factor=64, decision=[1, 1, 1, 4])
l47, l48, l49, l50 = sch.split(loop=l7, factors=[v43, v44, v45, v46], preserve_unit_iters=True)
v51, v52 = sch.sample_perfect_tile(loop=l8, n=2, max_innermost_factor=64, decision=[246, 8])
l53, l54 = sch.split(loop=l8, factors=[v51, v52], preserve_unit_iters=True)
v55, v56 = sch.sample_perfect_tile(loop=l9, n=2, max_innermost_factor=64, decision=[1, 1])
l57, l58 = sch.split(loop=l9, factors=[v55, v56], preserve_unit_iters=True)
v59, v60 = sch.sample_perfect_tile(loop=l10, n=2, max_innermost_factor=64, decision=[1, 1])
l61, l62 = sch.split(loop=l10, factors=[v59, v60], preserve_unit_iters=True)
sch.reorder(l15, l23, l31, l39, l47, l16, l24, l32, l40, l48, l53, l57, l61, l17, l25, l33, l41, l49, l54, l58, l62, l18, l26, l34, l42, l50)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.vectorize", ann_val=64)
v63 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.unroll_explicit", ann_val=v63)
sch.enter_postproc()
b64 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b64, ann_key="meta_schedule.parallel")
sch.unannotate(block_or_loop=b64, ann_key="meta_schedule.vectorize")
sch.unannotate(block_or_loop=b64, ann_key="meta_schedule.unroll_explicit")
b65, b66 = sch.get_child_blocks(b64)
l67, l68, l69, l70, l71, l72, l73, l74, l75, l76, l77, l78, l79, l80, l81, l82, l83, l84, l85, l86, l87, l88, l89, l90, l91, l92 = sch.get_loops(block=b65)
l93 = sch.fuse(l67, l68, l69, l70, l71, l72, l73, l74, l75, l76, preserve_unit_iters=True)
sch.parallel(loop=l93)
l94 = sch.fuse(l92, preserve_unit_iters=True)
sch.vectorize(loop=l94)
sch.annotate(block_or_loop=l93, ann_key="pragma_auto_unroll_max_step", ann_val=512)
sch.annotate(block_or_loop=l93, ann_key="pragma_unroll_explicit", ann_val=1)
l95, l96, l97, l98, l99 = sch.get_loops(block=b66)
l100 = sch.fuse(l95, l96, l97, l98, l99, preserve_unit_iters=True)
l101, l102 = sch.split(loop=l100, factors=[None, 64], preserve_unit_iters=True)
sch.parallel(loop=l101)
sch.vectorize(loop=l102)
b103 = sch.get_block(name="conv2d_NCHWc", func_name="main")
l104, l105, l106, l107, l108, l109, l110, l111, l112, l113, l114, l115, l116, l117, l118, l119, l120 = sch.get_loops(block=b103)
b121 = sch.decompose_reduction(block=b103, loop=l105)
2024-04-29 05:04:57 [INFO] [task_scheduler.cc:131] [Task #27: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_26] Trial #27: GFLOPs: 153.6174. Time: 964.7004 us. Best GFLOPs: 153.6174
2024-04-29 05:04:57 [INFO] [task_scheduler.cc:131] [Task #27: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_26] Trial #28: GFLOPs: 138.1449. Time: 1072.7489 us. Best GFLOPs: 153.6174
2024-04-29 05:04:57 [INFO] [task_scheduler.cc:131] [Task #27: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_26] Trial #29: GFLOPs: 1.8411. Time: 80491.8667 us. Best GFLOPs: 153.6174
2024-04-29 05:04:57 [INFO] [task_scheduler.cc:131] [Task #27: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_26] Trial #30: GFLOPs: 58.0110. Time: 2554.5983 us. Best GFLOPs: 153.6174
2024-04-29 05:04:57 [INFO] [task_scheduler.cc:131] [Task #27: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_26] Trial #31: GFLOPs: 9.8864. Time: 14989.7891 us. Best GFLOPs: 153.6174
2024-04-29 05:04:57 [INFO] [task_scheduler.cc:131] [Task #27: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_26] Trial #32: GFLOPs: 14.7590. Time: 10040.9715 us. Best GFLOPs: 153.6174
2024-04-29 05:04:57 [INFO] [task_scheduler.cc:131] [Task #27: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_26] Trial #33: GFLOPs: 94.5394. Time: 1567.5454 us. Best GFLOPs: 153.6174
2024-04-29 05:04:57 [INFO] [task_scheduler.cc:131] [Task #27: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_26] Trial #34: GFLOPs: 115.5379. Time: 1282.6510 us. Best GFLOPs: 153.6174
2024-04-29 05:04:57 [INFO] [task_scheduler.cc:131] [Task #27: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_26] Trial #35: GFLOPs: 30.9029. Time: 4795.5060 us. Best GFLOPs: 153.6174
2024-04-29 05:04:57 [INFO] [task_scheduler.cc:131] [Task #27: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_26] Trial #36: GFLOPs: 80.2713. Time: 1846.1753 us. Best GFLOPs: 153.6174
2024-04-29 05:04:57 [INFO] [task_scheduler.cc:131] [Task #27: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_26] Trial #37: GFLOPs: 73.0176. Time: 2029.5755 us. Best GFLOPs: 153.6174
2024-04-29 05:04:57 [INFO] [task_scheduler.cc:131] [Task #27: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_26] Trial #38: GFLOPs: 23.0147. Time: 6439.1455 us. Best GFLOPs: 153.6174
2024-04-29 05:04:57 [INFO] [task_scheduler.cc:131] [Task #27: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_26] Trial #39: GFLOPs: 36.0480. Time: 4111.0378 us. Best GFLOPs: 153.6174
2024-04-29 05:04:57 [INFO] [task_scheduler.cc:131] [Task #27: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_26] Trial #40: GFLOPs: 61.4242. Time: 2412.6436 us. Best GFLOPs: 153.6174
2024-04-29 05:04:57 [INFO] [task_scheduler.cc:131] [Task #27: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_26] Trial #41: GFLOPs: 85.9923. Time: 1723.3490 us. Best GFLOPs: 153.6174
2024-04-29 05:04:57 [INFO] [task_scheduler.cc:131] [Task #27: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_26] Trial #42: GFLOPs: 17.6325. Time: 8404.6618 us. Best GFLOPs: 153.6174
2024-04-29 05:04:57 [INFO] [task_scheduler.cc:131] [Task #27: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_26] Trial #43: GFLOPs: 58.3276. Time: 2540.7334 us. Best GFLOPs: 153.6174
2024-04-29 05:04:57 [INFO] [task_scheduler.cc:131] [Task #27: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_26] Trial #44: GFLOPs: 153.4131. Time: 965.9856 us. Best GFLOPs: 153.6174
2024-04-29 05:04:57 [INFO] [task_scheduler.cc:131] [Task #27: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_26] Trial #45: GFLOPs: 34.7481. Time: 4264.8311 us. Best GFLOPs: 153.6174
2024-04-29 05:04:57 [INFO] [task_scheduler.cc:131] [Task #27: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_26] Trial #46: GFLOPs: 1.7681. Time: 83817.7963 us. Best GFLOPs: 153.6174
2024-04-29 05:04:57 [INFO] [task_scheduler.cc:131] [Task #27: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_26] Trial #47: GFLOPs: 44.0037. Time: 3367.7845 us. Best GFLOPs: 153.6174
2024-04-29 05:04:57 [INFO] [task_scheduler.cc:131] [Task #27: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_26] Trial #48: GFLOPs: 173.7788. Time: 852.7786 us. Best GFLOPs: 173.7788
2024-04-29 05:04:57 [INFO] [task_scheduler.cc:131] [Task #27: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_26] Trial #49: GFLOPs: 0.2782. Time: 532596.1830 us. Best GFLOPs: 173.7788
2024-04-29 05:04:57 [INFO] [task_scheduler.cc:131] [Task #27: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_26] Trial #50: GFLOPs: 14.7333. Time: 10058.4865 us. Best GFLOPs: 173.7788
2024-04-29 05:04:57 [INFO] [task_scheduler.cc:131] [Task #27: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_26] Trial #51: GFLOPs: 91.7054. Time: 1615.9873 us. Best GFLOPs: 173.7788
2024-04-29 05:04:57 [INFO] [task_scheduler.cc:131] [Task #27: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_26] Trial #52: GFLOPs: 34.8095. Time: 4257.3137 us. Best GFLOPs: 173.7788
2024-04-29 05:04:57 [INFO] [task_scheduler.cc:131] [Task #27: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_26] Trial #53: GFLOPs: 3.4260. Time: 43255.9453 us. Best GFLOPs: 173.7788
2024-04-29 05:04:57 [INFO] [task_scheduler.cc:131] [Task #27: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_26] Trial #54: GFLOPs: 91.6629. Time: 1616.7371 us. Best GFLOPs: 173.7788
2024-04-29 05:04:57 [INFO] [task_scheduler.cc:131] [Task #27: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_26] Trial #55: GFLOPs: 100.2696. Time: 1477.9640 us. Best GFLOPs: 173.7788
2024-04-29 05:04:57 [INFO] [task_scheduler.cc:131] [Task #27: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_26] Trial #56: GFLOPs: 4.2678. Time: 34724.2127 us. Best GFLOPs: 173.7788
2024-04-29 05:04:57 [INFO] [task_scheduler.cc:131] [Task #27: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_26] Trial #57: GFLOPs: 3.0867. Time: 48010.6877 us. Best GFLOPs: 173.7788
2024-04-29 05:04:57 [INFO] [task_scheduler.cc:131] [Task #27: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_26] Trial #58: GFLOPs: 11.7804. Time: 12579.7559 us. Best GFLOPs: 173.7788
2024-04-29 05:04:57 [INFO] [task_scheduler.cc:131] [Task #27: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_26] Trial #59: GFLOPs: 1.5983. Time: 92718.9457 us. Best GFLOPs: 173.7788
2024-04-29 05:04:57 [INFO] [task_scheduler.cc:131] [Task #27: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_26] Trial #60: GFLOPs: 63.0656. Time: 2349.8505 us. Best GFLOPs: 173.7788
2024-04-29 05:04:57 [INFO] [task_scheduler.cc:131] [Task #27: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_26] Trial #61: GFLOPs: 9.7489. Time: 15201.2610 us. Best GFLOPs: 173.7788
2024-04-29 05:04:57 [INFO] [task_scheduler.cc:131] [Task #27: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_26] Trial #62: GFLOPs: 114.9426. Time: 1289.2946 us. Best GFLOPs: 173.7788
2024-04-29 05:04:57 [INFO] [task_scheduler.cc:131] [Task #27: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_26] Trial #63: GFLOPs: 42.1291. Time: 3517.6382 us. Best GFLOPs: 173.7788
2024-04-29 05:04:57 [INFO] [task_scheduler.cc:131] [Task #27: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_26] Trial #64: GFLOPs: 34.3003. Time: 4320.5064 us. Best GFLOPs: 173.7788
2024-04-29 06:45:45 [INFO] [evolutionary_search.cc:713] Generating candidates......
2024-04-29 06:45:46 [INFO] [evolutionary_search.cc:715] Picked top 62 candidate(s) from database
2024-04-29 06:45:48 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0xc648158)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x86d71c8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x6c149e8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0xd9f8718)]: 0 failure(s)
2024-04-29 06:45:48 [INFO] [evolutionary_search.cc:723] Sampled 450 candidate(s)
2024-04-29 06:45:53 [INFO] [evolutionary_search.cc:621] Evolve iter #0 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0xc648158)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x86d71c8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x6c149e8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0xd9f8718)]: 0 failure(s)
2024-04-29 06:45:59 [INFO] [evolutionary_search.cc:621] Evolve iter #1 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0xc648158)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x86d71c8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x6c149e8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0xd9f8718)]: 0 failure(s)
2024-04-29 06:46:04 [INFO] [evolutionary_search.cc:621] Evolve iter #2 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0xc648158)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x86d71c8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x6c149e8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0xd9f8718)]: 0 failure(s)
2024-04-29 06:46:10 [INFO] [evolutionary_search.cc:621] Evolve iter #3 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0xc648158)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x86d71c8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x6c149e8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0xd9f8718)]: 0 failure(s)
2024-04-29 06:46:13 [INFO] [evolutionary_search.cc:649] Scores of the best 64 candidates:
[1 : 16]:	0.9891  0.8939  0.8896  0.8852  0.8062  0.7853  0.7774  0.7730  0.7660  0.7544  0.7503  0.7491  0.7491  0.7435  0.7338  0.7318
[17 : 32]:	0.7289  0.7257  0.7197  0.7162  0.7121  0.7114  0.7059  0.7043  0.7003  0.7001  0.6992  0.6992  0.6957  0.6925  0.6902  0.6874
[33 : 48]:	0.6874  0.6834  0.6828  0.6793  0.6732  0.6708  0.6668  0.6662  0.6654  0.6651  0.6650  0.6647  0.6635  0.6620  0.6617  0.6597
[49 : 64]:	0.6595  0.6565  0.6538  0.6475  0.6450  0.6448  0.6448  0.6406  0.6393  0.6391  0.6373  0.6364  0.6364  0.6364  0.6351  0.6330
2024-04-29 06:46:13 [INFO] [evolutionary_search.cc:727] Got 64 candidate(s) with evolutionary search
2024-04-29 06:46:13 [INFO] [evolutionary_search.cc:730] Sending 64 candidates(s) for measurement
2024-04-29 06:47:54 [INFO] [task_scheduler.cc:131] [Task #27: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_26] Trial #65: GFLOPs: 149.2521. Time: 992.9160 us. Best GFLOPs: 173.7788
2024-04-29 06:47:54 [INFO] [task_scheduler.cc:131] [Task #27: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_26] Trial #66: GFLOPs: 160.1782. Time: 925.1870 us. Best GFLOPs: 173.7788
2024-04-29 06:47:54 [INFO] [task_scheduler.cc:131] [Task #27: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_26] Trial #67: GFLOPs: 154.0263. Time: 962.1396 us. Best GFLOPs: 173.7788
2024-04-29 06:47:54 [INFO] [task_scheduler.cc:131] [Task #27: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_26] Trial #68: GFLOPs: 153.1541. Time: 967.6191 us. Best GFLOPs: 173.7788
2024-04-29 06:47:54 [INFO] [task_scheduler.cc:131] [Task #27: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_26] Trial #69: GFLOPs: 105.3135. Time: 1407.1783 us. Best GFLOPs: 173.7788
2024-04-29 06:47:54 [INFO] [task_scheduler.cc:131] [Task #27: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_26] Trial #70: GFLOPs: 170.7919. Time: 867.6923 us. Best GFLOPs: 173.7788
2024-04-29 06:47:54 [INFO] [task_scheduler.cc:131] [Task #27: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_26] Trial #71: GFLOPs: 156.4904. Time: 946.9900 us. Best GFLOPs: 173.7788
2024-04-29 06:47:54 [INFO] [task_scheduler.cc:131] [Task #27: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_26] Trial #72: GFLOPs: 234.6785. Time: 631.4801 us. Best GFLOPs: 234.6785
2024-04-29 06:47:54 [INFO] [task_scheduler.cc:131] [Task #27: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_26] Trial #73: GFLOPs: 70.9475. Time: 2088.7943 us. Best GFLOPs: 234.6785
2024-04-29 06:47:54 [INFO] [task_scheduler.cc:131] [Task #27: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_26] Trial #74: GFLOPs: 207.1068. Time: 715.5479 us. Best GFLOPs: 234.6785
2024-04-29 06:47:54 [INFO] [task_scheduler.cc:131] [Task #27: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_26] Trial #75: GFLOPs: 99.0835. Time: 1495.6565 us. Best GFLOPs: 234.6785
2024-04-29 06:47:54 [INFO] [task_scheduler.cc:131] [Task #27: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_26] Trial #76: GFLOPs: 278.9201. Time: 531.3163 us. Best GFLOPs: 278.9201
2024-04-29 06:47:54 [INFO] [task_scheduler.cc:131] [Task #27: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_26] Trial #77: GFLOPs: 198.3019. Time: 747.3191 us. Best GFLOPs: 278.9201
2024-04-29 06:47:54 [INFO] [task_scheduler.cc:131] [Task #27: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_26] Trial #78: GFLOPs: 109.3276. Time: 1355.5109 us. Best GFLOPs: 278.9201
2024-04-29 06:47:54 [INFO] [task_scheduler.cc:131] [Task #27: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_26] Trial #79: GFLOPs: 292.9804. Time: 505.8183 us. Best GFLOPs: 292.9804
2024-04-29 06:47:54 [INFO] [task_scheduler.cc:131] [Task #27: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_26] Trial #80: GFLOPs: 87.0922. Time: 1701.5859 us. Best GFLOPs: 292.9804
2024-04-29 06:47:54 [INFO] [task_scheduler.cc:131] [Task #27: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_26] Trial #81: GFLOPs: 123.6061. Time: 1198.9280 us. Best GFLOPs: 292.9804
2024-04-29 06:47:54 [INFO] [task_scheduler.cc:131] [Task #27: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_26] Trial #82: GFLOPs: 64.1353. Time: 2310.6592 us. Best GFLOPs: 292.9804
2024-04-29 06:47:54 [INFO] [task_scheduler.cc:131] [Task #27: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_26] Trial #83: GFLOPs: 98.0094. Time: 1512.0470 us. Best GFLOPs: 292.9804
2024-04-29 06:47:54 [INFO] [task_scheduler.cc:131] [Task #27: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_26] Trial #84: GFLOPs: 120.6002. Time: 1228.8107 us. Best GFLOPs: 292.9804
2024-04-29 06:47:54 [INFO] [task_scheduler.cc:131] [Task #27: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_26] Trial #85: GFLOPs: 160.3292. Time: 924.3157 us. Best GFLOPs: 292.9804
2024-04-29 06:47:54 [INFO] [task_scheduler.cc:131] [Task #27: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_26] Trial #86: GFLOPs: 58.9116. Time: 2515.5476 us. Best GFLOPs: 292.9804
2024-04-29 06:47:54 [INFO] [task_scheduler.cc:131] [Task #27: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_26] Trial #87: GFLOPs: 112.2779. Time: 1319.8933 us. Best GFLOPs: 292.9804
2024-04-29 06:47:54 [INFO] [task_scheduler.cc:131] [Task #27: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_26] Trial #88: GFLOPs: 133.4761. Time: 1110.2720 us. Best GFLOPs: 292.9804
2024-04-29 06:47:54 [INFO] [task_scheduler.cc:131] [Task #27: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_26] Trial #89: GFLOPs: 97.5441. Time: 1519.2603 us. Best GFLOPs: 292.9804
2024-04-29 06:47:54 [INFO] [task_scheduler.cc:131] [Task #27: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_26] Trial #90: GFLOPs: 124.7005. Time: 1188.4060 us. Best GFLOPs: 292.9804
2024-04-29 06:47:54 [INFO] [task_scheduler.cc:131] [Task #27: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_26] Trial #91: GFLOPs: 109.5000. Time: 1353.3769 us. Best GFLOPs: 292.9804
2024-04-29 06:47:54 [INFO] [task_scheduler.cc:131] [Task #27: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_26] Trial #92: GFLOPs: 69.3768. Time: 2136.0869 us. Best GFLOPs: 292.9804
2024-04-29 06:47:54 [INFO] [task_scheduler.cc:131] [Task #27: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_26] Trial #93: GFLOPs: 118.4546. Time: 1251.0684 us. Best GFLOPs: 292.9804
2024-04-29 06:47:54 [INFO] [task_scheduler.cc:131] [Task #27: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_26] Trial #94: GFLOPs: 111.1697. Time: 1333.0504 us. Best GFLOPs: 292.9804
2024-04-29 06:47:54 [INFO] [task_scheduler.cc:131] [Task #27: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_26] Trial #95: GFLOPs: 90.3763. Time: 1639.7531 us. Best GFLOPs: 292.9804
2024-04-29 06:47:54 [INFO] [task_scheduler.cc:131] [Task #27: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_26] Trial #96: GFLOPs: 112.3284. Time: 1319.3001 us. Best GFLOPs: 292.9804
2024-04-29 06:47:54 [INFO] [task_scheduler.cc:131] [Task #27: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_26] Trial #97: GFLOPs: 59.2286. Time: 2502.0800 us. Best GFLOPs: 292.9804
2024-04-29 06:47:54 [INFO] [task_scheduler.cc:131] [Task #27: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_26] Trial #98: GFLOPs: 132.0485. Time: 1122.2754 us. Best GFLOPs: 292.9804
2024-04-29 06:47:54 [INFO] [task_scheduler.cc:131] [Task #27: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_26] Trial #99: GFLOPs: 135.9704. Time: 1089.9048 us. Best GFLOPs: 292.9804
2024-04-29 06:47:54 [INFO] [task_scheduler.cc:131] [Task #27: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_26] Trial #100: GFLOPs: 94.6613. Time: 1565.5266 us. Best GFLOPs: 292.9804
2024-04-29 06:47:54 [INFO] [task_scheduler.cc:131] [Task #27: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_26] Trial #101: GFLOPs: 168.0936. Time: 881.6207 us. Best GFLOPs: 292.9804
2024-04-29 06:47:54 [INFO] [task_scheduler.cc:131] [Task #27: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_26] Trial #102: GFLOPs: 148.2629. Time: 999.5407 us. Best GFLOPs: 292.9804
2024-04-29 06:47:54 [INFO] [task_scheduler.cc:131] [Task #27: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_26] Trial #103: GFLOPs: 110.3495. Time: 1342.9590 us. Best GFLOPs: 292.9804
2024-04-29 06:47:54 [INFO] [task_scheduler.cc:131] [Task #27: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_26] Trial #104: GFLOPs: 66.5668. Time: 2226.2578 us. Best GFLOPs: 292.9804
2024-04-29 06:47:54 [INFO] [task_scheduler.cc:131] [Task #27: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_26] Trial #105: GFLOPs: 94.5008. Time: 1568.1855 us. Best GFLOPs: 292.9804
2024-04-29 06:47:54 [INFO] [task_scheduler.cc:131] [Task #27: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_26] Trial #106: GFLOPs: 80.1018. Time: 1850.0806 us. Best GFLOPs: 292.9804
2024-04-29 06:47:54 [INFO] [task_scheduler.cc:131] [Task #27: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_26] Trial #107: GFLOPs: 111.9502. Time: 1323.7561 us. Best GFLOPs: 292.9804
2024-04-29 06:47:54 [INFO] [task_scheduler.cc:131] [Task #27: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_26] Trial #108: GFLOPs: 183.5012. Time: 807.5958 us. Best GFLOPs: 292.9804
2024-04-29 06:47:54 [INFO] [task_scheduler.cc:131] [Task #27: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_26] Trial #109: GFLOPs: 189.2601. Time: 783.0220 us. Best GFLOPs: 292.9804
2024-04-29 06:47:54 [INFO] [task_scheduler.cc:131] [Task #27: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_26] Trial #110: GFLOPs: 124.2860. Time: 1192.3693 us. Best GFLOPs: 292.9804
2024-04-29 06:47:54 [INFO] [task_scheduler.cc:131] [Task #27: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_26] Trial #111: GFLOPs: 127.2382. Time: 1164.7034 us. Best GFLOPs: 292.9804
2024-04-29 06:47:54 [INFO] [task_scheduler.cc:131] [Task #27: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_26] Trial #112: GFLOPs: 143.3200. Time: 1034.0136 us. Best GFLOPs: 292.9804
2024-04-29 06:47:54 [INFO] [task_scheduler.cc:131] [Task #27: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_26] Trial #113: GFLOPs: 156.7555. Time: 945.3886 us. Best GFLOPs: 292.9804
2024-04-29 06:47:54 [INFO] [task_scheduler.cc:131] [Task #27: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_26] Trial #114: GFLOPs: 188.1458. Time: 787.6596 us. Best GFLOPs: 292.9804
2024-04-29 06:47:54 [INFO] [task_scheduler.cc:131] [Task #27: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_26] Trial #115: GFLOPs: 114.4732. Time: 1294.5805 us. Best GFLOPs: 292.9804
2024-04-29 06:47:54 [INFO] [task_scheduler.cc:131] [Task #27: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_26] Trial #116: GFLOPs: 120.8624. Time: 1226.1452 us. Best GFLOPs: 292.9804
2024-04-29 06:47:54 [INFO] [task_scheduler.cc:131] [Task #27: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_26] Trial #117: GFLOPs: 114.5890. Time: 1293.2728 us. Best GFLOPs: 292.9804
2024-04-29 06:47:54 [INFO] [task_scheduler.cc:131] [Task #27: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_26] Trial #118: GFLOPs: 99.5548. Time: 1488.5756 us. Best GFLOPs: 292.9804
2024-04-29 06:47:54 [INFO] [task_scheduler.cc:131] [Task #27: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_26] Trial #119: GFLOPs: 99.4443. Time: 1490.2291 us. Best GFLOPs: 292.9804
2024-04-29 06:47:54 [INFO] [task_scheduler.cc:131] [Task #27: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_26] Trial #120: GFLOPs: 131.3324. Time: 1128.3946 us. Best GFLOPs: 292.9804
2024-04-29 06:47:54 [INFO] [task_scheduler.cc:131] [Task #27: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_26] Trial #121: GFLOPs: 139.6302. Time: 1061.3380 us. Best GFLOPs: 292.9804
2024-04-29 06:47:54 [INFO] [task_scheduler.cc:131] [Task #27: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_26] Trial #122: GFLOPs: 80.1654. Time: 1848.6137 us. Best GFLOPs: 292.9804
2024-04-29 06:47:54 [INFO] [task_scheduler.cc:131] [Task #27: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_26] Trial #123: GFLOPs: 246.7952. Time: 600.4768 us. Best GFLOPs: 292.9804
2024-04-29 06:47:54 [INFO] [task_scheduler.cc:131] [Task #27: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_26] Trial #124: GFLOPs: 114.0615. Time: 1299.2541 us. Best GFLOPs: 292.9804
2024-04-29 06:47:54 [INFO] [task_scheduler.cc:131] [Task #27: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_26] Trial #125: GFLOPs: 107.5250. Time: 1378.2361 us. Best GFLOPs: 292.9804
2024-04-29 06:47:54 [INFO] [task_scheduler.cc:131] [Task #27: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_26] Trial #126: GFLOPs: 125.0149. Time: 1185.4174 us. Best GFLOPs: 292.9804
2024-04-29 06:47:54 [INFO] [task_scheduler.cc:121] [Task #27: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_26] Trial #127: Error in building:
LocalBuilder: Timeout, killed after 30.0 seconds
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(492), T.int64(14), T.int64(14), T.int64(4)), "float32"), p1: T.Buffer((T.int64(48), T.int64(492), T.int64(1), T.int64(1), T.int64(4), T.int64(4)), "float32"), p2: T.Buffer((T.int64(1), T.int64(48), T.int64(1), T.int64(1), T.int64(4)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(48), T.int64(14), T.int64(14), T.int64(4)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        conv2d_NCHWc = T.alloc_buffer((T.int64(1), T.int64(48), T.int64(14), T.int64(14), T.int64(4)))
        for n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_fused in T.parallel(T.int64(4), annotations={"pragma_auto_unroll_max_step": 512, "pragma_unroll_explicit": 1}):
            for n_1, oc_chunk_1, oh_1, ow_1, oc_block_1 in T.grid(T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1)):
                for n_2_init, oc_chunk_2_init, oh_2_init, ow_2_init, oc_block_2_init, n_3_init, oc_chunk_3_init, oh_3_init, ow_3_init, oc_block_3_init in T.grid(T.int64(1), T.int64(1), T.int64(7), T.int64(1), T.int64(4), T.int64(1), T.int64(24), T.int64(2), T.int64(7), T.int64(1)):
                    with T.block("conv2d_NCHWc_init"):
                        v_n = T.axis.spatial(T.int64(1), n_1 + n_2_init + n_3_init)
                        v_oc_chunk = T.axis.spatial(T.int64(48), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_fused // T.int64(2) * T.int64(24) + oc_chunk_1 * T.int64(24) + oc_chunk_2_init * T.int64(24) + oc_chunk_3_init)
                        v_oh = T.axis.spatial(T.int64(14), oh_1 * T.int64(14) + oh_2_init * T.int64(2) + oh_3_init)
                        v_ow = T.axis.spatial(T.int64(14), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_fused % T.int64(2) * T.int64(7) + ow_1 * T.int64(7) + ow_2_init * T.int64(7) + ow_3_init)
                        v_oc_block = T.axis.spatial(T.int64(4), oc_block_1 * T.int64(4) + oc_block_2_init + oc_block_3_init)
                        T.reads()
                        T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                        T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                        conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = T.float32(0)
                for ic_0, kh_0, kw_0, n_2, oc_chunk_2, oh_2, ow_2, oc_block_2, ic_1, kh_1, kw_1, n_3, oc_chunk_3, oh_3, ow_3, oc_block_3 in T.grid(T.int64(41), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(7), T.int64(1), T.int64(4), T.int64(48), T.int64(1), T.int64(1), T.int64(1), T.int64(24), T.int64(2), T.int64(7), T.int64(1)):
                    with T.block("conv2d_NCHWc_update"):
                        v_n = T.axis.spatial(T.int64(1), n_1 + n_2 + n_3)
                        v_oc_chunk = T.axis.spatial(T.int64(48), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_fused // T.int64(2) * T.int64(24) + oc_chunk_1 * T.int64(24) + oc_chunk_2 * T.int64(24) + oc_chunk_3)
                        v_oh = T.axis.spatial(T.int64(14), oh_1 * T.int64(14) + oh_2 * T.int64(2) + oh_3)
                        v_ow = T.axis.spatial(T.int64(14), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_fused % T.int64(2) * T.int64(7) + ow_1 * T.int64(7) + ow_2 * T.int64(7) + ow_3)
                        v_oc_block = T.axis.spatial(T.int64(4), oc_block_1 * T.int64(4) + oc_block_2 + oc_block_3)
                        v_ic = T.axis.reduce(T.int64(1968), ic_0 * T.int64(48) + ic_1)
                        v_kh = T.axis.reduce(T.int64(1), kh_0 + kh_1)
                        v_kw = T.axis.reduce(T.int64(1), kw_0 + kw_1)
                        T.reads(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block], p0[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)], p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block])
                        T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                        T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                        conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] + p0[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)] * p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block]
            for ax0, ax1, ax2 in T.grid(T.int64(1), T.int64(24), T.int64(14)):
                for ax3_ax4_fused in T.vectorized(T.int64(28)):
                    with T.block("T_relu"):
                        v_ax0 = T.axis.spatial(T.int64(1), ax0)
                        v_ax1 = T.axis.spatial(T.int64(48), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_fused // T.int64(2) * T.int64(24) + ax1)
                        v_ax2 = T.axis.spatial(T.int64(14), ax2)
                        v_ax3 = T.axis.spatial(T.int64(14), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_fused % T.int64(2) * T.int64(7) + ax3_ax4_fused // T.int64(4))
                        v_ax4 = T.axis.spatial(T.int64(4), ax3_ax4_fused % T.int64(4))
                        T.reads(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4])
                        T.writes(T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                        T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.max(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] + p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4], T.float32(0))
b0 = sch.get_block(name="conv2d_NCHWc", func_name="main")
b1 = sch.get_block(name="T_add", func_name="main")
b2 = sch.get_block(name="root", func_name="main")
sch.compute_inline(block=b1)
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.tiling_structure", ann_val="SSRSRS")
l3, l4, l5, l6, l7, l8, l9, l10 = sch.get_loops(block=b0)
v11, v12, v13, v14 = sch.sample_perfect_tile(loop=l3, n=4, max_innermost_factor=64, decision=[1, 1, 1, 1])
l15, l16, l17, l18 = sch.split(loop=l3, factors=[v11, v12, v13, v14], preserve_unit_iters=True)
v19, v20, v21, v22 = sch.sample_perfect_tile(loop=l4, n=4, max_innermost_factor=64, decision=[2, 1, 1, 24])
l23, l24, l25, l26 = sch.split(loop=l4, factors=[v19, v20, v21, v22], preserve_unit_iters=True)
v27, v28, v29, v30 = sch.sample_perfect_tile(loop=l5, n=4, max_innermost_factor=64, decision=[1, 1, 7, 2])
l31, l32, l33, l34 = sch.split(loop=l5, factors=[v27, v28, v29, v30], preserve_unit_iters=True)
v35, v36, v37, v38 = sch.sample_perfect_tile(loop=l6, n=4, max_innermost_factor=64, decision=[2, 1, 1, 7])
l39, l40, l41, l42 = sch.split(loop=l6, factors=[v35, v36, v37, v38], preserve_unit_iters=True)
v43, v44, v45, v46 = sch.sample_perfect_tile(loop=l7, n=4, max_innermost_factor=64, decision=[1, 1, 4, 1])
l47, l48, l49, l50 = sch.split(loop=l7, factors=[v43, v44, v45, v46], preserve_unit_iters=True)
v51, v52 = sch.sample_perfect_tile(loop=l8, n=2, max_innermost_factor=64, decision=[41, 48])
l53, l54 = sch.split(loop=l8, factors=[v51, v52], preserve_unit_iters=True)
v55, v56 = sch.sample_perfect_tile(loop=l9, n=2, max_innermost_factor=64, decision=[1, 1])
l57, l58 = sch.split(loop=l9, factors=[v55, v56], preserve_unit_iters=True)
v59, v60 = sch.sample_perfect_tile(loop=l10, n=2, max_innermost_factor=64, decision=[1, 1])
l61, l62 = sch.split(loop=l10, factors=[v59, v60], preserve_unit_iters=True)
sch.reorder(l15, l23, l31, l39, l47, l16, l24, l32, l40, l48, l53, l57, l61, l17, l25, l33, l41, l49, l54, l58, l62, l18, l26, l34, l42, l50)
b63, = sch.get_consumers(block=b0)
sch.reverse_compute_at(block=b63, loop=l47, preserve_unit_loops=True, index=-1)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.vectorize", ann_val=64)
v64 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.unroll_explicit", ann_val=v64)
sch.enter_postproc()
b65 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b65, ann_key="meta_schedule.parallel")
sch.unannotate(block_or_loop=b65, ann_key="meta_schedule.vectorize")
sch.unannotate(block_or_loop=b65, ann_key="meta_schedule.unroll_explicit")
b66, b67 = sch.get_child_blocks(b65)
l68, l69, l70, l71, l72, l73, l74, l75, l76, l77, l78, l79, l80, l81, l82, l83, l84, l85, l86, l87, l88, l89, l90, l91, l92, l93 = sch.get_loops(block=b66)
l94 = sch.fuse(l68, l69, l70, l71, l72, preserve_unit_iters=True)
sch.parallel(loop=l94)
sch.annotate(block_or_loop=l94, ann_key="pragma_auto_unroll_max_step", ann_val=512)
sch.annotate(block_or_loop=l94, ann_key="pragma_unroll_explicit", ann_val=1)
l95, l96, l97, l98, l99, l100 = sch.get_loops(block=b67)
l101 = sch.fuse(l99, l100, preserve_unit_iters=True)
sch.vectorize(loop=l101)
b102 = sch.get_block(name="conv2d_NCHWc", func_name="main")
l103, l104, l105, l106, l107, l108, l109, l110, l111, l112, l113, l114, l115, l116, l117, l118, l119, l120, l121, l122, l123, l124 = sch.get_loops(block=b102)
b125 = sch.decompose_reduction(block=b102, loop=l109)
2024-04-29 06:47:54 [INFO] [task_scheduler.cc:131] [Task #27: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_26] Trial #128: GFLOPs: 78.8126. Time: 1880.3447 us. Best GFLOPs: 292.9804
