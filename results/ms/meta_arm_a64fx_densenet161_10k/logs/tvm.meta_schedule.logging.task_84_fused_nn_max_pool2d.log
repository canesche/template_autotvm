2024-04-29 02:33:47 [INFO] [task_scheduler.cc:160] Initializing Task #84: "fused_nn_max_pool2d"
2024-04-29 02:33:47 [INFO] [task_scheduler.cc:35] 
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(24), T.int64(112), T.int64(112), T.int64(4)), "float32"), pool_max: T.Buffer((T.int64(1), T.int64(24), T.int64(56), T.int64(56), T.int64(4)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        pad_temp = T.alloc_buffer((T.int64(1), T.int64(24), T.int64(114), T.int64(114), T.int64(4)))
        for ax0, ax1, ax2, ax3, ax4 in T.grid(T.int64(1), T.int64(24), T.int64(114), T.int64(114), T.int64(4)):
            with T.block("pad_temp"):
                v_ax0, v_ax1, v_ax2, v_ax3, v_ax4 = T.axis.remap("SSSSS", [ax0, ax1, ax2, ax3, ax4])
                T.reads(p0[v_ax0, v_ax1, v_ax2 - T.int64(1), v_ax3 - T.int64(1), v_ax4])
                T.writes(pad_temp[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                pad_temp[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.if_then_else(T.int64(1) <= v_ax2 and v_ax2 < T.int64(113) and T.int64(1) <= v_ax3 and v_ax3 < T.int64(113), p0[v_ax0, v_ax1, v_ax2 - T.int64(1), v_ax3 - T.int64(1), v_ax4], T.float32(-3.4028234663852886e+38))
        for ax0, ax1, ax2, ax3, ax4, rv0, rv1 in T.grid(T.int64(1), T.int64(24), T.int64(56), T.int64(56), T.int64(4), T.int64(3), T.int64(3)):
            with T.block("pool_max"):
                v_ax0, v_ax1, v_ax2, v_ax3, v_ax4, v_rv0, v_rv1 = T.axis.remap("SSSSSRR", [ax0, ax1, ax2, ax3, ax4, rv0, rv1])
                T.reads(pad_temp[v_ax0, v_ax1, v_ax2 * T.int64(2) + v_rv0, v_ax3 * T.int64(2) + v_rv1, v_ax4])
                T.writes(pool_max[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                T.block_attr({"schedule_rule": "meta_schedule.pool_max"})
                with T.init():
                    pool_max[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.float32(-3.4028234663852886e+38)
                pool_max[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.max(pool_max[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], pad_temp[v_ax0, v_ax1, v_ax2 * T.int64(2) + v_rv0, v_ax3 * T.int64(2) + v_rv1, v_ax4])
2024-04-29 02:33:47 [INFO] [task_scheduler.cc:164] Total 3 design space(s) generated
2024-04-29 02:33:47 [INFO] [task_scheduler.cc:170] Design space #0:
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(24), T.int64(112), T.int64(112), T.int64(4)), "float32"), pool_max: T.Buffer((T.int64(1), T.int64(24), T.int64(56), T.int64(56), T.int64(4)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        with T.block("root"):
            T.reads()
            T.writes()
            T.block_attr({"meta_schedule.parallel": 768, "meta_schedule.unroll_explicit": 64, "meta_schedule.vectorize": 64})
            pad_temp = T.alloc_buffer((T.int64(1), T.int64(24), T.int64(114), T.int64(114), T.int64(4)))
            pool_max_rf = T.alloc_buffer((T.int64(1), T.int64(24), T.int64(56), T.int64(56), T.int64(4), T.int64(9)))
            for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(24), T.int64(56), T.int64(56)):
                for ax0_1, ax1_1, ax2_1, ax3_1, ax4 in T.grid(T.int64(1), T.int64(1), T.int64(3), T.int64(3), T.int64(4)):
                    with T.block("pad_temp"):
                        v_ax0 = T.axis.spatial(T.int64(1), ax0_1)
                        v_ax1 = T.axis.spatial(T.int64(24), ax1 + ax1_1)
                        v_ax2 = T.axis.spatial(T.int64(114), ax2 * T.int64(2) + ax2_1)
                        v_ax3 = T.axis.spatial(T.int64(114), ax3 * T.int64(2) + ax3_1)
                        v_ax4 = T.axis.spatial(T.int64(4), ax4)
                        T.reads(p0[v_ax0, v_ax1, v_ax2 - T.int64(1), v_ax3 - T.int64(1), v_ax4])
                        T.writes(pad_temp[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                        pad_temp[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.if_then_else(T.int64(1) <= v_ax2 and v_ax2 < T.int64(113) and T.int64(1) <= v_ax3 and v_ax3 < T.int64(113), p0[v_ax0, v_ax1, v_ax2 - T.int64(1), v_ax3 - T.int64(1), v_ax4], T.float32(-3.4028234663852886e+38))
                for ax4, rv0_rv1_fused_0, rv0_rv1_fused_1 in T.grid(T.int64(4), T.int64(9), T.int64(1)):
                    with T.block("pool_max_rf"):
                        vrv0_rv1_fused_0, v_ax0, v_ax1, v_ax2, v_ax3, v_ax4, vrv0_rv1_fused_1 = T.axis.remap("SSSSSSR", [rv0_rv1_fused_0, ax0, ax1, ax2, ax3, ax4, rv0_rv1_fused_1])
                        T.reads(pad_temp[v_ax0, v_ax1, v_ax2 * T.int64(2) + (vrv0_rv1_fused_0 + vrv0_rv1_fused_1) // T.int64(3), v_ax3 * T.int64(2) + (vrv0_rv1_fused_0 + vrv0_rv1_fused_1) % T.int64(3), v_ax4])
                        T.writes(pool_max_rf[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4, vrv0_rv1_fused_0])
                        with T.init():
                            pool_max_rf[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4, vrv0_rv1_fused_0] = T.float32(-3.4028234663852886e+38)
                        pool_max_rf[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4, vrv0_rv1_fused_0] = T.max(pool_max_rf[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4, vrv0_rv1_fused_0], pad_temp[v_ax0, v_ax1, v_ax2 * T.int64(2) + (vrv0_rv1_fused_0 + vrv0_rv1_fused_1) // T.int64(3), v_ax3 * T.int64(2) + (vrv0_rv1_fused_0 + vrv0_rv1_fused_1) % T.int64(3), v_ax4])
            for ax0, ax1, ax2, ax3, ax4, rv0_rv1_fused_0 in T.grid(T.int64(1), T.int64(24), T.int64(56), T.int64(56), T.int64(4), T.int64(9)):
                with T.block("pool_max"):
                    vrv0_rv1_fused_0, v_ax0, v_ax1, v_ax2, v_ax3, v_ax4 = T.axis.remap("RSSSSS", [rv0_rv1_fused_0, ax0, ax1, ax2, ax3, ax4])
                    T.reads(pool_max_rf[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4, vrv0_rv1_fused_0])
                    T.writes(pool_max[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                    T.block_attr({"meta_schedule.random_compute_producer": 1})
                    with T.init():
                        pool_max[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.float32(-3.4028234663852886e+38)
                    pool_max[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.max(pool_max[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], pool_max_rf[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4, vrv0_rv1_fused_0])
b0 = sch.get_block(name="pad_temp", func_name="main")
b1 = sch.get_block(name="pool_max", func_name="main")
b2 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b1, ann_key="schedule_rule")
l3, l4, l5, l6, l7, l8, l9 = sch.get_loops(block=b1)
l10 = sch.fuse(l8, l9, preserve_unit_iters=True)
v11, v12 = sch.sample_perfect_tile(loop=l10, n=2, max_innermost_factor=64, decision=[9, 1])
l13, l14 = sch.split(loop=l10, factors=[v11, v12], preserve_unit_iters=True)
b15 = sch.rfactor(loop=l13, factor_axis=5)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.random_compute_producer", ann_val=1)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.vectorize", ann_val=64)
v16 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=2)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.unroll_explicit", ann_val=v16)
l17 = sch.sample_compute_location(block=b0, decision=3)
sch.compute_at(block=b0, loop=l17, preserve_unit_loops=True, index=-1)
2024-04-29 02:33:47 [INFO] [task_scheduler.cc:170] Design space #1:
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(24), T.int64(112), T.int64(112), T.int64(4)), "float32"), pool_max: T.Buffer((T.int64(1), T.int64(24), T.int64(56), T.int64(56), T.int64(4)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        with T.block("root"):
            T.reads()
            T.writes()
            T.block_attr({"meta_schedule.parallel": 768, "meta_schedule.unroll_explicit": 16, "meta_schedule.vectorize": 64})
            pad_temp = T.alloc_buffer((T.int64(1), T.int64(24), T.int64(114), T.int64(114), T.int64(4)))
            pool_max_rf = T.alloc_buffer((T.int64(1), T.int64(24), T.int64(56), T.int64(56), T.int64(4), T.int64(1)))
            for ax0, ax1, ax2, ax3, ax4, rv0_rv1_fused_0 in T.grid(T.int64(1), T.int64(24), T.int64(56), T.int64(56), T.int64(4), T.int64(9)):
                for ax0_1, ax1_1, ax2_1, ax3_1, ax4_1 in T.grid(T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1)):
                    with T.block("pad_temp"):
                        v_ax0 = T.axis.spatial(T.int64(1), ax0_1)
                        v_ax1 = T.axis.spatial(T.int64(24), ax1 + ax1_1)
                        v_ax2 = T.axis.spatial(T.int64(114), ax2 * T.int64(2) + rv0_rv1_fused_0 // T.int64(3) + ax2_1)
                        v_ax3 = T.axis.spatial(T.int64(114), ax3 * T.int64(2) + rv0_rv1_fused_0 % T.int64(3) + ax3_1)
                        v_ax4 = T.axis.spatial(T.int64(4), ax4 + ax4_1)
                        T.reads(p0[v_ax0, v_ax1, v_ax2 - T.int64(1), v_ax3 - T.int64(1), v_ax4])
                        T.writes(pad_temp[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                        pad_temp[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.if_then_else(T.int64(1) <= v_ax2 and v_ax2 < T.int64(113) and T.int64(1) <= v_ax3 and v_ax3 < T.int64(113), p0[v_ax0, v_ax1, v_ax2 - T.int64(1), v_ax3 - T.int64(1), v_ax4], T.float32(-3.4028234663852886e+38))
                for rv0_rv1_fused_1 in range(T.int64(1)):
                    with T.block("pool_max_rf"):
                        vrv0_rv1_fused_1, v_ax0, v_ax1, v_ax2, v_ax3, v_ax4, vrv0_rv1_fused_0 = T.axis.remap("SSSSSSR", [rv0_rv1_fused_1, ax0, ax1, ax2, ax3, ax4, rv0_rv1_fused_0])
                        T.reads(pad_temp[v_ax0, v_ax1, v_ax2 * T.int64(2) + (vrv0_rv1_fused_0 + vrv0_rv1_fused_1) // T.int64(3), v_ax3 * T.int64(2) + (vrv0_rv1_fused_0 + vrv0_rv1_fused_1) % T.int64(3), v_ax4])
                        T.writes(pool_max_rf[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4, vrv0_rv1_fused_1])
                        with T.init():
                            pool_max_rf[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4, vrv0_rv1_fused_1] = T.float32(-3.4028234663852886e+38)
                        pool_max_rf[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4, vrv0_rv1_fused_1] = T.max(pool_max_rf[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4, vrv0_rv1_fused_1], pad_temp[v_ax0, v_ax1, v_ax2 * T.int64(2) + (vrv0_rv1_fused_0 + vrv0_rv1_fused_1) // T.int64(3), v_ax3 * T.int64(2) + (vrv0_rv1_fused_0 + vrv0_rv1_fused_1) % T.int64(3), v_ax4])
            for ax0, ax1, ax2, ax3, ax4, rv0_rv1_fused_1 in T.grid(T.int64(1), T.int64(24), T.int64(56), T.int64(56), T.int64(4), T.int64(1)):
                with T.block("pool_max"):
                    vrv0_rv1_fused_1, v_ax0, v_ax1, v_ax2, v_ax3, v_ax4 = T.axis.remap("RSSSSS", [rv0_rv1_fused_1, ax0, ax1, ax2, ax3, ax4])
                    T.reads(pool_max_rf[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4, vrv0_rv1_fused_1])
                    T.writes(pool_max[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                    T.block_attr({"meta_schedule.random_compute_producer": 1})
                    with T.init():
                        pool_max[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.float32(-3.4028234663852886e+38)
                    pool_max[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.max(pool_max[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], pool_max_rf[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4, vrv0_rv1_fused_1])
b0 = sch.get_block(name="pad_temp", func_name="main")
b1 = sch.get_block(name="pool_max", func_name="main")
b2 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b1, ann_key="schedule_rule")
l3, l4, l5, l6, l7, l8, l9 = sch.get_loops(block=b1)
l10 = sch.fuse(l8, l9, preserve_unit_iters=True)
v11, v12 = sch.sample_perfect_tile(loop=l10, n=2, max_innermost_factor=64, decision=[9, 1])
l13, l14 = sch.split(loop=l10, factors=[v11, v12], preserve_unit_iters=True)
b15 = sch.rfactor(loop=l14, factor_axis=5)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.random_compute_producer", ann_val=1)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.vectorize", ann_val=64)
v16 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=1)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.unroll_explicit", ann_val=v16)
l17 = sch.sample_compute_location(block=b0, decision=5)
sch.compute_at(block=b0, loop=l17, preserve_unit_loops=True, index=-1)
2024-04-29 02:33:47 [INFO] [task_scheduler.cc:170] Design space #2:
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(24), T.int64(112), T.int64(112), T.int64(4)), "float32"), pool_max: T.Buffer((T.int64(1), T.int64(24), T.int64(56), T.int64(56), T.int64(4)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        with T.block("root"):
            T.reads()
            T.writes()
            T.block_attr({"meta_schedule.parallel": 768, "meta_schedule.unroll_explicit": 512, "meta_schedule.vectorize": 64})
            pad_temp = T.alloc_buffer((T.int64(1), T.int64(24), T.int64(114), T.int64(114), T.int64(4)))
            for ax0, ax1, ax2, ax3, ax4 in T.grid(T.int64(1), T.int64(24), T.int64(114), T.int64(114), T.int64(4)):
                with T.block("pad_temp"):
                    v_ax0, v_ax1, v_ax2, v_ax3, v_ax4 = T.axis.remap("SSSSS", [ax0, ax1, ax2, ax3, ax4])
                    T.reads(p0[v_ax0, v_ax1, v_ax2 - T.int64(1), v_ax3 - T.int64(1), v_ax4])
                    T.writes(pad_temp[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                    pad_temp[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.if_then_else(T.int64(1) <= v_ax2 and v_ax2 < T.int64(113) and T.int64(1) <= v_ax3 and v_ax3 < T.int64(113), p0[v_ax0, v_ax1, v_ax2 - T.int64(1), v_ax3 - T.int64(1), v_ax4], T.float32(-3.4028234663852886e+38))
            for ax0, ax1, ax2, ax3, ax4, rv0, rv1 in T.grid(T.int64(1), T.int64(24), T.int64(56), T.int64(56), T.int64(4), T.int64(3), T.int64(3)):
                with T.block("pool_max"):
                    v_ax0, v_ax1, v_ax2, v_ax3, v_ax4, v_rv0, v_rv1 = T.axis.remap("SSSSSRR", [ax0, ax1, ax2, ax3, ax4, rv0, rv1])
                    T.reads(pad_temp[v_ax0, v_ax1, v_ax2 * T.int64(2) + v_rv0, v_ax3 * T.int64(2) + v_rv1, v_ax4])
                    T.writes(pool_max[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                    with T.init():
                        pool_max[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.float32(-3.4028234663852886e+38)
                    pool_max[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.max(pool_max[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], pad_temp[v_ax0, v_ax1, v_ax2 * T.int64(2) + v_rv0, v_ax3 * T.int64(2) + v_rv1, v_ax4])
b0 = sch.get_block(name="pad_temp", func_name="main")
b1 = sch.get_block(name="pool_max", func_name="main")
b2 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b1, ann_key="schedule_rule")
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.vectorize", ann_val=64)
v3 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.unroll_explicit", ann_val=v3)
l4 = sch.sample_compute_location(block=b0, decision=-1)
sch.compute_at(block=b0, loop=l4, preserve_unit_loops=True, index=-1)
2024-04-29 04:46:17 [INFO] [evolutionary_search.cc:713] Generating candidates......
2024-04-29 04:46:17 [INFO] [evolutionary_search.cc:715] Picked top 0 candidate(s) from database
2024-04-29 04:46:21 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x10814398)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x7321a08)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0xdae16b8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0xe0d8d78)]: 0 failure(s)
2024-04-29 04:46:21 [INFO] [evolutionary_search.cc:723] Sampled 512 candidate(s)
2024-04-29 04:46:25 [INFO] [evolutionary_search.cc:621] Evolve iter #0 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x10814398)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x7321a08)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0xdae16b8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0xe0d8d78)]: 0 failure(s)
2024-04-29 04:46:30 [INFO] [evolutionary_search.cc:621] Evolve iter #1 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x10814398)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x7321a08)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0xdae16b8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0xe0d8d78)]: 0 failure(s)
2024-04-29 04:46:35 [INFO] [evolutionary_search.cc:621] Evolve iter #2 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x10814398)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x7321a08)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0xdae16b8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0xe0d8d78)]: 0 failure(s)
2024-04-29 04:46:40 [INFO] [evolutionary_search.cc:621] Evolve iter #3 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x10814398)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x7321a08)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0xdae16b8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0xe0d8d78)]: 0 failure(s)
2024-04-29 04:46:41 [INFO] [evolutionary_search.cc:649] Scores of the best 64 candidates:
[1 : 16]:	0.9977  0.9939  0.9934  0.9815  0.9811  0.9764  0.9756  0.9742  0.9598  0.9564  0.9513  0.9455  0.9436  0.9377  0.9374  0.9308
[17 : 32]:	0.9246  0.9235  0.9187  0.9151  0.9077  0.9035  0.8969  0.8846  0.8805  0.8795  0.8764  0.8731  0.8650  0.8620  0.8551  0.8447
[33 : 48]:	0.8356  0.8307  0.8261  0.8244  0.8143  0.8141  0.8058  0.8051  0.7925  0.7896  0.7828  0.7818  0.7794  0.7771  0.7691  0.7672
[49 : 64]:	0.7665  0.7613  0.7595  0.7578  0.7379  0.7355  0.7341  0.7334  0.7326  0.7322  0.7264  0.7172  0.7152  0.7018  0.6931  0.6844
2024-04-29 04:46:41 [INFO] [evolutionary_search.cc:727] Got 64 candidate(s) with evolutionary search
2024-04-29 04:46:41 [INFO] [evolutionary_search.cc:730] Sending 63 candidates(s) for measurement
2024-04-29 05:12:08 [INFO] [task_scheduler.cc:131] [Task #84: fused_nn_max_pool2d] Trial #1: GFLOPs: 12.8382. Time: 211.0494 us. Best GFLOPs: 12.8382
2024-04-29 05:12:08 [INFO] [task_scheduler.cc:131] [Task #84: fused_nn_max_pool2d] Trial #2: GFLOPs: 14.1701. Time: 191.2129 us. Best GFLOPs: 14.1701
2024-04-29 05:12:08 [INFO] [task_scheduler.cc:131] [Task #84: fused_nn_max_pool2d] Trial #3: GFLOPs: 9.5573. Time: 283.5015 us. Best GFLOPs: 14.1701
2024-04-29 05:12:08 [INFO] [task_scheduler.cc:131] [Task #84: fused_nn_max_pool2d] Trial #4: GFLOPs: 12.7731. Time: 212.1252 us. Best GFLOPs: 14.1701
2024-04-29 05:12:08 [INFO] [task_scheduler.cc:131] [Task #84: fused_nn_max_pool2d] Trial #5: GFLOPs: 14.2273. Time: 190.4437 us. Best GFLOPs: 14.2273
2024-04-29 05:12:08 [INFO] [task_scheduler.cc:131] [Task #84: fused_nn_max_pool2d] Trial #6: GFLOPs: 9.2164. Time: 293.9884 us. Best GFLOPs: 14.2273
2024-04-29 05:12:08 [INFO] [task_scheduler.cc:131] [Task #84: fused_nn_max_pool2d] Trial #7: GFLOPs: 47.5285. Time: 57.0080 us. Best GFLOPs: 47.5285
2024-04-29 05:12:08 [INFO] [task_scheduler.cc:131] [Task #84: fused_nn_max_pool2d] Trial #8: GFLOPs: 23.6097. Time: 114.7623 us. Best GFLOPs: 47.5285
2024-04-29 05:12:08 [INFO] [task_scheduler.cc:131] [Task #84: fused_nn_max_pool2d] Trial #9: GFLOPs: 20.5895. Time: 131.5965 us. Best GFLOPs: 47.5285
2024-04-29 05:12:08 [INFO] [task_scheduler.cc:131] [Task #84: fused_nn_max_pool2d] Trial #10: GFLOPs: 9.6239. Time: 281.5378 us. Best GFLOPs: 47.5285
2024-04-29 05:12:08 [INFO] [task_scheduler.cc:131] [Task #84: fused_nn_max_pool2d] Trial #11: GFLOPs: 22.5130. Time: 120.3531 us. Best GFLOPs: 47.5285
2024-04-29 05:12:08 [INFO] [task_scheduler.cc:131] [Task #84: fused_nn_max_pool2d] Trial #12: GFLOPs: 17.7347. Time: 152.7796 us. Best GFLOPs: 47.5285
2024-04-29 05:12:08 [INFO] [task_scheduler.cc:131] [Task #84: fused_nn_max_pool2d] Trial #13: GFLOPs: 22.6676. Time: 119.5320 us. Best GFLOPs: 47.5285
2024-04-29 05:12:08 [INFO] [task_scheduler.cc:131] [Task #84: fused_nn_max_pool2d] Trial #14: GFLOPs: 18.8089. Time: 144.0547 us. Best GFLOPs: 47.5285
2024-04-29 05:12:08 [INFO] [task_scheduler.cc:131] [Task #84: fused_nn_max_pool2d] Trial #15: GFLOPs: 25.5637. Time: 105.9905 us. Best GFLOPs: 47.5285
2024-04-29 05:12:08 [INFO] [task_scheduler.cc:131] [Task #84: fused_nn_max_pool2d] Trial #16: GFLOPs: 22.8026. Time: 118.8241 us. Best GFLOPs: 47.5285
2024-04-29 05:12:08 [INFO] [task_scheduler.cc:131] [Task #84: fused_nn_max_pool2d] Trial #17: GFLOPs: 10.7248. Time: 252.6389 us. Best GFLOPs: 47.5285
2024-04-29 05:12:08 [INFO] [task_scheduler.cc:131] [Task #84: fused_nn_max_pool2d] Trial #18: GFLOPs: 14.6215. Time: 185.3100 us. Best GFLOPs: 47.5285
2024-04-29 05:12:08 [INFO] [task_scheduler.cc:131] [Task #84: fused_nn_max_pool2d] Trial #19: GFLOPs: 21.6727. Time: 125.0190 us. Best GFLOPs: 47.5285
2024-04-29 05:12:08 [INFO] [task_scheduler.cc:131] [Task #84: fused_nn_max_pool2d] Trial #20: GFLOPs: 11.6462. Time: 232.6512 us. Best GFLOPs: 47.5285
2024-04-29 05:12:08 [INFO] [task_scheduler.cc:131] [Task #84: fused_nn_max_pool2d] Trial #21: GFLOPs: 11.9565. Time: 226.6126 us. Best GFLOPs: 47.5285
2024-04-29 05:12:08 [INFO] [task_scheduler.cc:131] [Task #84: fused_nn_max_pool2d] Trial #22: GFLOPs: 18.1541. Time: 149.2502 us. Best GFLOPs: 47.5285
2024-04-29 05:12:08 [INFO] [task_scheduler.cc:131] [Task #84: fused_nn_max_pool2d] Trial #23: GFLOPs: 20.9245. Time: 129.4895 us. Best GFLOPs: 47.5285
2024-04-29 05:12:08 [INFO] [task_scheduler.cc:131] [Task #84: fused_nn_max_pool2d] Trial #24: GFLOPs: 9.5156. Time: 284.7432 us. Best GFLOPs: 47.5285
2024-04-29 05:12:08 [INFO] [task_scheduler.cc:131] [Task #84: fused_nn_max_pool2d] Trial #25: GFLOPs: 14.8027. Time: 183.0408 us. Best GFLOPs: 47.5285
2024-04-29 05:12:08 [INFO] [task_scheduler.cc:131] [Task #84: fused_nn_max_pool2d] Trial #26: GFLOPs: 23.7015. Time: 114.3180 us. Best GFLOPs: 47.5285
2024-04-29 05:12:08 [INFO] [task_scheduler.cc:131] [Task #84: fused_nn_max_pool2d] Trial #27: GFLOPs: 12.0472. Time: 224.9079 us. Best GFLOPs: 47.5285
2024-04-29 05:12:08 [INFO] [task_scheduler.cc:131] [Task #84: fused_nn_max_pool2d] Trial #28: GFLOPs: 22.2130. Time: 121.9783 us. Best GFLOPs: 47.5285
2024-04-29 05:12:08 [INFO] [task_scheduler.cc:121] [Task #84: fused_nn_max_pool2d] Trial #29: Error in building:
LocalBuilder: Timeout, killed after 30.0 seconds
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(24), T.int64(112), T.int64(112), T.int64(4)), "float32"), pool_max: T.Buffer((T.int64(1), T.int64(24), T.int64(56), T.int64(56), T.int64(4)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        pad_temp = T.alloc_buffer((T.int64(1), T.int64(24), T.int64(114), T.int64(114), T.int64(4)))
        pool_max_rf = T.alloc_buffer((T.int64(1), T.int64(24), T.int64(56), T.int64(56), T.int64(4), T.int64(9)))
        for ax0_ax1_ax2_fused_fused in T.parallel(T.int64(1344), annotations={"pragma_auto_unroll_max_step": 512, "pragma_unroll_explicit": 1}):
            for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(1), T.int64(3), T.int64(113)):
                for ax4_fused in T.vectorized(T.int64(4)):
                    with T.block("pad_temp"):
                        v_ax0 = T.axis.spatial(T.int64(1), ax0)
                        v_ax1 = T.axis.spatial(T.int64(24), ax0_ax1_ax2_fused_fused // T.int64(56) + ax1)
                        v_ax2 = T.axis.spatial(T.int64(114), ax0_ax1_ax2_fused_fused % T.int64(56) * T.int64(2) + ax2)
                        v_ax3 = T.axis.spatial(T.int64(114), ax3)
                        v_ax4 = T.axis.spatial(T.int64(4), ax4_fused)
                        T.reads(p0[v_ax0, v_ax1, v_ax2 - T.int64(1), v_ax3 - T.int64(1), v_ax4])
                        T.writes(pad_temp[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                        pad_temp[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.if_then_else(T.int64(1) <= v_ax2 and v_ax2 < T.int64(113) and T.int64(1) <= v_ax3 and v_ax3 < T.int64(113), p0[v_ax0, v_ax1, v_ax2 - T.int64(1), v_ax3 - T.int64(1), v_ax4], T.float32(-3.4028234663852886e+38))
            for ax3, ax4 in T.grid(T.int64(56), T.int64(4)):
                for rv0_rv1_fused_1_fused_init in T.vectorized(T.int64(9)):
                    with T.block("pool_max_rf_init"):
                        vrv0_rv1_fused_1 = T.axis.spatial(T.int64(9), rv0_rv1_fused_1_fused_init)
                        v_ax0 = T.axis.spatial(T.int64(1), T.int64(0))
                        v_ax1 = T.axis.spatial(T.int64(24), ax0_ax1_ax2_fused_fused // T.int64(56))
                        v_ax2 = T.axis.spatial(T.int64(56), ax0_ax1_ax2_fused_fused % T.int64(56))
                        v_ax3, v_ax4 = T.axis.remap("SS", [ax3, ax4])
                        T.reads()
                        T.writes(pool_max_rf[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4, vrv0_rv1_fused_1])
                        pool_max_rf[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4, vrv0_rv1_fused_1] = T.float32(-3.4028234663852886e+38)
                for rv0_rv1_fused_0 in range(T.int64(1)):
                    for rv0_rv1_fused_1_fused in T.vectorized(T.int64(9)):
                        with T.block("pool_max_rf_update"):
                            vrv0_rv1_fused_1 = T.axis.spatial(T.int64(9), rv0_rv1_fused_1_fused)
                            v_ax0 = T.axis.spatial(T.int64(1), T.int64(0))
                            v_ax1 = T.axis.spatial(T.int64(24), ax0_ax1_ax2_fused_fused // T.int64(56))
                            v_ax2 = T.axis.spatial(T.int64(56), ax0_ax1_ax2_fused_fused % T.int64(56))
                            v_ax3, v_ax4, vrv0_rv1_fused_0 = T.axis.remap("SSR", [ax3, ax4, rv0_rv1_fused_0])
                            T.reads(pool_max_rf[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4, vrv0_rv1_fused_1], pad_temp[v_ax0, v_ax1, v_ax2 * T.int64(2) + (vrv0_rv1_fused_0 * T.int64(9) + vrv0_rv1_fused_1) // T.int64(3), v_ax3 * T.int64(2) + (vrv0_rv1_fused_0 * T.int64(9) + vrv0_rv1_fused_1) % T.int64(3), v_ax4])
                            T.writes(pool_max_rf[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4, vrv0_rv1_fused_1])
                            pool_max_rf[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4, vrv0_rv1_fused_1] = T.max(pool_max_rf[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4, vrv0_rv1_fused_1], pad_temp[v_ax0, v_ax1, v_ax2 * T.int64(2) + (vrv0_rv1_fused_0 * T.int64(9) + vrv0_rv1_fused_1) // T.int64(3), v_ax3 * T.int64(2) + (vrv0_rv1_fused_0 * T.int64(9) + vrv0_rv1_fused_1) % T.int64(3), v_ax4])
        for ax0_ax1_ax2_fused in T.parallel(T.int64(1344), annotations={"pragma_auto_unroll_max_step": 512, "pragma_unroll_explicit": 1}):
            for ax3, ax4 in T.grid(T.int64(56), T.int64(4)):
                with T.block("pool_max_init"):
                    v_ax0 = T.axis.spatial(T.int64(1), T.int64(0))
                    v_ax1 = T.axis.spatial(T.int64(24), ax0_ax1_ax2_fused // T.int64(56))
                    v_ax2 = T.axis.spatial(T.int64(56), ax0_ax1_ax2_fused % T.int64(56))
                    v_ax3, v_ax4 = T.axis.remap("SS", [ax3, ax4])
                    T.reads()
                    T.writes(pool_max[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                    T.block_attr({"meta_schedule.random_compute_producer": 1})
                    pool_max[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.float32(-3.4028234663852886e+38)
                for rv0_rv1_fused_1 in range(T.int64(9)):
                    with T.block("pool_max_update"):
                        vrv0_rv1_fused_1 = T.axis.reduce(T.int64(9), rv0_rv1_fused_1)
                        v_ax0 = T.axis.spatial(T.int64(1), T.int64(0))
                        v_ax1 = T.axis.spatial(T.int64(24), ax0_ax1_ax2_fused // T.int64(56))
                        v_ax2 = T.axis.spatial(T.int64(56), ax0_ax1_ax2_fused % T.int64(56))
                        v_ax3, v_ax4 = T.axis.remap("SS", [ax3, ax4])
                        T.reads(pool_max[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], pool_max_rf[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4, vrv0_rv1_fused_1])
                        T.writes(pool_max[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                        T.block_attr({"meta_schedule.random_compute_producer": 1})
                        pool_max[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.max(pool_max[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], pool_max_rf[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4, vrv0_rv1_fused_1])
b0 = sch.get_block(name="pad_temp", func_name="main")
b1 = sch.get_block(name="pool_max", func_name="main")
b2 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b1, ann_key="schedule_rule")
l3, l4, l5, l6, l7, l8, l9 = sch.get_loops(block=b1)
l10 = sch.fuse(l8, l9, preserve_unit_iters=True)
v11, v12 = sch.sample_perfect_tile(loop=l10, n=2, max_innermost_factor=64, decision=[1, 9])
l13, l14 = sch.split(loop=l10, factors=[v11, v12], preserve_unit_iters=True)
b15 = sch.rfactor(loop=l14, factor_axis=5)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.random_compute_producer", ann_val=1)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.vectorize", ann_val=64)
v16 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.unroll_explicit", ann_val=v16)
l17 = sch.sample_compute_location(block=b0, decision=2)
sch.compute_at(block=b0, loop=l17, preserve_unit_loops=True, index=-1)
sch.enter_postproc()
b18 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b18, ann_key="meta_schedule.parallel")
sch.unannotate(block_or_loop=b18, ann_key="meta_schedule.vectorize")
sch.unannotate(block_or_loop=b18, ann_key="meta_schedule.unroll_explicit")
b19, b20, b21 = sch.get_child_blocks(b18)
l22, l23, l24, l25, l26, l27, l28, l29 = sch.get_loops(block=b19)
l30 = sch.fuse(l22, l23, l24, preserve_unit_iters=True)
sch.parallel(loop=l30)
l31 = sch.fuse(l29, preserve_unit_iters=True)
sch.vectorize(loop=l31)
l32, l33, l34, l35, l36 = sch.get_loops(block=b20)
l37 = sch.fuse(l32, preserve_unit_iters=True)
sch.parallel(loop=l37)
l38 = sch.fuse(l36, preserve_unit_iters=True)
sch.vectorize(loop=l38)
sch.annotate(block_or_loop=l37, ann_key="pragma_auto_unroll_max_step", ann_val=512)
sch.annotate(block_or_loop=l37, ann_key="pragma_unroll_explicit", ann_val=1)
l39, l40, l41, l42, l43, l44 = sch.get_loops(block=b21)
l45 = sch.fuse(l39, l40, l41, preserve_unit_iters=True)
sch.parallel(loop=l45)
sch.annotate(block_or_loop=l45, ann_key="pragma_auto_unroll_max_step", ann_val=512)
sch.annotate(block_or_loop=l45, ann_key="pragma_unroll_explicit", ann_val=1)
b46 = sch.get_block(name="pool_max_rf", func_name="main")
l47, l48, l49, l50, l51 = sch.get_loops(block=b46)
b52 = sch.decompose_reduction(block=b46, loop=l50)
b53 = sch.get_block(name="pool_max", func_name="main")
l54, l55, l56, l57 = sch.get_loops(block=b53)
b58 = sch.decompose_reduction(block=b53, loop=l57)
2024-04-29 05:12:08 [INFO] [task_scheduler.cc:131] [Task #84: fused_nn_max_pool2d] Trial #30: GFLOPs: 21.4130. Time: 126.5352 us. Best GFLOPs: 47.5285
2024-04-29 05:12:08 [INFO] [task_scheduler.cc:131] [Task #84: fused_nn_max_pool2d] Trial #31: GFLOPs: 21.3691. Time: 126.7956 us. Best GFLOPs: 47.5285
2024-04-29 05:12:08 [INFO] [task_scheduler.cc:131] [Task #84: fused_nn_max_pool2d] Trial #32: GFLOPs: 69.4767. Time: 38.9987 us. Best GFLOPs: 69.4767
2024-04-29 05:12:08 [INFO] [task_scheduler.cc:131] [Task #84: fused_nn_max_pool2d] Trial #33: GFLOPs: 4.7682. Time: 568.2460 us. Best GFLOPs: 69.4767
2024-04-29 05:12:08 [INFO] [task_scheduler.cc:131] [Task #84: fused_nn_max_pool2d] Trial #34: GFLOPs: 21.8749. Time: 123.8637 us. Best GFLOPs: 69.4767
2024-04-29 05:12:08 [INFO] [task_scheduler.cc:131] [Task #84: fused_nn_max_pool2d] Trial #35: GFLOPs: 4.5555. Time: 594.7706 us. Best GFLOPs: 69.4767
2024-04-29 05:12:08 [INFO] [task_scheduler.cc:131] [Task #84: fused_nn_max_pool2d] Trial #36: GFLOPs: 10.0715. Time: 269.0278 us. Best GFLOPs: 69.4767
2024-04-29 05:12:08 [INFO] [task_scheduler.cc:121] [Task #84: fused_nn_max_pool2d] Trial #37: Error in building:
LocalBuilder: Timeout, killed after 30.0 seconds
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(24), T.int64(112), T.int64(112), T.int64(4)), "float32"), pool_max: T.Buffer((T.int64(1), T.int64(24), T.int64(56), T.int64(56), T.int64(4)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        pad_temp = T.alloc_buffer((T.int64(1), T.int64(24), T.int64(114), T.int64(114), T.int64(4)))
        pool_max_rf = T.alloc_buffer((T.int64(1), T.int64(24), T.int64(56), T.int64(56), T.int64(4), T.int64(9)))
        for ax0_ax1_fused_fused in T.parallel(T.int64(24), annotations={"pragma_auto_unroll_max_step": 512, "pragma_unroll_explicit": 1}):
            for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(1), T.int64(113), T.int64(113)):
                for ax4_fused in T.vectorized(T.int64(4)):
                    with T.block("pad_temp"):
                        v_ax0 = T.axis.spatial(T.int64(1), ax0)
                        v_ax1 = T.axis.spatial(T.int64(24), ax0_ax1_fused_fused + ax1)
                        v_ax2 = T.axis.spatial(T.int64(114), ax2)
                        v_ax3 = T.axis.spatial(T.int64(114), ax3)
                        v_ax4 = T.axis.spatial(T.int64(4), ax4_fused)
                        T.reads(p0[v_ax0, v_ax1, v_ax2 - T.int64(1), v_ax3 - T.int64(1), v_ax4])
                        T.writes(pad_temp[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                        pad_temp[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.if_then_else(T.int64(1) <= v_ax2 and v_ax2 < T.int64(113) and T.int64(1) <= v_ax3 and v_ax3 < T.int64(113), p0[v_ax0, v_ax1, v_ax2 - T.int64(1), v_ax3 - T.int64(1), v_ax4], T.float32(-3.4028234663852886e+38))
            for ax2, ax3, ax4 in T.grid(T.int64(56), T.int64(56), T.int64(4)):
                for rv0_rv1_fused_1_fused_init in T.vectorized(T.int64(9)):
                    with T.block("pool_max_rf_init"):
                        vrv0_rv1_fused_1 = T.axis.spatial(T.int64(9), rv0_rv1_fused_1_fused_init)
                        v_ax0 = T.axis.spatial(T.int64(1), T.int64(0))
                        v_ax1, v_ax2, v_ax3, v_ax4 = T.axis.remap("SSSS", [ax0_ax1_fused_fused, ax2, ax3, ax4])
                        T.reads()
                        T.writes(pool_max_rf[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4, vrv0_rv1_fused_1])
                        pool_max_rf[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4, vrv0_rv1_fused_1] = T.float32(-3.4028234663852886e+38)
                for rv0_rv1_fused_0 in range(T.int64(1)):
                    for rv0_rv1_fused_1_fused in T.vectorized(T.int64(9)):
                        with T.block("pool_max_rf_update"):
                            vrv0_rv1_fused_1 = T.axis.spatial(T.int64(9), rv0_rv1_fused_1_fused)
                            v_ax0 = T.axis.spatial(T.int64(1), T.int64(0))
                            v_ax1, v_ax2, v_ax3, v_ax4, vrv0_rv1_fused_0 = T.axis.remap("SSSSR", [ax0_ax1_fused_fused, ax2, ax3, ax4, rv0_rv1_fused_0])
                            T.reads(pool_max_rf[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4, vrv0_rv1_fused_1], pad_temp[v_ax0, v_ax1, v_ax2 * T.int64(2) + (vrv0_rv1_fused_0 * T.int64(9) + vrv0_rv1_fused_1) // T.int64(3), v_ax3 * T.int64(2) + (vrv0_rv1_fused_0 * T.int64(9) + vrv0_rv1_fused_1) % T.int64(3), v_ax4])
                            T.writes(pool_max_rf[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4, vrv0_rv1_fused_1])
                            pool_max_rf[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4, vrv0_rv1_fused_1] = T.max(pool_max_rf[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4, vrv0_rv1_fused_1], pad_temp[v_ax0, v_ax1, v_ax2 * T.int64(2) + (vrv0_rv1_fused_0 * T.int64(9) + vrv0_rv1_fused_1) // T.int64(3), v_ax3 * T.int64(2) + (vrv0_rv1_fused_0 * T.int64(9) + vrv0_rv1_fused_1) % T.int64(3), v_ax4])
        for ax0_ax1_ax2_fused in T.parallel(T.int64(1344), annotations={"pragma_auto_unroll_max_step": 512, "pragma_unroll_explicit": 1}):
            for ax3, ax4 in T.grid(T.int64(56), T.int64(4)):
                with T.block("pool_max_init"):
                    v_ax0 = T.axis.spatial(T.int64(1), T.int64(0))
                    v_ax1 = T.axis.spatial(T.int64(24), ax0_ax1_ax2_fused // T.int64(56))
                    v_ax2 = T.axis.spatial(T.int64(56), ax0_ax1_ax2_fused % T.int64(56))
                    v_ax3, v_ax4 = T.axis.remap("SS", [ax3, ax4])
                    T.reads()
                    T.writes(pool_max[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                    T.block_attr({"meta_schedule.random_compute_producer": 1})
                    pool_max[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.float32(-3.4028234663852886e+38)
                for rv0_rv1_fused_1 in range(T.int64(9)):
                    with T.block("pool_max_update"):
                        vrv0_rv1_fused_1 = T.axis.reduce(T.int64(9), rv0_rv1_fused_1)
                        v_ax0 = T.axis.spatial(T.int64(1), T.int64(0))
                        v_ax1 = T.axis.spatial(T.int64(24), ax0_ax1_ax2_fused // T.int64(56))
                        v_ax2 = T.axis.spatial(T.int64(56), ax0_ax1_ax2_fused % T.int64(56))
                        v_ax3, v_ax4 = T.axis.remap("SS", [ax3, ax4])
                        T.reads(pool_max[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], pool_max_rf[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4, vrv0_rv1_fused_1])
                        T.writes(pool_max[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                        T.block_attr({"meta_schedule.random_compute_producer": 1})
                        pool_max[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.max(pool_max[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], pool_max_rf[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4, vrv0_rv1_fused_1])
b0 = sch.get_block(name="pad_temp", func_name="main")
b1 = sch.get_block(name="pool_max", func_name="main")
b2 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b1, ann_key="schedule_rule")
l3, l4, l5, l6, l7, l8, l9 = sch.get_loops(block=b1)
l10 = sch.fuse(l8, l9, preserve_unit_iters=True)
v11, v12 = sch.sample_perfect_tile(loop=l10, n=2, max_innermost_factor=64, decision=[1, 9])
l13, l14 = sch.split(loop=l10, factors=[v11, v12], preserve_unit_iters=True)
b15 = sch.rfactor(loop=l14, factor_axis=5)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.random_compute_producer", ann_val=1)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.vectorize", ann_val=64)
v16 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.unroll_explicit", ann_val=v16)
l17 = sch.sample_compute_location(block=b0, decision=1)
sch.compute_at(block=b0, loop=l17, preserve_unit_loops=True, index=-1)
sch.enter_postproc()
b18 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b18, ann_key="meta_schedule.parallel")
sch.unannotate(block_or_loop=b18, ann_key="meta_schedule.vectorize")
sch.unannotate(block_or_loop=b18, ann_key="meta_schedule.unroll_explicit")
b19, b20, b21 = sch.get_child_blocks(b18)
l22, l23, l24, l25, l26, l27, l28 = sch.get_loops(block=b19)
l29 = sch.fuse(l22, l23, preserve_unit_iters=True)
sch.parallel(loop=l29)
l30 = sch.fuse(l28, preserve_unit_iters=True)
sch.vectorize(loop=l30)
l31, l32, l33, l34, l35, l36 = sch.get_loops(block=b20)
l37 = sch.fuse(l31, preserve_unit_iters=True)
sch.parallel(loop=l37)
l38 = sch.fuse(l36, preserve_unit_iters=True)
sch.vectorize(loop=l38)
sch.annotate(block_or_loop=l37, ann_key="pragma_auto_unroll_max_step", ann_val=512)
sch.annotate(block_or_loop=l37, ann_key="pragma_unroll_explicit", ann_val=1)
l39, l40, l41, l42, l43, l44 = sch.get_loops(block=b21)
l45 = sch.fuse(l39, l40, l41, preserve_unit_iters=True)
sch.parallel(loop=l45)
sch.annotate(block_or_loop=l45, ann_key="pragma_auto_unroll_max_step", ann_val=512)
sch.annotate(block_or_loop=l45, ann_key="pragma_unroll_explicit", ann_val=1)
b46 = sch.get_block(name="pool_max_rf", func_name="main")
l47, l48, l49, l50, l51, l52 = sch.get_loops(block=b46)
b53 = sch.decompose_reduction(block=b46, loop=l51)
b54 = sch.get_block(name="pool_max", func_name="main")
l55, l56, l57, l58 = sch.get_loops(block=b54)
b59 = sch.decompose_reduction(block=b54, loop=l58)
2024-04-29 05:12:08 [INFO] [task_scheduler.cc:131] [Task #84: fused_nn_max_pool2d] Trial #38: GFLOPs: 23.0249. Time: 117.6773 us. Best GFLOPs: 69.4767
2024-04-29 05:12:08 [INFO] [task_scheduler.cc:131] [Task #84: fused_nn_max_pool2d] Trial #39: GFLOPs: 19.1059. Time: 141.8152 us. Best GFLOPs: 69.4767
2024-04-29 05:12:08 [INFO] [task_scheduler.cc:131] [Task #84: fused_nn_max_pool2d] Trial #40: GFLOPs: 23.6209. Time: 114.7081 us. Best GFLOPs: 69.4767
2024-04-29 05:12:08 [INFO] [task_scheduler.cc:131] [Task #84: fused_nn_max_pool2d] Trial #41: GFLOPs: 11.6582. Time: 232.4117 us. Best GFLOPs: 69.4767
2024-04-29 05:12:08 [INFO] [task_scheduler.cc:131] [Task #84: fused_nn_max_pool2d] Trial #42: GFLOPs: 28.6446. Time: 94.5904 us. Best GFLOPs: 69.4767
2024-04-29 05:12:08 [INFO] [task_scheduler.cc:131] [Task #84: fused_nn_max_pool2d] Trial #43: GFLOPs: 29.0311. Time: 93.3311 us. Best GFLOPs: 69.4767
2024-04-29 05:12:08 [INFO] [task_scheduler.cc:131] [Task #84: fused_nn_max_pool2d] Trial #44: GFLOPs: 18.7334. Time: 144.6351 us. Best GFLOPs: 69.4767
2024-04-29 05:12:08 [INFO] [task_scheduler.cc:131] [Task #84: fused_nn_max_pool2d] Trial #45: GFLOPs: 9.2055. Time: 294.3368 us. Best GFLOPs: 69.4767
2024-04-29 05:12:08 [INFO] [task_scheduler.cc:131] [Task #84: fused_nn_max_pool2d] Trial #46: GFLOPs: 15.6029. Time: 173.6538 us. Best GFLOPs: 69.4767
2024-04-29 05:12:08 [INFO] [task_scheduler.cc:131] [Task #84: fused_nn_max_pool2d] Trial #47: GFLOPs: 17.7398. Time: 152.7361 us. Best GFLOPs: 69.4767
2024-04-29 05:12:08 [INFO] [task_scheduler.cc:131] [Task #84: fused_nn_max_pool2d] Trial #48: GFLOPs: 14.7036. Time: 184.2749 us. Best GFLOPs: 69.4767
2024-04-29 05:12:08 [INFO] [task_scheduler.cc:131] [Task #84: fused_nn_max_pool2d] Trial #49: GFLOPs: 5.3813. Time: 503.5051 us. Best GFLOPs: 69.4767
2024-04-29 05:12:08 [INFO] [task_scheduler.cc:131] [Task #84: fused_nn_max_pool2d] Trial #50: GFLOPs: 29.0455. Time: 93.2847 us. Best GFLOPs: 69.4767
2024-04-29 05:12:08 [INFO] [task_scheduler.cc:131] [Task #84: fused_nn_max_pool2d] Trial #51: GFLOPs: 9.2097. Time: 294.1997 us. Best GFLOPs: 69.4767
2024-04-29 05:12:08 [INFO] [task_scheduler.cc:131] [Task #84: fused_nn_max_pool2d] Trial #52: GFLOPs: 10.7071. Time: 253.0573 us. Best GFLOPs: 69.4767
2024-04-29 05:12:08 [INFO] [task_scheduler.cc:131] [Task #84: fused_nn_max_pool2d] Trial #53: GFLOPs: 15.3306. Time: 176.7384 us. Best GFLOPs: 69.4767
2024-04-29 05:12:08 [INFO] [task_scheduler.cc:131] [Task #84: fused_nn_max_pool2d] Trial #54: GFLOPs: 23.3590. Time: 115.9941 us. Best GFLOPs: 69.4767
2024-04-29 05:12:08 [INFO] [task_scheduler.cc:131] [Task #84: fused_nn_max_pool2d] Trial #55: GFLOPs: 8.8954. Time: 304.5973 us. Best GFLOPs: 69.4767
2024-04-29 05:12:08 [INFO] [task_scheduler.cc:131] [Task #84: fused_nn_max_pool2d] Trial #56: GFLOPs: 26.1756. Time: 103.5124 us. Best GFLOPs: 69.4767
2024-04-29 05:12:08 [INFO] [task_scheduler.cc:131] [Task #84: fused_nn_max_pool2d] Trial #57: GFLOPs: 6.3198. Time: 428.7294 us. Best GFLOPs: 69.4767
2024-04-29 05:12:08 [INFO] [task_scheduler.cc:131] [Task #84: fused_nn_max_pool2d] Trial #58: GFLOPs: 16.3426. Time: 165.7942 us. Best GFLOPs: 69.4767
2024-04-29 05:12:08 [INFO] [task_scheduler.cc:131] [Task #84: fused_nn_max_pool2d] Trial #59: GFLOPs: 21.2053. Time: 127.7749 us. Best GFLOPs: 69.4767
2024-04-29 05:12:08 [INFO] [task_scheduler.cc:131] [Task #84: fused_nn_max_pool2d] Trial #60: GFLOPs: 9.7324. Time: 278.3990 us. Best GFLOPs: 69.4767
2024-04-29 05:12:08 [INFO] [task_scheduler.cc:131] [Task #84: fused_nn_max_pool2d] Trial #61: GFLOPs: 23.4323. Time: 115.6311 us. Best GFLOPs: 69.4767
2024-04-29 05:12:08 [INFO] [task_scheduler.cc:131] [Task #84: fused_nn_max_pool2d] Trial #62: GFLOPs: 14.8262. Time: 182.7512 us. Best GFLOPs: 69.4767
2024-04-29 05:12:08 [INFO] [task_scheduler.cc:131] [Task #84: fused_nn_max_pool2d] Trial #63: GFLOPs: 34.8646. Time: 77.7150 us. Best GFLOPs: 69.4767
