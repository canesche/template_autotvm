2024-04-29 02:33:25 [INFO] [task_scheduler.cc:160] Initializing Task #78: "fused_nn_contrib_conv2d_NCHWc_add_nn_relu_75"
2024-04-29 02:33:25 [INFO] [task_scheduler.cc:35] 
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(48), T.int64(56), T.int64(56), T.int64(4)), "float32"), p1: T.Buffer((T.int64(48), T.int64(48), T.int64(1), T.int64(1), T.int64(4), T.int64(4)), "float32"), p2: T.Buffer((T.int64(1), T.int64(48), T.int64(1), T.int64(1), T.int64(4)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(48), T.int64(56), T.int64(56), T.int64(4)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        conv2d_NCHWc = T.alloc_buffer((T.int64(1), T.int64(48), T.int64(56), T.int64(56), T.int64(4)))
        T_add = T.alloc_buffer((T.int64(1), T.int64(48), T.int64(56), T.int64(56), T.int64(4)))
        for n, oc_chunk, oh, ow, oc_block, ic, kh, kw in T.grid(T.int64(1), T.int64(48), T.int64(56), T.int64(56), T.int64(4), T.int64(192), T.int64(1), T.int64(1)):
            with T.block("conv2d_NCHWc"):
                v_n, v_oc_chunk, v_oh, v_ow, v_oc_block, v_ic, v_kh, v_kw = T.axis.remap("SSSSSRRR", [n, oc_chunk, oh, ow, oc_block, ic, kh, kw])
                T.reads(p0[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)], p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block])
                T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                with T.init():
                    conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = T.float32(0)
                conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] + p0[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)] * p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block]
        for ax0, ax1, ax2, ax3, ax4 in T.grid(T.int64(1), T.int64(48), T.int64(56), T.int64(56), T.int64(4)):
            with T.block("T_add"):
                v_ax0, v_ax1, v_ax2, v_ax3, v_ax4 = T.axis.remap("SSSSS", [ax0, ax1, ax2, ax3, ax4])
                T.reads(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4])
                T.writes(T_add[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                T_add[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] + p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4]
        for ax0, ax1, ax2, ax3, ax4 in T.grid(T.int64(1), T.int64(48), T.int64(56), T.int64(56), T.int64(4)):
            with T.block("T_relu"):
                v_ax0, v_ax1, v_ax2, v_ax3, v_ax4 = T.axis.remap("SSSSS", [ax0, ax1, ax2, ax3, ax4])
                T.reads(T_add[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                T.writes(T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.max(T_add[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], T.float32(0))
2024-04-29 02:33:25 [INFO] [task_scheduler.cc:164] Total 3 design space(s) generated
2024-04-29 02:33:25 [INFO] [task_scheduler.cc:170] Design space #0:
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(48), T.int64(56), T.int64(56), T.int64(4)), "float32"), p1: T.Buffer((T.int64(48), T.int64(48), T.int64(1), T.int64(1), T.int64(4), T.int64(4)), "float32"), p2: T.Buffer((T.int64(1), T.int64(48), T.int64(1), T.int64(1), T.int64(4)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(48), T.int64(56), T.int64(56), T.int64(4)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        with T.block("root"):
            T.reads()
            T.writes()
            T.block_attr({"meta_schedule.parallel": 768, "meta_schedule.unroll_explicit": 0, "meta_schedule.vectorize": 64})
            conv2d_NCHWc = T.alloc_buffer((T.int64(1), T.int64(48), T.int64(56), T.int64(56), T.int64(4)))
            for n_0, oc_chunk_0, oh_0, ow_0, oc_block_0, n_1, oc_chunk_1, oh_1, ow_1, oc_block_1, ic_0, kh_0, kw_0, n_2, oc_chunk_2, oh_2, ow_2, oc_block_2, ic_1, kh_1, kw_1, n_3, oc_chunk_3, oh_3, ow_3, oc_block_3 in T.grid(T.int64(1), T.int64(4), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(3), T.int64(2), T.int64(56), T.int64(1), T.int64(24), T.int64(1), T.int64(1), T.int64(1), T.int64(4), T.int64(4), T.int64(1), T.int64(2), T.int64(8), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(7), T.int64(1), T.int64(2)):
                with T.block("conv2d_NCHWc"):
                    v_n = T.axis.spatial(T.int64(1), n_0 + n_1 + n_2 + n_3)
                    v_oc_chunk = T.axis.spatial(T.int64(48), oc_chunk_0 * T.int64(12) + oc_chunk_1 * T.int64(4) + oc_chunk_2 + oc_chunk_3)
                    v_oh = T.axis.spatial(T.int64(56), oh_0 * T.int64(56) + oh_1 * T.int64(28) + oh_2 * T.int64(7) + oh_3)
                    v_ow = T.axis.spatial(T.int64(56), ow_0 * T.int64(56) + ow_1 + ow_2 + ow_3)
                    v_oc_block = T.axis.spatial(T.int64(4), oc_block_0 * T.int64(4) + oc_block_1 * T.int64(4) + oc_block_2 * T.int64(2) + oc_block_3)
                    v_ic = T.axis.reduce(T.int64(192), ic_0 * T.int64(8) + ic_1)
                    v_kh = T.axis.reduce(T.int64(1), kh_0 + kh_1)
                    v_kw = T.axis.reduce(T.int64(1), kw_0 + kw_1)
                    T.reads(p0[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)], p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block])
                    T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                    T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                    with T.init():
                        conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = T.float32(0)
                    conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] + p0[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)] * p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block]
            for ax0, ax1, ax2, ax3, ax4 in T.grid(T.int64(1), T.int64(48), T.int64(56), T.int64(56), T.int64(4)):
                with T.block("T_relu"):
                    v_ax0, v_ax1, v_ax2, v_ax3, v_ax4 = T.axis.remap("SSSSS", [ax0, ax1, ax2, ax3, ax4])
                    T.reads(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4])
                    T.writes(T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                    T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.max(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] + p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4], T.float32(0))
b0 = sch.get_block(name="conv2d_NCHWc", func_name="main")
b1 = sch.get_block(name="T_add", func_name="main")
b2 = sch.get_block(name="root", func_name="main")
sch.compute_inline(block=b1)
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.tiling_structure", ann_val="SSRSRS")
l3, l4, l5, l6, l7, l8, l9, l10 = sch.get_loops(block=b0)
v11, v12, v13, v14 = sch.sample_perfect_tile(loop=l3, n=4, max_innermost_factor=64, decision=[1, 1, 1, 1])
l15, l16, l17, l18 = sch.split(loop=l3, factors=[v11, v12, v13, v14], preserve_unit_iters=True)
v19, v20, v21, v22 = sch.sample_perfect_tile(loop=l4, n=4, max_innermost_factor=64, decision=[4, 3, 4, 1])
l23, l24, l25, l26 = sch.split(loop=l4, factors=[v19, v20, v21, v22], preserve_unit_iters=True)
v27, v28, v29, v30 = sch.sample_perfect_tile(loop=l5, n=4, max_innermost_factor=64, decision=[1, 2, 4, 7])
l31, l32, l33, l34 = sch.split(loop=l5, factors=[v27, v28, v29, v30], preserve_unit_iters=True)
v35, v36, v37, v38 = sch.sample_perfect_tile(loop=l6, n=4, max_innermost_factor=64, decision=[1, 56, 1, 1])
l39, l40, l41, l42 = sch.split(loop=l6, factors=[v35, v36, v37, v38], preserve_unit_iters=True)
v43, v44, v45, v46 = sch.sample_perfect_tile(loop=l7, n=4, max_innermost_factor=64, decision=[1, 1, 2, 2])
l47, l48, l49, l50 = sch.split(loop=l7, factors=[v43, v44, v45, v46], preserve_unit_iters=True)
v51, v52 = sch.sample_perfect_tile(loop=l8, n=2, max_innermost_factor=64, decision=[24, 8])
l53, l54 = sch.split(loop=l8, factors=[v51, v52], preserve_unit_iters=True)
v55, v56 = sch.sample_perfect_tile(loop=l9, n=2, max_innermost_factor=64, decision=[1, 1])
l57, l58 = sch.split(loop=l9, factors=[v55, v56], preserve_unit_iters=True)
v59, v60 = sch.sample_perfect_tile(loop=l10, n=2, max_innermost_factor=64, decision=[1, 1])
l61, l62 = sch.split(loop=l10, factors=[v59, v60], preserve_unit_iters=True)
sch.reorder(l15, l23, l31, l39, l47, l16, l24, l32, l40, l48, l53, l57, l61, l17, l25, l33, l41, l49, l54, l58, l62, l18, l26, l34, l42, l50)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.vectorize", ann_val=64)
v63 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=0)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.unroll_explicit", ann_val=v63)
2024-04-29 02:33:25 [INFO] [task_scheduler.cc:170] Design space #1:
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(48), T.int64(56), T.int64(56), T.int64(4)), "float32"), p1: T.Buffer((T.int64(48), T.int64(48), T.int64(1), T.int64(1), T.int64(4), T.int64(4)), "float32"), p2: T.Buffer((T.int64(1), T.int64(48), T.int64(1), T.int64(1), T.int64(4)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(48), T.int64(56), T.int64(56), T.int64(4)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        with T.block("root"):
            T.reads()
            T.writes()
            T.block_attr({"meta_schedule.parallel": 768, "meta_schedule.unroll_explicit": 16, "meta_schedule.vectorize": 64})
            conv2d_NCHWc = T.alloc_buffer((T.int64(1), T.int64(48), T.int64(56), T.int64(56), T.int64(4)))
            for n_0, oc_chunk_0, oh_0, ow_0, oc_block_0, n_1, oc_chunk_1, oh_1, ow_1, oc_block_1 in T.grid(T.int64(1), T.int64(4), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(3), T.int64(2), T.int64(56), T.int64(1)):
                for ic_0, kh_0, kw_0, n_2, oc_chunk_2, oh_2, ow_2, oc_block_2, ic_1, kh_1, kw_1, n_3, oc_chunk_3, oh_3, ow_3, oc_block_3 in T.grid(T.int64(24), T.int64(1), T.int64(1), T.int64(1), T.int64(4), T.int64(4), T.int64(1), T.int64(2), T.int64(8), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(7), T.int64(1), T.int64(2)):
                    with T.block("conv2d_NCHWc"):
                        v_n = T.axis.spatial(T.int64(1), n_0 + n_1 + n_2 + n_3)
                        v_oc_chunk = T.axis.spatial(T.int64(48), oc_chunk_0 * T.int64(12) + oc_chunk_1 * T.int64(4) + oc_chunk_2 + oc_chunk_3)
                        v_oh = T.axis.spatial(T.int64(56), oh_0 * T.int64(56) + oh_1 * T.int64(28) + oh_2 * T.int64(7) + oh_3)
                        v_ow = T.axis.spatial(T.int64(56), ow_0 * T.int64(56) + ow_1 + ow_2 + ow_3)
                        v_oc_block = T.axis.spatial(T.int64(4), oc_block_0 * T.int64(4) + oc_block_1 * T.int64(4) + oc_block_2 * T.int64(2) + oc_block_3)
                        v_ic = T.axis.reduce(T.int64(192), ic_0 * T.int64(8) + ic_1)
                        v_kh = T.axis.reduce(T.int64(1), kh_0 + kh_1)
                        v_kw = T.axis.reduce(T.int64(1), kw_0 + kw_1)
                        T.reads(p0[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)], p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block])
                        T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                        T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                        with T.init():
                            conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = T.float32(0)
                        conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] + p0[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)] * p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block]
                for ax0, ax1, ax2, ax3, ax4 in T.grid(T.int64(1), T.int64(4), T.int64(28), T.int64(1), T.int64(4)):
                    with T.block("T_relu"):
                        v_ax0 = T.axis.spatial(T.int64(1), ax0)
                        v_ax1 = T.axis.spatial(T.int64(48), oc_chunk_0 * T.int64(12) + oc_chunk_1 * T.int64(4) + ax1)
                        v_ax2 = T.axis.spatial(T.int64(56), oh_1 * T.int64(28) + ax2)
                        v_ax3 = T.axis.spatial(T.int64(56), ow_1 + ax3)
                        v_ax4 = T.axis.spatial(T.int64(4), ax4)
                        T.reads(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4])
                        T.writes(T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                        T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.max(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] + p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4], T.float32(0))
b0 = sch.get_block(name="conv2d_NCHWc", func_name="main")
b1 = sch.get_block(name="T_add", func_name="main")
b2 = sch.get_block(name="root", func_name="main")
sch.compute_inline(block=b1)
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.tiling_structure", ann_val="SSRSRS")
l3, l4, l5, l6, l7, l8, l9, l10 = sch.get_loops(block=b0)
v11, v12, v13, v14 = sch.sample_perfect_tile(loop=l3, n=4, max_innermost_factor=64, decision=[1, 1, 1, 1])
l15, l16, l17, l18 = sch.split(loop=l3, factors=[v11, v12, v13, v14], preserve_unit_iters=True)
v19, v20, v21, v22 = sch.sample_perfect_tile(loop=l4, n=4, max_innermost_factor=64, decision=[4, 3, 4, 1])
l23, l24, l25, l26 = sch.split(loop=l4, factors=[v19, v20, v21, v22], preserve_unit_iters=True)
v27, v28, v29, v30 = sch.sample_perfect_tile(loop=l5, n=4, max_innermost_factor=64, decision=[1, 2, 4, 7])
l31, l32, l33, l34 = sch.split(loop=l5, factors=[v27, v28, v29, v30], preserve_unit_iters=True)
v35, v36, v37, v38 = sch.sample_perfect_tile(loop=l6, n=4, max_innermost_factor=64, decision=[1, 56, 1, 1])
l39, l40, l41, l42 = sch.split(loop=l6, factors=[v35, v36, v37, v38], preserve_unit_iters=True)
v43, v44, v45, v46 = sch.sample_perfect_tile(loop=l7, n=4, max_innermost_factor=64, decision=[1, 1, 2, 2])
l47, l48, l49, l50 = sch.split(loop=l7, factors=[v43, v44, v45, v46], preserve_unit_iters=True)
v51, v52 = sch.sample_perfect_tile(loop=l8, n=2, max_innermost_factor=64, decision=[24, 8])
l53, l54 = sch.split(loop=l8, factors=[v51, v52], preserve_unit_iters=True)
v55, v56 = sch.sample_perfect_tile(loop=l9, n=2, max_innermost_factor=64, decision=[1, 1])
l57, l58 = sch.split(loop=l9, factors=[v55, v56], preserve_unit_iters=True)
v59, v60 = sch.sample_perfect_tile(loop=l10, n=2, max_innermost_factor=64, decision=[1, 1])
l61, l62 = sch.split(loop=l10, factors=[v59, v60], preserve_unit_iters=True)
sch.reorder(l15, l23, l31, l39, l47, l16, l24, l32, l40, l48, l53, l57, l61, l17, l25, l33, l41, l49, l54, l58, l62, l18, l26, l34, l42, l50)
b63, = sch.get_consumers(block=b0)
sch.reverse_compute_at(block=b63, loop=l48, preserve_unit_loops=True, index=-1)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.vectorize", ann_val=64)
v64 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=1)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.unroll_explicit", ann_val=v64)
2024-04-29 02:33:25 [INFO] [task_scheduler.cc:170] Design space #2:
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(48), T.int64(56), T.int64(56), T.int64(4)), "float32"), p1: T.Buffer((T.int64(48), T.int64(48), T.int64(1), T.int64(1), T.int64(4), T.int64(4)), "float32"), p2: T.Buffer((T.int64(1), T.int64(48), T.int64(1), T.int64(1), T.int64(4)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(48), T.int64(56), T.int64(56), T.int64(4)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        with T.block("root"):
            T.reads()
            T.writes()
            T.block_attr({"meta_schedule.parallel": 768, "meta_schedule.unroll_explicit": 512, "meta_schedule.vectorize": 64})
            conv2d_NCHWc = T.alloc_buffer((T.int64(1), T.int64(48), T.int64(56), T.int64(56), T.int64(4)))
            for n_0, oc_chunk_0, oh_0, ow_0, oc_block_0 in T.grid(T.int64(1), T.int64(4), T.int64(1), T.int64(1), T.int64(1)):
                for n_1, oc_chunk_1, oh_1, ow_1, oc_block_1, ic_0, kh_0, kw_0, n_2, oc_chunk_2, oh_2, ow_2, oc_block_2, ic_1, kh_1, kw_1, n_3, oc_chunk_3, oh_3, ow_3, oc_block_3 in T.grid(T.int64(1), T.int64(3), T.int64(2), T.int64(56), T.int64(1), T.int64(24), T.int64(1), T.int64(1), T.int64(1), T.int64(4), T.int64(4), T.int64(1), T.int64(2), T.int64(8), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(7), T.int64(1), T.int64(2)):
                    with T.block("conv2d_NCHWc"):
                        v_n = T.axis.spatial(T.int64(1), n_0 + n_1 + n_2 + n_3)
                        v_oc_chunk = T.axis.spatial(T.int64(48), oc_chunk_0 * T.int64(12) + oc_chunk_1 * T.int64(4) + oc_chunk_2 + oc_chunk_3)
                        v_oh = T.axis.spatial(T.int64(56), oh_0 * T.int64(56) + oh_1 * T.int64(28) + oh_2 * T.int64(7) + oh_3)
                        v_ow = T.axis.spatial(T.int64(56), ow_0 * T.int64(56) + ow_1 + ow_2 + ow_3)
                        v_oc_block = T.axis.spatial(T.int64(4), oc_block_0 * T.int64(4) + oc_block_1 * T.int64(4) + oc_block_2 * T.int64(2) + oc_block_3)
                        v_ic = T.axis.reduce(T.int64(192), ic_0 * T.int64(8) + ic_1)
                        v_kh = T.axis.reduce(T.int64(1), kh_0 + kh_1)
                        v_kw = T.axis.reduce(T.int64(1), kw_0 + kw_1)
                        T.reads(p0[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)], p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block])
                        T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                        T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                        with T.init():
                            conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = T.float32(0)
                        conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] + p0[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)] * p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block]
                for ax0, ax1, ax2, ax3, ax4 in T.grid(T.int64(1), T.int64(12), T.int64(56), T.int64(56), T.int64(4)):
                    with T.block("T_relu"):
                        v_ax0 = T.axis.spatial(T.int64(1), ax0)
                        v_ax1 = T.axis.spatial(T.int64(48), oc_chunk_0 * T.int64(12) + ax1)
                        v_ax2, v_ax3, v_ax4 = T.axis.remap("SSS", [ax2, ax3, ax4])
                        T.reads(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4])
                        T.writes(T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                        T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.max(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] + p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4], T.float32(0))
b0 = sch.get_block(name="conv2d_NCHWc", func_name="main")
b1 = sch.get_block(name="T_add", func_name="main")
b2 = sch.get_block(name="root", func_name="main")
sch.compute_inline(block=b1)
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.tiling_structure", ann_val="SSRSRS")
l3, l4, l5, l6, l7, l8, l9, l10 = sch.get_loops(block=b0)
v11, v12, v13, v14 = sch.sample_perfect_tile(loop=l3, n=4, max_innermost_factor=64, decision=[1, 1, 1, 1])
l15, l16, l17, l18 = sch.split(loop=l3, factors=[v11, v12, v13, v14], preserve_unit_iters=True)
v19, v20, v21, v22 = sch.sample_perfect_tile(loop=l4, n=4, max_innermost_factor=64, decision=[4, 3, 4, 1])
l23, l24, l25, l26 = sch.split(loop=l4, factors=[v19, v20, v21, v22], preserve_unit_iters=True)
v27, v28, v29, v30 = sch.sample_perfect_tile(loop=l5, n=4, max_innermost_factor=64, decision=[1, 2, 4, 7])
l31, l32, l33, l34 = sch.split(loop=l5, factors=[v27, v28, v29, v30], preserve_unit_iters=True)
v35, v36, v37, v38 = sch.sample_perfect_tile(loop=l6, n=4, max_innermost_factor=64, decision=[1, 56, 1, 1])
l39, l40, l41, l42 = sch.split(loop=l6, factors=[v35, v36, v37, v38], preserve_unit_iters=True)
v43, v44, v45, v46 = sch.sample_perfect_tile(loop=l7, n=4, max_innermost_factor=64, decision=[1, 1, 2, 2])
l47, l48, l49, l50 = sch.split(loop=l7, factors=[v43, v44, v45, v46], preserve_unit_iters=True)
v51, v52 = sch.sample_perfect_tile(loop=l8, n=2, max_innermost_factor=64, decision=[24, 8])
l53, l54 = sch.split(loop=l8, factors=[v51, v52], preserve_unit_iters=True)
v55, v56 = sch.sample_perfect_tile(loop=l9, n=2, max_innermost_factor=64, decision=[1, 1])
l57, l58 = sch.split(loop=l9, factors=[v55, v56], preserve_unit_iters=True)
v59, v60 = sch.sample_perfect_tile(loop=l10, n=2, max_innermost_factor=64, decision=[1, 1])
l61, l62 = sch.split(loop=l10, factors=[v59, v60], preserve_unit_iters=True)
sch.reorder(l15, l23, l31, l39, l47, l16, l24, l32, l40, l48, l53, l57, l61, l17, l25, l33, l41, l49, l54, l58, l62, l18, l26, l34, l42, l50)
b63, = sch.get_consumers(block=b0)
sch.reverse_compute_at(block=b63, loop=l47, preserve_unit_loops=True, index=-1)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.vectorize", ann_val=64)
v64 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.unroll_explicit", ann_val=v64)
2024-04-29 04:36:37 [INFO] [evolutionary_search.cc:713] Generating candidates......
2024-04-29 04:36:37 [INFO] [evolutionary_search.cc:715] Picked top 0 candidate(s) from database
2024-04-29 04:36:40 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x114593e8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0xd40b908)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0xb9aa2f8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x12988838)]: 0 failure(s)
2024-04-29 04:36:40 [INFO] [evolutionary_search.cc:723] Sampled 512 candidate(s)
2024-04-29 04:36:42 [INFO] [evolutionary_search.cc:621] Evolve iter #0 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x114593e8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0xd40b908)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0xb9aa2f8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x12988838)]: 0 failure(s)
2024-04-29 04:36:46 [INFO] [evolutionary_search.cc:621] Evolve iter #1 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x114593e8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0xd40b908)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0xb9aa2f8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x12988838)]: 0 failure(s)
2024-04-29 04:36:49 [INFO] [evolutionary_search.cc:621] Evolve iter #2 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x114593e8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0xd40b908)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0xb9aa2f8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x12988838)]: 0 failure(s)
2024-04-29 04:36:52 [INFO] [evolutionary_search.cc:621] Evolve iter #3 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x114593e8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0xd40b908)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0xb9aa2f8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x12988838)]: 0 failure(s)
2024-04-29 04:36:53 [INFO] [evolutionary_search.cc:649] Scores of the best 64 candidates:
[1 : 16]:	0.9986  0.9964  0.9962  0.9961  0.9956  0.9954  0.9952  0.9940  0.9929  0.9924  0.9922  0.9918  0.9912  0.9906  0.9905  0.9905
[17 : 32]:	0.9897  0.9894  0.9886  0.9886  0.9870  0.9863  0.9862  0.9860  0.9855  0.9842  0.9837  0.9830  0.9827  0.9824  0.9813  0.9808
[33 : 48]:	0.9799  0.9787  0.9786  0.9772  0.9765  0.9761  0.9754  0.9753  0.9735  0.9735  0.9733  0.9732  0.9725  0.9725  0.9724  0.9723
[49 : 64]:	0.9711  0.9705  0.9701  0.9700  0.9695  0.9690  0.9689  0.9686  0.9676  0.9670  0.9665  0.9665  0.9649  0.9648  0.9645  0.9644
2024-04-29 04:36:53 [INFO] [evolutionary_search.cc:727] Got 64 candidate(s) with evolutionary search
2024-04-29 04:36:53 [INFO] [evolutionary_search.cc:730] Sending 64 candidates(s) for measurement
2024-04-29 05:11:12 [INFO] [task_scheduler.cc:131] [Task #78: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_75] Trial #1: GFLOPs: 72.1684. Time: 3220.4548 us. Best GFLOPs: 72.1684
2024-04-29 05:11:12 [INFO] [task_scheduler.cc:131] [Task #78: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_75] Trial #2: GFLOPs: 72.0547. Time: 3225.5374 us. Best GFLOPs: 72.1684
2024-04-29 05:11:12 [INFO] [task_scheduler.cc:131] [Task #78: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_75] Trial #3: GFLOPs: 5.5027. Time: 42236.5860 us. Best GFLOPs: 72.1684
2024-04-29 05:11:12 [INFO] [task_scheduler.cc:131] [Task #78: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_75] Trial #4: GFLOPs: 13.9431. Time: 16668.8580 us. Best GFLOPs: 72.1684
2024-04-29 05:11:12 [INFO] [task_scheduler.cc:121] [Task #78: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_75] Trial #5: Error in building:
LocalBuilder: Timeout, killed after 30.0 seconds
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(48), T.int64(56), T.int64(56), T.int64(4)), "float32"), p1: T.Buffer((T.int64(48), T.int64(48), T.int64(1), T.int64(1), T.int64(4), T.int64(4)), "float32"), p2: T.Buffer((T.int64(1), T.int64(48), T.int64(1), T.int64(1), T.int64(4)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(48), T.int64(56), T.int64(56), T.int64(4)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        conv2d_NCHWc = T.alloc_buffer((T.int64(1), T.int64(48), T.int64(56), T.int64(56), T.int64(4)))
        for n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused in T.parallel(T.int64(512), annotations={"pragma_auto_unroll_max_step": 512, "pragma_unroll_explicit": 1}):
            for n_2_init, oc_chunk_2_init, oh_2_init, ow_2_init, oc_block_2_init, n_3_init, oc_chunk_3_init, oh_3_init, ow_3_init, oc_block_3_init in T.grid(T.int64(1), T.int64(6), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(7), T.int64(28), T.int64(1)):
                with T.block("conv2d_NCHWc_init"):
                    v_n = T.axis.spatial(T.int64(1), n_2_init + n_3_init)
                    v_oc_chunk = T.axis.spatial(T.int64(48), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused % T.int64(128) // T.int64(16) * T.int64(6) + oc_chunk_2_init + oc_chunk_3_init)
                    v_oh = T.axis.spatial(T.int64(56), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused // T.int64(256) * T.int64(28) + n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused % T.int64(16) // T.int64(4) * T.int64(7) + oh_2_init * T.int64(7) + oh_3_init)
                    v_ow = T.axis.spatial(T.int64(56), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused % T.int64(4) // T.int64(2) * T.int64(28) + ow_2_init * T.int64(28) + ow_3_init)
                    v_oc_block = T.axis.spatial(T.int64(4), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused % T.int64(256) // T.int64(128) * T.int64(2) + n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused % T.int64(2) + oc_block_2_init + oc_block_3_init)
                    T.reads()
                    T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                    T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                    conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = T.float32(0)
            for ic_0, kh_0, kw_0, n_2, oc_chunk_2, oh_2, ow_2, oc_block_2, ic_1, kh_1, kw_1, n_3, oc_chunk_3, oh_3, ow_3, oc_block_3 in T.grid(T.int64(48), T.int64(1), T.int64(1), T.int64(1), T.int64(6), T.int64(1), T.int64(1), T.int64(1), T.int64(4), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(7), T.int64(28), T.int64(1)):
                with T.block("conv2d_NCHWc_update"):
                    v_n = T.axis.spatial(T.int64(1), n_2 + n_3)
                    v_oc_chunk = T.axis.spatial(T.int64(48), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused % T.int64(128) // T.int64(16) * T.int64(6) + oc_chunk_2 + oc_chunk_3)
                    v_oh = T.axis.spatial(T.int64(56), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused // T.int64(256) * T.int64(28) + n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused % T.int64(16) // T.int64(4) * T.int64(7) + oh_2 * T.int64(7) + oh_3)
                    v_ow = T.axis.spatial(T.int64(56), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused % T.int64(4) // T.int64(2) * T.int64(28) + ow_2 * T.int64(28) + ow_3)
                    v_oc_block = T.axis.spatial(T.int64(4), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused % T.int64(256) // T.int64(128) * T.int64(2) + n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused % T.int64(2) + oc_block_2 + oc_block_3)
                    v_ic = T.axis.reduce(T.int64(192), ic_0 * T.int64(4) + ic_1)
                    v_kh = T.axis.reduce(T.int64(1), kh_0 + kh_1)
                    v_kw = T.axis.reduce(T.int64(1), kw_0 + kw_1)
                    T.reads(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block], p0[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)], p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block])
                    T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                    T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                    conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] + p0[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)] * p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block]
        for ax0_ax1_ax2_ax3_ax4_fused_0 in T.parallel(T.int64(9408)):
            for ax0_ax1_ax2_ax3_ax4_fused_1 in T.vectorized(T.int64(64)):
                with T.block("T_relu"):
                    v_ax0 = T.axis.spatial(T.int64(1), T.int64(0))
                    v_ax1 = T.axis.spatial(T.int64(48), (ax0_ax1_ax2_ax3_ax4_fused_0 * T.int64(64) + ax0_ax1_ax2_ax3_ax4_fused_1) // T.int64(12544))
                    v_ax2 = T.axis.spatial(T.int64(56), (ax0_ax1_ax2_ax3_ax4_fused_0 * T.int64(64) + ax0_ax1_ax2_ax3_ax4_fused_1) % T.int64(12544) // T.int64(224))
                    v_ax3 = T.axis.spatial(T.int64(56), (ax0_ax1_ax2_ax3_ax4_fused_0 * T.int64(64) + ax0_ax1_ax2_ax3_ax4_fused_1) % T.int64(224) // T.int64(4))
                    v_ax4 = T.axis.spatial(T.int64(4), (ax0_ax1_ax2_ax3_ax4_fused_0 * T.int64(64) + ax0_ax1_ax2_ax3_ax4_fused_1) % T.int64(4))
                    T.reads(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4])
                    T.writes(T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                    T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.max(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] + p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4], T.float32(0))
b0 = sch.get_block(name="conv2d_NCHWc", func_name="main")
b1 = sch.get_block(name="T_add", func_name="main")
b2 = sch.get_block(name="root", func_name="main")
sch.compute_inline(block=b1)
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.tiling_structure", ann_val="SSRSRS")
l3, l4, l5, l6, l7, l8, l9, l10 = sch.get_loops(block=b0)
v11, v12, v13, v14 = sch.sample_perfect_tile(loop=l3, n=4, max_innermost_factor=64, decision=[1, 1, 1, 1])
l15, l16, l17, l18 = sch.split(loop=l3, factors=[v11, v12, v13, v14], preserve_unit_iters=True)
v19, v20, v21, v22 = sch.sample_perfect_tile(loop=l4, n=4, max_innermost_factor=64, decision=[1, 8, 6, 1])
l23, l24, l25, l26 = sch.split(loop=l4, factors=[v19, v20, v21, v22], preserve_unit_iters=True)
v27, v28, v29, v30 = sch.sample_perfect_tile(loop=l5, n=4, max_innermost_factor=64, decision=[2, 4, 1, 7])
l31, l32, l33, l34 = sch.split(loop=l5, factors=[v27, v28, v29, v30], preserve_unit_iters=True)
v35, v36, v37, v38 = sch.sample_perfect_tile(loop=l6, n=4, max_innermost_factor=64, decision=[1, 2, 1, 28])
l39, l40, l41, l42 = sch.split(loop=l6, factors=[v35, v36, v37, v38], preserve_unit_iters=True)
v43, v44, v45, v46 = sch.sample_perfect_tile(loop=l7, n=4, max_innermost_factor=64, decision=[2, 2, 1, 1])
l47, l48, l49, l50 = sch.split(loop=l7, factors=[v43, v44, v45, v46], preserve_unit_iters=True)
v51, v52 = sch.sample_perfect_tile(loop=l8, n=2, max_innermost_factor=64, decision=[48, 4])
l53, l54 = sch.split(loop=l8, factors=[v51, v52], preserve_unit_iters=True)
v55, v56 = sch.sample_perfect_tile(loop=l9, n=2, max_innermost_factor=64, decision=[1, 1])
l57, l58 = sch.split(loop=l9, factors=[v55, v56], preserve_unit_iters=True)
v59, v60 = sch.sample_perfect_tile(loop=l10, n=2, max_innermost_factor=64, decision=[1, 1])
l61, l62 = sch.split(loop=l10, factors=[v59, v60], preserve_unit_iters=True)
sch.reorder(l15, l23, l31, l39, l47, l16, l24, l32, l40, l48, l53, l57, l61, l17, l25, l33, l41, l49, l54, l58, l62, l18, l26, l34, l42, l50)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.vectorize", ann_val=64)
v63 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.unroll_explicit", ann_val=v63)
sch.enter_postproc()
b64 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b64, ann_key="meta_schedule.parallel")
sch.unannotate(block_or_loop=b64, ann_key="meta_schedule.vectorize")
sch.unannotate(block_or_loop=b64, ann_key="meta_schedule.unroll_explicit")
b65, b66 = sch.get_child_blocks(b64)
l67, l68, l69, l70, l71, l72, l73, l74, l75, l76, l77, l78, l79, l80, l81, l82, l83, l84, l85, l86, l87, l88, l89, l90, l91, l92 = sch.get_loops(block=b65)
l93 = sch.fuse(l67, l68, l69, l70, l71, l72, l73, l74, l75, l76, preserve_unit_iters=True)
sch.parallel(loop=l93)
sch.annotate(block_or_loop=l93, ann_key="pragma_auto_unroll_max_step", ann_val=512)
sch.annotate(block_or_loop=l93, ann_key="pragma_unroll_explicit", ann_val=1)
l94, l95, l96, l97, l98 = sch.get_loops(block=b66)
l99 = sch.fuse(l94, l95, l96, l97, l98, preserve_unit_iters=True)
l100, l101 = sch.split(loop=l99, factors=[None, 64], preserve_unit_iters=True)
sch.parallel(loop=l100)
sch.vectorize(loop=l101)
b102 = sch.get_block(name="conv2d_NCHWc", func_name="main")
l103, l104, l105, l106, l107, l108, l109, l110, l111, l112, l113, l114, l115, l116, l117, l118, l119 = sch.get_loops(block=b102)
b120 = sch.decompose_reduction(block=b102, loop=l104)
2024-04-29 05:11:12 [INFO] [task_scheduler.cc:131] [Task #78: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_75] Trial #6: GFLOPs: 49.4184. Time: 4703.0072 us. Best GFLOPs: 72.1684
2024-04-29 05:11:12 [INFO] [task_scheduler.cc:131] [Task #78: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_75] Trial #7: GFLOPs: 4.6462. Time: 50022.3490 us. Best GFLOPs: 72.1684
2024-04-29 05:11:12 [INFO] [task_scheduler.cc:131] [Task #78: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_75] Trial #8: GFLOPs: 59.7779. Time: 3887.9807 us. Best GFLOPs: 72.1684
2024-04-29 05:11:12 [INFO] [task_scheduler.cc:131] [Task #78: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_75] Trial #9: GFLOPs: 136.6632. Time: 1700.6419 us. Best GFLOPs: 136.6632
2024-04-29 05:11:12 [INFO] [task_scheduler.cc:131] [Task #78: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_75] Trial #10: GFLOPs: 59.0748. Time: 3934.2526 us. Best GFLOPs: 136.6632
2024-04-29 05:11:12 [INFO] [task_scheduler.cc:131] [Task #78: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_75] Trial #11: GFLOPs: 36.4435. Time: 6377.4147 us. Best GFLOPs: 136.6632
2024-04-29 05:11:12 [INFO] [task_scheduler.cc:131] [Task #78: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_75] Trial #12: GFLOPs: 65.1352. Time: 3568.1980 us. Best GFLOPs: 136.6632
2024-04-29 05:11:12 [INFO] [task_scheduler.cc:131] [Task #78: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_75] Trial #13: GFLOPs: 90.1327. Time: 2578.5903 us. Best GFLOPs: 136.6632
2024-04-29 05:11:12 [INFO] [task_scheduler.cc:131] [Task #78: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_75] Trial #14: GFLOPs: 12.2041. Time: 19044.0073 us. Best GFLOPs: 136.6632
2024-04-29 05:11:12 [INFO] [task_scheduler.cc:131] [Task #78: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_75] Trial #15: GFLOPs: 58.6709. Time: 3961.3370 us. Best GFLOPs: 136.6632
2024-04-29 05:11:12 [INFO] [task_scheduler.cc:131] [Task #78: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_75] Trial #16: GFLOPs: 27.4288. Time: 8473.3951 us. Best GFLOPs: 136.6632
2024-04-29 05:11:12 [INFO] [task_scheduler.cc:131] [Task #78: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_75] Trial #17: GFLOPs: 80.5997. Time: 2883.5748 us. Best GFLOPs: 136.6632
2024-04-29 05:11:12 [INFO] [task_scheduler.cc:131] [Task #78: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_75] Trial #18: GFLOPs: 162.4658. Time: 1430.5485 us. Best GFLOPs: 162.4658
2024-04-29 05:11:12 [INFO] [task_scheduler.cc:131] [Task #78: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_75] Trial #19: GFLOPs: 149.7284. Time: 1552.2456 us. Best GFLOPs: 162.4658
2024-04-29 05:11:12 [INFO] [task_scheduler.cc:131] [Task #78: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_75] Trial #20: GFLOPs: 24.7984. Time: 9372.1812 us. Best GFLOPs: 162.4658
2024-04-29 05:11:12 [INFO] [task_scheduler.cc:131] [Task #78: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_75] Trial #21: GFLOPs: 13.7610. Time: 16889.3897 us. Best GFLOPs: 162.4658
2024-04-29 05:11:12 [INFO] [task_scheduler.cc:131] [Task #78: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_75] Trial #22: GFLOPs: 143.9160. Time: 1614.9368 us. Best GFLOPs: 162.4658
2024-04-29 05:11:12 [INFO] [task_scheduler.cc:131] [Task #78: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_75] Trial #23: GFLOPs: 161.6345. Time: 1437.9065 us. Best GFLOPs: 162.4658
2024-04-29 05:11:12 [INFO] [task_scheduler.cc:131] [Task #78: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_75] Trial #24: GFLOPs: 55.6595. Time: 4175.6637 us. Best GFLOPs: 162.4658
2024-04-29 05:11:12 [INFO] [task_scheduler.cc:131] [Task #78: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_75] Trial #25: GFLOPs: 95.7194. Time: 2428.0901 us. Best GFLOPs: 162.4658
2024-04-29 05:11:12 [INFO] [task_scheduler.cc:131] [Task #78: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_75] Trial #26: GFLOPs: 20.0383. Time: 11598.5748 us. Best GFLOPs: 162.4658
2024-04-29 05:11:12 [INFO] [task_scheduler.cc:131] [Task #78: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_75] Trial #27: GFLOPs: 88.4746. Time: 2626.9146 us. Best GFLOPs: 162.4658
2024-04-29 05:11:12 [INFO] [task_scheduler.cc:131] [Task #78: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_75] Trial #28: GFLOPs: 31.1160. Time: 7469.3241 us. Best GFLOPs: 162.4658
2024-04-29 05:11:12 [INFO] [task_scheduler.cc:131] [Task #78: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_75] Trial #29: GFLOPs: 112.7077. Time: 2062.1058 us. Best GFLOPs: 162.4658
2024-04-29 05:11:12 [INFO] [task_scheduler.cc:131] [Task #78: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_75] Trial #30: GFLOPs: 73.1210. Time: 3178.5019 us. Best GFLOPs: 162.4658
2024-04-29 05:11:12 [INFO] [task_scheduler.cc:131] [Task #78: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_75] Trial #31: GFLOPs: 105.7172. Time: 2198.4614 us. Best GFLOPs: 162.4658
2024-04-29 05:11:12 [INFO] [task_scheduler.cc:131] [Task #78: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_75] Trial #32: GFLOPs: 103.8580. Time: 2237.8178 us. Best GFLOPs: 162.4658
2024-04-29 05:11:12 [INFO] [task_scheduler.cc:131] [Task #78: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_75] Trial #33: GFLOPs: 5.9127. Time: 39308.0987 us. Best GFLOPs: 162.4658
2024-04-29 05:11:12 [INFO] [task_scheduler.cc:131] [Task #78: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_75] Trial #34: GFLOPs: 67.9486. Time: 3420.4570 us. Best GFLOPs: 162.4658
2024-04-29 05:11:12 [INFO] [task_scheduler.cc:131] [Task #78: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_75] Trial #35: GFLOPs: 24.3338. Time: 9551.1201 us. Best GFLOPs: 162.4658
2024-04-29 05:11:12 [INFO] [task_scheduler.cc:131] [Task #78: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_75] Trial #36: GFLOPs: 91.6137. Time: 2536.9045 us. Best GFLOPs: 162.4658
2024-04-29 05:11:12 [INFO] [task_scheduler.cc:131] [Task #78: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_75] Trial #37: GFLOPs: 33.5480. Time: 6927.8514 us. Best GFLOPs: 162.4658
2024-04-29 05:11:12 [INFO] [task_scheduler.cc:131] [Task #78: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_75] Trial #38: GFLOPs: 41.1945. Time: 5641.8944 us. Best GFLOPs: 162.4658
2024-04-29 05:11:12 [INFO] [task_scheduler.cc:131] [Task #78: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_75] Trial #39: GFLOPs: 24.4455. Time: 9507.4982 us. Best GFLOPs: 162.4658
2024-04-29 05:11:12 [INFO] [task_scheduler.cc:131] [Task #78: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_75] Trial #40: GFLOPs: 28.8321. Time: 8060.9936 us. Best GFLOPs: 162.4658
2024-04-29 05:11:12 [INFO] [task_scheduler.cc:131] [Task #78: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_75] Trial #41: GFLOPs: 38.9973. Time: 5959.7734 us. Best GFLOPs: 162.4658
2024-04-29 05:11:12 [INFO] [task_scheduler.cc:131] [Task #78: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_75] Trial #42: GFLOPs: 15.2188. Time: 15271.5454 us. Best GFLOPs: 162.4658
2024-04-29 05:11:12 [INFO] [task_scheduler.cc:131] [Task #78: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_75] Trial #43: GFLOPs: 72.7817. Time: 3193.3189 us. Best GFLOPs: 162.4658
2024-04-29 05:11:12 [INFO] [task_scheduler.cc:131] [Task #78: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_75] Trial #44: GFLOPs: 113.4690. Time: 2048.2710 us. Best GFLOPs: 162.4658
2024-04-29 05:11:12 [INFO] [task_scheduler.cc:131] [Task #78: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_75] Trial #45: GFLOPs: 161.0089. Time: 1443.4935 us. Best GFLOPs: 162.4658
2024-04-29 05:11:12 [INFO] [task_scheduler.cc:131] [Task #78: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_75] Trial #46: GFLOPs: 9.2910. Time: 25015.0086 us. Best GFLOPs: 162.4658
2024-04-29 05:11:12 [INFO] [task_scheduler.cc:131] [Task #78: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_75] Trial #47: GFLOPs: 150.8533. Time: 1540.6708 us. Best GFLOPs: 162.4658
2024-04-29 05:11:12 [INFO] [task_scheduler.cc:131] [Task #78: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_75] Trial #48: GFLOPs: 68.9749. Time: 3369.5646 us. Best GFLOPs: 162.4658
2024-04-29 05:11:12 [INFO] [task_scheduler.cc:131] [Task #78: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_75] Trial #49: GFLOPs: 90.2055. Time: 2576.5077 us. Best GFLOPs: 162.4658
2024-04-29 05:11:12 [INFO] [task_scheduler.cc:131] [Task #78: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_75] Trial #50: GFLOPs: 62.0897. Time: 3743.2155 us. Best GFLOPs: 162.4658
2024-04-29 05:11:12 [INFO] [task_scheduler.cc:131] [Task #78: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_75] Trial #51: GFLOPs: 69.9412. Time: 3323.0111 us. Best GFLOPs: 162.4658
2024-04-29 05:11:12 [INFO] [task_scheduler.cc:131] [Task #78: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_75] Trial #52: GFLOPs: 32.7572. Time: 7095.0930 us. Best GFLOPs: 162.4658
2024-04-29 05:11:12 [INFO] [task_scheduler.cc:131] [Task #78: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_75] Trial #53: GFLOPs: 65.2903. Time: 3559.7195 us. Best GFLOPs: 162.4658
2024-04-29 05:11:12 [INFO] [task_scheduler.cc:131] [Task #78: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_75] Trial #54: GFLOPs: 31.3627. Time: 7410.5608 us. Best GFLOPs: 162.4658
2024-04-29 05:11:12 [INFO] [task_scheduler.cc:131] [Task #78: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_75] Trial #55: GFLOPs: 174.4458. Time: 1332.3066 us. Best GFLOPs: 174.4458
2024-04-29 05:11:12 [INFO] [task_scheduler.cc:131] [Task #78: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_75] Trial #56: GFLOPs: 162.1567. Time: 1433.2754 us. Best GFLOPs: 174.4458
2024-04-29 05:11:12 [INFO] [task_scheduler.cc:121] [Task #78: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_75] Trial #57: Error in building:
LocalBuilder: Timeout, killed after 30.0 seconds
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(48), T.int64(56), T.int64(56), T.int64(4)), "float32"), p1: T.Buffer((T.int64(48), T.int64(48), T.int64(1), T.int64(1), T.int64(4), T.int64(4)), "float32"), p2: T.Buffer((T.int64(1), T.int64(48), T.int64(1), T.int64(1), T.int64(4)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(48), T.int64(56), T.int64(56), T.int64(4)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        conv2d_NCHWc = T.alloc_buffer((T.int64(1), T.int64(48), T.int64(56), T.int64(56), T.int64(4)))
        for n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused in T.parallel(T.int64(512), annotations={"pragma_auto_unroll_max_step": 512, "pragma_unroll_explicit": 1}):
            for n_2_init, oc_chunk_2_init, oh_2_init, ow_2_init, oc_block_2_init, n_3_init, oc_chunk_3_init, oh_3_init, ow_3_init, oc_block_3_init in T.grid(T.int64(1), T.int64(6), T.int64(14), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(14), T.int64(1)):
                with T.block("conv2d_NCHWc_init"):
                    v_n = T.axis.spatial(T.int64(1), n_2_init + n_3_init)
                    v_oc_chunk = T.axis.spatial(T.int64(48), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused // T.int64(256) * T.int64(24) + n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused % T.int64(8) // T.int64(2) * T.int64(6) + oc_chunk_2_init + oc_chunk_3_init)
                    v_oh = T.axis.spatial(T.int64(56), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused % T.int64(256) // T.int64(64) * T.int64(14) + oh_2_init + oh_3_init)
                    v_ow = T.axis.spatial(T.int64(56), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused % T.int64(64) // T.int64(16) * T.int64(14) + ow_2_init * T.int64(14) + ow_3_init)
                    v_oc_block = T.axis.spatial(T.int64(4), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused % T.int64(16) // T.int64(8) * T.int64(2) + n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused % T.int64(2) + oc_block_2_init + oc_block_3_init)
                    T.reads()
                    T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                    T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                    conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = T.float32(0)
            for ic_0, kh_0, kw_0, n_2, oc_chunk_2, oh_2, ow_2, oc_block_2, ic_1, kh_1, kw_1, n_3, oc_chunk_3, oh_3, ow_3, oc_block_3 in T.grid(T.int64(192), T.int64(1), T.int64(1), T.int64(1), T.int64(6), T.int64(14), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(14), T.int64(1)):
                with T.block("conv2d_NCHWc_update"):
                    v_n = T.axis.spatial(T.int64(1), n_2 + n_3)
                    v_oc_chunk = T.axis.spatial(T.int64(48), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused // T.int64(256) * T.int64(24) + n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused % T.int64(8) // T.int64(2) * T.int64(6) + oc_chunk_2 + oc_chunk_3)
                    v_oh = T.axis.spatial(T.int64(56), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused % T.int64(256) // T.int64(64) * T.int64(14) + oh_2 + oh_3)
                    v_ow = T.axis.spatial(T.int64(56), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused % T.int64(64) // T.int64(16) * T.int64(14) + ow_2 * T.int64(14) + ow_3)
                    v_oc_block = T.axis.spatial(T.int64(4), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused % T.int64(16) // T.int64(8) * T.int64(2) + n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused % T.int64(2) + oc_block_2 + oc_block_3)
                    v_ic = T.axis.reduce(T.int64(192), ic_0 + ic_1)
                    v_kh = T.axis.reduce(T.int64(1), kh_0 + kh_1)
                    v_kw = T.axis.reduce(T.int64(1), kw_0 + kw_1)
                    T.reads(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block], p0[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)], p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block])
                    T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                    T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                    conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] + p0[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)] * p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block]
            for ax0, ax1, ax2, ax3, ax4 in T.grid(T.int64(1), T.int64(6), T.int64(14), T.int64(14), T.int64(1)):
                with T.block("T_relu"):
                    v_ax0 = T.axis.spatial(T.int64(1), ax0)
                    v_ax1 = T.axis.spatial(T.int64(48), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused // T.int64(256) * T.int64(24) + n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused % T.int64(8) // T.int64(2) * T.int64(6) + ax1)
                    v_ax2 = T.axis.spatial(T.int64(56), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused % T.int64(256) // T.int64(64) * T.int64(14) + ax2)
                    v_ax3 = T.axis.spatial(T.int64(56), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused % T.int64(64) // T.int64(16) * T.int64(14) + ax3)
                    v_ax4 = T.axis.spatial(T.int64(4), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused % T.int64(16) // T.int64(8) * T.int64(2) + n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused % T.int64(2) + ax4)
                    T.reads(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4])
                    T.writes(T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                    T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.max(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] + p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4], T.float32(0))
b0 = sch.get_block(name="conv2d_NCHWc", func_name="main")
b1 = sch.get_block(name="T_add", func_name="main")
b2 = sch.get_block(name="root", func_name="main")
sch.compute_inline(block=b1)
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.tiling_structure", ann_val="SSRSRS")
l3, l4, l5, l6, l7, l8, l9, l10 = sch.get_loops(block=b0)
v11, v12, v13, v14 = sch.sample_perfect_tile(loop=l3, n=4, max_innermost_factor=64, decision=[1, 1, 1, 1])
l15, l16, l17, l18 = sch.split(loop=l3, factors=[v11, v12, v13, v14], preserve_unit_iters=True)
v19, v20, v21, v22 = sch.sample_perfect_tile(loop=l4, n=4, max_innermost_factor=64, decision=[2, 4, 6, 1])
l23, l24, l25, l26 = sch.split(loop=l4, factors=[v19, v20, v21, v22], preserve_unit_iters=True)
v27, v28, v29, v30 = sch.sample_perfect_tile(loop=l5, n=4, max_innermost_factor=64, decision=[4, 1, 14, 1])
l31, l32, l33, l34 = sch.split(loop=l5, factors=[v27, v28, v29, v30], preserve_unit_iters=True)
v35, v36, v37, v38 = sch.sample_perfect_tile(loop=l6, n=4, max_innermost_factor=64, decision=[4, 1, 1, 14])
l39, l40, l41, l42 = sch.split(loop=l6, factors=[v35, v36, v37, v38], preserve_unit_iters=True)
v43, v44, v45, v46 = sch.sample_perfect_tile(loop=l7, n=4, max_innermost_factor=64, decision=[2, 2, 1, 1])
l47, l48, l49, l50 = sch.split(loop=l7, factors=[v43, v44, v45, v46], preserve_unit_iters=True)
v51, v52 = sch.sample_perfect_tile(loop=l8, n=2, max_innermost_factor=64, decision=[192, 1])
l53, l54 = sch.split(loop=l8, factors=[v51, v52], preserve_unit_iters=True)
v55, v56 = sch.sample_perfect_tile(loop=l9, n=2, max_innermost_factor=64, decision=[1, 1])
l57, l58 = sch.split(loop=l9, factors=[v55, v56], preserve_unit_iters=True)
v59, v60 = sch.sample_perfect_tile(loop=l10, n=2, max_innermost_factor=64, decision=[1, 1])
l61, l62 = sch.split(loop=l10, factors=[v59, v60], preserve_unit_iters=True)
sch.reorder(l15, l23, l31, l39, l47, l16, l24, l32, l40, l48, l53, l57, l61, l17, l25, l33, l41, l49, l54, l58, l62, l18, l26, l34, l42, l50)
b63, = sch.get_consumers(block=b0)
sch.reverse_compute_at(block=b63, loop=l48, preserve_unit_loops=True, index=-1)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.vectorize", ann_val=64)
v64 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.unroll_explicit", ann_val=v64)
sch.enter_postproc()
b65 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b65, ann_key="meta_schedule.parallel")
sch.unannotate(block_or_loop=b65, ann_key="meta_schedule.vectorize")
sch.unannotate(block_or_loop=b65, ann_key="meta_schedule.unroll_explicit")
b66, b67 = sch.get_child_blocks(b65)
l68, l69, l70, l71, l72, l73, l74, l75, l76, l77, l78, l79, l80, l81, l82, l83, l84, l85, l86, l87, l88, l89, l90, l91, l92, l93 = sch.get_loops(block=b66)
l94 = sch.fuse(l68, l69, l70, l71, l72, l73, l74, l75, l76, l77, preserve_unit_iters=True)
sch.parallel(loop=l94)
sch.annotate(block_or_loop=l94, ann_key="pragma_auto_unroll_max_step", ann_val=512)
sch.annotate(block_or_loop=l94, ann_key="pragma_unroll_explicit", ann_val=1)
l95, l96, l97, l98, l99, l100 = sch.get_loops(block=b67)
b101 = sch.get_block(name="conv2d_NCHWc", func_name="main")
l102, l103, l104, l105, l106, l107, l108, l109, l110, l111, l112, l113, l114, l115, l116, l117, l118 = sch.get_loops(block=b101)
b119 = sch.decompose_reduction(block=b101, loop=l103)
2024-04-29 05:11:12 [INFO] [task_scheduler.cc:131] [Task #78: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_75] Trial #58: GFLOPs: 37.6425. Time: 6174.2842 us. Best GFLOPs: 174.4458
2024-04-29 05:11:12 [INFO] [task_scheduler.cc:131] [Task #78: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_75] Trial #59: GFLOPs: 17.3074. Time: 13428.6980 us. Best GFLOPs: 174.4458
2024-04-29 05:11:12 [INFO] [task_scheduler.cc:131] [Task #78: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_75] Trial #60: GFLOPs: 4.8937. Time: 47493.1230 us. Best GFLOPs: 174.4458
2024-04-29 05:11:12 [INFO] [task_scheduler.cc:131] [Task #78: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_75] Trial #61: GFLOPs: 14.4084. Time: 16130.5004 us. Best GFLOPs: 174.4458
2024-04-29 05:11:12 [INFO] [task_scheduler.cc:131] [Task #78: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_75] Trial #62: GFLOPs: 170.4345. Time: 1363.6635 us. Best GFLOPs: 174.4458
2024-04-29 05:11:12 [INFO] [task_scheduler.cc:131] [Task #78: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_75] Trial #63: GFLOPs: 176.4875. Time: 1316.8937 us. Best GFLOPs: 176.4875
2024-04-29 05:11:12 [INFO] [task_scheduler.cc:131] [Task #78: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_75] Trial #64: GFLOPs: 30.0236. Time: 7741.0725 us. Best GFLOPs: 176.4875
2024-04-29 06:06:45 [INFO] [evolutionary_search.cc:713] Generating candidates......
2024-04-29 06:06:46 [INFO] [evolutionary_search.cc:715] Picked top 62 candidate(s) from database
2024-04-29 06:06:48 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x114593e8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0xd40b908)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0xb9aa2f8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x12988838)]: 0 failure(s)
2024-04-29 06:06:48 [INFO] [evolutionary_search.cc:723] Sampled 450 candidate(s)
2024-04-29 06:06:53 [INFO] [evolutionary_search.cc:621] Evolve iter #0 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x114593e8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0xd40b908)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0xb9aa2f8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x12988838)]: 0 failure(s)
2024-04-29 06:06:59 [INFO] [evolutionary_search.cc:621] Evolve iter #1 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x114593e8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0xd40b908)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0xb9aa2f8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x12988838)]: 0 failure(s)
2024-04-29 06:07:04 [INFO] [evolutionary_search.cc:621] Evolve iter #2 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x114593e8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0xd40b908)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0xb9aa2f8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x12988838)]: 0 failure(s)
2024-04-29 06:07:10 [INFO] [evolutionary_search.cc:621] Evolve iter #3 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x114593e8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0xd40b908)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0xb9aa2f8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x12988838)]: 0 failure(s)
2024-04-29 06:07:13 [INFO] [evolutionary_search.cc:649] Scores of the best 64 candidates:
[1 : 16]:	0.9933  0.9783  0.9751  0.9685  0.9673  0.9672  0.9568  0.9564  0.9528  0.9508  0.9421  0.9417  0.9402  0.9357  0.9346  0.9290
[17 : 32]:	0.9229  0.9185  0.9163  0.9085  0.9075  0.8956  0.8900  0.8876  0.8876  0.8876  0.8869  0.8857  0.8809  0.8788  0.8746  0.8713
[33 : 48]:	0.8712  0.8646  0.8618  0.8602  0.8577  0.8564  0.8540  0.8519  0.8473  0.8467  0.8461  0.8453  0.8453  0.8393  0.8367  0.8363
[49 : 64]:	0.8345  0.8308  0.8297  0.8255  0.8252  0.8209  0.8178  0.8169  0.8168  0.8168  0.8168  0.8167  0.8166  0.8162  0.8159  0.8159
2024-04-29 06:07:13 [INFO] [evolutionary_search.cc:727] Got 64 candidate(s) with evolutionary search
2024-04-29 06:07:13 [INFO] [evolutionary_search.cc:730] Sending 64 candidates(s) for measurement
2024-04-29 06:08:47 [INFO] [task_scheduler.cc:131] [Task #78: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_75] Trial #65: GFLOPs: 133.9991. Time: 1734.4537 us. Best GFLOPs: 176.4875
2024-04-29 06:08:47 [INFO] [task_scheduler.cc:131] [Task #78: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_75] Trial #66: GFLOPs: 112.8077. Time: 2060.2775 us. Best GFLOPs: 176.4875
2024-04-29 06:08:47 [INFO] [task_scheduler.cc:131] [Task #78: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_75] Trial #67: GFLOPs: 215.9173. Time: 1076.4086 us. Best GFLOPs: 215.9173
2024-04-29 06:08:47 [INFO] [task_scheduler.cc:131] [Task #78: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_75] Trial #68: GFLOPs: 140.0075. Time: 1660.0202 us. Best GFLOPs: 215.9173
2024-04-29 06:08:47 [INFO] [task_scheduler.cc:131] [Task #78: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_75] Trial #69: GFLOPs: 47.7252. Time: 4869.8660 us. Best GFLOPs: 215.9173
2024-04-29 06:08:47 [INFO] [task_scheduler.cc:131] [Task #78: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_75] Trial #70: GFLOPs: 184.4863. Time: 1259.7968 us. Best GFLOPs: 215.9173
2024-04-29 06:08:47 [INFO] [task_scheduler.cc:131] [Task #78: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_75] Trial #71: GFLOPs: 187.7906. Time: 1237.6299 us. Best GFLOPs: 215.9173
2024-04-29 06:08:47 [INFO] [task_scheduler.cc:131] [Task #78: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_75] Trial #72: GFLOPs: 143.0270. Time: 1624.9741 us. Best GFLOPs: 215.9173
2024-04-29 06:08:47 [INFO] [task_scheduler.cc:131] [Task #78: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_75] Trial #73: GFLOPs: 124.2580. Time: 1870.4251 us. Best GFLOPs: 215.9173
2024-04-29 06:08:47 [INFO] [task_scheduler.cc:131] [Task #78: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_75] Trial #74: GFLOPs: 124.0458. Time: 1873.6249 us. Best GFLOPs: 215.9173
2024-04-29 06:08:47 [INFO] [task_scheduler.cc:131] [Task #78: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_75] Trial #75: GFLOPs: 167.7543. Time: 1385.4505 us. Best GFLOPs: 215.9173
2024-04-29 06:08:47 [INFO] [task_scheduler.cc:131] [Task #78: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_75] Trial #76: GFLOPs: 108.0518. Time: 2150.9604 us. Best GFLOPs: 215.9173
2024-04-29 06:08:47 [INFO] [task_scheduler.cc:131] [Task #78: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_75] Trial #77: GFLOPs: 111.1328. Time: 2091.3285 us. Best GFLOPs: 215.9173
2024-04-29 06:08:47 [INFO] [task_scheduler.cc:131] [Task #78: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_75] Trial #78: GFLOPs: 190.5915. Time: 1219.4420 us. Best GFLOPs: 215.9173
2024-04-29 06:08:47 [INFO] [task_scheduler.cc:131] [Task #78: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_75] Trial #79: GFLOPs: 124.0358. Time: 1873.7755 us. Best GFLOPs: 215.9173
2024-04-29 06:08:47 [INFO] [task_scheduler.cc:131] [Task #78: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_75] Trial #80: GFLOPs: 48.1066. Time: 4831.2524 us. Best GFLOPs: 215.9173
2024-04-29 06:08:47 [INFO] [task_scheduler.cc:131] [Task #78: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_75] Trial #81: GFLOPs: 176.8071. Time: 1314.5130 us. Best GFLOPs: 215.9173
2024-04-29 06:08:47 [INFO] [task_scheduler.cc:131] [Task #78: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_75] Trial #82: GFLOPs: 129.9165. Time: 1788.9589 us. Best GFLOPs: 215.9173
2024-04-29 06:08:47 [INFO] [task_scheduler.cc:131] [Task #78: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_75] Trial #83: GFLOPs: 116.1540. Time: 2000.9223 us. Best GFLOPs: 215.9173
2024-04-29 06:08:47 [INFO] [task_scheduler.cc:131] [Task #78: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_75] Trial #84: GFLOPs: 178.3382. Time: 1303.2273 us. Best GFLOPs: 215.9173
2024-04-29 06:08:47 [INFO] [task_scheduler.cc:131] [Task #78: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_75] Trial #85: GFLOPs: 182.6505. Time: 1272.4591 us. Best GFLOPs: 215.9173
2024-04-29 06:08:47 [INFO] [task_scheduler.cc:131] [Task #78: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_75] Trial #86: GFLOPs: 182.4466. Time: 1273.8807 us. Best GFLOPs: 215.9173
2024-04-29 06:08:47 [INFO] [task_scheduler.cc:131] [Task #78: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_75] Trial #87: GFLOPs: 118.7947. Time: 1956.4442 us. Best GFLOPs: 215.9173
2024-04-29 06:08:47 [INFO] [task_scheduler.cc:131] [Task #78: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_75] Trial #88: GFLOPs: 56.4304. Time: 4118.6158 us. Best GFLOPs: 215.9173
2024-04-29 06:08:47 [INFO] [task_scheduler.cc:131] [Task #78: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_75] Trial #89: GFLOPs: 47.3991. Time: 4903.3692 us. Best GFLOPs: 215.9173
2024-04-29 06:08:47 [INFO] [task_scheduler.cc:131] [Task #78: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_75] Trial #90: GFLOPs: 161.6614. Time: 1437.6666 us. Best GFLOPs: 215.9173
2024-04-29 06:08:47 [INFO] [task_scheduler.cc:131] [Task #78: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_75] Trial #91: GFLOPs: 106.0671. Time: 2191.2098 us. Best GFLOPs: 215.9173
2024-04-29 06:08:47 [INFO] [task_scheduler.cc:131] [Task #78: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_75] Trial #92: GFLOPs: 103.3258. Time: 2249.3426 us. Best GFLOPs: 215.9173
2024-04-29 06:08:47 [INFO] [task_scheduler.cc:131] [Task #78: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_75] Trial #93: GFLOPs: 125.3583. Time: 1854.0073 us. Best GFLOPs: 215.9173
2024-04-29 06:08:47 [INFO] [task_scheduler.cc:131] [Task #78: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_75] Trial #94: GFLOPs: 166.3702. Time: 1396.9763 us. Best GFLOPs: 215.9173
2024-04-29 06:08:47 [INFO] [task_scheduler.cc:131] [Task #78: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_75] Trial #95: GFLOPs: 64.7901. Time: 3587.2005 us. Best GFLOPs: 215.9173
2024-04-29 06:08:47 [INFO] [task_scheduler.cc:131] [Task #78: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_75] Trial #96: GFLOPs: 189.5320. Time: 1226.2584 us. Best GFLOPs: 215.9173
2024-04-29 06:08:47 [INFO] [task_scheduler.cc:131] [Task #78: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_75] Trial #97: GFLOPs: 145.8288. Time: 1593.7537 us. Best GFLOPs: 215.9173
2024-04-29 06:08:47 [INFO] [task_scheduler.cc:131] [Task #78: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_75] Trial #98: GFLOPs: 185.6254. Time: 1252.0658 us. Best GFLOPs: 215.9173
2024-04-29 06:08:47 [INFO] [task_scheduler.cc:131] [Task #78: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_75] Trial #99: GFLOPs: 27.1540. Time: 8559.1582 us. Best GFLOPs: 215.9173
2024-04-29 06:08:47 [INFO] [task_scheduler.cc:131] [Task #78: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_75] Trial #100: GFLOPs: 31.2273. Time: 7442.6882 us. Best GFLOPs: 215.9173
2024-04-29 06:08:47 [INFO] [task_scheduler.cc:131] [Task #78: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_75] Trial #101: GFLOPs: 170.8869. Time: 1360.0526 us. Best GFLOPs: 215.9173
2024-04-29 06:08:47 [INFO] [task_scheduler.cc:131] [Task #78: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_75] Trial #102: GFLOPs: 188.9342. Time: 1230.1385 us. Best GFLOPs: 215.9173
2024-04-29 06:08:47 [INFO] [task_scheduler.cc:131] [Task #78: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_75] Trial #103: GFLOPs: 169.9384. Time: 1367.6441 us. Best GFLOPs: 215.9173
2024-04-29 06:08:47 [INFO] [task_scheduler.cc:131] [Task #78: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_75] Trial #104: GFLOPs: 188.0122. Time: 1236.1708 us. Best GFLOPs: 215.9173
2024-04-29 06:08:47 [INFO] [task_scheduler.cc:131] [Task #78: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_75] Trial #105: GFLOPs: 167.5936. Time: 1386.7786 us. Best GFLOPs: 215.9173
2024-04-29 06:08:47 [INFO] [task_scheduler.cc:131] [Task #78: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_75] Trial #106: GFLOPs: 145.0767. Time: 1602.0165 us. Best GFLOPs: 215.9173
2024-04-29 06:08:47 [INFO] [task_scheduler.cc:131] [Task #78: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_75] Trial #107: GFLOPs: 126.5248. Time: 1836.9140 us. Best GFLOPs: 215.9173
2024-04-29 06:08:47 [INFO] [task_scheduler.cc:131] [Task #78: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_75] Trial #108: GFLOPs: 158.8475. Time: 1463.1342 us. Best GFLOPs: 215.9173
2024-04-29 06:08:47 [INFO] [task_scheduler.cc:131] [Task #78: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_75] Trial #109: GFLOPs: 158.3269. Time: 1467.9453 us. Best GFLOPs: 215.9173
2024-04-29 06:08:47 [INFO] [task_scheduler.cc:131] [Task #78: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_75] Trial #110: GFLOPs: 344.1421. Time: 675.3466 us. Best GFLOPs: 344.1421
2024-04-29 06:08:47 [INFO] [task_scheduler.cc:131] [Task #78: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_75] Trial #111: GFLOPs: 196.5211. Time: 1182.6479 us. Best GFLOPs: 344.1421
2024-04-29 06:08:47 [INFO] [task_scheduler.cc:131] [Task #78: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_75] Trial #112: GFLOPs: 145.1448. Time: 1601.2643 us. Best GFLOPs: 344.1421
2024-04-29 06:08:47 [INFO] [task_scheduler.cc:131] [Task #78: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_75] Trial #113: GFLOPs: 149.0048. Time: 1559.7832 us. Best GFLOPs: 344.1421
2024-04-29 06:08:47 [INFO] [task_scheduler.cc:131] [Task #78: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_75] Trial #114: GFLOPs: 65.6600. Time: 3539.6798 us. Best GFLOPs: 344.1421
2024-04-29 06:08:47 [INFO] [task_scheduler.cc:131] [Task #78: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_75] Trial #115: GFLOPs: 128.7793. Time: 1804.7565 us. Best GFLOPs: 344.1421
2024-04-29 06:08:47 [INFO] [task_scheduler.cc:131] [Task #78: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_75] Trial #116: GFLOPs: 157.4065. Time: 1476.5288 us. Best GFLOPs: 344.1421
2024-04-29 06:08:47 [INFO] [task_scheduler.cc:131] [Task #78: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_75] Trial #117: GFLOPs: 135.1387. Time: 1719.8272 us. Best GFLOPs: 344.1421
2024-04-29 06:08:47 [INFO] [task_scheduler.cc:131] [Task #78: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_75] Trial #118: GFLOPs: 209.4346. Time: 1109.7271 us. Best GFLOPs: 344.1421
2024-04-29 06:08:47 [INFO] [task_scheduler.cc:131] [Task #78: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_75] Trial #119: GFLOPs: 185.1320. Time: 1255.4031 us. Best GFLOPs: 344.1421
2024-04-29 06:08:47 [INFO] [task_scheduler.cc:131] [Task #78: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_75] Trial #120: GFLOPs: 126.6741. Time: 1834.7491 us. Best GFLOPs: 344.1421
2024-04-29 06:08:47 [INFO] [task_scheduler.cc:131] [Task #78: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_75] Trial #121: GFLOPs: 146.5224. Time: 1586.2100 us. Best GFLOPs: 344.1421
2024-04-29 06:08:47 [INFO] [task_scheduler.cc:131] [Task #78: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_75] Trial #122: GFLOPs: 184.4687. Time: 1259.9169 us. Best GFLOPs: 344.1421
2024-04-29 06:08:47 [INFO] [task_scheduler.cc:131] [Task #78: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_75] Trial #123: GFLOPs: 145.3380. Time: 1599.1361 us. Best GFLOPs: 344.1421
2024-04-29 06:08:47 [INFO] [task_scheduler.cc:131] [Task #78: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_75] Trial #124: GFLOPs: 146.8553. Time: 1582.6138 us. Best GFLOPs: 344.1421
2024-04-29 06:08:47 [INFO] [task_scheduler.cc:131] [Task #78: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_75] Trial #125: GFLOPs: 147.7246. Time: 1573.3008 us. Best GFLOPs: 344.1421
2024-04-29 06:08:47 [INFO] [task_scheduler.cc:131] [Task #78: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_75] Trial #126: GFLOPs: 103.5483. Time: 2244.5114 us. Best GFLOPs: 344.1421
2024-04-29 06:08:47 [INFO] [task_scheduler.cc:131] [Task #78: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_75] Trial #127: GFLOPs: 95.9637. Time: 2421.9086 us. Best GFLOPs: 344.1421
2024-04-29 06:08:47 [INFO] [task_scheduler.cc:131] [Task #78: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_75] Trial #128: GFLOPs: 56.2830. Time: 4129.4070 us. Best GFLOPs: 344.1421
