2024-04-29 02:32:34 [INFO] [task_scheduler.cc:160] Initializing Task #65: "fused_nn_contrib_conv2d_NCHWc_add_nn_relu_63"
2024-04-29 02:32:34 [INFO] [task_scheduler.cc:35] 
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(144), T.int64(28), T.int64(28), T.int64(4)), "float32"), p1: T.Buffer((T.int64(48), T.int64(144), T.int64(1), T.int64(1), T.int64(4), T.int64(4)), "float32"), p2: T.Buffer((T.int64(1), T.int64(48), T.int64(1), T.int64(1), T.int64(4)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(48), T.int64(28), T.int64(28), T.int64(4)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        conv2d_NCHWc = T.alloc_buffer((T.int64(1), T.int64(48), T.int64(28), T.int64(28), T.int64(4)))
        T_add = T.alloc_buffer((T.int64(1), T.int64(48), T.int64(28), T.int64(28), T.int64(4)))
        for n, oc_chunk, oh, ow, oc_block, ic, kh, kw in T.grid(T.int64(1), T.int64(48), T.int64(28), T.int64(28), T.int64(4), T.int64(576), T.int64(1), T.int64(1)):
            with T.block("conv2d_NCHWc"):
                v_n, v_oc_chunk, v_oh, v_ow, v_oc_block, v_ic, v_kh, v_kw = T.axis.remap("SSSSSRRR", [n, oc_chunk, oh, ow, oc_block, ic, kh, kw])
                T.reads(p0[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)], p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block])
                T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                with T.init():
                    conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = T.float32(0)
                conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] + p0[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)] * p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block]
        for ax0, ax1, ax2, ax3, ax4 in T.grid(T.int64(1), T.int64(48), T.int64(28), T.int64(28), T.int64(4)):
            with T.block("T_add"):
                v_ax0, v_ax1, v_ax2, v_ax3, v_ax4 = T.axis.remap("SSSSS", [ax0, ax1, ax2, ax3, ax4])
                T.reads(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4])
                T.writes(T_add[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                T_add[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] + p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4]
        for ax0, ax1, ax2, ax3, ax4 in T.grid(T.int64(1), T.int64(48), T.int64(28), T.int64(28), T.int64(4)):
            with T.block("T_relu"):
                v_ax0, v_ax1, v_ax2, v_ax3, v_ax4 = T.axis.remap("SSSSS", [ax0, ax1, ax2, ax3, ax4])
                T.reads(T_add[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                T.writes(T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.max(T_add[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], T.float32(0))
2024-04-29 02:32:34 [INFO] [task_scheduler.cc:164] Total 3 design space(s) generated
2024-04-29 02:32:34 [INFO] [task_scheduler.cc:170] Design space #0:
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(144), T.int64(28), T.int64(28), T.int64(4)), "float32"), p1: T.Buffer((T.int64(48), T.int64(144), T.int64(1), T.int64(1), T.int64(4), T.int64(4)), "float32"), p2: T.Buffer((T.int64(1), T.int64(48), T.int64(1), T.int64(1), T.int64(4)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(48), T.int64(28), T.int64(28), T.int64(4)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        with T.block("root"):
            T.reads()
            T.writes()
            T.block_attr({"meta_schedule.parallel": 768, "meta_schedule.unroll_explicit": 16, "meta_schedule.vectorize": 64})
            conv2d_NCHWc = T.alloc_buffer((T.int64(1), T.int64(48), T.int64(28), T.int64(28), T.int64(4)))
            for n_0, oc_chunk_0, oh_0, ow_0, oc_block_0, n_1, oc_chunk_1, oh_1, ow_1, oc_block_1, ic_0, kh_0, kw_0, n_2, oc_chunk_2, oh_2, ow_2, oc_block_2, ic_1, kh_1, kw_1, n_3, oc_chunk_3, oh_3, ow_3, oc_block_3 in T.grid(T.int64(1), T.int64(1), T.int64(7), T.int64(7), T.int64(2), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(192), T.int64(1), T.int64(1), T.int64(1), T.int64(8), T.int64(2), T.int64(1), T.int64(1), T.int64(3), T.int64(1), T.int64(1), T.int64(1), T.int64(6), T.int64(2), T.int64(4), T.int64(1)):
                with T.block("conv2d_NCHWc"):
                    v_n = T.axis.spatial(T.int64(1), n_0 + n_1 + n_2 + n_3)
                    v_oc_chunk = T.axis.spatial(T.int64(48), oc_chunk_0 * T.int64(48) + oc_chunk_1 * T.int64(48) + oc_chunk_2 * T.int64(6) + oc_chunk_3)
                    v_oh = T.axis.spatial(T.int64(28), oh_0 * T.int64(4) + oh_1 * T.int64(4) + oh_2 * T.int64(2) + oh_3)
                    v_ow = T.axis.spatial(T.int64(28), ow_0 * T.int64(4) + ow_1 * T.int64(4) + ow_2 * T.int64(4) + ow_3)
                    v_oc_block = T.axis.spatial(T.int64(4), oc_block_0 * T.int64(2) + oc_block_1 + oc_block_2 + oc_block_3)
                    v_ic = T.axis.reduce(T.int64(576), ic_0 * T.int64(3) + ic_1)
                    v_kh = T.axis.reduce(T.int64(1), kh_0 + kh_1)
                    v_kw = T.axis.reduce(T.int64(1), kw_0 + kw_1)
                    T.reads(p0[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)], p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block])
                    T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                    T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                    with T.init():
                        conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = T.float32(0)
                    conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] + p0[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)] * p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block]
            for ax0, ax1, ax2, ax3, ax4 in T.grid(T.int64(1), T.int64(48), T.int64(28), T.int64(28), T.int64(4)):
                with T.block("T_relu"):
                    v_ax0, v_ax1, v_ax2, v_ax3, v_ax4 = T.axis.remap("SSSSS", [ax0, ax1, ax2, ax3, ax4])
                    T.reads(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4])
                    T.writes(T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                    T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.max(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] + p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4], T.float32(0))
b0 = sch.get_block(name="conv2d_NCHWc", func_name="main")
b1 = sch.get_block(name="T_add", func_name="main")
b2 = sch.get_block(name="root", func_name="main")
sch.compute_inline(block=b1)
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.tiling_structure", ann_val="SSRSRS")
l3, l4, l5, l6, l7, l8, l9, l10 = sch.get_loops(block=b0)
v11, v12, v13, v14 = sch.sample_perfect_tile(loop=l3, n=4, max_innermost_factor=64, decision=[1, 1, 1, 1])
l15, l16, l17, l18 = sch.split(loop=l3, factors=[v11, v12, v13, v14], preserve_unit_iters=True)
v19, v20, v21, v22 = sch.sample_perfect_tile(loop=l4, n=4, max_innermost_factor=64, decision=[1, 1, 8, 6])
l23, l24, l25, l26 = sch.split(loop=l4, factors=[v19, v20, v21, v22], preserve_unit_iters=True)
v27, v28, v29, v30 = sch.sample_perfect_tile(loop=l5, n=4, max_innermost_factor=64, decision=[7, 1, 2, 2])
l31, l32, l33, l34 = sch.split(loop=l5, factors=[v27, v28, v29, v30], preserve_unit_iters=True)
v35, v36, v37, v38 = sch.sample_perfect_tile(loop=l6, n=4, max_innermost_factor=64, decision=[7, 1, 1, 4])
l39, l40, l41, l42 = sch.split(loop=l6, factors=[v35, v36, v37, v38], preserve_unit_iters=True)
v43, v44, v45, v46 = sch.sample_perfect_tile(loop=l7, n=4, max_innermost_factor=64, decision=[2, 2, 1, 1])
l47, l48, l49, l50 = sch.split(loop=l7, factors=[v43, v44, v45, v46], preserve_unit_iters=True)
v51, v52 = sch.sample_perfect_tile(loop=l8, n=2, max_innermost_factor=64, decision=[192, 3])
l53, l54 = sch.split(loop=l8, factors=[v51, v52], preserve_unit_iters=True)
v55, v56 = sch.sample_perfect_tile(loop=l9, n=2, max_innermost_factor=64, decision=[1, 1])
l57, l58 = sch.split(loop=l9, factors=[v55, v56], preserve_unit_iters=True)
v59, v60 = sch.sample_perfect_tile(loop=l10, n=2, max_innermost_factor=64, decision=[1, 1])
l61, l62 = sch.split(loop=l10, factors=[v59, v60], preserve_unit_iters=True)
sch.reorder(l15, l23, l31, l39, l47, l16, l24, l32, l40, l48, l53, l57, l61, l17, l25, l33, l41, l49, l54, l58, l62, l18, l26, l34, l42, l50)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.vectorize", ann_val=64)
v63 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=1)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.unroll_explicit", ann_val=v63)
2024-04-29 02:32:34 [INFO] [task_scheduler.cc:170] Design space #1:
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(144), T.int64(28), T.int64(28), T.int64(4)), "float32"), p1: T.Buffer((T.int64(48), T.int64(144), T.int64(1), T.int64(1), T.int64(4), T.int64(4)), "float32"), p2: T.Buffer((T.int64(1), T.int64(48), T.int64(1), T.int64(1), T.int64(4)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(48), T.int64(28), T.int64(28), T.int64(4)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        with T.block("root"):
            T.reads()
            T.writes()
            T.block_attr({"meta_schedule.parallel": 768, "meta_schedule.unroll_explicit": 64, "meta_schedule.vectorize": 64})
            conv2d_NCHWc = T.alloc_buffer((T.int64(1), T.int64(48), T.int64(28), T.int64(28), T.int64(4)))
            for n_0, oc_chunk_0, oh_0, ow_0, oc_block_0, n_1, oc_chunk_1, oh_1, ow_1, oc_block_1 in T.grid(T.int64(1), T.int64(1), T.int64(7), T.int64(7), T.int64(2), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(2)):
                for ic_0, kh_0, kw_0, n_2, oc_chunk_2, oh_2, ow_2, oc_block_2, ic_1, kh_1, kw_1, n_3, oc_chunk_3, oh_3, ow_3, oc_block_3 in T.grid(T.int64(192), T.int64(1), T.int64(1), T.int64(1), T.int64(8), T.int64(2), T.int64(1), T.int64(1), T.int64(3), T.int64(1), T.int64(1), T.int64(1), T.int64(6), T.int64(2), T.int64(4), T.int64(1)):
                    with T.block("conv2d_NCHWc"):
                        v_n = T.axis.spatial(T.int64(1), n_0 + n_1 + n_2 + n_3)
                        v_oc_chunk = T.axis.spatial(T.int64(48), oc_chunk_0 * T.int64(48) + oc_chunk_1 * T.int64(48) + oc_chunk_2 * T.int64(6) + oc_chunk_3)
                        v_oh = T.axis.spatial(T.int64(28), oh_0 * T.int64(4) + oh_1 * T.int64(4) + oh_2 * T.int64(2) + oh_3)
                        v_ow = T.axis.spatial(T.int64(28), ow_0 * T.int64(4) + ow_1 * T.int64(4) + ow_2 * T.int64(4) + ow_3)
                        v_oc_block = T.axis.spatial(T.int64(4), oc_block_0 * T.int64(2) + oc_block_1 + oc_block_2 + oc_block_3)
                        v_ic = T.axis.reduce(T.int64(576), ic_0 * T.int64(3) + ic_1)
                        v_kh = T.axis.reduce(T.int64(1), kh_0 + kh_1)
                        v_kw = T.axis.reduce(T.int64(1), kw_0 + kw_1)
                        T.reads(p0[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)], p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block])
                        T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                        T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                        with T.init():
                            conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = T.float32(0)
                        conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] + p0[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)] * p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block]
                for ax0, ax1, ax2, ax3, ax4 in T.grid(T.int64(1), T.int64(48), T.int64(4), T.int64(4), T.int64(1)):
                    with T.block("T_relu"):
                        v_ax0, v_ax1 = T.axis.remap("SS", [ax0, ax1])
                        v_ax2 = T.axis.spatial(T.int64(28), oh_0 * T.int64(4) + ax2)
                        v_ax3 = T.axis.spatial(T.int64(28), ow_0 * T.int64(4) + ax3)
                        v_ax4 = T.axis.spatial(T.int64(4), oc_block_0 * T.int64(2) + oc_block_1 + ax4)
                        T.reads(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4])
                        T.writes(T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                        T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.max(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] + p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4], T.float32(0))
b0 = sch.get_block(name="conv2d_NCHWc", func_name="main")
b1 = sch.get_block(name="T_add", func_name="main")
b2 = sch.get_block(name="root", func_name="main")
sch.compute_inline(block=b1)
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.tiling_structure", ann_val="SSRSRS")
l3, l4, l5, l6, l7, l8, l9, l10 = sch.get_loops(block=b0)
v11, v12, v13, v14 = sch.sample_perfect_tile(loop=l3, n=4, max_innermost_factor=64, decision=[1, 1, 1, 1])
l15, l16, l17, l18 = sch.split(loop=l3, factors=[v11, v12, v13, v14], preserve_unit_iters=True)
v19, v20, v21, v22 = sch.sample_perfect_tile(loop=l4, n=4, max_innermost_factor=64, decision=[1, 1, 8, 6])
l23, l24, l25, l26 = sch.split(loop=l4, factors=[v19, v20, v21, v22], preserve_unit_iters=True)
v27, v28, v29, v30 = sch.sample_perfect_tile(loop=l5, n=4, max_innermost_factor=64, decision=[7, 1, 2, 2])
l31, l32, l33, l34 = sch.split(loop=l5, factors=[v27, v28, v29, v30], preserve_unit_iters=True)
v35, v36, v37, v38 = sch.sample_perfect_tile(loop=l6, n=4, max_innermost_factor=64, decision=[7, 1, 1, 4])
l39, l40, l41, l42 = sch.split(loop=l6, factors=[v35, v36, v37, v38], preserve_unit_iters=True)
v43, v44, v45, v46 = sch.sample_perfect_tile(loop=l7, n=4, max_innermost_factor=64, decision=[2, 2, 1, 1])
l47, l48, l49, l50 = sch.split(loop=l7, factors=[v43, v44, v45, v46], preserve_unit_iters=True)
v51, v52 = sch.sample_perfect_tile(loop=l8, n=2, max_innermost_factor=64, decision=[192, 3])
l53, l54 = sch.split(loop=l8, factors=[v51, v52], preserve_unit_iters=True)
v55, v56 = sch.sample_perfect_tile(loop=l9, n=2, max_innermost_factor=64, decision=[1, 1])
l57, l58 = sch.split(loop=l9, factors=[v55, v56], preserve_unit_iters=True)
v59, v60 = sch.sample_perfect_tile(loop=l10, n=2, max_innermost_factor=64, decision=[1, 1])
l61, l62 = sch.split(loop=l10, factors=[v59, v60], preserve_unit_iters=True)
sch.reorder(l15, l23, l31, l39, l47, l16, l24, l32, l40, l48, l53, l57, l61, l17, l25, l33, l41, l49, l54, l58, l62, l18, l26, l34, l42, l50)
b63, = sch.get_consumers(block=b0)
sch.reverse_compute_at(block=b63, loop=l48, preserve_unit_loops=True, index=-1)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.vectorize", ann_val=64)
v64 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=2)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.unroll_explicit", ann_val=v64)
2024-04-29 02:32:34 [INFO] [task_scheduler.cc:170] Design space #2:
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(144), T.int64(28), T.int64(28), T.int64(4)), "float32"), p1: T.Buffer((T.int64(48), T.int64(144), T.int64(1), T.int64(1), T.int64(4), T.int64(4)), "float32"), p2: T.Buffer((T.int64(1), T.int64(48), T.int64(1), T.int64(1), T.int64(4)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(48), T.int64(28), T.int64(28), T.int64(4)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        with T.block("root"):
            T.reads()
            T.writes()
            T.block_attr({"meta_schedule.parallel": 768, "meta_schedule.unroll_explicit": 64, "meta_schedule.vectorize": 64})
            conv2d_NCHWc = T.alloc_buffer((T.int64(1), T.int64(48), T.int64(28), T.int64(28), T.int64(4)))
            for n_0, oc_chunk_0, oh_0, ow_0, oc_block_0 in T.grid(T.int64(1), T.int64(1), T.int64(7), T.int64(7), T.int64(2)):
                for n_1, oc_chunk_1, oh_1, ow_1, oc_block_1, ic_0, kh_0, kw_0, n_2, oc_chunk_2, oh_2, ow_2, oc_block_2, ic_1, kh_1, kw_1, n_3, oc_chunk_3, oh_3, ow_3, oc_block_3 in T.grid(T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(192), T.int64(1), T.int64(1), T.int64(1), T.int64(8), T.int64(2), T.int64(1), T.int64(1), T.int64(3), T.int64(1), T.int64(1), T.int64(1), T.int64(6), T.int64(2), T.int64(4), T.int64(1)):
                    with T.block("conv2d_NCHWc"):
                        v_n = T.axis.spatial(T.int64(1), n_0 + n_1 + n_2 + n_3)
                        v_oc_chunk = T.axis.spatial(T.int64(48), oc_chunk_0 * T.int64(48) + oc_chunk_1 * T.int64(48) + oc_chunk_2 * T.int64(6) + oc_chunk_3)
                        v_oh = T.axis.spatial(T.int64(28), oh_0 * T.int64(4) + oh_1 * T.int64(4) + oh_2 * T.int64(2) + oh_3)
                        v_ow = T.axis.spatial(T.int64(28), ow_0 * T.int64(4) + ow_1 * T.int64(4) + ow_2 * T.int64(4) + ow_3)
                        v_oc_block = T.axis.spatial(T.int64(4), oc_block_0 * T.int64(2) + oc_block_1 + oc_block_2 + oc_block_3)
                        v_ic = T.axis.reduce(T.int64(576), ic_0 * T.int64(3) + ic_1)
                        v_kh = T.axis.reduce(T.int64(1), kh_0 + kh_1)
                        v_kw = T.axis.reduce(T.int64(1), kw_0 + kw_1)
                        T.reads(p0[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)], p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block])
                        T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                        T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                        with T.init():
                            conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = T.float32(0)
                        conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] + p0[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)] * p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block]
                for ax0, ax1, ax2, ax3, ax4 in T.grid(T.int64(1), T.int64(48), T.int64(4), T.int64(4), T.int64(2)):
                    with T.block("T_relu"):
                        v_ax0, v_ax1 = T.axis.remap("SS", [ax0, ax1])
                        v_ax2 = T.axis.spatial(T.int64(28), oh_0 * T.int64(4) + ax2)
                        v_ax3 = T.axis.spatial(T.int64(28), ow_0 * T.int64(4) + ax3)
                        v_ax4 = T.axis.spatial(T.int64(4), oc_block_0 * T.int64(2) + ax4)
                        T.reads(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4])
                        T.writes(T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                        T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.max(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] + p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4], T.float32(0))
b0 = sch.get_block(name="conv2d_NCHWc", func_name="main")
b1 = sch.get_block(name="T_add", func_name="main")
b2 = sch.get_block(name="root", func_name="main")
sch.compute_inline(block=b1)
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.tiling_structure", ann_val="SSRSRS")
l3, l4, l5, l6, l7, l8, l9, l10 = sch.get_loops(block=b0)
v11, v12, v13, v14 = sch.sample_perfect_tile(loop=l3, n=4, max_innermost_factor=64, decision=[1, 1, 1, 1])
l15, l16, l17, l18 = sch.split(loop=l3, factors=[v11, v12, v13, v14], preserve_unit_iters=True)
v19, v20, v21, v22 = sch.sample_perfect_tile(loop=l4, n=4, max_innermost_factor=64, decision=[1, 1, 8, 6])
l23, l24, l25, l26 = sch.split(loop=l4, factors=[v19, v20, v21, v22], preserve_unit_iters=True)
v27, v28, v29, v30 = sch.sample_perfect_tile(loop=l5, n=4, max_innermost_factor=64, decision=[7, 1, 2, 2])
l31, l32, l33, l34 = sch.split(loop=l5, factors=[v27, v28, v29, v30], preserve_unit_iters=True)
v35, v36, v37, v38 = sch.sample_perfect_tile(loop=l6, n=4, max_innermost_factor=64, decision=[7, 1, 1, 4])
l39, l40, l41, l42 = sch.split(loop=l6, factors=[v35, v36, v37, v38], preserve_unit_iters=True)
v43, v44, v45, v46 = sch.sample_perfect_tile(loop=l7, n=4, max_innermost_factor=64, decision=[2, 2, 1, 1])
l47, l48, l49, l50 = sch.split(loop=l7, factors=[v43, v44, v45, v46], preserve_unit_iters=True)
v51, v52 = sch.sample_perfect_tile(loop=l8, n=2, max_innermost_factor=64, decision=[192, 3])
l53, l54 = sch.split(loop=l8, factors=[v51, v52], preserve_unit_iters=True)
v55, v56 = sch.sample_perfect_tile(loop=l9, n=2, max_innermost_factor=64, decision=[1, 1])
l57, l58 = sch.split(loop=l9, factors=[v55, v56], preserve_unit_iters=True)
v59, v60 = sch.sample_perfect_tile(loop=l10, n=2, max_innermost_factor=64, decision=[1, 1])
l61, l62 = sch.split(loop=l10, factors=[v59, v60], preserve_unit_iters=True)
sch.reorder(l15, l23, l31, l39, l47, l16, l24, l32, l40, l48, l53, l57, l61, l17, l25, l33, l41, l49, l54, l58, l62, l18, l26, l34, l42, l50)
b63, = sch.get_consumers(block=b0)
sch.reverse_compute_at(block=b63, loop=l47, preserve_unit_loops=True, index=-1)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.vectorize", ann_val=64)
v64 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=2)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.unroll_explicit", ann_val=v64)
2024-04-29 04:15:41 [INFO] [evolutionary_search.cc:713] Generating candidates......
2024-04-29 04:15:42 [INFO] [evolutionary_search.cc:715] Picked top 0 candidate(s) from database
2024-04-29 04:15:44 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x133c99f8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x315b128)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x70d3958)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0xf28aba8)]: 0 failure(s)
2024-04-29 04:15:44 [INFO] [evolutionary_search.cc:723] Sampled 512 candidate(s)
2024-04-29 04:15:47 [INFO] [evolutionary_search.cc:621] Evolve iter #0 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x133c99f8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x315b128)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x70d3958)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0xf28aba8)]: 0 failure(s)
2024-04-29 04:15:50 [INFO] [evolutionary_search.cc:621] Evolve iter #1 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x133c99f8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x315b128)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x70d3958)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0xf28aba8)]: 0 failure(s)
2024-04-29 04:15:53 [INFO] [evolutionary_search.cc:621] Evolve iter #2 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x133c99f8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x315b128)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x70d3958)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0xf28aba8)]: 0 failure(s)
2024-04-29 04:15:57 [INFO] [evolutionary_search.cc:621] Evolve iter #3 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x133c99f8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x315b128)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x70d3958)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0xf28aba8)]: 0 failure(s)
2024-04-29 04:15:57 [INFO] [evolutionary_search.cc:649] Scores of the best 64 candidates:
[1 : 16]:	0.9992  0.9990  0.9985  0.9983  0.9977  0.9971  0.9967  0.9967  0.9960  0.9960  0.9959  0.9950  0.9949  0.9948  0.9947  0.9939
[17 : 32]:	0.9937  0.9934  0.9932  0.9928  0.9926  0.9906  0.9901  0.9898  0.9896  0.9895  0.9894  0.9893  0.9893  0.9891  0.9888  0.9887
[33 : 48]:	0.9877  0.9876  0.9875  0.9874  0.9873  0.9870  0.9856  0.9854  0.9852  0.9850  0.9849  0.9847  0.9841  0.9838  0.9837  0.9834
[49 : 64]:	0.9823  0.9821  0.9813  0.9813  0.9801  0.9793  0.9776  0.9770  0.9763  0.9762  0.9756  0.9756  0.9751  0.9745  0.9743  0.9735
2024-04-29 04:15:58 [INFO] [evolutionary_search.cc:727] Got 64 candidate(s) with evolutionary search
2024-04-29 04:15:58 [INFO] [evolutionary_search.cc:730] Sending 64 candidates(s) for measurement
2024-04-29 05:09:18 [INFO] [task_scheduler.cc:131] [Task #65: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_63] Trial #1: GFLOPs: 100.7380. Time: 1724.3673 us. Best GFLOPs: 100.7380
2024-04-29 05:09:18 [INFO] [task_scheduler.cc:131] [Task #65: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_63] Trial #2: GFLOPs: 11.6277. Time: 14939.2180 us. Best GFLOPs: 100.7380
2024-04-29 05:09:19 [INFO] [task_scheduler.cc:121] [Task #65: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_63] Trial #3: Error in building:
LocalBuilder: Timeout, killed after 30.0 seconds
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(144), T.int64(28), T.int64(28), T.int64(4)), "float32"), p1: T.Buffer((T.int64(48), T.int64(144), T.int64(1), T.int64(1), T.int64(4), T.int64(4)), "float32"), p2: T.Buffer((T.int64(1), T.int64(48), T.int64(1), T.int64(1), T.int64(4)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(48), T.int64(28), T.int64(28), T.int64(4)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        conv2d_NCHWc = T.alloc_buffer((T.int64(1), T.int64(48), T.int64(28), T.int64(28), T.int64(4)))
        for n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused in T.parallel(T.int64(8), annotations={"pragma_auto_unroll_max_step": 512, "pragma_unroll_explicit": 1}):
            for n_2_init, oc_chunk_2_init, oh_2_init, ow_2_init, oc_block_2_init, n_3_init, oc_chunk_3_init, oh_3_init, ow_3_init in T.grid(T.int64(1), T.int64(8), T.int64(2), T.int64(2), T.int64(1), T.int64(1), T.int64(3), T.int64(7), T.int64(14)):
                for oc_block_3_fused_init in T.vectorized(T.int64(2)):
                    with T.block("conv2d_NCHWc_init"):
                        v_n = T.axis.spatial(T.int64(1), n_2_init + n_3_init)
                        v_oc_chunk = T.axis.spatial(T.int64(48), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused // T.int64(4) * T.int64(24) + oc_chunk_2_init * T.int64(3) + oc_chunk_3_init)
                        v_oh = T.axis.spatial(T.int64(28), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused % T.int64(4) // T.int64(2) * T.int64(14) + oh_2_init * T.int64(7) + oh_3_init)
                        v_ow = T.axis.spatial(T.int64(28), ow_2_init * T.int64(14) + ow_3_init)
                        v_oc_block = T.axis.spatial(T.int64(4), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused % T.int64(2) * T.int64(2) + oc_block_2_init * T.int64(2) + oc_block_3_fused_init)
                        T.reads()
                        T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                        T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                        conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = T.float32(0)
            for ic_0, kh_0, kw_0, n_2, oc_chunk_2, oh_2, ow_2, oc_block_2, ic_1, kh_1, kw_1, n_3, oc_chunk_3, oh_3, ow_3 in T.grid(T.int64(576), T.int64(1), T.int64(1), T.int64(1), T.int64(8), T.int64(2), T.int64(2), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(3), T.int64(7), T.int64(14)):
                for oc_block_3_fused in T.vectorized(T.int64(2)):
                    with T.block("conv2d_NCHWc_update"):
                        v_n = T.axis.spatial(T.int64(1), n_2 + n_3)
                        v_oc_chunk = T.axis.spatial(T.int64(48), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused // T.int64(4) * T.int64(24) + oc_chunk_2 * T.int64(3) + oc_chunk_3)
                        v_oh = T.axis.spatial(T.int64(28), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused % T.int64(4) // T.int64(2) * T.int64(14) + oh_2 * T.int64(7) + oh_3)
                        v_ow = T.axis.spatial(T.int64(28), ow_2 * T.int64(14) + ow_3)
                        v_oc_block = T.axis.spatial(T.int64(4), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused % T.int64(2) * T.int64(2) + oc_block_2 * T.int64(2) + oc_block_3_fused)
                        v_ic = T.axis.reduce(T.int64(576), ic_0 + ic_1)
                        v_kh = T.axis.reduce(T.int64(1), kh_0 + kh_1)
                        v_kw = T.axis.reduce(T.int64(1), kw_0 + kw_1)
                        T.reads(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block], p0[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)], p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block])
                        T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                        T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                        conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] + p0[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)] * p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block]
        for ax0_ax1_ax2_ax3_ax4_fused_0 in T.parallel(T.int64(2352)):
            for ax0_ax1_ax2_ax3_ax4_fused_1 in T.vectorized(T.int64(64)):
                with T.block("T_relu"):
                    v_ax0 = T.axis.spatial(T.int64(1), T.int64(0))
                    v_ax1 = T.axis.spatial(T.int64(48), (ax0_ax1_ax2_ax3_ax4_fused_0 * T.int64(64) + ax0_ax1_ax2_ax3_ax4_fused_1) // T.int64(3136))
                    v_ax2 = T.axis.spatial(T.int64(28), (ax0_ax1_ax2_ax3_ax4_fused_0 * T.int64(64) + ax0_ax1_ax2_ax3_ax4_fused_1) % T.int64(3136) // T.int64(112))
                    v_ax3 = T.axis.spatial(T.int64(28), (ax0_ax1_ax2_ax3_ax4_fused_0 * T.int64(64) + ax0_ax1_ax2_ax3_ax4_fused_1) % T.int64(112) // T.int64(4))
                    v_ax4 = T.axis.spatial(T.int64(4), (ax0_ax1_ax2_ax3_ax4_fused_0 * T.int64(64) + ax0_ax1_ax2_ax3_ax4_fused_1) % T.int64(4))
                    T.reads(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4])
                    T.writes(T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                    T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.max(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] + p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4], T.float32(0))
b0 = sch.get_block(name="conv2d_NCHWc", func_name="main")
b1 = sch.get_block(name="T_add", func_name="main")
b2 = sch.get_block(name="root", func_name="main")
sch.compute_inline(block=b1)
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.tiling_structure", ann_val="SSRSRS")
l3, l4, l5, l6, l7, l8, l9, l10 = sch.get_loops(block=b0)
v11, v12, v13, v14 = sch.sample_perfect_tile(loop=l3, n=4, max_innermost_factor=64, decision=[1, 1, 1, 1])
l15, l16, l17, l18 = sch.split(loop=l3, factors=[v11, v12, v13, v14], preserve_unit_iters=True)
v19, v20, v21, v22 = sch.sample_perfect_tile(loop=l4, n=4, max_innermost_factor=64, decision=[2, 1, 8, 3])
l23, l24, l25, l26 = sch.split(loop=l4, factors=[v19, v20, v21, v22], preserve_unit_iters=True)
v27, v28, v29, v30 = sch.sample_perfect_tile(loop=l5, n=4, max_innermost_factor=64, decision=[1, 2, 2, 7])
l31, l32, l33, l34 = sch.split(loop=l5, factors=[v27, v28, v29, v30], preserve_unit_iters=True)
v35, v36, v37, v38 = sch.sample_perfect_tile(loop=l6, n=4, max_innermost_factor=64, decision=[1, 1, 2, 14])
l39, l40, l41, l42 = sch.split(loop=l6, factors=[v35, v36, v37, v38], preserve_unit_iters=True)
v43, v44, v45, v46 = sch.sample_perfect_tile(loop=l7, n=4, max_innermost_factor=64, decision=[1, 2, 1, 2])
l47, l48, l49, l50 = sch.split(loop=l7, factors=[v43, v44, v45, v46], preserve_unit_iters=True)
v51, v52 = sch.sample_perfect_tile(loop=l8, n=2, max_innermost_factor=64, decision=[576, 1])
l53, l54 = sch.split(loop=l8, factors=[v51, v52], preserve_unit_iters=True)
v55, v56 = sch.sample_perfect_tile(loop=l9, n=2, max_innermost_factor=64, decision=[1, 1])
l57, l58 = sch.split(loop=l9, factors=[v55, v56], preserve_unit_iters=True)
v59, v60 = sch.sample_perfect_tile(loop=l10, n=2, max_innermost_factor=64, decision=[1, 1])
l61, l62 = sch.split(loop=l10, factors=[v59, v60], preserve_unit_iters=True)
sch.reorder(l15, l23, l31, l39, l47, l16, l24, l32, l40, l48, l53, l57, l61, l17, l25, l33, l41, l49, l54, l58, l62, l18, l26, l34, l42, l50)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.vectorize", ann_val=64)
v63 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.unroll_explicit", ann_val=v63)
sch.enter_postproc()
b64 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b64, ann_key="meta_schedule.parallel")
sch.unannotate(block_or_loop=b64, ann_key="meta_schedule.vectorize")
sch.unannotate(block_or_loop=b64, ann_key="meta_schedule.unroll_explicit")
b65, b66 = sch.get_child_blocks(b64)
l67, l68, l69, l70, l71, l72, l73, l74, l75, l76, l77, l78, l79, l80, l81, l82, l83, l84, l85, l86, l87, l88, l89, l90, l91, l92 = sch.get_loops(block=b65)
l93 = sch.fuse(l67, l68, l69, l70, l71, l72, l73, l74, l75, l76, preserve_unit_iters=True)
sch.parallel(loop=l93)
l94 = sch.fuse(l92, preserve_unit_iters=True)
sch.vectorize(loop=l94)
sch.annotate(block_or_loop=l93, ann_key="pragma_auto_unroll_max_step", ann_val=512)
sch.annotate(block_or_loop=l93, ann_key="pragma_unroll_explicit", ann_val=1)
l95, l96, l97, l98, l99 = sch.get_loops(block=b66)
l100 = sch.fuse(l95, l96, l97, l98, l99, preserve_unit_iters=True)
l101, l102 = sch.split(loop=l100, factors=[None, 64], preserve_unit_iters=True)
sch.parallel(loop=l101)
sch.vectorize(loop=l102)
b103 = sch.get_block(name="conv2d_NCHWc", func_name="main")
l104, l105, l106, l107, l108, l109, l110, l111, l112, l113, l114, l115, l116, l117, l118, l119, l120 = sch.get_loops(block=b103)
b121 = sch.decompose_reduction(block=b103, loop=l105)
2024-04-29 05:09:19 [INFO] [task_scheduler.cc:131] [Task #65: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_63] Trial #4: GFLOPs: 54.8216. Time: 3168.6318 us. Best GFLOPs: 100.7380
2024-04-29 05:09:19 [INFO] [task_scheduler.cc:131] [Task #65: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_63] Trial #5: GFLOPs: 45.8530. Time: 3788.3946 us. Best GFLOPs: 100.7380
2024-04-29 05:09:19 [INFO] [task_scheduler.cc:121] [Task #65: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_63] Trial #6: Error in building:
LocalBuilder: Timeout, killed after 30.0 seconds
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(144), T.int64(28), T.int64(28), T.int64(4)), "float32"), p1: T.Buffer((T.int64(48), T.int64(144), T.int64(1), T.int64(1), T.int64(4), T.int64(4)), "float32"), p2: T.Buffer((T.int64(1), T.int64(48), T.int64(1), T.int64(1), T.int64(4)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(48), T.int64(28), T.int64(28), T.int64(4)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        conv2d_NCHWc = T.alloc_buffer((T.int64(1), T.int64(48), T.int64(28), T.int64(28), T.int64(4)))
        for n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused in T.parallel(T.int64(16), annotations={"pragma_auto_unroll_max_step": 512, "pragma_unroll_explicit": 1}):
            for n_2_init, oc_chunk_2_init, oh_2_init, ow_2_init, oc_block_2_init, n_3_init, oc_chunk_3_init, oh_3_init, ow_3_init in T.grid(T.int64(1), T.int64(8), T.int64(2), T.int64(1), T.int64(1), T.int64(1), T.int64(3), T.int64(7), T.int64(14)):
                for oc_block_3_fused_init in T.vectorized(T.int64(2)):
                    with T.block("conv2d_NCHWc_init"):
                        v_n = T.axis.spatial(T.int64(1), n_2_init + n_3_init)
                        v_oc_chunk = T.axis.spatial(T.int64(48), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused // T.int64(8) * T.int64(24) + oc_chunk_2_init * T.int64(3) + oc_chunk_3_init)
                        v_oh = T.axis.spatial(T.int64(28), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused % T.int64(4) // T.int64(2) * T.int64(14) + oh_2_init * T.int64(7) + oh_3_init)
                        v_ow = T.axis.spatial(T.int64(28), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused % T.int64(8) // T.int64(4) * T.int64(14) + ow_2_init * T.int64(14) + ow_3_init)
                        v_oc_block = T.axis.spatial(T.int64(4), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused % T.int64(2) * T.int64(2) + oc_block_2_init * T.int64(2) + oc_block_3_fused_init)
                        T.reads()
                        T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                        T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                        conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = T.float32(0)
            for ic_0, kh_0, kw_0, n_2, oc_chunk_2, oh_2, ow_2, oc_block_2, ic_1, kh_1, kw_1, n_3, oc_chunk_3, oh_3, ow_3 in T.grid(T.int64(576), T.int64(1), T.int64(1), T.int64(1), T.int64(8), T.int64(2), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(3), T.int64(7), T.int64(14)):
                for oc_block_3_fused in T.vectorized(T.int64(2)):
                    with T.block("conv2d_NCHWc_update"):
                        v_n = T.axis.spatial(T.int64(1), n_2 + n_3)
                        v_oc_chunk = T.axis.spatial(T.int64(48), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused // T.int64(8) * T.int64(24) + oc_chunk_2 * T.int64(3) + oc_chunk_3)
                        v_oh = T.axis.spatial(T.int64(28), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused % T.int64(4) // T.int64(2) * T.int64(14) + oh_2 * T.int64(7) + oh_3)
                        v_ow = T.axis.spatial(T.int64(28), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused % T.int64(8) // T.int64(4) * T.int64(14) + ow_2 * T.int64(14) + ow_3)
                        v_oc_block = T.axis.spatial(T.int64(4), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused % T.int64(2) * T.int64(2) + oc_block_2 * T.int64(2) + oc_block_3_fused)
                        v_ic = T.axis.reduce(T.int64(576), ic_0 + ic_1)
                        v_kh = T.axis.reduce(T.int64(1), kh_0 + kh_1)
                        v_kw = T.axis.reduce(T.int64(1), kw_0 + kw_1)
                        T.reads(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block], p0[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)], p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block])
                        T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                        T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                        conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] + p0[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)] * p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block]
        for ax0_ax1_ax2_ax3_ax4_fused_0 in T.parallel(T.int64(2352)):
            for ax0_ax1_ax2_ax3_ax4_fused_1 in T.vectorized(T.int64(64)):
                with T.block("T_relu"):
                    v_ax0 = T.axis.spatial(T.int64(1), T.int64(0))
                    v_ax1 = T.axis.spatial(T.int64(48), (ax0_ax1_ax2_ax3_ax4_fused_0 * T.int64(64) + ax0_ax1_ax2_ax3_ax4_fused_1) // T.int64(3136))
                    v_ax2 = T.axis.spatial(T.int64(28), (ax0_ax1_ax2_ax3_ax4_fused_0 * T.int64(64) + ax0_ax1_ax2_ax3_ax4_fused_1) % T.int64(3136) // T.int64(112))
                    v_ax3 = T.axis.spatial(T.int64(28), (ax0_ax1_ax2_ax3_ax4_fused_0 * T.int64(64) + ax0_ax1_ax2_ax3_ax4_fused_1) % T.int64(112) // T.int64(4))
                    v_ax4 = T.axis.spatial(T.int64(4), (ax0_ax1_ax2_ax3_ax4_fused_0 * T.int64(64) + ax0_ax1_ax2_ax3_ax4_fused_1) % T.int64(4))
                    T.reads(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4])
                    T.writes(T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                    T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.max(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] + p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4], T.float32(0))
b0 = sch.get_block(name="conv2d_NCHWc", func_name="main")
b1 = sch.get_block(name="T_add", func_name="main")
b2 = sch.get_block(name="root", func_name="main")
sch.compute_inline(block=b1)
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.tiling_structure", ann_val="SSRSRS")
l3, l4, l5, l6, l7, l8, l9, l10 = sch.get_loops(block=b0)
v11, v12, v13, v14 = sch.sample_perfect_tile(loop=l3, n=4, max_innermost_factor=64, decision=[1, 1, 1, 1])
l15, l16, l17, l18 = sch.split(loop=l3, factors=[v11, v12, v13, v14], preserve_unit_iters=True)
v19, v20, v21, v22 = sch.sample_perfect_tile(loop=l4, n=4, max_innermost_factor=64, decision=[2, 1, 8, 3])
l23, l24, l25, l26 = sch.split(loop=l4, factors=[v19, v20, v21, v22], preserve_unit_iters=True)
v27, v28, v29, v30 = sch.sample_perfect_tile(loop=l5, n=4, max_innermost_factor=64, decision=[1, 2, 2, 7])
l31, l32, l33, l34 = sch.split(loop=l5, factors=[v27, v28, v29, v30], preserve_unit_iters=True)
v35, v36, v37, v38 = sch.sample_perfect_tile(loop=l6, n=4, max_innermost_factor=64, decision=[2, 1, 1, 14])
l39, l40, l41, l42 = sch.split(loop=l6, factors=[v35, v36, v37, v38], preserve_unit_iters=True)
v43, v44, v45, v46 = sch.sample_perfect_tile(loop=l7, n=4, max_innermost_factor=64, decision=[1, 2, 1, 2])
l47, l48, l49, l50 = sch.split(loop=l7, factors=[v43, v44, v45, v46], preserve_unit_iters=True)
v51, v52 = sch.sample_perfect_tile(loop=l8, n=2, max_innermost_factor=64, decision=[576, 1])
l53, l54 = sch.split(loop=l8, factors=[v51, v52], preserve_unit_iters=True)
v55, v56 = sch.sample_perfect_tile(loop=l9, n=2, max_innermost_factor=64, decision=[1, 1])
l57, l58 = sch.split(loop=l9, factors=[v55, v56], preserve_unit_iters=True)
v59, v60 = sch.sample_perfect_tile(loop=l10, n=2, max_innermost_factor=64, decision=[1, 1])
l61, l62 = sch.split(loop=l10, factors=[v59, v60], preserve_unit_iters=True)
sch.reorder(l15, l23, l31, l39, l47, l16, l24, l32, l40, l48, l53, l57, l61, l17, l25, l33, l41, l49, l54, l58, l62, l18, l26, l34, l42, l50)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.vectorize", ann_val=64)
v63 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.unroll_explicit", ann_val=v63)
sch.enter_postproc()
b64 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b64, ann_key="meta_schedule.parallel")
sch.unannotate(block_or_loop=b64, ann_key="meta_schedule.vectorize")
sch.unannotate(block_or_loop=b64, ann_key="meta_schedule.unroll_explicit")
b65, b66 = sch.get_child_blocks(b64)
l67, l68, l69, l70, l71, l72, l73, l74, l75, l76, l77, l78, l79, l80, l81, l82, l83, l84, l85, l86, l87, l88, l89, l90, l91, l92 = sch.get_loops(block=b65)
l93 = sch.fuse(l67, l68, l69, l70, l71, l72, l73, l74, l75, l76, preserve_unit_iters=True)
sch.parallel(loop=l93)
l94 = sch.fuse(l92, preserve_unit_iters=True)
sch.vectorize(loop=l94)
sch.annotate(block_or_loop=l93, ann_key="pragma_auto_unroll_max_step", ann_val=512)
sch.annotate(block_or_loop=l93, ann_key="pragma_unroll_explicit", ann_val=1)
l95, l96, l97, l98, l99 = sch.get_loops(block=b66)
l100 = sch.fuse(l95, l96, l97, l98, l99, preserve_unit_iters=True)
l101, l102 = sch.split(loop=l100, factors=[None, 64], preserve_unit_iters=True)
sch.parallel(loop=l101)
sch.vectorize(loop=l102)
b103 = sch.get_block(name="conv2d_NCHWc", func_name="main")
l104, l105, l106, l107, l108, l109, l110, l111, l112, l113, l114, l115, l116, l117, l118, l119, l120 = sch.get_loops(block=b103)
b121 = sch.decompose_reduction(block=b103, loop=l105)
2024-04-29 05:09:19 [INFO] [task_scheduler.cc:131] [Task #65: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_63] Trial #7: GFLOPs: 65.2172. Time: 2663.5504 us. Best GFLOPs: 100.7380
2024-04-29 05:09:19 [INFO] [task_scheduler.cc:131] [Task #65: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_63] Trial #8: GFLOPs: 55.2331. Time: 3145.0218 us. Best GFLOPs: 100.7380
2024-04-29 05:09:19 [INFO] [task_scheduler.cc:131] [Task #65: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_63] Trial #9: GFLOPs: 205.7068. Time: 844.4512 us. Best GFLOPs: 205.7068
2024-04-29 05:09:19 [INFO] [task_scheduler.cc:131] [Task #65: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_63] Trial #10: GFLOPs: 43.3024. Time: 4011.5359 us. Best GFLOPs: 205.7068
2024-04-29 05:09:19 [INFO] [task_scheduler.cc:131] [Task #65: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_63] Trial #11: GFLOPs: 4.7332. Time: 36700.2860 us. Best GFLOPs: 205.7068
2024-04-29 05:09:19 [INFO] [task_scheduler.cc:131] [Task #65: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_63] Trial #12: GFLOPs: 159.7915. Time: 1087.0997 us. Best GFLOPs: 205.7068
2024-04-29 05:09:19 [INFO] [task_scheduler.cc:131] [Task #65: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_63] Trial #13: GFLOPs: 149.5509. Time: 1161.5394 us. Best GFLOPs: 205.7068
2024-04-29 05:09:19 [INFO] [task_scheduler.cc:131] [Task #65: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_63] Trial #14: GFLOPs: 6.8946. Time: 25194.9625 us. Best GFLOPs: 205.7068
2024-04-29 05:09:19 [INFO] [task_scheduler.cc:131] [Task #65: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_63] Trial #15: GFLOPs: 47.7686. Time: 3636.4779 us. Best GFLOPs: 205.7068
2024-04-29 05:09:19 [INFO] [task_scheduler.cc:131] [Task #65: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_63] Trial #16: GFLOPs: 46.9172. Time: 3702.4631 us. Best GFLOPs: 205.7068
2024-04-29 05:09:19 [INFO] [task_scheduler.cc:131] [Task #65: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_63] Trial #17: GFLOPs: 69.5774. Time: 2496.6333 us. Best GFLOPs: 205.7068
2024-04-29 05:09:19 [INFO] [task_scheduler.cc:131] [Task #65: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_63] Trial #18: GFLOPs: 18.8781. Time: 9201.6141 us. Best GFLOPs: 205.7068
2024-04-29 05:09:19 [INFO] [task_scheduler.cc:131] [Task #65: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_63] Trial #19: GFLOPs: 51.8658. Time: 3349.2078 us. Best GFLOPs: 205.7068
2024-04-29 05:09:19 [INFO] [task_scheduler.cc:131] [Task #65: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_63] Trial #20: GFLOPs: 9.0072. Time: 19285.5550 us. Best GFLOPs: 205.7068
2024-04-29 05:09:19 [INFO] [task_scheduler.cc:131] [Task #65: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_63] Trial #21: GFLOPs: 53.7464. Time: 3232.0202 us. Best GFLOPs: 205.7068
2024-04-29 05:09:19 [INFO] [task_scheduler.cc:131] [Task #65: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_63] Trial #22: GFLOPs: 76.1671. Time: 2280.6356 us. Best GFLOPs: 205.7068
2024-04-29 05:09:19 [INFO] [task_scheduler.cc:131] [Task #65: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_63] Trial #23: GFLOPs: 36.0334. Time: 4820.7836 us. Best GFLOPs: 205.7068
2024-04-29 05:09:19 [INFO] [task_scheduler.cc:131] [Task #65: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_63] Trial #24: GFLOPs: 86.2695. Time: 2013.5666 us. Best GFLOPs: 205.7068
2024-04-29 05:09:19 [INFO] [task_scheduler.cc:131] [Task #65: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_63] Trial #25: GFLOPs: 111.1025. Time: 1563.5046 us. Best GFLOPs: 205.7068
2024-04-29 05:09:19 [INFO] [task_scheduler.cc:131] [Task #65: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_63] Trial #26: GFLOPs: 65.1334. Time: 2666.9791 us. Best GFLOPs: 205.7068
2024-04-29 05:09:19 [INFO] [task_scheduler.cc:131] [Task #65: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_63] Trial #27: GFLOPs: 36.5642. Time: 4750.8030 us. Best GFLOPs: 205.7068
2024-04-29 05:09:19 [INFO] [task_scheduler.cc:131] [Task #65: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_63] Trial #28: GFLOPs: 11.6231. Time: 14945.2094 us. Best GFLOPs: 205.7068
2024-04-29 05:09:19 [INFO] [task_scheduler.cc:131] [Task #65: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_63] Trial #29: GFLOPs: 11.7766. Time: 14750.3233 us. Best GFLOPs: 205.7068
2024-04-29 05:09:19 [INFO] [task_scheduler.cc:131] [Task #65: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_63] Trial #30: GFLOPs: 68.5557. Time: 2533.8414 us. Best GFLOPs: 205.7068
2024-04-29 05:09:19 [INFO] [task_scheduler.cc:131] [Task #65: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_63] Trial #31: GFLOPs: 29.6902. Time: 5850.7335 us. Best GFLOPs: 205.7068
2024-04-29 05:09:19 [INFO] [task_scheduler.cc:131] [Task #65: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_63] Trial #32: GFLOPs: 12.4410. Time: 13962.6703 us. Best GFLOPs: 205.7068
2024-04-29 05:09:19 [INFO] [task_scheduler.cc:131] [Task #65: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_63] Trial #33: GFLOPs: 84.1919. Time: 2063.2556 us. Best GFLOPs: 205.7068
2024-04-29 05:09:19 [INFO] [task_scheduler.cc:131] [Task #65: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_63] Trial #34: GFLOPs: 65.3365. Time: 2658.6890 us. Best GFLOPs: 205.7068
2024-04-29 05:09:19 [INFO] [task_scheduler.cc:131] [Task #65: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_63] Trial #35: GFLOPs: 2.3920. Time: 72620.5210 us. Best GFLOPs: 205.7068
2024-04-29 05:09:19 [INFO] [task_scheduler.cc:121] [Task #65: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_63] Trial #36: Error in building:
LocalBuilder: Timeout, killed after 30.0 seconds
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(144), T.int64(28), T.int64(28), T.int64(4)), "float32"), p1: T.Buffer((T.int64(48), T.int64(144), T.int64(1), T.int64(1), T.int64(4), T.int64(4)), "float32"), p2: T.Buffer((T.int64(1), T.int64(48), T.int64(1), T.int64(1), T.int64(4)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(48), T.int64(28), T.int64(28), T.int64(4)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        conv2d_NCHWc = T.alloc_buffer((T.int64(1), T.int64(48), T.int64(28), T.int64(28), T.int64(4)))
        for n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused in T.parallel(T.int64(84), annotations={"pragma_auto_unroll_max_step": 512, "pragma_unroll_explicit": 1}):
            for n_2_init, oc_chunk_2_init, oh_2_init, ow_2_init, oc_block_2_init, n_3_init, oc_chunk_3_init, oh_3_init, ow_3_init in T.grid(T.int64(1), T.int64(4), T.int64(28), T.int64(1), T.int64(2), T.int64(1), T.int64(2), T.int64(1), T.int64(2)):
                for oc_block_3_fused_init in T.vectorized(T.int64(2)):
                    with T.block("conv2d_NCHWc_init"):
                        v_n = T.axis.spatial(T.int64(1), n_2_init + n_3_init)
                        v_oc_chunk = T.axis.spatial(T.int64(48), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused // T.int64(14) * T.int64(8) + oc_chunk_2_init * T.int64(2) + oc_chunk_3_init)
                        v_oh = T.axis.spatial(T.int64(28), oh_2_init + oh_3_init)
                        v_ow = T.axis.spatial(T.int64(28), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused % T.int64(14) * T.int64(2) + ow_2_init * T.int64(2) + ow_3_init)
                        v_oc_block = T.axis.spatial(T.int64(4), oc_block_2_init * T.int64(2) + oc_block_3_fused_init)
                        T.reads()
                        T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                        T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                        conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = T.float32(0)
            for ic_0, kh_0, kw_0, n_2, oc_chunk_2, oh_2, ow_2, oc_block_2, ic_1, kh_1, kw_1, n_3, oc_chunk_3, oh_3, ow_3 in T.grid(T.int64(12), T.int64(1), T.int64(1), T.int64(1), T.int64(4), T.int64(28), T.int64(1), T.int64(2), T.int64(48), T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(1), T.int64(2)):
                for oc_block_3_fused in T.vectorized(T.int64(2)):
                    with T.block("conv2d_NCHWc_update"):
                        v_n = T.axis.spatial(T.int64(1), n_2 + n_3)
                        v_oc_chunk = T.axis.spatial(T.int64(48), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused // T.int64(14) * T.int64(8) + oc_chunk_2 * T.int64(2) + oc_chunk_3)
                        v_oh = T.axis.spatial(T.int64(28), oh_2 + oh_3)
                        v_ow = T.axis.spatial(T.int64(28), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused % T.int64(14) * T.int64(2) + ow_2 * T.int64(2) + ow_3)
                        v_oc_block = T.axis.spatial(T.int64(4), oc_block_2 * T.int64(2) + oc_block_3_fused)
                        v_ic = T.axis.reduce(T.int64(576), ic_0 * T.int64(48) + ic_1)
                        v_kh = T.axis.reduce(T.int64(1), kh_0 + kh_1)
                        v_kw = T.axis.reduce(T.int64(1), kw_0 + kw_1)
                        T.reads(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block], p0[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)], p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block])
                        T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                        T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                        conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] + p0[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)] * p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block]
        for ax0_ax1_ax2_ax3_ax4_fused_0 in T.parallel(T.int64(2352)):
            for ax0_ax1_ax2_ax3_ax4_fused_1 in T.vectorized(T.int64(64)):
                with T.block("T_relu"):
                    v_ax0 = T.axis.spatial(T.int64(1), T.int64(0))
                    v_ax1 = T.axis.spatial(T.int64(48), (ax0_ax1_ax2_ax3_ax4_fused_0 * T.int64(64) + ax0_ax1_ax2_ax3_ax4_fused_1) // T.int64(3136))
                    v_ax2 = T.axis.spatial(T.int64(28), (ax0_ax1_ax2_ax3_ax4_fused_0 * T.int64(64) + ax0_ax1_ax2_ax3_ax4_fused_1) % T.int64(3136) // T.int64(112))
                    v_ax3 = T.axis.spatial(T.int64(28), (ax0_ax1_ax2_ax3_ax4_fused_0 * T.int64(64) + ax0_ax1_ax2_ax3_ax4_fused_1) % T.int64(112) // T.int64(4))
                    v_ax4 = T.axis.spatial(T.int64(4), (ax0_ax1_ax2_ax3_ax4_fused_0 * T.int64(64) + ax0_ax1_ax2_ax3_ax4_fused_1) % T.int64(4))
                    T.reads(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4])
                    T.writes(T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                    T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.max(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] + p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4], T.float32(0))
b0 = sch.get_block(name="conv2d_NCHWc", func_name="main")
b1 = sch.get_block(name="T_add", func_name="main")
b2 = sch.get_block(name="root", func_name="main")
sch.compute_inline(block=b1)
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.tiling_structure", ann_val="SSRSRS")
l3, l4, l5, l6, l7, l8, l9, l10 = sch.get_loops(block=b0)
v11, v12, v13, v14 = sch.sample_perfect_tile(loop=l3, n=4, max_innermost_factor=64, decision=[1, 1, 1, 1])
l15, l16, l17, l18 = sch.split(loop=l3, factors=[v11, v12, v13, v14], preserve_unit_iters=True)
v19, v20, v21, v22 = sch.sample_perfect_tile(loop=l4, n=4, max_innermost_factor=64, decision=[6, 1, 4, 2])
l23, l24, l25, l26 = sch.split(loop=l4, factors=[v19, v20, v21, v22], preserve_unit_iters=True)
v27, v28, v29, v30 = sch.sample_perfect_tile(loop=l5, n=4, max_innermost_factor=64, decision=[1, 1, 28, 1])
l31, l32, l33, l34 = sch.split(loop=l5, factors=[v27, v28, v29, v30], preserve_unit_iters=True)
v35, v36, v37, v38 = sch.sample_perfect_tile(loop=l6, n=4, max_innermost_factor=64, decision=[14, 1, 1, 2])
l39, l40, l41, l42 = sch.split(loop=l6, factors=[v35, v36, v37, v38], preserve_unit_iters=True)
v43, v44, v45, v46 = sch.sample_perfect_tile(loop=l7, n=4, max_innermost_factor=64, decision=[1, 1, 2, 2])
l47, l48, l49, l50 = sch.split(loop=l7, factors=[v43, v44, v45, v46], preserve_unit_iters=True)
v51, v52 = sch.sample_perfect_tile(loop=l8, n=2, max_innermost_factor=64, decision=[12, 48])
l53, l54 = sch.split(loop=l8, factors=[v51, v52], preserve_unit_iters=True)
v55, v56 = sch.sample_perfect_tile(loop=l9, n=2, max_innermost_factor=64, decision=[1, 1])
l57, l58 = sch.split(loop=l9, factors=[v55, v56], preserve_unit_iters=True)
v59, v60 = sch.sample_perfect_tile(loop=l10, n=2, max_innermost_factor=64, decision=[1, 1])
l61, l62 = sch.split(loop=l10, factors=[v59, v60], preserve_unit_iters=True)
sch.reorder(l15, l23, l31, l39, l47, l16, l24, l32, l40, l48, l53, l57, l61, l17, l25, l33, l41, l49, l54, l58, l62, l18, l26, l34, l42, l50)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.vectorize", ann_val=64)
v63 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.unroll_explicit", ann_val=v63)
sch.enter_postproc()
b64 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b64, ann_key="meta_schedule.parallel")
sch.unannotate(block_or_loop=b64, ann_key="meta_schedule.vectorize")
sch.unannotate(block_or_loop=b64, ann_key="meta_schedule.unroll_explicit")
b65, b66 = sch.get_child_blocks(b64)
l67, l68, l69, l70, l71, l72, l73, l74, l75, l76, l77, l78, l79, l80, l81, l82, l83, l84, l85, l86, l87, l88, l89, l90, l91, l92 = sch.get_loops(block=b65)
l93 = sch.fuse(l67, l68, l69, l70, l71, l72, l73, l74, l75, l76, preserve_unit_iters=True)
sch.parallel(loop=l93)
l94 = sch.fuse(l92, preserve_unit_iters=True)
sch.vectorize(loop=l94)
sch.annotate(block_or_loop=l93, ann_key="pragma_auto_unroll_max_step", ann_val=512)
sch.annotate(block_or_loop=l93, ann_key="pragma_unroll_explicit", ann_val=1)
l95, l96, l97, l98, l99 = sch.get_loops(block=b66)
l100 = sch.fuse(l95, l96, l97, l98, l99, preserve_unit_iters=True)
l101, l102 = sch.split(loop=l100, factors=[None, 64], preserve_unit_iters=True)
sch.parallel(loop=l101)
sch.vectorize(loop=l102)
b103 = sch.get_block(name="conv2d_NCHWc", func_name="main")
l104, l105, l106, l107, l108, l109, l110, l111, l112, l113, l114, l115, l116, l117, l118, l119, l120 = sch.get_loops(block=b103)
b121 = sch.decompose_reduction(block=b103, loop=l105)
2024-04-29 05:09:19 [INFO] [task_scheduler.cc:131] [Task #65: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_63] Trial #37: GFLOPs: 3.5119. Time: 49462.9947 us. Best GFLOPs: 205.7068
2024-04-29 05:09:19 [INFO] [task_scheduler.cc:131] [Task #65: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_63] Trial #38: GFLOPs: 54.4096. Time: 3192.6201 us. Best GFLOPs: 205.7068
2024-04-29 05:09:19 [INFO] [task_scheduler.cc:131] [Task #65: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_63] Trial #39: GFLOPs: 79.4018. Time: 2187.7250 us. Best GFLOPs: 205.7068
2024-04-29 05:09:19 [INFO] [task_scheduler.cc:131] [Task #65: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_63] Trial #40: GFLOPs: 35.6738. Time: 4869.3869 us. Best GFLOPs: 205.7068
2024-04-29 05:09:19 [INFO] [task_scheduler.cc:131] [Task #65: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_63] Trial #41: GFLOPs: 3.0546. Time: 56868.5340 us. Best GFLOPs: 205.7068
2024-04-29 05:09:19 [INFO] [task_scheduler.cc:131] [Task #65: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_63] Trial #42: GFLOPs: 15.4757. Time: 11224.6537 us. Best GFLOPs: 205.7068
2024-04-29 05:09:19 [INFO] [task_scheduler.cc:131] [Task #65: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_63] Trial #43: GFLOPs: 123.8689. Time: 1402.3640 us. Best GFLOPs: 205.7068
2024-04-29 05:09:19 [INFO] [task_scheduler.cc:131] [Task #65: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_63] Trial #44: GFLOPs: 7.1197. Time: 24398.2998 us. Best GFLOPs: 205.7068
2024-04-29 05:09:19 [INFO] [task_scheduler.cc:131] [Task #65: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_63] Trial #45: GFLOPs: 79.8155. Time: 2176.3851 us. Best GFLOPs: 205.7068
2024-04-29 05:09:19 [INFO] [task_scheduler.cc:131] [Task #65: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_63] Trial #46: GFLOPs: 67.0758. Time: 2589.7452 us. Best GFLOPs: 205.7068
2024-04-29 05:09:19 [INFO] [task_scheduler.cc:131] [Task #65: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_63] Trial #47: GFLOPs: 34.4108. Time: 5048.1098 us. Best GFLOPs: 205.7068
2024-04-29 05:09:19 [INFO] [task_scheduler.cc:131] [Task #65: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_63] Trial #48: GFLOPs: 76.3280. Time: 2275.8267 us. Best GFLOPs: 205.7068
2024-04-29 05:09:19 [INFO] [task_scheduler.cc:131] [Task #65: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_63] Trial #49: GFLOPs: 98.3734. Time: 1765.8158 us. Best GFLOPs: 205.7068
2024-04-29 05:09:19 [INFO] [task_scheduler.cc:131] [Task #65: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_63] Trial #50: GFLOPs: 80.0220. Time: 2170.7681 us. Best GFLOPs: 205.7068
2024-04-29 05:09:19 [INFO] [task_scheduler.cc:131] [Task #65: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_63] Trial #51: GFLOPs: 37.8947. Time: 4583.9960 us. Best GFLOPs: 205.7068
2024-04-29 05:09:19 [INFO] [task_scheduler.cc:131] [Task #65: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_63] Trial #52: GFLOPs: 80.4312. Time: 2159.7262 us. Best GFLOPs: 205.7068
2024-04-29 05:09:19 [INFO] [task_scheduler.cc:131] [Task #65: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_63] Trial #53: GFLOPs: 274.2380. Time: 633.4255 us. Best GFLOPs: 274.2380
2024-04-29 05:09:19 [INFO] [task_scheduler.cc:131] [Task #65: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_63] Trial #54: GFLOPs: 32.7975. Time: 5296.4236 us. Best GFLOPs: 274.2380
2024-04-29 05:09:19 [INFO] [task_scheduler.cc:131] [Task #65: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_63] Trial #55: GFLOPs: 153.2144. Time: 1133.7664 us. Best GFLOPs: 274.2380
2024-04-29 05:09:19 [INFO] [task_scheduler.cc:131] [Task #65: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_63] Trial #56: GFLOPs: 138.2890. Time: 1256.1330 us. Best GFLOPs: 274.2380
2024-04-29 05:09:19 [INFO] [task_scheduler.cc:131] [Task #65: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_63] Trial #57: GFLOPs: 70.1923. Time: 2474.7624 us. Best GFLOPs: 274.2380
2024-04-29 05:09:19 [INFO] [task_scheduler.cc:131] [Task #65: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_63] Trial #58: GFLOPs: 75.8833. Time: 2289.1652 us. Best GFLOPs: 274.2380
2024-04-29 05:09:19 [INFO] [task_scheduler.cc:131] [Task #65: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_63] Trial #59: GFLOPs: 1.2192. Time: 142478.2827 us. Best GFLOPs: 274.2380
2024-04-29 05:09:19 [INFO] [task_scheduler.cc:131] [Task #65: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_63] Trial #60: GFLOPs: 6.9131. Time: 25127.3944 us. Best GFLOPs: 274.2380
2024-04-29 05:09:19 [INFO] [task_scheduler.cc:131] [Task #65: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_63] Trial #61: GFLOPs: 15.5402. Time: 11178.0499 us. Best GFLOPs: 274.2380
2024-04-29 05:09:19 [INFO] [task_scheduler.cc:131] [Task #65: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_63] Trial #62: GFLOPs: 92.4271. Time: 1879.4196 us. Best GFLOPs: 274.2380
2024-04-29 05:09:19 [INFO] [task_scheduler.cc:131] [Task #65: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_63] Trial #63: GFLOPs: 79.4706. Time: 2185.8313 us. Best GFLOPs: 274.2380
2024-04-29 05:09:19 [INFO] [task_scheduler.cc:131] [Task #65: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_63] Trial #64: GFLOPs: 22.8938. Time: 7587.6079 us. Best GFLOPs: 274.2380
2024-04-29 07:23:56 [INFO] [evolutionary_search.cc:713] Generating candidates......
2024-04-29 07:23:57 [INFO] [evolutionary_search.cc:715] Picked top 61 candidate(s) from database
2024-04-29 07:23:59 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x133c99f8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x315b128)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x70d3958)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0xf28aba8)]: 0 failure(s)
2024-04-29 07:23:59 [INFO] [evolutionary_search.cc:723] Sampled 451 candidate(s)
2024-04-29 07:24:04 [INFO] [evolutionary_search.cc:621] Evolve iter #0 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x133c99f8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x315b128)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x70d3958)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0xf28aba8)]: 0 failure(s)
2024-04-29 07:24:10 [INFO] [evolutionary_search.cc:621] Evolve iter #1 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x133c99f8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x315b128)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x70d3958)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0xf28aba8)]: 0 failure(s)
2024-04-29 07:24:15 [INFO] [evolutionary_search.cc:621] Evolve iter #2 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x133c99f8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x315b128)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x70d3958)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0xf28aba8)]: 0 failure(s)
2024-04-29 07:24:21 [INFO] [evolutionary_search.cc:621] Evolve iter #3 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x133c99f8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x315b128)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x70d3958)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0xf28aba8)]: 0 failure(s)
2024-04-29 07:24:24 [INFO] [evolutionary_search.cc:649] Scores of the best 64 candidates:
[1 : 16]:	0.7893  0.6963  0.6919  0.6899  0.6895  0.6827  0.6796  0.6785  0.6784  0.6752  0.6752  0.6735  0.6696  0.6658  0.6658  0.6593
[17 : 32]:	0.6584  0.6574  0.6559  0.6529  0.6518  0.6507  0.6503  0.6498  0.6469  0.6430  0.6421  0.6377  0.6376  0.6367  0.6326  0.6295
[33 : 48]:	0.6292  0.6290  0.6275  0.6273  0.6258  0.6240  0.6219  0.6219  0.6219  0.6206  0.6182  0.6154  0.6147  0.6147  0.6139  0.6133
[49 : 64]:	0.6133  0.6099  0.6099  0.6099  0.6096  0.6079  0.6072  0.6067  0.6065  0.6032  0.6000  0.5996  0.5990  0.5981  0.5971  0.5926
2024-04-29 07:24:24 [INFO] [evolutionary_search.cc:727] Got 64 candidate(s) with evolutionary search
2024-04-29 07:24:24 [INFO] [evolutionary_search.cc:730] Sending 64 candidates(s) for measurement
2024-04-29 07:25:44 [INFO] [task_scheduler.cc:131] [Task #65: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_63] Trial #65: GFLOPs: 227.4198. Time: 763.8268 us. Best GFLOPs: 274.2380
2024-04-29 07:25:44 [INFO] [task_scheduler.cc:131] [Task #65: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_63] Trial #66: GFLOPs: 127.0690. Time: 1367.0474 us. Best GFLOPs: 274.2380
2024-04-29 07:25:44 [INFO] [task_scheduler.cc:131] [Task #65: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_63] Trial #67: GFLOPs: 204.3929. Time: 849.8793 us. Best GFLOPs: 274.2380
2024-04-29 07:25:44 [INFO] [task_scheduler.cc:131] [Task #65: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_63] Trial #68: GFLOPs: 222.2599. Time: 781.5594 us. Best GFLOPs: 274.2380
2024-04-29 07:25:44 [INFO] [task_scheduler.cc:131] [Task #65: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_63] Trial #69: GFLOPs: 419.5173. Time: 414.0695 us. Best GFLOPs: 419.5173
2024-04-29 07:25:44 [INFO] [task_scheduler.cc:131] [Task #65: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_63] Trial #70: GFLOPs: 213.7171. Time: 812.8004 us. Best GFLOPs: 419.5173
2024-04-29 07:25:44 [INFO] [task_scheduler.cc:131] [Task #65: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_63] Trial #71: GFLOPs: 167.2350. Time: 1038.7138 us. Best GFLOPs: 419.5173
2024-04-29 07:25:44 [INFO] [task_scheduler.cc:131] [Task #65: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_63] Trial #72: GFLOPs: 223.8506. Time: 776.0056 us. Best GFLOPs: 419.5173
2024-04-29 07:25:44 [INFO] [task_scheduler.cc:131] [Task #65: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_63] Trial #73: GFLOPs: 216.8294. Time: 801.1334 us. Best GFLOPs: 419.5173
2024-04-29 07:25:44 [INFO] [task_scheduler.cc:131] [Task #65: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_63] Trial #74: GFLOPs: 217.4027. Time: 799.0209 us. Best GFLOPs: 419.5173
2024-04-29 07:25:44 [INFO] [task_scheduler.cc:131] [Task #65: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_63] Trial #75: GFLOPs: 216.4943. Time: 802.3737 us. Best GFLOPs: 419.5173
2024-04-29 07:25:44 [INFO] [task_scheduler.cc:131] [Task #65: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_63] Trial #76: GFLOPs: 294.5266. Time: 589.7917 us. Best GFLOPs: 419.5173
2024-04-29 07:25:45 [INFO] [task_scheduler.cc:131] [Task #65: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_63] Trial #77: GFLOPs: 91.9169. Time: 1889.8522 us. Best GFLOPs: 419.5173
2024-04-29 07:25:45 [INFO] [task_scheduler.cc:131] [Task #65: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_63] Trial #78: GFLOPs: 264.7431. Time: 656.1429 us. Best GFLOPs: 419.5173
2024-04-29 07:25:45 [INFO] [task_scheduler.cc:131] [Task #65: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_63] Trial #79: GFLOPs: 265.5849. Time: 654.0632 us. Best GFLOPs: 419.5173
2024-04-29 07:25:45 [INFO] [task_scheduler.cc:131] [Task #65: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_63] Trial #80: GFLOPs: 299.0925. Time: 580.7880 us. Best GFLOPs: 419.5173
2024-04-29 07:25:45 [INFO] [task_scheduler.cc:131] [Task #65: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_63] Trial #81: GFLOPs: 174.7014. Time: 994.3210 us. Best GFLOPs: 419.5173
2024-04-29 07:25:45 [INFO] [task_scheduler.cc:131] [Task #65: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_63] Trial #82: GFLOPs: 200.7978. Time: 865.0958 us. Best GFLOPs: 419.5173
2024-04-29 07:25:45 [INFO] [task_scheduler.cc:131] [Task #65: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_63] Trial #83: GFLOPs: 102.9512. Time: 1687.2983 us. Best GFLOPs: 419.5173
2024-04-29 07:25:45 [INFO] [task_scheduler.cc:131] [Task #65: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_63] Trial #84: GFLOPs: 292.6748. Time: 593.5233 us. Best GFLOPs: 419.5173
2024-04-29 07:25:45 [INFO] [task_scheduler.cc:131] [Task #65: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_63] Trial #85: GFLOPs: 183.1494. Time: 948.4569 us. Best GFLOPs: 419.5173
2024-04-29 07:25:45 [INFO] [task_scheduler.cc:131] [Task #65: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_63] Trial #86: GFLOPs: 143.6089. Time: 1209.6002 us. Best GFLOPs: 419.5173
2024-04-29 07:25:45 [INFO] [task_scheduler.cc:131] [Task #65: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_63] Trial #87: GFLOPs: 105.8700. Time: 1640.7801 us. Best GFLOPs: 419.5173
2024-04-29 07:25:45 [INFO] [task_scheduler.cc:131] [Task #65: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_63] Trial #88: GFLOPs: 78.1317. Time: 2223.2893 us. Best GFLOPs: 419.5173
2024-04-29 07:25:45 [INFO] [task_scheduler.cc:131] [Task #65: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_63] Trial #89: GFLOPs: 238.5183. Time: 728.2849 us. Best GFLOPs: 419.5173
2024-04-29 07:25:45 [INFO] [task_scheduler.cc:131] [Task #65: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_63] Trial #90: GFLOPs: 303.4343. Time: 572.4775 us. Best GFLOPs: 419.5173
2024-04-29 07:25:45 [INFO] [task_scheduler.cc:131] [Task #65: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_63] Trial #91: GFLOPs: 206.2028. Time: 842.4198 us. Best GFLOPs: 419.5173
2024-04-29 07:25:45 [INFO] [task_scheduler.cc:131] [Task #65: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_63] Trial #92: GFLOPs: 184.2331. Time: 942.8781 us. Best GFLOPs: 419.5173
2024-04-29 07:25:45 [INFO] [task_scheduler.cc:131] [Task #65: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_63] Trial #93: GFLOPs: 313.2384. Time: 554.5594 us. Best GFLOPs: 419.5173
2024-04-29 07:25:45 [INFO] [task_scheduler.cc:131] [Task #65: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_63] Trial #94: GFLOPs: 480.8735. Time: 361.2370 us. Best GFLOPs: 480.8735
2024-04-29 07:25:45 [INFO] [task_scheduler.cc:131] [Task #65: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_63] Trial #95: GFLOPs: 165.6834. Time: 1048.4412 us. Best GFLOPs: 480.8735
2024-04-29 07:25:45 [INFO] [task_scheduler.cc:131] [Task #65: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_63] Trial #96: GFLOPs: 293.3238. Time: 592.2100 us. Best GFLOPs: 480.8735
2024-04-29 07:25:45 [INFO] [task_scheduler.cc:131] [Task #65: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_63] Trial #97: GFLOPs: 156.2810. Time: 1111.5191 us. Best GFLOPs: 480.8735
2024-04-29 07:25:45 [INFO] [task_scheduler.cc:131] [Task #65: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_63] Trial #98: GFLOPs: 89.6426. Time: 1937.7987 us. Best GFLOPs: 480.8735
2024-04-29 07:25:45 [INFO] [task_scheduler.cc:131] [Task #65: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_63] Trial #99: GFLOPs: 117.9470. Time: 1472.7744 us. Best GFLOPs: 480.8735
2024-04-29 07:25:45 [INFO] [task_scheduler.cc:131] [Task #65: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_63] Trial #100: GFLOPs: 152.0512. Time: 1142.4393 us. Best GFLOPs: 480.8735
2024-04-29 07:25:45 [INFO] [task_scheduler.cc:131] [Task #65: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_63] Trial #101: GFLOPs: 165.9377. Time: 1046.8347 us. Best GFLOPs: 480.8735
2024-04-29 07:25:45 [INFO] [task_scheduler.cc:131] [Task #65: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_63] Trial #102: GFLOPs: 166.8318. Time: 1041.2240 us. Best GFLOPs: 480.8735
2024-04-29 07:25:45 [INFO] [task_scheduler.cc:131] [Task #65: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_63] Trial #103: GFLOPs: 312.1665. Time: 556.4636 us. Best GFLOPs: 480.8735
2024-04-29 07:25:45 [INFO] [task_scheduler.cc:131] [Task #65: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_63] Trial #104: GFLOPs: 81.5618. Time: 2129.7872 us. Best GFLOPs: 480.8735
2024-04-29 07:25:45 [INFO] [task_scheduler.cc:131] [Task #65: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_63] Trial #105: GFLOPs: 310.9483. Time: 558.6438 us. Best GFLOPs: 480.8735
2024-04-29 07:25:45 [INFO] [task_scheduler.cc:131] [Task #65: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_63] Trial #106: GFLOPs: 177.0194. Time: 981.3012 us. Best GFLOPs: 480.8735
2024-04-29 07:25:45 [INFO] [task_scheduler.cc:131] [Task #65: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_63] Trial #107: GFLOPs: 280.0205. Time: 620.3449 us. Best GFLOPs: 480.8735
2024-04-29 07:25:45 [INFO] [task_scheduler.cc:131] [Task #65: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_63] Trial #108: GFLOPs: 193.7672. Time: 896.4846 us. Best GFLOPs: 480.8735
2024-04-29 07:25:45 [INFO] [task_scheduler.cc:131] [Task #65: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_63] Trial #109: GFLOPs: 145.5967. Time: 1193.0851 us. Best GFLOPs: 480.8735
2024-04-29 07:25:45 [INFO] [task_scheduler.cc:131] [Task #65: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_63] Trial #110: GFLOPs: 153.3741. Time: 1132.5860 us. Best GFLOPs: 480.8735
2024-04-29 07:25:45 [INFO] [task_scheduler.cc:131] [Task #65: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_63] Trial #111: GFLOPs: 203.9892. Time: 851.5614 us. Best GFLOPs: 480.8735
2024-04-29 07:25:45 [INFO] [task_scheduler.cc:131] [Task #65: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_63] Trial #112: GFLOPs: 146.0103. Time: 1189.7055 us. Best GFLOPs: 480.8735
2024-04-29 07:25:45 [INFO] [task_scheduler.cc:131] [Task #65: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_63] Trial #113: GFLOPs: 186.1512. Time: 933.1623 us. Best GFLOPs: 480.8735
2024-04-29 07:25:45 [INFO] [task_scheduler.cc:131] [Task #65: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_63] Trial #114: GFLOPs: 157.2949. Time: 1104.3542 us. Best GFLOPs: 480.8735
2024-04-29 07:25:45 [INFO] [task_scheduler.cc:131] [Task #65: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_63] Trial #115: GFLOPs: 193.9048. Time: 895.8485 us. Best GFLOPs: 480.8735
2024-04-29 07:25:45 [INFO] [task_scheduler.cc:131] [Task #65: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_63] Trial #116: GFLOPs: 162.8771. Time: 1066.5057 us. Best GFLOPs: 480.8735
2024-04-29 07:25:45 [INFO] [task_scheduler.cc:131] [Task #65: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_63] Trial #117: GFLOPs: 194.8744. Time: 891.3913 us. Best GFLOPs: 480.8735
2024-04-29 07:25:45 [INFO] [task_scheduler.cc:131] [Task #65: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_63] Trial #118: GFLOPs: 95.1575. Time: 1825.4929 us. Best GFLOPs: 480.8735
2024-04-29 07:25:45 [INFO] [task_scheduler.cc:131] [Task #65: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_63] Trial #119: GFLOPs: 122.8259. Time: 1414.2721 us. Best GFLOPs: 480.8735
2024-04-29 07:25:45 [INFO] [task_scheduler.cc:131] [Task #65: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_63] Trial #120: GFLOPs: 181.9997. Time: 954.4486 us. Best GFLOPs: 480.8735
2024-04-29 07:25:45 [INFO] [task_scheduler.cc:131] [Task #65: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_63] Trial #121: GFLOPs: 247.8565. Time: 700.8462 us. Best GFLOPs: 480.8735
2024-04-29 07:25:45 [INFO] [task_scheduler.cc:131] [Task #65: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_63] Trial #122: GFLOPs: 164.5731. Time: 1055.5145 us. Best GFLOPs: 480.8735
2024-04-29 07:25:45 [INFO] [task_scheduler.cc:131] [Task #65: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_63] Trial #123: GFLOPs: 146.8768. Time: 1182.6871 us. Best GFLOPs: 480.8735
2024-04-29 07:25:45 [INFO] [task_scheduler.cc:131] [Task #65: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_63] Trial #124: GFLOPs: 369.2757. Time: 470.4055 us. Best GFLOPs: 480.8735
2024-04-29 07:25:45 [INFO] [task_scheduler.cc:131] [Task #65: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_63] Trial #125: GFLOPs: 222.0997. Time: 782.1233 us. Best GFLOPs: 480.8735
2024-04-29 07:25:45 [INFO] [task_scheduler.cc:131] [Task #65: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_63] Trial #126: GFLOPs: 112.1840. Time: 1548.4323 us. Best GFLOPs: 480.8735
2024-04-29 07:25:45 [INFO] [task_scheduler.cc:131] [Task #65: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_63] Trial #127: GFLOPs: 49.2743. Time: 3525.3554 us. Best GFLOPs: 480.8735
2024-04-29 07:25:45 [INFO] [task_scheduler.cc:131] [Task #65: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_63] Trial #128: GFLOPs: 129.4988. Time: 1341.3970 us. Best GFLOPs: 480.8735
