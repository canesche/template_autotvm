2024-04-29 02:32:19 [INFO] [task_scheduler.cc:160] Initializing Task #61: "fused_nn_contrib_conv2d_NCHWc_1"
2024-04-29 02:32:19 [INFO] [task_scheduler.cc:35] 
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(48), T.int64(14), T.int64(14), T.int64(4)), "float32"), p1: T.Buffer((T.int64(12), T.int64(48), T.int64(3), T.int64(3), T.int64(4), T.int64(4)), "float32"), conv2d_NCHWc: T.Buffer((T.int64(1), T.int64(12), T.int64(14), T.int64(14), T.int64(4)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        data_pad = T.alloc_buffer((T.int64(1), T.int64(48), T.int64(16), T.int64(16), T.int64(4)))
        for i0, i1, i2, i3, i4 in T.grid(T.int64(1), T.int64(48), T.int64(16), T.int64(16), T.int64(4)):
            with T.block("data_pad"):
                v_i0, v_i1, v_i2, v_i3, v_i4 = T.axis.remap("SSSSS", [i0, i1, i2, i3, i4])
                T.reads(p0[v_i0, v_i1, v_i2 - T.int64(1), v_i3 - T.int64(1), v_i4])
                T.writes(data_pad[v_i0, v_i1, v_i2, v_i3, v_i4])
                data_pad[v_i0, v_i1, v_i2, v_i3, v_i4] = T.if_then_else(T.int64(1) <= v_i2 and v_i2 < T.int64(15) and T.int64(1) <= v_i3 and v_i3 < T.int64(15), p0[v_i0, v_i1, v_i2 - T.int64(1), v_i3 - T.int64(1), v_i4], T.float32(0))
        for n, oc_chunk, oh, ow, oc_block, ic, kh, kw in T.grid(T.int64(1), T.int64(12), T.int64(14), T.int64(14), T.int64(4), T.int64(192), T.int64(3), T.int64(3)):
            with T.block("conv2d_NCHWc"):
                v_n, v_oc_chunk, v_oh, v_ow, v_oc_block, v_ic, v_kh, v_kw = T.axis.remap("SSSSSRRR", [n, oc_chunk, oh, ow, oc_block, ic, kh, kw])
                T.reads(data_pad[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)], p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block])
                T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                with T.init():
                    conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = T.float32(0)
                conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] + data_pad[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)] * p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block]
2024-04-29 02:32:19 [INFO] [task_scheduler.cc:164] Total 3 design space(s) generated
2024-04-29 02:32:19 [INFO] [task_scheduler.cc:170] Design space #0:
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(48), T.int64(14), T.int64(14), T.int64(4)), "float32"), p1: T.Buffer((T.int64(12), T.int64(48), T.int64(3), T.int64(3), T.int64(4), T.int64(4)), "float32"), conv2d_NCHWc: T.Buffer((T.int64(1), T.int64(12), T.int64(14), T.int64(14), T.int64(4)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        with T.block("root"):
            T.reads()
            T.writes()
            T.block_attr({"meta_schedule.parallel": 768, "meta_schedule.unroll_explicit": 512, "meta_schedule.vectorize": 64})
            conv2d_NCHWc_global = T.alloc_buffer((T.int64(1), T.int64(12), T.int64(14), T.int64(14), T.int64(4)))
            for n_0, oc_chunk_0, oh_0, ow_0, oc_block_0, n_1, oc_chunk_1, oh_1, ow_1, oc_block_1 in T.grid(T.int64(1), T.int64(1), T.int64(7), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(1), T.int64(1)):
                for ic_0, kh_0, kw_0, n_2, oc_chunk_2, oh_2, ow_2, oc_block_2, ic_1, kh_1, kw_1, n_3, oc_chunk_3, oh_3, ow_3, oc_block_3 in T.grid(T.int64(96), T.int64(3), T.int64(3), T.int64(1), T.int64(12), T.int64(1), T.int64(7), T.int64(4), T.int64(2), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(1)):
                    with T.block("conv2d_NCHWc"):
                        v_n = T.axis.spatial(T.int64(1), n_0 + n_1 + n_2 + n_3)
                        v_oc_chunk = T.axis.spatial(T.int64(12), oc_chunk_0 * T.int64(12) + oc_chunk_1 * T.int64(12) + oc_chunk_2 + oc_chunk_3)
                        v_oh = T.axis.spatial(T.int64(14), oh_0 * T.int64(2) + oh_1 + oh_2 + oh_3)
                        v_ow = T.axis.spatial(T.int64(14), ow_0 * T.int64(14) + ow_1 * T.int64(14) + ow_2 * T.int64(2) + ow_3)
                        v_oc_block = T.axis.spatial(T.int64(4), oc_block_0 * T.int64(4) + oc_block_1 * T.int64(4) + oc_block_2 + oc_block_3)
                        v_ic = T.axis.reduce(T.int64(192), ic_0 * T.int64(2) + ic_1)
                        v_kh = T.axis.reduce(T.int64(3), kh_0 + kh_1)
                        v_kw = T.axis.reduce(T.int64(3), kw_0 + kw_1)
                        T.reads(p0[v_n, v_ic // T.int64(4), v_oh + v_kh - T.int64(1), v_ow + v_kw - T.int64(1), v_ic % T.int64(4)], p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block])
                        T.writes(conv2d_NCHWc_global[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                        T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                        with T.init():
                            conv2d_NCHWc_global[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = T.float32(0)
                        conv2d_NCHWc_global[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = conv2d_NCHWc_global[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] + T.if_then_else(T.int64(1) <= v_oh + v_kh and v_oh + v_kh < T.int64(15) and T.int64(1) <= v_ow + v_kw and v_ow + v_kw < T.int64(15), p0[v_n, v_ic // T.int64(4), v_oh + v_kh - T.int64(1), v_ow + v_kw - T.int64(1), v_ic % T.int64(4)], T.float32(0)) * p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block]
                for ax0, ax1, ax2, ax3, ax4 in T.grid(T.int64(1), T.int64(12), T.int64(1), T.int64(14), T.int64(4)):
                    with T.block("conv2d_NCHWc_global"):
                        v0, v1 = T.axis.remap("SS", [ax0, ax1])
                        v2 = T.axis.spatial(T.int64(14), oh_0 * T.int64(2) + oh_1 + ax2)
                        v3, v4 = T.axis.remap("SS", [ax3, ax4])
                        T.reads(conv2d_NCHWc_global[v0, v1, v2, v3, v4])
                        T.writes(conv2d_NCHWc[v0, v1, v2, v3, v4])
                        conv2d_NCHWc[v0, v1, v2, v3, v4] = conv2d_NCHWc_global[v0, v1, v2, v3, v4]
b0 = sch.get_block(name="data_pad", func_name="main")
b1 = sch.get_block(name="conv2d_NCHWc", func_name="main")
b2 = sch.get_block(name="root", func_name="main")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSRSRS")
l3, l4, l5, l6, l7, l8, l9, l10 = sch.get_loops(block=b1)
v11, v12, v13, v14 = sch.sample_perfect_tile(loop=l3, n=4, max_innermost_factor=64, decision=[1, 1, 1, 1])
l15, l16, l17, l18 = sch.split(loop=l3, factors=[v11, v12, v13, v14], preserve_unit_iters=True)
v19, v20, v21, v22 = sch.sample_perfect_tile(loop=l4, n=4, max_innermost_factor=64, decision=[1, 1, 12, 1])
l23, l24, l25, l26 = sch.split(loop=l4, factors=[v19, v20, v21, v22], preserve_unit_iters=True)
v27, v28, v29, v30 = sch.sample_perfect_tile(loop=l5, n=4, max_innermost_factor=64, decision=[7, 2, 1, 1])
l31, l32, l33, l34 = sch.split(loop=l5, factors=[v27, v28, v29, v30], preserve_unit_iters=True)
v35, v36, v37, v38 = sch.sample_perfect_tile(loop=l6, n=4, max_innermost_factor=64, decision=[1, 1, 7, 2])
l39, l40, l41, l42 = sch.split(loop=l6, factors=[v35, v36, v37, v38], preserve_unit_iters=True)
v43, v44, v45, v46 = sch.sample_perfect_tile(loop=l7, n=4, max_innermost_factor=64, decision=[1, 1, 4, 1])
l47, l48, l49, l50 = sch.split(loop=l7, factors=[v43, v44, v45, v46], preserve_unit_iters=True)
v51, v52 = sch.sample_perfect_tile(loop=l8, n=2, max_innermost_factor=64, decision=[96, 2])
l53, l54 = sch.split(loop=l8, factors=[v51, v52], preserve_unit_iters=True)
v55, v56 = sch.sample_perfect_tile(loop=l9, n=2, max_innermost_factor=64, decision=[3, 1])
l57, l58 = sch.split(loop=l9, factors=[v55, v56], preserve_unit_iters=True)
v59, v60 = sch.sample_perfect_tile(loop=l10, n=2, max_innermost_factor=64, decision=[3, 1])
l61, l62 = sch.split(loop=l10, factors=[v59, v60], preserve_unit_iters=True)
sch.reorder(l15, l23, l31, l39, l47, l16, l24, l32, l40, l48, l53, l57, l61, l17, l25, l33, l41, l49, l54, l58, l62, l18, l26, l34, l42, l50)
b63 = sch.cache_write(block=b1, write_buffer_index=0, storage_scope="global")
sch.reverse_compute_at(block=b63, loop=l48, preserve_unit_loops=True, index=-1)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.vectorize", ann_val=64)
v64 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.unroll_explicit", ann_val=v64)
l65 = sch.sample_compute_location(block=b0, decision=-2)
sch.compute_at(block=b0, loop=l65, preserve_unit_loops=True, index=-1)
2024-04-29 02:32:20 [INFO] [task_scheduler.cc:170] Design space #1:
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(48), T.int64(14), T.int64(14), T.int64(4)), "float32"), p1: T.Buffer((T.int64(12), T.int64(48), T.int64(3), T.int64(3), T.int64(4), T.int64(4)), "float32"), conv2d_NCHWc: T.Buffer((T.int64(1), T.int64(12), T.int64(14), T.int64(14), T.int64(4)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        with T.block("root"):
            T.reads()
            T.writes()
            T.block_attr({"meta_schedule.parallel": 768, "meta_schedule.unroll_explicit": 512, "meta_schedule.vectorize": 64})
            data_pad = T.alloc_buffer((T.int64(1), T.int64(48), T.int64(16), T.int64(16), T.int64(4)))
            conv2d_NCHWc_global = T.alloc_buffer((T.int64(1), T.int64(12), T.int64(14), T.int64(14), T.int64(4)))
            for n_0, oc_chunk_0, oh_0 in T.grid(T.int64(1), T.int64(1), T.int64(7)):
                for ax0, ax1, ax2, ax3, ax4 in T.grid(T.int64(1), T.int64(48), T.int64(4), T.int64(16), T.int64(4)):
                    with T.block("data_pad"):
                        v_i0, v_i1 = T.axis.remap("SS", [ax0, ax1])
                        v_i2 = T.axis.spatial(T.int64(16), oh_0 * T.int64(2) + ax2)
                        v_i3, v_i4 = T.axis.remap("SS", [ax3, ax4])
                        T.reads(p0[v_i0, v_i1, v_i2 - T.int64(1), v_i3 - T.int64(1), v_i4])
                        T.writes(data_pad[v_i0, v_i1, v_i2, v_i3, v_i4])
                        data_pad[v_i0, v_i1, v_i2, v_i3, v_i4] = T.if_then_else(T.int64(1) <= v_i2 and v_i2 < T.int64(15) and T.int64(1) <= v_i3 and v_i3 < T.int64(15), p0[v_i0, v_i1, v_i2 - T.int64(1), v_i3 - T.int64(1), v_i4], T.float32(0))
                for ow_0, oc_block_0 in T.grid(T.int64(1), T.int64(1)):
                    for n_1, oc_chunk_1, oh_1, ow_1, oc_block_1, ic_0, kh_0, kw_0, n_2, oc_chunk_2, oh_2, ow_2, oc_block_2, ic_1, kh_1, kw_1, n_3, oc_chunk_3, oh_3, ow_3, oc_block_3 in T.grid(T.int64(1), T.int64(1), T.int64(2), T.int64(1), T.int64(1), T.int64(96), T.int64(3), T.int64(3), T.int64(1), T.int64(12), T.int64(1), T.int64(7), T.int64(4), T.int64(2), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(1)):
                        with T.block("conv2d_NCHWc"):
                            v_n = T.axis.spatial(T.int64(1), n_0 + n_1 + n_2 + n_3)
                            v_oc_chunk = T.axis.spatial(T.int64(12), oc_chunk_0 * T.int64(12) + oc_chunk_1 * T.int64(12) + oc_chunk_2 + oc_chunk_3)
                            v_oh = T.axis.spatial(T.int64(14), oh_0 * T.int64(2) + oh_1 + oh_2 + oh_3)
                            v_ow = T.axis.spatial(T.int64(14), ow_0 * T.int64(14) + ow_1 * T.int64(14) + ow_2 * T.int64(2) + ow_3)
                            v_oc_block = T.axis.spatial(T.int64(4), oc_block_0 * T.int64(4) + oc_block_1 * T.int64(4) + oc_block_2 + oc_block_3)
                            v_ic = T.axis.reduce(T.int64(192), ic_0 * T.int64(2) + ic_1)
                            v_kh = T.axis.reduce(T.int64(3), kh_0 + kh_1)
                            v_kw = T.axis.reduce(T.int64(3), kw_0 + kw_1)
                            T.reads(data_pad[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)], p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block])
                            T.writes(conv2d_NCHWc_global[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                            T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                            with T.init():
                                conv2d_NCHWc_global[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = T.float32(0)
                            conv2d_NCHWc_global[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = conv2d_NCHWc_global[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] + data_pad[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)] * p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block]
                    for ax0, ax1, ax2, ax3, ax4 in T.grid(T.int64(1), T.int64(12), T.int64(2), T.int64(14), T.int64(4)):
                        with T.block("conv2d_NCHWc_global"):
                            v0, v1 = T.axis.remap("SS", [ax0, ax1])
                            v2 = T.axis.spatial(T.int64(14), oh_0 * T.int64(2) + ax2)
                            v3, v4 = T.axis.remap("SS", [ax3, ax4])
                            T.reads(conv2d_NCHWc_global[v0, v1, v2, v3, v4])
                            T.writes(conv2d_NCHWc[v0, v1, v2, v3, v4])
                            conv2d_NCHWc[v0, v1, v2, v3, v4] = conv2d_NCHWc_global[v0, v1, v2, v3, v4]
b0 = sch.get_block(name="data_pad", func_name="main")
b1 = sch.get_block(name="conv2d_NCHWc", func_name="main")
b2 = sch.get_block(name="root", func_name="main")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSRSRS")
l3, l4, l5, l6, l7, l8, l9, l10 = sch.get_loops(block=b1)
v11, v12, v13, v14 = sch.sample_perfect_tile(loop=l3, n=4, max_innermost_factor=64, decision=[1, 1, 1, 1])
l15, l16, l17, l18 = sch.split(loop=l3, factors=[v11, v12, v13, v14], preserve_unit_iters=True)
v19, v20, v21, v22 = sch.sample_perfect_tile(loop=l4, n=4, max_innermost_factor=64, decision=[1, 1, 12, 1])
l23, l24, l25, l26 = sch.split(loop=l4, factors=[v19, v20, v21, v22], preserve_unit_iters=True)
v27, v28, v29, v30 = sch.sample_perfect_tile(loop=l5, n=4, max_innermost_factor=64, decision=[7, 2, 1, 1])
l31, l32, l33, l34 = sch.split(loop=l5, factors=[v27, v28, v29, v30], preserve_unit_iters=True)
v35, v36, v37, v38 = sch.sample_perfect_tile(loop=l6, n=4, max_innermost_factor=64, decision=[1, 1, 7, 2])
l39, l40, l41, l42 = sch.split(loop=l6, factors=[v35, v36, v37, v38], preserve_unit_iters=True)
v43, v44, v45, v46 = sch.sample_perfect_tile(loop=l7, n=4, max_innermost_factor=64, decision=[1, 1, 4, 1])
l47, l48, l49, l50 = sch.split(loop=l7, factors=[v43, v44, v45, v46], preserve_unit_iters=True)
v51, v52 = sch.sample_perfect_tile(loop=l8, n=2, max_innermost_factor=64, decision=[96, 2])
l53, l54 = sch.split(loop=l8, factors=[v51, v52], preserve_unit_iters=True)
v55, v56 = sch.sample_perfect_tile(loop=l9, n=2, max_innermost_factor=64, decision=[3, 1])
l57, l58 = sch.split(loop=l9, factors=[v55, v56], preserve_unit_iters=True)
v59, v60 = sch.sample_perfect_tile(loop=l10, n=2, max_innermost_factor=64, decision=[3, 1])
l61, l62 = sch.split(loop=l10, factors=[v59, v60], preserve_unit_iters=True)
sch.reorder(l15, l23, l31, l39, l47, l16, l24, l32, l40, l48, l53, l57, l61, l17, l25, l33, l41, l49, l54, l58, l62, l18, l26, l34, l42, l50)
b63 = sch.cache_write(block=b1, write_buffer_index=0, storage_scope="global")
sch.reverse_compute_at(block=b63, loop=l47, preserve_unit_loops=True, index=-1)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.vectorize", ann_val=64)
v64 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.unroll_explicit", ann_val=v64)
l65 = sch.sample_compute_location(block=b0, decision=2)
sch.compute_at(block=b0, loop=l65, preserve_unit_loops=True, index=-1)
2024-04-29 02:32:20 [INFO] [task_scheduler.cc:170] Design space #2:
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(48), T.int64(14), T.int64(14), T.int64(4)), "float32"), p1: T.Buffer((T.int64(12), T.int64(48), T.int64(3), T.int64(3), T.int64(4), T.int64(4)), "float32"), conv2d_NCHWc: T.Buffer((T.int64(1), T.int64(12), T.int64(14), T.int64(14), T.int64(4)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        with T.block("root"):
            T.reads()
            T.writes()
            T.block_attr({"meta_schedule.parallel": 768, "meta_schedule.unroll_explicit": 512, "meta_schedule.vectorize": 64})
            data_pad = T.alloc_buffer((T.int64(1), T.int64(48), T.int64(16), T.int64(16), T.int64(4)))
            for n_0, oc_chunk_0, oh_0, ow_0, oc_block_0, n_1, oc_chunk_1, oh_1 in T.grid(T.int64(1), T.int64(1), T.int64(7), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(2)):
                for ax0, ax1, ax2, ax3, ax4 in T.grid(T.int64(1), T.int64(48), T.int64(3), T.int64(16), T.int64(4)):
                    with T.block("data_pad"):
                        v_i0, v_i1 = T.axis.remap("SS", [ax0, ax1])
                        v_i2 = T.axis.spatial(T.int64(16), oh_0 * T.int64(2) + oh_1 + ax2)
                        v_i3, v_i4 = T.axis.remap("SS", [ax3, ax4])
                        T.reads(p0[v_i0, v_i1, v_i2 - T.int64(1), v_i3 - T.int64(1), v_i4])
                        T.writes(data_pad[v_i0, v_i1, v_i2, v_i3, v_i4])
                        data_pad[v_i0, v_i1, v_i2, v_i3, v_i4] = T.if_then_else(T.int64(1) <= v_i2 and v_i2 < T.int64(15) and T.int64(1) <= v_i3 and v_i3 < T.int64(15), p0[v_i0, v_i1, v_i2 - T.int64(1), v_i3 - T.int64(1), v_i4], T.float32(0))
                for ow_1, oc_block_1, ic_0, kh_0, kw_0, n_2, oc_chunk_2, oh_2, ow_2, oc_block_2, ic_1, kh_1, kw_1, n_3, oc_chunk_3, oh_3, ow_3, oc_block_3 in T.grid(T.int64(1), T.int64(1), T.int64(96), T.int64(3), T.int64(3), T.int64(1), T.int64(12), T.int64(1), T.int64(7), T.int64(4), T.int64(2), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(1)):
                    with T.block("conv2d_NCHWc"):
                        v_n = T.axis.spatial(T.int64(1), n_0 + n_1 + n_2 + n_3)
                        v_oc_chunk = T.axis.spatial(T.int64(12), oc_chunk_0 * T.int64(12) + oc_chunk_1 * T.int64(12) + oc_chunk_2 + oc_chunk_3)
                        v_oh = T.axis.spatial(T.int64(14), oh_0 * T.int64(2) + oh_1 + oh_2 + oh_3)
                        v_ow = T.axis.spatial(T.int64(14), ow_0 * T.int64(14) + ow_1 * T.int64(14) + ow_2 * T.int64(2) + ow_3)
                        v_oc_block = T.axis.spatial(T.int64(4), oc_block_0 * T.int64(4) + oc_block_1 * T.int64(4) + oc_block_2 + oc_block_3)
                        v_ic = T.axis.reduce(T.int64(192), ic_0 * T.int64(2) + ic_1)
                        v_kh = T.axis.reduce(T.int64(3), kh_0 + kh_1)
                        v_kw = T.axis.reduce(T.int64(3), kw_0 + kw_1)
                        T.reads(data_pad[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)], p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block])
                        T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                        T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                        with T.init():
                            conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = T.float32(0)
                        conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] + data_pad[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)] * p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block]
b0 = sch.get_block(name="data_pad", func_name="main")
b1 = sch.get_block(name="conv2d_NCHWc", func_name="main")
b2 = sch.get_block(name="root", func_name="main")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSRSRS")
l3, l4, l5, l6, l7, l8, l9, l10 = sch.get_loops(block=b1)
v11, v12, v13, v14 = sch.sample_perfect_tile(loop=l3, n=4, max_innermost_factor=64, decision=[1, 1, 1, 1])
l15, l16, l17, l18 = sch.split(loop=l3, factors=[v11, v12, v13, v14], preserve_unit_iters=True)
v19, v20, v21, v22 = sch.sample_perfect_tile(loop=l4, n=4, max_innermost_factor=64, decision=[1, 1, 12, 1])
l23, l24, l25, l26 = sch.split(loop=l4, factors=[v19, v20, v21, v22], preserve_unit_iters=True)
v27, v28, v29, v30 = sch.sample_perfect_tile(loop=l5, n=4, max_innermost_factor=64, decision=[7, 2, 1, 1])
l31, l32, l33, l34 = sch.split(loop=l5, factors=[v27, v28, v29, v30], preserve_unit_iters=True)
v35, v36, v37, v38 = sch.sample_perfect_tile(loop=l6, n=4, max_innermost_factor=64, decision=[1, 1, 7, 2])
l39, l40, l41, l42 = sch.split(loop=l6, factors=[v35, v36, v37, v38], preserve_unit_iters=True)
v43, v44, v45, v46 = sch.sample_perfect_tile(loop=l7, n=4, max_innermost_factor=64, decision=[1, 1, 4, 1])
l47, l48, l49, l50 = sch.split(loop=l7, factors=[v43, v44, v45, v46], preserve_unit_iters=True)
v51, v52 = sch.sample_perfect_tile(loop=l8, n=2, max_innermost_factor=64, decision=[96, 2])
l53, l54 = sch.split(loop=l8, factors=[v51, v52], preserve_unit_iters=True)
v55, v56 = sch.sample_perfect_tile(loop=l9, n=2, max_innermost_factor=64, decision=[3, 1])
l57, l58 = sch.split(loop=l9, factors=[v55, v56], preserve_unit_iters=True)
v59, v60 = sch.sample_perfect_tile(loop=l10, n=2, max_innermost_factor=64, decision=[3, 1])
l61, l62 = sch.split(loop=l10, factors=[v59, v60], preserve_unit_iters=True)
sch.reorder(l15, l23, l31, l39, l47, l16, l24, l32, l40, l48, l53, l57, l61, l17, l25, l33, l41, l49, l54, l58, l62, l18, l26, l34, l42, l50)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.vectorize", ann_val=64)
v63 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.unroll_explicit", ann_val=v63)
l64 = sch.sample_compute_location(block=b0, decision=7)
sch.compute_at(block=b0, loop=l64, preserve_unit_loops=True, index=-1)
2024-04-29 04:09:22 [INFO] [evolutionary_search.cc:713] Generating candidates......
2024-04-29 04:09:22 [INFO] [evolutionary_search.cc:715] Picked top 0 candidate(s) from database
2024-04-29 04:09:27 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0xc83fed8)]: 7 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0xc5901d8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x15321f68)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x1063f078)]: 0 failure(s)
2024-04-29 04:09:27 [INFO] [evolutionary_search.cc:723] Sampled 505 candidate(s)
2024-04-29 04:09:32 [INFO] [evolutionary_search.cc:621] Evolve iter #0 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0xc83fed8)]: 1 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0xc5901d8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x15321f68)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x1063f078)]: 0 failure(s)
2024-04-29 04:09:38 [INFO] [evolutionary_search.cc:621] Evolve iter #1 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0xc83fed8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0xc5901d8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x15321f68)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x1063f078)]: 0 failure(s)
2024-04-29 04:09:43 [INFO] [evolutionary_search.cc:621] Evolve iter #2 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0xc83fed8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0xc5901d8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x15321f68)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x1063f078)]: 0 failure(s)
2024-04-29 04:09:49 [INFO] [evolutionary_search.cc:621] Evolve iter #3 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0xc83fed8)]: 1 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0xc5901d8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x15321f68)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x1063f078)]: 0 failure(s)
2024-04-29 04:09:50 [INFO] [evolutionary_search.cc:649] Scores of the best 64 candidates:
[1 : 16]:	0.9975  0.9974  0.9973  0.9972  0.9966  0.9963  0.9960  0.9957  0.9955  0.9953  0.9950  0.9941  0.9931  0.9929  0.9927  0.9916
[17 : 32]:	0.9911  0.9907  0.9900  0.9898  0.9897  0.9895  0.9893  0.9893  0.9884  0.9874  0.9874  0.9874  0.9870  0.9864  0.9860  0.9858
[33 : 48]:	0.9858  0.9855  0.9852  0.9841  0.9840  0.9839  0.9838  0.9837  0.9835  0.9832  0.9830  0.9826  0.9821  0.9816  0.9802  0.9799
[49 : 64]:	0.9797  0.9791  0.9780  0.9774  0.9764  0.9763  0.9762  0.9748  0.9746  0.9744  0.9743  0.9734  0.9731  0.9728  0.9726  0.9704
2024-04-29 04:09:50 [INFO] [evolutionary_search.cc:727] Got 64 candidate(s) with evolutionary search
2024-04-29 04:09:50 [INFO] [evolutionary_search.cc:730] Sending 64 candidates(s) for measurement
2024-04-29 05:08:46 [INFO] [task_scheduler.cc:131] [Task #61: fused_nn_contrib_conv2d_NCHWc_1] Trial #1: GFLOPs: 30.2916. Time: 1073.3678 us. Best GFLOPs: 30.2916
2024-04-29 05:08:46 [INFO] [task_scheduler.cc:131] [Task #61: fused_nn_contrib_conv2d_NCHWc_1] Trial #2: GFLOPs: 19.0095. Time: 1710.4122 us. Best GFLOPs: 30.2916
2024-04-29 05:08:46 [INFO] [task_scheduler.cc:131] [Task #61: fused_nn_contrib_conv2d_NCHWc_1] Trial #3: GFLOPs: 21.2273. Time: 1531.7068 us. Best GFLOPs: 30.2916
2024-04-29 05:08:46 [INFO] [task_scheduler.cc:121] [Task #61: fused_nn_contrib_conv2d_NCHWc_1] Trial #4: Error in building:
LocalBuilder: Timeout, killed after 30.0 seconds
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(48), T.int64(14), T.int64(14), T.int64(4)), "float32"), p1: T.Buffer((T.int64(12), T.int64(48), T.int64(3), T.int64(3), T.int64(4), T.int64(4)), "float32"), conv2d_NCHWc: T.Buffer((T.int64(1), T.int64(12), T.int64(14), T.int64(14), T.int64(4)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        data_pad = T.alloc_buffer((T.int64(1), T.int64(48), T.int64(16), T.int64(16), T.int64(4)))
        conv2d_NCHWc_global = T.alloc_buffer((T.int64(1), T.int64(12), T.int64(14), T.int64(14), T.int64(4)))
        for i0_i1_i2_fused in T.parallel(T.int64(768)):
            for i3_i4_fused in T.vectorized(T.int64(64)):
                with T.block("data_pad"):
                    v_i0 = T.axis.spatial(T.int64(1), T.int64(0))
                    v_i1 = T.axis.spatial(T.int64(48), i0_i1_i2_fused // T.int64(16))
                    v_i2 = T.axis.spatial(T.int64(16), i0_i1_i2_fused % T.int64(16))
                    v_i3 = T.axis.spatial(T.int64(16), i3_i4_fused // T.int64(4))
                    v_i4 = T.axis.spatial(T.int64(4), i3_i4_fused % T.int64(4))
                    T.reads(p0[v_i0, v_i1, v_i2 - T.int64(1), v_i3 - T.int64(1), v_i4])
                    T.writes(data_pad[v_i0, v_i1, v_i2, v_i3, v_i4])
                    data_pad[v_i0, v_i1, v_i2, v_i3, v_i4] = T.if_then_else(T.int64(1) <= v_i2 and v_i2 < T.int64(15) and T.int64(1) <= v_i3 and v_i3 < T.int64(15), p0[v_i0, v_i1, v_i2 - T.int64(1), v_i3 - T.int64(1), v_i4], T.float32(0))
        for n_0 in T.serial(T.int64(1), annotations={"pragma_auto_unroll_max_step": 512, "pragma_unroll_explicit": 1}):
            for oc_chunk_0, oh_0, ow_0, oc_block_0 in T.grid(T.int64(1), T.int64(1), T.int64(1), T.int64(1)):
                for n_1, oc_chunk_1, oh_1, ow_1, oc_block_1 in T.grid(T.int64(1), T.int64(12), T.int64(7), T.int64(1), T.int64(4)):
                    for n_2_init, oc_chunk_2_init, oh_2_init, ow_2_init, oc_block_2_init, n_3_init, oc_chunk_3_init, oh_3_init, ow_3_init, oc_block_3_init in T.grid(T.int64(1), T.int64(1), T.int64(2), T.int64(14), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1)):
                        with T.block("conv2d_NCHWc_init"):
                            v_n = T.axis.spatial(T.int64(1), n_0 + n_1 + n_2_init + n_3_init)
                            v_oc_chunk = T.axis.spatial(T.int64(12), oc_chunk_0 * T.int64(12) + oc_chunk_1 + oc_chunk_2_init + oc_chunk_3_init)
                            v_oh = T.axis.spatial(T.int64(14), oh_0 * T.int64(14) + oh_1 * T.int64(2) + oh_2_init + oh_3_init)
                            v_ow = T.axis.spatial(T.int64(14), ow_0 * T.int64(14) + ow_1 * T.int64(14) + ow_2_init + ow_3_init)
                            v_oc_block = T.axis.spatial(T.int64(4), oc_block_0 * T.int64(4) + oc_block_1 + oc_block_2_init + oc_block_3_init)
                            T.reads()
                            T.writes(conv2d_NCHWc_global[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                            T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                            conv2d_NCHWc_global[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = T.float32(0)
                    for ic_0, kh_0, kw_0, n_2, oc_chunk_2, oh_2, ow_2, oc_block_2, ic_1, kh_1, kw_1, n_3, oc_chunk_3, oh_3, ow_3, oc_block_3 in T.grid(T.int64(4), T.int64(3), T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(14), T.int64(1), T.int64(48), T.int64(1), T.int64(3), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1)):
                        with T.block("conv2d_NCHWc_update"):
                            v_n = T.axis.spatial(T.int64(1), n_0 + n_1 + n_2 + n_3)
                            v_oc_chunk = T.axis.spatial(T.int64(12), oc_chunk_0 * T.int64(12) + oc_chunk_1 + oc_chunk_2 + oc_chunk_3)
                            v_oh = T.axis.spatial(T.int64(14), oh_0 * T.int64(14) + oh_1 * T.int64(2) + oh_2 + oh_3)
                            v_ow = T.axis.spatial(T.int64(14), ow_0 * T.int64(14) + ow_1 * T.int64(14) + ow_2 + ow_3)
                            v_oc_block = T.axis.spatial(T.int64(4), oc_block_0 * T.int64(4) + oc_block_1 + oc_block_2 + oc_block_3)
                            v_ic = T.axis.reduce(T.int64(192), ic_0 * T.int64(48) + ic_1)
                            v_kh = T.axis.reduce(T.int64(3), kh_0 + kh_1)
                            v_kw = T.axis.reduce(T.int64(3), kw_0 * T.int64(3) + kw_1)
                            T.reads(conv2d_NCHWc_global[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block], data_pad[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)], p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block])
                            T.writes(conv2d_NCHWc_global[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                            T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                            conv2d_NCHWc_global[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = conv2d_NCHWc_global[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] + data_pad[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)] * p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block]
                for ax0, ax1, ax2 in T.grid(T.int64(1), T.int64(12), T.int64(14)):
                    for ax3_ax4_fused in T.vectorized(T.int64(56)):
                        with T.block("conv2d_NCHWc_global"):
                            v0, v1, v2 = T.axis.remap("SSS", [ax0, ax1, ax2])
                            v3 = T.axis.spatial(T.int64(14), ax3_ax4_fused // T.int64(4))
                            v4 = T.axis.spatial(T.int64(4), ax3_ax4_fused % T.int64(4))
                            T.reads(conv2d_NCHWc_global[v0, v1, v2, v3, v4])
                            T.writes(conv2d_NCHWc[v0, v1, v2, v3, v4])
                            conv2d_NCHWc[v0, v1, v2, v3, v4] = conv2d_NCHWc_global[v0, v1, v2, v3, v4]
b0 = sch.get_block(name="data_pad", func_name="main")
b1 = sch.get_block(name="conv2d_NCHWc", func_name="main")
b2 = sch.get_block(name="root", func_name="main")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSRSRS")
l3, l4, l5, l6, l7, l8, l9, l10 = sch.get_loops(block=b1)
v11, v12, v13, v14 = sch.sample_perfect_tile(loop=l3, n=4, max_innermost_factor=64, decision=[1, 1, 1, 1])
l15, l16, l17, l18 = sch.split(loop=l3, factors=[v11, v12, v13, v14], preserve_unit_iters=True)
v19, v20, v21, v22 = sch.sample_perfect_tile(loop=l4, n=4, max_innermost_factor=64, decision=[1, 12, 1, 1])
l23, l24, l25, l26 = sch.split(loop=l4, factors=[v19, v20, v21, v22], preserve_unit_iters=True)
v27, v28, v29, v30 = sch.sample_perfect_tile(loop=l5, n=4, max_innermost_factor=64, decision=[1, 7, 2, 1])
l31, l32, l33, l34 = sch.split(loop=l5, factors=[v27, v28, v29, v30], preserve_unit_iters=True)
v35, v36, v37, v38 = sch.sample_perfect_tile(loop=l6, n=4, max_innermost_factor=64, decision=[1, 1, 14, 1])
l39, l40, l41, l42 = sch.split(loop=l6, factors=[v35, v36, v37, v38], preserve_unit_iters=True)
v43, v44, v45, v46 = sch.sample_perfect_tile(loop=l7, n=4, max_innermost_factor=64, decision=[1, 4, 1, 1])
l47, l48, l49, l50 = sch.split(loop=l7, factors=[v43, v44, v45, v46], preserve_unit_iters=True)
v51, v52 = sch.sample_perfect_tile(loop=l8, n=2, max_innermost_factor=64, decision=[4, 48])
l53, l54 = sch.split(loop=l8, factors=[v51, v52], preserve_unit_iters=True)
v55, v56 = sch.sample_perfect_tile(loop=l9, n=2, max_innermost_factor=64, decision=[3, 1])
l57, l58 = sch.split(loop=l9, factors=[v55, v56], preserve_unit_iters=True)
v59, v60 = sch.sample_perfect_tile(loop=l10, n=2, max_innermost_factor=64, decision=[1, 3])
l61, l62 = sch.split(loop=l10, factors=[v59, v60], preserve_unit_iters=True)
sch.reorder(l15, l23, l31, l39, l47, l16, l24, l32, l40, l48, l53, l57, l61, l17, l25, l33, l41, l49, l54, l58, l62, l18, l26, l34, l42, l50)
b63 = sch.cache_write(block=b1, write_buffer_index=0, storage_scope="global")
sch.reverse_compute_at(block=b63, loop=l47, preserve_unit_loops=True, index=-1)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.vectorize", ann_val=64)
v64 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.unroll_explicit", ann_val=v64)
l65 = sch.sample_compute_location(block=b0, decision=-1)
sch.compute_at(block=b0, loop=l65, preserve_unit_loops=True, index=-1)
sch.enter_postproc()
b66 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b66, ann_key="meta_schedule.parallel")
sch.unannotate(block_or_loop=b66, ann_key="meta_schedule.vectorize")
sch.unannotate(block_or_loop=b66, ann_key="meta_schedule.unroll_explicit")
b67, b68, b69 = sch.get_child_blocks(b66)
l70, l71, l72, l73, l74 = sch.get_loops(block=b67)
l75 = sch.fuse(l70, l71, l72, preserve_unit_iters=True)
sch.parallel(loop=l75)
l76 = sch.fuse(l73, l74, preserve_unit_iters=True)
sch.vectorize(loop=l76)
l77, l78, l79, l80, l81, l82, l83, l84, l85, l86, l87, l88, l89, l90, l91, l92, l93, l94, l95, l96, l97, l98, l99, l100, l101, l102 = sch.get_loops(block=b68)
sch.annotate(block_or_loop=l77, ann_key="pragma_auto_unroll_max_step", ann_val=512)
sch.annotate(block_or_loop=l77, ann_key="pragma_unroll_explicit", ann_val=1)
l103, l104, l105, l106, l107, l108, l109, l110, l111, l112 = sch.get_loops(block=b69)
l113 = sch.fuse(l111, l112, preserve_unit_iters=True)
sch.vectorize(loop=l113)
b114 = sch.get_block(name="conv2d_NCHWc", func_name="main")
l115, l116, l117, l118, l119, l120, l121, l122, l123, l124, l125, l126, l127, l128, l129, l130, l131, l132, l133, l134, l135, l136, l137, l138, l139, l140 = sch.get_loops(block=b114)
b141 = sch.decompose_reduction(block=b114, loop=l125)
2024-04-29 05:08:46 [INFO] [task_scheduler.cc:131] [Task #61: fused_nn_contrib_conv2d_NCHWc_1] Trial #5: GFLOPs: 31.1414. Time: 1044.0767 us. Best GFLOPs: 31.1414
2024-04-29 05:08:46 [INFO] [task_scheduler.cc:131] [Task #61: fused_nn_contrib_conv2d_NCHWc_1] Trial #6: GFLOPs: 17.3427. Time: 1874.7921 us. Best GFLOPs: 31.1414
2024-04-29 05:08:46 [INFO] [task_scheduler.cc:131] [Task #61: fused_nn_contrib_conv2d_NCHWc_1] Trial #7: GFLOPs: 71.1149. Time: 457.2043 us. Best GFLOPs: 71.1149
2024-04-29 05:08:46 [INFO] [task_scheduler.cc:131] [Task #61: fused_nn_contrib_conv2d_NCHWc_1] Trial #8: GFLOPs: 20.2931. Time: 1602.2200 us. Best GFLOPs: 71.1149
2024-04-29 05:08:46 [INFO] [task_scheduler.cc:131] [Task #61: fused_nn_contrib_conv2d_NCHWc_1] Trial #9: GFLOPs: 8.7378. Time: 3721.0928 us. Best GFLOPs: 71.1149
2024-04-29 05:08:46 [INFO] [task_scheduler.cc:131] [Task #61: fused_nn_contrib_conv2d_NCHWc_1] Trial #10: GFLOPs: 10.2679. Time: 3166.5748 us. Best GFLOPs: 71.1149
2024-04-29 05:08:46 [INFO] [task_scheduler.cc:131] [Task #61: fused_nn_contrib_conv2d_NCHWc_1] Trial #11: GFLOPs: 1.8110. Time: 17953.4970 us. Best GFLOPs: 71.1149
2024-04-29 05:08:46 [INFO] [task_scheduler.cc:131] [Task #61: fused_nn_contrib_conv2d_NCHWc_1] Trial #12: GFLOPs: 0.8740. Time: 37203.0630 us. Best GFLOPs: 71.1149
2024-04-29 05:08:46 [INFO] [task_scheduler.cc:131] [Task #61: fused_nn_contrib_conv2d_NCHWc_1] Trial #13: GFLOPs: 12.9816. Time: 2504.6233 us. Best GFLOPs: 71.1149
2024-04-29 05:08:46 [INFO] [task_scheduler.cc:121] [Task #61: fused_nn_contrib_conv2d_NCHWc_1] Trial #14: Error in building:
LocalBuilder: Timeout, killed after 30.0 seconds
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(48), T.int64(14), T.int64(14), T.int64(4)), "float32"), p1: T.Buffer((T.int64(12), T.int64(48), T.int64(3), T.int64(3), T.int64(4), T.int64(4)), "float32"), conv2d_NCHWc: T.Buffer((T.int64(1), T.int64(12), T.int64(14), T.int64(14), T.int64(4)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        data_pad = T.alloc_buffer((T.int64(1), T.int64(48), T.int64(16), T.int64(16), T.int64(4)))
        conv2d_NCHWc_global = T.alloc_buffer((T.int64(1), T.int64(12), T.int64(14), T.int64(14), T.int64(4)))
        for n_0_oc_chunk_0_fused_fused in T.parallel(T.int64(6), annotations={"pragma_auto_unroll_max_step": 512, "pragma_unroll_explicit": 1}):
            for ax0, ax1, ax2 in T.grid(T.int64(1), T.int64(48), T.int64(16)):
                for ax3_ax4_fused in T.vectorized(T.int64(64)):
                    with T.block("data_pad"):
                        v_i0, v_i1, v_i2 = T.axis.remap("SSS", [ax0, ax1, ax2])
                        v_i3 = T.axis.spatial(T.int64(16), ax3_ax4_fused // T.int64(4))
                        v_i4 = T.axis.spatial(T.int64(4), ax3_ax4_fused % T.int64(4))
                        T.reads(p0[v_i0, v_i1, v_i2 - T.int64(1), v_i3 - T.int64(1), v_i4])
                        T.writes(data_pad[v_i0, v_i1, v_i2, v_i3, v_i4])
                        data_pad[v_i0, v_i1, v_i2, v_i3, v_i4] = T.if_then_else(T.int64(1) <= v_i2 and v_i2 < T.int64(15) and T.int64(1) <= v_i3 and v_i3 < T.int64(15), p0[v_i0, v_i1, v_i2 - T.int64(1), v_i3 - T.int64(1), v_i4], T.float32(0))
            for oh_0, ow_0, oc_block_0 in T.grid(T.int64(14), T.int64(7), T.int64(2)):
                for n_1, oc_chunk_1, oh_1, ow_1, oc_block_1 in T.grid(T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(1)):
                    for n_2_init, oc_chunk_2_init, oh_2_init, ow_2_init, oc_block_2_init, n_3_init, oc_chunk_3_init, oh_3_init, ow_3_init, oc_block_3_init in T.grid(T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(1), T.int64(2), T.int64(1), T.int64(1), T.int64(1)):
                        with T.block("conv2d_NCHWc_init"):
                            v_n = T.axis.spatial(T.int64(1), n_1 + n_2_init + n_3_init)
                            v_oc_chunk = T.axis.spatial(T.int64(12), n_0_oc_chunk_0_fused_fused * T.int64(2) + oc_chunk_1 * T.int64(2) + oc_chunk_2_init * T.int64(2) + oc_chunk_3_init)
                            v_oh = T.axis.spatial(T.int64(14), oh_0 + oh_1 + oh_2_init + oh_3_init)
                            v_ow = T.axis.spatial(T.int64(14), ow_0 * T.int64(2) + ow_1 + ow_2_init + ow_3_init)
                            v_oc_block = T.axis.spatial(T.int64(4), oc_block_0 * T.int64(2) + oc_block_1 * T.int64(2) + oc_block_2_init + oc_block_3_init)
                            T.reads()
                            T.writes(conv2d_NCHWc_global[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                            T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                            conv2d_NCHWc_global[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = T.float32(0)
                    for ic_0, kh_0, kw_0, n_2, oc_chunk_2, oh_2, ow_2, oc_block_2, ic_1, kh_1, kw_1, n_3, oc_chunk_3, oh_3, ow_3, oc_block_3 in T.grid(T.int64(4), T.int64(3), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(48), T.int64(1), T.int64(3), T.int64(1), T.int64(2), T.int64(1), T.int64(1), T.int64(1)):
                        with T.block("conv2d_NCHWc_update"):
                            v_n = T.axis.spatial(T.int64(1), n_1 + n_2 + n_3)
                            v_oc_chunk = T.axis.spatial(T.int64(12), n_0_oc_chunk_0_fused_fused * T.int64(2) + oc_chunk_1 * T.int64(2) + oc_chunk_2 * T.int64(2) + oc_chunk_3)
                            v_oh = T.axis.spatial(T.int64(14), oh_0 + oh_1 + oh_2 + oh_3)
                            v_ow = T.axis.spatial(T.int64(14), ow_0 * T.int64(2) + ow_1 + ow_2 + ow_3)
                            v_oc_block = T.axis.spatial(T.int64(4), oc_block_0 * T.int64(2) + oc_block_1 * T.int64(2) + oc_block_2 + oc_block_3)
                            v_ic = T.axis.reduce(T.int64(192), ic_0 * T.int64(48) + ic_1)
                            v_kh = T.axis.reduce(T.int64(3), kh_0 + kh_1)
                            v_kw = T.axis.reduce(T.int64(3), kw_0 * T.int64(3) + kw_1)
                            T.reads(conv2d_NCHWc_global[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block], data_pad[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)], p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block])
                            T.writes(conv2d_NCHWc_global[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                            T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                            conv2d_NCHWc_global[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = conv2d_NCHWc_global[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] + data_pad[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)] * p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block]
                for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(2), T.int64(1), T.int64(2)):
                    for ax4_fused in T.vectorized(T.int64(2)):
                        with T.block("conv2d_NCHWc_global"):
                            v0 = T.axis.spatial(T.int64(1), ax0)
                            v1 = T.axis.spatial(T.int64(12), n_0_oc_chunk_0_fused_fused * T.int64(2) + ax1)
                            v2 = T.axis.spatial(T.int64(14), oh_0 + ax2)
                            v3 = T.axis.spatial(T.int64(14), ow_0 * T.int64(2) + ax3)
                            v4 = T.axis.spatial(T.int64(4), oc_block_0 * T.int64(2) + ax4_fused)
                            T.reads(conv2d_NCHWc_global[v0, v1, v2, v3, v4])
                            T.writes(conv2d_NCHWc[v0, v1, v2, v3, v4])
                            conv2d_NCHWc[v0, v1, v2, v3, v4] = conv2d_NCHWc_global[v0, v1, v2, v3, v4]
b0 = sch.get_block(name="data_pad", func_name="main")
b1 = sch.get_block(name="conv2d_NCHWc", func_name="main")
b2 = sch.get_block(name="root", func_name="main")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSRSRS")
l3, l4, l5, l6, l7, l8, l9, l10 = sch.get_loops(block=b1)
v11, v12, v13, v14 = sch.sample_perfect_tile(loop=l3, n=4, max_innermost_factor=64, decision=[1, 1, 1, 1])
l15, l16, l17, l18 = sch.split(loop=l3, factors=[v11, v12, v13, v14], preserve_unit_iters=True)
v19, v20, v21, v22 = sch.sample_perfect_tile(loop=l4, n=4, max_innermost_factor=64, decision=[6, 1, 1, 2])
l23, l24, l25, l26 = sch.split(loop=l4, factors=[v19, v20, v21, v22], preserve_unit_iters=True)
v27, v28, v29, v30 = sch.sample_perfect_tile(loop=l5, n=4, max_innermost_factor=64, decision=[14, 1, 1, 1])
l31, l32, l33, l34 = sch.split(loop=l5, factors=[v27, v28, v29, v30], preserve_unit_iters=True)
v35, v36, v37, v38 = sch.sample_perfect_tile(loop=l6, n=4, max_innermost_factor=64, decision=[7, 2, 1, 1])
l39, l40, l41, l42 = sch.split(loop=l6, factors=[v35, v36, v37, v38], preserve_unit_iters=True)
v43, v44, v45, v46 = sch.sample_perfect_tile(loop=l7, n=4, max_innermost_factor=64, decision=[2, 1, 2, 1])
l47, l48, l49, l50 = sch.split(loop=l7, factors=[v43, v44, v45, v46], preserve_unit_iters=True)
v51, v52 = sch.sample_perfect_tile(loop=l8, n=2, max_innermost_factor=64, decision=[4, 48])
l53, l54 = sch.split(loop=l8, factors=[v51, v52], preserve_unit_iters=True)
v55, v56 = sch.sample_perfect_tile(loop=l9, n=2, max_innermost_factor=64, decision=[3, 1])
l57, l58 = sch.split(loop=l9, factors=[v55, v56], preserve_unit_iters=True)
v59, v60 = sch.sample_perfect_tile(loop=l10, n=2, max_innermost_factor=64, decision=[1, 3])
l61, l62 = sch.split(loop=l10, factors=[v59, v60], preserve_unit_iters=True)
sch.reorder(l15, l23, l31, l39, l47, l16, l24, l32, l40, l48, l53, l57, l61, l17, l25, l33, l41, l49, l54, l58, l62, l18, l26, l34, l42, l50)
b63 = sch.cache_write(block=b1, write_buffer_index=0, storage_scope="global")
sch.reverse_compute_at(block=b63, loop=l47, preserve_unit_loops=True, index=-1)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.vectorize", ann_val=64)
v64 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.unroll_explicit", ann_val=v64)
l65 = sch.sample_compute_location(block=b0, decision=1)
sch.compute_at(block=b0, loop=l65, preserve_unit_loops=True, index=-1)
sch.enter_postproc()
b66 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b66, ann_key="meta_schedule.parallel")
sch.unannotate(block_or_loop=b66, ann_key="meta_schedule.vectorize")
sch.unannotate(block_or_loop=b66, ann_key="meta_schedule.unroll_explicit")
b67, b68, b69 = sch.get_child_blocks(b66)
l70, l71, l72, l73, l74, l75, l76 = sch.get_loops(block=b67)
l77 = sch.fuse(l70, l71, preserve_unit_iters=True)
sch.parallel(loop=l77)
l78 = sch.fuse(l75, l76, preserve_unit_iters=True)
sch.vectorize(loop=l78)
l79, l80, l81, l82, l83, l84, l85, l86, l87, l88, l89, l90, l91, l92, l93, l94, l95, l96, l97, l98, l99, l100, l101, l102, l103 = sch.get_loops(block=b68)
l104 = sch.fuse(l79, preserve_unit_iters=True)
sch.parallel(loop=l104)
sch.annotate(block_or_loop=l104, ann_key="pragma_auto_unroll_max_step", ann_val=512)
sch.annotate(block_or_loop=l104, ann_key="pragma_unroll_explicit", ann_val=1)
l105, l106, l107, l108, l109, l110, l111, l112, l113 = sch.get_loops(block=b69)
l114 = sch.fuse(l113, preserve_unit_iters=True)
sch.vectorize(loop=l114)
b115 = sch.get_block(name="conv2d_NCHWc", func_name="main")
l116, l117, l118, l119, l120, l121, l122, l123, l124, l125, l126, l127, l128, l129, l130, l131, l132, l133, l134, l135, l136, l137, l138, l139, l140 = sch.get_loops(block=b115)
b141 = sch.decompose_reduction(block=b115, loop=l125)
2024-04-29 05:08:46 [INFO] [task_scheduler.cc:131] [Task #61: fused_nn_contrib_conv2d_NCHWc_1] Trial #15: GFLOPs: 29.1582. Time: 1115.0908 us. Best GFLOPs: 71.1149
2024-04-29 05:08:46 [INFO] [task_scheduler.cc:131] [Task #61: fused_nn_contrib_conv2d_NCHWc_1] Trial #16: GFLOPs: 7.6671. Time: 4240.7303 us. Best GFLOPs: 71.1149
2024-04-29 05:08:46 [INFO] [task_scheduler.cc:131] [Task #61: fused_nn_contrib_conv2d_NCHWc_1] Trial #17: GFLOPs: 76.0208. Time: 427.6992 us. Best GFLOPs: 76.0208
2024-04-29 05:08:46 [INFO] [task_scheduler.cc:131] [Task #61: fused_nn_contrib_conv2d_NCHWc_1] Trial #18: GFLOPs: 33.9000. Time: 959.1164 us. Best GFLOPs: 76.0208
2024-04-29 05:08:46 [INFO] [task_scheduler.cc:131] [Task #61: fused_nn_contrib_conv2d_NCHWc_1] Trial #19: GFLOPs: 14.9254. Time: 2178.4394 us. Best GFLOPs: 76.0208
2024-04-29 05:08:46 [INFO] [task_scheduler.cc:131] [Task #61: fused_nn_contrib_conv2d_NCHWc_1] Trial #20: GFLOPs: 2.1908. Time: 14841.2796 us. Best GFLOPs: 76.0208
2024-04-29 05:08:46 [INFO] [task_scheduler.cc:131] [Task #61: fused_nn_contrib_conv2d_NCHWc_1] Trial #21: GFLOPs: 17.2668. Time: 1883.0374 us. Best GFLOPs: 76.0208
2024-04-29 05:08:46 [INFO] [task_scheduler.cc:131] [Task #61: fused_nn_contrib_conv2d_NCHWc_1] Trial #22: GFLOPs: 21.7349. Time: 1495.9393 us. Best GFLOPs: 76.0208
2024-04-29 05:08:46 [INFO] [task_scheduler.cc:131] [Task #61: fused_nn_contrib_conv2d_NCHWc_1] Trial #23: GFLOPs: 4.0032. Time: 8122.0856 us. Best GFLOPs: 76.0208
2024-04-29 05:08:46 [INFO] [task_scheduler.cc:131] [Task #61: fused_nn_contrib_conv2d_NCHWc_1] Trial #24: GFLOPs: 24.0995. Time: 1349.1605 us. Best GFLOPs: 76.0208
2024-04-29 05:08:46 [INFO] [task_scheduler.cc:131] [Task #61: fused_nn_contrib_conv2d_NCHWc_1] Trial #25: GFLOPs: 48.5957. Time: 669.0721 us. Best GFLOPs: 76.0208
2024-04-29 05:08:46 [INFO] [task_scheduler.cc:131] [Task #61: fused_nn_contrib_conv2d_NCHWc_1] Trial #26: GFLOPs: 58.0111. Time: 560.4800 us. Best GFLOPs: 76.0208
2024-04-29 05:08:46 [INFO] [task_scheduler.cc:131] [Task #61: fused_nn_contrib_conv2d_NCHWc_1] Trial #27: GFLOPs: 3.0165. Time: 10778.6964 us. Best GFLOPs: 76.0208
2024-04-29 05:08:46 [INFO] [task_scheduler.cc:131] [Task #61: fused_nn_contrib_conv2d_NCHWc_1] Trial #28: GFLOPs: 146.6648. Time: 221.6895 us. Best GFLOPs: 146.6648
2024-04-29 05:08:46 [INFO] [task_scheduler.cc:131] [Task #61: fused_nn_contrib_conv2d_NCHWc_1] Trial #29: GFLOPs: 3.0979. Time: 10495.3767 us. Best GFLOPs: 146.6648
2024-04-29 05:08:46 [INFO] [task_scheduler.cc:131] [Task #61: fused_nn_contrib_conv2d_NCHWc_1] Trial #30: GFLOPs: 117.2920. Time: 277.2060 us. Best GFLOPs: 146.6648
2024-04-29 05:08:46 [INFO] [task_scheduler.cc:131] [Task #61: fused_nn_contrib_conv2d_NCHWc_1] Trial #31: GFLOPs: 30.1627. Time: 1077.9541 us. Best GFLOPs: 146.6648
2024-04-29 05:08:46 [INFO] [task_scheduler.cc:131] [Task #61: fused_nn_contrib_conv2d_NCHWc_1] Trial #32: GFLOPs: 3.6114. Time: 9003.0679 us. Best GFLOPs: 146.6648
2024-04-29 05:08:46 [INFO] [task_scheduler.cc:131] [Task #61: fused_nn_contrib_conv2d_NCHWc_1] Trial #33: GFLOPs: 62.0628. Time: 523.8899 us. Best GFLOPs: 146.6648
2024-04-29 05:08:46 [INFO] [task_scheduler.cc:131] [Task #61: fused_nn_contrib_conv2d_NCHWc_1] Trial #34: GFLOPs: 39.0703. Time: 832.1945 us. Best GFLOPs: 146.6648
2024-04-29 05:08:46 [INFO] [task_scheduler.cc:121] [Task #61: fused_nn_contrib_conv2d_NCHWc_1] Trial #35: Error in building:
LocalBuilder: Timeout, killed after 30.0 seconds
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(48), T.int64(14), T.int64(14), T.int64(4)), "float32"), p1: T.Buffer((T.int64(12), T.int64(48), T.int64(3), T.int64(3), T.int64(4), T.int64(4)), "float32"), conv2d_NCHWc: T.Buffer((T.int64(1), T.int64(12), T.int64(14), T.int64(14), T.int64(4)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        conv2d_NCHWc_global = T.alloc_buffer((T.int64(1), T.int64(12), T.int64(14), T.int64(14), T.int64(4)))
        for n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_fused in T.parallel(T.int64(24), annotations={"pragma_auto_unroll_max_step": 512, "pragma_unroll_explicit": 1}):
            for n_1, oc_chunk_1, oh_1, ow_1, oc_block_1 in T.grid(T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1)):
                for n_2_init, oc_chunk_2_init, oh_2_init, ow_2_init, oc_block_2_init, n_3_init, oc_chunk_3_init, oh_3_init, ow_3_init, oc_block_3_init in T.grid(T.int64(1), T.int64(2), T.int64(1), T.int64(7), T.int64(2), T.int64(1), T.int64(1), T.int64(14), T.int64(1), T.int64(1)):
                    with T.block("conv2d_NCHWc_init"):
                        v_n = T.axis.spatial(T.int64(1), n_1 + n_2_init + n_3_init)
                        v_oc_chunk = T.axis.spatial(T.int64(12), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_fused // T.int64(4) * T.int64(2) + oc_chunk_1 * T.int64(2) + oc_chunk_2_init + oc_chunk_3_init)
                        v_oh = T.axis.spatial(T.int64(14), oh_1 * T.int64(14) + oh_2_init * T.int64(14) + oh_3_init)
                        v_ow = T.axis.spatial(T.int64(14), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_fused % T.int64(4) // T.int64(2) * T.int64(7) + ow_1 * T.int64(7) + ow_2_init + ow_3_init)
                        v_oc_block = T.axis.spatial(T.int64(4), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_fused % T.int64(2) * T.int64(2) + oc_block_1 * T.int64(2) + oc_block_2_init + oc_block_3_init)
                        T.reads()
                        T.writes(conv2d_NCHWc_global[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                        T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                        conv2d_NCHWc_global[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = T.float32(0)
                for ic_0, kh_0, kw_0, n_2, oc_chunk_2, oh_2, ow_2, oc_block_2, ic_1, kh_1, kw_1, n_3, oc_chunk_3, oh_3, ow_3, oc_block_3 in T.grid(T.int64(6), T.int64(3), T.int64(3), T.int64(1), T.int64(2), T.int64(1), T.int64(7), T.int64(2), T.int64(32), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(14), T.int64(1), T.int64(1)):
                    with T.block("conv2d_NCHWc_update"):
                        v_n = T.axis.spatial(T.int64(1), n_1 + n_2 + n_3)
                        v_oc_chunk = T.axis.spatial(T.int64(12), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_fused // T.int64(4) * T.int64(2) + oc_chunk_1 * T.int64(2) + oc_chunk_2 + oc_chunk_3)
                        v_oh = T.axis.spatial(T.int64(14), oh_1 * T.int64(14) + oh_2 * T.int64(14) + oh_3)
                        v_ow = T.axis.spatial(T.int64(14), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_fused % T.int64(4) // T.int64(2) * T.int64(7) + ow_1 * T.int64(7) + ow_2 + ow_3)
                        v_oc_block = T.axis.spatial(T.int64(4), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_fused % T.int64(2) * T.int64(2) + oc_block_1 * T.int64(2) + oc_block_2 + oc_block_3)
                        v_ic = T.axis.reduce(T.int64(192), ic_0 * T.int64(32) + ic_1)
                        v_kh = T.axis.reduce(T.int64(3), kh_0 + kh_1)
                        v_kw = T.axis.reduce(T.int64(3), kw_0 + kw_1)
                        T.reads(conv2d_NCHWc_global[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block], p0[v_n, v_ic // T.int64(4), v_oh + v_kh - T.int64(1), v_ow + v_kw - T.int64(1), v_ic % T.int64(4)], p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block])
                        T.writes(conv2d_NCHWc_global[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                        T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                        conv2d_NCHWc_global[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = conv2d_NCHWc_global[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] + T.if_then_else(T.int64(1) <= v_oh + v_kh and v_oh + v_kh < T.int64(15) and T.int64(1) <= v_ow + v_kw and v_ow + v_kw < T.int64(15), p0[v_n, v_ic // T.int64(4), v_oh + v_kh - T.int64(1), v_ow + v_kw - T.int64(1), v_ic % T.int64(4)], T.float32(0)) * p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block]
            for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(2), T.int64(14), T.int64(7)):
                for ax4_fused in T.vectorized(T.int64(2)):
                    with T.block("conv2d_NCHWc_global"):
                        v0 = T.axis.spatial(T.int64(1), ax0)
                        v1 = T.axis.spatial(T.int64(12), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_fused // T.int64(4) * T.int64(2) + ax1)
                        v2 = T.axis.spatial(T.int64(14), ax2)
                        v3 = T.axis.spatial(T.int64(14), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_fused % T.int64(4) // T.int64(2) * T.int64(7) + ax3)
                        v4 = T.axis.spatial(T.int64(4), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_fused % T.int64(2) * T.int64(2) + ax4_fused)
                        T.reads(conv2d_NCHWc_global[v0, v1, v2, v3, v4])
                        T.writes(conv2d_NCHWc[v0, v1, v2, v3, v4])
                        conv2d_NCHWc[v0, v1, v2, v3, v4] = conv2d_NCHWc_global[v0, v1, v2, v3, v4]
b0 = sch.get_block(name="data_pad", func_name="main")
b1 = sch.get_block(name="conv2d_NCHWc", func_name="main")
b2 = sch.get_block(name="root", func_name="main")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSRSRS")
l3, l4, l5, l6, l7, l8, l9, l10 = sch.get_loops(block=b1)
v11, v12, v13, v14 = sch.sample_perfect_tile(loop=l3, n=4, max_innermost_factor=64, decision=[1, 1, 1, 1])
l15, l16, l17, l18 = sch.split(loop=l3, factors=[v11, v12, v13, v14], preserve_unit_iters=True)
v19, v20, v21, v22 = sch.sample_perfect_tile(loop=l4, n=4, max_innermost_factor=64, decision=[6, 1, 2, 1])
l23, l24, l25, l26 = sch.split(loop=l4, factors=[v19, v20, v21, v22], preserve_unit_iters=True)
v27, v28, v29, v30 = sch.sample_perfect_tile(loop=l5, n=4, max_innermost_factor=64, decision=[1, 1, 1, 14])
l31, l32, l33, l34 = sch.split(loop=l5, factors=[v27, v28, v29, v30], preserve_unit_iters=True)
v35, v36, v37, v38 = sch.sample_perfect_tile(loop=l6, n=4, max_innermost_factor=64, decision=[2, 1, 7, 1])
l39, l40, l41, l42 = sch.split(loop=l6, factors=[v35, v36, v37, v38], preserve_unit_iters=True)
v43, v44, v45, v46 = sch.sample_perfect_tile(loop=l7, n=4, max_innermost_factor=64, decision=[2, 1, 2, 1])
l47, l48, l49, l50 = sch.split(loop=l7, factors=[v43, v44, v45, v46], preserve_unit_iters=True)
v51, v52 = sch.sample_perfect_tile(loop=l8, n=2, max_innermost_factor=64, decision=[6, 32])
l53, l54 = sch.split(loop=l8, factors=[v51, v52], preserve_unit_iters=True)
v55, v56 = sch.sample_perfect_tile(loop=l9, n=2, max_innermost_factor=64, decision=[3, 1])
l57, l58 = sch.split(loop=l9, factors=[v55, v56], preserve_unit_iters=True)
v59, v60 = sch.sample_perfect_tile(loop=l10, n=2, max_innermost_factor=64, decision=[3, 1])
l61, l62 = sch.split(loop=l10, factors=[v59, v60], preserve_unit_iters=True)
sch.reorder(l15, l23, l31, l39, l47, l16, l24, l32, l40, l48, l53, l57, l61, l17, l25, l33, l41, l49, l54, l58, l62, l18, l26, l34, l42, l50)
b63 = sch.cache_write(block=b1, write_buffer_index=0, storage_scope="global")
sch.reverse_compute_at(block=b63, loop=l47, preserve_unit_loops=True, index=-1)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.vectorize", ann_val=64)
v64 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.unroll_explicit", ann_val=v64)
l65 = sch.sample_compute_location(block=b0, decision=-2)
sch.compute_at(block=b0, loop=l65, preserve_unit_loops=True, index=-1)
sch.enter_postproc()
b66 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b66, ann_key="meta_schedule.parallel")
sch.unannotate(block_or_loop=b66, ann_key="meta_schedule.vectorize")
sch.unannotate(block_or_loop=b66, ann_key="meta_schedule.unroll_explicit")
b67, b68 = sch.get_child_blocks(b66)
l69, l70, l71, l72, l73, l74, l75, l76, l77, l78, l79, l80, l81, l82, l83, l84, l85, l86, l87, l88, l89, l90, l91, l92, l93, l94 = sch.get_loops(block=b67)
l95 = sch.fuse(l69, l70, l71, l72, l73, preserve_unit_iters=True)
sch.parallel(loop=l95)
sch.annotate(block_or_loop=l95, ann_key="pragma_auto_unroll_max_step", ann_val=512)
sch.annotate(block_or_loop=l95, ann_key="pragma_unroll_explicit", ann_val=1)
l96, l97, l98, l99, l100, l101 = sch.get_loops(block=b68)
l102 = sch.fuse(l101, preserve_unit_iters=True)
sch.vectorize(loop=l102)
b103 = sch.get_block(name="conv2d_NCHWc", func_name="main")
l104, l105, l106, l107, l108, l109, l110, l111, l112, l113, l114, l115, l116, l117, l118, l119, l120, l121, l122, l123, l124, l125 = sch.get_loops(block=b103)
b126 = sch.decompose_reduction(block=b103, loop=l110)
2024-04-29 05:08:46 [INFO] [task_scheduler.cc:131] [Task #61: fused_nn_contrib_conv2d_NCHWc_1] Trial #36: GFLOPs: 14.6008. Time: 2226.8725 us. Best GFLOPs: 146.6648
2024-04-29 05:08:46 [INFO] [task_scheduler.cc:131] [Task #61: fused_nn_contrib_conv2d_NCHWc_1] Trial #37: GFLOPs: 8.9987. Time: 3613.1822 us. Best GFLOPs: 146.6648
2024-04-29 05:08:46 [INFO] [task_scheduler.cc:131] [Task #61: fused_nn_contrib_conv2d_NCHWc_1] Trial #38: GFLOPs: 32.9548. Time: 986.6241 us. Best GFLOPs: 146.6648
2024-04-29 05:08:46 [INFO] [task_scheduler.cc:131] [Task #61: fused_nn_contrib_conv2d_NCHWc_1] Trial #39: GFLOPs: 22.8511. Time: 1422.8685 us. Best GFLOPs: 146.6648
2024-04-29 05:08:46 [INFO] [task_scheduler.cc:131] [Task #61: fused_nn_contrib_conv2d_NCHWc_1] Trial #40: GFLOPs: 39.9525. Time: 813.8184 us. Best GFLOPs: 146.6648
2024-04-29 05:08:46 [INFO] [task_scheduler.cc:131] [Task #61: fused_nn_contrib_conv2d_NCHWc_1] Trial #41: GFLOPs: 61.7472. Time: 526.5671 us. Best GFLOPs: 146.6648
2024-04-29 05:08:46 [INFO] [task_scheduler.cc:131] [Task #61: fused_nn_contrib_conv2d_NCHWc_1] Trial #42: GFLOPs: 120.2666. Time: 270.3497 us. Best GFLOPs: 146.6648
2024-04-29 05:08:46 [INFO] [task_scheduler.cc:131] [Task #61: fused_nn_contrib_conv2d_NCHWc_1] Trial #43: GFLOPs: 87.2795. Time: 372.5280 us. Best GFLOPs: 146.6648
2024-04-29 05:08:46 [INFO] [task_scheduler.cc:131] [Task #61: fused_nn_contrib_conv2d_NCHWc_1] Trial #44: GFLOPs: 102.3472. Time: 317.6837 us. Best GFLOPs: 146.6648
2024-04-29 05:08:46 [INFO] [task_scheduler.cc:131] [Task #61: fused_nn_contrib_conv2d_NCHWc_1] Trial #45: GFLOPs: 9.6656. Time: 3363.8763 us. Best GFLOPs: 146.6648
2024-04-29 05:08:46 [INFO] [task_scheduler.cc:131] [Task #61: fused_nn_contrib_conv2d_NCHWc_1] Trial #46: GFLOPs: 33.4848. Time: 971.0086 us. Best GFLOPs: 146.6648
2024-04-29 05:08:46 [INFO] [task_scheduler.cc:131] [Task #61: fused_nn_contrib_conv2d_NCHWc_1] Trial #47: GFLOPs: 5.4423. Time: 5974.2944 us. Best GFLOPs: 146.6648
2024-04-29 05:08:46 [INFO] [task_scheduler.cc:131] [Task #61: fused_nn_contrib_conv2d_NCHWc_1] Trial #48: GFLOPs: 4.3702. Time: 7439.9393 us. Best GFLOPs: 146.6648
2024-04-29 05:08:46 [INFO] [task_scheduler.cc:131] [Task #61: fused_nn_contrib_conv2d_NCHWc_1] Trial #49: GFLOPs: 16.3733. Time: 1985.7916 us. Best GFLOPs: 146.6648
2024-04-29 05:08:46 [INFO] [task_scheduler.cc:131] [Task #61: fused_nn_contrib_conv2d_NCHWc_1] Trial #50: GFLOPs: 11.2376. Time: 2893.3263 us. Best GFLOPs: 146.6648
2024-04-29 05:08:46 [INFO] [task_scheduler.cc:131] [Task #61: fused_nn_contrib_conv2d_NCHWc_1] Trial #51: GFLOPs: 16.1389. Time: 2014.6439 us. Best GFLOPs: 146.6648
2024-04-29 05:08:46 [INFO] [task_scheduler.cc:131] [Task #61: fused_nn_contrib_conv2d_NCHWc_1] Trial #52: GFLOPs: 6.9870. Time: 4653.5129 us. Best GFLOPs: 146.6648
2024-04-29 05:08:46 [INFO] [task_scheduler.cc:131] [Task #61: fused_nn_contrib_conv2d_NCHWc_1] Trial #53: GFLOPs: 5.3101. Time: 6123.0752 us. Best GFLOPs: 146.6648
2024-04-29 05:08:46 [INFO] [task_scheduler.cc:131] [Task #61: fused_nn_contrib_conv2d_NCHWc_1] Trial #54: GFLOPs: 50.1136. Time: 648.8067 us. Best GFLOPs: 146.6648
2024-04-29 05:08:46 [INFO] [task_scheduler.cc:131] [Task #61: fused_nn_contrib_conv2d_NCHWc_1] Trial #55: GFLOPs: 1.3514. Time: 24060.3020 us. Best GFLOPs: 146.6648
2024-04-29 05:08:46 [INFO] [task_scheduler.cc:131] [Task #61: fused_nn_contrib_conv2d_NCHWc_1] Trial #56: GFLOPs: 26.9750. Time: 1205.3381 us. Best GFLOPs: 146.6648
2024-04-29 05:08:46 [INFO] [task_scheduler.cc:121] [Task #61: fused_nn_contrib_conv2d_NCHWc_1] Trial #57: Error in building:
LocalBuilder: Timeout, killed after 30.0 seconds
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(48), T.int64(14), T.int64(14), T.int64(4)), "float32"), p1: T.Buffer((T.int64(12), T.int64(48), T.int64(3), T.int64(3), T.int64(4), T.int64(4)), "float32"), conv2d_NCHWc: T.Buffer((T.int64(1), T.int64(12), T.int64(14), T.int64(14), T.int64(4)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        data_pad = T.alloc_buffer((T.int64(1), T.int64(48), T.int64(16), T.int64(16), T.int64(4)))
        conv2d_NCHWc_global = T.alloc_buffer((T.int64(1), T.int64(12), T.int64(14), T.int64(14), T.int64(4)))
        for n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_fused_fused in T.parallel(T.int64(4), annotations={"pragma_auto_unroll_max_step": 512, "pragma_unroll_explicit": 1}):
            for n_1, oc_chunk_1, oh_1, ow_1 in T.grid(T.int64(1), T.int64(3), T.int64(1), T.int64(7)):
                for ax0, ax1, ax2 in T.grid(T.int64(1), T.int64(48), T.int64(16)):
                    for ax3_ax4_fused in T.vectorized(T.int64(12)):
                        with T.block("data_pad"):
                            v_i0, v_i1, v_i2 = T.axis.remap("SSS", [ax0, ax1, ax2])
                            v_i3 = T.axis.spatial(T.int64(16), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_fused_fused % T.int64(2) * T.int64(7) + ow_1 + ax3_ax4_fused // T.int64(4))
                            v_i4 = T.axis.spatial(T.int64(4), ax3_ax4_fused % T.int64(4))
                            T.reads(p0[v_i0, v_i1, v_i2 - T.int64(1), v_i3 - T.int64(1), v_i4])
                            T.writes(data_pad[v_i0, v_i1, v_i2, v_i3, v_i4])
                            data_pad[v_i0, v_i1, v_i2, v_i3, v_i4] = T.if_then_else(T.int64(1) <= v_i2 and v_i2 < T.int64(15) and T.int64(1) <= v_i3 and v_i3 < T.int64(15), p0[v_i0, v_i1, v_i2 - T.int64(1), v_i3 - T.int64(1), v_i4], T.float32(0))
                for oc_block_1 in range(T.int64(4)):
                    for n_2_init, oc_chunk_2_init, oh_2_init, ow_2_init, oc_block_2_init, n_3_init, oc_chunk_3_init, oh_3_init, ow_3_init, oc_block_3_init in T.grid(T.int64(1), T.int64(1), T.int64(14), T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(1), T.int64(1), T.int64(1)):
                        with T.block("conv2d_NCHWc_init"):
                            v_n = T.axis.spatial(T.int64(1), n_1 + n_2_init + n_3_init)
                            v_oc_chunk = T.axis.spatial(T.int64(12), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_fused_fused // T.int64(2) * T.int64(6) + oc_chunk_1 * T.int64(2) + oc_chunk_2_init * T.int64(2) + oc_chunk_3_init)
                            v_oh = T.axis.spatial(T.int64(14), oh_1 * T.int64(14) + oh_2_init + oh_3_init)
                            v_ow = T.axis.spatial(T.int64(14), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_fused_fused % T.int64(2) * T.int64(7) + ow_1 + ow_2_init + ow_3_init)
                            v_oc_block = T.axis.spatial(T.int64(4), oc_block_1 + oc_block_2_init + oc_block_3_init)
                            T.reads()
                            T.writes(conv2d_NCHWc_global[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                            T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                            conv2d_NCHWc_global[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = T.float32(0)
                    for ic_0, kh_0, kw_0, n_2, oc_chunk_2, oh_2, ow_2, oc_block_2, ic_1, kh_1, kw_1, n_3, oc_chunk_3, oh_3, ow_3, oc_block_3 in T.grid(T.int64(3), T.int64(1), T.int64(3), T.int64(1), T.int64(1), T.int64(14), T.int64(1), T.int64(1), T.int64(64), T.int64(3), T.int64(1), T.int64(1), T.int64(2), T.int64(1), T.int64(1), T.int64(1)):
                        with T.block("conv2d_NCHWc_update"):
                            v_n = T.axis.spatial(T.int64(1), n_1 + n_2 + n_3)
                            v_oc_chunk = T.axis.spatial(T.int64(12), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_fused_fused // T.int64(2) * T.int64(6) + oc_chunk_1 * T.int64(2) + oc_chunk_2 * T.int64(2) + oc_chunk_3)
                            v_oh = T.axis.spatial(T.int64(14), oh_1 * T.int64(14) + oh_2 + oh_3)
                            v_ow = T.axis.spatial(T.int64(14), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_fused_fused % T.int64(2) * T.int64(7) + ow_1 + ow_2 + ow_3)
                            v_oc_block = T.axis.spatial(T.int64(4), oc_block_1 + oc_block_2 + oc_block_3)
                            v_ic = T.axis.reduce(T.int64(192), ic_0 * T.int64(64) + ic_1)
                            v_kh = T.axis.reduce(T.int64(3), kh_0 * T.int64(3) + kh_1)
                            v_kw = T.axis.reduce(T.int64(3), kw_0 + kw_1)
                            T.reads(conv2d_NCHWc_global[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block], data_pad[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)], p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block])
                            T.writes(conv2d_NCHWc_global[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                            T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                            conv2d_NCHWc_global[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = conv2d_NCHWc_global[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] + data_pad[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)] * p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block]
            for ax0, ax1, ax2 in T.grid(T.int64(1), T.int64(6), T.int64(14)):
                for ax3_ax4_fused in T.vectorized(T.int64(28)):
                    with T.block("conv2d_NCHWc_global"):
                        v0 = T.axis.spatial(T.int64(1), ax0)
                        v1 = T.axis.spatial(T.int64(12), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_fused_fused // T.int64(2) * T.int64(6) + ax1)
                        v2 = T.axis.spatial(T.int64(14), ax2)
                        v3 = T.axis.spatial(T.int64(14), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_fused_fused % T.int64(2) * T.int64(7) + ax3_ax4_fused // T.int64(4))
                        v4 = T.axis.spatial(T.int64(4), ax3_ax4_fused % T.int64(4))
                        T.reads(conv2d_NCHWc_global[v0, v1, v2, v3, v4])
                        T.writes(conv2d_NCHWc[v0, v1, v2, v3, v4])
                        conv2d_NCHWc[v0, v1, v2, v3, v4] = conv2d_NCHWc_global[v0, v1, v2, v3, v4]
b0 = sch.get_block(name="data_pad", func_name="main")
b1 = sch.get_block(name="conv2d_NCHWc", func_name="main")
b2 = sch.get_block(name="root", func_name="main")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSRSRS")
l3, l4, l5, l6, l7, l8, l9, l10 = sch.get_loops(block=b1)
v11, v12, v13, v14 = sch.sample_perfect_tile(loop=l3, n=4, max_innermost_factor=64, decision=[1, 1, 1, 1])
l15, l16, l17, l18 = sch.split(loop=l3, factors=[v11, v12, v13, v14], preserve_unit_iters=True)
v19, v20, v21, v22 = sch.sample_perfect_tile(loop=l4, n=4, max_innermost_factor=64, decision=[2, 3, 1, 2])
l23, l24, l25, l26 = sch.split(loop=l4, factors=[v19, v20, v21, v22], preserve_unit_iters=True)
v27, v28, v29, v30 = sch.sample_perfect_tile(loop=l5, n=4, max_innermost_factor=64, decision=[1, 1, 14, 1])
l31, l32, l33, l34 = sch.split(loop=l5, factors=[v27, v28, v29, v30], preserve_unit_iters=True)
v35, v36, v37, v38 = sch.sample_perfect_tile(loop=l6, n=4, max_innermost_factor=64, decision=[2, 7, 1, 1])
l39, l40, l41, l42 = sch.split(loop=l6, factors=[v35, v36, v37, v38], preserve_unit_iters=True)
v43, v44, v45, v46 = sch.sample_perfect_tile(loop=l7, n=4, max_innermost_factor=64, decision=[1, 4, 1, 1])
l47, l48, l49, l50 = sch.split(loop=l7, factors=[v43, v44, v45, v46], preserve_unit_iters=True)
v51, v52 = sch.sample_perfect_tile(loop=l8, n=2, max_innermost_factor=64, decision=[3, 64])
l53, l54 = sch.split(loop=l8, factors=[v51, v52], preserve_unit_iters=True)
v55, v56 = sch.sample_perfect_tile(loop=l9, n=2, max_innermost_factor=64, decision=[1, 3])
l57, l58 = sch.split(loop=l9, factors=[v55, v56], preserve_unit_iters=True)
v59, v60 = sch.sample_perfect_tile(loop=l10, n=2, max_innermost_factor=64, decision=[3, 1])
l61, l62 = sch.split(loop=l10, factors=[v59, v60], preserve_unit_iters=True)
sch.reorder(l15, l23, l31, l39, l47, l16, l24, l32, l40, l48, l53, l57, l61, l17, l25, l33, l41, l49, l54, l58, l62, l18, l26, l34, l42, l50)
b63 = sch.cache_write(block=b1, write_buffer_index=0, storage_scope="global")
sch.reverse_compute_at(block=b63, loop=l47, preserve_unit_loops=True, index=-1)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.vectorize", ann_val=64)
v64 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.unroll_explicit", ann_val=v64)
l65 = sch.sample_compute_location(block=b0, decision=8)
sch.compute_at(block=b0, loop=l65, preserve_unit_loops=True, index=-1)
sch.enter_postproc()
b66 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b66, ann_key="meta_schedule.parallel")
sch.unannotate(block_or_loop=b66, ann_key="meta_schedule.vectorize")
sch.unannotate(block_or_loop=b66, ann_key="meta_schedule.unroll_explicit")
b67, b68, b69 = sch.get_child_blocks(b66)
l70, l71, l72, l73, l74, l75, l76, l77, l78, l79, l80, l81, l82, l83 = sch.get_loops(block=b67)
l84 = sch.fuse(l70, l71, l72, l73, l74, preserve_unit_iters=True)
sch.parallel(loop=l84)
l85 = sch.fuse(l82, l83, preserve_unit_iters=True)
sch.vectorize(loop=l85)
l86, l87, l88, l89, l90, l91, l92, l93, l94, l95, l96, l97, l98, l99, l100, l101, l102, l103, l104, l105, l106, l107 = sch.get_loops(block=b68)
l108 = sch.fuse(l86, preserve_unit_iters=True)
sch.parallel(loop=l108)
sch.annotate(block_or_loop=l108, ann_key="pragma_auto_unroll_max_step", ann_val=512)
sch.annotate(block_or_loop=l108, ann_key="pragma_unroll_explicit", ann_val=1)
l109, l110, l111, l112, l113, l114 = sch.get_loops(block=b69)
l115 = sch.fuse(l113, l114, preserve_unit_iters=True)
sch.vectorize(loop=l115)
b116 = sch.get_block(name="conv2d_NCHWc", func_name="main")
l117, l118, l119, l120, l121, l122, l123, l124, l125, l126, l127, l128, l129, l130, l131, l132, l133, l134, l135, l136, l137, l138 = sch.get_loops(block=b116)
b139 = sch.decompose_reduction(block=b116, loop=l123)
2024-04-29 05:08:46 [INFO] [task_scheduler.cc:131] [Task #61: fused_nn_contrib_conv2d_NCHWc_1] Trial #58: GFLOPs: 42.2384. Time: 769.7754 us. Best GFLOPs: 146.6648
2024-04-29 05:08:46 [INFO] [task_scheduler.cc:131] [Task #61: fused_nn_contrib_conv2d_NCHWc_1] Trial #59: GFLOPs: 35.6658. Time: 911.6311 us. Best GFLOPs: 146.6648
2024-04-29 05:08:46 [INFO] [task_scheduler.cc:131] [Task #61: fused_nn_contrib_conv2d_NCHWc_1] Trial #60: GFLOPs: 1.8389. Time: 17681.6062 us. Best GFLOPs: 146.6648
2024-04-29 05:08:46 [INFO] [task_scheduler.cc:131] [Task #61: fused_nn_contrib_conv2d_NCHWc_1] Trial #61: GFLOPs: 17.7064. Time: 1836.2927 us. Best GFLOPs: 146.6648
2024-04-29 05:08:46 [INFO] [task_scheduler.cc:131] [Task #61: fused_nn_contrib_conv2d_NCHWc_1] Trial #62: GFLOPs: 35.8862. Time: 906.0324 us. Best GFLOPs: 146.6648
2024-04-29 05:08:46 [INFO] [task_scheduler.cc:131] [Task #61: fused_nn_contrib_conv2d_NCHWc_1] Trial #63: GFLOPs: 18.5898. Time: 1749.0244 us. Best GFLOPs: 146.6648
2024-04-29 05:08:46 [INFO] [task_scheduler.cc:131] [Task #61: fused_nn_contrib_conv2d_NCHWc_1] Trial #64: GFLOPs: 31.7613. Time: 1023.7016 us. Best GFLOPs: 146.6648
2024-04-29 05:19:23 [INFO] [evolutionary_search.cc:713] Generating candidates......
2024-04-29 05:19:24 [INFO] [evolutionary_search.cc:715] Picked top 60 candidate(s) from database
2024-04-29 05:19:28 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0xc83fed8)]: 6 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0xc5901d8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x15321f68)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x1063f078)]: 0 failure(s)
2024-04-29 05:19:28 [INFO] [evolutionary_search.cc:723] Sampled 446 candidate(s)
2024-04-29 05:19:39 [INFO] [evolutionary_search.cc:621] Evolve iter #0 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0xc83fed8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0xc5901d8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x15321f68)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x1063f078)]: 0 failure(s)
2024-04-29 05:19:51 [INFO] [evolutionary_search.cc:621] Evolve iter #1 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0xc83fed8)]: 3 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0xc5901d8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x15321f68)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x1063f078)]: 0 failure(s)
2024-04-29 05:20:03 [INFO] [evolutionary_search.cc:621] Evolve iter #2 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0xc83fed8)]: 1 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0xc5901d8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x15321f68)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x1063f078)]: 0 failure(s)
2024-04-29 05:20:15 [INFO] [evolutionary_search.cc:621] Evolve iter #3 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0xc83fed8)]: 1 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0xc5901d8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x15321f68)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x1063f078)]: 0 failure(s)
2024-04-29 05:20:22 [INFO] [evolutionary_search.cc:649] Scores of the best 64 candidates:
[1 : 16]:	1.0614  1.0343  1.0091  1.0009  0.9889  0.9705  0.9683  0.9674  0.9674  0.9674  0.9674  0.9674  0.9674  0.9666  0.9619  0.9619
[17 : 32]:	0.9598  0.9574  0.9574  0.9552  0.9479  0.9417  0.9417  0.9417  0.9317  0.9217  0.9217  0.9216  0.9216  0.9216  0.9175  0.9163
[33 : 48]:	0.9163  0.9163  0.9163  0.9135  0.9078  0.9053  0.9051  0.9046  0.8981  0.8963  0.8963  0.8959  0.8938  0.8937  0.8925  0.8874
[49 : 64]:	0.8874  0.8874  0.8821  0.8786  0.8779  0.8735  0.8693  0.8650  0.8650  0.8650  0.8596  0.8512  0.8503  0.8499  0.8499  0.8499
2024-04-29 05:20:22 [INFO] [evolutionary_search.cc:727] Got 64 candidate(s) with evolutionary search
2024-04-29 05:20:23 [INFO] [evolutionary_search.cc:730] Sending 64 candidates(s) for measurement
2024-04-29 05:21:59 [INFO] [task_scheduler.cc:131] [Task #61: fused_nn_contrib_conv2d_NCHWc_1] Trial #65: GFLOPs: 76.4871. Time: 425.0917 us. Best GFLOPs: 146.6648
2024-04-29 05:21:59 [INFO] [task_scheduler.cc:131] [Task #61: fused_nn_contrib_conv2d_NCHWc_1] Trial #66: GFLOPs: 66.9302. Time: 485.7906 us. Best GFLOPs: 146.6648
2024-04-29 05:21:59 [INFO] [task_scheduler.cc:131] [Task #61: fused_nn_contrib_conv2d_NCHWc_1] Trial #67: GFLOPs: 75.8724. Time: 428.5360 us. Best GFLOPs: 146.6648
2024-04-29 05:21:59 [INFO] [task_scheduler.cc:131] [Task #61: fused_nn_contrib_conv2d_NCHWc_1] Trial #68: GFLOPs: 41.6075. Time: 781.4469 us. Best GFLOPs: 146.6648
2024-04-29 05:21:59 [INFO] [task_scheduler.cc:131] [Task #61: fused_nn_contrib_conv2d_NCHWc_1] Trial #69: GFLOPs: 65.7307. Time: 494.6556 us. Best GFLOPs: 146.6648
2024-04-29 05:21:59 [INFO] [task_scheduler.cc:131] [Task #61: fused_nn_contrib_conv2d_NCHWc_1] Trial #70: GFLOPs: 90.8813. Time: 357.7640 us. Best GFLOPs: 146.6648
2024-04-29 05:21:59 [INFO] [task_scheduler.cc:131] [Task #61: fused_nn_contrib_conv2d_NCHWc_1] Trial #71: GFLOPs: 105.5601. Time: 308.0146 us. Best GFLOPs: 146.6648
2024-04-29 05:21:59 [INFO] [task_scheduler.cc:131] [Task #61: fused_nn_contrib_conv2d_NCHWc_1] Trial #72: GFLOPs: 127.4100. Time: 255.1922 us. Best GFLOPs: 146.6648
2024-04-29 05:21:59 [INFO] [task_scheduler.cc:131] [Task #61: fused_nn_contrib_conv2d_NCHWc_1] Trial #73: GFLOPs: 129.1693. Time: 251.7166 us. Best GFLOPs: 146.6648
2024-04-29 05:21:59 [INFO] [task_scheduler.cc:131] [Task #61: fused_nn_contrib_conv2d_NCHWc_1] Trial #74: GFLOPs: 128.9234. Time: 252.1967 us. Best GFLOPs: 146.6648
2024-04-29 05:21:59 [INFO] [task_scheduler.cc:131] [Task #61: fused_nn_contrib_conv2d_NCHWc_1] Trial #75: GFLOPs: 137.3302. Time: 236.7582 us. Best GFLOPs: 146.6648
2024-04-29 05:21:59 [INFO] [task_scheduler.cc:131] [Task #61: fused_nn_contrib_conv2d_NCHWc_1] Trial #76: GFLOPs: 93.6025. Time: 347.3632 us. Best GFLOPs: 146.6648
2024-04-29 05:21:59 [INFO] [task_scheduler.cc:131] [Task #61: fused_nn_contrib_conv2d_NCHWc_1] Trial #77: GFLOPs: 89.1943. Time: 364.5307 us. Best GFLOPs: 146.6648
2024-04-29 05:21:59 [INFO] [task_scheduler.cc:131] [Task #61: fused_nn_contrib_conv2d_NCHWc_1] Trial #78: GFLOPs: 149.9917. Time: 216.7724 us. Best GFLOPs: 149.9917
2024-04-29 05:21:59 [INFO] [task_scheduler.cc:131] [Task #61: fused_nn_contrib_conv2d_NCHWc_1] Trial #79: GFLOPs: 176.8292. Time: 183.8726 us. Best GFLOPs: 176.8292
2024-04-29 05:21:59 [INFO] [task_scheduler.cc:131] [Task #61: fused_nn_contrib_conv2d_NCHWc_1] Trial #80: GFLOPs: 155.2810. Time: 209.3884 us. Best GFLOPs: 176.8292
2024-04-29 05:21:59 [INFO] [task_scheduler.cc:131] [Task #61: fused_nn_contrib_conv2d_NCHWc_1] Trial #81: GFLOPs: 132.5759. Time: 245.2486 us. Best GFLOPs: 176.8292
2024-04-29 05:21:59 [INFO] [task_scheduler.cc:131] [Task #61: fused_nn_contrib_conv2d_NCHWc_1] Trial #82: GFLOPs: 106.5239. Time: 305.2276 us. Best GFLOPs: 176.8292
2024-04-29 05:21:59 [INFO] [task_scheduler.cc:131] [Task #61: fused_nn_contrib_conv2d_NCHWc_1] Trial #83: GFLOPs: 130.3151. Time: 249.5032 us. Best GFLOPs: 176.8292
2024-04-29 05:21:59 [INFO] [task_scheduler.cc:131] [Task #61: fused_nn_contrib_conv2d_NCHWc_1] Trial #84: GFLOPs: 155.1977. Time: 209.5008 us. Best GFLOPs: 176.8292
2024-04-29 05:21:59 [INFO] [task_scheduler.cc:131] [Task #61: fused_nn_contrib_conv2d_NCHWc_1] Trial #85: GFLOPs: 118.2065. Time: 275.0615 us. Best GFLOPs: 176.8292
2024-04-29 05:21:59 [INFO] [task_scheduler.cc:131] [Task #61: fused_nn_contrib_conv2d_NCHWc_1] Trial #86: GFLOPs: 87.2416. Time: 372.6896 us. Best GFLOPs: 176.8292
2024-04-29 05:21:59 [INFO] [task_scheduler.cc:131] [Task #61: fused_nn_contrib_conv2d_NCHWc_1] Trial #87: GFLOPs: 140.8052. Time: 230.9150 us. Best GFLOPs: 176.8292
2024-04-29 05:21:59 [INFO] [task_scheduler.cc:131] [Task #61: fused_nn_contrib_conv2d_NCHWc_1] Trial #88: GFLOPs: 140.4430. Time: 231.5106 us. Best GFLOPs: 176.8292
2024-04-29 05:21:59 [INFO] [task_scheduler.cc:131] [Task #61: fused_nn_contrib_conv2d_NCHWc_1] Trial #89: GFLOPs: 120.9349. Time: 268.8558 us. Best GFLOPs: 176.8292
2024-04-29 05:21:59 [INFO] [task_scheduler.cc:131] [Task #61: fused_nn_contrib_conv2d_NCHWc_1] Trial #90: GFLOPs: 98.8887. Time: 328.7945 us. Best GFLOPs: 176.8292
2024-04-29 05:21:59 [INFO] [task_scheduler.cc:131] [Task #61: fused_nn_contrib_conv2d_NCHWc_1] Trial #91: GFLOPs: 124.5686. Time: 261.0131 us. Best GFLOPs: 176.8292
2024-04-29 05:21:59 [INFO] [task_scheduler.cc:131] [Task #61: fused_nn_contrib_conv2d_NCHWc_1] Trial #92: GFLOPs: 142.9512. Time: 227.4486 us. Best GFLOPs: 176.8292
2024-04-29 05:21:59 [INFO] [task_scheduler.cc:131] [Task #61: fused_nn_contrib_conv2d_NCHWc_1] Trial #93: GFLOPs: 101.5183. Time: 320.2776 us. Best GFLOPs: 176.8292
2024-04-29 05:21:59 [INFO] [task_scheduler.cc:131] [Task #61: fused_nn_contrib_conv2d_NCHWc_1] Trial #94: GFLOPs: 116.4615. Time: 279.1828 us. Best GFLOPs: 176.8292
2024-04-29 05:21:59 [INFO] [task_scheduler.cc:131] [Task #61: fused_nn_contrib_conv2d_NCHWc_1] Trial #95: GFLOPs: 135.3198. Time: 240.2756 us. Best GFLOPs: 176.8292
2024-04-29 05:21:59 [INFO] [task_scheduler.cc:131] [Task #61: fused_nn_contrib_conv2d_NCHWc_1] Trial #96: GFLOPs: 113.9132. Time: 285.4282 us. Best GFLOPs: 176.8292
2024-04-29 05:21:59 [INFO] [task_scheduler.cc:131] [Task #61: fused_nn_contrib_conv2d_NCHWc_1] Trial #97: GFLOPs: 133.7809. Time: 243.0395 us. Best GFLOPs: 176.8292
2024-04-29 05:21:59 [INFO] [task_scheduler.cc:131] [Task #61: fused_nn_contrib_conv2d_NCHWc_1] Trial #98: GFLOPs: 110.7760. Time: 293.5117 us. Best GFLOPs: 176.8292
2024-04-29 05:21:59 [INFO] [task_scheduler.cc:131] [Task #61: fused_nn_contrib_conv2d_NCHWc_1] Trial #99: GFLOPs: 100.6049. Time: 323.1854 us. Best GFLOPs: 176.8292
2024-04-29 05:21:59 [INFO] [task_scheduler.cc:131] [Task #61: fused_nn_contrib_conv2d_NCHWc_1] Trial #100: GFLOPs: 109.9683. Time: 295.6674 us. Best GFLOPs: 176.8292
2024-04-29 05:21:59 [INFO] [task_scheduler.cc:131] [Task #61: fused_nn_contrib_conv2d_NCHWc_1] Trial #101: GFLOPs: 151.2849. Time: 214.9193 us. Best GFLOPs: 176.8292
2024-04-29 05:21:59 [INFO] [task_scheduler.cc:131] [Task #61: fused_nn_contrib_conv2d_NCHWc_1] Trial #102: GFLOPs: 127.5079. Time: 254.9963 us. Best GFLOPs: 176.8292
2024-04-29 05:21:59 [INFO] [task_scheduler.cc:131] [Task #61: fused_nn_contrib_conv2d_NCHWc_1] Trial #103: GFLOPs: 124.3169. Time: 261.5417 us. Best GFLOPs: 176.8292
2024-04-29 05:21:59 [INFO] [task_scheduler.cc:131] [Task #61: fused_nn_contrib_conv2d_NCHWc_1] Trial #104: GFLOPs: 71.9062. Time: 452.1731 us. Best GFLOPs: 176.8292
2024-04-29 05:21:59 [INFO] [task_scheduler.cc:131] [Task #61: fused_nn_contrib_conv2d_NCHWc_1] Trial #105: GFLOPs: 110.7999. Time: 293.4483 us. Best GFLOPs: 176.8292
2024-04-29 05:21:59 [INFO] [task_scheduler.cc:131] [Task #61: fused_nn_contrib_conv2d_NCHWc_1] Trial #106: GFLOPs: 186.0568. Time: 174.7534 us. Best GFLOPs: 186.0568
2024-04-29 05:21:59 [INFO] [task_scheduler.cc:131] [Task #61: fused_nn_contrib_conv2d_NCHWc_1] Trial #107: GFLOPs: 176.7956. Time: 183.9076 us. Best GFLOPs: 186.0568
2024-04-29 05:21:59 [INFO] [task_scheduler.cc:131] [Task #61: fused_nn_contrib_conv2d_NCHWc_1] Trial #108: GFLOPs: 152.6907. Time: 212.9406 us. Best GFLOPs: 186.0568
2024-04-29 05:21:59 [INFO] [task_scheduler.cc:131] [Task #61: fused_nn_contrib_conv2d_NCHWc_1] Trial #109: GFLOPs: 152.3920. Time: 213.3580 us. Best GFLOPs: 186.0568
2024-04-29 05:21:59 [INFO] [task_scheduler.cc:131] [Task #61: fused_nn_contrib_conv2d_NCHWc_1] Trial #110: GFLOPs: 220.6736. Time: 147.3400 us. Best GFLOPs: 220.6736
2024-04-29 05:21:59 [INFO] [task_scheduler.cc:131] [Task #61: fused_nn_contrib_conv2d_NCHWc_1] Trial #111: GFLOPs: 136.5671. Time: 238.0811 us. Best GFLOPs: 220.6736
2024-04-29 05:21:59 [INFO] [task_scheduler.cc:131] [Task #61: fused_nn_contrib_conv2d_NCHWc_1] Trial #112: GFLOPs: 97.6433. Time: 332.9881 us. Best GFLOPs: 220.6736
2024-04-29 05:21:59 [INFO] [task_scheduler.cc:131] [Task #61: fused_nn_contrib_conv2d_NCHWc_1] Trial #113: GFLOPs: 113.0515. Time: 287.6038 us. Best GFLOPs: 220.6736
2024-04-29 05:21:59 [INFO] [task_scheduler.cc:131] [Task #61: fused_nn_contrib_conv2d_NCHWc_1] Trial #114: GFLOPs: 100.8420. Time: 322.4256 us. Best GFLOPs: 220.6736
2024-04-29 05:21:59 [INFO] [task_scheduler.cc:131] [Task #61: fused_nn_contrib_conv2d_NCHWc_1] Trial #115: GFLOPs: 119.9105. Time: 271.1526 us. Best GFLOPs: 220.6736
2024-04-29 05:21:59 [INFO] [task_scheduler.cc:131] [Task #61: fused_nn_contrib_conv2d_NCHWc_1] Trial #116: GFLOPs: 100.4076. Time: 323.8204 us. Best GFLOPs: 220.6736
2024-04-29 05:21:59 [INFO] [task_scheduler.cc:131] [Task #61: fused_nn_contrib_conv2d_NCHWc_1] Trial #117: GFLOPs: 144.0646. Time: 225.6908 us. Best GFLOPs: 220.6736
2024-04-29 05:21:59 [INFO] [task_scheduler.cc:131] [Task #61: fused_nn_contrib_conv2d_NCHWc_1] Trial #118: GFLOPs: 92.1018. Time: 353.0228 us. Best GFLOPs: 220.6736
2024-04-29 05:21:59 [INFO] [task_scheduler.cc:131] [Task #61: fused_nn_contrib_conv2d_NCHWc_1] Trial #119: GFLOPs: 97.0850. Time: 334.9029 us. Best GFLOPs: 220.6736
2024-04-29 05:21:59 [INFO] [task_scheduler.cc:131] [Task #61: fused_nn_contrib_conv2d_NCHWc_1] Trial #120: GFLOPs: 205.2733. Time: 158.3940 us. Best GFLOPs: 220.6736
2024-04-29 05:21:59 [INFO] [task_scheduler.cc:131] [Task #61: fused_nn_contrib_conv2d_NCHWc_1] Trial #121: GFLOPs: 133.9629. Time: 242.7093 us. Best GFLOPs: 220.6736
2024-04-29 05:21:59 [INFO] [task_scheduler.cc:131] [Task #61: fused_nn_contrib_conv2d_NCHWc_1] Trial #122: GFLOPs: 207.7487. Time: 156.5066 us. Best GFLOPs: 220.6736
2024-04-29 05:21:59 [INFO] [task_scheduler.cc:131] [Task #61: fused_nn_contrib_conv2d_NCHWc_1] Trial #123: GFLOPs: 85.8270. Time: 378.8326 us. Best GFLOPs: 220.6736
2024-04-29 05:21:59 [INFO] [task_scheduler.cc:131] [Task #61: fused_nn_contrib_conv2d_NCHWc_1] Trial #124: GFLOPs: 115.4706. Time: 281.5786 us. Best GFLOPs: 220.6736
2024-04-29 05:21:59 [INFO] [task_scheduler.cc:131] [Task #61: fused_nn_contrib_conv2d_NCHWc_1] Trial #125: GFLOPs: 108.5499. Time: 299.5308 us. Best GFLOPs: 220.6736
2024-04-29 05:21:59 [INFO] [task_scheduler.cc:131] [Task #61: fused_nn_contrib_conv2d_NCHWc_1] Trial #126: GFLOPs: 63.5217. Time: 511.8574 us. Best GFLOPs: 220.6736
2024-04-29 05:21:59 [INFO] [task_scheduler.cc:131] [Task #61: fused_nn_contrib_conv2d_NCHWc_1] Trial #127: GFLOPs: 112.9550. Time: 287.8496 us. Best GFLOPs: 220.6736
2024-04-29 05:21:59 [INFO] [task_scheduler.cc:131] [Task #61: fused_nn_contrib_conv2d_NCHWc_1] Trial #128: GFLOPs: 96.1673. Time: 338.0988 us. Best GFLOPs: 220.6736
2024-04-29 05:34:28 [INFO] [evolutionary_search.cc:713] Generating candidates......
2024-04-29 05:34:29 [INFO] [evolutionary_search.cc:715] Picked top 102 candidate(s) from database
2024-04-29 05:34:33 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0xc83fed8)]: 9 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0xc5901d8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x15321f68)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x1063f078)]: 0 failure(s)
2024-04-29 05:34:33 [INFO] [evolutionary_search.cc:723] Sampled 401 candidate(s)
2024-04-29 05:34:44 [INFO] [evolutionary_search.cc:621] Evolve iter #0 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0xc83fed8)]: 1 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0xc5901d8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x15321f68)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x1063f078)]: 0 failure(s)
2024-04-29 05:34:56 [INFO] [evolutionary_search.cc:621] Evolve iter #1 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0xc83fed8)]: 2 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0xc5901d8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x15321f68)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x1063f078)]: 0 failure(s)
2024-04-29 05:35:08 [INFO] [evolutionary_search.cc:621] Evolve iter #2 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0xc83fed8)]: 1 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0xc5901d8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x15321f68)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x1063f078)]: 0 failure(s)
2024-04-29 05:35:20 [INFO] [evolutionary_search.cc:621] Evolve iter #3 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0xc83fed8)]: 1 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0xc5901d8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x15321f68)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x1063f078)]: 0 failure(s)
2024-04-29 05:35:27 [INFO] [evolutionary_search.cc:649] Scores of the best 64 candidates:
[1 : 16]:	0.8405  0.8369  0.8330  0.8330  0.8330  0.8330  0.8330  0.8330  0.8330  0.8330  0.8330  0.8330  0.8243  0.8234  0.8186  0.8136
[17 : 32]:	0.8136  0.8101  0.8037  0.8037  0.8033  0.8001  0.7947  0.7940  0.7874  0.7874  0.7866  0.7864  0.7749  0.7702  0.7702  0.7659
[33 : 48]:	0.7620  0.7620  0.7609  0.7535  0.7533  0.7521  0.7519  0.7504  0.7450  0.7437  0.7407  0.7402  0.7392  0.7383  0.7382  0.7362
[49 : 64]:	0.7319  0.7311  0.7305  0.7295  0.7295  0.7291  0.7286  0.7262  0.7227  0.7216  0.7216  0.7187  0.7184  0.7163  0.7163  0.7151
2024-04-29 05:35:27 [INFO] [evolutionary_search.cc:727] Got 64 candidate(s) with evolutionary search
2024-04-29 05:35:27 [INFO] [evolutionary_search.cc:730] Sending 64 candidates(s) for measurement
2024-04-29 05:36:57 [INFO] [task_scheduler.cc:131] [Task #61: fused_nn_contrib_conv2d_NCHWc_1] Trial #129: GFLOPs: 135.0493. Time: 240.7570 us. Best GFLOPs: 220.6736
2024-04-29 05:36:57 [INFO] [task_scheduler.cc:131] [Task #61: fused_nn_contrib_conv2d_NCHWc_1] Trial #130: GFLOPs: 120.8652. Time: 269.0109 us. Best GFLOPs: 220.6736
2024-04-29 05:36:57 [INFO] [task_scheduler.cc:121] [Task #61: fused_nn_contrib_conv2d_NCHWc_1] Trial #131: Error in building:
LocalBuilder: Timeout, killed after 30.0 seconds
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(48), T.int64(14), T.int64(14), T.int64(4)), "float32"), p1: T.Buffer((T.int64(12), T.int64(48), T.int64(3), T.int64(3), T.int64(4), T.int64(4)), "float32"), conv2d_NCHWc: T.Buffer((T.int64(1), T.int64(12), T.int64(14), T.int64(14), T.int64(4)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        data_pad = T.alloc_buffer((T.int64(1), T.int64(48), T.int64(16), T.int64(16), T.int64(4)))
        conv2d_NCHWc_global = T.alloc_buffer((T.int64(1), T.int64(12), T.int64(14), T.int64(14), T.int64(4)))
        for i0_i1_i2_fused in T.parallel(T.int64(768)):
            for i3_i4_fused in T.vectorized(T.int64(64)):
                with T.block("data_pad"):
                    v_i0 = T.axis.spatial(T.int64(1), T.int64(0))
                    v_i1 = T.axis.spatial(T.int64(48), i0_i1_i2_fused // T.int64(16))
                    v_i2 = T.axis.spatial(T.int64(16), i0_i1_i2_fused % T.int64(16))
                    v_i3 = T.axis.spatial(T.int64(16), i3_i4_fused // T.int64(4))
                    v_i4 = T.axis.spatial(T.int64(4), i3_i4_fused % T.int64(4))
                    T.reads(p0[v_i0, v_i1, v_i2 - T.int64(1), v_i3 - T.int64(1), v_i4])
                    T.writes(data_pad[v_i0, v_i1, v_i2, v_i3, v_i4])
                    data_pad[v_i0, v_i1, v_i2, v_i3, v_i4] = T.if_then_else(T.int64(1) <= v_i2 and v_i2 < T.int64(15) and T.int64(1) <= v_i3 and v_i3 < T.int64(15), p0[v_i0, v_i1, v_i2 - T.int64(1), v_i3 - T.int64(1), v_i4], T.float32(0))
        for n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused in T.parallel(T.int64(168), annotations={"pragma_auto_unroll_max_step": 512, "pragma_unroll_explicit": 1}):
            for n_2_init, oc_chunk_2_init, oh_2_init, ow_2_init, oc_block_2_init, n_3_init, oc_chunk_3_init, oh_3_init, ow_3_init in T.grid(T.int64(1), T.int64(2), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(7), T.int64(1)):
                for oc_block_3_fused_init in T.vectorized(T.int64(4)):
                    with T.block("conv2d_NCHWc_init"):
                        v_n = T.axis.spatial(T.int64(1), n_2_init + n_3_init)
                        v_oc_chunk = T.axis.spatial(T.int64(12), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused % T.int64(6) * T.int64(2) + oc_chunk_2_init + oc_chunk_3_init)
                        v_oh = T.axis.spatial(T.int64(14), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused // T.int64(84) * T.int64(7) + oh_2_init * T.int64(7) + oh_3_init)
                        v_ow = T.axis.spatial(T.int64(14), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused % T.int64(84) // T.int64(6) + ow_2_init + ow_3_init)
                        v_oc_block = T.axis.spatial(T.int64(4), oc_block_2_init * T.int64(4) + oc_block_3_fused_init)
                        T.reads()
                        T.writes(conv2d_NCHWc_global[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                        T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                        conv2d_NCHWc_global[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = T.float32(0)
            for ic_0, kh_0, kw_0, n_2, oc_chunk_2, oh_2, ow_2, oc_block_2, ic_1, kh_1, kw_1, n_3, oc_chunk_3, oh_3, ow_3 in T.grid(T.int64(16), T.int64(3), T.int64(1), T.int64(1), T.int64(2), T.int64(1), T.int64(1), T.int64(1), T.int64(12), T.int64(1), T.int64(3), T.int64(1), T.int64(1), T.int64(7), T.int64(1)):
                for oc_block_3_fused in T.vectorized(T.int64(4)):
                    with T.block("conv2d_NCHWc_update"):
                        v_n = T.axis.spatial(T.int64(1), n_2 + n_3)
                        v_oc_chunk = T.axis.spatial(T.int64(12), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused % T.int64(6) * T.int64(2) + oc_chunk_2 + oc_chunk_3)
                        v_oh = T.axis.spatial(T.int64(14), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused // T.int64(84) * T.int64(7) + oh_2 * T.int64(7) + oh_3)
                        v_ow = T.axis.spatial(T.int64(14), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused % T.int64(84) // T.int64(6) + ow_2 + ow_3)
                        v_oc_block = T.axis.spatial(T.int64(4), oc_block_2 * T.int64(4) + oc_block_3_fused)
                        v_ic = T.axis.reduce(T.int64(192), ic_0 * T.int64(12) + ic_1)
                        v_kh = T.axis.reduce(T.int64(3), kh_0 + kh_1)
                        v_kw = T.axis.reduce(T.int64(3), kw_0 * T.int64(3) + kw_1)
                        T.reads(conv2d_NCHWc_global[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block], data_pad[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)], p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block])
                        T.writes(conv2d_NCHWc_global[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                        T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                        conv2d_NCHWc_global[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = conv2d_NCHWc_global[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] + data_pad[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)] * p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block]
            for ax0, ax1, ax2 in T.grid(T.int64(1), T.int64(2), T.int64(7)):
                for ax3_ax4_fused in T.vectorized(T.int64(4)):
                    with T.block("conv2d_NCHWc_global"):
                        v0 = T.axis.spatial(T.int64(1), ax0)
                        v1 = T.axis.spatial(T.int64(12), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused % T.int64(6) * T.int64(2) + ax1)
                        v2 = T.axis.spatial(T.int64(14), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused // T.int64(84) * T.int64(7) + ax2)
                        v3 = T.axis.spatial(T.int64(14), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused % T.int64(84) // T.int64(6))
                        v4 = T.axis.spatial(T.int64(4), ax3_ax4_fused)
                        T.reads(conv2d_NCHWc_global[v0, v1, v2, v3, v4])
                        T.writes(conv2d_NCHWc[v0, v1, v2, v3, v4])
                        conv2d_NCHWc[v0, v1, v2, v3, v4] = conv2d_NCHWc_global[v0, v1, v2, v3, v4]
b0 = sch.get_block(name="data_pad", func_name="main")
b1 = sch.get_block(name="conv2d_NCHWc", func_name="main")
b2 = sch.get_block(name="root", func_name="main")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSRSRS")
l3, l4, l5, l6, l7, l8, l9, l10 = sch.get_loops(block=b1)
v11, v12, v13, v14 = sch.sample_perfect_tile(loop=l3, n=4, max_innermost_factor=64, decision=[1, 1, 1, 1])
l15, l16, l17, l18 = sch.split(loop=l3, factors=[v11, v12, v13, v14], preserve_unit_iters=True)
v19, v20, v21, v22 = sch.sample_perfect_tile(loop=l4, n=4, max_innermost_factor=64, decision=[1, 6, 2, 1])
l23, l24, l25, l26 = sch.split(loop=l4, factors=[v19, v20, v21, v22], preserve_unit_iters=True)
v27, v28, v29, v30 = sch.sample_perfect_tile(loop=l5, n=4, max_innermost_factor=64, decision=[2, 1, 1, 7])
l31, l32, l33, l34 = sch.split(loop=l5, factors=[v27, v28, v29, v30], preserve_unit_iters=True)
v35, v36, v37, v38 = sch.sample_perfect_tile(loop=l6, n=4, max_innermost_factor=64, decision=[14, 1, 1, 1])
l39, l40, l41, l42 = sch.split(loop=l6, factors=[v35, v36, v37, v38], preserve_unit_iters=True)
v43, v44, v45, v46 = sch.sample_perfect_tile(loop=l7, n=4, max_innermost_factor=64, decision=[1, 1, 1, 4])
l47, l48, l49, l50 = sch.split(loop=l7, factors=[v43, v44, v45, v46], preserve_unit_iters=True)
v51, v52 = sch.sample_perfect_tile(loop=l8, n=2, max_innermost_factor=64, decision=[16, 12])
l53, l54 = sch.split(loop=l8, factors=[v51, v52], preserve_unit_iters=True)
v55, v56 = sch.sample_perfect_tile(loop=l9, n=2, max_innermost_factor=64, decision=[3, 1])
l57, l58 = sch.split(loop=l9, factors=[v55, v56], preserve_unit_iters=True)
v59, v60 = sch.sample_perfect_tile(loop=l10, n=2, max_innermost_factor=64, decision=[1, 3])
l61, l62 = sch.split(loop=l10, factors=[v59, v60], preserve_unit_iters=True)
sch.reorder(l15, l23, l31, l39, l47, l16, l24, l32, l40, l48, l53, l57, l61, l17, l25, l33, l41, l49, l54, l58, l62, l18, l26, l34, l42, l50)
b63 = sch.cache_write(block=b1, write_buffer_index=0, storage_scope="global")
sch.reverse_compute_at(block=b63, loop=l48, preserve_unit_loops=True, index=-1)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.vectorize", ann_val=64)
v64 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.unroll_explicit", ann_val=v64)
l65 = sch.sample_compute_location(block=b0, decision=-1)
sch.compute_at(block=b0, loop=l65, preserve_unit_loops=True, index=-1)
sch.enter_postproc()
b66 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b66, ann_key="meta_schedule.parallel")
sch.unannotate(block_or_loop=b66, ann_key="meta_schedule.vectorize")
sch.unannotate(block_or_loop=b66, ann_key="meta_schedule.unroll_explicit")
b67, b68, b69 = sch.get_child_blocks(b66)
l70, l71, l72, l73, l74 = sch.get_loops(block=b67)
l75 = sch.fuse(l70, l71, l72, preserve_unit_iters=True)
sch.parallel(loop=l75)
l76 = sch.fuse(l73, l74, preserve_unit_iters=True)
sch.vectorize(loop=l76)
l77, l78, l79, l80, l81, l82, l83, l84, l85, l86, l87, l88, l89, l90, l91, l92, l93, l94, l95, l96, l97, l98, l99, l100, l101, l102 = sch.get_loops(block=b68)
l103 = sch.fuse(l77, l78, l79, l80, l81, l82, l83, l84, l85, l86, preserve_unit_iters=True)
sch.parallel(loop=l103)
l104 = sch.fuse(l102, preserve_unit_iters=True)
sch.vectorize(loop=l104)
sch.annotate(block_or_loop=l103, ann_key="pragma_auto_unroll_max_step", ann_val=512)
sch.annotate(block_or_loop=l103, ann_key="pragma_unroll_explicit", ann_val=1)
l105, l106, l107, l108, l109, l110 = sch.get_loops(block=b69)
l111 = sch.fuse(l109, l110, preserve_unit_iters=True)
sch.vectorize(loop=l111)
b112 = sch.get_block(name="conv2d_NCHWc", func_name="main")
l113, l114, l115, l116, l117, l118, l119, l120, l121, l122, l123, l124, l125, l126, l127, l128, l129 = sch.get_loops(block=b112)
b130 = sch.decompose_reduction(block=b112, loop=l114)
2024-04-29 05:36:57 [INFO] [task_scheduler.cc:131] [Task #61: fused_nn_contrib_conv2d_NCHWc_1] Trial #132: GFLOPs: 71.2632. Time: 456.2532 us. Best GFLOPs: 220.6736
2024-04-29 05:36:57 [INFO] [task_scheduler.cc:131] [Task #61: fused_nn_contrib_conv2d_NCHWc_1] Trial #133: GFLOPs: 164.8967. Time: 197.1783 us. Best GFLOPs: 220.6736
2024-04-29 05:36:57 [INFO] [task_scheduler.cc:131] [Task #61: fused_nn_contrib_conv2d_NCHWc_1] Trial #134: GFLOPs: 116.2045. Time: 279.8003 us. Best GFLOPs: 220.6736
2024-04-29 05:36:57 [INFO] [task_scheduler.cc:131] [Task #61: fused_nn_contrib_conv2d_NCHWc_1] Trial #135: GFLOPs: 144.5836. Time: 224.8806 us. Best GFLOPs: 220.6736
2024-04-29 05:36:57 [INFO] [task_scheduler.cc:131] [Task #61: fused_nn_contrib_conv2d_NCHWc_1] Trial #136: GFLOPs: 145.6466. Time: 223.2392 us. Best GFLOPs: 220.6736
2024-04-29 05:36:57 [INFO] [task_scheduler.cc:131] [Task #61: fused_nn_contrib_conv2d_NCHWc_1] Trial #137: GFLOPs: 165.5533. Time: 196.3962 us. Best GFLOPs: 220.6736
2024-04-29 05:36:57 [INFO] [task_scheduler.cc:131] [Task #61: fused_nn_contrib_conv2d_NCHWc_1] Trial #138: GFLOPs: 151.9015. Time: 214.0469 us. Best GFLOPs: 220.6736
2024-04-29 05:36:57 [INFO] [task_scheduler.cc:131] [Task #61: fused_nn_contrib_conv2d_NCHWc_1] Trial #139: GFLOPs: 165.7852. Time: 196.1215 us. Best GFLOPs: 220.6736
2024-04-29 05:36:57 [INFO] [task_scheduler.cc:131] [Task #61: fused_nn_contrib_conv2d_NCHWc_1] Trial #140: GFLOPs: 175.9368. Time: 184.8052 us. Best GFLOPs: 220.6736
2024-04-29 05:36:57 [INFO] [task_scheduler.cc:131] [Task #61: fused_nn_contrib_conv2d_NCHWc_1] Trial #141: GFLOPs: 175.6271. Time: 185.1312 us. Best GFLOPs: 220.6736
2024-04-29 05:36:57 [INFO] [task_scheduler.cc:131] [Task #61: fused_nn_contrib_conv2d_NCHWc_1] Trial #142: GFLOPs: 194.7856. Time: 166.9222 us. Best GFLOPs: 220.6736
2024-04-29 05:36:57 [INFO] [task_scheduler.cc:131] [Task #61: fused_nn_contrib_conv2d_NCHWc_1] Trial #143: GFLOPs: 102.7070. Time: 316.5710 us. Best GFLOPs: 220.6736
2024-04-29 05:36:57 [INFO] [task_scheduler.cc:131] [Task #61: fused_nn_contrib_conv2d_NCHWc_1] Trial #144: GFLOPs: 111.9606. Time: 290.4062 us. Best GFLOPs: 220.6736
2024-04-29 05:36:57 [INFO] [task_scheduler.cc:131] [Task #61: fused_nn_contrib_conv2d_NCHWc_1] Trial #145: GFLOPs: 79.5989. Time: 408.4734 us. Best GFLOPs: 220.6736
2024-04-29 05:36:57 [INFO] [task_scheduler.cc:131] [Task #61: fused_nn_contrib_conv2d_NCHWc_1] Trial #146: GFLOPs: 45.3168. Time: 717.4839 us. Best GFLOPs: 220.6736
2024-04-29 05:36:57 [INFO] [task_scheduler.cc:131] [Task #61: fused_nn_contrib_conv2d_NCHWc_1] Trial #147: GFLOPs: 92.5920. Time: 351.1539 us. Best GFLOPs: 220.6736
2024-04-29 05:36:57 [INFO] [task_scheduler.cc:131] [Task #61: fused_nn_contrib_conv2d_NCHWc_1] Trial #148: GFLOPs: 136.4918. Time: 238.2125 us. Best GFLOPs: 220.6736
2024-04-29 05:36:57 [INFO] [task_scheduler.cc:131] [Task #61: fused_nn_contrib_conv2d_NCHWc_1] Trial #149: GFLOPs: 93.2653. Time: 348.6189 us. Best GFLOPs: 220.6736
2024-04-29 05:36:57 [INFO] [task_scheduler.cc:131] [Task #61: fused_nn_contrib_conv2d_NCHWc_1] Trial #150: GFLOPs: 144.5260. Time: 224.9703 us. Best GFLOPs: 220.6736
2024-04-29 05:36:57 [INFO] [task_scheduler.cc:121] [Task #61: fused_nn_contrib_conv2d_NCHWc_1] Trial #151: Error in building:
LocalBuilder: Timeout, killed after 30.0 seconds
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(48), T.int64(14), T.int64(14), T.int64(4)), "float32"), p1: T.Buffer((T.int64(12), T.int64(48), T.int64(3), T.int64(3), T.int64(4), T.int64(4)), "float32"), conv2d_NCHWc: T.Buffer((T.int64(1), T.int64(12), T.int64(14), T.int64(14), T.int64(4)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        data_pad = T.alloc_buffer((T.int64(1), T.int64(48), T.int64(16), T.int64(16), T.int64(4)))
        conv2d_NCHWc_global = T.alloc_buffer((T.int64(1), T.int64(12), T.int64(14), T.int64(14), T.int64(4)))
        for n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused_fused in T.parallel(T.int64(392), annotations={"pragma_auto_unroll_max_step": 512, "pragma_unroll_explicit": 1}):
            for n_2_init, oc_chunk_2_init, oh_2_init, ow_2_init, oc_block_2_init, n_3_init, oc_chunk_3_init, oh_3_init, ow_3_init, oc_block_3_init in T.grid(T.int64(1), T.int64(1), T.int64(2), T.int64(1), T.int64(2), T.int64(1), T.int64(6), T.int64(1), T.int64(1), T.int64(1)):
                with T.block("conv2d_NCHWc_init"):
                    v_n = T.axis.spatial(T.int64(1), n_2_init + n_3_init)
                    v_oc_chunk = T.axis.spatial(T.int64(12), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused_fused % T.int64(28) // T.int64(14) * T.int64(6) + oc_chunk_2_init * T.int64(6) + oc_chunk_3_init)
                    v_oh = T.axis.spatial(T.int64(14), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused_fused % T.int64(14) // T.int64(2) * T.int64(2) + oh_2_init + oh_3_init)
                    v_ow = T.axis.spatial(T.int64(14), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused_fused // T.int64(28) + ow_2_init + ow_3_init)
                    v_oc_block = T.axis.spatial(T.int64(4), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused_fused % T.int64(2) * T.int64(2) + oc_block_2_init + oc_block_3_init)
                    T.reads()
                    T.writes(conv2d_NCHWc_global[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                    T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                    conv2d_NCHWc_global[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = T.float32(0)
            for ic_0, kh_0 in T.grid(T.int64(3), T.int64(3)):
                for ax0, ax1, ax2 in T.grid(T.int64(1), T.int64(16), T.int64(2)):
                    for ax3_ax4_fused in T.vectorized(T.int64(12)):
                        with T.block("data_pad"):
                            v_i0 = T.axis.spatial(T.int64(1), ax0)
                            v_i1 = T.axis.spatial(T.int64(48), ic_0 * T.int64(16) + ax1)
                            v_i2 = T.axis.spatial(T.int64(16), kh_0 + n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused_fused % T.int64(14) // T.int64(2) * T.int64(2) + ax2)
                            v_i3 = T.axis.spatial(T.int64(16), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused_fused // T.int64(28) + ax3_ax4_fused // T.int64(4))
                            v_i4 = T.axis.spatial(T.int64(4), ax3_ax4_fused % T.int64(4))
                            T.reads(p0[v_i0, v_i1, v_i2 - T.int64(1), v_i3 - T.int64(1), v_i4])
                            T.writes(data_pad[v_i0, v_i1, v_i2, v_i3, v_i4])
                            data_pad[v_i0, v_i1, v_i2, v_i3, v_i4] = T.if_then_else(T.int64(1) <= v_i2 and v_i2 < T.int64(15) and T.int64(1) <= v_i3 and v_i3 < T.int64(15), p0[v_i0, v_i1, v_i2 - T.int64(1), v_i3 - T.int64(1), v_i4], T.float32(0))
                for kw_0, n_2, oc_chunk_2, oh_2, ow_2, oc_block_2, ic_1, kh_1, kw_1, n_3, oc_chunk_3, oh_3, ow_3, oc_block_3 in T.grid(T.int64(3), T.int64(1), T.int64(1), T.int64(2), T.int64(1), T.int64(2), T.int64(64), T.int64(1), T.int64(1), T.int64(1), T.int64(6), T.int64(1), T.int64(1), T.int64(1)):
                    with T.block("conv2d_NCHWc_update"):
                        v_n = T.axis.spatial(T.int64(1), n_2 + n_3)
                        v_oc_chunk = T.axis.spatial(T.int64(12), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused_fused % T.int64(28) // T.int64(14) * T.int64(6) + oc_chunk_2 * T.int64(6) + oc_chunk_3)
                        v_oh = T.axis.spatial(T.int64(14), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused_fused % T.int64(14) // T.int64(2) * T.int64(2) + oh_2 + oh_3)
                        v_ow = T.axis.spatial(T.int64(14), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused_fused // T.int64(28) + ow_2 + ow_3)
                        v_oc_block = T.axis.spatial(T.int64(4), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused_fused % T.int64(2) * T.int64(2) + oc_block_2 + oc_block_3)
                        v_ic = T.axis.reduce(T.int64(192), ic_0 * T.int64(64) + ic_1)
                        v_kh = T.axis.reduce(T.int64(3), kh_0 + kh_1)
                        v_kw = T.axis.reduce(T.int64(3), kw_0 + kw_1)
                        T.reads(conv2d_NCHWc_global[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block], data_pad[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)], p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block])
                        T.writes(conv2d_NCHWc_global[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                        T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                        conv2d_NCHWc_global[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = conv2d_NCHWc_global[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] + data_pad[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)] * p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block]
            for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(6), T.int64(2), T.int64(1)):
                for ax4_fused in T.vectorized(T.int64(2)):
                    with T.block("conv2d_NCHWc_global"):
                        v0 = T.axis.spatial(T.int64(1), ax0)
                        v1 = T.axis.spatial(T.int64(12), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused_fused % T.int64(28) // T.int64(14) * T.int64(6) + ax1)
                        v2 = T.axis.spatial(T.int64(14), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused_fused % T.int64(14) // T.int64(2) * T.int64(2) + ax2)
                        v3 = T.axis.spatial(T.int64(14), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused_fused // T.int64(28) + ax3)
                        v4 = T.axis.spatial(T.int64(4), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused_fused % T.int64(2) * T.int64(2) + ax4_fused)
                        T.reads(conv2d_NCHWc_global[v0, v1, v2, v3, v4])
                        T.writes(conv2d_NCHWc[v0, v1, v2, v3, v4])
                        conv2d_NCHWc[v0, v1, v2, v3, v4] = conv2d_NCHWc_global[v0, v1, v2, v3, v4]
b0 = sch.get_block(name="data_pad", func_name="main")
b1 = sch.get_block(name="conv2d_NCHWc", func_name="main")
b2 = sch.get_block(name="root", func_name="main")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSRSRS")
l3, l4, l5, l6, l7, l8, l9, l10 = sch.get_loops(block=b1)
v11, v12, v13, v14 = sch.sample_perfect_tile(loop=l3, n=4, max_innermost_factor=64, decision=[1, 1, 1, 1])
l15, l16, l17, l18 = sch.split(loop=l3, factors=[v11, v12, v13, v14], preserve_unit_iters=True)
v19, v20, v21, v22 = sch.sample_perfect_tile(loop=l4, n=4, max_innermost_factor=64, decision=[1, 2, 1, 6])
l23, l24, l25, l26 = sch.split(loop=l4, factors=[v19, v20, v21, v22], preserve_unit_iters=True)
v27, v28, v29, v30 = sch.sample_perfect_tile(loop=l5, n=4, max_innermost_factor=64, decision=[1, 7, 2, 1])
l31, l32, l33, l34 = sch.split(loop=l5, factors=[v27, v28, v29, v30], preserve_unit_iters=True)
v35, v36, v37, v38 = sch.sample_perfect_tile(loop=l6, n=4, max_innermost_factor=64, decision=[14, 1, 1, 1])
l39, l40, l41, l42 = sch.split(loop=l6, factors=[v35, v36, v37, v38], preserve_unit_iters=True)
v43, v44, v45, v46 = sch.sample_perfect_tile(loop=l7, n=4, max_innermost_factor=64, decision=[1, 2, 2, 1])
l47, l48, l49, l50 = sch.split(loop=l7, factors=[v43, v44, v45, v46], preserve_unit_iters=True)
v51, v52 = sch.sample_perfect_tile(loop=l8, n=2, max_innermost_factor=64, decision=[3, 64])
l53, l54 = sch.split(loop=l8, factors=[v51, v52], preserve_unit_iters=True)
v55, v56 = sch.sample_perfect_tile(loop=l9, n=2, max_innermost_factor=64, decision=[3, 1])
l57, l58 = sch.split(loop=l9, factors=[v55, v56], preserve_unit_iters=True)
v59, v60 = sch.sample_perfect_tile(loop=l10, n=2, max_innermost_factor=64, decision=[3, 1])
l61, l62 = sch.split(loop=l10, factors=[v59, v60], preserve_unit_iters=True)
sch.reorder(l15, l23, l31, l39, l47, l16, l24, l32, l40, l48, l53, l57, l61, l17, l25, l33, l41, l49, l54, l58, l62, l18, l26, l34, l42, l50)
b63 = sch.cache_write(block=b1, write_buffer_index=0, storage_scope="global")
sch.reverse_compute_at(block=b63, loop=l48, preserve_unit_loops=True, index=-1)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.vectorize", ann_val=64)
v64 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.unroll_explicit", ann_val=v64)
l65 = sch.sample_compute_location(block=b0, decision=11)
sch.compute_at(block=b0, loop=l65, preserve_unit_loops=True, index=-1)
sch.enter_postproc()
b66 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b66, ann_key="meta_schedule.parallel")
sch.unannotate(block_or_loop=b66, ann_key="meta_schedule.vectorize")
sch.unannotate(block_or_loop=b66, ann_key="meta_schedule.unroll_explicit")
b67, b68, b69 = sch.get_child_blocks(b66)
l70, l71, l72, l73, l74, l75, l76, l77, l78, l79, l80, l81, l82, l83, l84, l85, l86 = sch.get_loops(block=b67)
l87 = sch.fuse(l70, l71, l72, l73, l74, l75, l76, l77, l78, l79, preserve_unit_iters=True)
sch.parallel(loop=l87)
l88 = sch.fuse(l85, l86, preserve_unit_iters=True)
sch.vectorize(loop=l88)
l89, l90, l91, l92, l93, l94, l95, l96, l97, l98, l99, l100, l101, l102, l103, l104, l105 = sch.get_loops(block=b68)
l106 = sch.fuse(l89, preserve_unit_iters=True)
sch.parallel(loop=l106)
sch.annotate(block_or_loop=l106, ann_key="pragma_auto_unroll_max_step", ann_val=512)
sch.annotate(block_or_loop=l106, ann_key="pragma_unroll_explicit", ann_val=1)
l107, l108, l109, l110, l111, l112 = sch.get_loops(block=b69)
l113 = sch.fuse(l112, preserve_unit_iters=True)
sch.vectorize(loop=l113)
b114 = sch.get_block(name="conv2d_NCHWc", func_name="main")
l115, l116, l117, l118, l119, l120, l121, l122, l123, l124, l125, l126, l127, l128, l129, l130, l131 = sch.get_loops(block=b114)
b132 = sch.decompose_reduction(block=b114, loop=l116)
2024-04-29 05:36:57 [INFO] [task_scheduler.cc:131] [Task #61: fused_nn_contrib_conv2d_NCHWc_1] Trial #152: GFLOPs: 130.1518. Time: 249.8163 us. Best GFLOPs: 220.6736
2024-04-29 05:36:57 [INFO] [task_scheduler.cc:131] [Task #61: fused_nn_contrib_conv2d_NCHWc_1] Trial #153: GFLOPs: 84.6917. Time: 383.9108 us. Best GFLOPs: 220.6736
2024-04-29 05:36:57 [INFO] [task_scheduler.cc:131] [Task #61: fused_nn_contrib_conv2d_NCHWc_1] Trial #154: GFLOPs: 84.5652. Time: 384.4849 us. Best GFLOPs: 220.6736
2024-04-29 05:36:57 [INFO] [task_scheduler.cc:131] [Task #61: fused_nn_contrib_conv2d_NCHWc_1] Trial #155: GFLOPs: 65.5931. Time: 495.6930 us. Best GFLOPs: 220.6736
2024-04-29 05:36:57 [INFO] [task_scheduler.cc:131] [Task #61: fused_nn_contrib_conv2d_NCHWc_1] Trial #156: GFLOPs: 103.0669. Time: 315.4654 us. Best GFLOPs: 220.6736
2024-04-29 05:36:57 [INFO] [task_scheduler.cc:131] [Task #61: fused_nn_contrib_conv2d_NCHWc_1] Trial #157: GFLOPs: 84.9127. Time: 382.9114 us. Best GFLOPs: 220.6736
2024-04-29 05:36:57 [INFO] [task_scheduler.cc:131] [Task #61: fused_nn_contrib_conv2d_NCHWc_1] Trial #158: GFLOPs: 106.4222. Time: 305.5194 us. Best GFLOPs: 220.6736
2024-04-29 05:36:57 [INFO] [task_scheduler.cc:131] [Task #61: fused_nn_contrib_conv2d_NCHWc_1] Trial #159: GFLOPs: 188.2488. Time: 172.7185 us. Best GFLOPs: 220.6736
2024-04-29 05:36:57 [INFO] [task_scheduler.cc:131] [Task #61: fused_nn_contrib_conv2d_NCHWc_1] Trial #160: GFLOPs: 91.2172. Time: 356.4465 us. Best GFLOPs: 220.6736
2024-04-29 05:36:57 [INFO] [task_scheduler.cc:131] [Task #61: fused_nn_contrib_conv2d_NCHWc_1] Trial #161: GFLOPs: 161.3113. Time: 201.5609 us. Best GFLOPs: 220.6736
2024-04-29 05:36:57 [INFO] [task_scheduler.cc:131] [Task #61: fused_nn_contrib_conv2d_NCHWc_1] Trial #162: GFLOPs: 157.9065. Time: 205.9069 us. Best GFLOPs: 220.6736
2024-04-29 05:36:57 [INFO] [task_scheduler.cc:131] [Task #61: fused_nn_contrib_conv2d_NCHWc_1] Trial #163: GFLOPs: 191.9027. Time: 169.4299 us. Best GFLOPs: 220.6736
2024-04-29 05:36:57 [INFO] [task_scheduler.cc:131] [Task #61: fused_nn_contrib_conv2d_NCHWc_1] Trial #164: GFLOPs: 163.9752. Time: 198.2864 us. Best GFLOPs: 220.6736
2024-04-29 05:36:57 [INFO] [task_scheduler.cc:131] [Task #61: fused_nn_contrib_conv2d_NCHWc_1] Trial #165: GFLOPs: 80.0660. Time: 406.0904 us. Best GFLOPs: 220.6736
2024-04-29 05:36:57 [INFO] [task_scheduler.cc:131] [Task #61: fused_nn_contrib_conv2d_NCHWc_1] Trial #166: GFLOPs: 180.9463. Time: 179.6889 us. Best GFLOPs: 220.6736
2024-04-29 05:36:57 [INFO] [task_scheduler.cc:131] [Task #61: fused_nn_contrib_conv2d_NCHWc_1] Trial #167: GFLOPs: 156.3816. Time: 207.9147 us. Best GFLOPs: 220.6736
2024-04-29 05:36:57 [INFO] [task_scheduler.cc:131] [Task #61: fused_nn_contrib_conv2d_NCHWc_1] Trial #168: GFLOPs: 111.3317. Time: 292.0467 us. Best GFLOPs: 220.6736
2024-04-29 05:36:57 [INFO] [task_scheduler.cc:131] [Task #61: fused_nn_contrib_conv2d_NCHWc_1] Trial #169: GFLOPs: 77.6058. Time: 418.9640 us. Best GFLOPs: 220.6736
2024-04-29 05:36:57 [INFO] [task_scheduler.cc:131] [Task #61: fused_nn_contrib_conv2d_NCHWc_1] Trial #170: GFLOPs: 100.3962. Time: 323.8574 us. Best GFLOPs: 220.6736
2024-04-29 05:36:57 [INFO] [task_scheduler.cc:121] [Task #61: fused_nn_contrib_conv2d_NCHWc_1] Trial #171: Error in building:
LocalBuilder: Timeout, killed after 30.0 seconds
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(48), T.int64(14), T.int64(14), T.int64(4)), "float32"), p1: T.Buffer((T.int64(12), T.int64(48), T.int64(3), T.int64(3), T.int64(4), T.int64(4)), "float32"), conv2d_NCHWc: T.Buffer((T.int64(1), T.int64(12), T.int64(14), T.int64(14), T.int64(4)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        data_pad = T.alloc_buffer((T.int64(1), T.int64(48), T.int64(16), T.int64(16), T.int64(4)))
        conv2d_NCHWc_global = T.alloc_buffer((T.int64(1), T.int64(12), T.int64(14), T.int64(14), T.int64(4)))
        for n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_fused_fused in T.parallel(T.int64(168), annotations={"pragma_auto_unroll_max_step": 512, "pragma_unroll_explicit": 1}):
            for ax0, ax1, ax2 in T.grid(T.int64(1), T.int64(48), T.int64(9)):
                for ax3_ax4_fused in T.vectorized(T.int64(12)):
                    with T.block("data_pad"):
                        v_i0, v_i1 = T.axis.remap("SS", [ax0, ax1])
                        v_i2 = T.axis.spatial(T.int64(16), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_fused_fused % T.int64(14) // T.int64(7) * T.int64(7) + ax2)
                        v_i3 = T.axis.spatial(T.int64(16), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_fused_fused % T.int64(28) // T.int64(14) * T.int64(7) + n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_fused_fused % T.int64(7) + ax3_ax4_fused // T.int64(4))
                        v_i4 = T.axis.spatial(T.int64(4), ax3_ax4_fused % T.int64(4))
                        T.reads(p0[v_i0, v_i1, v_i2 - T.int64(1), v_i3 - T.int64(1), v_i4])
                        T.writes(data_pad[v_i0, v_i1, v_i2, v_i3, v_i4])
                        data_pad[v_i0, v_i1, v_i2, v_i3, v_i4] = T.if_then_else(T.int64(1) <= v_i2 and v_i2 < T.int64(15) and T.int64(1) <= v_i3 and v_i3 < T.int64(15), p0[v_i0, v_i1, v_i2 - T.int64(1), v_i3 - T.int64(1), v_i4], T.float32(0))
            for oc_block_1 in range(T.int64(1)):
                for n_2_init, oc_chunk_2_init, oh_2_init, ow_2_init, oc_block_2_init, n_3_init, oc_chunk_3_init, oh_3_init, ow_3_init in T.grid(T.int64(1), T.int64(2), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(7), T.int64(1)):
                    for oc_block_3_fused_init in T.vectorized(T.int64(4)):
                        with T.block("conv2d_NCHWc_init"):
                            v_n = T.axis.spatial(T.int64(1), n_2_init + n_3_init)
                            v_oc_chunk = T.axis.spatial(T.int64(12), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_fused_fused // T.int64(28) * T.int64(2) + oc_chunk_2_init + oc_chunk_3_init)
                            v_oh = T.axis.spatial(T.int64(14), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_fused_fused % T.int64(14) // T.int64(7) * T.int64(7) + oh_2_init * T.int64(7) + oh_3_init)
                            v_ow = T.axis.spatial(T.int64(14), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_fused_fused % T.int64(28) // T.int64(14) * T.int64(7) + n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_fused_fused % T.int64(7) + ow_2_init + ow_3_init)
                            v_oc_block = T.axis.spatial(T.int64(4), oc_block_1 * T.int64(4) + oc_block_2_init * T.int64(4) + oc_block_3_fused_init)
                            T.reads()
                            T.writes(conv2d_NCHWc_global[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                            T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                            conv2d_NCHWc_global[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = T.float32(0)
                for ic_0, kh_0, kw_0, n_2, oc_chunk_2, oh_2, ow_2, oc_block_2, ic_1, kh_1, kw_1, n_3, oc_chunk_3, oh_3, ow_3 in T.grid(T.int64(16), T.int64(3), T.int64(1), T.int64(1), T.int64(2), T.int64(1), T.int64(1), T.int64(1), T.int64(12), T.int64(1), T.int64(3), T.int64(1), T.int64(1), T.int64(7), T.int64(1)):
                    for oc_block_3_fused in T.vectorized(T.int64(4)):
                        with T.block("conv2d_NCHWc_update"):
                            v_n = T.axis.spatial(T.int64(1), n_2 + n_3)
                            v_oc_chunk = T.axis.spatial(T.int64(12), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_fused_fused // T.int64(28) * T.int64(2) + oc_chunk_2 + oc_chunk_3)
                            v_oh = T.axis.spatial(T.int64(14), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_fused_fused % T.int64(14) // T.int64(7) * T.int64(7) + oh_2 * T.int64(7) + oh_3)
                            v_ow = T.axis.spatial(T.int64(14), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_fused_fused % T.int64(28) // T.int64(14) * T.int64(7) + n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_fused_fused % T.int64(7) + ow_2 + ow_3)
                            v_oc_block = T.axis.spatial(T.int64(4), oc_block_1 * T.int64(4) + oc_block_2 * T.int64(4) + oc_block_3_fused)
                            v_ic = T.axis.reduce(T.int64(192), ic_0 * T.int64(12) + ic_1)
                            v_kh = T.axis.reduce(T.int64(3), kh_0 + kh_1)
                            v_kw = T.axis.reduce(T.int64(3), kw_0 * T.int64(3) + kw_1)
                            T.reads(conv2d_NCHWc_global[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block], data_pad[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)], p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block])
                            T.writes(conv2d_NCHWc_global[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                            T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                            conv2d_NCHWc_global[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = conv2d_NCHWc_global[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] + data_pad[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)] * p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block]
                for ax0, ax1, ax2 in T.grid(T.int64(1), T.int64(2), T.int64(7)):
                    for ax3_ax4_fused in T.vectorized(T.int64(4)):
                        with T.block("conv2d_NCHWc_global"):
                            v0 = T.axis.spatial(T.int64(1), ax0)
                            v1 = T.axis.spatial(T.int64(12), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_fused_fused // T.int64(28) * T.int64(2) + ax1)
                            v2 = T.axis.spatial(T.int64(14), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_fused_fused % T.int64(14) // T.int64(7) * T.int64(7) + ax2)
                            v3 = T.axis.spatial(T.int64(14), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_fused_fused % T.int64(28) // T.int64(14) * T.int64(7) + n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_fused_fused % T.int64(7))
                            v4 = T.axis.spatial(T.int64(4), ax3_ax4_fused)
                            T.reads(conv2d_NCHWc_global[v0, v1, v2, v3, v4])
                            T.writes(conv2d_NCHWc[v0, v1, v2, v3, v4])
                            conv2d_NCHWc[v0, v1, v2, v3, v4] = conv2d_NCHWc_global[v0, v1, v2, v3, v4]
b0 = sch.get_block(name="data_pad", func_name="main")
b1 = sch.get_block(name="conv2d_NCHWc", func_name="main")
b2 = sch.get_block(name="root", func_name="main")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSRSRS")
l3, l4, l5, l6, l7, l8, l9, l10 = sch.get_loops(block=b1)
v11, v12, v13, v14 = sch.sample_perfect_tile(loop=l3, n=4, max_innermost_factor=64, decision=[1, 1, 1, 1])
l15, l16, l17, l18 = sch.split(loop=l3, factors=[v11, v12, v13, v14], preserve_unit_iters=True)
v19, v20, v21, v22 = sch.sample_perfect_tile(loop=l4, n=4, max_innermost_factor=64, decision=[6, 1, 2, 1])
l23, l24, l25, l26 = sch.split(loop=l4, factors=[v19, v20, v21, v22], preserve_unit_iters=True)
v27, v28, v29, v30 = sch.sample_perfect_tile(loop=l5, n=4, max_innermost_factor=64, decision=[1, 2, 1, 7])
l31, l32, l33, l34 = sch.split(loop=l5, factors=[v27, v28, v29, v30], preserve_unit_iters=True)
v35, v36, v37, v38 = sch.sample_perfect_tile(loop=l6, n=4, max_innermost_factor=64, decision=[2, 7, 1, 1])
l39, l40, l41, l42 = sch.split(loop=l6, factors=[v35, v36, v37, v38], preserve_unit_iters=True)
v43, v44, v45, v46 = sch.sample_perfect_tile(loop=l7, n=4, max_innermost_factor=64, decision=[1, 1, 1, 4])
l47, l48, l49, l50 = sch.split(loop=l7, factors=[v43, v44, v45, v46], preserve_unit_iters=True)
v51, v52 = sch.sample_perfect_tile(loop=l8, n=2, max_innermost_factor=64, decision=[16, 12])
l53, l54 = sch.split(loop=l8, factors=[v51, v52], preserve_unit_iters=True)
v55, v56 = sch.sample_perfect_tile(loop=l9, n=2, max_innermost_factor=64, decision=[3, 1])
l57, l58 = sch.split(loop=l9, factors=[v55, v56], preserve_unit_iters=True)
v59, v60 = sch.sample_perfect_tile(loop=l10, n=2, max_innermost_factor=64, decision=[1, 3])
l61, l62 = sch.split(loop=l10, factors=[v59, v60], preserve_unit_iters=True)
sch.reorder(l15, l23, l31, l39, l47, l16, l24, l32, l40, l48, l53, l57, l61, l17, l25, l33, l41, l49, l54, l58, l62, l18, l26, l34, l42, l50)
b63 = sch.cache_write(block=b1, write_buffer_index=0, storage_scope="global")
sch.reverse_compute_at(block=b63, loop=l48, preserve_unit_loops=True, index=-1)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.vectorize", ann_val=64)
v64 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.unroll_explicit", ann_val=v64)
l65 = sch.sample_compute_location(block=b0, decision=8)
sch.compute_at(block=b0, loop=l65, preserve_unit_loops=True, index=-1)
sch.enter_postproc()
b66 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b66, ann_key="meta_schedule.parallel")
sch.unannotate(block_or_loop=b66, ann_key="meta_schedule.vectorize")
sch.unannotate(block_or_loop=b66, ann_key="meta_schedule.unroll_explicit")
b67, b68, b69 = sch.get_child_blocks(b66)
l70, l71, l72, l73, l74, l75, l76, l77, l78, l79, l80, l81, l82, l83 = sch.get_loops(block=b67)
l84 = sch.fuse(l70, l71, l72, l73, l74, l75, l76, l77, l78, preserve_unit_iters=True)
sch.parallel(loop=l84)
l85 = sch.fuse(l82, l83, preserve_unit_iters=True)
sch.vectorize(loop=l85)
l86, l87, l88, l89, l90, l91, l92, l93, l94, l95, l96, l97, l98, l99, l100, l101, l102, l103 = sch.get_loops(block=b68)
l104 = sch.fuse(l86, preserve_unit_iters=True)
sch.parallel(loop=l104)
l105 = sch.fuse(l103, preserve_unit_iters=True)
sch.vectorize(loop=l105)
sch.annotate(block_or_loop=l104, ann_key="pragma_auto_unroll_max_step", ann_val=512)
sch.annotate(block_or_loop=l104, ann_key="pragma_unroll_explicit", ann_val=1)
l106, l107, l108, l109, l110, l111, l112 = sch.get_loops(block=b69)
l113 = sch.fuse(l111, l112, preserve_unit_iters=True)
sch.vectorize(loop=l113)
b114 = sch.get_block(name="conv2d_NCHWc", func_name="main")
l115, l116, l117, l118, l119, l120, l121, l122, l123, l124, l125, l126, l127, l128, l129, l130, l131, l132 = sch.get_loops(block=b114)
b133 = sch.decompose_reduction(block=b114, loop=l117)
2024-04-29 05:36:57 [INFO] [task_scheduler.cc:131] [Task #61: fused_nn_contrib_conv2d_NCHWc_1] Trial #172: GFLOPs: 71.4234. Time: 455.2293 us. Best GFLOPs: 220.6736
2024-04-29 05:36:57 [INFO] [task_scheduler.cc:131] [Task #61: fused_nn_contrib_conv2d_NCHWc_1] Trial #173: GFLOPs: 70.0784. Time: 463.9667 us. Best GFLOPs: 220.6736
2024-04-29 05:36:57 [INFO] [task_scheduler.cc:131] [Task #61: fused_nn_contrib_conv2d_NCHWc_1] Trial #174: GFLOPs: 133.5556. Time: 243.4495 us. Best GFLOPs: 220.6736
2024-04-29 05:36:57 [INFO] [task_scheduler.cc:131] [Task #61: fused_nn_contrib_conv2d_NCHWc_1] Trial #175: GFLOPs: 113.7335. Time: 285.8792 us. Best GFLOPs: 220.6736
2024-04-29 05:36:57 [INFO] [task_scheduler.cc:131] [Task #61: fused_nn_contrib_conv2d_NCHWc_1] Trial #176: GFLOPs: 112.1880. Time: 289.8175 us. Best GFLOPs: 220.6736
2024-04-29 05:36:57 [INFO] [task_scheduler.cc:131] [Task #61: fused_nn_contrib_conv2d_NCHWc_1] Trial #177: GFLOPs: 106.3423. Time: 305.7490 us. Best GFLOPs: 220.6736
2024-04-29 05:36:57 [INFO] [task_scheduler.cc:131] [Task #61: fused_nn_contrib_conv2d_NCHWc_1] Trial #178: GFLOPs: 96.9845. Time: 335.2500 us. Best GFLOPs: 220.6736
2024-04-29 05:36:57 [INFO] [task_scheduler.cc:131] [Task #61: fused_nn_contrib_conv2d_NCHWc_1] Trial #179: GFLOPs: 151.1497. Time: 215.1115 us. Best GFLOPs: 220.6736
2024-04-29 05:36:57 [INFO] [task_scheduler.cc:131] [Task #61: fused_nn_contrib_conv2d_NCHWc_1] Trial #180: GFLOPs: 70.2543. Time: 462.8049 us. Best GFLOPs: 220.6736
2024-04-29 05:36:57 [INFO] [task_scheduler.cc:131] [Task #61: fused_nn_contrib_conv2d_NCHWc_1] Trial #181: GFLOPs: 119.5373. Time: 271.9992 us. Best GFLOPs: 220.6736
2024-04-29 05:36:57 [INFO] [task_scheduler.cc:131] [Task #61: fused_nn_contrib_conv2d_NCHWc_1] Trial #182: GFLOPs: 104.1475. Time: 312.1923 us. Best GFLOPs: 220.6736
2024-04-29 05:36:57 [INFO] [task_scheduler.cc:131] [Task #61: fused_nn_contrib_conv2d_NCHWc_1] Trial #183: GFLOPs: 69.2302. Time: 469.6512 us. Best GFLOPs: 220.6736
2024-04-29 05:36:57 [INFO] [task_scheduler.cc:131] [Task #61: fused_nn_contrib_conv2d_NCHWc_1] Trial #184: GFLOPs: 44.8957. Time: 724.2132 us. Best GFLOPs: 220.6736
2024-04-29 05:36:57 [INFO] [task_scheduler.cc:131] [Task #61: fused_nn_contrib_conv2d_NCHWc_1] Trial #185: GFLOPs: 105.3716. Time: 308.5655 us. Best GFLOPs: 220.6736
2024-04-29 05:36:57 [INFO] [task_scheduler.cc:131] [Task #61: fused_nn_contrib_conv2d_NCHWc_1] Trial #186: GFLOPs: 168.3533. Time: 193.1299 us. Best GFLOPs: 220.6736
2024-04-29 05:36:57 [INFO] [task_scheduler.cc:131] [Task #61: fused_nn_contrib_conv2d_NCHWc_1] Trial #187: GFLOPs: 163.5907. Time: 198.7524 us. Best GFLOPs: 220.6736
2024-04-29 05:36:57 [INFO] [task_scheduler.cc:131] [Task #61: fused_nn_contrib_conv2d_NCHWc_1] Trial #188: GFLOPs: 184.3101. Time: 176.4095 us. Best GFLOPs: 220.6736
2024-04-29 05:36:57 [INFO] [task_scheduler.cc:131] [Task #61: fused_nn_contrib_conv2d_NCHWc_1] Trial #189: GFLOPs: 137.2668. Time: 236.8676 us. Best GFLOPs: 220.6736
2024-04-29 05:36:57 [INFO] [task_scheduler.cc:121] [Task #61: fused_nn_contrib_conv2d_NCHWc_1] Trial #190: Error in building:
LocalBuilder: Timeout, killed after 30.0 seconds
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(48), T.int64(14), T.int64(14), T.int64(4)), "float32"), p1: T.Buffer((T.int64(12), T.int64(48), T.int64(3), T.int64(3), T.int64(4), T.int64(4)), "float32"), conv2d_NCHWc: T.Buffer((T.int64(1), T.int64(12), T.int64(14), T.int64(14), T.int64(4)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        data_pad = T.alloc_buffer((T.int64(1), T.int64(48), T.int64(16), T.int64(16), T.int64(4)))
        for n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_fused_fused in T.parallel(T.int64(24), annotations={"pragma_auto_unroll_max_step": 512, "pragma_unroll_explicit": 1}):
            for ax0, ax1, ax2 in T.grid(T.int64(1), T.int64(48), T.int64(9)):
                for ax3_ax4_fused in T.vectorized(T.int64(64)):
                    with T.block("data_pad"):
                        v_i0, v_i1 = T.axis.remap("SS", [ax0, ax1])
                        v_i2 = T.axis.spatial(T.int64(16), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_fused_fused % T.int64(2) * T.int64(7) + ax2)
                        v_i3 = T.axis.spatial(T.int64(16), ax3_ax4_fused // T.int64(4))
                        v_i4 = T.axis.spatial(T.int64(4), ax3_ax4_fused % T.int64(4))
                        T.reads(p0[v_i0, v_i1, v_i2 - T.int64(1), v_i3 - T.int64(1), v_i4])
                        T.writes(data_pad[v_i0, v_i1, v_i2, v_i3, v_i4])
                        data_pad[v_i0, v_i1, v_i2, v_i3, v_i4] = T.if_then_else(T.int64(1) <= v_i2 and v_i2 < T.int64(15) and T.int64(1) <= v_i3 and v_i3 < T.int64(15), p0[v_i0, v_i1, v_i2 - T.int64(1), v_i3 - T.int64(1), v_i4], T.float32(0))
            for ow_1, oc_block_1 in T.grid(T.int64(14), T.int64(1)):
                for n_2_init, oc_chunk_2_init, oh_2_init, ow_2_init, oc_block_2_init, n_3_init, oc_chunk_3_init, oh_3_init, ow_3_init, oc_block_3_init in T.grid(T.int64(1), T.int64(1), T.int64(7), T.int64(1), T.int64(2), T.int64(1), T.int64(2), T.int64(1), T.int64(1), T.int64(1)):
                    with T.block("conv2d_NCHWc_init"):
                        v_n = T.axis.spatial(T.int64(1), n_2_init + n_3_init)
                        v_oc_chunk = T.axis.spatial(T.int64(12), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_fused_fused // T.int64(4) * T.int64(2) + oc_chunk_2_init * T.int64(2) + oc_chunk_3_init)
                        v_oh = T.axis.spatial(T.int64(14), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_fused_fused % T.int64(2) * T.int64(7) + oh_2_init + oh_3_init)
                        v_ow = T.axis.spatial(T.int64(14), ow_1 + ow_2_init + ow_3_init)
                        v_oc_block = T.axis.spatial(T.int64(4), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_fused_fused % T.int64(4) // T.int64(2) * T.int64(2) + oc_block_1 * T.int64(2) + oc_block_2_init + oc_block_3_init)
                        T.reads()
                        T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                        T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                        conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = T.float32(0)
                for ic_0, kh_0, kw_0, n_2, oc_chunk_2, oh_2, ow_2, oc_block_2, ic_1, kh_1, kw_1, n_3, oc_chunk_3, oh_3, ow_3, oc_block_3 in T.grid(T.int64(4), T.int64(1), T.int64(3), T.int64(1), T.int64(1), T.int64(7), T.int64(1), T.int64(2), T.int64(48), T.int64(3), T.int64(1), T.int64(1), T.int64(2), T.int64(1), T.int64(1), T.int64(1)):
                    with T.block("conv2d_NCHWc_update"):
                        v_n = T.axis.spatial(T.int64(1), n_2 + n_3)
                        v_oc_chunk = T.axis.spatial(T.int64(12), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_fused_fused // T.int64(4) * T.int64(2) + oc_chunk_2 * T.int64(2) + oc_chunk_3)
                        v_oh = T.axis.spatial(T.int64(14), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_fused_fused % T.int64(2) * T.int64(7) + oh_2 + oh_3)
                        v_ow = T.axis.spatial(T.int64(14), ow_1 + ow_2 + ow_3)
                        v_oc_block = T.axis.spatial(T.int64(4), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_fused_fused % T.int64(4) // T.int64(2) * T.int64(2) + oc_block_1 * T.int64(2) + oc_block_2 + oc_block_3)
                        v_ic = T.axis.reduce(T.int64(192), ic_0 * T.int64(48) + ic_1)
                        v_kh = T.axis.reduce(T.int64(3), kh_0 * T.int64(3) + kh_1)
                        v_kw = T.axis.reduce(T.int64(3), kw_0 + kw_1)
                        T.reads(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block], data_pad[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)], p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block])
                        T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                        T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                        conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] + data_pad[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)] * p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block]
b0 = sch.get_block(name="data_pad", func_name="main")
b1 = sch.get_block(name="conv2d_NCHWc", func_name="main")
b2 = sch.get_block(name="root", func_name="main")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSRSRS")
l3, l4, l5, l6, l7, l8, l9, l10 = sch.get_loops(block=b1)
v11, v12, v13, v14 = sch.sample_perfect_tile(loop=l3, n=4, max_innermost_factor=64, decision=[1, 1, 1, 1])
l15, l16, l17, l18 = sch.split(loop=l3, factors=[v11, v12, v13, v14], preserve_unit_iters=True)
v19, v20, v21, v22 = sch.sample_perfect_tile(loop=l4, n=4, max_innermost_factor=64, decision=[6, 1, 1, 2])
l23, l24, l25, l26 = sch.split(loop=l4, factors=[v19, v20, v21, v22], preserve_unit_iters=True)
v27, v28, v29, v30 = sch.sample_perfect_tile(loop=l5, n=4, max_innermost_factor=64, decision=[1, 2, 7, 1])
l31, l32, l33, l34 = sch.split(loop=l5, factors=[v27, v28, v29, v30], preserve_unit_iters=True)
v35, v36, v37, v38 = sch.sample_perfect_tile(loop=l6, n=4, max_innermost_factor=64, decision=[1, 14, 1, 1])
l39, l40, l41, l42 = sch.split(loop=l6, factors=[v35, v36, v37, v38], preserve_unit_iters=True)
v43, v44, v45, v46 = sch.sample_perfect_tile(loop=l7, n=4, max_innermost_factor=64, decision=[2, 1, 2, 1])
l47, l48, l49, l50 = sch.split(loop=l7, factors=[v43, v44, v45, v46], preserve_unit_iters=True)
v51, v52 = sch.sample_perfect_tile(loop=l8, n=2, max_innermost_factor=64, decision=[4, 48])
l53, l54 = sch.split(loop=l8, factors=[v51, v52], preserve_unit_iters=True)
v55, v56 = sch.sample_perfect_tile(loop=l9, n=2, max_innermost_factor=64, decision=[1, 3])
l57, l58 = sch.split(loop=l9, factors=[v55, v56], preserve_unit_iters=True)
v59, v60 = sch.sample_perfect_tile(loop=l10, n=2, max_innermost_factor=64, decision=[3, 1])
l61, l62 = sch.split(loop=l10, factors=[v59, v60], preserve_unit_iters=True)
sch.reorder(l15, l23, l31, l39, l47, l16, l24, l32, l40, l48, l53, l57, l61, l17, l25, l33, l41, l49, l54, l58, l62, l18, l26, l34, l42, l50)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.vectorize", ann_val=64)
v63 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.unroll_explicit", ann_val=v63)
l64 = sch.sample_compute_location(block=b0, decision=7)
sch.compute_at(block=b0, loop=l64, preserve_unit_loops=True, index=-1)
sch.enter_postproc()
b65 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b65, ann_key="meta_schedule.parallel")
sch.unannotate(block_or_loop=b65, ann_key="meta_schedule.vectorize")
sch.unannotate(block_or_loop=b65, ann_key="meta_schedule.unroll_explicit")
b66, b67 = sch.get_child_blocks(b65)
l68, l69, l70, l71, l72, l73, l74, l75, l76, l77, l78, l79, l80 = sch.get_loops(block=b66)
l81 = sch.fuse(l68, l69, l70, l71, l72, l73, l74, l75, preserve_unit_iters=True)
sch.parallel(loop=l81)
l82 = sch.fuse(l79, l80, preserve_unit_iters=True)
sch.vectorize(loop=l82)
l83, l84, l85, l86, l87, l88, l89, l90, l91, l92, l93, l94, l95, l96, l97, l98, l99, l100, l101 = sch.get_loops(block=b67)
l102 = sch.fuse(l83, preserve_unit_iters=True)
sch.parallel(loop=l102)
sch.annotate(block_or_loop=l102, ann_key="pragma_auto_unroll_max_step", ann_val=512)
sch.annotate(block_or_loop=l102, ann_key="pragma_unroll_explicit", ann_val=1)
b103 = sch.get_block(name="conv2d_NCHWc", func_name="main")
l104, l105, l106, l107, l108, l109, l110, l111, l112, l113, l114, l115, l116, l117, l118, l119, l120, l121, l122 = sch.get_loops(block=b103)
b123 = sch.decompose_reduction(block=b103, loop=l107)
2024-04-29 05:36:57 [INFO] [task_scheduler.cc:131] [Task #61: fused_nn_contrib_conv2d_NCHWc_1] Trial #191: GFLOPs: 34.5414. Time: 941.3059 us. Best GFLOPs: 220.6736
2024-04-29 05:36:57 [INFO] [task_scheduler.cc:131] [Task #61: fused_nn_contrib_conv2d_NCHWc_1] Trial #192: GFLOPs: 84.8968. Time: 382.9832 us. Best GFLOPs: 220.6736
2024-04-29 05:53:02 [INFO] [evolutionary_search.cc:713] Generating candidates......
2024-04-29 05:53:03 [INFO] [evolutionary_search.cc:715] Picked top 102 candidate(s) from database
2024-04-29 05:53:07 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0xc83fed8)]: 7 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0xc5901d8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x15321f68)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x1063f078)]: 0 failure(s)
2024-04-29 05:53:07 [INFO] [evolutionary_search.cc:723] Sampled 403 candidate(s)
2024-04-29 05:53:18 [INFO] [evolutionary_search.cc:621] Evolve iter #0 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0xc83fed8)]: 3 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0xc5901d8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x15321f68)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x1063f078)]: 0 failure(s)
2024-04-29 05:53:30 [INFO] [evolutionary_search.cc:621] Evolve iter #1 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0xc83fed8)]: 2 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0xc5901d8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x15321f68)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x1063f078)]: 0 failure(s)
2024-04-29 05:53:41 [INFO] [evolutionary_search.cc:621] Evolve iter #2 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0xc83fed8)]: 3 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0xc5901d8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x15321f68)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x1063f078)]: 0 failure(s)
2024-04-29 05:53:53 [INFO] [evolutionary_search.cc:621] Evolve iter #3 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0xc83fed8)]: 3 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0xc5901d8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x15321f68)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x1063f078)]: 0 failure(s)
2024-04-29 05:53:59 [INFO] [evolutionary_search.cc:649] Scores of the best 64 candidates:
[1 : 16]:	0.9742  0.8586  0.8444  0.8441  0.8441  0.8236  0.8179  0.8179  0.7976  0.7969  0.7923  0.7888  0.7888  0.7886  0.7875  0.7801
[17 : 32]:	0.7782  0.7782  0.7776  0.7756  0.7756  0.7726  0.7708  0.7708  0.7691  0.7691  0.7691  0.7691  0.7633  0.7633  0.7626  0.7620
[33 : 48]:	0.7607  0.7586  0.7567  0.7567  0.7567  0.7549  0.7549  0.7549  0.7549  0.7549  0.7549  0.7549  0.7549  0.7531  0.7531  0.7518
[49 : 64]:	0.7518  0.7491  0.7477  0.7477  0.7467  0.7467  0.7462  0.7462  0.7462  0.7462  0.7460  0.7447  0.7446  0.7445  0.7445  0.7442
2024-04-29 05:54:00 [INFO] [evolutionary_search.cc:727] Got 64 candidate(s) with evolutionary search
2024-04-29 05:54:00 [INFO] [evolutionary_search.cc:730] Sending 64 candidates(s) for measurement
2024-04-29 05:55:32 [INFO] [task_scheduler.cc:131] [Task #61: fused_nn_contrib_conv2d_NCHWc_1] Trial #193: GFLOPs: 111.1375. Time: 292.5569 us. Best GFLOPs: 220.6736
2024-04-29 05:55:32 [INFO] [task_scheduler.cc:121] [Task #61: fused_nn_contrib_conv2d_NCHWc_1] Trial #194: Error in building:
LocalBuilder: Timeout, killed after 30.0 seconds
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(48), T.int64(14), T.int64(14), T.int64(4)), "float32"), p1: T.Buffer((T.int64(12), T.int64(48), T.int64(3), T.int64(3), T.int64(4), T.int64(4)), "float32"), conv2d_NCHWc: T.Buffer((T.int64(1), T.int64(12), T.int64(14), T.int64(14), T.int64(4)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        data_pad = T.alloc_buffer((T.int64(1), T.int64(48), T.int64(16), T.int64(16), T.int64(4)))
        conv2d_NCHWc_global = T.alloc_buffer((T.int64(1), T.int64(12), T.int64(14), T.int64(14), T.int64(4)))
        for i0_i1_i2_fused in T.parallel(T.int64(768)):
            for i3_i4_fused in T.vectorized(T.int64(64)):
                with T.block("data_pad"):
                    v_i0 = T.axis.spatial(T.int64(1), T.int64(0))
                    v_i1 = T.axis.spatial(T.int64(48), i0_i1_i2_fused // T.int64(16))
                    v_i2 = T.axis.spatial(T.int64(16), i0_i1_i2_fused % T.int64(16))
                    v_i3 = T.axis.spatial(T.int64(16), i3_i4_fused // T.int64(4))
                    v_i4 = T.axis.spatial(T.int64(4), i3_i4_fused % T.int64(4))
                    T.reads(p0[v_i0, v_i1, v_i2 - T.int64(1), v_i3 - T.int64(1), v_i4])
                    T.writes(data_pad[v_i0, v_i1, v_i2, v_i3, v_i4])
                    data_pad[v_i0, v_i1, v_i2, v_i3, v_i4] = T.if_then_else(T.int64(1) <= v_i2 and v_i2 < T.int64(15) and T.int64(1) <= v_i3 and v_i3 < T.int64(15), p0[v_i0, v_i1, v_i2 - T.int64(1), v_i3 - T.int64(1), v_i4], T.float32(0))
        for n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused in T.parallel(T.int64(672), annotations={"pragma_auto_unroll_max_step": 512, "pragma_unroll_explicit": 1}):
            for n_2_init, oc_chunk_2_init, oh_2_init, ow_2_init, oc_block_2_init, n_3_init, oc_chunk_3_init, oh_3_init, ow_3_init, oc_block_3_init in T.grid(T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(7), T.int64(1), T.int64(1)):
                with T.block("conv2d_NCHWc_init"):
                    v_n = T.axis.spatial(T.int64(1), n_2_init + n_3_init)
                    v_oc_chunk = T.axis.spatial(T.int64(12), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused % T.int64(84) // T.int64(14) * T.int64(2) + oc_chunk_2_init * T.int64(2) + oc_chunk_3_init)
                    v_oh = T.axis.spatial(T.int64(14), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused // T.int64(336) * T.int64(7) + oh_2_init * T.int64(7) + oh_3_init)
                    v_ow = T.axis.spatial(T.int64(14), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused % T.int64(14) + ow_2_init + ow_3_init)
                    v_oc_block = T.axis.spatial(T.int64(4), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused % T.int64(336) // T.int64(84) + oc_block_2_init + oc_block_3_init)
                    T.reads()
                    T.writes(conv2d_NCHWc_global[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                    T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                    conv2d_NCHWc_global[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = T.float32(0)
            for ic_0, kh_0, kw_0, n_2, oc_chunk_2, oh_2, ow_2, oc_block_2, ic_1, kh_1, kw_1, n_3, oc_chunk_3, oh_3, ow_3, oc_block_3 in T.grid(T.int64(16), T.int64(3), T.int64(3), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(12), T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(7), T.int64(1), T.int64(1)):
                with T.block("conv2d_NCHWc_update"):
                    v_n = T.axis.spatial(T.int64(1), n_2 + n_3)
                    v_oc_chunk = T.axis.spatial(T.int64(12), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused % T.int64(84) // T.int64(14) * T.int64(2) + oc_chunk_2 * T.int64(2) + oc_chunk_3)
                    v_oh = T.axis.spatial(T.int64(14), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused // T.int64(336) * T.int64(7) + oh_2 * T.int64(7) + oh_3)
                    v_ow = T.axis.spatial(T.int64(14), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused % T.int64(14) + ow_2 + ow_3)
                    v_oc_block = T.axis.spatial(T.int64(4), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused % T.int64(336) // T.int64(84) + oc_block_2 + oc_block_3)
                    v_ic = T.axis.reduce(T.int64(192), ic_0 * T.int64(12) + ic_1)
                    v_kh = T.axis.reduce(T.int64(3), kh_0 + kh_1)
                    v_kw = T.axis.reduce(T.int64(3), kw_0 + kw_1)
                    T.reads(conv2d_NCHWc_global[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block], data_pad[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)], p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block])
                    T.writes(conv2d_NCHWc_global[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                    T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                    conv2d_NCHWc_global[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = conv2d_NCHWc_global[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] + data_pad[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)] * p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block]
            for ax0, ax1, ax2, ax3, ax4 in T.grid(T.int64(1), T.int64(2), T.int64(7), T.int64(1), T.int64(1)):
                with T.block("conv2d_NCHWc_global"):
                    v0 = T.axis.spatial(T.int64(1), ax0)
                    v1 = T.axis.spatial(T.int64(12), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused % T.int64(84) // T.int64(14) * T.int64(2) + ax1)
                    v2 = T.axis.spatial(T.int64(14), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused // T.int64(336) * T.int64(7) + ax2)
                    v3 = T.axis.spatial(T.int64(14), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused % T.int64(14) + ax3)
                    v4 = T.axis.spatial(T.int64(4), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused % T.int64(336) // T.int64(84) + ax4)
                    T.reads(conv2d_NCHWc_global[v0, v1, v2, v3, v4])
                    T.writes(conv2d_NCHWc[v0, v1, v2, v3, v4])
                    conv2d_NCHWc[v0, v1, v2, v3, v4] = conv2d_NCHWc_global[v0, v1, v2, v3, v4]
b0 = sch.get_block(name="data_pad", func_name="main")
b1 = sch.get_block(name="conv2d_NCHWc", func_name="main")
b2 = sch.get_block(name="root", func_name="main")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSRSRS")
l3, l4, l5, l6, l7, l8, l9, l10 = sch.get_loops(block=b1)
v11, v12, v13, v14 = sch.sample_perfect_tile(loop=l3, n=4, max_innermost_factor=64, decision=[1, 1, 1, 1])
l15, l16, l17, l18 = sch.split(loop=l3, factors=[v11, v12, v13, v14], preserve_unit_iters=True)
v19, v20, v21, v22 = sch.sample_perfect_tile(loop=l4, n=4, max_innermost_factor=64, decision=[1, 6, 1, 2])
l23, l24, l25, l26 = sch.split(loop=l4, factors=[v19, v20, v21, v22], preserve_unit_iters=True)
v27, v28, v29, v30 = sch.sample_perfect_tile(loop=l5, n=4, max_innermost_factor=64, decision=[2, 1, 1, 7])
l31, l32, l33, l34 = sch.split(loop=l5, factors=[v27, v28, v29, v30], preserve_unit_iters=True)
v35, v36, v37, v38 = sch.sample_perfect_tile(loop=l6, n=4, max_innermost_factor=64, decision=[1, 14, 1, 1])
l39, l40, l41, l42 = sch.split(loop=l6, factors=[v35, v36, v37, v38], preserve_unit_iters=True)
v43, v44, v45, v46 = sch.sample_perfect_tile(loop=l7, n=4, max_innermost_factor=64, decision=[4, 1, 1, 1])
l47, l48, l49, l50 = sch.split(loop=l7, factors=[v43, v44, v45, v46], preserve_unit_iters=True)
v51, v52 = sch.sample_perfect_tile(loop=l8, n=2, max_innermost_factor=64, decision=[16, 12])
l53, l54 = sch.split(loop=l8, factors=[v51, v52], preserve_unit_iters=True)
v55, v56 = sch.sample_perfect_tile(loop=l9, n=2, max_innermost_factor=64, decision=[3, 1])
l57, l58 = sch.split(loop=l9, factors=[v55, v56], preserve_unit_iters=True)
v59, v60 = sch.sample_perfect_tile(loop=l10, n=2, max_innermost_factor=64, decision=[3, 1])
l61, l62 = sch.split(loop=l10, factors=[v59, v60], preserve_unit_iters=True)
sch.reorder(l15, l23, l31, l39, l47, l16, l24, l32, l40, l48, l53, l57, l61, l17, l25, l33, l41, l49, l54, l58, l62, l18, l26, l34, l42, l50)
b63 = sch.cache_write(block=b1, write_buffer_index=0, storage_scope="global")
sch.reverse_compute_at(block=b63, loop=l48, preserve_unit_loops=True, index=-1)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.vectorize", ann_val=64)
v64 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.unroll_explicit", ann_val=v64)
l65 = sch.sample_compute_location(block=b0, decision=-1)
sch.compute_at(block=b0, loop=l65, preserve_unit_loops=True, index=-1)
sch.enter_postproc()
b66 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b66, ann_key="meta_schedule.parallel")
sch.unannotate(block_or_loop=b66, ann_key="meta_schedule.vectorize")
sch.unannotate(block_or_loop=b66, ann_key="meta_schedule.unroll_explicit")
b67, b68, b69 = sch.get_child_blocks(b66)
l70, l71, l72, l73, l74 = sch.get_loops(block=b67)
l75 = sch.fuse(l70, l71, l72, preserve_unit_iters=True)
sch.parallel(loop=l75)
l76 = sch.fuse(l73, l74, preserve_unit_iters=True)
sch.vectorize(loop=l76)
l77, l78, l79, l80, l81, l82, l83, l84, l85, l86, l87, l88, l89, l90, l91, l92, l93, l94, l95, l96, l97, l98, l99, l100, l101, l102 = sch.get_loops(block=b68)
l103 = sch.fuse(l77, l78, l79, l80, l81, l82, l83, l84, l85, l86, preserve_unit_iters=True)
sch.parallel(loop=l103)
sch.annotate(block_or_loop=l103, ann_key="pragma_auto_unroll_max_step", ann_val=512)
sch.annotate(block_or_loop=l103, ann_key="pragma_unroll_explicit", ann_val=1)
l104, l105, l106, l107, l108, l109 = sch.get_loops(block=b69)
b110 = sch.get_block(name="conv2d_NCHWc", func_name="main")
l111, l112, l113, l114, l115, l116, l117, l118, l119, l120, l121, l122, l123, l124, l125, l126, l127 = sch.get_loops(block=b110)
b128 = sch.decompose_reduction(block=b110, loop=l112)
2024-04-29 05:55:32 [INFO] [task_scheduler.cc:131] [Task #61: fused_nn_contrib_conv2d_NCHWc_1] Trial #195: GFLOPs: 136.4511. Time: 238.2835 us. Best GFLOPs: 220.6736
2024-04-29 05:55:32 [INFO] [task_scheduler.cc:121] [Task #61: fused_nn_contrib_conv2d_NCHWc_1] Trial #196: Error in building:
LocalBuilder: Timeout, killed after 30.0 seconds
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(48), T.int64(14), T.int64(14), T.int64(4)), "float32"), p1: T.Buffer((T.int64(12), T.int64(48), T.int64(3), T.int64(3), T.int64(4), T.int64(4)), "float32"), conv2d_NCHWc: T.Buffer((T.int64(1), T.int64(12), T.int64(14), T.int64(14), T.int64(4)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        data_pad = T.alloc_buffer((T.int64(1), T.int64(48), T.int64(16), T.int64(16), T.int64(4)))
        conv2d_NCHWc_global = T.alloc_buffer((T.int64(1), T.int64(12), T.int64(14), T.int64(14), T.int64(4)))
        for i0_i1_i2_fused in T.parallel(T.int64(768)):
            for i3_i4_fused in T.vectorized(T.int64(64)):
                with T.block("data_pad"):
                    v_i0 = T.axis.spatial(T.int64(1), T.int64(0))
                    v_i1 = T.axis.spatial(T.int64(48), i0_i1_i2_fused // T.int64(16))
                    v_i2 = T.axis.spatial(T.int64(16), i0_i1_i2_fused % T.int64(16))
                    v_i3 = T.axis.spatial(T.int64(16), i3_i4_fused // T.int64(4))
                    v_i4 = T.axis.spatial(T.int64(4), i3_i4_fused % T.int64(4))
                    T.reads(p0[v_i0, v_i1, v_i2 - T.int64(1), v_i3 - T.int64(1), v_i4])
                    T.writes(data_pad[v_i0, v_i1, v_i2, v_i3, v_i4])
                    data_pad[v_i0, v_i1, v_i2, v_i3, v_i4] = T.if_then_else(T.int64(1) <= v_i2 and v_i2 < T.int64(15) and T.int64(1) <= v_i3 and v_i3 < T.int64(15), p0[v_i0, v_i1, v_i2 - T.int64(1), v_i3 - T.int64(1), v_i4], T.float32(0))
        for n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused in T.parallel(T.int64(672), annotations={"pragma_auto_unroll_max_step": 512, "pragma_unroll_explicit": 1}):
            for n_2_init, oc_chunk_2_init, oh_2_init, ow_2_init, oc_block_2_init, n_3_init, oc_chunk_3_init, oh_3_init, ow_3_init, oc_block_3_init in T.grid(T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(7), T.int64(1), T.int64(1)):
                with T.block("conv2d_NCHWc_init"):
                    v_n = T.axis.spatial(T.int64(1), n_2_init + n_3_init)
                    v_oc_chunk = T.axis.spatial(T.int64(12), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused % T.int64(84) // T.int64(14) * T.int64(2) + oc_chunk_2_init * T.int64(2) + oc_chunk_3_init)
                    v_oh = T.axis.spatial(T.int64(14), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused // T.int64(336) * T.int64(7) + oh_2_init * T.int64(7) + oh_3_init)
                    v_ow = T.axis.spatial(T.int64(14), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused % T.int64(14) + ow_2_init + ow_3_init)
                    v_oc_block = T.axis.spatial(T.int64(4), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused % T.int64(336) // T.int64(84) + oc_block_2_init + oc_block_3_init)
                    T.reads()
                    T.writes(conv2d_NCHWc_global[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                    T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                    conv2d_NCHWc_global[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = T.float32(0)
            for ic_0, kh_0, kw_0, n_2, oc_chunk_2, oh_2, ow_2, oc_block_2, ic_1, kh_1, kw_1, n_3, oc_chunk_3, oh_3, ow_3, oc_block_3 in T.grid(T.int64(16), T.int64(3), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(12), T.int64(1), T.int64(3), T.int64(1), T.int64(2), T.int64(7), T.int64(1), T.int64(1)):
                with T.block("conv2d_NCHWc_update"):
                    v_n = T.axis.spatial(T.int64(1), n_2 + n_3)
                    v_oc_chunk = T.axis.spatial(T.int64(12), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused % T.int64(84) // T.int64(14) * T.int64(2) + oc_chunk_2 * T.int64(2) + oc_chunk_3)
                    v_oh = T.axis.spatial(T.int64(14), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused // T.int64(336) * T.int64(7) + oh_2 * T.int64(7) + oh_3)
                    v_ow = T.axis.spatial(T.int64(14), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused % T.int64(14) + ow_2 + ow_3)
                    v_oc_block = T.axis.spatial(T.int64(4), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused % T.int64(336) // T.int64(84) + oc_block_2 + oc_block_3)
                    v_ic = T.axis.reduce(T.int64(192), ic_0 * T.int64(12) + ic_1)
                    v_kh = T.axis.reduce(T.int64(3), kh_0 + kh_1)
                    v_kw = T.axis.reduce(T.int64(3), kw_0 * T.int64(3) + kw_1)
                    T.reads(conv2d_NCHWc_global[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block], data_pad[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)], p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block])
                    T.writes(conv2d_NCHWc_global[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                    T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                    conv2d_NCHWc_global[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = conv2d_NCHWc_global[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] + data_pad[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)] * p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block]
            for ax0, ax1, ax2, ax3, ax4 in T.grid(T.int64(1), T.int64(2), T.int64(7), T.int64(1), T.int64(1)):
                with T.block("conv2d_NCHWc_global"):
                    v0 = T.axis.spatial(T.int64(1), ax0)
                    v1 = T.axis.spatial(T.int64(12), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused % T.int64(84) // T.int64(14) * T.int64(2) + ax1)
                    v2 = T.axis.spatial(T.int64(14), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused // T.int64(336) * T.int64(7) + ax2)
                    v3 = T.axis.spatial(T.int64(14), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused % T.int64(14) + ax3)
                    v4 = T.axis.spatial(T.int64(4), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused % T.int64(336) // T.int64(84) + ax4)
                    T.reads(conv2d_NCHWc_global[v0, v1, v2, v3, v4])
                    T.writes(conv2d_NCHWc[v0, v1, v2, v3, v4])
                    conv2d_NCHWc[v0, v1, v2, v3, v4] = conv2d_NCHWc_global[v0, v1, v2, v3, v4]
b0 = sch.get_block(name="data_pad", func_name="main")
b1 = sch.get_block(name="conv2d_NCHWc", func_name="main")
b2 = sch.get_block(name="root", func_name="main")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSRSRS")
l3, l4, l5, l6, l7, l8, l9, l10 = sch.get_loops(block=b1)
v11, v12, v13, v14 = sch.sample_perfect_tile(loop=l3, n=4, max_innermost_factor=64, decision=[1, 1, 1, 1])
l15, l16, l17, l18 = sch.split(loop=l3, factors=[v11, v12, v13, v14], preserve_unit_iters=True)
v19, v20, v21, v22 = sch.sample_perfect_tile(loop=l4, n=4, max_innermost_factor=64, decision=[1, 6, 1, 2])
l23, l24, l25, l26 = sch.split(loop=l4, factors=[v19, v20, v21, v22], preserve_unit_iters=True)
v27, v28, v29, v30 = sch.sample_perfect_tile(loop=l5, n=4, max_innermost_factor=64, decision=[2, 1, 1, 7])
l31, l32, l33, l34 = sch.split(loop=l5, factors=[v27, v28, v29, v30], preserve_unit_iters=True)
v35, v36, v37, v38 = sch.sample_perfect_tile(loop=l6, n=4, max_innermost_factor=64, decision=[1, 14, 1, 1])
l39, l40, l41, l42 = sch.split(loop=l6, factors=[v35, v36, v37, v38], preserve_unit_iters=True)
v43, v44, v45, v46 = sch.sample_perfect_tile(loop=l7, n=4, max_innermost_factor=64, decision=[4, 1, 1, 1])
l47, l48, l49, l50 = sch.split(loop=l7, factors=[v43, v44, v45, v46], preserve_unit_iters=True)
v51, v52 = sch.sample_perfect_tile(loop=l8, n=2, max_innermost_factor=64, decision=[16, 12])
l53, l54 = sch.split(loop=l8, factors=[v51, v52], preserve_unit_iters=True)
v55, v56 = sch.sample_perfect_tile(loop=l9, n=2, max_innermost_factor=64, decision=[3, 1])
l57, l58 = sch.split(loop=l9, factors=[v55, v56], preserve_unit_iters=True)
v59, v60 = sch.sample_perfect_tile(loop=l10, n=2, max_innermost_factor=64, decision=[1, 3])
l61, l62 = sch.split(loop=l10, factors=[v59, v60], preserve_unit_iters=True)
sch.reorder(l15, l23, l31, l39, l47, l16, l24, l32, l40, l48, l53, l57, l61, l17, l25, l33, l41, l49, l54, l58, l62, l18, l26, l34, l42, l50)
b63 = sch.cache_write(block=b1, write_buffer_index=0, storage_scope="global")
sch.reverse_compute_at(block=b63, loop=l48, preserve_unit_loops=True, index=-1)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.vectorize", ann_val=64)
v64 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.unroll_explicit", ann_val=v64)
l65 = sch.sample_compute_location(block=b0, decision=-1)
sch.compute_at(block=b0, loop=l65, preserve_unit_loops=True, index=-1)
sch.enter_postproc()
b66 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b66, ann_key="meta_schedule.parallel")
sch.unannotate(block_or_loop=b66, ann_key="meta_schedule.vectorize")
sch.unannotate(block_or_loop=b66, ann_key="meta_schedule.unroll_explicit")
b67, b68, b69 = sch.get_child_blocks(b66)
l70, l71, l72, l73, l74 = sch.get_loops(block=b67)
l75 = sch.fuse(l70, l71, l72, preserve_unit_iters=True)
sch.parallel(loop=l75)
l76 = sch.fuse(l73, l74, preserve_unit_iters=True)
sch.vectorize(loop=l76)
l77, l78, l79, l80, l81, l82, l83, l84, l85, l86, l87, l88, l89, l90, l91, l92, l93, l94, l95, l96, l97, l98, l99, l100, l101, l102 = sch.get_loops(block=b68)
l103 = sch.fuse(l77, l78, l79, l80, l81, l82, l83, l84, l85, l86, preserve_unit_iters=True)
sch.parallel(loop=l103)
sch.annotate(block_or_loop=l103, ann_key="pragma_auto_unroll_max_step", ann_val=512)
sch.annotate(block_or_loop=l103, ann_key="pragma_unroll_explicit", ann_val=1)
l104, l105, l106, l107, l108, l109 = sch.get_loops(block=b69)
b110 = sch.get_block(name="conv2d_NCHWc", func_name="main")
l111, l112, l113, l114, l115, l116, l117, l118, l119, l120, l121, l122, l123, l124, l125, l126, l127 = sch.get_loops(block=b110)
b128 = sch.decompose_reduction(block=b110, loop=l112)
2024-04-29 05:55:32 [INFO] [task_scheduler.cc:131] [Task #61: fused_nn_contrib_conv2d_NCHWc_1] Trial #197: GFLOPs: 133.3143. Time: 243.8902 us. Best GFLOPs: 220.6736
2024-04-29 05:55:32 [INFO] [task_scheduler.cc:131] [Task #61: fused_nn_contrib_conv2d_NCHWc_1] Trial #198: GFLOPs: 126.3431. Time: 257.3473 us. Best GFLOPs: 220.6736
2024-04-29 05:55:32 [INFO] [task_scheduler.cc:121] [Task #61: fused_nn_contrib_conv2d_NCHWc_1] Trial #199: Error in building:
LocalBuilder: Timeout, killed after 30.0 seconds
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(48), T.int64(14), T.int64(14), T.int64(4)), "float32"), p1: T.Buffer((T.int64(12), T.int64(48), T.int64(3), T.int64(3), T.int64(4), T.int64(4)), "float32"), conv2d_NCHWc: T.Buffer((T.int64(1), T.int64(12), T.int64(14), T.int64(14), T.int64(4)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        data_pad = T.alloc_buffer((T.int64(1), T.int64(48), T.int64(16), T.int64(16), T.int64(4)))
        conv2d_NCHWc_global = T.alloc_buffer((T.int64(1), T.int64(12), T.int64(14), T.int64(14), T.int64(4)))
        for i0_i1_i2_fused in T.parallel(T.int64(768)):
            for i3_i4_fused in T.vectorized(T.int64(64)):
                with T.block("data_pad"):
                    v_i0 = T.axis.spatial(T.int64(1), T.int64(0))
                    v_i1 = T.axis.spatial(T.int64(48), i0_i1_i2_fused // T.int64(16))
                    v_i2 = T.axis.spatial(T.int64(16), i0_i1_i2_fused % T.int64(16))
                    v_i3 = T.axis.spatial(T.int64(16), i3_i4_fused // T.int64(4))
                    v_i4 = T.axis.spatial(T.int64(4), i3_i4_fused % T.int64(4))
                    T.reads(p0[v_i0, v_i1, v_i2 - T.int64(1), v_i3 - T.int64(1), v_i4])
                    T.writes(data_pad[v_i0, v_i1, v_i2, v_i3, v_i4])
                    data_pad[v_i0, v_i1, v_i2, v_i3, v_i4] = T.if_then_else(T.int64(1) <= v_i2 and v_i2 < T.int64(15) and T.int64(1) <= v_i3 and v_i3 < T.int64(15), p0[v_i0, v_i1, v_i2 - T.int64(1), v_i3 - T.int64(1), v_i4], T.float32(0))
        for n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused in T.parallel(T.int64(168), annotations={"pragma_auto_unroll_max_step": 512, "pragma_unroll_explicit": 1}):
            for n_2_init, oc_chunk_2_init, oh_2_init, ow_2_init, oc_block_2_init, n_3_init, oc_chunk_3_init, oh_3_init, ow_3_init in T.grid(T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(7), T.int64(1)):
                for oc_block_3_fused_init in T.vectorized(T.int64(4)):
                    with T.block("conv2d_NCHWc_init"):
                        v_n = T.axis.spatial(T.int64(1), n_2_init + n_3_init)
                        v_oc_chunk = T.axis.spatial(T.int64(12), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused % T.int64(84) // T.int64(14) * T.int64(2) + oc_chunk_2_init * T.int64(2) + oc_chunk_3_init)
                        v_oh = T.axis.spatial(T.int64(14), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused // T.int64(84) * T.int64(7) + oh_2_init * T.int64(7) + oh_3_init)
                        v_ow = T.axis.spatial(T.int64(14), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused % T.int64(14) + ow_2_init + ow_3_init)
                        v_oc_block = T.axis.spatial(T.int64(4), oc_block_2_init * T.int64(4) + oc_block_3_fused_init)
                        T.reads()
                        T.writes(conv2d_NCHWc_global[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                        T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                        conv2d_NCHWc_global[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = T.float32(0)
            for ic_0, kh_0, kw_0, n_2, oc_chunk_2, oh_2, ow_2, oc_block_2, ic_1, kh_1, kw_1, n_3, oc_chunk_3, oh_3, ow_3 in T.grid(T.int64(16), T.int64(3), T.int64(3), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(12), T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(7), T.int64(1)):
                for oc_block_3_fused in T.vectorized(T.int64(4)):
                    with T.block("conv2d_NCHWc_update"):
                        v_n = T.axis.spatial(T.int64(1), n_2 + n_3)
                        v_oc_chunk = T.axis.spatial(T.int64(12), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused % T.int64(84) // T.int64(14) * T.int64(2) + oc_chunk_2 * T.int64(2) + oc_chunk_3)
                        v_oh = T.axis.spatial(T.int64(14), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused // T.int64(84) * T.int64(7) + oh_2 * T.int64(7) + oh_3)
                        v_ow = T.axis.spatial(T.int64(14), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused % T.int64(14) + ow_2 + ow_3)
                        v_oc_block = T.axis.spatial(T.int64(4), oc_block_2 * T.int64(4) + oc_block_3_fused)
                        v_ic = T.axis.reduce(T.int64(192), ic_0 * T.int64(12) + ic_1)
                        v_kh = T.axis.reduce(T.int64(3), kh_0 + kh_1)
                        v_kw = T.axis.reduce(T.int64(3), kw_0 + kw_1)
                        T.reads(conv2d_NCHWc_global[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block], data_pad[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)], p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block])
                        T.writes(conv2d_NCHWc_global[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                        T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                        conv2d_NCHWc_global[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = conv2d_NCHWc_global[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] + data_pad[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)] * p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block]
            for ax0, ax1, ax2 in T.grid(T.int64(1), T.int64(2), T.int64(7)):
                for ax3_ax4_fused in T.vectorized(T.int64(4)):
                    with T.block("conv2d_NCHWc_global"):
                        v0 = T.axis.spatial(T.int64(1), ax0)
                        v1 = T.axis.spatial(T.int64(12), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused % T.int64(84) // T.int64(14) * T.int64(2) + ax1)
                        v2 = T.axis.spatial(T.int64(14), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused // T.int64(84) * T.int64(7) + ax2)
                        v3 = T.axis.spatial(T.int64(14), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused % T.int64(14))
                        v4 = T.axis.spatial(T.int64(4), ax3_ax4_fused)
                        T.reads(conv2d_NCHWc_global[v0, v1, v2, v3, v4])
                        T.writes(conv2d_NCHWc[v0, v1, v2, v3, v4])
                        conv2d_NCHWc[v0, v1, v2, v3, v4] = conv2d_NCHWc_global[v0, v1, v2, v3, v4]
b0 = sch.get_block(name="data_pad", func_name="main")
b1 = sch.get_block(name="conv2d_NCHWc", func_name="main")
b2 = sch.get_block(name="root", func_name="main")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSRSRS")
l3, l4, l5, l6, l7, l8, l9, l10 = sch.get_loops(block=b1)
v11, v12, v13, v14 = sch.sample_perfect_tile(loop=l3, n=4, max_innermost_factor=64, decision=[1, 1, 1, 1])
l15, l16, l17, l18 = sch.split(loop=l3, factors=[v11, v12, v13, v14], preserve_unit_iters=True)
v19, v20, v21, v22 = sch.sample_perfect_tile(loop=l4, n=4, max_innermost_factor=64, decision=[1, 6, 1, 2])
l23, l24, l25, l26 = sch.split(loop=l4, factors=[v19, v20, v21, v22], preserve_unit_iters=True)
v27, v28, v29, v30 = sch.sample_perfect_tile(loop=l5, n=4, max_innermost_factor=64, decision=[2, 1, 1, 7])
l31, l32, l33, l34 = sch.split(loop=l5, factors=[v27, v28, v29, v30], preserve_unit_iters=True)
v35, v36, v37, v38 = sch.sample_perfect_tile(loop=l6, n=4, max_innermost_factor=64, decision=[1, 14, 1, 1])
l39, l40, l41, l42 = sch.split(loop=l6, factors=[v35, v36, v37, v38], preserve_unit_iters=True)
v43, v44, v45, v46 = sch.sample_perfect_tile(loop=l7, n=4, max_innermost_factor=64, decision=[1, 1, 1, 4])
l47, l48, l49, l50 = sch.split(loop=l7, factors=[v43, v44, v45, v46], preserve_unit_iters=True)
v51, v52 = sch.sample_perfect_tile(loop=l8, n=2, max_innermost_factor=64, decision=[16, 12])
l53, l54 = sch.split(loop=l8, factors=[v51, v52], preserve_unit_iters=True)
v55, v56 = sch.sample_perfect_tile(loop=l9, n=2, max_innermost_factor=64, decision=[3, 1])
l57, l58 = sch.split(loop=l9, factors=[v55, v56], preserve_unit_iters=True)
v59, v60 = sch.sample_perfect_tile(loop=l10, n=2, max_innermost_factor=64, decision=[3, 1])
l61, l62 = sch.split(loop=l10, factors=[v59, v60], preserve_unit_iters=True)
sch.reorder(l15, l23, l31, l39, l47, l16, l24, l32, l40, l48, l53, l57, l61, l17, l25, l33, l41, l49, l54, l58, l62, l18, l26, l34, l42, l50)
b63 = sch.cache_write(block=b1, write_buffer_index=0, storage_scope="global")
sch.reverse_compute_at(block=b63, loop=l48, preserve_unit_loops=True, index=-1)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.vectorize", ann_val=64)
v64 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.unroll_explicit", ann_val=v64)
l65 = sch.sample_compute_location(block=b0, decision=-1)
sch.compute_at(block=b0, loop=l65, preserve_unit_loops=True, index=-1)
sch.enter_postproc()
b66 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b66, ann_key="meta_schedule.parallel")
sch.unannotate(block_or_loop=b66, ann_key="meta_schedule.vectorize")
sch.unannotate(block_or_loop=b66, ann_key="meta_schedule.unroll_explicit")
b67, b68, b69 = sch.get_child_blocks(b66)
l70, l71, l72, l73, l74 = sch.get_loops(block=b67)
l75 = sch.fuse(l70, l71, l72, preserve_unit_iters=True)
sch.parallel(loop=l75)
l76 = sch.fuse(l73, l74, preserve_unit_iters=True)
sch.vectorize(loop=l76)
l77, l78, l79, l80, l81, l82, l83, l84, l85, l86, l87, l88, l89, l90, l91, l92, l93, l94, l95, l96, l97, l98, l99, l100, l101, l102 = sch.get_loops(block=b68)
l103 = sch.fuse(l77, l78, l79, l80, l81, l82, l83, l84, l85, l86, preserve_unit_iters=True)
sch.parallel(loop=l103)
l104 = sch.fuse(l102, preserve_unit_iters=True)
sch.vectorize(loop=l104)
sch.annotate(block_or_loop=l103, ann_key="pragma_auto_unroll_max_step", ann_val=512)
sch.annotate(block_or_loop=l103, ann_key="pragma_unroll_explicit", ann_val=1)
l105, l106, l107, l108, l109, l110 = sch.get_loops(block=b69)
l111 = sch.fuse(l109, l110, preserve_unit_iters=True)
sch.vectorize(loop=l111)
b112 = sch.get_block(name="conv2d_NCHWc", func_name="main")
l113, l114, l115, l116, l117, l118, l119, l120, l121, l122, l123, l124, l125, l126, l127, l128, l129 = sch.get_loops(block=b112)
b130 = sch.decompose_reduction(block=b112, loop=l114)
2024-04-29 05:55:32 [INFO] [task_scheduler.cc:121] [Task #61: fused_nn_contrib_conv2d_NCHWc_1] Trial #200: Error in building:
LocalBuilder: Timeout, killed after 30.0 seconds
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(48), T.int64(14), T.int64(14), T.int64(4)), "float32"), p1: T.Buffer((T.int64(12), T.int64(48), T.int64(3), T.int64(3), T.int64(4), T.int64(4)), "float32"), conv2d_NCHWc: T.Buffer((T.int64(1), T.int64(12), T.int64(14), T.int64(14), T.int64(4)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        data_pad = T.alloc_buffer((T.int64(1), T.int64(48), T.int64(16), T.int64(16), T.int64(4)))
        conv2d_NCHWc_global = T.alloc_buffer((T.int64(1), T.int64(12), T.int64(14), T.int64(14), T.int64(4)))
        for i0_i1_i2_fused in T.parallel(T.int64(768)):
            for i3_i4_fused in T.vectorized(T.int64(64)):
                with T.block("data_pad"):
                    v_i0 = T.axis.spatial(T.int64(1), T.int64(0))
                    v_i1 = T.axis.spatial(T.int64(48), i0_i1_i2_fused // T.int64(16))
                    v_i2 = T.axis.spatial(T.int64(16), i0_i1_i2_fused % T.int64(16))
                    v_i3 = T.axis.spatial(T.int64(16), i3_i4_fused // T.int64(4))
                    v_i4 = T.axis.spatial(T.int64(4), i3_i4_fused % T.int64(4))
                    T.reads(p0[v_i0, v_i1, v_i2 - T.int64(1), v_i3 - T.int64(1), v_i4])
                    T.writes(data_pad[v_i0, v_i1, v_i2, v_i3, v_i4])
                    data_pad[v_i0, v_i1, v_i2, v_i3, v_i4] = T.if_then_else(T.int64(1) <= v_i2 and v_i2 < T.int64(15) and T.int64(1) <= v_i3 and v_i3 < T.int64(15), p0[v_i0, v_i1, v_i2 - T.int64(1), v_i3 - T.int64(1), v_i4], T.float32(0))
        for n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused in T.parallel(T.int64(168), annotations={"pragma_auto_unroll_max_step": 512, "pragma_unroll_explicit": 1}):
            for n_2_init, oc_chunk_2_init, oh_2_init, ow_2_init, oc_block_2_init, n_3_init, oc_chunk_3_init, oh_3_init, ow_3_init in T.grid(T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(7), T.int64(1)):
                for oc_block_3_fused_init in T.vectorized(T.int64(4)):
                    with T.block("conv2d_NCHWc_init"):
                        v_n = T.axis.spatial(T.int64(1), n_2_init + n_3_init)
                        v_oc_chunk = T.axis.spatial(T.int64(12), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused // T.int64(28) * T.int64(2) + oc_chunk_2_init * T.int64(2) + oc_chunk_3_init)
                        v_oh = T.axis.spatial(T.int64(14), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused % T.int64(28) // T.int64(14) * T.int64(7) + oh_2_init * T.int64(7) + oh_3_init)
                        v_ow = T.axis.spatial(T.int64(14), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused % T.int64(14) + ow_2_init + ow_3_init)
                        v_oc_block = T.axis.spatial(T.int64(4), oc_block_2_init * T.int64(4) + oc_block_3_fused_init)
                        T.reads()
                        T.writes(conv2d_NCHWc_global[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                        T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                        conv2d_NCHWc_global[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = T.float32(0)
            for ic_0, kh_0, kw_0, n_2, oc_chunk_2, oh_2, ow_2, oc_block_2, ic_1, kh_1, kw_1, n_3, oc_chunk_3, oh_3, ow_3 in T.grid(T.int64(16), T.int64(3), T.int64(3), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(12), T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(7), T.int64(1)):
                for oc_block_3_fused in T.vectorized(T.int64(4)):
                    with T.block("conv2d_NCHWc_update"):
                        v_n = T.axis.spatial(T.int64(1), n_2 + n_3)
                        v_oc_chunk = T.axis.spatial(T.int64(12), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused // T.int64(28) * T.int64(2) + oc_chunk_2 * T.int64(2) + oc_chunk_3)
                        v_oh = T.axis.spatial(T.int64(14), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused % T.int64(28) // T.int64(14) * T.int64(7) + oh_2 * T.int64(7) + oh_3)
                        v_ow = T.axis.spatial(T.int64(14), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused % T.int64(14) + ow_2 + ow_3)
                        v_oc_block = T.axis.spatial(T.int64(4), oc_block_2 * T.int64(4) + oc_block_3_fused)
                        v_ic = T.axis.reduce(T.int64(192), ic_0 * T.int64(12) + ic_1)
                        v_kh = T.axis.reduce(T.int64(3), kh_0 + kh_1)
                        v_kw = T.axis.reduce(T.int64(3), kw_0 + kw_1)
                        T.reads(conv2d_NCHWc_global[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block], data_pad[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)], p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block])
                        T.writes(conv2d_NCHWc_global[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                        T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                        conv2d_NCHWc_global[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = conv2d_NCHWc_global[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] + data_pad[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)] * p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block]
            for ax0, ax1, ax2 in T.grid(T.int64(1), T.int64(2), T.int64(7)):
                for ax3_ax4_fused in T.vectorized(T.int64(4)):
                    with T.block("conv2d_NCHWc_global"):
                        v0 = T.axis.spatial(T.int64(1), ax0)
                        v1 = T.axis.spatial(T.int64(12), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused // T.int64(28) * T.int64(2) + ax1)
                        v2 = T.axis.spatial(T.int64(14), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused % T.int64(28) // T.int64(14) * T.int64(7) + ax2)
                        v3 = T.axis.spatial(T.int64(14), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused % T.int64(14))
                        v4 = T.axis.spatial(T.int64(4), ax3_ax4_fused)
                        T.reads(conv2d_NCHWc_global[v0, v1, v2, v3, v4])
                        T.writes(conv2d_NCHWc[v0, v1, v2, v3, v4])
                        conv2d_NCHWc[v0, v1, v2, v3, v4] = conv2d_NCHWc_global[v0, v1, v2, v3, v4]
b0 = sch.get_block(name="data_pad", func_name="main")
b1 = sch.get_block(name="conv2d_NCHWc", func_name="main")
b2 = sch.get_block(name="root", func_name="main")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSRSRS")
l3, l4, l5, l6, l7, l8, l9, l10 = sch.get_loops(block=b1)
v11, v12, v13, v14 = sch.sample_perfect_tile(loop=l3, n=4, max_innermost_factor=64, decision=[1, 1, 1, 1])
l15, l16, l17, l18 = sch.split(loop=l3, factors=[v11, v12, v13, v14], preserve_unit_iters=True)
v19, v20, v21, v22 = sch.sample_perfect_tile(loop=l4, n=4, max_innermost_factor=64, decision=[1, 6, 1, 2])
l23, l24, l25, l26 = sch.split(loop=l4, factors=[v19, v20, v21, v22], preserve_unit_iters=True)
v27, v28, v29, v30 = sch.sample_perfect_tile(loop=l5, n=4, max_innermost_factor=64, decision=[1, 2, 1, 7])
l31, l32, l33, l34 = sch.split(loop=l5, factors=[v27, v28, v29, v30], preserve_unit_iters=True)
v35, v36, v37, v38 = sch.sample_perfect_tile(loop=l6, n=4, max_innermost_factor=64, decision=[1, 14, 1, 1])
l39, l40, l41, l42 = sch.split(loop=l6, factors=[v35, v36, v37, v38], preserve_unit_iters=True)
v43, v44, v45, v46 = sch.sample_perfect_tile(loop=l7, n=4, max_innermost_factor=64, decision=[1, 1, 1, 4])
l47, l48, l49, l50 = sch.split(loop=l7, factors=[v43, v44, v45, v46], preserve_unit_iters=True)
v51, v52 = sch.sample_perfect_tile(loop=l8, n=2, max_innermost_factor=64, decision=[16, 12])
l53, l54 = sch.split(loop=l8, factors=[v51, v52], preserve_unit_iters=True)
v55, v56 = sch.sample_perfect_tile(loop=l9, n=2, max_innermost_factor=64, decision=[3, 1])
l57, l58 = sch.split(loop=l9, factors=[v55, v56], preserve_unit_iters=True)
v59, v60 = sch.sample_perfect_tile(loop=l10, n=2, max_innermost_factor=64, decision=[3, 1])
l61, l62 = sch.split(loop=l10, factors=[v59, v60], preserve_unit_iters=True)
sch.reorder(l15, l23, l31, l39, l47, l16, l24, l32, l40, l48, l53, l57, l61, l17, l25, l33, l41, l49, l54, l58, l62, l18, l26, l34, l42, l50)
b63 = sch.cache_write(block=b1, write_buffer_index=0, storage_scope="global")
sch.reverse_compute_at(block=b63, loop=l48, preserve_unit_loops=True, index=-1)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.vectorize", ann_val=64)
v64 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.unroll_explicit", ann_val=v64)
l65 = sch.sample_compute_location(block=b0, decision=-1)
sch.compute_at(block=b0, loop=l65, preserve_unit_loops=True, index=-1)
sch.enter_postproc()
b66 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b66, ann_key="meta_schedule.parallel")
sch.unannotate(block_or_loop=b66, ann_key="meta_schedule.vectorize")
sch.unannotate(block_or_loop=b66, ann_key="meta_schedule.unroll_explicit")
b67, b68, b69 = sch.get_child_blocks(b66)
l70, l71, l72, l73, l74 = sch.get_loops(block=b67)
l75 = sch.fuse(l70, l71, l72, preserve_unit_iters=True)
sch.parallel(loop=l75)
l76 = sch.fuse(l73, l74, preserve_unit_iters=True)
sch.vectorize(loop=l76)
l77, l78, l79, l80, l81, l82, l83, l84, l85, l86, l87, l88, l89, l90, l91, l92, l93, l94, l95, l96, l97, l98, l99, l100, l101, l102 = sch.get_loops(block=b68)
l103 = sch.fuse(l77, l78, l79, l80, l81, l82, l83, l84, l85, l86, preserve_unit_iters=True)
sch.parallel(loop=l103)
l104 = sch.fuse(l102, preserve_unit_iters=True)
sch.vectorize(loop=l104)
sch.annotate(block_or_loop=l103, ann_key="pragma_auto_unroll_max_step", ann_val=512)
sch.annotate(block_or_loop=l103, ann_key="pragma_unroll_explicit", ann_val=1)
l105, l106, l107, l108, l109, l110 = sch.get_loops(block=b69)
l111 = sch.fuse(l109, l110, preserve_unit_iters=True)
sch.vectorize(loop=l111)
b112 = sch.get_block(name="conv2d_NCHWc", func_name="main")
l113, l114, l115, l116, l117, l118, l119, l120, l121, l122, l123, l124, l125, l126, l127, l128, l129 = sch.get_loops(block=b112)
b130 = sch.decompose_reduction(block=b112, loop=l114)
2024-04-29 05:55:32 [INFO] [task_scheduler.cc:131] [Task #61: fused_nn_contrib_conv2d_NCHWc_1] Trial #201: GFLOPs: 145.4482. Time: 223.5439 us. Best GFLOPs: 220.6736
2024-04-29 05:55:32 [INFO] [task_scheduler.cc:131] [Task #61: fused_nn_contrib_conv2d_NCHWc_1] Trial #202: GFLOPs: 72.4821. Time: 448.5803 us. Best GFLOPs: 220.6736
2024-04-29 05:55:32 [INFO] [task_scheduler.cc:131] [Task #61: fused_nn_contrib_conv2d_NCHWc_1] Trial #203: GFLOPs: 133.6239. Time: 243.3252 us. Best GFLOPs: 220.6736
2024-04-29 05:55:32 [INFO] [task_scheduler.cc:131] [Task #61: fused_nn_contrib_conv2d_NCHWc_1] Trial #204: GFLOPs: 193.3907. Time: 168.1262 us. Best GFLOPs: 220.6736
2024-04-29 05:55:32 [INFO] [task_scheduler.cc:131] [Task #61: fused_nn_contrib_conv2d_NCHWc_1] Trial #205: GFLOPs: 134.4419. Time: 241.8446 us. Best GFLOPs: 220.6736
2024-04-29 05:55:32 [INFO] [task_scheduler.cc:131] [Task #61: fused_nn_contrib_conv2d_NCHWc_1] Trial #206: GFLOPs: 103.2936. Time: 314.7733 us. Best GFLOPs: 220.6736
2024-04-29 05:55:32 [INFO] [task_scheduler.cc:131] [Task #61: fused_nn_contrib_conv2d_NCHWc_1] Trial #207: GFLOPs: 128.6006. Time: 252.8296 us. Best GFLOPs: 220.6736
2024-04-29 05:55:32 [INFO] [task_scheduler.cc:131] [Task #61: fused_nn_contrib_conv2d_NCHWc_1] Trial #208: GFLOPs: 156.9295. Time: 207.1889 us. Best GFLOPs: 220.6736
2024-04-29 05:55:32 [INFO] [task_scheduler.cc:131] [Task #61: fused_nn_contrib_conv2d_NCHWc_1] Trial #209: GFLOPs: 166.2487. Time: 195.5748 us. Best GFLOPs: 220.6736
2024-04-29 05:55:32 [INFO] [task_scheduler.cc:131] [Task #61: fused_nn_contrib_conv2d_NCHWc_1] Trial #210: GFLOPs: 158.9431. Time: 204.5640 us. Best GFLOPs: 220.6736
2024-04-29 05:55:32 [INFO] [task_scheduler.cc:131] [Task #61: fused_nn_contrib_conv2d_NCHWc_1] Trial #211: GFLOPs: 101.0088. Time: 321.8931 us. Best GFLOPs: 220.6736
2024-04-29 05:55:32 [INFO] [task_scheduler.cc:131] [Task #61: fused_nn_contrib_conv2d_NCHWc_1] Trial #212: GFLOPs: 124.0037. Time: 262.2022 us. Best GFLOPs: 220.6736
2024-04-29 05:55:32 [INFO] [task_scheduler.cc:131] [Task #61: fused_nn_contrib_conv2d_NCHWc_1] Trial #213: GFLOPs: 142.1210. Time: 228.7773 us. Best GFLOPs: 220.6736
2024-04-29 05:55:32 [INFO] [task_scheduler.cc:131] [Task #61: fused_nn_contrib_conv2d_NCHWc_1] Trial #214: GFLOPs: 125.9412. Time: 258.1684 us. Best GFLOPs: 220.6736
2024-04-29 05:55:32 [INFO] [task_scheduler.cc:131] [Task #61: fused_nn_contrib_conv2d_NCHWc_1] Trial #215: GFLOPs: 154.1512. Time: 210.9231 us. Best GFLOPs: 220.6736
2024-04-29 05:55:32 [INFO] [task_scheduler.cc:131] [Task #61: fused_nn_contrib_conv2d_NCHWc_1] Trial #216: GFLOPs: 171.5767. Time: 189.5015 us. Best GFLOPs: 220.6736
2024-04-29 05:55:32 [INFO] [task_scheduler.cc:131] [Task #61: fused_nn_contrib_conv2d_NCHWc_1] Trial #217: GFLOPs: 135.0255. Time: 240.7992 us. Best GFLOPs: 220.6736
2024-04-29 05:55:32 [INFO] [task_scheduler.cc:131] [Task #61: fused_nn_contrib_conv2d_NCHWc_1] Trial #218: GFLOPs: 168.7761. Time: 192.6460 us. Best GFLOPs: 220.6736
2024-04-29 05:55:32 [INFO] [task_scheduler.cc:131] [Task #61: fused_nn_contrib_conv2d_NCHWc_1] Trial #219: GFLOPs: 201.2625. Time: 161.5505 us. Best GFLOPs: 220.6736
2024-04-29 05:55:32 [INFO] [task_scheduler.cc:131] [Task #61: fused_nn_contrib_conv2d_NCHWc_1] Trial #220: GFLOPs: 172.5882. Time: 188.3909 us. Best GFLOPs: 220.6736
2024-04-29 05:55:32 [INFO] [task_scheduler.cc:131] [Task #61: fused_nn_contrib_conv2d_NCHWc_1] Trial #221: GFLOPs: 164.0819. Time: 198.1574 us. Best GFLOPs: 220.6736
2024-04-29 05:55:32 [INFO] [task_scheduler.cc:131] [Task #61: fused_nn_contrib_conv2d_NCHWc_1] Trial #222: GFLOPs: 184.9551. Time: 175.7943 us. Best GFLOPs: 220.6736
2024-04-29 05:55:32 [INFO] [task_scheduler.cc:131] [Task #61: fused_nn_contrib_conv2d_NCHWc_1] Trial #223: GFLOPs: 181.1839. Time: 179.4533 us. Best GFLOPs: 220.6736
2024-04-29 05:55:32 [INFO] [task_scheduler.cc:131] [Task #61: fused_nn_contrib_conv2d_NCHWc_1] Trial #224: GFLOPs: 125.1535. Time: 259.7934 us. Best GFLOPs: 220.6736
2024-04-29 05:55:32 [INFO] [task_scheduler.cc:131] [Task #61: fused_nn_contrib_conv2d_NCHWc_1] Trial #225: GFLOPs: 108.2221. Time: 300.4382 us. Best GFLOPs: 220.6736
2024-04-29 05:55:32 [INFO] [task_scheduler.cc:131] [Task #61: fused_nn_contrib_conv2d_NCHWc_1] Trial #226: GFLOPs: 161.8814. Time: 200.8511 us. Best GFLOPs: 220.6736
2024-04-29 05:55:32 [INFO] [task_scheduler.cc:131] [Task #61: fused_nn_contrib_conv2d_NCHWc_1] Trial #227: GFLOPs: 177.7885. Time: 182.8805 us. Best GFLOPs: 220.6736
2024-04-29 05:55:32 [INFO] [task_scheduler.cc:131] [Task #61: fused_nn_contrib_conv2d_NCHWc_1] Trial #228: GFLOPs: 184.5623. Time: 176.1684 us. Best GFLOPs: 220.6736
2024-04-29 05:55:32 [INFO] [task_scheduler.cc:131] [Task #61: fused_nn_contrib_conv2d_NCHWc_1] Trial #229: GFLOPs: 186.4290. Time: 174.4045 us. Best GFLOPs: 220.6736
2024-04-29 05:55:32 [INFO] [task_scheduler.cc:131] [Task #61: fused_nn_contrib_conv2d_NCHWc_1] Trial #230: GFLOPs: 163.0255. Time: 199.4415 us. Best GFLOPs: 220.6736
2024-04-29 05:55:32 [INFO] [task_scheduler.cc:131] [Task #61: fused_nn_contrib_conv2d_NCHWc_1] Trial #231: GFLOPs: 194.9930. Time: 166.7447 us. Best GFLOPs: 220.6736
2024-04-29 05:55:32 [INFO] [task_scheduler.cc:131] [Task #61: fused_nn_contrib_conv2d_NCHWc_1] Trial #232: GFLOPs: 53.7038. Time: 605.4328 us. Best GFLOPs: 220.6736
2024-04-29 05:55:32 [INFO] [task_scheduler.cc:131] [Task #61: fused_nn_contrib_conv2d_NCHWc_1] Trial #233: GFLOPs: 91.6076. Time: 354.9275 us. Best GFLOPs: 220.6736
2024-04-29 05:55:32 [INFO] [task_scheduler.cc:131] [Task #61: fused_nn_contrib_conv2d_NCHWc_1] Trial #234: GFLOPs: 206.9519. Time: 157.1092 us. Best GFLOPs: 220.6736
2024-04-29 05:55:32 [INFO] [task_scheduler.cc:131] [Task #61: fused_nn_contrib_conv2d_NCHWc_1] Trial #235: GFLOPs: 168.0780. Time: 193.4462 us. Best GFLOPs: 220.6736
2024-04-29 05:55:32 [INFO] [task_scheduler.cc:131] [Task #61: fused_nn_contrib_conv2d_NCHWc_1] Trial #236: GFLOPs: 150.3821. Time: 216.2096 us. Best GFLOPs: 220.6736
2024-04-29 05:55:32 [INFO] [task_scheduler.cc:131] [Task #61: fused_nn_contrib_conv2d_NCHWc_1] Trial #237: GFLOPs: 162.8308. Time: 199.6800 us. Best GFLOPs: 220.6736
2024-04-29 05:55:32 [INFO] [task_scheduler.cc:131] [Task #61: fused_nn_contrib_conv2d_NCHWc_1] Trial #238: GFLOPs: 97.1642. Time: 334.6299 us. Best GFLOPs: 220.6736
2024-04-29 05:55:32 [INFO] [task_scheduler.cc:131] [Task #61: fused_nn_contrib_conv2d_NCHWc_1] Trial #239: GFLOPs: 98.1348. Time: 331.3201 us. Best GFLOPs: 220.6736
2024-04-29 05:55:32 [INFO] [task_scheduler.cc:131] [Task #61: fused_nn_contrib_conv2d_NCHWc_1] Trial #240: GFLOPs: 76.8387. Time: 423.1470 us. Best GFLOPs: 220.6736
2024-04-29 05:55:32 [INFO] [task_scheduler.cc:131] [Task #61: fused_nn_contrib_conv2d_NCHWc_1] Trial #241: GFLOPs: 71.2906. Time: 456.0774 us. Best GFLOPs: 220.6736
2024-04-29 05:55:32 [INFO] [task_scheduler.cc:131] [Task #61: fused_nn_contrib_conv2d_NCHWc_1] Trial #242: GFLOPs: 140.1365. Time: 232.0170 us. Best GFLOPs: 220.6736
2024-04-29 05:55:32 [INFO] [task_scheduler.cc:131] [Task #61: fused_nn_contrib_conv2d_NCHWc_1] Trial #243: GFLOPs: 181.2909. Time: 179.3474 us. Best GFLOPs: 220.6736
2024-04-29 05:55:32 [INFO] [task_scheduler.cc:121] [Task #61: fused_nn_contrib_conv2d_NCHWc_1] Trial #244: Error in building:
LocalBuilder: Timeout, killed after 30.0 seconds
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(48), T.int64(14), T.int64(14), T.int64(4)), "float32"), p1: T.Buffer((T.int64(12), T.int64(48), T.int64(3), T.int64(3), T.int64(4), T.int64(4)), "float32"), conv2d_NCHWc: T.Buffer((T.int64(1), T.int64(12), T.int64(14), T.int64(14), T.int64(4)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        data_pad = T.alloc_buffer((T.int64(1), T.int64(48), T.int64(16), T.int64(16), T.int64(4)))
        conv2d_NCHWc_global = T.alloc_buffer((T.int64(1), T.int64(12), T.int64(14), T.int64(14), T.int64(4)))
        for n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused_fused in T.parallel(T.int64(168), annotations={"pragma_auto_unroll_max_step": 512, "pragma_unroll_explicit": 1}):
            for n_2_init, oc_chunk_2_init, oh_2_init, ow_2_init, oc_block_2_init, n_3_init, oc_chunk_3_init, oh_3_init, ow_3_init in T.grid(T.int64(1), T.int64(2), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(7), T.int64(1)):
                for oc_block_3_fused_init in T.vectorized(T.int64(4)):
                    with T.block("conv2d_NCHWc_init"):
                        v_n = T.axis.spatial(T.int64(1), n_2_init + n_3_init)
                        v_oc_chunk = T.axis.spatial(T.int64(12), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused_fused % T.int64(42) // T.int64(7) * T.int64(2) + oc_chunk_2_init + oc_chunk_3_init)
                        v_oh = T.axis.spatial(T.int64(14), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused_fused // T.int64(84) * T.int64(7) + oh_2_init * T.int64(7) + oh_3_init)
                        v_ow = T.axis.spatial(T.int64(14), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused_fused % T.int64(84) // T.int64(42) * T.int64(7) + n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused_fused % T.int64(7) + ow_2_init + ow_3_init)
                        v_oc_block = T.axis.spatial(T.int64(4), oc_block_2_init * T.int64(4) + oc_block_3_fused_init)
                        T.reads()
                        T.writes(conv2d_NCHWc_global[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                        T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                        conv2d_NCHWc_global[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = T.float32(0)
            for ic_0 in range(T.int64(8)):
                for ax0, ax1, ax2 in T.grid(T.int64(1), T.int64(6), T.int64(9)):
                    for ax3_ax4_fused in T.vectorized(T.int64(12)):
                        with T.block("data_pad"):
                            v_i0 = T.axis.spatial(T.int64(1), ax0)
                            v_i1 = T.axis.spatial(T.int64(48), ic_0 * T.int64(6) + ax1)
                            v_i2 = T.axis.spatial(T.int64(16), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused_fused // T.int64(84) * T.int64(7) + ax2)
                            v_i3 = T.axis.spatial(T.int64(16), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused_fused % T.int64(84) // T.int64(42) * T.int64(7) + n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused_fused % T.int64(7) + ax3_ax4_fused // T.int64(4))
                            v_i4 = T.axis.spatial(T.int64(4), ax3_ax4_fused % T.int64(4))
                            T.reads(p0[v_i0, v_i1, v_i2 - T.int64(1), v_i3 - T.int64(1), v_i4])
                            T.writes(data_pad[v_i0, v_i1, v_i2, v_i3, v_i4])
                            data_pad[v_i0, v_i1, v_i2, v_i3, v_i4] = T.if_then_else(T.int64(1) <= v_i2 and v_i2 < T.int64(15) and T.int64(1) <= v_i3 and v_i3 < T.int64(15), p0[v_i0, v_i1, v_i2 - T.int64(1), v_i3 - T.int64(1), v_i4], T.float32(0))
                for kh_0, kw_0, n_2, oc_chunk_2, oh_2, ow_2, oc_block_2, ic_1, kh_1, kw_1, n_3, oc_chunk_3, oh_3, ow_3 in T.grid(T.int64(1), T.int64(3), T.int64(1), T.int64(2), T.int64(1), T.int64(1), T.int64(1), T.int64(24), T.int64(3), T.int64(1), T.int64(1), T.int64(1), T.int64(7), T.int64(1)):
                    for oc_block_3_fused in T.vectorized(T.int64(4)):
                        with T.block("conv2d_NCHWc_update"):
                            v_n = T.axis.spatial(T.int64(1), n_2 + n_3)
                            v_oc_chunk = T.axis.spatial(T.int64(12), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused_fused % T.int64(42) // T.int64(7) * T.int64(2) + oc_chunk_2 + oc_chunk_3)
                            v_oh = T.axis.spatial(T.int64(14), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused_fused // T.int64(84) * T.int64(7) + oh_2 * T.int64(7) + oh_3)
                            v_ow = T.axis.spatial(T.int64(14), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused_fused % T.int64(84) // T.int64(42) * T.int64(7) + n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused_fused % T.int64(7) + ow_2 + ow_3)
                            v_oc_block = T.axis.spatial(T.int64(4), oc_block_2 * T.int64(4) + oc_block_3_fused)
                            v_ic = T.axis.reduce(T.int64(192), ic_0 * T.int64(24) + ic_1)
                            v_kh = T.axis.reduce(T.int64(3), kh_0 * T.int64(3) + kh_1)
                            v_kw = T.axis.reduce(T.int64(3), kw_0 + kw_1)
                            T.reads(conv2d_NCHWc_global[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block], data_pad[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)], p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block])
                            T.writes(conv2d_NCHWc_global[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                            T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                            conv2d_NCHWc_global[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = conv2d_NCHWc_global[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] + data_pad[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)] * p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block]
            for ax0, ax1, ax2 in T.grid(T.int64(1), T.int64(2), T.int64(7)):
                for ax3_ax4_fused in T.vectorized(T.int64(4)):
                    with T.block("conv2d_NCHWc_global"):
                        v0 = T.axis.spatial(T.int64(1), ax0)
                        v1 = T.axis.spatial(T.int64(12), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused_fused % T.int64(42) // T.int64(7) * T.int64(2) + ax1)
                        v2 = T.axis.spatial(T.int64(14), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused_fused // T.int64(84) * T.int64(7) + ax2)
                        v3 = T.axis.spatial(T.int64(14), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused_fused % T.int64(84) // T.int64(42) * T.int64(7) + n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused_fused % T.int64(7))
                        v4 = T.axis.spatial(T.int64(4), ax3_ax4_fused)
                        T.reads(conv2d_NCHWc_global[v0, v1, v2, v3, v4])
                        T.writes(conv2d_NCHWc[v0, v1, v2, v3, v4])
                        conv2d_NCHWc[v0, v1, v2, v3, v4] = conv2d_NCHWc_global[v0, v1, v2, v3, v4]
b0 = sch.get_block(name="data_pad", func_name="main")
b1 = sch.get_block(name="conv2d_NCHWc", func_name="main")
b2 = sch.get_block(name="root", func_name="main")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSRSRS")
l3, l4, l5, l6, l7, l8, l9, l10 = sch.get_loops(block=b1)
v11, v12, v13, v14 = sch.sample_perfect_tile(loop=l3, n=4, max_innermost_factor=64, decision=[1, 1, 1, 1])
l15, l16, l17, l18 = sch.split(loop=l3, factors=[v11, v12, v13, v14], preserve_unit_iters=True)
v19, v20, v21, v22 = sch.sample_perfect_tile(loop=l4, n=4, max_innermost_factor=64, decision=[1, 6, 2, 1])
l23, l24, l25, l26 = sch.split(loop=l4, factors=[v19, v20, v21, v22], preserve_unit_iters=True)
v27, v28, v29, v30 = sch.sample_perfect_tile(loop=l5, n=4, max_innermost_factor=64, decision=[2, 1, 1, 7])
l31, l32, l33, l34 = sch.split(loop=l5, factors=[v27, v28, v29, v30], preserve_unit_iters=True)
v35, v36, v37, v38 = sch.sample_perfect_tile(loop=l6, n=4, max_innermost_factor=64, decision=[2, 7, 1, 1])
l39, l40, l41, l42 = sch.split(loop=l6, factors=[v35, v36, v37, v38], preserve_unit_iters=True)
v43, v44, v45, v46 = sch.sample_perfect_tile(loop=l7, n=4, max_innermost_factor=64, decision=[1, 1, 1, 4])
l47, l48, l49, l50 = sch.split(loop=l7, factors=[v43, v44, v45, v46], preserve_unit_iters=True)
v51, v52 = sch.sample_perfect_tile(loop=l8, n=2, max_innermost_factor=64, decision=[8, 24])
l53, l54 = sch.split(loop=l8, factors=[v51, v52], preserve_unit_iters=True)
v55, v56 = sch.sample_perfect_tile(loop=l9, n=2, max_innermost_factor=64, decision=[1, 3])
l57, l58 = sch.split(loop=l9, factors=[v55, v56], preserve_unit_iters=True)
v59, v60 = sch.sample_perfect_tile(loop=l10, n=2, max_innermost_factor=64, decision=[3, 1])
l61, l62 = sch.split(loop=l10, factors=[v59, v60], preserve_unit_iters=True)
sch.reorder(l15, l23, l31, l39, l47, l16, l24, l32, l40, l48, l53, l57, l61, l17, l25, l33, l41, l49, l54, l58, l62, l18, l26, l34, l42, l50)
b63 = sch.cache_write(block=b1, write_buffer_index=0, storage_scope="global")
sch.reverse_compute_at(block=b63, loop=l48, preserve_unit_loops=True, index=-1)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.vectorize", ann_val=64)
v64 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.unroll_explicit", ann_val=v64)
l65 = sch.sample_compute_location(block=b0, decision=10)
sch.compute_at(block=b0, loop=l65, preserve_unit_loops=True, index=-1)
sch.enter_postproc()
b66 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b66, ann_key="meta_schedule.parallel")
sch.unannotate(block_or_loop=b66, ann_key="meta_schedule.vectorize")
sch.unannotate(block_or_loop=b66, ann_key="meta_schedule.unroll_explicit")
b67, b68, b69 = sch.get_child_blocks(b66)
l70, l71, l72, l73, l74, l75, l76, l77, l78, l79, l80, l81, l82, l83, l84, l85 = sch.get_loops(block=b67)
l86 = sch.fuse(l70, l71, l72, l73, l74, l75, l76, l77, l78, l79, preserve_unit_iters=True)
sch.parallel(loop=l86)
l87 = sch.fuse(l84, l85, preserve_unit_iters=True)
sch.vectorize(loop=l87)
l88, l89, l90, l91, l92, l93, l94, l95, l96, l97, l98, l99, l100, l101, l102, l103, l104 = sch.get_loops(block=b68)
l105 = sch.fuse(l88, preserve_unit_iters=True)
sch.parallel(loop=l105)
l106 = sch.fuse(l104, preserve_unit_iters=True)
sch.vectorize(loop=l106)
sch.annotate(block_or_loop=l105, ann_key="pragma_auto_unroll_max_step", ann_val=512)
sch.annotate(block_or_loop=l105, ann_key="pragma_unroll_explicit", ann_val=1)
l107, l108, l109, l110, l111, l112 = sch.get_loops(block=b69)
l113 = sch.fuse(l111, l112, preserve_unit_iters=True)
sch.vectorize(loop=l113)
b114 = sch.get_block(name="conv2d_NCHWc", func_name="main")
l115, l116, l117, l118, l119, l120, l121, l122, l123, l124, l125, l126, l127, l128, l129, l130, l131 = sch.get_loops(block=b114)
b132 = sch.decompose_reduction(block=b114, loop=l116)
2024-04-29 05:55:32 [INFO] [task_scheduler.cc:131] [Task #61: fused_nn_contrib_conv2d_NCHWc_1] Trial #245: GFLOPs: 81.9959. Time: 396.5327 us. Best GFLOPs: 220.6736
2024-04-29 05:55:32 [INFO] [task_scheduler.cc:131] [Task #61: fused_nn_contrib_conv2d_NCHWc_1] Trial #246: GFLOPs: 82.1762. Time: 395.6624 us. Best GFLOPs: 220.6736
2024-04-29 05:55:32 [INFO] [task_scheduler.cc:131] [Task #61: fused_nn_contrib_conv2d_NCHWc_1] Trial #247: GFLOPs: 87.1822. Time: 372.9437 us. Best GFLOPs: 220.6736
2024-04-29 05:55:32 [INFO] [task_scheduler.cc:131] [Task #61: fused_nn_contrib_conv2d_NCHWc_1] Trial #248: GFLOPs: 106.9098. Time: 304.1260 us. Best GFLOPs: 220.6736
2024-04-29 05:55:32 [INFO] [task_scheduler.cc:131] [Task #61: fused_nn_contrib_conv2d_NCHWc_1] Trial #249: GFLOPs: 104.8179. Time: 310.1954 us. Best GFLOPs: 220.6736
2024-04-29 05:55:32 [INFO] [task_scheduler.cc:131] [Task #61: fused_nn_contrib_conv2d_NCHWc_1] Trial #250: GFLOPs: 45.0631. Time: 721.5224 us. Best GFLOPs: 220.6736
2024-04-29 05:55:32 [INFO] [task_scheduler.cc:131] [Task #61: fused_nn_contrib_conv2d_NCHWc_1] Trial #251: GFLOPs: 99.1516. Time: 327.9226 us. Best GFLOPs: 220.6736
2024-04-29 05:55:32 [INFO] [task_scheduler.cc:131] [Task #61: fused_nn_contrib_conv2d_NCHWc_1] Trial #252: GFLOPs: 98.6500. Time: 329.5898 us. Best GFLOPs: 220.6736
2024-04-29 05:55:32 [INFO] [task_scheduler.cc:131] [Task #61: fused_nn_contrib_conv2d_NCHWc_1] Trial #253: GFLOPs: 163.4192. Time: 198.9610 us. Best GFLOPs: 220.6736
2024-04-29 05:55:32 [INFO] [task_scheduler.cc:131] [Task #61: fused_nn_contrib_conv2d_NCHWc_1] Trial #254: GFLOPs: 58.6312. Time: 554.5519 us. Best GFLOPs: 220.6736
2024-04-29 05:55:32 [INFO] [task_scheduler.cc:131] [Task #61: fused_nn_contrib_conv2d_NCHWc_1] Trial #255: GFLOPs: 23.4603. Time: 1385.9201 us. Best GFLOPs: 220.6736
2024-04-29 05:55:32 [INFO] [task_scheduler.cc:131] [Task #61: fused_nn_contrib_conv2d_NCHWc_1] Trial #256: GFLOPs: 64.1513. Time: 506.8341 us. Best GFLOPs: 220.6736
2024-04-29 05:57:43 [INFO] [evolutionary_search.cc:713] Generating candidates......
2024-04-29 05:57:44 [INFO] [evolutionary_search.cc:715] Picked top 102 candidate(s) from database
2024-04-29 05:57:48 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0xc83fed8)]: 10 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0xc5901d8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x15321f68)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x1063f078)]: 0 failure(s)
2024-04-29 05:57:48 [INFO] [evolutionary_search.cc:723] Sampled 400 candidate(s)
2024-04-29 05:57:59 [INFO] [evolutionary_search.cc:621] Evolve iter #0 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0xc83fed8)]: 2 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0xc5901d8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x15321f68)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x1063f078)]: 0 failure(s)
2024-04-29 05:58:10 [INFO] [evolutionary_search.cc:621] Evolve iter #1 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0xc83fed8)]: 2 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0xc5901d8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x15321f68)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x1063f078)]: 0 failure(s)
2024-04-29 05:58:21 [INFO] [evolutionary_search.cc:621] Evolve iter #2 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0xc83fed8)]: 1 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0xc5901d8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x15321f68)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x1063f078)]: 0 failure(s)
2024-04-29 05:58:33 [INFO] [evolutionary_search.cc:621] Evolve iter #3 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0xc83fed8)]: 4 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0xc5901d8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x15321f68)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x1063f078)]: 0 failure(s)
2024-04-29 05:58:39 [INFO] [evolutionary_search.cc:649] Scores of the best 64 candidates:
[1 : 16]:	0.9629  0.9629  0.8457  0.8457  0.8282  0.8117  0.8058  0.8052  0.7854  0.7854  0.7818  0.7818  0.7818  0.7785  0.7780  0.7780
[17 : 32]:	0.7780  0.7780  0.7771  0.7747  0.7747  0.7747  0.7747  0.7747  0.7747  0.7747  0.7747  0.7747  0.7747  0.7747  0.7747  0.7747
[33 : 48]:	0.7747  0.7747  0.7747  0.7747  0.7745  0.7733  0.7733  0.7733  0.7733  0.7733  0.7733  0.7733  0.7733  0.7729  0.7660  0.7636
[49 : 64]:	0.7630  0.7615  0.7604  0.7604  0.7604  0.7604  0.7581  0.7556  0.7548  0.7540  0.7531  0.7531  0.7527  0.7525  0.7525  0.7525
2024-04-29 05:58:39 [INFO] [evolutionary_search.cc:727] Got 64 candidate(s) with evolutionary search
2024-04-29 05:58:39 [INFO] [evolutionary_search.cc:730] Sending 64 candidates(s) for measurement
2024-04-29 06:00:12 [INFO] [task_scheduler.cc:131] [Task #61: fused_nn_contrib_conv2d_NCHWc_1] Trial #257: GFLOPs: 108.1380. Time: 300.6718 us. Best GFLOPs: 220.6736
2024-04-29 06:00:12 [INFO] [task_scheduler.cc:131] [Task #61: fused_nn_contrib_conv2d_NCHWc_1] Trial #258: GFLOPs: 62.0275. Time: 524.1875 us. Best GFLOPs: 220.6736
2024-04-29 06:00:12 [INFO] [task_scheduler.cc:131] [Task #61: fused_nn_contrib_conv2d_NCHWc_1] Trial #259: GFLOPs: 78.7707. Time: 412.7682 us. Best GFLOPs: 220.6736
2024-04-29 06:00:12 [INFO] [task_scheduler.cc:131] [Task #61: fused_nn_contrib_conv2d_NCHWc_1] Trial #260: GFLOPs: 73.1646. Time: 444.3961 us. Best GFLOPs: 220.6736
2024-04-29 06:00:12 [INFO] [task_scheduler.cc:131] [Task #61: fused_nn_contrib_conv2d_NCHWc_1] Trial #261: GFLOPs: 207.7080. Time: 156.5373 us. Best GFLOPs: 220.6736
2024-04-29 06:00:12 [INFO] [task_scheduler.cc:131] [Task #61: fused_nn_contrib_conv2d_NCHWc_1] Trial #262: GFLOPs: 131.2145. Time: 247.7931 us. Best GFLOPs: 220.6736
2024-04-29 06:00:12 [INFO] [task_scheduler.cc:131] [Task #61: fused_nn_contrib_conv2d_NCHWc_1] Trial #263: GFLOPs: 156.9163. Time: 207.2063 us. Best GFLOPs: 220.6736
2024-04-29 06:00:12 [INFO] [task_scheduler.cc:131] [Task #61: fused_nn_contrib_conv2d_NCHWc_1] Trial #264: GFLOPs: 79.6974. Time: 407.9689 us. Best GFLOPs: 220.6736
2024-04-29 06:00:12 [INFO] [task_scheduler.cc:131] [Task #61: fused_nn_contrib_conv2d_NCHWc_1] Trial #265: GFLOPs: 137.6833. Time: 236.1510 us. Best GFLOPs: 220.6736
2024-04-29 06:00:12 [INFO] [task_scheduler.cc:131] [Task #61: fused_nn_contrib_conv2d_NCHWc_1] Trial #266: GFLOPs: 158.2450. Time: 205.4665 us. Best GFLOPs: 220.6736
2024-04-29 06:00:12 [INFO] [task_scheduler.cc:131] [Task #61: fused_nn_contrib_conv2d_NCHWc_1] Trial #267: GFLOPs: 146.2190. Time: 222.3653 us. Best GFLOPs: 220.6736
2024-04-29 06:00:12 [INFO] [task_scheduler.cc:131] [Task #61: fused_nn_contrib_conv2d_NCHWc_1] Trial #268: GFLOPs: 157.5961. Time: 206.3125 us. Best GFLOPs: 220.6736
2024-04-29 06:00:12 [INFO] [task_scheduler.cc:131] [Task #61: fused_nn_contrib_conv2d_NCHWc_1] Trial #269: GFLOPs: 155.3421. Time: 209.3061 us. Best GFLOPs: 220.6736
2024-04-29 06:00:12 [INFO] [task_scheduler.cc:131] [Task #61: fused_nn_contrib_conv2d_NCHWc_1] Trial #270: GFLOPs: 145.8524. Time: 222.9244 us. Best GFLOPs: 220.6736
2024-04-29 06:00:12 [INFO] [task_scheduler.cc:131] [Task #61: fused_nn_contrib_conv2d_NCHWc_1] Trial #271: GFLOPs: 130.0452. Time: 250.0212 us. Best GFLOPs: 220.6736
2024-04-29 06:00:12 [INFO] [task_scheduler.cc:131] [Task #61: fused_nn_contrib_conv2d_NCHWc_1] Trial #272: GFLOPs: 137.3400. Time: 236.7413 us. Best GFLOPs: 220.6736
2024-04-29 06:00:12 [INFO] [task_scheduler.cc:131] [Task #61: fused_nn_contrib_conv2d_NCHWc_1] Trial #273: GFLOPs: 160.3093. Time: 202.8208 us. Best GFLOPs: 220.6736
2024-04-29 06:00:12 [INFO] [task_scheduler.cc:131] [Task #61: fused_nn_contrib_conv2d_NCHWc_1] Trial #274: GFLOPs: 123.5141. Time: 263.2417 us. Best GFLOPs: 220.6736
2024-04-29 06:00:12 [INFO] [task_scheduler.cc:131] [Task #61: fused_nn_contrib_conv2d_NCHWc_1] Trial #275: GFLOPs: 156.9444. Time: 207.1692 us. Best GFLOPs: 220.6736
2024-04-29 06:00:12 [INFO] [task_scheduler.cc:121] [Task #61: fused_nn_contrib_conv2d_NCHWc_1] Trial #276: Error in building:
LocalBuilder: Timeout, killed after 30.0 seconds
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(48), T.int64(14), T.int64(14), T.int64(4)), "float32"), p1: T.Buffer((T.int64(12), T.int64(48), T.int64(3), T.int64(3), T.int64(4), T.int64(4)), "float32"), conv2d_NCHWc: T.Buffer((T.int64(1), T.int64(12), T.int64(14), T.int64(14), T.int64(4)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        data_pad = T.alloc_buffer((T.int64(1), T.int64(48), T.int64(16), T.int64(16), T.int64(4)))
        conv2d_NCHWc_global = T.alloc_buffer((T.int64(1), T.int64(12), T.int64(14), T.int64(14), T.int64(4)))
        for i0_i1_i2_fused in T.parallel(T.int64(768)):
            for i3_i4_fused in T.vectorized(T.int64(64)):
                with T.block("data_pad"):
                    v_i0 = T.axis.spatial(T.int64(1), T.int64(0))
                    v_i1 = T.axis.spatial(T.int64(48), i0_i1_i2_fused // T.int64(16))
                    v_i2 = T.axis.spatial(T.int64(16), i0_i1_i2_fused % T.int64(16))
                    v_i3 = T.axis.spatial(T.int64(16), i3_i4_fused // T.int64(4))
                    v_i4 = T.axis.spatial(T.int64(4), i3_i4_fused % T.int64(4))
                    T.reads(p0[v_i0, v_i1, v_i2 - T.int64(1), v_i3 - T.int64(1), v_i4])
                    T.writes(data_pad[v_i0, v_i1, v_i2, v_i3, v_i4])
                    data_pad[v_i0, v_i1, v_i2, v_i3, v_i4] = T.if_then_else(T.int64(1) <= v_i2 and v_i2 < T.int64(15) and T.int64(1) <= v_i3 and v_i3 < T.int64(15), p0[v_i0, v_i1, v_i2 - T.int64(1), v_i3 - T.int64(1), v_i4], T.float32(0))
        for n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused in T.parallel(T.int64(168), annotations={"pragma_auto_unroll_max_step": 512, "pragma_unroll_explicit": 1}):
            for n_2_init, oc_chunk_2_init, oh_2_init, ow_2_init, oc_block_2_init, n_3_init, oc_chunk_3_init, oh_3_init, ow_3_init in T.grid(T.int64(1), T.int64(2), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(7), T.int64(1)):
                for oc_block_3_fused_init in T.vectorized(T.int64(4)):
                    with T.block("conv2d_NCHWc_init"):
                        v_n = T.axis.spatial(T.int64(1), n_2_init + n_3_init)
                        v_oc_chunk = T.axis.spatial(T.int64(12), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused // T.int64(56) * T.int64(4) + n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused % T.int64(2) * T.int64(2) + oc_chunk_2_init + oc_chunk_3_init)
                        v_oh = T.axis.spatial(T.int64(14), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused % T.int64(56) // T.int64(28) * T.int64(7) + oh_2_init * T.int64(7) + oh_3_init)
                        v_ow = T.axis.spatial(T.int64(14), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused % T.int64(28) // T.int64(2) + ow_2_init + ow_3_init)
                        v_oc_block = T.axis.spatial(T.int64(4), oc_block_2_init * T.int64(4) + oc_block_3_fused_init)
                        T.reads()
                        T.writes(conv2d_NCHWc_global[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                        T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                        conv2d_NCHWc_global[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = T.float32(0)
            for ic_0, kh_0, kw_0, n_2, oc_chunk_2, oh_2, ow_2, oc_block_2, ic_1, kh_1, kw_1, n_3, oc_chunk_3, oh_3, ow_3 in T.grid(T.int64(16), T.int64(3), T.int64(1), T.int64(1), T.int64(2), T.int64(1), T.int64(1), T.int64(1), T.int64(12), T.int64(1), T.int64(3), T.int64(1), T.int64(1), T.int64(7), T.int64(1)):
                for oc_block_3_fused in T.vectorized(T.int64(4)):
                    with T.block("conv2d_NCHWc_update"):
                        v_n = T.axis.spatial(T.int64(1), n_2 + n_3)
                        v_oc_chunk = T.axis.spatial(T.int64(12), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused // T.int64(56) * T.int64(4) + n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused % T.int64(2) * T.int64(2) + oc_chunk_2 + oc_chunk_3)
                        v_oh = T.axis.spatial(T.int64(14), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused % T.int64(56) // T.int64(28) * T.int64(7) + oh_2 * T.int64(7) + oh_3)
                        v_ow = T.axis.spatial(T.int64(14), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused % T.int64(28) // T.int64(2) + ow_2 + ow_3)
                        v_oc_block = T.axis.spatial(T.int64(4), oc_block_2 * T.int64(4) + oc_block_3_fused)
                        v_ic = T.axis.reduce(T.int64(192), ic_0 * T.int64(12) + ic_1)
                        v_kh = T.axis.reduce(T.int64(3), kh_0 + kh_1)
                        v_kw = T.axis.reduce(T.int64(3), kw_0 * T.int64(3) + kw_1)
                        T.reads(conv2d_NCHWc_global[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block], data_pad[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)], p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block])
                        T.writes(conv2d_NCHWc_global[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                        T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                        conv2d_NCHWc_global[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = conv2d_NCHWc_global[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] + data_pad[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)] * p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block]
            for ax0, ax1, ax2 in T.grid(T.int64(1), T.int64(2), T.int64(7)):
                for ax3_ax4_fused in T.vectorized(T.int64(4)):
                    with T.block("conv2d_NCHWc_global"):
                        v0 = T.axis.spatial(T.int64(1), ax0)
                        v1 = T.axis.spatial(T.int64(12), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused // T.int64(56) * T.int64(4) + n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused % T.int64(2) * T.int64(2) + ax1)
                        v2 = T.axis.spatial(T.int64(14), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused % T.int64(56) // T.int64(28) * T.int64(7) + ax2)
                        v3 = T.axis.spatial(T.int64(14), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused % T.int64(28) // T.int64(2))
                        v4 = T.axis.spatial(T.int64(4), ax3_ax4_fused)
                        T.reads(conv2d_NCHWc_global[v0, v1, v2, v3, v4])
                        T.writes(conv2d_NCHWc[v0, v1, v2, v3, v4])
                        conv2d_NCHWc[v0, v1, v2, v3, v4] = conv2d_NCHWc_global[v0, v1, v2, v3, v4]
b0 = sch.get_block(name="data_pad", func_name="main")
b1 = sch.get_block(name="conv2d_NCHWc", func_name="main")
b2 = sch.get_block(name="root", func_name="main")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSRSRS")
l3, l4, l5, l6, l7, l8, l9, l10 = sch.get_loops(block=b1)
v11, v12, v13, v14 = sch.sample_perfect_tile(loop=l3, n=4, max_innermost_factor=64, decision=[1, 1, 1, 1])
l15, l16, l17, l18 = sch.split(loop=l3, factors=[v11, v12, v13, v14], preserve_unit_iters=True)
v19, v20, v21, v22 = sch.sample_perfect_tile(loop=l4, n=4, max_innermost_factor=64, decision=[3, 2, 2, 1])
l23, l24, l25, l26 = sch.split(loop=l4, factors=[v19, v20, v21, v22], preserve_unit_iters=True)
v27, v28, v29, v30 = sch.sample_perfect_tile(loop=l5, n=4, max_innermost_factor=64, decision=[2, 1, 1, 7])
l31, l32, l33, l34 = sch.split(loop=l5, factors=[v27, v28, v29, v30], preserve_unit_iters=True)
v35, v36, v37, v38 = sch.sample_perfect_tile(loop=l6, n=4, max_innermost_factor=64, decision=[14, 1, 1, 1])
l39, l40, l41, l42 = sch.split(loop=l6, factors=[v35, v36, v37, v38], preserve_unit_iters=True)
v43, v44, v45, v46 = sch.sample_perfect_tile(loop=l7, n=4, max_innermost_factor=64, decision=[1, 1, 1, 4])
l47, l48, l49, l50 = sch.split(loop=l7, factors=[v43, v44, v45, v46], preserve_unit_iters=True)
v51, v52 = sch.sample_perfect_tile(loop=l8, n=2, max_innermost_factor=64, decision=[16, 12])
l53, l54 = sch.split(loop=l8, factors=[v51, v52], preserve_unit_iters=True)
v55, v56 = sch.sample_perfect_tile(loop=l9, n=2, max_innermost_factor=64, decision=[3, 1])
l57, l58 = sch.split(loop=l9, factors=[v55, v56], preserve_unit_iters=True)
v59, v60 = sch.sample_perfect_tile(loop=l10, n=2, max_innermost_factor=64, decision=[1, 3])
l61, l62 = sch.split(loop=l10, factors=[v59, v60], preserve_unit_iters=True)
sch.reorder(l15, l23, l31, l39, l47, l16, l24, l32, l40, l48, l53, l57, l61, l17, l25, l33, l41, l49, l54, l58, l62, l18, l26, l34, l42, l50)
b63 = sch.cache_write(block=b1, write_buffer_index=0, storage_scope="global")
sch.reverse_compute_at(block=b63, loop=l48, preserve_unit_loops=True, index=-1)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.vectorize", ann_val=64)
v64 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.unroll_explicit", ann_val=v64)
l65 = sch.sample_compute_location(block=b0, decision=-1)
sch.compute_at(block=b0, loop=l65, preserve_unit_loops=True, index=-1)
sch.enter_postproc()
b66 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b66, ann_key="meta_schedule.parallel")
sch.unannotate(block_or_loop=b66, ann_key="meta_schedule.vectorize")
sch.unannotate(block_or_loop=b66, ann_key="meta_schedule.unroll_explicit")
b67, b68, b69 = sch.get_child_blocks(b66)
l70, l71, l72, l73, l74 = sch.get_loops(block=b67)
l75 = sch.fuse(l70, l71, l72, preserve_unit_iters=True)
sch.parallel(loop=l75)
l76 = sch.fuse(l73, l74, preserve_unit_iters=True)
sch.vectorize(loop=l76)
l77, l78, l79, l80, l81, l82, l83, l84, l85, l86, l87, l88, l89, l90, l91, l92, l93, l94, l95, l96, l97, l98, l99, l100, l101, l102 = sch.get_loops(block=b68)
l103 = sch.fuse(l77, l78, l79, l80, l81, l82, l83, l84, l85, l86, preserve_unit_iters=True)
sch.parallel(loop=l103)
l104 = sch.fuse(l102, preserve_unit_iters=True)
sch.vectorize(loop=l104)
sch.annotate(block_or_loop=l103, ann_key="pragma_auto_unroll_max_step", ann_val=512)
sch.annotate(block_or_loop=l103, ann_key="pragma_unroll_explicit", ann_val=1)
l105, l106, l107, l108, l109, l110 = sch.get_loops(block=b69)
l111 = sch.fuse(l109, l110, preserve_unit_iters=True)
sch.vectorize(loop=l111)
b112 = sch.get_block(name="conv2d_NCHWc", func_name="main")
l113, l114, l115, l116, l117, l118, l119, l120, l121, l122, l123, l124, l125, l126, l127, l128, l129 = sch.get_loops(block=b112)
b130 = sch.decompose_reduction(block=b112, loop=l114)
2024-04-29 06:00:12 [INFO] [task_scheduler.cc:131] [Task #61: fused_nn_contrib_conv2d_NCHWc_1] Trial #277: GFLOPs: 142.0078. Time: 228.9595 us. Best GFLOPs: 220.6736
2024-04-29 06:00:12 [INFO] [task_scheduler.cc:131] [Task #61: fused_nn_contrib_conv2d_NCHWc_1] Trial #278: GFLOPs: 154.0196. Time: 211.1033 us. Best GFLOPs: 220.6736
2024-04-29 06:00:12 [INFO] [task_scheduler.cc:131] [Task #61: fused_nn_contrib_conv2d_NCHWc_1] Trial #279: GFLOPs: 171.8146. Time: 189.2392 us. Best GFLOPs: 220.6736
2024-04-29 06:00:12 [INFO] [task_scheduler.cc:131] [Task #61: fused_nn_contrib_conv2d_NCHWc_1] Trial #280: GFLOPs: 108.7969. Time: 298.8508 us. Best GFLOPs: 220.6736
2024-04-29 06:00:12 [INFO] [task_scheduler.cc:131] [Task #61: fused_nn_contrib_conv2d_NCHWc_1] Trial #281: GFLOPs: 154.4051. Time: 210.5762 us. Best GFLOPs: 220.6736
2024-04-29 06:00:12 [INFO] [task_scheduler.cc:131] [Task #61: fused_nn_contrib_conv2d_NCHWc_1] Trial #282: GFLOPs: 136.8925. Time: 237.5152 us. Best GFLOPs: 220.6736
2024-04-29 06:00:12 [INFO] [task_scheduler.cc:131] [Task #61: fused_nn_contrib_conv2d_NCHWc_1] Trial #283: GFLOPs: 105.5882. Time: 307.9325 us. Best GFLOPs: 220.6736
2024-04-29 06:00:12 [INFO] [task_scheduler.cc:131] [Task #61: fused_nn_contrib_conv2d_NCHWc_1] Trial #284: GFLOPs: 141.3876. Time: 229.9639 us. Best GFLOPs: 220.6736
2024-04-29 06:00:12 [INFO] [task_scheduler.cc:131] [Task #61: fused_nn_contrib_conv2d_NCHWc_1] Trial #285: GFLOPs: 176.7973. Time: 183.9057 us. Best GFLOPs: 220.6736
2024-04-29 06:00:12 [INFO] [task_scheduler.cc:131] [Task #61: fused_nn_contrib_conv2d_NCHWc_1] Trial #286: GFLOPs: 209.1413. Time: 155.4645 us. Best GFLOPs: 220.6736
2024-04-29 06:00:12 [INFO] [task_scheduler.cc:131] [Task #61: fused_nn_contrib_conv2d_NCHWc_1] Trial #287: GFLOPs: 188.7587. Time: 172.2519 us. Best GFLOPs: 220.6736
2024-04-29 06:00:12 [INFO] [task_scheduler.cc:131] [Task #61: fused_nn_contrib_conv2d_NCHWc_1] Trial #288: GFLOPs: 174.8525. Time: 185.9513 us. Best GFLOPs: 220.6736
2024-04-29 06:00:12 [INFO] [task_scheduler.cc:131] [Task #61: fused_nn_contrib_conv2d_NCHWc_1] Trial #289: GFLOPs: 112.5596. Time: 288.8606 us. Best GFLOPs: 220.6736
2024-04-29 06:00:12 [INFO] [task_scheduler.cc:131] [Task #61: fused_nn_contrib_conv2d_NCHWc_1] Trial #290: GFLOPs: 138.9563. Time: 233.9876 us. Best GFLOPs: 220.6736
2024-04-29 06:00:12 [INFO] [task_scheduler.cc:131] [Task #61: fused_nn_contrib_conv2d_NCHWc_1] Trial #291: GFLOPs: 146.2411. Time: 222.3318 us. Best GFLOPs: 220.6736
2024-04-29 06:00:12 [INFO] [task_scheduler.cc:131] [Task #61: fused_nn_contrib_conv2d_NCHWc_1] Trial #292: GFLOPs: 163.9099. Time: 198.3654 us. Best GFLOPs: 220.6736
2024-04-29 06:00:12 [INFO] [task_scheduler.cc:131] [Task #61: fused_nn_contrib_conv2d_NCHWc_1] Trial #293: GFLOPs: 158.5275. Time: 205.1003 us. Best GFLOPs: 220.6736
2024-04-29 06:00:12 [INFO] [task_scheduler.cc:131] [Task #61: fused_nn_contrib_conv2d_NCHWc_1] Trial #294: GFLOPs: 134.9789. Time: 240.8824 us. Best GFLOPs: 220.6736
2024-04-29 06:00:12 [INFO] [task_scheduler.cc:131] [Task #61: fused_nn_contrib_conv2d_NCHWc_1] Trial #295: GFLOPs: 172.4386. Time: 188.5544 us. Best GFLOPs: 220.6736
2024-04-29 06:00:12 [INFO] [task_scheduler.cc:131] [Task #61: fused_nn_contrib_conv2d_NCHWc_1] Trial #296: GFLOPs: 146.6590. Time: 221.6983 us. Best GFLOPs: 220.6736
2024-04-29 06:00:12 [INFO] [task_scheduler.cc:131] [Task #61: fused_nn_contrib_conv2d_NCHWc_1] Trial #297: GFLOPs: 122.1602. Time: 266.1591 us. Best GFLOPs: 220.6736
2024-04-29 06:00:12 [INFO] [task_scheduler.cc:131] [Task #61: fused_nn_contrib_conv2d_NCHWc_1] Trial #298: GFLOPs: 157.1548. Time: 206.8918 us. Best GFLOPs: 220.6736
2024-04-29 06:00:12 [INFO] [task_scheduler.cc:131] [Task #61: fused_nn_contrib_conv2d_NCHWc_1] Trial #299: GFLOPs: 137.0124. Time: 237.3074 us. Best GFLOPs: 220.6736
2024-04-29 06:00:12 [INFO] [task_scheduler.cc:131] [Task #61: fused_nn_contrib_conv2d_NCHWc_1] Trial #300: GFLOPs: 170.3913. Time: 190.8199 us. Best GFLOPs: 220.6736
2024-04-29 06:00:12 [INFO] [task_scheduler.cc:131] [Task #61: fused_nn_contrib_conv2d_NCHWc_1] Trial #301: GFLOPs: 150.4127. Time: 216.1656 us. Best GFLOPs: 220.6736
2024-04-29 06:00:12 [INFO] [task_scheduler.cc:131] [Task #61: fused_nn_contrib_conv2d_NCHWc_1] Trial #302: GFLOPs: 181.2608. Time: 179.3771 us. Best GFLOPs: 220.6736
2024-04-29 06:00:12 [INFO] [task_scheduler.cc:131] [Task #61: fused_nn_contrib_conv2d_NCHWc_1] Trial #303: GFLOPs: 140.6354. Time: 231.1940 us. Best GFLOPs: 220.6736
2024-04-29 06:00:12 [INFO] [task_scheduler.cc:131] [Task #61: fused_nn_contrib_conv2d_NCHWc_1] Trial #304: GFLOPs: 156.9716. Time: 207.1333 us. Best GFLOPs: 220.6736
2024-04-29 06:00:12 [INFO] [task_scheduler.cc:131] [Task #61: fused_nn_contrib_conv2d_NCHWc_1] Trial #305: GFLOPs: 104.6285. Time: 310.7570 us. Best GFLOPs: 220.6736
2024-04-29 06:00:12 [INFO] [task_scheduler.cc:131] [Task #61: fused_nn_contrib_conv2d_NCHWc_1] Trial #306: GFLOPs: 161.6423. Time: 201.1482 us. Best GFLOPs: 220.6736
2024-04-29 06:00:12 [INFO] [task_scheduler.cc:131] [Task #61: fused_nn_contrib_conv2d_NCHWc_1] Trial #307: GFLOPs: 193.3436. Time: 168.1672 us. Best GFLOPs: 220.6736
2024-04-29 06:00:12 [INFO] [task_scheduler.cc:131] [Task #61: fused_nn_contrib_conv2d_NCHWc_1] Trial #308: GFLOPs: 183.9518. Time: 176.7531 us. Best GFLOPs: 220.6736
2024-04-29 06:00:12 [INFO] [task_scheduler.cc:131] [Task #61: fused_nn_contrib_conv2d_NCHWc_1] Trial #309: GFLOPs: 150.7382. Time: 215.6988 us. Best GFLOPs: 220.6736
2024-04-29 06:00:12 [INFO] [task_scheduler.cc:131] [Task #61: fused_nn_contrib_conv2d_NCHWc_1] Trial #310: GFLOPs: 91.1241. Time: 356.8105 us. Best GFLOPs: 220.6736
2024-04-29 06:00:12 [INFO] [task_scheduler.cc:131] [Task #61: fused_nn_contrib_conv2d_NCHWc_1] Trial #311: GFLOPs: 128.2838. Time: 253.4540 us. Best GFLOPs: 220.6736
2024-04-29 06:00:12 [INFO] [task_scheduler.cc:121] [Task #61: fused_nn_contrib_conv2d_NCHWc_1] Trial #312: Error in building:
LocalBuilder: Timeout, killed after 30.0 seconds
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(48), T.int64(14), T.int64(14), T.int64(4)), "float32"), p1: T.Buffer((T.int64(12), T.int64(48), T.int64(3), T.int64(3), T.int64(4), T.int64(4)), "float32"), conv2d_NCHWc: T.Buffer((T.int64(1), T.int64(12), T.int64(14), T.int64(14), T.int64(4)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        data_pad = T.alloc_buffer((T.int64(1), T.int64(48), T.int64(16), T.int64(16), T.int64(4)))
        conv2d_NCHWc_global = T.alloc_buffer((T.int64(1), T.int64(12), T.int64(14), T.int64(14), T.int64(4)))
        for i0_i1_i2_fused in T.parallel(T.int64(768)):
            for i3_i4_fused in T.vectorized(T.int64(64)):
                with T.block("data_pad"):
                    v_i0 = T.axis.spatial(T.int64(1), T.int64(0))
                    v_i1 = T.axis.spatial(T.int64(48), i0_i1_i2_fused // T.int64(16))
                    v_i2 = T.axis.spatial(T.int64(16), i0_i1_i2_fused % T.int64(16))
                    v_i3 = T.axis.spatial(T.int64(16), i3_i4_fused // T.int64(4))
                    v_i4 = T.axis.spatial(T.int64(4), i3_i4_fused % T.int64(4))
                    T.reads(p0[v_i0, v_i1, v_i2 - T.int64(1), v_i3 - T.int64(1), v_i4])
                    T.writes(data_pad[v_i0, v_i1, v_i2, v_i3, v_i4])
                    data_pad[v_i0, v_i1, v_i2, v_i3, v_i4] = T.if_then_else(T.int64(1) <= v_i2 and v_i2 < T.int64(15) and T.int64(1) <= v_i3 and v_i3 < T.int64(15), p0[v_i0, v_i1, v_i2 - T.int64(1), v_i3 - T.int64(1), v_i4], T.float32(0))
        for n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused in T.parallel(T.int64(588), annotations={"pragma_auto_unroll_max_step": 512, "pragma_unroll_explicit": 1}):
            for n_2_init, oc_chunk_2_init, oh_2_init, ow_2_init, oc_block_2_init, n_3_init, oc_chunk_3_init, oh_3_init, ow_3_init in T.grid(T.int64(1), T.int64(2), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(1)):
                for oc_block_3_fused_init in T.vectorized(T.int64(4)):
                    with T.block("conv2d_NCHWc_init"):
                        v_n = T.axis.spatial(T.int64(1), n_2_init + n_3_init)
                        v_oc_chunk = T.axis.spatial(T.int64(12), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused % T.int64(42) // T.int64(7) * T.int64(2) + oc_chunk_2_init + oc_chunk_3_init)
                        v_oh = T.axis.spatial(T.int64(14), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused % T.int64(7) * T.int64(2) + oh_2_init * T.int64(2) + oh_3_init)
                        v_ow = T.axis.spatial(T.int64(14), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused // T.int64(42) + ow_2_init + ow_3_init)
                        v_oc_block = T.axis.spatial(T.int64(4), oc_block_2_init * T.int64(4) + oc_block_3_fused_init)
                        T.reads()
                        T.writes(conv2d_NCHWc_global[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                        T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                        conv2d_NCHWc_global[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = T.float32(0)
            for ic_0, kh_0, kw_0, n_2, oc_chunk_2, oh_2, ow_2, oc_block_2, ic_1, kh_1, kw_1, n_3, oc_chunk_3, oh_3, ow_3 in T.grid(T.int64(16), T.int64(1), T.int64(3), T.int64(1), T.int64(2), T.int64(1), T.int64(1), T.int64(1), T.int64(12), T.int64(3), T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(1)):
                for oc_block_3_fused in T.vectorized(T.int64(4)):
                    with T.block("conv2d_NCHWc_update"):
                        v_n = T.axis.spatial(T.int64(1), n_2 + n_3)
                        v_oc_chunk = T.axis.spatial(T.int64(12), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused % T.int64(42) // T.int64(7) * T.int64(2) + oc_chunk_2 + oc_chunk_3)
                        v_oh = T.axis.spatial(T.int64(14), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused % T.int64(7) * T.int64(2) + oh_2 * T.int64(2) + oh_3)
                        v_ow = T.axis.spatial(T.int64(14), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused // T.int64(42) + ow_2 + ow_3)
                        v_oc_block = T.axis.spatial(T.int64(4), oc_block_2 * T.int64(4) + oc_block_3_fused)
                        v_ic = T.axis.reduce(T.int64(192), ic_0 * T.int64(12) + ic_1)
                        v_kh = T.axis.reduce(T.int64(3), kh_0 * T.int64(3) + kh_1)
                        v_kw = T.axis.reduce(T.int64(3), kw_0 + kw_1)
                        T.reads(conv2d_NCHWc_global[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block], data_pad[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)], p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block])
                        T.writes(conv2d_NCHWc_global[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                        T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                        conv2d_NCHWc_global[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = conv2d_NCHWc_global[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] + data_pad[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)] * p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block]
            for ax0, ax1, ax2 in T.grid(T.int64(1), T.int64(2), T.int64(2)):
                for ax3_ax4_fused in T.vectorized(T.int64(4)):
                    with T.block("conv2d_NCHWc_global"):
                        v0 = T.axis.spatial(T.int64(1), ax0)
                        v1 = T.axis.spatial(T.int64(12), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused % T.int64(42) // T.int64(7) * T.int64(2) + ax1)
                        v2 = T.axis.spatial(T.int64(14), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused % T.int64(7) * T.int64(2) + ax2)
                        v3 = T.axis.spatial(T.int64(14), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused // T.int64(42))
                        v4 = T.axis.spatial(T.int64(4), ax3_ax4_fused)
                        T.reads(conv2d_NCHWc_global[v0, v1, v2, v3, v4])
                        T.writes(conv2d_NCHWc[v0, v1, v2, v3, v4])
                        conv2d_NCHWc[v0, v1, v2, v3, v4] = conv2d_NCHWc_global[v0, v1, v2, v3, v4]
b0 = sch.get_block(name="data_pad", func_name="main")
b1 = sch.get_block(name="conv2d_NCHWc", func_name="main")
b2 = sch.get_block(name="root", func_name="main")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSRSRS")
l3, l4, l5, l6, l7, l8, l9, l10 = sch.get_loops(block=b1)
v11, v12, v13, v14 = sch.sample_perfect_tile(loop=l3, n=4, max_innermost_factor=64, decision=[1, 1, 1, 1])
l15, l16, l17, l18 = sch.split(loop=l3, factors=[v11, v12, v13, v14], preserve_unit_iters=True)
v19, v20, v21, v22 = sch.sample_perfect_tile(loop=l4, n=4, max_innermost_factor=64, decision=[1, 6, 2, 1])
l23, l24, l25, l26 = sch.split(loop=l4, factors=[v19, v20, v21, v22], preserve_unit_iters=True)
v27, v28, v29, v30 = sch.sample_perfect_tile(loop=l5, n=4, max_innermost_factor=64, decision=[1, 7, 1, 2])
l31, l32, l33, l34 = sch.split(loop=l5, factors=[v27, v28, v29, v30], preserve_unit_iters=True)
v35, v36, v37, v38 = sch.sample_perfect_tile(loop=l6, n=4, max_innermost_factor=64, decision=[14, 1, 1, 1])
l39, l40, l41, l42 = sch.split(loop=l6, factors=[v35, v36, v37, v38], preserve_unit_iters=True)
v43, v44, v45, v46 = sch.sample_perfect_tile(loop=l7, n=4, max_innermost_factor=64, decision=[1, 1, 1, 4])
l47, l48, l49, l50 = sch.split(loop=l7, factors=[v43, v44, v45, v46], preserve_unit_iters=True)
v51, v52 = sch.sample_perfect_tile(loop=l8, n=2, max_innermost_factor=64, decision=[16, 12])
l53, l54 = sch.split(loop=l8, factors=[v51, v52], preserve_unit_iters=True)
v55, v56 = sch.sample_perfect_tile(loop=l9, n=2, max_innermost_factor=64, decision=[1, 3])
l57, l58 = sch.split(loop=l9, factors=[v55, v56], preserve_unit_iters=True)
v59, v60 = sch.sample_perfect_tile(loop=l10, n=2, max_innermost_factor=64, decision=[3, 1])
l61, l62 = sch.split(loop=l10, factors=[v59, v60], preserve_unit_iters=True)
sch.reorder(l15, l23, l31, l39, l47, l16, l24, l32, l40, l48, l53, l57, l61, l17, l25, l33, l41, l49, l54, l58, l62, l18, l26, l34, l42, l50)
b63 = sch.cache_write(block=b1, write_buffer_index=0, storage_scope="global")
sch.reverse_compute_at(block=b63, loop=l48, preserve_unit_loops=True, index=-1)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.vectorize", ann_val=64)
v64 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.unroll_explicit", ann_val=v64)
l65 = sch.sample_compute_location(block=b0, decision=-1)
sch.compute_at(block=b0, loop=l65, preserve_unit_loops=True, index=-1)
sch.enter_postproc()
b66 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b66, ann_key="meta_schedule.parallel")
sch.unannotate(block_or_loop=b66, ann_key="meta_schedule.vectorize")
sch.unannotate(block_or_loop=b66, ann_key="meta_schedule.unroll_explicit")
b67, b68, b69 = sch.get_child_blocks(b66)
l70, l71, l72, l73, l74 = sch.get_loops(block=b67)
l75 = sch.fuse(l70, l71, l72, preserve_unit_iters=True)
sch.parallel(loop=l75)
l76 = sch.fuse(l73, l74, preserve_unit_iters=True)
sch.vectorize(loop=l76)
l77, l78, l79, l80, l81, l82, l83, l84, l85, l86, l87, l88, l89, l90, l91, l92, l93, l94, l95, l96, l97, l98, l99, l100, l101, l102 = sch.get_loops(block=b68)
l103 = sch.fuse(l77, l78, l79, l80, l81, l82, l83, l84, l85, l86, preserve_unit_iters=True)
sch.parallel(loop=l103)
l104 = sch.fuse(l102, preserve_unit_iters=True)
sch.vectorize(loop=l104)
sch.annotate(block_or_loop=l103, ann_key="pragma_auto_unroll_max_step", ann_val=512)
sch.annotate(block_or_loop=l103, ann_key="pragma_unroll_explicit", ann_val=1)
l105, l106, l107, l108, l109, l110 = sch.get_loops(block=b69)
l111 = sch.fuse(l109, l110, preserve_unit_iters=True)
sch.vectorize(loop=l111)
b112 = sch.get_block(name="conv2d_NCHWc", func_name="main")
l113, l114, l115, l116, l117, l118, l119, l120, l121, l122, l123, l124, l125, l126, l127, l128, l129 = sch.get_loops(block=b112)
b130 = sch.decompose_reduction(block=b112, loop=l114)
2024-04-29 06:00:12 [INFO] [task_scheduler.cc:131] [Task #61: fused_nn_contrib_conv2d_NCHWc_1] Trial #313: GFLOPs: 177.4784. Time: 183.2000 us. Best GFLOPs: 220.6736
2024-04-29 06:00:12 [INFO] [task_scheduler.cc:131] [Task #61: fused_nn_contrib_conv2d_NCHWc_1] Trial #314: GFLOPs: 186.8370. Time: 174.0236 us. Best GFLOPs: 220.6736
2024-04-29 06:00:12 [INFO] [task_scheduler.cc:131] [Task #61: fused_nn_contrib_conv2d_NCHWc_1] Trial #315: GFLOPs: 90.8254. Time: 357.9841 us. Best GFLOPs: 220.6736
2024-04-29 06:00:12 [INFO] [task_scheduler.cc:131] [Task #61: fused_nn_contrib_conv2d_NCHWc_1] Trial #316: GFLOPs: 87.4269. Time: 371.8998 us. Best GFLOPs: 220.6736
2024-04-29 06:00:12 [INFO] [task_scheduler.cc:131] [Task #61: fused_nn_contrib_conv2d_NCHWc_1] Trial #317: GFLOPs: 123.0412. Time: 264.2533 us. Best GFLOPs: 220.6736
2024-04-29 06:00:12 [INFO] [task_scheduler.cc:131] [Task #61: fused_nn_contrib_conv2d_NCHWc_1] Trial #318: GFLOPs: 38.7872. Time: 838.2684 us. Best GFLOPs: 220.6736
2024-04-29 06:00:12 [INFO] [task_scheduler.cc:131] [Task #61: fused_nn_contrib_conv2d_NCHWc_1] Trial #319: GFLOPs: 123.6333. Time: 262.9879 us. Best GFLOPs: 220.6736
2024-04-29 06:00:12 [INFO] [task_scheduler.cc:131] [Task #61: fused_nn_contrib_conv2d_NCHWc_1] Trial #320: GFLOPs: 20.7855. Time: 1564.2644 us. Best GFLOPs: 220.6736
2024-04-29 06:25:08 [INFO] [evolutionary_search.cc:713] Generating candidates......
2024-04-29 06:25:09 [INFO] [evolutionary_search.cc:715] Picked top 102 candidate(s) from database
2024-04-29 06:25:13 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0xc83fed8)]: 10 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0xc5901d8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x15321f68)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x1063f078)]: 0 failure(s)
2024-04-29 06:25:13 [INFO] [evolutionary_search.cc:723] Sampled 400 candidate(s)
2024-04-29 06:25:24 [INFO] [evolutionary_search.cc:621] Evolve iter #0 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0xc83fed8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0xc5901d8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x15321f68)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x1063f078)]: 0 failure(s)
2024-04-29 06:25:35 [INFO] [evolutionary_search.cc:621] Evolve iter #1 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0xc83fed8)]: 2 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0xc5901d8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x15321f68)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x1063f078)]: 0 failure(s)
2024-04-29 06:25:46 [INFO] [evolutionary_search.cc:621] Evolve iter #2 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0xc83fed8)]: 1 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0xc5901d8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x15321f68)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x1063f078)]: 0 failure(s)
2024-04-29 06:25:57 [INFO] [evolutionary_search.cc:621] Evolve iter #3 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0xc83fed8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0xc5901d8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x15321f68)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x1063f078)]: 0 failure(s)
2024-04-29 06:26:03 [INFO] [evolutionary_search.cc:649] Scores of the best 64 candidates:
[1 : 16]:	0.8128  0.8085  0.8082  0.8037  0.8037  0.8006  0.7948  0.7873  0.7802  0.7713  0.7713  0.7713  0.7670  0.7622  0.7622  0.7608
[17 : 32]:	0.7589  0.7589  0.7589  0.7560  0.7508  0.7473  0.7464  0.7464  0.7464  0.7446  0.7425  0.7425  0.7422  0.7422  0.7422  0.7417
[33 : 48]:	0.7412  0.7405  0.7399  0.7399  0.7388  0.7388  0.7388  0.7388  0.7386  0.7378  0.7354  0.7354  0.7346  0.7346  0.7330  0.7330
[49 : 64]:	0.7330  0.7326  0.7326  0.7320  0.7320  0.7319  0.7319  0.7319  0.7316  0.7311  0.7310  0.7310  0.7310  0.7310  0.7310  0.7310
2024-04-29 06:26:03 [INFO] [evolutionary_search.cc:727] Got 64 candidate(s) with evolutionary search
2024-04-29 06:26:03 [INFO] [evolutionary_search.cc:730] Sending 64 candidates(s) for measurement
2024-04-29 06:27:41 [INFO] [task_scheduler.cc:131] [Task #61: fused_nn_contrib_conv2d_NCHWc_1] Trial #321: GFLOPs: 186.1281. Time: 174.6864 us. Best GFLOPs: 220.6736
2024-04-29 06:27:41 [INFO] [task_scheduler.cc:131] [Task #61: fused_nn_contrib_conv2d_NCHWc_1] Trial #322: GFLOPs: 179.5263. Time: 181.1102 us. Best GFLOPs: 220.6736
2024-04-29 06:27:41 [INFO] [task_scheduler.cc:131] [Task #61: fused_nn_contrib_conv2d_NCHWc_1] Trial #323: GFLOPs: 120.7588. Time: 269.2478 us. Best GFLOPs: 220.6736
2024-04-29 06:27:41 [INFO] [task_scheduler.cc:131] [Task #61: fused_nn_contrib_conv2d_NCHWc_1] Trial #324: GFLOPs: 203.0806. Time: 160.1042 us. Best GFLOPs: 220.6736
2024-04-29 06:27:41 [INFO] [task_scheduler.cc:131] [Task #61: fused_nn_contrib_conv2d_NCHWc_1] Trial #325: GFLOPs: 178.0008. Time: 182.6624 us. Best GFLOPs: 220.6736
2024-04-29 06:27:41 [INFO] [task_scheduler.cc:131] [Task #61: fused_nn_contrib_conv2d_NCHWc_1] Trial #326: GFLOPs: 120.6714. Time: 269.4428 us. Best GFLOPs: 220.6736
2024-04-29 06:27:41 [INFO] [task_scheduler.cc:131] [Task #61: fused_nn_contrib_conv2d_NCHWc_1] Trial #327: GFLOPs: 201.7242. Time: 161.1807 us. Best GFLOPs: 220.6736
2024-04-29 06:27:41 [INFO] [task_scheduler.cc:131] [Task #61: fused_nn_contrib_conv2d_NCHWc_1] Trial #328: GFLOPs: 165.0456. Time: 197.0004 us. Best GFLOPs: 220.6736
2024-04-29 06:27:41 [INFO] [task_scheduler.cc:131] [Task #61: fused_nn_contrib_conv2d_NCHWc_1] Trial #329: GFLOPs: 189.7040. Time: 171.3936 us. Best GFLOPs: 220.6736
2024-04-29 06:27:41 [INFO] [task_scheduler.cc:131] [Task #61: fused_nn_contrib_conv2d_NCHWc_1] Trial #330: GFLOPs: 122.0591. Time: 266.3796 us. Best GFLOPs: 220.6736
2024-04-29 06:27:41 [INFO] [task_scheduler.cc:131] [Task #61: fused_nn_contrib_conv2d_NCHWc_1] Trial #331: GFLOPs: 121.6281. Time: 267.3235 us. Best GFLOPs: 220.6736
2024-04-29 06:27:41 [INFO] [task_scheduler.cc:131] [Task #61: fused_nn_contrib_conv2d_NCHWc_1] Trial #332: GFLOPs: 132.3145. Time: 245.7330 us. Best GFLOPs: 220.6736
2024-04-29 06:27:41 [INFO] [task_scheduler.cc:131] [Task #61: fused_nn_contrib_conv2d_NCHWc_1] Trial #333: GFLOPs: 153.3446. Time: 212.0325 us. Best GFLOPs: 220.6736
2024-04-29 06:27:41 [INFO] [task_scheduler.cc:131] [Task #61: fused_nn_contrib_conv2d_NCHWc_1] Trial #334: GFLOPs: 181.3566. Time: 179.2824 us. Best GFLOPs: 220.6736
2024-04-29 06:27:42 [INFO] [task_scheduler.cc:121] [Task #61: fused_nn_contrib_conv2d_NCHWc_1] Trial #335: Error in building:
LocalBuilder: Timeout, killed after 30.0 seconds
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(48), T.int64(14), T.int64(14), T.int64(4)), "float32"), p1: T.Buffer((T.int64(12), T.int64(48), T.int64(3), T.int64(3), T.int64(4), T.int64(4)), "float32"), conv2d_NCHWc: T.Buffer((T.int64(1), T.int64(12), T.int64(14), T.int64(14), T.int64(4)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        data_pad = T.alloc_buffer((T.int64(1), T.int64(48), T.int64(16), T.int64(16), T.int64(4)))
        conv2d_NCHWc_global = T.alloc_buffer((T.int64(1), T.int64(12), T.int64(14), T.int64(14), T.int64(4)))
        for n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_fused_fused in T.parallel(T.int64(168), annotations={"pragma_auto_unroll_max_step": 512, "pragma_unroll_explicit": 1}):
            for oc_block_1 in range(T.int64(1)):
                for n_2_init, oc_chunk_2_init, oh_2_init, ow_2_init, oc_block_2_init, n_3_init, oc_chunk_3_init, oh_3_init, ow_3_init in T.grid(T.int64(1), T.int64(2), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(7), T.int64(1)):
                    for oc_block_3_fused_init in T.vectorized(T.int64(4)):
                        with T.block("conv2d_NCHWc_init"):
                            v_n = T.axis.spatial(T.int64(1), n_2_init + n_3_init)
                            v_oc_chunk = T.axis.spatial(T.int64(12), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_fused_fused % T.int64(42) // T.int64(7) * T.int64(2) + oc_chunk_2_init + oc_chunk_3_init)
                            v_oh = T.axis.spatial(T.int64(14), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_fused_fused // T.int64(84) * T.int64(7) + oh_2_init * T.int64(7) + oh_3_init)
                            v_ow = T.axis.spatial(T.int64(14), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_fused_fused % T.int64(84) // T.int64(42) * T.int64(7) + n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_fused_fused % T.int64(7) + ow_2_init + ow_3_init)
                            v_oc_block = T.axis.spatial(T.int64(4), oc_block_1 * T.int64(4) + oc_block_2_init * T.int64(4) + oc_block_3_fused_init)
                            T.reads()
                            T.writes(conv2d_NCHWc_global[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                            T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                            conv2d_NCHWc_global[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = T.float32(0)
                for ic_0 in range(T.int64(8)):
                    for ax0, ax1, ax2 in T.grid(T.int64(1), T.int64(6), T.int64(9)):
                        for ax3_ax4_fused in T.vectorized(T.int64(12)):
                            with T.block("data_pad"):
                                v_i0 = T.axis.spatial(T.int64(1), ax0)
                                v_i1 = T.axis.spatial(T.int64(48), ic_0 * T.int64(6) + ax1)
                                v_i2 = T.axis.spatial(T.int64(16), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_fused_fused // T.int64(84) * T.int64(7) + ax2)
                                v_i3 = T.axis.spatial(T.int64(16), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_fused_fused % T.int64(84) // T.int64(42) * T.int64(7) + n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_fused_fused % T.int64(7) + ax3_ax4_fused // T.int64(4))
                                v_i4 = T.axis.spatial(T.int64(4), ax3_ax4_fused % T.int64(4))
                                T.reads(p0[v_i0, v_i1, v_i2 - T.int64(1), v_i3 - T.int64(1), v_i4])
                                T.writes(data_pad[v_i0, v_i1, v_i2, v_i3, v_i4])
                                data_pad[v_i0, v_i1, v_i2, v_i3, v_i4] = T.if_then_else(T.int64(1) <= v_i2 and v_i2 < T.int64(15) and T.int64(1) <= v_i3 and v_i3 < T.int64(15), p0[v_i0, v_i1, v_i2 - T.int64(1), v_i3 - T.int64(1), v_i4], T.float32(0))
                    for kh_0, kw_0, n_2, oc_chunk_2, oh_2, ow_2, oc_block_2, ic_1, kh_1, kw_1, n_3, oc_chunk_3, oh_3, ow_3 in T.grid(T.int64(1), T.int64(3), T.int64(1), T.int64(2), T.int64(1), T.int64(1), T.int64(1), T.int64(24), T.int64(3), T.int64(1), T.int64(1), T.int64(1), T.int64(7), T.int64(1)):
                        for oc_block_3_fused in T.vectorized(T.int64(4)):
                            with T.block("conv2d_NCHWc_update"):
                                v_n = T.axis.spatial(T.int64(1), n_2 + n_3)
                                v_oc_chunk = T.axis.spatial(T.int64(12), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_fused_fused % T.int64(42) // T.int64(7) * T.int64(2) + oc_chunk_2 + oc_chunk_3)
                                v_oh = T.axis.spatial(T.int64(14), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_fused_fused // T.int64(84) * T.int64(7) + oh_2 * T.int64(7) + oh_3)
                                v_ow = T.axis.spatial(T.int64(14), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_fused_fused % T.int64(84) // T.int64(42) * T.int64(7) + n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_fused_fused % T.int64(7) + ow_2 + ow_3)
                                v_oc_block = T.axis.spatial(T.int64(4), oc_block_1 * T.int64(4) + oc_block_2 * T.int64(4) + oc_block_3_fused)
                                v_ic = T.axis.reduce(T.int64(192), ic_0 * T.int64(24) + ic_1)
                                v_kh = T.axis.reduce(T.int64(3), kh_0 * T.int64(3) + kh_1)
                                v_kw = T.axis.reduce(T.int64(3), kw_0 + kw_1)
                                T.reads(conv2d_NCHWc_global[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block], data_pad[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)], p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block])
                                T.writes(conv2d_NCHWc_global[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                                T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                                conv2d_NCHWc_global[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = conv2d_NCHWc_global[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] + data_pad[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)] * p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block]
                for ax0, ax1, ax2 in T.grid(T.int64(1), T.int64(2), T.int64(7)):
                    for ax3_ax4_fused in T.vectorized(T.int64(4)):
                        with T.block("conv2d_NCHWc_global"):
                            v0 = T.axis.spatial(T.int64(1), ax0)
                            v1 = T.axis.spatial(T.int64(12), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_fused_fused % T.int64(42) // T.int64(7) * T.int64(2) + ax1)
                            v2 = T.axis.spatial(T.int64(14), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_fused_fused // T.int64(84) * T.int64(7) + ax2)
                            v3 = T.axis.spatial(T.int64(14), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_fused_fused % T.int64(84) // T.int64(42) * T.int64(7) + n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_fused_fused % T.int64(7))
                            v4 = T.axis.spatial(T.int64(4), ax3_ax4_fused)
                            T.reads(conv2d_NCHWc_global[v0, v1, v2, v3, v4])
                            T.writes(conv2d_NCHWc[v0, v1, v2, v3, v4])
                            conv2d_NCHWc[v0, v1, v2, v3, v4] = conv2d_NCHWc_global[v0, v1, v2, v3, v4]
b0 = sch.get_block(name="data_pad", func_name="main")
b1 = sch.get_block(name="conv2d_NCHWc", func_name="main")
b2 = sch.get_block(name="root", func_name="main")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSRSRS")
l3, l4, l5, l6, l7, l8, l9, l10 = sch.get_loops(block=b1)
v11, v12, v13, v14 = sch.sample_perfect_tile(loop=l3, n=4, max_innermost_factor=64, decision=[1, 1, 1, 1])
l15, l16, l17, l18 = sch.split(loop=l3, factors=[v11, v12, v13, v14], preserve_unit_iters=True)
v19, v20, v21, v22 = sch.sample_perfect_tile(loop=l4, n=4, max_innermost_factor=64, decision=[1, 6, 2, 1])
l23, l24, l25, l26 = sch.split(loop=l4, factors=[v19, v20, v21, v22], preserve_unit_iters=True)
v27, v28, v29, v30 = sch.sample_perfect_tile(loop=l5, n=4, max_innermost_factor=64, decision=[2, 1, 1, 7])
l31, l32, l33, l34 = sch.split(loop=l5, factors=[v27, v28, v29, v30], preserve_unit_iters=True)
v35, v36, v37, v38 = sch.sample_perfect_tile(loop=l6, n=4, max_innermost_factor=64, decision=[2, 7, 1, 1])
l39, l40, l41, l42 = sch.split(loop=l6, factors=[v35, v36, v37, v38], preserve_unit_iters=True)
v43, v44, v45, v46 = sch.sample_perfect_tile(loop=l7, n=4, max_innermost_factor=64, decision=[1, 1, 1, 4])
l47, l48, l49, l50 = sch.split(loop=l7, factors=[v43, v44, v45, v46], preserve_unit_iters=True)
v51, v52 = sch.sample_perfect_tile(loop=l8, n=2, max_innermost_factor=64, decision=[8, 24])
l53, l54 = sch.split(loop=l8, factors=[v51, v52], preserve_unit_iters=True)
v55, v56 = sch.sample_perfect_tile(loop=l9, n=2, max_innermost_factor=64, decision=[1, 3])
l57, l58 = sch.split(loop=l9, factors=[v55, v56], preserve_unit_iters=True)
v59, v60 = sch.sample_perfect_tile(loop=l10, n=2, max_innermost_factor=64, decision=[3, 1])
l61, l62 = sch.split(loop=l10, factors=[v59, v60], preserve_unit_iters=True)
sch.reorder(l15, l23, l31, l39, l47, l16, l24, l32, l40, l48, l53, l57, l61, l17, l25, l33, l41, l49, l54, l58, l62, l18, l26, l34, l42, l50)
b63 = sch.cache_write(block=b1, write_buffer_index=0, storage_scope="global")
sch.reverse_compute_at(block=b63, loop=l48, preserve_unit_loops=True, index=-1)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.parallel", ann_val=24)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.vectorize", ann_val=64)
v64 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.unroll_explicit", ann_val=v64)
l65 = sch.sample_compute_location(block=b0, decision=10)
sch.compute_at(block=b0, loop=l65, preserve_unit_loops=True, index=-1)
sch.enter_postproc()
b66 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b66, ann_key="meta_schedule.parallel")
sch.unannotate(block_or_loop=b66, ann_key="meta_schedule.vectorize")
sch.unannotate(block_or_loop=b66, ann_key="meta_schedule.unroll_explicit")
b67, b68, b69 = sch.get_child_blocks(b66)
l70, l71, l72, l73, l74, l75, l76, l77, l78, l79, l80, l81, l82, l83, l84, l85 = sch.get_loops(block=b67)
l86 = sch.fuse(l70, l71, l72, l73, l74, l75, l76, l77, l78, preserve_unit_iters=True)
sch.parallel(loop=l86)
l87 = sch.fuse(l84, l85, preserve_unit_iters=True)
sch.vectorize(loop=l87)
l88, l89, l90, l91, l92, l93, l94, l95, l96, l97, l98, l99, l100, l101, l102, l103, l104, l105 = sch.get_loops(block=b68)
l106 = sch.fuse(l88, preserve_unit_iters=True)
sch.parallel(loop=l106)
l107 = sch.fuse(l105, preserve_unit_iters=True)
sch.vectorize(loop=l107)
sch.annotate(block_or_loop=l106, ann_key="pragma_auto_unroll_max_step", ann_val=512)
sch.annotate(block_or_loop=l106, ann_key="pragma_unroll_explicit", ann_val=1)
l108, l109, l110, l111, l112, l113, l114 = sch.get_loops(block=b69)
l115 = sch.fuse(l113, l114, preserve_unit_iters=True)
sch.vectorize(loop=l115)
b116 = sch.get_block(name="conv2d_NCHWc", func_name="main")
l117, l118, l119, l120, l121, l122, l123, l124, l125, l126, l127, l128, l129, l130, l131, l132, l133, l134 = sch.get_loops(block=b116)
b135 = sch.decompose_reduction(block=b116, loop=l119)
2024-04-29 06:27:42 [INFO] [task_scheduler.cc:131] [Task #61: fused_nn_contrib_conv2d_NCHWc_1] Trial #336: GFLOPs: 195.3738. Time: 166.4197 us. Best GFLOPs: 220.6736
2024-04-29 06:27:42 [INFO] [task_scheduler.cc:131] [Task #61: fused_nn_contrib_conv2d_NCHWc_1] Trial #337: GFLOPs: 177.0865. Time: 183.6054 us. Best GFLOPs: 220.6736
2024-04-29 06:27:42 [INFO] [task_scheduler.cc:131] [Task #61: fused_nn_contrib_conv2d_NCHWc_1] Trial #338: GFLOPs: 107.3691. Time: 302.8251 us. Best GFLOPs: 220.6736
2024-04-29 06:27:42 [INFO] [task_scheduler.cc:131] [Task #61: fused_nn_contrib_conv2d_NCHWc_1] Trial #339: GFLOPs: 107.1128. Time: 303.5497 us. Best GFLOPs: 220.6736
2024-04-29 06:27:42 [INFO] [task_scheduler.cc:131] [Task #61: fused_nn_contrib_conv2d_NCHWc_1] Trial #340: GFLOPs: 181.6141. Time: 179.0282 us. Best GFLOPs: 220.6736
2024-04-29 06:27:42 [INFO] [task_scheduler.cc:131] [Task #61: fused_nn_contrib_conv2d_NCHWc_1] Trial #341: GFLOPs: 99.4047. Time: 327.0876 us. Best GFLOPs: 220.6736
2024-04-29 06:27:42 [INFO] [task_scheduler.cc:131] [Task #61: fused_nn_contrib_conv2d_NCHWc_1] Trial #342: GFLOPs: 156.0252. Time: 208.3897 us. Best GFLOPs: 220.6736
2024-04-29 06:27:42 [INFO] [task_scheduler.cc:131] [Task #61: fused_nn_contrib_conv2d_NCHWc_1] Trial #343: GFLOPs: 154.5304. Time: 210.4056 us. Best GFLOPs: 220.6736
2024-04-29 06:27:42 [INFO] [task_scheduler.cc:131] [Task #61: fused_nn_contrib_conv2d_NCHWc_1] Trial #344: GFLOPs: 110.3034. Time: 294.7692 us. Best GFLOPs: 220.6736
2024-04-29 06:27:42 [INFO] [task_scheduler.cc:131] [Task #61: fused_nn_contrib_conv2d_NCHWc_1] Trial #345: GFLOPs: 100.6865. Time: 322.9238 us. Best GFLOPs: 220.6736
2024-04-29 06:27:42 [INFO] [task_scheduler.cc:131] [Task #61: fused_nn_contrib_conv2d_NCHWc_1] Trial #346: GFLOPs: 133.1969. Time: 244.1052 us. Best GFLOPs: 220.6736
2024-04-29 06:27:42 [INFO] [task_scheduler.cc:131] [Task #61: fused_nn_contrib_conv2d_NCHWc_1] Trial #347: GFLOPs: 158.9162. Time: 204.5987 us. Best GFLOPs: 220.6736
2024-04-29 06:27:42 [INFO] [task_scheduler.cc:131] [Task #61: fused_nn_contrib_conv2d_NCHWc_1] Trial #348: GFLOPs: 158.9919. Time: 204.5012 us. Best GFLOPs: 220.6736
2024-04-29 06:27:42 [INFO] [task_scheduler.cc:131] [Task #61: fused_nn_contrib_conv2d_NCHWc_1] Trial #349: GFLOPs: 99.8531. Time: 325.6189 us. Best GFLOPs: 220.6736
2024-04-29 06:27:42 [INFO] [task_scheduler.cc:131] [Task #61: fused_nn_contrib_conv2d_NCHWc_1] Trial #350: GFLOPs: 200.5008. Time: 162.1642 us. Best GFLOPs: 220.6736
2024-04-29 06:27:42 [INFO] [task_scheduler.cc:131] [Task #61: fused_nn_contrib_conv2d_NCHWc_1] Trial #351: GFLOPs: 102.0775. Time: 318.5231 us. Best GFLOPs: 220.6736
2024-04-29 06:27:42 [INFO] [task_scheduler.cc:131] [Task #61: fused_nn_contrib_conv2d_NCHWc_1] Trial #352: GFLOPs: 164.9902. Time: 197.0666 us. Best GFLOPs: 220.6736
2024-04-29 06:27:42 [INFO] [task_scheduler.cc:131] [Task #61: fused_nn_contrib_conv2d_NCHWc_1] Trial #353: GFLOPs: 166.8961. Time: 194.8162 us. Best GFLOPs: 220.6736
2024-04-29 06:27:42 [INFO] [task_scheduler.cc:131] [Task #61: fused_nn_contrib_conv2d_NCHWc_1] Trial #354: GFLOPs: 170.9707. Time: 190.1732 us. Best GFLOPs: 220.6736
2024-04-29 06:27:42 [INFO] [task_scheduler.cc:131] [Task #61: fused_nn_contrib_conv2d_NCHWc_1] Trial #355: GFLOPs: 170.0892. Time: 191.1588 us. Best GFLOPs: 220.6736
2024-04-29 06:27:42 [INFO] [task_scheduler.cc:131] [Task #61: fused_nn_contrib_conv2d_NCHWc_1] Trial #356: GFLOPs: 176.2188. Time: 184.5095 us. Best GFLOPs: 220.6736
2024-04-29 06:27:42 [INFO] [task_scheduler.cc:131] [Task #61: fused_nn_contrib_conv2d_NCHWc_1] Trial #357: GFLOPs: 174.7416. Time: 186.0693 us. Best GFLOPs: 220.6736
2024-04-29 06:27:42 [INFO] [task_scheduler.cc:131] [Task #61: fused_nn_contrib_conv2d_NCHWc_1] Trial #358: GFLOPs: 146.0971. Time: 222.5510 us. Best GFLOPs: 220.6736
2024-04-29 06:27:42 [INFO] [task_scheduler.cc:131] [Task #61: fused_nn_contrib_conv2d_NCHWc_1] Trial #359: GFLOPs: 134.4960. Time: 241.7473 us. Best GFLOPs: 220.6736
2024-04-29 06:27:42 [INFO] [task_scheduler.cc:131] [Task #61: fused_nn_contrib_conv2d_NCHWc_1] Trial #360: GFLOPs: 143.8657. Time: 226.0028 us. Best GFLOPs: 220.6736
2024-04-29 06:27:42 [INFO] [task_scheduler.cc:131] [Task #61: fused_nn_contrib_conv2d_NCHWc_1] Trial #361: GFLOPs: 184.2117. Time: 176.5037 us. Best GFLOPs: 220.6736
2024-04-29 06:27:42 [INFO] [task_scheduler.cc:131] [Task #61: fused_nn_contrib_conv2d_NCHWc_1] Trial #362: GFLOPs: 152.1173. Time: 213.7433 us. Best GFLOPs: 220.6736
2024-04-29 06:27:42 [INFO] [task_scheduler.cc:131] [Task #61: fused_nn_contrib_conv2d_NCHWc_1] Trial #363: GFLOPs: 90.7635. Time: 358.2283 us. Best GFLOPs: 220.6736
2024-04-29 06:27:42 [INFO] [task_scheduler.cc:131] [Task #61: fused_nn_contrib_conv2d_NCHWc_1] Trial #364: GFLOPs: 76.9602. Time: 422.4785 us. Best GFLOPs: 220.6736
2024-04-29 06:27:42 [INFO] [task_scheduler.cc:131] [Task #61: fused_nn_contrib_conv2d_NCHWc_1] Trial #365: GFLOPs: 160.3162. Time: 202.8121 us. Best GFLOPs: 220.6736
2024-04-29 06:27:42 [INFO] [task_scheduler.cc:131] [Task #61: fused_nn_contrib_conv2d_NCHWc_1] Trial #366: GFLOPs: 166.8886. Time: 194.8249 us. Best GFLOPs: 220.6736
2024-04-29 06:27:42 [INFO] [task_scheduler.cc:131] [Task #61: fused_nn_contrib_conv2d_NCHWc_1] Trial #367: GFLOPs: 137.5788. Time: 236.3303 us. Best GFLOPs: 220.6736
2024-04-29 06:27:42 [INFO] [task_scheduler.cc:131] [Task #61: fused_nn_contrib_conv2d_NCHWc_1] Trial #368: GFLOPs: 194.1967. Time: 167.4284 us. Best GFLOPs: 220.6736
2024-04-29 06:27:42 [INFO] [task_scheduler.cc:131] [Task #61: fused_nn_contrib_conv2d_NCHWc_1] Trial #369: GFLOPs: 204.0103. Time: 159.3745 us. Best GFLOPs: 220.6736
2024-04-29 06:27:42 [INFO] [task_scheduler.cc:131] [Task #61: fused_nn_contrib_conv2d_NCHWc_1] Trial #370: GFLOPs: 198.0963. Time: 164.1325 us. Best GFLOPs: 220.6736
2024-04-29 06:27:42 [INFO] [task_scheduler.cc:131] [Task #61: fused_nn_contrib_conv2d_NCHWc_1] Trial #371: GFLOPs: 183.5304. Time: 177.1590 us. Best GFLOPs: 220.6736
2024-04-29 06:27:42 [INFO] [task_scheduler.cc:131] [Task #61: fused_nn_contrib_conv2d_NCHWc_1] Trial #372: GFLOPs: 170.6000. Time: 190.5865 us. Best GFLOPs: 220.6736
2024-04-29 06:27:42 [INFO] [task_scheduler.cc:131] [Task #61: fused_nn_contrib_conv2d_NCHWc_1] Trial #373: GFLOPs: 165.5614. Time: 196.3867 us. Best GFLOPs: 220.6736
2024-04-29 06:27:42 [INFO] [task_scheduler.cc:131] [Task #61: fused_nn_contrib_conv2d_NCHWc_1] Trial #374: GFLOPs: 182.5233. Time: 178.1364 us. Best GFLOPs: 220.6736
2024-04-29 06:27:42 [INFO] [task_scheduler.cc:131] [Task #61: fused_nn_contrib_conv2d_NCHWc_1] Trial #375: GFLOPs: 181.3495. Time: 179.2895 us. Best GFLOPs: 220.6736
2024-04-29 06:27:42 [INFO] [task_scheduler.cc:131] [Task #61: fused_nn_contrib_conv2d_NCHWc_1] Trial #376: GFLOPs: 187.4884. Time: 173.4190 us. Best GFLOPs: 220.6736
2024-04-29 06:27:42 [INFO] [task_scheduler.cc:131] [Task #61: fused_nn_contrib_conv2d_NCHWc_1] Trial #377: GFLOPs: 127.1483. Time: 255.7175 us. Best GFLOPs: 220.6736
2024-04-29 06:27:42 [INFO] [task_scheduler.cc:131] [Task #61: fused_nn_contrib_conv2d_NCHWc_1] Trial #378: GFLOPs: 140.0867. Time: 232.0994 us. Best GFLOPs: 220.6736
2024-04-29 06:27:42 [INFO] [task_scheduler.cc:131] [Task #61: fused_nn_contrib_conv2d_NCHWc_1] Trial #379: GFLOPs: 175.1197. Time: 185.6675 us. Best GFLOPs: 220.6736
2024-04-29 06:27:42 [INFO] [task_scheduler.cc:131] [Task #61: fused_nn_contrib_conv2d_NCHWc_1] Trial #380: GFLOPs: 164.4809. Time: 197.6767 us. Best GFLOPs: 220.6736
2024-04-29 06:27:42 [INFO] [task_scheduler.cc:131] [Task #61: fused_nn_contrib_conv2d_NCHWc_1] Trial #381: GFLOPs: 213.5988. Time: 152.2202 us. Best GFLOPs: 220.6736
2024-04-29 06:27:42 [INFO] [task_scheduler.cc:131] [Task #61: fused_nn_contrib_conv2d_NCHWc_1] Trial #382: GFLOPs: 4.4039. Time: 7383.0071 us. Best GFLOPs: 220.6736
2024-04-29 06:27:42 [INFO] [task_scheduler.cc:131] [Task #61: fused_nn_contrib_conv2d_NCHWc_1] Trial #383: GFLOPs: 15.8608. Time: 2049.9664 us. Best GFLOPs: 220.6736
2024-04-29 06:27:42 [INFO] [task_scheduler.cc:131] [Task #61: fused_nn_contrib_conv2d_NCHWc_1] Trial #384: GFLOPs: 149.2016. Time: 217.9202 us. Best GFLOPs: 220.6736
2024-04-29 06:41:02 [INFO] [evolutionary_search.cc:713] Generating candidates......
2024-04-29 06:41:03 [INFO] [evolutionary_search.cc:715] Picked top 102 candidate(s) from database
2024-04-29 06:41:07 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0xc83fed8)]: 13 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0xc5901d8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x15321f68)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x1063f078)]: 0 failure(s)
2024-04-29 06:41:07 [INFO] [evolutionary_search.cc:723] Sampled 397 candidate(s)
2024-04-29 06:41:18 [INFO] [evolutionary_search.cc:621] Evolve iter #0 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0xc83fed8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0xc5901d8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x15321f68)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x1063f078)]: 0 failure(s)
2024-04-29 06:41:29 [INFO] [evolutionary_search.cc:621] Evolve iter #1 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0xc83fed8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0xc5901d8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x15321f68)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x1063f078)]: 0 failure(s)
2024-04-29 06:41:40 [INFO] [evolutionary_search.cc:621] Evolve iter #2 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0xc83fed8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0xc5901d8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x15321f68)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x1063f078)]: 0 failure(s)
2024-04-29 06:41:51 [INFO] [evolutionary_search.cc:621] Evolve iter #3 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0xc83fed8)]: 1 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0xc5901d8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x15321f68)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x1063f078)]: 0 failure(s)
2024-04-29 06:41:56 [INFO] [evolutionary_search.cc:649] Scores of the best 64 candidates:
[1 : 16]:	0.8776  0.8575  0.8575  0.8575  0.8546  0.8546  0.8541  0.8541  0.8541  0.8532  0.8511  0.8511  0.8511  0.8414  0.8414  0.8319
[17 : 32]:	0.8319  0.8250  0.8250  0.8186  0.8186  0.8159  0.8159  0.8111  0.8111  0.8073  0.8014  0.8014  0.8014  0.8014  0.8014  0.8014
[33 : 48]:	0.8014  0.7989  0.7989  0.7989  0.7989  0.7975  0.7974  0.7963  0.7963  0.7953  0.7932  0.7901  0.7901  0.7901  0.7901  0.7895
[49 : 64]:	0.7895  0.7895  0.7851  0.7836  0.7836  0.7836  0.7836  0.7744  0.7697  0.7697  0.7688  0.7675  0.7586  0.7582  0.7556  0.7553
2024-04-29 06:41:57 [INFO] [evolutionary_search.cc:727] Got 64 candidate(s) with evolutionary search
2024-04-29 06:41:57 [INFO] [evolutionary_search.cc:730] Sending 64 candidates(s) for measurement
2024-04-29 06:43:40 [INFO] [task_scheduler.cc:131] [Task #61: fused_nn_contrib_conv2d_NCHWc_1] Trial #385: GFLOPs: 73.4235. Time: 442.8291 us. Best GFLOPs: 220.6736
2024-04-29 06:43:40 [INFO] [task_scheduler.cc:131] [Task #61: fused_nn_contrib_conv2d_NCHWc_1] Trial #386: GFLOPs: 167.2017. Time: 194.4600 us. Best GFLOPs: 220.6736
2024-04-29 06:43:40 [INFO] [task_scheduler.cc:131] [Task #61: fused_nn_contrib_conv2d_NCHWc_1] Trial #387: GFLOPs: 181.5764. Time: 179.0654 us. Best GFLOPs: 220.6736
2024-04-29 06:43:40 [INFO] [task_scheduler.cc:131] [Task #61: fused_nn_contrib_conv2d_NCHWc_1] Trial #388: GFLOPs: 117.7242. Time: 276.1884 us. Best GFLOPs: 220.6736
2024-04-29 06:43:40 [INFO] [task_scheduler.cc:131] [Task #61: fused_nn_contrib_conv2d_NCHWc_1] Trial #389: GFLOPs: 125.3409. Time: 259.4049 us. Best GFLOPs: 220.6736
2024-04-29 06:43:40 [INFO] [task_scheduler.cc:131] [Task #61: fused_nn_contrib_conv2d_NCHWc_1] Trial #390: GFLOPs: 130.9218. Time: 248.3471 us. Best GFLOPs: 220.6736
2024-04-29 06:43:40 [INFO] [task_scheduler.cc:131] [Task #61: fused_nn_contrib_conv2d_NCHWc_1] Trial #391: GFLOPs: 132.3376. Time: 245.6902 us. Best GFLOPs: 220.6736
2024-04-29 06:43:40 [INFO] [task_scheduler.cc:131] [Task #61: fused_nn_contrib_conv2d_NCHWc_1] Trial #392: GFLOPs: 168.3824. Time: 193.0965 us. Best GFLOPs: 220.6736
2024-04-29 06:43:40 [INFO] [task_scheduler.cc:131] [Task #61: fused_nn_contrib_conv2d_NCHWc_1] Trial #393: GFLOPs: 161.3249. Time: 201.5438 us. Best GFLOPs: 220.6736
2024-04-29 06:43:40 [INFO] [task_scheduler.cc:131] [Task #61: fused_nn_contrib_conv2d_NCHWc_1] Trial #394: GFLOPs: 135.1120. Time: 240.6452 us. Best GFLOPs: 220.6736
2024-04-29 06:43:40 [INFO] [task_scheduler.cc:131] [Task #61: fused_nn_contrib_conv2d_NCHWc_1] Trial #395: GFLOPs: 151.1967. Time: 215.0446 us. Best GFLOPs: 220.6736
2024-04-29 06:43:40 [INFO] [task_scheduler.cc:131] [Task #61: fused_nn_contrib_conv2d_NCHWc_1] Trial #396: GFLOPs: 104.4174. Time: 311.3854 us. Best GFLOPs: 220.6736
2024-04-29 06:43:40 [INFO] [task_scheduler.cc:131] [Task #61: fused_nn_contrib_conv2d_NCHWc_1] Trial #397: GFLOPs: 177.5013. Time: 183.1764 us. Best GFLOPs: 220.6736
2024-04-29 06:43:40 [INFO] [task_scheduler.cc:131] [Task #61: fused_nn_contrib_conv2d_NCHWc_1] Trial #398: GFLOPs: 136.7282. Time: 237.8006 us. Best GFLOPs: 220.6736
2024-04-29 06:43:40 [INFO] [task_scheduler.cc:131] [Task #61: fused_nn_contrib_conv2d_NCHWc_1] Trial #399: GFLOPs: 135.2771. Time: 240.3514 us. Best GFLOPs: 220.6736
2024-04-29 06:43:40 [INFO] [task_scheduler.cc:131] [Task #61: fused_nn_contrib_conv2d_NCHWc_1] Trial #400: GFLOPs: 190.7564. Time: 170.4480 us. Best GFLOPs: 220.6736
2024-04-29 06:43:40 [INFO] [task_scheduler.cc:131] [Task #61: fused_nn_contrib_conv2d_NCHWc_1] Trial #401: GFLOPs: 153.9922. Time: 211.1409 us. Best GFLOPs: 220.6736
2024-04-29 06:43:40 [INFO] [task_scheduler.cc:131] [Task #61: fused_nn_contrib_conv2d_NCHWc_1] Trial #402: GFLOPs: 80.3149. Time: 404.8322 us. Best GFLOPs: 220.6736
2024-04-29 06:43:40 [INFO] [task_scheduler.cc:131] [Task #61: fused_nn_contrib_conv2d_NCHWc_1] Trial #403: GFLOPs: 126.0398. Time: 257.9665 us. Best GFLOPs: 220.6736
2024-04-29 06:43:40 [INFO] [task_scheduler.cc:131] [Task #61: fused_nn_contrib_conv2d_NCHWc_1] Trial #404: GFLOPs: 161.3893. Time: 201.4635 us. Best GFLOPs: 220.6736
2024-04-29 06:43:40 [INFO] [task_scheduler.cc:131] [Task #61: fused_nn_contrib_conv2d_NCHWc_1] Trial #405: GFLOPs: 123.6296. Time: 262.9957 us. Best GFLOPs: 220.6736
2024-04-29 06:43:40 [INFO] [task_scheduler.cc:131] [Task #61: fused_nn_contrib_conv2d_NCHWc_1] Trial #406: GFLOPs: 175.0485. Time: 185.7430 us. Best GFLOPs: 220.6736
2024-04-29 06:43:40 [INFO] [task_scheduler.cc:131] [Task #61: fused_nn_contrib_conv2d_NCHWc_1] Trial #407: GFLOPs: 184.2029. Time: 176.5122 us. Best GFLOPs: 220.6736
2024-04-29 06:43:40 [INFO] [task_scheduler.cc:131] [Task #61: fused_nn_contrib_conv2d_NCHWc_1] Trial #408: GFLOPs: 116.9497. Time: 278.0174 us. Best GFLOPs: 220.6736
2024-04-29 06:43:40 [INFO] [task_scheduler.cc:131] [Task #61: fused_nn_contrib_conv2d_NCHWc_1] Trial #409: GFLOPs: 120.2279. Time: 270.4368 us. Best GFLOPs: 220.6736
2024-04-29 06:43:40 [INFO] [task_scheduler.cc:131] [Task #61: fused_nn_contrib_conv2d_NCHWc_1] Trial #410: GFLOPs: 120.8396. Time: 269.0679 us. Best GFLOPs: 220.6736
2024-04-29 06:43:40 [INFO] [task_scheduler.cc:131] [Task #61: fused_nn_contrib_conv2d_NCHWc_1] Trial #411: GFLOPs: 150.2280. Time: 216.4314 us. Best GFLOPs: 220.6736
2024-04-29 06:43:40 [INFO] [task_scheduler.cc:131] [Task #61: fused_nn_contrib_conv2d_NCHWc_1] Trial #412: GFLOPs: 166.7111. Time: 195.0323 us. Best GFLOPs: 220.6736
2024-04-29 06:43:40 [INFO] [task_scheduler.cc:131] [Task #61: fused_nn_contrib_conv2d_NCHWc_1] Trial #413: GFLOPs: 171.7177. Time: 189.3460 us. Best GFLOPs: 220.6736
2024-04-29 06:43:40 [INFO] [task_scheduler.cc:131] [Task #61: fused_nn_contrib_conv2d_NCHWc_1] Trial #414: GFLOPs: 149.2768. Time: 217.8104 us. Best GFLOPs: 220.6736
2024-04-29 06:43:40 [INFO] [task_scheduler.cc:131] [Task #61: fused_nn_contrib_conv2d_NCHWc_1] Trial #415: GFLOPs: 186.0537. Time: 174.7563 us. Best GFLOPs: 220.6736
2024-04-29 06:43:40 [INFO] [task_scheduler.cc:131] [Task #61: fused_nn_contrib_conv2d_NCHWc_1] Trial #416: GFLOPs: 184.4738. Time: 176.2529 us. Best GFLOPs: 220.6736
2024-04-29 06:43:40 [INFO] [task_scheduler.cc:131] [Task #61: fused_nn_contrib_conv2d_NCHWc_1] Trial #417: GFLOPs: 173.6429. Time: 187.2467 us. Best GFLOPs: 220.6736
2024-04-29 06:43:40 [INFO] [task_scheduler.cc:131] [Task #61: fused_nn_contrib_conv2d_NCHWc_1] Trial #418: GFLOPs: 172.2020. Time: 188.8134 us. Best GFLOPs: 220.6736
2024-04-29 06:43:40 [INFO] [task_scheduler.cc:131] [Task #61: fused_nn_contrib_conv2d_NCHWc_1] Trial #419: GFLOPs: 79.5136. Time: 408.9119 us. Best GFLOPs: 220.6736
2024-04-29 06:43:40 [INFO] [task_scheduler.cc:131] [Task #61: fused_nn_contrib_conv2d_NCHWc_1] Trial #420: GFLOPs: 159.6974. Time: 203.5979 us. Best GFLOPs: 220.6736
2024-04-29 06:43:40 [INFO] [task_scheduler.cc:131] [Task #61: fused_nn_contrib_conv2d_NCHWc_1] Trial #421: GFLOPs: 196.7662. Time: 165.2421 us. Best GFLOPs: 220.6736
2024-04-29 06:43:40 [INFO] [task_scheduler.cc:131] [Task #61: fused_nn_contrib_conv2d_NCHWc_1] Trial #422: GFLOPs: 172.0172. Time: 189.0163 us. Best GFLOPs: 220.6736
2024-04-29 06:43:40 [INFO] [task_scheduler.cc:131] [Task #61: fused_nn_contrib_conv2d_NCHWc_1] Trial #423: GFLOPs: 138.6952. Time: 234.4281 us. Best GFLOPs: 220.6736
2024-04-29 06:43:40 [INFO] [task_scheduler.cc:131] [Task #61: fused_nn_contrib_conv2d_NCHWc_1] Trial #424: GFLOPs: 134.7318. Time: 241.3243 us. Best GFLOPs: 220.6736
2024-04-29 06:43:40 [INFO] [task_scheduler.cc:131] [Task #61: fused_nn_contrib_conv2d_NCHWc_1] Trial #425: GFLOPs: 135.1594. Time: 240.5607 us. Best GFLOPs: 220.6736
2024-04-29 06:43:40 [INFO] [task_scheduler.cc:131] [Task #61: fused_nn_contrib_conv2d_NCHWc_1] Trial #426: GFLOPs: 158.2728. Time: 205.4304 us. Best GFLOPs: 220.6736
2024-04-29 06:43:40 [INFO] [task_scheduler.cc:131] [Task #61: fused_nn_contrib_conv2d_NCHWc_1] Trial #427: GFLOPs: 122.3048. Time: 265.8444 us. Best GFLOPs: 220.6736
2024-04-29 06:43:40 [INFO] [task_scheduler.cc:131] [Task #61: fused_nn_contrib_conv2d_NCHWc_1] Trial #428: GFLOPs: 147.8336. Time: 219.9367 us. Best GFLOPs: 220.6736
2024-04-29 06:43:40 [INFO] [task_scheduler.cc:131] [Task #61: fused_nn_contrib_conv2d_NCHWc_1] Trial #429: GFLOPs: 159.7343. Time: 203.5508 us. Best GFLOPs: 220.6736
2024-04-29 06:43:40 [INFO] [task_scheduler.cc:131] [Task #61: fused_nn_contrib_conv2d_NCHWc_1] Trial #430: GFLOPs: 174.5873. Time: 186.2338 us. Best GFLOPs: 220.6736
2024-04-29 06:43:40 [INFO] [task_scheduler.cc:131] [Task #61: fused_nn_contrib_conv2d_NCHWc_1] Trial #431: GFLOPs: 156.8922. Time: 207.2382 us. Best GFLOPs: 220.6736
2024-04-29 06:43:40 [INFO] [task_scheduler.cc:131] [Task #61: fused_nn_contrib_conv2d_NCHWc_1] Trial #432: GFLOPs: 183.7819. Time: 176.9165 us. Best GFLOPs: 220.6736
2024-04-29 06:43:40 [INFO] [task_scheduler.cc:131] [Task #61: fused_nn_contrib_conv2d_NCHWc_1] Trial #433: GFLOPs: 139.0805. Time: 233.7786 us. Best GFLOPs: 220.6736
2024-04-29 06:43:40 [INFO] [task_scheduler.cc:131] [Task #61: fused_nn_contrib_conv2d_NCHWc_1] Trial #434: GFLOPs: 119.2323. Time: 272.6950 us. Best GFLOPs: 220.6736
2024-04-29 06:43:40 [INFO] [task_scheduler.cc:131] [Task #61: fused_nn_contrib_conv2d_NCHWc_1] Trial #435: GFLOPs: 175.6218. Time: 185.1367 us. Best GFLOPs: 220.6736
2024-04-29 06:43:40 [INFO] [task_scheduler.cc:131] [Task #61: fused_nn_contrib_conv2d_NCHWc_1] Trial #436: GFLOPs: 130.1635. Time: 249.7939 us. Best GFLOPs: 220.6736
2024-04-29 06:43:40 [INFO] [task_scheduler.cc:131] [Task #61: fused_nn_contrib_conv2d_NCHWc_1] Trial #437: GFLOPs: 116.9563. Time: 278.0017 us. Best GFLOPs: 220.6736
2024-04-29 06:43:40 [INFO] [task_scheduler.cc:131] [Task #61: fused_nn_contrib_conv2d_NCHWc_1] Trial #438: GFLOPs: 195.2788. Time: 166.5007 us. Best GFLOPs: 220.6736
2024-04-29 06:43:40 [INFO] [task_scheduler.cc:131] [Task #61: fused_nn_contrib_conv2d_NCHWc_1] Trial #439: GFLOPs: 125.8561. Time: 258.3430 us. Best GFLOPs: 220.6736
2024-04-29 06:43:40 [INFO] [task_scheduler.cc:131] [Task #61: fused_nn_contrib_conv2d_NCHWc_1] Trial #440: GFLOPs: 155.5829. Time: 208.9821 us. Best GFLOPs: 220.6736
2024-04-29 06:43:40 [INFO] [task_scheduler.cc:131] [Task #61: fused_nn_contrib_conv2d_NCHWc_1] Trial #441: GFLOPs: 141.6409. Time: 229.5528 us. Best GFLOPs: 220.6736
2024-04-29 06:43:40 [INFO] [task_scheduler.cc:131] [Task #61: fused_nn_contrib_conv2d_NCHWc_1] Trial #442: GFLOPs: 149.1125. Time: 218.0505 us. Best GFLOPs: 220.6736
2024-04-29 06:43:40 [INFO] [task_scheduler.cc:131] [Task #61: fused_nn_contrib_conv2d_NCHWc_1] Trial #443: GFLOPs: 174.9092. Time: 185.8910 us. Best GFLOPs: 220.6736
2024-04-29 06:43:40 [INFO] [task_scheduler.cc:131] [Task #61: fused_nn_contrib_conv2d_NCHWc_1] Trial #444: GFLOPs: 83.8569. Time: 387.7324 us. Best GFLOPs: 220.6736
2024-04-29 06:43:40 [INFO] [task_scheduler.cc:131] [Task #61: fused_nn_contrib_conv2d_NCHWc_1] Trial #445: GFLOPs: 220.4774. Time: 147.4711 us. Best GFLOPs: 220.6736
2024-04-29 06:43:40 [INFO] [task_scheduler.cc:131] [Task #61: fused_nn_contrib_conv2d_NCHWc_1] Trial #446: GFLOPs: 3.4374. Time: 9458.9900 us. Best GFLOPs: 220.6736
2024-04-29 06:43:40 [INFO] [task_scheduler.cc:131] [Task #61: fused_nn_contrib_conv2d_NCHWc_1] Trial #447: GFLOPs: 22.7546. Time: 1428.8991 us. Best GFLOPs: 220.6736
2024-04-29 06:43:40 [INFO] [task_scheduler.cc:131] [Task #61: fused_nn_contrib_conv2d_NCHWc_1] Trial #448: GFLOPs: 2.3290. Time: 13960.4851 us. Best GFLOPs: 220.6736
2024-04-29 06:58:22 [INFO] [evolutionary_search.cc:713] Generating candidates......
2024-04-29 06:58:23 [INFO] [evolutionary_search.cc:715] Picked top 102 candidate(s) from database
2024-04-29 06:58:27 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0xc83fed8)]: 8 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0xc5901d8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x15321f68)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x1063f078)]: 0 failure(s)
2024-04-29 06:58:27 [INFO] [evolutionary_search.cc:723] Sampled 402 candidate(s)
2024-04-29 06:58:38 [INFO] [evolutionary_search.cc:621] Evolve iter #0 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0xc83fed8)]: 2 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0xc5901d8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x15321f68)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x1063f078)]: 0 failure(s)
2024-04-29 06:58:49 [INFO] [evolutionary_search.cc:621] Evolve iter #1 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0xc83fed8)]: 1 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0xc5901d8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x15321f68)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x1063f078)]: 0 failure(s)
2024-04-29 06:59:00 [INFO] [evolutionary_search.cc:621] Evolve iter #2 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0xc83fed8)]: 2 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0xc5901d8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x15321f68)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x1063f078)]: 0 failure(s)
2024-04-29 06:59:11 [INFO] [evolutionary_search.cc:621] Evolve iter #3 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0xc83fed8)]: 3 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0xc5901d8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x15321f68)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x1063f078)]: 0 failure(s)
2024-04-29 06:59:16 [INFO] [evolutionary_search.cc:649] Scores of the best 64 candidates:
[1 : 16]:	0.8185  0.8158  0.8025  0.7935  0.7703  0.7649  0.7635  0.7635  0.7596  0.7596  0.7596  0.7596  0.7596  0.7589  0.7578  0.7576
[17 : 32]:	0.7571  0.7545  0.7545  0.7544  0.7544  0.7518  0.7500  0.7500  0.7500  0.7500  0.7500  0.7492  0.7473  0.7472  0.7472  0.7472
[33 : 48]:	0.7465  0.7465  0.7465  0.7465  0.7465  0.7465  0.7465  0.7465  0.7465  0.7465  0.7465  0.7442  0.7431  0.7431  0.7431  0.7427
[49 : 64]:	0.7427  0.7414  0.7399  0.7393  0.7387  0.7381  0.7379  0.7377  0.7377  0.7357  0.7357  0.7343  0.7324  0.7324  0.7324  0.7324
2024-04-29 06:59:17 [INFO] [evolutionary_search.cc:727] Got 64 candidate(s) with evolutionary search
2024-04-29 06:59:17 [INFO] [evolutionary_search.cc:730] Sending 64 candidates(s) for measurement
2024-04-29 07:00:58 [INFO] [task_scheduler.cc:131] [Task #61: fused_nn_contrib_conv2d_NCHWc_1] Trial #449: GFLOPs: 91.3000. Time: 356.1233 us. Best GFLOPs: 220.6736
2024-04-29 07:00:58 [INFO] [task_scheduler.cc:131] [Task #61: fused_nn_contrib_conv2d_NCHWc_1] Trial #450: GFLOPs: 92.3304. Time: 352.1487 us. Best GFLOPs: 220.6736
2024-04-29 07:00:58 [INFO] [task_scheduler.cc:131] [Task #61: fused_nn_contrib_conv2d_NCHWc_1] Trial #451: GFLOPs: 79.2967. Time: 410.0305 us. Best GFLOPs: 220.6736
2024-04-29 07:00:58 [INFO] [task_scheduler.cc:131] [Task #61: fused_nn_contrib_conv2d_NCHWc_1] Trial #452: GFLOPs: 44.8994. Time: 724.1527 us. Best GFLOPs: 220.6736
2024-04-29 07:00:58 [INFO] [task_scheduler.cc:131] [Task #61: fused_nn_contrib_conv2d_NCHWc_1] Trial #453: GFLOPs: 169.7751. Time: 191.5124 us. Best GFLOPs: 220.6736
2024-04-29 07:00:58 [INFO] [task_scheduler.cc:131] [Task #61: fused_nn_contrib_conv2d_NCHWc_1] Trial #454: GFLOPs: 141.5178. Time: 229.7523 us. Best GFLOPs: 220.6736
2024-04-29 07:00:58 [INFO] [task_scheduler.cc:131] [Task #61: fused_nn_contrib_conv2d_NCHWc_1] Trial #455: GFLOPs: 169.6018. Time: 191.7081 us. Best GFLOPs: 220.6736
2024-04-29 07:00:58 [INFO] [task_scheduler.cc:131] [Task #61: fused_nn_contrib_conv2d_NCHWc_1] Trial #456: GFLOPs: 169.2060. Time: 192.1566 us. Best GFLOPs: 220.6736
2024-04-29 07:00:58 [INFO] [task_scheduler.cc:131] [Task #61: fused_nn_contrib_conv2d_NCHWc_1] Trial #457: GFLOPs: 91.7943. Time: 354.2054 us. Best GFLOPs: 220.6736
2024-04-29 07:00:58 [INFO] [task_scheduler.cc:131] [Task #61: fused_nn_contrib_conv2d_NCHWc_1] Trial #458: GFLOPs: 83.9938. Time: 387.1004 us. Best GFLOPs: 220.6736
2024-04-29 07:00:58 [INFO] [task_scheduler.cc:131] [Task #61: fused_nn_contrib_conv2d_NCHWc_1] Trial #459: GFLOPs: 93.1530. Time: 349.0391 us. Best GFLOPs: 220.6736
2024-04-29 07:00:58 [INFO] [task_scheduler.cc:131] [Task #61: fused_nn_contrib_conv2d_NCHWc_1] Trial #460: GFLOPs: 87.0261. Time: 373.6126 us. Best GFLOPs: 220.6736
2024-04-29 07:00:58 [INFO] [task_scheduler.cc:131] [Task #61: fused_nn_contrib_conv2d_NCHWc_1] Trial #461: GFLOPs: 81.4393. Time: 399.2427 us. Best GFLOPs: 220.6736
2024-04-29 07:00:58 [INFO] [task_scheduler.cc:131] [Task #61: fused_nn_contrib_conv2d_NCHWc_1] Trial #462: GFLOPs: 174.9765. Time: 185.8195 us. Best GFLOPs: 220.6736
2024-04-29 07:00:58 [INFO] [task_scheduler.cc:131] [Task #61: fused_nn_contrib_conv2d_NCHWc_1] Trial #463: GFLOPs: 139.9317. Time: 232.3565 us. Best GFLOPs: 220.6736
2024-04-29 07:00:58 [INFO] [task_scheduler.cc:131] [Task #61: fused_nn_contrib_conv2d_NCHWc_1] Trial #464: GFLOPs: 80.2318. Time: 405.2512 us. Best GFLOPs: 220.6736
2024-04-29 07:00:58 [INFO] [task_scheduler.cc:131] [Task #61: fused_nn_contrib_conv2d_NCHWc_1] Trial #465: GFLOPs: 51.9077. Time: 626.3816 us. Best GFLOPs: 220.6736
2024-04-29 07:00:58 [INFO] [task_scheduler.cc:131] [Task #61: fused_nn_contrib_conv2d_NCHWc_1] Trial #466: GFLOPs: 157.2806. Time: 206.7264 us. Best GFLOPs: 220.6736
2024-04-29 07:00:58 [INFO] [task_scheduler.cc:131] [Task #61: fused_nn_contrib_conv2d_NCHWc_1] Trial #467: GFLOPs: 158.3927. Time: 205.2749 us. Best GFLOPs: 220.6736
2024-04-29 07:00:58 [INFO] [task_scheduler.cc:131] [Task #61: fused_nn_contrib_conv2d_NCHWc_1] Trial #468: GFLOPs: 205.7752. Time: 158.0076 us. Best GFLOPs: 220.6736
2024-04-29 07:00:58 [INFO] [task_scheduler.cc:131] [Task #61: fused_nn_contrib_conv2d_NCHWc_1] Trial #469: GFLOPs: 183.9243. Time: 176.7796 us. Best GFLOPs: 220.6736
2024-04-29 07:00:59 [INFO] [task_scheduler.cc:121] [Task #61: fused_nn_contrib_conv2d_NCHWc_1] Trial #470: Error in building:
LocalBuilder: Timeout, killed after 30.0 seconds
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(48), T.int64(14), T.int64(14), T.int64(4)), "float32"), p1: T.Buffer((T.int64(12), T.int64(48), T.int64(3), T.int64(3), T.int64(4), T.int64(4)), "float32"), conv2d_NCHWc: T.Buffer((T.int64(1), T.int64(12), T.int64(14), T.int64(14), T.int64(4)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        data_pad = T.alloc_buffer((T.int64(1), T.int64(48), T.int64(16), T.int64(16), T.int64(4)))
        conv2d_NCHWc_global = T.alloc_buffer((T.int64(1), T.int64(12), T.int64(14), T.int64(14), T.int64(4)))
        for n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused_fused in T.parallel(T.int64(168), annotations={"pragma_auto_unroll_max_step": 512, "pragma_unroll_explicit": 1}):
            for n_2_init, oc_chunk_2_init, oh_2_init, ow_2_init, oc_block_2_init, n_3_init, oc_chunk_3_init, oh_3_init, ow_3_init in T.grid(T.int64(1), T.int64(2), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(7), T.int64(1)):
                for oc_block_3_fused_init in T.vectorized(T.int64(4)):
                    with T.block("conv2d_NCHWc_init"):
                        v_n = T.axis.spatial(T.int64(1), n_2_init + n_3_init)
                        v_oc_chunk = T.axis.spatial(T.int64(12), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused_fused % T.int64(12) // T.int64(2) * T.int64(2) + oc_chunk_2_init + oc_chunk_3_init)
                        v_oh = T.axis.spatial(T.int64(14), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused_fused // T.int64(84) * T.int64(7) + oh_2_init * T.int64(7) + oh_3_init)
                        v_ow = T.axis.spatial(T.int64(14), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused_fused % T.int64(84) // T.int64(12) * T.int64(2) + n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused_fused % T.int64(2) + ow_2_init + ow_3_init)
                        v_oc_block = T.axis.spatial(T.int64(4), oc_block_2_init * T.int64(4) + oc_block_3_fused_init)
                        T.reads()
                        T.writes(conv2d_NCHWc_global[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                        T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                        conv2d_NCHWc_global[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = T.float32(0)
            for ic_0 in range(T.int64(8)):
                for ax0, ax1, ax2 in T.grid(T.int64(1), T.int64(6), T.int64(9)):
                    for ax3_ax4_fused in T.vectorized(T.int64(12)):
                        with T.block("data_pad"):
                            v_i0 = T.axis.spatial(T.int64(1), ax0)
                            v_i1 = T.axis.spatial(T.int64(48), ic_0 * T.int64(6) + ax1)
                            v_i2 = T.axis.spatial(T.int64(16), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused_fused // T.int64(84) * T.int64(7) + ax2)
                            v_i3 = T.axis.spatial(T.int64(16), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused_fused % T.int64(2) + n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused_fused % T.int64(84) // T.int64(12) * T.int64(2) + ax3_ax4_fused // T.int64(4))
                            v_i4 = T.axis.spatial(T.int64(4), ax3_ax4_fused % T.int64(4))
                            T.reads(p0[v_i0, v_i1, v_i2 - T.int64(1), v_i3 - T.int64(1), v_i4])
                            T.writes(data_pad[v_i0, v_i1, v_i2, v_i3, v_i4])
                            data_pad[v_i0, v_i1, v_i2, v_i3, v_i4] = T.if_then_else(T.int64(1) <= v_i2 and v_i2 < T.int64(15) and T.int64(1) <= v_i3 and v_i3 < T.int64(15), p0[v_i0, v_i1, v_i2 - T.int64(1), v_i3 - T.int64(1), v_i4], T.float32(0))
                for kh_0, kw_0, n_2, oc_chunk_2, oh_2, ow_2, oc_block_2, ic_1, kh_1, kw_1, n_3, oc_chunk_3, oh_3, ow_3 in T.grid(T.int64(1), T.int64(3), T.int64(1), T.int64(2), T.int64(1), T.int64(1), T.int64(1), T.int64(24), T.int64(3), T.int64(1), T.int64(1), T.int64(1), T.int64(7), T.int64(1)):
                    for oc_block_3_fused in T.vectorized(T.int64(4)):
                        with T.block("conv2d_NCHWc_update"):
                            v_n = T.axis.spatial(T.int64(1), n_2 + n_3)
                            v_oc_chunk = T.axis.spatial(T.int64(12), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused_fused % T.int64(12) // T.int64(2) * T.int64(2) + oc_chunk_2 + oc_chunk_3)
                            v_oh = T.axis.spatial(T.int64(14), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused_fused // T.int64(84) * T.int64(7) + oh_2 * T.int64(7) + oh_3)
                            v_ow = T.axis.spatial(T.int64(14), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused_fused % T.int64(84) // T.int64(12) * T.int64(2) + n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused_fused % T.int64(2) + ow_2 + ow_3)
                            v_oc_block = T.axis.spatial(T.int64(4), oc_block_2 * T.int64(4) + oc_block_3_fused)
                            v_ic = T.axis.reduce(T.int64(192), ic_0 * T.int64(24) + ic_1)
                            v_kh = T.axis.reduce(T.int64(3), kh_0 * T.int64(3) + kh_1)
                            v_kw = T.axis.reduce(T.int64(3), kw_0 + kw_1)
                            T.reads(conv2d_NCHWc_global[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block], data_pad[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)], p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block])
                            T.writes(conv2d_NCHWc_global[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                            T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                            conv2d_NCHWc_global[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = conv2d_NCHWc_global[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] + data_pad[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)] * p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block]
            for ax0, ax1, ax2 in T.grid(T.int64(1), T.int64(2), T.int64(7)):
                for ax3_ax4_fused in T.vectorized(T.int64(4)):
                    with T.block("conv2d_NCHWc_global"):
                        v0 = T.axis.spatial(T.int64(1), ax0)
                        v1 = T.axis.spatial(T.int64(12), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused_fused % T.int64(12) // T.int64(2) * T.int64(2) + ax1)
                        v2 = T.axis.spatial(T.int64(14), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused_fused // T.int64(84) * T.int64(7) + ax2)
                        v3 = T.axis.spatial(T.int64(14), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused_fused % T.int64(84) // T.int64(12) * T.int64(2) + n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused_fused % T.int64(2))
                        v4 = T.axis.spatial(T.int64(4), ax3_ax4_fused)
                        T.reads(conv2d_NCHWc_global[v0, v1, v2, v3, v4])
                        T.writes(conv2d_NCHWc[v0, v1, v2, v3, v4])
                        conv2d_NCHWc[v0, v1, v2, v3, v4] = conv2d_NCHWc_global[v0, v1, v2, v3, v4]
b0 = sch.get_block(name="data_pad", func_name="main")
b1 = sch.get_block(name="conv2d_NCHWc", func_name="main")
b2 = sch.get_block(name="root", func_name="main")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSRSRS")
l3, l4, l5, l6, l7, l8, l9, l10 = sch.get_loops(block=b1)
v11, v12, v13, v14 = sch.sample_perfect_tile(loop=l3, n=4, max_innermost_factor=64, decision=[1, 1, 1, 1])
l15, l16, l17, l18 = sch.split(loop=l3, factors=[v11, v12, v13, v14], preserve_unit_iters=True)
v19, v20, v21, v22 = sch.sample_perfect_tile(loop=l4, n=4, max_innermost_factor=64, decision=[1, 6, 2, 1])
l23, l24, l25, l26 = sch.split(loop=l4, factors=[v19, v20, v21, v22], preserve_unit_iters=True)
v27, v28, v29, v30 = sch.sample_perfect_tile(loop=l5, n=4, max_innermost_factor=64, decision=[2, 1, 1, 7])
l31, l32, l33, l34 = sch.split(loop=l5, factors=[v27, v28, v29, v30], preserve_unit_iters=True)
v35, v36, v37, v38 = sch.sample_perfect_tile(loop=l6, n=4, max_innermost_factor=64, decision=[7, 2, 1, 1])
l39, l40, l41, l42 = sch.split(loop=l6, factors=[v35, v36, v37, v38], preserve_unit_iters=True)
v43, v44, v45, v46 = sch.sample_perfect_tile(loop=l7, n=4, max_innermost_factor=64, decision=[1, 1, 1, 4])
l47, l48, l49, l50 = sch.split(loop=l7, factors=[v43, v44, v45, v46], preserve_unit_iters=True)
v51, v52 = sch.sample_perfect_tile(loop=l8, n=2, max_innermost_factor=64, decision=[8, 24])
l53, l54 = sch.split(loop=l8, factors=[v51, v52], preserve_unit_iters=True)
v55, v56 = sch.sample_perfect_tile(loop=l9, n=2, max_innermost_factor=64, decision=[1, 3])
l57, l58 = sch.split(loop=l9, factors=[v55, v56], preserve_unit_iters=True)
v59, v60 = sch.sample_perfect_tile(loop=l10, n=2, max_innermost_factor=64, decision=[3, 1])
l61, l62 = sch.split(loop=l10, factors=[v59, v60], preserve_unit_iters=True)
sch.reorder(l15, l23, l31, l39, l47, l16, l24, l32, l40, l48, l53, l57, l61, l17, l25, l33, l41, l49, l54, l58, l62, l18, l26, l34, l42, l50)
b63 = sch.cache_write(block=b1, write_buffer_index=0, storage_scope="global")
sch.reverse_compute_at(block=b63, loop=l48, preserve_unit_loops=True, index=-1)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.vectorize", ann_val=64)
v64 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.unroll_explicit", ann_val=v64)
l65 = sch.sample_compute_location(block=b0, decision=10)
sch.compute_at(block=b0, loop=l65, preserve_unit_loops=True, index=-1)
sch.enter_postproc()
b66 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b66, ann_key="meta_schedule.parallel")
sch.unannotate(block_or_loop=b66, ann_key="meta_schedule.vectorize")
sch.unannotate(block_or_loop=b66, ann_key="meta_schedule.unroll_explicit")
b67, b68, b69 = sch.get_child_blocks(b66)
l70, l71, l72, l73, l74, l75, l76, l77, l78, l79, l80, l81, l82, l83, l84, l85 = sch.get_loops(block=b67)
l86 = sch.fuse(l70, l71, l72, l73, l74, l75, l76, l77, l78, l79, preserve_unit_iters=True)
sch.parallel(loop=l86)
l87 = sch.fuse(l84, l85, preserve_unit_iters=True)
sch.vectorize(loop=l87)
l88, l89, l90, l91, l92, l93, l94, l95, l96, l97, l98, l99, l100, l101, l102, l103, l104 = sch.get_loops(block=b68)
l105 = sch.fuse(l88, preserve_unit_iters=True)
sch.parallel(loop=l105)
l106 = sch.fuse(l104, preserve_unit_iters=True)
sch.vectorize(loop=l106)
sch.annotate(block_or_loop=l105, ann_key="pragma_auto_unroll_max_step", ann_val=512)
sch.annotate(block_or_loop=l105, ann_key="pragma_unroll_explicit", ann_val=1)
l107, l108, l109, l110, l111, l112 = sch.get_loops(block=b69)
l113 = sch.fuse(l111, l112, preserve_unit_iters=True)
sch.vectorize(loop=l113)
b114 = sch.get_block(name="conv2d_NCHWc", func_name="main")
l115, l116, l117, l118, l119, l120, l121, l122, l123, l124, l125, l126, l127, l128, l129, l130, l131 = sch.get_loops(block=b114)
b132 = sch.decompose_reduction(block=b114, loop=l116)
2024-04-29 07:00:59 [INFO] [task_scheduler.cc:131] [Task #61: fused_nn_contrib_conv2d_NCHWc_1] Trial #471: GFLOPs: 181.7970. Time: 178.8481 us. Best GFLOPs: 220.6736
2024-04-29 07:00:59 [INFO] [task_scheduler.cc:131] [Task #61: fused_nn_contrib_conv2d_NCHWc_1] Trial #472: GFLOPs: 181.4093. Time: 179.2303 us. Best GFLOPs: 220.6736
2024-04-29 07:00:59 [INFO] [task_scheduler.cc:131] [Task #61: fused_nn_contrib_conv2d_NCHWc_1] Trial #473: GFLOPs: 175.3441. Time: 185.4300 us. Best GFLOPs: 220.6736
2024-04-29 07:00:59 [INFO] [task_scheduler.cc:131] [Task #61: fused_nn_contrib_conv2d_NCHWc_1] Trial #474: GFLOPs: 183.4595. Time: 177.2274 us. Best GFLOPs: 220.6736
2024-04-29 07:00:59 [INFO] [task_scheduler.cc:131] [Task #61: fused_nn_contrib_conv2d_NCHWc_1] Trial #475: GFLOPs: 181.3425. Time: 179.2963 us. Best GFLOPs: 220.6736
2024-04-29 07:00:59 [INFO] [task_scheduler.cc:131] [Task #61: fused_nn_contrib_conv2d_NCHWc_1] Trial #476: GFLOPs: 193.1694. Time: 168.3188 us. Best GFLOPs: 220.6736
2024-04-29 07:00:59 [INFO] [task_scheduler.cc:131] [Task #61: fused_nn_contrib_conv2d_NCHWc_1] Trial #477: GFLOPs: 160.0711. Time: 203.1226 us. Best GFLOPs: 220.6736
2024-04-29 07:00:59 [INFO] [task_scheduler.cc:131] [Task #61: fused_nn_contrib_conv2d_NCHWc_1] Trial #478: GFLOPs: 186.9026. Time: 173.9625 us. Best GFLOPs: 220.6736
2024-04-29 07:00:59 [INFO] [task_scheduler.cc:131] [Task #61: fused_nn_contrib_conv2d_NCHWc_1] Trial #479: GFLOPs: 83.2672. Time: 390.4784 us. Best GFLOPs: 220.6736
2024-04-29 07:00:59 [INFO] [task_scheduler.cc:131] [Task #61: fused_nn_contrib_conv2d_NCHWc_1] Trial #480: GFLOPs: 111.7173. Time: 291.0387 us. Best GFLOPs: 220.6736
2024-04-29 07:00:59 [INFO] [task_scheduler.cc:131] [Task #61: fused_nn_contrib_conv2d_NCHWc_1] Trial #481: GFLOPs: 139.1348. Time: 233.6873 us. Best GFLOPs: 220.6736
2024-04-29 07:00:59 [INFO] [task_scheduler.cc:131] [Task #61: fused_nn_contrib_conv2d_NCHWc_1] Trial #482: GFLOPs: 202.9915. Time: 160.1744 us. Best GFLOPs: 220.6736
2024-04-29 07:00:59 [INFO] [task_scheduler.cc:131] [Task #61: fused_nn_contrib_conv2d_NCHWc_1] Trial #483: GFLOPs: 203.0296. Time: 160.1443 us. Best GFLOPs: 220.6736
2024-04-29 07:00:59 [INFO] [task_scheduler.cc:131] [Task #61: fused_nn_contrib_conv2d_NCHWc_1] Trial #484: GFLOPs: 188.5650. Time: 172.4289 us. Best GFLOPs: 220.6736
2024-04-29 07:00:59 [INFO] [task_scheduler.cc:131] [Task #61: fused_nn_contrib_conv2d_NCHWc_1] Trial #485: GFLOPs: 177.0943. Time: 183.5974 us. Best GFLOPs: 220.6736
2024-04-29 07:00:59 [INFO] [task_scheduler.cc:131] [Task #61: fused_nn_contrib_conv2d_NCHWc_1] Trial #486: GFLOPs: 151.6671. Time: 214.3777 us. Best GFLOPs: 220.6736
2024-04-29 07:00:59 [INFO] [task_scheduler.cc:131] [Task #61: fused_nn_contrib_conv2d_NCHWc_1] Trial #487: GFLOPs: 164.7650. Time: 197.3359 us. Best GFLOPs: 220.6736
2024-04-29 07:00:59 [INFO] [task_scheduler.cc:131] [Task #61: fused_nn_contrib_conv2d_NCHWc_1] Trial #488: GFLOPs: 173.5028. Time: 187.3978 us. Best GFLOPs: 220.6736
2024-04-29 07:00:59 [INFO] [task_scheduler.cc:131] [Task #61: fused_nn_contrib_conv2d_NCHWc_1] Trial #489: GFLOPs: 167.5315. Time: 194.0772 us. Best GFLOPs: 220.6736
2024-04-29 07:00:59 [INFO] [task_scheduler.cc:131] [Task #61: fused_nn_contrib_conv2d_NCHWc_1] Trial #490: GFLOPs: 149.2574. Time: 217.8388 us. Best GFLOPs: 220.6736
2024-04-29 07:00:59 [INFO] [task_scheduler.cc:131] [Task #61: fused_nn_contrib_conv2d_NCHWc_1] Trial #491: GFLOPs: 169.6956. Time: 191.6022 us. Best GFLOPs: 220.6736
2024-04-29 07:00:59 [INFO] [task_scheduler.cc:131] [Task #61: fused_nn_contrib_conv2d_NCHWc_1] Trial #492: GFLOPs: 172.0829. Time: 188.9441 us. Best GFLOPs: 220.6736
2024-04-29 07:00:59 [INFO] [task_scheduler.cc:131] [Task #61: fused_nn_contrib_conv2d_NCHWc_1] Trial #493: GFLOPs: 191.5479. Time: 169.7437 us. Best GFLOPs: 220.6736
2024-04-29 07:00:59 [INFO] [task_scheduler.cc:131] [Task #61: fused_nn_contrib_conv2d_NCHWc_1] Trial #494: GFLOPs: 182.3170. Time: 178.3380 us. Best GFLOPs: 220.6736
2024-04-29 07:00:59 [INFO] [task_scheduler.cc:131] [Task #61: fused_nn_contrib_conv2d_NCHWc_1] Trial #495: GFLOPs: 107.2756. Time: 303.0890 us. Best GFLOPs: 220.6736
2024-04-29 07:00:59 [INFO] [task_scheduler.cc:131] [Task #61: fused_nn_contrib_conv2d_NCHWc_1] Trial #496: GFLOPs: 181.7618. Time: 178.8827 us. Best GFLOPs: 220.6736
2024-04-29 07:00:59 [INFO] [task_scheduler.cc:131] [Task #61: fused_nn_contrib_conv2d_NCHWc_1] Trial #497: GFLOPs: 133.9838. Time: 242.6714 us. Best GFLOPs: 220.6736
2024-04-29 07:00:59 [INFO] [task_scheduler.cc:131] [Task #61: fused_nn_contrib_conv2d_NCHWc_1] Trial #498: GFLOPs: 111.4706. Time: 291.6827 us. Best GFLOPs: 220.6736
2024-04-29 07:00:59 [INFO] [task_scheduler.cc:121] [Task #61: fused_nn_contrib_conv2d_NCHWc_1] Trial #499: Error in building:
LocalBuilder: Timeout, killed after 30.0 seconds
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(48), T.int64(14), T.int64(14), T.int64(4)), "float32"), p1: T.Buffer((T.int64(12), T.int64(48), T.int64(3), T.int64(3), T.int64(4), T.int64(4)), "float32"), conv2d_NCHWc: T.Buffer((T.int64(1), T.int64(12), T.int64(14), T.int64(14), T.int64(4)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        data_pad = T.alloc_buffer((T.int64(1), T.int64(48), T.int64(16), T.int64(16), T.int64(4)))
        conv2d_NCHWc_global = T.alloc_buffer((T.int64(1), T.int64(12), T.int64(14), T.int64(14), T.int64(4)))
        for n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused_fused in T.parallel(T.int64(168), annotations={"pragma_auto_unroll_max_step": 512, "pragma_unroll_explicit": 1}):
            for n_2_init, oc_chunk_2_init, oh_2_init, ow_2_init, oc_block_2_init, n_3_init, oc_chunk_3_init, oh_3_init, ow_3_init in T.grid(T.int64(1), T.int64(2), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(7), T.int64(1)):
                for oc_block_3_fused_init in T.vectorized(T.int64(4)):
                    with T.block("conv2d_NCHWc_init"):
                        v_n = T.axis.spatial(T.int64(1), n_2_init + n_3_init)
                        v_oc_chunk = T.axis.spatial(T.int64(12), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused_fused // T.int64(84) * T.int64(6) + n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused_fused % T.int64(6) // T.int64(2) * T.int64(2) + oc_chunk_2_init + oc_chunk_3_init)
                        v_oh = T.axis.spatial(T.int64(14), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused_fused % T.int64(84) // T.int64(42) * T.int64(7) + oh_2_init * T.int64(7) + oh_3_init)
                        v_ow = T.axis.spatial(T.int64(14), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused_fused % T.int64(42) // T.int64(6) * T.int64(2) + n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused_fused % T.int64(2) + ow_2_init + ow_3_init)
                        v_oc_block = T.axis.spatial(T.int64(4), oc_block_2_init * T.int64(4) + oc_block_3_fused_init)
                        T.reads()
                        T.writes(conv2d_NCHWc_global[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                        T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                        conv2d_NCHWc_global[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = T.float32(0)
            for ic_0 in range(T.int64(8)):
                for ax0, ax1, ax2 in T.grid(T.int64(1), T.int64(6), T.int64(9)):
                    for ax3_ax4_fused in T.vectorized(T.int64(12)):
                        with T.block("data_pad"):
                            v_i0 = T.axis.spatial(T.int64(1), ax0)
                            v_i1 = T.axis.spatial(T.int64(48), ic_0 * T.int64(6) + ax1)
                            v_i2 = T.axis.spatial(T.int64(16), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused_fused % T.int64(84) // T.int64(42) * T.int64(7) + ax2)
                            v_i3 = T.axis.spatial(T.int64(16), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused_fused % T.int64(2) + n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused_fused % T.int64(42) // T.int64(6) * T.int64(2) + ax3_ax4_fused // T.int64(4))
                            v_i4 = T.axis.spatial(T.int64(4), ax3_ax4_fused % T.int64(4))
                            T.reads(p0[v_i0, v_i1, v_i2 - T.int64(1), v_i3 - T.int64(1), v_i4])
                            T.writes(data_pad[v_i0, v_i1, v_i2, v_i3, v_i4])
                            data_pad[v_i0, v_i1, v_i2, v_i3, v_i4] = T.if_then_else(T.int64(1) <= v_i2 and v_i2 < T.int64(15) and T.int64(1) <= v_i3 and v_i3 < T.int64(15), p0[v_i0, v_i1, v_i2 - T.int64(1), v_i3 - T.int64(1), v_i4], T.float32(0))
                for kh_0, kw_0, n_2, oc_chunk_2, oh_2, ow_2, oc_block_2, ic_1, kh_1, kw_1, n_3, oc_chunk_3, oh_3, ow_3 in T.grid(T.int64(1), T.int64(3), T.int64(1), T.int64(2), T.int64(1), T.int64(1), T.int64(1), T.int64(24), T.int64(3), T.int64(1), T.int64(1), T.int64(1), T.int64(7), T.int64(1)):
                    for oc_block_3_fused in T.vectorized(T.int64(4)):
                        with T.block("conv2d_NCHWc_update"):
                            v_n = T.axis.spatial(T.int64(1), n_2 + n_3)
                            v_oc_chunk = T.axis.spatial(T.int64(12), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused_fused // T.int64(84) * T.int64(6) + n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused_fused % T.int64(6) // T.int64(2) * T.int64(2) + oc_chunk_2 + oc_chunk_3)
                            v_oh = T.axis.spatial(T.int64(14), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused_fused % T.int64(84) // T.int64(42) * T.int64(7) + oh_2 * T.int64(7) + oh_3)
                            v_ow = T.axis.spatial(T.int64(14), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused_fused % T.int64(42) // T.int64(6) * T.int64(2) + n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused_fused % T.int64(2) + ow_2 + ow_3)
                            v_oc_block = T.axis.spatial(T.int64(4), oc_block_2 * T.int64(4) + oc_block_3_fused)
                            v_ic = T.axis.reduce(T.int64(192), ic_0 * T.int64(24) + ic_1)
                            v_kh = T.axis.reduce(T.int64(3), kh_0 * T.int64(3) + kh_1)
                            v_kw = T.axis.reduce(T.int64(3), kw_0 + kw_1)
                            T.reads(conv2d_NCHWc_global[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block], data_pad[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)], p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block])
                            T.writes(conv2d_NCHWc_global[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                            T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                            conv2d_NCHWc_global[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = conv2d_NCHWc_global[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] + data_pad[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)] * p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block]
            for ax0, ax1, ax2 in T.grid(T.int64(1), T.int64(2), T.int64(7)):
                for ax3_ax4_fused in T.vectorized(T.int64(4)):
                    with T.block("conv2d_NCHWc_global"):
                        v0 = T.axis.spatial(T.int64(1), ax0)
                        v1 = T.axis.spatial(T.int64(12), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused_fused // T.int64(84) * T.int64(6) + n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused_fused % T.int64(6) // T.int64(2) * T.int64(2) + ax1)
                        v2 = T.axis.spatial(T.int64(14), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused_fused % T.int64(84) // T.int64(42) * T.int64(7) + ax2)
                        v3 = T.axis.spatial(T.int64(14), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused_fused % T.int64(42) // T.int64(6) * T.int64(2) + n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused_fused % T.int64(2))
                        v4 = T.axis.spatial(T.int64(4), ax3_ax4_fused)
                        T.reads(conv2d_NCHWc_global[v0, v1, v2, v3, v4])
                        T.writes(conv2d_NCHWc[v0, v1, v2, v3, v4])
                        conv2d_NCHWc[v0, v1, v2, v3, v4] = conv2d_NCHWc_global[v0, v1, v2, v3, v4]
b0 = sch.get_block(name="data_pad", func_name="main")
b1 = sch.get_block(name="conv2d_NCHWc", func_name="main")
b2 = sch.get_block(name="root", func_name="main")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSRSRS")
l3, l4, l5, l6, l7, l8, l9, l10 = sch.get_loops(block=b1)
v11, v12, v13, v14 = sch.sample_perfect_tile(loop=l3, n=4, max_innermost_factor=64, decision=[1, 1, 1, 1])
l15, l16, l17, l18 = sch.split(loop=l3, factors=[v11, v12, v13, v14], preserve_unit_iters=True)
v19, v20, v21, v22 = sch.sample_perfect_tile(loop=l4, n=4, max_innermost_factor=64, decision=[2, 3, 2, 1])
l23, l24, l25, l26 = sch.split(loop=l4, factors=[v19, v20, v21, v22], preserve_unit_iters=True)
v27, v28, v29, v30 = sch.sample_perfect_tile(loop=l5, n=4, max_innermost_factor=64, decision=[2, 1, 1, 7])
l31, l32, l33, l34 = sch.split(loop=l5, factors=[v27, v28, v29, v30], preserve_unit_iters=True)
v35, v36, v37, v38 = sch.sample_perfect_tile(loop=l6, n=4, max_innermost_factor=64, decision=[7, 2, 1, 1])
l39, l40, l41, l42 = sch.split(loop=l6, factors=[v35, v36, v37, v38], preserve_unit_iters=True)
v43, v44, v45, v46 = sch.sample_perfect_tile(loop=l7, n=4, max_innermost_factor=64, decision=[1, 1, 1, 4])
l47, l48, l49, l50 = sch.split(loop=l7, factors=[v43, v44, v45, v46], preserve_unit_iters=True)
v51, v52 = sch.sample_perfect_tile(loop=l8, n=2, max_innermost_factor=64, decision=[8, 24])
l53, l54 = sch.split(loop=l8, factors=[v51, v52], preserve_unit_iters=True)
v55, v56 = sch.sample_perfect_tile(loop=l9, n=2, max_innermost_factor=64, decision=[1, 3])
l57, l58 = sch.split(loop=l9, factors=[v55, v56], preserve_unit_iters=True)
v59, v60 = sch.sample_perfect_tile(loop=l10, n=2, max_innermost_factor=64, decision=[3, 1])
l61, l62 = sch.split(loop=l10, factors=[v59, v60], preserve_unit_iters=True)
sch.reorder(l15, l23, l31, l39, l47, l16, l24, l32, l40, l48, l53, l57, l61, l17, l25, l33, l41, l49, l54, l58, l62, l18, l26, l34, l42, l50)
b63 = sch.cache_write(block=b1, write_buffer_index=0, storage_scope="global")
sch.reverse_compute_at(block=b63, loop=l48, preserve_unit_loops=True, index=-1)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.vectorize", ann_val=64)
v64 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.unroll_explicit", ann_val=v64)
l65 = sch.sample_compute_location(block=b0, decision=10)
sch.compute_at(block=b0, loop=l65, preserve_unit_loops=True, index=-1)
sch.enter_postproc()
b66 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b66, ann_key="meta_schedule.parallel")
sch.unannotate(block_or_loop=b66, ann_key="meta_schedule.vectorize")
sch.unannotate(block_or_loop=b66, ann_key="meta_schedule.unroll_explicit")
b67, b68, b69 = sch.get_child_blocks(b66)
l70, l71, l72, l73, l74, l75, l76, l77, l78, l79, l80, l81, l82, l83, l84, l85 = sch.get_loops(block=b67)
l86 = sch.fuse(l70, l71, l72, l73, l74, l75, l76, l77, l78, l79, preserve_unit_iters=True)
sch.parallel(loop=l86)
l87 = sch.fuse(l84, l85, preserve_unit_iters=True)
sch.vectorize(loop=l87)
l88, l89, l90, l91, l92, l93, l94, l95, l96, l97, l98, l99, l100, l101, l102, l103, l104 = sch.get_loops(block=b68)
l105 = sch.fuse(l88, preserve_unit_iters=True)
sch.parallel(loop=l105)
l106 = sch.fuse(l104, preserve_unit_iters=True)
sch.vectorize(loop=l106)
sch.annotate(block_or_loop=l105, ann_key="pragma_auto_unroll_max_step", ann_val=512)
sch.annotate(block_or_loop=l105, ann_key="pragma_unroll_explicit", ann_val=1)
l107, l108, l109, l110, l111, l112 = sch.get_loops(block=b69)
l113 = sch.fuse(l111, l112, preserve_unit_iters=True)
sch.vectorize(loop=l113)
b114 = sch.get_block(name="conv2d_NCHWc", func_name="main")
l115, l116, l117, l118, l119, l120, l121, l122, l123, l124, l125, l126, l127, l128, l129, l130, l131 = sch.get_loops(block=b114)
b132 = sch.decompose_reduction(block=b114, loop=l116)
2024-04-29 07:00:59 [INFO] [task_scheduler.cc:131] [Task #61: fused_nn_contrib_conv2d_NCHWc_1] Trial #500: GFLOPs: 154.1136. Time: 210.9746 us. Best GFLOPs: 220.6736
2024-04-29 07:00:59 [INFO] [task_scheduler.cc:131] [Task #61: fused_nn_contrib_conv2d_NCHWc_1] Trial #501: GFLOPs: 175.6306. Time: 185.1274 us. Best GFLOPs: 220.6736
2024-04-29 07:00:59 [INFO] [task_scheduler.cc:131] [Task #61: fused_nn_contrib_conv2d_NCHWc_1] Trial #502: GFLOPs: 147.8141. Time: 219.9658 us. Best GFLOPs: 220.6736
2024-04-29 07:00:59 [INFO] [task_scheduler.cc:131] [Task #61: fused_nn_contrib_conv2d_NCHWc_1] Trial #503: GFLOPs: 128.6668. Time: 252.6996 us. Best GFLOPs: 220.6736
2024-04-29 07:00:59 [INFO] [task_scheduler.cc:131] [Task #61: fused_nn_contrib_conv2d_NCHWc_1] Trial #504: GFLOPs: 98.0509. Time: 331.6036 us. Best GFLOPs: 220.6736
2024-04-29 07:00:59 [INFO] [task_scheduler.cc:131] [Task #61: fused_nn_contrib_conv2d_NCHWc_1] Trial #505: GFLOPs: 131.8352. Time: 246.6265 us. Best GFLOPs: 220.6736
2024-04-29 07:00:59 [INFO] [task_scheduler.cc:131] [Task #61: fused_nn_contrib_conv2d_NCHWc_1] Trial #506: GFLOPs: 102.9215. Time: 315.9111 us. Best GFLOPs: 220.6736
2024-04-29 07:00:59 [INFO] [task_scheduler.cc:131] [Task #61: fused_nn_contrib_conv2d_NCHWc_1] Trial #507: GFLOPs: 105.4852. Time: 308.2334 us. Best GFLOPs: 220.6736
2024-04-29 07:00:59 [INFO] [task_scheduler.cc:131] [Task #61: fused_nn_contrib_conv2d_NCHWc_1] Trial #508: GFLOPs: 84.8142. Time: 383.3563 us. Best GFLOPs: 220.6736
2024-04-29 07:00:59 [INFO] [task_scheduler.cc:121] [Task #61: fused_nn_contrib_conv2d_NCHWc_1] Trial #509: Error in building:
LocalBuilder: Timeout, killed after 30.0 seconds
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(48), T.int64(14), T.int64(14), T.int64(4)), "float32"), p1: T.Buffer((T.int64(12), T.int64(48), T.int64(3), T.int64(3), T.int64(4), T.int64(4)), "float32"), conv2d_NCHWc: T.Buffer((T.int64(1), T.int64(12), T.int64(14), T.int64(14), T.int64(4)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        data_pad = T.alloc_buffer((T.int64(1), T.int64(48), T.int64(16), T.int64(16), T.int64(4)))
        conv2d_NCHWc_global = T.alloc_buffer((T.int64(1), T.int64(12), T.int64(14), T.int64(14), T.int64(4)))
        for i0_i1_i2_fused in T.parallel(T.int64(768)):
            for i3_i4_fused in T.vectorized(T.int64(64)):
                with T.block("data_pad"):
                    v_i0 = T.axis.spatial(T.int64(1), T.int64(0))
                    v_i1 = T.axis.spatial(T.int64(48), i0_i1_i2_fused // T.int64(16))
                    v_i2 = T.axis.spatial(T.int64(16), i0_i1_i2_fused % T.int64(16))
                    v_i3 = T.axis.spatial(T.int64(16), i3_i4_fused // T.int64(4))
                    v_i4 = T.axis.spatial(T.int64(4), i3_i4_fused % T.int64(4))
                    T.reads(p0[v_i0, v_i1, v_i2 - T.int64(1), v_i3 - T.int64(1), v_i4])
                    T.writes(data_pad[v_i0, v_i1, v_i2, v_i3, v_i4])
                    data_pad[v_i0, v_i1, v_i2, v_i3, v_i4] = T.if_then_else(T.int64(1) <= v_i2 and v_i2 < T.int64(15) and T.int64(1) <= v_i3 and v_i3 < T.int64(15), p0[v_i0, v_i1, v_i2 - T.int64(1), v_i3 - T.int64(1), v_i4], T.float32(0))
        for n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused in T.parallel(T.int64(168), annotations={"pragma_auto_unroll_max_step": 512, "pragma_unroll_explicit": 1}):
            for n_2_init, oc_chunk_2_init, oh_2_init, ow_2_init, oc_block_2_init, n_3_init, oc_chunk_3_init, oh_3_init, ow_3_init in T.grid(T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(7), T.int64(1)):
                for oc_block_3_fused_init in T.vectorized(T.int64(4)):
                    with T.block("conv2d_NCHWc_init"):
                        v_n = T.axis.spatial(T.int64(1), n_2_init + n_3_init)
                        v_oc_chunk = T.axis.spatial(T.int64(12), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused // T.int64(28) * T.int64(2) + oc_chunk_2_init * T.int64(2) + oc_chunk_3_init)
                        v_oh = T.axis.spatial(T.int64(14), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused % T.int64(28) // T.int64(14) * T.int64(7) + oh_2_init * T.int64(7) + oh_3_init)
                        v_ow = T.axis.spatial(T.int64(14), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused % T.int64(14) + ow_2_init + ow_3_init)
                        v_oc_block = T.axis.spatial(T.int64(4), oc_block_2_init * T.int64(4) + oc_block_3_fused_init)
                        T.reads()
                        T.writes(conv2d_NCHWc_global[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                        T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                        conv2d_NCHWc_global[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = T.float32(0)
            for ic_0, kh_0, kw_0, n_2, oc_chunk_2, oh_2, ow_2, oc_block_2, ic_1, kh_1, kw_1, n_3, oc_chunk_3, oh_3, ow_3 in T.grid(T.int64(16), T.int64(3), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(12), T.int64(1), T.int64(3), T.int64(1), T.int64(2), T.int64(7), T.int64(1)):
                for oc_block_3_fused in T.vectorized(T.int64(4)):
                    with T.block("conv2d_NCHWc_update"):
                        v_n = T.axis.spatial(T.int64(1), n_2 + n_3)
                        v_oc_chunk = T.axis.spatial(T.int64(12), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused // T.int64(28) * T.int64(2) + oc_chunk_2 * T.int64(2) + oc_chunk_3)
                        v_oh = T.axis.spatial(T.int64(14), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused % T.int64(28) // T.int64(14) * T.int64(7) + oh_2 * T.int64(7) + oh_3)
                        v_ow = T.axis.spatial(T.int64(14), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused % T.int64(14) + ow_2 + ow_3)
                        v_oc_block = T.axis.spatial(T.int64(4), oc_block_2 * T.int64(4) + oc_block_3_fused)
                        v_ic = T.axis.reduce(T.int64(192), ic_0 * T.int64(12) + ic_1)
                        v_kh = T.axis.reduce(T.int64(3), kh_0 + kh_1)
                        v_kw = T.axis.reduce(T.int64(3), kw_0 * T.int64(3) + kw_1)
                        T.reads(conv2d_NCHWc_global[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block], data_pad[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)], p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block])
                        T.writes(conv2d_NCHWc_global[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                        T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                        conv2d_NCHWc_global[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = conv2d_NCHWc_global[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] + data_pad[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)] * p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block]
            for ax0, ax1, ax2 in T.grid(T.int64(1), T.int64(2), T.int64(7)):
                for ax3_ax4_fused in T.vectorized(T.int64(4)):
                    with T.block("conv2d_NCHWc_global"):
                        v0 = T.axis.spatial(T.int64(1), ax0)
                        v1 = T.axis.spatial(T.int64(12), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused // T.int64(28) * T.int64(2) + ax1)
                        v2 = T.axis.spatial(T.int64(14), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused % T.int64(28) // T.int64(14) * T.int64(7) + ax2)
                        v3 = T.axis.spatial(T.int64(14), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused % T.int64(14))
                        v4 = T.axis.spatial(T.int64(4), ax3_ax4_fused)
                        T.reads(conv2d_NCHWc_global[v0, v1, v2, v3, v4])
                        T.writes(conv2d_NCHWc[v0, v1, v2, v3, v4])
                        conv2d_NCHWc[v0, v1, v2, v3, v4] = conv2d_NCHWc_global[v0, v1, v2, v3, v4]
b0 = sch.get_block(name="data_pad", func_name="main")
b1 = sch.get_block(name="conv2d_NCHWc", func_name="main")
b2 = sch.get_block(name="root", func_name="main")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSRSRS")
l3, l4, l5, l6, l7, l8, l9, l10 = sch.get_loops(block=b1)
v11, v12, v13, v14 = sch.sample_perfect_tile(loop=l3, n=4, max_innermost_factor=64, decision=[1, 1, 1, 1])
l15, l16, l17, l18 = sch.split(loop=l3, factors=[v11, v12, v13, v14], preserve_unit_iters=True)
v19, v20, v21, v22 = sch.sample_perfect_tile(loop=l4, n=4, max_innermost_factor=64, decision=[1, 6, 1, 2])
l23, l24, l25, l26 = sch.split(loop=l4, factors=[v19, v20, v21, v22], preserve_unit_iters=True)
v27, v28, v29, v30 = sch.sample_perfect_tile(loop=l5, n=4, max_innermost_factor=64, decision=[1, 2, 1, 7])
l31, l32, l33, l34 = sch.split(loop=l5, factors=[v27, v28, v29, v30], preserve_unit_iters=True)
v35, v36, v37, v38 = sch.sample_perfect_tile(loop=l6, n=4, max_innermost_factor=64, decision=[1, 14, 1, 1])
l39, l40, l41, l42 = sch.split(loop=l6, factors=[v35, v36, v37, v38], preserve_unit_iters=True)
v43, v44, v45, v46 = sch.sample_perfect_tile(loop=l7, n=4, max_innermost_factor=64, decision=[1, 1, 1, 4])
l47, l48, l49, l50 = sch.split(loop=l7, factors=[v43, v44, v45, v46], preserve_unit_iters=True)
v51, v52 = sch.sample_perfect_tile(loop=l8, n=2, max_innermost_factor=64, decision=[16, 12])
l53, l54 = sch.split(loop=l8, factors=[v51, v52], preserve_unit_iters=True)
v55, v56 = sch.sample_perfect_tile(loop=l9, n=2, max_innermost_factor=64, decision=[3, 1])
l57, l58 = sch.split(loop=l9, factors=[v55, v56], preserve_unit_iters=True)
v59, v60 = sch.sample_perfect_tile(loop=l10, n=2, max_innermost_factor=64, decision=[1, 3])
l61, l62 = sch.split(loop=l10, factors=[v59, v60], preserve_unit_iters=True)
sch.reorder(l15, l23, l31, l39, l47, l16, l24, l32, l40, l48, l53, l57, l61, l17, l25, l33, l41, l49, l54, l58, l62, l18, l26, l34, l42, l50)
b63 = sch.cache_write(block=b1, write_buffer_index=0, storage_scope="global")
sch.reverse_compute_at(block=b63, loop=l48, preserve_unit_loops=True, index=-1)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.vectorize", ann_val=64)
v64 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.unroll_explicit", ann_val=v64)
l65 = sch.sample_compute_location(block=b0, decision=-1)
sch.compute_at(block=b0, loop=l65, preserve_unit_loops=True, index=-1)
sch.enter_postproc()
b66 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b66, ann_key="meta_schedule.parallel")
sch.unannotate(block_or_loop=b66, ann_key="meta_schedule.vectorize")
sch.unannotate(block_or_loop=b66, ann_key="meta_schedule.unroll_explicit")
b67, b68, b69 = sch.get_child_blocks(b66)
l70, l71, l72, l73, l74 = sch.get_loops(block=b67)
l75 = sch.fuse(l70, l71, l72, preserve_unit_iters=True)
sch.parallel(loop=l75)
l76 = sch.fuse(l73, l74, preserve_unit_iters=True)
sch.vectorize(loop=l76)
l77, l78, l79, l80, l81, l82, l83, l84, l85, l86, l87, l88, l89, l90, l91, l92, l93, l94, l95, l96, l97, l98, l99, l100, l101, l102 = sch.get_loops(block=b68)
l103 = sch.fuse(l77, l78, l79, l80, l81, l82, l83, l84, l85, l86, preserve_unit_iters=True)
sch.parallel(loop=l103)
l104 = sch.fuse(l102, preserve_unit_iters=True)
sch.vectorize(loop=l104)
sch.annotate(block_or_loop=l103, ann_key="pragma_auto_unroll_max_step", ann_val=512)
sch.annotate(block_or_loop=l103, ann_key="pragma_unroll_explicit", ann_val=1)
l105, l106, l107, l108, l109, l110 = sch.get_loops(block=b69)
l111 = sch.fuse(l109, l110, preserve_unit_iters=True)
sch.vectorize(loop=l111)
b112 = sch.get_block(name="conv2d_NCHWc", func_name="main")
l113, l114, l115, l116, l117, l118, l119, l120, l121, l122, l123, l124, l125, l126, l127, l128, l129 = sch.get_loops(block=b112)
b130 = sch.decompose_reduction(block=b112, loop=l114)
2024-04-29 07:00:59 [INFO] [task_scheduler.cc:131] [Task #61: fused_nn_contrib_conv2d_NCHWc_1] Trial #510: GFLOPs: 8.8156. Time: 3688.2565 us. Best GFLOPs: 220.6736
2024-04-29 07:00:59 [INFO] [task_scheduler.cc:131] [Task #61: fused_nn_contrib_conv2d_NCHWc_1] Trial #511: GFLOPs: 2.9288. Time: 11101.6501 us. Best GFLOPs: 220.6736
2024-04-29 07:00:59 [INFO] [task_scheduler.cc:121] [Task #61: fused_nn_contrib_conv2d_NCHWc_1] Trial #512: Error in building:
LocalBuilder: Timeout, killed after 30.0 seconds
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(48), T.int64(14), T.int64(14), T.int64(4)), "float32"), p1: T.Buffer((T.int64(12), T.int64(48), T.int64(3), T.int64(3), T.int64(4), T.int64(4)), "float32"), conv2d_NCHWc: T.Buffer((T.int64(1), T.int64(12), T.int64(14), T.int64(14), T.int64(4)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        data_pad = T.alloc_buffer((T.int64(1), T.int64(48), T.int64(16), T.int64(16), T.int64(4)))
        for n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_fused_fused in T.parallel(T.int64(336), annotations={"pragma_auto_unroll_max_step": 512, "pragma_unroll_explicit": 1}):
            for ax0, ax1, ax2 in T.grid(T.int64(1), T.int64(48), T.int64(9)):
                for ax3_ax4_fused in T.vectorized(T.int64(16)):
                    with T.block("data_pad"):
                        v_i0, v_i1 = T.axis.remap("SS", [ax0, ax1])
                        v_i2 = T.axis.spatial(T.int64(16), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_fused_fused % T.int64(56) // T.int64(28) * T.int64(7) + ax2)
                        v_i3 = T.axis.spatial(T.int64(16), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_fused_fused % T.int64(28) // T.int64(4) * T.int64(2) + ax3_ax4_fused // T.int64(4))
                        v_i4 = T.axis.spatial(T.int64(4), ax3_ax4_fused % T.int64(4))
                        T.reads(p0[v_i0, v_i1, v_i2 - T.int64(1), v_i3 - T.int64(1), v_i4])
                        T.writes(data_pad[v_i0, v_i1, v_i2, v_i3, v_i4])
                        data_pad[v_i0, v_i1, v_i2, v_i3, v_i4] = T.if_then_else(T.int64(1) <= v_i2 and v_i2 < T.int64(15) and T.int64(1) <= v_i3 and v_i3 < T.int64(15), p0[v_i0, v_i1, v_i2 - T.int64(1), v_i3 - T.int64(1), v_i4], T.float32(0))
            for n_1, oc_chunk_1, oh_1, ow_1, oc_block_1 in T.grid(T.int64(1), T.int64(1), T.int64(7), T.int64(2), T.int64(1)):
                for n_2_init, oc_chunk_2_init, oh_2_init, ow_2_init, oc_block_2_init, n_3_init, oc_chunk_3_init, oh_3_init, ow_3_init, oc_block_3_init in T.grid(T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(1), T.int64(1), T.int64(1)):
                    with T.block("conv2d_NCHWc_init"):
                        v_n = T.axis.spatial(T.int64(1), n_1 + n_2_init + n_3_init)
                        v_oc_chunk = T.axis.spatial(T.int64(12), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_fused_fused // T.int64(56) * T.int64(2) + oc_chunk_1 * T.int64(2) + oc_chunk_2_init * T.int64(2) + oc_chunk_3_init)
                        v_oh = T.axis.spatial(T.int64(14), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_fused_fused % T.int64(56) // T.int64(28) * T.int64(7) + oh_1 + oh_2_init + oh_3_init)
                        v_ow = T.axis.spatial(T.int64(14), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_fused_fused % T.int64(28) // T.int64(4) * T.int64(2) + ow_1 + ow_2_init + ow_3_init)
                        v_oc_block = T.axis.spatial(T.int64(4), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_fused_fused % T.int64(4) + oc_block_1 + oc_block_2_init + oc_block_3_init)
                        T.reads()
                        T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                        T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                        conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = T.float32(0)
                for ic_0, kh_0, kw_0, n_2, oc_chunk_2, oh_2, ow_2, oc_block_2, ic_1, kh_1, kw_1, n_3, oc_chunk_3, oh_3, ow_3, oc_block_3 in T.grid(T.int64(8), T.int64(1), T.int64(3), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(24), T.int64(3), T.int64(1), T.int64(1), T.int64(2), T.int64(1), T.int64(1), T.int64(1)):
                    with T.block("conv2d_NCHWc_update"):
                        v_n = T.axis.spatial(T.int64(1), n_1 + n_2 + n_3)
                        v_oc_chunk = T.axis.spatial(T.int64(12), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_fused_fused // T.int64(56) * T.int64(2) + oc_chunk_1 * T.int64(2) + oc_chunk_2 * T.int64(2) + oc_chunk_3)
                        v_oh = T.axis.spatial(T.int64(14), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_fused_fused % T.int64(56) // T.int64(28) * T.int64(7) + oh_1 + oh_2 + oh_3)
                        v_ow = T.axis.spatial(T.int64(14), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_fused_fused % T.int64(28) // T.int64(4) * T.int64(2) + ow_1 + ow_2 + ow_3)
                        v_oc_block = T.axis.spatial(T.int64(4), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_fused_fused % T.int64(4) + oc_block_1 + oc_block_2 + oc_block_3)
                        v_ic = T.axis.reduce(T.int64(192), ic_0 * T.int64(24) + ic_1)
                        v_kh = T.axis.reduce(T.int64(3), kh_0 * T.int64(3) + kh_1)
                        v_kw = T.axis.reduce(T.int64(3), kw_0 + kw_1)
                        T.reads(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block], data_pad[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)], p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block])
                        T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                        T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                        conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] + data_pad[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)] * p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block]
b0 = sch.get_block(name="data_pad", func_name="main")
b1 = sch.get_block(name="conv2d_NCHWc", func_name="main")
b2 = sch.get_block(name="root", func_name="main")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSRSRS")
l3, l4, l5, l6, l7, l8, l9, l10 = sch.get_loops(block=b1)
v11, v12, v13, v14 = sch.sample_perfect_tile(loop=l3, n=4, max_innermost_factor=64, decision=[1, 1, 1, 1])
l15, l16, l17, l18 = sch.split(loop=l3, factors=[v11, v12, v13, v14], preserve_unit_iters=True)
v19, v20, v21, v22 = sch.sample_perfect_tile(loop=l4, n=4, max_innermost_factor=64, decision=[6, 1, 1, 2])
l23, l24, l25, l26 = sch.split(loop=l4, factors=[v19, v20, v21, v22], preserve_unit_iters=True)
v27, v28, v29, v30 = sch.sample_perfect_tile(loop=l5, n=4, max_innermost_factor=64, decision=[2, 7, 1, 1])
l31, l32, l33, l34 = sch.split(loop=l5, factors=[v27, v28, v29, v30], preserve_unit_iters=True)
v35, v36, v37, v38 = sch.sample_perfect_tile(loop=l6, n=4, max_innermost_factor=64, decision=[7, 2, 1, 1])
l39, l40, l41, l42 = sch.split(loop=l6, factors=[v35, v36, v37, v38], preserve_unit_iters=True)
v43, v44, v45, v46 = sch.sample_perfect_tile(loop=l7, n=4, max_innermost_factor=64, decision=[4, 1, 1, 1])
l47, l48, l49, l50 = sch.split(loop=l7, factors=[v43, v44, v45, v46], preserve_unit_iters=True)
v51, v52 = sch.sample_perfect_tile(loop=l8, n=2, max_innermost_factor=64, decision=[8, 24])
l53, l54 = sch.split(loop=l8, factors=[v51, v52], preserve_unit_iters=True)
v55, v56 = sch.sample_perfect_tile(loop=l9, n=2, max_innermost_factor=64, decision=[1, 3])
l57, l58 = sch.split(loop=l9, factors=[v55, v56], preserve_unit_iters=True)
v59, v60 = sch.sample_perfect_tile(loop=l10, n=2, max_innermost_factor=64, decision=[3, 1])
l61, l62 = sch.split(loop=l10, factors=[v59, v60], preserve_unit_iters=True)
sch.reorder(l15, l23, l31, l39, l47, l16, l24, l32, l40, l48, l53, l57, l61, l17, l25, l33, l41, l49, l54, l58, l62, l18, l26, l34, l42, l50)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.vectorize", ann_val=64)
v63 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.unroll_explicit", ann_val=v63)
l64 = sch.sample_compute_location(block=b0, decision=4)
sch.compute_at(block=b0, loop=l64, preserve_unit_loops=True, index=-1)
sch.enter_postproc()
b65 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b65, ann_key="meta_schedule.parallel")
sch.unannotate(block_or_loop=b65, ann_key="meta_schedule.vectorize")
sch.unannotate(block_or_loop=b65, ann_key="meta_schedule.unroll_explicit")
b66, b67 = sch.get_child_blocks(b65)
l68, l69, l70, l71, l72, l73, l74, l75, l76, l77 = sch.get_loops(block=b66)
l78 = sch.fuse(l68, l69, l70, l71, l72, preserve_unit_iters=True)
sch.parallel(loop=l78)
l79 = sch.fuse(l76, l77, preserve_unit_iters=True)
sch.vectorize(loop=l79)
l80, l81, l82, l83, l84, l85, l86, l87, l88, l89, l90, l91, l92, l93, l94, l95, l96, l97, l98, l99, l100, l101 = sch.get_loops(block=b67)
l102 = sch.fuse(l80, preserve_unit_iters=True)
sch.parallel(loop=l102)
sch.annotate(block_or_loop=l102, ann_key="pragma_auto_unroll_max_step", ann_val=512)
sch.annotate(block_or_loop=l102, ann_key="pragma_unroll_explicit", ann_val=1)
b103 = sch.get_block(name="conv2d_NCHWc", func_name="main")
l104, l105, l106, l107, l108, l109, l110, l111, l112, l113, l114, l115, l116, l117, l118, l119, l120, l121, l122, l123, l124, l125 = sch.get_loops(block=b103)
b126 = sch.decompose_reduction(block=b103, loop=l110)
2024-04-29 07:14:26 [INFO] [evolutionary_search.cc:713] Generating candidates......
2024-04-29 07:14:27 [INFO] [evolutionary_search.cc:715] Picked top 102 candidate(s) from database
2024-04-29 07:14:31 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0xc83fed8)]: 12 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0xc5901d8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x15321f68)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x1063f078)]: 0 failure(s)
2024-04-29 07:14:31 [INFO] [evolutionary_search.cc:723] Sampled 398 candidate(s)
2024-04-29 07:14:42 [INFO] [evolutionary_search.cc:621] Evolve iter #0 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0xc83fed8)]: 1 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0xc5901d8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x15321f68)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x1063f078)]: 0 failure(s)
2024-04-29 07:14:53 [INFO] [evolutionary_search.cc:621] Evolve iter #1 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0xc83fed8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0xc5901d8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x15321f68)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x1063f078)]: 0 failure(s)
2024-04-29 07:15:04 [INFO] [evolutionary_search.cc:621] Evolve iter #2 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0xc83fed8)]: 3 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0xc5901d8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x15321f68)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x1063f078)]: 0 failure(s)
2024-04-29 07:15:15 [INFO] [evolutionary_search.cc:621] Evolve iter #3 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0xc83fed8)]: 3 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0xc5901d8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x15321f68)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x1063f078)]: 0 failure(s)
2024-04-29 07:15:21 [INFO] [evolutionary_search.cc:649] Scores of the best 64 candidates:
[1 : 16]:	0.8169  0.7895  0.7887  0.7863  0.7860  0.7831  0.7800  0.7773  0.7728  0.7724  0.7720  0.7717  0.7717  0.7717  0.7717  0.7708
[17 : 32]:	0.7708  0.7700  0.7690  0.7690  0.7690  0.7690  0.7665  0.7619  0.7596  0.7595  0.7591  0.7591  0.7591  0.7591  0.7591  0.7591
[33 : 48]:	0.7591  0.7591  0.7591  0.7591  0.7591  0.7591  0.7591  0.7581  0.7581  0.7581  0.7577  0.7577  0.7577  0.7577  0.7577  0.7577
[49 : 64]:	0.7577  0.7577  0.7577  0.7577  0.7577  0.7566  0.7566  0.7566  0.7530  0.7507  0.7507  0.7507  0.7507  0.7505  0.7493  0.7492
2024-04-29 07:15:22 [INFO] [evolutionary_search.cc:727] Got 64 candidate(s) with evolutionary search
2024-04-29 07:15:22 [INFO] [evolutionary_search.cc:730] Sending 64 candidates(s) for measurement
2024-04-29 07:17:04 [INFO] [task_scheduler.cc:131] [Task #61: fused_nn_contrib_conv2d_NCHWc_1] Trial #513: GFLOPs: 55.7332. Time: 583.3874 us. Best GFLOPs: 220.6736
2024-04-29 07:17:04 [INFO] [task_scheduler.cc:131] [Task #61: fused_nn_contrib_conv2d_NCHWc_1] Trial #514: GFLOPs: 194.0693. Time: 167.5383 us. Best GFLOPs: 220.6736
2024-04-29 07:17:04 [INFO] [task_scheduler.cc:131] [Task #61: fused_nn_contrib_conv2d_NCHWc_1] Trial #515: GFLOPs: 133.4097. Time: 243.7158 us. Best GFLOPs: 220.6736
2024-04-29 07:17:04 [INFO] [task_scheduler.cc:131] [Task #61: fused_nn_contrib_conv2d_NCHWc_1] Trial #516: GFLOPs: 104.6309. Time: 310.7498 us. Best GFLOPs: 220.6736
2024-04-29 07:17:04 [INFO] [task_scheduler.cc:131] [Task #61: fused_nn_contrib_conv2d_NCHWc_1] Trial #517: GFLOPs: 120.3245. Time: 270.2197 us. Best GFLOPs: 220.6736
2024-04-29 07:17:04 [INFO] [task_scheduler.cc:121] [Task #61: fused_nn_contrib_conv2d_NCHWc_1] Trial #518: Error in building:
LocalBuilder: Timeout, killed after 30.0 seconds
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(48), T.int64(14), T.int64(14), T.int64(4)), "float32"), p1: T.Buffer((T.int64(12), T.int64(48), T.int64(3), T.int64(3), T.int64(4), T.int64(4)), "float32"), conv2d_NCHWc: T.Buffer((T.int64(1), T.int64(12), T.int64(14), T.int64(14), T.int64(4)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        data_pad = T.alloc_buffer((T.int64(1), T.int64(48), T.int64(16), T.int64(16), T.int64(4)))
        conv2d_NCHWc_global = T.alloc_buffer((T.int64(1), T.int64(12), T.int64(14), T.int64(14), T.int64(4)))
        for n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused_fused in T.parallel(T.int64(168), annotations={"pragma_auto_unroll_max_step": 512, "pragma_unroll_explicit": 1}):
            for n_2_init, oc_chunk_2_init, oh_2_init, ow_2_init, oc_block_2_init, n_3_init, oc_chunk_3_init, oh_3_init, ow_3_init in T.grid(T.int64(1), T.int64(2), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(7), T.int64(1)):
                for oc_block_3_fused_init in T.vectorized(T.int64(4)):
                    with T.block("conv2d_NCHWc_init"):
                        v_n = T.axis.spatial(T.int64(1), n_2_init + n_3_init)
                        v_oc_chunk = T.axis.spatial(T.int64(12), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused_fused // T.int64(84) * T.int64(6) + n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused_fused % T.int64(3) * T.int64(2) + oc_chunk_2_init + oc_chunk_3_init)
                        v_oh = T.axis.spatial(T.int64(14), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused_fused % T.int64(84) // T.int64(42) * T.int64(7) + oh_2_init * T.int64(7) + oh_3_init)
                        v_ow = T.axis.spatial(T.int64(14), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused_fused % T.int64(42) // T.int64(3) + ow_2_init + ow_3_init)
                        v_oc_block = T.axis.spatial(T.int64(4), oc_block_2_init * T.int64(4) + oc_block_3_fused_init)
                        T.reads()
                        T.writes(conv2d_NCHWc_global[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                        T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                        conv2d_NCHWc_global[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = T.float32(0)
            for ic_0 in range(T.int64(8)):
                for ax0, ax1, ax2 in T.grid(T.int64(1), T.int64(6), T.int64(9)):
                    for ax3_ax4_fused in T.vectorized(T.int64(12)):
                        with T.block("data_pad"):
                            v_i0 = T.axis.spatial(T.int64(1), ax0)
                            v_i1 = T.axis.spatial(T.int64(48), ic_0 * T.int64(6) + ax1)
                            v_i2 = T.axis.spatial(T.int64(16), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused_fused % T.int64(84) // T.int64(42) * T.int64(7) + ax2)
                            v_i3 = T.axis.spatial(T.int64(16), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused_fused % T.int64(42) // T.int64(3) + ax3_ax4_fused // T.int64(4))
                            v_i4 = T.axis.spatial(T.int64(4), ax3_ax4_fused % T.int64(4))
                            T.reads(p0[v_i0, v_i1, v_i2 - T.int64(1), v_i3 - T.int64(1), v_i4])
                            T.writes(data_pad[v_i0, v_i1, v_i2, v_i3, v_i4])
                            data_pad[v_i0, v_i1, v_i2, v_i3, v_i4] = T.if_then_else(T.int64(1) <= v_i2 and v_i2 < T.int64(15) and T.int64(1) <= v_i3 and v_i3 < T.int64(15), p0[v_i0, v_i1, v_i2 - T.int64(1), v_i3 - T.int64(1), v_i4], T.float32(0))
                for kh_0, kw_0, n_2, oc_chunk_2, oh_2, ow_2, oc_block_2, ic_1, kh_1, kw_1, n_3, oc_chunk_3, oh_3, ow_3 in T.grid(T.int64(1), T.int64(3), T.int64(1), T.int64(2), T.int64(1), T.int64(1), T.int64(1), T.int64(24), T.int64(3), T.int64(1), T.int64(1), T.int64(1), T.int64(7), T.int64(1)):
                    for oc_block_3_fused in T.vectorized(T.int64(4)):
                        with T.block("conv2d_NCHWc_update"):
                            v_n = T.axis.spatial(T.int64(1), n_2 + n_3)
                            v_oc_chunk = T.axis.spatial(T.int64(12), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused_fused // T.int64(84) * T.int64(6) + n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused_fused % T.int64(3) * T.int64(2) + oc_chunk_2 + oc_chunk_3)
                            v_oh = T.axis.spatial(T.int64(14), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused_fused % T.int64(84) // T.int64(42) * T.int64(7) + oh_2 * T.int64(7) + oh_3)
                            v_ow = T.axis.spatial(T.int64(14), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused_fused % T.int64(42) // T.int64(3) + ow_2 + ow_3)
                            v_oc_block = T.axis.spatial(T.int64(4), oc_block_2 * T.int64(4) + oc_block_3_fused)
                            v_ic = T.axis.reduce(T.int64(192), ic_0 * T.int64(24) + ic_1)
                            v_kh = T.axis.reduce(T.int64(3), kh_0 * T.int64(3) + kh_1)
                            v_kw = T.axis.reduce(T.int64(3), kw_0 + kw_1)
                            T.reads(conv2d_NCHWc_global[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block], data_pad[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)], p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block])
                            T.writes(conv2d_NCHWc_global[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                            T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                            conv2d_NCHWc_global[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = conv2d_NCHWc_global[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] + data_pad[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)] * p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block]
            for ax0, ax1, ax2 in T.grid(T.int64(1), T.int64(2), T.int64(7)):
                for ax3_ax4_fused in T.vectorized(T.int64(4)):
                    with T.block("conv2d_NCHWc_global"):
                        v0 = T.axis.spatial(T.int64(1), ax0)
                        v1 = T.axis.spatial(T.int64(12), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused_fused // T.int64(84) * T.int64(6) + n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused_fused % T.int64(3) * T.int64(2) + ax1)
                        v2 = T.axis.spatial(T.int64(14), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused_fused % T.int64(84) // T.int64(42) * T.int64(7) + ax2)
                        v3 = T.axis.spatial(T.int64(14), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused_fused % T.int64(42) // T.int64(3))
                        v4 = T.axis.spatial(T.int64(4), ax3_ax4_fused)
                        T.reads(conv2d_NCHWc_global[v0, v1, v2, v3, v4])
                        T.writes(conv2d_NCHWc[v0, v1, v2, v3, v4])
                        conv2d_NCHWc[v0, v1, v2, v3, v4] = conv2d_NCHWc_global[v0, v1, v2, v3, v4]
b0 = sch.get_block(name="data_pad", func_name="main")
b1 = sch.get_block(name="conv2d_NCHWc", func_name="main")
b2 = sch.get_block(name="root", func_name="main")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSRSRS")
l3, l4, l5, l6, l7, l8, l9, l10 = sch.get_loops(block=b1)
v11, v12, v13, v14 = sch.sample_perfect_tile(loop=l3, n=4, max_innermost_factor=64, decision=[1, 1, 1, 1])
l15, l16, l17, l18 = sch.split(loop=l3, factors=[v11, v12, v13, v14], preserve_unit_iters=True)
v19, v20, v21, v22 = sch.sample_perfect_tile(loop=l4, n=4, max_innermost_factor=64, decision=[2, 3, 2, 1])
l23, l24, l25, l26 = sch.split(loop=l4, factors=[v19, v20, v21, v22], preserve_unit_iters=True)
v27, v28, v29, v30 = sch.sample_perfect_tile(loop=l5, n=4, max_innermost_factor=64, decision=[2, 1, 1, 7])
l31, l32, l33, l34 = sch.split(loop=l5, factors=[v27, v28, v29, v30], preserve_unit_iters=True)
v35, v36, v37, v38 = sch.sample_perfect_tile(loop=l6, n=4, max_innermost_factor=64, decision=[14, 1, 1, 1])
l39, l40, l41, l42 = sch.split(loop=l6, factors=[v35, v36, v37, v38], preserve_unit_iters=True)
v43, v44, v45, v46 = sch.sample_perfect_tile(loop=l7, n=4, max_innermost_factor=64, decision=[1, 1, 1, 4])
l47, l48, l49, l50 = sch.split(loop=l7, factors=[v43, v44, v45, v46], preserve_unit_iters=True)
v51, v52 = sch.sample_perfect_tile(loop=l8, n=2, max_innermost_factor=64, decision=[8, 24])
l53, l54 = sch.split(loop=l8, factors=[v51, v52], preserve_unit_iters=True)
v55, v56 = sch.sample_perfect_tile(loop=l9, n=2, max_innermost_factor=64, decision=[1, 3])
l57, l58 = sch.split(loop=l9, factors=[v55, v56], preserve_unit_iters=True)
v59, v60 = sch.sample_perfect_tile(loop=l10, n=2, max_innermost_factor=64, decision=[3, 1])
l61, l62 = sch.split(loop=l10, factors=[v59, v60], preserve_unit_iters=True)
sch.reorder(l15, l23, l31, l39, l47, l16, l24, l32, l40, l48, l53, l57, l61, l17, l25, l33, l41, l49, l54, l58, l62, l18, l26, l34, l42, l50)
b63 = sch.cache_write(block=b1, write_buffer_index=0, storage_scope="global")
sch.reverse_compute_at(block=b63, loop=l48, preserve_unit_loops=True, index=-1)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.vectorize", ann_val=64)
v64 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.unroll_explicit", ann_val=v64)
l65 = sch.sample_compute_location(block=b0, decision=10)
sch.compute_at(block=b0, loop=l65, preserve_unit_loops=True, index=-1)
sch.enter_postproc()
b66 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b66, ann_key="meta_schedule.parallel")
sch.unannotate(block_or_loop=b66, ann_key="meta_schedule.vectorize")
sch.unannotate(block_or_loop=b66, ann_key="meta_schedule.unroll_explicit")
b67, b68, b69 = sch.get_child_blocks(b66)
l70, l71, l72, l73, l74, l75, l76, l77, l78, l79, l80, l81, l82, l83, l84, l85 = sch.get_loops(block=b67)
l86 = sch.fuse(l70, l71, l72, l73, l74, l75, l76, l77, l78, l79, preserve_unit_iters=True)
sch.parallel(loop=l86)
l87 = sch.fuse(l84, l85, preserve_unit_iters=True)
sch.vectorize(loop=l87)
l88, l89, l90, l91, l92, l93, l94, l95, l96, l97, l98, l99, l100, l101, l102, l103, l104 = sch.get_loops(block=b68)
l105 = sch.fuse(l88, preserve_unit_iters=True)
sch.parallel(loop=l105)
l106 = sch.fuse(l104, preserve_unit_iters=True)
sch.vectorize(loop=l106)
sch.annotate(block_or_loop=l105, ann_key="pragma_auto_unroll_max_step", ann_val=512)
sch.annotate(block_or_loop=l105, ann_key="pragma_unroll_explicit", ann_val=1)
l107, l108, l109, l110, l111, l112 = sch.get_loops(block=b69)
l113 = sch.fuse(l111, l112, preserve_unit_iters=True)
sch.vectorize(loop=l113)
b114 = sch.get_block(name="conv2d_NCHWc", func_name="main")
l115, l116, l117, l118, l119, l120, l121, l122, l123, l124, l125, l126, l127, l128, l129, l130, l131 = sch.get_loops(block=b114)
b132 = sch.decompose_reduction(block=b114, loop=l116)
2024-04-29 07:17:04 [INFO] [task_scheduler.cc:131] [Task #61: fused_nn_contrib_conv2d_NCHWc_1] Trial #519: GFLOPs: 173.7396. Time: 187.1424 us. Best GFLOPs: 220.6736
2024-04-29 07:17:04 [INFO] [task_scheduler.cc:131] [Task #61: fused_nn_contrib_conv2d_NCHWc_1] Trial #520: GFLOPs: 93.9954. Time: 345.9110 us. Best GFLOPs: 220.6736
2024-04-29 07:17:04 [INFO] [task_scheduler.cc:131] [Task #61: fused_nn_contrib_conv2d_NCHWc_1] Trial #521: GFLOPs: 137.4918. Time: 236.4798 us. Best GFLOPs: 220.6736
2024-04-29 07:17:04 [INFO] [task_scheduler.cc:131] [Task #61: fused_nn_contrib_conv2d_NCHWc_1] Trial #522: GFLOPs: 139.9539. Time: 232.3198 us. Best GFLOPs: 220.6736
2024-04-29 07:17:04 [INFO] [task_scheduler.cc:131] [Task #61: fused_nn_contrib_conv2d_NCHWc_1] Trial #523: GFLOPs: 172.1746. Time: 188.8435 us. Best GFLOPs: 220.6736
2024-04-29 07:17:04 [INFO] [task_scheduler.cc:131] [Task #61: fused_nn_contrib_conv2d_NCHWc_1] Trial #524: GFLOPs: 184.5871. Time: 176.1447 us. Best GFLOPs: 220.6736
2024-04-29 07:17:04 [INFO] [task_scheduler.cc:131] [Task #61: fused_nn_contrib_conv2d_NCHWc_1] Trial #525: GFLOPs: 182.8805. Time: 177.7885 us. Best GFLOPs: 220.6736
2024-04-29 07:17:04 [INFO] [task_scheduler.cc:131] [Task #61: fused_nn_contrib_conv2d_NCHWc_1] Trial #526: GFLOPs: 120.5674. Time: 269.6754 us. Best GFLOPs: 220.6736
2024-04-29 07:17:04 [INFO] [task_scheduler.cc:131] [Task #61: fused_nn_contrib_conv2d_NCHWc_1] Trial #527: GFLOPs: 175.3536. Time: 185.4199 us. Best GFLOPs: 220.6736
2024-04-29 07:17:04 [INFO] [task_scheduler.cc:131] [Task #61: fused_nn_contrib_conv2d_NCHWc_1] Trial #528: GFLOPs: 183.8036. Time: 176.8956 us. Best GFLOPs: 220.6736
2024-04-29 07:17:04 [INFO] [task_scheduler.cc:131] [Task #61: fused_nn_contrib_conv2d_NCHWc_1] Trial #529: GFLOPs: 175.4890. Time: 185.2769 us. Best GFLOPs: 220.6736
2024-04-29 07:17:04 [INFO] [task_scheduler.cc:131] [Task #61: fused_nn_contrib_conv2d_NCHWc_1] Trial #530: GFLOPs: 114.9546. Time: 282.8426 us. Best GFLOPs: 220.6736
2024-04-29 07:17:04 [INFO] [task_scheduler.cc:131] [Task #61: fused_nn_contrib_conv2d_NCHWc_1] Trial #531: GFLOPs: 104.7106. Time: 310.5134 us. Best GFLOPs: 220.6736
2024-04-29 07:17:04 [INFO] [task_scheduler.cc:131] [Task #61: fused_nn_contrib_conv2d_NCHWc_1] Trial #532: GFLOPs: 139.3039. Time: 233.4037 us. Best GFLOPs: 220.6736
2024-04-29 07:17:04 [INFO] [task_scheduler.cc:131] [Task #61: fused_nn_contrib_conv2d_NCHWc_1] Trial #533: GFLOPs: 121.7732. Time: 267.0050 us. Best GFLOPs: 220.6736
2024-04-29 07:17:04 [INFO] [task_scheduler.cc:131] [Task #61: fused_nn_contrib_conv2d_NCHWc_1] Trial #534: GFLOPs: 159.0539. Time: 204.4216 us. Best GFLOPs: 220.6736
2024-04-29 07:17:04 [INFO] [task_scheduler.cc:131] [Task #61: fused_nn_contrib_conv2d_NCHWc_1] Trial #535: GFLOPs: 100.3963. Time: 323.8570 us. Best GFLOPs: 220.6736
2024-04-29 07:17:04 [INFO] [task_scheduler.cc:131] [Task #61: fused_nn_contrib_conv2d_NCHWc_1] Trial #536: GFLOPs: 150.7040. Time: 215.7477 us. Best GFLOPs: 220.6736
2024-04-29 07:17:04 [INFO] [task_scheduler.cc:131] [Task #61: fused_nn_contrib_conv2d_NCHWc_1] Trial #537: GFLOPs: 155.3416. Time: 209.3067 us. Best GFLOPs: 220.6736
2024-04-29 07:17:04 [INFO] [task_scheduler.cc:131] [Task #61: fused_nn_contrib_conv2d_NCHWc_1] Trial #538: GFLOPs: 129.3443. Time: 251.3760 us. Best GFLOPs: 220.6736
2024-04-29 07:17:04 [INFO] [task_scheduler.cc:131] [Task #61: fused_nn_contrib_conv2d_NCHWc_1] Trial #539: GFLOPs: 163.7784. Time: 198.5247 us. Best GFLOPs: 220.6736
2024-04-29 07:17:04 [INFO] [task_scheduler.cc:131] [Task #61: fused_nn_contrib_conv2d_NCHWc_1] Trial #540: GFLOPs: 195.9302. Time: 165.9471 us. Best GFLOPs: 220.6736
2024-04-29 07:17:04 [INFO] [task_scheduler.cc:131] [Task #61: fused_nn_contrib_conv2d_NCHWc_1] Trial #541: GFLOPs: 151.0846. Time: 215.2042 us. Best GFLOPs: 220.6736
2024-04-29 07:17:04 [INFO] [task_scheduler.cc:131] [Task #61: fused_nn_contrib_conv2d_NCHWc_1] Trial #542: GFLOPs: 193.3449. Time: 168.1660 us. Best GFLOPs: 220.6736
2024-04-29 07:17:04 [INFO] [task_scheduler.cc:131] [Task #61: fused_nn_contrib_conv2d_NCHWc_1] Trial #543: GFLOPs: 153.7425. Time: 211.4838 us. Best GFLOPs: 220.6736
2024-04-29 07:17:04 [INFO] [task_scheduler.cc:131] [Task #61: fused_nn_contrib_conv2d_NCHWc_1] Trial #544: GFLOPs: 193.5397. Time: 167.9967 us. Best GFLOPs: 220.6736
2024-04-29 07:17:04 [INFO] [task_scheduler.cc:131] [Task #61: fused_nn_contrib_conv2d_NCHWc_1] Trial #545: GFLOPs: 116.3399. Time: 279.4746 us. Best GFLOPs: 220.6736
2024-04-29 07:17:04 [INFO] [task_scheduler.cc:131] [Task #61: fused_nn_contrib_conv2d_NCHWc_1] Trial #546: GFLOPs: 155.3158. Time: 209.3416 us. Best GFLOPs: 220.6736
2024-04-29 07:17:04 [INFO] [task_scheduler.cc:131] [Task #61: fused_nn_contrib_conv2d_NCHWc_1] Trial #547: GFLOPs: 130.7897. Time: 248.5979 us. Best GFLOPs: 220.6736
2024-04-29 07:17:04 [INFO] [task_scheduler.cc:131] [Task #61: fused_nn_contrib_conv2d_NCHWc_1] Trial #548: GFLOPs: 156.0541. Time: 208.3511 us. Best GFLOPs: 220.6736
2024-04-29 07:17:04 [INFO] [task_scheduler.cc:131] [Task #61: fused_nn_contrib_conv2d_NCHWc_1] Trial #549: GFLOPs: 146.1367. Time: 222.4907 us. Best GFLOPs: 220.6736
2024-04-29 07:17:04 [INFO] [task_scheduler.cc:131] [Task #61: fused_nn_contrib_conv2d_NCHWc_1] Trial #550: GFLOPs: 195.1607. Time: 166.6014 us. Best GFLOPs: 220.6736
2024-04-29 07:17:04 [INFO] [task_scheduler.cc:131] [Task #61: fused_nn_contrib_conv2d_NCHWc_1] Trial #551: GFLOPs: 191.4794. Time: 169.8044 us. Best GFLOPs: 220.6736
2024-04-29 07:17:04 [INFO] [task_scheduler.cc:131] [Task #61: fused_nn_contrib_conv2d_NCHWc_1] Trial #552: GFLOPs: 151.4977. Time: 214.6175 us. Best GFLOPs: 220.6736
2024-04-29 07:17:04 [INFO] [task_scheduler.cc:131] [Task #61: fused_nn_contrib_conv2d_NCHWc_1] Trial #553: GFLOPs: 169.0808. Time: 192.2989 us. Best GFLOPs: 220.6736
2024-04-29 07:17:04 [INFO] [task_scheduler.cc:131] [Task #61: fused_nn_contrib_conv2d_NCHWc_1] Trial #554: GFLOPs: 157.7299. Time: 206.1375 us. Best GFLOPs: 220.6736
2024-04-29 07:17:04 [INFO] [task_scheduler.cc:131] [Task #61: fused_nn_contrib_conv2d_NCHWc_1] Trial #555: GFLOPs: 174.2627. Time: 186.5807 us. Best GFLOPs: 220.6736
2024-04-29 07:17:04 [INFO] [task_scheduler.cc:131] [Task #61: fused_nn_contrib_conv2d_NCHWc_1] Trial #556: GFLOPs: 166.4882. Time: 195.2934 us. Best GFLOPs: 220.6736
2024-04-29 07:17:04 [INFO] [task_scheduler.cc:131] [Task #61: fused_nn_contrib_conv2d_NCHWc_1] Trial #557: GFLOPs: 160.7277. Time: 202.2927 us. Best GFLOPs: 220.6736
2024-04-29 07:17:04 [INFO] [task_scheduler.cc:131] [Task #61: fused_nn_contrib_conv2d_NCHWc_1] Trial #558: GFLOPs: 175.8471. Time: 184.8995 us. Best GFLOPs: 220.6736
2024-04-29 07:17:04 [INFO] [task_scheduler.cc:131] [Task #61: fused_nn_contrib_conv2d_NCHWc_1] Trial #559: GFLOPs: 159.4392. Time: 203.9276 us. Best GFLOPs: 220.6736
2024-04-29 07:17:04 [INFO] [task_scheduler.cc:131] [Task #61: fused_nn_contrib_conv2d_NCHWc_1] Trial #560: GFLOPs: 159.9675. Time: 203.2540 us. Best GFLOPs: 220.6736
2024-04-29 07:17:04 [INFO] [task_scheduler.cc:131] [Task #61: fused_nn_contrib_conv2d_NCHWc_1] Trial #561: GFLOPs: 143.2232. Time: 227.0167 us. Best GFLOPs: 220.6736
2024-04-29 07:17:04 [INFO] [task_scheduler.cc:131] [Task #61: fused_nn_contrib_conv2d_NCHWc_1] Trial #562: GFLOPs: 163.6014. Time: 198.7394 us. Best GFLOPs: 220.6736
2024-04-29 07:17:04 [INFO] [task_scheduler.cc:131] [Task #61: fused_nn_contrib_conv2d_NCHWc_1] Trial #563: GFLOPs: 175.4235. Time: 185.3460 us. Best GFLOPs: 220.6736
2024-04-29 07:17:04 [INFO] [task_scheduler.cc:131] [Task #61: fused_nn_contrib_conv2d_NCHWc_1] Trial #564: GFLOPs: 141.2081. Time: 230.2562 us. Best GFLOPs: 220.6736
2024-04-29 07:17:04 [INFO] [task_scheduler.cc:131] [Task #61: fused_nn_contrib_conv2d_NCHWc_1] Trial #565: GFLOPs: 192.1386. Time: 169.2219 us. Best GFLOPs: 220.6736
2024-04-29 07:17:04 [INFO] [task_scheduler.cc:131] [Task #61: fused_nn_contrib_conv2d_NCHWc_1] Trial #566: GFLOPs: 176.8418. Time: 183.8596 us. Best GFLOPs: 220.6736
2024-04-29 07:17:04 [INFO] [task_scheduler.cc:131] [Task #61: fused_nn_contrib_conv2d_NCHWc_1] Trial #567: GFLOPs: 171.6172. Time: 189.4568 us. Best GFLOPs: 220.6736
2024-04-29 07:17:04 [INFO] [task_scheduler.cc:131] [Task #61: fused_nn_contrib_conv2d_NCHWc_1] Trial #568: GFLOPs: 137.5552. Time: 236.3710 us. Best GFLOPs: 220.6736
2024-04-29 07:17:04 [INFO] [task_scheduler.cc:131] [Task #61: fused_nn_contrib_conv2d_NCHWc_1] Trial #569: GFLOPs: 194.1307. Time: 167.4853 us. Best GFLOPs: 220.6736
2024-04-29 07:17:04 [INFO] [task_scheduler.cc:131] [Task #61: fused_nn_contrib_conv2d_NCHWc_1] Trial #570: GFLOPs: 103.5835. Time: 313.8922 us. Best GFLOPs: 220.6736
2024-04-29 07:17:04 [INFO] [task_scheduler.cc:131] [Task #61: fused_nn_contrib_conv2d_NCHWc_1] Trial #571: GFLOPs: 94.6219. Time: 343.6207 us. Best GFLOPs: 220.6736
2024-04-29 07:17:04 [INFO] [task_scheduler.cc:131] [Task #61: fused_nn_contrib_conv2d_NCHWc_1] Trial #572: GFLOPs: 104.9022. Time: 309.9462 us. Best GFLOPs: 220.6736
2024-04-29 07:17:04 [INFO] [task_scheduler.cc:131] [Task #61: fused_nn_contrib_conv2d_NCHWc_1] Trial #573: GFLOPs: 127.4175. Time: 255.1773 us. Best GFLOPs: 220.6736
2024-04-29 07:17:04 [INFO] [task_scheduler.cc:131] [Task #61: fused_nn_contrib_conv2d_NCHWc_1] Trial #574: GFLOPs: 84.8837. Time: 383.0423 us. Best GFLOPs: 220.6736
2024-04-29 07:17:04 [INFO] [task_scheduler.cc:131] [Task #61: fused_nn_contrib_conv2d_NCHWc_1] Trial #575: GFLOPs: 0.5423. Time: 59960.9110 us. Best GFLOPs: 220.6736
2024-04-29 07:17:04 [INFO] [task_scheduler.cc:131] [Task #61: fused_nn_contrib_conv2d_NCHWc_1] Trial #576: GFLOPs: 51.4101. Time: 632.4451 us. Best GFLOPs: 220.6736
2024-04-29 07:34:29 [INFO] [evolutionary_search.cc:713] Generating candidates......
2024-04-29 07:34:30 [INFO] [evolutionary_search.cc:715] Picked top 102 candidate(s) from database
2024-04-29 07:34:34 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0xc83fed8)]: 7 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0xc5901d8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x15321f68)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x1063f078)]: 0 failure(s)
2024-04-29 07:34:34 [INFO] [evolutionary_search.cc:723] Sampled 403 candidate(s)
2024-04-29 07:34:45 [INFO] [evolutionary_search.cc:621] Evolve iter #0 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0xc83fed8)]: 3 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0xc5901d8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x15321f68)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x1063f078)]: 0 failure(s)
2024-04-29 07:34:56 [INFO] [evolutionary_search.cc:621] Evolve iter #1 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0xc83fed8)]: 2 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0xc5901d8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x15321f68)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x1063f078)]: 0 failure(s)
2024-04-29 07:35:07 [INFO] [evolutionary_search.cc:621] Evolve iter #2 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0xc83fed8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0xc5901d8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x15321f68)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x1063f078)]: 0 failure(s)
2024-04-29 07:35:18 [INFO] [evolutionary_search.cc:621] Evolve iter #3 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0xc83fed8)]: 1 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0xc5901d8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x15321f68)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x1063f078)]: 0 failure(s)
2024-04-29 07:35:24 [INFO] [evolutionary_search.cc:649] Scores of the best 64 candidates:
[1 : 16]:	0.8244  0.8135  0.8135  0.8009  0.7997  0.7939  0.7921  0.7848  0.7709  0.7700  0.7694  0.7640  0.7640  0.7640  0.7640  0.7640
[17 : 32]:	0.7601  0.7539  0.7539  0.7509  0.7504  0.7501  0.7501  0.7501  0.7501  0.7501  0.7486  0.7486  0.7486  0.7486  0.7486  0.7486
[33 : 48]:	0.7447  0.7447  0.7447  0.7447  0.7395  0.7395  0.7393  0.7392  0.7392  0.7392  0.7389  0.7389  0.7389  0.7389  0.7389  0.7389
[49 : 64]:	0.7389  0.7389  0.7389  0.7389  0.7389  0.7389  0.7389  0.7389  0.7385  0.7385  0.7385  0.7368  0.7368  0.7362  0.7362  0.7362
2024-04-29 07:35:24 [INFO] [evolutionary_search.cc:727] Got 64 candidate(s) with evolutionary search
2024-04-29 07:35:24 [INFO] [evolutionary_search.cc:730] Sending 64 candidates(s) for measurement
2024-04-29 07:37:06 [INFO] [task_scheduler.cc:131] [Task #61: fused_nn_contrib_conv2d_NCHWc_1] Trial #577: GFLOPs: 195.1226. Time: 166.6339 us. Best GFLOPs: 220.6736
2024-04-29 07:37:06 [INFO] [task_scheduler.cc:131] [Task #61: fused_nn_contrib_conv2d_NCHWc_1] Trial #578: GFLOPs: 143.9496. Time: 225.8711 us. Best GFLOPs: 220.6736
2024-04-29 07:37:06 [INFO] [task_scheduler.cc:131] [Task #61: fused_nn_contrib_conv2d_NCHWc_1] Trial #579: GFLOPs: 178.4344. Time: 182.2185 us. Best GFLOPs: 220.6736
2024-04-29 07:37:06 [INFO] [task_scheduler.cc:131] [Task #61: fused_nn_contrib_conv2d_NCHWc_1] Trial #580: GFLOPs: 109.3362. Time: 297.3768 us. Best GFLOPs: 220.6736
2024-04-29 07:37:06 [INFO] [task_scheduler.cc:131] [Task #61: fused_nn_contrib_conv2d_NCHWc_1] Trial #581: GFLOPs: 179.0612. Time: 181.5806 us. Best GFLOPs: 220.6736
2024-04-29 07:37:06 [INFO] [task_scheduler.cc:131] [Task #61: fused_nn_contrib_conv2d_NCHWc_1] Trial #582: GFLOPs: 125.4946. Time: 259.0873 us. Best GFLOPs: 220.6736
2024-04-29 07:37:06 [INFO] [task_scheduler.cc:131] [Task #61: fused_nn_contrib_conv2d_NCHWc_1] Trial #583: GFLOPs: 83.0451. Time: 391.5227 us. Best GFLOPs: 220.6736
2024-04-29 07:37:06 [INFO] [task_scheduler.cc:131] [Task #61: fused_nn_contrib_conv2d_NCHWc_1] Trial #584: GFLOPs: 71.0605. Time: 457.5547 us. Best GFLOPs: 220.6736
2024-04-29 07:37:06 [INFO] [task_scheduler.cc:131] [Task #61: fused_nn_contrib_conv2d_NCHWc_1] Trial #585: GFLOPs: 84.1493. Time: 386.3851 us. Best GFLOPs: 220.6736
2024-04-29 07:37:06 [INFO] [task_scheduler.cc:131] [Task #61: fused_nn_contrib_conv2d_NCHWc_1] Trial #586: GFLOPs: 159.7688. Time: 203.5069 us. Best GFLOPs: 220.6736
2024-04-29 07:37:06 [INFO] [task_scheduler.cc:131] [Task #61: fused_nn_contrib_conv2d_NCHWc_1] Trial #587: GFLOPs: 157.4410. Time: 206.5157 us. Best GFLOPs: 220.6736
2024-04-29 07:37:06 [INFO] [task_scheduler.cc:131] [Task #61: fused_nn_contrib_conv2d_NCHWc_1] Trial #588: GFLOPs: 176.7960. Time: 183.9071 us. Best GFLOPs: 220.6736
2024-04-29 07:37:06 [INFO] [task_scheduler.cc:131] [Task #61: fused_nn_contrib_conv2d_NCHWc_1] Trial #589: GFLOPs: 140.0595. Time: 232.1446 us. Best GFLOPs: 220.6736
2024-04-29 07:37:06 [INFO] [task_scheduler.cc:131] [Task #61: fused_nn_contrib_conv2d_NCHWc_1] Trial #590: GFLOPs: 190.9406. Time: 170.2836 us. Best GFLOPs: 220.6736
2024-04-29 07:37:06 [INFO] [task_scheduler.cc:131] [Task #61: fused_nn_contrib_conv2d_NCHWc_1] Trial #591: GFLOPs: 169.2426. Time: 192.1151 us. Best GFLOPs: 220.6736
2024-04-29 07:37:06 [INFO] [task_scheduler.cc:131] [Task #61: fused_nn_contrib_conv2d_NCHWc_1] Trial #592: GFLOPs: 174.3896. Time: 186.4449 us. Best GFLOPs: 220.6736
2024-04-29 07:37:06 [INFO] [task_scheduler.cc:131] [Task #61: fused_nn_contrib_conv2d_NCHWc_1] Trial #593: GFLOPs: 191.5064. Time: 169.7805 us. Best GFLOPs: 220.6736
2024-04-29 07:37:06 [INFO] [task_scheduler.cc:131] [Task #61: fused_nn_contrib_conv2d_NCHWc_1] Trial #594: GFLOPs: 136.3551. Time: 238.4512 us. Best GFLOPs: 220.6736
2024-04-29 07:37:06 [INFO] [task_scheduler.cc:131] [Task #61: fused_nn_contrib_conv2d_NCHWc_1] Trial #595: GFLOPs: 186.2956. Time: 174.5293 us. Best GFLOPs: 220.6736
2024-04-29 07:37:06 [INFO] [task_scheduler.cc:131] [Task #61: fused_nn_contrib_conv2d_NCHWc_1] Trial #596: GFLOPs: 100.2184. Time: 324.4320 us. Best GFLOPs: 220.6736
2024-04-29 07:37:06 [INFO] [task_scheduler.cc:131] [Task #61: fused_nn_contrib_conv2d_NCHWc_1] Trial #597: GFLOPs: 155.9761. Time: 208.4553 us. Best GFLOPs: 220.6736
2024-04-29 07:37:06 [INFO] [task_scheduler.cc:131] [Task #61: fused_nn_contrib_conv2d_NCHWc_1] Trial #598: GFLOPs: 178.1596. Time: 182.4995 us. Best GFLOPs: 220.6736
2024-04-29 07:37:06 [INFO] [task_scheduler.cc:131] [Task #61: fused_nn_contrib_conv2d_NCHWc_1] Trial #599: GFLOPs: 179.2941. Time: 181.3448 us. Best GFLOPs: 220.6736
2024-04-29 07:37:06 [INFO] [task_scheduler.cc:131] [Task #61: fused_nn_contrib_conv2d_NCHWc_1] Trial #600: GFLOPs: 170.2160. Time: 191.0164 us. Best GFLOPs: 220.6736
2024-04-29 07:37:06 [INFO] [task_scheduler.cc:131] [Task #61: fused_nn_contrib_conv2d_NCHWc_1] Trial #601: GFLOPs: 138.5389. Time: 234.6926 us. Best GFLOPs: 220.6736
2024-04-29 07:37:06 [INFO] [task_scheduler.cc:131] [Task #61: fused_nn_contrib_conv2d_NCHWc_1] Trial #602: GFLOPs: 156.0319. Time: 208.3807 us. Best GFLOPs: 220.6736
2024-04-29 07:37:06 [INFO] [task_scheduler.cc:121] [Task #61: fused_nn_contrib_conv2d_NCHWc_1] Trial #603: Error in building:
LocalBuilder: Timeout, killed after 30.0 seconds
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(48), T.int64(14), T.int64(14), T.int64(4)), "float32"), p1: T.Buffer((T.int64(12), T.int64(48), T.int64(3), T.int64(3), T.int64(4), T.int64(4)), "float32"), conv2d_NCHWc: T.Buffer((T.int64(1), T.int64(12), T.int64(14), T.int64(14), T.int64(4)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        data_pad = T.alloc_buffer((T.int64(1), T.int64(48), T.int64(16), T.int64(16), T.int64(4)))
        conv2d_NCHWc_global = T.alloc_buffer((T.int64(1), T.int64(12), T.int64(14), T.int64(14), T.int64(4)))
        for i0_i1_i2_fused in T.parallel(T.int64(768)):
            for i3_i4_fused in T.vectorized(T.int64(64)):
                with T.block("data_pad"):
                    v_i0 = T.axis.spatial(T.int64(1), T.int64(0))
                    v_i1 = T.axis.spatial(T.int64(48), i0_i1_i2_fused // T.int64(16))
                    v_i2 = T.axis.spatial(T.int64(16), i0_i1_i2_fused % T.int64(16))
                    v_i3 = T.axis.spatial(T.int64(16), i3_i4_fused // T.int64(4))
                    v_i4 = T.axis.spatial(T.int64(4), i3_i4_fused % T.int64(4))
                    T.reads(p0[v_i0, v_i1, v_i2 - T.int64(1), v_i3 - T.int64(1), v_i4])
                    T.writes(data_pad[v_i0, v_i1, v_i2, v_i3, v_i4])
                    data_pad[v_i0, v_i1, v_i2, v_i3, v_i4] = T.if_then_else(T.int64(1) <= v_i2 and v_i2 < T.int64(15) and T.int64(1) <= v_i3 and v_i3 < T.int64(15), p0[v_i0, v_i1, v_i2 - T.int64(1), v_i3 - T.int64(1), v_i4], T.float32(0))
        for n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused in T.parallel(T.int64(168), annotations={"pragma_auto_unroll_max_step": 512, "pragma_unroll_explicit": 1}):
            for n_2_init, oc_chunk_2_init, oh_2_init, ow_2_init, oc_block_2_init, n_3_init, oc_chunk_3_init, oh_3_init, ow_3_init in T.grid(T.int64(1), T.int64(2), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(7), T.int64(1)):
                for oc_block_3_fused_init in T.vectorized(T.int64(4)):
                    with T.block("conv2d_NCHWc_init"):
                        v_n = T.axis.spatial(T.int64(1), n_2_init + n_3_init)
                        v_oc_chunk = T.axis.spatial(T.int64(12), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused // T.int64(28) * T.int64(2) + oc_chunk_2_init + oc_chunk_3_init)
                        v_oh = T.axis.spatial(T.int64(14), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused % T.int64(28) // T.int64(14) * T.int64(7) + oh_2_init * T.int64(7) + oh_3_init)
                        v_ow = T.axis.spatial(T.int64(14), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused % T.int64(14) + ow_2_init + ow_3_init)
                        v_oc_block = T.axis.spatial(T.int64(4), oc_block_2_init * T.int64(4) + oc_block_3_fused_init)
                        T.reads()
                        T.writes(conv2d_NCHWc_global[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                        T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                        conv2d_NCHWc_global[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = T.float32(0)
            for ic_0, kh_0, kw_0, n_2, oc_chunk_2, oh_2, ow_2, oc_block_2, ic_1, kh_1, kw_1, n_3, oc_chunk_3, oh_3, ow_3 in T.grid(T.int64(16), T.int64(3), T.int64(1), T.int64(1), T.int64(2), T.int64(1), T.int64(1), T.int64(1), T.int64(12), T.int64(1), T.int64(3), T.int64(1), T.int64(1), T.int64(7), T.int64(1)):
                for oc_block_3_fused in T.vectorized(T.int64(4)):
                    with T.block("conv2d_NCHWc_update"):
                        v_n = T.axis.spatial(T.int64(1), n_2 + n_3)
                        v_oc_chunk = T.axis.spatial(T.int64(12), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused // T.int64(28) * T.int64(2) + oc_chunk_2 + oc_chunk_3)
                        v_oh = T.axis.spatial(T.int64(14), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused % T.int64(28) // T.int64(14) * T.int64(7) + oh_2 * T.int64(7) + oh_3)
                        v_ow = T.axis.spatial(T.int64(14), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused % T.int64(14) + ow_2 + ow_3)
                        v_oc_block = T.axis.spatial(T.int64(4), oc_block_2 * T.int64(4) + oc_block_3_fused)
                        v_ic = T.axis.reduce(T.int64(192), ic_0 * T.int64(12) + ic_1)
                        v_kh = T.axis.reduce(T.int64(3), kh_0 + kh_1)
                        v_kw = T.axis.reduce(T.int64(3), kw_0 * T.int64(3) + kw_1)
                        T.reads(conv2d_NCHWc_global[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block], data_pad[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)], p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block])
                        T.writes(conv2d_NCHWc_global[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                        T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                        conv2d_NCHWc_global[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = conv2d_NCHWc_global[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] + data_pad[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)] * p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block]
            for ax0, ax1, ax2 in T.grid(T.int64(1), T.int64(2), T.int64(7)):
                for ax3_ax4_fused in T.vectorized(T.int64(4)):
                    with T.block("conv2d_NCHWc_global"):
                        v0 = T.axis.spatial(T.int64(1), ax0)
                        v1 = T.axis.spatial(T.int64(12), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused // T.int64(28) * T.int64(2) + ax1)
                        v2 = T.axis.spatial(T.int64(14), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused % T.int64(28) // T.int64(14) * T.int64(7) + ax2)
                        v3 = T.axis.spatial(T.int64(14), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused % T.int64(14))
                        v4 = T.axis.spatial(T.int64(4), ax3_ax4_fused)
                        T.reads(conv2d_NCHWc_global[v0, v1, v2, v3, v4])
                        T.writes(conv2d_NCHWc[v0, v1, v2, v3, v4])
                        conv2d_NCHWc[v0, v1, v2, v3, v4] = conv2d_NCHWc_global[v0, v1, v2, v3, v4]
b0 = sch.get_block(name="data_pad", func_name="main")
b1 = sch.get_block(name="conv2d_NCHWc", func_name="main")
b2 = sch.get_block(name="root", func_name="main")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSRSRS")
l3, l4, l5, l6, l7, l8, l9, l10 = sch.get_loops(block=b1)
v11, v12, v13, v14 = sch.sample_perfect_tile(loop=l3, n=4, max_innermost_factor=64, decision=[1, 1, 1, 1])
l15, l16, l17, l18 = sch.split(loop=l3, factors=[v11, v12, v13, v14], preserve_unit_iters=True)
v19, v20, v21, v22 = sch.sample_perfect_tile(loop=l4, n=4, max_innermost_factor=64, decision=[6, 1, 2, 1])
l23, l24, l25, l26 = sch.split(loop=l4, factors=[v19, v20, v21, v22], preserve_unit_iters=True)
v27, v28, v29, v30 = sch.sample_perfect_tile(loop=l5, n=4, max_innermost_factor=64, decision=[2, 1, 1, 7])
l31, l32, l33, l34 = sch.split(loop=l5, factors=[v27, v28, v29, v30], preserve_unit_iters=True)
v35, v36, v37, v38 = sch.sample_perfect_tile(loop=l6, n=4, max_innermost_factor=64, decision=[14, 1, 1, 1])
l39, l40, l41, l42 = sch.split(loop=l6, factors=[v35, v36, v37, v38], preserve_unit_iters=True)
v43, v44, v45, v46 = sch.sample_perfect_tile(loop=l7, n=4, max_innermost_factor=64, decision=[1, 1, 1, 4])
l47, l48, l49, l50 = sch.split(loop=l7, factors=[v43, v44, v45, v46], preserve_unit_iters=True)
v51, v52 = sch.sample_perfect_tile(loop=l8, n=2, max_innermost_factor=64, decision=[16, 12])
l53, l54 = sch.split(loop=l8, factors=[v51, v52], preserve_unit_iters=True)
v55, v56 = sch.sample_perfect_tile(loop=l9, n=2, max_innermost_factor=64, decision=[3, 1])
l57, l58 = sch.split(loop=l9, factors=[v55, v56], preserve_unit_iters=True)
v59, v60 = sch.sample_perfect_tile(loop=l10, n=2, max_innermost_factor=64, decision=[1, 3])
l61, l62 = sch.split(loop=l10, factors=[v59, v60], preserve_unit_iters=True)
sch.reorder(l15, l23, l31, l39, l47, l16, l24, l32, l40, l48, l53, l57, l61, l17, l25, l33, l41, l49, l54, l58, l62, l18, l26, l34, l42, l50)
b63 = sch.cache_write(block=b1, write_buffer_index=0, storage_scope="global")
sch.reverse_compute_at(block=b63, loop=l48, preserve_unit_loops=True, index=-1)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.vectorize", ann_val=64)
v64 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.unroll_explicit", ann_val=v64)
l65 = sch.sample_compute_location(block=b0, decision=-1)
sch.compute_at(block=b0, loop=l65, preserve_unit_loops=True, index=-1)
sch.enter_postproc()
b66 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b66, ann_key="meta_schedule.parallel")
sch.unannotate(block_or_loop=b66, ann_key="meta_schedule.vectorize")
sch.unannotate(block_or_loop=b66, ann_key="meta_schedule.unroll_explicit")
b67, b68, b69 = sch.get_child_blocks(b66)
l70, l71, l72, l73, l74 = sch.get_loops(block=b67)
l75 = sch.fuse(l70, l71, l72, preserve_unit_iters=True)
sch.parallel(loop=l75)
l76 = sch.fuse(l73, l74, preserve_unit_iters=True)
sch.vectorize(loop=l76)
l77, l78, l79, l80, l81, l82, l83, l84, l85, l86, l87, l88, l89, l90, l91, l92, l93, l94, l95, l96, l97, l98, l99, l100, l101, l102 = sch.get_loops(block=b68)
l103 = sch.fuse(l77, l78, l79, l80, l81, l82, l83, l84, l85, l86, preserve_unit_iters=True)
sch.parallel(loop=l103)
l104 = sch.fuse(l102, preserve_unit_iters=True)
sch.vectorize(loop=l104)
sch.annotate(block_or_loop=l103, ann_key="pragma_auto_unroll_max_step", ann_val=512)
sch.annotate(block_or_loop=l103, ann_key="pragma_unroll_explicit", ann_val=1)
l105, l106, l107, l108, l109, l110 = sch.get_loops(block=b69)
l111 = sch.fuse(l109, l110, preserve_unit_iters=True)
sch.vectorize(loop=l111)
b112 = sch.get_block(name="conv2d_NCHWc", func_name="main")
l113, l114, l115, l116, l117, l118, l119, l120, l121, l122, l123, l124, l125, l126, l127, l128, l129 = sch.get_loops(block=b112)
b130 = sch.decompose_reduction(block=b112, loop=l114)
2024-04-29 07:37:06 [INFO] [task_scheduler.cc:131] [Task #61: fused_nn_contrib_conv2d_NCHWc_1] Trial #604: GFLOPs: 164.1184. Time: 198.1134 us. Best GFLOPs: 220.6736
2024-04-29 07:37:06 [INFO] [task_scheduler.cc:131] [Task #61: fused_nn_contrib_conv2d_NCHWc_1] Trial #605: GFLOPs: 158.3243. Time: 205.3636 us. Best GFLOPs: 220.6736
2024-04-29 07:37:06 [INFO] [task_scheduler.cc:131] [Task #61: fused_nn_contrib_conv2d_NCHWc_1] Trial #606: GFLOPs: 177.7595. Time: 182.9104 us. Best GFLOPs: 220.6736
2024-04-29 07:37:06 [INFO] [task_scheduler.cc:131] [Task #61: fused_nn_contrib_conv2d_NCHWc_1] Trial #607: GFLOPs: 145.0500. Time: 224.1575 us. Best GFLOPs: 220.6736
2024-04-29 07:37:06 [INFO] [task_scheduler.cc:131] [Task #61: fused_nn_contrib_conv2d_NCHWc_1] Trial #608: GFLOPs: 159.1817. Time: 204.2574 us. Best GFLOPs: 220.6736
2024-04-29 07:37:06 [INFO] [task_scheduler.cc:131] [Task #61: fused_nn_contrib_conv2d_NCHWc_1] Trial #609: GFLOPs: 168.7589. Time: 192.6656 us. Best GFLOPs: 220.6736
2024-04-29 07:37:06 [INFO] [task_scheduler.cc:131] [Task #61: fused_nn_contrib_conv2d_NCHWc_1] Trial #610: GFLOPs: 127.1997. Time: 255.6141 us. Best GFLOPs: 220.6736
2024-04-29 07:37:06 [INFO] [task_scheduler.cc:131] [Task #61: fused_nn_contrib_conv2d_NCHWc_1] Trial #611: GFLOPs: 175.4757. Time: 185.2909 us. Best GFLOPs: 220.6736
2024-04-29 07:37:06 [INFO] [task_scheduler.cc:131] [Task #61: fused_nn_contrib_conv2d_NCHWc_1] Trial #612: GFLOPs: 207.6753. Time: 156.5619 us. Best GFLOPs: 220.6736
2024-04-29 07:37:06 [INFO] [task_scheduler.cc:131] [Task #61: fused_nn_contrib_conv2d_NCHWc_1] Trial #613: GFLOPs: 174.0065. Time: 186.8554 us. Best GFLOPs: 220.6736
2024-04-29 07:37:06 [INFO] [task_scheduler.cc:131] [Task #61: fused_nn_contrib_conv2d_NCHWc_1] Trial #614: GFLOPs: 157.2314. Time: 206.7910 us. Best GFLOPs: 220.6736
2024-04-29 07:37:06 [INFO] [task_scheduler.cc:131] [Task #61: fused_nn_contrib_conv2d_NCHWc_1] Trial #615: GFLOPs: 178.3977. Time: 182.2560 us. Best GFLOPs: 220.6736
2024-04-29 07:37:06 [INFO] [task_scheduler.cc:131] [Task #61: fused_nn_contrib_conv2d_NCHWc_1] Trial #616: GFLOPs: 138.4904. Time: 234.7747 us. Best GFLOPs: 220.6736
2024-04-29 07:37:06 [INFO] [task_scheduler.cc:131] [Task #61: fused_nn_contrib_conv2d_NCHWc_1] Trial #617: GFLOPs: 140.6705. Time: 231.1362 us. Best GFLOPs: 220.6736
2024-04-29 07:37:06 [INFO] [task_scheduler.cc:131] [Task #61: fused_nn_contrib_conv2d_NCHWc_1] Trial #618: GFLOPs: 192.9652. Time: 168.4969 us. Best GFLOPs: 220.6736
2024-04-29 07:37:06 [INFO] [task_scheduler.cc:131] [Task #61: fused_nn_contrib_conv2d_NCHWc_1] Trial #619: GFLOPs: 179.6582. Time: 180.9773 us. Best GFLOPs: 220.6736
2024-04-29 07:37:06 [INFO] [task_scheduler.cc:131] [Task #61: fused_nn_contrib_conv2d_NCHWc_1] Trial #620: GFLOPs: 184.0720. Time: 176.6376 us. Best GFLOPs: 220.6736
2024-04-29 07:37:06 [INFO] [task_scheduler.cc:121] [Task #61: fused_nn_contrib_conv2d_NCHWc_1] Trial #621: Error in building:
LocalBuilder: Timeout, killed after 30.0 seconds
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(48), T.int64(14), T.int64(14), T.int64(4)), "float32"), p1: T.Buffer((T.int64(12), T.int64(48), T.int64(3), T.int64(3), T.int64(4), T.int64(4)), "float32"), conv2d_NCHWc: T.Buffer((T.int64(1), T.int64(12), T.int64(14), T.int64(14), T.int64(4)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        data_pad = T.alloc_buffer((T.int64(1), T.int64(48), T.int64(16), T.int64(16), T.int64(4)))
        conv2d_NCHWc_global = T.alloc_buffer((T.int64(1), T.int64(12), T.int64(14), T.int64(14), T.int64(4)))
        for i0_i1_i2_fused in T.parallel(T.int64(768)):
            for i3_i4_fused in T.vectorized(T.int64(64)):
                with T.block("data_pad"):
                    v_i0 = T.axis.spatial(T.int64(1), T.int64(0))
                    v_i1 = T.axis.spatial(T.int64(48), i0_i1_i2_fused // T.int64(16))
                    v_i2 = T.axis.spatial(T.int64(16), i0_i1_i2_fused % T.int64(16))
                    v_i3 = T.axis.spatial(T.int64(16), i3_i4_fused // T.int64(4))
                    v_i4 = T.axis.spatial(T.int64(4), i3_i4_fused % T.int64(4))
                    T.reads(p0[v_i0, v_i1, v_i2 - T.int64(1), v_i3 - T.int64(1), v_i4])
                    T.writes(data_pad[v_i0, v_i1, v_i2, v_i3, v_i4])
                    data_pad[v_i0, v_i1, v_i2, v_i3, v_i4] = T.if_then_else(T.int64(1) <= v_i2 and v_i2 < T.int64(15) and T.int64(1) <= v_i3 and v_i3 < T.int64(15), p0[v_i0, v_i1, v_i2 - T.int64(1), v_i3 - T.int64(1), v_i4], T.float32(0))
        for n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused in T.parallel(T.int64(168), annotations={"pragma_auto_unroll_max_step": 512, "pragma_unroll_explicit": 1}):
            for n_2_init, oc_chunk_2_init, oh_2_init, ow_2_init, oc_block_2_init, n_3_init, oc_chunk_3_init, oh_3_init, ow_3_init in T.grid(T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(7), T.int64(1)):
                for oc_block_3_fused_init in T.vectorized(T.int64(4)):
                    with T.block("conv2d_NCHWc_init"):
                        v_n = T.axis.spatial(T.int64(1), n_2_init + n_3_init)
                        v_oc_chunk = T.axis.spatial(T.int64(12), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused % T.int64(6) * T.int64(2) + oc_chunk_2_init * T.int64(2) + oc_chunk_3_init)
                        v_oh = T.axis.spatial(T.int64(14), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused // T.int64(84) * T.int64(7) + oh_2_init * T.int64(7) + oh_3_init)
                        v_ow = T.axis.spatial(T.int64(14), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused % T.int64(84) // T.int64(6) + ow_2_init + ow_3_init)
                        v_oc_block = T.axis.spatial(T.int64(4), oc_block_2_init * T.int64(4) + oc_block_3_fused_init)
                        T.reads()
                        T.writes(conv2d_NCHWc_global[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                        T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                        conv2d_NCHWc_global[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = T.float32(0)
            for ic_0, kh_0, kw_0, n_2, oc_chunk_2, oh_2, ow_2, oc_block_2, ic_1, kh_1, kw_1, n_3, oc_chunk_3, oh_3, ow_3 in T.grid(T.int64(16), T.int64(3), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(12), T.int64(1), T.int64(3), T.int64(1), T.int64(2), T.int64(7), T.int64(1)):
                for oc_block_3_fused in T.vectorized(T.int64(4)):
                    with T.block("conv2d_NCHWc_update"):
                        v_n = T.axis.spatial(T.int64(1), n_2 + n_3)
                        v_oc_chunk = T.axis.spatial(T.int64(12), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused % T.int64(6) * T.int64(2) + oc_chunk_2 * T.int64(2) + oc_chunk_3)
                        v_oh = T.axis.spatial(T.int64(14), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused // T.int64(84) * T.int64(7) + oh_2 * T.int64(7) + oh_3)
                        v_ow = T.axis.spatial(T.int64(14), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused % T.int64(84) // T.int64(6) + ow_2 + ow_3)
                        v_oc_block = T.axis.spatial(T.int64(4), oc_block_2 * T.int64(4) + oc_block_3_fused)
                        v_ic = T.axis.reduce(T.int64(192), ic_0 * T.int64(12) + ic_1)
                        v_kh = T.axis.reduce(T.int64(3), kh_0 + kh_1)
                        v_kw = T.axis.reduce(T.int64(3), kw_0 * T.int64(3) + kw_1)
                        T.reads(conv2d_NCHWc_global[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block], data_pad[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)], p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block])
                        T.writes(conv2d_NCHWc_global[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                        T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                        conv2d_NCHWc_global[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = conv2d_NCHWc_global[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] + data_pad[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)] * p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block]
            for ax0, ax1, ax2 in T.grid(T.int64(1), T.int64(2), T.int64(7)):
                for ax3_ax4_fused in T.vectorized(T.int64(4)):
                    with T.block("conv2d_NCHWc_global"):
                        v0 = T.axis.spatial(T.int64(1), ax0)
                        v1 = T.axis.spatial(T.int64(12), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused % T.int64(6) * T.int64(2) + ax1)
                        v2 = T.axis.spatial(T.int64(14), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused // T.int64(84) * T.int64(7) + ax2)
                        v3 = T.axis.spatial(T.int64(14), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused % T.int64(84) // T.int64(6))
                        v4 = T.axis.spatial(T.int64(4), ax3_ax4_fused)
                        T.reads(conv2d_NCHWc_global[v0, v1, v2, v3, v4])
                        T.writes(conv2d_NCHWc[v0, v1, v2, v3, v4])
                        conv2d_NCHWc[v0, v1, v2, v3, v4] = conv2d_NCHWc_global[v0, v1, v2, v3, v4]
b0 = sch.get_block(name="data_pad", func_name="main")
b1 = sch.get_block(name="conv2d_NCHWc", func_name="main")
b2 = sch.get_block(name="root", func_name="main")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSRSRS")
l3, l4, l5, l6, l7, l8, l9, l10 = sch.get_loops(block=b1)
v11, v12, v13, v14 = sch.sample_perfect_tile(loop=l3, n=4, max_innermost_factor=64, decision=[1, 1, 1, 1])
l15, l16, l17, l18 = sch.split(loop=l3, factors=[v11, v12, v13, v14], preserve_unit_iters=True)
v19, v20, v21, v22 = sch.sample_perfect_tile(loop=l4, n=4, max_innermost_factor=64, decision=[1, 6, 1, 2])
l23, l24, l25, l26 = sch.split(loop=l4, factors=[v19, v20, v21, v22], preserve_unit_iters=True)
v27, v28, v29, v30 = sch.sample_perfect_tile(loop=l5, n=4, max_innermost_factor=64, decision=[2, 1, 1, 7])
l31, l32, l33, l34 = sch.split(loop=l5, factors=[v27, v28, v29, v30], preserve_unit_iters=True)
v35, v36, v37, v38 = sch.sample_perfect_tile(loop=l6, n=4, max_innermost_factor=64, decision=[14, 1, 1, 1])
l39, l40, l41, l42 = sch.split(loop=l6, factors=[v35, v36, v37, v38], preserve_unit_iters=True)
v43, v44, v45, v46 = sch.sample_perfect_tile(loop=l7, n=4, max_innermost_factor=64, decision=[1, 1, 1, 4])
l47, l48, l49, l50 = sch.split(loop=l7, factors=[v43, v44, v45, v46], preserve_unit_iters=True)
v51, v52 = sch.sample_perfect_tile(loop=l8, n=2, max_innermost_factor=64, decision=[16, 12])
l53, l54 = sch.split(loop=l8, factors=[v51, v52], preserve_unit_iters=True)
v55, v56 = sch.sample_perfect_tile(loop=l9, n=2, max_innermost_factor=64, decision=[3, 1])
l57, l58 = sch.split(loop=l9, factors=[v55, v56], preserve_unit_iters=True)
v59, v60 = sch.sample_perfect_tile(loop=l10, n=2, max_innermost_factor=64, decision=[1, 3])
l61, l62 = sch.split(loop=l10, factors=[v59, v60], preserve_unit_iters=True)
sch.reorder(l15, l23, l31, l39, l47, l16, l24, l32, l40, l48, l53, l57, l61, l17, l25, l33, l41, l49, l54, l58, l62, l18, l26, l34, l42, l50)
b63 = sch.cache_write(block=b1, write_buffer_index=0, storage_scope="global")
sch.reverse_compute_at(block=b63, loop=l48, preserve_unit_loops=True, index=-1)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.vectorize", ann_val=64)
v64 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.unroll_explicit", ann_val=v64)
l65 = sch.sample_compute_location(block=b0, decision=-1)
sch.compute_at(block=b0, loop=l65, preserve_unit_loops=True, index=-1)
sch.enter_postproc()
b66 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b66, ann_key="meta_schedule.parallel")
sch.unannotate(block_or_loop=b66, ann_key="meta_schedule.vectorize")
sch.unannotate(block_or_loop=b66, ann_key="meta_schedule.unroll_explicit")
b67, b68, b69 = sch.get_child_blocks(b66)
l70, l71, l72, l73, l74 = sch.get_loops(block=b67)
l75 = sch.fuse(l70, l71, l72, preserve_unit_iters=True)
sch.parallel(loop=l75)
l76 = sch.fuse(l73, l74, preserve_unit_iters=True)
sch.vectorize(loop=l76)
l77, l78, l79, l80, l81, l82, l83, l84, l85, l86, l87, l88, l89, l90, l91, l92, l93, l94, l95, l96, l97, l98, l99, l100, l101, l102 = sch.get_loops(block=b68)
l103 = sch.fuse(l77, l78, l79, l80, l81, l82, l83, l84, l85, l86, preserve_unit_iters=True)
sch.parallel(loop=l103)
l104 = sch.fuse(l102, preserve_unit_iters=True)
sch.vectorize(loop=l104)
sch.annotate(block_or_loop=l103, ann_key="pragma_auto_unroll_max_step", ann_val=512)
sch.annotate(block_or_loop=l103, ann_key="pragma_unroll_explicit", ann_val=1)
l105, l106, l107, l108, l109, l110 = sch.get_loops(block=b69)
l111 = sch.fuse(l109, l110, preserve_unit_iters=True)
sch.vectorize(loop=l111)
b112 = sch.get_block(name="conv2d_NCHWc", func_name="main")
l113, l114, l115, l116, l117, l118, l119, l120, l121, l122, l123, l124, l125, l126, l127, l128, l129 = sch.get_loops(block=b112)
b130 = sch.decompose_reduction(block=b112, loop=l114)
2024-04-29 07:37:06 [INFO] [task_scheduler.cc:121] [Task #61: fused_nn_contrib_conv2d_NCHWc_1] Trial #622: Error in building:
LocalBuilder: Timeout, killed after 30.0 seconds
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(48), T.int64(14), T.int64(14), T.int64(4)), "float32"), p1: T.Buffer((T.int64(12), T.int64(48), T.int64(3), T.int64(3), T.int64(4), T.int64(4)), "float32"), conv2d_NCHWc: T.Buffer((T.int64(1), T.int64(12), T.int64(14), T.int64(14), T.int64(4)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        data_pad = T.alloc_buffer((T.int64(1), T.int64(48), T.int64(16), T.int64(16), T.int64(4)))
        conv2d_NCHWc_global = T.alloc_buffer((T.int64(1), T.int64(12), T.int64(14), T.int64(14), T.int64(4)))
        for i0_i1_i2_fused in T.parallel(T.int64(768)):
            for i3_i4_fused in T.vectorized(T.int64(64)):
                with T.block("data_pad"):
                    v_i0 = T.axis.spatial(T.int64(1), T.int64(0))
                    v_i1 = T.axis.spatial(T.int64(48), i0_i1_i2_fused // T.int64(16))
                    v_i2 = T.axis.spatial(T.int64(16), i0_i1_i2_fused % T.int64(16))
                    v_i3 = T.axis.spatial(T.int64(16), i3_i4_fused // T.int64(4))
                    v_i4 = T.axis.spatial(T.int64(4), i3_i4_fused % T.int64(4))
                    T.reads(p0[v_i0, v_i1, v_i2 - T.int64(1), v_i3 - T.int64(1), v_i4])
                    T.writes(data_pad[v_i0, v_i1, v_i2, v_i3, v_i4])
                    data_pad[v_i0, v_i1, v_i2, v_i3, v_i4] = T.if_then_else(T.int64(1) <= v_i2 and v_i2 < T.int64(15) and T.int64(1) <= v_i3 and v_i3 < T.int64(15), p0[v_i0, v_i1, v_i2 - T.int64(1), v_i3 - T.int64(1), v_i4], T.float32(0))
        for n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused in T.parallel(T.int64(168), annotations={"pragma_auto_unroll_max_step": 512, "pragma_unroll_explicit": 1}):
            for n_2_init, oc_chunk_2_init, oh_2_init, ow_2_init, oc_block_2_init, n_3_init, oc_chunk_3_init, oh_3_init, ow_3_init in T.grid(T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(7), T.int64(1)):
                for oc_block_3_fused_init in T.vectorized(T.int64(4)):
                    with T.block("conv2d_NCHWc_init"):
                        v_n = T.axis.spatial(T.int64(1), n_2_init + n_3_init)
                        v_oc_chunk = T.axis.spatial(T.int64(12), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused % T.int64(84) // T.int64(14) * T.int64(2) + oc_chunk_2_init * T.int64(2) + oc_chunk_3_init)
                        v_oh = T.axis.spatial(T.int64(14), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused // T.int64(84) * T.int64(7) + oh_2_init * T.int64(7) + oh_3_init)
                        v_ow = T.axis.spatial(T.int64(14), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused % T.int64(14) + ow_2_init + ow_3_init)
                        v_oc_block = T.axis.spatial(T.int64(4), oc_block_2_init * T.int64(4) + oc_block_3_fused_init)
                        T.reads()
                        T.writes(conv2d_NCHWc_global[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                        T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                        conv2d_NCHWc_global[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = T.float32(0)
            for ic_0, kh_0, kw_0, n_2, oc_chunk_2, oh_2, ow_2, oc_block_2, ic_1, kh_1, kw_1, n_3, oc_chunk_3, oh_3, ow_3 in T.grid(T.int64(16), T.int64(3), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(12), T.int64(1), T.int64(3), T.int64(1), T.int64(2), T.int64(7), T.int64(1)):
                for oc_block_3_fused in T.vectorized(T.int64(4)):
                    with T.block("conv2d_NCHWc_update"):
                        v_n = T.axis.spatial(T.int64(1), n_2 + n_3)
                        v_oc_chunk = T.axis.spatial(T.int64(12), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused % T.int64(84) // T.int64(14) * T.int64(2) + oc_chunk_2 * T.int64(2) + oc_chunk_3)
                        v_oh = T.axis.spatial(T.int64(14), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused // T.int64(84) * T.int64(7) + oh_2 * T.int64(7) + oh_3)
                        v_ow = T.axis.spatial(T.int64(14), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused % T.int64(14) + ow_2 + ow_3)
                        v_oc_block = T.axis.spatial(T.int64(4), oc_block_2 * T.int64(4) + oc_block_3_fused)
                        v_ic = T.axis.reduce(T.int64(192), ic_0 * T.int64(12) + ic_1)
                        v_kh = T.axis.reduce(T.int64(3), kh_0 + kh_1)
                        v_kw = T.axis.reduce(T.int64(3), kw_0 * T.int64(3) + kw_1)
                        T.reads(conv2d_NCHWc_global[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block], data_pad[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)], p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block])
                        T.writes(conv2d_NCHWc_global[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                        T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                        conv2d_NCHWc_global[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = conv2d_NCHWc_global[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] + data_pad[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)] * p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block]
            for ax0, ax1, ax2 in T.grid(T.int64(1), T.int64(2), T.int64(7)):
                for ax3_ax4_fused in T.vectorized(T.int64(4)):
                    with T.block("conv2d_NCHWc_global"):
                        v0 = T.axis.spatial(T.int64(1), ax0)
                        v1 = T.axis.spatial(T.int64(12), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused % T.int64(84) // T.int64(14) * T.int64(2) + ax1)
                        v2 = T.axis.spatial(T.int64(14), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused // T.int64(84) * T.int64(7) + ax2)
                        v3 = T.axis.spatial(T.int64(14), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused % T.int64(14))
                        v4 = T.axis.spatial(T.int64(4), ax3_ax4_fused)
                        T.reads(conv2d_NCHWc_global[v0, v1, v2, v3, v4])
                        T.writes(conv2d_NCHWc[v0, v1, v2, v3, v4])
                        conv2d_NCHWc[v0, v1, v2, v3, v4] = conv2d_NCHWc_global[v0, v1, v2, v3, v4]
b0 = sch.get_block(name="data_pad", func_name="main")
b1 = sch.get_block(name="conv2d_NCHWc", func_name="main")
b2 = sch.get_block(name="root", func_name="main")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSRSRS")
l3, l4, l5, l6, l7, l8, l9, l10 = sch.get_loops(block=b1)
v11, v12, v13, v14 = sch.sample_perfect_tile(loop=l3, n=4, max_innermost_factor=64, decision=[1, 1, 1, 1])
l15, l16, l17, l18 = sch.split(loop=l3, factors=[v11, v12, v13, v14], preserve_unit_iters=True)
v19, v20, v21, v22 = sch.sample_perfect_tile(loop=l4, n=4, max_innermost_factor=64, decision=[1, 6, 1, 2])
l23, l24, l25, l26 = sch.split(loop=l4, factors=[v19, v20, v21, v22], preserve_unit_iters=True)
v27, v28, v29, v30 = sch.sample_perfect_tile(loop=l5, n=4, max_innermost_factor=64, decision=[2, 1, 1, 7])
l31, l32, l33, l34 = sch.split(loop=l5, factors=[v27, v28, v29, v30], preserve_unit_iters=True)
v35, v36, v37, v38 = sch.sample_perfect_tile(loop=l6, n=4, max_innermost_factor=64, decision=[1, 14, 1, 1])
l39, l40, l41, l42 = sch.split(loop=l6, factors=[v35, v36, v37, v38], preserve_unit_iters=True)
v43, v44, v45, v46 = sch.sample_perfect_tile(loop=l7, n=4, max_innermost_factor=64, decision=[1, 1, 1, 4])
l47, l48, l49, l50 = sch.split(loop=l7, factors=[v43, v44, v45, v46], preserve_unit_iters=True)
v51, v52 = sch.sample_perfect_tile(loop=l8, n=2, max_innermost_factor=64, decision=[16, 12])
l53, l54 = sch.split(loop=l8, factors=[v51, v52], preserve_unit_iters=True)
v55, v56 = sch.sample_perfect_tile(loop=l9, n=2, max_innermost_factor=64, decision=[3, 1])
l57, l58 = sch.split(loop=l9, factors=[v55, v56], preserve_unit_iters=True)
v59, v60 = sch.sample_perfect_tile(loop=l10, n=2, max_innermost_factor=64, decision=[1, 3])
l61, l62 = sch.split(loop=l10, factors=[v59, v60], preserve_unit_iters=True)
sch.reorder(l15, l23, l31, l39, l47, l16, l24, l32, l40, l48, l53, l57, l61, l17, l25, l33, l41, l49, l54, l58, l62, l18, l26, l34, l42, l50)
b63 = sch.cache_write(block=b1, write_buffer_index=0, storage_scope="global")
sch.reverse_compute_at(block=b63, loop=l48, preserve_unit_loops=True, index=-1)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.vectorize", ann_val=64)
v64 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.unroll_explicit", ann_val=v64)
l65 = sch.sample_compute_location(block=b0, decision=-1)
sch.compute_at(block=b0, loop=l65, preserve_unit_loops=True, index=-1)
sch.enter_postproc()
b66 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b66, ann_key="meta_schedule.parallel")
sch.unannotate(block_or_loop=b66, ann_key="meta_schedule.vectorize")
sch.unannotate(block_or_loop=b66, ann_key="meta_schedule.unroll_explicit")
b67, b68, b69 = sch.get_child_blocks(b66)
l70, l71, l72, l73, l74 = sch.get_loops(block=b67)
l75 = sch.fuse(l70, l71, l72, preserve_unit_iters=True)
sch.parallel(loop=l75)
l76 = sch.fuse(l73, l74, preserve_unit_iters=True)
sch.vectorize(loop=l76)
l77, l78, l79, l80, l81, l82, l83, l84, l85, l86, l87, l88, l89, l90, l91, l92, l93, l94, l95, l96, l97, l98, l99, l100, l101, l102 = sch.get_loops(block=b68)
l103 = sch.fuse(l77, l78, l79, l80, l81, l82, l83, l84, l85, l86, preserve_unit_iters=True)
sch.parallel(loop=l103)
l104 = sch.fuse(l102, preserve_unit_iters=True)
sch.vectorize(loop=l104)
sch.annotate(block_or_loop=l103, ann_key="pragma_auto_unroll_max_step", ann_val=512)
sch.annotate(block_or_loop=l103, ann_key="pragma_unroll_explicit", ann_val=1)
l105, l106, l107, l108, l109, l110 = sch.get_loops(block=b69)
l111 = sch.fuse(l109, l110, preserve_unit_iters=True)
sch.vectorize(loop=l111)
b112 = sch.get_block(name="conv2d_NCHWc", func_name="main")
l113, l114, l115, l116, l117, l118, l119, l120, l121, l122, l123, l124, l125, l126, l127, l128, l129 = sch.get_loops(block=b112)
b130 = sch.decompose_reduction(block=b112, loop=l114)
2024-04-29 07:37:06 [INFO] [task_scheduler.cc:131] [Task #61: fused_nn_contrib_conv2d_NCHWc_1] Trial #623: GFLOPs: 171.2853. Time: 189.8240 us. Best GFLOPs: 220.6736
2024-04-29 07:37:06 [INFO] [task_scheduler.cc:131] [Task #61: fused_nn_contrib_conv2d_NCHWc_1] Trial #624: GFLOPs: 115.7616. Time: 280.8708 us. Best GFLOPs: 220.6736
2024-04-29 07:37:06 [INFO] [task_scheduler.cc:131] [Task #61: fused_nn_contrib_conv2d_NCHWc_1] Trial #625: GFLOPs: 168.3683. Time: 193.1126 us. Best GFLOPs: 220.6736
2024-04-29 07:37:06 [INFO] [task_scheduler.cc:131] [Task #61: fused_nn_contrib_conv2d_NCHWc_1] Trial #626: GFLOPs: 157.5067. Time: 206.4296 us. Best GFLOPs: 220.6736
2024-04-29 07:37:06 [INFO] [task_scheduler.cc:131] [Task #61: fused_nn_contrib_conv2d_NCHWc_1] Trial #627: GFLOPs: 157.3496. Time: 206.6357 us. Best GFLOPs: 220.6736
2024-04-29 07:37:06 [INFO] [task_scheduler.cc:131] [Task #61: fused_nn_contrib_conv2d_NCHWc_1] Trial #628: GFLOPs: 148.9801. Time: 218.2443 us. Best GFLOPs: 220.6736
2024-04-29 07:37:06 [INFO] [task_scheduler.cc:131] [Task #61: fused_nn_contrib_conv2d_NCHWc_1] Trial #629: GFLOPs: 159.6431. Time: 203.6671 us. Best GFLOPs: 220.6736
2024-04-29 07:37:06 [INFO] [task_scheduler.cc:131] [Task #61: fused_nn_contrib_conv2d_NCHWc_1] Trial #630: GFLOPs: 158.2016. Time: 205.5228 us. Best GFLOPs: 220.6736
2024-04-29 07:37:06 [INFO] [task_scheduler.cc:131] [Task #61: fused_nn_contrib_conv2d_NCHWc_1] Trial #631: GFLOPs: 172.3847. Time: 188.6134 us. Best GFLOPs: 220.6736
2024-04-29 07:37:06 [INFO] [task_scheduler.cc:131] [Task #61: fused_nn_contrib_conv2d_NCHWc_1] Trial #632: GFLOPs: 156.0598. Time: 208.3435 us. Best GFLOPs: 220.6736
2024-04-29 07:37:06 [INFO] [task_scheduler.cc:131] [Task #61: fused_nn_contrib_conv2d_NCHWc_1] Trial #633: GFLOPs: 196.3258. Time: 165.6127 us. Best GFLOPs: 220.6736
2024-04-29 07:37:06 [INFO] [task_scheduler.cc:131] [Task #61: fused_nn_contrib_conv2d_NCHWc_1] Trial #634: GFLOPs: 162.0617. Time: 200.6275 us. Best GFLOPs: 220.6736
2024-04-29 07:37:06 [INFO] [task_scheduler.cc:131] [Task #61: fused_nn_contrib_conv2d_NCHWc_1] Trial #635: GFLOPs: 183.5278. Time: 177.1614 us. Best GFLOPs: 220.6736
2024-04-29 07:37:06 [INFO] [task_scheduler.cc:131] [Task #61: fused_nn_contrib_conv2d_NCHWc_1] Trial #636: GFLOPs: 115.5389. Time: 281.4121 us. Best GFLOPs: 220.6736
2024-04-29 07:37:06 [INFO] [task_scheduler.cc:131] [Task #61: fused_nn_contrib_conv2d_NCHWc_1] Trial #637: GFLOPs: 139.8651. Time: 232.4671 us. Best GFLOPs: 220.6736
2024-04-29 07:37:06 [INFO] [task_scheduler.cc:131] [Task #61: fused_nn_contrib_conv2d_NCHWc_1] Trial #638: GFLOPs: 4.3920. Time: 7403.0313 us. Best GFLOPs: 220.6736
2024-04-29 07:37:06 [INFO] [task_scheduler.cc:131] [Task #61: fused_nn_contrib_conv2d_NCHWc_1] Trial #639: GFLOPs: 33.6853. Time: 965.2294 us. Best GFLOPs: 220.6736
2024-04-29 07:37:06 [INFO] [task_scheduler.cc:131] [Task #61: fused_nn_contrib_conv2d_NCHWc_1] Trial #640: GFLOPs: 40.8014. Time: 796.8863 us. Best GFLOPs: 220.6736
