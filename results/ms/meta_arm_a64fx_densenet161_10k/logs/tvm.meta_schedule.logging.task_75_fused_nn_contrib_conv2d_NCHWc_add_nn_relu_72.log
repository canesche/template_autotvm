2024-04-29 02:33:13 [INFO] [task_scheduler.cc:160] Initializing Task #75: "fused_nn_contrib_conv2d_NCHWc_add_nn_relu_72"
2024-04-29 02:33:13 [INFO] [task_scheduler.cc:35] 
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(84), T.int64(56), T.int64(56), T.int64(4)), "float32"), p1: T.Buffer((T.int64(48), T.int64(84), T.int64(1), T.int64(1), T.int64(4), T.int64(4)), "float32"), p2: T.Buffer((T.int64(1), T.int64(48), T.int64(1), T.int64(1), T.int64(4)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(48), T.int64(56), T.int64(56), T.int64(4)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        conv2d_NCHWc = T.alloc_buffer((T.int64(1), T.int64(48), T.int64(56), T.int64(56), T.int64(4)))
        T_add = T.alloc_buffer((T.int64(1), T.int64(48), T.int64(56), T.int64(56), T.int64(4)))
        for n, oc_chunk, oh, ow, oc_block, ic, kh, kw in T.grid(T.int64(1), T.int64(48), T.int64(56), T.int64(56), T.int64(4), T.int64(336), T.int64(1), T.int64(1)):
            with T.block("conv2d_NCHWc"):
                v_n, v_oc_chunk, v_oh, v_ow, v_oc_block, v_ic, v_kh, v_kw = T.axis.remap("SSSSSRRR", [n, oc_chunk, oh, ow, oc_block, ic, kh, kw])
                T.reads(p0[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)], p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block])
                T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                with T.init():
                    conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = T.float32(0)
                conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] + p0[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)] * p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block]
        for ax0, ax1, ax2, ax3, ax4 in T.grid(T.int64(1), T.int64(48), T.int64(56), T.int64(56), T.int64(4)):
            with T.block("T_add"):
                v_ax0, v_ax1, v_ax2, v_ax3, v_ax4 = T.axis.remap("SSSSS", [ax0, ax1, ax2, ax3, ax4])
                T.reads(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4])
                T.writes(T_add[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                T_add[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] + p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4]
        for ax0, ax1, ax2, ax3, ax4 in T.grid(T.int64(1), T.int64(48), T.int64(56), T.int64(56), T.int64(4)):
            with T.block("T_relu"):
                v_ax0, v_ax1, v_ax2, v_ax3, v_ax4 = T.axis.remap("SSSSS", [ax0, ax1, ax2, ax3, ax4])
                T.reads(T_add[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                T.writes(T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.max(T_add[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], T.float32(0))
2024-04-29 02:33:13 [INFO] [task_scheduler.cc:164] Total 3 design space(s) generated
2024-04-29 02:33:13 [INFO] [task_scheduler.cc:170] Design space #0:
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(84), T.int64(56), T.int64(56), T.int64(4)), "float32"), p1: T.Buffer((T.int64(48), T.int64(84), T.int64(1), T.int64(1), T.int64(4), T.int64(4)), "float32"), p2: T.Buffer((T.int64(1), T.int64(48), T.int64(1), T.int64(1), T.int64(4)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(48), T.int64(56), T.int64(56), T.int64(4)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        with T.block("root"):
            T.reads()
            T.writes()
            T.block_attr({"meta_schedule.parallel": 768, "meta_schedule.unroll_explicit": 0, "meta_schedule.vectorize": 64})
            conv2d_NCHWc = T.alloc_buffer((T.int64(1), T.int64(48), T.int64(56), T.int64(56), T.int64(4)))
            for n_0, oc_chunk_0, oh_0, ow_0, oc_block_0, n_1, oc_chunk_1, oh_1, ow_1, oc_block_1, ic_0, kh_0, kw_0, n_2, oc_chunk_2, oh_2, ow_2, oc_block_2, ic_1, kh_1, kw_1, n_3, oc_chunk_3, oh_3, ow_3, oc_block_3 in T.grid(T.int64(1), T.int64(1), T.int64(7), T.int64(2), T.int64(1), T.int64(1), T.int64(6), T.int64(1), T.int64(2), T.int64(1), T.int64(48), T.int64(1), T.int64(1), T.int64(1), T.int64(8), T.int64(8), T.int64(1), T.int64(2), T.int64(7), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(14), T.int64(2)):
                with T.block("conv2d_NCHWc"):
                    v_n = T.axis.spatial(T.int64(1), n_0 + n_1 + n_2 + n_3)
                    v_oc_chunk = T.axis.spatial(T.int64(48), oc_chunk_0 * T.int64(48) + oc_chunk_1 * T.int64(8) + oc_chunk_2 + oc_chunk_3)
                    v_oh = T.axis.spatial(T.int64(56), oh_0 * T.int64(8) + oh_1 * T.int64(8) + oh_2 + oh_3)
                    v_ow = T.axis.spatial(T.int64(56), ow_0 * T.int64(28) + ow_1 * T.int64(14) + ow_2 * T.int64(14) + ow_3)
                    v_oc_block = T.axis.spatial(T.int64(4), oc_block_0 * T.int64(4) + oc_block_1 * T.int64(4) + oc_block_2 * T.int64(2) + oc_block_3)
                    v_ic = T.axis.reduce(T.int64(336), ic_0 * T.int64(7) + ic_1)
                    v_kh = T.axis.reduce(T.int64(1), kh_0 + kh_1)
                    v_kw = T.axis.reduce(T.int64(1), kw_0 + kw_1)
                    T.reads(p0[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)], p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block])
                    T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                    T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                    with T.init():
                        conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = T.float32(0)
                    conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] + p0[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)] * p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block]
            for ax0, ax1, ax2, ax3, ax4 in T.grid(T.int64(1), T.int64(48), T.int64(56), T.int64(56), T.int64(4)):
                with T.block("T_relu"):
                    v_ax0, v_ax1, v_ax2, v_ax3, v_ax4 = T.axis.remap("SSSSS", [ax0, ax1, ax2, ax3, ax4])
                    T.reads(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4])
                    T.writes(T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                    T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.max(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] + p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4], T.float32(0))
b0 = sch.get_block(name="conv2d_NCHWc", func_name="main")
b1 = sch.get_block(name="T_add", func_name="main")
b2 = sch.get_block(name="root", func_name="main")
sch.compute_inline(block=b1)
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.tiling_structure", ann_val="SSRSRS")
l3, l4, l5, l6, l7, l8, l9, l10 = sch.get_loops(block=b0)
v11, v12, v13, v14 = sch.sample_perfect_tile(loop=l3, n=4, max_innermost_factor=64, decision=[1, 1, 1, 1])
l15, l16, l17, l18 = sch.split(loop=l3, factors=[v11, v12, v13, v14], preserve_unit_iters=True)
v19, v20, v21, v22 = sch.sample_perfect_tile(loop=l4, n=4, max_innermost_factor=64, decision=[1, 6, 8, 1])
l23, l24, l25, l26 = sch.split(loop=l4, factors=[v19, v20, v21, v22], preserve_unit_iters=True)
v27, v28, v29, v30 = sch.sample_perfect_tile(loop=l5, n=4, max_innermost_factor=64, decision=[7, 1, 8, 1])
l31, l32, l33, l34 = sch.split(loop=l5, factors=[v27, v28, v29, v30], preserve_unit_iters=True)
v35, v36, v37, v38 = sch.sample_perfect_tile(loop=l6, n=4, max_innermost_factor=64, decision=[2, 2, 1, 14])
l39, l40, l41, l42 = sch.split(loop=l6, factors=[v35, v36, v37, v38], preserve_unit_iters=True)
v43, v44, v45, v46 = sch.sample_perfect_tile(loop=l7, n=4, max_innermost_factor=64, decision=[1, 1, 2, 2])
l47, l48, l49, l50 = sch.split(loop=l7, factors=[v43, v44, v45, v46], preserve_unit_iters=True)
v51, v52 = sch.sample_perfect_tile(loop=l8, n=2, max_innermost_factor=64, decision=[48, 7])
l53, l54 = sch.split(loop=l8, factors=[v51, v52], preserve_unit_iters=True)
v55, v56 = sch.sample_perfect_tile(loop=l9, n=2, max_innermost_factor=64, decision=[1, 1])
l57, l58 = sch.split(loop=l9, factors=[v55, v56], preserve_unit_iters=True)
v59, v60 = sch.sample_perfect_tile(loop=l10, n=2, max_innermost_factor=64, decision=[1, 1])
l61, l62 = sch.split(loop=l10, factors=[v59, v60], preserve_unit_iters=True)
sch.reorder(l15, l23, l31, l39, l47, l16, l24, l32, l40, l48, l53, l57, l61, l17, l25, l33, l41, l49, l54, l58, l62, l18, l26, l34, l42, l50)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.vectorize", ann_val=64)
v63 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=0)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.unroll_explicit", ann_val=v63)
2024-04-29 02:33:13 [INFO] [task_scheduler.cc:170] Design space #1:
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(84), T.int64(56), T.int64(56), T.int64(4)), "float32"), p1: T.Buffer((T.int64(48), T.int64(84), T.int64(1), T.int64(1), T.int64(4), T.int64(4)), "float32"), p2: T.Buffer((T.int64(1), T.int64(48), T.int64(1), T.int64(1), T.int64(4)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(48), T.int64(56), T.int64(56), T.int64(4)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        with T.block("root"):
            T.reads()
            T.writes()
            T.block_attr({"meta_schedule.parallel": 768, "meta_schedule.unroll_explicit": 16, "meta_schedule.vectorize": 64})
            conv2d_NCHWc = T.alloc_buffer((T.int64(1), T.int64(48), T.int64(56), T.int64(56), T.int64(4)))
            for n_0, oc_chunk_0, oh_0, ow_0, oc_block_0, n_1, oc_chunk_1, oh_1, ow_1, oc_block_1 in T.grid(T.int64(1), T.int64(1), T.int64(7), T.int64(2), T.int64(1), T.int64(1), T.int64(6), T.int64(1), T.int64(2), T.int64(1)):
                for ic_0, kh_0, kw_0, n_2, oc_chunk_2, oh_2, ow_2, oc_block_2, ic_1, kh_1, kw_1, n_3, oc_chunk_3, oh_3, ow_3, oc_block_3 in T.grid(T.int64(48), T.int64(1), T.int64(1), T.int64(1), T.int64(8), T.int64(8), T.int64(1), T.int64(2), T.int64(7), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(14), T.int64(2)):
                    with T.block("conv2d_NCHWc"):
                        v_n = T.axis.spatial(T.int64(1), n_0 + n_1 + n_2 + n_3)
                        v_oc_chunk = T.axis.spatial(T.int64(48), oc_chunk_0 * T.int64(48) + oc_chunk_1 * T.int64(8) + oc_chunk_2 + oc_chunk_3)
                        v_oh = T.axis.spatial(T.int64(56), oh_0 * T.int64(8) + oh_1 * T.int64(8) + oh_2 + oh_3)
                        v_ow = T.axis.spatial(T.int64(56), ow_0 * T.int64(28) + ow_1 * T.int64(14) + ow_2 * T.int64(14) + ow_3)
                        v_oc_block = T.axis.spatial(T.int64(4), oc_block_0 * T.int64(4) + oc_block_1 * T.int64(4) + oc_block_2 * T.int64(2) + oc_block_3)
                        v_ic = T.axis.reduce(T.int64(336), ic_0 * T.int64(7) + ic_1)
                        v_kh = T.axis.reduce(T.int64(1), kh_0 + kh_1)
                        v_kw = T.axis.reduce(T.int64(1), kw_0 + kw_1)
                        T.reads(p0[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)], p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block])
                        T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                        T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                        with T.init():
                            conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = T.float32(0)
                        conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] + p0[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)] * p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block]
                for ax0, ax1, ax2, ax3, ax4 in T.grid(T.int64(1), T.int64(8), T.int64(8), T.int64(14), T.int64(4)):
                    with T.block("T_relu"):
                        v_ax0 = T.axis.spatial(T.int64(1), ax0)
                        v_ax1 = T.axis.spatial(T.int64(48), oc_chunk_1 * T.int64(8) + ax1)
                        v_ax2 = T.axis.spatial(T.int64(56), oh_0 * T.int64(8) + ax2)
                        v_ax3 = T.axis.spatial(T.int64(56), ow_0 * T.int64(28) + ow_1 * T.int64(14) + ax3)
                        v_ax4 = T.axis.spatial(T.int64(4), ax4)
                        T.reads(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4])
                        T.writes(T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                        T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.max(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] + p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4], T.float32(0))
b0 = sch.get_block(name="conv2d_NCHWc", func_name="main")
b1 = sch.get_block(name="T_add", func_name="main")
b2 = sch.get_block(name="root", func_name="main")
sch.compute_inline(block=b1)
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.tiling_structure", ann_val="SSRSRS")
l3, l4, l5, l6, l7, l8, l9, l10 = sch.get_loops(block=b0)
v11, v12, v13, v14 = sch.sample_perfect_tile(loop=l3, n=4, max_innermost_factor=64, decision=[1, 1, 1, 1])
l15, l16, l17, l18 = sch.split(loop=l3, factors=[v11, v12, v13, v14], preserve_unit_iters=True)
v19, v20, v21, v22 = sch.sample_perfect_tile(loop=l4, n=4, max_innermost_factor=64, decision=[1, 6, 8, 1])
l23, l24, l25, l26 = sch.split(loop=l4, factors=[v19, v20, v21, v22], preserve_unit_iters=True)
v27, v28, v29, v30 = sch.sample_perfect_tile(loop=l5, n=4, max_innermost_factor=64, decision=[7, 1, 8, 1])
l31, l32, l33, l34 = sch.split(loop=l5, factors=[v27, v28, v29, v30], preserve_unit_iters=True)
v35, v36, v37, v38 = sch.sample_perfect_tile(loop=l6, n=4, max_innermost_factor=64, decision=[2, 2, 1, 14])
l39, l40, l41, l42 = sch.split(loop=l6, factors=[v35, v36, v37, v38], preserve_unit_iters=True)
v43, v44, v45, v46 = sch.sample_perfect_tile(loop=l7, n=4, max_innermost_factor=64, decision=[1, 1, 2, 2])
l47, l48, l49, l50 = sch.split(loop=l7, factors=[v43, v44, v45, v46], preserve_unit_iters=True)
v51, v52 = sch.sample_perfect_tile(loop=l8, n=2, max_innermost_factor=64, decision=[48, 7])
l53, l54 = sch.split(loop=l8, factors=[v51, v52], preserve_unit_iters=True)
v55, v56 = sch.sample_perfect_tile(loop=l9, n=2, max_innermost_factor=64, decision=[1, 1])
l57, l58 = sch.split(loop=l9, factors=[v55, v56], preserve_unit_iters=True)
v59, v60 = sch.sample_perfect_tile(loop=l10, n=2, max_innermost_factor=64, decision=[1, 1])
l61, l62 = sch.split(loop=l10, factors=[v59, v60], preserve_unit_iters=True)
sch.reorder(l15, l23, l31, l39, l47, l16, l24, l32, l40, l48, l53, l57, l61, l17, l25, l33, l41, l49, l54, l58, l62, l18, l26, l34, l42, l50)
b63, = sch.get_consumers(block=b0)
sch.reverse_compute_at(block=b63, loop=l48, preserve_unit_loops=True, index=-1)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.vectorize", ann_val=64)
v64 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=1)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.unroll_explicit", ann_val=v64)
2024-04-29 02:33:13 [INFO] [task_scheduler.cc:170] Design space #2:
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(84), T.int64(56), T.int64(56), T.int64(4)), "float32"), p1: T.Buffer((T.int64(48), T.int64(84), T.int64(1), T.int64(1), T.int64(4), T.int64(4)), "float32"), p2: T.Buffer((T.int64(1), T.int64(48), T.int64(1), T.int64(1), T.int64(4)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(48), T.int64(56), T.int64(56), T.int64(4)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        with T.block("root"):
            T.reads()
            T.writes()
            T.block_attr({"meta_schedule.parallel": 768, "meta_schedule.unroll_explicit": 0, "meta_schedule.vectorize": 64})
            conv2d_NCHWc = T.alloc_buffer((T.int64(1), T.int64(48), T.int64(56), T.int64(56), T.int64(4)))
            for n_0, oc_chunk_0, oh_0, ow_0, oc_block_0 in T.grid(T.int64(1), T.int64(1), T.int64(7), T.int64(2), T.int64(1)):
                for n_1, oc_chunk_1, oh_1, ow_1, oc_block_1, ic_0, kh_0, kw_0, n_2, oc_chunk_2, oh_2, ow_2, oc_block_2, ic_1, kh_1, kw_1, n_3, oc_chunk_3, oh_3, ow_3, oc_block_3 in T.grid(T.int64(1), T.int64(6), T.int64(1), T.int64(2), T.int64(1), T.int64(48), T.int64(1), T.int64(1), T.int64(1), T.int64(8), T.int64(8), T.int64(1), T.int64(2), T.int64(7), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(14), T.int64(2)):
                    with T.block("conv2d_NCHWc"):
                        v_n = T.axis.spatial(T.int64(1), n_0 + n_1 + n_2 + n_3)
                        v_oc_chunk = T.axis.spatial(T.int64(48), oc_chunk_0 * T.int64(48) + oc_chunk_1 * T.int64(8) + oc_chunk_2 + oc_chunk_3)
                        v_oh = T.axis.spatial(T.int64(56), oh_0 * T.int64(8) + oh_1 * T.int64(8) + oh_2 + oh_3)
                        v_ow = T.axis.spatial(T.int64(56), ow_0 * T.int64(28) + ow_1 * T.int64(14) + ow_2 * T.int64(14) + ow_3)
                        v_oc_block = T.axis.spatial(T.int64(4), oc_block_0 * T.int64(4) + oc_block_1 * T.int64(4) + oc_block_2 * T.int64(2) + oc_block_3)
                        v_ic = T.axis.reduce(T.int64(336), ic_0 * T.int64(7) + ic_1)
                        v_kh = T.axis.reduce(T.int64(1), kh_0 + kh_1)
                        v_kw = T.axis.reduce(T.int64(1), kw_0 + kw_1)
                        T.reads(p0[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)], p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block])
                        T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                        T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                        with T.init():
                            conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = T.float32(0)
                        conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] + p0[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)] * p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block]
                for ax0, ax1, ax2, ax3, ax4 in T.grid(T.int64(1), T.int64(48), T.int64(8), T.int64(28), T.int64(4)):
                    with T.block("T_relu"):
                        v_ax0, v_ax1 = T.axis.remap("SS", [ax0, ax1])
                        v_ax2 = T.axis.spatial(T.int64(56), oh_0 * T.int64(8) + ax2)
                        v_ax3 = T.axis.spatial(T.int64(56), ow_0 * T.int64(28) + ax3)
                        v_ax4 = T.axis.spatial(T.int64(4), ax4)
                        T.reads(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4])
                        T.writes(T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                        T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.max(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] + p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4], T.float32(0))
b0 = sch.get_block(name="conv2d_NCHWc", func_name="main")
b1 = sch.get_block(name="T_add", func_name="main")
b2 = sch.get_block(name="root", func_name="main")
sch.compute_inline(block=b1)
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.tiling_structure", ann_val="SSRSRS")
l3, l4, l5, l6, l7, l8, l9, l10 = sch.get_loops(block=b0)
v11, v12, v13, v14 = sch.sample_perfect_tile(loop=l3, n=4, max_innermost_factor=64, decision=[1, 1, 1, 1])
l15, l16, l17, l18 = sch.split(loop=l3, factors=[v11, v12, v13, v14], preserve_unit_iters=True)
v19, v20, v21, v22 = sch.sample_perfect_tile(loop=l4, n=4, max_innermost_factor=64, decision=[1, 6, 8, 1])
l23, l24, l25, l26 = sch.split(loop=l4, factors=[v19, v20, v21, v22], preserve_unit_iters=True)
v27, v28, v29, v30 = sch.sample_perfect_tile(loop=l5, n=4, max_innermost_factor=64, decision=[7, 1, 8, 1])
l31, l32, l33, l34 = sch.split(loop=l5, factors=[v27, v28, v29, v30], preserve_unit_iters=True)
v35, v36, v37, v38 = sch.sample_perfect_tile(loop=l6, n=4, max_innermost_factor=64, decision=[2, 2, 1, 14])
l39, l40, l41, l42 = sch.split(loop=l6, factors=[v35, v36, v37, v38], preserve_unit_iters=True)
v43, v44, v45, v46 = sch.sample_perfect_tile(loop=l7, n=4, max_innermost_factor=64, decision=[1, 1, 2, 2])
l47, l48, l49, l50 = sch.split(loop=l7, factors=[v43, v44, v45, v46], preserve_unit_iters=True)
v51, v52 = sch.sample_perfect_tile(loop=l8, n=2, max_innermost_factor=64, decision=[48, 7])
l53, l54 = sch.split(loop=l8, factors=[v51, v52], preserve_unit_iters=True)
v55, v56 = sch.sample_perfect_tile(loop=l9, n=2, max_innermost_factor=64, decision=[1, 1])
l57, l58 = sch.split(loop=l9, factors=[v55, v56], preserve_unit_iters=True)
v59, v60 = sch.sample_perfect_tile(loop=l10, n=2, max_innermost_factor=64, decision=[1, 1])
l61, l62 = sch.split(loop=l10, factors=[v59, v60], preserve_unit_iters=True)
sch.reorder(l15, l23, l31, l39, l47, l16, l24, l32, l40, l48, l53, l57, l61, l17, l25, l33, l41, l49, l54, l58, l62, l18, l26, l34, l42, l50)
b63, = sch.get_consumers(block=b0)
sch.reverse_compute_at(block=b63, loop=l47, preserve_unit_loops=True, index=-1)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.vectorize", ann_val=64)
v64 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=0)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.unroll_explicit", ann_val=v64)
2024-04-29 04:31:33 [INFO] [evolutionary_search.cc:713] Generating candidates......
2024-04-29 04:31:33 [INFO] [evolutionary_search.cc:715] Picked top 0 candidate(s) from database
2024-04-29 04:31:36 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0xc686c18)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0xca6c4e8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x10421878)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x1081d418)]: 0 failure(s)
2024-04-29 04:31:36 [INFO] [evolutionary_search.cc:723] Sampled 512 candidate(s)
2024-04-29 04:31:39 [INFO] [evolutionary_search.cc:621] Evolve iter #0 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0xc686c18)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0xca6c4e8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x10421878)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x1081d418)]: 0 failure(s)
2024-04-29 04:31:42 [INFO] [evolutionary_search.cc:621] Evolve iter #1 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0xc686c18)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0xca6c4e8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x10421878)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x1081d418)]: 0 failure(s)
2024-04-29 04:31:45 [INFO] [evolutionary_search.cc:621] Evolve iter #2 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0xc686c18)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0xca6c4e8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x10421878)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x1081d418)]: 0 failure(s)
2024-04-29 04:31:48 [INFO] [evolutionary_search.cc:621] Evolve iter #3 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0xc686c18)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0xca6c4e8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x10421878)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x1081d418)]: 0 failure(s)
2024-04-29 04:31:49 [INFO] [evolutionary_search.cc:649] Scores of the best 64 candidates:
[1 : 16]:	0.9995  0.9989  0.9982  0.9981  0.9970  0.9959  0.9958  0.9956  0.9953  0.9947  0.9947  0.9946  0.9945  0.9938  0.9938  0.9936
[17 : 32]:	0.9917  0.9915  0.9915  0.9909  0.9908  0.9907  0.9896  0.9891  0.9888  0.9887  0.9881  0.9876  0.9873  0.9872  0.9868  0.9868
[33 : 48]:	0.9865  0.9865  0.9857  0.9854  0.9852  0.9852  0.9849  0.9843  0.9833  0.9830  0.9827  0.9822  0.9817  0.9810  0.9808  0.9807
[49 : 64]:	0.9807  0.9802  0.9798  0.9792  0.9790  0.9790  0.9788  0.9783  0.9782  0.9782  0.9778  0.9755  0.9748  0.9739  0.9736  0.9723
2024-04-29 04:31:49 [INFO] [evolutionary_search.cc:727] Got 64 candidate(s) with evolutionary search
2024-04-29 04:31:49 [INFO] [evolutionary_search.cc:730] Sending 64 candidates(s) for measurement
2024-04-29 05:10:46 [INFO] [task_scheduler.cc:131] [Task #75: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_72] Trial #1: GFLOPs: 99.2684. Time: 4088.1452 us. Best GFLOPs: 99.2684
2024-04-29 05:10:46 [INFO] [task_scheduler.cc:131] [Task #75: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_72] Trial #2: GFLOPs: 29.5599. Time: 13728.8381 us. Best GFLOPs: 99.2684
2024-04-29 05:10:46 [INFO] [task_scheduler.cc:131] [Task #75: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_72] Trial #3: GFLOPs: 49.6402. Time: 8175.2981 us. Best GFLOPs: 99.2684
2024-04-29 05:10:46 [INFO] [task_scheduler.cc:131] [Task #75: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_72] Trial #4: GFLOPs: 30.6714. Time: 13231.3326 us. Best GFLOPs: 99.2684
2024-04-29 05:10:46 [INFO] [task_scheduler.cc:131] [Task #75: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_72] Trial #5: GFLOPs: 97.6107. Time: 4157.5706 us. Best GFLOPs: 99.2684
2024-04-29 05:10:46 [INFO] [task_scheduler.cc:131] [Task #75: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_72] Trial #6: GFLOPs: 72.7579. Time: 5577.7258 us. Best GFLOPs: 99.2684
2024-04-29 05:10:46 [INFO] [task_scheduler.cc:131] [Task #75: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_72] Trial #7: GFLOPs: 68.1052. Time: 5958.7736 us. Best GFLOPs: 99.2684
2024-04-29 05:10:46 [INFO] [task_scheduler.cc:131] [Task #75: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_72] Trial #8: GFLOPs: 72.7140. Time: 5581.0886 us. Best GFLOPs: 99.2684
2024-04-29 05:10:46 [INFO] [task_scheduler.cc:131] [Task #75: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_72] Trial #9: GFLOPs: 5.8757. Time: 69068.3947 us. Best GFLOPs: 99.2684
2024-04-29 05:10:46 [INFO] [task_scheduler.cc:131] [Task #75: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_72] Trial #10: GFLOPs: 135.3935. Time: 2997.3623 us. Best GFLOPs: 135.3935
2024-04-29 05:10:46 [INFO] [task_scheduler.cc:131] [Task #75: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_72] Trial #11: GFLOPs: 23.3685. Time: 17366.2262 us. Best GFLOPs: 135.3935
2024-04-29 05:10:46 [INFO] [task_scheduler.cc:131] [Task #75: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_72] Trial #12: GFLOPs: 49.7765. Time: 8152.9195 us. Best GFLOPs: 135.3935
2024-04-29 05:10:46 [INFO] [task_scheduler.cc:131] [Task #75: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_72] Trial #13: GFLOPs: 7.0643. Time: 57447.1290 us. Best GFLOPs: 135.3935
2024-04-29 05:10:46 [INFO] [task_scheduler.cc:121] [Task #75: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_72] Trial #14: Error in building:
LocalBuilder: Timeout, killed after 30.0 seconds
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(84), T.int64(56), T.int64(56), T.int64(4)), "float32"), p1: T.Buffer((T.int64(48), T.int64(84), T.int64(1), T.int64(1), T.int64(4), T.int64(4)), "float32"), p2: T.Buffer((T.int64(1), T.int64(48), T.int64(1), T.int64(1), T.int64(4)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(48), T.int64(56), T.int64(56), T.int64(4)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        conv2d_NCHWc = T.alloc_buffer((T.int64(1), T.int64(48), T.int64(56), T.int64(56), T.int64(4)))
        for n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_fused in T.parallel(T.int64(4), annotations={"pragma_auto_unroll_max_step": 512, "pragma_unroll_explicit": 1}):
            for n_1, oc_chunk_1, oh_1, ow_1, oc_block_1 in T.grid(T.int64(1), T.int64(2), T.int64(1), T.int64(1), T.int64(1)):
                for n_2_init, oc_chunk_2_init, oh_2_init, ow_2_init, oc_block_2_init, n_3_init, oc_chunk_3_init, oh_3_init, ow_3_init, oc_block_3_init in T.grid(T.int64(1), T.int64(3), T.int64(4), T.int64(1), T.int64(4), T.int64(1), T.int64(4), T.int64(7), T.int64(56), T.int64(1)):
                    with T.block("conv2d_NCHWc_init"):
                        v_n = T.axis.spatial(T.int64(1), n_1 + n_2_init + n_3_init)
                        v_oc_chunk = T.axis.spatial(T.int64(48), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_fused // T.int64(2) * T.int64(24) + oc_chunk_1 * T.int64(12) + oc_chunk_2_init * T.int64(4) + oc_chunk_3_init)
                        v_oh = T.axis.spatial(T.int64(56), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_fused % T.int64(2) * T.int64(28) + oh_1 * T.int64(28) + oh_2_init * T.int64(7) + oh_3_init)
                        v_ow = T.axis.spatial(T.int64(56), ow_1 * T.int64(56) + ow_2_init * T.int64(56) + ow_3_init)
                        v_oc_block = T.axis.spatial(T.int64(4), oc_block_1 * T.int64(4) + oc_block_2_init + oc_block_3_init)
                        T.reads()
                        T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                        T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                        conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = T.float32(0)
                for ic_0, kh_0, kw_0, n_2, oc_chunk_2, oh_2, ow_2, oc_block_2, ic_1, kh_1, kw_1, n_3, oc_chunk_3, oh_3, ow_3, oc_block_3 in T.grid(T.int64(42), T.int64(1), T.int64(1), T.int64(1), T.int64(3), T.int64(4), T.int64(1), T.int64(4), T.int64(8), T.int64(1), T.int64(1), T.int64(1), T.int64(4), T.int64(7), T.int64(56), T.int64(1)):
                    with T.block("conv2d_NCHWc_update"):
                        v_n = T.axis.spatial(T.int64(1), n_1 + n_2 + n_3)
                        v_oc_chunk = T.axis.spatial(T.int64(48), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_fused // T.int64(2) * T.int64(24) + oc_chunk_1 * T.int64(12) + oc_chunk_2 * T.int64(4) + oc_chunk_3)
                        v_oh = T.axis.spatial(T.int64(56), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_fused % T.int64(2) * T.int64(28) + oh_1 * T.int64(28) + oh_2 * T.int64(7) + oh_3)
                        v_ow = T.axis.spatial(T.int64(56), ow_1 * T.int64(56) + ow_2 * T.int64(56) + ow_3)
                        v_oc_block = T.axis.spatial(T.int64(4), oc_block_1 * T.int64(4) + oc_block_2 + oc_block_3)
                        v_ic = T.axis.reduce(T.int64(336), ic_0 * T.int64(8) + ic_1)
                        v_kh = T.axis.reduce(T.int64(1), kh_0 + kh_1)
                        v_kw = T.axis.reduce(T.int64(1), kw_0 + kw_1)
                        T.reads(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block], p0[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)], p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block])
                        T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                        T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                        conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] + p0[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)] * p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block]
            for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(24), T.int64(28), T.int64(56)):
                for ax4_fused in T.vectorized(T.int64(4)):
                    with T.block("T_relu"):
                        v_ax0 = T.axis.spatial(T.int64(1), ax0)
                        v_ax1 = T.axis.spatial(T.int64(48), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_fused // T.int64(2) * T.int64(24) + ax1)
                        v_ax2 = T.axis.spatial(T.int64(56), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_fused % T.int64(2) * T.int64(28) + ax2)
                        v_ax3, v_ax4 = T.axis.remap("SS", [ax3, ax4_fused])
                        T.reads(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4])
                        T.writes(T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                        T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.max(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] + p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4], T.float32(0))
b0 = sch.get_block(name="conv2d_NCHWc", func_name="main")
b1 = sch.get_block(name="T_add", func_name="main")
b2 = sch.get_block(name="root", func_name="main")
sch.compute_inline(block=b1)
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.tiling_structure", ann_val="SSRSRS")
l3, l4, l5, l6, l7, l8, l9, l10 = sch.get_loops(block=b0)
v11, v12, v13, v14 = sch.sample_perfect_tile(loop=l3, n=4, max_innermost_factor=64, decision=[1, 1, 1, 1])
l15, l16, l17, l18 = sch.split(loop=l3, factors=[v11, v12, v13, v14], preserve_unit_iters=True)
v19, v20, v21, v22 = sch.sample_perfect_tile(loop=l4, n=4, max_innermost_factor=64, decision=[2, 2, 3, 4])
l23, l24, l25, l26 = sch.split(loop=l4, factors=[v19, v20, v21, v22], preserve_unit_iters=True)
v27, v28, v29, v30 = sch.sample_perfect_tile(loop=l5, n=4, max_innermost_factor=64, decision=[2, 1, 4, 7])
l31, l32, l33, l34 = sch.split(loop=l5, factors=[v27, v28, v29, v30], preserve_unit_iters=True)
v35, v36, v37, v38 = sch.sample_perfect_tile(loop=l6, n=4, max_innermost_factor=64, decision=[1, 1, 1, 56])
l39, l40, l41, l42 = sch.split(loop=l6, factors=[v35, v36, v37, v38], preserve_unit_iters=True)
v43, v44, v45, v46 = sch.sample_perfect_tile(loop=l7, n=4, max_innermost_factor=64, decision=[1, 1, 4, 1])
l47, l48, l49, l50 = sch.split(loop=l7, factors=[v43, v44, v45, v46], preserve_unit_iters=True)
v51, v52 = sch.sample_perfect_tile(loop=l8, n=2, max_innermost_factor=64, decision=[42, 8])
l53, l54 = sch.split(loop=l8, factors=[v51, v52], preserve_unit_iters=True)
v55, v56 = sch.sample_perfect_tile(loop=l9, n=2, max_innermost_factor=64, decision=[1, 1])
l57, l58 = sch.split(loop=l9, factors=[v55, v56], preserve_unit_iters=True)
v59, v60 = sch.sample_perfect_tile(loop=l10, n=2, max_innermost_factor=64, decision=[1, 1])
l61, l62 = sch.split(loop=l10, factors=[v59, v60], preserve_unit_iters=True)
sch.reorder(l15, l23, l31, l39, l47, l16, l24, l32, l40, l48, l53, l57, l61, l17, l25, l33, l41, l49, l54, l58, l62, l18, l26, l34, l42, l50)
b63, = sch.get_consumers(block=b0)
sch.reverse_compute_at(block=b63, loop=l47, preserve_unit_loops=True, index=-1)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.vectorize", ann_val=64)
v64 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.unroll_explicit", ann_val=v64)
sch.enter_postproc()
b65 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b65, ann_key="meta_schedule.parallel")
sch.unannotate(block_or_loop=b65, ann_key="meta_schedule.vectorize")
sch.unannotate(block_or_loop=b65, ann_key="meta_schedule.unroll_explicit")
b66, b67 = sch.get_child_blocks(b65)
l68, l69, l70, l71, l72, l73, l74, l75, l76, l77, l78, l79, l80, l81, l82, l83, l84, l85, l86, l87, l88, l89, l90, l91, l92, l93 = sch.get_loops(block=b66)
l94 = sch.fuse(l68, l69, l70, l71, l72, preserve_unit_iters=True)
sch.parallel(loop=l94)
sch.annotate(block_or_loop=l94, ann_key="pragma_auto_unroll_max_step", ann_val=512)
sch.annotate(block_or_loop=l94, ann_key="pragma_unroll_explicit", ann_val=1)
l95, l96, l97, l98, l99, l100 = sch.get_loops(block=b67)
l101 = sch.fuse(l100, preserve_unit_iters=True)
sch.vectorize(loop=l101)
b102 = sch.get_block(name="conv2d_NCHWc", func_name="main")
l103, l104, l105, l106, l107, l108, l109, l110, l111, l112, l113, l114, l115, l116, l117, l118, l119, l120, l121, l122, l123, l124 = sch.get_loops(block=b102)
b125 = sch.decompose_reduction(block=b102, loop=l109)
2024-04-29 05:10:46 [INFO] [task_scheduler.cc:131] [Task #75: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_72] Trial #15: GFLOPs: 108.6654. Time: 3734.6162 us. Best GFLOPs: 135.3935
2024-04-29 05:10:46 [INFO] [task_scheduler.cc:131] [Task #75: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_72] Trial #16: GFLOPs: 55.5377. Time: 7307.1694 us. Best GFLOPs: 135.3935
2024-04-29 05:10:46 [INFO] [task_scheduler.cc:131] [Task #75: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_72] Trial #17: GFLOPs: 61.3891. Time: 6610.6744 us. Best GFLOPs: 135.3935
2024-04-29 05:10:46 [INFO] [task_scheduler.cc:131] [Task #75: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_72] Trial #18: GFLOPs: 26.4909. Time: 15319.3261 us. Best GFLOPs: 135.3935
2024-04-29 05:10:46 [INFO] [task_scheduler.cc:131] [Task #75: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_72] Trial #19: GFLOPs: 79.6733. Time: 5093.5974 us. Best GFLOPs: 135.3935
2024-04-29 05:10:46 [INFO] [task_scheduler.cc:131] [Task #75: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_72] Trial #20: GFLOPs: 28.3886. Time: 14295.3217 us. Best GFLOPs: 135.3935
2024-04-29 05:10:46 [INFO] [task_scheduler.cc:131] [Task #75: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_72] Trial #21: GFLOPs: 164.1591. Time: 2472.1359 us. Best GFLOPs: 164.1591
2024-04-29 05:10:46 [INFO] [task_scheduler.cc:131] [Task #75: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_72] Trial #22: GFLOPs: 180.8060. Time: 2244.5242 us. Best GFLOPs: 180.8060
2024-04-29 05:10:46 [INFO] [task_scheduler.cc:131] [Task #75: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_72] Trial #23: GFLOPs: 172.5529. Time: 2351.8784 us. Best GFLOPs: 180.8060
2024-04-29 05:10:46 [INFO] [task_scheduler.cc:131] [Task #75: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_72] Trial #24: GFLOPs: 27.9944. Time: 14496.6149 us. Best GFLOPs: 180.8060
2024-04-29 05:10:46 [INFO] [task_scheduler.cc:131] [Task #75: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_72] Trial #25: GFLOPs: 78.2184. Time: 5188.3372 us. Best GFLOPs: 180.8060
2024-04-29 05:10:46 [INFO] [task_scheduler.cc:131] [Task #75: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_72] Trial #26: GFLOPs: 66.5160. Time: 6101.1449 us. Best GFLOPs: 180.8060
2024-04-29 05:10:46 [INFO] [task_scheduler.cc:131] [Task #75: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_72] Trial #27: GFLOPs: 84.9164. Time: 4779.0955 us. Best GFLOPs: 180.8060
2024-04-29 05:10:46 [INFO] [task_scheduler.cc:131] [Task #75: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_72] Trial #28: GFLOPs: 198.3280. Time: 2046.2242 us. Best GFLOPs: 198.3280
2024-04-29 05:10:46 [INFO] [task_scheduler.cc:131] [Task #75: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_72] Trial #29: GFLOPs: 48.4906. Time: 8369.1246 us. Best GFLOPs: 198.3280
2024-04-29 05:10:46 [INFO] [task_scheduler.cc:131] [Task #75: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_72] Trial #30: GFLOPs: 13.8279. Time: 29348.2150 us. Best GFLOPs: 198.3280
2024-04-29 05:10:46 [INFO] [task_scheduler.cc:131] [Task #75: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_72] Trial #31: GFLOPs: 189.3410. Time: 2143.3467 us. Best GFLOPs: 198.3280
2024-04-29 05:10:46 [INFO] [task_scheduler.cc:121] [Task #75: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_72] Trial #32: Error in building:
LocalBuilder: Timeout, killed after 30.0 seconds
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(84), T.int64(56), T.int64(56), T.int64(4)), "float32"), p1: T.Buffer((T.int64(48), T.int64(84), T.int64(1), T.int64(1), T.int64(4), T.int64(4)), "float32"), p2: T.Buffer((T.int64(1), T.int64(48), T.int64(1), T.int64(1), T.int64(4)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(48), T.int64(56), T.int64(56), T.int64(4)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        conv2d_NCHWc = T.alloc_buffer((T.int64(1), T.int64(48), T.int64(56), T.int64(56), T.int64(4)))
        for n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_fused in T.parallel(T.int64(3), annotations={"pragma_auto_unroll_max_step": 512, "pragma_unroll_explicit": 1}):
            for n_1, oc_chunk_1, oh_1, ow_1, oc_block_1 in T.grid(T.int64(1), T.int64(1), T.int64(14), T.int64(2), T.int64(1)):
                for n_2_init, oc_chunk_2_init, oh_2_init, ow_2_init, oc_block_2_init, n_3_init, oc_chunk_3_init, oh_3_init, ow_3_init in T.grid(T.int64(1), T.int64(4), T.int64(2), T.int64(7), T.int64(1), T.int64(1), T.int64(4), T.int64(2), T.int64(4)):
                    for oc_block_3_fused_init in T.vectorized(T.int64(4)):
                        with T.block("conv2d_NCHWc_init"):
                            v_n = T.axis.spatial(T.int64(1), n_1 + n_2_init + n_3_init)
                            v_oc_chunk = T.axis.spatial(T.int64(48), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_fused * T.int64(16) + oc_chunk_1 * T.int64(16) + oc_chunk_2_init * T.int64(4) + oc_chunk_3_init)
                            v_oh = T.axis.spatial(T.int64(56), oh_1 * T.int64(4) + oh_2_init * T.int64(2) + oh_3_init)
                            v_ow = T.axis.spatial(T.int64(56), ow_1 * T.int64(28) + ow_2_init * T.int64(4) + ow_3_init)
                            v_oc_block = T.axis.spatial(T.int64(4), oc_block_1 * T.int64(4) + oc_block_2_init * T.int64(4) + oc_block_3_fused_init)
                            T.reads()
                            T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                            T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                            conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = T.float32(0)
                for ic_0, kh_0, kw_0, n_2, oc_chunk_2, oh_2, ow_2, oc_block_2, ic_1, kh_1, kw_1, n_3, oc_chunk_3, oh_3, ow_3 in T.grid(T.int64(56), T.int64(1), T.int64(1), T.int64(1), T.int64(4), T.int64(2), T.int64(7), T.int64(1), T.int64(6), T.int64(1), T.int64(1), T.int64(1), T.int64(4), T.int64(2), T.int64(4)):
                    for oc_block_3_fused in T.vectorized(T.int64(4)):
                        with T.block("conv2d_NCHWc_update"):
                            v_n = T.axis.spatial(T.int64(1), n_1 + n_2 + n_3)
                            v_oc_chunk = T.axis.spatial(T.int64(48), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_fused * T.int64(16) + oc_chunk_1 * T.int64(16) + oc_chunk_2 * T.int64(4) + oc_chunk_3)
                            v_oh = T.axis.spatial(T.int64(56), oh_1 * T.int64(4) + oh_2 * T.int64(2) + oh_3)
                            v_ow = T.axis.spatial(T.int64(56), ow_1 * T.int64(28) + ow_2 * T.int64(4) + ow_3)
                            v_oc_block = T.axis.spatial(T.int64(4), oc_block_1 * T.int64(4) + oc_block_2 * T.int64(4) + oc_block_3_fused)
                            v_ic = T.axis.reduce(T.int64(336), ic_0 * T.int64(6) + ic_1)
                            v_kh = T.axis.reduce(T.int64(1), kh_0 + kh_1)
                            v_kw = T.axis.reduce(T.int64(1), kw_0 + kw_1)
                            T.reads(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block], p0[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)], p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block])
                            T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                            T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                            conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] + p0[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)] * p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block]
            for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(16), T.int64(56), T.int64(56)):
                for ax4_fused in T.vectorized(T.int64(4)):
                    with T.block("T_relu"):
                        v_ax0 = T.axis.spatial(T.int64(1), ax0)
                        v_ax1 = T.axis.spatial(T.int64(48), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_fused * T.int64(16) + ax1)
                        v_ax2, v_ax3, v_ax4 = T.axis.remap("SSS", [ax2, ax3, ax4_fused])
                        T.reads(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4])
                        T.writes(T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                        T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.max(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] + p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4], T.float32(0))
b0 = sch.get_block(name="conv2d_NCHWc", func_name="main")
b1 = sch.get_block(name="T_add", func_name="main")
b2 = sch.get_block(name="root", func_name="main")
sch.compute_inline(block=b1)
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.tiling_structure", ann_val="SSRSRS")
l3, l4, l5, l6, l7, l8, l9, l10 = sch.get_loops(block=b0)
v11, v12, v13, v14 = sch.sample_perfect_tile(loop=l3, n=4, max_innermost_factor=64, decision=[1, 1, 1, 1])
l15, l16, l17, l18 = sch.split(loop=l3, factors=[v11, v12, v13, v14], preserve_unit_iters=True)
v19, v20, v21, v22 = sch.sample_perfect_tile(loop=l4, n=4, max_innermost_factor=64, decision=[3, 1, 4, 4])
l23, l24, l25, l26 = sch.split(loop=l4, factors=[v19, v20, v21, v22], preserve_unit_iters=True)
v27, v28, v29, v30 = sch.sample_perfect_tile(loop=l5, n=4, max_innermost_factor=64, decision=[1, 14, 2, 2])
l31, l32, l33, l34 = sch.split(loop=l5, factors=[v27, v28, v29, v30], preserve_unit_iters=True)
v35, v36, v37, v38 = sch.sample_perfect_tile(loop=l6, n=4, max_innermost_factor=64, decision=[1, 2, 7, 4])
l39, l40, l41, l42 = sch.split(loop=l6, factors=[v35, v36, v37, v38], preserve_unit_iters=True)
v43, v44, v45, v46 = sch.sample_perfect_tile(loop=l7, n=4, max_innermost_factor=64, decision=[1, 1, 1, 4])
l47, l48, l49, l50 = sch.split(loop=l7, factors=[v43, v44, v45, v46], preserve_unit_iters=True)
v51, v52 = sch.sample_perfect_tile(loop=l8, n=2, max_innermost_factor=64, decision=[56, 6])
l53, l54 = sch.split(loop=l8, factors=[v51, v52], preserve_unit_iters=True)
v55, v56 = sch.sample_perfect_tile(loop=l9, n=2, max_innermost_factor=64, decision=[1, 1])
l57, l58 = sch.split(loop=l9, factors=[v55, v56], preserve_unit_iters=True)
v59, v60 = sch.sample_perfect_tile(loop=l10, n=2, max_innermost_factor=64, decision=[1, 1])
l61, l62 = sch.split(loop=l10, factors=[v59, v60], preserve_unit_iters=True)
sch.reorder(l15, l23, l31, l39, l47, l16, l24, l32, l40, l48, l53, l57, l61, l17, l25, l33, l41, l49, l54, l58, l62, l18, l26, l34, l42, l50)
b63, = sch.get_consumers(block=b0)
sch.reverse_compute_at(block=b63, loop=l47, preserve_unit_loops=True, index=-1)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.vectorize", ann_val=64)
v64 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.unroll_explicit", ann_val=v64)
sch.enter_postproc()
b65 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b65, ann_key="meta_schedule.parallel")
sch.unannotate(block_or_loop=b65, ann_key="meta_schedule.vectorize")
sch.unannotate(block_or_loop=b65, ann_key="meta_schedule.unroll_explicit")
b66, b67 = sch.get_child_blocks(b65)
l68, l69, l70, l71, l72, l73, l74, l75, l76, l77, l78, l79, l80, l81, l82, l83, l84, l85, l86, l87, l88, l89, l90, l91, l92, l93 = sch.get_loops(block=b66)
l94 = sch.fuse(l68, l69, l70, l71, l72, preserve_unit_iters=True)
sch.parallel(loop=l94)
l95 = sch.fuse(l93, preserve_unit_iters=True)
sch.vectorize(loop=l95)
sch.annotate(block_or_loop=l94, ann_key="pragma_auto_unroll_max_step", ann_val=512)
sch.annotate(block_or_loop=l94, ann_key="pragma_unroll_explicit", ann_val=1)
l96, l97, l98, l99, l100, l101 = sch.get_loops(block=b67)
l102 = sch.fuse(l101, preserve_unit_iters=True)
sch.vectorize(loop=l102)
b103 = sch.get_block(name="conv2d_NCHWc", func_name="main")
l104, l105, l106, l107, l108, l109, l110, l111, l112, l113, l114, l115, l116, l117, l118, l119, l120, l121, l122, l123, l124, l125 = sch.get_loops(block=b103)
b126 = sch.decompose_reduction(block=b103, loop=l110)
2024-04-29 05:10:46 [INFO] [task_scheduler.cc:131] [Task #75: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_72] Trial #33: GFLOPs: 8.2960. Time: 48917.9267 us. Best GFLOPs: 198.3280
2024-04-29 05:10:46 [INFO] [task_scheduler.cc:131] [Task #75: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_72] Trial #34: GFLOPs: 102.2108. Time: 3970.4573 us. Best GFLOPs: 198.3280
2024-04-29 05:10:46 [INFO] [task_scheduler.cc:131] [Task #75: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_72] Trial #35: GFLOPs: 91.3629. Time: 4441.8870 us. Best GFLOPs: 198.3280
2024-04-29 05:10:46 [INFO] [task_scheduler.cc:131] [Task #75: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_72] Trial #36: GFLOPs: 52.9479. Time: 7664.5867 us. Best GFLOPs: 198.3280
2024-04-29 05:10:46 [INFO] [task_scheduler.cc:131] [Task #75: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_72] Trial #37: GFLOPs: 30.6009. Time: 13261.8339 us. Best GFLOPs: 198.3280
2024-04-29 05:10:46 [INFO] [task_scheduler.cc:131] [Task #75: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_72] Trial #38: GFLOPs: 80.8327. Time: 5020.5363 us. Best GFLOPs: 198.3280
2024-04-29 05:10:46 [INFO] [task_scheduler.cc:131] [Task #75: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_72] Trial #39: GFLOPs: 37.3309. Time: 10870.9865 us. Best GFLOPs: 198.3280
2024-04-29 05:10:46 [INFO] [task_scheduler.cc:131] [Task #75: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_72] Trial #40: GFLOPs: 11.2011. Time: 36230.5250 us. Best GFLOPs: 198.3280
2024-04-29 05:10:46 [INFO] [task_scheduler.cc:131] [Task #75: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_72] Trial #41: GFLOPs: 121.5969. Time: 3337.4504 us. Best GFLOPs: 198.3280
2024-04-29 05:10:46 [INFO] [task_scheduler.cc:131] [Task #75: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_72] Trial #42: GFLOPs: 60.4218. Time: 6716.5032 us. Best GFLOPs: 198.3280
2024-04-29 05:10:46 [INFO] [task_scheduler.cc:131] [Task #75: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_72] Trial #43: GFLOPs: 12.8539. Time: 31571.9137 us. Best GFLOPs: 198.3280
2024-04-29 05:10:46 [INFO] [task_scheduler.cc:131] [Task #75: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_72] Trial #44: GFLOPs: 75.2363. Time: 5393.9875 us. Best GFLOPs: 198.3280
2024-04-29 05:10:46 [INFO] [task_scheduler.cc:131] [Task #75: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_72] Trial #45: GFLOPs: 131.3807. Time: 3088.9115 us. Best GFLOPs: 198.3280
2024-04-29 05:10:46 [INFO] [task_scheduler.cc:131] [Task #75: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_72] Trial #46: GFLOPs: 72.3322. Time: 5610.5489 us. Best GFLOPs: 198.3280
2024-04-29 05:10:46 [INFO] [task_scheduler.cc:131] [Task #75: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_72] Trial #47: GFLOPs: 92.3825. Time: 4392.8630 us. Best GFLOPs: 198.3280
2024-04-29 05:10:46 [INFO] [task_scheduler.cc:131] [Task #75: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_72] Trial #48: GFLOPs: 15.8276. Time: 25640.1607 us. Best GFLOPs: 198.3280
2024-04-29 05:10:46 [INFO] [task_scheduler.cc:131] [Task #75: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_72] Trial #49: GFLOPs: 31.9747. Time: 12692.0086 us. Best GFLOPs: 198.3280
2024-04-29 05:10:46 [INFO] [task_scheduler.cc:131] [Task #75: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_72] Trial #50: GFLOPs: 92.6157. Time: 4381.8017 us. Best GFLOPs: 198.3280
2024-04-29 05:10:46 [INFO] [task_scheduler.cc:131] [Task #75: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_72] Trial #51: GFLOPs: 5.0843. Time: 79818.6530 us. Best GFLOPs: 198.3280
2024-04-29 05:10:46 [INFO] [task_scheduler.cc:131] [Task #75: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_72] Trial #52: GFLOPs: 82.3934. Time: 4925.4353 us. Best GFLOPs: 198.3280
2024-04-29 05:10:46 [INFO] [task_scheduler.cc:131] [Task #75: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_72] Trial #53: GFLOPs: 9.3062. Time: 43608.0913 us. Best GFLOPs: 198.3280
2024-04-29 05:10:46 [INFO] [task_scheduler.cc:131] [Task #75: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_72] Trial #54: GFLOPs: 100.7799. Time: 4026.8307 us. Best GFLOPs: 198.3280
2024-04-29 05:10:46 [INFO] [task_scheduler.cc:131] [Task #75: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_72] Trial #55: GFLOPs: 111.1633. Time: 3650.6982 us. Best GFLOPs: 198.3280
2024-04-29 05:10:46 [INFO] [task_scheduler.cc:131] [Task #75: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_72] Trial #56: GFLOPs: 21.0581. Time: 19271.5957 us. Best GFLOPs: 198.3280
2024-04-29 05:10:46 [INFO] [task_scheduler.cc:131] [Task #75: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_72] Trial #57: GFLOPs: 22.4261. Time: 18096.0523 us. Best GFLOPs: 198.3280
2024-04-29 05:10:46 [INFO] [task_scheduler.cc:131] [Task #75: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_72] Trial #58: GFLOPs: 15.8052. Time: 25676.5960 us. Best GFLOPs: 198.3280
2024-04-29 05:10:46 [INFO] [task_scheduler.cc:131] [Task #75: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_72] Trial #59: GFLOPs: 193.8250. Time: 2093.7628 us. Best GFLOPs: 198.3280
2024-04-29 05:10:46 [INFO] [task_scheduler.cc:131] [Task #75: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_72] Trial #60: GFLOPs: 55.7796. Time: 7275.4819 us. Best GFLOPs: 198.3280
2024-04-29 05:10:46 [INFO] [task_scheduler.cc:131] [Task #75: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_72] Trial #61: GFLOPs: 73.3141. Time: 5535.4071 us. Best GFLOPs: 198.3280
2024-04-29 05:10:46 [INFO] [task_scheduler.cc:131] [Task #75: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_72] Trial #62: GFLOPs: 82.9701. Time: 4891.1993 us. Best GFLOPs: 198.3280
2024-04-29 05:10:46 [INFO] [task_scheduler.cc:131] [Task #75: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_72] Trial #63: GFLOPs: 83.4184. Time: 4864.9162 us. Best GFLOPs: 198.3280
2024-04-29 05:10:46 [INFO] [task_scheduler.cc:131] [Task #75: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_72] Trial #64: GFLOPs: 141.1558. Time: 2875.0031 us. Best GFLOPs: 198.3280
2024-04-29 05:43:31 [INFO] [evolutionary_search.cc:713] Generating candidates......
2024-04-29 05:43:32 [INFO] [evolutionary_search.cc:715] Picked top 62 candidate(s) from database
2024-04-29 05:43:34 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0xc686c18)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0xca6c4e8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x10421878)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x1081d418)]: 0 failure(s)
2024-04-29 05:43:34 [INFO] [evolutionary_search.cc:723] Sampled 450 candidate(s)
2024-04-29 05:43:39 [INFO] [evolutionary_search.cc:621] Evolve iter #0 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0xc686c18)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0xca6c4e8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x10421878)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x1081d418)]: 0 failure(s)
2024-04-29 05:43:45 [INFO] [evolutionary_search.cc:621] Evolve iter #1 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0xc686c18)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0xca6c4e8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x10421878)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x1081d418)]: 0 failure(s)
2024-04-29 05:43:51 [INFO] [evolutionary_search.cc:621] Evolve iter #2 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0xc686c18)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0xca6c4e8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x10421878)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x1081d418)]: 0 failure(s)
2024-04-29 05:43:56 [INFO] [evolutionary_search.cc:621] Evolve iter #3 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0xc686c18)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0xca6c4e8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x10421878)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x1081d418)]: 0 failure(s)
2024-04-29 05:43:59 [INFO] [evolutionary_search.cc:649] Scores of the best 64 candidates:
[1 : 16]:	0.9418  0.9110  0.9098  0.9098  0.8948  0.8937  0.8927  0.8875  0.8750  0.8740  0.8705  0.8659  0.8629  0.8582  0.8569  0.8556
[17 : 32]:	0.8399  0.8369  0.8324  0.8290  0.8267  0.8266  0.8197  0.8184  0.8180  0.8094  0.8093  0.8085  0.8052  0.8052  0.8052  0.7968
[33 : 48]:	0.7966  0.7880  0.7880  0.7859  0.7854  0.7848  0.7789  0.7779  0.7770  0.7737  0.7727  0.7709  0.7708  0.7708  0.7698  0.7654
[49 : 64]:	0.7653  0.7651  0.7635  0.7635  0.7620  0.7620  0.7585  0.7585  0.7585  0.7574  0.7562  0.7541  0.7538  0.7525  0.7510  0.7488
2024-04-29 05:44:00 [INFO] [evolutionary_search.cc:727] Got 64 candidate(s) with evolutionary search
2024-04-29 05:44:00 [INFO] [evolutionary_search.cc:730] Sending 64 candidates(s) for measurement
2024-04-29 05:45:36 [INFO] [task_scheduler.cc:121] [Task #75: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_72] Trial #65: Error in building:
LocalBuilder: Timeout, killed after 30.0 seconds
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(84), T.int64(56), T.int64(56), T.int64(4)), "float32"), p1: T.Buffer((T.int64(48), T.int64(84), T.int64(1), T.int64(1), T.int64(4), T.int64(4)), "float32"), p2: T.Buffer((T.int64(1), T.int64(48), T.int64(1), T.int64(1), T.int64(4)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(48), T.int64(56), T.int64(56), T.int64(4)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        conv2d_NCHWc = T.alloc_buffer((T.int64(1), T.int64(48), T.int64(56), T.int64(56), T.int64(4)))
        for n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused in T.parallel(T.int64(224), annotations={"pragma_auto_unroll_max_step": 512, "pragma_unroll_explicit": 1}):
            for n_2_init, oc_chunk_2_init, oh_2_init, ow_2_init, oc_block_2_init, n_3_init, oc_chunk_3_init, oh_3_init, ow_3_init in T.grid(T.int64(1), T.int64(1), T.int64(2), T.int64(1), T.int64(1), T.int64(1), T.int64(24), T.int64(1), T.int64(14)):
                for oc_block_3_fused_init in T.vectorized(T.int64(4)):
                    with T.block("conv2d_NCHWc_init"):
                        v_n = T.axis.spatial(T.int64(1), n_2_init + n_3_init)
                        v_oc_chunk = T.axis.spatial(T.int64(48), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused % T.int64(16) // T.int64(8) * T.int64(24) + oc_chunk_2_init * T.int64(24) + oc_chunk_3_init)
                        v_oh = T.axis.spatial(T.int64(56), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused // T.int64(16) * T.int64(4) + n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused % T.int64(8) // T.int64(4) * T.int64(2) + oh_2_init + oh_3_init)
                        v_ow = T.axis.spatial(T.int64(56), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused % T.int64(4) * T.int64(14) + ow_2_init * T.int64(14) + ow_3_init)
                        v_oc_block = T.axis.spatial(T.int64(4), oc_block_2_init * T.int64(4) + oc_block_3_fused_init)
                        T.reads()
                        T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                        T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                        conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = T.float32(0)
            for ic_0, kh_0, kw_0, n_2, oc_chunk_2, oh_2, ow_2, oc_block_2, ic_1, kh_1, kw_1, n_3, oc_chunk_3, oh_3, ow_3 in T.grid(T.int64(8), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(1), T.int64(1), T.int64(42), T.int64(1), T.int64(1), T.int64(1), T.int64(24), T.int64(1), T.int64(14)):
                for oc_block_3_fused in T.vectorized(T.int64(4)):
                    with T.block("conv2d_NCHWc_update"):
                        v_n = T.axis.spatial(T.int64(1), n_2 + n_3)
                        v_oc_chunk = T.axis.spatial(T.int64(48), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused % T.int64(16) // T.int64(8) * T.int64(24) + oc_chunk_2 * T.int64(24) + oc_chunk_3)
                        v_oh = T.axis.spatial(T.int64(56), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused // T.int64(16) * T.int64(4) + n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused % T.int64(8) // T.int64(4) * T.int64(2) + oh_2 + oh_3)
                        v_ow = T.axis.spatial(T.int64(56), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused % T.int64(4) * T.int64(14) + ow_2 * T.int64(14) + ow_3)
                        v_oc_block = T.axis.spatial(T.int64(4), oc_block_2 * T.int64(4) + oc_block_3_fused)
                        v_ic = T.axis.reduce(T.int64(336), ic_0 * T.int64(42) + ic_1)
                        v_kh = T.axis.reduce(T.int64(1), kh_0 + kh_1)
                        v_kw = T.axis.reduce(T.int64(1), kw_0 + kw_1)
                        T.reads(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block], p0[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)], p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block])
                        T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                        T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                        conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] + p0[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)] * p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block]
            for ax0, ax1, ax2 in T.grid(T.int64(1), T.int64(24), T.int64(2)):
                for ax3_ax4_fused in T.vectorized(T.int64(56)):
                    with T.block("T_relu"):
                        v_ax0 = T.axis.spatial(T.int64(1), ax0)
                        v_ax1 = T.axis.spatial(T.int64(48), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused % T.int64(16) // T.int64(8) * T.int64(24) + ax1)
                        v_ax2 = T.axis.spatial(T.int64(56), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused // T.int64(16) * T.int64(4) + n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused % T.int64(8) // T.int64(4) * T.int64(2) + ax2)
                        v_ax3 = T.axis.spatial(T.int64(56), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused % T.int64(4) * T.int64(14) + ax3_ax4_fused // T.int64(4))
                        v_ax4 = T.axis.spatial(T.int64(4), ax3_ax4_fused % T.int64(4))
                        T.reads(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4])
                        T.writes(T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                        T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.max(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] + p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4], T.float32(0))
b0 = sch.get_block(name="conv2d_NCHWc", func_name="main")
b1 = sch.get_block(name="T_add", func_name="main")
b2 = sch.get_block(name="root", func_name="main")
sch.compute_inline(block=b1)
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.tiling_structure", ann_val="SSRSRS")
l3, l4, l5, l6, l7, l8, l9, l10 = sch.get_loops(block=b0)
v11, v12, v13, v14 = sch.sample_perfect_tile(loop=l3, n=4, max_innermost_factor=64, decision=[1, 1, 1, 1])
l15, l16, l17, l18 = sch.split(loop=l3, factors=[v11, v12, v13, v14], preserve_unit_iters=True)
v19, v20, v21, v22 = sch.sample_perfect_tile(loop=l4, n=4, max_innermost_factor=64, decision=[1, 2, 1, 24])
l23, l24, l25, l26 = sch.split(loop=l4, factors=[v19, v20, v21, v22], preserve_unit_iters=True)
v27, v28, v29, v30 = sch.sample_perfect_tile(loop=l5, n=4, max_innermost_factor=64, decision=[14, 2, 2, 1])
l31, l32, l33, l34 = sch.split(loop=l5, factors=[v27, v28, v29, v30], preserve_unit_iters=True)
v35, v36, v37, v38 = sch.sample_perfect_tile(loop=l6, n=4, max_innermost_factor=64, decision=[1, 4, 1, 14])
l39, l40, l41, l42 = sch.split(loop=l6, factors=[v35, v36, v37, v38], preserve_unit_iters=True)
v43, v44, v45, v46 = sch.sample_perfect_tile(loop=l7, n=4, max_innermost_factor=64, decision=[1, 1, 1, 4])
l47, l48, l49, l50 = sch.split(loop=l7, factors=[v43, v44, v45, v46], preserve_unit_iters=True)
v51, v52 = sch.sample_perfect_tile(loop=l8, n=2, max_innermost_factor=64, decision=[8, 42])
l53, l54 = sch.split(loop=l8, factors=[v51, v52], preserve_unit_iters=True)
v55, v56 = sch.sample_perfect_tile(loop=l9, n=2, max_innermost_factor=64, decision=[1, 1])
l57, l58 = sch.split(loop=l9, factors=[v55, v56], preserve_unit_iters=True)
v59, v60 = sch.sample_perfect_tile(loop=l10, n=2, max_innermost_factor=64, decision=[1, 1])
l61, l62 = sch.split(loop=l10, factors=[v59, v60], preserve_unit_iters=True)
sch.reorder(l15, l23, l31, l39, l47, l16, l24, l32, l40, l48, l53, l57, l61, l17, l25, l33, l41, l49, l54, l58, l62, l18, l26, l34, l42, l50)
b63, = sch.get_consumers(block=b0)
sch.reverse_compute_at(block=b63, loop=l48, preserve_unit_loops=True, index=-1)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.vectorize", ann_val=64)
v64 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.unroll_explicit", ann_val=v64)
sch.enter_postproc()
b65 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b65, ann_key="meta_schedule.parallel")
sch.unannotate(block_or_loop=b65, ann_key="meta_schedule.vectorize")
sch.unannotate(block_or_loop=b65, ann_key="meta_schedule.unroll_explicit")
b66, b67 = sch.get_child_blocks(b65)
l68, l69, l70, l71, l72, l73, l74, l75, l76, l77, l78, l79, l80, l81, l82, l83, l84, l85, l86, l87, l88, l89, l90, l91, l92, l93 = sch.get_loops(block=b66)
l94 = sch.fuse(l68, l69, l70, l71, l72, l73, l74, l75, l76, l77, preserve_unit_iters=True)
sch.parallel(loop=l94)
l95 = sch.fuse(l93, preserve_unit_iters=True)
sch.vectorize(loop=l95)
sch.annotate(block_or_loop=l94, ann_key="pragma_auto_unroll_max_step", ann_val=512)
sch.annotate(block_or_loop=l94, ann_key="pragma_unroll_explicit", ann_val=1)
l96, l97, l98, l99, l100, l101 = sch.get_loops(block=b67)
l102 = sch.fuse(l100, l101, preserve_unit_iters=True)
sch.vectorize(loop=l102)
b103 = sch.get_block(name="conv2d_NCHWc", func_name="main")
l104, l105, l106, l107, l108, l109, l110, l111, l112, l113, l114, l115, l116, l117, l118, l119, l120 = sch.get_loops(block=b103)
b121 = sch.decompose_reduction(block=b103, loop=l105)
2024-04-29 05:45:36 [INFO] [task_scheduler.cc:131] [Task #75: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_72] Trial #66: GFLOPs: 226.2297. Time: 1793.8562 us. Best GFLOPs: 226.2297
2024-04-29 05:45:36 [INFO] [task_scheduler.cc:131] [Task #75: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_72] Trial #67: GFLOPs: 242.4798. Time: 1673.6383 us. Best GFLOPs: 242.4798
2024-04-29 05:45:36 [INFO] [task_scheduler.cc:131] [Task #75: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_72] Trial #68: GFLOPs: 158.5760. Time: 2559.1738 us. Best GFLOPs: 242.4798
2024-04-29 05:45:36 [INFO] [task_scheduler.cc:131] [Task #75: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_72] Trial #69: GFLOPs: 173.9773. Time: 2332.6229 us. Best GFLOPs: 242.4798
2024-04-29 05:45:36 [INFO] [task_scheduler.cc:131] [Task #75: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_72] Trial #70: GFLOPs: 233.0319. Time: 1741.4933 us. Best GFLOPs: 242.4798
2024-04-29 05:45:36 [INFO] [task_scheduler.cc:131] [Task #75: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_72] Trial #71: GFLOPs: 202.2689. Time: 2006.3559 us. Best GFLOPs: 242.4798
2024-04-29 05:45:36 [INFO] [task_scheduler.cc:131] [Task #75: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_72] Trial #72: GFLOPs: 234.0481. Time: 1733.9318 us. Best GFLOPs: 242.4798
2024-04-29 05:45:36 [INFO] [task_scheduler.cc:131] [Task #75: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_72] Trial #73: GFLOPs: 173.8251. Time: 2334.6650 us. Best GFLOPs: 242.4798
2024-04-29 05:45:36 [INFO] [task_scheduler.cc:131] [Task #75: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_72] Trial #74: GFLOPs: 177.1758. Time: 2290.5134 us. Best GFLOPs: 242.4798
2024-04-29 05:45:36 [INFO] [task_scheduler.cc:131] [Task #75: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_72] Trial #75: GFLOPs: 119.0437. Time: 3409.0297 us. Best GFLOPs: 242.4798
2024-04-29 05:45:36 [INFO] [task_scheduler.cc:131] [Task #75: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_72] Trial #76: GFLOPs: 230.0414. Time: 1764.1320 us. Best GFLOPs: 242.4798
2024-04-29 05:45:36 [INFO] [task_scheduler.cc:131] [Task #75: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_72] Trial #77: GFLOPs: 152.7181. Time: 2657.3366 us. Best GFLOPs: 242.4798
2024-04-29 05:45:36 [INFO] [task_scheduler.cc:131] [Task #75: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_72] Trial #78: GFLOPs: 174.3815. Time: 2327.2168 us. Best GFLOPs: 242.4798
2024-04-29 05:45:36 [INFO] [task_scheduler.cc:131] [Task #75: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_72] Trial #79: GFLOPs: 185.8398. Time: 2183.7279 us. Best GFLOPs: 242.4798
2024-04-29 05:45:36 [INFO] [task_scheduler.cc:131] [Task #75: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_72] Trial #80: GFLOPs: 240.5712. Time: 1686.9164 us. Best GFLOPs: 242.4798
2024-04-29 05:45:36 [INFO] [task_scheduler.cc:131] [Task #75: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_72] Trial #81: GFLOPs: 150.9315. Time: 2688.7929 us. Best GFLOPs: 242.4798
2024-04-29 05:45:36 [INFO] [task_scheduler.cc:131] [Task #75: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_72] Trial #82: GFLOPs: 162.9296. Time: 2490.7902 us. Best GFLOPs: 242.4798
2024-04-29 05:45:36 [INFO] [task_scheduler.cc:131] [Task #75: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_72] Trial #83: GFLOPs: 166.3017. Time: 2440.2840 us. Best GFLOPs: 242.4798
2024-04-29 05:45:36 [INFO] [task_scheduler.cc:131] [Task #75: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_72] Trial #84: GFLOPs: 169.5634. Time: 2393.3440 us. Best GFLOPs: 242.4798
2024-04-29 05:45:36 [INFO] [task_scheduler.cc:131] [Task #75: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_72] Trial #85: GFLOPs: 199.1850. Time: 2037.4201 us. Best GFLOPs: 242.4798
2024-04-29 05:45:36 [INFO] [task_scheduler.cc:131] [Task #75: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_72] Trial #86: GFLOPs: 304.8210. Time: 1331.3502 us. Best GFLOPs: 304.8210
2024-04-29 05:45:36 [INFO] [task_scheduler.cc:131] [Task #75: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_72] Trial #87: GFLOPs: 151.4224. Time: 2680.0752 us. Best GFLOPs: 304.8210
2024-04-29 05:45:36 [INFO] [task_scheduler.cc:131] [Task #75: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_72] Trial #88: GFLOPs: 229.9906. Time: 1764.5220 us. Best GFLOPs: 304.8210
2024-04-29 05:45:36 [INFO] [task_scheduler.cc:131] [Task #75: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_72] Trial #89: GFLOPs: 145.7714. Time: 2783.9726 us. Best GFLOPs: 304.8210
2024-04-29 05:45:36 [INFO] [task_scheduler.cc:131] [Task #75: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_72] Trial #90: GFLOPs: 150.0476. Time: 2704.6325 us. Best GFLOPs: 304.8210
2024-04-29 05:45:36 [INFO] [task_scheduler.cc:131] [Task #75: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_72] Trial #91: GFLOPs: 187.5981. Time: 2163.2601 us. Best GFLOPs: 304.8210
2024-04-29 05:45:36 [INFO] [task_scheduler.cc:131] [Task #75: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_72] Trial #92: GFLOPs: 141.0121. Time: 2877.9339 us. Best GFLOPs: 304.8210
2024-04-29 05:45:36 [INFO] [task_scheduler.cc:131] [Task #75: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_72] Trial #93: GFLOPs: 177.1492. Time: 2290.8568 us. Best GFLOPs: 304.8210
2024-04-29 05:45:36 [INFO] [task_scheduler.cc:131] [Task #75: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_72] Trial #94: GFLOPs: 187.9117. Time: 2159.6503 us. Best GFLOPs: 304.8210
2024-04-29 05:45:36 [INFO] [task_scheduler.cc:131] [Task #75: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_72] Trial #95: GFLOPs: 178.1272. Time: 2278.2787 us. Best GFLOPs: 304.8210
2024-04-29 05:45:36 [INFO] [task_scheduler.cc:131] [Task #75: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_72] Trial #96: GFLOPs: 208.2005. Time: 1949.1960 us. Best GFLOPs: 304.8210
2024-04-29 05:45:36 [INFO] [task_scheduler.cc:131] [Task #75: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_72] Trial #97: GFLOPs: 193.5452. Time: 2096.7891 us. Best GFLOPs: 304.8210
2024-04-29 05:45:36 [INFO] [task_scheduler.cc:131] [Task #75: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_72] Trial #98: GFLOPs: 179.4986. Time: 2260.8724 us. Best GFLOPs: 304.8210
2024-04-29 05:45:36 [INFO] [task_scheduler.cc:131] [Task #75: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_72] Trial #99: GFLOPs: 180.6602. Time: 2246.3356 us. Best GFLOPs: 304.8210
2024-04-29 05:45:36 [INFO] [task_scheduler.cc:131] [Task #75: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_72] Trial #100: GFLOPs: 188.8624. Time: 2148.7791 us. Best GFLOPs: 304.8210
2024-04-29 05:45:36 [INFO] [task_scheduler.cc:131] [Task #75: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_72] Trial #101: GFLOPs: 301.5979. Time: 1345.5779 us. Best GFLOPs: 304.8210
2024-04-29 05:45:36 [INFO] [task_scheduler.cc:131] [Task #75: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_72] Trial #102: GFLOPs: 231.4255. Time: 1753.5815 us. Best GFLOPs: 304.8210
2024-04-29 05:45:36 [INFO] [task_scheduler.cc:131] [Task #75: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_72] Trial #103: GFLOPs: 143.2557. Time: 2832.8611 us. Best GFLOPs: 304.8210
2024-04-29 05:45:36 [INFO] [task_scheduler.cc:131] [Task #75: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_72] Trial #104: GFLOPs: 367.1408. Time: 1105.3619 us. Best GFLOPs: 367.1408
2024-04-29 05:45:36 [INFO] [task_scheduler.cc:131] [Task #75: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_72] Trial #105: GFLOPs: 303.3328. Time: 1337.8818 us. Best GFLOPs: 367.1408
2024-04-29 05:45:36 [INFO] [task_scheduler.cc:131] [Task #75: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_72] Trial #106: GFLOPs: 141.8263. Time: 2861.4129 us. Best GFLOPs: 367.1408
2024-04-29 05:45:36 [INFO] [task_scheduler.cc:131] [Task #75: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_72] Trial #107: GFLOPs: 180.1069. Time: 2253.2370 us. Best GFLOPs: 367.1408
2024-04-29 05:45:36 [INFO] [task_scheduler.cc:131] [Task #75: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_72] Trial #108: GFLOPs: 120.2980. Time: 3373.4837 us. Best GFLOPs: 367.1408
2024-04-29 05:45:36 [INFO] [task_scheduler.cc:131] [Task #75: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_72] Trial #109: GFLOPs: 201.2764. Time: 2016.2498 us. Best GFLOPs: 367.1408
2024-04-29 05:45:36 [INFO] [task_scheduler.cc:131] [Task #75: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_72] Trial #110: GFLOPs: 167.7216. Time: 2419.6256 us. Best GFLOPs: 367.1408
2024-04-29 05:45:36 [INFO] [task_scheduler.cc:131] [Task #75: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_72] Trial #111: GFLOPs: 165.8507. Time: 2446.9203 us. Best GFLOPs: 367.1408
2024-04-29 05:45:36 [INFO] [task_scheduler.cc:131] [Task #75: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_72] Trial #112: GFLOPs: 178.5135. Time: 2273.3494 us. Best GFLOPs: 367.1408
2024-04-29 05:45:36 [INFO] [task_scheduler.cc:121] [Task #75: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_72] Trial #113: Error in building:
LocalBuilder: Timeout, killed after 30.0 seconds
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(84), T.int64(56), T.int64(56), T.int64(4)), "float32"), p1: T.Buffer((T.int64(48), T.int64(84), T.int64(1), T.int64(1), T.int64(4), T.int64(4)), "float32"), p2: T.Buffer((T.int64(1), T.int64(48), T.int64(1), T.int64(1), T.int64(4)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(48), T.int64(56), T.int64(56), T.int64(4)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        conv2d_NCHWc = T.alloc_buffer((T.int64(1), T.int64(48), T.int64(56), T.int64(56), T.int64(4)))
        for n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused in T.parallel(T.int64(336), annotations={"pragma_auto_unroll_max_step": 512, "pragma_unroll_explicit": 1}):
            for n_2_init, oc_chunk_2_init, oh_2_init, ow_2_init, oc_block_2_init, n_3_init, oc_chunk_3_init, oh_3_init, ow_3_init in T.grid(T.int64(1), T.int64(2), T.int64(4), T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(14), T.int64(2)):
                for oc_block_3_fused_init in T.vectorized(T.int64(4)):
                    with T.block("conv2d_NCHWc_init"):
                        v_n = T.axis.spatial(T.int64(1), n_2_init + n_3_init)
                        v_oc_chunk = T.axis.spatial(T.int64(48), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused // T.int64(28) * T.int64(4) + oc_chunk_2_init * T.int64(2) + oc_chunk_3_init)
                        v_oh = T.axis.spatial(T.int64(56), oh_2_init * T.int64(14) + oh_3_init)
                        v_ow = T.axis.spatial(T.int64(56), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused % T.int64(28) * T.int64(2) + ow_2_init * T.int64(2) + ow_3_init)
                        v_oc_block = T.axis.spatial(T.int64(4), oc_block_2_init * T.int64(4) + oc_block_3_fused_init)
                        T.reads()
                        T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                        T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                        conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = T.float32(0)
            for ic_0, kh_0, kw_0, n_2, oc_chunk_2, oh_2, ow_2, oc_block_2, ic_1, kh_1, kw_1, n_3, oc_chunk_3, oh_3, ow_3 in T.grid(T.int64(48), T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(4), T.int64(1), T.int64(1), T.int64(7), T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(14), T.int64(2)):
                for oc_block_3_fused in T.vectorized(T.int64(4)):
                    with T.block("conv2d_NCHWc_update"):
                        v_n = T.axis.spatial(T.int64(1), n_2 + n_3)
                        v_oc_chunk = T.axis.spatial(T.int64(48), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused // T.int64(28) * T.int64(4) + oc_chunk_2 * T.int64(2) + oc_chunk_3)
                        v_oh = T.axis.spatial(T.int64(56), oh_2 * T.int64(14) + oh_3)
                        v_ow = T.axis.spatial(T.int64(56), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused % T.int64(28) * T.int64(2) + ow_2 * T.int64(2) + ow_3)
                        v_oc_block = T.axis.spatial(T.int64(4), oc_block_2 * T.int64(4) + oc_block_3_fused)
                        v_ic = T.axis.reduce(T.int64(336), ic_0 * T.int64(7) + ic_1)
                        v_kh = T.axis.reduce(T.int64(1), kh_0 + kh_1)
                        v_kw = T.axis.reduce(T.int64(1), kw_0 + kw_1)
                        T.reads(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block], p0[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)], p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block])
                        T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                        T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                        conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] + p0[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)] * p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block]
            for ax0, ax1, ax2 in T.grid(T.int64(1), T.int64(4), T.int64(56)):
                for ax3_ax4_fused in T.vectorized(T.int64(8)):
                    with T.block("T_relu"):
                        v_ax0 = T.axis.spatial(T.int64(1), ax0)
                        v_ax1 = T.axis.spatial(T.int64(48), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused // T.int64(28) * T.int64(4) + ax1)
                        v_ax2 = T.axis.spatial(T.int64(56), ax2)
                        v_ax3 = T.axis.spatial(T.int64(56), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused % T.int64(28) * T.int64(2) + ax3_ax4_fused // T.int64(4))
                        v_ax4 = T.axis.spatial(T.int64(4), ax3_ax4_fused % T.int64(4))
                        T.reads(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4])
                        T.writes(T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                        T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.max(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] + p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4], T.float32(0))
b0 = sch.get_block(name="conv2d_NCHWc", func_name="main")
b1 = sch.get_block(name="T_add", func_name="main")
b2 = sch.get_block(name="root", func_name="main")
sch.compute_inline(block=b1)
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.tiling_structure", ann_val="SSRSRS")
l3, l4, l5, l6, l7, l8, l9, l10 = sch.get_loops(block=b0)
v11, v12, v13, v14 = sch.sample_perfect_tile(loop=l3, n=4, max_innermost_factor=64, decision=[1, 1, 1, 1])
l15, l16, l17, l18 = sch.split(loop=l3, factors=[v11, v12, v13, v14], preserve_unit_iters=True)
v19, v20, v21, v22 = sch.sample_perfect_tile(loop=l4, n=4, max_innermost_factor=64, decision=[12, 1, 2, 2])
l23, l24, l25, l26 = sch.split(loop=l4, factors=[v19, v20, v21, v22], preserve_unit_iters=True)
v27, v28, v29, v30 = sch.sample_perfect_tile(loop=l5, n=4, max_innermost_factor=64, decision=[1, 1, 4, 14])
l31, l32, l33, l34 = sch.split(loop=l5, factors=[v27, v28, v29, v30], preserve_unit_iters=True)
v35, v36, v37, v38 = sch.sample_perfect_tile(loop=l6, n=4, max_innermost_factor=64, decision=[1, 28, 1, 2])
l39, l40, l41, l42 = sch.split(loop=l6, factors=[v35, v36, v37, v38], preserve_unit_iters=True)
v43, v44, v45, v46 = sch.sample_perfect_tile(loop=l7, n=4, max_innermost_factor=64, decision=[1, 1, 1, 4])
l47, l48, l49, l50 = sch.split(loop=l7, factors=[v43, v44, v45, v46], preserve_unit_iters=True)
v51, v52 = sch.sample_perfect_tile(loop=l8, n=2, max_innermost_factor=64, decision=[48, 7])
l53, l54 = sch.split(loop=l8, factors=[v51, v52], preserve_unit_iters=True)
v55, v56 = sch.sample_perfect_tile(loop=l9, n=2, max_innermost_factor=64, decision=[1, 1])
l57, l58 = sch.split(loop=l9, factors=[v55, v56], preserve_unit_iters=True)
v59, v60 = sch.sample_perfect_tile(loop=l10, n=2, max_innermost_factor=64, decision=[1, 1])
l61, l62 = sch.split(loop=l10, factors=[v59, v60], preserve_unit_iters=True)
sch.reorder(l15, l23, l31, l39, l47, l16, l24, l32, l40, l48, l53, l57, l61, l17, l25, l33, l41, l49, l54, l58, l62, l18, l26, l34, l42, l50)
b63, = sch.get_consumers(block=b0)
sch.reverse_compute_at(block=b63, loop=l48, preserve_unit_loops=True, index=-1)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.vectorize", ann_val=64)
v64 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.unroll_explicit", ann_val=v64)
sch.enter_postproc()
b65 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b65, ann_key="meta_schedule.parallel")
sch.unannotate(block_or_loop=b65, ann_key="meta_schedule.vectorize")
sch.unannotate(block_or_loop=b65, ann_key="meta_schedule.unroll_explicit")
b66, b67 = sch.get_child_blocks(b65)
l68, l69, l70, l71, l72, l73, l74, l75, l76, l77, l78, l79, l80, l81, l82, l83, l84, l85, l86, l87, l88, l89, l90, l91, l92, l93 = sch.get_loops(block=b66)
l94 = sch.fuse(l68, l69, l70, l71, l72, l73, l74, l75, l76, l77, preserve_unit_iters=True)
sch.parallel(loop=l94)
l95 = sch.fuse(l93, preserve_unit_iters=True)
sch.vectorize(loop=l95)
sch.annotate(block_or_loop=l94, ann_key="pragma_auto_unroll_max_step", ann_val=512)
sch.annotate(block_or_loop=l94, ann_key="pragma_unroll_explicit", ann_val=1)
l96, l97, l98, l99, l100, l101 = sch.get_loops(block=b67)
l102 = sch.fuse(l100, l101, preserve_unit_iters=True)
sch.vectorize(loop=l102)
b103 = sch.get_block(name="conv2d_NCHWc", func_name="main")
l104, l105, l106, l107, l108, l109, l110, l111, l112, l113, l114, l115, l116, l117, l118, l119, l120 = sch.get_loops(block=b103)
b121 = sch.decompose_reduction(block=b103, loop=l105)
2024-04-29 05:45:36 [INFO] [task_scheduler.cc:131] [Task #75: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_72] Trial #114: GFLOPs: 176.9599. Time: 2293.3079 us. Best GFLOPs: 367.1408
2024-04-29 05:45:36 [INFO] [task_scheduler.cc:131] [Task #75: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_72] Trial #115: GFLOPs: 300.3178. Time: 1351.3135 us. Best GFLOPs: 367.1408
2024-04-29 05:45:36 [INFO] [task_scheduler.cc:131] [Task #75: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_72] Trial #116: GFLOPs: 302.9016. Time: 1339.7865 us. Best GFLOPs: 367.1408
2024-04-29 05:45:36 [INFO] [task_scheduler.cc:131] [Task #75: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_72] Trial #117: GFLOPs: 49.9181. Time: 8129.7802 us. Best GFLOPs: 367.1408
2024-04-29 05:45:36 [INFO] [task_scheduler.cc:131] [Task #75: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_72] Trial #118: GFLOPs: 198.6520. Time: 2042.8870 us. Best GFLOPs: 367.1408
2024-04-29 05:45:36 [INFO] [task_scheduler.cc:131] [Task #75: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_72] Trial #119: GFLOPs: 162.2723. Time: 2500.8798 us. Best GFLOPs: 367.1408
2024-04-29 05:45:36 [INFO] [task_scheduler.cc:131] [Task #75: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_72] Trial #120: GFLOPs: 272.0510. Time: 1491.7184 us. Best GFLOPs: 367.1408
2024-04-29 05:45:36 [INFO] [task_scheduler.cc:131] [Task #75: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_72] Trial #121: GFLOPs: 267.1295. Time: 1519.2014 us. Best GFLOPs: 367.1408
2024-04-29 05:45:36 [INFO] [task_scheduler.cc:131] [Task #75: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_72] Trial #122: GFLOPs: 128.8441. Time: 3149.7256 us. Best GFLOPs: 367.1408
2024-04-29 05:45:36 [INFO] [task_scheduler.cc:131] [Task #75: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_72] Trial #123: GFLOPs: 107.1135. Time: 3788.7256 us. Best GFLOPs: 367.1408
2024-04-29 05:45:36 [INFO] [task_scheduler.cc:121] [Task #75: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_72] Trial #124: Error in building:
LocalBuilder: Timeout, killed after 30.0 seconds
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(84), T.int64(56), T.int64(56), T.int64(4)), "float32"), p1: T.Buffer((T.int64(48), T.int64(84), T.int64(1), T.int64(1), T.int64(4), T.int64(4)), "float32"), p2: T.Buffer((T.int64(1), T.int64(48), T.int64(1), T.int64(1), T.int64(4)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(48), T.int64(56), T.int64(56), T.int64(4)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        conv2d_NCHWc = T.alloc_buffer((T.int64(1), T.int64(48), T.int64(56), T.int64(56), T.int64(4)))
        for n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused in T.parallel(T.int64(112), annotations={"pragma_auto_unroll_max_step": 512, "pragma_unroll_explicit": 1}):
            for n_2_init, oc_chunk_2_init, oh_2_init, ow_2_init, oc_block_2_init, n_3_init, oc_chunk_3_init, oh_3_init, ow_3_init in T.grid(T.int64(1), T.int64(1), T.int64(4), T.int64(1), T.int64(1), T.int64(1), T.int64(24), T.int64(1), T.int64(14)):
                for oc_block_3_fused_init in T.vectorized(T.int64(4)):
                    with T.block("conv2d_NCHWc_init"):
                        v_n = T.axis.spatial(T.int64(1), n_2_init + n_3_init)
                        v_oc_chunk = T.axis.spatial(T.int64(48), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused % T.int64(8) // T.int64(4) * T.int64(24) + oc_chunk_2_init * T.int64(24) + oc_chunk_3_init)
                        v_oh = T.axis.spatial(T.int64(56), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused // T.int64(8) * T.int64(4) + oh_2_init + oh_3_init)
                        v_ow = T.axis.spatial(T.int64(56), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused % T.int64(4) * T.int64(14) + ow_2_init * T.int64(14) + ow_3_init)
                        v_oc_block = T.axis.spatial(T.int64(4), oc_block_2_init * T.int64(4) + oc_block_3_fused_init)
                        T.reads()
                        T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                        T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                        conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = T.float32(0)
            for ic_0, kh_0, kw_0, n_2, oc_chunk_2, oh_2, ow_2, oc_block_2, ic_1, kh_1, kw_1, n_3, oc_chunk_3, oh_3, ow_3 in T.grid(T.int64(8), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(4), T.int64(1), T.int64(1), T.int64(42), T.int64(1), T.int64(1), T.int64(1), T.int64(24), T.int64(1), T.int64(14)):
                for oc_block_3_fused in T.vectorized(T.int64(4)):
                    with T.block("conv2d_NCHWc_update"):
                        v_n = T.axis.spatial(T.int64(1), n_2 + n_3)
                        v_oc_chunk = T.axis.spatial(T.int64(48), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused % T.int64(8) // T.int64(4) * T.int64(24) + oc_chunk_2 * T.int64(24) + oc_chunk_3)
                        v_oh = T.axis.spatial(T.int64(56), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused // T.int64(8) * T.int64(4) + oh_2 + oh_3)
                        v_ow = T.axis.spatial(T.int64(56), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused % T.int64(4) * T.int64(14) + ow_2 * T.int64(14) + ow_3)
                        v_oc_block = T.axis.spatial(T.int64(4), oc_block_2 * T.int64(4) + oc_block_3_fused)
                        v_ic = T.axis.reduce(T.int64(336), ic_0 * T.int64(42) + ic_1)
                        v_kh = T.axis.reduce(T.int64(1), kh_0 + kh_1)
                        v_kw = T.axis.reduce(T.int64(1), kw_0 + kw_1)
                        T.reads(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block], p0[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)], p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block])
                        T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                        T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                        conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] + p0[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)] * p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block]
            for ax0, ax1, ax2 in T.grid(T.int64(1), T.int64(24), T.int64(4)):
                for ax3_ax4_fused in T.vectorized(T.int64(56)):
                    with T.block("T_relu"):
                        v_ax0 = T.axis.spatial(T.int64(1), ax0)
                        v_ax1 = T.axis.spatial(T.int64(48), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused % T.int64(8) // T.int64(4) * T.int64(24) + ax1)
                        v_ax2 = T.axis.spatial(T.int64(56), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused // T.int64(8) * T.int64(4) + ax2)
                        v_ax3 = T.axis.spatial(T.int64(56), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused % T.int64(4) * T.int64(14) + ax3_ax4_fused // T.int64(4))
                        v_ax4 = T.axis.spatial(T.int64(4), ax3_ax4_fused % T.int64(4))
                        T.reads(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4])
                        T.writes(T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                        T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.max(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] + p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4], T.float32(0))
b0 = sch.get_block(name="conv2d_NCHWc", func_name="main")
b1 = sch.get_block(name="T_add", func_name="main")
b2 = sch.get_block(name="root", func_name="main")
sch.compute_inline(block=b1)
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.tiling_structure", ann_val="SSRSRS")
l3, l4, l5, l6, l7, l8, l9, l10 = sch.get_loops(block=b0)
v11, v12, v13, v14 = sch.sample_perfect_tile(loop=l3, n=4, max_innermost_factor=64, decision=[1, 1, 1, 1])
l15, l16, l17, l18 = sch.split(loop=l3, factors=[v11, v12, v13, v14], preserve_unit_iters=True)
v19, v20, v21, v22 = sch.sample_perfect_tile(loop=l4, n=4, max_innermost_factor=64, decision=[1, 2, 1, 24])
l23, l24, l25, l26 = sch.split(loop=l4, factors=[v19, v20, v21, v22], preserve_unit_iters=True)
v27, v28, v29, v30 = sch.sample_perfect_tile(loop=l5, n=4, max_innermost_factor=64, decision=[14, 1, 4, 1])
l31, l32, l33, l34 = sch.split(loop=l5, factors=[v27, v28, v29, v30], preserve_unit_iters=True)
v35, v36, v37, v38 = sch.sample_perfect_tile(loop=l6, n=4, max_innermost_factor=64, decision=[1, 4, 1, 14])
l39, l40, l41, l42 = sch.split(loop=l6, factors=[v35, v36, v37, v38], preserve_unit_iters=True)
v43, v44, v45, v46 = sch.sample_perfect_tile(loop=l7, n=4, max_innermost_factor=64, decision=[1, 1, 1, 4])
l47, l48, l49, l50 = sch.split(loop=l7, factors=[v43, v44, v45, v46], preserve_unit_iters=True)
v51, v52 = sch.sample_perfect_tile(loop=l8, n=2, max_innermost_factor=64, decision=[8, 42])
l53, l54 = sch.split(loop=l8, factors=[v51, v52], preserve_unit_iters=True)
v55, v56 = sch.sample_perfect_tile(loop=l9, n=2, max_innermost_factor=64, decision=[1, 1])
l57, l58 = sch.split(loop=l9, factors=[v55, v56], preserve_unit_iters=True)
v59, v60 = sch.sample_perfect_tile(loop=l10, n=2, max_innermost_factor=64, decision=[1, 1])
l61, l62 = sch.split(loop=l10, factors=[v59, v60], preserve_unit_iters=True)
sch.reorder(l15, l23, l31, l39, l47, l16, l24, l32, l40, l48, l53, l57, l61, l17, l25, l33, l41, l49, l54, l58, l62, l18, l26, l34, l42, l50)
b63, = sch.get_consumers(block=b0)
sch.reverse_compute_at(block=b63, loop=l48, preserve_unit_loops=True, index=-1)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.vectorize", ann_val=64)
v64 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.unroll_explicit", ann_val=v64)
sch.enter_postproc()
b65 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b65, ann_key="meta_schedule.parallel")
sch.unannotate(block_or_loop=b65, ann_key="meta_schedule.vectorize")
sch.unannotate(block_or_loop=b65, ann_key="meta_schedule.unroll_explicit")
b66, b67 = sch.get_child_blocks(b65)
l68, l69, l70, l71, l72, l73, l74, l75, l76, l77, l78, l79, l80, l81, l82, l83, l84, l85, l86, l87, l88, l89, l90, l91, l92, l93 = sch.get_loops(block=b66)
l94 = sch.fuse(l68, l69, l70, l71, l72, l73, l74, l75, l76, l77, preserve_unit_iters=True)
sch.parallel(loop=l94)
l95 = sch.fuse(l93, preserve_unit_iters=True)
sch.vectorize(loop=l95)
sch.annotate(block_or_loop=l94, ann_key="pragma_auto_unroll_max_step", ann_val=512)
sch.annotate(block_or_loop=l94, ann_key="pragma_unroll_explicit", ann_val=1)
l96, l97, l98, l99, l100, l101 = sch.get_loops(block=b67)
l102 = sch.fuse(l100, l101, preserve_unit_iters=True)
sch.vectorize(loop=l102)
b103 = sch.get_block(name="conv2d_NCHWc", func_name="main")
l104, l105, l106, l107, l108, l109, l110, l111, l112, l113, l114, l115, l116, l117, l118, l119, l120 = sch.get_loops(block=b103)
b121 = sch.decompose_reduction(block=b103, loop=l105)
2024-04-29 05:45:36 [INFO] [task_scheduler.cc:131] [Task #75: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_72] Trial #125: GFLOPs: 152.8688. Time: 2654.7176 us. Best GFLOPs: 367.1408
2024-04-29 05:45:36 [INFO] [task_scheduler.cc:131] [Task #75: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_72] Trial #126: GFLOPs: 35.9830. Time: 11278.2160 us. Best GFLOPs: 367.1408
2024-04-29 05:45:36 [INFO] [task_scheduler.cc:131] [Task #75: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_72] Trial #127: GFLOPs: 68.7393. Time: 5903.8102 us. Best GFLOPs: 367.1408
2024-04-29 05:45:36 [INFO] [task_scheduler.cc:131] [Task #75: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_72] Trial #128: GFLOPs: 9.4136. Time: 43110.3327 us. Best GFLOPs: 367.1408
