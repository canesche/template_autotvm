2024-04-30 05:30:09 [INFO] [task_scheduler.cc:160] Initializing Task #18: "fused_nn_max_pool2d_3"
2024-04-30 05:30:09 [INFO] [task_scheduler.cc:35] 
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(32), T.int64(28), T.int64(28), T.int64(16)), "float32"), pool_max: T.Buffer((T.int64(1), T.int64(32), T.int64(14), T.int64(14), T.int64(16)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        for ax0, ax1, ax2, ax3, ax4, rv0, rv1 in T.grid(T.int64(1), T.int64(32), T.int64(14), T.int64(14), T.int64(16), T.int64(2), T.int64(2)):
            with T.block("pool_max"):
                v_ax0, v_ax1, v_ax2, v_ax3, v_ax4, v_rv0, v_rv1 = T.axis.remap("SSSSSRR", [ax0, ax1, ax2, ax3, ax4, rv0, rv1])
                T.reads(p0[v_ax0, v_ax1, v_ax2 * T.int64(2) + v_rv0, v_ax3 * T.int64(2) + v_rv1, v_ax4])
                T.writes(pool_max[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                T.block_attr({"schedule_rule": "meta_schedule.pool_max"})
                with T.init():
                    pool_max[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.float32(-3.4028234663852886e+38)
                pool_max[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.max(pool_max[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], p0[v_ax0, v_ax1, v_ax2 * T.int64(2) + v_rv0, v_ax3 * T.int64(2) + v_rv1, v_ax4])
2024-04-30 05:30:09 [INFO] [task_scheduler.cc:164] Total 3 design space(s) generated
2024-04-30 05:30:09 [INFO] [task_scheduler.cc:170] Design space #0:
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(32), T.int64(28), T.int64(28), T.int64(16)), "float32"), pool_max: T.Buffer((T.int64(1), T.int64(32), T.int64(14), T.int64(14), T.int64(16)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        with T.block("root"):
            T.reads()
            T.writes()
            T.block_attr({"meta_schedule.parallel": 768, "meta_schedule.unroll_explicit": 512, "meta_schedule.vectorize": 64})
            pool_max_rf = T.alloc_buffer((T.int64(1), T.int64(32), T.int64(14), T.int64(14), T.int64(16), T.int64(1)))
            for ax0, ax1, ax2, ax3, ax4, rv0_rv1_fused_0, rv0_rv1_fused_1 in T.grid(T.int64(1), T.int64(32), T.int64(14), T.int64(14), T.int64(16), T.int64(1), T.int64(4)):
                with T.block("pool_max_rf"):
                    vrv0_rv1_fused_0, v_ax0, v_ax1, v_ax2, v_ax3, v_ax4, vrv0_rv1_fused_1 = T.axis.remap("SSSSSSR", [rv0_rv1_fused_0, ax0, ax1, ax2, ax3, ax4, rv0_rv1_fused_1])
                    T.reads(p0[v_ax0, v_ax1, v_ax2 * T.int64(2) + (vrv0_rv1_fused_0 * T.int64(4) + vrv0_rv1_fused_1) // T.int64(2), v_ax3 * T.int64(2) + (vrv0_rv1_fused_0 * T.int64(4) + vrv0_rv1_fused_1) % T.int64(2), v_ax4])
                    T.writes(pool_max_rf[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4, vrv0_rv1_fused_0])
                    with T.init():
                        pool_max_rf[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4, vrv0_rv1_fused_0] = T.float32(-3.4028234663852886e+38)
                    pool_max_rf[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4, vrv0_rv1_fused_0] = T.max(pool_max_rf[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4, vrv0_rv1_fused_0], p0[v_ax0, v_ax1, v_ax2 * T.int64(2) + (vrv0_rv1_fused_0 * T.int64(4) + vrv0_rv1_fused_1) // T.int64(2), v_ax3 * T.int64(2) + (vrv0_rv1_fused_0 * T.int64(4) + vrv0_rv1_fused_1) % T.int64(2), v_ax4])
            for ax0, ax1, ax2, ax3, ax4, rv0_rv1_fused_0 in T.grid(T.int64(1), T.int64(32), T.int64(14), T.int64(14), T.int64(16), T.int64(1)):
                with T.block("pool_max"):
                    vrv0_rv1_fused_0, v_ax0, v_ax1, v_ax2, v_ax3, v_ax4 = T.axis.remap("RSSSSS", [rv0_rv1_fused_0, ax0, ax1, ax2, ax3, ax4])
                    T.reads(pool_max_rf[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4, vrv0_rv1_fused_0])
                    T.writes(pool_max[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                    T.block_attr({"meta_schedule.random_compute_producer": 1})
                    with T.init():
                        pool_max[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.float32(-3.4028234663852886e+38)
                    pool_max[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.max(pool_max[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], pool_max_rf[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4, vrv0_rv1_fused_0])
b0 = sch.get_block(name="pool_max", func_name="main")
b1 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b0, ann_key="schedule_rule")
l2, l3, l4, l5, l6, l7, l8 = sch.get_loops(block=b0)
l9 = sch.fuse(l7, l8, preserve_unit_iters=True)
v10, v11 = sch.sample_perfect_tile(loop=l9, n=2, max_innermost_factor=64, decision=[1, 4])
l12, l13 = sch.split(loop=l9, factors=[v10, v11], preserve_unit_iters=True)
b14 = sch.rfactor(loop=l12, factor_axis=5)
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.random_compute_producer", ann_val=1)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.vectorize", ann_val=64)
v15 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.unroll_explicit", ann_val=v15)
2024-04-30 05:30:09 [INFO] [task_scheduler.cc:170] Design space #1:
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(32), T.int64(28), T.int64(28), T.int64(16)), "float32"), pool_max: T.Buffer((T.int64(1), T.int64(32), T.int64(14), T.int64(14), T.int64(16)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        with T.block("root"):
            T.reads()
            T.writes()
            T.block_attr({"meta_schedule.parallel": 768, "meta_schedule.unroll_explicit": 512, "meta_schedule.vectorize": 64})
            pool_max_rf = T.alloc_buffer((T.int64(1), T.int64(32), T.int64(14), T.int64(14), T.int64(16), T.int64(4)))
            for ax0, ax1, ax2, ax3, ax4, rv0_rv1_fused_0, rv0_rv1_fused_1 in T.grid(T.int64(1), T.int64(32), T.int64(14), T.int64(14), T.int64(16), T.int64(1), T.int64(4)):
                with T.block("pool_max_rf"):
                    vrv0_rv1_fused_1, v_ax0, v_ax1, v_ax2, v_ax3, v_ax4, vrv0_rv1_fused_0 = T.axis.remap("SSSSSSR", [rv0_rv1_fused_1, ax0, ax1, ax2, ax3, ax4, rv0_rv1_fused_0])
                    T.reads(p0[v_ax0, v_ax1, v_ax2 * T.int64(2) + (vrv0_rv1_fused_0 * T.int64(4) + vrv0_rv1_fused_1) // T.int64(2), v_ax3 * T.int64(2) + (vrv0_rv1_fused_0 * T.int64(4) + vrv0_rv1_fused_1) % T.int64(2), v_ax4])
                    T.writes(pool_max_rf[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4, vrv0_rv1_fused_1])
                    with T.init():
                        pool_max_rf[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4, vrv0_rv1_fused_1] = T.float32(-3.4028234663852886e+38)
                    pool_max_rf[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4, vrv0_rv1_fused_1] = T.max(pool_max_rf[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4, vrv0_rv1_fused_1], p0[v_ax0, v_ax1, v_ax2 * T.int64(2) + (vrv0_rv1_fused_0 * T.int64(4) + vrv0_rv1_fused_1) // T.int64(2), v_ax3 * T.int64(2) + (vrv0_rv1_fused_0 * T.int64(4) + vrv0_rv1_fused_1) % T.int64(2), v_ax4])
            for ax0, ax1, ax2, ax3, ax4, rv0_rv1_fused_1 in T.grid(T.int64(1), T.int64(32), T.int64(14), T.int64(14), T.int64(16), T.int64(4)):
                with T.block("pool_max"):
                    vrv0_rv1_fused_1, v_ax0, v_ax1, v_ax2, v_ax3, v_ax4 = T.axis.remap("RSSSSS", [rv0_rv1_fused_1, ax0, ax1, ax2, ax3, ax4])
                    T.reads(pool_max_rf[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4, vrv0_rv1_fused_1])
                    T.writes(pool_max[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                    T.block_attr({"meta_schedule.random_compute_producer": 1})
                    with T.init():
                        pool_max[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.float32(-3.4028234663852886e+38)
                    pool_max[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.max(pool_max[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], pool_max_rf[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4, vrv0_rv1_fused_1])
b0 = sch.get_block(name="pool_max", func_name="main")
b1 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b0, ann_key="schedule_rule")
l2, l3, l4, l5, l6, l7, l8 = sch.get_loops(block=b0)
l9 = sch.fuse(l7, l8, preserve_unit_iters=True)
v10, v11 = sch.sample_perfect_tile(loop=l9, n=2, max_innermost_factor=64, decision=[1, 4])
l12, l13 = sch.split(loop=l9, factors=[v10, v11], preserve_unit_iters=True)
b14 = sch.rfactor(loop=l13, factor_axis=5)
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.random_compute_producer", ann_val=1)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.vectorize", ann_val=64)
v15 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.unroll_explicit", ann_val=v15)
2024-04-30 05:30:09 [INFO] [task_scheduler.cc:170] Design space #2:
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(32), T.int64(28), T.int64(28), T.int64(16)), "float32"), pool_max: T.Buffer((T.int64(1), T.int64(32), T.int64(14), T.int64(14), T.int64(16)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        with T.block("root"):
            T.reads()
            T.writes()
            T.block_attr({"meta_schedule.parallel": 768, "meta_schedule.unroll_explicit": 0, "meta_schedule.vectorize": 64})
            for ax0, ax1, ax2, ax3, ax4, rv0, rv1 in T.grid(T.int64(1), T.int64(32), T.int64(14), T.int64(14), T.int64(16), T.int64(2), T.int64(2)):
                with T.block("pool_max"):
                    v_ax0, v_ax1, v_ax2, v_ax3, v_ax4, v_rv0, v_rv1 = T.axis.remap("SSSSSRR", [ax0, ax1, ax2, ax3, ax4, rv0, rv1])
                    T.reads(p0[v_ax0, v_ax1, v_ax2 * T.int64(2) + v_rv0, v_ax3 * T.int64(2) + v_rv1, v_ax4])
                    T.writes(pool_max[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                    with T.init():
                        pool_max[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.float32(-3.4028234663852886e+38)
                    pool_max[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.max(pool_max[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], p0[v_ax0, v_ax1, v_ax2 * T.int64(2) + v_rv0, v_ax3 * T.int64(2) + v_rv1, v_ax4])
b0 = sch.get_block(name="pool_max", func_name="main")
b1 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b0, ann_key="schedule_rule")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.vectorize", ann_val=64)
v2 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=0)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.unroll_explicit", ann_val=v2)
2024-04-30 06:08:42 [INFO] [evolutionary_search.cc:713] Generating candidates......
2024-04-30 06:08:42 [INFO] [evolutionary_search.cc:715] Picked top 0 candidate(s) from database
2024-04-30 06:08:43 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x3411ef8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x31b9198)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x30b8d78)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x3372cf8)]: 0 failure(s)
2024-04-30 06:08:43 [INFO] [evolutionary_search.cc:723] Sampled 512 candidate(s)
2024-04-30 06:08:44 [INFO] [evolutionary_search.cc:621] Evolve iter #0 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x3411ef8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x31b9198)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x30b8d78)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x3372cf8)]: 0 failure(s)
2024-04-30 06:08:45 [INFO] [evolutionary_search.cc:621] Evolve iter #1 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x3411ef8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x31b9198)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x30b8d78)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x3372cf8)]: 0 failure(s)
2024-04-30 06:08:47 [INFO] [evolutionary_search.cc:621] Evolve iter #2 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x3411ef8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x31b9198)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x30b8d78)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x3372cf8)]: 0 failure(s)
2024-04-30 06:08:48 [INFO] [evolutionary_search.cc:621] Evolve iter #3 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x3411ef8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x31b9198)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x30b8d78)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x3372cf8)]: 0 failure(s)
2024-04-30 06:08:49 [INFO] [evolutionary_search.cc:649] Scores of the best 58 candidates:
[1 : 16]:	0.9980  0.9338  0.9319  0.8997  0.8961  0.8956  0.8605  0.8317  0.8032  0.8007  0.7529  0.7265  0.7243  0.7240  0.7097  0.7008
[17 : 32]:	0.6966  0.6912  0.6828  0.6810  0.6302  0.5993  0.5731  0.5706  0.5652  0.5645  0.5562  0.5551  0.5329  0.5310  0.5270  0.5085
[33 : 48]:	0.4934  0.4583  0.4211  0.3943  0.3521  0.3347  0.3105  0.2879  0.2875  0.2839  0.2744  0.2736  0.2545  0.2454  0.2424  0.2274
[49 : 58]:	0.2115  0.1924  0.1875  0.1784  0.1668  0.1042  0.0471  0.0358  0.0358  0.0245
2024-04-30 06:08:49 [INFO] [evolutionary_search.cc:727] Got 58 candidate(s) with evolutionary search
2024-04-30 06:08:49 [INFO] [evolutionary_search.cc:730] Sending 58 candidates(s) for measurement
2024-04-30 06:42:31 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_max_pool2d_3] Trial #1: GFLOPs: 9.0033. Time: 44.5845 us. Best GFLOPs: 9.0033
2024-04-30 06:42:31 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_max_pool2d_3] Trial #2: GFLOPs: 10.0475. Time: 39.9512 us. Best GFLOPs: 10.0475
2024-04-30 06:42:31 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_max_pool2d_3] Trial #3: GFLOPs: 26.8678. Time: 14.9401 us. Best GFLOPs: 26.8678
2024-04-30 06:42:31 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_max_pool2d_3] Trial #4: GFLOPs: 13.7061. Time: 29.2869 us. Best GFLOPs: 26.8678
2024-04-30 06:42:31 [INFO] [task_scheduler.cc:121] [Task #18: fused_nn_max_pool2d_3] Trial #5: Error in building:
LocalBuilder: Timeout, killed after 30.0 seconds
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(32), T.int64(28), T.int64(28), T.int64(16)), "float32"), pool_max: T.Buffer((T.int64(1), T.int64(32), T.int64(14), T.int64(14), T.int64(16)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        pool_max_rf = T.alloc_buffer((T.int64(1), T.int64(32), T.int64(14), T.int64(14), T.int64(16), T.int64(4)))
        for ax0_ax1_ax2_fused in T.parallel(T.int64(448), annotations={"pragma_auto_unroll_max_step": 512, "pragma_unroll_explicit": 1}):
            for ax3, ax4 in T.grid(T.int64(14), T.int64(16)):
                for rv0_rv1_fused_1_fused_init in T.vectorized(T.int64(4)):
                    with T.block("pool_max_rf_init"):
                        vrv0_rv1_fused_1 = T.axis.spatial(T.int64(4), rv0_rv1_fused_1_fused_init)
                        v_ax0 = T.axis.spatial(T.int64(1), T.int64(0))
                        v_ax1 = T.axis.spatial(T.int64(32), ax0_ax1_ax2_fused // T.int64(14))
                        v_ax2 = T.axis.spatial(T.int64(14), ax0_ax1_ax2_fused % T.int64(14))
                        v_ax3, v_ax4 = T.axis.remap("SS", [ax3, ax4])
                        T.reads()
                        T.writes(pool_max_rf[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4, vrv0_rv1_fused_1])
                        pool_max_rf[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4, vrv0_rv1_fused_1] = T.float32(-3.4028234663852886e+38)
                for rv0_rv1_fused_0 in range(T.int64(1)):
                    for rv0_rv1_fused_1_fused in T.vectorized(T.int64(4)):
                        with T.block("pool_max_rf_update"):
                            vrv0_rv1_fused_1 = T.axis.spatial(T.int64(4), rv0_rv1_fused_1_fused)
                            v_ax0 = T.axis.spatial(T.int64(1), T.int64(0))
                            v_ax1 = T.axis.spatial(T.int64(32), ax0_ax1_ax2_fused // T.int64(14))
                            v_ax2 = T.axis.spatial(T.int64(14), ax0_ax1_ax2_fused % T.int64(14))
                            v_ax3, v_ax4, vrv0_rv1_fused_0 = T.axis.remap("SSR", [ax3, ax4, rv0_rv1_fused_0])
                            T.reads(pool_max_rf[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4, vrv0_rv1_fused_1], p0[v_ax0, v_ax1, v_ax2 * T.int64(2) + (vrv0_rv1_fused_0 * T.int64(4) + vrv0_rv1_fused_1) // T.int64(2), v_ax3 * T.int64(2) + (vrv0_rv1_fused_0 * T.int64(4) + vrv0_rv1_fused_1) % T.int64(2), v_ax4])
                            T.writes(pool_max_rf[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4, vrv0_rv1_fused_1])
                            pool_max_rf[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4, vrv0_rv1_fused_1] = T.max(pool_max_rf[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4, vrv0_rv1_fused_1], p0[v_ax0, v_ax1, v_ax2 * T.int64(2) + (vrv0_rv1_fused_0 * T.int64(4) + vrv0_rv1_fused_1) // T.int64(2), v_ax3 * T.int64(2) + (vrv0_rv1_fused_0 * T.int64(4) + vrv0_rv1_fused_1) % T.int64(2), v_ax4])
        for ax0_ax1_ax2_fused in T.parallel(T.int64(448), annotations={"pragma_auto_unroll_max_step": 512, "pragma_unroll_explicit": 1}):
            for ax3, ax4 in T.grid(T.int64(14), T.int64(16)):
                with T.block("pool_max_init"):
                    v_ax0 = T.axis.spatial(T.int64(1), T.int64(0))
                    v_ax1 = T.axis.spatial(T.int64(32), ax0_ax1_ax2_fused // T.int64(14))
                    v_ax2 = T.axis.spatial(T.int64(14), ax0_ax1_ax2_fused % T.int64(14))
                    v_ax3, v_ax4 = T.axis.remap("SS", [ax3, ax4])
                    T.reads()
                    T.writes(pool_max[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                    T.block_attr({"meta_schedule.random_compute_producer": 1})
                    pool_max[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.float32(-3.4028234663852886e+38)
                for rv0_rv1_fused_1 in range(T.int64(4)):
                    with T.block("pool_max_update"):
                        vrv0_rv1_fused_1 = T.axis.reduce(T.int64(4), rv0_rv1_fused_1)
                        v_ax0 = T.axis.spatial(T.int64(1), T.int64(0))
                        v_ax1 = T.axis.spatial(T.int64(32), ax0_ax1_ax2_fused // T.int64(14))
                        v_ax2 = T.axis.spatial(T.int64(14), ax0_ax1_ax2_fused % T.int64(14))
                        v_ax3, v_ax4 = T.axis.remap("SS", [ax3, ax4])
                        T.reads(pool_max[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], pool_max_rf[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4, vrv0_rv1_fused_1])
                        T.writes(pool_max[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                        T.block_attr({"meta_schedule.random_compute_producer": 1})
                        pool_max[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.max(pool_max[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], pool_max_rf[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4, vrv0_rv1_fused_1])
b0 = sch.get_block(name="pool_max", func_name="main")
b1 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b0, ann_key="schedule_rule")
l2, l3, l4, l5, l6, l7, l8 = sch.get_loops(block=b0)
l9 = sch.fuse(l7, l8, preserve_unit_iters=True)
v10, v11 = sch.sample_perfect_tile(loop=l9, n=2, max_innermost_factor=64, decision=[1, 4])
l12, l13 = sch.split(loop=l9, factors=[v10, v11], preserve_unit_iters=True)
b14 = sch.rfactor(loop=l13, factor_axis=5)
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.random_compute_producer", ann_val=1)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.parallel", ann_val=32)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.vectorize", ann_val=64)
v15 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.unroll_explicit", ann_val=v15)
sch.enter_postproc()
b16 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b16, ann_key="meta_schedule.parallel")
sch.unannotate(block_or_loop=b16, ann_key="meta_schedule.vectorize")
sch.unannotate(block_or_loop=b16, ann_key="meta_schedule.unroll_explicit")
b17, b18 = sch.get_child_blocks(b16)
l19, l20, l21, l22, l23, l24, l25 = sch.get_loops(block=b17)
l26 = sch.fuse(l19, l20, l21, preserve_unit_iters=True)
sch.parallel(loop=l26)
l27 = sch.fuse(l25, preserve_unit_iters=True)
sch.vectorize(loop=l27)
sch.annotate(block_or_loop=l26, ann_key="pragma_auto_unroll_max_step", ann_val=512)
sch.annotate(block_or_loop=l26, ann_key="pragma_unroll_explicit", ann_val=1)
l28, l29, l30, l31, l32, l33 = sch.get_loops(block=b18)
l34 = sch.fuse(l28, l29, l30, preserve_unit_iters=True)
sch.parallel(loop=l34)
sch.annotate(block_or_loop=l34, ann_key="pragma_auto_unroll_max_step", ann_val=512)
sch.annotate(block_or_loop=l34, ann_key="pragma_unroll_explicit", ann_val=1)
b35 = sch.get_block(name="pool_max_rf", func_name="main")
l36, l37, l38, l39, l40 = sch.get_loops(block=b35)
b41 = sch.decompose_reduction(block=b35, loop=l39)
b42 = sch.get_block(name="pool_max", func_name="main")
l43, l44, l45, l46 = sch.get_loops(block=b42)
b47 = sch.decompose_reduction(block=b42, loop=l46)
2024-04-30 06:42:31 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_max_pool2d_3] Trial #6: GFLOPs: 10.6197. Time: 37.7983 us. Best GFLOPs: 26.8678
2024-04-30 06:42:31 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_max_pool2d_3] Trial #7: GFLOPs: 14.0563. Time: 28.5572 us. Best GFLOPs: 26.8678
2024-04-30 06:42:31 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_max_pool2d_3] Trial #8: GFLOPs: 5.9631. Time: 67.3153 us. Best GFLOPs: 26.8678
2024-04-30 06:42:31 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_max_pool2d_3] Trial #9: GFLOPs: 7.3878. Time: 54.3337 us. Best GFLOPs: 26.8678
2024-04-30 06:42:31 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_max_pool2d_3] Trial #10: GFLOPs: 13.4533. Time: 29.8370 us. Best GFLOPs: 26.8678
2024-04-30 06:42:31 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_max_pool2d_3] Trial #11: GFLOPs: 9.0990. Time: 44.1158 us. Best GFLOPs: 26.8678
2024-04-30 06:42:31 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_max_pool2d_3] Trial #12: GFLOPs: 6.4775. Time: 61.9699 us. Best GFLOPs: 26.8678
2024-04-30 06:42:31 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_max_pool2d_3] Trial #13: GFLOPs: 29.1108. Time: 13.7890 us. Best GFLOPs: 29.1108
2024-04-30 06:42:31 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_max_pool2d_3] Trial #14: GFLOPs: 12.3531. Time: 32.4944 us. Best GFLOPs: 29.1108
2024-04-30 06:42:31 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_max_pool2d_3] Trial #15: GFLOPs: 12.4105. Time: 32.3443 us. Best GFLOPs: 29.1108
2024-04-30 06:42:31 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_max_pool2d_3] Trial #16: GFLOPs: 9.0694. Time: 44.2595 us. Best GFLOPs: 29.1108
2024-04-30 06:42:31 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_max_pool2d_3] Trial #17: GFLOPs: 10.0531. Time: 39.9289 us. Best GFLOPs: 29.1108
2024-04-30 06:42:31 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_max_pool2d_3] Trial #18: GFLOPs: 30.0312. Time: 13.3664 us. Best GFLOPs: 30.0312
2024-04-30 06:42:31 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_max_pool2d_3] Trial #19: GFLOPs: 8.1325. Time: 49.3586 us. Best GFLOPs: 30.0312
2024-04-30 06:42:31 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_max_pool2d_3] Trial #20: GFLOPs: 12.7750. Time: 31.4214 us. Best GFLOPs: 30.0312
2024-04-30 06:42:31 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_max_pool2d_3] Trial #21: GFLOPs: 12.8471. Time: 31.2451 us. Best GFLOPs: 30.0312
2024-04-30 06:42:31 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_max_pool2d_3] Trial #22: GFLOPs: 11.8917. Time: 33.7553 us. Best GFLOPs: 30.0312
2024-04-30 06:42:31 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_max_pool2d_3] Trial #23: GFLOPs: 14.0241. Time: 28.6226 us. Best GFLOPs: 30.0312
2024-04-30 06:42:31 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_max_pool2d_3] Trial #24: GFLOPs: 10.1776. Time: 39.4405 us. Best GFLOPs: 30.0312
2024-04-30 06:42:31 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_max_pool2d_3] Trial #25: GFLOPs: 10.6458. Time: 37.7058 us. Best GFLOPs: 30.0312
2024-04-30 06:42:31 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_max_pool2d_3] Trial #26: GFLOPs: 10.4377. Time: 38.4574 us. Best GFLOPs: 30.0312
2024-04-30 06:42:31 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_max_pool2d_3] Trial #27: GFLOPs: 11.1819. Time: 35.8979 us. Best GFLOPs: 30.0312
2024-04-30 06:42:31 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_max_pool2d_3] Trial #28: GFLOPs: 9.9520. Time: 40.3343 us. Best GFLOPs: 30.0312
2024-04-30 06:42:31 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_max_pool2d_3] Trial #29: GFLOPs: 14.3101. Time: 28.0507 us. Best GFLOPs: 30.0312
2024-04-30 06:42:31 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_max_pool2d_3] Trial #30: GFLOPs: 8.9243. Time: 44.9793 us. Best GFLOPs: 30.0312
2024-04-30 06:42:31 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_max_pool2d_3] Trial #31: GFLOPs: 9.7032. Time: 41.3688 us. Best GFLOPs: 30.0312
2024-04-30 06:42:31 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_max_pool2d_3] Trial #32: GFLOPs: 6.6729. Time: 60.1554 us. Best GFLOPs: 30.0312
2024-04-30 06:42:31 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_max_pool2d_3] Trial #33: GFLOPs: 12.7566. Time: 31.4667 us. Best GFLOPs: 30.0312
2024-04-30 06:42:31 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_max_pool2d_3] Trial #34: GFLOPs: 13.9734. Time: 28.7265 us. Best GFLOPs: 30.0312
2024-04-30 06:42:31 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_max_pool2d_3] Trial #35: GFLOPs: 7.4970. Time: 53.5427 us. Best GFLOPs: 30.0312
2024-04-30 06:42:31 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_max_pool2d_3] Trial #36: GFLOPs: 9.3252. Time: 43.0455 us. Best GFLOPs: 30.0312
2024-04-30 06:42:31 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_max_pool2d_3] Trial #37: GFLOPs: 14.1029. Time: 28.4629 us. Best GFLOPs: 30.0312
2024-04-30 06:42:31 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_max_pool2d_3] Trial #38: GFLOPs: 27.5381. Time: 14.5765 us. Best GFLOPs: 30.0312
2024-04-30 06:42:31 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_max_pool2d_3] Trial #39: GFLOPs: 13.2989. Time: 30.1836 us. Best GFLOPs: 30.0312
2024-04-30 06:42:31 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_max_pool2d_3] Trial #40: GFLOPs: 9.1567. Time: 43.8379 us. Best GFLOPs: 30.0312
2024-04-30 06:42:31 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_max_pool2d_3] Trial #41: GFLOPs: 11.2077. Time: 35.8155 us. Best GFLOPs: 30.0312
2024-04-30 06:42:31 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_max_pool2d_3] Trial #42: GFLOPs: 9.1125. Time: 44.0504 us. Best GFLOPs: 30.0312
2024-04-30 06:42:31 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_max_pool2d_3] Trial #43: GFLOPs: 8.3491. Time: 48.0777 us. Best GFLOPs: 30.0312
2024-04-30 06:42:31 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_max_pool2d_3] Trial #44: GFLOPs: 7.4601. Time: 53.8075 us. Best GFLOPs: 30.0312
2024-04-30 06:42:31 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_max_pool2d_3] Trial #45: GFLOPs: 11.4871. Time: 34.9443 us. Best GFLOPs: 30.0312
2024-04-30 06:42:31 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_max_pool2d_3] Trial #46: GFLOPs: 5.0684. Time: 79.1976 us. Best GFLOPs: 30.0312
2024-04-30 06:42:31 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_max_pool2d_3] Trial #47: GFLOPs: 14.4011. Time: 27.8735 us. Best GFLOPs: 30.0312
2024-04-30 06:42:31 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_max_pool2d_3] Trial #48: GFLOPs: 6.1745. Time: 65.0108 us. Best GFLOPs: 30.0312
2024-04-30 06:42:31 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_max_pool2d_3] Trial #49: GFLOPs: 4.6500. Time: 86.3250 us. Best GFLOPs: 30.0312
2024-04-30 06:42:31 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_max_pool2d_3] Trial #50: GFLOPs: 30.3878. Time: 13.2095 us. Best GFLOPs: 30.3878
2024-04-30 06:42:31 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_max_pool2d_3] Trial #51: GFLOPs: 10.8499. Time: 36.9966 us. Best GFLOPs: 30.3878
2024-04-30 06:42:31 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_max_pool2d_3] Trial #52: GFLOPs: 12.3645. Time: 32.4646 us. Best GFLOPs: 30.3878
2024-04-30 06:42:31 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_max_pool2d_3] Trial #53: GFLOPs: 13.1673. Time: 30.4852 us. Best GFLOPs: 30.3878
2024-04-30 06:42:31 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_max_pool2d_3] Trial #54: GFLOPs: 7.0832. Time: 56.6702 us. Best GFLOPs: 30.3878
2024-04-30 06:42:31 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_max_pool2d_3] Trial #55: GFLOPs: 13.1589. Time: 30.5047 us. Best GFLOPs: 30.3878
2024-04-30 06:42:31 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_max_pool2d_3] Trial #56: GFLOPs: 10.4857. Time: 38.2816 us. Best GFLOPs: 30.3878
2024-04-30 06:42:31 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_max_pool2d_3] Trial #57: GFLOPs: 7.8135. Time: 51.3738 us. Best GFLOPs: 30.3878
2024-04-30 06:42:31 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_max_pool2d_3] Trial #58: GFLOPs: 13.0626. Time: 30.7296 us. Best GFLOPs: 30.3878
