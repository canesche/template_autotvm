2024-04-30 05:29:52 [INFO] [task_scheduler.cc:160] Initializing Task #12: "fused_nn_max_pool2d_2"
2024-04-30 05:29:52 [INFO] [task_scheduler.cc:35] 
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(8), T.int64(56), T.int64(56), T.int64(32)), "float32"), pool_max: T.Buffer((T.int64(1), T.int64(8), T.int64(28), T.int64(28), T.int64(32)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        for ax0, ax1, ax2, ax3, ax4, rv0, rv1 in T.grid(T.int64(1), T.int64(8), T.int64(28), T.int64(28), T.int64(32), T.int64(2), T.int64(2)):
            with T.block("pool_max"):
                v_ax0, v_ax1, v_ax2, v_ax3, v_ax4, v_rv0, v_rv1 = T.axis.remap("SSSSSRR", [ax0, ax1, ax2, ax3, ax4, rv0, rv1])
                T.reads(p0[v_ax0, v_ax1, v_ax2 * T.int64(2) + v_rv0, v_ax3 * T.int64(2) + v_rv1, v_ax4])
                T.writes(pool_max[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                T.block_attr({"schedule_rule": "meta_schedule.pool_max"})
                with T.init():
                    pool_max[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.float32(-3.4028234663852886e+38)
                pool_max[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.max(pool_max[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], p0[v_ax0, v_ax1, v_ax2 * T.int64(2) + v_rv0, v_ax3 * T.int64(2) + v_rv1, v_ax4])
2024-04-30 05:29:52 [INFO] [task_scheduler.cc:164] Total 3 design space(s) generated
2024-04-30 05:29:52 [INFO] [task_scheduler.cc:170] Design space #0:
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(8), T.int64(56), T.int64(56), T.int64(32)), "float32"), pool_max: T.Buffer((T.int64(1), T.int64(8), T.int64(28), T.int64(28), T.int64(32)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        with T.block("root"):
            T.reads()
            T.writes()
            T.block_attr({"meta_schedule.parallel": 768, "meta_schedule.unroll_explicit": 0, "meta_schedule.vectorize": 64})
            pool_max_rf = T.alloc_buffer((T.int64(1), T.int64(8), T.int64(28), T.int64(28), T.int64(32), T.int64(4)))
            for ax0, ax1, ax2, ax3, ax4, rv0_rv1_fused_0, rv0_rv1_fused_1 in T.grid(T.int64(1), T.int64(8), T.int64(28), T.int64(28), T.int64(32), T.int64(4), T.int64(1)):
                with T.block("pool_max_rf"):
                    vrv0_rv1_fused_0, v_ax0, v_ax1, v_ax2, v_ax3, v_ax4, vrv0_rv1_fused_1 = T.axis.remap("SSSSSSR", [rv0_rv1_fused_0, ax0, ax1, ax2, ax3, ax4, rv0_rv1_fused_1])
                    T.reads(p0[v_ax0, v_ax1, v_ax2 * T.int64(2) + (vrv0_rv1_fused_0 + vrv0_rv1_fused_1) // T.int64(2), v_ax3 * T.int64(2) + (vrv0_rv1_fused_0 + vrv0_rv1_fused_1) % T.int64(2), v_ax4])
                    T.writes(pool_max_rf[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4, vrv0_rv1_fused_0])
                    with T.init():
                        pool_max_rf[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4, vrv0_rv1_fused_0] = T.float32(-3.4028234663852886e+38)
                    pool_max_rf[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4, vrv0_rv1_fused_0] = T.max(pool_max_rf[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4, vrv0_rv1_fused_0], p0[v_ax0, v_ax1, v_ax2 * T.int64(2) + (vrv0_rv1_fused_0 + vrv0_rv1_fused_1) // T.int64(2), v_ax3 * T.int64(2) + (vrv0_rv1_fused_0 + vrv0_rv1_fused_1) % T.int64(2), v_ax4])
            for ax0, ax1, ax2, ax3, ax4, rv0_rv1_fused_0 in T.grid(T.int64(1), T.int64(8), T.int64(28), T.int64(28), T.int64(32), T.int64(4)):
                with T.block("pool_max"):
                    vrv0_rv1_fused_0, v_ax0, v_ax1, v_ax2, v_ax3, v_ax4 = T.axis.remap("RSSSSS", [rv0_rv1_fused_0, ax0, ax1, ax2, ax3, ax4])
                    T.reads(pool_max_rf[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4, vrv0_rv1_fused_0])
                    T.writes(pool_max[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                    T.block_attr({"meta_schedule.random_compute_producer": 1})
                    with T.init():
                        pool_max[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.float32(-3.4028234663852886e+38)
                    pool_max[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.max(pool_max[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], pool_max_rf[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4, vrv0_rv1_fused_0])
b0 = sch.get_block(name="pool_max", func_name="main")
b1 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b0, ann_key="schedule_rule")
l2, l3, l4, l5, l6, l7, l8 = sch.get_loops(block=b0)
l9 = sch.fuse(l7, l8, preserve_unit_iters=True)
v10, v11 = sch.sample_perfect_tile(loop=l9, n=2, max_innermost_factor=64, decision=[4, 1])
l12, l13 = sch.split(loop=l9, factors=[v10, v11], preserve_unit_iters=True)
b14 = sch.rfactor(loop=l12, factor_axis=5)
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.random_compute_producer", ann_val=1)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.vectorize", ann_val=64)
v15 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=0)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.unroll_explicit", ann_val=v15)
2024-04-30 05:29:52 [INFO] [task_scheduler.cc:170] Design space #1:
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(8), T.int64(56), T.int64(56), T.int64(32)), "float32"), pool_max: T.Buffer((T.int64(1), T.int64(8), T.int64(28), T.int64(28), T.int64(32)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        with T.block("root"):
            T.reads()
            T.writes()
            T.block_attr({"meta_schedule.parallel": 768, "meta_schedule.unroll_explicit": 64, "meta_schedule.vectorize": 64})
            pool_max_rf = T.alloc_buffer((T.int64(1), T.int64(8), T.int64(28), T.int64(28), T.int64(32), T.int64(1)))
            for ax0, ax1, ax2, ax3, ax4, rv0_rv1_fused_0, rv0_rv1_fused_1 in T.grid(T.int64(1), T.int64(8), T.int64(28), T.int64(28), T.int64(32), T.int64(4), T.int64(1)):
                with T.block("pool_max_rf"):
                    vrv0_rv1_fused_1, v_ax0, v_ax1, v_ax2, v_ax3, v_ax4, vrv0_rv1_fused_0 = T.axis.remap("SSSSSSR", [rv0_rv1_fused_1, ax0, ax1, ax2, ax3, ax4, rv0_rv1_fused_0])
                    T.reads(p0[v_ax0, v_ax1, v_ax2 * T.int64(2) + (vrv0_rv1_fused_0 + vrv0_rv1_fused_1) // T.int64(2), v_ax3 * T.int64(2) + (vrv0_rv1_fused_0 + vrv0_rv1_fused_1) % T.int64(2), v_ax4])
                    T.writes(pool_max_rf[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4, vrv0_rv1_fused_1])
                    with T.init():
                        pool_max_rf[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4, vrv0_rv1_fused_1] = T.float32(-3.4028234663852886e+38)
                    pool_max_rf[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4, vrv0_rv1_fused_1] = T.max(pool_max_rf[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4, vrv0_rv1_fused_1], p0[v_ax0, v_ax1, v_ax2 * T.int64(2) + (vrv0_rv1_fused_0 + vrv0_rv1_fused_1) // T.int64(2), v_ax3 * T.int64(2) + (vrv0_rv1_fused_0 + vrv0_rv1_fused_1) % T.int64(2), v_ax4])
            for ax0, ax1, ax2, ax3, ax4, rv0_rv1_fused_1 in T.grid(T.int64(1), T.int64(8), T.int64(28), T.int64(28), T.int64(32), T.int64(1)):
                with T.block("pool_max"):
                    vrv0_rv1_fused_1, v_ax0, v_ax1, v_ax2, v_ax3, v_ax4 = T.axis.remap("RSSSSS", [rv0_rv1_fused_1, ax0, ax1, ax2, ax3, ax4])
                    T.reads(pool_max_rf[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4, vrv0_rv1_fused_1])
                    T.writes(pool_max[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                    T.block_attr({"meta_schedule.random_compute_producer": 1})
                    with T.init():
                        pool_max[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.float32(-3.4028234663852886e+38)
                    pool_max[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.max(pool_max[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], pool_max_rf[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4, vrv0_rv1_fused_1])
b0 = sch.get_block(name="pool_max", func_name="main")
b1 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b0, ann_key="schedule_rule")
l2, l3, l4, l5, l6, l7, l8 = sch.get_loops(block=b0)
l9 = sch.fuse(l7, l8, preserve_unit_iters=True)
v10, v11 = sch.sample_perfect_tile(loop=l9, n=2, max_innermost_factor=64, decision=[4, 1])
l12, l13 = sch.split(loop=l9, factors=[v10, v11], preserve_unit_iters=True)
b14 = sch.rfactor(loop=l13, factor_axis=5)
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.random_compute_producer", ann_val=1)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.vectorize", ann_val=64)
v15 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=2)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.unroll_explicit", ann_val=v15)
2024-04-30 05:29:52 [INFO] [task_scheduler.cc:170] Design space #2:
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(8), T.int64(56), T.int64(56), T.int64(32)), "float32"), pool_max: T.Buffer((T.int64(1), T.int64(8), T.int64(28), T.int64(28), T.int64(32)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        with T.block("root"):
            T.reads()
            T.writes()
            T.block_attr({"meta_schedule.parallel": 768, "meta_schedule.unroll_explicit": 512, "meta_schedule.vectorize": 64})
            for ax0, ax1, ax2, ax3, ax4, rv0, rv1 in T.grid(T.int64(1), T.int64(8), T.int64(28), T.int64(28), T.int64(32), T.int64(2), T.int64(2)):
                with T.block("pool_max"):
                    v_ax0, v_ax1, v_ax2, v_ax3, v_ax4, v_rv0, v_rv1 = T.axis.remap("SSSSSRR", [ax0, ax1, ax2, ax3, ax4, rv0, rv1])
                    T.reads(p0[v_ax0, v_ax1, v_ax2 * T.int64(2) + v_rv0, v_ax3 * T.int64(2) + v_rv1, v_ax4])
                    T.writes(pool_max[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                    with T.init():
                        pool_max[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.float32(-3.4028234663852886e+38)
                    pool_max[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.max(pool_max[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], p0[v_ax0, v_ax1, v_ax2 * T.int64(2) + v_rv0, v_ax3 * T.int64(2) + v_rv1, v_ax4])
b0 = sch.get_block(name="pool_max", func_name="main")
b1 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b0, ann_key="schedule_rule")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.vectorize", ann_val=64)
v2 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.unroll_explicit", ann_val=v2)
2024-04-30 05:57:55 [INFO] [evolutionary_search.cc:713] Generating candidates......
2024-04-30 05:57:55 [INFO] [evolutionary_search.cc:715] Picked top 0 candidate(s) from database
2024-04-30 05:57:56 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x3af55f8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x34e2848)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x30ab498)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x3b99968)]: 0 failure(s)
2024-04-30 05:57:56 [INFO] [evolutionary_search.cc:723] Sampled 512 candidate(s)
2024-04-30 05:57:57 [INFO] [evolutionary_search.cc:621] Evolve iter #0 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x3af55f8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x34e2848)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x30ab498)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x3b99968)]: 0 failure(s)
2024-04-30 05:57:58 [INFO] [evolutionary_search.cc:621] Evolve iter #1 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x3af55f8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x34e2848)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x30ab498)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x3b99968)]: 0 failure(s)
2024-04-30 05:57:59 [INFO] [evolutionary_search.cc:621] Evolve iter #2 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x3af55f8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x34e2848)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x30ab498)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x3b99968)]: 0 failure(s)
2024-04-30 05:58:01 [INFO] [evolutionary_search.cc:621] Evolve iter #3 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x3af55f8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x34e2848)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x30ab498)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x3b99968)]: 0 failure(s)
2024-04-30 05:58:02 [INFO] [evolutionary_search.cc:649] Scores of the best 48 candidates:
[1 : 16]:	0.9929  0.9636  0.9039  0.8467  0.8366  0.8308  0.8270  0.8247  0.7608  0.7248  0.7180  0.7044  0.7019  0.6883  0.6677  0.6549
[17 : 32]:	0.6516  0.6057  0.5904  0.5543  0.4787  0.4544  0.4416  0.4159  0.3947  0.3758  0.3747  0.3422  0.3278  0.3188  0.3146  0.3087
[33 : 48]:	0.2978  0.2780  0.2502  0.2440  0.2410  0.2390  0.2274  0.2129  0.1925  0.1576  0.0895  0.0688  0.0538  0.0418  0.0339  0.0195
2024-04-30 05:58:02 [INFO] [evolutionary_search.cc:727] Got 48 candidate(s) with evolutionary search
2024-04-30 05:58:02 [INFO] [evolutionary_search.cc:730] Sending 48 candidates(s) for measurement
2024-04-30 06:42:18 [INFO] [task_scheduler.cc:131] [Task #12: fused_nn_max_pool2d_2] Trial #1: GFLOPs: 7.8904. Time: 101.7455 us. Best GFLOPs: 7.8904
2024-04-30 06:42:18 [INFO] [task_scheduler.cc:131] [Task #12: fused_nn_max_pool2d_2] Trial #2: GFLOPs: 19.4936. Time: 41.1835 us. Best GFLOPs: 19.4936
2024-04-30 06:42:18 [INFO] [task_scheduler.cc:131] [Task #12: fused_nn_max_pool2d_2] Trial #3: GFLOPs: 8.9402. Time: 89.7983 us. Best GFLOPs: 19.4936
2024-04-30 06:42:18 [INFO] [task_scheduler.cc:131] [Task #12: fused_nn_max_pool2d_2] Trial #4: GFLOPs: 13.7282. Time: 58.4792 us. Best GFLOPs: 19.4936
2024-04-30 06:42:18 [INFO] [task_scheduler.cc:131] [Task #12: fused_nn_max_pool2d_2] Trial #5: GFLOPs: 23.3526. Time: 34.3780 us. Best GFLOPs: 23.3526
2024-04-30 06:42:18 [INFO] [task_scheduler.cc:131] [Task #12: fused_nn_max_pool2d_2] Trial #6: GFLOPs: 26.2817. Time: 30.5466 us. Best GFLOPs: 26.2817
2024-04-30 06:42:18 [INFO] [task_scheduler.cc:131] [Task #12: fused_nn_max_pool2d_2] Trial #7: GFLOPs: 26.6400. Time: 30.1357 us. Best GFLOPs: 26.6400
2024-04-30 06:42:18 [INFO] [task_scheduler.cc:131] [Task #12: fused_nn_max_pool2d_2] Trial #8: GFLOPs: 29.2902. Time: 27.4090 us. Best GFLOPs: 29.2902
2024-04-30 06:42:18 [INFO] [task_scheduler.cc:131] [Task #12: fused_nn_max_pool2d_2] Trial #9: GFLOPs: 30.3398. Time: 26.4608 us. Best GFLOPs: 30.3398
2024-04-30 06:42:18 [INFO] [task_scheduler.cc:131] [Task #12: fused_nn_max_pool2d_2] Trial #10: GFLOPs: 16.4293. Time: 48.8650 us. Best GFLOPs: 30.3398
2024-04-30 06:42:18 [INFO] [task_scheduler.cc:131] [Task #12: fused_nn_max_pool2d_2] Trial #11: GFLOPs: 11.6494. Time: 68.9148 us. Best GFLOPs: 30.3398
2024-04-30 06:42:18 [INFO] [task_scheduler.cc:131] [Task #12: fused_nn_max_pool2d_2] Trial #12: GFLOPs: 5.4181. Time: 148.1718 us. Best GFLOPs: 30.3398
2024-04-30 06:42:18 [INFO] [task_scheduler.cc:131] [Task #12: fused_nn_max_pool2d_2] Trial #13: GFLOPs: 13.0860. Time: 61.3492 us. Best GFLOPs: 30.3398
2024-04-30 06:42:18 [INFO] [task_scheduler.cc:131] [Task #12: fused_nn_max_pool2d_2] Trial #14: GFLOPs: 13.5343. Time: 59.3173 us. Best GFLOPs: 30.3398
2024-04-30 06:42:18 [INFO] [task_scheduler.cc:131] [Task #12: fused_nn_max_pool2d_2] Trial #15: GFLOPs: 10.1401. Time: 79.1724 us. Best GFLOPs: 30.3398
2024-04-30 06:42:18 [INFO] [task_scheduler.cc:131] [Task #12: fused_nn_max_pool2d_2] Trial #16: GFLOPs: 52.7488. Time: 15.2196 us. Best GFLOPs: 52.7488
2024-04-30 06:42:18 [INFO] [task_scheduler.cc:131] [Task #12: fused_nn_max_pool2d_2] Trial #17: GFLOPs: 18.9663. Time: 42.3286 us. Best GFLOPs: 52.7488
2024-04-30 06:42:18 [INFO] [task_scheduler.cc:131] [Task #12: fused_nn_max_pool2d_2] Trial #18: GFLOPs: 18.5125. Time: 43.3660 us. Best GFLOPs: 52.7488
2024-04-30 06:42:18 [INFO] [task_scheduler.cc:131] [Task #12: fused_nn_max_pool2d_2] Trial #19: GFLOPs: 17.1249. Time: 46.8799 us. Best GFLOPs: 52.7488
2024-04-30 06:42:18 [INFO] [task_scheduler.cc:131] [Task #12: fused_nn_max_pool2d_2] Trial #20: GFLOPs: 55.2747. Time: 14.5241 us. Best GFLOPs: 55.2747
2024-04-30 06:42:18 [INFO] [task_scheduler.cc:131] [Task #12: fused_nn_max_pool2d_2] Trial #21: GFLOPs: 6.0276. Time: 133.1896 us. Best GFLOPs: 55.2747
2024-04-30 06:42:18 [INFO] [task_scheduler.cc:131] [Task #12: fused_nn_max_pool2d_2] Trial #22: GFLOPs: 51.1178. Time: 15.7052 us. Best GFLOPs: 55.2747
2024-04-30 06:42:18 [INFO] [task_scheduler.cc:131] [Task #12: fused_nn_max_pool2d_2] Trial #23: GFLOPs: 13.6192. Time: 58.9472 us. Best GFLOPs: 55.2747
2024-04-30 06:42:18 [INFO] [task_scheduler.cc:131] [Task #12: fused_nn_max_pool2d_2] Trial #24: GFLOPs: 17.3786. Time: 46.1955 us. Best GFLOPs: 55.2747
2024-04-30 06:42:18 [INFO] [task_scheduler.cc:131] [Task #12: fused_nn_max_pool2d_2] Trial #25: GFLOPs: 14.5161. Time: 55.3054 us. Best GFLOPs: 55.2747
2024-04-30 06:42:18 [INFO] [task_scheduler.cc:131] [Task #12: fused_nn_max_pool2d_2] Trial #26: GFLOPs: 9.7975. Time: 81.9410 us. Best GFLOPs: 55.2747
2024-04-30 06:42:18 [INFO] [task_scheduler.cc:131] [Task #12: fused_nn_max_pool2d_2] Trial #27: GFLOPs: 3.4067. Time: 235.6595 us. Best GFLOPs: 55.2747
2024-04-30 06:42:18 [INFO] [task_scheduler.cc:131] [Task #12: fused_nn_max_pool2d_2] Trial #28: GFLOPs: 10.0547. Time: 79.8449 us. Best GFLOPs: 55.2747
2024-04-30 06:42:18 [INFO] [task_scheduler.cc:131] [Task #12: fused_nn_max_pool2d_2] Trial #29: GFLOPs: 26.3443. Time: 30.4739 us. Best GFLOPs: 55.2747
2024-04-30 06:42:18 [INFO] [task_scheduler.cc:131] [Task #12: fused_nn_max_pool2d_2] Trial #30: GFLOPs: 25.7408. Time: 31.1885 us. Best GFLOPs: 55.2747
2024-04-30 06:42:18 [INFO] [task_scheduler.cc:131] [Task #12: fused_nn_max_pool2d_2] Trial #31: GFLOPs: 26.4639. Time: 30.3363 us. Best GFLOPs: 55.2747
2024-04-30 06:42:18 [INFO] [task_scheduler.cc:131] [Task #12: fused_nn_max_pool2d_2] Trial #32: GFLOPs: 11.8926. Time: 67.5055 us. Best GFLOPs: 55.2747
2024-04-30 06:42:18 [INFO] [task_scheduler.cc:131] [Task #12: fused_nn_max_pool2d_2] Trial #33: GFLOPs: 28.9960. Time: 27.6871 us. Best GFLOPs: 55.2747
2024-04-30 06:42:18 [INFO] [task_scheduler.cc:131] [Task #12: fused_nn_max_pool2d_2] Trial #34: GFLOPs: 8.7977. Time: 91.2529 us. Best GFLOPs: 55.2747
2024-04-30 06:42:18 [INFO] [task_scheduler.cc:131] [Task #12: fused_nn_max_pool2d_2] Trial #35: GFLOPs: 16.9652. Time: 47.3213 us. Best GFLOPs: 55.2747
2024-04-30 06:42:18 [INFO] [task_scheduler.cc:131] [Task #12: fused_nn_max_pool2d_2] Trial #36: GFLOPs: 17.1001. Time: 46.9481 us. Best GFLOPs: 55.2747
2024-04-30 06:42:18 [INFO] [task_scheduler.cc:131] [Task #12: fused_nn_max_pool2d_2] Trial #37: GFLOPs: 20.6514. Time: 38.8746 us. Best GFLOPs: 55.2747
2024-04-30 06:42:18 [INFO] [task_scheduler.cc:131] [Task #12: fused_nn_max_pool2d_2] Trial #38: GFLOPs: 18.3993. Time: 43.6329 us. Best GFLOPs: 55.2747
2024-04-30 06:42:18 [INFO] [task_scheduler.cc:131] [Task #12: fused_nn_max_pool2d_2] Trial #39: GFLOPs: 8.9202. Time: 89.9999 us. Best GFLOPs: 55.2747
2024-04-30 06:42:18 [INFO] [task_scheduler.cc:131] [Task #12: fused_nn_max_pool2d_2] Trial #40: GFLOPs: 26.2762. Time: 30.5530 us. Best GFLOPs: 55.2747
2024-04-30 06:42:18 [INFO] [task_scheduler.cc:131] [Task #12: fused_nn_max_pool2d_2] Trial #41: GFLOPs: 20.6236. Time: 38.9271 us. Best GFLOPs: 55.2747
2024-04-30 06:42:18 [INFO] [task_scheduler.cc:131] [Task #12: fused_nn_max_pool2d_2] Trial #42: GFLOPs: 26.0571. Time: 30.8099 us. Best GFLOPs: 55.2747
2024-04-30 06:42:18 [INFO] [task_scheduler.cc:131] [Task #12: fused_nn_max_pool2d_2] Trial #43: GFLOPs: 10.0277. Time: 80.0599 us. Best GFLOPs: 55.2747
2024-04-30 06:42:18 [INFO] [task_scheduler.cc:131] [Task #12: fused_nn_max_pool2d_2] Trial #44: GFLOPs: 12.5486. Time: 63.9766 us. Best GFLOPs: 55.2747
2024-04-30 06:42:18 [INFO] [task_scheduler.cc:131] [Task #12: fused_nn_max_pool2d_2] Trial #45: GFLOPs: 23.8191. Time: 33.7047 us. Best GFLOPs: 55.2747
2024-04-30 06:42:18 [INFO] [task_scheduler.cc:131] [Task #12: fused_nn_max_pool2d_2] Trial #46: GFLOPs: 1.9581. Time: 409.9991 us. Best GFLOPs: 55.2747
2024-04-30 06:42:18 [INFO] [task_scheduler.cc:131] [Task #12: fused_nn_max_pool2d_2] Trial #47: GFLOPs: 23.8530. Time: 33.6568 us. Best GFLOPs: 55.2747
2024-04-30 06:42:18 [INFO] [task_scheduler.cc:131] [Task #12: fused_nn_max_pool2d_2] Trial #48: GFLOPs: 20.5441. Time: 39.0777 us. Best GFLOPs: 55.2747
