2024-04-30 05:30:17 [INFO] [task_scheduler.cc:160] Initializing Task #21: "fused_nn_max_pool2d_4"
2024-04-30 05:30:17 [INFO] [task_scheduler.cc:35] 
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(32), T.int64(14), T.int64(14), T.int64(16)), "float32"), pool_max: T.Buffer((T.int64(1), T.int64(32), T.int64(7), T.int64(7), T.int64(16)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        for ax0, ax1, ax2, ax3, ax4, rv0, rv1 in T.grid(T.int64(1), T.int64(32), T.int64(7), T.int64(7), T.int64(16), T.int64(2), T.int64(2)):
            with T.block("pool_max"):
                v_ax0, v_ax1, v_ax2, v_ax3, v_ax4, v_rv0, v_rv1 = T.axis.remap("SSSSSRR", [ax0, ax1, ax2, ax3, ax4, rv0, rv1])
                T.reads(p0[v_ax0, v_ax1, v_ax2 * T.int64(2) + v_rv0, v_ax3 * T.int64(2) + v_rv1, v_ax4])
                T.writes(pool_max[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                T.block_attr({"schedule_rule": "meta_schedule.pool_max"})
                with T.init():
                    pool_max[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.float32(-3.4028234663852886e+38)
                pool_max[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.max(pool_max[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], p0[v_ax0, v_ax1, v_ax2 * T.int64(2) + v_rv0, v_ax3 * T.int64(2) + v_rv1, v_ax4])
2024-04-30 05:30:17 [INFO] [task_scheduler.cc:164] Total 3 design space(s) generated
2024-04-30 05:30:17 [INFO] [task_scheduler.cc:170] Design space #0:
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(32), T.int64(14), T.int64(14), T.int64(16)), "float32"), pool_max: T.Buffer((T.int64(1), T.int64(32), T.int64(7), T.int64(7), T.int64(16)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        with T.block("root"):
            T.reads()
            T.writes()
            T.block_attr({"meta_schedule.parallel": 768, "meta_schedule.unroll_explicit": 512, "meta_schedule.vectorize": 64})
            pool_max_rf = T.alloc_buffer((T.int64(1), T.int64(32), T.int64(7), T.int64(7), T.int64(16), T.int64(4)))
            for ax0, ax1, ax2, ax3, ax4, rv0_rv1_fused_0, rv0_rv1_fused_1 in T.grid(T.int64(1), T.int64(32), T.int64(7), T.int64(7), T.int64(16), T.int64(4), T.int64(1)):
                with T.block("pool_max_rf"):
                    vrv0_rv1_fused_0, v_ax0, v_ax1, v_ax2, v_ax3, v_ax4, vrv0_rv1_fused_1 = T.axis.remap("SSSSSSR", [rv0_rv1_fused_0, ax0, ax1, ax2, ax3, ax4, rv0_rv1_fused_1])
                    T.reads(p0[v_ax0, v_ax1, v_ax2 * T.int64(2) + (vrv0_rv1_fused_0 + vrv0_rv1_fused_1) // T.int64(2), v_ax3 * T.int64(2) + (vrv0_rv1_fused_0 + vrv0_rv1_fused_1) % T.int64(2), v_ax4])
                    T.writes(pool_max_rf[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4, vrv0_rv1_fused_0])
                    with T.init():
                        pool_max_rf[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4, vrv0_rv1_fused_0] = T.float32(-3.4028234663852886e+38)
                    pool_max_rf[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4, vrv0_rv1_fused_0] = T.max(pool_max_rf[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4, vrv0_rv1_fused_0], p0[v_ax0, v_ax1, v_ax2 * T.int64(2) + (vrv0_rv1_fused_0 + vrv0_rv1_fused_1) // T.int64(2), v_ax3 * T.int64(2) + (vrv0_rv1_fused_0 + vrv0_rv1_fused_1) % T.int64(2), v_ax4])
            for ax0, ax1, ax2, ax3, ax4, rv0_rv1_fused_0 in T.grid(T.int64(1), T.int64(32), T.int64(7), T.int64(7), T.int64(16), T.int64(4)):
                with T.block("pool_max"):
                    vrv0_rv1_fused_0, v_ax0, v_ax1, v_ax2, v_ax3, v_ax4 = T.axis.remap("RSSSSS", [rv0_rv1_fused_0, ax0, ax1, ax2, ax3, ax4])
                    T.reads(pool_max_rf[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4, vrv0_rv1_fused_0])
                    T.writes(pool_max[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                    T.block_attr({"meta_schedule.random_compute_producer": 1})
                    with T.init():
                        pool_max[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.float32(-3.4028234663852886e+38)
                    pool_max[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.max(pool_max[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], pool_max_rf[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4, vrv0_rv1_fused_0])
b0 = sch.get_block(name="pool_max", func_name="main")
b1 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b0, ann_key="schedule_rule")
l2, l3, l4, l5, l6, l7, l8 = sch.get_loops(block=b0)
l9 = sch.fuse(l7, l8, preserve_unit_iters=True)
v10, v11 = sch.sample_perfect_tile(loop=l9, n=2, max_innermost_factor=64, decision=[4, 1])
l12, l13 = sch.split(loop=l9, factors=[v10, v11], preserve_unit_iters=True)
b14 = sch.rfactor(loop=l12, factor_axis=5)
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.random_compute_producer", ann_val=1)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.vectorize", ann_val=64)
v15 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.unroll_explicit", ann_val=v15)
2024-04-30 05:30:17 [INFO] [task_scheduler.cc:170] Design space #1:
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(32), T.int64(14), T.int64(14), T.int64(16)), "float32"), pool_max: T.Buffer((T.int64(1), T.int64(32), T.int64(7), T.int64(7), T.int64(16)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        with T.block("root"):
            T.reads()
            T.writes()
            T.block_attr({"meta_schedule.parallel": 768, "meta_schedule.unroll_explicit": 64, "meta_schedule.vectorize": 64})
            pool_max_rf = T.alloc_buffer((T.int64(1), T.int64(32), T.int64(7), T.int64(7), T.int64(16), T.int64(1)))
            for ax0, ax1, ax2, ax3, ax4, rv0_rv1_fused_0, rv0_rv1_fused_1 in T.grid(T.int64(1), T.int64(32), T.int64(7), T.int64(7), T.int64(16), T.int64(4), T.int64(1)):
                with T.block("pool_max_rf"):
                    vrv0_rv1_fused_1, v_ax0, v_ax1, v_ax2, v_ax3, v_ax4, vrv0_rv1_fused_0 = T.axis.remap("SSSSSSR", [rv0_rv1_fused_1, ax0, ax1, ax2, ax3, ax4, rv0_rv1_fused_0])
                    T.reads(p0[v_ax0, v_ax1, v_ax2 * T.int64(2) + (vrv0_rv1_fused_0 + vrv0_rv1_fused_1) // T.int64(2), v_ax3 * T.int64(2) + (vrv0_rv1_fused_0 + vrv0_rv1_fused_1) % T.int64(2), v_ax4])
                    T.writes(pool_max_rf[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4, vrv0_rv1_fused_1])
                    with T.init():
                        pool_max_rf[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4, vrv0_rv1_fused_1] = T.float32(-3.4028234663852886e+38)
                    pool_max_rf[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4, vrv0_rv1_fused_1] = T.max(pool_max_rf[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4, vrv0_rv1_fused_1], p0[v_ax0, v_ax1, v_ax2 * T.int64(2) + (vrv0_rv1_fused_0 + vrv0_rv1_fused_1) // T.int64(2), v_ax3 * T.int64(2) + (vrv0_rv1_fused_0 + vrv0_rv1_fused_1) % T.int64(2), v_ax4])
            for ax0, ax1, ax2, ax3, ax4, rv0_rv1_fused_1 in T.grid(T.int64(1), T.int64(32), T.int64(7), T.int64(7), T.int64(16), T.int64(1)):
                with T.block("pool_max"):
                    vrv0_rv1_fused_1, v_ax0, v_ax1, v_ax2, v_ax3, v_ax4 = T.axis.remap("RSSSSS", [rv0_rv1_fused_1, ax0, ax1, ax2, ax3, ax4])
                    T.reads(pool_max_rf[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4, vrv0_rv1_fused_1])
                    T.writes(pool_max[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                    T.block_attr({"meta_schedule.random_compute_producer": 1})
                    with T.init():
                        pool_max[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.float32(-3.4028234663852886e+38)
                    pool_max[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.max(pool_max[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], pool_max_rf[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4, vrv0_rv1_fused_1])
b0 = sch.get_block(name="pool_max", func_name="main")
b1 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b0, ann_key="schedule_rule")
l2, l3, l4, l5, l6, l7, l8 = sch.get_loops(block=b0)
l9 = sch.fuse(l7, l8, preserve_unit_iters=True)
v10, v11 = sch.sample_perfect_tile(loop=l9, n=2, max_innermost_factor=64, decision=[4, 1])
l12, l13 = sch.split(loop=l9, factors=[v10, v11], preserve_unit_iters=True)
b14 = sch.rfactor(loop=l13, factor_axis=5)
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.random_compute_producer", ann_val=1)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.vectorize", ann_val=64)
v15 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=2)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.unroll_explicit", ann_val=v15)
2024-04-30 05:30:17 [INFO] [task_scheduler.cc:170] Design space #2:
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(32), T.int64(14), T.int64(14), T.int64(16)), "float32"), pool_max: T.Buffer((T.int64(1), T.int64(32), T.int64(7), T.int64(7), T.int64(16)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        with T.block("root"):
            T.reads()
            T.writes()
            T.block_attr({"meta_schedule.parallel": 768, "meta_schedule.unroll_explicit": 0, "meta_schedule.vectorize": 64})
            for ax0, ax1, ax2, ax3, ax4, rv0, rv1 in T.grid(T.int64(1), T.int64(32), T.int64(7), T.int64(7), T.int64(16), T.int64(2), T.int64(2)):
                with T.block("pool_max"):
                    v_ax0, v_ax1, v_ax2, v_ax3, v_ax4, v_rv0, v_rv1 = T.axis.remap("SSSSSRR", [ax0, ax1, ax2, ax3, ax4, rv0, rv1])
                    T.reads(p0[v_ax0, v_ax1, v_ax2 * T.int64(2) + v_rv0, v_ax3 * T.int64(2) + v_rv1, v_ax4])
                    T.writes(pool_max[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                    with T.init():
                        pool_max[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.float32(-3.4028234663852886e+38)
                    pool_max[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.max(pool_max[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], p0[v_ax0, v_ax1, v_ax2 * T.int64(2) + v_rv0, v_ax3 * T.int64(2) + v_rv1, v_ax4])
b0 = sch.get_block(name="pool_max", func_name="main")
b1 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b0, ann_key="schedule_rule")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.vectorize", ann_val=64)
v2 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=0)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.unroll_explicit", ann_val=v2)
2024-04-30 06:13:40 [INFO] [evolutionary_search.cc:713] Generating candidates......
2024-04-30 06:13:40 [INFO] [evolutionary_search.cc:715] Picked top 0 candidate(s) from database
2024-04-30 06:13:41 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x3a97788)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x353d2d8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x3363788)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x3609cc8)]: 0 failure(s)
2024-04-30 06:13:41 [INFO] [evolutionary_search.cc:723] Sampled 512 candidate(s)
2024-04-30 06:13:42 [INFO] [evolutionary_search.cc:621] Evolve iter #0 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x3a97788)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x353d2d8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x3363788)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x3609cc8)]: 0 failure(s)
2024-04-30 06:13:43 [INFO] [evolutionary_search.cc:621] Evolve iter #1 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x3a97788)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x353d2d8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x3363788)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x3609cc8)]: 0 failure(s)
2024-04-30 06:13:45 [INFO] [evolutionary_search.cc:621] Evolve iter #2 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x3a97788)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x353d2d8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x3363788)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x3609cc8)]: 0 failure(s)
2024-04-30 06:13:46 [INFO] [evolutionary_search.cc:621] Evolve iter #3 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x3a97788)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x353d2d8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x3363788)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x3609cc8)]: 0 failure(s)
2024-04-30 06:13:47 [INFO] [evolutionary_search.cc:649] Scores of the best 49 candidates:
[1 : 16]:	0.9581  0.9332  0.9261  0.8628  0.8614  0.8426  0.8127  0.7839  0.7527  0.7088  0.6911  0.6712  0.6234  0.6053  0.5690  0.5563
[17 : 32]:	0.4893  0.4887  0.4791  0.4745  0.4664  0.4598  0.4350  0.4067  0.4055  0.3997  0.3757  0.3631  0.3418  0.3306  0.3082  0.3006
[33 : 48]:	0.2999  0.2711  0.2642  0.2508  0.2448  0.2175  0.1540  0.1398  0.0872  0.0846  0.0840  0.0321  0.0300  0.0263  0.0256  0.0162
[49 : 49]:	0.0089
2024-04-30 06:13:47 [INFO] [evolutionary_search.cc:727] Got 49 candidate(s) with evolutionary search
2024-04-30 06:13:47 [INFO] [evolutionary_search.cc:730] Sending 49 candidates(s) for measurement
2024-04-30 06:42:39 [INFO] [task_scheduler.cc:131] [Task #21: fused_nn_max_pool2d_4] Trial #1: GFLOPs: 1.8224. Time: 55.0660 us. Best GFLOPs: 1.8224
2024-04-30 06:42:39 [INFO] [task_scheduler.cc:131] [Task #21: fused_nn_max_pool2d_4] Trial #2: GFLOPs: 3.7660. Time: 26.6466 us. Best GFLOPs: 3.7660
2024-04-30 06:42:39 [INFO] [task_scheduler.cc:131] [Task #21: fused_nn_max_pool2d_4] Trial #3: GFLOPs: 4.2321. Time: 23.7123 us. Best GFLOPs: 4.2321
2024-04-30 06:42:39 [INFO] [task_scheduler.cc:131] [Task #21: fused_nn_max_pool2d_4] Trial #4: GFLOPs: 3.4233. Time: 29.3144 us. Best GFLOPs: 4.2321
2024-04-30 06:42:39 [INFO] [task_scheduler.cc:131] [Task #21: fused_nn_max_pool2d_4] Trial #5: GFLOPs: 9.0389. Time: 11.1022 us. Best GFLOPs: 9.0389
2024-04-30 06:42:39 [INFO] [task_scheduler.cc:131] [Task #21: fused_nn_max_pool2d_4] Trial #6: GFLOPs: 4.6095. Time: 21.7707 us. Best GFLOPs: 9.0389
2024-04-30 06:42:39 [INFO] [task_scheduler.cc:131] [Task #21: fused_nn_max_pool2d_4] Trial #7: GFLOPs: 4.5442. Time: 22.0834 us. Best GFLOPs: 9.0389
2024-04-30 06:42:39 [INFO] [task_scheduler.cc:131] [Task #21: fused_nn_max_pool2d_4] Trial #8: GFLOPs: 8.7672. Time: 11.4464 us. Best GFLOPs: 9.0389
2024-04-30 06:42:39 [INFO] [task_scheduler.cc:131] [Task #21: fused_nn_max_pool2d_4] Trial #9: GFLOPs: 4.6634. Time: 21.5191 us. Best GFLOPs: 9.0389
2024-04-30 06:42:39 [INFO] [task_scheduler.cc:131] [Task #21: fused_nn_max_pool2d_4] Trial #10: GFLOPs: 4.6828. Time: 21.4299 us. Best GFLOPs: 9.0389
2024-04-30 06:42:39 [INFO] [task_scheduler.cc:131] [Task #21: fused_nn_max_pool2d_4] Trial #11: GFLOPs: 3.1320. Time: 32.0406 us. Best GFLOPs: 9.0389
2024-04-30 06:42:39 [INFO] [task_scheduler.cc:131] [Task #21: fused_nn_max_pool2d_4] Trial #12: GFLOPs: 3.7393. Time: 26.8370 us. Best GFLOPs: 9.0389
2024-04-30 06:42:39 [INFO] [task_scheduler.cc:121] [Task #21: fused_nn_max_pool2d_4] Trial #13: Error in building:
LocalBuilder: Timeout, killed after 30.0 seconds
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(32), T.int64(14), T.int64(14), T.int64(16)), "float32"), pool_max: T.Buffer((T.int64(1), T.int64(32), T.int64(7), T.int64(7), T.int64(16)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        pool_max_rf = T.alloc_buffer((T.int64(1), T.int64(32), T.int64(7), T.int64(7), T.int64(16), T.int64(2)))
        for ax0_ax1_fused in T.parallel(T.int64(32), annotations={"pragma_auto_unroll_max_step": 512, "pragma_unroll_explicit": 1}):
            for ax2, ax3, ax4 in T.grid(T.int64(7), T.int64(7), T.int64(16)):
                for rv0_rv1_fused_1_fused_init in T.vectorized(T.int64(2)):
                    with T.block("pool_max_rf_init"):
                        vrv0_rv1_fused_1 = T.axis.spatial(T.int64(2), rv0_rv1_fused_1_fused_init)
                        v_ax0 = T.axis.spatial(T.int64(1), T.int64(0))
                        v_ax1, v_ax2, v_ax3, v_ax4 = T.axis.remap("SSSS", [ax0_ax1_fused, ax2, ax3, ax4])
                        T.reads()
                        T.writes(pool_max_rf[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4, vrv0_rv1_fused_1])
                        pool_max_rf[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4, vrv0_rv1_fused_1] = T.float32(-3.4028234663852886e+38)
                for rv0_rv1_fused_0 in range(T.int64(2)):
                    for rv0_rv1_fused_1_fused in T.vectorized(T.int64(2)):
                        with T.block("pool_max_rf_update"):
                            vrv0_rv1_fused_1 = T.axis.spatial(T.int64(2), rv0_rv1_fused_1_fused)
                            v_ax0 = T.axis.spatial(T.int64(1), T.int64(0))
                            v_ax1, v_ax2, v_ax3, v_ax4, vrv0_rv1_fused_0 = T.axis.remap("SSSSR", [ax0_ax1_fused, ax2, ax3, ax4, rv0_rv1_fused_0])
                            T.reads(pool_max_rf[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4, vrv0_rv1_fused_1], p0[v_ax0, v_ax1, v_ax2 * T.int64(2) + (vrv0_rv1_fused_0 * T.int64(2) + vrv0_rv1_fused_1) // T.int64(2), v_ax3 * T.int64(2) + (vrv0_rv1_fused_0 * T.int64(2) + vrv0_rv1_fused_1) % T.int64(2), v_ax4])
                            T.writes(pool_max_rf[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4, vrv0_rv1_fused_1])
                            pool_max_rf[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4, vrv0_rv1_fused_1] = T.max(pool_max_rf[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4, vrv0_rv1_fused_1], p0[v_ax0, v_ax1, v_ax2 * T.int64(2) + (vrv0_rv1_fused_0 * T.int64(2) + vrv0_rv1_fused_1) // T.int64(2), v_ax3 * T.int64(2) + (vrv0_rv1_fused_0 * T.int64(2) + vrv0_rv1_fused_1) % T.int64(2), v_ax4])
        for ax0_ax1_fused in T.parallel(T.int64(32), annotations={"pragma_auto_unroll_max_step": 512, "pragma_unroll_explicit": 1}):
            for ax2, ax3, ax4 in T.grid(T.int64(7), T.int64(7), T.int64(16)):
                with T.block("pool_max_init"):
                    v_ax0 = T.axis.spatial(T.int64(1), T.int64(0))
                    v_ax1, v_ax2, v_ax3, v_ax4 = T.axis.remap("SSSS", [ax0_ax1_fused, ax2, ax3, ax4])
                    T.reads()
                    T.writes(pool_max[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                    T.block_attr({"meta_schedule.random_compute_producer": 1})
                    pool_max[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.float32(-3.4028234663852886e+38)
                for rv0_rv1_fused_1 in range(T.int64(2)):
                    with T.block("pool_max_update"):
                        vrv0_rv1_fused_1 = T.axis.reduce(T.int64(2), rv0_rv1_fused_1)
                        v_ax0 = T.axis.spatial(T.int64(1), T.int64(0))
                        v_ax1, v_ax2, v_ax3, v_ax4 = T.axis.remap("SSSS", [ax0_ax1_fused, ax2, ax3, ax4])
                        T.reads(pool_max[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], pool_max_rf[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4, vrv0_rv1_fused_1])
                        T.writes(pool_max[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                        T.block_attr({"meta_schedule.random_compute_producer": 1})
                        pool_max[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.max(pool_max[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], pool_max_rf[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4, vrv0_rv1_fused_1])
b0 = sch.get_block(name="pool_max", func_name="main")
b1 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b0, ann_key="schedule_rule")
l2, l3, l4, l5, l6, l7, l8 = sch.get_loops(block=b0)
l9 = sch.fuse(l7, l8, preserve_unit_iters=True)
v10, v11 = sch.sample_perfect_tile(loop=l9, n=2, max_innermost_factor=64, decision=[2, 2])
l12, l13 = sch.split(loop=l9, factors=[v10, v11], preserve_unit_iters=True)
b14 = sch.rfactor(loop=l13, factor_axis=5)
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.random_compute_producer", ann_val=1)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.parallel", ann_val=1)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.vectorize", ann_val=64)
v15 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.unroll_explicit", ann_val=v15)
sch.enter_postproc()
b16 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b16, ann_key="meta_schedule.parallel")
sch.unannotate(block_or_loop=b16, ann_key="meta_schedule.vectorize")
sch.unannotate(block_or_loop=b16, ann_key="meta_schedule.unroll_explicit")
b17, b18 = sch.get_child_blocks(b16)
l19, l20, l21, l22, l23, l24, l25 = sch.get_loops(block=b17)
l26 = sch.fuse(l19, l20, preserve_unit_iters=True)
sch.parallel(loop=l26)
l27 = sch.fuse(l25, preserve_unit_iters=True)
sch.vectorize(loop=l27)
sch.annotate(block_or_loop=l26, ann_key="pragma_auto_unroll_max_step", ann_val=512)
sch.annotate(block_or_loop=l26, ann_key="pragma_unroll_explicit", ann_val=1)
l28, l29, l30, l31, l32, l33 = sch.get_loops(block=b18)
l34 = sch.fuse(l28, l29, preserve_unit_iters=True)
sch.parallel(loop=l34)
sch.annotate(block_or_loop=l34, ann_key="pragma_auto_unroll_max_step", ann_val=512)
sch.annotate(block_or_loop=l34, ann_key="pragma_unroll_explicit", ann_val=1)
b35 = sch.get_block(name="pool_max_rf", func_name="main")
l36, l37, l38, l39, l40, l41 = sch.get_loops(block=b35)
b42 = sch.decompose_reduction(block=b35, loop=l40)
b43 = sch.get_block(name="pool_max", func_name="main")
l44, l45, l46, l47, l48 = sch.get_loops(block=b43)
b49 = sch.decompose_reduction(block=b43, loop=l48)
2024-04-30 06:42:39 [INFO] [task_scheduler.cc:131] [Task #21: fused_nn_max_pool2d_4] Trial #14: GFLOPs: 4.5280. Time: 22.1627 us. Best GFLOPs: 9.0389
2024-04-30 06:42:39 [INFO] [task_scheduler.cc:131] [Task #21: fused_nn_max_pool2d_4] Trial #15: GFLOPs: 3.7886. Time: 26.4878 us. Best GFLOPs: 9.0389
2024-04-30 06:42:39 [INFO] [task_scheduler.cc:131] [Task #21: fused_nn_max_pool2d_4] Trial #16: GFLOPs: 5.0519. Time: 19.8642 us. Best GFLOPs: 9.0389
2024-04-30 06:42:39 [INFO] [task_scheduler.cc:131] [Task #21: fused_nn_max_pool2d_4] Trial #17: GFLOPs: 3.2022. Time: 31.3384 us. Best GFLOPs: 9.0389
2024-04-30 06:42:39 [INFO] [task_scheduler.cc:131] [Task #21: fused_nn_max_pool2d_4] Trial #18: GFLOPs: 1.6912. Time: 59.3374 us. Best GFLOPs: 9.0389
2024-04-30 06:42:39 [INFO] [task_scheduler.cc:131] [Task #21: fused_nn_max_pool2d_4] Trial #19: GFLOPs: 3.9713. Time: 25.2693 us. Best GFLOPs: 9.0389
2024-04-30 06:42:39 [INFO] [task_scheduler.cc:131] [Task #21: fused_nn_max_pool2d_4] Trial #20: GFLOPs: 3.5200. Time: 28.5091 us. Best GFLOPs: 9.0389
2024-04-30 06:42:39 [INFO] [task_scheduler.cc:131] [Task #21: fused_nn_max_pool2d_4] Trial #21: GFLOPs: 2.4458. Time: 41.0296 us. Best GFLOPs: 9.0389
2024-04-30 06:42:39 [INFO] [task_scheduler.cc:131] [Task #21: fused_nn_max_pool2d_4] Trial #22: GFLOPs: 3.8414. Time: 26.1241 us. Best GFLOPs: 9.0389
2024-04-30 06:42:39 [INFO] [task_scheduler.cc:131] [Task #21: fused_nn_max_pool2d_4] Trial #23: GFLOPs: 3.8763. Time: 25.8886 us. Best GFLOPs: 9.0389
2024-04-30 06:42:39 [INFO] [task_scheduler.cc:131] [Task #21: fused_nn_max_pool2d_4] Trial #24: GFLOPs: 4.5922. Time: 21.8525 us. Best GFLOPs: 9.0389
2024-04-30 06:42:39 [INFO] [task_scheduler.cc:131] [Task #21: fused_nn_max_pool2d_4] Trial #25: GFLOPs: 4.3456. Time: 23.0929 us. Best GFLOPs: 9.0389
2024-04-30 06:42:39 [INFO] [task_scheduler.cc:131] [Task #21: fused_nn_max_pool2d_4] Trial #26: GFLOPs: 3.4598. Time: 29.0050 us. Best GFLOPs: 9.0389
2024-04-30 06:42:39 [INFO] [task_scheduler.cc:131] [Task #21: fused_nn_max_pool2d_4] Trial #27: GFLOPs: 3.0131. Time: 33.3055 us. Best GFLOPs: 9.0389
2024-04-30 06:42:39 [INFO] [task_scheduler.cc:131] [Task #21: fused_nn_max_pool2d_4] Trial #28: GFLOPs: 4.2725. Time: 23.4880 us. Best GFLOPs: 9.0389
2024-04-30 06:42:39 [INFO] [task_scheduler.cc:131] [Task #21: fused_nn_max_pool2d_4] Trial #29: GFLOPs: 4.7308. Time: 21.2125 us. Best GFLOPs: 9.0389
2024-04-30 06:42:39 [INFO] [task_scheduler.cc:131] [Task #21: fused_nn_max_pool2d_4] Trial #30: GFLOPs: 3.9138. Time: 25.6409 us. Best GFLOPs: 9.0389
2024-04-30 06:42:39 [INFO] [task_scheduler.cc:131] [Task #21: fused_nn_max_pool2d_4] Trial #31: GFLOPs: 3.8122. Time: 26.3242 us. Best GFLOPs: 9.0389
2024-04-30 06:42:39 [INFO] [task_scheduler.cc:131] [Task #21: fused_nn_max_pool2d_4] Trial #32: GFLOPs: 4.2359. Time: 23.6908 us. Best GFLOPs: 9.0389
2024-04-30 06:42:39 [INFO] [task_scheduler.cc:131] [Task #21: fused_nn_max_pool2d_4] Trial #33: GFLOPs: 4.6218. Time: 21.7128 us. Best GFLOPs: 9.0389
2024-04-30 06:42:39 [INFO] [task_scheduler.cc:131] [Task #21: fused_nn_max_pool2d_4] Trial #34: GFLOPs: 4.9165. Time: 20.4113 us. Best GFLOPs: 9.0389
2024-04-30 06:42:39 [INFO] [task_scheduler.cc:131] [Task #21: fused_nn_max_pool2d_4] Trial #35: GFLOPs: 4.4253. Time: 22.6767 us. Best GFLOPs: 9.0389
2024-04-30 06:42:39 [INFO] [task_scheduler.cc:131] [Task #21: fused_nn_max_pool2d_4] Trial #36: GFLOPs: 1.4593. Time: 68.7693 us. Best GFLOPs: 9.0389
2024-04-30 06:42:39 [INFO] [task_scheduler.cc:131] [Task #21: fused_nn_max_pool2d_4] Trial #37: GFLOPs: 4.4972. Time: 22.3143 us. Best GFLOPs: 9.0389
2024-04-30 06:42:39 [INFO] [task_scheduler.cc:131] [Task #21: fused_nn_max_pool2d_4] Trial #38: GFLOPs: 4.0597. Time: 24.7190 us. Best GFLOPs: 9.0389
2024-04-30 06:42:39 [INFO] [task_scheduler.cc:131] [Task #21: fused_nn_max_pool2d_4] Trial #39: GFLOPs: 4.0694. Time: 24.6600 us. Best GFLOPs: 9.0389
2024-04-30 06:42:39 [INFO] [task_scheduler.cc:131] [Task #21: fused_nn_max_pool2d_4] Trial #40: GFLOPs: 9.1272. Time: 10.9949 us. Best GFLOPs: 9.1272
2024-04-30 06:42:39 [INFO] [task_scheduler.cc:131] [Task #21: fused_nn_max_pool2d_4] Trial #41: GFLOPs: 4.2529. Time: 23.5961 us. Best GFLOPs: 9.1272
2024-04-30 06:42:39 [INFO] [task_scheduler.cc:131] [Task #21: fused_nn_max_pool2d_4] Trial #42: GFLOPs: 9.6589. Time: 10.3896 us. Best GFLOPs: 9.6589
2024-04-30 06:42:39 [INFO] [task_scheduler.cc:131] [Task #21: fused_nn_max_pool2d_4] Trial #43: GFLOPs: 4.2725. Time: 23.4879 us. Best GFLOPs: 9.6589
2024-04-30 06:42:39 [INFO] [task_scheduler.cc:131] [Task #21: fused_nn_max_pool2d_4] Trial #44: GFLOPs: 4.2681. Time: 23.5122 us. Best GFLOPs: 9.6589
2024-04-30 06:42:39 [INFO] [task_scheduler.cc:131] [Task #21: fused_nn_max_pool2d_4] Trial #45: GFLOPs: 4.2294. Time: 23.7272 us. Best GFLOPs: 9.6589
2024-04-30 06:42:39 [INFO] [task_scheduler.cc:131] [Task #21: fused_nn_max_pool2d_4] Trial #46: GFLOPs: 4.8660. Time: 20.6231 us. Best GFLOPs: 9.6589
2024-04-30 06:42:39 [INFO] [task_scheduler.cc:131] [Task #21: fused_nn_max_pool2d_4] Trial #47: GFLOPs: 4.1261. Time: 24.3212 us. Best GFLOPs: 9.6589
2024-04-30 06:42:39 [INFO] [task_scheduler.cc:131] [Task #21: fused_nn_max_pool2d_4] Trial #48: GFLOPs: 4.3621. Time: 23.0052 us. Best GFLOPs: 9.6589
2024-04-30 06:42:39 [INFO] [task_scheduler.cc:131] [Task #21: fused_nn_max_pool2d_4] Trial #49: GFLOPs: 4.6425. Time: 21.6161 us. Best GFLOPs: 9.6589
