2024-04-30 05:29:37 [INFO] [task_scheduler.cc:160] Initializing Task #7: "fused_nn_max_pool2d_1"
2024-04-30 05:29:37 [INFO] [task_scheduler.cc:35] 
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(2), T.int64(112), T.int64(112), T.int64(64)), "float32"), pool_max: T.Buffer((T.int64(1), T.int64(2), T.int64(56), T.int64(56), T.int64(64)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        for ax0, ax1, ax2, ax3, ax4, rv0, rv1 in T.grid(T.int64(1), T.int64(2), T.int64(56), T.int64(56), T.int64(64), T.int64(2), T.int64(2)):
            with T.block("pool_max"):
                v_ax0, v_ax1, v_ax2, v_ax3, v_ax4, v_rv0, v_rv1 = T.axis.remap("SSSSSRR", [ax0, ax1, ax2, ax3, ax4, rv0, rv1])
                T.reads(p0[v_ax0, v_ax1, v_ax2 * T.int64(2) + v_rv0, v_ax3 * T.int64(2) + v_rv1, v_ax4])
                T.writes(pool_max[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                T.block_attr({"schedule_rule": "meta_schedule.pool_max"})
                with T.init():
                    pool_max[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.float32(-3.4028234663852886e+38)
                pool_max[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.max(pool_max[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], p0[v_ax0, v_ax1, v_ax2 * T.int64(2) + v_rv0, v_ax3 * T.int64(2) + v_rv1, v_ax4])
2024-04-30 05:29:37 [INFO] [task_scheduler.cc:164] Total 3 design space(s) generated
2024-04-30 05:29:37 [INFO] [task_scheduler.cc:170] Design space #0:
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(2), T.int64(112), T.int64(112), T.int64(64)), "float32"), pool_max: T.Buffer((T.int64(1), T.int64(2), T.int64(56), T.int64(56), T.int64(64)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        with T.block("root"):
            T.reads()
            T.writes()
            T.block_attr({"meta_schedule.parallel": 768, "meta_schedule.unroll_explicit": 512, "meta_schedule.vectorize": 64})
            pool_max_rf = T.alloc_buffer((T.int64(1), T.int64(2), T.int64(56), T.int64(56), T.int64(64), T.int64(2)))
            for ax0, ax1, ax2, ax3, ax4, rv0_rv1_fused_0, rv0_rv1_fused_1 in T.grid(T.int64(1), T.int64(2), T.int64(56), T.int64(56), T.int64(64), T.int64(2), T.int64(2)):
                with T.block("pool_max_rf"):
                    vrv0_rv1_fused_0, v_ax0, v_ax1, v_ax2, v_ax3, v_ax4, vrv0_rv1_fused_1 = T.axis.remap("SSSSSSR", [rv0_rv1_fused_0, ax0, ax1, ax2, ax3, ax4, rv0_rv1_fused_1])
                    T.reads(p0[v_ax0, v_ax1, v_ax2 * T.int64(2) + (vrv0_rv1_fused_0 * T.int64(2) + vrv0_rv1_fused_1) // T.int64(2), v_ax3 * T.int64(2) + (vrv0_rv1_fused_0 * T.int64(2) + vrv0_rv1_fused_1) % T.int64(2), v_ax4])
                    T.writes(pool_max_rf[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4, vrv0_rv1_fused_0])
                    with T.init():
                        pool_max_rf[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4, vrv0_rv1_fused_0] = T.float32(-3.4028234663852886e+38)
                    pool_max_rf[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4, vrv0_rv1_fused_0] = T.max(pool_max_rf[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4, vrv0_rv1_fused_0], p0[v_ax0, v_ax1, v_ax2 * T.int64(2) + (vrv0_rv1_fused_0 * T.int64(2) + vrv0_rv1_fused_1) // T.int64(2), v_ax3 * T.int64(2) + (vrv0_rv1_fused_0 * T.int64(2) + vrv0_rv1_fused_1) % T.int64(2), v_ax4])
            for ax0, ax1, ax2, ax3, ax4, rv0_rv1_fused_0 in T.grid(T.int64(1), T.int64(2), T.int64(56), T.int64(56), T.int64(64), T.int64(2)):
                with T.block("pool_max"):
                    vrv0_rv1_fused_0, v_ax0, v_ax1, v_ax2, v_ax3, v_ax4 = T.axis.remap("RSSSSS", [rv0_rv1_fused_0, ax0, ax1, ax2, ax3, ax4])
                    T.reads(pool_max_rf[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4, vrv0_rv1_fused_0])
                    T.writes(pool_max[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                    T.block_attr({"meta_schedule.random_compute_producer": 1})
                    with T.init():
                        pool_max[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.float32(-3.4028234663852886e+38)
                    pool_max[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.max(pool_max[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], pool_max_rf[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4, vrv0_rv1_fused_0])
b0 = sch.get_block(name="pool_max", func_name="main")
b1 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b0, ann_key="schedule_rule")
l2, l3, l4, l5, l6, l7, l8 = sch.get_loops(block=b0)
l9 = sch.fuse(l7, l8, preserve_unit_iters=True)
v10, v11 = sch.sample_perfect_tile(loop=l9, n=2, max_innermost_factor=64, decision=[2, 2])
l12, l13 = sch.split(loop=l9, factors=[v10, v11], preserve_unit_iters=True)
b14 = sch.rfactor(loop=l12, factor_axis=5)
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.random_compute_producer", ann_val=1)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.vectorize", ann_val=64)
v15 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.unroll_explicit", ann_val=v15)
2024-04-30 05:29:37 [INFO] [task_scheduler.cc:170] Design space #1:
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(2), T.int64(112), T.int64(112), T.int64(64)), "float32"), pool_max: T.Buffer((T.int64(1), T.int64(2), T.int64(56), T.int64(56), T.int64(64)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        with T.block("root"):
            T.reads()
            T.writes()
            T.block_attr({"meta_schedule.parallel": 768, "meta_schedule.unroll_explicit": 64, "meta_schedule.vectorize": 64})
            pool_max_rf = T.alloc_buffer((T.int64(1), T.int64(2), T.int64(56), T.int64(56), T.int64(64), T.int64(2)))
            for ax0, ax1, ax2, ax3, ax4, rv0_rv1_fused_0, rv0_rv1_fused_1 in T.grid(T.int64(1), T.int64(2), T.int64(56), T.int64(56), T.int64(64), T.int64(2), T.int64(2)):
                with T.block("pool_max_rf"):
                    vrv0_rv1_fused_1, v_ax0, v_ax1, v_ax2, v_ax3, v_ax4, vrv0_rv1_fused_0 = T.axis.remap("SSSSSSR", [rv0_rv1_fused_1, ax0, ax1, ax2, ax3, ax4, rv0_rv1_fused_0])
                    T.reads(p0[v_ax0, v_ax1, v_ax2 * T.int64(2) + (vrv0_rv1_fused_0 * T.int64(2) + vrv0_rv1_fused_1) // T.int64(2), v_ax3 * T.int64(2) + (vrv0_rv1_fused_0 * T.int64(2) + vrv0_rv1_fused_1) % T.int64(2), v_ax4])
                    T.writes(pool_max_rf[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4, vrv0_rv1_fused_1])
                    with T.init():
                        pool_max_rf[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4, vrv0_rv1_fused_1] = T.float32(-3.4028234663852886e+38)
                    pool_max_rf[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4, vrv0_rv1_fused_1] = T.max(pool_max_rf[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4, vrv0_rv1_fused_1], p0[v_ax0, v_ax1, v_ax2 * T.int64(2) + (vrv0_rv1_fused_0 * T.int64(2) + vrv0_rv1_fused_1) // T.int64(2), v_ax3 * T.int64(2) + (vrv0_rv1_fused_0 * T.int64(2) + vrv0_rv1_fused_1) % T.int64(2), v_ax4])
            for ax0, ax1, ax2, ax3, ax4, rv0_rv1_fused_1 in T.grid(T.int64(1), T.int64(2), T.int64(56), T.int64(56), T.int64(64), T.int64(2)):
                with T.block("pool_max"):
                    vrv0_rv1_fused_1, v_ax0, v_ax1, v_ax2, v_ax3, v_ax4 = T.axis.remap("RSSSSS", [rv0_rv1_fused_1, ax0, ax1, ax2, ax3, ax4])
                    T.reads(pool_max_rf[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4, vrv0_rv1_fused_1])
                    T.writes(pool_max[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                    T.block_attr({"meta_schedule.random_compute_producer": 1})
                    with T.init():
                        pool_max[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.float32(-3.4028234663852886e+38)
                    pool_max[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.max(pool_max[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], pool_max_rf[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4, vrv0_rv1_fused_1])
b0 = sch.get_block(name="pool_max", func_name="main")
b1 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b0, ann_key="schedule_rule")
l2, l3, l4, l5, l6, l7, l8 = sch.get_loops(block=b0)
l9 = sch.fuse(l7, l8, preserve_unit_iters=True)
v10, v11 = sch.sample_perfect_tile(loop=l9, n=2, max_innermost_factor=64, decision=[2, 2])
l12, l13 = sch.split(loop=l9, factors=[v10, v11], preserve_unit_iters=True)
b14 = sch.rfactor(loop=l13, factor_axis=5)
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.random_compute_producer", ann_val=1)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.vectorize", ann_val=64)
v15 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=2)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.unroll_explicit", ann_val=v15)
2024-04-30 05:29:37 [INFO] [task_scheduler.cc:170] Design space #2:
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(2), T.int64(112), T.int64(112), T.int64(64)), "float32"), pool_max: T.Buffer((T.int64(1), T.int64(2), T.int64(56), T.int64(56), T.int64(64)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        with T.block("root"):
            T.reads()
            T.writes()
            T.block_attr({"meta_schedule.parallel": 768, "meta_schedule.unroll_explicit": 512, "meta_schedule.vectorize": 64})
            for ax0, ax1, ax2, ax3, ax4, rv0, rv1 in T.grid(T.int64(1), T.int64(2), T.int64(56), T.int64(56), T.int64(64), T.int64(2), T.int64(2)):
                with T.block("pool_max"):
                    v_ax0, v_ax1, v_ax2, v_ax3, v_ax4, v_rv0, v_rv1 = T.axis.remap("SSSSSRR", [ax0, ax1, ax2, ax3, ax4, rv0, rv1])
                    T.reads(p0[v_ax0, v_ax1, v_ax2 * T.int64(2) + v_rv0, v_ax3 * T.int64(2) + v_rv1, v_ax4])
                    T.writes(pool_max[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                    with T.init():
                        pool_max[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.float32(-3.4028234663852886e+38)
                    pool_max[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.max(pool_max[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], p0[v_ax0, v_ax1, v_ax2 * T.int64(2) + v_rv0, v_ax3 * T.int64(2) + v_rv1, v_ax4])
b0 = sch.get_block(name="pool_max", func_name="main")
b1 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b0, ann_key="schedule_rule")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.vectorize", ann_val=64)
v2 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.unroll_explicit", ann_val=v2)
2024-04-30 05:47:24 [INFO] [evolutionary_search.cc:713] Generating candidates......
2024-04-30 05:47:24 [INFO] [evolutionary_search.cc:715] Picked top 0 candidate(s) from database
2024-04-30 05:47:24 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x3714e58)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x337ec08)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x3c29078)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x3365c88)]: 0 failure(s)
2024-04-30 05:47:24 [INFO] [evolutionary_search.cc:723] Sampled 512 candidate(s)
2024-04-30 05:47:25 [INFO] [evolutionary_search.cc:621] Evolve iter #0 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x3714e58)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x337ec08)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x3c29078)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x3365c88)]: 0 failure(s)
2024-04-30 05:47:26 [INFO] [evolutionary_search.cc:621] Evolve iter #1 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x3714e58)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x337ec08)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x3c29078)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x3365c88)]: 0 failure(s)
2024-04-30 05:47:28 [INFO] [evolutionary_search.cc:621] Evolve iter #2 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x3714e58)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x337ec08)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x3c29078)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x3365c88)]: 0 failure(s)
2024-04-30 05:47:29 [INFO] [evolutionary_search.cc:621] Evolve iter #3 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x3714e58)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x337ec08)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x3c29078)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x3365c88)]: 0 failure(s)
2024-04-30 05:47:30 [INFO] [evolutionary_search.cc:649] Scores of the best 64 candidates:
[1 : 16]:	0.9908  0.9754  0.9631  0.9623  0.9157  0.9116  0.9029  0.9020  0.8897  0.8774  0.8757  0.8708  0.8673  0.8594  0.8558  0.8518
[17 : 32]:	0.8378  0.8361  0.8303  0.8236  0.8113  0.8089  0.8067  0.8053  0.7763  0.7755  0.7602  0.7317  0.7104  0.7033  0.6831  0.6695
[33 : 48]:	0.6035  0.5693  0.5595  0.5407  0.5398  0.5190  0.5152  0.5136  0.5016  0.4891  0.4525  0.4495  0.4209  0.3568  0.3014  0.2779
[49 : 64]:	0.2549  0.2539  0.2203  0.2135  0.2033  0.1927  0.1864  0.1706  0.1428  0.1387  0.1331  0.1259  0.1168  0.0609  0.0363  0.0310
2024-04-30 05:47:30 [INFO] [evolutionary_search.cc:727] Got 64 candidate(s) with evolutionary search
2024-04-30 05:47:30 [INFO] [evolutionary_search.cc:730] Sending 61 candidates(s) for measurement
2024-04-30 06:42:07 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_max_pool2d_1] Trial #1: GFLOPs: 6.7321. Time: 238.5023 us. Best GFLOPs: 6.7321
2024-04-30 06:42:07 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_max_pool2d_1] Trial #2: GFLOPs: 10.4483. Time: 153.6734 us. Best GFLOPs: 10.4483
2024-04-30 06:42:07 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_max_pool2d_1] Trial #3: GFLOPs: 0.5554. Time: 2890.7658 us. Best GFLOPs: 10.4483
2024-04-30 06:42:07 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_max_pool2d_1] Trial #4: GFLOPs: 12.0982. Time: 132.7164 us. Best GFLOPs: 12.0982
2024-04-30 06:42:07 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_max_pool2d_1] Trial #5: GFLOPs: 97.1113. Time: 16.5339 us. Best GFLOPs: 97.1113
2024-04-30 06:42:07 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_max_pool2d_1] Trial #6: GFLOPs: 44.3212. Time: 36.2272 us. Best GFLOPs: 97.1113
2024-04-30 06:42:07 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_max_pool2d_1] Trial #7: GFLOPs: 50.5084. Time: 31.7894 us. Best GFLOPs: 97.1113
2024-04-30 06:42:07 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_max_pool2d_1] Trial #8: GFLOPs: 13.8048. Time: 116.3100 us. Best GFLOPs: 97.1113
2024-04-30 06:42:07 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_max_pool2d_1] Trial #9: GFLOPs: 9.3764. Time: 171.2410 us. Best GFLOPs: 97.1113
2024-04-30 06:42:07 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_max_pool2d_1] Trial #10: GFLOPs: 47.3742. Time: 33.8925 us. Best GFLOPs: 97.1113
2024-04-30 06:42:07 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_max_pool2d_1] Trial #11: GFLOPs: 1.4376. Time: 1116.9175 us. Best GFLOPs: 97.1113
2024-04-30 06:42:07 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_max_pool2d_1] Trial #12: GFLOPs: 1.2094. Time: 1327.6527 us. Best GFLOPs: 97.1113
2024-04-30 06:42:07 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_max_pool2d_1] Trial #13: GFLOPs: 46.4643. Time: 34.5563 us. Best GFLOPs: 97.1113
2024-04-30 06:42:07 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_max_pool2d_1] Trial #14: GFLOPs: 10.0825. Time: 159.2497 us. Best GFLOPs: 97.1113
2024-04-30 06:42:07 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_max_pool2d_1] Trial #15: GFLOPs: 16.8810. Time: 95.1148 us. Best GFLOPs: 97.1113
2024-04-30 06:42:07 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_max_pool2d_1] Trial #16: GFLOPs: 22.4951. Time: 71.3771 us. Best GFLOPs: 97.1113
2024-04-30 06:42:07 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_max_pool2d_1] Trial #17: GFLOPs: 91.2662. Time: 17.5928 us. Best GFLOPs: 97.1113
2024-04-30 06:42:07 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_max_pool2d_1] Trial #18: GFLOPs: 49.6619. Time: 32.3313 us. Best GFLOPs: 97.1113
2024-04-30 06:42:07 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_max_pool2d_1] Trial #19: GFLOPs: 1.0212. Time: 1572.3750 us. Best GFLOPs: 97.1113
2024-04-30 06:42:07 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_max_pool2d_1] Trial #20: GFLOPs: 75.9395. Time: 21.1436 us. Best GFLOPs: 97.1113
2024-04-30 06:42:07 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_max_pool2d_1] Trial #21: GFLOPs: 23.6637. Time: 67.8520 us. Best GFLOPs: 97.1113
2024-04-30 06:42:07 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_max_pool2d_1] Trial #22: GFLOPs: 2.3866. Time: 672.7578 us. Best GFLOPs: 97.1113
2024-04-30 06:42:07 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_max_pool2d_1] Trial #23: GFLOPs: 1.4347. Time: 1119.1597 us. Best GFLOPs: 97.1113
2024-04-30 06:42:07 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_max_pool2d_1] Trial #24: GFLOPs: 23.8904. Time: 67.2082 us. Best GFLOPs: 97.1113
2024-04-30 06:42:07 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_max_pool2d_1] Trial #25: GFLOPs: 17.0594. Time: 94.1199 us. Best GFLOPs: 97.1113
2024-04-30 06:42:07 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_max_pool2d_1] Trial #26: GFLOPs: 7.4054. Time: 216.8197 us. Best GFLOPs: 97.1113
2024-04-30 06:42:07 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_max_pool2d_1] Trial #27: GFLOPs: 46.3005. Time: 34.6785 us. Best GFLOPs: 97.1113
2024-04-30 06:42:07 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_max_pool2d_1] Trial #28: GFLOPs: 20.2748. Time: 79.1934 us. Best GFLOPs: 97.1113
2024-04-30 06:42:07 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_max_pool2d_1] Trial #29: GFLOPs: 6.9428. Time: 231.2644 us. Best GFLOPs: 97.1113
2024-04-30 06:42:07 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_max_pool2d_1] Trial #30: GFLOPs: 9.9476. Time: 161.4094 us. Best GFLOPs: 97.1113
2024-04-30 06:42:07 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_max_pool2d_1] Trial #31: GFLOPs: 7.1253. Time: 225.3422 us. Best GFLOPs: 97.1113
2024-04-30 06:42:07 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_max_pool2d_1] Trial #32: GFLOPs: 9.3537. Time: 171.6578 us. Best GFLOPs: 97.1113
2024-04-30 06:42:07 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_max_pool2d_1] Trial #33: GFLOPs: 12.7745. Time: 125.6908 us. Best GFLOPs: 97.1113
2024-04-30 06:42:07 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_max_pool2d_1] Trial #34: GFLOPs: 23.1177. Time: 69.4545 us. Best GFLOPs: 97.1113
2024-04-30 06:42:07 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_max_pool2d_1] Trial #35: GFLOPs: 37.9155. Time: 42.3477 us. Best GFLOPs: 97.1113
2024-04-30 06:42:07 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_max_pool2d_1] Trial #36: GFLOPs: 14.4784. Time: 110.8984 us. Best GFLOPs: 97.1113
2024-04-30 06:42:07 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_max_pool2d_1] Trial #37: GFLOPs: 1.6599. Time: 967.3308 us. Best GFLOPs: 97.1113
2024-04-30 06:42:07 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_max_pool2d_1] Trial #38: GFLOPs: 30.9504. Time: 51.8776 us. Best GFLOPs: 97.1113
2024-04-30 06:42:07 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_max_pool2d_1] Trial #39: GFLOPs: 50.0000. Time: 32.1127 us. Best GFLOPs: 97.1113
2024-04-30 06:42:07 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_max_pool2d_1] Trial #40: GFLOPs: 43.5659. Time: 36.8553 us. Best GFLOPs: 97.1113
2024-04-30 06:42:07 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_max_pool2d_1] Trial #41: GFLOPs: 0.3220. Time: 4987.1321 us. Best GFLOPs: 97.1113
2024-04-30 06:42:07 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_max_pool2d_1] Trial #42: GFLOPs: 21.5679. Time: 74.4453 us. Best GFLOPs: 97.1113
2024-04-30 06:42:07 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_max_pool2d_1] Trial #43: GFLOPs: 26.9406. Time: 59.5990 us. Best GFLOPs: 97.1113
2024-04-30 06:42:07 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_max_pool2d_1] Trial #44: GFLOPs: 17.7764. Time: 90.3239 us. Best GFLOPs: 97.1113
2024-04-30 06:42:07 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_max_pool2d_1] Trial #45: GFLOPs: 43.3770. Time: 37.0157 us. Best GFLOPs: 97.1113
2024-04-30 06:42:07 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_max_pool2d_1] Trial #46: GFLOPs: 21.3741. Time: 75.1206 us. Best GFLOPs: 97.1113
2024-04-30 06:42:07 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_max_pool2d_1] Trial #47: GFLOPs: 28.8829. Time: 55.5912 us. Best GFLOPs: 97.1113
2024-04-30 06:42:07 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_max_pool2d_1] Trial #48: GFLOPs: 1.6562. Time: 969.4835 us. Best GFLOPs: 97.1113
2024-04-30 06:42:07 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_max_pool2d_1] Trial #49: GFLOPs: 49.8373. Time: 32.2175 us. Best GFLOPs: 97.1113
2024-04-30 06:42:07 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_max_pool2d_1] Trial #50: GFLOPs: 31.6204. Time: 50.7784 us. Best GFLOPs: 97.1113
2024-04-30 06:42:07 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_max_pool2d_1] Trial #51: GFLOPs: 19.8197. Time: 81.0119 us. Best GFLOPs: 97.1113
2024-04-30 06:42:07 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_max_pool2d_1] Trial #52: GFLOPs: 47.6324. Time: 33.7088 us. Best GFLOPs: 97.1113
2024-04-30 06:42:07 [INFO] [task_scheduler.cc:121] [Task #7: fused_nn_max_pool2d_1] Trial #53: Error in building:
LocalBuilder: Timeout, killed after 30.0 seconds
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(2), T.int64(112), T.int64(112), T.int64(64)), "float32"), pool_max: T.Buffer((T.int64(1), T.int64(2), T.int64(56), T.int64(56), T.int64(64)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        pool_max_rf = T.alloc_buffer((T.int64(1), T.int64(2), T.int64(56), T.int64(56), T.int64(64), T.int64(2)))
        for ax0_ax1_fused in T.parallel(T.int64(2), annotations={"pragma_auto_unroll_max_step": 512, "pragma_unroll_explicit": 1}):
            for ax2, ax3, ax4, rv0_rv1_fused_0 in T.grid(T.int64(56), T.int64(56), T.int64(64), T.int64(2)):
                with T.block("pool_max_rf_init"):
                    vrv0_rv1_fused_0 = T.axis.spatial(T.int64(2), rv0_rv1_fused_0)
                    v_ax0 = T.axis.spatial(T.int64(1), T.int64(0))
                    v_ax1, v_ax2, v_ax3, v_ax4 = T.axis.remap("SSSS", [ax0_ax1_fused, ax2, ax3, ax4])
                    T.reads()
                    T.writes(pool_max_rf[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4, vrv0_rv1_fused_0])
                    pool_max_rf[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4, vrv0_rv1_fused_0] = T.float32(-3.4028234663852886e+38)
                for rv0_rv1_fused_1 in range(T.int64(2)):
                    with T.block("pool_max_rf_update"):
                        vrv0_rv1_fused_0 = T.axis.spatial(T.int64(2), rv0_rv1_fused_0)
                        v_ax0 = T.axis.spatial(T.int64(1), T.int64(0))
                        v_ax1, v_ax2, v_ax3, v_ax4, vrv0_rv1_fused_1 = T.axis.remap("SSSSR", [ax0_ax1_fused, ax2, ax3, ax4, rv0_rv1_fused_1])
                        T.reads(pool_max_rf[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4, vrv0_rv1_fused_0], p0[v_ax0, v_ax1, v_ax2 * T.int64(2) + (vrv0_rv1_fused_0 * T.int64(2) + vrv0_rv1_fused_1) // T.int64(2), v_ax3 * T.int64(2) + (vrv0_rv1_fused_0 * T.int64(2) + vrv0_rv1_fused_1) % T.int64(2), v_ax4])
                        T.writes(pool_max_rf[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4, vrv0_rv1_fused_0])
                        pool_max_rf[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4, vrv0_rv1_fused_0] = T.max(pool_max_rf[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4, vrv0_rv1_fused_0], p0[v_ax0, v_ax1, v_ax2 * T.int64(2) + (vrv0_rv1_fused_0 * T.int64(2) + vrv0_rv1_fused_1) // T.int64(2), v_ax3 * T.int64(2) + (vrv0_rv1_fused_0 * T.int64(2) + vrv0_rv1_fused_1) % T.int64(2), v_ax4])
        for ax0_ax1_fused in T.parallel(T.int64(2), annotations={"pragma_auto_unroll_max_step": 512, "pragma_unroll_explicit": 1}):
            for ax2, ax3, ax4 in T.grid(T.int64(56), T.int64(56), T.int64(64)):
                with T.block("pool_max_init"):
                    v_ax0 = T.axis.spatial(T.int64(1), T.int64(0))
                    v_ax1, v_ax2, v_ax3, v_ax4 = T.axis.remap("SSSS", [ax0_ax1_fused, ax2, ax3, ax4])
                    T.reads()
                    T.writes(pool_max[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                    T.block_attr({"meta_schedule.random_compute_producer": 1})
                    pool_max[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.float32(-3.4028234663852886e+38)
                for rv0_rv1_fused_0 in range(T.int64(2)):
                    with T.block("pool_max_update"):
                        vrv0_rv1_fused_0 = T.axis.reduce(T.int64(2), rv0_rv1_fused_0)
                        v_ax0 = T.axis.spatial(T.int64(1), T.int64(0))
                        v_ax1, v_ax2, v_ax3, v_ax4 = T.axis.remap("SSSS", [ax0_ax1_fused, ax2, ax3, ax4])
                        T.reads(pool_max[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], pool_max_rf[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4, vrv0_rv1_fused_0])
                        T.writes(pool_max[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                        T.block_attr({"meta_schedule.random_compute_producer": 1})
                        pool_max[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.max(pool_max[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], pool_max_rf[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4, vrv0_rv1_fused_0])
b0 = sch.get_block(name="pool_max", func_name="main")
b1 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b0, ann_key="schedule_rule")
l2, l3, l4, l5, l6, l7, l8 = sch.get_loops(block=b0)
l9 = sch.fuse(l7, l8, preserve_unit_iters=True)
v10, v11 = sch.sample_perfect_tile(loop=l9, n=2, max_innermost_factor=64, decision=[2, 2])
l12, l13 = sch.split(loop=l9, factors=[v10, v11], preserve_unit_iters=True)
b14 = sch.rfactor(loop=l12, factor_axis=5)
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.random_compute_producer", ann_val=1)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.parallel", ann_val=1)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.vectorize", ann_val=64)
v15 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.unroll_explicit", ann_val=v15)
sch.enter_postproc()
b16 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b16, ann_key="meta_schedule.parallel")
sch.unannotate(block_or_loop=b16, ann_key="meta_schedule.vectorize")
sch.unannotate(block_or_loop=b16, ann_key="meta_schedule.unroll_explicit")
b17, b18 = sch.get_child_blocks(b16)
l19, l20, l21, l22, l23, l24, l25 = sch.get_loops(block=b17)
l26 = sch.fuse(l19, l20, preserve_unit_iters=True)
sch.parallel(loop=l26)
sch.annotate(block_or_loop=l26, ann_key="pragma_auto_unroll_max_step", ann_val=512)
sch.annotate(block_or_loop=l26, ann_key="pragma_unroll_explicit", ann_val=1)
l27, l28, l29, l30, l31, l32 = sch.get_loops(block=b18)
l33 = sch.fuse(l27, l28, preserve_unit_iters=True)
sch.parallel(loop=l33)
sch.annotate(block_or_loop=l33, ann_key="pragma_auto_unroll_max_step", ann_val=512)
sch.annotate(block_or_loop=l33, ann_key="pragma_unroll_explicit", ann_val=1)
b34 = sch.get_block(name="pool_max_rf", func_name="main")
l35, l36, l37, l38, l39, l40 = sch.get_loops(block=b34)
b41 = sch.decompose_reduction(block=b34, loop=l40)
b42 = sch.get_block(name="pool_max", func_name="main")
l43, l44, l45, l46, l47 = sch.get_loops(block=b42)
b48 = sch.decompose_reduction(block=b42, loop=l47)
2024-04-30 06:42:07 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_max_pool2d_1] Trial #54: GFLOPs: 8.7403. Time: 183.7048 us. Best GFLOPs: 97.1113
2024-04-30 06:42:07 [INFO] [task_scheduler.cc:121] [Task #7: fused_nn_max_pool2d_1] Trial #55: Error in building:
LocalBuilder: Timeout, killed after 30.0 seconds
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(2), T.int64(112), T.int64(112), T.int64(64)), "float32"), pool_max: T.Buffer((T.int64(1), T.int64(2), T.int64(56), T.int64(56), T.int64(64)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        pool_max_rf = T.alloc_buffer((T.int64(1), T.int64(2), T.int64(56), T.int64(56), T.int64(64), T.int64(4)))
        for ax0_ax1_ax2_ax3_fused in T.parallel(T.int64(6272), annotations={"pragma_auto_unroll_max_step": 512, "pragma_unroll_explicit": 1}):
            for ax4, rv0_rv1_fused_0 in T.grid(T.int64(64), T.int64(4)):
                with T.block("pool_max_rf_init"):
                    vrv0_rv1_fused_0 = T.axis.spatial(T.int64(4), rv0_rv1_fused_0)
                    v_ax0 = T.axis.spatial(T.int64(1), T.int64(0))
                    v_ax1 = T.axis.spatial(T.int64(2), ax0_ax1_ax2_ax3_fused // T.int64(3136))
                    v_ax2 = T.axis.spatial(T.int64(56), ax0_ax1_ax2_ax3_fused % T.int64(3136) // T.int64(56))
                    v_ax3 = T.axis.spatial(T.int64(56), ax0_ax1_ax2_ax3_fused % T.int64(56))
                    v_ax4 = T.axis.spatial(T.int64(64), ax4)
                    T.reads()
                    T.writes(pool_max_rf[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4, vrv0_rv1_fused_0])
                    pool_max_rf[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4, vrv0_rv1_fused_0] = T.float32(-3.4028234663852886e+38)
                for rv0_rv1_fused_1 in range(T.int64(1)):
                    with T.block("pool_max_rf_update"):
                        vrv0_rv1_fused_0 = T.axis.spatial(T.int64(4), rv0_rv1_fused_0)
                        v_ax0 = T.axis.spatial(T.int64(1), T.int64(0))
                        v_ax1 = T.axis.spatial(T.int64(2), ax0_ax1_ax2_ax3_fused // T.int64(3136))
                        v_ax2 = T.axis.spatial(T.int64(56), ax0_ax1_ax2_ax3_fused % T.int64(3136) // T.int64(56))
                        v_ax3 = T.axis.spatial(T.int64(56), ax0_ax1_ax2_ax3_fused % T.int64(56))
                        v_ax4, vrv0_rv1_fused_1 = T.axis.remap("SR", [ax4, rv0_rv1_fused_1])
                        T.reads(pool_max_rf[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4, vrv0_rv1_fused_0], p0[v_ax0, v_ax1, v_ax2 * T.int64(2) + (vrv0_rv1_fused_0 + vrv0_rv1_fused_1) // T.int64(2), v_ax3 * T.int64(2) + (vrv0_rv1_fused_0 + vrv0_rv1_fused_1) % T.int64(2), v_ax4])
                        T.writes(pool_max_rf[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4, vrv0_rv1_fused_0])
                        pool_max_rf[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4, vrv0_rv1_fused_0] = T.max(pool_max_rf[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4, vrv0_rv1_fused_0], p0[v_ax0, v_ax1, v_ax2 * T.int64(2) + (vrv0_rv1_fused_0 + vrv0_rv1_fused_1) // T.int64(2), v_ax3 * T.int64(2) + (vrv0_rv1_fused_0 + vrv0_rv1_fused_1) % T.int64(2), v_ax4])
        for ax0_ax1_ax2_ax3_fused in T.parallel(T.int64(6272), annotations={"pragma_auto_unroll_max_step": 512, "pragma_unroll_explicit": 1}):
            for ax4 in range(T.int64(64)):
                with T.block("pool_max_init"):
                    v_ax0 = T.axis.spatial(T.int64(1), T.int64(0))
                    v_ax1 = T.axis.spatial(T.int64(2), ax0_ax1_ax2_ax3_fused // T.int64(3136))
                    v_ax2 = T.axis.spatial(T.int64(56), ax0_ax1_ax2_ax3_fused % T.int64(3136) // T.int64(56))
                    v_ax3 = T.axis.spatial(T.int64(56), ax0_ax1_ax2_ax3_fused % T.int64(56))
                    v_ax4 = T.axis.spatial(T.int64(64), ax4)
                    T.reads()
                    T.writes(pool_max[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                    T.block_attr({"meta_schedule.random_compute_producer": 1})
                    pool_max[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.float32(-3.4028234663852886e+38)
                for rv0_rv1_fused_0 in range(T.int64(4)):
                    with T.block("pool_max_update"):
                        vrv0_rv1_fused_0 = T.axis.reduce(T.int64(4), rv0_rv1_fused_0)
                        v_ax0 = T.axis.spatial(T.int64(1), T.int64(0))
                        v_ax1 = T.axis.spatial(T.int64(2), ax0_ax1_ax2_ax3_fused // T.int64(3136))
                        v_ax2 = T.axis.spatial(T.int64(56), ax0_ax1_ax2_ax3_fused % T.int64(3136) // T.int64(56))
                        v_ax3 = T.axis.spatial(T.int64(56), ax0_ax1_ax2_ax3_fused % T.int64(56))
                        v_ax4 = T.axis.spatial(T.int64(64), ax4)
                        T.reads(pool_max[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], pool_max_rf[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4, vrv0_rv1_fused_0])
                        T.writes(pool_max[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                        T.block_attr({"meta_schedule.random_compute_producer": 1})
                        pool_max[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.max(pool_max[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], pool_max_rf[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4, vrv0_rv1_fused_0])
b0 = sch.get_block(name="pool_max", func_name="main")
b1 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b0, ann_key="schedule_rule")
l2, l3, l4, l5, l6, l7, l8 = sch.get_loops(block=b0)
l9 = sch.fuse(l7, l8, preserve_unit_iters=True)
v10, v11 = sch.sample_perfect_tile(loop=l9, n=2, max_innermost_factor=64, decision=[4, 1])
l12, l13 = sch.split(loop=l9, factors=[v10, v11], preserve_unit_iters=True)
b14 = sch.rfactor(loop=l12, factor_axis=5)
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.random_compute_producer", ann_val=1)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.vectorize", ann_val=64)
v15 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.unroll_explicit", ann_val=v15)
sch.enter_postproc()
b16 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b16, ann_key="meta_schedule.parallel")
sch.unannotate(block_or_loop=b16, ann_key="meta_schedule.vectorize")
sch.unannotate(block_or_loop=b16, ann_key="meta_schedule.unroll_explicit")
b17, b18 = sch.get_child_blocks(b16)
l19, l20, l21, l22, l23, l24, l25 = sch.get_loops(block=b17)
l26 = sch.fuse(l19, l20, l21, l22, preserve_unit_iters=True)
sch.parallel(loop=l26)
sch.annotate(block_or_loop=l26, ann_key="pragma_auto_unroll_max_step", ann_val=512)
sch.annotate(block_or_loop=l26, ann_key="pragma_unroll_explicit", ann_val=1)
l27, l28, l29, l30, l31, l32 = sch.get_loops(block=b18)
l33 = sch.fuse(l27, l28, l29, l30, preserve_unit_iters=True)
sch.parallel(loop=l33)
sch.annotate(block_or_loop=l33, ann_key="pragma_auto_unroll_max_step", ann_val=512)
sch.annotate(block_or_loop=l33, ann_key="pragma_unroll_explicit", ann_val=1)
b34 = sch.get_block(name="pool_max_rf", func_name="main")
l35, l36, l37, l38 = sch.get_loops(block=b34)
b39 = sch.decompose_reduction(block=b34, loop=l38)
b40 = sch.get_block(name="pool_max", func_name="main")
l41, l42, l43 = sch.get_loops(block=b40)
b44 = sch.decompose_reduction(block=b40, loop=l43)
2024-04-30 06:42:07 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_max_pool2d_1] Trial #56: GFLOPs: 46.5380. Time: 34.5015 us. Best GFLOPs: 97.1113
2024-04-30 06:42:07 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_max_pool2d_1] Trial #57: GFLOPs: 0.5314. Time: 3021.5520 us. Best GFLOPs: 97.1113
2024-04-30 06:42:07 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_max_pool2d_1] Trial #58: GFLOPs: 49.4383. Time: 32.4775 us. Best GFLOPs: 97.1113
2024-04-30 06:42:07 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_max_pool2d_1] Trial #59: GFLOPs: 13.4285. Time: 119.5690 us. Best GFLOPs: 97.1113
2024-04-30 06:42:07 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_max_pool2d_1] Trial #60: GFLOPs: 0.8242. Time: 1948.1237 us. Best GFLOPs: 97.1113
2024-04-30 06:42:07 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_max_pool2d_1] Trial #61: GFLOPs: 11.9050. Time: 134.8709 us. Best GFLOPs: 97.1113
