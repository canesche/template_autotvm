2024-04-30 05:29:25 [INFO] [task_scheduler.cc:160] Initializing Task #4: "fused_nn_max_pool2d"
2024-04-30 05:29:25 [INFO] [task_scheduler.cc:35] 
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(2), T.int64(224), T.int64(224), T.int64(32)), "float32"), pool_max: T.Buffer((T.int64(1), T.int64(2), T.int64(112), T.int64(112), T.int64(32)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        for ax0, ax1, ax2, ax3, ax4, rv0, rv1 in T.grid(T.int64(1), T.int64(2), T.int64(112), T.int64(112), T.int64(32), T.int64(2), T.int64(2)):
            with T.block("pool_max"):
                v_ax0, v_ax1, v_ax2, v_ax3, v_ax4, v_rv0, v_rv1 = T.axis.remap("SSSSSRR", [ax0, ax1, ax2, ax3, ax4, rv0, rv1])
                T.reads(p0[v_ax0, v_ax1, v_ax2 * T.int64(2) + v_rv0, v_ax3 * T.int64(2) + v_rv1, v_ax4])
                T.writes(pool_max[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                T.block_attr({"schedule_rule": "meta_schedule.pool_max"})
                with T.init():
                    pool_max[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.float32(-3.4028234663852886e+38)
                pool_max[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.max(pool_max[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], p0[v_ax0, v_ax1, v_ax2 * T.int64(2) + v_rv0, v_ax3 * T.int64(2) + v_rv1, v_ax4])
2024-04-30 05:29:25 [INFO] [task_scheduler.cc:164] Total 3 design space(s) generated
2024-04-30 05:29:25 [INFO] [task_scheduler.cc:170] Design space #0:
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(2), T.int64(224), T.int64(224), T.int64(32)), "float32"), pool_max: T.Buffer((T.int64(1), T.int64(2), T.int64(112), T.int64(112), T.int64(32)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        with T.block("root"):
            T.reads()
            T.writes()
            T.block_attr({"meta_schedule.parallel": 768, "meta_schedule.unroll_explicit": 512, "meta_schedule.vectorize": 64})
            pool_max_rf = T.alloc_buffer((T.int64(1), T.int64(2), T.int64(112), T.int64(112), T.int64(32), T.int64(2)))
            for ax0, ax1, ax2, ax3, ax4, rv0_rv1_fused_0, rv0_rv1_fused_1 in T.grid(T.int64(1), T.int64(2), T.int64(112), T.int64(112), T.int64(32), T.int64(2), T.int64(2)):
                with T.block("pool_max_rf"):
                    vrv0_rv1_fused_0, v_ax0, v_ax1, v_ax2, v_ax3, v_ax4, vrv0_rv1_fused_1 = T.axis.remap("SSSSSSR", [rv0_rv1_fused_0, ax0, ax1, ax2, ax3, ax4, rv0_rv1_fused_1])
                    T.reads(p0[v_ax0, v_ax1, v_ax2 * T.int64(2) + (vrv0_rv1_fused_0 * T.int64(2) + vrv0_rv1_fused_1) // T.int64(2), v_ax3 * T.int64(2) + (vrv0_rv1_fused_0 * T.int64(2) + vrv0_rv1_fused_1) % T.int64(2), v_ax4])
                    T.writes(pool_max_rf[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4, vrv0_rv1_fused_0])
                    with T.init():
                        pool_max_rf[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4, vrv0_rv1_fused_0] = T.float32(-3.4028234663852886e+38)
                    pool_max_rf[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4, vrv0_rv1_fused_0] = T.max(pool_max_rf[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4, vrv0_rv1_fused_0], p0[v_ax0, v_ax1, v_ax2 * T.int64(2) + (vrv0_rv1_fused_0 * T.int64(2) + vrv0_rv1_fused_1) // T.int64(2), v_ax3 * T.int64(2) + (vrv0_rv1_fused_0 * T.int64(2) + vrv0_rv1_fused_1) % T.int64(2), v_ax4])
            for ax0, ax1, ax2, ax3, ax4, rv0_rv1_fused_0 in T.grid(T.int64(1), T.int64(2), T.int64(112), T.int64(112), T.int64(32), T.int64(2)):
                with T.block("pool_max"):
                    vrv0_rv1_fused_0, v_ax0, v_ax1, v_ax2, v_ax3, v_ax4 = T.axis.remap("RSSSSS", [rv0_rv1_fused_0, ax0, ax1, ax2, ax3, ax4])
                    T.reads(pool_max_rf[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4, vrv0_rv1_fused_0])
                    T.writes(pool_max[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                    T.block_attr({"meta_schedule.random_compute_producer": 1})
                    with T.init():
                        pool_max[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.float32(-3.4028234663852886e+38)
                    pool_max[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.max(pool_max[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], pool_max_rf[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4, vrv0_rv1_fused_0])
b0 = sch.get_block(name="pool_max", func_name="main")
b1 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b0, ann_key="schedule_rule")
l2, l3, l4, l5, l6, l7, l8 = sch.get_loops(block=b0)
l9 = sch.fuse(l7, l8, preserve_unit_iters=True)
v10, v11 = sch.sample_perfect_tile(loop=l9, n=2, max_innermost_factor=64, decision=[2, 2])
l12, l13 = sch.split(loop=l9, factors=[v10, v11], preserve_unit_iters=True)
b14 = sch.rfactor(loop=l12, factor_axis=5)
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.random_compute_producer", ann_val=1)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.vectorize", ann_val=64)
v15 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.unroll_explicit", ann_val=v15)
2024-04-30 05:29:25 [INFO] [task_scheduler.cc:170] Design space #1:
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(2), T.int64(224), T.int64(224), T.int64(32)), "float32"), pool_max: T.Buffer((T.int64(1), T.int64(2), T.int64(112), T.int64(112), T.int64(32)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        with T.block("root"):
            T.reads()
            T.writes()
            T.block_attr({"meta_schedule.parallel": 768, "meta_schedule.unroll_explicit": 64, "meta_schedule.vectorize": 64})
            pool_max_rf = T.alloc_buffer((T.int64(1), T.int64(2), T.int64(112), T.int64(112), T.int64(32), T.int64(2)))
            for ax0, ax1, ax2, ax3, ax4, rv0_rv1_fused_0, rv0_rv1_fused_1 in T.grid(T.int64(1), T.int64(2), T.int64(112), T.int64(112), T.int64(32), T.int64(2), T.int64(2)):
                with T.block("pool_max_rf"):
                    vrv0_rv1_fused_1, v_ax0, v_ax1, v_ax2, v_ax3, v_ax4, vrv0_rv1_fused_0 = T.axis.remap("SSSSSSR", [rv0_rv1_fused_1, ax0, ax1, ax2, ax3, ax4, rv0_rv1_fused_0])
                    T.reads(p0[v_ax0, v_ax1, v_ax2 * T.int64(2) + (vrv0_rv1_fused_0 * T.int64(2) + vrv0_rv1_fused_1) // T.int64(2), v_ax3 * T.int64(2) + (vrv0_rv1_fused_0 * T.int64(2) + vrv0_rv1_fused_1) % T.int64(2), v_ax4])
                    T.writes(pool_max_rf[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4, vrv0_rv1_fused_1])
                    with T.init():
                        pool_max_rf[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4, vrv0_rv1_fused_1] = T.float32(-3.4028234663852886e+38)
                    pool_max_rf[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4, vrv0_rv1_fused_1] = T.max(pool_max_rf[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4, vrv0_rv1_fused_1], p0[v_ax0, v_ax1, v_ax2 * T.int64(2) + (vrv0_rv1_fused_0 * T.int64(2) + vrv0_rv1_fused_1) // T.int64(2), v_ax3 * T.int64(2) + (vrv0_rv1_fused_0 * T.int64(2) + vrv0_rv1_fused_1) % T.int64(2), v_ax4])
            for ax0, ax1, ax2, ax3, ax4, rv0_rv1_fused_1 in T.grid(T.int64(1), T.int64(2), T.int64(112), T.int64(112), T.int64(32), T.int64(2)):
                with T.block("pool_max"):
                    vrv0_rv1_fused_1, v_ax0, v_ax1, v_ax2, v_ax3, v_ax4 = T.axis.remap("RSSSSS", [rv0_rv1_fused_1, ax0, ax1, ax2, ax3, ax4])
                    T.reads(pool_max_rf[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4, vrv0_rv1_fused_1])
                    T.writes(pool_max[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                    T.block_attr({"meta_schedule.random_compute_producer": 1})
                    with T.init():
                        pool_max[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.float32(-3.4028234663852886e+38)
                    pool_max[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.max(pool_max[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], pool_max_rf[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4, vrv0_rv1_fused_1])
b0 = sch.get_block(name="pool_max", func_name="main")
b1 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b0, ann_key="schedule_rule")
l2, l3, l4, l5, l6, l7, l8 = sch.get_loops(block=b0)
l9 = sch.fuse(l7, l8, preserve_unit_iters=True)
v10, v11 = sch.sample_perfect_tile(loop=l9, n=2, max_innermost_factor=64, decision=[2, 2])
l12, l13 = sch.split(loop=l9, factors=[v10, v11], preserve_unit_iters=True)
b14 = sch.rfactor(loop=l13, factor_axis=5)
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.random_compute_producer", ann_val=1)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.vectorize", ann_val=64)
v15 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=2)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.unroll_explicit", ann_val=v15)
2024-04-30 05:29:25 [INFO] [task_scheduler.cc:170] Design space #2:
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(2), T.int64(224), T.int64(224), T.int64(32)), "float32"), pool_max: T.Buffer((T.int64(1), T.int64(2), T.int64(112), T.int64(112), T.int64(32)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        with T.block("root"):
            T.reads()
            T.writes()
            T.block_attr({"meta_schedule.parallel": 768, "meta_schedule.unroll_explicit": 0, "meta_schedule.vectorize": 64})
            for ax0, ax1, ax2, ax3, ax4, rv0, rv1 in T.grid(T.int64(1), T.int64(2), T.int64(112), T.int64(112), T.int64(32), T.int64(2), T.int64(2)):
                with T.block("pool_max"):
                    v_ax0, v_ax1, v_ax2, v_ax3, v_ax4, v_rv0, v_rv1 = T.axis.remap("SSSSSRR", [ax0, ax1, ax2, ax3, ax4, rv0, rv1])
                    T.reads(p0[v_ax0, v_ax1, v_ax2 * T.int64(2) + v_rv0, v_ax3 * T.int64(2) + v_rv1, v_ax4])
                    T.writes(pool_max[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                    with T.init():
                        pool_max[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.float32(-3.4028234663852886e+38)
                    pool_max[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.max(pool_max[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], p0[v_ax0, v_ax1, v_ax2 * T.int64(2) + v_rv0, v_ax3 * T.int64(2) + v_rv1, v_ax4])
b0 = sch.get_block(name="pool_max", func_name="main")
b1 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b0, ann_key="schedule_rule")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.vectorize", ann_val=64)
v2 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=0)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.unroll_explicit", ann_val=v2)
2024-04-30 05:38:05 [INFO] [evolutionary_search.cc:713] Generating candidates......
2024-04-30 05:38:05 [INFO] [evolutionary_search.cc:715] Picked top 0 candidate(s) from database
2024-04-30 05:38:06 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x37f1148)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x3a74e48)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x36b93a8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x33741d8)]: 0 failure(s)
2024-04-30 05:38:06 [INFO] [evolutionary_search.cc:723] Sampled 512 candidate(s)
2024-04-30 05:38:07 [INFO] [evolutionary_search.cc:621] Evolve iter #0 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x37f1148)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x3a74e48)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x36b93a8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x33741d8)]: 0 failure(s)
2024-04-30 05:38:08 [INFO] [evolutionary_search.cc:621] Evolve iter #1 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x37f1148)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x3a74e48)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x36b93a8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x33741d8)]: 0 failure(s)
2024-04-30 05:38:09 [INFO] [evolutionary_search.cc:621] Evolve iter #2 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x37f1148)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x3a74e48)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x36b93a8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x33741d8)]: 0 failure(s)
2024-04-30 05:38:11 [INFO] [evolutionary_search.cc:621] Evolve iter #3 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x37f1148)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x3a74e48)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x36b93a8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x33741d8)]: 0 failure(s)
2024-04-30 05:38:12 [INFO] [evolutionary_search.cc:649] Scores of the best 55 candidates:
[1 : 16]:	0.9797  0.9611  0.9392  0.9258  0.9176  0.9110  0.8829  0.8819  0.8803  0.8514  0.8462  0.8243  0.7963  0.7739  0.7661  0.7443
[17 : 32]:	0.6965  0.6863  0.6413  0.6249  0.6121  0.6028  0.5947  0.5662  0.5285  0.5071  0.5061  0.4709  0.4221  0.3997  0.3902  0.3551
[33 : 48]:	0.2881  0.2870  0.2867  0.2772  0.2508  0.2447  0.2326  0.2153  0.2057  0.2046  0.1940  0.1653  0.1401  0.1052  0.0994  0.0975
[49 : 55]:	0.0898  0.0763  0.0715  0.0492  0.0412  0.0392  0.0038
2024-04-30 05:38:12 [INFO] [evolutionary_search.cc:727] Got 55 candidate(s) with evolutionary search
2024-04-30 05:38:12 [INFO] [evolutionary_search.cc:730] Sending 55 candidates(s) for measurement
2024-04-30 06:42:00 [INFO] [task_scheduler.cc:131] [Task #4: fused_nn_max_pool2d] Trial #1: GFLOPs: 52.3192. Time: 61.3783 us. Best GFLOPs: 52.3192
2024-04-30 06:42:00 [INFO] [task_scheduler.cc:131] [Task #4: fused_nn_max_pool2d] Trial #2: GFLOPs: 5.0983. Time: 629.8659 us. Best GFLOPs: 52.3192
2024-04-30 06:42:00 [INFO] [task_scheduler.cc:131] [Task #4: fused_nn_max_pool2d] Trial #3: GFLOPs: 53.8587. Time: 59.6239 us. Best GFLOPs: 53.8587
2024-04-30 06:42:00 [INFO] [task_scheduler.cc:131] [Task #4: fused_nn_max_pool2d] Trial #4: GFLOPs: 18.3962. Time: 174.5617 us. Best GFLOPs: 53.8587
2024-04-30 06:42:00 [INFO] [task_scheduler.cc:131] [Task #4: fused_nn_max_pool2d] Trial #5: GFLOPs: 5.5222. Time: 581.5197 us. Best GFLOPs: 53.8587
2024-04-30 06:42:00 [INFO] [task_scheduler.cc:131] [Task #4: fused_nn_max_pool2d] Trial #6: GFLOPs: 10.5886. Time: 303.2761 us. Best GFLOPs: 53.8587
2024-04-30 06:42:00 [INFO] [task_scheduler.cc:131] [Task #4: fused_nn_max_pool2d] Trial #7: GFLOPs: 4.5660. Time: 703.2990 us. Best GFLOPs: 53.8587
2024-04-30 06:42:00 [INFO] [task_scheduler.cc:131] [Task #4: fused_nn_max_pool2d] Trial #8: GFLOPs: 130.2659. Time: 24.6516 us. Best GFLOPs: 130.2659
2024-04-30 06:42:00 [INFO] [task_scheduler.cc:131] [Task #4: fused_nn_max_pool2d] Trial #9: GFLOPs: 59.2878. Time: 54.1640 us. Best GFLOPs: 130.2659
2024-04-30 06:42:00 [INFO] [task_scheduler.cc:131] [Task #4: fused_nn_max_pool2d] Trial #10: GFLOPs: 8.5398. Time: 376.0367 us. Best GFLOPs: 130.2659
2024-04-30 06:42:00 [INFO] [task_scheduler.cc:131] [Task #4: fused_nn_max_pool2d] Trial #11: GFLOPs: 25.9539. Time: 123.7296 us. Best GFLOPs: 130.2659
2024-04-30 06:42:00 [INFO] [task_scheduler.cc:131] [Task #4: fused_nn_max_pool2d] Trial #12: GFLOPs: 69.8631. Time: 45.9651 us. Best GFLOPs: 130.2659
2024-04-30 06:42:00 [INFO] [task_scheduler.cc:131] [Task #4: fused_nn_max_pool2d] Trial #13: GFLOPs: 28.1951. Time: 113.8943 us. Best GFLOPs: 130.2659
2024-04-30 06:42:00 [INFO] [task_scheduler.cc:131] [Task #4: fused_nn_max_pool2d] Trial #14: GFLOPs: 28.9454. Time: 110.9421 us. Best GFLOPs: 130.2659
2024-04-30 06:42:00 [INFO] [task_scheduler.cc:131] [Task #4: fused_nn_max_pool2d] Trial #15: GFLOPs: 25.9244. Time: 123.8703 us. Best GFLOPs: 130.2659
2024-04-30 06:42:00 [INFO] [task_scheduler.cc:131] [Task #4: fused_nn_max_pool2d] Trial #16: GFLOPs: 27.9865. Time: 114.7433 us. Best GFLOPs: 130.2659
2024-04-30 06:42:00 [INFO] [task_scheduler.cc:131] [Task #4: fused_nn_max_pool2d] Trial #17: GFLOPs: 49.9117. Time: 64.3389 us. Best GFLOPs: 130.2659
2024-04-30 06:42:00 [INFO] [task_scheduler.cc:131] [Task #4: fused_nn_max_pool2d] Trial #18: GFLOPs: 130.2262. Time: 24.6591 us. Best GFLOPs: 130.2659
2024-04-30 06:42:00 [INFO] [task_scheduler.cc:131] [Task #4: fused_nn_max_pool2d] Trial #19: GFLOPs: 60.5104. Time: 53.0696 us. Best GFLOPs: 130.2659
2024-04-30 06:42:00 [INFO] [task_scheduler.cc:131] [Task #4: fused_nn_max_pool2d] Trial #20: GFLOPs: 62.0657. Time: 51.7398 us. Best GFLOPs: 130.2659
2024-04-30 06:42:00 [INFO] [task_scheduler.cc:131] [Task #4: fused_nn_max_pool2d] Trial #21: GFLOPs: 1.0811. Time: 2970.2894 us. Best GFLOPs: 130.2659
2024-04-30 06:42:00 [INFO] [task_scheduler.cc:131] [Task #4: fused_nn_max_pool2d] Trial #22: GFLOPs: 40.3082. Time: 79.6677 us. Best GFLOPs: 130.2659
2024-04-30 06:42:00 [INFO] [task_scheduler.cc:131] [Task #4: fused_nn_max_pool2d] Trial #23: GFLOPs: 0.4464. Time: 7193.8568 us. Best GFLOPs: 130.2659
2024-04-30 06:42:00 [INFO] [task_scheduler.cc:131] [Task #4: fused_nn_max_pool2d] Trial #24: GFLOPs: 4.5205. Time: 710.3739 us. Best GFLOPs: 130.2659
2024-04-30 06:42:00 [INFO] [task_scheduler.cc:131] [Task #4: fused_nn_max_pool2d] Trial #25: GFLOPs: 33.4714. Time: 95.9407 us. Best GFLOPs: 130.2659
2024-04-30 06:42:00 [INFO] [task_scheduler.cc:131] [Task #4: fused_nn_max_pool2d] Trial #26: GFLOPs: 10.3649. Time: 309.8218 us. Best GFLOPs: 130.2659
2024-04-30 06:42:00 [INFO] [task_scheduler.cc:131] [Task #4: fused_nn_max_pool2d] Trial #27: GFLOPs: 101.3889. Time: 31.6727 us. Best GFLOPs: 130.2659
2024-04-30 06:42:00 [INFO] [task_scheduler.cc:131] [Task #4: fused_nn_max_pool2d] Trial #28: GFLOPs: 58.0122. Time: 55.3550 us. Best GFLOPs: 130.2659
2024-04-30 06:42:00 [INFO] [task_scheduler.cc:131] [Task #4: fused_nn_max_pool2d] Trial #29: GFLOPs: 12.6360. Time: 254.1370 us. Best GFLOPs: 130.2659
2024-04-30 06:42:00 [INFO] [task_scheduler.cc:131] [Task #4: fused_nn_max_pool2d] Trial #30: GFLOPs: 85.7085. Time: 37.4673 us. Best GFLOPs: 130.2659
2024-04-30 06:42:00 [INFO] [task_scheduler.cc:131] [Task #4: fused_nn_max_pool2d] Trial #31: GFLOPs: 19.8850. Time: 161.4919 us. Best GFLOPs: 130.2659
2024-04-30 06:42:00 [INFO] [task_scheduler.cc:131] [Task #4: fused_nn_max_pool2d] Trial #32: GFLOPs: 1.9051. Time: 1685.6024 us. Best GFLOPs: 130.2659
2024-04-30 06:42:00 [INFO] [task_scheduler.cc:131] [Task #4: fused_nn_max_pool2d] Trial #33: GFLOPs: 12.9495. Time: 247.9840 us. Best GFLOPs: 130.2659
2024-04-30 06:42:00 [INFO] [task_scheduler.cc:131] [Task #4: fused_nn_max_pool2d] Trial #34: GFLOPs: 5.4396. Time: 590.3444 us. Best GFLOPs: 130.2659
2024-04-30 06:42:00 [INFO] [task_scheduler.cc:131] [Task #4: fused_nn_max_pool2d] Trial #35: GFLOPs: 10.6689. Time: 300.9929 us. Best GFLOPs: 130.2659
2024-04-30 06:42:00 [INFO] [task_scheduler.cc:131] [Task #4: fused_nn_max_pool2d] Trial #36: GFLOPs: 11.4762. Time: 279.8202 us. Best GFLOPs: 130.2659
2024-04-30 06:42:00 [INFO] [task_scheduler.cc:131] [Task #4: fused_nn_max_pool2d] Trial #37: GFLOPs: 57.5392. Time: 55.8101 us. Best GFLOPs: 130.2659
2024-04-30 06:42:00 [INFO] [task_scheduler.cc:131] [Task #4: fused_nn_max_pool2d] Trial #38: GFLOPs: 69.6109. Time: 46.1316 us. Best GFLOPs: 130.2659
2024-04-30 06:42:00 [INFO] [task_scheduler.cc:131] [Task #4: fused_nn_max_pool2d] Trial #39: GFLOPs: 70.4292. Time: 45.5957 us. Best GFLOPs: 130.2659
2024-04-30 06:42:00 [INFO] [task_scheduler.cc:131] [Task #4: fused_nn_max_pool2d] Trial #40: GFLOPs: 33.3111. Time: 96.4022 us. Best GFLOPs: 130.2659
2024-04-30 06:42:00 [INFO] [task_scheduler.cc:131] [Task #4: fused_nn_max_pool2d] Trial #41: GFLOPs: 16.6365. Time: 193.0252 us. Best GFLOPs: 130.2659
2024-04-30 06:42:00 [INFO] [task_scheduler.cc:131] [Task #4: fused_nn_max_pool2d] Trial #42: GFLOPs: 1.8959. Time: 1693.8279 us. Best GFLOPs: 130.2659
2024-04-30 06:42:00 [INFO] [task_scheduler.cc:131] [Task #4: fused_nn_max_pool2d] Trial #43: GFLOPs: 53.1687. Time: 60.3976 us. Best GFLOPs: 130.2659
2024-04-30 06:42:00 [INFO] [task_scheduler.cc:131] [Task #4: fused_nn_max_pool2d] Trial #44: GFLOPs: 9.6408. Time: 333.0906 us. Best GFLOPs: 130.2659
2024-04-30 06:42:00 [INFO] [task_scheduler.cc:131] [Task #4: fused_nn_max_pool2d] Trial #45: GFLOPs: 12.5605. Time: 255.6637 us. Best GFLOPs: 130.2659
2024-04-30 06:42:00 [INFO] [task_scheduler.cc:131] [Task #4: fused_nn_max_pool2d] Trial #46: GFLOPs: 19.6713. Time: 163.2463 us. Best GFLOPs: 130.2659
2024-04-30 06:42:00 [INFO] [task_scheduler.cc:131] [Task #4: fused_nn_max_pool2d] Trial #47: GFLOPs: 31.6734. Time: 101.3867 us. Best GFLOPs: 130.2659
2024-04-30 06:42:00 [INFO] [task_scheduler.cc:131] [Task #4: fused_nn_max_pool2d] Trial #48: GFLOPs: 1.1594. Time: 2769.6867 us. Best GFLOPs: 130.2659
2024-04-30 06:42:00 [INFO] [task_scheduler.cc:131] [Task #4: fused_nn_max_pool2d] Trial #49: GFLOPs: 0.7689. Time: 4176.5958 us. Best GFLOPs: 130.2659
2024-04-30 06:42:00 [INFO] [task_scheduler.cc:131] [Task #4: fused_nn_max_pool2d] Trial #50: GFLOPs: 0.9817. Time: 3271.0184 us. Best GFLOPs: 130.2659
2024-04-30 06:42:00 [INFO] [task_scheduler.cc:131] [Task #4: fused_nn_max_pool2d] Trial #51: GFLOPs: 72.2136. Time: 44.4690 us. Best GFLOPs: 130.2659
2024-04-30 06:42:00 [INFO] [task_scheduler.cc:131] [Task #4: fused_nn_max_pool2d] Trial #52: GFLOPs: 31.6423. Time: 101.4866 us. Best GFLOPs: 130.2659
2024-04-30 06:42:00 [INFO] [task_scheduler.cc:131] [Task #4: fused_nn_max_pool2d] Trial #53: GFLOPs: 70.5738. Time: 45.5022 us. Best GFLOPs: 130.2659
2024-04-30 06:42:00 [INFO] [task_scheduler.cc:131] [Task #4: fused_nn_max_pool2d] Trial #54: GFLOPs: 19.6592. Time: 163.3468 us. Best GFLOPs: 130.2659
2024-04-30 06:42:00 [INFO] [task_scheduler.cc:131] [Task #4: fused_nn_max_pool2d] Trial #55: GFLOPs: 18.2351. Time: 176.1033 us. Best GFLOPs: 130.2659
