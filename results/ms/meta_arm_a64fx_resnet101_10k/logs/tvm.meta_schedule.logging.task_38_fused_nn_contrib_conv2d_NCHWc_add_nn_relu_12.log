2024-04-29 07:27:17 [INFO] [task_scheduler.cc:160] Initializing Task #38: "fused_nn_contrib_conv2d_NCHWc_add_nn_relu_12"
2024-04-29 07:27:17 [INFO] [task_scheduler.cc:35] 
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(256), T.int64(14), T.int64(14), T.int64(4)), "float32"), p1: T.Buffer((T.int64(128), T.int64(256), T.int64(1), T.int64(1), T.int64(4), T.int64(4)), "float32"), p2: T.Buffer((T.int64(1), T.int64(128), T.int64(1), T.int64(1), T.int64(4)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(128), T.int64(14), T.int64(14), T.int64(4)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        conv2d_NCHWc = T.alloc_buffer((T.int64(1), T.int64(128), T.int64(14), T.int64(14), T.int64(4)))
        T_add = T.alloc_buffer((T.int64(1), T.int64(128), T.int64(14), T.int64(14), T.int64(4)))
        for n, oc_chunk, oh, ow, oc_block, ic, kh, kw in T.grid(T.int64(1), T.int64(128), T.int64(14), T.int64(14), T.int64(4), T.int64(1024), T.int64(1), T.int64(1)):
            with T.block("conv2d_NCHWc"):
                v_n, v_oc_chunk, v_oh, v_ow, v_oc_block, v_ic, v_kh, v_kw = T.axis.remap("SSSSSRRR", [n, oc_chunk, oh, ow, oc_block, ic, kh, kw])
                T.reads(p0[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)], p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block])
                T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                with T.init():
                    conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = T.float32(0)
                conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] + p0[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)] * p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block]
        for ax0, ax1, ax2, ax3, ax4 in T.grid(T.int64(1), T.int64(128), T.int64(14), T.int64(14), T.int64(4)):
            with T.block("T_add"):
                v_ax0, v_ax1, v_ax2, v_ax3, v_ax4 = T.axis.remap("SSSSS", [ax0, ax1, ax2, ax3, ax4])
                T.reads(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4])
                T.writes(T_add[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                T_add[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] + p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4]
        for ax0, ax1, ax2, ax3, ax4 in T.grid(T.int64(1), T.int64(128), T.int64(14), T.int64(14), T.int64(4)):
            with T.block("T_relu"):
                v_ax0, v_ax1, v_ax2, v_ax3, v_ax4 = T.axis.remap("SSSSS", [ax0, ax1, ax2, ax3, ax4])
                T.reads(T_add[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                T.writes(T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.max(T_add[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], T.float32(0))
2024-04-29 07:27:17 [INFO] [task_scheduler.cc:164] Total 3 design space(s) generated
2024-04-29 07:27:17 [INFO] [task_scheduler.cc:170] Design space #0:
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(256), T.int64(14), T.int64(14), T.int64(4)), "float32"), p1: T.Buffer((T.int64(128), T.int64(256), T.int64(1), T.int64(1), T.int64(4), T.int64(4)), "float32"), p2: T.Buffer((T.int64(1), T.int64(128), T.int64(1), T.int64(1), T.int64(4)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(128), T.int64(14), T.int64(14), T.int64(4)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        with T.block("root"):
            T.reads()
            T.writes()
            T.block_attr({"meta_schedule.parallel": 768, "meta_schedule.unroll_explicit": 512, "meta_schedule.vectorize": 64})
            conv2d_NCHWc = T.alloc_buffer((T.int64(1), T.int64(128), T.int64(14), T.int64(14), T.int64(4)))
            for n_0, oc_chunk_0, oh_0, ow_0, oc_block_0, n_1, oc_chunk_1, oh_1, ow_1, oc_block_1, ic_0, kh_0, kw_0, n_2, oc_chunk_2, oh_2, ow_2, oc_block_2, ic_1, kh_1, kw_1, n_3, oc_chunk_3, oh_3, ow_3, oc_block_3 in T.grid(T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(1), T.int64(1), T.int64(14), T.int64(7), T.int64(2), T.int64(64), T.int64(1), T.int64(1), T.int64(1), T.int64(16), T.int64(1), T.int64(2), T.int64(1), T.int64(16), T.int64(1), T.int64(1), T.int64(1), T.int64(8), T.int64(1), T.int64(1), T.int64(1)):
                with T.block("conv2d_NCHWc"):
                    v_n = T.axis.spatial(T.int64(1), n_0 + n_1 + n_2 + n_3)
                    v_oc_chunk = T.axis.spatial(T.int64(128), oc_chunk_0 * T.int64(128) + oc_chunk_1 * T.int64(128) + oc_chunk_2 * T.int64(8) + oc_chunk_3)
                    v_oh = T.axis.spatial(T.int64(14), oh_0 * T.int64(14) + oh_1 + oh_2 + oh_3)
                    v_ow = T.axis.spatial(T.int64(14), ow_0 * T.int64(14) + ow_1 * T.int64(2) + ow_2 + ow_3)
                    v_oc_block = T.axis.spatial(T.int64(4), oc_block_0 * T.int64(2) + oc_block_1 + oc_block_2 + oc_block_3)
                    v_ic = T.axis.reduce(T.int64(1024), ic_0 * T.int64(16) + ic_1)
                    v_kh = T.axis.reduce(T.int64(1), kh_0 + kh_1)
                    v_kw = T.axis.reduce(T.int64(1), kw_0 + kw_1)
                    T.reads(p0[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)], p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block])
                    T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                    T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                    with T.init():
                        conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = T.float32(0)
                    conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] + p0[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)] * p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block]
            for ax0, ax1, ax2, ax3, ax4 in T.grid(T.int64(1), T.int64(128), T.int64(14), T.int64(14), T.int64(4)):
                with T.block("T_relu"):
                    v_ax0, v_ax1, v_ax2, v_ax3, v_ax4 = T.axis.remap("SSSSS", [ax0, ax1, ax2, ax3, ax4])
                    T.reads(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4])
                    T.writes(T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                    T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.max(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] + p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4], T.float32(0))
b0 = sch.get_block(name="conv2d_NCHWc", func_name="main")
b1 = sch.get_block(name="T_add", func_name="main")
b2 = sch.get_block(name="root", func_name="main")
sch.compute_inline(block=b1)
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.tiling_structure", ann_val="SSRSRS")
l3, l4, l5, l6, l7, l8, l9, l10 = sch.get_loops(block=b0)
v11, v12, v13, v14 = sch.sample_perfect_tile(loop=l3, n=4, max_innermost_factor=64, decision=[1, 1, 1, 1])
l15, l16, l17, l18 = sch.split(loop=l3, factors=[v11, v12, v13, v14], preserve_unit_iters=True)
v19, v20, v21, v22 = sch.sample_perfect_tile(loop=l4, n=4, max_innermost_factor=64, decision=[1, 1, 16, 8])
l23, l24, l25, l26 = sch.split(loop=l4, factors=[v19, v20, v21, v22], preserve_unit_iters=True)
v27, v28, v29, v30 = sch.sample_perfect_tile(loop=l5, n=4, max_innermost_factor=64, decision=[1, 14, 1, 1])
l31, l32, l33, l34 = sch.split(loop=l5, factors=[v27, v28, v29, v30], preserve_unit_iters=True)
v35, v36, v37, v38 = sch.sample_perfect_tile(loop=l6, n=4, max_innermost_factor=64, decision=[1, 7, 2, 1])
l39, l40, l41, l42 = sch.split(loop=l6, factors=[v35, v36, v37, v38], preserve_unit_iters=True)
v43, v44, v45, v46 = sch.sample_perfect_tile(loop=l7, n=4, max_innermost_factor=64, decision=[2, 2, 1, 1])
l47, l48, l49, l50 = sch.split(loop=l7, factors=[v43, v44, v45, v46], preserve_unit_iters=True)
v51, v52 = sch.sample_perfect_tile(loop=l8, n=2, max_innermost_factor=64, decision=[64, 16])
l53, l54 = sch.split(loop=l8, factors=[v51, v52], preserve_unit_iters=True)
v55, v56 = sch.sample_perfect_tile(loop=l9, n=2, max_innermost_factor=64, decision=[1, 1])
l57, l58 = sch.split(loop=l9, factors=[v55, v56], preserve_unit_iters=True)
v59, v60 = sch.sample_perfect_tile(loop=l10, n=2, max_innermost_factor=64, decision=[1, 1])
l61, l62 = sch.split(loop=l10, factors=[v59, v60], preserve_unit_iters=True)
sch.reorder(l15, l23, l31, l39, l47, l16, l24, l32, l40, l48, l53, l57, l61, l17, l25, l33, l41, l49, l54, l58, l62, l18, l26, l34, l42, l50)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.vectorize", ann_val=64)
v63 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.unroll_explicit", ann_val=v63)
2024-04-29 07:27:17 [INFO] [task_scheduler.cc:170] Design space #1:
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(256), T.int64(14), T.int64(14), T.int64(4)), "float32"), p1: T.Buffer((T.int64(128), T.int64(256), T.int64(1), T.int64(1), T.int64(4), T.int64(4)), "float32"), p2: T.Buffer((T.int64(1), T.int64(128), T.int64(1), T.int64(1), T.int64(4)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(128), T.int64(14), T.int64(14), T.int64(4)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        with T.block("root"):
            T.reads()
            T.writes()
            T.block_attr({"meta_schedule.parallel": 768, "meta_schedule.unroll_explicit": 64, "meta_schedule.vectorize": 64})
            conv2d_NCHWc = T.alloc_buffer((T.int64(1), T.int64(128), T.int64(14), T.int64(14), T.int64(4)))
            for n_0, oc_chunk_0, oh_0, ow_0, oc_block_0, n_1, oc_chunk_1, oh_1, ow_1, oc_block_1 in T.grid(T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(1), T.int64(1), T.int64(14), T.int64(7), T.int64(2)):
                for ic_0, kh_0, kw_0, n_2, oc_chunk_2, oh_2, ow_2, oc_block_2, ic_1, kh_1, kw_1, n_3, oc_chunk_3, oh_3, ow_3, oc_block_3 in T.grid(T.int64(64), T.int64(1), T.int64(1), T.int64(1), T.int64(16), T.int64(1), T.int64(2), T.int64(1), T.int64(16), T.int64(1), T.int64(1), T.int64(1), T.int64(8), T.int64(1), T.int64(1), T.int64(1)):
                    with T.block("conv2d_NCHWc"):
                        v_n = T.axis.spatial(T.int64(1), n_0 + n_1 + n_2 + n_3)
                        v_oc_chunk = T.axis.spatial(T.int64(128), oc_chunk_0 * T.int64(128) + oc_chunk_1 * T.int64(128) + oc_chunk_2 * T.int64(8) + oc_chunk_3)
                        v_oh = T.axis.spatial(T.int64(14), oh_0 * T.int64(14) + oh_1 + oh_2 + oh_3)
                        v_ow = T.axis.spatial(T.int64(14), ow_0 * T.int64(14) + ow_1 * T.int64(2) + ow_2 + ow_3)
                        v_oc_block = T.axis.spatial(T.int64(4), oc_block_0 * T.int64(2) + oc_block_1 + oc_block_2 + oc_block_3)
                        v_ic = T.axis.reduce(T.int64(1024), ic_0 * T.int64(16) + ic_1)
                        v_kh = T.axis.reduce(T.int64(1), kh_0 + kh_1)
                        v_kw = T.axis.reduce(T.int64(1), kw_0 + kw_1)
                        T.reads(p0[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)], p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block])
                        T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                        T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                        with T.init():
                            conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = T.float32(0)
                        conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] + p0[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)] * p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block]
                for ax0, ax1, ax2, ax3, ax4 in T.grid(T.int64(1), T.int64(128), T.int64(1), T.int64(2), T.int64(1)):
                    with T.block("T_relu"):
                        v_ax0, v_ax1 = T.axis.remap("SS", [ax0, ax1])
                        v_ax2 = T.axis.spatial(T.int64(14), oh_1 + ax2)
                        v_ax3 = T.axis.spatial(T.int64(14), ow_1 * T.int64(2) + ax3)
                        v_ax4 = T.axis.spatial(T.int64(4), oc_block_0 * T.int64(2) + oc_block_1 + ax4)
                        T.reads(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4])
                        T.writes(T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                        T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.max(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] + p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4], T.float32(0))
b0 = sch.get_block(name="conv2d_NCHWc", func_name="main")
b1 = sch.get_block(name="T_add", func_name="main")
b2 = sch.get_block(name="root", func_name="main")
sch.compute_inline(block=b1)
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.tiling_structure", ann_val="SSRSRS")
l3, l4, l5, l6, l7, l8, l9, l10 = sch.get_loops(block=b0)
v11, v12, v13, v14 = sch.sample_perfect_tile(loop=l3, n=4, max_innermost_factor=64, decision=[1, 1, 1, 1])
l15, l16, l17, l18 = sch.split(loop=l3, factors=[v11, v12, v13, v14], preserve_unit_iters=True)
v19, v20, v21, v22 = sch.sample_perfect_tile(loop=l4, n=4, max_innermost_factor=64, decision=[1, 1, 16, 8])
l23, l24, l25, l26 = sch.split(loop=l4, factors=[v19, v20, v21, v22], preserve_unit_iters=True)
v27, v28, v29, v30 = sch.sample_perfect_tile(loop=l5, n=4, max_innermost_factor=64, decision=[1, 14, 1, 1])
l31, l32, l33, l34 = sch.split(loop=l5, factors=[v27, v28, v29, v30], preserve_unit_iters=True)
v35, v36, v37, v38 = sch.sample_perfect_tile(loop=l6, n=4, max_innermost_factor=64, decision=[1, 7, 2, 1])
l39, l40, l41, l42 = sch.split(loop=l6, factors=[v35, v36, v37, v38], preserve_unit_iters=True)
v43, v44, v45, v46 = sch.sample_perfect_tile(loop=l7, n=4, max_innermost_factor=64, decision=[2, 2, 1, 1])
l47, l48, l49, l50 = sch.split(loop=l7, factors=[v43, v44, v45, v46], preserve_unit_iters=True)
v51, v52 = sch.sample_perfect_tile(loop=l8, n=2, max_innermost_factor=64, decision=[64, 16])
l53, l54 = sch.split(loop=l8, factors=[v51, v52], preserve_unit_iters=True)
v55, v56 = sch.sample_perfect_tile(loop=l9, n=2, max_innermost_factor=64, decision=[1, 1])
l57, l58 = sch.split(loop=l9, factors=[v55, v56], preserve_unit_iters=True)
v59, v60 = sch.sample_perfect_tile(loop=l10, n=2, max_innermost_factor=64, decision=[1, 1])
l61, l62 = sch.split(loop=l10, factors=[v59, v60], preserve_unit_iters=True)
sch.reorder(l15, l23, l31, l39, l47, l16, l24, l32, l40, l48, l53, l57, l61, l17, l25, l33, l41, l49, l54, l58, l62, l18, l26, l34, l42, l50)
b63, = sch.get_consumers(block=b0)
sch.reverse_compute_at(block=b63, loop=l48, preserve_unit_loops=True, index=-1)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.vectorize", ann_val=64)
v64 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=2)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.unroll_explicit", ann_val=v64)
2024-04-29 07:27:17 [INFO] [task_scheduler.cc:170] Design space #2:
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(256), T.int64(14), T.int64(14), T.int64(4)), "float32"), p1: T.Buffer((T.int64(128), T.int64(256), T.int64(1), T.int64(1), T.int64(4), T.int64(4)), "float32"), p2: T.Buffer((T.int64(1), T.int64(128), T.int64(1), T.int64(1), T.int64(4)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(128), T.int64(14), T.int64(14), T.int64(4)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        with T.block("root"):
            T.reads()
            T.writes()
            T.block_attr({"meta_schedule.parallel": 768, "meta_schedule.unroll_explicit": 16, "meta_schedule.vectorize": 64})
            conv2d_NCHWc = T.alloc_buffer((T.int64(1), T.int64(128), T.int64(14), T.int64(14), T.int64(4)))
            for n_0, oc_chunk_0, oh_0, ow_0, oc_block_0 in T.grid(T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(2)):
                for n_1, oc_chunk_1, oh_1, ow_1, oc_block_1, ic_0, kh_0, kw_0, n_2, oc_chunk_2, oh_2, ow_2, oc_block_2, ic_1, kh_1, kw_1, n_3, oc_chunk_3, oh_3, ow_3, oc_block_3 in T.grid(T.int64(1), T.int64(1), T.int64(14), T.int64(7), T.int64(2), T.int64(64), T.int64(1), T.int64(1), T.int64(1), T.int64(16), T.int64(1), T.int64(2), T.int64(1), T.int64(16), T.int64(1), T.int64(1), T.int64(1), T.int64(8), T.int64(1), T.int64(1), T.int64(1)):
                    with T.block("conv2d_NCHWc"):
                        v_n = T.axis.spatial(T.int64(1), n_0 + n_1 + n_2 + n_3)
                        v_oc_chunk = T.axis.spatial(T.int64(128), oc_chunk_0 * T.int64(128) + oc_chunk_1 * T.int64(128) + oc_chunk_2 * T.int64(8) + oc_chunk_3)
                        v_oh = T.axis.spatial(T.int64(14), oh_0 * T.int64(14) + oh_1 + oh_2 + oh_3)
                        v_ow = T.axis.spatial(T.int64(14), ow_0 * T.int64(14) + ow_1 * T.int64(2) + ow_2 + ow_3)
                        v_oc_block = T.axis.spatial(T.int64(4), oc_block_0 * T.int64(2) + oc_block_1 + oc_block_2 + oc_block_3)
                        v_ic = T.axis.reduce(T.int64(1024), ic_0 * T.int64(16) + ic_1)
                        v_kh = T.axis.reduce(T.int64(1), kh_0 + kh_1)
                        v_kw = T.axis.reduce(T.int64(1), kw_0 + kw_1)
                        T.reads(p0[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)], p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block])
                        T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                        T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                        with T.init():
                            conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = T.float32(0)
                        conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] + p0[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)] * p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block]
                for ax0, ax1, ax2, ax3, ax4 in T.grid(T.int64(1), T.int64(128), T.int64(14), T.int64(14), T.int64(2)):
                    with T.block("T_relu"):
                        v_ax0, v_ax1, v_ax2, v_ax3 = T.axis.remap("SSSS", [ax0, ax1, ax2, ax3])
                        v_ax4 = T.axis.spatial(T.int64(4), oc_block_0 * T.int64(2) + ax4)
                        T.reads(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4])
                        T.writes(T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                        T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.max(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] + p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4], T.float32(0))
b0 = sch.get_block(name="conv2d_NCHWc", func_name="main")
b1 = sch.get_block(name="T_add", func_name="main")
b2 = sch.get_block(name="root", func_name="main")
sch.compute_inline(block=b1)
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.tiling_structure", ann_val="SSRSRS")
l3, l4, l5, l6, l7, l8, l9, l10 = sch.get_loops(block=b0)
v11, v12, v13, v14 = sch.sample_perfect_tile(loop=l3, n=4, max_innermost_factor=64, decision=[1, 1, 1, 1])
l15, l16, l17, l18 = sch.split(loop=l3, factors=[v11, v12, v13, v14], preserve_unit_iters=True)
v19, v20, v21, v22 = sch.sample_perfect_tile(loop=l4, n=4, max_innermost_factor=64, decision=[1, 1, 16, 8])
l23, l24, l25, l26 = sch.split(loop=l4, factors=[v19, v20, v21, v22], preserve_unit_iters=True)
v27, v28, v29, v30 = sch.sample_perfect_tile(loop=l5, n=4, max_innermost_factor=64, decision=[1, 14, 1, 1])
l31, l32, l33, l34 = sch.split(loop=l5, factors=[v27, v28, v29, v30], preserve_unit_iters=True)
v35, v36, v37, v38 = sch.sample_perfect_tile(loop=l6, n=4, max_innermost_factor=64, decision=[1, 7, 2, 1])
l39, l40, l41, l42 = sch.split(loop=l6, factors=[v35, v36, v37, v38], preserve_unit_iters=True)
v43, v44, v45, v46 = sch.sample_perfect_tile(loop=l7, n=4, max_innermost_factor=64, decision=[2, 2, 1, 1])
l47, l48, l49, l50 = sch.split(loop=l7, factors=[v43, v44, v45, v46], preserve_unit_iters=True)
v51, v52 = sch.sample_perfect_tile(loop=l8, n=2, max_innermost_factor=64, decision=[64, 16])
l53, l54 = sch.split(loop=l8, factors=[v51, v52], preserve_unit_iters=True)
v55, v56 = sch.sample_perfect_tile(loop=l9, n=2, max_innermost_factor=64, decision=[1, 1])
l57, l58 = sch.split(loop=l9, factors=[v55, v56], preserve_unit_iters=True)
v59, v60 = sch.sample_perfect_tile(loop=l10, n=2, max_innermost_factor=64, decision=[1, 1])
l61, l62 = sch.split(loop=l10, factors=[v59, v60], preserve_unit_iters=True)
sch.reorder(l15, l23, l31, l39, l47, l16, l24, l32, l40, l48, l53, l57, l61, l17, l25, l33, l41, l49, l54, l58, l62, l18, l26, l34, l42, l50)
b63, = sch.get_consumers(block=b0)
sch.reverse_compute_at(block=b63, loop=l47, preserve_unit_loops=True, index=-1)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.vectorize", ann_val=64)
v64 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=1)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.unroll_explicit", ann_val=v64)
2024-04-29 08:04:58 [INFO] [evolutionary_search.cc:713] Generating candidates......
2024-04-29 08:04:58 [INFO] [evolutionary_search.cc:715] Picked top 0 candidate(s) from database
2024-04-29 08:05:00 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0xd9d3ef8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0xac11768)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x1167e528)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0xa8a2b38)]: 0 failure(s)
2024-04-29 08:05:00 [INFO] [evolutionary_search.cc:723] Sampled 512 candidate(s)
2024-04-29 08:05:03 [INFO] [evolutionary_search.cc:621] Evolve iter #0 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0xd9d3ef8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0xac11768)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x1167e528)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0xa8a2b38)]: 0 failure(s)
2024-04-29 08:05:06 [INFO] [evolutionary_search.cc:621] Evolve iter #1 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0xd9d3ef8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0xac11768)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x1167e528)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0xa8a2b38)]: 0 failure(s)
2024-04-29 08:05:09 [INFO] [evolutionary_search.cc:621] Evolve iter #2 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0xd9d3ef8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0xac11768)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x1167e528)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0xa8a2b38)]: 0 failure(s)
2024-04-29 08:05:12 [INFO] [evolutionary_search.cc:621] Evolve iter #3 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0xd9d3ef8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0xac11768)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x1167e528)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0xa8a2b38)]: 0 failure(s)
2024-04-29 08:05:13 [INFO] [evolutionary_search.cc:649] Scores of the best 64 candidates:
[1 : 16]:	0.9995  0.9990  0.9988  0.9977  0.9976  0.9971  0.9967  0.9964  0.9964  0.9963  0.9960  0.9959  0.9958  0.9945  0.9941  0.9940
[17 : 32]:	0.9934  0.9928  0.9922  0.9920  0.9920  0.9919  0.9913  0.9906  0.9904  0.9901  0.9900  0.9890  0.9886  0.9883  0.9871  0.9869
[33 : 48]:	0.9864  0.9853  0.9851  0.9838  0.9834  0.9827  0.9821  0.9816  0.9815  0.9807  0.9800  0.9800  0.9794  0.9791  0.9784  0.9783
[49 : 64]:	0.9783  0.9778  0.9773  0.9772  0.9771  0.9757  0.9751  0.9748  0.9739  0.9730  0.9729  0.9722  0.9720  0.9719  0.9699  0.9699
2024-04-29 08:05:13 [INFO] [evolutionary_search.cc:727] Got 64 candidate(s) with evolutionary search
2024-04-29 08:05:14 [INFO] [evolutionary_search.cc:730] Sending 64 candidates(s) for measurement
2024-04-29 08:21:32 [INFO] [task_scheduler.cc:131] [Task #38: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_12] Trial #1: GFLOPs: 102.4207. Time: 2008.5941 us. Best GFLOPs: 102.4207
2024-04-29 08:21:32 [INFO] [task_scheduler.cc:131] [Task #38: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_12] Trial #2: GFLOPs: 32.4722. Time: 6335.3096 us. Best GFLOPs: 102.4207
2024-04-29 08:21:32 [INFO] [task_scheduler.cc:121] [Task #38: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_12] Trial #3: Error in building:
LocalBuilder: Timeout, killed after 30.0 seconds
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(256), T.int64(14), T.int64(14), T.int64(4)), "float32"), p1: T.Buffer((T.int64(128), T.int64(256), T.int64(1), T.int64(1), T.int64(4), T.int64(4)), "float32"), p2: T.Buffer((T.int64(1), T.int64(128), T.int64(1), T.int64(1), T.int64(4)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(128), T.int64(14), T.int64(14), T.int64(4)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        conv2d_NCHWc = T.alloc_buffer((T.int64(1), T.int64(128), T.int64(14), T.int64(14), T.int64(4)))
        for n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_fused in T.parallel(T.int64(784), annotations={"pragma_auto_unroll_max_step": 512, "pragma_unroll_explicit": 1}):
            for oc_block_1 in range(T.int64(1)):
                for n_2_init, oc_chunk_2_init, oh_2_init, ow_2_init, oc_block_2_init, n_3_init, oc_chunk_3_init, oh_3_init, ow_3_init in T.grid(T.int64(1), T.int64(8), T.int64(2), T.int64(1), T.int64(2), T.int64(1), T.int64(2), T.int64(1), T.int64(1)):
                    for oc_block_3_fused_init in T.vectorized(T.int64(2)):
                        with T.block("conv2d_NCHWc_init"):
                            v_n = T.axis.spatial(T.int64(1), n_2_init + n_3_init)
                            v_oc_chunk = T.axis.spatial(T.int64(128), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_fused // T.int64(98) * T.int64(16) + oc_chunk_2_init * T.int64(2) + oc_chunk_3_init)
                            v_oh = T.axis.spatial(T.int64(14), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_fused % T.int64(98) // T.int64(14) * T.int64(2) + oh_2_init + oh_3_init)
                            v_ow = T.axis.spatial(T.int64(14), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_fused % T.int64(14) + ow_2_init + ow_3_init)
                            v_oc_block = T.axis.spatial(T.int64(4), oc_block_1 * T.int64(4) + oc_block_2_init * T.int64(2) + oc_block_3_fused_init)
                            T.reads()
                            T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                            T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                            conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = T.float32(0)
                for ic_0, kh_0, kw_0, n_2, oc_chunk_2, oh_2, ow_2, oc_block_2, ic_1, kh_1, kw_1, n_3, oc_chunk_3, oh_3, ow_3 in T.grid(T.int64(16), T.int64(1), T.int64(1), T.int64(1), T.int64(8), T.int64(2), T.int64(1), T.int64(2), T.int64(64), T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(1), T.int64(1)):
                    for oc_block_3_fused in T.vectorized(T.int64(2)):
                        with T.block("conv2d_NCHWc_update"):
                            v_n = T.axis.spatial(T.int64(1), n_2 + n_3)
                            v_oc_chunk = T.axis.spatial(T.int64(128), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_fused // T.int64(98) * T.int64(16) + oc_chunk_2 * T.int64(2) + oc_chunk_3)
                            v_oh = T.axis.spatial(T.int64(14), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_fused % T.int64(98) // T.int64(14) * T.int64(2) + oh_2 + oh_3)
                            v_ow = T.axis.spatial(T.int64(14), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_fused % T.int64(14) + ow_2 + ow_3)
                            v_oc_block = T.axis.spatial(T.int64(4), oc_block_1 * T.int64(4) + oc_block_2 * T.int64(2) + oc_block_3_fused)
                            v_ic = T.axis.reduce(T.int64(1024), ic_0 * T.int64(64) + ic_1)
                            v_kh = T.axis.reduce(T.int64(1), kh_0 + kh_1)
                            v_kw = T.axis.reduce(T.int64(1), kw_0 + kw_1)
                            T.reads(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block], p0[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)], p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block])
                            T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                            T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                            conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] + p0[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)] * p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block]
        for ax0_ax1_ax2_ax3_ax4_fused_0 in T.parallel(T.int64(1568)):
            for ax0_ax1_ax2_ax3_ax4_fused_1 in T.vectorized(T.int64(64)):
                with T.block("T_relu"):
                    v_ax0 = T.axis.spatial(T.int64(1), T.int64(0))
                    v_ax1 = T.axis.spatial(T.int64(128), (ax0_ax1_ax2_ax3_ax4_fused_0 * T.int64(64) + ax0_ax1_ax2_ax3_ax4_fused_1) // T.int64(784))
                    v_ax2 = T.axis.spatial(T.int64(14), (ax0_ax1_ax2_ax3_ax4_fused_0 * T.int64(64) + ax0_ax1_ax2_ax3_ax4_fused_1) % T.int64(784) // T.int64(56))
                    v_ax3 = T.axis.spatial(T.int64(14), (ax0_ax1_ax2_ax3_ax4_fused_0 * T.int64(64) + ax0_ax1_ax2_ax3_ax4_fused_1) % T.int64(56) // T.int64(4))
                    v_ax4 = T.axis.spatial(T.int64(4), (ax0_ax1_ax2_ax3_ax4_fused_0 * T.int64(64) + ax0_ax1_ax2_ax3_ax4_fused_1) % T.int64(4))
                    T.reads(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4])
                    T.writes(T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                    T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.max(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] + p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4], T.float32(0))
b0 = sch.get_block(name="conv2d_NCHWc", func_name="main")
b1 = sch.get_block(name="T_add", func_name="main")
b2 = sch.get_block(name="root", func_name="main")
sch.compute_inline(block=b1)
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.tiling_structure", ann_val="SSRSRS")
l3, l4, l5, l6, l7, l8, l9, l10 = sch.get_loops(block=b0)
v11, v12, v13, v14 = sch.sample_perfect_tile(loop=l3, n=4, max_innermost_factor=64, decision=[1, 1, 1, 1])
l15, l16, l17, l18 = sch.split(loop=l3, factors=[v11, v12, v13, v14], preserve_unit_iters=True)
v19, v20, v21, v22 = sch.sample_perfect_tile(loop=l4, n=4, max_innermost_factor=64, decision=[4, 2, 8, 2])
l23, l24, l25, l26 = sch.split(loop=l4, factors=[v19, v20, v21, v22], preserve_unit_iters=True)
v27, v28, v29, v30 = sch.sample_perfect_tile(loop=l5, n=4, max_innermost_factor=64, decision=[1, 7, 2, 1])
l31, l32, l33, l34 = sch.split(loop=l5, factors=[v27, v28, v29, v30], preserve_unit_iters=True)
v35, v36, v37, v38 = sch.sample_perfect_tile(loop=l6, n=4, max_innermost_factor=64, decision=[1, 14, 1, 1])
l39, l40, l41, l42 = sch.split(loop=l6, factors=[v35, v36, v37, v38], preserve_unit_iters=True)
v43, v44, v45, v46 = sch.sample_perfect_tile(loop=l7, n=4, max_innermost_factor=64, decision=[1, 1, 2, 2])
l47, l48, l49, l50 = sch.split(loop=l7, factors=[v43, v44, v45, v46], preserve_unit_iters=True)
v51, v52 = sch.sample_perfect_tile(loop=l8, n=2, max_innermost_factor=64, decision=[16, 64])
l53, l54 = sch.split(loop=l8, factors=[v51, v52], preserve_unit_iters=True)
v55, v56 = sch.sample_perfect_tile(loop=l9, n=2, max_innermost_factor=64, decision=[1, 1])
l57, l58 = sch.split(loop=l9, factors=[v55, v56], preserve_unit_iters=True)
v59, v60 = sch.sample_perfect_tile(loop=l10, n=2, max_innermost_factor=64, decision=[1, 1])
l61, l62 = sch.split(loop=l10, factors=[v59, v60], preserve_unit_iters=True)
sch.reorder(l15, l23, l31, l39, l47, l16, l24, l32, l40, l48, l53, l57, l61, l17, l25, l33, l41, l49, l54, l58, l62, l18, l26, l34, l42, l50)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.vectorize", ann_val=64)
v63 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.unroll_explicit", ann_val=v63)
sch.enter_postproc()
b64 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b64, ann_key="meta_schedule.parallel")
sch.unannotate(block_or_loop=b64, ann_key="meta_schedule.vectorize")
sch.unannotate(block_or_loop=b64, ann_key="meta_schedule.unroll_explicit")
b65, b66 = sch.get_child_blocks(b64)
l67, l68, l69, l70, l71, l72, l73, l74, l75, l76, l77, l78, l79, l80, l81, l82, l83, l84, l85, l86, l87, l88, l89, l90, l91, l92 = sch.get_loops(block=b65)
l93 = sch.fuse(l67, l68, l69, l70, l71, l72, l73, l74, l75, preserve_unit_iters=True)
sch.parallel(loop=l93)
l94 = sch.fuse(l92, preserve_unit_iters=True)
sch.vectorize(loop=l94)
sch.annotate(block_or_loop=l93, ann_key="pragma_auto_unroll_max_step", ann_val=512)
sch.annotate(block_or_loop=l93, ann_key="pragma_unroll_explicit", ann_val=1)
l95, l96, l97, l98, l99 = sch.get_loops(block=b66)
l100 = sch.fuse(l95, l96, l97, l98, l99, preserve_unit_iters=True)
l101, l102 = sch.split(loop=l100, factors=[None, 64], preserve_unit_iters=True)
sch.parallel(loop=l101)
sch.vectorize(loop=l102)
b103 = sch.get_block(name="conv2d_NCHWc", func_name="main")
l104, l105, l106, l107, l108, l109, l110, l111, l112, l113, l114, l115, l116, l117, l118, l119, l120, l121 = sch.get_loops(block=b103)
b122 = sch.decompose_reduction(block=b103, loop=l106)
2024-04-29 08:21:32 [INFO] [task_scheduler.cc:131] [Task #38: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_12] Trial #4: GFLOPs: 75.9149. Time: 2709.8958 us. Best GFLOPs: 102.4207
2024-04-29 08:21:32 [INFO] [task_scheduler.cc:121] [Task #38: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_12] Trial #5: Error in building:
LocalBuilder: Timeout, killed after 30.0 seconds
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(256), T.int64(14), T.int64(14), T.int64(4)), "float32"), p1: T.Buffer((T.int64(128), T.int64(256), T.int64(1), T.int64(1), T.int64(4), T.int64(4)), "float32"), p2: T.Buffer((T.int64(1), T.int64(128), T.int64(1), T.int64(1), T.int64(4)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(128), T.int64(14), T.int64(14), T.int64(4)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        conv2d_NCHWc = T.alloc_buffer((T.int64(1), T.int64(128), T.int64(14), T.int64(14), T.int64(4)))
        for n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused in T.parallel(T.int64(392), annotations={"pragma_auto_unroll_max_step": 512, "pragma_unroll_explicit": 1}):
            for n_2_init, oc_chunk_2_init, oh_2_init, ow_2_init, oc_block_2_init, n_3_init, oc_chunk_3_init, oh_3_init, ow_3_init in T.grid(T.int64(1), T.int64(2), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(64), T.int64(1), T.int64(1)):
                for oc_block_3_fused_init in T.vectorized(T.int64(2)):
                    with T.block("conv2d_NCHWc_init"):
                        v_n = T.axis.spatial(T.int64(1), n_2_init + n_3_init)
                        v_oc_chunk = T.axis.spatial(T.int64(128), oc_chunk_2_init * T.int64(64) + oc_chunk_3_init)
                        v_oh = T.axis.spatial(T.int64(14), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused // T.int64(56) * T.int64(2) + n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused % T.int64(4) // T.int64(2) + oh_2_init + oh_3_init)
                        v_ow = T.axis.spatial(T.int64(14), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused % T.int64(56) // T.int64(4) + ow_2_init + ow_3_init)
                        v_oc_block = T.axis.spatial(T.int64(4), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused % T.int64(2) * T.int64(2) + oc_block_2_init * T.int64(2) + oc_block_3_fused_init)
                        T.reads()
                        T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                        T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                        conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = T.float32(0)
            for ic_0, kh_0, kw_0, n_2, oc_chunk_2, oh_2, ow_2, oc_block_2, ic_1, kh_1, kw_1, n_3, oc_chunk_3, oh_3, ow_3 in T.grid(T.int64(128), T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(1), T.int64(1), T.int64(1), T.int64(8), T.int64(1), T.int64(1), T.int64(1), T.int64(64), T.int64(1), T.int64(1)):
                for oc_block_3_fused in T.vectorized(T.int64(2)):
                    with T.block("conv2d_NCHWc_update"):
                        v_n = T.axis.spatial(T.int64(1), n_2 + n_3)
                        v_oc_chunk = T.axis.spatial(T.int64(128), oc_chunk_2 * T.int64(64) + oc_chunk_3)
                        v_oh = T.axis.spatial(T.int64(14), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused // T.int64(56) * T.int64(2) + n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused % T.int64(4) // T.int64(2) + oh_2 + oh_3)
                        v_ow = T.axis.spatial(T.int64(14), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused % T.int64(56) // T.int64(4) + ow_2 + ow_3)
                        v_oc_block = T.axis.spatial(T.int64(4), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused % T.int64(2) * T.int64(2) + oc_block_2 * T.int64(2) + oc_block_3_fused)
                        v_ic = T.axis.reduce(T.int64(1024), ic_0 * T.int64(8) + ic_1)
                        v_kh = T.axis.reduce(T.int64(1), kh_0 + kh_1)
                        v_kw = T.axis.reduce(T.int64(1), kw_0 + kw_1)
                        T.reads(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block], p0[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)], p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block])
                        T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                        T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                        conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] + p0[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)] * p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block]
        for ax0_ax1_ax2_ax3_ax4_fused_0 in T.parallel(T.int64(1568)):
            for ax0_ax1_ax2_ax3_ax4_fused_1 in T.vectorized(T.int64(64)):
                with T.block("T_relu"):
                    v_ax0 = T.axis.spatial(T.int64(1), T.int64(0))
                    v_ax1 = T.axis.spatial(T.int64(128), (ax0_ax1_ax2_ax3_ax4_fused_0 * T.int64(64) + ax0_ax1_ax2_ax3_ax4_fused_1) // T.int64(784))
                    v_ax2 = T.axis.spatial(T.int64(14), (ax0_ax1_ax2_ax3_ax4_fused_0 * T.int64(64) + ax0_ax1_ax2_ax3_ax4_fused_1) % T.int64(784) // T.int64(56))
                    v_ax3 = T.axis.spatial(T.int64(14), (ax0_ax1_ax2_ax3_ax4_fused_0 * T.int64(64) + ax0_ax1_ax2_ax3_ax4_fused_1) % T.int64(56) // T.int64(4))
                    v_ax4 = T.axis.spatial(T.int64(4), (ax0_ax1_ax2_ax3_ax4_fused_0 * T.int64(64) + ax0_ax1_ax2_ax3_ax4_fused_1) % T.int64(4))
                    T.reads(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4])
                    T.writes(T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                    T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.max(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] + p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4], T.float32(0))
b0 = sch.get_block(name="conv2d_NCHWc", func_name="main")
b1 = sch.get_block(name="T_add", func_name="main")
b2 = sch.get_block(name="root", func_name="main")
sch.compute_inline(block=b1)
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.tiling_structure", ann_val="SSRSRS")
l3, l4, l5, l6, l7, l8, l9, l10 = sch.get_loops(block=b0)
v11, v12, v13, v14 = sch.sample_perfect_tile(loop=l3, n=4, max_innermost_factor=64, decision=[1, 1, 1, 1])
l15, l16, l17, l18 = sch.split(loop=l3, factors=[v11, v12, v13, v14], preserve_unit_iters=True)
v19, v20, v21, v22 = sch.sample_perfect_tile(loop=l4, n=4, max_innermost_factor=64, decision=[1, 1, 2, 64])
l23, l24, l25, l26 = sch.split(loop=l4, factors=[v19, v20, v21, v22], preserve_unit_iters=True)
v27, v28, v29, v30 = sch.sample_perfect_tile(loop=l5, n=4, max_innermost_factor=64, decision=[7, 2, 1, 1])
l31, l32, l33, l34 = sch.split(loop=l5, factors=[v27, v28, v29, v30], preserve_unit_iters=True)
v35, v36, v37, v38 = sch.sample_perfect_tile(loop=l6, n=4, max_innermost_factor=64, decision=[14, 1, 1, 1])
l39, l40, l41, l42 = sch.split(loop=l6, factors=[v35, v36, v37, v38], preserve_unit_iters=True)
v43, v44, v45, v46 = sch.sample_perfect_tile(loop=l7, n=4, max_innermost_factor=64, decision=[1, 2, 1, 2])
l47, l48, l49, l50 = sch.split(loop=l7, factors=[v43, v44, v45, v46], preserve_unit_iters=True)
v51, v52 = sch.sample_perfect_tile(loop=l8, n=2, max_innermost_factor=64, decision=[128, 8])
l53, l54 = sch.split(loop=l8, factors=[v51, v52], preserve_unit_iters=True)
v55, v56 = sch.sample_perfect_tile(loop=l9, n=2, max_innermost_factor=64, decision=[1, 1])
l57, l58 = sch.split(loop=l9, factors=[v55, v56], preserve_unit_iters=True)
v59, v60 = sch.sample_perfect_tile(loop=l10, n=2, max_innermost_factor=64, decision=[1, 1])
l61, l62 = sch.split(loop=l10, factors=[v59, v60], preserve_unit_iters=True)
sch.reorder(l15, l23, l31, l39, l47, l16, l24, l32, l40, l48, l53, l57, l61, l17, l25, l33, l41, l49, l54, l58, l62, l18, l26, l34, l42, l50)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.vectorize", ann_val=64)
v63 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.unroll_explicit", ann_val=v63)
sch.enter_postproc()
b64 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b64, ann_key="meta_schedule.parallel")
sch.unannotate(block_or_loop=b64, ann_key="meta_schedule.vectorize")
sch.unannotate(block_or_loop=b64, ann_key="meta_schedule.unroll_explicit")
b65, b66 = sch.get_child_blocks(b64)
l67, l68, l69, l70, l71, l72, l73, l74, l75, l76, l77, l78, l79, l80, l81, l82, l83, l84, l85, l86, l87, l88, l89, l90, l91, l92 = sch.get_loops(block=b65)
l93 = sch.fuse(l67, l68, l69, l70, l71, l72, l73, l74, l75, l76, preserve_unit_iters=True)
sch.parallel(loop=l93)
l94 = sch.fuse(l92, preserve_unit_iters=True)
sch.vectorize(loop=l94)
sch.annotate(block_or_loop=l93, ann_key="pragma_auto_unroll_max_step", ann_val=512)
sch.annotate(block_or_loop=l93, ann_key="pragma_unroll_explicit", ann_val=1)
l95, l96, l97, l98, l99 = sch.get_loops(block=b66)
l100 = sch.fuse(l95, l96, l97, l98, l99, preserve_unit_iters=True)
l101, l102 = sch.split(loop=l100, factors=[None, 64], preserve_unit_iters=True)
sch.parallel(loop=l101)
sch.vectorize(loop=l102)
b103 = sch.get_block(name="conv2d_NCHWc", func_name="main")
l104, l105, l106, l107, l108, l109, l110, l111, l112, l113, l114, l115, l116, l117, l118, l119, l120 = sch.get_loops(block=b103)
b121 = sch.decompose_reduction(block=b103, loop=l105)
2024-04-29 08:21:32 [INFO] [task_scheduler.cc:131] [Task #38: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_12] Trial #6: GFLOPs: 26.3880. Time: 7796.0209 us. Best GFLOPs: 102.4207
2024-04-29 08:21:32 [INFO] [task_scheduler.cc:131] [Task #38: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_12] Trial #7: GFLOPs: 4.5497. Time: 45216.4987 us. Best GFLOPs: 102.4207
2024-04-29 08:21:32 [INFO] [task_scheduler.cc:131] [Task #38: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_12] Trial #8: GFLOPs: 80.4211. Time: 2558.0561 us. Best GFLOPs: 102.4207
2024-04-29 08:21:32 [INFO] [task_scheduler.cc:131] [Task #38: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_12] Trial #9: GFLOPs: 132.0158. Time: 1558.3103 us. Best GFLOPs: 132.0158
2024-04-29 08:21:32 [INFO] [task_scheduler.cc:131] [Task #38: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_12] Trial #10: GFLOPs: 95.3827. Time: 2156.8030 us. Best GFLOPs: 132.0158
2024-04-29 08:21:32 [INFO] [task_scheduler.cc:131] [Task #38: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_12] Trial #11: GFLOPs: 13.7014. Time: 15014.6465 us. Best GFLOPs: 132.0158
2024-04-29 08:21:32 [INFO] [task_scheduler.cc:131] [Task #38: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_12] Trial #12: GFLOPs: 1.6006. Time: 128531.3837 us. Best GFLOPs: 132.0158
2024-04-29 08:21:32 [INFO] [task_scheduler.cc:131] [Task #38: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_12] Trial #13: GFLOPs: 4.4570. Time: 46156.5340 us. Best GFLOPs: 132.0158
2024-04-29 08:21:32 [INFO] [task_scheduler.cc:131] [Task #38: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_12] Trial #14: GFLOPs: 64.5990. Time: 3184.5927 us. Best GFLOPs: 132.0158
2024-04-29 08:21:32 [INFO] [task_scheduler.cc:131] [Task #38: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_12] Trial #15: GFLOPs: 85.5296. Time: 2405.2668 us. Best GFLOPs: 132.0158
2024-04-29 08:21:32 [INFO] [task_scheduler.cc:131] [Task #38: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_12] Trial #16: GFLOPs: 13.1532. Time: 15640.4257 us. Best GFLOPs: 132.0158
2024-04-29 08:21:32 [INFO] [task_scheduler.cc:131] [Task #38: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_12] Trial #17: GFLOPs: 65.0565. Time: 3162.1968 us. Best GFLOPs: 132.0158
2024-04-29 08:21:32 [INFO] [task_scheduler.cc:131] [Task #38: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_12] Trial #18: GFLOPs: 108.4843. Time: 1896.3260 us. Best GFLOPs: 132.0158
2024-04-29 08:21:32 [INFO] [task_scheduler.cc:131] [Task #38: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_12] Trial #19: GFLOPs: 36.3051. Time: 5666.4670 us. Best GFLOPs: 132.0158
2024-04-29 08:21:32 [INFO] [task_scheduler.cc:131] [Task #38: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_12] Trial #20: GFLOPs: 21.5975. Time: 9525.2593 us. Best GFLOPs: 132.0158
2024-04-29 08:21:32 [INFO] [task_scheduler.cc:131] [Task #38: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_12] Trial #21: GFLOPs: 26.5261. Time: 7755.4468 us. Best GFLOPs: 132.0158
2024-04-29 08:21:32 [INFO] [task_scheduler.cc:131] [Task #38: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_12] Trial #22: GFLOPs: 1.1714. Time: 175616.5700 us. Best GFLOPs: 132.0158
2024-04-29 08:21:32 [INFO] [task_scheduler.cc:131] [Task #38: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_12] Trial #23: GFLOPs: 193.0334. Time: 1065.7305 us. Best GFLOPs: 193.0334
2024-04-29 08:21:32 [INFO] [task_scheduler.cc:131] [Task #38: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_12] Trial #24: GFLOPs: 77.3265. Time: 2660.4292 us. Best GFLOPs: 193.0334
2024-04-29 08:21:32 [INFO] [task_scheduler.cc:131] [Task #38: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_12] Trial #25: GFLOPs: 3.4680. Time: 59320.7227 us. Best GFLOPs: 193.0334
2024-04-29 08:21:32 [INFO] [task_scheduler.cc:131] [Task #38: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_12] Trial #26: GFLOPs: 69.5281. Time: 2958.8273 us. Best GFLOPs: 193.0334
2024-04-29 08:21:32 [INFO] [task_scheduler.cc:131] [Task #38: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_12] Trial #27: GFLOPs: 4.5859. Time: 44859.3863 us. Best GFLOPs: 193.0334
2024-04-29 08:21:32 [INFO] [task_scheduler.cc:131] [Task #38: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_12] Trial #28: GFLOPs: 60.2543. Time: 3414.2213 us. Best GFLOPs: 193.0334
2024-04-29 08:21:32 [INFO] [task_scheduler.cc:131] [Task #38: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_12] Trial #29: GFLOPs: 130.2645. Time: 1579.2602 us. Best GFLOPs: 193.0334
2024-04-29 08:21:32 [INFO] [task_scheduler.cc:131] [Task #38: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_12] Trial #30: GFLOPs: 50.8332. Time: 4046.9900 us. Best GFLOPs: 193.0334
2024-04-29 08:21:32 [INFO] [task_scheduler.cc:131] [Task #38: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_12] Trial #31: GFLOPs: 103.7376. Time: 1983.0955 us. Best GFLOPs: 193.0334
2024-04-29 08:21:32 [INFO] [task_scheduler.cc:131] [Task #38: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_12] Trial #32: GFLOPs: 0.7869. Time: 261418.2700 us. Best GFLOPs: 193.0334
2024-04-29 08:21:32 [INFO] [task_scheduler.cc:131] [Task #38: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_12] Trial #33: GFLOPs: 0.6348. Time: 324080.2657 us. Best GFLOPs: 193.0334
2024-04-29 08:21:32 [INFO] [task_scheduler.cc:131] [Task #38: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_12] Trial #34: GFLOPs: 35.8141. Time: 5744.1525 us. Best GFLOPs: 193.0334
2024-04-29 08:21:32 [INFO] [task_scheduler.cc:131] [Task #38: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_12] Trial #35: GFLOPs: 4.4817. Time: 45902.4493 us. Best GFLOPs: 193.0334
2024-04-29 08:21:32 [INFO] [task_scheduler.cc:131] [Task #38: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_12] Trial #36: GFLOPs: 1.9580. Time: 105064.9610 us. Best GFLOPs: 193.0334
2024-04-29 08:21:32 [INFO] [task_scheduler.cc:131] [Task #38: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_12] Trial #37: GFLOPs: 89.2918. Time: 2303.9242 us. Best GFLOPs: 193.0334
2024-04-29 08:21:32 [INFO] [task_scheduler.cc:121] [Task #38: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_12] Trial #38: Error in building:
LocalBuilder: Timeout, killed after 30.0 seconds
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(256), T.int64(14), T.int64(14), T.int64(4)), "float32"), p1: T.Buffer((T.int64(128), T.int64(256), T.int64(1), T.int64(1), T.int64(4), T.int64(4)), "float32"), p2: T.Buffer((T.int64(1), T.int64(128), T.int64(1), T.int64(1), T.int64(4)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(128), T.int64(14), T.int64(14), T.int64(4)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        conv2d_NCHWc = T.alloc_buffer((T.int64(1), T.int64(128), T.int64(14), T.int64(14), T.int64(4)))
        for n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused in T.parallel(T.int64(784), annotations={"pragma_auto_unroll_max_step": 512, "pragma_unroll_explicit": 1}):
            for n_2_init, oc_chunk_2_init, oh_2_init, ow_2_init, oc_block_2_init, n_3_init, oc_chunk_3_init, oh_3_init, ow_3_init in T.grid(T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(64), T.int64(1), T.int64(1)):
                for oc_block_3_fused_init in T.vectorized(T.int64(2)):
                    with T.block("conv2d_NCHWc_init"):
                        v_n = T.axis.spatial(T.int64(1), n_2_init + n_3_init)
                        v_oc_chunk = T.axis.spatial(T.int64(128), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused // T.int64(392) * T.int64(64) + oc_chunk_2_init * T.int64(64) + oc_chunk_3_init)
                        v_oh = T.axis.spatial(T.int64(14), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused % T.int64(392) // T.int64(56) * T.int64(2) + n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused % T.int64(4) // T.int64(2) + oh_2_init + oh_3_init)
                        v_ow = T.axis.spatial(T.int64(14), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused % T.int64(56) // T.int64(4) + ow_2_init + ow_3_init)
                        v_oc_block = T.axis.spatial(T.int64(4), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused % T.int64(2) * T.int64(2) + oc_block_2_init * T.int64(2) + oc_block_3_fused_init)
                        T.reads()
                        T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                        T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                        conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = T.float32(0)
            for ic_0, kh_0, kw_0, n_2, oc_chunk_2, oh_2, ow_2, oc_block_2, ic_1, kh_1, kw_1, n_3, oc_chunk_3, oh_3, ow_3 in T.grid(T.int64(128), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(8), T.int64(1), T.int64(1), T.int64(1), T.int64(64), T.int64(1), T.int64(1)):
                for oc_block_3_fused in T.vectorized(T.int64(2)):
                    with T.block("conv2d_NCHWc_update"):
                        v_n = T.axis.spatial(T.int64(1), n_2 + n_3)
                        v_oc_chunk = T.axis.spatial(T.int64(128), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused // T.int64(392) * T.int64(64) + oc_chunk_2 * T.int64(64) + oc_chunk_3)
                        v_oh = T.axis.spatial(T.int64(14), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused % T.int64(392) // T.int64(56) * T.int64(2) + n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused % T.int64(4) // T.int64(2) + oh_2 + oh_3)
                        v_ow = T.axis.spatial(T.int64(14), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused % T.int64(56) // T.int64(4) + ow_2 + ow_3)
                        v_oc_block = T.axis.spatial(T.int64(4), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused % T.int64(2) * T.int64(2) + oc_block_2 * T.int64(2) + oc_block_3_fused)
                        v_ic = T.axis.reduce(T.int64(1024), ic_0 * T.int64(8) + ic_1)
                        v_kh = T.axis.reduce(T.int64(1), kh_0 + kh_1)
                        v_kw = T.axis.reduce(T.int64(1), kw_0 + kw_1)
                        T.reads(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block], p0[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)], p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block])
                        T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                        T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                        conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] + p0[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)] * p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block]
        for ax0_ax1_ax2_ax3_ax4_fused_0 in T.parallel(T.int64(1568)):
            for ax0_ax1_ax2_ax3_ax4_fused_1 in T.vectorized(T.int64(64)):
                with T.block("T_relu"):
                    v_ax0 = T.axis.spatial(T.int64(1), T.int64(0))
                    v_ax1 = T.axis.spatial(T.int64(128), (ax0_ax1_ax2_ax3_ax4_fused_0 * T.int64(64) + ax0_ax1_ax2_ax3_ax4_fused_1) // T.int64(784))
                    v_ax2 = T.axis.spatial(T.int64(14), (ax0_ax1_ax2_ax3_ax4_fused_0 * T.int64(64) + ax0_ax1_ax2_ax3_ax4_fused_1) % T.int64(784) // T.int64(56))
                    v_ax3 = T.axis.spatial(T.int64(14), (ax0_ax1_ax2_ax3_ax4_fused_0 * T.int64(64) + ax0_ax1_ax2_ax3_ax4_fused_1) % T.int64(56) // T.int64(4))
                    v_ax4 = T.axis.spatial(T.int64(4), (ax0_ax1_ax2_ax3_ax4_fused_0 * T.int64(64) + ax0_ax1_ax2_ax3_ax4_fused_1) % T.int64(4))
                    T.reads(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4])
                    T.writes(T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                    T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.max(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] + p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4], T.float32(0))
b0 = sch.get_block(name="conv2d_NCHWc", func_name="main")
b1 = sch.get_block(name="T_add", func_name="main")
b2 = sch.get_block(name="root", func_name="main")
sch.compute_inline(block=b1)
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.tiling_structure", ann_val="SSRSRS")
l3, l4, l5, l6, l7, l8, l9, l10 = sch.get_loops(block=b0)
v11, v12, v13, v14 = sch.sample_perfect_tile(loop=l3, n=4, max_innermost_factor=64, decision=[1, 1, 1, 1])
l15, l16, l17, l18 = sch.split(loop=l3, factors=[v11, v12, v13, v14], preserve_unit_iters=True)
v19, v20, v21, v22 = sch.sample_perfect_tile(loop=l4, n=4, max_innermost_factor=64, decision=[2, 1, 1, 64])
l23, l24, l25, l26 = sch.split(loop=l4, factors=[v19, v20, v21, v22], preserve_unit_iters=True)
v27, v28, v29, v30 = sch.sample_perfect_tile(loop=l5, n=4, max_innermost_factor=64, decision=[7, 2, 1, 1])
l31, l32, l33, l34 = sch.split(loop=l5, factors=[v27, v28, v29, v30], preserve_unit_iters=True)
v35, v36, v37, v38 = sch.sample_perfect_tile(loop=l6, n=4, max_innermost_factor=64, decision=[14, 1, 1, 1])
l39, l40, l41, l42 = sch.split(loop=l6, factors=[v35, v36, v37, v38], preserve_unit_iters=True)
v43, v44, v45, v46 = sch.sample_perfect_tile(loop=l7, n=4, max_innermost_factor=64, decision=[1, 2, 1, 2])
l47, l48, l49, l50 = sch.split(loop=l7, factors=[v43, v44, v45, v46], preserve_unit_iters=True)
v51, v52 = sch.sample_perfect_tile(loop=l8, n=2, max_innermost_factor=64, decision=[128, 8])
l53, l54 = sch.split(loop=l8, factors=[v51, v52], preserve_unit_iters=True)
v55, v56 = sch.sample_perfect_tile(loop=l9, n=2, max_innermost_factor=64, decision=[1, 1])
l57, l58 = sch.split(loop=l9, factors=[v55, v56], preserve_unit_iters=True)
v59, v60 = sch.sample_perfect_tile(loop=l10, n=2, max_innermost_factor=64, decision=[1, 1])
l61, l62 = sch.split(loop=l10, factors=[v59, v60], preserve_unit_iters=True)
sch.reorder(l15, l23, l31, l39, l47, l16, l24, l32, l40, l48, l53, l57, l61, l17, l25, l33, l41, l49, l54, l58, l62, l18, l26, l34, l42, l50)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.vectorize", ann_val=64)
v63 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.unroll_explicit", ann_val=v63)
sch.enter_postproc()
b64 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b64, ann_key="meta_schedule.parallel")
sch.unannotate(block_or_loop=b64, ann_key="meta_schedule.vectorize")
sch.unannotate(block_or_loop=b64, ann_key="meta_schedule.unroll_explicit")
b65, b66 = sch.get_child_blocks(b64)
l67, l68, l69, l70, l71, l72, l73, l74, l75, l76, l77, l78, l79, l80, l81, l82, l83, l84, l85, l86, l87, l88, l89, l90, l91, l92 = sch.get_loops(block=b65)
l93 = sch.fuse(l67, l68, l69, l70, l71, l72, l73, l74, l75, l76, preserve_unit_iters=True)
sch.parallel(loop=l93)
l94 = sch.fuse(l92, preserve_unit_iters=True)
sch.vectorize(loop=l94)
sch.annotate(block_or_loop=l93, ann_key="pragma_auto_unroll_max_step", ann_val=512)
sch.annotate(block_or_loop=l93, ann_key="pragma_unroll_explicit", ann_val=1)
l95, l96, l97, l98, l99 = sch.get_loops(block=b66)
l100 = sch.fuse(l95, l96, l97, l98, l99, preserve_unit_iters=True)
l101, l102 = sch.split(loop=l100, factors=[None, 64], preserve_unit_iters=True)
sch.parallel(loop=l101)
sch.vectorize(loop=l102)
b103 = sch.get_block(name="conv2d_NCHWc", func_name="main")
l104, l105, l106, l107, l108, l109, l110, l111, l112, l113, l114, l115, l116, l117, l118, l119, l120 = sch.get_loops(block=b103)
b121 = sch.decompose_reduction(block=b103, loop=l105)
2024-04-29 08:21:32 [INFO] [task_scheduler.cc:131] [Task #38: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_12] Trial #39: GFLOPs: 4.1291. Time: 49822.1093 us. Best GFLOPs: 193.0334
2024-04-29 08:21:32 [INFO] [task_scheduler.cc:131] [Task #38: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_12] Trial #40: GFLOPs: 1.5982. Time: 128723.0950 us. Best GFLOPs: 193.0334
2024-04-29 08:21:32 [INFO] [task_scheduler.cc:131] [Task #38: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_12] Trial #41: GFLOPs: 160.7319. Time: 1279.9054 us. Best GFLOPs: 193.0334
2024-04-29 08:21:32 [INFO] [task_scheduler.cc:121] [Task #38: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_12] Trial #42: Error in building:
LocalBuilder: Timeout, killed after 30.0 seconds
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(256), T.int64(14), T.int64(14), T.int64(4)), "float32"), p1: T.Buffer((T.int64(128), T.int64(256), T.int64(1), T.int64(1), T.int64(4), T.int64(4)), "float32"), p2: T.Buffer((T.int64(1), T.int64(128), T.int64(1), T.int64(1), T.int64(4)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(128), T.int64(14), T.int64(14), T.int64(4)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        conv2d_NCHWc = T.alloc_buffer((T.int64(1), T.int64(128), T.int64(14), T.int64(14), T.int64(4)))
        for n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_fused in T.parallel(T.int64(32), annotations={"pragma_auto_unroll_max_step": 512, "pragma_unroll_explicit": 1}):
            for n_1, oc_chunk_1, oh_1, ow_1, oc_block_1 in T.grid(T.int64(1), T.int64(2), T.int64(7), T.int64(7), T.int64(2)):
                for n_2_init, oc_chunk_2_init, oh_2_init, ow_2_init, oc_block_2_init, n_3_init, oc_chunk_3_init, oh_3_init, ow_3_init in T.grid(T.int64(1), T.int64(4), T.int64(2), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1)):
                    for oc_block_3_fused_init in T.vectorized(T.int64(2)):
                        with T.block("conv2d_NCHWc_init"):
                            v_n = T.axis.spatial(T.int64(1), n_1 + n_2_init + n_3_init)
                            v_oc_chunk = T.axis.spatial(T.int64(128), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_fused // T.int64(2) * T.int64(8) + oc_chunk_1 * T.int64(4) + oc_chunk_2_init + oc_chunk_3_init)
                            v_oh = T.axis.spatial(T.int64(14), oh_1 * T.int64(2) + oh_2_init + oh_3_init)
                            v_ow = T.axis.spatial(T.int64(14), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_fused % T.int64(2) * T.int64(7) + ow_1 + ow_2_init + ow_3_init)
                            v_oc_block = T.axis.spatial(T.int64(4), oc_block_1 * T.int64(2) + oc_block_2_init * T.int64(2) + oc_block_3_fused_init)
                            T.reads()
                            T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                            T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                            conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = T.float32(0)
                for ic_0, kh_0, kw_0, n_2, oc_chunk_2, oh_2, ow_2, oc_block_2, ic_1, kh_1, kw_1, n_3, oc_chunk_3, oh_3, ow_3 in T.grid(T.int64(16), T.int64(1), T.int64(1), T.int64(1), T.int64(4), T.int64(2), T.int64(1), T.int64(1), T.int64(64), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1)):
                    for oc_block_3_fused in T.vectorized(T.int64(2)):
                        with T.block("conv2d_NCHWc_update"):
                            v_n = T.axis.spatial(T.int64(1), n_1 + n_2 + n_3)
                            v_oc_chunk = T.axis.spatial(T.int64(128), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_fused // T.int64(2) * T.int64(8) + oc_chunk_1 * T.int64(4) + oc_chunk_2 + oc_chunk_3)
                            v_oh = T.axis.spatial(T.int64(14), oh_1 * T.int64(2) + oh_2 + oh_3)
                            v_ow = T.axis.spatial(T.int64(14), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_fused % T.int64(2) * T.int64(7) + ow_1 + ow_2 + ow_3)
                            v_oc_block = T.axis.spatial(T.int64(4), oc_block_1 * T.int64(2) + oc_block_2 * T.int64(2) + oc_block_3_fused)
                            v_ic = T.axis.reduce(T.int64(1024), ic_0 * T.int64(64) + ic_1)
                            v_kh = T.axis.reduce(T.int64(1), kh_0 + kh_1)
                            v_kw = T.axis.reduce(T.int64(1), kw_0 + kw_1)
                            T.reads(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block], p0[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)], p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block])
                            T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                            T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                            conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] + p0[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)] * p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block]
            for ax0, ax1, ax2 in T.grid(T.int64(1), T.int64(8), T.int64(14)):
                for ax3_ax4_fused in T.vectorized(T.int64(28)):
                    with T.block("T_relu"):
                        v_ax0 = T.axis.spatial(T.int64(1), ax0)
                        v_ax1 = T.axis.spatial(T.int64(128), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_fused // T.int64(2) * T.int64(8) + ax1)
                        v_ax2 = T.axis.spatial(T.int64(14), ax2)
                        v_ax3 = T.axis.spatial(T.int64(14), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_fused % T.int64(2) * T.int64(7) + ax3_ax4_fused // T.int64(4))
                        v_ax4 = T.axis.spatial(T.int64(4), ax3_ax4_fused % T.int64(4))
                        T.reads(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4])
                        T.writes(T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                        T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.max(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] + p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4], T.float32(0))
b0 = sch.get_block(name="conv2d_NCHWc", func_name="main")
b1 = sch.get_block(name="T_add", func_name="main")
b2 = sch.get_block(name="root", func_name="main")
sch.compute_inline(block=b1)
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.tiling_structure", ann_val="SSRSRS")
l3, l4, l5, l6, l7, l8, l9, l10 = sch.get_loops(block=b0)
v11, v12, v13, v14 = sch.sample_perfect_tile(loop=l3, n=4, max_innermost_factor=64, decision=[1, 1, 1, 1])
l15, l16, l17, l18 = sch.split(loop=l3, factors=[v11, v12, v13, v14], preserve_unit_iters=True)
v19, v20, v21, v22 = sch.sample_perfect_tile(loop=l4, n=4, max_innermost_factor=64, decision=[16, 2, 4, 1])
l23, l24, l25, l26 = sch.split(loop=l4, factors=[v19, v20, v21, v22], preserve_unit_iters=True)
v27, v28, v29, v30 = sch.sample_perfect_tile(loop=l5, n=4, max_innermost_factor=64, decision=[1, 7, 2, 1])
l31, l32, l33, l34 = sch.split(loop=l5, factors=[v27, v28, v29, v30], preserve_unit_iters=True)
v35, v36, v37, v38 = sch.sample_perfect_tile(loop=l6, n=4, max_innermost_factor=64, decision=[2, 7, 1, 1])
l39, l40, l41, l42 = sch.split(loop=l6, factors=[v35, v36, v37, v38], preserve_unit_iters=True)
v43, v44, v45, v46 = sch.sample_perfect_tile(loop=l7, n=4, max_innermost_factor=64, decision=[1, 2, 1, 2])
l47, l48, l49, l50 = sch.split(loop=l7, factors=[v43, v44, v45, v46], preserve_unit_iters=True)
v51, v52 = sch.sample_perfect_tile(loop=l8, n=2, max_innermost_factor=64, decision=[16, 64])
l53, l54 = sch.split(loop=l8, factors=[v51, v52], preserve_unit_iters=True)
v55, v56 = sch.sample_perfect_tile(loop=l9, n=2, max_innermost_factor=64, decision=[1, 1])
l57, l58 = sch.split(loop=l9, factors=[v55, v56], preserve_unit_iters=True)
v59, v60 = sch.sample_perfect_tile(loop=l10, n=2, max_innermost_factor=64, decision=[1, 1])
l61, l62 = sch.split(loop=l10, factors=[v59, v60], preserve_unit_iters=True)
sch.reorder(l15, l23, l31, l39, l47, l16, l24, l32, l40, l48, l53, l57, l61, l17, l25, l33, l41, l49, l54, l58, l62, l18, l26, l34, l42, l50)
b63, = sch.get_consumers(block=b0)
sch.reverse_compute_at(block=b63, loop=l47, preserve_unit_loops=True, index=-1)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.vectorize", ann_val=64)
v64 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.unroll_explicit", ann_val=v64)
sch.enter_postproc()
b65 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b65, ann_key="meta_schedule.parallel")
sch.unannotate(block_or_loop=b65, ann_key="meta_schedule.vectorize")
sch.unannotate(block_or_loop=b65, ann_key="meta_schedule.unroll_explicit")
b66, b67 = sch.get_child_blocks(b65)
l68, l69, l70, l71, l72, l73, l74, l75, l76, l77, l78, l79, l80, l81, l82, l83, l84, l85, l86, l87, l88, l89, l90, l91, l92, l93 = sch.get_loops(block=b66)
l94 = sch.fuse(l68, l69, l70, l71, l72, preserve_unit_iters=True)
sch.parallel(loop=l94)
l95 = sch.fuse(l93, preserve_unit_iters=True)
sch.vectorize(loop=l95)
sch.annotate(block_or_loop=l94, ann_key="pragma_auto_unroll_max_step", ann_val=512)
sch.annotate(block_or_loop=l94, ann_key="pragma_unroll_explicit", ann_val=1)
l96, l97, l98, l99, l100, l101 = sch.get_loops(block=b67)
l102 = sch.fuse(l100, l101, preserve_unit_iters=True)
sch.vectorize(loop=l102)
b103 = sch.get_block(name="conv2d_NCHWc", func_name="main")
l104, l105, l106, l107, l108, l109, l110, l111, l112, l113, l114, l115, l116, l117, l118, l119, l120, l121, l122, l123, l124, l125 = sch.get_loops(block=b103)
b126 = sch.decompose_reduction(block=b103, loop=l110)
2024-04-29 08:21:32 [INFO] [task_scheduler.cc:131] [Task #38: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_12] Trial #43: GFLOPs: 4.7230. Time: 43557.2333 us. Best GFLOPs: 193.0334
2024-04-29 08:21:32 [INFO] [task_scheduler.cc:131] [Task #38: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_12] Trial #44: GFLOPs: 26.5585. Time: 7745.9702 us. Best GFLOPs: 193.0334
2024-04-29 08:21:32 [INFO] [task_scheduler.cc:131] [Task #38: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_12] Trial #45: GFLOPs: 55.4844. Time: 3707.7346 us. Best GFLOPs: 193.0334
2024-04-29 08:21:32 [INFO] [task_scheduler.cc:131] [Task #38: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_12] Trial #46: GFLOPs: 25.1513. Time: 8179.3620 us. Best GFLOPs: 193.0334
2024-04-29 08:21:32 [INFO] [task_scheduler.cc:131] [Task #38: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_12] Trial #47: GFLOPs: 34.0800. Time: 6036.4379 us. Best GFLOPs: 193.0334
2024-04-29 08:21:32 [INFO] [task_scheduler.cc:131] [Task #38: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_12] Trial #48: GFLOPs: 51.2638. Time: 4012.9983 us. Best GFLOPs: 193.0334
2024-04-29 08:21:32 [INFO] [task_scheduler.cc:131] [Task #38: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_12] Trial #49: GFLOPs: 77.4571. Time: 2655.9428 us. Best GFLOPs: 193.0334
2024-04-29 08:21:32 [INFO] [task_scheduler.cc:121] [Task #38: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_12] Trial #50: Error in building:
LocalBuilder: Timeout, killed after 30.0 seconds
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(256), T.int64(14), T.int64(14), T.int64(4)), "float32"), p1: T.Buffer((T.int64(128), T.int64(256), T.int64(1), T.int64(1), T.int64(4), T.int64(4)), "float32"), p2: T.Buffer((T.int64(1), T.int64(128), T.int64(1), T.int64(1), T.int64(4)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(128), T.int64(14), T.int64(14), T.int64(4)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        conv2d_NCHWc = T.alloc_buffer((T.int64(1), T.int64(128), T.int64(14), T.int64(14), T.int64(4)))
        for n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_fused in T.parallel(T.int64(32), annotations={"pragma_auto_unroll_max_step": 512, "pragma_unroll_explicit": 1}):
            for n_1, oc_chunk_1, oh_1, ow_1, oc_block_1 in T.grid(T.int64(1), T.int64(8), T.int64(7), T.int64(2), T.int64(1)):
                for n_2_init, oc_chunk_2_init, oh_2_init, ow_2_init, oc_block_2_init, n_3_init, oc_chunk_3_init, oh_3_init, ow_3_init in T.grid(T.int64(1), T.int64(2), T.int64(1), T.int64(7), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1)):
                    for oc_block_3_fused_init in T.vectorized(T.int64(2)):
                        with T.block("conv2d_NCHWc_init"):
                            v_n = T.axis.spatial(T.int64(1), n_1 + n_2_init + n_3_init)
                            v_oc_chunk = T.axis.spatial(T.int64(128), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_fused // T.int64(4) * T.int64(16) + oc_chunk_1 * T.int64(2) + oc_chunk_2_init + oc_chunk_3_init)
                            v_oh = T.axis.spatial(T.int64(14), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_fused % T.int64(4) // T.int64(2) * T.int64(7) + oh_1 + oh_2_init + oh_3_init)
                            v_ow = T.axis.spatial(T.int64(14), ow_1 * T.int64(7) + ow_2_init + ow_3_init)
                            v_oc_block = T.axis.spatial(T.int64(4), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_fused % T.int64(2) * T.int64(2) + oc_block_1 * T.int64(2) + oc_block_2_init * T.int64(2) + oc_block_3_fused_init)
                            T.reads()
                            T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                            T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                            conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = T.float32(0)
                for ic_0, kh_0, kw_0, n_2, oc_chunk_2, oh_2, ow_2, oc_block_2, ic_1, kh_1, kw_1, n_3, oc_chunk_3, oh_3, ow_3 in T.grid(T.int64(32), T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(1), T.int64(7), T.int64(1), T.int64(32), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1)):
                    for oc_block_3_fused in T.vectorized(T.int64(2)):
                        with T.block("conv2d_NCHWc_update"):
                            v_n = T.axis.spatial(T.int64(1), n_1 + n_2 + n_3)
                            v_oc_chunk = T.axis.spatial(T.int64(128), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_fused // T.int64(4) * T.int64(16) + oc_chunk_1 * T.int64(2) + oc_chunk_2 + oc_chunk_3)
                            v_oh = T.axis.spatial(T.int64(14), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_fused % T.int64(4) // T.int64(2) * T.int64(7) + oh_1 + oh_2 + oh_3)
                            v_ow = T.axis.spatial(T.int64(14), ow_1 * T.int64(7) + ow_2 + ow_3)
                            v_oc_block = T.axis.spatial(T.int64(4), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_fused % T.int64(2) * T.int64(2) + oc_block_1 * T.int64(2) + oc_block_2 * T.int64(2) + oc_block_3_fused)
                            v_ic = T.axis.reduce(T.int64(1024), ic_0 * T.int64(32) + ic_1)
                            v_kh = T.axis.reduce(T.int64(1), kh_0 + kh_1)
                            v_kw = T.axis.reduce(T.int64(1), kw_0 + kw_1)
                            T.reads(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block], p0[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)], p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block])
                            T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                            T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                            conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] + p0[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)] * p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block]
            for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(16), T.int64(7), T.int64(14)):
                for ax4_fused in T.vectorized(T.int64(2)):
                    with T.block("T_relu"):
                        v_ax0 = T.axis.spatial(T.int64(1), ax0)
                        v_ax1 = T.axis.spatial(T.int64(128), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_fused // T.int64(4) * T.int64(16) + ax1)
                        v_ax2 = T.axis.spatial(T.int64(14), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_fused % T.int64(4) // T.int64(2) * T.int64(7) + ax2)
                        v_ax3 = T.axis.spatial(T.int64(14), ax3)
                        v_ax4 = T.axis.spatial(T.int64(4), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_fused % T.int64(2) * T.int64(2) + ax4_fused)
                        T.reads(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4])
                        T.writes(T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                        T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.max(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] + p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4], T.float32(0))
b0 = sch.get_block(name="conv2d_NCHWc", func_name="main")
b1 = sch.get_block(name="T_add", func_name="main")
b2 = sch.get_block(name="root", func_name="main")
sch.compute_inline(block=b1)
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.tiling_structure", ann_val="SSRSRS")
l3, l4, l5, l6, l7, l8, l9, l10 = sch.get_loops(block=b0)
v11, v12, v13, v14 = sch.sample_perfect_tile(loop=l3, n=4, max_innermost_factor=64, decision=[1, 1, 1, 1])
l15, l16, l17, l18 = sch.split(loop=l3, factors=[v11, v12, v13, v14], preserve_unit_iters=True)
v19, v20, v21, v22 = sch.sample_perfect_tile(loop=l4, n=4, max_innermost_factor=64, decision=[8, 8, 2, 1])
l23, l24, l25, l26 = sch.split(loop=l4, factors=[v19, v20, v21, v22], preserve_unit_iters=True)
v27, v28, v29, v30 = sch.sample_perfect_tile(loop=l5, n=4, max_innermost_factor=64, decision=[2, 7, 1, 1])
l31, l32, l33, l34 = sch.split(loop=l5, factors=[v27, v28, v29, v30], preserve_unit_iters=True)
v35, v36, v37, v38 = sch.sample_perfect_tile(loop=l6, n=4, max_innermost_factor=64, decision=[1, 2, 7, 1])
l39, l40, l41, l42 = sch.split(loop=l6, factors=[v35, v36, v37, v38], preserve_unit_iters=True)
v43, v44, v45, v46 = sch.sample_perfect_tile(loop=l7, n=4, max_innermost_factor=64, decision=[2, 1, 1, 2])
l47, l48, l49, l50 = sch.split(loop=l7, factors=[v43, v44, v45, v46], preserve_unit_iters=True)
v51, v52 = sch.sample_perfect_tile(loop=l8, n=2, max_innermost_factor=64, decision=[32, 32])
l53, l54 = sch.split(loop=l8, factors=[v51, v52], preserve_unit_iters=True)
v55, v56 = sch.sample_perfect_tile(loop=l9, n=2, max_innermost_factor=64, decision=[1, 1])
l57, l58 = sch.split(loop=l9, factors=[v55, v56], preserve_unit_iters=True)
v59, v60 = sch.sample_perfect_tile(loop=l10, n=2, max_innermost_factor=64, decision=[1, 1])
l61, l62 = sch.split(loop=l10, factors=[v59, v60], preserve_unit_iters=True)
sch.reorder(l15, l23, l31, l39, l47, l16, l24, l32, l40, l48, l53, l57, l61, l17, l25, l33, l41, l49, l54, l58, l62, l18, l26, l34, l42, l50)
b63, = sch.get_consumers(block=b0)
sch.reverse_compute_at(block=b63, loop=l47, preserve_unit_loops=True, index=-1)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.vectorize", ann_val=64)
v64 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.unroll_explicit", ann_val=v64)
sch.enter_postproc()
b65 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b65, ann_key="meta_schedule.parallel")
sch.unannotate(block_or_loop=b65, ann_key="meta_schedule.vectorize")
sch.unannotate(block_or_loop=b65, ann_key="meta_schedule.unroll_explicit")
b66, b67 = sch.get_child_blocks(b65)
l68, l69, l70, l71, l72, l73, l74, l75, l76, l77, l78, l79, l80, l81, l82, l83, l84, l85, l86, l87, l88, l89, l90, l91, l92, l93 = sch.get_loops(block=b66)
l94 = sch.fuse(l68, l69, l70, l71, l72, preserve_unit_iters=True)
sch.parallel(loop=l94)
l95 = sch.fuse(l93, preserve_unit_iters=True)
sch.vectorize(loop=l95)
sch.annotate(block_or_loop=l94, ann_key="pragma_auto_unroll_max_step", ann_val=512)
sch.annotate(block_or_loop=l94, ann_key="pragma_unroll_explicit", ann_val=1)
l96, l97, l98, l99, l100, l101 = sch.get_loops(block=b67)
l102 = sch.fuse(l101, preserve_unit_iters=True)
sch.vectorize(loop=l102)
b103 = sch.get_block(name="conv2d_NCHWc", func_name="main")
l104, l105, l106, l107, l108, l109, l110, l111, l112, l113, l114, l115, l116, l117, l118, l119, l120, l121, l122, l123, l124, l125 = sch.get_loops(block=b103)
b126 = sch.decompose_reduction(block=b103, loop=l110)
2024-04-29 08:21:32 [INFO] [task_scheduler.cc:131] [Task #38: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_12] Trial #51: GFLOPs: 100.3395. Time: 2050.2547 us. Best GFLOPs: 193.0334
2024-04-29 08:21:32 [INFO] [task_scheduler.cc:131] [Task #38: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_12] Trial #52: GFLOPs: 116.9788. Time: 1758.6235 us. Best GFLOPs: 193.0334
2024-04-29 08:21:32 [INFO] [task_scheduler.cc:131] [Task #38: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_12] Trial #53: GFLOPs: 2.3975. Time: 85807.3220 us. Best GFLOPs: 193.0334
2024-04-29 08:21:32 [INFO] [task_scheduler.cc:131] [Task #38: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_12] Trial #54: GFLOPs: 2.5307. Time: 81289.7623 us. Best GFLOPs: 193.0334
2024-04-29 08:21:32 [INFO] [task_scheduler.cc:131] [Task #38: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_12] Trial #55: GFLOPs: 6.8362. Time: 30092.8047 us. Best GFLOPs: 193.0334
2024-04-29 08:21:32 [INFO] [task_scheduler.cc:131] [Task #38: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_12] Trial #56: GFLOPs: 73.5173. Time: 2798.2754 us. Best GFLOPs: 193.0334
2024-04-29 08:21:32 [INFO] [task_scheduler.cc:131] [Task #38: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_12] Trial #57: GFLOPs: 8.2981. Time: 24791.3780 us. Best GFLOPs: 193.0334
2024-04-29 08:21:32 [INFO] [task_scheduler.cc:131] [Task #38: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_12] Trial #58: GFLOPs: 9.4030. Time: 21878.3348 us. Best GFLOPs: 193.0334
2024-04-29 08:21:32 [INFO] [task_scheduler.cc:131] [Task #38: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_12] Trial #59: GFLOPs: 115.7488. Time: 1777.3114 us. Best GFLOPs: 193.0334
2024-04-29 08:21:32 [INFO] [task_scheduler.cc:131] [Task #38: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_12] Trial #60: GFLOPs: 11.0456. Time: 18624.7415 us. Best GFLOPs: 193.0334
2024-04-29 08:21:32 [INFO] [task_scheduler.cc:131] [Task #38: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_12] Trial #61: GFLOPs: 1.2694. Time: 162061.6750 us. Best GFLOPs: 193.0334
2024-04-29 08:21:32 [INFO] [task_scheduler.cc:131] [Task #38: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_12] Trial #62: GFLOPs: 7.5209. Time: 27353.4790 us. Best GFLOPs: 193.0334
2024-04-29 08:21:32 [INFO] [task_scheduler.cc:131] [Task #38: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_12] Trial #63: GFLOPs: 43.0262. Time: 4781.3139 us. Best GFLOPs: 193.0334
2024-04-29 08:21:32 [INFO] [task_scheduler.cc:131] [Task #38: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_12] Trial #64: GFLOPs: 1.4700. Time: 139943.3783 us. Best GFLOPs: 193.0334
2024-04-29 09:21:28 [INFO] [evolutionary_search.cc:713] Generating candidates......
2024-04-29 09:21:28 [INFO] [evolutionary_search.cc:715] Picked top 59 candidate(s) from database
2024-04-29 09:21:30 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0xd9d3ef8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0xac11768)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x1167e528)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0xa8a2b38)]: 0 failure(s)
2024-04-29 09:21:30 [INFO] [evolutionary_search.cc:723] Sampled 453 candidate(s)
2024-04-29 09:21:35 [INFO] [evolutionary_search.cc:621] Evolve iter #0 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0xd9d3ef8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0xac11768)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x1167e528)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0xa8a2b38)]: 0 failure(s)
2024-04-29 09:21:41 [INFO] [evolutionary_search.cc:621] Evolve iter #1 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0xd9d3ef8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0xac11768)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x1167e528)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0xa8a2b38)]: 0 failure(s)
2024-04-29 09:21:46 [INFO] [evolutionary_search.cc:621] Evolve iter #2 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0xd9d3ef8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0xac11768)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x1167e528)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0xa8a2b38)]: 0 failure(s)
2024-04-29 09:21:51 [INFO] [evolutionary_search.cc:621] Evolve iter #3 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0xd9d3ef8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0xac11768)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x1167e528)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0xa8a2b38)]: 0 failure(s)
2024-04-29 09:21:54 [INFO] [evolutionary_search.cc:649] Scores of the best 64 candidates:
[1 : 16]:	0.7249  0.6864  0.6731  0.6704  0.6634  0.6493  0.6316  0.6311  0.6266  0.6263  0.6140  0.6131  0.6128  0.6124  0.6102  0.6018
[17 : 32]:	0.5957  0.5944  0.5838  0.5811  0.5793  0.5765  0.5689  0.5688  0.5660  0.5640  0.5604  0.5602  0.5572  0.5570  0.5562  0.5562
[33 : 48]:	0.5556  0.5513  0.5513  0.5503  0.5502  0.5501  0.5497  0.5491  0.5481  0.5480  0.5473  0.5471  0.5470  0.5464  0.5461  0.5457
[49 : 64]:	0.5455  0.5452  0.5443  0.5440  0.5437  0.5404  0.5401  0.5388  0.5360  0.5356  0.5354  0.5343  0.5337  0.5332  0.5331  0.5329
2024-04-29 09:21:55 [INFO] [evolutionary_search.cc:727] Got 64 candidate(s) with evolutionary search
2024-04-29 09:21:55 [INFO] [evolutionary_search.cc:730] Sending 64 candidates(s) for measurement
2024-04-29 09:23:13 [INFO] [task_scheduler.cc:131] [Task #38: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_12] Trial #65: GFLOPs: 78.6734. Time: 2614.8815 us. Best GFLOPs: 193.0334
2024-04-29 09:23:13 [INFO] [task_scheduler.cc:131] [Task #38: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_12] Trial #66: GFLOPs: 126.2374. Time: 1629.6409 us. Best GFLOPs: 193.0334
2024-04-29 09:23:13 [INFO] [task_scheduler.cc:131] [Task #38: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_12] Trial #67: GFLOPs: 202.2874. Time: 1016.9769 us. Best GFLOPs: 202.2874
2024-04-29 09:23:13 [INFO] [task_scheduler.cc:131] [Task #38: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_12] Trial #68: GFLOPs: 147.8646. Time: 1391.2836 us. Best GFLOPs: 202.2874
2024-04-29 09:23:13 [INFO] [task_scheduler.cc:131] [Task #38: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_12] Trial #69: GFLOPs: 87.5531. Time: 2349.6782 us. Best GFLOPs: 202.2874
2024-04-29 09:23:13 [INFO] [task_scheduler.cc:131] [Task #38: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_12] Trial #70: GFLOPs: 87.9526. Time: 2339.0047 us. Best GFLOPs: 202.2874
2024-04-29 09:23:13 [INFO] [task_scheduler.cc:131] [Task #38: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_12] Trial #71: GFLOPs: 113.6471. Time: 1810.1783 us. Best GFLOPs: 202.2874
2024-04-29 09:23:13 [INFO] [task_scheduler.cc:131] [Task #38: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_12] Trial #72: GFLOPs: 92.7250. Time: 2218.6208 us. Best GFLOPs: 202.2874
2024-04-29 09:23:13 [INFO] [task_scheduler.cc:131] [Task #38: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_12] Trial #73: GFLOPs: 81.7670. Time: 2515.9500 us. Best GFLOPs: 202.2874
2024-04-29 09:23:13 [INFO] [task_scheduler.cc:131] [Task #38: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_12] Trial #74: GFLOPs: 73.2727. Time: 2807.6156 us. Best GFLOPs: 202.2874
2024-04-29 09:23:13 [INFO] [task_scheduler.cc:131] [Task #38: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_12] Trial #75: GFLOPs: 63.8395. Time: 3222.4808 us. Best GFLOPs: 202.2874
2024-04-29 09:23:13 [INFO] [task_scheduler.cc:131] [Task #38: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_12] Trial #76: GFLOPs: 144.7036. Time: 1421.6754 us. Best GFLOPs: 202.2874
2024-04-29 09:23:13 [INFO] [task_scheduler.cc:131] [Task #38: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_12] Trial #77: GFLOPs: 111.1952. Time: 1850.0939 us. Best GFLOPs: 202.2874
2024-04-29 09:23:13 [INFO] [task_scheduler.cc:131] [Task #38: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_12] Trial #78: GFLOPs: 191.2175. Time: 1075.8514 us. Best GFLOPs: 202.2874
2024-04-29 09:23:13 [INFO] [task_scheduler.cc:131] [Task #38: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_12] Trial #79: GFLOPs: 168.2586. Time: 1222.6511 us. Best GFLOPs: 202.2874
2024-04-29 09:23:13 [INFO] [task_scheduler.cc:131] [Task #38: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_12] Trial #80: GFLOPs: 104.2498. Time: 1973.3530 us. Best GFLOPs: 202.2874
2024-04-29 09:23:13 [INFO] [task_scheduler.cc:131] [Task #38: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_12] Trial #81: GFLOPs: 69.8163. Time: 2946.6120 us. Best GFLOPs: 202.2874
2024-04-29 09:23:13 [INFO] [task_scheduler.cc:131] [Task #38: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_12] Trial #82: GFLOPs: 109.1655. Time: 1884.4933 us. Best GFLOPs: 202.2874
2024-04-29 09:23:13 [INFO] [task_scheduler.cc:131] [Task #38: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_12] Trial #83: GFLOPs: 82.8497. Time: 2483.0687 us. Best GFLOPs: 202.2874
2024-04-29 09:23:13 [INFO] [task_scheduler.cc:131] [Task #38: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_12] Trial #84: GFLOPs: 76.0961. Time: 2703.4448 us. Best GFLOPs: 202.2874
2024-04-29 09:23:13 [INFO] [task_scheduler.cc:131] [Task #38: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_12] Trial #85: GFLOPs: 130.8588. Time: 1572.0889 us. Best GFLOPs: 202.2874
2024-04-29 09:23:13 [INFO] [task_scheduler.cc:131] [Task #38: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_12] Trial #86: GFLOPs: 169.7263. Time: 1212.0787 us. Best GFLOPs: 202.2874
2024-04-29 09:23:13 [INFO] [task_scheduler.cc:131] [Task #38: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_12] Trial #87: GFLOPs: 148.7433. Time: 1383.0651 us. Best GFLOPs: 202.2874
2024-04-29 09:23:13 [INFO] [task_scheduler.cc:131] [Task #38: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_12] Trial #88: GFLOPs: 151.2249. Time: 1360.3683 us. Best GFLOPs: 202.2874
2024-04-29 09:23:13 [INFO] [task_scheduler.cc:131] [Task #38: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_12] Trial #89: GFLOPs: 155.2592. Time: 1325.0200 us. Best GFLOPs: 202.2874
2024-04-29 09:23:13 [INFO] [task_scheduler.cc:131] [Task #38: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_12] Trial #90: GFLOPs: 128.7081. Time: 1598.3576 us. Best GFLOPs: 202.2874
2024-04-29 09:23:13 [INFO] [task_scheduler.cc:131] [Task #38: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_12] Trial #91: GFLOPs: 114.6035. Time: 1795.0727 us. Best GFLOPs: 202.2874
2024-04-29 09:23:13 [INFO] [task_scheduler.cc:131] [Task #38: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_12] Trial #92: GFLOPs: 141.2244. Time: 1456.6997 us. Best GFLOPs: 202.2874
2024-04-29 09:23:13 [INFO] [task_scheduler.cc:131] [Task #38: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_12] Trial #93: GFLOPs: 84.6090. Time: 2431.4397 us. Best GFLOPs: 202.2874
2024-04-29 09:23:13 [INFO] [task_scheduler.cc:131] [Task #38: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_12] Trial #94: GFLOPs: 118.5486. Time: 1735.3360 us. Best GFLOPs: 202.2874
2024-04-29 09:23:13 [INFO] [task_scheduler.cc:131] [Task #38: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_12] Trial #95: GFLOPs: 138.1439. Time: 1489.1837 us. Best GFLOPs: 202.2874
2024-04-29 09:23:13 [INFO] [task_scheduler.cc:131] [Task #38: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_12] Trial #96: GFLOPs: 167.0469. Time: 1231.5202 us. Best GFLOPs: 202.2874
2024-04-29 09:23:13 [INFO] [task_scheduler.cc:131] [Task #38: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_12] Trial #97: GFLOPs: 106.2202. Time: 1936.7458 us. Best GFLOPs: 202.2874
2024-04-29 09:23:13 [INFO] [task_scheduler.cc:131] [Task #38: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_12] Trial #98: GFLOPs: 144.1122. Time: 1427.5102 us. Best GFLOPs: 202.2874
2024-04-29 09:23:13 [INFO] [task_scheduler.cc:131] [Task #38: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_12] Trial #99: GFLOPs: 163.5102. Time: 1258.1574 us. Best GFLOPs: 202.2874
2024-04-29 09:23:13 [INFO] [task_scheduler.cc:131] [Task #38: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_12] Trial #100: GFLOPs: 115.7041. Time: 1777.9976 us. Best GFLOPs: 202.2874
2024-04-29 09:23:13 [INFO] [task_scheduler.cc:131] [Task #38: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_12] Trial #101: GFLOPs: 174.7840. Time: 1177.0047 us. Best GFLOPs: 202.2874
2024-04-29 09:23:13 [INFO] [task_scheduler.cc:131] [Task #38: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_12] Trial #102: GFLOPs: 96.4212. Time: 2133.5731 us. Best GFLOPs: 202.2874
2024-04-29 09:23:13 [INFO] [task_scheduler.cc:131] [Task #38: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_12] Trial #103: GFLOPs: 113.2987. Time: 1815.7448 us. Best GFLOPs: 202.2874
2024-04-29 09:23:13 [INFO] [task_scheduler.cc:131] [Task #38: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_12] Trial #104: GFLOPs: 146.2694. Time: 1406.4572 us. Best GFLOPs: 202.2874
2024-04-29 09:23:13 [INFO] [task_scheduler.cc:131] [Task #38: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_12] Trial #105: GFLOPs: 116.9900. Time: 1758.4545 us. Best GFLOPs: 202.2874
2024-04-29 09:23:13 [INFO] [task_scheduler.cc:131] [Task #38: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_12] Trial #106: GFLOPs: 144.9796. Time: 1418.9693 us. Best GFLOPs: 202.2874
2024-04-29 09:23:13 [INFO] [task_scheduler.cc:131] [Task #38: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_12] Trial #107: GFLOPs: 89.5179. Time: 2298.1051 us. Best GFLOPs: 202.2874
2024-04-29 09:23:13 [INFO] [task_scheduler.cc:131] [Task #38: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_12] Trial #108: GFLOPs: 76.0625. Time: 2704.6399 us. Best GFLOPs: 202.2874
2024-04-29 09:23:13 [INFO] [task_scheduler.cc:131] [Task #38: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_12] Trial #109: GFLOPs: 150.6466. Time: 1365.5904 us. Best GFLOPs: 202.2874
2024-04-29 09:23:13 [INFO] [task_scheduler.cc:131] [Task #38: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_12] Trial #110: GFLOPs: 94.7866. Time: 2170.3649 us. Best GFLOPs: 202.2874
2024-04-29 09:23:13 [INFO] [task_scheduler.cc:131] [Task #38: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_12] Trial #111: GFLOPs: 159.0480. Time: 1293.4559 us. Best GFLOPs: 202.2874
2024-04-29 09:23:13 [INFO] [task_scheduler.cc:131] [Task #38: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_12] Trial #112: GFLOPs: 101.6305. Time: 2024.2111 us. Best GFLOPs: 202.2874
2024-04-29 09:23:13 [INFO] [task_scheduler.cc:131] [Task #38: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_12] Trial #113: GFLOPs: 70.2970. Time: 2926.4623 us. Best GFLOPs: 202.2874
2024-04-29 09:23:13 [INFO] [task_scheduler.cc:131] [Task #38: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_12] Trial #114: GFLOPs: 91.3965. Time: 2250.8694 us. Best GFLOPs: 202.2874
2024-04-29 09:23:13 [INFO] [task_scheduler.cc:131] [Task #38: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_12] Trial #115: GFLOPs: 90.2858. Time: 2278.5597 us. Best GFLOPs: 202.2874
2024-04-29 09:23:13 [INFO] [task_scheduler.cc:131] [Task #38: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_12] Trial #116: GFLOPs: 102.2474. Time: 2011.9986 us. Best GFLOPs: 202.2874
2024-04-29 09:23:13 [INFO] [task_scheduler.cc:131] [Task #38: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_12] Trial #117: GFLOPs: 166.2779. Time: 1237.2158 us. Best GFLOPs: 202.2874
2024-04-29 09:23:13 [INFO] [task_scheduler.cc:131] [Task #38: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_12] Trial #118: GFLOPs: 75.9702. Time: 2707.9264 us. Best GFLOPs: 202.2874
2024-04-29 09:23:13 [INFO] [task_scheduler.cc:131] [Task #38: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_12] Trial #119: GFLOPs: 229.3976. Time: 896.7907 us. Best GFLOPs: 229.3976
2024-04-29 09:23:13 [INFO] [task_scheduler.cc:131] [Task #38: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_12] Trial #120: GFLOPs: 124.1785. Time: 1656.6602 us. Best GFLOPs: 229.3976
2024-04-29 09:23:13 [INFO] [task_scheduler.cc:131] [Task #38: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_12] Trial #121: GFLOPs: 92.6401. Time: 2220.6545 us. Best GFLOPs: 229.3976
2024-04-29 09:23:13 [INFO] [task_scheduler.cc:131] [Task #38: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_12] Trial #122: GFLOPs: 144.6460. Time: 1422.2419 us. Best GFLOPs: 229.3976
2024-04-29 09:23:13 [INFO] [task_scheduler.cc:131] [Task #38: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_12] Trial #123: GFLOPs: 180.2464. Time: 1141.3353 us. Best GFLOPs: 229.3976
2024-04-29 09:23:13 [INFO] [task_scheduler.cc:131] [Task #38: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_12] Trial #124: GFLOPs: 127.3642. Time: 1615.2233 us. Best GFLOPs: 229.3976
2024-04-29 09:23:13 [INFO] [task_scheduler.cc:131] [Task #38: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_12] Trial #125: GFLOPs: 52.4536. Time: 3921.9700 us. Best GFLOPs: 229.3976
2024-04-29 09:23:13 [INFO] [task_scheduler.cc:131] [Task #38: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_12] Trial #126: GFLOPs: 183.6215. Time: 1120.3567 us. Best GFLOPs: 229.3976
2024-04-29 09:23:13 [INFO] [task_scheduler.cc:131] [Task #38: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_12] Trial #127: GFLOPs: 29.3738. Time: 7003.5865 us. Best GFLOPs: 229.3976
2024-04-29 09:23:13 [INFO] [task_scheduler.cc:131] [Task #38: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_12] Trial #128: GFLOPs: 68.1295. Time: 3019.5686 us. Best GFLOPs: 229.3976
2024-04-29 10:21:07 [INFO] [evolutionary_search.cc:713] Generating candidates......
2024-04-29 10:21:07 [INFO] [evolutionary_search.cc:715] Picked top 102 candidate(s) from database
2024-04-29 10:21:10 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0xd9d3ef8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0xac11768)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x1167e528)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0xa8a2b38)]: 0 failure(s)
2024-04-29 10:21:10 [INFO] [evolutionary_search.cc:723] Sampled 410 candidate(s)
2024-04-29 10:21:15 [INFO] [evolutionary_search.cc:621] Evolve iter #0 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0xd9d3ef8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0xac11768)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x1167e528)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0xa8a2b38)]: 0 failure(s)
2024-04-29 10:21:20 [INFO] [evolutionary_search.cc:621] Evolve iter #1 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0xd9d3ef8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0xac11768)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x1167e528)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0xa8a2b38)]: 0 failure(s)
2024-04-29 10:21:26 [INFO] [evolutionary_search.cc:621] Evolve iter #2 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0xd9d3ef8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0xac11768)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x1167e528)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0xa8a2b38)]: 0 failure(s)
2024-04-29 10:21:31 [INFO] [evolutionary_search.cc:621] Evolve iter #3 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0xd9d3ef8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0xac11768)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x1167e528)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0xa8a2b38)]: 0 failure(s)
2024-04-29 10:21:34 [INFO] [evolutionary_search.cc:649] Scores of the best 64 candidates:
[1 : 16]:	0.9480  0.9479  0.8835  0.8434  0.8406  0.8406  0.8388  0.8388  0.8355  0.8343  0.8170  0.8080  0.8048  0.7959  0.7883  0.7754
[17 : 32]:	0.7700  0.7600  0.7549  0.7517  0.7381  0.7365  0.7365  0.7314  0.7302  0.7259  0.7140  0.7091  0.7052  0.7036  0.6940  0.6939
[33 : 48]:	0.6895  0.6868  0.6868  0.6868  0.6823  0.6804  0.6800  0.6764  0.6764  0.6764  0.6741  0.6676  0.6647  0.6624  0.6598  0.6595
[49 : 64]:	0.6584  0.6582  0.6574  0.6569  0.6561  0.6553  0.6528  0.6528  0.6528  0.6496  0.6496  0.6478  0.6478  0.6470  0.6467  0.6461
2024-04-29 10:21:34 [INFO] [evolutionary_search.cc:727] Got 64 candidate(s) with evolutionary search
2024-04-29 10:21:34 [INFO] [evolutionary_search.cc:730] Sending 64 candidates(s) for measurement
2024-04-29 10:23:02 [INFO] [task_scheduler.cc:131] [Task #38: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_12] Trial #129: GFLOPs: 249.7197. Time: 823.8099 us. Best GFLOPs: 249.7197
2024-04-29 10:23:02 [INFO] [task_scheduler.cc:131] [Task #38: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_12] Trial #130: GFLOPs: 236.5250. Time: 869.7667 us. Best GFLOPs: 249.7197
2024-04-29 10:23:02 [INFO] [task_scheduler.cc:131] [Task #38: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_12] Trial #131: GFLOPs: 162.1299. Time: 1268.8693 us. Best GFLOPs: 249.7197
2024-04-29 10:23:02 [INFO] [task_scheduler.cc:131] [Task #38: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_12] Trial #132: GFLOPs: 175.5354. Time: 1171.9664 us. Best GFLOPs: 249.7197
2024-04-29 10:23:02 [INFO] [task_scheduler.cc:131] [Task #38: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_12] Trial #133: GFLOPs: 145.4146. Time: 1414.7245 us. Best GFLOPs: 249.7197
2024-04-29 10:23:02 [INFO] [task_scheduler.cc:131] [Task #38: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_12] Trial #134: GFLOPs: 174.4211. Time: 1179.4539 us. Best GFLOPs: 249.7197
2024-04-29 10:23:02 [INFO] [task_scheduler.cc:131] [Task #38: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_12] Trial #135: GFLOPs: 198.5494. Time: 1036.1232 us. Best GFLOPs: 249.7197
2024-04-29 10:23:02 [INFO] [task_scheduler.cc:131] [Task #38: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_12] Trial #136: GFLOPs: 160.7467. Time: 1279.7875 us. Best GFLOPs: 249.7197
2024-04-29 10:23:02 [INFO] [task_scheduler.cc:131] [Task #38: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_12] Trial #137: GFLOPs: 178.2405. Time: 1154.1796 us. Best GFLOPs: 249.7197
2024-04-29 10:23:02 [INFO] [task_scheduler.cc:131] [Task #38: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_12] Trial #138: GFLOPs: 142.0739. Time: 1447.9899 us. Best GFLOPs: 249.7197
2024-04-29 10:23:02 [INFO] [task_scheduler.cc:131] [Task #38: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_12] Trial #139: GFLOPs: 204.6407. Time: 1005.2818 us. Best GFLOPs: 249.7197
2024-04-29 10:23:02 [INFO] [task_scheduler.cc:131] [Task #38: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_12] Trial #140: GFLOPs: 152.9023. Time: 1345.4447 us. Best GFLOPs: 249.7197
2024-04-29 10:23:02 [INFO] [task_scheduler.cc:131] [Task #38: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_12] Trial #141: GFLOPs: 189.8169. Time: 1083.7898 us. Best GFLOPs: 249.7197
2024-04-29 10:23:02 [INFO] [task_scheduler.cc:131] [Task #38: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_12] Trial #142: GFLOPs: 175.2776. Time: 1173.6904 us. Best GFLOPs: 249.7197
2024-04-29 10:23:02 [INFO] [task_scheduler.cc:131] [Task #38: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_12] Trial #143: GFLOPs: 153.6692. Time: 1338.7299 us. Best GFLOPs: 249.7197
2024-04-29 10:23:02 [INFO] [task_scheduler.cc:131] [Task #38: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_12] Trial #144: GFLOPs: 154.1250. Time: 1334.7714 us. Best GFLOPs: 249.7197
2024-04-29 10:23:02 [INFO] [task_scheduler.cc:131] [Task #38: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_12] Trial #145: GFLOPs: 177.9005. Time: 1156.3855 us. Best GFLOPs: 249.7197
2024-04-29 10:23:02 [INFO] [task_scheduler.cc:131] [Task #38: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_12] Trial #146: GFLOPs: 179.0360. Time: 1149.0517 us. Best GFLOPs: 249.7197
2024-04-29 10:23:02 [INFO] [task_scheduler.cc:131] [Task #38: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_12] Trial #147: GFLOPs: 123.6449. Time: 1663.8102 us. Best GFLOPs: 249.7197
2024-04-29 10:23:02 [INFO] [task_scheduler.cc:131] [Task #38: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_12] Trial #148: GFLOPs: 174.6766. Time: 1177.7282 us. Best GFLOPs: 249.7197
2024-04-29 10:23:02 [INFO] [task_scheduler.cc:131] [Task #38: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_12] Trial #149: GFLOPs: 142.4003. Time: 1444.6716 us. Best GFLOPs: 249.7197
2024-04-29 10:23:02 [INFO] [task_scheduler.cc:131] [Task #38: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_12] Trial #150: GFLOPs: 210.9551. Time: 975.1914 us. Best GFLOPs: 249.7197
2024-04-29 10:23:02 [INFO] [task_scheduler.cc:131] [Task #38: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_12] Trial #151: GFLOPs: 113.4891. Time: 1812.6987 us. Best GFLOPs: 249.7197
2024-04-29 10:23:02 [INFO] [task_scheduler.cc:131] [Task #38: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_12] Trial #152: GFLOPs: 181.3419. Time: 1134.4408 us. Best GFLOPs: 249.7197
2024-04-29 10:23:02 [INFO] [task_scheduler.cc:131] [Task #38: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_12] Trial #153: GFLOPs: 190.7100. Time: 1078.7141 us. Best GFLOPs: 249.7197
2024-04-29 10:23:02 [INFO] [task_scheduler.cc:131] [Task #38: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_12] Trial #154: GFLOPs: 176.0628. Time: 1168.4560 us. Best GFLOPs: 249.7197
2024-04-29 10:23:02 [INFO] [task_scheduler.cc:131] [Task #38: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_12] Trial #155: GFLOPs: 137.0498. Time: 1501.0722 us. Best GFLOPs: 249.7197
2024-04-29 10:23:02 [INFO] [task_scheduler.cc:131] [Task #38: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_12] Trial #156: GFLOPs: 154.4823. Time: 1331.6836 us. Best GFLOPs: 249.7197
2024-04-29 10:23:02 [INFO] [task_scheduler.cc:131] [Task #38: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_12] Trial #157: GFLOPs: 133.9661. Time: 1535.6242 us. Best GFLOPs: 249.7197
2024-04-29 10:23:02 [INFO] [task_scheduler.cc:131] [Task #38: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_12] Trial #158: GFLOPs: 218.1723. Time: 942.9318 us. Best GFLOPs: 249.7197
2024-04-29 10:23:02 [INFO] [task_scheduler.cc:131] [Task #38: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_12] Trial #159: GFLOPs: 188.4724. Time: 1091.5213 us. Best GFLOPs: 249.7197
2024-04-29 10:23:02 [INFO] [task_scheduler.cc:131] [Task #38: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_12] Trial #160: GFLOPs: 141.3744. Time: 1455.1545 us. Best GFLOPs: 249.7197
2024-04-29 10:23:02 [INFO] [task_scheduler.cc:131] [Task #38: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_12] Trial #161: GFLOPs: 107.8598. Time: 1907.3048 us. Best GFLOPs: 249.7197
2024-04-29 10:23:02 [INFO] [task_scheduler.cc:131] [Task #38: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_12] Trial #162: GFLOPs: 168.1933. Time: 1223.1259 us. Best GFLOPs: 249.7197
2024-04-29 10:23:02 [INFO] [task_scheduler.cc:131] [Task #38: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_12] Trial #163: GFLOPs: 237.3063. Time: 866.9031 us. Best GFLOPs: 249.7197
2024-04-29 10:23:02 [INFO] [task_scheduler.cc:131] [Task #38: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_12] Trial #164: GFLOPs: 148.5505. Time: 1384.8598 us. Best GFLOPs: 249.7197
2024-04-29 10:23:02 [INFO] [task_scheduler.cc:131] [Task #38: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_12] Trial #165: GFLOPs: 149.7458. Time: 1373.8057 us. Best GFLOPs: 249.7197
2024-04-29 10:23:02 [INFO] [task_scheduler.cc:131] [Task #38: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_12] Trial #166: GFLOPs: 115.9386. Time: 1774.4007 us. Best GFLOPs: 249.7197
2024-04-29 10:23:02 [INFO] [task_scheduler.cc:131] [Task #38: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_12] Trial #167: GFLOPs: 166.9582. Time: 1232.1745 us. Best GFLOPs: 249.7197
2024-04-29 10:23:02 [INFO] [task_scheduler.cc:131] [Task #38: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_12] Trial #168: GFLOPs: 123.9282. Time: 1660.0067 us. Best GFLOPs: 249.7197
2024-04-29 10:23:02 [INFO] [task_scheduler.cc:131] [Task #38: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_12] Trial #169: GFLOPs: 83.3561. Time: 2467.9851 us. Best GFLOPs: 249.7197
2024-04-29 10:23:02 [INFO] [task_scheduler.cc:131] [Task #38: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_12] Trial #170: GFLOPs: 123.7316. Time: 1662.6443 us. Best GFLOPs: 249.7197
2024-04-29 10:23:02 [INFO] [task_scheduler.cc:131] [Task #38: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_12] Trial #171: GFLOPs: 169.8100. Time: 1211.4812 us. Best GFLOPs: 249.7197
2024-04-29 10:23:02 [INFO] [task_scheduler.cc:131] [Task #38: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_12] Trial #172: GFLOPs: 153.0005. Time: 1344.5816 us. Best GFLOPs: 249.7197
2024-04-29 10:23:02 [INFO] [task_scheduler.cc:131] [Task #38: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_12] Trial #173: GFLOPs: 128.9997. Time: 1594.7445 us. Best GFLOPs: 249.7197
2024-04-29 10:23:02 [INFO] [task_scheduler.cc:131] [Task #38: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_12] Trial #174: GFLOPs: 161.7109. Time: 1272.1570 us. Best GFLOPs: 249.7197
2024-04-29 10:23:02 [INFO] [task_scheduler.cc:131] [Task #38: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_12] Trial #175: GFLOPs: 154.2077. Time: 1334.0557 us. Best GFLOPs: 249.7197
2024-04-29 10:23:02 [INFO] [task_scheduler.cc:131] [Task #38: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_12] Trial #176: GFLOPs: 177.4065. Time: 1159.6055 us. Best GFLOPs: 249.7197
2024-04-29 10:23:02 [INFO] [task_scheduler.cc:131] [Task #38: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_12] Trial #177: GFLOPs: 126.2199. Time: 1629.8672 us. Best GFLOPs: 249.7197
2024-04-29 10:23:02 [INFO] [task_scheduler.cc:131] [Task #38: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_12] Trial #178: GFLOPs: 177.0547. Time: 1161.9099 us. Best GFLOPs: 249.7197
2024-04-29 10:23:02 [INFO] [task_scheduler.cc:131] [Task #38: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_12] Trial #179: GFLOPs: 208.2802. Time: 987.7157 us. Best GFLOPs: 249.7197
2024-04-29 10:23:02 [INFO] [task_scheduler.cc:131] [Task #38: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_12] Trial #180: GFLOPs: 196.0679. Time: 1049.2365 us. Best GFLOPs: 249.7197
2024-04-29 10:23:02 [INFO] [task_scheduler.cc:131] [Task #38: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_12] Trial #181: GFLOPs: 142.9424. Time: 1439.1927 us. Best GFLOPs: 249.7197
2024-04-29 10:23:02 [INFO] [task_scheduler.cc:131] [Task #38: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_12] Trial #182: GFLOPs: 114.0701. Time: 1803.4660 us. Best GFLOPs: 249.7197
2024-04-29 10:23:02 [INFO] [task_scheduler.cc:131] [Task #38: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_12] Trial #183: GFLOPs: 232.0696. Time: 886.4651 us. Best GFLOPs: 249.7197
2024-04-29 10:23:02 [INFO] [task_scheduler.cc:131] [Task #38: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_12] Trial #184: GFLOPs: 167.4075. Time: 1228.8673 us. Best GFLOPs: 249.7197
2024-04-29 10:23:02 [INFO] [task_scheduler.cc:131] [Task #38: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_12] Trial #185: GFLOPs: 186.2256. Time: 1104.6902 us. Best GFLOPs: 249.7197
2024-04-29 10:23:02 [INFO] [task_scheduler.cc:131] [Task #38: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_12] Trial #186: GFLOPs: 324.0795. Time: 634.7875 us. Best GFLOPs: 324.0795
2024-04-29 10:23:02 [INFO] [task_scheduler.cc:131] [Task #38: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_12] Trial #187: GFLOPs: 126.4067. Time: 1627.4580 us. Best GFLOPs: 324.0795
2024-04-29 10:23:02 [INFO] [task_scheduler.cc:131] [Task #38: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_12] Trial #188: GFLOPs: 135.5419. Time: 1517.7716 us. Best GFLOPs: 324.0795
2024-04-29 10:23:02 [INFO] [task_scheduler.cc:131] [Task #38: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_12] Trial #189: GFLOPs: 135.2039. Time: 1521.5651 us. Best GFLOPs: 324.0795
2024-04-29 10:23:02 [INFO] [task_scheduler.cc:131] [Task #38: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_12] Trial #190: GFLOPs: 11.1532. Time: 18445.0080 us. Best GFLOPs: 324.0795
2024-04-29 10:23:02 [INFO] [task_scheduler.cc:131] [Task #38: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_12] Trial #191: GFLOPs: 114.6418. Time: 1794.4726 us. Best GFLOPs: 324.0795
2024-04-29 10:23:02 [INFO] [task_scheduler.cc:131] [Task #38: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_12] Trial #192: GFLOPs: 2.5306. Time: 81294.1103 us. Best GFLOPs: 324.0795
2024-04-29 12:21:07 [INFO] [evolutionary_search.cc:713] Generating candidates......
2024-04-29 12:21:08 [INFO] [evolutionary_search.cc:715] Picked top 102 candidate(s) from database
2024-04-29 12:21:10 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0xd9d3ef8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0xac11768)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x1167e528)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0xa8a2b38)]: 0 failure(s)
2024-04-29 12:21:10 [INFO] [evolutionary_search.cc:723] Sampled 410 candidate(s)
2024-04-29 12:21:15 [INFO] [evolutionary_search.cc:621] Evolve iter #0 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0xd9d3ef8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0xac11768)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x1167e528)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0xa8a2b38)]: 0 failure(s)
2024-04-29 12:21:20 [INFO] [evolutionary_search.cc:621] Evolve iter #1 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0xd9d3ef8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0xac11768)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x1167e528)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0xa8a2b38)]: 0 failure(s)
2024-04-29 12:21:25 [INFO] [evolutionary_search.cc:621] Evolve iter #2 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0xd9d3ef8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0xac11768)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x1167e528)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0xa8a2b38)]: 0 failure(s)
2024-04-29 12:21:30 [INFO] [evolutionary_search.cc:621] Evolve iter #3 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0xd9d3ef8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0xac11768)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x1167e528)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0xa8a2b38)]: 0 failure(s)
2024-04-29 12:21:33 [INFO] [evolutionary_search.cc:649] Scores of the best 64 candidates:
[1 : 16]:	0.8810  0.8200  0.8090  0.7208  0.6876  0.6876  0.6816  0.6661  0.6661  0.6510  0.6503  0.6369  0.6357  0.6338  0.6301  0.6246
[17 : 32]:	0.6227  0.6227  0.6188  0.6089  0.6083  0.6069  0.6069  0.6062  0.6056  0.6054  0.6050  0.5959  0.5959  0.5934  0.5932  0.5893
[33 : 48]:	0.5893  0.5886  0.5869  0.5869  0.5846  0.5846  0.5825  0.5777  0.5767  0.5740  0.5699  0.5694  0.5667  0.5667  0.5664  0.5645
[49 : 64]:	0.5605  0.5589  0.5576  0.5570  0.5568  0.5565  0.5547  0.5532  0.5527  0.5509  0.5500  0.5500  0.5498  0.5494  0.5493  0.5469
2024-04-29 12:21:34 [INFO] [evolutionary_search.cc:727] Got 64 candidate(s) with evolutionary search
2024-04-29 12:21:34 [INFO] [evolutionary_search.cc:730] Sending 64 candidates(s) for measurement
2024-04-29 12:23:10 [INFO] [task_scheduler.cc:131] [Task #38: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_12] Trial #193: GFLOPs: 320.5172. Time: 641.8427 us. Best GFLOPs: 324.0795
2024-04-29 12:23:10 [INFO] [task_scheduler.cc:131] [Task #38: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_12] Trial #194: GFLOPs: 323.7607. Time: 635.4126 us. Best GFLOPs: 324.0795
2024-04-29 12:23:10 [INFO] [task_scheduler.cc:131] [Task #38: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_12] Trial #195: GFLOPs: 204.5419. Time: 1005.7674 us. Best GFLOPs: 324.0795
2024-04-29 12:23:10 [INFO] [task_scheduler.cc:131] [Task #38: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_12] Trial #196: GFLOPs: 219.9460. Time: 935.3276 us. Best GFLOPs: 324.0795
2024-04-29 12:23:10 [INFO] [task_scheduler.cc:131] [Task #38: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_12] Trial #197: GFLOPs: 324.3005. Time: 634.3550 us. Best GFLOPs: 324.3005
2024-04-29 12:23:10 [INFO] [task_scheduler.cc:131] [Task #38: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_12] Trial #198: GFLOPs: 259.9015. Time: 791.5369 us. Best GFLOPs: 324.3005
2024-04-29 12:23:10 [INFO] [task_scheduler.cc:131] [Task #38: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_12] Trial #199: GFLOPs: 204.1016. Time: 1007.9375 us. Best GFLOPs: 324.3005
2024-04-29 12:23:10 [INFO] [task_scheduler.cc:131] [Task #38: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_12] Trial #200: GFLOPs: 274.9878. Time: 748.1117 us. Best GFLOPs: 324.3005
2024-04-29 12:23:10 [INFO] [task_scheduler.cc:131] [Task #38: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_12] Trial #201: GFLOPs: 172.3511. Time: 1193.6195 us. Best GFLOPs: 324.3005
2024-04-29 12:23:10 [INFO] [task_scheduler.cc:121] [Task #38: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_12] Trial #202: Error in building:
LocalBuilder: Timeout, killed after 30.0 seconds
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(256), T.int64(14), T.int64(14), T.int64(4)), "float32"), p1: T.Buffer((T.int64(128), T.int64(256), T.int64(1), T.int64(1), T.int64(4), T.int64(4)), "float32"), p2: T.Buffer((T.int64(1), T.int64(128), T.int64(1), T.int64(1), T.int64(4)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(128), T.int64(14), T.int64(14), T.int64(4)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        conv2d_NCHWc = T.alloc_buffer((T.int64(1), T.int64(128), T.int64(14), T.int64(14), T.int64(4)))
        for n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_fused in T.parallel(T.int64(896), annotations={"pragma_auto_unroll_max_step": 512, "pragma_unroll_explicit": 1}):
            for oh_1, ow_1, oc_block_1 in T.grid(T.int64(2), T.int64(1), T.int64(1)):
                for n_2_init, oc_chunk_2_init, oh_2_init, ow_2_init, oc_block_2_init, n_3_init, oc_chunk_3_init, oh_3_init, ow_3_init in T.grid(T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(1), T.int64(7)):
                    for oc_block_3_fused_init in T.vectorized(T.int64(4)):
                        with T.block("conv2d_NCHWc_init"):
                            v_n = T.axis.spatial(T.int64(1), n_2_init + n_3_init)
                            v_oc_chunk = T.axis.spatial(T.int64(128), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_fused // T.int64(56) * T.int64(8) + n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_fused % T.int64(4) * T.int64(2) + oc_chunk_2_init * T.int64(2) + oc_chunk_3_init)
                            v_oh = T.axis.spatial(T.int64(14), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_fused % T.int64(56) // T.int64(8) * T.int64(2) + oh_1 + oh_2_init + oh_3_init)
                            v_ow = T.axis.spatial(T.int64(14), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_fused % T.int64(8) // T.int64(4) * T.int64(7) + ow_1 * T.int64(7) + ow_2_init * T.int64(7) + ow_3_init)
                            v_oc_block = T.axis.spatial(T.int64(4), oc_block_1 * T.int64(4) + oc_block_2_init * T.int64(4) + oc_block_3_fused_init)
                            T.reads()
                            T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                            T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                            conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = T.float32(0)
                for ic_0, kh_0, kw_0, n_2, oc_chunk_2, oh_2, ow_2, oc_block_2, ic_1, kh_1, kw_1, n_3, oc_chunk_3, oh_3, ow_3 in T.grid(T.int64(32), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(32), T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(1), T.int64(7)):
                    for oc_block_3_fused in T.vectorized(T.int64(4)):
                        with T.block("conv2d_NCHWc_update"):
                            v_n = T.axis.spatial(T.int64(1), n_2 + n_3)
                            v_oc_chunk = T.axis.spatial(T.int64(128), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_fused // T.int64(56) * T.int64(8) + n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_fused % T.int64(4) * T.int64(2) + oc_chunk_2 * T.int64(2) + oc_chunk_3)
                            v_oh = T.axis.spatial(T.int64(14), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_fused % T.int64(56) // T.int64(8) * T.int64(2) + oh_1 + oh_2 + oh_3)
                            v_ow = T.axis.spatial(T.int64(14), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_fused % T.int64(8) // T.int64(4) * T.int64(7) + ow_1 * T.int64(7) + ow_2 * T.int64(7) + ow_3)
                            v_oc_block = T.axis.spatial(T.int64(4), oc_block_1 * T.int64(4) + oc_block_2 * T.int64(4) + oc_block_3_fused)
                            v_ic = T.axis.reduce(T.int64(1024), ic_0 * T.int64(32) + ic_1)
                            v_kh = T.axis.reduce(T.int64(1), kh_0 + kh_1)
                            v_kw = T.axis.reduce(T.int64(1), kw_0 + kw_1)
                            T.reads(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block], p0[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)], p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block])
                            T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                            T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                            conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] + p0[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)] * p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block]
        for ax0_ax1_ax2_ax3_ax4_fused_0 in T.parallel(T.int64(1568)):
            for ax0_ax1_ax2_ax3_ax4_fused_1 in T.vectorized(T.int64(64)):
                with T.block("T_relu"):
                    v_ax0 = T.axis.spatial(T.int64(1), T.int64(0))
                    v_ax1 = T.axis.spatial(T.int64(128), (ax0_ax1_ax2_ax3_ax4_fused_0 * T.int64(64) + ax0_ax1_ax2_ax3_ax4_fused_1) // T.int64(784))
                    v_ax2 = T.axis.spatial(T.int64(14), (ax0_ax1_ax2_ax3_ax4_fused_0 * T.int64(64) + ax0_ax1_ax2_ax3_ax4_fused_1) % T.int64(784) // T.int64(56))
                    v_ax3 = T.axis.spatial(T.int64(14), (ax0_ax1_ax2_ax3_ax4_fused_0 * T.int64(64) + ax0_ax1_ax2_ax3_ax4_fused_1) % T.int64(56) // T.int64(4))
                    v_ax4 = T.axis.spatial(T.int64(4), (ax0_ax1_ax2_ax3_ax4_fused_0 * T.int64(64) + ax0_ax1_ax2_ax3_ax4_fused_1) % T.int64(4))
                    T.reads(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4])
                    T.writes(T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                    T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.max(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] + p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4], T.float32(0))
b0 = sch.get_block(name="conv2d_NCHWc", func_name="main")
b1 = sch.get_block(name="T_add", func_name="main")
b2 = sch.get_block(name="root", func_name="main")
sch.compute_inline(block=b1)
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.tiling_structure", ann_val="SSRSRS")
l3, l4, l5, l6, l7, l8, l9, l10 = sch.get_loops(block=b0)
v11, v12, v13, v14 = sch.sample_perfect_tile(loop=l3, n=4, max_innermost_factor=64, decision=[1, 1, 1, 1])
l15, l16, l17, l18 = sch.split(loop=l3, factors=[v11, v12, v13, v14], preserve_unit_iters=True)
v19, v20, v21, v22 = sch.sample_perfect_tile(loop=l4, n=4, max_innermost_factor=64, decision=[16, 4, 1, 2])
l23, l24, l25, l26 = sch.split(loop=l4, factors=[v19, v20, v21, v22], preserve_unit_iters=True)
v27, v28, v29, v30 = sch.sample_perfect_tile(loop=l5, n=4, max_innermost_factor=64, decision=[7, 2, 1, 1])
l31, l32, l33, l34 = sch.split(loop=l5, factors=[v27, v28, v29, v30], preserve_unit_iters=True)
v35, v36, v37, v38 = sch.sample_perfect_tile(loop=l6, n=4, max_innermost_factor=64, decision=[2, 1, 1, 7])
l39, l40, l41, l42 = sch.split(loop=l6, factors=[v35, v36, v37, v38], preserve_unit_iters=True)
v43, v44, v45, v46 = sch.sample_perfect_tile(loop=l7, n=4, max_innermost_factor=64, decision=[1, 1, 1, 4])
l47, l48, l49, l50 = sch.split(loop=l7, factors=[v43, v44, v45, v46], preserve_unit_iters=True)
v51, v52 = sch.sample_perfect_tile(loop=l8, n=2, max_innermost_factor=64, decision=[32, 32])
l53, l54 = sch.split(loop=l8, factors=[v51, v52], preserve_unit_iters=True)
v55, v56 = sch.sample_perfect_tile(loop=l9, n=2, max_innermost_factor=64, decision=[1, 1])
l57, l58 = sch.split(loop=l9, factors=[v55, v56], preserve_unit_iters=True)
v59, v60 = sch.sample_perfect_tile(loop=l10, n=2, max_innermost_factor=64, decision=[1, 1])
l61, l62 = sch.split(loop=l10, factors=[v59, v60], preserve_unit_iters=True)
sch.reorder(l15, l23, l31, l39, l47, l16, l24, l32, l40, l48, l53, l57, l61, l17, l25, l33, l41, l49, l54, l58, l62, l18, l26, l34, l42, l50)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.vectorize", ann_val=64)
v63 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.unroll_explicit", ann_val=v63)
sch.enter_postproc()
b64 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b64, ann_key="meta_schedule.parallel")
sch.unannotate(block_or_loop=b64, ann_key="meta_schedule.vectorize")
sch.unannotate(block_or_loop=b64, ann_key="meta_schedule.unroll_explicit")
b65, b66 = sch.get_child_blocks(b64)
l67, l68, l69, l70, l71, l72, l73, l74, l75, l76, l77, l78, l79, l80, l81, l82, l83, l84, l85, l86, l87, l88, l89, l90, l91, l92 = sch.get_loops(block=b65)
l93 = sch.fuse(l67, l68, l69, l70, l71, l72, l73, preserve_unit_iters=True)
sch.parallel(loop=l93)
l94 = sch.fuse(l92, preserve_unit_iters=True)
sch.vectorize(loop=l94)
sch.annotate(block_or_loop=l93, ann_key="pragma_auto_unroll_max_step", ann_val=512)
sch.annotate(block_or_loop=l93, ann_key="pragma_unroll_explicit", ann_val=1)
l95, l96, l97, l98, l99 = sch.get_loops(block=b66)
l100 = sch.fuse(l95, l96, l97, l98, l99, preserve_unit_iters=True)
l101, l102 = sch.split(loop=l100, factors=[None, 64], preserve_unit_iters=True)
sch.parallel(loop=l101)
sch.vectorize(loop=l102)
b103 = sch.get_block(name="conv2d_NCHWc", func_name="main")
l104, l105, l106, l107, l108, l109, l110, l111, l112, l113, l114, l115, l116, l117, l118, l119, l120, l121, l122, l123 = sch.get_loops(block=b103)
b124 = sch.decompose_reduction(block=b103, loop=l108)
2024-04-29 12:23:10 [INFO] [task_scheduler.cc:131] [Task #38: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_12] Trial #203: GFLOPs: 312.4726. Time: 658.3668 us. Best GFLOPs: 324.3005
2024-04-29 12:23:10 [INFO] [task_scheduler.cc:131] [Task #38: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_12] Trial #204: GFLOPs: 206.5074. Time: 996.1948 us. Best GFLOPs: 324.3005
2024-04-29 12:23:10 [INFO] [task_scheduler.cc:131] [Task #38: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_12] Trial #205: GFLOPs: 237.4953. Time: 866.2134 us. Best GFLOPs: 324.3005
2024-04-29 12:23:10 [INFO] [task_scheduler.cc:131] [Task #38: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_12] Trial #206: GFLOPs: 220.5436. Time: 932.7931 us. Best GFLOPs: 324.3005
2024-04-29 12:23:10 [INFO] [task_scheduler.cc:131] [Task #38: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_12] Trial #207: GFLOPs: 100.0206. Time: 2056.7926 us. Best GFLOPs: 324.3005
2024-04-29 12:23:10 [INFO] [task_scheduler.cc:121] [Task #38: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_12] Trial #208: Error in building:
LocalBuilder: Timeout, killed after 30.0 seconds
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(256), T.int64(14), T.int64(14), T.int64(4)), "float32"), p1: T.Buffer((T.int64(128), T.int64(256), T.int64(1), T.int64(1), T.int64(4), T.int64(4)), "float32"), p2: T.Buffer((T.int64(1), T.int64(128), T.int64(1), T.int64(1), T.int64(4)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(128), T.int64(14), T.int64(14), T.int64(4)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        conv2d_NCHWc = T.alloc_buffer((T.int64(1), T.int64(128), T.int64(14), T.int64(14), T.int64(4)))
        for n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused in T.parallel(T.int64(256), annotations={"pragma_auto_unroll_max_step": 512, "pragma_unroll_explicit": 1}):
            for n_2_init, oc_chunk_2_init, oh_2_init, ow_2_init, oc_block_2_init, n_3_init, oc_chunk_3_init, oh_3_init, ow_3_init in T.grid(T.int64(1), T.int64(1), T.int64(7), T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(1), T.int64(7)):
                for oc_block_3_fused_init in T.vectorized(T.int64(4)):
                    with T.block("conv2d_NCHWc_init"):
                        v_n = T.axis.spatial(T.int64(1), n_2_init + n_3_init)
                        v_oc_chunk = T.axis.spatial(T.int64(128), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused // T.int64(16) * T.int64(8) + n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused % T.int64(8) // T.int64(2) * T.int64(2) + oc_chunk_2_init * T.int64(2) + oc_chunk_3_init)
                        v_oh = T.axis.spatial(T.int64(14), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused % T.int64(2) * T.int64(7) + oh_2_init + oh_3_init)
                        v_ow = T.axis.spatial(T.int64(14), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused % T.int64(16) // T.int64(8) * T.int64(7) + ow_2_init * T.int64(7) + ow_3_init)
                        v_oc_block = T.axis.spatial(T.int64(4), oc_block_2_init * T.int64(4) + oc_block_3_fused_init)
                        T.reads()
                        T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                        T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                        conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = T.float32(0)
            for ic_0, kh_0, kw_0, n_2, oc_chunk_2, oh_2, ow_2, oc_block_2, ic_1, kh_1, kw_1, n_3, oc_chunk_3, oh_3, ow_3 in T.grid(T.int64(32), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(7), T.int64(1), T.int64(1), T.int64(32), T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(1), T.int64(7)):
                for oc_block_3_fused in T.vectorized(T.int64(4)):
                    with T.block("conv2d_NCHWc_update"):
                        v_n = T.axis.spatial(T.int64(1), n_2 + n_3)
                        v_oc_chunk = T.axis.spatial(T.int64(128), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused // T.int64(16) * T.int64(8) + n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused % T.int64(8) // T.int64(2) * T.int64(2) + oc_chunk_2 * T.int64(2) + oc_chunk_3)
                        v_oh = T.axis.spatial(T.int64(14), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused % T.int64(2) * T.int64(7) + oh_2 + oh_3)
                        v_ow = T.axis.spatial(T.int64(14), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused % T.int64(16) // T.int64(8) * T.int64(7) + ow_2 * T.int64(7) + ow_3)
                        v_oc_block = T.axis.spatial(T.int64(4), oc_block_2 * T.int64(4) + oc_block_3_fused)
                        v_ic = T.axis.reduce(T.int64(1024), ic_0 * T.int64(32) + ic_1)
                        v_kh = T.axis.reduce(T.int64(1), kh_0 + kh_1)
                        v_kw = T.axis.reduce(T.int64(1), kw_0 + kw_1)
                        T.reads(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block], p0[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)], p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block])
                        T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                        T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                        conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] + p0[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)] * p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block]
        for ax0_ax1_ax2_ax3_ax4_fused_0 in T.parallel(T.int64(1568)):
            for ax0_ax1_ax2_ax3_ax4_fused_1 in T.vectorized(T.int64(64)):
                with T.block("T_relu"):
                    v_ax0 = T.axis.spatial(T.int64(1), T.int64(0))
                    v_ax1 = T.axis.spatial(T.int64(128), (ax0_ax1_ax2_ax3_ax4_fused_0 * T.int64(64) + ax0_ax1_ax2_ax3_ax4_fused_1) // T.int64(784))
                    v_ax2 = T.axis.spatial(T.int64(14), (ax0_ax1_ax2_ax3_ax4_fused_0 * T.int64(64) + ax0_ax1_ax2_ax3_ax4_fused_1) % T.int64(784) // T.int64(56))
                    v_ax3 = T.axis.spatial(T.int64(14), (ax0_ax1_ax2_ax3_ax4_fused_0 * T.int64(64) + ax0_ax1_ax2_ax3_ax4_fused_1) % T.int64(56) // T.int64(4))
                    v_ax4 = T.axis.spatial(T.int64(4), (ax0_ax1_ax2_ax3_ax4_fused_0 * T.int64(64) + ax0_ax1_ax2_ax3_ax4_fused_1) % T.int64(4))
                    T.reads(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4])
                    T.writes(T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                    T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.max(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] + p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4], T.float32(0))
b0 = sch.get_block(name="conv2d_NCHWc", func_name="main")
b1 = sch.get_block(name="T_add", func_name="main")
b2 = sch.get_block(name="root", func_name="main")
sch.compute_inline(block=b1)
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.tiling_structure", ann_val="SSRSRS")
l3, l4, l5, l6, l7, l8, l9, l10 = sch.get_loops(block=b0)
v11, v12, v13, v14 = sch.sample_perfect_tile(loop=l3, n=4, max_innermost_factor=64, decision=[1, 1, 1, 1])
l15, l16, l17, l18 = sch.split(loop=l3, factors=[v11, v12, v13, v14], preserve_unit_iters=True)
v19, v20, v21, v22 = sch.sample_perfect_tile(loop=l4, n=4, max_innermost_factor=64, decision=[16, 4, 1, 2])
l23, l24, l25, l26 = sch.split(loop=l4, factors=[v19, v20, v21, v22], preserve_unit_iters=True)
v27, v28, v29, v30 = sch.sample_perfect_tile(loop=l5, n=4, max_innermost_factor=64, decision=[1, 2, 7, 1])
l31, l32, l33, l34 = sch.split(loop=l5, factors=[v27, v28, v29, v30], preserve_unit_iters=True)
v35, v36, v37, v38 = sch.sample_perfect_tile(loop=l6, n=4, max_innermost_factor=64, decision=[2, 1, 1, 7])
l39, l40, l41, l42 = sch.split(loop=l6, factors=[v35, v36, v37, v38], preserve_unit_iters=True)
v43, v44, v45, v46 = sch.sample_perfect_tile(loop=l7, n=4, max_innermost_factor=64, decision=[1, 1, 1, 4])
l47, l48, l49, l50 = sch.split(loop=l7, factors=[v43, v44, v45, v46], preserve_unit_iters=True)
v51, v52 = sch.sample_perfect_tile(loop=l8, n=2, max_innermost_factor=64, decision=[32, 32])
l53, l54 = sch.split(loop=l8, factors=[v51, v52], preserve_unit_iters=True)
v55, v56 = sch.sample_perfect_tile(loop=l9, n=2, max_innermost_factor=64, decision=[1, 1])
l57, l58 = sch.split(loop=l9, factors=[v55, v56], preserve_unit_iters=True)
v59, v60 = sch.sample_perfect_tile(loop=l10, n=2, max_innermost_factor=64, decision=[1, 1])
l61, l62 = sch.split(loop=l10, factors=[v59, v60], preserve_unit_iters=True)
sch.reorder(l15, l23, l31, l39, l47, l16, l24, l32, l40, l48, l53, l57, l61, l17, l25, l33, l41, l49, l54, l58, l62, l18, l26, l34, l42, l50)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.vectorize", ann_val=64)
v63 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.unroll_explicit", ann_val=v63)
sch.enter_postproc()
b64 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b64, ann_key="meta_schedule.parallel")
sch.unannotate(block_or_loop=b64, ann_key="meta_schedule.vectorize")
sch.unannotate(block_or_loop=b64, ann_key="meta_schedule.unroll_explicit")
b65, b66 = sch.get_child_blocks(b64)
l67, l68, l69, l70, l71, l72, l73, l74, l75, l76, l77, l78, l79, l80, l81, l82, l83, l84, l85, l86, l87, l88, l89, l90, l91, l92 = sch.get_loops(block=b65)
l93 = sch.fuse(l67, l68, l69, l70, l71, l72, l73, l74, l75, l76, preserve_unit_iters=True)
sch.parallel(loop=l93)
l94 = sch.fuse(l92, preserve_unit_iters=True)
sch.vectorize(loop=l94)
sch.annotate(block_or_loop=l93, ann_key="pragma_auto_unroll_max_step", ann_val=512)
sch.annotate(block_or_loop=l93, ann_key="pragma_unroll_explicit", ann_val=1)
l95, l96, l97, l98, l99 = sch.get_loops(block=b66)
l100 = sch.fuse(l95, l96, l97, l98, l99, preserve_unit_iters=True)
l101, l102 = sch.split(loop=l100, factors=[None, 64], preserve_unit_iters=True)
sch.parallel(loop=l101)
sch.vectorize(loop=l102)
b103 = sch.get_block(name="conv2d_NCHWc", func_name="main")
l104, l105, l106, l107, l108, l109, l110, l111, l112, l113, l114, l115, l116, l117, l118, l119, l120 = sch.get_loops(block=b103)
b121 = sch.decompose_reduction(block=b103, loop=l105)
2024-04-29 12:23:10 [INFO] [task_scheduler.cc:131] [Task #38: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_12] Trial #209: GFLOPs: 204.2782. Time: 1007.0658 us. Best GFLOPs: 324.3005
2024-04-29 12:23:10 [INFO] [task_scheduler.cc:131] [Task #38: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_12] Trial #210: GFLOPs: 203.5676. Time: 1010.5811 us. Best GFLOPs: 324.3005
2024-04-29 12:23:10 [INFO] [task_scheduler.cc:131] [Task #38: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_12] Trial #211: GFLOPs: 213.6367. Time: 962.9508 us. Best GFLOPs: 324.3005
2024-04-29 12:23:10 [INFO] [task_scheduler.cc:131] [Task #38: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_12] Trial #212: GFLOPs: 166.0391. Time: 1238.9949 us. Best GFLOPs: 324.3005
2024-04-29 12:23:10 [INFO] [task_scheduler.cc:131] [Task #38: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_12] Trial #213: GFLOPs: 137.8287. Time: 1492.5893 us. Best GFLOPs: 324.3005
2024-04-29 12:23:10 [INFO] [task_scheduler.cc:131] [Task #38: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_12] Trial #214: GFLOPs: 184.4661. Time: 1115.2271 us. Best GFLOPs: 324.3005
2024-04-29 12:23:10 [INFO] [task_scheduler.cc:131] [Task #38: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_12] Trial #215: GFLOPs: 187.1999. Time: 1098.9410 us. Best GFLOPs: 324.3005
2024-04-29 12:23:10 [INFO] [task_scheduler.cc:131] [Task #38: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_12] Trial #216: GFLOPs: 158.0502. Time: 1301.6220 us. Best GFLOPs: 324.3005
2024-04-29 12:23:10 [INFO] [task_scheduler.cc:121] [Task #38: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_12] Trial #217: Error in building:
LocalBuilder: Timeout, killed after 30.0 seconds
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(256), T.int64(14), T.int64(14), T.int64(4)), "float32"), p1: T.Buffer((T.int64(128), T.int64(256), T.int64(1), T.int64(1), T.int64(4), T.int64(4)), "float32"), p2: T.Buffer((T.int64(1), T.int64(128), T.int64(1), T.int64(1), T.int64(4)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(128), T.int64(14), T.int64(14), T.int64(4)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        conv2d_NCHWc = T.alloc_buffer((T.int64(1), T.int64(128), T.int64(14), T.int64(14), T.int64(4)))
        for n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused in T.parallel(T.int64(224), annotations={"pragma_auto_unroll_max_step": 512, "pragma_unroll_explicit": 1}):
            for n_2_init, oc_chunk_2_init, oh_2_init, ow_2_init, oc_block_2_init, n_3_init, oc_chunk_3_init, oh_3_init, ow_3_init in T.grid(T.int64(1), T.int64(4), T.int64(2), T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(1), T.int64(7)):
                for oc_block_3_fused_init in T.vectorized(T.int64(4)):
                    with T.block("conv2d_NCHWc_init"):
                        v_n = T.axis.spatial(T.int64(1), n_2_init + n_3_init)
                        v_oc_chunk = T.axis.spatial(T.int64(128), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused // T.int64(14) * T.int64(8) + oc_chunk_2_init * T.int64(2) + oc_chunk_3_init)
                        v_oh = T.axis.spatial(T.int64(14), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused % T.int64(14) // T.int64(2) * T.int64(2) + oh_2_init + oh_3_init)
                        v_ow = T.axis.spatial(T.int64(14), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused % T.int64(2) * T.int64(7) + ow_2_init * T.int64(7) + ow_3_init)
                        v_oc_block = T.axis.spatial(T.int64(4), oc_block_2_init * T.int64(4) + oc_block_3_fused_init)
                        T.reads()
                        T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                        T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                        conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = T.float32(0)
            for ic_0, kh_0, kw_0, n_2, oc_chunk_2, oh_2, ow_2, oc_block_2, ic_1, kh_1, kw_1, n_3, oc_chunk_3, oh_3, ow_3 in T.grid(T.int64(64), T.int64(1), T.int64(1), T.int64(1), T.int64(4), T.int64(2), T.int64(1), T.int64(1), T.int64(16), T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(1), T.int64(7)):
                for oc_block_3_fused in T.vectorized(T.int64(4)):
                    with T.block("conv2d_NCHWc_update"):
                        v_n = T.axis.spatial(T.int64(1), n_2 + n_3)
                        v_oc_chunk = T.axis.spatial(T.int64(128), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused // T.int64(14) * T.int64(8) + oc_chunk_2 * T.int64(2) + oc_chunk_3)
                        v_oh = T.axis.spatial(T.int64(14), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused % T.int64(14) // T.int64(2) * T.int64(2) + oh_2 + oh_3)
                        v_ow = T.axis.spatial(T.int64(14), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused % T.int64(2) * T.int64(7) + ow_2 * T.int64(7) + ow_3)
                        v_oc_block = T.axis.spatial(T.int64(4), oc_block_2 * T.int64(4) + oc_block_3_fused)
                        v_ic = T.axis.reduce(T.int64(1024), ic_0 * T.int64(16) + ic_1)
                        v_kh = T.axis.reduce(T.int64(1), kh_0 + kh_1)
                        v_kw = T.axis.reduce(T.int64(1), kw_0 + kw_1)
                        T.reads(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block], p0[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)], p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block])
                        T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                        T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                        conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] + p0[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)] * p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block]
        for ax0_ax1_ax2_ax3_ax4_fused_0 in T.parallel(T.int64(1568)):
            for ax0_ax1_ax2_ax3_ax4_fused_1 in T.vectorized(T.int64(64)):
                with T.block("T_relu"):
                    v_ax0 = T.axis.spatial(T.int64(1), T.int64(0))
                    v_ax1 = T.axis.spatial(T.int64(128), (ax0_ax1_ax2_ax3_ax4_fused_0 * T.int64(64) + ax0_ax1_ax2_ax3_ax4_fused_1) // T.int64(784))
                    v_ax2 = T.axis.spatial(T.int64(14), (ax0_ax1_ax2_ax3_ax4_fused_0 * T.int64(64) + ax0_ax1_ax2_ax3_ax4_fused_1) % T.int64(784) // T.int64(56))
                    v_ax3 = T.axis.spatial(T.int64(14), (ax0_ax1_ax2_ax3_ax4_fused_0 * T.int64(64) + ax0_ax1_ax2_ax3_ax4_fused_1) % T.int64(56) // T.int64(4))
                    v_ax4 = T.axis.spatial(T.int64(4), (ax0_ax1_ax2_ax3_ax4_fused_0 * T.int64(64) + ax0_ax1_ax2_ax3_ax4_fused_1) % T.int64(4))
                    T.reads(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4])
                    T.writes(T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                    T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.max(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] + p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4], T.float32(0))
b0 = sch.get_block(name="conv2d_NCHWc", func_name="main")
b1 = sch.get_block(name="T_add", func_name="main")
b2 = sch.get_block(name="root", func_name="main")
sch.compute_inline(block=b1)
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.tiling_structure", ann_val="SSRSRS")
l3, l4, l5, l6, l7, l8, l9, l10 = sch.get_loops(block=b0)
v11, v12, v13, v14 = sch.sample_perfect_tile(loop=l3, n=4, max_innermost_factor=64, decision=[1, 1, 1, 1])
l15, l16, l17, l18 = sch.split(loop=l3, factors=[v11, v12, v13, v14], preserve_unit_iters=True)
v19, v20, v21, v22 = sch.sample_perfect_tile(loop=l4, n=4, max_innermost_factor=64, decision=[2, 8, 4, 2])
l23, l24, l25, l26 = sch.split(loop=l4, factors=[v19, v20, v21, v22], preserve_unit_iters=True)
v27, v28, v29, v30 = sch.sample_perfect_tile(loop=l5, n=4, max_innermost_factor=64, decision=[1, 7, 2, 1])
l31, l32, l33, l34 = sch.split(loop=l5, factors=[v27, v28, v29, v30], preserve_unit_iters=True)
v35, v36, v37, v38 = sch.sample_perfect_tile(loop=l6, n=4, max_innermost_factor=64, decision=[1, 2, 1, 7])
l39, l40, l41, l42 = sch.split(loop=l6, factors=[v35, v36, v37, v38], preserve_unit_iters=True)
v43, v44, v45, v46 = sch.sample_perfect_tile(loop=l7, n=4, max_innermost_factor=64, decision=[1, 1, 1, 4])
l47, l48, l49, l50 = sch.split(loop=l7, factors=[v43, v44, v45, v46], preserve_unit_iters=True)
v51, v52 = sch.sample_perfect_tile(loop=l8, n=2, max_innermost_factor=64, decision=[64, 16])
l53, l54 = sch.split(loop=l8, factors=[v51, v52], preserve_unit_iters=True)
v55, v56 = sch.sample_perfect_tile(loop=l9, n=2, max_innermost_factor=64, decision=[1, 1])
l57, l58 = sch.split(loop=l9, factors=[v55, v56], preserve_unit_iters=True)
v59, v60 = sch.sample_perfect_tile(loop=l10, n=2, max_innermost_factor=64, decision=[1, 1])
l61, l62 = sch.split(loop=l10, factors=[v59, v60], preserve_unit_iters=True)
sch.reorder(l15, l23, l31, l39, l47, l16, l24, l32, l40, l48, l53, l57, l61, l17, l25, l33, l41, l49, l54, l58, l62, l18, l26, l34, l42, l50)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.vectorize", ann_val=64)
v63 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.unroll_explicit", ann_val=v63)
sch.enter_postproc()
b64 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b64, ann_key="meta_schedule.parallel")
sch.unannotate(block_or_loop=b64, ann_key="meta_schedule.vectorize")
sch.unannotate(block_or_loop=b64, ann_key="meta_schedule.unroll_explicit")
b65, b66 = sch.get_child_blocks(b64)
l67, l68, l69, l70, l71, l72, l73, l74, l75, l76, l77, l78, l79, l80, l81, l82, l83, l84, l85, l86, l87, l88, l89, l90, l91, l92 = sch.get_loops(block=b65)
l93 = sch.fuse(l67, l68, l69, l70, l71, l72, l73, l74, l75, l76, preserve_unit_iters=True)
sch.parallel(loop=l93)
l94 = sch.fuse(l92, preserve_unit_iters=True)
sch.vectorize(loop=l94)
sch.annotate(block_or_loop=l93, ann_key="pragma_auto_unroll_max_step", ann_val=512)
sch.annotate(block_or_loop=l93, ann_key="pragma_unroll_explicit", ann_val=1)
l95, l96, l97, l98, l99 = sch.get_loops(block=b66)
l100 = sch.fuse(l95, l96, l97, l98, l99, preserve_unit_iters=True)
l101, l102 = sch.split(loop=l100, factors=[None, 64], preserve_unit_iters=True)
sch.parallel(loop=l101)
sch.vectorize(loop=l102)
b103 = sch.get_block(name="conv2d_NCHWc", func_name="main")
l104, l105, l106, l107, l108, l109, l110, l111, l112, l113, l114, l115, l116, l117, l118, l119, l120 = sch.get_loops(block=b103)
b121 = sch.decompose_reduction(block=b103, loop=l105)
2024-04-29 12:23:10 [INFO] [task_scheduler.cc:131] [Task #38: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_12] Trial #218: GFLOPs: 174.3471. Time: 1179.9543 us. Best GFLOPs: 324.3005
2024-04-29 12:23:10 [INFO] [task_scheduler.cc:131] [Task #38: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_12] Trial #219: GFLOPs: 76.3154. Time: 2695.6772 us. Best GFLOPs: 324.3005
2024-04-29 12:23:10 [INFO] [task_scheduler.cc:131] [Task #38: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_12] Trial #220: GFLOPs: 53.3265. Time: 3857.7739 us. Best GFLOPs: 324.3005
2024-04-29 12:23:10 [INFO] [task_scheduler.cc:131] [Task #38: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_12] Trial #221: GFLOPs: 193.1297. Time: 1065.1993 us. Best GFLOPs: 324.3005
2024-04-29 12:23:10 [INFO] [task_scheduler.cc:131] [Task #38: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_12] Trial #222: GFLOPs: 90.5856. Time: 2271.0200 us. Best GFLOPs: 324.3005
2024-04-29 12:23:10 [INFO] [task_scheduler.cc:131] [Task #38: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_12] Trial #223: GFLOPs: 151.9635. Time: 1353.7569 us. Best GFLOPs: 324.3005
2024-04-29 12:23:10 [INFO] [task_scheduler.cc:131] [Task #38: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_12] Trial #224: GFLOPs: 233.3460. Time: 881.6161 us. Best GFLOPs: 324.3005
2024-04-29 12:23:10 [INFO] [task_scheduler.cc:131] [Task #38: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_12] Trial #225: GFLOPs: 232.9686. Time: 883.0444 us. Best GFLOPs: 324.3005
2024-04-29 12:23:10 [INFO] [task_scheduler.cc:131] [Task #38: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_12] Trial #226: GFLOPs: 147.4316. Time: 1395.3701 us. Best GFLOPs: 324.3005
2024-04-29 12:23:10 [INFO] [task_scheduler.cc:131] [Task #38: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_12] Trial #227: GFLOPs: 143.6990. Time: 1431.6149 us. Best GFLOPs: 324.3005
2024-04-29 12:23:10 [INFO] [task_scheduler.cc:131] [Task #38: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_12] Trial #228: GFLOPs: 153.7144. Time: 1338.3365 us. Best GFLOPs: 324.3005
2024-04-29 12:23:10 [INFO] [task_scheduler.cc:131] [Task #38: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_12] Trial #229: GFLOPs: 208.8819. Time: 984.8703 us. Best GFLOPs: 324.3005
2024-04-29 12:23:10 [INFO] [task_scheduler.cc:131] [Task #38: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_12] Trial #230: GFLOPs: 204.5718. Time: 1005.6205 us. Best GFLOPs: 324.3005
2024-04-29 12:23:10 [INFO] [task_scheduler.cc:131] [Task #38: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_12] Trial #231: GFLOPs: 205.7216. Time: 999.9998 us. Best GFLOPs: 324.3005
2024-04-29 12:23:10 [INFO] [task_scheduler.cc:131] [Task #38: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_12] Trial #232: GFLOPs: 189.8332. Time: 1083.6965 us. Best GFLOPs: 324.3005
2024-04-29 12:23:10 [INFO] [task_scheduler.cc:131] [Task #38: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_12] Trial #233: GFLOPs: 187.0149. Time: 1100.0281 us. Best GFLOPs: 324.3005
2024-04-29 12:23:10 [INFO] [task_scheduler.cc:121] [Task #38: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_12] Trial #234: Error in building:
LocalBuilder: Timeout, killed after 30.0 seconds
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(256), T.int64(14), T.int64(14), T.int64(4)), "float32"), p1: T.Buffer((T.int64(128), T.int64(256), T.int64(1), T.int64(1), T.int64(4), T.int64(4)), "float32"), p2: T.Buffer((T.int64(1), T.int64(128), T.int64(1), T.int64(1), T.int64(4)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(128), T.int64(14), T.int64(14), T.int64(4)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        conv2d_NCHWc = T.alloc_buffer((T.int64(1), T.int64(128), T.int64(14), T.int64(14), T.int64(4)))
        for n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused in T.parallel(T.int64(224), annotations={"pragma_auto_unroll_max_step": 512, "pragma_unroll_explicit": 1}):
            for n_2_init, oc_chunk_2_init, oh_2_init, ow_2_init, oc_block_2_init, n_3_init, oc_chunk_3_init, oh_3_init, ow_3_init in T.grid(T.int64(1), T.int64(4), T.int64(2), T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(1), T.int64(7)):
                for oc_block_3_fused_init in T.vectorized(T.int64(4)):
                    with T.block("conv2d_NCHWc_init"):
                        v_n = T.axis.spatial(T.int64(1), n_2_init + n_3_init)
                        v_oc_chunk = T.axis.spatial(T.int64(128), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused // T.int64(112) * T.int64(64) + n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused % T.int64(56) // T.int64(7) * T.int64(8) + oc_chunk_2_init * T.int64(2) + oc_chunk_3_init)
                        v_oh = T.axis.spatial(T.int64(14), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused % T.int64(7) * T.int64(2) + oh_2_init + oh_3_init)
                        v_ow = T.axis.spatial(T.int64(14), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused % T.int64(112) // T.int64(56) * T.int64(7) + ow_2_init * T.int64(7) + ow_3_init)
                        v_oc_block = T.axis.spatial(T.int64(4), oc_block_2_init * T.int64(4) + oc_block_3_fused_init)
                        T.reads()
                        T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                        T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                        conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = T.float32(0)
            for ic_0, kh_0, kw_0, n_2, oc_chunk_2, oh_2, ow_2, oc_block_2, ic_1, kh_1, kw_1, n_3, oc_chunk_3, oh_3, ow_3 in T.grid(T.int64(64), T.int64(1), T.int64(1), T.int64(1), T.int64(4), T.int64(2), T.int64(1), T.int64(1), T.int64(16), T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(1), T.int64(7)):
                for oc_block_3_fused in T.vectorized(T.int64(4)):
                    with T.block("conv2d_NCHWc_update"):
                        v_n = T.axis.spatial(T.int64(1), n_2 + n_3)
                        v_oc_chunk = T.axis.spatial(T.int64(128), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused // T.int64(112) * T.int64(64) + n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused % T.int64(56) // T.int64(7) * T.int64(8) + oc_chunk_2 * T.int64(2) + oc_chunk_3)
                        v_oh = T.axis.spatial(T.int64(14), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused % T.int64(7) * T.int64(2) + oh_2 + oh_3)
                        v_ow = T.axis.spatial(T.int64(14), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused % T.int64(112) // T.int64(56) * T.int64(7) + ow_2 * T.int64(7) + ow_3)
                        v_oc_block = T.axis.spatial(T.int64(4), oc_block_2 * T.int64(4) + oc_block_3_fused)
                        v_ic = T.axis.reduce(T.int64(1024), ic_0 * T.int64(16) + ic_1)
                        v_kh = T.axis.reduce(T.int64(1), kh_0 + kh_1)
                        v_kw = T.axis.reduce(T.int64(1), kw_0 + kw_1)
                        T.reads(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block], p0[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)], p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block])
                        T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                        T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                        conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] + p0[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)] * p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block]
        for ax0_ax1_ax2_ax3_ax4_fused_0 in T.parallel(T.int64(1568)):
            for ax0_ax1_ax2_ax3_ax4_fused_1 in T.vectorized(T.int64(64)):
                with T.block("T_relu"):
                    v_ax0 = T.axis.spatial(T.int64(1), T.int64(0))
                    v_ax1 = T.axis.spatial(T.int64(128), (ax0_ax1_ax2_ax3_ax4_fused_0 * T.int64(64) + ax0_ax1_ax2_ax3_ax4_fused_1) // T.int64(784))
                    v_ax2 = T.axis.spatial(T.int64(14), (ax0_ax1_ax2_ax3_ax4_fused_0 * T.int64(64) + ax0_ax1_ax2_ax3_ax4_fused_1) % T.int64(784) // T.int64(56))
                    v_ax3 = T.axis.spatial(T.int64(14), (ax0_ax1_ax2_ax3_ax4_fused_0 * T.int64(64) + ax0_ax1_ax2_ax3_ax4_fused_1) % T.int64(56) // T.int64(4))
                    v_ax4 = T.axis.spatial(T.int64(4), (ax0_ax1_ax2_ax3_ax4_fused_0 * T.int64(64) + ax0_ax1_ax2_ax3_ax4_fused_1) % T.int64(4))
                    T.reads(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4])
                    T.writes(T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                    T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.max(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] + p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4], T.float32(0))
b0 = sch.get_block(name="conv2d_NCHWc", func_name="main")
b1 = sch.get_block(name="T_add", func_name="main")
b2 = sch.get_block(name="root", func_name="main")
sch.compute_inline(block=b1)
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.tiling_structure", ann_val="SSRSRS")
l3, l4, l5, l6, l7, l8, l9, l10 = sch.get_loops(block=b0)
v11, v12, v13, v14 = sch.sample_perfect_tile(loop=l3, n=4, max_innermost_factor=64, decision=[1, 1, 1, 1])
l15, l16, l17, l18 = sch.split(loop=l3, factors=[v11, v12, v13, v14], preserve_unit_iters=True)
v19, v20, v21, v22 = sch.sample_perfect_tile(loop=l4, n=4, max_innermost_factor=64, decision=[2, 8, 4, 2])
l23, l24, l25, l26 = sch.split(loop=l4, factors=[v19, v20, v21, v22], preserve_unit_iters=True)
v27, v28, v29, v30 = sch.sample_perfect_tile(loop=l5, n=4, max_innermost_factor=64, decision=[1, 7, 2, 1])
l31, l32, l33, l34 = sch.split(loop=l5, factors=[v27, v28, v29, v30], preserve_unit_iters=True)
v35, v36, v37, v38 = sch.sample_perfect_tile(loop=l6, n=4, max_innermost_factor=64, decision=[2, 1, 1, 7])
l39, l40, l41, l42 = sch.split(loop=l6, factors=[v35, v36, v37, v38], preserve_unit_iters=True)
v43, v44, v45, v46 = sch.sample_perfect_tile(loop=l7, n=4, max_innermost_factor=64, decision=[1, 1, 1, 4])
l47, l48, l49, l50 = sch.split(loop=l7, factors=[v43, v44, v45, v46], preserve_unit_iters=True)
v51, v52 = sch.sample_perfect_tile(loop=l8, n=2, max_innermost_factor=64, decision=[64, 16])
l53, l54 = sch.split(loop=l8, factors=[v51, v52], preserve_unit_iters=True)
v55, v56 = sch.sample_perfect_tile(loop=l9, n=2, max_innermost_factor=64, decision=[1, 1])
l57, l58 = sch.split(loop=l9, factors=[v55, v56], preserve_unit_iters=True)
v59, v60 = sch.sample_perfect_tile(loop=l10, n=2, max_innermost_factor=64, decision=[1, 1])
l61, l62 = sch.split(loop=l10, factors=[v59, v60], preserve_unit_iters=True)
sch.reorder(l15, l23, l31, l39, l47, l16, l24, l32, l40, l48, l53, l57, l61, l17, l25, l33, l41, l49, l54, l58, l62, l18, l26, l34, l42, l50)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.vectorize", ann_val=64)
v63 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.unroll_explicit", ann_val=v63)
sch.enter_postproc()
b64 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b64, ann_key="meta_schedule.parallel")
sch.unannotate(block_or_loop=b64, ann_key="meta_schedule.vectorize")
sch.unannotate(block_or_loop=b64, ann_key="meta_schedule.unroll_explicit")
b65, b66 = sch.get_child_blocks(b64)
l67, l68, l69, l70, l71, l72, l73, l74, l75, l76, l77, l78, l79, l80, l81, l82, l83, l84, l85, l86, l87, l88, l89, l90, l91, l92 = sch.get_loops(block=b65)
l93 = sch.fuse(l67, l68, l69, l70, l71, l72, l73, l74, l75, l76, preserve_unit_iters=True)
sch.parallel(loop=l93)
l94 = sch.fuse(l92, preserve_unit_iters=True)
sch.vectorize(loop=l94)
sch.annotate(block_or_loop=l93, ann_key="pragma_auto_unroll_max_step", ann_val=512)
sch.annotate(block_or_loop=l93, ann_key="pragma_unroll_explicit", ann_val=1)
l95, l96, l97, l98, l99 = sch.get_loops(block=b66)
l100 = sch.fuse(l95, l96, l97, l98, l99, preserve_unit_iters=True)
l101, l102 = sch.split(loop=l100, factors=[None, 64], preserve_unit_iters=True)
sch.parallel(loop=l101)
sch.vectorize(loop=l102)
b103 = sch.get_block(name="conv2d_NCHWc", func_name="main")
l104, l105, l106, l107, l108, l109, l110, l111, l112, l113, l114, l115, l116, l117, l118, l119, l120 = sch.get_loops(block=b103)
b121 = sch.decompose_reduction(block=b103, loop=l105)
2024-04-29 12:23:10 [INFO] [task_scheduler.cc:131] [Task #38: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_12] Trial #235: GFLOPs: 218.2713. Time: 942.5041 us. Best GFLOPs: 324.3005
2024-04-29 12:23:10 [INFO] [task_scheduler.cc:131] [Task #38: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_12] Trial #236: GFLOPs: 141.7178. Time: 1451.6288 us. Best GFLOPs: 324.3005
2024-04-29 12:23:10 [INFO] [task_scheduler.cc:131] [Task #38: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_12] Trial #237: GFLOPs: 150.0725. Time: 1370.8146 us. Best GFLOPs: 324.3005
2024-04-29 12:23:10 [INFO] [task_scheduler.cc:131] [Task #38: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_12] Trial #238: GFLOPs: 207.7589. Time: 990.1939 us. Best GFLOPs: 324.3005
2024-04-29 12:23:10 [INFO] [task_scheduler.cc:131] [Task #38: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_12] Trial #239: GFLOPs: 169.3377. Time: 1214.8599 us. Best GFLOPs: 324.3005
2024-04-29 12:23:10 [INFO] [task_scheduler.cc:131] [Task #38: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_12] Trial #240: GFLOPs: 152.1888. Time: 1351.7527 us. Best GFLOPs: 324.3005
2024-04-29 12:23:10 [INFO] [task_scheduler.cc:131] [Task #38: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_12] Trial #241: GFLOPs: 166.5619. Time: 1235.1062 us. Best GFLOPs: 324.3005
2024-04-29 12:23:10 [INFO] [task_scheduler.cc:131] [Task #38: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_12] Trial #242: GFLOPs: 166.1593. Time: 1238.0989 us. Best GFLOPs: 324.3005
2024-04-29 12:23:10 [INFO] [task_scheduler.cc:121] [Task #38: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_12] Trial #243: Error in building:
LocalBuilder: Timeout, killed after 30.0 seconds
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(256), T.int64(14), T.int64(14), T.int64(4)), "float32"), p1: T.Buffer((T.int64(128), T.int64(256), T.int64(1), T.int64(1), T.int64(4), T.int64(4)), "float32"), p2: T.Buffer((T.int64(1), T.int64(128), T.int64(1), T.int64(1), T.int64(4)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(128), T.int64(14), T.int64(14), T.int64(4)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        conv2d_NCHWc = T.alloc_buffer((T.int64(1), T.int64(128), T.int64(14), T.int64(14), T.int64(4)))
        for n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused in T.parallel(T.int64(32), annotations={"pragma_auto_unroll_max_step": 512, "pragma_unroll_explicit": 1}):
            for n_2_init, oc_chunk_2_init, oh_2_init, ow_2_init, oc_block_2_init, n_3_init, oc_chunk_3_init, oh_3_init, ow_3_init in T.grid(T.int64(1), T.int64(4), T.int64(14), T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(1), T.int64(7)):
                for oc_block_3_fused_init in T.vectorized(T.int64(4)):
                    with T.block("conv2d_NCHWc_init"):
                        v_n = T.axis.spatial(T.int64(1), n_2_init + n_3_init)
                        v_oc_chunk = T.axis.spatial(T.int64(128), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused // T.int64(16) * T.int64(64) + n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused % T.int64(8) * T.int64(8) + oc_chunk_2_init * T.int64(2) + oc_chunk_3_init)
                        v_oh = T.axis.spatial(T.int64(14), oh_2_init + oh_3_init)
                        v_ow = T.axis.spatial(T.int64(14), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused % T.int64(16) // T.int64(8) * T.int64(7) + ow_2_init * T.int64(7) + ow_3_init)
                        v_oc_block = T.axis.spatial(T.int64(4), oc_block_2_init * T.int64(4) + oc_block_3_fused_init)
                        T.reads()
                        T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                        T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                        conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = T.float32(0)
            for ic_0, kh_0, kw_0, n_2, oc_chunk_2, oh_2, ow_2, oc_block_2, ic_1, kh_1, kw_1, n_3, oc_chunk_3, oh_3, ow_3 in T.grid(T.int64(32), T.int64(1), T.int64(1), T.int64(1), T.int64(4), T.int64(14), T.int64(1), T.int64(1), T.int64(32), T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(1), T.int64(7)):
                for oc_block_3_fused in T.vectorized(T.int64(4)):
                    with T.block("conv2d_NCHWc_update"):
                        v_n = T.axis.spatial(T.int64(1), n_2 + n_3)
                        v_oc_chunk = T.axis.spatial(T.int64(128), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused // T.int64(16) * T.int64(64) + n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused % T.int64(8) * T.int64(8) + oc_chunk_2 * T.int64(2) + oc_chunk_3)
                        v_oh = T.axis.spatial(T.int64(14), oh_2 + oh_3)
                        v_ow = T.axis.spatial(T.int64(14), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused % T.int64(16) // T.int64(8) * T.int64(7) + ow_2 * T.int64(7) + ow_3)
                        v_oc_block = T.axis.spatial(T.int64(4), oc_block_2 * T.int64(4) + oc_block_3_fused)
                        v_ic = T.axis.reduce(T.int64(1024), ic_0 * T.int64(32) + ic_1)
                        v_kh = T.axis.reduce(T.int64(1), kh_0 + kh_1)
                        v_kw = T.axis.reduce(T.int64(1), kw_0 + kw_1)
                        T.reads(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block], p0[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)], p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block])
                        T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                        T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                        conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] + p0[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)] * p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block]
        for ax0_ax1_ax2_ax3_ax4_fused_0 in T.parallel(T.int64(1568)):
            for ax0_ax1_ax2_ax3_ax4_fused_1 in T.vectorized(T.int64(64)):
                with T.block("T_relu"):
                    v_ax0 = T.axis.spatial(T.int64(1), T.int64(0))
                    v_ax1 = T.axis.spatial(T.int64(128), (ax0_ax1_ax2_ax3_ax4_fused_0 * T.int64(64) + ax0_ax1_ax2_ax3_ax4_fused_1) // T.int64(784))
                    v_ax2 = T.axis.spatial(T.int64(14), (ax0_ax1_ax2_ax3_ax4_fused_0 * T.int64(64) + ax0_ax1_ax2_ax3_ax4_fused_1) % T.int64(784) // T.int64(56))
                    v_ax3 = T.axis.spatial(T.int64(14), (ax0_ax1_ax2_ax3_ax4_fused_0 * T.int64(64) + ax0_ax1_ax2_ax3_ax4_fused_1) % T.int64(56) // T.int64(4))
                    v_ax4 = T.axis.spatial(T.int64(4), (ax0_ax1_ax2_ax3_ax4_fused_0 * T.int64(64) + ax0_ax1_ax2_ax3_ax4_fused_1) % T.int64(4))
                    T.reads(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4])
                    T.writes(T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                    T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.max(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] + p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4], T.float32(0))
b0 = sch.get_block(name="conv2d_NCHWc", func_name="main")
b1 = sch.get_block(name="T_add", func_name="main")
b2 = sch.get_block(name="root", func_name="main")
sch.compute_inline(block=b1)
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.tiling_structure", ann_val="SSRSRS")
l3, l4, l5, l6, l7, l8, l9, l10 = sch.get_loops(block=b0)
v11, v12, v13, v14 = sch.sample_perfect_tile(loop=l3, n=4, max_innermost_factor=64, decision=[1, 1, 1, 1])
l15, l16, l17, l18 = sch.split(loop=l3, factors=[v11, v12, v13, v14], preserve_unit_iters=True)
v19, v20, v21, v22 = sch.sample_perfect_tile(loop=l4, n=4, max_innermost_factor=64, decision=[2, 8, 4, 2])
l23, l24, l25, l26 = sch.split(loop=l4, factors=[v19, v20, v21, v22], preserve_unit_iters=True)
v27, v28, v29, v30 = sch.sample_perfect_tile(loop=l5, n=4, max_innermost_factor=64, decision=[1, 1, 14, 1])
l31, l32, l33, l34 = sch.split(loop=l5, factors=[v27, v28, v29, v30], preserve_unit_iters=True)
v35, v36, v37, v38 = sch.sample_perfect_tile(loop=l6, n=4, max_innermost_factor=64, decision=[2, 1, 1, 7])
l39, l40, l41, l42 = sch.split(loop=l6, factors=[v35, v36, v37, v38], preserve_unit_iters=True)
v43, v44, v45, v46 = sch.sample_perfect_tile(loop=l7, n=4, max_innermost_factor=64, decision=[1, 1, 1, 4])
l47, l48, l49, l50 = sch.split(loop=l7, factors=[v43, v44, v45, v46], preserve_unit_iters=True)
v51, v52 = sch.sample_perfect_tile(loop=l8, n=2, max_innermost_factor=64, decision=[32, 32])
l53, l54 = sch.split(loop=l8, factors=[v51, v52], preserve_unit_iters=True)
v55, v56 = sch.sample_perfect_tile(loop=l9, n=2, max_innermost_factor=64, decision=[1, 1])
l57, l58 = sch.split(loop=l9, factors=[v55, v56], preserve_unit_iters=True)
v59, v60 = sch.sample_perfect_tile(loop=l10, n=2, max_innermost_factor=64, decision=[1, 1])
l61, l62 = sch.split(loop=l10, factors=[v59, v60], preserve_unit_iters=True)
sch.reorder(l15, l23, l31, l39, l47, l16, l24, l32, l40, l48, l53, l57, l61, l17, l25, l33, l41, l49, l54, l58, l62, l18, l26, l34, l42, l50)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.parallel", ann_val=128)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.vectorize", ann_val=64)
v63 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.unroll_explicit", ann_val=v63)
sch.enter_postproc()
b64 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b64, ann_key="meta_schedule.parallel")
sch.unannotate(block_or_loop=b64, ann_key="meta_schedule.vectorize")
sch.unannotate(block_or_loop=b64, ann_key="meta_schedule.unroll_explicit")
b65, b66 = sch.get_child_blocks(b64)
l67, l68, l69, l70, l71, l72, l73, l74, l75, l76, l77, l78, l79, l80, l81, l82, l83, l84, l85, l86, l87, l88, l89, l90, l91, l92 = sch.get_loops(block=b65)
l93 = sch.fuse(l67, l68, l69, l70, l71, l72, l73, l74, l75, l76, preserve_unit_iters=True)
sch.parallel(loop=l93)
l94 = sch.fuse(l92, preserve_unit_iters=True)
sch.vectorize(loop=l94)
sch.annotate(block_or_loop=l93, ann_key="pragma_auto_unroll_max_step", ann_val=512)
sch.annotate(block_or_loop=l93, ann_key="pragma_unroll_explicit", ann_val=1)
l95, l96, l97, l98, l99 = sch.get_loops(block=b66)
l100 = sch.fuse(l95, l96, l97, l98, l99, preserve_unit_iters=True)
l101, l102 = sch.split(loop=l100, factors=[None, 64], preserve_unit_iters=True)
sch.parallel(loop=l101)
sch.vectorize(loop=l102)
b103 = sch.get_block(name="conv2d_NCHWc", func_name="main")
l104, l105, l106, l107, l108, l109, l110, l111, l112, l113, l114, l115, l116, l117, l118, l119, l120 = sch.get_loops(block=b103)
b121 = sch.decompose_reduction(block=b103, loop=l105)
2024-04-29 12:23:10 [INFO] [task_scheduler.cc:131] [Task #38: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_12] Trial #244: GFLOPs: 171.5378. Time: 1199.2787 us. Best GFLOPs: 324.3005
2024-04-29 12:23:10 [INFO] [task_scheduler.cc:131] [Task #38: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_12] Trial #245: GFLOPs: 175.0567. Time: 1175.1713 us. Best GFLOPs: 324.3005
2024-04-29 12:23:10 [INFO] [task_scheduler.cc:131] [Task #38: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_12] Trial #246: GFLOPs: 196.0519. Time: 1049.3223 us. Best GFLOPs: 324.3005
2024-04-29 12:23:10 [INFO] [task_scheduler.cc:131] [Task #38: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_12] Trial #247: GFLOPs: 219.7362. Time: 936.2206 us. Best GFLOPs: 324.3005
2024-04-29 12:23:10 [INFO] [task_scheduler.cc:131] [Task #38: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_12] Trial #248: GFLOPs: 145.7872. Time: 1411.1088 us. Best GFLOPs: 324.3005
2024-04-29 12:23:10 [INFO] [task_scheduler.cc:131] [Task #38: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_12] Trial #249: GFLOPs: 171.6903. Time: 1198.2132 us. Best GFLOPs: 324.3005
2024-04-29 12:23:10 [INFO] [task_scheduler.cc:131] [Task #38: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_12] Trial #250: GFLOPs: 215.5764. Time: 954.2863 us. Best GFLOPs: 324.3005
2024-04-29 12:23:10 [INFO] [task_scheduler.cc:131] [Task #38: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_12] Trial #251: GFLOPs: 213.1573. Time: 965.1165 us. Best GFLOPs: 324.3005
2024-04-29 12:23:10 [INFO] [task_scheduler.cc:131] [Task #38: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_12] Trial #252: GFLOPs: 207.9349. Time: 989.3558 us. Best GFLOPs: 324.3005
2024-04-29 12:23:10 [INFO] [task_scheduler.cc:131] [Task #38: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_12] Trial #253: GFLOPs: 204.0481. Time: 1008.2015 us. Best GFLOPs: 324.3005
2024-04-29 12:23:10 [INFO] [task_scheduler.cc:131] [Task #38: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_12] Trial #254: GFLOPs: 16.5288. Time: 12446.2270 us. Best GFLOPs: 324.3005
2024-04-29 12:23:10 [INFO] [task_scheduler.cc:131] [Task #38: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_12] Trial #255: GFLOPs: 4.0885. Time: 50316.6933 us. Best GFLOPs: 324.3005
2024-04-29 12:23:10 [INFO] [task_scheduler.cc:131] [Task #38: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_12] Trial #256: GFLOPs: 83.1620. Time: 2473.7459 us. Best GFLOPs: 324.3005
2024-04-29 12:40:15 [INFO] [evolutionary_search.cc:713] Generating candidates......
2024-04-29 12:40:16 [INFO] [evolutionary_search.cc:715] Picked top 102 candidate(s) from database
2024-04-29 12:40:18 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0xd9d3ef8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0xac11768)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x1167e528)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0xa8a2b38)]: 0 failure(s)
2024-04-29 12:40:18 [INFO] [evolutionary_search.cc:723] Sampled 410 candidate(s)
2024-04-29 12:40:23 [INFO] [evolutionary_search.cc:621] Evolve iter #0 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0xd9d3ef8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0xac11768)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x1167e528)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0xa8a2b38)]: 0 failure(s)
2024-04-29 12:40:28 [INFO] [evolutionary_search.cc:621] Evolve iter #1 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0xd9d3ef8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0xac11768)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x1167e528)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0xa8a2b38)]: 0 failure(s)
2024-04-29 12:40:33 [INFO] [evolutionary_search.cc:621] Evolve iter #2 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0xd9d3ef8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0xac11768)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x1167e528)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0xa8a2b38)]: 0 failure(s)
2024-04-29 12:40:38 [INFO] [evolutionary_search.cc:621] Evolve iter #3 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0xd9d3ef8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0xac11768)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x1167e528)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0xa8a2b38)]: 0 failure(s)
2024-04-29 12:40:41 [INFO] [evolutionary_search.cc:649] Scores of the best 64 candidates:
[1 : 16]:	0.9428  0.9306  0.9155  0.9068  0.7773  0.7773  0.7488  0.7193  0.7155  0.7132  0.7100  0.7100  0.6956  0.6931  0.6931  0.6924
[17 : 32]:	0.6924  0.6887  0.6877  0.6873  0.6621  0.6580  0.6573  0.6573  0.6558  0.6558  0.6558  0.6535  0.6465  0.6414  0.6407  0.6403
[33 : 48]:	0.6391  0.6391  0.6390  0.6209  0.6194  0.6188  0.6188  0.6180  0.6174  0.6151  0.6109  0.6041  0.6028  0.6009  0.5986  0.5980
[49 : 64]:	0.5957  0.5957  0.5947  0.5920  0.5908  0.5908  0.5904  0.5900  0.5896  0.5881  0.5881  0.5851  0.5848  0.5838  0.5838  0.5829
2024-04-29 12:40:41 [INFO] [evolutionary_search.cc:727] Got 64 candidate(s) with evolutionary search
2024-04-29 12:40:42 [INFO] [evolutionary_search.cc:730] Sending 64 candidates(s) for measurement
2024-04-29 12:42:19 [INFO] [task_scheduler.cc:131] [Task #38: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_12] Trial #257: GFLOPs: 164.0122. Time: 1254.3069 us. Best GFLOPs: 324.3005
2024-04-29 12:42:19 [INFO] [task_scheduler.cc:131] [Task #38: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_12] Trial #258: GFLOPs: 283.2427. Time: 726.3084 us. Best GFLOPs: 324.3005
2024-04-29 12:42:19 [INFO] [task_scheduler.cc:131] [Task #38: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_12] Trial #259: GFLOPs: 230.5677. Time: 892.2395 us. Best GFLOPs: 324.3005
2024-04-29 12:42:19 [INFO] [task_scheduler.cc:131] [Task #38: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_12] Trial #260: GFLOPs: 173.5631. Time: 1185.2844 us. Best GFLOPs: 324.3005
2024-04-29 12:42:19 [INFO] [task_scheduler.cc:131] [Task #38: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_12] Trial #261: GFLOPs: 135.2945. Time: 1520.5470 us. Best GFLOPs: 324.3005
2024-04-29 12:42:19 [INFO] [task_scheduler.cc:131] [Task #38: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_12] Trial #262: GFLOPs: 221.7341. Time: 927.7852 us. Best GFLOPs: 324.3005
2024-04-29 12:42:19 [INFO] [task_scheduler.cc:131] [Task #38: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_12] Trial #263: GFLOPs: 200.2611. Time: 1027.2671 us. Best GFLOPs: 324.3005
2024-04-29 12:42:19 [INFO] [task_scheduler.cc:131] [Task #38: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_12] Trial #264: GFLOPs: 165.9416. Time: 1239.7230 us. Best GFLOPs: 324.3005
2024-04-29 12:42:19 [INFO] [task_scheduler.cc:131] [Task #38: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_12] Trial #265: GFLOPs: 170.7803. Time: 1204.5978 us. Best GFLOPs: 324.3005
2024-04-29 12:42:19 [INFO] [task_scheduler.cc:131] [Task #38: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_12] Trial #266: GFLOPs: 161.7527. Time: 1271.8280 us. Best GFLOPs: 324.3005
2024-04-29 12:42:19 [INFO] [task_scheduler.cc:131] [Task #38: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_12] Trial #267: GFLOPs: 228.4870. Time: 900.3648 us. Best GFLOPs: 324.3005
2024-04-29 12:42:19 [INFO] [task_scheduler.cc:131] [Task #38: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_12] Trial #268: GFLOPs: 235.4299. Time: 873.8127 us. Best GFLOPs: 324.3005
2024-04-29 12:42:19 [INFO] [task_scheduler.cc:131] [Task #38: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_12] Trial #269: GFLOPs: 172.7570. Time: 1190.8148 us. Best GFLOPs: 324.3005
2024-04-29 12:42:19 [INFO] [task_scheduler.cc:131] [Task #38: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_12] Trial #270: GFLOPs: 168.6966. Time: 1219.4769 us. Best GFLOPs: 324.3005
2024-04-29 12:42:19 [INFO] [task_scheduler.cc:131] [Task #38: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_12] Trial #271: GFLOPs: 167.0052. Time: 1231.8274 us. Best GFLOPs: 324.3005
2024-04-29 12:42:19 [INFO] [task_scheduler.cc:131] [Task #38: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_12] Trial #272: GFLOPs: 211.4270. Time: 973.0147 us. Best GFLOPs: 324.3005
2024-04-29 12:42:19 [INFO] [task_scheduler.cc:131] [Task #38: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_12] Trial #273: GFLOPs: 156.5080. Time: 1314.4479 us. Best GFLOPs: 324.3005
2024-04-29 12:42:19 [INFO] [task_scheduler.cc:131] [Task #38: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_12] Trial #274: GFLOPs: 143.6165. Time: 1432.4373 us. Best GFLOPs: 324.3005
2024-04-29 12:42:19 [INFO] [task_scheduler.cc:131] [Task #38: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_12] Trial #275: GFLOPs: 188.3585. Time: 1092.1813 us. Best GFLOPs: 324.3005
2024-04-29 12:42:19 [INFO] [task_scheduler.cc:131] [Task #38: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_12] Trial #276: GFLOPs: 178.4698. Time: 1152.6972 us. Best GFLOPs: 324.3005
2024-04-29 12:42:19 [INFO] [task_scheduler.cc:131] [Task #38: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_12] Trial #277: GFLOPs: 183.9923. Time: 1118.0992 us. Best GFLOPs: 324.3005
2024-04-29 12:42:19 [INFO] [task_scheduler.cc:121] [Task #38: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_12] Trial #278: Error in building:
LocalBuilder: Timeout, killed after 30.0 seconds
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(256), T.int64(14), T.int64(14), T.int64(4)), "float32"), p1: T.Buffer((T.int64(128), T.int64(256), T.int64(1), T.int64(1), T.int64(4), T.int64(4)), "float32"), p2: T.Buffer((T.int64(1), T.int64(128), T.int64(1), T.int64(1), T.int64(4)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(128), T.int64(14), T.int64(14), T.int64(4)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        conv2d_NCHWc = T.alloc_buffer((T.int64(1), T.int64(128), T.int64(14), T.int64(14), T.int64(4)))
        for n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused in T.parallel(T.int64(448), annotations={"pragma_auto_unroll_max_step": 512, "pragma_unroll_explicit": 1}):
            for n_2_init, oc_chunk_2_init, oh_2_init, ow_2_init, oc_block_2_init, n_3_init, oc_chunk_3_init, oh_3_init, ow_3_init in T.grid(T.int64(1), T.int64(4), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(1), T.int64(7)):
                for oc_block_3_fused_init in T.vectorized(T.int64(4)):
                    with T.block("conv2d_NCHWc_init"):
                        v_n = T.axis.spatial(T.int64(1), n_2_init + n_3_init)
                        v_oc_chunk = T.axis.spatial(T.int64(128), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused // T.int64(224) * T.int64(64) + n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused % T.int64(8) * T.int64(8) + oc_chunk_2_init * T.int64(2) + oc_chunk_3_init)
                        v_oh = T.axis.spatial(T.int64(14), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused % T.int64(224) // T.int64(16) + oh_2_init + oh_3_init)
                        v_ow = T.axis.spatial(T.int64(14), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused % T.int64(16) // T.int64(8) * T.int64(7) + ow_2_init * T.int64(7) + ow_3_init)
                        v_oc_block = T.axis.spatial(T.int64(4), oc_block_2_init * T.int64(4) + oc_block_3_fused_init)
                        T.reads()
                        T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                        T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                        conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = T.float32(0)
            for ic_0, kh_0, kw_0, n_2, oc_chunk_2, oh_2, ow_2, oc_block_2, ic_1, kh_1, kw_1, n_3, oc_chunk_3, oh_3, ow_3 in T.grid(T.int64(32), T.int64(1), T.int64(1), T.int64(1), T.int64(4), T.int64(1), T.int64(1), T.int64(1), T.int64(32), T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(1), T.int64(7)):
                for oc_block_3_fused in T.vectorized(T.int64(4)):
                    with T.block("conv2d_NCHWc_update"):
                        v_n = T.axis.spatial(T.int64(1), n_2 + n_3)
                        v_oc_chunk = T.axis.spatial(T.int64(128), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused // T.int64(224) * T.int64(64) + n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused % T.int64(8) * T.int64(8) + oc_chunk_2 * T.int64(2) + oc_chunk_3)
                        v_oh = T.axis.spatial(T.int64(14), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused % T.int64(224) // T.int64(16) + oh_2 + oh_3)
                        v_ow = T.axis.spatial(T.int64(14), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused % T.int64(16) // T.int64(8) * T.int64(7) + ow_2 * T.int64(7) + ow_3)
                        v_oc_block = T.axis.spatial(T.int64(4), oc_block_2 * T.int64(4) + oc_block_3_fused)
                        v_ic = T.axis.reduce(T.int64(1024), ic_0 * T.int64(32) + ic_1)
                        v_kh = T.axis.reduce(T.int64(1), kh_0 + kh_1)
                        v_kw = T.axis.reduce(T.int64(1), kw_0 + kw_1)
                        T.reads(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block], p0[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)], p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block])
                        T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                        T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                        conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] + p0[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)] * p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block]
        for ax0_ax1_ax2_ax3_ax4_fused_0 in T.parallel(T.int64(1568)):
            for ax0_ax1_ax2_ax3_ax4_fused_1 in T.vectorized(T.int64(64)):
                with T.block("T_relu"):
                    v_ax0 = T.axis.spatial(T.int64(1), T.int64(0))
                    v_ax1 = T.axis.spatial(T.int64(128), (ax0_ax1_ax2_ax3_ax4_fused_0 * T.int64(64) + ax0_ax1_ax2_ax3_ax4_fused_1) // T.int64(784))
                    v_ax2 = T.axis.spatial(T.int64(14), (ax0_ax1_ax2_ax3_ax4_fused_0 * T.int64(64) + ax0_ax1_ax2_ax3_ax4_fused_1) % T.int64(784) // T.int64(56))
                    v_ax3 = T.axis.spatial(T.int64(14), (ax0_ax1_ax2_ax3_ax4_fused_0 * T.int64(64) + ax0_ax1_ax2_ax3_ax4_fused_1) % T.int64(56) // T.int64(4))
                    v_ax4 = T.axis.spatial(T.int64(4), (ax0_ax1_ax2_ax3_ax4_fused_0 * T.int64(64) + ax0_ax1_ax2_ax3_ax4_fused_1) % T.int64(4))
                    T.reads(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4])
                    T.writes(T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                    T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.max(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] + p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4], T.float32(0))
b0 = sch.get_block(name="conv2d_NCHWc", func_name="main")
b1 = sch.get_block(name="T_add", func_name="main")
b2 = sch.get_block(name="root", func_name="main")
sch.compute_inline(block=b1)
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.tiling_structure", ann_val="SSRSRS")
l3, l4, l5, l6, l7, l8, l9, l10 = sch.get_loops(block=b0)
v11, v12, v13, v14 = sch.sample_perfect_tile(loop=l3, n=4, max_innermost_factor=64, decision=[1, 1, 1, 1])
l15, l16, l17, l18 = sch.split(loop=l3, factors=[v11, v12, v13, v14], preserve_unit_iters=True)
v19, v20, v21, v22 = sch.sample_perfect_tile(loop=l4, n=4, max_innermost_factor=64, decision=[2, 8, 4, 2])
l23, l24, l25, l26 = sch.split(loop=l4, factors=[v19, v20, v21, v22], preserve_unit_iters=True)
v27, v28, v29, v30 = sch.sample_perfect_tile(loop=l5, n=4, max_innermost_factor=64, decision=[14, 1, 1, 1])
l31, l32, l33, l34 = sch.split(loop=l5, factors=[v27, v28, v29, v30], preserve_unit_iters=True)
v35, v36, v37, v38 = sch.sample_perfect_tile(loop=l6, n=4, max_innermost_factor=64, decision=[2, 1, 1, 7])
l39, l40, l41, l42 = sch.split(loop=l6, factors=[v35, v36, v37, v38], preserve_unit_iters=True)
v43, v44, v45, v46 = sch.sample_perfect_tile(loop=l7, n=4, max_innermost_factor=64, decision=[1, 1, 1, 4])
l47, l48, l49, l50 = sch.split(loop=l7, factors=[v43, v44, v45, v46], preserve_unit_iters=True)
v51, v52 = sch.sample_perfect_tile(loop=l8, n=2, max_innermost_factor=64, decision=[32, 32])
l53, l54 = sch.split(loop=l8, factors=[v51, v52], preserve_unit_iters=True)
v55, v56 = sch.sample_perfect_tile(loop=l9, n=2, max_innermost_factor=64, decision=[1, 1])
l57, l58 = sch.split(loop=l9, factors=[v55, v56], preserve_unit_iters=True)
v59, v60 = sch.sample_perfect_tile(loop=l10, n=2, max_innermost_factor=64, decision=[1, 1])
l61, l62 = sch.split(loop=l10, factors=[v59, v60], preserve_unit_iters=True)
sch.reorder(l15, l23, l31, l39, l47, l16, l24, l32, l40, l48, l53, l57, l61, l17, l25, l33, l41, l49, l54, l58, l62, l18, l26, l34, l42, l50)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.vectorize", ann_val=64)
v63 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.unroll_explicit", ann_val=v63)
sch.enter_postproc()
b64 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b64, ann_key="meta_schedule.parallel")
sch.unannotate(block_or_loop=b64, ann_key="meta_schedule.vectorize")
sch.unannotate(block_or_loop=b64, ann_key="meta_schedule.unroll_explicit")
b65, b66 = sch.get_child_blocks(b64)
l67, l68, l69, l70, l71, l72, l73, l74, l75, l76, l77, l78, l79, l80, l81, l82, l83, l84, l85, l86, l87, l88, l89, l90, l91, l92 = sch.get_loops(block=b65)
l93 = sch.fuse(l67, l68, l69, l70, l71, l72, l73, l74, l75, l76, preserve_unit_iters=True)
sch.parallel(loop=l93)
l94 = sch.fuse(l92, preserve_unit_iters=True)
sch.vectorize(loop=l94)
sch.annotate(block_or_loop=l93, ann_key="pragma_auto_unroll_max_step", ann_val=512)
sch.annotate(block_or_loop=l93, ann_key="pragma_unroll_explicit", ann_val=1)
l95, l96, l97, l98, l99 = sch.get_loops(block=b66)
l100 = sch.fuse(l95, l96, l97, l98, l99, preserve_unit_iters=True)
l101, l102 = sch.split(loop=l100, factors=[None, 64], preserve_unit_iters=True)
sch.parallel(loop=l101)
sch.vectorize(loop=l102)
b103 = sch.get_block(name="conv2d_NCHWc", func_name="main")
l104, l105, l106, l107, l108, l109, l110, l111, l112, l113, l114, l115, l116, l117, l118, l119, l120 = sch.get_loops(block=b103)
b121 = sch.decompose_reduction(block=b103, loop=l105)
2024-04-29 12:42:19 [INFO] [task_scheduler.cc:131] [Task #38: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_12] Trial #279: GFLOPs: 234.2318. Time: 878.2823 us. Best GFLOPs: 324.3005
2024-04-29 12:42:19 [INFO] [task_scheduler.cc:131] [Task #38: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_12] Trial #280: GFLOPs: 241.9342. Time: 850.3203 us. Best GFLOPs: 324.3005
2024-04-29 12:42:19 [INFO] [task_scheduler.cc:131] [Task #38: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_12] Trial #281: GFLOPs: 231.5775. Time: 888.3488 us. Best GFLOPs: 324.3005
2024-04-29 12:42:19 [INFO] [task_scheduler.cc:131] [Task #38: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_12] Trial #282: GFLOPs: 207.6835. Time: 990.5535 us. Best GFLOPs: 324.3005
2024-04-29 12:42:19 [INFO] [task_scheduler.cc:131] [Task #38: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_12] Trial #283: GFLOPs: 176.0820. Time: 1168.3285 us. Best GFLOPs: 324.3005
2024-04-29 12:42:19 [INFO] [task_scheduler.cc:131] [Task #38: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_12] Trial #284: GFLOPs: 193.3374. Time: 1064.0547 us. Best GFLOPs: 324.3005
2024-04-29 12:42:19 [INFO] [task_scheduler.cc:131] [Task #38: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_12] Trial #285: GFLOPs: 216.0326. Time: 952.2713 us. Best GFLOPs: 324.3005
2024-04-29 12:42:19 [INFO] [task_scheduler.cc:131] [Task #38: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_12] Trial #286: GFLOPs: 155.9009. Time: 1319.5668 us. Best GFLOPs: 324.3005
2024-04-29 12:42:19 [INFO] [task_scheduler.cc:131] [Task #38: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_12] Trial #287: GFLOPs: 152.7398. Time: 1346.8765 us. Best GFLOPs: 324.3005
2024-04-29 12:42:19 [INFO] [task_scheduler.cc:131] [Task #38: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_12] Trial #288: GFLOPs: 153.6331. Time: 1339.0444 us. Best GFLOPs: 324.3005
2024-04-29 12:42:19 [INFO] [task_scheduler.cc:131] [Task #38: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_12] Trial #289: GFLOPs: 159.1009. Time: 1293.0259 us. Best GFLOPs: 324.3005
2024-04-29 12:42:19 [INFO] [task_scheduler.cc:131] [Task #38: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_12] Trial #290: GFLOPs: 210.6824. Time: 976.4536 us. Best GFLOPs: 324.3005
2024-04-29 12:42:19 [INFO] [task_scheduler.cc:131] [Task #38: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_12] Trial #291: GFLOPs: 209.6721. Time: 981.1588 us. Best GFLOPs: 324.3005
2024-04-29 12:42:19 [INFO] [task_scheduler.cc:131] [Task #38: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_12] Trial #292: GFLOPs: 324.2835. Time: 634.3881 us. Best GFLOPs: 324.3005
2024-04-29 12:42:19 [INFO] [task_scheduler.cc:131] [Task #38: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_12] Trial #293: GFLOPs: 218.1081. Time: 943.2093 us. Best GFLOPs: 324.3005
2024-04-29 12:42:19 [INFO] [task_scheduler.cc:131] [Task #38: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_12] Trial #294: GFLOPs: 220.5700. Time: 932.6816 us. Best GFLOPs: 324.3005
2024-04-29 12:42:19 [INFO] [task_scheduler.cc:131] [Task #38: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_12] Trial #295: GFLOPs: 200.1700. Time: 1027.7346 us. Best GFLOPs: 324.3005
2024-04-29 12:42:19 [INFO] [task_scheduler.cc:131] [Task #38: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_12] Trial #296: GFLOPs: 121.1849. Time: 1697.5841 us. Best GFLOPs: 324.3005
2024-04-29 12:42:19 [INFO] [task_scheduler.cc:131] [Task #38: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_12] Trial #297: GFLOPs: 217.0491. Time: 947.8114 us. Best GFLOPs: 324.3005
2024-04-29 12:42:19 [INFO] [task_scheduler.cc:131] [Task #38: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_12] Trial #298: GFLOPs: 231.4752. Time: 888.7416 us. Best GFLOPs: 324.3005
2024-04-29 12:42:19 [INFO] [task_scheduler.cc:131] [Task #38: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_12] Trial #299: GFLOPs: 217.7954. Time: 944.5638 us. Best GFLOPs: 324.3005
2024-04-29 12:42:19 [INFO] [task_scheduler.cc:131] [Task #38: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_12] Trial #300: GFLOPs: 183.0658. Time: 1123.7576 us. Best GFLOPs: 324.3005
2024-04-29 12:42:19 [INFO] [task_scheduler.cc:131] [Task #38: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_12] Trial #301: GFLOPs: 192.2444. Time: 1070.1046 us. Best GFLOPs: 324.3005
2024-04-29 12:42:19 [INFO] [task_scheduler.cc:131] [Task #38: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_12] Trial #302: GFLOPs: 189.0483. Time: 1088.1959 us. Best GFLOPs: 324.3005
2024-04-29 12:42:19 [INFO] [task_scheduler.cc:131] [Task #38: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_12] Trial #303: GFLOPs: 234.7385. Time: 876.3862 us. Best GFLOPs: 324.3005
2024-04-29 12:42:19 [INFO] [task_scheduler.cc:131] [Task #38: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_12] Trial #304: GFLOPs: 184.8672. Time: 1112.8074 us. Best GFLOPs: 324.3005
2024-04-29 12:42:19 [INFO] [task_scheduler.cc:131] [Task #38: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_12] Trial #305: GFLOPs: 191.9332. Time: 1071.8396 us. Best GFLOPs: 324.3005
2024-04-29 12:42:19 [INFO] [task_scheduler.cc:131] [Task #38: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_12] Trial #306: GFLOPs: 189.8872. Time: 1083.3884 us. Best GFLOPs: 324.3005
2024-04-29 12:42:19 [INFO] [task_scheduler.cc:131] [Task #38: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_12] Trial #307: GFLOPs: 181.1340. Time: 1135.7427 us. Best GFLOPs: 324.3005
2024-04-29 12:42:19 [INFO] [task_scheduler.cc:131] [Task #38: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_12] Trial #308: GFLOPs: 157.6621. Time: 1304.8262 us. Best GFLOPs: 324.3005
2024-04-29 12:42:19 [INFO] [task_scheduler.cc:131] [Task #38: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_12] Trial #309: GFLOPs: 205.6819. Time: 1000.1931 us. Best GFLOPs: 324.3005
2024-04-29 12:42:19 [INFO] [task_scheduler.cc:131] [Task #38: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_12] Trial #310: GFLOPs: 169.4629. Time: 1213.9623 us. Best GFLOPs: 324.3005
2024-04-29 12:42:19 [INFO] [task_scheduler.cc:131] [Task #38: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_12] Trial #311: GFLOPs: 165.0857. Time: 1246.1507 us. Best GFLOPs: 324.3005
2024-04-29 12:42:19 [INFO] [task_scheduler.cc:131] [Task #38: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_12] Trial #312: GFLOPs: 175.6575. Time: 1171.1516 us. Best GFLOPs: 324.3005
2024-04-29 12:42:19 [INFO] [task_scheduler.cc:131] [Task #38: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_12] Trial #313: GFLOPs: 179.8826. Time: 1143.6437 us. Best GFLOPs: 324.3005
2024-04-29 12:42:19 [INFO] [task_scheduler.cc:131] [Task #38: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_12] Trial #314: GFLOPs: 140.8342. Time: 1460.7360 us. Best GFLOPs: 324.3005
2024-04-29 12:42:19 [INFO] [task_scheduler.cc:131] [Task #38: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_12] Trial #315: GFLOPs: 164.4913. Time: 1250.6533 us. Best GFLOPs: 324.3005
2024-04-29 12:42:19 [INFO] [task_scheduler.cc:131] [Task #38: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_12] Trial #316: GFLOPs: 230.7350. Time: 891.5927 us. Best GFLOPs: 324.3005
2024-04-29 12:42:19 [INFO] [task_scheduler.cc:131] [Task #38: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_12] Trial #317: GFLOPs: 127.0085. Time: 1619.7465 us. Best GFLOPs: 324.3005
2024-04-29 12:42:19 [INFO] [task_scheduler.cc:131] [Task #38: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_12] Trial #318: GFLOPs: 92.2642. Time: 2229.7024 us. Best GFLOPs: 324.3005
2024-04-29 12:42:19 [INFO] [task_scheduler.cc:131] [Task #38: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_12] Trial #319: GFLOPs: 138.6421. Time: 1483.8318 us. Best GFLOPs: 324.3005
2024-04-29 12:42:19 [INFO] [task_scheduler.cc:131] [Task #38: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_12] Trial #320: GFLOPs: 7.9619. Time: 25838.1817 us. Best GFLOPs: 324.3005
