2024-04-29 07:27:45 [INFO] [task_scheduler.cc:160] Initializing Task #46: "fused_nn_global_avg_pool2d"
2024-04-29 07:27:45 [INFO] [task_scheduler.cc:35] 
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(64), T.int64(7), T.int64(7), T.int64(32)), "float32"), adaptive_pool_avg: T.Buffer((T.int64(1), T.int64(64), T.int64(1), T.int64(1), T.int64(32)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        adaptive_pool_sum = T.alloc_buffer((T.int64(1), T.int64(64), T.int64(1), T.int64(1), T.int64(32)))
        for ax0, ax1, ax2, ax3, ax4, rv0, rv1 in T.grid(T.int64(1), T.int64(64), T.int64(1), T.int64(1), T.int64(32), T.int64(7), T.int64(7)):
            with T.block("adaptive_pool_sum"):
                v_ax0, v_ax1, v_ax2, v_ax3, v_ax4, v_rv0, v_rv1 = T.axis.remap("SSSSSRR", [ax0, ax1, ax2, ax3, ax4, rv0, rv1])
                T.reads(p0[v_ax0, v_ax1, v_ax2 * T.int64(7) + v_rv0, v_ax3 * T.int64(7) + v_rv1, v_ax4])
                T.writes(adaptive_pool_sum[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                with T.init():
                    adaptive_pool_sum[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.float32(0)
                adaptive_pool_sum[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = adaptive_pool_sum[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] + p0[v_ax0, v_ax1, v_ax2 * T.int64(7) + v_rv0, v_ax3 * T.int64(7) + v_rv1, v_ax4]
        for ax0, ax1, ax2, ax3, ax4 in T.grid(T.int64(1), T.int64(64), T.int64(1), T.int64(1), T.int64(32)):
            with T.block("adaptive_pool_avg"):
                v_ax0, v_ax1, v_ax2, v_ax3, v_ax4 = T.axis.remap("SSSSS", [ax0, ax1, ax2, ax3, ax4])
                T.reads(adaptive_pool_sum[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                T.writes(adaptive_pool_avg[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                T.block_attr({"schedule_rule": "meta_schedule.adaptive_pool_avg"})
                adaptive_pool_avg[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = adaptive_pool_sum[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] * T.float32(0.020408163265306121)
2024-04-29 07:27:45 [INFO] [task_scheduler.cc:164] Total 3 design space(s) generated
2024-04-29 07:27:45 [INFO] [task_scheduler.cc:170] Design space #0:
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(64), T.int64(7), T.int64(7), T.int64(32)), "float32"), adaptive_pool_avg: T.Buffer((T.int64(1), T.int64(64), T.int64(1), T.int64(1), T.int64(32)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        with T.block("root"):
            T.reads()
            T.writes()
            T.block_attr({"meta_schedule.parallel": 768, "meta_schedule.unroll_explicit": 512, "meta_schedule.vectorize": 64})
            adaptive_pool_sum = T.alloc_buffer((T.int64(1), T.int64(64), T.int64(1), T.int64(1), T.int64(32)))
            adaptive_pool_sum_rf = T.alloc_buffer((T.int64(1), T.int64(64), T.int64(1), T.int64(1), T.int64(32), T.int64(1)))
            for ax0, ax1 in T.grid(T.int64(1), T.int64(64)):
                for ax0_1, ax1_1, ax2, ax3, ax4, ax5, ax6 in T.grid(T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(32), T.int64(49)):
                    with T.block("adaptive_pool_sum_rf"):
                        vrv0_rv1_fused_0, v_ax0 = T.axis.remap("SS", [ax0_1, ax1_1])
                        v_ax1 = T.axis.spatial(T.int64(64), ax1 + ax2)
                        v_ax2, v_ax3, v_ax4, vrv0_rv1_fused_1 = T.axis.remap("SSSR", [ax3, ax4, ax5, ax6])
                        T.reads(p0[v_ax0, v_ax1, v_ax2 * T.int64(7) + (vrv0_rv1_fused_0 * T.int64(49) + vrv0_rv1_fused_1) // T.int64(7), v_ax3 * T.int64(7) + (vrv0_rv1_fused_0 * T.int64(49) + vrv0_rv1_fused_1) % T.int64(7), v_ax4])
                        T.writes(adaptive_pool_sum_rf[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4, vrv0_rv1_fused_0])
                        with T.init():
                            adaptive_pool_sum_rf[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4, vrv0_rv1_fused_0] = T.float32(0)
                        adaptive_pool_sum_rf[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4, vrv0_rv1_fused_0] = adaptive_pool_sum_rf[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4, vrv0_rv1_fused_0] + p0[v_ax0, v_ax1, v_ax2 * T.int64(7) + (vrv0_rv1_fused_0 * T.int64(49) + vrv0_rv1_fused_1) // T.int64(7), v_ax3 * T.int64(7) + (vrv0_rv1_fused_0 * T.int64(49) + vrv0_rv1_fused_1) % T.int64(7), v_ax4]
                for ax2, ax3, ax4 in T.grid(T.int64(1), T.int64(1), T.int64(32)):
                    for ax0_1, ax1_1, ax2_1, ax3_1, ax4_1, ax5 in T.grid(T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1)):
                        with T.block("adaptive_pool_sum"):
                            vrv0_rv1_fused_0, v_ax0 = T.axis.remap("RS", [ax0_1, ax1_1])
                            v_ax1 = T.axis.spatial(T.int64(64), ax1 + ax2_1)
                            v_ax2, v_ax3 = T.axis.remap("SS", [ax3_1, ax4_1])
                            v_ax4 = T.axis.spatial(T.int64(32), ax4 + ax5)
                            T.reads(adaptive_pool_sum_rf[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4, vrv0_rv1_fused_0])
                            T.writes(adaptive_pool_sum[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                            with T.init():
                                adaptive_pool_sum[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.float32(0)
                            adaptive_pool_sum[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = adaptive_pool_sum[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] + adaptive_pool_sum_rf[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4, vrv0_rv1_fused_0]
                    with T.block("adaptive_pool_avg"):
                        v_ax0, v_ax1, v_ax2, v_ax3, v_ax4 = T.axis.remap("SSSSS", [ax0, ax1, ax2, ax3, ax4])
                        T.reads(adaptive_pool_sum[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                        T.writes(adaptive_pool_avg[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                        adaptive_pool_avg[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = adaptive_pool_sum[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] * T.float32(0.020408163265306121)
b0 = sch.get_block(name="adaptive_pool_sum", func_name="main")
b1 = sch.get_block(name="adaptive_pool_avg", func_name="main")
b2 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b1, ann_key="schedule_rule")
l3, l4, l5, l6, l7, l8, l9 = sch.get_loops(block=b0)
l10 = sch.fuse(l8, l9, preserve_unit_iters=True)
v11, v12 = sch.sample_perfect_tile(loop=l10, n=2, max_innermost_factor=64, decision=[1, 49])
l13, l14 = sch.split(loop=l10, factors=[v11, v12], preserve_unit_iters=True)
b15 = sch.rfactor(loop=l13, factor_axis=5)
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.random_compute_producer", ann_val=1)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.vectorize", ann_val=64)
v16 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.unroll_explicit", ann_val=v16)
b17, = sch.get_producers(block=b0)
sch.unannotate(block_or_loop=b0, ann_key="meta_schedule.random_compute_producer")
l18 = sch.sample_compute_location(block=b0, decision=4)
sch.compute_at(block=b0, loop=l18, preserve_unit_loops=True, index=-1)
l19 = sch.sample_compute_location(block=b17, decision=1)
sch.compute_at(block=b17, loop=l19, preserve_unit_loops=True, index=-1)
2024-04-29 07:27:45 [INFO] [task_scheduler.cc:170] Design space #1:
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(64), T.int64(7), T.int64(7), T.int64(32)), "float32"), adaptive_pool_avg: T.Buffer((T.int64(1), T.int64(64), T.int64(1), T.int64(1), T.int64(32)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        with T.block("root"):
            T.reads()
            T.writes()
            T.block_attr({"meta_schedule.parallel": 768, "meta_schedule.unroll_explicit": 512, "meta_schedule.vectorize": 64})
            adaptive_pool_sum = T.alloc_buffer((T.int64(1), T.int64(64), T.int64(1), T.int64(1), T.int64(32)))
            adaptive_pool_sum_rf = T.alloc_buffer((T.int64(1), T.int64(64), T.int64(1), T.int64(1), T.int64(32), T.int64(49)))
            for ax0, ax1, ax2, ax3, ax4, rv0_rv1_fused_0, rv0_rv1_fused_1 in T.grid(T.int64(1), T.int64(64), T.int64(1), T.int64(1), T.int64(32), T.int64(1), T.int64(49)):
                with T.block("adaptive_pool_sum_rf"):
                    vrv0_rv1_fused_1, v_ax0, v_ax1, v_ax2, v_ax3, v_ax4, vrv0_rv1_fused_0 = T.axis.remap("SSSSSSR", [rv0_rv1_fused_1, ax0, ax1, ax2, ax3, ax4, rv0_rv1_fused_0])
                    T.reads(p0[v_ax0, v_ax1, v_ax2 * T.int64(7) + (vrv0_rv1_fused_0 * T.int64(49) + vrv0_rv1_fused_1) // T.int64(7), v_ax3 * T.int64(7) + (vrv0_rv1_fused_0 * T.int64(49) + vrv0_rv1_fused_1) % T.int64(7), v_ax4])
                    T.writes(adaptive_pool_sum_rf[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4, vrv0_rv1_fused_1])
                    with T.init():
                        adaptive_pool_sum_rf[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4, vrv0_rv1_fused_1] = T.float32(0)
                    adaptive_pool_sum_rf[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4, vrv0_rv1_fused_1] = adaptive_pool_sum_rf[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4, vrv0_rv1_fused_1] + p0[v_ax0, v_ax1, v_ax2 * T.int64(7) + (vrv0_rv1_fused_0 * T.int64(49) + vrv0_rv1_fused_1) // T.int64(7), v_ax3 * T.int64(7) + (vrv0_rv1_fused_0 * T.int64(49) + vrv0_rv1_fused_1) % T.int64(7), v_ax4]
            for ax0, ax1, ax2, ax3, ax4, rv0_rv1_fused_1 in T.grid(T.int64(1), T.int64(64), T.int64(1), T.int64(1), T.int64(32), T.int64(49)):
                with T.block("adaptive_pool_sum"):
                    vrv0_rv1_fused_1, v_ax0, v_ax1, v_ax2, v_ax3, v_ax4 = T.axis.remap("RSSSSS", [rv0_rv1_fused_1, ax0, ax1, ax2, ax3, ax4])
                    T.reads(adaptive_pool_sum_rf[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4, vrv0_rv1_fused_1])
                    T.writes(adaptive_pool_sum[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                    with T.init():
                        adaptive_pool_sum[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.float32(0)
                    adaptive_pool_sum[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = adaptive_pool_sum[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] + adaptive_pool_sum_rf[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4, vrv0_rv1_fused_1]
            for ax0, ax1, ax2, ax3, ax4 in T.grid(T.int64(1), T.int64(64), T.int64(1), T.int64(1), T.int64(32)):
                with T.block("adaptive_pool_avg"):
                    v_ax0, v_ax1, v_ax2, v_ax3, v_ax4 = T.axis.remap("SSSSS", [ax0, ax1, ax2, ax3, ax4])
                    T.reads(adaptive_pool_sum[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                    T.writes(adaptive_pool_avg[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                    adaptive_pool_avg[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = adaptive_pool_sum[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] * T.float32(0.020408163265306121)
b0 = sch.get_block(name="adaptive_pool_sum", func_name="main")
b1 = sch.get_block(name="adaptive_pool_avg", func_name="main")
b2 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b1, ann_key="schedule_rule")
l3, l4, l5, l6, l7, l8, l9 = sch.get_loops(block=b0)
l10 = sch.fuse(l8, l9, preserve_unit_iters=True)
v11, v12 = sch.sample_perfect_tile(loop=l10, n=2, max_innermost_factor=64, decision=[1, 49])
l13, l14 = sch.split(loop=l10, factors=[v11, v12], preserve_unit_iters=True)
b15 = sch.rfactor(loop=l14, factor_axis=5)
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.random_compute_producer", ann_val=1)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.vectorize", ann_val=64)
v16 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.unroll_explicit", ann_val=v16)
b17, = sch.get_producers(block=b0)
sch.unannotate(block_or_loop=b0, ann_key="meta_schedule.random_compute_producer")
l18 = sch.sample_compute_location(block=b0, decision=-1)
sch.compute_at(block=b0, loop=l18, preserve_unit_loops=True, index=-1)
l19 = sch.sample_compute_location(block=b17, decision=-1)
sch.compute_at(block=b17, loop=l19, preserve_unit_loops=True, index=-1)
2024-04-29 07:27:45 [INFO] [task_scheduler.cc:170] Design space #2:
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(64), T.int64(7), T.int64(7), T.int64(32)), "float32"), adaptive_pool_avg: T.Buffer((T.int64(1), T.int64(64), T.int64(1), T.int64(1), T.int64(32)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        with T.block("root"):
            T.reads()
            T.writes()
            T.block_attr({"meta_schedule.parallel": 768, "meta_schedule.unroll_explicit": 512, "meta_schedule.vectorize": 64})
            adaptive_pool_sum = T.alloc_buffer((T.int64(1), T.int64(64), T.int64(1), T.int64(1), T.int64(32)))
            for ax0, ax1, ax2, ax3, ax4 in T.grid(T.int64(1), T.int64(64), T.int64(1), T.int64(1), T.int64(32)):
                for ax0_1, ax1_1, ax2_1, ax3_1, ax4_1, ax5, ax6 in T.grid(T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(7), T.int64(7)):
                    with T.block("adaptive_pool_sum"):
                        v_ax0 = T.axis.spatial(T.int64(1), ax0_1)
                        v_ax1 = T.axis.spatial(T.int64(64), ax1 + ax1_1)
                        v_ax2, v_ax3 = T.axis.remap("SS", [ax2_1, ax3_1])
                        v_ax4 = T.axis.spatial(T.int64(32), ax4 + ax4_1)
                        v_rv0, v_rv1 = T.axis.remap("RR", [ax5, ax6])
                        T.reads(p0[v_ax0, v_ax1, v_ax2 * T.int64(7) + v_rv0, v_ax3 * T.int64(7) + v_rv1, v_ax4])
                        T.writes(adaptive_pool_sum[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                        with T.init():
                            adaptive_pool_sum[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.float32(0)
                        adaptive_pool_sum[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = adaptive_pool_sum[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] + p0[v_ax0, v_ax1, v_ax2 * T.int64(7) + v_rv0, v_ax3 * T.int64(7) + v_rv1, v_ax4]
                with T.block("adaptive_pool_avg"):
                    v_ax0, v_ax1, v_ax2, v_ax3, v_ax4 = T.axis.remap("SSSSS", [ax0, ax1, ax2, ax3, ax4])
                    T.reads(adaptive_pool_sum[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                    T.writes(adaptive_pool_avg[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                    adaptive_pool_avg[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = adaptive_pool_sum[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] * T.float32(0.020408163265306121)
b0 = sch.get_block(name="adaptive_pool_sum", func_name="main")
b1 = sch.get_block(name="adaptive_pool_avg", func_name="main")
b2 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b1, ann_key="schedule_rule")
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.vectorize", ann_val=64)
v3 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.unroll_explicit", ann_val=v3)
l4 = sch.sample_compute_location(block=b0, decision=4)
sch.compute_at(block=b0, loop=l4, preserve_unit_loops=True, index=-1)
2024-04-29 08:15:44 [INFO] [evolutionary_search.cc:713] Generating candidates......
2024-04-29 08:15:44 [INFO] [evolutionary_search.cc:715] Picked top 0 candidate(s) from database
2024-04-29 08:15:45 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x1633d7b8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x128327b8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x141da5d8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x150e27e8)]: 0 failure(s)
2024-04-29 08:15:45 [INFO] [evolutionary_search.cc:723] Sampled 512 candidate(s)
2024-04-29 08:15:48 [INFO] [evolutionary_search.cc:621] Evolve iter #0 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x1633d7b8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x128327b8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x141da5d8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x150e27e8)]: 0 failure(s)
2024-04-29 08:15:50 [INFO] [evolutionary_search.cc:621] Evolve iter #1 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x1633d7b8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x128327b8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x141da5d8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x150e27e8)]: 0 failure(s)
2024-04-29 08:15:53 [INFO] [evolutionary_search.cc:621] Evolve iter #2 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x1633d7b8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x128327b8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x141da5d8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x150e27e8)]: 0 failure(s)
2024-04-29 08:15:56 [INFO] [evolutionary_search.cc:621] Evolve iter #3 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x1633d7b8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x128327b8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x141da5d8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x150e27e8)]: 0 failure(s)
2024-04-29 08:15:57 [INFO] [evolutionary_search.cc:649] Scores of the best 64 candidates:
[1 : 16]:	0.9959  0.9958  0.9931  0.9857  0.9844  0.9783  0.9752  0.9714  0.9656  0.9597  0.9575  0.9504  0.9472  0.9419  0.9395  0.9369
[17 : 32]:	0.9309  0.9266  0.9256  0.9242  0.9226  0.9164  0.9164  0.9145  0.9144  0.9131  0.9046  0.9040  0.9005  0.8969  0.8955  0.8927
[33 : 48]:	0.8923  0.8917  0.8869  0.8860  0.8824  0.8805  0.8785  0.8782  0.8757  0.8742  0.8724  0.8653  0.8646  0.8591  0.8575  0.8533
[49 : 64]:	0.8525  0.8464  0.8460  0.8421  0.8409  0.8404  0.8293  0.8284  0.8208  0.8148  0.8066  0.8012  0.7970  0.7848  0.7828  0.7794
2024-04-29 08:15:57 [INFO] [evolutionary_search.cc:727] Got 64 candidate(s) with evolutionary search
2024-04-29 08:15:57 [INFO] [evolutionary_search.cc:730] Sending 64 candidates(s) for measurement
2024-04-29 08:22:28 [INFO] [task_scheduler.cc:131] [Task #46: fused_nn_global_avg_pool2d] Trial #1: GFLOPs: 4.4827. Time: 22.8436 us. Best GFLOPs: 4.4827
2024-04-29 08:22:28 [INFO] [task_scheduler.cc:131] [Task #46: fused_nn_global_avg_pool2d] Trial #2: GFLOPs: 3.5894. Time: 28.5281 us. Best GFLOPs: 4.4827
2024-04-29 08:22:28 [INFO] [task_scheduler.cc:131] [Task #46: fused_nn_global_avg_pool2d] Trial #3: GFLOPs: 8.1161. Time: 12.6169 us. Best GFLOPs: 8.1161
2024-04-29 08:22:28 [INFO] [task_scheduler.cc:131] [Task #46: fused_nn_global_avg_pool2d] Trial #4: GFLOPs: 4.5808. Time: 22.3542 us. Best GFLOPs: 8.1161
2024-04-29 08:22:28 [INFO] [task_scheduler.cc:131] [Task #46: fused_nn_global_avg_pool2d] Trial #5: GFLOPs: 6.2244. Time: 16.4515 us. Best GFLOPs: 8.1161
2024-04-29 08:22:28 [INFO] [task_scheduler.cc:131] [Task #46: fused_nn_global_avg_pool2d] Trial #6: GFLOPs: 3.7369. Time: 27.4027 us. Best GFLOPs: 8.1161
2024-04-29 08:22:28 [INFO] [task_scheduler.cc:131] [Task #46: fused_nn_global_avg_pool2d] Trial #7: GFLOPs: 4.2687. Time: 23.9884 us. Best GFLOPs: 8.1161
2024-04-29 08:22:28 [INFO] [task_scheduler.cc:131] [Task #46: fused_nn_global_avg_pool2d] Trial #8: GFLOPs: 7.6088. Time: 13.4582 us. Best GFLOPs: 8.1161
2024-04-29 08:22:28 [INFO] [task_scheduler.cc:131] [Task #46: fused_nn_global_avg_pool2d] Trial #9: GFLOPs: 5.9065. Time: 17.3369 us. Best GFLOPs: 8.1161
2024-04-29 08:22:28 [INFO] [task_scheduler.cc:131] [Task #46: fused_nn_global_avg_pool2d] Trial #10: GFLOPs: 4.4090. Time: 23.2252 us. Best GFLOPs: 8.1161
2024-04-29 08:22:28 [INFO] [task_scheduler.cc:131] [Task #46: fused_nn_global_avg_pool2d] Trial #11: GFLOPs: 3.2092. Time: 31.9080 us. Best GFLOPs: 8.1161
2024-04-29 08:22:28 [INFO] [task_scheduler.cc:131] [Task #46: fused_nn_global_avg_pool2d] Trial #12: GFLOPs: 3.0340. Time: 33.7509 us. Best GFLOPs: 8.1161
2024-04-29 08:22:28 [INFO] [task_scheduler.cc:131] [Task #46: fused_nn_global_avg_pool2d] Trial #13: GFLOPs: 3.0457. Time: 33.6211 us. Best GFLOPs: 8.1161
2024-04-29 08:22:28 [INFO] [task_scheduler.cc:131] [Task #46: fused_nn_global_avg_pool2d] Trial #14: GFLOPs: 3.0111. Time: 34.0074 us. Best GFLOPs: 8.1161
2024-04-29 08:22:28 [INFO] [task_scheduler.cc:131] [Task #46: fused_nn_global_avg_pool2d] Trial #15: GFLOPs: 3.6289. Time: 28.2182 us. Best GFLOPs: 8.1161
2024-04-29 08:22:28 [INFO] [task_scheduler.cc:131] [Task #46: fused_nn_global_avg_pool2d] Trial #16: GFLOPs: 5.8759. Time: 17.4270 us. Best GFLOPs: 8.1161
2024-04-29 08:22:28 [INFO] [task_scheduler.cc:131] [Task #46: fused_nn_global_avg_pool2d] Trial #17: GFLOPs: 6.5264. Time: 15.6901 us. Best GFLOPs: 8.1161
2024-04-29 08:22:28 [INFO] [task_scheduler.cc:131] [Task #46: fused_nn_global_avg_pool2d] Trial #18: GFLOPs: 3.1971. Time: 32.0289 us. Best GFLOPs: 8.1161
2024-04-29 08:22:28 [INFO] [task_scheduler.cc:131] [Task #46: fused_nn_global_avg_pool2d] Trial #19: GFLOPs: 4.0654. Time: 25.1879 us. Best GFLOPs: 8.1161
2024-04-29 08:22:28 [INFO] [task_scheduler.cc:131] [Task #46: fused_nn_global_avg_pool2d] Trial #20: GFLOPs: 3.0663. Time: 33.3949 us. Best GFLOPs: 8.1161
2024-04-29 08:22:28 [INFO] [task_scheduler.cc:131] [Task #46: fused_nn_global_avg_pool2d] Trial #21: GFLOPs: 2.5722. Time: 39.8096 us. Best GFLOPs: 8.1161
2024-04-29 08:22:28 [INFO] [task_scheduler.cc:131] [Task #46: fused_nn_global_avg_pool2d] Trial #22: GFLOPs: 3.9950. Time: 25.6322 us. Best GFLOPs: 8.1161
2024-04-29 08:22:28 [INFO] [task_scheduler.cc:131] [Task #46: fused_nn_global_avg_pool2d] Trial #23: GFLOPs: 8.0257. Time: 12.7591 us. Best GFLOPs: 8.1161
2024-04-29 08:22:28 [INFO] [task_scheduler.cc:131] [Task #46: fused_nn_global_avg_pool2d] Trial #24: GFLOPs: 3.3639. Time: 30.4408 us. Best GFLOPs: 8.1161
2024-04-29 08:22:28 [INFO] [task_scheduler.cc:131] [Task #46: fused_nn_global_avg_pool2d] Trial #25: GFLOPs: 6.6202. Time: 15.4679 us. Best GFLOPs: 8.1161
2024-04-29 08:22:28 [INFO] [task_scheduler.cc:131] [Task #46: fused_nn_global_avg_pool2d] Trial #26: GFLOPs: 4.8324. Time: 21.1903 us. Best GFLOPs: 8.1161
2024-04-29 08:22:28 [INFO] [task_scheduler.cc:131] [Task #46: fused_nn_global_avg_pool2d] Trial #27: GFLOPs: 8.0902. Time: 12.6572 us. Best GFLOPs: 8.1161
2024-04-29 08:22:28 [INFO] [task_scheduler.cc:131] [Task #46: fused_nn_global_avg_pool2d] Trial #28: GFLOPs: 4.8715. Time: 21.0200 us. Best GFLOPs: 8.1161
2024-04-29 08:22:28 [INFO] [task_scheduler.cc:131] [Task #46: fused_nn_global_avg_pool2d] Trial #29: GFLOPs: 3.7804. Time: 27.0867 us. Best GFLOPs: 8.1161
2024-04-29 08:22:28 [INFO] [task_scheduler.cc:131] [Task #46: fused_nn_global_avg_pool2d] Trial #30: GFLOPs: 4.0437. Time: 25.3233 us. Best GFLOPs: 8.1161
2024-04-29 08:22:28 [INFO] [task_scheduler.cc:131] [Task #46: fused_nn_global_avg_pool2d] Trial #31: GFLOPs: 8.3061. Time: 12.3283 us. Best GFLOPs: 8.3061
2024-04-29 08:22:28 [INFO] [task_scheduler.cc:131] [Task #46: fused_nn_global_avg_pool2d] Trial #32: GFLOPs: 3.9908. Time: 25.6588 us. Best GFLOPs: 8.3061
2024-04-29 08:22:28 [INFO] [task_scheduler.cc:131] [Task #46: fused_nn_global_avg_pool2d] Trial #33: GFLOPs: 4.2078. Time: 24.3357 us. Best GFLOPs: 8.3061
2024-04-29 08:22:28 [INFO] [task_scheduler.cc:131] [Task #46: fused_nn_global_avg_pool2d] Trial #34: GFLOPs: 5.9700. Time: 17.1525 us. Best GFLOPs: 8.3061
2024-04-29 08:22:28 [INFO] [task_scheduler.cc:131] [Task #46: fused_nn_global_avg_pool2d] Trial #35: GFLOPs: 5.0097. Time: 20.4404 us. Best GFLOPs: 8.3061
2024-04-29 08:22:28 [INFO] [task_scheduler.cc:131] [Task #46: fused_nn_global_avg_pool2d] Trial #36: GFLOPs: 3.5812. Time: 28.5938 us. Best GFLOPs: 8.3061
2024-04-29 08:22:28 [INFO] [task_scheduler.cc:131] [Task #46: fused_nn_global_avg_pool2d] Trial #37: GFLOPs: 3.7272. Time: 27.4734 us. Best GFLOPs: 8.3061
2024-04-29 08:22:28 [INFO] [task_scheduler.cc:131] [Task #46: fused_nn_global_avg_pool2d] Trial #38: GFLOPs: 4.8863. Time: 20.9565 us. Best GFLOPs: 8.3061
2024-04-29 08:22:28 [INFO] [task_scheduler.cc:131] [Task #46: fused_nn_global_avg_pool2d] Trial #39: GFLOPs: 2.8886. Time: 35.4496 us. Best GFLOPs: 8.3061
2024-04-29 08:22:28 [INFO] [task_scheduler.cc:131] [Task #46: fused_nn_global_avg_pool2d] Trial #40: GFLOPs: 4.3590. Time: 23.4915 us. Best GFLOPs: 8.3061
2024-04-29 08:22:28 [INFO] [task_scheduler.cc:131] [Task #46: fused_nn_global_avg_pool2d] Trial #41: GFLOPs: 2.6584. Time: 38.5200 us. Best GFLOPs: 8.3061
2024-04-29 08:22:28 [INFO] [task_scheduler.cc:131] [Task #46: fused_nn_global_avg_pool2d] Trial #42: GFLOPs: 9.4925. Time: 10.7875 us. Best GFLOPs: 9.4925
2024-04-29 08:22:28 [INFO] [task_scheduler.cc:131] [Task #46: fused_nn_global_avg_pool2d] Trial #43: GFLOPs: 3.6519. Time: 28.0403 us. Best GFLOPs: 9.4925
2024-04-29 08:22:28 [INFO] [task_scheduler.cc:131] [Task #46: fused_nn_global_avg_pool2d] Trial #44: GFLOPs: 8.3404. Time: 12.2777 us. Best GFLOPs: 9.4925
2024-04-29 08:22:28 [INFO] [task_scheduler.cc:131] [Task #46: fused_nn_global_avg_pool2d] Trial #45: GFLOPs: 4.6123. Time: 22.2017 us. Best GFLOPs: 9.4925
2024-04-29 08:22:28 [INFO] [task_scheduler.cc:131] [Task #46: fused_nn_global_avg_pool2d] Trial #46: GFLOPs: 7.7956. Time: 13.1357 us. Best GFLOPs: 9.4925
2024-04-29 08:22:28 [INFO] [task_scheduler.cc:131] [Task #46: fused_nn_global_avg_pool2d] Trial #47: GFLOPs: 2.8722. Time: 35.6524 us. Best GFLOPs: 9.4925
2024-04-29 08:22:28 [INFO] [task_scheduler.cc:131] [Task #46: fused_nn_global_avg_pool2d] Trial #48: GFLOPs: 8.2123. Time: 12.4691 us. Best GFLOPs: 9.4925
2024-04-29 08:22:28 [INFO] [task_scheduler.cc:131] [Task #46: fused_nn_global_avg_pool2d] Trial #49: GFLOPs: 8.2516. Time: 12.4097 us. Best GFLOPs: 9.4925
2024-04-29 08:22:28 [INFO] [task_scheduler.cc:131] [Task #46: fused_nn_global_avg_pool2d] Trial #50: GFLOPs: 3.1788. Time: 32.2138 us. Best GFLOPs: 9.4925
2024-04-29 08:22:28 [INFO] [task_scheduler.cc:131] [Task #46: fused_nn_global_avg_pool2d] Trial #51: GFLOPs: 3.0691. Time: 33.3653 us. Best GFLOPs: 9.4925
2024-04-29 08:22:28 [INFO] [task_scheduler.cc:131] [Task #46: fused_nn_global_avg_pool2d] Trial #52: GFLOPs: 3.4072. Time: 30.0538 us. Best GFLOPs: 9.4925
2024-04-29 08:22:28 [INFO] [task_scheduler.cc:131] [Task #46: fused_nn_global_avg_pool2d] Trial #53: GFLOPs: 6.1082. Time: 16.7642 us. Best GFLOPs: 9.4925
2024-04-29 08:22:28 [INFO] [task_scheduler.cc:131] [Task #46: fused_nn_global_avg_pool2d] Trial #54: GFLOPs: 2.5222. Time: 40.5997 us. Best GFLOPs: 9.4925
2024-04-29 08:22:28 [INFO] [task_scheduler.cc:131] [Task #46: fused_nn_global_avg_pool2d] Trial #55: GFLOPs: 3.9686. Time: 25.8025 us. Best GFLOPs: 9.4925
2024-04-29 08:22:28 [INFO] [task_scheduler.cc:131] [Task #46: fused_nn_global_avg_pool2d] Trial #56: GFLOPs: 2.4652. Time: 41.5374 us. Best GFLOPs: 9.4925
2024-04-29 08:22:28 [INFO] [task_scheduler.cc:131] [Task #46: fused_nn_global_avg_pool2d] Trial #57: GFLOPs: 8.3135. Time: 12.3174 us. Best GFLOPs: 9.4925
2024-04-29 08:22:28 [INFO] [task_scheduler.cc:131] [Task #46: fused_nn_global_avg_pool2d] Trial #58: GFLOPs: 3.8122. Time: 26.8613 us. Best GFLOPs: 9.4925
2024-04-29 08:22:28 [INFO] [task_scheduler.cc:131] [Task #46: fused_nn_global_avg_pool2d] Trial #59: GFLOPs: 2.6426. Time: 38.7497 us. Best GFLOPs: 9.4925
2024-04-29 08:22:28 [INFO] [task_scheduler.cc:131] [Task #46: fused_nn_global_avg_pool2d] Trial #60: GFLOPs: 3.0714. Time: 33.3397 us. Best GFLOPs: 9.4925
2024-04-29 08:22:28 [INFO] [task_scheduler.cc:131] [Task #46: fused_nn_global_avg_pool2d] Trial #61: GFLOPs: 6.0372. Time: 16.9614 us. Best GFLOPs: 9.4925
2024-04-29 08:22:28 [INFO] [task_scheduler.cc:131] [Task #46: fused_nn_global_avg_pool2d] Trial #62: GFLOPs: 5.0790. Time: 20.1616 us. Best GFLOPs: 9.4925
2024-04-29 08:22:28 [INFO] [task_scheduler.cc:131] [Task #46: fused_nn_global_avg_pool2d] Trial #63: GFLOPs: 3.5432. Time: 28.9005 us. Best GFLOPs: 9.4925
2024-04-29 08:22:28 [INFO] [task_scheduler.cc:131] [Task #46: fused_nn_global_avg_pool2d] Trial #64: GFLOPs: 3.3575. Time: 30.4988 us. Best GFLOPs: 9.4925
