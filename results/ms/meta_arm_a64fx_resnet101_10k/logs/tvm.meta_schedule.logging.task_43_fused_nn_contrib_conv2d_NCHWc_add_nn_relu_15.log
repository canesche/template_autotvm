2024-04-29 07:27:33 [INFO] [task_scheduler.cc:160] Initializing Task #43: "fused_nn_contrib_conv2d_NCHWc_add_nn_relu_15"
2024-04-29 07:27:33 [INFO] [task_scheduler.cc:35] 
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(1), T.int64(7), T.int64(7), T.int64(512)), "float32"), p1: T.Buffer((T.int64(16), T.int64(1), T.int64(3), T.int64(3), T.int64(512), T.int64(32)), "float32"), p2: T.Buffer((T.int64(1), T.int64(16), T.int64(1), T.int64(1), T.int64(32)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(16), T.int64(7), T.int64(7), T.int64(32)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        data_pad = T.alloc_buffer((T.int64(1), T.int64(1), T.int64(9), T.int64(9), T.int64(512)))
        conv2d_NCHWc = T.alloc_buffer((T.int64(1), T.int64(16), T.int64(7), T.int64(7), T.int64(32)))
        T_add = T.alloc_buffer((T.int64(1), T.int64(16), T.int64(7), T.int64(7), T.int64(32)))
        for i0, i1, i2, i3, i4 in T.grid(T.int64(1), T.int64(1), T.int64(9), T.int64(9), T.int64(512)):
            with T.block("data_pad"):
                v_i0, v_i1, v_i2, v_i3, v_i4 = T.axis.remap("SSSSS", [i0, i1, i2, i3, i4])
                T.reads(p0[v_i0, v_i1, v_i2 - T.int64(1), v_i3 - T.int64(1), v_i4])
                T.writes(data_pad[v_i0, v_i1, v_i2, v_i3, v_i4])
                data_pad[v_i0, v_i1, v_i2, v_i3, v_i4] = T.if_then_else(T.int64(1) <= v_i2 and v_i2 < T.int64(8) and T.int64(1) <= v_i3 and v_i3 < T.int64(8), p0[v_i0, v_i1, v_i2 - T.int64(1), v_i3 - T.int64(1), v_i4], T.float32(0))
        for n, oc_chunk, oh, ow, oc_block, ic, kh, kw in T.grid(T.int64(1), T.int64(16), T.int64(7), T.int64(7), T.int64(32), T.int64(512), T.int64(3), T.int64(3)):
            with T.block("conv2d_NCHWc"):
                v_n, v_oc_chunk, v_oh, v_ow, v_oc_block, v_ic, v_kh, v_kw = T.axis.remap("SSSSSRRR", [n, oc_chunk, oh, ow, oc_block, ic, kh, kw])
                T.reads(data_pad[v_n, v_ic // T.int64(512), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(512)], p1[v_oc_chunk, v_ic // T.int64(512), v_kh, v_kw, v_ic % T.int64(512), v_oc_block])
                T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                with T.init():
                    conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = T.float32(0)
                conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] + data_pad[v_n, v_ic // T.int64(512), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(512)] * p1[v_oc_chunk, v_ic // T.int64(512), v_kh, v_kw, v_ic % T.int64(512), v_oc_block]
        for ax0, ax1, ax2, ax3, ax4 in T.grid(T.int64(1), T.int64(16), T.int64(7), T.int64(7), T.int64(32)):
            with T.block("T_add"):
                v_ax0, v_ax1, v_ax2, v_ax3, v_ax4 = T.axis.remap("SSSSS", [ax0, ax1, ax2, ax3, ax4])
                T.reads(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4])
                T.writes(T_add[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                T_add[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] + p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4]
        for ax0, ax1, ax2, ax3, ax4 in T.grid(T.int64(1), T.int64(16), T.int64(7), T.int64(7), T.int64(32)):
            with T.block("T_relu"):
                v_ax0, v_ax1, v_ax2, v_ax3, v_ax4 = T.axis.remap("SSSSS", [ax0, ax1, ax2, ax3, ax4])
                T.reads(T_add[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                T.writes(T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.max(T_add[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], T.float32(0))
2024-04-29 07:27:33 [INFO] [task_scheduler.cc:164] Total 3 design space(s) generated
2024-04-29 07:27:33 [INFO] [task_scheduler.cc:170] Design space #0:
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(1), T.int64(7), T.int64(7), T.int64(512)), "float32"), p1: T.Buffer((T.int64(16), T.int64(1), T.int64(3), T.int64(3), T.int64(512), T.int64(32)), "float32"), p2: T.Buffer((T.int64(1), T.int64(16), T.int64(1), T.int64(1), T.int64(32)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(16), T.int64(7), T.int64(7), T.int64(32)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        with T.block("root"):
            T.reads()
            T.writes()
            T.block_attr({"meta_schedule.parallel": 768, "meta_schedule.unroll_explicit": 0, "meta_schedule.vectorize": 64})
            data_pad = T.alloc_buffer((T.int64(1), T.int64(1), T.int64(9), T.int64(9), T.int64(512)))
            conv2d_NCHWc = T.alloc_buffer((T.int64(1), T.int64(16), T.int64(7), T.int64(7), T.int64(32)))
            for n_0, oc_chunk_0 in T.grid(T.int64(1), T.int64(4)):
                for ax0, ax1, ax2, ax3, ax4 in T.grid(T.int64(1), T.int64(1), T.int64(9), T.int64(9), T.int64(512)):
                    with T.block("data_pad"):
                        v_i0, v_i1, v_i2, v_i3, v_i4 = T.axis.remap("SSSSS", [ax0, ax1, ax2, ax3, ax4])
                        T.reads(p0[v_i0, v_i1, v_i2 - T.int64(1), v_i3 - T.int64(1), v_i4])
                        T.writes(data_pad[v_i0, v_i1, v_i2, v_i3, v_i4])
                        data_pad[v_i0, v_i1, v_i2, v_i3, v_i4] = T.if_then_else(T.int64(1) <= v_i2 and v_i2 < T.int64(8) and T.int64(1) <= v_i3 and v_i3 < T.int64(8), p0[v_i0, v_i1, v_i2 - T.int64(1), v_i3 - T.int64(1), v_i4], T.float32(0))
                for oh_0, ow_0, oc_block_0, n_1, oc_chunk_1, oh_1, ow_1, oc_block_1, ic_0, kh_0, kw_0, n_2, oc_chunk_2, oh_2, ow_2, oc_block_2, ic_1, kh_1, kw_1, n_3, oc_chunk_3, oh_3, ow_3, oc_block_3 in T.grid(T.int64(1), T.int64(1), T.int64(4), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(128), T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(1), T.int64(7), T.int64(2), T.int64(4), T.int64(3), T.int64(3), T.int64(1), T.int64(2), T.int64(7), T.int64(1), T.int64(2)):
                    with T.block("conv2d_NCHWc"):
                        v_n = T.axis.spatial(T.int64(1), n_0 + n_1 + n_2 + n_3)
                        v_oc_chunk = T.axis.spatial(T.int64(16), oc_chunk_0 * T.int64(4) + oc_chunk_1 * T.int64(4) + oc_chunk_2 * T.int64(2) + oc_chunk_3)
                        v_oh = T.axis.spatial(T.int64(7), oh_0 * T.int64(7) + oh_1 * T.int64(7) + oh_2 * T.int64(7) + oh_3)
                        v_ow = T.axis.spatial(T.int64(7), ow_0 * T.int64(7) + ow_1 * T.int64(7) + ow_2 + ow_3)
                        v_oc_block = T.axis.spatial(T.int64(32), oc_block_0 * T.int64(8) + oc_block_1 * T.int64(4) + oc_block_2 * T.int64(2) + oc_block_3)
                        v_ic = T.axis.reduce(T.int64(512), ic_0 * T.int64(4) + ic_1)
                        v_kh = T.axis.reduce(T.int64(3), kh_0 * T.int64(3) + kh_1)
                        v_kw = T.axis.reduce(T.int64(3), kw_0 * T.int64(3) + kw_1)
                        T.reads(data_pad[v_n, v_ic // T.int64(512), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(512)], p1[v_oc_chunk, v_ic // T.int64(512), v_kh, v_kw, v_ic % T.int64(512), v_oc_block])
                        T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                        T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                        with T.init():
                            conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = T.float32(0)
                        conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] + data_pad[v_n, v_ic // T.int64(512), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(512)] * p1[v_oc_chunk, v_ic // T.int64(512), v_kh, v_kw, v_ic % T.int64(512), v_oc_block]
            for ax0, ax1, ax2, ax3, ax4 in T.grid(T.int64(1), T.int64(16), T.int64(7), T.int64(7), T.int64(32)):
                with T.block("T_relu"):
                    v_ax0, v_ax1, v_ax2, v_ax3, v_ax4 = T.axis.remap("SSSSS", [ax0, ax1, ax2, ax3, ax4])
                    T.reads(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4])
                    T.writes(T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                    T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.max(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] + p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4], T.float32(0))
b0 = sch.get_block(name="data_pad", func_name="main")
b1 = sch.get_block(name="conv2d_NCHWc", func_name="main")
b2 = sch.get_block(name="T_add", func_name="main")
b3 = sch.get_block(name="root", func_name="main")
sch.compute_inline(block=b2)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSRSRS")
l4, l5, l6, l7, l8, l9, l10, l11 = sch.get_loops(block=b1)
v12, v13, v14, v15 = sch.sample_perfect_tile(loop=l4, n=4, max_innermost_factor=64, decision=[1, 1, 1, 1])
l16, l17, l18, l19 = sch.split(loop=l4, factors=[v12, v13, v14, v15], preserve_unit_iters=True)
v20, v21, v22, v23 = sch.sample_perfect_tile(loop=l5, n=4, max_innermost_factor=64, decision=[4, 1, 2, 2])
l24, l25, l26, l27 = sch.split(loop=l5, factors=[v20, v21, v22, v23], preserve_unit_iters=True)
v28, v29, v30, v31 = sch.sample_perfect_tile(loop=l6, n=4, max_innermost_factor=64, decision=[1, 1, 1, 7])
l32, l33, l34, l35 = sch.split(loop=l6, factors=[v28, v29, v30, v31], preserve_unit_iters=True)
v36, v37, v38, v39 = sch.sample_perfect_tile(loop=l7, n=4, max_innermost_factor=64, decision=[1, 1, 7, 1])
l40, l41, l42, l43 = sch.split(loop=l7, factors=[v36, v37, v38, v39], preserve_unit_iters=True)
v44, v45, v46, v47 = sch.sample_perfect_tile(loop=l8, n=4, max_innermost_factor=64, decision=[4, 2, 2, 2])
l48, l49, l50, l51 = sch.split(loop=l8, factors=[v44, v45, v46, v47], preserve_unit_iters=True)
v52, v53 = sch.sample_perfect_tile(loop=l9, n=2, max_innermost_factor=64, decision=[128, 4])
l54, l55 = sch.split(loop=l9, factors=[v52, v53], preserve_unit_iters=True)
v56, v57 = sch.sample_perfect_tile(loop=l10, n=2, max_innermost_factor=64, decision=[1, 3])
l58, l59 = sch.split(loop=l10, factors=[v56, v57], preserve_unit_iters=True)
v60, v61 = sch.sample_perfect_tile(loop=l11, n=2, max_innermost_factor=64, decision=[1, 3])
l62, l63 = sch.split(loop=l11, factors=[v60, v61], preserve_unit_iters=True)
sch.reorder(l16, l24, l32, l40, l48, l17, l25, l33, l41, l49, l54, l58, l62, l18, l26, l34, l42, l50, l55, l59, l63, l19, l27, l35, l43, l51)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.vectorize", ann_val=64)
v64 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=0)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.unroll_explicit", ann_val=v64)
l65 = sch.sample_compute_location(block=b0, decision=1)
sch.compute_at(block=b0, loop=l65, preserve_unit_loops=True, index=-1)
2024-04-29 07:27:33 [INFO] [task_scheduler.cc:170] Design space #1:
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(1), T.int64(7), T.int64(7), T.int64(512)), "float32"), p1: T.Buffer((T.int64(16), T.int64(1), T.int64(3), T.int64(3), T.int64(512), T.int64(32)), "float32"), p2: T.Buffer((T.int64(1), T.int64(16), T.int64(1), T.int64(1), T.int64(32)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(16), T.int64(7), T.int64(7), T.int64(32)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        with T.block("root"):
            T.reads()
            T.writes()
            T.block_attr({"meta_schedule.parallel": 768, "meta_schedule.unroll_explicit": 64, "meta_schedule.vectorize": 64})
            data_pad = T.alloc_buffer((T.int64(1), T.int64(1), T.int64(9), T.int64(9), T.int64(512)))
            conv2d_NCHWc = T.alloc_buffer((T.int64(1), T.int64(16), T.int64(7), T.int64(7), T.int64(32)))
            for n_0, oc_chunk_0, oh_0, ow_0, oc_block_0 in T.grid(T.int64(1), T.int64(4), T.int64(1), T.int64(1), T.int64(4)):
                for ax0, ax1, ax2, ax3, ax4 in T.grid(T.int64(1), T.int64(1), T.int64(9), T.int64(9), T.int64(512)):
                    with T.block("data_pad"):
                        v_i0, v_i1, v_i2, v_i3, v_i4 = T.axis.remap("SSSSS", [ax0, ax1, ax2, ax3, ax4])
                        T.reads(p0[v_i0, v_i1, v_i2 - T.int64(1), v_i3 - T.int64(1), v_i4])
                        T.writes(data_pad[v_i0, v_i1, v_i2, v_i3, v_i4])
                        data_pad[v_i0, v_i1, v_i2, v_i3, v_i4] = T.if_then_else(T.int64(1) <= v_i2 and v_i2 < T.int64(8) and T.int64(1) <= v_i3 and v_i3 < T.int64(8), p0[v_i0, v_i1, v_i2 - T.int64(1), v_i3 - T.int64(1), v_i4], T.float32(0))
                for n_1, oc_chunk_1, oh_1, ow_1, oc_block_1 in T.grid(T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(2)):
                    for ic_0, kh_0, kw_0, n_2, oc_chunk_2, oh_2, ow_2, oc_block_2, ic_1, kh_1, kw_1, n_3, oc_chunk_3, oh_3, ow_3, oc_block_3 in T.grid(T.int64(128), T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(1), T.int64(7), T.int64(2), T.int64(4), T.int64(3), T.int64(3), T.int64(1), T.int64(2), T.int64(7), T.int64(1), T.int64(2)):
                        with T.block("conv2d_NCHWc"):
                            v_n = T.axis.spatial(T.int64(1), n_0 + n_1 + n_2 + n_3)
                            v_oc_chunk = T.axis.spatial(T.int64(16), oc_chunk_0 * T.int64(4) + oc_chunk_1 * T.int64(4) + oc_chunk_2 * T.int64(2) + oc_chunk_3)
                            v_oh = T.axis.spatial(T.int64(7), oh_0 * T.int64(7) + oh_1 * T.int64(7) + oh_2 * T.int64(7) + oh_3)
                            v_ow = T.axis.spatial(T.int64(7), ow_0 * T.int64(7) + ow_1 * T.int64(7) + ow_2 + ow_3)
                            v_oc_block = T.axis.spatial(T.int64(32), oc_block_0 * T.int64(8) + oc_block_1 * T.int64(4) + oc_block_2 * T.int64(2) + oc_block_3)
                            v_ic = T.axis.reduce(T.int64(512), ic_0 * T.int64(4) + ic_1)
                            v_kh = T.axis.reduce(T.int64(3), kh_0 * T.int64(3) + kh_1)
                            v_kw = T.axis.reduce(T.int64(3), kw_0 * T.int64(3) + kw_1)
                            T.reads(data_pad[v_n, v_ic // T.int64(512), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(512)], p1[v_oc_chunk, v_ic // T.int64(512), v_kh, v_kw, v_ic % T.int64(512), v_oc_block])
                            T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                            T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                            with T.init():
                                conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = T.float32(0)
                            conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] + data_pad[v_n, v_ic // T.int64(512), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(512)] * p1[v_oc_chunk, v_ic // T.int64(512), v_kh, v_kw, v_ic % T.int64(512), v_oc_block]
                    for ax0, ax1, ax2, ax3, ax4 in T.grid(T.int64(1), T.int64(4), T.int64(7), T.int64(7), T.int64(4)):
                        with T.block("T_relu"):
                            v_ax0 = T.axis.spatial(T.int64(1), ax0)
                            v_ax1 = T.axis.spatial(T.int64(16), oc_chunk_0 * T.int64(4) + ax1)
                            v_ax2, v_ax3 = T.axis.remap("SS", [ax2, ax3])
                            v_ax4 = T.axis.spatial(T.int64(32), oc_block_0 * T.int64(8) + oc_block_1 * T.int64(4) + ax4)
                            T.reads(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4])
                            T.writes(T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                            T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.max(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] + p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4], T.float32(0))
b0 = sch.get_block(name="data_pad", func_name="main")
b1 = sch.get_block(name="conv2d_NCHWc", func_name="main")
b2 = sch.get_block(name="T_add", func_name="main")
b3 = sch.get_block(name="root", func_name="main")
sch.compute_inline(block=b2)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSRSRS")
l4, l5, l6, l7, l8, l9, l10, l11 = sch.get_loops(block=b1)
v12, v13, v14, v15 = sch.sample_perfect_tile(loop=l4, n=4, max_innermost_factor=64, decision=[1, 1, 1, 1])
l16, l17, l18, l19 = sch.split(loop=l4, factors=[v12, v13, v14, v15], preserve_unit_iters=True)
v20, v21, v22, v23 = sch.sample_perfect_tile(loop=l5, n=4, max_innermost_factor=64, decision=[4, 1, 2, 2])
l24, l25, l26, l27 = sch.split(loop=l5, factors=[v20, v21, v22, v23], preserve_unit_iters=True)
v28, v29, v30, v31 = sch.sample_perfect_tile(loop=l6, n=4, max_innermost_factor=64, decision=[1, 1, 1, 7])
l32, l33, l34, l35 = sch.split(loop=l6, factors=[v28, v29, v30, v31], preserve_unit_iters=True)
v36, v37, v38, v39 = sch.sample_perfect_tile(loop=l7, n=4, max_innermost_factor=64, decision=[1, 1, 7, 1])
l40, l41, l42, l43 = sch.split(loop=l7, factors=[v36, v37, v38, v39], preserve_unit_iters=True)
v44, v45, v46, v47 = sch.sample_perfect_tile(loop=l8, n=4, max_innermost_factor=64, decision=[4, 2, 2, 2])
l48, l49, l50, l51 = sch.split(loop=l8, factors=[v44, v45, v46, v47], preserve_unit_iters=True)
v52, v53 = sch.sample_perfect_tile(loop=l9, n=2, max_innermost_factor=64, decision=[128, 4])
l54, l55 = sch.split(loop=l9, factors=[v52, v53], preserve_unit_iters=True)
v56, v57 = sch.sample_perfect_tile(loop=l10, n=2, max_innermost_factor=64, decision=[1, 3])
l58, l59 = sch.split(loop=l10, factors=[v56, v57], preserve_unit_iters=True)
v60, v61 = sch.sample_perfect_tile(loop=l11, n=2, max_innermost_factor=64, decision=[1, 3])
l62, l63 = sch.split(loop=l11, factors=[v60, v61], preserve_unit_iters=True)
sch.reorder(l16, l24, l32, l40, l48, l17, l25, l33, l41, l49, l54, l58, l62, l18, l26, l34, l42, l50, l55, l59, l63, l19, l27, l35, l43, l51)
b64, = sch.get_consumers(block=b1)
sch.reverse_compute_at(block=b64, loop=l49, preserve_unit_loops=True, index=-1)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.vectorize", ann_val=64)
v65 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=2)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.unroll_explicit", ann_val=v65)
l66 = sch.sample_compute_location(block=b0, decision=4)
sch.compute_at(block=b0, loop=l66, preserve_unit_loops=True, index=-1)
2024-04-29 07:27:33 [INFO] [task_scheduler.cc:170] Design space #2:
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(1), T.int64(7), T.int64(7), T.int64(512)), "float32"), p1: T.Buffer((T.int64(16), T.int64(1), T.int64(3), T.int64(3), T.int64(512), T.int64(32)), "float32"), p2: T.Buffer((T.int64(1), T.int64(16), T.int64(1), T.int64(1), T.int64(32)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(16), T.int64(7), T.int64(7), T.int64(32)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        with T.block("root"):
            T.reads()
            T.writes()
            T.block_attr({"meta_schedule.parallel": 768, "meta_schedule.unroll_explicit": 64, "meta_schedule.vectorize": 64})
            data_pad = T.alloc_buffer((T.int64(1), T.int64(1), T.int64(9), T.int64(9), T.int64(512)))
            conv2d_NCHWc = T.alloc_buffer((T.int64(1), T.int64(16), T.int64(7), T.int64(7), T.int64(32)))
            for i0, i1, i2, i3, i4 in T.grid(T.int64(1), T.int64(1), T.int64(9), T.int64(9), T.int64(512)):
                with T.block("data_pad"):
                    v_i0, v_i1, v_i2, v_i3, v_i4 = T.axis.remap("SSSSS", [i0, i1, i2, i3, i4])
                    T.reads(p0[v_i0, v_i1, v_i2 - T.int64(1), v_i3 - T.int64(1), v_i4])
                    T.writes(data_pad[v_i0, v_i1, v_i2, v_i3, v_i4])
                    data_pad[v_i0, v_i1, v_i2, v_i3, v_i4] = T.if_then_else(T.int64(1) <= v_i2 and v_i2 < T.int64(8) and T.int64(1) <= v_i3 and v_i3 < T.int64(8), p0[v_i0, v_i1, v_i2 - T.int64(1), v_i3 - T.int64(1), v_i4], T.float32(0))
            for n_0, oc_chunk_0, oh_0, ow_0, oc_block_0 in T.grid(T.int64(1), T.int64(4), T.int64(1), T.int64(1), T.int64(4)):
                for n_1, oc_chunk_1, oh_1, ow_1, oc_block_1, ic_0, kh_0, kw_0, n_2, oc_chunk_2, oh_2, ow_2, oc_block_2, ic_1, kh_1, kw_1, n_3, oc_chunk_3, oh_3, ow_3, oc_block_3 in T.grid(T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(128), T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(1), T.int64(7), T.int64(2), T.int64(4), T.int64(3), T.int64(3), T.int64(1), T.int64(2), T.int64(7), T.int64(1), T.int64(2)):
                    with T.block("conv2d_NCHWc"):
                        v_n = T.axis.spatial(T.int64(1), n_0 + n_1 + n_2 + n_3)
                        v_oc_chunk = T.axis.spatial(T.int64(16), oc_chunk_0 * T.int64(4) + oc_chunk_1 * T.int64(4) + oc_chunk_2 * T.int64(2) + oc_chunk_3)
                        v_oh = T.axis.spatial(T.int64(7), oh_0 * T.int64(7) + oh_1 * T.int64(7) + oh_2 * T.int64(7) + oh_3)
                        v_ow = T.axis.spatial(T.int64(7), ow_0 * T.int64(7) + ow_1 * T.int64(7) + ow_2 + ow_3)
                        v_oc_block = T.axis.spatial(T.int64(32), oc_block_0 * T.int64(8) + oc_block_1 * T.int64(4) + oc_block_2 * T.int64(2) + oc_block_3)
                        v_ic = T.axis.reduce(T.int64(512), ic_0 * T.int64(4) + ic_1)
                        v_kh = T.axis.reduce(T.int64(3), kh_0 * T.int64(3) + kh_1)
                        v_kw = T.axis.reduce(T.int64(3), kw_0 * T.int64(3) + kw_1)
                        T.reads(data_pad[v_n, v_ic // T.int64(512), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(512)], p1[v_oc_chunk, v_ic // T.int64(512), v_kh, v_kw, v_ic % T.int64(512), v_oc_block])
                        T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                        T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                        with T.init():
                            conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = T.float32(0)
                        conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] + data_pad[v_n, v_ic // T.int64(512), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(512)] * p1[v_oc_chunk, v_ic // T.int64(512), v_kh, v_kw, v_ic % T.int64(512), v_oc_block]
                for ax0, ax1, ax2, ax3, ax4 in T.grid(T.int64(1), T.int64(4), T.int64(7), T.int64(7), T.int64(8)):
                    with T.block("T_relu"):
                        v_ax0 = T.axis.spatial(T.int64(1), ax0)
                        v_ax1 = T.axis.spatial(T.int64(16), oc_chunk_0 * T.int64(4) + ax1)
                        v_ax2, v_ax3 = T.axis.remap("SS", [ax2, ax3])
                        v_ax4 = T.axis.spatial(T.int64(32), oc_block_0 * T.int64(8) + ax4)
                        T.reads(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4])
                        T.writes(T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                        T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.max(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] + p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4], T.float32(0))
b0 = sch.get_block(name="data_pad", func_name="main")
b1 = sch.get_block(name="conv2d_NCHWc", func_name="main")
b2 = sch.get_block(name="T_add", func_name="main")
b3 = sch.get_block(name="root", func_name="main")
sch.compute_inline(block=b2)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSRSRS")
l4, l5, l6, l7, l8, l9, l10, l11 = sch.get_loops(block=b1)
v12, v13, v14, v15 = sch.sample_perfect_tile(loop=l4, n=4, max_innermost_factor=64, decision=[1, 1, 1, 1])
l16, l17, l18, l19 = sch.split(loop=l4, factors=[v12, v13, v14, v15], preserve_unit_iters=True)
v20, v21, v22, v23 = sch.sample_perfect_tile(loop=l5, n=4, max_innermost_factor=64, decision=[4, 1, 2, 2])
l24, l25, l26, l27 = sch.split(loop=l5, factors=[v20, v21, v22, v23], preserve_unit_iters=True)
v28, v29, v30, v31 = sch.sample_perfect_tile(loop=l6, n=4, max_innermost_factor=64, decision=[1, 1, 1, 7])
l32, l33, l34, l35 = sch.split(loop=l6, factors=[v28, v29, v30, v31], preserve_unit_iters=True)
v36, v37, v38, v39 = sch.sample_perfect_tile(loop=l7, n=4, max_innermost_factor=64, decision=[1, 1, 7, 1])
l40, l41, l42, l43 = sch.split(loop=l7, factors=[v36, v37, v38, v39], preserve_unit_iters=True)
v44, v45, v46, v47 = sch.sample_perfect_tile(loop=l8, n=4, max_innermost_factor=64, decision=[4, 2, 2, 2])
l48, l49, l50, l51 = sch.split(loop=l8, factors=[v44, v45, v46, v47], preserve_unit_iters=True)
v52, v53 = sch.sample_perfect_tile(loop=l9, n=2, max_innermost_factor=64, decision=[128, 4])
l54, l55 = sch.split(loop=l9, factors=[v52, v53], preserve_unit_iters=True)
v56, v57 = sch.sample_perfect_tile(loop=l10, n=2, max_innermost_factor=64, decision=[1, 3])
l58, l59 = sch.split(loop=l10, factors=[v56, v57], preserve_unit_iters=True)
v60, v61 = sch.sample_perfect_tile(loop=l11, n=2, max_innermost_factor=64, decision=[1, 3])
l62, l63 = sch.split(loop=l11, factors=[v60, v61], preserve_unit_iters=True)
sch.reorder(l16, l24, l32, l40, l48, l17, l25, l33, l41, l49, l54, l58, l62, l18, l26, l34, l42, l50, l55, l59, l63, l19, l27, l35, l43, l51)
b64, = sch.get_consumers(block=b1)
sch.reverse_compute_at(block=b64, loop=l48, preserve_unit_loops=True, index=-1)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.vectorize", ann_val=64)
v65 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=2)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.unroll_explicit", ann_val=v65)
l66 = sch.sample_compute_location(block=b0, decision=-1)
sch.compute_at(block=b0, loop=l66, preserve_unit_loops=True, index=-1)
2024-04-29 08:11:00 [INFO] [evolutionary_search.cc:713] Generating candidates......
2024-04-29 08:11:00 [INFO] [evolutionary_search.cc:715] Picked top 0 candidate(s) from database
2024-04-29 08:11:05 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x12e77cf8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0xa01a998)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x136ded08)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x13b5e7e8)]: 0 failure(s)
2024-04-29 08:11:05 [INFO] [evolutionary_search.cc:723] Sampled 512 candidate(s)
2024-04-29 08:11:11 [INFO] [evolutionary_search.cc:621] Evolve iter #0 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x12e77cf8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0xa01a998)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x136ded08)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x13b5e7e8)]: 0 failure(s)
2024-04-29 08:11:16 [INFO] [evolutionary_search.cc:621] Evolve iter #1 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x12e77cf8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0xa01a998)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x136ded08)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x13b5e7e8)]: 0 failure(s)
2024-04-29 08:11:22 [INFO] [evolutionary_search.cc:621] Evolve iter #2 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x12e77cf8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0xa01a998)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x136ded08)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x13b5e7e8)]: 0 failure(s)
2024-04-29 08:11:28 [INFO] [evolutionary_search.cc:621] Evolve iter #3 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x12e77cf8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0xa01a998)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x136ded08)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x13b5e7e8)]: 0 failure(s)
2024-04-29 08:11:29 [INFO] [evolutionary_search.cc:649] Scores of the best 64 candidates:
[1 : 16]:	0.9996  0.9996  0.9994  0.9993  0.9987  0.9980  0.9980  0.9975  0.9975  0.9974  0.9970  0.9967  0.9965  0.9962  0.9960  0.9958
[17 : 32]:	0.9956  0.9951  0.9950  0.9944  0.9942  0.9932  0.9927  0.9926  0.9919  0.9913  0.9907  0.9905  0.9905  0.9898  0.9887  0.9883
[33 : 48]:	0.9879  0.9878  0.9874  0.9874  0.9870  0.9865  0.9863  0.9859  0.9855  0.9854  0.9854  0.9847  0.9843  0.9835  0.9834  0.9831
[49 : 64]:	0.9824  0.9821  0.9820  0.9796  0.9787  0.9781  0.9778  0.9778  0.9778  0.9776  0.9775  0.9773  0.9772  0.9759  0.9756  0.9755
2024-04-29 08:11:29 [INFO] [evolutionary_search.cc:727] Got 64 candidate(s) with evolutionary search
2024-04-29 08:11:29 [INFO] [evolutionary_search.cc:730] Sending 63 candidates(s) for measurement
2024-04-29 08:22:16 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_15] Trial #1: GFLOPs: 45.5321. Time: 5079.0820 us. Best GFLOPs: 45.5321
2024-04-29 08:22:16 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_15] Trial #2: GFLOPs: 4.2763. Time: 54079.3447 us. Best GFLOPs: 45.5321
2024-04-29 08:22:16 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_15] Trial #3: GFLOPs: 4.1489. Time: 55740.3913 us. Best GFLOPs: 45.5321
2024-04-29 08:22:16 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_15] Trial #4: GFLOPs: 29.4369. Time: 7856.1744 us. Best GFLOPs: 45.5321
2024-04-29 08:22:16 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_15] Trial #5: GFLOPs: 7.7353. Time: 29896.7477 us. Best GFLOPs: 45.5321
2024-04-29 08:22:16 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_15] Trial #6: GFLOPs: 37.8842. Time: 6104.4151 us. Best GFLOPs: 45.5321
2024-04-29 08:22:16 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_15] Trial #7: GFLOPs: 25.2600. Time: 9155.2307 us. Best GFLOPs: 45.5321
2024-04-29 08:22:16 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_15] Trial #8: GFLOPs: 0.3945. Time: 586214.3103 us. Best GFLOPs: 45.5321
2024-04-29 08:22:16 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_15] Trial #9: GFLOPs: 0.4256. Time: 543337.9853 us. Best GFLOPs: 45.5321
2024-04-29 08:22:16 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_15] Trial #10: GFLOPs: 10.0292. Time: 23058.7670 us. Best GFLOPs: 45.5321
2024-04-29 08:22:16 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_15] Trial #11: GFLOPs: 4.9634. Time: 46593.2503 us. Best GFLOPs: 45.5321
2024-04-29 08:22:16 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_15] Trial #12: GFLOPs: 100.5698. Time: 2299.5091 us. Best GFLOPs: 100.5698
2024-04-29 08:22:16 [INFO] [task_scheduler.cc:121] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_15] Trial #13: Error in building:
LocalBuilder: Timeout, killed after 30.0 seconds
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(1), T.int64(7), T.int64(7), T.int64(512)), "float32"), p1: T.Buffer((T.int64(16), T.int64(1), T.int64(3), T.int64(3), T.int64(512), T.int64(32)), "float32"), p2: T.Buffer((T.int64(1), T.int64(16), T.int64(1), T.int64(1), T.int64(32)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(16), T.int64(7), T.int64(7), T.int64(32)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        data_pad = T.alloc_buffer((T.int64(1), T.int64(1), T.int64(9), T.int64(9), T.int64(512)))
        conv2d_NCHWc = T.alloc_buffer((T.int64(1), T.int64(16), T.int64(7), T.int64(7), T.int64(32)))
        for n_0_oc_chunk_0_fused_fused in T.parallel(T.int64(4), annotations={"pragma_auto_unroll_max_step": 512, "pragma_unroll_explicit": 1}):
            for ax0, ax1, ax2, ax3, ax4 in T.grid(T.int64(1), T.int64(1), T.int64(9), T.int64(9), T.int64(512)):
                with T.block("data_pad"):
                    v_i0, v_i1, v_i2, v_i3, v_i4 = T.axis.remap("SSSSS", [ax0, ax1, ax2, ax3, ax4])
                    T.reads(p0[v_i0, v_i1, v_i2 - T.int64(1), v_i3 - T.int64(1), v_i4])
                    T.writes(data_pad[v_i0, v_i1, v_i2, v_i3, v_i4])
                    data_pad[v_i0, v_i1, v_i2, v_i3, v_i4] = T.if_then_else(T.int64(1) <= v_i2 and v_i2 < T.int64(8) and T.int64(1) <= v_i3 and v_i3 < T.int64(8), p0[v_i0, v_i1, v_i2 - T.int64(1), v_i3 - T.int64(1), v_i4], T.float32(0))
            for oh_0, ow_0, oc_block_0, n_1, oc_chunk_1, oh_1, ow_1, oc_block_1 in T.grid(T.int64(1), T.int64(1), T.int64(8), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1)):
                for n_2_init, oc_chunk_2_init, oh_2_init, ow_2_init, oc_block_2_init, n_3_init, oc_chunk_3_init, oh_3_init, ow_3_init, oc_block_3_init in T.grid(T.int64(1), T.int64(4), T.int64(7), T.int64(7), T.int64(4), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1)):
                    with T.block("conv2d_NCHWc_init"):
                        v_n = T.axis.spatial(T.int64(1), n_1 + n_2_init + n_3_init)
                        v_oc_chunk = T.axis.spatial(T.int64(16), n_0_oc_chunk_0_fused_fused * T.int64(4) + oc_chunk_1 * T.int64(4) + oc_chunk_2_init + oc_chunk_3_init)
                        v_oh = T.axis.spatial(T.int64(7), oh_0 * T.int64(7) + oh_1 * T.int64(7) + oh_2_init + oh_3_init)
                        v_ow = T.axis.spatial(T.int64(7), ow_0 * T.int64(7) + ow_1 * T.int64(7) + ow_2_init + ow_3_init)
                        v_oc_block = T.axis.spatial(T.int64(32), oc_block_0 * T.int64(4) + oc_block_1 * T.int64(4) + oc_block_2_init + oc_block_3_init)
                        T.reads()
                        T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                        T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                        conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = T.float32(0)
                for ic_0, kh_0, kw_0, n_2, oc_chunk_2, oh_2, ow_2, oc_block_2, ic_1, kh_1, kw_1, n_3, oc_chunk_3, oh_3, ow_3, oc_block_3 in T.grid(T.int64(256), T.int64(1), T.int64(3), T.int64(1), T.int64(4), T.int64(7), T.int64(7), T.int64(4), T.int64(2), T.int64(3), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1)):
                    with T.block("conv2d_NCHWc_update"):
                        v_n = T.axis.spatial(T.int64(1), n_1 + n_2 + n_3)
                        v_oc_chunk = T.axis.spatial(T.int64(16), n_0_oc_chunk_0_fused_fused * T.int64(4) + oc_chunk_1 * T.int64(4) + oc_chunk_2 + oc_chunk_3)
                        v_oh = T.axis.spatial(T.int64(7), oh_0 * T.int64(7) + oh_1 * T.int64(7) + oh_2 + oh_3)
                        v_ow = T.axis.spatial(T.int64(7), ow_0 * T.int64(7) + ow_1 * T.int64(7) + ow_2 + ow_3)
                        v_oc_block = T.axis.spatial(T.int64(32), oc_block_0 * T.int64(4) + oc_block_1 * T.int64(4) + oc_block_2 + oc_block_3)
                        v_ic = T.axis.reduce(T.int64(512), ic_0 * T.int64(2) + ic_1)
                        v_kh = T.axis.reduce(T.int64(3), kh_0 * T.int64(3) + kh_1)
                        v_kw = T.axis.reduce(T.int64(3), kw_0 + kw_1)
                        T.reads(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block], data_pad[v_n, v_ic // T.int64(512), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(512)], p1[v_oc_chunk, v_ic // T.int64(512), v_kh, v_kw, v_ic % T.int64(512), v_oc_block])
                        T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                        T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                        conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] + data_pad[v_n, v_ic // T.int64(512), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(512)] * p1[v_oc_chunk, v_ic // T.int64(512), v_kh, v_kw, v_ic % T.int64(512), v_oc_block]
                for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(4), T.int64(7), T.int64(7)):
                    for ax4_fused in T.vectorized(T.int64(4)):
                        with T.block("T_relu"):
                            v_ax0 = T.axis.spatial(T.int64(1), ax0)
                            v_ax1 = T.axis.spatial(T.int64(16), n_0_oc_chunk_0_fused_fused * T.int64(4) + ax1)
                            v_ax2, v_ax3 = T.axis.remap("SS", [ax2, ax3])
                            v_ax4 = T.axis.spatial(T.int64(32), oc_block_0 * T.int64(4) + ax4_fused)
                            T.reads(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4])
                            T.writes(T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                            T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.max(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] + p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4], T.float32(0))
b0 = sch.get_block(name="data_pad", func_name="main")
b1 = sch.get_block(name="conv2d_NCHWc", func_name="main")
b2 = sch.get_block(name="T_add", func_name="main")
b3 = sch.get_block(name="root", func_name="main")
sch.compute_inline(block=b2)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSRSRS")
l4, l5, l6, l7, l8, l9, l10, l11 = sch.get_loops(block=b1)
v12, v13, v14, v15 = sch.sample_perfect_tile(loop=l4, n=4, max_innermost_factor=64, decision=[1, 1, 1, 1])
l16, l17, l18, l19 = sch.split(loop=l4, factors=[v12, v13, v14, v15], preserve_unit_iters=True)
v20, v21, v22, v23 = sch.sample_perfect_tile(loop=l5, n=4, max_innermost_factor=64, decision=[4, 1, 4, 1])
l24, l25, l26, l27 = sch.split(loop=l5, factors=[v20, v21, v22, v23], preserve_unit_iters=True)
v28, v29, v30, v31 = sch.sample_perfect_tile(loop=l6, n=4, max_innermost_factor=64, decision=[1, 1, 7, 1])
l32, l33, l34, l35 = sch.split(loop=l6, factors=[v28, v29, v30, v31], preserve_unit_iters=True)
v36, v37, v38, v39 = sch.sample_perfect_tile(loop=l7, n=4, max_innermost_factor=64, decision=[1, 1, 7, 1])
l40, l41, l42, l43 = sch.split(loop=l7, factors=[v36, v37, v38, v39], preserve_unit_iters=True)
v44, v45, v46, v47 = sch.sample_perfect_tile(loop=l8, n=4, max_innermost_factor=64, decision=[8, 1, 4, 1])
l48, l49, l50, l51 = sch.split(loop=l8, factors=[v44, v45, v46, v47], preserve_unit_iters=True)
v52, v53 = sch.sample_perfect_tile(loop=l9, n=2, max_innermost_factor=64, decision=[256, 2])
l54, l55 = sch.split(loop=l9, factors=[v52, v53], preserve_unit_iters=True)
v56, v57 = sch.sample_perfect_tile(loop=l10, n=2, max_innermost_factor=64, decision=[1, 3])
l58, l59 = sch.split(loop=l10, factors=[v56, v57], preserve_unit_iters=True)
v60, v61 = sch.sample_perfect_tile(loop=l11, n=2, max_innermost_factor=64, decision=[3, 1])
l62, l63 = sch.split(loop=l11, factors=[v60, v61], preserve_unit_iters=True)
sch.reorder(l16, l24, l32, l40, l48, l17, l25, l33, l41, l49, l54, l58, l62, l18, l26, l34, l42, l50, l55, l59, l63, l19, l27, l35, l43, l51)
b64, = sch.get_consumers(block=b1)
sch.reverse_compute_at(block=b64, loop=l49, preserve_unit_loops=True, index=-1)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.vectorize", ann_val=64)
v65 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.unroll_explicit", ann_val=v65)
l66 = sch.sample_compute_location(block=b0, decision=1)
sch.compute_at(block=b0, loop=l66, preserve_unit_loops=True, index=-1)
sch.enter_postproc()
b67 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b67, ann_key="meta_schedule.parallel")
sch.unannotate(block_or_loop=b67, ann_key="meta_schedule.vectorize")
sch.unannotate(block_or_loop=b67, ann_key="meta_schedule.unroll_explicit")
b68, b69, b70 = sch.get_child_blocks(b67)
l71, l72, l73, l74, l75, l76, l77 = sch.get_loops(block=b68)
l78 = sch.fuse(l71, l72, preserve_unit_iters=True)
sch.parallel(loop=l78)
l79, l80, l81, l82, l83, l84, l85, l86, l87, l88, l89, l90, l91, l92, l93, l94, l95, l96, l97, l98, l99, l100, l101, l102, l103 = sch.get_loops(block=b69)
l104 = sch.fuse(l79, preserve_unit_iters=True)
sch.parallel(loop=l104)
sch.annotate(block_or_loop=l104, ann_key="pragma_auto_unroll_max_step", ann_val=512)
sch.annotate(block_or_loop=l104, ann_key="pragma_unroll_explicit", ann_val=1)
l105, l106, l107, l108, l109, l110, l111, l112, l113, l114, l115, l116, l117, l118 = sch.get_loops(block=b70)
l119 = sch.fuse(l118, preserve_unit_iters=True)
sch.vectorize(loop=l119)
b120 = sch.get_block(name="conv2d_NCHWc", func_name="main")
l121, l122, l123, l124, l125, l126, l127, l128, l129, l130, l131, l132, l133, l134, l135, l136, l137, l138, l139, l140, l141, l142, l143, l144, l145 = sch.get_loops(block=b120)
b146 = sch.decompose_reduction(block=b120, loop=l130)
2024-04-29 08:22:16 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_15] Trial #14: GFLOPs: 48.4084. Time: 4777.2984 us. Best GFLOPs: 100.5698
2024-04-29 08:22:16 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_15] Trial #15: GFLOPs: 16.0950. Time: 14368.5304 us. Best GFLOPs: 100.5698
2024-04-29 08:22:16 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_15] Trial #16: GFLOPs: 12.1482. Time: 19036.6198 us. Best GFLOPs: 100.5698
2024-04-29 08:22:16 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_15] Trial #17: GFLOPs: 28.4738. Time: 8121.9044 us. Best GFLOPs: 100.5698
2024-04-29 08:22:16 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_15] Trial #18: GFLOPs: 5.5889. Time: 41378.3323 us. Best GFLOPs: 100.5698
2024-04-29 08:22:16 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_15] Trial #19: GFLOPs: 16.1363. Time: 14331.7529 us. Best GFLOPs: 100.5698
2024-04-29 08:22:16 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_15] Trial #20: GFLOPs: 2.0915. Time: 110571.8570 us. Best GFLOPs: 100.5698
2024-04-29 08:22:16 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_15] Trial #21: GFLOPs: 19.3656. Time: 11941.8654 us. Best GFLOPs: 100.5698
2024-04-29 08:22:16 [INFO] [task_scheduler.cc:121] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_15] Trial #22: Error in building:
LocalBuilder: Timeout, killed after 30.0 seconds
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(1), T.int64(7), T.int64(7), T.int64(512)), "float32"), p1: T.Buffer((T.int64(16), T.int64(1), T.int64(3), T.int64(3), T.int64(512), T.int64(32)), "float32"), p2: T.Buffer((T.int64(1), T.int64(16), T.int64(1), T.int64(1), T.int64(32)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(16), T.int64(7), T.int64(7), T.int64(32)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        data_pad = T.alloc_buffer((T.int64(1), T.int64(1), T.int64(9), T.int64(9), T.int64(512)))
        conv2d_NCHWc = T.alloc_buffer((T.int64(1), T.int64(16), T.int64(7), T.int64(7), T.int64(32)))
        for n_0_oc_chunk_0_oh_0_fused_fused in T.parallel(T.int64(7), annotations={"pragma_auto_unroll_max_step": 512, "pragma_unroll_explicit": 1}):
            for ax0, ax1, ax2, ax3, ax4 in T.grid(T.int64(1), T.int64(1), T.int64(3), T.int64(9), T.int64(512)):
                with T.block("data_pad"):
                    v_i0, v_i1 = T.axis.remap("SS", [ax0, ax1])
                    v_i2 = T.axis.spatial(T.int64(9), n_0_oc_chunk_0_oh_0_fused_fused + ax2)
                    v_i3, v_i4 = T.axis.remap("SS", [ax3, ax4])
                    T.reads(p0[v_i0, v_i1, v_i2 - T.int64(1), v_i3 - T.int64(1), v_i4])
                    T.writes(data_pad[v_i0, v_i1, v_i2, v_i3, v_i4])
                    data_pad[v_i0, v_i1, v_i2, v_i3, v_i4] = T.if_then_else(T.int64(1) <= v_i2 and v_i2 < T.int64(8) and T.int64(1) <= v_i3 and v_i3 < T.int64(8), p0[v_i0, v_i1, v_i2 - T.int64(1), v_i3 - T.int64(1), v_i4], T.float32(0))
            for ow_0, oc_block_0, n_1, oc_chunk_1, oh_1, ow_1, oc_block_1 in T.grid(T.int64(7), T.int64(8), T.int64(1), T.int64(16), T.int64(1), T.int64(1), T.int64(1)):
                for n_2_init, oc_chunk_2_init, oh_2_init, ow_2_init, oc_block_2_init, n_3_init, oc_chunk_3_init, oh_3_init, ow_3_init in T.grid(T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1)):
                    for oc_block_3_fused_init in T.vectorized(T.int64(4)):
                        with T.block("conv2d_NCHWc_init"):
                            v_n = T.axis.spatial(T.int64(1), n_1 + n_2_init + n_3_init)
                            v_oc_chunk = T.axis.spatial(T.int64(16), oc_chunk_1 + oc_chunk_2_init + oc_chunk_3_init)
                            v_oh = T.axis.spatial(T.int64(7), n_0_oc_chunk_0_oh_0_fused_fused + oh_1 + oh_2_init + oh_3_init)
                            v_ow = T.axis.spatial(T.int64(7), ow_0 + ow_1 + ow_2_init + ow_3_init)
                            v_oc_block = T.axis.spatial(T.int64(32), oc_block_0 * T.int64(4) + oc_block_1 * T.int64(4) + oc_block_2_init * T.int64(4) + oc_block_3_fused_init)
                            T.reads()
                            T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                            T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                            conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = T.float32(0)
                for ic_0, kh_0, kw_0, n_2, oc_chunk_2, oh_2, ow_2, oc_block_2, ic_1, kh_1, kw_1, n_3, oc_chunk_3, oh_3, ow_3 in T.grid(T.int64(256), T.int64(3), T.int64(3), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1)):
                    for oc_block_3_fused in T.vectorized(T.int64(4)):
                        with T.block("conv2d_NCHWc_update"):
                            v_n = T.axis.spatial(T.int64(1), n_1 + n_2 + n_3)
                            v_oc_chunk = T.axis.spatial(T.int64(16), oc_chunk_1 + oc_chunk_2 + oc_chunk_3)
                            v_oh = T.axis.spatial(T.int64(7), n_0_oc_chunk_0_oh_0_fused_fused + oh_1 + oh_2 + oh_3)
                            v_ow = T.axis.spatial(T.int64(7), ow_0 + ow_1 + ow_2 + ow_3)
                            v_oc_block = T.axis.spatial(T.int64(32), oc_block_0 * T.int64(4) + oc_block_1 * T.int64(4) + oc_block_2 * T.int64(4) + oc_block_3_fused)
                            v_ic = T.axis.reduce(T.int64(512), ic_0 * T.int64(2) + ic_1)
                            v_kh = T.axis.reduce(T.int64(3), kh_0 + kh_1)
                            v_kw = T.axis.reduce(T.int64(3), kw_0 + kw_1)
                            T.reads(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block], data_pad[v_n, v_ic // T.int64(512), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(512)], p1[v_oc_chunk, v_ic // T.int64(512), v_kh, v_kw, v_ic % T.int64(512), v_oc_block])
                            T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                            T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                            conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] + data_pad[v_n, v_ic // T.int64(512), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(512)] * p1[v_oc_chunk, v_ic // T.int64(512), v_kh, v_kw, v_ic % T.int64(512), v_oc_block]
                for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(1), T.int64(1), T.int64(1)):
                    for ax4_fused in T.vectorized(T.int64(4)):
                        with T.block("T_relu"):
                            v_ax0 = T.axis.spatial(T.int64(1), ax0)
                            v_ax1 = T.axis.spatial(T.int64(16), oc_chunk_1 + ax1)
                            v_ax2 = T.axis.spatial(T.int64(7), n_0_oc_chunk_0_oh_0_fused_fused + ax2)
                            v_ax3 = T.axis.spatial(T.int64(7), ow_0 + ax3)
                            v_ax4 = T.axis.spatial(T.int64(32), oc_block_0 * T.int64(4) + ax4_fused)
                            T.reads(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4])
                            T.writes(T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                            T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.max(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] + p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4], T.float32(0))
b0 = sch.get_block(name="data_pad", func_name="main")
b1 = sch.get_block(name="conv2d_NCHWc", func_name="main")
b2 = sch.get_block(name="T_add", func_name="main")
b3 = sch.get_block(name="root", func_name="main")
sch.compute_inline(block=b2)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSRSRS")
l4, l5, l6, l7, l8, l9, l10, l11 = sch.get_loops(block=b1)
v12, v13, v14, v15 = sch.sample_perfect_tile(loop=l4, n=4, max_innermost_factor=64, decision=[1, 1, 1, 1])
l16, l17, l18, l19 = sch.split(loop=l4, factors=[v12, v13, v14, v15], preserve_unit_iters=True)
v20, v21, v22, v23 = sch.sample_perfect_tile(loop=l5, n=4, max_innermost_factor=64, decision=[1, 16, 1, 1])
l24, l25, l26, l27 = sch.split(loop=l5, factors=[v20, v21, v22, v23], preserve_unit_iters=True)
v28, v29, v30, v31 = sch.sample_perfect_tile(loop=l6, n=4, max_innermost_factor=64, decision=[7, 1, 1, 1])
l32, l33, l34, l35 = sch.split(loop=l6, factors=[v28, v29, v30, v31], preserve_unit_iters=True)
v36, v37, v38, v39 = sch.sample_perfect_tile(loop=l7, n=4, max_innermost_factor=64, decision=[7, 1, 1, 1])
l40, l41, l42, l43 = sch.split(loop=l7, factors=[v36, v37, v38, v39], preserve_unit_iters=True)
v44, v45, v46, v47 = sch.sample_perfect_tile(loop=l8, n=4, max_innermost_factor=64, decision=[8, 1, 1, 4])
l48, l49, l50, l51 = sch.split(loop=l8, factors=[v44, v45, v46, v47], preserve_unit_iters=True)
v52, v53 = sch.sample_perfect_tile(loop=l9, n=2, max_innermost_factor=64, decision=[256, 2])
l54, l55 = sch.split(loop=l9, factors=[v52, v53], preserve_unit_iters=True)
v56, v57 = sch.sample_perfect_tile(loop=l10, n=2, max_innermost_factor=64, decision=[3, 1])
l58, l59 = sch.split(loop=l10, factors=[v56, v57], preserve_unit_iters=True)
v60, v61 = sch.sample_perfect_tile(loop=l11, n=2, max_innermost_factor=64, decision=[3, 1])
l62, l63 = sch.split(loop=l11, factors=[v60, v61], preserve_unit_iters=True)
sch.reorder(l16, l24, l32, l40, l48, l17, l25, l33, l41, l49, l54, l58, l62, l18, l26, l34, l42, l50, l55, l59, l63, l19, l27, l35, l43, l51)
b64, = sch.get_consumers(block=b1)
sch.reverse_compute_at(block=b64, loop=l49, preserve_unit_loops=True, index=-1)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.parallel", ann_val=21)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.vectorize", ann_val=64)
v65 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.unroll_explicit", ann_val=v65)
l66 = sch.sample_compute_location(block=b0, decision=2)
sch.compute_at(block=b0, loop=l66, preserve_unit_loops=True, index=-1)
sch.enter_postproc()
b67 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b67, ann_key="meta_schedule.parallel")
sch.unannotate(block_or_loop=b67, ann_key="meta_schedule.vectorize")
sch.unannotate(block_or_loop=b67, ann_key="meta_schedule.unroll_explicit")
b68, b69, b70 = sch.get_child_blocks(b67)
l71, l72, l73, l74, l75, l76, l77, l78 = sch.get_loops(block=b68)
l79 = sch.fuse(l71, l72, l73, preserve_unit_iters=True)
sch.parallel(loop=l79)
l80, l81, l82, l83, l84, l85, l86, l87, l88, l89, l90, l91, l92, l93, l94, l95, l96, l97, l98, l99, l100, l101, l102, l103 = sch.get_loops(block=b69)
l104 = sch.fuse(l80, preserve_unit_iters=True)
sch.parallel(loop=l104)
l105 = sch.fuse(l103, preserve_unit_iters=True)
sch.vectorize(loop=l105)
sch.annotate(block_or_loop=l104, ann_key="pragma_auto_unroll_max_step", ann_val=512)
sch.annotate(block_or_loop=l104, ann_key="pragma_unroll_explicit", ann_val=1)
l106, l107, l108, l109, l110, l111, l112, l113, l114, l115, l116, l117, l118 = sch.get_loops(block=b70)
l119 = sch.fuse(l118, preserve_unit_iters=True)
sch.vectorize(loop=l119)
b120 = sch.get_block(name="conv2d_NCHWc", func_name="main")
l121, l122, l123, l124, l125, l126, l127, l128, l129, l130, l131, l132, l133, l134, l135, l136, l137, l138, l139, l140, l141, l142, l143, l144 = sch.get_loops(block=b120)
b145 = sch.decompose_reduction(block=b120, loop=l129)
2024-04-29 08:22:16 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_15] Trial #23: GFLOPs: 23.4770. Time: 9850.5240 us. Best GFLOPs: 100.5698
2024-04-29 08:22:16 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_15] Trial #24: GFLOPs: 58.6402. Time: 3943.7334 us. Best GFLOPs: 100.5698
2024-04-29 08:22:16 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_15] Trial #25: GFLOPs: 29.6210. Time: 7807.3448 us. Best GFLOPs: 100.5698
2024-04-29 08:22:16 [INFO] [task_scheduler.cc:121] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_15] Trial #26: Error in building:
LocalBuilder: Timeout, killed after 30.0 seconds
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(1), T.int64(7), T.int64(7), T.int64(512)), "float32"), p1: T.Buffer((T.int64(16), T.int64(1), T.int64(3), T.int64(3), T.int64(512), T.int64(32)), "float32"), p2: T.Buffer((T.int64(1), T.int64(16), T.int64(1), T.int64(1), T.int64(32)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(16), T.int64(7), T.int64(7), T.int64(32)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        data_pad = T.alloc_buffer((T.int64(1), T.int64(1), T.int64(9), T.int64(9), T.int64(512)))
        conv2d_NCHWc = T.alloc_buffer((T.int64(1), T.int64(16), T.int64(7), T.int64(7), T.int64(32)))
        for n_0_oc_chunk_0_fused_fused in T.parallel(T.int64(4), annotations={"pragma_auto_unroll_max_step": 512, "pragma_unroll_explicit": 1}):
            for ax0, ax1, ax2, ax3, ax4 in T.grid(T.int64(1), T.int64(1), T.int64(9), T.int64(9), T.int64(512)):
                with T.block("data_pad"):
                    v_i0, v_i1, v_i2, v_i3, v_i4 = T.axis.remap("SSSSS", [ax0, ax1, ax2, ax3, ax4])
                    T.reads(p0[v_i0, v_i1, v_i2 - T.int64(1), v_i3 - T.int64(1), v_i4])
                    T.writes(data_pad[v_i0, v_i1, v_i2, v_i3, v_i4])
                    data_pad[v_i0, v_i1, v_i2, v_i3, v_i4] = T.if_then_else(T.int64(1) <= v_i2 and v_i2 < T.int64(8) and T.int64(1) <= v_i3 and v_i3 < T.int64(8), p0[v_i0, v_i1, v_i2 - T.int64(1), v_i3 - T.int64(1), v_i4], T.float32(0))
            for oh_0, ow_0, oc_block_0, n_1, oc_chunk_1, oh_1, ow_1, oc_block_1 in T.grid(T.int64(7), T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(1), T.int64(1), T.int64(4)):
                for n_2_init, oc_chunk_2_init, oh_2_init, ow_2_init, oc_block_2_init, n_3_init, oc_chunk_3_init, oh_3_init, ow_3_init in T.grid(T.int64(1), T.int64(2), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(7)):
                    for oc_block_3_fused_init in T.vectorized(T.int64(8)):
                        with T.block("conv2d_NCHWc_init"):
                            v_n = T.axis.spatial(T.int64(1), n_1 + n_2_init + n_3_init)
                            v_oc_chunk = T.axis.spatial(T.int64(16), n_0_oc_chunk_0_fused_fused * T.int64(4) + oc_chunk_1 * T.int64(2) + oc_chunk_2_init + oc_chunk_3_init)
                            v_oh = T.axis.spatial(T.int64(7), oh_0 + oh_1 + oh_2_init + oh_3_init)
                            v_ow = T.axis.spatial(T.int64(7), ow_0 * T.int64(7) + ow_1 * T.int64(7) + ow_2_init * T.int64(7) + ow_3_init)
                            v_oc_block = T.axis.spatial(T.int64(32), oc_block_0 * T.int64(32) + oc_block_1 * T.int64(8) + oc_block_2_init * T.int64(8) + oc_block_3_fused_init)
                            T.reads()
                            T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                            T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                            conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = T.float32(0)
                for ic_0, kh_0, kw_0, n_2, oc_chunk_2, oh_2, ow_2, oc_block_2, ic_1, kh_1, kw_1, n_3, oc_chunk_3, oh_3, ow_3 in T.grid(T.int64(8), T.int64(3), T.int64(3), T.int64(1), T.int64(2), T.int64(1), T.int64(1), T.int64(1), T.int64(64), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(7)):
                    for oc_block_3_fused in T.vectorized(T.int64(8)):
                        with T.block("conv2d_NCHWc_update"):
                            v_n = T.axis.spatial(T.int64(1), n_1 + n_2 + n_3)
                            v_oc_chunk = T.axis.spatial(T.int64(16), n_0_oc_chunk_0_fused_fused * T.int64(4) + oc_chunk_1 * T.int64(2) + oc_chunk_2 + oc_chunk_3)
                            v_oh = T.axis.spatial(T.int64(7), oh_0 + oh_1 + oh_2 + oh_3)
                            v_ow = T.axis.spatial(T.int64(7), ow_0 * T.int64(7) + ow_1 * T.int64(7) + ow_2 * T.int64(7) + ow_3)
                            v_oc_block = T.axis.spatial(T.int64(32), oc_block_0 * T.int64(32) + oc_block_1 * T.int64(8) + oc_block_2 * T.int64(8) + oc_block_3_fused)
                            v_ic = T.axis.reduce(T.int64(512), ic_0 * T.int64(64) + ic_1)
                            v_kh = T.axis.reduce(T.int64(3), kh_0 + kh_1)
                            v_kw = T.axis.reduce(T.int64(3), kw_0 + kw_1)
                            T.reads(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block], data_pad[v_n, v_ic // T.int64(512), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(512)], p1[v_oc_chunk, v_ic // T.int64(512), v_kh, v_kw, v_ic % T.int64(512), v_oc_block])
                            T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                            T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                            conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] + data_pad[v_n, v_ic // T.int64(512), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(512)] * p1[v_oc_chunk, v_ic // T.int64(512), v_kh, v_kw, v_ic % T.int64(512), v_oc_block]
        for ax0_ax1_ax2_ax3_ax4_fused_0 in T.parallel(T.int64(392)):
            for ax0_ax1_ax2_ax3_ax4_fused_1 in T.vectorized(T.int64(64)):
                with T.block("T_relu"):
                    v_ax0 = T.axis.spatial(T.int64(1), T.int64(0))
                    v_ax1 = T.axis.spatial(T.int64(16), (ax0_ax1_ax2_ax3_ax4_fused_0 * T.int64(64) + ax0_ax1_ax2_ax3_ax4_fused_1) // T.int64(1568))
                    v_ax2 = T.axis.spatial(T.int64(7), (ax0_ax1_ax2_ax3_ax4_fused_0 * T.int64(64) + ax0_ax1_ax2_ax3_ax4_fused_1) % T.int64(1568) // T.int64(224))
                    v_ax3 = T.axis.spatial(T.int64(7), (ax0_ax1_ax2_ax3_ax4_fused_0 * T.int64(64) + ax0_ax1_ax2_ax3_ax4_fused_1) % T.int64(224) // T.int64(32))
                    v_ax4 = T.axis.spatial(T.int64(32), (ax0_ax1_ax2_ax3_ax4_fused_0 * T.int64(64) + ax0_ax1_ax2_ax3_ax4_fused_1) % T.int64(32))
                    T.reads(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4])
                    T.writes(T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                    T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.max(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] + p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4], T.float32(0))
b0 = sch.get_block(name="data_pad", func_name="main")
b1 = sch.get_block(name="conv2d_NCHWc", func_name="main")
b2 = sch.get_block(name="T_add", func_name="main")
b3 = sch.get_block(name="root", func_name="main")
sch.compute_inline(block=b2)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSRSRS")
l4, l5, l6, l7, l8, l9, l10, l11 = sch.get_loops(block=b1)
v12, v13, v14, v15 = sch.sample_perfect_tile(loop=l4, n=4, max_innermost_factor=64, decision=[1, 1, 1, 1])
l16, l17, l18, l19 = sch.split(loop=l4, factors=[v12, v13, v14, v15], preserve_unit_iters=True)
v20, v21, v22, v23 = sch.sample_perfect_tile(loop=l5, n=4, max_innermost_factor=64, decision=[4, 2, 2, 1])
l24, l25, l26, l27 = sch.split(loop=l5, factors=[v20, v21, v22, v23], preserve_unit_iters=True)
v28, v29, v30, v31 = sch.sample_perfect_tile(loop=l6, n=4, max_innermost_factor=64, decision=[7, 1, 1, 1])
l32, l33, l34, l35 = sch.split(loop=l6, factors=[v28, v29, v30, v31], preserve_unit_iters=True)
v36, v37, v38, v39 = sch.sample_perfect_tile(loop=l7, n=4, max_innermost_factor=64, decision=[1, 1, 1, 7])
l40, l41, l42, l43 = sch.split(loop=l7, factors=[v36, v37, v38, v39], preserve_unit_iters=True)
v44, v45, v46, v47 = sch.sample_perfect_tile(loop=l8, n=4, max_innermost_factor=64, decision=[1, 4, 1, 8])
l48, l49, l50, l51 = sch.split(loop=l8, factors=[v44, v45, v46, v47], preserve_unit_iters=True)
v52, v53 = sch.sample_perfect_tile(loop=l9, n=2, max_innermost_factor=64, decision=[8, 64])
l54, l55 = sch.split(loop=l9, factors=[v52, v53], preserve_unit_iters=True)
v56, v57 = sch.sample_perfect_tile(loop=l10, n=2, max_innermost_factor=64, decision=[3, 1])
l58, l59 = sch.split(loop=l10, factors=[v56, v57], preserve_unit_iters=True)
v60, v61 = sch.sample_perfect_tile(loop=l11, n=2, max_innermost_factor=64, decision=[3, 1])
l62, l63 = sch.split(loop=l11, factors=[v60, v61], preserve_unit_iters=True)
sch.reorder(l16, l24, l32, l40, l48, l17, l25, l33, l41, l49, l54, l58, l62, l18, l26, l34, l42, l50, l55, l59, l63, l19, l27, l35, l43, l51)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.vectorize", ann_val=64)
v64 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.unroll_explicit", ann_val=v64)
l65 = sch.sample_compute_location(block=b0, decision=1)
sch.compute_at(block=b0, loop=l65, preserve_unit_loops=True, index=-1)
sch.enter_postproc()
b66 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b66, ann_key="meta_schedule.parallel")
sch.unannotate(block_or_loop=b66, ann_key="meta_schedule.vectorize")
sch.unannotate(block_or_loop=b66, ann_key="meta_schedule.unroll_explicit")
b67, b68, b69 = sch.get_child_blocks(b66)
l70, l71, l72, l73, l74, l75, l76 = sch.get_loops(block=b67)
l77 = sch.fuse(l70, l71, preserve_unit_iters=True)
sch.parallel(loop=l77)
l78, l79, l80, l81, l82, l83, l84, l85, l86, l87, l88, l89, l90, l91, l92, l93, l94, l95, l96, l97, l98, l99, l100, l101, l102 = sch.get_loops(block=b68)
l103 = sch.fuse(l78, preserve_unit_iters=True)
sch.parallel(loop=l103)
l104 = sch.fuse(l102, preserve_unit_iters=True)
sch.vectorize(loop=l104)
sch.annotate(block_or_loop=l103, ann_key="pragma_auto_unroll_max_step", ann_val=512)
sch.annotate(block_or_loop=l103, ann_key="pragma_unroll_explicit", ann_val=1)
l105, l106, l107, l108, l109 = sch.get_loops(block=b69)
l110 = sch.fuse(l105, l106, l107, l108, l109, preserve_unit_iters=True)
l111, l112 = sch.split(loop=l110, factors=[None, 64], preserve_unit_iters=True)
sch.parallel(loop=l111)
sch.vectorize(loop=l112)
b113 = sch.get_block(name="conv2d_NCHWc", func_name="main")
l114, l115, l116, l117, l118, l119, l120, l121, l122, l123, l124, l125, l126, l127, l128, l129, l130, l131, l132, l133, l134, l135, l136, l137, l138 = sch.get_loops(block=b113)
b139 = sch.decompose_reduction(block=b113, loop=l123)
2024-04-29 08:22:16 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_15] Trial #27: GFLOPs: 1.1046. Time: 209352.5640 us. Best GFLOPs: 100.5698
2024-04-29 08:22:16 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_15] Trial #28: GFLOPs: 45.1256. Time: 5124.8385 us. Best GFLOPs: 100.5698
2024-04-29 08:22:16 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_15] Trial #29: GFLOPs: 27.6406. Time: 8366.7344 us. Best GFLOPs: 100.5698
2024-04-29 08:22:16 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_15] Trial #30: GFLOPs: 23.2910. Time: 9929.2081 us. Best GFLOPs: 100.5698
2024-04-29 08:22:16 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_15] Trial #31: GFLOPs: 6.2231. Time: 37161.6410 us. Best GFLOPs: 100.5698
2024-04-29 08:22:16 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_15] Trial #32: GFLOPs: 38.3974. Time: 6022.8276 us. Best GFLOPs: 100.5698
2024-04-29 08:22:16 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_15] Trial #33: GFLOPs: 17.2836. Time: 13380.3595 us. Best GFLOPs: 100.5698
2024-04-29 08:22:16 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_15] Trial #34: GFLOPs: 16.1070. Time: 14357.7624 us. Best GFLOPs: 100.5698
2024-04-29 08:22:16 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_15] Trial #35: GFLOPs: 12.1881. Time: 18974.4178 us. Best GFLOPs: 100.5698
2024-04-29 08:22:16 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_15] Trial #36: GFLOPs: 4.3761. Time: 52846.2807 us. Best GFLOPs: 100.5698
2024-04-29 08:22:16 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_15] Trial #37: GFLOPs: 20.6844. Time: 11180.4798 us. Best GFLOPs: 100.5698
2024-04-29 08:22:16 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_15] Trial #38: GFLOPs: 2.9815. Time: 77566.2743 us. Best GFLOPs: 100.5698
2024-04-29 08:22:16 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_15] Trial #39: GFLOPs: 17.9724. Time: 12867.5627 us. Best GFLOPs: 100.5698
2024-04-29 08:22:16 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_15] Trial #40: GFLOPs: 0.1023. Time: 2261571.0690 us. Best GFLOPs: 100.5698
2024-04-29 08:22:16 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_15] Trial #41: GFLOPs: 18.5249. Time: 12483.7863 us. Best GFLOPs: 100.5698
2024-04-29 08:22:16 [INFO] [task_scheduler.cc:121] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_15] Trial #42: Error in building:
LocalBuilder: Timeout, killed after 30.0 seconds
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(1), T.int64(7), T.int64(7), T.int64(512)), "float32"), p1: T.Buffer((T.int64(16), T.int64(1), T.int64(3), T.int64(3), T.int64(512), T.int64(32)), "float32"), p2: T.Buffer((T.int64(1), T.int64(16), T.int64(1), T.int64(1), T.int64(32)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(16), T.int64(7), T.int64(7), T.int64(32)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        conv2d_NCHWc = T.alloc_buffer((T.int64(1), T.int64(16), T.int64(7), T.int64(7), T.int64(32)))
        for n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused in T.parallel(T.int64(64), annotations={"pragma_auto_unroll_max_step": 512, "pragma_unroll_explicit": 1}):
            for n_2_init, oc_chunk_2_init, oh_2_init, ow_2_init, oc_block_2_init, n_3_init, oc_chunk_3_init, oh_3_init, ow_3_init in T.grid(T.int64(1), T.int64(2), T.int64(7), T.int64(7), T.int64(2), T.int64(1), T.int64(1), T.int64(1), T.int64(1)):
                for oc_block_3_fused_init in T.vectorized(T.int64(2)):
                    with T.block("conv2d_NCHWc_init"):
                        v_n = T.axis.spatial(T.int64(1), n_2_init + n_3_init)
                        v_oc_chunk = T.axis.spatial(T.int64(16), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused // T.int64(8) * T.int64(2) + oc_chunk_2_init + oc_chunk_3_init)
                        v_oh = T.axis.spatial(T.int64(7), oh_2_init + oh_3_init)
                        v_ow = T.axis.spatial(T.int64(7), ow_2_init + ow_3_init)
                        v_oc_block = T.axis.spatial(T.int64(32), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused % T.int64(8) * T.int64(4) + oc_block_2_init * T.int64(2) + oc_block_3_fused_init)
                        T.reads()
                        T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                        T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                        conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = T.float32(0)
            for ic_0, kh_0, kw_0, n_2, oc_chunk_2, oh_2, ow_2, oc_block_2, ic_1, kh_1, kw_1, n_3, oc_chunk_3, oh_3, ow_3 in T.grid(T.int64(128), T.int64(3), T.int64(3), T.int64(1), T.int64(2), T.int64(7), T.int64(7), T.int64(2), T.int64(4), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1)):
                for oc_block_3_fused in T.vectorized(T.int64(2)):
                    with T.block("conv2d_NCHWc_update"):
                        v_n = T.axis.spatial(T.int64(1), n_2 + n_3)
                        v_oc_chunk = T.axis.spatial(T.int64(16), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused // T.int64(8) * T.int64(2) + oc_chunk_2 + oc_chunk_3)
                        v_oh = T.axis.spatial(T.int64(7), oh_2 + oh_3)
                        v_ow = T.axis.spatial(T.int64(7), ow_2 + ow_3)
                        v_oc_block = T.axis.spatial(T.int64(32), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused % T.int64(8) * T.int64(4) + oc_block_2 * T.int64(2) + oc_block_3_fused)
                        v_ic = T.axis.reduce(T.int64(512), ic_0 * T.int64(4) + ic_1)
                        v_kh = T.axis.reduce(T.int64(3), kh_0 + kh_1)
                        v_kw = T.axis.reduce(T.int64(3), kw_0 + kw_1)
                        T.reads(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block], p0[v_n, v_ic // T.int64(512), v_oh + v_kh - T.int64(1), v_ow + v_kw - T.int64(1), v_ic % T.int64(512)], p1[v_oc_chunk, v_ic // T.int64(512), v_kh, v_kw, v_ic % T.int64(512), v_oc_block])
                        T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                        T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                        conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] + T.if_then_else(T.int64(1) <= v_oh + v_kh and v_oh + v_kh < T.int64(8) and T.int64(1) <= v_ow + v_kw and v_ow + v_kw < T.int64(8), p0[v_n, v_ic // T.int64(512), v_oh + v_kh - T.int64(1), v_ow + v_kw - T.int64(1), v_ic % T.int64(512)], T.float32(0)) * p1[v_oc_chunk, v_ic // T.int64(512), v_kh, v_kw, v_ic % T.int64(512), v_oc_block]
        for ax0_ax1_ax2_ax3_ax4_fused_0 in T.parallel(T.int64(392)):
            for ax0_ax1_ax2_ax3_ax4_fused_1 in T.vectorized(T.int64(64)):
                with T.block("T_relu"):
                    v_ax0 = T.axis.spatial(T.int64(1), T.int64(0))
                    v_ax1 = T.axis.spatial(T.int64(16), (ax0_ax1_ax2_ax3_ax4_fused_0 * T.int64(64) + ax0_ax1_ax2_ax3_ax4_fused_1) // T.int64(1568))
                    v_ax2 = T.axis.spatial(T.int64(7), (ax0_ax1_ax2_ax3_ax4_fused_0 * T.int64(64) + ax0_ax1_ax2_ax3_ax4_fused_1) % T.int64(1568) // T.int64(224))
                    v_ax3 = T.axis.spatial(T.int64(7), (ax0_ax1_ax2_ax3_ax4_fused_0 * T.int64(64) + ax0_ax1_ax2_ax3_ax4_fused_1) % T.int64(224) // T.int64(32))
                    v_ax4 = T.axis.spatial(T.int64(32), (ax0_ax1_ax2_ax3_ax4_fused_0 * T.int64(64) + ax0_ax1_ax2_ax3_ax4_fused_1) % T.int64(32))
                    T.reads(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4])
                    T.writes(T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                    T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.max(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] + p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4], T.float32(0))
b0 = sch.get_block(name="data_pad", func_name="main")
b1 = sch.get_block(name="conv2d_NCHWc", func_name="main")
b2 = sch.get_block(name="T_add", func_name="main")
b3 = sch.get_block(name="root", func_name="main")
sch.compute_inline(block=b2)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSRSRS")
l4, l5, l6, l7, l8, l9, l10, l11 = sch.get_loops(block=b1)
v12, v13, v14, v15 = sch.sample_perfect_tile(loop=l4, n=4, max_innermost_factor=64, decision=[1, 1, 1, 1])
l16, l17, l18, l19 = sch.split(loop=l4, factors=[v12, v13, v14, v15], preserve_unit_iters=True)
v20, v21, v22, v23 = sch.sample_perfect_tile(loop=l5, n=4, max_innermost_factor=64, decision=[8, 1, 2, 1])
l24, l25, l26, l27 = sch.split(loop=l5, factors=[v20, v21, v22, v23], preserve_unit_iters=True)
v28, v29, v30, v31 = sch.sample_perfect_tile(loop=l6, n=4, max_innermost_factor=64, decision=[1, 1, 7, 1])
l32, l33, l34, l35 = sch.split(loop=l6, factors=[v28, v29, v30, v31], preserve_unit_iters=True)
v36, v37, v38, v39 = sch.sample_perfect_tile(loop=l7, n=4, max_innermost_factor=64, decision=[1, 1, 7, 1])
l40, l41, l42, l43 = sch.split(loop=l7, factors=[v36, v37, v38, v39], preserve_unit_iters=True)
v44, v45, v46, v47 = sch.sample_perfect_tile(loop=l8, n=4, max_innermost_factor=64, decision=[2, 4, 2, 2])
l48, l49, l50, l51 = sch.split(loop=l8, factors=[v44, v45, v46, v47], preserve_unit_iters=True)
v52, v53 = sch.sample_perfect_tile(loop=l9, n=2, max_innermost_factor=64, decision=[128, 4])
l54, l55 = sch.split(loop=l9, factors=[v52, v53], preserve_unit_iters=True)
v56, v57 = sch.sample_perfect_tile(loop=l10, n=2, max_innermost_factor=64, decision=[3, 1])
l58, l59 = sch.split(loop=l10, factors=[v56, v57], preserve_unit_iters=True)
v60, v61 = sch.sample_perfect_tile(loop=l11, n=2, max_innermost_factor=64, decision=[3, 1])
l62, l63 = sch.split(loop=l11, factors=[v60, v61], preserve_unit_iters=True)
sch.reorder(l16, l24, l32, l40, l48, l17, l25, l33, l41, l49, l54, l58, l62, l18, l26, l34, l42, l50, l55, l59, l63, l19, l27, l35, l43, l51)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.vectorize", ann_val=64)
v64 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.unroll_explicit", ann_val=v64)
l65 = sch.sample_compute_location(block=b0, decision=-2)
sch.compute_at(block=b0, loop=l65, preserve_unit_loops=True, index=-1)
sch.enter_postproc()
b66 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b66, ann_key="meta_schedule.parallel")
sch.unannotate(block_or_loop=b66, ann_key="meta_schedule.vectorize")
sch.unannotate(block_or_loop=b66, ann_key="meta_schedule.unroll_explicit")
b67, b68 = sch.get_child_blocks(b66)
l69, l70, l71, l72, l73, l74, l75, l76, l77, l78, l79, l80, l81, l82, l83, l84, l85, l86, l87, l88, l89, l90, l91, l92, l93, l94 = sch.get_loops(block=b67)
l95 = sch.fuse(l69, l70, l71, l72, l73, l74, l75, l76, l77, l78, preserve_unit_iters=True)
sch.parallel(loop=l95)
l96 = sch.fuse(l94, preserve_unit_iters=True)
sch.vectorize(loop=l96)
sch.annotate(block_or_loop=l95, ann_key="pragma_auto_unroll_max_step", ann_val=512)
sch.annotate(block_or_loop=l95, ann_key="pragma_unroll_explicit", ann_val=1)
l97, l98, l99, l100, l101 = sch.get_loops(block=b68)
l102 = sch.fuse(l97, l98, l99, l100, l101, preserve_unit_iters=True)
l103, l104 = sch.split(loop=l102, factors=[None, 64], preserve_unit_iters=True)
sch.parallel(loop=l103)
sch.vectorize(loop=l104)
b105 = sch.get_block(name="conv2d_NCHWc", func_name="main")
l106, l107, l108, l109, l110, l111, l112, l113, l114, l115, l116, l117, l118, l119, l120, l121, l122 = sch.get_loops(block=b105)
b123 = sch.decompose_reduction(block=b105, loop=l107)
2024-04-29 08:22:16 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_15] Trial #43: GFLOPs: 3.0585. Time: 75611.8660 us. Best GFLOPs: 100.5698
2024-04-29 08:22:16 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_15] Trial #44: GFLOPs: 75.7237. Time: 3054.0130 us. Best GFLOPs: 100.5698
2024-04-29 08:22:16 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_15] Trial #45: GFLOPs: 25.6607. Time: 9012.2628 us. Best GFLOPs: 100.5698
2024-04-29 08:22:16 [INFO] [task_scheduler.cc:121] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_15] Trial #46: Error in building:
LocalBuilder: Timeout, killed after 30.0 seconds
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(1), T.int64(7), T.int64(7), T.int64(512)), "float32"), p1: T.Buffer((T.int64(16), T.int64(1), T.int64(3), T.int64(3), T.int64(512), T.int64(32)), "float32"), p2: T.Buffer((T.int64(1), T.int64(16), T.int64(1), T.int64(1), T.int64(32)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(16), T.int64(7), T.int64(7), T.int64(32)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        data_pad = T.alloc_buffer((T.int64(1), T.int64(1), T.int64(9), T.int64(9), T.int64(512)))
        conv2d_NCHWc = T.alloc_buffer((T.int64(1), T.int64(16), T.int64(7), T.int64(7), T.int64(32)))
        for n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused_fused in T.parallel(T.int64(32), annotations={"pragma_auto_unroll_max_step": 512, "pragma_unroll_explicit": 1}):
            for ax0, ax1, ax2, ax3, ax4 in T.grid(T.int64(1), T.int64(1), T.int64(9), T.int64(9), T.int64(512)):
                with T.block("data_pad"):
                    v_i0, v_i1, v_i2, v_i3, v_i4 = T.axis.remap("SSSSS", [ax0, ax1, ax2, ax3, ax4])
                    T.reads(p0[v_i0, v_i1, v_i2 - T.int64(1), v_i3 - T.int64(1), v_i4])
                    T.writes(data_pad[v_i0, v_i1, v_i2, v_i3, v_i4])
                    data_pad[v_i0, v_i1, v_i2, v_i3, v_i4] = T.if_then_else(T.int64(1) <= v_i2 and v_i2 < T.int64(8) and T.int64(1) <= v_i3 and v_i3 < T.int64(8), p0[v_i0, v_i1, v_i2 - T.int64(1), v_i3 - T.int64(1), v_i4], T.float32(0))
            for n_2_init, oc_chunk_2_init, oh_2_init, ow_2_init, oc_block_2_init, n_3_init, oc_chunk_3_init, oh_3_init, ow_3_init in T.grid(T.int64(1), T.int64(2), T.int64(1), T.int64(1), T.int64(2), T.int64(1), T.int64(2), T.int64(7), T.int64(7)):
                for oc_block_3_fused_init in T.vectorized(T.int64(2)):
                    with T.block("conv2d_NCHWc_init"):
                        v_n = T.axis.spatial(T.int64(1), n_2_init + n_3_init)
                        v_oc_chunk = T.axis.spatial(T.int64(16), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused_fused // T.int64(8) * T.int64(4) + oc_chunk_2_init * T.int64(2) + oc_chunk_3_init)
                        v_oh = T.axis.spatial(T.int64(7), oh_2_init * T.int64(7) + oh_3_init)
                        v_ow = T.axis.spatial(T.int64(7), ow_2_init * T.int64(7) + ow_3_init)
                        v_oc_block = T.axis.spatial(T.int64(32), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused_fused % T.int64(8) * T.int64(4) + oc_block_2_init * T.int64(2) + oc_block_3_fused_init)
                        T.reads()
                        T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                        T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                        conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = T.float32(0)
            for ic_0, kh_0, kw_0, n_2, oc_chunk_2, oh_2, ow_2, oc_block_2, ic_1, kh_1, kw_1, n_3, oc_chunk_3, oh_3, ow_3 in T.grid(T.int64(8), T.int64(3), T.int64(1), T.int64(1), T.int64(2), T.int64(1), T.int64(1), T.int64(2), T.int64(64), T.int64(1), T.int64(3), T.int64(1), T.int64(2), T.int64(7), T.int64(7)):
                for oc_block_3_fused in T.vectorized(T.int64(2)):
                    with T.block("conv2d_NCHWc_update"):
                        v_n = T.axis.spatial(T.int64(1), n_2 + n_3)
                        v_oc_chunk = T.axis.spatial(T.int64(16), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused_fused // T.int64(8) * T.int64(4) + oc_chunk_2 * T.int64(2) + oc_chunk_3)
                        v_oh = T.axis.spatial(T.int64(7), oh_2 * T.int64(7) + oh_3)
                        v_ow = T.axis.spatial(T.int64(7), ow_2 * T.int64(7) + ow_3)
                        v_oc_block = T.axis.spatial(T.int64(32), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused_fused % T.int64(8) * T.int64(4) + oc_block_2 * T.int64(2) + oc_block_3_fused)
                        v_ic = T.axis.reduce(T.int64(512), ic_0 * T.int64(64) + ic_1)
                        v_kh = T.axis.reduce(T.int64(3), kh_0 + kh_1)
                        v_kw = T.axis.reduce(T.int64(3), kw_0 * T.int64(3) + kw_1)
                        T.reads(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block], data_pad[v_n, v_ic // T.int64(512), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(512)], p1[v_oc_chunk, v_ic // T.int64(512), v_kh, v_kw, v_ic % T.int64(512), v_oc_block])
                        T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                        T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                        conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] + data_pad[v_n, v_ic // T.int64(512), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(512)] * p1[v_oc_chunk, v_ic // T.int64(512), v_kh, v_kw, v_ic % T.int64(512), v_oc_block]
            for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(4), T.int64(7), T.int64(7)):
                for ax4_fused in T.vectorized(T.int64(4)):
                    with T.block("T_relu"):
                        v_ax0 = T.axis.spatial(T.int64(1), ax0)
                        v_ax1 = T.axis.spatial(T.int64(16), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused_fused // T.int64(8) * T.int64(4) + ax1)
                        v_ax2, v_ax3 = T.axis.remap("SS", [ax2, ax3])
                        v_ax4 = T.axis.spatial(T.int64(32), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused_fused % T.int64(8) * T.int64(4) + ax4_fused)
                        T.reads(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4])
                        T.writes(T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                        T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.max(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] + p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4], T.float32(0))
b0 = sch.get_block(name="data_pad", func_name="main")
b1 = sch.get_block(name="conv2d_NCHWc", func_name="main")
b2 = sch.get_block(name="T_add", func_name="main")
b3 = sch.get_block(name="root", func_name="main")
sch.compute_inline(block=b2)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSRSRS")
l4, l5, l6, l7, l8, l9, l10, l11 = sch.get_loops(block=b1)
v12, v13, v14, v15 = sch.sample_perfect_tile(loop=l4, n=4, max_innermost_factor=64, decision=[1, 1, 1, 1])
l16, l17, l18, l19 = sch.split(loop=l4, factors=[v12, v13, v14, v15], preserve_unit_iters=True)
v20, v21, v22, v23 = sch.sample_perfect_tile(loop=l5, n=4, max_innermost_factor=64, decision=[4, 1, 2, 2])
l24, l25, l26, l27 = sch.split(loop=l5, factors=[v20, v21, v22, v23], preserve_unit_iters=True)
v28, v29, v30, v31 = sch.sample_perfect_tile(loop=l6, n=4, max_innermost_factor=64, decision=[1, 1, 1, 7])
l32, l33, l34, l35 = sch.split(loop=l6, factors=[v28, v29, v30, v31], preserve_unit_iters=True)
v36, v37, v38, v39 = sch.sample_perfect_tile(loop=l7, n=4, max_innermost_factor=64, decision=[1, 1, 1, 7])
l40, l41, l42, l43 = sch.split(loop=l7, factors=[v36, v37, v38, v39], preserve_unit_iters=True)
v44, v45, v46, v47 = sch.sample_perfect_tile(loop=l8, n=4, max_innermost_factor=64, decision=[2, 4, 2, 2])
l48, l49, l50, l51 = sch.split(loop=l8, factors=[v44, v45, v46, v47], preserve_unit_iters=True)
v52, v53 = sch.sample_perfect_tile(loop=l9, n=2, max_innermost_factor=64, decision=[8, 64])
l54, l55 = sch.split(loop=l9, factors=[v52, v53], preserve_unit_iters=True)
v56, v57 = sch.sample_perfect_tile(loop=l10, n=2, max_innermost_factor=64, decision=[3, 1])
l58, l59 = sch.split(loop=l10, factors=[v56, v57], preserve_unit_iters=True)
v60, v61 = sch.sample_perfect_tile(loop=l11, n=2, max_innermost_factor=64, decision=[1, 3])
l62, l63 = sch.split(loop=l11, factors=[v60, v61], preserve_unit_iters=True)
sch.reorder(l16, l24, l32, l40, l48, l17, l25, l33, l41, l49, l54, l58, l62, l18, l26, l34, l42, l50, l55, l59, l63, l19, l27, l35, l43, l51)
b64, = sch.get_consumers(block=b1)
sch.reverse_compute_at(block=b64, loop=l49, preserve_unit_loops=True, index=-1)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.vectorize", ann_val=64)
v65 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.unroll_explicit", ann_val=v65)
l66 = sch.sample_compute_location(block=b0, decision=9)
sch.compute_at(block=b0, loop=l66, preserve_unit_loops=True, index=-1)
sch.enter_postproc()
b67 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b67, ann_key="meta_schedule.parallel")
sch.unannotate(block_or_loop=b67, ann_key="meta_schedule.vectorize")
sch.unannotate(block_or_loop=b67, ann_key="meta_schedule.unroll_explicit")
b68, b69, b70 = sch.get_child_blocks(b67)
l71, l72, l73, l74, l75, l76, l77, l78, l79, l80, l81, l82, l83, l84, l85 = sch.get_loops(block=b68)
l86 = sch.fuse(l71, l72, l73, l74, l75, l76, l77, l78, l79, l80, preserve_unit_iters=True)
sch.parallel(loop=l86)
l87, l88, l89, l90, l91, l92, l93, l94, l95, l96, l97, l98, l99, l100, l101, l102, l103 = sch.get_loops(block=b69)
l104 = sch.fuse(l87, preserve_unit_iters=True)
sch.parallel(loop=l104)
l105 = sch.fuse(l103, preserve_unit_iters=True)
sch.vectorize(loop=l105)
sch.annotate(block_or_loop=l104, ann_key="pragma_auto_unroll_max_step", ann_val=512)
sch.annotate(block_or_loop=l104, ann_key="pragma_unroll_explicit", ann_val=1)
l106, l107, l108, l109, l110, l111 = sch.get_loops(block=b70)
l112 = sch.fuse(l111, preserve_unit_iters=True)
sch.vectorize(loop=l112)
b113 = sch.get_block(name="conv2d_NCHWc", func_name="main")
l114, l115, l116, l117, l118, l119, l120, l121, l122, l123, l124, l125, l126, l127, l128, l129, l130 = sch.get_loops(block=b113)
b131 = sch.decompose_reduction(block=b113, loop=l115)
2024-04-29 08:22:16 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_15] Trial #47: GFLOPs: 1.1233. Time: 205881.2233 us. Best GFLOPs: 100.5698
2024-04-29 08:22:16 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_15] Trial #48: GFLOPs: 52.9757. Time: 4365.4233 us. Best GFLOPs: 100.5698
2024-04-29 08:22:16 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_15] Trial #49: GFLOPs: 1.4641. Time: 157951.0220 us. Best GFLOPs: 100.5698
2024-04-29 08:22:16 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_15] Trial #50: GFLOPs: 37.0913. Time: 6234.9159 us. Best GFLOPs: 100.5698
2024-04-29 08:22:16 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_15] Trial #51: GFLOPs: 24.9790. Time: 9258.2305 us. Best GFLOPs: 100.5698
2024-04-29 08:22:16 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_15] Trial #52: GFLOPs: 13.0474. Time: 17724.7270 us. Best GFLOPs: 100.5698
2024-04-29 08:22:16 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_15] Trial #53: GFLOPs: 92.0074. Time: 2513.5064 us. Best GFLOPs: 100.5698
2024-04-29 08:22:16 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_15] Trial #54: GFLOPs: 6.4434. Time: 35891.0300 us. Best GFLOPs: 100.5698
2024-04-29 08:22:16 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_15] Trial #55: GFLOPs: 4.0170. Time: 57571.2587 us. Best GFLOPs: 100.5698
2024-04-29 08:22:16 [INFO] [task_scheduler.cc:121] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_15] Trial #56: Error in building:
LocalBuilder: Timeout, killed after 30.0 seconds
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(1), T.int64(7), T.int64(7), T.int64(512)), "float32"), p1: T.Buffer((T.int64(16), T.int64(1), T.int64(3), T.int64(3), T.int64(512), T.int64(32)), "float32"), p2: T.Buffer((T.int64(1), T.int64(16), T.int64(1), T.int64(1), T.int64(32)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(16), T.int64(7), T.int64(7), T.int64(32)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        data_pad = T.alloc_buffer((T.int64(1), T.int64(1), T.int64(9), T.int64(9), T.int64(512)))
        conv2d_NCHWc = T.alloc_buffer((T.int64(1), T.int64(16), T.int64(7), T.int64(7), T.int64(32)))
        for n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused_fused in T.parallel(T.int64(784), annotations={"pragma_auto_unroll_max_step": 512, "pragma_unroll_explicit": 1}):
            for ax0, ax1, ax2, ax3, ax4 in T.grid(T.int64(1), T.int64(1), T.int64(3), T.int64(3), T.int64(512)):
                with T.block("data_pad"):
                    v_i0, v_i1 = T.axis.remap("SS", [ax0, ax1])
                    v_i2 = T.axis.spatial(T.int64(9), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused_fused // T.int64(112) + ax2)
                    v_i3 = T.axis.spatial(T.int64(9), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused_fused % T.int64(14) // T.int64(2) + ax3)
                    v_i4 = T.axis.spatial(T.int64(512), ax4)
                    T.reads(p0[v_i0, v_i1, v_i2 - T.int64(1), v_i3 - T.int64(1), v_i4])
                    T.writes(data_pad[v_i0, v_i1, v_i2, v_i3, v_i4])
                    data_pad[v_i0, v_i1, v_i2, v_i3, v_i4] = T.if_then_else(T.int64(1) <= v_i2 and v_i2 < T.int64(8) and T.int64(1) <= v_i3 and v_i3 < T.int64(8), p0[v_i0, v_i1, v_i2 - T.int64(1), v_i3 - T.int64(1), v_i4], T.float32(0))
            for n_2_init, oc_chunk_2_init, oh_2_init, ow_2_init, oc_block_2_init, n_3_init, oc_chunk_3_init, oh_3_init, ow_3_init, oc_block_3_init in T.grid(T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(1), T.int64(16), T.int64(1), T.int64(1), T.int64(1)):
                with T.block("conv2d_NCHWc_init"):
                    v_n = T.axis.spatial(T.int64(1), n_2_init + n_3_init)
                    v_oc_chunk = T.axis.spatial(T.int64(16), oc_chunk_2_init * T.int64(16) + oc_chunk_3_init)
                    v_oh = T.axis.spatial(T.int64(7), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused_fused // T.int64(112) + oh_2_init + oh_3_init)
                    v_ow = T.axis.spatial(T.int64(7), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused_fused % T.int64(14) // T.int64(2) + ow_2_init + ow_3_init)
                    v_oc_block = T.axis.spatial(T.int64(32), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused_fused % T.int64(112) // T.int64(14) * T.int64(4) + n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused_fused % T.int64(2) * T.int64(2) + oc_block_2_init + oc_block_3_init)
                    T.reads()
                    T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                    T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                    conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = T.float32(0)
            for ic_0, kh_0, kw_0, n_2, oc_chunk_2, oh_2, ow_2, oc_block_2, ic_1, kh_1, kw_1, n_3, oc_chunk_3, oh_3, ow_3, oc_block_3 in T.grid(T.int64(32), T.int64(3), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(16), T.int64(1), T.int64(3), T.int64(1), T.int64(16), T.int64(1), T.int64(1), T.int64(1)):
                with T.block("conv2d_NCHWc_update"):
                    v_n = T.axis.spatial(T.int64(1), n_2 + n_3)
                    v_oc_chunk = T.axis.spatial(T.int64(16), oc_chunk_2 * T.int64(16) + oc_chunk_3)
                    v_oh = T.axis.spatial(T.int64(7), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused_fused // T.int64(112) + oh_2 + oh_3)
                    v_ow = T.axis.spatial(T.int64(7), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused_fused % T.int64(14) // T.int64(2) + ow_2 + ow_3)
                    v_oc_block = T.axis.spatial(T.int64(32), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused_fused % T.int64(112) // T.int64(14) * T.int64(4) + n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused_fused % T.int64(2) * T.int64(2) + oc_block_2 + oc_block_3)
                    v_ic = T.axis.reduce(T.int64(512), ic_0 * T.int64(16) + ic_1)
                    v_kh = T.axis.reduce(T.int64(3), kh_0 + kh_1)
                    v_kw = T.axis.reduce(T.int64(3), kw_0 * T.int64(3) + kw_1)
                    T.reads(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block], data_pad[v_n, v_ic // T.int64(512), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(512)], p1[v_oc_chunk, v_ic // T.int64(512), v_kh, v_kw, v_ic % T.int64(512), v_oc_block])
                    T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                    T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                    conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] + data_pad[v_n, v_ic // T.int64(512), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(512)] * p1[v_oc_chunk, v_ic // T.int64(512), v_kh, v_kw, v_ic % T.int64(512), v_oc_block]
            for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(16), T.int64(1), T.int64(1)):
                for ax4_fused in T.vectorized(T.int64(2)):
                    with T.block("T_relu"):
                        v_ax0, v_ax1 = T.axis.remap("SS", [ax0, ax1])
                        v_ax2 = T.axis.spatial(T.int64(7), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused_fused // T.int64(112) + ax2)
                        v_ax3 = T.axis.spatial(T.int64(7), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused_fused % T.int64(14) // T.int64(2) + ax3)
                        v_ax4 = T.axis.spatial(T.int64(32), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused_fused % T.int64(112) // T.int64(14) * T.int64(4) + n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused_fused % T.int64(2) * T.int64(2) + ax4_fused)
                        T.reads(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4])
                        T.writes(T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                        T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.max(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] + p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4], T.float32(0))
b0 = sch.get_block(name="data_pad", func_name="main")
b1 = sch.get_block(name="conv2d_NCHWc", func_name="main")
b2 = sch.get_block(name="T_add", func_name="main")
b3 = sch.get_block(name="root", func_name="main")
sch.compute_inline(block=b2)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSRSRS")
l4, l5, l6, l7, l8, l9, l10, l11 = sch.get_loops(block=b1)
v12, v13, v14, v15 = sch.sample_perfect_tile(loop=l4, n=4, max_innermost_factor=64, decision=[1, 1, 1, 1])
l16, l17, l18, l19 = sch.split(loop=l4, factors=[v12, v13, v14, v15], preserve_unit_iters=True)
v20, v21, v22, v23 = sch.sample_perfect_tile(loop=l5, n=4, max_innermost_factor=64, decision=[1, 1, 1, 16])
l24, l25, l26, l27 = sch.split(loop=l5, factors=[v20, v21, v22, v23], preserve_unit_iters=True)
v28, v29, v30, v31 = sch.sample_perfect_tile(loop=l6, n=4, max_innermost_factor=64, decision=[7, 1, 1, 1])
l32, l33, l34, l35 = sch.split(loop=l6, factors=[v28, v29, v30, v31], preserve_unit_iters=True)
v36, v37, v38, v39 = sch.sample_perfect_tile(loop=l7, n=4, max_innermost_factor=64, decision=[1, 7, 1, 1])
l40, l41, l42, l43 = sch.split(loop=l7, factors=[v36, v37, v38, v39], preserve_unit_iters=True)
v44, v45, v46, v47 = sch.sample_perfect_tile(loop=l8, n=4, max_innermost_factor=64, decision=[8, 2, 2, 1])
l48, l49, l50, l51 = sch.split(loop=l8, factors=[v44, v45, v46, v47], preserve_unit_iters=True)
v52, v53 = sch.sample_perfect_tile(loop=l9, n=2, max_innermost_factor=64, decision=[32, 16])
l54, l55 = sch.split(loop=l9, factors=[v52, v53], preserve_unit_iters=True)
v56, v57 = sch.sample_perfect_tile(loop=l10, n=2, max_innermost_factor=64, decision=[3, 1])
l58, l59 = sch.split(loop=l10, factors=[v56, v57], preserve_unit_iters=True)
v60, v61 = sch.sample_perfect_tile(loop=l11, n=2, max_innermost_factor=64, decision=[1, 3])
l62, l63 = sch.split(loop=l11, factors=[v60, v61], preserve_unit_iters=True)
sch.reorder(l16, l24, l32, l40, l48, l17, l25, l33, l41, l49, l54, l58, l62, l18, l26, l34, l42, l50, l55, l59, l63, l19, l27, l35, l43, l51)
b64, = sch.get_consumers(block=b1)
sch.reverse_compute_at(block=b64, loop=l49, preserve_unit_loops=True, index=-1)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.vectorize", ann_val=64)
v65 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.unroll_explicit", ann_val=v65)
l66 = sch.sample_compute_location(block=b0, decision=9)
sch.compute_at(block=b0, loop=l66, preserve_unit_loops=True, index=-1)
sch.enter_postproc()
b67 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b67, ann_key="meta_schedule.parallel")
sch.unannotate(block_or_loop=b67, ann_key="meta_schedule.vectorize")
sch.unannotate(block_or_loop=b67, ann_key="meta_schedule.unroll_explicit")
b68, b69, b70 = sch.get_child_blocks(b67)
l71, l72, l73, l74, l75, l76, l77, l78, l79, l80, l81, l82, l83, l84, l85 = sch.get_loops(block=b68)
l86 = sch.fuse(l71, l72, l73, l74, l75, l76, l77, l78, l79, l80, preserve_unit_iters=True)
sch.parallel(loop=l86)
l87, l88, l89, l90, l91, l92, l93, l94, l95, l96, l97, l98, l99, l100, l101, l102, l103 = sch.get_loops(block=b69)
l104 = sch.fuse(l87, preserve_unit_iters=True)
sch.parallel(loop=l104)
sch.annotate(block_or_loop=l104, ann_key="pragma_auto_unroll_max_step", ann_val=512)
sch.annotate(block_or_loop=l104, ann_key="pragma_unroll_explicit", ann_val=1)
l105, l106, l107, l108, l109, l110 = sch.get_loops(block=b70)
l111 = sch.fuse(l110, preserve_unit_iters=True)
sch.vectorize(loop=l111)
b112 = sch.get_block(name="conv2d_NCHWc", func_name="main")
l113, l114, l115, l116, l117, l118, l119, l120, l121, l122, l123, l124, l125, l126, l127, l128, l129 = sch.get_loops(block=b112)
b130 = sch.decompose_reduction(block=b112, loop=l114)
2024-04-29 08:22:16 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_15] Trial #57: GFLOPs: 1.5785. Time: 146503.6403 us. Best GFLOPs: 100.5698
2024-04-29 08:22:16 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_15] Trial #58: GFLOPs: 35.3179. Time: 6547.9845 us. Best GFLOPs: 100.5698
2024-04-29 08:22:16 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_15] Trial #59: GFLOPs: 0.2314. Time: 999495.2827 us. Best GFLOPs: 100.5698
2024-04-29 08:22:16 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_15] Trial #60: GFLOPs: 2.5944. Time: 89138.8497 us. Best GFLOPs: 100.5698
2024-04-29 08:22:16 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_15] Trial #61: GFLOPs: 28.0907. Time: 8232.6705 us. Best GFLOPs: 100.5698
2024-04-29 08:22:16 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_15] Trial #62: GFLOPs: 1.9009. Time: 121661.4997 us. Best GFLOPs: 100.5698
2024-04-29 08:22:16 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_15] Trial #63: GFLOPs: 18.0368. Time: 12821.6572 us. Best GFLOPs: 100.5698
2024-04-29 08:29:10 [INFO] [evolutionary_search.cc:713] Generating candidates......
2024-04-29 08:29:11 [INFO] [evolutionary_search.cc:715] Picked top 57 candidate(s) from database
2024-04-29 08:29:15 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x12e77cf8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0xa01a998)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x136ded08)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x13b5e7e8)]: 0 failure(s)
2024-04-29 08:29:15 [INFO] [evolutionary_search.cc:723] Sampled 455 candidate(s)
2024-04-29 08:29:26 [INFO] [evolutionary_search.cc:621] Evolve iter #0 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x12e77cf8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0xa01a998)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x136ded08)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x13b5e7e8)]: 0 failure(s)
2024-04-29 08:29:37 [INFO] [evolutionary_search.cc:621] Evolve iter #1 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x12e77cf8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0xa01a998)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x136ded08)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x13b5e7e8)]: 0 failure(s)
2024-04-29 08:29:48 [INFO] [evolutionary_search.cc:621] Evolve iter #2 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x12e77cf8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0xa01a998)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x136ded08)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x13b5e7e8)]: 0 failure(s)
2024-04-29 08:29:59 [INFO] [evolutionary_search.cc:621] Evolve iter #3 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x12e77cf8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0xa01a998)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x136ded08)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x13b5e7e8)]: 0 failure(s)
2024-04-29 08:30:06 [INFO] [evolutionary_search.cc:649] Scores of the best 64 candidates:
[1 : 16]:	0.9748  0.9748  0.9748  0.9748  0.9748  0.9745  0.9374  0.9374  0.9196  0.8904  0.8904  0.8904  0.8904  0.8870  0.8870  0.8870
[17 : 32]:	0.8870  0.8870  0.8867  0.8788  0.8686  0.8660  0.8523  0.8492  0.8402  0.8402  0.8402  0.8385  0.8250  0.8237  0.8218  0.8171
[33 : 48]:	0.8161  0.8159  0.8112  0.8103  0.8103  0.8095  0.8065  0.8027  0.8027  0.8027  0.8019  0.8011  0.8005  0.7984  0.7970  0.7950
[49 : 64]:	0.7950  0.7950  0.7944  0.7936  0.7927  0.7927  0.7927  0.7927  0.7900  0.7873  0.7873  0.7853  0.7831  0.7831  0.7830  0.7827
2024-04-29 08:30:06 [INFO] [evolutionary_search.cc:727] Got 64 candidate(s) with evolutionary search
2024-04-29 08:30:06 [INFO] [evolutionary_search.cc:730] Sending 64 candidates(s) for measurement
2024-04-29 08:31:49 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_15] Trial #64: GFLOPs: 100.0855. Time: 2310.6351 us. Best GFLOPs: 100.5698
2024-04-29 08:31:49 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_15] Trial #65: GFLOPs: 72.1605. Time: 3204.8165 us. Best GFLOPs: 100.5698
2024-04-29 08:31:49 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_15] Trial #66: GFLOPs: 149.3144. Time: 1548.8201 us. Best GFLOPs: 149.3144
2024-04-29 08:31:49 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_15] Trial #67: GFLOPs: 36.3013. Time: 6370.5989 us. Best GFLOPs: 149.3144
2024-04-29 08:31:49 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_15] Trial #68: GFLOPs: 114.7166. Time: 2015.9339 us. Best GFLOPs: 149.3144
2024-04-29 08:31:49 [INFO] [task_scheduler.cc:121] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_15] Trial #69: Error in building:
LocalBuilder: Timeout, killed after 30.0 seconds
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(1), T.int64(7), T.int64(7), T.int64(512)), "float32"), p1: T.Buffer((T.int64(16), T.int64(1), T.int64(3), T.int64(3), T.int64(512), T.int64(32)), "float32"), p2: T.Buffer((T.int64(1), T.int64(16), T.int64(1), T.int64(1), T.int64(32)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(16), T.int64(7), T.int64(7), T.int64(32)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        data_pad = T.alloc_buffer((T.int64(1), T.int64(1), T.int64(9), T.int64(9), T.int64(512)))
        conv2d_NCHWc = T.alloc_buffer((T.int64(1), T.int64(16), T.int64(7), T.int64(7), T.int64(32)))
        for i0_i1_i2_i3_i4_fused in T.parallel(T.int64(41472)):
            with T.block("data_pad"):
                v_i0 = T.axis.spatial(T.int64(1), T.int64(0))
                v_i1 = T.axis.spatial(T.int64(1), T.int64(0))
                v_i2 = T.axis.spatial(T.int64(9), i0_i1_i2_i3_i4_fused // T.int64(4608))
                v_i3 = T.axis.spatial(T.int64(9), i0_i1_i2_i3_i4_fused % T.int64(4608) // T.int64(512))
                v_i4 = T.axis.spatial(T.int64(512), i0_i1_i2_i3_i4_fused % T.int64(512))
                T.reads(p0[v_i0, v_i1, v_i2 - T.int64(1), v_i3 - T.int64(1), v_i4])
                T.writes(data_pad[v_i0, v_i1, v_i2, v_i3, v_i4])
                data_pad[v_i0, v_i1, v_i2, v_i3, v_i4] = T.if_then_else(T.int64(1) <= v_i2 and v_i2 < T.int64(8) and T.int64(1) <= v_i3 and v_i3 < T.int64(8), p0[v_i0, v_i1, v_i2 - T.int64(1), v_i3 - T.int64(1), v_i4], T.float32(0))
        for n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused in T.parallel(T.int64(32), annotations={"pragma_auto_unroll_max_step": 512, "pragma_unroll_explicit": 1}):
            for n_2_init, oc_chunk_2_init, oh_2_init, ow_2_init, oc_block_2_init, n_3_init, oc_chunk_3_init, oh_3_init, ow_3_init in T.grid(T.int64(1), T.int64(2), T.int64(7), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(7)):
                for oc_block_3_fused_init in T.vectorized(T.int64(8)):
                    with T.block("conv2d_NCHWc_init"):
                        v_n = T.axis.spatial(T.int64(1), n_2_init + n_3_init)
                        v_oc_chunk = T.axis.spatial(T.int64(16), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused // T.int64(4) * T.int64(2) + oc_chunk_2_init + oc_chunk_3_init)
                        v_oh = T.axis.spatial(T.int64(7), oh_2_init + oh_3_init)
                        v_ow = T.axis.spatial(T.int64(7), ow_2_init * T.int64(7) + ow_3_init)
                        v_oc_block = T.axis.spatial(T.int64(32), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused % T.int64(4) * T.int64(8) + oc_block_2_init * T.int64(8) + oc_block_3_fused_init)
                        T.reads()
                        T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                        T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                        conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = T.float32(0)
            for ic_0, kh_0, kw_0, n_2, oc_chunk_2, oh_2, ow_2, oc_block_2, ic_1, kh_1, kw_1, n_3, oc_chunk_3, oh_3, ow_3 in T.grid(T.int64(128), T.int64(3), T.int64(3), T.int64(1), T.int64(2), T.int64(7), T.int64(1), T.int64(1), T.int64(4), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(7)):
                for oc_block_3_fused in T.vectorized(T.int64(8)):
                    with T.block("conv2d_NCHWc_update"):
                        v_n = T.axis.spatial(T.int64(1), n_2 + n_3)
                        v_oc_chunk = T.axis.spatial(T.int64(16), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused // T.int64(4) * T.int64(2) + oc_chunk_2 + oc_chunk_3)
                        v_oh = T.axis.spatial(T.int64(7), oh_2 + oh_3)
                        v_ow = T.axis.spatial(T.int64(7), ow_2 * T.int64(7) + ow_3)
                        v_oc_block = T.axis.spatial(T.int64(32), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused % T.int64(4) * T.int64(8) + oc_block_2 * T.int64(8) + oc_block_3_fused)
                        v_ic = T.axis.reduce(T.int64(512), ic_0 * T.int64(4) + ic_1)
                        v_kh = T.axis.reduce(T.int64(3), kh_0 + kh_1)
                        v_kw = T.axis.reduce(T.int64(3), kw_0 + kw_1)
                        T.reads(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block], data_pad[v_n, v_ic // T.int64(512), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(512)], p1[v_oc_chunk, v_ic // T.int64(512), v_kh, v_kw, v_ic % T.int64(512), v_oc_block])
                        T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                        T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                        conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] + data_pad[v_n, v_ic // T.int64(512), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(512)] * p1[v_oc_chunk, v_ic // T.int64(512), v_kh, v_kw, v_ic % T.int64(512), v_oc_block]
        for ax0_ax1_ax2_ax3_ax4_fused_0 in T.parallel(T.int64(392)):
            for ax0_ax1_ax2_ax3_ax4_fused_1 in T.vectorized(T.int64(64)):
                with T.block("T_relu"):
                    v_ax0 = T.axis.spatial(T.int64(1), T.int64(0))
                    v_ax1 = T.axis.spatial(T.int64(16), (ax0_ax1_ax2_ax3_ax4_fused_0 * T.int64(64) + ax0_ax1_ax2_ax3_ax4_fused_1) // T.int64(1568))
                    v_ax2 = T.axis.spatial(T.int64(7), (ax0_ax1_ax2_ax3_ax4_fused_0 * T.int64(64) + ax0_ax1_ax2_ax3_ax4_fused_1) % T.int64(1568) // T.int64(224))
                    v_ax3 = T.axis.spatial(T.int64(7), (ax0_ax1_ax2_ax3_ax4_fused_0 * T.int64(64) + ax0_ax1_ax2_ax3_ax4_fused_1) % T.int64(224) // T.int64(32))
                    v_ax4 = T.axis.spatial(T.int64(32), (ax0_ax1_ax2_ax3_ax4_fused_0 * T.int64(64) + ax0_ax1_ax2_ax3_ax4_fused_1) % T.int64(32))
                    T.reads(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4])
                    T.writes(T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                    T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.max(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] + p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4], T.float32(0))
b0 = sch.get_block(name="data_pad", func_name="main")
b1 = sch.get_block(name="conv2d_NCHWc", func_name="main")
b2 = sch.get_block(name="T_add", func_name="main")
b3 = sch.get_block(name="root", func_name="main")
sch.compute_inline(block=b2)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSRSRS")
l4, l5, l6, l7, l8, l9, l10, l11 = sch.get_loops(block=b1)
v12, v13, v14, v15 = sch.sample_perfect_tile(loop=l4, n=4, max_innermost_factor=64, decision=[1, 1, 1, 1])
l16, l17, l18, l19 = sch.split(loop=l4, factors=[v12, v13, v14, v15], preserve_unit_iters=True)
v20, v21, v22, v23 = sch.sample_perfect_tile(loop=l5, n=4, max_innermost_factor=64, decision=[4, 2, 2, 1])
l24, l25, l26, l27 = sch.split(loop=l5, factors=[v20, v21, v22, v23], preserve_unit_iters=True)
v28, v29, v30, v31 = sch.sample_perfect_tile(loop=l6, n=4, max_innermost_factor=64, decision=[1, 1, 7, 1])
l32, l33, l34, l35 = sch.split(loop=l6, factors=[v28, v29, v30, v31], preserve_unit_iters=True)
v36, v37, v38, v39 = sch.sample_perfect_tile(loop=l7, n=4, max_innermost_factor=64, decision=[1, 1, 1, 7])
l40, l41, l42, l43 = sch.split(loop=l7, factors=[v36, v37, v38, v39], preserve_unit_iters=True)
v44, v45, v46, v47 = sch.sample_perfect_tile(loop=l8, n=4, max_innermost_factor=64, decision=[1, 4, 1, 8])
l48, l49, l50, l51 = sch.split(loop=l8, factors=[v44, v45, v46, v47], preserve_unit_iters=True)
v52, v53 = sch.sample_perfect_tile(loop=l9, n=2, max_innermost_factor=64, decision=[128, 4])
l54, l55 = sch.split(loop=l9, factors=[v52, v53], preserve_unit_iters=True)
v56, v57 = sch.sample_perfect_tile(loop=l10, n=2, max_innermost_factor=64, decision=[3, 1])
l58, l59 = sch.split(loop=l10, factors=[v56, v57], preserve_unit_iters=True)
v60, v61 = sch.sample_perfect_tile(loop=l11, n=2, max_innermost_factor=64, decision=[3, 1])
l62, l63 = sch.split(loop=l11, factors=[v60, v61], preserve_unit_iters=True)
sch.reorder(l16, l24, l32, l40, l48, l17, l25, l33, l41, l49, l54, l58, l62, l18, l26, l34, l42, l50, l55, l59, l63, l19, l27, l35, l43, l51)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.vectorize", ann_val=64)
v64 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.unroll_explicit", ann_val=v64)
l65 = sch.sample_compute_location(block=b0, decision=-1)
sch.compute_at(block=b0, loop=l65, preserve_unit_loops=True, index=-1)
sch.enter_postproc()
b66 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b66, ann_key="meta_schedule.parallel")
sch.unannotate(block_or_loop=b66, ann_key="meta_schedule.vectorize")
sch.unannotate(block_or_loop=b66, ann_key="meta_schedule.unroll_explicit")
b67, b68, b69 = sch.get_child_blocks(b66)
l70, l71, l72, l73, l74 = sch.get_loops(block=b67)
l75 = sch.fuse(l70, l71, l72, l73, l74, preserve_unit_iters=True)
sch.parallel(loop=l75)
l76, l77, l78, l79, l80, l81, l82, l83, l84, l85, l86, l87, l88, l89, l90, l91, l92, l93, l94, l95, l96, l97, l98, l99, l100, l101 = sch.get_loops(block=b68)
l102 = sch.fuse(l76, l77, l78, l79, l80, l81, l82, l83, l84, l85, preserve_unit_iters=True)
sch.parallel(loop=l102)
l103 = sch.fuse(l101, preserve_unit_iters=True)
sch.vectorize(loop=l103)
sch.annotate(block_or_loop=l102, ann_key="pragma_auto_unroll_max_step", ann_val=512)
sch.annotate(block_or_loop=l102, ann_key="pragma_unroll_explicit", ann_val=1)
l104, l105, l106, l107, l108 = sch.get_loops(block=b69)
l109 = sch.fuse(l104, l105, l106, l107, l108, preserve_unit_iters=True)
l110, l111 = sch.split(loop=l109, factors=[None, 64], preserve_unit_iters=True)
sch.parallel(loop=l110)
sch.vectorize(loop=l111)
b112 = sch.get_block(name="conv2d_NCHWc", func_name="main")
l113, l114, l115, l116, l117, l118, l119, l120, l121, l122, l123, l124, l125, l126, l127, l128, l129 = sch.get_loops(block=b112)
b130 = sch.decompose_reduction(block=b112, loop=l114)
2024-04-29 08:31:49 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_15] Trial #70: GFLOPs: 23.0647. Time: 10026.6143 us. Best GFLOPs: 149.3144
2024-04-29 08:31:49 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_15] Trial #71: GFLOPs: 32.4470. Time: 7127.3469 us. Best GFLOPs: 149.3144
2024-04-29 08:31:49 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_15] Trial #72: GFLOPs: 90.7096. Time: 2549.4687 us. Best GFLOPs: 149.3144
2024-04-29 08:31:49 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_15] Trial #73: GFLOPs: 109.0802. Time: 2120.1020 us. Best GFLOPs: 149.3144
2024-04-29 08:31:49 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_15] Trial #74: GFLOPs: 120.9194. Time: 1912.5226 us. Best GFLOPs: 149.3144
2024-04-29 08:31:49 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_15] Trial #75: GFLOPs: 87.0286. Time: 2657.3016 us. Best GFLOPs: 149.3144
2024-04-29 08:31:49 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_15] Trial #76: GFLOPs: 131.0428. Time: 1764.7757 us. Best GFLOPs: 149.3144
2024-04-29 08:31:49 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_15] Trial #77: GFLOPs: 136.5721. Time: 1693.3270 us. Best GFLOPs: 149.3144
2024-04-29 08:31:49 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_15] Trial #78: GFLOPs: 114.8618. Time: 2013.3861 us. Best GFLOPs: 149.3144
2024-04-29 08:31:49 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_15] Trial #79: GFLOPs: 104.8366. Time: 2205.9196 us. Best GFLOPs: 149.3144
2024-04-29 08:31:49 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_15] Trial #80: GFLOPs: 139.0023. Time: 1663.7225 us. Best GFLOPs: 149.3144
2024-04-29 08:31:49 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_15] Trial #81: GFLOPs: 134.9141. Time: 1714.1367 us. Best GFLOPs: 149.3144
2024-04-29 08:31:49 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_15] Trial #82: GFLOPs: 30.3280. Time: 7625.3358 us. Best GFLOPs: 149.3144
2024-04-29 08:31:49 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_15] Trial #83: GFLOPs: 26.0194. Time: 8888.0226 us. Best GFLOPs: 149.3144
2024-04-29 08:31:49 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_15] Trial #84: GFLOPs: 137.7659. Time: 1678.6534 us. Best GFLOPs: 149.3144
2024-04-29 08:31:49 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_15] Trial #85: GFLOPs: 39.7584. Time: 5816.6666 us. Best GFLOPs: 149.3144
2024-04-29 08:31:49 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_15] Trial #86: GFLOPs: 53.3594. Time: 4334.0294 us. Best GFLOPs: 149.3144
2024-04-29 08:31:49 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_15] Trial #87: GFLOPs: 126.1363. Time: 1833.4233 us. Best GFLOPs: 149.3144
2024-04-29 08:31:49 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_15] Trial #88: GFLOPs: 53.0034. Time: 4363.1404 us. Best GFLOPs: 149.3144
2024-04-29 08:31:49 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_15] Trial #89: GFLOPs: 53.9651. Time: 4285.3835 us. Best GFLOPs: 149.3144
2024-04-29 08:31:49 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_15] Trial #90: GFLOPs: 52.9508. Time: 4367.4741 us. Best GFLOPs: 149.3144
2024-04-29 08:31:49 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_15] Trial #91: GFLOPs: 37.6856. Time: 6136.6010 us. Best GFLOPs: 149.3144
2024-04-29 08:31:49 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_15] Trial #92: GFLOPs: 54.6210. Time: 4233.9267 us. Best GFLOPs: 149.3144
2024-04-29 08:31:49 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_15] Trial #93: GFLOPs: 57.0267. Time: 4055.3116 us. Best GFLOPs: 149.3144
2024-04-29 08:31:49 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_15] Trial #94: GFLOPs: 83.6431. Time: 2764.8553 us. Best GFLOPs: 149.3144
2024-04-29 08:31:49 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_15] Trial #95: GFLOPs: 69.0371. Time: 3349.8085 us. Best GFLOPs: 149.3144
2024-04-29 08:31:49 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_15] Trial #96: GFLOPs: 70.5219. Time: 3279.2833 us. Best GFLOPs: 149.3144
2024-04-29 08:31:49 [INFO] [task_scheduler.cc:121] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_15] Trial #97: Error in building:
LocalBuilder: Timeout, killed after 30.0 seconds
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(1), T.int64(7), T.int64(7), T.int64(512)), "float32"), p1: T.Buffer((T.int64(16), T.int64(1), T.int64(3), T.int64(3), T.int64(512), T.int64(32)), "float32"), p2: T.Buffer((T.int64(1), T.int64(16), T.int64(1), T.int64(1), T.int64(32)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(16), T.int64(7), T.int64(7), T.int64(32)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        data_pad = T.alloc_buffer((T.int64(1), T.int64(1), T.int64(9), T.int64(9), T.int64(512)))
        conv2d_NCHWc = T.alloc_buffer((T.int64(1), T.int64(16), T.int64(7), T.int64(7), T.int64(32)))
        for i0_i1_i2_i3_i4_fused in T.parallel(T.int64(41472)):
            with T.block("data_pad"):
                v_i0 = T.axis.spatial(T.int64(1), T.int64(0))
                v_i1 = T.axis.spatial(T.int64(1), T.int64(0))
                v_i2 = T.axis.spatial(T.int64(9), i0_i1_i2_i3_i4_fused // T.int64(4608))
                v_i3 = T.axis.spatial(T.int64(9), i0_i1_i2_i3_i4_fused % T.int64(4608) // T.int64(512))
                v_i4 = T.axis.spatial(T.int64(512), i0_i1_i2_i3_i4_fused % T.int64(512))
                T.reads(p0[v_i0, v_i1, v_i2 - T.int64(1), v_i3 - T.int64(1), v_i4])
                T.writes(data_pad[v_i0, v_i1, v_i2, v_i3, v_i4])
                data_pad[v_i0, v_i1, v_i2, v_i3, v_i4] = T.if_then_else(T.int64(1) <= v_i2 and v_i2 < T.int64(8) and T.int64(1) <= v_i3 and v_i3 < T.int64(8), p0[v_i0, v_i1, v_i2 - T.int64(1), v_i3 - T.int64(1), v_i4], T.float32(0))
        for n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused in T.parallel(T.int64(32), annotations={"pragma_auto_unroll_max_step": 512, "pragma_unroll_explicit": 1}):
            for n_2_init, oc_chunk_2_init, oh_2_init, ow_2_init, oc_block_2_init, n_3_init, oc_chunk_3_init, oh_3_init, ow_3_init in T.grid(T.int64(1), T.int64(2), T.int64(7), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(7)):
                for oc_block_3_fused_init in T.vectorized(T.int64(8)):
                    with T.block("conv2d_NCHWc_init"):
                        v_n = T.axis.spatial(T.int64(1), n_2_init + n_3_init)
                        v_oc_chunk = T.axis.spatial(T.int64(16), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused // T.int64(8) * T.int64(4) + n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused % T.int64(4) // T.int64(2) * T.int64(2) + oc_chunk_2_init + oc_chunk_3_init)
                        v_oh = T.axis.spatial(T.int64(7), oh_2_init + oh_3_init)
                        v_ow = T.axis.spatial(T.int64(7), ow_2_init * T.int64(7) + ow_3_init)
                        v_oc_block = T.axis.spatial(T.int64(32), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused % T.int64(8) // T.int64(4) * T.int64(16) + n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused % T.int64(2) * T.int64(8) + oc_block_2_init * T.int64(8) + oc_block_3_fused_init)
                        T.reads()
                        T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                        T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                        conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = T.float32(0)
            for ic_0, kh_0, kw_0, n_2, oc_chunk_2, oh_2, ow_2, oc_block_2, ic_1, kh_1, kw_1, n_3, oc_chunk_3, oh_3, ow_3 in T.grid(T.int64(128), T.int64(3), T.int64(3), T.int64(1), T.int64(2), T.int64(7), T.int64(1), T.int64(1), T.int64(4), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(7)):
                for oc_block_3_fused in T.vectorized(T.int64(8)):
                    with T.block("conv2d_NCHWc_update"):
                        v_n = T.axis.spatial(T.int64(1), n_2 + n_3)
                        v_oc_chunk = T.axis.spatial(T.int64(16), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused // T.int64(8) * T.int64(4) + n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused % T.int64(4) // T.int64(2) * T.int64(2) + oc_chunk_2 + oc_chunk_3)
                        v_oh = T.axis.spatial(T.int64(7), oh_2 + oh_3)
                        v_ow = T.axis.spatial(T.int64(7), ow_2 * T.int64(7) + ow_3)
                        v_oc_block = T.axis.spatial(T.int64(32), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused % T.int64(8) // T.int64(4) * T.int64(16) + n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused % T.int64(2) * T.int64(8) + oc_block_2 * T.int64(8) + oc_block_3_fused)
                        v_ic = T.axis.reduce(T.int64(512), ic_0 * T.int64(4) + ic_1)
                        v_kh = T.axis.reduce(T.int64(3), kh_0 + kh_1)
                        v_kw = T.axis.reduce(T.int64(3), kw_0 + kw_1)
                        T.reads(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block], data_pad[v_n, v_ic // T.int64(512), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(512)], p1[v_oc_chunk, v_ic // T.int64(512), v_kh, v_kw, v_ic % T.int64(512), v_oc_block])
                        T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                        T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                        conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] + data_pad[v_n, v_ic // T.int64(512), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(512)] * p1[v_oc_chunk, v_ic // T.int64(512), v_kh, v_kw, v_ic % T.int64(512), v_oc_block]
        for ax0_ax1_ax2_ax3_ax4_fused_0 in T.parallel(T.int64(392)):
            for ax0_ax1_ax2_ax3_ax4_fused_1 in T.vectorized(T.int64(64)):
                with T.block("T_relu"):
                    v_ax0 = T.axis.spatial(T.int64(1), T.int64(0))
                    v_ax1 = T.axis.spatial(T.int64(16), (ax0_ax1_ax2_ax3_ax4_fused_0 * T.int64(64) + ax0_ax1_ax2_ax3_ax4_fused_1) // T.int64(1568))
                    v_ax2 = T.axis.spatial(T.int64(7), (ax0_ax1_ax2_ax3_ax4_fused_0 * T.int64(64) + ax0_ax1_ax2_ax3_ax4_fused_1) % T.int64(1568) // T.int64(224))
                    v_ax3 = T.axis.spatial(T.int64(7), (ax0_ax1_ax2_ax3_ax4_fused_0 * T.int64(64) + ax0_ax1_ax2_ax3_ax4_fused_1) % T.int64(224) // T.int64(32))
                    v_ax4 = T.axis.spatial(T.int64(32), (ax0_ax1_ax2_ax3_ax4_fused_0 * T.int64(64) + ax0_ax1_ax2_ax3_ax4_fused_1) % T.int64(32))
                    T.reads(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4])
                    T.writes(T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                    T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.max(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] + p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4], T.float32(0))
b0 = sch.get_block(name="data_pad", func_name="main")
b1 = sch.get_block(name="conv2d_NCHWc", func_name="main")
b2 = sch.get_block(name="T_add", func_name="main")
b3 = sch.get_block(name="root", func_name="main")
sch.compute_inline(block=b2)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSRSRS")
l4, l5, l6, l7, l8, l9, l10, l11 = sch.get_loops(block=b1)
v12, v13, v14, v15 = sch.sample_perfect_tile(loop=l4, n=4, max_innermost_factor=64, decision=[1, 1, 1, 1])
l16, l17, l18, l19 = sch.split(loop=l4, factors=[v12, v13, v14, v15], preserve_unit_iters=True)
v20, v21, v22, v23 = sch.sample_perfect_tile(loop=l5, n=4, max_innermost_factor=64, decision=[4, 2, 2, 1])
l24, l25, l26, l27 = sch.split(loop=l5, factors=[v20, v21, v22, v23], preserve_unit_iters=True)
v28, v29, v30, v31 = sch.sample_perfect_tile(loop=l6, n=4, max_innermost_factor=64, decision=[1, 1, 7, 1])
l32, l33, l34, l35 = sch.split(loop=l6, factors=[v28, v29, v30, v31], preserve_unit_iters=True)
v36, v37, v38, v39 = sch.sample_perfect_tile(loop=l7, n=4, max_innermost_factor=64, decision=[1, 1, 1, 7])
l40, l41, l42, l43 = sch.split(loop=l7, factors=[v36, v37, v38, v39], preserve_unit_iters=True)
v44, v45, v46, v47 = sch.sample_perfect_tile(loop=l8, n=4, max_innermost_factor=64, decision=[2, 2, 1, 8])
l48, l49, l50, l51 = sch.split(loop=l8, factors=[v44, v45, v46, v47], preserve_unit_iters=True)
v52, v53 = sch.sample_perfect_tile(loop=l9, n=2, max_innermost_factor=64, decision=[128, 4])
l54, l55 = sch.split(loop=l9, factors=[v52, v53], preserve_unit_iters=True)
v56, v57 = sch.sample_perfect_tile(loop=l10, n=2, max_innermost_factor=64, decision=[3, 1])
l58, l59 = sch.split(loop=l10, factors=[v56, v57], preserve_unit_iters=True)
v60, v61 = sch.sample_perfect_tile(loop=l11, n=2, max_innermost_factor=64, decision=[3, 1])
l62, l63 = sch.split(loop=l11, factors=[v60, v61], preserve_unit_iters=True)
sch.reorder(l16, l24, l32, l40, l48, l17, l25, l33, l41, l49, l54, l58, l62, l18, l26, l34, l42, l50, l55, l59, l63, l19, l27, l35, l43, l51)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.vectorize", ann_val=64)
v64 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.unroll_explicit", ann_val=v64)
l65 = sch.sample_compute_location(block=b0, decision=-1)
sch.compute_at(block=b0, loop=l65, preserve_unit_loops=True, index=-1)
sch.enter_postproc()
b66 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b66, ann_key="meta_schedule.parallel")
sch.unannotate(block_or_loop=b66, ann_key="meta_schedule.vectorize")
sch.unannotate(block_or_loop=b66, ann_key="meta_schedule.unroll_explicit")
b67, b68, b69 = sch.get_child_blocks(b66)
l70, l71, l72, l73, l74 = sch.get_loops(block=b67)
l75 = sch.fuse(l70, l71, l72, l73, l74, preserve_unit_iters=True)
sch.parallel(loop=l75)
l76, l77, l78, l79, l80, l81, l82, l83, l84, l85, l86, l87, l88, l89, l90, l91, l92, l93, l94, l95, l96, l97, l98, l99, l100, l101 = sch.get_loops(block=b68)
l102 = sch.fuse(l76, l77, l78, l79, l80, l81, l82, l83, l84, l85, preserve_unit_iters=True)
sch.parallel(loop=l102)
l103 = sch.fuse(l101, preserve_unit_iters=True)
sch.vectorize(loop=l103)
sch.annotate(block_or_loop=l102, ann_key="pragma_auto_unroll_max_step", ann_val=512)
sch.annotate(block_or_loop=l102, ann_key="pragma_unroll_explicit", ann_val=1)
l104, l105, l106, l107, l108 = sch.get_loops(block=b69)
l109 = sch.fuse(l104, l105, l106, l107, l108, preserve_unit_iters=True)
l110, l111 = sch.split(loop=l109, factors=[None, 64], preserve_unit_iters=True)
sch.parallel(loop=l110)
sch.vectorize(loop=l111)
b112 = sch.get_block(name="conv2d_NCHWc", func_name="main")
l113, l114, l115, l116, l117, l118, l119, l120, l121, l122, l123, l124, l125, l126, l127, l128, l129 = sch.get_loops(block=b112)
b130 = sch.decompose_reduction(block=b112, loop=l114)
2024-04-29 08:31:49 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_15] Trial #98: GFLOPs: 29.6413. Time: 7801.9846 us. Best GFLOPs: 149.3144
2024-04-29 08:31:49 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_15] Trial #99: GFLOPs: 32.9235. Time: 7024.1902 us. Best GFLOPs: 149.3144
2024-04-29 08:31:49 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_15] Trial #100: GFLOPs: 35.0088. Time: 6605.8041 us. Best GFLOPs: 149.3144
2024-04-29 08:31:49 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_15] Trial #101: GFLOPs: 36.5638. Time: 6324.8624 us. Best GFLOPs: 149.3144
2024-04-29 08:31:49 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_15] Trial #102: GFLOPs: 33.4665. Time: 6910.2362 us. Best GFLOPs: 149.3144
2024-04-29 08:31:49 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_15] Trial #103: GFLOPs: 21.2829. Time: 10866.0803 us. Best GFLOPs: 149.3144
2024-04-29 08:31:49 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_15] Trial #104: GFLOPs: 21.6586. Time: 10677.5641 us. Best GFLOPs: 149.3144
2024-04-29 08:31:49 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_15] Trial #105: GFLOPs: 7.9517. Time: 29083.3070 us. Best GFLOPs: 149.3144
2024-04-29 08:31:49 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_15] Trial #106: GFLOPs: 52.6102. Time: 4395.7521 us. Best GFLOPs: 149.3144
2024-04-29 08:31:49 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_15] Trial #107: GFLOPs: 64.8270. Time: 3567.3573 us. Best GFLOPs: 149.3144
2024-04-29 08:31:49 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_15] Trial #108: GFLOPs: 18.6772. Time: 12381.9877 us. Best GFLOPs: 149.3144
2024-04-29 08:31:49 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_15] Trial #109: GFLOPs: 24.9332. Time: 9275.2130 us. Best GFLOPs: 149.3144
2024-04-29 08:31:49 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_15] Trial #110: GFLOPs: 81.4428. Time: 2839.5532 us. Best GFLOPs: 149.3144
2024-04-29 08:31:49 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_15] Trial #111: GFLOPs: 4.0488. Time: 57118.1677 us. Best GFLOPs: 149.3144
2024-04-29 08:31:49 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_15] Trial #112: GFLOPs: 4.3548. Time: 53104.8977 us. Best GFLOPs: 149.3144
2024-04-29 08:31:49 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_15] Trial #113: GFLOPs: 4.2846. Time: 53975.2227 us. Best GFLOPs: 149.3144
2024-04-29 08:31:49 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_15] Trial #114: GFLOPs: 131.9939. Time: 1752.0593 us. Best GFLOPs: 149.3144
2024-04-29 08:31:49 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_15] Trial #115: GFLOPs: 20.9961. Time: 11014.4761 us. Best GFLOPs: 149.3144
2024-04-29 08:31:49 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_15] Trial #116: GFLOPs: 80.8676. Time: 2859.7505 us. Best GFLOPs: 149.3144
2024-04-29 08:31:49 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_15] Trial #117: GFLOPs: 70.4399. Time: 3283.0994 us. Best GFLOPs: 149.3144
2024-04-29 08:31:49 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_15] Trial #118: GFLOPs: 83.5019. Time: 2769.5317 us. Best GFLOPs: 149.3144
2024-04-29 08:31:49 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_15] Trial #119: GFLOPs: 66.5215. Time: 3476.4878 us. Best GFLOPs: 149.3144
2024-04-29 08:31:49 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_15] Trial #120: GFLOPs: 3.9482. Time: 58573.6433 us. Best GFLOPs: 149.3144
2024-04-29 08:31:49 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_15] Trial #121: GFLOPs: 51.0230. Time: 4532.4874 us. Best GFLOPs: 149.3144
2024-04-29 08:31:49 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_15] Trial #122: GFLOPs: 39.1315. Time: 5909.8502 us. Best GFLOPs: 149.3144
2024-04-29 08:31:49 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_15] Trial #123: GFLOPs: 73.1637. Time: 3160.8748 us. Best GFLOPs: 149.3144
2024-04-29 08:31:49 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_15] Trial #124: GFLOPs: 70.7355. Time: 3269.3784 us. Best GFLOPs: 149.3144
2024-04-29 08:31:49 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_15] Trial #125: GFLOPs: 11.9518. Time: 19349.4145 us. Best GFLOPs: 149.3144
2024-04-29 08:31:49 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_15] Trial #126: GFLOPs: 10.1579. Time: 22766.5686 us. Best GFLOPs: 149.3144
2024-04-29 08:31:49 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_15] Trial #127: GFLOPs: 61.8238. Time: 3740.6525 us. Best GFLOPs: 149.3144
2024-04-29 08:52:06 [INFO] [evolutionary_search.cc:713] Generating candidates......
2024-04-29 08:52:07 [INFO] [evolutionary_search.cc:715] Picked top 102 candidate(s) from database
2024-04-29 08:52:11 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x12e77cf8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0xa01a998)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x136ded08)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x13b5e7e8)]: 0 failure(s)
2024-04-29 08:52:11 [INFO] [evolutionary_search.cc:723] Sampled 410 candidate(s)
2024-04-29 08:52:22 [INFO] [evolutionary_search.cc:621] Evolve iter #0 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x12e77cf8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0xa01a998)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x136ded08)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x13b5e7e8)]: 0 failure(s)
2024-04-29 08:52:32 [INFO] [evolutionary_search.cc:621] Evolve iter #1 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x12e77cf8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0xa01a998)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x136ded08)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x13b5e7e8)]: 0 failure(s)
2024-04-29 08:52:42 [INFO] [evolutionary_search.cc:621] Evolve iter #2 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x12e77cf8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0xa01a998)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x136ded08)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x13b5e7e8)]: 0 failure(s)
2024-04-29 08:52:52 [INFO] [evolutionary_search.cc:621] Evolve iter #3 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x12e77cf8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0xa01a998)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x136ded08)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x13b5e7e8)]: 0 failure(s)
2024-04-29 08:52:58 [INFO] [evolutionary_search.cc:649] Scores of the best 64 candidates:
[1 : 16]:	0.8813  0.8374  0.8374  0.8374  0.8374  0.8374  0.8374  0.8374  0.8374  0.8374  0.8374  0.8374  0.8374  0.8286  0.8241  0.8234
[17 : 32]:	0.8187  0.8187  0.8187  0.8112  0.8047  0.7873  0.7866  0.7828  0.7828  0.7828  0.7825  0.7806  0.7801  0.7801  0.7794  0.7794
[33 : 48]:	0.7781  0.7781  0.7719  0.7719  0.7719  0.7719  0.7719  0.7719  0.7719  0.7719  0.7689  0.7689  0.7689  0.7689  0.7689  0.7689
[49 : 64]:	0.7689  0.7689  0.7689  0.7689  0.7689  0.7689  0.7689  0.7689  0.7689  0.7689  0.7674  0.7658  0.7651  0.7640  0.7631  0.7631
2024-04-29 08:52:58 [INFO] [evolutionary_search.cc:727] Got 64 candidate(s) with evolutionary search
2024-04-29 08:52:58 [INFO] [evolutionary_search.cc:730] Sending 64 candidates(s) for measurement
2024-04-29 08:54:44 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_15] Trial #128: GFLOPs: 140.0322. Time: 1651.4856 us. Best GFLOPs: 149.3144
2024-04-29 08:54:44 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_15] Trial #129: GFLOPs: 92.5162. Time: 2499.6844 us. Best GFLOPs: 149.3144
2024-04-29 08:54:44 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_15] Trial #130: GFLOPs: 107.9970. Time: 2141.3660 us. Best GFLOPs: 149.3144
2024-04-29 08:54:44 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_15] Trial #131: GFLOPs: 55.3970. Time: 4174.6170 us. Best GFLOPs: 149.3144
2024-04-29 08:54:44 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_15] Trial #132: GFLOPs: 103.6690. Time: 2230.7651 us. Best GFLOPs: 149.3144
2024-04-29 08:54:44 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_15] Trial #133: GFLOPs: 72.0392. Time: 3210.2142 us. Best GFLOPs: 149.3144
2024-04-29 08:54:44 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_15] Trial #134: GFLOPs: 167.2252. Time: 1382.9327 us. Best GFLOPs: 167.2252
2024-04-29 08:54:44 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_15] Trial #135: GFLOPs: 55.9389. Time: 4134.1769 us. Best GFLOPs: 167.2252
2024-04-29 08:54:44 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_15] Trial #136: GFLOPs: 124.1319. Time: 1863.0276 us. Best GFLOPs: 167.2252
2024-04-29 08:54:44 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_15] Trial #137: GFLOPs: 124.7985. Time: 1853.0762 us. Best GFLOPs: 167.2252
2024-04-29 08:54:44 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_15] Trial #138: GFLOPs: 41.5633. Time: 5564.0705 us. Best GFLOPs: 167.2252
2024-04-29 08:54:44 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_15] Trial #139: GFLOPs: 102.7251. Time: 2251.2621 us. Best GFLOPs: 167.2252
2024-04-29 08:54:44 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_15] Trial #140: GFLOPs: 35.3106. Time: 6549.3466 us. Best GFLOPs: 167.2252
2024-04-29 08:54:44 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_15] Trial #141: GFLOPs: 18.7371. Time: 12342.4516 us. Best GFLOPs: 167.2252
2024-04-29 08:54:44 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_15] Trial #142: GFLOPs: 197.2976. Time: 1172.1437 us. Best GFLOPs: 197.2976
2024-04-29 08:54:44 [INFO] [task_scheduler.cc:121] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_15] Trial #143: Error in building:
LocalBuilder: Timeout, killed after 30.0 seconds
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(1), T.int64(7), T.int64(7), T.int64(512)), "float32"), p1: T.Buffer((T.int64(16), T.int64(1), T.int64(3), T.int64(3), T.int64(512), T.int64(32)), "float32"), p2: T.Buffer((T.int64(1), T.int64(16), T.int64(1), T.int64(1), T.int64(32)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(16), T.int64(7), T.int64(7), T.int64(32)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        data_pad = T.alloc_buffer((T.int64(1), T.int64(1), T.int64(9), T.int64(9), T.int64(512)))
        conv2d_NCHWc = T.alloc_buffer((T.int64(1), T.int64(16), T.int64(7), T.int64(7), T.int64(32)))
        for i0_i1_i2_i3_i4_fused in T.parallel(T.int64(41472)):
            with T.block("data_pad"):
                v_i0 = T.axis.spatial(T.int64(1), T.int64(0))
                v_i1 = T.axis.spatial(T.int64(1), T.int64(0))
                v_i2 = T.axis.spatial(T.int64(9), i0_i1_i2_i3_i4_fused // T.int64(4608))
                v_i3 = T.axis.spatial(T.int64(9), i0_i1_i2_i3_i4_fused % T.int64(4608) // T.int64(512))
                v_i4 = T.axis.spatial(T.int64(512), i0_i1_i2_i3_i4_fused % T.int64(512))
                T.reads(p0[v_i0, v_i1, v_i2 - T.int64(1), v_i3 - T.int64(1), v_i4])
                T.writes(data_pad[v_i0, v_i1, v_i2, v_i3, v_i4])
                data_pad[v_i0, v_i1, v_i2, v_i3, v_i4] = T.if_then_else(T.int64(1) <= v_i2 and v_i2 < T.int64(8) and T.int64(1) <= v_i3 and v_i3 < T.int64(8), p0[v_i0, v_i1, v_i2 - T.int64(1), v_i3 - T.int64(1), v_i4], T.float32(0))
        for n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused in T.parallel(T.int64(224), annotations={"pragma_auto_unroll_max_step": 512, "pragma_unroll_explicit": 1}):
            for n_2_init, oc_chunk_2_init, oh_2_init, ow_2_init, oc_block_2_init, n_3_init, oc_chunk_3_init, oh_3_init, ow_3_init in T.grid(T.int64(1), T.int64(2), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(7)):
                for oc_block_3_fused_init in T.vectorized(T.int64(8)):
                    with T.block("conv2d_NCHWc_init"):
                        v_n = T.axis.spatial(T.int64(1), n_2_init + n_3_init)
                        v_oc_chunk = T.axis.spatial(T.int64(16), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused % T.int64(32) // T.int64(4) * T.int64(2) + oc_chunk_2_init + oc_chunk_3_init)
                        v_oh = T.axis.spatial(T.int64(7), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused // T.int64(32) + oh_2_init + oh_3_init)
                        v_ow = T.axis.spatial(T.int64(7), ow_2_init * T.int64(7) + ow_3_init)
                        v_oc_block = T.axis.spatial(T.int64(32), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused % T.int64(4) * T.int64(8) + oc_block_2_init * T.int64(8) + oc_block_3_fused_init)
                        T.reads()
                        T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                        T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                        conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = T.float32(0)
            for ic_0, kh_0, kw_0, n_2, oc_chunk_2, oh_2, ow_2, oc_block_2, ic_1, kh_1, kw_1, n_3, oc_chunk_3, oh_3, ow_3 in T.grid(T.int64(16), T.int64(3), T.int64(3), T.int64(1), T.int64(2), T.int64(1), T.int64(1), T.int64(1), T.int64(32), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(7)):
                for oc_block_3_fused in T.vectorized(T.int64(8)):
                    with T.block("conv2d_NCHWc_update"):
                        v_n = T.axis.spatial(T.int64(1), n_2 + n_3)
                        v_oc_chunk = T.axis.spatial(T.int64(16), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused % T.int64(32) // T.int64(4) * T.int64(2) + oc_chunk_2 + oc_chunk_3)
                        v_oh = T.axis.spatial(T.int64(7), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused // T.int64(32) + oh_2 + oh_3)
                        v_ow = T.axis.spatial(T.int64(7), ow_2 * T.int64(7) + ow_3)
                        v_oc_block = T.axis.spatial(T.int64(32), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused % T.int64(4) * T.int64(8) + oc_block_2 * T.int64(8) + oc_block_3_fused)
                        v_ic = T.axis.reduce(T.int64(512), ic_0 * T.int64(32) + ic_1)
                        v_kh = T.axis.reduce(T.int64(3), kh_0 + kh_1)
                        v_kw = T.axis.reduce(T.int64(3), kw_0 + kw_1)
                        T.reads(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block], data_pad[v_n, v_ic // T.int64(512), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(512)], p1[v_oc_chunk, v_ic // T.int64(512), v_kh, v_kw, v_ic % T.int64(512), v_oc_block])
                        T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                        T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                        conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] + data_pad[v_n, v_ic // T.int64(512), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(512)] * p1[v_oc_chunk, v_ic // T.int64(512), v_kh, v_kw, v_ic % T.int64(512), v_oc_block]
        for ax0_ax1_ax2_ax3_ax4_fused_0 in T.parallel(T.int64(392)):
            for ax0_ax1_ax2_ax3_ax4_fused_1 in T.vectorized(T.int64(64)):
                with T.block("T_relu"):
                    v_ax0 = T.axis.spatial(T.int64(1), T.int64(0))
                    v_ax1 = T.axis.spatial(T.int64(16), (ax0_ax1_ax2_ax3_ax4_fused_0 * T.int64(64) + ax0_ax1_ax2_ax3_ax4_fused_1) // T.int64(1568))
                    v_ax2 = T.axis.spatial(T.int64(7), (ax0_ax1_ax2_ax3_ax4_fused_0 * T.int64(64) + ax0_ax1_ax2_ax3_ax4_fused_1) % T.int64(1568) // T.int64(224))
                    v_ax3 = T.axis.spatial(T.int64(7), (ax0_ax1_ax2_ax3_ax4_fused_0 * T.int64(64) + ax0_ax1_ax2_ax3_ax4_fused_1) % T.int64(224) // T.int64(32))
                    v_ax4 = T.axis.spatial(T.int64(32), (ax0_ax1_ax2_ax3_ax4_fused_0 * T.int64(64) + ax0_ax1_ax2_ax3_ax4_fused_1) % T.int64(32))
                    T.reads(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4])
                    T.writes(T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                    T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.max(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] + p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4], T.float32(0))
b0 = sch.get_block(name="data_pad", func_name="main")
b1 = sch.get_block(name="conv2d_NCHWc", func_name="main")
b2 = sch.get_block(name="T_add", func_name="main")
b3 = sch.get_block(name="root", func_name="main")
sch.compute_inline(block=b2)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSRSRS")
l4, l5, l6, l7, l8, l9, l10, l11 = sch.get_loops(block=b1)
v12, v13, v14, v15 = sch.sample_perfect_tile(loop=l4, n=4, max_innermost_factor=64, decision=[1, 1, 1, 1])
l16, l17, l18, l19 = sch.split(loop=l4, factors=[v12, v13, v14, v15], preserve_unit_iters=True)
v20, v21, v22, v23 = sch.sample_perfect_tile(loop=l5, n=4, max_innermost_factor=64, decision=[1, 8, 2, 1])
l24, l25, l26, l27 = sch.split(loop=l5, factors=[v20, v21, v22, v23], preserve_unit_iters=True)
v28, v29, v30, v31 = sch.sample_perfect_tile(loop=l6, n=4, max_innermost_factor=64, decision=[7, 1, 1, 1])
l32, l33, l34, l35 = sch.split(loop=l6, factors=[v28, v29, v30, v31], preserve_unit_iters=True)
v36, v37, v38, v39 = sch.sample_perfect_tile(loop=l7, n=4, max_innermost_factor=64, decision=[1, 1, 1, 7])
l40, l41, l42, l43 = sch.split(loop=l7, factors=[v36, v37, v38, v39], preserve_unit_iters=True)
v44, v45, v46, v47 = sch.sample_perfect_tile(loop=l8, n=4, max_innermost_factor=64, decision=[1, 4, 1, 8])
l48, l49, l50, l51 = sch.split(loop=l8, factors=[v44, v45, v46, v47], preserve_unit_iters=True)
v52, v53 = sch.sample_perfect_tile(loop=l9, n=2, max_innermost_factor=64, decision=[16, 32])
l54, l55 = sch.split(loop=l9, factors=[v52, v53], preserve_unit_iters=True)
v56, v57 = sch.sample_perfect_tile(loop=l10, n=2, max_innermost_factor=64, decision=[3, 1])
l58, l59 = sch.split(loop=l10, factors=[v56, v57], preserve_unit_iters=True)
v60, v61 = sch.sample_perfect_tile(loop=l11, n=2, max_innermost_factor=64, decision=[3, 1])
l62, l63 = sch.split(loop=l11, factors=[v60, v61], preserve_unit_iters=True)
sch.reorder(l16, l24, l32, l40, l48, l17, l25, l33, l41, l49, l54, l58, l62, l18, l26, l34, l42, l50, l55, l59, l63, l19, l27, l35, l43, l51)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.vectorize", ann_val=64)
v64 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.unroll_explicit", ann_val=v64)
l65 = sch.sample_compute_location(block=b0, decision=-1)
sch.compute_at(block=b0, loop=l65, preserve_unit_loops=True, index=-1)
sch.enter_postproc()
b66 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b66, ann_key="meta_schedule.parallel")
sch.unannotate(block_or_loop=b66, ann_key="meta_schedule.vectorize")
sch.unannotate(block_or_loop=b66, ann_key="meta_schedule.unroll_explicit")
b67, b68, b69 = sch.get_child_blocks(b66)
l70, l71, l72, l73, l74 = sch.get_loops(block=b67)
l75 = sch.fuse(l70, l71, l72, l73, l74, preserve_unit_iters=True)
sch.parallel(loop=l75)
l76, l77, l78, l79, l80, l81, l82, l83, l84, l85, l86, l87, l88, l89, l90, l91, l92, l93, l94, l95, l96, l97, l98, l99, l100, l101 = sch.get_loops(block=b68)
l102 = sch.fuse(l76, l77, l78, l79, l80, l81, l82, l83, l84, l85, preserve_unit_iters=True)
sch.parallel(loop=l102)
l103 = sch.fuse(l101, preserve_unit_iters=True)
sch.vectorize(loop=l103)
sch.annotate(block_or_loop=l102, ann_key="pragma_auto_unroll_max_step", ann_val=512)
sch.annotate(block_or_loop=l102, ann_key="pragma_unroll_explicit", ann_val=1)
l104, l105, l106, l107, l108 = sch.get_loops(block=b69)
l109 = sch.fuse(l104, l105, l106, l107, l108, preserve_unit_iters=True)
l110, l111 = sch.split(loop=l109, factors=[None, 64], preserve_unit_iters=True)
sch.parallel(loop=l110)
sch.vectorize(loop=l111)
b112 = sch.get_block(name="conv2d_NCHWc", func_name="main")
l113, l114, l115, l116, l117, l118, l119, l120, l121, l122, l123, l124, l125, l126, l127, l128, l129 = sch.get_loops(block=b112)
b130 = sch.decompose_reduction(block=b112, loop=l114)
2024-04-29 08:54:44 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_15] Trial #144: GFLOPs: 436.2706. Time: 530.0865 us. Best GFLOPs: 436.2706
2024-04-29 08:54:44 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_15] Trial #145: GFLOPs: 342.7435. Time: 674.7354 us. Best GFLOPs: 436.2706
2024-04-29 08:54:44 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_15] Trial #146: GFLOPs: 148.0696. Time: 1561.8414 us. Best GFLOPs: 436.2706
2024-04-29 08:54:44 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_15] Trial #147: GFLOPs: 156.5985. Time: 1476.7778 us. Best GFLOPs: 436.2706
2024-04-29 08:54:44 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_15] Trial #148: GFLOPs: 162.1379. Time: 1426.3240 us. Best GFLOPs: 436.2706
2024-04-29 08:54:44 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_15] Trial #149: GFLOPs: 46.2745. Time: 4997.5894 us. Best GFLOPs: 436.2706
2024-04-29 08:54:44 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_15] Trial #150: GFLOPs: 44.0381. Time: 5251.3851 us. Best GFLOPs: 436.2706
2024-04-29 08:54:44 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_15] Trial #151: GFLOPs: 129.1092. Time: 1791.2061 us. Best GFLOPs: 436.2706
2024-04-29 08:54:44 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_15] Trial #152: GFLOPs: 105.9839. Time: 2182.0402 us. Best GFLOPs: 436.2706
2024-04-29 08:54:44 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_15] Trial #153: GFLOPs: 150.1875. Time: 1539.8168 us. Best GFLOPs: 436.2706
2024-04-29 08:54:44 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_15] Trial #154: GFLOPs: 188.9276. Time: 1224.0733 us. Best GFLOPs: 436.2706
2024-04-29 08:54:44 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_15] Trial #155: GFLOPs: 53.1489. Time: 4351.1945 us. Best GFLOPs: 436.2706
2024-04-29 08:54:44 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_15] Trial #156: GFLOPs: 179.2043. Time: 1290.4890 us. Best GFLOPs: 436.2706
2024-04-29 08:54:44 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_15] Trial #157: GFLOPs: 191.6023. Time: 1206.9854 us. Best GFLOPs: 436.2706
2024-04-29 08:54:44 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_15] Trial #158: GFLOPs: 172.1376. Time: 1343.4667 us. Best GFLOPs: 436.2706
2024-04-29 08:54:44 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_15] Trial #159: GFLOPs: 88.9926. Time: 2598.6555 us. Best GFLOPs: 436.2706
2024-04-29 08:54:44 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_15] Trial #160: GFLOPs: 91.8526. Time: 2517.7436 us. Best GFLOPs: 436.2706
2024-04-29 08:54:44 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_15] Trial #161: GFLOPs: 46.9714. Time: 4923.4513 us. Best GFLOPs: 436.2706
2024-04-29 08:54:44 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_15] Trial #162: GFLOPs: 70.2321. Time: 3292.8130 us. Best GFLOPs: 436.2706
2024-04-29 08:54:44 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_15] Trial #163: GFLOPs: 70.1021. Time: 3298.9178 us. Best GFLOPs: 436.2706
2024-04-29 08:54:44 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_15] Trial #164: GFLOPs: 9.6065. Time: 24073.5030 us. Best GFLOPs: 436.2706
2024-04-29 08:54:44 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_15] Trial #165: GFLOPs: 64.7879. Time: 3569.5098 us. Best GFLOPs: 436.2706
2024-04-29 08:54:44 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_15] Trial #166: GFLOPs: 6.1024. Time: 37896.7047 us. Best GFLOPs: 436.2706
2024-04-29 08:54:44 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_15] Trial #167: GFLOPs: 9.6612. Time: 23937.2184 us. Best GFLOPs: 436.2706
2024-04-29 08:54:44 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_15] Trial #168: GFLOPs: 75.3091. Time: 3070.8269 us. Best GFLOPs: 436.2706
2024-04-29 08:54:44 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_15] Trial #169: GFLOPs: 68.1685. Time: 3392.4913 us. Best GFLOPs: 436.2706
2024-04-29 08:54:44 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_15] Trial #170: GFLOPs: 87.1681. Time: 2653.0474 us. Best GFLOPs: 436.2706
2024-04-29 08:54:44 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_15] Trial #171: GFLOPs: 94.0591. Time: 2458.6798 us. Best GFLOPs: 436.2706
2024-04-29 08:54:44 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_15] Trial #172: GFLOPs: 93.8253. Time: 2464.8067 us. Best GFLOPs: 436.2706
2024-04-29 08:54:44 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_15] Trial #173: GFLOPs: 92.8838. Time: 2489.7893 us. Best GFLOPs: 436.2706
2024-04-29 08:54:44 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_15] Trial #174: GFLOPs: 129.0645. Time: 1791.8270 us. Best GFLOPs: 436.2706
2024-04-29 08:54:44 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_15] Trial #175: GFLOPs: 120.0138. Time: 1926.9550 us. Best GFLOPs: 436.2706
2024-04-29 08:54:44 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_15] Trial #176: GFLOPs: 121.5915. Time: 1901.9512 us. Best GFLOPs: 436.2706
2024-04-29 08:54:44 [INFO] [task_scheduler.cc:121] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_15] Trial #177: Error in building:
LocalBuilder: Timeout, killed after 30.0 seconds
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(1), T.int64(7), T.int64(7), T.int64(512)), "float32"), p1: T.Buffer((T.int64(16), T.int64(1), T.int64(3), T.int64(3), T.int64(512), T.int64(32)), "float32"), p2: T.Buffer((T.int64(1), T.int64(16), T.int64(1), T.int64(1), T.int64(32)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(16), T.int64(7), T.int64(7), T.int64(32)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        data_pad = T.alloc_buffer((T.int64(1), T.int64(1), T.int64(9), T.int64(9), T.int64(512)))
        conv2d_NCHWc = T.alloc_buffer((T.int64(1), T.int64(16), T.int64(7), T.int64(7), T.int64(32)))
        for i0_i1_i2_i3_i4_fused in T.parallel(T.int64(41472)):
            with T.block("data_pad"):
                v_i0 = T.axis.spatial(T.int64(1), T.int64(0))
                v_i1 = T.axis.spatial(T.int64(1), T.int64(0))
                v_i2 = T.axis.spatial(T.int64(9), i0_i1_i2_i3_i4_fused // T.int64(4608))
                v_i3 = T.axis.spatial(T.int64(9), i0_i1_i2_i3_i4_fused % T.int64(4608) // T.int64(512))
                v_i4 = T.axis.spatial(T.int64(512), i0_i1_i2_i3_i4_fused % T.int64(512))
                T.reads(p0[v_i0, v_i1, v_i2 - T.int64(1), v_i3 - T.int64(1), v_i4])
                T.writes(data_pad[v_i0, v_i1, v_i2, v_i3, v_i4])
                data_pad[v_i0, v_i1, v_i2, v_i3, v_i4] = T.if_then_else(T.int64(1) <= v_i2 and v_i2 < T.int64(8) and T.int64(1) <= v_i3 and v_i3 < T.int64(8), p0[v_i0, v_i1, v_i2 - T.int64(1), v_i3 - T.int64(1), v_i4], T.float32(0))
        for n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused in T.parallel(T.int64(224), annotations={"pragma_auto_unroll_max_step": 512, "pragma_unroll_explicit": 1}):
            for n_2_init, oc_chunk_2_init, oh_2_init, ow_2_init, oc_block_2_init, n_3_init, oc_chunk_3_init, oh_3_init, ow_3_init in T.grid(T.int64(1), T.int64(2), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(7)):
                for oc_block_3_fused_init in T.vectorized(T.int64(8)):
                    with T.block("conv2d_NCHWc_init"):
                        v_n = T.axis.spatial(T.int64(1), n_2_init + n_3_init)
                        v_oc_chunk = T.axis.spatial(T.int64(16), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused // T.int64(28) * T.int64(2) + oc_chunk_2_init + oc_chunk_3_init)
                        v_oh = T.axis.spatial(T.int64(7), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused % T.int64(28) // T.int64(4) + oh_2_init + oh_3_init)
                        v_ow = T.axis.spatial(T.int64(7), ow_2_init * T.int64(7) + ow_3_init)
                        v_oc_block = T.axis.spatial(T.int64(32), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused % T.int64(4) * T.int64(8) + oc_block_2_init * T.int64(8) + oc_block_3_fused_init)
                        T.reads()
                        T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                        T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                        conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = T.float32(0)
            for ic_0, kh_0, kw_0, n_2, oc_chunk_2, oh_2, ow_2, oc_block_2, ic_1, kh_1, kw_1, n_3, oc_chunk_3, oh_3, ow_3 in T.grid(T.int64(64), T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(1), T.int64(1), T.int64(1), T.int64(8), T.int64(3), T.int64(3), T.int64(1), T.int64(1), T.int64(1), T.int64(7)):
                for oc_block_3_fused in T.vectorized(T.int64(8)):
                    with T.block("conv2d_NCHWc_update"):
                        v_n = T.axis.spatial(T.int64(1), n_2 + n_3)
                        v_oc_chunk = T.axis.spatial(T.int64(16), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused // T.int64(28) * T.int64(2) + oc_chunk_2 + oc_chunk_3)
                        v_oh = T.axis.spatial(T.int64(7), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused % T.int64(28) // T.int64(4) + oh_2 + oh_3)
                        v_ow = T.axis.spatial(T.int64(7), ow_2 * T.int64(7) + ow_3)
                        v_oc_block = T.axis.spatial(T.int64(32), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused % T.int64(4) * T.int64(8) + oc_block_2 * T.int64(8) + oc_block_3_fused)
                        v_ic = T.axis.reduce(T.int64(512), ic_0 * T.int64(8) + ic_1)
                        v_kh = T.axis.reduce(T.int64(3), kh_0 * T.int64(3) + kh_1)
                        v_kw = T.axis.reduce(T.int64(3), kw_0 * T.int64(3) + kw_1)
                        T.reads(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block], data_pad[v_n, v_ic // T.int64(512), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(512)], p1[v_oc_chunk, v_ic // T.int64(512), v_kh, v_kw, v_ic % T.int64(512), v_oc_block])
                        T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                        T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                        conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] + data_pad[v_n, v_ic // T.int64(512), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(512)] * p1[v_oc_chunk, v_ic // T.int64(512), v_kh, v_kw, v_ic % T.int64(512), v_oc_block]
        for ax0_ax1_ax2_ax3_ax4_fused_0 in T.parallel(T.int64(392)):
            for ax0_ax1_ax2_ax3_ax4_fused_1 in T.vectorized(T.int64(64)):
                with T.block("T_relu"):
                    v_ax0 = T.axis.spatial(T.int64(1), T.int64(0))
                    v_ax1 = T.axis.spatial(T.int64(16), (ax0_ax1_ax2_ax3_ax4_fused_0 * T.int64(64) + ax0_ax1_ax2_ax3_ax4_fused_1) // T.int64(1568))
                    v_ax2 = T.axis.spatial(T.int64(7), (ax0_ax1_ax2_ax3_ax4_fused_0 * T.int64(64) + ax0_ax1_ax2_ax3_ax4_fused_1) % T.int64(1568) // T.int64(224))
                    v_ax3 = T.axis.spatial(T.int64(7), (ax0_ax1_ax2_ax3_ax4_fused_0 * T.int64(64) + ax0_ax1_ax2_ax3_ax4_fused_1) % T.int64(224) // T.int64(32))
                    v_ax4 = T.axis.spatial(T.int64(32), (ax0_ax1_ax2_ax3_ax4_fused_0 * T.int64(64) + ax0_ax1_ax2_ax3_ax4_fused_1) % T.int64(32))
                    T.reads(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4])
                    T.writes(T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                    T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.max(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] + p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4], T.float32(0))
b0 = sch.get_block(name="data_pad", func_name="main")
b1 = sch.get_block(name="conv2d_NCHWc", func_name="main")
b2 = sch.get_block(name="T_add", func_name="main")
b3 = sch.get_block(name="root", func_name="main")
sch.compute_inline(block=b2)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSRSRS")
l4, l5, l6, l7, l8, l9, l10, l11 = sch.get_loops(block=b1)
v12, v13, v14, v15 = sch.sample_perfect_tile(loop=l4, n=4, max_innermost_factor=64, decision=[1, 1, 1, 1])
l16, l17, l18, l19 = sch.split(loop=l4, factors=[v12, v13, v14, v15], preserve_unit_iters=True)
v20, v21, v22, v23 = sch.sample_perfect_tile(loop=l5, n=4, max_innermost_factor=64, decision=[1, 8, 2, 1])
l24, l25, l26, l27 = sch.split(loop=l5, factors=[v20, v21, v22, v23], preserve_unit_iters=True)
v28, v29, v30, v31 = sch.sample_perfect_tile(loop=l6, n=4, max_innermost_factor=64, decision=[1, 7, 1, 1])
l32, l33, l34, l35 = sch.split(loop=l6, factors=[v28, v29, v30, v31], preserve_unit_iters=True)
v36, v37, v38, v39 = sch.sample_perfect_tile(loop=l7, n=4, max_innermost_factor=64, decision=[1, 1, 1, 7])
l40, l41, l42, l43 = sch.split(loop=l7, factors=[v36, v37, v38, v39], preserve_unit_iters=True)
v44, v45, v46, v47 = sch.sample_perfect_tile(loop=l8, n=4, max_innermost_factor=64, decision=[1, 4, 1, 8])
l48, l49, l50, l51 = sch.split(loop=l8, factors=[v44, v45, v46, v47], preserve_unit_iters=True)
v52, v53 = sch.sample_perfect_tile(loop=l9, n=2, max_innermost_factor=64, decision=[64, 8])
l54, l55 = sch.split(loop=l9, factors=[v52, v53], preserve_unit_iters=True)
v56, v57 = sch.sample_perfect_tile(loop=l10, n=2, max_innermost_factor=64, decision=[1, 3])
l58, l59 = sch.split(loop=l10, factors=[v56, v57], preserve_unit_iters=True)
v60, v61 = sch.sample_perfect_tile(loop=l11, n=2, max_innermost_factor=64, decision=[1, 3])
l62, l63 = sch.split(loop=l11, factors=[v60, v61], preserve_unit_iters=True)
sch.reorder(l16, l24, l32, l40, l48, l17, l25, l33, l41, l49, l54, l58, l62, l18, l26, l34, l42, l50, l55, l59, l63, l19, l27, l35, l43, l51)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.vectorize", ann_val=64)
v64 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.unroll_explicit", ann_val=v64)
l65 = sch.sample_compute_location(block=b0, decision=-1)
sch.compute_at(block=b0, loop=l65, preserve_unit_loops=True, index=-1)
sch.enter_postproc()
b66 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b66, ann_key="meta_schedule.parallel")
sch.unannotate(block_or_loop=b66, ann_key="meta_schedule.vectorize")
sch.unannotate(block_or_loop=b66, ann_key="meta_schedule.unroll_explicit")
b67, b68, b69 = sch.get_child_blocks(b66)
l70, l71, l72, l73, l74 = sch.get_loops(block=b67)
l75 = sch.fuse(l70, l71, l72, l73, l74, preserve_unit_iters=True)
sch.parallel(loop=l75)
l76, l77, l78, l79, l80, l81, l82, l83, l84, l85, l86, l87, l88, l89, l90, l91, l92, l93, l94, l95, l96, l97, l98, l99, l100, l101 = sch.get_loops(block=b68)
l102 = sch.fuse(l76, l77, l78, l79, l80, l81, l82, l83, l84, l85, preserve_unit_iters=True)
sch.parallel(loop=l102)
l103 = sch.fuse(l101, preserve_unit_iters=True)
sch.vectorize(loop=l103)
sch.annotate(block_or_loop=l102, ann_key="pragma_auto_unroll_max_step", ann_val=512)
sch.annotate(block_or_loop=l102, ann_key="pragma_unroll_explicit", ann_val=1)
l104, l105, l106, l107, l108 = sch.get_loops(block=b69)
l109 = sch.fuse(l104, l105, l106, l107, l108, preserve_unit_iters=True)
l110, l111 = sch.split(loop=l109, factors=[None, 64], preserve_unit_iters=True)
sch.parallel(loop=l110)
sch.vectorize(loop=l111)
b112 = sch.get_block(name="conv2d_NCHWc", func_name="main")
l113, l114, l115, l116, l117, l118, l119, l120, l121, l122, l123, l124, l125, l126, l127, l128, l129 = sch.get_loops(block=b112)
b130 = sch.decompose_reduction(block=b112, loop=l114)
2024-04-29 08:54:44 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_15] Trial #178: GFLOPs: 89.7883. Time: 2575.6277 us. Best GFLOPs: 436.2706
2024-04-29 08:54:44 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_15] Trial #179: GFLOPs: 65.4187. Time: 3535.0904 us. Best GFLOPs: 436.2706
2024-04-29 08:54:44 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_15] Trial #180: GFLOPs: 177.2475. Time: 1304.7360 us. Best GFLOPs: 436.2706
2024-04-29 08:54:44 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_15] Trial #181: GFLOPs: 140.6327. Time: 1644.4338 us. Best GFLOPs: 436.2706
2024-04-29 08:54:44 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_15] Trial #182: GFLOPs: 188.2106. Time: 1228.7364 us. Best GFLOPs: 436.2706
2024-04-29 08:54:44 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_15] Trial #183: GFLOPs: 174.5396. Time: 1324.9781 us. Best GFLOPs: 436.2706
2024-04-29 08:54:44 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_15] Trial #184: GFLOPs: 94.2559. Time: 2453.5466 us. Best GFLOPs: 436.2706
2024-04-29 08:54:44 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_15] Trial #185: GFLOPs: 95.4073. Time: 2423.9357 us. Best GFLOPs: 436.2706
2024-04-29 08:54:44 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_15] Trial #186: GFLOPs: 89.4328. Time: 2585.8665 us. Best GFLOPs: 436.2706
2024-04-29 08:54:44 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_15] Trial #187: GFLOPs: 19.0127. Time: 12163.4863 us. Best GFLOPs: 436.2706
2024-04-29 08:54:44 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_15] Trial #188: GFLOPs: 140.7970. Time: 1642.5155 us. Best GFLOPs: 436.2706
2024-04-29 08:54:44 [INFO] [task_scheduler.cc:121] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_15] Trial #189: Error in building:
LocalBuilder: Timeout, killed after 30.0 seconds
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(1), T.int64(7), T.int64(7), T.int64(512)), "float32"), p1: T.Buffer((T.int64(16), T.int64(1), T.int64(3), T.int64(3), T.int64(512), T.int64(32)), "float32"), p2: T.Buffer((T.int64(1), T.int64(16), T.int64(1), T.int64(1), T.int64(32)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(16), T.int64(7), T.int64(7), T.int64(32)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        data_pad = T.alloc_buffer((T.int64(1), T.int64(1), T.int64(9), T.int64(9), T.int64(512)))
        conv2d_NCHWc = T.alloc_buffer((T.int64(1), T.int64(16), T.int64(7), T.int64(7), T.int64(32)))
        for n_0_oc_chunk_0_fused_fused in T.parallel(T.int64(2), annotations={"pragma_auto_unroll_max_step": 512, "pragma_unroll_explicit": 1}):
            for ax0, ax1, ax2, ax3, ax4 in T.grid(T.int64(1), T.int64(1), T.int64(9), T.int64(9), T.int64(512)):
                with T.block("data_pad"):
                    v_i0, v_i1, v_i2, v_i3, v_i4 = T.axis.remap("SSSSS", [ax0, ax1, ax2, ax3, ax4])
                    T.reads(p0[v_i0, v_i1, v_i2 - T.int64(1), v_i3 - T.int64(1), v_i4])
                    T.writes(data_pad[v_i0, v_i1, v_i2, v_i3, v_i4])
                    data_pad[v_i0, v_i1, v_i2, v_i3, v_i4] = T.if_then_else(T.int64(1) <= v_i2 and v_i2 < T.int64(8) and T.int64(1) <= v_i3 and v_i3 < T.int64(8), p0[v_i0, v_i1, v_i2 - T.int64(1), v_i3 - T.int64(1), v_i4], T.float32(0))
            for oh_0, ow_0, oc_block_0, n_1, oc_chunk_1, oh_1, ow_1, oc_block_1 in T.grid(T.int64(7), T.int64(7), T.int64(8), T.int64(1), T.int64(2), T.int64(1), T.int64(1), T.int64(1)):
                for n_2_init, oc_chunk_2_init, oh_2_init, ow_2_init, oc_block_2_init, n_3_init, oc_chunk_3_init, oh_3_init, ow_3_init in T.grid(T.int64(1), T.int64(4), T.int64(1), T.int64(1), T.int64(2), T.int64(1), T.int64(1), T.int64(1), T.int64(1)):
                    for oc_block_3_fused_init in T.vectorized(T.int64(2)):
                        with T.block("conv2d_NCHWc_init"):
                            v_n = T.axis.spatial(T.int64(1), n_1 + n_2_init + n_3_init)
                            v_oc_chunk = T.axis.spatial(T.int64(16), n_0_oc_chunk_0_fused_fused * T.int64(8) + oc_chunk_1 * T.int64(4) + oc_chunk_2_init + oc_chunk_3_init)
                            v_oh = T.axis.spatial(T.int64(7), oh_0 + oh_1 + oh_2_init + oh_3_init)
                            v_ow = T.axis.spatial(T.int64(7), ow_0 + ow_1 + ow_2_init + ow_3_init)
                            v_oc_block = T.axis.spatial(T.int64(32), oc_block_0 * T.int64(4) + oc_block_1 * T.int64(4) + oc_block_2_init * T.int64(2) + oc_block_3_fused_init)
                            T.reads()
                            T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                            T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                            conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = T.float32(0)
                for ic_0, kh_0, kw_0, n_2, oc_chunk_2, oh_2, ow_2, oc_block_2, ic_1, kh_1, kw_1, n_3, oc_chunk_3, oh_3, ow_3 in T.grid(T.int64(8), T.int64(1), T.int64(1), T.int64(1), T.int64(4), T.int64(1), T.int64(1), T.int64(2), T.int64(64), T.int64(3), T.int64(3), T.int64(1), T.int64(1), T.int64(1), T.int64(1)):
                    for oc_block_3_fused in T.vectorized(T.int64(2)):
                        with T.block("conv2d_NCHWc_update"):
                            v_n = T.axis.spatial(T.int64(1), n_1 + n_2 + n_3)
                            v_oc_chunk = T.axis.spatial(T.int64(16), n_0_oc_chunk_0_fused_fused * T.int64(8) + oc_chunk_1 * T.int64(4) + oc_chunk_2 + oc_chunk_3)
                            v_oh = T.axis.spatial(T.int64(7), oh_0 + oh_1 + oh_2 + oh_3)
                            v_ow = T.axis.spatial(T.int64(7), ow_0 + ow_1 + ow_2 + ow_3)
                            v_oc_block = T.axis.spatial(T.int64(32), oc_block_0 * T.int64(4) + oc_block_1 * T.int64(4) + oc_block_2 * T.int64(2) + oc_block_3_fused)
                            v_ic = T.axis.reduce(T.int64(512), ic_0 * T.int64(64) + ic_1)
                            v_kh = T.axis.reduce(T.int64(3), kh_0 * T.int64(3) + kh_1)
                            v_kw = T.axis.reduce(T.int64(3), kw_0 * T.int64(3) + kw_1)
                            T.reads(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block], data_pad[v_n, v_ic // T.int64(512), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(512)], p1[v_oc_chunk, v_ic // T.int64(512), v_kh, v_kw, v_ic % T.int64(512), v_oc_block])
                            T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                            T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                            conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] + data_pad[v_n, v_ic // T.int64(512), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(512)] * p1[v_oc_chunk, v_ic // T.int64(512), v_kh, v_kw, v_ic % T.int64(512), v_oc_block]
        for ax0_ax1_ax2_ax3_ax4_fused_0 in T.parallel(T.int64(392)):
            for ax0_ax1_ax2_ax3_ax4_fused_1 in T.vectorized(T.int64(64)):
                with T.block("T_relu"):
                    v_ax0 = T.axis.spatial(T.int64(1), T.int64(0))
                    v_ax1 = T.axis.spatial(T.int64(16), (ax0_ax1_ax2_ax3_ax4_fused_0 * T.int64(64) + ax0_ax1_ax2_ax3_ax4_fused_1) // T.int64(1568))
                    v_ax2 = T.axis.spatial(T.int64(7), (ax0_ax1_ax2_ax3_ax4_fused_0 * T.int64(64) + ax0_ax1_ax2_ax3_ax4_fused_1) % T.int64(1568) // T.int64(224))
                    v_ax3 = T.axis.spatial(T.int64(7), (ax0_ax1_ax2_ax3_ax4_fused_0 * T.int64(64) + ax0_ax1_ax2_ax3_ax4_fused_1) % T.int64(224) // T.int64(32))
                    v_ax4 = T.axis.spatial(T.int64(32), (ax0_ax1_ax2_ax3_ax4_fused_0 * T.int64(64) + ax0_ax1_ax2_ax3_ax4_fused_1) % T.int64(32))
                    T.reads(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4])
                    T.writes(T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                    T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.max(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] + p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4], T.float32(0))
b0 = sch.get_block(name="data_pad", func_name="main")
b1 = sch.get_block(name="conv2d_NCHWc", func_name="main")
b2 = sch.get_block(name="T_add", func_name="main")
b3 = sch.get_block(name="root", func_name="main")
sch.compute_inline(block=b2)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSRSRS")
l4, l5, l6, l7, l8, l9, l10, l11 = sch.get_loops(block=b1)
v12, v13, v14, v15 = sch.sample_perfect_tile(loop=l4, n=4, max_innermost_factor=64, decision=[1, 1, 1, 1])
l16, l17, l18, l19 = sch.split(loop=l4, factors=[v12, v13, v14, v15], preserve_unit_iters=True)
v20, v21, v22, v23 = sch.sample_perfect_tile(loop=l5, n=4, max_innermost_factor=64, decision=[2, 2, 4, 1])
l24, l25, l26, l27 = sch.split(loop=l5, factors=[v20, v21, v22, v23], preserve_unit_iters=True)
v28, v29, v30, v31 = sch.sample_perfect_tile(loop=l6, n=4, max_innermost_factor=64, decision=[7, 1, 1, 1])
l32, l33, l34, l35 = sch.split(loop=l6, factors=[v28, v29, v30, v31], preserve_unit_iters=True)
v36, v37, v38, v39 = sch.sample_perfect_tile(loop=l7, n=4, max_innermost_factor=64, decision=[7, 1, 1, 1])
l40, l41, l42, l43 = sch.split(loop=l7, factors=[v36, v37, v38, v39], preserve_unit_iters=True)
v44, v45, v46, v47 = sch.sample_perfect_tile(loop=l8, n=4, max_innermost_factor=64, decision=[8, 1, 2, 2])
l48, l49, l50, l51 = sch.split(loop=l8, factors=[v44, v45, v46, v47], preserve_unit_iters=True)
v52, v53 = sch.sample_perfect_tile(loop=l9, n=2, max_innermost_factor=64, decision=[8, 64])
l54, l55 = sch.split(loop=l9, factors=[v52, v53], preserve_unit_iters=True)
v56, v57 = sch.sample_perfect_tile(loop=l10, n=2, max_innermost_factor=64, decision=[1, 3])
l58, l59 = sch.split(loop=l10, factors=[v56, v57], preserve_unit_iters=True)
v60, v61 = sch.sample_perfect_tile(loop=l11, n=2, max_innermost_factor=64, decision=[1, 3])
l62, l63 = sch.split(loop=l11, factors=[v60, v61], preserve_unit_iters=True)
sch.reorder(l16, l24, l32, l40, l48, l17, l25, l33, l41, l49, l54, l58, l62, l18, l26, l34, l42, l50, l55, l59, l63, l19, l27, l35, l43, l51)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.vectorize", ann_val=64)
v64 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.unroll_explicit", ann_val=v64)
l65 = sch.sample_compute_location(block=b0, decision=1)
sch.compute_at(block=b0, loop=l65, preserve_unit_loops=True, index=-1)
sch.enter_postproc()
b66 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b66, ann_key="meta_schedule.parallel")
sch.unannotate(block_or_loop=b66, ann_key="meta_schedule.vectorize")
sch.unannotate(block_or_loop=b66, ann_key="meta_schedule.unroll_explicit")
b67, b68, b69 = sch.get_child_blocks(b66)
l70, l71, l72, l73, l74, l75, l76 = sch.get_loops(block=b67)
l77 = sch.fuse(l70, l71, preserve_unit_iters=True)
sch.parallel(loop=l77)
l78, l79, l80, l81, l82, l83, l84, l85, l86, l87, l88, l89, l90, l91, l92, l93, l94, l95, l96, l97, l98, l99, l100, l101, l102 = sch.get_loops(block=b68)
l103 = sch.fuse(l78, preserve_unit_iters=True)
sch.parallel(loop=l103)
l104 = sch.fuse(l102, preserve_unit_iters=True)
sch.vectorize(loop=l104)
sch.annotate(block_or_loop=l103, ann_key="pragma_auto_unroll_max_step", ann_val=512)
sch.annotate(block_or_loop=l103, ann_key="pragma_unroll_explicit", ann_val=1)
l105, l106, l107, l108, l109 = sch.get_loops(block=b69)
l110 = sch.fuse(l105, l106, l107, l108, l109, preserve_unit_iters=True)
l111, l112 = sch.split(loop=l110, factors=[None, 64], preserve_unit_iters=True)
sch.parallel(loop=l111)
sch.vectorize(loop=l112)
b113 = sch.get_block(name="conv2d_NCHWc", func_name="main")
l114, l115, l116, l117, l118, l119, l120, l121, l122, l123, l124, l125, l126, l127, l128, l129, l130, l131, l132, l133, l134, l135, l136, l137, l138 = sch.get_loops(block=b113)
b139 = sch.decompose_reduction(block=b113, loop=l123)
2024-04-29 08:54:44 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_15] Trial #190: GFLOPs: 10.8140. Time: 21385.2602 us. Best GFLOPs: 436.2706
2024-04-29 08:54:44 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_15] Trial #191: GFLOPs: 24.4210. Time: 9469.7849 us. Best GFLOPs: 436.2706
2024-04-29 10:54:39 [INFO] [evolutionary_search.cc:713] Generating candidates......
2024-04-29 10:54:40 [INFO] [evolutionary_search.cc:715] Picked top 102 candidate(s) from database
2024-04-29 10:54:44 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x12e77cf8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0xa01a998)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x136ded08)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x13b5e7e8)]: 0 failure(s)
2024-04-29 10:54:44 [INFO] [evolutionary_search.cc:723] Sampled 410 candidate(s)
2024-04-29 10:54:55 [INFO] [evolutionary_search.cc:621] Evolve iter #0 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x12e77cf8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0xa01a998)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x136ded08)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x13b5e7e8)]: 0 failure(s)
2024-04-29 10:55:05 [INFO] [evolutionary_search.cc:621] Evolve iter #1 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x12e77cf8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0xa01a998)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x136ded08)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x13b5e7e8)]: 0 failure(s)
2024-04-29 10:55:15 [INFO] [evolutionary_search.cc:621] Evolve iter #2 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x12e77cf8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0xa01a998)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x136ded08)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x13b5e7e8)]: 0 failure(s)
2024-04-29 10:55:26 [INFO] [evolutionary_search.cc:621] Evolve iter #3 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x12e77cf8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0xa01a998)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x136ded08)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x13b5e7e8)]: 0 failure(s)
2024-04-29 10:55:31 [INFO] [evolutionary_search.cc:649] Scores of the best 64 candidates:
[1 : 16]:	0.7861  0.7861  0.7861  0.7861  0.7861  0.7861  0.7861  0.7861  0.7861  0.7861  0.7861  0.7861  0.7861  0.7861  0.7861  0.7861
[17 : 32]:	0.7861  0.7861  0.7861  0.7861  0.7861  0.7861  0.7861  0.7783  0.7167  0.7167  0.7122  0.7079  0.7079  0.7079  0.7057  0.7057
[33 : 48]:	0.6982  0.6982  0.6484  0.6484  0.6484  0.6484  0.6484  0.6484  0.6422  0.6230  0.6193  0.6193  0.6056  0.5965  0.5866  0.5823
[49 : 64]:	0.5823  0.5823  0.5677  0.5654  0.5442  0.5261  0.5261  0.5261  0.5183  0.5166  0.5166  0.5159  0.5141  0.5099  0.5003  0.4959
2024-04-29 10:55:32 [INFO] [evolutionary_search.cc:727] Got 64 candidate(s) with evolutionary search
2024-04-29 10:55:32 [INFO] [evolutionary_search.cc:730] Sending 64 candidates(s) for measurement
2024-04-29 10:57:19 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_15] Trial #192: GFLOPs: 123.1642. Time: 1877.6652 us. Best GFLOPs: 436.2706
2024-04-29 10:57:19 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_15] Trial #193: GFLOPs: 420.7311. Time: 549.6651 us. Best GFLOPs: 436.2706
2024-04-29 10:57:19 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_15] Trial #194: GFLOPs: 341.2778. Time: 677.6332 us. Best GFLOPs: 436.2706
2024-04-29 10:57:19 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_15] Trial #195: GFLOPs: 190.7981. Time: 1212.0729 us. Best GFLOPs: 436.2706
2024-04-29 10:57:19 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_15] Trial #196: GFLOPs: 92.1892. Time: 2508.5485 us. Best GFLOPs: 436.2706
2024-04-29 10:57:19 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_15] Trial #197: GFLOPs: 177.4029. Time: 1303.5928 us. Best GFLOPs: 436.2706
2024-04-29 10:57:19 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_15] Trial #198: GFLOPs: 207.0512. Time: 1116.9275 us. Best GFLOPs: 436.2706
2024-04-29 10:57:19 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_15] Trial #199: GFLOPs: 130.4136. Time: 1773.2898 us. Best GFLOPs: 436.2706
2024-04-29 10:57:19 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_15] Trial #200: GFLOPs: 212.8025. Time: 1086.7407 us. Best GFLOPs: 436.2706
2024-04-29 10:57:19 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_15] Trial #201: GFLOPs: 128.1440. Time: 1804.6983 us. Best GFLOPs: 436.2706
2024-04-29 10:57:19 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_15] Trial #202: GFLOPs: 142.5457. Time: 1622.3657 us. Best GFLOPs: 436.2706
2024-04-29 10:57:19 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_15] Trial #203: GFLOPs: 239.5950. Time: 965.2172 us. Best GFLOPs: 436.2706
2024-04-29 10:57:19 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_15] Trial #204: GFLOPs: 392.5486. Time: 589.1275 us. Best GFLOPs: 436.2706
2024-04-29 10:57:19 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_15] Trial #205: GFLOPs: 95.9051. Time: 2411.3542 us. Best GFLOPs: 436.2706
2024-04-29 10:57:19 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_15] Trial #206: GFLOPs: 147.3231. Time: 1569.7547 us. Best GFLOPs: 436.2706
2024-04-29 10:57:19 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_15] Trial #207: GFLOPs: 159.0326. Time: 1454.1747 us. Best GFLOPs: 436.2706
2024-04-29 10:57:19 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_15] Trial #208: GFLOPs: 158.1787. Time: 1462.0247 us. Best GFLOPs: 436.2706
2024-04-29 10:57:19 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_15] Trial #209: GFLOPs: 95.0075. Time: 2434.1367 us. Best GFLOPs: 436.2706
2024-04-29 10:57:19 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_15] Trial #210: GFLOPs: 148.3997. Time: 1558.3669 us. Best GFLOPs: 436.2706
2024-04-29 10:57:19 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_15] Trial #211: GFLOPs: 114.5204. Time: 2019.3893 us. Best GFLOPs: 436.2706
2024-04-29 10:57:19 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_15] Trial #212: GFLOPs: 96.0348. Time: 2408.0987 us. Best GFLOPs: 436.2706
2024-04-29 10:57:19 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_15] Trial #213: GFLOPs: 125.5897. Time: 1841.4031 us. Best GFLOPs: 436.2706
2024-04-29 10:57:19 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_15] Trial #214: GFLOPs: 104.4461. Time: 2214.1672 us. Best GFLOPs: 436.2706
2024-04-29 10:57:19 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_15] Trial #215: GFLOPs: 131.8246. Time: 1754.3095 us. Best GFLOPs: 436.2706
2024-04-29 10:57:19 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_15] Trial #216: GFLOPs: 134.8487. Time: 1714.9679 us. Best GFLOPs: 436.2706
2024-04-29 10:57:19 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_15] Trial #217: GFLOPs: 136.1838. Time: 1698.1553 us. Best GFLOPs: 436.2706
2024-04-29 10:57:19 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_15] Trial #218: GFLOPs: 145.5443. Time: 1588.9400 us. Best GFLOPs: 436.2706
2024-04-29 10:57:19 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_15] Trial #219: GFLOPs: 144.4724. Time: 1600.7293 us. Best GFLOPs: 436.2706
2024-04-29 10:57:19 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_15] Trial #220: GFLOPs: 128.6547. Time: 1797.5344 us. Best GFLOPs: 436.2706
2024-04-29 10:57:19 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_15] Trial #221: GFLOPs: 118.9428. Time: 1944.3056 us. Best GFLOPs: 436.2706
2024-04-29 10:57:19 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_15] Trial #222: GFLOPs: 173.4879. Time: 1333.0102 us. Best GFLOPs: 436.2706
2024-04-29 10:57:19 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_15] Trial #223: GFLOPs: 215.0964. Time: 1075.1515 us. Best GFLOPs: 436.2706
2024-04-29 10:57:19 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_15] Trial #224: GFLOPs: 164.6263. Time: 1404.7641 us. Best GFLOPs: 436.2706
2024-04-29 10:57:19 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_15] Trial #225: GFLOPs: 316.5169. Time: 730.6440 us. Best GFLOPs: 436.2706
2024-04-29 10:57:19 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_15] Trial #226: GFLOPs: 124.8051. Time: 1852.9781 us. Best GFLOPs: 436.2706
2024-04-29 10:57:19 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_15] Trial #227: GFLOPs: 100.1120. Time: 2310.0252 us. Best GFLOPs: 436.2706
2024-04-29 10:57:19 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_15] Trial #228: GFLOPs: 127.6358. Time: 1811.8838 us. Best GFLOPs: 436.2706
2024-04-29 10:57:19 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_15] Trial #229: GFLOPs: 111.7524. Time: 2069.4061 us. Best GFLOPs: 436.2706
2024-04-29 10:57:19 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_15] Trial #230: GFLOPs: 124.7651. Time: 1853.5734 us. Best GFLOPs: 436.2706
2024-04-29 10:57:19 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_15] Trial #231: GFLOPs: 124.5773. Time: 1856.3663 us. Best GFLOPs: 436.2706
2024-04-29 10:57:19 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_15] Trial #232: GFLOPs: 172.7263. Time: 1338.8878 us. Best GFLOPs: 436.2706
2024-04-29 10:57:19 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_15] Trial #233: GFLOPs: 341.2905. Time: 677.6081 us. Best GFLOPs: 436.2706
2024-04-29 10:57:19 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_15] Trial #234: GFLOPs: 209.5356. Time: 1103.6844 us. Best GFLOPs: 436.2706
2024-04-29 10:57:19 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_15] Trial #235: GFLOPs: 187.6723. Time: 1232.2607 us. Best GFLOPs: 436.2706
2024-04-29 10:57:19 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_15] Trial #236: GFLOPs: 123.1579. Time: 1877.7614 us. Best GFLOPs: 436.2706
2024-04-29 10:57:19 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_15] Trial #237: GFLOPs: 213.0150. Time: 1085.6568 us. Best GFLOPs: 436.2706
2024-04-29 10:57:19 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_15] Trial #238: GFLOPs: 157.6269. Time: 1467.1430 us. Best GFLOPs: 436.2706
2024-04-29 10:57:19 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_15] Trial #239: GFLOPs: 129.0303. Time: 1792.3012 us. Best GFLOPs: 436.2706
2024-04-29 10:57:19 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_15] Trial #240: GFLOPs: 133.7828. Time: 1728.6321 us. Best GFLOPs: 436.2706
2024-04-29 10:57:19 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_15] Trial #241: GFLOPs: 153.4365. Time: 1507.2110 us. Best GFLOPs: 436.2706
2024-04-29 10:57:19 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_15] Trial #242: GFLOPs: 98.7507. Time: 2341.8680 us. Best GFLOPs: 436.2706
2024-04-29 10:57:19 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_15] Trial #243: GFLOPs: 138.9908. Time: 1663.8601 us. Best GFLOPs: 436.2706
2024-04-29 10:57:19 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_15] Trial #244: GFLOPs: 96.5720. Time: 2394.7031 us. Best GFLOPs: 436.2706
2024-04-29 10:57:19 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_15] Trial #245: GFLOPs: 86.2424. Time: 2681.5250 us. Best GFLOPs: 436.2706
2024-04-29 10:57:19 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_15] Trial #246: GFLOPs: 41.4667. Time: 5577.0333 us. Best GFLOPs: 436.2706
2024-04-29 10:57:19 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_15] Trial #247: GFLOPs: 76.2570. Time: 3032.6555 us. Best GFLOPs: 436.2706
2024-04-29 10:57:19 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_15] Trial #248: GFLOPs: 45.8349. Time: 5045.5276 us. Best GFLOPs: 436.2706
2024-04-29 10:57:19 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_15] Trial #249: GFLOPs: 54.0167. Time: 4281.2889 us. Best GFLOPs: 436.2706
2024-04-29 10:57:19 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_15] Trial #250: GFLOPs: 57.2088. Time: 4042.4086 us. Best GFLOPs: 436.2706
2024-04-29 10:57:19 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_15] Trial #251: GFLOPs: 121.7151. Time: 1900.0212 us. Best GFLOPs: 436.2706
2024-04-29 10:57:19 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_15] Trial #252: GFLOPs: 179.1156. Time: 1291.1282 us. Best GFLOPs: 436.2706
2024-04-29 10:57:19 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_15] Trial #253: GFLOPs: 20.1446. Time: 11480.0752 us. Best GFLOPs: 436.2706
2024-04-29 10:57:19 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_15] Trial #254: GFLOPs: 24.5092. Time: 9435.7064 us. Best GFLOPs: 436.2706
2024-04-29 10:57:19 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_15] Trial #255: GFLOPs: 5.1839. Time: 44611.7000 us. Best GFLOPs: 436.2706
2024-04-29 10:57:19 [INFO] [evolutionary_search.cc:713] Generating candidates......
2024-04-29 10:57:20 [INFO] [evolutionary_search.cc:715] Picked top 102 candidate(s) from database
2024-04-29 10:57:24 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x12e77cf8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0xa01a998)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x136ded08)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x13b5e7e8)]: 0 failure(s)
2024-04-29 10:57:24 [INFO] [evolutionary_search.cc:723] Sampled 410 candidate(s)
2024-04-29 10:57:35 [INFO] [evolutionary_search.cc:621] Evolve iter #0 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x12e77cf8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0xa01a998)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x136ded08)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x13b5e7e8)]: 0 failure(s)
2024-04-29 10:57:45 [INFO] [evolutionary_search.cc:621] Evolve iter #1 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x12e77cf8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0xa01a998)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x136ded08)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x13b5e7e8)]: 0 failure(s)
2024-04-29 10:57:54 [INFO] [evolutionary_search.cc:621] Evolve iter #2 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x12e77cf8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0xa01a998)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x136ded08)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x13b5e7e8)]: 0 failure(s)
2024-04-29 10:58:04 [INFO] [evolutionary_search.cc:621] Evolve iter #3 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x12e77cf8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0xa01a998)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x136ded08)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x13b5e7e8)]: 0 failure(s)
2024-04-29 10:58:09 [INFO] [evolutionary_search.cc:649] Scores of the best 64 candidates:
[1 : 16]:	0.5914  0.5763  0.5763  0.5501  0.5501  0.5501  0.5501  0.5432  0.5412  0.5412  0.5412  0.5412  0.5412  0.5412  0.5412  0.5412
[17 : 32]:	0.5412  0.5412  0.5412  0.5412  0.5412  0.5412  0.5412  0.5412  0.5412  0.5412  0.5412  0.5412  0.5412  0.5412  0.5412  0.5412
[33 : 48]:	0.5412  0.5412  0.5412  0.5412  0.5412  0.5412  0.5412  0.5412  0.5412  0.5412  0.5412  0.5412  0.5412  0.5412  0.5412  0.5412
[49 : 64]:	0.5412  0.5412  0.5412  0.5412  0.5412  0.5412  0.5412  0.5412  0.5412  0.5412  0.5412  0.5412  0.5412  0.5412  0.5412  0.5412
2024-04-29 10:58:10 [INFO] [evolutionary_search.cc:727] Got 64 candidate(s) with evolutionary search
2024-04-29 10:58:10 [INFO] [evolutionary_search.cc:730] Sending 64 candidates(s) for measurement
2024-04-29 11:00:03 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_15] Trial #256: GFLOPs: 77.6252. Time: 2979.2027 us. Best GFLOPs: 436.2706
2024-04-29 11:00:03 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_15] Trial #257: GFLOPs: 121.2449. Time: 1907.3895 us. Best GFLOPs: 436.2706
2024-04-29 11:00:03 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_15] Trial #258: GFLOPs: 110.0667. Time: 2101.1000 us. Best GFLOPs: 436.2706
2024-04-29 11:00:03 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_15] Trial #259: GFLOPs: 134.8116. Time: 1715.4398 us. Best GFLOPs: 436.2706
2024-04-29 11:00:03 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_15] Trial #260: GFLOPs: 202.8827. Time: 1139.8765 us. Best GFLOPs: 436.2706
2024-04-29 11:00:03 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_15] Trial #261: GFLOPs: 344.2192. Time: 671.8427 us. Best GFLOPs: 436.2706
2024-04-29 11:00:03 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_15] Trial #262: GFLOPs: 335.0438. Time: 690.2416 us. Best GFLOPs: 436.2706
2024-04-29 11:00:03 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_15] Trial #263: GFLOPs: 129.7532. Time: 1782.3162 us. Best GFLOPs: 436.2706
2024-04-29 11:00:03 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_15] Trial #264: GFLOPs: 120.3833. Time: 1921.0401 us. Best GFLOPs: 436.2706
2024-04-29 11:00:03 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_15] Trial #265: GFLOPs: 124.2370. Time: 1861.4522 us. Best GFLOPs: 436.2706
2024-04-29 11:00:03 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_15] Trial #266: GFLOPs: 345.9782. Time: 668.4271 us. Best GFLOPs: 436.2706
2024-04-29 11:00:03 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_15] Trial #267: GFLOPs: 125.6826. Time: 1840.0413 us. Best GFLOPs: 436.2706
2024-04-29 11:00:03 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_15] Trial #268: GFLOPs: 171.9967. Time: 1344.5679 us. Best GFLOPs: 436.2706
2024-04-29 11:00:03 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_15] Trial #269: GFLOPs: 151.6144. Time: 1525.3250 us. Best GFLOPs: 436.2706
2024-04-29 11:00:03 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_15] Trial #270: GFLOPs: 193.8250. Time: 1193.1445 us. Best GFLOPs: 436.2706
2024-04-29 11:00:03 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_15] Trial #271: GFLOPs: 215.8893. Time: 1071.2025 us. Best GFLOPs: 436.2706
2024-04-29 11:00:03 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_15] Trial #272: GFLOPs: 80.4652. Time: 2874.0536 us. Best GFLOPs: 436.2706
2024-04-29 11:00:03 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_15] Trial #273: GFLOPs: 121.6496. Time: 1901.0438 us. Best GFLOPs: 436.2706
2024-04-29 11:00:03 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_15] Trial #274: GFLOPs: 142.4357. Time: 1623.6185 us. Best GFLOPs: 436.2706
2024-04-29 11:00:03 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_15] Trial #275: GFLOPs: 398.5632. Time: 580.2371 us. Best GFLOPs: 436.2706
2024-04-29 11:00:03 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_15] Trial #276: GFLOPs: 180.1245. Time: 1283.8965 us. Best GFLOPs: 436.2706
2024-04-29 11:00:03 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_15] Trial #277: GFLOPs: 141.4341. Time: 1635.1158 us. Best GFLOPs: 436.2706
2024-04-29 11:00:03 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_15] Trial #278: GFLOPs: 230.6635. Time: 1002.5910 us. Best GFLOPs: 436.2706
2024-04-29 11:00:03 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_15] Trial #279: GFLOPs: 211.9690. Time: 1091.0141 us. Best GFLOPs: 436.2706
2024-04-29 11:00:03 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_15] Trial #280: GFLOPs: 211.7637. Time: 1092.0720 us. Best GFLOPs: 436.2706
2024-04-29 11:00:03 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_15] Trial #281: GFLOPs: 169.9389. Time: 1360.8490 us. Best GFLOPs: 436.2706
2024-04-29 11:00:03 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_15] Trial #282: GFLOPs: 142.1670. Time: 1626.6866 us. Best GFLOPs: 436.2706
2024-04-29 11:00:03 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_15] Trial #283: GFLOPs: 128.9793. Time: 1793.0107 us. Best GFLOPs: 436.2706
2024-04-29 11:00:03 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_15] Trial #284: GFLOPs: 124.3346. Time: 1859.9899 us. Best GFLOPs: 436.2706
2024-04-29 11:00:03 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_15] Trial #285: GFLOPs: 160.6808. Time: 1439.2581 us. Best GFLOPs: 436.2706
2024-04-29 11:00:03 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_15] Trial #286: GFLOPs: 102.2519. Time: 2261.6803 us. Best GFLOPs: 436.2706
2024-04-29 11:00:03 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_15] Trial #287: GFLOPs: 203.7015. Time: 1135.2943 us. Best GFLOPs: 436.2706
2024-04-29 11:00:03 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_15] Trial #288: GFLOPs: 441.6207. Time: 523.6647 us. Best GFLOPs: 441.6207
2024-04-29 11:00:03 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_15] Trial #289: GFLOPs: 116.1750. Time: 1990.6281 us. Best GFLOPs: 441.6207
2024-04-29 11:00:03 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_15] Trial #290: GFLOPs: 157.7799. Time: 1465.7199 us. Best GFLOPs: 441.6207
2024-04-29 11:00:03 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_15] Trial #291: GFLOPs: 81.3379. Time: 2843.2172 us. Best GFLOPs: 441.6207
2024-04-29 11:00:03 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_15] Trial #292: GFLOPs: 341.2245. Time: 677.7392 us. Best GFLOPs: 441.6207
2024-04-29 11:00:03 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_15] Trial #293: GFLOPs: 144.7607. Time: 1597.5411 us. Best GFLOPs: 441.6207
2024-04-29 11:00:03 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_15] Trial #294: GFLOPs: 126.7749. Time: 1824.1879 us. Best GFLOPs: 441.6207
2024-04-29 11:00:03 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_15] Trial #295: GFLOPs: 126.3020. Time: 1831.0181 us. Best GFLOPs: 441.6207
2024-04-29 11:00:03 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_15] Trial #296: GFLOPs: 147.9202. Time: 1563.4190 us. Best GFLOPs: 441.6207
2024-04-29 11:00:03 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_15] Trial #297: GFLOPs: 111.6076. Time: 2072.0909 us. Best GFLOPs: 441.6207
2024-04-29 11:00:03 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_15] Trial #298: GFLOPs: 123.3163. Time: 1875.3495 us. Best GFLOPs: 441.6207
2024-04-29 11:00:03 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_15] Trial #299: GFLOPs: 109.4872. Time: 2112.2205 us. Best GFLOPs: 441.6207
2024-04-29 11:00:03 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_15] Trial #300: GFLOPs: 97.2560. Time: 2377.8613 us. Best GFLOPs: 441.6207
2024-04-29 11:00:03 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_15] Trial #301: GFLOPs: 120.0661. Time: 1926.1161 us. Best GFLOPs: 441.6207
2024-04-29 11:00:03 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_15] Trial #302: GFLOPs: 116.5414. Time: 1984.3686 us. Best GFLOPs: 441.6207
2024-04-29 11:00:03 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_15] Trial #303: GFLOPs: 98.6467. Time: 2344.3379 us. Best GFLOPs: 441.6207
2024-04-29 11:00:03 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_15] Trial #304: GFLOPs: 117.2205. Time: 1972.8737 us. Best GFLOPs: 441.6207
2024-04-29 11:00:03 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_15] Trial #305: GFLOPs: 151.3662. Time: 1527.8261 us. Best GFLOPs: 441.6207
2024-04-29 11:00:03 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_15] Trial #306: GFLOPs: 221.5177. Time: 1043.9850 us. Best GFLOPs: 441.6207
2024-04-29 11:00:03 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_15] Trial #307: GFLOPs: 136.8872. Time: 1689.4287 us. Best GFLOPs: 441.6207
2024-04-29 11:00:03 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_15] Trial #308: GFLOPs: 118.8885. Time: 1945.1933 us. Best GFLOPs: 441.6207
2024-04-29 11:00:03 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_15] Trial #309: GFLOPs: 121.8924. Time: 1897.2565 us. Best GFLOPs: 441.6207
2024-04-29 11:00:03 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_15] Trial #310: GFLOPs: 138.7261. Time: 1667.0338 us. Best GFLOPs: 441.6207
2024-04-29 11:00:03 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_15] Trial #311: GFLOPs: 132.2986. Time: 1748.0251 us. Best GFLOPs: 441.6207
2024-04-29 11:00:03 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_15] Trial #312: GFLOPs: 113.0994. Time: 2044.7598 us. Best GFLOPs: 441.6207
2024-04-29 11:00:03 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_15] Trial #313: GFLOPs: 124.4700. Time: 1857.9678 us. Best GFLOPs: 441.6207
2024-04-29 11:00:03 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_15] Trial #314: GFLOPs: 212.6433. Time: 1087.5546 us. Best GFLOPs: 441.6207
2024-04-29 11:00:03 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_15] Trial #315: GFLOPs: 121.2799. Time: 1906.8391 us. Best GFLOPs: 441.6207
2024-04-29 11:00:03 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_15] Trial #316: GFLOPs: 223.2238. Time: 1036.0058 us. Best GFLOPs: 441.6207
2024-04-29 11:00:03 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_15] Trial #317: GFLOPs: 4.3363. Time: 53331.8337 us. Best GFLOPs: 441.6207
2024-04-29 11:00:03 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_15] Trial #318: GFLOPs: 1.8090. Time: 127839.8530 us. Best GFLOPs: 441.6207
2024-04-29 11:00:03 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_15] Trial #319: GFLOPs: 34.9330. Time: 6620.1331 us. Best GFLOPs: 441.6207
2024-04-29 11:00:04 [INFO] [evolutionary_search.cc:713] Generating candidates......
2024-04-29 11:00:05 [INFO] [evolutionary_search.cc:715] Picked top 102 candidate(s) from database
2024-04-29 11:00:09 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x12e77cf8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0xa01a998)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x136ded08)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x13b5e7e8)]: 0 failure(s)
2024-04-29 11:00:09 [INFO] [evolutionary_search.cc:723] Sampled 410 candidate(s)
2024-04-29 11:00:19 [INFO] [evolutionary_search.cc:621] Evolve iter #0 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x12e77cf8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0xa01a998)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x136ded08)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x13b5e7e8)]: 0 failure(s)
2024-04-29 11:00:29 [INFO] [evolutionary_search.cc:621] Evolve iter #1 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x12e77cf8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0xa01a998)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x136ded08)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x13b5e7e8)]: 0 failure(s)
2024-04-29 11:00:39 [INFO] [evolutionary_search.cc:621] Evolve iter #2 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x12e77cf8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0xa01a998)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x136ded08)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x13b5e7e8)]: 0 failure(s)
2024-04-29 11:00:48 [INFO] [evolutionary_search.cc:621] Evolve iter #3 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x12e77cf8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0xa01a998)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x136ded08)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x13b5e7e8)]: 0 failure(s)
2024-04-29 11:00:54 [INFO] [evolutionary_search.cc:649] Scores of the best 64 candidates:
[1 : 16]:	0.5299  0.5299  0.5290  0.5037  0.4996  0.4959  0.4929  0.4929  0.4929  0.4929  0.4802  0.4793  0.4793  0.4793  0.4793  0.4793
[17 : 32]:	0.4793  0.4793  0.4793  0.4793  0.4793  0.4793  0.4793  0.4793  0.4793  0.4793  0.4793  0.4793  0.4793  0.4793  0.4793  0.4793
[33 : 48]:	0.4793  0.4793  0.4793  0.4793  0.4793  0.4793  0.4793  0.4793  0.4793  0.4793  0.4793  0.4793  0.4793  0.4793  0.4793  0.4793
[49 : 64]:	0.4793  0.4793  0.4793  0.4793  0.4793  0.4793  0.4744  0.4668  0.4654  0.4654  0.4654  0.4654  0.4654  0.4654  0.4606  0.4588
2024-04-29 11:00:54 [INFO] [evolutionary_search.cc:727] Got 64 candidate(s) with evolutionary search
2024-04-29 11:00:54 [INFO] [evolutionary_search.cc:730] Sending 64 candidates(s) for measurement
2024-04-29 11:02:37 [INFO] [task_scheduler.cc:121] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_15] Trial #320: Error in building:
LocalBuilder: Timeout, killed after 30.0 seconds
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(1), T.int64(7), T.int64(7), T.int64(512)), "float32"), p1: T.Buffer((T.int64(16), T.int64(1), T.int64(3), T.int64(3), T.int64(512), T.int64(32)), "float32"), p2: T.Buffer((T.int64(1), T.int64(16), T.int64(1), T.int64(1), T.int64(32)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(16), T.int64(7), T.int64(7), T.int64(32)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        data_pad = T.alloc_buffer((T.int64(1), T.int64(1), T.int64(9), T.int64(9), T.int64(512)))
        conv2d_NCHWc = T.alloc_buffer((T.int64(1), T.int64(16), T.int64(7), T.int64(7), T.int64(32)))
        for i0_i1_i2_i3_i4_fused in T.parallel(T.int64(41472)):
            with T.block("data_pad"):
                v_i0 = T.axis.spatial(T.int64(1), T.int64(0))
                v_i1 = T.axis.spatial(T.int64(1), T.int64(0))
                v_i2 = T.axis.spatial(T.int64(9), i0_i1_i2_i3_i4_fused // T.int64(4608))
                v_i3 = T.axis.spatial(T.int64(9), i0_i1_i2_i3_i4_fused % T.int64(4608) // T.int64(512))
                v_i4 = T.axis.spatial(T.int64(512), i0_i1_i2_i3_i4_fused % T.int64(512))
                T.reads(p0[v_i0, v_i1, v_i2 - T.int64(1), v_i3 - T.int64(1), v_i4])
                T.writes(data_pad[v_i0, v_i1, v_i2, v_i3, v_i4])
                data_pad[v_i0, v_i1, v_i2, v_i3, v_i4] = T.if_then_else(T.int64(1) <= v_i2 and v_i2 < T.int64(8) and T.int64(1) <= v_i3 and v_i3 < T.int64(8), p0[v_i0, v_i1, v_i2 - T.int64(1), v_i3 - T.int64(1), v_i4], T.float32(0))
        for n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_fused in T.parallel(T.int64(112), annotations={"pragma_auto_unroll_max_step": 512, "pragma_unroll_explicit": 1}):
            for oh_1, ow_1, oc_block_1 in T.grid(T.int64(1), T.int64(1), T.int64(2)):
                for n_2_init, oc_chunk_2_init, oh_2_init, ow_2_init, oc_block_2_init, n_3_init, oc_chunk_3_init, oh_3_init, ow_3_init in T.grid(T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(1), T.int64(1), T.int64(1), T.int64(7)):
                    for oc_block_3_fused_init in T.vectorized(T.int64(8)):
                        with T.block("conv2d_NCHWc_init"):
                            v_n = T.axis.spatial(T.int64(1), n_2_init + n_3_init)
                            v_oc_chunk = T.axis.spatial(T.int64(16), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_fused % T.int64(16) + oc_chunk_2_init + oc_chunk_3_init)
                            v_oh = T.axis.spatial(T.int64(7), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_fused // T.int64(16) + oh_1 + oh_2_init + oh_3_init)
                            v_ow = T.axis.spatial(T.int64(7), ow_1 * T.int64(7) + ow_2_init * T.int64(7) + ow_3_init)
                            v_oc_block = T.axis.spatial(T.int64(32), oc_block_1 * T.int64(16) + oc_block_2_init * T.int64(8) + oc_block_3_fused_init)
                            T.reads()
                            T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                            T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                            conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = T.float32(0)
                for ic_0, kh_0, kw_0, n_2, oc_chunk_2, oh_2, ow_2, oc_block_2, ic_1, kh_1, kw_1, n_3, oc_chunk_3, oh_3, ow_3 in T.grid(T.int64(16), T.int64(3), T.int64(3), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(32), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(7)):
                    for oc_block_3_fused in T.vectorized(T.int64(8)):
                        with T.block("conv2d_NCHWc_update"):
                            v_n = T.axis.spatial(T.int64(1), n_2 + n_3)
                            v_oc_chunk = T.axis.spatial(T.int64(16), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_fused % T.int64(16) + oc_chunk_2 + oc_chunk_3)
                            v_oh = T.axis.spatial(T.int64(7), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_fused // T.int64(16) + oh_1 + oh_2 + oh_3)
                            v_ow = T.axis.spatial(T.int64(7), ow_1 * T.int64(7) + ow_2 * T.int64(7) + ow_3)
                            v_oc_block = T.axis.spatial(T.int64(32), oc_block_1 * T.int64(16) + oc_block_2 * T.int64(8) + oc_block_3_fused)
                            v_ic = T.axis.reduce(T.int64(512), ic_0 * T.int64(32) + ic_1)
                            v_kh = T.axis.reduce(T.int64(3), kh_0 + kh_1)
                            v_kw = T.axis.reduce(T.int64(3), kw_0 + kw_1)
                            T.reads(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block], data_pad[v_n, v_ic // T.int64(512), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(512)], p1[v_oc_chunk, v_ic // T.int64(512), v_kh, v_kw, v_ic % T.int64(512), v_oc_block])
                            T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                            T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                            conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] + data_pad[v_n, v_ic // T.int64(512), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(512)] * p1[v_oc_chunk, v_ic // T.int64(512), v_kh, v_kw, v_ic % T.int64(512), v_oc_block]
        for ax0_ax1_ax2_ax3_ax4_fused_0 in T.parallel(T.int64(392)):
            for ax0_ax1_ax2_ax3_ax4_fused_1 in T.vectorized(T.int64(64)):
                with T.block("T_relu"):
                    v_ax0 = T.axis.spatial(T.int64(1), T.int64(0))
                    v_ax1 = T.axis.spatial(T.int64(16), (ax0_ax1_ax2_ax3_ax4_fused_0 * T.int64(64) + ax0_ax1_ax2_ax3_ax4_fused_1) // T.int64(1568))
                    v_ax2 = T.axis.spatial(T.int64(7), (ax0_ax1_ax2_ax3_ax4_fused_0 * T.int64(64) + ax0_ax1_ax2_ax3_ax4_fused_1) % T.int64(1568) // T.int64(224))
                    v_ax3 = T.axis.spatial(T.int64(7), (ax0_ax1_ax2_ax3_ax4_fused_0 * T.int64(64) + ax0_ax1_ax2_ax3_ax4_fused_1) % T.int64(224) // T.int64(32))
                    v_ax4 = T.axis.spatial(T.int64(32), (ax0_ax1_ax2_ax3_ax4_fused_0 * T.int64(64) + ax0_ax1_ax2_ax3_ax4_fused_1) % T.int64(32))
                    T.reads(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4])
                    T.writes(T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                    T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.max(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] + p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4], T.float32(0))
b0 = sch.get_block(name="data_pad", func_name="main")
b1 = sch.get_block(name="conv2d_NCHWc", func_name="main")
b2 = sch.get_block(name="T_add", func_name="main")
b3 = sch.get_block(name="root", func_name="main")
sch.compute_inline(block=b2)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSRSRS")
l4, l5, l6, l7, l8, l9, l10, l11 = sch.get_loops(block=b1)
v12, v13, v14, v15 = sch.sample_perfect_tile(loop=l4, n=4, max_innermost_factor=64, decision=[1, 1, 1, 1])
l16, l17, l18, l19 = sch.split(loop=l4, factors=[v12, v13, v14, v15], preserve_unit_iters=True)
v20, v21, v22, v23 = sch.sample_perfect_tile(loop=l5, n=4, max_innermost_factor=64, decision=[1, 16, 1, 1])
l24, l25, l26, l27 = sch.split(loop=l5, factors=[v20, v21, v22, v23], preserve_unit_iters=True)
v28, v29, v30, v31 = sch.sample_perfect_tile(loop=l6, n=4, max_innermost_factor=64, decision=[7, 1, 1, 1])
l32, l33, l34, l35 = sch.split(loop=l6, factors=[v28, v29, v30, v31], preserve_unit_iters=True)
v36, v37, v38, v39 = sch.sample_perfect_tile(loop=l7, n=4, max_innermost_factor=64, decision=[1, 1, 1, 7])
l40, l41, l42, l43 = sch.split(loop=l7, factors=[v36, v37, v38, v39], preserve_unit_iters=True)
v44, v45, v46, v47 = sch.sample_perfect_tile(loop=l8, n=4, max_innermost_factor=64, decision=[1, 2, 2, 8])
l48, l49, l50, l51 = sch.split(loop=l8, factors=[v44, v45, v46, v47], preserve_unit_iters=True)
v52, v53 = sch.sample_perfect_tile(loop=l9, n=2, max_innermost_factor=64, decision=[16, 32])
l54, l55 = sch.split(loop=l9, factors=[v52, v53], preserve_unit_iters=True)
v56, v57 = sch.sample_perfect_tile(loop=l10, n=2, max_innermost_factor=64, decision=[3, 1])
l58, l59 = sch.split(loop=l10, factors=[v56, v57], preserve_unit_iters=True)
v60, v61 = sch.sample_perfect_tile(loop=l11, n=2, max_innermost_factor=64, decision=[3, 1])
l62, l63 = sch.split(loop=l11, factors=[v60, v61], preserve_unit_iters=True)
sch.reorder(l16, l24, l32, l40, l48, l17, l25, l33, l41, l49, l54, l58, l62, l18, l26, l34, l42, l50, l55, l59, l63, l19, l27, l35, l43, l51)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.parallel", ann_val=81)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.vectorize", ann_val=64)
v64 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.unroll_explicit", ann_val=v64)
l65 = sch.sample_compute_location(block=b0, decision=-1)
sch.compute_at(block=b0, loop=l65, preserve_unit_loops=True, index=-1)
sch.enter_postproc()
b66 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b66, ann_key="meta_schedule.parallel")
sch.unannotate(block_or_loop=b66, ann_key="meta_schedule.vectorize")
sch.unannotate(block_or_loop=b66, ann_key="meta_schedule.unroll_explicit")
b67, b68, b69 = sch.get_child_blocks(b66)
l70, l71, l72, l73, l74 = sch.get_loops(block=b67)
l75 = sch.fuse(l70, l71, l72, l73, l74, preserve_unit_iters=True)
sch.parallel(loop=l75)
l76, l77, l78, l79, l80, l81, l82, l83, l84, l85, l86, l87, l88, l89, l90, l91, l92, l93, l94, l95, l96, l97, l98, l99, l100, l101 = sch.get_loops(block=b68)
l102 = sch.fuse(l76, l77, l78, l79, l80, l81, l82, preserve_unit_iters=True)
sch.parallel(loop=l102)
l103 = sch.fuse(l101, preserve_unit_iters=True)
sch.vectorize(loop=l103)
sch.annotate(block_or_loop=l102, ann_key="pragma_auto_unroll_max_step", ann_val=512)
sch.annotate(block_or_loop=l102, ann_key="pragma_unroll_explicit", ann_val=1)
l104, l105, l106, l107, l108 = sch.get_loops(block=b69)
l109 = sch.fuse(l104, l105, l106, l107, l108, preserve_unit_iters=True)
l110, l111 = sch.split(loop=l109, factors=[None, 64], preserve_unit_iters=True)
sch.parallel(loop=l110)
sch.vectorize(loop=l111)
b112 = sch.get_block(name="conv2d_NCHWc", func_name="main")
l113, l114, l115, l116, l117, l118, l119, l120, l121, l122, l123, l124, l125, l126, l127, l128, l129, l130, l131, l132 = sch.get_loops(block=b112)
b133 = sch.decompose_reduction(block=b112, loop=l117)
2024-04-29 11:02:37 [INFO] [task_scheduler.cc:121] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_15] Trial #321: Error in building:
LocalBuilder: Timeout, killed after 30.0 seconds
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(1), T.int64(7), T.int64(7), T.int64(512)), "float32"), p1: T.Buffer((T.int64(16), T.int64(1), T.int64(3), T.int64(3), T.int64(512), T.int64(32)), "float32"), p2: T.Buffer((T.int64(1), T.int64(16), T.int64(1), T.int64(1), T.int64(32)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(16), T.int64(7), T.int64(7), T.int64(32)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        data_pad = T.alloc_buffer((T.int64(1), T.int64(1), T.int64(9), T.int64(9), T.int64(512)))
        conv2d_NCHWc = T.alloc_buffer((T.int64(1), T.int64(16), T.int64(7), T.int64(7), T.int64(32)))
        for i0_i1_i2_i3_i4_fused in T.parallel(T.int64(41472)):
            with T.block("data_pad"):
                v_i0 = T.axis.spatial(T.int64(1), T.int64(0))
                v_i1 = T.axis.spatial(T.int64(1), T.int64(0))
                v_i2 = T.axis.spatial(T.int64(9), i0_i1_i2_i3_i4_fused // T.int64(4608))
                v_i3 = T.axis.spatial(T.int64(9), i0_i1_i2_i3_i4_fused % T.int64(4608) // T.int64(512))
                v_i4 = T.axis.spatial(T.int64(512), i0_i1_i2_i3_i4_fused % T.int64(512))
                T.reads(p0[v_i0, v_i1, v_i2 - T.int64(1), v_i3 - T.int64(1), v_i4])
                T.writes(data_pad[v_i0, v_i1, v_i2, v_i3, v_i4])
                data_pad[v_i0, v_i1, v_i2, v_i3, v_i4] = T.if_then_else(T.int64(1) <= v_i2 and v_i2 < T.int64(8) and T.int64(1) <= v_i3 and v_i3 < T.int64(8), p0[v_i0, v_i1, v_i2 - T.int64(1), v_i3 - T.int64(1), v_i4], T.float32(0))
        for n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_fused in T.parallel(T.int64(112), annotations={"pragma_auto_unroll_max_step": 512, "pragma_unroll_explicit": 1}):
            for ow_1, oc_block_1 in T.grid(T.int64(1), T.int64(2)):
                for n_2_init, oc_chunk_2_init, oh_2_init, ow_2_init, oc_block_2_init, n_3_init, oc_chunk_3_init, oh_3_init, ow_3_init in T.grid(T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(1), T.int64(1), T.int64(1), T.int64(7)):
                    for oc_block_3_fused_init in T.vectorized(T.int64(8)):
                        with T.block("conv2d_NCHWc_init"):
                            v_n = T.axis.spatial(T.int64(1), n_2_init + n_3_init)
                            v_oc_chunk = T.axis.spatial(T.int64(16), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_fused // T.int64(7) + oc_chunk_2_init + oc_chunk_3_init)
                            v_oh = T.axis.spatial(T.int64(7), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_fused % T.int64(7) + oh_2_init + oh_3_init)
                            v_ow = T.axis.spatial(T.int64(7), ow_1 * T.int64(7) + ow_2_init * T.int64(7) + ow_3_init)
                            v_oc_block = T.axis.spatial(T.int64(32), oc_block_1 * T.int64(16) + oc_block_2_init * T.int64(8) + oc_block_3_fused_init)
                            T.reads()
                            T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                            T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                            conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = T.float32(0)
                for ic_0, kh_0, kw_0, n_2, oc_chunk_2, oh_2, ow_2, oc_block_2, ic_1, kh_1, kw_1, n_3, oc_chunk_3, oh_3, ow_3 in T.grid(T.int64(16), T.int64(3), T.int64(3), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(32), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(7)):
                    for oc_block_3_fused in T.vectorized(T.int64(8)):
                        with T.block("conv2d_NCHWc_update"):
                            v_n = T.axis.spatial(T.int64(1), n_2 + n_3)
                            v_oc_chunk = T.axis.spatial(T.int64(16), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_fused // T.int64(7) + oc_chunk_2 + oc_chunk_3)
                            v_oh = T.axis.spatial(T.int64(7), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_fused % T.int64(7) + oh_2 + oh_3)
                            v_ow = T.axis.spatial(T.int64(7), ow_1 * T.int64(7) + ow_2 * T.int64(7) + ow_3)
                            v_oc_block = T.axis.spatial(T.int64(32), oc_block_1 * T.int64(16) + oc_block_2 * T.int64(8) + oc_block_3_fused)
                            v_ic = T.axis.reduce(T.int64(512), ic_0 * T.int64(32) + ic_1)
                            v_kh = T.axis.reduce(T.int64(3), kh_0 + kh_1)
                            v_kw = T.axis.reduce(T.int64(3), kw_0 + kw_1)
                            T.reads(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block], data_pad[v_n, v_ic // T.int64(512), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(512)], p1[v_oc_chunk, v_ic // T.int64(512), v_kh, v_kw, v_ic % T.int64(512), v_oc_block])
                            T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                            T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                            conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] + data_pad[v_n, v_ic // T.int64(512), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(512)] * p1[v_oc_chunk, v_ic // T.int64(512), v_kh, v_kw, v_ic % T.int64(512), v_oc_block]
        for ax0_ax1_ax2_ax3_ax4_fused_0 in T.parallel(T.int64(392)):
            for ax0_ax1_ax2_ax3_ax4_fused_1 in T.vectorized(T.int64(64)):
                with T.block("T_relu"):
                    v_ax0 = T.axis.spatial(T.int64(1), T.int64(0))
                    v_ax1 = T.axis.spatial(T.int64(16), (ax0_ax1_ax2_ax3_ax4_fused_0 * T.int64(64) + ax0_ax1_ax2_ax3_ax4_fused_1) // T.int64(1568))
                    v_ax2 = T.axis.spatial(T.int64(7), (ax0_ax1_ax2_ax3_ax4_fused_0 * T.int64(64) + ax0_ax1_ax2_ax3_ax4_fused_1) % T.int64(1568) // T.int64(224))
                    v_ax3 = T.axis.spatial(T.int64(7), (ax0_ax1_ax2_ax3_ax4_fused_0 * T.int64(64) + ax0_ax1_ax2_ax3_ax4_fused_1) % T.int64(224) // T.int64(32))
                    v_ax4 = T.axis.spatial(T.int64(32), (ax0_ax1_ax2_ax3_ax4_fused_0 * T.int64(64) + ax0_ax1_ax2_ax3_ax4_fused_1) % T.int64(32))
                    T.reads(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4])
                    T.writes(T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                    T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.max(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] + p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4], T.float32(0))
b0 = sch.get_block(name="data_pad", func_name="main")
b1 = sch.get_block(name="conv2d_NCHWc", func_name="main")
b2 = sch.get_block(name="T_add", func_name="main")
b3 = sch.get_block(name="root", func_name="main")
sch.compute_inline(block=b2)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSRSRS")
l4, l5, l6, l7, l8, l9, l10, l11 = sch.get_loops(block=b1)
v12, v13, v14, v15 = sch.sample_perfect_tile(loop=l4, n=4, max_innermost_factor=64, decision=[1, 1, 1, 1])
l16, l17, l18, l19 = sch.split(loop=l4, factors=[v12, v13, v14, v15], preserve_unit_iters=True)
v20, v21, v22, v23 = sch.sample_perfect_tile(loop=l5, n=4, max_innermost_factor=64, decision=[1, 16, 1, 1])
l24, l25, l26, l27 = sch.split(loop=l5, factors=[v20, v21, v22, v23], preserve_unit_iters=True)
v28, v29, v30, v31 = sch.sample_perfect_tile(loop=l6, n=4, max_innermost_factor=64, decision=[1, 7, 1, 1])
l32, l33, l34, l35 = sch.split(loop=l6, factors=[v28, v29, v30, v31], preserve_unit_iters=True)
v36, v37, v38, v39 = sch.sample_perfect_tile(loop=l7, n=4, max_innermost_factor=64, decision=[1, 1, 1, 7])
l40, l41, l42, l43 = sch.split(loop=l7, factors=[v36, v37, v38, v39], preserve_unit_iters=True)
v44, v45, v46, v47 = sch.sample_perfect_tile(loop=l8, n=4, max_innermost_factor=64, decision=[1, 2, 2, 8])
l48, l49, l50, l51 = sch.split(loop=l8, factors=[v44, v45, v46, v47], preserve_unit_iters=True)
v52, v53 = sch.sample_perfect_tile(loop=l9, n=2, max_innermost_factor=64, decision=[16, 32])
l54, l55 = sch.split(loop=l9, factors=[v52, v53], preserve_unit_iters=True)
v56, v57 = sch.sample_perfect_tile(loop=l10, n=2, max_innermost_factor=64, decision=[3, 1])
l58, l59 = sch.split(loop=l10, factors=[v56, v57], preserve_unit_iters=True)
v60, v61 = sch.sample_perfect_tile(loop=l11, n=2, max_innermost_factor=64, decision=[3, 1])
l62, l63 = sch.split(loop=l11, factors=[v60, v61], preserve_unit_iters=True)
sch.reorder(l16, l24, l32, l40, l48, l17, l25, l33, l41, l49, l54, l58, l62, l18, l26, l34, l42, l50, l55, l59, l63, l19, l27, l35, l43, l51)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.parallel", ann_val=81)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.vectorize", ann_val=64)
v64 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.unroll_explicit", ann_val=v64)
l65 = sch.sample_compute_location(block=b0, decision=-1)
sch.compute_at(block=b0, loop=l65, preserve_unit_loops=True, index=-1)
sch.enter_postproc()
b66 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b66, ann_key="meta_schedule.parallel")
sch.unannotate(block_or_loop=b66, ann_key="meta_schedule.vectorize")
sch.unannotate(block_or_loop=b66, ann_key="meta_schedule.unroll_explicit")
b67, b68, b69 = sch.get_child_blocks(b66)
l70, l71, l72, l73, l74 = sch.get_loops(block=b67)
l75 = sch.fuse(l70, l71, l72, l73, l74, preserve_unit_iters=True)
sch.parallel(loop=l75)
l76, l77, l78, l79, l80, l81, l82, l83, l84, l85, l86, l87, l88, l89, l90, l91, l92, l93, l94, l95, l96, l97, l98, l99, l100, l101 = sch.get_loops(block=b68)
l102 = sch.fuse(l76, l77, l78, l79, l80, l81, l82, l83, preserve_unit_iters=True)
sch.parallel(loop=l102)
l103 = sch.fuse(l101, preserve_unit_iters=True)
sch.vectorize(loop=l103)
sch.annotate(block_or_loop=l102, ann_key="pragma_auto_unroll_max_step", ann_val=512)
sch.annotate(block_or_loop=l102, ann_key="pragma_unroll_explicit", ann_val=1)
l104, l105, l106, l107, l108 = sch.get_loops(block=b69)
l109 = sch.fuse(l104, l105, l106, l107, l108, preserve_unit_iters=True)
l110, l111 = sch.split(loop=l109, factors=[None, 64], preserve_unit_iters=True)
sch.parallel(loop=l110)
sch.vectorize(loop=l111)
b112 = sch.get_block(name="conv2d_NCHWc", func_name="main")
l113, l114, l115, l116, l117, l118, l119, l120, l121, l122, l123, l124, l125, l126, l127, l128, l129, l130, l131 = sch.get_loops(block=b112)
b132 = sch.decompose_reduction(block=b112, loop=l116)
2024-04-29 11:02:37 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_15] Trial #322: GFLOPs: 344.6581. Time: 670.9872 us. Best GFLOPs: 441.6207
2024-04-29 11:02:37 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_15] Trial #323: GFLOPs: 167.0950. Time: 1384.0106 us. Best GFLOPs: 441.6207
2024-04-29 11:02:37 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_15] Trial #324: GFLOPs: 552.4158. Time: 418.6361 us. Best GFLOPs: 552.4158
2024-04-29 11:02:37 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_15] Trial #325: GFLOPs: 592.9996. Time: 389.9854 us. Best GFLOPs: 592.9996
2024-04-29 11:02:37 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_15] Trial #326: GFLOPs: 163.2658. Time: 1416.4707 us. Best GFLOPs: 592.9996
2024-04-29 11:02:37 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_15] Trial #327: GFLOPs: 232.8487. Time: 993.1821 us. Best GFLOPs: 592.9996
2024-04-29 11:02:37 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_15] Trial #328: GFLOPs: 232.8591. Time: 993.1378 us. Best GFLOPs: 592.9996
2024-04-29 11:02:37 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_15] Trial #329: GFLOPs: 230.2532. Time: 1004.3779 us. Best GFLOPs: 592.9996
2024-04-29 11:02:37 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_15] Trial #330: GFLOPs: 141.2353. Time: 1637.4172 us. Best GFLOPs: 592.9996
2024-04-29 11:02:37 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_15] Trial #331: GFLOPs: 99.5160. Time: 2323.8605 us. Best GFLOPs: 592.9996
2024-04-29 11:02:37 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_15] Trial #332: GFLOPs: 112.0347. Time: 2064.1929 us. Best GFLOPs: 592.9996
2024-04-29 11:02:37 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_15] Trial #333: GFLOPs: 126.8321. Time: 1823.3643 us. Best GFLOPs: 592.9996
2024-04-29 11:02:37 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_15] Trial #334: GFLOPs: 172.3681. Time: 1341.6705 us. Best GFLOPs: 592.9996
2024-04-29 11:02:37 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_15] Trial #335: GFLOPs: 198.0012. Time: 1167.9786 us. Best GFLOPs: 592.9996
2024-04-29 11:02:37 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_15] Trial #336: GFLOPs: 105.2539. Time: 2197.1738 us. Best GFLOPs: 592.9996
2024-04-29 11:02:37 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_15] Trial #337: GFLOPs: 136.0192. Time: 1700.2095 us. Best GFLOPs: 592.9996
2024-04-29 11:02:37 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_15] Trial #338: GFLOPs: 123.0542. Time: 1879.3440 us. Best GFLOPs: 592.9996
2024-04-29 11:02:37 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_15] Trial #339: GFLOPs: 137.5064. Time: 1681.8219 us. Best GFLOPs: 592.9996
2024-04-29 11:02:37 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_15] Trial #340: GFLOPs: 161.6784. Time: 1430.3775 us. Best GFLOPs: 592.9996
2024-04-29 11:02:37 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_15] Trial #341: GFLOPs: 82.2274. Time: 2812.4603 us. Best GFLOPs: 592.9996
2024-04-29 11:02:37 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_15] Trial #342: GFLOPs: 136.4226. Time: 1695.1826 us. Best GFLOPs: 592.9996
2024-04-29 11:02:37 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_15] Trial #343: GFLOPs: 206.4066. Time: 1120.4158 us. Best GFLOPs: 592.9996
2024-04-29 11:02:37 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_15] Trial #344: GFLOPs: 159.5798. Time: 1449.1882 us. Best GFLOPs: 592.9996
2024-04-29 11:02:37 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_15] Trial #345: GFLOPs: 139.9092. Time: 1652.9371 us. Best GFLOPs: 592.9996
2024-04-29 11:02:37 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_15] Trial #346: GFLOPs: 78.0351. Time: 2963.5515 us. Best GFLOPs: 592.9996
2024-04-29 11:02:37 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_15] Trial #347: GFLOPs: 107.6188. Time: 2148.8926 us. Best GFLOPs: 592.9996
2024-04-29 11:02:37 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_15] Trial #348: GFLOPs: 433.1044. Time: 533.9617 us. Best GFLOPs: 592.9996
2024-04-29 11:02:37 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_15] Trial #349: GFLOPs: 203.6044. Time: 1135.8356 us. Best GFLOPs: 592.9996
2024-04-29 11:02:37 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_15] Trial #350: GFLOPs: 115.1052. Time: 2009.1288 us. Best GFLOPs: 592.9996
2024-04-29 11:02:37 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_15] Trial #351: GFLOPs: 96.6263. Time: 2393.3563 us. Best GFLOPs: 592.9996
2024-04-29 11:02:37 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_15] Trial #352: GFLOPs: 159.8277. Time: 1446.9410 us. Best GFLOPs: 592.9996
2024-04-29 11:02:37 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_15] Trial #353: GFLOPs: 140.3604. Time: 1647.6236 us. Best GFLOPs: 592.9996
2024-04-29 11:02:37 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_15] Trial #354: GFLOPs: 340.5009. Time: 679.1794 us. Best GFLOPs: 592.9996
2024-04-29 11:02:37 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_15] Trial #355: GFLOPs: 204.4454. Time: 1131.1637 us. Best GFLOPs: 592.9996
2024-04-29 11:02:37 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_15] Trial #356: GFLOPs: 151.3247. Time: 1528.2449 us. Best GFLOPs: 592.9996
2024-04-29 11:02:37 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_15] Trial #357: GFLOPs: 98.5723. Time: 2346.1068 us. Best GFLOPs: 592.9996
2024-04-29 11:02:37 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_15] Trial #358: GFLOPs: 421.5532. Time: 548.5932 us. Best GFLOPs: 592.9996
2024-04-29 11:02:37 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_15] Trial #359: GFLOPs: 118.5171. Time: 1951.2889 us. Best GFLOPs: 592.9996
2024-04-29 11:02:37 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_15] Trial #360: GFLOPs: 124.5829. Time: 1856.2838 us. Best GFLOPs: 592.9996
2024-04-29 11:02:37 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_15] Trial #361: GFLOPs: 206.1771. Time: 1121.6629 us. Best GFLOPs: 592.9996
2024-04-29 11:02:37 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_15] Trial #362: GFLOPs: 42.3762. Time: 5457.3345 us. Best GFLOPs: 592.9996
2024-04-29 11:02:37 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_15] Trial #363: GFLOPs: 159.4454. Time: 1450.4095 us. Best GFLOPs: 592.9996
2024-04-29 11:02:37 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_15] Trial #364: GFLOPs: 108.4743. Time: 2131.9440 us. Best GFLOPs: 592.9996
2024-04-29 11:02:37 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_15] Trial #365: GFLOPs: 142.0884. Time: 1627.5871 us. Best GFLOPs: 592.9996
2024-04-29 11:02:37 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_15] Trial #366: GFLOPs: 97.7245. Time: 2366.4595 us. Best GFLOPs: 592.9996
2024-04-29 11:02:37 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_15] Trial #367: GFLOPs: 207.8841. Time: 1112.4525 us. Best GFLOPs: 592.9996
2024-04-29 11:02:37 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_15] Trial #368: GFLOPs: 126.2040. Time: 1832.4393 us. Best GFLOPs: 592.9996
2024-04-29 11:02:37 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_15] Trial #369: GFLOPs: 101.8750. Time: 2270.0493 us. Best GFLOPs: 592.9996
2024-04-29 11:02:37 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_15] Trial #370: GFLOPs: 124.7174. Time: 1854.2822 us. Best GFLOPs: 592.9996
2024-04-29 11:02:37 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_15] Trial #371: GFLOPs: 126.8773. Time: 1822.7145 us. Best GFLOPs: 592.9996
2024-04-29 11:02:37 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_15] Trial #372: GFLOPs: 121.3146. Time: 1906.2925 us. Best GFLOPs: 592.9996
2024-04-29 11:02:37 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_15] Trial #373: GFLOPs: 85.3137. Time: 2710.7152 us. Best GFLOPs: 592.9996
2024-04-29 11:02:37 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_15] Trial #374: GFLOPs: 184.1160. Time: 1256.0622 us. Best GFLOPs: 592.9996
2024-04-29 11:02:37 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_15] Trial #375: GFLOPs: 306.0716. Time: 755.5787 us. Best GFLOPs: 592.9996
2024-04-29 11:02:37 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_15] Trial #376: GFLOPs: 203.7894. Time: 1134.8047 us. Best GFLOPs: 592.9996
2024-04-29 11:02:37 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_15] Trial #377: GFLOPs: 191.9632. Time: 1204.7161 us. Best GFLOPs: 592.9996
2024-04-29 11:02:37 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_15] Trial #378: GFLOPs: 160.5249. Time: 1440.6560 us. Best GFLOPs: 592.9996
2024-04-29 11:02:37 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_15] Trial #379: GFLOPs: 89.9470. Time: 2571.0817 us. Best GFLOPs: 592.9996
2024-04-29 11:02:37 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_15] Trial #380: GFLOPs: 169.7011. Time: 1362.7562 us. Best GFLOPs: 592.9996
2024-04-29 11:02:37 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_15] Trial #381: GFLOPs: 26.4749. Time: 8735.1263 us. Best GFLOPs: 592.9996
2024-04-29 11:02:37 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_15] Trial #382: GFLOPs: 10.7619. Time: 21488.8340 us. Best GFLOPs: 592.9996
2024-04-29 11:02:37 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_15] Trial #383: GFLOPs: 9.0038. Time: 25684.8732 us. Best GFLOPs: 592.9996
