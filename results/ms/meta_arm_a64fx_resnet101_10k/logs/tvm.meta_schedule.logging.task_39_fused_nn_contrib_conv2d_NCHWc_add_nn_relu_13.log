2024-04-29 07:27:21 [INFO] [task_scheduler.cc:160] Initializing Task #39: "fused_nn_contrib_conv2d_NCHWc_add_nn_relu_13"
2024-04-29 07:27:21 [INFO] [task_scheduler.cc:35] 
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(128), T.int64(14), T.int64(14), T.int64(4)), "float32"), p1: T.Buffer((T.int64(128), T.int64(128), T.int64(3), T.int64(3), T.int64(4), T.int64(4)), "float32"), p2: T.Buffer((T.int64(1), T.int64(128), T.int64(1), T.int64(1), T.int64(4)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(128), T.int64(7), T.int64(7), T.int64(4)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        data_pad = T.alloc_buffer((T.int64(1), T.int64(128), T.int64(16), T.int64(16), T.int64(4)))
        conv2d_NCHWc = T.alloc_buffer((T.int64(1), T.int64(128), T.int64(7), T.int64(7), T.int64(4)))
        T_add = T.alloc_buffer((T.int64(1), T.int64(128), T.int64(7), T.int64(7), T.int64(4)))
        for i0, i1, i2, i3, i4 in T.grid(T.int64(1), T.int64(128), T.int64(16), T.int64(16), T.int64(4)):
            with T.block("data_pad"):
                v_i0, v_i1, v_i2, v_i3, v_i4 = T.axis.remap("SSSSS", [i0, i1, i2, i3, i4])
                T.reads(p0[v_i0, v_i1, v_i2 - T.int64(1), v_i3 - T.int64(1), v_i4])
                T.writes(data_pad[v_i0, v_i1, v_i2, v_i3, v_i4])
                data_pad[v_i0, v_i1, v_i2, v_i3, v_i4] = T.if_then_else(T.int64(1) <= v_i2 and v_i2 < T.int64(15) and T.int64(1) <= v_i3 and v_i3 < T.int64(15), p0[v_i0, v_i1, v_i2 - T.int64(1), v_i3 - T.int64(1), v_i4], T.float32(0))
        for n, oc_chunk, oh, ow, oc_block, ic, kh, kw in T.grid(T.int64(1), T.int64(128), T.int64(7), T.int64(7), T.int64(4), T.int64(512), T.int64(3), T.int64(3)):
            with T.block("conv2d_NCHWc"):
                v_n, v_oc_chunk, v_oh, v_ow, v_oc_block, v_ic, v_kh, v_kw = T.axis.remap("SSSSSRRR", [n, oc_chunk, oh, ow, oc_block, ic, kh, kw])
                T.reads(data_pad[v_n, v_ic // T.int64(4), v_oh * T.int64(2) + v_kh, v_ow * T.int64(2) + v_kw, v_ic % T.int64(4)], p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block])
                T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                with T.init():
                    conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = T.float32(0)
                conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] + data_pad[v_n, v_ic // T.int64(4), v_oh * T.int64(2) + v_kh, v_ow * T.int64(2) + v_kw, v_ic % T.int64(4)] * p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block]
        for ax0, ax1, ax2, ax3, ax4 in T.grid(T.int64(1), T.int64(128), T.int64(7), T.int64(7), T.int64(4)):
            with T.block("T_add"):
                v_ax0, v_ax1, v_ax2, v_ax3, v_ax4 = T.axis.remap("SSSSS", [ax0, ax1, ax2, ax3, ax4])
                T.reads(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4])
                T.writes(T_add[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                T_add[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] + p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4]
        for ax0, ax1, ax2, ax3, ax4 in T.grid(T.int64(1), T.int64(128), T.int64(7), T.int64(7), T.int64(4)):
            with T.block("T_relu"):
                v_ax0, v_ax1, v_ax2, v_ax3, v_ax4 = T.axis.remap("SSSSS", [ax0, ax1, ax2, ax3, ax4])
                T.reads(T_add[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                T.writes(T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.max(T_add[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], T.float32(0))
2024-04-29 07:27:21 [INFO] [task_scheduler.cc:164] Total 3 design space(s) generated
2024-04-29 07:27:21 [INFO] [task_scheduler.cc:170] Design space #0:
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(128), T.int64(14), T.int64(14), T.int64(4)), "float32"), p1: T.Buffer((T.int64(128), T.int64(128), T.int64(3), T.int64(3), T.int64(4), T.int64(4)), "float32"), p2: T.Buffer((T.int64(1), T.int64(128), T.int64(1), T.int64(1), T.int64(4)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(128), T.int64(7), T.int64(7), T.int64(4)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        with T.block("root"):
            T.reads()
            T.writes()
            T.block_attr({"meta_schedule.parallel": 768, "meta_schedule.unroll_explicit": 512, "meta_schedule.vectorize": 64})
            data_pad = T.alloc_buffer((T.int64(1), T.int64(128), T.int64(16), T.int64(16), T.int64(4)))
            conv2d_NCHWc = T.alloc_buffer((T.int64(1), T.int64(128), T.int64(7), T.int64(7), T.int64(4)))
            for n_0, oc_chunk_0 in T.grid(T.int64(1), T.int64(2)):
                for ax0, ax1, ax2, ax3, ax4 in T.grid(T.int64(1), T.int64(128), T.int64(15), T.int64(15), T.int64(4)):
                    with T.block("data_pad"):
                        v_i0, v_i1 = T.axis.remap("SS", [ax0, ax1])
                        v_i2 = T.axis.spatial(T.int64(16), ax2)
                        v_i3 = T.axis.spatial(T.int64(16), ax3)
                        v_i4 = T.axis.spatial(T.int64(4), ax4)
                        T.reads(p0[v_i0, v_i1, v_i2 - T.int64(1), v_i3 - T.int64(1), v_i4])
                        T.writes(data_pad[v_i0, v_i1, v_i2, v_i3, v_i4])
                        data_pad[v_i0, v_i1, v_i2, v_i3, v_i4] = T.if_then_else(T.int64(1) <= v_i2 and v_i2 < T.int64(15) and T.int64(1) <= v_i3 and v_i3 < T.int64(15), p0[v_i0, v_i1, v_i2 - T.int64(1), v_i3 - T.int64(1), v_i4], T.float32(0))
                for oh_0, ow_0, oc_block_0, n_1, oc_chunk_1, oh_1, ow_1, oc_block_1, ic_0, kh_0, kw_0, n_2, oc_chunk_2, oh_2, ow_2, oc_block_2, ic_1, kh_1, kw_1, n_3, oc_chunk_3, oh_3, ow_3, oc_block_3 in T.grid(T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(4), T.int64(1), T.int64(7), T.int64(1), T.int64(16), T.int64(1), T.int64(1), T.int64(1), T.int64(16), T.int64(1), T.int64(1), T.int64(1), T.int64(32), T.int64(3), T.int64(3), T.int64(1), T.int64(1), T.int64(7), T.int64(1), T.int64(4)):
                    with T.block("conv2d_NCHWc"):
                        v_n = T.axis.spatial(T.int64(1), n_0 + n_1 + n_2 + n_3)
                        v_oc_chunk = T.axis.spatial(T.int64(128), oc_chunk_0 * T.int64(64) + oc_chunk_1 * T.int64(16) + oc_chunk_2 + oc_chunk_3)
                        v_oh = T.axis.spatial(T.int64(7), oh_0 * T.int64(7) + oh_1 * T.int64(7) + oh_2 * T.int64(7) + oh_3)
                        v_ow = T.axis.spatial(T.int64(7), ow_0 * T.int64(7) + ow_1 + ow_2 + ow_3)
                        v_oc_block = T.axis.spatial(T.int64(4), oc_block_0 * T.int64(4) + oc_block_1 * T.int64(4) + oc_block_2 * T.int64(4) + oc_block_3)
                        v_ic = T.axis.reduce(T.int64(512), ic_0 * T.int64(32) + ic_1)
                        v_kh = T.axis.reduce(T.int64(3), kh_0 * T.int64(3) + kh_1)
                        v_kw = T.axis.reduce(T.int64(3), kw_0 * T.int64(3) + kw_1)
                        T.reads(data_pad[v_n, v_ic // T.int64(4), v_oh * T.int64(2) + v_kh, v_ow * T.int64(2) + v_kw, v_ic % T.int64(4)], p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block])
                        T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                        T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                        with T.init():
                            conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = T.float32(0)
                        conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] + data_pad[v_n, v_ic // T.int64(4), v_oh * T.int64(2) + v_kh, v_ow * T.int64(2) + v_kw, v_ic % T.int64(4)] * p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block]
            for ax0, ax1, ax2, ax3, ax4 in T.grid(T.int64(1), T.int64(128), T.int64(7), T.int64(7), T.int64(4)):
                with T.block("T_relu"):
                    v_ax0, v_ax1, v_ax2, v_ax3, v_ax4 = T.axis.remap("SSSSS", [ax0, ax1, ax2, ax3, ax4])
                    T.reads(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4])
                    T.writes(T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                    T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.max(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] + p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4], T.float32(0))
b0 = sch.get_block(name="data_pad", func_name="main")
b1 = sch.get_block(name="conv2d_NCHWc", func_name="main")
b2 = sch.get_block(name="T_add", func_name="main")
b3 = sch.get_block(name="root", func_name="main")
sch.compute_inline(block=b2)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSRSRS")
l4, l5, l6, l7, l8, l9, l10, l11 = sch.get_loops(block=b1)
v12, v13, v14, v15 = sch.sample_perfect_tile(loop=l4, n=4, max_innermost_factor=64, decision=[1, 1, 1, 1])
l16, l17, l18, l19 = sch.split(loop=l4, factors=[v12, v13, v14, v15], preserve_unit_iters=True)
v20, v21, v22, v23 = sch.sample_perfect_tile(loop=l5, n=4, max_innermost_factor=64, decision=[2, 4, 16, 1])
l24, l25, l26, l27 = sch.split(loop=l5, factors=[v20, v21, v22, v23], preserve_unit_iters=True)
v28, v29, v30, v31 = sch.sample_perfect_tile(loop=l6, n=4, max_innermost_factor=64, decision=[1, 1, 1, 7])
l32, l33, l34, l35 = sch.split(loop=l6, factors=[v28, v29, v30, v31], preserve_unit_iters=True)
v36, v37, v38, v39 = sch.sample_perfect_tile(loop=l7, n=4, max_innermost_factor=64, decision=[1, 7, 1, 1])
l40, l41, l42, l43 = sch.split(loop=l7, factors=[v36, v37, v38, v39], preserve_unit_iters=True)
v44, v45, v46, v47 = sch.sample_perfect_tile(loop=l8, n=4, max_innermost_factor=64, decision=[1, 1, 1, 4])
l48, l49, l50, l51 = sch.split(loop=l8, factors=[v44, v45, v46, v47], preserve_unit_iters=True)
v52, v53 = sch.sample_perfect_tile(loop=l9, n=2, max_innermost_factor=64, decision=[16, 32])
l54, l55 = sch.split(loop=l9, factors=[v52, v53], preserve_unit_iters=True)
v56, v57 = sch.sample_perfect_tile(loop=l10, n=2, max_innermost_factor=64, decision=[1, 3])
l58, l59 = sch.split(loop=l10, factors=[v56, v57], preserve_unit_iters=True)
v60, v61 = sch.sample_perfect_tile(loop=l11, n=2, max_innermost_factor=64, decision=[1, 3])
l62, l63 = sch.split(loop=l11, factors=[v60, v61], preserve_unit_iters=True)
sch.reorder(l16, l24, l32, l40, l48, l17, l25, l33, l41, l49, l54, l58, l62, l18, l26, l34, l42, l50, l55, l59, l63, l19, l27, l35, l43, l51)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.vectorize", ann_val=64)
v64 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.unroll_explicit", ann_val=v64)
l65 = sch.sample_compute_location(block=b0, decision=1)
sch.compute_at(block=b0, loop=l65, preserve_unit_loops=True, index=-1)
2024-04-29 07:27:21 [INFO] [task_scheduler.cc:170] Design space #1:
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(128), T.int64(14), T.int64(14), T.int64(4)), "float32"), p1: T.Buffer((T.int64(128), T.int64(128), T.int64(3), T.int64(3), T.int64(4), T.int64(4)), "float32"), p2: T.Buffer((T.int64(1), T.int64(128), T.int64(1), T.int64(1), T.int64(4)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(128), T.int64(7), T.int64(7), T.int64(4)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        with T.block("root"):
            T.reads()
            T.writes()
            T.block_attr({"meta_schedule.parallel": 768, "meta_schedule.unroll_explicit": 16, "meta_schedule.vectorize": 64})
            data_pad = T.alloc_buffer((T.int64(1), T.int64(128), T.int64(16), T.int64(16), T.int64(4)))
            conv2d_NCHWc = T.alloc_buffer((T.int64(1), T.int64(128), T.int64(7), T.int64(7), T.int64(4)))
            for n_0, oc_chunk_0, oh_0, ow_0, oc_block_0, n_1, oc_chunk_1, oh_1, ow_1, oc_block_1 in T.grid(T.int64(1), T.int64(2), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(4), T.int64(1), T.int64(7), T.int64(1)):
                for ic_0 in range(T.int64(16)):
                    for ax0, ax1, ax2, ax3, ax4 in T.grid(T.int64(1), T.int64(8), T.int64(15), T.int64(3), T.int64(4)):
                        with T.block("data_pad"):
                            v_i0 = T.axis.spatial(T.int64(1), ax0)
                            v_i1 = T.axis.spatial(T.int64(128), ic_0 * T.int64(8) + ax1)
                            v_i2 = T.axis.spatial(T.int64(16), ax2)
                            v_i3 = T.axis.spatial(T.int64(16), ow_1 * T.int64(2) + ax3)
                            v_i4 = T.axis.spatial(T.int64(4), ax4)
                            T.reads(p0[v_i0, v_i1, v_i2 - T.int64(1), v_i3 - T.int64(1), v_i4])
                            T.writes(data_pad[v_i0, v_i1, v_i2, v_i3, v_i4])
                            data_pad[v_i0, v_i1, v_i2, v_i3, v_i4] = T.if_then_else(T.int64(1) <= v_i2 and v_i2 < T.int64(15) and T.int64(1) <= v_i3 and v_i3 < T.int64(15), p0[v_i0, v_i1, v_i2 - T.int64(1), v_i3 - T.int64(1), v_i4], T.float32(0))
                    for kh_0, kw_0, n_2, oc_chunk_2, oh_2, ow_2, oc_block_2, ic_1, kh_1, kw_1, n_3, oc_chunk_3, oh_3, ow_3, oc_block_3 in T.grid(T.int64(1), T.int64(1), T.int64(1), T.int64(16), T.int64(1), T.int64(1), T.int64(1), T.int64(32), T.int64(3), T.int64(3), T.int64(1), T.int64(1), T.int64(7), T.int64(1), T.int64(4)):
                        with T.block("conv2d_NCHWc"):
                            v_n = T.axis.spatial(T.int64(1), n_0 + n_1 + n_2 + n_3)
                            v_oc_chunk = T.axis.spatial(T.int64(128), oc_chunk_0 * T.int64(64) + oc_chunk_1 * T.int64(16) + oc_chunk_2 + oc_chunk_3)
                            v_oh = T.axis.spatial(T.int64(7), oh_0 * T.int64(7) + oh_1 * T.int64(7) + oh_2 * T.int64(7) + oh_3)
                            v_ow = T.axis.spatial(T.int64(7), ow_0 * T.int64(7) + ow_1 + ow_2 + ow_3)
                            v_oc_block = T.axis.spatial(T.int64(4), oc_block_0 * T.int64(4) + oc_block_1 * T.int64(4) + oc_block_2 * T.int64(4) + oc_block_3)
                            v_ic = T.axis.reduce(T.int64(512), ic_0 * T.int64(32) + ic_1)
                            v_kh = T.axis.reduce(T.int64(3), kh_0 * T.int64(3) + kh_1)
                            v_kw = T.axis.reduce(T.int64(3), kw_0 * T.int64(3) + kw_1)
                            T.reads(data_pad[v_n, v_ic // T.int64(4), v_oh * T.int64(2) + v_kh, v_ow * T.int64(2) + v_kw, v_ic % T.int64(4)], p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block])
                            T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                            T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                            with T.init():
                                conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = T.float32(0)
                            conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] + data_pad[v_n, v_ic // T.int64(4), v_oh * T.int64(2) + v_kh, v_ow * T.int64(2) + v_kw, v_ic % T.int64(4)] * p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block]
                for ax0, ax1, ax2, ax3, ax4 in T.grid(T.int64(1), T.int64(16), T.int64(7), T.int64(1), T.int64(4)):
                    with T.block("T_relu"):
                        v_ax0 = T.axis.spatial(T.int64(1), ax0)
                        v_ax1 = T.axis.spatial(T.int64(128), oc_chunk_0 * T.int64(64) + oc_chunk_1 * T.int64(16) + ax1)
                        v_ax2 = T.axis.spatial(T.int64(7), ax2)
                        v_ax3 = T.axis.spatial(T.int64(7), ow_1 + ax3)
                        v_ax4 = T.axis.spatial(T.int64(4), ax4)
                        T.reads(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4])
                        T.writes(T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                        T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.max(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] + p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4], T.float32(0))
b0 = sch.get_block(name="data_pad", func_name="main")
b1 = sch.get_block(name="conv2d_NCHWc", func_name="main")
b2 = sch.get_block(name="T_add", func_name="main")
b3 = sch.get_block(name="root", func_name="main")
sch.compute_inline(block=b2)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSRSRS")
l4, l5, l6, l7, l8, l9, l10, l11 = sch.get_loops(block=b1)
v12, v13, v14, v15 = sch.sample_perfect_tile(loop=l4, n=4, max_innermost_factor=64, decision=[1, 1, 1, 1])
l16, l17, l18, l19 = sch.split(loop=l4, factors=[v12, v13, v14, v15], preserve_unit_iters=True)
v20, v21, v22, v23 = sch.sample_perfect_tile(loop=l5, n=4, max_innermost_factor=64, decision=[2, 4, 16, 1])
l24, l25, l26, l27 = sch.split(loop=l5, factors=[v20, v21, v22, v23], preserve_unit_iters=True)
v28, v29, v30, v31 = sch.sample_perfect_tile(loop=l6, n=4, max_innermost_factor=64, decision=[1, 1, 1, 7])
l32, l33, l34, l35 = sch.split(loop=l6, factors=[v28, v29, v30, v31], preserve_unit_iters=True)
v36, v37, v38, v39 = sch.sample_perfect_tile(loop=l7, n=4, max_innermost_factor=64, decision=[1, 7, 1, 1])
l40, l41, l42, l43 = sch.split(loop=l7, factors=[v36, v37, v38, v39], preserve_unit_iters=True)
v44, v45, v46, v47 = sch.sample_perfect_tile(loop=l8, n=4, max_innermost_factor=64, decision=[1, 1, 1, 4])
l48, l49, l50, l51 = sch.split(loop=l8, factors=[v44, v45, v46, v47], preserve_unit_iters=True)
v52, v53 = sch.sample_perfect_tile(loop=l9, n=2, max_innermost_factor=64, decision=[16, 32])
l54, l55 = sch.split(loop=l9, factors=[v52, v53], preserve_unit_iters=True)
v56, v57 = sch.sample_perfect_tile(loop=l10, n=2, max_innermost_factor=64, decision=[1, 3])
l58, l59 = sch.split(loop=l10, factors=[v56, v57], preserve_unit_iters=True)
v60, v61 = sch.sample_perfect_tile(loop=l11, n=2, max_innermost_factor=64, decision=[1, 3])
l62, l63 = sch.split(loop=l11, factors=[v60, v61], preserve_unit_iters=True)
sch.reorder(l16, l24, l32, l40, l48, l17, l25, l33, l41, l49, l54, l58, l62, l18, l26, l34, l42, l50, l55, l59, l63, l19, l27, l35, l43, l51)
b64, = sch.get_consumers(block=b1)
sch.reverse_compute_at(block=b64, loop=l49, preserve_unit_loops=True, index=-1)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.vectorize", ann_val=64)
v65 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=1)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.unroll_explicit", ann_val=v65)
l66 = sch.sample_compute_location(block=b0, decision=10)
sch.compute_at(block=b0, loop=l66, preserve_unit_loops=True, index=-1)
2024-04-29 07:27:21 [INFO] [task_scheduler.cc:170] Design space #2:
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(128), T.int64(14), T.int64(14), T.int64(4)), "float32"), p1: T.Buffer((T.int64(128), T.int64(128), T.int64(3), T.int64(3), T.int64(4), T.int64(4)), "float32"), p2: T.Buffer((T.int64(1), T.int64(128), T.int64(1), T.int64(1), T.int64(4)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(128), T.int64(7), T.int64(7), T.int64(4)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        with T.block("root"):
            T.reads()
            T.writes()
            T.block_attr({"meta_schedule.parallel": 768, "meta_schedule.unroll_explicit": 0, "meta_schedule.vectorize": 64})
            data_pad = T.alloc_buffer((T.int64(1), T.int64(128), T.int64(16), T.int64(16), T.int64(4)))
            conv2d_NCHWc = T.alloc_buffer((T.int64(1), T.int64(128), T.int64(7), T.int64(7), T.int64(4)))
            for n_0, oc_chunk_0, oh_0, ow_0, oc_block_0 in T.grid(T.int64(1), T.int64(2), T.int64(1), T.int64(1), T.int64(1)):
                for n_1, oc_chunk_1, oh_1, ow_1 in T.grid(T.int64(1), T.int64(4), T.int64(1), T.int64(7)):
                    for ax0, ax1, ax2, ax3, ax4 in T.grid(T.int64(1), T.int64(128), T.int64(15), T.int64(3), T.int64(4)):
                        with T.block("data_pad"):
                            v_i0, v_i1 = T.axis.remap("SS", [ax0, ax1])
                            v_i2 = T.axis.spatial(T.int64(16), ax2)
                            v_i3 = T.axis.spatial(T.int64(16), ow_1 * T.int64(2) + ax3)
                            v_i4 = T.axis.spatial(T.int64(4), ax4)
                            T.reads(p0[v_i0, v_i1, v_i2 - T.int64(1), v_i3 - T.int64(1), v_i4])
                            T.writes(data_pad[v_i0, v_i1, v_i2, v_i3, v_i4])
                            data_pad[v_i0, v_i1, v_i2, v_i3, v_i4] = T.if_then_else(T.int64(1) <= v_i2 and v_i2 < T.int64(15) and T.int64(1) <= v_i3 and v_i3 < T.int64(15), p0[v_i0, v_i1, v_i2 - T.int64(1), v_i3 - T.int64(1), v_i4], T.float32(0))
                    for oc_block_1, ic_0, kh_0, kw_0, n_2, oc_chunk_2, oh_2, ow_2, oc_block_2, ic_1, kh_1, kw_1, n_3, oc_chunk_3, oh_3, ow_3, oc_block_3 in T.grid(T.int64(1), T.int64(16), T.int64(1), T.int64(1), T.int64(1), T.int64(16), T.int64(1), T.int64(1), T.int64(1), T.int64(32), T.int64(3), T.int64(3), T.int64(1), T.int64(1), T.int64(7), T.int64(1), T.int64(4)):
                        with T.block("conv2d_NCHWc"):
                            v_n = T.axis.spatial(T.int64(1), n_0 + n_1 + n_2 + n_3)
                            v_oc_chunk = T.axis.spatial(T.int64(128), oc_chunk_0 * T.int64(64) + oc_chunk_1 * T.int64(16) + oc_chunk_2 + oc_chunk_3)
                            v_oh = T.axis.spatial(T.int64(7), oh_0 * T.int64(7) + oh_1 * T.int64(7) + oh_2 * T.int64(7) + oh_3)
                            v_ow = T.axis.spatial(T.int64(7), ow_0 * T.int64(7) + ow_1 + ow_2 + ow_3)
                            v_oc_block = T.axis.spatial(T.int64(4), oc_block_0 * T.int64(4) + oc_block_1 * T.int64(4) + oc_block_2 * T.int64(4) + oc_block_3)
                            v_ic = T.axis.reduce(T.int64(512), ic_0 * T.int64(32) + ic_1)
                            v_kh = T.axis.reduce(T.int64(3), kh_0 * T.int64(3) + kh_1)
                            v_kw = T.axis.reduce(T.int64(3), kw_0 * T.int64(3) + kw_1)
                            T.reads(data_pad[v_n, v_ic // T.int64(4), v_oh * T.int64(2) + v_kh, v_ow * T.int64(2) + v_kw, v_ic % T.int64(4)], p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block])
                            T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                            T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                            with T.init():
                                conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = T.float32(0)
                            conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] + data_pad[v_n, v_ic // T.int64(4), v_oh * T.int64(2) + v_kh, v_ow * T.int64(2) + v_kw, v_ic % T.int64(4)] * p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block]
                for ax0, ax1, ax2, ax3, ax4 in T.grid(T.int64(1), T.int64(64), T.int64(7), T.int64(7), T.int64(4)):
                    with T.block("T_relu"):
                        v_ax0 = T.axis.spatial(T.int64(1), ax0)
                        v_ax1 = T.axis.spatial(T.int64(128), oc_chunk_0 * T.int64(64) + ax1)
                        v_ax2, v_ax3, v_ax4 = T.axis.remap("SSS", [ax2, ax3, ax4])
                        T.reads(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4])
                        T.writes(T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                        T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.max(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] + p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4], T.float32(0))
b0 = sch.get_block(name="data_pad", func_name="main")
b1 = sch.get_block(name="conv2d_NCHWc", func_name="main")
b2 = sch.get_block(name="T_add", func_name="main")
b3 = sch.get_block(name="root", func_name="main")
sch.compute_inline(block=b2)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSRSRS")
l4, l5, l6, l7, l8, l9, l10, l11 = sch.get_loops(block=b1)
v12, v13, v14, v15 = sch.sample_perfect_tile(loop=l4, n=4, max_innermost_factor=64, decision=[1, 1, 1, 1])
l16, l17, l18, l19 = sch.split(loop=l4, factors=[v12, v13, v14, v15], preserve_unit_iters=True)
v20, v21, v22, v23 = sch.sample_perfect_tile(loop=l5, n=4, max_innermost_factor=64, decision=[2, 4, 16, 1])
l24, l25, l26, l27 = sch.split(loop=l5, factors=[v20, v21, v22, v23], preserve_unit_iters=True)
v28, v29, v30, v31 = sch.sample_perfect_tile(loop=l6, n=4, max_innermost_factor=64, decision=[1, 1, 1, 7])
l32, l33, l34, l35 = sch.split(loop=l6, factors=[v28, v29, v30, v31], preserve_unit_iters=True)
v36, v37, v38, v39 = sch.sample_perfect_tile(loop=l7, n=4, max_innermost_factor=64, decision=[1, 7, 1, 1])
l40, l41, l42, l43 = sch.split(loop=l7, factors=[v36, v37, v38, v39], preserve_unit_iters=True)
v44, v45, v46, v47 = sch.sample_perfect_tile(loop=l8, n=4, max_innermost_factor=64, decision=[1, 1, 1, 4])
l48, l49, l50, l51 = sch.split(loop=l8, factors=[v44, v45, v46, v47], preserve_unit_iters=True)
v52, v53 = sch.sample_perfect_tile(loop=l9, n=2, max_innermost_factor=64, decision=[16, 32])
l54, l55 = sch.split(loop=l9, factors=[v52, v53], preserve_unit_iters=True)
v56, v57 = sch.sample_perfect_tile(loop=l10, n=2, max_innermost_factor=64, decision=[1, 3])
l58, l59 = sch.split(loop=l10, factors=[v56, v57], preserve_unit_iters=True)
v60, v61 = sch.sample_perfect_tile(loop=l11, n=2, max_innermost_factor=64, decision=[1, 3])
l62, l63 = sch.split(loop=l11, factors=[v60, v61], preserve_unit_iters=True)
sch.reorder(l16, l24, l32, l40, l48, l17, l25, l33, l41, l49, l54, l58, l62, l18, l26, l34, l42, l50, l55, l59, l63, l19, l27, l35, l43, l51)
b64, = sch.get_consumers(block=b1)
sch.reverse_compute_at(block=b64, loop=l48, preserve_unit_loops=True, index=-1)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.vectorize", ann_val=64)
v65 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=0)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.unroll_explicit", ann_val=v65)
l66 = sch.sample_compute_location(block=b0, decision=8)
sch.compute_at(block=b0, loop=l66, preserve_unit_loops=True, index=-1)
2024-04-29 08:06:42 [INFO] [evolutionary_search.cc:713] Generating candidates......
2024-04-29 08:06:42 [INFO] [evolutionary_search.cc:715] Picked top 0 candidate(s) from database
2024-04-29 08:06:47 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x150ff738)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x17e88b48)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x17171638)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x136d3258)]: 0 failure(s)
2024-04-29 08:06:47 [INFO] [evolutionary_search.cc:723] Sampled 512 candidate(s)
2024-04-29 08:06:52 [INFO] [evolutionary_search.cc:621] Evolve iter #0 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x150ff738)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x17e88b48)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x17171638)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x136d3258)]: 0 failure(s)
2024-04-29 08:06:58 [INFO] [evolutionary_search.cc:621] Evolve iter #1 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x150ff738)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x17e88b48)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x17171638)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x136d3258)]: 0 failure(s)
2024-04-29 08:07:03 [INFO] [evolutionary_search.cc:621] Evolve iter #2 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x150ff738)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x17e88b48)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x17171638)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x136d3258)]: 0 failure(s)
2024-04-29 08:07:09 [INFO] [evolutionary_search.cc:621] Evolve iter #3 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x150ff738)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x17e88b48)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x17171638)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x136d3258)]: 0 failure(s)
2024-04-29 08:07:10 [INFO] [evolutionary_search.cc:649] Scores of the best 64 candidates:
[1 : 16]:	1.0000  0.9990  0.9989  0.9986  0.9985  0.9982  0.9972  0.9970  0.9961  0.9953  0.9931  0.9931  0.9928  0.9919  0.9919  0.9916
[17 : 32]:	0.9914  0.9901  0.9901  0.9900  0.9899  0.9898  0.9887  0.9881  0.9879  0.9877  0.9874  0.9874  0.9873  0.9868  0.9863  0.9860
[33 : 48]:	0.9859  0.9855  0.9852  0.9851  0.9850  0.9841  0.9839  0.9830  0.9816  0.9813  0.9809  0.9808  0.9806  0.9803  0.9790  0.9781
[49 : 64]:	0.9780  0.9776  0.9769  0.9764  0.9757  0.9750  0.9749  0.9745  0.9740  0.9722  0.9716  0.9708  0.9704  0.9702  0.9702  0.9700
2024-04-29 08:07:10 [INFO] [evolutionary_search.cc:727] Got 64 candidate(s) with evolutionary search
2024-04-29 08:07:10 [INFO] [evolutionary_search.cc:730] Sending 63 candidates(s) for measurement
2024-04-29 08:22:01 [INFO] [task_scheduler.cc:131] [Task #39: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_13] Trial #1: GFLOPs: 0.7464. Time: 309851.2270 us. Best GFLOPs: 0.7464
2024-04-29 08:22:01 [INFO] [task_scheduler.cc:131] [Task #39: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_13] Trial #2: GFLOPs: 0.4133. Time: 559596.1263 us. Best GFLOPs: 0.7464
2024-04-29 08:22:01 [INFO] [task_scheduler.cc:131] [Task #39: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_13] Trial #3: GFLOPs: 3.5826. Time: 64552.0473 us. Best GFLOPs: 3.5826
2024-04-29 08:22:01 [INFO] [task_scheduler.cc:131] [Task #39: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_13] Trial #4: GFLOPs: 8.9099. Time: 25955.4130 us. Best GFLOPs: 8.9099
2024-04-29 08:22:01 [INFO] [task_scheduler.cc:131] [Task #39: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_13] Trial #5: GFLOPs: 3.4935. Time: 66197.5537 us. Best GFLOPs: 8.9099
2024-04-29 08:22:01 [INFO] [task_scheduler.cc:131] [Task #39: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_13] Trial #6: GFLOPs: 38.1625. Time: 6059.9075 us. Best GFLOPs: 38.1625
2024-04-29 08:22:01 [INFO] [task_scheduler.cc:131] [Task #39: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_13] Trial #7: GFLOPs: 61.9070. Time: 3735.6213 us. Best GFLOPs: 61.9070
2024-04-29 08:22:01 [INFO] [task_scheduler.cc:131] [Task #39: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_13] Trial #8: GFLOPs: 22.0012. Time: 10511.3199 us. Best GFLOPs: 61.9070
2024-04-29 08:22:01 [INFO] [task_scheduler.cc:131] [Task #39: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_13] Trial #9: GFLOPs: 68.4603. Time: 3378.0349 us. Best GFLOPs: 68.4603
2024-04-29 08:22:01 [INFO] [task_scheduler.cc:131] [Task #39: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_13] Trial #10: GFLOPs: 35.2594. Time: 6558.8568 us. Best GFLOPs: 68.4603
2024-04-29 08:22:01 [INFO] [task_scheduler.cc:131] [Task #39: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_13] Trial #11: GFLOPs: 113.9530. Time: 2029.4438 us. Best GFLOPs: 113.9530
2024-04-29 08:22:01 [INFO] [task_scheduler.cc:131] [Task #39: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_13] Trial #12: GFLOPs: 35.5153. Time: 6511.6002 us. Best GFLOPs: 113.9530
2024-04-29 08:22:01 [INFO] [task_scheduler.cc:131] [Task #39: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_13] Trial #13: GFLOPs: 4.7929. Time: 48250.4777 us. Best GFLOPs: 113.9530
2024-04-29 08:22:01 [INFO] [task_scheduler.cc:131] [Task #39: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_13] Trial #14: GFLOPs: 4.0312. Time: 57368.0217 us. Best GFLOPs: 113.9530
2024-04-29 08:22:01 [INFO] [task_scheduler.cc:131] [Task #39: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_13] Trial #15: GFLOPs: 0.4025. Time: 574500.9040 us. Best GFLOPs: 113.9530
2024-04-29 08:22:01 [INFO] [task_scheduler.cc:131] [Task #39: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_13] Trial #16: GFLOPs: 46.2125. Time: 5004.3010 us. Best GFLOPs: 113.9530
2024-04-29 08:22:01 [INFO] [task_scheduler.cc:131] [Task #39: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_13] Trial #17: GFLOPs: 3.0878. Time: 74896.2550 us. Best GFLOPs: 113.9530
2024-04-29 08:22:01 [INFO] [task_scheduler.cc:131] [Task #39: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_13] Trial #18: GFLOPs: 62.7180. Time: 3687.3189 us. Best GFLOPs: 113.9530
2024-04-29 08:22:01 [INFO] [task_scheduler.cc:131] [Task #39: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_13] Trial #19: GFLOPs: 37.7471. Time: 6126.5955 us. Best GFLOPs: 113.9530
2024-04-29 08:22:01 [INFO] [task_scheduler.cc:131] [Task #39: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_13] Trial #20: GFLOPs: 4.5273. Time: 51081.9077 us. Best GFLOPs: 113.9530
2024-04-29 08:22:01 [INFO] [task_scheduler.cc:131] [Task #39: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_13] Trial #21: GFLOPs: 16.2823. Time: 14203.2125 us. Best GFLOPs: 113.9530
2024-04-29 08:22:01 [INFO] [task_scheduler.cc:131] [Task #39: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_13] Trial #22: GFLOPs: 65.4684. Time: 3532.4108 us. Best GFLOPs: 113.9530
2024-04-29 08:22:01 [INFO] [task_scheduler.cc:131] [Task #39: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_13] Trial #23: GFLOPs: 21.1793. Time: 10919.2124 us. Best GFLOPs: 113.9530
2024-04-29 08:22:01 [INFO] [task_scheduler.cc:131] [Task #39: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_13] Trial #24: GFLOPs: 1.8903. Time: 122341.6780 us. Best GFLOPs: 113.9530
2024-04-29 08:22:01 [INFO] [task_scheduler.cc:121] [Task #39: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_13] Trial #25: Error in building:
LocalBuilder: Timeout, killed after 30.0 seconds
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(128), T.int64(14), T.int64(14), T.int64(4)), "float32"), p1: T.Buffer((T.int64(128), T.int64(128), T.int64(3), T.int64(3), T.int64(4), T.int64(4)), "float32"), p2: T.Buffer((T.int64(1), T.int64(128), T.int64(1), T.int64(1), T.int64(4)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(128), T.int64(7), T.int64(7), T.int64(4)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        data_pad = T.alloc_buffer((T.int64(1), T.int64(128), T.int64(16), T.int64(16), T.int64(4)))
        conv2d_NCHWc = T.alloc_buffer((T.int64(1), T.int64(128), T.int64(7), T.int64(7), T.int64(4)))
        for n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_fused_fused in T.parallel(T.int64(128), annotations={"pragma_auto_unroll_max_step": 512, "pragma_unroll_explicit": 1}):
            for n_1, oc_chunk_1, oh_1, ow_1, oc_block_1 in T.grid(T.int64(1), T.int64(1), T.int64(7), T.int64(7), T.int64(1)):
                for n_2_init, oc_chunk_2_init, oh_2_init, ow_2_init, oc_block_2_init, n_3_init, oc_chunk_3_init, oh_3_init, ow_3_init, oc_block_3_init in T.grid(T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(1), T.int64(2), T.int64(1), T.int64(1), T.int64(1)):
                    with T.block("conv2d_NCHWc_init"):
                        v_n = T.axis.spatial(T.int64(1), n_1 + n_2_init + n_3_init)
                        v_oc_chunk = T.axis.spatial(T.int64(128), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_fused_fused // T.int64(2) * T.int64(2) + oc_chunk_1 * T.int64(2) + oc_chunk_2_init * T.int64(2) + oc_chunk_3_init)
                        v_oh = T.axis.spatial(T.int64(7), oh_1 + oh_2_init + oh_3_init)
                        v_ow = T.axis.spatial(T.int64(7), ow_1 + ow_2_init + ow_3_init)
                        v_oc_block = T.axis.spatial(T.int64(4), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_fused_fused % T.int64(2) * T.int64(2) + oc_block_1 * T.int64(2) + oc_block_2_init + oc_block_3_init)
                        T.reads()
                        T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                        T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                        conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = T.float32(0)
                for ic_0 in range(T.int64(16)):
                    for ax0, ax1, ax2 in T.grid(T.int64(1), T.int64(8), T.int64(3)):
                        for ax3_ax4_fused in T.vectorized(T.int64(12)):
                            with T.block("data_pad"):
                                v_i0 = T.axis.spatial(T.int64(1), ax0)
                                v_i1 = T.axis.spatial(T.int64(128), ic_0 * T.int64(8) + ax1)
                                v_i2 = T.axis.spatial(T.int64(16), oh_1 * T.int64(2) + ax2)
                                v_i3 = T.axis.spatial(T.int64(16), ow_1 * T.int64(2) + ax3_ax4_fused // T.int64(4))
                                v_i4 = T.axis.spatial(T.int64(4), ax3_ax4_fused % T.int64(4))
                                T.reads(p0[v_i0, v_i1, v_i2 - T.int64(1), v_i3 - T.int64(1), v_i4])
                                T.writes(data_pad[v_i0, v_i1, v_i2, v_i3, v_i4])
                                data_pad[v_i0, v_i1, v_i2, v_i3, v_i4] = T.if_then_else(T.int64(1) <= v_i2 and v_i2 < T.int64(15) and T.int64(1) <= v_i3 and v_i3 < T.int64(15), p0[v_i0, v_i1, v_i2 - T.int64(1), v_i3 - T.int64(1), v_i4], T.float32(0))
                    for kh_0, kw_0, n_2, oc_chunk_2, oh_2, ow_2, oc_block_2, ic_1, kh_1, kw_1, n_3, oc_chunk_3, oh_3, ow_3, oc_block_3 in T.grid(T.int64(1), T.int64(3), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(32), T.int64(3), T.int64(1), T.int64(1), T.int64(2), T.int64(1), T.int64(1), T.int64(1)):
                        with T.block("conv2d_NCHWc_update"):
                            v_n = T.axis.spatial(T.int64(1), n_1 + n_2 + n_3)
                            v_oc_chunk = T.axis.spatial(T.int64(128), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_fused_fused // T.int64(2) * T.int64(2) + oc_chunk_1 * T.int64(2) + oc_chunk_2 * T.int64(2) + oc_chunk_3)
                            v_oh = T.axis.spatial(T.int64(7), oh_1 + oh_2 + oh_3)
                            v_ow = T.axis.spatial(T.int64(7), ow_1 + ow_2 + ow_3)
                            v_oc_block = T.axis.spatial(T.int64(4), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_fused_fused % T.int64(2) * T.int64(2) + oc_block_1 * T.int64(2) + oc_block_2 + oc_block_3)
                            v_ic = T.axis.reduce(T.int64(512), ic_0 * T.int64(32) + ic_1)
                            v_kh = T.axis.reduce(T.int64(3), kh_0 * T.int64(3) + kh_1)
                            v_kw = T.axis.reduce(T.int64(3), kw_0 + kw_1)
                            T.reads(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block], data_pad[v_n, v_ic // T.int64(4), v_oh * T.int64(2) + v_kh, v_ow * T.int64(2) + v_kw, v_ic % T.int64(4)], p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block])
                            T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                            T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                            conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] + data_pad[v_n, v_ic // T.int64(4), v_oh * T.int64(2) + v_kh, v_ow * T.int64(2) + v_kw, v_ic % T.int64(4)] * p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block]
        for ax0_ax1_ax2_ax3_ax4_fused_0 in T.parallel(T.int64(392)):
            for ax0_ax1_ax2_ax3_ax4_fused_1 in T.vectorized(T.int64(64)):
                with T.block("T_relu"):
                    v_ax0 = T.axis.spatial(T.int64(1), T.int64(0))
                    v_ax1 = T.axis.spatial(T.int64(128), (ax0_ax1_ax2_ax3_ax4_fused_0 * T.int64(64) + ax0_ax1_ax2_ax3_ax4_fused_1) // T.int64(196))
                    v_ax2 = T.axis.spatial(T.int64(7), (ax0_ax1_ax2_ax3_ax4_fused_0 * T.int64(64) + ax0_ax1_ax2_ax3_ax4_fused_1) % T.int64(196) // T.int64(28))
                    v_ax3 = T.axis.spatial(T.int64(7), (ax0_ax1_ax2_ax3_ax4_fused_0 * T.int64(64) + ax0_ax1_ax2_ax3_ax4_fused_1) % T.int64(28) // T.int64(4))
                    v_ax4 = T.axis.spatial(T.int64(4), (ax0_ax1_ax2_ax3_ax4_fused_0 * T.int64(64) + ax0_ax1_ax2_ax3_ax4_fused_1) % T.int64(4))
                    T.reads(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4])
                    T.writes(T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                    T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.max(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] + p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4], T.float32(0))
b0 = sch.get_block(name="data_pad", func_name="main")
b1 = sch.get_block(name="conv2d_NCHWc", func_name="main")
b2 = sch.get_block(name="T_add", func_name="main")
b3 = sch.get_block(name="root", func_name="main")
sch.compute_inline(block=b2)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSRSRS")
l4, l5, l6, l7, l8, l9, l10, l11 = sch.get_loops(block=b1)
v12, v13, v14, v15 = sch.sample_perfect_tile(loop=l4, n=4, max_innermost_factor=64, decision=[1, 1, 1, 1])
l16, l17, l18, l19 = sch.split(loop=l4, factors=[v12, v13, v14, v15], preserve_unit_iters=True)
v20, v21, v22, v23 = sch.sample_perfect_tile(loop=l5, n=4, max_innermost_factor=64, decision=[64, 1, 1, 2])
l24, l25, l26, l27 = sch.split(loop=l5, factors=[v20, v21, v22, v23], preserve_unit_iters=True)
v28, v29, v30, v31 = sch.sample_perfect_tile(loop=l6, n=4, max_innermost_factor=64, decision=[1, 7, 1, 1])
l32, l33, l34, l35 = sch.split(loop=l6, factors=[v28, v29, v30, v31], preserve_unit_iters=True)
v36, v37, v38, v39 = sch.sample_perfect_tile(loop=l7, n=4, max_innermost_factor=64, decision=[1, 7, 1, 1])
l40, l41, l42, l43 = sch.split(loop=l7, factors=[v36, v37, v38, v39], preserve_unit_iters=True)
v44, v45, v46, v47 = sch.sample_perfect_tile(loop=l8, n=4, max_innermost_factor=64, decision=[2, 1, 2, 1])
l48, l49, l50, l51 = sch.split(loop=l8, factors=[v44, v45, v46, v47], preserve_unit_iters=True)
v52, v53 = sch.sample_perfect_tile(loop=l9, n=2, max_innermost_factor=64, decision=[16, 32])
l54, l55 = sch.split(loop=l9, factors=[v52, v53], preserve_unit_iters=True)
v56, v57 = sch.sample_perfect_tile(loop=l10, n=2, max_innermost_factor=64, decision=[1, 3])
l58, l59 = sch.split(loop=l10, factors=[v56, v57], preserve_unit_iters=True)
v60, v61 = sch.sample_perfect_tile(loop=l11, n=2, max_innermost_factor=64, decision=[3, 1])
l62, l63 = sch.split(loop=l11, factors=[v60, v61], preserve_unit_iters=True)
sch.reorder(l16, l24, l32, l40, l48, l17, l25, l33, l41, l49, l54, l58, l62, l18, l26, l34, l42, l50, l55, l59, l63, l19, l27, l35, l43, l51)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.parallel", ann_val=64)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.vectorize", ann_val=64)
v64 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.unroll_explicit", ann_val=v64)
l65 = sch.sample_compute_location(block=b0, decision=10)
sch.compute_at(block=b0, loop=l65, preserve_unit_loops=True, index=-1)
sch.enter_postproc()
b66 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b66, ann_key="meta_schedule.parallel")
sch.unannotate(block_or_loop=b66, ann_key="meta_schedule.vectorize")
sch.unannotate(block_or_loop=b66, ann_key="meta_schedule.unroll_explicit")
b67, b68, b69 = sch.get_child_blocks(b66)
l70, l71, l72, l73, l74, l75, l76, l77, l78, l79, l80, l81, l82, l83, l84, l85 = sch.get_loops(block=b67)
l86 = sch.fuse(l70, l71, l72, l73, l74, preserve_unit_iters=True)
sch.parallel(loop=l86)
l87 = sch.fuse(l84, l85, preserve_unit_iters=True)
sch.vectorize(loop=l87)
l88, l89, l90, l91, l92, l93, l94, l95, l96, l97, l98, l99, l100, l101, l102, l103, l104, l105, l106, l107, l108, l109 = sch.get_loops(block=b68)
l110 = sch.fuse(l88, preserve_unit_iters=True)
sch.parallel(loop=l110)
sch.annotate(block_or_loop=l110, ann_key="pragma_auto_unroll_max_step", ann_val=512)
sch.annotate(block_or_loop=l110, ann_key="pragma_unroll_explicit", ann_val=1)
l111, l112, l113, l114, l115 = sch.get_loops(block=b69)
l116 = sch.fuse(l111, l112, l113, l114, l115, preserve_unit_iters=True)
l117, l118 = sch.split(loop=l116, factors=[None, 64], preserve_unit_iters=True)
sch.parallel(loop=l117)
sch.vectorize(loop=l118)
b119 = sch.get_block(name="conv2d_NCHWc", func_name="main")
l120, l121, l122, l123, l124, l125, l126, l127, l128, l129, l130, l131, l132, l133, l134, l135, l136, l137, l138, l139, l140, l141 = sch.get_loops(block=b119)
b142 = sch.decompose_reduction(block=b119, loop=l126)
2024-04-29 08:22:01 [INFO] [task_scheduler.cc:121] [Task #39: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_13] Trial #26: Error in building:
LocalBuilder: Timeout, killed after 30.0 seconds
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(128), T.int64(14), T.int64(14), T.int64(4)), "float32"), p1: T.Buffer((T.int64(128), T.int64(128), T.int64(3), T.int64(3), T.int64(4), T.int64(4)), "float32"), p2: T.Buffer((T.int64(1), T.int64(128), T.int64(1), T.int64(1), T.int64(4)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(128), T.int64(7), T.int64(7), T.int64(4)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        conv2d_NCHWc = T.alloc_buffer((T.int64(1), T.int64(128), T.int64(7), T.int64(7), T.int64(4)))
        for n_0 in T.serial(T.int64(1), annotations={"pragma_auto_unroll_max_step": 512, "pragma_unroll_explicit": 1}):
            for oc_chunk_0, oh_0, ow_0, oc_block_0 in T.grid(T.int64(1), T.int64(1), T.int64(1), T.int64(1)):
                for n_1, oc_chunk_1, oh_1, ow_1, oc_block_1 in T.grid(T.int64(1), T.int64(1), T.int64(7), T.int64(1), T.int64(2)):
                    for n_2_init, oc_chunk_2_init, oh_2_init, ow_2_init, oc_block_2_init, n_3_init, oc_chunk_3_init, oh_3_init, ow_3_init, oc_block_3_init in T.grid(T.int64(1), T.int64(4), T.int64(1), T.int64(1), T.int64(2), T.int64(1), T.int64(32), T.int64(1), T.int64(7), T.int64(1)):
                        with T.block("conv2d_NCHWc_init"):
                            v_n = T.axis.spatial(T.int64(1), n_0 + n_1 + n_2_init + n_3_init)
                            v_oc_chunk = T.axis.spatial(T.int64(128), oc_chunk_0 * T.int64(128) + oc_chunk_1 * T.int64(128) + oc_chunk_2_init * T.int64(32) + oc_chunk_3_init)
                            v_oh = T.axis.spatial(T.int64(7), oh_0 * T.int64(7) + oh_1 + oh_2_init + oh_3_init)
                            v_ow = T.axis.spatial(T.int64(7), ow_0 * T.int64(7) + ow_1 * T.int64(7) + ow_2_init * T.int64(7) + ow_3_init)
                            v_oc_block = T.axis.spatial(T.int64(4), oc_block_0 * T.int64(4) + oc_block_1 * T.int64(2) + oc_block_2_init + oc_block_3_init)
                            T.reads()
                            T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                            T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                            conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = T.float32(0)
                    for ic_0, kh_0, kw_0, n_2, oc_chunk_2, oh_2, ow_2, oc_block_2, ic_1, kh_1, kw_1, n_3, oc_chunk_3, oh_3, ow_3, oc_block_3 in T.grid(T.int64(32), T.int64(3), T.int64(1), T.int64(1), T.int64(4), T.int64(1), T.int64(1), T.int64(2), T.int64(16), T.int64(1), T.int64(3), T.int64(1), T.int64(32), T.int64(1), T.int64(7), T.int64(1)):
                        with T.block("conv2d_NCHWc_update"):
                            v_n = T.axis.spatial(T.int64(1), n_0 + n_1 + n_2 + n_3)
                            v_oc_chunk = T.axis.spatial(T.int64(128), oc_chunk_0 * T.int64(128) + oc_chunk_1 * T.int64(128) + oc_chunk_2 * T.int64(32) + oc_chunk_3)
                            v_oh = T.axis.spatial(T.int64(7), oh_0 * T.int64(7) + oh_1 + oh_2 + oh_3)
                            v_ow = T.axis.spatial(T.int64(7), ow_0 * T.int64(7) + ow_1 * T.int64(7) + ow_2 * T.int64(7) + ow_3)
                            v_oc_block = T.axis.spatial(T.int64(4), oc_block_0 * T.int64(4) + oc_block_1 * T.int64(2) + oc_block_2 + oc_block_3)
                            v_ic = T.axis.reduce(T.int64(512), ic_0 * T.int64(16) + ic_1)
                            v_kh = T.axis.reduce(T.int64(3), kh_0 + kh_1)
                            v_kw = T.axis.reduce(T.int64(3), kw_0 * T.int64(3) + kw_1)
                            T.reads(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block], p0[v_n, v_ic // T.int64(4), v_oh * T.int64(2) + v_kh - T.int64(1), v_ow * T.int64(2) + v_kw - T.int64(1), v_ic % T.int64(4)], p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block])
                            T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                            T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                            conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] + T.if_then_else(T.int64(1) <= v_oh * T.int64(2) + v_kh and v_oh * T.int64(2) + v_kh < T.int64(15) and T.int64(1) <= v_ow * T.int64(2) + v_kw and v_ow * T.int64(2) + v_kw < T.int64(15), p0[v_n, v_ic // T.int64(4), v_oh * T.int64(2) + v_kh - T.int64(1), v_ow * T.int64(2) + v_kw - T.int64(1), v_ic % T.int64(4)], T.float32(0)) * p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block]
                for ax0, ax1, ax2 in T.grid(T.int64(1), T.int64(128), T.int64(7)):
                    for ax3_ax4_fused in T.vectorized(T.int64(28)):
                        with T.block("T_relu"):
                            v_ax0, v_ax1, v_ax2 = T.axis.remap("SSS", [ax0, ax1, ax2])
                            v_ax3 = T.axis.spatial(T.int64(7), ax3_ax4_fused // T.int64(4))
                            v_ax4 = T.axis.spatial(T.int64(4), ax3_ax4_fused % T.int64(4))
                            T.reads(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4])
                            T.writes(T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                            T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.max(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] + p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4], T.float32(0))
b0 = sch.get_block(name="data_pad", func_name="main")
b1 = sch.get_block(name="conv2d_NCHWc", func_name="main")
b2 = sch.get_block(name="T_add", func_name="main")
b3 = sch.get_block(name="root", func_name="main")
sch.compute_inline(block=b2)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSRSRS")
l4, l5, l6, l7, l8, l9, l10, l11 = sch.get_loops(block=b1)
v12, v13, v14, v15 = sch.sample_perfect_tile(loop=l4, n=4, max_innermost_factor=64, decision=[1, 1, 1, 1])
l16, l17, l18, l19 = sch.split(loop=l4, factors=[v12, v13, v14, v15], preserve_unit_iters=True)
v20, v21, v22, v23 = sch.sample_perfect_tile(loop=l5, n=4, max_innermost_factor=64, decision=[1, 1, 4, 32])
l24, l25, l26, l27 = sch.split(loop=l5, factors=[v20, v21, v22, v23], preserve_unit_iters=True)
v28, v29, v30, v31 = sch.sample_perfect_tile(loop=l6, n=4, max_innermost_factor=64, decision=[1, 7, 1, 1])
l32, l33, l34, l35 = sch.split(loop=l6, factors=[v28, v29, v30, v31], preserve_unit_iters=True)
v36, v37, v38, v39 = sch.sample_perfect_tile(loop=l7, n=4, max_innermost_factor=64, decision=[1, 1, 1, 7])
l40, l41, l42, l43 = sch.split(loop=l7, factors=[v36, v37, v38, v39], preserve_unit_iters=True)
v44, v45, v46, v47 = sch.sample_perfect_tile(loop=l8, n=4, max_innermost_factor=64, decision=[1, 2, 2, 1])
l48, l49, l50, l51 = sch.split(loop=l8, factors=[v44, v45, v46, v47], preserve_unit_iters=True)
v52, v53 = sch.sample_perfect_tile(loop=l9, n=2, max_innermost_factor=64, decision=[32, 16])
l54, l55 = sch.split(loop=l9, factors=[v52, v53], preserve_unit_iters=True)
v56, v57 = sch.sample_perfect_tile(loop=l10, n=2, max_innermost_factor=64, decision=[3, 1])
l58, l59 = sch.split(loop=l10, factors=[v56, v57], preserve_unit_iters=True)
v60, v61 = sch.sample_perfect_tile(loop=l11, n=2, max_innermost_factor=64, decision=[1, 3])
l62, l63 = sch.split(loop=l11, factors=[v60, v61], preserve_unit_iters=True)
sch.reorder(l16, l24, l32, l40, l48, l17, l25, l33, l41, l49, l54, l58, l62, l18, l26, l34, l42, l50, l55, l59, l63, l19, l27, l35, l43, l51)
b64, = sch.get_consumers(block=b1)
sch.reverse_compute_at(block=b64, loop=l48, preserve_unit_loops=True, index=-1)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.vectorize", ann_val=64)
v65 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.unroll_explicit", ann_val=v65)
l66 = sch.sample_compute_location(block=b0, decision=-2)
sch.compute_at(block=b0, loop=l66, preserve_unit_loops=True, index=-1)
sch.enter_postproc()
b67 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b67, ann_key="meta_schedule.parallel")
sch.unannotate(block_or_loop=b67, ann_key="meta_schedule.vectorize")
sch.unannotate(block_or_loop=b67, ann_key="meta_schedule.unroll_explicit")
b68, b69 = sch.get_child_blocks(b67)
l70, l71, l72, l73, l74, l75, l76, l77, l78, l79, l80, l81, l82, l83, l84, l85, l86, l87, l88, l89, l90, l91, l92, l93, l94, l95 = sch.get_loops(block=b68)
sch.annotate(block_or_loop=l70, ann_key="pragma_auto_unroll_max_step", ann_val=512)
sch.annotate(block_or_loop=l70, ann_key="pragma_unroll_explicit", ann_val=1)
l96, l97, l98, l99, l100, l101, l102, l103, l104, l105 = sch.get_loops(block=b69)
l106 = sch.fuse(l104, l105, preserve_unit_iters=True)
sch.vectorize(loop=l106)
b107 = sch.get_block(name="conv2d_NCHWc", func_name="main")
l108, l109, l110, l111, l112, l113, l114, l115, l116, l117, l118, l119, l120, l121, l122, l123, l124, l125, l126, l127, l128, l129, l130, l131, l132, l133 = sch.get_loops(block=b107)
b134 = sch.decompose_reduction(block=b107, loop=l118)
2024-04-29 08:22:01 [INFO] [task_scheduler.cc:131] [Task #39: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_13] Trial #27: GFLOPs: 260.7137. Time: 887.0313 us. Best GFLOPs: 260.7137
2024-04-29 08:22:01 [INFO] [task_scheduler.cc:131] [Task #39: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_13] Trial #28: GFLOPs: 85.9342. Time: 2691.1430 us. Best GFLOPs: 260.7137
2024-04-29 08:22:01 [INFO] [task_scheduler.cc:131] [Task #39: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_13] Trial #29: GFLOPs: 155.0839. Time: 1491.2001 us. Best GFLOPs: 260.7137
2024-04-29 08:22:01 [INFO] [task_scheduler.cc:131] [Task #39: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_13] Trial #30: GFLOPs: 35.7498. Time: 6468.8800 us. Best GFLOPs: 260.7137
2024-04-29 08:22:01 [INFO] [task_scheduler.cc:131] [Task #39: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_13] Trial #31: GFLOPs: 44.8420. Time: 5157.2404 us. Best GFLOPs: 260.7137
2024-04-29 08:22:01 [INFO] [task_scheduler.cc:131] [Task #39: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_13] Trial #32: GFLOPs: 2.0545. Time: 112561.6403 us. Best GFLOPs: 260.7137
2024-04-29 08:22:01 [INFO] [task_scheduler.cc:131] [Task #39: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_13] Trial #33: GFLOPs: 2.1590. Time: 107114.1113 us. Best GFLOPs: 260.7137
2024-04-29 08:22:01 [INFO] [task_scheduler.cc:131] [Task #39: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_13] Trial #34: GFLOPs: 0.7282. Time: 317559.8123 us. Best GFLOPs: 260.7137
2024-04-29 08:22:01 [INFO] [task_scheduler.cc:131] [Task #39: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_13] Trial #35: GFLOPs: 1.5580. Time: 148435.5250 us. Best GFLOPs: 260.7137
2024-04-29 08:22:01 [INFO] [task_scheduler.cc:131] [Task #39: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_13] Trial #36: GFLOPs: 26.6088. Time: 8691.1619 us. Best GFLOPs: 260.7137
2024-04-29 08:22:01 [INFO] [task_scheduler.cc:131] [Task #39: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_13] Trial #37: GFLOPs: 3.3577. Time: 68873.9660 us. Best GFLOPs: 260.7137
2024-04-29 08:22:01 [INFO] [task_scheduler.cc:131] [Task #39: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_13] Trial #38: GFLOPs: 2.7961. Time: 82707.3777 us. Best GFLOPs: 260.7137
2024-04-29 08:22:01 [INFO] [task_scheduler.cc:131] [Task #39: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_13] Trial #39: GFLOPs: 22.2816. Time: 10379.0312 us. Best GFLOPs: 260.7137
2024-04-29 08:22:01 [INFO] [task_scheduler.cc:131] [Task #39: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_13] Trial #40: GFLOPs: 69.2519. Time: 3339.4197 us. Best GFLOPs: 260.7137
2024-04-29 08:22:01 [INFO] [task_scheduler.cc:131] [Task #39: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_13] Trial #41: GFLOPs: 44.1885. Time: 5233.5103 us. Best GFLOPs: 260.7137
2024-04-29 08:22:01 [INFO] [task_scheduler.cc:131] [Task #39: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_13] Trial #42: GFLOPs: 31.7119. Time: 7292.5709 us. Best GFLOPs: 260.7137
2024-04-29 08:22:01 [INFO] [task_scheduler.cc:131] [Task #39: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_13] Trial #43: GFLOPs: 9.5587. Time: 24193.8506 us. Best GFLOPs: 260.7137
2024-04-29 08:22:01 [INFO] [task_scheduler.cc:131] [Task #39: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_13] Trial #44: GFLOPs: 82.7318. Time: 2795.3109 us. Best GFLOPs: 260.7137
2024-04-29 08:22:01 [INFO] [task_scheduler.cc:131] [Task #39: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_13] Trial #45: GFLOPs: 1.6963. Time: 136332.7203 us. Best GFLOPs: 260.7137
2024-04-29 08:22:01 [INFO] [task_scheduler.cc:131] [Task #39: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_13] Trial #46: GFLOPs: 15.2239. Time: 15190.7010 us. Best GFLOPs: 260.7137
2024-04-29 08:22:01 [INFO] [task_scheduler.cc:131] [Task #39: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_13] Trial #47: GFLOPs: 5.9137. Time: 39106.0140 us. Best GFLOPs: 260.7137
2024-04-29 08:22:01 [INFO] [task_scheduler.cc:131] [Task #39: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_13] Trial #48: GFLOPs: 68.4687. Time: 3377.6196 us. Best GFLOPs: 260.7137
2024-04-29 08:22:01 [INFO] [task_scheduler.cc:131] [Task #39: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_13] Trial #49: GFLOPs: 165.8585. Time: 1394.3284 us. Best GFLOPs: 260.7137
2024-04-29 08:22:01 [INFO] [task_scheduler.cc:131] [Task #39: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_13] Trial #50: GFLOPs: 0.7785. Time: 297063.1317 us. Best GFLOPs: 260.7137
2024-04-29 08:22:01 [INFO] [task_scheduler.cc:131] [Task #39: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_13] Trial #51: GFLOPs: 27.1291. Time: 8524.4711 us. Best GFLOPs: 260.7137
2024-04-29 08:22:01 [INFO] [task_scheduler.cc:131] [Task #39: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_13] Trial #52: GFLOPs: 42.3377. Time: 5462.3038 us. Best GFLOPs: 260.7137
2024-04-29 08:22:01 [INFO] [task_scheduler.cc:131] [Task #39: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_13] Trial #53: GFLOPs: 21.9811. Time: 10520.8940 us. Best GFLOPs: 260.7137
2024-04-29 08:22:01 [INFO] [task_scheduler.cc:131] [Task #39: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_13] Trial #54: GFLOPs: 12.5208. Time: 18470.1340 us. Best GFLOPs: 260.7137
2024-04-29 08:22:01 [INFO] [task_scheduler.cc:131] [Task #39: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_13] Trial #55: GFLOPs: 11.1268. Time: 20784.2426 us. Best GFLOPs: 260.7137
2024-04-29 08:22:01 [INFO] [task_scheduler.cc:131] [Task #39: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_13] Trial #56: GFLOPs: 8.6113. Time: 26855.4385 us. Best GFLOPs: 260.7137
2024-04-29 08:22:01 [INFO] [task_scheduler.cc:131] [Task #39: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_13] Trial #57: GFLOPs: 1.5085. Time: 153304.5603 us. Best GFLOPs: 260.7137
2024-04-29 08:22:01 [INFO] [task_scheduler.cc:131] [Task #39: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_13] Trial #58: GFLOPs: 31.4537. Time: 7352.4424 us. Best GFLOPs: 260.7137
2024-04-29 08:22:01 [INFO] [task_scheduler.cc:131] [Task #39: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_13] Trial #59: GFLOPs: 150.5747. Time: 1535.8570 us. Best GFLOPs: 260.7137
2024-04-29 08:22:01 [INFO] [task_scheduler.cc:131] [Task #39: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_13] Trial #60: GFLOPs: 2.6087. Time: 88650.8960 us. Best GFLOPs: 260.7137
2024-04-29 08:22:01 [INFO] [task_scheduler.cc:131] [Task #39: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_13] Trial #61: GFLOPs: 10.4615. Time: 22105.8522 us. Best GFLOPs: 260.7137
2024-04-29 08:22:01 [INFO] [task_scheduler.cc:131] [Task #39: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_13] Trial #62: GFLOPs: 10.7307. Time: 21551.4350 us. Best GFLOPs: 260.7137
2024-04-29 08:22:01 [INFO] [task_scheduler.cc:131] [Task #39: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_13] Trial #63: GFLOPs: 7.2727. Time: 31798.5550 us. Best GFLOPs: 260.7137
2024-04-29 09:30:30 [INFO] [evolutionary_search.cc:713] Generating candidates......
2024-04-29 09:30:31 [INFO] [evolutionary_search.cc:715] Picked top 61 candidate(s) from database
2024-04-29 09:30:35 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x150ff738)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x17e88b48)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x17171638)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x136d3258)]: 0 failure(s)
2024-04-29 09:30:35 [INFO] [evolutionary_search.cc:723] Sampled 451 candidate(s)
2024-04-29 09:30:45 [INFO] [evolutionary_search.cc:621] Evolve iter #0 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x150ff738)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x17e88b48)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x17171638)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x136d3258)]: 0 failure(s)
2024-04-29 09:30:54 [INFO] [evolutionary_search.cc:621] Evolve iter #1 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x150ff738)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x17e88b48)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x17171638)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x136d3258)]: 0 failure(s)
2024-04-29 09:31:04 [INFO] [evolutionary_search.cc:621] Evolve iter #2 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x150ff738)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x17e88b48)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x17171638)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x136d3258)]: 0 failure(s)
2024-04-29 09:31:14 [INFO] [evolutionary_search.cc:621] Evolve iter #3 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x150ff738)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x17e88b48)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x17171638)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x136d3258)]: 0 failure(s)
2024-04-29 09:31:19 [INFO] [evolutionary_search.cc:649] Scores of the best 64 candidates:
[1 : 16]:	0.9812  0.9019  0.8981  0.8798  0.8593  0.8515  0.8100  0.7933  0.7752  0.7736  0.7689  0.7660  0.7591  0.7585  0.7462  0.7297
[17 : 32]:	0.7289  0.7246  0.7149  0.7125  0.7122  0.7013  0.7007  0.7007  0.6943  0.6735  0.6702  0.6675  0.6675  0.6659  0.6608  0.6596
[33 : 48]:	0.6511  0.6472  0.6460  0.6438  0.6416  0.6386  0.6384  0.6382  0.6328  0.6289  0.6277  0.6252  0.6252  0.6237  0.6181  0.6150
[49 : 64]:	0.6112  0.6108  0.6058  0.6019  0.6013  0.6010  0.6001  0.6001  0.6001  0.5995  0.5929  0.5907  0.5897  0.5893  0.5875  0.5837
2024-04-29 09:31:20 [INFO] [evolutionary_search.cc:727] Got 64 candidate(s) with evolutionary search
2024-04-29 09:31:20 [INFO] [evolutionary_search.cc:730] Sending 63 candidates(s) for measurement
2024-04-29 09:33:07 [INFO] [task_scheduler.cc:131] [Task #39: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_13] Trial #64: GFLOPs: 212.9873. Time: 1085.7981 us. Best GFLOPs: 260.7137
2024-04-29 09:33:07 [INFO] [task_scheduler.cc:131] [Task #39: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_13] Trial #65: GFLOPs: 239.5942. Time: 965.2204 us. Best GFLOPs: 260.7137
2024-04-29 09:33:07 [INFO] [task_scheduler.cc:131] [Task #39: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_13] Trial #66: GFLOPs: 192.2930. Time: 1202.6500 us. Best GFLOPs: 260.7137
2024-04-29 09:33:07 [INFO] [task_scheduler.cc:131] [Task #39: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_13] Trial #67: GFLOPs: 129.0355. Time: 1792.2287 us. Best GFLOPs: 260.7137
2024-04-29 09:33:07 [INFO] [task_scheduler.cc:131] [Task #39: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_13] Trial #68: GFLOPs: 183.1872. Time: 1262.4312 us. Best GFLOPs: 260.7137
2024-04-29 09:33:07 [INFO] [task_scheduler.cc:131] [Task #39: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_13] Trial #69: GFLOPs: 250.1443. Time: 924.5110 us. Best GFLOPs: 260.7137
2024-04-29 09:33:07 [INFO] [task_scheduler.cc:131] [Task #39: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_13] Trial #70: GFLOPs: 140.5417. Time: 1645.4990 us. Best GFLOPs: 260.7137
2024-04-29 09:33:07 [INFO] [task_scheduler.cc:131] [Task #39: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_13] Trial #71: GFLOPs: 85.6098. Time: 2701.3391 us. Best GFLOPs: 260.7137
2024-04-29 09:33:07 [INFO] [task_scheduler.cc:131] [Task #39: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_13] Trial #72: GFLOPs: 58.5940. Time: 3946.8405 us. Best GFLOPs: 260.7137
2024-04-29 09:33:07 [INFO] [task_scheduler.cc:131] [Task #39: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_13] Trial #73: GFLOPs: 84.5548. Time: 2735.0463 us. Best GFLOPs: 260.7137
2024-04-29 09:33:07 [INFO] [task_scheduler.cc:131] [Task #39: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_13] Trial #74: GFLOPs: 115.0033. Time: 2010.9096 us. Best GFLOPs: 260.7137
2024-04-29 09:33:07 [INFO] [task_scheduler.cc:131] [Task #39: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_13] Trial #75: GFLOPs: 57.9436. Time: 3991.1446 us. Best GFLOPs: 260.7137
2024-04-29 09:33:07 [INFO] [task_scheduler.cc:131] [Task #39: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_13] Trial #76: GFLOPs: 120.8926. Time: 1912.9478 us. Best GFLOPs: 260.7137
2024-04-29 09:33:07 [INFO] [task_scheduler.cc:131] [Task #39: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_13] Trial #77: GFLOPs: 53.9876. Time: 4283.5947 us. Best GFLOPs: 260.7137
2024-04-29 09:33:07 [INFO] [task_scheduler.cc:131] [Task #39: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_13] Trial #78: GFLOPs: 224.0275. Time: 1032.2894 us. Best GFLOPs: 260.7137
2024-04-29 09:33:07 [INFO] [task_scheduler.cc:131] [Task #39: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_13] Trial #79: GFLOPs: 145.1065. Time: 1593.7338 us. Best GFLOPs: 260.7137
2024-04-29 09:33:07 [INFO] [task_scheduler.cc:131] [Task #39: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_13] Trial #80: GFLOPs: 69.8495. Time: 3310.8475 us. Best GFLOPs: 260.7137
2024-04-29 09:33:07 [INFO] [task_scheduler.cc:131] [Task #39: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_13] Trial #81: GFLOPs: 230.1235. Time: 1004.9440 us. Best GFLOPs: 260.7137
2024-04-29 09:33:07 [INFO] [task_scheduler.cc:131] [Task #39: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_13] Trial #82: GFLOPs: 69.9196. Time: 3307.5278 us. Best GFLOPs: 260.7137
2024-04-29 09:33:07 [INFO] [task_scheduler.cc:131] [Task #39: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_13] Trial #83: GFLOPs: 84.8099. Time: 2726.8181 us. Best GFLOPs: 260.7137
2024-04-29 09:33:07 [INFO] [task_scheduler.cc:131] [Task #39: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_13] Trial #84: GFLOPs: 89.3719. Time: 2587.6280 us. Best GFLOPs: 260.7137
2024-04-29 09:33:07 [INFO] [task_scheduler.cc:131] [Task #39: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_13] Trial #85: GFLOPs: 75.6551. Time: 3056.7839 us. Best GFLOPs: 260.7137
2024-04-29 09:33:07 [INFO] [task_scheduler.cc:131] [Task #39: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_13] Trial #86: GFLOPs: 57.7385. Time: 4005.3178 us. Best GFLOPs: 260.7137
2024-04-29 09:33:07 [INFO] [task_scheduler.cc:131] [Task #39: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_13] Trial #87: GFLOPs: 76.7403. Time: 3013.5547 us. Best GFLOPs: 260.7137
2024-04-29 09:33:07 [INFO] [task_scheduler.cc:131] [Task #39: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_13] Trial #88: GFLOPs: 216.2539. Time: 1069.3966 us. Best GFLOPs: 260.7137
2024-04-29 09:33:07 [INFO] [task_scheduler.cc:131] [Task #39: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_13] Trial #89: GFLOPs: 55.1937. Time: 4189.9891 us. Best GFLOPs: 260.7137
2024-04-29 09:33:07 [INFO] [task_scheduler.cc:131] [Task #39: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_13] Trial #90: GFLOPs: 169.3981. Time: 1365.1936 us. Best GFLOPs: 260.7137
2024-04-29 09:33:07 [INFO] [task_scheduler.cc:131] [Task #39: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_13] Trial #91: GFLOPs: 197.7548. Time: 1169.4341 us. Best GFLOPs: 260.7137
2024-04-29 09:33:07 [INFO] [task_scheduler.cc:131] [Task #39: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_13] Trial #92: GFLOPs: 147.9616. Time: 1562.9812 us. Best GFLOPs: 260.7137
2024-04-29 09:33:07 [INFO] [task_scheduler.cc:131] [Task #39: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_13] Trial #93: GFLOPs: 66.3177. Time: 3487.1739 us. Best GFLOPs: 260.7137
2024-04-29 09:33:07 [INFO] [task_scheduler.cc:131] [Task #39: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_13] Trial #94: GFLOPs: 119.5666. Time: 1934.1627 us. Best GFLOPs: 260.7137
2024-04-29 09:33:07 [INFO] [task_scheduler.cc:131] [Task #39: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_13] Trial #95: GFLOPs: 186.6890. Time: 1238.7509 us. Best GFLOPs: 260.7137
2024-04-29 09:33:07 [INFO] [task_scheduler.cc:131] [Task #39: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_13] Trial #96: GFLOPs: 117.5359. Time: 1967.5794 us. Best GFLOPs: 260.7137
2024-04-29 09:33:07 [INFO] [task_scheduler.cc:131] [Task #39: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_13] Trial #97: GFLOPs: 116.0404. Time: 1992.9362 us. Best GFLOPs: 260.7137
2024-04-29 09:33:07 [INFO] [task_scheduler.cc:131] [Task #39: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_13] Trial #98: GFLOPs: 116.5950. Time: 1983.4569 us. Best GFLOPs: 260.7137
2024-04-29 09:33:07 [INFO] [task_scheduler.cc:131] [Task #39: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_13] Trial #99: GFLOPs: 99.3195. Time: 2328.4558 us. Best GFLOPs: 260.7137
2024-04-29 09:33:07 [INFO] [task_scheduler.cc:131] [Task #39: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_13] Trial #100: GFLOPs: 189.6956. Time: 1219.1175 us. Best GFLOPs: 260.7137
2024-04-29 09:33:07 [INFO] [task_scheduler.cc:131] [Task #39: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_13] Trial #101: GFLOPs: 60.4152. Time: 3827.8647 us. Best GFLOPs: 260.7137
2024-04-29 09:33:07 [INFO] [task_scheduler.cc:131] [Task #39: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_13] Trial #102: GFLOPs: 163.6238. Time: 1413.3712 us. Best GFLOPs: 260.7137
2024-04-29 09:33:07 [INFO] [task_scheduler.cc:131] [Task #39: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_13] Trial #103: GFLOPs: 221.8613. Time: 1042.3683 us. Best GFLOPs: 260.7137
2024-04-29 09:33:07 [INFO] [task_scheduler.cc:131] [Task #39: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_13] Trial #104: GFLOPs: 59.4715. Time: 3888.6020 us. Best GFLOPs: 260.7137
2024-04-29 09:33:07 [INFO] [task_scheduler.cc:131] [Task #39: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_13] Trial #105: GFLOPs: 75.6156. Time: 3058.3776 us. Best GFLOPs: 260.7137
2024-04-29 09:33:07 [INFO] [task_scheduler.cc:131] [Task #39: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_13] Trial #106: GFLOPs: 29.2645. Time: 7902.4455 us. Best GFLOPs: 260.7137
2024-04-29 09:33:07 [INFO] [task_scheduler.cc:131] [Task #39: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_13] Trial #107: GFLOPs: 128.7135. Time: 1796.7123 us. Best GFLOPs: 260.7137
2024-04-29 09:33:07 [INFO] [task_scheduler.cc:131] [Task #39: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_13] Trial #108: GFLOPs: 153.9445. Time: 1502.2370 us. Best GFLOPs: 260.7137
2024-04-29 09:33:07 [INFO] [task_scheduler.cc:131] [Task #39: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_13] Trial #109: GFLOPs: 122.0511. Time: 1894.7894 us. Best GFLOPs: 260.7137
2024-04-29 09:33:07 [INFO] [task_scheduler.cc:131] [Task #39: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_13] Trial #110: GFLOPs: 135.8322. Time: 1702.5503 us. Best GFLOPs: 260.7137
2024-04-29 09:33:07 [INFO] [task_scheduler.cc:131] [Task #39: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_13] Trial #111: GFLOPs: 72.6886. Time: 3181.5340 us. Best GFLOPs: 260.7137
2024-04-29 09:33:07 [INFO] [task_scheduler.cc:131] [Task #39: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_13] Trial #112: GFLOPs: 69.4168. Time: 3331.4863 us. Best GFLOPs: 260.7137
2024-04-29 09:33:07 [INFO] [task_scheduler.cc:131] [Task #39: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_13] Trial #113: GFLOPs: 114.3127. Time: 2023.0585 us. Best GFLOPs: 260.7137
2024-04-29 09:33:07 [INFO] [task_scheduler.cc:131] [Task #39: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_13] Trial #114: GFLOPs: 95.9092. Time: 2411.2522 us. Best GFLOPs: 260.7137
2024-04-29 09:33:07 [INFO] [task_scheduler.cc:131] [Task #39: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_13] Trial #115: GFLOPs: 173.0709. Time: 1336.2224 us. Best GFLOPs: 260.7137
2024-04-29 09:33:07 [INFO] [task_scheduler.cc:131] [Task #39: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_13] Trial #116: GFLOPs: 77.3614. Time: 2989.3625 us. Best GFLOPs: 260.7137
2024-04-29 09:33:07 [INFO] [task_scheduler.cc:131] [Task #39: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_13] Trial #117: GFLOPs: 137.8488. Time: 1677.6442 us. Best GFLOPs: 260.7137
2024-04-29 09:33:07 [INFO] [task_scheduler.cc:131] [Task #39: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_13] Trial #118: GFLOPs: 156.7009. Time: 1475.8128 us. Best GFLOPs: 260.7137
2024-04-29 09:33:07 [INFO] [task_scheduler.cc:131] [Task #39: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_13] Trial #119: GFLOPs: 159.5138. Time: 1449.7876 us. Best GFLOPs: 260.7137
2024-04-29 09:33:07 [INFO] [task_scheduler.cc:131] [Task #39: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_13] Trial #120: GFLOPs: 124.9481. Time: 1850.8574 us. Best GFLOPs: 260.7137
2024-04-29 09:33:07 [INFO] [task_scheduler.cc:131] [Task #39: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_13] Trial #121: GFLOPs: 202.8148. Time: 1140.2582 us. Best GFLOPs: 260.7137
2024-04-29 09:33:07 [INFO] [task_scheduler.cc:131] [Task #39: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_13] Trial #122: GFLOPs: 170.9497. Time: 1352.8021 us. Best GFLOPs: 260.7137
2024-04-29 09:33:07 [INFO] [task_scheduler.cc:131] [Task #39: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_13] Trial #123: GFLOPs: 239.8223. Time: 964.3022 us. Best GFLOPs: 260.7137
2024-04-29 09:33:07 [INFO] [task_scheduler.cc:131] [Task #39: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_13] Trial #124: GFLOPs: 200.0607. Time: 1155.9550 us. Best GFLOPs: 260.7137
2024-04-29 09:33:07 [INFO] [task_scheduler.cc:121] [Task #39: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_13] Trial #125: Error in building:
LocalBuilder: Timeout, killed after 30.0 seconds
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(128), T.int64(14), T.int64(14), T.int64(4)), "float32"), p1: T.Buffer((T.int64(128), T.int64(128), T.int64(3), T.int64(3), T.int64(4), T.int64(4)), "float32"), p2: T.Buffer((T.int64(1), T.int64(128), T.int64(1), T.int64(1), T.int64(4)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(128), T.int64(7), T.int64(7), T.int64(4)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        data_pad = T.alloc_buffer((T.int64(1), T.int64(128), T.int64(16), T.int64(16), T.int64(4)))
        conv2d_NCHWc = T.alloc_buffer((T.int64(1), T.int64(128), T.int64(7), T.int64(7), T.int64(4)))
        for n_0_oc_chunk_0_fused_fused in T.parallel(T.int64(8), annotations={"pragma_auto_unroll_max_step": 512, "pragma_unroll_explicit": 1}):
            for ax0, ax1, ax2 in T.grid(T.int64(1), T.int64(128), T.int64(15)):
                for ax3_ax4_fused in T.vectorized(T.int64(60)):
                    with T.block("data_pad"):
                        v_i0, v_i1 = T.axis.remap("SS", [ax0, ax1])
                        v_i2 = T.axis.spatial(T.int64(16), ax2)
                        v_i3 = T.axis.spatial(T.int64(16), ax3_ax4_fused // T.int64(4))
                        v_i4 = T.axis.spatial(T.int64(4), ax3_ax4_fused % T.int64(4))
                        T.reads(p0[v_i0, v_i1, v_i2 - T.int64(1), v_i3 - T.int64(1), v_i4])
                        T.writes(data_pad[v_i0, v_i1, v_i2, v_i3, v_i4])
                        data_pad[v_i0, v_i1, v_i2, v_i3, v_i4] = T.if_then_else(T.int64(1) <= v_i2 and v_i2 < T.int64(15) and T.int64(1) <= v_i3 and v_i3 < T.int64(15), p0[v_i0, v_i1, v_i2 - T.int64(1), v_i3 - T.int64(1), v_i4], T.float32(0))
            for oh_0, ow_0, oc_block_0, n_1, oc_chunk_1, oh_1, ow_1, oc_block_1 in T.grid(T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1)):
                for n_2_init, oc_chunk_2_init, oh_2_init, ow_2_init, oc_block_2_init, n_3_init, oc_chunk_3_init, oh_3_init, ow_3_init in T.grid(T.int64(1), T.int64(4), T.int64(1), T.int64(1), T.int64(2), T.int64(1), T.int64(4), T.int64(7), T.int64(7)):
                    for oc_block_3_fused_init in T.vectorized(T.int64(2)):
                        with T.block("conv2d_NCHWc_init"):
                            v_n = T.axis.spatial(T.int64(1), n_1 + n_2_init + n_3_init)
                            v_oc_chunk = T.axis.spatial(T.int64(128), n_0_oc_chunk_0_fused_fused * T.int64(16) + oc_chunk_1 * T.int64(16) + oc_chunk_2_init * T.int64(4) + oc_chunk_3_init)
                            v_oh = T.axis.spatial(T.int64(7), oh_0 * T.int64(7) + oh_1 * T.int64(7) + oh_2_init * T.int64(7) + oh_3_init)
                            v_ow = T.axis.spatial(T.int64(7), ow_0 * T.int64(7) + ow_1 * T.int64(7) + ow_2_init * T.int64(7) + ow_3_init)
                            v_oc_block = T.axis.spatial(T.int64(4), oc_block_0 * T.int64(4) + oc_block_1 * T.int64(4) + oc_block_2_init * T.int64(2) + oc_block_3_fused_init)
                            T.reads()
                            T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                            T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                            conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = T.float32(0)
                for ic_0, kh_0, kw_0, n_2, oc_chunk_2, oh_2, ow_2, oc_block_2, ic_1, kh_1, kw_1, n_3, oc_chunk_3, oh_3, ow_3 in T.grid(T.int64(128), T.int64(1), T.int64(3), T.int64(1), T.int64(4), T.int64(1), T.int64(1), T.int64(2), T.int64(4), T.int64(3), T.int64(1), T.int64(1), T.int64(4), T.int64(7), T.int64(7)):
                    for oc_block_3_fused in T.vectorized(T.int64(2)):
                        with T.block("conv2d_NCHWc_update"):
                            v_n = T.axis.spatial(T.int64(1), n_1 + n_2 + n_3)
                            v_oc_chunk = T.axis.spatial(T.int64(128), n_0_oc_chunk_0_fused_fused * T.int64(16) + oc_chunk_1 * T.int64(16) + oc_chunk_2 * T.int64(4) + oc_chunk_3)
                            v_oh = T.axis.spatial(T.int64(7), oh_0 * T.int64(7) + oh_1 * T.int64(7) + oh_2 * T.int64(7) + oh_3)
                            v_ow = T.axis.spatial(T.int64(7), ow_0 * T.int64(7) + ow_1 * T.int64(7) + ow_2 * T.int64(7) + ow_3)
                            v_oc_block = T.axis.spatial(T.int64(4), oc_block_0 * T.int64(4) + oc_block_1 * T.int64(4) + oc_block_2 * T.int64(2) + oc_block_3_fused)
                            v_ic = T.axis.reduce(T.int64(512), ic_0 * T.int64(4) + ic_1)
                            v_kh = T.axis.reduce(T.int64(3), kh_0 * T.int64(3) + kh_1)
                            v_kw = T.axis.reduce(T.int64(3), kw_0 + kw_1)
                            T.reads(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block], data_pad[v_n, v_ic // T.int64(4), v_oh * T.int64(2) + v_kh, v_ow * T.int64(2) + v_kw, v_ic % T.int64(4)], p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block])
                            T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                            T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                            conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] + data_pad[v_n, v_ic // T.int64(4), v_oh * T.int64(2) + v_kh, v_ow * T.int64(2) + v_kw, v_ic % T.int64(4)] * p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block]
                for ax0, ax1, ax2 in T.grid(T.int64(1), T.int64(16), T.int64(7)):
                    for ax3_ax4_fused in T.vectorized(T.int64(28)):
                        with T.block("T_relu"):
                            v_ax0 = T.axis.spatial(T.int64(1), ax0)
                            v_ax1 = T.axis.spatial(T.int64(128), n_0_oc_chunk_0_fused_fused * T.int64(16) + ax1)
                            v_ax2 = T.axis.spatial(T.int64(7), ax2)
                            v_ax3 = T.axis.spatial(T.int64(7), ax3_ax4_fused // T.int64(4))
                            v_ax4 = T.axis.spatial(T.int64(4), ax3_ax4_fused % T.int64(4))
                            T.reads(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4])
                            T.writes(T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                            T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.max(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] + p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4], T.float32(0))
b0 = sch.get_block(name="data_pad", func_name="main")
b1 = sch.get_block(name="conv2d_NCHWc", func_name="main")
b2 = sch.get_block(name="T_add", func_name="main")
b3 = sch.get_block(name="root", func_name="main")
sch.compute_inline(block=b2)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSRSRS")
l4, l5, l6, l7, l8, l9, l10, l11 = sch.get_loops(block=b1)
v12, v13, v14, v15 = sch.sample_perfect_tile(loop=l4, n=4, max_innermost_factor=64, decision=[1, 1, 1, 1])
l16, l17, l18, l19 = sch.split(loop=l4, factors=[v12, v13, v14, v15], preserve_unit_iters=True)
v20, v21, v22, v23 = sch.sample_perfect_tile(loop=l5, n=4, max_innermost_factor=64, decision=[8, 1, 4, 4])
l24, l25, l26, l27 = sch.split(loop=l5, factors=[v20, v21, v22, v23], preserve_unit_iters=True)
v28, v29, v30, v31 = sch.sample_perfect_tile(loop=l6, n=4, max_innermost_factor=64, decision=[1, 1, 1, 7])
l32, l33, l34, l35 = sch.split(loop=l6, factors=[v28, v29, v30, v31], preserve_unit_iters=True)
v36, v37, v38, v39 = sch.sample_perfect_tile(loop=l7, n=4, max_innermost_factor=64, decision=[1, 1, 1, 7])
l40, l41, l42, l43 = sch.split(loop=l7, factors=[v36, v37, v38, v39], preserve_unit_iters=True)
v44, v45, v46, v47 = sch.sample_perfect_tile(loop=l8, n=4, max_innermost_factor=64, decision=[1, 1, 2, 2])
l48, l49, l50, l51 = sch.split(loop=l8, factors=[v44, v45, v46, v47], preserve_unit_iters=True)
v52, v53 = sch.sample_perfect_tile(loop=l9, n=2, max_innermost_factor=64, decision=[128, 4])
l54, l55 = sch.split(loop=l9, factors=[v52, v53], preserve_unit_iters=True)
v56, v57 = sch.sample_perfect_tile(loop=l10, n=2, max_innermost_factor=64, decision=[1, 3])
l58, l59 = sch.split(loop=l10, factors=[v56, v57], preserve_unit_iters=True)
v60, v61 = sch.sample_perfect_tile(loop=l11, n=2, max_innermost_factor=64, decision=[3, 1])
l62, l63 = sch.split(loop=l11, factors=[v60, v61], preserve_unit_iters=True)
sch.reorder(l16, l24, l32, l40, l48, l17, l25, l33, l41, l49, l54, l58, l62, l18, l26, l34, l42, l50, l55, l59, l63, l19, l27, l35, l43, l51)
b64, = sch.get_consumers(block=b1)
sch.reverse_compute_at(block=b64, loop=l49, preserve_unit_loops=True, index=-1)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.vectorize", ann_val=64)
v65 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.unroll_explicit", ann_val=v65)
l66 = sch.sample_compute_location(block=b0, decision=1)
sch.compute_at(block=b0, loop=l66, preserve_unit_loops=True, index=-1)
sch.enter_postproc()
b67 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b67, ann_key="meta_schedule.parallel")
sch.unannotate(block_or_loop=b67, ann_key="meta_schedule.vectorize")
sch.unannotate(block_or_loop=b67, ann_key="meta_schedule.unroll_explicit")
b68, b69, b70 = sch.get_child_blocks(b67)
l71, l72, l73, l74, l75, l76, l77 = sch.get_loops(block=b68)
l78 = sch.fuse(l71, l72, preserve_unit_iters=True)
sch.parallel(loop=l78)
l79 = sch.fuse(l76, l77, preserve_unit_iters=True)
sch.vectorize(loop=l79)
l80, l81, l82, l83, l84, l85, l86, l87, l88, l89, l90, l91, l92, l93, l94, l95, l96, l97, l98, l99, l100, l101, l102, l103, l104 = sch.get_loops(block=b69)
l105 = sch.fuse(l80, preserve_unit_iters=True)
sch.parallel(loop=l105)
l106 = sch.fuse(l104, preserve_unit_iters=True)
sch.vectorize(loop=l106)
sch.annotate(block_or_loop=l105, ann_key="pragma_auto_unroll_max_step", ann_val=512)
sch.annotate(block_or_loop=l105, ann_key="pragma_unroll_explicit", ann_val=1)
l107, l108, l109, l110, l111, l112, l113, l114, l115, l116, l117, l118, l119, l120 = sch.get_loops(block=b70)
l121 = sch.fuse(l119, l120, preserve_unit_iters=True)
sch.vectorize(loop=l121)
b122 = sch.get_block(name="conv2d_NCHWc", func_name="main")
l123, l124, l125, l126, l127, l128, l129, l130, l131, l132, l133, l134, l135, l136, l137, l138, l139, l140, l141, l142, l143, l144, l145, l146, l147 = sch.get_loops(block=b122)
b148 = sch.decompose_reduction(block=b122, loop=l132)
2024-04-29 09:33:07 [INFO] [task_scheduler.cc:131] [Task #39: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_13] Trial #126: GFLOPs: 1.4510. Time: 159385.2127 us. Best GFLOPs: 260.7137
2024-04-29 10:23:02 [INFO] [evolutionary_search.cc:713] Generating candidates......
2024-04-29 10:23:03 [INFO] [evolutionary_search.cc:715] Picked top 102 candidate(s) from database
2024-04-29 10:23:07 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x150ff738)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x17e88b48)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x17171638)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x136d3258)]: 0 failure(s)
2024-04-29 10:23:08 [INFO] [evolutionary_search.cc:723] Sampled 410 candidate(s)
2024-04-29 10:23:17 [INFO] [evolutionary_search.cc:621] Evolve iter #0 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x150ff738)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x17e88b48)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x17171638)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x136d3258)]: 0 failure(s)
2024-04-29 10:23:27 [INFO] [evolutionary_search.cc:621] Evolve iter #1 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x150ff738)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x17e88b48)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x17171638)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x136d3258)]: 0 failure(s)
2024-04-29 10:23:36 [INFO] [evolutionary_search.cc:621] Evolve iter #2 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x150ff738)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x17e88b48)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x17171638)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x136d3258)]: 0 failure(s)
2024-04-29 10:23:46 [INFO] [evolutionary_search.cc:621] Evolve iter #3 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x150ff738)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x17e88b48)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x17171638)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x136d3258)]: 0 failure(s)
2024-04-29 10:23:51 [INFO] [evolutionary_search.cc:649] Scores of the best 64 candidates:
[1 : 16]:	0.9777  0.9728  0.8542  0.8339  0.8233  0.8166  0.7914  0.7879  0.7792  0.7792  0.7788  0.7788  0.7730  0.7729  0.7708  0.7541
[17 : 32]:	0.7501  0.7498  0.7443  0.7334  0.7309  0.7307  0.7295  0.7284  0.7253  0.7231  0.7162  0.7113  0.7073  0.7008  0.7001  0.6982
[33 : 48]:	0.6957  0.6957  0.6957  0.6890  0.6870  0.6870  0.6870  0.6844  0.6839  0.6832  0.6820  0.6817  0.6808  0.6804  0.6797  0.6797
[49 : 64]:	0.6782  0.6781  0.6777  0.6777  0.6777  0.6772  0.6763  0.6742  0.6704  0.6698  0.6698  0.6698  0.6698  0.6698  0.6694  0.6694
2024-04-29 10:23:52 [INFO] [evolutionary_search.cc:727] Got 64 candidate(s) with evolutionary search
2024-04-29 10:23:52 [INFO] [evolutionary_search.cc:730] Sending 64 candidates(s) for measurement
2024-04-29 10:25:31 [INFO] [task_scheduler.cc:131] [Task #39: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_13] Trial #127: GFLOPs: 256.2399. Time: 902.5182 us. Best GFLOPs: 260.7137
2024-04-29 10:25:31 [INFO] [task_scheduler.cc:131] [Task #39: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_13] Trial #128: GFLOPs: 232.7154. Time: 993.7509 us. Best GFLOPs: 260.7137
2024-04-29 10:25:31 [INFO] [task_scheduler.cc:131] [Task #39: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_13] Trial #129: GFLOPs: 268.5268. Time: 861.2220 us. Best GFLOPs: 268.5268
2024-04-29 10:25:31 [INFO] [task_scheduler.cc:131] [Task #39: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_13] Trial #130: GFLOPs: 267.2469. Time: 865.3466 us. Best GFLOPs: 268.5268
2024-04-29 10:25:31 [INFO] [task_scheduler.cc:131] [Task #39: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_13] Trial #131: GFLOPs: 389.4757. Time: 593.7757 us. Best GFLOPs: 389.4757
2024-04-29 10:25:31 [INFO] [task_scheduler.cc:131] [Task #39: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_13] Trial #132: GFLOPs: 204.1678. Time: 1132.7013 us. Best GFLOPs: 389.4757
2024-04-29 10:25:31 [INFO] [task_scheduler.cc:131] [Task #39: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_13] Trial #133: GFLOPs: 230.3441. Time: 1003.9816 us. Best GFLOPs: 389.4757
2024-04-29 10:25:31 [INFO] [task_scheduler.cc:131] [Task #39: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_13] Trial #134: GFLOPs: 215.4129. Time: 1073.5718 us. Best GFLOPs: 389.4757
2024-04-29 10:25:31 [INFO] [task_scheduler.cc:131] [Task #39: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_13] Trial #135: GFLOPs: 192.1047. Time: 1203.8291 us. Best GFLOPs: 389.4757
2024-04-29 10:25:31 [INFO] [task_scheduler.cc:131] [Task #39: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_13] Trial #136: GFLOPs: 157.2135. Time: 1471.0009 us. Best GFLOPs: 389.4757
2024-04-29 10:25:31 [INFO] [task_scheduler.cc:131] [Task #39: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_13] Trial #137: GFLOPs: 148.7383. Time: 1554.8197 us. Best GFLOPs: 389.4757
2024-04-29 10:25:31 [INFO] [task_scheduler.cc:131] [Task #39: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_13] Trial #138: GFLOPs: 141.9199. Time: 1629.5193 us. Best GFLOPs: 389.4757
2024-04-29 10:25:31 [INFO] [task_scheduler.cc:131] [Task #39: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_13] Trial #139: GFLOPs: 190.3073. Time: 1215.1990 us. Best GFLOPs: 389.4757
2024-04-29 10:25:31 [INFO] [task_scheduler.cc:131] [Task #39: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_13] Trial #140: GFLOPs: 148.1237. Time: 1561.2706 us. Best GFLOPs: 389.4757
2024-04-29 10:25:31 [INFO] [task_scheduler.cc:131] [Task #39: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_13] Trial #141: GFLOPs: 196.6923. Time: 1175.7510 us. Best GFLOPs: 389.4757
2024-04-29 10:25:31 [INFO] [task_scheduler.cc:131] [Task #39: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_13] Trial #142: GFLOPs: 121.5066. Time: 1903.2807 us. Best GFLOPs: 389.4757
2024-04-29 10:25:31 [INFO] [task_scheduler.cc:131] [Task #39: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_13] Trial #143: GFLOPs: 78.1367. Time: 2959.7008 us. Best GFLOPs: 389.4757
2024-04-29 10:25:31 [INFO] [task_scheduler.cc:131] [Task #39: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_13] Trial #144: GFLOPs: 182.9421. Time: 1264.1222 us. Best GFLOPs: 389.4757
2024-04-29 10:25:31 [INFO] [task_scheduler.cc:131] [Task #39: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_13] Trial #145: GFLOPs: 164.6022. Time: 1404.9699 us. Best GFLOPs: 389.4757
2024-04-29 10:25:31 [INFO] [task_scheduler.cc:131] [Task #39: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_13] Trial #146: GFLOPs: 366.2536. Time: 631.4236 us. Best GFLOPs: 389.4757
2024-04-29 10:25:31 [INFO] [task_scheduler.cc:131] [Task #39: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_13] Trial #147: GFLOPs: 210.4441. Time: 1098.9199 us. Best GFLOPs: 389.4757
2024-04-29 10:25:31 [INFO] [task_scheduler.cc:131] [Task #39: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_13] Trial #148: GFLOPs: 224.3723. Time: 1030.7028 us. Best GFLOPs: 389.4757
2024-04-29 10:25:31 [INFO] [task_scheduler.cc:131] [Task #39: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_13] Trial #149: GFLOPs: 172.2922. Time: 1342.2611 us. Best GFLOPs: 389.4757
2024-04-29 10:25:31 [INFO] [task_scheduler.cc:131] [Task #39: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_13] Trial #150: GFLOPs: 202.1959. Time: 1143.7483 us. Best GFLOPs: 389.4757
2024-04-29 10:25:31 [INFO] [task_scheduler.cc:131] [Task #39: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_13] Trial #151: GFLOPs: 181.3552. Time: 1275.1834 us. Best GFLOPs: 389.4757
2024-04-29 10:25:31 [INFO] [task_scheduler.cc:131] [Task #39: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_13] Trial #152: GFLOPs: 57.2896. Time: 4036.7011 us. Best GFLOPs: 389.4757
2024-04-29 10:25:31 [INFO] [task_scheduler.cc:131] [Task #39: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_13] Trial #153: GFLOPs: 163.2336. Time: 1416.7500 us. Best GFLOPs: 389.4757
2024-04-29 10:25:31 [INFO] [task_scheduler.cc:131] [Task #39: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_13] Trial #154: GFLOPs: 146.1658. Time: 1582.1844 us. Best GFLOPs: 389.4757
2024-04-29 10:25:31 [INFO] [task_scheduler.cc:131] [Task #39: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_13] Trial #155: GFLOPs: 210.5300. Time: 1098.4715 us. Best GFLOPs: 389.4757
2024-04-29 10:25:31 [INFO] [task_scheduler.cc:131] [Task #39: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_13] Trial #156: GFLOPs: 165.7830. Time: 1394.9633 us. Best GFLOPs: 389.4757
2024-04-29 10:25:31 [INFO] [task_scheduler.cc:131] [Task #39: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_13] Trial #157: GFLOPs: 216.5757. Time: 1067.8075 us. Best GFLOPs: 389.4757
2024-04-29 10:25:31 [INFO] [task_scheduler.cc:131] [Task #39: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_13] Trial #158: GFLOPs: 166.3982. Time: 1389.8057 us. Best GFLOPs: 389.4757
2024-04-29 10:25:31 [INFO] [task_scheduler.cc:131] [Task #39: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_13] Trial #159: GFLOPs: 78.5542. Time: 2943.9695 us. Best GFLOPs: 389.4757
2024-04-29 10:25:31 [INFO] [task_scheduler.cc:131] [Task #39: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_13] Trial #160: GFLOPs: 112.0873. Time: 2063.2247 us. Best GFLOPs: 389.4757
2024-04-29 10:25:31 [INFO] [task_scheduler.cc:131] [Task #39: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_13] Trial #161: GFLOPs: 91.8588. Time: 2517.5719 us. Best GFLOPs: 389.4757
2024-04-29 10:25:31 [INFO] [task_scheduler.cc:131] [Task #39: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_13] Trial #162: GFLOPs: 166.9557. Time: 1385.1646 us. Best GFLOPs: 389.4757
2024-04-29 10:25:31 [INFO] [task_scheduler.cc:131] [Task #39: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_13] Trial #163: GFLOPs: 119.9354. Time: 1928.2148 us. Best GFLOPs: 389.4757
2024-04-29 10:25:31 [INFO] [task_scheduler.cc:131] [Task #39: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_13] Trial #164: GFLOPs: 143.1373. Time: 1615.6597 us. Best GFLOPs: 389.4757
2024-04-29 10:25:31 [INFO] [task_scheduler.cc:131] [Task #39: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_13] Trial #165: GFLOPs: 145.6415. Time: 1587.8796 us. Best GFLOPs: 389.4757
2024-04-29 10:25:31 [INFO] [task_scheduler.cc:131] [Task #39: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_13] Trial #166: GFLOPs: 90.3064. Time: 2560.8500 us. Best GFLOPs: 389.4757
2024-04-29 10:25:31 [INFO] [task_scheduler.cc:131] [Task #39: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_13] Trial #167: GFLOPs: 149.5286. Time: 1546.6016 us. Best GFLOPs: 389.4757
2024-04-29 10:25:31 [INFO] [task_scheduler.cc:131] [Task #39: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_13] Trial #168: GFLOPs: 167.9535. Time: 1376.9354 us. Best GFLOPs: 389.4757
2024-04-29 10:25:31 [INFO] [task_scheduler.cc:131] [Task #39: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_13] Trial #169: GFLOPs: 153.4739. Time: 1506.8434 us. Best GFLOPs: 389.4757
2024-04-29 10:25:31 [INFO] [task_scheduler.cc:131] [Task #39: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_13] Trial #170: GFLOPs: 175.0363. Time: 1321.2181 us. Best GFLOPs: 389.4757
2024-04-29 10:25:31 [INFO] [task_scheduler.cc:131] [Task #39: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_13] Trial #171: GFLOPs: 143.2342. Time: 1614.5668 us. Best GFLOPs: 389.4757
2024-04-29 10:25:31 [INFO] [task_scheduler.cc:131] [Task #39: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_13] Trial #172: GFLOPs: 144.2521. Time: 1603.1740 us. Best GFLOPs: 389.4757
2024-04-29 10:25:31 [INFO] [task_scheduler.cc:131] [Task #39: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_13] Trial #173: GFLOPs: 155.7315. Time: 1484.9995 us. Best GFLOPs: 389.4757
2024-04-29 10:25:31 [INFO] [task_scheduler.cc:131] [Task #39: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_13] Trial #174: GFLOPs: 94.8042. Time: 2439.3559 us. Best GFLOPs: 389.4757
2024-04-29 10:25:31 [INFO] [task_scheduler.cc:131] [Task #39: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_13] Trial #175: GFLOPs: 82.9061. Time: 2789.4357 us. Best GFLOPs: 389.4757
2024-04-29 10:25:31 [INFO] [task_scheduler.cc:131] [Task #39: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_13] Trial #176: GFLOPs: 172.4383. Time: 1341.1240 us. Best GFLOPs: 389.4757
2024-04-29 10:25:31 [INFO] [task_scheduler.cc:131] [Task #39: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_13] Trial #177: GFLOPs: 179.9626. Time: 1285.0513 us. Best GFLOPs: 389.4757
2024-04-29 10:25:31 [INFO] [task_scheduler.cc:131] [Task #39: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_13] Trial #178: GFLOPs: 179.8084. Time: 1286.1537 us. Best GFLOPs: 389.4757
2024-04-29 10:25:31 [INFO] [task_scheduler.cc:131] [Task #39: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_13] Trial #179: GFLOPs: 180.2951. Time: 1282.6817 us. Best GFLOPs: 389.4757
2024-04-29 10:25:31 [INFO] [task_scheduler.cc:131] [Task #39: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_13] Trial #180: GFLOPs: 106.9010. Time: 2163.3207 us. Best GFLOPs: 389.4757
2024-04-29 10:25:31 [INFO] [task_scheduler.cc:131] [Task #39: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_13] Trial #181: GFLOPs: 110.0892. Time: 2100.6716 us. Best GFLOPs: 389.4757
2024-04-29 10:25:31 [INFO] [task_scheduler.cc:131] [Task #39: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_13] Trial #182: GFLOPs: 88.8774. Time: 2602.0259 us. Best GFLOPs: 389.4757
2024-04-29 10:25:31 [INFO] [task_scheduler.cc:131] [Task #39: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_13] Trial #183: GFLOPs: 97.6339. Time: 2368.6561 us. Best GFLOPs: 389.4757
2024-04-29 10:25:31 [INFO] [task_scheduler.cc:131] [Task #39: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_13] Trial #184: GFLOPs: 105.3479. Time: 2195.2137 us. Best GFLOPs: 389.4757
2024-04-29 10:25:31 [INFO] [task_scheduler.cc:131] [Task #39: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_13] Trial #185: GFLOPs: 113.4648. Time: 2038.1753 us. Best GFLOPs: 389.4757
2024-04-29 10:25:31 [INFO] [task_scheduler.cc:131] [Task #39: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_13] Trial #186: GFLOPs: 152.4112. Time: 1517.3508 us. Best GFLOPs: 389.4757
2024-04-29 10:25:31 [INFO] [task_scheduler.cc:131] [Task #39: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_13] Trial #187: GFLOPs: 112.3782. Time: 2057.8828 us. Best GFLOPs: 389.4757
2024-04-29 10:25:31 [INFO] [task_scheduler.cc:131] [Task #39: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_13] Trial #188: GFLOPs: 2.0363. Time: 113568.6447 us. Best GFLOPs: 389.4757
2024-04-29 10:25:31 [INFO] [task_scheduler.cc:131] [Task #39: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_13] Trial #189: GFLOPs: 7.7834. Time: 29712.0493 us. Best GFLOPs: 389.4757
2024-04-29 10:25:31 [INFO] [task_scheduler.cc:131] [Task #39: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_13] Trial #190: GFLOPs: 45.8242. Time: 5046.7019 us. Best GFLOPs: 389.4757
2024-04-29 12:35:21 [INFO] [evolutionary_search.cc:713] Generating candidates......
2024-04-29 12:35:23 [INFO] [evolutionary_search.cc:715] Picked top 102 candidate(s) from database
2024-04-29 12:35:27 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x150ff738)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x17e88b48)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x17171638)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x136d3258)]: 0 failure(s)
2024-04-29 12:35:27 [INFO] [evolutionary_search.cc:723] Sampled 410 candidate(s)
2024-04-29 12:35:36 [INFO] [evolutionary_search.cc:621] Evolve iter #0 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x150ff738)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x17e88b48)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x17171638)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x136d3258)]: 0 failure(s)
2024-04-29 12:35:46 [INFO] [evolutionary_search.cc:621] Evolve iter #1 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x150ff738)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x17e88b48)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x17171638)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x136d3258)]: 0 failure(s)
2024-04-29 12:35:56 [INFO] [evolutionary_search.cc:621] Evolve iter #2 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x150ff738)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x17e88b48)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x17171638)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x136d3258)]: 0 failure(s)
2024-04-29 12:36:06 [INFO] [evolutionary_search.cc:621] Evolve iter #3 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x150ff738)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x17e88b48)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x17171638)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x136d3258)]: 0 failure(s)
2024-04-29 12:36:11 [INFO] [evolutionary_search.cc:649] Scores of the best 64 candidates:
[1 : 16]:	0.8673  0.8673  0.8673  0.8673  0.8071  0.8071  0.7994  0.7780  0.7344  0.7028  0.7019  0.6823  0.6782  0.6782  0.6773  0.6657
[17 : 32]:	0.6639  0.6611  0.6611  0.6611  0.6550  0.6389  0.6383  0.6383  0.6383  0.6259  0.6108  0.6108  0.6097  0.6077  0.6057  0.6020
[33 : 48]:	0.6020  0.6020  0.6020  0.5977  0.5888  0.5849  0.5847  0.5705  0.5703  0.5694  0.5603  0.5503  0.5503  0.5465  0.5456  0.5417
[49 : 64]:	0.5392  0.5386  0.5355  0.5355  0.5355  0.5342  0.5328  0.5316  0.5310  0.5309  0.5293  0.5281  0.5281  0.5281  0.5258  0.5257
2024-04-29 12:36:11 [INFO] [evolutionary_search.cc:727] Got 64 candidate(s) with evolutionary search
2024-04-29 12:36:11 [INFO] [evolutionary_search.cc:730] Sending 64 candidates(s) for measurement
2024-04-29 12:37:41 [INFO] [task_scheduler.cc:131] [Task #39: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_13] Trial #191: GFLOPs: 103.6311. Time: 2231.5798 us. Best GFLOPs: 389.4757
2024-04-29 12:37:42 [INFO] [task_scheduler.cc:131] [Task #39: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_13] Trial #192: GFLOPs: 89.5328. Time: 2582.9768 us. Best GFLOPs: 389.4757
2024-04-29 12:37:42 [INFO] [task_scheduler.cc:131] [Task #39: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_13] Trial #193: GFLOPs: 390.2941. Time: 592.5306 us. Best GFLOPs: 390.2941
2024-04-29 12:37:42 [INFO] [task_scheduler.cc:131] [Task #39: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_13] Trial #194: GFLOPs: 138.5266. Time: 1669.4348 us. Best GFLOPs: 390.2941
2024-04-29 12:37:42 [INFO] [task_scheduler.cc:131] [Task #39: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_13] Trial #195: GFLOPs: 175.4666. Time: 1317.9780 us. Best GFLOPs: 390.2941
2024-04-29 12:37:42 [INFO] [task_scheduler.cc:131] [Task #39: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_13] Trial #196: GFLOPs: 356.8737. Time: 648.0198 us. Best GFLOPs: 390.2941
2024-04-29 12:37:42 [INFO] [task_scheduler.cc:131] [Task #39: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_13] Trial #197: GFLOPs: 258.1829. Time: 895.7263 us. Best GFLOPs: 390.2941
2024-04-29 12:37:42 [INFO] [task_scheduler.cc:131] [Task #39: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_13] Trial #198: GFLOPs: 57.0286. Time: 4055.1824 us. Best GFLOPs: 390.2941
2024-04-29 12:37:42 [INFO] [task_scheduler.cc:131] [Task #39: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_13] Trial #199: GFLOPs: 181.3968. Time: 1274.8915 us. Best GFLOPs: 390.2941
2024-04-29 12:37:42 [INFO] [task_scheduler.cc:131] [Task #39: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_13] Trial #200: GFLOPs: 155.0210. Time: 1491.8056 us. Best GFLOPs: 390.2941
2024-04-29 12:37:42 [INFO] [task_scheduler.cc:131] [Task #39: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_13] Trial #201: GFLOPs: 367.9351. Time: 628.5379 us. Best GFLOPs: 390.2941
2024-04-29 12:37:42 [INFO] [task_scheduler.cc:131] [Task #39: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_13] Trial #202: GFLOPs: 163.3199. Time: 1416.0010 us. Best GFLOPs: 390.2941
2024-04-29 12:37:42 [INFO] [task_scheduler.cc:131] [Task #39: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_13] Trial #203: GFLOPs: 383.8576. Time: 602.4661 us. Best GFLOPs: 390.2941
2024-04-29 12:37:42 [INFO] [task_scheduler.cc:131] [Task #39: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_13] Trial #204: GFLOPs: 143.5347. Time: 1611.1868 us. Best GFLOPs: 390.2941
2024-04-29 12:37:42 [INFO] [task_scheduler.cc:131] [Task #39: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_13] Trial #205: GFLOPs: 168.2991. Time: 1374.1084 us. Best GFLOPs: 390.2941
2024-04-29 12:37:42 [INFO] [task_scheduler.cc:131] [Task #39: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_13] Trial #206: GFLOPs: 223.8674. Time: 1033.0276 us. Best GFLOPs: 390.2941
2024-04-29 12:37:42 [INFO] [task_scheduler.cc:131] [Task #39: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_13] Trial #207: GFLOPs: 137.1733. Time: 1685.9050 us. Best GFLOPs: 390.2941
2024-04-29 12:37:42 [INFO] [task_scheduler.cc:131] [Task #39: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_13] Trial #208: GFLOPs: 397.8432. Time: 581.2872 us. Best GFLOPs: 397.8432
2024-04-29 12:37:42 [INFO] [task_scheduler.cc:131] [Task #39: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_13] Trial #209: GFLOPs: 157.6768. Time: 1466.6782 us. Best GFLOPs: 397.8432
2024-04-29 12:37:42 [INFO] [task_scheduler.cc:131] [Task #39: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_13] Trial #210: GFLOPs: 404.0759. Time: 572.3212 us. Best GFLOPs: 404.0759
2024-04-29 12:37:42 [INFO] [task_scheduler.cc:131] [Task #39: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_13] Trial #211: GFLOPs: 264.4460. Time: 874.5119 us. Best GFLOPs: 404.0759
2024-04-29 12:37:42 [INFO] [task_scheduler.cc:131] [Task #39: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_13] Trial #212: GFLOPs: 254.3787. Time: 909.1217 us. Best GFLOPs: 404.0759
2024-04-29 12:37:42 [INFO] [task_scheduler.cc:131] [Task #39: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_13] Trial #213: GFLOPs: 114.2232. Time: 2024.6428 us. Best GFLOPs: 404.0759
2024-04-29 12:37:42 [INFO] [task_scheduler.cc:131] [Task #39: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_13] Trial #214: GFLOPs: 153.7161. Time: 1504.4695 us. Best GFLOPs: 404.0759
2024-04-29 12:37:42 [INFO] [task_scheduler.cc:131] [Task #39: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_13] Trial #215: GFLOPs: 181.4109. Time: 1274.7918 us. Best GFLOPs: 404.0759
2024-04-29 12:37:42 [INFO] [task_scheduler.cc:131] [Task #39: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_13] Trial #216: GFLOPs: 260.2999. Time: 888.4413 us. Best GFLOPs: 404.0759
2024-04-29 12:37:42 [INFO] [task_scheduler.cc:131] [Task #39: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_13] Trial #217: GFLOPs: 157.3842. Time: 1469.4058 us. Best GFLOPs: 404.0759
2024-04-29 12:37:42 [INFO] [task_scheduler.cc:131] [Task #39: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_13] Trial #218: GFLOPs: 165.1141. Time: 1400.6141 us. Best GFLOPs: 404.0759
2024-04-29 12:37:42 [INFO] [task_scheduler.cc:131] [Task #39: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_13] Trial #219: GFLOPs: 120.6020. Time: 1917.5575 us. Best GFLOPs: 404.0759
2024-04-29 12:37:42 [INFO] [task_scheduler.cc:131] [Task #39: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_13] Trial #220: GFLOPs: 154.3803. Time: 1497.9964 us. Best GFLOPs: 404.0759
2024-04-29 12:37:42 [INFO] [task_scheduler.cc:131] [Task #39: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_13] Trial #221: GFLOPs: 235.8050. Time: 980.7306 us. Best GFLOPs: 404.0759
2024-04-29 12:37:42 [INFO] [task_scheduler.cc:131] [Task #39: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_13] Trial #222: GFLOPs: 359.2048. Time: 643.8143 us. Best GFLOPs: 404.0759
2024-04-29 12:37:42 [INFO] [task_scheduler.cc:131] [Task #39: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_13] Trial #223: GFLOPs: 191.3583. Time: 1208.5245 us. Best GFLOPs: 404.0759
2024-04-29 12:37:42 [INFO] [task_scheduler.cc:131] [Task #39: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_13] Trial #224: GFLOPs: 195.9263. Time: 1180.3479 us. Best GFLOPs: 404.0759
2024-04-29 12:37:42 [INFO] [task_scheduler.cc:131] [Task #39: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_13] Trial #225: GFLOPs: 356.2841. Time: 649.0922 us. Best GFLOPs: 404.0759
2024-04-29 12:37:42 [INFO] [task_scheduler.cc:131] [Task #39: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_13] Trial #226: GFLOPs: 159.2448. Time: 1452.2368 us. Best GFLOPs: 404.0759
2024-04-29 12:37:42 [INFO] [task_scheduler.cc:131] [Task #39: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_13] Trial #227: GFLOPs: 178.0464. Time: 1298.8818 us. Best GFLOPs: 404.0759
2024-04-29 12:37:42 [INFO] [task_scheduler.cc:131] [Task #39: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_13] Trial #228: GFLOPs: 152.6116. Time: 1515.3576 us. Best GFLOPs: 404.0759
2024-04-29 12:37:42 [INFO] [task_scheduler.cc:131] [Task #39: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_13] Trial #229: GFLOPs: 90.3516. Time: 2559.5692 us. Best GFLOPs: 404.0759
2024-04-29 12:37:42 [INFO] [task_scheduler.cc:131] [Task #39: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_13] Trial #230: GFLOPs: 242.2678. Time: 954.5683 us. Best GFLOPs: 404.0759
2024-04-29 12:37:42 [INFO] [task_scheduler.cc:131] [Task #39: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_13] Trial #231: GFLOPs: 191.7956. Time: 1205.7690 us. Best GFLOPs: 404.0759
2024-04-29 12:37:42 [INFO] [task_scheduler.cc:131] [Task #39: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_13] Trial #232: GFLOPs: 151.1198. Time: 1530.3171 us. Best GFLOPs: 404.0759
2024-04-29 12:37:42 [INFO] [task_scheduler.cc:131] [Task #39: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_13] Trial #233: GFLOPs: 148.4162. Time: 1558.1941 us. Best GFLOPs: 404.0759
2024-04-29 12:37:42 [INFO] [task_scheduler.cc:131] [Task #39: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_13] Trial #234: GFLOPs: 174.8417. Time: 1322.6889 us. Best GFLOPs: 404.0759
2024-04-29 12:37:42 [INFO] [task_scheduler.cc:131] [Task #39: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_13] Trial #235: GFLOPs: 194.1845. Time: 1190.9354 us. Best GFLOPs: 404.0759
2024-04-29 12:37:42 [INFO] [task_scheduler.cc:131] [Task #39: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_13] Trial #236: GFLOPs: 211.8987. Time: 1091.3764 us. Best GFLOPs: 404.0759
2024-04-29 12:37:42 [INFO] [task_scheduler.cc:131] [Task #39: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_13] Trial #237: GFLOPs: 237.7507. Time: 972.7045 us. Best GFLOPs: 404.0759
2024-04-29 12:37:42 [INFO] [task_scheduler.cc:131] [Task #39: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_13] Trial #238: GFLOPs: 169.5790. Time: 1363.7371 us. Best GFLOPs: 404.0759
2024-04-29 12:37:42 [INFO] [task_scheduler.cc:131] [Task #39: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_13] Trial #239: GFLOPs: 118.3048. Time: 1954.7913 us. Best GFLOPs: 404.0759
2024-04-29 12:37:42 [INFO] [task_scheduler.cc:131] [Task #39: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_13] Trial #240: GFLOPs: 195.2381. Time: 1184.5088 us. Best GFLOPs: 404.0759
2024-04-29 12:37:42 [INFO] [task_scheduler.cc:131] [Task #39: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_13] Trial #241: GFLOPs: 176.8933. Time: 1307.3488 us. Best GFLOPs: 404.0759
2024-04-29 12:37:42 [INFO] [task_scheduler.cc:131] [Task #39: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_13] Trial #242: GFLOPs: 190.8979. Time: 1211.4392 us. Best GFLOPs: 404.0759
2024-04-29 12:37:42 [INFO] [task_scheduler.cc:131] [Task #39: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_13] Trial #243: GFLOPs: 197.0457. Time: 1173.6426 us. Best GFLOPs: 404.0759
2024-04-29 12:37:42 [INFO] [task_scheduler.cc:131] [Task #39: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_13] Trial #244: GFLOPs: 220.2475. Time: 1050.0059 us. Best GFLOPs: 404.0759
2024-04-29 12:37:42 [INFO] [task_scheduler.cc:131] [Task #39: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_13] Trial #245: GFLOPs: 112.1994. Time: 2061.1630 us. Best GFLOPs: 404.0759
2024-04-29 12:37:42 [INFO] [task_scheduler.cc:131] [Task #39: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_13] Trial #246: GFLOPs: 208.8228. Time: 1107.4517 us. Best GFLOPs: 404.0759
2024-04-29 12:37:42 [INFO] [task_scheduler.cc:131] [Task #39: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_13] Trial #247: GFLOPs: 233.7855. Time: 989.2023 us. Best GFLOPs: 404.0759
2024-04-29 12:37:42 [INFO] [task_scheduler.cc:131] [Task #39: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_13] Trial #248: GFLOPs: 128.1358. Time: 1804.8130 us. Best GFLOPs: 404.0759
2024-04-29 12:37:42 [INFO] [task_scheduler.cc:131] [Task #39: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_13] Trial #249: GFLOPs: 124.9987. Time: 1850.1087 us. Best GFLOPs: 404.0759
2024-04-29 12:37:42 [INFO] [task_scheduler.cc:131] [Task #39: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_13] Trial #250: GFLOPs: 220.7316. Time: 1047.7033 us. Best GFLOPs: 404.0759
2024-04-29 12:37:42 [INFO] [task_scheduler.cc:131] [Task #39: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_13] Trial #251: GFLOPs: 220.0590. Time: 1050.9054 us. Best GFLOPs: 404.0759
2024-04-29 12:37:42 [INFO] [task_scheduler.cc:131] [Task #39: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_13] Trial #252: GFLOPs: 6.2641. Time: 36918.6380 us. Best GFLOPs: 404.0759
2024-04-29 12:37:42 [INFO] [task_scheduler.cc:131] [Task #39: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_13] Trial #253: GFLOPs: 4.4589. Time: 51865.4427 us. Best GFLOPs: 404.0759
2024-04-29 12:37:42 [INFO] [task_scheduler.cc:131] [Task #39: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_13] Trial #254: GFLOPs: 6.0885. Time: 37983.1277 us. Best GFLOPs: 404.0759
