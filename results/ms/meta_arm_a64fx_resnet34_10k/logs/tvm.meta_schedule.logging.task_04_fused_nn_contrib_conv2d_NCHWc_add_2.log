2024-04-29 03:19:40 [INFO] [task_scheduler.cc:160] Initializing Task #4: "fused_nn_contrib_conv2d_NCHWc_add_2"
2024-04-29 03:19:40 [INFO] [task_scheduler.cc:35] 
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(8), T.int64(56), T.int64(56), T.int64(8)), "float32"), p1: T.Buffer((T.int64(4), T.int64(8), T.int64(1), T.int64(1), T.int64(8), T.int64(32)), "float32"), p2: T.Buffer((T.int64(1), T.int64(4), T.int64(1), T.int64(1), T.int64(32)), "float32"), T_add: T.Buffer((T.int64(1), T.int64(4), T.int64(28), T.int64(28), T.int64(32)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        conv2d_NCHWc = T.alloc_buffer((T.int64(1), T.int64(4), T.int64(28), T.int64(28), T.int64(32)))
        for n, oc_chunk, oh, ow, oc_block, ic, kh, kw in T.grid(T.int64(1), T.int64(4), T.int64(28), T.int64(28), T.int64(32), T.int64(64), T.int64(1), T.int64(1)):
            with T.block("conv2d_NCHWc"):
                v_n, v_oc_chunk, v_oh, v_ow, v_oc_block, v_ic, v_kh, v_kw = T.axis.remap("SSSSSRRR", [n, oc_chunk, oh, ow, oc_block, ic, kh, kw])
                T.reads(p0[v_n, v_ic // T.int64(8), v_oh * T.int64(2) + v_kh, v_ow * T.int64(2) + v_kw, v_ic % T.int64(8)], p1[v_oc_chunk, v_ic // T.int64(8), v_kh, v_kw, v_ic % T.int64(8), v_oc_block])
                T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                with T.init():
                    conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = T.float32(0)
                conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] + p0[v_n, v_ic // T.int64(8), v_oh * T.int64(2) + v_kh, v_ow * T.int64(2) + v_kw, v_ic % T.int64(8)] * p1[v_oc_chunk, v_ic // T.int64(8), v_kh, v_kw, v_ic % T.int64(8), v_oc_block]
        for ax0, ax1, ax2, ax3, ax4 in T.grid(T.int64(1), T.int64(4), T.int64(28), T.int64(28), T.int64(32)):
            with T.block("T_add"):
                v_ax0, v_ax1, v_ax2, v_ax3, v_ax4 = T.axis.remap("SSSSS", [ax0, ax1, ax2, ax3, ax4])
                T.reads(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4])
                T.writes(T_add[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                T_add[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] + p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4]
2024-04-29 03:19:40 [INFO] [task_scheduler.cc:164] Total 3 design space(s) generated
2024-04-29 03:19:40 [INFO] [task_scheduler.cc:170] Design space #0:
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(8), T.int64(56), T.int64(56), T.int64(8)), "float32"), p1: T.Buffer((T.int64(4), T.int64(8), T.int64(1), T.int64(1), T.int64(8), T.int64(32)), "float32"), p2: T.Buffer((T.int64(1), T.int64(4), T.int64(1), T.int64(1), T.int64(32)), "float32"), T_add: T.Buffer((T.int64(1), T.int64(4), T.int64(28), T.int64(28), T.int64(32)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        with T.block("root"):
            T.reads()
            T.writes()
            T.block_attr({"meta_schedule.parallel": 768, "meta_schedule.unroll_explicit": 64, "meta_schedule.vectorize": 64})
            conv2d_NCHWc = T.alloc_buffer((T.int64(1), T.int64(4), T.int64(28), T.int64(28), T.int64(32)))
            for n_0, oc_chunk_0, oh_0, ow_0, oc_block_0, n_1, oc_chunk_1, oh_1, ow_1, oc_block_1, ic_0, kh_0, kw_0, n_2, oc_chunk_2, oh_2, ow_2, oc_block_2, ic_1, kh_1, kw_1, n_3, oc_chunk_3, oh_3, ow_3, oc_block_3 in T.grid(T.int64(1), T.int64(1), T.int64(7), T.int64(7), T.int64(2), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(16), T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(1), T.int64(4), T.int64(4), T.int64(4), T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(4), T.int64(1), T.int64(4)):
                with T.block("conv2d_NCHWc"):
                    v_n = T.axis.spatial(T.int64(1), n_0 + n_1 + n_2 + n_3)
                    v_oc_chunk = T.axis.spatial(T.int64(4), oc_chunk_0 * T.int64(4) + oc_chunk_1 * T.int64(4) + oc_chunk_2 * T.int64(2) + oc_chunk_3)
                    v_oh = T.axis.spatial(T.int64(28), oh_0 * T.int64(4) + oh_1 * T.int64(4) + oh_2 * T.int64(4) + oh_3)
                    v_ow = T.axis.spatial(T.int64(28), ow_0 * T.int64(4) + ow_1 * T.int64(4) + ow_2 + ow_3)
                    v_oc_block = T.axis.spatial(T.int64(32), oc_block_0 * T.int64(16) + oc_block_1 * T.int64(16) + oc_block_2 * T.int64(4) + oc_block_3)
                    v_ic = T.axis.reduce(T.int64(64), ic_0 * T.int64(4) + ic_1)
                    v_kh = T.axis.reduce(T.int64(1), kh_0 + kh_1)
                    v_kw = T.axis.reduce(T.int64(1), kw_0 + kw_1)
                    T.reads(p0[v_n, v_ic // T.int64(8), v_oh * T.int64(2) + v_kh, v_ow * T.int64(2) + v_kw, v_ic % T.int64(8)], p1[v_oc_chunk, v_ic // T.int64(8), v_kh, v_kw, v_ic % T.int64(8), v_oc_block])
                    T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                    T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                    with T.init():
                        conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = T.float32(0)
                    conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] + p0[v_n, v_ic // T.int64(8), v_oh * T.int64(2) + v_kh, v_ow * T.int64(2) + v_kw, v_ic % T.int64(8)] * p1[v_oc_chunk, v_ic // T.int64(8), v_kh, v_kw, v_ic % T.int64(8), v_oc_block]
            for ax0, ax1, ax2, ax3, ax4 in T.grid(T.int64(1), T.int64(4), T.int64(28), T.int64(28), T.int64(32)):
                with T.block("T_add"):
                    v_ax0, v_ax1, v_ax2, v_ax3, v_ax4 = T.axis.remap("SSSSS", [ax0, ax1, ax2, ax3, ax4])
                    T.reads(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4])
                    T.writes(T_add[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                    T_add[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] + p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4]
b0 = sch.get_block(name="conv2d_NCHWc", func_name="main")
b1 = sch.get_block(name="root", func_name="main")
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.tiling_structure", ann_val="SSRSRS")
l2, l3, l4, l5, l6, l7, l8, l9 = sch.get_loops(block=b0)
v10, v11, v12, v13 = sch.sample_perfect_tile(loop=l2, n=4, max_innermost_factor=64, decision=[1, 1, 1, 1])
l14, l15, l16, l17 = sch.split(loop=l2, factors=[v10, v11, v12, v13], preserve_unit_iters=True)
v18, v19, v20, v21 = sch.sample_perfect_tile(loop=l3, n=4, max_innermost_factor=64, decision=[1, 1, 2, 2])
l22, l23, l24, l25 = sch.split(loop=l3, factors=[v18, v19, v20, v21], preserve_unit_iters=True)
v26, v27, v28, v29 = sch.sample_perfect_tile(loop=l4, n=4, max_innermost_factor=64, decision=[7, 1, 1, 4])
l30, l31, l32, l33 = sch.split(loop=l4, factors=[v26, v27, v28, v29], preserve_unit_iters=True)
v34, v35, v36, v37 = sch.sample_perfect_tile(loop=l5, n=4, max_innermost_factor=64, decision=[7, 1, 4, 1])
l38, l39, l40, l41 = sch.split(loop=l5, factors=[v34, v35, v36, v37], preserve_unit_iters=True)
v42, v43, v44, v45 = sch.sample_perfect_tile(loop=l6, n=4, max_innermost_factor=64, decision=[2, 1, 4, 4])
l46, l47, l48, l49 = sch.split(loop=l6, factors=[v42, v43, v44, v45], preserve_unit_iters=True)
v50, v51 = sch.sample_perfect_tile(loop=l7, n=2, max_innermost_factor=64, decision=[16, 4])
l52, l53 = sch.split(loop=l7, factors=[v50, v51], preserve_unit_iters=True)
v54, v55 = sch.sample_perfect_tile(loop=l8, n=2, max_innermost_factor=64, decision=[1, 1])
l56, l57 = sch.split(loop=l8, factors=[v54, v55], preserve_unit_iters=True)
v58, v59 = sch.sample_perfect_tile(loop=l9, n=2, max_innermost_factor=64, decision=[1, 1])
l60, l61 = sch.split(loop=l9, factors=[v58, v59], preserve_unit_iters=True)
sch.reorder(l14, l22, l30, l38, l46, l15, l23, l31, l39, l47, l52, l56, l60, l16, l24, l32, l40, l48, l53, l57, l61, l17, l25, l33, l41, l49)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.vectorize", ann_val=64)
v62 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=2)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.unroll_explicit", ann_val=v62)
2024-04-29 03:19:40 [INFO] [task_scheduler.cc:170] Design space #1:
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(8), T.int64(56), T.int64(56), T.int64(8)), "float32"), p1: T.Buffer((T.int64(4), T.int64(8), T.int64(1), T.int64(1), T.int64(8), T.int64(32)), "float32"), p2: T.Buffer((T.int64(1), T.int64(4), T.int64(1), T.int64(1), T.int64(32)), "float32"), T_add: T.Buffer((T.int64(1), T.int64(4), T.int64(28), T.int64(28), T.int64(32)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        with T.block("root"):
            T.reads()
            T.writes()
            T.block_attr({"meta_schedule.parallel": 768, "meta_schedule.unroll_explicit": 64, "meta_schedule.vectorize": 64})
            conv2d_NCHWc = T.alloc_buffer((T.int64(1), T.int64(4), T.int64(28), T.int64(28), T.int64(32)))
            for n_0, oc_chunk_0, oh_0, ow_0, oc_block_0, n_1, oc_chunk_1, oh_1, ow_1, oc_block_1 in T.grid(T.int64(1), T.int64(1), T.int64(7), T.int64(7), T.int64(2), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1)):
                for ic_0, kh_0, kw_0, n_2, oc_chunk_2, oh_2, ow_2, oc_block_2, ic_1, kh_1, kw_1, n_3, oc_chunk_3, oh_3, ow_3, oc_block_3 in T.grid(T.int64(16), T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(1), T.int64(4), T.int64(4), T.int64(4), T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(4), T.int64(1), T.int64(4)):
                    with T.block("conv2d_NCHWc"):
                        v_n = T.axis.spatial(T.int64(1), n_0 + n_1 + n_2 + n_3)
                        v_oc_chunk = T.axis.spatial(T.int64(4), oc_chunk_0 * T.int64(4) + oc_chunk_1 * T.int64(4) + oc_chunk_2 * T.int64(2) + oc_chunk_3)
                        v_oh = T.axis.spatial(T.int64(28), oh_0 * T.int64(4) + oh_1 * T.int64(4) + oh_2 * T.int64(4) + oh_3)
                        v_ow = T.axis.spatial(T.int64(28), ow_0 * T.int64(4) + ow_1 * T.int64(4) + ow_2 + ow_3)
                        v_oc_block = T.axis.spatial(T.int64(32), oc_block_0 * T.int64(16) + oc_block_1 * T.int64(16) + oc_block_2 * T.int64(4) + oc_block_3)
                        v_ic = T.axis.reduce(T.int64(64), ic_0 * T.int64(4) + ic_1)
                        v_kh = T.axis.reduce(T.int64(1), kh_0 + kh_1)
                        v_kw = T.axis.reduce(T.int64(1), kw_0 + kw_1)
                        T.reads(p0[v_n, v_ic // T.int64(8), v_oh * T.int64(2) + v_kh, v_ow * T.int64(2) + v_kw, v_ic % T.int64(8)], p1[v_oc_chunk, v_ic // T.int64(8), v_kh, v_kw, v_ic % T.int64(8), v_oc_block])
                        T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                        T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                        with T.init():
                            conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = T.float32(0)
                        conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] + p0[v_n, v_ic // T.int64(8), v_oh * T.int64(2) + v_kh, v_ow * T.int64(2) + v_kw, v_ic % T.int64(8)] * p1[v_oc_chunk, v_ic // T.int64(8), v_kh, v_kw, v_ic % T.int64(8), v_oc_block]
                for ax0, ax1, ax2, ax3, ax4 in T.grid(T.int64(1), T.int64(4), T.int64(4), T.int64(4), T.int64(16)):
                    with T.block("T_add"):
                        v_ax0, v_ax1 = T.axis.remap("SS", [ax0, ax1])
                        v_ax2 = T.axis.spatial(T.int64(28), oh_0 * T.int64(4) + ax2)
                        v_ax3 = T.axis.spatial(T.int64(28), ow_0 * T.int64(4) + ax3)
                        v_ax4 = T.axis.spatial(T.int64(32), oc_block_0 * T.int64(16) + ax4)
                        T.reads(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4])
                        T.writes(T_add[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                        T_add[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] + p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4]
b0 = sch.get_block(name="conv2d_NCHWc", func_name="main")
b1 = sch.get_block(name="root", func_name="main")
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.tiling_structure", ann_val="SSRSRS")
l2, l3, l4, l5, l6, l7, l8, l9 = sch.get_loops(block=b0)
v10, v11, v12, v13 = sch.sample_perfect_tile(loop=l2, n=4, max_innermost_factor=64, decision=[1, 1, 1, 1])
l14, l15, l16, l17 = sch.split(loop=l2, factors=[v10, v11, v12, v13], preserve_unit_iters=True)
v18, v19, v20, v21 = sch.sample_perfect_tile(loop=l3, n=4, max_innermost_factor=64, decision=[1, 1, 2, 2])
l22, l23, l24, l25 = sch.split(loop=l3, factors=[v18, v19, v20, v21], preserve_unit_iters=True)
v26, v27, v28, v29 = sch.sample_perfect_tile(loop=l4, n=4, max_innermost_factor=64, decision=[7, 1, 1, 4])
l30, l31, l32, l33 = sch.split(loop=l4, factors=[v26, v27, v28, v29], preserve_unit_iters=True)
v34, v35, v36, v37 = sch.sample_perfect_tile(loop=l5, n=4, max_innermost_factor=64, decision=[7, 1, 4, 1])
l38, l39, l40, l41 = sch.split(loop=l5, factors=[v34, v35, v36, v37], preserve_unit_iters=True)
v42, v43, v44, v45 = sch.sample_perfect_tile(loop=l6, n=4, max_innermost_factor=64, decision=[2, 1, 4, 4])
l46, l47, l48, l49 = sch.split(loop=l6, factors=[v42, v43, v44, v45], preserve_unit_iters=True)
v50, v51 = sch.sample_perfect_tile(loop=l7, n=2, max_innermost_factor=64, decision=[16, 4])
l52, l53 = sch.split(loop=l7, factors=[v50, v51], preserve_unit_iters=True)
v54, v55 = sch.sample_perfect_tile(loop=l8, n=2, max_innermost_factor=64, decision=[1, 1])
l56, l57 = sch.split(loop=l8, factors=[v54, v55], preserve_unit_iters=True)
v58, v59 = sch.sample_perfect_tile(loop=l9, n=2, max_innermost_factor=64, decision=[1, 1])
l60, l61 = sch.split(loop=l9, factors=[v58, v59], preserve_unit_iters=True)
sch.reorder(l14, l22, l30, l38, l46, l15, l23, l31, l39, l47, l52, l56, l60, l16, l24, l32, l40, l48, l53, l57, l61, l17, l25, l33, l41, l49)
b62, = sch.get_consumers(block=b0)
sch.reverse_compute_at(block=b62, loop=l47, preserve_unit_loops=True, index=-1)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.vectorize", ann_val=64)
v63 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=2)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.unroll_explicit", ann_val=v63)
2024-04-29 03:19:40 [INFO] [task_scheduler.cc:170] Design space #2:
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(8), T.int64(56), T.int64(56), T.int64(8)), "float32"), p1: T.Buffer((T.int64(4), T.int64(8), T.int64(1), T.int64(1), T.int64(8), T.int64(32)), "float32"), p2: T.Buffer((T.int64(1), T.int64(4), T.int64(1), T.int64(1), T.int64(32)), "float32"), T_add: T.Buffer((T.int64(1), T.int64(4), T.int64(28), T.int64(28), T.int64(32)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        with T.block("root"):
            T.reads()
            T.writes()
            T.block_attr({"meta_schedule.parallel": 768, "meta_schedule.unroll_explicit": 0, "meta_schedule.vectorize": 64})
            conv2d_NCHWc = T.alloc_buffer((T.int64(1), T.int64(4), T.int64(28), T.int64(28), T.int64(32)))
            for n_0, oc_chunk_0, oh_0, ow_0, oc_block_0 in T.grid(T.int64(1), T.int64(1), T.int64(7), T.int64(7), T.int64(2)):
                for n_1, oc_chunk_1, oh_1, ow_1, oc_block_1, ic_0, kh_0, kw_0, n_2, oc_chunk_2, oh_2, ow_2, oc_block_2, ic_1, kh_1, kw_1, n_3, oc_chunk_3, oh_3, ow_3, oc_block_3 in T.grid(T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(16), T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(1), T.int64(4), T.int64(4), T.int64(4), T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(4), T.int64(1), T.int64(4)):
                    with T.block("conv2d_NCHWc"):
                        v_n = T.axis.spatial(T.int64(1), n_0 + n_1 + n_2 + n_3)
                        v_oc_chunk = T.axis.spatial(T.int64(4), oc_chunk_0 * T.int64(4) + oc_chunk_1 * T.int64(4) + oc_chunk_2 * T.int64(2) + oc_chunk_3)
                        v_oh = T.axis.spatial(T.int64(28), oh_0 * T.int64(4) + oh_1 * T.int64(4) + oh_2 * T.int64(4) + oh_3)
                        v_ow = T.axis.spatial(T.int64(28), ow_0 * T.int64(4) + ow_1 * T.int64(4) + ow_2 + ow_3)
                        v_oc_block = T.axis.spatial(T.int64(32), oc_block_0 * T.int64(16) + oc_block_1 * T.int64(16) + oc_block_2 * T.int64(4) + oc_block_3)
                        v_ic = T.axis.reduce(T.int64(64), ic_0 * T.int64(4) + ic_1)
                        v_kh = T.axis.reduce(T.int64(1), kh_0 + kh_1)
                        v_kw = T.axis.reduce(T.int64(1), kw_0 + kw_1)
                        T.reads(p0[v_n, v_ic // T.int64(8), v_oh * T.int64(2) + v_kh, v_ow * T.int64(2) + v_kw, v_ic % T.int64(8)], p1[v_oc_chunk, v_ic // T.int64(8), v_kh, v_kw, v_ic % T.int64(8), v_oc_block])
                        T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                        T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                        with T.init():
                            conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = T.float32(0)
                        conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] + p0[v_n, v_ic // T.int64(8), v_oh * T.int64(2) + v_kh, v_ow * T.int64(2) + v_kw, v_ic % T.int64(8)] * p1[v_oc_chunk, v_ic // T.int64(8), v_kh, v_kw, v_ic % T.int64(8), v_oc_block]
                for ax0, ax1, ax2, ax3, ax4 in T.grid(T.int64(1), T.int64(4), T.int64(4), T.int64(4), T.int64(16)):
                    with T.block("T_add"):
                        v_ax0, v_ax1 = T.axis.remap("SS", [ax0, ax1])
                        v_ax2 = T.axis.spatial(T.int64(28), oh_0 * T.int64(4) + ax2)
                        v_ax3 = T.axis.spatial(T.int64(28), ow_0 * T.int64(4) + ax3)
                        v_ax4 = T.axis.spatial(T.int64(32), oc_block_0 * T.int64(16) + ax4)
                        T.reads(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4])
                        T.writes(T_add[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                        T_add[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] + p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4]
b0 = sch.get_block(name="conv2d_NCHWc", func_name="main")
b1 = sch.get_block(name="root", func_name="main")
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.tiling_structure", ann_val="SSRSRS")
l2, l3, l4, l5, l6, l7, l8, l9 = sch.get_loops(block=b0)
v10, v11, v12, v13 = sch.sample_perfect_tile(loop=l2, n=4, max_innermost_factor=64, decision=[1, 1, 1, 1])
l14, l15, l16, l17 = sch.split(loop=l2, factors=[v10, v11, v12, v13], preserve_unit_iters=True)
v18, v19, v20, v21 = sch.sample_perfect_tile(loop=l3, n=4, max_innermost_factor=64, decision=[1, 1, 2, 2])
l22, l23, l24, l25 = sch.split(loop=l3, factors=[v18, v19, v20, v21], preserve_unit_iters=True)
v26, v27, v28, v29 = sch.sample_perfect_tile(loop=l4, n=4, max_innermost_factor=64, decision=[7, 1, 1, 4])
l30, l31, l32, l33 = sch.split(loop=l4, factors=[v26, v27, v28, v29], preserve_unit_iters=True)
v34, v35, v36, v37 = sch.sample_perfect_tile(loop=l5, n=4, max_innermost_factor=64, decision=[7, 1, 4, 1])
l38, l39, l40, l41 = sch.split(loop=l5, factors=[v34, v35, v36, v37], preserve_unit_iters=True)
v42, v43, v44, v45 = sch.sample_perfect_tile(loop=l6, n=4, max_innermost_factor=64, decision=[2, 1, 4, 4])
l46, l47, l48, l49 = sch.split(loop=l6, factors=[v42, v43, v44, v45], preserve_unit_iters=True)
v50, v51 = sch.sample_perfect_tile(loop=l7, n=2, max_innermost_factor=64, decision=[16, 4])
l52, l53 = sch.split(loop=l7, factors=[v50, v51], preserve_unit_iters=True)
v54, v55 = sch.sample_perfect_tile(loop=l8, n=2, max_innermost_factor=64, decision=[1, 1])
l56, l57 = sch.split(loop=l8, factors=[v54, v55], preserve_unit_iters=True)
v58, v59 = sch.sample_perfect_tile(loop=l9, n=2, max_innermost_factor=64, decision=[1, 1])
l60, l61 = sch.split(loop=l9, factors=[v58, v59], preserve_unit_iters=True)
sch.reorder(l14, l22, l30, l38, l46, l15, l23, l31, l39, l47, l52, l56, l60, l16, l24, l32, l40, l48, l53, l57, l61, l17, l25, l33, l41, l49)
b62, = sch.get_consumers(block=b0)
sch.reverse_compute_at(block=b62, loop=l46, preserve_unit_loops=True, index=-1)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.vectorize", ann_val=64)
v63 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=0)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.unroll_explicit", ann_val=v63)
2024-04-29 03:24:36 [INFO] [evolutionary_search.cc:713] Generating candidates......
2024-04-29 03:24:36 [INFO] [evolutionary_search.cc:715] Picked top 0 candidate(s) from database
2024-04-29 03:24:38 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x6bd9458)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x3b518e8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x4364b48)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x34f5bb8)]: 0 failure(s)
2024-04-29 03:24:38 [INFO] [evolutionary_search.cc:723] Sampled 512 candidate(s)
2024-04-29 03:24:41 [INFO] [evolutionary_search.cc:621] Evolve iter #0 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x6bd9458)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x3b518e8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x4364b48)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x34f5bb8)]: 0 failure(s)
2024-04-29 03:24:44 [INFO] [evolutionary_search.cc:621] Evolve iter #1 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x6bd9458)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x3b518e8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x4364b48)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x34f5bb8)]: 0 failure(s)
2024-04-29 03:24:47 [INFO] [evolutionary_search.cc:621] Evolve iter #2 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x6bd9458)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x3b518e8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x4364b48)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x34f5bb8)]: 0 failure(s)
2024-04-29 03:24:50 [INFO] [evolutionary_search.cc:621] Evolve iter #3 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x6bd9458)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x3b518e8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x4364b48)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x34f5bb8)]: 0 failure(s)
2024-04-29 03:24:51 [INFO] [evolutionary_search.cc:649] Scores of the best 64 candidates:
[1 : 16]:	0.9995  0.9993  0.9992  0.9978  0.9977  0.9970  0.9969  0.9967  0.9964  0.9962  0.9955  0.9948  0.9938  0.9937  0.9934  0.9932
[17 : 32]:	0.9931  0.9923  0.9921  0.9909  0.9908  0.9907  0.9905  0.9903  0.9901  0.9898  0.9896  0.9885  0.9882  0.9873  0.9867  0.9866
[33 : 48]:	0.9865  0.9865  0.9858  0.9853  0.9837  0.9833  0.9831  0.9829  0.9820  0.9819  0.9808  0.9805  0.9804  0.9802  0.9801  0.9800
[49 : 64]:	0.9786  0.9786  0.9785  0.9779  0.9772  0.9770  0.9766  0.9761  0.9759  0.9755  0.9744  0.9743  0.9738  0.9734  0.9733  0.9731
2024-04-29 03:24:51 [INFO] [evolutionary_search.cc:727] Got 64 candidate(s) with evolutionary search
2024-04-29 03:24:51 [INFO] [evolutionary_search.cc:730] Sending 64 candidates(s) for measurement
2024-04-29 03:56:55 [INFO] [task_scheduler.cc:131] [Task #4: fused_nn_contrib_conv2d_NCHWc_add_2] Trial #1: GFLOPs: 38.6926. Time: 334.5708 us. Best GFLOPs: 38.6926
2024-04-29 03:56:55 [INFO] [task_scheduler.cc:131] [Task #4: fused_nn_contrib_conv2d_NCHWc_add_2] Trial #2: GFLOPs: 3.8343. Time: 3376.2436 us. Best GFLOPs: 38.6926
2024-04-29 03:56:55 [INFO] [task_scheduler.cc:131] [Task #4: fused_nn_contrib_conv2d_NCHWc_add_2] Trial #3: GFLOPs: 189.4902. Time: 68.3170 us. Best GFLOPs: 189.4902
2024-04-29 03:56:55 [INFO] [task_scheduler.cc:131] [Task #4: fused_nn_contrib_conv2d_NCHWc_add_2] Trial #4: GFLOPs: 43.5822. Time: 297.0345 us. Best GFLOPs: 189.4902
2024-04-29 03:56:55 [INFO] [task_scheduler.cc:131] [Task #4: fused_nn_contrib_conv2d_NCHWc_add_2] Trial #5: GFLOPs: 128.6604. Time: 100.6169 us. Best GFLOPs: 189.4902
2024-04-29 03:56:55 [INFO] [task_scheduler.cc:131] [Task #4: fused_nn_contrib_conv2d_NCHWc_add_2] Trial #6: GFLOPs: 27.0058. Time: 479.3571 us. Best GFLOPs: 189.4902
2024-04-29 03:56:55 [INFO] [task_scheduler.cc:131] [Task #4: fused_nn_contrib_conv2d_NCHWc_add_2] Trial #7: GFLOPs: 31.6628. Time: 408.8527 us. Best GFLOPs: 189.4902
2024-04-29 03:56:55 [INFO] [task_scheduler.cc:131] [Task #4: fused_nn_contrib_conv2d_NCHWc_add_2] Trial #8: GFLOPs: 102.8545. Time: 125.8613 us. Best GFLOPs: 189.4902
2024-04-29 03:56:55 [INFO] [task_scheduler.cc:131] [Task #4: fused_nn_contrib_conv2d_NCHWc_add_2] Trial #9: GFLOPs: 8.9386. Time: 1448.2666 us. Best GFLOPs: 189.4902
2024-04-29 03:56:55 [INFO] [task_scheduler.cc:121] [Task #4: fused_nn_contrib_conv2d_NCHWc_add_2] Trial #10: Error in building:
LocalBuilder: Timeout, killed after 30.0 seconds
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(8), T.int64(56), T.int64(56), T.int64(8)), "float32"), p1: T.Buffer((T.int64(4), T.int64(8), T.int64(1), T.int64(1), T.int64(8), T.int64(32)), "float32"), p2: T.Buffer((T.int64(1), T.int64(4), T.int64(1), T.int64(1), T.int64(32)), "float32"), T_add: T.Buffer((T.int64(1), T.int64(4), T.int64(28), T.int64(28), T.int64(32)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        conv2d_NCHWc = T.alloc_buffer((T.int64(1), T.int64(4), T.int64(28), T.int64(28), T.int64(32)))
        for n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_fused in T.parallel(T.int64(8), annotations={"pragma_auto_unroll_max_step": 512, "pragma_unroll_explicit": 1}):
            for n_1, oc_chunk_1, oh_1, ow_1, oc_block_1 in T.grid(T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(2)):
                for n_2_init, oc_chunk_2_init, oh_2_init, ow_2_init, oc_block_2_init, n_3_init, oc_chunk_3_init, oh_3_init, ow_3_init in T.grid(T.int64(1), T.int64(1), T.int64(14), T.int64(4), T.int64(8), T.int64(1), T.int64(1), T.int64(1), T.int64(7)):
                    for oc_block_3_fused_init in T.vectorized(T.int64(2)):
                        with T.block("conv2d_NCHWc_init"):
                            v_n = T.axis.spatial(T.int64(1), n_1 + n_2_init + n_3_init)
                            v_oc_chunk = T.axis.spatial(T.int64(4), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_fused // T.int64(2) + oc_chunk_1 + oc_chunk_2_init + oc_chunk_3_init)
                            v_oh = T.axis.spatial(T.int64(28), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_fused % T.int64(2) * T.int64(14) + oh_1 * T.int64(14) + oh_2_init + oh_3_init)
                            v_ow = T.axis.spatial(T.int64(28), ow_1 * T.int64(28) + ow_2_init * T.int64(7) + ow_3_init)
                            v_oc_block = T.axis.spatial(T.int64(32), oc_block_1 * T.int64(16) + oc_block_2_init * T.int64(2) + oc_block_3_fused_init)
                            T.reads()
                            T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                            T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                            conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = T.float32(0)
                for ic_0, kh_0, kw_0, n_2, oc_chunk_2, oh_2, ow_2, oc_block_2, ic_1, kh_1, kw_1, n_3, oc_chunk_3, oh_3, ow_3 in T.grid(T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(14), T.int64(4), T.int64(8), T.int64(64), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(7)):
                    for oc_block_3_fused in T.vectorized(T.int64(2)):
                        with T.block("conv2d_NCHWc_update"):
                            v_n = T.axis.spatial(T.int64(1), n_1 + n_2 + n_3)
                            v_oc_chunk = T.axis.spatial(T.int64(4), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_fused // T.int64(2) + oc_chunk_1 + oc_chunk_2 + oc_chunk_3)
                            v_oh = T.axis.spatial(T.int64(28), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_fused % T.int64(2) * T.int64(14) + oh_1 * T.int64(14) + oh_2 + oh_3)
                            v_ow = T.axis.spatial(T.int64(28), ow_1 * T.int64(28) + ow_2 * T.int64(7) + ow_3)
                            v_oc_block = T.axis.spatial(T.int64(32), oc_block_1 * T.int64(16) + oc_block_2 * T.int64(2) + oc_block_3_fused)
                            v_ic = T.axis.reduce(T.int64(64), ic_0 * T.int64(64) + ic_1)
                            v_kh = T.axis.reduce(T.int64(1), kh_0 + kh_1)
                            v_kw = T.axis.reduce(T.int64(1), kw_0 + kw_1)
                            T.reads(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block], p0[v_n, v_ic // T.int64(8), v_oh * T.int64(2) + v_kh, v_ow * T.int64(2) + v_kw, v_ic % T.int64(8)], p1[v_oc_chunk, v_ic // T.int64(8), v_kh, v_kw, v_ic % T.int64(8), v_oc_block])
                            T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                            T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                            conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] + p0[v_n, v_ic // T.int64(8), v_oh * T.int64(2) + v_kh, v_ow * T.int64(2) + v_kw, v_ic % T.int64(8)] * p1[v_oc_chunk, v_ic // T.int64(8), v_kh, v_kw, v_ic % T.int64(8), v_oc_block]
            for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(1), T.int64(14), T.int64(28)):
                for ax4_fused in T.vectorized(T.int64(32)):
                    with T.block("T_add"):
                        v_ax0 = T.axis.spatial(T.int64(1), ax0)
                        v_ax1 = T.axis.spatial(T.int64(4), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_fused // T.int64(2) + ax1)
                        v_ax2 = T.axis.spatial(T.int64(28), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_fused % T.int64(2) * T.int64(14) + ax2)
                        v_ax3, v_ax4 = T.axis.remap("SS", [ax3, ax4_fused])
                        T.reads(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4])
                        T.writes(T_add[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                        T_add[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] + p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4]
b0 = sch.get_block(name="conv2d_NCHWc", func_name="main")
b1 = sch.get_block(name="root", func_name="main")
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.tiling_structure", ann_val="SSRSRS")
l2, l3, l4, l5, l6, l7, l8, l9 = sch.get_loops(block=b0)
v10, v11, v12, v13 = sch.sample_perfect_tile(loop=l2, n=4, max_innermost_factor=64, decision=[1, 1, 1, 1])
l14, l15, l16, l17 = sch.split(loop=l2, factors=[v10, v11, v12, v13], preserve_unit_iters=True)
v18, v19, v20, v21 = sch.sample_perfect_tile(loop=l3, n=4, max_innermost_factor=64, decision=[4, 1, 1, 1])
l22, l23, l24, l25 = sch.split(loop=l3, factors=[v18, v19, v20, v21], preserve_unit_iters=True)
v26, v27, v28, v29 = sch.sample_perfect_tile(loop=l4, n=4, max_innermost_factor=64, decision=[2, 1, 14, 1])
l30, l31, l32, l33 = sch.split(loop=l4, factors=[v26, v27, v28, v29], preserve_unit_iters=True)
v34, v35, v36, v37 = sch.sample_perfect_tile(loop=l5, n=4, max_innermost_factor=64, decision=[1, 1, 4, 7])
l38, l39, l40, l41 = sch.split(loop=l5, factors=[v34, v35, v36, v37], preserve_unit_iters=True)
v42, v43, v44, v45 = sch.sample_perfect_tile(loop=l6, n=4, max_innermost_factor=64, decision=[1, 2, 8, 2])
l46, l47, l48, l49 = sch.split(loop=l6, factors=[v42, v43, v44, v45], preserve_unit_iters=True)
v50, v51 = sch.sample_perfect_tile(loop=l7, n=2, max_innermost_factor=64, decision=[1, 64])
l52, l53 = sch.split(loop=l7, factors=[v50, v51], preserve_unit_iters=True)
v54, v55 = sch.sample_perfect_tile(loop=l8, n=2, max_innermost_factor=64, decision=[1, 1])
l56, l57 = sch.split(loop=l8, factors=[v54, v55], preserve_unit_iters=True)
v58, v59 = sch.sample_perfect_tile(loop=l9, n=2, max_innermost_factor=64, decision=[1, 1])
l60, l61 = sch.split(loop=l9, factors=[v58, v59], preserve_unit_iters=True)
sch.reorder(l14, l22, l30, l38, l46, l15, l23, l31, l39, l47, l52, l56, l60, l16, l24, l32, l40, l48, l53, l57, l61, l17, l25, l33, l41, l49)
b62, = sch.get_consumers(block=b0)
sch.reverse_compute_at(block=b62, loop=l46, preserve_unit_loops=True, index=-1)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.vectorize", ann_val=64)
v63 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.unroll_explicit", ann_val=v63)
sch.enter_postproc()
b64 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b64, ann_key="meta_schedule.parallel")
sch.unannotate(block_or_loop=b64, ann_key="meta_schedule.vectorize")
sch.unannotate(block_or_loop=b64, ann_key="meta_schedule.unroll_explicit")
b65, b66 = sch.get_child_blocks(b64)
l67, l68, l69, l70, l71, l72, l73, l74, l75, l76, l77, l78, l79, l80, l81, l82, l83, l84, l85, l86, l87, l88, l89, l90, l91, l92 = sch.get_loops(block=b65)
l93 = sch.fuse(l67, l68, l69, l70, l71, preserve_unit_iters=True)
sch.parallel(loop=l93)
l94 = sch.fuse(l92, preserve_unit_iters=True)
sch.vectorize(loop=l94)
sch.annotate(block_or_loop=l93, ann_key="pragma_auto_unroll_max_step", ann_val=512)
sch.annotate(block_or_loop=l93, ann_key="pragma_unroll_explicit", ann_val=1)
l95, l96, l97, l98, l99, l100 = sch.get_loops(block=b66)
l101 = sch.fuse(l100, preserve_unit_iters=True)
sch.vectorize(loop=l101)
b102 = sch.get_block(name="conv2d_NCHWc", func_name="main")
l103, l104, l105, l106, l107, l108, l109, l110, l111, l112, l113, l114, l115, l116, l117, l118, l119, l120, l121, l122, l123, l124 = sch.get_loops(block=b102)
b125 = sch.decompose_reduction(block=b102, loop=l109)
2024-04-29 03:56:55 [INFO] [task_scheduler.cc:131] [Task #4: fused_nn_contrib_conv2d_NCHWc_add_2] Trial #11: GFLOPs: 2.0582. Time: 6289.8203 us. Best GFLOPs: 189.4902
2024-04-29 03:56:55 [INFO] [task_scheduler.cc:131] [Task #4: fused_nn_contrib_conv2d_NCHWc_add_2] Trial #12: GFLOPs: 20.6443. Time: 627.0701 us. Best GFLOPs: 189.4902
2024-04-29 03:56:55 [INFO] [task_scheduler.cc:131] [Task #4: fused_nn_contrib_conv2d_NCHWc_add_2] Trial #13: GFLOPs: 123.1140. Time: 105.1498 us. Best GFLOPs: 189.4902
2024-04-29 03:56:55 [INFO] [task_scheduler.cc:131] [Task #4: fused_nn_contrib_conv2d_NCHWc_add_2] Trial #14: GFLOPs: 5.2235. Time: 2478.3161 us. Best GFLOPs: 189.4902
2024-04-29 03:56:55 [INFO] [task_scheduler.cc:131] [Task #4: fused_nn_contrib_conv2d_NCHWc_add_2] Trial #15: GFLOPs: 34.9757. Time: 370.1257 us. Best GFLOPs: 189.4902
2024-04-29 03:56:55 [INFO] [task_scheduler.cc:121] [Task #4: fused_nn_contrib_conv2d_NCHWc_add_2] Trial #16: Error in building:
LocalBuilder: Timeout, killed after 30.0 seconds
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(8), T.int64(56), T.int64(56), T.int64(8)), "float32"), p1: T.Buffer((T.int64(4), T.int64(8), T.int64(1), T.int64(1), T.int64(8), T.int64(32)), "float32"), p2: T.Buffer((T.int64(1), T.int64(4), T.int64(1), T.int64(1), T.int64(32)), "float32"), T_add: T.Buffer((T.int64(1), T.int64(4), T.int64(28), T.int64(28), T.int64(32)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        conv2d_NCHWc = T.alloc_buffer((T.int64(1), T.int64(4), T.int64(28), T.int64(28), T.int64(32)))
        for n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_fused in T.parallel(T.int64(784), annotations={"pragma_auto_unroll_max_step": 512, "pragma_unroll_explicit": 1}):
            for n_1, oc_chunk_1, oh_1, ow_1, oc_block_1 in T.grid(T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(4)):
                for n_2_init, oc_chunk_2_init, oh_2_init, ow_2_init, oc_block_2_init, n_3_init, oc_chunk_3_init, oh_3_init, ow_3_init, oc_block_3_init in T.grid(T.int64(1), T.int64(1), T.int64(4), T.int64(2), T.int64(2), T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(1)):
                    with T.block("conv2d_NCHWc_init"):
                        v_n = T.axis.spatial(T.int64(1), n_1 + n_2_init + n_3_init)
                        v_oc_chunk = T.axis.spatial(T.int64(4), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_fused // T.int64(196) + oc_chunk_1 + oc_chunk_2_init + oc_chunk_3_init)
                        v_oh = T.axis.spatial(T.int64(28), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_fused % T.int64(196) // T.int64(28) * T.int64(4) + oh_1 * T.int64(4) + oh_2_init + oh_3_init)
                        v_ow = T.axis.spatial(T.int64(28), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_fused % T.int64(28) // T.int64(4) * T.int64(4) + ow_1 * T.int64(4) + ow_2_init * T.int64(2) + ow_3_init)
                        v_oc_block = T.axis.spatial(T.int64(32), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_fused % T.int64(4) * T.int64(8) + oc_block_1 * T.int64(2) + oc_block_2_init + oc_block_3_init)
                        T.reads()
                        T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                        T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                        conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = T.float32(0)
                for ic_0, kh_0, kw_0, n_2, oc_chunk_2, oh_2, ow_2, oc_block_2, ic_1, kh_1, kw_1, n_3, oc_chunk_3, oh_3, ow_3, oc_block_3 in T.grid(T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(4), T.int64(2), T.int64(2), T.int64(64), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(1)):
                    with T.block("conv2d_NCHWc_update"):
                        v_n = T.axis.spatial(T.int64(1), n_1 + n_2 + n_3)
                        v_oc_chunk = T.axis.spatial(T.int64(4), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_fused // T.int64(196) + oc_chunk_1 + oc_chunk_2 + oc_chunk_3)
                        v_oh = T.axis.spatial(T.int64(28), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_fused % T.int64(196) // T.int64(28) * T.int64(4) + oh_1 * T.int64(4) + oh_2 + oh_3)
                        v_ow = T.axis.spatial(T.int64(28), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_fused % T.int64(28) // T.int64(4) * T.int64(4) + ow_1 * T.int64(4) + ow_2 * T.int64(2) + ow_3)
                        v_oc_block = T.axis.spatial(T.int64(32), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_fused % T.int64(4) * T.int64(8) + oc_block_1 * T.int64(2) + oc_block_2 + oc_block_3)
                        v_ic = T.axis.reduce(T.int64(64), ic_0 * T.int64(64) + ic_1)
                        v_kh = T.axis.reduce(T.int64(1), kh_0 + kh_1)
                        v_kw = T.axis.reduce(T.int64(1), kw_0 + kw_1)
                        T.reads(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block], p0[v_n, v_ic // T.int64(8), v_oh * T.int64(2) + v_kh, v_ow * T.int64(2) + v_kw, v_ic % T.int64(8)], p1[v_oc_chunk, v_ic // T.int64(8), v_kh, v_kw, v_ic % T.int64(8), v_oc_block])
                        T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                        T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                        conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] + p0[v_n, v_ic // T.int64(8), v_oh * T.int64(2) + v_kh, v_ow * T.int64(2) + v_kw, v_ic % T.int64(8)] * p1[v_oc_chunk, v_ic // T.int64(8), v_kh, v_kw, v_ic % T.int64(8), v_oc_block]
                for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(1), T.int64(4), T.int64(4)):
                    for ax4_fused in T.vectorized(T.int64(2)):
                        with T.block("T_add"):
                            v_ax0 = T.axis.spatial(T.int64(1), ax0)
                            v_ax1 = T.axis.spatial(T.int64(4), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_fused // T.int64(196) + ax1)
                            v_ax2 = T.axis.spatial(T.int64(28), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_fused % T.int64(196) // T.int64(28) * T.int64(4) + ax2)
                            v_ax3 = T.axis.spatial(T.int64(28), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_fused % T.int64(28) // T.int64(4) * T.int64(4) + ax3)
                            v_ax4 = T.axis.spatial(T.int64(32), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_fused % T.int64(4) * T.int64(8) + oc_block_1 * T.int64(2) + ax4_fused)
                            T.reads(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4])
                            T.writes(T_add[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                            T_add[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] + p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4]
b0 = sch.get_block(name="conv2d_NCHWc", func_name="main")
b1 = sch.get_block(name="root", func_name="main")
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.tiling_structure", ann_val="SSRSRS")
l2, l3, l4, l5, l6, l7, l8, l9 = sch.get_loops(block=b0)
v10, v11, v12, v13 = sch.sample_perfect_tile(loop=l2, n=4, max_innermost_factor=64, decision=[1, 1, 1, 1])
l14, l15, l16, l17 = sch.split(loop=l2, factors=[v10, v11, v12, v13], preserve_unit_iters=True)
v18, v19, v20, v21 = sch.sample_perfect_tile(loop=l3, n=4, max_innermost_factor=64, decision=[4, 1, 1, 1])
l22, l23, l24, l25 = sch.split(loop=l3, factors=[v18, v19, v20, v21], preserve_unit_iters=True)
v26, v27, v28, v29 = sch.sample_perfect_tile(loop=l4, n=4, max_innermost_factor=64, decision=[7, 1, 4, 1])
l30, l31, l32, l33 = sch.split(loop=l4, factors=[v26, v27, v28, v29], preserve_unit_iters=True)
v34, v35, v36, v37 = sch.sample_perfect_tile(loop=l5, n=4, max_innermost_factor=64, decision=[7, 1, 2, 2])
l38, l39, l40, l41 = sch.split(loop=l5, factors=[v34, v35, v36, v37], preserve_unit_iters=True)
v42, v43, v44, v45 = sch.sample_perfect_tile(loop=l6, n=4, max_innermost_factor=64, decision=[4, 4, 2, 1])
l46, l47, l48, l49 = sch.split(loop=l6, factors=[v42, v43, v44, v45], preserve_unit_iters=True)
v50, v51 = sch.sample_perfect_tile(loop=l7, n=2, max_innermost_factor=64, decision=[1, 64])
l52, l53 = sch.split(loop=l7, factors=[v50, v51], preserve_unit_iters=True)
v54, v55 = sch.sample_perfect_tile(loop=l8, n=2, max_innermost_factor=64, decision=[1, 1])
l56, l57 = sch.split(loop=l8, factors=[v54, v55], preserve_unit_iters=True)
v58, v59 = sch.sample_perfect_tile(loop=l9, n=2, max_innermost_factor=64, decision=[1, 1])
l60, l61 = sch.split(loop=l9, factors=[v58, v59], preserve_unit_iters=True)
sch.reorder(l14, l22, l30, l38, l46, l15, l23, l31, l39, l47, l52, l56, l60, l16, l24, l32, l40, l48, l53, l57, l61, l17, l25, l33, l41, l49)
b62, = sch.get_consumers(block=b0)
sch.reverse_compute_at(block=b62, loop=l47, preserve_unit_loops=True, index=-1)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.vectorize", ann_val=64)
v63 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.unroll_explicit", ann_val=v63)
sch.enter_postproc()
b64 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b64, ann_key="meta_schedule.parallel")
sch.unannotate(block_or_loop=b64, ann_key="meta_schedule.vectorize")
sch.unannotate(block_or_loop=b64, ann_key="meta_schedule.unroll_explicit")
b65, b66 = sch.get_child_blocks(b64)
l67, l68, l69, l70, l71, l72, l73, l74, l75, l76, l77, l78, l79, l80, l81, l82, l83, l84, l85, l86, l87, l88, l89, l90, l91, l92 = sch.get_loops(block=b65)
l93 = sch.fuse(l67, l68, l69, l70, l71, preserve_unit_iters=True)
sch.parallel(loop=l93)
sch.annotate(block_or_loop=l93, ann_key="pragma_auto_unroll_max_step", ann_val=512)
sch.annotate(block_or_loop=l93, ann_key="pragma_unroll_explicit", ann_val=1)
l94, l95, l96, l97, l98, l99, l100, l101, l102, l103, l104 = sch.get_loops(block=b66)
l105 = sch.fuse(l104, preserve_unit_iters=True)
sch.vectorize(loop=l105)
b106 = sch.get_block(name="conv2d_NCHWc", func_name="main")
l107, l108, l109, l110, l111, l112, l113, l114, l115, l116, l117, l118, l119, l120, l121, l122, l123, l124, l125, l126, l127, l128 = sch.get_loops(block=b106)
b129 = sch.decompose_reduction(block=b106, loop=l113)
2024-04-29 03:56:55 [INFO] [task_scheduler.cc:131] [Task #4: fused_nn_contrib_conv2d_NCHWc_add_2] Trial #17: GFLOPs: 63.8137. Time: 202.8624 us. Best GFLOPs: 189.4902
2024-04-29 03:56:55 [INFO] [task_scheduler.cc:131] [Task #4: fused_nn_contrib_conv2d_NCHWc_add_2] Trial #18: GFLOPs: 121.2433. Time: 106.7721 us. Best GFLOPs: 189.4902
2024-04-29 03:56:55 [INFO] [task_scheduler.cc:131] [Task #4: fused_nn_contrib_conv2d_NCHWc_add_2] Trial #19: GFLOPs: 62.8668. Time: 205.9180 us. Best GFLOPs: 189.4902
2024-04-29 03:56:55 [INFO] [task_scheduler.cc:121] [Task #4: fused_nn_contrib_conv2d_NCHWc_add_2] Trial #20: Error in building:
LocalBuilder: Timeout, killed after 30.0 seconds
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(8), T.int64(56), T.int64(56), T.int64(8)), "float32"), p1: T.Buffer((T.int64(4), T.int64(8), T.int64(1), T.int64(1), T.int64(8), T.int64(32)), "float32"), p2: T.Buffer((T.int64(1), T.int64(4), T.int64(1), T.int64(1), T.int64(32)), "float32"), T_add: T.Buffer((T.int64(1), T.int64(4), T.int64(28), T.int64(28), T.int64(32)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        conv2d_NCHWc = T.alloc_buffer((T.int64(1), T.int64(4), T.int64(28), T.int64(28), T.int64(32)))
        for n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_fused in T.parallel(T.int64(2), annotations={"pragma_auto_unroll_max_step": 512, "pragma_unroll_explicit": 1}):
            for n_1, oc_chunk_1, oh_1, ow_1, oc_block_1 in T.grid(T.int64(1), T.int64(1), T.int64(4), T.int64(1), T.int64(2)):
                for n_2_init, oc_chunk_2_init, oh_2_init, ow_2_init, oc_block_2_init, n_3_init, oc_chunk_3_init, oh_3_init, ow_3_init in T.grid(T.int64(1), T.int64(1), T.int64(1), T.int64(14), T.int64(1), T.int64(1), T.int64(4), T.int64(7), T.int64(1)):
                    for oc_block_3_fused_init in T.vectorized(T.int64(16)):
                        with T.block("conv2d_NCHWc_init"):
                            v_n = T.axis.spatial(T.int64(1), n_1 + n_2_init + n_3_init)
                            v_oc_chunk = T.axis.spatial(T.int64(4), oc_chunk_1 * T.int64(4) + oc_chunk_2_init * T.int64(4) + oc_chunk_3_init)
                            v_oh = T.axis.spatial(T.int64(28), oh_1 * T.int64(7) + oh_2_init * T.int64(7) + oh_3_init)
                            v_ow = T.axis.spatial(T.int64(28), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_fused * T.int64(14) + ow_1 * T.int64(14) + ow_2_init + ow_3_init)
                            v_oc_block = T.axis.spatial(T.int64(32), oc_block_1 * T.int64(16) + oc_block_2_init * T.int64(16) + oc_block_3_fused_init)
                            T.reads()
                            T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                            T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                            conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = T.float32(0)
                for ic_0, kh_0, kw_0, n_2, oc_chunk_2, oh_2, ow_2, oc_block_2, ic_1, kh_1, kw_1, n_3, oc_chunk_3, oh_3, ow_3 in T.grid(T.int64(64), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(14), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(4), T.int64(7), T.int64(1)):
                    for oc_block_3_fused in T.vectorized(T.int64(16)):
                        with T.block("conv2d_NCHWc_update"):
                            v_n = T.axis.spatial(T.int64(1), n_1 + n_2 + n_3)
                            v_oc_chunk = T.axis.spatial(T.int64(4), oc_chunk_1 * T.int64(4) + oc_chunk_2 * T.int64(4) + oc_chunk_3)
                            v_oh = T.axis.spatial(T.int64(28), oh_1 * T.int64(7) + oh_2 * T.int64(7) + oh_3)
                            v_ow = T.axis.spatial(T.int64(28), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_fused * T.int64(14) + ow_1 * T.int64(14) + ow_2 + ow_3)
                            v_oc_block = T.axis.spatial(T.int64(32), oc_block_1 * T.int64(16) + oc_block_2 * T.int64(16) + oc_block_3_fused)
                            v_ic = T.axis.reduce(T.int64(64), ic_0 + ic_1)
                            v_kh = T.axis.reduce(T.int64(1), kh_0 + kh_1)
                            v_kw = T.axis.reduce(T.int64(1), kw_0 + kw_1)
                            T.reads(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block], p0[v_n, v_ic // T.int64(8), v_oh * T.int64(2) + v_kh, v_ow * T.int64(2) + v_kw, v_ic % T.int64(8)], p1[v_oc_chunk, v_ic // T.int64(8), v_kh, v_kw, v_ic % T.int64(8), v_oc_block])
                            T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                            T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                            conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] + p0[v_n, v_ic // T.int64(8), v_oh * T.int64(2) + v_kh, v_ow * T.int64(2) + v_kw, v_ic % T.int64(8)] * p1[v_oc_chunk, v_ic // T.int64(8), v_kh, v_kw, v_ic % T.int64(8), v_oc_block]
            for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(4), T.int64(28), T.int64(14)):
                for ax4_fused in T.vectorized(T.int64(32)):
                    with T.block("T_add"):
                        v_ax0, v_ax1, v_ax2 = T.axis.remap("SSS", [ax0, ax1, ax2])
                        v_ax3 = T.axis.spatial(T.int64(28), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_fused * T.int64(14) + ax3)
                        v_ax4 = T.axis.spatial(T.int64(32), ax4_fused)
                        T.reads(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4])
                        T.writes(T_add[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                        T_add[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] + p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4]
b0 = sch.get_block(name="conv2d_NCHWc", func_name="main")
b1 = sch.get_block(name="root", func_name="main")
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.tiling_structure", ann_val="SSRSRS")
l2, l3, l4, l5, l6, l7, l8, l9 = sch.get_loops(block=b0)
v10, v11, v12, v13 = sch.sample_perfect_tile(loop=l2, n=4, max_innermost_factor=64, decision=[1, 1, 1, 1])
l14, l15, l16, l17 = sch.split(loop=l2, factors=[v10, v11, v12, v13], preserve_unit_iters=True)
v18, v19, v20, v21 = sch.sample_perfect_tile(loop=l3, n=4, max_innermost_factor=64, decision=[1, 1, 1, 4])
l22, l23, l24, l25 = sch.split(loop=l3, factors=[v18, v19, v20, v21], preserve_unit_iters=True)
v26, v27, v28, v29 = sch.sample_perfect_tile(loop=l4, n=4, max_innermost_factor=64, decision=[1, 4, 1, 7])
l30, l31, l32, l33 = sch.split(loop=l4, factors=[v26, v27, v28, v29], preserve_unit_iters=True)
v34, v35, v36, v37 = sch.sample_perfect_tile(loop=l5, n=4, max_innermost_factor=64, decision=[2, 1, 14, 1])
l38, l39, l40, l41 = sch.split(loop=l5, factors=[v34, v35, v36, v37], preserve_unit_iters=True)
v42, v43, v44, v45 = sch.sample_perfect_tile(loop=l6, n=4, max_innermost_factor=64, decision=[1, 2, 1, 16])
l46, l47, l48, l49 = sch.split(loop=l6, factors=[v42, v43, v44, v45], preserve_unit_iters=True)
v50, v51 = sch.sample_perfect_tile(loop=l7, n=2, max_innermost_factor=64, decision=[64, 1])
l52, l53 = sch.split(loop=l7, factors=[v50, v51], preserve_unit_iters=True)
v54, v55 = sch.sample_perfect_tile(loop=l8, n=2, max_innermost_factor=64, decision=[1, 1])
l56, l57 = sch.split(loop=l8, factors=[v54, v55], preserve_unit_iters=True)
v58, v59 = sch.sample_perfect_tile(loop=l9, n=2, max_innermost_factor=64, decision=[1, 1])
l60, l61 = sch.split(loop=l9, factors=[v58, v59], preserve_unit_iters=True)
sch.reorder(l14, l22, l30, l38, l46, l15, l23, l31, l39, l47, l52, l56, l60, l16, l24, l32, l40, l48, l53, l57, l61, l17, l25, l33, l41, l49)
b62, = sch.get_consumers(block=b0)
sch.reverse_compute_at(block=b62, loop=l46, preserve_unit_loops=True, index=-1)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.vectorize", ann_val=64)
v63 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.unroll_explicit", ann_val=v63)
sch.enter_postproc()
b64 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b64, ann_key="meta_schedule.parallel")
sch.unannotate(block_or_loop=b64, ann_key="meta_schedule.vectorize")
sch.unannotate(block_or_loop=b64, ann_key="meta_schedule.unroll_explicit")
b65, b66 = sch.get_child_blocks(b64)
l67, l68, l69, l70, l71, l72, l73, l74, l75, l76, l77, l78, l79, l80, l81, l82, l83, l84, l85, l86, l87, l88, l89, l90, l91, l92 = sch.get_loops(block=b65)
l93 = sch.fuse(l67, l68, l69, l70, l71, preserve_unit_iters=True)
sch.parallel(loop=l93)
l94 = sch.fuse(l92, preserve_unit_iters=True)
sch.vectorize(loop=l94)
sch.annotate(block_or_loop=l93, ann_key="pragma_auto_unroll_max_step", ann_val=512)
sch.annotate(block_or_loop=l93, ann_key="pragma_unroll_explicit", ann_val=1)
l95, l96, l97, l98, l99, l100 = sch.get_loops(block=b66)
l101 = sch.fuse(l100, preserve_unit_iters=True)
sch.vectorize(loop=l101)
b102 = sch.get_block(name="conv2d_NCHWc", func_name="main")
l103, l104, l105, l106, l107, l108, l109, l110, l111, l112, l113, l114, l115, l116, l117, l118, l119, l120, l121, l122, l123, l124 = sch.get_loops(block=b102)
b125 = sch.decompose_reduction(block=b102, loop=l109)
2024-04-29 03:56:55 [INFO] [task_scheduler.cc:131] [Task #4: fused_nn_contrib_conv2d_NCHWc_add_2] Trial #21: GFLOPs: 34.3733. Time: 376.6125 us. Best GFLOPs: 189.4902
2024-04-29 03:56:55 [INFO] [task_scheduler.cc:131] [Task #4: fused_nn_contrib_conv2d_NCHWc_add_2] Trial #22: GFLOPs: 82.7681. Time: 156.4058 us. Best GFLOPs: 189.4902
2024-04-29 03:56:55 [INFO] [task_scheduler.cc:131] [Task #4: fused_nn_contrib_conv2d_NCHWc_add_2] Trial #23: GFLOPs: 62.0336. Time: 208.6839 us. Best GFLOPs: 189.4902
2024-04-29 03:56:55 [INFO] [task_scheduler.cc:121] [Task #4: fused_nn_contrib_conv2d_NCHWc_add_2] Trial #24: Error in building:
LocalBuilder: Timeout, killed after 30.0 seconds
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(8), T.int64(56), T.int64(56), T.int64(8)), "float32"), p1: T.Buffer((T.int64(4), T.int64(8), T.int64(1), T.int64(1), T.int64(8), T.int64(32)), "float32"), p2: T.Buffer((T.int64(1), T.int64(4), T.int64(1), T.int64(1), T.int64(32)), "float32"), T_add: T.Buffer((T.int64(1), T.int64(4), T.int64(28), T.int64(28), T.int64(32)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        conv2d_NCHWc = T.alloc_buffer((T.int64(1), T.int64(4), T.int64(28), T.int64(28), T.int64(32)))
        for n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused in T.parallel(T.int64(448), annotations={"pragma_auto_unroll_max_step": 512, "pragma_unroll_explicit": 1}):
            for n_2_init, oc_chunk_2_init, oh_2_init, ow_2_init, oc_block_2_init, n_3_init, oc_chunk_3_init, oh_3_init, ow_3_init in T.grid(T.int64(1), T.int64(2), T.int64(2), T.int64(7), T.int64(2), T.int64(1), T.int64(1), T.int64(1), T.int64(2)):
                for oc_block_3_fused_init in T.vectorized(T.int64(2)):
                    with T.block("conv2d_NCHWc_init"):
                        v_n = T.axis.spatial(T.int64(1), n_2_init + n_3_init)
                        v_oc_chunk = T.axis.spatial(T.int64(4), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused // T.int64(224) * T.int64(2) + oc_chunk_2_init + oc_chunk_3_init)
                        v_oh = T.axis.spatial(T.int64(28), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused % T.int64(224) // T.int64(16) * T.int64(2) + oh_2_init + oh_3_init)
                        v_ow = T.axis.spatial(T.int64(28), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused % T.int64(16) // T.int64(8) * T.int64(14) + ow_2_init * T.int64(2) + ow_3_init)
                        v_oc_block = T.axis.spatial(T.int64(32), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused % T.int64(8) * T.int64(4) + oc_block_2_init * T.int64(2) + oc_block_3_fused_init)
                        T.reads()
                        T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                        T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                        conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = T.float32(0)
            for ic_0, kh_0, kw_0, n_2, oc_chunk_2, oh_2, ow_2, oc_block_2, ic_1, kh_1, kw_1, n_3, oc_chunk_3, oh_3, ow_3 in T.grid(T.int64(8), T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(2), T.int64(7), T.int64(2), T.int64(8), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(2)):
                for oc_block_3_fused in T.vectorized(T.int64(2)):
                    with T.block("conv2d_NCHWc_update"):
                        v_n = T.axis.spatial(T.int64(1), n_2 + n_3)
                        v_oc_chunk = T.axis.spatial(T.int64(4), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused // T.int64(224) * T.int64(2) + oc_chunk_2 + oc_chunk_3)
                        v_oh = T.axis.spatial(T.int64(28), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused % T.int64(224) // T.int64(16) * T.int64(2) + oh_2 + oh_3)
                        v_ow = T.axis.spatial(T.int64(28), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused % T.int64(16) // T.int64(8) * T.int64(14) + ow_2 * T.int64(2) + ow_3)
                        v_oc_block = T.axis.spatial(T.int64(32), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused % T.int64(8) * T.int64(4) + oc_block_2 * T.int64(2) + oc_block_3_fused)
                        v_ic = T.axis.reduce(T.int64(64), ic_0 * T.int64(8) + ic_1)
                        v_kh = T.axis.reduce(T.int64(1), kh_0 + kh_1)
                        v_kw = T.axis.reduce(T.int64(1), kw_0 + kw_1)
                        T.reads(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block], p0[v_n, v_ic // T.int64(8), v_oh * T.int64(2) + v_kh, v_ow * T.int64(2) + v_kw, v_ic % T.int64(8)], p1[v_oc_chunk, v_ic // T.int64(8), v_kh, v_kw, v_ic % T.int64(8), v_oc_block])
                        T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                        T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                        conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] + p0[v_n, v_ic // T.int64(8), v_oh * T.int64(2) + v_kh, v_ow * T.int64(2) + v_kw, v_ic % T.int64(8)] * p1[v_oc_chunk, v_ic // T.int64(8), v_kh, v_kw, v_ic % T.int64(8), v_oc_block]
        for ax0_ax1_ax2_ax3_ax4_fused_0 in T.parallel(T.int64(1568)):
            for ax0_ax1_ax2_ax3_ax4_fused_1 in T.vectorized(T.int64(64)):
                with T.block("T_add"):
                    v_ax0 = T.axis.spatial(T.int64(1), T.int64(0))
                    v_ax1 = T.axis.spatial(T.int64(4), (ax0_ax1_ax2_ax3_ax4_fused_0 * T.int64(64) + ax0_ax1_ax2_ax3_ax4_fused_1) // T.int64(25088))
                    v_ax2 = T.axis.spatial(T.int64(28), (ax0_ax1_ax2_ax3_ax4_fused_0 * T.int64(64) + ax0_ax1_ax2_ax3_ax4_fused_1) % T.int64(25088) // T.int64(896))
                    v_ax3 = T.axis.spatial(T.int64(28), (ax0_ax1_ax2_ax3_ax4_fused_0 * T.int64(64) + ax0_ax1_ax2_ax3_ax4_fused_1) % T.int64(896) // T.int64(32))
                    v_ax4 = T.axis.spatial(T.int64(32), (ax0_ax1_ax2_ax3_ax4_fused_0 * T.int64(64) + ax0_ax1_ax2_ax3_ax4_fused_1) % T.int64(32))
                    T.reads(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4])
                    T.writes(T_add[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                    T_add[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] + p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4]
b0 = sch.get_block(name="conv2d_NCHWc", func_name="main")
b1 = sch.get_block(name="root", func_name="main")
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.tiling_structure", ann_val="SSRSRS")
l2, l3, l4, l5, l6, l7, l8, l9 = sch.get_loops(block=b0)
v10, v11, v12, v13 = sch.sample_perfect_tile(loop=l2, n=4, max_innermost_factor=64, decision=[1, 1, 1, 1])
l14, l15, l16, l17 = sch.split(loop=l2, factors=[v10, v11, v12, v13], preserve_unit_iters=True)
v18, v19, v20, v21 = sch.sample_perfect_tile(loop=l3, n=4, max_innermost_factor=64, decision=[2, 1, 2, 1])
l22, l23, l24, l25 = sch.split(loop=l3, factors=[v18, v19, v20, v21], preserve_unit_iters=True)
v26, v27, v28, v29 = sch.sample_perfect_tile(loop=l4, n=4, max_innermost_factor=64, decision=[14, 1, 2, 1])
l30, l31, l32, l33 = sch.split(loop=l4, factors=[v26, v27, v28, v29], preserve_unit_iters=True)
v34, v35, v36, v37 = sch.sample_perfect_tile(loop=l5, n=4, max_innermost_factor=64, decision=[2, 1, 7, 2])
l38, l39, l40, l41 = sch.split(loop=l5, factors=[v34, v35, v36, v37], preserve_unit_iters=True)
v42, v43, v44, v45 = sch.sample_perfect_tile(loop=l6, n=4, max_innermost_factor=64, decision=[8, 1, 2, 2])
l46, l47, l48, l49 = sch.split(loop=l6, factors=[v42, v43, v44, v45], preserve_unit_iters=True)
v50, v51 = sch.sample_perfect_tile(loop=l7, n=2, max_innermost_factor=64, decision=[8, 8])
l52, l53 = sch.split(loop=l7, factors=[v50, v51], preserve_unit_iters=True)
v54, v55 = sch.sample_perfect_tile(loop=l8, n=2, max_innermost_factor=64, decision=[1, 1])
l56, l57 = sch.split(loop=l8, factors=[v54, v55], preserve_unit_iters=True)
v58, v59 = sch.sample_perfect_tile(loop=l9, n=2, max_innermost_factor=64, decision=[1, 1])
l60, l61 = sch.split(loop=l9, factors=[v58, v59], preserve_unit_iters=True)
sch.reorder(l14, l22, l30, l38, l46, l15, l23, l31, l39, l47, l52, l56, l60, l16, l24, l32, l40, l48, l53, l57, l61, l17, l25, l33, l41, l49)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.vectorize", ann_val=64)
v62 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.unroll_explicit", ann_val=v62)
sch.enter_postproc()
b63 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b63, ann_key="meta_schedule.parallel")
sch.unannotate(block_or_loop=b63, ann_key="meta_schedule.vectorize")
sch.unannotate(block_or_loop=b63, ann_key="meta_schedule.unroll_explicit")
b64, b65 = sch.get_child_blocks(b63)
l66, l67, l68, l69, l70, l71, l72, l73, l74, l75, l76, l77, l78, l79, l80, l81, l82, l83, l84, l85, l86, l87, l88, l89, l90, l91 = sch.get_loops(block=b64)
l92 = sch.fuse(l66, l67, l68, l69, l70, l71, l72, l73, l74, l75, preserve_unit_iters=True)
sch.parallel(loop=l92)
l93 = sch.fuse(l91, preserve_unit_iters=True)
sch.vectorize(loop=l93)
sch.annotate(block_or_loop=l92, ann_key="pragma_auto_unroll_max_step", ann_val=512)
sch.annotate(block_or_loop=l92, ann_key="pragma_unroll_explicit", ann_val=1)
l94, l95, l96, l97, l98 = sch.get_loops(block=b65)
l99 = sch.fuse(l94, l95, l96, l97, l98, preserve_unit_iters=True)
l100, l101 = sch.split(loop=l99, factors=[None, 64], preserve_unit_iters=True)
sch.parallel(loop=l100)
sch.vectorize(loop=l101)
b102 = sch.get_block(name="conv2d_NCHWc", func_name="main")
l103, l104, l105, l106, l107, l108, l109, l110, l111, l112, l113, l114, l115, l116, l117, l118, l119 = sch.get_loops(block=b102)
b120 = sch.decompose_reduction(block=b102, loop=l104)
2024-04-29 03:56:55 [INFO] [task_scheduler.cc:131] [Task #4: fused_nn_contrib_conv2d_NCHWc_add_2] Trial #25: GFLOPs: 146.3412. Time: 88.4604 us. Best GFLOPs: 189.4902
2024-04-29 03:56:55 [INFO] [task_scheduler.cc:131] [Task #4: fused_nn_contrib_conv2d_NCHWc_add_2] Trial #26: GFLOPs: 30.7587. Time: 420.8698 us. Best GFLOPs: 189.4902
2024-04-29 03:56:55 [INFO] [task_scheduler.cc:131] [Task #4: fused_nn_contrib_conv2d_NCHWc_add_2] Trial #27: GFLOPs: 42.0654. Time: 307.7445 us. Best GFLOPs: 189.4902
2024-04-29 03:56:55 [INFO] [task_scheduler.cc:131] [Task #4: fused_nn_contrib_conv2d_NCHWc_add_2] Trial #28: GFLOPs: 67.5508. Time: 191.6395 us. Best GFLOPs: 189.4902
2024-04-29 03:56:55 [INFO] [task_scheduler.cc:131] [Task #4: fused_nn_contrib_conv2d_NCHWc_add_2] Trial #29: GFLOPs: 4.1206. Time: 3141.6223 us. Best GFLOPs: 189.4902
2024-04-29 03:56:55 [INFO] [task_scheduler.cc:131] [Task #4: fused_nn_contrib_conv2d_NCHWc_add_2] Trial #30: GFLOPs: 42.9482. Time: 301.4190 us. Best GFLOPs: 189.4902
2024-04-29 03:56:55 [INFO] [task_scheduler.cc:131] [Task #4: fused_nn_contrib_conv2d_NCHWc_add_2] Trial #31: GFLOPs: 104.0303. Time: 124.4389 us. Best GFLOPs: 189.4902
2024-04-29 03:56:55 [INFO] [task_scheduler.cc:131] [Task #4: fused_nn_contrib_conv2d_NCHWc_add_2] Trial #32: GFLOPs: 4.8508. Time: 2668.7031 us. Best GFLOPs: 189.4902
2024-04-29 03:56:55 [INFO] [task_scheduler.cc:131] [Task #4: fused_nn_contrib_conv2d_NCHWc_add_2] Trial #33: GFLOPs: 61.3151. Time: 211.1292 us. Best GFLOPs: 189.4902
2024-04-29 03:56:55 [INFO] [task_scheduler.cc:131] [Task #4: fused_nn_contrib_conv2d_NCHWc_add_2] Trial #34: GFLOPs: 77.5423. Time: 166.9464 us. Best GFLOPs: 189.4902
2024-04-29 03:56:55 [INFO] [task_scheduler.cc:131] [Task #4: fused_nn_contrib_conv2d_NCHWc_add_2] Trial #35: GFLOPs: 26.3086. Time: 492.0590 us. Best GFLOPs: 189.4902
2024-04-29 03:56:55 [INFO] [task_scheduler.cc:131] [Task #4: fused_nn_contrib_conv2d_NCHWc_add_2] Trial #36: GFLOPs: 83.6507. Time: 154.7555 us. Best GFLOPs: 189.4902
2024-04-29 03:56:55 [INFO] [task_scheduler.cc:131] [Task #4: fused_nn_contrib_conv2d_NCHWc_add_2] Trial #37: GFLOPs: 87.9971. Time: 147.1118 us. Best GFLOPs: 189.4902
2024-04-29 03:56:55 [INFO] [task_scheduler.cc:131] [Task #4: fused_nn_contrib_conv2d_NCHWc_add_2] Trial #38: GFLOPs: 51.4463. Time: 251.6294 us. Best GFLOPs: 189.4902
2024-04-29 03:56:55 [INFO] [task_scheduler.cc:131] [Task #4: fused_nn_contrib_conv2d_NCHWc_add_2] Trial #39: GFLOPs: 5.5947. Time: 2313.8610 us. Best GFLOPs: 189.4902
2024-04-29 03:56:55 [INFO] [task_scheduler.cc:131] [Task #4: fused_nn_contrib_conv2d_NCHWc_add_2] Trial #40: GFLOPs: 6.2888. Time: 2058.4845 us. Best GFLOPs: 189.4902
2024-04-29 03:56:55 [INFO] [task_scheduler.cc:131] [Task #4: fused_nn_contrib_conv2d_NCHWc_add_2] Trial #41: GFLOPs: 11.8816. Time: 1089.5332 us. Best GFLOPs: 189.4902
2024-04-29 03:56:55 [INFO] [task_scheduler.cc:131] [Task #4: fused_nn_contrib_conv2d_NCHWc_add_2] Trial #42: GFLOPs: 75.2199. Time: 172.1009 us. Best GFLOPs: 189.4902
2024-04-29 03:56:55 [INFO] [task_scheduler.cc:131] [Task #4: fused_nn_contrib_conv2d_NCHWc_add_2] Trial #43: GFLOPs: 75.9965. Time: 170.3422 us. Best GFLOPs: 189.4902
2024-04-29 03:56:55 [INFO] [task_scheduler.cc:131] [Task #4: fused_nn_contrib_conv2d_NCHWc_add_2] Trial #44: GFLOPs: 46.0428. Time: 281.1601 us. Best GFLOPs: 189.4902
2024-04-29 03:56:55 [INFO] [task_scheduler.cc:131] [Task #4: fused_nn_contrib_conv2d_NCHWc_add_2] Trial #45: GFLOPs: 44.1629. Time: 293.1286 us. Best GFLOPs: 189.4902
2024-04-29 03:56:55 [INFO] [task_scheduler.cc:131] [Task #4: fused_nn_contrib_conv2d_NCHWc_add_2] Trial #46: GFLOPs: 119.0701. Time: 108.7209 us. Best GFLOPs: 189.4902
2024-04-29 03:56:55 [INFO] [task_scheduler.cc:131] [Task #4: fused_nn_contrib_conv2d_NCHWc_add_2] Trial #47: GFLOPs: 72.1942. Time: 179.3137 us. Best GFLOPs: 189.4902
2024-04-29 03:56:55 [INFO] [task_scheduler.cc:131] [Task #4: fused_nn_contrib_conv2d_NCHWc_add_2] Trial #48: GFLOPs: 19.4202. Time: 666.5965 us. Best GFLOPs: 189.4902
2024-04-29 03:56:55 [INFO] [task_scheduler.cc:131] [Task #4: fused_nn_contrib_conv2d_NCHWc_add_2] Trial #49: GFLOPs: 27.6224. Time: 468.6565 us. Best GFLOPs: 189.4902
2024-04-29 03:56:55 [INFO] [task_scheduler.cc:131] [Task #4: fused_nn_contrib_conv2d_NCHWc_add_2] Trial #50: GFLOPs: 83.6878. Time: 154.6869 us. Best GFLOPs: 189.4902
2024-04-29 03:56:55 [INFO] [task_scheduler.cc:131] [Task #4: fused_nn_contrib_conv2d_NCHWc_add_2] Trial #51: GFLOPs: 68.4089. Time: 189.2357 us. Best GFLOPs: 189.4902
2024-04-29 03:56:55 [INFO] [task_scheduler.cc:131] [Task #4: fused_nn_contrib_conv2d_NCHWc_add_2] Trial #52: GFLOPs: 78.7483. Time: 164.3896 us. Best GFLOPs: 189.4902
2024-04-29 03:56:55 [INFO] [task_scheduler.cc:131] [Task #4: fused_nn_contrib_conv2d_NCHWc_add_2] Trial #53: GFLOPs: 4.8279. Time: 2681.3606 us. Best GFLOPs: 189.4902
2024-04-29 03:56:55 [INFO] [task_scheduler.cc:131] [Task #4: fused_nn_contrib_conv2d_NCHWc_add_2] Trial #54: GFLOPs: 59.3263. Time: 218.2068 us. Best GFLOPs: 189.4902
2024-04-29 03:56:55 [INFO] [task_scheduler.cc:131] [Task #4: fused_nn_contrib_conv2d_NCHWc_add_2] Trial #55: GFLOPs: 9.0436. Time: 1431.4409 us. Best GFLOPs: 189.4902
2024-04-29 03:56:55 [INFO] [task_scheduler.cc:131] [Task #4: fused_nn_contrib_conv2d_NCHWc_add_2] Trial #56: GFLOPs: 118.5224. Time: 109.2233 us. Best GFLOPs: 189.4902
2024-04-29 03:56:55 [INFO] [task_scheduler.cc:131] [Task #4: fused_nn_contrib_conv2d_NCHWc_add_2] Trial #57: GFLOPs: 3.3949. Time: 3813.1763 us. Best GFLOPs: 189.4902
2024-04-29 03:56:55 [INFO] [task_scheduler.cc:131] [Task #4: fused_nn_contrib_conv2d_NCHWc_add_2] Trial #58: GFLOPs: 51.8462. Time: 249.6885 us. Best GFLOPs: 189.4902
2024-04-29 03:56:55 [INFO] [task_scheduler.cc:131] [Task #4: fused_nn_contrib_conv2d_NCHWc_add_2] Trial #59: GFLOPs: 10.7657. Time: 1202.4692 us. Best GFLOPs: 189.4902
2024-04-29 03:56:55 [INFO] [task_scheduler.cc:131] [Task #4: fused_nn_contrib_conv2d_NCHWc_add_2] Trial #60: GFLOPs: 60.0753. Time: 215.4864 us. Best GFLOPs: 189.4902
2024-04-29 03:56:55 [INFO] [task_scheduler.cc:121] [Task #4: fused_nn_contrib_conv2d_NCHWc_add_2] Trial #61: Error in building:
LocalBuilder: Timeout, killed after 30.0 seconds
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(8), T.int64(56), T.int64(56), T.int64(8)), "float32"), p1: T.Buffer((T.int64(4), T.int64(8), T.int64(1), T.int64(1), T.int64(8), T.int64(32)), "float32"), p2: T.Buffer((T.int64(1), T.int64(4), T.int64(1), T.int64(1), T.int64(32)), "float32"), T_add: T.Buffer((T.int64(1), T.int64(4), T.int64(28), T.int64(28), T.int64(32)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        conv2d_NCHWc = T.alloc_buffer((T.int64(1), T.int64(4), T.int64(28), T.int64(28), T.int64(32)))
        for n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused in T.parallel(T.int64(1792), annotations={"pragma_auto_unroll_max_step": 512, "pragma_unroll_explicit": 1}):
            for n_2_init, oc_chunk_2_init, oh_2_init, ow_2_init, oc_block_2_init, n_3_init, oc_chunk_3_init, oh_3_init, ow_3_init, oc_block_3_init in T.grid(T.int64(1), T.int64(1), T.int64(7), T.int64(2), T.int64(2), T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(1)):
                with T.block("conv2d_NCHWc_init"):
                    v_n = T.axis.spatial(T.int64(1), n_2_init + n_3_init)
                    v_oc_chunk = T.axis.spatial(T.int64(4), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused // T.int64(448) + oc_chunk_2_init + oc_chunk_3_init)
                    v_oh = T.axis.spatial(T.int64(28), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused % T.int64(448) // T.int64(112) * T.int64(7) + oh_2_init + oh_3_init)
                    v_ow = T.axis.spatial(T.int64(28), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused % T.int64(112) // T.int64(16) * T.int64(4) + ow_2_init * T.int64(2) + ow_3_init)
                    v_oc_block = T.axis.spatial(T.int64(32), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused % T.int64(16) * T.int64(2) + oc_block_2_init + oc_block_3_init)
                    T.reads()
                    T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                    T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                    conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = T.float32(0)
            for ic_0, kh_0, kw_0, n_2, oc_chunk_2, oh_2, ow_2, oc_block_2, ic_1, kh_1, kw_1, n_3, oc_chunk_3, oh_3, ow_3, oc_block_3 in T.grid(T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(7), T.int64(2), T.int64(2), T.int64(64), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(1)):
                with T.block("conv2d_NCHWc_update"):
                    v_n = T.axis.spatial(T.int64(1), n_2 + n_3)
                    v_oc_chunk = T.axis.spatial(T.int64(4), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused // T.int64(448) + oc_chunk_2 + oc_chunk_3)
                    v_oh = T.axis.spatial(T.int64(28), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused % T.int64(448) // T.int64(112) * T.int64(7) + oh_2 + oh_3)
                    v_ow = T.axis.spatial(T.int64(28), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused % T.int64(112) // T.int64(16) * T.int64(4) + ow_2 * T.int64(2) + ow_3)
                    v_oc_block = T.axis.spatial(T.int64(32), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused % T.int64(16) * T.int64(2) + oc_block_2 + oc_block_3)
                    v_ic = T.axis.reduce(T.int64(64), ic_0 * T.int64(64) + ic_1)
                    v_kh = T.axis.reduce(T.int64(1), kh_0 + kh_1)
                    v_kw = T.axis.reduce(T.int64(1), kw_0 + kw_1)
                    T.reads(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block], p0[v_n, v_ic // T.int64(8), v_oh * T.int64(2) + v_kh, v_ow * T.int64(2) + v_kw, v_ic % T.int64(8)], p1[v_oc_chunk, v_ic // T.int64(8), v_kh, v_kw, v_ic % T.int64(8), v_oc_block])
                    T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                    T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                    conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] + p0[v_n, v_ic // T.int64(8), v_oh * T.int64(2) + v_kh, v_ow * T.int64(2) + v_kw, v_ic % T.int64(8)] * p1[v_oc_chunk, v_ic // T.int64(8), v_kh, v_kw, v_ic % T.int64(8), v_oc_block]
            for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(1), T.int64(7), T.int64(4)):
                for ax4_fused in T.vectorized(T.int64(2)):
                    with T.block("T_add"):
                        v_ax0 = T.axis.spatial(T.int64(1), ax0)
                        v_ax1 = T.axis.spatial(T.int64(4), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused // T.int64(448) + ax1)
                        v_ax2 = T.axis.spatial(T.int64(28), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused % T.int64(448) // T.int64(112) * T.int64(7) + ax2)
                        v_ax3 = T.axis.spatial(T.int64(28), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused % T.int64(112) // T.int64(16) * T.int64(4) + ax3)
                        v_ax4 = T.axis.spatial(T.int64(32), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused % T.int64(16) * T.int64(2) + ax4_fused)
                        T.reads(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4])
                        T.writes(T_add[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                        T_add[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] + p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4]
b0 = sch.get_block(name="conv2d_NCHWc", func_name="main")
b1 = sch.get_block(name="root", func_name="main")
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.tiling_structure", ann_val="SSRSRS")
l2, l3, l4, l5, l6, l7, l8, l9 = sch.get_loops(block=b0)
v10, v11, v12, v13 = sch.sample_perfect_tile(loop=l2, n=4, max_innermost_factor=64, decision=[1, 1, 1, 1])
l14, l15, l16, l17 = sch.split(loop=l2, factors=[v10, v11, v12, v13], preserve_unit_iters=True)
v18, v19, v20, v21 = sch.sample_perfect_tile(loop=l3, n=4, max_innermost_factor=64, decision=[4, 1, 1, 1])
l22, l23, l24, l25 = sch.split(loop=l3, factors=[v18, v19, v20, v21], preserve_unit_iters=True)
v26, v27, v28, v29 = sch.sample_perfect_tile(loop=l4, n=4, max_innermost_factor=64, decision=[4, 1, 7, 1])
l30, l31, l32, l33 = sch.split(loop=l4, factors=[v26, v27, v28, v29], preserve_unit_iters=True)
v34, v35, v36, v37 = sch.sample_perfect_tile(loop=l5, n=4, max_innermost_factor=64, decision=[7, 1, 2, 2])
l38, l39, l40, l41 = sch.split(loop=l5, factors=[v34, v35, v36, v37], preserve_unit_iters=True)
v42, v43, v44, v45 = sch.sample_perfect_tile(loop=l6, n=4, max_innermost_factor=64, decision=[4, 4, 2, 1])
l46, l47, l48, l49 = sch.split(loop=l6, factors=[v42, v43, v44, v45], preserve_unit_iters=True)
v50, v51 = sch.sample_perfect_tile(loop=l7, n=2, max_innermost_factor=64, decision=[1, 64])
l52, l53 = sch.split(loop=l7, factors=[v50, v51], preserve_unit_iters=True)
v54, v55 = sch.sample_perfect_tile(loop=l8, n=2, max_innermost_factor=64, decision=[1, 1])
l56, l57 = sch.split(loop=l8, factors=[v54, v55], preserve_unit_iters=True)
v58, v59 = sch.sample_perfect_tile(loop=l9, n=2, max_innermost_factor=64, decision=[1, 1])
l60, l61 = sch.split(loop=l9, factors=[v58, v59], preserve_unit_iters=True)
sch.reorder(l14, l22, l30, l38, l46, l15, l23, l31, l39, l47, l52, l56, l60, l16, l24, l32, l40, l48, l53, l57, l61, l17, l25, l33, l41, l49)
b62, = sch.get_consumers(block=b0)
sch.reverse_compute_at(block=b62, loop=l47, preserve_unit_loops=True, index=-1)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.vectorize", ann_val=64)
v63 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.unroll_explicit", ann_val=v63)
sch.enter_postproc()
b64 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b64, ann_key="meta_schedule.parallel")
sch.unannotate(block_or_loop=b64, ann_key="meta_schedule.vectorize")
sch.unannotate(block_or_loop=b64, ann_key="meta_schedule.unroll_explicit")
b65, b66 = sch.get_child_blocks(b64)
l67, l68, l69, l70, l71, l72, l73, l74, l75, l76, l77, l78, l79, l80, l81, l82, l83, l84, l85, l86, l87, l88, l89, l90, l91, l92 = sch.get_loops(block=b65)
l93 = sch.fuse(l67, l68, l69, l70, l71, l72, l73, l74, l75, l76, preserve_unit_iters=True)
sch.parallel(loop=l93)
sch.annotate(block_or_loop=l93, ann_key="pragma_auto_unroll_max_step", ann_val=512)
sch.annotate(block_or_loop=l93, ann_key="pragma_unroll_explicit", ann_val=1)
l94, l95, l96, l97, l98, l99 = sch.get_loops(block=b66)
l100 = sch.fuse(l99, preserve_unit_iters=True)
sch.vectorize(loop=l100)
b101 = sch.get_block(name="conv2d_NCHWc", func_name="main")
l102, l103, l104, l105, l106, l107, l108, l109, l110, l111, l112, l113, l114, l115, l116, l117, l118 = sch.get_loops(block=b101)
b119 = sch.decompose_reduction(block=b101, loop=l103)
2024-04-29 03:56:55 [INFO] [task_scheduler.cc:131] [Task #4: fused_nn_contrib_conv2d_NCHWc_add_2] Trial #62: GFLOPs: 71.9412. Time: 179.9442 us. Best GFLOPs: 189.4902
2024-04-29 03:56:55 [INFO] [task_scheduler.cc:131] [Task #4: fused_nn_contrib_conv2d_NCHWc_add_2] Trial #63: GFLOPs: 51.0202. Time: 253.7311 us. Best GFLOPs: 189.4902
2024-04-29 03:56:55 [INFO] [task_scheduler.cc:131] [Task #4: fused_nn_contrib_conv2d_NCHWc_add_2] Trial #64: GFLOPs: 31.4090. Time: 412.1565 us. Best GFLOPs: 189.4902
2024-04-29 08:54:08 [INFO] [evolutionary_search.cc:713] Generating candidates......
2024-04-29 08:54:09 [INFO] [evolutionary_search.cc:715] Picked top 59 candidate(s) from database
2024-04-29 08:54:11 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x6bd9458)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x3b518e8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x4364b48)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x34f5bb8)]: 0 failure(s)
2024-04-29 08:54:11 [INFO] [evolutionary_search.cc:723] Sampled 453 candidate(s)
2024-04-29 08:54:16 [INFO] [evolutionary_search.cc:621] Evolve iter #0 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x6bd9458)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x3b518e8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x4364b48)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x34f5bb8)]: 0 failure(s)
2024-04-29 08:54:22 [INFO] [evolutionary_search.cc:621] Evolve iter #1 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x6bd9458)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x3b518e8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x4364b48)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x34f5bb8)]: 0 failure(s)
2024-04-29 08:54:27 [INFO] [evolutionary_search.cc:621] Evolve iter #2 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x6bd9458)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x3b518e8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x4364b48)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x34f5bb8)]: 0 failure(s)
2024-04-29 08:54:33 [INFO] [evolutionary_search.cc:621] Evolve iter #3 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x6bd9458)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x3b518e8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x4364b48)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x34f5bb8)]: 0 failure(s)
2024-04-29 08:54:36 [INFO] [evolutionary_search.cc:649] Scores of the best 64 candidates:
[1 : 16]:	0.9807  0.9462  0.9420  0.9281  0.9263  0.9263  0.8916  0.8867  0.8836  0.8826  0.8772  0.8766  0.8766  0.8766  0.8712  0.8536
[17 : 32]:	0.8516  0.8500  0.8467  0.8395  0.8395  0.8395  0.8388  0.8359  0.8303  0.8297  0.8241  0.8206  0.8202  0.8154  0.8072  0.7987
[33 : 48]:	0.7966  0.7965  0.7950  0.7916  0.7910  0.7910  0.7897  0.7895  0.7874  0.7874  0.7854  0.7848  0.7844  0.7843  0.7829  0.7821
[49 : 64]:	0.7803  0.7801  0.7794  0.7775  0.7742  0.7739  0.7725  0.7696  0.7677  0.7664  0.7657  0.7653  0.7644  0.7632  0.7629  0.7620
2024-04-29 08:54:36 [INFO] [evolutionary_search.cc:727] Got 64 candidate(s) with evolutionary search
2024-04-29 08:54:36 [INFO] [evolutionary_search.cc:730] Sending 64 candidates(s) for measurement
2024-04-29 08:55:57 [INFO] [task_scheduler.cc:131] [Task #4: fused_nn_contrib_conv2d_NCHWc_add_2] Trial #65: GFLOPs: 193.5889. Time: 66.8706 us. Best GFLOPs: 193.5889
2024-04-29 08:55:57 [INFO] [task_scheduler.cc:131] [Task #4: fused_nn_contrib_conv2d_NCHWc_add_2] Trial #66: GFLOPs: 163.1291. Time: 79.3568 us. Best GFLOPs: 193.5889
2024-04-29 08:55:57 [INFO] [task_scheduler.cc:131] [Task #4: fused_nn_contrib_conv2d_NCHWc_add_2] Trial #67: GFLOPs: 186.2283. Time: 69.5136 us. Best GFLOPs: 193.5889
2024-04-29 08:55:57 [INFO] [task_scheduler.cc:131] [Task #4: fused_nn_contrib_conv2d_NCHWc_add_2] Trial #68: GFLOPs: 169.7856. Time: 76.2456 us. Best GFLOPs: 193.5889
2024-04-29 08:55:57 [INFO] [task_scheduler.cc:131] [Task #4: fused_nn_contrib_conv2d_NCHWc_add_2] Trial #69: GFLOPs: 157.8122. Time: 82.0305 us. Best GFLOPs: 193.5889
2024-04-29 08:55:57 [INFO] [task_scheduler.cc:131] [Task #4: fused_nn_contrib_conv2d_NCHWc_add_2] Trial #70: GFLOPs: 127.6317. Time: 101.4278 us. Best GFLOPs: 193.5889
2024-04-29 08:55:57 [INFO] [task_scheduler.cc:131] [Task #4: fused_nn_contrib_conv2d_NCHWc_add_2] Trial #71: GFLOPs: 145.2946. Time: 89.0977 us. Best GFLOPs: 193.5889
2024-04-29 08:55:57 [INFO] [task_scheduler.cc:131] [Task #4: fused_nn_contrib_conv2d_NCHWc_add_2] Trial #72: GFLOPs: 136.4731. Time: 94.8569 us. Best GFLOPs: 193.5889
2024-04-29 08:55:57 [INFO] [task_scheduler.cc:131] [Task #4: fused_nn_contrib_conv2d_NCHWc_add_2] Trial #73: GFLOPs: 152.8471. Time: 84.6951 us. Best GFLOPs: 193.5889
2024-04-29 08:55:57 [INFO] [task_scheduler.cc:131] [Task #4: fused_nn_contrib_conv2d_NCHWc_add_2] Trial #74: GFLOPs: 166.3843. Time: 77.8043 us. Best GFLOPs: 193.5889
2024-04-29 08:55:57 [INFO] [task_scheduler.cc:131] [Task #4: fused_nn_contrib_conv2d_NCHWc_add_2] Trial #75: GFLOPs: 111.1019. Time: 116.5183 us. Best GFLOPs: 193.5889
2024-04-29 08:55:57 [INFO] [task_scheduler.cc:131] [Task #4: fused_nn_contrib_conv2d_NCHWc_add_2] Trial #76: GFLOPs: 145.7429. Time: 88.8236 us. Best GFLOPs: 193.5889
2024-04-29 08:55:57 [INFO] [task_scheduler.cc:131] [Task #4: fused_nn_contrib_conv2d_NCHWc_add_2] Trial #77: GFLOPs: 156.2085. Time: 82.8726 us. Best GFLOPs: 193.5889
2024-04-29 08:55:57 [INFO] [task_scheduler.cc:131] [Task #4: fused_nn_contrib_conv2d_NCHWc_add_2] Trial #78: GFLOPs: 144.9083. Time: 89.3352 us. Best GFLOPs: 193.5889
2024-04-29 08:55:57 [INFO] [task_scheduler.cc:131] [Task #4: fused_nn_contrib_conv2d_NCHWc_add_2] Trial #79: GFLOPs: 150.7705. Time: 85.8617 us. Best GFLOPs: 193.5889
2024-04-29 08:55:57 [INFO] [task_scheduler.cc:131] [Task #4: fused_nn_contrib_conv2d_NCHWc_add_2] Trial #80: GFLOPs: 117.5242. Time: 110.1510 us. Best GFLOPs: 193.5889
2024-04-29 08:55:57 [INFO] [task_scheduler.cc:131] [Task #4: fused_nn_contrib_conv2d_NCHWc_add_2] Trial #81: GFLOPs: 140.4643. Time: 92.1615 us. Best GFLOPs: 193.5889
2024-04-29 08:55:57 [INFO] [task_scheduler.cc:131] [Task #4: fused_nn_contrib_conv2d_NCHWc_add_2] Trial #82: GFLOPs: 177.0193. Time: 73.1299 us. Best GFLOPs: 193.5889
2024-04-29 08:55:57 [INFO] [task_scheduler.cc:131] [Task #4: fused_nn_contrib_conv2d_NCHWc_add_2] Trial #83: GFLOPs: 182.9743. Time: 70.7499 us. Best GFLOPs: 193.5889
2024-04-29 08:55:57 [INFO] [task_scheduler.cc:131] [Task #4: fused_nn_contrib_conv2d_NCHWc_add_2] Trial #84: GFLOPs: 150.1398. Time: 86.2223 us. Best GFLOPs: 193.5889
2024-04-29 08:55:57 [INFO] [task_scheduler.cc:131] [Task #4: fused_nn_contrib_conv2d_NCHWc_add_2] Trial #85: GFLOPs: 156.2915. Time: 82.8286 us. Best GFLOPs: 193.5889
2024-04-29 08:55:57 [INFO] [task_scheduler.cc:131] [Task #4: fused_nn_contrib_conv2d_NCHWc_add_2] Trial #86: GFLOPs: 151.1885. Time: 85.6243 us. Best GFLOPs: 193.5889
2024-04-29 08:55:57 [INFO] [task_scheduler.cc:131] [Task #4: fused_nn_contrib_conv2d_NCHWc_add_2] Trial #87: GFLOPs: 174.7849. Time: 74.0648 us. Best GFLOPs: 193.5889
2024-04-29 08:55:57 [INFO] [task_scheduler.cc:131] [Task #4: fused_nn_contrib_conv2d_NCHWc_add_2] Trial #88: GFLOPs: 141.1549. Time: 91.7107 us. Best GFLOPs: 193.5889
2024-04-29 08:55:57 [INFO] [task_scheduler.cc:131] [Task #4: fused_nn_contrib_conv2d_NCHWc_add_2] Trial #89: GFLOPs: 123.1029. Time: 105.1592 us. Best GFLOPs: 193.5889
2024-04-29 08:55:57 [INFO] [task_scheduler.cc:131] [Task #4: fused_nn_contrib_conv2d_NCHWc_add_2] Trial #90: GFLOPs: 153.0290. Time: 84.5945 us. Best GFLOPs: 193.5889
2024-04-29 08:55:57 [INFO] [task_scheduler.cc:131] [Task #4: fused_nn_contrib_conv2d_NCHWc_add_2] Trial #91: GFLOPs: 152.7632. Time: 84.7416 us. Best GFLOPs: 193.5889
2024-04-29 08:55:57 [INFO] [task_scheduler.cc:131] [Task #4: fused_nn_contrib_conv2d_NCHWc_add_2] Trial #92: GFLOPs: 151.1398. Time: 85.6519 us. Best GFLOPs: 193.5889
2024-04-29 08:55:57 [INFO] [task_scheduler.cc:131] [Task #4: fused_nn_contrib_conv2d_NCHWc_add_2] Trial #93: GFLOPs: 153.6174. Time: 84.2705 us. Best GFLOPs: 193.5889
2024-04-29 08:55:57 [INFO] [task_scheduler.cc:131] [Task #4: fused_nn_contrib_conv2d_NCHWc_add_2] Trial #94: GFLOPs: 89.8934. Time: 144.0084 us. Best GFLOPs: 193.5889
2024-04-29 08:55:57 [INFO] [task_scheduler.cc:131] [Task #4: fused_nn_contrib_conv2d_NCHWc_add_2] Trial #95: GFLOPs: 145.1896. Time: 89.1621 us. Best GFLOPs: 193.5889
2024-04-29 08:55:57 [INFO] [task_scheduler.cc:131] [Task #4: fused_nn_contrib_conv2d_NCHWc_add_2] Trial #96: GFLOPs: 128.5229. Time: 100.7245 us. Best GFLOPs: 193.5889
2024-04-29 08:55:57 [INFO] [task_scheduler.cc:131] [Task #4: fused_nn_contrib_conv2d_NCHWc_add_2] Trial #97: GFLOPs: 113.6412. Time: 113.9148 us. Best GFLOPs: 193.5889
2024-04-29 08:55:57 [INFO] [task_scheduler.cc:131] [Task #4: fused_nn_contrib_conv2d_NCHWc_add_2] Trial #98: GFLOPs: 169.9527. Time: 76.1707 us. Best GFLOPs: 193.5889
2024-04-29 08:55:57 [INFO] [task_scheduler.cc:131] [Task #4: fused_nn_contrib_conv2d_NCHWc_add_2] Trial #99: GFLOPs: 147.6294. Time: 87.6885 us. Best GFLOPs: 193.5889
2024-04-29 08:55:57 [INFO] [task_scheduler.cc:131] [Task #4: fused_nn_contrib_conv2d_NCHWc_add_2] Trial #100: GFLOPs: 144.8715. Time: 89.3579 us. Best GFLOPs: 193.5889
2024-04-29 08:55:57 [INFO] [task_scheduler.cc:131] [Task #4: fused_nn_contrib_conv2d_NCHWc_add_2] Trial #101: GFLOPs: 128.3843. Time: 100.8332 us. Best GFLOPs: 193.5889
2024-04-29 08:55:57 [INFO] [task_scheduler.cc:131] [Task #4: fused_nn_contrib_conv2d_NCHWc_add_2] Trial #102: GFLOPs: 49.3124. Time: 262.5181 us. Best GFLOPs: 193.5889
2024-04-29 08:55:57 [INFO] [task_scheduler.cc:131] [Task #4: fused_nn_contrib_conv2d_NCHWc_add_2] Trial #103: GFLOPs: 176.0006. Time: 73.5532 us. Best GFLOPs: 193.5889
2024-04-29 08:55:57 [INFO] [task_scheduler.cc:131] [Task #4: fused_nn_contrib_conv2d_NCHWc_add_2] Trial #104: GFLOPs: 140.8629. Time: 91.9008 us. Best GFLOPs: 193.5889
2024-04-29 08:55:57 [INFO] [task_scheduler.cc:131] [Task #4: fused_nn_contrib_conv2d_NCHWc_add_2] Trial #105: GFLOPs: 179.6942. Time: 72.0413 us. Best GFLOPs: 193.5889
2024-04-29 08:55:57 [INFO] [task_scheduler.cc:131] [Task #4: fused_nn_contrib_conv2d_NCHWc_add_2] Trial #106: GFLOPs: 172.5475. Time: 75.0252 us. Best GFLOPs: 193.5889
2024-04-29 08:55:57 [INFO] [task_scheduler.cc:131] [Task #4: fused_nn_contrib_conv2d_NCHWc_add_2] Trial #107: GFLOPs: 148.3912. Time: 87.2384 us. Best GFLOPs: 193.5889
2024-04-29 08:55:57 [INFO] [task_scheduler.cc:131] [Task #4: fused_nn_contrib_conv2d_NCHWc_add_2] Trial #108: GFLOPs: 91.7815. Time: 141.0460 us. Best GFLOPs: 193.5889
2024-04-29 08:55:57 [INFO] [task_scheduler.cc:131] [Task #4: fused_nn_contrib_conv2d_NCHWc_add_2] Trial #109: GFLOPs: 202.6830. Time: 63.8702 us. Best GFLOPs: 202.6830
2024-04-29 08:55:57 [INFO] [task_scheduler.cc:131] [Task #4: fused_nn_contrib_conv2d_NCHWc_add_2] Trial #110: GFLOPs: 153.5682. Time: 84.2974 us. Best GFLOPs: 202.6830
2024-04-29 08:55:57 [INFO] [task_scheduler.cc:131] [Task #4: fused_nn_contrib_conv2d_NCHWc_add_2] Trial #111: GFLOPs: 155.4764. Time: 83.2629 us. Best GFLOPs: 202.6830
2024-04-29 08:55:57 [INFO] [task_scheduler.cc:131] [Task #4: fused_nn_contrib_conv2d_NCHWc_add_2] Trial #112: GFLOPs: 142.3902. Time: 90.9150 us. Best GFLOPs: 202.6830
2024-04-29 08:55:57 [INFO] [task_scheduler.cc:131] [Task #4: fused_nn_contrib_conv2d_NCHWc_add_2] Trial #113: GFLOPs: 193.1670. Time: 67.0167 us. Best GFLOPs: 202.6830
2024-04-29 08:55:57 [INFO] [task_scheduler.cc:131] [Task #4: fused_nn_contrib_conv2d_NCHWc_add_2] Trial #114: GFLOPs: 192.2955. Time: 67.3204 us. Best GFLOPs: 202.6830
2024-04-29 08:55:57 [INFO] [task_scheduler.cc:131] [Task #4: fused_nn_contrib_conv2d_NCHWc_add_2] Trial #115: GFLOPs: 203.4683. Time: 63.6237 us. Best GFLOPs: 203.4683
2024-04-29 08:55:57 [INFO] [task_scheduler.cc:131] [Task #4: fused_nn_contrib_conv2d_NCHWc_add_2] Trial #116: GFLOPs: 158.6028. Time: 81.6215 us. Best GFLOPs: 203.4683
2024-04-29 08:55:57 [INFO] [task_scheduler.cc:131] [Task #4: fused_nn_contrib_conv2d_NCHWc_add_2] Trial #117: GFLOPs: 190.9317. Time: 67.8013 us. Best GFLOPs: 203.4683
2024-04-29 08:55:57 [INFO] [task_scheduler.cc:131] [Task #4: fused_nn_contrib_conv2d_NCHWc_add_2] Trial #118: GFLOPs: 130.6583. Time: 99.0783 us. Best GFLOPs: 203.4683
2024-04-29 08:55:57 [INFO] [task_scheduler.cc:131] [Task #4: fused_nn_contrib_conv2d_NCHWc_add_2] Trial #119: GFLOPs: 157.6455. Time: 82.1172 us. Best GFLOPs: 203.4683
2024-04-29 08:55:57 [INFO] [task_scheduler.cc:131] [Task #4: fused_nn_contrib_conv2d_NCHWc_add_2] Trial #120: GFLOPs: 141.6539. Time: 91.3876 us. Best GFLOPs: 203.4683
2024-04-29 08:55:57 [INFO] [task_scheduler.cc:131] [Task #4: fused_nn_contrib_conv2d_NCHWc_add_2] Trial #121: GFLOPs: 292.0195. Time: 44.3306 us. Best GFLOPs: 292.0195
2024-04-29 08:55:57 [INFO] [task_scheduler.cc:131] [Task #4: fused_nn_contrib_conv2d_NCHWc_add_2] Trial #122: GFLOPs: 119.5299. Time: 108.3027 us. Best GFLOPs: 292.0195
2024-04-29 08:55:57 [INFO] [task_scheduler.cc:131] [Task #4: fused_nn_contrib_conv2d_NCHWc_add_2] Trial #123: GFLOPs: 200.6378. Time: 64.5213 us. Best GFLOPs: 292.0195
2024-04-29 08:55:57 [INFO] [task_scheduler.cc:131] [Task #4: fused_nn_contrib_conv2d_NCHWc_add_2] Trial #124: GFLOPs: 146.3219. Time: 88.4721 us. Best GFLOPs: 292.0195
2024-04-29 08:55:57 [INFO] [task_scheduler.cc:131] [Task #4: fused_nn_contrib_conv2d_NCHWc_add_2] Trial #125: GFLOPs: 154.4568. Time: 83.8125 us. Best GFLOPs: 292.0195
2024-04-29 08:55:57 [INFO] [task_scheduler.cc:131] [Task #4: fused_nn_contrib_conv2d_NCHWc_add_2] Trial #126: GFLOPs: 49.1224. Time: 263.5335 us. Best GFLOPs: 292.0195
2024-04-29 08:55:57 [INFO] [task_scheduler.cc:131] [Task #4: fused_nn_contrib_conv2d_NCHWc_add_2] Trial #127: GFLOPs: 93.0999. Time: 139.0486 us. Best GFLOPs: 292.0195
2024-04-29 08:55:57 [INFO] [task_scheduler.cc:131] [Task #4: fused_nn_contrib_conv2d_NCHWc_add_2] Trial #128: GFLOPs: 12.5024. Time: 1035.4363 us. Best GFLOPs: 292.0195
