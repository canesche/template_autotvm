2024-04-29 03:19:35 [INFO] [task_scheduler.cc:160] Initializing Task #2: "fused_nn_contrib_conv2d_NCHWc_add_1"
2024-04-29 03:19:35 [INFO] [task_scheduler.cc:35] 
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(2), T.int64(28), T.int64(28), T.int64(64)), "float32"), p1: T.Buffer((T.int64(16), T.int64(2), T.int64(1), T.int64(1), T.int64(64), T.int64(16)), "float32"), p2: T.Buffer((T.int64(1), T.int64(16), T.int64(1), T.int64(1), T.int64(16)), "float32"), T_add: T.Buffer((T.int64(1), T.int64(16), T.int64(14), T.int64(14), T.int64(16)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        conv2d_NCHWc = T.alloc_buffer((T.int64(1), T.int64(16), T.int64(14), T.int64(14), T.int64(16)))
        for n, oc_chunk, oh, ow, oc_block, ic, kh, kw in T.grid(T.int64(1), T.int64(16), T.int64(14), T.int64(14), T.int64(16), T.int64(128), T.int64(1), T.int64(1)):
            with T.block("conv2d_NCHWc"):
                v_n, v_oc_chunk, v_oh, v_ow, v_oc_block, v_ic, v_kh, v_kw = T.axis.remap("SSSSSRRR", [n, oc_chunk, oh, ow, oc_block, ic, kh, kw])
                T.reads(p0[v_n, v_ic // T.int64(64), v_oh * T.int64(2) + v_kh, v_ow * T.int64(2) + v_kw, v_ic % T.int64(64)], p1[v_oc_chunk, v_ic // T.int64(64), v_kh, v_kw, v_ic % T.int64(64), v_oc_block])
                T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                with T.init():
                    conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = T.float32(0)
                conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] + p0[v_n, v_ic // T.int64(64), v_oh * T.int64(2) + v_kh, v_ow * T.int64(2) + v_kw, v_ic % T.int64(64)] * p1[v_oc_chunk, v_ic // T.int64(64), v_kh, v_kw, v_ic % T.int64(64), v_oc_block]
        for ax0, ax1, ax2, ax3, ax4 in T.grid(T.int64(1), T.int64(16), T.int64(14), T.int64(14), T.int64(16)):
            with T.block("T_add"):
                v_ax0, v_ax1, v_ax2, v_ax3, v_ax4 = T.axis.remap("SSSSS", [ax0, ax1, ax2, ax3, ax4])
                T.reads(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4])
                T.writes(T_add[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                T_add[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] + p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4]
2024-04-29 03:19:35 [INFO] [task_scheduler.cc:164] Total 3 design space(s) generated
2024-04-29 03:19:35 [INFO] [task_scheduler.cc:170] Design space #0:
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(2), T.int64(28), T.int64(28), T.int64(64)), "float32"), p1: T.Buffer((T.int64(16), T.int64(2), T.int64(1), T.int64(1), T.int64(64), T.int64(16)), "float32"), p2: T.Buffer((T.int64(1), T.int64(16), T.int64(1), T.int64(1), T.int64(16)), "float32"), T_add: T.Buffer((T.int64(1), T.int64(16), T.int64(14), T.int64(14), T.int64(16)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        with T.block("root"):
            T.reads()
            T.writes()
            T.block_attr({"meta_schedule.parallel": 768, "meta_schedule.unroll_explicit": 0, "meta_schedule.vectorize": 64})
            conv2d_NCHWc = T.alloc_buffer((T.int64(1), T.int64(16), T.int64(14), T.int64(14), T.int64(16)))
            for n_0, oc_chunk_0, oh_0, ow_0, oc_block_0, n_1, oc_chunk_1, oh_1, ow_1, oc_block_1, ic_0, kh_0, kw_0, n_2, oc_chunk_2, oh_2, ow_2, oc_block_2, ic_1, kh_1, kw_1, n_3, oc_chunk_3, oh_3, ow_3, oc_block_3 in T.grid(T.int64(1), T.int64(1), T.int64(2), T.int64(1), T.int64(2), T.int64(1), T.int64(2), T.int64(7), T.int64(2), T.int64(2), T.int64(32), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(7), T.int64(2), T.int64(4), T.int64(1), T.int64(1), T.int64(1), T.int64(8), T.int64(1), T.int64(1), T.int64(2)):
                with T.block("conv2d_NCHWc"):
                    v_n = T.axis.spatial(T.int64(1), n_0 + n_1 + n_2 + n_3)
                    v_oc_chunk = T.axis.spatial(T.int64(16), oc_chunk_0 * T.int64(16) + oc_chunk_1 * T.int64(8) + oc_chunk_2 * T.int64(8) + oc_chunk_3)
                    v_oh = T.axis.spatial(T.int64(14), oh_0 * T.int64(7) + oh_1 + oh_2 + oh_3)
                    v_ow = T.axis.spatial(T.int64(14), ow_0 * T.int64(14) + ow_1 * T.int64(7) + ow_2 + ow_3)
                    v_oc_block = T.axis.spatial(T.int64(16), oc_block_0 * T.int64(8) + oc_block_1 * T.int64(4) + oc_block_2 * T.int64(2) + oc_block_3)
                    v_ic = T.axis.reduce(T.int64(128), ic_0 * T.int64(4) + ic_1)
                    v_kh = T.axis.reduce(T.int64(1), kh_0 + kh_1)
                    v_kw = T.axis.reduce(T.int64(1), kw_0 + kw_1)
                    T.reads(p0[v_n, v_ic // T.int64(64), v_oh * T.int64(2) + v_kh, v_ow * T.int64(2) + v_kw, v_ic % T.int64(64)], p1[v_oc_chunk, v_ic // T.int64(64), v_kh, v_kw, v_ic % T.int64(64), v_oc_block])
                    T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                    T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                    with T.init():
                        conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = T.float32(0)
                    conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] + p0[v_n, v_ic // T.int64(64), v_oh * T.int64(2) + v_kh, v_ow * T.int64(2) + v_kw, v_ic % T.int64(64)] * p1[v_oc_chunk, v_ic // T.int64(64), v_kh, v_kw, v_ic % T.int64(64), v_oc_block]
            for ax0, ax1, ax2, ax3, ax4 in T.grid(T.int64(1), T.int64(16), T.int64(14), T.int64(14), T.int64(16)):
                with T.block("T_add"):
                    v_ax0, v_ax1, v_ax2, v_ax3, v_ax4 = T.axis.remap("SSSSS", [ax0, ax1, ax2, ax3, ax4])
                    T.reads(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4])
                    T.writes(T_add[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                    T_add[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] + p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4]
b0 = sch.get_block(name="conv2d_NCHWc", func_name="main")
b1 = sch.get_block(name="root", func_name="main")
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.tiling_structure", ann_val="SSRSRS")
l2, l3, l4, l5, l6, l7, l8, l9 = sch.get_loops(block=b0)
v10, v11, v12, v13 = sch.sample_perfect_tile(loop=l2, n=4, max_innermost_factor=64, decision=[1, 1, 1, 1])
l14, l15, l16, l17 = sch.split(loop=l2, factors=[v10, v11, v12, v13], preserve_unit_iters=True)
v18, v19, v20, v21 = sch.sample_perfect_tile(loop=l3, n=4, max_innermost_factor=64, decision=[1, 2, 1, 8])
l22, l23, l24, l25 = sch.split(loop=l3, factors=[v18, v19, v20, v21], preserve_unit_iters=True)
v26, v27, v28, v29 = sch.sample_perfect_tile(loop=l4, n=4, max_innermost_factor=64, decision=[2, 7, 1, 1])
l30, l31, l32, l33 = sch.split(loop=l4, factors=[v26, v27, v28, v29], preserve_unit_iters=True)
v34, v35, v36, v37 = sch.sample_perfect_tile(loop=l5, n=4, max_innermost_factor=64, decision=[1, 2, 7, 1])
l38, l39, l40, l41 = sch.split(loop=l5, factors=[v34, v35, v36, v37], preserve_unit_iters=True)
v42, v43, v44, v45 = sch.sample_perfect_tile(loop=l6, n=4, max_innermost_factor=64, decision=[2, 2, 2, 2])
l46, l47, l48, l49 = sch.split(loop=l6, factors=[v42, v43, v44, v45], preserve_unit_iters=True)
v50, v51 = sch.sample_perfect_tile(loop=l7, n=2, max_innermost_factor=64, decision=[32, 4])
l52, l53 = sch.split(loop=l7, factors=[v50, v51], preserve_unit_iters=True)
v54, v55 = sch.sample_perfect_tile(loop=l8, n=2, max_innermost_factor=64, decision=[1, 1])
l56, l57 = sch.split(loop=l8, factors=[v54, v55], preserve_unit_iters=True)
v58, v59 = sch.sample_perfect_tile(loop=l9, n=2, max_innermost_factor=64, decision=[1, 1])
l60, l61 = sch.split(loop=l9, factors=[v58, v59], preserve_unit_iters=True)
sch.reorder(l14, l22, l30, l38, l46, l15, l23, l31, l39, l47, l52, l56, l60, l16, l24, l32, l40, l48, l53, l57, l61, l17, l25, l33, l41, l49)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.vectorize", ann_val=64)
v62 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=0)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.unroll_explicit", ann_val=v62)
2024-04-29 03:19:35 [INFO] [task_scheduler.cc:170] Design space #1:
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(2), T.int64(28), T.int64(28), T.int64(64)), "float32"), p1: T.Buffer((T.int64(16), T.int64(2), T.int64(1), T.int64(1), T.int64(64), T.int64(16)), "float32"), p2: T.Buffer((T.int64(1), T.int64(16), T.int64(1), T.int64(1), T.int64(16)), "float32"), T_add: T.Buffer((T.int64(1), T.int64(16), T.int64(14), T.int64(14), T.int64(16)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        with T.block("root"):
            T.reads()
            T.writes()
            T.block_attr({"meta_schedule.parallel": 768, "meta_schedule.unroll_explicit": 512, "meta_schedule.vectorize": 64})
            conv2d_NCHWc = T.alloc_buffer((T.int64(1), T.int64(16), T.int64(14), T.int64(14), T.int64(16)))
            for n_0, oc_chunk_0, oh_0, ow_0, oc_block_0, n_1, oc_chunk_1, oh_1, ow_1, oc_block_1 in T.grid(T.int64(1), T.int64(1), T.int64(2), T.int64(1), T.int64(2), T.int64(1), T.int64(2), T.int64(7), T.int64(2), T.int64(2)):
                for ic_0, kh_0, kw_0, n_2, oc_chunk_2, oh_2, ow_2, oc_block_2, ic_1, kh_1, kw_1, n_3, oc_chunk_3, oh_3, ow_3, oc_block_3 in T.grid(T.int64(32), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(7), T.int64(2), T.int64(4), T.int64(1), T.int64(1), T.int64(1), T.int64(8), T.int64(1), T.int64(1), T.int64(2)):
                    with T.block("conv2d_NCHWc"):
                        v_n = T.axis.spatial(T.int64(1), n_0 + n_1 + n_2 + n_3)
                        v_oc_chunk = T.axis.spatial(T.int64(16), oc_chunk_0 * T.int64(16) + oc_chunk_1 * T.int64(8) + oc_chunk_2 * T.int64(8) + oc_chunk_3)
                        v_oh = T.axis.spatial(T.int64(14), oh_0 * T.int64(7) + oh_1 + oh_2 + oh_3)
                        v_ow = T.axis.spatial(T.int64(14), ow_0 * T.int64(14) + ow_1 * T.int64(7) + ow_2 + ow_3)
                        v_oc_block = T.axis.spatial(T.int64(16), oc_block_0 * T.int64(8) + oc_block_1 * T.int64(4) + oc_block_2 * T.int64(2) + oc_block_3)
                        v_ic = T.axis.reduce(T.int64(128), ic_0 * T.int64(4) + ic_1)
                        v_kh = T.axis.reduce(T.int64(1), kh_0 + kh_1)
                        v_kw = T.axis.reduce(T.int64(1), kw_0 + kw_1)
                        T.reads(p0[v_n, v_ic // T.int64(64), v_oh * T.int64(2) + v_kh, v_ow * T.int64(2) + v_kw, v_ic % T.int64(64)], p1[v_oc_chunk, v_ic // T.int64(64), v_kh, v_kw, v_ic % T.int64(64), v_oc_block])
                        T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                        T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                        with T.init():
                            conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = T.float32(0)
                        conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] + p0[v_n, v_ic // T.int64(64), v_oh * T.int64(2) + v_kh, v_ow * T.int64(2) + v_kw, v_ic % T.int64(64)] * p1[v_oc_chunk, v_ic // T.int64(64), v_kh, v_kw, v_ic % T.int64(64), v_oc_block]
                for ax0, ax1, ax2, ax3, ax4 in T.grid(T.int64(1), T.int64(8), T.int64(1), T.int64(7), T.int64(4)):
                    with T.block("T_add"):
                        v_ax0 = T.axis.spatial(T.int64(1), ax0)
                        v_ax1 = T.axis.spatial(T.int64(16), oc_chunk_1 * T.int64(8) + ax1)
                        v_ax2 = T.axis.spatial(T.int64(14), oh_0 * T.int64(7) + oh_1 + ax2)
                        v_ax3 = T.axis.spatial(T.int64(14), ow_1 * T.int64(7) + ax3)
                        v_ax4 = T.axis.spatial(T.int64(16), oc_block_0 * T.int64(8) + oc_block_1 * T.int64(4) + ax4)
                        T.reads(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4])
                        T.writes(T_add[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                        T_add[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] + p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4]
b0 = sch.get_block(name="conv2d_NCHWc", func_name="main")
b1 = sch.get_block(name="root", func_name="main")
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.tiling_structure", ann_val="SSRSRS")
l2, l3, l4, l5, l6, l7, l8, l9 = sch.get_loops(block=b0)
v10, v11, v12, v13 = sch.sample_perfect_tile(loop=l2, n=4, max_innermost_factor=64, decision=[1, 1, 1, 1])
l14, l15, l16, l17 = sch.split(loop=l2, factors=[v10, v11, v12, v13], preserve_unit_iters=True)
v18, v19, v20, v21 = sch.sample_perfect_tile(loop=l3, n=4, max_innermost_factor=64, decision=[1, 2, 1, 8])
l22, l23, l24, l25 = sch.split(loop=l3, factors=[v18, v19, v20, v21], preserve_unit_iters=True)
v26, v27, v28, v29 = sch.sample_perfect_tile(loop=l4, n=4, max_innermost_factor=64, decision=[2, 7, 1, 1])
l30, l31, l32, l33 = sch.split(loop=l4, factors=[v26, v27, v28, v29], preserve_unit_iters=True)
v34, v35, v36, v37 = sch.sample_perfect_tile(loop=l5, n=4, max_innermost_factor=64, decision=[1, 2, 7, 1])
l38, l39, l40, l41 = sch.split(loop=l5, factors=[v34, v35, v36, v37], preserve_unit_iters=True)
v42, v43, v44, v45 = sch.sample_perfect_tile(loop=l6, n=4, max_innermost_factor=64, decision=[2, 2, 2, 2])
l46, l47, l48, l49 = sch.split(loop=l6, factors=[v42, v43, v44, v45], preserve_unit_iters=True)
v50, v51 = sch.sample_perfect_tile(loop=l7, n=2, max_innermost_factor=64, decision=[32, 4])
l52, l53 = sch.split(loop=l7, factors=[v50, v51], preserve_unit_iters=True)
v54, v55 = sch.sample_perfect_tile(loop=l8, n=2, max_innermost_factor=64, decision=[1, 1])
l56, l57 = sch.split(loop=l8, factors=[v54, v55], preserve_unit_iters=True)
v58, v59 = sch.sample_perfect_tile(loop=l9, n=2, max_innermost_factor=64, decision=[1, 1])
l60, l61 = sch.split(loop=l9, factors=[v58, v59], preserve_unit_iters=True)
sch.reorder(l14, l22, l30, l38, l46, l15, l23, l31, l39, l47, l52, l56, l60, l16, l24, l32, l40, l48, l53, l57, l61, l17, l25, l33, l41, l49)
b62, = sch.get_consumers(block=b0)
sch.reverse_compute_at(block=b62, loop=l47, preserve_unit_loops=True, index=-1)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.vectorize", ann_val=64)
v63 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.unroll_explicit", ann_val=v63)
2024-04-29 03:19:35 [INFO] [task_scheduler.cc:170] Design space #2:
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(2), T.int64(28), T.int64(28), T.int64(64)), "float32"), p1: T.Buffer((T.int64(16), T.int64(2), T.int64(1), T.int64(1), T.int64(64), T.int64(16)), "float32"), p2: T.Buffer((T.int64(1), T.int64(16), T.int64(1), T.int64(1), T.int64(16)), "float32"), T_add: T.Buffer((T.int64(1), T.int64(16), T.int64(14), T.int64(14), T.int64(16)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        with T.block("root"):
            T.reads()
            T.writes()
            T.block_attr({"meta_schedule.parallel": 768, "meta_schedule.unroll_explicit": 512, "meta_schedule.vectorize": 64})
            conv2d_NCHWc = T.alloc_buffer((T.int64(1), T.int64(16), T.int64(14), T.int64(14), T.int64(16)))
            for n_0, oc_chunk_0, oh_0, ow_0, oc_block_0 in T.grid(T.int64(1), T.int64(1), T.int64(2), T.int64(1), T.int64(2)):
                for n_1, oc_chunk_1, oh_1, ow_1, oc_block_1, ic_0, kh_0, kw_0, n_2, oc_chunk_2, oh_2, ow_2, oc_block_2, ic_1, kh_1, kw_1, n_3, oc_chunk_3, oh_3, ow_3, oc_block_3 in T.grid(T.int64(1), T.int64(2), T.int64(7), T.int64(2), T.int64(2), T.int64(32), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(7), T.int64(2), T.int64(4), T.int64(1), T.int64(1), T.int64(1), T.int64(8), T.int64(1), T.int64(1), T.int64(2)):
                    with T.block("conv2d_NCHWc"):
                        v_n = T.axis.spatial(T.int64(1), n_0 + n_1 + n_2 + n_3)
                        v_oc_chunk = T.axis.spatial(T.int64(16), oc_chunk_0 * T.int64(16) + oc_chunk_1 * T.int64(8) + oc_chunk_2 * T.int64(8) + oc_chunk_3)
                        v_oh = T.axis.spatial(T.int64(14), oh_0 * T.int64(7) + oh_1 + oh_2 + oh_3)
                        v_ow = T.axis.spatial(T.int64(14), ow_0 * T.int64(14) + ow_1 * T.int64(7) + ow_2 + ow_3)
                        v_oc_block = T.axis.spatial(T.int64(16), oc_block_0 * T.int64(8) + oc_block_1 * T.int64(4) + oc_block_2 * T.int64(2) + oc_block_3)
                        v_ic = T.axis.reduce(T.int64(128), ic_0 * T.int64(4) + ic_1)
                        v_kh = T.axis.reduce(T.int64(1), kh_0 + kh_1)
                        v_kw = T.axis.reduce(T.int64(1), kw_0 + kw_1)
                        T.reads(p0[v_n, v_ic // T.int64(64), v_oh * T.int64(2) + v_kh, v_ow * T.int64(2) + v_kw, v_ic % T.int64(64)], p1[v_oc_chunk, v_ic // T.int64(64), v_kh, v_kw, v_ic % T.int64(64), v_oc_block])
                        T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                        T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                        with T.init():
                            conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = T.float32(0)
                        conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] + p0[v_n, v_ic // T.int64(64), v_oh * T.int64(2) + v_kh, v_ow * T.int64(2) + v_kw, v_ic % T.int64(64)] * p1[v_oc_chunk, v_ic // T.int64(64), v_kh, v_kw, v_ic % T.int64(64), v_oc_block]
                for ax0, ax1, ax2, ax3, ax4 in T.grid(T.int64(1), T.int64(16), T.int64(7), T.int64(14), T.int64(8)):
                    with T.block("T_add"):
                        v_ax0, v_ax1 = T.axis.remap("SS", [ax0, ax1])
                        v_ax2 = T.axis.spatial(T.int64(14), oh_0 * T.int64(7) + ax2)
                        v_ax3 = T.axis.spatial(T.int64(14), ax3)
                        v_ax4 = T.axis.spatial(T.int64(16), oc_block_0 * T.int64(8) + ax4)
                        T.reads(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4])
                        T.writes(T_add[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                        T_add[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] + p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4]
b0 = sch.get_block(name="conv2d_NCHWc", func_name="main")
b1 = sch.get_block(name="root", func_name="main")
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.tiling_structure", ann_val="SSRSRS")
l2, l3, l4, l5, l6, l7, l8, l9 = sch.get_loops(block=b0)
v10, v11, v12, v13 = sch.sample_perfect_tile(loop=l2, n=4, max_innermost_factor=64, decision=[1, 1, 1, 1])
l14, l15, l16, l17 = sch.split(loop=l2, factors=[v10, v11, v12, v13], preserve_unit_iters=True)
v18, v19, v20, v21 = sch.sample_perfect_tile(loop=l3, n=4, max_innermost_factor=64, decision=[1, 2, 1, 8])
l22, l23, l24, l25 = sch.split(loop=l3, factors=[v18, v19, v20, v21], preserve_unit_iters=True)
v26, v27, v28, v29 = sch.sample_perfect_tile(loop=l4, n=4, max_innermost_factor=64, decision=[2, 7, 1, 1])
l30, l31, l32, l33 = sch.split(loop=l4, factors=[v26, v27, v28, v29], preserve_unit_iters=True)
v34, v35, v36, v37 = sch.sample_perfect_tile(loop=l5, n=4, max_innermost_factor=64, decision=[1, 2, 7, 1])
l38, l39, l40, l41 = sch.split(loop=l5, factors=[v34, v35, v36, v37], preserve_unit_iters=True)
v42, v43, v44, v45 = sch.sample_perfect_tile(loop=l6, n=4, max_innermost_factor=64, decision=[2, 2, 2, 2])
l46, l47, l48, l49 = sch.split(loop=l6, factors=[v42, v43, v44, v45], preserve_unit_iters=True)
v50, v51 = sch.sample_perfect_tile(loop=l7, n=2, max_innermost_factor=64, decision=[32, 4])
l52, l53 = sch.split(loop=l7, factors=[v50, v51], preserve_unit_iters=True)
v54, v55 = sch.sample_perfect_tile(loop=l8, n=2, max_innermost_factor=64, decision=[1, 1])
l56, l57 = sch.split(loop=l8, factors=[v54, v55], preserve_unit_iters=True)
v58, v59 = sch.sample_perfect_tile(loop=l9, n=2, max_innermost_factor=64, decision=[1, 1])
l60, l61 = sch.split(loop=l9, factors=[v58, v59], preserve_unit_iters=True)
sch.reorder(l14, l22, l30, l38, l46, l15, l23, l31, l39, l47, l52, l56, l60, l16, l24, l32, l40, l48, l53, l57, l61, l17, l25, l33, l41, l49)
b62, = sch.get_consumers(block=b0)
sch.reverse_compute_at(block=b62, loop=l46, preserve_unit_loops=True, index=-1)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.vectorize", ann_val=64)
v63 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.unroll_explicit", ann_val=v63)
2024-04-29 03:22:51 [INFO] [evolutionary_search.cc:713] Generating candidates......
2024-04-29 03:22:51 [INFO] [evolutionary_search.cc:715] Picked top 0 candidate(s) from database
2024-04-29 03:22:54 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x350fee8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x3234288)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x438f688)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x3a6a888)]: 0 failure(s)
2024-04-29 03:22:54 [INFO] [evolutionary_search.cc:723] Sampled 512 candidate(s)
2024-04-29 03:22:57 [INFO] [evolutionary_search.cc:621] Evolve iter #0 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x350fee8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x3234288)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x438f688)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x3a6a888)]: 0 failure(s)
2024-04-29 03:23:00 [INFO] [evolutionary_search.cc:621] Evolve iter #1 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x350fee8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x3234288)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x438f688)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x3a6a888)]: 0 failure(s)
2024-04-29 03:23:03 [INFO] [evolutionary_search.cc:621] Evolve iter #2 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x350fee8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x3234288)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x438f688)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x3a6a888)]: 0 failure(s)
2024-04-29 03:23:06 [INFO] [evolutionary_search.cc:621] Evolve iter #3 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x350fee8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x3234288)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x438f688)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x3a6a888)]: 0 failure(s)
2024-04-29 03:23:07 [INFO] [evolutionary_search.cc:649] Scores of the best 64 candidates:
[1 : 16]:	0.9998  0.9995  0.9995  0.9994  0.9981  0.9978  0.9976  0.9966  0.9964  0.9964  0.9955  0.9955  0.9953  0.9952  0.9950  0.9949
[17 : 32]:	0.9947  0.9942  0.9941  0.9935  0.9934  0.9930  0.9929  0.9929  0.9927  0.9925  0.9923  0.9921  0.9917  0.9914  0.9913  0.9911
[33 : 48]:	0.9908  0.9904  0.9900  0.9895  0.9884  0.9866  0.9854  0.9854  0.9852  0.9850  0.9847  0.9846  0.9838  0.9830  0.9823  0.9822
[49 : 64]:	0.9821  0.9812  0.9796  0.9793  0.9791  0.9789  0.9786  0.9779  0.9767  0.9764  0.9761  0.9760  0.9759  0.9759  0.9752  0.9749
2024-04-29 03:23:07 [INFO] [evolutionary_search.cc:727] Got 64 candidate(s) with evolutionary search
2024-04-29 03:23:07 [INFO] [evolutionary_search.cc:730] Sending 64 candidates(s) for measurement
2024-04-29 03:56:52 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_conv2d_NCHWc_add_1] Trial #1: GFLOPs: 10.3895. Time: 1241.1834 us. Best GFLOPs: 10.3895
2024-04-29 03:56:52 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_conv2d_NCHWc_add_1] Trial #2: GFLOPs: 43.8528. Time: 294.0573 us. Best GFLOPs: 43.8528
2024-04-29 03:56:52 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_conv2d_NCHWc_add_1] Trial #3: GFLOPs: 62.7661. Time: 205.4491 us. Best GFLOPs: 62.7661
2024-04-29 03:56:52 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_conv2d_NCHWc_add_1] Trial #4: GFLOPs: 3.6673. Time: 3516.2489 us. Best GFLOPs: 62.7661
2024-04-29 03:56:52 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_conv2d_NCHWc_add_1] Trial #5: GFLOPs: 22.4813. Time: 573.5975 us. Best GFLOPs: 62.7661
2024-04-29 03:56:52 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_conv2d_NCHWc_add_1] Trial #6: GFLOPs: 15.0676. Time: 855.8237 us. Best GFLOPs: 62.7661
2024-04-29 03:56:52 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_conv2d_NCHWc_add_1] Trial #7: GFLOPs: 75.6782. Time: 170.3955 us. Best GFLOPs: 75.6782
2024-04-29 03:56:52 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_conv2d_NCHWc_add_1] Trial #8: GFLOPs: 77.2446. Time: 166.9403 us. Best GFLOPs: 77.2446
2024-04-29 03:56:52 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_conv2d_NCHWc_add_1] Trial #9: GFLOPs: 60.0170. Time: 214.8596 us. Best GFLOPs: 77.2446
2024-04-29 03:56:52 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_conv2d_NCHWc_add_1] Trial #10: GFLOPs: 144.4391. Time: 89.2780 us. Best GFLOPs: 144.4391
2024-04-29 03:56:52 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_conv2d_NCHWc_add_1] Trial #11: GFLOPs: 120.1775. Time: 107.3016 us. Best GFLOPs: 144.4391
2024-04-29 03:56:52 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_conv2d_NCHWc_add_1] Trial #12: GFLOPs: 75.2119. Time: 171.4521 us. Best GFLOPs: 144.4391
2024-04-29 03:56:52 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_conv2d_NCHWc_add_1] Trial #13: GFLOPs: 27.8867. Time: 462.4145 us. Best GFLOPs: 144.4391
2024-04-29 03:56:52 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_conv2d_NCHWc_add_1] Trial #14: GFLOPs: 97.4819. Time: 132.2834 us. Best GFLOPs: 144.4391
2024-04-29 03:56:52 [INFO] [task_scheduler.cc:121] [Task #2: fused_nn_contrib_conv2d_NCHWc_add_1] Trial #15: Error in building:
LocalBuilder: Timeout, killed after 30.0 seconds
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(2), T.int64(28), T.int64(28), T.int64(64)), "float32"), p1: T.Buffer((T.int64(16), T.int64(2), T.int64(1), T.int64(1), T.int64(64), T.int64(16)), "float32"), p2: T.Buffer((T.int64(1), T.int64(16), T.int64(1), T.int64(1), T.int64(16)), "float32"), T_add: T.Buffer((T.int64(1), T.int64(16), T.int64(14), T.int64(14), T.int64(16)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        conv2d_NCHWc = T.alloc_buffer((T.int64(1), T.int64(16), T.int64(14), T.int64(14), T.int64(16)))
        for n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_fused in T.parallel(T.int64(784), annotations={"pragma_auto_unroll_max_step": 512, "pragma_unroll_explicit": 1}):
            for oh_1, ow_1, oc_block_1 in T.grid(T.int64(2), T.int64(1), T.int64(8)):
                for n_2_init, oc_chunk_2_init, oh_2_init, ow_2_init, oc_block_2_init, n_3_init, oc_chunk_3_init, oh_3_init, ow_3_init, oc_block_3_init in T.grid(T.int64(1), T.int64(4), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1)):
                    with T.block("conv2d_NCHWc_init"):
                        v_n = T.axis.spatial(T.int64(1), n_2_init + n_3_init)
                        v_oc_chunk = T.axis.spatial(T.int64(16), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_fused % T.int64(4) * T.int64(4) + oc_chunk_2_init + oc_chunk_3_init)
                        v_oh = T.axis.spatial(T.int64(14), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_fused // T.int64(112) * T.int64(2) + oh_1 + oh_2_init + oh_3_init)
                        v_ow = T.axis.spatial(T.int64(14), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_fused % T.int64(112) // T.int64(8) + ow_1 + ow_2_init + ow_3_init)
                        v_oc_block = T.axis.spatial(T.int64(16), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_fused % T.int64(8) // T.int64(4) * T.int64(8) + oc_block_1 + oc_block_2_init + oc_block_3_init)
                        T.reads()
                        T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                        T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                        conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = T.float32(0)
                for ic_0, kh_0, kw_0, n_2, oc_chunk_2, oh_2, ow_2, oc_block_2, ic_1, kh_1, kw_1, n_3, oc_chunk_3, oh_3, ow_3, oc_block_3 in T.grid(T.int64(4), T.int64(1), T.int64(1), T.int64(1), T.int64(4), T.int64(1), T.int64(1), T.int64(1), T.int64(32), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1)):
                    with T.block("conv2d_NCHWc_update"):
                        v_n = T.axis.spatial(T.int64(1), n_2 + n_3)
                        v_oc_chunk = T.axis.spatial(T.int64(16), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_fused % T.int64(4) * T.int64(4) + oc_chunk_2 + oc_chunk_3)
                        v_oh = T.axis.spatial(T.int64(14), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_fused // T.int64(112) * T.int64(2) + oh_1 + oh_2 + oh_3)
                        v_ow = T.axis.spatial(T.int64(14), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_fused % T.int64(112) // T.int64(8) + ow_1 + ow_2 + ow_3)
                        v_oc_block = T.axis.spatial(T.int64(16), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_fused % T.int64(8) // T.int64(4) * T.int64(8) + oc_block_1 + oc_block_2 + oc_block_3)
                        v_ic = T.axis.reduce(T.int64(128), ic_0 * T.int64(32) + ic_1)
                        v_kh = T.axis.reduce(T.int64(1), kh_0 + kh_1)
                        v_kw = T.axis.reduce(T.int64(1), kw_0 + kw_1)
                        T.reads(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block], p0[v_n, v_ic // T.int64(64), v_oh * T.int64(2) + v_kh, v_ow * T.int64(2) + v_kw, v_ic % T.int64(64)], p1[v_oc_chunk, v_ic // T.int64(64), v_kh, v_kw, v_ic % T.int64(64), v_oc_block])
                        T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                        T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                        conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] + p0[v_n, v_ic // T.int64(64), v_oh * T.int64(2) + v_kh, v_ow * T.int64(2) + v_kw, v_ic % T.int64(64)] * p1[v_oc_chunk, v_ic // T.int64(64), v_kh, v_kw, v_ic % T.int64(64), v_oc_block]
                for ax0, ax1, ax2, ax3, ax4 in T.grid(T.int64(1), T.int64(4), T.int64(1), T.int64(1), T.int64(1)):
                    with T.block("T_add"):
                        v_ax0 = T.axis.spatial(T.int64(1), ax0)
                        v_ax1 = T.axis.spatial(T.int64(16), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_fused % T.int64(4) * T.int64(4) + ax1)
                        v_ax2 = T.axis.spatial(T.int64(14), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_fused // T.int64(112) * T.int64(2) + oh_1 + ax2)
                        v_ax3 = T.axis.spatial(T.int64(14), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_fused % T.int64(112) // T.int64(8) + ax3)
                        v_ax4 = T.axis.spatial(T.int64(16), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_fused % T.int64(8) // T.int64(4) * T.int64(8) + oc_block_1 + ax4)
                        T.reads(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4])
                        T.writes(T_add[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                        T_add[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] + p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4]
b0 = sch.get_block(name="conv2d_NCHWc", func_name="main")
b1 = sch.get_block(name="root", func_name="main")
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.tiling_structure", ann_val="SSRSRS")
l2, l3, l4, l5, l6, l7, l8, l9 = sch.get_loops(block=b0)
v10, v11, v12, v13 = sch.sample_perfect_tile(loop=l2, n=4, max_innermost_factor=64, decision=[1, 1, 1, 1])
l14, l15, l16, l17 = sch.split(loop=l2, factors=[v10, v11, v12, v13], preserve_unit_iters=True)
v18, v19, v20, v21 = sch.sample_perfect_tile(loop=l3, n=4, max_innermost_factor=64, decision=[1, 4, 4, 1])
l22, l23, l24, l25 = sch.split(loop=l3, factors=[v18, v19, v20, v21], preserve_unit_iters=True)
v26, v27, v28, v29 = sch.sample_perfect_tile(loop=l4, n=4, max_innermost_factor=64, decision=[7, 2, 1, 1])
l30, l31, l32, l33 = sch.split(loop=l4, factors=[v26, v27, v28, v29], preserve_unit_iters=True)
v34, v35, v36, v37 = sch.sample_perfect_tile(loop=l5, n=4, max_innermost_factor=64, decision=[14, 1, 1, 1])
l38, l39, l40, l41 = sch.split(loop=l5, factors=[v34, v35, v36, v37], preserve_unit_iters=True)
v42, v43, v44, v45 = sch.sample_perfect_tile(loop=l6, n=4, max_innermost_factor=64, decision=[2, 8, 1, 1])
l46, l47, l48, l49 = sch.split(loop=l6, factors=[v42, v43, v44, v45], preserve_unit_iters=True)
v50, v51 = sch.sample_perfect_tile(loop=l7, n=2, max_innermost_factor=64, decision=[4, 32])
l52, l53 = sch.split(loop=l7, factors=[v50, v51], preserve_unit_iters=True)
v54, v55 = sch.sample_perfect_tile(loop=l8, n=2, max_innermost_factor=64, decision=[1, 1])
l56, l57 = sch.split(loop=l8, factors=[v54, v55], preserve_unit_iters=True)
v58, v59 = sch.sample_perfect_tile(loop=l9, n=2, max_innermost_factor=64, decision=[1, 1])
l60, l61 = sch.split(loop=l9, factors=[v58, v59], preserve_unit_iters=True)
sch.reorder(l14, l22, l30, l38, l46, l15, l23, l31, l39, l47, l52, l56, l60, l16, l24, l32, l40, l48, l53, l57, l61, l17, l25, l33, l41, l49)
b62, = sch.get_consumers(block=b0)
sch.reverse_compute_at(block=b62, loop=l47, preserve_unit_loops=True, index=-1)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.vectorize", ann_val=64)
v63 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.unroll_explicit", ann_val=v63)
sch.enter_postproc()
b64 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b64, ann_key="meta_schedule.parallel")
sch.unannotate(block_or_loop=b64, ann_key="meta_schedule.vectorize")
sch.unannotate(block_or_loop=b64, ann_key="meta_schedule.unroll_explicit")
b65, b66 = sch.get_child_blocks(b64)
l67, l68, l69, l70, l71, l72, l73, l74, l75, l76, l77, l78, l79, l80, l81, l82, l83, l84, l85, l86, l87, l88, l89, l90, l91, l92 = sch.get_loops(block=b65)
l93 = sch.fuse(l67, l68, l69, l70, l71, l72, l73, preserve_unit_iters=True)
sch.parallel(loop=l93)
sch.annotate(block_or_loop=l93, ann_key="pragma_auto_unroll_max_step", ann_val=512)
sch.annotate(block_or_loop=l93, ann_key="pragma_unroll_explicit", ann_val=1)
l94, l95, l96, l97, l98, l99, l100, l101, l102 = sch.get_loops(block=b66)
b103 = sch.get_block(name="conv2d_NCHWc", func_name="main")
l104, l105, l106, l107, l108, l109, l110, l111, l112, l113, l114, l115, l116, l117, l118, l119, l120, l121, l122, l123 = sch.get_loops(block=b103)
b124 = sch.decompose_reduction(block=b103, loop=l108)
2024-04-29 03:56:52 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_conv2d_NCHWc_add_1] Trial #16: GFLOPs: 51.4954. Time: 250.4152 us. Best GFLOPs: 144.4391
2024-04-29 03:56:52 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_conv2d_NCHWc_add_1] Trial #17: GFLOPs: 68.7270. Time: 187.6297 us. Best GFLOPs: 144.4391
2024-04-29 03:56:52 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_conv2d_NCHWc_add_1] Trial #18: GFLOPs: 8.6336. Time: 1493.6055 us. Best GFLOPs: 144.4391
2024-04-29 03:56:52 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_conv2d_NCHWc_add_1] Trial #19: GFLOPs: 68.5909. Time: 188.0022 us. Best GFLOPs: 144.4391
2024-04-29 03:56:52 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_conv2d_NCHWc_add_1] Trial #20: GFLOPs: 102.9427. Time: 125.2661 us. Best GFLOPs: 144.4391
2024-04-29 03:56:52 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_conv2d_NCHWc_add_1] Trial #21: GFLOPs: 3.1047. Time: 4153.5116 us. Best GFLOPs: 144.4391
2024-04-29 03:56:52 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_conv2d_NCHWc_add_1] Trial #22: GFLOPs: 88.4214. Time: 145.8384 us. Best GFLOPs: 144.4391
2024-04-29 03:56:52 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_conv2d_NCHWc_add_1] Trial #23: GFLOPs: 44.8766. Time: 287.3486 us. Best GFLOPs: 144.4391
2024-04-29 03:56:52 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_conv2d_NCHWc_add_1] Trial #24: GFLOPs: 15.9550. Time: 808.2269 us. Best GFLOPs: 144.4391
2024-04-29 03:56:52 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_conv2d_NCHWc_add_1] Trial #25: GFLOPs: 33.5762. Time: 384.0589 us. Best GFLOPs: 144.4391
2024-04-29 03:56:52 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_conv2d_NCHWc_add_1] Trial #26: GFLOPs: 13.8712. Time: 929.6417 us. Best GFLOPs: 144.4391
2024-04-29 03:56:52 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_conv2d_NCHWc_add_1] Trial #27: GFLOPs: 57.9146. Time: 222.6593 us. Best GFLOPs: 144.4391
2024-04-29 03:56:52 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_conv2d_NCHWc_add_1] Trial #28: GFLOPs: 34.3073. Time: 375.8742 us. Best GFLOPs: 144.4391
2024-04-29 03:56:52 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_conv2d_NCHWc_add_1] Trial #29: GFLOPs: 4.6449. Time: 2776.1974 us. Best GFLOPs: 144.4391
2024-04-29 03:56:52 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_conv2d_NCHWc_add_1] Trial #30: GFLOPs: 20.4631. Time: 630.1691 us. Best GFLOPs: 144.4391
2024-04-29 03:56:52 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_conv2d_NCHWc_add_1] Trial #31: GFLOPs: 15.9493. Time: 808.5159 us. Best GFLOPs: 144.4391
2024-04-29 03:56:52 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_conv2d_NCHWc_add_1] Trial #32: GFLOPs: 4.0650. Time: 3172.2325 us. Best GFLOPs: 144.4391
2024-04-29 03:56:52 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_conv2d_NCHWc_add_1] Trial #33: GFLOPs: 25.6532. Time: 502.6753 us. Best GFLOPs: 144.4391
2024-04-29 03:56:52 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_conv2d_NCHWc_add_1] Trial #34: GFLOPs: 15.6280. Time: 825.1381 us. Best GFLOPs: 144.4391
2024-04-29 03:56:52 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_conv2d_NCHWc_add_1] Trial #35: GFLOPs: 39.8087. Time: 323.9300 us. Best GFLOPs: 144.4391
2024-04-29 03:56:52 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_conv2d_NCHWc_add_1] Trial #36: GFLOPs: 22.6842. Time: 568.4666 us. Best GFLOPs: 144.4391
2024-04-29 03:56:52 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_conv2d_NCHWc_add_1] Trial #37: GFLOPs: 123.5165. Time: 104.4009 us. Best GFLOPs: 144.4391
2024-04-29 03:56:52 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_conv2d_NCHWc_add_1] Trial #38: GFLOPs: 73.7755. Time: 174.7901 us. Best GFLOPs: 144.4391
2024-04-29 03:56:52 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_conv2d_NCHWc_add_1] Trial #39: GFLOPs: 182.0953. Time: 70.8159 us. Best GFLOPs: 182.0953
2024-04-29 03:56:52 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_conv2d_NCHWc_add_1] Trial #40: GFLOPs: 107.1169. Time: 120.3847 us. Best GFLOPs: 182.0953
2024-04-29 03:56:52 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_conv2d_NCHWc_add_1] Trial #41: GFLOPs: 39.5126. Time: 326.3572 us. Best GFLOPs: 182.0953
2024-04-29 03:56:52 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_conv2d_NCHWc_add_1] Trial #42: GFLOPs: 105.2087. Time: 122.5682 us. Best GFLOPs: 182.0953
2024-04-29 03:56:52 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_conv2d_NCHWc_add_1] Trial #43: GFLOPs: 67.9282. Time: 189.8361 us. Best GFLOPs: 182.0953
2024-04-29 03:56:52 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_conv2d_NCHWc_add_1] Trial #44: GFLOPs: 3.5742. Time: 3607.8938 us. Best GFLOPs: 182.0953
2024-04-29 03:56:52 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_conv2d_NCHWc_add_1] Trial #45: GFLOPs: 38.9977. Time: 330.6661 us. Best GFLOPs: 182.0953
2024-04-29 03:56:52 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_conv2d_NCHWc_add_1] Trial #46: GFLOPs: 43.7614. Time: 294.6717 us. Best GFLOPs: 182.0953
2024-04-29 03:56:52 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_conv2d_NCHWc_add_1] Trial #47: GFLOPs: 21.8903. Time: 589.0840 us. Best GFLOPs: 182.0953
2024-04-29 03:56:52 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_conv2d_NCHWc_add_1] Trial #48: GFLOPs: 22.8500. Time: 564.3416 us. Best GFLOPs: 182.0953
2024-04-29 03:56:52 [INFO] [task_scheduler.cc:121] [Task #2: fused_nn_contrib_conv2d_NCHWc_add_1] Trial #49: Error in building:
LocalBuilder: Timeout, killed after 30.0 seconds
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(2), T.int64(28), T.int64(28), T.int64(64)), "float32"), p1: T.Buffer((T.int64(16), T.int64(2), T.int64(1), T.int64(1), T.int64(64), T.int64(16)), "float32"), p2: T.Buffer((T.int64(1), T.int64(16), T.int64(1), T.int64(1), T.int64(16)), "float32"), T_add: T.Buffer((T.int64(1), T.int64(16), T.int64(14), T.int64(14), T.int64(16)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        conv2d_NCHWc = T.alloc_buffer((T.int64(1), T.int64(16), T.int64(14), T.int64(14), T.int64(16)))
        for n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_fused in T.parallel(T.int64(1568), annotations={"pragma_auto_unroll_max_step": 512, "pragma_unroll_explicit": 1}):
            for oh_1, ow_1, oc_block_1 in T.grid(T.int64(2), T.int64(1), T.int64(4)):
                for n_2_init, oc_chunk_2_init, oh_2_init, ow_2_init, oc_block_2_init, n_3_init, oc_chunk_3_init, oh_3_init, ow_3_init, oc_block_3_init in T.grid(T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(1)):
                    with T.block("conv2d_NCHWc_init"):
                        v_n = T.axis.spatial(T.int64(1), n_2_init + n_3_init)
                        v_oc_chunk = T.axis.spatial(T.int64(16), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_fused // T.int64(392) * T.int64(4) + n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_fused % T.int64(4) + oc_chunk_2_init + oc_chunk_3_init)
                        v_oh = T.axis.spatial(T.int64(14), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_fused % T.int64(392) // T.int64(56) * T.int64(2) + oh_1 + oh_2_init + oh_3_init)
                        v_ow = T.axis.spatial(T.int64(14), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_fused % T.int64(56) // T.int64(8) * T.int64(2) + ow_1 * T.int64(2) + ow_2_init * T.int64(2) + ow_3_init)
                        v_oc_block = T.axis.spatial(T.int64(16), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_fused % T.int64(8) // T.int64(4) * T.int64(8) + oc_block_1 * T.int64(2) + oc_block_2_init + oc_block_3_init)
                        T.reads()
                        T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                        T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                        conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = T.float32(0)
                for ic_0, kh_0, kw_0, n_2, oc_chunk_2, oh_2, ow_2, oc_block_2, ic_1, kh_1, kw_1, n_3, oc_chunk_3, oh_3, ow_3, oc_block_3 in T.grid(T.int64(2), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(64), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(1)):
                    with T.block("conv2d_NCHWc_update"):
                        v_n = T.axis.spatial(T.int64(1), n_2 + n_3)
                        v_oc_chunk = T.axis.spatial(T.int64(16), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_fused // T.int64(392) * T.int64(4) + n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_fused % T.int64(4) + oc_chunk_2 + oc_chunk_3)
                        v_oh = T.axis.spatial(T.int64(14), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_fused % T.int64(392) // T.int64(56) * T.int64(2) + oh_1 + oh_2 + oh_3)
                        v_ow = T.axis.spatial(T.int64(14), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_fused % T.int64(56) // T.int64(8) * T.int64(2) + ow_1 * T.int64(2) + ow_2 * T.int64(2) + ow_3)
                        v_oc_block = T.axis.spatial(T.int64(16), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_fused % T.int64(8) // T.int64(4) * T.int64(8) + oc_block_1 * T.int64(2) + oc_block_2 + oc_block_3)
                        v_ic = T.axis.reduce(T.int64(128), ic_0 * T.int64(64) + ic_1)
                        v_kh = T.axis.reduce(T.int64(1), kh_0 + kh_1)
                        v_kw = T.axis.reduce(T.int64(1), kw_0 + kw_1)
                        T.reads(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block], p0[v_n, v_ic // T.int64(64), v_oh * T.int64(2) + v_kh, v_ow * T.int64(2) + v_kw, v_ic % T.int64(64)], p1[v_oc_chunk, v_ic // T.int64(64), v_kh, v_kw, v_ic % T.int64(64), v_oc_block])
                        T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                        T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                        conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] + p0[v_n, v_ic // T.int64(64), v_oh * T.int64(2) + v_kh, v_ow * T.int64(2) + v_kw, v_ic % T.int64(64)] * p1[v_oc_chunk, v_ic // T.int64(64), v_kh, v_kw, v_ic % T.int64(64), v_oc_block]
                for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(1), T.int64(1), T.int64(2)):
                    for ax4_fused in T.vectorized(T.int64(2)):
                        with T.block("T_add"):
                            v_ax0 = T.axis.spatial(T.int64(1), ax0)
                            v_ax1 = T.axis.spatial(T.int64(16), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_fused // T.int64(392) * T.int64(4) + n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_fused % T.int64(4) + ax1)
                            v_ax2 = T.axis.spatial(T.int64(14), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_fused % T.int64(392) // T.int64(56) * T.int64(2) + oh_1 + ax2)
                            v_ax3 = T.axis.spatial(T.int64(14), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_fused % T.int64(56) // T.int64(8) * T.int64(2) + ax3)
                            v_ax4 = T.axis.spatial(T.int64(16), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_fused % T.int64(8) // T.int64(4) * T.int64(8) + oc_block_1 * T.int64(2) + ax4_fused)
                            T.reads(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4])
                            T.writes(T_add[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                            T_add[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] + p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4]
b0 = sch.get_block(name="conv2d_NCHWc", func_name="main")
b1 = sch.get_block(name="root", func_name="main")
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.tiling_structure", ann_val="SSRSRS")
l2, l3, l4, l5, l6, l7, l8, l9 = sch.get_loops(block=b0)
v10, v11, v12, v13 = sch.sample_perfect_tile(loop=l2, n=4, max_innermost_factor=64, decision=[1, 1, 1, 1])
l14, l15, l16, l17 = sch.split(loop=l2, factors=[v10, v11, v12, v13], preserve_unit_iters=True)
v18, v19, v20, v21 = sch.sample_perfect_tile(loop=l3, n=4, max_innermost_factor=64, decision=[4, 4, 1, 1])
l22, l23, l24, l25 = sch.split(loop=l3, factors=[v18, v19, v20, v21], preserve_unit_iters=True)
v26, v27, v28, v29 = sch.sample_perfect_tile(loop=l4, n=4, max_innermost_factor=64, decision=[7, 2, 1, 1])
l30, l31, l32, l33 = sch.split(loop=l4, factors=[v26, v27, v28, v29], preserve_unit_iters=True)
v34, v35, v36, v37 = sch.sample_perfect_tile(loop=l5, n=4, max_innermost_factor=64, decision=[7, 1, 1, 2])
l38, l39, l40, l41 = sch.split(loop=l5, factors=[v34, v35, v36, v37], preserve_unit_iters=True)
v42, v43, v44, v45 = sch.sample_perfect_tile(loop=l6, n=4, max_innermost_factor=64, decision=[2, 4, 2, 1])
l46, l47, l48, l49 = sch.split(loop=l6, factors=[v42, v43, v44, v45], preserve_unit_iters=True)
v50, v51 = sch.sample_perfect_tile(loop=l7, n=2, max_innermost_factor=64, decision=[2, 64])
l52, l53 = sch.split(loop=l7, factors=[v50, v51], preserve_unit_iters=True)
v54, v55 = sch.sample_perfect_tile(loop=l8, n=2, max_innermost_factor=64, decision=[1, 1])
l56, l57 = sch.split(loop=l8, factors=[v54, v55], preserve_unit_iters=True)
v58, v59 = sch.sample_perfect_tile(loop=l9, n=2, max_innermost_factor=64, decision=[1, 1])
l60, l61 = sch.split(loop=l9, factors=[v58, v59], preserve_unit_iters=True)
sch.reorder(l14, l22, l30, l38, l46, l15, l23, l31, l39, l47, l52, l56, l60, l16, l24, l32, l40, l48, l53, l57, l61, l17, l25, l33, l41, l49)
b62, = sch.get_consumers(block=b0)
sch.reverse_compute_at(block=b62, loop=l47, preserve_unit_loops=True, index=-1)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.vectorize", ann_val=64)
v63 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.unroll_explicit", ann_val=v63)
sch.enter_postproc()
b64 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b64, ann_key="meta_schedule.parallel")
sch.unannotate(block_or_loop=b64, ann_key="meta_schedule.vectorize")
sch.unannotate(block_or_loop=b64, ann_key="meta_schedule.unroll_explicit")
b65, b66 = sch.get_child_blocks(b64)
l67, l68, l69, l70, l71, l72, l73, l74, l75, l76, l77, l78, l79, l80, l81, l82, l83, l84, l85, l86, l87, l88, l89, l90, l91, l92 = sch.get_loops(block=b65)
l93 = sch.fuse(l67, l68, l69, l70, l71, l72, l73, preserve_unit_iters=True)
sch.parallel(loop=l93)
sch.annotate(block_or_loop=l93, ann_key="pragma_auto_unroll_max_step", ann_val=512)
sch.annotate(block_or_loop=l93, ann_key="pragma_unroll_explicit", ann_val=1)
l94, l95, l96, l97, l98, l99, l100, l101, l102 = sch.get_loops(block=b66)
l103 = sch.fuse(l102, preserve_unit_iters=True)
sch.vectorize(loop=l103)
b104 = sch.get_block(name="conv2d_NCHWc", func_name="main")
l105, l106, l107, l108, l109, l110, l111, l112, l113, l114, l115, l116, l117, l118, l119, l120, l121, l122, l123, l124 = sch.get_loops(block=b104)
b125 = sch.decompose_reduction(block=b104, loop=l109)
2024-04-29 03:56:52 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_conv2d_NCHWc_add_1] Trial #50: GFLOPs: 8.5980. Time: 1499.7876 us. Best GFLOPs: 182.0953
2024-04-29 03:56:52 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_conv2d_NCHWc_add_1] Trial #51: GFLOPs: 1.0450. Time: 12339.8419 us. Best GFLOPs: 182.0953
2024-04-29 03:56:52 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_conv2d_NCHWc_add_1] Trial #52: GFLOPs: 5.3465. Time: 2411.8954 us. Best GFLOPs: 182.0953
2024-04-29 03:56:52 [INFO] [task_scheduler.cc:121] [Task #2: fused_nn_contrib_conv2d_NCHWc_add_1] Trial #53: Error in building:
LocalBuilder: Timeout, killed after 30.0 seconds
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(2), T.int64(28), T.int64(28), T.int64(64)), "float32"), p1: T.Buffer((T.int64(16), T.int64(2), T.int64(1), T.int64(1), T.int64(64), T.int64(16)), "float32"), p2: T.Buffer((T.int64(1), T.int64(16), T.int64(1), T.int64(1), T.int64(16)), "float32"), T_add: T.Buffer((T.int64(1), T.int64(16), T.int64(14), T.int64(14), T.int64(16)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        conv2d_NCHWc = T.alloc_buffer((T.int64(1), T.int64(16), T.int64(14), T.int64(14), T.int64(16)))
        for n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_fused in T.parallel(T.int64(56), annotations={"pragma_auto_unroll_max_step": 512, "pragma_unroll_explicit": 1}):
            for n_1, oc_chunk_1, oh_1, ow_1, oc_block_1 in T.grid(T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(2)):
                for n_2_init, oc_chunk_2_init, oh_2_init, ow_2_init, oc_block_2_init, n_3_init, oc_chunk_3_init, oh_3_init, ow_3_init in T.grid(T.int64(1), T.int64(2), T.int64(1), T.int64(2), T.int64(2), T.int64(1), T.int64(4), T.int64(7), T.int64(1)):
                    for oc_block_3_fused_init in T.vectorized(T.int64(2)):
                        with T.block("conv2d_NCHWc_init"):
                            v_n = T.axis.spatial(T.int64(1), n_1 + n_2_init + n_3_init)
                            v_oc_chunk = T.axis.spatial(T.int64(16), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_fused // T.int64(28) * T.int64(8) + oc_chunk_1 * T.int64(8) + oc_chunk_2_init * T.int64(4) + oc_chunk_3_init)
                            v_oh = T.axis.spatial(T.int64(14), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_fused % T.int64(28) // T.int64(14) * T.int64(7) + oh_1 * T.int64(7) + oh_2_init * T.int64(7) + oh_3_init)
                            v_ow = T.axis.spatial(T.int64(14), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_fused % T.int64(14) // T.int64(2) * T.int64(2) + ow_1 * T.int64(2) + ow_2_init + ow_3_init)
                            v_oc_block = T.axis.spatial(T.int64(16), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_fused % T.int64(2) * T.int64(8) + oc_block_1 * T.int64(4) + oc_block_2_init * T.int64(2) + oc_block_3_fused_init)
                            T.reads()
                            T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                            T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                            conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = T.float32(0)
                for ic_0, kh_0, kw_0, n_2, oc_chunk_2, oh_2, ow_2, oc_block_2, ic_1, kh_1, kw_1, n_3, oc_chunk_3, oh_3, ow_3 in T.grid(T.int64(64), T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(1), T.int64(2), T.int64(2), T.int64(2), T.int64(1), T.int64(1), T.int64(1), T.int64(4), T.int64(7), T.int64(1)):
                    for oc_block_3_fused in T.vectorized(T.int64(2)):
                        with T.block("conv2d_NCHWc_update"):
                            v_n = T.axis.spatial(T.int64(1), n_1 + n_2 + n_3)
                            v_oc_chunk = T.axis.spatial(T.int64(16), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_fused // T.int64(28) * T.int64(8) + oc_chunk_1 * T.int64(8) + oc_chunk_2 * T.int64(4) + oc_chunk_3)
                            v_oh = T.axis.spatial(T.int64(14), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_fused % T.int64(28) // T.int64(14) * T.int64(7) + oh_1 * T.int64(7) + oh_2 * T.int64(7) + oh_3)
                            v_ow = T.axis.spatial(T.int64(14), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_fused % T.int64(14) // T.int64(2) * T.int64(2) + ow_1 * T.int64(2) + ow_2 + ow_3)
                            v_oc_block = T.axis.spatial(T.int64(16), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_fused % T.int64(2) * T.int64(8) + oc_block_1 * T.int64(4) + oc_block_2 * T.int64(2) + oc_block_3_fused)
                            v_ic = T.axis.reduce(T.int64(128), ic_0 * T.int64(2) + ic_1)
                            v_kh = T.axis.reduce(T.int64(1), kh_0 + kh_1)
                            v_kw = T.axis.reduce(T.int64(1), kw_0 + kw_1)
                            T.reads(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block], p0[v_n, v_ic // T.int64(64), v_oh * T.int64(2) + v_kh, v_ow * T.int64(2) + v_kw, v_ic % T.int64(64)], p1[v_oc_chunk, v_ic // T.int64(64), v_kh, v_kw, v_ic % T.int64(64), v_oc_block])
                            T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                            T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                            conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] + p0[v_n, v_ic // T.int64(64), v_oh * T.int64(2) + v_kh, v_ow * T.int64(2) + v_kw, v_ic % T.int64(64)] * p1[v_oc_chunk, v_ic // T.int64(64), v_kh, v_kw, v_ic % T.int64(64), v_oc_block]
            for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(8), T.int64(7), T.int64(2)):
                for ax4_fused in T.vectorized(T.int64(8)):
                    with T.block("T_add"):
                        v_ax0 = T.axis.spatial(T.int64(1), ax0)
                        v_ax1 = T.axis.spatial(T.int64(16), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_fused // T.int64(28) * T.int64(8) + ax1)
                        v_ax2 = T.axis.spatial(T.int64(14), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_fused % T.int64(28) // T.int64(14) * T.int64(7) + ax2)
                        v_ax3 = T.axis.spatial(T.int64(14), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_fused % T.int64(14) // T.int64(2) * T.int64(2) + ax3)
                        v_ax4 = T.axis.spatial(T.int64(16), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_fused % T.int64(2) * T.int64(8) + ax4_fused)
                        T.reads(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4])
                        T.writes(T_add[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                        T_add[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] + p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4]
b0 = sch.get_block(name="conv2d_NCHWc", func_name="main")
b1 = sch.get_block(name="root", func_name="main")
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.tiling_structure", ann_val="SSRSRS")
l2, l3, l4, l5, l6, l7, l8, l9 = sch.get_loops(block=b0)
v10, v11, v12, v13 = sch.sample_perfect_tile(loop=l2, n=4, max_innermost_factor=64, decision=[1, 1, 1, 1])
l14, l15, l16, l17 = sch.split(loop=l2, factors=[v10, v11, v12, v13], preserve_unit_iters=True)
v18, v19, v20, v21 = sch.sample_perfect_tile(loop=l3, n=4, max_innermost_factor=64, decision=[2, 1, 2, 4])
l22, l23, l24, l25 = sch.split(loop=l3, factors=[v18, v19, v20, v21], preserve_unit_iters=True)
v26, v27, v28, v29 = sch.sample_perfect_tile(loop=l4, n=4, max_innermost_factor=64, decision=[2, 1, 1, 7])
l30, l31, l32, l33 = sch.split(loop=l4, factors=[v26, v27, v28, v29], preserve_unit_iters=True)
v34, v35, v36, v37 = sch.sample_perfect_tile(loop=l5, n=4, max_innermost_factor=64, decision=[7, 1, 2, 1])
l38, l39, l40, l41 = sch.split(loop=l5, factors=[v34, v35, v36, v37], preserve_unit_iters=True)
v42, v43, v44, v45 = sch.sample_perfect_tile(loop=l6, n=4, max_innermost_factor=64, decision=[2, 2, 2, 2])
l46, l47, l48, l49 = sch.split(loop=l6, factors=[v42, v43, v44, v45], preserve_unit_iters=True)
v50, v51 = sch.sample_perfect_tile(loop=l7, n=2, max_innermost_factor=64, decision=[64, 2])
l52, l53 = sch.split(loop=l7, factors=[v50, v51], preserve_unit_iters=True)
v54, v55 = sch.sample_perfect_tile(loop=l8, n=2, max_innermost_factor=64, decision=[1, 1])
l56, l57 = sch.split(loop=l8, factors=[v54, v55], preserve_unit_iters=True)
v58, v59 = sch.sample_perfect_tile(loop=l9, n=2, max_innermost_factor=64, decision=[1, 1])
l60, l61 = sch.split(loop=l9, factors=[v58, v59], preserve_unit_iters=True)
sch.reorder(l14, l22, l30, l38, l46, l15, l23, l31, l39, l47, l52, l56, l60, l16, l24, l32, l40, l48, l53, l57, l61, l17, l25, l33, l41, l49)
b62, = sch.get_consumers(block=b0)
sch.reverse_compute_at(block=b62, loop=l46, preserve_unit_loops=True, index=-1)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.vectorize", ann_val=64)
v63 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.unroll_explicit", ann_val=v63)
sch.enter_postproc()
b64 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b64, ann_key="meta_schedule.parallel")
sch.unannotate(block_or_loop=b64, ann_key="meta_schedule.vectorize")
sch.unannotate(block_or_loop=b64, ann_key="meta_schedule.unroll_explicit")
b65, b66 = sch.get_child_blocks(b64)
l67, l68, l69, l70, l71, l72, l73, l74, l75, l76, l77, l78, l79, l80, l81, l82, l83, l84, l85, l86, l87, l88, l89, l90, l91, l92 = sch.get_loops(block=b65)
l93 = sch.fuse(l67, l68, l69, l70, l71, preserve_unit_iters=True)
sch.parallel(loop=l93)
l94 = sch.fuse(l92, preserve_unit_iters=True)
sch.vectorize(loop=l94)
sch.annotate(block_or_loop=l93, ann_key="pragma_auto_unroll_max_step", ann_val=512)
sch.annotate(block_or_loop=l93, ann_key="pragma_unroll_explicit", ann_val=1)
l95, l96, l97, l98, l99, l100 = sch.get_loops(block=b66)
l101 = sch.fuse(l100, preserve_unit_iters=True)
sch.vectorize(loop=l101)
b102 = sch.get_block(name="conv2d_NCHWc", func_name="main")
l103, l104, l105, l106, l107, l108, l109, l110, l111, l112, l113, l114, l115, l116, l117, l118, l119, l120, l121, l122, l123, l124 = sch.get_loops(block=b102)
b125 = sch.decompose_reduction(block=b102, loop=l109)
2024-04-29 03:56:52 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_conv2d_NCHWc_add_1] Trial #54: GFLOPs: 121.0888. Time: 106.4940 us. Best GFLOPs: 182.0953
2024-04-29 03:56:52 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_conv2d_NCHWc_add_1] Trial #55: GFLOPs: 23.1259. Time: 557.6097 us. Best GFLOPs: 182.0953
2024-04-29 03:56:52 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_conv2d_NCHWc_add_1] Trial #56: GFLOPs: 4.1507. Time: 3106.7385 us. Best GFLOPs: 182.0953
2024-04-29 03:56:52 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_conv2d_NCHWc_add_1] Trial #57: GFLOPs: 7.8471. Time: 1643.3044 us. Best GFLOPs: 182.0953
2024-04-29 03:56:52 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_conv2d_NCHWc_add_1] Trial #58: GFLOPs: 24.0021. Time: 537.2533 us. Best GFLOPs: 182.0953
2024-04-29 03:56:52 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_conv2d_NCHWc_add_1] Trial #59: GFLOPs: 105.3260. Time: 122.4317 us. Best GFLOPs: 182.0953
2024-04-29 03:56:52 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_conv2d_NCHWc_add_1] Trial #60: GFLOPs: 66.8588. Time: 192.8727 us. Best GFLOPs: 182.0953
2024-04-29 03:56:52 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_conv2d_NCHWc_add_1] Trial #61: GFLOPs: 26.1964. Time: 492.2516 us. Best GFLOPs: 182.0953
2024-04-29 03:56:52 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_conv2d_NCHWc_add_1] Trial #62: GFLOPs: 53.5778. Time: 240.6822 us. Best GFLOPs: 182.0953
2024-04-29 03:56:52 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_conv2d_NCHWc_add_1] Trial #63: GFLOPs: 87.6864. Time: 147.0608 us. Best GFLOPs: 182.0953
2024-04-29 03:56:52 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_conv2d_NCHWc_add_1] Trial #64: GFLOPs: 55.0872. Time: 234.0876 us. Best GFLOPs: 182.0953
2024-04-29 08:49:38 [INFO] [evolutionary_search.cc:713] Generating candidates......
2024-04-29 08:49:38 [INFO] [evolutionary_search.cc:715] Picked top 61 candidate(s) from database
2024-04-29 08:49:41 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x350fee8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x3234288)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x438f688)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x3a6a888)]: 0 failure(s)
2024-04-29 08:49:41 [INFO] [evolutionary_search.cc:723] Sampled 451 candidate(s)
2024-04-29 08:49:46 [INFO] [evolutionary_search.cc:621] Evolve iter #0 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x350fee8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x3234288)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x438f688)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x3a6a888)]: 0 failure(s)
2024-04-29 08:49:51 [INFO] [evolutionary_search.cc:621] Evolve iter #1 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x350fee8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x3234288)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x438f688)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x3a6a888)]: 0 failure(s)
2024-04-29 08:49:57 [INFO] [evolutionary_search.cc:621] Evolve iter #2 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x350fee8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x3234288)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x438f688)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x3a6a888)]: 0 failure(s)
2024-04-29 08:50:02 [INFO] [evolutionary_search.cc:621] Evolve iter #3 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x350fee8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x3234288)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x438f688)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x3a6a888)]: 0 failure(s)
2024-04-29 08:50:06 [INFO] [evolutionary_search.cc:649] Scores of the best 64 candidates:
[1 : 16]:	0.9620  0.9326  0.9159  0.8953  0.8869  0.8804  0.8789  0.8755  0.8588  0.8477  0.8368  0.8142  0.8125  0.8090  0.8090  0.8035
[17 : 32]:	0.8030  0.7997  0.7963  0.7963  0.7958  0.7938  0.7927  0.7909  0.7901  0.7862  0.7855  0.7798  0.7786  0.7780  0.7777  0.7777
[33 : 48]:	0.7739  0.7667  0.7646  0.7631  0.7596  0.7593  0.7570  0.7568  0.7517  0.7517  0.7515  0.7514  0.7483  0.7436  0.7416  0.7412
[49 : 64]:	0.7405  0.7404  0.7388  0.7388  0.7372  0.7359  0.7356  0.7356  0.7356  0.7353  0.7339  0.7332  0.7318  0.7317  0.7317  0.7315
2024-04-29 08:50:06 [INFO] [evolutionary_search.cc:727] Got 64 candidate(s) with evolutionary search
2024-04-29 08:50:06 [INFO] [evolutionary_search.cc:730] Sending 64 candidates(s) for measurement
2024-04-29 08:51:25 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_conv2d_NCHWc_add_1] Trial #65: GFLOPs: 115.1105. Time: 112.0249 us. Best GFLOPs: 182.0953
2024-04-29 08:51:25 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_conv2d_NCHWc_add_1] Trial #66: GFLOPs: 96.7642. Time: 133.2645 us. Best GFLOPs: 182.0953
2024-04-29 08:51:25 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_conv2d_NCHWc_add_1] Trial #67: GFLOPs: 195.0200. Time: 66.1226 us. Best GFLOPs: 195.0200
2024-04-29 08:51:25 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_conv2d_NCHWc_add_1] Trial #68: GFLOPs: 93.1919. Time: 138.3729 us. Best GFLOPs: 195.0200
2024-04-29 08:51:25 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_conv2d_NCHWc_add_1] Trial #69: GFLOPs: 121.8619. Time: 105.8184 us. Best GFLOPs: 195.0200
2024-04-29 08:51:25 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_conv2d_NCHWc_add_1] Trial #70: GFLOPs: 199.5521. Time: 64.6209 us. Best GFLOPs: 199.5521
2024-04-29 08:51:25 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_conv2d_NCHWc_add_1] Trial #71: GFLOPs: 108.3140. Time: 119.0542 us. Best GFLOPs: 199.5521
2024-04-29 08:51:25 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_conv2d_NCHWc_add_1] Trial #72: GFLOPs: 213.7579. Time: 60.3263 us. Best GFLOPs: 213.7579
2024-04-29 08:51:25 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_conv2d_NCHWc_add_1] Trial #73: GFLOPs: 132.6681. Time: 97.1992 us. Best GFLOPs: 213.7579
2024-04-29 08:51:25 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_conv2d_NCHWc_add_1] Trial #74: GFLOPs: 87.2498. Time: 147.7966 us. Best GFLOPs: 213.7579
2024-04-29 08:51:25 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_conv2d_NCHWc_add_1] Trial #75: GFLOPs: 125.3125. Time: 102.9046 us. Best GFLOPs: 213.7579
2024-04-29 08:51:25 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_conv2d_NCHWc_add_1] Trial #76: GFLOPs: 136.4348. Time: 94.5157 us. Best GFLOPs: 213.7579
2024-04-29 08:51:25 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_conv2d_NCHWc_add_1] Trial #77: GFLOPs: 89.4957. Time: 144.0877 us. Best GFLOPs: 213.7579
2024-04-29 08:51:25 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_conv2d_NCHWc_add_1] Trial #78: GFLOPs: 132.4397. Time: 97.3668 us. Best GFLOPs: 213.7579
2024-04-29 08:51:25 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_conv2d_NCHWc_add_1] Trial #79: GFLOPs: 148.2698. Time: 86.9714 us. Best GFLOPs: 213.7579
2024-04-29 08:51:25 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_conv2d_NCHWc_add_1] Trial #80: GFLOPs: 179.1680. Time: 71.9729 us. Best GFLOPs: 213.7579
2024-04-29 08:51:25 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_conv2d_NCHWc_add_1] Trial #81: GFLOPs: 150.5043. Time: 85.6801 us. Best GFLOPs: 213.7579
2024-04-29 08:51:25 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_conv2d_NCHWc_add_1] Trial #82: GFLOPs: 107.3819. Time: 120.0876 us. Best GFLOPs: 213.7579
2024-04-29 08:51:25 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_conv2d_NCHWc_add_1] Trial #83: GFLOPs: 98.5572. Time: 130.8400 us. Best GFLOPs: 213.7579
2024-04-29 08:51:25 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_conv2d_NCHWc_add_1] Trial #84: GFLOPs: 96.5392. Time: 133.5751 us. Best GFLOPs: 213.7579
2024-04-29 08:51:25 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_conv2d_NCHWc_add_1] Trial #85: GFLOPs: 185.2276. Time: 69.6183 us. Best GFLOPs: 213.7579
2024-04-29 08:51:25 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_conv2d_NCHWc_add_1] Trial #86: GFLOPs: 107.1160. Time: 120.3857 us. Best GFLOPs: 213.7579
2024-04-29 08:51:25 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_conv2d_NCHWc_add_1] Trial #87: GFLOPs: 99.4628. Time: 129.6488 us. Best GFLOPs: 213.7579
2024-04-29 08:51:25 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_conv2d_NCHWc_add_1] Trial #88: GFLOPs: 107.2265. Time: 120.2616 us. Best GFLOPs: 213.7579
2024-04-29 08:51:25 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_conv2d_NCHWc_add_1] Trial #89: GFLOPs: 73.3071. Time: 175.9070 us. Best GFLOPs: 213.7579
2024-04-29 08:51:25 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_conv2d_NCHWc_add_1] Trial #90: GFLOPs: 131.3336. Time: 98.1869 us. Best GFLOPs: 213.7579
2024-04-29 08:51:25 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_conv2d_NCHWc_add_1] Trial #91: GFLOPs: 110.4471. Time: 116.7548 us. Best GFLOPs: 213.7579
2024-04-29 08:51:25 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_conv2d_NCHWc_add_1] Trial #92: GFLOPs: 167.5414. Time: 76.9675 us. Best GFLOPs: 213.7579
2024-04-29 08:51:25 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_conv2d_NCHWc_add_1] Trial #93: GFLOPs: 77.4297. Time: 166.5412 us. Best GFLOPs: 213.7579
2024-04-29 08:51:25 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_conv2d_NCHWc_add_1] Trial #94: GFLOPs: 72.7999. Time: 177.1325 us. Best GFLOPs: 213.7579
2024-04-29 08:51:25 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_conv2d_NCHWc_add_1] Trial #95: GFLOPs: 81.3151. Time: 158.5835 us. Best GFLOPs: 213.7579
2024-04-29 08:51:25 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_conv2d_NCHWc_add_1] Trial #96: GFLOPs: 162.2539. Time: 79.4757 us. Best GFLOPs: 213.7579
2024-04-29 08:51:25 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_conv2d_NCHWc_add_1] Trial #97: GFLOPs: 142.5596. Time: 90.4550 us. Best GFLOPs: 213.7579
2024-04-29 08:51:25 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_conv2d_NCHWc_add_1] Trial #98: GFLOPs: 128.1428. Time: 100.6317 us. Best GFLOPs: 213.7579
2024-04-29 08:51:25 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_conv2d_NCHWc_add_1] Trial #99: GFLOPs: 147.9555. Time: 87.1561 us. Best GFLOPs: 213.7579
2024-04-29 08:51:25 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_conv2d_NCHWc_add_1] Trial #100: GFLOPs: 166.9039. Time: 77.2614 us. Best GFLOPs: 213.7579
2024-04-29 08:51:25 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_conv2d_NCHWc_add_1] Trial #101: GFLOPs: 136.9119. Time: 94.1864 us. Best GFLOPs: 213.7579
2024-04-29 08:51:25 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_conv2d_NCHWc_add_1] Trial #102: GFLOPs: 36.9659. Time: 348.8412 us. Best GFLOPs: 213.7579
2024-04-29 08:51:25 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_conv2d_NCHWc_add_1] Trial #103: GFLOPs: 45.5230. Time: 283.2684 us. Best GFLOPs: 213.7579
2024-04-29 08:51:25 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_conv2d_NCHWc_add_1] Trial #104: GFLOPs: 71.1210. Time: 181.3140 us. Best GFLOPs: 213.7579
2024-04-29 08:51:25 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_conv2d_NCHWc_add_1] Trial #105: GFLOPs: 89.7823. Time: 143.6277 us. Best GFLOPs: 213.7579
2024-04-29 08:51:25 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_conv2d_NCHWc_add_1] Trial #106: GFLOPs: 77.8553. Time: 165.6307 us. Best GFLOPs: 213.7579
2024-04-29 08:51:25 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_conv2d_NCHWc_add_1] Trial #107: GFLOPs: 122.0188. Time: 105.6823 us. Best GFLOPs: 213.7579
2024-04-29 08:51:25 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_conv2d_NCHWc_add_1] Trial #108: GFLOPs: 70.3824. Time: 183.2166 us. Best GFLOPs: 213.7579
2024-04-29 08:51:25 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_conv2d_NCHWc_add_1] Trial #109: GFLOPs: 146.9079. Time: 87.7777 us. Best GFLOPs: 213.7579
2024-04-29 08:51:25 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_conv2d_NCHWc_add_1] Trial #110: GFLOPs: 83.2036. Time: 154.9840 us. Best GFLOPs: 213.7579
2024-04-29 08:51:25 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_conv2d_NCHWc_add_1] Trial #111: GFLOPs: 97.1113. Time: 132.7881 us. Best GFLOPs: 213.7579
2024-04-29 08:51:25 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_conv2d_NCHWc_add_1] Trial #112: GFLOPs: 107.0887. Time: 120.4164 us. Best GFLOPs: 213.7579
2024-04-29 08:51:25 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_conv2d_NCHWc_add_1] Trial #113: GFLOPs: 184.0890. Time: 70.0489 us. Best GFLOPs: 213.7579
2024-04-29 08:51:25 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_conv2d_NCHWc_add_1] Trial #114: GFLOPs: 129.7903. Time: 99.3543 us. Best GFLOPs: 213.7579
2024-04-29 08:51:25 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_conv2d_NCHWc_add_1] Trial #115: GFLOPs: 154.7340. Time: 83.3381 us. Best GFLOPs: 213.7579
2024-04-29 08:51:25 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_conv2d_NCHWc_add_1] Trial #116: GFLOPs: 161.2270. Time: 79.9818 us. Best GFLOPs: 213.7579
2024-04-29 08:51:25 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_conv2d_NCHWc_add_1] Trial #117: GFLOPs: 198.4519. Time: 64.9791 us. Best GFLOPs: 213.7579
2024-04-29 08:51:25 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_conv2d_NCHWc_add_1] Trial #118: GFLOPs: 108.6292. Time: 118.7087 us. Best GFLOPs: 213.7579
2024-04-29 08:51:25 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_conv2d_NCHWc_add_1] Trial #119: GFLOPs: 174.0265. Time: 74.0992 us. Best GFLOPs: 213.7579
2024-04-29 08:51:25 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_conv2d_NCHWc_add_1] Trial #120: GFLOPs: 171.1820. Time: 75.3305 us. Best GFLOPs: 213.7579
2024-04-29 08:51:25 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_conv2d_NCHWc_add_1] Trial #121: GFLOPs: 184.5909. Time: 69.8584 us. Best GFLOPs: 213.7579
2024-04-29 08:51:25 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_conv2d_NCHWc_add_1] Trial #122: GFLOPs: 164.4591. Time: 78.4100 us. Best GFLOPs: 213.7579
2024-04-29 08:51:25 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_conv2d_NCHWc_add_1] Trial #123: GFLOPs: 112.1795. Time: 114.9518 us. Best GFLOPs: 213.7579
2024-04-29 08:51:25 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_conv2d_NCHWc_add_1] Trial #124: GFLOPs: 186.9881. Time: 68.9628 us. Best GFLOPs: 213.7579
2024-04-29 08:51:25 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_conv2d_NCHWc_add_1] Trial #125: GFLOPs: 59.6452. Time: 216.1991 us. Best GFLOPs: 213.7579
2024-04-29 08:51:25 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_conv2d_NCHWc_add_1] Trial #126: GFLOPs: 34.5518. Time: 373.2145 us. Best GFLOPs: 213.7579
2024-04-29 08:51:25 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_conv2d_NCHWc_add_1] Trial #127: GFLOPs: 47.3961. Time: 272.0736 us. Best GFLOPs: 213.7579
2024-04-29 08:51:25 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_contrib_conv2d_NCHWc_add_1] Trial #128: GFLOPs: 51.6971. Time: 249.4380 us. Best GFLOPs: 213.7579
