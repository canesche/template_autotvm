2024-04-29 03:21:06 [INFO] [task_scheduler.cc:160] Initializing Task #27: "fused_nn_global_avg_pool2d"
2024-04-29 03:21:06 [INFO] [task_scheduler.cc:35] 
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(16), T.int64(7), T.int64(7), T.int64(32)), "float32"), adaptive_pool_avg: T.Buffer((T.int64(1), T.int64(16), T.int64(1), T.int64(1), T.int64(32)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        adaptive_pool_sum = T.alloc_buffer((T.int64(1), T.int64(16), T.int64(1), T.int64(1), T.int64(32)))
        for ax0, ax1, ax2, ax3, ax4, rv0, rv1 in T.grid(T.int64(1), T.int64(16), T.int64(1), T.int64(1), T.int64(32), T.int64(7), T.int64(7)):
            with T.block("adaptive_pool_sum"):
                v_ax0, v_ax1, v_ax2, v_ax3, v_ax4, v_rv0, v_rv1 = T.axis.remap("SSSSSRR", [ax0, ax1, ax2, ax3, ax4, rv0, rv1])
                T.reads(p0[v_ax0, v_ax1, v_ax2 * T.int64(7) + v_rv0, v_ax3 * T.int64(7) + v_rv1, v_ax4])
                T.writes(adaptive_pool_sum[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                with T.init():
                    adaptive_pool_sum[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.float32(0)
                adaptive_pool_sum[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = adaptive_pool_sum[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] + p0[v_ax0, v_ax1, v_ax2 * T.int64(7) + v_rv0, v_ax3 * T.int64(7) + v_rv1, v_ax4]
        for ax0, ax1, ax2, ax3, ax4 in T.grid(T.int64(1), T.int64(16), T.int64(1), T.int64(1), T.int64(32)):
            with T.block("adaptive_pool_avg"):
                v_ax0, v_ax1, v_ax2, v_ax3, v_ax4 = T.axis.remap("SSSSS", [ax0, ax1, ax2, ax3, ax4])
                T.reads(adaptive_pool_sum[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                T.writes(adaptive_pool_avg[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                T.block_attr({"schedule_rule": "meta_schedule.adaptive_pool_avg"})
                adaptive_pool_avg[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = adaptive_pool_sum[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] * T.float32(0.020408163265306121)
2024-04-29 03:21:06 [INFO] [task_scheduler.cc:164] Total 3 design space(s) generated
2024-04-29 03:21:06 [INFO] [task_scheduler.cc:170] Design space #0:
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(16), T.int64(7), T.int64(7), T.int64(32)), "float32"), adaptive_pool_avg: T.Buffer((T.int64(1), T.int64(16), T.int64(1), T.int64(1), T.int64(32)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        with T.block("root"):
            T.reads()
            T.writes()
            T.block_attr({"meta_schedule.parallel": 768, "meta_schedule.unroll_explicit": 16, "meta_schedule.vectorize": 64})
            adaptive_pool_sum = T.alloc_buffer((T.int64(1), T.int64(16), T.int64(1), T.int64(1), T.int64(32)))
            adaptive_pool_sum_rf = T.alloc_buffer((T.int64(1), T.int64(16), T.int64(1), T.int64(1), T.int64(32), T.int64(1)))
            for ax0, ax1 in T.grid(T.int64(1), T.int64(16)):
                for ax0_1, ax1_1, ax2, ax3, ax4, ax5, ax6 in T.grid(T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(32), T.int64(49)):
                    with T.block("adaptive_pool_sum_rf"):
                        vrv0_rv1_fused_0, v_ax0 = T.axis.remap("SS", [ax0_1, ax1_1])
                        v_ax1 = T.axis.spatial(T.int64(16), ax1 + ax2)
                        v_ax2, v_ax3, v_ax4, vrv0_rv1_fused_1 = T.axis.remap("SSSR", [ax3, ax4, ax5, ax6])
                        T.reads(p0[v_ax0, v_ax1, v_ax2 * T.int64(7) + (vrv0_rv1_fused_0 * T.int64(49) + vrv0_rv1_fused_1) // T.int64(7), v_ax3 * T.int64(7) + (vrv0_rv1_fused_0 * T.int64(49) + vrv0_rv1_fused_1) % T.int64(7), v_ax4])
                        T.writes(adaptive_pool_sum_rf[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4, vrv0_rv1_fused_0])
                        with T.init():
                            adaptive_pool_sum_rf[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4, vrv0_rv1_fused_0] = T.float32(0)
                        adaptive_pool_sum_rf[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4, vrv0_rv1_fused_0] = adaptive_pool_sum_rf[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4, vrv0_rv1_fused_0] + p0[v_ax0, v_ax1, v_ax2 * T.int64(7) + (vrv0_rv1_fused_0 * T.int64(49) + vrv0_rv1_fused_1) // T.int64(7), v_ax3 * T.int64(7) + (vrv0_rv1_fused_0 * T.int64(49) + vrv0_rv1_fused_1) % T.int64(7), v_ax4]
                for ax2, ax3, ax4 in T.grid(T.int64(1), T.int64(1), T.int64(32)):
                    for ax0_1, ax1_1, ax2_1, ax3_1, ax4_1, ax5 in T.grid(T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1)):
                        with T.block("adaptive_pool_sum"):
                            vrv0_rv1_fused_0, v_ax0 = T.axis.remap("RS", [ax0_1, ax1_1])
                            v_ax1 = T.axis.spatial(T.int64(16), ax1 + ax2_1)
                            v_ax2, v_ax3 = T.axis.remap("SS", [ax3_1, ax4_1])
                            v_ax4 = T.axis.spatial(T.int64(32), ax4 + ax5)
                            T.reads(adaptive_pool_sum_rf[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4, vrv0_rv1_fused_0])
                            T.writes(adaptive_pool_sum[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                            with T.init():
                                adaptive_pool_sum[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.float32(0)
                            adaptive_pool_sum[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = adaptive_pool_sum[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] + adaptive_pool_sum_rf[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4, vrv0_rv1_fused_0]
                    with T.block("adaptive_pool_avg"):
                        v_ax0, v_ax1, v_ax2, v_ax3, v_ax4 = T.axis.remap("SSSSS", [ax0, ax1, ax2, ax3, ax4])
                        T.reads(adaptive_pool_sum[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                        T.writes(adaptive_pool_avg[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                        adaptive_pool_avg[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = adaptive_pool_sum[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] * T.float32(0.020408163265306121)
b0 = sch.get_block(name="adaptive_pool_sum", func_name="main")
b1 = sch.get_block(name="adaptive_pool_avg", func_name="main")
b2 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b1, ann_key="schedule_rule")
l3, l4, l5, l6, l7, l8, l9 = sch.get_loops(block=b0)
l10 = sch.fuse(l8, l9, preserve_unit_iters=True)
v11, v12 = sch.sample_perfect_tile(loop=l10, n=2, max_innermost_factor=64, decision=[1, 49])
l13, l14 = sch.split(loop=l10, factors=[v11, v12], preserve_unit_iters=True)
b15 = sch.rfactor(loop=l13, factor_axis=5)
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.random_compute_producer", ann_val=1)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.vectorize", ann_val=64)
v16 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=1)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.unroll_explicit", ann_val=v16)
b17, = sch.get_producers(block=b0)
sch.unannotate(block_or_loop=b0, ann_key="meta_schedule.random_compute_producer")
l18 = sch.sample_compute_location(block=b0, decision=4)
sch.compute_at(block=b0, loop=l18, preserve_unit_loops=True, index=-1)
l19 = sch.sample_compute_location(block=b17, decision=1)
sch.compute_at(block=b17, loop=l19, preserve_unit_loops=True, index=-1)
2024-04-29 03:21:06 [INFO] [task_scheduler.cc:170] Design space #1:
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(16), T.int64(7), T.int64(7), T.int64(32)), "float32"), adaptive_pool_avg: T.Buffer((T.int64(1), T.int64(16), T.int64(1), T.int64(1), T.int64(32)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        with T.block("root"):
            T.reads()
            T.writes()
            T.block_attr({"meta_schedule.parallel": 768, "meta_schedule.unroll_explicit": 64, "meta_schedule.vectorize": 64})
            adaptive_pool_sum = T.alloc_buffer((T.int64(1), T.int64(16), T.int64(1), T.int64(1), T.int64(32)))
            adaptive_pool_sum_rf = T.alloc_buffer((T.int64(1), T.int64(16), T.int64(1), T.int64(1), T.int64(32), T.int64(49)))
            for ax0, ax1, ax2, ax3, ax4, rv0_rv1_fused_0, rv0_rv1_fused_1 in T.grid(T.int64(1), T.int64(16), T.int64(1), T.int64(1), T.int64(32), T.int64(1), T.int64(49)):
                with T.block("adaptive_pool_sum_rf"):
                    vrv0_rv1_fused_1, v_ax0, v_ax1, v_ax2, v_ax3, v_ax4, vrv0_rv1_fused_0 = T.axis.remap("SSSSSSR", [rv0_rv1_fused_1, ax0, ax1, ax2, ax3, ax4, rv0_rv1_fused_0])
                    T.reads(p0[v_ax0, v_ax1, v_ax2 * T.int64(7) + (vrv0_rv1_fused_0 * T.int64(49) + vrv0_rv1_fused_1) // T.int64(7), v_ax3 * T.int64(7) + (vrv0_rv1_fused_0 * T.int64(49) + vrv0_rv1_fused_1) % T.int64(7), v_ax4])
                    T.writes(adaptive_pool_sum_rf[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4, vrv0_rv1_fused_1])
                    with T.init():
                        adaptive_pool_sum_rf[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4, vrv0_rv1_fused_1] = T.float32(0)
                    adaptive_pool_sum_rf[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4, vrv0_rv1_fused_1] = adaptive_pool_sum_rf[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4, vrv0_rv1_fused_1] + p0[v_ax0, v_ax1, v_ax2 * T.int64(7) + (vrv0_rv1_fused_0 * T.int64(49) + vrv0_rv1_fused_1) // T.int64(7), v_ax3 * T.int64(7) + (vrv0_rv1_fused_0 * T.int64(49) + vrv0_rv1_fused_1) % T.int64(7), v_ax4]
            for ax0, ax1, ax2, ax3, ax4 in T.grid(T.int64(1), T.int64(16), T.int64(1), T.int64(1), T.int64(32)):
                for ax0_1, ax1_1, ax2_1, ax3_1, ax4_1, ax5 in T.grid(T.int64(49), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1)):
                    with T.block("adaptive_pool_sum"):
                        vrv0_rv1_fused_1, v_ax0 = T.axis.remap("RS", [ax0_1, ax1_1])
                        v_ax1 = T.axis.spatial(T.int64(16), ax1 + ax2_1)
                        v_ax2, v_ax3 = T.axis.remap("SS", [ax3_1, ax4_1])
                        v_ax4 = T.axis.spatial(T.int64(32), ax4 + ax5)
                        T.reads(adaptive_pool_sum_rf[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4, vrv0_rv1_fused_1])
                        T.writes(adaptive_pool_sum[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                        with T.init():
                            adaptive_pool_sum[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.float32(0)
                        adaptive_pool_sum[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = adaptive_pool_sum[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] + adaptive_pool_sum_rf[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4, vrv0_rv1_fused_1]
                with T.block("adaptive_pool_avg"):
                    v_ax0, v_ax1, v_ax2, v_ax3, v_ax4 = T.axis.remap("SSSSS", [ax0, ax1, ax2, ax3, ax4])
                    T.reads(adaptive_pool_sum[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                    T.writes(adaptive_pool_avg[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                    adaptive_pool_avg[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = adaptive_pool_sum[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] * T.float32(0.020408163265306121)
b0 = sch.get_block(name="adaptive_pool_sum", func_name="main")
b1 = sch.get_block(name="adaptive_pool_avg", func_name="main")
b2 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b1, ann_key="schedule_rule")
l3, l4, l5, l6, l7, l8, l9 = sch.get_loops(block=b0)
l10 = sch.fuse(l8, l9, preserve_unit_iters=True)
v11, v12 = sch.sample_perfect_tile(loop=l10, n=2, max_innermost_factor=64, decision=[1, 49])
l13, l14 = sch.split(loop=l10, factors=[v11, v12], preserve_unit_iters=True)
b15 = sch.rfactor(loop=l14, factor_axis=5)
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.random_compute_producer", ann_val=1)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.vectorize", ann_val=64)
v16 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=2)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.unroll_explicit", ann_val=v16)
b17, = sch.get_producers(block=b0)
sch.unannotate(block_or_loop=b0, ann_key="meta_schedule.random_compute_producer")
l18 = sch.sample_compute_location(block=b0, decision=4)
sch.compute_at(block=b0, loop=l18, preserve_unit_loops=True, index=-1)
l19 = sch.sample_compute_location(block=b17, decision=-1)
sch.compute_at(block=b17, loop=l19, preserve_unit_loops=True, index=-1)
2024-04-29 03:21:06 [INFO] [task_scheduler.cc:170] Design space #2:
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(16), T.int64(7), T.int64(7), T.int64(32)), "float32"), adaptive_pool_avg: T.Buffer((T.int64(1), T.int64(16), T.int64(1), T.int64(1), T.int64(32)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        with T.block("root"):
            T.reads()
            T.writes()
            T.block_attr({"meta_schedule.parallel": 768, "meta_schedule.unroll_explicit": 512, "meta_schedule.vectorize": 64})
            adaptive_pool_sum = T.alloc_buffer((T.int64(1), T.int64(16), T.int64(1), T.int64(1), T.int64(32)))
            for ax0, ax1, ax2, ax3, ax4, rv0, rv1 in T.grid(T.int64(1), T.int64(16), T.int64(1), T.int64(1), T.int64(32), T.int64(7), T.int64(7)):
                with T.block("adaptive_pool_sum"):
                    v_ax0, v_ax1, v_ax2, v_ax3, v_ax4, v_rv0, v_rv1 = T.axis.remap("SSSSSRR", [ax0, ax1, ax2, ax3, ax4, rv0, rv1])
                    T.reads(p0[v_ax0, v_ax1, v_ax2 * T.int64(7) + v_rv0, v_ax3 * T.int64(7) + v_rv1, v_ax4])
                    T.writes(adaptive_pool_sum[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                    with T.init():
                        adaptive_pool_sum[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.float32(0)
                    adaptive_pool_sum[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = adaptive_pool_sum[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] + p0[v_ax0, v_ax1, v_ax2 * T.int64(7) + v_rv0, v_ax3 * T.int64(7) + v_rv1, v_ax4]
            for ax0, ax1, ax2, ax3, ax4 in T.grid(T.int64(1), T.int64(16), T.int64(1), T.int64(1), T.int64(32)):
                with T.block("adaptive_pool_avg"):
                    v_ax0, v_ax1, v_ax2, v_ax3, v_ax4 = T.axis.remap("SSSSS", [ax0, ax1, ax2, ax3, ax4])
                    T.reads(adaptive_pool_sum[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                    T.writes(adaptive_pool_avg[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                    adaptive_pool_avg[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = adaptive_pool_sum[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] * T.float32(0.020408163265306121)
b0 = sch.get_block(name="adaptive_pool_sum", func_name="main")
b1 = sch.get_block(name="adaptive_pool_avg", func_name="main")
b2 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b1, ann_key="schedule_rule")
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.vectorize", ann_val=64)
v3 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.unroll_explicit", ann_val=v3)
l4 = sch.sample_compute_location(block=b0, decision=-1)
sch.compute_at(block=b0, loop=l4, preserve_unit_loops=True, index=-1)
2024-04-29 03:52:51 [INFO] [evolutionary_search.cc:713] Generating candidates......
2024-04-29 03:52:51 [INFO] [evolutionary_search.cc:715] Picked top 0 candidate(s) from database
2024-04-29 03:52:52 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x329add8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x5d519e8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x3a6cd58)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x6e34878)]: 0 failure(s)
2024-04-29 03:52:52 [INFO] [evolutionary_search.cc:723] Sampled 512 candidate(s)
2024-04-29 03:52:55 [INFO] [evolutionary_search.cc:621] Evolve iter #0 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x329add8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x5d519e8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x3a6cd58)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x6e34878)]: 0 failure(s)
2024-04-29 03:52:57 [INFO] [evolutionary_search.cc:621] Evolve iter #1 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x329add8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x5d519e8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x3a6cd58)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x6e34878)]: 0 failure(s)
2024-04-29 03:53:00 [INFO] [evolutionary_search.cc:621] Evolve iter #2 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x329add8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x5d519e8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x3a6cd58)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x6e34878)]: 0 failure(s)
2024-04-29 03:53:03 [INFO] [evolutionary_search.cc:621] Evolve iter #3 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x329add8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x5d519e8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x3a6cd58)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x6e34878)]: 0 failure(s)
2024-04-29 03:53:04 [INFO] [evolutionary_search.cc:649] Scores of the best 64 candidates:
[1 : 16]:	0.9998  0.9942  0.9919  0.9901  0.9852  0.9831  0.9747  0.9733  0.9726  0.9705  0.9692  0.9651  0.9644  0.9606  0.9589  0.9522
[17 : 32]:	0.9497  0.9383  0.9323  0.9305  0.9282  0.9261  0.9183  0.9072  0.9072  0.9000  0.8993  0.8852  0.8815  0.8757  0.8743  0.8718
[33 : 48]:	0.8677  0.8672  0.8625  0.8573  0.8541  0.8501  0.8470  0.8470  0.8413  0.8392  0.8295  0.8280  0.8205  0.8189  0.8159  0.8125
[49 : 64]:	0.8096  0.8034  0.8003  0.7983  0.7819  0.7773  0.7755  0.7736  0.7693  0.7646  0.7615  0.7610  0.7594  0.7570  0.7529  0.7484
2024-04-29 03:53:04 [INFO] [evolutionary_search.cc:727] Got 64 candidate(s) with evolutionary search
2024-04-29 03:53:04 [INFO] [evolutionary_search.cc:730] Sending 63 candidates(s) for measurement
2024-04-29 03:57:52 [INFO] [task_scheduler.cc:131] [Task #27: fused_nn_global_avg_pool2d] Trial #1: GFLOPs: 2.6789. Time: 9.5563 us. Best GFLOPs: 2.6789
2024-04-29 03:57:52 [INFO] [task_scheduler.cc:131] [Task #27: fused_nn_global_avg_pool2d] Trial #2: GFLOPs: 2.2589. Time: 11.3331 us. Best GFLOPs: 2.6789
2024-04-29 03:57:52 [INFO] [task_scheduler.cc:131] [Task #27: fused_nn_global_avg_pool2d] Trial #3: GFLOPs: 2.3786. Time: 10.7627 us. Best GFLOPs: 2.6789
2024-04-29 03:57:52 [INFO] [task_scheduler.cc:131] [Task #27: fused_nn_global_avg_pool2d] Trial #4: GFLOPs: 1.9121. Time: 13.3881 us. Best GFLOPs: 2.6789
2024-04-29 03:57:52 [INFO] [task_scheduler.cc:131] [Task #27: fused_nn_global_avg_pool2d] Trial #5: GFLOPs: 1.5561. Time: 16.4509 us. Best GFLOPs: 2.6789
2024-04-29 03:57:52 [INFO] [task_scheduler.cc:131] [Task #27: fused_nn_global_avg_pool2d] Trial #6: GFLOPs: 1.1710. Time: 21.8608 us. Best GFLOPs: 2.6789
2024-04-29 03:57:52 [INFO] [task_scheduler.cc:131] [Task #27: fused_nn_global_avg_pool2d] Trial #7: GFLOPs: 2.5347. Time: 10.0999 us. Best GFLOPs: 2.6789
2024-04-29 03:57:52 [INFO] [task_scheduler.cc:131] [Task #27: fused_nn_global_avg_pool2d] Trial #8: GFLOPs: 1.8938. Time: 13.5181 us. Best GFLOPs: 2.6789
2024-04-29 03:57:52 [INFO] [task_scheduler.cc:131] [Task #27: fused_nn_global_avg_pool2d] Trial #9: GFLOPs: 1.1546. Time: 22.1724 us. Best GFLOPs: 2.6789
2024-04-29 03:57:52 [INFO] [task_scheduler.cc:131] [Task #27: fused_nn_global_avg_pool2d] Trial #10: GFLOPs: 2.4507. Time: 10.4460 us. Best GFLOPs: 2.6789
2024-04-29 03:57:52 [INFO] [task_scheduler.cc:131] [Task #27: fused_nn_global_avg_pool2d] Trial #11: GFLOPs: 1.1940. Time: 21.4414 us. Best GFLOPs: 2.6789
2024-04-29 03:57:52 [INFO] [task_scheduler.cc:131] [Task #27: fused_nn_global_avg_pool2d] Trial #12: GFLOPs: 2.6753. Time: 9.5689 us. Best GFLOPs: 2.6789
2024-04-29 03:57:52 [INFO] [task_scheduler.cc:131] [Task #27: fused_nn_global_avg_pool2d] Trial #13: GFLOPs: 2.6548. Time: 9.6428 us. Best GFLOPs: 2.6789
2024-04-29 03:57:52 [INFO] [task_scheduler.cc:131] [Task #27: fused_nn_global_avg_pool2d] Trial #14: GFLOPs: 0.7656. Time: 33.4371 us. Best GFLOPs: 2.6789
2024-04-29 03:57:52 [INFO] [task_scheduler.cc:131] [Task #27: fused_nn_global_avg_pool2d] Trial #15: GFLOPs: 1.1101. Time: 23.0603 us. Best GFLOPs: 2.6789
2024-04-29 03:57:52 [INFO] [task_scheduler.cc:131] [Task #27: fused_nn_global_avg_pool2d] Trial #16: GFLOPs: 0.5196. Time: 49.2670 us. Best GFLOPs: 2.6789
2024-04-29 03:57:52 [INFO] [task_scheduler.cc:131] [Task #27: fused_nn_global_avg_pool2d] Trial #17: GFLOPs: 0.9182. Time: 27.8804 us. Best GFLOPs: 2.6789
2024-04-29 03:57:52 [INFO] [task_scheduler.cc:131] [Task #27: fused_nn_global_avg_pool2d] Trial #18: GFLOPs: 2.1984. Time: 11.6447 us. Best GFLOPs: 2.6789
2024-04-29 03:57:52 [INFO] [task_scheduler.cc:131] [Task #27: fused_nn_global_avg_pool2d] Trial #19: GFLOPs: 2.0718. Time: 12.3564 us. Best GFLOPs: 2.6789
2024-04-29 03:57:52 [INFO] [task_scheduler.cc:131] [Task #27: fused_nn_global_avg_pool2d] Trial #20: GFLOPs: 0.8203. Time: 31.2074 us. Best GFLOPs: 2.6789
2024-04-29 03:57:52 [INFO] [task_scheduler.cc:131] [Task #27: fused_nn_global_avg_pool2d] Trial #21: GFLOPs: 1.1006. Time: 23.2608 us. Best GFLOPs: 2.6789
2024-04-29 03:57:52 [INFO] [task_scheduler.cc:131] [Task #27: fused_nn_global_avg_pool2d] Trial #22: GFLOPs: 1.2282. Time: 20.8442 us. Best GFLOPs: 2.6789
2024-04-29 03:57:52 [INFO] [task_scheduler.cc:131] [Task #27: fused_nn_global_avg_pool2d] Trial #23: GFLOPs: 0.7842. Time: 32.6468 us. Best GFLOPs: 2.6789
2024-04-29 03:57:52 [INFO] [task_scheduler.cc:131] [Task #27: fused_nn_global_avg_pool2d] Trial #24: GFLOPs: 2.5357. Time: 10.0958 us. Best GFLOPs: 2.6789
2024-04-29 03:57:52 [INFO] [task_scheduler.cc:131] [Task #27: fused_nn_global_avg_pool2d] Trial #25: GFLOPs: 2.4110. Time: 10.6181 us. Best GFLOPs: 2.6789
2024-04-29 03:57:52 [INFO] [task_scheduler.cc:131] [Task #27: fused_nn_global_avg_pool2d] Trial #26: GFLOPs: 0.7432. Time: 34.4478 us. Best GFLOPs: 2.6789
2024-04-29 03:57:52 [INFO] [task_scheduler.cc:131] [Task #27: fused_nn_global_avg_pool2d] Trial #27: GFLOPs: 2.4009. Time: 10.6627 us. Best GFLOPs: 2.6789
2024-04-29 03:57:52 [INFO] [task_scheduler.cc:131] [Task #27: fused_nn_global_avg_pool2d] Trial #28: GFLOPs: 1.1715. Time: 21.8519 us. Best GFLOPs: 2.6789
2024-04-29 03:57:52 [INFO] [task_scheduler.cc:131] [Task #27: fused_nn_global_avg_pool2d] Trial #29: GFLOPs: 1.2080. Time: 21.1922 us. Best GFLOPs: 2.6789
2024-04-29 03:57:52 [INFO] [task_scheduler.cc:131] [Task #27: fused_nn_global_avg_pool2d] Trial #30: GFLOPs: 0.9765. Time: 26.2166 us. Best GFLOPs: 2.6789
2024-04-29 03:57:52 [INFO] [task_scheduler.cc:131] [Task #27: fused_nn_global_avg_pool2d] Trial #31: GFLOPs: 1.0383. Time: 24.6560 us. Best GFLOPs: 2.6789
2024-04-29 03:57:52 [INFO] [task_scheduler.cc:131] [Task #27: fused_nn_global_avg_pool2d] Trial #32: GFLOPs: 2.3108. Time: 11.0782 us. Best GFLOPs: 2.6789
2024-04-29 03:57:52 [INFO] [task_scheduler.cc:131] [Task #27: fused_nn_global_avg_pool2d] Trial #33: GFLOPs: 1.8142. Time: 14.1110 us. Best GFLOPs: 2.6789
2024-04-29 03:57:52 [INFO] [task_scheduler.cc:131] [Task #27: fused_nn_global_avg_pool2d] Trial #34: GFLOPs: 1.0326. Time: 24.7925 us. Best GFLOPs: 2.6789
2024-04-29 03:57:52 [INFO] [task_scheduler.cc:131] [Task #27: fused_nn_global_avg_pool2d] Trial #35: GFLOPs: 2.6620. Time: 9.6169 us. Best GFLOPs: 2.6789
2024-04-29 03:57:52 [INFO] [task_scheduler.cc:131] [Task #27: fused_nn_global_avg_pool2d] Trial #36: GFLOPs: 1.1965. Time: 21.3956 us. Best GFLOPs: 2.6789
2024-04-29 03:57:52 [INFO] [task_scheduler.cc:131] [Task #27: fused_nn_global_avg_pool2d] Trial #37: GFLOPs: 2.2287. Time: 11.4867 us. Best GFLOPs: 2.6789
2024-04-29 03:57:52 [INFO] [task_scheduler.cc:131] [Task #27: fused_nn_global_avg_pool2d] Trial #38: GFLOPs: 1.2057. Time: 21.2319 us. Best GFLOPs: 2.6789
2024-04-29 03:57:52 [INFO] [task_scheduler.cc:131] [Task #27: fused_nn_global_avg_pool2d] Trial #39: GFLOPs: 0.7611. Time: 33.6334 us. Best GFLOPs: 2.6789
2024-04-29 03:57:52 [INFO] [task_scheduler.cc:131] [Task #27: fused_nn_global_avg_pool2d] Trial #40: GFLOPs: 1.7858. Time: 14.3357 us. Best GFLOPs: 2.6789
2024-04-29 03:57:52 [INFO] [task_scheduler.cc:131] [Task #27: fused_nn_global_avg_pool2d] Trial #41: GFLOPs: 1.1898. Time: 21.5154 us. Best GFLOPs: 2.6789
2024-04-29 03:57:52 [INFO] [task_scheduler.cc:131] [Task #27: fused_nn_global_avg_pool2d] Trial #42: GFLOPs: 2.6570. Time: 9.6350 us. Best GFLOPs: 2.6789
2024-04-29 03:57:52 [INFO] [task_scheduler.cc:131] [Task #27: fused_nn_global_avg_pool2d] Trial #43: GFLOPs: 2.6120. Time: 9.8010 us. Best GFLOPs: 2.6789
2024-04-29 03:57:52 [INFO] [task_scheduler.cc:131] [Task #27: fused_nn_global_avg_pool2d] Trial #44: GFLOPs: 1.2114. Time: 21.1332 us. Best GFLOPs: 2.6789
2024-04-29 03:57:52 [INFO] [task_scheduler.cc:131] [Task #27: fused_nn_global_avg_pool2d] Trial #45: GFLOPs: 1.3365. Time: 19.1552 us. Best GFLOPs: 2.6789
2024-04-29 03:57:52 [INFO] [task_scheduler.cc:131] [Task #27: fused_nn_global_avg_pool2d] Trial #46: GFLOPs: 2.3779. Time: 10.7657 us. Best GFLOPs: 2.6789
2024-04-29 03:57:52 [INFO] [task_scheduler.cc:131] [Task #27: fused_nn_global_avg_pool2d] Trial #47: GFLOPs: 1.1257. Time: 22.7411 us. Best GFLOPs: 2.6789
2024-04-29 03:57:52 [INFO] [task_scheduler.cc:131] [Task #27: fused_nn_global_avg_pool2d] Trial #48: GFLOPs: 1.1991. Time: 21.3492 us. Best GFLOPs: 2.6789
2024-04-29 03:57:52 [INFO] [task_scheduler.cc:131] [Task #27: fused_nn_global_avg_pool2d] Trial #49: GFLOPs: 1.2828. Time: 19.9559 us. Best GFLOPs: 2.6789
2024-04-29 03:57:52 [INFO] [task_scheduler.cc:131] [Task #27: fused_nn_global_avg_pool2d] Trial #50: GFLOPs: 2.4053. Time: 10.6433 us. Best GFLOPs: 2.6789
2024-04-29 03:57:52 [INFO] [task_scheduler.cc:131] [Task #27: fused_nn_global_avg_pool2d] Trial #51: GFLOPs: 1.2032. Time: 21.2761 us. Best GFLOPs: 2.6789
2024-04-29 03:57:52 [INFO] [task_scheduler.cc:131] [Task #27: fused_nn_global_avg_pool2d] Trial #52: GFLOPs: 1.7292. Time: 14.8044 us. Best GFLOPs: 2.6789
2024-04-29 03:57:52 [INFO] [task_scheduler.cc:131] [Task #27: fused_nn_global_avg_pool2d] Trial #53: GFLOPs: 0.2701. Time: 94.7720 us. Best GFLOPs: 2.6789
2024-04-29 03:57:52 [INFO] [task_scheduler.cc:131] [Task #27: fused_nn_global_avg_pool2d] Trial #54: GFLOPs: 1.7584. Time: 14.5585 us. Best GFLOPs: 2.6789
2024-04-29 03:57:52 [INFO] [task_scheduler.cc:131] [Task #27: fused_nn_global_avg_pool2d] Trial #55: GFLOPs: 0.4834. Time: 52.9559 us. Best GFLOPs: 2.6789
2024-04-29 03:57:52 [INFO] [task_scheduler.cc:131] [Task #27: fused_nn_global_avg_pool2d] Trial #56: GFLOPs: 2.1361. Time: 11.9847 us. Best GFLOPs: 2.6789
2024-04-29 03:57:52 [INFO] [task_scheduler.cc:131] [Task #27: fused_nn_global_avg_pool2d] Trial #57: GFLOPs: 1.1802. Time: 21.6919 us. Best GFLOPs: 2.6789
2024-04-29 03:57:52 [INFO] [task_scheduler.cc:131] [Task #27: fused_nn_global_avg_pool2d] Trial #58: GFLOPs: 2.0260. Time: 12.6359 us. Best GFLOPs: 2.6789
2024-04-29 03:57:52 [INFO] [task_scheduler.cc:131] [Task #27: fused_nn_global_avg_pool2d] Trial #59: GFLOPs: 1.1528. Time: 22.2061 us. Best GFLOPs: 2.6789
2024-04-29 03:57:52 [INFO] [task_scheduler.cc:131] [Task #27: fused_nn_global_avg_pool2d] Trial #60: GFLOPs: 1.1773. Time: 21.7439 us. Best GFLOPs: 2.6789
2024-04-29 03:57:52 [INFO] [task_scheduler.cc:131] [Task #27: fused_nn_global_avg_pool2d] Trial #61: GFLOPs: 1.0006. Time: 25.5843 us. Best GFLOPs: 2.6789
2024-04-29 03:57:52 [INFO] [task_scheduler.cc:131] [Task #27: fused_nn_global_avg_pool2d] Trial #62: GFLOPs: 2.2714. Time: 11.2704 us. Best GFLOPs: 2.6789
2024-04-29 03:57:52 [INFO] [task_scheduler.cc:131] [Task #27: fused_nn_global_avg_pool2d] Trial #63: GFLOPs: 2.5378. Time: 10.0874 us. Best GFLOPs: 2.6789
