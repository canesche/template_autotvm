2024-04-29 03:21:00 [INFO] [task_scheduler.cc:160] Initializing Task #26: "fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_3"
2024-04-29 03:21:00 [INFO] [task_scheduler.cc:35] 
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(1), T.int64(7), T.int64(7), T.int64(512)), "float32"), p1: T.Buffer((T.int64(16), T.int64(1), T.int64(3), T.int64(3), T.int64(512), T.int64(32)), "float32"), p2: T.Buffer((T.int64(1), T.int64(16), T.int64(1), T.int64(1), T.int64(32)), "float32"), p3: T.Buffer((T.int64(1), T.int64(16), T.int64(7), T.int64(7), T.int64(32)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(16), T.int64(7), T.int64(7), T.int64(32)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        data_pad = T.alloc_buffer((T.int64(1), T.int64(1), T.int64(9), T.int64(9), T.int64(512)))
        conv2d_NCHWc = T.alloc_buffer((T.int64(1), T.int64(16), T.int64(7), T.int64(7), T.int64(32)))
        T_add = T.alloc_buffer((T.int64(1), T.int64(16), T.int64(7), T.int64(7), T.int64(32)))
        T_add_1 = T.alloc_buffer((T.int64(1), T.int64(16), T.int64(7), T.int64(7), T.int64(32)))
        for i0, i1, i2, i3, i4 in T.grid(T.int64(1), T.int64(1), T.int64(9), T.int64(9), T.int64(512)):
            with T.block("data_pad"):
                v_i0, v_i1, v_i2, v_i3, v_i4 = T.axis.remap("SSSSS", [i0, i1, i2, i3, i4])
                T.reads(p0[v_i0, v_i1, v_i2 - T.int64(1), v_i3 - T.int64(1), v_i4])
                T.writes(data_pad[v_i0, v_i1, v_i2, v_i3, v_i4])
                data_pad[v_i0, v_i1, v_i2, v_i3, v_i4] = T.if_then_else(T.int64(1) <= v_i2 and v_i2 < T.int64(8) and T.int64(1) <= v_i3 and v_i3 < T.int64(8), p0[v_i0, v_i1, v_i2 - T.int64(1), v_i3 - T.int64(1), v_i4], T.float32(0))
        for n, oc_chunk, oh, ow, oc_block, ic, kh, kw in T.grid(T.int64(1), T.int64(16), T.int64(7), T.int64(7), T.int64(32), T.int64(512), T.int64(3), T.int64(3)):
            with T.block("conv2d_NCHWc"):
                v_n, v_oc_chunk, v_oh, v_ow, v_oc_block, v_ic, v_kh, v_kw = T.axis.remap("SSSSSRRR", [n, oc_chunk, oh, ow, oc_block, ic, kh, kw])
                T.reads(data_pad[v_n, v_ic // T.int64(512), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(512)], p1[v_oc_chunk, v_ic // T.int64(512), v_kh, v_kw, v_ic % T.int64(512), v_oc_block])
                T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                with T.init():
                    conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = T.float32(0)
                conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] + data_pad[v_n, v_ic // T.int64(512), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(512)] * p1[v_oc_chunk, v_ic // T.int64(512), v_kh, v_kw, v_ic % T.int64(512), v_oc_block]
        for ax0, ax1, ax2, ax3, ax4 in T.grid(T.int64(1), T.int64(16), T.int64(7), T.int64(7), T.int64(32)):
            with T.block("T_add"):
                v_ax0, v_ax1, v_ax2, v_ax3, v_ax4 = T.axis.remap("SSSSS", [ax0, ax1, ax2, ax3, ax4])
                T.reads(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4])
                T.writes(T_add[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                T_add[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] + p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4]
        for ax0, ax1, ax2, ax3, ax4 in T.grid(T.int64(1), T.int64(16), T.int64(7), T.int64(7), T.int64(32)):
            with T.block("T_add_1"):
                v_ax0, v_ax1, v_ax2, v_ax3, v_ax4 = T.axis.remap("SSSSS", [ax0, ax1, ax2, ax3, ax4])
                T.reads(T_add[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], p3[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                T.writes(T_add_1[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                T_add_1[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T_add[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] + p3[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4]
        for ax0, ax1, ax2, ax3, ax4 in T.grid(T.int64(1), T.int64(16), T.int64(7), T.int64(7), T.int64(32)):
            with T.block("T_relu"):
                v_ax0, v_ax1, v_ax2, v_ax3, v_ax4 = T.axis.remap("SSSSS", [ax0, ax1, ax2, ax3, ax4])
                T.reads(T_add_1[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                T.writes(T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.max(T_add_1[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], T.float32(0))
2024-04-29 03:21:00 [INFO] [task_scheduler.cc:164] Total 3 design space(s) generated
2024-04-29 03:21:00 [INFO] [task_scheduler.cc:170] Design space #0:
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(1), T.int64(7), T.int64(7), T.int64(512)), "float32"), p1: T.Buffer((T.int64(16), T.int64(1), T.int64(3), T.int64(3), T.int64(512), T.int64(32)), "float32"), p2: T.Buffer((T.int64(1), T.int64(16), T.int64(1), T.int64(1), T.int64(32)), "float32"), p3: T.Buffer((T.int64(1), T.int64(16), T.int64(7), T.int64(7), T.int64(32)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(16), T.int64(7), T.int64(7), T.int64(32)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        with T.block("root"):
            T.reads()
            T.writes()
            T.block_attr({"meta_schedule.parallel": 768, "meta_schedule.unroll_explicit": 512, "meta_schedule.vectorize": 64})
            data_pad = T.alloc_buffer((T.int64(1), T.int64(1), T.int64(9), T.int64(9), T.int64(512)))
            conv2d_NCHWc = T.alloc_buffer((T.int64(1), T.int64(16), T.int64(7), T.int64(7), T.int64(32)))
            for n_0, oc_chunk_0, oh_0, ow_0, oc_block_0 in T.grid(T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(2)):
                for ax0, ax1, ax2, ax3, ax4 in T.grid(T.int64(1), T.int64(1), T.int64(9), T.int64(9), T.int64(512)):
                    with T.block("data_pad"):
                        v_i0, v_i1, v_i2, v_i3, v_i4 = T.axis.remap("SSSSS", [ax0, ax1, ax2, ax3, ax4])
                        T.reads(p0[v_i0, v_i1, v_i2 - T.int64(1), v_i3 - T.int64(1), v_i4])
                        T.writes(data_pad[v_i0, v_i1, v_i2, v_i3, v_i4])
                        data_pad[v_i0, v_i1, v_i2, v_i3, v_i4] = T.if_then_else(T.int64(1) <= v_i2 and v_i2 < T.int64(8) and T.int64(1) <= v_i3 and v_i3 < T.int64(8), p0[v_i0, v_i1, v_i2 - T.int64(1), v_i3 - T.int64(1), v_i4], T.float32(0))
                for n_1, oc_chunk_1, oh_1, ow_1, oc_block_1, ic_0, kh_0, kw_0, n_2, oc_chunk_2, oh_2, ow_2, oc_block_2, ic_1, kh_1, kw_1, n_3, oc_chunk_3, oh_3, ow_3, oc_block_3 in T.grid(T.int64(1), T.int64(2), T.int64(1), T.int64(1), T.int64(2), T.int64(8), T.int64(1), T.int64(3), T.int64(1), T.int64(1), T.int64(7), T.int64(1), T.int64(4), T.int64(64), T.int64(3), T.int64(1), T.int64(1), T.int64(8), T.int64(1), T.int64(7), T.int64(2)):
                    with T.block("conv2d_NCHWc"):
                        v_n = T.axis.spatial(T.int64(1), n_0 + n_1 + n_2 + n_3)
                        v_oc_chunk = T.axis.spatial(T.int64(16), oc_chunk_0 * T.int64(16) + oc_chunk_1 * T.int64(8) + oc_chunk_2 * T.int64(8) + oc_chunk_3)
                        v_oh = T.axis.spatial(T.int64(7), oh_0 * T.int64(7) + oh_1 * T.int64(7) + oh_2 + oh_3)
                        v_ow = T.axis.spatial(T.int64(7), ow_0 * T.int64(7) + ow_1 * T.int64(7) + ow_2 * T.int64(7) + ow_3)
                        v_oc_block = T.axis.spatial(T.int64(32), oc_block_0 * T.int64(16) + oc_block_1 * T.int64(8) + oc_block_2 * T.int64(2) + oc_block_3)
                        v_ic = T.axis.reduce(T.int64(512), ic_0 * T.int64(64) + ic_1)
                        v_kh = T.axis.reduce(T.int64(3), kh_0 * T.int64(3) + kh_1)
                        v_kw = T.axis.reduce(T.int64(3), kw_0 + kw_1)
                        T.reads(data_pad[v_n, v_ic // T.int64(512), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(512)], p1[v_oc_chunk, v_ic // T.int64(512), v_kh, v_kw, v_ic % T.int64(512), v_oc_block])
                        T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                        T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                        with T.init():
                            conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = T.float32(0)
                        conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] + data_pad[v_n, v_ic // T.int64(512), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(512)] * p1[v_oc_chunk, v_ic // T.int64(512), v_kh, v_kw, v_ic % T.int64(512), v_oc_block]
            for ax0, ax1, ax2, ax3, ax4 in T.grid(T.int64(1), T.int64(16), T.int64(7), T.int64(7), T.int64(32)):
                with T.block("T_relu"):
                    v_ax0, v_ax1, v_ax2, v_ax3, v_ax4 = T.axis.remap("SSSSS", [ax0, ax1, ax2, ax3, ax4])
                    T.reads(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4], p3[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                    T.writes(T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                    T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.max(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] + p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4] + p3[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], T.float32(0))
b0 = sch.get_block(name="data_pad", func_name="main")
b1 = sch.get_block(name="conv2d_NCHWc", func_name="main")
b2 = sch.get_block(name="T_add", func_name="main")
b3 = sch.get_block(name="T_add_1", func_name="main")
b4 = sch.get_block(name="root", func_name="main")
sch.compute_inline(block=b3)
sch.compute_inline(block=b2)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSRSRS")
l5, l6, l7, l8, l9, l10, l11, l12 = sch.get_loops(block=b1)
v13, v14, v15, v16 = sch.sample_perfect_tile(loop=l5, n=4, max_innermost_factor=64, decision=[1, 1, 1, 1])
l17, l18, l19, l20 = sch.split(loop=l5, factors=[v13, v14, v15, v16], preserve_unit_iters=True)
v21, v22, v23, v24 = sch.sample_perfect_tile(loop=l6, n=4, max_innermost_factor=64, decision=[1, 2, 1, 8])
l25, l26, l27, l28 = sch.split(loop=l6, factors=[v21, v22, v23, v24], preserve_unit_iters=True)
v29, v30, v31, v32 = sch.sample_perfect_tile(loop=l7, n=4, max_innermost_factor=64, decision=[1, 1, 7, 1])
l33, l34, l35, l36 = sch.split(loop=l7, factors=[v29, v30, v31, v32], preserve_unit_iters=True)
v37, v38, v39, v40 = sch.sample_perfect_tile(loop=l8, n=4, max_innermost_factor=64, decision=[1, 1, 1, 7])
l41, l42, l43, l44 = sch.split(loop=l8, factors=[v37, v38, v39, v40], preserve_unit_iters=True)
v45, v46, v47, v48 = sch.sample_perfect_tile(loop=l9, n=4, max_innermost_factor=64, decision=[2, 2, 4, 2])
l49, l50, l51, l52 = sch.split(loop=l9, factors=[v45, v46, v47, v48], preserve_unit_iters=True)
v53, v54 = sch.sample_perfect_tile(loop=l10, n=2, max_innermost_factor=64, decision=[8, 64])
l55, l56 = sch.split(loop=l10, factors=[v53, v54], preserve_unit_iters=True)
v57, v58 = sch.sample_perfect_tile(loop=l11, n=2, max_innermost_factor=64, decision=[1, 3])
l59, l60 = sch.split(loop=l11, factors=[v57, v58], preserve_unit_iters=True)
v61, v62 = sch.sample_perfect_tile(loop=l12, n=2, max_innermost_factor=64, decision=[3, 1])
l63, l64 = sch.split(loop=l12, factors=[v61, v62], preserve_unit_iters=True)
sch.reorder(l17, l25, l33, l41, l49, l18, l26, l34, l42, l50, l55, l59, l63, l19, l27, l35, l43, l51, l56, l60, l64, l20, l28, l36, l44, l52)
sch.annotate(block_or_loop=b4, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b4, ann_key="meta_schedule.vectorize", ann_val=64)
v65 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b4, ann_key="meta_schedule.unroll_explicit", ann_val=v65)
l66 = sch.sample_compute_location(block=b0, decision=4)
sch.compute_at(block=b0, loop=l66, preserve_unit_loops=True, index=-1)
2024-04-29 03:21:00 [INFO] [task_scheduler.cc:170] Design space #1:
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(1), T.int64(7), T.int64(7), T.int64(512)), "float32"), p1: T.Buffer((T.int64(16), T.int64(1), T.int64(3), T.int64(3), T.int64(512), T.int64(32)), "float32"), p2: T.Buffer((T.int64(1), T.int64(16), T.int64(1), T.int64(1), T.int64(32)), "float32"), p3: T.Buffer((T.int64(1), T.int64(16), T.int64(7), T.int64(7), T.int64(32)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(16), T.int64(7), T.int64(7), T.int64(32)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        with T.block("root"):
            T.reads()
            T.writes()
            T.block_attr({"meta_schedule.parallel": 768, "meta_schedule.unroll_explicit": 64, "meta_schedule.vectorize": 64})
            data_pad = T.alloc_buffer((T.int64(1), T.int64(1), T.int64(9), T.int64(9), T.int64(512)))
            conv2d_NCHWc = T.alloc_buffer((T.int64(1), T.int64(16), T.int64(7), T.int64(7), T.int64(32)))
            for n_0, oc_chunk_0, oh_0, ow_0, oc_block_0, n_1, oc_chunk_1, oh_1, ow_1, oc_block_1 in T.grid(T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(1), T.int64(2), T.int64(1), T.int64(1), T.int64(2)):
                for ax0, ax1, ax2, ax3, ax4 in T.grid(T.int64(1), T.int64(1), T.int64(9), T.int64(9), T.int64(512)):
                    with T.block("data_pad"):
                        v_i0, v_i1, v_i2, v_i3, v_i4 = T.axis.remap("SSSSS", [ax0, ax1, ax2, ax3, ax4])
                        T.reads(p0[v_i0, v_i1, v_i2 - T.int64(1), v_i3 - T.int64(1), v_i4])
                        T.writes(data_pad[v_i0, v_i1, v_i2, v_i3, v_i4])
                        data_pad[v_i0, v_i1, v_i2, v_i3, v_i4] = T.if_then_else(T.int64(1) <= v_i2 and v_i2 < T.int64(8) and T.int64(1) <= v_i3 and v_i3 < T.int64(8), p0[v_i0, v_i1, v_i2 - T.int64(1), v_i3 - T.int64(1), v_i4], T.float32(0))
                for ic_0, kh_0, kw_0, n_2, oc_chunk_2, oh_2, ow_2, oc_block_2, ic_1, kh_1, kw_1, n_3, oc_chunk_3, oh_3, ow_3, oc_block_3 in T.grid(T.int64(8), T.int64(1), T.int64(3), T.int64(1), T.int64(1), T.int64(7), T.int64(1), T.int64(4), T.int64(64), T.int64(3), T.int64(1), T.int64(1), T.int64(8), T.int64(1), T.int64(7), T.int64(2)):
                    with T.block("conv2d_NCHWc"):
                        v_n = T.axis.spatial(T.int64(1), n_0 + n_1 + n_2 + n_3)
                        v_oc_chunk = T.axis.spatial(T.int64(16), oc_chunk_0 * T.int64(16) + oc_chunk_1 * T.int64(8) + oc_chunk_2 * T.int64(8) + oc_chunk_3)
                        v_oh = T.axis.spatial(T.int64(7), oh_0 * T.int64(7) + oh_1 * T.int64(7) + oh_2 + oh_3)
                        v_ow = T.axis.spatial(T.int64(7), ow_0 * T.int64(7) + ow_1 * T.int64(7) + ow_2 * T.int64(7) + ow_3)
                        v_oc_block = T.axis.spatial(T.int64(32), oc_block_0 * T.int64(16) + oc_block_1 * T.int64(8) + oc_block_2 * T.int64(2) + oc_block_3)
                        v_ic = T.axis.reduce(T.int64(512), ic_0 * T.int64(64) + ic_1)
                        v_kh = T.axis.reduce(T.int64(3), kh_0 * T.int64(3) + kh_1)
                        v_kw = T.axis.reduce(T.int64(3), kw_0 + kw_1)
                        T.reads(data_pad[v_n, v_ic // T.int64(512), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(512)], p1[v_oc_chunk, v_ic // T.int64(512), v_kh, v_kw, v_ic % T.int64(512), v_oc_block])
                        T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                        T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                        with T.init():
                            conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = T.float32(0)
                        conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] + data_pad[v_n, v_ic // T.int64(512), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(512)] * p1[v_oc_chunk, v_ic // T.int64(512), v_kh, v_kw, v_ic % T.int64(512), v_oc_block]
                for ax0, ax1, ax2, ax3, ax4 in T.grid(T.int64(1), T.int64(8), T.int64(7), T.int64(7), T.int64(8)):
                    with T.block("T_relu"):
                        v_ax0 = T.axis.spatial(T.int64(1), ax0)
                        v_ax1 = T.axis.spatial(T.int64(16), oc_chunk_1 * T.int64(8) + ax1)
                        v_ax2, v_ax3 = T.axis.remap("SS", [ax2, ax3])
                        v_ax4 = T.axis.spatial(T.int64(32), oc_block_0 * T.int64(16) + oc_block_1 * T.int64(8) + ax4)
                        T.reads(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4], p3[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                        T.writes(T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                        T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.max(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] + p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4] + p3[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], T.float32(0))
b0 = sch.get_block(name="data_pad", func_name="main")
b1 = sch.get_block(name="conv2d_NCHWc", func_name="main")
b2 = sch.get_block(name="T_add", func_name="main")
b3 = sch.get_block(name="T_add_1", func_name="main")
b4 = sch.get_block(name="root", func_name="main")
sch.compute_inline(block=b3)
sch.compute_inline(block=b2)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSRSRS")
l5, l6, l7, l8, l9, l10, l11, l12 = sch.get_loops(block=b1)
v13, v14, v15, v16 = sch.sample_perfect_tile(loop=l5, n=4, max_innermost_factor=64, decision=[1, 1, 1, 1])
l17, l18, l19, l20 = sch.split(loop=l5, factors=[v13, v14, v15, v16], preserve_unit_iters=True)
v21, v22, v23, v24 = sch.sample_perfect_tile(loop=l6, n=4, max_innermost_factor=64, decision=[1, 2, 1, 8])
l25, l26, l27, l28 = sch.split(loop=l6, factors=[v21, v22, v23, v24], preserve_unit_iters=True)
v29, v30, v31, v32 = sch.sample_perfect_tile(loop=l7, n=4, max_innermost_factor=64, decision=[1, 1, 7, 1])
l33, l34, l35, l36 = sch.split(loop=l7, factors=[v29, v30, v31, v32], preserve_unit_iters=True)
v37, v38, v39, v40 = sch.sample_perfect_tile(loop=l8, n=4, max_innermost_factor=64, decision=[1, 1, 1, 7])
l41, l42, l43, l44 = sch.split(loop=l8, factors=[v37, v38, v39, v40], preserve_unit_iters=True)
v45, v46, v47, v48 = sch.sample_perfect_tile(loop=l9, n=4, max_innermost_factor=64, decision=[2, 2, 4, 2])
l49, l50, l51, l52 = sch.split(loop=l9, factors=[v45, v46, v47, v48], preserve_unit_iters=True)
v53, v54 = sch.sample_perfect_tile(loop=l10, n=2, max_innermost_factor=64, decision=[8, 64])
l55, l56 = sch.split(loop=l10, factors=[v53, v54], preserve_unit_iters=True)
v57, v58 = sch.sample_perfect_tile(loop=l11, n=2, max_innermost_factor=64, decision=[1, 3])
l59, l60 = sch.split(loop=l11, factors=[v57, v58], preserve_unit_iters=True)
v61, v62 = sch.sample_perfect_tile(loop=l12, n=2, max_innermost_factor=64, decision=[3, 1])
l63, l64 = sch.split(loop=l12, factors=[v61, v62], preserve_unit_iters=True)
sch.reorder(l17, l25, l33, l41, l49, l18, l26, l34, l42, l50, l55, l59, l63, l19, l27, l35, l43, l51, l56, l60, l64, l20, l28, l36, l44, l52)
b65, = sch.get_consumers(block=b1)
sch.reverse_compute_at(block=b65, loop=l50, preserve_unit_loops=True, index=-1)
sch.annotate(block_or_loop=b4, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b4, ann_key="meta_schedule.vectorize", ann_val=64)
v66 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=2)
sch.annotate(block_or_loop=b4, ann_key="meta_schedule.unroll_explicit", ann_val=v66)
l67 = sch.sample_compute_location(block=b0, decision=9)
sch.compute_at(block=b0, loop=l67, preserve_unit_loops=True, index=-1)
2024-04-29 03:21:00 [INFO] [task_scheduler.cc:170] Design space #2:
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(1), T.int64(7), T.int64(7), T.int64(512)), "float32"), p1: T.Buffer((T.int64(16), T.int64(1), T.int64(3), T.int64(3), T.int64(512), T.int64(32)), "float32"), p2: T.Buffer((T.int64(1), T.int64(16), T.int64(1), T.int64(1), T.int64(32)), "float32"), p3: T.Buffer((T.int64(1), T.int64(16), T.int64(7), T.int64(7), T.int64(32)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(16), T.int64(7), T.int64(7), T.int64(32)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        with T.block("root"):
            T.reads()
            T.writes()
            T.block_attr({"meta_schedule.parallel": 768, "meta_schedule.unroll_explicit": 16, "meta_schedule.vectorize": 64})
            data_pad = T.alloc_buffer((T.int64(1), T.int64(1), T.int64(9), T.int64(9), T.int64(512)))
            conv2d_NCHWc = T.alloc_buffer((T.int64(1), T.int64(16), T.int64(7), T.int64(7), T.int64(32)))
            for n_0, oc_chunk_0, oh_0, ow_0, oc_block_0 in T.grid(T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(2)):
                for n_1, oc_chunk_1, oh_1, ow_1, oc_block_1, ic_0, kh_0, kw_0 in T.grid(T.int64(1), T.int64(2), T.int64(1), T.int64(1), T.int64(2), T.int64(8), T.int64(1), T.int64(3)):
                    for ax0, ax1, ax2, ax3, ax4 in T.grid(T.int64(1), T.int64(1), T.int64(9), T.int64(7), T.int64(64)):
                        with T.block("data_pad"):
                            v_i0, v_i1, v_i2 = T.axis.remap("SSS", [ax0, ax1, ax2])
                            v_i3 = T.axis.spatial(T.int64(9), kw_0 + ax3)
                            v_i4 = T.axis.spatial(T.int64(512), ic_0 * T.int64(64) + ax4)
                            T.reads(p0[v_i0, v_i1, v_i2 - T.int64(1), v_i3 - T.int64(1), v_i4])
                            T.writes(data_pad[v_i0, v_i1, v_i2, v_i3, v_i4])
                            data_pad[v_i0, v_i1, v_i2, v_i3, v_i4] = T.if_then_else(T.int64(1) <= v_i2 and v_i2 < T.int64(8) and T.int64(1) <= v_i3 and v_i3 < T.int64(8), p0[v_i0, v_i1, v_i2 - T.int64(1), v_i3 - T.int64(1), v_i4], T.float32(0))
                    for n_2, oc_chunk_2, oh_2, ow_2, oc_block_2, ic_1, kh_1, kw_1, n_3, oc_chunk_3, oh_3, ow_3, oc_block_3 in T.grid(T.int64(1), T.int64(1), T.int64(7), T.int64(1), T.int64(4), T.int64(64), T.int64(3), T.int64(1), T.int64(1), T.int64(8), T.int64(1), T.int64(7), T.int64(2)):
                        with T.block("conv2d_NCHWc"):
                            v_n = T.axis.spatial(T.int64(1), n_0 + n_1 + n_2 + n_3)
                            v_oc_chunk = T.axis.spatial(T.int64(16), oc_chunk_0 * T.int64(16) + oc_chunk_1 * T.int64(8) + oc_chunk_2 * T.int64(8) + oc_chunk_3)
                            v_oh = T.axis.spatial(T.int64(7), oh_0 * T.int64(7) + oh_1 * T.int64(7) + oh_2 + oh_3)
                            v_ow = T.axis.spatial(T.int64(7), ow_0 * T.int64(7) + ow_1 * T.int64(7) + ow_2 * T.int64(7) + ow_3)
                            v_oc_block = T.axis.spatial(T.int64(32), oc_block_0 * T.int64(16) + oc_block_1 * T.int64(8) + oc_block_2 * T.int64(2) + oc_block_3)
                            v_ic = T.axis.reduce(T.int64(512), ic_0 * T.int64(64) + ic_1)
                            v_kh = T.axis.reduce(T.int64(3), kh_0 * T.int64(3) + kh_1)
                            v_kw = T.axis.reduce(T.int64(3), kw_0 + kw_1)
                            T.reads(data_pad[v_n, v_ic // T.int64(512), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(512)], p1[v_oc_chunk, v_ic // T.int64(512), v_kh, v_kw, v_ic % T.int64(512), v_oc_block])
                            T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                            T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                            with T.init():
                                conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = T.float32(0)
                            conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] + data_pad[v_n, v_ic // T.int64(512), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(512)] * p1[v_oc_chunk, v_ic // T.int64(512), v_kh, v_kw, v_ic % T.int64(512), v_oc_block]
                for ax0, ax1, ax2, ax3, ax4 in T.grid(T.int64(1), T.int64(16), T.int64(7), T.int64(7), T.int64(16)):
                    with T.block("T_relu"):
                        v_ax0, v_ax1, v_ax2, v_ax3 = T.axis.remap("SSSS", [ax0, ax1, ax2, ax3])
                        v_ax4 = T.axis.spatial(T.int64(32), oc_block_0 * T.int64(16) + ax4)
                        T.reads(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4], p3[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                        T.writes(T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                        T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.max(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] + p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4] + p3[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], T.float32(0))
b0 = sch.get_block(name="data_pad", func_name="main")
b1 = sch.get_block(name="conv2d_NCHWc", func_name="main")
b2 = sch.get_block(name="T_add", func_name="main")
b3 = sch.get_block(name="T_add_1", func_name="main")
b4 = sch.get_block(name="root", func_name="main")
sch.compute_inline(block=b3)
sch.compute_inline(block=b2)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSRSRS")
l5, l6, l7, l8, l9, l10, l11, l12 = sch.get_loops(block=b1)
v13, v14, v15, v16 = sch.sample_perfect_tile(loop=l5, n=4, max_innermost_factor=64, decision=[1, 1, 1, 1])
l17, l18, l19, l20 = sch.split(loop=l5, factors=[v13, v14, v15, v16], preserve_unit_iters=True)
v21, v22, v23, v24 = sch.sample_perfect_tile(loop=l6, n=4, max_innermost_factor=64, decision=[1, 2, 1, 8])
l25, l26, l27, l28 = sch.split(loop=l6, factors=[v21, v22, v23, v24], preserve_unit_iters=True)
v29, v30, v31, v32 = sch.sample_perfect_tile(loop=l7, n=4, max_innermost_factor=64, decision=[1, 1, 7, 1])
l33, l34, l35, l36 = sch.split(loop=l7, factors=[v29, v30, v31, v32], preserve_unit_iters=True)
v37, v38, v39, v40 = sch.sample_perfect_tile(loop=l8, n=4, max_innermost_factor=64, decision=[1, 1, 1, 7])
l41, l42, l43, l44 = sch.split(loop=l8, factors=[v37, v38, v39, v40], preserve_unit_iters=True)
v45, v46, v47, v48 = sch.sample_perfect_tile(loop=l9, n=4, max_innermost_factor=64, decision=[2, 2, 4, 2])
l49, l50, l51, l52 = sch.split(loop=l9, factors=[v45, v46, v47, v48], preserve_unit_iters=True)
v53, v54 = sch.sample_perfect_tile(loop=l10, n=2, max_innermost_factor=64, decision=[8, 64])
l55, l56 = sch.split(loop=l10, factors=[v53, v54], preserve_unit_iters=True)
v57, v58 = sch.sample_perfect_tile(loop=l11, n=2, max_innermost_factor=64, decision=[1, 3])
l59, l60 = sch.split(loop=l11, factors=[v57, v58], preserve_unit_iters=True)
v61, v62 = sch.sample_perfect_tile(loop=l12, n=2, max_innermost_factor=64, decision=[3, 1])
l63, l64 = sch.split(loop=l12, factors=[v61, v62], preserve_unit_iters=True)
sch.reorder(l17, l25, l33, l41, l49, l18, l26, l34, l42, l50, l55, l59, l63, l19, l27, l35, l43, l51, l56, l60, l64, l20, l28, l36, l44, l52)
b65, = sch.get_consumers(block=b1)
sch.reverse_compute_at(block=b65, loop=l49, preserve_unit_loops=True, index=-1)
sch.annotate(block_or_loop=b4, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b4, ann_key="meta_schedule.vectorize", ann_val=64)
v66 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=1)
sch.annotate(block_or_loop=b4, ann_key="meta_schedule.unroll_explicit", ann_val=v66)
l67 = sch.sample_compute_location(block=b0, decision=12)
sch.compute_at(block=b0, loop=l67, preserve_unit_loops=True, index=-1)
2024-04-29 03:50:38 [INFO] [evolutionary_search.cc:713] Generating candidates......
2024-04-29 03:50:38 [INFO] [evolutionary_search.cc:715] Picked top 0 candidate(s) from database
2024-04-29 03:50:44 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x36363d8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x4388aa8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x3310908)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x3246458)]: 0 failure(s)
2024-04-29 03:50:44 [INFO] [evolutionary_search.cc:723] Sampled 512 candidate(s)
2024-04-29 03:50:49 [INFO] [evolutionary_search.cc:621] Evolve iter #0 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x36363d8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x4388aa8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x3310908)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x3246458)]: 0 failure(s)
2024-04-29 03:50:55 [INFO] [evolutionary_search.cc:621] Evolve iter #1 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x36363d8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x4388aa8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x3310908)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x3246458)]: 0 failure(s)
2024-04-29 03:51:00 [INFO] [evolutionary_search.cc:621] Evolve iter #2 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x36363d8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x4388aa8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x3310908)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x3246458)]: 0 failure(s)
2024-04-29 03:51:06 [INFO] [evolutionary_search.cc:621] Evolve iter #3 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x36363d8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x4388aa8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x3310908)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x3246458)]: 0 failure(s)
2024-04-29 03:51:07 [INFO] [evolutionary_search.cc:649] Scores of the best 64 candidates:
[1 : 16]:	0.9996  0.9988  0.9976  0.9973  0.9968  0.9959  0.9955  0.9954  0.9945  0.9944  0.9944  0.9941  0.9941  0.9939  0.9938  0.9938
[17 : 32]:	0.9937  0.9931  0.9926  0.9923  0.9922  0.9922  0.9920  0.9919  0.9916  0.9915  0.9908  0.9899  0.9894  0.9893  0.9884  0.9880
[33 : 48]:	0.9875  0.9874  0.9873  0.9868  0.9858  0.9854  0.9851  0.9841  0.9835  0.9829  0.9815  0.9812  0.9806  0.9789  0.9778  0.9771
[49 : 64]:	0.9770  0.9767  0.9764  0.9763  0.9762  0.9756  0.9755  0.9751  0.9742  0.9734  0.9734  0.9727  0.9727  0.9727  0.9713  0.9712
2024-04-29 03:51:08 [INFO] [evolutionary_search.cc:727] Got 64 candidate(s) with evolutionary search
2024-04-29 03:51:08 [INFO] [evolutionary_search.cc:730] Sending 64 candidates(s) for measurement
2024-04-29 03:57:49 [INFO] [task_scheduler.cc:131] [Task #26: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_3] Trial #1: GFLOPs: 73.7923. Time: 3134.2862 us. Best GFLOPs: 73.7923
2024-04-29 03:57:49 [INFO] [task_scheduler.cc:121] [Task #26: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_3] Trial #2: Error in building:
LocalBuilder: Timeout, killed after 30.0 seconds
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(1), T.int64(7), T.int64(7), T.int64(512)), "float32"), p1: T.Buffer((T.int64(16), T.int64(1), T.int64(3), T.int64(3), T.int64(512), T.int64(32)), "float32"), p2: T.Buffer((T.int64(1), T.int64(16), T.int64(1), T.int64(1), T.int64(32)), "float32"), p3: T.Buffer((T.int64(1), T.int64(16), T.int64(7), T.int64(7), T.int64(32)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(16), T.int64(7), T.int64(7), T.int64(32)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        data_pad = T.alloc_buffer((T.int64(1), T.int64(1), T.int64(9), T.int64(9), T.int64(512)))
        conv2d_NCHWc = T.alloc_buffer((T.int64(1), T.int64(16), T.int64(7), T.int64(7), T.int64(32)))
        for n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_fused_fused in T.parallel(T.int64(112), annotations={"pragma_auto_unroll_max_step": 512, "pragma_unroll_explicit": 1}):
            for ax0, ax1, ax2, ax3, ax4 in T.grid(T.int64(1), T.int64(1), T.int64(9), T.int64(3), T.int64(512)):
                with T.block("data_pad"):
                    v_i0, v_i1, v_i2 = T.axis.remap("SSS", [ax0, ax1, ax2])
                    v_i3 = T.axis.spatial(T.int64(9), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_fused_fused % T.int64(56) // T.int64(8) + ax3)
                    v_i4 = T.axis.spatial(T.int64(512), ax4)
                    T.reads(p0[v_i0, v_i1, v_i2 - T.int64(1), v_i3 - T.int64(1), v_i4])
                    T.writes(data_pad[v_i0, v_i1, v_i2, v_i3, v_i4])
                    data_pad[v_i0, v_i1, v_i2, v_i3, v_i4] = T.if_then_else(T.int64(1) <= v_i2 and v_i2 < T.int64(8) and T.int64(1) <= v_i3 and v_i3 < T.int64(8), p0[v_i0, v_i1, v_i2 - T.int64(1), v_i3 - T.int64(1), v_i4], T.float32(0))
            for n_1, oc_chunk_1, oh_1, ow_1, oc_block_1 in T.grid(T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1)):
                for n_2_init, oc_chunk_2_init, oh_2_init, ow_2_init, oc_block_2_init, n_3_init, oc_chunk_3_init, oh_3_init, ow_3_init, oc_block_3_init in T.grid(T.int64(1), T.int64(1), T.int64(7), T.int64(1), T.int64(4), T.int64(1), T.int64(8), T.int64(1), T.int64(1), T.int64(1)):
                    with T.block("conv2d_NCHWc_init"):
                        v_n = T.axis.spatial(T.int64(1), n_1 + n_2_init + n_3_init)
                        v_oc_chunk = T.axis.spatial(T.int64(16), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_fused_fused // T.int64(56) * T.int64(8) + oc_chunk_1 * T.int64(8) + oc_chunk_2_init * T.int64(8) + oc_chunk_3_init)
                        v_oh = T.axis.spatial(T.int64(7), oh_1 * T.int64(7) + oh_2_init + oh_3_init)
                        v_ow = T.axis.spatial(T.int64(7), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_fused_fused % T.int64(56) // T.int64(8) + ow_1 + ow_2_init + ow_3_init)
                        v_oc_block = T.axis.spatial(T.int64(32), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_fused_fused % T.int64(8) * T.int64(4) + oc_block_1 * T.int64(4) + oc_block_2_init + oc_block_3_init)
                        T.reads()
                        T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                        T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                        conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = T.float32(0)
                for ic_0, kh_0, kw_0, n_2, oc_chunk_2, oh_2, ow_2, oc_block_2, ic_1, kh_1, kw_1, n_3, oc_chunk_3, oh_3, ow_3, oc_block_3 in T.grid(T.int64(256), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(7), T.int64(1), T.int64(4), T.int64(2), T.int64(3), T.int64(3), T.int64(1), T.int64(8), T.int64(1), T.int64(1), T.int64(1)):
                    with T.block("conv2d_NCHWc_update"):
                        v_n = T.axis.spatial(T.int64(1), n_1 + n_2 + n_3)
                        v_oc_chunk = T.axis.spatial(T.int64(16), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_fused_fused // T.int64(56) * T.int64(8) + oc_chunk_1 * T.int64(8) + oc_chunk_2 * T.int64(8) + oc_chunk_3)
                        v_oh = T.axis.spatial(T.int64(7), oh_1 * T.int64(7) + oh_2 + oh_3)
                        v_ow = T.axis.spatial(T.int64(7), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_fused_fused % T.int64(56) // T.int64(8) + ow_1 + ow_2 + ow_3)
                        v_oc_block = T.axis.spatial(T.int64(32), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_fused_fused % T.int64(8) * T.int64(4) + oc_block_1 * T.int64(4) + oc_block_2 + oc_block_3)
                        v_ic = T.axis.reduce(T.int64(512), ic_0 * T.int64(2) + ic_1)
                        v_kh = T.axis.reduce(T.int64(3), kh_0 * T.int64(3) + kh_1)
                        v_kw = T.axis.reduce(T.int64(3), kw_0 * T.int64(3) + kw_1)
                        T.reads(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block], data_pad[v_n, v_ic // T.int64(512), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(512)], p1[v_oc_chunk, v_ic // T.int64(512), v_kh, v_kw, v_ic % T.int64(512), v_oc_block])
                        T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                        T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                        conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] + data_pad[v_n, v_ic // T.int64(512), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(512)] * p1[v_oc_chunk, v_ic // T.int64(512), v_kh, v_kw, v_ic % T.int64(512), v_oc_block]
        for ax0_ax1_ax2_ax3_ax4_fused_0 in T.parallel(T.int64(392)):
            for ax0_ax1_ax2_ax3_ax4_fused_1 in T.vectorized(T.int64(64)):
                with T.block("T_relu"):
                    v_ax0 = T.axis.spatial(T.int64(1), T.int64(0))
                    v_ax1 = T.axis.spatial(T.int64(16), (ax0_ax1_ax2_ax3_ax4_fused_0 * T.int64(64) + ax0_ax1_ax2_ax3_ax4_fused_1) // T.int64(1568))
                    v_ax2 = T.axis.spatial(T.int64(7), (ax0_ax1_ax2_ax3_ax4_fused_0 * T.int64(64) + ax0_ax1_ax2_ax3_ax4_fused_1) % T.int64(1568) // T.int64(224))
                    v_ax3 = T.axis.spatial(T.int64(7), (ax0_ax1_ax2_ax3_ax4_fused_0 * T.int64(64) + ax0_ax1_ax2_ax3_ax4_fused_1) % T.int64(224) // T.int64(32))
                    v_ax4 = T.axis.spatial(T.int64(32), (ax0_ax1_ax2_ax3_ax4_fused_0 * T.int64(64) + ax0_ax1_ax2_ax3_ax4_fused_1) % T.int64(32))
                    T.reads(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4], p3[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                    T.writes(T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                    T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.max(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] + p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4] + p3[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], T.float32(0))
b0 = sch.get_block(name="data_pad", func_name="main")
b1 = sch.get_block(name="conv2d_NCHWc", func_name="main")
b2 = sch.get_block(name="T_add", func_name="main")
b3 = sch.get_block(name="T_add_1", func_name="main")
b4 = sch.get_block(name="root", func_name="main")
sch.compute_inline(block=b3)
sch.compute_inline(block=b2)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSRSRS")
l5, l6, l7, l8, l9, l10, l11, l12 = sch.get_loops(block=b1)
v13, v14, v15, v16 = sch.sample_perfect_tile(loop=l5, n=4, max_innermost_factor=64, decision=[1, 1, 1, 1])
l17, l18, l19, l20 = sch.split(loop=l5, factors=[v13, v14, v15, v16], preserve_unit_iters=True)
v21, v22, v23, v24 = sch.sample_perfect_tile(loop=l6, n=4, max_innermost_factor=64, decision=[2, 1, 1, 8])
l25, l26, l27, l28 = sch.split(loop=l6, factors=[v21, v22, v23, v24], preserve_unit_iters=True)
v29, v30, v31, v32 = sch.sample_perfect_tile(loop=l7, n=4, max_innermost_factor=64, decision=[1, 1, 7, 1])
l33, l34, l35, l36 = sch.split(loop=l7, factors=[v29, v30, v31, v32], preserve_unit_iters=True)
v37, v38, v39, v40 = sch.sample_perfect_tile(loop=l8, n=4, max_innermost_factor=64, decision=[7, 1, 1, 1])
l41, l42, l43, l44 = sch.split(loop=l8, factors=[v37, v38, v39, v40], preserve_unit_iters=True)
v45, v46, v47, v48 = sch.sample_perfect_tile(loop=l9, n=4, max_innermost_factor=64, decision=[8, 1, 4, 1])
l49, l50, l51, l52 = sch.split(loop=l9, factors=[v45, v46, v47, v48], preserve_unit_iters=True)
v53, v54 = sch.sample_perfect_tile(loop=l10, n=2, max_innermost_factor=64, decision=[256, 2])
l55, l56 = sch.split(loop=l10, factors=[v53, v54], preserve_unit_iters=True)
v57, v58 = sch.sample_perfect_tile(loop=l11, n=2, max_innermost_factor=64, decision=[1, 3])
l59, l60 = sch.split(loop=l11, factors=[v57, v58], preserve_unit_iters=True)
v61, v62 = sch.sample_perfect_tile(loop=l12, n=2, max_innermost_factor=64, decision=[1, 3])
l63, l64 = sch.split(loop=l12, factors=[v61, v62], preserve_unit_iters=True)
sch.reorder(l17, l25, l33, l41, l49, l18, l26, l34, l42, l50, l55, l59, l63, l19, l27, l35, l43, l51, l56, l60, l64, l20, l28, l36, l44, l52)
sch.annotate(block_or_loop=b4, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b4, ann_key="meta_schedule.vectorize", ann_val=64)
v65 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b4, ann_key="meta_schedule.unroll_explicit", ann_val=v65)
l66 = sch.sample_compute_location(block=b0, decision=4)
sch.compute_at(block=b0, loop=l66, preserve_unit_loops=True, index=-1)
sch.enter_postproc()
b67 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b67, ann_key="meta_schedule.parallel")
sch.unannotate(block_or_loop=b67, ann_key="meta_schedule.vectorize")
sch.unannotate(block_or_loop=b67, ann_key="meta_schedule.unroll_explicit")
b68, b69, b70 = sch.get_child_blocks(b67)
l71, l72, l73, l74, l75, l76, l77, l78, l79, l80 = sch.get_loops(block=b68)
l81 = sch.fuse(l71, l72, l73, l74, l75, preserve_unit_iters=True)
sch.parallel(loop=l81)
l82, l83, l84, l85, l86, l87, l88, l89, l90, l91, l92, l93, l94, l95, l96, l97, l98, l99, l100, l101, l102, l103 = sch.get_loops(block=b69)
l104 = sch.fuse(l82, preserve_unit_iters=True)
sch.parallel(loop=l104)
sch.annotate(block_or_loop=l104, ann_key="pragma_auto_unroll_max_step", ann_val=512)
sch.annotate(block_or_loop=l104, ann_key="pragma_unroll_explicit", ann_val=1)
l105, l106, l107, l108, l109 = sch.get_loops(block=b70)
l110 = sch.fuse(l105, l106, l107, l108, l109, preserve_unit_iters=True)
l111, l112 = sch.split(loop=l110, factors=[None, 64], preserve_unit_iters=True)
sch.parallel(loop=l111)
sch.vectorize(loop=l112)
b113 = sch.get_block(name="conv2d_NCHWc", func_name="main")
l114, l115, l116, l117, l118, l119, l120, l121, l122, l123, l124, l125, l126, l127, l128, l129, l130, l131, l132, l133, l134, l135 = sch.get_loops(block=b113)
b136 = sch.decompose_reduction(block=b113, loop=l120)
2024-04-29 03:57:49 [INFO] [task_scheduler.cc:131] [Task #26: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_3] Trial #3: GFLOPs: 70.1303. Time: 3297.9504 us. Best GFLOPs: 73.7923
2024-04-29 03:57:49 [INFO] [task_scheduler.cc:131] [Task #26: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_3] Trial #4: GFLOPs: 4.9474. Time: 46748.6260 us. Best GFLOPs: 73.7923
2024-04-29 03:57:49 [INFO] [task_scheduler.cc:131] [Task #26: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_3] Trial #5: GFLOPs: 0.7743. Time: 298696.7853 us. Best GFLOPs: 73.7923
2024-04-29 03:57:49 [INFO] [task_scheduler.cc:131] [Task #26: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_3] Trial #6: GFLOPs: 17.6860. Time: 13077.3815 us. Best GFLOPs: 73.7923
2024-04-29 03:57:49 [INFO] [task_scheduler.cc:131] [Task #26: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_3] Trial #7: GFLOPs: 24.1812. Time: 9564.7305 us. Best GFLOPs: 73.7923
2024-04-29 03:57:49 [INFO] [task_scheduler.cc:121] [Task #26: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_3] Trial #8: Error in building:
LocalBuilder: Timeout, killed after 30.0 seconds
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(1), T.int64(7), T.int64(7), T.int64(512)), "float32"), p1: T.Buffer((T.int64(16), T.int64(1), T.int64(3), T.int64(3), T.int64(512), T.int64(32)), "float32"), p2: T.Buffer((T.int64(1), T.int64(16), T.int64(1), T.int64(1), T.int64(32)), "float32"), p3: T.Buffer((T.int64(1), T.int64(16), T.int64(7), T.int64(7), T.int64(32)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(16), T.int64(7), T.int64(7), T.int64(32)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        data_pad = T.alloc_buffer((T.int64(1), T.int64(1), T.int64(9), T.int64(9), T.int64(512)))
        conv2d_NCHWc = T.alloc_buffer((T.int64(1), T.int64(16), T.int64(7), T.int64(7), T.int64(32)))
        for n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_fused_fused in T.parallel(T.int64(56), annotations={"pragma_auto_unroll_max_step": 512, "pragma_unroll_explicit": 1}):
            for n_1, oc_chunk_1, oh_1, ow_1 in T.grid(T.int64(1), T.int64(4), T.int64(1), T.int64(7)):
                for ax0, ax1, ax2, ax3, ax4 in T.grid(T.int64(1), T.int64(1), T.int64(3), T.int64(3), T.int64(512)):
                    with T.block("data_pad"):
                        v_i0, v_i1 = T.axis.remap("SS", [ax0, ax1])
                        v_i2 = T.axis.spatial(T.int64(9), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_fused_fused // T.int64(8) + ax2)
                        v_i3 = T.axis.spatial(T.int64(9), ow_1 + ax3)
                        v_i4 = T.axis.spatial(T.int64(512), ax4)
                        T.reads(p0[v_i0, v_i1, v_i2 - T.int64(1), v_i3 - T.int64(1), v_i4])
                        T.writes(data_pad[v_i0, v_i1, v_i2, v_i3, v_i4])
                        data_pad[v_i0, v_i1, v_i2, v_i3, v_i4] = T.if_then_else(T.int64(1) <= v_i2 and v_i2 < T.int64(8) and T.int64(1) <= v_i3 and v_i3 < T.int64(8), p0[v_i0, v_i1, v_i2 - T.int64(1), v_i3 - T.int64(1), v_i4], T.float32(0))
                for oc_block_1 in range(T.int64(4)):
                    for n_2_init, oc_chunk_2_init, oh_2_init, ow_2_init, oc_block_2_init, n_3_init, oc_chunk_3_init, oh_3_init, ow_3_init, oc_block_3_init in T.grid(T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(4), T.int64(1), T.int64(1), T.int64(1)):
                        with T.block("conv2d_NCHWc_init"):
                            v_n = T.axis.spatial(T.int64(1), n_1 + n_2_init + n_3_init)
                            v_oc_chunk = T.axis.spatial(T.int64(16), oc_chunk_1 * T.int64(4) + oc_chunk_2_init * T.int64(4) + oc_chunk_3_init)
                            v_oh = T.axis.spatial(T.int64(7), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_fused_fused // T.int64(8) + oh_1 + oh_2_init + oh_3_init)
                            v_ow = T.axis.spatial(T.int64(7), ow_1 + ow_2_init + ow_3_init)
                            v_oc_block = T.axis.spatial(T.int64(32), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_fused_fused % T.int64(8) * T.int64(4) + oc_block_1 + oc_block_2_init + oc_block_3_init)
                            T.reads()
                            T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                            T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                            conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = T.float32(0)
                    for ic_0, kh_0, kw_0, n_2, oc_chunk_2, oh_2, ow_2, oc_block_2, ic_1, kh_1, kw_1, n_3, oc_chunk_3, oh_3, ow_3, oc_block_3 in T.grid(T.int64(512), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(3), T.int64(3), T.int64(1), T.int64(4), T.int64(1), T.int64(1), T.int64(1)):
                        with T.block("conv2d_NCHWc_update"):
                            v_n = T.axis.spatial(T.int64(1), n_1 + n_2 + n_3)
                            v_oc_chunk = T.axis.spatial(T.int64(16), oc_chunk_1 * T.int64(4) + oc_chunk_2 * T.int64(4) + oc_chunk_3)
                            v_oh = T.axis.spatial(T.int64(7), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_fused_fused // T.int64(8) + oh_1 + oh_2 + oh_3)
                            v_ow = T.axis.spatial(T.int64(7), ow_1 + ow_2 + ow_3)
                            v_oc_block = T.axis.spatial(T.int64(32), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_fused_fused % T.int64(8) * T.int64(4) + oc_block_1 + oc_block_2 + oc_block_3)
                            v_ic = T.axis.reduce(T.int64(512), ic_0 + ic_1)
                            v_kh = T.axis.reduce(T.int64(3), kh_0 * T.int64(3) + kh_1)
                            v_kw = T.axis.reduce(T.int64(3), kw_0 * T.int64(3) + kw_1)
                            T.reads(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block], data_pad[v_n, v_ic // T.int64(512), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(512)], p1[v_oc_chunk, v_ic // T.int64(512), v_kh, v_kw, v_ic % T.int64(512), v_oc_block])
                            T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                            T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                            conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] + data_pad[v_n, v_ic // T.int64(512), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(512)] * p1[v_oc_chunk, v_ic // T.int64(512), v_kh, v_kw, v_ic % T.int64(512), v_oc_block]
            for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(16), T.int64(1), T.int64(7)):
                for ax4_fused in T.vectorized(T.int64(4)):
                    with T.block("T_relu"):
                        v_ax0, v_ax1 = T.axis.remap("SS", [ax0, ax1])
                        v_ax2 = T.axis.spatial(T.int64(7), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_fused_fused // T.int64(8) + ax2)
                        v_ax3 = T.axis.spatial(T.int64(7), ax3)
                        v_ax4 = T.axis.spatial(T.int64(32), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_fused_fused % T.int64(8) * T.int64(4) + ax4_fused)
                        T.reads(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4], p3[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                        T.writes(T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                        T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.max(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] + p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4] + p3[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], T.float32(0))
b0 = sch.get_block(name="data_pad", func_name="main")
b1 = sch.get_block(name="conv2d_NCHWc", func_name="main")
b2 = sch.get_block(name="T_add", func_name="main")
b3 = sch.get_block(name="T_add_1", func_name="main")
b4 = sch.get_block(name="root", func_name="main")
sch.compute_inline(block=b3)
sch.compute_inline(block=b2)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSRSRS")
l5, l6, l7, l8, l9, l10, l11, l12 = sch.get_loops(block=b1)
v13, v14, v15, v16 = sch.sample_perfect_tile(loop=l5, n=4, max_innermost_factor=64, decision=[1, 1, 1, 1])
l17, l18, l19, l20 = sch.split(loop=l5, factors=[v13, v14, v15, v16], preserve_unit_iters=True)
v21, v22, v23, v24 = sch.sample_perfect_tile(loop=l6, n=4, max_innermost_factor=64, decision=[1, 4, 1, 4])
l25, l26, l27, l28 = sch.split(loop=l6, factors=[v21, v22, v23, v24], preserve_unit_iters=True)
v29, v30, v31, v32 = sch.sample_perfect_tile(loop=l7, n=4, max_innermost_factor=64, decision=[7, 1, 1, 1])
l33, l34, l35, l36 = sch.split(loop=l7, factors=[v29, v30, v31, v32], preserve_unit_iters=True)
v37, v38, v39, v40 = sch.sample_perfect_tile(loop=l8, n=4, max_innermost_factor=64, decision=[1, 7, 1, 1])
l41, l42, l43, l44 = sch.split(loop=l8, factors=[v37, v38, v39, v40], preserve_unit_iters=True)
v45, v46, v47, v48 = sch.sample_perfect_tile(loop=l9, n=4, max_innermost_factor=64, decision=[8, 4, 1, 1])
l49, l50, l51, l52 = sch.split(loop=l9, factors=[v45, v46, v47, v48], preserve_unit_iters=True)
v53, v54 = sch.sample_perfect_tile(loop=l10, n=2, max_innermost_factor=64, decision=[512, 1])
l55, l56 = sch.split(loop=l10, factors=[v53, v54], preserve_unit_iters=True)
v57, v58 = sch.sample_perfect_tile(loop=l11, n=2, max_innermost_factor=64, decision=[1, 3])
l59, l60 = sch.split(loop=l11, factors=[v57, v58], preserve_unit_iters=True)
v61, v62 = sch.sample_perfect_tile(loop=l12, n=2, max_innermost_factor=64, decision=[1, 3])
l63, l64 = sch.split(loop=l12, factors=[v61, v62], preserve_unit_iters=True)
sch.reorder(l17, l25, l33, l41, l49, l18, l26, l34, l42, l50, l55, l59, l63, l19, l27, l35, l43, l51, l56, l60, l64, l20, l28, l36, l44, l52)
b65, = sch.get_consumers(block=b1)
sch.reverse_compute_at(block=b65, loop=l49, preserve_unit_loops=True, index=-1)
sch.annotate(block_or_loop=b4, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b4, ann_key="meta_schedule.vectorize", ann_val=64)
v66 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b4, ann_key="meta_schedule.unroll_explicit", ann_val=v66)
l67 = sch.sample_compute_location(block=b0, decision=8)
sch.compute_at(block=b0, loop=l67, preserve_unit_loops=True, index=-1)
sch.enter_postproc()
b68 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b68, ann_key="meta_schedule.parallel")
sch.unannotate(block_or_loop=b68, ann_key="meta_schedule.vectorize")
sch.unannotate(block_or_loop=b68, ann_key="meta_schedule.unroll_explicit")
b69, b70, b71 = sch.get_child_blocks(b68)
l72, l73, l74, l75, l76, l77, l78, l79, l80, l81, l82, l83, l84, l85 = sch.get_loops(block=b69)
l86 = sch.fuse(l72, l73, l74, l75, l76, preserve_unit_iters=True)
sch.parallel(loop=l86)
l87, l88, l89, l90, l91, l92, l93, l94, l95, l96, l97, l98, l99, l100, l101, l102, l103, l104, l105, l106, l107, l108 = sch.get_loops(block=b70)
l109 = sch.fuse(l87, preserve_unit_iters=True)
sch.parallel(loop=l109)
sch.annotate(block_or_loop=l109, ann_key="pragma_auto_unroll_max_step", ann_val=512)
sch.annotate(block_or_loop=l109, ann_key="pragma_unroll_explicit", ann_val=1)
l110, l111, l112, l113, l114, l115 = sch.get_loops(block=b71)
l116 = sch.fuse(l115, preserve_unit_iters=True)
sch.vectorize(loop=l116)
b117 = sch.get_block(name="conv2d_NCHWc", func_name="main")
l118, l119, l120, l121, l122, l123, l124, l125, l126, l127, l128, l129, l130, l131, l132, l133, l134, l135, l136, l137, l138, l139 = sch.get_loops(block=b117)
b140 = sch.decompose_reduction(block=b117, loop=l124)
2024-04-29 03:57:49 [INFO] [task_scheduler.cc:131] [Task #26: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_3] Trial #9: GFLOPs: 102.3618. Time: 2259.4974 us. Best GFLOPs: 102.3618
2024-04-29 03:57:49 [INFO] [task_scheduler.cc:131] [Task #26: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_3] Trial #10: GFLOPs: 19.8878. Time: 11629.5354 us. Best GFLOPs: 102.3618
2024-04-29 03:57:49 [INFO] [task_scheduler.cc:131] [Task #26: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_3] Trial #11: GFLOPs: 29.0401. Time: 7964.3720 us. Best GFLOPs: 102.3618
2024-04-29 03:57:49 [INFO] [task_scheduler.cc:131] [Task #26: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_3] Trial #12: GFLOPs: 15.1708. Time: 15245.4971 us. Best GFLOPs: 102.3618
2024-04-29 03:57:49 [INFO] [task_scheduler.cc:131] [Task #26: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_3] Trial #13: GFLOPs: 31.8509. Time: 7261.5310 us. Best GFLOPs: 102.3618
2024-04-29 03:57:49 [INFO] [task_scheduler.cc:131] [Task #26: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_3] Trial #14: GFLOPs: 80.6644. Time: 2867.2672 us. Best GFLOPs: 102.3618
2024-04-29 03:57:49 [INFO] [task_scheduler.cc:131] [Task #26: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_3] Trial #15: GFLOPs: 9.0704. Time: 25499.0225 us. Best GFLOPs: 102.3618
2024-04-29 03:57:49 [INFO] [task_scheduler.cc:121] [Task #26: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_3] Trial #16: Error in building:
LocalBuilder: Timeout, killed after 30.0 seconds
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(1), T.int64(7), T.int64(7), T.int64(512)), "float32"), p1: T.Buffer((T.int64(16), T.int64(1), T.int64(3), T.int64(3), T.int64(512), T.int64(32)), "float32"), p2: T.Buffer((T.int64(1), T.int64(16), T.int64(1), T.int64(1), T.int64(32)), "float32"), p3: T.Buffer((T.int64(1), T.int64(16), T.int64(7), T.int64(7), T.int64(32)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(16), T.int64(7), T.int64(7), T.int64(32)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        data_pad = T.alloc_buffer((T.int64(1), T.int64(1), T.int64(9), T.int64(9), T.int64(512)))
        conv2d_NCHWc = T.alloc_buffer((T.int64(1), T.int64(16), T.int64(7), T.int64(7), T.int64(32)))
        for i0_i1_i2_i3_i4_fused in T.parallel(T.int64(41472)):
            with T.block("data_pad"):
                v_i0 = T.axis.spatial(T.int64(1), T.int64(0))
                v_i1 = T.axis.spatial(T.int64(1), T.int64(0))
                v_i2 = T.axis.spatial(T.int64(9), i0_i1_i2_i3_i4_fused // T.int64(4608))
                v_i3 = T.axis.spatial(T.int64(9), i0_i1_i2_i3_i4_fused % T.int64(4608) // T.int64(512))
                v_i4 = T.axis.spatial(T.int64(512), i0_i1_i2_i3_i4_fused % T.int64(512))
                T.reads(p0[v_i0, v_i1, v_i2 - T.int64(1), v_i3 - T.int64(1), v_i4])
                T.writes(data_pad[v_i0, v_i1, v_i2, v_i3, v_i4])
                data_pad[v_i0, v_i1, v_i2, v_i3, v_i4] = T.if_then_else(T.int64(1) <= v_i2 and v_i2 < T.int64(8) and T.int64(1) <= v_i3 and v_i3 < T.int64(8), p0[v_i0, v_i1, v_i2 - T.int64(1), v_i3 - T.int64(1), v_i4], T.float32(0))
        for n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_fused in T.parallel(T.int64(896), annotations={"pragma_auto_unroll_max_step": 512, "pragma_unroll_explicit": 1}):
            for ow_1, oc_block_1 in T.grid(T.int64(1), T.int64(1)):
                for n_2_init, oc_chunk_2_init, oh_2_init, ow_2_init, oc_block_2_init, n_3_init, oc_chunk_3_init, oh_3_init, ow_3_init, oc_block_3_init in T.grid(T.int64(1), T.int64(2), T.int64(1), T.int64(7), T.int64(2), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1)):
                    with T.block("conv2d_NCHWc_init"):
                        v_n = T.axis.spatial(T.int64(1), n_2_init + n_3_init)
                        v_oc_chunk = T.axis.spatial(T.int64(16), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_fused % T.int64(56) // T.int64(7) * T.int64(2) + oc_chunk_2_init + oc_chunk_3_init)
                        v_oh = T.axis.spatial(T.int64(7), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_fused % T.int64(7) + oh_2_init + oh_3_init)
                        v_ow = T.axis.spatial(T.int64(7), ow_1 * T.int64(7) + ow_2_init + ow_3_init)
                        v_oc_block = T.axis.spatial(T.int64(32), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_fused // T.int64(56) * T.int64(2) + oc_block_1 * T.int64(2) + oc_block_2_init + oc_block_3_init)
                        T.reads()
                        T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                        T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                        conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = T.float32(0)
                for ic_0, kh_0, kw_0, n_2, oc_chunk_2, oh_2, ow_2, oc_block_2, ic_1, kh_1, kw_1, n_3, oc_chunk_3, oh_3, ow_3, oc_block_3 in T.grid(T.int64(32), T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(1), T.int64(7), T.int64(2), T.int64(16), T.int64(3), T.int64(3), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1)):
                    with T.block("conv2d_NCHWc_update"):
                        v_n = T.axis.spatial(T.int64(1), n_2 + n_3)
                        v_oc_chunk = T.axis.spatial(T.int64(16), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_fused % T.int64(56) // T.int64(7) * T.int64(2) + oc_chunk_2 + oc_chunk_3)
                        v_oh = T.axis.spatial(T.int64(7), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_fused % T.int64(7) + oh_2 + oh_3)
                        v_ow = T.axis.spatial(T.int64(7), ow_1 * T.int64(7) + ow_2 + ow_3)
                        v_oc_block = T.axis.spatial(T.int64(32), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_fused // T.int64(56) * T.int64(2) + oc_block_1 * T.int64(2) + oc_block_2 + oc_block_3)
                        v_ic = T.axis.reduce(T.int64(512), ic_0 * T.int64(16) + ic_1)
                        v_kh = T.axis.reduce(T.int64(3), kh_0 * T.int64(3) + kh_1)
                        v_kw = T.axis.reduce(T.int64(3), kw_0 * T.int64(3) + kw_1)
                        T.reads(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block], data_pad[v_n, v_ic // T.int64(512), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(512)], p1[v_oc_chunk, v_ic // T.int64(512), v_kh, v_kw, v_ic % T.int64(512), v_oc_block])
                        T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                        T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                        conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] + data_pad[v_n, v_ic // T.int64(512), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(512)] * p1[v_oc_chunk, v_ic // T.int64(512), v_kh, v_kw, v_ic % T.int64(512), v_oc_block]
        for ax0_ax1_ax2_ax3_ax4_fused_0 in T.parallel(T.int64(392)):
            for ax0_ax1_ax2_ax3_ax4_fused_1 in T.vectorized(T.int64(64)):
                with T.block("T_relu"):
                    v_ax0 = T.axis.spatial(T.int64(1), T.int64(0))
                    v_ax1 = T.axis.spatial(T.int64(16), (ax0_ax1_ax2_ax3_ax4_fused_0 * T.int64(64) + ax0_ax1_ax2_ax3_ax4_fused_1) // T.int64(1568))
                    v_ax2 = T.axis.spatial(T.int64(7), (ax0_ax1_ax2_ax3_ax4_fused_0 * T.int64(64) + ax0_ax1_ax2_ax3_ax4_fused_1) % T.int64(1568) // T.int64(224))
                    v_ax3 = T.axis.spatial(T.int64(7), (ax0_ax1_ax2_ax3_ax4_fused_0 * T.int64(64) + ax0_ax1_ax2_ax3_ax4_fused_1) % T.int64(224) // T.int64(32))
                    v_ax4 = T.axis.spatial(T.int64(32), (ax0_ax1_ax2_ax3_ax4_fused_0 * T.int64(64) + ax0_ax1_ax2_ax3_ax4_fused_1) % T.int64(32))
                    T.reads(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4], p3[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                    T.writes(T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                    T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.max(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] + p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4] + p3[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], T.float32(0))
b0 = sch.get_block(name="data_pad", func_name="main")
b1 = sch.get_block(name="conv2d_NCHWc", func_name="main")
b2 = sch.get_block(name="T_add", func_name="main")
b3 = sch.get_block(name="T_add_1", func_name="main")
b4 = sch.get_block(name="root", func_name="main")
sch.compute_inline(block=b3)
sch.compute_inline(block=b2)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSRSRS")
l5, l6, l7, l8, l9, l10, l11, l12 = sch.get_loops(block=b1)
v13, v14, v15, v16 = sch.sample_perfect_tile(loop=l5, n=4, max_innermost_factor=64, decision=[1, 1, 1, 1])
l17, l18, l19, l20 = sch.split(loop=l5, factors=[v13, v14, v15, v16], preserve_unit_iters=True)
v21, v22, v23, v24 = sch.sample_perfect_tile(loop=l6, n=4, max_innermost_factor=64, decision=[1, 8, 2, 1])
l25, l26, l27, l28 = sch.split(loop=l6, factors=[v21, v22, v23, v24], preserve_unit_iters=True)
v29, v30, v31, v32 = sch.sample_perfect_tile(loop=l7, n=4, max_innermost_factor=64, decision=[1, 7, 1, 1])
l33, l34, l35, l36 = sch.split(loop=l7, factors=[v29, v30, v31, v32], preserve_unit_iters=True)
v37, v38, v39, v40 = sch.sample_perfect_tile(loop=l8, n=4, max_innermost_factor=64, decision=[1, 1, 7, 1])
l41, l42, l43, l44 = sch.split(loop=l8, factors=[v37, v38, v39, v40], preserve_unit_iters=True)
v45, v46, v47, v48 = sch.sample_perfect_tile(loop=l9, n=4, max_innermost_factor=64, decision=[16, 1, 2, 1])
l49, l50, l51, l52 = sch.split(loop=l9, factors=[v45, v46, v47, v48], preserve_unit_iters=True)
v53, v54 = sch.sample_perfect_tile(loop=l10, n=2, max_innermost_factor=64, decision=[32, 16])
l55, l56 = sch.split(loop=l10, factors=[v53, v54], preserve_unit_iters=True)
v57, v58 = sch.sample_perfect_tile(loop=l11, n=2, max_innermost_factor=64, decision=[1, 3])
l59, l60 = sch.split(loop=l11, factors=[v57, v58], preserve_unit_iters=True)
v61, v62 = sch.sample_perfect_tile(loop=l12, n=2, max_innermost_factor=64, decision=[1, 3])
l63, l64 = sch.split(loop=l12, factors=[v61, v62], preserve_unit_iters=True)
sch.reorder(l17, l25, l33, l41, l49, l18, l26, l34, l42, l50, l55, l59, l63, l19, l27, l35, l43, l51, l56, l60, l64, l20, l28, l36, l44, l52)
sch.annotate(block_or_loop=b4, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b4, ann_key="meta_schedule.vectorize", ann_val=64)
v65 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b4, ann_key="meta_schedule.unroll_explicit", ann_val=v65)
l66 = sch.sample_compute_location(block=b0, decision=-1)
sch.compute_at(block=b0, loop=l66, preserve_unit_loops=True, index=-1)
sch.enter_postproc()
b67 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b67, ann_key="meta_schedule.parallel")
sch.unannotate(block_or_loop=b67, ann_key="meta_schedule.vectorize")
sch.unannotate(block_or_loop=b67, ann_key="meta_schedule.unroll_explicit")
b68, b69, b70 = sch.get_child_blocks(b67)
l71, l72, l73, l74, l75 = sch.get_loops(block=b68)
l76 = sch.fuse(l71, l72, l73, l74, l75, preserve_unit_iters=True)
sch.parallel(loop=l76)
l77, l78, l79, l80, l81, l82, l83, l84, l85, l86, l87, l88, l89, l90, l91, l92, l93, l94, l95, l96, l97, l98, l99, l100, l101, l102 = sch.get_loops(block=b69)
l103 = sch.fuse(l77, l78, l79, l80, l81, l82, l83, l84, preserve_unit_iters=True)
sch.parallel(loop=l103)
sch.annotate(block_or_loop=l103, ann_key="pragma_auto_unroll_max_step", ann_val=512)
sch.annotate(block_or_loop=l103, ann_key="pragma_unroll_explicit", ann_val=1)
l104, l105, l106, l107, l108 = sch.get_loops(block=b70)
l109 = sch.fuse(l104, l105, l106, l107, l108, preserve_unit_iters=True)
l110, l111 = sch.split(loop=l109, factors=[None, 64], preserve_unit_iters=True)
sch.parallel(loop=l110)
sch.vectorize(loop=l111)
b112 = sch.get_block(name="conv2d_NCHWc", func_name="main")
l113, l114, l115, l116, l117, l118, l119, l120, l121, l122, l123, l124, l125, l126, l127, l128, l129, l130, l131 = sch.get_loops(block=b112)
b132 = sch.decompose_reduction(block=b112, loop=l116)
2024-04-29 03:57:49 [INFO] [task_scheduler.cc:121] [Task #26: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_3] Trial #17: Error in building:
LocalBuilder: Timeout, killed after 30.0 seconds
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(1), T.int64(7), T.int64(7), T.int64(512)), "float32"), p1: T.Buffer((T.int64(16), T.int64(1), T.int64(3), T.int64(3), T.int64(512), T.int64(32)), "float32"), p2: T.Buffer((T.int64(1), T.int64(16), T.int64(1), T.int64(1), T.int64(32)), "float32"), p3: T.Buffer((T.int64(1), T.int64(16), T.int64(7), T.int64(7), T.int64(32)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(16), T.int64(7), T.int64(7), T.int64(32)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        data_pad = T.alloc_buffer((T.int64(1), T.int64(1), T.int64(9), T.int64(9), T.int64(512)))
        conv2d_NCHWc = T.alloc_buffer((T.int64(1), T.int64(16), T.int64(7), T.int64(7), T.int64(32)))
        for n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_fused_fused in T.parallel(T.int64(7), annotations={"pragma_auto_unroll_max_step": 512, "pragma_unroll_explicit": 1}):
            for n_1, oc_chunk_1, oh_1, ow_1 in T.grid(T.int64(1), T.int64(4), T.int64(1), T.int64(7)):
                for ax0, ax1, ax2, ax3, ax4 in T.grid(T.int64(1), T.int64(1), T.int64(3), T.int64(3), T.int64(512)):
                    with T.block("data_pad"):
                        v_i0, v_i1 = T.axis.remap("SS", [ax0, ax1])
                        v_i2 = T.axis.spatial(T.int64(9), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_fused_fused + ax2)
                        v_i3 = T.axis.spatial(T.int64(9), ow_1 + ax3)
                        v_i4 = T.axis.spatial(T.int64(512), ax4)
                        T.reads(p0[v_i0, v_i1, v_i2 - T.int64(1), v_i3 - T.int64(1), v_i4])
                        T.writes(data_pad[v_i0, v_i1, v_i2, v_i3, v_i4])
                        data_pad[v_i0, v_i1, v_i2, v_i3, v_i4] = T.if_then_else(T.int64(1) <= v_i2 and v_i2 < T.int64(8) and T.int64(1) <= v_i3 and v_i3 < T.int64(8), p0[v_i0, v_i1, v_i2 - T.int64(1), v_i3 - T.int64(1), v_i4], T.float32(0))
                for oc_block_1 in range(T.int64(4)):
                    for n_2_init, oc_chunk_2_init, oh_2_init, ow_2_init, oc_block_2_init, n_3_init, oc_chunk_3_init, oh_3_init, ow_3_init, oc_block_3_init in T.grid(T.int64(1), T.int64(4), T.int64(1), T.int64(1), T.int64(8), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1)):
                        with T.block("conv2d_NCHWc_init"):
                            v_n = T.axis.spatial(T.int64(1), n_1 + n_2_init + n_3_init)
                            v_oc_chunk = T.axis.spatial(T.int64(16), oc_chunk_1 * T.int64(4) + oc_chunk_2_init + oc_chunk_3_init)
                            v_oh = T.axis.spatial(T.int64(7), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_fused_fused + oh_1 + oh_2_init + oh_3_init)
                            v_ow = T.axis.spatial(T.int64(7), ow_1 + ow_2_init + ow_3_init)
                            v_oc_block = T.axis.spatial(T.int64(32), oc_block_1 * T.int64(8) + oc_block_2_init + oc_block_3_init)
                            T.reads()
                            T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                            T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                            conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = T.float32(0)
                    for ic_0, kh_0, kw_0, n_2, oc_chunk_2, oh_2, ow_2, oc_block_2, ic_1, kh_1, kw_1, n_3, oc_chunk_3, oh_3, ow_3, oc_block_3 in T.grid(T.int64(128), T.int64(3), T.int64(3), T.int64(1), T.int64(4), T.int64(1), T.int64(1), T.int64(8), T.int64(4), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1)):
                        with T.block("conv2d_NCHWc_update"):
                            v_n = T.axis.spatial(T.int64(1), n_1 + n_2 + n_3)
                            v_oc_chunk = T.axis.spatial(T.int64(16), oc_chunk_1 * T.int64(4) + oc_chunk_2 + oc_chunk_3)
                            v_oh = T.axis.spatial(T.int64(7), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_fused_fused + oh_1 + oh_2 + oh_3)
                            v_ow = T.axis.spatial(T.int64(7), ow_1 + ow_2 + ow_3)
                            v_oc_block = T.axis.spatial(T.int64(32), oc_block_1 * T.int64(8) + oc_block_2 + oc_block_3)
                            v_ic = T.axis.reduce(T.int64(512), ic_0 * T.int64(4) + ic_1)
                            v_kh = T.axis.reduce(T.int64(3), kh_0 + kh_1)
                            v_kw = T.axis.reduce(T.int64(3), kw_0 + kw_1)
                            T.reads(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block], data_pad[v_n, v_ic // T.int64(512), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(512)], p1[v_oc_chunk, v_ic // T.int64(512), v_kh, v_kw, v_ic % T.int64(512), v_oc_block])
                            T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                            T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                            conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] + data_pad[v_n, v_ic // T.int64(512), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(512)] * p1[v_oc_chunk, v_ic // T.int64(512), v_kh, v_kw, v_ic % T.int64(512), v_oc_block]
            for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(16), T.int64(1), T.int64(7)):
                for ax4_fused in T.vectorized(T.int64(32)):
                    with T.block("T_relu"):
                        v_ax0, v_ax1 = T.axis.remap("SS", [ax0, ax1])
                        v_ax2 = T.axis.spatial(T.int64(7), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_fused_fused + ax2)
                        v_ax3, v_ax4 = T.axis.remap("SS", [ax3, ax4_fused])
                        T.reads(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4], p3[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                        T.writes(T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                        T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.max(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] + p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4] + p3[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], T.float32(0))
b0 = sch.get_block(name="data_pad", func_name="main")
b1 = sch.get_block(name="conv2d_NCHWc", func_name="main")
b2 = sch.get_block(name="T_add", func_name="main")
b3 = sch.get_block(name="T_add_1", func_name="main")
b4 = sch.get_block(name="root", func_name="main")
sch.compute_inline(block=b3)
sch.compute_inline(block=b2)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSRSRS")
l5, l6, l7, l8, l9, l10, l11, l12 = sch.get_loops(block=b1)
v13, v14, v15, v16 = sch.sample_perfect_tile(loop=l5, n=4, max_innermost_factor=64, decision=[1, 1, 1, 1])
l17, l18, l19, l20 = sch.split(loop=l5, factors=[v13, v14, v15, v16], preserve_unit_iters=True)
v21, v22, v23, v24 = sch.sample_perfect_tile(loop=l6, n=4, max_innermost_factor=64, decision=[1, 4, 4, 1])
l25, l26, l27, l28 = sch.split(loop=l6, factors=[v21, v22, v23, v24], preserve_unit_iters=True)
v29, v30, v31, v32 = sch.sample_perfect_tile(loop=l7, n=4, max_innermost_factor=64, decision=[7, 1, 1, 1])
l33, l34, l35, l36 = sch.split(loop=l7, factors=[v29, v30, v31, v32], preserve_unit_iters=True)
v37, v38, v39, v40 = sch.sample_perfect_tile(loop=l8, n=4, max_innermost_factor=64, decision=[1, 7, 1, 1])
l41, l42, l43, l44 = sch.split(loop=l8, factors=[v37, v38, v39, v40], preserve_unit_iters=True)
v45, v46, v47, v48 = sch.sample_perfect_tile(loop=l9, n=4, max_innermost_factor=64, decision=[1, 4, 8, 1])
l49, l50, l51, l52 = sch.split(loop=l9, factors=[v45, v46, v47, v48], preserve_unit_iters=True)
v53, v54 = sch.sample_perfect_tile(loop=l10, n=2, max_innermost_factor=64, decision=[128, 4])
l55, l56 = sch.split(loop=l10, factors=[v53, v54], preserve_unit_iters=True)
v57, v58 = sch.sample_perfect_tile(loop=l11, n=2, max_innermost_factor=64, decision=[3, 1])
l59, l60 = sch.split(loop=l11, factors=[v57, v58], preserve_unit_iters=True)
v61, v62 = sch.sample_perfect_tile(loop=l12, n=2, max_innermost_factor=64, decision=[3, 1])
l63, l64 = sch.split(loop=l12, factors=[v61, v62], preserve_unit_iters=True)
sch.reorder(l17, l25, l33, l41, l49, l18, l26, l34, l42, l50, l55, l59, l63, l19, l27, l35, l43, l51, l56, l60, l64, l20, l28, l36, l44, l52)
b65, = sch.get_consumers(block=b1)
sch.reverse_compute_at(block=b65, loop=l49, preserve_unit_loops=True, index=-1)
sch.annotate(block_or_loop=b4, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b4, ann_key="meta_schedule.vectorize", ann_val=64)
v66 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b4, ann_key="meta_schedule.unroll_explicit", ann_val=v66)
l67 = sch.sample_compute_location(block=b0, decision=8)
sch.compute_at(block=b0, loop=l67, preserve_unit_loops=True, index=-1)
sch.enter_postproc()
b68 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b68, ann_key="meta_schedule.parallel")
sch.unannotate(block_or_loop=b68, ann_key="meta_schedule.vectorize")
sch.unannotate(block_or_loop=b68, ann_key="meta_schedule.unroll_explicit")
b69, b70, b71 = sch.get_child_blocks(b68)
l72, l73, l74, l75, l76, l77, l78, l79, l80, l81, l82, l83, l84, l85 = sch.get_loops(block=b69)
l86 = sch.fuse(l72, l73, l74, l75, l76, preserve_unit_iters=True)
sch.parallel(loop=l86)
l87, l88, l89, l90, l91, l92, l93, l94, l95, l96, l97, l98, l99, l100, l101, l102, l103, l104, l105, l106, l107, l108 = sch.get_loops(block=b70)
l109 = sch.fuse(l87, preserve_unit_iters=True)
sch.parallel(loop=l109)
sch.annotate(block_or_loop=l109, ann_key="pragma_auto_unroll_max_step", ann_val=512)
sch.annotate(block_or_loop=l109, ann_key="pragma_unroll_explicit", ann_val=1)
l110, l111, l112, l113, l114, l115 = sch.get_loops(block=b71)
l116 = sch.fuse(l115, preserve_unit_iters=True)
sch.vectorize(loop=l116)
b117 = sch.get_block(name="conv2d_NCHWc", func_name="main")
l118, l119, l120, l121, l122, l123, l124, l125, l126, l127, l128, l129, l130, l131, l132, l133, l134, l135, l136, l137, l138, l139 = sch.get_loops(block=b117)
b140 = sch.decompose_reduction(block=b117, loop=l124)
2024-04-29 03:57:49 [INFO] [task_scheduler.cc:131] [Task #26: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_3] Trial #18: GFLOPs: 11.2755. Time: 20512.3001 us. Best GFLOPs: 102.3618
2024-04-29 03:57:49 [INFO] [task_scheduler.cc:131] [Task #26: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_3] Trial #19: GFLOPs: 4.2353. Time: 54609.4993 us. Best GFLOPs: 102.3618
2024-04-29 03:57:49 [INFO] [task_scheduler.cc:131] [Task #26: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_3] Trial #20: GFLOPs: 8.3057. Time: 27846.7558 us. Best GFLOPs: 102.3618
2024-04-29 03:57:49 [INFO] [task_scheduler.cc:121] [Task #26: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_3] Trial #21: Error in building:
LocalBuilder: Timeout, killed after 30.0 seconds
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(1), T.int64(7), T.int64(7), T.int64(512)), "float32"), p1: T.Buffer((T.int64(16), T.int64(1), T.int64(3), T.int64(3), T.int64(512), T.int64(32)), "float32"), p2: T.Buffer((T.int64(1), T.int64(16), T.int64(1), T.int64(1), T.int64(32)), "float32"), p3: T.Buffer((T.int64(1), T.int64(16), T.int64(7), T.int64(7), T.int64(32)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(16), T.int64(7), T.int64(7), T.int64(32)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        data_pad = T.alloc_buffer((T.int64(1), T.int64(1), T.int64(9), T.int64(9), T.int64(512)))
        conv2d_NCHWc = T.alloc_buffer((T.int64(1), T.int64(16), T.int64(7), T.int64(7), T.int64(32)))
        for n_0_oc_chunk_0_oh_0_ow_0_fused_fused in T.parallel(T.int64(56), annotations={"pragma_auto_unroll_max_step": 512, "pragma_unroll_explicit": 1}):
            for ax0, ax1, ax2, ax3, ax4 in T.grid(T.int64(1), T.int64(1), T.int64(9), T.int64(3), T.int64(512)):
                with T.block("data_pad"):
                    v_i0, v_i1, v_i2 = T.axis.remap("SSS", [ax0, ax1, ax2])
                    v_i3 = T.axis.spatial(T.int64(9), n_0_oc_chunk_0_oh_0_ow_0_fused_fused % T.int64(7) + ax3)
                    v_i4 = T.axis.spatial(T.int64(512), ax4)
                    T.reads(p0[v_i0, v_i1, v_i2 - T.int64(1), v_i3 - T.int64(1), v_i4])
                    T.writes(data_pad[v_i0, v_i1, v_i2, v_i3, v_i4])
                    data_pad[v_i0, v_i1, v_i2, v_i3, v_i4] = T.if_then_else(T.int64(1) <= v_i2 and v_i2 < T.int64(8) and T.int64(1) <= v_i3 and v_i3 < T.int64(8), p0[v_i0, v_i1, v_i2 - T.int64(1), v_i3 - T.int64(1), v_i4], T.float32(0))
            for oc_block_0, n_1, oc_chunk_1, oh_1, ow_1, oc_block_1 in T.grid(T.int64(8), T.int64(1), T.int64(2), T.int64(7), T.int64(1), T.int64(1)):
                for n_2_init, oc_chunk_2_init, oh_2_init, ow_2_init, oc_block_2_init, n_3_init, oc_chunk_3_init, oh_3_init, ow_3_init, oc_block_3_init in T.grid(T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(4), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1)):
                    with T.block("conv2d_NCHWc_init"):
                        v_n = T.axis.spatial(T.int64(1), n_1 + n_2_init + n_3_init)
                        v_oc_chunk = T.axis.spatial(T.int64(16), n_0_oc_chunk_0_oh_0_ow_0_fused_fused // T.int64(7) * T.int64(2) + oc_chunk_1 + oc_chunk_2_init + oc_chunk_3_init)
                        v_oh = T.axis.spatial(T.int64(7), oh_1 + oh_2_init + oh_3_init)
                        v_ow = T.axis.spatial(T.int64(7), n_0_oc_chunk_0_oh_0_ow_0_fused_fused % T.int64(7) + ow_1 + ow_2_init + ow_3_init)
                        v_oc_block = T.axis.spatial(T.int64(32), oc_block_0 * T.int64(4) + oc_block_1 * T.int64(4) + oc_block_2_init + oc_block_3_init)
                        T.reads()
                        T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                        T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                        conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = T.float32(0)
                for ic_0, kh_0, kw_0, n_2, oc_chunk_2, oh_2, ow_2, oc_block_2, ic_1, kh_1, kw_1, n_3, oc_chunk_3, oh_3, ow_3, oc_block_3 in T.grid(T.int64(256), T.int64(3), T.int64(3), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(4), T.int64(2), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1)):
                    with T.block("conv2d_NCHWc_update"):
                        v_n = T.axis.spatial(T.int64(1), n_1 + n_2 + n_3)
                        v_oc_chunk = T.axis.spatial(T.int64(16), n_0_oc_chunk_0_oh_0_ow_0_fused_fused // T.int64(7) * T.int64(2) + oc_chunk_1 + oc_chunk_2 + oc_chunk_3)
                        v_oh = T.axis.spatial(T.int64(7), oh_1 + oh_2 + oh_3)
                        v_ow = T.axis.spatial(T.int64(7), n_0_oc_chunk_0_oh_0_ow_0_fused_fused % T.int64(7) + ow_1 + ow_2 + ow_3)
                        v_oc_block = T.axis.spatial(T.int64(32), oc_block_0 * T.int64(4) + oc_block_1 * T.int64(4) + oc_block_2 + oc_block_3)
                        v_ic = T.axis.reduce(T.int64(512), ic_0 * T.int64(2) + ic_1)
                        v_kh = T.axis.reduce(T.int64(3), kh_0 + kh_1)
                        v_kw = T.axis.reduce(T.int64(3), kw_0 + kw_1)
                        T.reads(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block], data_pad[v_n, v_ic // T.int64(512), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(512)], p1[v_oc_chunk, v_ic // T.int64(512), v_kh, v_kw, v_ic % T.int64(512), v_oc_block])
                        T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                        T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                        conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] + data_pad[v_n, v_ic // T.int64(512), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(512)] * p1[v_oc_chunk, v_ic // T.int64(512), v_kh, v_kw, v_ic % T.int64(512), v_oc_block]
        for ax0_ax1_ax2_ax3_ax4_fused_0 in T.parallel(T.int64(392)):
            for ax0_ax1_ax2_ax3_ax4_fused_1 in T.vectorized(T.int64(64)):
                with T.block("T_relu"):
                    v_ax0 = T.axis.spatial(T.int64(1), T.int64(0))
                    v_ax1 = T.axis.spatial(T.int64(16), (ax0_ax1_ax2_ax3_ax4_fused_0 * T.int64(64) + ax0_ax1_ax2_ax3_ax4_fused_1) // T.int64(1568))
                    v_ax2 = T.axis.spatial(T.int64(7), (ax0_ax1_ax2_ax3_ax4_fused_0 * T.int64(64) + ax0_ax1_ax2_ax3_ax4_fused_1) % T.int64(1568) // T.int64(224))
                    v_ax3 = T.axis.spatial(T.int64(7), (ax0_ax1_ax2_ax3_ax4_fused_0 * T.int64(64) + ax0_ax1_ax2_ax3_ax4_fused_1) % T.int64(224) // T.int64(32))
                    v_ax4 = T.axis.spatial(T.int64(32), (ax0_ax1_ax2_ax3_ax4_fused_0 * T.int64(64) + ax0_ax1_ax2_ax3_ax4_fused_1) % T.int64(32))
                    T.reads(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4], p3[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                    T.writes(T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                    T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.max(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] + p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4] + p3[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], T.float32(0))
b0 = sch.get_block(name="data_pad", func_name="main")
b1 = sch.get_block(name="conv2d_NCHWc", func_name="main")
b2 = sch.get_block(name="T_add", func_name="main")
b3 = sch.get_block(name="T_add_1", func_name="main")
b4 = sch.get_block(name="root", func_name="main")
sch.compute_inline(block=b3)
sch.compute_inline(block=b2)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSRSRS")
l5, l6, l7, l8, l9, l10, l11, l12 = sch.get_loops(block=b1)
v13, v14, v15, v16 = sch.sample_perfect_tile(loop=l5, n=4, max_innermost_factor=64, decision=[1, 1, 1, 1])
l17, l18, l19, l20 = sch.split(loop=l5, factors=[v13, v14, v15, v16], preserve_unit_iters=True)
v21, v22, v23, v24 = sch.sample_perfect_tile(loop=l6, n=4, max_innermost_factor=64, decision=[8, 2, 1, 1])
l25, l26, l27, l28 = sch.split(loop=l6, factors=[v21, v22, v23, v24], preserve_unit_iters=True)
v29, v30, v31, v32 = sch.sample_perfect_tile(loop=l7, n=4, max_innermost_factor=64, decision=[1, 7, 1, 1])
l33, l34, l35, l36 = sch.split(loop=l7, factors=[v29, v30, v31, v32], preserve_unit_iters=True)
v37, v38, v39, v40 = sch.sample_perfect_tile(loop=l8, n=4, max_innermost_factor=64, decision=[7, 1, 1, 1])
l41, l42, l43, l44 = sch.split(loop=l8, factors=[v37, v38, v39, v40], preserve_unit_iters=True)
v45, v46, v47, v48 = sch.sample_perfect_tile(loop=l9, n=4, max_innermost_factor=64, decision=[8, 1, 4, 1])
l49, l50, l51, l52 = sch.split(loop=l9, factors=[v45, v46, v47, v48], preserve_unit_iters=True)
v53, v54 = sch.sample_perfect_tile(loop=l10, n=2, max_innermost_factor=64, decision=[256, 2])
l55, l56 = sch.split(loop=l10, factors=[v53, v54], preserve_unit_iters=True)
v57, v58 = sch.sample_perfect_tile(loop=l11, n=2, max_innermost_factor=64, decision=[3, 1])
l59, l60 = sch.split(loop=l11, factors=[v57, v58], preserve_unit_iters=True)
v61, v62 = sch.sample_perfect_tile(loop=l12, n=2, max_innermost_factor=64, decision=[3, 1])
l63, l64 = sch.split(loop=l12, factors=[v61, v62], preserve_unit_iters=True)
sch.reorder(l17, l25, l33, l41, l49, l18, l26, l34, l42, l50, l55, l59, l63, l19, l27, l35, l43, l51, l56, l60, l64, l20, l28, l36, l44, l52)
sch.annotate(block_or_loop=b4, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b4, ann_key="meta_schedule.vectorize", ann_val=64)
v65 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b4, ann_key="meta_schedule.unroll_explicit", ann_val=v65)
l66 = sch.sample_compute_location(block=b0, decision=3)
sch.compute_at(block=b0, loop=l66, preserve_unit_loops=True, index=-1)
sch.enter_postproc()
b67 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b67, ann_key="meta_schedule.parallel")
sch.unannotate(block_or_loop=b67, ann_key="meta_schedule.vectorize")
sch.unannotate(block_or_loop=b67, ann_key="meta_schedule.unroll_explicit")
b68, b69, b70 = sch.get_child_blocks(b67)
l71, l72, l73, l74, l75, l76, l77, l78, l79 = sch.get_loops(block=b68)
l80 = sch.fuse(l71, l72, l73, l74, preserve_unit_iters=True)
sch.parallel(loop=l80)
l81, l82, l83, l84, l85, l86, l87, l88, l89, l90, l91, l92, l93, l94, l95, l96, l97, l98, l99, l100, l101, l102, l103 = sch.get_loops(block=b69)
l104 = sch.fuse(l81, preserve_unit_iters=True)
sch.parallel(loop=l104)
sch.annotate(block_or_loop=l104, ann_key="pragma_auto_unroll_max_step", ann_val=512)
sch.annotate(block_or_loop=l104, ann_key="pragma_unroll_explicit", ann_val=1)
l105, l106, l107, l108, l109 = sch.get_loops(block=b70)
l110 = sch.fuse(l105, l106, l107, l108, l109, preserve_unit_iters=True)
l111, l112 = sch.split(loop=l110, factors=[None, 64], preserve_unit_iters=True)
sch.parallel(loop=l111)
sch.vectorize(loop=l112)
b113 = sch.get_block(name="conv2d_NCHWc", func_name="main")
l114, l115, l116, l117, l118, l119, l120, l121, l122, l123, l124, l125, l126, l127, l128, l129, l130, l131, l132, l133, l134, l135, l136 = sch.get_loops(block=b113)
b137 = sch.decompose_reduction(block=b113, loop=l121)
2024-04-29 03:57:49 [INFO] [task_scheduler.cc:131] [Task #26: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_3] Trial #22: GFLOPs: 18.5471. Time: 12470.2399 us. Best GFLOPs: 102.3618
2024-04-29 03:57:49 [INFO] [task_scheduler.cc:131] [Task #26: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_3] Trial #23: GFLOPs: 1.7875. Time: 129390.5843 us. Best GFLOPs: 102.3618
2024-04-29 03:57:49 [INFO] [task_scheduler.cc:131] [Task #26: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_3] Trial #24: GFLOPs: 5.2361. Time: 44171.6207 us. Best GFLOPs: 102.3618
2024-04-29 03:57:49 [INFO] [task_scheduler.cc:121] [Task #26: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_3] Trial #25: Error in building:
LocalBuilder: Timeout, killed after 30.0 seconds
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(1), T.int64(7), T.int64(7), T.int64(512)), "float32"), p1: T.Buffer((T.int64(16), T.int64(1), T.int64(3), T.int64(3), T.int64(512), T.int64(32)), "float32"), p2: T.Buffer((T.int64(1), T.int64(16), T.int64(1), T.int64(1), T.int64(32)), "float32"), p3: T.Buffer((T.int64(1), T.int64(16), T.int64(7), T.int64(7), T.int64(32)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(16), T.int64(7), T.int64(7), T.int64(32)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        data_pad = T.alloc_buffer((T.int64(1), T.int64(1), T.int64(9), T.int64(9), T.int64(512)))
        conv2d_NCHWc = T.alloc_buffer((T.int64(1), T.int64(16), T.int64(7), T.int64(7), T.int64(32)))
        for n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused_fused in T.parallel(T.int64(32), annotations={"pragma_auto_unroll_max_step": 512, "pragma_unroll_explicit": 1}):
            for ax0, ax1, ax2, ax3, ax4 in T.grid(T.int64(1), T.int64(1), T.int64(9), T.int64(9), T.int64(512)):
                with T.block("data_pad"):
                    v_i0, v_i1, v_i2, v_i3, v_i4 = T.axis.remap("SSSSS", [ax0, ax1, ax2, ax3, ax4])
                    T.reads(p0[v_i0, v_i1, v_i2 - T.int64(1), v_i3 - T.int64(1), v_i4])
                    T.writes(data_pad[v_i0, v_i1, v_i2, v_i3, v_i4])
                    data_pad[v_i0, v_i1, v_i2, v_i3, v_i4] = T.if_then_else(T.int64(1) <= v_i2 and v_i2 < T.int64(8) and T.int64(1) <= v_i3 and v_i3 < T.int64(8), p0[v_i0, v_i1, v_i2 - T.int64(1), v_i3 - T.int64(1), v_i4], T.float32(0))
            for n_2_init, oc_chunk_2_init, oh_2_init, ow_2_init, oc_block_2_init, n_3_init, oc_chunk_3_init, oh_3_init, ow_3_init in T.grid(T.int64(1), T.int64(8), T.int64(7), T.int64(7), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1)):
                for oc_block_3_fused_init in T.vectorized(T.int64(2)):
                    with T.block("conv2d_NCHWc_init"):
                        v_n = T.axis.spatial(T.int64(1), n_2_init + n_3_init)
                        v_oc_chunk = T.axis.spatial(T.int64(16), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused_fused // T.int64(16) * T.int64(8) + oc_chunk_2_init + oc_chunk_3_init)
                        v_oh = T.axis.spatial(T.int64(7), oh_2_init + oh_3_init)
                        v_ow = T.axis.spatial(T.int64(7), ow_2_init + ow_3_init)
                        v_oc_block = T.axis.spatial(T.int64(32), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused_fused % T.int64(16) * T.int64(2) + oc_block_2_init * T.int64(2) + oc_block_3_fused_init)
                        T.reads()
                        T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                        T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                        conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = T.float32(0)
            for ic_0, kh_0, kw_0, n_2, oc_chunk_2, oh_2, ow_2, oc_block_2, ic_1, kh_1, kw_1, n_3, oc_chunk_3, oh_3, ow_3 in T.grid(T.int64(256), T.int64(3), T.int64(3), T.int64(1), T.int64(8), T.int64(7), T.int64(7), T.int64(1), T.int64(2), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1)):
                for oc_block_3_fused in T.vectorized(T.int64(2)):
                    with T.block("conv2d_NCHWc_update"):
                        v_n = T.axis.spatial(T.int64(1), n_2 + n_3)
                        v_oc_chunk = T.axis.spatial(T.int64(16), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused_fused // T.int64(16) * T.int64(8) + oc_chunk_2 + oc_chunk_3)
                        v_oh = T.axis.spatial(T.int64(7), oh_2 + oh_3)
                        v_ow = T.axis.spatial(T.int64(7), ow_2 + ow_3)
                        v_oc_block = T.axis.spatial(T.int64(32), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused_fused % T.int64(16) * T.int64(2) + oc_block_2 * T.int64(2) + oc_block_3_fused)
                        v_ic = T.axis.reduce(T.int64(512), ic_0 * T.int64(2) + ic_1)
                        v_kh = T.axis.reduce(T.int64(3), kh_0 + kh_1)
                        v_kw = T.axis.reduce(T.int64(3), kw_0 + kw_1)
                        T.reads(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block], data_pad[v_n, v_ic // T.int64(512), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(512)], p1[v_oc_chunk, v_ic // T.int64(512), v_kh, v_kw, v_ic % T.int64(512), v_oc_block])
                        T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                        T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                        conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] + data_pad[v_n, v_ic // T.int64(512), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(512)] * p1[v_oc_chunk, v_ic // T.int64(512), v_kh, v_kw, v_ic % T.int64(512), v_oc_block]
            for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(8), T.int64(7), T.int64(7)):
                for ax4_fused in T.vectorized(T.int64(2)):
                    with T.block("T_relu"):
                        v_ax0 = T.axis.spatial(T.int64(1), ax0)
                        v_ax1 = T.axis.spatial(T.int64(16), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused_fused // T.int64(16) * T.int64(8) + ax1)
                        v_ax2, v_ax3 = T.axis.remap("SS", [ax2, ax3])
                        v_ax4 = T.axis.spatial(T.int64(32), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused_fused % T.int64(16) * T.int64(2) + ax4_fused)
                        T.reads(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4], p3[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                        T.writes(T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                        T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.max(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] + p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4] + p3[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], T.float32(0))
b0 = sch.get_block(name="data_pad", func_name="main")
b1 = sch.get_block(name="conv2d_NCHWc", func_name="main")
b2 = sch.get_block(name="T_add", func_name="main")
b3 = sch.get_block(name="T_add_1", func_name="main")
b4 = sch.get_block(name="root", func_name="main")
sch.compute_inline(block=b3)
sch.compute_inline(block=b2)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSRSRS")
l5, l6, l7, l8, l9, l10, l11, l12 = sch.get_loops(block=b1)
v13, v14, v15, v16 = sch.sample_perfect_tile(loop=l5, n=4, max_innermost_factor=64, decision=[1, 1, 1, 1])
l17, l18, l19, l20 = sch.split(loop=l5, factors=[v13, v14, v15, v16], preserve_unit_iters=True)
v21, v22, v23, v24 = sch.sample_perfect_tile(loop=l6, n=4, max_innermost_factor=64, decision=[2, 1, 8, 1])
l25, l26, l27, l28 = sch.split(loop=l6, factors=[v21, v22, v23, v24], preserve_unit_iters=True)
v29, v30, v31, v32 = sch.sample_perfect_tile(loop=l7, n=4, max_innermost_factor=64, decision=[1, 1, 7, 1])
l33, l34, l35, l36 = sch.split(loop=l7, factors=[v29, v30, v31, v32], preserve_unit_iters=True)
v37, v38, v39, v40 = sch.sample_perfect_tile(loop=l8, n=4, max_innermost_factor=64, decision=[1, 1, 7, 1])
l41, l42, l43, l44 = sch.split(loop=l8, factors=[v37, v38, v39, v40], preserve_unit_iters=True)
v45, v46, v47, v48 = sch.sample_perfect_tile(loop=l9, n=4, max_innermost_factor=64, decision=[2, 8, 1, 2])
l49, l50, l51, l52 = sch.split(loop=l9, factors=[v45, v46, v47, v48], preserve_unit_iters=True)
v53, v54 = sch.sample_perfect_tile(loop=l10, n=2, max_innermost_factor=64, decision=[256, 2])
l55, l56 = sch.split(loop=l10, factors=[v53, v54], preserve_unit_iters=True)
v57, v58 = sch.sample_perfect_tile(loop=l11, n=2, max_innermost_factor=64, decision=[3, 1])
l59, l60 = sch.split(loop=l11, factors=[v57, v58], preserve_unit_iters=True)
v61, v62 = sch.sample_perfect_tile(loop=l12, n=2, max_innermost_factor=64, decision=[3, 1])
l63, l64 = sch.split(loop=l12, factors=[v61, v62], preserve_unit_iters=True)
sch.reorder(l17, l25, l33, l41, l49, l18, l26, l34, l42, l50, l55, l59, l63, l19, l27, l35, l43, l51, l56, l60, l64, l20, l28, l36, l44, l52)
b65, = sch.get_consumers(block=b1)
sch.reverse_compute_at(block=b65, loop=l50, preserve_unit_loops=True, index=-1)
sch.annotate(block_or_loop=b4, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b4, ann_key="meta_schedule.vectorize", ann_val=64)
v66 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b4, ann_key="meta_schedule.unroll_explicit", ann_val=v66)
l67 = sch.sample_compute_location(block=b0, decision=9)
sch.compute_at(block=b0, loop=l67, preserve_unit_loops=True, index=-1)
sch.enter_postproc()
b68 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b68, ann_key="meta_schedule.parallel")
sch.unannotate(block_or_loop=b68, ann_key="meta_schedule.vectorize")
sch.unannotate(block_or_loop=b68, ann_key="meta_schedule.unroll_explicit")
b69, b70, b71 = sch.get_child_blocks(b68)
l72, l73, l74, l75, l76, l77, l78, l79, l80, l81, l82, l83, l84, l85, l86 = sch.get_loops(block=b69)
l87 = sch.fuse(l72, l73, l74, l75, l76, l77, l78, l79, l80, l81, preserve_unit_iters=True)
sch.parallel(loop=l87)
l88, l89, l90, l91, l92, l93, l94, l95, l96, l97, l98, l99, l100, l101, l102, l103, l104 = sch.get_loops(block=b70)
l105 = sch.fuse(l88, preserve_unit_iters=True)
sch.parallel(loop=l105)
l106 = sch.fuse(l104, preserve_unit_iters=True)
sch.vectorize(loop=l106)
sch.annotate(block_or_loop=l105, ann_key="pragma_auto_unroll_max_step", ann_val=512)
sch.annotate(block_or_loop=l105, ann_key="pragma_unroll_explicit", ann_val=1)
l107, l108, l109, l110, l111, l112 = sch.get_loops(block=b71)
l113 = sch.fuse(l112, preserve_unit_iters=True)
sch.vectorize(loop=l113)
b114 = sch.get_block(name="conv2d_NCHWc", func_name="main")
l115, l116, l117, l118, l119, l120, l121, l122, l123, l124, l125, l126, l127, l128, l129, l130, l131 = sch.get_loops(block=b114)
b132 = sch.decompose_reduction(block=b114, loop=l116)
2024-04-29 03:57:49 [INFO] [task_scheduler.cc:131] [Task #26: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_3] Trial #26: GFLOPs: 21.4356. Time: 10789.8183 us. Best GFLOPs: 102.3618
2024-04-29 03:57:49 [INFO] [task_scheduler.cc:131] [Task #26: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_3] Trial #27: GFLOPs: 68.2992. Time: 3386.3711 us. Best GFLOPs: 102.3618
2024-04-29 03:57:49 [INFO] [task_scheduler.cc:131] [Task #26: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_3] Trial #28: GFLOPs: 40.6416. Time: 5690.8810 us. Best GFLOPs: 102.3618
2024-04-29 03:57:49 [INFO] [task_scheduler.cc:131] [Task #26: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_3] Trial #29: GFLOPs: 59.7983. Time: 3867.7732 us. Best GFLOPs: 102.3618
2024-04-29 03:57:49 [INFO] [task_scheduler.cc:131] [Task #26: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_3] Trial #30: GFLOPs: 1.7111. Time: 135165.7620 us. Best GFLOPs: 102.3618
2024-04-29 03:57:49 [INFO] [task_scheduler.cc:131] [Task #26: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_3] Trial #31: GFLOPs: 11.9880. Time: 19293.1378 us. Best GFLOPs: 102.3618
2024-04-29 03:57:49 [INFO] [task_scheduler.cc:131] [Task #26: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_3] Trial #32: GFLOPs: 47.1776. Time: 4902.4637 us. Best GFLOPs: 102.3618
2024-04-29 03:57:49 [INFO] [task_scheduler.cc:131] [Task #26: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_3] Trial #33: GFLOPs: 6.2642. Time: 36921.8600 us. Best GFLOPs: 102.3618
2024-04-29 03:57:49 [INFO] [task_scheduler.cc:131] [Task #26: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_3] Trial #34: GFLOPs: 12.3644. Time: 18705.8943 us. Best GFLOPs: 102.3618
2024-04-29 03:57:49 [INFO] [task_scheduler.cc:121] [Task #26: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_3] Trial #35: Error in building:
LocalBuilder: Timeout, killed after 30.0 seconds
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(1), T.int64(7), T.int64(7), T.int64(512)), "float32"), p1: T.Buffer((T.int64(16), T.int64(1), T.int64(3), T.int64(3), T.int64(512), T.int64(32)), "float32"), p2: T.Buffer((T.int64(1), T.int64(16), T.int64(1), T.int64(1), T.int64(32)), "float32"), p3: T.Buffer((T.int64(1), T.int64(16), T.int64(7), T.int64(7), T.int64(32)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(16), T.int64(7), T.int64(7), T.int64(32)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        data_pad = T.alloc_buffer((T.int64(1), T.int64(1), T.int64(9), T.int64(9), T.int64(512)))
        conv2d_NCHWc = T.alloc_buffer((T.int64(1), T.int64(16), T.int64(7), T.int64(7), T.int64(32)))
        for n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_fused_fused in T.parallel(T.int64(64), annotations={"pragma_auto_unroll_max_step": 512, "pragma_unroll_explicit": 1}):
            for ax0, ax1, ax2, ax3, ax4 in T.grid(T.int64(1), T.int64(1), T.int64(9), T.int64(9), T.int64(512)):
                with T.block("data_pad"):
                    v_i0, v_i1, v_i2, v_i3, v_i4 = T.axis.remap("SSSSS", [ax0, ax1, ax2, ax3, ax4])
                    T.reads(p0[v_i0, v_i1, v_i2 - T.int64(1), v_i3 - T.int64(1), v_i4])
                    T.writes(data_pad[v_i0, v_i1, v_i2, v_i3, v_i4])
                    data_pad[v_i0, v_i1, v_i2, v_i3, v_i4] = T.if_then_else(T.int64(1) <= v_i2 and v_i2 < T.int64(8) and T.int64(1) <= v_i3 and v_i3 < T.int64(8), p0[v_i0, v_i1, v_i2 - T.int64(1), v_i3 - T.int64(1), v_i4], T.float32(0))
            for n_1, oc_chunk_1, oh_1, ow_1, oc_block_1 in T.grid(T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1)):
                for n_2_init, oc_chunk_2_init, oh_2_init, ow_2_init, oc_block_2_init, n_3_init, oc_chunk_3_init, oh_3_init, ow_3_init in T.grid(T.int64(1), T.int64(4), T.int64(7), T.int64(7), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1)):
                    for oc_block_3_fused_init in T.vectorized(T.int64(2)):
                        with T.block("conv2d_NCHWc_init"):
                            v_n = T.axis.spatial(T.int64(1), n_1 + n_2_init + n_3_init)
                            v_oc_chunk = T.axis.spatial(T.int64(16), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_fused_fused // T.int64(16) * T.int64(4) + oc_chunk_1 * T.int64(4) + oc_chunk_2_init + oc_chunk_3_init)
                            v_oh = T.axis.spatial(T.int64(7), oh_1 * T.int64(7) + oh_2_init + oh_3_init)
                            v_ow = T.axis.spatial(T.int64(7), ow_1 * T.int64(7) + ow_2_init + ow_3_init)
                            v_oc_block = T.axis.spatial(T.int64(32), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_fused_fused % T.int64(16) * T.int64(2) + oc_block_1 * T.int64(2) + oc_block_2_init * T.int64(2) + oc_block_3_fused_init)
                            T.reads()
                            T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                            T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                            conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = T.float32(0)
                for ic_0, kh_0, kw_0, n_2, oc_chunk_2, oh_2, ow_2, oc_block_2, ic_1, kh_1, kw_1, n_3, oc_chunk_3, oh_3, ow_3 in T.grid(T.int64(512), T.int64(1), T.int64(1), T.int64(1), T.int64(4), T.int64(7), T.int64(7), T.int64(1), T.int64(1), T.int64(3), T.int64(3), T.int64(1), T.int64(1), T.int64(1), T.int64(1)):
                    for oc_block_3_fused in T.vectorized(T.int64(2)):
                        with T.block("conv2d_NCHWc_update"):
                            v_n = T.axis.spatial(T.int64(1), n_1 + n_2 + n_3)
                            v_oc_chunk = T.axis.spatial(T.int64(16), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_fused_fused // T.int64(16) * T.int64(4) + oc_chunk_1 * T.int64(4) + oc_chunk_2 + oc_chunk_3)
                            v_oh = T.axis.spatial(T.int64(7), oh_1 * T.int64(7) + oh_2 + oh_3)
                            v_ow = T.axis.spatial(T.int64(7), ow_1 * T.int64(7) + ow_2 + ow_3)
                            v_oc_block = T.axis.spatial(T.int64(32), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_fused_fused % T.int64(16) * T.int64(2) + oc_block_1 * T.int64(2) + oc_block_2 * T.int64(2) + oc_block_3_fused)
                            v_ic = T.axis.reduce(T.int64(512), ic_0 + ic_1)
                            v_kh = T.axis.reduce(T.int64(3), kh_0 * T.int64(3) + kh_1)
                            v_kw = T.axis.reduce(T.int64(3), kw_0 * T.int64(3) + kw_1)
                            T.reads(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block], data_pad[v_n, v_ic // T.int64(512), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(512)], p1[v_oc_chunk, v_ic // T.int64(512), v_kh, v_kw, v_ic % T.int64(512), v_oc_block])
                            T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                            T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                            conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] + data_pad[v_n, v_ic // T.int64(512), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(512)] * p1[v_oc_chunk, v_ic // T.int64(512), v_kh, v_kw, v_ic % T.int64(512), v_oc_block]
                for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(4), T.int64(7), T.int64(7)):
                    for ax4_fused in T.vectorized(T.int64(2)):
                        with T.block("T_relu"):
                            v_ax0 = T.axis.spatial(T.int64(1), ax0)
                            v_ax1 = T.axis.spatial(T.int64(16), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_fused_fused // T.int64(16) * T.int64(4) + ax1)
                            v_ax2, v_ax3 = T.axis.remap("SS", [ax2, ax3])
                            v_ax4 = T.axis.spatial(T.int64(32), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_fused_fused % T.int64(16) * T.int64(2) + ax4_fused)
                            T.reads(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4], p3[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                            T.writes(T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                            T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.max(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] + p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4] + p3[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], T.float32(0))
b0 = sch.get_block(name="data_pad", func_name="main")
b1 = sch.get_block(name="conv2d_NCHWc", func_name="main")
b2 = sch.get_block(name="T_add", func_name="main")
b3 = sch.get_block(name="T_add_1", func_name="main")
b4 = sch.get_block(name="root", func_name="main")
sch.compute_inline(block=b3)
sch.compute_inline(block=b2)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSRSRS")
l5, l6, l7, l8, l9, l10, l11, l12 = sch.get_loops(block=b1)
v13, v14, v15, v16 = sch.sample_perfect_tile(loop=l5, n=4, max_innermost_factor=64, decision=[1, 1, 1, 1])
l17, l18, l19, l20 = sch.split(loop=l5, factors=[v13, v14, v15, v16], preserve_unit_iters=True)
v21, v22, v23, v24 = sch.sample_perfect_tile(loop=l6, n=4, max_innermost_factor=64, decision=[4, 1, 4, 1])
l25, l26, l27, l28 = sch.split(loop=l6, factors=[v21, v22, v23, v24], preserve_unit_iters=True)
v29, v30, v31, v32 = sch.sample_perfect_tile(loop=l7, n=4, max_innermost_factor=64, decision=[1, 1, 7, 1])
l33, l34, l35, l36 = sch.split(loop=l7, factors=[v29, v30, v31, v32], preserve_unit_iters=True)
v37, v38, v39, v40 = sch.sample_perfect_tile(loop=l8, n=4, max_innermost_factor=64, decision=[1, 1, 7, 1])
l41, l42, l43, l44 = sch.split(loop=l8, factors=[v37, v38, v39, v40], preserve_unit_iters=True)
v45, v46, v47, v48 = sch.sample_perfect_tile(loop=l9, n=4, max_innermost_factor=64, decision=[16, 1, 1, 2])
l49, l50, l51, l52 = sch.split(loop=l9, factors=[v45, v46, v47, v48], preserve_unit_iters=True)
v53, v54 = sch.sample_perfect_tile(loop=l10, n=2, max_innermost_factor=64, decision=[512, 1])
l55, l56 = sch.split(loop=l10, factors=[v53, v54], preserve_unit_iters=True)
v57, v58 = sch.sample_perfect_tile(loop=l11, n=2, max_innermost_factor=64, decision=[1, 3])
l59, l60 = sch.split(loop=l11, factors=[v57, v58], preserve_unit_iters=True)
v61, v62 = sch.sample_perfect_tile(loop=l12, n=2, max_innermost_factor=64, decision=[1, 3])
l63, l64 = sch.split(loop=l12, factors=[v61, v62], preserve_unit_iters=True)
sch.reorder(l17, l25, l33, l41, l49, l18, l26, l34, l42, l50, l55, l59, l63, l19, l27, l35, l43, l51, l56, l60, l64, l20, l28, l36, l44, l52)
b65, = sch.get_consumers(block=b1)
sch.reverse_compute_at(block=b65, loop=l50, preserve_unit_loops=True, index=-1)
sch.annotate(block_or_loop=b4, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b4, ann_key="meta_schedule.vectorize", ann_val=64)
v66 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b4, ann_key="meta_schedule.unroll_explicit", ann_val=v66)
l67 = sch.sample_compute_location(block=b0, decision=4)
sch.compute_at(block=b0, loop=l67, preserve_unit_loops=True, index=-1)
sch.enter_postproc()
b68 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b68, ann_key="meta_schedule.parallel")
sch.unannotate(block_or_loop=b68, ann_key="meta_schedule.vectorize")
sch.unannotate(block_or_loop=b68, ann_key="meta_schedule.unroll_explicit")
b69, b70, b71 = sch.get_child_blocks(b68)
l72, l73, l74, l75, l76, l77, l78, l79, l80, l81 = sch.get_loops(block=b69)
l82 = sch.fuse(l72, l73, l74, l75, l76, preserve_unit_iters=True)
sch.parallel(loop=l82)
l83, l84, l85, l86, l87, l88, l89, l90, l91, l92, l93, l94, l95, l96, l97, l98, l99, l100, l101, l102, l103, l104 = sch.get_loops(block=b70)
l105 = sch.fuse(l83, preserve_unit_iters=True)
sch.parallel(loop=l105)
l106 = sch.fuse(l104, preserve_unit_iters=True)
sch.vectorize(loop=l106)
sch.annotate(block_or_loop=l105, ann_key="pragma_auto_unroll_max_step", ann_val=512)
sch.annotate(block_or_loop=l105, ann_key="pragma_unroll_explicit", ann_val=1)
l107, l108, l109, l110, l111, l112, l113, l114, l115, l116, l117 = sch.get_loops(block=b71)
l118 = sch.fuse(l117, preserve_unit_iters=True)
sch.vectorize(loop=l118)
b119 = sch.get_block(name="conv2d_NCHWc", func_name="main")
l120, l121, l122, l123, l124, l125, l126, l127, l128, l129, l130, l131, l132, l133, l134, l135, l136, l137, l138, l139, l140, l141 = sch.get_loops(block=b119)
b142 = sch.decompose_reduction(block=b119, loop=l126)
2024-04-29 03:57:49 [INFO] [task_scheduler.cc:131] [Task #26: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_3] Trial #36: GFLOPs: 23.3230. Time: 9916.6673 us. Best GFLOPs: 102.3618
2024-04-29 03:57:49 [INFO] [task_scheduler.cc:131] [Task #26: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_3] Trial #37: GFLOPs: 21.8176. Time: 10600.8877 us. Best GFLOPs: 102.3618
2024-04-29 03:57:49 [INFO] [task_scheduler.cc:131] [Task #26: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_3] Trial #38: GFLOPs: 85.1764. Time: 2715.3811 us. Best GFLOPs: 102.3618
2024-04-29 03:57:49 [INFO] [task_scheduler.cc:131] [Task #26: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_3] Trial #39: GFLOPs: 6.6129. Time: 34975.0627 us. Best GFLOPs: 102.3618
2024-04-29 03:57:49 [INFO] [task_scheduler.cc:131] [Task #26: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_3] Trial #40: GFLOPs: 18.9159. Time: 12227.0787 us. Best GFLOPs: 102.3618
2024-04-29 03:57:49 [INFO] [task_scheduler.cc:131] [Task #26: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_3] Trial #41: GFLOPs: 55.4511. Time: 4170.9948 us. Best GFLOPs: 102.3618
2024-04-29 03:57:49 [INFO] [task_scheduler.cc:131] [Task #26: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_3] Trial #42: GFLOPs: 3.7880. Time: 61057.2737 us. Best GFLOPs: 102.3618
2024-04-29 03:57:49 [INFO] [task_scheduler.cc:131] [Task #26: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_3] Trial #43: GFLOPs: 6.2016. Time: 37294.4967 us. Best GFLOPs: 102.3618
2024-04-29 03:57:49 [INFO] [task_scheduler.cc:131] [Task #26: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_3] Trial #44: GFLOPs: 8.1299. Time: 28448.6780 us. Best GFLOPs: 102.3618
2024-04-29 03:57:49 [INFO] [task_scheduler.cc:131] [Task #26: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_3] Trial #45: GFLOPs: 27.0992. Time: 8534.8020 us. Best GFLOPs: 102.3618
2024-04-29 03:57:49 [INFO] [task_scheduler.cc:131] [Task #26: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_3] Trial #46: GFLOPs: 7.5651. Time: 30572.7703 us. Best GFLOPs: 102.3618
2024-04-29 03:57:49 [INFO] [task_scheduler.cc:131] [Task #26: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_3] Trial #47: GFLOPs: 5.5335. Time: 41797.7950 us. Best GFLOPs: 102.3618
2024-04-29 03:57:49 [INFO] [task_scheduler.cc:131] [Task #26: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_3] Trial #48: GFLOPs: 41.2922. Time: 5601.2093 us. Best GFLOPs: 102.3618
2024-04-29 03:57:49 [INFO] [task_scheduler.cc:131] [Task #26: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_3] Trial #49: GFLOPs: 21.3935. Time: 10811.0703 us. Best GFLOPs: 102.3618
2024-04-29 03:57:49 [INFO] [task_scheduler.cc:131] [Task #26: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_3] Trial #50: GFLOPs: 8.5678. Time: 26994.7103 us. Best GFLOPs: 102.3618
2024-04-29 03:57:49 [INFO] [task_scheduler.cc:131] [Task #26: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_3] Trial #51: GFLOPs: 41.7907. Time: 5534.4017 us. Best GFLOPs: 102.3618
2024-04-29 03:57:49 [INFO] [task_scheduler.cc:131] [Task #26: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_3] Trial #52: GFLOPs: 1.8424. Time: 125537.3773 us. Best GFLOPs: 102.3618
2024-04-29 03:57:49 [INFO] [task_scheduler.cc:121] [Task #26: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_3] Trial #53: Error in building:
LocalBuilder: Timeout, killed after 30.0 seconds
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(1), T.int64(7), T.int64(7), T.int64(512)), "float32"), p1: T.Buffer((T.int64(16), T.int64(1), T.int64(3), T.int64(3), T.int64(512), T.int64(32)), "float32"), p2: T.Buffer((T.int64(1), T.int64(16), T.int64(1), T.int64(1), T.int64(32)), "float32"), p3: T.Buffer((T.int64(1), T.int64(16), T.int64(7), T.int64(7), T.int64(32)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(16), T.int64(7), T.int64(7), T.int64(32)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        data_pad = T.alloc_buffer((T.int64(1), T.int64(1), T.int64(9), T.int64(9), T.int64(512)))
        conv2d_NCHWc = T.alloc_buffer((T.int64(1), T.int64(16), T.int64(7), T.int64(7), T.int64(32)))
        for i0_i1_i2_i3_i4_fused in T.parallel(T.int64(41472)):
            with T.block("data_pad"):
                v_i0 = T.axis.spatial(T.int64(1), T.int64(0))
                v_i1 = T.axis.spatial(T.int64(1), T.int64(0))
                v_i2 = T.axis.spatial(T.int64(9), i0_i1_i2_i3_i4_fused // T.int64(4608))
                v_i3 = T.axis.spatial(T.int64(9), i0_i1_i2_i3_i4_fused % T.int64(4608) // T.int64(512))
                v_i4 = T.axis.spatial(T.int64(512), i0_i1_i2_i3_i4_fused % T.int64(512))
                T.reads(p0[v_i0, v_i1, v_i2 - T.int64(1), v_i3 - T.int64(1), v_i4])
                T.writes(data_pad[v_i0, v_i1, v_i2, v_i3, v_i4])
                data_pad[v_i0, v_i1, v_i2, v_i3, v_i4] = T.if_then_else(T.int64(1) <= v_i2 and v_i2 < T.int64(8) and T.int64(1) <= v_i3 and v_i3 < T.int64(8), p0[v_i0, v_i1, v_i2 - T.int64(1), v_i3 - T.int64(1), v_i4], T.float32(0))
        for n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused in T.parallel(T.int64(224), annotations={"pragma_auto_unroll_max_step": 512, "pragma_unroll_explicit": 1}):
            for n_2_init, oc_chunk_2_init, oh_2_init, ow_2_init, oc_block_2_init, n_3_init, oc_chunk_3_init, oh_3_init, ow_3_init in T.grid(T.int64(1), T.int64(2), T.int64(1), T.int64(1), T.int64(2), T.int64(1), T.int64(1), T.int64(1), T.int64(7)):
                for oc_block_3_fused_init in T.vectorized(T.int64(4)):
                    with T.block("conv2d_NCHWc_init"):
                        v_n = T.axis.spatial(T.int64(1), n_2_init + n_3_init)
                        v_oc_chunk = T.axis.spatial(T.int64(16), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused // T.int64(56) * T.int64(4) + n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused % T.int64(14) // T.int64(7) * T.int64(2) + oc_chunk_2_init + oc_chunk_3_init)
                        v_oh = T.axis.spatial(T.int64(7), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused % T.int64(7) + oh_2_init + oh_3_init)
                        v_ow = T.axis.spatial(T.int64(7), ow_2_init * T.int64(7) + ow_3_init)
                        v_oc_block = T.axis.spatial(T.int64(32), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused % T.int64(56) // T.int64(14) * T.int64(8) + oc_block_2_init * T.int64(4) + oc_block_3_fused_init)
                        T.reads()
                        T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                        T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                        conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = T.float32(0)
            for ic_0, kh_0, kw_0, n_2, oc_chunk_2, oh_2, ow_2, oc_block_2, ic_1, kh_1, kw_1, n_3, oc_chunk_3, oh_3, ow_3 in T.grid(T.int64(64), T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(1), T.int64(1), T.int64(2), T.int64(8), T.int64(3), T.int64(3), T.int64(1), T.int64(1), T.int64(1), T.int64(7)):
                for oc_block_3_fused in T.vectorized(T.int64(4)):
                    with T.block("conv2d_NCHWc_update"):
                        v_n = T.axis.spatial(T.int64(1), n_2 + n_3)
                        v_oc_chunk = T.axis.spatial(T.int64(16), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused // T.int64(56) * T.int64(4) + n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused % T.int64(14) // T.int64(7) * T.int64(2) + oc_chunk_2 + oc_chunk_3)
                        v_oh = T.axis.spatial(T.int64(7), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused % T.int64(7) + oh_2 + oh_3)
                        v_ow = T.axis.spatial(T.int64(7), ow_2 * T.int64(7) + ow_3)
                        v_oc_block = T.axis.spatial(T.int64(32), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused % T.int64(56) // T.int64(14) * T.int64(8) + oc_block_2 * T.int64(4) + oc_block_3_fused)
                        v_ic = T.axis.reduce(T.int64(512), ic_0 * T.int64(8) + ic_1)
                        v_kh = T.axis.reduce(T.int64(3), kh_0 * T.int64(3) + kh_1)
                        v_kw = T.axis.reduce(T.int64(3), kw_0 * T.int64(3) + kw_1)
                        T.reads(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block], data_pad[v_n, v_ic // T.int64(512), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(512)], p1[v_oc_chunk, v_ic // T.int64(512), v_kh, v_kw, v_ic % T.int64(512), v_oc_block])
                        T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                        T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                        conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] + data_pad[v_n, v_ic // T.int64(512), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(512)] * p1[v_oc_chunk, v_ic // T.int64(512), v_kh, v_kw, v_ic % T.int64(512), v_oc_block]
        for ax0_ax1_ax2_ax3_ax4_fused_0 in T.parallel(T.int64(392)):
            for ax0_ax1_ax2_ax3_ax4_fused_1 in T.vectorized(T.int64(64)):
                with T.block("T_relu"):
                    v_ax0 = T.axis.spatial(T.int64(1), T.int64(0))
                    v_ax1 = T.axis.spatial(T.int64(16), (ax0_ax1_ax2_ax3_ax4_fused_0 * T.int64(64) + ax0_ax1_ax2_ax3_ax4_fused_1) // T.int64(1568))
                    v_ax2 = T.axis.spatial(T.int64(7), (ax0_ax1_ax2_ax3_ax4_fused_0 * T.int64(64) + ax0_ax1_ax2_ax3_ax4_fused_1) % T.int64(1568) // T.int64(224))
                    v_ax3 = T.axis.spatial(T.int64(7), (ax0_ax1_ax2_ax3_ax4_fused_0 * T.int64(64) + ax0_ax1_ax2_ax3_ax4_fused_1) % T.int64(224) // T.int64(32))
                    v_ax4 = T.axis.spatial(T.int64(32), (ax0_ax1_ax2_ax3_ax4_fused_0 * T.int64(64) + ax0_ax1_ax2_ax3_ax4_fused_1) % T.int64(32))
                    T.reads(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4], p3[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                    T.writes(T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                    T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.max(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] + p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4] + p3[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], T.float32(0))
b0 = sch.get_block(name="data_pad", func_name="main")
b1 = sch.get_block(name="conv2d_NCHWc", func_name="main")
b2 = sch.get_block(name="T_add", func_name="main")
b3 = sch.get_block(name="T_add_1", func_name="main")
b4 = sch.get_block(name="root", func_name="main")
sch.compute_inline(block=b3)
sch.compute_inline(block=b2)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSRSRS")
l5, l6, l7, l8, l9, l10, l11, l12 = sch.get_loops(block=b1)
v13, v14, v15, v16 = sch.sample_perfect_tile(loop=l5, n=4, max_innermost_factor=64, decision=[1, 1, 1, 1])
l17, l18, l19, l20 = sch.split(loop=l5, factors=[v13, v14, v15, v16], preserve_unit_iters=True)
v21, v22, v23, v24 = sch.sample_perfect_tile(loop=l6, n=4, max_innermost_factor=64, decision=[4, 2, 2, 1])
l25, l26, l27, l28 = sch.split(loop=l6, factors=[v21, v22, v23, v24], preserve_unit_iters=True)
v29, v30, v31, v32 = sch.sample_perfect_tile(loop=l7, n=4, max_innermost_factor=64, decision=[1, 7, 1, 1])
l33, l34, l35, l36 = sch.split(loop=l7, factors=[v29, v30, v31, v32], preserve_unit_iters=True)
v37, v38, v39, v40 = sch.sample_perfect_tile(loop=l8, n=4, max_innermost_factor=64, decision=[1, 1, 1, 7])
l41, l42, l43, l44 = sch.split(loop=l8, factors=[v37, v38, v39, v40], preserve_unit_iters=True)
v45, v46, v47, v48 = sch.sample_perfect_tile(loop=l9, n=4, max_innermost_factor=64, decision=[4, 1, 2, 4])
l49, l50, l51, l52 = sch.split(loop=l9, factors=[v45, v46, v47, v48], preserve_unit_iters=True)
v53, v54 = sch.sample_perfect_tile(loop=l10, n=2, max_innermost_factor=64, decision=[64, 8])
l55, l56 = sch.split(loop=l10, factors=[v53, v54], preserve_unit_iters=True)
v57, v58 = sch.sample_perfect_tile(loop=l11, n=2, max_innermost_factor=64, decision=[1, 3])
l59, l60 = sch.split(loop=l11, factors=[v57, v58], preserve_unit_iters=True)
v61, v62 = sch.sample_perfect_tile(loop=l12, n=2, max_innermost_factor=64, decision=[1, 3])
l63, l64 = sch.split(loop=l12, factors=[v61, v62], preserve_unit_iters=True)
sch.reorder(l17, l25, l33, l41, l49, l18, l26, l34, l42, l50, l55, l59, l63, l19, l27, l35, l43, l51, l56, l60, l64, l20, l28, l36, l44, l52)
sch.annotate(block_or_loop=b4, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b4, ann_key="meta_schedule.vectorize", ann_val=64)
v65 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b4, ann_key="meta_schedule.unroll_explicit", ann_val=v65)
l66 = sch.sample_compute_location(block=b0, decision=-1)
sch.compute_at(block=b0, loop=l66, preserve_unit_loops=True, index=-1)
sch.enter_postproc()
b67 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b67, ann_key="meta_schedule.parallel")
sch.unannotate(block_or_loop=b67, ann_key="meta_schedule.vectorize")
sch.unannotate(block_or_loop=b67, ann_key="meta_schedule.unroll_explicit")
b68, b69, b70 = sch.get_child_blocks(b67)
l71, l72, l73, l74, l75 = sch.get_loops(block=b68)
l76 = sch.fuse(l71, l72, l73, l74, l75, preserve_unit_iters=True)
sch.parallel(loop=l76)
l77, l78, l79, l80, l81, l82, l83, l84, l85, l86, l87, l88, l89, l90, l91, l92, l93, l94, l95, l96, l97, l98, l99, l100, l101, l102 = sch.get_loops(block=b69)
l103 = sch.fuse(l77, l78, l79, l80, l81, l82, l83, l84, l85, l86, preserve_unit_iters=True)
sch.parallel(loop=l103)
l104 = sch.fuse(l102, preserve_unit_iters=True)
sch.vectorize(loop=l104)
sch.annotate(block_or_loop=l103, ann_key="pragma_auto_unroll_max_step", ann_val=512)
sch.annotate(block_or_loop=l103, ann_key="pragma_unroll_explicit", ann_val=1)
l105, l106, l107, l108, l109 = sch.get_loops(block=b70)
l110 = sch.fuse(l105, l106, l107, l108, l109, preserve_unit_iters=True)
l111, l112 = sch.split(loop=l110, factors=[None, 64], preserve_unit_iters=True)
sch.parallel(loop=l111)
sch.vectorize(loop=l112)
b113 = sch.get_block(name="conv2d_NCHWc", func_name="main")
l114, l115, l116, l117, l118, l119, l120, l121, l122, l123, l124, l125, l126, l127, l128, l129, l130 = sch.get_loops(block=b113)
b131 = sch.decompose_reduction(block=b113, loop=l115)
2024-04-29 03:57:49 [INFO] [task_scheduler.cc:131] [Task #26: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_3] Trial #54: GFLOPs: 83.8292. Time: 2759.0183 us. Best GFLOPs: 102.3618
2024-04-29 03:57:49 [INFO] [task_scheduler.cc:131] [Task #26: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_3] Trial #55: GFLOPs: 2.0590. Time: 112331.4007 us. Best GFLOPs: 102.3618
2024-04-29 03:57:49 [INFO] [task_scheduler.cc:131] [Task #26: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_3] Trial #56: GFLOPs: 29.9066. Time: 7733.6218 us. Best GFLOPs: 102.3618
2024-04-29 03:57:49 [INFO] [task_scheduler.cc:131] [Task #26: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_3] Trial #57: GFLOPs: 6.6940. Time: 34551.2187 us. Best GFLOPs: 102.3618
2024-04-29 03:57:49 [INFO] [task_scheduler.cc:131] [Task #26: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_3] Trial #58: GFLOPs: 5.6665. Time: 40816.1847 us. Best GFLOPs: 102.3618
2024-04-29 03:57:49 [INFO] [task_scheduler.cc:131] [Task #26: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_3] Trial #59: GFLOPs: 30.0602. Time: 7694.1055 us. Best GFLOPs: 102.3618
2024-04-29 03:57:49 [INFO] [task_scheduler.cc:131] [Task #26: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_3] Trial #60: GFLOPs: 3.7506. Time: 61666.9677 us. Best GFLOPs: 102.3618
2024-04-29 03:57:49 [INFO] [task_scheduler.cc:131] [Task #26: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_3] Trial #61: GFLOPs: 84.1878. Time: 2747.2644 us. Best GFLOPs: 102.3618
2024-04-29 03:57:49 [INFO] [task_scheduler.cc:131] [Task #26: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_3] Trial #62: GFLOPs: 6.6956. Time: 34543.2350 us. Best GFLOPs: 102.3618
2024-04-29 03:57:49 [INFO] [task_scheduler.cc:131] [Task #26: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_3] Trial #63: GFLOPs: 8.6525. Time: 26730.4382 us. Best GFLOPs: 102.3618
2024-04-29 03:57:49 [INFO] [task_scheduler.cc:121] [Task #26: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_3] Trial #64: Error in building:
LocalBuilder: Timeout, killed after 30.0 seconds
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(1), T.int64(7), T.int64(7), T.int64(512)), "float32"), p1: T.Buffer((T.int64(16), T.int64(1), T.int64(3), T.int64(3), T.int64(512), T.int64(32)), "float32"), p2: T.Buffer((T.int64(1), T.int64(16), T.int64(1), T.int64(1), T.int64(32)), "float32"), p3: T.Buffer((T.int64(1), T.int64(16), T.int64(7), T.int64(7), T.int64(32)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(16), T.int64(7), T.int64(7), T.int64(32)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        data_pad = T.alloc_buffer((T.int64(1), T.int64(1), T.int64(9), T.int64(9), T.int64(512)))
        conv2d_NCHWc = T.alloc_buffer((T.int64(1), T.int64(16), T.int64(7), T.int64(7), T.int64(32)))
        for n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_fused_fused in T.parallel(T.int64(4), annotations={"pragma_auto_unroll_max_step": 512, "pragma_unroll_explicit": 1}):
            for n_1, oc_chunk_1, oh_1, ow_1, oc_block_1 in T.grid(T.int64(1), T.int64(1), T.int64(7), T.int64(1), T.int64(8)):
                for ax0, ax1, ax2, ax3, ax4 in T.grid(T.int64(1), T.int64(1), T.int64(3), T.int64(9), T.int64(512)):
                    with T.block("data_pad"):
                        v_i0, v_i1 = T.axis.remap("SS", [ax0, ax1])
                        v_i2 = T.axis.spatial(T.int64(9), oh_1 + ax2)
                        v_i3, v_i4 = T.axis.remap("SS", [ax3, ax4])
                        T.reads(p0[v_i0, v_i1, v_i2 - T.int64(1), v_i3 - T.int64(1), v_i4])
                        T.writes(data_pad[v_i0, v_i1, v_i2, v_i3, v_i4])
                        data_pad[v_i0, v_i1, v_i2, v_i3, v_i4] = T.if_then_else(T.int64(1) <= v_i2 and v_i2 < T.int64(8) and T.int64(1) <= v_i3 and v_i3 < T.int64(8), p0[v_i0, v_i1, v_i2 - T.int64(1), v_i3 - T.int64(1), v_i4], T.float32(0))
                for n_2_init, oc_chunk_2_init, oh_2_init, ow_2_init, oc_block_2_init, n_3_init, oc_chunk_3_init, oh_3_init, ow_3_init, oc_block_3_init in T.grid(T.int64(1), T.int64(16), T.int64(1), T.int64(7), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1)):
                    with T.block("conv2d_NCHWc_init"):
                        v_n = T.axis.spatial(T.int64(1), n_1 + n_2_init + n_3_init)
                        v_oc_chunk = T.axis.spatial(T.int64(16), oc_chunk_1 * T.int64(16) + oc_chunk_2_init + oc_chunk_3_init)
                        v_oh = T.axis.spatial(T.int64(7), oh_1 + oh_2_init + oh_3_init)
                        v_ow = T.axis.spatial(T.int64(7), ow_1 * T.int64(7) + ow_2_init + ow_3_init)
                        v_oc_block = T.axis.spatial(T.int64(32), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_fused_fused * T.int64(8) + oc_block_1 + oc_block_2_init + oc_block_3_init)
                        T.reads()
                        T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                        T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                        conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = T.float32(0)
                for ic_0, kh_0, kw_0, n_2, oc_chunk_2, oh_2, ow_2, oc_block_2, ic_1, kh_1, kw_1, n_3, oc_chunk_3, oh_3, ow_3, oc_block_3 in T.grid(T.int64(256), T.int64(1), T.int64(3), T.int64(1), T.int64(16), T.int64(1), T.int64(7), T.int64(1), T.int64(2), T.int64(3), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1)):
                    with T.block("conv2d_NCHWc_update"):
                        v_n = T.axis.spatial(T.int64(1), n_1 + n_2 + n_3)
                        v_oc_chunk = T.axis.spatial(T.int64(16), oc_chunk_1 * T.int64(16) + oc_chunk_2 + oc_chunk_3)
                        v_oh = T.axis.spatial(T.int64(7), oh_1 + oh_2 + oh_3)
                        v_ow = T.axis.spatial(T.int64(7), ow_1 * T.int64(7) + ow_2 + ow_3)
                        v_oc_block = T.axis.spatial(T.int64(32), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_fused_fused * T.int64(8) + oc_block_1 + oc_block_2 + oc_block_3)
                        v_ic = T.axis.reduce(T.int64(512), ic_0 * T.int64(2) + ic_1)
                        v_kh = T.axis.reduce(T.int64(3), kh_0 * T.int64(3) + kh_1)
                        v_kw = T.axis.reduce(T.int64(3), kw_0 + kw_1)
                        T.reads(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block], data_pad[v_n, v_ic // T.int64(512), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(512)], p1[v_oc_chunk, v_ic // T.int64(512), v_kh, v_kw, v_ic % T.int64(512), v_oc_block])
                        T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                        T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                        conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] + data_pad[v_n, v_ic // T.int64(512), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(512)] * p1[v_oc_chunk, v_ic // T.int64(512), v_kh, v_kw, v_ic % T.int64(512), v_oc_block]
            for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(16), T.int64(7), T.int64(7)):
                for ax4_fused in T.vectorized(T.int64(8)):
                    with T.block("T_relu"):
                        v_ax0, v_ax1, v_ax2, v_ax3 = T.axis.remap("SSSS", [ax0, ax1, ax2, ax3])
                        v_ax4 = T.axis.spatial(T.int64(32), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_fused_fused * T.int64(8) + ax4_fused)
                        T.reads(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4], p3[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                        T.writes(T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                        T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.max(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] + p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4] + p3[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], T.float32(0))
b0 = sch.get_block(name="data_pad", func_name="main")
b1 = sch.get_block(name="conv2d_NCHWc", func_name="main")
b2 = sch.get_block(name="T_add", func_name="main")
b3 = sch.get_block(name="T_add_1", func_name="main")
b4 = sch.get_block(name="root", func_name="main")
sch.compute_inline(block=b3)
sch.compute_inline(block=b2)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSRSRS")
l5, l6, l7, l8, l9, l10, l11, l12 = sch.get_loops(block=b1)
v13, v14, v15, v16 = sch.sample_perfect_tile(loop=l5, n=4, max_innermost_factor=64, decision=[1, 1, 1, 1])
l17, l18, l19, l20 = sch.split(loop=l5, factors=[v13, v14, v15, v16], preserve_unit_iters=True)
v21, v22, v23, v24 = sch.sample_perfect_tile(loop=l6, n=4, max_innermost_factor=64, decision=[1, 1, 16, 1])
l25, l26, l27, l28 = sch.split(loop=l6, factors=[v21, v22, v23, v24], preserve_unit_iters=True)
v29, v30, v31, v32 = sch.sample_perfect_tile(loop=l7, n=4, max_innermost_factor=64, decision=[1, 7, 1, 1])
l33, l34, l35, l36 = sch.split(loop=l7, factors=[v29, v30, v31, v32], preserve_unit_iters=True)
v37, v38, v39, v40 = sch.sample_perfect_tile(loop=l8, n=4, max_innermost_factor=64, decision=[1, 1, 7, 1])
l41, l42, l43, l44 = sch.split(loop=l8, factors=[v37, v38, v39, v40], preserve_unit_iters=True)
v45, v46, v47, v48 = sch.sample_perfect_tile(loop=l9, n=4, max_innermost_factor=64, decision=[4, 8, 1, 1])
l49, l50, l51, l52 = sch.split(loop=l9, factors=[v45, v46, v47, v48], preserve_unit_iters=True)
v53, v54 = sch.sample_perfect_tile(loop=l10, n=2, max_innermost_factor=64, decision=[256, 2])
l55, l56 = sch.split(loop=l10, factors=[v53, v54], preserve_unit_iters=True)
v57, v58 = sch.sample_perfect_tile(loop=l11, n=2, max_innermost_factor=64, decision=[1, 3])
l59, l60 = sch.split(loop=l11, factors=[v57, v58], preserve_unit_iters=True)
v61, v62 = sch.sample_perfect_tile(loop=l12, n=2, max_innermost_factor=64, decision=[3, 1])
l63, l64 = sch.split(loop=l12, factors=[v61, v62], preserve_unit_iters=True)
sch.reorder(l17, l25, l33, l41, l49, l18, l26, l34, l42, l50, l55, l59, l63, l19, l27, l35, l43, l51, l56, l60, l64, l20, l28, l36, l44, l52)
b65, = sch.get_consumers(block=b1)
sch.reverse_compute_at(block=b65, loop=l49, preserve_unit_loops=True, index=-1)
sch.annotate(block_or_loop=b4, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b4, ann_key="meta_schedule.vectorize", ann_val=64)
v66 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b4, ann_key="meta_schedule.unroll_explicit", ann_val=v66)
l67 = sch.sample_compute_location(block=b0, decision=9)
sch.compute_at(block=b0, loop=l67, preserve_unit_loops=True, index=-1)
sch.enter_postproc()
b68 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b68, ann_key="meta_schedule.parallel")
sch.unannotate(block_or_loop=b68, ann_key="meta_schedule.vectorize")
sch.unannotate(block_or_loop=b68, ann_key="meta_schedule.unroll_explicit")
b69, b70, b71 = sch.get_child_blocks(b68)
l72, l73, l74, l75, l76, l77, l78, l79, l80, l81, l82, l83, l84, l85, l86 = sch.get_loops(block=b69)
l87 = sch.fuse(l72, l73, l74, l75, l76, preserve_unit_iters=True)
sch.parallel(loop=l87)
l88, l89, l90, l91, l92, l93, l94, l95, l96, l97, l98, l99, l100, l101, l102, l103, l104, l105, l106, l107, l108, l109 = sch.get_loops(block=b70)
l110 = sch.fuse(l88, preserve_unit_iters=True)
sch.parallel(loop=l110)
sch.annotate(block_or_loop=l110, ann_key="pragma_auto_unroll_max_step", ann_val=512)
sch.annotate(block_or_loop=l110, ann_key="pragma_unroll_explicit", ann_val=1)
l111, l112, l113, l114, l115, l116 = sch.get_loops(block=b71)
l117 = sch.fuse(l116, preserve_unit_iters=True)
sch.vectorize(loop=l117)
b118 = sch.get_block(name="conv2d_NCHWc", func_name="main")
l119, l120, l121, l122, l123, l124, l125, l126, l127, l128, l129, l130, l131, l132, l133, l134, l135, l136, l137, l138, l139, l140 = sch.get_loops(block=b118)
b141 = sch.decompose_reduction(block=b118, loop=l125)
2024-04-29 04:00:20 [INFO] [evolutionary_search.cc:713] Generating candidates......
2024-04-29 04:00:21 [INFO] [evolutionary_search.cc:715] Picked top 55 candidate(s) from database
2024-04-29 04:00:26 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x36363d8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x4388aa8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x3310908)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x3246458)]: 0 failure(s)
2024-04-29 04:00:26 [INFO] [evolutionary_search.cc:723] Sampled 457 candidate(s)
2024-04-29 04:00:37 [INFO] [evolutionary_search.cc:621] Evolve iter #0 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x36363d8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x4388aa8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x3310908)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x3246458)]: 0 failure(s)
2024-04-29 04:00:51 [INFO] [evolutionary_search.cc:621] Evolve iter #1 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x36363d8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x4388aa8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x3310908)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x3246458)]: 0 failure(s)
2024-04-29 04:01:02 [INFO] [evolutionary_search.cc:621] Evolve iter #2 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x36363d8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x4388aa8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x3310908)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x3246458)]: 0 failure(s)
2024-04-29 04:01:13 [INFO] [evolutionary_search.cc:621] Evolve iter #3 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x36363d8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x4388aa8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x3310908)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x3246458)]: 0 failure(s)
2024-04-29 04:01:20 [INFO] [evolutionary_search.cc:649] Scores of the best 64 candidates:
[1 : 16]:	0.8437  0.8423  0.8337  0.8337  0.8244  0.8230  0.8176  0.8120  0.8101  0.8072  0.8071  0.8037  0.8035  0.7967  0.7954  0.7951
[17 : 32]:	0.7938  0.7921  0.7886  0.7871  0.7825  0.7799  0.7790  0.7787  0.7770  0.7702  0.7640  0.7636  0.7596  0.7587  0.7581  0.7479
[33 : 48]:	0.7477  0.7411  0.7386  0.7381  0.7372  0.7355  0.7352  0.7337  0.7334  0.7303  0.7300  0.7287  0.7287  0.7253  0.7253  0.7252
[49 : 64]:	0.7239  0.7238  0.7223  0.7223  0.7223  0.7223  0.7223  0.7218  0.7204  0.7204  0.7180  0.7175  0.7147  0.7146  0.7115  0.7098
2024-04-29 04:01:20 [INFO] [evolutionary_search.cc:727] Got 64 candidate(s) with evolutionary search
2024-04-29 04:01:20 [INFO] [evolutionary_search.cc:730] Sending 64 candidates(s) for measurement
2024-04-29 04:03:11 [INFO] [task_scheduler.cc:131] [Task #26: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_3] Trial #65: GFLOPs: 18.3601. Time: 12597.2462 us. Best GFLOPs: 102.3618
2024-04-29 04:03:11 [INFO] [task_scheduler.cc:131] [Task #26: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_3] Trial #66: GFLOPs: 46.1701. Time: 5009.4388 us. Best GFLOPs: 102.3618
2024-04-29 04:03:11 [INFO] [task_scheduler.cc:131] [Task #26: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_3] Trial #67: GFLOPs: 62.7665. Time: 3684.8710 us. Best GFLOPs: 102.3618
2024-04-29 04:03:11 [INFO] [task_scheduler.cc:131] [Task #26: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_3] Trial #68: GFLOPs: 108.5081. Time: 2131.5112 us. Best GFLOPs: 108.5081
2024-04-29 04:03:11 [INFO] [task_scheduler.cc:121] [Task #26: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_3] Trial #69: Error in building:
LocalBuilder: Timeout, killed after 30.0 seconds
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(1), T.int64(7), T.int64(7), T.int64(512)), "float32"), p1: T.Buffer((T.int64(16), T.int64(1), T.int64(3), T.int64(3), T.int64(512), T.int64(32)), "float32"), p2: T.Buffer((T.int64(1), T.int64(16), T.int64(1), T.int64(1), T.int64(32)), "float32"), p3: T.Buffer((T.int64(1), T.int64(16), T.int64(7), T.int64(7), T.int64(32)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(16), T.int64(7), T.int64(7), T.int64(32)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        data_pad = T.alloc_buffer((T.int64(1), T.int64(1), T.int64(9), T.int64(9), T.int64(512)))
        conv2d_NCHWc = T.alloc_buffer((T.int64(1), T.int64(16), T.int64(7), T.int64(7), T.int64(32)))
        for n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_fused_fused in T.parallel(T.int64(112), annotations={"pragma_auto_unroll_max_step": 512, "pragma_unroll_explicit": 1}):
            for ax0, ax1, ax2, ax3, ax4 in T.grid(T.int64(1), T.int64(1), T.int64(9), T.int64(3), T.int64(512)):
                with T.block("data_pad"):
                    v_i0, v_i1, v_i2 = T.axis.remap("SSS", [ax0, ax1, ax2])
                    v_i3 = T.axis.spatial(T.int64(9), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_fused_fused % T.int64(7) + ax3)
                    v_i4 = T.axis.spatial(T.int64(512), ax4)
                    T.reads(p0[v_i0, v_i1, v_i2 - T.int64(1), v_i3 - T.int64(1), v_i4])
                    T.writes(data_pad[v_i0, v_i1, v_i2, v_i3, v_i4])
                    data_pad[v_i0, v_i1, v_i2, v_i3, v_i4] = T.if_then_else(T.int64(1) <= v_i2 and v_i2 < T.int64(8) and T.int64(1) <= v_i3 and v_i3 < T.int64(8), p0[v_i0, v_i1, v_i2 - T.int64(1), v_i3 - T.int64(1), v_i4], T.float32(0))
            for oc_block_1 in range(T.int64(2)):
                for n_2_init, oc_chunk_2_init, oh_2_init, ow_2_init, oc_block_2_init, n_3_init, oc_chunk_3_init, oh_3_init, ow_3_init, oc_block_3_init in T.grid(T.int64(1), T.int64(1), T.int64(7), T.int64(1), T.int64(4), T.int64(1), T.int64(4), T.int64(1), T.int64(1), T.int64(1)):
                    with T.block("conv2d_NCHWc_init"):
                        v_n = T.axis.spatial(T.int64(1), n_2_init + n_3_init)
                        v_oc_chunk = T.axis.spatial(T.int64(16), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_fused_fused // T.int64(28) * T.int64(4) + oc_chunk_2_init * T.int64(4) + oc_chunk_3_init)
                        v_oh = T.axis.spatial(T.int64(7), oh_2_init + oh_3_init)
                        v_ow = T.axis.spatial(T.int64(7), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_fused_fused % T.int64(7) + ow_2_init + ow_3_init)
                        v_oc_block = T.axis.spatial(T.int64(32), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_fused_fused % T.int64(28) // T.int64(7) * T.int64(8) + oc_block_1 * T.int64(4) + oc_block_2_init + oc_block_3_init)
                        T.reads()
                        T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                        T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                        conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = T.float32(0)
                for ic_0, kh_0, kw_0, n_2, oc_chunk_2, oh_2, ow_2, oc_block_2, ic_1, kh_1, kw_1, n_3, oc_chunk_3, oh_3, ow_3, oc_block_3 in T.grid(T.int64(64), T.int64(1), T.int64(3), T.int64(1), T.int64(1), T.int64(7), T.int64(1), T.int64(4), T.int64(8), T.int64(3), T.int64(1), T.int64(1), T.int64(4), T.int64(1), T.int64(1), T.int64(1)):
                    with T.block("conv2d_NCHWc_update"):
                        v_n = T.axis.spatial(T.int64(1), n_2 + n_3)
                        v_oc_chunk = T.axis.spatial(T.int64(16), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_fused_fused // T.int64(28) * T.int64(4) + oc_chunk_2 * T.int64(4) + oc_chunk_3)
                        v_oh = T.axis.spatial(T.int64(7), oh_2 + oh_3)
                        v_ow = T.axis.spatial(T.int64(7), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_fused_fused % T.int64(7) + ow_2 + ow_3)
                        v_oc_block = T.axis.spatial(T.int64(32), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_fused_fused % T.int64(28) // T.int64(7) * T.int64(8) + oc_block_1 * T.int64(4) + oc_block_2 + oc_block_3)
                        v_ic = T.axis.reduce(T.int64(512), ic_0 * T.int64(8) + ic_1)
                        v_kh = T.axis.reduce(T.int64(3), kh_0 * T.int64(3) + kh_1)
                        v_kw = T.axis.reduce(T.int64(3), kw_0 + kw_1)
                        T.reads(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block], data_pad[v_n, v_ic // T.int64(512), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(512)], p1[v_oc_chunk, v_ic // T.int64(512), v_kh, v_kw, v_ic % T.int64(512), v_oc_block])
                        T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                        T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                        conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] + data_pad[v_n, v_ic // T.int64(512), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(512)] * p1[v_oc_chunk, v_ic // T.int64(512), v_kh, v_kw, v_ic % T.int64(512), v_oc_block]
                for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(4), T.int64(7), T.int64(1)):
                    for ax4_fused in T.vectorized(T.int64(4)):
                        with T.block("T_relu"):
                            v_ax0 = T.axis.spatial(T.int64(1), ax0)
                            v_ax1 = T.axis.spatial(T.int64(16), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_fused_fused // T.int64(28) * T.int64(4) + ax1)
                            v_ax2 = T.axis.spatial(T.int64(7), ax2)
                            v_ax3 = T.axis.spatial(T.int64(7), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_fused_fused % T.int64(7) + ax3)
                            v_ax4 = T.axis.spatial(T.int64(32), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_fused_fused % T.int64(28) // T.int64(7) * T.int64(8) + oc_block_1 * T.int64(4) + ax4_fused)
                            T.reads(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4], p3[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                            T.writes(T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                            T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.max(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] + p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4] + p3[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], T.float32(0))
b0 = sch.get_block(name="data_pad", func_name="main")
b1 = sch.get_block(name="conv2d_NCHWc", func_name="main")
b2 = sch.get_block(name="T_add", func_name="main")
b3 = sch.get_block(name="T_add_1", func_name="main")
b4 = sch.get_block(name="root", func_name="main")
sch.compute_inline(block=b3)
sch.compute_inline(block=b2)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSRSRS")
l5, l6, l7, l8, l9, l10, l11, l12 = sch.get_loops(block=b1)
v13, v14, v15, v16 = sch.sample_perfect_tile(loop=l5, n=4, max_innermost_factor=64, decision=[1, 1, 1, 1])
l17, l18, l19, l20 = sch.split(loop=l5, factors=[v13, v14, v15, v16], preserve_unit_iters=True)
v21, v22, v23, v24 = sch.sample_perfect_tile(loop=l6, n=4, max_innermost_factor=64, decision=[4, 1, 1, 4])
l25, l26, l27, l28 = sch.split(loop=l6, factors=[v21, v22, v23, v24], preserve_unit_iters=True)
v29, v30, v31, v32 = sch.sample_perfect_tile(loop=l7, n=4, max_innermost_factor=64, decision=[1, 1, 7, 1])
l33, l34, l35, l36 = sch.split(loop=l7, factors=[v29, v30, v31, v32], preserve_unit_iters=True)
v37, v38, v39, v40 = sch.sample_perfect_tile(loop=l8, n=4, max_innermost_factor=64, decision=[1, 7, 1, 1])
l41, l42, l43, l44 = sch.split(loop=l8, factors=[v37, v38, v39, v40], preserve_unit_iters=True)
v45, v46, v47, v48 = sch.sample_perfect_tile(loop=l9, n=4, max_innermost_factor=64, decision=[4, 2, 4, 1])
l49, l50, l51, l52 = sch.split(loop=l9, factors=[v45, v46, v47, v48], preserve_unit_iters=True)
v53, v54 = sch.sample_perfect_tile(loop=l10, n=2, max_innermost_factor=64, decision=[64, 8])
l55, l56 = sch.split(loop=l10, factors=[v53, v54], preserve_unit_iters=True)
v57, v58 = sch.sample_perfect_tile(loop=l11, n=2, max_innermost_factor=64, decision=[1, 3])
l59, l60 = sch.split(loop=l11, factors=[v57, v58], preserve_unit_iters=True)
v61, v62 = sch.sample_perfect_tile(loop=l12, n=2, max_innermost_factor=64, decision=[3, 1])
l63, l64 = sch.split(loop=l12, factors=[v61, v62], preserve_unit_iters=True)
sch.reorder(l17, l25, l33, l41, l49, l18, l26, l34, l42, l50, l55, l59, l63, l19, l27, l35, l43, l51, l56, l60, l64, l20, l28, l36, l44, l52)
b65, = sch.get_consumers(block=b1)
sch.reverse_compute_at(block=b65, loop=l50, preserve_unit_loops=True, index=-1)
sch.annotate(block_or_loop=b4, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b4, ann_key="meta_schedule.vectorize", ann_val=64)
v66 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b4, ann_key="meta_schedule.unroll_explicit", ann_val=v66)
l67 = sch.sample_compute_location(block=b0, decision=8)
sch.compute_at(block=b0, loop=l67, preserve_unit_loops=True, index=-1)
sch.enter_postproc()
b68 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b68, ann_key="meta_schedule.parallel")
sch.unannotate(block_or_loop=b68, ann_key="meta_schedule.vectorize")
sch.unannotate(block_or_loop=b68, ann_key="meta_schedule.unroll_explicit")
b69, b70, b71 = sch.get_child_blocks(b68)
l72, l73, l74, l75, l76, l77, l78, l79, l80, l81, l82, l83, l84, l85 = sch.get_loops(block=b69)
l86 = sch.fuse(l72, l73, l74, l75, l76, l77, l78, l79, l80, preserve_unit_iters=True)
sch.parallel(loop=l86)
l87, l88, l89, l90, l91, l92, l93, l94, l95, l96, l97, l98, l99, l100, l101, l102, l103, l104 = sch.get_loops(block=b70)
l105 = sch.fuse(l87, preserve_unit_iters=True)
sch.parallel(loop=l105)
sch.annotate(block_or_loop=l105, ann_key="pragma_auto_unroll_max_step", ann_val=512)
sch.annotate(block_or_loop=l105, ann_key="pragma_unroll_explicit", ann_val=1)
l106, l107, l108, l109, l110, l111, l112 = sch.get_loops(block=b71)
l113 = sch.fuse(l112, preserve_unit_iters=True)
sch.vectorize(loop=l113)
b114 = sch.get_block(name="conv2d_NCHWc", func_name="main")
l115, l116, l117, l118, l119, l120, l121, l122, l123, l124, l125, l126, l127, l128, l129, l130, l131, l132 = sch.get_loops(block=b114)
b133 = sch.decompose_reduction(block=b114, loop=l117)
2024-04-29 04:03:11 [INFO] [task_scheduler.cc:131] [Task #26: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_3] Trial #70: GFLOPs: 71.5964. Time: 3230.4173 us. Best GFLOPs: 108.5081
2024-04-29 04:03:11 [INFO] [task_scheduler.cc:131] [Task #26: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_3] Trial #71: GFLOPs: 3.5785. Time: 64632.6360 us. Best GFLOPs: 108.5081
2024-04-29 04:03:11 [INFO] [task_scheduler.cc:131] [Task #26: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_3] Trial #72: GFLOPs: 58.3646. Time: 3962.7826 us. Best GFLOPs: 108.5081
2024-04-29 04:03:11 [INFO] [task_scheduler.cc:131] [Task #26: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_3] Trial #73: GFLOPs: 36.2995. Time: 6371.6135 us. Best GFLOPs: 108.5081
2024-04-29 04:03:11 [INFO] [task_scheduler.cc:131] [Task #26: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_3] Trial #74: GFLOPs: 113.2309. Time: 2042.6076 us. Best GFLOPs: 113.2309
2024-04-29 04:03:11 [INFO] [task_scheduler.cc:131] [Task #26: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_3] Trial #75: GFLOPs: 16.2812. Time: 14205.6850 us. Best GFLOPs: 113.2309
2024-04-29 04:03:11 [INFO] [task_scheduler.cc:131] [Task #26: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_3] Trial #76: GFLOPs: 50.8079. Time: 4552.1756 us. Best GFLOPs: 113.2309
2024-04-29 04:03:11 [INFO] [task_scheduler.cc:131] [Task #26: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_3] Trial #77: GFLOPs: 87.6115. Time: 2639.9062 us. Best GFLOPs: 113.2309
2024-04-29 04:03:11 [INFO] [task_scheduler.cc:131] [Task #26: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_3] Trial #78: GFLOPs: 11.3891. Time: 20307.7318 us. Best GFLOPs: 113.2309
2024-04-29 04:03:11 [INFO] [task_scheduler.cc:131] [Task #26: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_3] Trial #79: GFLOPs: 58.7694. Time: 3935.4901 us. Best GFLOPs: 113.2309
2024-04-29 04:03:11 [INFO] [task_scheduler.cc:131] [Task #26: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_3] Trial #80: GFLOPs: 7.6436. Time: 30258.9673 us. Best GFLOPs: 113.2309
2024-04-29 04:03:11 [INFO] [task_scheduler.cc:131] [Task #26: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_3] Trial #81: GFLOPs: 18.3788. Time: 12584.3981 us. Best GFLOPs: 113.2309
2024-04-29 04:03:11 [INFO] [task_scheduler.cc:131] [Task #26: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_3] Trial #82: GFLOPs: 89.2782. Time: 2590.6239 us. Best GFLOPs: 113.2309
2024-04-29 04:03:11 [INFO] [task_scheduler.cc:131] [Task #26: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_3] Trial #83: GFLOPs: 134.3733. Time: 1721.2222 us. Best GFLOPs: 134.3733
2024-04-29 04:03:11 [INFO] [task_scheduler.cc:131] [Task #26: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_3] Trial #84: GFLOPs: 83.4008. Time: 2773.1905 us. Best GFLOPs: 134.3733
2024-04-29 04:03:11 [INFO] [task_scheduler.cc:131] [Task #26: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_3] Trial #85: GFLOPs: 112.3514. Time: 2058.5963 us. Best GFLOPs: 134.3733
2024-04-29 04:03:11 [INFO] [task_scheduler.cc:131] [Task #26: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_3] Trial #86: GFLOPs: 81.9053. Time: 2823.8262 us. Best GFLOPs: 134.3733
2024-04-29 04:03:11 [INFO] [task_scheduler.cc:131] [Task #26: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_3] Trial #87: GFLOPs: 7.9569. Time: 29067.4315 us. Best GFLOPs: 134.3733
2024-04-29 04:03:11 [INFO] [task_scheduler.cc:121] [Task #26: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_3] Trial #88: Error in building:
LocalBuilder: Timeout, killed after 30.0 seconds
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(1), T.int64(7), T.int64(7), T.int64(512)), "float32"), p1: T.Buffer((T.int64(16), T.int64(1), T.int64(3), T.int64(3), T.int64(512), T.int64(32)), "float32"), p2: T.Buffer((T.int64(1), T.int64(16), T.int64(1), T.int64(1), T.int64(32)), "float32"), p3: T.Buffer((T.int64(1), T.int64(16), T.int64(7), T.int64(7), T.int64(32)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(16), T.int64(7), T.int64(7), T.int64(32)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        data_pad = T.alloc_buffer((T.int64(1), T.int64(1), T.int64(9), T.int64(9), T.int64(512)))
        conv2d_NCHWc = T.alloc_buffer((T.int64(1), T.int64(16), T.int64(7), T.int64(7), T.int64(32)))
        for n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_fused_fused in T.parallel(T.int64(56), annotations={"pragma_auto_unroll_max_step": 512, "pragma_unroll_explicit": 1}):
            for ax0, ax1, ax2, ax3, ax4 in T.grid(T.int64(1), T.int64(1), T.int64(3), T.int64(9), T.int64(512)):
                with T.block("data_pad"):
                    v_i0, v_i1 = T.axis.remap("SS", [ax0, ax1])
                    v_i2 = T.axis.spatial(T.int64(9), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_fused_fused % T.int64(28) // T.int64(4) + ax2)
                    v_i3, v_i4 = T.axis.remap("SS", [ax3, ax4])
                    T.reads(p0[v_i0, v_i1, v_i2 - T.int64(1), v_i3 - T.int64(1), v_i4])
                    T.writes(data_pad[v_i0, v_i1, v_i2, v_i3, v_i4])
                    data_pad[v_i0, v_i1, v_i2, v_i3, v_i4] = T.if_then_else(T.int64(1) <= v_i2 and v_i2 < T.int64(8) and T.int64(1) <= v_i3 and v_i3 < T.int64(8), p0[v_i0, v_i1, v_i2 - T.int64(1), v_i3 - T.int64(1), v_i4], T.float32(0))
            for oh_1, ow_1, oc_block_1 in T.grid(T.int64(1), T.int64(1), T.int64(1)):
                for n_2_init, oc_chunk_2_init, oh_2_init, ow_2_init, oc_block_2_init, n_3_init, oc_chunk_3_init, oh_3_init, ow_3_init in T.grid(T.int64(1), T.int64(2), T.int64(1), T.int64(1), T.int64(8), T.int64(1), T.int64(1), T.int64(1), T.int64(7)):
                    for oc_block_3_fused_init in T.vectorized(T.int64(4)):
                        with T.block("conv2d_NCHWc_init"):
                            v_n = T.axis.spatial(T.int64(1), n_2_init + n_3_init)
                            v_oc_chunk = T.axis.spatial(T.int64(16), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_fused_fused // T.int64(28) * T.int64(8) + n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_fused_fused % T.int64(4) * T.int64(2) + oc_chunk_2_init + oc_chunk_3_init)
                            v_oh = T.axis.spatial(T.int64(7), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_fused_fused % T.int64(28) // T.int64(4) + oh_1 + oh_2_init + oh_3_init)
                            v_ow = T.axis.spatial(T.int64(7), ow_1 * T.int64(7) + ow_2_init * T.int64(7) + ow_3_init)
                            v_oc_block = T.axis.spatial(T.int64(32), oc_block_1 * T.int64(32) + oc_block_2_init * T.int64(4) + oc_block_3_fused_init)
                            T.reads()
                            T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                            T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                            conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = T.float32(0)
                for ic_0, kh_0, kw_0, n_2, oc_chunk_2, oh_2, ow_2, oc_block_2, ic_1, kh_1, kw_1, n_3, oc_chunk_3, oh_3, ow_3 in T.grid(T.int64(8), T.int64(1), T.int64(3), T.int64(1), T.int64(2), T.int64(1), T.int64(1), T.int64(8), T.int64(64), T.int64(3), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(7)):
                    for oc_block_3_fused in T.vectorized(T.int64(4)):
                        with T.block("conv2d_NCHWc_update"):
                            v_n = T.axis.spatial(T.int64(1), n_2 + n_3)
                            v_oc_chunk = T.axis.spatial(T.int64(16), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_fused_fused // T.int64(28) * T.int64(8) + n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_fused_fused % T.int64(4) * T.int64(2) + oc_chunk_2 + oc_chunk_3)
                            v_oh = T.axis.spatial(T.int64(7), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_fused_fused % T.int64(28) // T.int64(4) + oh_1 + oh_2 + oh_3)
                            v_ow = T.axis.spatial(T.int64(7), ow_1 * T.int64(7) + ow_2 * T.int64(7) + ow_3)
                            v_oc_block = T.axis.spatial(T.int64(32), oc_block_1 * T.int64(32) + oc_block_2 * T.int64(4) + oc_block_3_fused)
                            v_ic = T.axis.reduce(T.int64(512), ic_0 * T.int64(64) + ic_1)
                            v_kh = T.axis.reduce(T.int64(3), kh_0 * T.int64(3) + kh_1)
                            v_kw = T.axis.reduce(T.int64(3), kw_0 + kw_1)
                            T.reads(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block], data_pad[v_n, v_ic // T.int64(512), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(512)], p1[v_oc_chunk, v_ic // T.int64(512), v_kh, v_kw, v_ic % T.int64(512), v_oc_block])
                            T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                            T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                            conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] + data_pad[v_n, v_ic // T.int64(512), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(512)] * p1[v_oc_chunk, v_ic // T.int64(512), v_kh, v_kw, v_ic % T.int64(512), v_oc_block]
                for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(2), T.int64(1), T.int64(7)):
                    for ax4_fused in T.vectorized(T.int64(32)):
                        with T.block("T_relu"):
                            v_ax0 = T.axis.spatial(T.int64(1), ax0)
                            v_ax1 = T.axis.spatial(T.int64(16), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_fused_fused // T.int64(28) * T.int64(8) + n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_fused_fused % T.int64(4) * T.int64(2) + ax1)
                            v_ax2 = T.axis.spatial(T.int64(7), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_fused_fused % T.int64(28) // T.int64(4) + ax2)
                            v_ax3, v_ax4 = T.axis.remap("SS", [ax3, ax4_fused])
                            T.reads(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4], p3[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                            T.writes(T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                            T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.max(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] + p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4] + p3[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], T.float32(0))
b0 = sch.get_block(name="data_pad", func_name="main")
b1 = sch.get_block(name="conv2d_NCHWc", func_name="main")
b2 = sch.get_block(name="T_add", func_name="main")
b3 = sch.get_block(name="T_add_1", func_name="main")
b4 = sch.get_block(name="root", func_name="main")
sch.compute_inline(block=b3)
sch.compute_inline(block=b2)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSRSRS")
l5, l6, l7, l8, l9, l10, l11, l12 = sch.get_loops(block=b1)
v13, v14, v15, v16 = sch.sample_perfect_tile(loop=l5, n=4, max_innermost_factor=64, decision=[1, 1, 1, 1])
l17, l18, l19, l20 = sch.split(loop=l5, factors=[v13, v14, v15, v16], preserve_unit_iters=True)
v21, v22, v23, v24 = sch.sample_perfect_tile(loop=l6, n=4, max_innermost_factor=64, decision=[2, 4, 2, 1])
l25, l26, l27, l28 = sch.split(loop=l6, factors=[v21, v22, v23, v24], preserve_unit_iters=True)
v29, v30, v31, v32 = sch.sample_perfect_tile(loop=l7, n=4, max_innermost_factor=64, decision=[7, 1, 1, 1])
l33, l34, l35, l36 = sch.split(loop=l7, factors=[v29, v30, v31, v32], preserve_unit_iters=True)
v37, v38, v39, v40 = sch.sample_perfect_tile(loop=l8, n=4, max_innermost_factor=64, decision=[1, 1, 1, 7])
l41, l42, l43, l44 = sch.split(loop=l8, factors=[v37, v38, v39, v40], preserve_unit_iters=True)
v45, v46, v47, v48 = sch.sample_perfect_tile(loop=l9, n=4, max_innermost_factor=64, decision=[1, 1, 8, 4])
l49, l50, l51, l52 = sch.split(loop=l9, factors=[v45, v46, v47, v48], preserve_unit_iters=True)
v53, v54 = sch.sample_perfect_tile(loop=l10, n=2, max_innermost_factor=64, decision=[8, 64])
l55, l56 = sch.split(loop=l10, factors=[v53, v54], preserve_unit_iters=True)
v57, v58 = sch.sample_perfect_tile(loop=l11, n=2, max_innermost_factor=64, decision=[1, 3])
l59, l60 = sch.split(loop=l11, factors=[v57, v58], preserve_unit_iters=True)
v61, v62 = sch.sample_perfect_tile(loop=l12, n=2, max_innermost_factor=64, decision=[3, 1])
l63, l64 = sch.split(loop=l12, factors=[v61, v62], preserve_unit_iters=True)
sch.reorder(l17, l25, l33, l41, l49, l18, l26, l34, l42, l50, l55, l59, l63, l19, l27, l35, l43, l51, l56, l60, l64, l20, l28, l36, l44, l52)
b65, = sch.get_consumers(block=b1)
sch.reverse_compute_at(block=b65, loop=l50, preserve_unit_loops=True, index=-1)
sch.annotate(block_or_loop=b4, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b4, ann_key="meta_schedule.vectorize", ann_val=64)
v66 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b4, ann_key="meta_schedule.unroll_explicit", ann_val=v66)
l67 = sch.sample_compute_location(block=b0, decision=6)
sch.compute_at(block=b0, loop=l67, preserve_unit_loops=True, index=-1)
sch.enter_postproc()
b68 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b68, ann_key="meta_schedule.parallel")
sch.unannotate(block_or_loop=b68, ann_key="meta_schedule.vectorize")
sch.unannotate(block_or_loop=b68, ann_key="meta_schedule.unroll_explicit")
b69, b70, b71 = sch.get_child_blocks(b68)
l72, l73, l74, l75, l76, l77, l78, l79, l80, l81, l82, l83 = sch.get_loops(block=b69)
l84 = sch.fuse(l72, l73, l74, l75, l76, l77, l78, preserve_unit_iters=True)
sch.parallel(loop=l84)
l85, l86, l87, l88, l89, l90, l91, l92, l93, l94, l95, l96, l97, l98, l99, l100, l101, l102, l103, l104 = sch.get_loops(block=b70)
l105 = sch.fuse(l85, preserve_unit_iters=True)
sch.parallel(loop=l105)
l106 = sch.fuse(l104, preserve_unit_iters=True)
sch.vectorize(loop=l106)
sch.annotate(block_or_loop=l105, ann_key="pragma_auto_unroll_max_step", ann_val=512)
sch.annotate(block_or_loop=l105, ann_key="pragma_unroll_explicit", ann_val=1)
l107, l108, l109, l110, l111, l112, l113, l114, l115 = sch.get_loops(block=b71)
l116 = sch.fuse(l115, preserve_unit_iters=True)
sch.vectorize(loop=l116)
b117 = sch.get_block(name="conv2d_NCHWc", func_name="main")
l118, l119, l120, l121, l122, l123, l124, l125, l126, l127, l128, l129, l130, l131, l132, l133, l134, l135, l136, l137 = sch.get_loops(block=b117)
b138 = sch.decompose_reduction(block=b117, loop=l122)
2024-04-29 04:03:11 [INFO] [task_scheduler.cc:131] [Task #26: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_3] Trial #89: GFLOPs: 66.5750. Time: 3474.0689 us. Best GFLOPs: 134.3733
2024-04-29 04:03:11 [INFO] [task_scheduler.cc:131] [Task #26: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_3] Trial #90: GFLOPs: 102.9858. Time: 2245.8082 us. Best GFLOPs: 134.3733
2024-04-29 04:03:11 [INFO] [task_scheduler.cc:131] [Task #26: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_3] Trial #91: GFLOPs: 53.0861. Time: 4356.8150 us. Best GFLOPs: 134.3733
2024-04-29 04:03:11 [INFO] [task_scheduler.cc:131] [Task #26: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_3] Trial #92: GFLOPs: 79.4006. Time: 2912.9042 us. Best GFLOPs: 134.3733
2024-04-29 04:03:11 [INFO] [task_scheduler.cc:131] [Task #26: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_3] Trial #93: GFLOPs: 50.5132. Time: 4578.7252 us. Best GFLOPs: 134.3733
2024-04-29 04:03:11 [INFO] [task_scheduler.cc:131] [Task #26: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_3] Trial #94: GFLOPs: 96.4873. Time: 2397.0639 us. Best GFLOPs: 134.3733
2024-04-29 04:03:11 [INFO] [task_scheduler.cc:131] [Task #26: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_3] Trial #95: GFLOPs: 77.8117. Time: 2972.3859 us. Best GFLOPs: 134.3733
2024-04-29 04:03:11 [INFO] [task_scheduler.cc:131] [Task #26: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_3] Trial #96: GFLOPs: 92.5352. Time: 2499.4420 us. Best GFLOPs: 134.3733
2024-04-29 04:03:11 [INFO] [task_scheduler.cc:131] [Task #26: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_3] Trial #97: GFLOPs: 97.2618. Time: 2377.9773 us. Best GFLOPs: 134.3733
2024-04-29 04:03:11 [INFO] [task_scheduler.cc:131] [Task #26: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_3] Trial #98: GFLOPs: 84.4481. Time: 2738.7966 us. Best GFLOPs: 134.3733
2024-04-29 04:03:11 [INFO] [task_scheduler.cc:131] [Task #26: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_3] Trial #99: GFLOPs: 130.4508. Time: 1772.9770 us. Best GFLOPs: 134.3733
2024-04-29 04:03:11 [INFO] [task_scheduler.cc:131] [Task #26: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_3] Trial #100: GFLOPs: 85.6371. Time: 2700.7718 us. Best GFLOPs: 134.3733
2024-04-29 04:03:11 [INFO] [task_scheduler.cc:131] [Task #26: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_3] Trial #101: GFLOPs: 86.6237. Time: 2670.0099 us. Best GFLOPs: 134.3733
2024-04-29 04:03:11 [INFO] [task_scheduler.cc:131] [Task #26: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_3] Trial #102: GFLOPs: 121.2927. Time: 1906.8449 us. Best GFLOPs: 134.3733
2024-04-29 04:03:11 [INFO] [task_scheduler.cc:131] [Task #26: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_3] Trial #103: GFLOPs: 77.8950. Time: 2969.2061 us. Best GFLOPs: 134.3733
2024-04-29 04:03:11 [INFO] [task_scheduler.cc:131] [Task #26: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_3] Trial #104: GFLOPs: 124.1976. Time: 1862.2437 us. Best GFLOPs: 134.3733
2024-04-29 04:03:11 [INFO] [task_scheduler.cc:131] [Task #26: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_3] Trial #105: GFLOPs: 6.1924. Time: 37349.9043 us. Best GFLOPs: 134.3733
2024-04-29 04:03:11 [INFO] [task_scheduler.cc:131] [Task #26: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_3] Trial #106: GFLOPs: 4.4324. Time: 52180.5493 us. Best GFLOPs: 134.3733
2024-04-29 04:03:11 [INFO] [task_scheduler.cc:131] [Task #26: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_3] Trial #107: GFLOPs: 15.3092. Time: 15107.6790 us. Best GFLOPs: 134.3733
2024-04-29 04:03:11 [INFO] [task_scheduler.cc:131] [Task #26: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_3] Trial #108: GFLOPs: 0.7775. Time: 297479.3033 us. Best GFLOPs: 134.3733
2024-04-29 04:03:11 [INFO] [task_scheduler.cc:131] [Task #26: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_3] Trial #109: GFLOPs: 0.7869. Time: 293917.4613 us. Best GFLOPs: 134.3733
2024-04-29 04:03:11 [INFO] [task_scheduler.cc:131] [Task #26: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_3] Trial #110: GFLOPs: 46.7510. Time: 4947.1919 us. Best GFLOPs: 134.3733
2024-04-29 04:03:11 [INFO] [task_scheduler.cc:131] [Task #26: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_3] Trial #111: GFLOPs: 1.3870. Time: 166755.0920 us. Best GFLOPs: 134.3733
2024-04-29 04:03:11 [INFO] [task_scheduler.cc:131] [Task #26: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_3] Trial #112: GFLOPs: 47.6038. Time: 4858.5708 us. Best GFLOPs: 134.3733
2024-04-29 04:03:11 [INFO] [task_scheduler.cc:131] [Task #26: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_3] Trial #113: GFLOPs: 80.8356. Time: 2861.1921 us. Best GFLOPs: 134.3733
2024-04-29 04:03:11 [INFO] [task_scheduler.cc:131] [Task #26: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_3] Trial #114: GFLOPs: 16.1237. Time: 14344.5127 us. Best GFLOPs: 134.3733
2024-04-29 04:03:11 [INFO] [task_scheduler.cc:131] [Task #26: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_3] Trial #115: GFLOPs: 85.0022. Time: 2720.9443 us. Best GFLOPs: 134.3733
2024-04-29 04:03:11 [INFO] [task_scheduler.cc:131] [Task #26: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_3] Trial #116: GFLOPs: 79.5672. Time: 2906.8035 us. Best GFLOPs: 134.3733
2024-04-29 04:03:11 [INFO] [task_scheduler.cc:131] [Task #26: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_3] Trial #117: GFLOPs: 76.1043. Time: 3039.0714 us. Best GFLOPs: 134.3733
2024-04-29 04:03:11 [INFO] [task_scheduler.cc:131] [Task #26: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_3] Trial #118: GFLOPs: 79.7005. Time: 2901.9420 us. Best GFLOPs: 134.3733
2024-04-29 04:03:11 [INFO] [task_scheduler.cc:131] [Task #26: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_3] Trial #119: GFLOPs: 77.8203. Time: 2972.0577 us. Best GFLOPs: 134.3733
2024-04-29 04:03:11 [INFO] [task_scheduler.cc:131] [Task #26: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_3] Trial #120: GFLOPs: 12.6579. Time: 18272.1600 us. Best GFLOPs: 134.3733
2024-04-29 04:03:11 [INFO] [task_scheduler.cc:131] [Task #26: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_3] Trial #121: GFLOPs: 105.1554. Time: 2199.4712 us. Best GFLOPs: 134.3733
2024-04-29 04:03:11 [INFO] [task_scheduler.cc:131] [Task #26: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_3] Trial #122: GFLOPs: 156.4548. Time: 1478.2943 us. Best GFLOPs: 156.4548
2024-04-29 04:03:11 [INFO] [task_scheduler.cc:131] [Task #26: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_3] Trial #123: GFLOPs: 10.3049. Time: 22444.2173 us. Best GFLOPs: 156.4548
2024-04-29 04:03:11 [INFO] [task_scheduler.cc:131] [Task #26: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_3] Trial #124: GFLOPs: 103.1096. Time: 2243.1108 us. Best GFLOPs: 156.4548
2024-04-29 04:03:11 [INFO] [task_scheduler.cc:131] [Task #26: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_3] Trial #125: GFLOPs: 5.1840. Time: 44615.4007 us. Best GFLOPs: 156.4548
2024-04-29 04:03:11 [INFO] [task_scheduler.cc:131] [Task #26: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_3] Trial #126: GFLOPs: 72.8114. Time: 3176.5107 us. Best GFLOPs: 156.4548
2024-04-29 04:03:11 [INFO] [task_scheduler.cc:131] [Task #26: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_3] Trial #127: GFLOPs: 27.4598. Time: 8422.7184 us. Best GFLOPs: 156.4548
2024-04-29 04:03:11 [INFO] [task_scheduler.cc:131] [Task #26: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_3] Trial #128: GFLOPs: 0.6962. Time: 332189.0310 us. Best GFLOPs: 156.4548
2024-04-29 04:17:47 [INFO] [evolutionary_search.cc:713] Generating candidates......
2024-04-29 04:17:48 [INFO] [evolutionary_search.cc:715] Picked top 102 candidate(s) from database
2024-04-29 04:17:52 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x36363d8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x4388aa8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x3310908)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x3246458)]: 0 failure(s)
2024-04-29 04:17:52 [INFO] [evolutionary_search.cc:723] Sampled 410 candidate(s)
2024-04-29 04:18:03 [INFO] [evolutionary_search.cc:621] Evolve iter #0 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x36363d8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x4388aa8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x3310908)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x3246458)]: 0 failure(s)
2024-04-29 04:18:14 [INFO] [evolutionary_search.cc:621] Evolve iter #1 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x36363d8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x4388aa8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x3310908)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x3246458)]: 0 failure(s)
2024-04-29 04:18:25 [INFO] [evolutionary_search.cc:621] Evolve iter #2 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x36363d8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x4388aa8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x3310908)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x3246458)]: 0 failure(s)
2024-04-29 04:18:36 [INFO] [evolutionary_search.cc:621] Evolve iter #3 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x36363d8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x4388aa8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x3310908)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x3246458)]: 0 failure(s)
2024-04-29 04:18:43 [INFO] [evolutionary_search.cc:649] Scores of the best 64 candidates:
[1 : 16]:	0.8754  0.7949  0.7622  0.7565  0.7479  0.7398  0.6945  0.6879  0.6879  0.6879  0.6879  0.6837  0.6740  0.6729  0.6729  0.6690
[17 : 32]:	0.6669  0.6644  0.6637  0.6634  0.6634  0.6606  0.6557  0.6557  0.6555  0.6555  0.6536  0.6526  0.6521  0.6521  0.6509  0.6499
[33 : 48]:	0.6475  0.6433  0.6424  0.6424  0.6424  0.6410  0.6402  0.6371  0.6370  0.6370  0.6300  0.6252  0.6252  0.6196  0.6183  0.6151
[49 : 64]:	0.6060  0.5985  0.5980  0.5980  0.5950  0.5938  0.5908  0.5894  0.5881  0.5863  0.5820  0.5819  0.5799  0.5774  0.5772  0.5735
2024-04-29 04:18:43 [INFO] [evolutionary_search.cc:727] Got 64 candidate(s) with evolutionary search
2024-04-29 04:18:43 [INFO] [evolutionary_search.cc:730] Sending 64 candidates(s) for measurement
2024-04-29 04:20:31 [INFO] [task_scheduler.cc:131] [Task #26: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_3] Trial #129: GFLOPs: 79.3608. Time: 2914.3659 us. Best GFLOPs: 156.4548
2024-04-29 04:20:31 [INFO] [task_scheduler.cc:131] [Task #26: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_3] Trial #130: GFLOPs: 150.4634. Time: 1537.1600 us. Best GFLOPs: 156.4548
2024-04-29 04:20:31 [INFO] [task_scheduler.cc:131] [Task #26: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_3] Trial #131: GFLOPs: 64.3238. Time: 3595.6544 us. Best GFLOPs: 156.4548
2024-04-29 04:20:31 [INFO] [task_scheduler.cc:131] [Task #26: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_3] Trial #132: GFLOPs: 143.4467. Time: 1612.3504 us. Best GFLOPs: 156.4548
2024-04-29 04:20:31 [INFO] [task_scheduler.cc:131] [Task #26: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_3] Trial #133: GFLOPs: 43.5678. Time: 5308.6569 us. Best GFLOPs: 156.4548
2024-04-29 04:20:31 [INFO] [task_scheduler.cc:131] [Task #26: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_3] Trial #134: GFLOPs: 80.0202. Time: 2890.3483 us. Best GFLOPs: 156.4548
2024-04-29 04:20:31 [INFO] [task_scheduler.cc:131] [Task #26: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_3] Trial #135: GFLOPs: 71.0507. Time: 3255.2305 us. Best GFLOPs: 156.4548
2024-04-29 04:20:31 [INFO] [task_scheduler.cc:131] [Task #26: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_3] Trial #136: GFLOPs: 73.0272. Time: 3167.1232 us. Best GFLOPs: 156.4548
2024-04-29 04:20:31 [INFO] [task_scheduler.cc:131] [Task #26: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_3] Trial #137: GFLOPs: 30.5496. Time: 7570.8346 us. Best GFLOPs: 156.4548
2024-04-29 04:20:31 [INFO] [task_scheduler.cc:131] [Task #26: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_3] Trial #138: GFLOPs: 30.3604. Time: 7618.0225 us. Best GFLOPs: 156.4548
2024-04-29 04:20:31 [INFO] [task_scheduler.cc:131] [Task #26: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_3] Trial #139: GFLOPs: 101.4825. Time: 2279.0747 us. Best GFLOPs: 156.4548
2024-04-29 04:20:31 [INFO] [task_scheduler.cc:131] [Task #26: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_3] Trial #140: GFLOPs: 111.7495. Time: 2069.6858 us. Best GFLOPs: 156.4548
2024-04-29 04:20:31 [INFO] [task_scheduler.cc:131] [Task #26: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_3] Trial #141: GFLOPs: 33.6675. Time: 6869.7275 us. Best GFLOPs: 156.4548
2024-04-29 04:20:31 [INFO] [task_scheduler.cc:131] [Task #26: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_3] Trial #142: GFLOPs: 108.6759. Time: 2128.2206 us. Best GFLOPs: 156.4548
2024-04-29 04:20:31 [INFO] [task_scheduler.cc:131] [Task #26: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_3] Trial #143: GFLOPs: 128.5784. Time: 1798.7957 us. Best GFLOPs: 156.4548
2024-04-29 04:20:31 [INFO] [task_scheduler.cc:131] [Task #26: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_3] Trial #144: GFLOPs: 109.4919. Time: 2112.3587 us. Best GFLOPs: 156.4548
2024-04-29 04:20:31 [INFO] [task_scheduler.cc:131] [Task #26: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_3] Trial #145: GFLOPs: 140.1757. Time: 1649.9738 us. Best GFLOPs: 156.4548
2024-04-29 04:20:31 [INFO] [task_scheduler.cc:131] [Task #26: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_3] Trial #146: GFLOPs: 109.6155. Time: 2109.9771 us. Best GFLOPs: 156.4548
2024-04-29 04:20:31 [INFO] [task_scheduler.cc:131] [Task #26: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_3] Trial #147: GFLOPs: 73.5581. Time: 3144.2669 us. Best GFLOPs: 156.4548
2024-04-29 04:20:31 [INFO] [task_scheduler.cc:131] [Task #26: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_3] Trial #148: GFLOPs: 154.3122. Time: 1498.8204 us. Best GFLOPs: 156.4548
2024-04-29 04:20:31 [INFO] [task_scheduler.cc:131] [Task #26: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_3] Trial #149: GFLOPs: 157.6205. Time: 1467.3620 us. Best GFLOPs: 157.6205
2024-04-29 04:20:31 [INFO] [task_scheduler.cc:131] [Task #26: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_3] Trial #150: GFLOPs: 103.7100. Time: 2230.1246 us. Best GFLOPs: 157.6205
2024-04-29 04:20:31 [INFO] [task_scheduler.cc:131] [Task #26: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_3] Trial #151: GFLOPs: 76.8119. Time: 3011.0729 us. Best GFLOPs: 157.6205
2024-04-29 04:20:31 [INFO] [task_scheduler.cc:131] [Task #26: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_3] Trial #152: GFLOPs: 66.4518. Time: 3480.5109 us. Best GFLOPs: 157.6205
2024-04-29 04:20:31 [INFO] [task_scheduler.cc:131] [Task #26: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_3] Trial #153: GFLOPs: 106.0592. Time: 2180.7290 us. Best GFLOPs: 157.6205
2024-04-29 04:20:31 [INFO] [task_scheduler.cc:131] [Task #26: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_3] Trial #154: GFLOPs: 30.0300. Time: 7701.8525 us. Best GFLOPs: 157.6205
2024-04-29 04:20:31 [INFO] [task_scheduler.cc:131] [Task #26: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_3] Trial #155: GFLOPs: 102.0564. Time: 2266.2593 us. Best GFLOPs: 157.6205
2024-04-29 04:20:31 [INFO] [task_scheduler.cc:131] [Task #26: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_3] Trial #156: GFLOPs: 71.0009. Time: 3257.5138 us. Best GFLOPs: 157.6205
2024-04-29 04:20:31 [INFO] [task_scheduler.cc:131] [Task #26: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_3] Trial #157: GFLOPs: 105.3571. Time: 2195.2603 us. Best GFLOPs: 157.6205
2024-04-29 04:20:31 [INFO] [task_scheduler.cc:131] [Task #26: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_3] Trial #158: GFLOPs: 117.7491. Time: 1964.2295 us. Best GFLOPs: 157.6205
2024-04-29 04:20:31 [INFO] [task_scheduler.cc:131] [Task #26: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_3] Trial #159: GFLOPs: 129.6143. Time: 1784.4188 us. Best GFLOPs: 157.6205
2024-04-29 04:20:31 [INFO] [task_scheduler.cc:131] [Task #26: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_3] Trial #160: GFLOPs: 73.9021. Time: 3129.6291 us. Best GFLOPs: 157.6205
2024-04-29 04:20:31 [INFO] [task_scheduler.cc:131] [Task #26: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_3] Trial #161: GFLOPs: 28.3533. Time: 8157.2919 us. Best GFLOPs: 157.6205
2024-04-29 04:20:31 [INFO] [task_scheduler.cc:131] [Task #26: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_3] Trial #162: GFLOPs: 110.5858. Time: 2091.4637 us. Best GFLOPs: 157.6205
2024-04-29 04:20:31 [INFO] [task_scheduler.cc:131] [Task #26: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_3] Trial #163: GFLOPs: 99.5017. Time: 2324.4446 us. Best GFLOPs: 157.6205
2024-04-29 04:20:31 [INFO] [task_scheduler.cc:131] [Task #26: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_3] Trial #164: GFLOPs: 94.0130. Time: 2460.1523 us. Best GFLOPs: 157.6205
2024-04-29 04:20:31 [INFO] [task_scheduler.cc:131] [Task #26: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_3] Trial #165: GFLOPs: 96.3012. Time: 2401.6961 us. Best GFLOPs: 157.6205
2024-04-29 04:20:31 [INFO] [task_scheduler.cc:131] [Task #26: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_3] Trial #166: GFLOPs: 211.8497. Time: 1091.7469 us. Best GFLOPs: 211.8497
2024-04-29 04:20:31 [INFO] [task_scheduler.cc:131] [Task #26: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_3] Trial #167: GFLOPs: 71.3868. Time: 3239.9047 us. Best GFLOPs: 211.8497
2024-04-29 04:20:31 [INFO] [task_scheduler.cc:131] [Task #26: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_3] Trial #168: GFLOPs: 137.7375. Time: 1679.1816 us. Best GFLOPs: 211.8497
2024-04-29 04:20:31 [INFO] [task_scheduler.cc:131] [Task #26: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_3] Trial #169: GFLOPs: 59.5542. Time: 3883.6272 us. Best GFLOPs: 211.8497
2024-04-29 04:20:31 [INFO] [task_scheduler.cc:131] [Task #26: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_3] Trial #170: GFLOPs: 54.5947. Time: 4236.4208 us. Best GFLOPs: 211.8497
2024-04-29 04:20:31 [INFO] [task_scheduler.cc:131] [Task #26: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_3] Trial #171: GFLOPs: 42.9800. Time: 5381.2499 us. Best GFLOPs: 211.8497
2024-04-29 04:20:31 [INFO] [task_scheduler.cc:131] [Task #26: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_3] Trial #172: GFLOPs: 58.1969. Time: 3974.2010 us. Best GFLOPs: 211.8497
2024-04-29 04:20:31 [INFO] [task_scheduler.cc:131] [Task #26: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_3] Trial #173: GFLOPs: 107.6461. Time: 2148.5799 us. Best GFLOPs: 211.8497
2024-04-29 04:20:31 [INFO] [task_scheduler.cc:131] [Task #26: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_3] Trial #174: GFLOPs: 278.3946. Time: 830.7856 us. Best GFLOPs: 278.3946
2024-04-29 04:20:31 [INFO] [task_scheduler.cc:131] [Task #26: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_3] Trial #175: GFLOPs: 93.6154. Time: 2470.6017 us. Best GFLOPs: 278.3946
2024-04-29 04:20:31 [INFO] [task_scheduler.cc:131] [Task #26: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_3] Trial #176: GFLOPs: 82.1021. Time: 2817.0565 us. Best GFLOPs: 278.3946
2024-04-29 04:20:31 [INFO] [task_scheduler.cc:131] [Task #26: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_3] Trial #177: GFLOPs: 89.3707. Time: 2587.9438 us. Best GFLOPs: 278.3946
2024-04-29 04:20:31 [INFO] [task_scheduler.cc:131] [Task #26: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_3] Trial #178: GFLOPs: 112.5702. Time: 2054.5963 us. Best GFLOPs: 278.3946
2024-04-29 04:20:31 [INFO] [task_scheduler.cc:131] [Task #26: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_3] Trial #179: GFLOPs: 157.1590. Time: 1471.6706 us. Best GFLOPs: 278.3946
2024-04-29 04:20:31 [INFO] [task_scheduler.cc:131] [Task #26: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_3] Trial #180: GFLOPs: 131.5758. Time: 1757.8174 us. Best GFLOPs: 278.3946
2024-04-29 04:20:31 [INFO] [task_scheduler.cc:131] [Task #26: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_3] Trial #181: GFLOPs: 129.5181. Time: 1785.7452 us. Best GFLOPs: 278.3946
2024-04-29 04:20:31 [INFO] [task_scheduler.cc:131] [Task #26: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_3] Trial #182: GFLOPs: 131.9172. Time: 1753.2681 us. Best GFLOPs: 278.3946
2024-04-29 04:20:31 [INFO] [task_scheduler.cc:131] [Task #26: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_3] Trial #183: GFLOPs: 82.9710. Time: 2787.5555 us. Best GFLOPs: 278.3946
2024-04-29 04:20:31 [INFO] [task_scheduler.cc:131] [Task #26: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_3] Trial #184: GFLOPs: 148.2558. Time: 1560.0485 us. Best GFLOPs: 278.3946
2024-04-29 04:20:31 [INFO] [task_scheduler.cc:131] [Task #26: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_3] Trial #185: GFLOPs: 92.2652. Time: 2506.7561 us. Best GFLOPs: 278.3946
2024-04-29 04:20:31 [INFO] [task_scheduler.cc:131] [Task #26: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_3] Trial #186: GFLOPs: 136.8089. Time: 1690.5791 us. Best GFLOPs: 278.3946
2024-04-29 04:20:31 [INFO] [task_scheduler.cc:131] [Task #26: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_3] Trial #187: GFLOPs: 142.3044. Time: 1625.2930 us. Best GFLOPs: 278.3946
2024-04-29 04:20:31 [INFO] [task_scheduler.cc:131] [Task #26: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_3] Trial #188: GFLOPs: 2.1048. Time: 109883.9780 us. Best GFLOPs: 278.3946
2024-04-29 04:20:31 [INFO] [task_scheduler.cc:131] [Task #26: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_3] Trial #189: GFLOPs: 154.8690. Time: 1493.4312 us. Best GFLOPs: 278.3946
2024-04-29 04:20:31 [INFO] [task_scheduler.cc:121] [Task #26: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_3] Trial #190: Error in building:
LocalBuilder: Timeout, killed after 30.0 seconds
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(1), T.int64(7), T.int64(7), T.int64(512)), "float32"), p1: T.Buffer((T.int64(16), T.int64(1), T.int64(3), T.int64(3), T.int64(512), T.int64(32)), "float32"), p2: T.Buffer((T.int64(1), T.int64(16), T.int64(1), T.int64(1), T.int64(32)), "float32"), p3: T.Buffer((T.int64(1), T.int64(16), T.int64(7), T.int64(7), T.int64(32)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(16), T.int64(7), T.int64(7), T.int64(32)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        conv2d_NCHWc = T.alloc_buffer((T.int64(1), T.int64(16), T.int64(7), T.int64(7), T.int64(32)))
        for n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused in T.parallel(T.int64(32), annotations={"pragma_auto_unroll_max_step": 512, "pragma_unroll_explicit": 1}):
            for n_2_init, oc_chunk_2_init, oh_2_init, ow_2_init, oc_block_2_init, n_3_init, oc_chunk_3_init, oh_3_init, ow_3_init, oc_block_3_init in T.grid(T.int64(1), T.int64(4), T.int64(7), T.int64(1), T.int64(4), T.int64(1), T.int64(1), T.int64(1), T.int64(7), T.int64(1)):
                with T.block("conv2d_NCHWc_init"):
                    v_n = T.axis.spatial(T.int64(1), n_2_init + n_3_init)
                    v_oc_chunk = T.axis.spatial(T.int64(16), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused // T.int64(16) * T.int64(8) + n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused % T.int64(4) // T.int64(2) * T.int64(4) + oc_chunk_2_init + oc_chunk_3_init)
                    v_oh = T.axis.spatial(T.int64(7), oh_2_init + oh_3_init)
                    v_ow = T.axis.spatial(T.int64(7), ow_2_init * T.int64(7) + ow_3_init)
                    v_oc_block = T.axis.spatial(T.int64(32), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused % T.int64(16) // T.int64(4) * T.int64(8) + n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused % T.int64(2) * T.int64(4) + oc_block_2_init + oc_block_3_init)
                    T.reads()
                    T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                    T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                    conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = T.float32(0)
            for ic_0, kh_0, kw_0, n_2, oc_chunk_2, oh_2, ow_2, oc_block_2, ic_1, kh_1, kw_1, n_3, oc_chunk_3, oh_3, ow_3, oc_block_3 in T.grid(T.int64(8), T.int64(3), T.int64(3), T.int64(1), T.int64(4), T.int64(7), T.int64(1), T.int64(4), T.int64(64), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(7), T.int64(1)):
                with T.block("conv2d_NCHWc_update"):
                    v_n = T.axis.spatial(T.int64(1), n_2 + n_3)
                    v_oc_chunk = T.axis.spatial(T.int64(16), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused // T.int64(16) * T.int64(8) + n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused % T.int64(4) // T.int64(2) * T.int64(4) + oc_chunk_2 + oc_chunk_3)
                    v_oh = T.axis.spatial(T.int64(7), oh_2 + oh_3)
                    v_ow = T.axis.spatial(T.int64(7), ow_2 * T.int64(7) + ow_3)
                    v_oc_block = T.axis.spatial(T.int64(32), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused % T.int64(16) // T.int64(4) * T.int64(8) + n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused % T.int64(2) * T.int64(4) + oc_block_2 + oc_block_3)
                    v_ic = T.axis.reduce(T.int64(512), ic_0 * T.int64(64) + ic_1)
                    v_kh = T.axis.reduce(T.int64(3), kh_0 + kh_1)
                    v_kw = T.axis.reduce(T.int64(3), kw_0 + kw_1)
                    T.reads(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block], p0[v_n, v_ic // T.int64(512), v_oh + v_kh - T.int64(1), v_ow + v_kw - T.int64(1), v_ic % T.int64(512)], p1[v_oc_chunk, v_ic // T.int64(512), v_kh, v_kw, v_ic % T.int64(512), v_oc_block])
                    T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                    T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                    conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] + T.if_then_else(T.int64(1) <= v_oh + v_kh and v_oh + v_kh < T.int64(8) and T.int64(1) <= v_ow + v_kw and v_ow + v_kw < T.int64(8), p0[v_n, v_ic // T.int64(512), v_oh + v_kh - T.int64(1), v_ow + v_kw - T.int64(1), v_ic % T.int64(512)], T.float32(0)) * p1[v_oc_chunk, v_ic // T.int64(512), v_kh, v_kw, v_ic % T.int64(512), v_oc_block]
            for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(4), T.int64(7), T.int64(7)):
                for ax4_fused in T.vectorized(T.int64(4)):
                    with T.block("T_relu"):
                        v_ax0 = T.axis.spatial(T.int64(1), ax0)
                        v_ax1 = T.axis.spatial(T.int64(16), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused // T.int64(16) * T.int64(8) + n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused % T.int64(4) // T.int64(2) * T.int64(4) + ax1)
                        v_ax2, v_ax3 = T.axis.remap("SS", [ax2, ax3])
                        v_ax4 = T.axis.spatial(T.int64(32), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused % T.int64(16) // T.int64(4) * T.int64(8) + n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused % T.int64(2) * T.int64(4) + ax4_fused)
                        T.reads(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4], p3[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                        T.writes(T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                        T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.max(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] + p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4] + p3[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], T.float32(0))
b0 = sch.get_block(name="data_pad", func_name="main")
b1 = sch.get_block(name="conv2d_NCHWc", func_name="main")
b2 = sch.get_block(name="T_add", func_name="main")
b3 = sch.get_block(name="T_add_1", func_name="main")
b4 = sch.get_block(name="root", func_name="main")
sch.compute_inline(block=b3)
sch.compute_inline(block=b2)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSRSRS")
l5, l6, l7, l8, l9, l10, l11, l12 = sch.get_loops(block=b1)
v13, v14, v15, v16 = sch.sample_perfect_tile(loop=l5, n=4, max_innermost_factor=64, decision=[1, 1, 1, 1])
l17, l18, l19, l20 = sch.split(loop=l5, factors=[v13, v14, v15, v16], preserve_unit_iters=True)
v21, v22, v23, v24 = sch.sample_perfect_tile(loop=l6, n=4, max_innermost_factor=64, decision=[2, 2, 4, 1])
l25, l26, l27, l28 = sch.split(loop=l6, factors=[v21, v22, v23, v24], preserve_unit_iters=True)
v29, v30, v31, v32 = sch.sample_perfect_tile(loop=l7, n=4, max_innermost_factor=64, decision=[1, 1, 7, 1])
l33, l34, l35, l36 = sch.split(loop=l7, factors=[v29, v30, v31, v32], preserve_unit_iters=True)
v37, v38, v39, v40 = sch.sample_perfect_tile(loop=l8, n=4, max_innermost_factor=64, decision=[1, 1, 1, 7])
l41, l42, l43, l44 = sch.split(loop=l8, factors=[v37, v38, v39, v40], preserve_unit_iters=True)
v45, v46, v47, v48 = sch.sample_perfect_tile(loop=l9, n=4, max_innermost_factor=64, decision=[4, 2, 4, 1])
l49, l50, l51, l52 = sch.split(loop=l9, factors=[v45, v46, v47, v48], preserve_unit_iters=True)
v53, v54 = sch.sample_perfect_tile(loop=l10, n=2, max_innermost_factor=64, decision=[8, 64])
l55, l56 = sch.split(loop=l10, factors=[v53, v54], preserve_unit_iters=True)
v57, v58 = sch.sample_perfect_tile(loop=l11, n=2, max_innermost_factor=64, decision=[3, 1])
l59, l60 = sch.split(loop=l11, factors=[v57, v58], preserve_unit_iters=True)
v61, v62 = sch.sample_perfect_tile(loop=l12, n=2, max_innermost_factor=64, decision=[3, 1])
l63, l64 = sch.split(loop=l12, factors=[v61, v62], preserve_unit_iters=True)
sch.reorder(l17, l25, l33, l41, l49, l18, l26, l34, l42, l50, l55, l59, l63, l19, l27, l35, l43, l51, l56, l60, l64, l20, l28, l36, l44, l52)
b65, = sch.get_consumers(block=b1)
sch.reverse_compute_at(block=b65, loop=l50, preserve_unit_loops=True, index=-1)
sch.annotate(block_or_loop=b4, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b4, ann_key="meta_schedule.vectorize", ann_val=64)
v66 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b4, ann_key="meta_schedule.unroll_explicit", ann_val=v66)
l67 = sch.sample_compute_location(block=b0, decision=-2)
sch.compute_at(block=b0, loop=l67, preserve_unit_loops=True, index=-1)
sch.enter_postproc()
b68 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b68, ann_key="meta_schedule.parallel")
sch.unannotate(block_or_loop=b68, ann_key="meta_schedule.vectorize")
sch.unannotate(block_or_loop=b68, ann_key="meta_schedule.unroll_explicit")
b69, b70 = sch.get_child_blocks(b68)
l71, l72, l73, l74, l75, l76, l77, l78, l79, l80, l81, l82, l83, l84, l85, l86, l87, l88, l89, l90, l91, l92, l93, l94, l95, l96 = sch.get_loops(block=b69)
l97 = sch.fuse(l71, l72, l73, l74, l75, l76, l77, l78, l79, l80, preserve_unit_iters=True)
sch.parallel(loop=l97)
sch.annotate(block_or_loop=l97, ann_key="pragma_auto_unroll_max_step", ann_val=512)
sch.annotate(block_or_loop=l97, ann_key="pragma_unroll_explicit", ann_val=1)
l98, l99, l100, l101, l102, l103 = sch.get_loops(block=b70)
l104 = sch.fuse(l103, preserve_unit_iters=True)
sch.vectorize(loop=l104)
b105 = sch.get_block(name="conv2d_NCHWc", func_name="main")
l106, l107, l108, l109, l110, l111, l112, l113, l114, l115, l116, l117, l118, l119, l120, l121, l122 = sch.get_loops(block=b105)
b123 = sch.decompose_reduction(block=b105, loop=l107)
2024-04-29 04:20:31 [INFO] [task_scheduler.cc:131] [Task #26: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_3] Trial #191: GFLOPs: 9.5150. Time: 24307.5688 us. Best GFLOPs: 278.3946
2024-04-29 04:20:31 [INFO] [task_scheduler.cc:131] [Task #26: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_3] Trial #192: GFLOPs: 2.8395. Time: 81453.6337 us. Best GFLOPs: 278.3946
2024-04-29 04:40:44 [INFO] [evolutionary_search.cc:713] Generating candidates......
2024-04-29 04:40:45 [INFO] [evolutionary_search.cc:715] Picked top 102 candidate(s) from database
2024-04-29 04:40:49 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x36363d8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x4388aa8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x3310908)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x3246458)]: 0 failure(s)
2024-04-29 04:40:49 [INFO] [evolutionary_search.cc:723] Sampled 410 candidate(s)
2024-04-29 04:41:00 [INFO] [evolutionary_search.cc:621] Evolve iter #0 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x36363d8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x4388aa8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x3310908)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x3246458)]: 0 failure(s)
2024-04-29 04:41:11 [INFO] [evolutionary_search.cc:621] Evolve iter #1 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x36363d8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x4388aa8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x3310908)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x3246458)]: 0 failure(s)
2024-04-29 04:41:23 [INFO] [evolutionary_search.cc:621] Evolve iter #2 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x36363d8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x4388aa8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x3310908)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x3246458)]: 0 failure(s)
2024-04-29 04:41:34 [INFO] [evolutionary_search.cc:621] Evolve iter #3 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x36363d8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x4388aa8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x3310908)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x3246458)]: 0 failure(s)
2024-04-29 04:41:41 [INFO] [evolutionary_search.cc:649] Scores of the best 64 candidates:
[1 : 16]:	0.9166  0.7782  0.7309  0.7293  0.7192  0.7192  0.6811  0.6770  0.6606  0.6604  0.6584  0.6388  0.6383  0.6306  0.6271  0.6147
[17 : 32]:	0.6117  0.6109  0.6105  0.6063  0.6016  0.5966  0.5938  0.5893  0.5848  0.5768  0.5723  0.5712  0.5696  0.5672  0.5672  0.5658
[33 : 48]:	0.5612  0.5552  0.5522  0.5522  0.5515  0.5512  0.5507  0.5505  0.5474  0.5467  0.5444  0.5428  0.5407  0.5399  0.5364  0.5338
[49 : 64]:	0.5338  0.5326  0.5317  0.5301  0.5290  0.5289  0.5284  0.5264  0.5253  0.5245  0.5218  0.5215  0.5188  0.5181  0.5172  0.5172
2024-04-29 04:41:41 [INFO] [evolutionary_search.cc:727] Got 64 candidate(s) with evolutionary search
2024-04-29 04:41:41 [INFO] [evolutionary_search.cc:730] Sending 64 candidates(s) for measurement
2024-04-29 04:43:13 [INFO] [task_scheduler.cc:131] [Task #26: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_3] Trial #193: GFLOPs: 142.4570. Time: 1623.5520 us. Best GFLOPs: 278.3946
2024-04-29 04:43:13 [INFO] [task_scheduler.cc:131] [Task #26: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_3] Trial #194: GFLOPs: 25.6300. Time: 9024.0583 us. Best GFLOPs: 278.3946
2024-04-29 04:43:13 [INFO] [task_scheduler.cc:131] [Task #26: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_3] Trial #195: GFLOPs: 26.4103. Time: 8757.4272 us. Best GFLOPs: 278.3946
2024-04-29 04:43:13 [INFO] [task_scheduler.cc:131] [Task #26: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_3] Trial #196: GFLOPs: 25.8967. Time: 8931.1084 us. Best GFLOPs: 278.3946
2024-04-29 04:43:13 [INFO] [task_scheduler.cc:131] [Task #26: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_3] Trial #197: GFLOPs: 26.6618. Time: 8674.8157 us. Best GFLOPs: 278.3946
2024-04-29 04:43:13 [INFO] [task_scheduler.cc:131] [Task #26: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_3] Trial #198: GFLOPs: 26.2384. Time: 8814.8056 us. Best GFLOPs: 278.3946
2024-04-29 04:43:13 [INFO] [task_scheduler.cc:131] [Task #26: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_3] Trial #199: GFLOPs: 139.2171. Time: 1661.3350 us. Best GFLOPs: 278.3946
2024-04-29 04:43:13 [INFO] [task_scheduler.cc:131] [Task #26: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_3] Trial #200: GFLOPs: 174.7233. Time: 1323.7292 us. Best GFLOPs: 278.3946
2024-04-29 04:43:13 [INFO] [task_scheduler.cc:131] [Task #26: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_3] Trial #201: GFLOPs: 215.8105. Time: 1071.7098 us. Best GFLOPs: 278.3946
2024-04-29 04:43:13 [INFO] [task_scheduler.cc:131] [Task #26: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_3] Trial #202: GFLOPs: 215.6112. Time: 1072.7007 us. Best GFLOPs: 278.3946
2024-04-29 04:43:13 [INFO] [task_scheduler.cc:131] [Task #26: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_3] Trial #203: GFLOPs: 144.9570. Time: 1595.5504 us. Best GFLOPs: 278.3946
2024-04-29 04:43:13 [INFO] [task_scheduler.cc:131] [Task #26: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_3] Trial #204: GFLOPs: 190.3285. Time: 1215.1953 us. Best GFLOPs: 278.3946
2024-04-29 04:43:13 [INFO] [task_scheduler.cc:131] [Task #26: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_3] Trial #205: GFLOPs: 135.5747. Time: 1705.9693 us. Best GFLOPs: 278.3946
2024-04-29 04:43:13 [INFO] [task_scheduler.cc:131] [Task #26: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_3] Trial #206: GFLOPs: 26.3220. Time: 8786.8043 us. Best GFLOPs: 278.3946
2024-04-29 04:43:13 [INFO] [task_scheduler.cc:131] [Task #26: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_3] Trial #207: GFLOPs: 128.9983. Time: 1792.9406 us. Best GFLOPs: 278.3946
2024-04-29 04:43:13 [INFO] [task_scheduler.cc:131] [Task #26: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_3] Trial #208: GFLOPs: 89.7985. Time: 2575.6132 us. Best GFLOPs: 278.3946
2024-04-29 04:43:13 [INFO] [task_scheduler.cc:131] [Task #26: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_3] Trial #209: GFLOPs: 131.1782. Time: 1763.1451 us. Best GFLOPs: 278.3946
2024-04-29 04:43:13 [INFO] [task_scheduler.cc:131] [Task #26: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_3] Trial #210: GFLOPs: 140.7922. Time: 1642.7492 us. Best GFLOPs: 278.3946
2024-04-29 04:43:13 [INFO] [task_scheduler.cc:131] [Task #26: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_3] Trial #211: GFLOPs: 25.6205. Time: 9027.3976 us. Best GFLOPs: 278.3946
2024-04-29 04:43:13 [INFO] [task_scheduler.cc:131] [Task #26: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_3] Trial #212: GFLOPs: 124.3850. Time: 1859.4383 us. Best GFLOPs: 278.3946
2024-04-29 04:43:13 [INFO] [task_scheduler.cc:131] [Task #26: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_3] Trial #213: GFLOPs: 118.4350. Time: 1952.8537 us. Best GFLOPs: 278.3946
2024-04-29 04:43:13 [INFO] [task_scheduler.cc:131] [Task #26: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_3] Trial #214: GFLOPs: 24.1160. Time: 9590.5884 us. Best GFLOPs: 278.3946
2024-04-29 04:43:13 [INFO] [task_scheduler.cc:131] [Task #26: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_3] Trial #215: GFLOPs: 136.0499. Time: 1700.0112 us. Best GFLOPs: 278.3946
2024-04-29 04:43:13 [INFO] [task_scheduler.cc:131] [Task #26: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_3] Trial #216: GFLOPs: 180.2757. Time: 1282.9585 us. Best GFLOPs: 278.3946
2024-04-29 04:43:13 [INFO] [task_scheduler.cc:131] [Task #26: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_3] Trial #217: GFLOPs: 187.0923. Time: 1236.2150 us. Best GFLOPs: 278.3946
2024-04-29 04:43:13 [INFO] [task_scheduler.cc:131] [Task #26: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_3] Trial #218: GFLOPs: 167.8292. Time: 1378.1052 us. Best GFLOPs: 278.3946
2024-04-29 04:43:13 [INFO] [task_scheduler.cc:131] [Task #26: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_3] Trial #219: GFLOPs: 155.6943. Time: 1485.5158 us. Best GFLOPs: 278.3946
2024-04-29 04:43:13 [INFO] [task_scheduler.cc:131] [Task #26: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_3] Trial #220: GFLOPs: 221.8949. Time: 1042.3235 us. Best GFLOPs: 278.3946
2024-04-29 04:43:13 [INFO] [task_scheduler.cc:131] [Task #26: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_3] Trial #221: GFLOPs: 148.4945. Time: 1557.5409 us. Best GFLOPs: 278.3946
2024-04-29 04:43:13 [INFO] [task_scheduler.cc:131] [Task #26: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_3] Trial #222: GFLOPs: 178.3901. Time: 1296.5197 us. Best GFLOPs: 278.3946
2024-04-29 04:43:13 [INFO] [task_scheduler.cc:131] [Task #26: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_3] Trial #223: GFLOPs: 176.1936. Time: 1312.6827 us. Best GFLOPs: 278.3946
2024-04-29 04:43:13 [INFO] [task_scheduler.cc:131] [Task #26: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_3] Trial #224: GFLOPs: 129.0552. Time: 1792.1494 us. Best GFLOPs: 278.3946
2024-04-29 04:43:13 [INFO] [task_scheduler.cc:131] [Task #26: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_3] Trial #225: GFLOPs: 157.2586. Time: 1470.7386 us. Best GFLOPs: 278.3946
2024-04-29 04:43:13 [INFO] [task_scheduler.cc:131] [Task #26: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_3] Trial #226: GFLOPs: 190.8488. Time: 1211.8820 us. Best GFLOPs: 278.3946
2024-04-29 04:43:13 [INFO] [task_scheduler.cc:131] [Task #26: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_3] Trial #227: GFLOPs: 163.2503. Time: 1416.7588 us. Best GFLOPs: 278.3946
2024-04-29 04:43:13 [INFO] [task_scheduler.cc:131] [Task #26: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_3] Trial #228: GFLOPs: 90.9889. Time: 2541.9172 us. Best GFLOPs: 278.3946
2024-04-29 04:43:13 [INFO] [task_scheduler.cc:131] [Task #26: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_3] Trial #229: GFLOPs: 56.3313. Time: 4105.8186 us. Best GFLOPs: 278.3946
2024-04-29 04:43:13 [INFO] [task_scheduler.cc:131] [Task #26: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_3] Trial #230: GFLOPs: 89.6894. Time: 2578.7461 us. Best GFLOPs: 278.3946
2024-04-29 04:43:13 [INFO] [task_scheduler.cc:131] [Task #26: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_3] Trial #231: GFLOPs: 123.5764. Time: 1871.6062 us. Best GFLOPs: 278.3946
2024-04-29 04:43:13 [INFO] [task_scheduler.cc:131] [Task #26: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_3] Trial #232: GFLOPs: 148.4510. Time: 1557.9977 us. Best GFLOPs: 278.3946
2024-04-29 04:43:13 [INFO] [task_scheduler.cc:131] [Task #26: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_3] Trial #233: GFLOPs: 94.2379. Time: 2454.2802 us. Best GFLOPs: 278.3946
2024-04-29 04:43:13 [INFO] [task_scheduler.cc:131] [Task #26: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_3] Trial #234: GFLOPs: 55.1650. Time: 4192.6250 us. Best GFLOPs: 278.3946
2024-04-29 04:43:13 [INFO] [task_scheduler.cc:131] [Task #26: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_3] Trial #235: GFLOPs: 69.4929. Time: 3328.2007 us. Best GFLOPs: 278.3946
2024-04-29 04:43:13 [INFO] [task_scheduler.cc:131] [Task #26: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_3] Trial #236: GFLOPs: 119.3237. Time: 1938.3089 us. Best GFLOPs: 278.3946
2024-04-29 04:43:13 [INFO] [task_scheduler.cc:131] [Task #26: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_3] Trial #237: GFLOPs: 127.5953. Time: 1812.6546 us. Best GFLOPs: 278.3946
2024-04-29 04:43:13 [INFO] [task_scheduler.cc:131] [Task #26: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_3] Trial #238: GFLOPs: 121.9095. Time: 1897.1960 us. Best GFLOPs: 278.3946
2024-04-29 04:43:13 [INFO] [task_scheduler.cc:131] [Task #26: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_3] Trial #239: GFLOPs: 94.2465. Time: 2454.0558 us. Best GFLOPs: 278.3946
2024-04-29 04:43:13 [INFO] [task_scheduler.cc:131] [Task #26: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_3] Trial #240: GFLOPs: 66.6079. Time: 3472.3545 us. Best GFLOPs: 278.3946
2024-04-29 04:43:13 [INFO] [task_scheduler.cc:131] [Task #26: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_3] Trial #241: GFLOPs: 67.3646. Time: 3433.3500 us. Best GFLOPs: 278.3946
2024-04-29 04:43:13 [INFO] [task_scheduler.cc:131] [Task #26: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_3] Trial #242: GFLOPs: 131.6673. Time: 1756.5965 us. Best GFLOPs: 278.3946
2024-04-29 04:43:13 [INFO] [task_scheduler.cc:131] [Task #26: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_3] Trial #243: GFLOPs: 142.6147. Time: 1621.7564 us. Best GFLOPs: 278.3946
2024-04-29 04:43:13 [INFO] [task_scheduler.cc:131] [Task #26: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_3] Trial #244: GFLOPs: 131.6234. Time: 1757.1820 us. Best GFLOPs: 278.3946
2024-04-29 04:43:13 [INFO] [task_scheduler.cc:131] [Task #26: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_3] Trial #245: GFLOPs: 141.3665. Time: 1636.0758 us. Best GFLOPs: 278.3946
2024-04-29 04:43:13 [INFO] [task_scheduler.cc:131] [Task #26: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_3] Trial #246: GFLOPs: 123.3354. Time: 1875.2633 us. Best GFLOPs: 278.3946
2024-04-29 04:43:13 [INFO] [task_scheduler.cc:131] [Task #26: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_3] Trial #247: GFLOPs: 273.6983. Time: 845.0410 us. Best GFLOPs: 278.3946
2024-04-29 04:43:13 [INFO] [task_scheduler.cc:131] [Task #26: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_3] Trial #248: GFLOPs: 133.0962. Time: 1737.7378 us. Best GFLOPs: 278.3946
2024-04-29 04:43:13 [INFO] [task_scheduler.cc:131] [Task #26: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_3] Trial #249: GFLOPs: 120.9678. Time: 1911.9655 us. Best GFLOPs: 278.3946
2024-04-29 04:43:13 [INFO] [task_scheduler.cc:131] [Task #26: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_3] Trial #250: GFLOPs: 176.9229. Time: 1307.2718 us. Best GFLOPs: 278.3946
2024-04-29 04:43:13 [INFO] [task_scheduler.cc:131] [Task #26: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_3] Trial #251: GFLOPs: 147.9099. Time: 1563.6972 us. Best GFLOPs: 278.3946
2024-04-29 04:43:13 [INFO] [task_scheduler.cc:131] [Task #26: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_3] Trial #252: GFLOPs: 142.7379. Time: 1620.3569 us. Best GFLOPs: 278.3946
2024-04-29 04:43:13 [INFO] [task_scheduler.cc:131] [Task #26: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_3] Trial #253: GFLOPs: 108.8416. Time: 2124.9803 us. Best GFLOPs: 278.3946
2024-04-29 04:43:13 [INFO] [task_scheduler.cc:131] [Task #26: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_3] Trial #254: GFLOPs: 0.5821. Time: 397360.5023 us. Best GFLOPs: 278.3946
2024-04-29 04:43:13 [INFO] [task_scheduler.cc:131] [Task #26: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_3] Trial #255: GFLOPs: 2.1620. Time: 106978.5847 us. Best GFLOPs: 278.3946
2024-04-29 04:43:13 [INFO] [task_scheduler.cc:131] [Task #26: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_3] Trial #256: GFLOPs: 1.0337. Time: 223745.4850 us. Best GFLOPs: 278.3946
2024-04-29 04:43:14 [INFO] [evolutionary_search.cc:713] Generating candidates......
2024-04-29 04:43:15 [INFO] [evolutionary_search.cc:715] Picked top 102 candidate(s) from database
2024-04-29 04:43:19 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x36363d8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x4388aa8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x3310908)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x3246458)]: 0 failure(s)
2024-04-29 04:43:19 [INFO] [evolutionary_search.cc:723] Sampled 410 candidate(s)
2024-04-29 04:43:30 [INFO] [evolutionary_search.cc:621] Evolve iter #0 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x36363d8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x4388aa8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x3310908)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x3246458)]: 0 failure(s)
2024-04-29 04:43:41 [INFO] [evolutionary_search.cc:621] Evolve iter #1 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x36363d8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x4388aa8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x3310908)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x3246458)]: 0 failure(s)
2024-04-29 04:43:53 [INFO] [evolutionary_search.cc:621] Evolve iter #2 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x36363d8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x4388aa8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x3310908)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x3246458)]: 0 failure(s)
2024-04-29 04:44:05 [INFO] [evolutionary_search.cc:621] Evolve iter #3 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x36363d8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x4388aa8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x3310908)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x3246458)]: 0 failure(s)
2024-04-29 04:44:12 [INFO] [evolutionary_search.cc:649] Scores of the best 64 candidates:
[1 : 16]:	0.9411  0.9140  0.8510  0.8043  0.7980  0.7980  0.7891  0.7772  0.7456  0.7456  0.7270  0.7055  0.7055  0.6915  0.6767  0.6673
[17 : 32]:	0.6642  0.6642  0.6406  0.6406  0.6343  0.6343  0.6343  0.6309  0.6230  0.6219  0.6197  0.6197  0.6162  0.6162  0.6156  0.6142
[33 : 48]:	0.6054  0.6045  0.5969  0.5964  0.5907  0.5907  0.5907  0.5901  0.5787  0.5774  0.5757  0.5716  0.5696  0.5671  0.5662  0.5635
[49 : 64]:	0.5611  0.5605  0.5600  0.5573  0.5547  0.5539  0.5519  0.5519  0.5514  0.5499  0.5499  0.5488  0.5478  0.5478  0.5477  0.5476
2024-04-29 04:44:12 [INFO] [evolutionary_search.cc:727] Got 64 candidate(s) with evolutionary search
2024-04-29 04:44:12 [INFO] [evolutionary_search.cc:730] Sending 64 candidates(s) for measurement
2024-04-29 04:45:33 [INFO] [task_scheduler.cc:131] [Task #26: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_3] Trial #257: GFLOPs: 143.7061. Time: 1609.4398 us. Best GFLOPs: 278.3946
2024-04-29 04:45:33 [INFO] [task_scheduler.cc:131] [Task #26: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_3] Trial #258: GFLOPs: 158.1511. Time: 1462.4387 us. Best GFLOPs: 278.3946
2024-04-29 04:45:33 [INFO] [task_scheduler.cc:131] [Task #26: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_3] Trial #259: GFLOPs: 128.8261. Time: 1795.3368 us. Best GFLOPs: 278.3946
2024-04-29 04:45:33 [INFO] [task_scheduler.cc:131] [Task #26: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_3] Trial #260: GFLOPs: 272.0411. Time: 850.1888 us. Best GFLOPs: 278.3946
2024-04-29 04:45:33 [INFO] [task_scheduler.cc:131] [Task #26: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_3] Trial #261: GFLOPs: 168.7790. Time: 1370.3501 us. Best GFLOPs: 278.3946
2024-04-29 04:45:33 [INFO] [task_scheduler.cc:131] [Task #26: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_3] Trial #262: GFLOPs: 162.6070. Time: 1422.3635 us. Best GFLOPs: 278.3946
2024-04-29 04:45:33 [INFO] [task_scheduler.cc:131] [Task #26: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_3] Trial #263: GFLOPs: 73.9926. Time: 3125.8024 us. Best GFLOPs: 278.3946
2024-04-29 04:45:33 [INFO] [task_scheduler.cc:131] [Task #26: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_3] Trial #264: GFLOPs: 154.6487. Time: 1495.5593 us. Best GFLOPs: 278.3946
2024-04-29 04:45:33 [INFO] [task_scheduler.cc:131] [Task #26: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_3] Trial #265: GFLOPs: 147.5962. Time: 1567.0204 us. Best GFLOPs: 278.3946
2024-04-29 04:45:33 [INFO] [task_scheduler.cc:131] [Task #26: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_3] Trial #266: GFLOPs: 207.7132. Time: 1113.4886 us. Best GFLOPs: 278.3946
2024-04-29 04:45:33 [INFO] [task_scheduler.cc:131] [Task #26: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_3] Trial #267: GFLOPs: 263.6195. Time: 877.3490 us. Best GFLOPs: 278.3946
2024-04-29 04:45:33 [INFO] [task_scheduler.cc:131] [Task #26: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_3] Trial #268: GFLOPs: 86.0139. Time: 2688.9395 us. Best GFLOPs: 278.3946
2024-04-29 04:45:33 [INFO] [task_scheduler.cc:131] [Task #26: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_3] Trial #269: GFLOPs: 103.3170. Time: 2238.6084 us. Best GFLOPs: 278.3946
2024-04-29 04:45:33 [INFO] [task_scheduler.cc:131] [Task #26: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_3] Trial #270: GFLOPs: 154.7461. Time: 1494.6174 us. Best GFLOPs: 278.3946
2024-04-29 04:45:33 [INFO] [task_scheduler.cc:131] [Task #26: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_3] Trial #271: GFLOPs: 132.2328. Time: 1749.0834 us. Best GFLOPs: 278.3946
2024-04-29 04:45:33 [INFO] [task_scheduler.cc:131] [Task #26: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_3] Trial #272: GFLOPs: 205.5179. Time: 1125.3828 us. Best GFLOPs: 278.3946
2024-04-29 04:45:33 [INFO] [task_scheduler.cc:131] [Task #26: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_3] Trial #273: GFLOPs: 210.4088. Time: 1099.2235 us. Best GFLOPs: 278.3946
2024-04-29 04:45:33 [INFO] [task_scheduler.cc:131] [Task #26: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_3] Trial #274: GFLOPs: 141.2978. Time: 1636.8709 us. Best GFLOPs: 278.3946
2024-04-29 04:45:33 [INFO] [task_scheduler.cc:131] [Task #26: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_3] Trial #275: GFLOPs: 99.5346. Time: 2323.6771 us. Best GFLOPs: 278.3946
2024-04-29 04:45:33 [INFO] [task_scheduler.cc:131] [Task #26: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_3] Trial #276: GFLOPs: 93.8403. Time: 2464.6790 us. Best GFLOPs: 278.3946
2024-04-29 04:45:33 [INFO] [task_scheduler.cc:131] [Task #26: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_3] Trial #277: GFLOPs: 189.2233. Time: 1222.2929 us. Best GFLOPs: 278.3946
2024-04-29 04:45:33 [INFO] [task_scheduler.cc:131] [Task #26: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_3] Trial #278: GFLOPs: 150.3487. Time: 1538.3319 us. Best GFLOPs: 278.3946
2024-04-29 04:45:33 [INFO] [task_scheduler.cc:131] [Task #26: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_3] Trial #279: GFLOPs: 127.1092. Time: 1819.5869 us. Best GFLOPs: 278.3946
2024-04-29 04:45:33 [INFO] [task_scheduler.cc:131] [Task #26: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_3] Trial #280: GFLOPs: 206.5729. Time: 1119.6352 us. Best GFLOPs: 278.3946
2024-04-29 04:45:33 [INFO] [task_scheduler.cc:131] [Task #26: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_3] Trial #281: GFLOPs: 122.2658. Time: 1891.6682 us. Best GFLOPs: 278.3946
2024-04-29 04:45:33 [INFO] [task_scheduler.cc:131] [Task #26: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_3] Trial #282: GFLOPs: 131.6042. Time: 1757.4384 us. Best GFLOPs: 278.3946
2024-04-29 04:45:33 [INFO] [task_scheduler.cc:131] [Task #26: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_3] Trial #283: GFLOPs: 133.0736. Time: 1738.0325 us. Best GFLOPs: 278.3946
2024-04-29 04:45:33 [INFO] [task_scheduler.cc:131] [Task #26: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_3] Trial #284: GFLOPs: 96.0085. Time: 2409.0175 us. Best GFLOPs: 278.3946
2024-04-29 04:45:33 [INFO] [task_scheduler.cc:131] [Task #26: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_3] Trial #285: GFLOPs: 127.0629. Time: 1820.2499 us. Best GFLOPs: 278.3946
2024-04-29 04:45:33 [INFO] [task_scheduler.cc:131] [Task #26: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_3] Trial #286: GFLOPs: 160.3571. Time: 1442.3204 us. Best GFLOPs: 278.3946
2024-04-29 04:45:33 [INFO] [task_scheduler.cc:131] [Task #26: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_3] Trial #287: GFLOPs: 86.5152. Time: 2673.3602 us. Best GFLOPs: 278.3946
2024-04-29 04:45:33 [INFO] [task_scheduler.cc:131] [Task #26: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_3] Trial #288: GFLOPs: 154.4731. Time: 1497.2594 us. Best GFLOPs: 278.3946
2024-04-29 04:45:33 [INFO] [task_scheduler.cc:131] [Task #26: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_3] Trial #289: GFLOPs: 140.4720. Time: 1646.4940 us. Best GFLOPs: 278.3946
2024-04-29 04:45:33 [INFO] [task_scheduler.cc:131] [Task #26: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_3] Trial #290: GFLOPs: 160.9145. Time: 1437.3241 us. Best GFLOPs: 278.3946
2024-04-29 04:45:33 [INFO] [task_scheduler.cc:131] [Task #26: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_3] Trial #291: GFLOPs: 99.6440. Time: 2321.1248 us. Best GFLOPs: 278.3946
2024-04-29 04:45:33 [INFO] [task_scheduler.cc:131] [Task #26: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_3] Trial #292: GFLOPs: 162.6817. Time: 1421.7108 us. Best GFLOPs: 278.3946
2024-04-29 04:45:33 [INFO] [task_scheduler.cc:131] [Task #26: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_3] Trial #293: GFLOPs: 121.5641. Time: 1902.5871 us. Best GFLOPs: 278.3946
2024-04-29 04:45:33 [INFO] [task_scheduler.cc:131] [Task #26: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_3] Trial #294: GFLOPs: 183.8902. Time: 1257.7413 us. Best GFLOPs: 278.3946
2024-04-29 04:45:33 [INFO] [task_scheduler.cc:131] [Task #26: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_3] Trial #295: GFLOPs: 169.9136. Time: 1361.1990 us. Best GFLOPs: 278.3946
2024-04-29 04:45:33 [INFO] [task_scheduler.cc:131] [Task #26: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_3] Trial #296: GFLOPs: 426.2540. Time: 542.6019 us. Best GFLOPs: 426.2540
2024-04-29 04:45:33 [INFO] [task_scheduler.cc:131] [Task #26: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_3] Trial #297: GFLOPs: 134.5318. Time: 1719.1945 us. Best GFLOPs: 426.2540
2024-04-29 04:45:33 [INFO] [task_scheduler.cc:131] [Task #26: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_3] Trial #298: GFLOPs: 104.3722. Time: 2215.9749 us. Best GFLOPs: 426.2540
2024-04-29 04:45:33 [INFO] [task_scheduler.cc:131] [Task #26: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_3] Trial #299: GFLOPs: 158.2161. Time: 1461.8382 us. Best GFLOPs: 426.2540
2024-04-29 04:45:33 [INFO] [task_scheduler.cc:131] [Task #26: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_3] Trial #300: GFLOPs: 143.9654. Time: 1606.5410 us. Best GFLOPs: 426.2540
2024-04-29 04:45:33 [INFO] [task_scheduler.cc:131] [Task #26: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_3] Trial #301: GFLOPs: 148.7521. Time: 1554.8441 us. Best GFLOPs: 426.2540
2024-04-29 04:45:33 [INFO] [task_scheduler.cc:131] [Task #26: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_3] Trial #302: GFLOPs: 209.5529. Time: 1103.7132 us. Best GFLOPs: 426.2540
2024-04-29 04:45:33 [INFO] [task_scheduler.cc:131] [Task #26: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_3] Trial #303: GFLOPs: 123.5306. Time: 1872.2993 us. Best GFLOPs: 426.2540
2024-04-29 04:45:33 [INFO] [task_scheduler.cc:131] [Task #26: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_3] Trial #304: GFLOPs: 174.1213. Time: 1328.3052 us. Best GFLOPs: 426.2540
2024-04-29 04:45:33 [INFO] [task_scheduler.cc:131] [Task #26: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_3] Trial #305: GFLOPs: 137.2350. Time: 1685.3297 us. Best GFLOPs: 426.2540
2024-04-29 04:45:33 [INFO] [task_scheduler.cc:131] [Task #26: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_3] Trial #306: GFLOPs: 117.0833. Time: 1975.3993 us. Best GFLOPs: 426.2540
2024-04-29 04:45:33 [INFO] [task_scheduler.cc:131] [Task #26: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_3] Trial #307: GFLOPs: 166.4227. Time: 1389.7520 us. Best GFLOPs: 426.2540
2024-04-29 04:45:33 [INFO] [task_scheduler.cc:131] [Task #26: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_3] Trial #308: GFLOPs: 113.9561. Time: 2029.6083 us. Best GFLOPs: 426.2540
2024-04-29 04:45:33 [INFO] [task_scheduler.cc:131] [Task #26: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_3] Trial #309: GFLOPs: 138.7523. Time: 1666.9003 us. Best GFLOPs: 426.2540
2024-04-29 04:45:33 [INFO] [task_scheduler.cc:131] [Task #26: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_3] Trial #310: GFLOPs: 123.2803. Time: 1876.1015 us. Best GFLOPs: 426.2540
2024-04-29 04:45:33 [INFO] [task_scheduler.cc:131] [Task #26: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_3] Trial #311: GFLOPs: 120.8731. Time: 1913.4633 us. Best GFLOPs: 426.2540
2024-04-29 04:45:33 [INFO] [task_scheduler.cc:131] [Task #26: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_3] Trial #312: GFLOPs: 139.1054. Time: 1662.6689 us. Best GFLOPs: 426.2540
2024-04-29 04:45:33 [INFO] [task_scheduler.cc:131] [Task #26: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_3] Trial #313: GFLOPs: 22.3210. Time: 10361.8263 us. Best GFLOPs: 426.2540
2024-04-29 04:45:33 [INFO] [task_scheduler.cc:131] [Task #26: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_3] Trial #314: GFLOPs: 129.5030. Time: 1785.9535 us. Best GFLOPs: 426.2540
2024-04-29 04:45:33 [INFO] [task_scheduler.cc:131] [Task #26: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_3] Trial #315: GFLOPs: 127.0500. Time: 1820.4346 us. Best GFLOPs: 426.2540
2024-04-29 04:45:33 [INFO] [task_scheduler.cc:131] [Task #26: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_3] Trial #316: GFLOPs: 130.5110. Time: 1772.1588 us. Best GFLOPs: 426.2540
2024-04-29 04:45:33 [INFO] [task_scheduler.cc:131] [Task #26: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_3] Trial #317: GFLOPs: 115.7111. Time: 1998.8251 us. Best GFLOPs: 426.2540
2024-04-29 04:45:33 [INFO] [task_scheduler.cc:131] [Task #26: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_3] Trial #318: GFLOPs: 5.4180. Time: 42688.8297 us. Best GFLOPs: 426.2540
2024-04-29 04:45:33 [INFO] [task_scheduler.cc:131] [Task #26: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_3] Trial #319: GFLOPs: 19.7586. Time: 11705.6070 us. Best GFLOPs: 426.2540
2024-04-29 04:45:33 [INFO] [task_scheduler.cc:131] [Task #26: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_3] Trial #320: GFLOPs: 4.2751. Time: 54101.3137 us. Best GFLOPs: 426.2540
2024-04-29 05:03:27 [INFO] [evolutionary_search.cc:713] Generating candidates......
2024-04-29 05:03:28 [INFO] [evolutionary_search.cc:715] Picked top 102 candidate(s) from database
2024-04-29 05:03:32 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x36363d8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x4388aa8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x3310908)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x3246458)]: 0 failure(s)
2024-04-29 05:03:32 [INFO] [evolutionary_search.cc:723] Sampled 410 candidate(s)
2024-04-29 05:03:43 [INFO] [evolutionary_search.cc:621] Evolve iter #0 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x36363d8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x4388aa8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x3310908)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x3246458)]: 0 failure(s)
2024-04-29 05:03:55 [INFO] [evolutionary_search.cc:621] Evolve iter #1 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x36363d8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x4388aa8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x3310908)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x3246458)]: 0 failure(s)
2024-04-29 05:04:06 [INFO] [evolutionary_search.cc:621] Evolve iter #2 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x36363d8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x4388aa8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x3310908)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x3246458)]: 0 failure(s)
2024-04-29 05:04:18 [INFO] [evolutionary_search.cc:621] Evolve iter #3 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x36363d8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x4388aa8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x3310908)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x3246458)]: 0 failure(s)
2024-04-29 05:04:25 [INFO] [evolutionary_search.cc:649] Scores of the best 64 candidates:
[1 : 16]:	0.9749  0.9749  0.9024  0.9024  0.8818  0.8818  0.8725  0.8725  0.8072  0.8034  0.7980  0.7980  0.7736  0.7736  0.7509  0.7397
[17 : 32]:	0.7397  0.7309  0.7295  0.7254  0.7254  0.7145  0.7089  0.6626  0.6483  0.6460  0.6454  0.6348  0.6207  0.6207  0.6059  0.5895
[33 : 48]:	0.5785  0.5532  0.4960  0.4798  0.4741  0.4714  0.4652  0.4596  0.4545  0.4532  0.4470  0.4388  0.4388  0.4388  0.4368  0.4354
[49 : 64]:	0.4347  0.4345  0.4339  0.4335  0.4335  0.4301  0.4267  0.4211  0.4210  0.4178  0.4170  0.4170  0.4164  0.4135  0.4098  0.4094
2024-04-29 05:04:26 [INFO] [evolutionary_search.cc:727] Got 64 candidate(s) with evolutionary search
2024-04-29 05:04:26 [INFO] [evolutionary_search.cc:730] Sending 64 candidates(s) for measurement
2024-04-29 05:06:15 [INFO] [task_scheduler.cc:131] [Task #26: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_3] Trial #321: GFLOPs: 425.9551. Time: 542.9828 us. Best GFLOPs: 426.2540
2024-04-29 05:06:15 [INFO] [task_scheduler.cc:131] [Task #26: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_3] Trial #322: GFLOPs: 348.1535. Time: 664.3227 us. Best GFLOPs: 426.2540
2024-04-29 05:06:15 [INFO] [task_scheduler.cc:131] [Task #26: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_3] Trial #323: GFLOPs: 535.7977. Time: 431.6672 us. Best GFLOPs: 535.7977
2024-04-29 05:06:15 [INFO] [task_scheduler.cc:131] [Task #26: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_3] Trial #324: GFLOPs: 288.4168. Time: 801.9167 us. Best GFLOPs: 535.7977
2024-04-29 05:06:15 [INFO] [task_scheduler.cc:131] [Task #26: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_3] Trial #325: GFLOPs: 460.8813. Time: 501.8348 us. Best GFLOPs: 535.7977
2024-04-29 05:06:15 [INFO] [task_scheduler.cc:131] [Task #26: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_3] Trial #326: GFLOPs: 465.6009. Time: 496.7479 us. Best GFLOPs: 535.7977
2024-04-29 05:06:15 [INFO] [task_scheduler.cc:131] [Task #26: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_3] Trial #327: GFLOPs: 577.9832. Time: 400.1609 us. Best GFLOPs: 577.9832
2024-04-29 05:06:15 [INFO] [task_scheduler.cc:131] [Task #26: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_3] Trial #328: GFLOPs: 594.9604. Time: 388.7423 us. Best GFLOPs: 594.9604
2024-04-29 05:06:15 [INFO] [task_scheduler.cc:131] [Task #26: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_3] Trial #329: GFLOPs: 607.8375. Time: 380.5068 us. Best GFLOPs: 607.8375
2024-04-29 05:06:15 [INFO] [task_scheduler.cc:131] [Task #26: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_3] Trial #330: GFLOPs: 103.3856. Time: 2237.1221 us. Best GFLOPs: 607.8375
2024-04-29 05:06:15 [INFO] [task_scheduler.cc:131] [Task #26: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_3] Trial #331: GFLOPs: 567.8607. Time: 407.2940 us. Best GFLOPs: 607.8375
2024-04-29 05:06:15 [INFO] [task_scheduler.cc:131] [Task #26: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_3] Trial #332: GFLOPs: 593.9309. Time: 389.4161 us. Best GFLOPs: 607.8375
2024-04-29 05:06:15 [INFO] [task_scheduler.cc:131] [Task #26: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_3] Trial #333: GFLOPs: 552.9715. Time: 418.2608 us. Best GFLOPs: 607.8375
2024-04-29 05:06:15 [INFO] [task_scheduler.cc:131] [Task #26: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_3] Trial #334: GFLOPs: 550.9307. Time: 419.8101 us. Best GFLOPs: 607.8375
2024-04-29 05:06:15 [INFO] [task_scheduler.cc:131] [Task #26: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_3] Trial #335: GFLOPs: 496.1906. Time: 466.1239 us. Best GFLOPs: 607.8375
2024-04-29 05:06:15 [INFO] [task_scheduler.cc:131] [Task #26: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_3] Trial #336: GFLOPs: 572.6127. Time: 403.9140 us. Best GFLOPs: 607.8375
2024-04-29 05:06:15 [INFO] [task_scheduler.cc:131] [Task #26: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_3] Trial #337: GFLOPs: 565.1772. Time: 409.2279 us. Best GFLOPs: 607.8375
2024-04-29 05:06:15 [INFO] [task_scheduler.cc:131] [Task #26: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_3] Trial #338: GFLOPs: 68.9238. Time: 3355.6808 us. Best GFLOPs: 607.8375
2024-04-29 05:06:15 [INFO] [task_scheduler.cc:131] [Task #26: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_3] Trial #339: GFLOPs: 63.8273. Time: 3623.6288 us. Best GFLOPs: 607.8375
2024-04-29 05:06:15 [INFO] [task_scheduler.cc:131] [Task #26: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_3] Trial #340: GFLOPs: 59.2430. Time: 3904.0272 us. Best GFLOPs: 607.8375
2024-04-29 05:06:15 [INFO] [task_scheduler.cc:131] [Task #26: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_3] Trial #341: GFLOPs: 63.2161. Time: 3658.6630 us. Best GFLOPs: 607.8375
2024-04-29 05:06:15 [INFO] [task_scheduler.cc:131] [Task #26: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_3] Trial #342: GFLOPs: 533.8568. Time: 433.2365 us. Best GFLOPs: 607.8375
2024-04-29 05:06:15 [INFO] [task_scheduler.cc:131] [Task #26: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_3] Trial #343: GFLOPs: 671.5908. Time: 344.3857 us. Best GFLOPs: 671.5908
2024-04-29 05:06:15 [INFO] [task_scheduler.cc:131] [Task #26: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_3] Trial #344: GFLOPs: 269.6618. Time: 857.6902 us. Best GFLOPs: 671.5908
2024-04-29 05:06:15 [INFO] [task_scheduler.cc:131] [Task #26: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_3] Trial #345: GFLOPs: 231.8412. Time: 997.6065 us. Best GFLOPs: 671.5908
2024-04-29 05:06:15 [INFO] [task_scheduler.cc:131] [Task #26: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_3] Trial #346: GFLOPs: 45.7307. Time: 5057.5697 us. Best GFLOPs: 671.5908
2024-04-29 05:06:15 [INFO] [task_scheduler.cc:131] [Task #26: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_3] Trial #347: GFLOPs: 184.0815. Time: 1256.4338 us. Best GFLOPs: 671.5908
2024-04-29 05:06:15 [INFO] [task_scheduler.cc:131] [Task #26: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_3] Trial #348: GFLOPs: 53.3217. Time: 4337.5655 us. Best GFLOPs: 671.5908
2024-04-29 05:06:15 [INFO] [task_scheduler.cc:131] [Task #26: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_3] Trial #349: GFLOPs: 69.4285. Time: 3331.2851 us. Best GFLOPs: 671.5908
2024-04-29 05:06:15 [INFO] [task_scheduler.cc:131] [Task #26: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_3] Trial #350: GFLOPs: 70.6300. Time: 3274.6189 us. Best GFLOPs: 671.5908
2024-04-29 05:06:15 [INFO] [task_scheduler.cc:131] [Task #26: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_3] Trial #351: GFLOPs: 47.2757. Time: 4892.2845 us. Best GFLOPs: 671.5908
2024-04-29 05:06:15 [INFO] [task_scheduler.cc:131] [Task #26: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_3] Trial #352: GFLOPs: 140.6411. Time: 1644.5142 us. Best GFLOPs: 671.5908
2024-04-29 05:06:15 [INFO] [task_scheduler.cc:131] [Task #26: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_3] Trial #353: GFLOPs: 21.9007. Time: 10560.6788 us. Best GFLOPs: 671.5908
2024-04-29 05:06:15 [INFO] [task_scheduler.cc:131] [Task #26: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_3] Trial #354: GFLOPs: 100.9560. Time: 2290.9622 us. Best GFLOPs: 671.5908
2024-04-29 05:06:15 [INFO] [task_scheduler.cc:131] [Task #26: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_3] Trial #355: GFLOPs: 408.1192. Time: 566.7125 us. Best GFLOPs: 671.5908
2024-04-29 05:06:15 [INFO] [task_scheduler.cc:131] [Task #26: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_3] Trial #356: GFLOPs: 91.9230. Time: 2516.0877 us. Best GFLOPs: 671.5908
2024-04-29 05:06:15 [INFO] [task_scheduler.cc:131] [Task #26: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_3] Trial #357: GFLOPs: 282.0065. Time: 820.1452 us. Best GFLOPs: 671.5908
2024-04-29 05:06:15 [INFO] [task_scheduler.cc:131] [Task #26: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_3] Trial #358: GFLOPs: 185.1414. Time: 1249.2411 us. Best GFLOPs: 671.5908
2024-04-29 05:06:15 [INFO] [task_scheduler.cc:131] [Task #26: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_3] Trial #359: GFLOPs: 341.7619. Time: 676.7468 us. Best GFLOPs: 671.5908
2024-04-29 05:06:15 [INFO] [task_scheduler.cc:121] [Task #26: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_3] Trial #360: Error in building:
LocalBuilder: Timeout, killed after 30.0 seconds
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(1), T.int64(7), T.int64(7), T.int64(512)), "float32"), p1: T.Buffer((T.int64(16), T.int64(1), T.int64(3), T.int64(3), T.int64(512), T.int64(32)), "float32"), p2: T.Buffer((T.int64(1), T.int64(16), T.int64(1), T.int64(1), T.int64(32)), "float32"), p3: T.Buffer((T.int64(1), T.int64(16), T.int64(7), T.int64(7), T.int64(32)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(16), T.int64(7), T.int64(7), T.int64(32)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        data_pad = T.alloc_buffer((T.int64(1), T.int64(1), T.int64(9), T.int64(9), T.int64(512)))
        conv2d_NCHWc = T.alloc_buffer((T.int64(1), T.int64(16), T.int64(7), T.int64(7), T.int64(32)))
        for n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_fused_fused in T.parallel(T.int64(112), annotations={"pragma_auto_unroll_max_step": 512, "pragma_unroll_explicit": 1}):
            for n_1, oc_chunk_1, oh_1, ow_1, oc_block_1 in T.grid(T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1)):
                for n_2_init, oc_chunk_2_init, oh_2_init, ow_2_init, oc_block_2_init, n_3_init, oc_chunk_3_init, oh_3_init, ow_3_init, oc_block_3_init in T.grid(T.int64(1), T.int64(4), T.int64(1), T.int64(1), T.int64(4), T.int64(1), T.int64(2), T.int64(1), T.int64(7), T.int64(1)):
                    with T.block("conv2d_NCHWc_init"):
                        v_n = T.axis.spatial(T.int64(1), n_1 + n_2_init + n_3_init)
                        v_oc_chunk = T.axis.spatial(T.int64(16), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_fused_fused // T.int64(56) * T.int64(8) + oc_chunk_1 * T.int64(8) + oc_chunk_2_init * T.int64(2) + oc_chunk_3_init)
                        v_oh = T.axis.spatial(T.int64(7), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_fused_fused % T.int64(56) // T.int64(8) + oh_1 + oh_2_init + oh_3_init)
                        v_ow = T.axis.spatial(T.int64(7), ow_1 * T.int64(7) + ow_2_init * T.int64(7) + ow_3_init)
                        v_oc_block = T.axis.spatial(T.int64(32), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_fused_fused % T.int64(8) * T.int64(4) + oc_block_1 * T.int64(4) + oc_block_2_init + oc_block_3_init)
                        T.reads()
                        T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                        T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                        conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = T.float32(0)
                for ic_0 in range(T.int64(16)):
                    for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(1), T.int64(3), T.int64(9)):
                        for ax4_fused in T.vectorized(T.int64(32)):
                            with T.block("data_pad"):
                                v_i0, v_i1 = T.axis.remap("SS", [ax0, ax1])
                                v_i2 = T.axis.spatial(T.int64(9), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_fused_fused % T.int64(56) // T.int64(8) + ax2)
                                v_i3 = T.axis.spatial(T.int64(9), ax3)
                                v_i4 = T.axis.spatial(T.int64(512), ic_0 * T.int64(32) + ax4_fused)
                                T.reads(p0[v_i0, v_i1, v_i2 - T.int64(1), v_i3 - T.int64(1), v_i4])
                                T.writes(data_pad[v_i0, v_i1, v_i2, v_i3, v_i4])
                                data_pad[v_i0, v_i1, v_i2, v_i3, v_i4] = T.if_then_else(T.int64(1) <= v_i2 and v_i2 < T.int64(8) and T.int64(1) <= v_i3 and v_i3 < T.int64(8), p0[v_i0, v_i1, v_i2 - T.int64(1), v_i3 - T.int64(1), v_i4], T.float32(0))
                    for kh_0, kw_0, n_2, oc_chunk_2, oh_2, ow_2, oc_block_2, ic_1, kh_1, kw_1, n_3, oc_chunk_3, oh_3, ow_3, oc_block_3 in T.grid(T.int64(3), T.int64(3), T.int64(1), T.int64(4), T.int64(1), T.int64(1), T.int64(4), T.int64(32), T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(1), T.int64(7), T.int64(1)):
                        with T.block("conv2d_NCHWc_update"):
                            v_n = T.axis.spatial(T.int64(1), n_1 + n_2 + n_3)
                            v_oc_chunk = T.axis.spatial(T.int64(16), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_fused_fused // T.int64(56) * T.int64(8) + oc_chunk_1 * T.int64(8) + oc_chunk_2 * T.int64(2) + oc_chunk_3)
                            v_oh = T.axis.spatial(T.int64(7), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_fused_fused % T.int64(56) // T.int64(8) + oh_1 + oh_2 + oh_3)
                            v_ow = T.axis.spatial(T.int64(7), ow_1 * T.int64(7) + ow_2 * T.int64(7) + ow_3)
                            v_oc_block = T.axis.spatial(T.int64(32), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_fused_fused % T.int64(8) * T.int64(4) + oc_block_1 * T.int64(4) + oc_block_2 + oc_block_3)
                            v_ic = T.axis.reduce(T.int64(512), ic_0 * T.int64(32) + ic_1)
                            v_kh = T.axis.reduce(T.int64(3), kh_0 + kh_1)
                            v_kw = T.axis.reduce(T.int64(3), kw_0 + kw_1)
                            T.reads(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block], data_pad[v_n, v_ic // T.int64(512), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(512)], p1[v_oc_chunk, v_ic // T.int64(512), v_kh, v_kw, v_ic % T.int64(512), v_oc_block])
                            T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                            T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                            conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] + data_pad[v_n, v_ic // T.int64(512), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(512)] * p1[v_oc_chunk, v_ic // T.int64(512), v_kh, v_kw, v_ic % T.int64(512), v_oc_block]
            for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(8), T.int64(1), T.int64(7)):
                for ax4_fused in T.vectorized(T.int64(4)):
                    with T.block("T_relu"):
                        v_ax0 = T.axis.spatial(T.int64(1), ax0)
                        v_ax1 = T.axis.spatial(T.int64(16), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_fused_fused // T.int64(56) * T.int64(8) + ax1)
                        v_ax2 = T.axis.spatial(T.int64(7), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_fused_fused % T.int64(56) // T.int64(8) + ax2)
                        v_ax3 = T.axis.spatial(T.int64(7), ax3)
                        v_ax4 = T.axis.spatial(T.int64(32), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_fused_fused % T.int64(8) * T.int64(4) + ax4_fused)
                        T.reads(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4], p3[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                        T.writes(T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                        T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.max(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] + p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4] + p3[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], T.float32(0))
b0 = sch.get_block(name="data_pad", func_name="main")
b1 = sch.get_block(name="conv2d_NCHWc", func_name="main")
b2 = sch.get_block(name="T_add", func_name="main")
b3 = sch.get_block(name="T_add_1", func_name="main")
b4 = sch.get_block(name="root", func_name="main")
sch.compute_inline(block=b3)
sch.compute_inline(block=b2)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSRSRS")
l5, l6, l7, l8, l9, l10, l11, l12 = sch.get_loops(block=b1)
v13, v14, v15, v16 = sch.sample_perfect_tile(loop=l5, n=4, max_innermost_factor=64, decision=[1, 1, 1, 1])
l17, l18, l19, l20 = sch.split(loop=l5, factors=[v13, v14, v15, v16], preserve_unit_iters=True)
v21, v22, v23, v24 = sch.sample_perfect_tile(loop=l6, n=4, max_innermost_factor=64, decision=[2, 1, 4, 2])
l25, l26, l27, l28 = sch.split(loop=l6, factors=[v21, v22, v23, v24], preserve_unit_iters=True)
v29, v30, v31, v32 = sch.sample_perfect_tile(loop=l7, n=4, max_innermost_factor=64, decision=[7, 1, 1, 1])
l33, l34, l35, l36 = sch.split(loop=l7, factors=[v29, v30, v31, v32], preserve_unit_iters=True)
v37, v38, v39, v40 = sch.sample_perfect_tile(loop=l8, n=4, max_innermost_factor=64, decision=[1, 1, 1, 7])
l41, l42, l43, l44 = sch.split(loop=l8, factors=[v37, v38, v39, v40], preserve_unit_iters=True)
v45, v46, v47, v48 = sch.sample_perfect_tile(loop=l9, n=4, max_innermost_factor=64, decision=[8, 1, 4, 1])
l49, l50, l51, l52 = sch.split(loop=l9, factors=[v45, v46, v47, v48], preserve_unit_iters=True)
v53, v54 = sch.sample_perfect_tile(loop=l10, n=2, max_innermost_factor=64, decision=[16, 32])
l55, l56 = sch.split(loop=l10, factors=[v53, v54], preserve_unit_iters=True)
v57, v58 = sch.sample_perfect_tile(loop=l11, n=2, max_innermost_factor=64, decision=[3, 1])
l59, l60 = sch.split(loop=l11, factors=[v57, v58], preserve_unit_iters=True)
v61, v62 = sch.sample_perfect_tile(loop=l12, n=2, max_innermost_factor=64, decision=[3, 1])
l63, l64 = sch.split(loop=l12, factors=[v61, v62], preserve_unit_iters=True)
sch.reorder(l17, l25, l33, l41, l49, l18, l26, l34, l42, l50, l55, l59, l63, l19, l27, l35, l43, l51, l56, l60, l64, l20, l28, l36, l44, l52)
b65, = sch.get_consumers(block=b1)
sch.reverse_compute_at(block=b65, loop=l49, preserve_unit_loops=True, index=-1)
sch.annotate(block_or_loop=b4, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b4, ann_key="meta_schedule.vectorize", ann_val=64)
v66 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b4, ann_key="meta_schedule.unroll_explicit", ann_val=v66)
l67 = sch.sample_compute_location(block=b0, decision=10)
sch.compute_at(block=b0, loop=l67, preserve_unit_loops=True, index=-1)
sch.enter_postproc()
b68 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b68, ann_key="meta_schedule.parallel")
sch.unannotate(block_or_loop=b68, ann_key="meta_schedule.vectorize")
sch.unannotate(block_or_loop=b68, ann_key="meta_schedule.unroll_explicit")
b69, b70, b71 = sch.get_child_blocks(b68)
l72, l73, l74, l75, l76, l77, l78, l79, l80, l81, l82, l83, l84, l85, l86, l87 = sch.get_loops(block=b69)
l88 = sch.fuse(l72, l73, l74, l75, l76, preserve_unit_iters=True)
sch.parallel(loop=l88)
l89 = sch.fuse(l87, preserve_unit_iters=True)
sch.vectorize(loop=l89)
l90, l91, l92, l93, l94, l95, l96, l97, l98, l99, l100, l101, l102, l103, l104, l105, l106, l107, l108, l109, l110, l111 = sch.get_loops(block=b70)
l112 = sch.fuse(l90, preserve_unit_iters=True)
sch.parallel(loop=l112)
sch.annotate(block_or_loop=l112, ann_key="pragma_auto_unroll_max_step", ann_val=512)
sch.annotate(block_or_loop=l112, ann_key="pragma_unroll_explicit", ann_val=1)
l113, l114, l115, l116, l117, l118 = sch.get_loops(block=b71)
l119 = sch.fuse(l118, preserve_unit_iters=True)
sch.vectorize(loop=l119)
b120 = sch.get_block(name="conv2d_NCHWc", func_name="main")
l121, l122, l123, l124, l125, l126, l127, l128, l129, l130, l131, l132, l133, l134, l135, l136, l137, l138, l139, l140, l141, l142 = sch.get_loops(block=b120)
b143 = sch.decompose_reduction(block=b120, loop=l127)
2024-04-29 05:06:15 [INFO] [task_scheduler.cc:131] [Task #26: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_3] Trial #361: GFLOPs: 115.6352. Time: 2000.1374 us. Best GFLOPs: 671.5908
2024-04-29 05:06:15 [INFO] [task_scheduler.cc:131] [Task #26: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_3] Trial #362: GFLOPs: 216.9459. Time: 1066.1010 us. Best GFLOPs: 671.5908
2024-04-29 05:06:15 [INFO] [task_scheduler.cc:131] [Task #26: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_3] Trial #363: GFLOPs: 22.1731. Time: 10430.9206 us. Best GFLOPs: 671.5908
2024-04-29 05:06:15 [INFO] [task_scheduler.cc:131] [Task #26: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_3] Trial #364: GFLOPs: 129.4725. Time: 1786.3743 us. Best GFLOPs: 671.5908
2024-04-29 05:06:15 [INFO] [task_scheduler.cc:131] [Task #26: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_3] Trial #365: GFLOPs: 106.7503. Time: 2166.6106 us. Best GFLOPs: 671.5908
2024-04-29 05:06:15 [INFO] [task_scheduler.cc:131] [Task #26: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_3] Trial #366: GFLOPs: 202.6054. Time: 1141.5602 us. Best GFLOPs: 671.5908
2024-04-29 05:06:15 [INFO] [task_scheduler.cc:131] [Task #26: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_3] Trial #367: GFLOPs: 95.3738. Time: 2425.0514 us. Best GFLOPs: 671.5908
2024-04-29 05:06:15 [INFO] [task_scheduler.cc:131] [Task #26: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_3] Trial #368: GFLOPs: 205.5372. Time: 1125.2771 us. Best GFLOPs: 671.5908
2024-04-29 05:06:15 [INFO] [task_scheduler.cc:131] [Task #26: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_3] Trial #369: GFLOPs: 155.8820. Time: 1483.7264 us. Best GFLOPs: 671.5908
2024-04-29 05:06:15 [INFO] [task_scheduler.cc:131] [Task #26: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_3] Trial #370: GFLOPs: 208.3903. Time: 1109.8705 us. Best GFLOPs: 671.5908
2024-04-29 05:06:15 [INFO] [task_scheduler.cc:131] [Task #26: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_3] Trial #371: GFLOPs: 210.8586. Time: 1096.8785 us. Best GFLOPs: 671.5908
2024-04-29 05:06:15 [INFO] [task_scheduler.cc:131] [Task #26: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_3] Trial #372: GFLOPs: 176.1266. Time: 1313.1819 us. Best GFLOPs: 671.5908
2024-04-29 05:06:15 [INFO] [task_scheduler.cc:131] [Task #26: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_3] Trial #373: GFLOPs: 175.6926. Time: 1316.4257 us. Best GFLOPs: 671.5908
2024-04-29 05:06:15 [INFO] [task_scheduler.cc:131] [Task #26: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_3] Trial #374: GFLOPs: 575.8334. Time: 401.6548 us. Best GFLOPs: 671.5908
2024-04-29 05:06:15 [INFO] [task_scheduler.cc:131] [Task #26: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_3] Trial #375: GFLOPs: 21.5994. Time: 10707.9912 us. Best GFLOPs: 671.5908
2024-04-29 05:06:15 [INFO] [task_scheduler.cc:131] [Task #26: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_3] Trial #376: GFLOPs: 160.6908. Time: 1439.3252 us. Best GFLOPs: 671.5908
2024-04-29 05:06:15 [INFO] [task_scheduler.cc:131] [Task #26: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_3] Trial #377: GFLOPs: 448.4585. Time: 515.7362 us. Best GFLOPs: 671.5908
2024-04-29 05:06:15 [INFO] [task_scheduler.cc:131] [Task #26: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_3] Trial #378: GFLOPs: 123.5461. Time: 1872.0643 us. Best GFLOPs: 671.5908
2024-04-29 05:06:15 [INFO] [task_scheduler.cc:131] [Task #26: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_3] Trial #379: GFLOPs: 152.6036. Time: 1515.6014 us. Best GFLOPs: 671.5908
2024-04-29 05:06:15 [INFO] [task_scheduler.cc:131] [Task #26: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_3] Trial #380: GFLOPs: 153.0504. Time: 1511.1771 us. Best GFLOPs: 671.5908
2024-04-29 05:06:15 [INFO] [task_scheduler.cc:131] [Task #26: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_3] Trial #381: GFLOPs: 243.7378. Time: 948.9142 us. Best GFLOPs: 671.5908
2024-04-29 05:06:15 [INFO] [task_scheduler.cc:121] [Task #26: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_3] Trial #382: Error in building:
LocalBuilder: Timeout, killed after 30.0 seconds
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(1), T.int64(7), T.int64(7), T.int64(512)), "float32"), p1: T.Buffer((T.int64(16), T.int64(1), T.int64(3), T.int64(3), T.int64(512), T.int64(32)), "float32"), p2: T.Buffer((T.int64(1), T.int64(16), T.int64(1), T.int64(1), T.int64(32)), "float32"), p3: T.Buffer((T.int64(1), T.int64(16), T.int64(7), T.int64(7), T.int64(32)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(16), T.int64(7), T.int64(7), T.int64(32)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        data_pad = T.alloc_buffer((T.int64(1), T.int64(1), T.int64(9), T.int64(9), T.int64(512)))
        conv2d_NCHWc = T.alloc_buffer((T.int64(1), T.int64(16), T.int64(7), T.int64(7), T.int64(32)))
        for n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_fused_fused in T.parallel(T.int64(448), annotations={"pragma_auto_unroll_max_step": 512, "pragma_unroll_explicit": 1}):
            for ax0, ax1, ax2, ax3, ax4 in T.grid(T.int64(1), T.int64(1), T.int64(3), T.int64(9), T.int64(512)):
                with T.block("data_pad"):
                    v_i0, v_i1 = T.axis.remap("SS", [ax0, ax1])
                    v_i2 = T.axis.spatial(T.int64(9), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_fused_fused // T.int64(64) + ax2)
                    v_i3, v_i4 = T.axis.remap("SS", [ax3, ax4])
                    T.reads(p0[v_i0, v_i1, v_i2 - T.int64(1), v_i3 - T.int64(1), v_i4])
                    T.writes(data_pad[v_i0, v_i1, v_i2, v_i3, v_i4])
                    data_pad[v_i0, v_i1, v_i2, v_i3, v_i4] = T.if_then_else(T.int64(1) <= v_i2 and v_i2 < T.int64(8) and T.int64(1) <= v_i3 and v_i3 < T.int64(8), p0[v_i0, v_i1, v_i2 - T.int64(1), v_i3 - T.int64(1), v_i4], T.float32(0))
            for oh_1, ow_1, oc_block_1 in T.grid(T.int64(1), T.int64(1), T.int64(2)):
                for n_2_init, oc_chunk_2_init, oh_2_init, ow_2_init, oc_block_2_init, n_3_init, oc_chunk_3_init, oh_3_init, ow_3_init in T.grid(T.int64(1), T.int64(1), T.int64(1), T.int64(7), T.int64(1), T.int64(1), T.int64(2), T.int64(1), T.int64(1)):
                    for oc_block_3_fused_init in T.vectorized(T.int64(2)):
                        with T.block("conv2d_NCHWc_init"):
                            v_n = T.axis.spatial(T.int64(1), n_2_init + n_3_init)
                            v_oc_chunk = T.axis.spatial(T.int64(16), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_fused_fused % T.int64(8) * T.int64(2) + oc_chunk_2_init * T.int64(2) + oc_chunk_3_init)
                            v_oh = T.axis.spatial(T.int64(7), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_fused_fused // T.int64(64) + oh_1 + oh_2_init + oh_3_init)
                            v_ow = T.axis.spatial(T.int64(7), ow_1 * T.int64(7) + ow_2_init + ow_3_init)
                            v_oc_block = T.axis.spatial(T.int64(32), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_fused_fused % T.int64(64) // T.int64(8) * T.int64(4) + oc_block_1 * T.int64(2) + oc_block_2_init * T.int64(2) + oc_block_3_fused_init)
                            T.reads()
                            T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                            T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                            conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = T.float32(0)
                for ic_0, kh_0, kw_0, n_2, oc_chunk_2, oh_2, ow_2, oc_block_2, ic_1, kh_1, kw_1, n_3, oc_chunk_3, oh_3, ow_3 in T.grid(T.int64(64), T.int64(1), T.int64(3), T.int64(1), T.int64(1), T.int64(1), T.int64(7), T.int64(1), T.int64(8), T.int64(3), T.int64(1), T.int64(1), T.int64(2), T.int64(1), T.int64(1)):
                    for oc_block_3_fused in T.vectorized(T.int64(2)):
                        with T.block("conv2d_NCHWc_update"):
                            v_n = T.axis.spatial(T.int64(1), n_2 + n_3)
                            v_oc_chunk = T.axis.spatial(T.int64(16), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_fused_fused % T.int64(8) * T.int64(2) + oc_chunk_2 * T.int64(2) + oc_chunk_3)
                            v_oh = T.axis.spatial(T.int64(7), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_fused_fused // T.int64(64) + oh_1 + oh_2 + oh_3)
                            v_ow = T.axis.spatial(T.int64(7), ow_1 * T.int64(7) + ow_2 + ow_3)
                            v_oc_block = T.axis.spatial(T.int64(32), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_fused_fused % T.int64(64) // T.int64(8) * T.int64(4) + oc_block_1 * T.int64(2) + oc_block_2 * T.int64(2) + oc_block_3_fused)
                            v_ic = T.axis.reduce(T.int64(512), ic_0 * T.int64(8) + ic_1)
                            v_kh = T.axis.reduce(T.int64(3), kh_0 * T.int64(3) + kh_1)
                            v_kw = T.axis.reduce(T.int64(3), kw_0 + kw_1)
                            T.reads(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block], data_pad[v_n, v_ic // T.int64(512), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(512)], p1[v_oc_chunk, v_ic // T.int64(512), v_kh, v_kw, v_ic % T.int64(512), v_oc_block])
                            T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                            T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                            conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] + data_pad[v_n, v_ic // T.int64(512), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(512)] * p1[v_oc_chunk, v_ic // T.int64(512), v_kh, v_kw, v_ic % T.int64(512), v_oc_block]
                for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(2), T.int64(1), T.int64(7)):
                    for ax4_fused in T.vectorized(T.int64(2)):
                        with T.block("T_relu"):
                            v_ax0 = T.axis.spatial(T.int64(1), ax0)
                            v_ax1 = T.axis.spatial(T.int64(16), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_fused_fused % T.int64(8) * T.int64(2) + ax1)
                            v_ax2 = T.axis.spatial(T.int64(7), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_fused_fused // T.int64(64) + ax2)
                            v_ax3 = T.axis.spatial(T.int64(7), ax3)
                            v_ax4 = T.axis.spatial(T.int64(32), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_fused_fused % T.int64(64) // T.int64(8) * T.int64(4) + oc_block_1 * T.int64(2) + ax4_fused)
                            T.reads(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4], p3[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                            T.writes(T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                            T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.max(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] + p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4] + p3[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], T.float32(0))
b0 = sch.get_block(name="data_pad", func_name="main")
b1 = sch.get_block(name="conv2d_NCHWc", func_name="main")
b2 = sch.get_block(name="T_add", func_name="main")
b3 = sch.get_block(name="T_add_1", func_name="main")
b4 = sch.get_block(name="root", func_name="main")
sch.compute_inline(block=b3)
sch.compute_inline(block=b2)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSRSRS")
l5, l6, l7, l8, l9, l10, l11, l12 = sch.get_loops(block=b1)
v13, v14, v15, v16 = sch.sample_perfect_tile(loop=l5, n=4, max_innermost_factor=64, decision=[1, 1, 1, 1])
l17, l18, l19, l20 = sch.split(loop=l5, factors=[v13, v14, v15, v16], preserve_unit_iters=True)
v21, v22, v23, v24 = sch.sample_perfect_tile(loop=l6, n=4, max_innermost_factor=64, decision=[1, 8, 1, 2])
l25, l26, l27, l28 = sch.split(loop=l6, factors=[v21, v22, v23, v24], preserve_unit_iters=True)
v29, v30, v31, v32 = sch.sample_perfect_tile(loop=l7, n=4, max_innermost_factor=64, decision=[7, 1, 1, 1])
l33, l34, l35, l36 = sch.split(loop=l7, factors=[v29, v30, v31, v32], preserve_unit_iters=True)
v37, v38, v39, v40 = sch.sample_perfect_tile(loop=l8, n=4, max_innermost_factor=64, decision=[1, 1, 7, 1])
l41, l42, l43, l44 = sch.split(loop=l8, factors=[v37, v38, v39, v40], preserve_unit_iters=True)
v45, v46, v47, v48 = sch.sample_perfect_tile(loop=l9, n=4, max_innermost_factor=64, decision=[8, 2, 1, 2])
l49, l50, l51, l52 = sch.split(loop=l9, factors=[v45, v46, v47, v48], preserve_unit_iters=True)
v53, v54 = sch.sample_perfect_tile(loop=l10, n=2, max_innermost_factor=64, decision=[64, 8])
l55, l56 = sch.split(loop=l10, factors=[v53, v54], preserve_unit_iters=True)
v57, v58 = sch.sample_perfect_tile(loop=l11, n=2, max_innermost_factor=64, decision=[1, 3])
l59, l60 = sch.split(loop=l11, factors=[v57, v58], preserve_unit_iters=True)
v61, v62 = sch.sample_perfect_tile(loop=l12, n=2, max_innermost_factor=64, decision=[3, 1])
l63, l64 = sch.split(loop=l12, factors=[v61, v62], preserve_unit_iters=True)
sch.reorder(l17, l25, l33, l41, l49, l18, l26, l34, l42, l50, l55, l59, l63, l19, l27, l35, l43, l51, l56, l60, l64, l20, l28, l36, l44, l52)
b65, = sch.get_consumers(block=b1)
sch.reverse_compute_at(block=b65, loop=l50, preserve_unit_loops=True, index=-1)
sch.annotate(block_or_loop=b4, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b4, ann_key="meta_schedule.vectorize", ann_val=64)
v66 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b4, ann_key="meta_schedule.unroll_explicit", ann_val=v66)
l67 = sch.sample_compute_location(block=b0, decision=6)
sch.compute_at(block=b0, loop=l67, preserve_unit_loops=True, index=-1)
sch.enter_postproc()
b68 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b68, ann_key="meta_schedule.parallel")
sch.unannotate(block_or_loop=b68, ann_key="meta_schedule.vectorize")
sch.unannotate(block_or_loop=b68, ann_key="meta_schedule.unroll_explicit")
b69, b70, b71 = sch.get_child_blocks(b68)
l72, l73, l74, l75, l76, l77, l78, l79, l80, l81, l82, l83 = sch.get_loops(block=b69)
l84 = sch.fuse(l72, l73, l74, l75, l76, l77, l78, preserve_unit_iters=True)
sch.parallel(loop=l84)
l85, l86, l87, l88, l89, l90, l91, l92, l93, l94, l95, l96, l97, l98, l99, l100, l101, l102, l103, l104 = sch.get_loops(block=b70)
l105 = sch.fuse(l85, preserve_unit_iters=True)
sch.parallel(loop=l105)
l106 = sch.fuse(l104, preserve_unit_iters=True)
sch.vectorize(loop=l106)
sch.annotate(block_or_loop=l105, ann_key="pragma_auto_unroll_max_step", ann_val=512)
sch.annotate(block_or_loop=l105, ann_key="pragma_unroll_explicit", ann_val=1)
l107, l108, l109, l110, l111, l112, l113, l114, l115 = sch.get_loops(block=b71)
l116 = sch.fuse(l115, preserve_unit_iters=True)
sch.vectorize(loop=l116)
b117 = sch.get_block(name="conv2d_NCHWc", func_name="main")
l118, l119, l120, l121, l122, l123, l124, l125, l126, l127, l128, l129, l130, l131, l132, l133, l134, l135, l136, l137 = sch.get_loops(block=b117)
b138 = sch.decompose_reduction(block=b117, loop=l122)
2024-04-29 05:06:15 [INFO] [task_scheduler.cc:131] [Task #26: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_3] Trial #383: GFLOPs: 32.8466. Time: 7041.4019 us. Best GFLOPs: 671.5908
2024-04-29 05:06:15 [INFO] [task_scheduler.cc:131] [Task #26: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_3] Trial #384: GFLOPs: 1.0087. Time: 229302.0110 us. Best GFLOPs: 671.5908
2024-04-29 05:48:44 [INFO] [evolutionary_search.cc:713] Generating candidates......
2024-04-29 05:48:45 [INFO] [evolutionary_search.cc:715] Picked top 102 candidate(s) from database
2024-04-29 05:48:49 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x36363d8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x4388aa8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x3310908)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x3246458)]: 0 failure(s)
2024-04-29 05:48:49 [INFO] [evolutionary_search.cc:723] Sampled 410 candidate(s)
2024-04-29 05:49:00 [INFO] [evolutionary_search.cc:621] Evolve iter #0 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x36363d8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x4388aa8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x3310908)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x3246458)]: 0 failure(s)
2024-04-29 05:49:11 [INFO] [evolutionary_search.cc:621] Evolve iter #1 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x36363d8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x4388aa8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x3310908)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x3246458)]: 0 failure(s)
2024-04-29 05:49:22 [INFO] [evolutionary_search.cc:621] Evolve iter #2 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x36363d8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x4388aa8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x3310908)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x3246458)]: 0 failure(s)
2024-04-29 05:49:33 [INFO] [evolutionary_search.cc:621] Evolve iter #3 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x36363d8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x4388aa8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x3310908)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x3246458)]: 0 failure(s)
2024-04-29 05:49:40 [INFO] [evolutionary_search.cc:649] Scores of the best 64 candidates:
[1 : 16]:	0.9486  0.8738  0.8693  0.8344  0.8331  0.8331  0.8321  0.8025  0.8025  0.8018  0.8018  0.8014  0.8014  0.7997  0.7997  0.7973
[17 : 32]:	0.7973  0.7892  0.7867  0.7835  0.7822  0.7774  0.7774  0.7774  0.7666  0.7647  0.7609  0.7590  0.7490  0.7483  0.7459  0.7453
[33 : 48]:	0.7414  0.7365  0.7346  0.7322  0.7282  0.7260  0.7167  0.7116  0.7023  0.7016  0.6947  0.6919  0.6919  0.6903  0.6860  0.6860
[49 : 64]:	0.6813  0.6804  0.6804  0.6753  0.6741  0.6696  0.6665  0.6632  0.6573  0.6494  0.6494  0.6483  0.6379  0.6379  0.6350  0.6350
2024-04-29 05:49:40 [INFO] [evolutionary_search.cc:727] Got 64 candidate(s) with evolutionary search
2024-04-29 05:49:40 [INFO] [evolutionary_search.cc:730] Sending 64 candidates(s) for measurement
2024-04-29 05:51:32 [INFO] [task_scheduler.cc:131] [Task #26: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_3] Trial #385: GFLOPs: 642.0097. Time: 360.2536 us. Best GFLOPs: 671.5908
2024-04-29 05:51:32 [INFO] [task_scheduler.cc:131] [Task #26: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_3] Trial #386: GFLOPs: 570.0481. Time: 405.7312 us. Best GFLOPs: 671.5908
2024-04-29 05:51:32 [INFO] [task_scheduler.cc:131] [Task #26: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_3] Trial #387: GFLOPs: 630.9559. Time: 366.5649 us. Best GFLOPs: 671.5908
2024-04-29 05:51:32 [INFO] [task_scheduler.cc:131] [Task #26: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_3] Trial #388: GFLOPs: 533.8404. Time: 433.2498 us. Best GFLOPs: 671.5908
2024-04-29 05:51:32 [INFO] [task_scheduler.cc:131] [Task #26: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_3] Trial #389: GFLOPs: 527.7992. Time: 438.2088 us. Best GFLOPs: 671.5908
2024-04-29 05:51:32 [INFO] [task_scheduler.cc:131] [Task #26: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_3] Trial #390: GFLOPs: 567.2613. Time: 407.7244 us. Best GFLOPs: 671.5908
2024-04-29 05:51:32 [INFO] [task_scheduler.cc:131] [Task #26: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_3] Trial #391: GFLOPs: 572.5202. Time: 403.9792 us. Best GFLOPs: 671.5908
2024-04-29 05:51:32 [INFO] [task_scheduler.cc:131] [Task #26: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_3] Trial #392: GFLOPs: 532.8051. Time: 434.0917 us. Best GFLOPs: 671.5908
2024-04-29 05:51:32 [INFO] [task_scheduler.cc:131] [Task #26: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_3] Trial #393: GFLOPs: 529.3012. Time: 436.9653 us. Best GFLOPs: 671.5908
2024-04-29 05:51:32 [INFO] [task_scheduler.cc:131] [Task #26: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_3] Trial #394: GFLOPs: 676.9482. Time: 341.6602 us. Best GFLOPs: 676.9482
2024-04-29 05:51:32 [INFO] [task_scheduler.cc:131] [Task #26: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_3] Trial #395: GFLOPs: 581.7900. Time: 397.5425 us. Best GFLOPs: 676.9482
2024-04-29 05:51:32 [INFO] [task_scheduler.cc:131] [Task #26: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_3] Trial #396: GFLOPs: 113.6517. Time: 2035.0448 us. Best GFLOPs: 676.9482
2024-04-29 05:51:32 [INFO] [task_scheduler.cc:131] [Task #26: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_3] Trial #397: GFLOPs: 116.0133. Time: 1993.6182 us. Best GFLOPs: 676.9482
2024-04-29 05:51:32 [INFO] [task_scheduler.cc:131] [Task #26: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_3] Trial #398: GFLOPs: 562.9105. Time: 410.8757 us. Best GFLOPs: 676.9482
2024-04-29 05:51:32 [INFO] [task_scheduler.cc:131] [Task #26: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_3] Trial #399: GFLOPs: 543.9989. Time: 425.1595 us. Best GFLOPs: 676.9482
2024-04-29 05:51:32 [INFO] [task_scheduler.cc:131] [Task #26: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_3] Trial #400: GFLOPs: 475.4380. Time: 486.4698 us. Best GFLOPs: 676.9482
2024-04-29 05:51:32 [INFO] [task_scheduler.cc:131] [Task #26: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_3] Trial #401: GFLOPs: 449.7137. Time: 514.2967 us. Best GFLOPs: 676.9482
2024-04-29 05:51:32 [INFO] [task_scheduler.cc:131] [Task #26: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_3] Trial #402: GFLOPs: 396.9111. Time: 582.7155 us. Best GFLOPs: 676.9482
2024-04-29 05:51:32 [INFO] [task_scheduler.cc:131] [Task #26: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_3] Trial #403: GFLOPs: 306.0254. Time: 755.7747 us. Best GFLOPs: 676.9482
2024-04-29 05:51:32 [INFO] [task_scheduler.cc:131] [Task #26: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_3] Trial #404: GFLOPs: 422.2873. Time: 547.6989 us. Best GFLOPs: 676.9482
2024-04-29 05:51:32 [INFO] [task_scheduler.cc:131] [Task #26: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_3] Trial #405: GFLOPs: 564.4669. Time: 409.7428 us. Best GFLOPs: 676.9482
2024-04-29 05:51:32 [INFO] [task_scheduler.cc:131] [Task #26: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_3] Trial #406: GFLOPs: 508.0252. Time: 455.2654 us. Best GFLOPs: 676.9482
2024-04-29 05:51:32 [INFO] [task_scheduler.cc:131] [Task #26: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_3] Trial #407: GFLOPs: 531.3564. Time: 435.2752 us. Best GFLOPs: 676.9482
2024-04-29 05:51:32 [INFO] [task_scheduler.cc:131] [Task #26: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_3] Trial #408: GFLOPs: 504.1578. Time: 458.7577 us. Best GFLOPs: 676.9482
2024-04-29 05:51:32 [INFO] [task_scheduler.cc:131] [Task #26: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_3] Trial #409: GFLOPs: 580.8311. Time: 398.1989 us. Best GFLOPs: 676.9482
2024-04-29 05:51:32 [INFO] [task_scheduler.cc:131] [Task #26: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_3] Trial #410: GFLOPs: 677.2841. Time: 341.4908 us. Best GFLOPs: 677.2841
2024-04-29 05:51:32 [INFO] [task_scheduler.cc:131] [Task #26: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_3] Trial #411: GFLOPs: 408.5135. Time: 566.1655 us. Best GFLOPs: 677.2841
2024-04-29 05:51:32 [INFO] [task_scheduler.cc:131] [Task #26: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_3] Trial #412: GFLOPs: 464.1001. Time: 498.3543 us. Best GFLOPs: 677.2841
2024-04-29 05:51:32 [INFO] [task_scheduler.cc:131] [Task #26: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_3] Trial #413: GFLOPs: 642.5828. Time: 359.9322 us. Best GFLOPs: 677.2841
2024-04-29 05:51:32 [INFO] [task_scheduler.cc:131] [Task #26: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_3] Trial #414: GFLOPs: 563.5872. Time: 410.3824 us. Best GFLOPs: 677.2841
2024-04-29 05:51:32 [INFO] [task_scheduler.cc:131] [Task #26: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_3] Trial #415: GFLOPs: 625.8588. Time: 369.5503 us. Best GFLOPs: 677.2841
2024-04-29 05:51:32 [INFO] [task_scheduler.cc:131] [Task #26: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_3] Trial #416: GFLOPs: 442.5328. Time: 522.6421 us. Best GFLOPs: 677.2841
2024-04-29 05:51:32 [INFO] [task_scheduler.cc:131] [Task #26: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_3] Trial #417: GFLOPs: 393.3588. Time: 587.9779 us. Best GFLOPs: 677.2841
2024-04-29 05:51:32 [INFO] [task_scheduler.cc:131] [Task #26: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_3] Trial #418: GFLOPs: 495.5048. Time: 466.7690 us. Best GFLOPs: 677.2841
2024-04-29 05:51:32 [INFO] [task_scheduler.cc:131] [Task #26: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_3] Trial #419: GFLOPs: 421.7746. Time: 548.3646 us. Best GFLOPs: 677.2841
2024-04-29 05:51:32 [INFO] [task_scheduler.cc:131] [Task #26: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_3] Trial #420: GFLOPs: 541.5971. Time: 427.0449 us. Best GFLOPs: 677.2841
2024-04-29 05:51:32 [INFO] [task_scheduler.cc:131] [Task #26: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_3] Trial #421: GFLOPs: 535.7567. Time: 431.7002 us. Best GFLOPs: 677.2841
2024-04-29 05:51:32 [INFO] [task_scheduler.cc:131] [Task #26: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_3] Trial #422: GFLOPs: 490.0148. Time: 471.9985 us. Best GFLOPs: 677.2841
2024-04-29 05:51:32 [INFO] [task_scheduler.cc:131] [Task #26: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_3] Trial #423: GFLOPs: 550.0738. Time: 420.4640 us. Best GFLOPs: 677.2841
2024-04-29 05:51:32 [INFO] [task_scheduler.cc:131] [Task #26: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_3] Trial #424: GFLOPs: 539.2538. Time: 428.9006 us. Best GFLOPs: 677.2841
2024-04-29 05:51:32 [INFO] [task_scheduler.cc:131] [Task #26: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_3] Trial #425: GFLOPs: 117.6634. Time: 1965.6609 us. Best GFLOPs: 677.2841
2024-04-29 05:51:32 [INFO] [task_scheduler.cc:131] [Task #26: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_3] Trial #426: GFLOPs: 577.6185. Time: 400.4136 us. Best GFLOPs: 677.2841
2024-04-29 05:51:32 [INFO] [task_scheduler.cc:131] [Task #26: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_3] Trial #427: GFLOPs: 536.7198. Time: 430.9255 us. Best GFLOPs: 677.2841
2024-04-29 05:51:32 [INFO] [task_scheduler.cc:131] [Task #26: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_3] Trial #428: GFLOPs: 351.0447. Time: 658.8513 us. Best GFLOPs: 677.2841
2024-04-29 05:51:32 [INFO] [task_scheduler.cc:131] [Task #26: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_3] Trial #429: GFLOPs: 443.9798. Time: 520.9388 us. Best GFLOPs: 677.2841
2024-04-29 05:51:32 [INFO] [task_scheduler.cc:131] [Task #26: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_3] Trial #430: GFLOPs: 504.7730. Time: 458.1986 us. Best GFLOPs: 677.2841
2024-04-29 05:51:32 [INFO] [task_scheduler.cc:131] [Task #26: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_3] Trial #431: GFLOPs: 489.0622. Time: 472.9179 us. Best GFLOPs: 677.2841
2024-04-29 05:51:32 [INFO] [task_scheduler.cc:131] [Task #26: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_3] Trial #432: GFLOPs: 489.2669. Time: 472.7200 us. Best GFLOPs: 677.2841
2024-04-29 05:51:32 [INFO] [task_scheduler.cc:131] [Task #26: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_3] Trial #433: GFLOPs: 703.6100. Time: 328.7137 us. Best GFLOPs: 703.6100
2024-04-29 05:51:32 [INFO] [task_scheduler.cc:131] [Task #26: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_3] Trial #434: GFLOPs: 481.4326. Time: 480.4126 us. Best GFLOPs: 703.6100
2024-04-29 05:51:32 [INFO] [task_scheduler.cc:131] [Task #26: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_3] Trial #435: GFLOPs: 441.2892. Time: 524.1150 us. Best GFLOPs: 703.6100
2024-04-29 05:51:32 [INFO] [task_scheduler.cc:131] [Task #26: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_3] Trial #436: GFLOPs: 625.6507. Time: 369.6732 us. Best GFLOPs: 703.6100
2024-04-29 05:51:32 [INFO] [task_scheduler.cc:131] [Task #26: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_3] Trial #437: GFLOPs: 482.1773. Time: 479.6706 us. Best GFLOPs: 703.6100
2024-04-29 05:51:32 [INFO] [task_scheduler.cc:131] [Task #26: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_3] Trial #438: GFLOPs: 453.5801. Time: 509.9127 us. Best GFLOPs: 703.6100
2024-04-29 05:51:32 [INFO] [task_scheduler.cc:131] [Task #26: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_3] Trial #439: GFLOPs: 453.0116. Time: 510.5526 us. Best GFLOPs: 703.6100
2024-04-29 05:51:32 [INFO] [task_scheduler.cc:131] [Task #26: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_3] Trial #440: GFLOPs: 574.2079. Time: 402.7919 us. Best GFLOPs: 703.6100
2024-04-29 05:51:32 [INFO] [task_scheduler.cc:131] [Task #26: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_3] Trial #441: GFLOPs: 404.9157. Time: 571.1961 us. Best GFLOPs: 703.6100
2024-04-29 05:51:32 [INFO] [task_scheduler.cc:131] [Task #26: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_3] Trial #442: GFLOPs: 388.9912. Time: 594.5798 us. Best GFLOPs: 703.6100
2024-04-29 05:51:32 [INFO] [task_scheduler.cc:131] [Task #26: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_3] Trial #443: GFLOPs: 302.6523. Time: 764.1980 us. Best GFLOPs: 703.6100
2024-04-29 05:51:32 [INFO] [task_scheduler.cc:131] [Task #26: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_3] Trial #444: GFLOPs: 409.4685. Time: 564.8450 us. Best GFLOPs: 703.6100
2024-04-29 05:51:32 [INFO] [task_scheduler.cc:131] [Task #26: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_3] Trial #445: GFLOPs: 464.0103. Time: 498.4508 us. Best GFLOPs: 703.6100
2024-04-29 05:51:32 [INFO] [task_scheduler.cc:131] [Task #26: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_3] Trial #446: GFLOPs: 6.1684. Time: 37495.0853 us. Best GFLOPs: 703.6100
2024-04-29 05:51:32 [INFO] [task_scheduler.cc:121] [Task #26: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_3] Trial #447: Error in building:
LocalBuilder: Timeout, killed after 30.0 seconds
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(1), T.int64(7), T.int64(7), T.int64(512)), "float32"), p1: T.Buffer((T.int64(16), T.int64(1), T.int64(3), T.int64(3), T.int64(512), T.int64(32)), "float32"), p2: T.Buffer((T.int64(1), T.int64(16), T.int64(1), T.int64(1), T.int64(32)), "float32"), p3: T.Buffer((T.int64(1), T.int64(16), T.int64(7), T.int64(7), T.int64(32)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(16), T.int64(7), T.int64(7), T.int64(32)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        data_pad = T.alloc_buffer((T.int64(1), T.int64(1), T.int64(9), T.int64(9), T.int64(512)))
        conv2d_NCHWc = T.alloc_buffer((T.int64(1), T.int64(16), T.int64(7), T.int64(7), T.int64(32)))
        for n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_fused_fused in T.parallel(T.int64(16), annotations={"pragma_auto_unroll_max_step": 512, "pragma_unroll_explicit": 1}):
            for n_1, oc_chunk_1, oh_1, ow_1, oc_block_1 in T.grid(T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1)):
                for n_2_init, oc_chunk_2_init, oh_2_init, ow_2_init, oc_block_2_init, n_3_init, oc_chunk_3_init, oh_3_init, ow_3_init in T.grid(T.int64(1), T.int64(1), T.int64(1), T.int64(7), T.int64(2), T.int64(1), T.int64(4), T.int64(7), T.int64(1)):
                    for oc_block_3_fused_init in T.vectorized(T.int64(4)):
                        with T.block("conv2d_NCHWc_init"):
                            v_n = T.axis.spatial(T.int64(1), n_1 + n_2_init + n_3_init)
                            v_oc_chunk = T.axis.spatial(T.int64(16), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_fused_fused // T.int64(4) * T.int64(4) + oc_chunk_1 * T.int64(4) + oc_chunk_2_init * T.int64(4) + oc_chunk_3_init)
                            v_oh = T.axis.spatial(T.int64(7), oh_1 * T.int64(7) + oh_2_init * T.int64(7) + oh_3_init)
                            v_ow = T.axis.spatial(T.int64(7), ow_1 * T.int64(7) + ow_2_init + ow_3_init)
                            v_oc_block = T.axis.spatial(T.int64(32), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_fused_fused % T.int64(4) * T.int64(8) + oc_block_1 * T.int64(8) + oc_block_2_init * T.int64(4) + oc_block_3_fused_init)
                            T.reads()
                            T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                            T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                            conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = T.float32(0)
                for ic_0 in range(T.int64(512)):
                    for ax0, ax1, ax2, ax3, ax4 in T.grid(T.int64(1), T.int64(1), T.int64(9), T.int64(9), T.int64(1)):
                        with T.block("data_pad"):
                            v_i0, v_i1, v_i2, v_i3 = T.axis.remap("SSSS", [ax0, ax1, ax2, ax3])
                            v_i4 = T.axis.spatial(T.int64(512), ic_0 + ax4)
                            T.reads(p0[v_i0, v_i1, v_i2 - T.int64(1), v_i3 - T.int64(1), v_i4])
                            T.writes(data_pad[v_i0, v_i1, v_i2, v_i3, v_i4])
                            data_pad[v_i0, v_i1, v_i2, v_i3, v_i4] = T.if_then_else(T.int64(1) <= v_i2 and v_i2 < T.int64(8) and T.int64(1) <= v_i3 and v_i3 < T.int64(8), p0[v_i0, v_i1, v_i2 - T.int64(1), v_i3 - T.int64(1), v_i4], T.float32(0))
                    for kh_0, kw_0, n_2, oc_chunk_2, oh_2, ow_2, oc_block_2, ic_1, kh_1, kw_1, n_3, oc_chunk_3, oh_3, ow_3 in T.grid(T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(7), T.int64(2), T.int64(1), T.int64(3), T.int64(3), T.int64(1), T.int64(4), T.int64(7), T.int64(1)):
                        for oc_block_3_fused in T.vectorized(T.int64(4)):
                            with T.block("conv2d_NCHWc_update"):
                                v_n = T.axis.spatial(T.int64(1), n_1 + n_2 + n_3)
                                v_oc_chunk = T.axis.spatial(T.int64(16), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_fused_fused // T.int64(4) * T.int64(4) + oc_chunk_1 * T.int64(4) + oc_chunk_2 * T.int64(4) + oc_chunk_3)
                                v_oh = T.axis.spatial(T.int64(7), oh_1 * T.int64(7) + oh_2 * T.int64(7) + oh_3)
                                v_ow = T.axis.spatial(T.int64(7), ow_1 * T.int64(7) + ow_2 + ow_3)
                                v_oc_block = T.axis.spatial(T.int64(32), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_fused_fused % T.int64(4) * T.int64(8) + oc_block_1 * T.int64(8) + oc_block_2 * T.int64(4) + oc_block_3_fused)
                                v_ic = T.axis.reduce(T.int64(512), ic_0 + ic_1)
                                v_kh = T.axis.reduce(T.int64(3), kh_0 * T.int64(3) + kh_1)
                                v_kw = T.axis.reduce(T.int64(3), kw_0 * T.int64(3) + kw_1)
                                T.reads(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block], data_pad[v_n, v_ic // T.int64(512), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(512)], p1[v_oc_chunk, v_ic // T.int64(512), v_kh, v_kw, v_ic % T.int64(512), v_oc_block])
                                T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                                T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                                conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] + data_pad[v_n, v_ic // T.int64(512), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(512)] * p1[v_oc_chunk, v_ic // T.int64(512), v_kh, v_kw, v_ic % T.int64(512), v_oc_block]
            for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(4), T.int64(7), T.int64(7)):
                for ax4_fused in T.vectorized(T.int64(8)):
                    with T.block("T_relu"):
                        v_ax0 = T.axis.spatial(T.int64(1), ax0)
                        v_ax1 = T.axis.spatial(T.int64(16), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_fused_fused // T.int64(4) * T.int64(4) + ax1)
                        v_ax2, v_ax3 = T.axis.remap("SS", [ax2, ax3])
                        v_ax4 = T.axis.spatial(T.int64(32), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_fused_fused % T.int64(4) * T.int64(8) + ax4_fused)
                        T.reads(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4], p3[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                        T.writes(T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                        T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.max(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] + p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4] + p3[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], T.float32(0))
b0 = sch.get_block(name="data_pad", func_name="main")
b1 = sch.get_block(name="conv2d_NCHWc", func_name="main")
b2 = sch.get_block(name="T_add", func_name="main")
b3 = sch.get_block(name="T_add_1", func_name="main")
b4 = sch.get_block(name="root", func_name="main")
sch.compute_inline(block=b3)
sch.compute_inline(block=b2)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSRSRS")
l5, l6, l7, l8, l9, l10, l11, l12 = sch.get_loops(block=b1)
v13, v14, v15, v16 = sch.sample_perfect_tile(loop=l5, n=4, max_innermost_factor=64, decision=[1, 1, 1, 1])
l17, l18, l19, l20 = sch.split(loop=l5, factors=[v13, v14, v15, v16], preserve_unit_iters=True)
v21, v22, v23, v24 = sch.sample_perfect_tile(loop=l6, n=4, max_innermost_factor=64, decision=[4, 1, 1, 4])
l25, l26, l27, l28 = sch.split(loop=l6, factors=[v21, v22, v23, v24], preserve_unit_iters=True)
v29, v30, v31, v32 = sch.sample_perfect_tile(loop=l7, n=4, max_innermost_factor=64, decision=[1, 1, 1, 7])
l33, l34, l35, l36 = sch.split(loop=l7, factors=[v29, v30, v31, v32], preserve_unit_iters=True)
v37, v38, v39, v40 = sch.sample_perfect_tile(loop=l8, n=4, max_innermost_factor=64, decision=[1, 1, 7, 1])
l41, l42, l43, l44 = sch.split(loop=l8, factors=[v37, v38, v39, v40], preserve_unit_iters=True)
v45, v46, v47, v48 = sch.sample_perfect_tile(loop=l9, n=4, max_innermost_factor=64, decision=[4, 1, 2, 4])
l49, l50, l51, l52 = sch.split(loop=l9, factors=[v45, v46, v47, v48], preserve_unit_iters=True)
v53, v54 = sch.sample_perfect_tile(loop=l10, n=2, max_innermost_factor=64, decision=[512, 1])
l55, l56 = sch.split(loop=l10, factors=[v53, v54], preserve_unit_iters=True)
v57, v58 = sch.sample_perfect_tile(loop=l11, n=2, max_innermost_factor=64, decision=[1, 3])
l59, l60 = sch.split(loop=l11, factors=[v57, v58], preserve_unit_iters=True)
v61, v62 = sch.sample_perfect_tile(loop=l12, n=2, max_innermost_factor=64, decision=[1, 3])
l63, l64 = sch.split(loop=l12, factors=[v61, v62], preserve_unit_iters=True)
sch.reorder(l17, l25, l33, l41, l49, l18, l26, l34, l42, l50, l55, l59, l63, l19, l27, l35, l43, l51, l56, l60, l64, l20, l28, l36, l44, l52)
b65, = sch.get_consumers(block=b1)
sch.reverse_compute_at(block=b65, loop=l49, preserve_unit_loops=True, index=-1)
sch.annotate(block_or_loop=b4, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b4, ann_key="meta_schedule.vectorize", ann_val=64)
v66 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b4, ann_key="meta_schedule.unroll_explicit", ann_val=v66)
l67 = sch.sample_compute_location(block=b0, decision=10)
sch.compute_at(block=b0, loop=l67, preserve_unit_loops=True, index=-1)
sch.enter_postproc()
b68 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b68, ann_key="meta_schedule.parallel")
sch.unannotate(block_or_loop=b68, ann_key="meta_schedule.vectorize")
sch.unannotate(block_or_loop=b68, ann_key="meta_schedule.unroll_explicit")
b69, b70, b71 = sch.get_child_blocks(b68)
l72, l73, l74, l75, l76, l77, l78, l79, l80, l81, l82, l83, l84, l85, l86, l87 = sch.get_loops(block=b69)
l88 = sch.fuse(l72, l73, l74, l75, l76, preserve_unit_iters=True)
sch.parallel(loop=l88)
l89, l90, l91, l92, l93, l94, l95, l96, l97, l98, l99, l100, l101, l102, l103, l104, l105, l106, l107, l108, l109, l110 = sch.get_loops(block=b70)
l111 = sch.fuse(l89, preserve_unit_iters=True)
sch.parallel(loop=l111)
l112 = sch.fuse(l110, preserve_unit_iters=True)
sch.vectorize(loop=l112)
sch.annotate(block_or_loop=l111, ann_key="pragma_auto_unroll_max_step", ann_val=512)
sch.annotate(block_or_loop=l111, ann_key="pragma_unroll_explicit", ann_val=1)
l113, l114, l115, l116, l117, l118 = sch.get_loops(block=b71)
l119 = sch.fuse(l118, preserve_unit_iters=True)
sch.vectorize(loop=l119)
b120 = sch.get_block(name="conv2d_NCHWc", func_name="main")
l121, l122, l123, l124, l125, l126, l127, l128, l129, l130, l131, l132, l133, l134, l135, l136, l137, l138, l139, l140, l141, l142 = sch.get_loops(block=b120)
b143 = sch.decompose_reduction(block=b120, loop=l127)
2024-04-29 05:51:32 [INFO] [task_scheduler.cc:121] [Task #26: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_3] Trial #448: Error in building:
LocalBuilder: Timeout, killed after 30.0 seconds
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(1), T.int64(7), T.int64(7), T.int64(512)), "float32"), p1: T.Buffer((T.int64(16), T.int64(1), T.int64(3), T.int64(3), T.int64(512), T.int64(32)), "float32"), p2: T.Buffer((T.int64(1), T.int64(16), T.int64(1), T.int64(1), T.int64(32)), "float32"), p3: T.Buffer((T.int64(1), T.int64(16), T.int64(7), T.int64(7), T.int64(32)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(16), T.int64(7), T.int64(7), T.int64(32)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        data_pad = T.alloc_buffer((T.int64(1), T.int64(1), T.int64(9), T.int64(9), T.int64(512)))
        conv2d_NCHWc = T.alloc_buffer((T.int64(1), T.int64(16), T.int64(7), T.int64(7), T.int64(32)))
        for n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_fused_fused in T.parallel(T.int64(784), annotations={"pragma_auto_unroll_max_step": 512, "pragma_unroll_explicit": 1}):
            for oh_1, ow_1, oc_block_1 in T.grid(T.int64(1), T.int64(1), T.int64(4)):
                for ax0, ax1, ax2, ax3, ax4 in T.grid(T.int64(1), T.int64(1), T.int64(3), T.int64(3), T.int64(512)):
                    with T.block("data_pad"):
                        v_i0, v_i1 = T.axis.remap("SS", [ax0, ax1])
                        v_i2 = T.axis.spatial(T.int64(9), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_fused_fused % T.int64(392) // T.int64(56) + ax2)
                        v_i3 = T.axis.spatial(T.int64(9), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_fused_fused % T.int64(56) // T.int64(8) + ax3)
                        v_i4 = T.axis.spatial(T.int64(512), ax4)
                        T.reads(p0[v_i0, v_i1, v_i2 - T.int64(1), v_i3 - T.int64(1), v_i4])
                        T.writes(data_pad[v_i0, v_i1, v_i2, v_i3, v_i4])
                        data_pad[v_i0, v_i1, v_i2, v_i3, v_i4] = T.if_then_else(T.int64(1) <= v_i2 and v_i2 < T.int64(8) and T.int64(1) <= v_i3 and v_i3 < T.int64(8), p0[v_i0, v_i1, v_i2 - T.int64(1), v_i3 - T.int64(1), v_i4], T.float32(0))
                for n_2_init, oc_chunk_2_init, oh_2_init, ow_2_init, oc_block_2_init, n_3_init, oc_chunk_3_init, oh_3_init, ow_3_init in T.grid(T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(1), T.int64(1), T.int64(1), T.int64(1)):
                    for oc_block_3_fused_init in T.vectorized(T.int64(4)):
                        with T.block("conv2d_NCHWc_init"):
                            v_n = T.axis.spatial(T.int64(1), n_2_init + n_3_init)
                            v_oc_chunk = T.axis.spatial(T.int64(16), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_fused_fused // T.int64(392) * T.int64(8) + n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_fused_fused % T.int64(8) + oc_chunk_2_init + oc_chunk_3_init)
                            v_oh = T.axis.spatial(T.int64(7), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_fused_fused % T.int64(392) // T.int64(56) + oh_1 + oh_2_init + oh_3_init)
                            v_ow = T.axis.spatial(T.int64(7), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_fused_fused % T.int64(56) // T.int64(8) + ow_1 + ow_2_init + ow_3_init)
                            v_oc_block = T.axis.spatial(T.int64(32), oc_block_1 * T.int64(8) + oc_block_2_init * T.int64(4) + oc_block_3_fused_init)
                            T.reads()
                            T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                            T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                            conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = T.float32(0)
                for ic_0, kh_0, kw_0, n_2, oc_chunk_2, oh_2, ow_2, oc_block_2, ic_1, kh_1, kw_1, n_3, oc_chunk_3, oh_3, ow_3 in T.grid(T.int64(8), T.int64(3), T.int64(3), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(64), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1)):
                    for oc_block_3_fused in T.vectorized(T.int64(4)):
                        with T.block("conv2d_NCHWc_update"):
                            v_n = T.axis.spatial(T.int64(1), n_2 + n_3)
                            v_oc_chunk = T.axis.spatial(T.int64(16), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_fused_fused // T.int64(392) * T.int64(8) + n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_fused_fused % T.int64(8) + oc_chunk_2 + oc_chunk_3)
                            v_oh = T.axis.spatial(T.int64(7), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_fused_fused % T.int64(392) // T.int64(56) + oh_1 + oh_2 + oh_3)
                            v_ow = T.axis.spatial(T.int64(7), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_fused_fused % T.int64(56) // T.int64(8) + ow_1 + ow_2 + ow_3)
                            v_oc_block = T.axis.spatial(T.int64(32), oc_block_1 * T.int64(8) + oc_block_2 * T.int64(4) + oc_block_3_fused)
                            v_ic = T.axis.reduce(T.int64(512), ic_0 * T.int64(64) + ic_1)
                            v_kh = T.axis.reduce(T.int64(3), kh_0 + kh_1)
                            v_kw = T.axis.reduce(T.int64(3), kw_0 + kw_1)
                            T.reads(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block], data_pad[v_n, v_ic // T.int64(512), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(512)], p1[v_oc_chunk, v_ic // T.int64(512), v_kh, v_kw, v_ic % T.int64(512), v_oc_block])
                            T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                            T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                            conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] + data_pad[v_n, v_ic // T.int64(512), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(512)] * p1[v_oc_chunk, v_ic // T.int64(512), v_kh, v_kw, v_ic % T.int64(512), v_oc_block]
        for ax0_ax1_ax2_ax3_ax4_fused_0 in T.parallel(T.int64(392)):
            for ax0_ax1_ax2_ax3_ax4_fused_1 in T.vectorized(T.int64(64)):
                with T.block("T_relu"):
                    v_ax0 = T.axis.spatial(T.int64(1), T.int64(0))
                    v_ax1 = T.axis.spatial(T.int64(16), (ax0_ax1_ax2_ax3_ax4_fused_0 * T.int64(64) + ax0_ax1_ax2_ax3_ax4_fused_1) // T.int64(1568))
                    v_ax2 = T.axis.spatial(T.int64(7), (ax0_ax1_ax2_ax3_ax4_fused_0 * T.int64(64) + ax0_ax1_ax2_ax3_ax4_fused_1) % T.int64(1568) // T.int64(224))
                    v_ax3 = T.axis.spatial(T.int64(7), (ax0_ax1_ax2_ax3_ax4_fused_0 * T.int64(64) + ax0_ax1_ax2_ax3_ax4_fused_1) % T.int64(224) // T.int64(32))
                    v_ax4 = T.axis.spatial(T.int64(32), (ax0_ax1_ax2_ax3_ax4_fused_0 * T.int64(64) + ax0_ax1_ax2_ax3_ax4_fused_1) % T.int64(32))
                    T.reads(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4], p3[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                    T.writes(T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                    T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.max(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] + p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4] + p3[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], T.float32(0))
b0 = sch.get_block(name="data_pad", func_name="main")
b1 = sch.get_block(name="conv2d_NCHWc", func_name="main")
b2 = sch.get_block(name="T_add", func_name="main")
b3 = sch.get_block(name="T_add_1", func_name="main")
b4 = sch.get_block(name="root", func_name="main")
sch.compute_inline(block=b3)
sch.compute_inline(block=b2)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSRSRS")
l5, l6, l7, l8, l9, l10, l11, l12 = sch.get_loops(block=b1)
v13, v14, v15, v16 = sch.sample_perfect_tile(loop=l5, n=4, max_innermost_factor=64, decision=[1, 1, 1, 1])
l17, l18, l19, l20 = sch.split(loop=l5, factors=[v13, v14, v15, v16], preserve_unit_iters=True)
v21, v22, v23, v24 = sch.sample_perfect_tile(loop=l6, n=4, max_innermost_factor=64, decision=[2, 8, 1, 1])
l25, l26, l27, l28 = sch.split(loop=l6, factors=[v21, v22, v23, v24], preserve_unit_iters=True)
v29, v30, v31, v32 = sch.sample_perfect_tile(loop=l7, n=4, max_innermost_factor=64, decision=[7, 1, 1, 1])
l33, l34, l35, l36 = sch.split(loop=l7, factors=[v29, v30, v31, v32], preserve_unit_iters=True)
v37, v38, v39, v40 = sch.sample_perfect_tile(loop=l8, n=4, max_innermost_factor=64, decision=[7, 1, 1, 1])
l41, l42, l43, l44 = sch.split(loop=l8, factors=[v37, v38, v39, v40], preserve_unit_iters=True)
v45, v46, v47, v48 = sch.sample_perfect_tile(loop=l9, n=4, max_innermost_factor=64, decision=[1, 4, 2, 4])
l49, l50, l51, l52 = sch.split(loop=l9, factors=[v45, v46, v47, v48], preserve_unit_iters=True)
v53, v54 = sch.sample_perfect_tile(loop=l10, n=2, max_innermost_factor=64, decision=[8, 64])
l55, l56 = sch.split(loop=l10, factors=[v53, v54], preserve_unit_iters=True)
v57, v58 = sch.sample_perfect_tile(loop=l11, n=2, max_innermost_factor=64, decision=[3, 1])
l59, l60 = sch.split(loop=l11, factors=[v57, v58], preserve_unit_iters=True)
v61, v62 = sch.sample_perfect_tile(loop=l12, n=2, max_innermost_factor=64, decision=[3, 1])
l63, l64 = sch.split(loop=l12, factors=[v61, v62], preserve_unit_iters=True)
sch.reorder(l17, l25, l33, l41, l49, l18, l26, l34, l42, l50, l55, l59, l63, l19, l27, l35, l43, l51, l56, l60, l64, l20, l28, l36, l44, l52)
sch.annotate(block_or_loop=b4, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b4, ann_key="meta_schedule.vectorize", ann_val=64)
v65 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b4, ann_key="meta_schedule.unroll_explicit", ann_val=v65)
l66 = sch.sample_compute_location(block=b0, decision=9)
sch.compute_at(block=b0, loop=l66, preserve_unit_loops=True, index=-1)
sch.enter_postproc()
b67 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b67, ann_key="meta_schedule.parallel")
sch.unannotate(block_or_loop=b67, ann_key="meta_schedule.vectorize")
sch.unannotate(block_or_loop=b67, ann_key="meta_schedule.unroll_explicit")
b68, b69, b70 = sch.get_child_blocks(b67)
l71, l72, l73, l74, l75, l76, l77, l78, l79, l80, l81, l82, l83, l84, l85 = sch.get_loops(block=b68)
l86 = sch.fuse(l71, l72, l73, l74, l75, l76, l77, preserve_unit_iters=True)
sch.parallel(loop=l86)
l87, l88, l89, l90, l91, l92, l93, l94, l95, l96, l97, l98, l99, l100, l101, l102, l103, l104, l105, l106 = sch.get_loops(block=b69)
l107 = sch.fuse(l87, preserve_unit_iters=True)
sch.parallel(loop=l107)
l108 = sch.fuse(l106, preserve_unit_iters=True)
sch.vectorize(loop=l108)
sch.annotate(block_or_loop=l107, ann_key="pragma_auto_unroll_max_step", ann_val=512)
sch.annotate(block_or_loop=l107, ann_key="pragma_unroll_explicit", ann_val=1)
l109, l110, l111, l112, l113 = sch.get_loops(block=b70)
l114 = sch.fuse(l109, l110, l111, l112, l113, preserve_unit_iters=True)
l115, l116 = sch.split(loop=l114, factors=[None, 64], preserve_unit_iters=True)
sch.parallel(loop=l115)
sch.vectorize(loop=l116)
b117 = sch.get_block(name="conv2d_NCHWc", func_name="main")
l118, l119, l120, l121, l122, l123, l124, l125, l126, l127, l128, l129, l130, l131, l132, l133, l134, l135, l136, l137 = sch.get_loops(block=b117)
b138 = sch.decompose_reduction(block=b117, loop=l122)
2024-04-29 05:56:37 [INFO] [evolutionary_search.cc:713] Generating candidates......
2024-04-29 05:56:38 [INFO] [evolutionary_search.cc:715] Picked top 102 candidate(s) from database
2024-04-29 05:56:42 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x36363d8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x4388aa8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x3310908)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x3246458)]: 0 failure(s)
2024-04-29 05:56:42 [INFO] [evolutionary_search.cc:723] Sampled 410 candidate(s)
2024-04-29 05:56:53 [INFO] [evolutionary_search.cc:621] Evolve iter #0 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x36363d8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x4388aa8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x3310908)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x3246458)]: 0 failure(s)
2024-04-29 05:57:04 [INFO] [evolutionary_search.cc:621] Evolve iter #1 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x36363d8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x4388aa8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x3310908)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x3246458)]: 0 failure(s)
2024-04-29 05:57:15 [INFO] [evolutionary_search.cc:621] Evolve iter #2 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x36363d8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x4388aa8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x3310908)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x3246458)]: 0 failure(s)
2024-04-29 05:57:26 [INFO] [evolutionary_search.cc:621] Evolve iter #3 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x36363d8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x4388aa8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x3310908)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x3246458)]: 0 failure(s)
2024-04-29 05:57:33 [INFO] [evolutionary_search.cc:649] Scores of the best 64 candidates:
[1 : 16]:	0.9471  0.9080  0.8910  0.8486  0.8460  0.8432  0.8426  0.8251  0.8251  0.8208  0.8082  0.8069  0.8058  0.8046  0.8046  0.8014
[17 : 32]:	0.8014  0.7963  0.7833  0.7790  0.7790  0.7787  0.7787  0.7774  0.7774  0.7727  0.7719  0.7661  0.7612  0.7530  0.7529  0.7400
[33 : 48]:	0.7362  0.7276  0.7245  0.7245  0.7138  0.7120  0.7120  0.7101  0.7083  0.7083  0.7068  0.7068  0.7003  0.6998  0.6998  0.6946
[49 : 64]:	0.6946  0.6876  0.6872  0.6872  0.6864  0.6864  0.6828  0.6798  0.6792  0.6775  0.6775  0.6769  0.6767  0.6719  0.6679  0.6642
2024-04-29 05:57:33 [INFO] [evolutionary_search.cc:727] Got 64 candidate(s) with evolutionary search
2024-04-29 05:57:33 [INFO] [evolutionary_search.cc:730] Sending 64 candidates(s) for measurement
2024-04-29 05:59:28 [INFO] [task_scheduler.cc:131] [Task #26: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_3] Trial #449: GFLOPs: 411.4953. Time: 562.0630 us. Best GFLOPs: 703.6100
2024-04-29 05:59:28 [INFO] [task_scheduler.cc:131] [Task #26: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_3] Trial #450: GFLOPs: 648.8026. Time: 356.4817 us. Best GFLOPs: 703.6100
2024-04-29 05:59:28 [INFO] [task_scheduler.cc:131] [Task #26: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_3] Trial #451: GFLOPs: 604.8594. Time: 382.3802 us. Best GFLOPs: 703.6100
2024-04-29 05:59:28 [INFO] [task_scheduler.cc:131] [Task #26: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_3] Trial #452: GFLOPs: 642.7257. Time: 359.8522 us. Best GFLOPs: 703.6100
2024-04-29 05:59:28 [INFO] [task_scheduler.cc:131] [Task #26: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_3] Trial #453: GFLOPs: 601.0517. Time: 384.8026 us. Best GFLOPs: 703.6100
2024-04-29 05:59:28 [INFO] [task_scheduler.cc:131] [Task #26: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_3] Trial #454: GFLOPs: 630.8435. Time: 366.6302 us. Best GFLOPs: 703.6100
2024-04-29 05:59:28 [INFO] [task_scheduler.cc:131] [Task #26: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_3] Trial #455: GFLOPs: 598.3712. Time: 386.5264 us. Best GFLOPs: 703.6100
2024-04-29 05:59:28 [INFO] [task_scheduler.cc:131] [Task #26: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_3] Trial #456: GFLOPs: 678.5301. Time: 340.8637 us. Best GFLOPs: 703.6100
2024-04-29 05:59:28 [INFO] [task_scheduler.cc:131] [Task #26: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_3] Trial #457: GFLOPs: 596.6616. Time: 387.6339 us. Best GFLOPs: 703.6100
2024-04-29 05:59:28 [INFO] [task_scheduler.cc:131] [Task #26: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_3] Trial #458: GFLOPs: 608.2100. Time: 380.2737 us. Best GFLOPs: 703.6100
2024-04-29 05:59:28 [INFO] [task_scheduler.cc:131] [Task #26: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_3] Trial #459: GFLOPs: 543.2014. Time: 425.7836 us. Best GFLOPs: 703.6100
2024-04-29 05:59:28 [INFO] [task_scheduler.cc:131] [Task #26: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_3] Trial #460: GFLOPs: 572.9730. Time: 403.6600 us. Best GFLOPs: 703.6100
2024-04-29 05:59:28 [INFO] [task_scheduler.cc:131] [Task #26: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_3] Trial #461: GFLOPs: 608.7669. Time: 379.9258 us. Best GFLOPs: 703.6100
2024-04-29 05:59:28 [INFO] [task_scheduler.cc:131] [Task #26: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_3] Trial #462: GFLOPs: 550.8557. Time: 419.8672 us. Best GFLOPs: 703.6100
2024-04-29 05:59:28 [INFO] [task_scheduler.cc:131] [Task #26: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_3] Trial #463: GFLOPs: 577.5431. Time: 400.4658 us. Best GFLOPs: 703.6100
2024-04-29 05:59:28 [INFO] [task_scheduler.cc:131] [Task #26: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_3] Trial #464: GFLOPs: 590.6365. Time: 391.5882 us. Best GFLOPs: 703.6100
2024-04-29 05:59:28 [INFO] [task_scheduler.cc:131] [Task #26: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_3] Trial #465: GFLOPs: 580.3901. Time: 398.5014 us. Best GFLOPs: 703.6100
2024-04-29 05:59:28 [INFO] [task_scheduler.cc:131] [Task #26: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_3] Trial #466: GFLOPs: 539.9525. Time: 428.3456 us. Best GFLOPs: 703.6100
2024-04-29 05:59:28 [INFO] [task_scheduler.cc:131] [Task #26: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_3] Trial #467: GFLOPs: 570.6809. Time: 405.2813 us. Best GFLOPs: 703.6100
2024-04-29 05:59:28 [INFO] [task_scheduler.cc:131] [Task #26: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_3] Trial #468: GFLOPs: 592.1924. Time: 390.5593 us. Best GFLOPs: 703.6100
2024-04-29 05:59:28 [INFO] [task_scheduler.cc:131] [Task #26: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_3] Trial #469: GFLOPs: 557.8807. Time: 414.5802 us. Best GFLOPs: 703.6100
2024-04-29 05:59:28 [INFO] [task_scheduler.cc:131] [Task #26: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_3] Trial #470: GFLOPs: 557.8873. Time: 414.5753 us. Best GFLOPs: 703.6100
2024-04-29 05:59:28 [INFO] [task_scheduler.cc:131] [Task #26: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_3] Trial #471: GFLOPs: 540.0934. Time: 428.2339 us. Best GFLOPs: 703.6100
2024-04-29 05:59:28 [INFO] [task_scheduler.cc:131] [Task #26: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_3] Trial #472: GFLOPs: 551.5380. Time: 419.3478 us. Best GFLOPs: 703.6100
2024-04-29 05:59:28 [INFO] [task_scheduler.cc:131] [Task #26: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_3] Trial #473: GFLOPs: 381.1636. Time: 606.7901 us. Best GFLOPs: 703.6100
2024-04-29 05:59:28 [INFO] [task_scheduler.cc:131] [Task #26: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_3] Trial #474: GFLOPs: 550.4204. Time: 420.1993 us. Best GFLOPs: 703.6100
2024-04-29 05:59:28 [INFO] [task_scheduler.cc:131] [Task #26: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_3] Trial #475: GFLOPs: 313.5040. Time: 737.7459 us. Best GFLOPs: 703.6100
2024-04-29 05:59:28 [INFO] [task_scheduler.cc:131] [Task #26: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_3] Trial #476: GFLOPs: 676.8381. Time: 341.7158 us. Best GFLOPs: 703.6100
2024-04-29 05:59:28 [INFO] [task_scheduler.cc:131] [Task #26: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_3] Trial #477: GFLOPs: 532.3600. Time: 434.4546 us. Best GFLOPs: 703.6100
2024-04-29 05:59:28 [INFO] [task_scheduler.cc:131] [Task #26: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_3] Trial #478: GFLOPs: 721.0379. Time: 320.7685 us. Best GFLOPs: 721.0379
2024-04-29 05:59:28 [INFO] [task_scheduler.cc:131] [Task #26: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_3] Trial #479: GFLOPs: 556.2495. Time: 415.7959 us. Best GFLOPs: 721.0379
2024-04-29 05:59:28 [INFO] [task_scheduler.cc:131] [Task #26: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_3] Trial #480: GFLOPs: 522.1541. Time: 442.9464 us. Best GFLOPs: 721.0379
2024-04-29 05:59:28 [INFO] [task_scheduler.cc:131] [Task #26: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_3] Trial #481: GFLOPs: 580.7816. Time: 398.2328 us. Best GFLOPs: 721.0379
2024-04-29 05:59:28 [INFO] [task_scheduler.cc:131] [Task #26: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_3] Trial #482: GFLOPs: 566.3793. Time: 408.3593 us. Best GFLOPs: 721.0379
2024-04-29 05:59:28 [INFO] [task_scheduler.cc:131] [Task #26: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_3] Trial #483: GFLOPs: 755.3464. Time: 306.1990 us. Best GFLOPs: 755.3464
2024-04-29 05:59:28 [INFO] [task_scheduler.cc:131] [Task #26: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_3] Trial #484: GFLOPs: 694.2954. Time: 333.1237 us. Best GFLOPs: 755.3464
2024-04-29 05:59:28 [INFO] [task_scheduler.cc:131] [Task #26: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_3] Trial #485: GFLOPs: 435.0580. Time: 531.6217 us. Best GFLOPs: 755.3464
2024-04-29 05:59:28 [INFO] [task_scheduler.cc:131] [Task #26: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_3] Trial #486: GFLOPs: 499.7914. Time: 462.7656 us. Best GFLOPs: 755.3464
2024-04-29 05:59:28 [INFO] [task_scheduler.cc:131] [Task #26: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_3] Trial #487: GFLOPs: 532.2111. Time: 434.5762 us. Best GFLOPs: 755.3464
2024-04-29 05:59:28 [INFO] [task_scheduler.cc:121] [Task #26: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_3] Trial #488: Error in building:
LocalBuilder: Timeout, killed after 30.0 seconds
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(1), T.int64(7), T.int64(7), T.int64(512)), "float32"), p1: T.Buffer((T.int64(16), T.int64(1), T.int64(3), T.int64(3), T.int64(512), T.int64(32)), "float32"), p2: T.Buffer((T.int64(1), T.int64(16), T.int64(1), T.int64(1), T.int64(32)), "float32"), p3: T.Buffer((T.int64(1), T.int64(16), T.int64(7), T.int64(7), T.int64(32)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(16), T.int64(7), T.int64(7), T.int64(32)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        data_pad = T.alloc_buffer((T.int64(1), T.int64(1), T.int64(9), T.int64(9), T.int64(512)))
        conv2d_NCHWc = T.alloc_buffer((T.int64(1), T.int64(16), T.int64(7), T.int64(7), T.int64(32)))
        for n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_fused_fused in T.parallel(T.int64(112), annotations={"pragma_auto_unroll_max_step": 512, "pragma_unroll_explicit": 1}):
            for ax0, ax1, ax2, ax3, ax4 in T.grid(T.int64(1), T.int64(1), T.int64(9), T.int64(3), T.int64(512)):
                with T.block("data_pad"):
                    v_i0, v_i1, v_i2 = T.axis.remap("SSS", [ax0, ax1, ax2])
                    v_i3 = T.axis.spatial(T.int64(9), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_fused_fused // T.int64(16) + ax3)
                    v_i4 = T.axis.spatial(T.int64(512), ax4)
                    T.reads(p0[v_i0, v_i1, v_i2 - T.int64(1), v_i3 - T.int64(1), v_i4])
                    T.writes(data_pad[v_i0, v_i1, v_i2, v_i3, v_i4])
                    data_pad[v_i0, v_i1, v_i2, v_i3, v_i4] = T.if_then_else(T.int64(1) <= v_i2 and v_i2 < T.int64(8) and T.int64(1) <= v_i3 and v_i3 < T.int64(8), p0[v_i0, v_i1, v_i2 - T.int64(1), v_i3 - T.int64(1), v_i4], T.float32(0))
            for oh_1, ow_1, oc_block_1 in T.grid(T.int64(1), T.int64(1), T.int64(1)):
                for n_2_init, oc_chunk_2_init, oh_2_init, ow_2_init, oc_block_2_init, n_3_init, oc_chunk_3_init, oh_3_init, ow_3_init, oc_block_3_init in T.grid(T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(32), T.int64(1), T.int64(1), T.int64(7), T.int64(1), T.int64(1)):
                    with T.block("conv2d_NCHWc_init"):
                        v_n = T.axis.spatial(T.int64(1), n_2_init + n_3_init)
                        v_oc_chunk = T.axis.spatial(T.int64(16), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_fused_fused % T.int64(16) + oc_chunk_2_init + oc_chunk_3_init)
                        v_oh = T.axis.spatial(T.int64(7), oh_1 * T.int64(7) + oh_2_init * T.int64(7) + oh_3_init)
                        v_ow = T.axis.spatial(T.int64(7), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_fused_fused // T.int64(16) + ow_1 + ow_2_init + ow_3_init)
                        v_oc_block = T.axis.spatial(T.int64(32), oc_block_1 * T.int64(32) + oc_block_2_init + oc_block_3_init)
                        T.reads()
                        T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                        T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                        conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = T.float32(0)
                for ic_0, kh_0, kw_0, n_2, oc_chunk_2, oh_2, ow_2, oc_block_2, ic_1, kh_1, kw_1, n_3, oc_chunk_3, oh_3, ow_3, oc_block_3 in T.grid(T.int64(512), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(32), T.int64(1), T.int64(3), T.int64(3), T.int64(1), T.int64(1), T.int64(7), T.int64(1), T.int64(1)):
                    with T.block("conv2d_NCHWc_update"):
                        v_n = T.axis.spatial(T.int64(1), n_2 + n_3)
                        v_oc_chunk = T.axis.spatial(T.int64(16), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_fused_fused % T.int64(16) + oc_chunk_2 + oc_chunk_3)
                        v_oh = T.axis.spatial(T.int64(7), oh_1 * T.int64(7) + oh_2 * T.int64(7) + oh_3)
                        v_ow = T.axis.spatial(T.int64(7), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_fused_fused // T.int64(16) + ow_1 + ow_2 + ow_3)
                        v_oc_block = T.axis.spatial(T.int64(32), oc_block_1 * T.int64(32) + oc_block_2 + oc_block_3)
                        v_ic = T.axis.reduce(T.int64(512), ic_0 + ic_1)
                        v_kh = T.axis.reduce(T.int64(3), kh_0 * T.int64(3) + kh_1)
                        v_kw = T.axis.reduce(T.int64(3), kw_0 * T.int64(3) + kw_1)
                        T.reads(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block], data_pad[v_n, v_ic // T.int64(512), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(512)], p1[v_oc_chunk, v_ic // T.int64(512), v_kh, v_kw, v_ic % T.int64(512), v_oc_block])
                        T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                        T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                        conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] + data_pad[v_n, v_ic // T.int64(512), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(512)] * p1[v_oc_chunk, v_ic // T.int64(512), v_kh, v_kw, v_ic % T.int64(512), v_oc_block]
                for ax0, ax1, ax2 in T.grid(T.int64(1), T.int64(1), T.int64(7)):
                    for ax3_ax4_fused in T.vectorized(T.int64(32)):
                        with T.block("T_relu"):
                            v_ax0 = T.axis.spatial(T.int64(1), ax0)
                            v_ax1 = T.axis.spatial(T.int64(16), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_fused_fused % T.int64(16) + ax1)
                            v_ax2 = T.axis.spatial(T.int64(7), ax2)
                            v_ax3 = T.axis.spatial(T.int64(7), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_fused_fused // T.int64(16))
                            v_ax4 = T.axis.spatial(T.int64(32), ax3_ax4_fused)
                            T.reads(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4], p3[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                            T.writes(T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                            T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.max(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] + p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4] + p3[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], T.float32(0))
b0 = sch.get_block(name="data_pad", func_name="main")
b1 = sch.get_block(name="conv2d_NCHWc", func_name="main")
b2 = sch.get_block(name="T_add", func_name="main")
b3 = sch.get_block(name="T_add_1", func_name="main")
b4 = sch.get_block(name="root", func_name="main")
sch.compute_inline(block=b3)
sch.compute_inline(block=b2)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSRSRS")
l5, l6, l7, l8, l9, l10, l11, l12 = sch.get_loops(block=b1)
v13, v14, v15, v16 = sch.sample_perfect_tile(loop=l5, n=4, max_innermost_factor=64, decision=[1, 1, 1, 1])
l17, l18, l19, l20 = sch.split(loop=l5, factors=[v13, v14, v15, v16], preserve_unit_iters=True)
v21, v22, v23, v24 = sch.sample_perfect_tile(loop=l6, n=4, max_innermost_factor=64, decision=[1, 16, 1, 1])
l25, l26, l27, l28 = sch.split(loop=l6, factors=[v21, v22, v23, v24], preserve_unit_iters=True)
v29, v30, v31, v32 = sch.sample_perfect_tile(loop=l7, n=4, max_innermost_factor=64, decision=[1, 1, 1, 7])
l33, l34, l35, l36 = sch.split(loop=l7, factors=[v29, v30, v31, v32], preserve_unit_iters=True)
v37, v38, v39, v40 = sch.sample_perfect_tile(loop=l8, n=4, max_innermost_factor=64, decision=[7, 1, 1, 1])
l41, l42, l43, l44 = sch.split(loop=l8, factors=[v37, v38, v39, v40], preserve_unit_iters=True)
v45, v46, v47, v48 = sch.sample_perfect_tile(loop=l9, n=4, max_innermost_factor=64, decision=[1, 1, 32, 1])
l49, l50, l51, l52 = sch.split(loop=l9, factors=[v45, v46, v47, v48], preserve_unit_iters=True)
v53, v54 = sch.sample_perfect_tile(loop=l10, n=2, max_innermost_factor=64, decision=[512, 1])
l55, l56 = sch.split(loop=l10, factors=[v53, v54], preserve_unit_iters=True)
v57, v58 = sch.sample_perfect_tile(loop=l11, n=2, max_innermost_factor=64, decision=[1, 3])
l59, l60 = sch.split(loop=l11, factors=[v57, v58], preserve_unit_iters=True)
v61, v62 = sch.sample_perfect_tile(loop=l12, n=2, max_innermost_factor=64, decision=[1, 3])
l63, l64 = sch.split(loop=l12, factors=[v61, v62], preserve_unit_iters=True)
sch.reorder(l17, l25, l33, l41, l49, l18, l26, l34, l42, l50, l55, l59, l63, l19, l27, l35, l43, l51, l56, l60, l64, l20, l28, l36, l44, l52)
b65, = sch.get_consumers(block=b1)
sch.reverse_compute_at(block=b65, loop=l50, preserve_unit_loops=True, index=-1)
sch.annotate(block_or_loop=b4, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b4, ann_key="meta_schedule.vectorize", ann_val=64)
v66 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b4, ann_key="meta_schedule.unroll_explicit", ann_val=v66)
l67 = sch.sample_compute_location(block=b0, decision=6)
sch.compute_at(block=b0, loop=l67, preserve_unit_loops=True, index=-1)
sch.enter_postproc()
b68 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b68, ann_key="meta_schedule.parallel")
sch.unannotate(block_or_loop=b68, ann_key="meta_schedule.vectorize")
sch.unannotate(block_or_loop=b68, ann_key="meta_schedule.unroll_explicit")
b69, b70, b71 = sch.get_child_blocks(b68)
l72, l73, l74, l75, l76, l77, l78, l79, l80, l81, l82, l83 = sch.get_loops(block=b69)
l84 = sch.fuse(l72, l73, l74, l75, l76, l77, l78, preserve_unit_iters=True)
sch.parallel(loop=l84)
l85, l86, l87, l88, l89, l90, l91, l92, l93, l94, l95, l96, l97, l98, l99, l100, l101, l102, l103, l104 = sch.get_loops(block=b70)
l105 = sch.fuse(l85, preserve_unit_iters=True)
sch.parallel(loop=l105)
sch.annotate(block_or_loop=l105, ann_key="pragma_auto_unroll_max_step", ann_val=512)
sch.annotate(block_or_loop=l105, ann_key="pragma_unroll_explicit", ann_val=1)
l106, l107, l108, l109, l110, l111, l112, l113, l114 = sch.get_loops(block=b71)
l115 = sch.fuse(l113, l114, preserve_unit_iters=True)
sch.vectorize(loop=l115)
b116 = sch.get_block(name="conv2d_NCHWc", func_name="main")
l117, l118, l119, l120, l121, l122, l123, l124, l125, l126, l127, l128, l129, l130, l131, l132, l133, l134, l135, l136 = sch.get_loops(block=b116)
b137 = sch.decompose_reduction(block=b116, loop=l121)
2024-04-29 05:59:28 [INFO] [task_scheduler.cc:131] [Task #26: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_3] Trial #489: GFLOPs: 547.0501. Time: 422.7881 us. Best GFLOPs: 755.3464
2024-04-29 05:59:28 [INFO] [task_scheduler.cc:131] [Task #26: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_3] Trial #490: GFLOPs: 530.1016. Time: 436.3055 us. Best GFLOPs: 755.3464
2024-04-29 05:59:28 [INFO] [task_scheduler.cc:131] [Task #26: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_3] Trial #491: GFLOPs: 715.8771. Time: 323.0810 us. Best GFLOPs: 755.3464
2024-04-29 05:59:28 [INFO] [task_scheduler.cc:131] [Task #26: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_3] Trial #492: GFLOPs: 746.7010. Time: 309.7441 us. Best GFLOPs: 755.3464
2024-04-29 05:59:28 [INFO] [task_scheduler.cc:131] [Task #26: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_3] Trial #493: GFLOPs: 513.3709. Time: 450.5247 us. Best GFLOPs: 755.3464
2024-04-29 05:59:28 [INFO] [task_scheduler.cc:131] [Task #26: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_3] Trial #494: GFLOPs: 540.6454. Time: 427.7966 us. Best GFLOPs: 755.3464
2024-04-29 05:59:28 [INFO] [task_scheduler.cc:131] [Task #26: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_3] Trial #495: GFLOPs: 556.8031. Time: 415.3825 us. Best GFLOPs: 755.3464
2024-04-29 05:59:28 [INFO] [task_scheduler.cc:131] [Task #26: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_3] Trial #496: GFLOPs: 531.1110. Time: 435.4763 us. Best GFLOPs: 755.3464
2024-04-29 05:59:28 [INFO] [task_scheduler.cc:131] [Task #26: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_3] Trial #497: GFLOPs: 514.9082. Time: 449.1796 us. Best GFLOPs: 755.3464
2024-04-29 05:59:28 [INFO] [task_scheduler.cc:131] [Task #26: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_3] Trial #498: GFLOPs: 468.5825. Time: 493.5871 us. Best GFLOPs: 755.3464
2024-04-29 05:59:28 [INFO] [task_scheduler.cc:131] [Task #26: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_3] Trial #499: GFLOPs: 465.3968. Time: 496.9658 us. Best GFLOPs: 755.3464
2024-04-29 05:59:28 [INFO] [task_scheduler.cc:131] [Task #26: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_3] Trial #500: GFLOPs: 423.3310. Time: 546.3486 us. Best GFLOPs: 755.3464
2024-04-29 05:59:28 [INFO] [task_scheduler.cc:131] [Task #26: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_3] Trial #501: GFLOPs: 396.5615. Time: 583.2293 us. Best GFLOPs: 755.3464
2024-04-29 05:59:28 [INFO] [task_scheduler.cc:131] [Task #26: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_3] Trial #502: GFLOPs: 398.7079. Time: 580.0896 us. Best GFLOPs: 755.3464
2024-04-29 05:59:28 [INFO] [task_scheduler.cc:131] [Task #26: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_3] Trial #503: GFLOPs: 544.3582. Time: 424.8788 us. Best GFLOPs: 755.3464
2024-04-29 05:59:28 [INFO] [task_scheduler.cc:131] [Task #26: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_3] Trial #504: GFLOPs: 472.8056. Time: 489.1784 us. Best GFLOPs: 755.3464
2024-04-29 05:59:28 [INFO] [task_scheduler.cc:131] [Task #26: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_3] Trial #505: GFLOPs: 450.5986. Time: 513.2868 us. Best GFLOPs: 755.3464
2024-04-29 05:59:28 [INFO] [task_scheduler.cc:131] [Task #26: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_3] Trial #506: GFLOPs: 416.5881. Time: 555.1917 us. Best GFLOPs: 755.3464
2024-04-29 05:59:28 [INFO] [task_scheduler.cc:131] [Task #26: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_3] Trial #507: GFLOPs: 416.7760. Time: 554.9414 us. Best GFLOPs: 755.3464
2024-04-29 05:59:28 [INFO] [task_scheduler.cc:131] [Task #26: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_3] Trial #508: GFLOPs: 431.9102. Time: 535.4962 us. Best GFLOPs: 755.3464
2024-04-29 05:59:28 [INFO] [task_scheduler.cc:131] [Task #26: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_3] Trial #509: GFLOPs: 409.2730. Time: 565.1149 us. Best GFLOPs: 755.3464
2024-04-29 05:59:28 [INFO] [task_scheduler.cc:131] [Task #26: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_3] Trial #510: GFLOPs: 3.3993. Time: 68039.3023 us. Best GFLOPs: 755.3464
2024-04-29 05:59:28 [INFO] [task_scheduler.cc:121] [Task #26: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_3] Trial #511: Error in building:
LocalBuilder: Timeout, killed after 30.0 seconds
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(1), T.int64(7), T.int64(7), T.int64(512)), "float32"), p1: T.Buffer((T.int64(16), T.int64(1), T.int64(3), T.int64(3), T.int64(512), T.int64(32)), "float32"), p2: T.Buffer((T.int64(1), T.int64(16), T.int64(1), T.int64(1), T.int64(32)), "float32"), p3: T.Buffer((T.int64(1), T.int64(16), T.int64(7), T.int64(7), T.int64(32)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(16), T.int64(7), T.int64(7), T.int64(32)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        data_pad = T.alloc_buffer((T.int64(1), T.int64(1), T.int64(9), T.int64(9), T.int64(512)))
        conv2d_NCHWc = T.alloc_buffer((T.int64(1), T.int64(16), T.int64(7), T.int64(7), T.int64(32)))
        for n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_fused_fused in T.parallel(T.int64(8), annotations={"pragma_auto_unroll_max_step": 512, "pragma_unroll_explicit": 1}):
            for ax0, ax1, ax2, ax3, ax4 in T.grid(T.int64(1), T.int64(1), T.int64(9), T.int64(9), T.int64(512)):
                with T.block("data_pad"):
                    v_i0, v_i1, v_i2, v_i3, v_i4 = T.axis.remap("SSSSS", [ax0, ax1, ax2, ax3, ax4])
                    T.reads(p0[v_i0, v_i1, v_i2 - T.int64(1), v_i3 - T.int64(1), v_i4])
                    T.writes(data_pad[v_i0, v_i1, v_i2, v_i3, v_i4])
                    data_pad[v_i0, v_i1, v_i2, v_i3, v_i4] = T.if_then_else(T.int64(1) <= v_i2 and v_i2 < T.int64(8) and T.int64(1) <= v_i3 and v_i3 < T.int64(8), p0[v_i0, v_i1, v_i2 - T.int64(1), v_i3 - T.int64(1), v_i4], T.float32(0))
            for n_1, oc_chunk_1, oh_1, ow_1, oc_block_1 in T.grid(T.int64(1), T.int64(1), T.int64(7), T.int64(1), T.int64(1)):
                for n_2_init, oc_chunk_2_init, oh_2_init, ow_2_init, oc_block_2_init, n_3_init, oc_chunk_3_init, oh_3_init, ow_3_init in T.grid(T.int64(1), T.int64(2), T.int64(1), T.int64(7), T.int64(2), T.int64(1), T.int64(2), T.int64(1), T.int64(1)):
                    for oc_block_3_fused_init in T.vectorized(T.int64(8)):
                        with T.block("conv2d_NCHWc_init"):
                            v_n = T.axis.spatial(T.int64(1), n_1 + n_2_init + n_3_init)
                            v_oc_chunk = T.axis.spatial(T.int64(16), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_fused_fused // T.int64(2) * T.int64(4) + oc_chunk_1 * T.int64(4) + oc_chunk_2_init * T.int64(2) + oc_chunk_3_init)
                            v_oh = T.axis.spatial(T.int64(7), oh_1 + oh_2_init + oh_3_init)
                            v_ow = T.axis.spatial(T.int64(7), ow_1 * T.int64(7) + ow_2_init + ow_3_init)
                            v_oc_block = T.axis.spatial(T.int64(32), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_fused_fused % T.int64(2) * T.int64(16) + oc_block_1 * T.int64(16) + oc_block_2_init * T.int64(8) + oc_block_3_fused_init)
                            T.reads()
                            T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                            T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                            conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = T.float32(0)
                for ic_0, kh_0, kw_0, n_2, oc_chunk_2, oh_2, ow_2, oc_block_2, ic_1, kh_1, kw_1, n_3, oc_chunk_3, oh_3, ow_3 in T.grid(T.int64(64), T.int64(3), T.int64(1), T.int64(1), T.int64(2), T.int64(1), T.int64(7), T.int64(2), T.int64(8), T.int64(1), T.int64(3), T.int64(1), T.int64(2), T.int64(1), T.int64(1)):
                    for oc_block_3_fused in T.vectorized(T.int64(8)):
                        with T.block("conv2d_NCHWc_update"):
                            v_n = T.axis.spatial(T.int64(1), n_1 + n_2 + n_3)
                            v_oc_chunk = T.axis.spatial(T.int64(16), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_fused_fused // T.int64(2) * T.int64(4) + oc_chunk_1 * T.int64(4) + oc_chunk_2 * T.int64(2) + oc_chunk_3)
                            v_oh = T.axis.spatial(T.int64(7), oh_1 + oh_2 + oh_3)
                            v_ow = T.axis.spatial(T.int64(7), ow_1 * T.int64(7) + ow_2 + ow_3)
                            v_oc_block = T.axis.spatial(T.int64(32), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_fused_fused % T.int64(2) * T.int64(16) + oc_block_1 * T.int64(16) + oc_block_2 * T.int64(8) + oc_block_3_fused)
                            v_ic = T.axis.reduce(T.int64(512), ic_0 * T.int64(8) + ic_1)
                            v_kh = T.axis.reduce(T.int64(3), kh_0 + kh_1)
                            v_kw = T.axis.reduce(T.int64(3), kw_0 * T.int64(3) + kw_1)
                            T.reads(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block], data_pad[v_n, v_ic // T.int64(512), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(512)], p1[v_oc_chunk, v_ic // T.int64(512), v_kh, v_kw, v_ic % T.int64(512), v_oc_block])
                            T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                            T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                            conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] + data_pad[v_n, v_ic // T.int64(512), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(512)] * p1[v_oc_chunk, v_ic // T.int64(512), v_kh, v_kw, v_ic % T.int64(512), v_oc_block]
                for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(4), T.int64(1), T.int64(7)):
                    for ax4_fused in T.vectorized(T.int64(16)):
                        with T.block("T_relu"):
                            v_ax0 = T.axis.spatial(T.int64(1), ax0)
                            v_ax1 = T.axis.spatial(T.int64(16), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_fused_fused // T.int64(2) * T.int64(4) + ax1)
                            v_ax2 = T.axis.spatial(T.int64(7), oh_1 + ax2)
                            v_ax3 = T.axis.spatial(T.int64(7), ax3)
                            v_ax4 = T.axis.spatial(T.int64(32), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_fused_fused % T.int64(2) * T.int64(16) + ax4_fused)
                            T.reads(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4], p3[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                            T.writes(T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                            T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.max(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] + p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4] + p3[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], T.float32(0))
b0 = sch.get_block(name="data_pad", func_name="main")
b1 = sch.get_block(name="conv2d_NCHWc", func_name="main")
b2 = sch.get_block(name="T_add", func_name="main")
b3 = sch.get_block(name="T_add_1", func_name="main")
b4 = sch.get_block(name="root", func_name="main")
sch.compute_inline(block=b3)
sch.compute_inline(block=b2)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSRSRS")
l5, l6, l7, l8, l9, l10, l11, l12 = sch.get_loops(block=b1)
v13, v14, v15, v16 = sch.sample_perfect_tile(loop=l5, n=4, max_innermost_factor=64, decision=[1, 1, 1, 1])
l17, l18, l19, l20 = sch.split(loop=l5, factors=[v13, v14, v15, v16], preserve_unit_iters=True)
v21, v22, v23, v24 = sch.sample_perfect_tile(loop=l6, n=4, max_innermost_factor=64, decision=[4, 1, 2, 2])
l25, l26, l27, l28 = sch.split(loop=l6, factors=[v21, v22, v23, v24], preserve_unit_iters=True)
v29, v30, v31, v32 = sch.sample_perfect_tile(loop=l7, n=4, max_innermost_factor=64, decision=[1, 7, 1, 1])
l33, l34, l35, l36 = sch.split(loop=l7, factors=[v29, v30, v31, v32], preserve_unit_iters=True)
v37, v38, v39, v40 = sch.sample_perfect_tile(loop=l8, n=4, max_innermost_factor=64, decision=[1, 1, 7, 1])
l41, l42, l43, l44 = sch.split(loop=l8, factors=[v37, v38, v39, v40], preserve_unit_iters=True)
v45, v46, v47, v48 = sch.sample_perfect_tile(loop=l9, n=4, max_innermost_factor=64, decision=[2, 1, 2, 8])
l49, l50, l51, l52 = sch.split(loop=l9, factors=[v45, v46, v47, v48], preserve_unit_iters=True)
v53, v54 = sch.sample_perfect_tile(loop=l10, n=2, max_innermost_factor=64, decision=[64, 8])
l55, l56 = sch.split(loop=l10, factors=[v53, v54], preserve_unit_iters=True)
v57, v58 = sch.sample_perfect_tile(loop=l11, n=2, max_innermost_factor=64, decision=[3, 1])
l59, l60 = sch.split(loop=l11, factors=[v57, v58], preserve_unit_iters=True)
v61, v62 = sch.sample_perfect_tile(loop=l12, n=2, max_innermost_factor=64, decision=[1, 3])
l63, l64 = sch.split(loop=l12, factors=[v61, v62], preserve_unit_iters=True)
sch.reorder(l17, l25, l33, l41, l49, l18, l26, l34, l42, l50, l55, l59, l63, l19, l27, l35, l43, l51, l56, l60, l64, l20, l28, l36, l44, l52)
b65, = sch.get_consumers(block=b1)
sch.reverse_compute_at(block=b65, loop=l50, preserve_unit_loops=True, index=-1)
sch.annotate(block_or_loop=b4, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b4, ann_key="meta_schedule.vectorize", ann_val=64)
v66 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b4, ann_key="meta_schedule.unroll_explicit", ann_val=v66)
l67 = sch.sample_compute_location(block=b0, decision=4)
sch.compute_at(block=b0, loop=l67, preserve_unit_loops=True, index=-1)
sch.enter_postproc()
b68 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b68, ann_key="meta_schedule.parallel")
sch.unannotate(block_or_loop=b68, ann_key="meta_schedule.vectorize")
sch.unannotate(block_or_loop=b68, ann_key="meta_schedule.unroll_explicit")
b69, b70, b71 = sch.get_child_blocks(b68)
l72, l73, l74, l75, l76, l77, l78, l79, l80, l81 = sch.get_loops(block=b69)
l82 = sch.fuse(l72, l73, l74, l75, l76, preserve_unit_iters=True)
sch.parallel(loop=l82)
l83, l84, l85, l86, l87, l88, l89, l90, l91, l92, l93, l94, l95, l96, l97, l98, l99, l100, l101, l102, l103, l104 = sch.get_loops(block=b70)
l105 = sch.fuse(l83, preserve_unit_iters=True)
sch.parallel(loop=l105)
l106 = sch.fuse(l104, preserve_unit_iters=True)
sch.vectorize(loop=l106)
sch.annotate(block_or_loop=l105, ann_key="pragma_auto_unroll_max_step", ann_val=512)
sch.annotate(block_or_loop=l105, ann_key="pragma_unroll_explicit", ann_val=1)
l107, l108, l109, l110, l111, l112, l113, l114, l115, l116, l117 = sch.get_loops(block=b71)
l118 = sch.fuse(l117, preserve_unit_iters=True)
sch.vectorize(loop=l118)
b119 = sch.get_block(name="conv2d_NCHWc", func_name="main")
l120, l121, l122, l123, l124, l125, l126, l127, l128, l129, l130, l131, l132, l133, l134, l135, l136, l137, l138, l139, l140, l141 = sch.get_loops(block=b119)
b142 = sch.decompose_reduction(block=b119, loop=l126)
2024-04-29 05:59:28 [INFO] [task_scheduler.cc:131] [Task #26: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_3] Trial #512: GFLOPs: 7.7692. Time: 29769.4905 us. Best GFLOPs: 755.3464
2024-04-29 06:27:41 [INFO] [evolutionary_search.cc:713] Generating candidates......
2024-04-29 06:27:42 [INFO] [evolutionary_search.cc:715] Picked top 102 candidate(s) from database
2024-04-29 06:27:46 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x36363d8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x4388aa8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x3310908)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x3246458)]: 0 failure(s)
2024-04-29 06:27:46 [INFO] [evolutionary_search.cc:723] Sampled 410 candidate(s)
2024-04-29 06:27:57 [INFO] [evolutionary_search.cc:621] Evolve iter #0 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x36363d8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x4388aa8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x3310908)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x3246458)]: 0 failure(s)
2024-04-29 06:28:08 [INFO] [evolutionary_search.cc:621] Evolve iter #1 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x36363d8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x4388aa8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x3310908)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x3246458)]: 0 failure(s)
2024-04-29 06:28:19 [INFO] [evolutionary_search.cc:621] Evolve iter #2 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x36363d8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x4388aa8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x3310908)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x3246458)]: 0 failure(s)
2024-04-29 06:28:30 [INFO] [evolutionary_search.cc:621] Evolve iter #3 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x36363d8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x4388aa8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x3310908)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x3246458)]: 0 failure(s)
2024-04-29 06:28:37 [INFO] [evolutionary_search.cc:649] Scores of the best 64 candidates:
[1 : 16]:	0.9318  0.8796  0.8377  0.8377  0.8310  0.8282  0.8264  0.8248  0.8248  0.8241  0.8241  0.8030  0.8026  0.8026  0.7874  0.7841
[17 : 32]:	0.7815  0.7806  0.7759  0.7643  0.7422  0.7401  0.7394  0.7352  0.7339  0.7339  0.7327  0.7327  0.7326  0.7326  0.7316  0.7154
[33 : 48]:	0.7070  0.7070  0.7038  0.6963  0.6963  0.6949  0.6949  0.6916  0.6867  0.6864  0.6856  0.6847  0.6847  0.6794  0.6763  0.6736
[49 : 64]:	0.6736  0.6736  0.6666  0.6611  0.6458  0.6448  0.6448  0.6435  0.6413  0.6409  0.6407  0.6407  0.6341  0.6332  0.6320  0.6279
2024-04-29 06:28:37 [INFO] [evolutionary_search.cc:727] Got 64 candidate(s) with evolutionary search
2024-04-29 06:28:37 [INFO] [evolutionary_search.cc:730] Sending 64 candidates(s) for measurement
2024-04-29 06:30:30 [INFO] [task_scheduler.cc:131] [Task #26: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_3] Trial #513: GFLOPs: 716.0750. Time: 322.9917 us. Best GFLOPs: 755.3464
2024-04-29 06:30:30 [INFO] [task_scheduler.cc:131] [Task #26: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_3] Trial #514: GFLOPs: 526.6939. Time: 439.1284 us. Best GFLOPs: 755.3464
2024-04-29 06:30:30 [INFO] [task_scheduler.cc:131] [Task #26: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_3] Trial #515: GFLOPs: 756.0935. Time: 305.8964 us. Best GFLOPs: 756.0935
2024-04-29 06:30:30 [INFO] [task_scheduler.cc:131] [Task #26: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_3] Trial #516: GFLOPs: 736.0041. Time: 314.2459 us. Best GFLOPs: 756.0935
2024-04-29 06:30:30 [INFO] [task_scheduler.cc:131] [Task #26: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_3] Trial #517: GFLOPs: 635.5459. Time: 363.9175 us. Best GFLOPs: 756.0935
2024-04-29 06:30:30 [INFO] [task_scheduler.cc:131] [Task #26: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_3] Trial #518: GFLOPs: 638.1898. Time: 362.4099 us. Best GFLOPs: 756.0935
2024-04-29 06:30:30 [INFO] [task_scheduler.cc:131] [Task #26: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_3] Trial #519: GFLOPs: 605.1419. Time: 382.2017 us. Best GFLOPs: 756.0935
2024-04-29 06:30:30 [INFO] [task_scheduler.cc:131] [Task #26: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_3] Trial #520: GFLOPs: 668.3985. Time: 346.0305 us. Best GFLOPs: 756.0935
2024-04-29 06:30:30 [INFO] [task_scheduler.cc:131] [Task #26: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_3] Trial #521: GFLOPs: 601.8661. Time: 384.2820 us. Best GFLOPs: 756.0935
2024-04-29 06:30:30 [INFO] [task_scheduler.cc:131] [Task #26: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_3] Trial #522: GFLOPs: 613.1512. Time: 377.2092 us. Best GFLOPs: 756.0935
2024-04-29 06:30:30 [INFO] [task_scheduler.cc:131] [Task #26: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_3] Trial #523: GFLOPs: 617.7227. Time: 374.4177 us. Best GFLOPs: 756.0935
2024-04-29 06:30:30 [INFO] [task_scheduler.cc:131] [Task #26: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_3] Trial #524: GFLOPs: 580.4916. Time: 398.4318 us. Best GFLOPs: 756.0935
2024-04-29 06:30:30 [INFO] [task_scheduler.cc:131] [Task #26: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_3] Trial #525: GFLOPs: 674.7582. Time: 342.7691 us. Best GFLOPs: 756.0935
2024-04-29 06:30:30 [INFO] [task_scheduler.cc:131] [Task #26: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_3] Trial #526: GFLOPs: 637.8472. Time: 362.6045 us. Best GFLOPs: 756.0935
2024-04-29 06:30:30 [INFO] [task_scheduler.cc:131] [Task #26: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_3] Trial #527: GFLOPs: 723.3474. Time: 319.7444 us. Best GFLOPs: 756.0935
2024-04-29 06:30:30 [INFO] [task_scheduler.cc:131] [Task #26: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_3] Trial #528: GFLOPs: 560.4827. Time: 412.6555 us. Best GFLOPs: 756.0935
2024-04-29 06:30:30 [INFO] [task_scheduler.cc:131] [Task #26: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_3] Trial #529: GFLOPs: 604.8768. Time: 382.3692 us. Best GFLOPs: 756.0935
2024-04-29 06:30:30 [INFO] [task_scheduler.cc:131] [Task #26: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_3] Trial #530: GFLOPs: 683.5426. Time: 338.3641 us. Best GFLOPs: 756.0935
2024-04-29 06:30:30 [INFO] [task_scheduler.cc:131] [Task #26: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_3] Trial #531: GFLOPs: 603.2326. Time: 383.4115 us. Best GFLOPs: 756.0935
2024-04-29 06:30:30 [INFO] [task_scheduler.cc:131] [Task #26: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_3] Trial #532: GFLOPs: 612.7617. Time: 377.4490 us. Best GFLOPs: 756.0935
2024-04-29 06:30:30 [INFO] [task_scheduler.cc:131] [Task #26: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_3] Trial #533: GFLOPs: 537.4156. Time: 430.3676 us. Best GFLOPs: 756.0935
2024-04-29 06:30:30 [INFO] [task_scheduler.cc:131] [Task #26: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_3] Trial #534: GFLOPs: 536.9965. Time: 430.7035 us. Best GFLOPs: 756.0935
2024-04-29 06:30:30 [INFO] [task_scheduler.cc:131] [Task #26: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_3] Trial #535: GFLOPs: 675.7094. Time: 342.2866 us. Best GFLOPs: 756.0935
2024-04-29 06:30:30 [INFO] [task_scheduler.cc:131] [Task #26: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_3] Trial #536: GFLOPs: 643.9765. Time: 359.1533 us. Best GFLOPs: 756.0935
2024-04-29 06:30:30 [INFO] [task_scheduler.cc:131] [Task #26: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_3] Trial #537: GFLOPs: 406.4612. Time: 569.0242 us. Best GFLOPs: 756.0935
2024-04-29 06:30:30 [INFO] [task_scheduler.cc:131] [Task #26: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_3] Trial #538: GFLOPs: 445.4377. Time: 519.2338 us. Best GFLOPs: 756.0935
2024-04-29 06:30:30 [INFO] [task_scheduler.cc:131] [Task #26: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_3] Trial #539: GFLOPs: 441.5478. Time: 523.8080 us. Best GFLOPs: 756.0935
2024-04-29 06:30:30 [INFO] [task_scheduler.cc:131] [Task #26: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_3] Trial #540: GFLOPs: 475.4090. Time: 486.4996 us. Best GFLOPs: 756.0935
2024-04-29 06:30:30 [INFO] [task_scheduler.cc:131] [Task #26: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_3] Trial #541: GFLOPs: 578.4274. Time: 399.8536 us. Best GFLOPs: 756.0935
2024-04-29 06:30:30 [INFO] [task_scheduler.cc:131] [Task #26: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_3] Trial #542: GFLOPs: 579.2722. Time: 399.2705 us. Best GFLOPs: 756.0935
2024-04-29 06:30:30 [INFO] [task_scheduler.cc:131] [Task #26: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_3] Trial #543: GFLOPs: 568.9582. Time: 406.5084 us. Best GFLOPs: 756.0935
2024-04-29 06:30:30 [INFO] [task_scheduler.cc:131] [Task #26: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_3] Trial #544: GFLOPs: 542.6003. Time: 426.2553 us. Best GFLOPs: 756.0935
2024-04-29 06:30:30 [INFO] [task_scheduler.cc:131] [Task #26: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_3] Trial #545: GFLOPs: 566.0654. Time: 408.5858 us. Best GFLOPs: 756.0935
2024-04-29 06:30:30 [INFO] [task_scheduler.cc:131] [Task #26: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_3] Trial #546: GFLOPs: 582.9658. Time: 396.7407 us. Best GFLOPs: 756.0935
2024-04-29 06:30:30 [INFO] [task_scheduler.cc:131] [Task #26: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_3] Trial #547: GFLOPs: 521.6075. Time: 443.4106 us. Best GFLOPs: 756.0935
2024-04-29 06:30:30 [INFO] [task_scheduler.cc:131] [Task #26: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_3] Trial #548: GFLOPs: 565.5024. Time: 408.9925 us. Best GFLOPs: 756.0935
2024-04-29 06:30:30 [INFO] [task_scheduler.cc:131] [Task #26: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_3] Trial #549: GFLOPs: 546.6851. Time: 423.0704 us. Best GFLOPs: 756.0935
2024-04-29 06:30:30 [INFO] [task_scheduler.cc:121] [Task #26: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_3] Trial #550: Error in building:
LocalBuilder: Timeout, killed after 30.0 seconds
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(1), T.int64(7), T.int64(7), T.int64(512)), "float32"), p1: T.Buffer((T.int64(16), T.int64(1), T.int64(3), T.int64(3), T.int64(512), T.int64(32)), "float32"), p2: T.Buffer((T.int64(1), T.int64(16), T.int64(1), T.int64(1), T.int64(32)), "float32"), p3: T.Buffer((T.int64(1), T.int64(16), T.int64(7), T.int64(7), T.int64(32)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(16), T.int64(7), T.int64(7), T.int64(32)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        data_pad = T.alloc_buffer((T.int64(1), T.int64(1), T.int64(9), T.int64(9), T.int64(512)))
        conv2d_NCHWc = T.alloc_buffer((T.int64(1), T.int64(16), T.int64(7), T.int64(7), T.int64(32)))
        for n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_fused_fused in T.parallel(T.int64(112), annotations={"pragma_auto_unroll_max_step": 512, "pragma_unroll_explicit": 1}):
            for ax0, ax1, ax2, ax3, ax4 in T.grid(T.int64(1), T.int64(1), T.int64(9), T.int64(3), T.int64(512)):
                with T.block("data_pad"):
                    v_i0, v_i1, v_i2 = T.axis.remap("SSS", [ax0, ax1, ax2])
                    v_i3 = T.axis.spatial(T.int64(9), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_fused_fused % T.int64(28) // T.int64(4) + ax3)
                    v_i4 = T.axis.spatial(T.int64(512), ax4)
                    T.reads(p0[v_i0, v_i1, v_i2 - T.int64(1), v_i3 - T.int64(1), v_i4])
                    T.writes(data_pad[v_i0, v_i1, v_i2, v_i3, v_i4])
                    data_pad[v_i0, v_i1, v_i2, v_i3, v_i4] = T.if_then_else(T.int64(1) <= v_i2 and v_i2 < T.int64(8) and T.int64(1) <= v_i3 and v_i3 < T.int64(8), p0[v_i0, v_i1, v_i2 - T.int64(1), v_i3 - T.int64(1), v_i4], T.float32(0))
            for oh_1, ow_1, oc_block_1 in T.grid(T.int64(1), T.int64(1), T.int64(1)):
                for n_2_init, oc_chunk_2_init, oh_2_init, ow_2_init, oc_block_2_init, n_3_init, oc_chunk_3_init, oh_3_init, ow_3_init, oc_block_3_init in T.grid(T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(32), T.int64(1), T.int64(1), T.int64(7), T.int64(1), T.int64(1)):
                    with T.block("conv2d_NCHWc_init"):
                        v_n = T.axis.spatial(T.int64(1), n_2_init + n_3_init)
                        v_oc_chunk = T.axis.spatial(T.int64(16), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_fused_fused // T.int64(28) * T.int64(4) + n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_fused_fused % T.int64(4) + oc_chunk_2_init + oc_chunk_3_init)
                        v_oh = T.axis.spatial(T.int64(7), oh_1 * T.int64(7) + oh_2_init * T.int64(7) + oh_3_init)
                        v_ow = T.axis.spatial(T.int64(7), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_fused_fused % T.int64(28) // T.int64(4) + ow_1 + ow_2_init + ow_3_init)
                        v_oc_block = T.axis.spatial(T.int64(32), oc_block_1 * T.int64(32) + oc_block_2_init + oc_block_3_init)
                        T.reads()
                        T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                        T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                        conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = T.float32(0)
                for ic_0, kh_0, kw_0, n_2, oc_chunk_2, oh_2, ow_2, oc_block_2, ic_1, kh_1, kw_1, n_3, oc_chunk_3, oh_3, ow_3, oc_block_3 in T.grid(T.int64(512), T.int64(1), T.int64(3), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(32), T.int64(1), T.int64(3), T.int64(1), T.int64(1), T.int64(1), T.int64(7), T.int64(1), T.int64(1)):
                    with T.block("conv2d_NCHWc_update"):
                        v_n = T.axis.spatial(T.int64(1), n_2 + n_3)
                        v_oc_chunk = T.axis.spatial(T.int64(16), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_fused_fused // T.int64(28) * T.int64(4) + n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_fused_fused % T.int64(4) + oc_chunk_2 + oc_chunk_3)
                        v_oh = T.axis.spatial(T.int64(7), oh_1 * T.int64(7) + oh_2 * T.int64(7) + oh_3)
                        v_ow = T.axis.spatial(T.int64(7), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_fused_fused % T.int64(28) // T.int64(4) + ow_1 + ow_2 + ow_3)
                        v_oc_block = T.axis.spatial(T.int64(32), oc_block_1 * T.int64(32) + oc_block_2 + oc_block_3)
                        v_ic = T.axis.reduce(T.int64(512), ic_0 + ic_1)
                        v_kh = T.axis.reduce(T.int64(3), kh_0 * T.int64(3) + kh_1)
                        v_kw = T.axis.reduce(T.int64(3), kw_0 + kw_1)
                        T.reads(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block], data_pad[v_n, v_ic // T.int64(512), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(512)], p1[v_oc_chunk, v_ic // T.int64(512), v_kh, v_kw, v_ic % T.int64(512), v_oc_block])
                        T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                        T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                        conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] + data_pad[v_n, v_ic // T.int64(512), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(512)] * p1[v_oc_chunk, v_ic // T.int64(512), v_kh, v_kw, v_ic % T.int64(512), v_oc_block]
                for ax0, ax1, ax2 in T.grid(T.int64(1), T.int64(1), T.int64(7)):
                    for ax3_ax4_fused in T.vectorized(T.int64(32)):
                        with T.block("T_relu"):
                            v_ax0 = T.axis.spatial(T.int64(1), ax0)
                            v_ax1 = T.axis.spatial(T.int64(16), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_fused_fused // T.int64(28) * T.int64(4) + n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_fused_fused % T.int64(4) + ax1)
                            v_ax2 = T.axis.spatial(T.int64(7), ax2)
                            v_ax3 = T.axis.spatial(T.int64(7), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_fused_fused % T.int64(28) // T.int64(4))
                            v_ax4 = T.axis.spatial(T.int64(32), ax3_ax4_fused)
                            T.reads(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4], p3[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                            T.writes(T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                            T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.max(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] + p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4] + p3[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], T.float32(0))
b0 = sch.get_block(name="data_pad", func_name="main")
b1 = sch.get_block(name="conv2d_NCHWc", func_name="main")
b2 = sch.get_block(name="T_add", func_name="main")
b3 = sch.get_block(name="T_add_1", func_name="main")
b4 = sch.get_block(name="root", func_name="main")
sch.compute_inline(block=b3)
sch.compute_inline(block=b2)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSRSRS")
l5, l6, l7, l8, l9, l10, l11, l12 = sch.get_loops(block=b1)
v13, v14, v15, v16 = sch.sample_perfect_tile(loop=l5, n=4, max_innermost_factor=64, decision=[1, 1, 1, 1])
l17, l18, l19, l20 = sch.split(loop=l5, factors=[v13, v14, v15, v16], preserve_unit_iters=True)
v21, v22, v23, v24 = sch.sample_perfect_tile(loop=l6, n=4, max_innermost_factor=64, decision=[4, 4, 1, 1])
l25, l26, l27, l28 = sch.split(loop=l6, factors=[v21, v22, v23, v24], preserve_unit_iters=True)
v29, v30, v31, v32 = sch.sample_perfect_tile(loop=l7, n=4, max_innermost_factor=64, decision=[1, 1, 1, 7])
l33, l34, l35, l36 = sch.split(loop=l7, factors=[v29, v30, v31, v32], preserve_unit_iters=True)
v37, v38, v39, v40 = sch.sample_perfect_tile(loop=l8, n=4, max_innermost_factor=64, decision=[7, 1, 1, 1])
l41, l42, l43, l44 = sch.split(loop=l8, factors=[v37, v38, v39, v40], preserve_unit_iters=True)
v45, v46, v47, v48 = sch.sample_perfect_tile(loop=l9, n=4, max_innermost_factor=64, decision=[1, 1, 32, 1])
l49, l50, l51, l52 = sch.split(loop=l9, factors=[v45, v46, v47, v48], preserve_unit_iters=True)
v53, v54 = sch.sample_perfect_tile(loop=l10, n=2, max_innermost_factor=64, decision=[512, 1])
l55, l56 = sch.split(loop=l10, factors=[v53, v54], preserve_unit_iters=True)
v57, v58 = sch.sample_perfect_tile(loop=l11, n=2, max_innermost_factor=64, decision=[1, 3])
l59, l60 = sch.split(loop=l11, factors=[v57, v58], preserve_unit_iters=True)
v61, v62 = sch.sample_perfect_tile(loop=l12, n=2, max_innermost_factor=64, decision=[3, 1])
l63, l64 = sch.split(loop=l12, factors=[v61, v62], preserve_unit_iters=True)
sch.reorder(l17, l25, l33, l41, l49, l18, l26, l34, l42, l50, l55, l59, l63, l19, l27, l35, l43, l51, l56, l60, l64, l20, l28, l36, l44, l52)
b65, = sch.get_consumers(block=b1)
sch.reverse_compute_at(block=b65, loop=l50, preserve_unit_loops=True, index=-1)
sch.annotate(block_or_loop=b4, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b4, ann_key="meta_schedule.vectorize", ann_val=64)
v66 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b4, ann_key="meta_schedule.unroll_explicit", ann_val=v66)
l67 = sch.sample_compute_location(block=b0, decision=6)
sch.compute_at(block=b0, loop=l67, preserve_unit_loops=True, index=-1)
sch.enter_postproc()
b68 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b68, ann_key="meta_schedule.parallel")
sch.unannotate(block_or_loop=b68, ann_key="meta_schedule.vectorize")
sch.unannotate(block_or_loop=b68, ann_key="meta_schedule.unroll_explicit")
b69, b70, b71 = sch.get_child_blocks(b68)
l72, l73, l74, l75, l76, l77, l78, l79, l80, l81, l82, l83 = sch.get_loops(block=b69)
l84 = sch.fuse(l72, l73, l74, l75, l76, l77, l78, preserve_unit_iters=True)
sch.parallel(loop=l84)
l85, l86, l87, l88, l89, l90, l91, l92, l93, l94, l95, l96, l97, l98, l99, l100, l101, l102, l103, l104 = sch.get_loops(block=b70)
l105 = sch.fuse(l85, preserve_unit_iters=True)
sch.parallel(loop=l105)
sch.annotate(block_or_loop=l105, ann_key="pragma_auto_unroll_max_step", ann_val=512)
sch.annotate(block_or_loop=l105, ann_key="pragma_unroll_explicit", ann_val=1)
l106, l107, l108, l109, l110, l111, l112, l113, l114 = sch.get_loops(block=b71)
l115 = sch.fuse(l113, l114, preserve_unit_iters=True)
sch.vectorize(loop=l115)
b116 = sch.get_block(name="conv2d_NCHWc", func_name="main")
l117, l118, l119, l120, l121, l122, l123, l124, l125, l126, l127, l128, l129, l130, l131, l132, l133, l134, l135, l136 = sch.get_loops(block=b116)
b137 = sch.decompose_reduction(block=b116, loop=l121)
2024-04-29 06:30:30 [INFO] [task_scheduler.cc:121] [Task #26: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_3] Trial #551: Error in building:
LocalBuilder: Timeout, killed after 30.0 seconds
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(1), T.int64(7), T.int64(7), T.int64(512)), "float32"), p1: T.Buffer((T.int64(16), T.int64(1), T.int64(3), T.int64(3), T.int64(512), T.int64(32)), "float32"), p2: T.Buffer((T.int64(1), T.int64(16), T.int64(1), T.int64(1), T.int64(32)), "float32"), p3: T.Buffer((T.int64(1), T.int64(16), T.int64(7), T.int64(7), T.int64(32)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(16), T.int64(7), T.int64(7), T.int64(32)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        data_pad = T.alloc_buffer((T.int64(1), T.int64(1), T.int64(9), T.int64(9), T.int64(512)))
        conv2d_NCHWc = T.alloc_buffer((T.int64(1), T.int64(16), T.int64(7), T.int64(7), T.int64(32)))
        for n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_fused_fused in T.parallel(T.int64(112), annotations={"pragma_auto_unroll_max_step": 512, "pragma_unroll_explicit": 1}):
            for ax0, ax1, ax2, ax3, ax4 in T.grid(T.int64(1), T.int64(1), T.int64(9), T.int64(3), T.int64(512)):
                with T.block("data_pad"):
                    v_i0, v_i1, v_i2 = T.axis.remap("SSS", [ax0, ax1, ax2])
                    v_i3 = T.axis.spatial(T.int64(9), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_fused_fused % T.int64(56) // T.int64(8) + ax3)
                    v_i4 = T.axis.spatial(T.int64(512), ax4)
                    T.reads(p0[v_i0, v_i1, v_i2 - T.int64(1), v_i3 - T.int64(1), v_i4])
                    T.writes(data_pad[v_i0, v_i1, v_i2, v_i3, v_i4])
                    data_pad[v_i0, v_i1, v_i2, v_i3, v_i4] = T.if_then_else(T.int64(1) <= v_i2 and v_i2 < T.int64(8) and T.int64(1) <= v_i3 and v_i3 < T.int64(8), p0[v_i0, v_i1, v_i2 - T.int64(1), v_i3 - T.int64(1), v_i4], T.float32(0))
            for oh_1, ow_1, oc_block_1 in T.grid(T.int64(1), T.int64(1), T.int64(1)):
                for n_2_init, oc_chunk_2_init, oh_2_init, ow_2_init, oc_block_2_init, n_3_init, oc_chunk_3_init, oh_3_init, ow_3_init, oc_block_3_init in T.grid(T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(32), T.int64(1), T.int64(1), T.int64(7), T.int64(1), T.int64(1)):
                    with T.block("conv2d_NCHWc_init"):
                        v_n = T.axis.spatial(T.int64(1), n_2_init + n_3_init)
                        v_oc_chunk = T.axis.spatial(T.int64(16), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_fused_fused // T.int64(56) * T.int64(8) + n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_fused_fused % T.int64(8) + oc_chunk_2_init + oc_chunk_3_init)
                        v_oh = T.axis.spatial(T.int64(7), oh_1 * T.int64(7) + oh_2_init * T.int64(7) + oh_3_init)
                        v_ow = T.axis.spatial(T.int64(7), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_fused_fused % T.int64(56) // T.int64(8) + ow_1 + ow_2_init + ow_3_init)
                        v_oc_block = T.axis.spatial(T.int64(32), oc_block_1 * T.int64(32) + oc_block_2_init + oc_block_3_init)
                        T.reads()
                        T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                        T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                        conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = T.float32(0)
                for ic_0, kh_0, kw_0, n_2, oc_chunk_2, oh_2, ow_2, oc_block_2, ic_1, kh_1, kw_1, n_3, oc_chunk_3, oh_3, ow_3, oc_block_3 in T.grid(T.int64(512), T.int64(1), T.int64(3), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(32), T.int64(1), T.int64(3), T.int64(1), T.int64(1), T.int64(1), T.int64(7), T.int64(1), T.int64(1)):
                    with T.block("conv2d_NCHWc_update"):
                        v_n = T.axis.spatial(T.int64(1), n_2 + n_3)
                        v_oc_chunk = T.axis.spatial(T.int64(16), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_fused_fused // T.int64(56) * T.int64(8) + n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_fused_fused % T.int64(8) + oc_chunk_2 + oc_chunk_3)
                        v_oh = T.axis.spatial(T.int64(7), oh_1 * T.int64(7) + oh_2 * T.int64(7) + oh_3)
                        v_ow = T.axis.spatial(T.int64(7), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_fused_fused % T.int64(56) // T.int64(8) + ow_1 + ow_2 + ow_3)
                        v_oc_block = T.axis.spatial(T.int64(32), oc_block_1 * T.int64(32) + oc_block_2 + oc_block_3)
                        v_ic = T.axis.reduce(T.int64(512), ic_0 + ic_1)
                        v_kh = T.axis.reduce(T.int64(3), kh_0 * T.int64(3) + kh_1)
                        v_kw = T.axis.reduce(T.int64(3), kw_0 + kw_1)
                        T.reads(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block], data_pad[v_n, v_ic // T.int64(512), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(512)], p1[v_oc_chunk, v_ic // T.int64(512), v_kh, v_kw, v_ic % T.int64(512), v_oc_block])
                        T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                        T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                        conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] + data_pad[v_n, v_ic // T.int64(512), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(512)] * p1[v_oc_chunk, v_ic // T.int64(512), v_kh, v_kw, v_ic % T.int64(512), v_oc_block]
                for ax0, ax1, ax2 in T.grid(T.int64(1), T.int64(1), T.int64(7)):
                    for ax3_ax4_fused in T.vectorized(T.int64(32)):
                        with T.block("T_relu"):
                            v_ax0 = T.axis.spatial(T.int64(1), ax0)
                            v_ax1 = T.axis.spatial(T.int64(16), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_fused_fused // T.int64(56) * T.int64(8) + n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_fused_fused % T.int64(8) + ax1)
                            v_ax2 = T.axis.spatial(T.int64(7), ax2)
                            v_ax3 = T.axis.spatial(T.int64(7), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_fused_fused % T.int64(56) // T.int64(8))
                            v_ax4 = T.axis.spatial(T.int64(32), ax3_ax4_fused)
                            T.reads(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4], p3[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                            T.writes(T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                            T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.max(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] + p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4] + p3[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], T.float32(0))
b0 = sch.get_block(name="data_pad", func_name="main")
b1 = sch.get_block(name="conv2d_NCHWc", func_name="main")
b2 = sch.get_block(name="T_add", func_name="main")
b3 = sch.get_block(name="T_add_1", func_name="main")
b4 = sch.get_block(name="root", func_name="main")
sch.compute_inline(block=b3)
sch.compute_inline(block=b2)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSRSRS")
l5, l6, l7, l8, l9, l10, l11, l12 = sch.get_loops(block=b1)
v13, v14, v15, v16 = sch.sample_perfect_tile(loop=l5, n=4, max_innermost_factor=64, decision=[1, 1, 1, 1])
l17, l18, l19, l20 = sch.split(loop=l5, factors=[v13, v14, v15, v16], preserve_unit_iters=True)
v21, v22, v23, v24 = sch.sample_perfect_tile(loop=l6, n=4, max_innermost_factor=64, decision=[2, 8, 1, 1])
l25, l26, l27, l28 = sch.split(loop=l6, factors=[v21, v22, v23, v24], preserve_unit_iters=True)
v29, v30, v31, v32 = sch.sample_perfect_tile(loop=l7, n=4, max_innermost_factor=64, decision=[1, 1, 1, 7])
l33, l34, l35, l36 = sch.split(loop=l7, factors=[v29, v30, v31, v32], preserve_unit_iters=True)
v37, v38, v39, v40 = sch.sample_perfect_tile(loop=l8, n=4, max_innermost_factor=64, decision=[7, 1, 1, 1])
l41, l42, l43, l44 = sch.split(loop=l8, factors=[v37, v38, v39, v40], preserve_unit_iters=True)
v45, v46, v47, v48 = sch.sample_perfect_tile(loop=l9, n=4, max_innermost_factor=64, decision=[1, 1, 32, 1])
l49, l50, l51, l52 = sch.split(loop=l9, factors=[v45, v46, v47, v48], preserve_unit_iters=True)
v53, v54 = sch.sample_perfect_tile(loop=l10, n=2, max_innermost_factor=64, decision=[512, 1])
l55, l56 = sch.split(loop=l10, factors=[v53, v54], preserve_unit_iters=True)
v57, v58 = sch.sample_perfect_tile(loop=l11, n=2, max_innermost_factor=64, decision=[1, 3])
l59, l60 = sch.split(loop=l11, factors=[v57, v58], preserve_unit_iters=True)
v61, v62 = sch.sample_perfect_tile(loop=l12, n=2, max_innermost_factor=64, decision=[3, 1])
l63, l64 = sch.split(loop=l12, factors=[v61, v62], preserve_unit_iters=True)
sch.reorder(l17, l25, l33, l41, l49, l18, l26, l34, l42, l50, l55, l59, l63, l19, l27, l35, l43, l51, l56, l60, l64, l20, l28, l36, l44, l52)
b65, = sch.get_consumers(block=b1)
sch.reverse_compute_at(block=b65, loop=l50, preserve_unit_loops=True, index=-1)
sch.annotate(block_or_loop=b4, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b4, ann_key="meta_schedule.vectorize", ann_val=64)
v66 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b4, ann_key="meta_schedule.unroll_explicit", ann_val=v66)
l67 = sch.sample_compute_location(block=b0, decision=6)
sch.compute_at(block=b0, loop=l67, preserve_unit_loops=True, index=-1)
sch.enter_postproc()
b68 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b68, ann_key="meta_schedule.parallel")
sch.unannotate(block_or_loop=b68, ann_key="meta_schedule.vectorize")
sch.unannotate(block_or_loop=b68, ann_key="meta_schedule.unroll_explicit")
b69, b70, b71 = sch.get_child_blocks(b68)
l72, l73, l74, l75, l76, l77, l78, l79, l80, l81, l82, l83 = sch.get_loops(block=b69)
l84 = sch.fuse(l72, l73, l74, l75, l76, l77, l78, preserve_unit_iters=True)
sch.parallel(loop=l84)
l85, l86, l87, l88, l89, l90, l91, l92, l93, l94, l95, l96, l97, l98, l99, l100, l101, l102, l103, l104 = sch.get_loops(block=b70)
l105 = sch.fuse(l85, preserve_unit_iters=True)
sch.parallel(loop=l105)
sch.annotate(block_or_loop=l105, ann_key="pragma_auto_unroll_max_step", ann_val=512)
sch.annotate(block_or_loop=l105, ann_key="pragma_unroll_explicit", ann_val=1)
l106, l107, l108, l109, l110, l111, l112, l113, l114 = sch.get_loops(block=b71)
l115 = sch.fuse(l113, l114, preserve_unit_iters=True)
sch.vectorize(loop=l115)
b116 = sch.get_block(name="conv2d_NCHWc", func_name="main")
l117, l118, l119, l120, l121, l122, l123, l124, l125, l126, l127, l128, l129, l130, l131, l132, l133, l134, l135, l136 = sch.get_loops(block=b116)
b137 = sch.decompose_reduction(block=b116, loop=l121)
2024-04-29 06:30:30 [INFO] [task_scheduler.cc:131] [Task #26: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_3] Trial #552: GFLOPs: 553.5702. Time: 417.8084 us. Best GFLOPs: 756.0935
2024-04-29 06:30:30 [INFO] [task_scheduler.cc:131] [Task #26: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_3] Trial #553: GFLOPs: 512.0047. Time: 451.7269 us. Best GFLOPs: 756.0935
2024-04-29 06:30:30 [INFO] [task_scheduler.cc:131] [Task #26: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_3] Trial #554: GFLOPs: 538.8292. Time: 429.2386 us. Best GFLOPs: 756.0935
2024-04-29 06:30:30 [INFO] [task_scheduler.cc:131] [Task #26: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_3] Trial #555: GFLOPs: 545.2030. Time: 424.2205 us. Best GFLOPs: 756.0935
2024-04-29 06:30:30 [INFO] [task_scheduler.cc:131] [Task #26: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_3] Trial #556: GFLOPs: 568.4192. Time: 406.8938 us. Best GFLOPs: 756.0935
2024-04-29 06:30:30 [INFO] [task_scheduler.cc:131] [Task #26: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_3] Trial #557: GFLOPs: 571.1737. Time: 404.9316 us. Best GFLOPs: 756.0935
2024-04-29 06:30:30 [INFO] [task_scheduler.cc:131] [Task #26: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_3] Trial #558: GFLOPs: 474.7238. Time: 487.2018 us. Best GFLOPs: 756.0935
2024-04-29 06:30:30 [INFO] [task_scheduler.cc:131] [Task #26: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_3] Trial #559: GFLOPs: 430.3521. Time: 537.4350 us. Best GFLOPs: 756.0935
2024-04-29 06:30:30 [INFO] [task_scheduler.cc:131] [Task #26: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_3] Trial #560: GFLOPs: 381.8322. Time: 605.7275 us. Best GFLOPs: 756.0935
2024-04-29 06:30:30 [INFO] [task_scheduler.cc:131] [Task #26: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_3] Trial #561: GFLOPs: 287.6279. Time: 804.1164 us. Best GFLOPs: 756.0935
2024-04-29 06:30:30 [INFO] [task_scheduler.cc:131] [Task #26: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_3] Trial #562: GFLOPs: 218.0462. Time: 1060.7214 us. Best GFLOPs: 756.0935
2024-04-29 06:30:30 [INFO] [task_scheduler.cc:131] [Task #26: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_3] Trial #563: GFLOPs: 277.3818. Time: 833.8191 us. Best GFLOPs: 756.0935
2024-04-29 06:30:30 [INFO] [task_scheduler.cc:131] [Task #26: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_3] Trial #564: GFLOPs: 221.1888. Time: 1045.6510 us. Best GFLOPs: 756.0935
2024-04-29 06:30:30 [INFO] [task_scheduler.cc:131] [Task #26: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_3] Trial #565: GFLOPs: 313.5247. Time: 737.6972 us. Best GFLOPs: 756.0935
2024-04-29 06:30:30 [INFO] [task_scheduler.cc:131] [Task #26: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_3] Trial #566: GFLOPs: 278.9071. Time: 829.2592 us. Best GFLOPs: 756.0935
2024-04-29 06:30:30 [INFO] [task_scheduler.cc:131] [Task #26: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_3] Trial #567: GFLOPs: 518.1841. Time: 446.3399 us. Best GFLOPs: 756.0935
2024-04-29 06:30:30 [INFO] [task_scheduler.cc:131] [Task #26: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_3] Trial #568: GFLOPs: 489.5099. Time: 472.4854 us. Best GFLOPs: 756.0935
2024-04-29 06:30:30 [INFO] [task_scheduler.cc:131] [Task #26: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_3] Trial #569: GFLOPs: 544.7066. Time: 424.6070 us. Best GFLOPs: 756.0935
2024-04-29 06:30:30 [INFO] [task_scheduler.cc:131] [Task #26: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_3] Trial #570: GFLOPs: 529.0067. Time: 437.2086 us. Best GFLOPs: 756.0935
2024-04-29 06:30:30 [INFO] [task_scheduler.cc:131] [Task #26: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_3] Trial #571: GFLOPs: 441.7181. Time: 523.6061 us. Best GFLOPs: 756.0935
2024-04-29 06:30:30 [INFO] [task_scheduler.cc:131] [Task #26: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_3] Trial #572: GFLOPs: 267.0860. Time: 865.9617 us. Best GFLOPs: 756.0935
2024-04-29 06:30:30 [INFO] [task_scheduler.cc:131] [Task #26: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_3] Trial #573: GFLOPs: 446.8867. Time: 517.5502 us. Best GFLOPs: 756.0935
2024-04-29 06:30:30 [INFO] [task_scheduler.cc:121] [Task #26: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_3] Trial #574: Error in building:
LocalBuilder: Timeout, killed after 30.0 seconds
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(1), T.int64(7), T.int64(7), T.int64(512)), "float32"), p1: T.Buffer((T.int64(16), T.int64(1), T.int64(3), T.int64(3), T.int64(512), T.int64(32)), "float32"), p2: T.Buffer((T.int64(1), T.int64(16), T.int64(1), T.int64(1), T.int64(32)), "float32"), p3: T.Buffer((T.int64(1), T.int64(16), T.int64(7), T.int64(7), T.int64(32)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(16), T.int64(7), T.int64(7), T.int64(32)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        data_pad = T.alloc_buffer((T.int64(1), T.int64(1), T.int64(9), T.int64(9), T.int64(512)))
        conv2d_NCHWc = T.alloc_buffer((T.int64(1), T.int64(16), T.int64(7), T.int64(7), T.int64(32)))
        for n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_fused_fused in T.parallel(T.int64(2), annotations={"pragma_auto_unroll_max_step": 512, "pragma_unroll_explicit": 1}):
            for n_1, oc_chunk_1 in T.grid(T.int64(1), T.int64(16)):
                for ax0, ax1, ax2, ax3, ax4 in T.grid(T.int64(1), T.int64(1), T.int64(9), T.int64(9), T.int64(512)):
                    with T.block("data_pad"):
                        v_i0, v_i1, v_i2, v_i3, v_i4 = T.axis.remap("SSSSS", [ax0, ax1, ax2, ax3, ax4])
                        T.reads(p0[v_i0, v_i1, v_i2 - T.int64(1), v_i3 - T.int64(1), v_i4])
                        T.writes(data_pad[v_i0, v_i1, v_i2, v_i3, v_i4])
                        data_pad[v_i0, v_i1, v_i2, v_i3, v_i4] = T.if_then_else(T.int64(1) <= v_i2 and v_i2 < T.int64(8) and T.int64(1) <= v_i3 and v_i3 < T.int64(8), p0[v_i0, v_i1, v_i2 - T.int64(1), v_i3 - T.int64(1), v_i4], T.float32(0))
                for oh_1, ow_1, oc_block_1 in T.grid(T.int64(1), T.int64(1), T.int64(1)):
                    for n_2_init, oc_chunk_2_init, oh_2_init, ow_2_init, oc_block_2_init, n_3_init, oc_chunk_3_init, oh_3_init, ow_3_init, oc_block_3_init in T.grid(T.int64(1), T.int64(1), T.int64(7), T.int64(7), T.int64(16), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1)):
                        with T.block("conv2d_NCHWc_init"):
                            v_n = T.axis.spatial(T.int64(1), n_1 + n_2_init + n_3_init)
                            v_oc_chunk = T.axis.spatial(T.int64(16), oc_chunk_1 + oc_chunk_2_init + oc_chunk_3_init)
                            v_oh = T.axis.spatial(T.int64(7), oh_1 * T.int64(7) + oh_2_init + oh_3_init)
                            v_ow = T.axis.spatial(T.int64(7), ow_1 * T.int64(7) + ow_2_init + ow_3_init)
                            v_oc_block = T.axis.spatial(T.int64(32), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_fused_fused * T.int64(16) + oc_block_1 * T.int64(16) + oc_block_2_init + oc_block_3_init)
                            T.reads()
                            T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                            T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                            conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = T.float32(0)
                    for ic_0, kh_0, kw_0, n_2, oc_chunk_2, oh_2, ow_2, oc_block_2, ic_1, kh_1, kw_1, n_3, oc_chunk_3, oh_3, ow_3, oc_block_3 in T.grid(T.int64(16), T.int64(3), T.int64(1), T.int64(1), T.int64(1), T.int64(7), T.int64(7), T.int64(16), T.int64(32), T.int64(1), T.int64(3), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1)):
                        with T.block("conv2d_NCHWc_update"):
                            v_n = T.axis.spatial(T.int64(1), n_1 + n_2 + n_3)
                            v_oc_chunk = T.axis.spatial(T.int64(16), oc_chunk_1 + oc_chunk_2 + oc_chunk_3)
                            v_oh = T.axis.spatial(T.int64(7), oh_1 * T.int64(7) + oh_2 + oh_3)
                            v_ow = T.axis.spatial(T.int64(7), ow_1 * T.int64(7) + ow_2 + ow_3)
                            v_oc_block = T.axis.spatial(T.int64(32), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_fused_fused * T.int64(16) + oc_block_1 * T.int64(16) + oc_block_2 + oc_block_3)
                            v_ic = T.axis.reduce(T.int64(512), ic_0 * T.int64(32) + ic_1)
                            v_kh = T.axis.reduce(T.int64(3), kh_0 + kh_1)
                            v_kw = T.axis.reduce(T.int64(3), kw_0 * T.int64(3) + kw_1)
                            T.reads(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block], data_pad[v_n, v_ic // T.int64(512), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(512)], p1[v_oc_chunk, v_ic // T.int64(512), v_kh, v_kw, v_ic % T.int64(512), v_oc_block])
                            T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                            T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                            conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] + data_pad[v_n, v_ic // T.int64(512), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(512)] * p1[v_oc_chunk, v_ic // T.int64(512), v_kh, v_kw, v_ic % T.int64(512), v_oc_block]
            for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(16), T.int64(7), T.int64(7)):
                for ax4_fused in T.vectorized(T.int64(16)):
                    with T.block("T_relu"):
                        v_ax0, v_ax1, v_ax2, v_ax3 = T.axis.remap("SSSS", [ax0, ax1, ax2, ax3])
                        v_ax4 = T.axis.spatial(T.int64(32), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_fused_fused * T.int64(16) + ax4_fused)
                        T.reads(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4], p3[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                        T.writes(T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                        T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.max(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] + p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4] + p3[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], T.float32(0))
b0 = sch.get_block(name="data_pad", func_name="main")
b1 = sch.get_block(name="conv2d_NCHWc", func_name="main")
b2 = sch.get_block(name="T_add", func_name="main")
b3 = sch.get_block(name="T_add_1", func_name="main")
b4 = sch.get_block(name="root", func_name="main")
sch.compute_inline(block=b3)
sch.compute_inline(block=b2)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSRSRS")
l5, l6, l7, l8, l9, l10, l11, l12 = sch.get_loops(block=b1)
v13, v14, v15, v16 = sch.sample_perfect_tile(loop=l5, n=4, max_innermost_factor=64, decision=[1, 1, 1, 1])
l17, l18, l19, l20 = sch.split(loop=l5, factors=[v13, v14, v15, v16], preserve_unit_iters=True)
v21, v22, v23, v24 = sch.sample_perfect_tile(loop=l6, n=4, max_innermost_factor=64, decision=[1, 16, 1, 1])
l25, l26, l27, l28 = sch.split(loop=l6, factors=[v21, v22, v23, v24], preserve_unit_iters=True)
v29, v30, v31, v32 = sch.sample_perfect_tile(loop=l7, n=4, max_innermost_factor=64, decision=[1, 1, 7, 1])
l33, l34, l35, l36 = sch.split(loop=l7, factors=[v29, v30, v31, v32], preserve_unit_iters=True)
v37, v38, v39, v40 = sch.sample_perfect_tile(loop=l8, n=4, max_innermost_factor=64, decision=[1, 1, 7, 1])
l41, l42, l43, l44 = sch.split(loop=l8, factors=[v37, v38, v39, v40], preserve_unit_iters=True)
v45, v46, v47, v48 = sch.sample_perfect_tile(loop=l9, n=4, max_innermost_factor=64, decision=[2, 1, 16, 1])
l49, l50, l51, l52 = sch.split(loop=l9, factors=[v45, v46, v47, v48], preserve_unit_iters=True)
v53, v54 = sch.sample_perfect_tile(loop=l10, n=2, max_innermost_factor=64, decision=[16, 32])
l55, l56 = sch.split(loop=l10, factors=[v53, v54], preserve_unit_iters=True)
v57, v58 = sch.sample_perfect_tile(loop=l11, n=2, max_innermost_factor=64, decision=[3, 1])
l59, l60 = sch.split(loop=l11, factors=[v57, v58], preserve_unit_iters=True)
v61, v62 = sch.sample_perfect_tile(loop=l12, n=2, max_innermost_factor=64, decision=[1, 3])
l63, l64 = sch.split(loop=l12, factors=[v61, v62], preserve_unit_iters=True)
sch.reorder(l17, l25, l33, l41, l49, l18, l26, l34, l42, l50, l55, l59, l63, l19, l27, l35, l43, l51, l56, l60, l64, l20, l28, l36, l44, l52)
b65, = sch.get_consumers(block=b1)
sch.reverse_compute_at(block=b65, loop=l49, preserve_unit_loops=True, index=-1)
sch.annotate(block_or_loop=b4, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b4, ann_key="meta_schedule.vectorize", ann_val=64)
v66 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b4, ann_key="meta_schedule.unroll_explicit", ann_val=v66)
l67 = sch.sample_compute_location(block=b0, decision=6)
sch.compute_at(block=b0, loop=l67, preserve_unit_loops=True, index=-1)
sch.enter_postproc()
b68 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b68, ann_key="meta_schedule.parallel")
sch.unannotate(block_or_loop=b68, ann_key="meta_schedule.vectorize")
sch.unannotate(block_or_loop=b68, ann_key="meta_schedule.unroll_explicit")
b69, b70, b71 = sch.get_child_blocks(b68)
l72, l73, l74, l75, l76, l77, l78, l79, l80, l81, l82, l83 = sch.get_loops(block=b69)
l84 = sch.fuse(l72, l73, l74, l75, l76, preserve_unit_iters=True)
sch.parallel(loop=l84)
l85, l86, l87, l88, l89, l90, l91, l92, l93, l94, l95, l96, l97, l98, l99, l100, l101, l102, l103, l104, l105, l106 = sch.get_loops(block=b70)
l107 = sch.fuse(l85, preserve_unit_iters=True)
sch.parallel(loop=l107)
sch.annotate(block_or_loop=l107, ann_key="pragma_auto_unroll_max_step", ann_val=512)
sch.annotate(block_or_loop=l107, ann_key="pragma_unroll_explicit", ann_val=1)
l108, l109, l110, l111, l112, l113 = sch.get_loops(block=b71)
l114 = sch.fuse(l113, preserve_unit_iters=True)
sch.vectorize(loop=l114)
b115 = sch.get_block(name="conv2d_NCHWc", func_name="main")
l116, l117, l118, l119, l120, l121, l122, l123, l124, l125, l126, l127, l128, l129, l130, l131, l132, l133, l134, l135, l136, l137 = sch.get_loops(block=b115)
b138 = sch.decompose_reduction(block=b115, loop=l122)
2024-04-29 06:30:30 [INFO] [task_scheduler.cc:131] [Task #26: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_3] Trial #575: GFLOPs: 6.7070. Time: 34484.2973 us. Best GFLOPs: 756.0935
2024-04-29 06:30:30 [INFO] [task_scheduler.cc:131] [Task #26: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_3] Trial #576: GFLOPs: 6.7889. Time: 34068.1270 us. Best GFLOPs: 756.0935
2024-04-29 07:23:15 [INFO] [evolutionary_search.cc:713] Generating candidates......
2024-04-29 07:23:16 [INFO] [evolutionary_search.cc:715] Picked top 102 candidate(s) from database
2024-04-29 07:23:20 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x36363d8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x4388aa8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x3310908)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x3246458)]: 0 failure(s)
2024-04-29 07:23:20 [INFO] [evolutionary_search.cc:723] Sampled 410 candidate(s)
2024-04-29 07:23:31 [INFO] [evolutionary_search.cc:621] Evolve iter #0 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x36363d8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x4388aa8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x3310908)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x3246458)]: 0 failure(s)
2024-04-29 07:23:42 [INFO] [evolutionary_search.cc:621] Evolve iter #1 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x36363d8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x4388aa8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x3310908)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x3246458)]: 0 failure(s)
2024-04-29 07:23:53 [INFO] [evolutionary_search.cc:621] Evolve iter #2 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x36363d8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x4388aa8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x3310908)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x3246458)]: 0 failure(s)
2024-04-29 07:24:05 [INFO] [evolutionary_search.cc:621] Evolve iter #3 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x36363d8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x4388aa8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x3310908)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x3246458)]: 0 failure(s)
2024-04-29 07:24:11 [INFO] [evolutionary_search.cc:649] Scores of the best 64 candidates:
[1 : 16]:	0.9744  0.9744  0.9464  0.9287  0.9153  0.9033  0.8977  0.8977  0.8977  0.8762  0.8388  0.8336  0.8336  0.8333  0.8329  0.8245
[17 : 32]:	0.8245  0.8234  0.8234  0.8222  0.8191  0.8018  0.8001  0.7990  0.7970  0.7967  0.7967  0.7947  0.7928  0.7919  0.7796  0.7775
[33 : 48]:	0.7775  0.7774  0.7695  0.7658  0.7519  0.7519  0.7436  0.7434  0.7433  0.7421  0.7407  0.7405  0.7379  0.7297  0.7297  0.7287
[49 : 64]:	0.7284  0.7276  0.7261  0.7261  0.7234  0.7167  0.7146  0.7134  0.7125  0.7106  0.7104  0.7089  0.7062  0.7058  0.7058  0.7047
2024-04-29 07:24:12 [INFO] [evolutionary_search.cc:727] Got 64 candidate(s) with evolutionary search
2024-04-29 07:24:12 [INFO] [evolutionary_search.cc:730] Sending 64 candidates(s) for measurement
2024-04-29 07:25:48 [INFO] [task_scheduler.cc:131] [Task #26: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_3] Trial #577: GFLOPs: 798.4111. Time: 289.6832 us. Best GFLOPs: 798.4111
2024-04-29 07:25:48 [INFO] [task_scheduler.cc:131] [Task #26: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_3] Trial #578: GFLOPs: 749.6097. Time: 308.5422 us. Best GFLOPs: 798.4111
2024-04-29 07:25:48 [INFO] [task_scheduler.cc:131] [Task #26: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_3] Trial #579: GFLOPs: 737.6004. Time: 313.5658 us. Best GFLOPs: 798.4111
2024-04-29 07:25:48 [INFO] [task_scheduler.cc:131] [Task #26: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_3] Trial #580: GFLOPs: 733.5396. Time: 315.3017 us. Best GFLOPs: 798.4111
2024-04-29 07:25:48 [INFO] [task_scheduler.cc:131] [Task #26: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_3] Trial #581: GFLOPs: 721.3697. Time: 320.6210 us. Best GFLOPs: 798.4111
2024-04-29 07:25:48 [INFO] [task_scheduler.cc:131] [Task #26: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_3] Trial #582: GFLOPs: 745.1112. Time: 310.4050 us. Best GFLOPs: 798.4111
2024-04-29 07:25:48 [INFO] [task_scheduler.cc:131] [Task #26: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_3] Trial #583: GFLOPs: 718.9305. Time: 321.7088 us. Best GFLOPs: 798.4111
2024-04-29 07:25:48 [INFO] [task_scheduler.cc:131] [Task #26: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_3] Trial #584: GFLOPs: 622.4668. Time: 371.5640 us. Best GFLOPs: 798.4111
2024-04-29 07:25:48 [INFO] [task_scheduler.cc:131] [Task #26: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_3] Trial #585: GFLOPs: 631.0676. Time: 366.5000 us. Best GFLOPs: 798.4111
2024-04-29 07:25:48 [INFO] [task_scheduler.cc:131] [Task #26: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_3] Trial #586: GFLOPs: 669.7056. Time: 345.3552 us. Best GFLOPs: 798.4111
2024-04-29 07:25:48 [INFO] [task_scheduler.cc:131] [Task #26: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_3] Trial #587: GFLOPs: 654.1462. Time: 353.5697 us. Best GFLOPs: 798.4111
2024-04-29 07:25:48 [INFO] [task_scheduler.cc:131] [Task #26: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_3] Trial #588: GFLOPs: 643.8410. Time: 359.2288 us. Best GFLOPs: 798.4111
2024-04-29 07:25:48 [INFO] [task_scheduler.cc:131] [Task #26: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_3] Trial #589: GFLOPs: 649.4699. Time: 356.1155 us. Best GFLOPs: 798.4111
2024-04-29 07:25:48 [INFO] [task_scheduler.cc:131] [Task #26: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_3] Trial #590: GFLOPs: 607.4657. Time: 380.7396 us. Best GFLOPs: 798.4111
2024-04-29 07:25:48 [INFO] [task_scheduler.cc:131] [Task #26: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_3] Trial #591: GFLOPs: 667.8680. Time: 346.3054 us. Best GFLOPs: 798.4111
2024-04-29 07:25:48 [INFO] [task_scheduler.cc:131] [Task #26: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_3] Trial #592: GFLOPs: 658.4563. Time: 351.2553 us. Best GFLOPs: 798.4111
2024-04-29 07:25:48 [INFO] [task_scheduler.cc:131] [Task #26: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_3] Trial #593: GFLOPs: 663.3817. Time: 348.6474 us. Best GFLOPs: 798.4111
2024-04-29 07:25:48 [INFO] [task_scheduler.cc:131] [Task #26: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_3] Trial #594: GFLOPs: 611.2121. Time: 378.4059 us. Best GFLOPs: 798.4111
2024-04-29 07:25:48 [INFO] [task_scheduler.cc:131] [Task #26: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_3] Trial #595: GFLOPs: 637.3619. Time: 362.8806 us. Best GFLOPs: 798.4111
2024-04-29 07:25:48 [INFO] [task_scheduler.cc:131] [Task #26: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_3] Trial #596: GFLOPs: 612.5735. Time: 377.5649 us. Best GFLOPs: 798.4111
2024-04-29 07:25:48 [INFO] [task_scheduler.cc:131] [Task #26: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_3] Trial #597: GFLOPs: 662.0424. Time: 349.3527 us. Best GFLOPs: 798.4111
2024-04-29 07:25:48 [INFO] [task_scheduler.cc:131] [Task #26: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_3] Trial #598: GFLOPs: 527.8556. Time: 438.1620 us. Best GFLOPs: 798.4111
2024-04-29 07:25:48 [INFO] [task_scheduler.cc:131] [Task #26: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_3] Trial #599: GFLOPs: 583.7197. Time: 396.2283 us. Best GFLOPs: 798.4111
2024-04-29 07:25:48 [INFO] [task_scheduler.cc:131] [Task #26: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_3] Trial #600: GFLOPs: 621.1639. Time: 372.3434 us. Best GFLOPs: 798.4111
2024-04-29 07:25:48 [INFO] [task_scheduler.cc:131] [Task #26: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_3] Trial #601: GFLOPs: 593.8594. Time: 389.4630 us. Best GFLOPs: 798.4111
2024-04-29 07:25:48 [INFO] [task_scheduler.cc:131] [Task #26: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_3] Trial #602: GFLOPs: 601.4727. Time: 384.5333 us. Best GFLOPs: 798.4111
2024-04-29 07:25:48 [INFO] [task_scheduler.cc:131] [Task #26: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_3] Trial #603: GFLOPs: 573.8578. Time: 403.0376 us. Best GFLOPs: 798.4111
2024-04-29 07:25:48 [INFO] [task_scheduler.cc:131] [Task #26: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_3] Trial #604: GFLOPs: 579.6731. Time: 398.9943 us. Best GFLOPs: 798.4111
2024-04-29 07:25:48 [INFO] [task_scheduler.cc:131] [Task #26: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_3] Trial #605: GFLOPs: 612.7443. Time: 377.4597 us. Best GFLOPs: 798.4111
2024-04-29 07:25:48 [INFO] [task_scheduler.cc:131] [Task #26: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_3] Trial #606: GFLOPs: 664.7865. Time: 347.9106 us. Best GFLOPs: 798.4111
2024-04-29 07:25:48 [INFO] [task_scheduler.cc:131] [Task #26: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_3] Trial #607: GFLOPs: 604.8161. Time: 382.4076 us. Best GFLOPs: 798.4111
2024-04-29 07:25:48 [INFO] [task_scheduler.cc:131] [Task #26: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_3] Trial #608: GFLOPs: 618.7979. Time: 373.7671 us. Best GFLOPs: 798.4111
2024-04-29 07:25:48 [INFO] [task_scheduler.cc:131] [Task #26: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_3] Trial #609: GFLOPs: 629.2587. Time: 367.5535 us. Best GFLOPs: 798.4111
2024-04-29 07:25:48 [INFO] [task_scheduler.cc:131] [Task #26: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_3] Trial #610: GFLOPs: 606.1363. Time: 381.5747 us. Best GFLOPs: 798.4111
2024-04-29 07:25:48 [INFO] [task_scheduler.cc:131] [Task #26: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_3] Trial #611: GFLOPs: 526.0162. Time: 439.6942 us. Best GFLOPs: 798.4111
2024-04-29 07:25:48 [INFO] [task_scheduler.cc:131] [Task #26: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_3] Trial #612: GFLOPs: 566.1552. Time: 408.5210 us. Best GFLOPs: 798.4111
2024-04-29 07:25:48 [INFO] [task_scheduler.cc:131] [Task #26: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_3] Trial #613: GFLOPs: 572.4622. Time: 404.0202 us. Best GFLOPs: 798.4111
2024-04-29 07:25:48 [INFO] [task_scheduler.cc:131] [Task #26: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_3] Trial #614: GFLOPs: 542.9675. Time: 425.9671 us. Best GFLOPs: 798.4111
2024-04-29 07:25:48 [INFO] [task_scheduler.cc:131] [Task #26: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_3] Trial #615: GFLOPs: 459.6981. Time: 503.1264 us. Best GFLOPs: 798.4111
2024-04-29 07:25:48 [INFO] [task_scheduler.cc:131] [Task #26: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_3] Trial #616: GFLOPs: 559.5570. Time: 413.3382 us. Best GFLOPs: 798.4111
2024-04-29 07:25:48 [INFO] [task_scheduler.cc:131] [Task #26: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_3] Trial #617: GFLOPs: 526.9672. Time: 438.9007 us. Best GFLOPs: 798.4111
2024-04-29 07:25:48 [INFO] [task_scheduler.cc:131] [Task #26: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_3] Trial #618: GFLOPs: 619.4535. Time: 373.3715 us. Best GFLOPs: 798.4111
2024-04-29 07:25:48 [INFO] [task_scheduler.cc:131] [Task #26: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_3] Trial #619: GFLOPs: 562.8325. Time: 410.9327 us. Best GFLOPs: 798.4111
2024-04-29 07:25:48 [INFO] [task_scheduler.cc:131] [Task #26: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_3] Trial #620: GFLOPs: 565.2533. Time: 409.1728 us. Best GFLOPs: 798.4111
2024-04-29 07:25:48 [INFO] [task_scheduler.cc:131] [Task #26: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_3] Trial #621: GFLOPs: 542.2190. Time: 426.5551 us. Best GFLOPs: 798.4111
2024-04-29 07:25:48 [INFO] [task_scheduler.cc:131] [Task #26: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_3] Trial #622: GFLOPs: 540.6876. Time: 427.7632 us. Best GFLOPs: 798.4111
2024-04-29 07:25:48 [INFO] [task_scheduler.cc:131] [Task #26: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_3] Trial #623: GFLOPs: 563.7030. Time: 410.2981 us. Best GFLOPs: 798.4111
2024-04-29 07:25:48 [INFO] [task_scheduler.cc:131] [Task #26: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_3] Trial #624: GFLOPs: 540.0495. Time: 428.2687 us. Best GFLOPs: 798.4111
2024-04-29 07:25:48 [INFO] [task_scheduler.cc:131] [Task #26: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_3] Trial #625: GFLOPs: 554.9548. Time: 416.7659 us. Best GFLOPs: 798.4111
2024-04-29 07:25:48 [INFO] [task_scheduler.cc:131] [Task #26: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_3] Trial #626: GFLOPs: 549.2508. Time: 421.0941 us. Best GFLOPs: 798.4111
2024-04-29 07:25:48 [INFO] [task_scheduler.cc:131] [Task #26: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_3] Trial #627: GFLOPs: 591.2571. Time: 391.1772 us. Best GFLOPs: 798.4111
2024-04-29 07:25:48 [INFO] [task_scheduler.cc:131] [Task #26: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_3] Trial #628: GFLOPs: 580.5789. Time: 398.3718 us. Best GFLOPs: 798.4111
2024-04-29 07:25:48 [INFO] [task_scheduler.cc:131] [Task #26: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_3] Trial #629: GFLOPs: 556.0099. Time: 415.9751 us. Best GFLOPs: 798.4111
2024-04-29 07:25:48 [INFO] [task_scheduler.cc:131] [Task #26: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_3] Trial #630: GFLOPs: 593.6663. Time: 389.5897 us. Best GFLOPs: 798.4111
2024-04-29 07:25:48 [INFO] [task_scheduler.cc:131] [Task #26: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_3] Trial #631: GFLOPs: 544.6939. Time: 424.6169 us. Best GFLOPs: 798.4111
2024-04-29 07:25:48 [INFO] [task_scheduler.cc:131] [Task #26: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_3] Trial #632: GFLOPs: 563.2272. Time: 410.6447 us. Best GFLOPs: 798.4111
2024-04-29 07:25:48 [INFO] [task_scheduler.cc:131] [Task #26: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_3] Trial #633: GFLOPs: 546.8174. Time: 422.9680 us. Best GFLOPs: 798.4111
2024-04-29 07:25:48 [INFO] [task_scheduler.cc:131] [Task #26: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_3] Trial #634: GFLOPs: 557.0768. Time: 415.1784 us. Best GFLOPs: 798.4111
2024-04-29 07:25:48 [INFO] [task_scheduler.cc:131] [Task #26: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_3] Trial #635: GFLOPs: 537.8574. Time: 430.0141 us. Best GFLOPs: 798.4111
2024-04-29 07:25:48 [INFO] [task_scheduler.cc:131] [Task #26: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_3] Trial #636: GFLOPs: 540.4682. Time: 427.9369 us. Best GFLOPs: 798.4111
2024-04-29 07:25:48 [INFO] [task_scheduler.cc:131] [Task #26: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_3] Trial #637: GFLOPs: 174.3835. Time: 1326.3083 us. Best GFLOPs: 798.4111
2024-04-29 07:25:48 [INFO] [task_scheduler.cc:131] [Task #26: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_3] Trial #638: GFLOPs: 1.3273. Time: 174246.7613 us. Best GFLOPs: 798.4111
2024-04-29 07:25:48 [INFO] [task_scheduler.cc:131] [Task #26: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_3] Trial #639: GFLOPs: 20.8305. Time: 11103.2545 us. Best GFLOPs: 798.4111
2024-04-29 07:25:48 [INFO] [task_scheduler.cc:131] [Task #26: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_3] Trial #640: GFLOPs: 23.8405. Time: 9701.4091 us. Best GFLOPs: 798.4111
2024-04-29 07:41:59 [INFO] [evolutionary_search.cc:713] Generating candidates......
2024-04-29 07:42:00 [INFO] [evolutionary_search.cc:715] Picked top 102 candidate(s) from database
2024-04-29 07:42:04 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x36363d8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x4388aa8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x3310908)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x3246458)]: 0 failure(s)
2024-04-29 07:42:04 [INFO] [evolutionary_search.cc:723] Sampled 410 candidate(s)
2024-04-29 07:42:15 [INFO] [evolutionary_search.cc:621] Evolve iter #0 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x36363d8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x4388aa8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x3310908)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x3246458)]: 0 failure(s)
2024-04-29 07:42:26 [INFO] [evolutionary_search.cc:621] Evolve iter #1 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x36363d8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x4388aa8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x3310908)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x3246458)]: 0 failure(s)
2024-04-29 07:42:37 [INFO] [evolutionary_search.cc:621] Evolve iter #2 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x36363d8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x4388aa8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x3310908)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x3246458)]: 0 failure(s)
2024-04-29 07:42:48 [INFO] [evolutionary_search.cc:621] Evolve iter #3 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x36363d8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x4388aa8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x3310908)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x3246458)]: 0 failure(s)
2024-04-29 07:42:55 [INFO] [evolutionary_search.cc:649] Scores of the best 64 candidates:
[1 : 16]:	0.9216  0.8625  0.8545  0.8158  0.8138  0.8098  0.8072  0.8012  0.8002  0.8002  0.7963  0.7879  0.7849  0.7834  0.7819  0.7753
[17 : 32]:	0.7698  0.7630  0.7630  0.7630  0.7556  0.7555  0.7534  0.7522  0.7522  0.7507  0.7507  0.7383  0.7383  0.7291  0.7277  0.7198
[33 : 48]:	0.7198  0.7180  0.7165  0.7165  0.7165  0.7165  0.7165  0.7165  0.7136  0.7121  0.7121  0.7106  0.7091  0.7091  0.7091  0.7091
[49 : 64]:	0.7091  0.7091  0.7077  0.7030  0.7012  0.6979  0.6978  0.6954  0.6946  0.6932  0.6924  0.6924  0.6889  0.6845  0.6845  0.6830
2024-04-29 07:42:55 [INFO] [evolutionary_search.cc:727] Got 64 candidate(s) with evolutionary search
2024-04-29 07:42:55 [INFO] [evolutionary_search.cc:730] Sending 64 candidates(s) for measurement
2024-04-29 07:45:00 [INFO] [task_scheduler.cc:131] [Task #26: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_3] Trial #641: GFLOPs: 732.5150. Time: 315.7427 us. Best GFLOPs: 798.4111
2024-04-29 07:45:00 [INFO] [task_scheduler.cc:131] [Task #26: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_3] Trial #642: GFLOPs: 780.0561. Time: 296.4995 us. Best GFLOPs: 798.4111
2024-04-29 07:45:00 [INFO] [task_scheduler.cc:131] [Task #26: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_3] Trial #643: GFLOPs: 755.9154. Time: 305.9685 us. Best GFLOPs: 798.4111
2024-04-29 07:45:00 [INFO] [task_scheduler.cc:131] [Task #26: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_3] Trial #644: GFLOPs: 757.7500. Time: 305.2277 us. Best GFLOPs: 798.4111
2024-04-29 07:45:00 [INFO] [task_scheduler.cc:131] [Task #26: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_3] Trial #645: GFLOPs: 639.6614. Time: 361.5761 us. Best GFLOPs: 798.4111
2024-04-29 07:45:00 [INFO] [task_scheduler.cc:131] [Task #26: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_3] Trial #646: GFLOPs: 668.9448. Time: 345.7479 us. Best GFLOPs: 798.4111
2024-04-29 07:45:00 [INFO] [task_scheduler.cc:131] [Task #26: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_3] Trial #647: GFLOPs: 678.2214. Time: 341.0188 us. Best GFLOPs: 798.4111
2024-04-29 07:45:00 [INFO] [task_scheduler.cc:131] [Task #26: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_3] Trial #648: GFLOPs: 762.3301. Time: 303.3938 us. Best GFLOPs: 798.4111
2024-04-29 07:45:00 [INFO] [task_scheduler.cc:131] [Task #26: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_3] Trial #649: GFLOPs: 613.0212. Time: 377.2892 us. Best GFLOPs: 798.4111
2024-04-29 07:45:00 [INFO] [task_scheduler.cc:131] [Task #26: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_3] Trial #650: GFLOPs: 706.3946. Time: 327.4179 us. Best GFLOPs: 798.4111
2024-04-29 07:45:00 [INFO] [task_scheduler.cc:131] [Task #26: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_3] Trial #651: GFLOPs: 672.9013. Time: 343.7150 us. Best GFLOPs: 798.4111
2024-04-29 07:45:00 [INFO] [task_scheduler.cc:131] [Task #26: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_3] Trial #652: GFLOPs: 610.7036. Time: 378.7210 us. Best GFLOPs: 798.4111
2024-04-29 07:45:00 [INFO] [task_scheduler.cc:131] [Task #26: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_3] Trial #653: GFLOPs: 636.7867. Time: 363.2084 us. Best GFLOPs: 798.4111
2024-04-29 07:45:00 [INFO] [task_scheduler.cc:131] [Task #26: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_3] Trial #654: GFLOPs: 637.0213. Time: 363.0746 us. Best GFLOPs: 798.4111
2024-04-29 07:45:00 [INFO] [task_scheduler.cc:131] [Task #26: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_3] Trial #655: GFLOPs: 598.5912. Time: 386.3844 us. Best GFLOPs: 798.4111
2024-04-29 07:45:00 [INFO] [task_scheduler.cc:131] [Task #26: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_3] Trial #656: GFLOPs: 577.0715. Time: 400.7931 us. Best GFLOPs: 798.4111
2024-04-29 07:45:00 [INFO] [task_scheduler.cc:131] [Task #26: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_3] Trial #657: GFLOPs: 630.6709. Time: 366.7306 us. Best GFLOPs: 798.4111
2024-04-29 07:45:00 [INFO] [task_scheduler.cc:131] [Task #26: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_3] Trial #658: GFLOPs: 531.3750. Time: 435.2600 us. Best GFLOPs: 798.4111
2024-04-29 07:45:00 [INFO] [task_scheduler.cc:131] [Task #26: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_3] Trial #659: GFLOPs: 617.0760. Time: 374.8100 us. Best GFLOPs: 798.4111
2024-04-29 07:45:00 [INFO] [task_scheduler.cc:131] [Task #26: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_3] Trial #660: GFLOPs: 619.2022. Time: 373.5230 us. Best GFLOPs: 798.4111
2024-04-29 07:45:00 [INFO] [task_scheduler.cc:131] [Task #26: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_3] Trial #661: GFLOPs: 677.0807. Time: 341.5934 us. Best GFLOPs: 798.4111
2024-04-29 07:45:00 [INFO] [task_scheduler.cc:131] [Task #26: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_3] Trial #662: GFLOPs: 612.9377. Time: 377.3406 us. Best GFLOPs: 798.4111
2024-04-29 07:45:00 [INFO] [task_scheduler.cc:131] [Task #26: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_3] Trial #663: GFLOPs: 569.1343. Time: 406.3826 us. Best GFLOPs: 798.4111
2024-04-29 07:45:00 [INFO] [task_scheduler.cc:131] [Task #26: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_3] Trial #664: GFLOPs: 595.9372. Time: 388.1051 us. Best GFLOPs: 798.4111
2024-04-29 07:45:00 [INFO] [task_scheduler.cc:131] [Task #26: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_3] Trial #665: GFLOPs: 576.3010. Time: 401.3289 us. Best GFLOPs: 798.4111
2024-04-29 07:45:00 [INFO] [task_scheduler.cc:131] [Task #26: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_3] Trial #666: GFLOPs: 566.1181. Time: 408.5477 us. Best GFLOPs: 798.4111
2024-04-29 07:45:00 [INFO] [task_scheduler.cc:131] [Task #26: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_3] Trial #667: GFLOPs: 597.1690. Time: 387.3046 us. Best GFLOPs: 798.4111
2024-04-29 07:45:00 [INFO] [task_scheduler.cc:131] [Task #26: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_3] Trial #668: GFLOPs: 270.8299. Time: 853.9910 us. Best GFLOPs: 798.4111
2024-04-29 07:45:00 [INFO] [task_scheduler.cc:131] [Task #26: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_3] Trial #669: GFLOPs: 569.3074. Time: 406.2590 us. Best GFLOPs: 798.4111
2024-04-29 07:45:00 [INFO] [task_scheduler.cc:131] [Task #26: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_3] Trial #670: GFLOPs: 633.5117. Time: 365.0860 us. Best GFLOPs: 798.4111
2024-04-29 07:45:00 [INFO] [task_scheduler.cc:131] [Task #26: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_3] Trial #671: GFLOPs: 569.1364. Time: 406.3811 us. Best GFLOPs: 798.4111
2024-04-29 07:45:00 [INFO] [task_scheduler.cc:131] [Task #26: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_3] Trial #672: GFLOPs: 238.9744. Time: 967.8285 us. Best GFLOPs: 798.4111
2024-04-29 07:45:00 [INFO] [task_scheduler.cc:131] [Task #26: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_3] Trial #673: GFLOPs: 568.4871. Time: 406.8452 us. Best GFLOPs: 798.4111
2024-04-29 07:45:00 [INFO] [task_scheduler.cc:131] [Task #26: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_3] Trial #674: GFLOPs: 572.2795. Time: 404.1491 us. Best GFLOPs: 798.4111
2024-04-29 07:45:00 [INFO] [task_scheduler.cc:131] [Task #26: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_3] Trial #675: GFLOPs: 577.2013. Time: 400.7030 us. Best GFLOPs: 798.4111
2024-04-29 07:45:00 [INFO] [task_scheduler.cc:131] [Task #26: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_3] Trial #676: GFLOPs: 68.7907. Time: 3362.1725 us. Best GFLOPs: 798.4111
2024-04-29 07:45:00 [INFO] [task_scheduler.cc:131] [Task #26: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_3] Trial #677: GFLOPs: 137.5061. Time: 1682.0069 us. Best GFLOPs: 798.4111
2024-04-29 07:45:00 [INFO] [task_scheduler.cc:131] [Task #26: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_3] Trial #678: GFLOPs: 145.0127. Time: 1594.9379 us. Best GFLOPs: 798.4111
2024-04-29 07:45:00 [INFO] [task_scheduler.cc:131] [Task #26: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_3] Trial #679: GFLOPs: 137.8677. Time: 1677.5960 us. Best GFLOPs: 798.4111
2024-04-29 07:45:00 [INFO] [task_scheduler.cc:131] [Task #26: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_3] Trial #680: GFLOPs: 82.6711. Time: 2797.6678 us. Best GFLOPs: 798.4111
2024-04-29 07:45:00 [INFO] [task_scheduler.cc:131] [Task #26: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_3] Trial #681: GFLOPs: 570.1089. Time: 405.6878 us. Best GFLOPs: 798.4111
2024-04-29 07:45:00 [INFO] [task_scheduler.cc:131] [Task #26: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_3] Trial #682: GFLOPs: 568.7079. Time: 406.6873 us. Best GFLOPs: 798.4111
2024-04-29 07:45:00 [INFO] [task_scheduler.cc:131] [Task #26: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_3] Trial #683: GFLOPs: 581.0358. Time: 398.0585 us. Best GFLOPs: 798.4111
2024-04-29 07:45:00 [INFO] [task_scheduler.cc:131] [Task #26: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_3] Trial #684: GFLOPs: 536.5855. Time: 431.0334 us. Best GFLOPs: 798.4111
2024-04-29 07:45:00 [INFO] [task_scheduler.cc:131] [Task #26: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_3] Trial #685: GFLOPs: 345.5993. Time: 669.2325 us. Best GFLOPs: 798.4111
2024-04-29 07:45:00 [INFO] [task_scheduler.cc:131] [Task #26: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_3] Trial #686: GFLOPs: 346.7007. Time: 667.1065 us. Best GFLOPs: 798.4111
2024-04-29 07:45:00 [INFO] [task_scheduler.cc:131] [Task #26: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_3] Trial #687: GFLOPs: 335.2030. Time: 689.9887 us. Best GFLOPs: 798.4111
2024-04-29 07:45:00 [INFO] [task_scheduler.cc:131] [Task #26: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_3] Trial #688: GFLOPs: 336.5876. Time: 687.1503 us. Best GFLOPs: 798.4111
2024-04-29 07:45:00 [INFO] [task_scheduler.cc:131] [Task #26: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_3] Trial #689: GFLOPs: 334.0332. Time: 692.4050 us. Best GFLOPs: 798.4111
2024-04-29 07:45:00 [INFO] [task_scheduler.cc:131] [Task #26: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_3] Trial #690: GFLOPs: 349.1163. Time: 662.4905 us. Best GFLOPs: 798.4111
2024-04-29 07:45:00 [INFO] [task_scheduler.cc:131] [Task #26: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_3] Trial #691: GFLOPs: 549.7572. Time: 420.7062 us. Best GFLOPs: 798.4111
2024-04-29 07:45:00 [INFO] [task_scheduler.cc:131] [Task #26: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_3] Trial #692: GFLOPs: 546.3276. Time: 423.3472 us. Best GFLOPs: 798.4111
2024-04-29 07:45:00 [INFO] [task_scheduler.cc:121] [Task #26: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_3] Trial #693: Error in building:
LocalBuilder: Timeout, killed after 30.0 seconds
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(1), T.int64(7), T.int64(7), T.int64(512)), "float32"), p1: T.Buffer((T.int64(16), T.int64(1), T.int64(3), T.int64(3), T.int64(512), T.int64(32)), "float32"), p2: T.Buffer((T.int64(1), T.int64(16), T.int64(1), T.int64(1), T.int64(32)), "float32"), p3: T.Buffer((T.int64(1), T.int64(16), T.int64(7), T.int64(7), T.int64(32)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(16), T.int64(7), T.int64(7), T.int64(32)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        data_pad = T.alloc_buffer((T.int64(1), T.int64(1), T.int64(9), T.int64(9), T.int64(512)))
        conv2d_NCHWc = T.alloc_buffer((T.int64(1), T.int64(16), T.int64(7), T.int64(7), T.int64(32)))
        for n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_fused_fused in T.parallel(T.int64(112), annotations={"pragma_auto_unroll_max_step": 512, "pragma_unroll_explicit": 1}):
            for ax0, ax1, ax2, ax3, ax4 in T.grid(T.int64(1), T.int64(1), T.int64(3), T.int64(9), T.int64(512)):
                with T.block("data_pad"):
                    v_i0, v_i1 = T.axis.remap("SS", [ax0, ax1])
                    v_i2 = T.axis.spatial(T.int64(9), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_fused_fused // T.int64(16) + ax2)
                    v_i3, v_i4 = T.axis.remap("SS", [ax3, ax4])
                    T.reads(p0[v_i0, v_i1, v_i2 - T.int64(1), v_i3 - T.int64(1), v_i4])
                    T.writes(data_pad[v_i0, v_i1, v_i2, v_i3, v_i4])
                    data_pad[v_i0, v_i1, v_i2, v_i3, v_i4] = T.if_then_else(T.int64(1) <= v_i2 and v_i2 < T.int64(8) and T.int64(1) <= v_i3 and v_i3 < T.int64(8), p0[v_i0, v_i1, v_i2 - T.int64(1), v_i3 - T.int64(1), v_i4], T.float32(0))
            for oh_1, ow_1, oc_block_1 in T.grid(T.int64(1), T.int64(1), T.int64(1)):
                for n_2_init, oc_chunk_2_init, oh_2_init, ow_2_init, oc_block_2_init, n_3_init, oc_chunk_3_init, oh_3_init, ow_3_init, oc_block_3_init in T.grid(T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(32), T.int64(1), T.int64(1), T.int64(1), T.int64(7), T.int64(1)):
                    with T.block("conv2d_NCHWc_init"):
                        v_n = T.axis.spatial(T.int64(1), n_2_init + n_3_init)
                        v_oc_chunk = T.axis.spatial(T.int64(16), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_fused_fused % T.int64(16) + oc_chunk_2_init + oc_chunk_3_init)
                        v_oh = T.axis.spatial(T.int64(7), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_fused_fused // T.int64(16) + oh_1 + oh_2_init + oh_3_init)
                        v_ow = T.axis.spatial(T.int64(7), ow_1 * T.int64(7) + ow_2_init * T.int64(7) + ow_3_init)
                        v_oc_block = T.axis.spatial(T.int64(32), oc_block_1 * T.int64(32) + oc_block_2_init + oc_block_3_init)
                        T.reads()
                        T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                        T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                        conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = T.float32(0)
                for ic_0, kh_0, kw_0, n_2, oc_chunk_2, oh_2, ow_2, oc_block_2, ic_1, kh_1, kw_1, n_3, oc_chunk_3, oh_3, ow_3, oc_block_3 in T.grid(T.int64(256), T.int64(3), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(32), T.int64(2), T.int64(1), T.int64(3), T.int64(1), T.int64(1), T.int64(1), T.int64(7), T.int64(1)):
                    with T.block("conv2d_NCHWc_update"):
                        v_n = T.axis.spatial(T.int64(1), n_2 + n_3)
                        v_oc_chunk = T.axis.spatial(T.int64(16), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_fused_fused % T.int64(16) + oc_chunk_2 + oc_chunk_3)
                        v_oh = T.axis.spatial(T.int64(7), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_fused_fused // T.int64(16) + oh_1 + oh_2 + oh_3)
                        v_ow = T.axis.spatial(T.int64(7), ow_1 * T.int64(7) + ow_2 * T.int64(7) + ow_3)
                        v_oc_block = T.axis.spatial(T.int64(32), oc_block_1 * T.int64(32) + oc_block_2 + oc_block_3)
                        v_ic = T.axis.reduce(T.int64(512), ic_0 * T.int64(2) + ic_1)
                        v_kh = T.axis.reduce(T.int64(3), kh_0 + kh_1)
                        v_kw = T.axis.reduce(T.int64(3), kw_0 * T.int64(3) + kw_1)
                        T.reads(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block], data_pad[v_n, v_ic // T.int64(512), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(512)], p1[v_oc_chunk, v_ic // T.int64(512), v_kh, v_kw, v_ic % T.int64(512), v_oc_block])
                        T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                        T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                        conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] + data_pad[v_n, v_ic // T.int64(512), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(512)] * p1[v_oc_chunk, v_ic // T.int64(512), v_kh, v_kw, v_ic % T.int64(512), v_oc_block]
                for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(1), T.int64(1), T.int64(7)):
                    for ax4_fused in T.vectorized(T.int64(32)):
                        with T.block("T_relu"):
                            v_ax0 = T.axis.spatial(T.int64(1), ax0)
                            v_ax1 = T.axis.spatial(T.int64(16), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_fused_fused % T.int64(16) + ax1)
                            v_ax2 = T.axis.spatial(T.int64(7), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_fused_fused // T.int64(16) + ax2)
                            v_ax3, v_ax4 = T.axis.remap("SS", [ax3, ax4_fused])
                            T.reads(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4], p3[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                            T.writes(T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                            T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.max(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] + p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4] + p3[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], T.float32(0))
b0 = sch.get_block(name="data_pad", func_name="main")
b1 = sch.get_block(name="conv2d_NCHWc", func_name="main")
b2 = sch.get_block(name="T_add", func_name="main")
b3 = sch.get_block(name="T_add_1", func_name="main")
b4 = sch.get_block(name="root", func_name="main")
sch.compute_inline(block=b3)
sch.compute_inline(block=b2)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSRSRS")
l5, l6, l7, l8, l9, l10, l11, l12 = sch.get_loops(block=b1)
v13, v14, v15, v16 = sch.sample_perfect_tile(loop=l5, n=4, max_innermost_factor=64, decision=[1, 1, 1, 1])
l17, l18, l19, l20 = sch.split(loop=l5, factors=[v13, v14, v15, v16], preserve_unit_iters=True)
v21, v22, v23, v24 = sch.sample_perfect_tile(loop=l6, n=4, max_innermost_factor=64, decision=[1, 16, 1, 1])
l25, l26, l27, l28 = sch.split(loop=l6, factors=[v21, v22, v23, v24], preserve_unit_iters=True)
v29, v30, v31, v32 = sch.sample_perfect_tile(loop=l7, n=4, max_innermost_factor=64, decision=[7, 1, 1, 1])
l33, l34, l35, l36 = sch.split(loop=l7, factors=[v29, v30, v31, v32], preserve_unit_iters=True)
v37, v38, v39, v40 = sch.sample_perfect_tile(loop=l8, n=4, max_innermost_factor=64, decision=[1, 1, 1, 7])
l41, l42, l43, l44 = sch.split(loop=l8, factors=[v37, v38, v39, v40], preserve_unit_iters=True)
v45, v46, v47, v48 = sch.sample_perfect_tile(loop=l9, n=4, max_innermost_factor=64, decision=[1, 1, 32, 1])
l49, l50, l51, l52 = sch.split(loop=l9, factors=[v45, v46, v47, v48], preserve_unit_iters=True)
v53, v54 = sch.sample_perfect_tile(loop=l10, n=2, max_innermost_factor=64, decision=[256, 2])
l55, l56 = sch.split(loop=l10, factors=[v53, v54], preserve_unit_iters=True)
v57, v58 = sch.sample_perfect_tile(loop=l11, n=2, max_innermost_factor=64, decision=[3, 1])
l59, l60 = sch.split(loop=l11, factors=[v57, v58], preserve_unit_iters=True)
v61, v62 = sch.sample_perfect_tile(loop=l12, n=2, max_innermost_factor=64, decision=[1, 3])
l63, l64 = sch.split(loop=l12, factors=[v61, v62], preserve_unit_iters=True)
sch.reorder(l17, l25, l33, l41, l49, l18, l26, l34, l42, l50, l55, l59, l63, l19, l27, l35, l43, l51, l56, l60, l64, l20, l28, l36, l44, l52)
b65, = sch.get_consumers(block=b1)
sch.reverse_compute_at(block=b65, loop=l50, preserve_unit_loops=True, index=-1)
sch.annotate(block_or_loop=b4, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b4, ann_key="meta_schedule.vectorize", ann_val=64)
v66 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b4, ann_key="meta_schedule.unroll_explicit", ann_val=v66)
l67 = sch.sample_compute_location(block=b0, decision=6)
sch.compute_at(block=b0, loop=l67, preserve_unit_loops=True, index=-1)
sch.enter_postproc()
b68 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b68, ann_key="meta_schedule.parallel")
sch.unannotate(block_or_loop=b68, ann_key="meta_schedule.vectorize")
sch.unannotate(block_or_loop=b68, ann_key="meta_schedule.unroll_explicit")
b69, b70, b71 = sch.get_child_blocks(b68)
l72, l73, l74, l75, l76, l77, l78, l79, l80, l81, l82, l83 = sch.get_loops(block=b69)
l84 = sch.fuse(l72, l73, l74, l75, l76, l77, l78, preserve_unit_iters=True)
sch.parallel(loop=l84)
l85, l86, l87, l88, l89, l90, l91, l92, l93, l94, l95, l96, l97, l98, l99, l100, l101, l102, l103, l104 = sch.get_loops(block=b70)
l105 = sch.fuse(l85, preserve_unit_iters=True)
sch.parallel(loop=l105)
sch.annotate(block_or_loop=l105, ann_key="pragma_auto_unroll_max_step", ann_val=512)
sch.annotate(block_or_loop=l105, ann_key="pragma_unroll_explicit", ann_val=1)
l106, l107, l108, l109, l110, l111, l112, l113, l114 = sch.get_loops(block=b71)
l115 = sch.fuse(l114, preserve_unit_iters=True)
sch.vectorize(loop=l115)
b116 = sch.get_block(name="conv2d_NCHWc", func_name="main")
l117, l118, l119, l120, l121, l122, l123, l124, l125, l126, l127, l128, l129, l130, l131, l132, l133, l134, l135, l136 = sch.get_loops(block=b116)
b137 = sch.decompose_reduction(block=b116, loop=l121)
2024-04-29 07:45:00 [INFO] [task_scheduler.cc:131] [Task #26: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_3] Trial #694: GFLOPs: 621.4223. Time: 372.1885 us. Best GFLOPs: 798.4111
2024-04-29 07:45:00 [INFO] [task_scheduler.cc:131] [Task #26: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_3] Trial #695: GFLOPs: 568.7565. Time: 406.6526 us. Best GFLOPs: 798.4111
2024-04-29 07:45:00 [INFO] [task_scheduler.cc:131] [Task #26: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_3] Trial #696: GFLOPs: 564.0610. Time: 410.0377 us. Best GFLOPs: 798.4111
2024-04-29 07:45:00 [INFO] [task_scheduler.cc:131] [Task #26: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_3] Trial #697: GFLOPs: 580.7507. Time: 398.2539 us. Best GFLOPs: 798.4111
2024-04-29 07:45:00 [INFO] [task_scheduler.cc:131] [Task #26: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_3] Trial #698: GFLOPs: 533.5687. Time: 433.4705 us. Best GFLOPs: 798.4111
2024-04-29 07:45:00 [INFO] [task_scheduler.cc:131] [Task #26: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_3] Trial #699: GFLOPs: 561.2609. Time: 412.0833 us. Best GFLOPs: 798.4111
2024-04-29 07:45:00 [INFO] [task_scheduler.cc:131] [Task #26: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_3] Trial #700: GFLOPs: 575.5384. Time: 401.8607 us. Best GFLOPs: 798.4111
2024-04-29 07:45:00 [INFO] [task_scheduler.cc:131] [Task #26: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_3] Trial #701: GFLOPs: 541.8505. Time: 426.8452 us. Best GFLOPs: 798.4111
2024-04-29 07:45:00 [INFO] [task_scheduler.cc:131] [Task #26: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_3] Trial #702: GFLOPs: 0.7743. Time: 298702.0983 us. Best GFLOPs: 798.4111
2024-04-29 07:45:00 [INFO] [task_scheduler.cc:131] [Task #26: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_3] Trial #703: GFLOPs: 4.1923. Time: 55169.4940 us. Best GFLOPs: 798.4111
2024-04-29 07:45:00 [INFO] [task_scheduler.cc:131] [Task #26: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_3] Trial #704: GFLOPs: 64.2660. Time: 3598.8922 us. Best GFLOPs: 798.4111
2024-04-29 08:06:37 [INFO] [evolutionary_search.cc:713] Generating candidates......
2024-04-29 08:06:39 [INFO] [evolutionary_search.cc:715] Picked top 102 candidate(s) from database
2024-04-29 08:06:43 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x36363d8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x4388aa8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x3310908)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x3246458)]: 0 failure(s)
2024-04-29 08:06:43 [INFO] [evolutionary_search.cc:723] Sampled 410 candidate(s)
2024-04-29 08:06:53 [INFO] [evolutionary_search.cc:621] Evolve iter #0 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x36363d8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x4388aa8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x3310908)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x3246458)]: 0 failure(s)
2024-04-29 08:07:05 [INFO] [evolutionary_search.cc:621] Evolve iter #1 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x36363d8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x4388aa8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x3310908)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x3246458)]: 0 failure(s)
2024-04-29 08:07:16 [INFO] [evolutionary_search.cc:621] Evolve iter #2 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x36363d8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x4388aa8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x3310908)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x3246458)]: 0 failure(s)
2024-04-29 08:07:27 [INFO] [evolutionary_search.cc:621] Evolve iter #3 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x36363d8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x4388aa8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x3310908)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x3246458)]: 0 failure(s)
2024-04-29 08:07:34 [INFO] [evolutionary_search.cc:649] Scores of the best 64 candidates:
[1 : 16]:	0.9260  0.9227  0.8985  0.8867  0.8867  0.8867  0.8851  0.8631  0.8435  0.8398  0.8221  0.8220  0.8220  0.8177  0.8083  0.8039
[17 : 32]:	0.7918  0.7815  0.7787  0.7767  0.7767  0.7757  0.7740  0.7711  0.7710  0.7575  0.7574  0.7555  0.7474  0.7454  0.7437  0.7432
[33 : 48]:	0.7416  0.7416  0.7312  0.7299  0.7294  0.7283  0.7270  0.7211  0.7179  0.7173  0.7068  0.7023  0.6963  0.6915  0.6858  0.6840
[49 : 64]:	0.6840  0.6840  0.6809  0.6776  0.6775  0.6772  0.6767  0.6762  0.6762  0.6728  0.6670  0.6670  0.6670  0.6649  0.6644  0.6546
2024-04-29 08:07:34 [INFO] [evolutionary_search.cc:727] Got 64 candidate(s) with evolutionary search
2024-04-29 08:07:34 [INFO] [evolutionary_search.cc:730] Sending 64 candidates(s) for measurement
2024-04-29 08:09:34 [INFO] [task_scheduler.cc:131] [Task #26: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_3] Trial #705: GFLOPs: 750.4614. Time: 308.1921 us. Best GFLOPs: 798.4111
2024-04-29 08:09:34 [INFO] [task_scheduler.cc:131] [Task #26: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_3] Trial #706: GFLOPs: 728.8598. Time: 317.3261 us. Best GFLOPs: 798.4111
2024-04-29 08:09:34 [INFO] [task_scheduler.cc:131] [Task #26: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_3] Trial #707: GFLOPs: 699.2621. Time: 330.7576 us. Best GFLOPs: 798.4111
2024-04-29 08:09:34 [INFO] [task_scheduler.cc:131] [Task #26: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_3] Trial #708: GFLOPs: 624.0856. Time: 370.6002 us. Best GFLOPs: 798.4111
2024-04-29 08:09:34 [INFO] [task_scheduler.cc:131] [Task #26: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_3] Trial #709: GFLOPs: 749.1600. Time: 308.7275 us. Best GFLOPs: 798.4111
2024-04-29 08:09:34 [INFO] [task_scheduler.cc:131] [Task #26: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_3] Trial #710: GFLOPs: 623.4412. Time: 370.9833 us. Best GFLOPs: 798.4111
2024-04-29 08:09:34 [INFO] [task_scheduler.cc:131] [Task #26: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_3] Trial #711: GFLOPs: 737.8946. Time: 313.4408 us. Best GFLOPs: 798.4111
2024-04-29 08:09:34 [INFO] [task_scheduler.cc:131] [Task #26: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_3] Trial #712: GFLOPs: 674.2306. Time: 343.0374 us. Best GFLOPs: 798.4111
2024-04-29 08:09:34 [INFO] [task_scheduler.cc:131] [Task #26: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_3] Trial #713: GFLOPs: 636.6787. Time: 363.2700 us. Best GFLOPs: 798.4111
2024-04-29 08:09:34 [INFO] [task_scheduler.cc:131] [Task #26: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_3] Trial #714: GFLOPs: 635.0310. Time: 364.2126 us. Best GFLOPs: 798.4111
2024-04-29 08:09:34 [INFO] [task_scheduler.cc:131] [Task #26: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_3] Trial #715: GFLOPs: 612.2485. Time: 377.7654 us. Best GFLOPs: 798.4111
2024-04-29 08:09:34 [INFO] [task_scheduler.cc:131] [Task #26: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_3] Trial #716: GFLOPs: 596.8278. Time: 387.5260 us. Best GFLOPs: 798.4111
2024-04-29 08:09:34 [INFO] [task_scheduler.cc:131] [Task #26: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_3] Trial #717: GFLOPs: 708.2806. Time: 326.5461 us. Best GFLOPs: 798.4111
2024-04-29 08:09:34 [INFO] [task_scheduler.cc:131] [Task #26: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_3] Trial #718: GFLOPs: 620.6876. Time: 372.6291 us. Best GFLOPs: 798.4111
2024-04-29 08:09:34 [INFO] [task_scheduler.cc:131] [Task #26: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_3] Trial #719: GFLOPs: 617.1518. Time: 374.7640 us. Best GFLOPs: 798.4111
2024-04-29 08:09:34 [INFO] [task_scheduler.cc:131] [Task #26: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_3] Trial #720: GFLOPs: 580.6916. Time: 398.2945 us. Best GFLOPs: 798.4111
2024-04-29 08:09:34 [INFO] [task_scheduler.cc:131] [Task #26: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_3] Trial #721: GFLOPs: 682.8680. Time: 338.6983 us. Best GFLOPs: 798.4111
2024-04-29 08:09:34 [INFO] [task_scheduler.cc:131] [Task #26: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_3] Trial #722: GFLOPs: 563.9067. Time: 410.1499 us. Best GFLOPs: 798.4111
2024-04-29 08:09:34 [INFO] [task_scheduler.cc:131] [Task #26: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_3] Trial #723: GFLOPs: 574.8772. Time: 402.3229 us. Best GFLOPs: 798.4111
2024-04-29 08:09:34 [INFO] [task_scheduler.cc:121] [Task #26: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_3] Trial #724: Error in building:
LocalBuilder: Timeout, killed after 30.0 seconds
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(1), T.int64(7), T.int64(7), T.int64(512)), "float32"), p1: T.Buffer((T.int64(16), T.int64(1), T.int64(3), T.int64(3), T.int64(512), T.int64(32)), "float32"), p2: T.Buffer((T.int64(1), T.int64(16), T.int64(1), T.int64(1), T.int64(32)), "float32"), p3: T.Buffer((T.int64(1), T.int64(16), T.int64(7), T.int64(7), T.int64(32)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(16), T.int64(7), T.int64(7), T.int64(32)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        data_pad = T.alloc_buffer((T.int64(1), T.int64(1), T.int64(9), T.int64(9), T.int64(512)))
        conv2d_NCHWc = T.alloc_buffer((T.int64(1), T.int64(16), T.int64(7), T.int64(7), T.int64(32)))
        for n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_fused_fused in T.parallel(T.int64(112), annotations={"pragma_auto_unroll_max_step": 512, "pragma_unroll_explicit": 1}):
            for ax0, ax1, ax2, ax3, ax4 in T.grid(T.int64(1), T.int64(1), T.int64(9), T.int64(3), T.int64(512)):
                with T.block("data_pad"):
                    v_i0, v_i1, v_i2 = T.axis.remap("SSS", [ax0, ax1, ax2])
                    v_i3 = T.axis.spatial(T.int64(9), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_fused_fused % T.int64(7) + ax3)
                    v_i4 = T.axis.spatial(T.int64(512), ax4)
                    T.reads(p0[v_i0, v_i1, v_i2 - T.int64(1), v_i3 - T.int64(1), v_i4])
                    T.writes(data_pad[v_i0, v_i1, v_i2, v_i3, v_i4])
                    data_pad[v_i0, v_i1, v_i2, v_i3, v_i4] = T.if_then_else(T.int64(1) <= v_i2 and v_i2 < T.int64(8) and T.int64(1) <= v_i3 and v_i3 < T.int64(8), p0[v_i0, v_i1, v_i2 - T.int64(1), v_i3 - T.int64(1), v_i4], T.float32(0))
            for oc_block_1 in range(T.int64(1)):
                for n_2_init, oc_chunk_2_init, oh_2_init, ow_2_init, oc_block_2_init, n_3_init, oc_chunk_3_init, oh_3_init, ow_3_init, oc_block_3_init in T.grid(T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(32), T.int64(1), T.int64(1), T.int64(7), T.int64(1), T.int64(1)):
                    with T.block("conv2d_NCHWc_init"):
                        v_n = T.axis.spatial(T.int64(1), n_2_init + n_3_init)
                        v_oc_chunk = T.axis.spatial(T.int64(16), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_fused_fused // T.int64(7) + oc_chunk_2_init + oc_chunk_3_init)
                        v_oh = T.axis.spatial(T.int64(7), oh_2_init * T.int64(7) + oh_3_init)
                        v_ow = T.axis.spatial(T.int64(7), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_fused_fused % T.int64(7) + ow_2_init + ow_3_init)
                        v_oc_block = T.axis.spatial(T.int64(32), oc_block_1 * T.int64(32) + oc_block_2_init + oc_block_3_init)
                        T.reads()
                        T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                        T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                        conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = T.float32(0)
                for ic_0, kh_0, kw_0, n_2, oc_chunk_2, oh_2, ow_2, oc_block_2, ic_1, kh_1, kw_1, n_3, oc_chunk_3, oh_3, ow_3, oc_block_3 in T.grid(T.int64(256), T.int64(1), T.int64(3), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(32), T.int64(2), T.int64(3), T.int64(1), T.int64(1), T.int64(1), T.int64(7), T.int64(1), T.int64(1)):
                    with T.block("conv2d_NCHWc_update"):
                        v_n = T.axis.spatial(T.int64(1), n_2 + n_3)
                        v_oc_chunk = T.axis.spatial(T.int64(16), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_fused_fused // T.int64(7) + oc_chunk_2 + oc_chunk_3)
                        v_oh = T.axis.spatial(T.int64(7), oh_2 * T.int64(7) + oh_3)
                        v_ow = T.axis.spatial(T.int64(7), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_fused_fused % T.int64(7) + ow_2 + ow_3)
                        v_oc_block = T.axis.spatial(T.int64(32), oc_block_1 * T.int64(32) + oc_block_2 + oc_block_3)
                        v_ic = T.axis.reduce(T.int64(512), ic_0 * T.int64(2) + ic_1)
                        v_kh = T.axis.reduce(T.int64(3), kh_0 * T.int64(3) + kh_1)
                        v_kw = T.axis.reduce(T.int64(3), kw_0 + kw_1)
                        T.reads(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block], data_pad[v_n, v_ic // T.int64(512), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(512)], p1[v_oc_chunk, v_ic // T.int64(512), v_kh, v_kw, v_ic % T.int64(512), v_oc_block])
                        T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                        T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                        conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] + data_pad[v_n, v_ic // T.int64(512), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(512)] * p1[v_oc_chunk, v_ic // T.int64(512), v_kh, v_kw, v_ic % T.int64(512), v_oc_block]
                for ax0, ax1, ax2 in T.grid(T.int64(1), T.int64(1), T.int64(7)):
                    for ax3_ax4_fused in T.vectorized(T.int64(32)):
                        with T.block("T_relu"):
                            v_ax0 = T.axis.spatial(T.int64(1), ax0)
                            v_ax1 = T.axis.spatial(T.int64(16), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_fused_fused // T.int64(7) + ax1)
                            v_ax2 = T.axis.spatial(T.int64(7), ax2)
                            v_ax3 = T.axis.spatial(T.int64(7), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_fused_fused % T.int64(7))
                            v_ax4 = T.axis.spatial(T.int64(32), ax3_ax4_fused)
                            T.reads(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4], p3[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                            T.writes(T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                            T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.max(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] + p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4] + p3[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], T.float32(0))
b0 = sch.get_block(name="data_pad", func_name="main")
b1 = sch.get_block(name="conv2d_NCHWc", func_name="main")
b2 = sch.get_block(name="T_add", func_name="main")
b3 = sch.get_block(name="T_add_1", func_name="main")
b4 = sch.get_block(name="root", func_name="main")
sch.compute_inline(block=b3)
sch.compute_inline(block=b2)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSRSRS")
l5, l6, l7, l8, l9, l10, l11, l12 = sch.get_loops(block=b1)
v13, v14, v15, v16 = sch.sample_perfect_tile(loop=l5, n=4, max_innermost_factor=64, decision=[1, 1, 1, 1])
l17, l18, l19, l20 = sch.split(loop=l5, factors=[v13, v14, v15, v16], preserve_unit_iters=True)
v21, v22, v23, v24 = sch.sample_perfect_tile(loop=l6, n=4, max_innermost_factor=64, decision=[1, 16, 1, 1])
l25, l26, l27, l28 = sch.split(loop=l6, factors=[v21, v22, v23, v24], preserve_unit_iters=True)
v29, v30, v31, v32 = sch.sample_perfect_tile(loop=l7, n=4, max_innermost_factor=64, decision=[1, 1, 1, 7])
l33, l34, l35, l36 = sch.split(loop=l7, factors=[v29, v30, v31, v32], preserve_unit_iters=True)
v37, v38, v39, v40 = sch.sample_perfect_tile(loop=l8, n=4, max_innermost_factor=64, decision=[1, 7, 1, 1])
l41, l42, l43, l44 = sch.split(loop=l8, factors=[v37, v38, v39, v40], preserve_unit_iters=True)
v45, v46, v47, v48 = sch.sample_perfect_tile(loop=l9, n=4, max_innermost_factor=64, decision=[1, 1, 32, 1])
l49, l50, l51, l52 = sch.split(loop=l9, factors=[v45, v46, v47, v48], preserve_unit_iters=True)
v53, v54 = sch.sample_perfect_tile(loop=l10, n=2, max_innermost_factor=64, decision=[256, 2])
l55, l56 = sch.split(loop=l10, factors=[v53, v54], preserve_unit_iters=True)
v57, v58 = sch.sample_perfect_tile(loop=l11, n=2, max_innermost_factor=64, decision=[1, 3])
l59, l60 = sch.split(loop=l11, factors=[v57, v58], preserve_unit_iters=True)
v61, v62 = sch.sample_perfect_tile(loop=l12, n=2, max_innermost_factor=64, decision=[3, 1])
l63, l64 = sch.split(loop=l12, factors=[v61, v62], preserve_unit_iters=True)
sch.reorder(l17, l25, l33, l41, l49, l18, l26, l34, l42, l50, l55, l59, l63, l19, l27, l35, l43, l51, l56, l60, l64, l20, l28, l36, l44, l52)
b65, = sch.get_consumers(block=b1)
sch.reverse_compute_at(block=b65, loop=l50, preserve_unit_loops=True, index=-1)
sch.annotate(block_or_loop=b4, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b4, ann_key="meta_schedule.vectorize", ann_val=64)
v66 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b4, ann_key="meta_schedule.unroll_explicit", ann_val=v66)
l67 = sch.sample_compute_location(block=b0, decision=8)
sch.compute_at(block=b0, loop=l67, preserve_unit_loops=True, index=-1)
sch.enter_postproc()
b68 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b68, ann_key="meta_schedule.parallel")
sch.unannotate(block_or_loop=b68, ann_key="meta_schedule.vectorize")
sch.unannotate(block_or_loop=b68, ann_key="meta_schedule.unroll_explicit")
b69, b70, b71 = sch.get_child_blocks(b68)
l72, l73, l74, l75, l76, l77, l78, l79, l80, l81, l82, l83, l84, l85 = sch.get_loops(block=b69)
l86 = sch.fuse(l72, l73, l74, l75, l76, l77, l78, l79, l80, preserve_unit_iters=True)
sch.parallel(loop=l86)
l87, l88, l89, l90, l91, l92, l93, l94, l95, l96, l97, l98, l99, l100, l101, l102, l103, l104 = sch.get_loops(block=b70)
l105 = sch.fuse(l87, preserve_unit_iters=True)
sch.parallel(loop=l105)
sch.annotate(block_or_loop=l105, ann_key="pragma_auto_unroll_max_step", ann_val=512)
sch.annotate(block_or_loop=l105, ann_key="pragma_unroll_explicit", ann_val=1)
l106, l107, l108, l109, l110, l111, l112 = sch.get_loops(block=b71)
l113 = sch.fuse(l111, l112, preserve_unit_iters=True)
sch.vectorize(loop=l113)
b114 = sch.get_block(name="conv2d_NCHWc", func_name="main")
l115, l116, l117, l118, l119, l120, l121, l122, l123, l124, l125, l126, l127, l128, l129, l130, l131, l132 = sch.get_loops(block=b114)
b133 = sch.decompose_reduction(block=b114, loop=l117)
2024-04-29 08:09:34 [INFO] [task_scheduler.cc:121] [Task #26: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_3] Trial #725: Error in building:
LocalBuilder: Timeout, killed after 30.0 seconds
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(1), T.int64(7), T.int64(7), T.int64(512)), "float32"), p1: T.Buffer((T.int64(16), T.int64(1), T.int64(3), T.int64(3), T.int64(512), T.int64(32)), "float32"), p2: T.Buffer((T.int64(1), T.int64(16), T.int64(1), T.int64(1), T.int64(32)), "float32"), p3: T.Buffer((T.int64(1), T.int64(16), T.int64(7), T.int64(7), T.int64(32)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(16), T.int64(7), T.int64(7), T.int64(32)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        data_pad = T.alloc_buffer((T.int64(1), T.int64(1), T.int64(9), T.int64(9), T.int64(512)))
        conv2d_NCHWc = T.alloc_buffer((T.int64(1), T.int64(16), T.int64(7), T.int64(7), T.int64(32)))
        for n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_fused_fused in T.parallel(T.int64(112), annotations={"pragma_auto_unroll_max_step": 512, "pragma_unroll_explicit": 1}):
            for ax0, ax1, ax2, ax3, ax4 in T.grid(T.int64(1), T.int64(1), T.int64(9), T.int64(3), T.int64(512)):
                with T.block("data_pad"):
                    v_i0, v_i1, v_i2 = T.axis.remap("SSS", [ax0, ax1, ax2])
                    v_i3 = T.axis.spatial(T.int64(9), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_fused_fused // T.int64(16) + ax3)
                    v_i4 = T.axis.spatial(T.int64(512), ax4)
                    T.reads(p0[v_i0, v_i1, v_i2 - T.int64(1), v_i3 - T.int64(1), v_i4])
                    T.writes(data_pad[v_i0, v_i1, v_i2, v_i3, v_i4])
                    data_pad[v_i0, v_i1, v_i2, v_i3, v_i4] = T.if_then_else(T.int64(1) <= v_i2 and v_i2 < T.int64(8) and T.int64(1) <= v_i3 and v_i3 < T.int64(8), p0[v_i0, v_i1, v_i2 - T.int64(1), v_i3 - T.int64(1), v_i4], T.float32(0))
            for oh_1, ow_1, oc_block_1 in T.grid(T.int64(1), T.int64(1), T.int64(1)):
                for n_2_init, oc_chunk_2_init, oh_2_init, ow_2_init, oc_block_2_init, n_3_init, oc_chunk_3_init, oh_3_init, ow_3_init, oc_block_3_init in T.grid(T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(32), T.int64(1), T.int64(1), T.int64(7), T.int64(1), T.int64(1)):
                    with T.block("conv2d_NCHWc_init"):
                        v_n = T.axis.spatial(T.int64(1), n_2_init + n_3_init)
                        v_oc_chunk = T.axis.spatial(T.int64(16), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_fused_fused % T.int64(16) + oc_chunk_2_init + oc_chunk_3_init)
                        v_oh = T.axis.spatial(T.int64(7), oh_1 * T.int64(7) + oh_2_init * T.int64(7) + oh_3_init)
                        v_ow = T.axis.spatial(T.int64(7), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_fused_fused // T.int64(16) + ow_1 + ow_2_init + ow_3_init)
                        v_oc_block = T.axis.spatial(T.int64(32), oc_block_1 * T.int64(32) + oc_block_2_init + oc_block_3_init)
                        T.reads()
                        T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                        T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                        conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = T.float32(0)
                for ic_0, kh_0, kw_0, n_2, oc_chunk_2, oh_2, ow_2, oc_block_2, ic_1, kh_1, kw_1, n_3, oc_chunk_3, oh_3, ow_3, oc_block_3 in T.grid(T.int64(256), T.int64(1), T.int64(3), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(32), T.int64(2), T.int64(3), T.int64(1), T.int64(1), T.int64(1), T.int64(7), T.int64(1), T.int64(1)):
                    with T.block("conv2d_NCHWc_update"):
                        v_n = T.axis.spatial(T.int64(1), n_2 + n_3)
                        v_oc_chunk = T.axis.spatial(T.int64(16), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_fused_fused % T.int64(16) + oc_chunk_2 + oc_chunk_3)
                        v_oh = T.axis.spatial(T.int64(7), oh_1 * T.int64(7) + oh_2 * T.int64(7) + oh_3)
                        v_ow = T.axis.spatial(T.int64(7), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_fused_fused // T.int64(16) + ow_1 + ow_2 + ow_3)
                        v_oc_block = T.axis.spatial(T.int64(32), oc_block_1 * T.int64(32) + oc_block_2 + oc_block_3)
                        v_ic = T.axis.reduce(T.int64(512), ic_0 * T.int64(2) + ic_1)
                        v_kh = T.axis.reduce(T.int64(3), kh_0 * T.int64(3) + kh_1)
                        v_kw = T.axis.reduce(T.int64(3), kw_0 + kw_1)
                        T.reads(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block], data_pad[v_n, v_ic // T.int64(512), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(512)], p1[v_oc_chunk, v_ic // T.int64(512), v_kh, v_kw, v_ic % T.int64(512), v_oc_block])
                        T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                        T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                        conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] + data_pad[v_n, v_ic // T.int64(512), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(512)] * p1[v_oc_chunk, v_ic // T.int64(512), v_kh, v_kw, v_ic % T.int64(512), v_oc_block]
                for ax0, ax1, ax2 in T.grid(T.int64(1), T.int64(1), T.int64(7)):
                    for ax3_ax4_fused in T.vectorized(T.int64(32)):
                        with T.block("T_relu"):
                            v_ax0 = T.axis.spatial(T.int64(1), ax0)
                            v_ax1 = T.axis.spatial(T.int64(16), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_fused_fused % T.int64(16) + ax1)
                            v_ax2 = T.axis.spatial(T.int64(7), ax2)
                            v_ax3 = T.axis.spatial(T.int64(7), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_fused_fused // T.int64(16))
                            v_ax4 = T.axis.spatial(T.int64(32), ax3_ax4_fused)
                            T.reads(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4], p3[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                            T.writes(T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                            T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.max(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] + p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4] + p3[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], T.float32(0))
b0 = sch.get_block(name="data_pad", func_name="main")
b1 = sch.get_block(name="conv2d_NCHWc", func_name="main")
b2 = sch.get_block(name="T_add", func_name="main")
b3 = sch.get_block(name="T_add_1", func_name="main")
b4 = sch.get_block(name="root", func_name="main")
sch.compute_inline(block=b3)
sch.compute_inline(block=b2)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSRSRS")
l5, l6, l7, l8, l9, l10, l11, l12 = sch.get_loops(block=b1)
v13, v14, v15, v16 = sch.sample_perfect_tile(loop=l5, n=4, max_innermost_factor=64, decision=[1, 1, 1, 1])
l17, l18, l19, l20 = sch.split(loop=l5, factors=[v13, v14, v15, v16], preserve_unit_iters=True)
v21, v22, v23, v24 = sch.sample_perfect_tile(loop=l6, n=4, max_innermost_factor=64, decision=[1, 16, 1, 1])
l25, l26, l27, l28 = sch.split(loop=l6, factors=[v21, v22, v23, v24], preserve_unit_iters=True)
v29, v30, v31, v32 = sch.sample_perfect_tile(loop=l7, n=4, max_innermost_factor=64, decision=[1, 1, 1, 7])
l33, l34, l35, l36 = sch.split(loop=l7, factors=[v29, v30, v31, v32], preserve_unit_iters=True)
v37, v38, v39, v40 = sch.sample_perfect_tile(loop=l8, n=4, max_innermost_factor=64, decision=[7, 1, 1, 1])
l41, l42, l43, l44 = sch.split(loop=l8, factors=[v37, v38, v39, v40], preserve_unit_iters=True)
v45, v46, v47, v48 = sch.sample_perfect_tile(loop=l9, n=4, max_innermost_factor=64, decision=[1, 1, 32, 1])
l49, l50, l51, l52 = sch.split(loop=l9, factors=[v45, v46, v47, v48], preserve_unit_iters=True)
v53, v54 = sch.sample_perfect_tile(loop=l10, n=2, max_innermost_factor=64, decision=[256, 2])
l55, l56 = sch.split(loop=l10, factors=[v53, v54], preserve_unit_iters=True)
v57, v58 = sch.sample_perfect_tile(loop=l11, n=2, max_innermost_factor=64, decision=[1, 3])
l59, l60 = sch.split(loop=l11, factors=[v57, v58], preserve_unit_iters=True)
v61, v62 = sch.sample_perfect_tile(loop=l12, n=2, max_innermost_factor=64, decision=[3, 1])
l63, l64 = sch.split(loop=l12, factors=[v61, v62], preserve_unit_iters=True)
sch.reorder(l17, l25, l33, l41, l49, l18, l26, l34, l42, l50, l55, l59, l63, l19, l27, l35, l43, l51, l56, l60, l64, l20, l28, l36, l44, l52)
b65, = sch.get_consumers(block=b1)
sch.reverse_compute_at(block=b65, loop=l50, preserve_unit_loops=True, index=-1)
sch.annotate(block_or_loop=b4, ann_key="meta_schedule.parallel", ann_val=16)
sch.annotate(block_or_loop=b4, ann_key="meta_schedule.vectorize", ann_val=64)
v66 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b4, ann_key="meta_schedule.unroll_explicit", ann_val=v66)
l67 = sch.sample_compute_location(block=b0, decision=6)
sch.compute_at(block=b0, loop=l67, preserve_unit_loops=True, index=-1)
sch.enter_postproc()
b68 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b68, ann_key="meta_schedule.parallel")
sch.unannotate(block_or_loop=b68, ann_key="meta_schedule.vectorize")
sch.unannotate(block_or_loop=b68, ann_key="meta_schedule.unroll_explicit")
b69, b70, b71 = sch.get_child_blocks(b68)
l72, l73, l74, l75, l76, l77, l78, l79, l80, l81, l82, l83 = sch.get_loops(block=b69)
l84 = sch.fuse(l72, l73, l74, l75, l76, l77, l78, preserve_unit_iters=True)
sch.parallel(loop=l84)
l85, l86, l87, l88, l89, l90, l91, l92, l93, l94, l95, l96, l97, l98, l99, l100, l101, l102, l103, l104 = sch.get_loops(block=b70)
l105 = sch.fuse(l85, preserve_unit_iters=True)
sch.parallel(loop=l105)
sch.annotate(block_or_loop=l105, ann_key="pragma_auto_unroll_max_step", ann_val=512)
sch.annotate(block_or_loop=l105, ann_key="pragma_unroll_explicit", ann_val=1)
l106, l107, l108, l109, l110, l111, l112, l113, l114 = sch.get_loops(block=b71)
l115 = sch.fuse(l113, l114, preserve_unit_iters=True)
sch.vectorize(loop=l115)
b116 = sch.get_block(name="conv2d_NCHWc", func_name="main")
l117, l118, l119, l120, l121, l122, l123, l124, l125, l126, l127, l128, l129, l130, l131, l132, l133, l134, l135, l136 = sch.get_loops(block=b116)
b137 = sch.decompose_reduction(block=b116, loop=l121)
2024-04-29 08:09:34 [INFO] [task_scheduler.cc:131] [Task #26: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_3] Trial #726: GFLOPs: 623.4394. Time: 370.9844 us. Best GFLOPs: 798.4111
2024-04-29 08:09:34 [INFO] [task_scheduler.cc:131] [Task #26: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_3] Trial #727: GFLOPs: 597.5148. Time: 387.0804 us. Best GFLOPs: 798.4111
2024-04-29 08:09:34 [INFO] [task_scheduler.cc:131] [Task #26: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_3] Trial #728: GFLOPs: 547.0023. Time: 422.8251 us. Best GFLOPs: 798.4111
2024-04-29 08:09:34 [INFO] [task_scheduler.cc:131] [Task #26: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_3] Trial #729: GFLOPs: 608.7436. Time: 379.9404 us. Best GFLOPs: 798.4111
2024-04-29 08:09:34 [INFO] [task_scheduler.cc:131] [Task #26: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_3] Trial #730: GFLOPs: 575.1458. Time: 402.1351 us. Best GFLOPs: 798.4111
2024-04-29 08:09:34 [INFO] [task_scheduler.cc:131] [Task #26: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_3] Trial #731: GFLOPs: 538.0564. Time: 429.8550 us. Best GFLOPs: 798.4111
2024-04-29 08:09:34 [INFO] [task_scheduler.cc:131] [Task #26: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_3] Trial #732: GFLOPs: 602.0376. Time: 384.1725 us. Best GFLOPs: 798.4111
2024-04-29 08:09:34 [INFO] [task_scheduler.cc:131] [Task #26: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_3] Trial #733: GFLOPs: 560.6270. Time: 412.5493 us. Best GFLOPs: 798.4111
2024-04-29 08:09:34 [INFO] [task_scheduler.cc:131] [Task #26: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_3] Trial #734: GFLOPs: 661.0867. Time: 349.8577 us. Best GFLOPs: 798.4111
2024-04-29 08:09:34 [INFO] [task_scheduler.cc:131] [Task #26: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_3] Trial #735: GFLOPs: 554.8784. Time: 416.8233 us. Best GFLOPs: 798.4111
2024-04-29 08:09:34 [INFO] [task_scheduler.cc:121] [Task #26: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_3] Trial #736: Error in building:
LocalBuilder: Timeout, killed after 30.0 seconds
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(1), T.int64(7), T.int64(7), T.int64(512)), "float32"), p1: T.Buffer((T.int64(16), T.int64(1), T.int64(3), T.int64(3), T.int64(512), T.int64(32)), "float32"), p2: T.Buffer((T.int64(1), T.int64(16), T.int64(1), T.int64(1), T.int64(32)), "float32"), p3: T.Buffer((T.int64(1), T.int64(16), T.int64(7), T.int64(7), T.int64(32)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(16), T.int64(7), T.int64(7), T.int64(32)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        data_pad = T.alloc_buffer((T.int64(1), T.int64(1), T.int64(9), T.int64(9), T.int64(512)))
        conv2d_NCHWc = T.alloc_buffer((T.int64(1), T.int64(16), T.int64(7), T.int64(7), T.int64(32)))
        for n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_fused_fused in T.parallel(T.int64(112), annotations={"pragma_auto_unroll_max_step": 512, "pragma_unroll_explicit": 1}):
            for ax0, ax1, ax2, ax3, ax4 in T.grid(T.int64(1), T.int64(1), T.int64(9), T.int64(3), T.int64(512)):
                with T.block("data_pad"):
                    v_i0, v_i1, v_i2 = T.axis.remap("SSS", [ax0, ax1, ax2])
                    v_i3 = T.axis.spatial(T.int64(9), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_fused_fused % T.int64(28) // T.int64(4) + ax3)
                    v_i4 = T.axis.spatial(T.int64(512), ax4)
                    T.reads(p0[v_i0, v_i1, v_i2 - T.int64(1), v_i3 - T.int64(1), v_i4])
                    T.writes(data_pad[v_i0, v_i1, v_i2, v_i3, v_i4])
                    data_pad[v_i0, v_i1, v_i2, v_i3, v_i4] = T.if_then_else(T.int64(1) <= v_i2 and v_i2 < T.int64(8) and T.int64(1) <= v_i3 and v_i3 < T.int64(8), p0[v_i0, v_i1, v_i2 - T.int64(1), v_i3 - T.int64(1), v_i4], T.float32(0))
            for oh_1, ow_1, oc_block_1 in T.grid(T.int64(1), T.int64(1), T.int64(1)):
                for n_2_init, oc_chunk_2_init, oh_2_init, ow_2_init, oc_block_2_init, n_3_init, oc_chunk_3_init, oh_3_init, ow_3_init, oc_block_3_init in T.grid(T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(32), T.int64(1), T.int64(1), T.int64(7), T.int64(1), T.int64(1)):
                    with T.block("conv2d_NCHWc_init"):
                        v_n = T.axis.spatial(T.int64(1), n_2_init + n_3_init)
                        v_oc_chunk = T.axis.spatial(T.int64(16), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_fused_fused // T.int64(28) * T.int64(4) + n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_fused_fused % T.int64(4) + oc_chunk_2_init + oc_chunk_3_init)
                        v_oh = T.axis.spatial(T.int64(7), oh_1 * T.int64(7) + oh_2_init * T.int64(7) + oh_3_init)
                        v_ow = T.axis.spatial(T.int64(7), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_fused_fused % T.int64(28) // T.int64(4) + ow_1 + ow_2_init + ow_3_init)
                        v_oc_block = T.axis.spatial(T.int64(32), oc_block_1 * T.int64(32) + oc_block_2_init + oc_block_3_init)
                        T.reads()
                        T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                        T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                        conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = T.float32(0)
                for ic_0, kh_0, kw_0, n_2, oc_chunk_2, oh_2, ow_2, oc_block_2, ic_1, kh_1, kw_1, n_3, oc_chunk_3, oh_3, ow_3, oc_block_3 in T.grid(T.int64(128), T.int64(1), T.int64(3), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(32), T.int64(4), T.int64(3), T.int64(1), T.int64(1), T.int64(1), T.int64(7), T.int64(1), T.int64(1)):
                    with T.block("conv2d_NCHWc_update"):
                        v_n = T.axis.spatial(T.int64(1), n_2 + n_3)
                        v_oc_chunk = T.axis.spatial(T.int64(16), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_fused_fused // T.int64(28) * T.int64(4) + n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_fused_fused % T.int64(4) + oc_chunk_2 + oc_chunk_3)
                        v_oh = T.axis.spatial(T.int64(7), oh_1 * T.int64(7) + oh_2 * T.int64(7) + oh_3)
                        v_ow = T.axis.spatial(T.int64(7), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_fused_fused % T.int64(28) // T.int64(4) + ow_1 + ow_2 + ow_3)
                        v_oc_block = T.axis.spatial(T.int64(32), oc_block_1 * T.int64(32) + oc_block_2 + oc_block_3)
                        v_ic = T.axis.reduce(T.int64(512), ic_0 * T.int64(4) + ic_1)
                        v_kh = T.axis.reduce(T.int64(3), kh_0 * T.int64(3) + kh_1)
                        v_kw = T.axis.reduce(T.int64(3), kw_0 + kw_1)
                        T.reads(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block], data_pad[v_n, v_ic // T.int64(512), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(512)], p1[v_oc_chunk, v_ic // T.int64(512), v_kh, v_kw, v_ic % T.int64(512), v_oc_block])
                        T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                        T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                        conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] + data_pad[v_n, v_ic // T.int64(512), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(512)] * p1[v_oc_chunk, v_ic // T.int64(512), v_kh, v_kw, v_ic % T.int64(512), v_oc_block]
                for ax0, ax1, ax2 in T.grid(T.int64(1), T.int64(1), T.int64(7)):
                    for ax3_ax4_fused in T.vectorized(T.int64(32)):
                        with T.block("T_relu"):
                            v_ax0 = T.axis.spatial(T.int64(1), ax0)
                            v_ax1 = T.axis.spatial(T.int64(16), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_fused_fused // T.int64(28) * T.int64(4) + n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_fused_fused % T.int64(4) + ax1)
                            v_ax2 = T.axis.spatial(T.int64(7), ax2)
                            v_ax3 = T.axis.spatial(T.int64(7), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_fused_fused % T.int64(28) // T.int64(4))
                            v_ax4 = T.axis.spatial(T.int64(32), ax3_ax4_fused)
                            T.reads(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4], p3[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                            T.writes(T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                            T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.max(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] + p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4] + p3[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], T.float32(0))
b0 = sch.get_block(name="data_pad", func_name="main")
b1 = sch.get_block(name="conv2d_NCHWc", func_name="main")
b2 = sch.get_block(name="T_add", func_name="main")
b3 = sch.get_block(name="T_add_1", func_name="main")
b4 = sch.get_block(name="root", func_name="main")
sch.compute_inline(block=b3)
sch.compute_inline(block=b2)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSRSRS")
l5, l6, l7, l8, l9, l10, l11, l12 = sch.get_loops(block=b1)
v13, v14, v15, v16 = sch.sample_perfect_tile(loop=l5, n=4, max_innermost_factor=64, decision=[1, 1, 1, 1])
l17, l18, l19, l20 = sch.split(loop=l5, factors=[v13, v14, v15, v16], preserve_unit_iters=True)
v21, v22, v23, v24 = sch.sample_perfect_tile(loop=l6, n=4, max_innermost_factor=64, decision=[4, 4, 1, 1])
l25, l26, l27, l28 = sch.split(loop=l6, factors=[v21, v22, v23, v24], preserve_unit_iters=True)
v29, v30, v31, v32 = sch.sample_perfect_tile(loop=l7, n=4, max_innermost_factor=64, decision=[1, 1, 1, 7])
l33, l34, l35, l36 = sch.split(loop=l7, factors=[v29, v30, v31, v32], preserve_unit_iters=True)
v37, v38, v39, v40 = sch.sample_perfect_tile(loop=l8, n=4, max_innermost_factor=64, decision=[7, 1, 1, 1])
l41, l42, l43, l44 = sch.split(loop=l8, factors=[v37, v38, v39, v40], preserve_unit_iters=True)
v45, v46, v47, v48 = sch.sample_perfect_tile(loop=l9, n=4, max_innermost_factor=64, decision=[1, 1, 32, 1])
l49, l50, l51, l52 = sch.split(loop=l9, factors=[v45, v46, v47, v48], preserve_unit_iters=True)
v53, v54 = sch.sample_perfect_tile(loop=l10, n=2, max_innermost_factor=64, decision=[128, 4])
l55, l56 = sch.split(loop=l10, factors=[v53, v54], preserve_unit_iters=True)
v57, v58 = sch.sample_perfect_tile(loop=l11, n=2, max_innermost_factor=64, decision=[1, 3])
l59, l60 = sch.split(loop=l11, factors=[v57, v58], preserve_unit_iters=True)
v61, v62 = sch.sample_perfect_tile(loop=l12, n=2, max_innermost_factor=64, decision=[3, 1])
l63, l64 = sch.split(loop=l12, factors=[v61, v62], preserve_unit_iters=True)
sch.reorder(l17, l25, l33, l41, l49, l18, l26, l34, l42, l50, l55, l59, l63, l19, l27, l35, l43, l51, l56, l60, l64, l20, l28, l36, l44, l52)
b65, = sch.get_consumers(block=b1)
sch.reverse_compute_at(block=b65, loop=l50, preserve_unit_loops=True, index=-1)
sch.annotate(block_or_loop=b4, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b4, ann_key="meta_schedule.vectorize", ann_val=64)
v66 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b4, ann_key="meta_schedule.unroll_explicit", ann_val=v66)
l67 = sch.sample_compute_location(block=b0, decision=6)
sch.compute_at(block=b0, loop=l67, preserve_unit_loops=True, index=-1)
sch.enter_postproc()
b68 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b68, ann_key="meta_schedule.parallel")
sch.unannotate(block_or_loop=b68, ann_key="meta_schedule.vectorize")
sch.unannotate(block_or_loop=b68, ann_key="meta_schedule.unroll_explicit")
b69, b70, b71 = sch.get_child_blocks(b68)
l72, l73, l74, l75, l76, l77, l78, l79, l80, l81, l82, l83 = sch.get_loops(block=b69)
l84 = sch.fuse(l72, l73, l74, l75, l76, l77, l78, preserve_unit_iters=True)
sch.parallel(loop=l84)
l85, l86, l87, l88, l89, l90, l91, l92, l93, l94, l95, l96, l97, l98, l99, l100, l101, l102, l103, l104 = sch.get_loops(block=b70)
l105 = sch.fuse(l85, preserve_unit_iters=True)
sch.parallel(loop=l105)
sch.annotate(block_or_loop=l105, ann_key="pragma_auto_unroll_max_step", ann_val=512)
sch.annotate(block_or_loop=l105, ann_key="pragma_unroll_explicit", ann_val=1)
l106, l107, l108, l109, l110, l111, l112, l113, l114 = sch.get_loops(block=b71)
l115 = sch.fuse(l113, l114, preserve_unit_iters=True)
sch.vectorize(loop=l115)
b116 = sch.get_block(name="conv2d_NCHWc", func_name="main")
l117, l118, l119, l120, l121, l122, l123, l124, l125, l126, l127, l128, l129, l130, l131, l132, l133, l134, l135, l136 = sch.get_loops(block=b116)
b137 = sch.decompose_reduction(block=b116, loop=l121)
2024-04-29 08:09:34 [INFO] [task_scheduler.cc:131] [Task #26: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_3] Trial #737: GFLOPs: 571.8943. Time: 404.4214 us. Best GFLOPs: 798.4111
2024-04-29 08:09:34 [INFO] [task_scheduler.cc:131] [Task #26: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_3] Trial #738: GFLOPs: 578.2886. Time: 399.9495 us. Best GFLOPs: 798.4111
2024-04-29 08:09:34 [INFO] [task_scheduler.cc:131] [Task #26: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_3] Trial #739: GFLOPs: 535.8537. Time: 431.6221 us. Best GFLOPs: 798.4111
2024-04-29 08:09:34 [INFO] [task_scheduler.cc:131] [Task #26: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_3] Trial #740: GFLOPs: 545.1934. Time: 424.2279 us. Best GFLOPs: 798.4111
2024-04-29 08:09:34 [INFO] [task_scheduler.cc:131] [Task #26: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_3] Trial #741: GFLOPs: 426.4963. Time: 542.2937 us. Best GFLOPs: 798.4111
2024-04-29 08:09:34 [INFO] [task_scheduler.cc:131] [Task #26: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_3] Trial #742: GFLOPs: 436.2938. Time: 530.1159 us. Best GFLOPs: 798.4111
2024-04-29 08:09:34 [INFO] [task_scheduler.cc:131] [Task #26: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_3] Trial #743: GFLOPs: 562.6659. Time: 411.0543 us. Best GFLOPs: 798.4111
2024-04-29 08:09:34 [INFO] [task_scheduler.cc:131] [Task #26: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_3] Trial #744: GFLOPs: 535.5260. Time: 431.8862 us. Best GFLOPs: 798.4111
2024-04-29 08:09:34 [INFO] [task_scheduler.cc:131] [Task #26: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_3] Trial #745: GFLOPs: 529.0135. Time: 437.2030 us. Best GFLOPs: 798.4111
2024-04-29 08:09:34 [INFO] [task_scheduler.cc:131] [Task #26: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_3] Trial #746: GFLOPs: 532.3243. Time: 434.4838 us. Best GFLOPs: 798.4111
2024-04-29 08:09:34 [INFO] [task_scheduler.cc:131] [Task #26: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_3] Trial #747: GFLOPs: 525.1476. Time: 440.4214 us. Best GFLOPs: 798.4111
2024-04-29 08:09:34 [INFO] [task_scheduler.cc:131] [Task #26: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_3] Trial #748: GFLOPs: 563.4740. Time: 410.4648 us. Best GFLOPs: 798.4111
2024-04-29 08:09:34 [INFO] [task_scheduler.cc:131] [Task #26: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_3] Trial #749: GFLOPs: 546.8312. Time: 422.9573 us. Best GFLOPs: 798.4111
2024-04-29 08:09:34 [INFO] [task_scheduler.cc:131] [Task #26: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_3] Trial #750: GFLOPs: 550.1508. Time: 420.4053 us. Best GFLOPs: 798.4111
2024-04-29 08:09:34 [INFO] [task_scheduler.cc:131] [Task #26: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_3] Trial #751: GFLOPs: 536.6083. Time: 431.0151 us. Best GFLOPs: 798.4111
2024-04-29 08:09:34 [INFO] [task_scheduler.cc:131] [Task #26: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_3] Trial #752: GFLOPs: 471.2566. Time: 490.7863 us. Best GFLOPs: 798.4111
2024-04-29 08:09:34 [INFO] [task_scheduler.cc:131] [Task #26: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_3] Trial #753: GFLOPs: 546.1126. Time: 423.5139 us. Best GFLOPs: 798.4111
2024-04-29 08:09:34 [INFO] [task_scheduler.cc:131] [Task #26: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_3] Trial #754: GFLOPs: 541.5194. Time: 427.1062 us. Best GFLOPs: 798.4111
2024-04-29 08:09:34 [INFO] [task_scheduler.cc:131] [Task #26: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_3] Trial #755: GFLOPs: 545.4501. Time: 424.0283 us. Best GFLOPs: 798.4111
2024-04-29 08:09:34 [INFO] [task_scheduler.cc:131] [Task #26: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_3] Trial #756: GFLOPs: 534.7444. Time: 432.5175 us. Best GFLOPs: 798.4111
2024-04-29 08:09:34 [INFO] [task_scheduler.cc:131] [Task #26: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_3] Trial #757: GFLOPs: 526.4291. Time: 439.3493 us. Best GFLOPs: 798.4111
2024-04-29 08:09:34 [INFO] [task_scheduler.cc:131] [Task #26: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_3] Trial #758: GFLOPs: 533.5232. Time: 433.5074 us. Best GFLOPs: 798.4111
2024-04-29 08:09:34 [INFO] [task_scheduler.cc:121] [Task #26: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_3] Trial #759: Error in building:
LocalBuilder: Timeout, killed after 30.0 seconds
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(1), T.int64(7), T.int64(7), T.int64(512)), "float32"), p1: T.Buffer((T.int64(16), T.int64(1), T.int64(3), T.int64(3), T.int64(512), T.int64(32)), "float32"), p2: T.Buffer((T.int64(1), T.int64(16), T.int64(1), T.int64(1), T.int64(32)), "float32"), p3: T.Buffer((T.int64(1), T.int64(16), T.int64(7), T.int64(7), T.int64(32)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(16), T.int64(7), T.int64(7), T.int64(32)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        data_pad = T.alloc_buffer((T.int64(1), T.int64(1), T.int64(9), T.int64(9), T.int64(512)))
        conv2d_NCHWc = T.alloc_buffer((T.int64(1), T.int64(16), T.int64(7), T.int64(7), T.int64(32)))
        for n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_fused_fused in T.parallel(T.int64(112), annotations={"pragma_auto_unroll_max_step": 512, "pragma_unroll_explicit": 1}):
            for ax0, ax1, ax2, ax3, ax4 in T.grid(T.int64(1), T.int64(1), T.int64(9), T.int64(3), T.int64(512)):
                with T.block("data_pad"):
                    v_i0, v_i1, v_i2 = T.axis.remap("SSS", [ax0, ax1, ax2])
                    v_i3 = T.axis.spatial(T.int64(9), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_fused_fused % T.int64(7) + ax3)
                    v_i4 = T.axis.spatial(T.int64(512), ax4)
                    T.reads(p0[v_i0, v_i1, v_i2 - T.int64(1), v_i3 - T.int64(1), v_i4])
                    T.writes(data_pad[v_i0, v_i1, v_i2, v_i3, v_i4])
                    data_pad[v_i0, v_i1, v_i2, v_i3, v_i4] = T.if_then_else(T.int64(1) <= v_i2 and v_i2 < T.int64(8) and T.int64(1) <= v_i3 and v_i3 < T.int64(8), p0[v_i0, v_i1, v_i2 - T.int64(1), v_i3 - T.int64(1), v_i4], T.float32(0))
            for oc_block_1 in range(T.int64(1)):
                for n_2_init, oc_chunk_2_init, oh_2_init, ow_2_init, oc_block_2_init, n_3_init, oc_chunk_3_init, oh_3_init, ow_3_init, oc_block_3_init in T.grid(T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(32), T.int64(1), T.int64(1), T.int64(7), T.int64(1), T.int64(1)):
                    with T.block("conv2d_NCHWc_init"):
                        v_n = T.axis.spatial(T.int64(1), n_2_init + n_3_init)
                        v_oc_chunk = T.axis.spatial(T.int64(16), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_fused_fused // T.int64(7) + oc_chunk_2_init + oc_chunk_3_init)
                        v_oh = T.axis.spatial(T.int64(7), oh_2_init * T.int64(7) + oh_3_init)
                        v_ow = T.axis.spatial(T.int64(7), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_fused_fused % T.int64(7) + ow_2_init + ow_3_init)
                        v_oc_block = T.axis.spatial(T.int64(32), oc_block_1 * T.int64(32) + oc_block_2_init + oc_block_3_init)
                        T.reads()
                        T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                        T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                        conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = T.float32(0)
                for ic_0, kh_0, kw_0, n_2, oc_chunk_2, oh_2, ow_2, oc_block_2, ic_1, kh_1, kw_1, n_3, oc_chunk_3, oh_3, ow_3, oc_block_3 in T.grid(T.int64(512), T.int64(1), T.int64(3), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(32), T.int64(1), T.int64(3), T.int64(1), T.int64(1), T.int64(1), T.int64(7), T.int64(1), T.int64(1)):
                    with T.block("conv2d_NCHWc_update"):
                        v_n = T.axis.spatial(T.int64(1), n_2 + n_3)
                        v_oc_chunk = T.axis.spatial(T.int64(16), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_fused_fused // T.int64(7) + oc_chunk_2 + oc_chunk_3)
                        v_oh = T.axis.spatial(T.int64(7), oh_2 * T.int64(7) + oh_3)
                        v_ow = T.axis.spatial(T.int64(7), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_fused_fused % T.int64(7) + ow_2 + ow_3)
                        v_oc_block = T.axis.spatial(T.int64(32), oc_block_1 * T.int64(32) + oc_block_2 + oc_block_3)
                        v_ic = T.axis.reduce(T.int64(512), ic_0 + ic_1)
                        v_kh = T.axis.reduce(T.int64(3), kh_0 * T.int64(3) + kh_1)
                        v_kw = T.axis.reduce(T.int64(3), kw_0 + kw_1)
                        T.reads(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block], data_pad[v_n, v_ic // T.int64(512), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(512)], p1[v_oc_chunk, v_ic // T.int64(512), v_kh, v_kw, v_ic % T.int64(512), v_oc_block])
                        T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                        T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                        conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] + data_pad[v_n, v_ic // T.int64(512), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(512)] * p1[v_oc_chunk, v_ic // T.int64(512), v_kh, v_kw, v_ic % T.int64(512), v_oc_block]
                for ax0, ax1, ax2 in T.grid(T.int64(1), T.int64(1), T.int64(7)):
                    for ax3_ax4_fused in T.vectorized(T.int64(32)):
                        with T.block("T_relu"):
                            v_ax0 = T.axis.spatial(T.int64(1), ax0)
                            v_ax1 = T.axis.spatial(T.int64(16), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_fused_fused // T.int64(7) + ax1)
                            v_ax2 = T.axis.spatial(T.int64(7), ax2)
                            v_ax3 = T.axis.spatial(T.int64(7), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_fused_fused % T.int64(7))
                            v_ax4 = T.axis.spatial(T.int64(32), ax3_ax4_fused)
                            T.reads(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4], p3[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                            T.writes(T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                            T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.max(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] + p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4] + p3[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], T.float32(0))
b0 = sch.get_block(name="data_pad", func_name="main")
b1 = sch.get_block(name="conv2d_NCHWc", func_name="main")
b2 = sch.get_block(name="T_add", func_name="main")
b3 = sch.get_block(name="T_add_1", func_name="main")
b4 = sch.get_block(name="root", func_name="main")
sch.compute_inline(block=b3)
sch.compute_inline(block=b2)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSRSRS")
l5, l6, l7, l8, l9, l10, l11, l12 = sch.get_loops(block=b1)
v13, v14, v15, v16 = sch.sample_perfect_tile(loop=l5, n=4, max_innermost_factor=64, decision=[1, 1, 1, 1])
l17, l18, l19, l20 = sch.split(loop=l5, factors=[v13, v14, v15, v16], preserve_unit_iters=True)
v21, v22, v23, v24 = sch.sample_perfect_tile(loop=l6, n=4, max_innermost_factor=64, decision=[1, 16, 1, 1])
l25, l26, l27, l28 = sch.split(loop=l6, factors=[v21, v22, v23, v24], preserve_unit_iters=True)
v29, v30, v31, v32 = sch.sample_perfect_tile(loop=l7, n=4, max_innermost_factor=64, decision=[1, 1, 1, 7])
l33, l34, l35, l36 = sch.split(loop=l7, factors=[v29, v30, v31, v32], preserve_unit_iters=True)
v37, v38, v39, v40 = sch.sample_perfect_tile(loop=l8, n=4, max_innermost_factor=64, decision=[1, 7, 1, 1])
l41, l42, l43, l44 = sch.split(loop=l8, factors=[v37, v38, v39, v40], preserve_unit_iters=True)
v45, v46, v47, v48 = sch.sample_perfect_tile(loop=l9, n=4, max_innermost_factor=64, decision=[1, 1, 32, 1])
l49, l50, l51, l52 = sch.split(loop=l9, factors=[v45, v46, v47, v48], preserve_unit_iters=True)
v53, v54 = sch.sample_perfect_tile(loop=l10, n=2, max_innermost_factor=64, decision=[512, 1])
l55, l56 = sch.split(loop=l10, factors=[v53, v54], preserve_unit_iters=True)
v57, v58 = sch.sample_perfect_tile(loop=l11, n=2, max_innermost_factor=64, decision=[1, 3])
l59, l60 = sch.split(loop=l11, factors=[v57, v58], preserve_unit_iters=True)
v61, v62 = sch.sample_perfect_tile(loop=l12, n=2, max_innermost_factor=64, decision=[3, 1])
l63, l64 = sch.split(loop=l12, factors=[v61, v62], preserve_unit_iters=True)
sch.reorder(l17, l25, l33, l41, l49, l18, l26, l34, l42, l50, l55, l59, l63, l19, l27, l35, l43, l51, l56, l60, l64, l20, l28, l36, l44, l52)
b65, = sch.get_consumers(block=b1)
sch.reverse_compute_at(block=b65, loop=l50, preserve_unit_loops=True, index=-1)
sch.annotate(block_or_loop=b4, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b4, ann_key="meta_schedule.vectorize", ann_val=64)
v66 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b4, ann_key="meta_schedule.unroll_explicit", ann_val=v66)
l67 = sch.sample_compute_location(block=b0, decision=8)
sch.compute_at(block=b0, loop=l67, preserve_unit_loops=True, index=-1)
sch.enter_postproc()
b68 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b68, ann_key="meta_schedule.parallel")
sch.unannotate(block_or_loop=b68, ann_key="meta_schedule.vectorize")
sch.unannotate(block_or_loop=b68, ann_key="meta_schedule.unroll_explicit")
b69, b70, b71 = sch.get_child_blocks(b68)
l72, l73, l74, l75, l76, l77, l78, l79, l80, l81, l82, l83, l84, l85 = sch.get_loops(block=b69)
l86 = sch.fuse(l72, l73, l74, l75, l76, l77, l78, l79, l80, preserve_unit_iters=True)
sch.parallel(loop=l86)
l87, l88, l89, l90, l91, l92, l93, l94, l95, l96, l97, l98, l99, l100, l101, l102, l103, l104 = sch.get_loops(block=b70)
l105 = sch.fuse(l87, preserve_unit_iters=True)
sch.parallel(loop=l105)
sch.annotate(block_or_loop=l105, ann_key="pragma_auto_unroll_max_step", ann_val=512)
sch.annotate(block_or_loop=l105, ann_key="pragma_unroll_explicit", ann_val=1)
l106, l107, l108, l109, l110, l111, l112 = sch.get_loops(block=b71)
l113 = sch.fuse(l111, l112, preserve_unit_iters=True)
sch.vectorize(loop=l113)
b114 = sch.get_block(name="conv2d_NCHWc", func_name="main")
l115, l116, l117, l118, l119, l120, l121, l122, l123, l124, l125, l126, l127, l128, l129, l130, l131, l132 = sch.get_loops(block=b114)
b133 = sch.decompose_reduction(block=b114, loop=l117)
2024-04-29 08:09:34 [INFO] [task_scheduler.cc:131] [Task #26: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_3] Trial #760: GFLOPs: 551.3209. Time: 419.5130 us. Best GFLOPs: 798.4111
2024-04-29 08:09:34 [INFO] [task_scheduler.cc:131] [Task #26: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_3] Trial #761: GFLOPs: 572.9798. Time: 403.6552 us. Best GFLOPs: 798.4111
2024-04-29 08:09:34 [INFO] [task_scheduler.cc:131] [Task #26: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_3] Trial #762: GFLOPs: 495.8785. Time: 466.4172 us. Best GFLOPs: 798.4111
2024-04-29 08:09:34 [INFO] [task_scheduler.cc:131] [Task #26: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_3] Trial #763: GFLOPs: 540.5169. Time: 427.8983 us. Best GFLOPs: 798.4111
2024-04-29 08:09:34 [INFO] [task_scheduler.cc:131] [Task #26: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_3] Trial #764: GFLOPs: 462.7576. Time: 499.8000 us. Best GFLOPs: 798.4111
2024-04-29 08:09:34 [INFO] [task_scheduler.cc:131] [Task #26: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_3] Trial #765: GFLOPs: 466.2766. Time: 496.0281 us. Best GFLOPs: 798.4111
2024-04-29 08:09:34 [INFO] [task_scheduler.cc:131] [Task #26: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_3] Trial #766: GFLOPs: 49.5630. Time: 4666.5116 us. Best GFLOPs: 798.4111
2024-04-29 08:09:34 [INFO] [task_scheduler.cc:131] [Task #26: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_3] Trial #767: GFLOPs: 40.0445. Time: 5775.7291 us. Best GFLOPs: 798.4111
2024-04-29 08:09:34 [INFO] [task_scheduler.cc:131] [Task #26: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_3] Trial #768: GFLOPs: 0.9554. Time: 242084.1340 us. Best GFLOPs: 798.4111
2024-04-29 08:33:46 [INFO] [evolutionary_search.cc:713] Generating candidates......
2024-04-29 08:33:47 [INFO] [evolutionary_search.cc:715] Picked top 102 candidate(s) from database
2024-04-29 08:33:51 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x36363d8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x4388aa8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x3310908)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x3246458)]: 0 failure(s)
2024-04-29 08:33:51 [INFO] [evolutionary_search.cc:723] Sampled 410 candidate(s)
2024-04-29 08:34:02 [INFO] [evolutionary_search.cc:621] Evolve iter #0 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x36363d8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x4388aa8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x3310908)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x3246458)]: 0 failure(s)
2024-04-29 08:34:13 [INFO] [evolutionary_search.cc:621] Evolve iter #1 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x36363d8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x4388aa8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x3310908)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x3246458)]: 0 failure(s)
2024-04-29 08:34:25 [INFO] [evolutionary_search.cc:621] Evolve iter #2 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x36363d8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x4388aa8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x3310908)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x3246458)]: 0 failure(s)
2024-04-29 08:34:36 [INFO] [evolutionary_search.cc:621] Evolve iter #3 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x36363d8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x4388aa8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x3310908)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x3246458)]: 0 failure(s)
2024-04-29 08:34:43 [INFO] [evolutionary_search.cc:649] Scores of the best 64 candidates:
[1 : 16]:	0.9522  0.9108  0.8869  0.8869  0.8869  0.8643  0.8384  0.8349  0.8349  0.8261  0.8040  0.8001  0.8001  0.7847  0.7819  0.7793
[17 : 32]:	0.7777  0.7766  0.7766  0.7753  0.7753  0.7656  0.7616  0.7584  0.7540  0.7533  0.7527  0.7527  0.7494  0.7468  0.7431  0.7371
[33 : 48]:	0.7293  0.7286  0.7189  0.7164  0.7153  0.7117  0.7088  0.7088  0.7072  0.6970  0.6957  0.6912  0.6908  0.6906  0.6898  0.6875
[49 : 64]:	0.6802  0.6755  0.6755  0.6742  0.6727  0.6722  0.6722  0.6692  0.6692  0.6672  0.6645  0.6568  0.6490  0.6490  0.6450  0.6450
2024-04-29 08:34:43 [INFO] [evolutionary_search.cc:727] Got 64 candidate(s) with evolutionary search
2024-04-29 08:34:43 [INFO] [evolutionary_search.cc:730] Sending 64 candidates(s) for measurement
2024-04-29 08:36:48 [INFO] [task_scheduler.cc:131] [Task #26: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_3] Trial #769: GFLOPs: 805.6149. Time: 287.0929 us. Best GFLOPs: 805.6149
2024-04-29 08:36:48 [INFO] [task_scheduler.cc:131] [Task #26: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_3] Trial #770: GFLOPs: 746.2882. Time: 309.9155 us. Best GFLOPs: 805.6149
2024-04-29 08:36:48 [INFO] [task_scheduler.cc:131] [Task #26: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_3] Trial #771: GFLOPs: 771.7683. Time: 299.6836 us. Best GFLOPs: 805.6149
2024-04-29 08:36:48 [INFO] [task_scheduler.cc:131] [Task #26: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_3] Trial #772: GFLOPs: 738.0969. Time: 313.3549 us. Best GFLOPs: 805.6149
2024-04-29 08:36:48 [INFO] [task_scheduler.cc:131] [Task #26: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_3] Trial #773: GFLOPs: 739.6188. Time: 312.7101 us. Best GFLOPs: 805.6149
2024-04-29 08:36:48 [INFO] [task_scheduler.cc:131] [Task #26: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_3] Trial #774: GFLOPs: 717.9975. Time: 322.1269 us. Best GFLOPs: 805.6149
2024-04-29 08:36:48 [INFO] [task_scheduler.cc:131] [Task #26: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_3] Trial #775: GFLOPs: 695.7806. Time: 332.4127 us. Best GFLOPs: 805.6149
2024-04-29 08:36:48 [INFO] [task_scheduler.cc:131] [Task #26: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_3] Trial #776: GFLOPs: 734.1441. Time: 315.0421 us. Best GFLOPs: 805.6149
2024-04-29 08:36:48 [INFO] [task_scheduler.cc:131] [Task #26: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_3] Trial #777: GFLOPs: 785.8296. Time: 294.3211 us. Best GFLOPs: 805.6149
2024-04-29 08:36:48 [INFO] [task_scheduler.cc:131] [Task #26: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_3] Trial #778: GFLOPs: 677.2487. Time: 341.5086 us. Best GFLOPs: 805.6149
2024-04-29 08:36:48 [INFO] [task_scheduler.cc:131] [Task #26: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_3] Trial #779: GFLOPs: 663.0079. Time: 348.8439 us. Best GFLOPs: 805.6149
2024-04-29 08:36:48 [INFO] [task_scheduler.cc:131] [Task #26: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_3] Trial #780: GFLOPs: 638.4568. Time: 362.2583 us. Best GFLOPs: 805.6149
2024-04-29 08:36:48 [INFO] [task_scheduler.cc:131] [Task #26: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_3] Trial #781: GFLOPs: 660.0967. Time: 350.3824 us. Best GFLOPs: 805.6149
2024-04-29 08:36:48 [INFO] [task_scheduler.cc:131] [Task #26: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_3] Trial #782: GFLOPs: 642.5691. Time: 359.9399 us. Best GFLOPs: 805.6149
2024-04-29 08:36:48 [INFO] [task_scheduler.cc:131] [Task #26: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_3] Trial #783: GFLOPs: 644.7855. Time: 358.7027 us. Best GFLOPs: 805.6149
2024-04-29 08:36:48 [INFO] [task_scheduler.cc:131] [Task #26: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_3] Trial #784: GFLOPs: 571.3252. Time: 404.8242 us. Best GFLOPs: 805.6149
2024-04-29 08:36:48 [INFO] [task_scheduler.cc:131] [Task #26: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_3] Trial #785: GFLOPs: 685.2653. Time: 337.5135 us. Best GFLOPs: 805.6149
2024-04-29 08:36:48 [INFO] [task_scheduler.cc:131] [Task #26: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_3] Trial #786: GFLOPs: 612.3749. Time: 377.6874 us. Best GFLOPs: 805.6149
2024-04-29 08:36:48 [INFO] [task_scheduler.cc:131] [Task #26: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_3] Trial #787: GFLOPs: 642.9045. Time: 359.7522 us. Best GFLOPs: 805.6149
2024-04-29 08:36:48 [INFO] [task_scheduler.cc:131] [Task #26: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_3] Trial #788: GFLOPs: 636.8865. Time: 363.1515 us. Best GFLOPs: 805.6149
2024-04-29 08:36:48 [INFO] [task_scheduler.cc:131] [Task #26: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_3] Trial #789: GFLOPs: 628.2005. Time: 368.1727 us. Best GFLOPs: 805.6149
2024-04-29 08:36:48 [INFO] [task_scheduler.cc:131] [Task #26: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_3] Trial #790: GFLOPs: 610.8896. Time: 378.6057 us. Best GFLOPs: 805.6149
2024-04-29 08:36:48 [INFO] [task_scheduler.cc:131] [Task #26: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_3] Trial #791: GFLOPs: 619.9666. Time: 373.0625 us. Best GFLOPs: 805.6149
2024-04-29 08:36:48 [INFO] [task_scheduler.cc:131] [Task #26: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_3] Trial #792: GFLOPs: 703.4615. Time: 328.7831 us. Best GFLOPs: 805.6149
2024-04-29 08:36:48 [INFO] [task_scheduler.cc:131] [Task #26: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_3] Trial #793: GFLOPs: 647.4320. Time: 357.2364 us. Best GFLOPs: 805.6149
2024-04-29 08:36:48 [INFO] [task_scheduler.cc:131] [Task #26: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_3] Trial #794: GFLOPs: 597.8709. Time: 386.8499 us. Best GFLOPs: 805.6149
2024-04-29 08:36:48 [INFO] [task_scheduler.cc:121] [Task #26: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_3] Trial #795: Error in building:
LocalBuilder: Timeout, killed after 30.0 seconds
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(1), T.int64(7), T.int64(7), T.int64(512)), "float32"), p1: T.Buffer((T.int64(16), T.int64(1), T.int64(3), T.int64(3), T.int64(512), T.int64(32)), "float32"), p2: T.Buffer((T.int64(1), T.int64(16), T.int64(1), T.int64(1), T.int64(32)), "float32"), p3: T.Buffer((T.int64(1), T.int64(16), T.int64(7), T.int64(7), T.int64(32)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(16), T.int64(7), T.int64(7), T.int64(32)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        data_pad = T.alloc_buffer((T.int64(1), T.int64(1), T.int64(9), T.int64(9), T.int64(512)))
        conv2d_NCHWc = T.alloc_buffer((T.int64(1), T.int64(16), T.int64(7), T.int64(7), T.int64(32)))
        for n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_fused_fused in T.parallel(T.int64(112), annotations={"pragma_auto_unroll_max_step": 512, "pragma_unroll_explicit": 1}):
            for ax0, ax1, ax2, ax3, ax4 in T.grid(T.int64(1), T.int64(1), T.int64(9), T.int64(3), T.int64(512)):
                with T.block("data_pad"):
                    v_i0, v_i1, v_i2 = T.axis.remap("SSS", [ax0, ax1, ax2])
                    v_i3 = T.axis.spatial(T.int64(9), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_fused_fused % T.int64(7) + ax3)
                    v_i4 = T.axis.spatial(T.int64(512), ax4)
                    T.reads(p0[v_i0, v_i1, v_i2 - T.int64(1), v_i3 - T.int64(1), v_i4])
                    T.writes(data_pad[v_i0, v_i1, v_i2, v_i3, v_i4])
                    data_pad[v_i0, v_i1, v_i2, v_i3, v_i4] = T.if_then_else(T.int64(1) <= v_i2 and v_i2 < T.int64(8) and T.int64(1) <= v_i3 and v_i3 < T.int64(8), p0[v_i0, v_i1, v_i2 - T.int64(1), v_i3 - T.int64(1), v_i4], T.float32(0))
            for oc_block_1 in range(T.int64(1)):
                for n_2_init, oc_chunk_2_init, oh_2_init, ow_2_init, oc_block_2_init, n_3_init, oc_chunk_3_init, oh_3_init, ow_3_init, oc_block_3_init in T.grid(T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(32), T.int64(1), T.int64(1), T.int64(7), T.int64(1), T.int64(1)):
                    with T.block("conv2d_NCHWc_init"):
                        v_n = T.axis.spatial(T.int64(1), n_2_init + n_3_init)
                        v_oc_chunk = T.axis.spatial(T.int64(16), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_fused_fused // T.int64(7) + oc_chunk_2_init + oc_chunk_3_init)
                        v_oh = T.axis.spatial(T.int64(7), oh_2_init * T.int64(7) + oh_3_init)
                        v_ow = T.axis.spatial(T.int64(7), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_fused_fused % T.int64(7) + ow_2_init + ow_3_init)
                        v_oc_block = T.axis.spatial(T.int64(32), oc_block_1 * T.int64(32) + oc_block_2_init + oc_block_3_init)
                        T.reads()
                        T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                        T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                        conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = T.float32(0)
                for ic_0, kh_0, kw_0, n_2, oc_chunk_2, oh_2, ow_2, oc_block_2, ic_1, kh_1, kw_1, n_3, oc_chunk_3, oh_3, ow_3, oc_block_3 in T.grid(T.int64(128), T.int64(1), T.int64(3), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(32), T.int64(4), T.int64(3), T.int64(1), T.int64(1), T.int64(1), T.int64(7), T.int64(1), T.int64(1)):
                    with T.block("conv2d_NCHWc_update"):
                        v_n = T.axis.spatial(T.int64(1), n_2 + n_3)
                        v_oc_chunk = T.axis.spatial(T.int64(16), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_fused_fused // T.int64(7) + oc_chunk_2 + oc_chunk_3)
                        v_oh = T.axis.spatial(T.int64(7), oh_2 * T.int64(7) + oh_3)
                        v_ow = T.axis.spatial(T.int64(7), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_fused_fused % T.int64(7) + ow_2 + ow_3)
                        v_oc_block = T.axis.spatial(T.int64(32), oc_block_1 * T.int64(32) + oc_block_2 + oc_block_3)
                        v_ic = T.axis.reduce(T.int64(512), ic_0 * T.int64(4) + ic_1)
                        v_kh = T.axis.reduce(T.int64(3), kh_0 * T.int64(3) + kh_1)
                        v_kw = T.axis.reduce(T.int64(3), kw_0 + kw_1)
                        T.reads(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block], data_pad[v_n, v_ic // T.int64(512), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(512)], p1[v_oc_chunk, v_ic // T.int64(512), v_kh, v_kw, v_ic % T.int64(512), v_oc_block])
                        T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                        T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                        conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] + data_pad[v_n, v_ic // T.int64(512), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(512)] * p1[v_oc_chunk, v_ic // T.int64(512), v_kh, v_kw, v_ic % T.int64(512), v_oc_block]
                for ax0, ax1, ax2 in T.grid(T.int64(1), T.int64(1), T.int64(7)):
                    for ax3_ax4_fused in T.vectorized(T.int64(32)):
                        with T.block("T_relu"):
                            v_ax0 = T.axis.spatial(T.int64(1), ax0)
                            v_ax1 = T.axis.spatial(T.int64(16), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_fused_fused // T.int64(7) + ax1)
                            v_ax2 = T.axis.spatial(T.int64(7), ax2)
                            v_ax3 = T.axis.spatial(T.int64(7), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_fused_fused % T.int64(7))
                            v_ax4 = T.axis.spatial(T.int64(32), ax3_ax4_fused)
                            T.reads(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4], p3[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                            T.writes(T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                            T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.max(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] + p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4] + p3[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], T.float32(0))
b0 = sch.get_block(name="data_pad", func_name="main")
b1 = sch.get_block(name="conv2d_NCHWc", func_name="main")
b2 = sch.get_block(name="T_add", func_name="main")
b3 = sch.get_block(name="T_add_1", func_name="main")
b4 = sch.get_block(name="root", func_name="main")
sch.compute_inline(block=b3)
sch.compute_inline(block=b2)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSRSRS")
l5, l6, l7, l8, l9, l10, l11, l12 = sch.get_loops(block=b1)
v13, v14, v15, v16 = sch.sample_perfect_tile(loop=l5, n=4, max_innermost_factor=64, decision=[1, 1, 1, 1])
l17, l18, l19, l20 = sch.split(loop=l5, factors=[v13, v14, v15, v16], preserve_unit_iters=True)
v21, v22, v23, v24 = sch.sample_perfect_tile(loop=l6, n=4, max_innermost_factor=64, decision=[1, 16, 1, 1])
l25, l26, l27, l28 = sch.split(loop=l6, factors=[v21, v22, v23, v24], preserve_unit_iters=True)
v29, v30, v31, v32 = sch.sample_perfect_tile(loop=l7, n=4, max_innermost_factor=64, decision=[1, 1, 1, 7])
l33, l34, l35, l36 = sch.split(loop=l7, factors=[v29, v30, v31, v32], preserve_unit_iters=True)
v37, v38, v39, v40 = sch.sample_perfect_tile(loop=l8, n=4, max_innermost_factor=64, decision=[1, 7, 1, 1])
l41, l42, l43, l44 = sch.split(loop=l8, factors=[v37, v38, v39, v40], preserve_unit_iters=True)
v45, v46, v47, v48 = sch.sample_perfect_tile(loop=l9, n=4, max_innermost_factor=64, decision=[1, 1, 32, 1])
l49, l50, l51, l52 = sch.split(loop=l9, factors=[v45, v46, v47, v48], preserve_unit_iters=True)
v53, v54 = sch.sample_perfect_tile(loop=l10, n=2, max_innermost_factor=64, decision=[128, 4])
l55, l56 = sch.split(loop=l10, factors=[v53, v54], preserve_unit_iters=True)
v57, v58 = sch.sample_perfect_tile(loop=l11, n=2, max_innermost_factor=64, decision=[1, 3])
l59, l60 = sch.split(loop=l11, factors=[v57, v58], preserve_unit_iters=True)
v61, v62 = sch.sample_perfect_tile(loop=l12, n=2, max_innermost_factor=64, decision=[3, 1])
l63, l64 = sch.split(loop=l12, factors=[v61, v62], preserve_unit_iters=True)
sch.reorder(l17, l25, l33, l41, l49, l18, l26, l34, l42, l50, l55, l59, l63, l19, l27, l35, l43, l51, l56, l60, l64, l20, l28, l36, l44, l52)
b65, = sch.get_consumers(block=b1)
sch.reverse_compute_at(block=b65, loop=l50, preserve_unit_loops=True, index=-1)
sch.annotate(block_or_loop=b4, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b4, ann_key="meta_schedule.vectorize", ann_val=64)
v66 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b4, ann_key="meta_schedule.unroll_explicit", ann_val=v66)
l67 = sch.sample_compute_location(block=b0, decision=8)
sch.compute_at(block=b0, loop=l67, preserve_unit_loops=True, index=-1)
sch.enter_postproc()
b68 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b68, ann_key="meta_schedule.parallel")
sch.unannotate(block_or_loop=b68, ann_key="meta_schedule.vectorize")
sch.unannotate(block_or_loop=b68, ann_key="meta_schedule.unroll_explicit")
b69, b70, b71 = sch.get_child_blocks(b68)
l72, l73, l74, l75, l76, l77, l78, l79, l80, l81, l82, l83, l84, l85 = sch.get_loops(block=b69)
l86 = sch.fuse(l72, l73, l74, l75, l76, l77, l78, l79, l80, preserve_unit_iters=True)
sch.parallel(loop=l86)
l87, l88, l89, l90, l91, l92, l93, l94, l95, l96, l97, l98, l99, l100, l101, l102, l103, l104 = sch.get_loops(block=b70)
l105 = sch.fuse(l87, preserve_unit_iters=True)
sch.parallel(loop=l105)
sch.annotate(block_or_loop=l105, ann_key="pragma_auto_unroll_max_step", ann_val=512)
sch.annotate(block_or_loop=l105, ann_key="pragma_unroll_explicit", ann_val=1)
l106, l107, l108, l109, l110, l111, l112 = sch.get_loops(block=b71)
l113 = sch.fuse(l111, l112, preserve_unit_iters=True)
sch.vectorize(loop=l113)
b114 = sch.get_block(name="conv2d_NCHWc", func_name="main")
l115, l116, l117, l118, l119, l120, l121, l122, l123, l124, l125, l126, l127, l128, l129, l130, l131, l132 = sch.get_loops(block=b114)
b133 = sch.decompose_reduction(block=b114, loop=l117)
2024-04-29 08:36:48 [INFO] [task_scheduler.cc:121] [Task #26: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_3] Trial #796: Error in building:
LocalBuilder: Timeout, killed after 30.0 seconds
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(1), T.int64(7), T.int64(7), T.int64(512)), "float32"), p1: T.Buffer((T.int64(16), T.int64(1), T.int64(3), T.int64(3), T.int64(512), T.int64(32)), "float32"), p2: T.Buffer((T.int64(1), T.int64(16), T.int64(1), T.int64(1), T.int64(32)), "float32"), p3: T.Buffer((T.int64(1), T.int64(16), T.int64(7), T.int64(7), T.int64(32)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(16), T.int64(7), T.int64(7), T.int64(32)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        data_pad = T.alloc_buffer((T.int64(1), T.int64(1), T.int64(9), T.int64(9), T.int64(512)))
        conv2d_NCHWc = T.alloc_buffer((T.int64(1), T.int64(16), T.int64(7), T.int64(7), T.int64(32)))
        for n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_fused_fused in T.parallel(T.int64(112), annotations={"pragma_auto_unroll_max_step": 512, "pragma_unroll_explicit": 1}):
            for ax0, ax1, ax2, ax3, ax4 in T.grid(T.int64(1), T.int64(1), T.int64(9), T.int64(3), T.int64(512)):
                with T.block("data_pad"):
                    v_i0, v_i1, v_i2 = T.axis.remap("SSS", [ax0, ax1, ax2])
                    v_i3 = T.axis.spatial(T.int64(9), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_fused_fused // T.int64(16) + ax3)
                    v_i4 = T.axis.spatial(T.int64(512), ax4)
                    T.reads(p0[v_i0, v_i1, v_i2 - T.int64(1), v_i3 - T.int64(1), v_i4])
                    T.writes(data_pad[v_i0, v_i1, v_i2, v_i3, v_i4])
                    data_pad[v_i0, v_i1, v_i2, v_i3, v_i4] = T.if_then_else(T.int64(1) <= v_i2 and v_i2 < T.int64(8) and T.int64(1) <= v_i3 and v_i3 < T.int64(8), p0[v_i0, v_i1, v_i2 - T.int64(1), v_i3 - T.int64(1), v_i4], T.float32(0))
            for oh_1, ow_1, oc_block_1 in T.grid(T.int64(1), T.int64(1), T.int64(1)):
                for n_2_init, oc_chunk_2_init, oh_2_init, ow_2_init, oc_block_2_init, n_3_init, oc_chunk_3_init, oh_3_init, ow_3_init, oc_block_3_init in T.grid(T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(32), T.int64(1), T.int64(1), T.int64(7), T.int64(1), T.int64(1)):
                    with T.block("conv2d_NCHWc_init"):
                        v_n = T.axis.spatial(T.int64(1), n_2_init + n_3_init)
                        v_oc_chunk = T.axis.spatial(T.int64(16), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_fused_fused % T.int64(16) + oc_chunk_2_init + oc_chunk_3_init)
                        v_oh = T.axis.spatial(T.int64(7), oh_1 * T.int64(7) + oh_2_init * T.int64(7) + oh_3_init)
                        v_ow = T.axis.spatial(T.int64(7), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_fused_fused // T.int64(16) + ow_1 + ow_2_init + ow_3_init)
                        v_oc_block = T.axis.spatial(T.int64(32), oc_block_1 * T.int64(32) + oc_block_2_init + oc_block_3_init)
                        T.reads()
                        T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                        T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                        conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = T.float32(0)
                for ic_0, kh_0, kw_0, n_2, oc_chunk_2, oh_2, ow_2, oc_block_2, ic_1, kh_1, kw_1, n_3, oc_chunk_3, oh_3, ow_3, oc_block_3 in T.grid(T.int64(128), T.int64(1), T.int64(3), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(32), T.int64(4), T.int64(3), T.int64(1), T.int64(1), T.int64(1), T.int64(7), T.int64(1), T.int64(1)):
                    with T.block("conv2d_NCHWc_update"):
                        v_n = T.axis.spatial(T.int64(1), n_2 + n_3)
                        v_oc_chunk = T.axis.spatial(T.int64(16), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_fused_fused % T.int64(16) + oc_chunk_2 + oc_chunk_3)
                        v_oh = T.axis.spatial(T.int64(7), oh_1 * T.int64(7) + oh_2 * T.int64(7) + oh_3)
                        v_ow = T.axis.spatial(T.int64(7), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_fused_fused // T.int64(16) + ow_1 + ow_2 + ow_3)
                        v_oc_block = T.axis.spatial(T.int64(32), oc_block_1 * T.int64(32) + oc_block_2 + oc_block_3)
                        v_ic = T.axis.reduce(T.int64(512), ic_0 * T.int64(4) + ic_1)
                        v_kh = T.axis.reduce(T.int64(3), kh_0 * T.int64(3) + kh_1)
                        v_kw = T.axis.reduce(T.int64(3), kw_0 + kw_1)
                        T.reads(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block], data_pad[v_n, v_ic // T.int64(512), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(512)], p1[v_oc_chunk, v_ic // T.int64(512), v_kh, v_kw, v_ic % T.int64(512), v_oc_block])
                        T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                        T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                        conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] + data_pad[v_n, v_ic // T.int64(512), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(512)] * p1[v_oc_chunk, v_ic // T.int64(512), v_kh, v_kw, v_ic % T.int64(512), v_oc_block]
                for ax0, ax1, ax2 in T.grid(T.int64(1), T.int64(1), T.int64(7)):
                    for ax3_ax4_fused in T.vectorized(T.int64(32)):
                        with T.block("T_relu"):
                            v_ax0 = T.axis.spatial(T.int64(1), ax0)
                            v_ax1 = T.axis.spatial(T.int64(16), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_fused_fused % T.int64(16) + ax1)
                            v_ax2 = T.axis.spatial(T.int64(7), ax2)
                            v_ax3 = T.axis.spatial(T.int64(7), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_fused_fused // T.int64(16))
                            v_ax4 = T.axis.spatial(T.int64(32), ax3_ax4_fused)
                            T.reads(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4], p3[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                            T.writes(T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                            T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.max(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] + p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4] + p3[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], T.float32(0))
b0 = sch.get_block(name="data_pad", func_name="main")
b1 = sch.get_block(name="conv2d_NCHWc", func_name="main")
b2 = sch.get_block(name="T_add", func_name="main")
b3 = sch.get_block(name="T_add_1", func_name="main")
b4 = sch.get_block(name="root", func_name="main")
sch.compute_inline(block=b3)
sch.compute_inline(block=b2)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSRSRS")
l5, l6, l7, l8, l9, l10, l11, l12 = sch.get_loops(block=b1)
v13, v14, v15, v16 = sch.sample_perfect_tile(loop=l5, n=4, max_innermost_factor=64, decision=[1, 1, 1, 1])
l17, l18, l19, l20 = sch.split(loop=l5, factors=[v13, v14, v15, v16], preserve_unit_iters=True)
v21, v22, v23, v24 = sch.sample_perfect_tile(loop=l6, n=4, max_innermost_factor=64, decision=[1, 16, 1, 1])
l25, l26, l27, l28 = sch.split(loop=l6, factors=[v21, v22, v23, v24], preserve_unit_iters=True)
v29, v30, v31, v32 = sch.sample_perfect_tile(loop=l7, n=4, max_innermost_factor=64, decision=[1, 1, 1, 7])
l33, l34, l35, l36 = sch.split(loop=l7, factors=[v29, v30, v31, v32], preserve_unit_iters=True)
v37, v38, v39, v40 = sch.sample_perfect_tile(loop=l8, n=4, max_innermost_factor=64, decision=[7, 1, 1, 1])
l41, l42, l43, l44 = sch.split(loop=l8, factors=[v37, v38, v39, v40], preserve_unit_iters=True)
v45, v46, v47, v48 = sch.sample_perfect_tile(loop=l9, n=4, max_innermost_factor=64, decision=[1, 1, 32, 1])
l49, l50, l51, l52 = sch.split(loop=l9, factors=[v45, v46, v47, v48], preserve_unit_iters=True)
v53, v54 = sch.sample_perfect_tile(loop=l10, n=2, max_innermost_factor=64, decision=[128, 4])
l55, l56 = sch.split(loop=l10, factors=[v53, v54], preserve_unit_iters=True)
v57, v58 = sch.sample_perfect_tile(loop=l11, n=2, max_innermost_factor=64, decision=[1, 3])
l59, l60 = sch.split(loop=l11, factors=[v57, v58], preserve_unit_iters=True)
v61, v62 = sch.sample_perfect_tile(loop=l12, n=2, max_innermost_factor=64, decision=[3, 1])
l63, l64 = sch.split(loop=l12, factors=[v61, v62], preserve_unit_iters=True)
sch.reorder(l17, l25, l33, l41, l49, l18, l26, l34, l42, l50, l55, l59, l63, l19, l27, l35, l43, l51, l56, l60, l64, l20, l28, l36, l44, l52)
b65, = sch.get_consumers(block=b1)
sch.reverse_compute_at(block=b65, loop=l50, preserve_unit_loops=True, index=-1)
sch.annotate(block_or_loop=b4, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b4, ann_key="meta_schedule.vectorize", ann_val=64)
v66 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b4, ann_key="meta_schedule.unroll_explicit", ann_val=v66)
l67 = sch.sample_compute_location(block=b0, decision=6)
sch.compute_at(block=b0, loop=l67, preserve_unit_loops=True, index=-1)
sch.enter_postproc()
b68 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b68, ann_key="meta_schedule.parallel")
sch.unannotate(block_or_loop=b68, ann_key="meta_schedule.vectorize")
sch.unannotate(block_or_loop=b68, ann_key="meta_schedule.unroll_explicit")
b69, b70, b71 = sch.get_child_blocks(b68)
l72, l73, l74, l75, l76, l77, l78, l79, l80, l81, l82, l83 = sch.get_loops(block=b69)
l84 = sch.fuse(l72, l73, l74, l75, l76, l77, l78, preserve_unit_iters=True)
sch.parallel(loop=l84)
l85, l86, l87, l88, l89, l90, l91, l92, l93, l94, l95, l96, l97, l98, l99, l100, l101, l102, l103, l104 = sch.get_loops(block=b70)
l105 = sch.fuse(l85, preserve_unit_iters=True)
sch.parallel(loop=l105)
sch.annotate(block_or_loop=l105, ann_key="pragma_auto_unroll_max_step", ann_val=512)
sch.annotate(block_or_loop=l105, ann_key="pragma_unroll_explicit", ann_val=1)
l106, l107, l108, l109, l110, l111, l112, l113, l114 = sch.get_loops(block=b71)
l115 = sch.fuse(l113, l114, preserve_unit_iters=True)
sch.vectorize(loop=l115)
b116 = sch.get_block(name="conv2d_NCHWc", func_name="main")
l117, l118, l119, l120, l121, l122, l123, l124, l125, l126, l127, l128, l129, l130, l131, l132, l133, l134, l135, l136 = sch.get_loops(block=b116)
b137 = sch.decompose_reduction(block=b116, loop=l121)
2024-04-29 08:36:48 [INFO] [task_scheduler.cc:131] [Task #26: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_3] Trial #797: GFLOPs: 573.5286. Time: 403.2689 us. Best GFLOPs: 805.6149
2024-04-29 08:36:48 [INFO] [task_scheduler.cc:131] [Task #26: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_3] Trial #798: GFLOPs: 672.8617. Time: 343.7352 us. Best GFLOPs: 805.6149
2024-04-29 08:36:48 [INFO] [task_scheduler.cc:121] [Task #26: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_3] Trial #799: Error in building:
LocalBuilder: Timeout, killed after 30.0 seconds
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(1), T.int64(7), T.int64(7), T.int64(512)), "float32"), p1: T.Buffer((T.int64(16), T.int64(1), T.int64(3), T.int64(3), T.int64(512), T.int64(32)), "float32"), p2: T.Buffer((T.int64(1), T.int64(16), T.int64(1), T.int64(1), T.int64(32)), "float32"), p3: T.Buffer((T.int64(1), T.int64(16), T.int64(7), T.int64(7), T.int64(32)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(16), T.int64(7), T.int64(7), T.int64(32)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        data_pad = T.alloc_buffer((T.int64(1), T.int64(1), T.int64(9), T.int64(9), T.int64(512)))
        conv2d_NCHWc = T.alloc_buffer((T.int64(1), T.int64(16), T.int64(7), T.int64(7), T.int64(32)))
        for n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_fused_fused in T.parallel(T.int64(112), annotations={"pragma_auto_unroll_max_step": 512, "pragma_unroll_explicit": 1}):
            for ax0, ax1, ax2, ax3, ax4 in T.grid(T.int64(1), T.int64(1), T.int64(3), T.int64(9), T.int64(512)):
                with T.block("data_pad"):
                    v_i0, v_i1 = T.axis.remap("SS", [ax0, ax1])
                    v_i2 = T.axis.spatial(T.int64(9), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_fused_fused % T.int64(7) + ax2)
                    v_i3, v_i4 = T.axis.remap("SS", [ax3, ax4])
                    T.reads(p0[v_i0, v_i1, v_i2 - T.int64(1), v_i3 - T.int64(1), v_i4])
                    T.writes(data_pad[v_i0, v_i1, v_i2, v_i3, v_i4])
                    data_pad[v_i0, v_i1, v_i2, v_i3, v_i4] = T.if_then_else(T.int64(1) <= v_i2 and v_i2 < T.int64(8) and T.int64(1) <= v_i3 and v_i3 < T.int64(8), p0[v_i0, v_i1, v_i2 - T.int64(1), v_i3 - T.int64(1), v_i4], T.float32(0))
            for ow_1, oc_block_1 in T.grid(T.int64(1), T.int64(1)):
                for n_2_init, oc_chunk_2_init, oh_2_init, ow_2_init, oc_block_2_init, n_3_init, oc_chunk_3_init, oh_3_init, ow_3_init, oc_block_3_init in T.grid(T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(32), T.int64(1), T.int64(1), T.int64(1), T.int64(7), T.int64(1)):
                    with T.block("conv2d_NCHWc_init"):
                        v_n = T.axis.spatial(T.int64(1), n_2_init + n_3_init)
                        v_oc_chunk = T.axis.spatial(T.int64(16), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_fused_fused // T.int64(7) + oc_chunk_2_init + oc_chunk_3_init)
                        v_oh = T.axis.spatial(T.int64(7), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_fused_fused % T.int64(7) + oh_2_init + oh_3_init)
                        v_ow = T.axis.spatial(T.int64(7), ow_1 * T.int64(7) + ow_2_init * T.int64(7) + ow_3_init)
                        v_oc_block = T.axis.spatial(T.int64(32), oc_block_1 * T.int64(32) + oc_block_2_init + oc_block_3_init)
                        T.reads()
                        T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                        T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                        conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = T.float32(0)
                for ic_0, kh_0, kw_0, n_2, oc_chunk_2, oh_2, ow_2, oc_block_2, ic_1, kh_1, kw_1, n_3, oc_chunk_3, oh_3, ow_3, oc_block_3 in T.grid(T.int64(256), T.int64(3), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(32), T.int64(2), T.int64(1), T.int64(3), T.int64(1), T.int64(1), T.int64(1), T.int64(7), T.int64(1)):
                    with T.block("conv2d_NCHWc_update"):
                        v_n = T.axis.spatial(T.int64(1), n_2 + n_3)
                        v_oc_chunk = T.axis.spatial(T.int64(16), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_fused_fused // T.int64(7) + oc_chunk_2 + oc_chunk_3)
                        v_oh = T.axis.spatial(T.int64(7), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_fused_fused % T.int64(7) + oh_2 + oh_3)
                        v_ow = T.axis.spatial(T.int64(7), ow_1 * T.int64(7) + ow_2 * T.int64(7) + ow_3)
                        v_oc_block = T.axis.spatial(T.int64(32), oc_block_1 * T.int64(32) + oc_block_2 + oc_block_3)
                        v_ic = T.axis.reduce(T.int64(512), ic_0 * T.int64(2) + ic_1)
                        v_kh = T.axis.reduce(T.int64(3), kh_0 + kh_1)
                        v_kw = T.axis.reduce(T.int64(3), kw_0 * T.int64(3) + kw_1)
                        T.reads(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block], data_pad[v_n, v_ic // T.int64(512), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(512)], p1[v_oc_chunk, v_ic // T.int64(512), v_kh, v_kw, v_ic % T.int64(512), v_oc_block])
                        T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                        T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                        conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] + data_pad[v_n, v_ic // T.int64(512), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(512)] * p1[v_oc_chunk, v_ic // T.int64(512), v_kh, v_kw, v_ic % T.int64(512), v_oc_block]
                for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(1), T.int64(1), T.int64(7)):
                    for ax4_fused in T.vectorized(T.int64(32)):
                        with T.block("T_relu"):
                            v_ax0 = T.axis.spatial(T.int64(1), ax0)
                            v_ax1 = T.axis.spatial(T.int64(16), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_fused_fused // T.int64(7) + ax1)
                            v_ax2 = T.axis.spatial(T.int64(7), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_fused_fused % T.int64(7) + ax2)
                            v_ax3, v_ax4 = T.axis.remap("SS", [ax3, ax4_fused])
                            T.reads(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4], p3[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                            T.writes(T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                            T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.max(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] + p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4] + p3[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], T.float32(0))
b0 = sch.get_block(name="data_pad", func_name="main")
b1 = sch.get_block(name="conv2d_NCHWc", func_name="main")
b2 = sch.get_block(name="T_add", func_name="main")
b3 = sch.get_block(name="T_add_1", func_name="main")
b4 = sch.get_block(name="root", func_name="main")
sch.compute_inline(block=b3)
sch.compute_inline(block=b2)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSRSRS")
l5, l6, l7, l8, l9, l10, l11, l12 = sch.get_loops(block=b1)
v13, v14, v15, v16 = sch.sample_perfect_tile(loop=l5, n=4, max_innermost_factor=64, decision=[1, 1, 1, 1])
l17, l18, l19, l20 = sch.split(loop=l5, factors=[v13, v14, v15, v16], preserve_unit_iters=True)
v21, v22, v23, v24 = sch.sample_perfect_tile(loop=l6, n=4, max_innermost_factor=64, decision=[16, 1, 1, 1])
l25, l26, l27, l28 = sch.split(loop=l6, factors=[v21, v22, v23, v24], preserve_unit_iters=True)
v29, v30, v31, v32 = sch.sample_perfect_tile(loop=l7, n=4, max_innermost_factor=64, decision=[1, 7, 1, 1])
l33, l34, l35, l36 = sch.split(loop=l7, factors=[v29, v30, v31, v32], preserve_unit_iters=True)
v37, v38, v39, v40 = sch.sample_perfect_tile(loop=l8, n=4, max_innermost_factor=64, decision=[1, 1, 1, 7])
l41, l42, l43, l44 = sch.split(loop=l8, factors=[v37, v38, v39, v40], preserve_unit_iters=True)
v45, v46, v47, v48 = sch.sample_perfect_tile(loop=l9, n=4, max_innermost_factor=64, decision=[1, 1, 32, 1])
l49, l50, l51, l52 = sch.split(loop=l9, factors=[v45, v46, v47, v48], preserve_unit_iters=True)
v53, v54 = sch.sample_perfect_tile(loop=l10, n=2, max_innermost_factor=64, decision=[256, 2])
l55, l56 = sch.split(loop=l10, factors=[v53, v54], preserve_unit_iters=True)
v57, v58 = sch.sample_perfect_tile(loop=l11, n=2, max_innermost_factor=64, decision=[3, 1])
l59, l60 = sch.split(loop=l11, factors=[v57, v58], preserve_unit_iters=True)
v61, v62 = sch.sample_perfect_tile(loop=l12, n=2, max_innermost_factor=64, decision=[1, 3])
l63, l64 = sch.split(loop=l12, factors=[v61, v62], preserve_unit_iters=True)
sch.reorder(l17, l25, l33, l41, l49, l18, l26, l34, l42, l50, l55, l59, l63, l19, l27, l35, l43, l51, l56, l60, l64, l20, l28, l36, l44, l52)
b65, = sch.get_consumers(block=b1)
sch.reverse_compute_at(block=b65, loop=l50, preserve_unit_loops=True, index=-1)
sch.annotate(block_or_loop=b4, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b4, ann_key="meta_schedule.vectorize", ann_val=64)
v66 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b4, ann_key="meta_schedule.unroll_explicit", ann_val=v66)
l67 = sch.sample_compute_location(block=b0, decision=7)
sch.compute_at(block=b0, loop=l67, preserve_unit_loops=True, index=-1)
sch.enter_postproc()
b68 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b68, ann_key="meta_schedule.parallel")
sch.unannotate(block_or_loop=b68, ann_key="meta_schedule.vectorize")
sch.unannotate(block_or_loop=b68, ann_key="meta_schedule.unroll_explicit")
b69, b70, b71 = sch.get_child_blocks(b68)
l72, l73, l74, l75, l76, l77, l78, l79, l80, l81, l82, l83, l84 = sch.get_loops(block=b69)
l85 = sch.fuse(l72, l73, l74, l75, l76, l77, l78, l79, preserve_unit_iters=True)
sch.parallel(loop=l85)
l86, l87, l88, l89, l90, l91, l92, l93, l94, l95, l96, l97, l98, l99, l100, l101, l102, l103, l104 = sch.get_loops(block=b70)
l105 = sch.fuse(l86, preserve_unit_iters=True)
sch.parallel(loop=l105)
sch.annotate(block_or_loop=l105, ann_key="pragma_auto_unroll_max_step", ann_val=512)
sch.annotate(block_or_loop=l105, ann_key="pragma_unroll_explicit", ann_val=1)
l106, l107, l108, l109, l110, l111, l112, l113 = sch.get_loops(block=b71)
l114 = sch.fuse(l113, preserve_unit_iters=True)
sch.vectorize(loop=l114)
b115 = sch.get_block(name="conv2d_NCHWc", func_name="main")
l116, l117, l118, l119, l120, l121, l122, l123, l124, l125, l126, l127, l128, l129, l130, l131, l132, l133, l134 = sch.get_loops(block=b115)
b135 = sch.decompose_reduction(block=b115, loop=l119)
2024-04-29 08:36:48 [INFO] [task_scheduler.cc:131] [Task #26: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_3] Trial #800: GFLOPs: 596.5815. Time: 387.6860 us. Best GFLOPs: 805.6149
2024-04-29 08:36:48 [INFO] [task_scheduler.cc:131] [Task #26: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_3] Trial #801: GFLOPs: 606.4917. Time: 381.3511 us. Best GFLOPs: 805.6149
2024-04-29 08:36:48 [INFO] [task_scheduler.cc:131] [Task #26: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_3] Trial #802: GFLOPs: 615.9225. Time: 375.5120 us. Best GFLOPs: 805.6149
2024-04-29 08:36:48 [INFO] [task_scheduler.cc:131] [Task #26: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_3] Trial #803: GFLOPs: 549.0269. Time: 421.2659 us. Best GFLOPs: 805.6149
2024-04-29 08:36:48 [INFO] [task_scheduler.cc:131] [Task #26: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_3] Trial #804: GFLOPs: 606.6044. Time: 381.2803 us. Best GFLOPs: 805.6149
2024-04-29 08:36:48 [INFO] [task_scheduler.cc:131] [Task #26: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_3] Trial #805: GFLOPs: 551.9491. Time: 419.0355 us. Best GFLOPs: 805.6149
2024-04-29 08:36:48 [INFO] [task_scheduler.cc:121] [Task #26: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_3] Trial #806: Error in building:
LocalBuilder: Timeout, killed after 30.0 seconds
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(1), T.int64(7), T.int64(7), T.int64(512)), "float32"), p1: T.Buffer((T.int64(16), T.int64(1), T.int64(3), T.int64(3), T.int64(512), T.int64(32)), "float32"), p2: T.Buffer((T.int64(1), T.int64(16), T.int64(1), T.int64(1), T.int64(32)), "float32"), p3: T.Buffer((T.int64(1), T.int64(16), T.int64(7), T.int64(7), T.int64(32)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(16), T.int64(7), T.int64(7), T.int64(32)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        data_pad = T.alloc_buffer((T.int64(1), T.int64(1), T.int64(9), T.int64(9), T.int64(512)))
        conv2d_NCHWc = T.alloc_buffer((T.int64(1), T.int64(16), T.int64(7), T.int64(7), T.int64(32)))
        for n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_fused_fused in T.parallel(T.int64(112), annotations={"pragma_auto_unroll_max_step": 512, "pragma_unroll_explicit": 1}):
            for ax0, ax1, ax2, ax3, ax4 in T.grid(T.int64(1), T.int64(1), T.int64(9), T.int64(3), T.int64(512)):
                with T.block("data_pad"):
                    v_i0, v_i1, v_i2 = T.axis.remap("SSS", [ax0, ax1, ax2])
                    v_i3 = T.axis.spatial(T.int64(9), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_fused_fused % T.int64(14) // T.int64(2) + ax3)
                    v_i4 = T.axis.spatial(T.int64(512), ax4)
                    T.reads(p0[v_i0, v_i1, v_i2 - T.int64(1), v_i3 - T.int64(1), v_i4])
                    T.writes(data_pad[v_i0, v_i1, v_i2, v_i3, v_i4])
                    data_pad[v_i0, v_i1, v_i2, v_i3, v_i4] = T.if_then_else(T.int64(1) <= v_i2 and v_i2 < T.int64(8) and T.int64(1) <= v_i3 and v_i3 < T.int64(8), p0[v_i0, v_i1, v_i2 - T.int64(1), v_i3 - T.int64(1), v_i4], T.float32(0))
            for oh_1, ow_1, oc_block_1 in T.grid(T.int64(1), T.int64(1), T.int64(1)):
                for n_2_init, oc_chunk_2_init, oh_2_init, ow_2_init, oc_block_2_init, n_3_init, oc_chunk_3_init, oh_3_init, ow_3_init, oc_block_3_init in T.grid(T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(32), T.int64(1), T.int64(1), T.int64(7), T.int64(1), T.int64(1)):
                    with T.block("conv2d_NCHWc_init"):
                        v_n = T.axis.spatial(T.int64(1), n_2_init + n_3_init)
                        v_oc_chunk = T.axis.spatial(T.int64(16), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_fused_fused // T.int64(14) * T.int64(2) + n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_fused_fused % T.int64(2) + oc_chunk_2_init + oc_chunk_3_init)
                        v_oh = T.axis.spatial(T.int64(7), oh_1 * T.int64(7) + oh_2_init * T.int64(7) + oh_3_init)
                        v_ow = T.axis.spatial(T.int64(7), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_fused_fused % T.int64(14) // T.int64(2) + ow_1 + ow_2_init + ow_3_init)
                        v_oc_block = T.axis.spatial(T.int64(32), oc_block_1 * T.int64(32) + oc_block_2_init + oc_block_3_init)
                        T.reads()
                        T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                        T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                        conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = T.float32(0)
                for ic_0, kh_0, kw_0, n_2, oc_chunk_2, oh_2, ow_2, oc_block_2, ic_1, kh_1, kw_1, n_3, oc_chunk_3, oh_3, ow_3, oc_block_3 in T.grid(T.int64(128), T.int64(1), T.int64(3), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(32), T.int64(4), T.int64(3), T.int64(1), T.int64(1), T.int64(1), T.int64(7), T.int64(1), T.int64(1)):
                    with T.block("conv2d_NCHWc_update"):
                        v_n = T.axis.spatial(T.int64(1), n_2 + n_3)
                        v_oc_chunk = T.axis.spatial(T.int64(16), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_fused_fused // T.int64(14) * T.int64(2) + n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_fused_fused % T.int64(2) + oc_chunk_2 + oc_chunk_3)
                        v_oh = T.axis.spatial(T.int64(7), oh_1 * T.int64(7) + oh_2 * T.int64(7) + oh_3)
                        v_ow = T.axis.spatial(T.int64(7), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_fused_fused % T.int64(14) // T.int64(2) + ow_1 + ow_2 + ow_3)
                        v_oc_block = T.axis.spatial(T.int64(32), oc_block_1 * T.int64(32) + oc_block_2 + oc_block_3)
                        v_ic = T.axis.reduce(T.int64(512), ic_0 * T.int64(4) + ic_1)
                        v_kh = T.axis.reduce(T.int64(3), kh_0 * T.int64(3) + kh_1)
                        v_kw = T.axis.reduce(T.int64(3), kw_0 + kw_1)
                        T.reads(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block], data_pad[v_n, v_ic // T.int64(512), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(512)], p1[v_oc_chunk, v_ic // T.int64(512), v_kh, v_kw, v_ic % T.int64(512), v_oc_block])
                        T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                        T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                        conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] + data_pad[v_n, v_ic // T.int64(512), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(512)] * p1[v_oc_chunk, v_ic // T.int64(512), v_kh, v_kw, v_ic % T.int64(512), v_oc_block]
                for ax0, ax1, ax2 in T.grid(T.int64(1), T.int64(1), T.int64(7)):
                    for ax3_ax4_fused in T.vectorized(T.int64(32)):
                        with T.block("T_relu"):
                            v_ax0 = T.axis.spatial(T.int64(1), ax0)
                            v_ax1 = T.axis.spatial(T.int64(16), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_fused_fused // T.int64(14) * T.int64(2) + n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_fused_fused % T.int64(2) + ax1)
                            v_ax2 = T.axis.spatial(T.int64(7), ax2)
                            v_ax3 = T.axis.spatial(T.int64(7), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_fused_fused % T.int64(14) // T.int64(2))
                            v_ax4 = T.axis.spatial(T.int64(32), ax3_ax4_fused)
                            T.reads(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4], p3[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                            T.writes(T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                            T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.max(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] + p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4] + p3[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], T.float32(0))
b0 = sch.get_block(name="data_pad", func_name="main")
b1 = sch.get_block(name="conv2d_NCHWc", func_name="main")
b2 = sch.get_block(name="T_add", func_name="main")
b3 = sch.get_block(name="T_add_1", func_name="main")
b4 = sch.get_block(name="root", func_name="main")
sch.compute_inline(block=b3)
sch.compute_inline(block=b2)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSRSRS")
l5, l6, l7, l8, l9, l10, l11, l12 = sch.get_loops(block=b1)
v13, v14, v15, v16 = sch.sample_perfect_tile(loop=l5, n=4, max_innermost_factor=64, decision=[1, 1, 1, 1])
l17, l18, l19, l20 = sch.split(loop=l5, factors=[v13, v14, v15, v16], preserve_unit_iters=True)
v21, v22, v23, v24 = sch.sample_perfect_tile(loop=l6, n=4, max_innermost_factor=64, decision=[8, 2, 1, 1])
l25, l26, l27, l28 = sch.split(loop=l6, factors=[v21, v22, v23, v24], preserve_unit_iters=True)
v29, v30, v31, v32 = sch.sample_perfect_tile(loop=l7, n=4, max_innermost_factor=64, decision=[1, 1, 1, 7])
l33, l34, l35, l36 = sch.split(loop=l7, factors=[v29, v30, v31, v32], preserve_unit_iters=True)
v37, v38, v39, v40 = sch.sample_perfect_tile(loop=l8, n=4, max_innermost_factor=64, decision=[7, 1, 1, 1])
l41, l42, l43, l44 = sch.split(loop=l8, factors=[v37, v38, v39, v40], preserve_unit_iters=True)
v45, v46, v47, v48 = sch.sample_perfect_tile(loop=l9, n=4, max_innermost_factor=64, decision=[1, 1, 32, 1])
l49, l50, l51, l52 = sch.split(loop=l9, factors=[v45, v46, v47, v48], preserve_unit_iters=True)
v53, v54 = sch.sample_perfect_tile(loop=l10, n=2, max_innermost_factor=64, decision=[128, 4])
l55, l56 = sch.split(loop=l10, factors=[v53, v54], preserve_unit_iters=True)
v57, v58 = sch.sample_perfect_tile(loop=l11, n=2, max_innermost_factor=64, decision=[1, 3])
l59, l60 = sch.split(loop=l11, factors=[v57, v58], preserve_unit_iters=True)
v61, v62 = sch.sample_perfect_tile(loop=l12, n=2, max_innermost_factor=64, decision=[3, 1])
l63, l64 = sch.split(loop=l12, factors=[v61, v62], preserve_unit_iters=True)
sch.reorder(l17, l25, l33, l41, l49, l18, l26, l34, l42, l50, l55, l59, l63, l19, l27, l35, l43, l51, l56, l60, l64, l20, l28, l36, l44, l52)
b65, = sch.get_consumers(block=b1)
sch.reverse_compute_at(block=b65, loop=l50, preserve_unit_loops=True, index=-1)
sch.annotate(block_or_loop=b4, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b4, ann_key="meta_schedule.vectorize", ann_val=64)
v66 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b4, ann_key="meta_schedule.unroll_explicit", ann_val=v66)
l67 = sch.sample_compute_location(block=b0, decision=6)
sch.compute_at(block=b0, loop=l67, preserve_unit_loops=True, index=-1)
sch.enter_postproc()
b68 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b68, ann_key="meta_schedule.parallel")
sch.unannotate(block_or_loop=b68, ann_key="meta_schedule.vectorize")
sch.unannotate(block_or_loop=b68, ann_key="meta_schedule.unroll_explicit")
b69, b70, b71 = sch.get_child_blocks(b68)
l72, l73, l74, l75, l76, l77, l78, l79, l80, l81, l82, l83 = sch.get_loops(block=b69)
l84 = sch.fuse(l72, l73, l74, l75, l76, l77, l78, preserve_unit_iters=True)
sch.parallel(loop=l84)
l85, l86, l87, l88, l89, l90, l91, l92, l93, l94, l95, l96, l97, l98, l99, l100, l101, l102, l103, l104 = sch.get_loops(block=b70)
l105 = sch.fuse(l85, preserve_unit_iters=True)
sch.parallel(loop=l105)
sch.annotate(block_or_loop=l105, ann_key="pragma_auto_unroll_max_step", ann_val=512)
sch.annotate(block_or_loop=l105, ann_key="pragma_unroll_explicit", ann_val=1)
l106, l107, l108, l109, l110, l111, l112, l113, l114 = sch.get_loops(block=b71)
l115 = sch.fuse(l113, l114, preserve_unit_iters=True)
sch.vectorize(loop=l115)
b116 = sch.get_block(name="conv2d_NCHWc", func_name="main")
l117, l118, l119, l120, l121, l122, l123, l124, l125, l126, l127, l128, l129, l130, l131, l132, l133, l134, l135, l136 = sch.get_loops(block=b116)
b137 = sch.decompose_reduction(block=b116, loop=l121)
2024-04-29 08:36:48 [INFO] [task_scheduler.cc:131] [Task #26: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_3] Trial #807: GFLOPs: 717.3857. Time: 322.4016 us. Best GFLOPs: 805.6149
2024-04-29 08:36:48 [INFO] [task_scheduler.cc:131] [Task #26: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_3] Trial #808: GFLOPs: 561.6663. Time: 411.7859 us. Best GFLOPs: 805.6149
2024-04-29 08:36:48 [INFO] [task_scheduler.cc:131] [Task #26: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_3] Trial #809: GFLOPs: 566.2025. Time: 408.4868 us. Best GFLOPs: 805.6149
2024-04-29 08:36:48 [INFO] [task_scheduler.cc:131] [Task #26: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_3] Trial #810: GFLOPs: 559.2270. Time: 413.5821 us. Best GFLOPs: 805.6149
2024-04-29 08:36:48 [INFO] [task_scheduler.cc:131] [Task #26: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_3] Trial #811: GFLOPs: 493.2063. Time: 468.9443 us. Best GFLOPs: 805.6149
2024-04-29 08:36:48 [INFO] [task_scheduler.cc:131] [Task #26: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_3] Trial #812: GFLOPs: 758.5150. Time: 304.9198 us. Best GFLOPs: 805.6149
2024-04-29 08:36:48 [INFO] [task_scheduler.cc:131] [Task #26: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_3] Trial #813: GFLOPs: 587.3751. Time: 393.7625 us. Best GFLOPs: 805.6149
2024-04-29 08:36:48 [INFO] [task_scheduler.cc:131] [Task #26: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_3] Trial #814: GFLOPs: 291.2656. Time: 794.0734 us. Best GFLOPs: 805.6149
2024-04-29 08:36:48 [INFO] [task_scheduler.cc:131] [Task #26: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_3] Trial #815: GFLOPs: 541.2652. Time: 427.3067 us. Best GFLOPs: 805.6149
2024-04-29 08:36:48 [INFO] [task_scheduler.cc:131] [Task #26: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_3] Trial #816: GFLOPs: 594.4949. Time: 389.0467 us. Best GFLOPs: 805.6149
2024-04-29 08:36:48 [INFO] [task_scheduler.cc:131] [Task #26: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_3] Trial #817: GFLOPs: 533.3056. Time: 433.6843 us. Best GFLOPs: 805.6149
2024-04-29 08:36:48 [INFO] [task_scheduler.cc:131] [Task #26: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_3] Trial #818: GFLOPs: 640.4752. Time: 361.1167 us. Best GFLOPs: 805.6149
2024-04-29 08:36:48 [INFO] [task_scheduler.cc:131] [Task #26: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_3] Trial #819: GFLOPs: 644.3691. Time: 358.9344 us. Best GFLOPs: 805.6149
2024-04-29 08:36:48 [INFO] [task_scheduler.cc:131] [Task #26: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_3] Trial #820: GFLOPs: 613.0906. Time: 377.2465 us. Best GFLOPs: 805.6149
2024-04-29 08:36:48 [INFO] [task_scheduler.cc:131] [Task #26: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_3] Trial #821: GFLOPs: 550.8792. Time: 419.8493 us. Best GFLOPs: 805.6149
2024-04-29 08:36:48 [INFO] [task_scheduler.cc:131] [Task #26: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_3] Trial #822: GFLOPs: 51.3944. Time: 4500.2201 us. Best GFLOPs: 805.6149
2024-04-29 08:36:48 [INFO] [task_scheduler.cc:131] [Task #26: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_3] Trial #823: GFLOPs: 100.5357. Time: 2300.5392 us. Best GFLOPs: 805.6149
2024-04-29 08:36:48 [INFO] [task_scheduler.cc:131] [Task #26: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_3] Trial #824: GFLOPs: 558.7753. Time: 413.9164 us. Best GFLOPs: 805.6149
2024-04-29 08:36:48 [INFO] [task_scheduler.cc:131] [Task #26: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_3] Trial #825: GFLOPs: 592.1343. Time: 390.5977 us. Best GFLOPs: 805.6149
2024-04-29 08:36:48 [INFO] [task_scheduler.cc:131] [Task #26: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_3] Trial #826: GFLOPs: 477.1439. Time: 484.7306 us. Best GFLOPs: 805.6149
2024-04-29 08:36:48 [INFO] [task_scheduler.cc:131] [Task #26: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_3] Trial #827: GFLOPs: 521.7358. Time: 443.3015 us. Best GFLOPs: 805.6149
2024-04-29 08:36:48 [INFO] [task_scheduler.cc:131] [Task #26: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_3] Trial #828: GFLOPs: 545.4121. Time: 424.0579 us. Best GFLOPs: 805.6149
2024-04-29 08:36:48 [INFO] [task_scheduler.cc:131] [Task #26: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_3] Trial #829: GFLOPs: 487.9573. Time: 473.9888 us. Best GFLOPs: 805.6149
2024-04-29 08:36:48 [INFO] [task_scheduler.cc:131] [Task #26: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_3] Trial #830: GFLOPs: 30.5777. Time: 7563.8782 us. Best GFLOPs: 805.6149
2024-04-29 08:36:48 [INFO] [task_scheduler.cc:131] [Task #26: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_3] Trial #831: GFLOPs: 0.7112. Time: 325185.9967 us. Best GFLOPs: 805.6149
2024-04-29 08:36:48 [INFO] [task_scheduler.cc:131] [Task #26: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_3] Trial #832: GFLOPs: 119.8829. Time: 1929.2682 us. Best GFLOPs: 805.6149
2024-04-29 09:01:33 [INFO] [evolutionary_search.cc:713] Generating candidates......
2024-04-29 09:01:34 [INFO] [evolutionary_search.cc:715] Picked top 102 candidate(s) from database
2024-04-29 09:01:38 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x36363d8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x4388aa8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x3310908)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x3246458)]: 0 failure(s)
2024-04-29 09:01:38 [INFO] [evolutionary_search.cc:723] Sampled 410 candidate(s)
2024-04-29 09:01:49 [INFO] [evolutionary_search.cc:621] Evolve iter #0 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x36363d8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x4388aa8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x3310908)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x3246458)]: 0 failure(s)
2024-04-29 09:02:00 [INFO] [evolutionary_search.cc:621] Evolve iter #1 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x36363d8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x4388aa8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x3310908)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x3246458)]: 0 failure(s)
2024-04-29 09:02:12 [INFO] [evolutionary_search.cc:621] Evolve iter #2 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x36363d8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x4388aa8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x3310908)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x3246458)]: 0 failure(s)
2024-04-29 09:02:23 [INFO] [evolutionary_search.cc:621] Evolve iter #3 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x36363d8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x4388aa8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x3310908)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x3246458)]: 0 failure(s)
2024-04-29 09:02:30 [INFO] [evolutionary_search.cc:649] Scores of the best 64 candidates:
[1 : 16]:	0.9627  0.9627  0.9416  0.9416  0.9171  0.9056  0.9034  0.9034  0.8929  0.8927  0.8862  0.8857  0.8857  0.8857  0.8857  0.8390
[17 : 32]:	0.8230  0.8033  0.7965  0.7922  0.7922  0.7911  0.7903  0.7870  0.7724  0.7661  0.7422  0.7393  0.7269  0.7246  0.7192  0.7177
[33 : 48]:	0.7119  0.7091  0.7072  0.6941  0.6941  0.6918  0.6875  0.6816  0.6816  0.6787  0.6763  0.6753  0.6740  0.6676  0.6624  0.6621
[49 : 64]:	0.6543  0.6527  0.6516  0.6497  0.6497  0.6497  0.6475  0.6454  0.6451  0.6451  0.6445  0.6438  0.6416  0.6392  0.6392  0.6391
2024-04-29 09:02:30 [INFO] [evolutionary_search.cc:727] Got 64 candidate(s) with evolutionary search
2024-04-29 09:02:31 [INFO] [evolutionary_search.cc:730] Sending 64 candidates(s) for measurement
2024-04-29 09:04:32 [INFO] [task_scheduler.cc:131] [Task #26: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_3] Trial #833: GFLOPs: 815.2950. Time: 283.6841 us. Best GFLOPs: 815.2950
2024-04-29 09:04:32 [INFO] [task_scheduler.cc:131] [Task #26: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_3] Trial #834: GFLOPs: 753.9211. Time: 306.7778 us. Best GFLOPs: 815.2950
2024-04-29 09:04:32 [INFO] [task_scheduler.cc:131] [Task #26: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_3] Trial #835: GFLOPs: 785.6420. Time: 294.3914 us. Best GFLOPs: 815.2950
2024-04-29 09:04:32 [INFO] [task_scheduler.cc:131] [Task #26: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_3] Trial #836: GFLOPs: 782.0728. Time: 295.7350 us. Best GFLOPs: 815.2950
2024-04-29 09:04:32 [INFO] [task_scheduler.cc:131] [Task #26: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_3] Trial #837: GFLOPs: 744.1053. Time: 310.8247 us. Best GFLOPs: 815.2950
2024-04-29 09:04:32 [INFO] [task_scheduler.cc:131] [Task #26: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_3] Trial #838: GFLOPs: 792.5071. Time: 291.8413 us. Best GFLOPs: 815.2950
2024-04-29 09:04:32 [INFO] [task_scheduler.cc:131] [Task #26: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_3] Trial #839: GFLOPs: 763.5754. Time: 302.8991 us. Best GFLOPs: 815.2950
2024-04-29 09:04:32 [INFO] [task_scheduler.cc:131] [Task #26: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_3] Trial #840: GFLOPs: 741.4597. Time: 311.9337 us. Best GFLOPs: 815.2950
2024-04-29 09:04:32 [INFO] [task_scheduler.cc:131] [Task #26: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_3] Trial #841: GFLOPs: 743.1609. Time: 311.2196 us. Best GFLOPs: 815.2950
2024-04-29 09:04:32 [INFO] [task_scheduler.cc:131] [Task #26: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_3] Trial #842: GFLOPs: 704.7189. Time: 328.1965 us. Best GFLOPs: 815.2950
2024-04-29 09:04:32 [INFO] [task_scheduler.cc:131] [Task #26: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_3] Trial #843: GFLOPs: 723.9857. Time: 319.4625 us. Best GFLOPs: 815.2950
2024-04-29 09:04:32 [INFO] [task_scheduler.cc:131] [Task #26: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_3] Trial #844: GFLOPs: 793.5845. Time: 291.4450 us. Best GFLOPs: 815.2950
2024-04-29 09:04:32 [INFO] [task_scheduler.cc:131] [Task #26: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_3] Trial #845: GFLOPs: 764.4371. Time: 302.5576 us. Best GFLOPs: 815.2950
2024-04-29 09:04:32 [INFO] [task_scheduler.cc:131] [Task #26: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_3] Trial #846: GFLOPs: 779.1813. Time: 296.8324 us. Best GFLOPs: 815.2950
2024-04-29 09:04:32 [INFO] [task_scheduler.cc:131] [Task #26: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_3] Trial #847: GFLOPs: 765.6316. Time: 302.0856 us. Best GFLOPs: 815.2950
2024-04-29 09:04:32 [INFO] [task_scheduler.cc:131] [Task #26: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_3] Trial #848: GFLOPs: 752.1974. Time: 307.4808 us. Best GFLOPs: 815.2950
2024-04-29 09:04:32 [INFO] [task_scheduler.cc:131] [Task #26: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_3] Trial #849: GFLOPs: 639.7141. Time: 361.5463 us. Best GFLOPs: 815.2950
2024-04-29 09:04:32 [INFO] [task_scheduler.cc:131] [Task #26: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_3] Trial #850: GFLOPs: 638.0383. Time: 362.4959 us. Best GFLOPs: 815.2950
2024-04-29 09:04:32 [INFO] [task_scheduler.cc:131] [Task #26: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_3] Trial #851: GFLOPs: 672.3855. Time: 343.9787 us. Best GFLOPs: 815.2950
2024-04-29 09:04:32 [INFO] [task_scheduler.cc:131] [Task #26: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_3] Trial #852: GFLOPs: 617.1051. Time: 374.7924 us. Best GFLOPs: 815.2950
2024-04-29 09:04:32 [INFO] [task_scheduler.cc:131] [Task #26: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_3] Trial #853: GFLOPs: 614.1117. Time: 376.6192 us. Best GFLOPs: 815.2950
2024-04-29 09:04:32 [INFO] [task_scheduler.cc:131] [Task #26: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_3] Trial #854: GFLOPs: 650.2285. Time: 355.7000 us. Best GFLOPs: 815.2950
2024-04-29 09:04:32 [INFO] [task_scheduler.cc:131] [Task #26: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_3] Trial #855: GFLOPs: 658.2008. Time: 351.3916 us. Best GFLOPs: 815.2950
2024-04-29 09:04:32 [INFO] [task_scheduler.cc:131] [Task #26: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_3] Trial #856: GFLOPs: 664.6530. Time: 347.9805 us. Best GFLOPs: 815.2950
2024-04-29 09:04:32 [INFO] [task_scheduler.cc:131] [Task #26: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_3] Trial #857: GFLOPs: 774.1740. Time: 298.7523 us. Best GFLOPs: 815.2950
2024-04-29 09:04:32 [INFO] [task_scheduler.cc:131] [Task #26: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_3] Trial #858: GFLOPs: 650.4885. Time: 355.5578 us. Best GFLOPs: 815.2950
2024-04-29 09:04:32 [INFO] [task_scheduler.cc:131] [Task #26: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_3] Trial #859: GFLOPs: 592.0229. Time: 390.6711 us. Best GFLOPs: 815.2950
2024-04-29 09:04:32 [INFO] [task_scheduler.cc:131] [Task #26: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_3] Trial #860: GFLOPs: 564.2694. Time: 409.8862 us. Best GFLOPs: 815.2950
2024-04-29 09:04:32 [INFO] [task_scheduler.cc:131] [Task #26: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_3] Trial #861: GFLOPs: 596.1564. Time: 387.9624 us. Best GFLOPs: 815.2950
2024-04-29 09:04:32 [INFO] [task_scheduler.cc:131] [Task #26: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_3] Trial #862: GFLOPs: 598.2157. Time: 386.6269 us. Best GFLOPs: 815.2950
2024-04-29 09:04:32 [INFO] [task_scheduler.cc:131] [Task #26: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_3] Trial #863: GFLOPs: 579.6438. Time: 399.0145 us. Best GFLOPs: 815.2950
2024-04-29 09:04:32 [INFO] [task_scheduler.cc:131] [Task #26: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_3] Trial #864: GFLOPs: 582.0061. Time: 397.3949 us. Best GFLOPs: 815.2950
2024-04-29 09:04:32 [INFO] [task_scheduler.cc:131] [Task #26: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_3] Trial #865: GFLOPs: 599.2470. Time: 385.9615 us. Best GFLOPs: 815.2950
2024-04-29 09:04:32 [INFO] [task_scheduler.cc:131] [Task #26: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_3] Trial #866: GFLOPs: 616.2685. Time: 375.3011 us. Best GFLOPs: 815.2950
2024-04-29 09:04:32 [INFO] [task_scheduler.cc:131] [Task #26: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_3] Trial #867: GFLOPs: 579.9321. Time: 398.8161 us. Best GFLOPs: 815.2950
2024-04-29 09:04:32 [INFO] [task_scheduler.cc:131] [Task #26: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_3] Trial #868: GFLOPs: 572.9695. Time: 403.6625 us. Best GFLOPs: 815.2950
2024-04-29 09:04:32 [INFO] [task_scheduler.cc:131] [Task #26: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_3] Trial #869: GFLOPs: 563.1191. Time: 410.7235 us. Best GFLOPs: 815.2950
2024-04-29 09:04:32 [INFO] [task_scheduler.cc:131] [Task #26: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_3] Trial #870: GFLOPs: 542.5262. Time: 426.3136 us. Best GFLOPs: 815.2950
2024-04-29 09:04:32 [INFO] [task_scheduler.cc:121] [Task #26: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_3] Trial #871: Error in building:
LocalBuilder: Timeout, killed after 30.0 seconds
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(1), T.int64(7), T.int64(7), T.int64(512)), "float32"), p1: T.Buffer((T.int64(16), T.int64(1), T.int64(3), T.int64(3), T.int64(512), T.int64(32)), "float32"), p2: T.Buffer((T.int64(1), T.int64(16), T.int64(1), T.int64(1), T.int64(32)), "float32"), p3: T.Buffer((T.int64(1), T.int64(16), T.int64(7), T.int64(7), T.int64(32)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(16), T.int64(7), T.int64(7), T.int64(32)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        data_pad = T.alloc_buffer((T.int64(1), T.int64(1), T.int64(9), T.int64(9), T.int64(512)))
        conv2d_NCHWc = T.alloc_buffer((T.int64(1), T.int64(16), T.int64(7), T.int64(7), T.int64(32)))
        for n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_fused_fused in T.parallel(T.int64(112), annotations={"pragma_auto_unroll_max_step": 512, "pragma_unroll_explicit": 1}):
            for ax0, ax1, ax2, ax3, ax4 in T.grid(T.int64(1), T.int64(1), T.int64(9), T.int64(3), T.int64(512)):
                with T.block("data_pad"):
                    v_i0, v_i1, v_i2 = T.axis.remap("SSS", [ax0, ax1, ax2])
                    v_i3 = T.axis.spatial(T.int64(9), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_fused_fused // T.int64(16) + ax3)
                    v_i4 = T.axis.spatial(T.int64(512), ax4)
                    T.reads(p0[v_i0, v_i1, v_i2 - T.int64(1), v_i3 - T.int64(1), v_i4])
                    T.writes(data_pad[v_i0, v_i1, v_i2, v_i3, v_i4])
                    data_pad[v_i0, v_i1, v_i2, v_i3, v_i4] = T.if_then_else(T.int64(1) <= v_i2 and v_i2 < T.int64(8) and T.int64(1) <= v_i3 and v_i3 < T.int64(8), p0[v_i0, v_i1, v_i2 - T.int64(1), v_i3 - T.int64(1), v_i4], T.float32(0))
            for oh_1, ow_1, oc_block_1 in T.grid(T.int64(1), T.int64(1), T.int64(1)):
                for n_2_init, oc_chunk_2_init, oh_2_init, ow_2_init, oc_block_2_init, n_3_init, oc_chunk_3_init, oh_3_init, ow_3_init, oc_block_3_init in T.grid(T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(32), T.int64(1), T.int64(1), T.int64(7), T.int64(1), T.int64(1)):
                    with T.block("conv2d_NCHWc_init"):
                        v_n = T.axis.spatial(T.int64(1), n_2_init + n_3_init)
                        v_oc_chunk = T.axis.spatial(T.int64(16), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_fused_fused % T.int64(16) + oc_chunk_2_init + oc_chunk_3_init)
                        v_oh = T.axis.spatial(T.int64(7), oh_1 * T.int64(7) + oh_2_init * T.int64(7) + oh_3_init)
                        v_ow = T.axis.spatial(T.int64(7), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_fused_fused // T.int64(16) + ow_1 + ow_2_init + ow_3_init)
                        v_oc_block = T.axis.spatial(T.int64(32), oc_block_1 * T.int64(32) + oc_block_2_init + oc_block_3_init)
                        T.reads()
                        T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                        T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                        conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = T.float32(0)
                for ic_0, kh_0, kw_0, n_2, oc_chunk_2, oh_2, ow_2, oc_block_2, ic_1, kh_1, kw_1, n_3, oc_chunk_3, oh_3, ow_3, oc_block_3 in T.grid(T.int64(512), T.int64(1), T.int64(3), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(32), T.int64(1), T.int64(3), T.int64(1), T.int64(1), T.int64(1), T.int64(7), T.int64(1), T.int64(1)):
                    with T.block("conv2d_NCHWc_update"):
                        v_n = T.axis.spatial(T.int64(1), n_2 + n_3)
                        v_oc_chunk = T.axis.spatial(T.int64(16), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_fused_fused % T.int64(16) + oc_chunk_2 + oc_chunk_3)
                        v_oh = T.axis.spatial(T.int64(7), oh_1 * T.int64(7) + oh_2 * T.int64(7) + oh_3)
                        v_ow = T.axis.spatial(T.int64(7), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_fused_fused // T.int64(16) + ow_1 + ow_2 + ow_3)
                        v_oc_block = T.axis.spatial(T.int64(32), oc_block_1 * T.int64(32) + oc_block_2 + oc_block_3)
                        v_ic = T.axis.reduce(T.int64(512), ic_0 + ic_1)
                        v_kh = T.axis.reduce(T.int64(3), kh_0 * T.int64(3) + kh_1)
                        v_kw = T.axis.reduce(T.int64(3), kw_0 + kw_1)
                        T.reads(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block], data_pad[v_n, v_ic // T.int64(512), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(512)], p1[v_oc_chunk, v_ic // T.int64(512), v_kh, v_kw, v_ic % T.int64(512), v_oc_block])
                        T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                        T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                        conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] + data_pad[v_n, v_ic // T.int64(512), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(512)] * p1[v_oc_chunk, v_ic // T.int64(512), v_kh, v_kw, v_ic % T.int64(512), v_oc_block]
                for ax0, ax1, ax2 in T.grid(T.int64(1), T.int64(1), T.int64(7)):
                    for ax3_ax4_fused in T.vectorized(T.int64(32)):
                        with T.block("T_relu"):
                            v_ax0 = T.axis.spatial(T.int64(1), ax0)
                            v_ax1 = T.axis.spatial(T.int64(16), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_fused_fused % T.int64(16) + ax1)
                            v_ax2 = T.axis.spatial(T.int64(7), ax2)
                            v_ax3 = T.axis.spatial(T.int64(7), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_fused_fused // T.int64(16))
                            v_ax4 = T.axis.spatial(T.int64(32), ax3_ax4_fused)
                            T.reads(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4], p3[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                            T.writes(T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                            T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.max(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] + p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4] + p3[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], T.float32(0))
b0 = sch.get_block(name="data_pad", func_name="main")
b1 = sch.get_block(name="conv2d_NCHWc", func_name="main")
b2 = sch.get_block(name="T_add", func_name="main")
b3 = sch.get_block(name="T_add_1", func_name="main")
b4 = sch.get_block(name="root", func_name="main")
sch.compute_inline(block=b3)
sch.compute_inline(block=b2)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSRSRS")
l5, l6, l7, l8, l9, l10, l11, l12 = sch.get_loops(block=b1)
v13, v14, v15, v16 = sch.sample_perfect_tile(loop=l5, n=4, max_innermost_factor=64, decision=[1, 1, 1, 1])
l17, l18, l19, l20 = sch.split(loop=l5, factors=[v13, v14, v15, v16], preserve_unit_iters=True)
v21, v22, v23, v24 = sch.sample_perfect_tile(loop=l6, n=4, max_innermost_factor=64, decision=[1, 16, 1, 1])
l25, l26, l27, l28 = sch.split(loop=l6, factors=[v21, v22, v23, v24], preserve_unit_iters=True)
v29, v30, v31, v32 = sch.sample_perfect_tile(loop=l7, n=4, max_innermost_factor=64, decision=[1, 1, 1, 7])
l33, l34, l35, l36 = sch.split(loop=l7, factors=[v29, v30, v31, v32], preserve_unit_iters=True)
v37, v38, v39, v40 = sch.sample_perfect_tile(loop=l8, n=4, max_innermost_factor=64, decision=[7, 1, 1, 1])
l41, l42, l43, l44 = sch.split(loop=l8, factors=[v37, v38, v39, v40], preserve_unit_iters=True)
v45, v46, v47, v48 = sch.sample_perfect_tile(loop=l9, n=4, max_innermost_factor=64, decision=[1, 1, 32, 1])
l49, l50, l51, l52 = sch.split(loop=l9, factors=[v45, v46, v47, v48], preserve_unit_iters=True)
v53, v54 = sch.sample_perfect_tile(loop=l10, n=2, max_innermost_factor=64, decision=[512, 1])
l55, l56 = sch.split(loop=l10, factors=[v53, v54], preserve_unit_iters=True)
v57, v58 = sch.sample_perfect_tile(loop=l11, n=2, max_innermost_factor=64, decision=[1, 3])
l59, l60 = sch.split(loop=l11, factors=[v57, v58], preserve_unit_iters=True)
v61, v62 = sch.sample_perfect_tile(loop=l12, n=2, max_innermost_factor=64, decision=[3, 1])
l63, l64 = sch.split(loop=l12, factors=[v61, v62], preserve_unit_iters=True)
sch.reorder(l17, l25, l33, l41, l49, l18, l26, l34, l42, l50, l55, l59, l63, l19, l27, l35, l43, l51, l56, l60, l64, l20, l28, l36, l44, l52)
b65, = sch.get_consumers(block=b1)
sch.reverse_compute_at(block=b65, loop=l50, preserve_unit_loops=True, index=-1)
sch.annotate(block_or_loop=b4, ann_key="meta_schedule.parallel", ann_val=7)
sch.annotate(block_or_loop=b4, ann_key="meta_schedule.vectorize", ann_val=64)
v66 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b4, ann_key="meta_schedule.unroll_explicit", ann_val=v66)
l67 = sch.sample_compute_location(block=b0, decision=6)
sch.compute_at(block=b0, loop=l67, preserve_unit_loops=True, index=-1)
sch.enter_postproc()
b68 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b68, ann_key="meta_schedule.parallel")
sch.unannotate(block_or_loop=b68, ann_key="meta_schedule.vectorize")
sch.unannotate(block_or_loop=b68, ann_key="meta_schedule.unroll_explicit")
b69, b70, b71 = sch.get_child_blocks(b68)
l72, l73, l74, l75, l76, l77, l78, l79, l80, l81, l82, l83 = sch.get_loops(block=b69)
l84 = sch.fuse(l72, l73, l74, l75, l76, l77, l78, preserve_unit_iters=True)
sch.parallel(loop=l84)
l85, l86, l87, l88, l89, l90, l91, l92, l93, l94, l95, l96, l97, l98, l99, l100, l101, l102, l103, l104 = sch.get_loops(block=b70)
l105 = sch.fuse(l85, preserve_unit_iters=True)
sch.parallel(loop=l105)
sch.annotate(block_or_loop=l105, ann_key="pragma_auto_unroll_max_step", ann_val=512)
sch.annotate(block_or_loop=l105, ann_key="pragma_unroll_explicit", ann_val=1)
l106, l107, l108, l109, l110, l111, l112, l113, l114 = sch.get_loops(block=b71)
l115 = sch.fuse(l113, l114, preserve_unit_iters=True)
sch.vectorize(loop=l115)
b116 = sch.get_block(name="conv2d_NCHWc", func_name="main")
l117, l118, l119, l120, l121, l122, l123, l124, l125, l126, l127, l128, l129, l130, l131, l132, l133, l134, l135, l136 = sch.get_loops(block=b116)
b137 = sch.decompose_reduction(block=b116, loop=l121)
2024-04-29 09:04:32 [INFO] [task_scheduler.cc:131] [Task #26: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_3] Trial #872: GFLOPs: 463.4765. Time: 499.0249 us. Best GFLOPs: 815.2950
2024-04-29 09:04:32 [INFO] [task_scheduler.cc:131] [Task #26: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_3] Trial #873: GFLOPs: 401.0079. Time: 576.7624 us. Best GFLOPs: 815.2950
2024-04-29 09:04:32 [INFO] [task_scheduler.cc:131] [Task #26: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_3] Trial #874: GFLOPs: 588.8281. Time: 392.7908 us. Best GFLOPs: 815.2950
2024-04-29 09:04:32 [INFO] [task_scheduler.cc:131] [Task #26: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_3] Trial #875: GFLOPs: 398.1501. Time: 580.9022 us. Best GFLOPs: 815.2950
2024-04-29 09:04:32 [INFO] [task_scheduler.cc:131] [Task #26: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_3] Trial #876: GFLOPs: 555.8890. Time: 416.0655 us. Best GFLOPs: 815.2950
2024-04-29 09:04:32 [INFO] [task_scheduler.cc:131] [Task #26: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_3] Trial #877: GFLOPs: 544.1622. Time: 425.0319 us. Best GFLOPs: 815.2950
2024-04-29 09:04:32 [INFO] [task_scheduler.cc:131] [Task #26: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_3] Trial #878: GFLOPs: 544.1284. Time: 425.0582 us. Best GFLOPs: 815.2950
2024-04-29 09:04:32 [INFO] [task_scheduler.cc:131] [Task #26: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_3] Trial #879: GFLOPs: 534.8086. Time: 432.4655 us. Best GFLOPs: 815.2950
2024-04-29 09:04:32 [INFO] [task_scheduler.cc:131] [Task #26: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_3] Trial #880: GFLOPs: 701.6943. Time: 329.6111 us. Best GFLOPs: 815.2950
2024-04-29 09:04:32 [INFO] [task_scheduler.cc:131] [Task #26: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_3] Trial #881: GFLOPs: 539.6286. Time: 428.6027 us. Best GFLOPs: 815.2950
2024-04-29 09:04:32 [INFO] [task_scheduler.cc:131] [Task #26: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_3] Trial #882: GFLOPs: 423.3493. Time: 546.3250 us. Best GFLOPs: 815.2950
2024-04-29 09:04:32 [INFO] [task_scheduler.cc:131] [Task #26: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_3] Trial #883: GFLOPs: 314.8046. Time: 734.6979 us. Best GFLOPs: 815.2950
2024-04-29 09:04:32 [INFO] [task_scheduler.cc:131] [Task #26: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_3] Trial #884: GFLOPs: 511.0977. Time: 452.5285 us. Best GFLOPs: 815.2950
2024-04-29 09:04:32 [INFO] [task_scheduler.cc:131] [Task #26: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_3] Trial #885: GFLOPs: 526.5321. Time: 439.2634 us. Best GFLOPs: 815.2950
2024-04-29 09:04:32 [INFO] [task_scheduler.cc:131] [Task #26: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_3] Trial #886: GFLOPs: 278.3649. Time: 830.8743 us. Best GFLOPs: 815.2950
2024-04-29 09:04:32 [INFO] [task_scheduler.cc:131] [Task #26: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_3] Trial #887: GFLOPs: 656.8119. Time: 352.1347 us. Best GFLOPs: 815.2950
2024-04-29 09:04:32 [INFO] [task_scheduler.cc:131] [Task #26: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_3] Trial #888: GFLOPs: 803.0308. Time: 288.0167 us. Best GFLOPs: 815.2950
2024-04-29 09:04:32 [INFO] [task_scheduler.cc:131] [Task #26: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_3] Trial #889: GFLOPs: 516.5261. Time: 447.7727 us. Best GFLOPs: 815.2950
2024-04-29 09:04:32 [INFO] [task_scheduler.cc:131] [Task #26: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_3] Trial #890: GFLOPs: 463.6686. Time: 498.8181 us. Best GFLOPs: 815.2950
2024-04-29 09:04:32 [INFO] [task_scheduler.cc:131] [Task #26: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_3] Trial #891: GFLOPs: 494.4542. Time: 467.7607 us. Best GFLOPs: 815.2950
2024-04-29 09:04:32 [INFO] [task_scheduler.cc:131] [Task #26: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_3] Trial #892: GFLOPs: 564.3230. Time: 409.8473 us. Best GFLOPs: 815.2950
2024-04-29 09:04:32 [INFO] [task_scheduler.cc:131] [Task #26: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_3] Trial #893: GFLOPs: 479.5987. Time: 482.2496 us. Best GFLOPs: 815.2950
2024-04-29 09:04:32 [INFO] [task_scheduler.cc:131] [Task #26: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_3] Trial #894: GFLOPs: 93.7148. Time: 2467.9808 us. Best GFLOPs: 815.2950
2024-04-29 09:04:32 [INFO] [task_scheduler.cc:131] [Task #26: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_3] Trial #895: GFLOPs: 2.7737. Time: 83385.9707 us. Best GFLOPs: 815.2950
2024-04-29 09:04:32 [INFO] [task_scheduler.cc:121] [Task #26: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_3] Trial #896: Error in building:
LocalBuilder: Timeout, killed after 30.0 seconds
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(1), T.int64(7), T.int64(7), T.int64(512)), "float32"), p1: T.Buffer((T.int64(16), T.int64(1), T.int64(3), T.int64(3), T.int64(512), T.int64(32)), "float32"), p2: T.Buffer((T.int64(1), T.int64(16), T.int64(1), T.int64(1), T.int64(32)), "float32"), p3: T.Buffer((T.int64(1), T.int64(16), T.int64(7), T.int64(7), T.int64(32)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(16), T.int64(7), T.int64(7), T.int64(32)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        data_pad = T.alloc_buffer((T.int64(1), T.int64(1), T.int64(9), T.int64(9), T.int64(512)))
        conv2d_NCHWc = T.alloc_buffer((T.int64(1), T.int64(16), T.int64(7), T.int64(7), T.int64(32)))
        for n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_fused_fused in T.parallel(T.int64(2), annotations={"pragma_auto_unroll_max_step": 512, "pragma_unroll_explicit": 1}):
            for n_1, oc_chunk_1, oh_1 in T.grid(T.int64(1), T.int64(2), T.int64(7)):
                for ax0, ax1, ax2, ax3, ax4 in T.grid(T.int64(1), T.int64(1), T.int64(3), T.int64(9), T.int64(512)):
                    with T.block("data_pad"):
                        v_i0, v_i1 = T.axis.remap("SS", [ax0, ax1])
                        v_i2 = T.axis.spatial(T.int64(9), oh_1 + ax2)
                        v_i3, v_i4 = T.axis.remap("SS", [ax3, ax4])
                        T.reads(p0[v_i0, v_i1, v_i2 - T.int64(1), v_i3 - T.int64(1), v_i4])
                        T.writes(data_pad[v_i0, v_i1, v_i2, v_i3, v_i4])
                        data_pad[v_i0, v_i1, v_i2, v_i3, v_i4] = T.if_then_else(T.int64(1) <= v_i2 and v_i2 < T.int64(8) and T.int64(1) <= v_i3 and v_i3 < T.int64(8), p0[v_i0, v_i1, v_i2 - T.int64(1), v_i3 - T.int64(1), v_i4], T.float32(0))
                for ow_1, oc_block_1 in T.grid(T.int64(1), T.int64(4)):
                    for n_2_init, oc_chunk_2_init, oh_2_init, ow_2_init, oc_block_2_init, n_3_init, oc_chunk_3_init, oh_3_init, ow_3_init, oc_block_3_init in T.grid(T.int64(1), T.int64(2), T.int64(1), T.int64(7), T.int64(4), T.int64(1), T.int64(4), T.int64(1), T.int64(1), T.int64(1)):
                        with T.block("conv2d_NCHWc_init"):
                            v_n = T.axis.spatial(T.int64(1), n_1 + n_2_init + n_3_init)
                            v_oc_chunk = T.axis.spatial(T.int64(16), oc_chunk_1 * T.int64(8) + oc_chunk_2_init * T.int64(4) + oc_chunk_3_init)
                            v_oh = T.axis.spatial(T.int64(7), oh_1 + oh_2_init + oh_3_init)
                            v_ow = T.axis.spatial(T.int64(7), ow_1 * T.int64(7) + ow_2_init + ow_3_init)
                            v_oc_block = T.axis.spatial(T.int64(32), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_fused_fused * T.int64(16) + oc_block_1 * T.int64(4) + oc_block_2_init + oc_block_3_init)
                            T.reads()
                            T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                            T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                            conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = T.float32(0)
                    for ic_0, kh_0, kw_0, n_2, oc_chunk_2, oh_2, ow_2, oc_block_2, ic_1, kh_1, kw_1, n_3, oc_chunk_3, oh_3, ow_3, oc_block_3 in T.grid(T.int64(256), T.int64(3), T.int64(3), T.int64(1), T.int64(2), T.int64(1), T.int64(7), T.int64(4), T.int64(2), T.int64(1), T.int64(1), T.int64(1), T.int64(4), T.int64(1), T.int64(1), T.int64(1)):
                        with T.block("conv2d_NCHWc_update"):
                            v_n = T.axis.spatial(T.int64(1), n_1 + n_2 + n_3)
                            v_oc_chunk = T.axis.spatial(T.int64(16), oc_chunk_1 * T.int64(8) + oc_chunk_2 * T.int64(4) + oc_chunk_3)
                            v_oh = T.axis.spatial(T.int64(7), oh_1 + oh_2 + oh_3)
                            v_ow = T.axis.spatial(T.int64(7), ow_1 * T.int64(7) + ow_2 + ow_3)
                            v_oc_block = T.axis.spatial(T.int64(32), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_fused_fused * T.int64(16) + oc_block_1 * T.int64(4) + oc_block_2 + oc_block_3)
                            v_ic = T.axis.reduce(T.int64(512), ic_0 * T.int64(2) + ic_1)
                            v_kh = T.axis.reduce(T.int64(3), kh_0 + kh_1)
                            v_kw = T.axis.reduce(T.int64(3), kw_0 + kw_1)
                            T.reads(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block], data_pad[v_n, v_ic // T.int64(512), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(512)], p1[v_oc_chunk, v_ic // T.int64(512), v_kh, v_kw, v_ic % T.int64(512), v_oc_block])
                            T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                            T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                            conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] + data_pad[v_n, v_ic // T.int64(512), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(512)] * p1[v_oc_chunk, v_ic // T.int64(512), v_kh, v_kw, v_ic % T.int64(512), v_oc_block]
            for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(16), T.int64(7), T.int64(7)):
                for ax4_fused in T.vectorized(T.int64(16)):
                    with T.block("T_relu"):
                        v_ax0, v_ax1, v_ax2, v_ax3 = T.axis.remap("SSSS", [ax0, ax1, ax2, ax3])
                        v_ax4 = T.axis.spatial(T.int64(32), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_fused_fused * T.int64(16) + ax4_fused)
                        T.reads(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4], p3[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                        T.writes(T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                        T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.max(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] + p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4] + p3[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], T.float32(0))
b0 = sch.get_block(name="data_pad", func_name="main")
b1 = sch.get_block(name="conv2d_NCHWc", func_name="main")
b2 = sch.get_block(name="T_add", func_name="main")
b3 = sch.get_block(name="T_add_1", func_name="main")
b4 = sch.get_block(name="root", func_name="main")
sch.compute_inline(block=b3)
sch.compute_inline(block=b2)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSRSRS")
l5, l6, l7, l8, l9, l10, l11, l12 = sch.get_loops(block=b1)
v13, v14, v15, v16 = sch.sample_perfect_tile(loop=l5, n=4, max_innermost_factor=64, decision=[1, 1, 1, 1])
l17, l18, l19, l20 = sch.split(loop=l5, factors=[v13, v14, v15, v16], preserve_unit_iters=True)
v21, v22, v23, v24 = sch.sample_perfect_tile(loop=l6, n=4, max_innermost_factor=64, decision=[1, 2, 2, 4])
l25, l26, l27, l28 = sch.split(loop=l6, factors=[v21, v22, v23, v24], preserve_unit_iters=True)
v29, v30, v31, v32 = sch.sample_perfect_tile(loop=l7, n=4, max_innermost_factor=64, decision=[1, 7, 1, 1])
l33, l34, l35, l36 = sch.split(loop=l7, factors=[v29, v30, v31, v32], preserve_unit_iters=True)
v37, v38, v39, v40 = sch.sample_perfect_tile(loop=l8, n=4, max_innermost_factor=64, decision=[1, 1, 7, 1])
l41, l42, l43, l44 = sch.split(loop=l8, factors=[v37, v38, v39, v40], preserve_unit_iters=True)
v45, v46, v47, v48 = sch.sample_perfect_tile(loop=l9, n=4, max_innermost_factor=64, decision=[2, 4, 4, 1])
l49, l50, l51, l52 = sch.split(loop=l9, factors=[v45, v46, v47, v48], preserve_unit_iters=True)
v53, v54 = sch.sample_perfect_tile(loop=l10, n=2, max_innermost_factor=64, decision=[256, 2])
l55, l56 = sch.split(loop=l10, factors=[v53, v54], preserve_unit_iters=True)
v57, v58 = sch.sample_perfect_tile(loop=l11, n=2, max_innermost_factor=64, decision=[3, 1])
l59, l60 = sch.split(loop=l11, factors=[v57, v58], preserve_unit_iters=True)
v61, v62 = sch.sample_perfect_tile(loop=l12, n=2, max_innermost_factor=64, decision=[3, 1])
l63, l64 = sch.split(loop=l12, factors=[v61, v62], preserve_unit_iters=True)
sch.reorder(l17, l25, l33, l41, l49, l18, l26, l34, l42, l50, l55, l59, l63, l19, l27, l35, l43, l51, l56, l60, l64, l20, l28, l36, l44, l52)
b65, = sch.get_consumers(block=b1)
sch.reverse_compute_at(block=b65, loop=l49, preserve_unit_loops=True, index=-1)
sch.annotate(block_or_loop=b4, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b4, ann_key="meta_schedule.vectorize", ann_val=64)
v66 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b4, ann_key="meta_schedule.unroll_explicit", ann_val=v66)
l67 = sch.sample_compute_location(block=b0, decision=7)
sch.compute_at(block=b0, loop=l67, preserve_unit_loops=True, index=-1)
sch.enter_postproc()
b68 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b68, ann_key="meta_schedule.parallel")
sch.unannotate(block_or_loop=b68, ann_key="meta_schedule.vectorize")
sch.unannotate(block_or_loop=b68, ann_key="meta_schedule.unroll_explicit")
b69, b70, b71 = sch.get_child_blocks(b68)
l72, l73, l74, l75, l76, l77, l78, l79, l80, l81, l82, l83, l84 = sch.get_loops(block=b69)
l85 = sch.fuse(l72, l73, l74, l75, l76, preserve_unit_iters=True)
sch.parallel(loop=l85)
l86, l87, l88, l89, l90, l91, l92, l93, l94, l95, l96, l97, l98, l99, l100, l101, l102, l103, l104, l105, l106, l107 = sch.get_loops(block=b70)
l108 = sch.fuse(l86, preserve_unit_iters=True)
sch.parallel(loop=l108)
sch.annotate(block_or_loop=l108, ann_key="pragma_auto_unroll_max_step", ann_val=512)
sch.annotate(block_or_loop=l108, ann_key="pragma_unroll_explicit", ann_val=1)
l109, l110, l111, l112, l113, l114 = sch.get_loops(block=b71)
l115 = sch.fuse(l114, preserve_unit_iters=True)
sch.vectorize(loop=l115)
b116 = sch.get_block(name="conv2d_NCHWc", func_name="main")
l117, l118, l119, l120, l121, l122, l123, l124, l125, l126, l127, l128, l129, l130, l131, l132, l133, l134, l135, l136, l137, l138 = sch.get_loops(block=b116)
b139 = sch.decompose_reduction(block=b116, loop=l123)
2024-04-29 09:36:27 [INFO] [evolutionary_search.cc:713] Generating candidates......
2024-04-29 09:36:28 [INFO] [evolutionary_search.cc:715] Picked top 102 candidate(s) from database
2024-04-29 09:36:32 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x36363d8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x4388aa8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x3310908)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x3246458)]: 0 failure(s)
2024-04-29 09:36:32 [INFO] [evolutionary_search.cc:723] Sampled 410 candidate(s)
2024-04-29 09:36:44 [INFO] [evolutionary_search.cc:621] Evolve iter #0 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x36363d8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x4388aa8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x3310908)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x3246458)]: 0 failure(s)
2024-04-29 09:36:55 [INFO] [evolutionary_search.cc:621] Evolve iter #1 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x36363d8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x4388aa8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x3310908)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x3246458)]: 0 failure(s)
2024-04-29 09:37:06 [INFO] [evolutionary_search.cc:621] Evolve iter #2 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x36363d8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x4388aa8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x3310908)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x3246458)]: 0 failure(s)
2024-04-29 09:37:18 [INFO] [evolutionary_search.cc:621] Evolve iter #3 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x36363d8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x4388aa8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x3310908)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x3246458)]: 0 failure(s)
2024-04-29 09:37:25 [INFO] [evolutionary_search.cc:649] Scores of the best 64 candidates:
[1 : 16]:	0.9253  0.9223  0.9223  0.9214  0.9055  0.8979  0.8899  0.8818  0.8818  0.8621  0.8621  0.8604  0.8587  0.8587  0.8587  0.8580
[17 : 32]:	0.8533  0.8408  0.8368  0.8368  0.8180  0.7834  0.7771  0.7752  0.7704  0.7650  0.7630  0.7594  0.7594  0.7570  0.7513  0.7264
[33 : 48]:	0.7183  0.7062  0.6980  0.6979  0.6971  0.6958  0.6941  0.6941  0.6839  0.6825  0.6784  0.6728  0.6708  0.6708  0.6701  0.6698
[49 : 64]:	0.6634  0.6630  0.6630  0.6615  0.6600  0.6581  0.6542  0.6534  0.6534  0.6497  0.6497  0.6486  0.6469  0.6344  0.6336  0.6330
2024-04-29 09:37:25 [INFO] [evolutionary_search.cc:727] Got 64 candidate(s) with evolutionary search
2024-04-29 09:37:25 [INFO] [evolutionary_search.cc:730] Sending 64 candidates(s) for measurement
2024-04-29 09:39:30 [INFO] [task_scheduler.cc:131] [Task #26: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_3] Trial #897: GFLOPs: 597.6195. Time: 387.0126 us. Best GFLOPs: 815.2950
2024-04-29 09:39:30 [INFO] [task_scheduler.cc:131] [Task #26: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_3] Trial #898: GFLOPs: 764.3329. Time: 302.5989 us. Best GFLOPs: 815.2950
2024-04-29 09:39:30 [INFO] [task_scheduler.cc:131] [Task #26: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_3] Trial #899: GFLOPs: 763.2073. Time: 303.0451 us. Best GFLOPs: 815.2950
2024-04-29 09:39:30 [INFO] [task_scheduler.cc:131] [Task #26: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_3] Trial #900: GFLOPs: 736.7047. Time: 313.9471 us. Best GFLOPs: 815.2950
2024-04-29 09:39:30 [INFO] [task_scheduler.cc:131] [Task #26: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_3] Trial #901: GFLOPs: 298.9334. Time: 773.7051 us. Best GFLOPs: 815.2950
2024-04-29 09:39:30 [INFO] [task_scheduler.cc:131] [Task #26: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_3] Trial #902: GFLOPs: 394.6506. Time: 586.0532 us. Best GFLOPs: 815.2950
2024-04-29 09:39:30 [INFO] [task_scheduler.cc:131] [Task #26: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_3] Trial #903: GFLOPs: 725.9410. Time: 318.6020 us. Best GFLOPs: 815.2950
2024-04-29 09:39:30 [INFO] [task_scheduler.cc:131] [Task #26: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_3] Trial #904: GFLOPs: 732.8286. Time: 315.6076 us. Best GFLOPs: 815.2950
2024-04-29 09:39:30 [INFO] [task_scheduler.cc:131] [Task #26: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_3] Trial #905: GFLOPs: 722.1032. Time: 320.2953 us. Best GFLOPs: 815.2950
2024-04-29 09:39:30 [INFO] [task_scheduler.cc:131] [Task #26: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_3] Trial #906: GFLOPs: 758.7714. Time: 304.8168 us. Best GFLOPs: 815.2950
2024-04-29 09:39:30 [INFO] [task_scheduler.cc:131] [Task #26: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_3] Trial #907: GFLOPs: 759.7919. Time: 304.4074 us. Best GFLOPs: 815.2950
2024-04-29 09:39:30 [INFO] [task_scheduler.cc:131] [Task #26: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_3] Trial #908: GFLOPs: 755.0189. Time: 306.3318 us. Best GFLOPs: 815.2950
2024-04-29 09:39:30 [INFO] [task_scheduler.cc:131] [Task #26: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_3] Trial #909: GFLOPs: 670.9930. Time: 344.6925 us. Best GFLOPs: 815.2950
2024-04-29 09:39:30 [INFO] [task_scheduler.cc:131] [Task #26: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_3] Trial #910: GFLOPs: 358.2619. Time: 645.5788 us. Best GFLOPs: 815.2950
2024-04-29 09:39:30 [INFO] [task_scheduler.cc:131] [Task #26: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_3] Trial #911: GFLOPs: 715.8570. Time: 323.0901 us. Best GFLOPs: 815.2950
2024-04-29 09:39:30 [INFO] [task_scheduler.cc:131] [Task #26: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_3] Trial #912: GFLOPs: 674.5045. Time: 342.8981 us. Best GFLOPs: 815.2950
2024-04-29 09:39:30 [INFO] [task_scheduler.cc:131] [Task #26: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_3] Trial #913: GFLOPs: 679.7242. Time: 340.2649 us. Best GFLOPs: 815.2950
2024-04-29 09:39:30 [INFO] [task_scheduler.cc:131] [Task #26: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_3] Trial #914: GFLOPs: 774.0886. Time: 298.7853 us. Best GFLOPs: 815.2950
2024-04-29 09:39:30 [INFO] [task_scheduler.cc:131] [Task #26: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_3] Trial #915: GFLOPs: 688.0386. Time: 336.1530 us. Best GFLOPs: 815.2950
2024-04-29 09:39:30 [INFO] [task_scheduler.cc:131] [Task #26: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_3] Trial #916: GFLOPs: 682.5944. Time: 338.8341 us. Best GFLOPs: 815.2950
2024-04-29 09:39:30 [INFO] [task_scheduler.cc:131] [Task #26: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_3] Trial #917: GFLOPs: 699.5868. Time: 330.6041 us. Best GFLOPs: 815.2950
2024-04-29 09:39:30 [INFO] [task_scheduler.cc:131] [Task #26: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_3] Trial #918: GFLOPs: 654.5661. Time: 353.3429 us. Best GFLOPs: 815.2950
2024-04-29 09:39:30 [INFO] [task_scheduler.cc:131] [Task #26: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_3] Trial #919: GFLOPs: 440.8264. Time: 524.6653 us. Best GFLOPs: 815.2950
2024-04-29 09:39:30 [INFO] [task_scheduler.cc:131] [Task #26: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_3] Trial #920: GFLOPs: 616.6475. Time: 375.0705 us. Best GFLOPs: 815.2950
2024-04-29 09:39:30 [INFO] [task_scheduler.cc:131] [Task #26: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_3] Trial #921: GFLOPs: 669.1577. Time: 345.6379 us. Best GFLOPs: 815.2950
2024-04-29 09:39:30 [INFO] [task_scheduler.cc:131] [Task #26: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_3] Trial #922: GFLOPs: 610.0279. Time: 379.1405 us. Best GFLOPs: 815.2950
2024-04-29 09:39:30 [INFO] [task_scheduler.cc:131] [Task #26: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_3] Trial #923: GFLOPs: 653.5904. Time: 353.8703 us. Best GFLOPs: 815.2950
2024-04-29 09:39:30 [INFO] [task_scheduler.cc:131] [Task #26: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_3] Trial #924: GFLOPs: 663.8482. Time: 348.4023 us. Best GFLOPs: 815.2950
2024-04-29 09:39:30 [INFO] [task_scheduler.cc:131] [Task #26: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_3] Trial #925: GFLOPs: 640.8298. Time: 360.9168 us. Best GFLOPs: 815.2950
2024-04-29 09:39:30 [INFO] [task_scheduler.cc:131] [Task #26: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_3] Trial #926: GFLOPs: 615.6169. Time: 375.6984 us. Best GFLOPs: 815.2950
2024-04-29 09:39:30 [INFO] [task_scheduler.cc:131] [Task #26: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_3] Trial #927: GFLOPs: 603.5744. Time: 383.1943 us. Best GFLOPs: 815.2950
2024-04-29 09:39:30 [INFO] [task_scheduler.cc:131] [Task #26: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_3] Trial #928: GFLOPs: 578.4514. Time: 399.8370 us. Best GFLOPs: 815.2950
2024-04-29 09:39:30 [INFO] [task_scheduler.cc:131] [Task #26: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_3] Trial #929: GFLOPs: 614.8189. Time: 376.1860 us. Best GFLOPs: 815.2950
2024-04-29 09:39:30 [INFO] [task_scheduler.cc:131] [Task #26: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_3] Trial #930: GFLOPs: 603.9473. Time: 382.9577 us. Best GFLOPs: 815.2950
2024-04-29 09:39:30 [INFO] [task_scheduler.cc:131] [Task #26: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_3] Trial #931: GFLOPs: 566.1133. Time: 408.5512 us. Best GFLOPs: 815.2950
2024-04-29 09:39:30 [INFO] [task_scheduler.cc:121] [Task #26: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_3] Trial #932: Error in building:
LocalBuilder: Timeout, killed after 30.0 seconds
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(1), T.int64(7), T.int64(7), T.int64(512)), "float32"), p1: T.Buffer((T.int64(16), T.int64(1), T.int64(3), T.int64(3), T.int64(512), T.int64(32)), "float32"), p2: T.Buffer((T.int64(1), T.int64(16), T.int64(1), T.int64(1), T.int64(32)), "float32"), p3: T.Buffer((T.int64(1), T.int64(16), T.int64(7), T.int64(7), T.int64(32)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(16), T.int64(7), T.int64(7), T.int64(32)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        data_pad = T.alloc_buffer((T.int64(1), T.int64(1), T.int64(9), T.int64(9), T.int64(512)))
        conv2d_NCHWc = T.alloc_buffer((T.int64(1), T.int64(16), T.int64(7), T.int64(7), T.int64(32)))
        for n_0_oc_chunk_0_oh_0_ow_0_fused_fused in T.parallel(T.int64(112), annotations={"pragma_auto_unroll_max_step": 512, "pragma_unroll_explicit": 1}):
            for ax0, ax1, ax2, ax3, ax4 in T.grid(T.int64(1), T.int64(1), T.int64(9), T.int64(3), T.int64(512)):
                with T.block("data_pad"):
                    v_i0, v_i1, v_i2 = T.axis.remap("SSS", [ax0, ax1, ax2])
                    v_i3 = T.axis.spatial(T.int64(9), n_0_oc_chunk_0_oh_0_ow_0_fused_fused % T.int64(7) + ax3)
                    v_i4 = T.axis.spatial(T.int64(512), ax4)
                    T.reads(p0[v_i0, v_i1, v_i2 - T.int64(1), v_i3 - T.int64(1), v_i4])
                    T.writes(data_pad[v_i0, v_i1, v_i2, v_i3, v_i4])
                    data_pad[v_i0, v_i1, v_i2, v_i3, v_i4] = T.if_then_else(T.int64(1) <= v_i2 and v_i2 < T.int64(8) and T.int64(1) <= v_i3 and v_i3 < T.int64(8), p0[v_i0, v_i1, v_i2 - T.int64(1), v_i3 - T.int64(1), v_i4], T.float32(0))
            for oc_block_0, n_1, oc_chunk_1, oh_1, ow_1, oc_block_1 in T.grid(T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1)):
                for n_2_init, oc_chunk_2_init, oh_2_init, ow_2_init, oc_block_2_init, n_3_init, oc_chunk_3_init, oh_3_init, ow_3_init, oc_block_3_init in T.grid(T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(32), T.int64(1), T.int64(1), T.int64(7), T.int64(1), T.int64(1)):
                    with T.block("conv2d_NCHWc_init"):
                        v_n = T.axis.spatial(T.int64(1), n_1 + n_2_init + n_3_init)
                        v_oc_chunk = T.axis.spatial(T.int64(16), n_0_oc_chunk_0_oh_0_ow_0_fused_fused // T.int64(7) + oc_chunk_1 + oc_chunk_2_init + oc_chunk_3_init)
                        v_oh = T.axis.spatial(T.int64(7), oh_1 * T.int64(7) + oh_2_init * T.int64(7) + oh_3_init)
                        v_ow = T.axis.spatial(T.int64(7), n_0_oc_chunk_0_oh_0_ow_0_fused_fused % T.int64(7) + ow_1 + ow_2_init + ow_3_init)
                        v_oc_block = T.axis.spatial(T.int64(32), oc_block_0 * T.int64(32) + oc_block_1 * T.int64(32) + oc_block_2_init + oc_block_3_init)
                        T.reads()
                        T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                        T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                        conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = T.float32(0)
                for ic_0, kh_0, kw_0, n_2, oc_chunk_2, oh_2, ow_2, oc_block_2, ic_1, kh_1, kw_1, n_3, oc_chunk_3, oh_3, ow_3, oc_block_3 in T.grid(T.int64(256), T.int64(1), T.int64(3), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(32), T.int64(2), T.int64(3), T.int64(1), T.int64(1), T.int64(1), T.int64(7), T.int64(1), T.int64(1)):
                    with T.block("conv2d_NCHWc_update"):
                        v_n = T.axis.spatial(T.int64(1), n_1 + n_2 + n_3)
                        v_oc_chunk = T.axis.spatial(T.int64(16), n_0_oc_chunk_0_oh_0_ow_0_fused_fused // T.int64(7) + oc_chunk_1 + oc_chunk_2 + oc_chunk_3)
                        v_oh = T.axis.spatial(T.int64(7), oh_1 * T.int64(7) + oh_2 * T.int64(7) + oh_3)
                        v_ow = T.axis.spatial(T.int64(7), n_0_oc_chunk_0_oh_0_ow_0_fused_fused % T.int64(7) + ow_1 + ow_2 + ow_3)
                        v_oc_block = T.axis.spatial(T.int64(32), oc_block_0 * T.int64(32) + oc_block_1 * T.int64(32) + oc_block_2 + oc_block_3)
                        v_ic = T.axis.reduce(T.int64(512), ic_0 * T.int64(2) + ic_1)
                        v_kh = T.axis.reduce(T.int64(3), kh_0 * T.int64(3) + kh_1)
                        v_kw = T.axis.reduce(T.int64(3), kw_0 + kw_1)
                        T.reads(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block], data_pad[v_n, v_ic // T.int64(512), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(512)], p1[v_oc_chunk, v_ic // T.int64(512), v_kh, v_kw, v_ic % T.int64(512), v_oc_block])
                        T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                        T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                        conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] + data_pad[v_n, v_ic // T.int64(512), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(512)] * p1[v_oc_chunk, v_ic // T.int64(512), v_kh, v_kw, v_ic % T.int64(512), v_oc_block]
                for ax0, ax1, ax2 in T.grid(T.int64(1), T.int64(1), T.int64(7)):
                    for ax3_ax4_fused in T.vectorized(T.int64(32)):
                        with T.block("T_relu"):
                            v_ax0 = T.axis.spatial(T.int64(1), ax0)
                            v_ax1 = T.axis.spatial(T.int64(16), n_0_oc_chunk_0_oh_0_ow_0_fused_fused // T.int64(7) + ax1)
                            v_ax2 = T.axis.spatial(T.int64(7), ax2)
                            v_ax3 = T.axis.spatial(T.int64(7), n_0_oc_chunk_0_oh_0_ow_0_fused_fused % T.int64(7))
                            v_ax4 = T.axis.spatial(T.int64(32), ax3_ax4_fused)
                            T.reads(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4], p3[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                            T.writes(T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                            T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.max(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] + p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4] + p3[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], T.float32(0))
b0 = sch.get_block(name="data_pad", func_name="main")
b1 = sch.get_block(name="conv2d_NCHWc", func_name="main")
b2 = sch.get_block(name="T_add", func_name="main")
b3 = sch.get_block(name="T_add_1", func_name="main")
b4 = sch.get_block(name="root", func_name="main")
sch.compute_inline(block=b3)
sch.compute_inline(block=b2)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSRSRS")
l5, l6, l7, l8, l9, l10, l11, l12 = sch.get_loops(block=b1)
v13, v14, v15, v16 = sch.sample_perfect_tile(loop=l5, n=4, max_innermost_factor=64, decision=[1, 1, 1, 1])
l17, l18, l19, l20 = sch.split(loop=l5, factors=[v13, v14, v15, v16], preserve_unit_iters=True)
v21, v22, v23, v24 = sch.sample_perfect_tile(loop=l6, n=4, max_innermost_factor=64, decision=[16, 1, 1, 1])
l25, l26, l27, l28 = sch.split(loop=l6, factors=[v21, v22, v23, v24], preserve_unit_iters=True)
v29, v30, v31, v32 = sch.sample_perfect_tile(loop=l7, n=4, max_innermost_factor=64, decision=[1, 1, 1, 7])
l33, l34, l35, l36 = sch.split(loop=l7, factors=[v29, v30, v31, v32], preserve_unit_iters=True)
v37, v38, v39, v40 = sch.sample_perfect_tile(loop=l8, n=4, max_innermost_factor=64, decision=[7, 1, 1, 1])
l41, l42, l43, l44 = sch.split(loop=l8, factors=[v37, v38, v39, v40], preserve_unit_iters=True)
v45, v46, v47, v48 = sch.sample_perfect_tile(loop=l9, n=4, max_innermost_factor=64, decision=[1, 1, 32, 1])
l49, l50, l51, l52 = sch.split(loop=l9, factors=[v45, v46, v47, v48], preserve_unit_iters=True)
v53, v54 = sch.sample_perfect_tile(loop=l10, n=2, max_innermost_factor=64, decision=[256, 2])
l55, l56 = sch.split(loop=l10, factors=[v53, v54], preserve_unit_iters=True)
v57, v58 = sch.sample_perfect_tile(loop=l11, n=2, max_innermost_factor=64, decision=[1, 3])
l59, l60 = sch.split(loop=l11, factors=[v57, v58], preserve_unit_iters=True)
v61, v62 = sch.sample_perfect_tile(loop=l12, n=2, max_innermost_factor=64, decision=[3, 1])
l63, l64 = sch.split(loop=l12, factors=[v61, v62], preserve_unit_iters=True)
sch.reorder(l17, l25, l33, l41, l49, l18, l26, l34, l42, l50, l55, l59, l63, l19, l27, l35, l43, l51, l56, l60, l64, l20, l28, l36, l44, l52)
b65, = sch.get_consumers(block=b1)
sch.reverse_compute_at(block=b65, loop=l50, preserve_unit_loops=True, index=-1)
sch.annotate(block_or_loop=b4, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b4, ann_key="meta_schedule.vectorize", ann_val=64)
v66 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b4, ann_key="meta_schedule.unroll_explicit", ann_val=v66)
l67 = sch.sample_compute_location(block=b0, decision=3)
sch.compute_at(block=b0, loop=l67, preserve_unit_loops=True, index=-1)
sch.enter_postproc()
b68 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b68, ann_key="meta_schedule.parallel")
sch.unannotate(block_or_loop=b68, ann_key="meta_schedule.vectorize")
sch.unannotate(block_or_loop=b68, ann_key="meta_schedule.unroll_explicit")
b69, b70, b71 = sch.get_child_blocks(b68)
l72, l73, l74, l75, l76, l77, l78, l79, l80 = sch.get_loops(block=b69)
l81 = sch.fuse(l72, l73, l74, l75, preserve_unit_iters=True)
sch.parallel(loop=l81)
l82, l83, l84, l85, l86, l87, l88, l89, l90, l91, l92, l93, l94, l95, l96, l97, l98, l99, l100, l101, l102, l103, l104 = sch.get_loops(block=b70)
l105 = sch.fuse(l82, preserve_unit_iters=True)
sch.parallel(loop=l105)
sch.annotate(block_or_loop=l105, ann_key="pragma_auto_unroll_max_step", ann_val=512)
sch.annotate(block_or_loop=l105, ann_key="pragma_unroll_explicit", ann_val=1)
l106, l107, l108, l109, l110, l111, l112, l113, l114, l115, l116, l117 = sch.get_loops(block=b71)
l118 = sch.fuse(l116, l117, preserve_unit_iters=True)
sch.vectorize(loop=l118)
b119 = sch.get_block(name="conv2d_NCHWc", func_name="main")
l120, l121, l122, l123, l124, l125, l126, l127, l128, l129, l130, l131, l132, l133, l134, l135, l136, l137, l138, l139, l140, l141, l142 = sch.get_loops(block=b119)
b143 = sch.decompose_reduction(block=b119, loop=l127)
2024-04-29 09:39:30 [INFO] [task_scheduler.cc:131] [Task #26: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_3] Trial #933: GFLOPs: 576.1521. Time: 401.4326 us. Best GFLOPs: 815.2950
2024-04-29 09:39:30 [INFO] [task_scheduler.cc:131] [Task #26: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_3] Trial #934: GFLOPs: 549.6295. Time: 420.8040 us. Best GFLOPs: 815.2950
2024-04-29 09:39:30 [INFO] [task_scheduler.cc:131] [Task #26: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_3] Trial #935: GFLOPs: 554.6540. Time: 416.9920 us. Best GFLOPs: 815.2950
2024-04-29 09:39:30 [INFO] [task_scheduler.cc:131] [Task #26: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_3] Trial #936: GFLOPs: 587.1407. Time: 393.9197 us. Best GFLOPs: 815.2950
2024-04-29 09:39:30 [INFO] [task_scheduler.cc:131] [Task #26: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_3] Trial #937: GFLOPs: 546.3652. Time: 423.3181 us. Best GFLOPs: 815.2950
2024-04-29 09:39:30 [INFO] [task_scheduler.cc:131] [Task #26: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_3] Trial #938: GFLOPs: 569.6251. Time: 406.0324 us. Best GFLOPs: 815.2950
2024-04-29 09:39:30 [INFO] [task_scheduler.cc:131] [Task #26: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_3] Trial #939: GFLOPs: 451.5713. Time: 512.1811 us. Best GFLOPs: 815.2950
2024-04-29 09:39:30 [INFO] [task_scheduler.cc:131] [Task #26: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_3] Trial #940: GFLOPs: 511.0636. Time: 452.5587 us. Best GFLOPs: 815.2950
2024-04-29 09:39:30 [INFO] [task_scheduler.cc:131] [Task #26: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_3] Trial #941: GFLOPs: 578.5386. Time: 399.7767 us. Best GFLOPs: 815.2950
2024-04-29 09:39:30 [INFO] [task_scheduler.cc:131] [Task #26: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_3] Trial #942: GFLOPs: 595.8261. Time: 388.1775 us. Best GFLOPs: 815.2950
2024-04-29 09:39:30 [INFO] [task_scheduler.cc:131] [Task #26: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_3] Trial #943: GFLOPs: 379.7581. Time: 609.0358 us. Best GFLOPs: 815.2950
2024-04-29 09:39:30 [INFO] [task_scheduler.cc:131] [Task #26: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_3] Trial #944: GFLOPs: 632.8417. Time: 365.4726 us. Best GFLOPs: 815.2950
2024-04-29 09:39:30 [INFO] [task_scheduler.cc:131] [Task #26: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_3] Trial #945: GFLOPs: 554.5977. Time: 417.0343 us. Best GFLOPs: 815.2950
2024-04-29 09:39:30 [INFO] [task_scheduler.cc:131] [Task #26: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_3] Trial #946: GFLOPs: 445.5754. Time: 519.0733 us. Best GFLOPs: 815.2950
2024-04-29 09:39:30 [INFO] [task_scheduler.cc:131] [Task #26: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_3] Trial #947: GFLOPs: 584.9327. Time: 395.4066 us. Best GFLOPs: 815.2950
2024-04-29 09:39:30 [INFO] [task_scheduler.cc:131] [Task #26: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_3] Trial #948: GFLOPs: 367.9365. Time: 628.6037 us. Best GFLOPs: 815.2950
2024-04-29 09:39:30 [INFO] [task_scheduler.cc:131] [Task #26: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_3] Trial #949: GFLOPs: 353.1818. Time: 654.8647 us. Best GFLOPs: 815.2950
2024-04-29 09:39:30 [INFO] [task_scheduler.cc:131] [Task #26: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_3] Trial #950: GFLOPs: 519.0197. Time: 445.6214 us. Best GFLOPs: 815.2950
2024-04-29 09:39:30 [INFO] [task_scheduler.cc:131] [Task #26: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_3] Trial #951: GFLOPs: 561.7653. Time: 411.7134 us. Best GFLOPs: 815.2950
2024-04-29 09:39:30 [INFO] [task_scheduler.cc:131] [Task #26: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_3] Trial #952: GFLOPs: 496.1120. Time: 466.1977 us. Best GFLOPs: 815.2950
2024-04-29 09:39:30 [INFO] [task_scheduler.cc:131] [Task #26: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_3] Trial #953: GFLOPs: 495.2677. Time: 466.9924 us. Best GFLOPs: 815.2950
2024-04-29 09:39:30 [INFO] [task_scheduler.cc:131] [Task #26: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_3] Trial #954: GFLOPs: 507.3584. Time: 455.8637 us. Best GFLOPs: 815.2950
2024-04-29 09:39:30 [INFO] [task_scheduler.cc:131] [Task #26: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_3] Trial #955: GFLOPs: 477.4088. Time: 484.4617 us. Best GFLOPs: 815.2950
2024-04-29 09:39:30 [INFO] [task_scheduler.cc:131] [Task #26: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_3] Trial #956: GFLOPs: 524.7755. Time: 440.7337 us. Best GFLOPs: 815.2950
2024-04-29 09:39:30 [INFO] [task_scheduler.cc:131] [Task #26: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_3] Trial #957: GFLOPs: 293.5225. Time: 787.9677 us. Best GFLOPs: 815.2950
2024-04-29 09:39:30 [INFO] [task_scheduler.cc:131] [Task #26: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_3] Trial #958: GFLOPs: 11.5501. Time: 20024.6532 us. Best GFLOPs: 815.2950
2024-04-29 09:39:30 [INFO] [task_scheduler.cc:131] [Task #26: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_3] Trial #959: GFLOPs: 4.4717. Time: 51721.7520 us. Best GFLOPs: 815.2950
2024-04-29 09:39:30 [INFO] [task_scheduler.cc:131] [Task #26: fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_3] Trial #960: GFLOPs: 24.0137. Time: 9631.4363 us. Best GFLOPs: 815.2950
