2024-04-29 17:02:24 [INFO] [task_scheduler.cc:160] Initializing Task #0: "fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu"
2024-04-29 17:02:24 [INFO] [task_scheduler.cc:35] 
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(3), T.int64(224), T.int64(224)), "float32"), p1: T.Buffer((T.int64(6), T.int64(6), T.int64(3), T.int64(64)), "float32"), p2: T.Buffer((T.int64(1), T.int64(64), T.int64(1), T.int64(1)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(64), T.int64(224), T.int64(224)), "float32")):
        T.func_attr({"layout_free_buffers": [1], "tir.noalias": T.bool(True)})
        # with T.block("root"):
        data_pad = T.alloc_buffer((T.int64(1), T.int64(3), T.int64(226), T.int64(226)))
        input_tile = T.alloc_buffer((T.int64(3), T.int64(3136), T.int64(6), T.int64(6)))
        B = T.alloc_buffer((T.int64(6), T.int64(6)))
        data_pack = T.alloc_buffer((T.int64(6), T.int64(6), T.int64(3), T.int64(3136)))
        bgemm = T.alloc_buffer((T.int64(6), T.int64(6), T.int64(64), T.int64(3136)))
        A = T.alloc_buffer((T.int64(6), T.int64(4)))
        inverse = T.alloc_buffer((T.int64(64), T.int64(3136), T.int64(4), T.int64(4)))
        conv2d_winograd = T.alloc_buffer((T.int64(1), T.int64(64), T.int64(224), T.int64(224)))
        T_add = T.alloc_buffer((T.int64(1), T.int64(64), T.int64(224), T.int64(224)))
        for i0, i1, i2, i3 in T.grid(T.int64(1), T.int64(3), T.int64(226), T.int64(226)):
            with T.block("data_pad"):
                v_i0, v_i1, v_i2, v_i3 = T.axis.remap("SSSS", [i0, i1, i2, i3])
                T.reads(p0[v_i0, v_i1, v_i2 - T.int64(1), v_i3 - T.int64(1)])
                T.writes(data_pad[v_i0, v_i1, v_i2, v_i3])
                data_pad[v_i0, v_i1, v_i2, v_i3] = T.if_then_else(T.int64(1) <= v_i2 and v_i2 < T.int64(225) and T.int64(1) <= v_i3 and v_i3 < T.int64(225), p0[v_i0, v_i1, v_i2 - T.int64(1), v_i3 - T.int64(1)], T.float32(0))
        for ci, p, eps, nu in T.grid(T.int64(3), T.int64(3136), T.int64(6), T.int64(6)):
            with T.block("input_tile"):
                v_ci, v_p, v_eps, v_nu = T.axis.remap("SSSS", [ci, p, eps, nu])
                T.reads(data_pad[v_p // T.int64(3136), v_ci, v_p % T.int64(3136) // T.int64(56) * T.int64(4) + v_eps, v_p % T.int64(56) * T.int64(4) + v_nu])
                T.writes(input_tile[v_ci, v_p, v_eps, v_nu])
                T.block_attr({"schedule_rule": "None"})
                input_tile[v_ci, v_p, v_eps, v_nu] = data_pad[v_p // T.int64(3136), v_ci, v_p % T.int64(3136) // T.int64(56) * T.int64(4) + v_eps, v_p % T.int64(56) * T.int64(4) + v_nu]
        for i, j in T.grid(T.int64(6), T.int64(6)):
            with T.block("B"):
                v_i, v_j = T.axis.remap("SS", [i, j])
                T.reads()
                T.writes(B[v_i, v_j])
                T.block_attr({"schedule_rule": "None"})
                B[v_i, v_j] = T.Select(v_i % T.int64(6) == T.int64(5) and v_j % T.int64(6) == T.int64(5), T.float32(1), T.Select(v_i % T.int64(6) == T.int64(5) and v_j % T.int64(6) == T.int64(4), T.float32(0), T.Select(v_i % T.int64(6) == T.int64(5) and v_j % T.int64(6) == T.int64(3), T.float32(0), T.Select(v_i % T.int64(6) == T.int64(5) and v_j % T.int64(6) == T.int64(2), T.float32(0), T.Select(v_i % T.int64(6) == T.int64(5) and v_j % T.int64(6) == T.int64(1), T.float32(0), T.Select(v_i % T.int64(6) == T.int64(5) and v_j % T.int64(6) == T.int64(0), T.float32(0), T.Select(v_i % T.int64(6) == T.int64(4) and v_j % T.int64(6) == T.int64(5), T.float32(1.5), T.Select(v_i % T.int64(6) == T.int64(4) and v_j % T.int64(6) == T.int64(4), T.float32(1), T.Select(v_i % T.int64(6) == T.int64(4) and v_j % T.int64(6) == T.int64(3), T.float32(1), T.Select(v_i % T.int64(6) == T.int64(4) and v_j % T.int64(6) == T.int64(2), T.float32(1), T.Select(v_i % T.int64(6) == T.int64(4) and v_j % T.int64(6) == T.int64(1), T.float32(1), T.Select(v_i % T.int64(6) == T.int64(4) and v_j % T.int64(6) == T.int64(0), T.float32(1), T.Select(v_i % T.int64(6) == T.int64(3) and v_j % T.int64(6) == T.int64(5), T.float32(-2), T.Select(v_i % T.int64(6) == T.int64(3) and v_j % T.int64(6) == T.int64(4), T.float32(-0.5), T.Select(v_i % T.int64(6) == T.int64(3) and v_j % T.int64(6) == T.int64(3), T.float32(2), T.Select(v_i % T.int64(6) == T.int64(3) and v_j % T.int64(6) == T.int64(2), T.float32(2.5), T.Select(v_i % T.int64(6) == T.int64(3) and v_j % T.int64(6) == T.int64(1), T.float32(0.5), T.Select(v_i % T.int64(6) == T.int64(3) and v_j % T.int64(6) == T.int64(0), T.float32(1.5), T.Select(v_i % T.int64(6) == T.int64(2) and v_j % T.int64(6) == T.int64(5), T.float32(-1.5), T.Select(v_i % T.int64(6) == T.int64(2) and v_j % T.int64(6) == T.int64(4), T.float32(-1), T.Select(v_i % T.int64(6) == T.int64(2) and v_j % T.int64(6) == T.int64(3), T.float32(-1), T.Select(v_i % T.int64(6) == T.int64(2) and v_j % T.int64(6) == T.int64(2), T.float32(0.5), T.Select(v_i % T.int64(6) == T.int64(2) and v_j % T.int64(6) == T.int64(1), T.float32(-2.5), T.Select(v_i % T.int64(6) == T.int64(2) and v_j % T.int64(6) == T.int64(0), T.float32(-2), T.Select(v_i % T.int64(6) == T.int64(1) and v_j % T.int64(6) == T.int64(5), T.float32(1), T.Select(v_i % T.int64(6) == T.int64(1) and v_j % T.int64(6) == T.int64(4), T.float32(0.5), T.Select(v_i % T.int64(6) == T.int64(1) and v_j % T.int64(6) == T.int64(3), T.float32(-2), T.Select(v_i % T.int64(6) == T.int64(1) and v_j % T.int64(6) == T.int64(2), T.float32(-1), T.Select(v_i % T.int64(6) == T.int64(1) and v_j % T.int64(6) == T.int64(1), T.float32(1), T.Select(v_i % T.int64(6) == T.int64(1) and v_j % T.int64(6) == T.int64(0), T.float32(-1.5), T.Select(v_i % T.int64(6) == T.int64(0) and v_j % T.int64(6) == T.int64(5), T.float32(0), T.Select(v_i % T.int64(6) == T.int64(0) and v_j % T.int64(6) == T.int64(4), T.float32(0), T.Select(v_i % T.int64(6) == T.int64(0) and v_j % T.int64(6) == T.int64(3), T.float32(0), T.Select(v_i % T.int64(6) == T.int64(0) and v_j % T.int64(6) == T.int64(2), T.float32(0), T.Select(v_i % T.int64(6) == T.int64(0) and v_j % T.int64(6) == T.int64(1), T.float32(0), T.Select(v_i % T.int64(6) == T.int64(0) and v_j % T.int64(6) == T.int64(0), T.float32(1), T.float32(0)))))))))))))))))))))))))))))))))))))
        for eps, nu, ci, p, r_a, r_b in T.grid(T.int64(6), T.int64(6), T.int64(3), T.int64(3136), T.int64(6), T.int64(6)):
            with T.block("data_pack"):
                v_eps, v_nu, v_ci, v_p, v_r_a, v_r_b = T.axis.remap("SSSSRR", [eps, nu, ci, p, r_a, r_b])
                T.reads(input_tile[v_ci, v_p, v_r_a, v_r_b], B[T.min(v_r_a, v_r_b):T.min(v_r_a, v_r_b) + (T.max(v_r_a, v_r_b) + T.int64(1) - T.min(v_r_a, v_r_b)), T.min(v_eps, v_nu):T.min(v_eps, v_nu) + (T.max(v_eps, v_nu) + T.int64(1) - T.min(v_eps, v_nu))])
                T.writes(data_pack[v_eps, v_nu, v_ci, v_p])
                T.block_attr({"schedule_rule": "conv2d_nchw_winograd_data_pack"})
                with T.init():
                    data_pack[v_eps, v_nu, v_ci, v_p] = T.float32(0)
                data_pack[v_eps, v_nu, v_ci, v_p] = data_pack[v_eps, v_nu, v_ci, v_p] + input_tile[v_ci, v_p, v_r_a, v_r_b] * B[v_r_a, v_eps] * B[v_r_b, v_nu]
        for eps, nu, co, p, ci in T.grid(T.int64(6), T.int64(6), T.int64(64), T.int64(3136), T.int64(3)):
            with T.block("bgemm"):
                v_eps, v_nu, v_co, v_p, v_ci = T.axis.remap("SSSSR", [eps, nu, co, p, ci])
                T.reads(data_pack[v_eps, v_nu, v_ci, v_p], p1[v_eps, v_nu, v_ci, v_co])
                T.writes(bgemm[v_eps, v_nu, v_co, v_p])
                with T.init():
                    bgemm[v_eps, v_nu, v_co, v_p] = T.float32(0)
                bgemm[v_eps, v_nu, v_co, v_p] = bgemm[v_eps, v_nu, v_co, v_p] + data_pack[v_eps, v_nu, v_ci, v_p] * p1[v_eps, v_nu, v_ci, v_co]
        for i, j in T.grid(T.int64(6), T.int64(4)):
            with T.block("A"):
                v_i, v_j = T.axis.remap("SS", [i, j])
                T.reads()
                T.writes(A[v_i, v_j])
                T.block_attr({"schedule_rule": "None"})
                A[v_i, v_j] = T.Select(v_i % T.int64(6) == T.int64(5) and v_j % T.int64(4) == T.int64(3), T.float32(1), T.Select(v_i % T.int64(6) == T.int64(5) and v_j % T.int64(4) == T.int64(2), T.float32(0), T.Select(v_i % T.int64(6) == T.int64(5) and v_j % T.int64(4) == T.int64(1), T.float32(0), T.Select(v_i % T.int64(6) == T.int64(5) and v_j % T.int64(4) == T.int64(0), T.float32(0), T.Select(v_i % T.int64(6) == T.int64(4) and v_j % T.int64(4) == T.int64(3), T.float32(-8), T.Select(v_i % T.int64(6) == T.int64(4) and v_j % T.int64(4) == T.int64(2), T.float32(4), T.Select(v_i % T.int64(6) == T.int64(4) and v_j % T.int64(4) == T.int64(1), T.float32(-2), T.Select(v_i % T.int64(6) == T.int64(4) and v_j % T.int64(4) == T.int64(0), T.float32(1), T.Select(v_i % T.int64(6) == T.int64(3) and v_j % T.int64(4) == T.int64(3), T.float32(0.125), T.Select(v_i % T.int64(6) == T.int64(3) and v_j % T.int64(4) == T.int64(2), T.float32(0.25), T.Select(v_i % T.int64(6) == T.int64(3) and v_j % T.int64(4) == T.int64(1), T.float32(0.5), T.Select(v_i % T.int64(6) == T.int64(3) and v_j % T.int64(4) == T.int64(0), T.float32(1), T.Select(v_i % T.int64(6) == T.int64(2) and v_j % T.int64(4) == T.int64(3), T.float32(1), T.Select(v_i % T.int64(6) == T.int64(2) and v_j % T.int64(4) == T.int64(2), T.float32(1), T.Select(v_i % T.int64(6) == T.int64(2) and v_j % T.int64(4) == T.int64(1), T.float32(1), T.Select(v_i % T.int64(6) == T.int64(2) and v_j % T.int64(4) == T.int64(0), T.float32(1), T.Select(v_i % T.int64(6) == T.int64(1) and v_j % T.int64(4) == T.int64(3), T.float32(-1), T.Select(v_i % T.int64(6) == T.int64(1) and v_j % T.int64(4) == T.int64(2), T.float32(1), T.Select(v_i % T.int64(6) == T.int64(1) and v_j % T.int64(4) == T.int64(1), T.float32(-1), T.Select(v_i % T.int64(6) == T.int64(1) and v_j % T.int64(4) == T.int64(0), T.float32(1), T.Select(v_i % T.int64(6) == T.int64(0) and v_j % T.int64(4) == T.int64(3), T.float32(0), T.Select(v_i % T.int64(6) == T.int64(0) and v_j % T.int64(4) == T.int64(2), T.float32(0), T.Select(v_i % T.int64(6) == T.int64(0) and v_j % T.int64(4) == T.int64(1), T.float32(0), T.Select(v_i % T.int64(6) == T.int64(0) and v_j % T.int64(4) == T.int64(0), T.float32(1), T.float32(0)))))))))))))))))))))))))
        for co, p, vh, vw, r_a, r_b in T.grid(T.int64(64), T.int64(3136), T.int64(4), T.int64(4), T.int64(6), T.int64(6)):
            with T.block("inverse"):
                v_co, v_p, v_vh, v_vw, v_r_a, v_r_b = T.axis.remap("SSSSRR", [co, p, vh, vw, r_a, r_b])
                T.reads(bgemm[v_r_a, v_r_b, v_co, v_p], A[T.min(v_r_a, v_r_b):T.min(v_r_a, v_r_b) + (T.max(v_r_a, v_r_b) + T.int64(1) - T.min(v_r_a, v_r_b)), T.min(v_vh, v_vw):T.min(v_vh, v_vw) + (T.max(v_vh, v_vw) + T.int64(1) - T.min(v_vh, v_vw))])
                T.writes(inverse[v_co, v_p, v_vh, v_vw])
                T.block_attr({"schedule_rule": "conv2d_nchw_winograd_inverse"})
                with T.init():
                    inverse[v_co, v_p, v_vh, v_vw] = T.float32(0)
                inverse[v_co, v_p, v_vh, v_vw] = inverse[v_co, v_p, v_vh, v_vw] + bgemm[v_r_a, v_r_b, v_co, v_p] * A[v_r_a, v_vh] * A[v_r_b, v_vw]
        for n, co, h, w in T.grid(T.int64(1), T.int64(64), T.int64(224), T.int64(224)):
            with T.block("conv2d_winograd"):
                v_n, v_co, v_h, v_w = T.axis.remap("SSSS", [n, co, h, w])
                T.reads(inverse[v_co, v_n * T.int64(3136) + v_h // T.int64(4) * T.int64(56) + v_w // T.int64(4), v_h % T.int64(4), v_w % T.int64(4)])
                T.writes(conv2d_winograd[v_n, v_co, v_h, v_w])
                conv2d_winograd[v_n, v_co, v_h, v_w] = inverse[v_co, v_n * T.int64(3136) + v_h // T.int64(4) * T.int64(56) + v_w // T.int64(4), v_h % T.int64(4), v_w % T.int64(4)]
        for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(64), T.int64(224), T.int64(224)):
            with T.block("T_add"):
                v_ax0, v_ax1, v_ax2, v_ax3 = T.axis.remap("SSSS", [ax0, ax1, ax2, ax3])
                T.reads(conv2d_winograd[v_ax0, v_ax1, v_ax2, v_ax3], p2[v_ax0, v_ax1, T.int64(0), T.int64(0)])
                T.writes(T_add[v_ax0, v_ax1, v_ax2, v_ax3])
                T_add[v_ax0, v_ax1, v_ax2, v_ax3] = conv2d_winograd[v_ax0, v_ax1, v_ax2, v_ax3] + p2[v_ax0, v_ax1, T.int64(0), T.int64(0)]
        for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(64), T.int64(224), T.int64(224)):
            with T.block("T_relu"):
                v_ax0, v_ax1, v_ax2, v_ax3 = T.axis.remap("SSSS", [ax0, ax1, ax2, ax3])
                T.reads(T_add[v_ax0, v_ax1, v_ax2, v_ax3])
                T.writes(T_relu[v_ax0, v_ax1, v_ax2, v_ax3])
                T_relu[v_ax0, v_ax1, v_ax2, v_ax3] = T.max(T_add[v_ax0, v_ax1, v_ax2, v_ax3], T.float32(0))
2024-04-29 17:02:24 [INFO] [task_scheduler.cc:164] Total 3 design space(s) generated
2024-04-29 17:02:24 [INFO] [task_scheduler.cc:170] Design space #0:
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(3), T.int64(224), T.int64(224)), "float32"), p1: T.Buffer((T.int64(6), T.int64(6), T.int64(3), T.int64(64)), "float32"), p2: T.Buffer((T.int64(1), T.int64(64), T.int64(1), T.int64(1)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(64), T.int64(224), T.int64(224)), "float32")):
        T.func_attr({"layout_free_buffers": [1], "tir.noalias": T.bool(True)})
        with T.block("root"):
            T.reads()
            T.writes()
            T.block_attr({"meta_schedule.unroll_explicit": 1024})
            input_tile_local = T.alloc_buffer((T.int64(3), T.int64(3136), T.int64(6), T.int64(6)), scope="local")
            data_pack = T.alloc_buffer((T.int64(6), T.int64(6), T.int64(3), T.int64(3136)))
            bgemm = T.alloc_buffer((T.int64(6), T.int64(6), T.int64(64), T.int64(3136)))
            inverse_local = T.alloc_buffer((T.int64(64), T.int64(3136), T.int64(4), T.int64(4)), scope="local")
            data_pack_local = T.alloc_buffer((T.int64(6), T.int64(6), T.int64(3), T.int64(3136)), scope="local")
            bgemm_local = T.alloc_buffer((T.int64(6), T.int64(6), T.int64(64), T.int64(3136)), scope="local")
            data_pack_shared = T.alloc_buffer((T.int64(6), T.int64(6), T.int64(3), T.int64(3136)), scope="shared")
            p1_shared = T.alloc_buffer((T.int64(6), T.int64(6), T.int64(3), T.int64(64)), scope="shared")
            for ci_p_fused_0 in T.thread_binding(T.int64(19), thread="blockIdx.x"):
                for ci_p_fused_1 in T.thread_binding(T.int64(512), thread="threadIdx.x"):
                    for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(1), T.int64(6), T.int64(6)):
                        with T.block("input_tile"):
                            v_ci = T.axis.spatial(T.int64(3), (ci_p_fused_0 * T.int64(512) + ci_p_fused_1) // T.int64(3136) + ax0)
                            v_p = T.axis.spatial(T.int64(3136), (ci_p_fused_0 * T.int64(512) + ci_p_fused_1) % T.int64(3136) + ax1)
                            v_eps, v_nu = T.axis.remap("SS", [ax2, ax3])
                            T.where(ci_p_fused_0 * T.int64(512) + ci_p_fused_1 < T.int64(9408))
                            T.reads(p0[v_p // T.int64(3136), v_ci, v_p % T.int64(3136) // T.int64(56) * T.int64(4) + v_eps - T.int64(1), v_p % T.int64(56) * T.int64(4) + v_nu - T.int64(1)])
                            T.writes(input_tile_local[v_ci, v_p, v_eps, v_nu])
                            T.block_attr({"schedule_rule": "None"})
                            input_tile_local[v_ci, v_p, v_eps, v_nu] = T.if_then_else(T.int64(1) <= v_p % T.int64(3136) // T.int64(56) * T.int64(4) + v_eps and v_p % T.int64(3136) // T.int64(56) * T.int64(4) + v_eps < T.int64(225) and T.int64(1) <= v_p % T.int64(56) * T.int64(4) + v_nu and v_p % T.int64(56) * T.int64(4) + v_nu < T.int64(225), p0[v_p // T.int64(3136), v_ci, v_p % T.int64(3136) // T.int64(56) * T.int64(4) + v_eps - T.int64(1), v_p % T.int64(56) * T.int64(4) + v_nu - T.int64(1)], T.float32(0))
                    for eps in T.unroll(T.int64(6)):
                        for nu in T.unroll(T.int64(6)):
                            for r_a in T.unroll(T.int64(6)):
                                for r_b in T.unroll(T.int64(6)):
                                    with T.block("data_pack"):
                                        v_eps, v_nu = T.axis.remap("SS", [eps, nu])
                                        v_ci = T.axis.spatial(T.int64(3), (ci_p_fused_0 * T.int64(512) + ci_p_fused_1) // T.int64(3136))
                                        v_p = T.axis.spatial(T.int64(3136), (ci_p_fused_0 * T.int64(512) + ci_p_fused_1) % T.int64(3136))
                                        v_r_a, v_r_b = T.axis.remap("RR", [r_a, r_b])
                                        T.where(ci_p_fused_0 * T.int64(512) + ci_p_fused_1 < T.int64(9408))
                                        T.reads(input_tile_local[v_ci, v_p, v_r_a, v_r_b])
                                        T.writes(data_pack_local[v_eps, v_nu, v_ci, v_p])
                                        T.block_attr({"schedule_rule": "conv2d_nchw_winograd_data_pack"})
                                        with T.init():
                                            data_pack_local[v_eps, v_nu, v_ci, v_p] = T.float32(0)
                                        data_pack_local[v_eps, v_nu, v_ci, v_p] = data_pack_local[v_eps, v_nu, v_ci, v_p] + input_tile_local[v_ci, v_p, v_r_a, v_r_b] * T.Select(v_r_a % T.int64(6) == T.int64(5) and v_eps % T.int64(6) == T.int64(5), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(5) and v_eps % T.int64(6) == T.int64(4), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(5) and v_eps % T.int64(6) == T.int64(3), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(5) and v_eps % T.int64(6) == T.int64(2), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(5) and v_eps % T.int64(6) == T.int64(1), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(5) and v_eps % T.int64(6) == T.int64(0), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(4) and v_eps % T.int64(6) == T.int64(5), T.float32(1.5), T.Select(v_r_a % T.int64(6) == T.int64(4) and v_eps % T.int64(6) == T.int64(4), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(4) and v_eps % T.int64(6) == T.int64(3), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(4) and v_eps % T.int64(6) == T.int64(2), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(4) and v_eps % T.int64(6) == T.int64(1), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(4) and v_eps % T.int64(6) == T.int64(0), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(3) and v_eps % T.int64(6) == T.int64(5), T.float32(-2), T.Select(v_r_a % T.int64(6) == T.int64(3) and v_eps % T.int64(6) == T.int64(4), T.float32(-0.5), T.Select(v_r_a % T.int64(6) == T.int64(3) and v_eps % T.int64(6) == T.int64(3), T.float32(2), T.Select(v_r_a % T.int64(6) == T.int64(3) and v_eps % T.int64(6) == T.int64(2), T.float32(2.5), T.Select(v_r_a % T.int64(6) == T.int64(3) and v_eps % T.int64(6) == T.int64(1), T.float32(0.5), T.Select(v_r_a % T.int64(6) == T.int64(3) and v_eps % T.int64(6) == T.int64(0), T.float32(1.5), T.Select(v_r_a % T.int64(6) == T.int64(2) and v_eps % T.int64(6) == T.int64(5), T.float32(-1.5), T.Select(v_r_a % T.int64(6) == T.int64(2) and v_eps % T.int64(6) == T.int64(4), T.float32(-1), T.Select(v_r_a % T.int64(6) == T.int64(2) and v_eps % T.int64(6) == T.int64(3), T.float32(-1), T.Select(v_r_a % T.int64(6) == T.int64(2) and v_eps % T.int64(6) == T.int64(2), T.float32(0.5), T.Select(v_r_a % T.int64(6) == T.int64(2) and v_eps % T.int64(6) == T.int64(1), T.float32(-2.5), T.Select(v_r_a % T.int64(6) == T.int64(2) and v_eps % T.int64(6) == T.int64(0), T.float32(-2), T.Select(v_r_a % T.int64(6) == T.int64(1) and v_eps % T.int64(6) == T.int64(5), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(1) and v_eps % T.int64(6) == T.int64(4), T.float32(0.5), T.Select(v_r_a % T.int64(6) == T.int64(1) and v_eps % T.int64(6) == T.int64(3), T.float32(-2), T.Select(v_r_a % T.int64(6) == T.int64(1) and v_eps % T.int64(6) == T.int64(2), T.float32(-1), T.Select(v_r_a % T.int64(6) == T.int64(1) and v_eps % T.int64(6) == T.int64(1), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(1) and v_eps % T.int64(6) == T.int64(0), T.float32(-1.5), T.Select(v_r_a % T.int64(6) == T.int64(0) and v_eps % T.int64(6) == T.int64(5), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(0) and v_eps % T.int64(6) == T.int64(4), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(0) and v_eps % T.int64(6) == T.int64(3), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(0) and v_eps % T.int64(6) == T.int64(2), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(0) and v_eps % T.int64(6) == T.int64(1), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(0) and v_eps % T.int64(6) == T.int64(0), T.float32(1), T.float32(0))))))))))))))))))))))))))))))))))))) * T.Select(v_r_b % T.int64(6) == T.int64(5) and v_nu % T.int64(6) == T.int64(5), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(5) and v_nu % T.int64(6) == T.int64(4), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(5) and v_nu % T.int64(6) == T.int64(3), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(5) and v_nu % T.int64(6) == T.int64(2), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(5) and v_nu % T.int64(6) == T.int64(1), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(5) and v_nu % T.int64(6) == T.int64(0), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(4) and v_nu % T.int64(6) == T.int64(5), T.float32(1.5), T.Select(v_r_b % T.int64(6) == T.int64(4) and v_nu % T.int64(6) == T.int64(4), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(4) and v_nu % T.int64(6) == T.int64(3), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(4) and v_nu % T.int64(6) == T.int64(2), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(4) and v_nu % T.int64(6) == T.int64(1), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(4) and v_nu % T.int64(6) == T.int64(0), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(3) and v_nu % T.int64(6) == T.int64(5), T.float32(-2), T.Select(v_r_b % T.int64(6) == T.int64(3) and v_nu % T.int64(6) == T.int64(4), T.float32(-0.5), T.Select(v_r_b % T.int64(6) == T.int64(3) and v_nu % T.int64(6) == T.int64(3), T.float32(2), T.Select(v_r_b % T.int64(6) == T.int64(3) and v_nu % T.int64(6) == T.int64(2), T.float32(2.5), T.Select(v_r_b % T.int64(6) == T.int64(3) and v_nu % T.int64(6) == T.int64(1), T.float32(0.5), T.Select(v_r_b % T.int64(6) == T.int64(3) and v_nu % T.int64(6) == T.int64(0), T.float32(1.5), T.Select(v_r_b % T.int64(6) == T.int64(2) and v_nu % T.int64(6) == T.int64(5), T.float32(-1.5), T.Select(v_r_b % T.int64(6) == T.int64(2) and v_nu % T.int64(6) == T.int64(4), T.float32(-1), T.Select(v_r_b % T.int64(6) == T.int64(2) and v_nu % T.int64(6) == T.int64(3), T.float32(-1), T.Select(v_r_b % T.int64(6) == T.int64(2) and v_nu % T.int64(6) == T.int64(2), T.float32(0.5), T.Select(v_r_b % T.int64(6) == T.int64(2) and v_nu % T.int64(6) == T.int64(1), T.float32(-2.5), T.Select(v_r_b % T.int64(6) == T.int64(2) and v_nu % T.int64(6) == T.int64(0), T.float32(-2), T.Select(v_r_b % T.int64(6) == T.int64(1) and v_nu % T.int64(6) == T.int64(5), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(1) and v_nu % T.int64(6) == T.int64(4), T.float32(0.5), T.Select(v_r_b % T.int64(6) == T.int64(1) and v_nu % T.int64(6) == T.int64(3), T.float32(-2), T.Select(v_r_b % T.int64(6) == T.int64(1) and v_nu % T.int64(6) == T.int64(2), T.float32(-1), T.Select(v_r_b % T.int64(6) == T.int64(1) and v_nu % T.int64(6) == T.int64(1), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(1) and v_nu % T.int64(6) == T.int64(0), T.float32(-1.5), T.Select(v_r_b % T.int64(6) == T.int64(0) and v_nu % T.int64(6) == T.int64(5), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(0) and v_nu % T.int64(6) == T.int64(4), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(0) and v_nu % T.int64(6) == T.int64(3), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(0) and v_nu % T.int64(6) == T.int64(2), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(0) and v_nu % T.int64(6) == T.int64(1), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(0) and v_nu % T.int64(6) == T.int64(0), T.float32(1), T.float32(0)))))))))))))))))))))))))))))))))))))
                    for ax0, ax1, ax2, ax3 in T.grid(T.int64(6), T.int64(6), T.int64(1), T.int64(1)):
                        with T.block("data_pack_local"):
                            v0, v1 = T.axis.remap("SS", [ax0, ax1])
                            v2 = T.axis.spatial(T.int64(3), (ci_p_fused_0 * T.int64(512) + ci_p_fused_1) // T.int64(3136) + ax2)
                            v3 = T.axis.spatial(T.int64(3136), (ci_p_fused_0 * T.int64(512) + ci_p_fused_1) % T.int64(3136) + ax3)
                            T.where(ci_p_fused_0 * T.int64(512) + ci_p_fused_1 < T.int64(9408))
                            T.reads(data_pack_local[v0, v1, v2, v3])
                            T.writes(data_pack[v0, v1, v2, v3])
                            data_pack[v0, v1, v2, v3] = data_pack_local[v0, v1, v2, v3]
            for eps_0_nu_0_co_0_p_0_fused in T.thread_binding(T.int64(1344), thread="blockIdx.x"):
                for eps_1_nu_1_co_1_p_1_fused in T.thread_binding(T.int64(16), thread="vthread.x"):
                    for eps_2_nu_2_co_2_p_2_fused in T.thread_binding(T.int64(2), thread="threadIdx.x"):
                        for ci_0 in range(T.int64(3)):
                            for ax0_ax1_ax2_ax3_fused in range(T.int64(84)):
                                with T.block("data_pack_shared"):
                                    v0 = T.axis.spatial(T.int64(6), eps_0_nu_0_co_0_p_0_fused // T.int64(448) * T.int64(2) + ax0_ax1_ax2_ax3_fused // T.int64(42))
                                    v1 = T.axis.spatial(T.int64(6), ax0_ax1_ax2_ax3_fused % T.int64(42) // T.int64(7))
                                    v2 = T.axis.spatial(T.int64(3), ci_0)
                                    v3 = T.axis.spatial(T.int64(3136), eps_0_nu_0_co_0_p_0_fused % T.int64(448) * T.int64(7) + ax0_ax1_ax2_ax3_fused % T.int64(7))
                                    T.reads(data_pack[v0, v1, v2, v3])
                                    T.writes(data_pack_shared[v0, v1, v2, v3])
                                    T.block_attr({"meta_schedule.cooperative_fetch": 2})
                                    data_pack_shared[v0, v1, v2, v3] = data_pack[v0, v1, v2, v3]
                            for ax0_ax1_ax2_ax3_fused in range(T.int64(768)):
                                with T.block("p1_shared"):
                                    v0 = T.axis.spatial(T.int64(6), eps_0_nu_0_co_0_p_0_fused // T.int64(448) * T.int64(2) + ax0_ax1_ax2_ax3_fused // T.int64(384))
                                    v1 = T.axis.spatial(T.int64(6), ax0_ax1_ax2_ax3_fused % T.int64(384) // T.int64(64))
                                    v2 = T.axis.spatial(T.int64(3), ci_0)
                                    v3 = T.axis.spatial(T.int64(64), ax0_ax1_ax2_ax3_fused % T.int64(64))
                                    T.reads(p1[v0, v1, v2, v3])
                                    T.writes(p1_shared[v0, v1, v2, v3])
                                    T.block_attr({"meta_schedule.cooperative_fetch": 2})
                                    p1_shared[v0, v1, v2, v3] = p1[v0, v1, v2, v3]
                            for ci_1, eps_3, nu_3, co_3, p_3, ci_2, eps_4, nu_4, co_4, p_4 in T.grid(T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(7), T.int64(1), T.int64(2), T.int64(3), T.int64(2), T.int64(1)):
                                with T.block("bgemm"):
                                    v_eps = T.axis.spatial(T.int64(6), eps_0_nu_0_co_0_p_0_fused // T.int64(448) * T.int64(2) + eps_3 * T.int64(2) + eps_4)
                                    v_nu = T.axis.spatial(T.int64(6), eps_2_nu_2_co_2_p_2_fused * T.int64(3) + nu_3 * T.int64(3) + nu_4)
                                    v_co = T.axis.spatial(T.int64(64), eps_1_nu_1_co_1_p_1_fused * T.int64(4) + co_3 * T.int64(2) + co_4)
                                    v_p = T.axis.spatial(T.int64(3136), eps_0_nu_0_co_0_p_0_fused % T.int64(448) * T.int64(7) + p_3 + p_4)
                                    v_ci = T.axis.reduce(T.int64(3), ci_0 + ci_1 + ci_2)
                                    T.reads(data_pack_shared[v_eps, v_nu, v_ci, v_p], p1_shared[v_eps, v_nu, v_ci, v_co])
                                    T.writes(bgemm_local[v_eps, v_nu, v_co, v_p])
                                    T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 32, "meta_schedule.tiling_structure": "SSSRRSRS"})
                                    with T.init():
                                        bgemm_local[v_eps, v_nu, v_co, v_p] = T.float32(0)
                                    bgemm_local[v_eps, v_nu, v_co, v_p] = bgemm_local[v_eps, v_nu, v_co, v_p] + data_pack_shared[v_eps, v_nu, v_ci, v_p] * p1_shared[v_eps, v_nu, v_ci, v_co]
                        for ax0, ax1, ax2, ax3 in T.grid(T.int64(2), T.int64(3), T.int64(4), T.int64(7)):
                            with T.block("bgemm_local"):
                                v0 = T.axis.spatial(T.int64(6), eps_0_nu_0_co_0_p_0_fused // T.int64(448) * T.int64(2) + ax0)
                                v1 = T.axis.spatial(T.int64(6), eps_2_nu_2_co_2_p_2_fused * T.int64(3) + ax1)
                                v2 = T.axis.spatial(T.int64(64), eps_1_nu_1_co_1_p_1_fused * T.int64(4) + ax2)
                                v3 = T.axis.spatial(T.int64(3136), eps_0_nu_0_co_0_p_0_fused % T.int64(448) * T.int64(7) + ax3)
                                T.reads(bgemm_local[v0, v1, v2, v3])
                                T.writes(bgemm[v0, v1, v2, v3])
                                bgemm[v0, v1, v2, v3] = bgemm_local[v0, v1, v2, v3]
            for n_co_h_0_w_0_fused_0 in T.thread_binding(T.int64(392), thread="blockIdx.x"):
                for n_co_h_0_w_0_fused_1 in T.thread_binding(T.int64(512), thread="threadIdx.x"):
                    for ax0, ax1 in T.grid(T.int64(1), T.int64(1)):
                        for ax2 in T.unroll(T.int64(4)):
                            for ax3 in T.unroll(T.int64(4)):
                                for ax4 in T.unroll(T.int64(6)):
                                    for ax5 in T.unroll(T.int64(6)):
                                        with T.block("inverse"):
                                            v_co = T.axis.spatial(T.int64(64), (n_co_h_0_w_0_fused_0 * T.int64(512) + n_co_h_0_w_0_fused_1) // T.int64(3136) + ax0)
                                            v_p = T.axis.spatial(T.int64(3136), (n_co_h_0_w_0_fused_0 * T.int64(512) + n_co_h_0_w_0_fused_1) % T.int64(3136) + ax1)
                                            v_vh, v_vw, v_r_a, v_r_b = T.axis.remap("SSRR", [ax2, ax3, ax4, ax5])
                                            T.reads(bgemm[v_r_a, v_r_b, v_co, v_p])
                                            T.writes(inverse_local[v_co, v_p, v_vh, v_vw])
                                            T.block_attr({"schedule_rule": "conv2d_nchw_winograd_inverse"})
                                            with T.init():
                                                inverse_local[v_co, v_p, v_vh, v_vw] = T.float32(0)
                                            inverse_local[v_co, v_p, v_vh, v_vw] = inverse_local[v_co, v_p, v_vh, v_vw] + bgemm[v_r_a, v_r_b, v_co, v_p] * T.Select(v_r_a % T.int64(6) == T.int64(5) and v_vh % T.int64(4) == T.int64(3), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(5) and v_vh % T.int64(4) == T.int64(2), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(5) and v_vh % T.int64(4) == T.int64(1), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(5) and v_vh % T.int64(4) == T.int64(0), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(4) and v_vh % T.int64(4) == T.int64(3), T.float32(-8), T.Select(v_r_a % T.int64(6) == T.int64(4) and v_vh % T.int64(4) == T.int64(2), T.float32(4), T.Select(v_r_a % T.int64(6) == T.int64(4) and v_vh % T.int64(4) == T.int64(1), T.float32(-2), T.Select(v_r_a % T.int64(6) == T.int64(4) and v_vh % T.int64(4) == T.int64(0), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(3) and v_vh % T.int64(4) == T.int64(3), T.float32(0.125), T.Select(v_r_a % T.int64(6) == T.int64(3) and v_vh % T.int64(4) == T.int64(2), T.float32(0.25), T.Select(v_r_a % T.int64(6) == T.int64(3) and v_vh % T.int64(4) == T.int64(1), T.float32(0.5), T.Select(v_r_a % T.int64(6) == T.int64(3) and v_vh % T.int64(4) == T.int64(0), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(2) and v_vh % T.int64(4) == T.int64(3), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(2) and v_vh % T.int64(4) == T.int64(2), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(2) and v_vh % T.int64(4) == T.int64(1), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(2) and v_vh % T.int64(4) == T.int64(0), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(1) and v_vh % T.int64(4) == T.int64(3), T.float32(-1), T.Select(v_r_a % T.int64(6) == T.int64(1) and v_vh % T.int64(4) == T.int64(2), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(1) and v_vh % T.int64(4) == T.int64(1), T.float32(-1), T.Select(v_r_a % T.int64(6) == T.int64(1) and v_vh % T.int64(4) == T.int64(0), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(0) and v_vh % T.int64(4) == T.int64(3), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(0) and v_vh % T.int64(4) == T.int64(2), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(0) and v_vh % T.int64(4) == T.int64(1), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(0) and v_vh % T.int64(4) == T.int64(0), T.float32(1), T.float32(0))))))))))))))))))))))))) * T.Select(v_r_b % T.int64(6) == T.int64(5) and v_vw % T.int64(4) == T.int64(3), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(5) and v_vw % T.int64(4) == T.int64(2), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(5) and v_vw % T.int64(4) == T.int64(1), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(5) and v_vw % T.int64(4) == T.int64(0), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(4) and v_vw % T.int64(4) == T.int64(3), T.float32(-8), T.Select(v_r_b % T.int64(6) == T.int64(4) and v_vw % T.int64(4) == T.int64(2), T.float32(4), T.Select(v_r_b % T.int64(6) == T.int64(4) and v_vw % T.int64(4) == T.int64(1), T.float32(-2), T.Select(v_r_b % T.int64(6) == T.int64(4) and v_vw % T.int64(4) == T.int64(0), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(3) and v_vw % T.int64(4) == T.int64(3), T.float32(0.125), T.Select(v_r_b % T.int64(6) == T.int64(3) and v_vw % T.int64(4) == T.int64(2), T.float32(0.25), T.Select(v_r_b % T.int64(6) == T.int64(3) and v_vw % T.int64(4) == T.int64(1), T.float32(0.5), T.Select(v_r_b % T.int64(6) == T.int64(3) and v_vw % T.int64(4) == T.int64(0), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(2) and v_vw % T.int64(4) == T.int64(3), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(2) and v_vw % T.int64(4) == T.int64(2), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(2) and v_vw % T.int64(4) == T.int64(1), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(2) and v_vw % T.int64(4) == T.int64(0), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(1) and v_vw % T.int64(4) == T.int64(3), T.float32(-1), T.Select(v_r_b % T.int64(6) == T.int64(1) and v_vw % T.int64(4) == T.int64(2), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(1) and v_vw % T.int64(4) == T.int64(1), T.float32(-1), T.Select(v_r_b % T.int64(6) == T.int64(1) and v_vw % T.int64(4) == T.int64(0), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(0) and v_vw % T.int64(4) == T.int64(3), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(0) and v_vw % T.int64(4) == T.int64(2), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(0) and v_vw % T.int64(4) == T.int64(1), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(0) and v_vw % T.int64(4) == T.int64(0), T.float32(1), T.float32(0)))))))))))))))))))))))))
                    for h_1, w_1 in T.grid(T.int64(4), T.int64(4)):
                        with T.block("conv2d_winograd"):
                            v_n = T.axis.spatial(T.int64(1), T.int64(0))
                            v_co = T.axis.spatial(T.int64(64), (n_co_h_0_w_0_fused_0 * T.int64(512) + n_co_h_0_w_0_fused_1) // T.int64(3136))
                            v_h = T.axis.spatial(T.int64(224), (n_co_h_0_w_0_fused_0 * T.int64(512) + n_co_h_0_w_0_fused_1) % T.int64(3136) // T.int64(56) * T.int64(4) + h_1)
                            v_w = T.axis.spatial(T.int64(224), (n_co_h_0_w_0_fused_0 * T.int64(512) + n_co_h_0_w_0_fused_1) % T.int64(56) * T.int64(4) + w_1)
                            T.reads(inverse_local[v_co, v_n * T.int64(3136) + v_h // T.int64(4) * T.int64(56) + v_w // T.int64(4), v_h % T.int64(4), v_w % T.int64(4)], p2[v_n, v_co, T.int64(0), T.int64(0)])
                            T.writes(T_relu[v_n, v_co, v_h, v_w])
                            T_relu[v_n, v_co, v_h, v_w] = T.max(inverse_local[v_co, v_n * T.int64(3136) + v_h // T.int64(4) * T.int64(56) + v_w // T.int64(4), v_h % T.int64(4), v_w % T.int64(4)] + p2[v_n, v_co, T.int64(0), T.int64(0)], T.float32(0))
b0 = sch.get_block(name="data_pack", func_name="main")
b1 = sch.get_block(name="bgemm", func_name="main")
b2 = sch.get_block(name="inverse", func_name="main")
b3 = sch.get_block(name="conv2d_winograd", func_name="main")
b4 = sch.get_block(name="T_add", func_name="main")
b5 = sch.get_block(name="T_relu", func_name="main")
b6 = sch.get_block(name="root", func_name="main")
b7, b8 = sch.get_producers(block=b2)
sch.compute_inline(block=b8)
b9, = sch.get_consumers(block=b2)
l10, l11, l12, l13 = sch.get_loops(block=b9)
l14, l15 = sch.split(loop=l12, factors=[None, 4], preserve_unit_iters=True)
l16, l17 = sch.split(loop=l13, factors=[None, 4], preserve_unit_iters=True)
sch.reorder(l14, l16, l15, l17)
sch.compute_at(block=b2, loop=l16, preserve_unit_loops=True, index=-1)
sch.set_scope(block=b2, buffer_index=0, storage_scope="local")
l18, l19, l20, l21, l22, l23, l24, l25, l26, l27 = sch.get_loops(block=b2)
sch.unroll(loop=l24)
sch.unroll(loop=l25)
sch.unroll(loop=l26)
sch.unroll(loop=l27)
b28, b29 = sch.get_producers(block=b0)
sch.compute_inline(block=b29)
b30, = sch.get_producers(block=b28)
l31, l32, l33, l34, l35, l36 = sch.get_loops(block=b0)
sch.reorder(l33, l34, l31, l32, l35, l36)
sch.unroll(loop=l31)
sch.unroll(loop=l32)
sch.unroll(loop=l35)
sch.unroll(loop=l36)
l37 = sch.fuse(l33, l34, preserve_unit_iters=True)
v38 = sch.sample_categorical(candidates=[32, 64, 128, 256, 512, 1024], probs=[0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666], decision=4)
l39, l40 = sch.split(loop=l37, factors=[None, v38], preserve_unit_iters=True)
sch.bind(loop=l39, thread_axis="blockIdx.x")
sch.bind(loop=l40, thread_axis="threadIdx.x")
b41 = sch.cache_write(block=b0, write_buffer_index=0, storage_scope="local")
sch.reverse_compute_at(block=b41, loop=l40, preserve_unit_loops=True, index=-1)
sch.compute_at(block=b28, loop=l40, preserve_unit_loops=True, index=-1)
sch.set_scope(block=b28, buffer_index=0, storage_scope="local")
sch.compute_inline(block=b30)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSSRRSRS")
l42, l43, l44, l45, l46 = sch.get_loops(block=b1)
v47, v48, v49, v50, v51 = sch.sample_perfect_tile(loop=l42, n=5, max_innermost_factor=64, decision=[3, 1, 1, 1, 2])
l52, l53, l54, l55, l56 = sch.split(loop=l42, factors=[v47, v48, v49, v50, v51], preserve_unit_iters=True)
v57, v58, v59, v60, v61 = sch.sample_perfect_tile(loop=l43, n=5, max_innermost_factor=64, decision=[1, 1, 2, 1, 3])
l62, l63, l64, l65, l66 = sch.split(loop=l43, factors=[v57, v58, v59, v60, v61], preserve_unit_iters=True)
v67, v68, v69, v70, v71 = sch.sample_perfect_tile(loop=l44, n=5, max_innermost_factor=64, decision=[1, 16, 1, 2, 2])
l72, l73, l74, l75, l76 = sch.split(loop=l44, factors=[v67, v68, v69, v70, v71], preserve_unit_iters=True)
v77, v78, v79, v80, v81 = sch.sample_perfect_tile(loop=l45, n=5, max_innermost_factor=64, decision=[448, 1, 1, 7, 1])
l82, l83, l84, l85, l86 = sch.split(loop=l45, factors=[v77, v78, v79, v80, v81], preserve_unit_iters=True)
v87, v88, v89 = sch.sample_perfect_tile(loop=l46, n=3, max_innermost_factor=64, decision=[3, 1, 1])
l90, l91, l92 = sch.split(loop=l46, factors=[v87, v88, v89], preserve_unit_iters=True)
sch.reorder(l52, l62, l72, l82, l53, l63, l73, l83, l54, l64, l74, l84, l90, l91, l55, l65, l75, l85, l92, l56, l66, l76, l86)
l93 = sch.fuse(l52, l62, l72, l82, preserve_unit_iters=True)
sch.bind(loop=l93, thread_axis="blockIdx.x")
l94 = sch.fuse(l53, l63, l73, l83, preserve_unit_iters=True)
sch.bind(loop=l94, thread_axis="vthread.x")
l95 = sch.fuse(l54, l64, l74, l84, preserve_unit_iters=True)
sch.bind(loop=l95, thread_axis="threadIdx.x")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_low_inclusive", ann_val=32)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_high_inclusive", ann_val=1024)
b96 = sch.cache_write(block=b1, write_buffer_index=0, storage_scope="local")
sch.reverse_compute_at(block=b96, loop=l95, preserve_unit_loops=True, index=-1)
b97 = sch.cache_read(block=b1, read_buffer_index=0, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b97, loop=l90, preserve_unit_loops=True, index=-1)
l98, l99, l100, l101, l102, l103, l104, l105 = sch.get_loops(block=b97)
l106 = sch.fuse(l102, l103, l104, l105, preserve_unit_iters=True)
v107 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=1)
sch.annotate(block_or_loop=b97, ann_key="meta_schedule.cooperative_fetch", ann_val=v107)
b108 = sch.cache_read(block=b1, read_buffer_index=1, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b108, loop=l90, preserve_unit_loops=True, index=-1)
l109, l110, l111, l112, l113, l114, l115, l116 = sch.get_loops(block=b108)
l117 = sch.fuse(l113, l114, l115, l116, preserve_unit_iters=True)
v118 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=1)
sch.annotate(block_or_loop=b108, ann_key="meta_schedule.cooperative_fetch", ann_val=v118)
sch.reverse_compute_inline(block=b5)
sch.reverse_compute_inline(block=b4)
v119 = sch.sample_categorical(candidates=[0, 16, 64, 512, 1024], probs=[0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001], decision=4)
sch.annotate(block_or_loop=b6, ann_key="meta_schedule.unroll_explicit", ann_val=v119)
l120, l121, l122, l123, l124, l125 = sch.get_loops(block=b3)
l126 = sch.fuse(l120, l121, l122, l123, preserve_unit_iters=True)
v127 = sch.sample_categorical(candidates=[32, 64, 128, 256, 512, 1024], probs=[0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666], decision=4)
l128, l129 = sch.split(loop=l126, factors=[None, v127], preserve_unit_iters=True)
sch.bind(loop=l128, thread_axis="blockIdx.x")
sch.bind(loop=l129, thread_axis="threadIdx.x")
2024-04-29 17:02:24 [INFO] [task_scheduler.cc:170] Design space #1:
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(3), T.int64(224), T.int64(224)), "float32"), p1: T.Buffer((T.int64(6), T.int64(6), T.int64(3), T.int64(64)), "float32"), p2: T.Buffer((T.int64(1), T.int64(64), T.int64(1), T.int64(1)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(64), T.int64(224), T.int64(224)), "float32")):
        T.func_attr({"layout_free_buffers": [1], "tir.noalias": T.bool(True)})
        with T.block("root"):
            T.reads()
            T.writes()
            T.block_attr({"meta_schedule.unroll_explicit": 64})
            input_tile_local = T.alloc_buffer((T.int64(3), T.int64(3136), T.int64(6), T.int64(6)), scope="local")
            data_pack = T.alloc_buffer((T.int64(6), T.int64(6), T.int64(3), T.int64(3136)))
            bgemm = T.alloc_buffer((T.int64(6), T.int64(6), T.int64(64), T.int64(3136)))
            inverse_local = T.alloc_buffer((T.int64(64), T.int64(3136), T.int64(4), T.int64(4)), scope="local")
            data_pack_local = T.alloc_buffer((T.int64(6), T.int64(6), T.int64(3), T.int64(3136)), scope="local")
            bgemm_local = T.alloc_buffer((T.int64(6), T.int64(6), T.int64(64), T.int64(3136)), scope="local")
            data_pack_shared = T.alloc_buffer((T.int64(6), T.int64(6), T.int64(3), T.int64(3136)), scope="shared")
            p1_shared = T.alloc_buffer((T.int64(6), T.int64(6), T.int64(3), T.int64(64)), scope="shared")
            for ci_p_fused_0 in T.thread_binding(T.int64(19), thread="blockIdx.x"):
                for ci_p_fused_1 in T.thread_binding(T.int64(512), thread="threadIdx.x"):
                    for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(1), T.int64(6), T.int64(6)):
                        with T.block("input_tile"):
                            v_ci = T.axis.spatial(T.int64(3), (ci_p_fused_0 * T.int64(512) + ci_p_fused_1) // T.int64(3136) + ax0)
                            v_p = T.axis.spatial(T.int64(3136), (ci_p_fused_0 * T.int64(512) + ci_p_fused_1) % T.int64(3136) + ax1)
                            v_eps, v_nu = T.axis.remap("SS", [ax2, ax3])
                            T.where(ci_p_fused_0 * T.int64(512) + ci_p_fused_1 < T.int64(9408))
                            T.reads(p0[v_p // T.int64(3136), v_ci, v_p % T.int64(3136) // T.int64(56) * T.int64(4) + v_eps - T.int64(1), v_p % T.int64(56) * T.int64(4) + v_nu - T.int64(1)])
                            T.writes(input_tile_local[v_ci, v_p, v_eps, v_nu])
                            T.block_attr({"schedule_rule": "None"})
                            input_tile_local[v_ci, v_p, v_eps, v_nu] = T.if_then_else(T.int64(1) <= v_p % T.int64(3136) // T.int64(56) * T.int64(4) + v_eps and v_p % T.int64(3136) // T.int64(56) * T.int64(4) + v_eps < T.int64(225) and T.int64(1) <= v_p % T.int64(56) * T.int64(4) + v_nu and v_p % T.int64(56) * T.int64(4) + v_nu < T.int64(225), p0[v_p // T.int64(3136), v_ci, v_p % T.int64(3136) // T.int64(56) * T.int64(4) + v_eps - T.int64(1), v_p % T.int64(56) * T.int64(4) + v_nu - T.int64(1)], T.float32(0))
                    for eps in T.unroll(T.int64(6)):
                        for nu in T.unroll(T.int64(6)):
                            for r_a in T.unroll(T.int64(6)):
                                for r_b in T.unroll(T.int64(6)):
                                    with T.block("data_pack"):
                                        v_eps, v_nu = T.axis.remap("SS", [eps, nu])
                                        v_ci = T.axis.spatial(T.int64(3), (ci_p_fused_0 * T.int64(512) + ci_p_fused_1) // T.int64(3136))
                                        v_p = T.axis.spatial(T.int64(3136), (ci_p_fused_0 * T.int64(512) + ci_p_fused_1) % T.int64(3136))
                                        v_r_a, v_r_b = T.axis.remap("RR", [r_a, r_b])
                                        T.where(ci_p_fused_0 * T.int64(512) + ci_p_fused_1 < T.int64(9408))
                                        T.reads(input_tile_local[v_ci, v_p, v_r_a, v_r_b])
                                        T.writes(data_pack_local[v_eps, v_nu, v_ci, v_p])
                                        T.block_attr({"schedule_rule": "conv2d_nchw_winograd_data_pack"})
                                        with T.init():
                                            data_pack_local[v_eps, v_nu, v_ci, v_p] = T.float32(0)
                                        data_pack_local[v_eps, v_nu, v_ci, v_p] = data_pack_local[v_eps, v_nu, v_ci, v_p] + input_tile_local[v_ci, v_p, v_r_a, v_r_b] * T.Select(v_r_a % T.int64(6) == T.int64(5) and v_eps % T.int64(6) == T.int64(5), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(5) and v_eps % T.int64(6) == T.int64(4), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(5) and v_eps % T.int64(6) == T.int64(3), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(5) and v_eps % T.int64(6) == T.int64(2), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(5) and v_eps % T.int64(6) == T.int64(1), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(5) and v_eps % T.int64(6) == T.int64(0), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(4) and v_eps % T.int64(6) == T.int64(5), T.float32(1.5), T.Select(v_r_a % T.int64(6) == T.int64(4) and v_eps % T.int64(6) == T.int64(4), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(4) and v_eps % T.int64(6) == T.int64(3), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(4) and v_eps % T.int64(6) == T.int64(2), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(4) and v_eps % T.int64(6) == T.int64(1), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(4) and v_eps % T.int64(6) == T.int64(0), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(3) and v_eps % T.int64(6) == T.int64(5), T.float32(-2), T.Select(v_r_a % T.int64(6) == T.int64(3) and v_eps % T.int64(6) == T.int64(4), T.float32(-0.5), T.Select(v_r_a % T.int64(6) == T.int64(3) and v_eps % T.int64(6) == T.int64(3), T.float32(2), T.Select(v_r_a % T.int64(6) == T.int64(3) and v_eps % T.int64(6) == T.int64(2), T.float32(2.5), T.Select(v_r_a % T.int64(6) == T.int64(3) and v_eps % T.int64(6) == T.int64(1), T.float32(0.5), T.Select(v_r_a % T.int64(6) == T.int64(3) and v_eps % T.int64(6) == T.int64(0), T.float32(1.5), T.Select(v_r_a % T.int64(6) == T.int64(2) and v_eps % T.int64(6) == T.int64(5), T.float32(-1.5), T.Select(v_r_a % T.int64(6) == T.int64(2) and v_eps % T.int64(6) == T.int64(4), T.float32(-1), T.Select(v_r_a % T.int64(6) == T.int64(2) and v_eps % T.int64(6) == T.int64(3), T.float32(-1), T.Select(v_r_a % T.int64(6) == T.int64(2) and v_eps % T.int64(6) == T.int64(2), T.float32(0.5), T.Select(v_r_a % T.int64(6) == T.int64(2) and v_eps % T.int64(6) == T.int64(1), T.float32(-2.5), T.Select(v_r_a % T.int64(6) == T.int64(2) and v_eps % T.int64(6) == T.int64(0), T.float32(-2), T.Select(v_r_a % T.int64(6) == T.int64(1) and v_eps % T.int64(6) == T.int64(5), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(1) and v_eps % T.int64(6) == T.int64(4), T.float32(0.5), T.Select(v_r_a % T.int64(6) == T.int64(1) and v_eps % T.int64(6) == T.int64(3), T.float32(-2), T.Select(v_r_a % T.int64(6) == T.int64(1) and v_eps % T.int64(6) == T.int64(2), T.float32(-1), T.Select(v_r_a % T.int64(6) == T.int64(1) and v_eps % T.int64(6) == T.int64(1), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(1) and v_eps % T.int64(6) == T.int64(0), T.float32(-1.5), T.Select(v_r_a % T.int64(6) == T.int64(0) and v_eps % T.int64(6) == T.int64(5), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(0) and v_eps % T.int64(6) == T.int64(4), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(0) and v_eps % T.int64(6) == T.int64(3), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(0) and v_eps % T.int64(6) == T.int64(2), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(0) and v_eps % T.int64(6) == T.int64(1), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(0) and v_eps % T.int64(6) == T.int64(0), T.float32(1), T.float32(0))))))))))))))))))))))))))))))))))))) * T.Select(v_r_b % T.int64(6) == T.int64(5) and v_nu % T.int64(6) == T.int64(5), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(5) and v_nu % T.int64(6) == T.int64(4), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(5) and v_nu % T.int64(6) == T.int64(3), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(5) and v_nu % T.int64(6) == T.int64(2), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(5) and v_nu % T.int64(6) == T.int64(1), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(5) and v_nu % T.int64(6) == T.int64(0), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(4) and v_nu % T.int64(6) == T.int64(5), T.float32(1.5), T.Select(v_r_b % T.int64(6) == T.int64(4) and v_nu % T.int64(6) == T.int64(4), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(4) and v_nu % T.int64(6) == T.int64(3), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(4) and v_nu % T.int64(6) == T.int64(2), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(4) and v_nu % T.int64(6) == T.int64(1), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(4) and v_nu % T.int64(6) == T.int64(0), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(3) and v_nu % T.int64(6) == T.int64(5), T.float32(-2), T.Select(v_r_b % T.int64(6) == T.int64(3) and v_nu % T.int64(6) == T.int64(4), T.float32(-0.5), T.Select(v_r_b % T.int64(6) == T.int64(3) and v_nu % T.int64(6) == T.int64(3), T.float32(2), T.Select(v_r_b % T.int64(6) == T.int64(3) and v_nu % T.int64(6) == T.int64(2), T.float32(2.5), T.Select(v_r_b % T.int64(6) == T.int64(3) and v_nu % T.int64(6) == T.int64(1), T.float32(0.5), T.Select(v_r_b % T.int64(6) == T.int64(3) and v_nu % T.int64(6) == T.int64(0), T.float32(1.5), T.Select(v_r_b % T.int64(6) == T.int64(2) and v_nu % T.int64(6) == T.int64(5), T.float32(-1.5), T.Select(v_r_b % T.int64(6) == T.int64(2) and v_nu % T.int64(6) == T.int64(4), T.float32(-1), T.Select(v_r_b % T.int64(6) == T.int64(2) and v_nu % T.int64(6) == T.int64(3), T.float32(-1), T.Select(v_r_b % T.int64(6) == T.int64(2) and v_nu % T.int64(6) == T.int64(2), T.float32(0.5), T.Select(v_r_b % T.int64(6) == T.int64(2) and v_nu % T.int64(6) == T.int64(1), T.float32(-2.5), T.Select(v_r_b % T.int64(6) == T.int64(2) and v_nu % T.int64(6) == T.int64(0), T.float32(-2), T.Select(v_r_b % T.int64(6) == T.int64(1) and v_nu % T.int64(6) == T.int64(5), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(1) and v_nu % T.int64(6) == T.int64(4), T.float32(0.5), T.Select(v_r_b % T.int64(6) == T.int64(1) and v_nu % T.int64(6) == T.int64(3), T.float32(-2), T.Select(v_r_b % T.int64(6) == T.int64(1) and v_nu % T.int64(6) == T.int64(2), T.float32(-1), T.Select(v_r_b % T.int64(6) == T.int64(1) and v_nu % T.int64(6) == T.int64(1), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(1) and v_nu % T.int64(6) == T.int64(0), T.float32(-1.5), T.Select(v_r_b % T.int64(6) == T.int64(0) and v_nu % T.int64(6) == T.int64(5), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(0) and v_nu % T.int64(6) == T.int64(4), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(0) and v_nu % T.int64(6) == T.int64(3), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(0) and v_nu % T.int64(6) == T.int64(2), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(0) and v_nu % T.int64(6) == T.int64(1), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(0) and v_nu % T.int64(6) == T.int64(0), T.float32(1), T.float32(0)))))))))))))))))))))))))))))))))))))
                    for ax0, ax1, ax2, ax3 in T.grid(T.int64(6), T.int64(6), T.int64(1), T.int64(1)):
                        with T.block("data_pack_local"):
                            v0, v1 = T.axis.remap("SS", [ax0, ax1])
                            v2 = T.axis.spatial(T.int64(3), (ci_p_fused_0 * T.int64(512) + ci_p_fused_1) // T.int64(3136) + ax2)
                            v3 = T.axis.spatial(T.int64(3136), (ci_p_fused_0 * T.int64(512) + ci_p_fused_1) % T.int64(3136) + ax3)
                            T.where(ci_p_fused_0 * T.int64(512) + ci_p_fused_1 < T.int64(9408))
                            T.reads(data_pack_local[v0, v1, v2, v3])
                            T.writes(data_pack[v0, v1, v2, v3])
                            data_pack[v0, v1, v2, v3] = data_pack_local[v0, v1, v2, v3]
            for eps_0_nu_0_co_0_p_0_fused in T.thread_binding(T.int64(1344), thread="blockIdx.x"):
                for eps_1_nu_1_co_1_p_1_fused in T.thread_binding(T.int64(16), thread="vthread.x"):
                    for eps_2_nu_2_co_2_p_2_fused in T.thread_binding(T.int64(2), thread="threadIdx.x"):
                        for ci_0_fused in T.serial(T.int64(3), annotations={"software_pipeline_async_stages": [0], "software_pipeline_order": [0, 1, 2], "software_pipeline_stage": [0, 0, 2]}):
                            for ax0_ax1_ax2_ax3_fused in range(T.int64(84)):
                                with T.block("data_pack_shared"):
                                    v0 = T.axis.spatial(T.int64(6), eps_0_nu_0_co_0_p_0_fused // T.int64(448) * T.int64(2) + ax0_ax1_ax2_ax3_fused // T.int64(42))
                                    v1 = T.axis.spatial(T.int64(6), ax0_ax1_ax2_ax3_fused % T.int64(42) // T.int64(7))
                                    v2 = T.axis.spatial(T.int64(3), ci_0_fused)
                                    v3 = T.axis.spatial(T.int64(3136), eps_0_nu_0_co_0_p_0_fused % T.int64(448) * T.int64(7) + ax0_ax1_ax2_ax3_fused % T.int64(7))
                                    T.reads(data_pack[v0, v1, v2, v3])
                                    T.writes(data_pack_shared[v0, v1, v2, v3])
                                    T.block_attr({"meta_schedule.cooperative_fetch": 2})
                                    data_pack_shared[v0, v1, v2, v3] = data_pack[v0, v1, v2, v3]
                            for ax0_ax1_ax2_ax3_fused in range(T.int64(768)):
                                with T.block("p1_shared"):
                                    v0 = T.axis.spatial(T.int64(6), eps_0_nu_0_co_0_p_0_fused // T.int64(448) * T.int64(2) + ax0_ax1_ax2_ax3_fused // T.int64(384))
                                    v1 = T.axis.spatial(T.int64(6), ax0_ax1_ax2_ax3_fused % T.int64(384) // T.int64(64))
                                    v2 = T.axis.spatial(T.int64(3), ci_0_fused)
                                    v3 = T.axis.spatial(T.int64(64), ax0_ax1_ax2_ax3_fused % T.int64(64))
                                    T.reads(p1[v0, v1, v2, v3])
                                    T.writes(p1_shared[v0, v1, v2, v3])
                                    T.block_attr({"meta_schedule.cooperative_fetch": 2})
                                    p1_shared[v0, v1, v2, v3] = p1[v0, v1, v2, v3]
                            for ci_1, eps_3, nu_3, co_3, p_3, ci_2, eps_4, nu_4, co_4, p_4 in T.grid(T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(7), T.int64(1), T.int64(2), T.int64(3), T.int64(2), T.int64(1)):
                                with T.block("bgemm"):
                                    v_eps = T.axis.spatial(T.int64(6), eps_0_nu_0_co_0_p_0_fused // T.int64(448) * T.int64(2) + eps_3 * T.int64(2) + eps_4)
                                    v_nu = T.axis.spatial(T.int64(6), eps_2_nu_2_co_2_p_2_fused * T.int64(3) + nu_3 * T.int64(3) + nu_4)
                                    v_co = T.axis.spatial(T.int64(64), eps_1_nu_1_co_1_p_1_fused * T.int64(4) + co_3 * T.int64(2) + co_4)
                                    v_p = T.axis.spatial(T.int64(3136), eps_0_nu_0_co_0_p_0_fused % T.int64(448) * T.int64(7) + p_3 + p_4)
                                    v_ci = T.axis.reduce(T.int64(3), ci_0_fused + ci_1 + ci_2)
                                    T.reads(data_pack_shared[v_eps, v_nu, v_ci, v_p], p1_shared[v_eps, v_nu, v_ci, v_co])
                                    T.writes(bgemm_local[v_eps, v_nu, v_co, v_p])
                                    T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 32, "meta_schedule.tiling_structure": "SSSRRSRS"})
                                    with T.init():
                                        bgemm_local[v_eps, v_nu, v_co, v_p] = T.float32(0)
                                    bgemm_local[v_eps, v_nu, v_co, v_p] = bgemm_local[v_eps, v_nu, v_co, v_p] + data_pack_shared[v_eps, v_nu, v_ci, v_p] * p1_shared[v_eps, v_nu, v_ci, v_co]
                        for ax0, ax1, ax2, ax3 in T.grid(T.int64(2), T.int64(3), T.int64(4), T.int64(7)):
                            with T.block("bgemm_local"):
                                v0 = T.axis.spatial(T.int64(6), eps_0_nu_0_co_0_p_0_fused // T.int64(448) * T.int64(2) + ax0)
                                v1 = T.axis.spatial(T.int64(6), eps_2_nu_2_co_2_p_2_fused * T.int64(3) + ax1)
                                v2 = T.axis.spatial(T.int64(64), eps_1_nu_1_co_1_p_1_fused * T.int64(4) + ax2)
                                v3 = T.axis.spatial(T.int64(3136), eps_0_nu_0_co_0_p_0_fused % T.int64(448) * T.int64(7) + ax3)
                                T.reads(bgemm_local[v0, v1, v2, v3])
                                T.writes(bgemm[v0, v1, v2, v3])
                                bgemm[v0, v1, v2, v3] = bgemm_local[v0, v1, v2, v3]
            for n_co_h_0_w_0_fused_0 in T.thread_binding(T.int64(1568), thread="blockIdx.x"):
                for n_co_h_0_w_0_fused_1 in T.thread_binding(T.int64(128), thread="threadIdx.x"):
                    for ax0, ax1 in T.grid(T.int64(1), T.int64(1)):
                        for ax2 in T.unroll(T.int64(4)):
                            for ax3 in T.unroll(T.int64(4)):
                                for ax4 in T.unroll(T.int64(6)):
                                    for ax5 in T.unroll(T.int64(6)):
                                        with T.block("inverse"):
                                            v_co = T.axis.spatial(T.int64(64), (n_co_h_0_w_0_fused_0 * T.int64(128) + n_co_h_0_w_0_fused_1) // T.int64(3136) + ax0)
                                            v_p = T.axis.spatial(T.int64(3136), (n_co_h_0_w_0_fused_0 * T.int64(128) + n_co_h_0_w_0_fused_1) % T.int64(3136) + ax1)
                                            v_vh, v_vw, v_r_a, v_r_b = T.axis.remap("SSRR", [ax2, ax3, ax4, ax5])
                                            T.reads(bgemm[v_r_a, v_r_b, v_co, v_p])
                                            T.writes(inverse_local[v_co, v_p, v_vh, v_vw])
                                            T.block_attr({"schedule_rule": "conv2d_nchw_winograd_inverse"})
                                            with T.init():
                                                inverse_local[v_co, v_p, v_vh, v_vw] = T.float32(0)
                                            inverse_local[v_co, v_p, v_vh, v_vw] = inverse_local[v_co, v_p, v_vh, v_vw] + bgemm[v_r_a, v_r_b, v_co, v_p] * T.Select(v_r_a % T.int64(6) == T.int64(5) and v_vh % T.int64(4) == T.int64(3), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(5) and v_vh % T.int64(4) == T.int64(2), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(5) and v_vh % T.int64(4) == T.int64(1), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(5) and v_vh % T.int64(4) == T.int64(0), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(4) and v_vh % T.int64(4) == T.int64(3), T.float32(-8), T.Select(v_r_a % T.int64(6) == T.int64(4) and v_vh % T.int64(4) == T.int64(2), T.float32(4), T.Select(v_r_a % T.int64(6) == T.int64(4) and v_vh % T.int64(4) == T.int64(1), T.float32(-2), T.Select(v_r_a % T.int64(6) == T.int64(4) and v_vh % T.int64(4) == T.int64(0), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(3) and v_vh % T.int64(4) == T.int64(3), T.float32(0.125), T.Select(v_r_a % T.int64(6) == T.int64(3) and v_vh % T.int64(4) == T.int64(2), T.float32(0.25), T.Select(v_r_a % T.int64(6) == T.int64(3) and v_vh % T.int64(4) == T.int64(1), T.float32(0.5), T.Select(v_r_a % T.int64(6) == T.int64(3) and v_vh % T.int64(4) == T.int64(0), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(2) and v_vh % T.int64(4) == T.int64(3), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(2) and v_vh % T.int64(4) == T.int64(2), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(2) and v_vh % T.int64(4) == T.int64(1), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(2) and v_vh % T.int64(4) == T.int64(0), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(1) and v_vh % T.int64(4) == T.int64(3), T.float32(-1), T.Select(v_r_a % T.int64(6) == T.int64(1) and v_vh % T.int64(4) == T.int64(2), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(1) and v_vh % T.int64(4) == T.int64(1), T.float32(-1), T.Select(v_r_a % T.int64(6) == T.int64(1) and v_vh % T.int64(4) == T.int64(0), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(0) and v_vh % T.int64(4) == T.int64(3), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(0) and v_vh % T.int64(4) == T.int64(2), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(0) and v_vh % T.int64(4) == T.int64(1), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(0) and v_vh % T.int64(4) == T.int64(0), T.float32(1), T.float32(0))))))))))))))))))))))))) * T.Select(v_r_b % T.int64(6) == T.int64(5) and v_vw % T.int64(4) == T.int64(3), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(5) and v_vw % T.int64(4) == T.int64(2), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(5) and v_vw % T.int64(4) == T.int64(1), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(5) and v_vw % T.int64(4) == T.int64(0), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(4) and v_vw % T.int64(4) == T.int64(3), T.float32(-8), T.Select(v_r_b % T.int64(6) == T.int64(4) and v_vw % T.int64(4) == T.int64(2), T.float32(4), T.Select(v_r_b % T.int64(6) == T.int64(4) and v_vw % T.int64(4) == T.int64(1), T.float32(-2), T.Select(v_r_b % T.int64(6) == T.int64(4) and v_vw % T.int64(4) == T.int64(0), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(3) and v_vw % T.int64(4) == T.int64(3), T.float32(0.125), T.Select(v_r_b % T.int64(6) == T.int64(3) and v_vw % T.int64(4) == T.int64(2), T.float32(0.25), T.Select(v_r_b % T.int64(6) == T.int64(3) and v_vw % T.int64(4) == T.int64(1), T.float32(0.5), T.Select(v_r_b % T.int64(6) == T.int64(3) and v_vw % T.int64(4) == T.int64(0), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(2) and v_vw % T.int64(4) == T.int64(3), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(2) and v_vw % T.int64(4) == T.int64(2), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(2) and v_vw % T.int64(4) == T.int64(1), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(2) and v_vw % T.int64(4) == T.int64(0), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(1) and v_vw % T.int64(4) == T.int64(3), T.float32(-1), T.Select(v_r_b % T.int64(6) == T.int64(1) and v_vw % T.int64(4) == T.int64(2), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(1) and v_vw % T.int64(4) == T.int64(1), T.float32(-1), T.Select(v_r_b % T.int64(6) == T.int64(1) and v_vw % T.int64(4) == T.int64(0), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(0) and v_vw % T.int64(4) == T.int64(3), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(0) and v_vw % T.int64(4) == T.int64(2), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(0) and v_vw % T.int64(4) == T.int64(1), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(0) and v_vw % T.int64(4) == T.int64(0), T.float32(1), T.float32(0)))))))))))))))))))))))))
                    for h_1, w_1 in T.grid(T.int64(4), T.int64(4)):
                        with T.block("conv2d_winograd"):
                            v_n = T.axis.spatial(T.int64(1), T.int64(0))
                            v_co = T.axis.spatial(T.int64(64), (n_co_h_0_w_0_fused_0 * T.int64(128) + n_co_h_0_w_0_fused_1) // T.int64(3136))
                            v_h = T.axis.spatial(T.int64(224), (n_co_h_0_w_0_fused_0 * T.int64(128) + n_co_h_0_w_0_fused_1) % T.int64(3136) // T.int64(56) * T.int64(4) + h_1)
                            v_w = T.axis.spatial(T.int64(224), (n_co_h_0_w_0_fused_0 * T.int64(128) + n_co_h_0_w_0_fused_1) % T.int64(56) * T.int64(4) + w_1)
                            T.reads(inverse_local[v_co, v_n * T.int64(3136) + v_h // T.int64(4) * T.int64(56) + v_w // T.int64(4), v_h % T.int64(4), v_w % T.int64(4)], p2[v_n, v_co, T.int64(0), T.int64(0)])
                            T.writes(T_relu[v_n, v_co, v_h, v_w])
                            T_relu[v_n, v_co, v_h, v_w] = T.max(inverse_local[v_co, v_n * T.int64(3136) + v_h // T.int64(4) * T.int64(56) + v_w // T.int64(4), v_h % T.int64(4), v_w % T.int64(4)] + p2[v_n, v_co, T.int64(0), T.int64(0)], T.float32(0))
b0 = sch.get_block(name="data_pack", func_name="main")
b1 = sch.get_block(name="bgemm", func_name="main")
b2 = sch.get_block(name="inverse", func_name="main")
b3 = sch.get_block(name="conv2d_winograd", func_name="main")
b4 = sch.get_block(name="T_add", func_name="main")
b5 = sch.get_block(name="T_relu", func_name="main")
b6 = sch.get_block(name="root", func_name="main")
b7, b8 = sch.get_producers(block=b2)
sch.compute_inline(block=b8)
b9, = sch.get_consumers(block=b2)
l10, l11, l12, l13 = sch.get_loops(block=b9)
l14, l15 = sch.split(loop=l12, factors=[None, 4], preserve_unit_iters=True)
l16, l17 = sch.split(loop=l13, factors=[None, 4], preserve_unit_iters=True)
sch.reorder(l14, l16, l15, l17)
sch.compute_at(block=b2, loop=l16, preserve_unit_loops=True, index=-1)
sch.set_scope(block=b2, buffer_index=0, storage_scope="local")
l18, l19, l20, l21, l22, l23, l24, l25, l26, l27 = sch.get_loops(block=b2)
sch.unroll(loop=l24)
sch.unroll(loop=l25)
sch.unroll(loop=l26)
sch.unroll(loop=l27)
b28, b29 = sch.get_producers(block=b0)
sch.compute_inline(block=b29)
b30, = sch.get_producers(block=b28)
l31, l32, l33, l34, l35, l36 = sch.get_loops(block=b0)
sch.reorder(l33, l34, l31, l32, l35, l36)
sch.unroll(loop=l31)
sch.unroll(loop=l32)
sch.unroll(loop=l35)
sch.unroll(loop=l36)
l37 = sch.fuse(l33, l34, preserve_unit_iters=True)
v38 = sch.sample_categorical(candidates=[32, 64, 128, 256, 512, 1024], probs=[0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666], decision=4)
l39, l40 = sch.split(loop=l37, factors=[None, v38], preserve_unit_iters=True)
sch.bind(loop=l39, thread_axis="blockIdx.x")
sch.bind(loop=l40, thread_axis="threadIdx.x")
b41 = sch.cache_write(block=b0, write_buffer_index=0, storage_scope="local")
sch.reverse_compute_at(block=b41, loop=l40, preserve_unit_loops=True, index=-1)
sch.compute_at(block=b28, loop=l40, preserve_unit_loops=True, index=-1)
sch.set_scope(block=b28, buffer_index=0, storage_scope="local")
sch.compute_inline(block=b30)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSSRRSRS")
l42, l43, l44, l45, l46 = sch.get_loops(block=b1)
v47, v48, v49, v50, v51 = sch.sample_perfect_tile(loop=l42, n=5, max_innermost_factor=64, decision=[3, 1, 1, 1, 2])
l52, l53, l54, l55, l56 = sch.split(loop=l42, factors=[v47, v48, v49, v50, v51], preserve_unit_iters=True)
v57, v58, v59, v60, v61 = sch.sample_perfect_tile(loop=l43, n=5, max_innermost_factor=64, decision=[1, 1, 2, 1, 3])
l62, l63, l64, l65, l66 = sch.split(loop=l43, factors=[v57, v58, v59, v60, v61], preserve_unit_iters=True)
v67, v68, v69, v70, v71 = sch.sample_perfect_tile(loop=l44, n=5, max_innermost_factor=64, decision=[1, 16, 1, 2, 2])
l72, l73, l74, l75, l76 = sch.split(loop=l44, factors=[v67, v68, v69, v70, v71], preserve_unit_iters=True)
v77, v78, v79, v80, v81 = sch.sample_perfect_tile(loop=l45, n=5, max_innermost_factor=64, decision=[448, 1, 1, 7, 1])
l82, l83, l84, l85, l86 = sch.split(loop=l45, factors=[v77, v78, v79, v80, v81], preserve_unit_iters=True)
v87, v88, v89 = sch.sample_perfect_tile(loop=l46, n=3, max_innermost_factor=64, decision=[3, 1, 1])
l90, l91, l92 = sch.split(loop=l46, factors=[v87, v88, v89], preserve_unit_iters=True)
sch.reorder(l52, l62, l72, l82, l53, l63, l73, l83, l54, l64, l74, l84, l90, l91, l55, l65, l75, l85, l92, l56, l66, l76, l86)
l93 = sch.fuse(l52, l62, l72, l82, preserve_unit_iters=True)
sch.bind(loop=l93, thread_axis="blockIdx.x")
l94 = sch.fuse(l53, l63, l73, l83, preserve_unit_iters=True)
sch.bind(loop=l94, thread_axis="vthread.x")
l95 = sch.fuse(l54, l64, l74, l84, preserve_unit_iters=True)
sch.bind(loop=l95, thread_axis="threadIdx.x")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_low_inclusive", ann_val=32)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_high_inclusive", ann_val=1024)
b96 = sch.cache_write(block=b1, write_buffer_index=0, storage_scope="local")
sch.reverse_compute_at(block=b96, loop=l95, preserve_unit_loops=True, index=-1)
b97 = sch.cache_read(block=b1, read_buffer_index=0, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b97, loop=l90, preserve_unit_loops=True, index=-1)
l98, l99, l100, l101, l102, l103, l104, l105 = sch.get_loops(block=b97)
l106 = sch.fuse(l102, l103, l104, l105, preserve_unit_iters=True)
v107 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=1)
sch.annotate(block_or_loop=b97, ann_key="meta_schedule.cooperative_fetch", ann_val=v107)
b108 = sch.cache_read(block=b1, read_buffer_index=1, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b108, loop=l90, preserve_unit_loops=True, index=-1)
l109, l110, l111, l112, l113, l114, l115, l116 = sch.get_loops(block=b108)
l117 = sch.fuse(l113, l114, l115, l116, preserve_unit_iters=True)
v118 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=1)
sch.annotate(block_or_loop=b108, ann_key="meta_schedule.cooperative_fetch", ann_val=v118)
l119 = sch.fuse(l90, preserve_unit_iters=True)
sch.annotate(block_or_loop=l119, ann_key="software_pipeline_stage", ann_val=[0, 0, 2])
sch.annotate(block_or_loop=l119, ann_key="software_pipeline_order", ann_val=[0, 1, 2])
sch.annotate(block_or_loop=l119, ann_key="software_pipeline_async_stages", ann_val=[0])
sch.reverse_compute_inline(block=b5)
sch.reverse_compute_inline(block=b4)
v120 = sch.sample_categorical(candidates=[0, 16, 64, 512, 1024], probs=[0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001], decision=2)
sch.annotate(block_or_loop=b6, ann_key="meta_schedule.unroll_explicit", ann_val=v120)
l121, l122, l123, l124, l125, l126 = sch.get_loops(block=b3)
l127 = sch.fuse(l121, l122, l123, l124, preserve_unit_iters=True)
v128 = sch.sample_categorical(candidates=[32, 64, 128, 256, 512, 1024], probs=[0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666], decision=2)
l129, l130 = sch.split(loop=l127, factors=[None, v128], preserve_unit_iters=True)
sch.bind(loop=l129, thread_axis="blockIdx.x")
sch.bind(loop=l130, thread_axis="threadIdx.x")
2024-04-29 17:02:24 [INFO] [task_scheduler.cc:170] Design space #2:
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(3), T.int64(224), T.int64(224)), "float32"), p1: T.Buffer((T.int64(6), T.int64(6), T.int64(3), T.int64(64)), "float32"), p2: T.Buffer((T.int64(1), T.int64(64), T.int64(1), T.int64(1)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(64), T.int64(224), T.int64(224)), "float32")):
        T.func_attr({"layout_free_buffers": [1], "tir.noalias": T.bool(True)})
        with T.block("root"):
            T.reads()
            T.writes()
            T.block_attr({"meta_schedule.unroll_explicit": 64})
            input_tile_local = T.alloc_buffer((T.int64(3), T.int64(3136), T.int64(6), T.int64(6)), scope="local")
            data_pack = T.alloc_buffer((T.int64(6), T.int64(6), T.int64(3), T.int64(3136)))
            bgemm = T.alloc_buffer((T.int64(6), T.int64(6), T.int64(64), T.int64(3136)))
            inverse_local = T.alloc_buffer((T.int64(64), T.int64(3136), T.int64(4), T.int64(4)), scope="local")
            data_pack_local = T.alloc_buffer((T.int64(6), T.int64(6), T.int64(3), T.int64(3136)), scope="local")
            bgemm_local = T.alloc_buffer((T.int64(6), T.int64(6), T.int64(64), T.int64(3136)), scope="local")
            data_pack_shared = T.alloc_buffer((T.int64(6), T.int64(6), T.int64(3), T.int64(3136)), scope="shared")
            p1_shared = T.alloc_buffer((T.int64(6), T.int64(6), T.int64(3), T.int64(64)), scope="shared")
            for ci_p_fused_0 in T.thread_binding(T.int64(19), thread="blockIdx.x"):
                for ci_p_fused_1 in T.thread_binding(T.int64(512), thread="threadIdx.x"):
                    for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(1), T.int64(6), T.int64(6)):
                        with T.block("input_tile"):
                            v_ci = T.axis.spatial(T.int64(3), (ci_p_fused_0 * T.int64(512) + ci_p_fused_1) // T.int64(3136) + ax0)
                            v_p = T.axis.spatial(T.int64(3136), (ci_p_fused_0 * T.int64(512) + ci_p_fused_1) % T.int64(3136) + ax1)
                            v_eps, v_nu = T.axis.remap("SS", [ax2, ax3])
                            T.where(ci_p_fused_0 * T.int64(512) + ci_p_fused_1 < T.int64(9408))
                            T.reads(p0[v_p // T.int64(3136), v_ci, v_p % T.int64(3136) // T.int64(56) * T.int64(4) + v_eps - T.int64(1), v_p % T.int64(56) * T.int64(4) + v_nu - T.int64(1)])
                            T.writes(input_tile_local[v_ci, v_p, v_eps, v_nu])
                            T.block_attr({"schedule_rule": "None"})
                            input_tile_local[v_ci, v_p, v_eps, v_nu] = T.if_then_else(T.int64(1) <= v_p % T.int64(3136) // T.int64(56) * T.int64(4) + v_eps and v_p % T.int64(3136) // T.int64(56) * T.int64(4) + v_eps < T.int64(225) and T.int64(1) <= v_p % T.int64(56) * T.int64(4) + v_nu and v_p % T.int64(56) * T.int64(4) + v_nu < T.int64(225), p0[v_p // T.int64(3136), v_ci, v_p % T.int64(3136) // T.int64(56) * T.int64(4) + v_eps - T.int64(1), v_p % T.int64(56) * T.int64(4) + v_nu - T.int64(1)], T.float32(0))
                    for eps in T.unroll(T.int64(6)):
                        for nu in T.unroll(T.int64(6)):
                            for r_a in T.unroll(T.int64(6)):
                                for r_b in T.unroll(T.int64(6)):
                                    with T.block("data_pack"):
                                        v_eps, v_nu = T.axis.remap("SS", [eps, nu])
                                        v_ci = T.axis.spatial(T.int64(3), (ci_p_fused_0 * T.int64(512) + ci_p_fused_1) // T.int64(3136))
                                        v_p = T.axis.spatial(T.int64(3136), (ci_p_fused_0 * T.int64(512) + ci_p_fused_1) % T.int64(3136))
                                        v_r_a, v_r_b = T.axis.remap("RR", [r_a, r_b])
                                        T.where(ci_p_fused_0 * T.int64(512) + ci_p_fused_1 < T.int64(9408))
                                        T.reads(input_tile_local[v_ci, v_p, v_r_a, v_r_b])
                                        T.writes(data_pack_local[v_eps, v_nu, v_ci, v_p])
                                        T.block_attr({"schedule_rule": "conv2d_nchw_winograd_data_pack"})
                                        with T.init():
                                            data_pack_local[v_eps, v_nu, v_ci, v_p] = T.float32(0)
                                        data_pack_local[v_eps, v_nu, v_ci, v_p] = data_pack_local[v_eps, v_nu, v_ci, v_p] + input_tile_local[v_ci, v_p, v_r_a, v_r_b] * T.Select(v_r_a % T.int64(6) == T.int64(5) and v_eps % T.int64(6) == T.int64(5), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(5) and v_eps % T.int64(6) == T.int64(4), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(5) and v_eps % T.int64(6) == T.int64(3), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(5) and v_eps % T.int64(6) == T.int64(2), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(5) and v_eps % T.int64(6) == T.int64(1), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(5) and v_eps % T.int64(6) == T.int64(0), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(4) and v_eps % T.int64(6) == T.int64(5), T.float32(1.5), T.Select(v_r_a % T.int64(6) == T.int64(4) and v_eps % T.int64(6) == T.int64(4), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(4) and v_eps % T.int64(6) == T.int64(3), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(4) and v_eps % T.int64(6) == T.int64(2), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(4) and v_eps % T.int64(6) == T.int64(1), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(4) and v_eps % T.int64(6) == T.int64(0), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(3) and v_eps % T.int64(6) == T.int64(5), T.float32(-2), T.Select(v_r_a % T.int64(6) == T.int64(3) and v_eps % T.int64(6) == T.int64(4), T.float32(-0.5), T.Select(v_r_a % T.int64(6) == T.int64(3) and v_eps % T.int64(6) == T.int64(3), T.float32(2), T.Select(v_r_a % T.int64(6) == T.int64(3) and v_eps % T.int64(6) == T.int64(2), T.float32(2.5), T.Select(v_r_a % T.int64(6) == T.int64(3) and v_eps % T.int64(6) == T.int64(1), T.float32(0.5), T.Select(v_r_a % T.int64(6) == T.int64(3) and v_eps % T.int64(6) == T.int64(0), T.float32(1.5), T.Select(v_r_a % T.int64(6) == T.int64(2) and v_eps % T.int64(6) == T.int64(5), T.float32(-1.5), T.Select(v_r_a % T.int64(6) == T.int64(2) and v_eps % T.int64(6) == T.int64(4), T.float32(-1), T.Select(v_r_a % T.int64(6) == T.int64(2) and v_eps % T.int64(6) == T.int64(3), T.float32(-1), T.Select(v_r_a % T.int64(6) == T.int64(2) and v_eps % T.int64(6) == T.int64(2), T.float32(0.5), T.Select(v_r_a % T.int64(6) == T.int64(2) and v_eps % T.int64(6) == T.int64(1), T.float32(-2.5), T.Select(v_r_a % T.int64(6) == T.int64(2) and v_eps % T.int64(6) == T.int64(0), T.float32(-2), T.Select(v_r_a % T.int64(6) == T.int64(1) and v_eps % T.int64(6) == T.int64(5), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(1) and v_eps % T.int64(6) == T.int64(4), T.float32(0.5), T.Select(v_r_a % T.int64(6) == T.int64(1) and v_eps % T.int64(6) == T.int64(3), T.float32(-2), T.Select(v_r_a % T.int64(6) == T.int64(1) and v_eps % T.int64(6) == T.int64(2), T.float32(-1), T.Select(v_r_a % T.int64(6) == T.int64(1) and v_eps % T.int64(6) == T.int64(1), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(1) and v_eps % T.int64(6) == T.int64(0), T.float32(-1.5), T.Select(v_r_a % T.int64(6) == T.int64(0) and v_eps % T.int64(6) == T.int64(5), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(0) and v_eps % T.int64(6) == T.int64(4), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(0) and v_eps % T.int64(6) == T.int64(3), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(0) and v_eps % T.int64(6) == T.int64(2), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(0) and v_eps % T.int64(6) == T.int64(1), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(0) and v_eps % T.int64(6) == T.int64(0), T.float32(1), T.float32(0))))))))))))))))))))))))))))))))))))) * T.Select(v_r_b % T.int64(6) == T.int64(5) and v_nu % T.int64(6) == T.int64(5), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(5) and v_nu % T.int64(6) == T.int64(4), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(5) and v_nu % T.int64(6) == T.int64(3), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(5) and v_nu % T.int64(6) == T.int64(2), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(5) and v_nu % T.int64(6) == T.int64(1), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(5) and v_nu % T.int64(6) == T.int64(0), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(4) and v_nu % T.int64(6) == T.int64(5), T.float32(1.5), T.Select(v_r_b % T.int64(6) == T.int64(4) and v_nu % T.int64(6) == T.int64(4), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(4) and v_nu % T.int64(6) == T.int64(3), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(4) and v_nu % T.int64(6) == T.int64(2), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(4) and v_nu % T.int64(6) == T.int64(1), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(4) and v_nu % T.int64(6) == T.int64(0), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(3) and v_nu % T.int64(6) == T.int64(5), T.float32(-2), T.Select(v_r_b % T.int64(6) == T.int64(3) and v_nu % T.int64(6) == T.int64(4), T.float32(-0.5), T.Select(v_r_b % T.int64(6) == T.int64(3) and v_nu % T.int64(6) == T.int64(3), T.float32(2), T.Select(v_r_b % T.int64(6) == T.int64(3) and v_nu % T.int64(6) == T.int64(2), T.float32(2.5), T.Select(v_r_b % T.int64(6) == T.int64(3) and v_nu % T.int64(6) == T.int64(1), T.float32(0.5), T.Select(v_r_b % T.int64(6) == T.int64(3) and v_nu % T.int64(6) == T.int64(0), T.float32(1.5), T.Select(v_r_b % T.int64(6) == T.int64(2) and v_nu % T.int64(6) == T.int64(5), T.float32(-1.5), T.Select(v_r_b % T.int64(6) == T.int64(2) and v_nu % T.int64(6) == T.int64(4), T.float32(-1), T.Select(v_r_b % T.int64(6) == T.int64(2) and v_nu % T.int64(6) == T.int64(3), T.float32(-1), T.Select(v_r_b % T.int64(6) == T.int64(2) and v_nu % T.int64(6) == T.int64(2), T.float32(0.5), T.Select(v_r_b % T.int64(6) == T.int64(2) and v_nu % T.int64(6) == T.int64(1), T.float32(-2.5), T.Select(v_r_b % T.int64(6) == T.int64(2) and v_nu % T.int64(6) == T.int64(0), T.float32(-2), T.Select(v_r_b % T.int64(6) == T.int64(1) and v_nu % T.int64(6) == T.int64(5), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(1) and v_nu % T.int64(6) == T.int64(4), T.float32(0.5), T.Select(v_r_b % T.int64(6) == T.int64(1) and v_nu % T.int64(6) == T.int64(3), T.float32(-2), T.Select(v_r_b % T.int64(6) == T.int64(1) and v_nu % T.int64(6) == T.int64(2), T.float32(-1), T.Select(v_r_b % T.int64(6) == T.int64(1) and v_nu % T.int64(6) == T.int64(1), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(1) and v_nu % T.int64(6) == T.int64(0), T.float32(-1.5), T.Select(v_r_b % T.int64(6) == T.int64(0) and v_nu % T.int64(6) == T.int64(5), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(0) and v_nu % T.int64(6) == T.int64(4), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(0) and v_nu % T.int64(6) == T.int64(3), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(0) and v_nu % T.int64(6) == T.int64(2), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(0) and v_nu % T.int64(6) == T.int64(1), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(0) and v_nu % T.int64(6) == T.int64(0), T.float32(1), T.float32(0)))))))))))))))))))))))))))))))))))))
                    for ax0, ax1, ax2, ax3 in T.grid(T.int64(6), T.int64(6), T.int64(1), T.int64(1)):
                        with T.block("data_pack_local"):
                            v0, v1 = T.axis.remap("SS", [ax0, ax1])
                            v2 = T.axis.spatial(T.int64(3), (ci_p_fused_0 * T.int64(512) + ci_p_fused_1) // T.int64(3136) + ax2)
                            v3 = T.axis.spatial(T.int64(3136), (ci_p_fused_0 * T.int64(512) + ci_p_fused_1) % T.int64(3136) + ax3)
                            T.where(ci_p_fused_0 * T.int64(512) + ci_p_fused_1 < T.int64(9408))
                            T.reads(data_pack_local[v0, v1, v2, v3])
                            T.writes(data_pack[v0, v1, v2, v3])
                            data_pack[v0, v1, v2, v3] = data_pack_local[v0, v1, v2, v3]
            for eps_0_nu_0_co_0_p_0_fused in T.thread_binding(T.int64(1344), thread="blockIdx.x"):
                for eps_1_nu_1_co_1_p_1_fused in T.thread_binding(T.int64(16), thread="vthread.x"):
                    for eps_2_nu_2_co_2_p_2_fused in T.thread_binding(T.int64(2), thread="threadIdx.x"):
                        for ci_0_fused in T.serial(T.int64(3), annotations={"software_pipeline_async_stages": [0], "software_pipeline_order": [0, 1, 2], "software_pipeline_stage": [0, 0, 3]}):
                            for ax0_ax1_ax2_ax3_fused in range(T.int64(84)):
                                with T.block("data_pack_shared"):
                                    v0 = T.axis.spatial(T.int64(6), eps_0_nu_0_co_0_p_0_fused // T.int64(448) * T.int64(2) + ax0_ax1_ax2_ax3_fused // T.int64(42))
                                    v1 = T.axis.spatial(T.int64(6), ax0_ax1_ax2_ax3_fused % T.int64(42) // T.int64(7))
                                    v2 = T.axis.spatial(T.int64(3), ci_0_fused)
                                    v3 = T.axis.spatial(T.int64(3136), eps_0_nu_0_co_0_p_0_fused % T.int64(448) * T.int64(7) + ax0_ax1_ax2_ax3_fused % T.int64(7))
                                    T.reads(data_pack[v0, v1, v2, v3])
                                    T.writes(data_pack_shared[v0, v1, v2, v3])
                                    T.block_attr({"meta_schedule.cooperative_fetch": 2})
                                    data_pack_shared[v0, v1, v2, v3] = data_pack[v0, v1, v2, v3]
                            for ax0_ax1_ax2_ax3_fused in range(T.int64(768)):
                                with T.block("p1_shared"):
                                    v0 = T.axis.spatial(T.int64(6), eps_0_nu_0_co_0_p_0_fused // T.int64(448) * T.int64(2) + ax0_ax1_ax2_ax3_fused // T.int64(384))
                                    v1 = T.axis.spatial(T.int64(6), ax0_ax1_ax2_ax3_fused % T.int64(384) // T.int64(64))
                                    v2 = T.axis.spatial(T.int64(3), ci_0_fused)
                                    v3 = T.axis.spatial(T.int64(64), ax0_ax1_ax2_ax3_fused % T.int64(64))
                                    T.reads(p1[v0, v1, v2, v3])
                                    T.writes(p1_shared[v0, v1, v2, v3])
                                    T.block_attr({"meta_schedule.cooperative_fetch": 2})
                                    p1_shared[v0, v1, v2, v3] = p1[v0, v1, v2, v3]
                            for ci_1, eps_3, nu_3, co_3, p_3, ci_2, eps_4, nu_4, co_4, p_4 in T.grid(T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(7), T.int64(1), T.int64(2), T.int64(3), T.int64(2), T.int64(1)):
                                with T.block("bgemm"):
                                    v_eps = T.axis.spatial(T.int64(6), eps_0_nu_0_co_0_p_0_fused // T.int64(448) * T.int64(2) + eps_3 * T.int64(2) + eps_4)
                                    v_nu = T.axis.spatial(T.int64(6), eps_2_nu_2_co_2_p_2_fused * T.int64(3) + nu_3 * T.int64(3) + nu_4)
                                    v_co = T.axis.spatial(T.int64(64), eps_1_nu_1_co_1_p_1_fused * T.int64(4) + co_3 * T.int64(2) + co_4)
                                    v_p = T.axis.spatial(T.int64(3136), eps_0_nu_0_co_0_p_0_fused % T.int64(448) * T.int64(7) + p_3 + p_4)
                                    v_ci = T.axis.reduce(T.int64(3), ci_0_fused + ci_1 + ci_2)
                                    T.reads(data_pack_shared[v_eps, v_nu, v_ci, v_p], p1_shared[v_eps, v_nu, v_ci, v_co])
                                    T.writes(bgemm_local[v_eps, v_nu, v_co, v_p])
                                    T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 32, "meta_schedule.tiling_structure": "SSSRRSRS"})
                                    with T.init():
                                        bgemm_local[v_eps, v_nu, v_co, v_p] = T.float32(0)
                                    bgemm_local[v_eps, v_nu, v_co, v_p] = bgemm_local[v_eps, v_nu, v_co, v_p] + data_pack_shared[v_eps, v_nu, v_ci, v_p] * p1_shared[v_eps, v_nu, v_ci, v_co]
                        for ax0, ax1, ax2, ax3 in T.grid(T.int64(2), T.int64(3), T.int64(4), T.int64(7)):
                            with T.block("bgemm_local"):
                                v0 = T.axis.spatial(T.int64(6), eps_0_nu_0_co_0_p_0_fused // T.int64(448) * T.int64(2) + ax0)
                                v1 = T.axis.spatial(T.int64(6), eps_2_nu_2_co_2_p_2_fused * T.int64(3) + ax1)
                                v2 = T.axis.spatial(T.int64(64), eps_1_nu_1_co_1_p_1_fused * T.int64(4) + ax2)
                                v3 = T.axis.spatial(T.int64(3136), eps_0_nu_0_co_0_p_0_fused % T.int64(448) * T.int64(7) + ax3)
                                T.reads(bgemm_local[v0, v1, v2, v3])
                                T.writes(bgemm[v0, v1, v2, v3])
                                bgemm[v0, v1, v2, v3] = bgemm_local[v0, v1, v2, v3]
            for n_co_h_0_w_0_fused_0 in T.thread_binding(T.int64(6272), thread="blockIdx.x"):
                for n_co_h_0_w_0_fused_1 in T.thread_binding(T.int64(32), thread="threadIdx.x"):
                    for ax0, ax1 in T.grid(T.int64(1), T.int64(1)):
                        for ax2 in T.unroll(T.int64(4)):
                            for ax3 in T.unroll(T.int64(4)):
                                for ax4 in T.unroll(T.int64(6)):
                                    for ax5 in T.unroll(T.int64(6)):
                                        with T.block("inverse"):
                                            v_co = T.axis.spatial(T.int64(64), (n_co_h_0_w_0_fused_0 * T.int64(32) + n_co_h_0_w_0_fused_1) // T.int64(3136) + ax0)
                                            v_p = T.axis.spatial(T.int64(3136), (n_co_h_0_w_0_fused_0 * T.int64(32) + n_co_h_0_w_0_fused_1) % T.int64(3136) + ax1)
                                            v_vh, v_vw, v_r_a, v_r_b = T.axis.remap("SSRR", [ax2, ax3, ax4, ax5])
                                            T.reads(bgemm[v_r_a, v_r_b, v_co, v_p])
                                            T.writes(inverse_local[v_co, v_p, v_vh, v_vw])
                                            T.block_attr({"schedule_rule": "conv2d_nchw_winograd_inverse"})
                                            with T.init():
                                                inverse_local[v_co, v_p, v_vh, v_vw] = T.float32(0)
                                            inverse_local[v_co, v_p, v_vh, v_vw] = inverse_local[v_co, v_p, v_vh, v_vw] + bgemm[v_r_a, v_r_b, v_co, v_p] * T.Select(v_r_a % T.int64(6) == T.int64(5) and v_vh % T.int64(4) == T.int64(3), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(5) and v_vh % T.int64(4) == T.int64(2), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(5) and v_vh % T.int64(4) == T.int64(1), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(5) and v_vh % T.int64(4) == T.int64(0), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(4) and v_vh % T.int64(4) == T.int64(3), T.float32(-8), T.Select(v_r_a % T.int64(6) == T.int64(4) and v_vh % T.int64(4) == T.int64(2), T.float32(4), T.Select(v_r_a % T.int64(6) == T.int64(4) and v_vh % T.int64(4) == T.int64(1), T.float32(-2), T.Select(v_r_a % T.int64(6) == T.int64(4) and v_vh % T.int64(4) == T.int64(0), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(3) and v_vh % T.int64(4) == T.int64(3), T.float32(0.125), T.Select(v_r_a % T.int64(6) == T.int64(3) and v_vh % T.int64(4) == T.int64(2), T.float32(0.25), T.Select(v_r_a % T.int64(6) == T.int64(3) and v_vh % T.int64(4) == T.int64(1), T.float32(0.5), T.Select(v_r_a % T.int64(6) == T.int64(3) and v_vh % T.int64(4) == T.int64(0), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(2) and v_vh % T.int64(4) == T.int64(3), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(2) and v_vh % T.int64(4) == T.int64(2), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(2) and v_vh % T.int64(4) == T.int64(1), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(2) and v_vh % T.int64(4) == T.int64(0), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(1) and v_vh % T.int64(4) == T.int64(3), T.float32(-1), T.Select(v_r_a % T.int64(6) == T.int64(1) and v_vh % T.int64(4) == T.int64(2), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(1) and v_vh % T.int64(4) == T.int64(1), T.float32(-1), T.Select(v_r_a % T.int64(6) == T.int64(1) and v_vh % T.int64(4) == T.int64(0), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(0) and v_vh % T.int64(4) == T.int64(3), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(0) and v_vh % T.int64(4) == T.int64(2), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(0) and v_vh % T.int64(4) == T.int64(1), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(0) and v_vh % T.int64(4) == T.int64(0), T.float32(1), T.float32(0))))))))))))))))))))))))) * T.Select(v_r_b % T.int64(6) == T.int64(5) and v_vw % T.int64(4) == T.int64(3), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(5) and v_vw % T.int64(4) == T.int64(2), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(5) and v_vw % T.int64(4) == T.int64(1), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(5) and v_vw % T.int64(4) == T.int64(0), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(4) and v_vw % T.int64(4) == T.int64(3), T.float32(-8), T.Select(v_r_b % T.int64(6) == T.int64(4) and v_vw % T.int64(4) == T.int64(2), T.float32(4), T.Select(v_r_b % T.int64(6) == T.int64(4) and v_vw % T.int64(4) == T.int64(1), T.float32(-2), T.Select(v_r_b % T.int64(6) == T.int64(4) and v_vw % T.int64(4) == T.int64(0), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(3) and v_vw % T.int64(4) == T.int64(3), T.float32(0.125), T.Select(v_r_b % T.int64(6) == T.int64(3) and v_vw % T.int64(4) == T.int64(2), T.float32(0.25), T.Select(v_r_b % T.int64(6) == T.int64(3) and v_vw % T.int64(4) == T.int64(1), T.float32(0.5), T.Select(v_r_b % T.int64(6) == T.int64(3) and v_vw % T.int64(4) == T.int64(0), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(2) and v_vw % T.int64(4) == T.int64(3), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(2) and v_vw % T.int64(4) == T.int64(2), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(2) and v_vw % T.int64(4) == T.int64(1), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(2) and v_vw % T.int64(4) == T.int64(0), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(1) and v_vw % T.int64(4) == T.int64(3), T.float32(-1), T.Select(v_r_b % T.int64(6) == T.int64(1) and v_vw % T.int64(4) == T.int64(2), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(1) and v_vw % T.int64(4) == T.int64(1), T.float32(-1), T.Select(v_r_b % T.int64(6) == T.int64(1) and v_vw % T.int64(4) == T.int64(0), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(0) and v_vw % T.int64(4) == T.int64(3), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(0) and v_vw % T.int64(4) == T.int64(2), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(0) and v_vw % T.int64(4) == T.int64(1), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(0) and v_vw % T.int64(4) == T.int64(0), T.float32(1), T.float32(0)))))))))))))))))))))))))
                    for h_1, w_1 in T.grid(T.int64(4), T.int64(4)):
                        with T.block("conv2d_winograd"):
                            v_n = T.axis.spatial(T.int64(1), T.int64(0))
                            v_co = T.axis.spatial(T.int64(64), (n_co_h_0_w_0_fused_0 * T.int64(32) + n_co_h_0_w_0_fused_1) // T.int64(3136))
                            v_h = T.axis.spatial(T.int64(224), (n_co_h_0_w_0_fused_0 * T.int64(32) + n_co_h_0_w_0_fused_1) % T.int64(3136) // T.int64(56) * T.int64(4) + h_1)
                            v_w = T.axis.spatial(T.int64(224), (n_co_h_0_w_0_fused_0 * T.int64(32) + n_co_h_0_w_0_fused_1) % T.int64(56) * T.int64(4) + w_1)
                            T.reads(inverse_local[v_co, v_n * T.int64(3136) + v_h // T.int64(4) * T.int64(56) + v_w // T.int64(4), v_h % T.int64(4), v_w % T.int64(4)], p2[v_n, v_co, T.int64(0), T.int64(0)])
                            T.writes(T_relu[v_n, v_co, v_h, v_w])
                            T_relu[v_n, v_co, v_h, v_w] = T.max(inverse_local[v_co, v_n * T.int64(3136) + v_h // T.int64(4) * T.int64(56) + v_w // T.int64(4), v_h % T.int64(4), v_w % T.int64(4)] + p2[v_n, v_co, T.int64(0), T.int64(0)], T.float32(0))
b0 = sch.get_block(name="data_pack", func_name="main")
b1 = sch.get_block(name="bgemm", func_name="main")
b2 = sch.get_block(name="inverse", func_name="main")
b3 = sch.get_block(name="conv2d_winograd", func_name="main")
b4 = sch.get_block(name="T_add", func_name="main")
b5 = sch.get_block(name="T_relu", func_name="main")
b6 = sch.get_block(name="root", func_name="main")
b7, b8 = sch.get_producers(block=b2)
sch.compute_inline(block=b8)
b9, = sch.get_consumers(block=b2)
l10, l11, l12, l13 = sch.get_loops(block=b9)
l14, l15 = sch.split(loop=l12, factors=[None, 4], preserve_unit_iters=True)
l16, l17 = sch.split(loop=l13, factors=[None, 4], preserve_unit_iters=True)
sch.reorder(l14, l16, l15, l17)
sch.compute_at(block=b2, loop=l16, preserve_unit_loops=True, index=-1)
sch.set_scope(block=b2, buffer_index=0, storage_scope="local")
l18, l19, l20, l21, l22, l23, l24, l25, l26, l27 = sch.get_loops(block=b2)
sch.unroll(loop=l24)
sch.unroll(loop=l25)
sch.unroll(loop=l26)
sch.unroll(loop=l27)
b28, b29 = sch.get_producers(block=b0)
sch.compute_inline(block=b29)
b30, = sch.get_producers(block=b28)
l31, l32, l33, l34, l35, l36 = sch.get_loops(block=b0)
sch.reorder(l33, l34, l31, l32, l35, l36)
sch.unroll(loop=l31)
sch.unroll(loop=l32)
sch.unroll(loop=l35)
sch.unroll(loop=l36)
l37 = sch.fuse(l33, l34, preserve_unit_iters=True)
v38 = sch.sample_categorical(candidates=[32, 64, 128, 256, 512, 1024], probs=[0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666], decision=4)
l39, l40 = sch.split(loop=l37, factors=[None, v38], preserve_unit_iters=True)
sch.bind(loop=l39, thread_axis="blockIdx.x")
sch.bind(loop=l40, thread_axis="threadIdx.x")
b41 = sch.cache_write(block=b0, write_buffer_index=0, storage_scope="local")
sch.reverse_compute_at(block=b41, loop=l40, preserve_unit_loops=True, index=-1)
sch.compute_at(block=b28, loop=l40, preserve_unit_loops=True, index=-1)
sch.set_scope(block=b28, buffer_index=0, storage_scope="local")
sch.compute_inline(block=b30)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSSRRSRS")
l42, l43, l44, l45, l46 = sch.get_loops(block=b1)
v47, v48, v49, v50, v51 = sch.sample_perfect_tile(loop=l42, n=5, max_innermost_factor=64, decision=[3, 1, 1, 1, 2])
l52, l53, l54, l55, l56 = sch.split(loop=l42, factors=[v47, v48, v49, v50, v51], preserve_unit_iters=True)
v57, v58, v59, v60, v61 = sch.sample_perfect_tile(loop=l43, n=5, max_innermost_factor=64, decision=[1, 1, 2, 1, 3])
l62, l63, l64, l65, l66 = sch.split(loop=l43, factors=[v57, v58, v59, v60, v61], preserve_unit_iters=True)
v67, v68, v69, v70, v71 = sch.sample_perfect_tile(loop=l44, n=5, max_innermost_factor=64, decision=[1, 16, 1, 2, 2])
l72, l73, l74, l75, l76 = sch.split(loop=l44, factors=[v67, v68, v69, v70, v71], preserve_unit_iters=True)
v77, v78, v79, v80, v81 = sch.sample_perfect_tile(loop=l45, n=5, max_innermost_factor=64, decision=[448, 1, 1, 7, 1])
l82, l83, l84, l85, l86 = sch.split(loop=l45, factors=[v77, v78, v79, v80, v81], preserve_unit_iters=True)
v87, v88, v89 = sch.sample_perfect_tile(loop=l46, n=3, max_innermost_factor=64, decision=[3, 1, 1])
l90, l91, l92 = sch.split(loop=l46, factors=[v87, v88, v89], preserve_unit_iters=True)
sch.reorder(l52, l62, l72, l82, l53, l63, l73, l83, l54, l64, l74, l84, l90, l91, l55, l65, l75, l85, l92, l56, l66, l76, l86)
l93 = sch.fuse(l52, l62, l72, l82, preserve_unit_iters=True)
sch.bind(loop=l93, thread_axis="blockIdx.x")
l94 = sch.fuse(l53, l63, l73, l83, preserve_unit_iters=True)
sch.bind(loop=l94, thread_axis="vthread.x")
l95 = sch.fuse(l54, l64, l74, l84, preserve_unit_iters=True)
sch.bind(loop=l95, thread_axis="threadIdx.x")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_low_inclusive", ann_val=32)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_high_inclusive", ann_val=1024)
b96 = sch.cache_write(block=b1, write_buffer_index=0, storage_scope="local")
sch.reverse_compute_at(block=b96, loop=l95, preserve_unit_loops=True, index=-1)
b97 = sch.cache_read(block=b1, read_buffer_index=0, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b97, loop=l90, preserve_unit_loops=True, index=-1)
l98, l99, l100, l101, l102, l103, l104, l105 = sch.get_loops(block=b97)
l106 = sch.fuse(l102, l103, l104, l105, preserve_unit_iters=True)
v107 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=1)
sch.annotate(block_or_loop=b97, ann_key="meta_schedule.cooperative_fetch", ann_val=v107)
b108 = sch.cache_read(block=b1, read_buffer_index=1, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b108, loop=l90, preserve_unit_loops=True, index=-1)
l109, l110, l111, l112, l113, l114, l115, l116 = sch.get_loops(block=b108)
l117 = sch.fuse(l113, l114, l115, l116, preserve_unit_iters=True)
v118 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=1)
sch.annotate(block_or_loop=b108, ann_key="meta_schedule.cooperative_fetch", ann_val=v118)
l119 = sch.fuse(l90, preserve_unit_iters=True)
sch.annotate(block_or_loop=l119, ann_key="software_pipeline_stage", ann_val=[0, 0, 3])
sch.annotate(block_or_loop=l119, ann_key="software_pipeline_order", ann_val=[0, 1, 2])
sch.annotate(block_or_loop=l119, ann_key="software_pipeline_async_stages", ann_val=[0])
sch.reverse_compute_inline(block=b5)
sch.reverse_compute_inline(block=b4)
v120 = sch.sample_categorical(candidates=[0, 16, 64, 512, 1024], probs=[0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001], decision=2)
sch.annotate(block_or_loop=b6, ann_key="meta_schedule.unroll_explicit", ann_val=v120)
l121, l122, l123, l124, l125, l126 = sch.get_loops(block=b3)
l127 = sch.fuse(l121, l122, l123, l124, preserve_unit_iters=True)
v128 = sch.sample_categorical(candidates=[32, 64, 128, 256, 512, 1024], probs=[0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666], decision=0)
l129, l130 = sch.split(loop=l127, factors=[None, v128], preserve_unit_iters=True)
sch.bind(loop=l129, thread_axis="blockIdx.x")
sch.bind(loop=l130, thread_axis="threadIdx.x")
2024-04-29 17:02:34 [INFO] [evolutionary_search.cc:713] Generating candidates......
2024-04-29 17:02:34 [INFO] [evolutionary_search.cc:715] Picked top 0 candidate(s) from database
2024-04-29 17:02:43 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x453f5d8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x50997f8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x50982f8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x5dd48a8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0xf6aa98)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0xb4bb608)]: 487 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x9227398)]: 0 failure(s)
2024-04-29 17:02:52 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x453f5d8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x50997f8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x50982f8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x5dd48a8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0xf6aa98)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0xb4bb608)]: 981 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x9227398)]: 0 failure(s)
2024-04-29 17:03:00 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x453f5d8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x50997f8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x50982f8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x5dd48a8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0xf6aa98)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0xb4bb608)]: 1465 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x9227398)]: 0 failure(s)
2024-04-29 17:03:00 [INFO] [evolutionary_search.cc:723] Sampled 71 candidate(s)
2024-04-29 17:03:19 [INFO] [evolutionary_search.cc:621] Evolve iter #0 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x453f5d8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x50997f8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x50982f8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x5dd48a8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0xf6aa98)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0xb4bb608)]: 131 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x9227398)]: 0 failure(s)
2024-04-29 17:03:38 [INFO] [evolutionary_search.cc:621] Evolve iter #1 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x453f5d8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x50997f8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x50982f8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x5dd48a8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0xf6aa98)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0xb4bb608)]: 116 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x9227398)]: 0 failure(s)
2024-04-29 17:03:56 [INFO] [evolutionary_search.cc:621] Evolve iter #2 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x453f5d8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x50997f8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x50982f8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x5dd48a8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0xf6aa98)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0xb4bb608)]: 123 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x9227398)]: 0 failure(s)
2024-04-29 17:04:16 [INFO] [evolutionary_search.cc:621] Evolve iter #3 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x453f5d8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x50997f8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x50982f8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x5dd48a8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0xf6aa98)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0xb4bb608)]: 110 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x9227398)]: 0 failure(s)
2024-04-29 17:04:16 [INFO] [evolutionary_search.cc:649] Scores of the best 64 candidates:
[1 : 16]:	0.9997  0.9993  0.9990  0.9987  0.9986  0.9985  0.9969  0.9967  0.9965  0.9951  0.9940  0.9922  0.9917  0.9910  0.9894  0.9882
[17 : 32]:	0.9878  0.9875  0.9873  0.9863  0.9854  0.9831  0.9827  0.9825  0.9823  0.9820  0.9811  0.9809  0.9806  0.9796  0.9794  0.9790
[33 : 48]:	0.9762  0.9762  0.9760  0.9759  0.9740  0.9739  0.9712  0.9711  0.9702  0.9684  0.9683  0.9678  0.9675  0.9669  0.9667  0.9663
[49 : 64]:	0.9636  0.9634  0.9628  0.9626  0.9617  0.9613  0.9611  0.9603  0.9591  0.9590  0.9589  0.9587  0.9585  0.9584  0.9581  0.9578
2024-04-29 17:04:16 [INFO] [evolutionary_search.cc:727] Got 64 candidate(s) with evolutionary search
2024-04-29 17:04:16 [INFO] [evolutionary_search.cc:730] Sending 64 candidates(s) for measurement
2024-04-29 17:44:56 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu] Trial #1: GFLOPs: 1132.8963. Time: 382.3557 us. Best GFLOPs: 1132.8963
2024-04-29 17:44:56 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu] Trial #2: GFLOPs: 3189.2634. Time: 135.8211 us. Best GFLOPs: 3189.2634
2024-04-29 17:44:56 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu] Trial #3: GFLOPs: 3877.5519. Time: 111.7121 us. Best GFLOPs: 3877.5519
2024-04-29 17:44:56 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu] Trial #4: GFLOPs: 1984.6842. Time: 218.2561 us. Best GFLOPs: 3877.5519
2024-04-29 17:44:56 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu] Trial #5: GFLOPs: 1610.7018. Time: 268.9321 us. Best GFLOPs: 3877.5519
2024-04-29 17:44:56 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu] Trial #6: GFLOPs: 1339.9882. Time: 323.2636 us. Best GFLOPs: 3877.5519
2024-04-29 17:44:56 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu] Trial #7: GFLOPs: 816.3690. Time: 530.6049 us. Best GFLOPs: 3877.5519
2024-04-29 17:44:56 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu] Trial #8: GFLOPs: 615.0391. Time: 704.2957 us. Best GFLOPs: 3877.5519
2024-04-29 17:44:56 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu] Trial #9: GFLOPs: 1116.4697. Time: 387.9813 us. Best GFLOPs: 3877.5519
2024-04-29 17:44:56 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu] Trial #10: GFLOPs: 1791.5290. Time: 241.7875 us. Best GFLOPs: 3877.5519
2024-04-29 17:44:56 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu] Trial #11: GFLOPs: 1935.4593. Time: 223.8070 us. Best GFLOPs: 3877.5519
2024-04-29 17:44:56 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu] Trial #12: GFLOPs: 1738.3230. Time: 249.1881 us. Best GFLOPs: 3877.5519
2024-04-29 17:44:56 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu] Trial #13: GFLOPs: 1840.4058. Time: 235.3662 us. Best GFLOPs: 3877.5519
2024-04-29 17:44:56 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu] Trial #14: GFLOPs: 955.0575. Time: 453.5532 us. Best GFLOPs: 3877.5519
2024-04-29 17:44:56 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu] Trial #15: GFLOPs: 4689.8214. Time: 92.3637 us. Best GFLOPs: 4689.8214
2024-04-29 17:44:56 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu] Trial #16: GFLOPs: 1749.3720. Time: 247.6142 us. Best GFLOPs: 4689.8214
2024-04-29 17:44:56 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu] Trial #17: GFLOPs: 1430.1071. Time: 302.8930 us. Best GFLOPs: 4689.8214
2024-04-29 17:44:56 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu] Trial #18: GFLOPs: 1660.8357. Time: 260.8141 us. Best GFLOPs: 4689.8214
2024-04-29 17:44:56 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu] Trial #19: GFLOPs: 2303.1091. Time: 188.0803 us. Best GFLOPs: 4689.8214
2024-04-29 17:44:56 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu] Trial #20: GFLOPs: 345.5221. Time: 1253.6663 us. Best GFLOPs: 4689.8214
2024-04-29 17:44:56 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu] Trial #21: GFLOPs: 3979.9733. Time: 108.8373 us. Best GFLOPs: 4689.8214
2024-04-29 17:44:56 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu] Trial #22: GFLOPs: 1884.6467. Time: 229.8412 us. Best GFLOPs: 4689.8214
2024-04-29 17:44:56 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu] Trial #23: GFLOPs: 1553.8729. Time: 278.7676 us. Best GFLOPs: 4689.8214
2024-04-29 17:44:56 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu] Trial #24: GFLOPs: 5278.2387. Time: 82.0670 us. Best GFLOPs: 5278.2387
2024-04-29 17:44:56 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu] Trial #25: GFLOPs: 1099.5789. Time: 393.9412 us. Best GFLOPs: 5278.2387
2024-04-29 17:44:56 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu] Trial #26: GFLOPs: 1446.1090. Time: 299.5413 us. Best GFLOPs: 5278.2387
2024-04-29 17:44:56 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu] Trial #27: GFLOPs: 2059.4660. Time: 210.3309 us. Best GFLOPs: 5278.2387
2024-04-29 17:44:56 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu] Trial #28: GFLOPs: 426.7587. Time: 1015.0219 us. Best GFLOPs: 5278.2387
2024-04-29 17:44:56 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu] Trial #29: GFLOPs: 1775.8901. Time: 243.9168 us. Best GFLOPs: 5278.2387
2024-04-29 17:44:56 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu] Trial #30: GFLOPs: 2001.3652. Time: 216.4370 us. Best GFLOPs: 5278.2387
2024-04-29 17:44:56 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu] Trial #31: GFLOPs: 2286.6368. Time: 189.4352 us. Best GFLOPs: 5278.2387
2024-04-29 17:44:56 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu] Trial #32: GFLOPs: 4463.3667. Time: 97.0499 us. Best GFLOPs: 5278.2387
2024-04-29 17:44:56 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu] Trial #33: GFLOPs: 3933.6828. Time: 110.1180 us. Best GFLOPs: 5278.2387
2024-04-29 17:44:56 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu] Trial #34: GFLOPs: 934.1036. Time: 463.7274 us. Best GFLOPs: 5278.2387
2024-04-29 17:44:56 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu] Trial #35: GFLOPs: 2726.2854. Time: 158.8863 us. Best GFLOPs: 5278.2387
2024-04-29 17:44:56 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu] Trial #36: GFLOPs: 1496.7311. Time: 289.4103 us. Best GFLOPs: 5278.2387
2024-04-29 17:44:56 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu] Trial #37: GFLOPs: 633.3557. Time: 683.9275 us. Best GFLOPs: 5278.2387
2024-04-29 17:44:56 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu] Trial #38: GFLOPs: 1029.1535. Time: 420.8988 us. Best GFLOPs: 5278.2387
2024-04-29 17:44:56 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu] Trial #39: GFLOPs: 1570.1670. Time: 275.8747 us. Best GFLOPs: 5278.2387
2024-04-29 17:44:56 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu] Trial #40: GFLOPs: 1693.2488. Time: 255.8215 us. Best GFLOPs: 5278.2387
2024-04-29 17:44:56 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu] Trial #41: GFLOPs: 1517.4104. Time: 285.4662 us. Best GFLOPs: 5278.2387
2024-04-29 17:44:56 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu] Trial #42: GFLOPs: 804.9965. Time: 538.1010 us. Best GFLOPs: 5278.2387
2024-04-29 17:44:56 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu] Trial #43: GFLOPs: 1888.1668. Time: 229.4127 us. Best GFLOPs: 5278.2387
2024-04-29 17:44:56 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu] Trial #44: GFLOPs: 1612.9435. Time: 268.5583 us. Best GFLOPs: 5278.2387
2024-04-29 17:44:56 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu] Trial #45: GFLOPs: 1757.8750. Time: 246.4165 us. Best GFLOPs: 5278.2387
2024-04-29 17:44:56 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu] Trial #46: GFLOPs: 2698.8394. Time: 160.5021 us. Best GFLOPs: 5278.2387
2024-04-29 17:44:56 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu] Trial #47: GFLOPs: 1186.0330. Time: 365.2254 us. Best GFLOPs: 5278.2387
2024-04-29 17:44:56 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu] Trial #48: GFLOPs: 1866.3642. Time: 232.0926 us. Best GFLOPs: 5278.2387
2024-04-29 17:44:56 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu] Trial #49: GFLOPs: 1677.7854. Time: 258.1793 us. Best GFLOPs: 5278.2387
2024-04-29 17:44:56 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu] Trial #50: GFLOPs: 1022.4219. Time: 423.6699 us. Best GFLOPs: 5278.2387
2024-04-29 17:44:56 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu] Trial #51: GFLOPs: 2704.1395. Time: 160.1875 us. Best GFLOPs: 5278.2387
2024-04-29 17:44:56 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu] Trial #52: GFLOPs: 1770.9783. Time: 244.5933 us. Best GFLOPs: 5278.2387
2024-04-29 17:44:56 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu] Trial #53: GFLOPs: 3999.1846. Time: 108.3144 us. Best GFLOPs: 5278.2387
2024-04-29 17:44:56 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu] Trial #54: GFLOPs: 2394.5017. Time: 180.9017 us. Best GFLOPs: 5278.2387
2024-04-29 17:44:56 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu] Trial #55: GFLOPs: 932.9255. Time: 464.3130 us. Best GFLOPs: 5278.2387
2024-04-29 17:44:56 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu] Trial #56: GFLOPs: 3329.6285. Time: 130.0954 us. Best GFLOPs: 5278.2387
2024-04-29 17:44:56 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu] Trial #57: GFLOPs: 1484.8101. Time: 291.7339 us. Best GFLOPs: 5278.2387
2024-04-29 17:44:56 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu] Trial #58: GFLOPs: 1207.1662. Time: 358.8316 us. Best GFLOPs: 5278.2387
2024-04-29 17:44:56 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu] Trial #59: GFLOPs: 2711.0663. Time: 159.7782 us. Best GFLOPs: 5278.2387
2024-04-29 17:44:56 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu] Trial #60: GFLOPs: 4821.6370. Time: 89.8387 us. Best GFLOPs: 5278.2387
2024-04-29 17:44:56 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu] Trial #61: GFLOPs: 1735.2056. Time: 249.6358 us. Best GFLOPs: 5278.2387
2024-04-29 17:44:56 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu] Trial #62: GFLOPs: 2788.2275. Time: 155.3566 us. Best GFLOPs: 5278.2387
2024-04-29 17:44:56 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu] Trial #63: GFLOPs: 1968.6979. Time: 220.0284 us. Best GFLOPs: 5278.2387
2024-04-29 17:44:56 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu] Trial #64: GFLOPs: 964.5409. Time: 449.0939 us. Best GFLOPs: 5278.2387
2024-04-29 18:27:25 [INFO] [evolutionary_search.cc:713] Generating candidates......
2024-04-29 18:27:28 [INFO] [evolutionary_search.cc:715] Picked top 64 candidate(s) from database
2024-04-29 18:27:36 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x453f5d8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x50997f8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x50982f8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x5dd48a8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0xf6aa98)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0xb4bb608)]: 430 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x9227398)]: 0 failure(s)
2024-04-29 18:27:43 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x453f5d8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x50997f8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x50982f8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x5dd48a8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0xf6aa98)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0xb4bb608)]: 858 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x9227398)]: 0 failure(s)
2024-04-29 18:27:51 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x453f5d8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x50997f8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x50982f8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x5dd48a8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0xf6aa98)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0xb4bb608)]: 1286 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x9227398)]: 0 failure(s)
2024-04-29 18:27:51 [INFO] [evolutionary_search.cc:723] Sampled 58 candidate(s)
2024-04-29 18:28:12 [INFO] [evolutionary_search.cc:621] Evolve iter #0 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x453f5d8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x50997f8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x50982f8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x5dd48a8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0xf6aa98)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0xb4bb608)]: 102 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x9227398)]: 0 failure(s)
2024-04-29 18:28:35 [INFO] [evolutionary_search.cc:621] Evolve iter #1 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x453f5d8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x50997f8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x50982f8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x5dd48a8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0xf6aa98)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0xb4bb608)]: 100 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x9227398)]: 0 failure(s)
2024-04-29 18:28:57 [INFO] [evolutionary_search.cc:621] Evolve iter #2 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x453f5d8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x50997f8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x50982f8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x5dd48a8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0xf6aa98)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0xb4bb608)]: 95 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x9227398)]: 0 failure(s)
2024-04-29 18:29:18 [INFO] [evolutionary_search.cc:621] Evolve iter #3 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x453f5d8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x50997f8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x50982f8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x5dd48a8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0xf6aa98)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0xb4bb608)]: 86 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x9227398)]: 0 failure(s)
2024-04-29 18:29:24 [INFO] [evolutionary_search.cc:649] Scores of the best 64 candidates:
[1 : 16]:	1.4455  1.3645  1.1002  1.0701  1.0648  1.0647  1.0578  1.0457  1.0369  1.0369  1.0273  1.0159  1.0137  1.0132  1.0123  1.0113
[17 : 32]:	1.0105  1.0070  1.0065  1.0000  0.9951  0.9936  0.9917  0.9899  0.9874  0.9834  0.9817  0.9785  0.9777  0.9720  0.9607  0.9567
[33 : 48]:	0.9514  0.9471  0.9461  0.9422  0.9414  0.9339  0.9306  0.9303  0.9297  0.9290  0.9288  0.9268  0.9245  0.9245  0.9236  0.9219
[49 : 64]:	0.9211  0.9210  0.9207  0.9207  0.9207  0.9203  0.9191  0.9190  0.9165  0.9155  0.9154  0.9151  0.9151  0.9151  0.9150  0.9144
2024-04-29 18:29:24 [INFO] [evolutionary_search.cc:727] Got 64 candidate(s) with evolutionary search
2024-04-29 18:29:24 [INFO] [evolutionary_search.cc:730] Sending 64 candidates(s) for measurement
2024-04-29 18:30:39 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu] Trial #65: GFLOPs: 3338.7480. Time: 129.7401 us. Best GFLOPs: 5278.2387
2024-04-29 18:30:39 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu] Trial #66: GFLOPs: 3552.1153. Time: 121.9469 us. Best GFLOPs: 5278.2387
2024-04-29 18:30:39 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu] Trial #67: GFLOPs: 6555.3446. Time: 66.0788 us. Best GFLOPs: 6555.3446
2024-04-29 18:30:39 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu] Trial #68: GFLOPs: 7948.0763. Time: 54.4999 us. Best GFLOPs: 7948.0763
2024-04-29 18:30:39 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu] Trial #69: GFLOPs: 7992.7962. Time: 54.1950 us. Best GFLOPs: 7992.7962
2024-04-29 18:30:39 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu] Trial #70: GFLOPs: 8138.9478. Time: 53.2218 us. Best GFLOPs: 8138.9478
2024-04-29 18:30:39 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu] Trial #71: GFLOPs: 7894.8770. Time: 54.8672 us. Best GFLOPs: 8138.9478
2024-04-29 18:30:39 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu] Trial #72: GFLOPs: 7794.6423. Time: 55.5727 us. Best GFLOPs: 8138.9478
2024-04-29 18:30:39 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu] Trial #73: GFLOPs: 7873.9278. Time: 55.0131 us. Best GFLOPs: 8138.9478
2024-04-29 18:30:39 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu] Trial #74: GFLOPs: 7873.8788. Time: 55.0135 us. Best GFLOPs: 8138.9478
2024-04-29 18:30:39 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu] Trial #75: GFLOPs: 4356.5133. Time: 99.4303 us. Best GFLOPs: 8138.9478
2024-04-29 18:30:39 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu] Trial #76: GFLOPs: 2401.3704. Time: 180.3843 us. Best GFLOPs: 8138.9478
2024-04-29 18:30:39 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu] Trial #77: GFLOPs: 5172.3495. Time: 83.7471 us. Best GFLOPs: 8138.9478
2024-04-29 18:30:39 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu] Trial #78: GFLOPs: 4687.8244. Time: 92.4031 us. Best GFLOPs: 8138.9478
2024-04-29 18:30:39 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu] Trial #79: GFLOPs: 3854.3257. Time: 112.3853 us. Best GFLOPs: 8138.9478
2024-04-29 18:30:39 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu] Trial #80: GFLOPs: 3896.3058. Time: 111.1744 us. Best GFLOPs: 8138.9478
2024-04-29 18:30:39 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu] Trial #81: GFLOPs: 3853.6558. Time: 112.4048 us. Best GFLOPs: 8138.9478
2024-04-29 18:30:39 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu] Trial #82: GFLOPs: 3867.0021. Time: 112.0169 us. Best GFLOPs: 8138.9478
2024-04-29 18:30:39 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu] Trial #83: GFLOPs: 3832.1686. Time: 113.0351 us. Best GFLOPs: 8138.9478
2024-04-29 18:30:39 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu] Trial #84: GFLOPs: 2399.3598. Time: 180.5354 us. Best GFLOPs: 8138.9478
2024-04-29 18:30:39 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu] Trial #85: GFLOPs: 5099.9037. Time: 84.9368 us. Best GFLOPs: 8138.9478
2024-04-29 18:30:39 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu] Trial #86: GFLOPs: 5309.6326. Time: 81.5818 us. Best GFLOPs: 8138.9478
2024-04-29 18:30:39 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu] Trial #87: GFLOPs: 7298.7818. Time: 59.3482 us. Best GFLOPs: 8138.9478
2024-04-29 18:30:39 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu] Trial #88: GFLOPs: 5435.1917. Time: 79.6972 us. Best GFLOPs: 8138.9478
2024-04-29 18:30:39 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu] Trial #89: GFLOPs: 5247.2973. Time: 82.5510 us. Best GFLOPs: 8138.9478
2024-04-29 18:30:39 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu] Trial #90: GFLOPs: 4092.1160. Time: 105.8546 us. Best GFLOPs: 8138.9478
2024-04-29 18:30:39 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu] Trial #91: GFLOPs: 5776.9708. Time: 74.9821 us. Best GFLOPs: 8138.9478
2024-04-29 18:30:39 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu] Trial #92: GFLOPs: 5645.3847. Time: 76.7298 us. Best GFLOPs: 8138.9478
2024-04-29 18:30:39 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu] Trial #93: GFLOPs: 4689.3228. Time: 92.3736 us. Best GFLOPs: 8138.9478
2024-04-29 18:30:39 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu] Trial #94: GFLOPs: 2034.3981. Time: 212.9226 us. Best GFLOPs: 8138.9478
2024-04-29 18:30:39 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu] Trial #95: GFLOPs: 5405.0520. Time: 80.1416 us. Best GFLOPs: 8138.9478
2024-04-29 18:30:39 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu] Trial #96: GFLOPs: 6455.8919. Time: 67.0968 us. Best GFLOPs: 8138.9478
2024-04-29 18:30:39 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu] Trial #97: GFLOPs: 6463.1382. Time: 67.0215 us. Best GFLOPs: 8138.9478
2024-04-29 18:30:39 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu] Trial #98: GFLOPs: 4688.2120. Time: 92.3954 us. Best GFLOPs: 8138.9478
2024-04-29 18:30:39 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu] Trial #99: GFLOPs: 5933.7289. Time: 73.0012 us. Best GFLOPs: 8138.9478
2024-04-29 18:30:39 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu] Trial #100: GFLOPs: 7557.5086. Time: 57.3164 us. Best GFLOPs: 8138.9478
2024-04-29 18:30:39 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu] Trial #101: GFLOPs: 5352.4227. Time: 80.9296 us. Best GFLOPs: 8138.9478
2024-04-29 18:30:39 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu] Trial #102: GFLOPs: 2024.4807. Time: 213.9657 us. Best GFLOPs: 8138.9478
2024-04-29 18:30:39 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu] Trial #103: GFLOPs: 4694.3800. Time: 92.2740 us. Best GFLOPs: 8138.9478
2024-04-29 18:30:39 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu] Trial #104: GFLOPs: 1948.4942. Time: 222.3098 us. Best GFLOPs: 8138.9478
2024-04-29 18:30:39 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu] Trial #105: GFLOPs: 3976.2806. Time: 108.9383 us. Best GFLOPs: 8138.9478
2024-04-29 18:30:39 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu] Trial #106: GFLOPs: 1809.5089. Time: 239.3851 us. Best GFLOPs: 8138.9478
2024-04-29 18:30:39 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu] Trial #107: GFLOPs: 4646.5241. Time: 93.2244 us. Best GFLOPs: 8138.9478
2024-04-29 18:30:39 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu] Trial #108: GFLOPs: 5224.7838. Time: 82.9067 us. Best GFLOPs: 8138.9478
2024-04-29 18:30:39 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu] Trial #109: GFLOPs: 3074.1003. Time: 140.9093 us. Best GFLOPs: 8138.9478
2024-04-29 18:30:39 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu] Trial #110: GFLOPs: 4753.9696. Time: 91.1174 us. Best GFLOPs: 8138.9478
2024-04-29 18:30:39 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu] Trial #111: GFLOPs: 7227.5317. Time: 59.9332 us. Best GFLOPs: 8138.9478
2024-04-29 18:30:39 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu] Trial #112: GFLOPs: 2118.9475. Time: 204.4267 us. Best GFLOPs: 8138.9478
2024-04-29 18:30:39 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu] Trial #113: GFLOPs: 5756.3328. Time: 75.2509 us. Best GFLOPs: 8138.9478
2024-04-29 18:30:39 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu] Trial #114: GFLOPs: 4819.9750. Time: 89.8696 us. Best GFLOPs: 8138.9478
2024-04-29 18:30:39 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu] Trial #115: GFLOPs: 1816.6062. Time: 238.4498 us. Best GFLOPs: 8138.9478
2024-04-29 18:30:39 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu] Trial #116: GFLOPs: 2192.6014. Time: 197.5596 us. Best GFLOPs: 8138.9478
2024-04-29 18:30:39 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu] Trial #117: GFLOPs: 1343.6638. Time: 322.3793 us. Best GFLOPs: 8138.9478
2024-04-29 18:30:39 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu] Trial #118: GFLOPs: 2025.1501. Time: 213.8950 us. Best GFLOPs: 8138.9478
2024-04-29 18:30:39 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu] Trial #119: GFLOPs: 4917.4806. Time: 88.0877 us. Best GFLOPs: 8138.9478
2024-04-29 18:30:39 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu] Trial #120: GFLOPs: 3572.7607. Time: 121.2422 us. Best GFLOPs: 8138.9478
2024-04-29 18:30:39 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu] Trial #121: GFLOPs: 5409.9344. Time: 80.0693 us. Best GFLOPs: 8138.9478
2024-04-29 18:30:39 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu] Trial #122: GFLOPs: 5505.3813. Time: 78.6811 us. Best GFLOPs: 8138.9478
2024-04-29 18:30:39 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu] Trial #123: GFLOPs: 4673.8789. Time: 92.6788 us. Best GFLOPs: 8138.9478
2024-04-29 18:30:39 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu] Trial #124: GFLOPs: 4795.0668. Time: 90.3365 us. Best GFLOPs: 8138.9478
2024-04-29 18:30:39 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu] Trial #125: GFLOPs: 4710.3925. Time: 91.9604 us. Best GFLOPs: 8138.9478
2024-04-29 18:30:39 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu] Trial #126: GFLOPs: 617.4446. Time: 701.5518 us. Best GFLOPs: 8138.9478
2024-04-29 18:30:39 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu] Trial #127: GFLOPs: 1192.6944. Time: 363.1856 us. Best GFLOPs: 8138.9478
2024-04-29 18:30:39 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu] Trial #128: GFLOPs: 2758.4962. Time: 157.0310 us. Best GFLOPs: 8138.9478
2024-04-29 20:18:18 [INFO] [evolutionary_search.cc:713] Generating candidates......
2024-04-29 20:18:22 [INFO] [evolutionary_search.cc:715] Picked top 102 candidate(s) from database
2024-04-29 20:18:29 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x453f5d8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x50997f8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x50982f8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x5dd48a8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0xf6aa98)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0xb4bb608)]: 393 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x9227398)]: 0 failure(s)
2024-04-29 20:18:36 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x453f5d8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x50997f8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x50982f8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x5dd48a8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0xf6aa98)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0xb4bb608)]: 791 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x9227398)]: 0 failure(s)
2024-04-29 20:18:43 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x453f5d8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x50997f8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x50982f8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x5dd48a8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0xf6aa98)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0xb4bb608)]: 1183 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x9227398)]: 0 failure(s)
2024-04-29 20:18:49 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x453f5d8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x50997f8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x50982f8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x5dd48a8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0xf6aa98)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0xb4bb608)]: 1574 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x9227398)]: 0 failure(s)
2024-04-29 20:18:49 [INFO] [evolutionary_search.cc:723] Sampled 66 candidate(s)
2024-04-29 20:19:10 [INFO] [evolutionary_search.cc:621] Evolve iter #0 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x453f5d8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x50997f8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x50982f8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x5dd48a8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0xf6aa98)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0xb4bb608)]: 110 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x9227398)]: 0 failure(s)
2024-04-29 20:19:32 [INFO] [evolutionary_search.cc:621] Evolve iter #1 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x453f5d8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x50997f8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x50982f8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x5dd48a8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0xf6aa98)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0xb4bb608)]: 75 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x9227398)]: 0 failure(s)
2024-04-29 20:19:54 [INFO] [evolutionary_search.cc:621] Evolve iter #2 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x453f5d8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x50997f8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x50982f8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x5dd48a8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0xf6aa98)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0xb4bb608)]: 49 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x9227398)]: 0 failure(s)
2024-04-29 20:20:15 [INFO] [evolutionary_search.cc:621] Evolve iter #3 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x453f5d8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x50997f8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x50982f8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x5dd48a8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0xf6aa98)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0xb4bb608)]: 44 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x9227398)]: 0 failure(s)
2024-04-29 20:20:21 [INFO] [evolutionary_search.cc:649] Scores of the best 64 candidates:
[1 : 16]:	2.4584  1.9889  1.9604  1.9275  1.9254  1.9215  1.9206  1.8929  1.8674  1.7274  1.2732  1.2636  1.1765  1.1754  1.1720  1.1483
[17 : 32]:	1.1450  0.9849  0.9791  0.9780  0.9778  0.9771  0.9770  0.9735  0.9733  0.9723  0.9723  0.9718  0.9707  0.9674  0.9671  0.9668
[33 : 48]:	0.9652  0.9652  0.9642  0.9625  0.9618  0.9607  0.9605  0.9602  0.9568  0.9565  0.9475  0.9466  0.9461  0.9457  0.9450  0.9393
[49 : 64]:	0.9367  0.9287  0.9275  0.9253  0.9242  0.9233  0.9203  0.9188  0.9175  0.9171  0.9171  0.9165  0.9153  0.9147  0.9141  0.9130
2024-04-29 20:20:21 [INFO] [evolutionary_search.cc:727] Got 64 candidate(s) with evolutionary search
2024-04-29 20:20:21 [INFO] [evolutionary_search.cc:730] Sending 64 candidates(s) for measurement
2024-04-29 20:21:27 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu] Trial #129: GFLOPs: 7180.6453. Time: 60.3246 us. Best GFLOPs: 8138.9478
2024-04-29 20:21:27 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu] Trial #130: GFLOPs: 6757.7653. Time: 64.0995 us. Best GFLOPs: 8138.9478
2024-04-29 20:21:27 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu] Trial #131: GFLOPs: 7831.7018. Time: 55.3097 us. Best GFLOPs: 8138.9478
2024-04-29 20:21:27 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu] Trial #132: GFLOPs: 7927.7911. Time: 54.6394 us. Best GFLOPs: 8138.9478
2024-04-29 20:21:27 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu] Trial #133: GFLOPs: 7915.5415. Time: 54.7239 us. Best GFLOPs: 8138.9478
2024-04-29 20:21:27 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu] Trial #134: GFLOPs: 7044.7387. Time: 61.4884 us. Best GFLOPs: 8138.9478
2024-04-29 20:21:27 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu] Trial #135: GFLOPs: 7199.6087. Time: 60.1657 us. Best GFLOPs: 8138.9478
2024-04-29 20:21:27 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu] Trial #136: GFLOPs: 7925.3674. Time: 54.6561 us. Best GFLOPs: 8138.9478
2024-04-29 20:21:27 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu] Trial #137: GFLOPs: 7625.0229. Time: 56.8089 us. Best GFLOPs: 8138.9478
2024-04-29 20:21:27 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu] Trial #138: GFLOPs: 7780.1690. Time: 55.6761 us. Best GFLOPs: 8138.9478
2024-04-29 20:21:27 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu] Trial #139: GFLOPs: 6882.3004. Time: 62.9396 us. Best GFLOPs: 8138.9478
2024-04-29 20:21:27 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu] Trial #140: GFLOPs: 7314.7001. Time: 59.2190 us. Best GFLOPs: 8138.9478
2024-04-29 20:21:27 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu] Trial #141: GFLOPs: 901.0346. Time: 480.7467 us. Best GFLOPs: 8138.9478
2024-04-29 20:21:27 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu] Trial #142: GFLOPs: 878.6434. Time: 492.9980 us. Best GFLOPs: 8138.9478
2024-04-29 20:21:27 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu] Trial #143: GFLOPs: 6423.3061. Time: 67.4371 us. Best GFLOPs: 8138.9478
2024-04-29 20:21:27 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu] Trial #144: GFLOPs: 890.8349. Time: 486.2510 us. Best GFLOPs: 8138.9478
2024-04-29 20:21:27 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu] Trial #145: GFLOPs: 7189.2902. Time: 60.2520 us. Best GFLOPs: 8138.9478
2024-04-29 20:21:27 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu] Trial #146: GFLOPs: 7623.0019. Time: 56.8240 us. Best GFLOPs: 8138.9478
2024-04-29 20:21:27 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu] Trial #147: GFLOPs: 7897.5436. Time: 54.8486 us. Best GFLOPs: 8138.9478
2024-04-29 20:21:27 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu] Trial #148: GFLOPs: 8108.9123. Time: 53.4189 us. Best GFLOPs: 8138.9478
2024-04-29 20:21:27 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu] Trial #149: GFLOPs: 7934.8578. Time: 54.5907 us. Best GFLOPs: 8138.9478
2024-04-29 20:21:27 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu] Trial #150: GFLOPs: 7460.3389. Time: 58.0630 us. Best GFLOPs: 8138.9478
2024-04-29 20:21:27 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu] Trial #151: GFLOPs: 7858.4650. Time: 55.1214 us. Best GFLOPs: 8138.9478
2024-04-29 20:21:27 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu] Trial #152: GFLOPs: 7599.4468. Time: 57.0001 us. Best GFLOPs: 8138.9478
2024-04-29 20:21:27 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu] Trial #153: GFLOPs: 7681.1743. Time: 56.3936 us. Best GFLOPs: 8138.9478
2024-04-29 20:21:27 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu] Trial #154: GFLOPs: 7922.6143. Time: 54.6751 us. Best GFLOPs: 8138.9478
2024-04-29 20:21:27 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu] Trial #155: GFLOPs: 7932.8884. Time: 54.6042 us. Best GFLOPs: 8138.9478
2024-04-29 20:21:27 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu] Trial #156: GFLOPs: 7730.9113. Time: 56.0308 us. Best GFLOPs: 8138.9478
2024-04-29 20:21:27 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu] Trial #157: GFLOPs: 7787.0508. Time: 55.6269 us. Best GFLOPs: 8138.9478
2024-04-29 20:21:27 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu] Trial #158: GFLOPs: 7662.2660. Time: 56.5328 us. Best GFLOPs: 8138.9478
2024-04-29 20:21:27 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu] Trial #159: GFLOPs: 7758.6003. Time: 55.8309 us. Best GFLOPs: 8138.9478
2024-04-29 20:21:27 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu] Trial #160: GFLOPs: 7759.1827. Time: 55.8267 us. Best GFLOPs: 8138.9478
2024-04-29 20:21:27 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu] Trial #161: GFLOPs: 7926.6866. Time: 54.6470 us. Best GFLOPs: 8138.9478
2024-04-29 20:21:27 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu] Trial #162: GFLOPs: 7808.7237. Time: 55.4725 us. Best GFLOPs: 8138.9478
2024-04-29 20:21:27 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu] Trial #163: GFLOPs: 7809.3288. Time: 55.4682 us. Best GFLOPs: 8138.9478
2024-04-29 20:21:27 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu] Trial #164: GFLOPs: 7654.4073. Time: 56.5908 us. Best GFLOPs: 8138.9478
2024-04-29 20:21:27 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu] Trial #165: GFLOPs: 7598.5023. Time: 57.0072 us. Best GFLOPs: 8138.9478
2024-04-29 20:21:27 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu] Trial #166: GFLOPs: 7974.8524. Time: 54.3169 us. Best GFLOPs: 8138.9478
2024-04-29 20:21:27 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu] Trial #167: GFLOPs: 7424.8792. Time: 58.3403 us. Best GFLOPs: 8138.9478
2024-04-29 20:21:27 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu] Trial #168: GFLOPs: 7861.8541. Time: 55.0976 us. Best GFLOPs: 8138.9478
2024-04-29 20:21:27 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu] Trial #169: GFLOPs: 7971.9079. Time: 54.3370 us. Best GFLOPs: 8138.9478
2024-04-29 20:21:27 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu] Trial #170: GFLOPs: 7972.3245. Time: 54.3341 us. Best GFLOPs: 8138.9478
2024-04-29 20:21:27 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu] Trial #171: GFLOPs: 7561.9957. Time: 57.2824 us. Best GFLOPs: 8138.9478
2024-04-29 20:21:27 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu] Trial #172: GFLOPs: 8133.4316. Time: 53.2579 us. Best GFLOPs: 8138.9478
2024-04-29 20:21:27 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu] Trial #173: GFLOPs: 6227.3546. Time: 69.5591 us. Best GFLOPs: 8138.9478
2024-04-29 20:21:27 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu] Trial #174: GFLOPs: 7863.6094. Time: 55.0853 us. Best GFLOPs: 8138.9478
2024-04-29 20:21:27 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu] Trial #175: GFLOPs: 7787.3804. Time: 55.6245 us. Best GFLOPs: 8138.9478
2024-04-29 20:21:27 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu] Trial #176: GFLOPs: 7794.2832. Time: 55.5753 us. Best GFLOPs: 8138.9478
2024-04-29 20:21:27 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu] Trial #177: GFLOPs: 8167.7159. Time: 53.0343 us. Best GFLOPs: 8167.7159
2024-04-29 20:21:27 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu] Trial #178: GFLOPs: 7669.9433. Time: 56.4762 us. Best GFLOPs: 8167.7159
2024-04-29 20:21:27 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu] Trial #179: GFLOPs: 7558.9489. Time: 57.3055 us. Best GFLOPs: 8167.7159
2024-04-29 20:21:27 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu] Trial #180: GFLOPs: 6648.5071. Time: 65.1529 us. Best GFLOPs: 8167.7159
2024-04-29 20:21:27 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu] Trial #181: GFLOPs: 8178.1178. Time: 52.9669 us. Best GFLOPs: 8178.1178
2024-04-29 20:21:27 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu] Trial #182: GFLOPs: 7992.0114. Time: 54.2003 us. Best GFLOPs: 8178.1178
2024-04-29 20:21:27 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu] Trial #183: GFLOPs: 7702.9962. Time: 56.2339 us. Best GFLOPs: 8178.1178
2024-04-29 20:21:27 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu] Trial #184: GFLOPs: 7138.7335. Time: 60.6787 us. Best GFLOPs: 8178.1178
2024-04-29 20:21:27 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu] Trial #185: GFLOPs: 7358.8842. Time: 58.8635 us. Best GFLOPs: 8178.1178
2024-04-29 20:21:27 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu] Trial #186: GFLOPs: 7499.7246. Time: 57.7580 us. Best GFLOPs: 8178.1178
2024-04-29 20:21:27 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu] Trial #187: GFLOPs: 7552.4671. Time: 57.3547 us. Best GFLOPs: 8178.1178
2024-04-29 20:21:27 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu] Trial #188: GFLOPs: 7738.2300. Time: 55.9778 us. Best GFLOPs: 8178.1178
2024-04-29 20:21:27 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu] Trial #189: GFLOPs: 7728.8199. Time: 56.0460 us. Best GFLOPs: 8178.1178
2024-04-29 20:21:27 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu] Trial #190: GFLOPs: 2658.6397. Time: 162.9290 us. Best GFLOPs: 8178.1178
2024-04-29 20:21:27 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu] Trial #191: GFLOPs: 2307.4983. Time: 187.7225 us. Best GFLOPs: 8178.1178
2024-04-29 20:21:27 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu] Trial #192: GFLOPs: 849.9082. Time: 509.6661 us. Best GFLOPs: 8178.1178
2024-04-29 21:29:18 [INFO] [evolutionary_search.cc:713] Generating candidates......
2024-04-29 21:29:21 [INFO] [evolutionary_search.cc:715] Picked top 102 candidate(s) from database
2024-04-29 21:29:28 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x453f5d8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x50997f8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x50982f8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x5dd48a8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0xf6aa98)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0xb4bb608)]: 391 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x9227398)]: 0 failure(s)
2024-04-29 21:29:35 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x453f5d8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x50997f8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x50982f8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x5dd48a8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0xf6aa98)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0xb4bb608)]: 789 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x9227398)]: 0 failure(s)
2024-04-29 21:29:42 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x453f5d8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x50997f8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x50982f8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x5dd48a8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0xf6aa98)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0xb4bb608)]: 1182 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x9227398)]: 0 failure(s)
2024-04-29 21:29:50 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x453f5d8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x50997f8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x50982f8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x5dd48a8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0xf6aa98)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0xb4bb608)]: 1577 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x9227398)]: 0 failure(s)
2024-04-29 21:29:50 [INFO] [evolutionary_search.cc:723] Sampled 63 candidate(s)
2024-04-29 21:30:08 [INFO] [evolutionary_search.cc:621] Evolve iter #0 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x453f5d8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x50997f8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x50982f8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x5dd48a8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0xf6aa98)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0xb4bb608)]: 58 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x9227398)]: 0 failure(s)
2024-04-29 21:30:29 [INFO] [evolutionary_search.cc:621] Evolve iter #1 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x453f5d8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x50997f8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x50982f8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x5dd48a8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0xf6aa98)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0xb4bb608)]: 27 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x9227398)]: 0 failure(s)
2024-04-29 21:30:50 [INFO] [evolutionary_search.cc:621] Evolve iter #2 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x453f5d8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x50997f8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x50982f8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x5dd48a8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0xf6aa98)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0xb4bb608)]: 37 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x9227398)]: 0 failure(s)
2024-04-29 21:31:10 [INFO] [evolutionary_search.cc:621] Evolve iter #3 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x453f5d8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x50997f8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x50982f8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x5dd48a8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0xf6aa98)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0xb4bb608)]: 32 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x9227398)]: 0 failure(s)
2024-04-29 21:31:16 [INFO] [evolutionary_search.cc:649] Scores of the best 64 candidates:
[1 : 16]:	1.0275  1.0158  1.0068  0.9926  0.9869  0.9866  0.9789  0.9767  0.9767  0.9761  0.9744  0.9728  0.9716  0.9704  0.9700  0.9698
[17 : 32]:	0.9687  0.9686  0.9686  0.9679  0.9667  0.9661  0.9661  0.9653  0.9652  0.9649  0.9649  0.9647  0.9647  0.9646  0.9644  0.9641
[33 : 48]:	0.9641  0.9631  0.9627  0.9622  0.9617  0.9617  0.9614  0.9608  0.9607  0.9602  0.9596  0.9590  0.9584  0.9557  0.9556  0.9556
[49 : 64]:	0.9551  0.9549  0.9546  0.9543  0.9543  0.9542  0.9541  0.9540  0.9540  0.9537  0.9536  0.9534  0.9531  0.9530  0.9529  0.9528
2024-04-29 21:31:16 [INFO] [evolutionary_search.cc:727] Got 64 candidate(s) with evolutionary search
2024-04-29 21:31:16 [INFO] [evolutionary_search.cc:730] Sending 64 candidates(s) for measurement
2024-04-29 21:32:46 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu] Trial #193: GFLOPs: 7679.6373. Time: 56.4049 us. Best GFLOPs: 8178.1178
2024-04-29 21:32:46 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu] Trial #194: GFLOPs: 7686.3765. Time: 56.3555 us. Best GFLOPs: 8178.1178
2024-04-29 21:32:46 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu] Trial #195: GFLOPs: 7951.0494. Time: 54.4795 us. Best GFLOPs: 8178.1178
2024-04-29 21:32:46 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu] Trial #196: GFLOPs: 7454.0326. Time: 58.1121 us. Best GFLOPs: 8178.1178
2024-04-29 21:32:46 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu] Trial #197: GFLOPs: 8181.4417. Time: 52.9454 us. Best GFLOPs: 8181.4417
2024-04-29 21:32:46 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu] Trial #198: GFLOPs: 7875.4153. Time: 55.0027 us. Best GFLOPs: 8181.4417
2024-04-29 21:32:46 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu] Trial #199: GFLOPs: 6313.4360. Time: 68.6107 us. Best GFLOPs: 8181.4417
2024-04-29 21:32:46 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu] Trial #200: GFLOPs: 7984.6354. Time: 54.2504 us. Best GFLOPs: 8181.4417
2024-04-29 21:32:46 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu] Trial #201: GFLOPs: 8113.4293. Time: 53.3892 us. Best GFLOPs: 8181.4417
2024-04-29 21:32:46 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu] Trial #202: GFLOPs: 8192.1049. Time: 52.8764 us. Best GFLOPs: 8192.1049
2024-04-29 21:32:46 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu] Trial #203: GFLOPs: 7719.7531. Time: 56.1118 us. Best GFLOPs: 8192.1049
2024-04-29 21:32:46 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu] Trial #204: GFLOPs: 7952.2277. Time: 54.4715 us. Best GFLOPs: 8192.1049
2024-04-29 21:32:46 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu] Trial #205: GFLOPs: 7954.0821. Time: 54.4588 us. Best GFLOPs: 8192.1049
2024-04-29 21:32:46 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu] Trial #206: GFLOPs: 7543.4084. Time: 57.4236 us. Best GFLOPs: 8192.1049
2024-04-29 21:32:46 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu] Trial #207: GFLOPs: 8161.0461. Time: 53.0777 us. Best GFLOPs: 8192.1049
2024-04-29 21:32:46 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu] Trial #208: GFLOPs: 8126.9711. Time: 53.3002 us. Best GFLOPs: 8192.1049
2024-04-29 21:32:46 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu] Trial #209: GFLOPs: 7782.2814. Time: 55.6610 us. Best GFLOPs: 8192.1049
2024-04-29 21:32:46 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu] Trial #210: GFLOPs: 7928.1707. Time: 54.6367 us. Best GFLOPs: 8192.1049
2024-04-29 21:32:46 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu] Trial #211: GFLOPs: 7916.0516. Time: 54.7204 us. Best GFLOPs: 8192.1049
2024-04-29 21:32:46 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu] Trial #212: GFLOPs: 8084.8783. Time: 53.5777 us. Best GFLOPs: 8192.1049
2024-04-29 21:32:46 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu] Trial #213: GFLOPs: 7915.7951. Time: 54.7222 us. Best GFLOPs: 8192.1049
2024-04-29 21:32:46 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu] Trial #214: GFLOPs: 7739.1455. Time: 55.9712 us. Best GFLOPs: 8192.1049
2024-04-29 21:32:46 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu] Trial #215: GFLOPs: 7740.1872. Time: 55.9637 us. Best GFLOPs: 8192.1049
2024-04-29 21:32:46 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu] Trial #216: GFLOPs: 7933.6382. Time: 54.5991 us. Best GFLOPs: 8192.1049
2024-04-29 21:32:46 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu] Trial #217: GFLOPs: 8089.9574. Time: 53.5441 us. Best GFLOPs: 8192.1049
2024-04-29 21:32:46 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu] Trial #218: GFLOPs: 8096.0589. Time: 53.5037 us. Best GFLOPs: 8192.1049
2024-04-29 21:32:46 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu] Trial #219: GFLOPs: 7935.7126. Time: 54.5848 us. Best GFLOPs: 8192.1049
2024-04-29 21:32:46 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu] Trial #220: GFLOPs: 7924.3730. Time: 54.6629 us. Best GFLOPs: 8192.1049
2024-04-29 21:32:46 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu] Trial #221: GFLOPs: 7927.8422. Time: 54.6390 us. Best GFLOPs: 8192.1049
2024-04-29 21:32:46 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu] Trial #222: GFLOPs: 7394.5128. Time: 58.5798 us. Best GFLOPs: 8192.1049
2024-04-29 21:32:46 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu] Trial #223: GFLOPs: 7926.7078. Time: 54.6468 us. Best GFLOPs: 8192.1049
2024-04-29 21:32:46 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu] Trial #224: GFLOPs: 7882.2794. Time: 54.9548 us. Best GFLOPs: 8192.1049
2024-04-29 21:32:46 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu] Trial #225: GFLOPs: 6246.6178. Time: 69.3446 us. Best GFLOPs: 8192.1049
2024-04-29 21:32:46 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu] Trial #226: GFLOPs: 8081.6255. Time: 53.5993 us. Best GFLOPs: 8192.1049
2024-04-29 21:32:46 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu] Trial #227: GFLOPs: 8111.7212. Time: 53.4004 us. Best GFLOPs: 8192.1049
2024-04-29 21:32:46 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu] Trial #228: GFLOPs: 7639.8914. Time: 56.6984 us. Best GFLOPs: 8192.1049
2024-04-29 21:32:46 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu] Trial #229: GFLOPs: 7920.8922. Time: 54.6869 us. Best GFLOPs: 8192.1049
2024-04-29 21:32:46 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu] Trial #230: GFLOPs: 7919.4511. Time: 54.6969 us. Best GFLOPs: 8192.1049
2024-04-29 21:32:46 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu] Trial #231: GFLOPs: 7769.8089. Time: 55.7503 us. Best GFLOPs: 8192.1049
2024-04-29 21:32:46 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu] Trial #232: GFLOPs: 8110.8346. Time: 53.4063 us. Best GFLOPs: 8192.1049
2024-04-29 21:32:46 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu] Trial #233: GFLOPs: 7965.5794. Time: 54.3802 us. Best GFLOPs: 8192.1049
2024-04-29 21:32:46 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu] Trial #234: GFLOPs: 8179.2847. Time: 52.9593 us. Best GFLOPs: 8192.1049
2024-04-29 21:32:46 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu] Trial #235: GFLOPs: 7783.9371. Time: 55.6491 us. Best GFLOPs: 8192.1049
2024-04-29 21:32:46 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu] Trial #236: GFLOPs: 8076.8458. Time: 53.6310 us. Best GFLOPs: 8192.1049
2024-04-29 21:32:46 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu] Trial #237: GFLOPs: 7922.9061. Time: 54.6730 us. Best GFLOPs: 8192.1049
2024-04-29 21:32:46 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu] Trial #238: GFLOPs: 7814.6364. Time: 55.4305 us. Best GFLOPs: 8192.1049
2024-04-29 21:32:46 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu] Trial #239: GFLOPs: 7680.3678. Time: 56.3996 us. Best GFLOPs: 8192.1049
2024-04-29 21:32:46 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu] Trial #240: GFLOPs: 7682.8503. Time: 56.3813 us. Best GFLOPs: 8192.1049
2024-04-29 21:32:46 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu] Trial #241: GFLOPs: 7720.4655. Time: 56.1066 us. Best GFLOPs: 8192.1049
2024-04-29 21:32:46 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu] Trial #242: GFLOPs: 7850.7654. Time: 55.1754 us. Best GFLOPs: 8192.1049
2024-04-29 21:32:46 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu] Trial #243: GFLOPs: 7806.8475. Time: 55.4858 us. Best GFLOPs: 8192.1049
2024-04-29 21:32:46 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu] Trial #244: GFLOPs: 8096.2542. Time: 53.5024 us. Best GFLOPs: 8192.1049
2024-04-29 21:32:46 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu] Trial #245: GFLOPs: 7905.1468. Time: 54.7959 us. Best GFLOPs: 8192.1049
2024-04-29 21:32:46 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu] Trial #246: GFLOPs: 7822.6934. Time: 55.3734 us. Best GFLOPs: 8192.1049
2024-04-29 21:32:46 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu] Trial #247: GFLOPs: 7908.2685. Time: 54.7742 us. Best GFLOPs: 8192.1049
2024-04-29 21:32:46 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu] Trial #248: GFLOPs: 8108.9922. Time: 53.4184 us. Best GFLOPs: 8192.1049
2024-04-29 21:32:46 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu] Trial #249: GFLOPs: 7941.8490. Time: 54.5426 us. Best GFLOPs: 8192.1049
2024-04-29 21:32:46 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu] Trial #250: GFLOPs: 7894.5061. Time: 54.8697 us. Best GFLOPs: 8192.1049
2024-04-29 21:32:46 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu] Trial #251: GFLOPs: 7857.2022. Time: 55.1302 us. Best GFLOPs: 8192.1049
2024-04-29 21:32:46 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu] Trial #252: GFLOPs: 7954.4673. Time: 54.4561 us. Best GFLOPs: 8192.1049
2024-04-29 21:32:46 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu] Trial #253: GFLOPs: 7562.3380. Time: 57.2798 us. Best GFLOPs: 8192.1049
2024-04-29 21:32:46 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu] Trial #254: GFLOPs: 619.9579. Time: 698.7078 us. Best GFLOPs: 8192.1049
2024-04-29 21:32:46 [INFO] [task_scheduler.cc:121] [Task #0: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu] Trial #255: Error in building:
LocalBuilder: Timeout, killed after 30.0 seconds
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(3), T.int64(224), T.int64(224)), "float32"), p1: T.Buffer((T.int64(6), T.int64(6), T.int64(3), T.int64(64)), "float32"), p2: T.Buffer((T.int64(1), T.int64(64), T.int64(1), T.int64(1)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(64), T.int64(224), T.int64(224)), "float32")):
        T.func_attr({"layout_free_buffers": [1], "tir.noalias": T.bool(True)})
        # with T.block("root"):
        input_tile_local = T.alloc_buffer((T.int64(3), T.int64(3136), T.int64(6), T.int64(6)), scope="local")
        data_pack = T.alloc_buffer((T.int64(6), T.int64(6), T.int64(3), T.int64(3136)))
        bgemm = T.alloc_buffer((T.int64(6), T.int64(6), T.int64(64), T.int64(3136)))
        inverse_local = T.alloc_buffer((T.int64(64), T.int64(3136), T.int64(4), T.int64(4)), scope="local")
        data_pack_local = T.alloc_buffer((T.int64(6), T.int64(6), T.int64(3), T.int64(3136)), scope="local")
        bgemm_local = T.alloc_buffer((T.int64(6), T.int64(6), T.int64(64), T.int64(3136)), scope="local")
        data_pack_shared = T.alloc_buffer((T.int64(6), T.int64(6), T.int64(3), T.int64(3136)), scope="shared")
        p1_shared = T.alloc_buffer((T.int64(6), T.int64(6), T.int64(3), T.int64(64)), scope="shared")
        for ci_p_fused_0 in T.thread_binding(T.int64(74), thread="blockIdx.x", annotations={"pragma_auto_unroll_max_step": 1024, "pragma_unroll_explicit": 1}):
            for ci_p_fused_1 in T.thread_binding(T.int64(128), thread="threadIdx.x"):
                for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(1), T.int64(6), T.int64(6)):
                    with T.block("input_tile"):
                        v_ci = T.axis.spatial(T.int64(3), (ci_p_fused_0 * T.int64(128) + ci_p_fused_1) // T.int64(3136) + ax0)
                        v_p = T.axis.spatial(T.int64(3136), (ci_p_fused_0 * T.int64(128) + ci_p_fused_1) % T.int64(3136) + ax1)
                        v_eps, v_nu = T.axis.remap("SS", [ax2, ax3])
                        T.where(ci_p_fused_0 * T.int64(128) + ci_p_fused_1 < T.int64(9408))
                        T.reads(p0[v_p // T.int64(3136), v_ci, v_p % T.int64(3136) // T.int64(56) * T.int64(4) + v_eps - T.int64(1), v_p % T.int64(56) * T.int64(4) + v_nu - T.int64(1)])
                        T.writes(input_tile_local[v_ci, v_p, v_eps, v_nu])
                        T.block_attr({"schedule_rule": "None"})
                        input_tile_local[v_ci, v_p, v_eps, v_nu] = T.if_then_else(T.int64(1) <= v_p % T.int64(3136) // T.int64(56) * T.int64(4) + v_eps and v_p % T.int64(3136) // T.int64(56) * T.int64(4) + v_eps < T.int64(225) and T.int64(1) <= v_p % T.int64(56) * T.int64(4) + v_nu and v_p % T.int64(56) * T.int64(4) + v_nu < T.int64(225), p0[v_p // T.int64(3136), v_ci, v_p % T.int64(3136) // T.int64(56) * T.int64(4) + v_eps - T.int64(1), v_p % T.int64(56) * T.int64(4) + v_nu - T.int64(1)], T.float32(0))
                for eps in T.unroll(T.int64(6)):
                    for nu in T.unroll(T.int64(6)):
                        with T.block("data_pack_init"):
                            v_eps, v_nu = T.axis.remap("SS", [eps, nu])
                            v_ci = T.axis.spatial(T.int64(3), (ci_p_fused_0 * T.int64(128) + ci_p_fused_1) // T.int64(3136))
                            v_p = T.axis.spatial(T.int64(3136), (ci_p_fused_0 * T.int64(128) + ci_p_fused_1) % T.int64(3136))
                            T.where(ci_p_fused_0 * T.int64(128) + ci_p_fused_1 < T.int64(9408))
                            T.reads()
                            T.writes(data_pack_local[v_eps, v_nu, v_ci, v_p])
                            T.block_attr({"schedule_rule": "conv2d_nchw_winograd_data_pack"})
                            data_pack_local[v_eps, v_nu, v_ci, v_p] = T.float32(0)
                        for r_a in T.unroll(T.int64(6)):
                            for r_b in T.unroll(T.int64(6)):
                                with T.block("data_pack_update"):
                                    v_eps, v_nu = T.axis.remap("SS", [eps, nu])
                                    v_ci = T.axis.spatial(T.int64(3), (ci_p_fused_0 * T.int64(128) + ci_p_fused_1) // T.int64(3136))
                                    v_p = T.axis.spatial(T.int64(3136), (ci_p_fused_0 * T.int64(128) + ci_p_fused_1) % T.int64(3136))
                                    v_r_a, v_r_b = T.axis.remap("RR", [r_a, r_b])
                                    T.where(ci_p_fused_0 * T.int64(128) + ci_p_fused_1 < T.int64(9408))
                                    T.reads(data_pack_local[v_eps, v_nu, v_ci, v_p], input_tile_local[v_ci, v_p, v_r_a, v_r_b])
                                    T.writes(data_pack_local[v_eps, v_nu, v_ci, v_p])
                                    T.block_attr({"schedule_rule": "conv2d_nchw_winograd_data_pack"})
                                    data_pack_local[v_eps, v_nu, v_ci, v_p] = data_pack_local[v_eps, v_nu, v_ci, v_p] + input_tile_local[v_ci, v_p, v_r_a, v_r_b] * T.Select(v_r_a % T.int64(6) == T.int64(5) and v_eps % T.int64(6) == T.int64(5), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(5) and v_eps % T.int64(6) == T.int64(4), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(5) and v_eps % T.int64(6) == T.int64(3), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(5) and v_eps % T.int64(6) == T.int64(2), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(5) and v_eps % T.int64(6) == T.int64(1), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(5) and v_eps % T.int64(6) == T.int64(0), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(4) and v_eps % T.int64(6) == T.int64(5), T.float32(1.5), T.Select(v_r_a % T.int64(6) == T.int64(4) and v_eps % T.int64(6) == T.int64(4), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(4) and v_eps % T.int64(6) == T.int64(3), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(4) and v_eps % T.int64(6) == T.int64(2), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(4) and v_eps % T.int64(6) == T.int64(1), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(4) and v_eps % T.int64(6) == T.int64(0), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(3) and v_eps % T.int64(6) == T.int64(5), T.float32(-2), T.Select(v_r_a % T.int64(6) == T.int64(3) and v_eps % T.int64(6) == T.int64(4), T.float32(-0.5), T.Select(v_r_a % T.int64(6) == T.int64(3) and v_eps % T.int64(6) == T.int64(3), T.float32(2), T.Select(v_r_a % T.int64(6) == T.int64(3) and v_eps % T.int64(6) == T.int64(2), T.float32(2.5), T.Select(v_r_a % T.int64(6) == T.int64(3) and v_eps % T.int64(6) == T.int64(1), T.float32(0.5), T.Select(v_r_a % T.int64(6) == T.int64(3) and v_eps % T.int64(6) == T.int64(0), T.float32(1.5), T.Select(v_r_a % T.int64(6) == T.int64(2) and v_eps % T.int64(6) == T.int64(5), T.float32(-1.5), T.Select(v_r_a % T.int64(6) == T.int64(2) and v_eps % T.int64(6) == T.int64(4), T.float32(-1), T.Select(v_r_a % T.int64(6) == T.int64(2) and v_eps % T.int64(6) == T.int64(3), T.float32(-1), T.Select(v_r_a % T.int64(6) == T.int64(2) and v_eps % T.int64(6) == T.int64(2), T.float32(0.5), T.Select(v_r_a % T.int64(6) == T.int64(2) and v_eps % T.int64(6) == T.int64(1), T.float32(-2.5), T.Select(v_r_a % T.int64(6) == T.int64(2) and v_eps % T.int64(6) == T.int64(0), T.float32(-2), T.Select(v_r_a % T.int64(6) == T.int64(1) and v_eps % T.int64(6) == T.int64(5), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(1) and v_eps % T.int64(6) == T.int64(4), T.float32(0.5), T.Select(v_r_a % T.int64(6) == T.int64(1) and v_eps % T.int64(6) == T.int64(3), T.float32(-2), T.Select(v_r_a % T.int64(6) == T.int64(1) and v_eps % T.int64(6) == T.int64(2), T.float32(-1), T.Select(v_r_a % T.int64(6) == T.int64(1) and v_eps % T.int64(6) == T.int64(1), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(1) and v_eps % T.int64(6) == T.int64(0), T.float32(-1.5), T.Select(v_r_a % T.int64(6) == T.int64(0) and v_eps % T.int64(6) == T.int64(5), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(0) and v_eps % T.int64(6) == T.int64(4), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(0) and v_eps % T.int64(6) == T.int64(3), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(0) and v_eps % T.int64(6) == T.int64(2), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(0) and v_eps % T.int64(6) == T.int64(1), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(0) and v_eps % T.int64(6) == T.int64(0), T.float32(1), T.float32(0))))))))))))))))))))))))))))))))))))) * T.Select(v_r_b % T.int64(6) == T.int64(5) and v_nu % T.int64(6) == T.int64(5), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(5) and v_nu % T.int64(6) == T.int64(4), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(5) and v_nu % T.int64(6) == T.int64(3), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(5) and v_nu % T.int64(6) == T.int64(2), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(5) and v_nu % T.int64(6) == T.int64(1), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(5) and v_nu % T.int64(6) == T.int64(0), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(4) and v_nu % T.int64(6) == T.int64(5), T.float32(1.5), T.Select(v_r_b % T.int64(6) == T.int64(4) and v_nu % T.int64(6) == T.int64(4), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(4) and v_nu % T.int64(6) == T.int64(3), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(4) and v_nu % T.int64(6) == T.int64(2), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(4) and v_nu % T.int64(6) == T.int64(1), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(4) and v_nu % T.int64(6) == T.int64(0), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(3) and v_nu % T.int64(6) == T.int64(5), T.float32(-2), T.Select(v_r_b % T.int64(6) == T.int64(3) and v_nu % T.int64(6) == T.int64(4), T.float32(-0.5), T.Select(v_r_b % T.int64(6) == T.int64(3) and v_nu % T.int64(6) == T.int64(3), T.float32(2), T.Select(v_r_b % T.int64(6) == T.int64(3) and v_nu % T.int64(6) == T.int64(2), T.float32(2.5), T.Select(v_r_b % T.int64(6) == T.int64(3) and v_nu % T.int64(6) == T.int64(1), T.float32(0.5), T.Select(v_r_b % T.int64(6) == T.int64(3) and v_nu % T.int64(6) == T.int64(0), T.float32(1.5), T.Select(v_r_b % T.int64(6) == T.int64(2) and v_nu % T.int64(6) == T.int64(5), T.float32(-1.5), T.Select(v_r_b % T.int64(6) == T.int64(2) and v_nu % T.int64(6) == T.int64(4), T.float32(-1), T.Select(v_r_b % T.int64(6) == T.int64(2) and v_nu % T.int64(6) == T.int64(3), T.float32(-1), T.Select(v_r_b % T.int64(6) == T.int64(2) and v_nu % T.int64(6) == T.int64(2), T.float32(0.5), T.Select(v_r_b % T.int64(6) == T.int64(2) and v_nu % T.int64(6) == T.int64(1), T.float32(-2.5), T.Select(v_r_b % T.int64(6) == T.int64(2) and v_nu % T.int64(6) == T.int64(0), T.float32(-2), T.Select(v_r_b % T.int64(6) == T.int64(1) and v_nu % T.int64(6) == T.int64(5), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(1) and v_nu % T.int64(6) == T.int64(4), T.float32(0.5), T.Select(v_r_b % T.int64(6) == T.int64(1) and v_nu % T.int64(6) == T.int64(3), T.float32(-2), T.Select(v_r_b % T.int64(6) == T.int64(1) and v_nu % T.int64(6) == T.int64(2), T.float32(-1), T.Select(v_r_b % T.int64(6) == T.int64(1) and v_nu % T.int64(6) == T.int64(1), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(1) and v_nu % T.int64(6) == T.int64(0), T.float32(-1.5), T.Select(v_r_b % T.int64(6) == T.int64(0) and v_nu % T.int64(6) == T.int64(5), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(0) and v_nu % T.int64(6) == T.int64(4), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(0) and v_nu % T.int64(6) == T.int64(3), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(0) and v_nu % T.int64(6) == T.int64(2), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(0) and v_nu % T.int64(6) == T.int64(1), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(0) and v_nu % T.int64(6) == T.int64(0), T.float32(1), T.float32(0)))))))))))))))))))))))))))))))))))))
                for ax0, ax1, ax2, ax3 in T.grid(T.int64(6), T.int64(6), T.int64(1), T.int64(1)):
                    with T.block("data_pack_local"):
                        v0, v1 = T.axis.remap("SS", [ax0, ax1])
                        v2 = T.axis.spatial(T.int64(3), (ci_p_fused_0 * T.int64(128) + ci_p_fused_1) // T.int64(3136) + ax2)
                        v3 = T.axis.spatial(T.int64(3136), (ci_p_fused_0 * T.int64(128) + ci_p_fused_1) % T.int64(3136) + ax3)
                        T.where(ci_p_fused_0 * T.int64(128) + ci_p_fused_1 < T.int64(9408))
                        T.reads(data_pack_local[v0, v1, v2, v3])
                        T.writes(data_pack[v0, v1, v2, v3])
                        data_pack[v0, v1, v2, v3] = data_pack_local[v0, v1, v2, v3]
        for eps_0_nu_0_co_0_p_0_fused in T.thread_binding(T.int64(48), thread="blockIdx.x", annotations={"pragma_auto_unroll_max_step": 1024, "pragma_unroll_explicit": 1}):
            for eps_1_nu_1_co_1_p_1_fused in T.thread_binding(T.int64(28), thread="vthread.x"):
                for eps_2_nu_2_co_2_p_2_fused in T.thread_binding(T.int64(96), thread="threadIdx.x"):
                    for eps_3_init, nu_3_init, co_3_init, p_3_init, eps_4_init, nu_4_init, co_4_init, p_4_init in T.grid(T.int64(1), T.int64(2), T.int64(1), T.int64(7), T.int64(1), T.int64(1), T.int64(4), T.int64(1)):
                        with T.block("bgemm_init"):
                            v_eps = T.axis.spatial(T.int64(6), eps_0_nu_0_co_0_p_0_fused // T.int64(8) + eps_3_init + eps_4_init)
                            v_nu = T.axis.spatial(T.int64(6), eps_2_nu_2_co_2_p_2_fused // T.int64(32) * T.int64(2) + nu_3_init + nu_4_init)
                            v_co = T.axis.spatial(T.int64(64), eps_0_nu_0_co_0_p_0_fused % T.int64(8) // T.int64(4) * T.int64(32) + eps_1_nu_1_co_1_p_1_fused // T.int64(7) * T.int64(8) + eps_2_nu_2_co_2_p_2_fused % T.int64(32) // T.int64(16) * T.int64(4) + co_3_init * T.int64(4) + co_4_init)
                            v_p = T.axis.spatial(T.int64(3136), eps_0_nu_0_co_0_p_0_fused % T.int64(4) * T.int64(784) + eps_1_nu_1_co_1_p_1_fused % T.int64(7) * T.int64(112) + eps_2_nu_2_co_2_p_2_fused % T.int64(16) * T.int64(7) + p_3_init + p_4_init)
                            T.reads()
                            T.writes(bgemm_local[v_eps, v_nu, v_co, v_p])
                            T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 32, "meta_schedule.tiling_structure": "SSSRRSRS"})
                            bgemm_local[v_eps, v_nu, v_co, v_p] = T.float32(0)
                    for ci_0 in range(T.int64(3)):
                        for ax0_ax1_ax2_ax3_fused_0 in range(T.int64(25)):
                            for ax0_ax1_ax2_ax3_fused_1 in T.thread_binding(T.int64(96), thread="threadIdx.x"):
                                for ax0_ax1_ax2_ax3_fused_2 in T.vectorized(T.int64(2)):
                                    with T.block("data_pack_shared"):
                                        v0 = T.axis.spatial(T.int64(6), eps_0_nu_0_co_0_p_0_fused // T.int64(8))
                                        v1 = T.axis.spatial(T.int64(6), (ax0_ax1_ax2_ax3_fused_0 * T.int64(192) + ax0_ax1_ax2_ax3_fused_1 * T.int64(2) + ax0_ax1_ax2_ax3_fused_2) // T.int64(784))
                                        v2 = T.axis.spatial(T.int64(3), ci_0)
                                        v3 = T.axis.spatial(T.int64(3136), eps_0_nu_0_co_0_p_0_fused % T.int64(4) * T.int64(784) + (ax0_ax1_ax2_ax3_fused_0 * T.int64(192) + ax0_ax1_ax2_ax3_fused_1 * T.int64(2) + ax0_ax1_ax2_ax3_fused_2) % T.int64(784))
                                        T.where((ax0_ax1_ax2_ax3_fused_0 * T.int64(96) + ax0_ax1_ax2_ax3_fused_1) * T.int64(2) + ax0_ax1_ax2_ax3_fused_2 < T.int64(4704))
                                        T.reads(data_pack[v0, v1, v2, v3])
                                        T.writes(data_pack_shared[v0, v1, v2, v3])
                                        data_pack_shared[v0, v1, v2, v3] = data_pack[v0, v1, v2, v3]
                        for ax0_ax1_ax2_ax3_fused_0 in range(T.int64(1)):
                            for ax0_ax1_ax2_ax3_fused_1 in T.thread_binding(T.int64(96), thread="threadIdx.x"):
                                for ax0_ax1_ax2_ax3_fused_2 in T.vectorized(T.int64(2)):
                                    with T.block("p1_shared"):
                                        v0 = T.axis.spatial(T.int64(6), eps_0_nu_0_co_0_p_0_fused // T.int64(8))
                                        v1 = T.axis.spatial(T.int64(6), (ax0_ax1_ax2_ax3_fused_0 * T.int64(192) + ax0_ax1_ax2_ax3_fused_1 * T.int64(2) + ax0_ax1_ax2_ax3_fused_2) // T.int64(32))
                                        v2 = T.axis.spatial(T.int64(3), ci_0)
                                        v3 = T.axis.spatial(T.int64(64), eps_0_nu_0_co_0_p_0_fused % T.int64(8) // T.int64(4) * T.int64(32) + (ax0_ax1_ax2_ax3_fused_0 * T.int64(192) + ax0_ax1_ax2_ax3_fused_1 * T.int64(2) + ax0_ax1_ax2_ax3_fused_2) % T.int64(32))
                                        T.reads(p1[v0, v1, v2, v3])
                                        T.writes(p1_shared[v0, v1, v2, v3])
                                        p1_shared[v0, v1, v2, v3] = p1[v0, v1, v2, v3]
                        for ci_1, eps_3, nu_3, co_3, p_3, ci_2, eps_4, nu_4, co_4, p_4 in T.grid(T.int64(1), T.int64(1), T.int64(2), T.int64(1), T.int64(7), T.int64(1), T.int64(1), T.int64(1), T.int64(4), T.int64(1)):
                            with T.block("bgemm_update"):
                                v_eps = T.axis.spatial(T.int64(6), eps_0_nu_0_co_0_p_0_fused // T.int64(8) + eps_3 + eps_4)
                                v_nu = T.axis.spatial(T.int64(6), eps_2_nu_2_co_2_p_2_fused // T.int64(32) * T.int64(2) + nu_3 + nu_4)
                                v_co = T.axis.spatial(T.int64(64), eps_0_nu_0_co_0_p_0_fused % T.int64(8) // T.int64(4) * T.int64(32) + eps_1_nu_1_co_1_p_1_fused // T.int64(7) * T.int64(8) + eps_2_nu_2_co_2_p_2_fused % T.int64(32) // T.int64(16) * T.int64(4) + co_3 * T.int64(4) + co_4)
                                v_p = T.axis.spatial(T.int64(3136), eps_0_nu_0_co_0_p_0_fused % T.int64(4) * T.int64(784) + eps_1_nu_1_co_1_p_1_fused % T.int64(7) * T.int64(112) + eps_2_nu_2_co_2_p_2_fused % T.int64(16) * T.int64(7) + p_3 + p_4)
                                v_ci = T.axis.reduce(T.int64(3), ci_0 + ci_1 + ci_2)
                                T.reads(bgemm_local[v_eps, v_nu, v_co, v_p], data_pack_shared[v_eps, v_nu, v_ci, v_p], p1_shared[v_eps, v_nu, v_ci, v_co])
                                T.writes(bgemm_local[v_eps, v_nu, v_co, v_p])
                                T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 32, "meta_schedule.tiling_structure": "SSSRRSRS"})
                                bgemm_local[v_eps, v_nu, v_co, v_p] = bgemm_local[v_eps, v_nu, v_co, v_p] + data_pack_shared[v_eps, v_nu, v_ci, v_p] * p1_shared[v_eps, v_nu, v_ci, v_co]
                    for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(2), T.int64(4), T.int64(7)):
                        with T.block("bgemm_local"):
                            v0 = T.axis.spatial(T.int64(6), eps_0_nu_0_co_0_p_0_fused // T.int64(8) + ax0)
                            v1 = T.axis.spatial(T.int64(6), eps_2_nu_2_co_2_p_2_fused // T.int64(32) * T.int64(2) + ax1)
                            v2 = T.axis.spatial(T.int64(64), eps_0_nu_0_co_0_p_0_fused % T.int64(8) // T.int64(4) * T.int64(32) + eps_1_nu_1_co_1_p_1_fused // T.int64(7) * T.int64(8) + eps_2_nu_2_co_2_p_2_fused % T.int64(32) // T.int64(16) * T.int64(4) + ax2)
                            v3 = T.axis.spatial(T.int64(3136), eps_0_nu_0_co_0_p_0_fused % T.int64(4) * T.int64(784) + eps_1_nu_1_co_1_p_1_fused % T.int64(7) * T.int64(112) + eps_2_nu_2_co_2_p_2_fused % T.int64(16) * T.int64(7) + ax3)
                            T.reads(bgemm_local[v0, v1, v2, v3])
                            T.writes(bgemm[v0, v1, v2, v3])
                            bgemm[v0, v1, v2, v3] = bgemm_local[v0, v1, v2, v3]
        for n_co_h_0_w_0_fused_0 in T.thread_binding(T.int64(3136), thread="blockIdx.x", annotations={"pragma_auto_unroll_max_step": 1024, "pragma_unroll_explicit": 1}):
            for n_co_h_0_w_0_fused_1 in T.thread_binding(T.int64(64), thread="threadIdx.x"):
                for ax0, ax1 in T.grid(T.int64(1), T.int64(1)):
                    for ax2 in T.unroll(T.int64(4)):
                        for ax3 in T.unroll(T.int64(4)):
                            with T.block("inverse_init"):
                                v_co = T.axis.spatial(T.int64(64), (n_co_h_0_w_0_fused_0 * T.int64(64) + n_co_h_0_w_0_fused_1) // T.int64(3136) + ax0)
                                v_p = T.axis.spatial(T.int64(3136), (n_co_h_0_w_0_fused_0 * T.int64(64) + n_co_h_0_w_0_fused_1) % T.int64(3136) + ax1)
                                v_vh, v_vw = T.axis.remap("SS", [ax2, ax3])
                                T.reads()
                                T.writes(inverse_local[v_co, v_p, v_vh, v_vw])
                                T.block_attr({"schedule_rule": "conv2d_nchw_winograd_inverse"})
                                inverse_local[v_co, v_p, v_vh, v_vw] = T.float32(0)
                            for ax4 in T.unroll(T.int64(6)):
                                for ax5 in T.unroll(T.int64(6)):
                                    with T.block("inverse_update"):
                                        v_co = T.axis.spatial(T.int64(64), (n_co_h_0_w_0_fused_0 * T.int64(64) + n_co_h_0_w_0_fused_1) // T.int64(3136) + ax0)
                                        v_p = T.axis.spatial(T.int64(3136), (n_co_h_0_w_0_fused_0 * T.int64(64) + n_co_h_0_w_0_fused_1) % T.int64(3136) + ax1)
                                        v_vh, v_vw, v_r_a, v_r_b = T.axis.remap("SSRR", [ax2, ax3, ax4, ax5])
                                        T.reads(inverse_local[v_co, v_p, v_vh, v_vw], bgemm[v_r_a, v_r_b, v_co, v_p])
                                        T.writes(inverse_local[v_co, v_p, v_vh, v_vw])
                                        T.block_attr({"schedule_rule": "conv2d_nchw_winograd_inverse"})
                                        inverse_local[v_co, v_p, v_vh, v_vw] = inverse_local[v_co, v_p, v_vh, v_vw] + bgemm[v_r_a, v_r_b, v_co, v_p] * T.Select(v_r_a % T.int64(6) == T.int64(5) and v_vh % T.int64(4) == T.int64(3), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(5) and v_vh % T.int64(4) == T.int64(2), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(5) and v_vh % T.int64(4) == T.int64(1), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(5) and v_vh % T.int64(4) == T.int64(0), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(4) and v_vh % T.int64(4) == T.int64(3), T.float32(-8), T.Select(v_r_a % T.int64(6) == T.int64(4) and v_vh % T.int64(4) == T.int64(2), T.float32(4), T.Select(v_r_a % T.int64(6) == T.int64(4) and v_vh % T.int64(4) == T.int64(1), T.float32(-2), T.Select(v_r_a % T.int64(6) == T.int64(4) and v_vh % T.int64(4) == T.int64(0), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(3) and v_vh % T.int64(4) == T.int64(3), T.float32(0.125), T.Select(v_r_a % T.int64(6) == T.int64(3) and v_vh % T.int64(4) == T.int64(2), T.float32(0.25), T.Select(v_r_a % T.int64(6) == T.int64(3) and v_vh % T.int64(4) == T.int64(1), T.float32(0.5), T.Select(v_r_a % T.int64(6) == T.int64(3) and v_vh % T.int64(4) == T.int64(0), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(2) and v_vh % T.int64(4) == T.int64(3), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(2) and v_vh % T.int64(4) == T.int64(2), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(2) and v_vh % T.int64(4) == T.int64(1), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(2) and v_vh % T.int64(4) == T.int64(0), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(1) and v_vh % T.int64(4) == T.int64(3), T.float32(-1), T.Select(v_r_a % T.int64(6) == T.int64(1) and v_vh % T.int64(4) == T.int64(2), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(1) and v_vh % T.int64(4) == T.int64(1), T.float32(-1), T.Select(v_r_a % T.int64(6) == T.int64(1) and v_vh % T.int64(4) == T.int64(0), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(0) and v_vh % T.int64(4) == T.int64(3), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(0) and v_vh % T.int64(4) == T.int64(2), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(0) and v_vh % T.int64(4) == T.int64(1), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(0) and v_vh % T.int64(4) == T.int64(0), T.float32(1), T.float32(0))))))))))))))))))))))))) * T.Select(v_r_b % T.int64(6) == T.int64(5) and v_vw % T.int64(4) == T.int64(3), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(5) and v_vw % T.int64(4) == T.int64(2), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(5) and v_vw % T.int64(4) == T.int64(1), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(5) and v_vw % T.int64(4) == T.int64(0), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(4) and v_vw % T.int64(4) == T.int64(3), T.float32(-8), T.Select(v_r_b % T.int64(6) == T.int64(4) and v_vw % T.int64(4) == T.int64(2), T.float32(4), T.Select(v_r_b % T.int64(6) == T.int64(4) and v_vw % T.int64(4) == T.int64(1), T.float32(-2), T.Select(v_r_b % T.int64(6) == T.int64(4) and v_vw % T.int64(4) == T.int64(0), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(3) and v_vw % T.int64(4) == T.int64(3), T.float32(0.125), T.Select(v_r_b % T.int64(6) == T.int64(3) and v_vw % T.int64(4) == T.int64(2), T.float32(0.25), T.Select(v_r_b % T.int64(6) == T.int64(3) and v_vw % T.int64(4) == T.int64(1), T.float32(0.5), T.Select(v_r_b % T.int64(6) == T.int64(3) and v_vw % T.int64(4) == T.int64(0), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(2) and v_vw % T.int64(4) == T.int64(3), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(2) and v_vw % T.int64(4) == T.int64(2), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(2) and v_vw % T.int64(4) == T.int64(1), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(2) and v_vw % T.int64(4) == T.int64(0), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(1) and v_vw % T.int64(4) == T.int64(3), T.float32(-1), T.Select(v_r_b % T.int64(6) == T.int64(1) and v_vw % T.int64(4) == T.int64(2), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(1) and v_vw % T.int64(4) == T.int64(1), T.float32(-1), T.Select(v_r_b % T.int64(6) == T.int64(1) and v_vw % T.int64(4) == T.int64(0), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(0) and v_vw % T.int64(4) == T.int64(3), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(0) and v_vw % T.int64(4) == T.int64(2), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(0) and v_vw % T.int64(4) == T.int64(1), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(0) and v_vw % T.int64(4) == T.int64(0), T.float32(1), T.float32(0)))))))))))))))))))))))))
                for h_1, w_1 in T.grid(T.int64(4), T.int64(4)):
                    with T.block("conv2d_winograd"):
                        v_n = T.axis.spatial(T.int64(1), T.int64(0))
                        v_co = T.axis.spatial(T.int64(64), (n_co_h_0_w_0_fused_0 * T.int64(64) + n_co_h_0_w_0_fused_1) // T.int64(3136))
                        v_h = T.axis.spatial(T.int64(224), (n_co_h_0_w_0_fused_0 * T.int64(64) + n_co_h_0_w_0_fused_1) % T.int64(3136) // T.int64(56) * T.int64(4) + h_1)
                        v_w = T.axis.spatial(T.int64(224), (n_co_h_0_w_0_fused_0 * T.int64(64) + n_co_h_0_w_0_fused_1) % T.int64(56) * T.int64(4) + w_1)
                        T.reads(inverse_local[v_co, v_n * T.int64(3136) + v_h // T.int64(4) * T.int64(56) + v_w // T.int64(4), v_h % T.int64(4), v_w % T.int64(4)], p2[v_n, v_co, T.int64(0), T.int64(0)])
                        T.writes(T_relu[v_n, v_co, v_h, v_w])
                        T_relu[v_n, v_co, v_h, v_w] = T.max(inverse_local[v_co, v_n * T.int64(3136) + v_h // T.int64(4) * T.int64(56) + v_w // T.int64(4), v_h % T.int64(4), v_w % T.int64(4)] + p2[v_n, v_co, T.int64(0), T.int64(0)], T.float32(0))
b0 = sch.get_block(name="data_pack", func_name="main")
b1 = sch.get_block(name="bgemm", func_name="main")
b2 = sch.get_block(name="inverse", func_name="main")
b3 = sch.get_block(name="conv2d_winograd", func_name="main")
b4 = sch.get_block(name="T_add", func_name="main")
b5 = sch.get_block(name="T_relu", func_name="main")
b6 = sch.get_block(name="root", func_name="main")
b7, b8 = sch.get_producers(block=b2)
sch.compute_inline(block=b8)
b9, = sch.get_consumers(block=b2)
l10, l11, l12, l13 = sch.get_loops(block=b9)
l14, l15 = sch.split(loop=l12, factors=[None, 4], preserve_unit_iters=True)
l16, l17 = sch.split(loop=l13, factors=[None, 4], preserve_unit_iters=True)
sch.reorder(l14, l16, l15, l17)
sch.compute_at(block=b2, loop=l16, preserve_unit_loops=True, index=-1)
sch.set_scope(block=b2, buffer_index=0, storage_scope="local")
l18, l19, l20, l21, l22, l23, l24, l25, l26, l27 = sch.get_loops(block=b2)
sch.unroll(loop=l24)
sch.unroll(loop=l25)
sch.unroll(loop=l26)
sch.unroll(loop=l27)
b28, b29 = sch.get_producers(block=b0)
sch.compute_inline(block=b29)
b30, = sch.get_producers(block=b28)
l31, l32, l33, l34, l35, l36 = sch.get_loops(block=b0)
sch.reorder(l33, l34, l31, l32, l35, l36)
sch.unroll(loop=l31)
sch.unroll(loop=l32)
sch.unroll(loop=l35)
sch.unroll(loop=l36)
l37 = sch.fuse(l33, l34, preserve_unit_iters=True)
v38 = sch.sample_categorical(candidates=[32, 64, 128, 256, 512, 1024], probs=[0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666], decision=2)
l39, l40 = sch.split(loop=l37, factors=[None, v38], preserve_unit_iters=True)
sch.bind(loop=l39, thread_axis="blockIdx.x")
sch.bind(loop=l40, thread_axis="threadIdx.x")
b41 = sch.cache_write(block=b0, write_buffer_index=0, storage_scope="local")
sch.reverse_compute_at(block=b41, loop=l40, preserve_unit_loops=True, index=-1)
sch.compute_at(block=b28, loop=l40, preserve_unit_loops=True, index=-1)
sch.set_scope(block=b28, buffer_index=0, storage_scope="local")
sch.compute_inline(block=b30)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSSRRSRS")
l42, l43, l44, l45, l46 = sch.get_loops(block=b1)
v47, v48, v49, v50, v51 = sch.sample_perfect_tile(loop=l42, n=5, max_innermost_factor=64, decision=[6, 1, 1, 1, 1])
l52, l53, l54, l55, l56 = sch.split(loop=l42, factors=[v47, v48, v49, v50, v51], preserve_unit_iters=True)
v57, v58, v59, v60, v61 = sch.sample_perfect_tile(loop=l43, n=5, max_innermost_factor=64, decision=[1, 1, 3, 2, 1])
l62, l63, l64, l65, l66 = sch.split(loop=l43, factors=[v57, v58, v59, v60, v61], preserve_unit_iters=True)
v67, v68, v69, v70, v71 = sch.sample_perfect_tile(loop=l44, n=5, max_innermost_factor=64, decision=[2, 4, 2, 1, 4])
l72, l73, l74, l75, l76 = sch.split(loop=l44, factors=[v67, v68, v69, v70, v71], preserve_unit_iters=True)
v77, v78, v79, v80, v81 = sch.sample_perfect_tile(loop=l45, n=5, max_innermost_factor=64, decision=[4, 7, 16, 7, 1])
l82, l83, l84, l85, l86 = sch.split(loop=l45, factors=[v77, v78, v79, v80, v81], preserve_unit_iters=True)
v87, v88, v89 = sch.sample_perfect_tile(loop=l46, n=3, max_innermost_factor=64, decision=[3, 1, 1])
l90, l91, l92 = sch.split(loop=l46, factors=[v87, v88, v89], preserve_unit_iters=True)
sch.reorder(l52, l62, l72, l82, l53, l63, l73, l83, l54, l64, l74, l84, l90, l91, l55, l65, l75, l85, l92, l56, l66, l76, l86)
l93 = sch.fuse(l52, l62, l72, l82, preserve_unit_iters=True)
sch.bind(loop=l93, thread_axis="blockIdx.x")
l94 = sch.fuse(l53, l63, l73, l83, preserve_unit_iters=True)
sch.bind(loop=l94, thread_axis="vthread.x")
l95 = sch.fuse(l54, l64, l74, l84, preserve_unit_iters=True)
sch.bind(loop=l95, thread_axis="threadIdx.x")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_low_inclusive", ann_val=32)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_high_inclusive", ann_val=1024)
b96 = sch.cache_write(block=b1, write_buffer_index=0, storage_scope="local")
sch.reverse_compute_at(block=b96, loop=l95, preserve_unit_loops=True, index=-1)
b97 = sch.cache_read(block=b1, read_buffer_index=0, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b97, loop=l90, preserve_unit_loops=True, index=-1)
l98, l99, l100, l101, l102, l103, l104, l105 = sch.get_loops(block=b97)
l106 = sch.fuse(l102, l103, l104, l105, preserve_unit_iters=True)
v107 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=1)
sch.annotate(block_or_loop=b97, ann_key="meta_schedule.cooperative_fetch", ann_val=v107)
b108 = sch.cache_read(block=b1, read_buffer_index=1, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b108, loop=l90, preserve_unit_loops=True, index=-1)
l109, l110, l111, l112, l113, l114, l115, l116 = sch.get_loops(block=b108)
l117 = sch.fuse(l113, l114, l115, l116, preserve_unit_iters=True)
v118 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=1)
sch.annotate(block_or_loop=b108, ann_key="meta_schedule.cooperative_fetch", ann_val=v118)
sch.reverse_compute_inline(block=b5)
sch.reverse_compute_inline(block=b4)
v119 = sch.sample_categorical(candidates=[0, 16, 64, 512, 1024], probs=[0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001], decision=4)
sch.annotate(block_or_loop=b6, ann_key="meta_schedule.unroll_explicit", ann_val=v119)
l120, l121, l122, l123, l124, l125 = sch.get_loops(block=b3)
l126 = sch.fuse(l120, l121, l122, l123, preserve_unit_iters=True)
v127 = sch.sample_categorical(candidates=[32, 64, 128, 256, 512, 1024], probs=[0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666], decision=1)
l128, l129 = sch.split(loop=l126, factors=[None, v127], preserve_unit_iters=True)
sch.bind(loop=l128, thread_axis="blockIdx.x")
sch.bind(loop=l129, thread_axis="threadIdx.x")
sch.enter_postproc()
sch.unannotate(block_or_loop=b97, ann_key="meta_schedule.cooperative_fetch")
l130, l131, l132, l133, l134 = sch.get_loops(block=b97)
l135, l136, l137 = sch.split(loop=l134, factors=[None, 96, 2], preserve_unit_iters=True)
sch.vectorize(loop=l137)
sch.bind(loop=l136, thread_axis="threadIdx.x")
sch.unannotate(block_or_loop=b108, ann_key="meta_schedule.cooperative_fetch")
l138, l139, l140, l141, l142 = sch.get_loops(block=b108)
l143, l144, l145 = sch.split(loop=l142, factors=[None, 96, 2], preserve_unit_iters=True)
sch.vectorize(loop=l145)
sch.bind(loop=l144, thread_axis="threadIdx.x")
b146 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b146, ann_key="meta_schedule.unroll_explicit")
b147, b148, b149, b150, b151, b152, b153, b154, b155 = sch.get_child_blocks(b146)
l156, l157, l158, l159, l160, l161 = sch.get_loops(block=b147)
l162, l163, l164, l165, l166, l167 = sch.get_loops(block=b148)
sch.annotate(block_or_loop=l162, ann_key="pragma_auto_unroll_max_step", ann_val=1024)
sch.annotate(block_or_loop=l162, ann_key="pragma_unroll_explicit", ann_val=1)
l168, l169, l170, l171, l172, l173 = sch.get_loops(block=b149)
l174, l175, l176, l177, l178, l179, l180 = sch.get_loops(block=b150)
l181, l182, l183, l184, l185, l186, l187 = sch.get_loops(block=b151)
l188, l189, l190, l191, l192, l193, l194, l195, l196, l197, l198, l199, l200, l201 = sch.get_loops(block=b152)
sch.annotate(block_or_loop=l188, ann_key="pragma_auto_unroll_max_step", ann_val=1024)
sch.annotate(block_or_loop=l188, ann_key="pragma_unroll_explicit", ann_val=1)
l202, l203, l204, l205, l206, l207, l208 = sch.get_loops(block=b153)
l209, l210, l211, l212, l213, l214, l215, l216 = sch.get_loops(block=b154)
sch.annotate(block_or_loop=l209, ann_key="pragma_auto_unroll_max_step", ann_val=1024)
sch.annotate(block_or_loop=l209, ann_key="pragma_unroll_explicit", ann_val=1)
l217, l218, l219, l220 = sch.get_loops(block=b155)
b221 = sch.get_block(name="data_pack", func_name="main")
l222, l223, l224, l225, l226, l227 = sch.get_loops(block=b221)
b228 = sch.decompose_reduction(block=b221, loop=l226)
b229 = sch.get_block(name="bgemm", func_name="main")
l230, l231, l232, l233, l234, l235, l236, l237, l238, l239, l240, l241, l242, l243 = sch.get_loops(block=b229)
b244 = sch.decompose_reduction(block=b229, loop=l233)
b245 = sch.get_block(name="inverse", func_name="main")
l246, l247, l248, l249, l250, l251, l252, l253 = sch.get_loops(block=b245)
b254 = sch.decompose_reduction(block=b245, loop=l252)
2024-04-29 21:32:46 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu] Trial #256: GFLOPs: 5668.0132. Time: 76.4235 us. Best GFLOPs: 8192.1049
2024-04-29 22:02:32 [INFO] [evolutionary_search.cc:713] Generating candidates......
2024-04-29 22:02:35 [INFO] [evolutionary_search.cc:715] Picked top 102 candidate(s) from database
2024-04-29 22:02:42 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x453f5d8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x50997f8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x50982f8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x5dd48a8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0xf6aa98)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0xb4bb608)]: 391 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x9227398)]: 0 failure(s)
2024-04-29 22:02:49 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x453f5d8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x50997f8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x50982f8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x5dd48a8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0xf6aa98)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0xb4bb608)]: 790 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x9227398)]: 0 failure(s)
2024-04-29 22:02:56 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x453f5d8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x50997f8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x50982f8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x5dd48a8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0xf6aa98)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0xb4bb608)]: 1184 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x9227398)]: 0 failure(s)
2024-04-29 22:03:02 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x453f5d8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x50997f8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x50982f8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x5dd48a8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0xf6aa98)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0xb4bb608)]: 1583 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x9227398)]: 0 failure(s)
2024-04-29 22:03:02 [INFO] [evolutionary_search.cc:723] Sampled 57 candidate(s)
2024-04-29 22:03:20 [INFO] [evolutionary_search.cc:621] Evolve iter #0 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x453f5d8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x50997f8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x50982f8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x5dd48a8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0xf6aa98)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0xb4bb608)]: 38 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x9227398)]: 0 failure(s)
2024-04-29 22:03:40 [INFO] [evolutionary_search.cc:621] Evolve iter #1 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x453f5d8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x50997f8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x50982f8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x5dd48a8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0xf6aa98)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0xb4bb608)]: 28 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x9227398)]: 0 failure(s)
2024-04-29 22:04:00 [INFO] [evolutionary_search.cc:621] Evolve iter #2 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x453f5d8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x50997f8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x50982f8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x5dd48a8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0xf6aa98)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0xb4bb608)]: 29 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x9227398)]: 0 failure(s)
2024-04-29 22:04:20 [INFO] [evolutionary_search.cc:621] Evolve iter #3 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x453f5d8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x50997f8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x50982f8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x5dd48a8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0xf6aa98)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0xb4bb608)]: 35 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x9227398)]: 0 failure(s)
2024-04-29 22:04:25 [INFO] [evolutionary_search.cc:649] Scores of the best 64 candidates:
[1 : 16]:	1.0254  1.0245  1.0039  1.0026  1.0014  1.0014  1.0011  0.9977  0.9953  0.9944  0.9937  0.9935  0.9935  0.9933  0.9928  0.9921
[17 : 32]:	0.9919  0.9915  0.9902  0.9902  0.9902  0.9899  0.9898  0.9890  0.9889  0.9877  0.9877  0.9869  0.9862  0.9861  0.9859  0.9857
[33 : 48]:	0.9853  0.9852  0.9845  0.9837  0.9836  0.9834  0.9829  0.9819  0.9818  0.9815  0.9811  0.9810  0.9810  0.9807  0.9803  0.9801
[49 : 64]:	0.9793  0.9786  0.9775  0.9772  0.9772  0.9771  0.9771  0.9766  0.9766  0.9766  0.9761  0.9758  0.9757  0.9757  0.9743  0.9743
2024-04-29 22:04:26 [INFO] [evolutionary_search.cc:727] Got 64 candidate(s) with evolutionary search
2024-04-29 22:04:26 [INFO] [evolutionary_search.cc:730] Sending 64 candidates(s) for measurement
2024-04-29 22:05:40 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu] Trial #257: GFLOPs: 7653.4318. Time: 56.5981 us. Best GFLOPs: 8192.1049
2024-04-29 22:05:40 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu] Trial #258: GFLOPs: 7668.3666. Time: 56.4878 us. Best GFLOPs: 8192.1049
2024-04-29 22:05:40 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu] Trial #259: GFLOPs: 7555.4954. Time: 57.3317 us. Best GFLOPs: 8192.1049
2024-04-29 22:05:40 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu] Trial #260: GFLOPs: 7607.9075. Time: 56.9367 us. Best GFLOPs: 8192.1049
2024-04-29 22:05:40 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu] Trial #261: GFLOPs: 7004.0105. Time: 61.8459 us. Best GFLOPs: 8192.1049
2024-04-29 22:05:40 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu] Trial #262: GFLOPs: 7006.3459. Time: 61.8253 us. Best GFLOPs: 8192.1049
2024-04-29 22:05:40 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu] Trial #263: GFLOPs: 7542.7743. Time: 57.4284 us. Best GFLOPs: 8192.1049
2024-04-29 22:05:40 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu] Trial #264: GFLOPs: 7705.9822. Time: 56.2121 us. Best GFLOPs: 8192.1049
2024-04-29 22:05:40 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu] Trial #265: GFLOPs: 7752.5990. Time: 55.8741 us. Best GFLOPs: 8192.1049
2024-04-29 22:05:40 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu] Trial #266: GFLOPs: 7759.5589. Time: 55.8240 us. Best GFLOPs: 8192.1049
2024-04-29 22:05:40 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu] Trial #267: GFLOPs: 6075.8924. Time: 71.2931 us. Best GFLOPs: 8192.1049
2024-04-29 22:05:40 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu] Trial #268: GFLOPs: 8225.4120. Time: 52.6623 us. Best GFLOPs: 8225.4120
2024-04-29 22:05:40 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu] Trial #269: GFLOPs: 7719.9374. Time: 56.1105 us. Best GFLOPs: 8225.4120
2024-04-29 22:05:40 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu] Trial #270: GFLOPs: 7762.1168. Time: 55.8056 us. Best GFLOPs: 8225.4120
2024-04-29 22:05:40 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu] Trial #271: GFLOPs: 5856.4484. Time: 73.9645 us. Best GFLOPs: 8225.4120
2024-04-29 22:05:40 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu] Trial #272: GFLOPs: 7756.5404. Time: 55.8457 us. Best GFLOPs: 8225.4120
2024-04-29 22:05:40 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu] Trial #273: GFLOPs: 7401.1724. Time: 58.5271 us. Best GFLOPs: 8225.4120
2024-04-29 22:05:40 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu] Trial #274: GFLOPs: 8199.0123. Time: 52.8319 us. Best GFLOPs: 8225.4120
2024-04-29 22:05:40 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu] Trial #275: GFLOPs: 8132.8097. Time: 53.2620 us. Best GFLOPs: 8225.4120
2024-04-29 22:05:40 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu] Trial #276: GFLOPs: 7499.7984. Time: 57.7575 us. Best GFLOPs: 8225.4120
2024-04-29 22:05:40 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu] Trial #277: GFLOPs: 7706.9307. Time: 56.2052 us. Best GFLOPs: 8225.4120
2024-04-29 22:05:40 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu] Trial #278: GFLOPs: 7738.2961. Time: 55.9774 us. Best GFLOPs: 8225.4120
2024-04-29 22:05:40 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu] Trial #279: GFLOPs: 8014.5517. Time: 54.0479 us. Best GFLOPs: 8225.4120
2024-04-29 22:05:40 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu] Trial #280: GFLOPs: 7829.9145. Time: 55.3224 us. Best GFLOPs: 8225.4120
2024-04-29 22:05:40 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu] Trial #281: GFLOPs: 8189.3062. Time: 52.8945 us. Best GFLOPs: 8225.4120
2024-04-29 22:05:40 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu] Trial #282: GFLOPs: 7777.7414. Time: 55.6935 us. Best GFLOPs: 8225.4120
2024-04-29 22:05:40 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu] Trial #283: GFLOPs: 8014.7307. Time: 54.0467 us. Best GFLOPs: 8225.4120
2024-04-29 22:05:40 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu] Trial #284: GFLOPs: 8105.1885. Time: 53.4435 us. Best GFLOPs: 8225.4120
2024-04-29 22:05:40 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu] Trial #285: GFLOPs: 8147.2072. Time: 53.1678 us. Best GFLOPs: 8225.4120
2024-04-29 22:05:40 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu] Trial #286: GFLOPs: 8210.1142. Time: 52.7605 us. Best GFLOPs: 8225.4120
2024-04-29 22:05:40 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu] Trial #287: GFLOPs: 7299.8917. Time: 59.3392 us. Best GFLOPs: 8225.4120
2024-04-29 22:05:40 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu] Trial #288: GFLOPs: 5912.5528. Time: 73.2627 us. Best GFLOPs: 8225.4120
2024-04-29 22:05:40 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu] Trial #289: GFLOPs: 8195.7590. Time: 52.8529 us. Best GFLOPs: 8225.4120
2024-04-29 22:05:40 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu] Trial #290: GFLOPs: 8081.0198. Time: 53.6033 us. Best GFLOPs: 8225.4120
2024-04-29 22:05:40 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu] Trial #291: GFLOPs: 8177.1929. Time: 52.9729 us. Best GFLOPs: 8225.4120
2024-04-29 22:05:40 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu] Trial #292: GFLOPs: 8153.4412. Time: 53.1272 us. Best GFLOPs: 8225.4120
2024-04-29 22:05:40 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu] Trial #293: GFLOPs: 7924.1439. Time: 54.6645 us. Best GFLOPs: 8225.4120
2024-04-29 22:05:40 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu] Trial #294: GFLOPs: 8089.4985. Time: 53.5471 us. Best GFLOPs: 8225.4120
2024-04-29 22:05:40 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu] Trial #295: GFLOPs: 8200.6525. Time: 52.8213 us. Best GFLOPs: 8225.4120
2024-04-29 22:05:40 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu] Trial #296: GFLOPs: 7932.4548. Time: 54.6072 us. Best GFLOPs: 8225.4120
2024-04-29 22:05:40 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu] Trial #297: GFLOPs: 8164.9184. Time: 53.0525 us. Best GFLOPs: 8225.4120
2024-04-29 22:05:40 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu] Trial #298: GFLOPs: 8053.8548. Time: 53.7841 us. Best GFLOPs: 8225.4120
2024-04-29 22:05:40 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu] Trial #299: GFLOPs: 7763.1097. Time: 55.7984 us. Best GFLOPs: 8225.4120
2024-04-29 22:05:40 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu] Trial #300: GFLOPs: 7944.5388. Time: 54.5242 us. Best GFLOPs: 8225.4120
2024-04-29 22:05:40 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu] Trial #301: GFLOPs: 7928.2753. Time: 54.6360 us. Best GFLOPs: 8225.4120
2024-04-29 22:05:40 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu] Trial #302: GFLOPs: 8178.8116. Time: 52.9624 us. Best GFLOPs: 8225.4120
2024-04-29 22:05:40 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu] Trial #303: GFLOPs: 8187.3457. Time: 52.9072 us. Best GFLOPs: 8225.4120
2024-04-29 22:05:40 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu] Trial #304: GFLOPs: 7593.8622. Time: 57.0420 us. Best GFLOPs: 8225.4120
2024-04-29 22:05:40 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu] Trial #305: GFLOPs: 7595.9611. Time: 57.0263 us. Best GFLOPs: 8225.4120
2024-04-29 22:05:40 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu] Trial #306: GFLOPs: 7585.0014. Time: 57.1087 us. Best GFLOPs: 8225.4120
2024-04-29 22:05:40 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu] Trial #307: GFLOPs: 8100.2557. Time: 53.4760 us. Best GFLOPs: 8225.4120
2024-04-29 22:05:40 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu] Trial #308: GFLOPs: 8184.9664. Time: 52.9226 us. Best GFLOPs: 8225.4120
2024-04-29 22:05:40 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu] Trial #309: GFLOPs: 8099.4668. Time: 53.4812 us. Best GFLOPs: 8225.4120
2024-04-29 22:05:40 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu] Trial #310: GFLOPs: 7166.9773. Time: 60.4396 us. Best GFLOPs: 8225.4120
2024-04-29 22:05:40 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu] Trial #311: GFLOPs: 8064.0651. Time: 53.7160 us. Best GFLOPs: 8225.4120
2024-04-29 22:05:40 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu] Trial #312: GFLOPs: 8014.2504. Time: 54.0499 us. Best GFLOPs: 8225.4120
2024-04-29 22:05:40 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu] Trial #313: GFLOPs: 8062.8185. Time: 53.7243 us. Best GFLOPs: 8225.4120
2024-04-29 22:05:40 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu] Trial #314: GFLOPs: 7993.4965. Time: 54.1902 us. Best GFLOPs: 8225.4120
2024-04-29 22:05:40 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu] Trial #315: GFLOPs: 7973.5225. Time: 54.3260 us. Best GFLOPs: 8225.4120
2024-04-29 22:05:40 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu] Trial #316: GFLOPs: 7871.2989. Time: 55.0315 us. Best GFLOPs: 8225.4120
2024-04-29 22:05:40 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu] Trial #317: GFLOPs: 7960.4583. Time: 54.4151 us. Best GFLOPs: 8225.4120
2024-04-29 22:05:40 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu] Trial #318: GFLOPs: 3707.5892. Time: 116.8332 us. Best GFLOPs: 8225.4120
2024-04-29 22:05:40 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu] Trial #319: GFLOPs: 1389.4040. Time: 311.7663 us. Best GFLOPs: 8225.4120
2024-04-29 22:05:40 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu] Trial #320: GFLOPs: 799.4375. Time: 541.8428 us. Best GFLOPs: 8225.4120
2024-04-29 23:42:20 [INFO] [evolutionary_search.cc:713] Generating candidates......
2024-04-29 23:42:24 [INFO] [evolutionary_search.cc:715] Picked top 102 candidate(s) from database
2024-04-29 23:42:31 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x453f5d8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x50997f8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x50982f8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x5dd48a8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0xf6aa98)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0xb4bb608)]: 395 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x9227398)]: 0 failure(s)
2024-04-29 23:42:37 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x453f5d8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x50997f8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x50982f8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x5dd48a8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0xf6aa98)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0xb4bb608)]: 796 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x9227398)]: 0 failure(s)
2024-04-29 23:42:44 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x453f5d8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x50997f8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x50982f8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x5dd48a8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0xf6aa98)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0xb4bb608)]: 1183 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x9227398)]: 0 failure(s)
2024-04-29 23:42:51 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x453f5d8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x50997f8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x50982f8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x5dd48a8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0xf6aa98)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0xb4bb608)]: 1570 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x9227398)]: 0 failure(s)
2024-04-29 23:42:51 [INFO] [evolutionary_search.cc:723] Sampled 70 candidate(s)
2024-04-29 23:43:09 [INFO] [evolutionary_search.cc:621] Evolve iter #0 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x453f5d8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x50997f8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x50982f8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x5dd48a8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0xf6aa98)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0xb4bb608)]: 41 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x9227398)]: 0 failure(s)
2024-04-29 23:43:28 [INFO] [evolutionary_search.cc:621] Evolve iter #1 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x453f5d8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x50997f8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x50982f8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x5dd48a8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0xf6aa98)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0xb4bb608)]: 36 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x9227398)]: 0 failure(s)
2024-04-29 23:43:49 [INFO] [evolutionary_search.cc:621] Evolve iter #2 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x453f5d8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x50997f8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x50982f8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x5dd48a8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0xf6aa98)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0xb4bb608)]: 27 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x9227398)]: 0 failure(s)
2024-04-29 23:44:09 [INFO] [evolutionary_search.cc:621] Evolve iter #3 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x453f5d8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x50997f8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x50982f8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x5dd48a8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0xf6aa98)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0xb4bb608)]: 25 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x9227398)]: 0 failure(s)
2024-04-29 23:44:14 [INFO] [evolutionary_search.cc:649] Scores of the best 64 candidates:
[1 : 16]:	1.0579  1.0322  1.0320  1.0204  1.0170  1.0167  1.0148  1.0132  1.0117  1.0114  1.0105  1.0089  1.0087  1.0074  1.0065  1.0062
[17 : 32]:	1.0062  1.0051  1.0026  1.0018  1.0013  1.0012  1.0010  1.0010  0.9999  0.9999  0.9995  0.9986  0.9986  0.9982  0.9981  0.9970
[33 : 48]:	0.9967  0.9966  0.9963  0.9963  0.9960  0.9956  0.9951  0.9949  0.9942  0.9941  0.9941  0.9940  0.9936  0.9930  0.9930  0.9930
[49 : 64]:	0.9922  0.9893  0.9880  0.9879  0.9879  0.9875  0.9859  0.9858  0.9856  0.9844  0.9844  0.9843  0.9843  0.9830  0.9822  0.9822
2024-04-29 23:44:15 [INFO] [evolutionary_search.cc:727] Got 64 candidate(s) with evolutionary search
2024-04-29 23:44:15 [INFO] [evolutionary_search.cc:730] Sending 64 candidates(s) for measurement
2024-04-29 23:45:33 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu] Trial #321: GFLOPs: 8002.8148. Time: 54.1271 us. Best GFLOPs: 8225.4120
2024-04-29 23:45:33 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu] Trial #322: GFLOPs: 7830.4681. Time: 55.3185 us. Best GFLOPs: 8225.4120
2024-04-29 23:45:33 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu] Trial #323: GFLOPs: 7555.4954. Time: 57.3317 us. Best GFLOPs: 8225.4120
2024-04-29 23:45:33 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu] Trial #324: GFLOPs: 7926.2857. Time: 54.6497 us. Best GFLOPs: 8225.4120
2024-04-29 23:45:33 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu] Trial #325: GFLOPs: 7480.5224. Time: 57.9063 us. Best GFLOPs: 8225.4120
2024-04-29 23:45:33 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu] Trial #326: GFLOPs: 7744.6086. Time: 55.9317 us. Best GFLOPs: 8225.4120
2024-04-29 23:45:33 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu] Trial #327: GFLOPs: 7345.3440. Time: 58.9720 us. Best GFLOPs: 8225.4120
2024-04-29 23:45:33 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu] Trial #328: GFLOPs: 7755.9113. Time: 55.8502 us. Best GFLOPs: 8225.4120
2024-04-29 23:45:33 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu] Trial #329: GFLOPs: 8012.6051. Time: 54.0610 us. Best GFLOPs: 8225.4120
2024-04-29 23:45:33 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu] Trial #330: GFLOPs: 8206.0064. Time: 52.7869 us. Best GFLOPs: 8225.4120
2024-04-29 23:45:33 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu] Trial #331: GFLOPs: 7922.3640. Time: 54.6768 us. Best GFLOPs: 8225.4120
2024-04-29 23:45:33 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu] Trial #332: GFLOPs: 7828.0470. Time: 55.3356 us. Best GFLOPs: 8225.4120
2024-04-29 23:45:33 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu] Trial #333: GFLOPs: 7900.3440. Time: 54.8292 us. Best GFLOPs: 8225.4120
2024-04-29 23:45:33 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu] Trial #334: GFLOPs: 8194.8805. Time: 52.8585 us. Best GFLOPs: 8225.4120
2024-04-29 23:45:33 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu] Trial #335: GFLOPs: 7768.1837. Time: 55.7620 us. Best GFLOPs: 8225.4120
2024-04-29 23:45:33 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu] Trial #336: GFLOPs: 8102.9375. Time: 53.4583 us. Best GFLOPs: 8225.4120
2024-04-29 23:45:33 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu] Trial #337: GFLOPs: 8183.1013. Time: 52.9346 us. Best GFLOPs: 8225.4120
2024-04-29 23:45:33 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu] Trial #338: GFLOPs: 8200.1207. Time: 52.8248 us. Best GFLOPs: 8225.4120
2024-04-29 23:45:33 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu] Trial #339: GFLOPs: 8058.0239. Time: 53.7563 us. Best GFLOPs: 8225.4120
2024-04-29 23:45:33 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu] Trial #340: GFLOPs: 8079.3574. Time: 53.6143 us. Best GFLOPs: 8225.4120
2024-04-29 23:45:33 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu] Trial #341: GFLOPs: 8173.2979. Time: 52.9981 us. Best GFLOPs: 8225.4120
2024-04-29 23:45:33 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu] Trial #342: GFLOPs: 8187.1379. Time: 52.9085 us. Best GFLOPs: 8225.4120
2024-04-29 23:45:33 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu] Trial #343: GFLOPs: 8208.6149. Time: 52.7701 us. Best GFLOPs: 8225.4120
2024-04-29 23:45:33 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu] Trial #344: GFLOPs: 7223.0135. Time: 59.9707 us. Best GFLOPs: 8225.4120
2024-04-29 23:45:33 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu] Trial #345: GFLOPs: 8099.2350. Time: 53.4828 us. Best GFLOPs: 8225.4120
2024-04-29 23:45:33 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu] Trial #346: GFLOPs: 8213.6684. Time: 52.7376 us. Best GFLOPs: 8225.4120
2024-04-29 23:45:33 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu] Trial #347: GFLOPs: 8120.4604. Time: 53.3430 us. Best GFLOPs: 8225.4120
2024-04-29 23:45:33 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu] Trial #348: GFLOPs: 8200.8935. Time: 52.8198 us. Best GFLOPs: 8225.4120
2024-04-29 23:45:33 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu] Trial #349: GFLOPs: 8188.6613. Time: 52.8987 us. Best GFLOPs: 8225.4120
2024-04-29 23:45:33 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu] Trial #350: GFLOPs: 8037.8910. Time: 53.8909 us. Best GFLOPs: 8225.4120
2024-04-29 23:45:33 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu] Trial #351: GFLOPs: 8235.6178. Time: 52.5971 us. Best GFLOPs: 8235.6178
2024-04-29 23:45:33 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu] Trial #352: GFLOPs: 8212.8278. Time: 52.7430 us. Best GFLOPs: 8235.6178
2024-04-29 23:45:33 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu] Trial #353: GFLOPs: 8157.7349. Time: 53.0992 us. Best GFLOPs: 8235.6178
2024-04-29 23:45:33 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu] Trial #354: GFLOPs: 8204.6692. Time: 52.7955 us. Best GFLOPs: 8235.6178
2024-04-29 23:45:33 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu] Trial #355: GFLOPs: 8106.2052. Time: 53.4368 us. Best GFLOPs: 8235.6178
2024-04-29 23:45:33 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu] Trial #356: GFLOPs: 8224.0035. Time: 52.6714 us. Best GFLOPs: 8235.6178
2024-04-29 23:45:33 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu] Trial #357: GFLOPs: 8108.6073. Time: 53.4209 us. Best GFLOPs: 8235.6178
2024-04-29 23:45:33 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu] Trial #358: GFLOPs: 8119.8594. Time: 53.3469 us. Best GFLOPs: 8235.6178
2024-04-29 23:45:33 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu] Trial #359: GFLOPs: 8071.8433. Time: 53.6642 us. Best GFLOPs: 8235.6178
2024-04-29 23:45:33 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu] Trial #360: GFLOPs: 8186.9691. Time: 52.9096 us. Best GFLOPs: 8235.6178
2024-04-29 23:45:33 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu] Trial #361: GFLOPs: 7850.8757. Time: 55.1747 us. Best GFLOPs: 8235.6178
2024-04-29 23:45:33 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu] Trial #362: GFLOPs: 8204.0013. Time: 52.7998 us. Best GFLOPs: 8235.6178
2024-04-29 23:45:33 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu] Trial #363: GFLOPs: 8204.9292. Time: 52.7938 us. Best GFLOPs: 8235.6178
2024-04-29 23:45:33 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu] Trial #364: GFLOPs: 8202.8137. Time: 52.8074 us. Best GFLOPs: 8235.6178
2024-04-29 23:45:33 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu] Trial #365: GFLOPs: 8101.4709. Time: 53.4680 us. Best GFLOPs: 8235.6178
2024-04-29 23:45:33 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu] Trial #366: GFLOPs: 8184.5378. Time: 52.9253 us. Best GFLOPs: 8235.6178
2024-04-29 23:45:33 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu] Trial #367: GFLOPs: 8220.3245. Time: 52.6949 us. Best GFLOPs: 8235.6178
2024-04-29 23:45:33 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu] Trial #368: GFLOPs: 8216.8831. Time: 52.7170 us. Best GFLOPs: 8235.6178
2024-04-29 23:45:33 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu] Trial #369: GFLOPs: 8209.0117. Time: 52.7675 us. Best GFLOPs: 8235.6178
2024-04-29 23:45:33 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu] Trial #370: GFLOPs: 7943.5828. Time: 54.5307 us. Best GFLOPs: 8235.6178
2024-04-29 23:45:33 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu] Trial #371: GFLOPs: 8197.0511. Time: 52.8445 us. Best GFLOPs: 8235.6178
2024-04-29 23:45:33 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu] Trial #372: GFLOPs: 8234.0509. Time: 52.6071 us. Best GFLOPs: 8235.6178
2024-04-29 23:45:33 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu] Trial #373: GFLOPs: 8208.7832. Time: 52.7690 us. Best GFLOPs: 8235.6178
2024-04-29 23:45:33 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu] Trial #374: GFLOPs: 8164.4317. Time: 53.0557 us. Best GFLOPs: 8235.6178
2024-04-29 23:45:33 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu] Trial #375: GFLOPs: 7912.9180. Time: 54.7421 us. Best GFLOPs: 8235.6178
2024-04-29 23:45:33 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu] Trial #376: GFLOPs: 7151.1433. Time: 60.5734 us. Best GFLOPs: 8235.6178
2024-04-29 23:45:33 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu] Trial #377: GFLOPs: 8064.0651. Time: 53.7160 us. Best GFLOPs: 8235.6178
2024-04-29 23:45:33 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu] Trial #378: GFLOPs: 8121.1271. Time: 53.3386 us. Best GFLOPs: 8235.6178
2024-04-29 23:45:33 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu] Trial #379: GFLOPs: 8063.8366. Time: 53.7175 us. Best GFLOPs: 8235.6178
2024-04-29 23:45:33 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu] Trial #380: GFLOPs: 8040.2237. Time: 53.8753 us. Best GFLOPs: 8235.6178
2024-04-29 23:45:33 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu] Trial #381: GFLOPs: 8039.7541. Time: 53.8784 us. Best GFLOPs: 8235.6178
2024-04-29 23:45:33 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu] Trial #382: GFLOPs: 2525.7369. Time: 171.5022 us. Best GFLOPs: 8235.6178
2024-04-29 23:45:33 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu] Trial #383: GFLOPs: 1022.4626. Time: 423.6530 us. Best GFLOPs: 8235.6178
2024-04-29 23:45:33 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu] Trial #384: GFLOPs: 2641.5237. Time: 163.9847 us. Best GFLOPs: 8235.6178
2024-04-30 00:48:10 [INFO] [evolutionary_search.cc:713] Generating candidates......
2024-04-30 00:48:14 [INFO] [evolutionary_search.cc:715] Picked top 102 candidate(s) from database
2024-04-30 00:48:21 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x453f5d8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x50997f8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x50982f8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x5dd48a8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0xf6aa98)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0xb4bb608)]: 395 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x9227398)]: 0 failure(s)
2024-04-30 00:48:29 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x453f5d8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x50997f8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x50982f8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x5dd48a8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0xf6aa98)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0xb4bb608)]: 780 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x9227398)]: 0 failure(s)
2024-04-30 00:48:36 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x453f5d8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x50997f8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x50982f8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x5dd48a8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0xf6aa98)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0xb4bb608)]: 1174 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x9227398)]: 0 failure(s)
2024-04-30 00:48:36 [INFO] [evolutionary_search.cc:723] Sampled 56 candidate(s)
2024-04-30 00:48:53 [INFO] [evolutionary_search.cc:621] Evolve iter #0 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x453f5d8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x50997f8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x50982f8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x5dd48a8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0xf6aa98)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0xb4bb608)]: 28 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x9227398)]: 0 failure(s)
2024-04-30 00:49:14 [INFO] [evolutionary_search.cc:621] Evolve iter #1 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x453f5d8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x50997f8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x50982f8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x5dd48a8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0xf6aa98)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0xb4bb608)]: 34 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x9227398)]: 0 failure(s)
2024-04-30 00:49:35 [INFO] [evolutionary_search.cc:621] Evolve iter #2 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x453f5d8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x50997f8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x50982f8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x5dd48a8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0xf6aa98)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0xb4bb608)]: 46 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x9227398)]: 0 failure(s)
2024-04-30 00:49:56 [INFO] [evolutionary_search.cc:621] Evolve iter #3 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x453f5d8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x50997f8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x50982f8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x5dd48a8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0xf6aa98)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0xb4bb608)]: 31 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x9227398)]: 0 failure(s)
2024-04-30 00:50:01 [INFO] [evolutionary_search.cc:649] Scores of the best 64 candidates:
[1 : 16]:	1.0368  1.0316  1.0259  1.0258  1.0146  1.0046  1.0026  1.0026  1.0014  1.0012  0.9993  0.9989  0.9983  0.9979  0.9978  0.9978
[17 : 32]:	0.9978  0.9972  0.9967  0.9966  0.9965  0.9960  0.9956  0.9956  0.9956  0.9956  0.9956  0.9953  0.9951  0.9949  0.9947  0.9946
[33 : 48]:	0.9945  0.9945  0.9945  0.9945  0.9945  0.9944  0.9944  0.9943  0.9943  0.9940  0.9939  0.9939  0.9939  0.9939  0.9939  0.9939
[49 : 64]:	0.9939  0.9937  0.9932  0.9929  0.9929  0.9925  0.9922  0.9922  0.9922  0.9922  0.9922  0.9922  0.9919  0.9919  0.9919  0.9919
2024-04-30 00:50:01 [INFO] [evolutionary_search.cc:727] Got 64 candidate(s) with evolutionary search
2024-04-30 00:50:01 [INFO] [evolutionary_search.cc:730] Sending 64 candidates(s) for measurement
2024-04-30 00:51:09 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu] Trial #385: GFLOPs: 7913.8365. Time: 54.7357 us. Best GFLOPs: 8235.6178
2024-04-30 00:51:09 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu] Trial #386: GFLOPs: 7842.9055. Time: 55.2307 us. Best GFLOPs: 8235.6178
2024-04-30 00:51:09 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu] Trial #387: GFLOPs: 7928.8606. Time: 54.6320 us. Best GFLOPs: 8235.6178
2024-04-30 00:51:09 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu] Trial #388: GFLOPs: 6075.0115. Time: 71.3035 us. Best GFLOPs: 8235.6178
2024-04-30 00:51:09 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu] Trial #389: GFLOPs: 6588.8756. Time: 65.7425 us. Best GFLOPs: 8235.6178
2024-04-30 00:51:09 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu] Trial #390: GFLOPs: 8314.0519. Time: 52.1009 us. Best GFLOPs: 8314.0519
2024-04-30 00:51:09 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu] Trial #391: GFLOPs: 8274.4836. Time: 52.3500 us. Best GFLOPs: 8314.0519
2024-04-30 00:51:09 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu] Trial #392: GFLOPs: 8315.3294. Time: 52.0929 us. Best GFLOPs: 8315.3294
2024-04-30 00:51:09 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu] Trial #393: GFLOPs: 8309.2625. Time: 52.1309 us. Best GFLOPs: 8315.3294
2024-04-30 00:51:09 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu] Trial #394: GFLOPs: 8058.9531. Time: 53.7501 us. Best GFLOPs: 8315.3294
2024-04-30 00:51:09 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu] Trial #395: GFLOPs: 7220.8968. Time: 59.9883 us. Best GFLOPs: 8315.3294
2024-04-30 00:51:09 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu] Trial #396: GFLOPs: 8258.7879. Time: 52.4495 us. Best GFLOPs: 8315.3294
2024-04-30 00:51:09 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu] Trial #397: GFLOPs: 8263.5307. Time: 52.4194 us. Best GFLOPs: 8315.3294
2024-04-30 00:51:09 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu] Trial #398: GFLOPs: 8292.7648. Time: 52.2346 us. Best GFLOPs: 8315.3294
2024-04-30 00:51:09 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu] Trial #399: GFLOPs: 8274.7499. Time: 52.3483 us. Best GFLOPs: 8315.3294
2024-04-30 00:51:09 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu] Trial #400: GFLOPs: 8058.4878. Time: 53.7532 us. Best GFLOPs: 8315.3294
2024-04-30 00:51:09 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu] Trial #401: GFLOPs: 8280.9405. Time: 52.3092 us. Best GFLOPs: 8315.3294
2024-04-30 00:51:09 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu] Trial #402: GFLOPs: 8276.6994. Time: 52.3360 us. Best GFLOPs: 8315.3294
2024-04-30 00:51:09 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu] Trial #403: GFLOPs: 8240.2468. Time: 52.5675 us. Best GFLOPs: 8315.3294
2024-04-30 00:51:09 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu] Trial #404: GFLOPs: 8278.3075. Time: 52.3258 us. Best GFLOPs: 8315.3294
2024-04-30 00:51:09 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu] Trial #405: GFLOPs: 8298.3699. Time: 52.1993 us. Best GFLOPs: 8315.3294
2024-04-30 00:51:09 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu] Trial #406: GFLOPs: 8135.8292. Time: 53.2422 us. Best GFLOPs: 8315.3294
2024-04-30 00:51:09 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu] Trial #407: GFLOPs: 8295.1852. Time: 52.2194 us. Best GFLOPs: 8315.3294
2024-04-30 00:51:09 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu] Trial #408: GFLOPs: 8285.2613. Time: 52.2819 us. Best GFLOPs: 8315.3294
2024-04-30 00:51:09 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu] Trial #409: GFLOPs: 8264.2516. Time: 52.4148 us. Best GFLOPs: 8315.3294
2024-04-30 00:51:09 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu] Trial #410: GFLOPs: 8148.5446. Time: 53.1591 us. Best GFLOPs: 8315.3294
2024-04-30 00:51:09 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu] Trial #411: GFLOPs: 8231.5444. Time: 52.6231 us. Best GFLOPs: 8315.3294
2024-04-30 00:51:09 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu] Trial #412: GFLOPs: 8204.4285. Time: 52.7970 us. Best GFLOPs: 8315.3294
2024-04-30 00:51:09 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu] Trial #413: GFLOPs: 8274.2623. Time: 52.3514 us. Best GFLOPs: 8315.3294
2024-04-30 00:51:09 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu] Trial #414: GFLOPs: 8322.4729. Time: 52.0482 us. Best GFLOPs: 8322.4729
2024-04-30 00:51:09 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu] Trial #415: GFLOPs: 8272.7123. Time: 52.3612 us. Best GFLOPs: 8322.4729
2024-04-30 00:51:09 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu] Trial #416: GFLOPs: 8297.5113. Time: 52.2047 us. Best GFLOPs: 8322.4729
2024-04-30 00:51:09 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu] Trial #417: GFLOPs: 8257.9964. Time: 52.4545 us. Best GFLOPs: 8322.4729
2024-04-30 00:51:09 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu] Trial #418: GFLOPs: 8293.0833. Time: 52.2326 us. Best GFLOPs: 8322.4729
2024-04-30 00:51:09 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu] Trial #419: GFLOPs: 8269.1498. Time: 52.3838 us. Best GFLOPs: 8322.4729
2024-04-30 00:51:09 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu] Trial #420: GFLOPs: 8283.6294. Time: 52.2922 us. Best GFLOPs: 8322.4729
2024-04-30 00:51:09 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu] Trial #421: GFLOPs: 8220.2907. Time: 52.6951 us. Best GFLOPs: 8322.4729
2024-04-30 00:51:09 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu] Trial #422: GFLOPs: 8272.1938. Time: 52.3645 us. Best GFLOPs: 8322.4729
2024-04-30 00:51:09 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu] Trial #423: GFLOPs: 8198.3865. Time: 52.8359 us. Best GFLOPs: 8322.4729
2024-04-30 00:51:09 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu] Trial #424: GFLOPs: 8308.0687. Time: 52.1384 us. Best GFLOPs: 8322.4729
2024-04-30 00:51:09 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu] Trial #425: GFLOPs: 8208.2045. Time: 52.7727 us. Best GFLOPs: 8322.4729
2024-04-30 00:51:09 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu] Trial #426: GFLOPs: 8076.7563. Time: 53.6316 us. Best GFLOPs: 8322.4729
2024-04-30 00:51:09 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu] Trial #427: GFLOPs: 8321.7403. Time: 52.0527 us. Best GFLOPs: 8322.4729
2024-04-30 00:51:09 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu] Trial #428: GFLOPs: 8276.8285. Time: 52.3352 us. Best GFLOPs: 8322.4729
2024-04-30 00:51:09 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu] Trial #429: GFLOPs: 8209.8833. Time: 52.7619 us. Best GFLOPs: 8322.4729
2024-04-30 00:51:09 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu] Trial #430: GFLOPs: 8296.2587. Time: 52.2126 us. Best GFLOPs: 8322.4729
2024-04-30 00:51:09 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu] Trial #431: GFLOPs: 8275.7744. Time: 52.3419 us. Best GFLOPs: 8322.4729
2024-04-30 00:51:09 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu] Trial #432: GFLOPs: 8329.1183. Time: 52.0066 us. Best GFLOPs: 8329.1183
2024-04-30 00:51:09 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu] Trial #433: GFLOPs: 8215.8003. Time: 52.7239 us. Best GFLOPs: 8329.1183
2024-04-30 00:51:09 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu] Trial #434: GFLOPs: 8142.4846. Time: 53.1987 us. Best GFLOPs: 8329.1183
2024-04-30 00:51:09 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu] Trial #435: GFLOPs: 8282.7986. Time: 52.2975 us. Best GFLOPs: 8329.1183
2024-04-30 00:51:09 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu] Trial #436: GFLOPs: 8210.4778. Time: 52.7581 us. Best GFLOPs: 8329.1183
2024-04-30 00:51:09 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu] Trial #437: GFLOPs: 8213.3223. Time: 52.7399 us. Best GFLOPs: 8329.1183
2024-04-30 00:51:09 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu] Trial #438: GFLOPs: 8308.3310. Time: 52.1368 us. Best GFLOPs: 8329.1183
2024-04-30 00:51:09 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu] Trial #439: GFLOPs: 8204.7294. Time: 52.7951 us. Best GFLOPs: 8329.1183
2024-04-30 00:51:09 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu] Trial #440: GFLOPs: 8112.4076. Time: 53.3959 us. Best GFLOPs: 8329.1183
2024-04-30 00:51:09 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu] Trial #441: GFLOPs: 8212.3330. Time: 52.7462 us. Best GFLOPs: 8329.1183
2024-04-30 00:51:09 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu] Trial #442: GFLOPs: 8176.0716. Time: 52.9801 us. Best GFLOPs: 8329.1183
2024-04-30 00:51:09 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu] Trial #443: GFLOPs: 8132.5415. Time: 53.2637 us. Best GFLOPs: 8329.1183
2024-04-30 00:51:09 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu] Trial #444: GFLOPs: 8121.8331. Time: 53.3339 us. Best GFLOPs: 8329.1183
2024-04-30 00:51:09 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu] Trial #445: GFLOPs: 8296.6547. Time: 52.2101 us. Best GFLOPs: 8329.1183
2024-04-30 00:51:09 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu] Trial #446: GFLOPs: 1040.9307. Time: 416.1366 us. Best GFLOPs: 8329.1183
2024-04-30 00:51:09 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu] Trial #447: GFLOPs: 1351.1301. Time: 320.5978 us. Best GFLOPs: 8329.1183
2024-04-30 00:51:09 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu] Trial #448: GFLOPs: 1402.0309. Time: 308.9585 us. Best GFLOPs: 8329.1183
