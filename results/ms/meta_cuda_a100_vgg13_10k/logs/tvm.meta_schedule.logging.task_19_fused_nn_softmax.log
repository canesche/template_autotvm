2024-04-29 17:02:34 [INFO] [task_scheduler.cc:160] Initializing Task #19: "fused_nn_softmax"
2024-04-29 17:02:34 [INFO] [task_scheduler.cc:35] 
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(1000)), "float32"), T_softmax_norm: T.Buffer((T.int64(1), T.int64(1000)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        T_softmax_maxelem = T.alloc_buffer((T.int64(1),))
        T_softmax_exp = T.alloc_buffer((T.int64(1), T.int64(1000)))
        T_softmax_expsum = T.alloc_buffer((T.int64(1),))
        for i0, k in T.grid(T.int64(1), T.int64(1000)):
            with T.block("T_softmax_maxelem"):
                v_i0, v_k = T.axis.remap("SR", [i0, k])
                T.reads(p0[v_i0, v_k])
                T.writes(T_softmax_maxelem[v_i0])
                with T.init():
                    T_softmax_maxelem[v_i0] = T.float32(-3.4028234663852886e+38)
                T_softmax_maxelem[v_i0] = T.max(T_softmax_maxelem[v_i0], p0[v_i0, v_k])
        for i0, i1 in T.grid(T.int64(1), T.int64(1000)):
            with T.block("T_softmax_exp"):
                v_i0, v_i1 = T.axis.remap("SS", [i0, i1])
                T.reads(p0[v_i0, v_i1], T_softmax_maxelem[v_i0])
                T.writes(T_softmax_exp[v_i0, v_i1])
                T_softmax_exp[v_i0, v_i1] = T.exp(p0[v_i0, v_i1] - T_softmax_maxelem[v_i0])
        for i0, k in T.grid(T.int64(1), T.int64(1000)):
            with T.block("T_softmax_expsum"):
                v_i0, v_k = T.axis.remap("SR", [i0, k])
                T.reads(T_softmax_exp[v_i0, v_k])
                T.writes(T_softmax_expsum[v_i0])
                with T.init():
                    T_softmax_expsum[v_i0] = T.float32(0)
                T_softmax_expsum[v_i0] = T_softmax_expsum[v_i0] + T_softmax_exp[v_i0, v_k]
        for i0, i1 in T.grid(T.int64(1), T.int64(1000)):
            with T.block("T_softmax_norm"):
                v_i0, v_i1 = T.axis.remap("SS", [i0, i1])
                T.reads(T_softmax_exp[v_i0, v_i1], T_softmax_expsum[v_i0])
                T.writes(T_softmax_norm[v_i0, v_i1])
                T.block_attr({"axis": 1})
                T_softmax_norm[v_i0, v_i1] = T_softmax_exp[v_i0, v_i1] / T_softmax_expsum[v_i0]
2024-04-29 17:02:34 [INFO] [task_scheduler.cc:164] Total 4 design space(s) generated
2024-04-29 17:02:34 [INFO] [task_scheduler.cc:170] Design space #0:
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(1000)), "float32"), T_softmax_norm: T.Buffer((T.int64(1), T.int64(1000)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        with T.block("root"):
            T.reads()
            T.writes()
            T.block_attr({"meta_schedule.unroll_explicit": 16})
            T_softmax_maxelem = T.alloc_buffer((T.int64(1),))
            T_softmax_expsum = T.alloc_buffer((T.int64(1),))
            for i0_fused_0 in T.thread_binding(T.int64(1), thread="blockIdx.x"):
                for i0_fused_1 in T.thread_binding(T.int64(1), thread="threadIdx.x"):
                    for k in range(T.int64(1000)):
                        with T.block("T_softmax_maxelem"):
                            v_i0 = T.axis.spatial(T.int64(1), T.int64(0))
                            v_k = T.axis.reduce(T.int64(1000), k)
                            T.reads(p0[v_i0, v_k])
                            T.writes(T_softmax_maxelem[v_i0])
                            with T.init():
                                T_softmax_maxelem[v_i0] = T.float32(-3.4028234663852886e+38)
                            T_softmax_maxelem[v_i0] = T.max(T_softmax_maxelem[v_i0], p0[v_i0, v_k])
            for i0_fused_0 in T.thread_binding(T.int64(1), thread="blockIdx.x"):
                for i0_fused_1 in T.thread_binding(T.int64(1), thread="threadIdx.x"):
                    for k in range(T.int64(1000)):
                        with T.block("T_softmax_expsum"):
                            v_i0 = T.axis.spatial(T.int64(1), T.int64(0))
                            v_k = T.axis.reduce(T.int64(1000), k)
                            T.reads(p0[v_i0, v_k], T_softmax_maxelem[v_i0])
                            T.writes(T_softmax_expsum[v_i0])
                            with T.init():
                                T_softmax_expsum[v_i0] = T.float32(0)
                            T_softmax_expsum[v_i0] = T_softmax_expsum[v_i0] + T.exp(p0[v_i0, v_k] - T_softmax_maxelem[v_i0])
            for i0_i1_fused_0 in T.thread_binding(T.int64(4), thread="blockIdx.x"):
                for i0_i1_fused_1 in T.thread_binding(T.int64(256), thread="threadIdx.x"):
                    with T.block("T_softmax_norm"):
                        v_i0 = T.axis.spatial(T.int64(1), T.int64(0))
                        v_i1 = T.axis.spatial(T.int64(1000), i0_i1_fused_0 * T.int64(256) + i0_i1_fused_1)
                        T.where(i0_i1_fused_0 * T.int64(256) + i0_i1_fused_1 < T.int64(1000))
                        T.reads(p0[v_i0, v_i1], T_softmax_maxelem[v_i0], T_softmax_expsum[v_i0])
                        T.writes(T_softmax_norm[v_i0, v_i1])
                        T.block_attr({"axis": 1})
                        T_softmax_norm[v_i0, v_i1] = T.exp(p0[v_i0, v_i1] - T_softmax_maxelem[v_i0]) / T_softmax_expsum[v_i0]
b0 = sch.get_block(name="T_softmax_maxelem", func_name="main")
b1 = sch.get_block(name="T_softmax_exp", func_name="main")
b2 = sch.get_block(name="T_softmax_expsum", func_name="main")
b3 = sch.get_block(name="T_softmax_norm", func_name="main")
b4 = sch.get_block(name="root", func_name="main")
sch.compute_inline(block=b1)
v5 = sch.sample_categorical(candidates=[0, 16, 64, 512, 1024], probs=[0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001], decision=1)
sch.annotate(block_or_loop=b4, ann_key="meta_schedule.unroll_explicit", ann_val=v5)
l6, l7 = sch.get_loops(block=b3)
l8 = sch.fuse(l6, l7, preserve_unit_iters=True)
v9 = sch.sample_categorical(candidates=[32, 64, 128, 256, 512], probs=[0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001], decision=3)
l10, l11 = sch.split(loop=l8, factors=[None, v9], preserve_unit_iters=True)
sch.bind(loop=l10, thread_axis="blockIdx.x")
sch.bind(loop=l11, thread_axis="threadIdx.x")
l12, l13 = sch.get_loops(block=b2)
l14 = sch.fuse(l12, preserve_unit_iters=True)
l15, l16 = sch.split(loop=l14, factors=[None, 1], preserve_unit_iters=True)
sch.bind(loop=l15, thread_axis="blockIdx.x")
sch.bind(loop=l16, thread_axis="threadIdx.x")
l17, l18 = sch.get_loops(block=b0)
l19 = sch.fuse(l17, preserve_unit_iters=True)
l20, l21 = sch.split(loop=l19, factors=[None, 1], preserve_unit_iters=True)
sch.bind(loop=l20, thread_axis="blockIdx.x")
sch.bind(loop=l21, thread_axis="threadIdx.x")
2024-04-29 17:02:34 [INFO] [task_scheduler.cc:170] Design space #1:
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(1000)), "float32"), T_softmax_norm: T.Buffer((T.int64(1), T.int64(1000)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        with T.block("root"):
            T.reads()
            T.writes()
            T.block_attr({"meta_schedule.unroll_explicit": 512})
            T_softmax_maxelem = T.alloc_buffer((T.int64(1),))
            T_softmax_expsum = T.alloc_buffer((T.int64(1),))
            for i0_fused in T.thread_binding(T.int64(1), thread="blockIdx.x"):
                for k_0 in range(T.int64(8)):
                    for k_1 in T.thread_binding(T.int64(128), thread="threadIdx.x"):
                        with T.block("T_softmax_maxelem"):
                            v_i0 = T.axis.spatial(T.int64(1), T.int64(0))
                            v_k = T.axis.reduce(T.int64(1000), k_0 * T.int64(128) + k_1)
                            T.where(k_0 * T.int64(128) + k_1 < T.int64(1000))
                            T.reads(p0[v_i0, v_k])
                            T.writes(T_softmax_maxelem[v_i0])
                            with T.init():
                                T_softmax_maxelem[v_i0] = T.float32(-3.4028234663852886e+38)
                            T_softmax_maxelem[v_i0] = T.max(T_softmax_maxelem[v_i0], p0[v_i0, v_k])
            for i0_fused_0 in T.thread_binding(T.int64(1), thread="blockIdx.x"):
                for i0_fused_1 in T.thread_binding(T.int64(1), thread="threadIdx.x"):
                    for k in range(T.int64(1000)):
                        with T.block("T_softmax_expsum"):
                            v_i0 = T.axis.spatial(T.int64(1), T.int64(0))
                            v_k = T.axis.reduce(T.int64(1000), k)
                            T.reads(p0[v_i0, v_k], T_softmax_maxelem[v_i0])
                            T.writes(T_softmax_expsum[v_i0])
                            with T.init():
                                T_softmax_expsum[v_i0] = T.float32(0)
                            T_softmax_expsum[v_i0] = T_softmax_expsum[v_i0] + T.exp(p0[v_i0, v_k] - T_softmax_maxelem[v_i0])
            for i0_i1_fused_0 in T.thread_binding(T.int64(8), thread="blockIdx.x"):
                for i0_i1_fused_1 in T.thread_binding(T.int64(128), thread="threadIdx.x"):
                    with T.block("T_softmax_norm"):
                        v_i0 = T.axis.spatial(T.int64(1), T.int64(0))
                        v_i1 = T.axis.spatial(T.int64(1000), i0_i1_fused_0 * T.int64(128) + i0_i1_fused_1)
                        T.where(i0_i1_fused_0 * T.int64(128) + i0_i1_fused_1 < T.int64(1000))
                        T.reads(p0[v_i0, v_i1], T_softmax_maxelem[v_i0], T_softmax_expsum[v_i0])
                        T.writes(T_softmax_norm[v_i0, v_i1])
                        T.block_attr({"axis": 1})
                        T_softmax_norm[v_i0, v_i1] = T.exp(p0[v_i0, v_i1] - T_softmax_maxelem[v_i0]) / T_softmax_expsum[v_i0]
b0 = sch.get_block(name="T_softmax_maxelem", func_name="main")
b1 = sch.get_block(name="T_softmax_exp", func_name="main")
b2 = sch.get_block(name="T_softmax_expsum", func_name="main")
b3 = sch.get_block(name="T_softmax_norm", func_name="main")
b4 = sch.get_block(name="root", func_name="main")
sch.compute_inline(block=b1)
v5 = sch.sample_categorical(candidates=[4, 8, 16, 32, 64, 128, 256, 512], probs=[0.125, 0.125, 0.125, 0.125, 0.125, 0.125, 0.125, 0.125], decision=5)
l6, l7 = sch.get_loops(block=b0)
l8, l9 = sch.split(loop=l7, factors=[None, v5], preserve_unit_iters=True)
sch.bind(loop=l9, thread_axis="threadIdx.x")
v10 = sch.sample_categorical(candidates=[0, 16, 64, 512, 1024], probs=[0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001], decision=3)
sch.annotate(block_or_loop=b4, ann_key="meta_schedule.unroll_explicit", ann_val=v10)
l11, l12 = sch.get_loops(block=b3)
l13 = sch.fuse(l11, l12, preserve_unit_iters=True)
v14 = sch.sample_categorical(candidates=[32, 64, 128, 256, 512], probs=[0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001], decision=2)
l15, l16 = sch.split(loop=l13, factors=[None, v14], preserve_unit_iters=True)
sch.bind(loop=l15, thread_axis="blockIdx.x")
sch.bind(loop=l16, thread_axis="threadIdx.x")
l17, l18 = sch.get_loops(block=b2)
l19 = sch.fuse(l17, preserve_unit_iters=True)
l20, l21 = sch.split(loop=l19, factors=[None, 1], preserve_unit_iters=True)
sch.bind(loop=l20, thread_axis="blockIdx.x")
sch.bind(loop=l21, thread_axis="threadIdx.x")
l22, l23, l24 = sch.get_loops(block=b0)
l25 = sch.fuse(l22, preserve_unit_iters=True)
sch.bind(loop=l25, thread_axis="blockIdx.x")
2024-04-29 17:02:34 [INFO] [task_scheduler.cc:170] Design space #2:
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(1000)), "float32"), T_softmax_norm: T.Buffer((T.int64(1), T.int64(1000)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        with T.block("root"):
            T.reads()
            T.writes()
            T.block_attr({"meta_schedule.unroll_explicit": 512})
            T_softmax_maxelem = T.alloc_buffer((T.int64(1),))
            T_softmax_expsum_shared = T.alloc_buffer((T.int64(1),), scope="shared")
            for i0_fused_0 in T.thread_binding(T.int64(1), thread="blockIdx.x"):
                for i0_fused_1 in T.thread_binding(T.int64(1), thread="threadIdx.x"):
                    for k in range(T.int64(1000)):
                        with T.block("T_softmax_maxelem"):
                            v_i0 = T.axis.spatial(T.int64(1), T.int64(0))
                            v_k = T.axis.reduce(T.int64(1000), k)
                            T.reads(p0[v_i0, v_k])
                            T.writes(T_softmax_maxelem[v_i0])
                            with T.init():
                                T_softmax_maxelem[v_i0] = T.float32(-3.4028234663852886e+38)
                            T_softmax_maxelem[v_i0] = T.max(T_softmax_maxelem[v_i0], p0[v_i0, v_k])
            for i0_fused in T.thread_binding(T.int64(1), thread="blockIdx.x"):
                for ax0, ax1_0 in T.grid(T.int64(1), T.int64(63)):
                    for ax1_1 in T.thread_binding(T.int64(16), thread="threadIdx.x"):
                        with T.block("T_softmax_expsum"):
                            v_i0 = T.axis.spatial(T.int64(1), ax0)
                            v_k = T.axis.reduce(T.int64(1000), ax1_0 * T.int64(16) + ax1_1)
                            T.where(ax1_0 * T.int64(16) + ax1_1 < T.int64(1000))
                            T.reads(p0[v_i0, v_k], T_softmax_maxelem[v_i0])
                            T.writes(T_softmax_expsum_shared[v_i0])
                            with T.init():
                                T_softmax_expsum_shared[v_i0] = T.float32(0)
                            T_softmax_expsum_shared[v_i0] = T_softmax_expsum_shared[v_i0] + T.exp(p0[v_i0, v_k] - T_softmax_maxelem[v_i0])
                for i1_0 in range(T.int64(63)):
                    for i1_1 in T.thread_binding(T.int64(16), thread="threadIdx.x"):
                        with T.block("T_softmax_norm"):
                            v_i0 = T.axis.spatial(T.int64(1), T.int64(0))
                            v_i1 = T.axis.spatial(T.int64(1000), i1_0 * T.int64(16) + i1_1)
                            T.where(i1_0 * T.int64(16) + i1_1 < T.int64(1000))
                            T.reads(p0[v_i0, v_i1], T_softmax_maxelem[v_i0], T_softmax_expsum_shared[v_i0])
                            T.writes(T_softmax_norm[v_i0, v_i1])
                            T.block_attr({"axis": 1})
                            T_softmax_norm[v_i0, v_i1] = T.exp(p0[v_i0, v_i1] - T_softmax_maxelem[v_i0]) / T_softmax_expsum_shared[v_i0]
b0 = sch.get_block(name="T_softmax_maxelem", func_name="main")
b1 = sch.get_block(name="T_softmax_exp", func_name="main")
b2 = sch.get_block(name="T_softmax_expsum", func_name="main")
b3 = sch.get_block(name="T_softmax_norm", func_name="main")
b4 = sch.get_block(name="root", func_name="main")
sch.compute_inline(block=b1)
b5, = sch.get_consumers(block=b2)
l6, l7 = sch.get_loops(block=b5)
v8 = sch.sample_categorical(candidates=[4, 8, 16, 32, 64, 128, 256, 512], probs=[0.125, 0.125, 0.125, 0.125, 0.125, 0.125, 0.125, 0.125], decision=2)
l9, l10 = sch.split(loop=l7, factors=[None, v8], preserve_unit_iters=True)
sch.bind(loop=l10, thread_axis="threadIdx.x")
sch.compute_at(block=b2, loop=l6, preserve_unit_loops=True, index=-1)
sch.set_scope(block=b2, buffer_index=0, storage_scope="shared")
l11, l12, l13 = sch.get_loops(block=b2)
l14, l15 = sch.split(loop=l13, factors=[None, v8], preserve_unit_iters=True)
sch.bind(loop=l15, thread_axis="threadIdx.x")
v16 = sch.sample_categorical(candidates=[0, 16, 64, 512, 1024], probs=[0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001], decision=3)
sch.annotate(block_or_loop=b4, ann_key="meta_schedule.unroll_explicit", ann_val=v16)
l17, l18, l19 = sch.get_loops(block=b3)
l20 = sch.fuse(l17, preserve_unit_iters=True)
sch.bind(loop=l20, thread_axis="blockIdx.x")
l21, l22 = sch.get_loops(block=b0)
l23 = sch.fuse(l21, preserve_unit_iters=True)
l24, l25 = sch.split(loop=l23, factors=[None, 1], preserve_unit_iters=True)
sch.bind(loop=l24, thread_axis="blockIdx.x")
sch.bind(loop=l25, thread_axis="threadIdx.x")
2024-04-29 17:02:34 [INFO] [task_scheduler.cc:170] Design space #3:
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(1000)), "float32"), T_softmax_norm: T.Buffer((T.int64(1), T.int64(1000)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        with T.block("root"):
            T.reads()
            T.writes()
            T.block_attr({"meta_schedule.unroll_explicit": 512})
            T_softmax_maxelem_shared = T.alloc_buffer((T.int64(1),), scope="shared")
            T_softmax_expsum_shared = T.alloc_buffer((T.int64(1),), scope="shared")
            for i0_fused in T.thread_binding(T.int64(1), thread="blockIdx.x"):
                for ax0, ax1_0 in T.grid(T.int64(1), T.int64(63)):
                    for ax1_1 in T.thread_binding(T.int64(16), thread="threadIdx.x"):
                        with T.block("T_softmax_maxelem"):
                            v_i0 = T.axis.spatial(T.int64(1), ax0)
                            v_k = T.axis.reduce(T.int64(1000), ax1_0 * T.int64(16) + ax1_1)
                            T.where(ax1_0 * T.int64(16) + ax1_1 < T.int64(1000))
                            T.reads(p0[v_i0, v_k])
                            T.writes(T_softmax_maxelem_shared[v_i0])
                            with T.init():
                                T_softmax_maxelem_shared[v_i0] = T.float32(-3.4028234663852886e+38)
                            T_softmax_maxelem_shared[v_i0] = T.max(T_softmax_maxelem_shared[v_i0], p0[v_i0, v_k])
                for ax0, ax1_0 in T.grid(T.int64(1), T.int64(63)):
                    for ax1_1 in T.thread_binding(T.int64(16), thread="threadIdx.x"):
                        with T.block("T_softmax_expsum"):
                            v_i0 = T.axis.spatial(T.int64(1), ax0)
                            v_k = T.axis.reduce(T.int64(1000), ax1_0 * T.int64(16) + ax1_1)
                            T.where(ax1_0 * T.int64(16) + ax1_1 < T.int64(1000))
                            T.reads(p0[v_i0, v_k], T_softmax_maxelem_shared[v_i0])
                            T.writes(T_softmax_expsum_shared[v_i0])
                            with T.init():
                                T_softmax_expsum_shared[v_i0] = T.float32(0)
                            T_softmax_expsum_shared[v_i0] = T_softmax_expsum_shared[v_i0] + T.exp(p0[v_i0, v_k] - T_softmax_maxelem_shared[v_i0])
                for i1_0 in range(T.int64(63)):
                    for i1_1 in T.thread_binding(T.int64(16), thread="threadIdx.x"):
                        with T.block("T_softmax_norm"):
                            v_i0 = T.axis.spatial(T.int64(1), T.int64(0))
                            v_i1 = T.axis.spatial(T.int64(1000), i1_0 * T.int64(16) + i1_1)
                            T.where(i1_0 * T.int64(16) + i1_1 < T.int64(1000))
                            T.reads(p0[v_i0, v_i1], T_softmax_maxelem_shared[v_i0], T_softmax_expsum_shared[v_i0])
                            T.writes(T_softmax_norm[v_i0, v_i1])
                            T.block_attr({"axis": 1})
                            T_softmax_norm[v_i0, v_i1] = T.exp(p0[v_i0, v_i1] - T_softmax_maxelem_shared[v_i0]) / T_softmax_expsum_shared[v_i0]
b0 = sch.get_block(name="T_softmax_maxelem", func_name="main")
b1 = sch.get_block(name="T_softmax_exp", func_name="main")
b2 = sch.get_block(name="T_softmax_expsum", func_name="main")
b3 = sch.get_block(name="T_softmax_norm", func_name="main")
b4 = sch.get_block(name="root", func_name="main")
sch.compute_inline(block=b1)
b5, = sch.get_consumers(block=b2)
l6, l7 = sch.get_loops(block=b5)
v8 = sch.sample_categorical(candidates=[4, 8, 16, 32, 64, 128, 256, 512], probs=[0.125, 0.125, 0.125, 0.125, 0.125, 0.125, 0.125, 0.125], decision=2)
l9, l10 = sch.split(loop=l7, factors=[None, v8], preserve_unit_iters=True)
sch.bind(loop=l10, thread_axis="threadIdx.x")
sch.compute_at(block=b2, loop=l6, preserve_unit_loops=True, index=-1)
sch.set_scope(block=b2, buffer_index=0, storage_scope="shared")
l11, l12, l13 = sch.get_loops(block=b2)
l14, l15 = sch.split(loop=l13, factors=[None, v8], preserve_unit_iters=True)
sch.bind(loop=l15, thread_axis="threadIdx.x")
b16, b17 = sch.get_consumers(block=b0)
l18, l19, l20, l21 = sch.get_loops(block=b16)
sch.compute_at(block=b0, loop=l18, preserve_unit_loops=True, index=-1)
sch.set_scope(block=b0, buffer_index=0, storage_scope="shared")
l22, l23, l24 = sch.get_loops(block=b0)
l25, l26 = sch.split(loop=l24, factors=[None, v8], preserve_unit_iters=True)
sch.bind(loop=l26, thread_axis="threadIdx.x")
v27 = sch.sample_categorical(candidates=[0, 16, 64, 512, 1024], probs=[0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001], decision=3)
sch.annotate(block_or_loop=b4, ann_key="meta_schedule.unroll_explicit", ann_val=v27)
l28, l29, l30 = sch.get_loops(block=b3)
l31 = sch.fuse(l28, preserve_unit_iters=True)
sch.bind(loop=l31, thread_axis="blockIdx.x")
2024-04-29 17:43:47 [INFO] [evolutionary_search.cc:713] Generating candidates......
2024-04-29 17:43:47 [INFO] [evolutionary_search.cc:715] Picked top 0 candidate(s) from database
2024-04-29 17:43:48 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x5e53ac8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0xb547908)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0xb569f28)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x44e9048)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x71ce5b8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x764e678)]: 0 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0xb547808)]: 0 failure(s)
2024-04-29 17:43:48 [INFO] [evolutionary_search.cc:723] Sampled 512 candidate(s)
2024-04-29 17:43:48 [INFO] [evolutionary_search.cc:621] Evolve iter #0 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x5e53ac8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0xb547908)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0xb569f28)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x44e9048)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x71ce5b8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x764e678)]: 0 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0xb547808)]: 0 failure(s)
2024-04-29 17:43:49 [INFO] [evolutionary_search.cc:621] Evolve iter #1 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x5e53ac8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0xb547908)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0xb569f28)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x44e9048)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x71ce5b8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x764e678)]: 0 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0xb547808)]: 0 failure(s)
2024-04-29 17:43:49 [INFO] [evolutionary_search.cc:621] Evolve iter #2 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x5e53ac8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0xb547908)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0xb569f28)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x44e9048)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x71ce5b8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x764e678)]: 0 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0xb547808)]: 0 failure(s)
2024-04-29 17:43:49 [INFO] [evolutionary_search.cc:621] Evolve iter #3 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x5e53ac8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0xb547908)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0xb569f28)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x44e9048)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x71ce5b8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x764e678)]: 0 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0xb547808)]: 0 failure(s)
2024-04-29 17:43:50 [INFO] [evolutionary_search.cc:649] Scores of the best 64 candidates:
[1 : 16]:	0.9988  0.9967  0.9966  0.9921  0.9877  0.9802  0.9792  0.9716  0.9710  0.9644  0.9604  0.9562  0.9416  0.9315  0.9312  0.9307
[17 : 32]:	0.9254  0.9227  0.9224  0.9149  0.9123  0.9029  0.9020  0.8998  0.8955  0.8952  0.8911  0.8822  0.8785  0.8767  0.8741  0.8703
[33 : 48]:	0.8691  0.8633  0.8624  0.8606  0.8604  0.8510  0.8497  0.8465  0.8386  0.8351  0.8323  0.8241  0.8216  0.8189  0.8176  0.8158
[49 : 64]:	0.8145  0.8060  0.8060  0.7978  0.7976  0.7882  0.7820  0.7795  0.7681  0.7671  0.7635  0.7585  0.7509  0.7407  0.7388  0.7352
2024-04-29 17:43:50 [INFO] [evolutionary_search.cc:727] Got 64 candidate(s) with evolutionary search
2024-04-29 17:43:50 [INFO] [evolutionary_search.cc:730] Sending 63 candidates(s) for measurement
2024-04-29 17:45:28 [INFO] [task_scheduler.cc:131] [Task #19: fused_nn_softmax] Trial #1: GFLOPs: 0.0952. Time: 42.0034 us. Best GFLOPs: 0.0952
2024-04-29 17:45:28 [INFO] [task_scheduler.cc:131] [Task #19: fused_nn_softmax] Trial #2: GFLOPs: 0.2607. Time: 15.3440 us. Best GFLOPs: 0.2607
2024-04-29 17:45:28 [INFO] [task_scheduler.cc:131] [Task #19: fused_nn_softmax] Trial #3: GFLOPs: 0.1096. Time: 36.4877 us. Best GFLOPs: 0.2607
2024-04-29 17:45:28 [INFO] [task_scheduler.cc:131] [Task #19: fused_nn_softmax] Trial #4: GFLOPs: 0.0868. Time: 46.1080 us. Best GFLOPs: 0.2607
2024-04-29 17:45:28 [INFO] [task_scheduler.cc:131] [Task #19: fused_nn_softmax] Trial #5: GFLOPs: 0.2197. Time: 18.2038 us. Best GFLOPs: 0.2607
2024-04-29 17:45:28 [INFO] [task_scheduler.cc:131] [Task #19: fused_nn_softmax] Trial #6: GFLOPs: 0.7355. Time: 5.4385 us. Best GFLOPs: 0.7355
2024-04-29 17:45:28 [INFO] [task_scheduler.cc:131] [Task #19: fused_nn_softmax] Trial #7: GFLOPs: 0.1094. Time: 36.5516 us. Best GFLOPs: 0.7355
2024-04-29 17:45:28 [INFO] [task_scheduler.cc:131] [Task #19: fused_nn_softmax] Trial #8: GFLOPs: 0.1061. Time: 37.6834 us. Best GFLOPs: 0.7355
2024-04-29 17:45:28 [INFO] [task_scheduler.cc:131] [Task #19: fused_nn_softmax] Trial #9: GFLOPs: 0.1094. Time: 36.5511 us. Best GFLOPs: 0.7355
2024-04-29 17:45:28 [INFO] [task_scheduler.cc:131] [Task #19: fused_nn_softmax] Trial #10: GFLOPs: 0.1212. Time: 33.0028 us. Best GFLOPs: 0.7355
2024-04-29 17:45:28 [INFO] [task_scheduler.cc:131] [Task #19: fused_nn_softmax] Trial #11: GFLOPs: 0.1078. Time: 37.1013 us. Best GFLOPs: 0.7355
2024-04-29 17:45:28 [INFO] [task_scheduler.cc:131] [Task #19: fused_nn_softmax] Trial #12: GFLOPs: 0.1192. Time: 33.5602 us. Best GFLOPs: 0.7355
2024-04-29 17:45:28 [INFO] [task_scheduler.cc:131] [Task #19: fused_nn_softmax] Trial #13: GFLOPs: 0.4743. Time: 8.4342 us. Best GFLOPs: 0.7355
2024-04-29 17:45:28 [INFO] [task_scheduler.cc:131] [Task #19: fused_nn_softmax] Trial #14: GFLOPs: 0.1834. Time: 21.8109 us. Best GFLOPs: 0.7355
2024-04-29 17:45:28 [INFO] [task_scheduler.cc:131] [Task #19: fused_nn_softmax] Trial #15: GFLOPs: 0.1096. Time: 36.4934 us. Best GFLOPs: 0.7355
2024-04-29 17:45:28 [INFO] [task_scheduler.cc:131] [Task #19: fused_nn_softmax] Trial #16: GFLOPs: 0.2290. Time: 17.4662 us. Best GFLOPs: 0.7355
2024-04-29 17:45:28 [INFO] [task_scheduler.cc:131] [Task #19: fused_nn_softmax] Trial #17: GFLOPs: 0.1096. Time: 36.4882 us. Best GFLOPs: 0.7355
2024-04-29 17:45:28 [INFO] [task_scheduler.cc:131] [Task #19: fused_nn_softmax] Trial #18: GFLOPs: 0.1061. Time: 37.6991 us. Best GFLOPs: 0.7355
2024-04-29 17:45:28 [INFO] [task_scheduler.cc:131] [Task #19: fused_nn_softmax] Trial #19: GFLOPs: 0.0866. Time: 46.1717 us. Best GFLOPs: 0.7355
2024-04-29 17:45:28 [INFO] [task_scheduler.cc:131] [Task #19: fused_nn_softmax] Trial #20: GFLOPs: 0.2813. Time: 14.2200 us. Best GFLOPs: 0.7355
2024-04-29 17:45:28 [INFO] [task_scheduler.cc:131] [Task #19: fused_nn_softmax] Trial #21: GFLOPs: 0.1558. Time: 25.6681 us. Best GFLOPs: 0.7355
2024-04-29 17:45:28 [INFO] [task_scheduler.cc:131] [Task #19: fused_nn_softmax] Trial #22: GFLOPs: 0.2546. Time: 15.7092 us. Best GFLOPs: 0.7355
2024-04-29 17:45:28 [INFO] [task_scheduler.cc:131] [Task #19: fused_nn_softmax] Trial #23: GFLOPs: 0.1061. Time: 37.6850 us. Best GFLOPs: 0.7355
2024-04-29 17:45:28 [INFO] [task_scheduler.cc:131] [Task #19: fused_nn_softmax] Trial #24: GFLOPs: 0.1093. Time: 36.6113 us. Best GFLOPs: 0.7355
2024-04-29 17:45:28 [INFO] [task_scheduler.cc:131] [Task #19: fused_nn_softmax] Trial #25: GFLOPs: 0.2059. Time: 19.4273 us. Best GFLOPs: 0.7355
2024-04-29 17:45:28 [INFO] [task_scheduler.cc:131] [Task #19: fused_nn_softmax] Trial #26: GFLOPs: 0.1075. Time: 37.1968 us. Best GFLOPs: 0.7355
2024-04-29 17:45:28 [INFO] [task_scheduler.cc:131] [Task #19: fused_nn_softmax] Trial #27: GFLOPs: 0.1094. Time: 36.5613 us. Best GFLOPs: 0.7355
2024-04-29 17:45:28 [INFO] [task_scheduler.cc:131] [Task #19: fused_nn_softmax] Trial #28: GFLOPs: 0.4620. Time: 8.6574 us. Best GFLOPs: 0.7355
2024-04-29 17:45:28 [INFO] [task_scheduler.cc:131] [Task #19: fused_nn_softmax] Trial #29: GFLOPs: 0.1461. Time: 27.3847 us. Best GFLOPs: 0.7355
2024-04-29 17:45:28 [INFO] [task_scheduler.cc:131] [Task #19: fused_nn_softmax] Trial #30: GFLOPs: 0.1254. Time: 31.8885 us. Best GFLOPs: 0.7355
2024-04-29 17:45:28 [INFO] [task_scheduler.cc:131] [Task #19: fused_nn_softmax] Trial #31: GFLOPs: 0.1061. Time: 37.7027 us. Best GFLOPs: 0.7355
2024-04-29 17:45:28 [INFO] [task_scheduler.cc:131] [Task #19: fused_nn_softmax] Trial #32: GFLOPs: 0.1353. Time: 29.5595 us. Best GFLOPs: 0.7355
2024-04-29 17:45:28 [INFO] [task_scheduler.cc:131] [Task #19: fused_nn_softmax] Trial #33: GFLOPs: 0.1089. Time: 36.7422 us. Best GFLOPs: 0.7355
2024-04-29 17:45:28 [INFO] [task_scheduler.cc:131] [Task #19: fused_nn_softmax] Trial #34: GFLOPs: 0.2406. Time: 16.6255 us. Best GFLOPs: 0.7355
2024-04-29 17:45:28 [INFO] [task_scheduler.cc:131] [Task #19: fused_nn_softmax] Trial #35: GFLOPs: 0.1081. Time: 36.9923 us. Best GFLOPs: 0.7355
2024-04-29 17:45:28 [INFO] [task_scheduler.cc:131] [Task #19: fused_nn_softmax] Trial #36: GFLOPs: 0.2696. Time: 14.8382 us. Best GFLOPs: 0.7355
2024-04-29 17:45:28 [INFO] [task_scheduler.cc:131] [Task #19: fused_nn_softmax] Trial #37: GFLOPs: 0.0865. Time: 46.2222 us. Best GFLOPs: 0.7355
2024-04-29 17:45:28 [INFO] [task_scheduler.cc:131] [Task #19: fused_nn_softmax] Trial #38: GFLOPs: 0.2608. Time: 15.3363 us. Best GFLOPs: 0.7355
2024-04-29 17:45:28 [INFO] [task_scheduler.cc:131] [Task #19: fused_nn_softmax] Trial #39: GFLOPs: 0.0858. Time: 46.6341 us. Best GFLOPs: 0.7355
2024-04-29 17:45:28 [INFO] [task_scheduler.cc:131] [Task #19: fused_nn_softmax] Trial #40: GFLOPs: 0.0959. Time: 41.7285 us. Best GFLOPs: 0.7355
2024-04-29 17:45:28 [INFO] [task_scheduler.cc:131] [Task #19: fused_nn_softmax] Trial #41: GFLOPs: 0.8191. Time: 4.8835 us. Best GFLOPs: 0.8191
2024-04-29 17:45:28 [INFO] [task_scheduler.cc:131] [Task #19: fused_nn_softmax] Trial #42: GFLOPs: 0.1467. Time: 27.2675 us. Best GFLOPs: 0.8191
2024-04-29 17:45:28 [INFO] [task_scheduler.cc:131] [Task #19: fused_nn_softmax] Trial #43: GFLOPs: 0.1088. Time: 36.7751 us. Best GFLOPs: 0.8191
2024-04-29 17:45:28 [INFO] [task_scheduler.cc:131] [Task #19: fused_nn_softmax] Trial #44: GFLOPs: 0.1086. Time: 36.8228 us. Best GFLOPs: 0.8191
2024-04-29 17:45:28 [INFO] [task_scheduler.cc:131] [Task #19: fused_nn_softmax] Trial #45: GFLOPs: 0.1092. Time: 36.6162 us. Best GFLOPs: 0.8191
2024-04-29 17:45:28 [INFO] [task_scheduler.cc:131] [Task #19: fused_nn_softmax] Trial #46: GFLOPs: 0.1568. Time: 25.5150 us. Best GFLOPs: 0.8191
2024-04-29 17:45:28 [INFO] [task_scheduler.cc:131] [Task #19: fused_nn_softmax] Trial #47: GFLOPs: 0.1078. Time: 37.0898 us. Best GFLOPs: 0.8191
2024-04-29 17:45:28 [INFO] [task_scheduler.cc:131] [Task #19: fused_nn_softmax] Trial #48: GFLOPs: 0.8800. Time: 4.5457 us. Best GFLOPs: 0.8800
2024-04-29 17:45:28 [INFO] [task_scheduler.cc:131] [Task #19: fused_nn_softmax] Trial #49: GFLOPs: 0.1095. Time: 36.5418 us. Best GFLOPs: 0.8800
2024-04-29 17:45:28 [INFO] [task_scheduler.cc:131] [Task #19: fused_nn_softmax] Trial #50: GFLOPs: 0.1088. Time: 36.7746 us. Best GFLOPs: 0.8800
2024-04-29 17:45:28 [INFO] [task_scheduler.cc:131] [Task #19: fused_nn_softmax] Trial #51: GFLOPs: 0.1052. Time: 38.0267 us. Best GFLOPs: 0.8800
2024-04-29 17:45:28 [INFO] [task_scheduler.cc:131] [Task #19: fused_nn_softmax] Trial #52: GFLOPs: 0.1564. Time: 25.5787 us. Best GFLOPs: 0.8800
2024-04-29 17:45:28 [INFO] [task_scheduler.cc:131] [Task #19: fused_nn_softmax] Trial #53: GFLOPs: 0.1062. Time: 37.6585 us. Best GFLOPs: 0.8800
2024-04-29 17:45:28 [INFO] [task_scheduler.cc:131] [Task #19: fused_nn_softmax] Trial #54: GFLOPs: 0.1236. Time: 32.3536 us. Best GFLOPs: 0.8800
2024-04-29 17:45:28 [INFO] [task_scheduler.cc:131] [Task #19: fused_nn_softmax] Trial #55: GFLOPs: 0.0498. Time: 80.3435 us. Best GFLOPs: 0.8800
2024-04-29 17:45:28 [INFO] [task_scheduler.cc:131] [Task #19: fused_nn_softmax] Trial #56: GFLOPs: 0.1080. Time: 37.0357 us. Best GFLOPs: 0.8800
2024-04-29 17:45:28 [INFO] [task_scheduler.cc:131] [Task #19: fused_nn_softmax] Trial #57: GFLOPs: 0.2208. Time: 18.1139 us. Best GFLOPs: 0.8800
2024-04-29 17:45:28 [INFO] [task_scheduler.cc:131] [Task #19: fused_nn_softmax] Trial #58: GFLOPs: 0.0867. Time: 46.1413 us. Best GFLOPs: 0.8800
2024-04-29 17:45:28 [INFO] [task_scheduler.cc:131] [Task #19: fused_nn_softmax] Trial #59: GFLOPs: 0.1090. Time: 36.7124 us. Best GFLOPs: 0.8800
2024-04-29 17:45:28 [INFO] [task_scheduler.cc:131] [Task #19: fused_nn_softmax] Trial #60: GFLOPs: 0.1096. Time: 36.5013 us. Best GFLOPs: 0.8800
2024-04-29 17:45:28 [INFO] [task_scheduler.cc:131] [Task #19: fused_nn_softmax] Trial #61: GFLOPs: 0.1350. Time: 29.6304 us. Best GFLOPs: 0.8800
2024-04-29 17:45:28 [INFO] [task_scheduler.cc:131] [Task #19: fused_nn_softmax] Trial #62: GFLOPs: 0.0867. Time: 46.1199 us. Best GFLOPs: 0.8800
2024-04-29 17:45:28 [INFO] [task_scheduler.cc:131] [Task #19: fused_nn_softmax] Trial #63: GFLOPs: 0.1064. Time: 37.6065 us. Best GFLOPs: 0.8800
