2024-04-29 17:02:28 [INFO] [task_scheduler.cc:160] Initializing Task #6: "fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_4"
2024-04-29 17:02:28 [INFO] [task_scheduler.cc:35] 
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(128), T.int64(56), T.int64(56)), "float32"), p1: T.Buffer((T.int64(6), T.int64(6), T.int64(128), T.int64(256)), "float32"), p2: T.Buffer((T.int64(1), T.int64(256), T.int64(1), T.int64(1)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(256), T.int64(56), T.int64(56)), "float32")):
        T.func_attr({"layout_free_buffers": [1], "tir.noalias": T.bool(True)})
        # with T.block("root"):
        data_pad = T.alloc_buffer((T.int64(1), T.int64(128), T.int64(58), T.int64(58)))
        input_tile = T.alloc_buffer((T.int64(128), T.int64(196), T.int64(6), T.int64(6)))
        B = T.alloc_buffer((T.int64(6), T.int64(6)))
        data_pack = T.alloc_buffer((T.int64(6), T.int64(6), T.int64(128), T.int64(196)))
        bgemm = T.alloc_buffer((T.int64(6), T.int64(6), T.int64(256), T.int64(196)))
        A = T.alloc_buffer((T.int64(6), T.int64(4)))
        inverse = T.alloc_buffer((T.int64(256), T.int64(196), T.int64(4), T.int64(4)))
        conv2d_winograd = T.alloc_buffer((T.int64(1), T.int64(256), T.int64(56), T.int64(56)))
        T_add = T.alloc_buffer((T.int64(1), T.int64(256), T.int64(56), T.int64(56)))
        for i0, i1, i2, i3 in T.grid(T.int64(1), T.int64(128), T.int64(58), T.int64(58)):
            with T.block("data_pad"):
                v_i0, v_i1, v_i2, v_i3 = T.axis.remap("SSSS", [i0, i1, i2, i3])
                T.reads(p0[v_i0, v_i1, v_i2 - T.int64(1), v_i3 - T.int64(1)])
                T.writes(data_pad[v_i0, v_i1, v_i2, v_i3])
                data_pad[v_i0, v_i1, v_i2, v_i3] = T.if_then_else(T.int64(1) <= v_i2 and v_i2 < T.int64(57) and T.int64(1) <= v_i3 and v_i3 < T.int64(57), p0[v_i0, v_i1, v_i2 - T.int64(1), v_i3 - T.int64(1)], T.float32(0))
        for ci, p, eps, nu in T.grid(T.int64(128), T.int64(196), T.int64(6), T.int64(6)):
            with T.block("input_tile"):
                v_ci, v_p, v_eps, v_nu = T.axis.remap("SSSS", [ci, p, eps, nu])
                T.reads(data_pad[v_p // T.int64(196), v_ci, v_p % T.int64(196) // T.int64(14) * T.int64(4) + v_eps, v_p % T.int64(14) * T.int64(4) + v_nu])
                T.writes(input_tile[v_ci, v_p, v_eps, v_nu])
                T.block_attr({"schedule_rule": "None"})
                input_tile[v_ci, v_p, v_eps, v_nu] = data_pad[v_p // T.int64(196), v_ci, v_p % T.int64(196) // T.int64(14) * T.int64(4) + v_eps, v_p % T.int64(14) * T.int64(4) + v_nu]
        for i, j in T.grid(T.int64(6), T.int64(6)):
            with T.block("B"):
                v_i, v_j = T.axis.remap("SS", [i, j])
                T.reads()
                T.writes(B[v_i, v_j])
                T.block_attr({"schedule_rule": "None"})
                B[v_i, v_j] = T.Select(v_i % T.int64(6) == T.int64(5) and v_j % T.int64(6) == T.int64(5), T.float32(1), T.Select(v_i % T.int64(6) == T.int64(5) and v_j % T.int64(6) == T.int64(4), T.float32(0), T.Select(v_i % T.int64(6) == T.int64(5) and v_j % T.int64(6) == T.int64(3), T.float32(0), T.Select(v_i % T.int64(6) == T.int64(5) and v_j % T.int64(6) == T.int64(2), T.float32(0), T.Select(v_i % T.int64(6) == T.int64(5) and v_j % T.int64(6) == T.int64(1), T.float32(0), T.Select(v_i % T.int64(6) == T.int64(5) and v_j % T.int64(6) == T.int64(0), T.float32(0), T.Select(v_i % T.int64(6) == T.int64(4) and v_j % T.int64(6) == T.int64(5), T.float32(1.5), T.Select(v_i % T.int64(6) == T.int64(4) and v_j % T.int64(6) == T.int64(4), T.float32(1), T.Select(v_i % T.int64(6) == T.int64(4) and v_j % T.int64(6) == T.int64(3), T.float32(1), T.Select(v_i % T.int64(6) == T.int64(4) and v_j % T.int64(6) == T.int64(2), T.float32(1), T.Select(v_i % T.int64(6) == T.int64(4) and v_j % T.int64(6) == T.int64(1), T.float32(1), T.Select(v_i % T.int64(6) == T.int64(4) and v_j % T.int64(6) == T.int64(0), T.float32(1), T.Select(v_i % T.int64(6) == T.int64(3) and v_j % T.int64(6) == T.int64(5), T.float32(-2), T.Select(v_i % T.int64(6) == T.int64(3) and v_j % T.int64(6) == T.int64(4), T.float32(-0.5), T.Select(v_i % T.int64(6) == T.int64(3) and v_j % T.int64(6) == T.int64(3), T.float32(2), T.Select(v_i % T.int64(6) == T.int64(3) and v_j % T.int64(6) == T.int64(2), T.float32(2.5), T.Select(v_i % T.int64(6) == T.int64(3) and v_j % T.int64(6) == T.int64(1), T.float32(0.5), T.Select(v_i % T.int64(6) == T.int64(3) and v_j % T.int64(6) == T.int64(0), T.float32(1.5), T.Select(v_i % T.int64(6) == T.int64(2) and v_j % T.int64(6) == T.int64(5), T.float32(-1.5), T.Select(v_i % T.int64(6) == T.int64(2) and v_j % T.int64(6) == T.int64(4), T.float32(-1), T.Select(v_i % T.int64(6) == T.int64(2) and v_j % T.int64(6) == T.int64(3), T.float32(-1), T.Select(v_i % T.int64(6) == T.int64(2) and v_j % T.int64(6) == T.int64(2), T.float32(0.5), T.Select(v_i % T.int64(6) == T.int64(2) and v_j % T.int64(6) == T.int64(1), T.float32(-2.5), T.Select(v_i % T.int64(6) == T.int64(2) and v_j % T.int64(6) == T.int64(0), T.float32(-2), T.Select(v_i % T.int64(6) == T.int64(1) and v_j % T.int64(6) == T.int64(5), T.float32(1), T.Select(v_i % T.int64(6) == T.int64(1) and v_j % T.int64(6) == T.int64(4), T.float32(0.5), T.Select(v_i % T.int64(6) == T.int64(1) and v_j % T.int64(6) == T.int64(3), T.float32(-2), T.Select(v_i % T.int64(6) == T.int64(1) and v_j % T.int64(6) == T.int64(2), T.float32(-1), T.Select(v_i % T.int64(6) == T.int64(1) and v_j % T.int64(6) == T.int64(1), T.float32(1), T.Select(v_i % T.int64(6) == T.int64(1) and v_j % T.int64(6) == T.int64(0), T.float32(-1.5), T.Select(v_i % T.int64(6) == T.int64(0) and v_j % T.int64(6) == T.int64(5), T.float32(0), T.Select(v_i % T.int64(6) == T.int64(0) and v_j % T.int64(6) == T.int64(4), T.float32(0), T.Select(v_i % T.int64(6) == T.int64(0) and v_j % T.int64(6) == T.int64(3), T.float32(0), T.Select(v_i % T.int64(6) == T.int64(0) and v_j % T.int64(6) == T.int64(2), T.float32(0), T.Select(v_i % T.int64(6) == T.int64(0) and v_j % T.int64(6) == T.int64(1), T.float32(0), T.Select(v_i % T.int64(6) == T.int64(0) and v_j % T.int64(6) == T.int64(0), T.float32(1), T.float32(0)))))))))))))))))))))))))))))))))))))
        for eps, nu, ci, p, r_a, r_b in T.grid(T.int64(6), T.int64(6), T.int64(128), T.int64(196), T.int64(6), T.int64(6)):
            with T.block("data_pack"):
                v_eps, v_nu, v_ci, v_p, v_r_a, v_r_b = T.axis.remap("SSSSRR", [eps, nu, ci, p, r_a, r_b])
                T.reads(input_tile[v_ci, v_p, v_r_a, v_r_b], B[T.min(v_r_a, v_r_b):T.min(v_r_a, v_r_b) + (T.max(v_r_a, v_r_b) + T.int64(1) - T.min(v_r_a, v_r_b)), T.min(v_eps, v_nu):T.min(v_eps, v_nu) + (T.max(v_eps, v_nu) + T.int64(1) - T.min(v_eps, v_nu))])
                T.writes(data_pack[v_eps, v_nu, v_ci, v_p])
                T.block_attr({"schedule_rule": "conv2d_nchw_winograd_data_pack"})
                with T.init():
                    data_pack[v_eps, v_nu, v_ci, v_p] = T.float32(0)
                data_pack[v_eps, v_nu, v_ci, v_p] = data_pack[v_eps, v_nu, v_ci, v_p] + input_tile[v_ci, v_p, v_r_a, v_r_b] * B[v_r_a, v_eps] * B[v_r_b, v_nu]
        for eps, nu, co, p, ci in T.grid(T.int64(6), T.int64(6), T.int64(256), T.int64(196), T.int64(128)):
            with T.block("bgemm"):
                v_eps, v_nu, v_co, v_p, v_ci = T.axis.remap("SSSSR", [eps, nu, co, p, ci])
                T.reads(data_pack[v_eps, v_nu, v_ci, v_p], p1[v_eps, v_nu, v_ci, v_co])
                T.writes(bgemm[v_eps, v_nu, v_co, v_p])
                with T.init():
                    bgemm[v_eps, v_nu, v_co, v_p] = T.float32(0)
                bgemm[v_eps, v_nu, v_co, v_p] = bgemm[v_eps, v_nu, v_co, v_p] + data_pack[v_eps, v_nu, v_ci, v_p] * p1[v_eps, v_nu, v_ci, v_co]
        for i, j in T.grid(T.int64(6), T.int64(4)):
            with T.block("A"):
                v_i, v_j = T.axis.remap("SS", [i, j])
                T.reads()
                T.writes(A[v_i, v_j])
                T.block_attr({"schedule_rule": "None"})
                A[v_i, v_j] = T.Select(v_i % T.int64(6) == T.int64(5) and v_j % T.int64(4) == T.int64(3), T.float32(1), T.Select(v_i % T.int64(6) == T.int64(5) and v_j % T.int64(4) == T.int64(2), T.float32(0), T.Select(v_i % T.int64(6) == T.int64(5) and v_j % T.int64(4) == T.int64(1), T.float32(0), T.Select(v_i % T.int64(6) == T.int64(5) and v_j % T.int64(4) == T.int64(0), T.float32(0), T.Select(v_i % T.int64(6) == T.int64(4) and v_j % T.int64(4) == T.int64(3), T.float32(-8), T.Select(v_i % T.int64(6) == T.int64(4) and v_j % T.int64(4) == T.int64(2), T.float32(4), T.Select(v_i % T.int64(6) == T.int64(4) and v_j % T.int64(4) == T.int64(1), T.float32(-2), T.Select(v_i % T.int64(6) == T.int64(4) and v_j % T.int64(4) == T.int64(0), T.float32(1), T.Select(v_i % T.int64(6) == T.int64(3) and v_j % T.int64(4) == T.int64(3), T.float32(0.125), T.Select(v_i % T.int64(6) == T.int64(3) and v_j % T.int64(4) == T.int64(2), T.float32(0.25), T.Select(v_i % T.int64(6) == T.int64(3) and v_j % T.int64(4) == T.int64(1), T.float32(0.5), T.Select(v_i % T.int64(6) == T.int64(3) and v_j % T.int64(4) == T.int64(0), T.float32(1), T.Select(v_i % T.int64(6) == T.int64(2) and v_j % T.int64(4) == T.int64(3), T.float32(1), T.Select(v_i % T.int64(6) == T.int64(2) and v_j % T.int64(4) == T.int64(2), T.float32(1), T.Select(v_i % T.int64(6) == T.int64(2) and v_j % T.int64(4) == T.int64(1), T.float32(1), T.Select(v_i % T.int64(6) == T.int64(2) and v_j % T.int64(4) == T.int64(0), T.float32(1), T.Select(v_i % T.int64(6) == T.int64(1) and v_j % T.int64(4) == T.int64(3), T.float32(-1), T.Select(v_i % T.int64(6) == T.int64(1) and v_j % T.int64(4) == T.int64(2), T.float32(1), T.Select(v_i % T.int64(6) == T.int64(1) and v_j % T.int64(4) == T.int64(1), T.float32(-1), T.Select(v_i % T.int64(6) == T.int64(1) and v_j % T.int64(4) == T.int64(0), T.float32(1), T.Select(v_i % T.int64(6) == T.int64(0) and v_j % T.int64(4) == T.int64(3), T.float32(0), T.Select(v_i % T.int64(6) == T.int64(0) and v_j % T.int64(4) == T.int64(2), T.float32(0), T.Select(v_i % T.int64(6) == T.int64(0) and v_j % T.int64(4) == T.int64(1), T.float32(0), T.Select(v_i % T.int64(6) == T.int64(0) and v_j % T.int64(4) == T.int64(0), T.float32(1), T.float32(0)))))))))))))))))))))))))
        for co, p, vh, vw, r_a, r_b in T.grid(T.int64(256), T.int64(196), T.int64(4), T.int64(4), T.int64(6), T.int64(6)):
            with T.block("inverse"):
                v_co, v_p, v_vh, v_vw, v_r_a, v_r_b = T.axis.remap("SSSSRR", [co, p, vh, vw, r_a, r_b])
                T.reads(bgemm[v_r_a, v_r_b, v_co, v_p], A[T.min(v_r_a, v_r_b):T.min(v_r_a, v_r_b) + (T.max(v_r_a, v_r_b) + T.int64(1) - T.min(v_r_a, v_r_b)), T.min(v_vh, v_vw):T.min(v_vh, v_vw) + (T.max(v_vh, v_vw) + T.int64(1) - T.min(v_vh, v_vw))])
                T.writes(inverse[v_co, v_p, v_vh, v_vw])
                T.block_attr({"schedule_rule": "conv2d_nchw_winograd_inverse"})
                with T.init():
                    inverse[v_co, v_p, v_vh, v_vw] = T.float32(0)
                inverse[v_co, v_p, v_vh, v_vw] = inverse[v_co, v_p, v_vh, v_vw] + bgemm[v_r_a, v_r_b, v_co, v_p] * A[v_r_a, v_vh] * A[v_r_b, v_vw]
        for n, co, h, w in T.grid(T.int64(1), T.int64(256), T.int64(56), T.int64(56)):
            with T.block("conv2d_winograd"):
                v_n, v_co, v_h, v_w = T.axis.remap("SSSS", [n, co, h, w])
                T.reads(inverse[v_co, v_n * T.int64(196) + v_h // T.int64(4) * T.int64(14) + v_w // T.int64(4), v_h % T.int64(4), v_w % T.int64(4)])
                T.writes(conv2d_winograd[v_n, v_co, v_h, v_w])
                conv2d_winograd[v_n, v_co, v_h, v_w] = inverse[v_co, v_n * T.int64(196) + v_h // T.int64(4) * T.int64(14) + v_w // T.int64(4), v_h % T.int64(4), v_w % T.int64(4)]
        for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(256), T.int64(56), T.int64(56)):
            with T.block("T_add"):
                v_ax0, v_ax1, v_ax2, v_ax3 = T.axis.remap("SSSS", [ax0, ax1, ax2, ax3])
                T.reads(conv2d_winograd[v_ax0, v_ax1, v_ax2, v_ax3], p2[v_ax0, v_ax1, T.int64(0), T.int64(0)])
                T.writes(T_add[v_ax0, v_ax1, v_ax2, v_ax3])
                T_add[v_ax0, v_ax1, v_ax2, v_ax3] = conv2d_winograd[v_ax0, v_ax1, v_ax2, v_ax3] + p2[v_ax0, v_ax1, T.int64(0), T.int64(0)]
        for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(256), T.int64(56), T.int64(56)):
            with T.block("T_relu"):
                v_ax0, v_ax1, v_ax2, v_ax3 = T.axis.remap("SSSS", [ax0, ax1, ax2, ax3])
                T.reads(T_add[v_ax0, v_ax1, v_ax2, v_ax3])
                T.writes(T_relu[v_ax0, v_ax1, v_ax2, v_ax3])
                T_relu[v_ax0, v_ax1, v_ax2, v_ax3] = T.max(T_add[v_ax0, v_ax1, v_ax2, v_ax3], T.float32(0))
2024-04-29 17:02:28 [INFO] [task_scheduler.cc:164] Total 3 design space(s) generated
2024-04-29 17:02:28 [INFO] [task_scheduler.cc:170] Design space #0:
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(128), T.int64(56), T.int64(56)), "float32"), p1: T.Buffer((T.int64(6), T.int64(6), T.int64(128), T.int64(256)), "float32"), p2: T.Buffer((T.int64(1), T.int64(256), T.int64(1), T.int64(1)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(256), T.int64(56), T.int64(56)), "float32")):
        T.func_attr({"layout_free_buffers": [1], "tir.noalias": T.bool(True)})
        with T.block("root"):
            T.reads()
            T.writes()
            T.block_attr({"meta_schedule.unroll_explicit": 0})
            input_tile_local = T.alloc_buffer((T.int64(128), T.int64(196), T.int64(6), T.int64(6)), scope="local")
            data_pack = T.alloc_buffer((T.int64(6), T.int64(6), T.int64(128), T.int64(196)))
            bgemm = T.alloc_buffer((T.int64(6), T.int64(6), T.int64(256), T.int64(196)))
            inverse_local = T.alloc_buffer((T.int64(256), T.int64(196), T.int64(4), T.int64(4)), scope="local")
            data_pack_local = T.alloc_buffer((T.int64(6), T.int64(6), T.int64(128), T.int64(196)), scope="local")
            bgemm_local = T.alloc_buffer((T.int64(6), T.int64(6), T.int64(256), T.int64(196)), scope="local")
            data_pack_shared = T.alloc_buffer((T.int64(6), T.int64(6), T.int64(128), T.int64(196)), scope="shared")
            p1_shared = T.alloc_buffer((T.int64(6), T.int64(6), T.int64(128), T.int64(256)), scope="shared")
            for ci_p_fused_0 in T.thread_binding(T.int64(98), thread="blockIdx.x"):
                for ci_p_fused_1 in T.thread_binding(T.int64(256), thread="threadIdx.x"):
                    for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(1), T.int64(6), T.int64(6)):
                        with T.block("input_tile"):
                            v_ci = T.axis.spatial(T.int64(128), (ci_p_fused_0 * T.int64(256) + ci_p_fused_1) // T.int64(196) + ax0)
                            v_p = T.axis.spatial(T.int64(196), (ci_p_fused_0 * T.int64(60) + ci_p_fused_1) % T.int64(196) + ax1)
                            v_eps, v_nu = T.axis.remap("SS", [ax2, ax3])
                            T.reads(p0[v_p // T.int64(196), v_ci, v_p % T.int64(196) // T.int64(14) * T.int64(4) + v_eps - T.int64(1), v_p % T.int64(14) * T.int64(4) + v_nu - T.int64(1)])
                            T.writes(input_tile_local[v_ci, v_p, v_eps, v_nu])
                            T.block_attr({"schedule_rule": "None"})
                            input_tile_local[v_ci, v_p, v_eps, v_nu] = T.if_then_else(T.int64(1) <= v_p % T.int64(196) // T.int64(14) * T.int64(4) + v_eps and v_p % T.int64(196) // T.int64(14) * T.int64(4) + v_eps < T.int64(57) and T.int64(1) <= v_p % T.int64(14) * T.int64(4) + v_nu and v_p % T.int64(14) * T.int64(4) + v_nu < T.int64(57), p0[v_p // T.int64(196), v_ci, v_p % T.int64(196) // T.int64(14) * T.int64(4) + v_eps - T.int64(1), v_p % T.int64(14) * T.int64(4) + v_nu - T.int64(1)], T.float32(0))
                    for eps in T.unroll(T.int64(6)):
                        for nu in T.unroll(T.int64(6)):
                            for r_a in T.unroll(T.int64(6)):
                                for r_b in T.unroll(T.int64(6)):
                                    with T.block("data_pack"):
                                        v_eps, v_nu = T.axis.remap("SS", [eps, nu])
                                        v_ci = T.axis.spatial(T.int64(128), (ci_p_fused_0 * T.int64(256) + ci_p_fused_1) // T.int64(196))
                                        v_p = T.axis.spatial(T.int64(196), (ci_p_fused_0 * T.int64(256) + ci_p_fused_1) % T.int64(196))
                                        v_r_a, v_r_b = T.axis.remap("RR", [r_a, r_b])
                                        T.reads(input_tile_local[v_ci, v_p, v_r_a, v_r_b])
                                        T.writes(data_pack_local[v_eps, v_nu, v_ci, v_p])
                                        T.block_attr({"schedule_rule": "conv2d_nchw_winograd_data_pack"})
                                        with T.init():
                                            data_pack_local[v_eps, v_nu, v_ci, v_p] = T.float32(0)
                                        data_pack_local[v_eps, v_nu, v_ci, v_p] = data_pack_local[v_eps, v_nu, v_ci, v_p] + input_tile_local[v_ci, v_p, v_r_a, v_r_b] * T.Select(v_r_a % T.int64(6) == T.int64(5) and v_eps % T.int64(6) == T.int64(5), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(5) and v_eps % T.int64(6) == T.int64(4), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(5) and v_eps % T.int64(6) == T.int64(3), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(5) and v_eps % T.int64(6) == T.int64(2), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(5) and v_eps % T.int64(6) == T.int64(1), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(5) and v_eps % T.int64(6) == T.int64(0), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(4) and v_eps % T.int64(6) == T.int64(5), T.float32(1.5), T.Select(v_r_a % T.int64(6) == T.int64(4) and v_eps % T.int64(6) == T.int64(4), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(4) and v_eps % T.int64(6) == T.int64(3), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(4) and v_eps % T.int64(6) == T.int64(2), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(4) and v_eps % T.int64(6) == T.int64(1), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(4) and v_eps % T.int64(6) == T.int64(0), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(3) and v_eps % T.int64(6) == T.int64(5), T.float32(-2), T.Select(v_r_a % T.int64(6) == T.int64(3) and v_eps % T.int64(6) == T.int64(4), T.float32(-0.5), T.Select(v_r_a % T.int64(6) == T.int64(3) and v_eps % T.int64(6) == T.int64(3), T.float32(2), T.Select(v_r_a % T.int64(6) == T.int64(3) and v_eps % T.int64(6) == T.int64(2), T.float32(2.5), T.Select(v_r_a % T.int64(6) == T.int64(3) and v_eps % T.int64(6) == T.int64(1), T.float32(0.5), T.Select(v_r_a % T.int64(6) == T.int64(3) and v_eps % T.int64(6) == T.int64(0), T.float32(1.5), T.Select(v_r_a % T.int64(6) == T.int64(2) and v_eps % T.int64(6) == T.int64(5), T.float32(-1.5), T.Select(v_r_a % T.int64(6) == T.int64(2) and v_eps % T.int64(6) == T.int64(4), T.float32(-1), T.Select(v_r_a % T.int64(6) == T.int64(2) and v_eps % T.int64(6) == T.int64(3), T.float32(-1), T.Select(v_r_a % T.int64(6) == T.int64(2) and v_eps % T.int64(6) == T.int64(2), T.float32(0.5), T.Select(v_r_a % T.int64(6) == T.int64(2) and v_eps % T.int64(6) == T.int64(1), T.float32(-2.5), T.Select(v_r_a % T.int64(6) == T.int64(2) and v_eps % T.int64(6) == T.int64(0), T.float32(-2), T.Select(v_r_a % T.int64(6) == T.int64(1) and v_eps % T.int64(6) == T.int64(5), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(1) and v_eps % T.int64(6) == T.int64(4), T.float32(0.5), T.Select(v_r_a % T.int64(6) == T.int64(1) and v_eps % T.int64(6) == T.int64(3), T.float32(-2), T.Select(v_r_a % T.int64(6) == T.int64(1) and v_eps % T.int64(6) == T.int64(2), T.float32(-1), T.Select(v_r_a % T.int64(6) == T.int64(1) and v_eps % T.int64(6) == T.int64(1), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(1) and v_eps % T.int64(6) == T.int64(0), T.float32(-1.5), T.Select(v_r_a % T.int64(6) == T.int64(0) and v_eps % T.int64(6) == T.int64(5), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(0) and v_eps % T.int64(6) == T.int64(4), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(0) and v_eps % T.int64(6) == T.int64(3), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(0) and v_eps % T.int64(6) == T.int64(2), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(0) and v_eps % T.int64(6) == T.int64(1), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(0) and v_eps % T.int64(6) == T.int64(0), T.float32(1), T.float32(0))))))))))))))))))))))))))))))))))))) * T.Select(v_r_b % T.int64(6) == T.int64(5) and v_nu % T.int64(6) == T.int64(5), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(5) and v_nu % T.int64(6) == T.int64(4), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(5) and v_nu % T.int64(6) == T.int64(3), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(5) and v_nu % T.int64(6) == T.int64(2), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(5) and v_nu % T.int64(6) == T.int64(1), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(5) and v_nu % T.int64(6) == T.int64(0), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(4) and v_nu % T.int64(6) == T.int64(5), T.float32(1.5), T.Select(v_r_b % T.int64(6) == T.int64(4) and v_nu % T.int64(6) == T.int64(4), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(4) and v_nu % T.int64(6) == T.int64(3), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(4) and v_nu % T.int64(6) == T.int64(2), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(4) and v_nu % T.int64(6) == T.int64(1), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(4) and v_nu % T.int64(6) == T.int64(0), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(3) and v_nu % T.int64(6) == T.int64(5), T.float32(-2), T.Select(v_r_b % T.int64(6) == T.int64(3) and v_nu % T.int64(6) == T.int64(4), T.float32(-0.5), T.Select(v_r_b % T.int64(6) == T.int64(3) and v_nu % T.int64(6) == T.int64(3), T.float32(2), T.Select(v_r_b % T.int64(6) == T.int64(3) and v_nu % T.int64(6) == T.int64(2), T.float32(2.5), T.Select(v_r_b % T.int64(6) == T.int64(3) and v_nu % T.int64(6) == T.int64(1), T.float32(0.5), T.Select(v_r_b % T.int64(6) == T.int64(3) and v_nu % T.int64(6) == T.int64(0), T.float32(1.5), T.Select(v_r_b % T.int64(6) == T.int64(2) and v_nu % T.int64(6) == T.int64(5), T.float32(-1.5), T.Select(v_r_b % T.int64(6) == T.int64(2) and v_nu % T.int64(6) == T.int64(4), T.float32(-1), T.Select(v_r_b % T.int64(6) == T.int64(2) and v_nu % T.int64(6) == T.int64(3), T.float32(-1), T.Select(v_r_b % T.int64(6) == T.int64(2) and v_nu % T.int64(6) == T.int64(2), T.float32(0.5), T.Select(v_r_b % T.int64(6) == T.int64(2) and v_nu % T.int64(6) == T.int64(1), T.float32(-2.5), T.Select(v_r_b % T.int64(6) == T.int64(2) and v_nu % T.int64(6) == T.int64(0), T.float32(-2), T.Select(v_r_b % T.int64(6) == T.int64(1) and v_nu % T.int64(6) == T.int64(5), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(1) and v_nu % T.int64(6) == T.int64(4), T.float32(0.5), T.Select(v_r_b % T.int64(6) == T.int64(1) and v_nu % T.int64(6) == T.int64(3), T.float32(-2), T.Select(v_r_b % T.int64(6) == T.int64(1) and v_nu % T.int64(6) == T.int64(2), T.float32(-1), T.Select(v_r_b % T.int64(6) == T.int64(1) and v_nu % T.int64(6) == T.int64(1), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(1) and v_nu % T.int64(6) == T.int64(0), T.float32(-1.5), T.Select(v_r_b % T.int64(6) == T.int64(0) and v_nu % T.int64(6) == T.int64(5), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(0) and v_nu % T.int64(6) == T.int64(4), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(0) and v_nu % T.int64(6) == T.int64(3), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(0) and v_nu % T.int64(6) == T.int64(2), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(0) and v_nu % T.int64(6) == T.int64(1), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(0) and v_nu % T.int64(6) == T.int64(0), T.float32(1), T.float32(0)))))))))))))))))))))))))))))))))))))
                    for ax0, ax1, ax2, ax3 in T.grid(T.int64(6), T.int64(6), T.int64(1), T.int64(1)):
                        with T.block("data_pack_local"):
                            v0, v1 = T.axis.remap("SS", [ax0, ax1])
                            v2 = T.axis.spatial(T.int64(128), (ci_p_fused_0 * T.int64(256) + ci_p_fused_1) // T.int64(196) + ax2)
                            v3 = T.axis.spatial(T.int64(196), (ci_p_fused_0 * T.int64(60) + ci_p_fused_1) % T.int64(196) + ax3)
                            T.reads(data_pack_local[v0, v1, v2, v3])
                            T.writes(data_pack[v0, v1, v2, v3])
                            data_pack[v0, v1, v2, v3] = data_pack_local[v0, v1, v2, v3]
            for eps_0_nu_0_co_0_p_0_fused in T.thread_binding(T.int64(64), thread="blockIdx.x"):
                for eps_1_nu_1_co_1_p_1_fused in T.thread_binding(T.int64(8), thread="vthread.x"):
                    for eps_2_nu_2_co_2_p_2_fused in T.thread_binding(T.int64(42), thread="threadIdx.x"):
                        for ci_0 in range(T.int64(8)):
                            for ax0_ax1_ax2_ax3_fused in range(T.int64(56448)):
                                with T.block("data_pack_shared"):
                                    v0 = T.axis.spatial(T.int64(6), eps_0_nu_0_co_0_p_0_fused // T.int64(32) * T.int64(3) + ax0_ax1_ax2_ax3_fused // T.int64(18816))
                                    v1 = T.axis.spatial(T.int64(6), ax0_ax1_ax2_ax3_fused % T.int64(18816) // T.int64(3136))
                                    v2 = T.axis.spatial(T.int64(128), ci_0 * T.int64(16) + ax0_ax1_ax2_ax3_fused % T.int64(3136) // T.int64(196))
                                    v3 = T.axis.spatial(T.int64(196), ax0_ax1_ax2_ax3_fused % T.int64(196))
                                    T.reads(data_pack[v0, v1, v2, v3])
                                    T.writes(data_pack_shared[v0, v1, v2, v3])
                                    T.block_attr({"meta_schedule.cooperative_fetch": 4})
                                    data_pack_shared[v0, v1, v2, v3] = data_pack[v0, v1, v2, v3]
                            for ax0_ax1_ax2_ax3_fused in range(T.int64(2304)):
                                with T.block("p1_shared"):
                                    v0 = T.axis.spatial(T.int64(6), eps_0_nu_0_co_0_p_0_fused // T.int64(32) * T.int64(3) + ax0_ax1_ax2_ax3_fused // T.int64(768))
                                    v1 = T.axis.spatial(T.int64(6), ax0_ax1_ax2_ax3_fused % T.int64(768) // T.int64(128))
                                    v2 = T.axis.spatial(T.int64(128), ci_0 * T.int64(16) + ax0_ax1_ax2_ax3_fused % T.int64(128) // T.int64(8))
                                    v3 = T.axis.spatial(T.int64(256), eps_0_nu_0_co_0_p_0_fused % T.int64(32) * T.int64(8) + ax0_ax1_ax2_ax3_fused % T.int64(8))
                                    T.reads(p1[v0, v1, v2, v3])
                                    T.writes(p1_shared[v0, v1, v2, v3])
                                    T.block_attr({"meta_schedule.cooperative_fetch": 2})
                                    p1_shared[v0, v1, v2, v3] = p1[v0, v1, v2, v3]
                            for ci_1, eps_3, nu_3, co_3, p_3, ci_2, eps_4, nu_4, co_4, p_4 in T.grid(T.int64(2), T.int64(3), T.int64(1), T.int64(1), T.int64(14), T.int64(8), T.int64(1), T.int64(2), T.int64(1), T.int64(1)):
                                with T.block("bgemm"):
                                    v_eps = T.axis.spatial(T.int64(6), eps_0_nu_0_co_0_p_0_fused // T.int64(32) * T.int64(3) + eps_3 + eps_4)
                                    v_nu = T.axis.spatial(T.int64(6), eps_2_nu_2_co_2_p_2_fused // T.int64(14) * T.int64(2) + nu_3 * T.int64(2) + nu_4)
                                    v_co = T.axis.spatial(T.int64(256), eps_0_nu_0_co_0_p_0_fused % T.int64(32) * T.int64(8) + eps_1_nu_1_co_1_p_1_fused // T.int64(2) * T.int64(2) + eps_2_nu_2_co_2_p_2_fused % T.int64(14) // T.int64(7) + co_3 + co_4)
                                    v_p = T.axis.spatial(T.int64(196), eps_1_nu_1_co_1_p_1_fused % T.int64(2) * T.int64(98) + eps_2_nu_2_co_2_p_2_fused % T.int64(7) * T.int64(14) + p_3 + p_4)
                                    v_ci = T.axis.reduce(T.int64(128), ci_0 * T.int64(16) + ci_1 * T.int64(8) + ci_2)
                                    T.reads(data_pack_shared[v_eps, v_nu, v_ci, v_p], p1_shared[v_eps, v_nu, v_ci, v_co])
                                    T.writes(bgemm_local[v_eps, v_nu, v_co, v_p])
                                    T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 32, "meta_schedule.tiling_structure": "SSSRRSRS"})
                                    with T.init():
                                        bgemm_local[v_eps, v_nu, v_co, v_p] = T.float32(0)
                                    bgemm_local[v_eps, v_nu, v_co, v_p] = bgemm_local[v_eps, v_nu, v_co, v_p] + data_pack_shared[v_eps, v_nu, v_ci, v_p] * p1_shared[v_eps, v_nu, v_ci, v_co]
                        for ax0, ax1, ax2, ax3 in T.grid(T.int64(3), T.int64(2), T.int64(1), T.int64(14)):
                            with T.block("bgemm_local"):
                                v0 = T.axis.spatial(T.int64(6), eps_0_nu_0_co_0_p_0_fused // T.int64(32) * T.int64(3) + ax0)
                                v1 = T.axis.spatial(T.int64(6), eps_2_nu_2_co_2_p_2_fused // T.int64(14) * T.int64(2) + ax1)
                                v2 = T.axis.spatial(T.int64(256), eps_0_nu_0_co_0_p_0_fused % T.int64(32) * T.int64(8) + eps_1_nu_1_co_1_p_1_fused // T.int64(2) * T.int64(2) + eps_2_nu_2_co_2_p_2_fused % T.int64(14) // T.int64(7) + ax2)
                                v3 = T.axis.spatial(T.int64(196), eps_1_nu_1_co_1_p_1_fused % T.int64(2) * T.int64(98) + eps_2_nu_2_co_2_p_2_fused % T.int64(7) * T.int64(14) + ax3)
                                T.reads(bgemm_local[v0, v1, v2, v3])
                                T.writes(bgemm[v0, v1, v2, v3])
                                bgemm[v0, v1, v2, v3] = bgemm_local[v0, v1, v2, v3]
            for n_co_h_0_w_0_fused_0 in T.thread_binding(T.int64(49), thread="blockIdx.x"):
                for n_co_h_0_w_0_fused_1 in T.thread_binding(T.int64(1024), thread="threadIdx.x"):
                    for ax0, ax1 in T.grid(T.int64(1), T.int64(1)):
                        for ax2 in T.unroll(T.int64(4)):
                            for ax3 in T.unroll(T.int64(4)):
                                for ax4 in T.unroll(T.int64(6)):
                                    for ax5 in T.unroll(T.int64(6)):
                                        with T.block("inverse"):
                                            v_co = T.axis.spatial(T.int64(256), (n_co_h_0_w_0_fused_0 * T.int64(1024) + n_co_h_0_w_0_fused_1) // T.int64(196) + ax0)
                                            v_p = T.axis.spatial(T.int64(196), (n_co_h_0_w_0_fused_0 * T.int64(1024) + n_co_h_0_w_0_fused_1) % T.int64(196) + ax1)
                                            v_vh, v_vw, v_r_a, v_r_b = T.axis.remap("SSRR", [ax2, ax3, ax4, ax5])
                                            T.reads(bgemm[v_r_a, v_r_b, v_co, v_p])
                                            T.writes(inverse_local[v_co, v_p, v_vh, v_vw])
                                            T.block_attr({"schedule_rule": "conv2d_nchw_winograd_inverse"})
                                            with T.init():
                                                inverse_local[v_co, v_p, v_vh, v_vw] = T.float32(0)
                                            inverse_local[v_co, v_p, v_vh, v_vw] = inverse_local[v_co, v_p, v_vh, v_vw] + bgemm[v_r_a, v_r_b, v_co, v_p] * T.Select(v_r_a % T.int64(6) == T.int64(5) and v_vh % T.int64(4) == T.int64(3), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(5) and v_vh % T.int64(4) == T.int64(2), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(5) and v_vh % T.int64(4) == T.int64(1), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(5) and v_vh % T.int64(4) == T.int64(0), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(4) and v_vh % T.int64(4) == T.int64(3), T.float32(-8), T.Select(v_r_a % T.int64(6) == T.int64(4) and v_vh % T.int64(4) == T.int64(2), T.float32(4), T.Select(v_r_a % T.int64(6) == T.int64(4) and v_vh % T.int64(4) == T.int64(1), T.float32(-2), T.Select(v_r_a % T.int64(6) == T.int64(4) and v_vh % T.int64(4) == T.int64(0), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(3) and v_vh % T.int64(4) == T.int64(3), T.float32(0.125), T.Select(v_r_a % T.int64(6) == T.int64(3) and v_vh % T.int64(4) == T.int64(2), T.float32(0.25), T.Select(v_r_a % T.int64(6) == T.int64(3) and v_vh % T.int64(4) == T.int64(1), T.float32(0.5), T.Select(v_r_a % T.int64(6) == T.int64(3) and v_vh % T.int64(4) == T.int64(0), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(2) and v_vh % T.int64(4) == T.int64(3), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(2) and v_vh % T.int64(4) == T.int64(2), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(2) and v_vh % T.int64(4) == T.int64(1), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(2) and v_vh % T.int64(4) == T.int64(0), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(1) and v_vh % T.int64(4) == T.int64(3), T.float32(-1), T.Select(v_r_a % T.int64(6) == T.int64(1) and v_vh % T.int64(4) == T.int64(2), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(1) and v_vh % T.int64(4) == T.int64(1), T.float32(-1), T.Select(v_r_a % T.int64(6) == T.int64(1) and v_vh % T.int64(4) == T.int64(0), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(0) and v_vh % T.int64(4) == T.int64(3), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(0) and v_vh % T.int64(4) == T.int64(2), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(0) and v_vh % T.int64(4) == T.int64(1), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(0) and v_vh % T.int64(4) == T.int64(0), T.float32(1), T.float32(0))))))))))))))))))))))))) * T.Select(v_r_b % T.int64(6) == T.int64(5) and v_vw % T.int64(4) == T.int64(3), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(5) and v_vw % T.int64(4) == T.int64(2), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(5) and v_vw % T.int64(4) == T.int64(1), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(5) and v_vw % T.int64(4) == T.int64(0), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(4) and v_vw % T.int64(4) == T.int64(3), T.float32(-8), T.Select(v_r_b % T.int64(6) == T.int64(4) and v_vw % T.int64(4) == T.int64(2), T.float32(4), T.Select(v_r_b % T.int64(6) == T.int64(4) and v_vw % T.int64(4) == T.int64(1), T.float32(-2), T.Select(v_r_b % T.int64(6) == T.int64(4) and v_vw % T.int64(4) == T.int64(0), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(3) and v_vw % T.int64(4) == T.int64(3), T.float32(0.125), T.Select(v_r_b % T.int64(6) == T.int64(3) and v_vw % T.int64(4) == T.int64(2), T.float32(0.25), T.Select(v_r_b % T.int64(6) == T.int64(3) and v_vw % T.int64(4) == T.int64(1), T.float32(0.5), T.Select(v_r_b % T.int64(6) == T.int64(3) and v_vw % T.int64(4) == T.int64(0), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(2) and v_vw % T.int64(4) == T.int64(3), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(2) and v_vw % T.int64(4) == T.int64(2), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(2) and v_vw % T.int64(4) == T.int64(1), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(2) and v_vw % T.int64(4) == T.int64(0), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(1) and v_vw % T.int64(4) == T.int64(3), T.float32(-1), T.Select(v_r_b % T.int64(6) == T.int64(1) and v_vw % T.int64(4) == T.int64(2), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(1) and v_vw % T.int64(4) == T.int64(1), T.float32(-1), T.Select(v_r_b % T.int64(6) == T.int64(1) and v_vw % T.int64(4) == T.int64(0), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(0) and v_vw % T.int64(4) == T.int64(3), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(0) and v_vw % T.int64(4) == T.int64(2), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(0) and v_vw % T.int64(4) == T.int64(1), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(0) and v_vw % T.int64(4) == T.int64(0), T.float32(1), T.float32(0)))))))))))))))))))))))))
                    for h_1, w_1 in T.grid(T.int64(4), T.int64(4)):
                        with T.block("conv2d_winograd"):
                            v_n = T.axis.spatial(T.int64(1), T.int64(0))
                            v_co = T.axis.spatial(T.int64(256), (n_co_h_0_w_0_fused_0 * T.int64(1024) + n_co_h_0_w_0_fused_1) // T.int64(196))
                            v_h = T.axis.spatial(T.int64(56), (n_co_h_0_w_0_fused_0 * T.int64(1024) + n_co_h_0_w_0_fused_1) % T.int64(196) // T.int64(14) * T.int64(4) + h_1)
                            v_w = T.axis.spatial(T.int64(56), (n_co_h_0_w_0_fused_0 * T.int64(1024) + n_co_h_0_w_0_fused_1) % T.int64(14) * T.int64(4) + w_1)
                            T.reads(inverse_local[v_co, v_n * T.int64(196) + v_h // T.int64(4) * T.int64(14) + v_w // T.int64(4), v_h % T.int64(4), v_w % T.int64(4)], p2[v_n, v_co, T.int64(0), T.int64(0)])
                            T.writes(T_relu[v_n, v_co, v_h, v_w])
                            T_relu[v_n, v_co, v_h, v_w] = T.max(inverse_local[v_co, v_n * T.int64(196) + v_h // T.int64(4) * T.int64(14) + v_w // T.int64(4), v_h % T.int64(4), v_w % T.int64(4)] + p2[v_n, v_co, T.int64(0), T.int64(0)], T.float32(0))
b0 = sch.get_block(name="data_pack", func_name="main")
b1 = sch.get_block(name="bgemm", func_name="main")
b2 = sch.get_block(name="inverse", func_name="main")
b3 = sch.get_block(name="conv2d_winograd", func_name="main")
b4 = sch.get_block(name="T_add", func_name="main")
b5 = sch.get_block(name="T_relu", func_name="main")
b6 = sch.get_block(name="root", func_name="main")
b7, b8 = sch.get_producers(block=b2)
sch.compute_inline(block=b8)
b9, = sch.get_consumers(block=b2)
l10, l11, l12, l13 = sch.get_loops(block=b9)
l14, l15 = sch.split(loop=l12, factors=[None, 4], preserve_unit_iters=True)
l16, l17 = sch.split(loop=l13, factors=[None, 4], preserve_unit_iters=True)
sch.reorder(l14, l16, l15, l17)
sch.compute_at(block=b2, loop=l16, preserve_unit_loops=True, index=-1)
sch.set_scope(block=b2, buffer_index=0, storage_scope="local")
l18, l19, l20, l21, l22, l23, l24, l25, l26, l27 = sch.get_loops(block=b2)
sch.unroll(loop=l24)
sch.unroll(loop=l25)
sch.unroll(loop=l26)
sch.unroll(loop=l27)
b28, b29 = sch.get_producers(block=b0)
sch.compute_inline(block=b29)
b30, = sch.get_producers(block=b28)
l31, l32, l33, l34, l35, l36 = sch.get_loops(block=b0)
sch.reorder(l33, l34, l31, l32, l35, l36)
sch.unroll(loop=l31)
sch.unroll(loop=l32)
sch.unroll(loop=l35)
sch.unroll(loop=l36)
l37 = sch.fuse(l33, l34, preserve_unit_iters=True)
v38 = sch.sample_categorical(candidates=[32, 64, 128, 256, 512, 1024], probs=[0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666], decision=3)
l39, l40 = sch.split(loop=l37, factors=[None, v38], preserve_unit_iters=True)
sch.bind(loop=l39, thread_axis="blockIdx.x")
sch.bind(loop=l40, thread_axis="threadIdx.x")
b41 = sch.cache_write(block=b0, write_buffer_index=0, storage_scope="local")
sch.reverse_compute_at(block=b41, loop=l40, preserve_unit_loops=True, index=-1)
sch.compute_at(block=b28, loop=l40, preserve_unit_loops=True, index=-1)
sch.set_scope(block=b28, buffer_index=0, storage_scope="local")
sch.compute_inline(block=b30)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSSRRSRS")
l42, l43, l44, l45, l46 = sch.get_loops(block=b1)
v47, v48, v49, v50, v51 = sch.sample_perfect_tile(loop=l42, n=5, max_innermost_factor=64, decision=[2, 1, 1, 3, 1])
l52, l53, l54, l55, l56 = sch.split(loop=l42, factors=[v47, v48, v49, v50, v51], preserve_unit_iters=True)
v57, v58, v59, v60, v61 = sch.sample_perfect_tile(loop=l43, n=5, max_innermost_factor=64, decision=[1, 1, 3, 1, 2])
l62, l63, l64, l65, l66 = sch.split(loop=l43, factors=[v57, v58, v59, v60, v61], preserve_unit_iters=True)
v67, v68, v69, v70, v71 = sch.sample_perfect_tile(loop=l44, n=5, max_innermost_factor=64, decision=[32, 4, 2, 1, 1])
l72, l73, l74, l75, l76 = sch.split(loop=l44, factors=[v67, v68, v69, v70, v71], preserve_unit_iters=True)
v77, v78, v79, v80, v81 = sch.sample_perfect_tile(loop=l45, n=5, max_innermost_factor=64, decision=[1, 2, 7, 14, 1])
l82, l83, l84, l85, l86 = sch.split(loop=l45, factors=[v77, v78, v79, v80, v81], preserve_unit_iters=True)
v87, v88, v89 = sch.sample_perfect_tile(loop=l46, n=3, max_innermost_factor=64, decision=[8, 2, 8])
l90, l91, l92 = sch.split(loop=l46, factors=[v87, v88, v89], preserve_unit_iters=True)
sch.reorder(l52, l62, l72, l82, l53, l63, l73, l83, l54, l64, l74, l84, l90, l91, l55, l65, l75, l85, l92, l56, l66, l76, l86)
l93 = sch.fuse(l52, l62, l72, l82, preserve_unit_iters=True)
sch.bind(loop=l93, thread_axis="blockIdx.x")
l94 = sch.fuse(l53, l63, l73, l83, preserve_unit_iters=True)
sch.bind(loop=l94, thread_axis="vthread.x")
l95 = sch.fuse(l54, l64, l74, l84, preserve_unit_iters=True)
sch.bind(loop=l95, thread_axis="threadIdx.x")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_low_inclusive", ann_val=32)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_high_inclusive", ann_val=1024)
b96 = sch.cache_write(block=b1, write_buffer_index=0, storage_scope="local")
sch.reverse_compute_at(block=b96, loop=l95, preserve_unit_loops=True, index=-1)
b97 = sch.cache_read(block=b1, read_buffer_index=0, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b97, loop=l90, preserve_unit_loops=True, index=-1)
l98, l99, l100, l101, l102, l103, l104, l105 = sch.get_loops(block=b97)
l106 = sch.fuse(l102, l103, l104, l105, preserve_unit_iters=True)
v107 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b97, ann_key="meta_schedule.cooperative_fetch", ann_val=v107)
b108 = sch.cache_read(block=b1, read_buffer_index=1, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b108, loop=l90, preserve_unit_loops=True, index=-1)
l109, l110, l111, l112, l113, l114, l115, l116 = sch.get_loops(block=b108)
l117 = sch.fuse(l113, l114, l115, l116, preserve_unit_iters=True)
v118 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=1)
sch.annotate(block_or_loop=b108, ann_key="meta_schedule.cooperative_fetch", ann_val=v118)
sch.reverse_compute_inline(block=b5)
sch.reverse_compute_inline(block=b4)
v119 = sch.sample_categorical(candidates=[0, 16, 64, 512, 1024], probs=[0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001], decision=0)
sch.annotate(block_or_loop=b6, ann_key="meta_schedule.unroll_explicit", ann_val=v119)
l120, l121, l122, l123, l124, l125 = sch.get_loops(block=b3)
l126 = sch.fuse(l120, l121, l122, l123, preserve_unit_iters=True)
v127 = sch.sample_categorical(candidates=[32, 64, 128, 256, 512, 1024], probs=[0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666], decision=5)
l128, l129 = sch.split(loop=l126, factors=[None, v127], preserve_unit_iters=True)
sch.bind(loop=l128, thread_axis="blockIdx.x")
sch.bind(loop=l129, thread_axis="threadIdx.x")
2024-04-29 17:02:28 [INFO] [task_scheduler.cc:170] Design space #1:
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(128), T.int64(56), T.int64(56)), "float32"), p1: T.Buffer((T.int64(6), T.int64(6), T.int64(128), T.int64(256)), "float32"), p2: T.Buffer((T.int64(1), T.int64(256), T.int64(1), T.int64(1)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(256), T.int64(56), T.int64(56)), "float32")):
        T.func_attr({"layout_free_buffers": [1], "tir.noalias": T.bool(True)})
        with T.block("root"):
            T.reads()
            T.writes()
            T.block_attr({"meta_schedule.unroll_explicit": 512})
            input_tile_local = T.alloc_buffer((T.int64(128), T.int64(196), T.int64(6), T.int64(6)), scope="local")
            data_pack = T.alloc_buffer((T.int64(6), T.int64(6), T.int64(128), T.int64(196)))
            bgemm = T.alloc_buffer((T.int64(6), T.int64(6), T.int64(256), T.int64(196)))
            inverse_local = T.alloc_buffer((T.int64(256), T.int64(196), T.int64(4), T.int64(4)), scope="local")
            data_pack_local = T.alloc_buffer((T.int64(6), T.int64(6), T.int64(128), T.int64(196)), scope="local")
            bgemm_local = T.alloc_buffer((T.int64(6), T.int64(6), T.int64(256), T.int64(196)), scope="local")
            data_pack_shared = T.alloc_buffer((T.int64(6), T.int64(6), T.int64(128), T.int64(196)), scope="shared")
            p1_shared = T.alloc_buffer((T.int64(6), T.int64(6), T.int64(128), T.int64(256)), scope="shared")
            for ci_p_fused_0 in T.thread_binding(T.int64(98), thread="blockIdx.x"):
                for ci_p_fused_1 in T.thread_binding(T.int64(256), thread="threadIdx.x"):
                    for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(1), T.int64(6), T.int64(6)):
                        with T.block("input_tile"):
                            v_ci = T.axis.spatial(T.int64(128), (ci_p_fused_0 * T.int64(256) + ci_p_fused_1) // T.int64(196) + ax0)
                            v_p = T.axis.spatial(T.int64(196), (ci_p_fused_0 * T.int64(60) + ci_p_fused_1) % T.int64(196) + ax1)
                            v_eps, v_nu = T.axis.remap("SS", [ax2, ax3])
                            T.reads(p0[v_p // T.int64(196), v_ci, v_p % T.int64(196) // T.int64(14) * T.int64(4) + v_eps - T.int64(1), v_p % T.int64(14) * T.int64(4) + v_nu - T.int64(1)])
                            T.writes(input_tile_local[v_ci, v_p, v_eps, v_nu])
                            T.block_attr({"schedule_rule": "None"})
                            input_tile_local[v_ci, v_p, v_eps, v_nu] = T.if_then_else(T.int64(1) <= v_p % T.int64(196) // T.int64(14) * T.int64(4) + v_eps and v_p % T.int64(196) // T.int64(14) * T.int64(4) + v_eps < T.int64(57) and T.int64(1) <= v_p % T.int64(14) * T.int64(4) + v_nu and v_p % T.int64(14) * T.int64(4) + v_nu < T.int64(57), p0[v_p // T.int64(196), v_ci, v_p % T.int64(196) // T.int64(14) * T.int64(4) + v_eps - T.int64(1), v_p % T.int64(14) * T.int64(4) + v_nu - T.int64(1)], T.float32(0))
                    for eps in T.unroll(T.int64(6)):
                        for nu in T.unroll(T.int64(6)):
                            for r_a in T.unroll(T.int64(6)):
                                for r_b in T.unroll(T.int64(6)):
                                    with T.block("data_pack"):
                                        v_eps, v_nu = T.axis.remap("SS", [eps, nu])
                                        v_ci = T.axis.spatial(T.int64(128), (ci_p_fused_0 * T.int64(256) + ci_p_fused_1) // T.int64(196))
                                        v_p = T.axis.spatial(T.int64(196), (ci_p_fused_0 * T.int64(256) + ci_p_fused_1) % T.int64(196))
                                        v_r_a, v_r_b = T.axis.remap("RR", [r_a, r_b])
                                        T.reads(input_tile_local[v_ci, v_p, v_r_a, v_r_b])
                                        T.writes(data_pack_local[v_eps, v_nu, v_ci, v_p])
                                        T.block_attr({"schedule_rule": "conv2d_nchw_winograd_data_pack"})
                                        with T.init():
                                            data_pack_local[v_eps, v_nu, v_ci, v_p] = T.float32(0)
                                        data_pack_local[v_eps, v_nu, v_ci, v_p] = data_pack_local[v_eps, v_nu, v_ci, v_p] + input_tile_local[v_ci, v_p, v_r_a, v_r_b] * T.Select(v_r_a % T.int64(6) == T.int64(5) and v_eps % T.int64(6) == T.int64(5), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(5) and v_eps % T.int64(6) == T.int64(4), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(5) and v_eps % T.int64(6) == T.int64(3), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(5) and v_eps % T.int64(6) == T.int64(2), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(5) and v_eps % T.int64(6) == T.int64(1), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(5) and v_eps % T.int64(6) == T.int64(0), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(4) and v_eps % T.int64(6) == T.int64(5), T.float32(1.5), T.Select(v_r_a % T.int64(6) == T.int64(4) and v_eps % T.int64(6) == T.int64(4), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(4) and v_eps % T.int64(6) == T.int64(3), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(4) and v_eps % T.int64(6) == T.int64(2), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(4) and v_eps % T.int64(6) == T.int64(1), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(4) and v_eps % T.int64(6) == T.int64(0), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(3) and v_eps % T.int64(6) == T.int64(5), T.float32(-2), T.Select(v_r_a % T.int64(6) == T.int64(3) and v_eps % T.int64(6) == T.int64(4), T.float32(-0.5), T.Select(v_r_a % T.int64(6) == T.int64(3) and v_eps % T.int64(6) == T.int64(3), T.float32(2), T.Select(v_r_a % T.int64(6) == T.int64(3) and v_eps % T.int64(6) == T.int64(2), T.float32(2.5), T.Select(v_r_a % T.int64(6) == T.int64(3) and v_eps % T.int64(6) == T.int64(1), T.float32(0.5), T.Select(v_r_a % T.int64(6) == T.int64(3) and v_eps % T.int64(6) == T.int64(0), T.float32(1.5), T.Select(v_r_a % T.int64(6) == T.int64(2) and v_eps % T.int64(6) == T.int64(5), T.float32(-1.5), T.Select(v_r_a % T.int64(6) == T.int64(2) and v_eps % T.int64(6) == T.int64(4), T.float32(-1), T.Select(v_r_a % T.int64(6) == T.int64(2) and v_eps % T.int64(6) == T.int64(3), T.float32(-1), T.Select(v_r_a % T.int64(6) == T.int64(2) and v_eps % T.int64(6) == T.int64(2), T.float32(0.5), T.Select(v_r_a % T.int64(6) == T.int64(2) and v_eps % T.int64(6) == T.int64(1), T.float32(-2.5), T.Select(v_r_a % T.int64(6) == T.int64(2) and v_eps % T.int64(6) == T.int64(0), T.float32(-2), T.Select(v_r_a % T.int64(6) == T.int64(1) and v_eps % T.int64(6) == T.int64(5), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(1) and v_eps % T.int64(6) == T.int64(4), T.float32(0.5), T.Select(v_r_a % T.int64(6) == T.int64(1) and v_eps % T.int64(6) == T.int64(3), T.float32(-2), T.Select(v_r_a % T.int64(6) == T.int64(1) and v_eps % T.int64(6) == T.int64(2), T.float32(-1), T.Select(v_r_a % T.int64(6) == T.int64(1) and v_eps % T.int64(6) == T.int64(1), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(1) and v_eps % T.int64(6) == T.int64(0), T.float32(-1.5), T.Select(v_r_a % T.int64(6) == T.int64(0) and v_eps % T.int64(6) == T.int64(5), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(0) and v_eps % T.int64(6) == T.int64(4), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(0) and v_eps % T.int64(6) == T.int64(3), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(0) and v_eps % T.int64(6) == T.int64(2), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(0) and v_eps % T.int64(6) == T.int64(1), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(0) and v_eps % T.int64(6) == T.int64(0), T.float32(1), T.float32(0))))))))))))))))))))))))))))))))))))) * T.Select(v_r_b % T.int64(6) == T.int64(5) and v_nu % T.int64(6) == T.int64(5), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(5) and v_nu % T.int64(6) == T.int64(4), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(5) and v_nu % T.int64(6) == T.int64(3), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(5) and v_nu % T.int64(6) == T.int64(2), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(5) and v_nu % T.int64(6) == T.int64(1), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(5) and v_nu % T.int64(6) == T.int64(0), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(4) and v_nu % T.int64(6) == T.int64(5), T.float32(1.5), T.Select(v_r_b % T.int64(6) == T.int64(4) and v_nu % T.int64(6) == T.int64(4), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(4) and v_nu % T.int64(6) == T.int64(3), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(4) and v_nu % T.int64(6) == T.int64(2), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(4) and v_nu % T.int64(6) == T.int64(1), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(4) and v_nu % T.int64(6) == T.int64(0), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(3) and v_nu % T.int64(6) == T.int64(5), T.float32(-2), T.Select(v_r_b % T.int64(6) == T.int64(3) and v_nu % T.int64(6) == T.int64(4), T.float32(-0.5), T.Select(v_r_b % T.int64(6) == T.int64(3) and v_nu % T.int64(6) == T.int64(3), T.float32(2), T.Select(v_r_b % T.int64(6) == T.int64(3) and v_nu % T.int64(6) == T.int64(2), T.float32(2.5), T.Select(v_r_b % T.int64(6) == T.int64(3) and v_nu % T.int64(6) == T.int64(1), T.float32(0.5), T.Select(v_r_b % T.int64(6) == T.int64(3) and v_nu % T.int64(6) == T.int64(0), T.float32(1.5), T.Select(v_r_b % T.int64(6) == T.int64(2) and v_nu % T.int64(6) == T.int64(5), T.float32(-1.5), T.Select(v_r_b % T.int64(6) == T.int64(2) and v_nu % T.int64(6) == T.int64(4), T.float32(-1), T.Select(v_r_b % T.int64(6) == T.int64(2) and v_nu % T.int64(6) == T.int64(3), T.float32(-1), T.Select(v_r_b % T.int64(6) == T.int64(2) and v_nu % T.int64(6) == T.int64(2), T.float32(0.5), T.Select(v_r_b % T.int64(6) == T.int64(2) and v_nu % T.int64(6) == T.int64(1), T.float32(-2.5), T.Select(v_r_b % T.int64(6) == T.int64(2) and v_nu % T.int64(6) == T.int64(0), T.float32(-2), T.Select(v_r_b % T.int64(6) == T.int64(1) and v_nu % T.int64(6) == T.int64(5), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(1) and v_nu % T.int64(6) == T.int64(4), T.float32(0.5), T.Select(v_r_b % T.int64(6) == T.int64(1) and v_nu % T.int64(6) == T.int64(3), T.float32(-2), T.Select(v_r_b % T.int64(6) == T.int64(1) and v_nu % T.int64(6) == T.int64(2), T.float32(-1), T.Select(v_r_b % T.int64(6) == T.int64(1) and v_nu % T.int64(6) == T.int64(1), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(1) and v_nu % T.int64(6) == T.int64(0), T.float32(-1.5), T.Select(v_r_b % T.int64(6) == T.int64(0) and v_nu % T.int64(6) == T.int64(5), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(0) and v_nu % T.int64(6) == T.int64(4), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(0) and v_nu % T.int64(6) == T.int64(3), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(0) and v_nu % T.int64(6) == T.int64(2), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(0) and v_nu % T.int64(6) == T.int64(1), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(0) and v_nu % T.int64(6) == T.int64(0), T.float32(1), T.float32(0)))))))))))))))))))))))))))))))))))))
                    for ax0, ax1, ax2, ax3 in T.grid(T.int64(6), T.int64(6), T.int64(1), T.int64(1)):
                        with T.block("data_pack_local"):
                            v0, v1 = T.axis.remap("SS", [ax0, ax1])
                            v2 = T.axis.spatial(T.int64(128), (ci_p_fused_0 * T.int64(256) + ci_p_fused_1) // T.int64(196) + ax2)
                            v3 = T.axis.spatial(T.int64(196), (ci_p_fused_0 * T.int64(60) + ci_p_fused_1) % T.int64(196) + ax3)
                            T.reads(data_pack_local[v0, v1, v2, v3])
                            T.writes(data_pack[v0, v1, v2, v3])
                            data_pack[v0, v1, v2, v3] = data_pack_local[v0, v1, v2, v3]
            for eps_0_nu_0_co_0_p_0_fused in T.thread_binding(T.int64(64), thread="blockIdx.x"):
                for eps_1_nu_1_co_1_p_1_fused in T.thread_binding(T.int64(8), thread="vthread.x"):
                    for eps_2_nu_2_co_2_p_2_fused in T.thread_binding(T.int64(42), thread="threadIdx.x"):
                        for ci_0_fused in T.serial(T.int64(8), annotations={"software_pipeline_async_stages": [0], "software_pipeline_order": [0, 1, 2], "software_pipeline_stage": [0, 0, 2]}):
                            for ax0_ax1_ax2_ax3_fused in range(T.int64(56448)):
                                with T.block("data_pack_shared"):
                                    v0 = T.axis.spatial(T.int64(6), eps_0_nu_0_co_0_p_0_fused // T.int64(32) * T.int64(3) + ax0_ax1_ax2_ax3_fused // T.int64(18816))
                                    v1 = T.axis.spatial(T.int64(6), ax0_ax1_ax2_ax3_fused % T.int64(18816) // T.int64(3136))
                                    v2 = T.axis.spatial(T.int64(128), ci_0_fused * T.int64(16) + ax0_ax1_ax2_ax3_fused % T.int64(3136) // T.int64(196))
                                    v3 = T.axis.spatial(T.int64(196), ax0_ax1_ax2_ax3_fused % T.int64(196))
                                    T.reads(data_pack[v0, v1, v2, v3])
                                    T.writes(data_pack_shared[v0, v1, v2, v3])
                                    T.block_attr({"meta_schedule.cooperative_fetch": 4})
                                    data_pack_shared[v0, v1, v2, v3] = data_pack[v0, v1, v2, v3]
                            for ax0_ax1_ax2_ax3_fused in range(T.int64(2304)):
                                with T.block("p1_shared"):
                                    v0 = T.axis.spatial(T.int64(6), eps_0_nu_0_co_0_p_0_fused // T.int64(32) * T.int64(3) + ax0_ax1_ax2_ax3_fused // T.int64(768))
                                    v1 = T.axis.spatial(T.int64(6), ax0_ax1_ax2_ax3_fused % T.int64(768) // T.int64(128))
                                    v2 = T.axis.spatial(T.int64(128), ci_0_fused * T.int64(16) + ax0_ax1_ax2_ax3_fused % T.int64(128) // T.int64(8))
                                    v3 = T.axis.spatial(T.int64(256), eps_0_nu_0_co_0_p_0_fused % T.int64(32) * T.int64(8) + ax0_ax1_ax2_ax3_fused % T.int64(8))
                                    T.reads(p1[v0, v1, v2, v3])
                                    T.writes(p1_shared[v0, v1, v2, v3])
                                    T.block_attr({"meta_schedule.cooperative_fetch": 2})
                                    p1_shared[v0, v1, v2, v3] = p1[v0, v1, v2, v3]
                            for ci_1, eps_3, nu_3, co_3, p_3, ci_2, eps_4, nu_4, co_4, p_4 in T.grid(T.int64(2), T.int64(3), T.int64(1), T.int64(1), T.int64(14), T.int64(8), T.int64(1), T.int64(2), T.int64(1), T.int64(1)):
                                with T.block("bgemm"):
                                    v_eps = T.axis.spatial(T.int64(6), eps_0_nu_0_co_0_p_0_fused // T.int64(32) * T.int64(3) + eps_3 + eps_4)
                                    v_nu = T.axis.spatial(T.int64(6), eps_2_nu_2_co_2_p_2_fused // T.int64(14) * T.int64(2) + nu_3 * T.int64(2) + nu_4)
                                    v_co = T.axis.spatial(T.int64(256), eps_0_nu_0_co_0_p_0_fused % T.int64(32) * T.int64(8) + eps_1_nu_1_co_1_p_1_fused // T.int64(2) * T.int64(2) + eps_2_nu_2_co_2_p_2_fused % T.int64(14) // T.int64(7) + co_3 + co_4)
                                    v_p = T.axis.spatial(T.int64(196), eps_1_nu_1_co_1_p_1_fused % T.int64(2) * T.int64(98) + eps_2_nu_2_co_2_p_2_fused % T.int64(7) * T.int64(14) + p_3 + p_4)
                                    v_ci = T.axis.reduce(T.int64(128), ci_0_fused * T.int64(16) + ci_1 * T.int64(8) + ci_2)
                                    T.reads(data_pack_shared[v_eps, v_nu, v_ci, v_p], p1_shared[v_eps, v_nu, v_ci, v_co])
                                    T.writes(bgemm_local[v_eps, v_nu, v_co, v_p])
                                    T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 32, "meta_schedule.tiling_structure": "SSSRRSRS"})
                                    with T.init():
                                        bgemm_local[v_eps, v_nu, v_co, v_p] = T.float32(0)
                                    bgemm_local[v_eps, v_nu, v_co, v_p] = bgemm_local[v_eps, v_nu, v_co, v_p] + data_pack_shared[v_eps, v_nu, v_ci, v_p] * p1_shared[v_eps, v_nu, v_ci, v_co]
                        for ax0, ax1, ax2, ax3 in T.grid(T.int64(3), T.int64(2), T.int64(1), T.int64(14)):
                            with T.block("bgemm_local"):
                                v0 = T.axis.spatial(T.int64(6), eps_0_nu_0_co_0_p_0_fused // T.int64(32) * T.int64(3) + ax0)
                                v1 = T.axis.spatial(T.int64(6), eps_2_nu_2_co_2_p_2_fused // T.int64(14) * T.int64(2) + ax1)
                                v2 = T.axis.spatial(T.int64(256), eps_0_nu_0_co_0_p_0_fused % T.int64(32) * T.int64(8) + eps_1_nu_1_co_1_p_1_fused // T.int64(2) * T.int64(2) + eps_2_nu_2_co_2_p_2_fused % T.int64(14) // T.int64(7) + ax2)
                                v3 = T.axis.spatial(T.int64(196), eps_1_nu_1_co_1_p_1_fused % T.int64(2) * T.int64(98) + eps_2_nu_2_co_2_p_2_fused % T.int64(7) * T.int64(14) + ax3)
                                T.reads(bgemm_local[v0, v1, v2, v3])
                                T.writes(bgemm[v0, v1, v2, v3])
                                bgemm[v0, v1, v2, v3] = bgemm_local[v0, v1, v2, v3]
            for n_co_h_0_w_0_fused_0 in T.thread_binding(T.int64(49), thread="blockIdx.x"):
                for n_co_h_0_w_0_fused_1 in T.thread_binding(T.int64(1024), thread="threadIdx.x"):
                    for ax0, ax1 in T.grid(T.int64(1), T.int64(1)):
                        for ax2 in T.unroll(T.int64(4)):
                            for ax3 in T.unroll(T.int64(4)):
                                for ax4 in T.unroll(T.int64(6)):
                                    for ax5 in T.unroll(T.int64(6)):
                                        with T.block("inverse"):
                                            v_co = T.axis.spatial(T.int64(256), (n_co_h_0_w_0_fused_0 * T.int64(1024) + n_co_h_0_w_0_fused_1) // T.int64(196) + ax0)
                                            v_p = T.axis.spatial(T.int64(196), (n_co_h_0_w_0_fused_0 * T.int64(1024) + n_co_h_0_w_0_fused_1) % T.int64(196) + ax1)
                                            v_vh, v_vw, v_r_a, v_r_b = T.axis.remap("SSRR", [ax2, ax3, ax4, ax5])
                                            T.reads(bgemm[v_r_a, v_r_b, v_co, v_p])
                                            T.writes(inverse_local[v_co, v_p, v_vh, v_vw])
                                            T.block_attr({"schedule_rule": "conv2d_nchw_winograd_inverse"})
                                            with T.init():
                                                inverse_local[v_co, v_p, v_vh, v_vw] = T.float32(0)
                                            inverse_local[v_co, v_p, v_vh, v_vw] = inverse_local[v_co, v_p, v_vh, v_vw] + bgemm[v_r_a, v_r_b, v_co, v_p] * T.Select(v_r_a % T.int64(6) == T.int64(5) and v_vh % T.int64(4) == T.int64(3), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(5) and v_vh % T.int64(4) == T.int64(2), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(5) and v_vh % T.int64(4) == T.int64(1), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(5) and v_vh % T.int64(4) == T.int64(0), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(4) and v_vh % T.int64(4) == T.int64(3), T.float32(-8), T.Select(v_r_a % T.int64(6) == T.int64(4) and v_vh % T.int64(4) == T.int64(2), T.float32(4), T.Select(v_r_a % T.int64(6) == T.int64(4) and v_vh % T.int64(4) == T.int64(1), T.float32(-2), T.Select(v_r_a % T.int64(6) == T.int64(4) and v_vh % T.int64(4) == T.int64(0), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(3) and v_vh % T.int64(4) == T.int64(3), T.float32(0.125), T.Select(v_r_a % T.int64(6) == T.int64(3) and v_vh % T.int64(4) == T.int64(2), T.float32(0.25), T.Select(v_r_a % T.int64(6) == T.int64(3) and v_vh % T.int64(4) == T.int64(1), T.float32(0.5), T.Select(v_r_a % T.int64(6) == T.int64(3) and v_vh % T.int64(4) == T.int64(0), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(2) and v_vh % T.int64(4) == T.int64(3), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(2) and v_vh % T.int64(4) == T.int64(2), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(2) and v_vh % T.int64(4) == T.int64(1), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(2) and v_vh % T.int64(4) == T.int64(0), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(1) and v_vh % T.int64(4) == T.int64(3), T.float32(-1), T.Select(v_r_a % T.int64(6) == T.int64(1) and v_vh % T.int64(4) == T.int64(2), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(1) and v_vh % T.int64(4) == T.int64(1), T.float32(-1), T.Select(v_r_a % T.int64(6) == T.int64(1) and v_vh % T.int64(4) == T.int64(0), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(0) and v_vh % T.int64(4) == T.int64(3), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(0) and v_vh % T.int64(4) == T.int64(2), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(0) and v_vh % T.int64(4) == T.int64(1), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(0) and v_vh % T.int64(4) == T.int64(0), T.float32(1), T.float32(0))))))))))))))))))))))))) * T.Select(v_r_b % T.int64(6) == T.int64(5) and v_vw % T.int64(4) == T.int64(3), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(5) and v_vw % T.int64(4) == T.int64(2), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(5) and v_vw % T.int64(4) == T.int64(1), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(5) and v_vw % T.int64(4) == T.int64(0), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(4) and v_vw % T.int64(4) == T.int64(3), T.float32(-8), T.Select(v_r_b % T.int64(6) == T.int64(4) and v_vw % T.int64(4) == T.int64(2), T.float32(4), T.Select(v_r_b % T.int64(6) == T.int64(4) and v_vw % T.int64(4) == T.int64(1), T.float32(-2), T.Select(v_r_b % T.int64(6) == T.int64(4) and v_vw % T.int64(4) == T.int64(0), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(3) and v_vw % T.int64(4) == T.int64(3), T.float32(0.125), T.Select(v_r_b % T.int64(6) == T.int64(3) and v_vw % T.int64(4) == T.int64(2), T.float32(0.25), T.Select(v_r_b % T.int64(6) == T.int64(3) and v_vw % T.int64(4) == T.int64(1), T.float32(0.5), T.Select(v_r_b % T.int64(6) == T.int64(3) and v_vw % T.int64(4) == T.int64(0), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(2) and v_vw % T.int64(4) == T.int64(3), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(2) and v_vw % T.int64(4) == T.int64(2), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(2) and v_vw % T.int64(4) == T.int64(1), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(2) and v_vw % T.int64(4) == T.int64(0), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(1) and v_vw % T.int64(4) == T.int64(3), T.float32(-1), T.Select(v_r_b % T.int64(6) == T.int64(1) and v_vw % T.int64(4) == T.int64(2), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(1) and v_vw % T.int64(4) == T.int64(1), T.float32(-1), T.Select(v_r_b % T.int64(6) == T.int64(1) and v_vw % T.int64(4) == T.int64(0), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(0) and v_vw % T.int64(4) == T.int64(3), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(0) and v_vw % T.int64(4) == T.int64(2), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(0) and v_vw % T.int64(4) == T.int64(1), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(0) and v_vw % T.int64(4) == T.int64(0), T.float32(1), T.float32(0)))))))))))))))))))))))))
                    for h_1, w_1 in T.grid(T.int64(4), T.int64(4)):
                        with T.block("conv2d_winograd"):
                            v_n = T.axis.spatial(T.int64(1), T.int64(0))
                            v_co = T.axis.spatial(T.int64(256), (n_co_h_0_w_0_fused_0 * T.int64(1024) + n_co_h_0_w_0_fused_1) // T.int64(196))
                            v_h = T.axis.spatial(T.int64(56), (n_co_h_0_w_0_fused_0 * T.int64(1024) + n_co_h_0_w_0_fused_1) % T.int64(196) // T.int64(14) * T.int64(4) + h_1)
                            v_w = T.axis.spatial(T.int64(56), (n_co_h_0_w_0_fused_0 * T.int64(1024) + n_co_h_0_w_0_fused_1) % T.int64(14) * T.int64(4) + w_1)
                            T.reads(inverse_local[v_co, v_n * T.int64(196) + v_h // T.int64(4) * T.int64(14) + v_w // T.int64(4), v_h % T.int64(4), v_w % T.int64(4)], p2[v_n, v_co, T.int64(0), T.int64(0)])
                            T.writes(T_relu[v_n, v_co, v_h, v_w])
                            T_relu[v_n, v_co, v_h, v_w] = T.max(inverse_local[v_co, v_n * T.int64(196) + v_h // T.int64(4) * T.int64(14) + v_w // T.int64(4), v_h % T.int64(4), v_w % T.int64(4)] + p2[v_n, v_co, T.int64(0), T.int64(0)], T.float32(0))
b0 = sch.get_block(name="data_pack", func_name="main")
b1 = sch.get_block(name="bgemm", func_name="main")
b2 = sch.get_block(name="inverse", func_name="main")
b3 = sch.get_block(name="conv2d_winograd", func_name="main")
b4 = sch.get_block(name="T_add", func_name="main")
b5 = sch.get_block(name="T_relu", func_name="main")
b6 = sch.get_block(name="root", func_name="main")
b7, b8 = sch.get_producers(block=b2)
sch.compute_inline(block=b8)
b9, = sch.get_consumers(block=b2)
l10, l11, l12, l13 = sch.get_loops(block=b9)
l14, l15 = sch.split(loop=l12, factors=[None, 4], preserve_unit_iters=True)
l16, l17 = sch.split(loop=l13, factors=[None, 4], preserve_unit_iters=True)
sch.reorder(l14, l16, l15, l17)
sch.compute_at(block=b2, loop=l16, preserve_unit_loops=True, index=-1)
sch.set_scope(block=b2, buffer_index=0, storage_scope="local")
l18, l19, l20, l21, l22, l23, l24, l25, l26, l27 = sch.get_loops(block=b2)
sch.unroll(loop=l24)
sch.unroll(loop=l25)
sch.unroll(loop=l26)
sch.unroll(loop=l27)
b28, b29 = sch.get_producers(block=b0)
sch.compute_inline(block=b29)
b30, = sch.get_producers(block=b28)
l31, l32, l33, l34, l35, l36 = sch.get_loops(block=b0)
sch.reorder(l33, l34, l31, l32, l35, l36)
sch.unroll(loop=l31)
sch.unroll(loop=l32)
sch.unroll(loop=l35)
sch.unroll(loop=l36)
l37 = sch.fuse(l33, l34, preserve_unit_iters=True)
v38 = sch.sample_categorical(candidates=[32, 64, 128, 256, 512, 1024], probs=[0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666], decision=3)
l39, l40 = sch.split(loop=l37, factors=[None, v38], preserve_unit_iters=True)
sch.bind(loop=l39, thread_axis="blockIdx.x")
sch.bind(loop=l40, thread_axis="threadIdx.x")
b41 = sch.cache_write(block=b0, write_buffer_index=0, storage_scope="local")
sch.reverse_compute_at(block=b41, loop=l40, preserve_unit_loops=True, index=-1)
sch.compute_at(block=b28, loop=l40, preserve_unit_loops=True, index=-1)
sch.set_scope(block=b28, buffer_index=0, storage_scope="local")
sch.compute_inline(block=b30)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSSRRSRS")
l42, l43, l44, l45, l46 = sch.get_loops(block=b1)
v47, v48, v49, v50, v51 = sch.sample_perfect_tile(loop=l42, n=5, max_innermost_factor=64, decision=[2, 1, 1, 3, 1])
l52, l53, l54, l55, l56 = sch.split(loop=l42, factors=[v47, v48, v49, v50, v51], preserve_unit_iters=True)
v57, v58, v59, v60, v61 = sch.sample_perfect_tile(loop=l43, n=5, max_innermost_factor=64, decision=[1, 1, 3, 1, 2])
l62, l63, l64, l65, l66 = sch.split(loop=l43, factors=[v57, v58, v59, v60, v61], preserve_unit_iters=True)
v67, v68, v69, v70, v71 = sch.sample_perfect_tile(loop=l44, n=5, max_innermost_factor=64, decision=[32, 4, 2, 1, 1])
l72, l73, l74, l75, l76 = sch.split(loop=l44, factors=[v67, v68, v69, v70, v71], preserve_unit_iters=True)
v77, v78, v79, v80, v81 = sch.sample_perfect_tile(loop=l45, n=5, max_innermost_factor=64, decision=[1, 2, 7, 14, 1])
l82, l83, l84, l85, l86 = sch.split(loop=l45, factors=[v77, v78, v79, v80, v81], preserve_unit_iters=True)
v87, v88, v89 = sch.sample_perfect_tile(loop=l46, n=3, max_innermost_factor=64, decision=[8, 2, 8])
l90, l91, l92 = sch.split(loop=l46, factors=[v87, v88, v89], preserve_unit_iters=True)
sch.reorder(l52, l62, l72, l82, l53, l63, l73, l83, l54, l64, l74, l84, l90, l91, l55, l65, l75, l85, l92, l56, l66, l76, l86)
l93 = sch.fuse(l52, l62, l72, l82, preserve_unit_iters=True)
sch.bind(loop=l93, thread_axis="blockIdx.x")
l94 = sch.fuse(l53, l63, l73, l83, preserve_unit_iters=True)
sch.bind(loop=l94, thread_axis="vthread.x")
l95 = sch.fuse(l54, l64, l74, l84, preserve_unit_iters=True)
sch.bind(loop=l95, thread_axis="threadIdx.x")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_low_inclusive", ann_val=32)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_high_inclusive", ann_val=1024)
b96 = sch.cache_write(block=b1, write_buffer_index=0, storage_scope="local")
sch.reverse_compute_at(block=b96, loop=l95, preserve_unit_loops=True, index=-1)
b97 = sch.cache_read(block=b1, read_buffer_index=0, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b97, loop=l90, preserve_unit_loops=True, index=-1)
l98, l99, l100, l101, l102, l103, l104, l105 = sch.get_loops(block=b97)
l106 = sch.fuse(l102, l103, l104, l105, preserve_unit_iters=True)
v107 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b97, ann_key="meta_schedule.cooperative_fetch", ann_val=v107)
b108 = sch.cache_read(block=b1, read_buffer_index=1, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b108, loop=l90, preserve_unit_loops=True, index=-1)
l109, l110, l111, l112, l113, l114, l115, l116 = sch.get_loops(block=b108)
l117 = sch.fuse(l113, l114, l115, l116, preserve_unit_iters=True)
v118 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=1)
sch.annotate(block_or_loop=b108, ann_key="meta_schedule.cooperative_fetch", ann_val=v118)
l119 = sch.fuse(l90, preserve_unit_iters=True)
sch.annotate(block_or_loop=l119, ann_key="software_pipeline_stage", ann_val=[0, 0, 2])
sch.annotate(block_or_loop=l119, ann_key="software_pipeline_order", ann_val=[0, 1, 2])
sch.annotate(block_or_loop=l119, ann_key="software_pipeline_async_stages", ann_val=[0])
sch.reverse_compute_inline(block=b5)
sch.reverse_compute_inline(block=b4)
v120 = sch.sample_categorical(candidates=[0, 16, 64, 512, 1024], probs=[0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001], decision=3)
sch.annotate(block_or_loop=b6, ann_key="meta_schedule.unroll_explicit", ann_val=v120)
l121, l122, l123, l124, l125, l126 = sch.get_loops(block=b3)
l127 = sch.fuse(l121, l122, l123, l124, preserve_unit_iters=True)
v128 = sch.sample_categorical(candidates=[32, 64, 128, 256, 512, 1024], probs=[0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666], decision=5)
l129, l130 = sch.split(loop=l127, factors=[None, v128], preserve_unit_iters=True)
sch.bind(loop=l129, thread_axis="blockIdx.x")
sch.bind(loop=l130, thread_axis="threadIdx.x")
2024-04-29 17:02:28 [INFO] [task_scheduler.cc:170] Design space #2:
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(128), T.int64(56), T.int64(56)), "float32"), p1: T.Buffer((T.int64(6), T.int64(6), T.int64(128), T.int64(256)), "float32"), p2: T.Buffer((T.int64(1), T.int64(256), T.int64(1), T.int64(1)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(256), T.int64(56), T.int64(56)), "float32")):
        T.func_attr({"layout_free_buffers": [1], "tir.noalias": T.bool(True)})
        with T.block("root"):
            T.reads()
            T.writes()
            T.block_attr({"meta_schedule.unroll_explicit": 64})
            input_tile_local = T.alloc_buffer((T.int64(128), T.int64(196), T.int64(6), T.int64(6)), scope="local")
            data_pack = T.alloc_buffer((T.int64(6), T.int64(6), T.int64(128), T.int64(196)))
            bgemm = T.alloc_buffer((T.int64(6), T.int64(6), T.int64(256), T.int64(196)))
            inverse_local = T.alloc_buffer((T.int64(256), T.int64(196), T.int64(4), T.int64(4)), scope="local")
            data_pack_local = T.alloc_buffer((T.int64(6), T.int64(6), T.int64(128), T.int64(196)), scope="local")
            bgemm_local = T.alloc_buffer((T.int64(6), T.int64(6), T.int64(256), T.int64(196)), scope="local")
            data_pack_shared = T.alloc_buffer((T.int64(6), T.int64(6), T.int64(128), T.int64(196)), scope="shared")
            p1_shared = T.alloc_buffer((T.int64(6), T.int64(6), T.int64(128), T.int64(256)), scope="shared")
            for ci_p_fused_0 in T.thread_binding(T.int64(98), thread="blockIdx.x"):
                for ci_p_fused_1 in T.thread_binding(T.int64(256), thread="threadIdx.x"):
                    for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(1), T.int64(6), T.int64(6)):
                        with T.block("input_tile"):
                            v_ci = T.axis.spatial(T.int64(128), (ci_p_fused_0 * T.int64(256) + ci_p_fused_1) // T.int64(196) + ax0)
                            v_p = T.axis.spatial(T.int64(196), (ci_p_fused_0 * T.int64(60) + ci_p_fused_1) % T.int64(196) + ax1)
                            v_eps, v_nu = T.axis.remap("SS", [ax2, ax3])
                            T.reads(p0[v_p // T.int64(196), v_ci, v_p % T.int64(196) // T.int64(14) * T.int64(4) + v_eps - T.int64(1), v_p % T.int64(14) * T.int64(4) + v_nu - T.int64(1)])
                            T.writes(input_tile_local[v_ci, v_p, v_eps, v_nu])
                            T.block_attr({"schedule_rule": "None"})
                            input_tile_local[v_ci, v_p, v_eps, v_nu] = T.if_then_else(T.int64(1) <= v_p % T.int64(196) // T.int64(14) * T.int64(4) + v_eps and v_p % T.int64(196) // T.int64(14) * T.int64(4) + v_eps < T.int64(57) and T.int64(1) <= v_p % T.int64(14) * T.int64(4) + v_nu and v_p % T.int64(14) * T.int64(4) + v_nu < T.int64(57), p0[v_p // T.int64(196), v_ci, v_p % T.int64(196) // T.int64(14) * T.int64(4) + v_eps - T.int64(1), v_p % T.int64(14) * T.int64(4) + v_nu - T.int64(1)], T.float32(0))
                    for eps in T.unroll(T.int64(6)):
                        for nu in T.unroll(T.int64(6)):
                            for r_a in T.unroll(T.int64(6)):
                                for r_b in T.unroll(T.int64(6)):
                                    with T.block("data_pack"):
                                        v_eps, v_nu = T.axis.remap("SS", [eps, nu])
                                        v_ci = T.axis.spatial(T.int64(128), (ci_p_fused_0 * T.int64(256) + ci_p_fused_1) // T.int64(196))
                                        v_p = T.axis.spatial(T.int64(196), (ci_p_fused_0 * T.int64(256) + ci_p_fused_1) % T.int64(196))
                                        v_r_a, v_r_b = T.axis.remap("RR", [r_a, r_b])
                                        T.reads(input_tile_local[v_ci, v_p, v_r_a, v_r_b])
                                        T.writes(data_pack_local[v_eps, v_nu, v_ci, v_p])
                                        T.block_attr({"schedule_rule": "conv2d_nchw_winograd_data_pack"})
                                        with T.init():
                                            data_pack_local[v_eps, v_nu, v_ci, v_p] = T.float32(0)
                                        data_pack_local[v_eps, v_nu, v_ci, v_p] = data_pack_local[v_eps, v_nu, v_ci, v_p] + input_tile_local[v_ci, v_p, v_r_a, v_r_b] * T.Select(v_r_a % T.int64(6) == T.int64(5) and v_eps % T.int64(6) == T.int64(5), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(5) and v_eps % T.int64(6) == T.int64(4), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(5) and v_eps % T.int64(6) == T.int64(3), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(5) and v_eps % T.int64(6) == T.int64(2), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(5) and v_eps % T.int64(6) == T.int64(1), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(5) and v_eps % T.int64(6) == T.int64(0), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(4) and v_eps % T.int64(6) == T.int64(5), T.float32(1.5), T.Select(v_r_a % T.int64(6) == T.int64(4) and v_eps % T.int64(6) == T.int64(4), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(4) and v_eps % T.int64(6) == T.int64(3), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(4) and v_eps % T.int64(6) == T.int64(2), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(4) and v_eps % T.int64(6) == T.int64(1), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(4) and v_eps % T.int64(6) == T.int64(0), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(3) and v_eps % T.int64(6) == T.int64(5), T.float32(-2), T.Select(v_r_a % T.int64(6) == T.int64(3) and v_eps % T.int64(6) == T.int64(4), T.float32(-0.5), T.Select(v_r_a % T.int64(6) == T.int64(3) and v_eps % T.int64(6) == T.int64(3), T.float32(2), T.Select(v_r_a % T.int64(6) == T.int64(3) and v_eps % T.int64(6) == T.int64(2), T.float32(2.5), T.Select(v_r_a % T.int64(6) == T.int64(3) and v_eps % T.int64(6) == T.int64(1), T.float32(0.5), T.Select(v_r_a % T.int64(6) == T.int64(3) and v_eps % T.int64(6) == T.int64(0), T.float32(1.5), T.Select(v_r_a % T.int64(6) == T.int64(2) and v_eps % T.int64(6) == T.int64(5), T.float32(-1.5), T.Select(v_r_a % T.int64(6) == T.int64(2) and v_eps % T.int64(6) == T.int64(4), T.float32(-1), T.Select(v_r_a % T.int64(6) == T.int64(2) and v_eps % T.int64(6) == T.int64(3), T.float32(-1), T.Select(v_r_a % T.int64(6) == T.int64(2) and v_eps % T.int64(6) == T.int64(2), T.float32(0.5), T.Select(v_r_a % T.int64(6) == T.int64(2) and v_eps % T.int64(6) == T.int64(1), T.float32(-2.5), T.Select(v_r_a % T.int64(6) == T.int64(2) and v_eps % T.int64(6) == T.int64(0), T.float32(-2), T.Select(v_r_a % T.int64(6) == T.int64(1) and v_eps % T.int64(6) == T.int64(5), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(1) and v_eps % T.int64(6) == T.int64(4), T.float32(0.5), T.Select(v_r_a % T.int64(6) == T.int64(1) and v_eps % T.int64(6) == T.int64(3), T.float32(-2), T.Select(v_r_a % T.int64(6) == T.int64(1) and v_eps % T.int64(6) == T.int64(2), T.float32(-1), T.Select(v_r_a % T.int64(6) == T.int64(1) and v_eps % T.int64(6) == T.int64(1), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(1) and v_eps % T.int64(6) == T.int64(0), T.float32(-1.5), T.Select(v_r_a % T.int64(6) == T.int64(0) and v_eps % T.int64(6) == T.int64(5), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(0) and v_eps % T.int64(6) == T.int64(4), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(0) and v_eps % T.int64(6) == T.int64(3), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(0) and v_eps % T.int64(6) == T.int64(2), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(0) and v_eps % T.int64(6) == T.int64(1), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(0) and v_eps % T.int64(6) == T.int64(0), T.float32(1), T.float32(0))))))))))))))))))))))))))))))))))))) * T.Select(v_r_b % T.int64(6) == T.int64(5) and v_nu % T.int64(6) == T.int64(5), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(5) and v_nu % T.int64(6) == T.int64(4), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(5) and v_nu % T.int64(6) == T.int64(3), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(5) and v_nu % T.int64(6) == T.int64(2), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(5) and v_nu % T.int64(6) == T.int64(1), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(5) and v_nu % T.int64(6) == T.int64(0), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(4) and v_nu % T.int64(6) == T.int64(5), T.float32(1.5), T.Select(v_r_b % T.int64(6) == T.int64(4) and v_nu % T.int64(6) == T.int64(4), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(4) and v_nu % T.int64(6) == T.int64(3), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(4) and v_nu % T.int64(6) == T.int64(2), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(4) and v_nu % T.int64(6) == T.int64(1), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(4) and v_nu % T.int64(6) == T.int64(0), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(3) and v_nu % T.int64(6) == T.int64(5), T.float32(-2), T.Select(v_r_b % T.int64(6) == T.int64(3) and v_nu % T.int64(6) == T.int64(4), T.float32(-0.5), T.Select(v_r_b % T.int64(6) == T.int64(3) and v_nu % T.int64(6) == T.int64(3), T.float32(2), T.Select(v_r_b % T.int64(6) == T.int64(3) and v_nu % T.int64(6) == T.int64(2), T.float32(2.5), T.Select(v_r_b % T.int64(6) == T.int64(3) and v_nu % T.int64(6) == T.int64(1), T.float32(0.5), T.Select(v_r_b % T.int64(6) == T.int64(3) and v_nu % T.int64(6) == T.int64(0), T.float32(1.5), T.Select(v_r_b % T.int64(6) == T.int64(2) and v_nu % T.int64(6) == T.int64(5), T.float32(-1.5), T.Select(v_r_b % T.int64(6) == T.int64(2) and v_nu % T.int64(6) == T.int64(4), T.float32(-1), T.Select(v_r_b % T.int64(6) == T.int64(2) and v_nu % T.int64(6) == T.int64(3), T.float32(-1), T.Select(v_r_b % T.int64(6) == T.int64(2) and v_nu % T.int64(6) == T.int64(2), T.float32(0.5), T.Select(v_r_b % T.int64(6) == T.int64(2) and v_nu % T.int64(6) == T.int64(1), T.float32(-2.5), T.Select(v_r_b % T.int64(6) == T.int64(2) and v_nu % T.int64(6) == T.int64(0), T.float32(-2), T.Select(v_r_b % T.int64(6) == T.int64(1) and v_nu % T.int64(6) == T.int64(5), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(1) and v_nu % T.int64(6) == T.int64(4), T.float32(0.5), T.Select(v_r_b % T.int64(6) == T.int64(1) and v_nu % T.int64(6) == T.int64(3), T.float32(-2), T.Select(v_r_b % T.int64(6) == T.int64(1) and v_nu % T.int64(6) == T.int64(2), T.float32(-1), T.Select(v_r_b % T.int64(6) == T.int64(1) and v_nu % T.int64(6) == T.int64(1), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(1) and v_nu % T.int64(6) == T.int64(0), T.float32(-1.5), T.Select(v_r_b % T.int64(6) == T.int64(0) and v_nu % T.int64(6) == T.int64(5), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(0) and v_nu % T.int64(6) == T.int64(4), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(0) and v_nu % T.int64(6) == T.int64(3), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(0) and v_nu % T.int64(6) == T.int64(2), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(0) and v_nu % T.int64(6) == T.int64(1), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(0) and v_nu % T.int64(6) == T.int64(0), T.float32(1), T.float32(0)))))))))))))))))))))))))))))))))))))
                    for ax0, ax1, ax2, ax3 in T.grid(T.int64(6), T.int64(6), T.int64(1), T.int64(1)):
                        with T.block("data_pack_local"):
                            v0, v1 = T.axis.remap("SS", [ax0, ax1])
                            v2 = T.axis.spatial(T.int64(128), (ci_p_fused_0 * T.int64(256) + ci_p_fused_1) // T.int64(196) + ax2)
                            v3 = T.axis.spatial(T.int64(196), (ci_p_fused_0 * T.int64(60) + ci_p_fused_1) % T.int64(196) + ax3)
                            T.reads(data_pack_local[v0, v1, v2, v3])
                            T.writes(data_pack[v0, v1, v2, v3])
                            data_pack[v0, v1, v2, v3] = data_pack_local[v0, v1, v2, v3]
            for eps_0_nu_0_co_0_p_0_fused in T.thread_binding(T.int64(64), thread="blockIdx.x"):
                for eps_1_nu_1_co_1_p_1_fused in T.thread_binding(T.int64(8), thread="vthread.x"):
                    for eps_2_nu_2_co_2_p_2_fused in T.thread_binding(T.int64(42), thread="threadIdx.x"):
                        for ci_0_fused in T.serial(T.int64(8), annotations={"software_pipeline_async_stages": [0], "software_pipeline_order": [0, 1, 2], "software_pipeline_stage": [0, 0, 3]}):
                            for ax0_ax1_ax2_ax3_fused in range(T.int64(56448)):
                                with T.block("data_pack_shared"):
                                    v0 = T.axis.spatial(T.int64(6), eps_0_nu_0_co_0_p_0_fused // T.int64(32) * T.int64(3) + ax0_ax1_ax2_ax3_fused // T.int64(18816))
                                    v1 = T.axis.spatial(T.int64(6), ax0_ax1_ax2_ax3_fused % T.int64(18816) // T.int64(3136))
                                    v2 = T.axis.spatial(T.int64(128), ci_0_fused * T.int64(16) + ax0_ax1_ax2_ax3_fused % T.int64(3136) // T.int64(196))
                                    v3 = T.axis.spatial(T.int64(196), ax0_ax1_ax2_ax3_fused % T.int64(196))
                                    T.reads(data_pack[v0, v1, v2, v3])
                                    T.writes(data_pack_shared[v0, v1, v2, v3])
                                    T.block_attr({"meta_schedule.cooperative_fetch": 4})
                                    data_pack_shared[v0, v1, v2, v3] = data_pack[v0, v1, v2, v3]
                            for ax0_ax1_ax2_ax3_fused in range(T.int64(2304)):
                                with T.block("p1_shared"):
                                    v0 = T.axis.spatial(T.int64(6), eps_0_nu_0_co_0_p_0_fused // T.int64(32) * T.int64(3) + ax0_ax1_ax2_ax3_fused // T.int64(768))
                                    v1 = T.axis.spatial(T.int64(6), ax0_ax1_ax2_ax3_fused % T.int64(768) // T.int64(128))
                                    v2 = T.axis.spatial(T.int64(128), ci_0_fused * T.int64(16) + ax0_ax1_ax2_ax3_fused % T.int64(128) // T.int64(8))
                                    v3 = T.axis.spatial(T.int64(256), eps_0_nu_0_co_0_p_0_fused % T.int64(32) * T.int64(8) + ax0_ax1_ax2_ax3_fused % T.int64(8))
                                    T.reads(p1[v0, v1, v2, v3])
                                    T.writes(p1_shared[v0, v1, v2, v3])
                                    T.block_attr({"meta_schedule.cooperative_fetch": 2})
                                    p1_shared[v0, v1, v2, v3] = p1[v0, v1, v2, v3]
                            for ci_1, eps_3, nu_3, co_3, p_3, ci_2, eps_4, nu_4, co_4, p_4 in T.grid(T.int64(2), T.int64(3), T.int64(1), T.int64(1), T.int64(14), T.int64(8), T.int64(1), T.int64(2), T.int64(1), T.int64(1)):
                                with T.block("bgemm"):
                                    v_eps = T.axis.spatial(T.int64(6), eps_0_nu_0_co_0_p_0_fused // T.int64(32) * T.int64(3) + eps_3 + eps_4)
                                    v_nu = T.axis.spatial(T.int64(6), eps_2_nu_2_co_2_p_2_fused // T.int64(14) * T.int64(2) + nu_3 * T.int64(2) + nu_4)
                                    v_co = T.axis.spatial(T.int64(256), eps_0_nu_0_co_0_p_0_fused % T.int64(32) * T.int64(8) + eps_1_nu_1_co_1_p_1_fused // T.int64(2) * T.int64(2) + eps_2_nu_2_co_2_p_2_fused % T.int64(14) // T.int64(7) + co_3 + co_4)
                                    v_p = T.axis.spatial(T.int64(196), eps_1_nu_1_co_1_p_1_fused % T.int64(2) * T.int64(98) + eps_2_nu_2_co_2_p_2_fused % T.int64(7) * T.int64(14) + p_3 + p_4)
                                    v_ci = T.axis.reduce(T.int64(128), ci_0_fused * T.int64(16) + ci_1 * T.int64(8) + ci_2)
                                    T.reads(data_pack_shared[v_eps, v_nu, v_ci, v_p], p1_shared[v_eps, v_nu, v_ci, v_co])
                                    T.writes(bgemm_local[v_eps, v_nu, v_co, v_p])
                                    T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 32, "meta_schedule.tiling_structure": "SSSRRSRS"})
                                    with T.init():
                                        bgemm_local[v_eps, v_nu, v_co, v_p] = T.float32(0)
                                    bgemm_local[v_eps, v_nu, v_co, v_p] = bgemm_local[v_eps, v_nu, v_co, v_p] + data_pack_shared[v_eps, v_nu, v_ci, v_p] * p1_shared[v_eps, v_nu, v_ci, v_co]
                        for ax0, ax1, ax2, ax3 in T.grid(T.int64(3), T.int64(2), T.int64(1), T.int64(14)):
                            with T.block("bgemm_local"):
                                v0 = T.axis.spatial(T.int64(6), eps_0_nu_0_co_0_p_0_fused // T.int64(32) * T.int64(3) + ax0)
                                v1 = T.axis.spatial(T.int64(6), eps_2_nu_2_co_2_p_2_fused // T.int64(14) * T.int64(2) + ax1)
                                v2 = T.axis.spatial(T.int64(256), eps_0_nu_0_co_0_p_0_fused % T.int64(32) * T.int64(8) + eps_1_nu_1_co_1_p_1_fused // T.int64(2) * T.int64(2) + eps_2_nu_2_co_2_p_2_fused % T.int64(14) // T.int64(7) + ax2)
                                v3 = T.axis.spatial(T.int64(196), eps_1_nu_1_co_1_p_1_fused % T.int64(2) * T.int64(98) + eps_2_nu_2_co_2_p_2_fused % T.int64(7) * T.int64(14) + ax3)
                                T.reads(bgemm_local[v0, v1, v2, v3])
                                T.writes(bgemm[v0, v1, v2, v3])
                                bgemm[v0, v1, v2, v3] = bgemm_local[v0, v1, v2, v3]
            for n_co_h_0_w_0_fused_0 in T.thread_binding(T.int64(98), thread="blockIdx.x"):
                for n_co_h_0_w_0_fused_1 in T.thread_binding(T.int64(512), thread="threadIdx.x"):
                    for ax0, ax1 in T.grid(T.int64(1), T.int64(1)):
                        for ax2 in T.unroll(T.int64(4)):
                            for ax3 in T.unroll(T.int64(4)):
                                for ax4 in T.unroll(T.int64(6)):
                                    for ax5 in T.unroll(T.int64(6)):
                                        with T.block("inverse"):
                                            v_co = T.axis.spatial(T.int64(256), (n_co_h_0_w_0_fused_0 * T.int64(512) + n_co_h_0_w_0_fused_1) // T.int64(196) + ax0)
                                            v_p = T.axis.spatial(T.int64(196), (n_co_h_0_w_0_fused_0 * T.int64(512) + n_co_h_0_w_0_fused_1) % T.int64(196) + ax1)
                                            v_vh, v_vw, v_r_a, v_r_b = T.axis.remap("SSRR", [ax2, ax3, ax4, ax5])
                                            T.reads(bgemm[v_r_a, v_r_b, v_co, v_p])
                                            T.writes(inverse_local[v_co, v_p, v_vh, v_vw])
                                            T.block_attr({"schedule_rule": "conv2d_nchw_winograd_inverse"})
                                            with T.init():
                                                inverse_local[v_co, v_p, v_vh, v_vw] = T.float32(0)
                                            inverse_local[v_co, v_p, v_vh, v_vw] = inverse_local[v_co, v_p, v_vh, v_vw] + bgemm[v_r_a, v_r_b, v_co, v_p] * T.Select(v_r_a % T.int64(6) == T.int64(5) and v_vh % T.int64(4) == T.int64(3), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(5) and v_vh % T.int64(4) == T.int64(2), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(5) and v_vh % T.int64(4) == T.int64(1), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(5) and v_vh % T.int64(4) == T.int64(0), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(4) and v_vh % T.int64(4) == T.int64(3), T.float32(-8), T.Select(v_r_a % T.int64(6) == T.int64(4) and v_vh % T.int64(4) == T.int64(2), T.float32(4), T.Select(v_r_a % T.int64(6) == T.int64(4) and v_vh % T.int64(4) == T.int64(1), T.float32(-2), T.Select(v_r_a % T.int64(6) == T.int64(4) and v_vh % T.int64(4) == T.int64(0), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(3) and v_vh % T.int64(4) == T.int64(3), T.float32(0.125), T.Select(v_r_a % T.int64(6) == T.int64(3) and v_vh % T.int64(4) == T.int64(2), T.float32(0.25), T.Select(v_r_a % T.int64(6) == T.int64(3) and v_vh % T.int64(4) == T.int64(1), T.float32(0.5), T.Select(v_r_a % T.int64(6) == T.int64(3) and v_vh % T.int64(4) == T.int64(0), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(2) and v_vh % T.int64(4) == T.int64(3), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(2) and v_vh % T.int64(4) == T.int64(2), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(2) and v_vh % T.int64(4) == T.int64(1), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(2) and v_vh % T.int64(4) == T.int64(0), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(1) and v_vh % T.int64(4) == T.int64(3), T.float32(-1), T.Select(v_r_a % T.int64(6) == T.int64(1) and v_vh % T.int64(4) == T.int64(2), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(1) and v_vh % T.int64(4) == T.int64(1), T.float32(-1), T.Select(v_r_a % T.int64(6) == T.int64(1) and v_vh % T.int64(4) == T.int64(0), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(0) and v_vh % T.int64(4) == T.int64(3), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(0) and v_vh % T.int64(4) == T.int64(2), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(0) and v_vh % T.int64(4) == T.int64(1), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(0) and v_vh % T.int64(4) == T.int64(0), T.float32(1), T.float32(0))))))))))))))))))))))))) * T.Select(v_r_b % T.int64(6) == T.int64(5) and v_vw % T.int64(4) == T.int64(3), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(5) and v_vw % T.int64(4) == T.int64(2), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(5) and v_vw % T.int64(4) == T.int64(1), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(5) and v_vw % T.int64(4) == T.int64(0), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(4) and v_vw % T.int64(4) == T.int64(3), T.float32(-8), T.Select(v_r_b % T.int64(6) == T.int64(4) and v_vw % T.int64(4) == T.int64(2), T.float32(4), T.Select(v_r_b % T.int64(6) == T.int64(4) and v_vw % T.int64(4) == T.int64(1), T.float32(-2), T.Select(v_r_b % T.int64(6) == T.int64(4) and v_vw % T.int64(4) == T.int64(0), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(3) and v_vw % T.int64(4) == T.int64(3), T.float32(0.125), T.Select(v_r_b % T.int64(6) == T.int64(3) and v_vw % T.int64(4) == T.int64(2), T.float32(0.25), T.Select(v_r_b % T.int64(6) == T.int64(3) and v_vw % T.int64(4) == T.int64(1), T.float32(0.5), T.Select(v_r_b % T.int64(6) == T.int64(3) and v_vw % T.int64(4) == T.int64(0), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(2) and v_vw % T.int64(4) == T.int64(3), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(2) and v_vw % T.int64(4) == T.int64(2), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(2) and v_vw % T.int64(4) == T.int64(1), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(2) and v_vw % T.int64(4) == T.int64(0), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(1) and v_vw % T.int64(4) == T.int64(3), T.float32(-1), T.Select(v_r_b % T.int64(6) == T.int64(1) and v_vw % T.int64(4) == T.int64(2), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(1) and v_vw % T.int64(4) == T.int64(1), T.float32(-1), T.Select(v_r_b % T.int64(6) == T.int64(1) and v_vw % T.int64(4) == T.int64(0), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(0) and v_vw % T.int64(4) == T.int64(3), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(0) and v_vw % T.int64(4) == T.int64(2), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(0) and v_vw % T.int64(4) == T.int64(1), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(0) and v_vw % T.int64(4) == T.int64(0), T.float32(1), T.float32(0)))))))))))))))))))))))))
                    for h_1, w_1 in T.grid(T.int64(4), T.int64(4)):
                        with T.block("conv2d_winograd"):
                            v_n = T.axis.spatial(T.int64(1), T.int64(0))
                            v_co = T.axis.spatial(T.int64(256), (n_co_h_0_w_0_fused_0 * T.int64(512) + n_co_h_0_w_0_fused_1) // T.int64(196))
                            v_h = T.axis.spatial(T.int64(56), (n_co_h_0_w_0_fused_0 * T.int64(512) + n_co_h_0_w_0_fused_1) % T.int64(196) // T.int64(14) * T.int64(4) + h_1)
                            v_w = T.axis.spatial(T.int64(56), (n_co_h_0_w_0_fused_0 * T.int64(512) + n_co_h_0_w_0_fused_1) % T.int64(14) * T.int64(4) + w_1)
                            T.reads(inverse_local[v_co, v_n * T.int64(196) + v_h // T.int64(4) * T.int64(14) + v_w // T.int64(4), v_h % T.int64(4), v_w % T.int64(4)], p2[v_n, v_co, T.int64(0), T.int64(0)])
                            T.writes(T_relu[v_n, v_co, v_h, v_w])
                            T_relu[v_n, v_co, v_h, v_w] = T.max(inverse_local[v_co, v_n * T.int64(196) + v_h // T.int64(4) * T.int64(14) + v_w // T.int64(4), v_h % T.int64(4), v_w % T.int64(4)] + p2[v_n, v_co, T.int64(0), T.int64(0)], T.float32(0))
b0 = sch.get_block(name="data_pack", func_name="main")
b1 = sch.get_block(name="bgemm", func_name="main")
b2 = sch.get_block(name="inverse", func_name="main")
b3 = sch.get_block(name="conv2d_winograd", func_name="main")
b4 = sch.get_block(name="T_add", func_name="main")
b5 = sch.get_block(name="T_relu", func_name="main")
b6 = sch.get_block(name="root", func_name="main")
b7, b8 = sch.get_producers(block=b2)
sch.compute_inline(block=b8)
b9, = sch.get_consumers(block=b2)
l10, l11, l12, l13 = sch.get_loops(block=b9)
l14, l15 = sch.split(loop=l12, factors=[None, 4], preserve_unit_iters=True)
l16, l17 = sch.split(loop=l13, factors=[None, 4], preserve_unit_iters=True)
sch.reorder(l14, l16, l15, l17)
sch.compute_at(block=b2, loop=l16, preserve_unit_loops=True, index=-1)
sch.set_scope(block=b2, buffer_index=0, storage_scope="local")
l18, l19, l20, l21, l22, l23, l24, l25, l26, l27 = sch.get_loops(block=b2)
sch.unroll(loop=l24)
sch.unroll(loop=l25)
sch.unroll(loop=l26)
sch.unroll(loop=l27)
b28, b29 = sch.get_producers(block=b0)
sch.compute_inline(block=b29)
b30, = sch.get_producers(block=b28)
l31, l32, l33, l34, l35, l36 = sch.get_loops(block=b0)
sch.reorder(l33, l34, l31, l32, l35, l36)
sch.unroll(loop=l31)
sch.unroll(loop=l32)
sch.unroll(loop=l35)
sch.unroll(loop=l36)
l37 = sch.fuse(l33, l34, preserve_unit_iters=True)
v38 = sch.sample_categorical(candidates=[32, 64, 128, 256, 512, 1024], probs=[0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666], decision=3)
l39, l40 = sch.split(loop=l37, factors=[None, v38], preserve_unit_iters=True)
sch.bind(loop=l39, thread_axis="blockIdx.x")
sch.bind(loop=l40, thread_axis="threadIdx.x")
b41 = sch.cache_write(block=b0, write_buffer_index=0, storage_scope="local")
sch.reverse_compute_at(block=b41, loop=l40, preserve_unit_loops=True, index=-1)
sch.compute_at(block=b28, loop=l40, preserve_unit_loops=True, index=-1)
sch.set_scope(block=b28, buffer_index=0, storage_scope="local")
sch.compute_inline(block=b30)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSSRRSRS")
l42, l43, l44, l45, l46 = sch.get_loops(block=b1)
v47, v48, v49, v50, v51 = sch.sample_perfect_tile(loop=l42, n=5, max_innermost_factor=64, decision=[2, 1, 1, 3, 1])
l52, l53, l54, l55, l56 = sch.split(loop=l42, factors=[v47, v48, v49, v50, v51], preserve_unit_iters=True)
v57, v58, v59, v60, v61 = sch.sample_perfect_tile(loop=l43, n=5, max_innermost_factor=64, decision=[1, 1, 3, 1, 2])
l62, l63, l64, l65, l66 = sch.split(loop=l43, factors=[v57, v58, v59, v60, v61], preserve_unit_iters=True)
v67, v68, v69, v70, v71 = sch.sample_perfect_tile(loop=l44, n=5, max_innermost_factor=64, decision=[32, 4, 2, 1, 1])
l72, l73, l74, l75, l76 = sch.split(loop=l44, factors=[v67, v68, v69, v70, v71], preserve_unit_iters=True)
v77, v78, v79, v80, v81 = sch.sample_perfect_tile(loop=l45, n=5, max_innermost_factor=64, decision=[1, 2, 7, 14, 1])
l82, l83, l84, l85, l86 = sch.split(loop=l45, factors=[v77, v78, v79, v80, v81], preserve_unit_iters=True)
v87, v88, v89 = sch.sample_perfect_tile(loop=l46, n=3, max_innermost_factor=64, decision=[8, 2, 8])
l90, l91, l92 = sch.split(loop=l46, factors=[v87, v88, v89], preserve_unit_iters=True)
sch.reorder(l52, l62, l72, l82, l53, l63, l73, l83, l54, l64, l74, l84, l90, l91, l55, l65, l75, l85, l92, l56, l66, l76, l86)
l93 = sch.fuse(l52, l62, l72, l82, preserve_unit_iters=True)
sch.bind(loop=l93, thread_axis="blockIdx.x")
l94 = sch.fuse(l53, l63, l73, l83, preserve_unit_iters=True)
sch.bind(loop=l94, thread_axis="vthread.x")
l95 = sch.fuse(l54, l64, l74, l84, preserve_unit_iters=True)
sch.bind(loop=l95, thread_axis="threadIdx.x")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_low_inclusive", ann_val=32)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_high_inclusive", ann_val=1024)
b96 = sch.cache_write(block=b1, write_buffer_index=0, storage_scope="local")
sch.reverse_compute_at(block=b96, loop=l95, preserve_unit_loops=True, index=-1)
b97 = sch.cache_read(block=b1, read_buffer_index=0, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b97, loop=l90, preserve_unit_loops=True, index=-1)
l98, l99, l100, l101, l102, l103, l104, l105 = sch.get_loops(block=b97)
l106 = sch.fuse(l102, l103, l104, l105, preserve_unit_iters=True)
v107 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b97, ann_key="meta_schedule.cooperative_fetch", ann_val=v107)
b108 = sch.cache_read(block=b1, read_buffer_index=1, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b108, loop=l90, preserve_unit_loops=True, index=-1)
l109, l110, l111, l112, l113, l114, l115, l116 = sch.get_loops(block=b108)
l117 = sch.fuse(l113, l114, l115, l116, preserve_unit_iters=True)
v118 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=1)
sch.annotate(block_or_loop=b108, ann_key="meta_schedule.cooperative_fetch", ann_val=v118)
l119 = sch.fuse(l90, preserve_unit_iters=True)
sch.annotate(block_or_loop=l119, ann_key="software_pipeline_stage", ann_val=[0, 0, 3])
sch.annotate(block_or_loop=l119, ann_key="software_pipeline_order", ann_val=[0, 1, 2])
sch.annotate(block_or_loop=l119, ann_key="software_pipeline_async_stages", ann_val=[0])
sch.reverse_compute_inline(block=b5)
sch.reverse_compute_inline(block=b4)
v120 = sch.sample_categorical(candidates=[0, 16, 64, 512, 1024], probs=[0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001], decision=2)
sch.annotate(block_or_loop=b6, ann_key="meta_schedule.unroll_explicit", ann_val=v120)
l121, l122, l123, l124, l125, l126 = sch.get_loops(block=b3)
l127 = sch.fuse(l121, l122, l123, l124, preserve_unit_iters=True)
v128 = sch.sample_categorical(candidates=[32, 64, 128, 256, 512, 1024], probs=[0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666], decision=4)
l129, l130 = sch.split(loop=l127, factors=[None, v128], preserve_unit_iters=True)
sch.bind(loop=l129, thread_axis="blockIdx.x")
sch.bind(loop=l130, thread_axis="threadIdx.x")
2024-04-29 17:19:15 [INFO] [evolutionary_search.cc:713] Generating candidates......
2024-04-29 17:19:15 [INFO] [evolutionary_search.cc:715] Picked top 0 candidate(s) from database
2024-04-29 17:19:23 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x74b5608)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0xb541318)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0xb52be28)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x4d66e18)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x51036c8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0xb4c2bb8)]: 502 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0xb549488)]: 0 failure(s)
2024-04-29 17:19:32 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x74b5608)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0xb541318)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0xb52be28)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x4d66e18)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x51036c8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0xb4c2bb8)]: 1002 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0xb549488)]: 0 failure(s)
2024-04-29 17:19:41 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x74b5608)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0xb541318)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0xb52be28)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x4d66e18)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x51036c8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0xb4c2bb8)]: 1506 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0xb549488)]: 0 failure(s)
2024-04-29 17:19:49 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x74b5608)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0xb541318)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0xb52be28)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x4d66e18)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x51036c8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0xb4c2bb8)]: 2010 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0xb549488)]: 0 failure(s)
2024-04-29 17:19:58 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x74b5608)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0xb541318)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0xb52be28)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x4d66e18)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x51036c8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0xb4c2bb8)]: 2512 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0xb549488)]: 0 failure(s)
2024-04-29 17:20:06 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x74b5608)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0xb541318)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0xb52be28)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x4d66e18)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x51036c8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0xb4c2bb8)]: 3018 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0xb549488)]: 0 failure(s)
2024-04-29 17:20:06 [INFO] [evolutionary_search.cc:723] Sampled 54 candidate(s)
2024-04-29 17:20:25 [INFO] [evolutionary_search.cc:621] Evolve iter #0 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x74b5608)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0xb541318)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0xb52be28)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x4d66e18)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x51036c8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0xb4c2bb8)]: 105 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0xb549488)]: 0 failure(s)
2024-04-29 17:20:44 [INFO] [evolutionary_search.cc:621] Evolve iter #1 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x74b5608)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0xb541318)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0xb52be28)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x4d66e18)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x51036c8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0xb4c2bb8)]: 115 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0xb549488)]: 0 failure(s)
2024-04-29 17:21:03 [INFO] [evolutionary_search.cc:621] Evolve iter #2 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x74b5608)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0xb541318)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0xb52be28)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x4d66e18)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x51036c8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0xb4c2bb8)]: 131 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0xb549488)]: 0 failure(s)
2024-04-29 17:21:22 [INFO] [evolutionary_search.cc:621] Evolve iter #3 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x74b5608)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0xb541318)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0xb52be28)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x4d66e18)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x51036c8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0xb4c2bb8)]: 107 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0xb549488)]: 0 failure(s)
2024-04-29 17:21:23 [INFO] [evolutionary_search.cc:649] Scores of the best 64 candidates:
[1 : 16]:	0.9973  0.9970  0.9968  0.9965  0.9962  0.9952  0.9949  0.9941  0.9937  0.9917  0.9916  0.9914  0.9909  0.9904  0.9892  0.9883
[17 : 32]:	0.9882  0.9882  0.9877  0.9860  0.9860  0.9842  0.9839  0.9822  0.9812  0.9810  0.9807  0.9792  0.9789  0.9780  0.9779  0.9778
[33 : 48]:	0.9771  0.9770  0.9770  0.9764  0.9746  0.9733  0.9732  0.9729  0.9728  0.9727  0.9723  0.9720  0.9705  0.9702  0.9699  0.9697
[49 : 64]:	0.9692  0.9687  0.9683  0.9681  0.9675  0.9665  0.9663  0.9652  0.9652  0.9651  0.9648  0.9634  0.9624  0.9624  0.9620  0.9611
2024-04-29 17:21:23 [INFO] [evolutionary_search.cc:727] Got 64 candidate(s) with evolutionary search
2024-04-29 17:21:23 [INFO] [evolutionary_search.cc:730] Sending 64 candidates(s) for measurement
2024-04-29 17:45:04 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_4] Trial #1: GFLOPs: 67.4777. Time: 9607.2321 us. Best GFLOPs: 67.4777
2024-04-29 17:45:04 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_4] Trial #2: GFLOPs: 3684.9392. Time: 175.9253 us. Best GFLOPs: 3684.9392
2024-04-29 17:45:04 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_4] Trial #3: GFLOPs: 64.8224. Time: 10000.7677 us. Best GFLOPs: 3684.9392
2024-04-29 17:45:04 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_4] Trial #4: GFLOPs: 134.4540. Time: 4821.5285 us. Best GFLOPs: 3684.9392
2024-04-29 17:45:04 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_4] Trial #5: GFLOPs: 405.2144. Time: 1599.8293 us. Best GFLOPs: 3684.9392
2024-04-29 17:45:04 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_4] Trial #6: GFLOPs: 684.5504. Time: 947.0068 us. Best GFLOPs: 3684.9392
2024-04-29 17:45:04 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_4] Trial #7: GFLOPs: 102.9440. Time: 6297.3442 us. Best GFLOPs: 3684.9392
2024-04-29 17:45:04 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_4] Trial #8: GFLOPs: 45.3445. Time: 14296.6493 us. Best GFLOPs: 3684.9392
2024-04-29 17:45:04 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_4] Trial #9: GFLOPs: 360.2126. Time: 1799.6983 us. Best GFLOPs: 3684.9392
2024-04-29 17:45:04 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_4] Trial #10: GFLOPs: 460.1108. Time: 1408.9519 us. Best GFLOPs: 3684.9392
2024-04-29 17:45:04 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_4] Trial #11: GFLOPs: 2957.8438. Time: 219.1711 us. Best GFLOPs: 3684.9392
2024-04-29 17:45:04 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_4] Trial #12: GFLOPs: 149.6112. Time: 4333.0561 us. Best GFLOPs: 3684.9392
2024-04-29 17:45:04 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_4] Trial #13: GFLOPs: 58.1958. Time: 11139.5271 us. Best GFLOPs: 3684.9392
2024-04-29 17:45:04 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_4] Trial #14: GFLOPs: 423.4306. Time: 1531.0041 us. Best GFLOPs: 3684.9392
2024-04-29 17:45:04 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_4] Trial #15: GFLOPs: 67.5757. Time: 9593.2977 us. Best GFLOPs: 3684.9392
2024-04-29 17:45:04 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_4] Trial #16: GFLOPs: 53.1424. Time: 12198.7982 us. Best GFLOPs: 3684.9392
2024-04-29 17:45:04 [INFO] [task_scheduler.cc:121] [Task #6: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_4] Trial #17: Error in building:
LocalBuilder: Timeout, killed after 30.0 seconds
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(128), T.int64(56), T.int64(56)), "float32"), p1: T.Buffer((T.int64(6), T.int64(6), T.int64(128), T.int64(256)), "float32"), p2: T.Buffer((T.int64(1), T.int64(256), T.int64(1), T.int64(1)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(256), T.int64(56), T.int64(56)), "float32")):
        T.func_attr({"layout_free_buffers": [1], "tir.noalias": T.bool(True)})
        # with T.block("root"):
        input_tile_local = T.alloc_buffer((T.int64(128), T.int64(196), T.int64(6), T.int64(6)), scope="local")
        data_pack = T.alloc_buffer((T.int64(6), T.int64(6), T.int64(128), T.int64(196)))
        bgemm = T.alloc_buffer((T.int64(6), T.int64(6), T.int64(256), T.int64(196)))
        inverse_local = T.alloc_buffer((T.int64(256), T.int64(196), T.int64(4), T.int64(4)), scope="local")
        data_pack_local = T.alloc_buffer((T.int64(6), T.int64(6), T.int64(128), T.int64(196)), scope="local")
        bgemm_local = T.alloc_buffer((T.int64(6), T.int64(6), T.int64(256), T.int64(196)), scope="local")
        data_pack_shared = T.alloc_buffer((T.int64(6), T.int64(6), T.int64(128), T.int64(196)), scope="shared")
        p1_shared = T.alloc_buffer((T.int64(6), T.int64(6), T.int64(128), T.int64(256)), scope="shared")
        for ci_p_fused_0 in T.thread_binding(T.int64(25), thread="blockIdx.x", annotations={"pragma_auto_unroll_max_step": 1024, "pragma_unroll_explicit": 1}):
            for ci_p_fused_1 in T.thread_binding(T.int64(1024), thread="threadIdx.x"):
                for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(1), T.int64(6), T.int64(6)):
                    with T.block("input_tile"):
                        v_ci = T.axis.spatial(T.int64(128), (ci_p_fused_0 * T.int64(1024) + ci_p_fused_1) // T.int64(196) + ax0)
                        v_p = T.axis.spatial(T.int64(196), (ci_p_fused_0 * T.int64(44) + ci_p_fused_1) % T.int64(196) + ax1)
                        v_eps, v_nu = T.axis.remap("SS", [ax2, ax3])
                        T.where(ci_p_fused_0 * T.int64(1024) + ci_p_fused_1 < T.int64(25088))
                        T.reads(p0[v_p // T.int64(196), v_ci, v_p % T.int64(196) // T.int64(14) * T.int64(4) + v_eps - T.int64(1), v_p % T.int64(14) * T.int64(4) + v_nu - T.int64(1)])
                        T.writes(input_tile_local[v_ci, v_p, v_eps, v_nu])
                        T.block_attr({"schedule_rule": "None"})
                        input_tile_local[v_ci, v_p, v_eps, v_nu] = T.if_then_else(T.int64(1) <= v_p % T.int64(196) // T.int64(14) * T.int64(4) + v_eps and v_p % T.int64(196) // T.int64(14) * T.int64(4) + v_eps < T.int64(57) and T.int64(1) <= v_p % T.int64(14) * T.int64(4) + v_nu and v_p % T.int64(14) * T.int64(4) + v_nu < T.int64(57), p0[v_p // T.int64(196), v_ci, v_p % T.int64(196) // T.int64(14) * T.int64(4) + v_eps - T.int64(1), v_p % T.int64(14) * T.int64(4) + v_nu - T.int64(1)], T.float32(0))
                for eps in T.unroll(T.int64(6)):
                    for nu in T.unroll(T.int64(6)):
                        with T.block("data_pack_init"):
                            v_eps, v_nu = T.axis.remap("SS", [eps, nu])
                            v_ci = T.axis.spatial(T.int64(128), (ci_p_fused_0 * T.int64(1024) + ci_p_fused_1) // T.int64(196))
                            v_p = T.axis.spatial(T.int64(196), (ci_p_fused_0 * T.int64(1024) + ci_p_fused_1) % T.int64(196))
                            T.where(ci_p_fused_0 * T.int64(1024) + ci_p_fused_1 < T.int64(25088))
                            T.reads()
                            T.writes(data_pack_local[v_eps, v_nu, v_ci, v_p])
                            T.block_attr({"schedule_rule": "conv2d_nchw_winograd_data_pack"})
                            data_pack_local[v_eps, v_nu, v_ci, v_p] = T.float32(0)
                        for r_a in T.unroll(T.int64(6)):
                            for r_b in T.unroll(T.int64(6)):
                                with T.block("data_pack_update"):
                                    v_eps, v_nu = T.axis.remap("SS", [eps, nu])
                                    v_ci = T.axis.spatial(T.int64(128), (ci_p_fused_0 * T.int64(1024) + ci_p_fused_1) // T.int64(196))
                                    v_p = T.axis.spatial(T.int64(196), (ci_p_fused_0 * T.int64(1024) + ci_p_fused_1) % T.int64(196))
                                    v_r_a, v_r_b = T.axis.remap("RR", [r_a, r_b])
                                    T.where(ci_p_fused_0 * T.int64(1024) + ci_p_fused_1 < T.int64(25088))
                                    T.reads(data_pack_local[v_eps, v_nu, v_ci, v_p], input_tile_local[v_ci, v_p, v_r_a, v_r_b])
                                    T.writes(data_pack_local[v_eps, v_nu, v_ci, v_p])
                                    T.block_attr({"schedule_rule": "conv2d_nchw_winograd_data_pack"})
                                    data_pack_local[v_eps, v_nu, v_ci, v_p] = data_pack_local[v_eps, v_nu, v_ci, v_p] + input_tile_local[v_ci, v_p, v_r_a, v_r_b] * T.Select(v_r_a % T.int64(6) == T.int64(5) and v_eps % T.int64(6) == T.int64(5), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(5) and v_eps % T.int64(6) == T.int64(4), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(5) and v_eps % T.int64(6) == T.int64(3), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(5) and v_eps % T.int64(6) == T.int64(2), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(5) and v_eps % T.int64(6) == T.int64(1), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(5) and v_eps % T.int64(6) == T.int64(0), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(4) and v_eps % T.int64(6) == T.int64(5), T.float32(1.5), T.Select(v_r_a % T.int64(6) == T.int64(4) and v_eps % T.int64(6) == T.int64(4), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(4) and v_eps % T.int64(6) == T.int64(3), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(4) and v_eps % T.int64(6) == T.int64(2), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(4) and v_eps % T.int64(6) == T.int64(1), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(4) and v_eps % T.int64(6) == T.int64(0), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(3) and v_eps % T.int64(6) == T.int64(5), T.float32(-2), T.Select(v_r_a % T.int64(6) == T.int64(3) and v_eps % T.int64(6) == T.int64(4), T.float32(-0.5), T.Select(v_r_a % T.int64(6) == T.int64(3) and v_eps % T.int64(6) == T.int64(3), T.float32(2), T.Select(v_r_a % T.int64(6) == T.int64(3) and v_eps % T.int64(6) == T.int64(2), T.float32(2.5), T.Select(v_r_a % T.int64(6) == T.int64(3) and v_eps % T.int64(6) == T.int64(1), T.float32(0.5), T.Select(v_r_a % T.int64(6) == T.int64(3) and v_eps % T.int64(6) == T.int64(0), T.float32(1.5), T.Select(v_r_a % T.int64(6) == T.int64(2) and v_eps % T.int64(6) == T.int64(5), T.float32(-1.5), T.Select(v_r_a % T.int64(6) == T.int64(2) and v_eps % T.int64(6) == T.int64(4), T.float32(-1), T.Select(v_r_a % T.int64(6) == T.int64(2) and v_eps % T.int64(6) == T.int64(3), T.float32(-1), T.Select(v_r_a % T.int64(6) == T.int64(2) and v_eps % T.int64(6) == T.int64(2), T.float32(0.5), T.Select(v_r_a % T.int64(6) == T.int64(2) and v_eps % T.int64(6) == T.int64(1), T.float32(-2.5), T.Select(v_r_a % T.int64(6) == T.int64(2) and v_eps % T.int64(6) == T.int64(0), T.float32(-2), T.Select(v_r_a % T.int64(6) == T.int64(1) and v_eps % T.int64(6) == T.int64(5), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(1) and v_eps % T.int64(6) == T.int64(4), T.float32(0.5), T.Select(v_r_a % T.int64(6) == T.int64(1) and v_eps % T.int64(6) == T.int64(3), T.float32(-2), T.Select(v_r_a % T.int64(6) == T.int64(1) and v_eps % T.int64(6) == T.int64(2), T.float32(-1), T.Select(v_r_a % T.int64(6) == T.int64(1) and v_eps % T.int64(6) == T.int64(1), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(1) and v_eps % T.int64(6) == T.int64(0), T.float32(-1.5), T.Select(v_r_a % T.int64(6) == T.int64(0) and v_eps % T.int64(6) == T.int64(5), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(0) and v_eps % T.int64(6) == T.int64(4), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(0) and v_eps % T.int64(6) == T.int64(3), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(0) and v_eps % T.int64(6) == T.int64(2), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(0) and v_eps % T.int64(6) == T.int64(1), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(0) and v_eps % T.int64(6) == T.int64(0), T.float32(1), T.float32(0))))))))))))))))))))))))))))))))))))) * T.Select(v_r_b % T.int64(6) == T.int64(5) and v_nu % T.int64(6) == T.int64(5), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(5) and v_nu % T.int64(6) == T.int64(4), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(5) and v_nu % T.int64(6) == T.int64(3), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(5) and v_nu % T.int64(6) == T.int64(2), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(5) and v_nu % T.int64(6) == T.int64(1), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(5) and v_nu % T.int64(6) == T.int64(0), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(4) and v_nu % T.int64(6) == T.int64(5), T.float32(1.5), T.Select(v_r_b % T.int64(6) == T.int64(4) and v_nu % T.int64(6) == T.int64(4), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(4) and v_nu % T.int64(6) == T.int64(3), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(4) and v_nu % T.int64(6) == T.int64(2), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(4) and v_nu % T.int64(6) == T.int64(1), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(4) and v_nu % T.int64(6) == T.int64(0), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(3) and v_nu % T.int64(6) == T.int64(5), T.float32(-2), T.Select(v_r_b % T.int64(6) == T.int64(3) and v_nu % T.int64(6) == T.int64(4), T.float32(-0.5), T.Select(v_r_b % T.int64(6) == T.int64(3) and v_nu % T.int64(6) == T.int64(3), T.float32(2), T.Select(v_r_b % T.int64(6) == T.int64(3) and v_nu % T.int64(6) == T.int64(2), T.float32(2.5), T.Select(v_r_b % T.int64(6) == T.int64(3) and v_nu % T.int64(6) == T.int64(1), T.float32(0.5), T.Select(v_r_b % T.int64(6) == T.int64(3) and v_nu % T.int64(6) == T.int64(0), T.float32(1.5), T.Select(v_r_b % T.int64(6) == T.int64(2) and v_nu % T.int64(6) == T.int64(5), T.float32(-1.5), T.Select(v_r_b % T.int64(6) == T.int64(2) and v_nu % T.int64(6) == T.int64(4), T.float32(-1), T.Select(v_r_b % T.int64(6) == T.int64(2) and v_nu % T.int64(6) == T.int64(3), T.float32(-1), T.Select(v_r_b % T.int64(6) == T.int64(2) and v_nu % T.int64(6) == T.int64(2), T.float32(0.5), T.Select(v_r_b % T.int64(6) == T.int64(2) and v_nu % T.int64(6) == T.int64(1), T.float32(-2.5), T.Select(v_r_b % T.int64(6) == T.int64(2) and v_nu % T.int64(6) == T.int64(0), T.float32(-2), T.Select(v_r_b % T.int64(6) == T.int64(1) and v_nu % T.int64(6) == T.int64(5), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(1) and v_nu % T.int64(6) == T.int64(4), T.float32(0.5), T.Select(v_r_b % T.int64(6) == T.int64(1) and v_nu % T.int64(6) == T.int64(3), T.float32(-2), T.Select(v_r_b % T.int64(6) == T.int64(1) and v_nu % T.int64(6) == T.int64(2), T.float32(-1), T.Select(v_r_b % T.int64(6) == T.int64(1) and v_nu % T.int64(6) == T.int64(1), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(1) and v_nu % T.int64(6) == T.int64(0), T.float32(-1.5), T.Select(v_r_b % T.int64(6) == T.int64(0) and v_nu % T.int64(6) == T.int64(5), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(0) and v_nu % T.int64(6) == T.int64(4), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(0) and v_nu % T.int64(6) == T.int64(3), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(0) and v_nu % T.int64(6) == T.int64(2), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(0) and v_nu % T.int64(6) == T.int64(1), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(0) and v_nu % T.int64(6) == T.int64(0), T.float32(1), T.float32(0)))))))))))))))))))))))))))))))))))))
                for ax0, ax1, ax2, ax3 in T.grid(T.int64(6), T.int64(6), T.int64(1), T.int64(1)):
                    with T.block("data_pack_local"):
                        v0, v1 = T.axis.remap("SS", [ax0, ax1])
                        v2 = T.axis.spatial(T.int64(128), (ci_p_fused_0 * T.int64(1024) + ci_p_fused_1) // T.int64(196) + ax2)
                        v3 = T.axis.spatial(T.int64(196), (ci_p_fused_0 * T.int64(44) + ci_p_fused_1) % T.int64(196) + ax3)
                        T.where(ci_p_fused_0 * T.int64(1024) + ci_p_fused_1 < T.int64(25088))
                        T.reads(data_pack_local[v0, v1, v2, v3])
                        T.writes(data_pack[v0, v1, v2, v3])
                        data_pack[v0, v1, v2, v3] = data_pack_local[v0, v1, v2, v3]
        for eps_0_nu_0_co_0_p_0_fused in T.thread_binding(T.int64(24), thread="blockIdx.x", annotations={"pragma_auto_unroll_max_step": 1024, "pragma_unroll_explicit": 1}):
            for eps_1_nu_1_co_1_p_1_fused in T.thread_binding(T.int64(112), thread="vthread.x"):
                for eps_2_nu_2_co_2_p_2_fused in T.thread_binding(T.int64(56), thread="threadIdx.x"):
                    for eps_3_init, nu_3_init, co_3_init, p_3_init, eps_4_init, nu_4_init, co_4_init, p_4_init in T.grid(T.int64(3), T.int64(1), T.int64(2), T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(1)):
                        with T.block("bgemm_init"):
                            v_eps = T.axis.spatial(T.int64(6), eps_0_nu_0_co_0_p_0_fused // T.int64(12) * T.int64(3) + eps_3_init + eps_4_init)
                            v_nu = T.axis.spatial(T.int64(6), eps_0_nu_0_co_0_p_0_fused % T.int64(12) // T.int64(2) + nu_3_init + nu_4_init)
                            v_co = T.axis.spatial(T.int64(256), eps_1_nu_1_co_1_p_1_fused // T.int64(7) * T.int64(16) + eps_2_nu_2_co_2_p_2_fused // T.int64(14) * T.int64(4) + co_3_init * T.int64(2) + co_4_init)
                            v_p = T.axis.spatial(T.int64(196), eps_0_nu_0_co_0_p_0_fused % T.int64(2) * T.int64(98) + eps_1_nu_1_co_1_p_1_fused % T.int64(7) * T.int64(14) + eps_2_nu_2_co_2_p_2_fused % T.int64(14) + p_3_init + p_4_init)
                            T.reads()
                            T.writes(bgemm_local[v_eps, v_nu, v_co, v_p])
                            T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 32, "meta_schedule.tiling_structure": "SSSRRSRS"})
                            bgemm_local[v_eps, v_nu, v_co, v_p] = T.float32(0)
                    for ci_0_fused in T.serial(T.int64(128), annotations={"software_pipeline_async_stages": [0], "software_pipeline_order": [0, 1, 2], "software_pipeline_stage": [0, 0, 2]}):
                        for ax0_ax1_ax2_ax3_fused_0 in range(T.int64(6)):
                            for ax0_ax1_ax2_ax3_fused_1 in T.thread_binding(T.int64(56), thread="threadIdx.x"):
                                with T.block("data_pack_shared"):
                                    v0 = T.axis.spatial(T.int64(6), eps_0_nu_0_co_0_p_0_fused // T.int64(12) * T.int64(3) + (ax0_ax1_ax2_ax3_fused_0 * T.int64(56) + ax0_ax1_ax2_ax3_fused_1) // T.int64(98))
                                    v1 = T.axis.spatial(T.int64(6), eps_0_nu_0_co_0_p_0_fused % T.int64(12) // T.int64(2))
                                    v2 = T.axis.spatial(T.int64(128), ci_0_fused)
                                    v3 = T.axis.spatial(T.int64(196), eps_0_nu_0_co_0_p_0_fused % T.int64(2) * T.int64(98) + (ax0_ax1_ax2_ax3_fused_0 * T.int64(56) + ax0_ax1_ax2_ax3_fused_1) % T.int64(98))
                                    T.where(ax0_ax1_ax2_ax3_fused_0 * T.int64(56) + ax0_ax1_ax2_ax3_fused_1 < T.int64(294))
                                    T.reads(data_pack[v0, v1, v2, v3])
                                    T.writes(data_pack_shared[v0, v1, v2, v3])
                                    data_pack_shared[v0, v1, v2, v3] = data_pack[v0, v1, v2, v3]
                        for ax0_ax1_ax2_ax3_fused_0 in range(T.int64(5)):
                            for ax0_ax1_ax2_ax3_fused_1 in T.thread_binding(T.int64(56), thread="threadIdx.x"):
                                for ax0_ax1_ax2_ax3_fused_2 in T.vectorized(T.int64(3)):
                                    with T.block("p1_shared"):
                                        v0 = T.axis.spatial(T.int64(6), eps_0_nu_0_co_0_p_0_fused // T.int64(12) * T.int64(3) + (ax0_ax1_ax2_ax3_fused_0 * T.int64(168) + ax0_ax1_ax2_ax3_fused_1 * T.int64(3) + ax0_ax1_ax2_ax3_fused_2) // T.int64(256))
                                        v1 = T.axis.spatial(T.int64(6), eps_0_nu_0_co_0_p_0_fused % T.int64(12) // T.int64(2))
                                        v2 = T.axis.spatial(T.int64(128), ci_0_fused)
                                        v3 = T.axis.spatial(T.int64(256), (ax0_ax1_ax2_ax3_fused_0 * T.int64(168) + ax0_ax1_ax2_ax3_fused_1 * T.int64(3) + ax0_ax1_ax2_ax3_fused_2) % T.int64(256))
                                        T.where((ax0_ax1_ax2_ax3_fused_0 * T.int64(56) + ax0_ax1_ax2_ax3_fused_1) * T.int64(3) + ax0_ax1_ax2_ax3_fused_2 < T.int64(768))
                                        T.reads(p1[v0, v1, v2, v3])
                                        T.writes(p1_shared[v0, v1, v2, v3])
                                        p1_shared[v0, v1, v2, v3] = p1[v0, v1, v2, v3]
                        for ci_1, eps_3, nu_3, co_3, p_3, ci_2, eps_4, nu_4, co_4, p_4 in T.grid(T.int64(1), T.int64(3), T.int64(1), T.int64(2), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(1)):
                            with T.block("bgemm_update"):
                                v_eps = T.axis.spatial(T.int64(6), eps_0_nu_0_co_0_p_0_fused // T.int64(12) * T.int64(3) + eps_3 + eps_4)
                                v_nu = T.axis.spatial(T.int64(6), eps_0_nu_0_co_0_p_0_fused % T.int64(12) // T.int64(2) + nu_3 + nu_4)
                                v_co = T.axis.spatial(T.int64(256), eps_1_nu_1_co_1_p_1_fused // T.int64(7) * T.int64(16) + eps_2_nu_2_co_2_p_2_fused // T.int64(14) * T.int64(4) + co_3 * T.int64(2) + co_4)
                                v_p = T.axis.spatial(T.int64(196), eps_0_nu_0_co_0_p_0_fused % T.int64(2) * T.int64(98) + eps_1_nu_1_co_1_p_1_fused % T.int64(7) * T.int64(14) + eps_2_nu_2_co_2_p_2_fused % T.int64(14) + p_3 + p_4)
                                v_ci = T.axis.reduce(T.int64(128), ci_0_fused + ci_1 + ci_2)
                                T.reads(bgemm_local[v_eps, v_nu, v_co, v_p], data_pack_shared[v_eps, v_nu, v_ci, v_p], p1_shared[v_eps, v_nu, v_ci, v_co])
                                T.writes(bgemm_local[v_eps, v_nu, v_co, v_p])
                                T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 32, "meta_schedule.tiling_structure": "SSSRRSRS"})
                                bgemm_local[v_eps, v_nu, v_co, v_p] = bgemm_local[v_eps, v_nu, v_co, v_p] + data_pack_shared[v_eps, v_nu, v_ci, v_p] * p1_shared[v_eps, v_nu, v_ci, v_co]
                    for ax0, ax1, ax2, ax3 in T.grid(T.int64(3), T.int64(1), T.int64(4), T.int64(1)):
                        with T.block("bgemm_local"):
                            v0 = T.axis.spatial(T.int64(6), eps_0_nu_0_co_0_p_0_fused // T.int64(12) * T.int64(3) + ax0)
                            v1 = T.axis.spatial(T.int64(6), eps_0_nu_0_co_0_p_0_fused % T.int64(12) // T.int64(2) + ax1)
                            v2 = T.axis.spatial(T.int64(256), eps_1_nu_1_co_1_p_1_fused // T.int64(7) * T.int64(16) + eps_2_nu_2_co_2_p_2_fused // T.int64(14) * T.int64(4) + ax2)
                            v3 = T.axis.spatial(T.int64(196), eps_0_nu_0_co_0_p_0_fused % T.int64(2) * T.int64(98) + eps_1_nu_1_co_1_p_1_fused % T.int64(7) * T.int64(14) + eps_2_nu_2_co_2_p_2_fused % T.int64(14) + ax3)
                            T.reads(bgemm_local[v0, v1, v2, v3])
                            T.writes(bgemm[v0, v1, v2, v3])
                            bgemm[v0, v1, v2, v3] = bgemm_local[v0, v1, v2, v3]
        for n_co_h_0_w_0_fused_0 in T.thread_binding(T.int64(196), thread="blockIdx.x", annotations={"pragma_auto_unroll_max_step": 1024, "pragma_unroll_explicit": 1}):
            for n_co_h_0_w_0_fused_1 in T.thread_binding(T.int64(256), thread="threadIdx.x"):
                for ax0, ax1 in T.grid(T.int64(1), T.int64(1)):
                    for ax2 in T.unroll(T.int64(4)):
                        for ax3 in T.unroll(T.int64(4)):
                            with T.block("inverse_init"):
                                v_co = T.axis.spatial(T.int64(256), (n_co_h_0_w_0_fused_0 * T.int64(256) + n_co_h_0_w_0_fused_1) // T.int64(196) + ax0)
                                v_p = T.axis.spatial(T.int64(196), (n_co_h_0_w_0_fused_0 * T.int64(256) + n_co_h_0_w_0_fused_1) % T.int64(196) + ax1)
                                v_vh, v_vw = T.axis.remap("SS", [ax2, ax3])
                                T.reads()
                                T.writes(inverse_local[v_co, v_p, v_vh, v_vw])
                                T.block_attr({"schedule_rule": "conv2d_nchw_winograd_inverse"})
                                inverse_local[v_co, v_p, v_vh, v_vw] = T.float32(0)
                            for ax4 in T.unroll(T.int64(6)):
                                for ax5 in T.unroll(T.int64(6)):
                                    with T.block("inverse_update"):
                                        v_co = T.axis.spatial(T.int64(256), (n_co_h_0_w_0_fused_0 * T.int64(256) + n_co_h_0_w_0_fused_1) // T.int64(196) + ax0)
                                        v_p = T.axis.spatial(T.int64(196), (n_co_h_0_w_0_fused_0 * T.int64(256) + n_co_h_0_w_0_fused_1) % T.int64(196) + ax1)
                                        v_vh, v_vw, v_r_a, v_r_b = T.axis.remap("SSRR", [ax2, ax3, ax4, ax5])
                                        T.reads(inverse_local[v_co, v_p, v_vh, v_vw], bgemm[v_r_a, v_r_b, v_co, v_p])
                                        T.writes(inverse_local[v_co, v_p, v_vh, v_vw])
                                        T.block_attr({"schedule_rule": "conv2d_nchw_winograd_inverse"})
                                        inverse_local[v_co, v_p, v_vh, v_vw] = inverse_local[v_co, v_p, v_vh, v_vw] + bgemm[v_r_a, v_r_b, v_co, v_p] * T.Select(v_r_a % T.int64(6) == T.int64(5) and v_vh % T.int64(4) == T.int64(3), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(5) and v_vh % T.int64(4) == T.int64(2), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(5) and v_vh % T.int64(4) == T.int64(1), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(5) and v_vh % T.int64(4) == T.int64(0), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(4) and v_vh % T.int64(4) == T.int64(3), T.float32(-8), T.Select(v_r_a % T.int64(6) == T.int64(4) and v_vh % T.int64(4) == T.int64(2), T.float32(4), T.Select(v_r_a % T.int64(6) == T.int64(4) and v_vh % T.int64(4) == T.int64(1), T.float32(-2), T.Select(v_r_a % T.int64(6) == T.int64(4) and v_vh % T.int64(4) == T.int64(0), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(3) and v_vh % T.int64(4) == T.int64(3), T.float32(0.125), T.Select(v_r_a % T.int64(6) == T.int64(3) and v_vh % T.int64(4) == T.int64(2), T.float32(0.25), T.Select(v_r_a % T.int64(6) == T.int64(3) and v_vh % T.int64(4) == T.int64(1), T.float32(0.5), T.Select(v_r_a % T.int64(6) == T.int64(3) and v_vh % T.int64(4) == T.int64(0), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(2) and v_vh % T.int64(4) == T.int64(3), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(2) and v_vh % T.int64(4) == T.int64(2), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(2) and v_vh % T.int64(4) == T.int64(1), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(2) and v_vh % T.int64(4) == T.int64(0), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(1) and v_vh % T.int64(4) == T.int64(3), T.float32(-1), T.Select(v_r_a % T.int64(6) == T.int64(1) and v_vh % T.int64(4) == T.int64(2), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(1) and v_vh % T.int64(4) == T.int64(1), T.float32(-1), T.Select(v_r_a % T.int64(6) == T.int64(1) and v_vh % T.int64(4) == T.int64(0), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(0) and v_vh % T.int64(4) == T.int64(3), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(0) and v_vh % T.int64(4) == T.int64(2), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(0) and v_vh % T.int64(4) == T.int64(1), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(0) and v_vh % T.int64(4) == T.int64(0), T.float32(1), T.float32(0))))))))))))))))))))))))) * T.Select(v_r_b % T.int64(6) == T.int64(5) and v_vw % T.int64(4) == T.int64(3), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(5) and v_vw % T.int64(4) == T.int64(2), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(5) and v_vw % T.int64(4) == T.int64(1), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(5) and v_vw % T.int64(4) == T.int64(0), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(4) and v_vw % T.int64(4) == T.int64(3), T.float32(-8), T.Select(v_r_b % T.int64(6) == T.int64(4) and v_vw % T.int64(4) == T.int64(2), T.float32(4), T.Select(v_r_b % T.int64(6) == T.int64(4) and v_vw % T.int64(4) == T.int64(1), T.float32(-2), T.Select(v_r_b % T.int64(6) == T.int64(4) and v_vw % T.int64(4) == T.int64(0), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(3) and v_vw % T.int64(4) == T.int64(3), T.float32(0.125), T.Select(v_r_b % T.int64(6) == T.int64(3) and v_vw % T.int64(4) == T.int64(2), T.float32(0.25), T.Select(v_r_b % T.int64(6) == T.int64(3) and v_vw % T.int64(4) == T.int64(1), T.float32(0.5), T.Select(v_r_b % T.int64(6) == T.int64(3) and v_vw % T.int64(4) == T.int64(0), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(2) and v_vw % T.int64(4) == T.int64(3), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(2) and v_vw % T.int64(4) == T.int64(2), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(2) and v_vw % T.int64(4) == T.int64(1), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(2) and v_vw % T.int64(4) == T.int64(0), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(1) and v_vw % T.int64(4) == T.int64(3), T.float32(-1), T.Select(v_r_b % T.int64(6) == T.int64(1) and v_vw % T.int64(4) == T.int64(2), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(1) and v_vw % T.int64(4) == T.int64(1), T.float32(-1), T.Select(v_r_b % T.int64(6) == T.int64(1) and v_vw % T.int64(4) == T.int64(0), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(0) and v_vw % T.int64(4) == T.int64(3), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(0) and v_vw % T.int64(4) == T.int64(2), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(0) and v_vw % T.int64(4) == T.int64(1), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(0) and v_vw % T.int64(4) == T.int64(0), T.float32(1), T.float32(0)))))))))))))))))))))))))
                for h_1, w_1 in T.grid(T.int64(4), T.int64(4)):
                    with T.block("conv2d_winograd"):
                        v_n = T.axis.spatial(T.int64(1), T.int64(0))
                        v_co = T.axis.spatial(T.int64(256), (n_co_h_0_w_0_fused_0 * T.int64(256) + n_co_h_0_w_0_fused_1) // T.int64(196))
                        v_h = T.axis.spatial(T.int64(56), (n_co_h_0_w_0_fused_0 * T.int64(256) + n_co_h_0_w_0_fused_1) % T.int64(196) // T.int64(14) * T.int64(4) + h_1)
                        v_w = T.axis.spatial(T.int64(56), (n_co_h_0_w_0_fused_0 * T.int64(256) + n_co_h_0_w_0_fused_1) % T.int64(14) * T.int64(4) + w_1)
                        T.reads(inverse_local[v_co, v_n * T.int64(196) + v_h // T.int64(4) * T.int64(14) + v_w // T.int64(4), v_h % T.int64(4), v_w % T.int64(4)], p2[v_n, v_co, T.int64(0), T.int64(0)])
                        T.writes(T_relu[v_n, v_co, v_h, v_w])
                        T_relu[v_n, v_co, v_h, v_w] = T.max(inverse_local[v_co, v_n * T.int64(196) + v_h // T.int64(4) * T.int64(14) + v_w // T.int64(4), v_h % T.int64(4), v_w % T.int64(4)] + p2[v_n, v_co, T.int64(0), T.int64(0)], T.float32(0))
b0 = sch.get_block(name="data_pack", func_name="main")
b1 = sch.get_block(name="bgemm", func_name="main")
b2 = sch.get_block(name="inverse", func_name="main")
b3 = sch.get_block(name="conv2d_winograd", func_name="main")
b4 = sch.get_block(name="T_add", func_name="main")
b5 = sch.get_block(name="T_relu", func_name="main")
b6 = sch.get_block(name="root", func_name="main")
b7, b8 = sch.get_producers(block=b2)
sch.compute_inline(block=b8)
b9, = sch.get_consumers(block=b2)
l10, l11, l12, l13 = sch.get_loops(block=b9)
l14, l15 = sch.split(loop=l12, factors=[None, 4], preserve_unit_iters=True)
l16, l17 = sch.split(loop=l13, factors=[None, 4], preserve_unit_iters=True)
sch.reorder(l14, l16, l15, l17)
sch.compute_at(block=b2, loop=l16, preserve_unit_loops=True, index=-1)
sch.set_scope(block=b2, buffer_index=0, storage_scope="local")
l18, l19, l20, l21, l22, l23, l24, l25, l26, l27 = sch.get_loops(block=b2)
sch.unroll(loop=l24)
sch.unroll(loop=l25)
sch.unroll(loop=l26)
sch.unroll(loop=l27)
b28, b29 = sch.get_producers(block=b0)
sch.compute_inline(block=b29)
b30, = sch.get_producers(block=b28)
l31, l32, l33, l34, l35, l36 = sch.get_loops(block=b0)
sch.reorder(l33, l34, l31, l32, l35, l36)
sch.unroll(loop=l31)
sch.unroll(loop=l32)
sch.unroll(loop=l35)
sch.unroll(loop=l36)
l37 = sch.fuse(l33, l34, preserve_unit_iters=True)
v38 = sch.sample_categorical(candidates=[32, 64, 128, 256, 512, 1024], probs=[0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666], decision=5)
l39, l40 = sch.split(loop=l37, factors=[None, v38], preserve_unit_iters=True)
sch.bind(loop=l39, thread_axis="blockIdx.x")
sch.bind(loop=l40, thread_axis="threadIdx.x")
b41 = sch.cache_write(block=b0, write_buffer_index=0, storage_scope="local")
sch.reverse_compute_at(block=b41, loop=l40, preserve_unit_loops=True, index=-1)
sch.compute_at(block=b28, loop=l40, preserve_unit_loops=True, index=-1)
sch.set_scope(block=b28, buffer_index=0, storage_scope="local")
sch.compute_inline(block=b30)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSSRRSRS")
l42, l43, l44, l45, l46 = sch.get_loops(block=b1)
v47, v48, v49, v50, v51 = sch.sample_perfect_tile(loop=l42, n=5, max_innermost_factor=64, decision=[2, 1, 1, 3, 1])
l52, l53, l54, l55, l56 = sch.split(loop=l42, factors=[v47, v48, v49, v50, v51], preserve_unit_iters=True)
v57, v58, v59, v60, v61 = sch.sample_perfect_tile(loop=l43, n=5, max_innermost_factor=64, decision=[6, 1, 1, 1, 1])
l62, l63, l64, l65, l66 = sch.split(loop=l43, factors=[v57, v58, v59, v60, v61], preserve_unit_iters=True)
v67, v68, v69, v70, v71 = sch.sample_perfect_tile(loop=l44, n=5, max_innermost_factor=64, decision=[1, 16, 4, 2, 2])
l72, l73, l74, l75, l76 = sch.split(loop=l44, factors=[v67, v68, v69, v70, v71], preserve_unit_iters=True)
v77, v78, v79, v80, v81 = sch.sample_perfect_tile(loop=l45, n=5, max_innermost_factor=64, decision=[2, 7, 14, 1, 1])
l82, l83, l84, l85, l86 = sch.split(loop=l45, factors=[v77, v78, v79, v80, v81], preserve_unit_iters=True)
v87, v88, v89 = sch.sample_perfect_tile(loop=l46, n=3, max_innermost_factor=64, decision=[128, 1, 1])
l90, l91, l92 = sch.split(loop=l46, factors=[v87, v88, v89], preserve_unit_iters=True)
sch.reorder(l52, l62, l72, l82, l53, l63, l73, l83, l54, l64, l74, l84, l90, l91, l55, l65, l75, l85, l92, l56, l66, l76, l86)
l93 = sch.fuse(l52, l62, l72, l82, preserve_unit_iters=True)
sch.bind(loop=l93, thread_axis="blockIdx.x")
l94 = sch.fuse(l53, l63, l73, l83, preserve_unit_iters=True)
sch.bind(loop=l94, thread_axis="vthread.x")
l95 = sch.fuse(l54, l64, l74, l84, preserve_unit_iters=True)
sch.bind(loop=l95, thread_axis="threadIdx.x")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_low_inclusive", ann_val=32)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_high_inclusive", ann_val=1024)
b96 = sch.cache_write(block=b1, write_buffer_index=0, storage_scope="local")
sch.reverse_compute_at(block=b96, loop=l95, preserve_unit_loops=True, index=-1)
b97 = sch.cache_read(block=b1, read_buffer_index=0, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b97, loop=l90, preserve_unit_loops=True, index=-1)
l98, l99, l100, l101, l102, l103, l104, l105 = sch.get_loops(block=b97)
l106 = sch.fuse(l102, l103, l104, l105, preserve_unit_iters=True)
v107 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=0)
sch.annotate(block_or_loop=b97, ann_key="meta_schedule.cooperative_fetch", ann_val=v107)
b108 = sch.cache_read(block=b1, read_buffer_index=1, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b108, loop=l90, preserve_unit_loops=True, index=-1)
l109, l110, l111, l112, l113, l114, l115, l116 = sch.get_loops(block=b108)
l117 = sch.fuse(l113, l114, l115, l116, preserve_unit_iters=True)
v118 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=2)
sch.annotate(block_or_loop=b108, ann_key="meta_schedule.cooperative_fetch", ann_val=v118)
l119 = sch.fuse(l90, preserve_unit_iters=True)
sch.annotate(block_or_loop=l119, ann_key="software_pipeline_stage", ann_val=[0, 0, 2])
sch.annotate(block_or_loop=l119, ann_key="software_pipeline_order", ann_val=[0, 1, 2])
sch.annotate(block_or_loop=l119, ann_key="software_pipeline_async_stages", ann_val=[0])
sch.reverse_compute_inline(block=b5)
sch.reverse_compute_inline(block=b4)
v120 = sch.sample_categorical(candidates=[0, 16, 64, 512, 1024], probs=[0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001], decision=4)
sch.annotate(block_or_loop=b6, ann_key="meta_schedule.unroll_explicit", ann_val=v120)
l121, l122, l123, l124, l125, l126 = sch.get_loops(block=b3)
l127 = sch.fuse(l121, l122, l123, l124, preserve_unit_iters=True)
v128 = sch.sample_categorical(candidates=[32, 64, 128, 256, 512, 1024], probs=[0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666], decision=3)
l129, l130 = sch.split(loop=l127, factors=[None, v128], preserve_unit_iters=True)
sch.bind(loop=l129, thread_axis="blockIdx.x")
sch.bind(loop=l130, thread_axis="threadIdx.x")
sch.enter_postproc()
sch.unannotate(block_or_loop=b97, ann_key="meta_schedule.cooperative_fetch")
l131, l132, l133, l134, l135 = sch.get_loops(block=b97)
l136, l137 = sch.split(loop=l135, factors=[None, 56], preserve_unit_iters=True)
sch.bind(loop=l137, thread_axis="threadIdx.x")
sch.unannotate(block_or_loop=b108, ann_key="meta_schedule.cooperative_fetch")
l138, l139, l140, l141, l142 = sch.get_loops(block=b108)
l143, l144, l145 = sch.split(loop=l142, factors=[None, 56, 3], preserve_unit_iters=True)
sch.vectorize(loop=l145)
sch.bind(loop=l144, thread_axis="threadIdx.x")
b146 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b146, ann_key="meta_schedule.unroll_explicit")
b147, b148, b149, b150, b151, b152, b153, b154, b155 = sch.get_child_blocks(b146)
l156, l157, l158, l159, l160, l161 = sch.get_loops(block=b147)
l162, l163, l164, l165, l166, l167 = sch.get_loops(block=b148)
sch.annotate(block_or_loop=l162, ann_key="pragma_auto_unroll_max_step", ann_val=1024)
sch.annotate(block_or_loop=l162, ann_key="pragma_unroll_explicit", ann_val=1)
l168, l169, l170, l171, l172, l173 = sch.get_loops(block=b149)
l174, l175, l176, l177, l178, l179 = sch.get_loops(block=b150)
l180, l181, l182, l183, l184, l185, l186 = sch.get_loops(block=b151)
l187, l188, l189, l190, l191, l192, l193, l194, l195, l196, l197, l198, l199, l200 = sch.get_loops(block=b152)
sch.annotate(block_or_loop=l187, ann_key="pragma_auto_unroll_max_step", ann_val=1024)
sch.annotate(block_or_loop=l187, ann_key="pragma_unroll_explicit", ann_val=1)
l201, l202, l203, l204, l205, l206, l207 = sch.get_loops(block=b153)
l208, l209, l210, l211, l212, l213, l214, l215 = sch.get_loops(block=b154)
sch.annotate(block_or_loop=l208, ann_key="pragma_auto_unroll_max_step", ann_val=1024)
sch.annotate(block_or_loop=l208, ann_key="pragma_unroll_explicit", ann_val=1)
l216, l217, l218, l219 = sch.get_loops(block=b155)
b220 = sch.get_block(name="data_pack", func_name="main")
l221, l222, l223, l224, l225, l226 = sch.get_loops(block=b220)
b227 = sch.decompose_reduction(block=b220, loop=l225)
b228 = sch.get_block(name="bgemm", func_name="main")
l229, l230, l231, l232, l233, l234, l235, l236, l237, l238, l239, l240, l241, l242 = sch.get_loops(block=b228)
b243 = sch.decompose_reduction(block=b228, loop=l232)
b244 = sch.get_block(name="inverse", func_name="main")
l245, l246, l247, l248, l249, l250, l251, l252 = sch.get_loops(block=b244)
b253 = sch.decompose_reduction(block=b244, loop=l251)
2024-04-29 17:45:04 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_4] Trial #18: GFLOPs: 666.6725. Time: 972.4023 us. Best GFLOPs: 3684.9392
2024-04-29 17:45:04 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_4] Trial #19: GFLOPs: 510.4467. Time: 1270.0128 us. Best GFLOPs: 3684.9392
2024-04-29 17:45:04 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_4] Trial #20: GFLOPs: 749.5483. Time: 864.8862 us. Best GFLOPs: 3684.9392
2024-04-29 17:45:04 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_4] Trial #21: GFLOPs: 3696.1984. Time: 175.3894 us. Best GFLOPs: 3696.1984
2024-04-29 17:45:04 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_4] Trial #22: GFLOPs: 67.2079. Time: 9645.8005 us. Best GFLOPs: 3696.1984
2024-04-29 17:45:04 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_4] Trial #23: GFLOPs: 78.9831. Time: 8207.7537 us. Best GFLOPs: 3696.1984
2024-04-29 17:45:04 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_4] Trial #24: GFLOPs: 132.2143. Time: 4903.2044 us. Best GFLOPs: 3696.1984
2024-04-29 17:45:04 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_4] Trial #25: GFLOPs: 3188.2920. Time: 203.3295 us. Best GFLOPs: 3696.1984
2024-04-29 17:45:04 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_4] Trial #26: GFLOPs: 84.4139. Time: 7679.7076 us. Best GFLOPs: 3696.1984
2024-04-29 17:45:04 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_4] Trial #27: GFLOPs: 350.6874. Time: 1848.5807 us. Best GFLOPs: 3696.1984
2024-04-29 17:45:04 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_4] Trial #28: GFLOPs: 425.7735. Time: 1522.5794 us. Best GFLOPs: 3696.1984
2024-04-29 17:45:04 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_4] Trial #29: GFLOPs: 4883.5598. Time: 132.7462 us. Best GFLOPs: 4883.5598
2024-04-29 17:45:04 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_4] Trial #30: GFLOPs: 43.9979. Time: 14734.1897 us. Best GFLOPs: 4883.5598
2024-04-29 17:45:04 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_4] Trial #31: GFLOPs: 2234.8223. Time: 290.0785 us. Best GFLOPs: 4883.5598
2024-04-29 17:45:04 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_4] Trial #32: GFLOPs: 3017.4440. Time: 214.8421 us. Best GFLOPs: 4883.5598
2024-04-29 17:45:04 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_4] Trial #33: GFLOPs: 4855.5905. Time: 133.5108 us. Best GFLOPs: 4883.5598
2024-04-29 17:45:04 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_4] Trial #34: GFLOPs: 541.2028. Time: 1197.8391 us. Best GFLOPs: 4883.5598
2024-04-29 17:45:04 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_4] Trial #35: GFLOPs: 6123.1147. Time: 105.8732 us. Best GFLOPs: 6123.1147
2024-04-29 17:45:04 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_4] Trial #36: GFLOPs: 80.2805. Time: 8075.1067 us. Best GFLOPs: 6123.1147
2024-04-29 17:45:04 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_4] Trial #37: GFLOPs: 285.9986. Time: 2266.7034 us. Best GFLOPs: 6123.1147
2024-04-29 17:45:04 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_4] Trial #38: GFLOPs: 151.4153. Time: 4281.4292 us. Best GFLOPs: 6123.1147
2024-04-29 17:45:04 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_4] Trial #39: GFLOPs: 5537.6258. Time: 117.0671 us. Best GFLOPs: 6123.1147
2024-04-29 17:45:04 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_4] Trial #40: GFLOPs: 198.0891. Time: 3272.6379 us. Best GFLOPs: 6123.1147
2024-04-29 17:45:04 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_4] Trial #41: GFLOPs: 3196.6619. Time: 202.7971 us. Best GFLOPs: 6123.1147
2024-04-29 17:45:04 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_4] Trial #42: GFLOPs: 85.6431. Time: 7569.4809 us. Best GFLOPs: 6123.1147
2024-04-29 17:45:04 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_4] Trial #43: GFLOPs: 558.0058. Time: 1161.7692 us. Best GFLOPs: 6123.1147
2024-04-29 17:45:04 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_4] Trial #44: GFLOPs: 483.4985. Time: 1340.7983 us. Best GFLOPs: 6123.1147
2024-04-29 17:45:04 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_4] Trial #45: GFLOPs: 1247.5117. Time: 519.6536 us. Best GFLOPs: 6123.1147
2024-04-29 17:45:04 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_4] Trial #46: GFLOPs: 2038.4508. Time: 318.0228 us. Best GFLOPs: 6123.1147
2024-04-29 17:45:04 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_4] Trial #47: GFLOPs: 1821.2119. Time: 355.9574 us. Best GFLOPs: 6123.1147
2024-04-29 17:45:04 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_4] Trial #48: GFLOPs: 11.9002. Time: 54475.7740 us. Best GFLOPs: 6123.1147
2024-04-29 17:45:04 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_4] Trial #49: GFLOPs: 43.9792. Time: 14740.4796 us. Best GFLOPs: 6123.1147
2024-04-29 17:45:04 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_4] Trial #50: GFLOPs: 293.3583. Time: 2209.8365 us. Best GFLOPs: 6123.1147
2024-04-29 17:45:04 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_4] Trial #51: GFLOPs: 3367.1039. Time: 192.5316 us. Best GFLOPs: 6123.1147
2024-04-29 17:45:04 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_4] Trial #52: GFLOPs: 38.8933. Time: 16667.9890 us. Best GFLOPs: 6123.1147
2024-04-29 17:45:04 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_4] Trial #53: GFLOPs: 15.7283. Time: 41217.0230 us. Best GFLOPs: 6123.1147
2024-04-29 17:45:04 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_4] Trial #54: GFLOPs: 184.5770. Time: 3512.2141 us. Best GFLOPs: 6123.1147
2024-04-29 17:45:04 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_4] Trial #55: GFLOPs: 1600.9114. Time: 404.9405 us. Best GFLOPs: 6123.1147
2024-04-29 17:45:04 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_4] Trial #56: GFLOPs: 123.4905. Time: 5249.5872 us. Best GFLOPs: 6123.1147
2024-04-29 17:45:04 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_4] Trial #57: GFLOPs: 4953.3553. Time: 130.8757 us. Best GFLOPs: 6123.1147
2024-04-29 17:45:04 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_4] Trial #58: GFLOPs: 2856.9318. Time: 226.9126 us. Best GFLOPs: 6123.1147
2024-04-29 17:45:04 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_4] Trial #59: GFLOPs: 4081.4697. Time: 158.8334 us. Best GFLOPs: 6123.1147
2024-04-29 17:45:04 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_4] Trial #60: GFLOPs: 3470.3098. Time: 186.8058 us. Best GFLOPs: 6123.1147
2024-04-29 17:45:04 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_4] Trial #61: GFLOPs: 544.5589. Time: 1190.4569 us. Best GFLOPs: 6123.1147
2024-04-29 17:45:04 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_4] Trial #62: GFLOPs: 201.0596. Time: 3224.2880 us. Best GFLOPs: 6123.1147
2024-04-29 17:45:04 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_4] Trial #63: GFLOPs: 135.4706. Time: 4785.3470 us. Best GFLOPs: 6123.1147
2024-04-29 17:45:04 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_4] Trial #64: GFLOPs: 5194.6983. Time: 124.7953 us. Best GFLOPs: 6123.1147
2024-04-29 18:14:45 [INFO] [evolutionary_search.cc:713] Generating candidates......
2024-04-29 18:14:48 [INFO] [evolutionary_search.cc:715] Picked top 63 candidate(s) from database
2024-04-29 18:14:55 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x74b5608)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0xb541318)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0xb52be28)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x4d66e18)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x51036c8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0xb4c2bb8)]: 445 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0xb549488)]: 0 failure(s)
2024-04-29 18:15:03 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x74b5608)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0xb541318)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0xb52be28)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x4d66e18)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x51036c8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0xb4c2bb8)]: 887 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0xb549488)]: 0 failure(s)
2024-04-29 18:15:11 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x74b5608)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0xb541318)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0xb52be28)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x4d66e18)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x51036c8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0xb4c2bb8)]: 1329 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0xb549488)]: 0 failure(s)
2024-04-29 18:15:18 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x74b5608)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0xb541318)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0xb52be28)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x4d66e18)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x51036c8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0xb4c2bb8)]: 1775 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0xb549488)]: 0 failure(s)
2024-04-29 18:15:26 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x74b5608)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0xb541318)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0xb52be28)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x4d66e18)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x51036c8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0xb4c2bb8)]: 2211 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0xb549488)]: 0 failure(s)
2024-04-29 18:15:34 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x74b5608)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0xb541318)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0xb52be28)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x4d66e18)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x51036c8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0xb4c2bb8)]: 2647 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0xb549488)]: 0 failure(s)
2024-04-29 18:15:41 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x74b5608)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0xb541318)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0xb52be28)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x4d66e18)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x51036c8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0xb4c2bb8)]: 3089 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0xb549488)]: 0 failure(s)
2024-04-29 18:15:41 [INFO] [evolutionary_search.cc:723] Sampled 54 candidate(s)
2024-04-29 18:16:03 [INFO] [evolutionary_search.cc:621] Evolve iter #0 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x74b5608)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0xb541318)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0xb52be28)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x4d66e18)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x51036c8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0xb4c2bb8)]: 95 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0xb549488)]: 0 failure(s)
2024-04-29 18:16:29 [INFO] [evolutionary_search.cc:621] Evolve iter #1 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x74b5608)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0xb541318)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0xb52be28)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x4d66e18)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x51036c8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0xb4c2bb8)]: 108 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0xb549488)]: 0 failure(s)
2024-04-29 18:16:54 [INFO] [evolutionary_search.cc:621] Evolve iter #2 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x74b5608)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0xb541318)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0xb52be28)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x4d66e18)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x51036c8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0xb4c2bb8)]: 105 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0xb549488)]: 0 failure(s)
2024-04-29 18:17:17 [INFO] [evolutionary_search.cc:621] Evolve iter #3 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x74b5608)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0xb541318)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0xb52be28)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x4d66e18)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x51036c8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0xb4c2bb8)]: 108 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0xb549488)]: 0 failure(s)
2024-04-29 18:17:23 [INFO] [evolutionary_search.cc:649] Scores of the best 64 candidates:
[1 : 16]:	1.1552  1.1552  1.1053  1.0403  1.0295  0.9923  0.9864  0.9861  0.9796  0.9656  0.9593  0.9576  0.9566  0.9468  0.9378  0.9376
[17 : 32]:	0.9373  0.9334  0.9306  0.9246  0.9241  0.9169  0.9111  0.9099  0.9073  0.9027  0.9024  0.9017  0.8968  0.8965  0.8954  0.8920
[33 : 48]:	0.8917  0.8894  0.8892  0.8850  0.8844  0.8838  0.8781  0.8774  0.8770  0.8760  0.8758  0.8746  0.8733  0.8701  0.8674  0.8657
[49 : 64]:	0.8656  0.8655  0.8637  0.8613  0.8613  0.8607  0.8607  0.8604  0.8596  0.8595  0.8565  0.8554  0.8544  0.8544  0.8534  0.8531
2024-04-29 18:17:23 [INFO] [evolutionary_search.cc:727] Got 64 candidate(s) with evolutionary search
2024-04-29 18:17:23 [INFO] [evolutionary_search.cc:730] Sending 64 candidates(s) for measurement
2024-04-29 18:19:01 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_4] Trial #65: GFLOPs: 115.3700. Time: 5619.0863 us. Best GFLOPs: 6123.1147
2024-04-29 18:19:01 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_4] Trial #66: GFLOPs: 125.2309. Time: 5176.6273 us. Best GFLOPs: 6123.1147
2024-04-29 18:19:01 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_4] Trial #67: GFLOPs: 4815.0202. Time: 134.6358 us. Best GFLOPs: 6123.1147
2024-04-29 18:19:01 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_4] Trial #68: GFLOPs: 7245.5510. Time: 89.4720 us. Best GFLOPs: 7245.5510
2024-04-29 18:19:01 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_4] Trial #69: GFLOPs: 6394.7478. Time: 101.3760 us. Best GFLOPs: 7245.5510
2024-04-29 18:19:01 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_4] Trial #70: GFLOPs: 6282.2501. Time: 103.1914 us. Best GFLOPs: 7245.5510
2024-04-29 18:19:01 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_4] Trial #71: GFLOPs: 6292.6565. Time: 103.0207 us. Best GFLOPs: 7245.5510
2024-04-29 18:19:01 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_4] Trial #72: GFLOPs: 839.3803. Time: 772.3244 us. Best GFLOPs: 7245.5510
2024-04-29 18:19:01 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_4] Trial #73: GFLOPs: 6260.9770. Time: 103.5420 us. Best GFLOPs: 7245.5510
2024-04-29 18:19:01 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_4] Trial #74: GFLOPs: 6470.2794. Time: 100.1926 us. Best GFLOPs: 7245.5510
2024-04-29 18:19:01 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_4] Trial #75: GFLOPs: 4274.3252. Time: 151.6670 us. Best GFLOPs: 7245.5510
2024-04-29 18:19:01 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_4] Trial #76: GFLOPs: 5638.6965. Time: 114.9688 us. Best GFLOPs: 7245.5510
2024-04-29 18:19:01 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_4] Trial #77: GFLOPs: 6394.1325. Time: 101.3857 us. Best GFLOPs: 7245.5510
2024-04-29 18:19:01 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_4] Trial #78: GFLOPs: 6257.3021. Time: 103.6028 us. Best GFLOPs: 7245.5510
2024-04-29 18:19:01 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_4] Trial #79: GFLOPs: 5714.1071. Time: 113.4515 us. Best GFLOPs: 7245.5510
2024-04-29 18:19:01 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_4] Trial #80: GFLOPs: 4110.5230. Time: 157.7108 us. Best GFLOPs: 7245.5510
2024-04-29 18:19:01 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_4] Trial #81: GFLOPs: 5667.7502. Time: 114.3794 us. Best GFLOPs: 7245.5510
2024-04-29 18:19:01 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_4] Trial #82: GFLOPs: 4284.0242. Time: 151.3236 us. Best GFLOPs: 7245.5510
2024-04-29 18:19:01 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_4] Trial #83: GFLOPs: 5502.9662. Time: 117.8045 us. Best GFLOPs: 7245.5510
2024-04-29 18:19:01 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_4] Trial #84: GFLOPs: 4128.0138. Time: 157.0426 us. Best GFLOPs: 7245.5510
2024-04-29 18:19:01 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_4] Trial #85: GFLOPs: 6442.9913. Time: 100.6169 us. Best GFLOPs: 7245.5510
2024-04-29 18:19:01 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_4] Trial #86: GFLOPs: 1942.1624. Time: 333.7898 us. Best GFLOPs: 7245.5510
2024-04-29 18:19:01 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_4] Trial #87: GFLOPs: 1827.3089. Time: 354.7698 us. Best GFLOPs: 7245.5510
2024-04-29 18:19:01 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_4] Trial #88: GFLOPs: 4074.0570. Time: 159.1224 us. Best GFLOPs: 7245.5510
2024-04-29 18:19:01 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_4] Trial #89: GFLOPs: 4315.1401. Time: 150.2324 us. Best GFLOPs: 7245.5510
2024-04-29 18:19:01 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_4] Trial #90: GFLOPs: 4597.4263. Time: 141.0080 us. Best GFLOPs: 7245.5510
2024-04-29 18:19:01 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_4] Trial #91: GFLOPs: 4580.1544. Time: 141.5398 us. Best GFLOPs: 7245.5510
2024-04-29 18:19:01 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_4] Trial #92: GFLOPs: 5291.7650. Time: 122.5062 us. Best GFLOPs: 7245.5510
2024-04-29 18:19:01 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_4] Trial #93: GFLOPs: 4941.8415. Time: 131.1806 us. Best GFLOPs: 7245.5510
2024-04-29 18:19:01 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_4] Trial #94: GFLOPs: 6018.9044. Time: 107.7063 us. Best GFLOPs: 7245.5510
2024-04-29 18:19:01 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_4] Trial #95: GFLOPs: 6311.8642. Time: 102.7072 us. Best GFLOPs: 7245.5510
2024-04-29 18:19:01 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_4] Trial #96: GFLOPs: 5754.8941. Time: 112.6474 us. Best GFLOPs: 7245.5510
2024-04-29 18:19:01 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_4] Trial #97: GFLOPs: 4303.5076. Time: 150.6385 us. Best GFLOPs: 7245.5510
2024-04-29 18:19:01 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_4] Trial #98: GFLOPs: 6442.5250. Time: 100.6242 us. Best GFLOPs: 7245.5510
2024-04-29 18:19:01 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_4] Trial #99: GFLOPs: 5055.1055. Time: 128.2414 us. Best GFLOPs: 7245.5510
2024-04-29 18:19:01 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_4] Trial #100: GFLOPs: 6956.8784. Time: 93.1846 us. Best GFLOPs: 7245.5510
2024-04-29 18:19:01 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_4] Trial #101: GFLOPs: 6881.8763. Time: 94.2002 us. Best GFLOPs: 7245.5510
2024-04-29 18:19:01 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_4] Trial #102: GFLOPs: 1828.7086. Time: 354.4982 us. Best GFLOPs: 7245.5510
2024-04-29 18:19:01 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_4] Trial #103: GFLOPs: 5050.4775. Time: 128.3589 us. Best GFLOPs: 7245.5510
2024-04-29 18:19:01 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_4] Trial #104: GFLOPs: 4207.4183. Time: 154.0788 us. Best GFLOPs: 7245.5510
2024-04-29 18:19:01 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_4] Trial #105: GFLOPs: 4897.1310. Time: 132.3783 us. Best GFLOPs: 7245.5510
2024-04-29 18:19:01 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_4] Trial #106: GFLOPs: 3285.0346. Time: 197.3416 us. Best GFLOPs: 7245.5510
2024-04-29 18:19:01 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_4] Trial #107: GFLOPs: 5553.0839. Time: 116.7412 us. Best GFLOPs: 7245.5510
2024-04-29 18:19:01 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_4] Trial #108: GFLOPs: 5298.0290. Time: 122.3613 us. Best GFLOPs: 7245.5510
2024-04-29 18:19:01 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_4] Trial #109: GFLOPs: 5026.9842. Time: 128.9588 us. Best GFLOPs: 7245.5510
2024-04-29 18:19:01 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_4] Trial #110: GFLOPs: 6879.9797. Time: 94.2261 us. Best GFLOPs: 7245.5510
2024-04-29 18:19:01 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_4] Trial #111: GFLOPs: 4751.6153. Time: 136.4323 us. Best GFLOPs: 7245.5510
2024-04-29 18:19:01 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_4] Trial #112: GFLOPs: 5367.3575. Time: 120.7808 us. Best GFLOPs: 7245.5510
2024-04-29 18:19:01 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_4] Trial #113: GFLOPs: 5161.8171. Time: 125.5903 us. Best GFLOPs: 7245.5510
2024-04-29 18:19:01 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_4] Trial #114: GFLOPs: 5132.9063. Time: 126.2976 us. Best GFLOPs: 7245.5510
2024-04-29 18:19:01 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_4] Trial #115: GFLOPs: 5229.9203. Time: 123.9548 us. Best GFLOPs: 7245.5510
2024-04-29 18:19:01 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_4] Trial #116: GFLOPs: 4969.6310. Time: 130.4471 us. Best GFLOPs: 7245.5510
2024-04-29 18:19:01 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_4] Trial #117: GFLOPs: 5230.1606. Time: 123.9491 us. Best GFLOPs: 7245.5510
2024-04-29 18:19:01 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_4] Trial #118: GFLOPs: 3950.9217. Time: 164.0817 us. Best GFLOPs: 7245.5510
2024-04-29 18:19:01 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_4] Trial #119: GFLOPs: 3357.1755. Time: 193.1010 us. Best GFLOPs: 7245.5510
2024-04-29 18:19:01 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_4] Trial #120: GFLOPs: 2388.4934. Time: 271.4154 us. Best GFLOPs: 7245.5510
2024-04-29 18:19:01 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_4] Trial #121: GFLOPs: 7036.2328. Time: 92.1337 us. Best GFLOPs: 7245.5510
2024-04-29 18:19:01 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_4] Trial #122: GFLOPs: 4764.4171. Time: 136.0657 us. Best GFLOPs: 7245.5510
2024-04-29 18:19:01 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_4] Trial #123: GFLOPs: 1702.7370. Time: 380.7246 us. Best GFLOPs: 7245.5510
2024-04-29 18:19:01 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_4] Trial #124: GFLOPs: 1701.1469. Time: 381.0805 us. Best GFLOPs: 7245.5510
2024-04-29 18:19:01 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_4] Trial #125: GFLOPs: 1834.9962. Time: 353.2835 us. Best GFLOPs: 7245.5510
2024-04-29 18:19:01 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_4] Trial #126: GFLOPs: 3464.3484. Time: 187.1272 us. Best GFLOPs: 7245.5510
2024-04-29 18:19:01 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_4] Trial #127: GFLOPs: 2006.9632. Time: 323.0124 us. Best GFLOPs: 7245.5510
2024-04-29 18:19:01 [INFO] [task_scheduler.cc:121] [Task #6: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_4] Trial #128: Error in building:
LocalBuilder: Timeout, killed after 30.0 seconds
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(128), T.int64(56), T.int64(56)), "float32"), p1: T.Buffer((T.int64(6), T.int64(6), T.int64(128), T.int64(256)), "float32"), p2: T.Buffer((T.int64(1), T.int64(256), T.int64(1), T.int64(1)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(256), T.int64(56), T.int64(56)), "float32")):
        T.func_attr({"layout_free_buffers": [1], "tir.noalias": T.bool(True)})
        # with T.block("root"):
        input_tile_local = T.alloc_buffer((T.int64(128), T.int64(196), T.int64(6), T.int64(6)), scope="local")
        data_pack = T.alloc_buffer((T.int64(6), T.int64(6), T.int64(128), T.int64(196)))
        bgemm = T.alloc_buffer((T.int64(6), T.int64(6), T.int64(256), T.int64(196)))
        inverse_local = T.alloc_buffer((T.int64(256), T.int64(196), T.int64(4), T.int64(4)), scope="local")
        data_pack_local = T.alloc_buffer((T.int64(6), T.int64(6), T.int64(128), T.int64(196)), scope="local")
        bgemm_local = T.alloc_buffer((T.int64(6), T.int64(6), T.int64(256), T.int64(196)), scope="local")
        data_pack_shared = T.alloc_buffer((T.int64(6), T.int64(6), T.int64(128), T.int64(196)), scope="shared")
        p1_shared = T.alloc_buffer((T.int64(6), T.int64(6), T.int64(128), T.int64(256)), scope="shared")
        for ci_p_fused_0 in T.thread_binding(T.int64(98), thread="blockIdx.x", annotations={"pragma_auto_unroll_max_step": 1024, "pragma_unroll_explicit": 1}):
            for ci_p_fused_1 in T.thread_binding(T.int64(256), thread="threadIdx.x"):
                for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(1), T.int64(6), T.int64(6)):
                    with T.block("input_tile"):
                        v_ci = T.axis.spatial(T.int64(128), (ci_p_fused_0 * T.int64(256) + ci_p_fused_1) // T.int64(196) + ax0)
                        v_p = T.axis.spatial(T.int64(196), (ci_p_fused_0 * T.int64(60) + ci_p_fused_1) % T.int64(196) + ax1)
                        v_eps, v_nu = T.axis.remap("SS", [ax2, ax3])
                        T.reads(p0[v_p // T.int64(196), v_ci, v_p % T.int64(196) // T.int64(14) * T.int64(4) + v_eps - T.int64(1), v_p % T.int64(14) * T.int64(4) + v_nu - T.int64(1)])
                        T.writes(input_tile_local[v_ci, v_p, v_eps, v_nu])
                        T.block_attr({"schedule_rule": "None"})
                        input_tile_local[v_ci, v_p, v_eps, v_nu] = T.if_then_else(T.int64(1) <= v_p % T.int64(196) // T.int64(14) * T.int64(4) + v_eps and v_p % T.int64(196) // T.int64(14) * T.int64(4) + v_eps < T.int64(57) and T.int64(1) <= v_p % T.int64(14) * T.int64(4) + v_nu and v_p % T.int64(14) * T.int64(4) + v_nu < T.int64(57), p0[v_p // T.int64(196), v_ci, v_p % T.int64(196) // T.int64(14) * T.int64(4) + v_eps - T.int64(1), v_p % T.int64(14) * T.int64(4) + v_nu - T.int64(1)], T.float32(0))
                for eps in T.unroll(T.int64(6)):
                    for nu in T.unroll(T.int64(6)):
                        with T.block("data_pack_init"):
                            v_eps, v_nu = T.axis.remap("SS", [eps, nu])
                            v_ci = T.axis.spatial(T.int64(128), (ci_p_fused_0 * T.int64(256) + ci_p_fused_1) // T.int64(196))
                            v_p = T.axis.spatial(T.int64(196), (ci_p_fused_0 * T.int64(256) + ci_p_fused_1) % T.int64(196))
                            T.reads()
                            T.writes(data_pack_local[v_eps, v_nu, v_ci, v_p])
                            T.block_attr({"schedule_rule": "conv2d_nchw_winograd_data_pack"})
                            data_pack_local[v_eps, v_nu, v_ci, v_p] = T.float32(0)
                        for r_a in T.unroll(T.int64(6)):
                            for r_b in T.unroll(T.int64(6)):
                                with T.block("data_pack_update"):
                                    v_eps, v_nu = T.axis.remap("SS", [eps, nu])
                                    v_ci = T.axis.spatial(T.int64(128), (ci_p_fused_0 * T.int64(256) + ci_p_fused_1) // T.int64(196))
                                    v_p = T.axis.spatial(T.int64(196), (ci_p_fused_0 * T.int64(256) + ci_p_fused_1) % T.int64(196))
                                    v_r_a, v_r_b = T.axis.remap("RR", [r_a, r_b])
                                    T.reads(data_pack_local[v_eps, v_nu, v_ci, v_p], input_tile_local[v_ci, v_p, v_r_a, v_r_b])
                                    T.writes(data_pack_local[v_eps, v_nu, v_ci, v_p])
                                    T.block_attr({"schedule_rule": "conv2d_nchw_winograd_data_pack"})
                                    data_pack_local[v_eps, v_nu, v_ci, v_p] = data_pack_local[v_eps, v_nu, v_ci, v_p] + input_tile_local[v_ci, v_p, v_r_a, v_r_b] * T.Select(v_r_a % T.int64(6) == T.int64(5) and v_eps % T.int64(6) == T.int64(5), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(5) and v_eps % T.int64(6) == T.int64(4), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(5) and v_eps % T.int64(6) == T.int64(3), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(5) and v_eps % T.int64(6) == T.int64(2), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(5) and v_eps % T.int64(6) == T.int64(1), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(5) and v_eps % T.int64(6) == T.int64(0), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(4) and v_eps % T.int64(6) == T.int64(5), T.float32(1.5), T.Select(v_r_a % T.int64(6) == T.int64(4) and v_eps % T.int64(6) == T.int64(4), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(4) and v_eps % T.int64(6) == T.int64(3), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(4) and v_eps % T.int64(6) == T.int64(2), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(4) and v_eps % T.int64(6) == T.int64(1), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(4) and v_eps % T.int64(6) == T.int64(0), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(3) and v_eps % T.int64(6) == T.int64(5), T.float32(-2), T.Select(v_r_a % T.int64(6) == T.int64(3) and v_eps % T.int64(6) == T.int64(4), T.float32(-0.5), T.Select(v_r_a % T.int64(6) == T.int64(3) and v_eps % T.int64(6) == T.int64(3), T.float32(2), T.Select(v_r_a % T.int64(6) == T.int64(3) and v_eps % T.int64(6) == T.int64(2), T.float32(2.5), T.Select(v_r_a % T.int64(6) == T.int64(3) and v_eps % T.int64(6) == T.int64(1), T.float32(0.5), T.Select(v_r_a % T.int64(6) == T.int64(3) and v_eps % T.int64(6) == T.int64(0), T.float32(1.5), T.Select(v_r_a % T.int64(6) == T.int64(2) and v_eps % T.int64(6) == T.int64(5), T.float32(-1.5), T.Select(v_r_a % T.int64(6) == T.int64(2) and v_eps % T.int64(6) == T.int64(4), T.float32(-1), T.Select(v_r_a % T.int64(6) == T.int64(2) and v_eps % T.int64(6) == T.int64(3), T.float32(-1), T.Select(v_r_a % T.int64(6) == T.int64(2) and v_eps % T.int64(6) == T.int64(2), T.float32(0.5), T.Select(v_r_a % T.int64(6) == T.int64(2) and v_eps % T.int64(6) == T.int64(1), T.float32(-2.5), T.Select(v_r_a % T.int64(6) == T.int64(2) and v_eps % T.int64(6) == T.int64(0), T.float32(-2), T.Select(v_r_a % T.int64(6) == T.int64(1) and v_eps % T.int64(6) == T.int64(5), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(1) and v_eps % T.int64(6) == T.int64(4), T.float32(0.5), T.Select(v_r_a % T.int64(6) == T.int64(1) and v_eps % T.int64(6) == T.int64(3), T.float32(-2), T.Select(v_r_a % T.int64(6) == T.int64(1) and v_eps % T.int64(6) == T.int64(2), T.float32(-1), T.Select(v_r_a % T.int64(6) == T.int64(1) and v_eps % T.int64(6) == T.int64(1), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(1) and v_eps % T.int64(6) == T.int64(0), T.float32(-1.5), T.Select(v_r_a % T.int64(6) == T.int64(0) and v_eps % T.int64(6) == T.int64(5), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(0) and v_eps % T.int64(6) == T.int64(4), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(0) and v_eps % T.int64(6) == T.int64(3), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(0) and v_eps % T.int64(6) == T.int64(2), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(0) and v_eps % T.int64(6) == T.int64(1), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(0) and v_eps % T.int64(6) == T.int64(0), T.float32(1), T.float32(0))))))))))))))))))))))))))))))))))))) * T.Select(v_r_b % T.int64(6) == T.int64(5) and v_nu % T.int64(6) == T.int64(5), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(5) and v_nu % T.int64(6) == T.int64(4), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(5) and v_nu % T.int64(6) == T.int64(3), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(5) and v_nu % T.int64(6) == T.int64(2), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(5) and v_nu % T.int64(6) == T.int64(1), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(5) and v_nu % T.int64(6) == T.int64(0), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(4) and v_nu % T.int64(6) == T.int64(5), T.float32(1.5), T.Select(v_r_b % T.int64(6) == T.int64(4) and v_nu % T.int64(6) == T.int64(4), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(4) and v_nu % T.int64(6) == T.int64(3), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(4) and v_nu % T.int64(6) == T.int64(2), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(4) and v_nu % T.int64(6) == T.int64(1), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(4) and v_nu % T.int64(6) == T.int64(0), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(3) and v_nu % T.int64(6) == T.int64(5), T.float32(-2), T.Select(v_r_b % T.int64(6) == T.int64(3) and v_nu % T.int64(6) == T.int64(4), T.float32(-0.5), T.Select(v_r_b % T.int64(6) == T.int64(3) and v_nu % T.int64(6) == T.int64(3), T.float32(2), T.Select(v_r_b % T.int64(6) == T.int64(3) and v_nu % T.int64(6) == T.int64(2), T.float32(2.5), T.Select(v_r_b % T.int64(6) == T.int64(3) and v_nu % T.int64(6) == T.int64(1), T.float32(0.5), T.Select(v_r_b % T.int64(6) == T.int64(3) and v_nu % T.int64(6) == T.int64(0), T.float32(1.5), T.Select(v_r_b % T.int64(6) == T.int64(2) and v_nu % T.int64(6) == T.int64(5), T.float32(-1.5), T.Select(v_r_b % T.int64(6) == T.int64(2) and v_nu % T.int64(6) == T.int64(4), T.float32(-1), T.Select(v_r_b % T.int64(6) == T.int64(2) and v_nu % T.int64(6) == T.int64(3), T.float32(-1), T.Select(v_r_b % T.int64(6) == T.int64(2) and v_nu % T.int64(6) == T.int64(2), T.float32(0.5), T.Select(v_r_b % T.int64(6) == T.int64(2) and v_nu % T.int64(6) == T.int64(1), T.float32(-2.5), T.Select(v_r_b % T.int64(6) == T.int64(2) and v_nu % T.int64(6) == T.int64(0), T.float32(-2), T.Select(v_r_b % T.int64(6) == T.int64(1) and v_nu % T.int64(6) == T.int64(5), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(1) and v_nu % T.int64(6) == T.int64(4), T.float32(0.5), T.Select(v_r_b % T.int64(6) == T.int64(1) and v_nu % T.int64(6) == T.int64(3), T.float32(-2), T.Select(v_r_b % T.int64(6) == T.int64(1) and v_nu % T.int64(6) == T.int64(2), T.float32(-1), T.Select(v_r_b % T.int64(6) == T.int64(1) and v_nu % T.int64(6) == T.int64(1), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(1) and v_nu % T.int64(6) == T.int64(0), T.float32(-1.5), T.Select(v_r_b % T.int64(6) == T.int64(0) and v_nu % T.int64(6) == T.int64(5), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(0) and v_nu % T.int64(6) == T.int64(4), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(0) and v_nu % T.int64(6) == T.int64(3), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(0) and v_nu % T.int64(6) == T.int64(2), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(0) and v_nu % T.int64(6) == T.int64(1), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(0) and v_nu % T.int64(6) == T.int64(0), T.float32(1), T.float32(0)))))))))))))))))))))))))))))))))))))
                for ax0, ax1, ax2, ax3 in T.grid(T.int64(6), T.int64(6), T.int64(1), T.int64(1)):
                    with T.block("data_pack_local"):
                        v0, v1 = T.axis.remap("SS", [ax0, ax1])
                        v2 = T.axis.spatial(T.int64(128), (ci_p_fused_0 * T.int64(256) + ci_p_fused_1) // T.int64(196) + ax2)
                        v3 = T.axis.spatial(T.int64(196), (ci_p_fused_0 * T.int64(60) + ci_p_fused_1) % T.int64(196) + ax3)
                        T.reads(data_pack_local[v0, v1, v2, v3])
                        T.writes(data_pack[v0, v1, v2, v3])
                        data_pack[v0, v1, v2, v3] = data_pack_local[v0, v1, v2, v3]
        for eps_0_nu_0_co_0_p_0_fused in T.thread_binding(T.int64(12), thread="blockIdx.x", annotations={"pragma_auto_unroll_max_step": 1024, "pragma_unroll_explicit": 1}):
            for eps_1_nu_1_co_1_p_1_fused in T.thread_binding(T.int64(7), thread="vthread.x"):
                for eps_2_nu_2_co_2_p_2_fused in T.thread_binding(T.int64(128), thread="threadIdx.x"):
                    for eps_3_init, nu_3_init, co_3_init, p_3_init, eps_4_init, nu_4_init, co_4_init, p_4_init in T.grid(T.int64(2), T.int64(1), T.int64(2), T.int64(2), T.int64(1), T.int64(3), T.int64(1), T.int64(7)):
                        with T.block("bgemm_init"):
                            v_eps = T.axis.spatial(T.int64(6), eps_0_nu_0_co_0_p_0_fused // T.int64(4) * T.int64(2) + eps_3_init + eps_4_init)
                            v_nu = T.axis.spatial(T.int64(6), eps_2_nu_2_co_2_p_2_fused // T.int64(64) * T.int64(3) + nu_3_init * T.int64(3) + nu_4_init)
                            v_co = T.axis.spatial(T.int64(256), eps_0_nu_0_co_0_p_0_fused % T.int64(4) // T.int64(2) * T.int64(128) + eps_2_nu_2_co_2_p_2_fused % T.int64(64) * T.int64(2) + co_3_init + co_4_init)
                            v_p = T.axis.spatial(T.int64(196), eps_0_nu_0_co_0_p_0_fused % T.int64(2) * T.int64(98) + eps_1_nu_1_co_1_p_1_fused * T.int64(14) + p_3_init * T.int64(7) + p_4_init)
                            T.reads()
                            T.writes(bgemm_local[v_eps, v_nu, v_co, v_p])
                            T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 32, "meta_schedule.tiling_structure": "SSSRRSRS"})
                            bgemm_local[v_eps, v_nu, v_co, v_p] = T.float32(0)
                    for ci_0_fused in T.serial(T.int64(128), annotations={"software_pipeline_async_stages": [0], "software_pipeline_order": [0, 1, 2], "software_pipeline_stage": [0, 0, 3]}):
                        for ax0_ax1_ax2_ax3_fused_0 in range(T.int64(3)):
                            for ax0_ax1_ax2_ax3_fused_1 in T.thread_binding(T.int64(128), thread="threadIdx.x"):
                                for ax0_ax1_ax2_ax3_fused_2 in T.vectorized(T.int64(4)):
                                    with T.block("data_pack_shared"):
                                        v0 = T.axis.spatial(T.int64(6), eps_0_nu_0_co_0_p_0_fused // T.int64(4) * T.int64(2) + (ax0_ax1_ax2_ax3_fused_0 * T.int64(512) + ax0_ax1_ax2_ax3_fused_1 * T.int64(4) + ax0_ax1_ax2_ax3_fused_2) // T.int64(588))
                                        v1 = T.axis.spatial(T.int64(6), (ax0_ax1_ax2_ax3_fused_0 * T.int64(512) + ax0_ax1_ax2_ax3_fused_1 * T.int64(4) + ax0_ax1_ax2_ax3_fused_2) % T.int64(588) // T.int64(98))
                                        v2 = T.axis.spatial(T.int64(128), ci_0_fused)
                                        v3 = T.axis.spatial(T.int64(196), eps_0_nu_0_co_0_p_0_fused % T.int64(2) * T.int64(98) + (ax0_ax1_ax2_ax3_fused_0 * T.int64(512) + ax0_ax1_ax2_ax3_fused_1 * T.int64(4) + ax0_ax1_ax2_ax3_fused_2) % T.int64(98))
                                        T.where((ax0_ax1_ax2_ax3_fused_0 * T.int64(128) + ax0_ax1_ax2_ax3_fused_1) * T.int64(4) + ax0_ax1_ax2_ax3_fused_2 < T.int64(1176))
                                        T.reads(data_pack[v0, v1, v2, v3])
                                        T.writes(data_pack_shared[v0, v1, v2, v3])
                                        data_pack_shared[v0, v1, v2, v3] = data_pack[v0, v1, v2, v3]
                        for ax0_ax1_ax2_ax3_fused_0 in range(T.int64(6)):
                            for ax0_ax1_ax2_ax3_fused_1 in T.thread_binding(T.int64(128), thread="threadIdx.x"):
                                for ax0_ax1_ax2_ax3_fused_2 in T.vectorized(T.int64(2)):
                                    with T.block("p1_shared"):
                                        v0 = T.axis.spatial(T.int64(6), eps_0_nu_0_co_0_p_0_fused // T.int64(4) * T.int64(2) + (ax0_ax1_ax2_ax3_fused_0 * T.int64(256) + ax0_ax1_ax2_ax3_fused_1 * T.int64(2) + ax0_ax1_ax2_ax3_fused_2) // T.int64(768))
                                        v1 = T.axis.spatial(T.int64(6), (ax0_ax1_ax2_ax3_fused_0 * T.int64(256) + ax0_ax1_ax2_ax3_fused_1 * T.int64(2) + ax0_ax1_ax2_ax3_fused_2) % T.int64(768) // T.int64(128))
                                        v2 = T.axis.spatial(T.int64(128), ci_0_fused)
                                        v3 = T.axis.spatial(T.int64(256), eps_0_nu_0_co_0_p_0_fused % T.int64(4) // T.int64(2) * T.int64(128) + (ax0_ax1_ax2_ax3_fused_0 * T.int64(256) + ax0_ax1_ax2_ax3_fused_1 * T.int64(2) + ax0_ax1_ax2_ax3_fused_2) % T.int64(128))
                                        T.reads(p1[v0, v1, v2, v3])
                                        T.writes(p1_shared[v0, v1, v2, v3])
                                        p1_shared[v0, v1, v2, v3] = p1[v0, v1, v2, v3]
                        for ci_1, eps_3, nu_3, co_3, p_3, ci_2, eps_4, nu_4, co_4, p_4 in T.grid(T.int64(1), T.int64(2), T.int64(1), T.int64(2), T.int64(2), T.int64(1), T.int64(1), T.int64(3), T.int64(1), T.int64(7)):
                            with T.block("bgemm_update"):
                                v_eps = T.axis.spatial(T.int64(6), eps_0_nu_0_co_0_p_0_fused // T.int64(4) * T.int64(2) + eps_3 + eps_4)
                                v_nu = T.axis.spatial(T.int64(6), eps_2_nu_2_co_2_p_2_fused // T.int64(64) * T.int64(3) + nu_3 * T.int64(3) + nu_4)
                                v_co = T.axis.spatial(T.int64(256), eps_0_nu_0_co_0_p_0_fused % T.int64(4) // T.int64(2) * T.int64(128) + eps_2_nu_2_co_2_p_2_fused % T.int64(64) * T.int64(2) + co_3 + co_4)
                                v_p = T.axis.spatial(T.int64(196), eps_0_nu_0_co_0_p_0_fused % T.int64(2) * T.int64(98) + eps_1_nu_1_co_1_p_1_fused * T.int64(14) + p_3 * T.int64(7) + p_4)
                                v_ci = T.axis.reduce(T.int64(128), ci_0_fused + ci_1 + ci_2)
                                T.reads(bgemm_local[v_eps, v_nu, v_co, v_p], data_pack_shared[v_eps, v_nu, v_ci, v_p], p1_shared[v_eps, v_nu, v_ci, v_co])
                                T.writes(bgemm_local[v_eps, v_nu, v_co, v_p])
                                T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 32, "meta_schedule.tiling_structure": "SSSRRSRS"})
                                bgemm_local[v_eps, v_nu, v_co, v_p] = bgemm_local[v_eps, v_nu, v_co, v_p] + data_pack_shared[v_eps, v_nu, v_ci, v_p] * p1_shared[v_eps, v_nu, v_ci, v_co]
                    for ax0, ax1, ax2, ax3 in T.grid(T.int64(2), T.int64(3), T.int64(2), T.int64(14)):
                        with T.block("bgemm_local"):
                            v0 = T.axis.spatial(T.int64(6), eps_0_nu_0_co_0_p_0_fused // T.int64(4) * T.int64(2) + ax0)
                            v1 = T.axis.spatial(T.int64(6), eps_2_nu_2_co_2_p_2_fused // T.int64(64) * T.int64(3) + ax1)
                            v2 = T.axis.spatial(T.int64(256), eps_0_nu_0_co_0_p_0_fused % T.int64(4) // T.int64(2) * T.int64(128) + eps_2_nu_2_co_2_p_2_fused % T.int64(64) * T.int64(2) + ax2)
                            v3 = T.axis.spatial(T.int64(196), eps_0_nu_0_co_0_p_0_fused % T.int64(2) * T.int64(98) + eps_1_nu_1_co_1_p_1_fused * T.int64(14) + ax3)
                            T.reads(bgemm_local[v0, v1, v2, v3])
                            T.writes(bgemm[v0, v1, v2, v3])
                            bgemm[v0, v1, v2, v3] = bgemm_local[v0, v1, v2, v3]
        for n_co_h_0_w_0_fused_0 in T.thread_binding(T.int64(784), thread="blockIdx.x", annotations={"pragma_auto_unroll_max_step": 1024, "pragma_unroll_explicit": 1}):
            for n_co_h_0_w_0_fused_1 in T.thread_binding(T.int64(64), thread="threadIdx.x"):
                for ax0, ax1 in T.grid(T.int64(1), T.int64(1)):
                    for ax2 in T.unroll(T.int64(4)):
                        for ax3 in T.unroll(T.int64(4)):
                            with T.block("inverse_init"):
                                v_co = T.axis.spatial(T.int64(256), (n_co_h_0_w_0_fused_0 * T.int64(64) + n_co_h_0_w_0_fused_1) // T.int64(196) + ax0)
                                v_p = T.axis.spatial(T.int64(196), (n_co_h_0_w_0_fused_0 * T.int64(64) + n_co_h_0_w_0_fused_1) % T.int64(196) + ax1)
                                v_vh, v_vw = T.axis.remap("SS", [ax2, ax3])
                                T.reads()
                                T.writes(inverse_local[v_co, v_p, v_vh, v_vw])
                                T.block_attr({"schedule_rule": "conv2d_nchw_winograd_inverse"})
                                inverse_local[v_co, v_p, v_vh, v_vw] = T.float32(0)
                            for ax4 in T.unroll(T.int64(6)):
                                for ax5 in T.unroll(T.int64(6)):
                                    with T.block("inverse_update"):
                                        v_co = T.axis.spatial(T.int64(256), (n_co_h_0_w_0_fused_0 * T.int64(64) + n_co_h_0_w_0_fused_1) // T.int64(196) + ax0)
                                        v_p = T.axis.spatial(T.int64(196), (n_co_h_0_w_0_fused_0 * T.int64(64) + n_co_h_0_w_0_fused_1) % T.int64(196) + ax1)
                                        v_vh, v_vw, v_r_a, v_r_b = T.axis.remap("SSRR", [ax2, ax3, ax4, ax5])
                                        T.reads(inverse_local[v_co, v_p, v_vh, v_vw], bgemm[v_r_a, v_r_b, v_co, v_p])
                                        T.writes(inverse_local[v_co, v_p, v_vh, v_vw])
                                        T.block_attr({"schedule_rule": "conv2d_nchw_winograd_inverse"})
                                        inverse_local[v_co, v_p, v_vh, v_vw] = inverse_local[v_co, v_p, v_vh, v_vw] + bgemm[v_r_a, v_r_b, v_co, v_p] * T.Select(v_r_a % T.int64(6) == T.int64(5) and v_vh % T.int64(4) == T.int64(3), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(5) and v_vh % T.int64(4) == T.int64(2), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(5) and v_vh % T.int64(4) == T.int64(1), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(5) and v_vh % T.int64(4) == T.int64(0), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(4) and v_vh % T.int64(4) == T.int64(3), T.float32(-8), T.Select(v_r_a % T.int64(6) == T.int64(4) and v_vh % T.int64(4) == T.int64(2), T.float32(4), T.Select(v_r_a % T.int64(6) == T.int64(4) and v_vh % T.int64(4) == T.int64(1), T.float32(-2), T.Select(v_r_a % T.int64(6) == T.int64(4) and v_vh % T.int64(4) == T.int64(0), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(3) and v_vh % T.int64(4) == T.int64(3), T.float32(0.125), T.Select(v_r_a % T.int64(6) == T.int64(3) and v_vh % T.int64(4) == T.int64(2), T.float32(0.25), T.Select(v_r_a % T.int64(6) == T.int64(3) and v_vh % T.int64(4) == T.int64(1), T.float32(0.5), T.Select(v_r_a % T.int64(6) == T.int64(3) and v_vh % T.int64(4) == T.int64(0), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(2) and v_vh % T.int64(4) == T.int64(3), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(2) and v_vh % T.int64(4) == T.int64(2), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(2) and v_vh % T.int64(4) == T.int64(1), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(2) and v_vh % T.int64(4) == T.int64(0), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(1) and v_vh % T.int64(4) == T.int64(3), T.float32(-1), T.Select(v_r_a % T.int64(6) == T.int64(1) and v_vh % T.int64(4) == T.int64(2), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(1) and v_vh % T.int64(4) == T.int64(1), T.float32(-1), T.Select(v_r_a % T.int64(6) == T.int64(1) and v_vh % T.int64(4) == T.int64(0), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(0) and v_vh % T.int64(4) == T.int64(3), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(0) and v_vh % T.int64(4) == T.int64(2), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(0) and v_vh % T.int64(4) == T.int64(1), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(0) and v_vh % T.int64(4) == T.int64(0), T.float32(1), T.float32(0))))))))))))))))))))))))) * T.Select(v_r_b % T.int64(6) == T.int64(5) and v_vw % T.int64(4) == T.int64(3), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(5) and v_vw % T.int64(4) == T.int64(2), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(5) and v_vw % T.int64(4) == T.int64(1), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(5) and v_vw % T.int64(4) == T.int64(0), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(4) and v_vw % T.int64(4) == T.int64(3), T.float32(-8), T.Select(v_r_b % T.int64(6) == T.int64(4) and v_vw % T.int64(4) == T.int64(2), T.float32(4), T.Select(v_r_b % T.int64(6) == T.int64(4) and v_vw % T.int64(4) == T.int64(1), T.float32(-2), T.Select(v_r_b % T.int64(6) == T.int64(4) and v_vw % T.int64(4) == T.int64(0), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(3) and v_vw % T.int64(4) == T.int64(3), T.float32(0.125), T.Select(v_r_b % T.int64(6) == T.int64(3) and v_vw % T.int64(4) == T.int64(2), T.float32(0.25), T.Select(v_r_b % T.int64(6) == T.int64(3) and v_vw % T.int64(4) == T.int64(1), T.float32(0.5), T.Select(v_r_b % T.int64(6) == T.int64(3) and v_vw % T.int64(4) == T.int64(0), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(2) and v_vw % T.int64(4) == T.int64(3), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(2) and v_vw % T.int64(4) == T.int64(2), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(2) and v_vw % T.int64(4) == T.int64(1), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(2) and v_vw % T.int64(4) == T.int64(0), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(1) and v_vw % T.int64(4) == T.int64(3), T.float32(-1), T.Select(v_r_b % T.int64(6) == T.int64(1) and v_vw % T.int64(4) == T.int64(2), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(1) and v_vw % T.int64(4) == T.int64(1), T.float32(-1), T.Select(v_r_b % T.int64(6) == T.int64(1) and v_vw % T.int64(4) == T.int64(0), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(0) and v_vw % T.int64(4) == T.int64(3), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(0) and v_vw % T.int64(4) == T.int64(2), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(0) and v_vw % T.int64(4) == T.int64(1), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(0) and v_vw % T.int64(4) == T.int64(0), T.float32(1), T.float32(0)))))))))))))))))))))))))
                for h_1, w_1 in T.grid(T.int64(4), T.int64(4)):
                    with T.block("conv2d_winograd"):
                        v_n = T.axis.spatial(T.int64(1), T.int64(0))
                        v_co = T.axis.spatial(T.int64(256), (n_co_h_0_w_0_fused_0 * T.int64(64) + n_co_h_0_w_0_fused_1) // T.int64(196))
                        v_h = T.axis.spatial(T.int64(56), (n_co_h_0_w_0_fused_0 * T.int64(64) + n_co_h_0_w_0_fused_1) % T.int64(196) // T.int64(14) * T.int64(4) + h_1)
                        v_w = T.axis.spatial(T.int64(56), (n_co_h_0_w_0_fused_0 * T.int64(64) + n_co_h_0_w_0_fused_1) % T.int64(14) * T.int64(4) + w_1)
                        T.reads(inverse_local[v_co, v_n * T.int64(196) + v_h // T.int64(4) * T.int64(14) + v_w // T.int64(4), v_h % T.int64(4), v_w % T.int64(4)], p2[v_n, v_co, T.int64(0), T.int64(0)])
                        T.writes(T_relu[v_n, v_co, v_h, v_w])
                        T_relu[v_n, v_co, v_h, v_w] = T.max(inverse_local[v_co, v_n * T.int64(196) + v_h // T.int64(4) * T.int64(14) + v_w // T.int64(4), v_h % T.int64(4), v_w % T.int64(4)] + p2[v_n, v_co, T.int64(0), T.int64(0)], T.float32(0))
b0 = sch.get_block(name="data_pack", func_name="main")
b1 = sch.get_block(name="bgemm", func_name="main")
b2 = sch.get_block(name="inverse", func_name="main")
b3 = sch.get_block(name="conv2d_winograd", func_name="main")
b4 = sch.get_block(name="T_add", func_name="main")
b5 = sch.get_block(name="T_relu", func_name="main")
b6 = sch.get_block(name="root", func_name="main")
b7, b8 = sch.get_producers(block=b2)
sch.compute_inline(block=b8)
b9, = sch.get_consumers(block=b2)
l10, l11, l12, l13 = sch.get_loops(block=b9)
l14, l15 = sch.split(loop=l12, factors=[None, 4], preserve_unit_iters=True)
l16, l17 = sch.split(loop=l13, factors=[None, 4], preserve_unit_iters=True)
sch.reorder(l14, l16, l15, l17)
sch.compute_at(block=b2, loop=l16, preserve_unit_loops=True, index=-1)
sch.set_scope(block=b2, buffer_index=0, storage_scope="local")
l18, l19, l20, l21, l22, l23, l24, l25, l26, l27 = sch.get_loops(block=b2)
sch.unroll(loop=l24)
sch.unroll(loop=l25)
sch.unroll(loop=l26)
sch.unroll(loop=l27)
b28, b29 = sch.get_producers(block=b0)
sch.compute_inline(block=b29)
b30, = sch.get_producers(block=b28)
l31, l32, l33, l34, l35, l36 = sch.get_loops(block=b0)
sch.reorder(l33, l34, l31, l32, l35, l36)
sch.unroll(loop=l31)
sch.unroll(loop=l32)
sch.unroll(loop=l35)
sch.unroll(loop=l36)
l37 = sch.fuse(l33, l34, preserve_unit_iters=True)
v38 = sch.sample_categorical(candidates=[32, 64, 128, 256, 512, 1024], probs=[0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666], decision=3)
l39, l40 = sch.split(loop=l37, factors=[None, v38], preserve_unit_iters=True)
sch.bind(loop=l39, thread_axis="blockIdx.x")
sch.bind(loop=l40, thread_axis="threadIdx.x")
b41 = sch.cache_write(block=b0, write_buffer_index=0, storage_scope="local")
sch.reverse_compute_at(block=b41, loop=l40, preserve_unit_loops=True, index=-1)
sch.compute_at(block=b28, loop=l40, preserve_unit_loops=True, index=-1)
sch.set_scope(block=b28, buffer_index=0, storage_scope="local")
sch.compute_inline(block=b30)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSSRRSRS")
l42, l43, l44, l45, l46 = sch.get_loops(block=b1)
v47, v48, v49, v50, v51 = sch.sample_perfect_tile(loop=l42, n=5, max_innermost_factor=64, decision=[3, 1, 1, 2, 1])
l52, l53, l54, l55, l56 = sch.split(loop=l42, factors=[v47, v48, v49, v50, v51], preserve_unit_iters=True)
v57, v58, v59, v60, v61 = sch.sample_perfect_tile(loop=l43, n=5, max_innermost_factor=64, decision=[1, 1, 2, 1, 3])
l62, l63, l64, l65, l66 = sch.split(loop=l43, factors=[v57, v58, v59, v60, v61], preserve_unit_iters=True)
v67, v68, v69, v70, v71 = sch.sample_perfect_tile(loop=l44, n=5, max_innermost_factor=64, decision=[2, 1, 64, 2, 1])
l72, l73, l74, l75, l76 = sch.split(loop=l44, factors=[v67, v68, v69, v70, v71], preserve_unit_iters=True)
v77, v78, v79, v80, v81 = sch.sample_perfect_tile(loop=l45, n=5, max_innermost_factor=64, decision=[2, 7, 1, 2, 7])
l82, l83, l84, l85, l86 = sch.split(loop=l45, factors=[v77, v78, v79, v80, v81], preserve_unit_iters=True)
v87, v88, v89 = sch.sample_perfect_tile(loop=l46, n=3, max_innermost_factor=64, decision=[128, 1, 1])
l90, l91, l92 = sch.split(loop=l46, factors=[v87, v88, v89], preserve_unit_iters=True)
sch.reorder(l52, l62, l72, l82, l53, l63, l73, l83, l54, l64, l74, l84, l90, l91, l55, l65, l75, l85, l92, l56, l66, l76, l86)
l93 = sch.fuse(l52, l62, l72, l82, preserve_unit_iters=True)
sch.bind(loop=l93, thread_axis="blockIdx.x")
l94 = sch.fuse(l53, l63, l73, l83, preserve_unit_iters=True)
sch.bind(loop=l94, thread_axis="vthread.x")
l95 = sch.fuse(l54, l64, l74, l84, preserve_unit_iters=True)
sch.bind(loop=l95, thread_axis="threadIdx.x")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_low_inclusive", ann_val=32)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_high_inclusive", ann_val=1024)
b96 = sch.cache_write(block=b1, write_buffer_index=0, storage_scope="local")
sch.reverse_compute_at(block=b96, loop=l95, preserve_unit_loops=True, index=-1)
b97 = sch.cache_read(block=b1, read_buffer_index=0, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b97, loop=l90, preserve_unit_loops=True, index=-1)
l98, l99, l100, l101, l102, l103, l104, l105 = sch.get_loops(block=b97)
l106 = sch.fuse(l102, l103, l104, l105, preserve_unit_iters=True)
v107 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b97, ann_key="meta_schedule.cooperative_fetch", ann_val=v107)
b108 = sch.cache_read(block=b1, read_buffer_index=1, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b108, loop=l90, preserve_unit_loops=True, index=-1)
l109, l110, l111, l112, l113, l114, l115, l116 = sch.get_loops(block=b108)
l117 = sch.fuse(l113, l114, l115, l116, preserve_unit_iters=True)
v118 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=1)
sch.annotate(block_or_loop=b108, ann_key="meta_schedule.cooperative_fetch", ann_val=v118)
l119 = sch.fuse(l90, preserve_unit_iters=True)
sch.annotate(block_or_loop=l119, ann_key="software_pipeline_stage", ann_val=[0, 0, 3])
sch.annotate(block_or_loop=l119, ann_key="software_pipeline_order", ann_val=[0, 1, 2])
sch.annotate(block_or_loop=l119, ann_key="software_pipeline_async_stages", ann_val=[0])
sch.reverse_compute_inline(block=b5)
sch.reverse_compute_inline(block=b4)
v120 = sch.sample_categorical(candidates=[0, 16, 64, 512, 1024], probs=[0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001], decision=4)
sch.annotate(block_or_loop=b6, ann_key="meta_schedule.unroll_explicit", ann_val=v120)
l121, l122, l123, l124, l125, l126 = sch.get_loops(block=b3)
l127 = sch.fuse(l121, l122, l123, l124, preserve_unit_iters=True)
v128 = sch.sample_categorical(candidates=[32, 64, 128, 256, 512, 1024], probs=[0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666], decision=1)
l129, l130 = sch.split(loop=l127, factors=[None, v128], preserve_unit_iters=True)
sch.bind(loop=l129, thread_axis="blockIdx.x")
sch.bind(loop=l130, thread_axis="threadIdx.x")
sch.enter_postproc()
sch.unannotate(block_or_loop=b97, ann_key="meta_schedule.cooperative_fetch")
l131, l132, l133, l134, l135 = sch.get_loops(block=b97)
l136, l137, l138 = sch.split(loop=l135, factors=[None, 128, 4], preserve_unit_iters=True)
sch.vectorize(loop=l138)
sch.bind(loop=l137, thread_axis="threadIdx.x")
sch.unannotate(block_or_loop=b108, ann_key="meta_schedule.cooperative_fetch")
l139, l140, l141, l142, l143 = sch.get_loops(block=b108)
l144, l145, l146 = sch.split(loop=l143, factors=[None, 128, 2], preserve_unit_iters=True)
sch.vectorize(loop=l146)
sch.bind(loop=l145, thread_axis="threadIdx.x")
b147 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b147, ann_key="meta_schedule.unroll_explicit")
b148, b149, b150, b151, b152, b153, b154, b155, b156 = sch.get_child_blocks(b147)
l157, l158, l159, l160, l161, l162 = sch.get_loops(block=b148)
l163, l164, l165, l166, l167, l168 = sch.get_loops(block=b149)
sch.annotate(block_or_loop=l163, ann_key="pragma_auto_unroll_max_step", ann_val=1024)
sch.annotate(block_or_loop=l163, ann_key="pragma_unroll_explicit", ann_val=1)
l169, l170, l171, l172, l173, l174 = sch.get_loops(block=b150)
l175, l176, l177, l178, l179, l180, l181 = sch.get_loops(block=b151)
l182, l183, l184, l185, l186, l187, l188 = sch.get_loops(block=b152)
l189, l190, l191, l192, l193, l194, l195, l196, l197, l198, l199, l200, l201, l202 = sch.get_loops(block=b153)
sch.annotate(block_or_loop=l189, ann_key="pragma_auto_unroll_max_step", ann_val=1024)
sch.annotate(block_or_loop=l189, ann_key="pragma_unroll_explicit", ann_val=1)
l203, l204, l205, l206, l207, l208, l209 = sch.get_loops(block=b154)
l210, l211, l212, l213, l214, l215, l216, l217 = sch.get_loops(block=b155)
sch.annotate(block_or_loop=l210, ann_key="pragma_auto_unroll_max_step", ann_val=1024)
sch.annotate(block_or_loop=l210, ann_key="pragma_unroll_explicit", ann_val=1)
l218, l219, l220, l221 = sch.get_loops(block=b156)
b222 = sch.get_block(name="data_pack", func_name="main")
l223, l224, l225, l226, l227, l228 = sch.get_loops(block=b222)
b229 = sch.decompose_reduction(block=b222, loop=l227)
b230 = sch.get_block(name="bgemm", func_name="main")
l231, l232, l233, l234, l235, l236, l237, l238, l239, l240, l241, l242, l243, l244 = sch.get_loops(block=b230)
b245 = sch.decompose_reduction(block=b230, loop=l234)
b246 = sch.get_block(name="inverse", func_name="main")
l247, l248, l249, l250, l251, l252, l253, l254 = sch.get_loops(block=b246)
b255 = sch.decompose_reduction(block=b246, loop=l253)
2024-04-29 19:13:41 [INFO] [evolutionary_search.cc:713] Generating candidates......
2024-04-29 19:13:45 [INFO] [evolutionary_search.cc:715] Picked top 102 candidate(s) from database
2024-04-29 19:13:52 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x74b5608)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0xb541318)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0xb52be28)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x4d66e18)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x51036c8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0xb4c2bb8)]: 401 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0xb549488)]: 0 failure(s)
2024-04-29 19:13:59 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x74b5608)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0xb541318)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0xb52be28)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x4d66e18)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x51036c8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0xb4c2bb8)]: 803 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0xb549488)]: 0 failure(s)
2024-04-29 19:14:06 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x74b5608)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0xb541318)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0xb52be28)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x4d66e18)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x51036c8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0xb4c2bb8)]: 1203 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0xb549488)]: 0 failure(s)
2024-04-29 19:14:14 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x74b5608)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0xb541318)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0xb52be28)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x4d66e18)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x51036c8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0xb4c2bb8)]: 1603 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0xb549488)]: 0 failure(s)
2024-04-29 19:14:21 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x74b5608)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0xb541318)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0xb52be28)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x4d66e18)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x51036c8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0xb4c2bb8)]: 2008 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0xb549488)]: 0 failure(s)
2024-04-29 19:14:28 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x74b5608)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0xb541318)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0xb52be28)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x4d66e18)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x51036c8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0xb4c2bb8)]: 2406 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0xb549488)]: 0 failure(s)
2024-04-29 19:14:28 [INFO] [evolutionary_search.cc:723] Sampled 54 candidate(s)
2024-04-29 19:14:49 [INFO] [evolutionary_search.cc:621] Evolve iter #0 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x74b5608)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0xb541318)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0xb52be28)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x4d66e18)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x51036c8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0xb4c2bb8)]: 113 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0xb549488)]: 0 failure(s)
2024-04-29 19:15:12 [INFO] [evolutionary_search.cc:621] Evolve iter #1 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x74b5608)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0xb541318)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0xb52be28)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x4d66e18)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x51036c8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0xb4c2bb8)]: 89 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0xb549488)]: 0 failure(s)
2024-04-29 19:15:35 [INFO] [evolutionary_search.cc:621] Evolve iter #2 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x74b5608)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0xb541318)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0xb52be28)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x4d66e18)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x51036c8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0xb4c2bb8)]: 85 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0xb549488)]: 0 failure(s)
2024-04-29 19:15:57 [INFO] [evolutionary_search.cc:621] Evolve iter #3 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x74b5608)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0xb541318)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0xb52be28)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x4d66e18)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x51036c8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0xb4c2bb8)]: 71 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0xb549488)]: 0 failure(s)
2024-04-29 19:16:03 [INFO] [evolutionary_search.cc:649] Scores of the best 64 candidates:
[1 : 16]:	1.0276  1.0128  1.0120  1.0023  0.9955  0.9921  0.9894  0.9885  0.9864  0.9855  0.9767  0.9761  0.9752  0.9735  0.9719  0.9701
[17 : 32]:	0.9676  0.9660  0.9649  0.9632  0.9625  0.9600  0.9572  0.9548  0.9499  0.9498  0.9498  0.9450  0.9427  0.9403  0.9372  0.9348
[33 : 48]:	0.9338  0.9314  0.9306  0.9295  0.9293  0.9274  0.9266  0.9257  0.9257  0.9246  0.9179  0.9170  0.9166  0.9157  0.9149  0.9143
[49 : 64]:	0.9141  0.9133  0.9133  0.9131  0.9122  0.9122  0.9097  0.9097  0.9097  0.9097  0.9044  0.9021  0.9020  0.9019  0.9015  0.9015
2024-04-29 19:16:03 [INFO] [evolutionary_search.cc:727] Got 64 candidate(s) with evolutionary search
2024-04-29 19:16:03 [INFO] [evolutionary_search.cc:730] Sending 64 candidates(s) for measurement
2024-04-29 19:17:22 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_4] Trial #129: GFLOPs: 6227.6809. Time: 104.0956 us. Best GFLOPs: 7245.5510
2024-04-29 19:17:22 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_4] Trial #130: GFLOPs: 6444.6488. Time: 100.5910 us. Best GFLOPs: 7245.5510
2024-04-29 19:17:22 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_4] Trial #131: GFLOPs: 7299.4046. Time: 88.8119 us. Best GFLOPs: 7299.4046
2024-04-29 19:17:22 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_4] Trial #132: GFLOPs: 6387.1162. Time: 101.4971 us. Best GFLOPs: 7299.4046
2024-04-29 19:17:22 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_4] Trial #133: GFLOPs: 6306.8870. Time: 102.7883 us. Best GFLOPs: 7299.4046
2024-04-29 19:17:22 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_4] Trial #134: GFLOPs: 7259.2326. Time: 89.3034 us. Best GFLOPs: 7299.4046
2024-04-29 19:17:22 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_4] Trial #135: GFLOPs: 7186.2628. Time: 90.2102 us. Best GFLOPs: 7299.4046
2024-04-29 19:17:22 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_4] Trial #136: GFLOPs: 7171.3029. Time: 90.3983 us. Best GFLOPs: 7299.4046
2024-04-29 19:17:22 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_4] Trial #137: GFLOPs: 7254.1594. Time: 89.3658 us. Best GFLOPs: 7299.4046
2024-04-29 19:17:22 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_4] Trial #138: GFLOPs: 7374.7990. Time: 87.9039 us. Best GFLOPs: 7374.7990
2024-04-29 19:17:22 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_4] Trial #139: GFLOPs: 6955.2768. Time: 93.2061 us. Best GFLOPs: 7374.7990
2024-04-29 19:17:22 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_4] Trial #140: GFLOPs: 7264.3249. Time: 89.2408 us. Best GFLOPs: 7374.7990
2024-04-29 19:17:22 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_4] Trial #141: GFLOPs: 7755.5080. Time: 83.5888 us. Best GFLOPs: 7755.5080
2024-04-29 19:17:22 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_4] Trial #142: GFLOPs: 7199.8958. Time: 90.0393 us. Best GFLOPs: 7755.5080
2024-04-29 19:17:22 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_4] Trial #143: GFLOPs: 7316.8880. Time: 88.5997 us. Best GFLOPs: 7755.5080
2024-04-29 19:17:22 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_4] Trial #144: GFLOPs: 7186.0306. Time: 90.2131 us. Best GFLOPs: 7755.5080
2024-04-29 19:17:22 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_4] Trial #145: GFLOPs: 7273.2303. Time: 89.1315 us. Best GFLOPs: 7755.5080
2024-04-29 19:17:22 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_4] Trial #146: GFLOPs: 7375.4886. Time: 87.8957 us. Best GFLOPs: 7755.5080
2024-04-29 19:17:22 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_4] Trial #147: GFLOPs: 5832.8922. Time: 111.1411 us. Best GFLOPs: 7755.5080
2024-04-29 19:17:22 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_4] Trial #148: GFLOPs: 6809.1300. Time: 95.2066 us. Best GFLOPs: 7755.5080
2024-04-29 19:17:22 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_4] Trial #149: GFLOPs: 6184.3228. Time: 104.8254 us. Best GFLOPs: 7755.5080
2024-04-29 19:17:22 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_4] Trial #150: GFLOPs: 5614.1635. Time: 115.4712 us. Best GFLOPs: 7755.5080
2024-04-29 19:17:22 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_4] Trial #151: GFLOPs: 6238.9831. Time: 103.9070 us. Best GFLOPs: 7755.5080
2024-04-29 19:17:22 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_4] Trial #152: GFLOPs: 6992.7145. Time: 92.7070 us. Best GFLOPs: 7755.5080
2024-04-29 19:17:22 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_4] Trial #153: GFLOPs: 7218.4275. Time: 89.8082 us. Best GFLOPs: 7755.5080
2024-04-29 19:17:22 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_4] Trial #154: GFLOPs: 7569.9703. Time: 85.6376 us. Best GFLOPs: 7755.5080
2024-04-29 19:17:22 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_4] Trial #155: GFLOPs: 7570.6999. Time: 85.6293 us. Best GFLOPs: 7755.5080
2024-04-29 19:17:22 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_4] Trial #156: GFLOPs: 7329.3295. Time: 88.4493 us. Best GFLOPs: 7755.5080
2024-04-29 19:17:22 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_4] Trial #157: GFLOPs: 5701.3717. Time: 113.7049 us. Best GFLOPs: 7755.5080
2024-04-29 19:17:22 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_4] Trial #158: GFLOPs: 6706.3301. Time: 96.6660 us. Best GFLOPs: 7755.5080
2024-04-29 19:17:22 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_4] Trial #159: GFLOPs: 7408.0925. Time: 87.5089 us. Best GFLOPs: 7755.5080
2024-04-29 19:17:22 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_4] Trial #160: GFLOPs: 7581.4318. Time: 85.5081 us. Best GFLOPs: 7755.5080
2024-04-29 19:17:22 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_4] Trial #161: GFLOPs: 6270.0010. Time: 103.3930 us. Best GFLOPs: 7755.5080
2024-04-29 19:17:22 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_4] Trial #162: GFLOPs: 7272.7766. Time: 89.1371 us. Best GFLOPs: 7755.5080
2024-04-29 19:17:22 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_4] Trial #163: GFLOPs: 5575.4929. Time: 116.2720 us. Best GFLOPs: 7755.5080
2024-04-29 19:17:22 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_4] Trial #164: GFLOPs: 6933.7958. Time: 93.4948 us. Best GFLOPs: 7755.5080
2024-04-29 19:17:22 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_4] Trial #165: GFLOPs: 5567.2558. Time: 116.4441 us. Best GFLOPs: 7755.5080
2024-04-29 19:17:22 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_4] Trial #166: GFLOPs: 2586.6395. Time: 250.6240 us. Best GFLOPs: 7755.5080
2024-04-29 19:17:22 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_4] Trial #167: GFLOPs: 5551.3498. Time: 116.7777 us. Best GFLOPs: 7755.5080
2024-04-29 19:17:22 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_4] Trial #168: GFLOPs: 6999.6114. Time: 92.6157 us. Best GFLOPs: 7755.5080
2024-04-29 19:17:22 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_4] Trial #169: GFLOPs: 2066.1585. Time: 313.7581 us. Best GFLOPs: 7755.5080
2024-04-29 19:17:22 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_4] Trial #170: GFLOPs: 6766.8983. Time: 95.8007 us. Best GFLOPs: 7755.5080
2024-04-29 19:17:22 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_4] Trial #171: GFLOPs: 7119.8147. Time: 91.0521 us. Best GFLOPs: 7755.5080
2024-04-29 19:17:22 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_4] Trial #172: GFLOPs: 7082.5944. Time: 91.5306 us. Best GFLOPs: 7755.5080
2024-04-29 19:17:22 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_4] Trial #173: GFLOPs: 6488.0365. Time: 99.9184 us. Best GFLOPs: 7755.5080
2024-04-29 19:17:22 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_4] Trial #174: GFLOPs: 6413.6272. Time: 101.0776 us. Best GFLOPs: 7755.5080
2024-04-29 19:17:22 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_4] Trial #175: GFLOPs: 7566.8554. Time: 85.6728 us. Best GFLOPs: 7755.5080
2024-04-29 19:17:22 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_4] Trial #176: GFLOPs: 2552.8880. Time: 253.9375 us. Best GFLOPs: 7755.5080
2024-04-29 19:17:22 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_4] Trial #177: GFLOPs: 7163.0036. Time: 90.5031 us. Best GFLOPs: 7755.5080
2024-04-29 19:17:22 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_4] Trial #178: GFLOPs: 6496.0919. Time: 99.7944 us. Best GFLOPs: 7755.5080
2024-04-29 19:17:22 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_4] Trial #179: GFLOPs: 6443.9038. Time: 100.6027 us. Best GFLOPs: 7755.5080
2024-04-29 19:17:22 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_4] Trial #180: GFLOPs: 7148.5213. Time: 90.6864 us. Best GFLOPs: 7755.5080
2024-04-29 19:17:22 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_4] Trial #181: GFLOPs: 6272.2994. Time: 103.3551 us. Best GFLOPs: 7755.5080
2024-04-29 19:17:22 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_4] Trial #182: GFLOPs: 6334.6193. Time: 102.3383 us. Best GFLOPs: 7755.5080
2024-04-29 19:17:22 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_4] Trial #183: GFLOPs: 5560.2505. Time: 116.5908 us. Best GFLOPs: 7755.5080
2024-04-29 19:17:22 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_4] Trial #184: GFLOPs: 5560.1690. Time: 116.5925 us. Best GFLOPs: 7755.5080
2024-04-29 19:17:22 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_4] Trial #185: GFLOPs: 4789.9363. Time: 135.3408 us. Best GFLOPs: 7755.5080
2024-04-29 19:17:22 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_4] Trial #186: GFLOPs: 4790.2579. Time: 135.3317 us. Best GFLOPs: 7755.5080
2024-04-29 19:17:22 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_4] Trial #187: GFLOPs: 6843.2937. Time: 94.7313 us. Best GFLOPs: 7755.5080
2024-04-29 19:17:22 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_4] Trial #188: GFLOPs: 6171.7568. Time: 105.0388 us. Best GFLOPs: 7755.5080
2024-04-29 19:17:22 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_4] Trial #189: GFLOPs: 5159.8619. Time: 125.6378 us. Best GFLOPs: 7755.5080
2024-04-29 19:17:22 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_4] Trial #190: GFLOPs: 5.9268. Time: 109379.9233 us. Best GFLOPs: 7755.5080
2024-04-29 19:17:22 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_4] Trial #191: GFLOPs: 6743.8786. Time: 96.1278 us. Best GFLOPs: 7755.5080
2024-04-29 19:17:22 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_4] Trial #192: GFLOPs: 69.5255. Time: 9324.2645 us. Best GFLOPs: 7755.5080
2024-04-29 20:07:08 [INFO] [evolutionary_search.cc:713] Generating candidates......
2024-04-29 20:07:12 [INFO] [evolutionary_search.cc:715] Picked top 102 candidate(s) from database
2024-04-29 20:07:18 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x74b5608)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0xb541318)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0xb52be28)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x4d66e18)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x51036c8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0xb4c2bb8)]: 404 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0xb549488)]: 0 failure(s)
2024-04-29 20:07:26 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x74b5608)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0xb541318)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0xb52be28)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x4d66e18)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x51036c8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0xb4c2bb8)]: 805 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0xb549488)]: 0 failure(s)
2024-04-29 20:07:33 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x74b5608)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0xb541318)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0xb52be28)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x4d66e18)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x51036c8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0xb4c2bb8)]: 1199 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0xb549488)]: 0 failure(s)
2024-04-29 20:07:40 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x74b5608)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0xb541318)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0xb52be28)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x4d66e18)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x51036c8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0xb4c2bb8)]: 1600 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0xb549488)]: 0 failure(s)
2024-04-29 20:07:48 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x74b5608)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0xb541318)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0xb52be28)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x4d66e18)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x51036c8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0xb4c2bb8)]: 2006 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0xb549488)]: 0 failure(s)
2024-04-29 20:07:55 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x74b5608)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0xb541318)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0xb52be28)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x4d66e18)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x51036c8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0xb4c2bb8)]: 2412 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0xb549488)]: 0 failure(s)
2024-04-29 20:08:02 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x74b5608)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0xb541318)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0xb52be28)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x4d66e18)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x51036c8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0xb4c2bb8)]: 2815 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0xb549488)]: 0 failure(s)
2024-04-29 20:08:02 [INFO] [evolutionary_search.cc:723] Sampled 55 candidate(s)
2024-04-29 20:08:23 [INFO] [evolutionary_search.cc:621] Evolve iter #0 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x74b5608)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0xb541318)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0xb52be28)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x4d66e18)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x51036c8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0xb4c2bb8)]: 86 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0xb549488)]: 0 failure(s)
2024-04-29 20:08:47 [INFO] [evolutionary_search.cc:621] Evolve iter #1 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x74b5608)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0xb541318)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0xb52be28)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x4d66e18)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x51036c8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0xb4c2bb8)]: 72 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0xb549488)]: 0 failure(s)
2024-04-29 20:09:11 [INFO] [evolutionary_search.cc:621] Evolve iter #2 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x74b5608)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0xb541318)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0xb52be28)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x4d66e18)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x51036c8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0xb4c2bb8)]: 89 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0xb549488)]: 0 failure(s)
2024-04-29 20:09:34 [INFO] [evolutionary_search.cc:621] Evolve iter #3 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x74b5608)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0xb541318)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0xb52be28)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x4d66e18)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x51036c8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0xb4c2bb8)]: 63 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0xb549488)]: 0 failure(s)
2024-04-29 20:09:39 [INFO] [evolutionary_search.cc:649] Scores of the best 64 candidates:
[1 : 16]:	1.1928  1.0122  0.9993  0.9992  0.9970  0.9954  0.9926  0.9921  0.9912  0.9901  0.9893  0.9868  0.9821  0.9815  0.9805  0.9804
[17 : 32]:	0.9774  0.9752  0.9750  0.9737  0.9717  0.9692  0.9662  0.9643  0.9643  0.9629  0.9592  0.9539  0.9539  0.9535  0.9527  0.9515
[33 : 48]:	0.9496  0.9487  0.9485  0.9478  0.9470  0.9469  0.9466  0.9462  0.9448  0.9446  0.9442  0.9440  0.9432  0.9418  0.9414  0.9414
[49 : 64]:	0.9414  0.9410  0.9408  0.9407  0.9407  0.9403  0.9395  0.9384  0.9384  0.9383  0.9380  0.9379  0.9377  0.9376  0.9374  0.9374
2024-04-29 20:09:40 [INFO] [evolutionary_search.cc:727] Got 64 candidate(s) with evolutionary search
2024-04-29 20:09:40 [INFO] [evolutionary_search.cc:730] Sending 64 candidates(s) for measurement
2024-04-29 20:10:59 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_4] Trial #193: GFLOPs: 5860.4400. Time: 110.6186 us. Best GFLOPs: 7755.5080
2024-04-29 20:10:59 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_4] Trial #194: GFLOPs: 7577.4841. Time: 85.5527 us. Best GFLOPs: 7755.5080
2024-04-29 20:10:59 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_4] Trial #195: GFLOPs: 7686.0305. Time: 84.3444 us. Best GFLOPs: 7755.5080
2024-04-29 20:10:59 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_4] Trial #196: GFLOPs: 7505.5000. Time: 86.3732 us. Best GFLOPs: 7755.5080
2024-04-29 20:10:59 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_4] Trial #197: GFLOPs: 7305.2056. Time: 88.7414 us. Best GFLOPs: 7755.5080
2024-04-29 20:10:59 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_4] Trial #198: GFLOPs: 7767.1049. Time: 83.4640 us. Best GFLOPs: 7767.1049
2024-04-29 20:10:59 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_4] Trial #199: GFLOPs: 7732.7707. Time: 83.8346 us. Best GFLOPs: 7767.1049
2024-04-29 20:10:59 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_4] Trial #200: GFLOPs: 7486.7202. Time: 86.5898 us. Best GFLOPs: 7767.1049
2024-04-29 20:10:59 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_4] Trial #201: GFLOPs: 7300.3106. Time: 88.8009 us. Best GFLOPs: 7767.1049
2024-04-29 20:10:59 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_4] Trial #202: GFLOPs: 7301.2335. Time: 88.7896 us. Best GFLOPs: 7767.1049
2024-04-29 20:10:59 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_4] Trial #203: GFLOPs: 7485.9000. Time: 86.5993 us. Best GFLOPs: 7767.1049
2024-04-29 20:10:59 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_4] Trial #204: GFLOPs: 7318.1394. Time: 88.5845 us. Best GFLOPs: 7767.1049
2024-04-29 20:10:59 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_4] Trial #205: GFLOPs: 7764.1849. Time: 83.4954 us. Best GFLOPs: 7767.1049
2024-04-29 20:10:59 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_4] Trial #206: GFLOPs: 7713.0685. Time: 84.0488 us. Best GFLOPs: 7767.1049
2024-04-29 20:10:59 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_4] Trial #207: GFLOPs: 7985.2408. Time: 81.1840 us. Best GFLOPs: 7985.2408
2024-04-29 20:10:59 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_4] Trial #208: GFLOPs: 7507.4220. Time: 86.3511 us. Best GFLOPs: 7985.2408
2024-04-29 20:10:59 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_4] Trial #209: GFLOPs: 5002.4593. Time: 129.5910 us. Best GFLOPs: 7985.2408
2024-04-29 20:10:59 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_4] Trial #210: GFLOPs: 7627.1262. Time: 84.9958 us. Best GFLOPs: 7985.2408
2024-04-29 20:10:59 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_4] Trial #211: GFLOPs: 7553.2459. Time: 85.8272 us. Best GFLOPs: 7985.2408
2024-04-29 20:10:59 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_4] Trial #212: GFLOPs: 7951.3562. Time: 81.5300 us. Best GFLOPs: 7985.2408
2024-04-29 20:10:59 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_4] Trial #213: GFLOPs: 7397.0882. Time: 87.6391 us. Best GFLOPs: 7985.2408
2024-04-29 20:10:59 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_4] Trial #214: GFLOPs: 7549.7691. Time: 85.8667 us. Best GFLOPs: 7985.2408
2024-04-29 20:10:59 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_4] Trial #215: GFLOPs: 7471.7873. Time: 86.7629 us. Best GFLOPs: 7985.2408
2024-04-29 20:10:59 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_4] Trial #216: GFLOPs: 7487.3347. Time: 86.5827 us. Best GFLOPs: 7985.2408
2024-04-29 20:10:59 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_4] Trial #217: GFLOPs: 7588.4692. Time: 85.4288 us. Best GFLOPs: 7985.2408
2024-04-29 20:10:59 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_4] Trial #218: GFLOPs: 7777.3359. Time: 83.3542 us. Best GFLOPs: 7985.2408
2024-04-29 20:10:59 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_4] Trial #219: GFLOPs: 5262.5978. Time: 123.1852 us. Best GFLOPs: 7985.2408
2024-04-29 20:10:59 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_4] Trial #220: GFLOPs: 7561.8576. Time: 85.7295 us. Best GFLOPs: 7985.2408
2024-04-29 20:10:59 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_4] Trial #221: GFLOPs: 7853.3366. Time: 82.5476 us. Best GFLOPs: 7985.2408
2024-04-29 20:10:59 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_4] Trial #222: GFLOPs: 7248.2806. Time: 89.4383 us. Best GFLOPs: 7985.2408
2024-04-29 20:10:59 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_4] Trial #223: GFLOPs: 7407.6524. Time: 87.5141 us. Best GFLOPs: 7985.2408
2024-04-29 20:10:59 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_4] Trial #224: GFLOPs: 7772.3419. Time: 83.4078 us. Best GFLOPs: 7985.2408
2024-04-29 20:10:59 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_4] Trial #225: GFLOPs: 7229.5238. Time: 89.6703 us. Best GFLOPs: 7985.2408
2024-04-29 20:10:59 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_4] Trial #226: GFLOPs: 7326.7950. Time: 88.4799 us. Best GFLOPs: 7985.2408
2024-04-29 20:10:59 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_4] Trial #227: GFLOPs: 7282.5178. Time: 89.0178 us. Best GFLOPs: 7985.2408
2024-04-29 20:10:59 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_4] Trial #228: GFLOPs: 5407.2124. Time: 119.8906 us. Best GFLOPs: 7985.2408
2024-04-29 20:10:59 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_4] Trial #229: GFLOPs: 7367.1753. Time: 87.9949 us. Best GFLOPs: 7985.2408
2024-04-29 20:10:59 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_4] Trial #230: GFLOPs: 7239.6724. Time: 89.5446 us. Best GFLOPs: 7985.2408
2024-04-29 20:10:59 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_4] Trial #231: GFLOPs: 6953.7522. Time: 93.2265 us. Best GFLOPs: 7985.2408
2024-04-29 20:10:59 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_4] Trial #232: GFLOPs: 7993.6602. Time: 81.0985 us. Best GFLOPs: 7993.6602
2024-04-29 20:10:59 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_4] Trial #233: GFLOPs: 7491.3016. Time: 86.5369 us. Best GFLOPs: 7993.6602
2024-04-29 20:10:59 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_4] Trial #234: GFLOPs: 7095.7884. Time: 91.3604 us. Best GFLOPs: 7993.6602
2024-04-29 20:10:59 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_4] Trial #235: GFLOPs: 7565.2245. Time: 85.6913 us. Best GFLOPs: 7993.6602
2024-04-29 20:10:59 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_4] Trial #236: GFLOPs: 7899.6702. Time: 82.0634 us. Best GFLOPs: 7993.6602
2024-04-29 20:10:59 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_4] Trial #237: GFLOPs: 7474.8970. Time: 86.7268 us. Best GFLOPs: 7993.6602
2024-04-29 20:10:59 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_4] Trial #238: GFLOPs: 7344.2217. Time: 88.2699 us. Best GFLOPs: 7993.6602
2024-04-29 20:10:59 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_4] Trial #239: GFLOPs: 7319.4049. Time: 88.5692 us. Best GFLOPs: 7993.6602
2024-04-29 20:10:59 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_4] Trial #240: GFLOPs: 7187.0369. Time: 90.2004 us. Best GFLOPs: 7993.6602
2024-04-29 20:10:59 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_4] Trial #241: GFLOPs: 7119.4962. Time: 91.0562 us. Best GFLOPs: 7993.6602
2024-04-29 20:10:59 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_4] Trial #242: GFLOPs: 7170.3253. Time: 90.4107 us. Best GFLOPs: 7993.6602
2024-04-29 20:10:59 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_4] Trial #243: GFLOPs: 7380.6027. Time: 87.8348 us. Best GFLOPs: 7993.6602
2024-04-29 20:10:59 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_4] Trial #244: GFLOPs: 7228.1807. Time: 89.6870 us. Best GFLOPs: 7993.6602
2024-04-29 20:10:59 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_4] Trial #245: GFLOPs: 7224.7922. Time: 89.7291 us. Best GFLOPs: 7993.6602
2024-04-29 20:10:59 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_4] Trial #246: GFLOPs: 7361.1119. Time: 88.0674 us. Best GFLOPs: 7993.6602
2024-04-29 20:10:59 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_4] Trial #247: GFLOPs: 7226.1323. Time: 89.7124 us. Best GFLOPs: 7993.6602
2024-04-29 20:10:59 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_4] Trial #248: GFLOPs: 7178.1458. Time: 90.3122 us. Best GFLOPs: 7993.6602
2024-04-29 20:10:59 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_4] Trial #249: GFLOPs: 7345.2720. Time: 88.2573 us. Best GFLOPs: 7993.6602
2024-04-29 20:10:59 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_4] Trial #250: GFLOPs: 7307.9951. Time: 88.7075 us. Best GFLOPs: 7993.6602
2024-04-29 20:10:59 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_4] Trial #251: GFLOPs: 7453.7471. Time: 86.9729 us. Best GFLOPs: 7993.6602
2024-04-29 20:10:59 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_4] Trial #252: GFLOPs: 7382.0726. Time: 87.8173 us. Best GFLOPs: 7993.6602
2024-04-29 20:10:59 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_4] Trial #253: GFLOPs: 7478.6845. Time: 86.6829 us. Best GFLOPs: 7993.6602
2024-04-29 20:10:59 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_4] Trial #254: GFLOPs: 4092.6940. Time: 158.3978 us. Best GFLOPs: 7993.6602
2024-04-29 20:10:59 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_4] Trial #255: GFLOPs: 4496.9208. Time: 144.1595 us. Best GFLOPs: 7993.6602
2024-04-29 20:10:59 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_4] Trial #256: GFLOPs: 88.1867. Time: 7351.1499 us. Best GFLOPs: 7993.6602
2024-04-29 20:44:44 [INFO] [evolutionary_search.cc:713] Generating candidates......
2024-04-29 20:44:48 [INFO] [evolutionary_search.cc:715] Picked top 102 candidate(s) from database
2024-04-29 20:44:54 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x74b5608)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0xb541318)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0xb52be28)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x4d66e18)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x51036c8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0xb4c2bb8)]: 403 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0xb549488)]: 0 failure(s)
2024-04-29 20:45:02 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x74b5608)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0xb541318)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0xb52be28)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x4d66e18)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x51036c8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0xb4c2bb8)]: 800 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0xb549488)]: 0 failure(s)
2024-04-29 20:45:10 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x74b5608)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0xb541318)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0xb52be28)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x4d66e18)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x51036c8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0xb4c2bb8)]: 1205 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0xb549488)]: 0 failure(s)
2024-04-29 20:45:17 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x74b5608)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0xb541318)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0xb52be28)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x4d66e18)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x51036c8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0xb4c2bb8)]: 1609 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0xb549488)]: 0 failure(s)
2024-04-29 20:45:24 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x74b5608)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0xb541318)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0xb52be28)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x4d66e18)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x51036c8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0xb4c2bb8)]: 2012 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0xb549488)]: 0 failure(s)
2024-04-29 20:45:32 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x74b5608)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0xb541318)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0xb52be28)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x4d66e18)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x51036c8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0xb4c2bb8)]: 2415 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0xb549488)]: 0 failure(s)
2024-04-29 20:45:38 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x74b5608)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0xb541318)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0xb52be28)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x4d66e18)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x51036c8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0xb4c2bb8)]: 2815 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0xb549488)]: 0 failure(s)
2024-04-29 20:45:38 [INFO] [evolutionary_search.cc:723] Sampled 55 candidate(s)
2024-04-29 20:45:59 [INFO] [evolutionary_search.cc:621] Evolve iter #0 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x74b5608)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0xb541318)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0xb52be28)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x4d66e18)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x51036c8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0xb4c2bb8)]: 90 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0xb549488)]: 0 failure(s)
2024-04-29 20:46:22 [INFO] [evolutionary_search.cc:621] Evolve iter #1 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x74b5608)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0xb541318)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0xb52be28)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x4d66e18)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x51036c8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0xb4c2bb8)]: 89 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0xb549488)]: 0 failure(s)
2024-04-29 20:46:46 [INFO] [evolutionary_search.cc:621] Evolve iter #2 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x74b5608)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0xb541318)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0xb52be28)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x4d66e18)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x51036c8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0xb4c2bb8)]: 82 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0xb549488)]: 0 failure(s)
2024-04-29 20:47:09 [INFO] [evolutionary_search.cc:621] Evolve iter #3 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x74b5608)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0xb541318)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0xb52be28)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x4d66e18)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x51036c8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0xb4c2bb8)]: 87 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0xb549488)]: 0 failure(s)
2024-04-29 20:47:14 [INFO] [evolutionary_search.cc:649] Scores of the best 64 candidates:
[1 : 16]:	1.0367  1.0247  1.0202  1.0152  1.0078  1.0053  1.0046  1.0046  1.0032  1.0028  1.0007  0.9975  0.9975  0.9960  0.9956  0.9953
[17 : 32]:	0.9950  0.9950  0.9950  0.9949  0.9941  0.9941  0.9941  0.9909  0.9907  0.9906  0.9897  0.9862  0.9858  0.9858  0.9854  0.9852
[33 : 48]:	0.9831  0.9816  0.9815  0.9808  0.9802  0.9783  0.9774  0.9773  0.9764  0.9761  0.9760  0.9760  0.9753  0.9748  0.9746  0.9746
[49 : 64]:	0.9745  0.9742  0.9729  0.9726  0.9726  0.9726  0.9714  0.9712  0.9712  0.9703  0.9701  0.9696  0.9692  0.9690  0.9689  0.9689
2024-04-29 20:47:14 [INFO] [evolutionary_search.cc:727] Got 64 candidate(s) with evolutionary search
2024-04-29 20:47:14 [INFO] [evolutionary_search.cc:730] Sending 64 candidates(s) for measurement
2024-04-29 20:48:32 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_4] Trial #257: GFLOPs: 7908.9422. Time: 81.9672 us. Best GFLOPs: 7993.6602
2024-04-29 20:48:32 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_4] Trial #258: GFLOPs: 7765.7097. Time: 83.4790 us. Best GFLOPs: 7993.6602
2024-04-29 20:48:32 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_4] Trial #259: GFLOPs: 7591.1613. Time: 85.3985 us. Best GFLOPs: 7993.6602
2024-04-29 20:48:32 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_4] Trial #260: GFLOPs: 8206.9695. Time: 78.9907 us. Best GFLOPs: 8206.9695
2024-04-29 20:48:32 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_4] Trial #261: GFLOPs: 7763.9334. Time: 83.4981 us. Best GFLOPs: 8206.9695
2024-04-29 20:48:32 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_4] Trial #262: GFLOPs: 7422.2686. Time: 87.3417 us. Best GFLOPs: 8206.9695
2024-04-29 20:48:32 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_4] Trial #263: GFLOPs: 7372.6229. Time: 87.9299 us. Best GFLOPs: 8206.9695
2024-04-29 20:48:32 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_4] Trial #264: GFLOPs: 7372.3410. Time: 87.9333 us. Best GFLOPs: 8206.9695
2024-04-29 20:48:32 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_4] Trial #265: GFLOPs: 8147.3297. Time: 79.5689 us. Best GFLOPs: 8206.9695
2024-04-29 20:48:32 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_4] Trial #266: GFLOPs: 8037.0402. Time: 80.6608 us. Best GFLOPs: 8206.9695
2024-04-29 20:48:32 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_4] Trial #267: GFLOPs: 5387.8460. Time: 120.3215 us. Best GFLOPs: 8206.9695
2024-04-29 20:48:32 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_4] Trial #268: GFLOPs: 7571.5632. Time: 85.6196 us. Best GFLOPs: 8206.9695
2024-04-29 20:48:32 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_4] Trial #269: GFLOPs: 7571.9545. Time: 85.6151 us. Best GFLOPs: 8206.9695
2024-04-29 20:48:32 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_4] Trial #270: GFLOPs: 7952.8448. Time: 81.5147 us. Best GFLOPs: 8206.9695
2024-04-29 20:48:32 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_4] Trial #271: GFLOPs: 7918.2882. Time: 81.8705 us. Best GFLOPs: 8206.9695
2024-04-29 20:48:32 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_4] Trial #272: GFLOPs: 5442.6587. Time: 119.1098 us. Best GFLOPs: 8206.9695
2024-04-29 20:48:32 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_4] Trial #273: GFLOPs: 7918.0009. Time: 81.8734 us. Best GFLOPs: 8206.9695
2024-04-29 20:48:32 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_4] Trial #274: GFLOPs: 7952.6027. Time: 81.5172 us. Best GFLOPs: 8206.9695
2024-04-29 20:48:32 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_4] Trial #275: GFLOPs: 7918.6452. Time: 81.8668 us. Best GFLOPs: 8206.9695
2024-04-29 20:48:32 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_4] Trial #276: GFLOPs: 7651.6766. Time: 84.7231 us. Best GFLOPs: 8206.9695
2024-04-29 20:48:32 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_4] Trial #277: GFLOPs: 7273.0774. Time: 89.1334 us. Best GFLOPs: 8206.9695
2024-04-29 20:48:32 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_4] Trial #278: GFLOPs: 7272.1092. Time: 89.1452 us. Best GFLOPs: 8206.9695
2024-04-29 20:48:32 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_4] Trial #279: GFLOPs: 7272.8565. Time: 89.1361 us. Best GFLOPs: 8206.9695
2024-04-29 20:48:32 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_4] Trial #280: GFLOPs: 7677.6304. Time: 84.4367 us. Best GFLOPs: 8206.9695
2024-04-29 20:48:32 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_4] Trial #281: GFLOPs: 7370.5811. Time: 87.9542 us. Best GFLOPs: 8206.9695
2024-04-29 20:48:32 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_4] Trial #282: GFLOPs: 7746.6861. Time: 83.6840 us. Best GFLOPs: 8206.9695
2024-04-29 20:48:32 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_4] Trial #283: GFLOPs: 7225.0183. Time: 89.7263 us. Best GFLOPs: 8206.9695
2024-04-29 20:48:32 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_4] Trial #284: GFLOPs: 6808.4959. Time: 95.2154 us. Best GFLOPs: 8206.9695
2024-04-29 20:48:32 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_4] Trial #285: GFLOPs: 7755.3850. Time: 83.5902 us. Best GFLOPs: 8206.9695
2024-04-29 20:48:32 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_4] Trial #286: GFLOPs: 7619.2361. Time: 85.0838 us. Best GFLOPs: 8206.9695
2024-04-29 20:48:32 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_4] Trial #287: GFLOPs: 7327.2587. Time: 88.4743 us. Best GFLOPs: 8206.9695
2024-04-29 20:48:32 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_4] Trial #288: GFLOPs: 7497.0427. Time: 86.4706 us. Best GFLOPs: 8206.9695
2024-04-29 20:48:32 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_4] Trial #289: GFLOPs: 7884.0886. Time: 82.2256 us. Best GFLOPs: 8206.9695
2024-04-29 20:48:32 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_4] Trial #290: GFLOPs: 7684.1151. Time: 84.3655 us. Best GFLOPs: 8206.9695
2024-04-29 20:48:32 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_4] Trial #291: GFLOPs: 8107.4757. Time: 79.9600 us. Best GFLOPs: 8206.9695
2024-04-29 20:48:32 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_4] Trial #292: GFLOPs: 5315.5434. Time: 121.9582 us. Best GFLOPs: 8206.9695
2024-04-29 20:48:32 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_4] Trial #293: GFLOPs: 8062.7550. Time: 80.4035 us. Best GFLOPs: 8206.9695
2024-04-29 20:48:32 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_4] Trial #294: GFLOPs: 7287.1879. Time: 88.9608 us. Best GFLOPs: 8206.9695
2024-04-29 20:48:32 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_4] Trial #295: GFLOPs: 7992.4964. Time: 81.1103 us. Best GFLOPs: 8206.9695
2024-04-29 20:48:32 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_4] Trial #296: GFLOPs: 7949.9665. Time: 81.5442 us. Best GFLOPs: 8206.9695
2024-04-29 20:48:32 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_4] Trial #297: GFLOPs: 7985.3558. Time: 81.1828 us. Best GFLOPs: 8206.9695
2024-04-29 20:48:32 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_4] Trial #298: GFLOPs: 8047.6615. Time: 80.5543 us. Best GFLOPs: 8206.9695
2024-04-29 20:48:32 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_4] Trial #299: GFLOPs: 8123.5818. Time: 79.8015 us. Best GFLOPs: 8206.9695
2024-04-29 20:48:32 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_4] Trial #300: GFLOPs: 7872.4971. Time: 82.3467 us. Best GFLOPs: 8206.9695
2024-04-29 20:48:32 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_4] Trial #301: GFLOPs: 7981.5124. Time: 81.2219 us. Best GFLOPs: 8206.9695
2024-04-29 20:48:32 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_4] Trial #302: GFLOPs: 8065.8748. Time: 80.3724 us. Best GFLOPs: 8206.9695
2024-04-29 20:48:32 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_4] Trial #303: GFLOPs: 7311.9458. Time: 88.6596 us. Best GFLOPs: 8206.9695
2024-04-29 20:48:32 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_4] Trial #304: GFLOPs: 7067.8138. Time: 91.7220 us. Best GFLOPs: 8206.9695
2024-04-29 20:48:32 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_4] Trial #305: GFLOPs: 5382.2623. Time: 120.4464 us. Best GFLOPs: 8206.9695
2024-04-29 20:48:32 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_4] Trial #306: GFLOPs: 7982.0545. Time: 81.2164 us. Best GFLOPs: 8206.9695
2024-04-29 20:48:32 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_4] Trial #307: GFLOPs: 7502.6503. Time: 86.4060 us. Best GFLOPs: 8206.9695
2024-04-29 20:48:32 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_4] Trial #308: GFLOPs: 8061.0331. Time: 80.4207 us. Best GFLOPs: 8206.9695
2024-04-29 20:48:32 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_4] Trial #309: GFLOPs: 7488.8520. Time: 86.5652 us. Best GFLOPs: 8206.9695
2024-04-29 20:48:32 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_4] Trial #310: GFLOPs: 8039.9549. Time: 80.6315 us. Best GFLOPs: 8206.9695
2024-04-29 20:48:32 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_4] Trial #311: GFLOPs: 7822.6187. Time: 82.8717 us. Best GFLOPs: 8206.9695
2024-04-29 20:48:32 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_4] Trial #312: GFLOPs: 8223.6184. Time: 78.8307 us. Best GFLOPs: 8223.6184
2024-04-29 20:48:32 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_4] Trial #313: GFLOPs: 8145.8981. Time: 79.5829 us. Best GFLOPs: 8223.6184
2024-04-29 20:48:32 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_4] Trial #314: GFLOPs: 7962.7764. Time: 81.4131 us. Best GFLOPs: 8223.6184
2024-04-29 20:48:32 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_4] Trial #315: GFLOPs: 7844.8527. Time: 82.6369 us. Best GFLOPs: 8223.6184
2024-04-29 20:48:32 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_4] Trial #316: GFLOPs: 7601.2756. Time: 85.2849 us. Best GFLOPs: 8223.6184
2024-04-29 20:48:32 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_4] Trial #317: GFLOPs: 8073.9863. Time: 80.2917 us. Best GFLOPs: 8223.6184
2024-04-29 20:48:32 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_4] Trial #318: GFLOPs: 712.0022. Time: 910.4942 us. Best GFLOPs: 8223.6184
2024-04-29 20:48:32 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_4] Trial #319: GFLOPs: 4541.6731. Time: 142.7390 us. Best GFLOPs: 8223.6184
2024-04-29 20:48:32 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_4] Trial #320: GFLOPs: 89.7358. Time: 7224.2469 us. Best GFLOPs: 8223.6184
2024-04-29 21:32:46 [INFO] [evolutionary_search.cc:713] Generating candidates......
2024-04-29 21:32:49 [INFO] [evolutionary_search.cc:715] Picked top 102 candidate(s) from database
2024-04-29 21:32:56 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x74b5608)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0xb541318)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0xb52be28)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x4d66e18)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x51036c8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0xb4c2bb8)]: 405 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0xb549488)]: 0 failure(s)
2024-04-29 21:33:03 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x74b5608)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0xb541318)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0xb52be28)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x4d66e18)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x51036c8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0xb4c2bb8)]: 809 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0xb549488)]: 0 failure(s)
2024-04-29 21:33:11 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x74b5608)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0xb541318)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0xb52be28)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x4d66e18)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x51036c8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0xb4c2bb8)]: 1212 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0xb549488)]: 0 failure(s)
2024-04-29 21:33:18 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x74b5608)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0xb541318)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0xb52be28)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x4d66e18)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x51036c8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0xb4c2bb8)]: 1615 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0xb549488)]: 0 failure(s)
2024-04-29 21:33:25 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x74b5608)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0xb541318)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0xb52be28)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x4d66e18)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x51036c8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0xb4c2bb8)]: 2022 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0xb549488)]: 0 failure(s)
2024-04-29 21:33:32 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x74b5608)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0xb541318)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0xb52be28)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x4d66e18)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x51036c8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0xb4c2bb8)]: 2422 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0xb549488)]: 0 failure(s)
2024-04-29 21:33:39 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x74b5608)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0xb541318)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0xb52be28)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x4d66e18)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x51036c8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0xb4c2bb8)]: 2827 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0xb549488)]: 0 failure(s)
2024-04-29 21:33:46 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x74b5608)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0xb541318)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0xb52be28)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x4d66e18)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x51036c8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0xb4c2bb8)]: 3226 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0xb549488)]: 0 failure(s)
2024-04-29 21:33:46 [INFO] [evolutionary_search.cc:723] Sampled 54 candidate(s)
2024-04-29 21:34:06 [INFO] [evolutionary_search.cc:621] Evolve iter #0 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x74b5608)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0xb541318)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0xb52be28)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x4d66e18)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x51036c8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0xb4c2bb8)]: 88 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0xb549488)]: 0 failure(s)
2024-04-29 21:34:29 [INFO] [evolutionary_search.cc:621] Evolve iter #1 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x74b5608)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0xb541318)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0xb52be28)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x4d66e18)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x51036c8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0xb4c2bb8)]: 93 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0xb549488)]: 0 failure(s)
2024-04-29 21:34:52 [INFO] [evolutionary_search.cc:621] Evolve iter #2 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x74b5608)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0xb541318)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0xb52be28)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x4d66e18)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x51036c8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0xb4c2bb8)]: 98 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0xb549488)]: 0 failure(s)
2024-04-29 21:35:15 [INFO] [evolutionary_search.cc:621] Evolve iter #3 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x74b5608)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0xb541318)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0xb52be28)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x4d66e18)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x51036c8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0xb4c2bb8)]: 89 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0xb549488)]: 0 failure(s)
2024-04-29 21:35:20 [INFO] [evolutionary_search.cc:649] Scores of the best 64 candidates:
[1 : 16]:	1.0166  1.0010  0.9930  0.9926  0.9909  0.9902  0.9877  0.9839  0.9815  0.9812  0.9801  0.9787  0.9778  0.9768  0.9767  0.9767
[17 : 32]:	0.9757  0.9750  0.9743  0.9731  0.9726  0.9725  0.9724  0.9721  0.9720  0.9719  0.9717  0.9709  0.9709  0.9702  0.9701  0.9696
[33 : 48]:	0.9696  0.9696  0.9696  0.9691  0.9690  0.9688  0.9688  0.9681  0.9676  0.9676  0.9675  0.9671  0.9669  0.9667  0.9667  0.9665
[49 : 64]:	0.9664  0.9663  0.9662  0.9658  0.9654  0.9652  0.9651  0.9651  0.9651  0.9649  0.9645  0.9644  0.9644  0.9641  0.9640  0.9638
2024-04-29 21:35:21 [INFO] [evolutionary_search.cc:727] Got 64 candidate(s) with evolutionary search
2024-04-29 21:35:21 [INFO] [evolutionary_search.cc:730] Sending 64 candidates(s) for measurement
2024-04-29 21:36:38 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_4] Trial #321: GFLOPs: 7727.2476. Time: 83.8945 us. Best GFLOPs: 8223.6184
2024-04-29 21:36:38 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_4] Trial #322: GFLOPs: 7652.4594. Time: 84.7145 us. Best GFLOPs: 8223.6184
2024-04-29 21:36:38 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_4] Trial #323: GFLOPs: 7798.0789. Time: 83.1325 us. Best GFLOPs: 8223.6184
2024-04-29 21:36:38 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_4] Trial #324: GFLOPs: 7943.5787. Time: 81.6098 us. Best GFLOPs: 8223.6184
2024-04-29 21:36:38 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_4] Trial #325: GFLOPs: 7396.8053. Time: 87.6424 us. Best GFLOPs: 8223.6184
2024-04-29 21:36:38 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_4] Trial #326: GFLOPs: 7804.6318. Time: 83.0627 us. Best GFLOPs: 8223.6184
2024-04-29 21:36:38 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_4] Trial #327: GFLOPs: 7979.7759. Time: 81.2396 us. Best GFLOPs: 8223.6184
2024-04-29 21:36:38 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_4] Trial #328: GFLOPs: 7481.0936. Time: 86.6550 us. Best GFLOPs: 8223.6184
2024-04-29 21:36:38 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_4] Trial #329: GFLOPs: 7482.0351. Time: 86.6441 us. Best GFLOPs: 8223.6184
2024-04-29 21:36:38 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_4] Trial #330: GFLOPs: 7442.8351. Time: 87.1004 us. Best GFLOPs: 8223.6184
2024-04-29 21:36:38 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_4] Trial #331: GFLOPs: 7742.3223. Time: 83.7312 us. Best GFLOPs: 8223.6184
2024-04-29 21:36:38 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_4] Trial #332: GFLOPs: 8184.8871. Time: 79.2038 us. Best GFLOPs: 8223.6184
2024-04-29 21:36:38 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_4] Trial #333: GFLOPs: 7987.1079. Time: 81.1650 us. Best GFLOPs: 8223.6184
2024-04-29 21:36:38 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_4] Trial #334: GFLOPs: 8150.5106. Time: 79.5378 us. Best GFLOPs: 8223.6184
2024-04-29 21:36:38 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_4] Trial #335: GFLOPs: 8006.1076. Time: 80.9724 us. Best GFLOPs: 8223.6184
2024-04-29 21:36:38 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_4] Trial #336: GFLOPs: 7947.1049. Time: 81.5736 us. Best GFLOPs: 8223.6184
2024-04-29 21:36:38 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_4] Trial #337: GFLOPs: 7955.6844. Time: 81.4856 us. Best GFLOPs: 8223.6184
2024-04-29 21:36:38 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_4] Trial #338: GFLOPs: 7127.1125. Time: 90.9588 us. Best GFLOPs: 8223.6184
2024-04-29 21:36:38 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_4] Trial #339: GFLOPs: 8146.8765. Time: 79.5733 us. Best GFLOPs: 8223.6184
2024-04-29 21:36:38 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_4] Trial #340: GFLOPs: 8190.9132. Time: 79.1455 us. Best GFLOPs: 8223.6184
2024-04-29 21:36:38 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_4] Trial #341: GFLOPs: 8044.5552. Time: 80.5854 us. Best GFLOPs: 8223.6184
2024-04-29 21:36:38 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_4] Trial #342: GFLOPs: 7917.4381. Time: 81.8793 us. Best GFLOPs: 8223.6184
2024-04-29 21:36:38 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_4] Trial #343: GFLOPs: 8049.4553. Time: 80.5364 us. Best GFLOPs: 8223.6184
2024-04-29 21:36:38 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_4] Trial #344: GFLOPs: 8163.9669. Time: 79.4067 us. Best GFLOPs: 8223.6184
2024-04-29 21:36:38 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_4] Trial #345: GFLOPs: 8001.9297. Time: 81.0147 us. Best GFLOPs: 8223.6184
2024-04-29 21:36:38 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_4] Trial #346: GFLOPs: 8190.6706. Time: 79.1478 us. Best GFLOPs: 8223.6184
2024-04-29 21:36:38 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_4] Trial #347: GFLOPs: 7264.3745. Time: 89.2402 us. Best GFLOPs: 8223.6184
2024-04-29 21:36:38 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_4] Trial #348: GFLOPs: 7989.4722. Time: 81.1410 us. Best GFLOPs: 8223.6184
2024-04-29 21:36:38 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_4] Trial #349: GFLOPs: 7990.3342. Time: 81.1323 us. Best GFLOPs: 8223.6184
2024-04-29 21:36:38 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_4] Trial #350: GFLOPs: 9335.0461. Time: 69.4452 us. Best GFLOPs: 9335.0461
2024-04-29 21:36:38 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_4] Trial #351: GFLOPs: 8127.0327. Time: 79.7676 us. Best GFLOPs: 9335.0461
2024-04-29 21:36:38 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_4] Trial #352: GFLOPs: 8129.6922. Time: 79.7415 us. Best GFLOPs: 9335.0461
2024-04-29 21:36:38 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_4] Trial #353: GFLOPs: 8156.5421. Time: 79.4790 us. Best GFLOPs: 9335.0461
2024-04-29 21:36:38 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_4] Trial #354: GFLOPs: 8227.0508. Time: 78.7979 us. Best GFLOPs: 9335.0461
2024-04-29 21:36:38 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_4] Trial #355: GFLOPs: 8192.2788. Time: 79.1323 us. Best GFLOPs: 9335.0461
2024-04-29 21:36:38 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_4] Trial #356: GFLOPs: 7713.2447. Time: 84.0469 us. Best GFLOPs: 9335.0461
2024-04-29 21:36:38 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_4] Trial #357: GFLOPs: 7357.6924. Time: 88.1083 us. Best GFLOPs: 9335.0461
2024-04-29 21:36:38 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_4] Trial #358: GFLOPs: 7877.2205. Time: 82.2973 us. Best GFLOPs: 9335.0461
2024-04-29 21:36:38 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_4] Trial #359: GFLOPs: 7878.0198. Time: 82.2889 us. Best GFLOPs: 9335.0461
2024-04-29 21:36:38 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_4] Trial #360: GFLOPs: 9213.1811. Time: 70.3637 us. Best GFLOPs: 9335.0461
2024-04-29 21:36:38 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_4] Trial #361: GFLOPs: 7426.9228. Time: 87.2870 us. Best GFLOPs: 9335.0461
2024-04-29 21:36:38 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_4] Trial #362: GFLOPs: 7830.7528. Time: 82.7856 us. Best GFLOPs: 9335.0461
2024-04-29 21:36:38 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_4] Trial #363: GFLOPs: 7989.8253. Time: 81.1374 us. Best GFLOPs: 9335.0461
2024-04-29 21:36:38 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_4] Trial #364: GFLOPs: 8084.8751. Time: 80.1835 us. Best GFLOPs: 9335.0461
2024-04-29 21:36:38 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_4] Trial #365: GFLOPs: 7914.0624. Time: 81.9142 us. Best GFLOPs: 9335.0461
2024-04-29 21:36:38 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_4] Trial #366: GFLOPs: 7947.2218. Time: 81.5724 us. Best GFLOPs: 9335.0461
2024-04-29 21:36:38 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_4] Trial #367: GFLOPs: 7947.1928. Time: 81.5727 us. Best GFLOPs: 9335.0461
2024-04-29 21:36:38 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_4] Trial #368: GFLOPs: 7850.6075. Time: 82.5763 us. Best GFLOPs: 9335.0461
2024-04-29 21:36:38 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_4] Trial #369: GFLOPs: 7915.4857. Time: 81.8994 us. Best GFLOPs: 9335.0461
2024-04-29 21:36:38 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_4] Trial #370: GFLOPs: 8263.7515. Time: 78.4479 us. Best GFLOPs: 9335.0461
2024-04-29 21:36:38 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_4] Trial #371: GFLOPs: 7997.3053. Time: 81.0615 us. Best GFLOPs: 9335.0461
2024-04-29 21:36:38 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_4] Trial #372: GFLOPs: 7991.4400. Time: 81.1210 us. Best GFLOPs: 9335.0461
2024-04-29 21:36:38 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_4] Trial #373: GFLOPs: 7047.2046. Time: 91.9902 us. Best GFLOPs: 9335.0461
2024-04-29 21:36:38 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_4] Trial #374: GFLOPs: 8119.2977. Time: 79.8436 us. Best GFLOPs: 9335.0461
2024-04-29 21:36:38 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_4] Trial #375: GFLOPs: 8119.1809. Time: 79.8447 us. Best GFLOPs: 9335.0461
2024-04-29 21:36:38 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_4] Trial #376: GFLOPs: 7960.8329. Time: 81.4329 us. Best GFLOPs: 9335.0461
2024-04-29 21:36:38 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_4] Trial #377: GFLOPs: 8037.0055. Time: 80.6611 us. Best GFLOPs: 9335.0461
2024-04-29 21:36:38 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_4] Trial #378: GFLOPs: 9072.9481. Time: 71.4513 us. Best GFLOPs: 9335.0461
2024-04-29 21:36:38 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_4] Trial #379: GFLOPs: 9483.5248. Time: 68.3579 us. Best GFLOPs: 9483.5248
2024-04-29 21:36:38 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_4] Trial #380: GFLOPs: 7711.7233. Time: 84.0634 us. Best GFLOPs: 9483.5248
2024-04-29 21:36:38 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_4] Trial #381: GFLOPs: 7711.8881. Time: 84.0616 us. Best GFLOPs: 9483.5248
2024-04-29 21:36:38 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_4] Trial #382: GFLOPs: 6525.1191. Time: 99.3505 us. Best GFLOPs: 9483.5248
2024-04-29 21:36:38 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_4] Trial #383: GFLOPs: 657.7288. Time: 985.6249 us. Best GFLOPs: 9483.5248
2024-04-29 21:36:38 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_4] Trial #384: GFLOPs: 12.2371. Time: 52975.9570 us. Best GFLOPs: 9483.5248
2024-04-29 22:43:17 [INFO] [evolutionary_search.cc:713] Generating candidates......
2024-04-29 22:43:21 [INFO] [evolutionary_search.cc:715] Picked top 102 candidate(s) from database
2024-04-29 22:43:28 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x74b5608)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0xb541318)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0xb52be28)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x4d66e18)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x51036c8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0xb4c2bb8)]: 401 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0xb549488)]: 0 failure(s)
2024-04-29 22:43:35 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x74b5608)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0xb541318)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0xb52be28)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x4d66e18)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x51036c8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0xb4c2bb8)]: 805 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0xb549488)]: 0 failure(s)
2024-04-29 22:43:42 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x74b5608)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0xb541318)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0xb52be28)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x4d66e18)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x51036c8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0xb4c2bb8)]: 1206 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0xb549488)]: 0 failure(s)
2024-04-29 22:43:49 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x74b5608)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0xb541318)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0xb52be28)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x4d66e18)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x51036c8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0xb4c2bb8)]: 1610 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0xb549488)]: 0 failure(s)
2024-04-29 22:43:57 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x74b5608)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0xb541318)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0xb52be28)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x4d66e18)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x51036c8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0xb4c2bb8)]: 2011 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0xb549488)]: 0 failure(s)
2024-04-29 22:44:03 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x74b5608)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0xb541318)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0xb52be28)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x4d66e18)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x51036c8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0xb4c2bb8)]: 2413 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0xb549488)]: 0 failure(s)
2024-04-29 22:44:10 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x74b5608)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0xb541318)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0xb52be28)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x4d66e18)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x51036c8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0xb4c2bb8)]: 2814 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0xb549488)]: 0 failure(s)
2024-04-29 22:44:10 [INFO] [evolutionary_search.cc:723] Sampled 56 candidate(s)
2024-04-29 22:44:31 [INFO] [evolutionary_search.cc:621] Evolve iter #0 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x74b5608)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0xb541318)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0xb52be28)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x4d66e18)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x51036c8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0xb4c2bb8)]: 132 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0xb549488)]: 0 failure(s)
2024-04-29 22:44:54 [INFO] [evolutionary_search.cc:621] Evolve iter #1 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x74b5608)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0xb541318)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0xb52be28)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x4d66e18)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x51036c8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0xb4c2bb8)]: 108 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0xb549488)]: 0 failure(s)
2024-04-29 22:45:16 [INFO] [evolutionary_search.cc:621] Evolve iter #2 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x74b5608)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0xb541318)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0xb52be28)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x4d66e18)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x51036c8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0xb4c2bb8)]: 93 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0xb549488)]: 0 failure(s)
2024-04-29 22:45:39 [INFO] [evolutionary_search.cc:621] Evolve iter #3 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x74b5608)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0xb541318)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0xb52be28)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x4d66e18)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x51036c8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0xb4c2bb8)]: 91 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0xb549488)]: 0 failure(s)
2024-04-29 22:45:45 [INFO] [evolutionary_search.cc:649] Scores of the best 64 candidates:
[1 : 16]:	0.9802  0.9721  0.9708  0.9706  0.9700  0.9698  0.9696  0.9639  0.9639  0.9633  0.9619  0.9571  0.9548  0.9543  0.9534  0.9531
[17 : 32]:	0.9528  0.9527  0.9524  0.9524  0.9509  0.9508  0.9460  0.9451  0.9451  0.9433  0.9420  0.9413  0.9413  0.9413  0.9400  0.9188
[33 : 48]:	0.9183  0.9181  0.9121  0.9115  0.9108  0.9095  0.9093  0.8998  0.8981  0.8939  0.8938  0.8938  0.8931  0.8877  0.8873  0.8872
[49 : 64]:	0.8853  0.8851  0.8826  0.8823  0.8714  0.8709  0.8673  0.8665  0.8645  0.8645  0.8645  0.8642  0.8640  0.8640  0.8627  0.8627
2024-04-29 22:45:45 [INFO] [evolutionary_search.cc:727] Got 64 candidate(s) with evolutionary search
2024-04-29 22:45:45 [INFO] [evolutionary_search.cc:730] Sending 64 candidates(s) for measurement
2024-04-29 22:47:06 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_4] Trial #385: GFLOPs: 9254.6701. Time: 70.0483 us. Best GFLOPs: 9483.5248
2024-04-29 22:47:06 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_4] Trial #386: GFLOPs: 9084.4766. Time: 71.3606 us. Best GFLOPs: 9483.5248
2024-04-29 22:47:06 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_4] Trial #387: GFLOPs: 9261.9827. Time: 69.9930 us. Best GFLOPs: 9483.5248
2024-04-29 22:47:06 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_4] Trial #388: GFLOPs: 8993.1911. Time: 72.0850 us. Best GFLOPs: 9483.5248
2024-04-29 22:47:06 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_4] Trial #389: GFLOPs: 9097.4082. Time: 71.2592 us. Best GFLOPs: 9483.5248
2024-04-29 22:47:06 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_4] Trial #390: GFLOPs: 9353.1788. Time: 69.3105 us. Best GFLOPs: 9483.5248
2024-04-29 22:47:06 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_4] Trial #391: GFLOPs: 9190.1959. Time: 70.5397 us. Best GFLOPs: 9483.5248
2024-04-29 22:47:06 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_4] Trial #392: GFLOPs: 8982.4953. Time: 72.1708 us. Best GFLOPs: 9483.5248
2024-04-29 22:47:06 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_4] Trial #393: GFLOPs: 8975.0737. Time: 72.2305 us. Best GFLOPs: 9483.5248
2024-04-29 22:47:06 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_4] Trial #394: GFLOPs: 8924.4690. Time: 72.6401 us. Best GFLOPs: 9483.5248
2024-04-29 22:47:06 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_4] Trial #395: GFLOPs: 9126.4089. Time: 71.0328 us. Best GFLOPs: 9483.5248
2024-04-29 22:47:06 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_4] Trial #396: GFLOPs: 9109.4938. Time: 71.1646 us. Best GFLOPs: 9483.5248
2024-04-29 22:47:06 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_4] Trial #397: GFLOPs: 9132.1004. Time: 70.9885 us. Best GFLOPs: 9483.5248
2024-04-29 22:47:06 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_4] Trial #398: GFLOPs: 9062.3442. Time: 71.5349 us. Best GFLOPs: 9483.5248
2024-04-29 22:47:06 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_4] Trial #399: GFLOPs: 8907.4330. Time: 72.7790 us. Best GFLOPs: 9483.5248
2024-04-29 22:47:06 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_4] Trial #400: GFLOPs: 9275.2464. Time: 69.8929 us. Best GFLOPs: 9483.5248
2024-04-29 22:47:06 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_4] Trial #401: GFLOPs: 9158.9971. Time: 70.7800 us. Best GFLOPs: 9483.5248
2024-04-29 22:47:06 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_4] Trial #402: GFLOPs: 8927.8539. Time: 72.6125 us. Best GFLOPs: 9483.5248
2024-04-29 22:47:06 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_4] Trial #403: GFLOPs: 9200.5063. Time: 70.4607 us. Best GFLOPs: 9483.5248
2024-04-29 22:47:06 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_4] Trial #404: GFLOPs: 9200.6750. Time: 70.4594 us. Best GFLOPs: 9483.5248
2024-04-29 22:47:06 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_4] Trial #405: GFLOPs: 8939.1309. Time: 72.5209 us. Best GFLOPs: 9483.5248
2024-04-29 22:47:06 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_4] Trial #406: GFLOPs: 8939.0619. Time: 72.5215 us. Best GFLOPs: 9483.5248
2024-04-29 22:47:06 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_4] Trial #407: GFLOPs: 9122.0613. Time: 71.0666 us. Best GFLOPs: 9483.5248
2024-04-29 22:47:06 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_4] Trial #408: GFLOPs: 9302.7137. Time: 69.6865 us. Best GFLOPs: 9483.5248
2024-04-29 22:47:06 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_4] Trial #409: GFLOPs: 9130.4756. Time: 71.0011 us. Best GFLOPs: 9483.5248
2024-04-29 22:47:06 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_4] Trial #410: GFLOPs: 8940.0951. Time: 72.5131 us. Best GFLOPs: 9483.5248
2024-04-29 22:47:06 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_4] Trial #411: GFLOPs: 9010.0880. Time: 71.9498 us. Best GFLOPs: 9483.5248
2024-04-29 22:47:06 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_4] Trial #412: GFLOPs: 8951.0132. Time: 72.4246 us. Best GFLOPs: 9483.5248
2024-04-29 22:47:06 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_4] Trial #413: GFLOPs: 8949.8034. Time: 72.4344 us. Best GFLOPs: 9483.5248
2024-04-29 22:47:06 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_4] Trial #414: GFLOPs: 9301.7042. Time: 69.6941 us. Best GFLOPs: 9483.5248
2024-04-29 22:47:06 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_4] Trial #415: GFLOPs: 8949.0419. Time: 72.4406 us. Best GFLOPs: 9483.5248
2024-04-29 22:47:06 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_4] Trial #416: GFLOPs: 8963.1808. Time: 72.3263 us. Best GFLOPs: 9483.5248
2024-04-29 22:47:06 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_4] Trial #417: GFLOPs: 9296.0342. Time: 69.7366 us. Best GFLOPs: 9483.5248
2024-04-29 22:47:06 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_4] Trial #418: GFLOPs: 8992.7303. Time: 72.0887 us. Best GFLOPs: 9483.5248
2024-04-29 22:47:06 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_4] Trial #419: GFLOPs: 9225.0698. Time: 70.2731 us. Best GFLOPs: 9483.5248
2024-04-29 22:47:06 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_4] Trial #420: GFLOPs: 8891.4591. Time: 72.9097 us. Best GFLOPs: 9483.5248
2024-04-29 22:47:06 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_4] Trial #421: GFLOPs: 8823.8694. Time: 73.4682 us. Best GFLOPs: 9483.5248
2024-04-29 22:47:06 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_4] Trial #422: GFLOPs: 8621.8773. Time: 75.1894 us. Best GFLOPs: 9483.5248
2024-04-29 22:47:06 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_4] Trial #423: GFLOPs: 9041.1404. Time: 71.7027 us. Best GFLOPs: 9483.5248
2024-04-29 22:47:06 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_4] Trial #424: GFLOPs: 8422.0841. Time: 76.9731 us. Best GFLOPs: 9483.5248
2024-04-29 22:47:06 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_4] Trial #425: GFLOPs: 8315.3794. Time: 77.9608 us. Best GFLOPs: 9483.5248
2024-04-29 22:47:06 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_4] Trial #426: GFLOPs: 8345.2165. Time: 77.6821 us. Best GFLOPs: 9483.5248
2024-04-29 22:47:06 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_4] Trial #427: GFLOPs: 8222.6123. Time: 78.8404 us. Best GFLOPs: 9483.5248
2024-04-29 22:47:06 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_4] Trial #428: GFLOPs: 8142.1304. Time: 79.6197 us. Best GFLOPs: 9483.5248
2024-04-29 22:47:06 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_4] Trial #429: GFLOPs: 8216.5922. Time: 78.8981 us. Best GFLOPs: 9483.5248
2024-04-29 22:47:06 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_4] Trial #430: GFLOPs: 8458.9844. Time: 76.6373 us. Best GFLOPs: 9483.5248
2024-04-29 22:47:06 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_4] Trial #431: GFLOPs: 8447.6767. Time: 76.7399 us. Best GFLOPs: 9483.5248
2024-04-29 22:47:06 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_4] Trial #432: GFLOPs: 8373.7554. Time: 77.4173 us. Best GFLOPs: 9483.5248
2024-04-29 22:47:06 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_4] Trial #433: GFLOPs: 8379.3001. Time: 77.3661 us. Best GFLOPs: 9483.5248
2024-04-29 22:47:06 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_4] Trial #434: GFLOPs: 8273.3951. Time: 78.3565 us. Best GFLOPs: 9483.5248
2024-04-29 22:47:06 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_4] Trial #435: GFLOPs: 7900.1785. Time: 82.0581 us. Best GFLOPs: 9483.5248
2024-04-29 22:47:06 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_4] Trial #436: GFLOPs: 8119.1809. Time: 79.8447 us. Best GFLOPs: 9483.5248
2024-04-29 22:47:06 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_4] Trial #437: GFLOPs: 7641.1831. Time: 84.8395 us. Best GFLOPs: 9483.5248
2024-04-29 22:47:06 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_4] Trial #438: GFLOPs: 8567.4458. Time: 75.6671 us. Best GFLOPs: 9483.5248
2024-04-29 22:47:06 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_4] Trial #439: GFLOPs: 8720.9545. Time: 74.3352 us. Best GFLOPs: 9483.5248
2024-04-29 22:47:06 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_4] Trial #440: GFLOPs: 7465.0545. Time: 86.8411 us. Best GFLOPs: 9483.5248
2024-04-29 22:47:06 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_4] Trial #441: GFLOPs: 7928.4660. Time: 81.7654 us. Best GFLOPs: 9483.5248
2024-04-29 22:47:06 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_4] Trial #442: GFLOPs: 8648.3098. Time: 74.9596 us. Best GFLOPs: 9483.5248
2024-04-29 22:47:06 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_4] Trial #443: GFLOPs: 8065.4273. Time: 80.3769 us. Best GFLOPs: 9483.5248
2024-04-29 22:47:06 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_4] Trial #444: GFLOPs: 8095.6831. Time: 80.0765 us. Best GFLOPs: 9483.5248
2024-04-29 22:47:06 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_4] Trial #445: GFLOPs: 7958.8317. Time: 81.4534 us. Best GFLOPs: 9483.5248
2024-04-29 22:47:06 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_4] Trial #446: GFLOPs: 2088.1575. Time: 310.4526 us. Best GFLOPs: 9483.5248
2024-04-29 22:47:06 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_4] Trial #447: GFLOPs: 148.0874. Time: 4377.6444 us. Best GFLOPs: 9483.5248
2024-04-29 22:47:06 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_4] Trial #448: GFLOPs: 47.0490. Time: 13778.6884 us. Best GFLOPs: 9483.5248
2024-04-29 23:31:21 [INFO] [evolutionary_search.cc:713] Generating candidates......
2024-04-29 23:31:25 [INFO] [evolutionary_search.cc:715] Picked top 102 candidate(s) from database
2024-04-29 23:31:32 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x74b5608)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0xb541318)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0xb52be28)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x4d66e18)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x51036c8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0xb4c2bb8)]: 402 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0xb549488)]: 0 failure(s)
2024-04-29 23:31:40 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x74b5608)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0xb541318)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0xb52be28)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x4d66e18)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x51036c8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0xb4c2bb8)]: 806 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0xb549488)]: 0 failure(s)
2024-04-29 23:31:47 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x74b5608)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0xb541318)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0xb52be28)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x4d66e18)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x51036c8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0xb4c2bb8)]: 1208 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0xb549488)]: 0 failure(s)
2024-04-29 23:31:55 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x74b5608)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0xb541318)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0xb52be28)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x4d66e18)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x51036c8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0xb4c2bb8)]: 1612 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0xb549488)]: 0 failure(s)
2024-04-29 23:32:02 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x74b5608)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0xb541318)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0xb52be28)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x4d66e18)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x51036c8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0xb4c2bb8)]: 2020 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0xb549488)]: 0 failure(s)
2024-04-29 23:32:09 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x74b5608)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0xb541318)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0xb52be28)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x4d66e18)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x51036c8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0xb4c2bb8)]: 2423 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0xb549488)]: 0 failure(s)
2024-04-29 23:32:16 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x74b5608)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0xb541318)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0xb52be28)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x4d66e18)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x51036c8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0xb4c2bb8)]: 2825 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0xb549488)]: 0 failure(s)
2024-04-29 23:32:24 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x74b5608)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0xb541318)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0xb52be28)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x4d66e18)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x51036c8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0xb4c2bb8)]: 3233 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0xb549488)]: 0 failure(s)
2024-04-29 23:32:31 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x74b5608)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0xb541318)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0xb52be28)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x4d66e18)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x51036c8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0xb4c2bb8)]: 3632 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0xb549488)]: 0 failure(s)
2024-04-29 23:32:31 [INFO] [evolutionary_search.cc:723] Sampled 58 candidate(s)
2024-04-29 23:32:51 [INFO] [evolutionary_search.cc:621] Evolve iter #0 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x74b5608)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0xb541318)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0xb52be28)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x4d66e18)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x51036c8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0xb4c2bb8)]: 83 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0xb549488)]: 0 failure(s)
2024-04-29 23:33:14 [INFO] [evolutionary_search.cc:621] Evolve iter #1 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x74b5608)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0xb541318)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0xb52be28)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x4d66e18)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x51036c8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0xb4c2bb8)]: 90 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0xb549488)]: 0 failure(s)
2024-04-29 23:33:37 [INFO] [evolutionary_search.cc:621] Evolve iter #2 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x74b5608)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0xb541318)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0xb52be28)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x4d66e18)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x51036c8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0xb4c2bb8)]: 84 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0xb549488)]: 0 failure(s)
2024-04-29 23:34:00 [INFO] [evolutionary_search.cc:621] Evolve iter #3 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x74b5608)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0xb541318)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0xb52be28)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x4d66e18)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x51036c8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0xb4c2bb8)]: 78 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0xb549488)]: 0 failure(s)
2024-04-29 23:34:05 [INFO] [evolutionary_search.cc:649] Scores of the best 64 candidates:
[1 : 16]:	1.1565  1.1494  1.0067  1.0064  1.0007  0.9997  0.9967  0.9954  0.9885  0.9818  0.9795  0.9779  0.9777  0.9777  0.9777  0.9774
[17 : 32]:	0.9772  0.9771  0.9771  0.9768  0.9752  0.9752  0.9749  0.9749  0.9746  0.9746  0.9744  0.9743  0.9740  0.9736  0.9736  0.9734
[33 : 48]:	0.9734  0.9726  0.9724  0.9723  0.9717  0.9710  0.9707  0.9705  0.9705  0.9703  0.9700  0.9700  0.9700  0.9695  0.9695  0.9691
[49 : 64]:	0.9685  0.9685  0.9685  0.9685  0.9683  0.9683  0.9681  0.9681  0.9681  0.9669  0.9668  0.9667  0.9665  0.9658  0.9653  0.9642
2024-04-29 23:34:06 [INFO] [evolutionary_search.cc:727] Got 64 candidate(s) with evolutionary search
2024-04-29 23:34:06 [INFO] [evolutionary_search.cc:730] Sending 64 candidates(s) for measurement
2024-04-29 23:35:44 [INFO] [task_scheduler.cc:121] [Task #6: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_4] Trial #449: Error in building:
LocalBuilder: Timeout, killed after 30.0 seconds
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(128), T.int64(56), T.int64(56)), "float32"), p1: T.Buffer((T.int64(6), T.int64(6), T.int64(128), T.int64(256)), "float32"), p2: T.Buffer((T.int64(1), T.int64(256), T.int64(1), T.int64(1)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(256), T.int64(56), T.int64(56)), "float32")):
        T.func_attr({"layout_free_buffers": [1], "tir.noalias": T.bool(True)})
        # with T.block("root"):
        input_tile_local = T.alloc_buffer((T.int64(128), T.int64(196), T.int64(6), T.int64(6)), scope="local")
        data_pack = T.alloc_buffer((T.int64(6), T.int64(6), T.int64(128), T.int64(196)))
        bgemm = T.alloc_buffer((T.int64(6), T.int64(6), T.int64(256), T.int64(196)))
        inverse_local = T.alloc_buffer((T.int64(256), T.int64(196), T.int64(4), T.int64(4)), scope="local")
        data_pack_local = T.alloc_buffer((T.int64(6), T.int64(6), T.int64(128), T.int64(196)), scope="local")
        bgemm_local = T.alloc_buffer((T.int64(6), T.int64(6), T.int64(256), T.int64(196)), scope="local")
        data_pack_shared = T.alloc_buffer((T.int64(6), T.int64(6), T.int64(128), T.int64(196)), scope="shared")
        p1_shared = T.alloc_buffer((T.int64(6), T.int64(6), T.int64(128), T.int64(256)), scope="shared")
        for ci_p_fused_0 in T.thread_binding(T.int64(784), thread="blockIdx.x", annotations={"pragma_auto_unroll_max_step": 1024, "pragma_unroll_explicit": 1}):
            for ci_p_fused_1 in T.thread_binding(T.int64(32), thread="threadIdx.x"):
                for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(1), T.int64(6), T.int64(6)):
                    with T.block("input_tile"):
                        v_ci = T.axis.spatial(T.int64(128), (ci_p_fused_0 * T.int64(32) + ci_p_fused_1) // T.int64(196) + ax0)
                        v_p = T.axis.spatial(T.int64(196), (ci_p_fused_0 * T.int64(32) + ci_p_fused_1) % T.int64(196) + ax1)
                        v_eps, v_nu = T.axis.remap("SS", [ax2, ax3])
                        T.reads(p0[v_p // T.int64(196), v_ci, v_p % T.int64(196) // T.int64(14) * T.int64(4) + v_eps - T.int64(1), v_p % T.int64(14) * T.int64(4) + v_nu - T.int64(1)])
                        T.writes(input_tile_local[v_ci, v_p, v_eps, v_nu])
                        T.block_attr({"schedule_rule": "None"})
                        input_tile_local[v_ci, v_p, v_eps, v_nu] = T.if_then_else(T.int64(1) <= v_p % T.int64(196) // T.int64(14) * T.int64(4) + v_eps and v_p % T.int64(196) // T.int64(14) * T.int64(4) + v_eps < T.int64(57) and T.int64(1) <= v_p % T.int64(14) * T.int64(4) + v_nu and v_p % T.int64(14) * T.int64(4) + v_nu < T.int64(57), p0[v_p // T.int64(196), v_ci, v_p % T.int64(196) // T.int64(14) * T.int64(4) + v_eps - T.int64(1), v_p % T.int64(14) * T.int64(4) + v_nu - T.int64(1)], T.float32(0))
                for eps in T.unroll(T.int64(6)):
                    for nu in T.unroll(T.int64(6)):
                        with T.block("data_pack_init"):
                            v_eps, v_nu = T.axis.remap("SS", [eps, nu])
                            v_ci = T.axis.spatial(T.int64(128), (ci_p_fused_0 * T.int64(32) + ci_p_fused_1) // T.int64(196))
                            v_p = T.axis.spatial(T.int64(196), (ci_p_fused_0 * T.int64(32) + ci_p_fused_1) % T.int64(196))
                            T.reads()
                            T.writes(data_pack_local[v_eps, v_nu, v_ci, v_p])
                            T.block_attr({"schedule_rule": "conv2d_nchw_winograd_data_pack"})
                            data_pack_local[v_eps, v_nu, v_ci, v_p] = T.float32(0)
                        for r_a in T.unroll(T.int64(6)):
                            for r_b in T.unroll(T.int64(6)):
                                with T.block("data_pack_update"):
                                    v_eps, v_nu = T.axis.remap("SS", [eps, nu])
                                    v_ci = T.axis.spatial(T.int64(128), (ci_p_fused_0 * T.int64(32) + ci_p_fused_1) // T.int64(196))
                                    v_p = T.axis.spatial(T.int64(196), (ci_p_fused_0 * T.int64(32) + ci_p_fused_1) % T.int64(196))
                                    v_r_a, v_r_b = T.axis.remap("RR", [r_a, r_b])
                                    T.reads(data_pack_local[v_eps, v_nu, v_ci, v_p], input_tile_local[v_ci, v_p, v_r_a, v_r_b])
                                    T.writes(data_pack_local[v_eps, v_nu, v_ci, v_p])
                                    T.block_attr({"schedule_rule": "conv2d_nchw_winograd_data_pack"})
                                    data_pack_local[v_eps, v_nu, v_ci, v_p] = data_pack_local[v_eps, v_nu, v_ci, v_p] + input_tile_local[v_ci, v_p, v_r_a, v_r_b] * T.Select(v_r_a % T.int64(6) == T.int64(5) and v_eps % T.int64(6) == T.int64(5), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(5) and v_eps % T.int64(6) == T.int64(4), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(5) and v_eps % T.int64(6) == T.int64(3), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(5) and v_eps % T.int64(6) == T.int64(2), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(5) and v_eps % T.int64(6) == T.int64(1), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(5) and v_eps % T.int64(6) == T.int64(0), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(4) and v_eps % T.int64(6) == T.int64(5), T.float32(1.5), T.Select(v_r_a % T.int64(6) == T.int64(4) and v_eps % T.int64(6) == T.int64(4), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(4) and v_eps % T.int64(6) == T.int64(3), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(4) and v_eps % T.int64(6) == T.int64(2), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(4) and v_eps % T.int64(6) == T.int64(1), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(4) and v_eps % T.int64(6) == T.int64(0), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(3) and v_eps % T.int64(6) == T.int64(5), T.float32(-2), T.Select(v_r_a % T.int64(6) == T.int64(3) and v_eps % T.int64(6) == T.int64(4), T.float32(-0.5), T.Select(v_r_a % T.int64(6) == T.int64(3) and v_eps % T.int64(6) == T.int64(3), T.float32(2), T.Select(v_r_a % T.int64(6) == T.int64(3) and v_eps % T.int64(6) == T.int64(2), T.float32(2.5), T.Select(v_r_a % T.int64(6) == T.int64(3) and v_eps % T.int64(6) == T.int64(1), T.float32(0.5), T.Select(v_r_a % T.int64(6) == T.int64(3) and v_eps % T.int64(6) == T.int64(0), T.float32(1.5), T.Select(v_r_a % T.int64(6) == T.int64(2) and v_eps % T.int64(6) == T.int64(5), T.float32(-1.5), T.Select(v_r_a % T.int64(6) == T.int64(2) and v_eps % T.int64(6) == T.int64(4), T.float32(-1), T.Select(v_r_a % T.int64(6) == T.int64(2) and v_eps % T.int64(6) == T.int64(3), T.float32(-1), T.Select(v_r_a % T.int64(6) == T.int64(2) and v_eps % T.int64(6) == T.int64(2), T.float32(0.5), T.Select(v_r_a % T.int64(6) == T.int64(2) and v_eps % T.int64(6) == T.int64(1), T.float32(-2.5), T.Select(v_r_a % T.int64(6) == T.int64(2) and v_eps % T.int64(6) == T.int64(0), T.float32(-2), T.Select(v_r_a % T.int64(6) == T.int64(1) and v_eps % T.int64(6) == T.int64(5), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(1) and v_eps % T.int64(6) == T.int64(4), T.float32(0.5), T.Select(v_r_a % T.int64(6) == T.int64(1) and v_eps % T.int64(6) == T.int64(3), T.float32(-2), T.Select(v_r_a % T.int64(6) == T.int64(1) and v_eps % T.int64(6) == T.int64(2), T.float32(-1), T.Select(v_r_a % T.int64(6) == T.int64(1) and v_eps % T.int64(6) == T.int64(1), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(1) and v_eps % T.int64(6) == T.int64(0), T.float32(-1.5), T.Select(v_r_a % T.int64(6) == T.int64(0) and v_eps % T.int64(6) == T.int64(5), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(0) and v_eps % T.int64(6) == T.int64(4), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(0) and v_eps % T.int64(6) == T.int64(3), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(0) and v_eps % T.int64(6) == T.int64(2), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(0) and v_eps % T.int64(6) == T.int64(1), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(0) and v_eps % T.int64(6) == T.int64(0), T.float32(1), T.float32(0))))))))))))))))))))))))))))))))))))) * T.Select(v_r_b % T.int64(6) == T.int64(5) and v_nu % T.int64(6) == T.int64(5), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(5) and v_nu % T.int64(6) == T.int64(4), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(5) and v_nu % T.int64(6) == T.int64(3), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(5) and v_nu % T.int64(6) == T.int64(2), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(5) and v_nu % T.int64(6) == T.int64(1), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(5) and v_nu % T.int64(6) == T.int64(0), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(4) and v_nu % T.int64(6) == T.int64(5), T.float32(1.5), T.Select(v_r_b % T.int64(6) == T.int64(4) and v_nu % T.int64(6) == T.int64(4), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(4) and v_nu % T.int64(6) == T.int64(3), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(4) and v_nu % T.int64(6) == T.int64(2), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(4) and v_nu % T.int64(6) == T.int64(1), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(4) and v_nu % T.int64(6) == T.int64(0), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(3) and v_nu % T.int64(6) == T.int64(5), T.float32(-2), T.Select(v_r_b % T.int64(6) == T.int64(3) and v_nu % T.int64(6) == T.int64(4), T.float32(-0.5), T.Select(v_r_b % T.int64(6) == T.int64(3) and v_nu % T.int64(6) == T.int64(3), T.float32(2), T.Select(v_r_b % T.int64(6) == T.int64(3) and v_nu % T.int64(6) == T.int64(2), T.float32(2.5), T.Select(v_r_b % T.int64(6) == T.int64(3) and v_nu % T.int64(6) == T.int64(1), T.float32(0.5), T.Select(v_r_b % T.int64(6) == T.int64(3) and v_nu % T.int64(6) == T.int64(0), T.float32(1.5), T.Select(v_r_b % T.int64(6) == T.int64(2) and v_nu % T.int64(6) == T.int64(5), T.float32(-1.5), T.Select(v_r_b % T.int64(6) == T.int64(2) and v_nu % T.int64(6) == T.int64(4), T.float32(-1), T.Select(v_r_b % T.int64(6) == T.int64(2) and v_nu % T.int64(6) == T.int64(3), T.float32(-1), T.Select(v_r_b % T.int64(6) == T.int64(2) and v_nu % T.int64(6) == T.int64(2), T.float32(0.5), T.Select(v_r_b % T.int64(6) == T.int64(2) and v_nu % T.int64(6) == T.int64(1), T.float32(-2.5), T.Select(v_r_b % T.int64(6) == T.int64(2) and v_nu % T.int64(6) == T.int64(0), T.float32(-2), T.Select(v_r_b % T.int64(6) == T.int64(1) and v_nu % T.int64(6) == T.int64(5), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(1) and v_nu % T.int64(6) == T.int64(4), T.float32(0.5), T.Select(v_r_b % T.int64(6) == T.int64(1) and v_nu % T.int64(6) == T.int64(3), T.float32(-2), T.Select(v_r_b % T.int64(6) == T.int64(1) and v_nu % T.int64(6) == T.int64(2), T.float32(-1), T.Select(v_r_b % T.int64(6) == T.int64(1) and v_nu % T.int64(6) == T.int64(1), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(1) and v_nu % T.int64(6) == T.int64(0), T.float32(-1.5), T.Select(v_r_b % T.int64(6) == T.int64(0) and v_nu % T.int64(6) == T.int64(5), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(0) and v_nu % T.int64(6) == T.int64(4), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(0) and v_nu % T.int64(6) == T.int64(3), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(0) and v_nu % T.int64(6) == T.int64(2), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(0) and v_nu % T.int64(6) == T.int64(1), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(0) and v_nu % T.int64(6) == T.int64(0), T.float32(1), T.float32(0)))))))))))))))))))))))))))))))))))))
                for ax0, ax1, ax2, ax3 in T.grid(T.int64(6), T.int64(6), T.int64(1), T.int64(1)):
                    with T.block("data_pack_local"):
                        v0, v1 = T.axis.remap("SS", [ax0, ax1])
                        v2 = T.axis.spatial(T.int64(128), (ci_p_fused_0 * T.int64(32) + ci_p_fused_1) // T.int64(196) + ax2)
                        v3 = T.axis.spatial(T.int64(196), (ci_p_fused_0 * T.int64(32) + ci_p_fused_1) % T.int64(196) + ax3)
                        T.reads(data_pack_local[v0, v1, v2, v3])
                        T.writes(data_pack[v0, v1, v2, v3])
                        data_pack[v0, v1, v2, v3] = data_pack_local[v0, v1, v2, v3]
        for eps_0_nu_0_co_0_p_0_fused in T.thread_binding(T.int64(144), thread="blockIdx.x", annotations={"pragma_auto_unroll_max_step": 1024, "pragma_unroll_explicit": 1}):
            for eps_1_nu_1_co_1_p_1_fused in T.thread_binding(T.int64(98), thread="vthread.x"):
                for eps_2_nu_2_co_2_p_2_fused in T.thread_binding(T.int64(32), thread="threadIdx.x"):
                    for eps_3_init, nu_3_init, co_3_init, p_3_init, eps_4_init, nu_4_init, co_4_init, p_4_init in T.grid(T.int64(1), T.int64(2), T.int64(2), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1)):
                        with T.block("bgemm_init"):
                            v_eps = T.axis.spatial(T.int64(6), eps_0_nu_0_co_0_p_0_fused // T.int64(24) + eps_3_init + eps_4_init)
                            v_nu = T.axis.spatial(T.int64(6), eps_0_nu_0_co_0_p_0_fused % T.int64(24) // T.int64(8) * T.int64(2) + nu_3_init + nu_4_init)
                            v_co = T.axis.spatial(T.int64(256), eps_0_nu_0_co_0_p_0_fused % T.int64(8) // T.int64(2) * T.int64(64) + eps_1_nu_1_co_1_p_1_fused // T.int64(49) * T.int64(32) + eps_2_nu_2_co_2_p_2_fused // T.int64(2) * T.int64(2) + co_3_init + co_4_init)
                            v_p = T.axis.spatial(T.int64(196), eps_0_nu_0_co_0_p_0_fused % T.int64(2) * T.int64(98) + eps_1_nu_1_co_1_p_1_fused % T.int64(49) * T.int64(2) + eps_2_nu_2_co_2_p_2_fused % T.int64(2) + p_3_init + p_4_init)
                            T.reads()
                            T.writes(bgemm_local[v_eps, v_nu, v_co, v_p])
                            T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 32, "meta_schedule.tiling_structure": "SSSRRSRS"})
                            bgemm_local[v_eps, v_nu, v_co, v_p] = T.float32(0)
                    for ci_0_fused in T.serial(T.int64(16), annotations={"software_pipeline_async_stages": [0], "software_pipeline_order": [0, 1, 2], "software_pipeline_stage": [0, 0, 2]}):
                        for ax0_ax1_ax2_ax3_fused_0 in range(T.int64(13)):
                            for ax0_ax1_ax2_ax3_fused_1 in T.thread_binding(T.int64(32), thread="threadIdx.x"):
                                for ax0_ax1_ax2_ax3_fused_2 in T.vectorized(T.int64(4)):
                                    with T.block("data_pack_shared"):
                                        v0 = T.axis.spatial(T.int64(6), eps_0_nu_0_co_0_p_0_fused // T.int64(24))
                                        v1 = T.axis.spatial(T.int64(6), eps_0_nu_0_co_0_p_0_fused % T.int64(24) // T.int64(8) * T.int64(2) + (ax0_ax1_ax2_ax3_fused_0 * T.int64(128) + ax0_ax1_ax2_ax3_fused_1 * T.int64(4) + ax0_ax1_ax2_ax3_fused_2) // T.int64(784))
                                        v2 = T.axis.spatial(T.int64(128), ci_0_fused * T.int64(8) + (ax0_ax1_ax2_ax3_fused_0 * T.int64(128) + ax0_ax1_ax2_ax3_fused_1 * T.int64(4) + ax0_ax1_ax2_ax3_fused_2) % T.int64(784) // T.int64(98))
                                        v3 = T.axis.spatial(T.int64(196), eps_0_nu_0_co_0_p_0_fused % T.int64(2) * T.int64(98) + (ax0_ax1_ax2_ax3_fused_0 * T.int64(128) + ax0_ax1_ax2_ax3_fused_1 * T.int64(4) + ax0_ax1_ax2_ax3_fused_2) % T.int64(98))
                                        T.where((ax0_ax1_ax2_ax3_fused_0 * T.int64(32) + ax0_ax1_ax2_ax3_fused_1) * T.int64(4) + ax0_ax1_ax2_ax3_fused_2 < T.int64(1568))
                                        T.reads(data_pack[v0, v1, v2, v3])
                                        T.writes(data_pack_shared[v0, v1, v2, v3])
                                        data_pack_shared[v0, v1, v2, v3] = data_pack[v0, v1, v2, v3]
                        for ax0_ax1_ax2_ax3_fused_0 in range(T.int64(32)):
                            for ax0_ax1_ax2_ax3_fused_1 in T.thread_binding(T.int64(32), thread="threadIdx.x"):
                                with T.block("p1_shared"):
                                    v0 = T.axis.spatial(T.int64(6), eps_0_nu_0_co_0_p_0_fused // T.int64(24))
                                    v1 = T.axis.spatial(T.int64(6), eps_0_nu_0_co_0_p_0_fused % T.int64(24) // T.int64(8) * T.int64(2) + (ax0_ax1_ax2_ax3_fused_0 * T.int64(32) + ax0_ax1_ax2_ax3_fused_1) // T.int64(512))
                                    v2 = T.axis.spatial(T.int64(128), ci_0_fused * T.int64(8) + (ax0_ax1_ax2_ax3_fused_0 * T.int64(32) + ax0_ax1_ax2_ax3_fused_1) % T.int64(512) // T.int64(64))
                                    v3 = T.axis.spatial(T.int64(256), eps_0_nu_0_co_0_p_0_fused % T.int64(8) // T.int64(2) * T.int64(64) + (ax0_ax1_ax2_ax3_fused_0 * T.int64(32) + ax0_ax1_ax2_ax3_fused_1) % T.int64(64))
                                    T.reads(p1[v0, v1, v2, v3])
                                    T.writes(p1_shared[v0, v1, v2, v3])
                                    p1_shared[v0, v1, v2, v3] = p1[v0, v1, v2, v3]
                        for ci_1, eps_3, nu_3, co_3, p_3, ci_2, eps_4, nu_4, co_4, p_4 in T.grid(T.int64(1), T.int64(1), T.int64(2), T.int64(2), T.int64(1), T.int64(8), T.int64(1), T.int64(1), T.int64(1), T.int64(1)):
                            with T.block("bgemm_update"):
                                v_eps = T.axis.spatial(T.int64(6), eps_0_nu_0_co_0_p_0_fused // T.int64(24) + eps_3 + eps_4)
                                v_nu = T.axis.spatial(T.int64(6), eps_0_nu_0_co_0_p_0_fused % T.int64(24) // T.int64(8) * T.int64(2) + nu_3 + nu_4)
                                v_co = T.axis.spatial(T.int64(256), eps_0_nu_0_co_0_p_0_fused % T.int64(8) // T.int64(2) * T.int64(64) + eps_1_nu_1_co_1_p_1_fused // T.int64(49) * T.int64(32) + eps_2_nu_2_co_2_p_2_fused // T.int64(2) * T.int64(2) + co_3 + co_4)
                                v_p = T.axis.spatial(T.int64(196), eps_0_nu_0_co_0_p_0_fused % T.int64(2) * T.int64(98) + eps_1_nu_1_co_1_p_1_fused % T.int64(49) * T.int64(2) + eps_2_nu_2_co_2_p_2_fused % T.int64(2) + p_3 + p_4)
                                v_ci = T.axis.reduce(T.int64(128), ci_0_fused * T.int64(8) + ci_1 * T.int64(8) + ci_2)
                                T.reads(bgemm_local[v_eps, v_nu, v_co, v_p], data_pack_shared[v_eps, v_nu, v_ci, v_p], p1_shared[v_eps, v_nu, v_ci, v_co])
                                T.writes(bgemm_local[v_eps, v_nu, v_co, v_p])
                                T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 32, "meta_schedule.tiling_structure": "SSSRRSRS"})
                                bgemm_local[v_eps, v_nu, v_co, v_p] = bgemm_local[v_eps, v_nu, v_co, v_p] + data_pack_shared[v_eps, v_nu, v_ci, v_p] * p1_shared[v_eps, v_nu, v_ci, v_co]
                    for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(2), T.int64(2), T.int64(1)):
                        with T.block("bgemm_local"):
                            v0 = T.axis.spatial(T.int64(6), eps_0_nu_0_co_0_p_0_fused // T.int64(24) + ax0)
                            v1 = T.axis.spatial(T.int64(6), eps_0_nu_0_co_0_p_0_fused % T.int64(24) // T.int64(8) * T.int64(2) + ax1)
                            v2 = T.axis.spatial(T.int64(256), eps_0_nu_0_co_0_p_0_fused % T.int64(8) // T.int64(2) * T.int64(64) + eps_1_nu_1_co_1_p_1_fused // T.int64(49) * T.int64(32) + eps_2_nu_2_co_2_p_2_fused // T.int64(2) * T.int64(2) + ax2)
                            v3 = T.axis.spatial(T.int64(196), eps_0_nu_0_co_0_p_0_fused % T.int64(2) * T.int64(98) + eps_1_nu_1_co_1_p_1_fused % T.int64(49) * T.int64(2) + eps_2_nu_2_co_2_p_2_fused % T.int64(2) + ax3)
                            T.reads(bgemm_local[v0, v1, v2, v3])
                            T.writes(bgemm[v0, v1, v2, v3])
                            bgemm[v0, v1, v2, v3] = bgemm_local[v0, v1, v2, v3]
        for n_co_h_0_w_0_fused_0 in T.thread_binding(T.int64(49), thread="blockIdx.x", annotations={"pragma_auto_unroll_max_step": 1024, "pragma_unroll_explicit": 1}):
            for n_co_h_0_w_0_fused_1 in T.thread_binding(T.int64(1024), thread="threadIdx.x"):
                for ax0, ax1 in T.grid(T.int64(1), T.int64(1)):
                    for ax2 in T.unroll(T.int64(4)):
                        for ax3 in T.unroll(T.int64(4)):
                            with T.block("inverse_init"):
                                v_co = T.axis.spatial(T.int64(256), (n_co_h_0_w_0_fused_0 * T.int64(1024) + n_co_h_0_w_0_fused_1) // T.int64(196) + ax0)
                                v_p = T.axis.spatial(T.int64(196), (n_co_h_0_w_0_fused_0 * T.int64(1024) + n_co_h_0_w_0_fused_1) % T.int64(196) + ax1)
                                v_vh, v_vw = T.axis.remap("SS", [ax2, ax3])
                                T.reads()
                                T.writes(inverse_local[v_co, v_p, v_vh, v_vw])
                                T.block_attr({"schedule_rule": "conv2d_nchw_winograd_inverse"})
                                inverse_local[v_co, v_p, v_vh, v_vw] = T.float32(0)
                            for ax4 in T.unroll(T.int64(6)):
                                for ax5 in T.unroll(T.int64(6)):
                                    with T.block("inverse_update"):
                                        v_co = T.axis.spatial(T.int64(256), (n_co_h_0_w_0_fused_0 * T.int64(1024) + n_co_h_0_w_0_fused_1) // T.int64(196) + ax0)
                                        v_p = T.axis.spatial(T.int64(196), (n_co_h_0_w_0_fused_0 * T.int64(1024) + n_co_h_0_w_0_fused_1) % T.int64(196) + ax1)
                                        v_vh, v_vw, v_r_a, v_r_b = T.axis.remap("SSRR", [ax2, ax3, ax4, ax5])
                                        T.reads(inverse_local[v_co, v_p, v_vh, v_vw], bgemm[v_r_a, v_r_b, v_co, v_p])
                                        T.writes(inverse_local[v_co, v_p, v_vh, v_vw])
                                        T.block_attr({"schedule_rule": "conv2d_nchw_winograd_inverse"})
                                        inverse_local[v_co, v_p, v_vh, v_vw] = inverse_local[v_co, v_p, v_vh, v_vw] + bgemm[v_r_a, v_r_b, v_co, v_p] * T.Select(v_r_a % T.int64(6) == T.int64(5) and v_vh % T.int64(4) == T.int64(3), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(5) and v_vh % T.int64(4) == T.int64(2), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(5) and v_vh % T.int64(4) == T.int64(1), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(5) and v_vh % T.int64(4) == T.int64(0), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(4) and v_vh % T.int64(4) == T.int64(3), T.float32(-8), T.Select(v_r_a % T.int64(6) == T.int64(4) and v_vh % T.int64(4) == T.int64(2), T.float32(4), T.Select(v_r_a % T.int64(6) == T.int64(4) and v_vh % T.int64(4) == T.int64(1), T.float32(-2), T.Select(v_r_a % T.int64(6) == T.int64(4) and v_vh % T.int64(4) == T.int64(0), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(3) and v_vh % T.int64(4) == T.int64(3), T.float32(0.125), T.Select(v_r_a % T.int64(6) == T.int64(3) and v_vh % T.int64(4) == T.int64(2), T.float32(0.25), T.Select(v_r_a % T.int64(6) == T.int64(3) and v_vh % T.int64(4) == T.int64(1), T.float32(0.5), T.Select(v_r_a % T.int64(6) == T.int64(3) and v_vh % T.int64(4) == T.int64(0), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(2) and v_vh % T.int64(4) == T.int64(3), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(2) and v_vh % T.int64(4) == T.int64(2), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(2) and v_vh % T.int64(4) == T.int64(1), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(2) and v_vh % T.int64(4) == T.int64(0), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(1) and v_vh % T.int64(4) == T.int64(3), T.float32(-1), T.Select(v_r_a % T.int64(6) == T.int64(1) and v_vh % T.int64(4) == T.int64(2), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(1) and v_vh % T.int64(4) == T.int64(1), T.float32(-1), T.Select(v_r_a % T.int64(6) == T.int64(1) and v_vh % T.int64(4) == T.int64(0), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(0) and v_vh % T.int64(4) == T.int64(3), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(0) and v_vh % T.int64(4) == T.int64(2), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(0) and v_vh % T.int64(4) == T.int64(1), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(0) and v_vh % T.int64(4) == T.int64(0), T.float32(1), T.float32(0))))))))))))))))))))))))) * T.Select(v_r_b % T.int64(6) == T.int64(5) and v_vw % T.int64(4) == T.int64(3), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(5) and v_vw % T.int64(4) == T.int64(2), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(5) and v_vw % T.int64(4) == T.int64(1), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(5) and v_vw % T.int64(4) == T.int64(0), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(4) and v_vw % T.int64(4) == T.int64(3), T.float32(-8), T.Select(v_r_b % T.int64(6) == T.int64(4) and v_vw % T.int64(4) == T.int64(2), T.float32(4), T.Select(v_r_b % T.int64(6) == T.int64(4) and v_vw % T.int64(4) == T.int64(1), T.float32(-2), T.Select(v_r_b % T.int64(6) == T.int64(4) and v_vw % T.int64(4) == T.int64(0), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(3) and v_vw % T.int64(4) == T.int64(3), T.float32(0.125), T.Select(v_r_b % T.int64(6) == T.int64(3) and v_vw % T.int64(4) == T.int64(2), T.float32(0.25), T.Select(v_r_b % T.int64(6) == T.int64(3) and v_vw % T.int64(4) == T.int64(1), T.float32(0.5), T.Select(v_r_b % T.int64(6) == T.int64(3) and v_vw % T.int64(4) == T.int64(0), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(2) and v_vw % T.int64(4) == T.int64(3), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(2) and v_vw % T.int64(4) == T.int64(2), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(2) and v_vw % T.int64(4) == T.int64(1), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(2) and v_vw % T.int64(4) == T.int64(0), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(1) and v_vw % T.int64(4) == T.int64(3), T.float32(-1), T.Select(v_r_b % T.int64(6) == T.int64(1) and v_vw % T.int64(4) == T.int64(2), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(1) and v_vw % T.int64(4) == T.int64(1), T.float32(-1), T.Select(v_r_b % T.int64(6) == T.int64(1) and v_vw % T.int64(4) == T.int64(0), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(0) and v_vw % T.int64(4) == T.int64(3), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(0) and v_vw % T.int64(4) == T.int64(2), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(0) and v_vw % T.int64(4) == T.int64(1), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(0) and v_vw % T.int64(4) == T.int64(0), T.float32(1), T.float32(0)))))))))))))))))))))))))
                for h_1, w_1 in T.grid(T.int64(4), T.int64(4)):
                    with T.block("conv2d_winograd"):
                        v_n = T.axis.spatial(T.int64(1), T.int64(0))
                        v_co = T.axis.spatial(T.int64(256), (n_co_h_0_w_0_fused_0 * T.int64(1024) + n_co_h_0_w_0_fused_1) // T.int64(196))
                        v_h = T.axis.spatial(T.int64(56), (n_co_h_0_w_0_fused_0 * T.int64(1024) + n_co_h_0_w_0_fused_1) % T.int64(196) // T.int64(14) * T.int64(4) + h_1)
                        v_w = T.axis.spatial(T.int64(56), (n_co_h_0_w_0_fused_0 * T.int64(1024) + n_co_h_0_w_0_fused_1) % T.int64(14) * T.int64(4) + w_1)
                        T.reads(inverse_local[v_co, v_n * T.int64(196) + v_h // T.int64(4) * T.int64(14) + v_w // T.int64(4), v_h % T.int64(4), v_w % T.int64(4)], p2[v_n, v_co, T.int64(0), T.int64(0)])
                        T.writes(T_relu[v_n, v_co, v_h, v_w])
                        T_relu[v_n, v_co, v_h, v_w] = T.max(inverse_local[v_co, v_n * T.int64(196) + v_h // T.int64(4) * T.int64(14) + v_w // T.int64(4), v_h % T.int64(4), v_w % T.int64(4)] + p2[v_n, v_co, T.int64(0), T.int64(0)], T.float32(0))
b0 = sch.get_block(name="data_pack", func_name="main")
b1 = sch.get_block(name="bgemm", func_name="main")
b2 = sch.get_block(name="inverse", func_name="main")
b3 = sch.get_block(name="conv2d_winograd", func_name="main")
b4 = sch.get_block(name="T_add", func_name="main")
b5 = sch.get_block(name="T_relu", func_name="main")
b6 = sch.get_block(name="root", func_name="main")
b7, b8 = sch.get_producers(block=b2)
sch.compute_inline(block=b8)
b9, = sch.get_consumers(block=b2)
l10, l11, l12, l13 = sch.get_loops(block=b9)
l14, l15 = sch.split(loop=l12, factors=[None, 4], preserve_unit_iters=True)
l16, l17 = sch.split(loop=l13, factors=[None, 4], preserve_unit_iters=True)
sch.reorder(l14, l16, l15, l17)
sch.compute_at(block=b2, loop=l16, preserve_unit_loops=True, index=-1)
sch.set_scope(block=b2, buffer_index=0, storage_scope="local")
l18, l19, l20, l21, l22, l23, l24, l25, l26, l27 = sch.get_loops(block=b2)
sch.unroll(loop=l24)
sch.unroll(loop=l25)
sch.unroll(loop=l26)
sch.unroll(loop=l27)
b28, b29 = sch.get_producers(block=b0)
sch.compute_inline(block=b29)
b30, = sch.get_producers(block=b28)
l31, l32, l33, l34, l35, l36 = sch.get_loops(block=b0)
sch.reorder(l33, l34, l31, l32, l35, l36)
sch.unroll(loop=l31)
sch.unroll(loop=l32)
sch.unroll(loop=l35)
sch.unroll(loop=l36)
l37 = sch.fuse(l33, l34, preserve_unit_iters=True)
v38 = sch.sample_categorical(candidates=[32, 64, 128, 256, 512, 1024], probs=[0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666], decision=0)
l39, l40 = sch.split(loop=l37, factors=[None, v38], preserve_unit_iters=True)
sch.bind(loop=l39, thread_axis="blockIdx.x")
sch.bind(loop=l40, thread_axis="threadIdx.x")
b41 = sch.cache_write(block=b0, write_buffer_index=0, storage_scope="local")
sch.reverse_compute_at(block=b41, loop=l40, preserve_unit_loops=True, index=-1)
sch.compute_at(block=b28, loop=l40, preserve_unit_loops=True, index=-1)
sch.set_scope(block=b28, buffer_index=0, storage_scope="local")
sch.compute_inline(block=b30)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSSRRSRS")
l42, l43, l44, l45, l46 = sch.get_loops(block=b1)
v47, v48, v49, v50, v51 = sch.sample_perfect_tile(loop=l42, n=5, max_innermost_factor=64, decision=[6, 1, 1, 1, 1])
l52, l53, l54, l55, l56 = sch.split(loop=l42, factors=[v47, v48, v49, v50, v51], preserve_unit_iters=True)
v57, v58, v59, v60, v61 = sch.sample_perfect_tile(loop=l43, n=5, max_innermost_factor=64, decision=[3, 1, 1, 2, 1])
l62, l63, l64, l65, l66 = sch.split(loop=l43, factors=[v57, v58, v59, v60, v61], preserve_unit_iters=True)
v67, v68, v69, v70, v71 = sch.sample_perfect_tile(loop=l44, n=5, max_innermost_factor=64, decision=[4, 2, 16, 2, 1])
l72, l73, l74, l75, l76 = sch.split(loop=l44, factors=[v67, v68, v69, v70, v71], preserve_unit_iters=True)
v77, v78, v79, v80, v81 = sch.sample_perfect_tile(loop=l45, n=5, max_innermost_factor=64, decision=[2, 49, 2, 1, 1])
l82, l83, l84, l85, l86 = sch.split(loop=l45, factors=[v77, v78, v79, v80, v81], preserve_unit_iters=True)
v87, v88, v89 = sch.sample_perfect_tile(loop=l46, n=3, max_innermost_factor=64, decision=[16, 1, 8])
l90, l91, l92 = sch.split(loop=l46, factors=[v87, v88, v89], preserve_unit_iters=True)
sch.reorder(l52, l62, l72, l82, l53, l63, l73, l83, l54, l64, l74, l84, l90, l91, l55, l65, l75, l85, l92, l56, l66, l76, l86)
l93 = sch.fuse(l52, l62, l72, l82, preserve_unit_iters=True)
sch.bind(loop=l93, thread_axis="blockIdx.x")
l94 = sch.fuse(l53, l63, l73, l83, preserve_unit_iters=True)
sch.bind(loop=l94, thread_axis="vthread.x")
l95 = sch.fuse(l54, l64, l74, l84, preserve_unit_iters=True)
sch.bind(loop=l95, thread_axis="threadIdx.x")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_low_inclusive", ann_val=32)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_high_inclusive", ann_val=1024)
b96 = sch.cache_write(block=b1, write_buffer_index=0, storage_scope="local")
sch.reverse_compute_at(block=b96, loop=l95, preserve_unit_loops=True, index=-1)
b97 = sch.cache_read(block=b1, read_buffer_index=0, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b97, loop=l90, preserve_unit_loops=True, index=-1)
l98, l99, l100, l101, l102, l103, l104, l105 = sch.get_loops(block=b97)
l106 = sch.fuse(l102, l103, l104, l105, preserve_unit_iters=True)
v107 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b97, ann_key="meta_schedule.cooperative_fetch", ann_val=v107)
b108 = sch.cache_read(block=b1, read_buffer_index=1, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b108, loop=l90, preserve_unit_loops=True, index=-1)
l109, l110, l111, l112, l113, l114, l115, l116 = sch.get_loops(block=b108)
l117 = sch.fuse(l113, l114, l115, l116, preserve_unit_iters=True)
v118 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=0)
sch.annotate(block_or_loop=b108, ann_key="meta_schedule.cooperative_fetch", ann_val=v118)
l119 = sch.fuse(l90, preserve_unit_iters=True)
sch.annotate(block_or_loop=l119, ann_key="software_pipeline_stage", ann_val=[0, 0, 2])
sch.annotate(block_or_loop=l119, ann_key="software_pipeline_order", ann_val=[0, 1, 2])
sch.annotate(block_or_loop=l119, ann_key="software_pipeline_async_stages", ann_val=[0])
sch.reverse_compute_inline(block=b5)
sch.reverse_compute_inline(block=b4)
v120 = sch.sample_categorical(candidates=[0, 16, 64, 512, 1024], probs=[0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001], decision=4)
sch.annotate(block_or_loop=b6, ann_key="meta_schedule.unroll_explicit", ann_val=v120)
l121, l122, l123, l124, l125, l126 = sch.get_loops(block=b3)
l127 = sch.fuse(l121, l122, l123, l124, preserve_unit_iters=True)
v128 = sch.sample_categorical(candidates=[32, 64, 128, 256, 512, 1024], probs=[0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666], decision=5)
l129, l130 = sch.split(loop=l127, factors=[None, v128], preserve_unit_iters=True)
sch.bind(loop=l129, thread_axis="blockIdx.x")
sch.bind(loop=l130, thread_axis="threadIdx.x")
sch.enter_postproc()
sch.unannotate(block_or_loop=b97, ann_key="meta_schedule.cooperative_fetch")
l131, l132, l133, l134, l135 = sch.get_loops(block=b97)
l136, l137, l138 = sch.split(loop=l135, factors=[None, 32, 4], preserve_unit_iters=True)
sch.vectorize(loop=l138)
sch.bind(loop=l137, thread_axis="threadIdx.x")
sch.unannotate(block_or_loop=b108, ann_key="meta_schedule.cooperative_fetch")
l139, l140, l141, l142, l143 = sch.get_loops(block=b108)
l144, l145 = sch.split(loop=l143, factors=[None, 32], preserve_unit_iters=True)
sch.bind(loop=l145, thread_axis="threadIdx.x")
b146 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b146, ann_key="meta_schedule.unroll_explicit")
b147, b148, b149, b150, b151, b152, b153, b154, b155 = sch.get_child_blocks(b146)
l156, l157, l158, l159, l160, l161 = sch.get_loops(block=b147)
l162, l163, l164, l165, l166, l167 = sch.get_loops(block=b148)
sch.annotate(block_or_loop=l162, ann_key="pragma_auto_unroll_max_step", ann_val=1024)
sch.annotate(block_or_loop=l162, ann_key="pragma_unroll_explicit", ann_val=1)
l168, l169, l170, l171, l172, l173 = sch.get_loops(block=b149)
l174, l175, l176, l177, l178, l179, l180 = sch.get_loops(block=b150)
l181, l182, l183, l184, l185, l186 = sch.get_loops(block=b151)
l187, l188, l189, l190, l191, l192, l193, l194, l195, l196, l197, l198, l199, l200 = sch.get_loops(block=b152)
sch.annotate(block_or_loop=l187, ann_key="pragma_auto_unroll_max_step", ann_val=1024)
sch.annotate(block_or_loop=l187, ann_key="pragma_unroll_explicit", ann_val=1)
l201, l202, l203, l204, l205, l206, l207 = sch.get_loops(block=b153)
l208, l209, l210, l211, l212, l213, l214, l215 = sch.get_loops(block=b154)
sch.annotate(block_or_loop=l208, ann_key="pragma_auto_unroll_max_step", ann_val=1024)
sch.annotate(block_or_loop=l208, ann_key="pragma_unroll_explicit", ann_val=1)
l216, l217, l218, l219 = sch.get_loops(block=b155)
b220 = sch.get_block(name="data_pack", func_name="main")
l221, l222, l223, l224, l225, l226 = sch.get_loops(block=b220)
b227 = sch.decompose_reduction(block=b220, loop=l225)
b228 = sch.get_block(name="bgemm", func_name="main")
l229, l230, l231, l232, l233, l234, l235, l236, l237, l238, l239, l240, l241, l242 = sch.get_loops(block=b228)
b243 = sch.decompose_reduction(block=b228, loop=l232)
b244 = sch.get_block(name="inverse", func_name="main")
l245, l246, l247, l248, l249, l250, l251, l252 = sch.get_loops(block=b244)
b253 = sch.decompose_reduction(block=b244, loop=l251)
2024-04-29 23:35:44 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_4] Trial #450: GFLOPs: 1096.7561. Time: 591.0830 us. Best GFLOPs: 9483.5248
2024-04-29 23:35:44 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_4] Trial #451: GFLOPs: 9176.6746. Time: 70.6437 us. Best GFLOPs: 9483.5248
2024-04-29 23:35:44 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_4] Trial #452: GFLOPs: 9203.1737. Time: 70.4403 us. Best GFLOPs: 9483.5248
2024-04-29 23:35:44 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_4] Trial #453: GFLOPs: 9189.0730. Time: 70.5483 us. Best GFLOPs: 9483.5248
2024-04-29 23:35:44 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_4] Trial #454: GFLOPs: 9223.7940. Time: 70.2828 us. Best GFLOPs: 9483.5248
2024-04-29 23:35:44 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_4] Trial #455: GFLOPs: 9171.4141. Time: 70.6842 us. Best GFLOPs: 9483.5248
2024-04-29 23:35:44 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_4] Trial #456: GFLOPs: 9154.3084. Time: 70.8163 us. Best GFLOPs: 9483.5248
2024-04-29 23:35:44 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_4] Trial #457: GFLOPs: 9174.9008. Time: 70.6573 us. Best GFLOPs: 9483.5248
2024-04-29 23:35:44 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_4] Trial #458: GFLOPs: 9070.5272. Time: 71.4704 us. Best GFLOPs: 9483.5248
2024-04-29 23:35:44 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_4] Trial #459: GFLOPs: 9129.0931. Time: 71.0119 us. Best GFLOPs: 9483.5248
2024-04-29 23:35:44 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_4] Trial #460: GFLOPs: 9191.5736. Time: 70.5292 us. Best GFLOPs: 9483.5248
2024-04-29 23:35:44 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_4] Trial #461: GFLOPs: 9308.1837. Time: 69.6456 us. Best GFLOPs: 9483.5248
2024-04-29 23:35:44 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_4] Trial #462: GFLOPs: 9229.9858. Time: 70.2356 us. Best GFLOPs: 9483.5248
2024-04-29 23:35:44 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_4] Trial #463: GFLOPs: 9229.4697. Time: 70.2396 us. Best GFLOPs: 9483.5248
2024-04-29 23:35:44 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_4] Trial #464: GFLOPs: 9428.2875. Time: 68.7584 us. Best GFLOPs: 9483.5248
2024-04-29 23:35:44 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_4] Trial #465: GFLOPs: 9270.4432. Time: 69.9291 us. Best GFLOPs: 9483.5248
2024-04-29 23:35:44 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_4] Trial #466: GFLOPs: 9332.8743. Time: 69.4613 us. Best GFLOPs: 9483.5248
2024-04-29 23:35:44 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_4] Trial #467: GFLOPs: 9334.5097. Time: 69.4492 us. Best GFLOPs: 9483.5248
2024-04-29 23:35:44 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_4] Trial #468: GFLOPs: 9268.6295. Time: 69.9428 us. Best GFLOPs: 9483.5248
2024-04-29 23:35:44 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_4] Trial #469: GFLOPs: 9108.9789. Time: 71.1687 us. Best GFLOPs: 9483.5248
2024-04-29 23:35:44 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_4] Trial #470: GFLOPs: 9106.8862. Time: 71.1850 us. Best GFLOPs: 9483.5248
2024-04-29 23:35:44 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_4] Trial #471: GFLOPs: 8920.2316. Time: 72.6746 us. Best GFLOPs: 9483.5248
2024-04-29 23:35:44 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_4] Trial #472: GFLOPs: 8920.2485. Time: 72.6744 us. Best GFLOPs: 9483.5248
2024-04-29 23:35:44 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_4] Trial #473: GFLOPs: 9282.3465. Time: 69.8394 us. Best GFLOPs: 9483.5248
2024-04-29 23:35:44 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_4] Trial #474: GFLOPs: 9316.4227. Time: 69.5840 us. Best GFLOPs: 9483.5248
2024-04-29 23:35:44 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_4] Trial #475: GFLOPs: 9353.3098. Time: 69.3096 us. Best GFLOPs: 9483.5248
2024-04-29 23:35:44 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_4] Trial #476: GFLOPs: 9011.4582. Time: 71.9388 us. Best GFLOPs: 9483.5248
2024-04-29 23:35:44 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_4] Trial #477: GFLOPs: 9502.2211. Time: 68.2234 us. Best GFLOPs: 9502.2211
2024-04-29 23:35:44 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_4] Trial #478: GFLOPs: 9371.4211. Time: 69.1756 us. Best GFLOPs: 9502.2211
2024-04-29 23:35:44 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_4] Trial #479: GFLOPs: 9230.9214. Time: 70.2285 us. Best GFLOPs: 9502.2211
2024-04-29 23:35:44 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_4] Trial #480: GFLOPs: 9447.9392. Time: 68.6154 us. Best GFLOPs: 9502.2211
2024-04-29 23:35:44 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_4] Trial #481: GFLOPs: 9349.1769. Time: 69.3402 us. Best GFLOPs: 9502.2211
2024-04-29 23:35:44 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_4] Trial #482: GFLOPs: 9141.7230. Time: 70.9138 us. Best GFLOPs: 9502.2211
2024-04-29 23:35:44 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_4] Trial #483: GFLOPs: 8750.6962. Time: 74.0826 us. Best GFLOPs: 9502.2211
2024-04-29 23:35:44 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_4] Trial #484: GFLOPs: 9320.8877. Time: 69.5507 us. Best GFLOPs: 9502.2211
2024-04-29 23:35:44 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_4] Trial #485: GFLOPs: 9467.7256. Time: 68.4720 us. Best GFLOPs: 9502.2211
2024-04-29 23:35:44 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_4] Trial #486: GFLOPs: 9282.5227. Time: 69.8381 us. Best GFLOPs: 9502.2211
2024-04-29 23:35:44 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_4] Trial #487: GFLOPs: 9450.6816. Time: 68.5955 us. Best GFLOPs: 9502.2211
2024-04-29 23:35:44 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_4] Trial #488: GFLOPs: 8975.8721. Time: 72.2241 us. Best GFLOPs: 9502.2211
2024-04-29 23:35:44 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_4] Trial #489: GFLOPs: 8965.5255. Time: 72.3074 us. Best GFLOPs: 9502.2211
2024-04-29 23:35:44 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_4] Trial #490: GFLOPs: 9059.8402. Time: 71.5547 us. Best GFLOPs: 9502.2211
2024-04-29 23:35:44 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_4] Trial #491: GFLOPs: 9402.7335. Time: 68.9453 us. Best GFLOPs: 9502.2211
2024-04-29 23:35:44 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_4] Trial #492: GFLOPs: 9407.8843. Time: 68.9075 us. Best GFLOPs: 9502.2211
2024-04-29 23:35:44 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_4] Trial #493: GFLOPs: 9391.6200. Time: 69.0268 us. Best GFLOPs: 9502.2211
2024-04-29 23:35:44 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_4] Trial #494: GFLOPs: 9017.9704. Time: 71.8869 us. Best GFLOPs: 9502.2211
2024-04-29 23:35:44 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_4] Trial #495: GFLOPs: 9084.4878. Time: 71.3605 us. Best GFLOPs: 9502.2211
2024-04-29 23:35:44 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_4] Trial #496: GFLOPs: 8637.5803. Time: 75.0527 us. Best GFLOPs: 9502.2211
2024-04-29 23:35:44 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_4] Trial #497: GFLOPs: 9219.1037. Time: 70.3185 us. Best GFLOPs: 9502.2211
2024-04-29 23:35:44 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_4] Trial #498: GFLOPs: 9182.8398. Time: 70.5962 us. Best GFLOPs: 9502.2211
2024-04-29 23:35:44 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_4] Trial #499: GFLOPs: 9219.8067. Time: 70.3132 us. Best GFLOPs: 9502.2211
2024-04-29 23:35:44 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_4] Trial #500: GFLOPs: 9138.9416. Time: 70.9353 us. Best GFLOPs: 9502.2211
2024-04-29 23:35:44 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_4] Trial #501: GFLOPs: 9296.6204. Time: 69.7322 us. Best GFLOPs: 9502.2211
2024-04-29 23:35:44 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_4] Trial #502: GFLOPs: 9299.1183. Time: 69.7135 us. Best GFLOPs: 9502.2211
2024-04-29 23:35:44 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_4] Trial #503: GFLOPs: 8981.5832. Time: 72.1781 us. Best GFLOPs: 9502.2211
2024-04-29 23:35:44 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_4] Trial #504: GFLOPs: 9045.4818. Time: 71.6683 us. Best GFLOPs: 9502.2211
2024-04-29 23:35:44 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_4] Trial #505: GFLOPs: 9026.4596. Time: 71.8193 us. Best GFLOPs: 9502.2211
2024-04-29 23:35:44 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_4] Trial #506: GFLOPs: 8946.3586. Time: 72.4623 us. Best GFLOPs: 9502.2211
2024-04-29 23:35:44 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_4] Trial #507: GFLOPs: 9249.2676. Time: 70.0892 us. Best GFLOPs: 9502.2211
2024-04-29 23:35:44 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_4] Trial #508: GFLOPs: 8954.2970. Time: 72.3981 us. Best GFLOPs: 9502.2211
2024-04-29 23:35:44 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_4] Trial #509: GFLOPs: 9061.0257. Time: 71.5453 us. Best GFLOPs: 9502.2211
2024-04-29 23:35:44 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_4] Trial #510: GFLOPs: 8143.3099. Time: 79.6082 us. Best GFLOPs: 9502.2211
2024-04-29 23:35:44 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_4] Trial #511: GFLOPs: 5997.3534. Time: 108.0933 us. Best GFLOPs: 9502.2211
2024-04-29 23:35:44 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_4] Trial #512: GFLOPs: 2586.0222. Time: 250.6838 us. Best GFLOPs: 9502.2211
2024-04-30 00:21:26 [INFO] [evolutionary_search.cc:713] Generating candidates......
2024-04-30 00:21:30 [INFO] [evolutionary_search.cc:715] Picked top 102 candidate(s) from database
2024-04-30 00:21:37 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x74b5608)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0xb541318)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0xb52be28)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x4d66e18)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x51036c8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0xb4c2bb8)]: 404 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0xb549488)]: 0 failure(s)
2024-04-30 00:21:44 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x74b5608)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0xb541318)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0xb52be28)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x4d66e18)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x51036c8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0xb4c2bb8)]: 804 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0xb549488)]: 0 failure(s)
2024-04-30 00:21:51 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x74b5608)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0xb541318)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0xb52be28)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x4d66e18)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x51036c8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0xb4c2bb8)]: 1208 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0xb549488)]: 0 failure(s)
2024-04-30 00:21:58 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x74b5608)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0xb541318)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0xb52be28)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x4d66e18)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x51036c8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0xb4c2bb8)]: 1612 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0xb549488)]: 0 failure(s)
2024-04-30 00:22:05 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x74b5608)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0xb541318)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0xb52be28)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x4d66e18)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x51036c8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0xb4c2bb8)]: 2012 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0xb549488)]: 0 failure(s)
2024-04-30 00:22:12 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x74b5608)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0xb541318)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0xb52be28)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x4d66e18)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x51036c8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0xb4c2bb8)]: 2417 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0xb549488)]: 0 failure(s)
2024-04-30 00:22:18 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x74b5608)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0xb541318)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0xb52be28)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x4d66e18)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x51036c8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0xb4c2bb8)]: 2818 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0xb549488)]: 0 failure(s)
2024-04-30 00:22:18 [INFO] [evolutionary_search.cc:723] Sampled 52 candidate(s)
2024-04-30 00:22:38 [INFO] [evolutionary_search.cc:621] Evolve iter #0 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x74b5608)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0xb541318)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0xb52be28)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x4d66e18)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x51036c8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0xb4c2bb8)]: 71 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0xb549488)]: 0 failure(s)
2024-04-30 00:23:00 [INFO] [evolutionary_search.cc:621] Evolve iter #1 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x74b5608)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0xb541318)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0xb52be28)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x4d66e18)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x51036c8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0xb4c2bb8)]: 82 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0xb549488)]: 0 failure(s)
2024-04-30 00:23:22 [INFO] [evolutionary_search.cc:621] Evolve iter #2 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x74b5608)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0xb541318)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0xb52be28)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x4d66e18)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x51036c8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0xb4c2bb8)]: 82 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0xb549488)]: 0 failure(s)
2024-04-30 00:23:45 [INFO] [evolutionary_search.cc:621] Evolve iter #3 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x74b5608)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0xb541318)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0xb52be28)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x4d66e18)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x51036c8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0xb4c2bb8)]: 89 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0xb549488)]: 0 failure(s)
2024-04-30 00:23:50 [INFO] [evolutionary_search.cc:649] Scores of the best 64 candidates:
[1 : 16]:	1.0180  1.0034  0.9899  0.9897  0.9890  0.9885  0.9874  0.9865  0.9863  0.9860  0.9860  0.9858  0.9855  0.9853  0.9843  0.9839
[17 : 32]:	0.9838  0.9837  0.9836  0.9835  0.9833  0.9830  0.9829  0.9826  0.9819  0.9817  0.9816  0.9815  0.9812  0.9808  0.9808  0.9807
[33 : 48]:	0.9805  0.9804  0.9800  0.9800  0.9798  0.9795  0.9795  0.9792  0.9792  0.9790  0.9787  0.9783  0.9783  0.9781  0.9774  0.9774
[49 : 64]:	0.9772  0.9767  0.9765  0.9764  0.9764  0.9763  0.9752  0.9749  0.9748  0.9748  0.9748  0.9746  0.9739  0.9739  0.9739  0.9739
2024-04-30 00:23:50 [INFO] [evolutionary_search.cc:727] Got 64 candidate(s) with evolutionary search
2024-04-30 00:23:50 [INFO] [evolutionary_search.cc:730] Sending 64 candidates(s) for measurement
2024-04-30 00:25:12 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_4] Trial #513: GFLOPs: 8253.6146. Time: 78.5442 us. Best GFLOPs: 9502.2211
2024-04-30 00:25:12 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_4] Trial #514: GFLOPs: 9633.0811. Time: 67.2966 us. Best GFLOPs: 9633.0811
2024-04-30 00:25:12 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_4] Trial #515: GFLOPs: 9523.7439. Time: 68.0692 us. Best GFLOPs: 9633.0811
2024-04-30 00:25:12 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_4] Trial #516: GFLOPs: 9460.5726. Time: 68.5238 us. Best GFLOPs: 9633.0811
2024-04-30 00:25:12 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_4] Trial #517: GFLOPs: 9566.2107. Time: 67.7671 us. Best GFLOPs: 9633.0811
2024-04-30 00:25:12 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_4] Trial #518: GFLOPs: 9453.8604. Time: 68.5724 us. Best GFLOPs: 9633.0811
2024-04-30 00:25:12 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_4] Trial #519: GFLOPs: 9599.6401. Time: 67.5311 us. Best GFLOPs: 9633.0811
2024-04-30 00:25:12 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_4] Trial #520: GFLOPs: 9383.6050. Time: 69.0858 us. Best GFLOPs: 9633.0811
2024-04-30 00:25:12 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_4] Trial #521: GFLOPs: 9473.8908. Time: 68.4274 us. Best GFLOPs: 9633.0811
2024-04-30 00:25:12 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_4] Trial #522: GFLOPs: 9534.4932. Time: 67.9925 us. Best GFLOPs: 9633.0811
2024-04-30 00:25:12 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_4] Trial #523: GFLOPs: 9540.0746. Time: 67.9527 us. Best GFLOPs: 9633.0811
2024-04-30 00:25:12 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_4] Trial #524: GFLOPs: 9401.6651. Time: 68.9531 us. Best GFLOPs: 9633.0811
2024-04-30 00:25:12 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_4] Trial #525: GFLOPs: 9383.1762. Time: 69.0890 us. Best GFLOPs: 9633.0811
2024-04-30 00:25:12 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_4] Trial #526: GFLOPs: 9476.3551. Time: 68.4096 us. Best GFLOPs: 9633.0811
2024-04-30 00:25:12 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_4] Trial #527: GFLOPs: 9328.5288. Time: 69.4937 us. Best GFLOPs: 9633.0811
2024-04-30 00:25:12 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_4] Trial #528: GFLOPs: 9569.9617. Time: 67.7405 us. Best GFLOPs: 9633.0811
2024-04-30 00:25:12 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_4] Trial #529: GFLOPs: 9300.6756. Time: 69.7018 us. Best GFLOPs: 9633.0811
2024-04-30 00:25:12 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_4] Trial #530: GFLOPs: 9414.8039. Time: 68.8569 us. Best GFLOPs: 9633.0811
2024-04-30 00:25:12 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_4] Trial #531: GFLOPs: 9298.9279. Time: 69.7149 us. Best GFLOPs: 9633.0811
2024-04-30 00:25:12 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_4] Trial #532: GFLOPs: 9555.8496. Time: 67.8405 us. Best GFLOPs: 9633.0811
2024-04-30 00:25:12 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_4] Trial #533: GFLOPs: 9518.9484. Time: 68.1035 us. Best GFLOPs: 9633.0811
2024-04-30 00:25:12 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_4] Trial #534: GFLOPs: 9445.7878. Time: 68.6310 us. Best GFLOPs: 9633.0811
2024-04-30 00:25:12 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_4] Trial #535: GFLOPs: 9633.0677. Time: 67.2967 us. Best GFLOPs: 9633.0811
2024-04-30 00:25:12 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_4] Trial #536: GFLOPs: 9298.9279. Time: 69.7149 us. Best GFLOPs: 9633.0811
2024-04-30 00:25:12 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_4] Trial #537: GFLOPs: 9572.5526. Time: 67.7222 us. Best GFLOPs: 9633.0811
2024-04-30 00:25:12 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_4] Trial #538: GFLOPs: 9443.8760. Time: 68.6449 us. Best GFLOPs: 9633.0811
2024-04-30 00:25:12 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_4] Trial #539: GFLOPs: 9546.3847. Time: 67.9078 us. Best GFLOPs: 9633.0811
2024-04-30 00:25:12 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_4] Trial #540: GFLOPs: 9104.0224. Time: 71.2074 us. Best GFLOPs: 9633.0811
2024-04-30 00:25:12 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_4] Trial #541: GFLOPs: 9102.5970. Time: 71.2186 us. Best GFLOPs: 9633.0811
2024-04-30 00:25:12 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_4] Trial #542: GFLOPs: 9287.8912. Time: 69.7978 us. Best GFLOPs: 9633.0811
2024-04-30 00:25:12 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_4] Trial #543: GFLOPs: 9519.4024. Time: 68.1003 us. Best GFLOPs: 9633.0811
2024-04-30 00:25:12 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_4] Trial #544: GFLOPs: 9392.9138. Time: 69.0173 us. Best GFLOPs: 9633.0811
2024-04-30 00:25:12 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_4] Trial #545: GFLOPs: 9539.7749. Time: 67.9548 us. Best GFLOPs: 9633.0811
2024-04-30 00:25:12 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_4] Trial #546: GFLOPs: 9420.4652. Time: 68.8155 us. Best GFLOPs: 9633.0811
2024-04-30 00:25:12 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_4] Trial #547: GFLOPs: 9392.3821. Time: 69.0212 us. Best GFLOPs: 9633.0811
2024-04-30 00:25:12 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_4] Trial #548: GFLOPs: 9392.7958. Time: 69.0182 us. Best GFLOPs: 9633.0811
2024-04-30 00:25:12 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_4] Trial #549: GFLOPs: 9480.3399. Time: 68.3809 us. Best GFLOPs: 9633.0811
2024-04-30 00:25:12 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_4] Trial #550: GFLOPs: 9540.6807. Time: 67.9484 us. Best GFLOPs: 9633.0811
2024-04-30 00:25:12 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_4] Trial #551: GFLOPs: 9511.1164. Time: 68.1596 us. Best GFLOPs: 9633.0811
2024-04-30 00:25:12 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_4] Trial #552: GFLOPs: 9525.1454. Time: 68.0592 us. Best GFLOPs: 9633.0811
2024-04-30 00:25:12 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_4] Trial #553: GFLOPs: 9523.6360. Time: 68.0700 us. Best GFLOPs: 9633.0811
2024-04-30 00:25:12 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_4] Trial #554: GFLOPs: 9392.4251. Time: 69.0209 us. Best GFLOPs: 9633.0811
2024-04-30 00:25:12 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_4] Trial #555: GFLOPs: 9299.1699. Time: 69.7131 us. Best GFLOPs: 9633.0811
2024-04-30 00:25:12 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_4] Trial #556: GFLOPs: 9619.1843. Time: 67.3939 us. Best GFLOPs: 9633.0811
2024-04-30 00:25:12 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_4] Trial #557: GFLOPs: 9271.0992. Time: 69.9242 us. Best GFLOPs: 9633.0811
2024-04-30 00:25:12 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_4] Trial #558: GFLOPs: 9346.4789. Time: 69.3602 us. Best GFLOPs: 9633.0811
2024-04-30 00:25:12 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_4] Trial #559: GFLOPs: 9451.2874. Time: 68.5911 us. Best GFLOPs: 9633.0811
2024-04-30 00:25:12 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_4] Trial #560: GFLOPs: 9290.8560. Time: 69.7755 us. Best GFLOPs: 9633.0811
2024-04-30 00:25:12 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_4] Trial #561: GFLOPs: 9312.5679. Time: 69.6128 us. Best GFLOPs: 9633.0811
2024-04-30 00:25:12 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_4] Trial #562: GFLOPs: 9343.8231. Time: 69.3799 us. Best GFLOPs: 9633.0811
2024-04-30 00:25:12 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_4] Trial #563: GFLOPs: 9390.9386. Time: 69.0319 us. Best GFLOPs: 9633.0811
2024-04-30 00:25:12 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_4] Trial #564: GFLOPs: 9322.3273. Time: 69.5399 us. Best GFLOPs: 9633.0811
2024-04-30 00:25:12 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_4] Trial #565: GFLOPs: 9332.0484. Time: 69.4675 us. Best GFLOPs: 9633.0811
2024-04-30 00:25:12 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_4] Trial #566: GFLOPs: 9257.9661. Time: 70.0234 us. Best GFLOPs: 9633.0811
2024-04-30 00:25:12 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_4] Trial #567: GFLOPs: 9370.8302. Time: 69.1800 us. Best GFLOPs: 9633.0811
2024-04-30 00:25:12 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_4] Trial #568: GFLOPs: 9332.8454. Time: 69.4616 us. Best GFLOPs: 9633.0811
2024-04-30 00:25:12 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_4] Trial #569: GFLOPs: 9236.9787. Time: 70.1825 us. Best GFLOPs: 9633.0811
2024-04-30 00:25:12 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_4] Trial #570: GFLOPs: 9237.9542. Time: 70.1751 us. Best GFLOPs: 9633.0811
2024-04-30 00:25:12 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_4] Trial #571: GFLOPs: 10322.8710. Time: 62.7998 us. Best GFLOPs: 10322.8710
2024-04-30 00:25:12 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_4] Trial #572: GFLOPs: 9306.6021. Time: 69.6574 us. Best GFLOPs: 10322.8710
2024-04-30 00:25:12 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_4] Trial #573: GFLOPs: 9313.9281. Time: 69.6026 us. Best GFLOPs: 10322.8710
2024-04-30 00:25:12 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_4] Trial #574: GFLOPs: 2281.6542. Time: 284.1245 us. Best GFLOPs: 10322.8710
2024-04-30 00:25:12 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_4] Trial #575: GFLOPs: 67.8847. Time: 9549.6375 us. Best GFLOPs: 10322.8710
2024-04-30 00:25:12 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_4] Trial #576: GFLOPs: 3479.4701. Time: 186.3140 us. Best GFLOPs: 10322.8710
