2024-04-29 17:02:28 [INFO] [task_scheduler.cc:160] Initializing Task #5: "fused_nn_max_pool2d_1"
2024-04-29 17:02:28 [INFO] [task_scheduler.cc:35] 
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(128), T.int64(112), T.int64(112)), "float32"), pool_max: T.Buffer((T.int64(1), T.int64(128), T.int64(56), T.int64(56)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        for ax0, ax1, ax2, ax3, rv0, rv1 in T.grid(T.int64(1), T.int64(128), T.int64(56), T.int64(56), T.int64(2), T.int64(2)):
            with T.block("pool_max"):
                v_ax0, v_ax1, v_ax2, v_ax3, v_rv0, v_rv1 = T.axis.remap("SSSSRR", [ax0, ax1, ax2, ax3, rv0, rv1])
                T.reads(p0[v_ax0, v_ax1, v_ax2 * T.int64(2) + v_rv0, v_ax3 * T.int64(2) + v_rv1])
                T.writes(pool_max[v_ax0, v_ax1, v_ax2, v_ax3])
                T.block_attr({"schedule_rule": "meta_schedule.pool_max"})
                with T.init():
                    pool_max[v_ax0, v_ax1, v_ax2, v_ax3] = T.float32(-3.4028234663852886e+38)
                pool_max[v_ax0, v_ax1, v_ax2, v_ax3] = T.max(pool_max[v_ax0, v_ax1, v_ax2, v_ax3], p0[v_ax0, v_ax1, v_ax2 * T.int64(2) + v_rv0, v_ax3 * T.int64(2) + v_rv1])
2024-04-29 17:02:28 [INFO] [task_scheduler.cc:164] Total 2 design space(s) generated
2024-04-29 17:02:28 [INFO] [task_scheduler.cc:170] Design space #0:
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(128), T.int64(112), T.int64(112)), "float32"), pool_max: T.Buffer((T.int64(1), T.int64(128), T.int64(56), T.int64(56)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        with T.block("root"):
            T.reads()
            T.writes()
            T.block_attr({"meta_schedule.unroll_explicit": 16})
            for ax0_ax1_ax2_ax3_fused_1 in T.thread_binding(T.int64(256), thread="blockIdx.x"):
                for ax0_ax1_ax2_ax3_fused_2 in T.thread_binding(T.int64(1024), thread="threadIdx.x"):
                    for ax0_ax1_ax2_ax3_fused_0, rv0, rv1 in T.grid(T.int64(2), T.int64(2), T.int64(2)):
                        with T.block("pool_max"):
                            v_ax0 = T.axis.spatial(T.int64(1), T.int64(0))
                            v_ax1 = T.axis.spatial(T.int64(128), (ax0_ax1_ax2_ax3_fused_0 * T.int64(262144) + ax0_ax1_ax2_ax3_fused_1 * T.int64(1024) + ax0_ax1_ax2_ax3_fused_2) // T.int64(3136))
                            v_ax2 = T.axis.spatial(T.int64(56), (ax0_ax1_ax2_ax3_fused_0 * T.int64(262144) + ax0_ax1_ax2_ax3_fused_1 * T.int64(1024) + ax0_ax1_ax2_ax3_fused_2) % T.int64(3136) // T.int64(56))
                            v_ax3 = T.axis.spatial(T.int64(56), (ax0_ax1_ax2_ax3_fused_0 * T.int64(262144) + ax0_ax1_ax2_ax3_fused_1 * T.int64(1024) + ax0_ax1_ax2_ax3_fused_2) % T.int64(56))
                            v_rv0, v_rv1 = T.axis.remap("RR", [rv0, rv1])
                            T.where((ax0_ax1_ax2_ax3_fused_0 * T.int64(256) + ax0_ax1_ax2_ax3_fused_1) * T.int64(1024) + ax0_ax1_ax2_ax3_fused_2 < T.int64(401408))
                            T.reads(p0[v_ax0, v_ax1, v_ax2 * T.int64(2) + v_rv0, v_ax3 * T.int64(2) + v_rv1])
                            T.writes(pool_max[v_ax0, v_ax1, v_ax2, v_ax3])
                            with T.init():
                                pool_max[v_ax0, v_ax1, v_ax2, v_ax3] = T.float32(-3.4028234663852886e+38)
                            pool_max[v_ax0, v_ax1, v_ax2, v_ax3] = T.max(pool_max[v_ax0, v_ax1, v_ax2, v_ax3], p0[v_ax0, v_ax1, v_ax2 * T.int64(2) + v_rv0, v_ax3 * T.int64(2) + v_rv1])
b0 = sch.get_block(name="pool_max", func_name="main")
b1 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b0, ann_key="schedule_rule")
v2 = sch.sample_categorical(candidates=[0, 16, 64, 512, 1024], probs=[0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001], decision=1)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.unroll_explicit", ann_val=v2)
l3, l4, l5, l6, l7, l8 = sch.get_loops(block=b0)
l9 = sch.fuse(l3, l4, l5, l6, preserve_unit_iters=True)
l10, l11, l12 = sch.split(loop=l9, factors=[None, 256, 1024], preserve_unit_iters=True)
sch.reorder(l11, l12, l10)
sch.bind(loop=l11, thread_axis="blockIdx.x")
sch.bind(loop=l12, thread_axis="threadIdx.x")
2024-04-29 17:02:28 [INFO] [task_scheduler.cc:170] Design space #1:
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(128), T.int64(112), T.int64(112)), "float32"), pool_max: T.Buffer((T.int64(1), T.int64(128), T.int64(56), T.int64(56)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        with T.block("root"):
            T.reads()
            T.writes()
            T.block_attr({"meta_schedule.unroll_explicit": 0})
            for ax0_ax1_ax2_ax3_fused in T.thread_binding(T.int64(401408), thread="blockIdx.x"):
                for rv0_rv1_fused_0 in range(T.int64(1)):
                    for rv0_rv1_fused_1 in T.thread_binding(T.int64(64), thread="threadIdx.x"):
                        with T.block("pool_max"):
                            v_ax0 = T.axis.spatial(T.int64(1), T.int64(0))
                            v_ax1 = T.axis.spatial(T.int64(128), ax0_ax1_ax2_ax3_fused // T.int64(3136))
                            v_ax2 = T.axis.spatial(T.int64(56), ax0_ax1_ax2_ax3_fused % T.int64(3136) // T.int64(56))
                            v_ax3 = T.axis.spatial(T.int64(56), ax0_ax1_ax2_ax3_fused % T.int64(56))
                            v_rv0 = T.axis.reduce(T.int64(2), (rv0_rv1_fused_0 * T.int64(64) + rv0_rv1_fused_1) // T.int64(2))
                            v_rv1 = T.axis.reduce(T.int64(2), (rv0_rv1_fused_0 * T.int64(64) + rv0_rv1_fused_1) % T.int64(2))
                            T.where(rv0_rv1_fused_0 * T.int64(64) + rv0_rv1_fused_1 < T.int64(4))
                            T.reads(p0[v_ax0, v_ax1, v_ax2 * T.int64(2) + v_rv0, v_ax3 * T.int64(2) + v_rv1])
                            T.writes(pool_max[v_ax0, v_ax1, v_ax2, v_ax3])
                            with T.init():
                                pool_max[v_ax0, v_ax1, v_ax2, v_ax3] = T.float32(-3.4028234663852886e+38)
                            pool_max[v_ax0, v_ax1, v_ax2, v_ax3] = T.max(pool_max[v_ax0, v_ax1, v_ax2, v_ax3], p0[v_ax0, v_ax1, v_ax2 * T.int64(2) + v_rv0, v_ax3 * T.int64(2) + v_rv1])
b0 = sch.get_block(name="pool_max", func_name="main")
b1 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b0, ann_key="schedule_rule")
v2 = sch.sample_categorical(candidates=[4, 8, 16, 32, 64, 128, 256, 512], probs=[0.125, 0.125, 0.125, 0.125, 0.125, 0.125, 0.125, 0.125], decision=4)
l3, l4, l5, l6, l7, l8 = sch.get_loops(block=b0)
l9 = sch.fuse(l7, l8, preserve_unit_iters=True)
l10, l11 = sch.split(loop=l9, factors=[None, v2], preserve_unit_iters=True)
sch.bind(loop=l11, thread_axis="threadIdx.x")
v12 = sch.sample_categorical(candidates=[0, 16, 64, 512, 1024], probs=[0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001], decision=0)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.unroll_explicit", ann_val=v12)
l13, l14, l15, l16, l17, l18 = sch.get_loops(block=b0)
l19 = sch.fuse(l13, l14, l15, l16, preserve_unit_iters=True)
sch.bind(loop=l19, thread_axis="blockIdx.x")
2024-04-29 17:18:26 [INFO] [evolutionary_search.cc:713] Generating candidates......
2024-04-29 17:18:26 [INFO] [evolutionary_search.cc:715] Picked top 0 candidate(s) from database
2024-04-29 17:18:27 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x4fcb818)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0xb4c1be8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0xb4c1e38)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x5901358)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x45cb7b8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0xb542b58)]: 0 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x7664858)]: 0 failure(s)
2024-04-29 17:18:27 [INFO] [evolutionary_search.cc:723] Sampled 512 candidate(s)
2024-04-29 17:18:27 [INFO] [evolutionary_search.cc:621] Evolve iter #0 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x4fcb818)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0xb4c1be8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0xb4c1e38)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x5901358)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x45cb7b8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0xb542b58)]: 0 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x7664858)]: 0 failure(s)
2024-04-29 17:18:27 [INFO] [evolutionary_search.cc:621] Evolve iter #1 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x4fcb818)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0xb4c1be8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0xb4c1e38)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x5901358)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x45cb7b8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0xb542b58)]: 0 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x7664858)]: 0 failure(s)
2024-04-29 17:18:28 [INFO] [evolutionary_search.cc:621] Evolve iter #2 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x4fcb818)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0xb4c1be8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0xb4c1e38)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x5901358)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x45cb7b8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0xb542b58)]: 0 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x7664858)]: 0 failure(s)
2024-04-29 17:18:28 [INFO] [evolutionary_search.cc:621] Evolve iter #3 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x4fcb818)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0xb4c1be8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0xb4c1e38)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x5901358)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x45cb7b8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0xb542b58)]: 0 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x7664858)]: 0 failure(s)
2024-04-29 17:18:28 [INFO] [evolutionary_search.cc:649] Scores of the best 45 candidates:
[1 : 16]:	0.9788  0.9574  0.9329  0.9235  0.9201  0.9022  0.8865  0.8754  0.8640  0.8638  0.8349  0.7791  0.7546  0.7311  0.7177  0.7109
[17 : 32]:	0.6783  0.6687  0.6351  0.6208  0.5740  0.5205  0.5074  0.4993  0.4822  0.4460  0.4399  0.4331  0.3869  0.3589  0.3576  0.3374
[33 : 45]:	0.3360  0.2578  0.2568  0.1922  0.1771  0.1756  0.1728  0.1088  0.0777  0.0774  0.0209  0.0154  0.0010
2024-04-29 17:18:28 [INFO] [evolutionary_search.cc:727] Got 45 candidate(s) with evolutionary search
2024-04-29 17:18:28 [INFO] [evolutionary_search.cc:730] Sending 45 candidates(s) for measurement
2024-04-29 17:45:02 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_max_pool2d_1] Trial #1: GFLOPs: 5.3439. Time: 300.4581 us. Best GFLOPs: 5.3439
2024-04-29 17:45:02 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_max_pool2d_1] Trial #2: GFLOPs: 344.0619. Time: 4.6667 us. Best GFLOPs: 344.0619
2024-04-29 17:45:02 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_max_pool2d_1] Trial #3: GFLOPs: 5.3483. Time: 300.2151 us. Best GFLOPs: 344.0619
2024-04-29 17:45:02 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_max_pool2d_1] Trial #4: GFLOPs: 5.3481. Time: 300.2246 us. Best GFLOPs: 344.0619
2024-04-29 17:45:02 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_max_pool2d_1] Trial #5: GFLOPs: 5.3439. Time: 300.4591 us. Best GFLOPs: 344.0619
2024-04-29 17:45:02 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_max_pool2d_1] Trial #6: GFLOPs: 5.3439. Time: 300.4626 us. Best GFLOPs: 344.0619
2024-04-29 17:45:02 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_max_pool2d_1] Trial #7: GFLOPs: 5.3479. Time: 300.2341 us. Best GFLOPs: 344.0619
2024-04-29 17:45:02 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_max_pool2d_1] Trial #8: GFLOPs: 5.3439. Time: 300.4610 us. Best GFLOPs: 344.0619
2024-04-29 17:45:02 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_max_pool2d_1] Trial #9: GFLOPs: 5.3530. Time: 299.9478 us. Best GFLOPs: 344.0619
2024-04-29 17:45:02 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_max_pool2d_1] Trial #10: GFLOPs: 5.3441. Time: 300.4489 us. Best GFLOPs: 344.0619
2024-04-29 17:45:02 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_max_pool2d_1] Trial #11: GFLOPs: 5.3477. Time: 300.2456 us. Best GFLOPs: 344.0619
2024-04-29 17:45:02 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_max_pool2d_1] Trial #12: GFLOPs: 2.0796. Time: 772.1039 us. Best GFLOPs: 344.0619
2024-04-29 17:45:02 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_max_pool2d_1] Trial #13: GFLOPs: 5.3438. Time: 300.4668 us. Best GFLOPs: 344.0619
2024-04-29 17:45:02 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_max_pool2d_1] Trial #14: GFLOPs: 4.2257. Time: 379.9693 us. Best GFLOPs: 344.0619
2024-04-29 17:45:02 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_max_pool2d_1] Trial #15: GFLOPs: 2.0797. Time: 772.0487 us. Best GFLOPs: 344.0619
2024-04-29 17:45:02 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_max_pool2d_1] Trial #16: GFLOPs: 4.2259. Time: 379.9524 us. Best GFLOPs: 344.0619
2024-04-29 17:45:02 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_max_pool2d_1] Trial #17: GFLOPs: 5.3438. Time: 300.4668 us. Best GFLOPs: 344.0619
2024-04-29 17:45:02 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_max_pool2d_1] Trial #18: GFLOPs: 4.2261. Time: 379.9355 us. Best GFLOPs: 344.0619
2024-04-29 17:45:02 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_max_pool2d_1] Trial #19: GFLOPs: 296.7300. Time: 5.4111 us. Best GFLOPs: 344.0619
2024-04-29 17:45:02 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_max_pool2d_1] Trial #20: GFLOPs: 5.3536. Time: 299.9152 us. Best GFLOPs: 344.0619
2024-04-29 17:45:03 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_max_pool2d_1] Trial #21: GFLOPs: 2.0796. Time: 772.0881 us. Best GFLOPs: 344.0619
2024-04-29 17:45:03 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_max_pool2d_1] Trial #22: GFLOPs: 2.0794. Time: 772.1590 us. Best GFLOPs: 344.0619
2024-04-29 17:45:03 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_max_pool2d_1] Trial #23: GFLOPs: 5.3536. Time: 299.9167 us. Best GFLOPs: 344.0619
2024-04-29 17:45:03 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_max_pool2d_1] Trial #24: GFLOPs: 5.3442. Time: 300.4439 us. Best GFLOPs: 344.0619
2024-04-29 17:45:03 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_max_pool2d_1] Trial #25: GFLOPs: 5.3441. Time: 300.4477 us. Best GFLOPs: 344.0619
2024-04-29 17:45:03 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_max_pool2d_1] Trial #26: GFLOPs: 5.3481. Time: 300.2246 us. Best GFLOPs: 344.0619
2024-04-29 17:45:03 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_max_pool2d_1] Trial #27: GFLOPs: 5.3481. Time: 300.2263 us. Best GFLOPs: 344.0619
2024-04-29 17:45:03 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_max_pool2d_1] Trial #28: GFLOPs: 4.2260. Time: 379.9451 us. Best GFLOPs: 344.0619
2024-04-29 17:45:03 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_max_pool2d_1] Trial #29: GFLOPs: 5.3441. Time: 300.4474 us. Best GFLOPs: 344.0619
2024-04-29 17:45:03 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_max_pool2d_1] Trial #30: GFLOPs: 2.0707. Time: 775.3903 us. Best GFLOPs: 344.0619
2024-04-29 17:45:03 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_max_pool2d_1] Trial #31: GFLOPs: 343.9734. Time: 4.6679 us. Best GFLOPs: 344.0619
2024-04-29 17:45:03 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_max_pool2d_1] Trial #32: GFLOPs: 5.3478. Time: 300.2406 us. Best GFLOPs: 344.0619
2024-04-29 17:45:03 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_max_pool2d_1] Trial #33: GFLOPs: 4.2260. Time: 379.9454 us. Best GFLOPs: 344.0619
2024-04-29 17:45:03 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_max_pool2d_1] Trial #34: GFLOPs: 5.3488. Time: 300.1845 us. Best GFLOPs: 344.0619
2024-04-29 17:45:03 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_max_pool2d_1] Trial #35: GFLOPs: 5.3446. Time: 300.4225 us. Best GFLOPs: 344.0619
2024-04-29 17:45:03 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_max_pool2d_1] Trial #36: GFLOPs: 5.3489. Time: 300.1788 us. Best GFLOPs: 344.0619
2024-04-29 17:45:03 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_max_pool2d_1] Trial #37: GFLOPs: 5.3537. Time: 299.9100 us. Best GFLOPs: 344.0619
2024-04-29 17:45:03 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_max_pool2d_1] Trial #38: GFLOPs: 344.0406. Time: 4.6670 us. Best GFLOPs: 344.0619
2024-04-29 17:45:03 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_max_pool2d_1] Trial #39: GFLOPs: 5.3442. Time: 300.4439 us. Best GFLOPs: 344.0619
2024-04-29 17:45:03 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_max_pool2d_1] Trial #40: GFLOPs: 5.3536. Time: 299.9157 us. Best GFLOPs: 344.0619
2024-04-29 17:45:03 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_max_pool2d_1] Trial #41: GFLOPs: 5.3443. Time: 300.4382 us. Best GFLOPs: 344.0619
2024-04-29 17:45:03 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_max_pool2d_1] Trial #42: GFLOPs: 5.3443. Time: 300.4401 us. Best GFLOPs: 344.0619
2024-04-29 17:45:03 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_max_pool2d_1] Trial #43: GFLOPs: 5.3445. Time: 300.4286 us. Best GFLOPs: 344.0619
2024-04-29 17:45:03 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_max_pool2d_1] Trial #44: GFLOPs: 344.0005. Time: 4.6675 us. Best GFLOPs: 344.0619
2024-04-29 17:45:03 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_max_pool2d_1] Trial #45: GFLOPs: 5.3488. Time: 300.1845 us. Best GFLOPs: 344.0619
