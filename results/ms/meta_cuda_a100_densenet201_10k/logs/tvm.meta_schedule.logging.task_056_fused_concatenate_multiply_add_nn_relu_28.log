2024-04-29 16:31:29 [INFO] [task_scheduler.cc:160] Initializing Task #56: "fused_concatenate_multiply_add_nn_relu_28"
2024-04-29 16:31:29 [INFO] [task_scheduler.cc:35] 
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(896), T.int64(7), T.int64(7)), "float32"), p1: T.Buffer((T.int64(1), T.int64(32), T.int64(7), T.int64(7)), "float32"), p2: T.Buffer((T.int64(1), T.int64(32), T.int64(7), T.int64(7)), "float32"), p3: T.Buffer((T.int64(1), T.int64(32), T.int64(7), T.int64(7)), "float32"), p4: T.Buffer((T.int64(1), T.int64(992), T.int64(1), T.int64(1)), "float32"), p5: T.Buffer((T.int64(1), T.int64(992), T.int64(1), T.int64(1)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(992), T.int64(7), T.int64(7)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        T_concat = T.alloc_buffer((T.int64(1), T.int64(992), T.int64(7), T.int64(7)))
        T_multiply = T.alloc_buffer((T.int64(1), T.int64(992), T.int64(7), T.int64(7)))
        T_add = T.alloc_buffer((T.int64(1), T.int64(992), T.int64(7), T.int64(7)))
        for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(992), T.int64(7), T.int64(7)):
            with T.block("T_concat"):
                v_ax0, v_ax1, v_ax2, v_ax3 = T.axis.remap("SSSS", [ax0, ax1, ax2, ax3])
                T.reads(p3[v_ax0, v_ax1 - T.int64(960), v_ax2, v_ax3], p2[v_ax0, v_ax1 - T.int64(928), v_ax2, v_ax3], p1[v_ax0, v_ax1 - T.int64(896), v_ax2, v_ax3], p0[v_ax0, v_ax1, v_ax2, v_ax3])
                T.writes(T_concat[v_ax0, v_ax1, v_ax2, v_ax3])
                T_concat[v_ax0, v_ax1, v_ax2, v_ax3] = T.if_then_else(T.int64(960) <= v_ax1, p3[v_ax0, v_ax1 - T.int64(960), v_ax2, v_ax3], T.if_then_else(T.int64(928) <= v_ax1, p2[v_ax0, v_ax1 - T.int64(928), v_ax2, v_ax3], T.if_then_else(T.int64(896) <= v_ax1, p1[v_ax0, v_ax1 - T.int64(896), v_ax2, v_ax3], p0[v_ax0, v_ax1, v_ax2, v_ax3])))
        for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(992), T.int64(7), T.int64(7)):
            with T.block("T_multiply"):
                v_ax0, v_ax1, v_ax2, v_ax3 = T.axis.remap("SSSS", [ax0, ax1, ax2, ax3])
                T.reads(T_concat[v_ax0, v_ax1, v_ax2, v_ax3], p4[v_ax0, v_ax1, T.int64(0), T.int64(0)])
                T.writes(T_multiply[v_ax0, v_ax1, v_ax2, v_ax3])
                T_multiply[v_ax0, v_ax1, v_ax2, v_ax3] = T_concat[v_ax0, v_ax1, v_ax2, v_ax3] * p4[v_ax0, v_ax1, T.int64(0), T.int64(0)]
        for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(992), T.int64(7), T.int64(7)):
            with T.block("T_add"):
                v_ax0, v_ax1, v_ax2, v_ax3 = T.axis.remap("SSSS", [ax0, ax1, ax2, ax3])
                T.reads(T_multiply[v_ax0, v_ax1, v_ax2, v_ax3], p5[v_ax0, v_ax1, T.int64(0), T.int64(0)])
                T.writes(T_add[v_ax0, v_ax1, v_ax2, v_ax3])
                T_add[v_ax0, v_ax1, v_ax2, v_ax3] = T_multiply[v_ax0, v_ax1, v_ax2, v_ax3] + p5[v_ax0, v_ax1, T.int64(0), T.int64(0)]
        for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(992), T.int64(7), T.int64(7)):
            with T.block("T_relu"):
                v_ax0, v_ax1, v_ax2, v_ax3 = T.axis.remap("SSSS", [ax0, ax1, ax2, ax3])
                T.reads(T_add[v_ax0, v_ax1, v_ax2, v_ax3])
                T.writes(T_relu[v_ax0, v_ax1, v_ax2, v_ax3])
                T_relu[v_ax0, v_ax1, v_ax2, v_ax3] = T.max(T_add[v_ax0, v_ax1, v_ax2, v_ax3], T.float32(0))
2024-04-29 16:31:29 [INFO] [task_scheduler.cc:164] Total 1 design space(s) generated
2024-04-29 16:31:29 [INFO] [task_scheduler.cc:170] Design space #0:
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(896), T.int64(7), T.int64(7)), "float32"), p1: T.Buffer((T.int64(1), T.int64(32), T.int64(7), T.int64(7)), "float32"), p2: T.Buffer((T.int64(1), T.int64(32), T.int64(7), T.int64(7)), "float32"), p3: T.Buffer((T.int64(1), T.int64(32), T.int64(7), T.int64(7)), "float32"), p4: T.Buffer((T.int64(1), T.int64(992), T.int64(1), T.int64(1)), "float32"), p5: T.Buffer((T.int64(1), T.int64(992), T.int64(1), T.int64(1)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(992), T.int64(7), T.int64(7)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        for ax0_ax1_ax2_ax3_fused_0 in T.thread_binding(T.int64(95), thread="blockIdx.x"):
            for ax0_ax1_ax2_ax3_fused_1 in T.thread_binding(T.int64(512), thread="threadIdx.x"):
                with T.block("T_concat"):
                    v_ax0 = T.axis.spatial(T.int64(1), T.int64(0))
                    v_ax1 = T.axis.spatial(T.int64(992), (ax0_ax1_ax2_ax3_fused_0 * T.int64(512) + ax0_ax1_ax2_ax3_fused_1) // T.int64(49))
                    v_ax2 = T.axis.spatial(T.int64(7), (ax0_ax1_ax2_ax3_fused_0 * T.int64(512) + ax0_ax1_ax2_ax3_fused_1) % T.int64(49) // T.int64(7))
                    v_ax3 = T.axis.spatial(T.int64(7), (ax0_ax1_ax2_ax3_fused_0 * T.int64(512) + ax0_ax1_ax2_ax3_fused_1) % T.int64(7))
                    T.where(ax0_ax1_ax2_ax3_fused_0 * T.int64(512) + ax0_ax1_ax2_ax3_fused_1 < T.int64(48608))
                    T.reads(p3[v_ax0, v_ax1 - T.int64(960), v_ax2, v_ax3], p2[v_ax0, v_ax1 - T.int64(928), v_ax2, v_ax3], p1[v_ax0, v_ax1 - T.int64(896), v_ax2, v_ax3], p0[v_ax0, v_ax1, v_ax2, v_ax3], p4[v_ax0, v_ax1, T.int64(0), T.int64(0)], p5[v_ax0, v_ax1, T.int64(0), T.int64(0)])
                    T.writes(T_relu[v_ax0, v_ax1, v_ax2, v_ax3])
                    T_relu[v_ax0, v_ax1, v_ax2, v_ax3] = T.max(T.if_then_else(T.int64(960) <= v_ax1, p3[v_ax0, v_ax1 - T.int64(960), v_ax2, v_ax3], T.if_then_else(T.int64(928) <= v_ax1, p2[v_ax0, v_ax1 - T.int64(928), v_ax2, v_ax3], T.if_then_else(T.int64(896) <= v_ax1, p1[v_ax0, v_ax1 - T.int64(896), v_ax2, v_ax3], p0[v_ax0, v_ax1, v_ax2, v_ax3]))) * p4[v_ax0, v_ax1, T.int64(0), T.int64(0)] + p5[v_ax0, v_ax1, T.int64(0), T.int64(0)], T.float32(0))
b0 = sch.get_block(name="T_concat", func_name="main")
b1 = sch.get_block(name="T_multiply", func_name="main")
b2 = sch.get_block(name="T_add", func_name="main")
b3 = sch.get_block(name="T_relu", func_name="main")
sch.reverse_compute_inline(block=b3)
sch.reverse_compute_inline(block=b2)
sch.reverse_compute_inline(block=b1)
l4, l5, l6, l7 = sch.get_loops(block=b0)
l8 = sch.fuse(l4, l5, l6, l7, preserve_unit_iters=True)
v9 = sch.sample_categorical(candidates=[32, 64, 128, 256, 512, 1024], probs=[0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666], decision=4)
l10, l11 = sch.split(loop=l8, factors=[None, v9], preserve_unit_iters=True)
sch.bind(loop=l10, thread_axis="blockIdx.x")
sch.bind(loop=l11, thread_axis="threadIdx.x")
2024-04-29 17:17:28 [INFO] [evolutionary_search.cc:713] Generating candidates......
2024-04-29 17:17:28 [INFO] [evolutionary_search.cc:715] Picked top 0 candidate(s) from database
2024-04-29 17:17:30 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x123a7458)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0xdf24678)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0xb0df3b8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x13310288)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x1489fb48)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0xdc87e48)]: 0 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x14f09108)]: 0 failure(s)
2024-04-29 17:17:30 [INFO] [evolutionary_search.cc:723] Sampled 512 candidate(s)
2024-04-29 17:17:30 [INFO] [evolutionary_search.cc:621] Evolve iter #0 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x123a7458)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0xdf24678)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0xb0df3b8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x13310288)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x1489fb48)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0xdc87e48)]: 0 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x14f09108)]: 0 failure(s)
2024-04-29 17:17:31 [INFO] [evolutionary_search.cc:621] Evolve iter #1 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x123a7458)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0xdf24678)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0xb0df3b8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x13310288)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x1489fb48)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0xdc87e48)]: 0 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x14f09108)]: 0 failure(s)
2024-04-29 17:17:31 [INFO] [evolutionary_search.cc:621] Evolve iter #2 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x123a7458)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0xdf24678)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0xb0df3b8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x13310288)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x1489fb48)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0xdc87e48)]: 0 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x14f09108)]: 0 failure(s)
2024-04-29 17:17:31 [INFO] [evolutionary_search.cc:621] Evolve iter #3 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x123a7458)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0xdf24678)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0xb0df3b8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x13310288)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x1489fb48)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0xdc87e48)]: 0 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x14f09108)]: 0 failure(s)
2024-04-29 17:17:31 [INFO] [evolutionary_search.cc:649] Scores of the best 6 candidates:
[1 : 6]:	0.8893  0.6402  0.4900  0.3679  0.2142  0.0064
2024-04-29 17:17:31 [INFO] [evolutionary_search.cc:727] Got 6 candidate(s) with evolutionary search
2024-04-29 17:17:31 [INFO] [evolutionary_search.cc:730] Sending 6 candidates(s) for measurement
2024-04-29 20:22:24 [INFO] [task_scheduler.cc:131] [Task #56: fused_concatenate_multiply_add_nn_relu_28] Trial #1: GFLOPs: 48.4931. Time: 3.0071 us. Best GFLOPs: 48.4931
2024-04-29 20:22:24 [INFO] [task_scheduler.cc:131] [Task #56: fused_concatenate_multiply_add_nn_relu_28] Trial #2: GFLOPs: 43.4809. Time: 3.3537 us. Best GFLOPs: 48.4931
2024-04-29 20:22:24 [INFO] [task_scheduler.cc:131] [Task #56: fused_concatenate_multiply_add_nn_relu_28] Trial #3: GFLOPs: 45.9476. Time: 3.1737 us. Best GFLOPs: 48.4931
2024-04-29 20:22:24 [INFO] [task_scheduler.cc:131] [Task #56: fused_concatenate_multiply_add_nn_relu_28] Trial #4: GFLOPs: 45.9603. Time: 3.1728 us. Best GFLOPs: 48.4931
2024-04-29 20:22:24 [INFO] [task_scheduler.cc:131] [Task #56: fused_concatenate_multiply_add_nn_relu_28] Trial #5: GFLOPs: 37.4468. Time: 3.8942 us. Best GFLOPs: 48.4931
2024-04-29 20:22:24 [INFO] [task_scheduler.cc:131] [Task #56: fused_concatenate_multiply_add_nn_relu_28] Trial #6: GFLOPs: 46.9656. Time: 3.1049 us. Best GFLOPs: 48.4931
2024-05-01 15:05:08 [INFO] [task_scheduler.cc:160] Initializing Task #56: "fused_concatenate_multiply_add_nn_relu_28"
2024-05-01 15:05:08 [INFO] [task_scheduler.cc:35] 
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(896), T.int64(7), T.int64(7)), "float32"), p1: T.Buffer((T.int64(1), T.int64(32), T.int64(7), T.int64(7)), "float32"), p2: T.Buffer((T.int64(1), T.int64(32), T.int64(7), T.int64(7)), "float32"), p3: T.Buffer((T.int64(1), T.int64(32), T.int64(7), T.int64(7)), "float32"), p4: T.Buffer((T.int64(1), T.int64(992), T.int64(1), T.int64(1)), "float32"), p5: T.Buffer((T.int64(1), T.int64(992), T.int64(1), T.int64(1)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(992), T.int64(7), T.int64(7)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        T_concat = T.alloc_buffer((T.int64(1), T.int64(992), T.int64(7), T.int64(7)))
        T_multiply = T.alloc_buffer((T.int64(1), T.int64(992), T.int64(7), T.int64(7)))
        T_add = T.alloc_buffer((T.int64(1), T.int64(992), T.int64(7), T.int64(7)))
        for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(992), T.int64(7), T.int64(7)):
            with T.block("T_concat"):
                v_ax0, v_ax1, v_ax2, v_ax3 = T.axis.remap("SSSS", [ax0, ax1, ax2, ax3])
                T.reads(p3[v_ax0, v_ax1 - T.int64(960), v_ax2, v_ax3], p2[v_ax0, v_ax1 - T.int64(928), v_ax2, v_ax3], p1[v_ax0, v_ax1 - T.int64(896), v_ax2, v_ax3], p0[v_ax0, v_ax1, v_ax2, v_ax3])
                T.writes(T_concat[v_ax0, v_ax1, v_ax2, v_ax3])
                T_concat[v_ax0, v_ax1, v_ax2, v_ax3] = T.if_then_else(T.int64(960) <= v_ax1, p3[v_ax0, v_ax1 - T.int64(960), v_ax2, v_ax3], T.if_then_else(T.int64(928) <= v_ax1, p2[v_ax0, v_ax1 - T.int64(928), v_ax2, v_ax3], T.if_then_else(T.int64(896) <= v_ax1, p1[v_ax0, v_ax1 - T.int64(896), v_ax2, v_ax3], p0[v_ax0, v_ax1, v_ax2, v_ax3])))
        for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(992), T.int64(7), T.int64(7)):
            with T.block("T_multiply"):
                v_ax0, v_ax1, v_ax2, v_ax3 = T.axis.remap("SSSS", [ax0, ax1, ax2, ax3])
                T.reads(T_concat[v_ax0, v_ax1, v_ax2, v_ax3], p4[v_ax0, v_ax1, T.int64(0), T.int64(0)])
                T.writes(T_multiply[v_ax0, v_ax1, v_ax2, v_ax3])
                T_multiply[v_ax0, v_ax1, v_ax2, v_ax3] = T_concat[v_ax0, v_ax1, v_ax2, v_ax3] * p4[v_ax0, v_ax1, T.int64(0), T.int64(0)]
        for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(992), T.int64(7), T.int64(7)):
            with T.block("T_add"):
                v_ax0, v_ax1, v_ax2, v_ax3 = T.axis.remap("SSSS", [ax0, ax1, ax2, ax3])
                T.reads(T_multiply[v_ax0, v_ax1, v_ax2, v_ax3], p5[v_ax0, v_ax1, T.int64(0), T.int64(0)])
                T.writes(T_add[v_ax0, v_ax1, v_ax2, v_ax3])
                T_add[v_ax0, v_ax1, v_ax2, v_ax3] = T_multiply[v_ax0, v_ax1, v_ax2, v_ax3] + p5[v_ax0, v_ax1, T.int64(0), T.int64(0)]
        for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(992), T.int64(7), T.int64(7)):
            with T.block("T_relu"):
                v_ax0, v_ax1, v_ax2, v_ax3 = T.axis.remap("SSSS", [ax0, ax1, ax2, ax3])
                T.reads(T_add[v_ax0, v_ax1, v_ax2, v_ax3])
                T.writes(T_relu[v_ax0, v_ax1, v_ax2, v_ax3])
                T_relu[v_ax0, v_ax1, v_ax2, v_ax3] = T.max(T_add[v_ax0, v_ax1, v_ax2, v_ax3], T.float32(0))
2024-05-01 15:05:08 [INFO] [task_scheduler.cc:164] Total 1 design space(s) generated
2024-05-01 15:05:08 [INFO] [task_scheduler.cc:170] Design space #0:
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(896), T.int64(7), T.int64(7)), "float32"), p1: T.Buffer((T.int64(1), T.int64(32), T.int64(7), T.int64(7)), "float32"), p2: T.Buffer((T.int64(1), T.int64(32), T.int64(7), T.int64(7)), "float32"), p3: T.Buffer((T.int64(1), T.int64(32), T.int64(7), T.int64(7)), "float32"), p4: T.Buffer((T.int64(1), T.int64(992), T.int64(1), T.int64(1)), "float32"), p5: T.Buffer((T.int64(1), T.int64(992), T.int64(1), T.int64(1)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(992), T.int64(7), T.int64(7)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        for ax0_ax1_ax2_ax3_fused_0 in T.thread_binding(T.int64(48), thread="blockIdx.x"):
            for ax0_ax1_ax2_ax3_fused_1 in T.thread_binding(T.int64(1024), thread="threadIdx.x"):
                with T.block("T_concat"):
                    v_ax0 = T.axis.spatial(T.int64(1), T.int64(0))
                    v_ax1 = T.axis.spatial(T.int64(992), (ax0_ax1_ax2_ax3_fused_0 * T.int64(1024) + ax0_ax1_ax2_ax3_fused_1) // T.int64(49))
                    v_ax2 = T.axis.spatial(T.int64(7), (ax0_ax1_ax2_ax3_fused_0 * T.int64(1024) + ax0_ax1_ax2_ax3_fused_1) % T.int64(49) // T.int64(7))
                    v_ax3 = T.axis.spatial(T.int64(7), (ax0_ax1_ax2_ax3_fused_0 * T.int64(1024) + ax0_ax1_ax2_ax3_fused_1) % T.int64(7))
                    T.where(ax0_ax1_ax2_ax3_fused_0 * T.int64(1024) + ax0_ax1_ax2_ax3_fused_1 < T.int64(48608))
                    T.reads(p3[v_ax0, v_ax1 - T.int64(960), v_ax2, v_ax3], p2[v_ax0, v_ax1 - T.int64(928), v_ax2, v_ax3], p1[v_ax0, v_ax1 - T.int64(896), v_ax2, v_ax3], p0[v_ax0, v_ax1, v_ax2, v_ax3], p4[v_ax0, v_ax1, T.int64(0), T.int64(0)], p5[v_ax0, v_ax1, T.int64(0), T.int64(0)])
                    T.writes(T_relu[v_ax0, v_ax1, v_ax2, v_ax3])
                    T_relu[v_ax0, v_ax1, v_ax2, v_ax3] = T.max(T.if_then_else(T.int64(960) <= v_ax1, p3[v_ax0, v_ax1 - T.int64(960), v_ax2, v_ax3], T.if_then_else(T.int64(928) <= v_ax1, p2[v_ax0, v_ax1 - T.int64(928), v_ax2, v_ax3], T.if_then_else(T.int64(896) <= v_ax1, p1[v_ax0, v_ax1 - T.int64(896), v_ax2, v_ax3], p0[v_ax0, v_ax1, v_ax2, v_ax3]))) * p4[v_ax0, v_ax1, T.int64(0), T.int64(0)] + p5[v_ax0, v_ax1, T.int64(0), T.int64(0)], T.float32(0))
b0 = sch.get_block(name="T_concat", func_name="main")
b1 = sch.get_block(name="T_multiply", func_name="main")
b2 = sch.get_block(name="T_add", func_name="main")
b3 = sch.get_block(name="T_relu", func_name="main")
sch.reverse_compute_inline(block=b3)
sch.reverse_compute_inline(block=b2)
sch.reverse_compute_inline(block=b1)
l4, l5, l6, l7 = sch.get_loops(block=b0)
l8 = sch.fuse(l4, l5, l6, l7, preserve_unit_iters=True)
v9 = sch.sample_categorical(candidates=[32, 64, 128, 256, 512, 1024], probs=[0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666], decision=5)
l10, l11 = sch.split(loop=l8, factors=[None, v9], preserve_unit_iters=True)
sch.bind(loop=l10, thread_axis="blockIdx.x")
sch.bind(loop=l11, thread_axis="threadIdx.x")
2024-05-01 15:55:03 [INFO] [evolutionary_search.cc:713] Generating candidates......
2024-05-01 15:55:03 [INFO] [evolutionary_search.cc:715] Picked top 6 candidate(s) from database
2024-05-01 15:55:04 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x7924938)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0xf58a868)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x12b0ac68)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x119a79d8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x142cf958)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x14b71608)]: 0 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x9eb67d8)]: 0 failure(s)
2024-05-01 15:55:04 [INFO] [evolutionary_search.cc:723] Sampled 506 candidate(s)
2024-05-01 15:55:04 [INFO] [evolutionary_search.cc:621] Evolve iter #0 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x7924938)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0xf58a868)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x12b0ac68)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x119a79d8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x142cf958)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x14b71608)]: 0 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x9eb67d8)]: 0 failure(s)
2024-05-01 15:55:04 [INFO] [evolutionary_search.cc:621] Evolve iter #1 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x7924938)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0xf58a868)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x12b0ac68)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x119a79d8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x142cf958)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x14b71608)]: 0 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x9eb67d8)]: 0 failure(s)
2024-05-01 15:55:05 [INFO] [evolutionary_search.cc:621] Evolve iter #2 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x7924938)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0xf58a868)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x12b0ac68)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x119a79d8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x142cf958)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x14b71608)]: 0 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x9eb67d8)]: 0 failure(s)
2024-05-01 15:55:05 [INFO] [evolutionary_search.cc:621] Evolve iter #3 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x7924938)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0xf58a868)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x12b0ac68)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x119a79d8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x142cf958)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x14b71608)]: 0 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x9eb67d8)]: 0 failure(s)
2024-05-01 15:55:05 [INFO] [evolutionary_search.cc:649] Scores of the best 6 candidates:
[1 : 6]:	0.7306  0.7058  0.6652  0.4675  0.0888  0.0838
2024-05-01 15:55:05 [INFO] [evolutionary_search.cc:727] Got 6 candidate(s) with evolutionary search
2024-05-01 15:55:05 [INFO] [evolutionary_search.cc:730] Sending 6 candidates(s) for measurement
2024-05-01 18:32:54 [INFO] [task_scheduler.cc:131] [Task #56: fused_concatenate_multiply_add_nn_relu_28] Trial #1: GFLOPs: 44.2184. Time: 3.2978 us. Best GFLOPs: 44.2184
2024-05-01 18:32:54 [INFO] [task_scheduler.cc:131] [Task #56: fused_concatenate_multiply_add_nn_relu_28] Trial #2: GFLOPs: 51.4050. Time: 2.8368 us. Best GFLOPs: 51.4050
2024-05-01 18:32:54 [INFO] [task_scheduler.cc:131] [Task #56: fused_concatenate_multiply_add_nn_relu_28] Trial #3: GFLOPs: 47.5002. Time: 3.0700 us. Best GFLOPs: 51.4050
2024-05-01 18:32:54 [INFO] [task_scheduler.cc:131] [Task #56: fused_concatenate_multiply_add_nn_relu_28] Trial #4: GFLOPs: 38.8002. Time: 3.7583 us. Best GFLOPs: 51.4050
2024-05-01 18:32:54 [INFO] [task_scheduler.cc:131] [Task #56: fused_concatenate_multiply_add_nn_relu_28] Trial #5: GFLOPs: 47.6491. Time: 3.0604 us. Best GFLOPs: 51.4050
2024-05-01 18:32:54 [INFO] [task_scheduler.cc:131] [Task #56: fused_concatenate_multiply_add_nn_relu_28] Trial #6: GFLOPs: 47.5134. Time: 3.0691 us. Best GFLOPs: 51.4050
