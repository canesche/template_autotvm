2024-04-29 16:31:52 [INFO] [task_scheduler.cc:160] Initializing Task #96: "fused_nn_conv2d_add_nn_relu_47"
2024-04-29 16:31:52 [INFO] [task_scheduler.cc:35] 
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(1280), T.int64(14), T.int64(14)), "float32"), p1: T.Buffer((T.int64(128), T.int64(1280), T.int64(1), T.int64(1)), "float32"), p2: T.Buffer((T.int64(1), T.int64(128), T.int64(1), T.int64(1)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(128), T.int64(14), T.int64(14)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        pad_temp = T.alloc_buffer((T.int64(1), T.int64(1280), T.int64(14), T.int64(14)))
        conv2d_nchw = T.alloc_buffer((T.int64(1), T.int64(128), T.int64(14), T.int64(14)))
        T_add = T.alloc_buffer((T.int64(1), T.int64(128), T.int64(14), T.int64(14)))
        for i0, i1, i2, i3 in T.grid(T.int64(1), T.int64(1280), T.int64(14), T.int64(14)):
            with T.block("pad_temp"):
                v_i0, v_i1, v_i2, v_i3 = T.axis.remap("SSSS", [i0, i1, i2, i3])
                T.reads(p0[v_i0, v_i1, v_i2, v_i3])
                T.writes(pad_temp[v_i0, v_i1, v_i2, v_i3])
                pad_temp[v_i0, v_i1, v_i2, v_i3] = p0[v_i0, v_i1, v_i2, v_i3]
        for nn, ff, yy, xx, rc, ry, rx in T.grid(T.int64(1), T.int64(128), T.int64(14), T.int64(14), T.int64(1280), T.int64(1), T.int64(1)):
            with T.block("conv2d_nchw"):
                v_nn, v_ff, v_yy, v_xx, v_rc, v_ry, v_rx = T.axis.remap("SSSSRRR", [nn, ff, yy, xx, rc, ry, rx])
                T.reads(pad_temp[v_nn, v_rc, v_yy + v_ry, v_xx + v_rx], p1[v_ff, v_rc, v_ry, v_rx])
                T.writes(conv2d_nchw[v_nn, v_ff, v_yy, v_xx])
                with T.init():
                    conv2d_nchw[v_nn, v_ff, v_yy, v_xx] = T.float32(0)
                conv2d_nchw[v_nn, v_ff, v_yy, v_xx] = conv2d_nchw[v_nn, v_ff, v_yy, v_xx] + pad_temp[v_nn, v_rc, v_yy + v_ry, v_xx + v_rx] * p1[v_ff, v_rc, v_ry, v_rx]
        for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(128), T.int64(14), T.int64(14)):
            with T.block("T_add"):
                v_ax0, v_ax1, v_ax2, v_ax3 = T.axis.remap("SSSS", [ax0, ax1, ax2, ax3])
                T.reads(conv2d_nchw[v_ax0, v_ax1, v_ax2, v_ax3], p2[v_ax0, v_ax1, T.int64(0), T.int64(0)])
                T.writes(T_add[v_ax0, v_ax1, v_ax2, v_ax3])
                T_add[v_ax0, v_ax1, v_ax2, v_ax3] = conv2d_nchw[v_ax0, v_ax1, v_ax2, v_ax3] + p2[v_ax0, v_ax1, T.int64(0), T.int64(0)]
        for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(128), T.int64(14), T.int64(14)):
            with T.block("T_relu"):
                v_ax0, v_ax1, v_ax2, v_ax3 = T.axis.remap("SSSS", [ax0, ax1, ax2, ax3])
                T.reads(T_add[v_ax0, v_ax1, v_ax2, v_ax3])
                T.writes(T_relu[v_ax0, v_ax1, v_ax2, v_ax3])
                T_relu[v_ax0, v_ax1, v_ax2, v_ax3] = T.max(T_add[v_ax0, v_ax1, v_ax2, v_ax3], T.float32(0))
2024-04-29 16:31:52 [INFO] [task_scheduler.cc:164] Total 3 design space(s) generated
2024-04-29 16:31:52 [INFO] [task_scheduler.cc:170] Design space #0:
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(1280), T.int64(14), T.int64(14)), "float32"), p1: T.Buffer((T.int64(128), T.int64(1280), T.int64(1), T.int64(1)), "float32"), p2: T.Buffer((T.int64(1), T.int64(128), T.int64(1), T.int64(1)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(128), T.int64(14), T.int64(14)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        with T.block("root"):
            T.reads()
            T.writes()
            T.block_attr({"meta_schedule.unroll_explicit": 0})
            conv2d_nchw_local = T.alloc_buffer((T.int64(1), T.int64(128), T.int64(14), T.int64(14)), scope="local")
            pad_temp_shared = T.alloc_buffer((T.int64(1), T.int64(1280), T.int64(14), T.int64(14)), scope="shared")
            p1_shared = T.alloc_buffer((T.int64(128), T.int64(1280), T.int64(1), T.int64(1)), scope="shared")
            for nn_0_ff_0_yy_0_xx_0_fused in T.thread_binding(T.int64(64), thread="blockIdx.x"):
                for nn_1_ff_1_yy_1_xx_1_fused in T.thread_binding(T.int64(7), thread="vthread.x"):
                    for nn_2_ff_2_yy_2_xx_2_fused in T.thread_binding(T.int64(8), thread="threadIdx.x"):
                        for rc_0, ry_0, rx_0 in T.grid(T.int64(2), T.int64(1), T.int64(1)):
                            for ax0_ax1_ax2_ax3_fused in range(T.int64(62720)):
                                with T.block("pad_temp_shared"):
                                    v0 = T.axis.spatial(T.int64(1), T.int64(0))
                                    v1 = T.axis.spatial(T.int64(1280), rc_0 * T.int64(640) + ax0_ax1_ax2_ax3_fused // T.int64(98))
                                    v2 = T.axis.spatial(T.int64(14), ax0_ax1_ax2_ax3_fused % T.int64(98) // T.int64(7))
                                    v3 = T.axis.spatial(T.int64(14), nn_0_ff_0_yy_0_xx_0_fused % T.int64(2) * T.int64(7) + ax0_ax1_ax2_ax3_fused % T.int64(7))
                                    T.reads(p0[v0, v1, v2, v3])
                                    T.writes(pad_temp_shared[v0, v1, v2, v3])
                                    T.block_attr({"meta_schedule.cooperative_fetch": 3})
                                    pad_temp_shared[v0, v1, v2, v3] = p0[v0, v1, v2, v3]
                            for ax0_ax1_ax2_ax3_fused in range(T.int64(2560)):
                                with T.block("p1_shared"):
                                    v0 = T.axis.spatial(T.int64(128), nn_0_ff_0_yy_0_xx_0_fused // T.int64(2) * T.int64(4) + ax0_ax1_ax2_ax3_fused // T.int64(640))
                                    v1 = T.axis.spatial(T.int64(1280), rc_0 * T.int64(640) + ax0_ax1_ax2_ax3_fused % T.int64(640))
                                    v2 = T.axis.spatial(T.int64(1), T.int64(0))
                                    v3 = T.axis.spatial(T.int64(1), T.int64(0))
                                    T.reads(p1[v0, v1, v2, v3])
                                    T.writes(p1_shared[v0, v1, v2, v3])
                                    T.block_attr({"meta_schedule.cooperative_fetch": 4})
                                    p1_shared[v0, v1, v2, v3] = p1[v0, v1, v2, v3]
                            for rc_1, ry_1, rx_1, nn_3, ff_3, yy_3, xx_3, rc_2, ry_2, rx_2, nn_4, ff_4, yy_4, xx_4 in T.grid(T.int64(80), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(8), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(7), T.int64(1)):
                                with T.block("conv2d_nchw"):
                                    v_nn = T.axis.spatial(T.int64(1), nn_3 + nn_4)
                                    v_ff = T.axis.spatial(T.int64(128), nn_0_ff_0_yy_0_xx_0_fused // T.int64(2) * T.int64(4) + nn_2_ff_2_yy_2_xx_2_fused // T.int64(2) + ff_3 + ff_4)
                                    v_yy = T.axis.spatial(T.int64(14), nn_2_ff_2_yy_2_xx_2_fused % T.int64(2) * T.int64(7) + yy_3 * T.int64(7) + yy_4)
                                    v_xx = T.axis.spatial(T.int64(14), nn_0_ff_0_yy_0_xx_0_fused % T.int64(2) * T.int64(7) + nn_1_ff_1_yy_1_xx_1_fused + xx_3 + xx_4)
                                    v_rc = T.axis.reduce(T.int64(1280), rc_0 * T.int64(640) + rc_1 * T.int64(8) + rc_2)
                                    v_ry = T.axis.reduce(T.int64(1), ry_0 + ry_1 + ry_2)
                                    v_rx = T.axis.reduce(T.int64(1), rx_0 + rx_1 + rx_2)
                                    T.reads(pad_temp_shared[v_nn, v_rc, v_yy + v_ry, v_xx + v_rx], p1_shared[v_ff, v_rc, v_ry, v_rx])
                                    T.writes(conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx])
                                    T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 32, "meta_schedule.tiling_structure": "SSSRRSRS"})
                                    with T.init():
                                        conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx] = T.float32(0)
                                    conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx] = conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx] + pad_temp_shared[v_nn, v_rc, v_yy + v_ry, v_xx + v_rx] * p1_shared[v_ff, v_rc, v_ry, v_rx]
                        for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(1), T.int64(7), T.int64(1)):
                            with T.block("conv2d_nchw_local"):
                                v0 = T.axis.spatial(T.int64(1), ax0)
                                v1 = T.axis.spatial(T.int64(128), nn_0_ff_0_yy_0_xx_0_fused // T.int64(2) * T.int64(4) + nn_2_ff_2_yy_2_xx_2_fused // T.int64(2) + ax1)
                                v2 = T.axis.spatial(T.int64(14), nn_2_ff_2_yy_2_xx_2_fused % T.int64(2) * T.int64(7) + ax2)
                                v3 = T.axis.spatial(T.int64(14), nn_0_ff_0_yy_0_xx_0_fused % T.int64(2) * T.int64(7) + nn_1_ff_1_yy_1_xx_1_fused + ax3)
                                T.reads(conv2d_nchw_local[v0, v1, v2, v3], p2[v0, v1, T.int64(0), T.int64(0)])
                                T.writes(T_relu[v0, v1, v2, v3])
                                T_relu[v0, v1, v2, v3] = T.max(conv2d_nchw_local[v0, v1, v2, v3] + p2[v0, v1, T.int64(0), T.int64(0)], T.float32(0))
b0 = sch.get_block(name="pad_temp", func_name="main")
b1 = sch.get_block(name="conv2d_nchw", func_name="main")
b2 = sch.get_block(name="T_add", func_name="main")
b3 = sch.get_block(name="T_relu", func_name="main")
b4 = sch.get_block(name="root", func_name="main")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSSRRSRS")
l5, l6, l7, l8, l9, l10, l11 = sch.get_loops(block=b1)
v12, v13, v14, v15, v16 = sch.sample_perfect_tile(loop=l5, n=5, max_innermost_factor=64, decision=[1, 1, 1, 1, 1])
l17, l18, l19, l20, l21 = sch.split(loop=l5, factors=[v12, v13, v14, v15, v16], preserve_unit_iters=True)
v22, v23, v24, v25, v26 = sch.sample_perfect_tile(loop=l6, n=5, max_innermost_factor=64, decision=[32, 1, 4, 1, 1])
l27, l28, l29, l30, l31 = sch.split(loop=l6, factors=[v22, v23, v24, v25, v26], preserve_unit_iters=True)
v32, v33, v34, v35, v36 = sch.sample_perfect_tile(loop=l7, n=5, max_innermost_factor=64, decision=[1, 1, 2, 1, 7])
l37, l38, l39, l40, l41 = sch.split(loop=l7, factors=[v32, v33, v34, v35, v36], preserve_unit_iters=True)
v42, v43, v44, v45, v46 = sch.sample_perfect_tile(loop=l8, n=5, max_innermost_factor=64, decision=[2, 7, 1, 1, 1])
l47, l48, l49, l50, l51 = sch.split(loop=l8, factors=[v42, v43, v44, v45, v46], preserve_unit_iters=True)
v52, v53, v54 = sch.sample_perfect_tile(loop=l9, n=3, max_innermost_factor=64, decision=[2, 80, 8])
l55, l56, l57 = sch.split(loop=l9, factors=[v52, v53, v54], preserve_unit_iters=True)
v58, v59, v60 = sch.sample_perfect_tile(loop=l10, n=3, max_innermost_factor=64, decision=[1, 1, 1])
l61, l62, l63 = sch.split(loop=l10, factors=[v58, v59, v60], preserve_unit_iters=True)
v64, v65, v66 = sch.sample_perfect_tile(loop=l11, n=3, max_innermost_factor=64, decision=[1, 1, 1])
l67, l68, l69 = sch.split(loop=l11, factors=[v64, v65, v66], preserve_unit_iters=True)
sch.reorder(l17, l27, l37, l47, l18, l28, l38, l48, l19, l29, l39, l49, l55, l61, l67, l56, l62, l68, l20, l30, l40, l50, l57, l63, l69, l21, l31, l41, l51)
l70 = sch.fuse(l17, l27, l37, l47, preserve_unit_iters=True)
sch.bind(loop=l70, thread_axis="blockIdx.x")
l71 = sch.fuse(l18, l28, l38, l48, preserve_unit_iters=True)
sch.bind(loop=l71, thread_axis="vthread.x")
l72 = sch.fuse(l19, l29, l39, l49, preserve_unit_iters=True)
sch.bind(loop=l72, thread_axis="threadIdx.x")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_low_inclusive", ann_val=32)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_high_inclusive", ann_val=1024)
b73 = sch.cache_write(block=b1, write_buffer_index=0, storage_scope="local")
sch.reverse_compute_at(block=b73, loop=l72, preserve_unit_loops=True, index=-1)
b74 = sch.cache_read(block=b1, read_buffer_index=0, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b74, loop=l67, preserve_unit_loops=True, index=-1)
l75, l76, l77, l78, l79, l80, l81, l82, l83, l84 = sch.get_loops(block=b74)
l85 = sch.fuse(l81, l82, l83, l84, preserve_unit_iters=True)
v86 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=2)
sch.annotate(block_or_loop=b74, ann_key="meta_schedule.cooperative_fetch", ann_val=v86)
b87 = sch.cache_read(block=b1, read_buffer_index=1, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b87, loop=l67, preserve_unit_loops=True, index=-1)
l88, l89, l90, l91, l92, l93, l94, l95, l96, l97 = sch.get_loops(block=b87)
l98 = sch.fuse(l94, l95, l96, l97, preserve_unit_iters=True)
v99 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b87, ann_key="meta_schedule.cooperative_fetch", ann_val=v99)
sch.reverse_compute_inline(block=b3)
sch.reverse_compute_inline(block=b2)
sch.compute_inline(block=b0)
v100 = sch.sample_categorical(candidates=[0, 16, 64, 512, 1024], probs=[0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001], decision=0)
sch.annotate(block_or_loop=b4, ann_key="meta_schedule.unroll_explicit", ann_val=v100)
2024-04-29 16:31:52 [INFO] [task_scheduler.cc:170] Design space #1:
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(1280), T.int64(14), T.int64(14)), "float32"), p1: T.Buffer((T.int64(128), T.int64(1280), T.int64(1), T.int64(1)), "float32"), p2: T.Buffer((T.int64(1), T.int64(128), T.int64(1), T.int64(1)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(128), T.int64(14), T.int64(14)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        with T.block("root"):
            T.reads()
            T.writes()
            T.block_attr({"meta_schedule.unroll_explicit": 1024})
            conv2d_nchw_local = T.alloc_buffer((T.int64(1), T.int64(128), T.int64(14), T.int64(14)), scope="local")
            pad_temp_shared = T.alloc_buffer((T.int64(1), T.int64(1280), T.int64(14), T.int64(14)), scope="shared")
            p1_shared = T.alloc_buffer((T.int64(128), T.int64(1280), T.int64(1), T.int64(1)), scope="shared")
            for nn_0_ff_0_yy_0_xx_0_fused in T.thread_binding(T.int64(64), thread="blockIdx.x"):
                for nn_1_ff_1_yy_1_xx_1_fused in T.thread_binding(T.int64(7), thread="vthread.x"):
                    for nn_2_ff_2_yy_2_xx_2_fused in T.thread_binding(T.int64(8), thread="threadIdx.x"):
                        for rc_0_ry_0_rx_0_fused in T.serial(T.int64(2), annotations={"software_pipeline_async_stages": [0], "software_pipeline_order": [0, 1, 2], "software_pipeline_stage": [0, 0, 2]}):
                            for ax0_ax1_ax2_ax3_fused in range(T.int64(62720)):
                                with T.block("pad_temp_shared"):
                                    v0 = T.axis.spatial(T.int64(1), T.int64(0))
                                    v1 = T.axis.spatial(T.int64(1280), rc_0_ry_0_rx_0_fused * T.int64(640) + ax0_ax1_ax2_ax3_fused // T.int64(98))
                                    v2 = T.axis.spatial(T.int64(14), ax0_ax1_ax2_ax3_fused % T.int64(98) // T.int64(7))
                                    v3 = T.axis.spatial(T.int64(14), nn_0_ff_0_yy_0_xx_0_fused % T.int64(2) * T.int64(7) + ax0_ax1_ax2_ax3_fused % T.int64(7))
                                    T.reads(p0[v0, v1, v2, v3])
                                    T.writes(pad_temp_shared[v0, v1, v2, v3])
                                    T.block_attr({"meta_schedule.cooperative_fetch": 3})
                                    pad_temp_shared[v0, v1, v2, v3] = p0[v0, v1, v2, v3]
                            for ax0_ax1_ax2_ax3_fused in range(T.int64(2560)):
                                with T.block("p1_shared"):
                                    v0 = T.axis.spatial(T.int64(128), nn_0_ff_0_yy_0_xx_0_fused // T.int64(2) * T.int64(4) + ax0_ax1_ax2_ax3_fused // T.int64(640))
                                    v1 = T.axis.spatial(T.int64(1280), rc_0_ry_0_rx_0_fused * T.int64(640) + ax0_ax1_ax2_ax3_fused % T.int64(640))
                                    v2 = T.axis.spatial(T.int64(1), T.int64(0))
                                    v3 = T.axis.spatial(T.int64(1), T.int64(0))
                                    T.reads(p1[v0, v1, v2, v3])
                                    T.writes(p1_shared[v0, v1, v2, v3])
                                    T.block_attr({"meta_schedule.cooperative_fetch": 4})
                                    p1_shared[v0, v1, v2, v3] = p1[v0, v1, v2, v3]
                            for rc_1, ry_1, rx_1, nn_3, ff_3, yy_3, xx_3, rc_2, ry_2, rx_2, nn_4, ff_4, yy_4, xx_4 in T.grid(T.int64(80), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(8), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(7), T.int64(1)):
                                with T.block("conv2d_nchw"):
                                    v_nn = T.axis.spatial(T.int64(1), nn_3 + nn_4)
                                    v_ff = T.axis.spatial(T.int64(128), nn_0_ff_0_yy_0_xx_0_fused // T.int64(2) * T.int64(4) + nn_2_ff_2_yy_2_xx_2_fused // T.int64(2) + ff_3 + ff_4)
                                    v_yy = T.axis.spatial(T.int64(14), nn_2_ff_2_yy_2_xx_2_fused % T.int64(2) * T.int64(7) + yy_3 * T.int64(7) + yy_4)
                                    v_xx = T.axis.spatial(T.int64(14), nn_0_ff_0_yy_0_xx_0_fused % T.int64(2) * T.int64(7) + nn_1_ff_1_yy_1_xx_1_fused + xx_3 + xx_4)
                                    v_rc = T.axis.reduce(T.int64(1280), rc_0_ry_0_rx_0_fused * T.int64(640) + rc_1 * T.int64(8) + rc_2)
                                    v_ry = T.axis.reduce(T.int64(1), ry_1 + ry_2)
                                    v_rx = T.axis.reduce(T.int64(1), rx_1 + rx_2)
                                    T.reads(pad_temp_shared[v_nn, v_rc, v_yy + v_ry, v_xx + v_rx], p1_shared[v_ff, v_rc, v_ry, v_rx])
                                    T.writes(conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx])
                                    T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 32, "meta_schedule.tiling_structure": "SSSRRSRS"})
                                    with T.init():
                                        conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx] = T.float32(0)
                                    conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx] = conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx] + pad_temp_shared[v_nn, v_rc, v_yy + v_ry, v_xx + v_rx] * p1_shared[v_ff, v_rc, v_ry, v_rx]
                        for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(1), T.int64(7), T.int64(1)):
                            with T.block("conv2d_nchw_local"):
                                v0 = T.axis.spatial(T.int64(1), ax0)
                                v1 = T.axis.spatial(T.int64(128), nn_0_ff_0_yy_0_xx_0_fused // T.int64(2) * T.int64(4) + nn_2_ff_2_yy_2_xx_2_fused // T.int64(2) + ax1)
                                v2 = T.axis.spatial(T.int64(14), nn_2_ff_2_yy_2_xx_2_fused % T.int64(2) * T.int64(7) + ax2)
                                v3 = T.axis.spatial(T.int64(14), nn_0_ff_0_yy_0_xx_0_fused % T.int64(2) * T.int64(7) + nn_1_ff_1_yy_1_xx_1_fused + ax3)
                                T.reads(conv2d_nchw_local[v0, v1, v2, v3], p2[v0, v1, T.int64(0), T.int64(0)])
                                T.writes(T_relu[v0, v1, v2, v3])
                                T_relu[v0, v1, v2, v3] = T.max(conv2d_nchw_local[v0, v1, v2, v3] + p2[v0, v1, T.int64(0), T.int64(0)], T.float32(0))
b0 = sch.get_block(name="pad_temp", func_name="main")
b1 = sch.get_block(name="conv2d_nchw", func_name="main")
b2 = sch.get_block(name="T_add", func_name="main")
b3 = sch.get_block(name="T_relu", func_name="main")
b4 = sch.get_block(name="root", func_name="main")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSSRRSRS")
l5, l6, l7, l8, l9, l10, l11 = sch.get_loops(block=b1)
v12, v13, v14, v15, v16 = sch.sample_perfect_tile(loop=l5, n=5, max_innermost_factor=64, decision=[1, 1, 1, 1, 1])
l17, l18, l19, l20, l21 = sch.split(loop=l5, factors=[v12, v13, v14, v15, v16], preserve_unit_iters=True)
v22, v23, v24, v25, v26 = sch.sample_perfect_tile(loop=l6, n=5, max_innermost_factor=64, decision=[32, 1, 4, 1, 1])
l27, l28, l29, l30, l31 = sch.split(loop=l6, factors=[v22, v23, v24, v25, v26], preserve_unit_iters=True)
v32, v33, v34, v35, v36 = sch.sample_perfect_tile(loop=l7, n=5, max_innermost_factor=64, decision=[1, 1, 2, 1, 7])
l37, l38, l39, l40, l41 = sch.split(loop=l7, factors=[v32, v33, v34, v35, v36], preserve_unit_iters=True)
v42, v43, v44, v45, v46 = sch.sample_perfect_tile(loop=l8, n=5, max_innermost_factor=64, decision=[2, 7, 1, 1, 1])
l47, l48, l49, l50, l51 = sch.split(loop=l8, factors=[v42, v43, v44, v45, v46], preserve_unit_iters=True)
v52, v53, v54 = sch.sample_perfect_tile(loop=l9, n=3, max_innermost_factor=64, decision=[2, 80, 8])
l55, l56, l57 = sch.split(loop=l9, factors=[v52, v53, v54], preserve_unit_iters=True)
v58, v59, v60 = sch.sample_perfect_tile(loop=l10, n=3, max_innermost_factor=64, decision=[1, 1, 1])
l61, l62, l63 = sch.split(loop=l10, factors=[v58, v59, v60], preserve_unit_iters=True)
v64, v65, v66 = sch.sample_perfect_tile(loop=l11, n=3, max_innermost_factor=64, decision=[1, 1, 1])
l67, l68, l69 = sch.split(loop=l11, factors=[v64, v65, v66], preserve_unit_iters=True)
sch.reorder(l17, l27, l37, l47, l18, l28, l38, l48, l19, l29, l39, l49, l55, l61, l67, l56, l62, l68, l20, l30, l40, l50, l57, l63, l69, l21, l31, l41, l51)
l70 = sch.fuse(l17, l27, l37, l47, preserve_unit_iters=True)
sch.bind(loop=l70, thread_axis="blockIdx.x")
l71 = sch.fuse(l18, l28, l38, l48, preserve_unit_iters=True)
sch.bind(loop=l71, thread_axis="vthread.x")
l72 = sch.fuse(l19, l29, l39, l49, preserve_unit_iters=True)
sch.bind(loop=l72, thread_axis="threadIdx.x")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_low_inclusive", ann_val=32)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_high_inclusive", ann_val=1024)
b73 = sch.cache_write(block=b1, write_buffer_index=0, storage_scope="local")
sch.reverse_compute_at(block=b73, loop=l72, preserve_unit_loops=True, index=-1)
b74 = sch.cache_read(block=b1, read_buffer_index=0, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b74, loop=l67, preserve_unit_loops=True, index=-1)
l75, l76, l77, l78, l79, l80, l81, l82, l83, l84 = sch.get_loops(block=b74)
l85 = sch.fuse(l81, l82, l83, l84, preserve_unit_iters=True)
v86 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=2)
sch.annotate(block_or_loop=b74, ann_key="meta_schedule.cooperative_fetch", ann_val=v86)
b87 = sch.cache_read(block=b1, read_buffer_index=1, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b87, loop=l67, preserve_unit_loops=True, index=-1)
l88, l89, l90, l91, l92, l93, l94, l95, l96, l97 = sch.get_loops(block=b87)
l98 = sch.fuse(l94, l95, l96, l97, preserve_unit_iters=True)
v99 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b87, ann_key="meta_schedule.cooperative_fetch", ann_val=v99)
l100 = sch.fuse(l55, l61, l67, preserve_unit_iters=True)
sch.annotate(block_or_loop=l100, ann_key="software_pipeline_stage", ann_val=[0, 0, 2])
sch.annotate(block_or_loop=l100, ann_key="software_pipeline_order", ann_val=[0, 1, 2])
sch.annotate(block_or_loop=l100, ann_key="software_pipeline_async_stages", ann_val=[0])
sch.reverse_compute_inline(block=b3)
sch.reverse_compute_inline(block=b2)
sch.compute_inline(block=b0)
v101 = sch.sample_categorical(candidates=[0, 16, 64, 512, 1024], probs=[0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001], decision=4)
sch.annotate(block_or_loop=b4, ann_key="meta_schedule.unroll_explicit", ann_val=v101)
2024-04-29 16:31:52 [INFO] [task_scheduler.cc:170] Design space #2:
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(1280), T.int64(14), T.int64(14)), "float32"), p1: T.Buffer((T.int64(128), T.int64(1280), T.int64(1), T.int64(1)), "float32"), p2: T.Buffer((T.int64(1), T.int64(128), T.int64(1), T.int64(1)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(128), T.int64(14), T.int64(14)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        with T.block("root"):
            T.reads()
            T.writes()
            T.block_attr({"meta_schedule.unroll_explicit": 512})
            conv2d_nchw_local = T.alloc_buffer((T.int64(1), T.int64(128), T.int64(14), T.int64(14)), scope="local")
            pad_temp_shared = T.alloc_buffer((T.int64(1), T.int64(1280), T.int64(14), T.int64(14)), scope="shared")
            p1_shared = T.alloc_buffer((T.int64(128), T.int64(1280), T.int64(1), T.int64(1)), scope="shared")
            for nn_0_ff_0_yy_0_xx_0_fused in T.thread_binding(T.int64(64), thread="blockIdx.x"):
                for nn_1_ff_1_yy_1_xx_1_fused in T.thread_binding(T.int64(7), thread="vthread.x"):
                    for nn_2_ff_2_yy_2_xx_2_fused in T.thread_binding(T.int64(8), thread="threadIdx.x"):
                        for rc_0_ry_0_rx_0_fused in T.serial(T.int64(2), annotations={"software_pipeline_async_stages": [0], "software_pipeline_order": [0, 1, 2], "software_pipeline_stage": [0, 0, 3]}):
                            for ax0_ax1_ax2_ax3_fused in range(T.int64(62720)):
                                with T.block("pad_temp_shared"):
                                    v0 = T.axis.spatial(T.int64(1), T.int64(0))
                                    v1 = T.axis.spatial(T.int64(1280), rc_0_ry_0_rx_0_fused * T.int64(640) + ax0_ax1_ax2_ax3_fused // T.int64(98))
                                    v2 = T.axis.spatial(T.int64(14), ax0_ax1_ax2_ax3_fused % T.int64(98) // T.int64(7))
                                    v3 = T.axis.spatial(T.int64(14), nn_0_ff_0_yy_0_xx_0_fused % T.int64(2) * T.int64(7) + ax0_ax1_ax2_ax3_fused % T.int64(7))
                                    T.reads(p0[v0, v1, v2, v3])
                                    T.writes(pad_temp_shared[v0, v1, v2, v3])
                                    T.block_attr({"meta_schedule.cooperative_fetch": 3})
                                    pad_temp_shared[v0, v1, v2, v3] = p0[v0, v1, v2, v3]
                            for ax0_ax1_ax2_ax3_fused in range(T.int64(2560)):
                                with T.block("p1_shared"):
                                    v0 = T.axis.spatial(T.int64(128), nn_0_ff_0_yy_0_xx_0_fused // T.int64(2) * T.int64(4) + ax0_ax1_ax2_ax3_fused // T.int64(640))
                                    v1 = T.axis.spatial(T.int64(1280), rc_0_ry_0_rx_0_fused * T.int64(640) + ax0_ax1_ax2_ax3_fused % T.int64(640))
                                    v2 = T.axis.spatial(T.int64(1), T.int64(0))
                                    v3 = T.axis.spatial(T.int64(1), T.int64(0))
                                    T.reads(p1[v0, v1, v2, v3])
                                    T.writes(p1_shared[v0, v1, v2, v3])
                                    T.block_attr({"meta_schedule.cooperative_fetch": 4})
                                    p1_shared[v0, v1, v2, v3] = p1[v0, v1, v2, v3]
                            for rc_1, ry_1, rx_1, nn_3, ff_3, yy_3, xx_3, rc_2, ry_2, rx_2, nn_4, ff_4, yy_4, xx_4 in T.grid(T.int64(80), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(8), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(7), T.int64(1)):
                                with T.block("conv2d_nchw"):
                                    v_nn = T.axis.spatial(T.int64(1), nn_3 + nn_4)
                                    v_ff = T.axis.spatial(T.int64(128), nn_0_ff_0_yy_0_xx_0_fused // T.int64(2) * T.int64(4) + nn_2_ff_2_yy_2_xx_2_fused // T.int64(2) + ff_3 + ff_4)
                                    v_yy = T.axis.spatial(T.int64(14), nn_2_ff_2_yy_2_xx_2_fused % T.int64(2) * T.int64(7) + yy_3 * T.int64(7) + yy_4)
                                    v_xx = T.axis.spatial(T.int64(14), nn_0_ff_0_yy_0_xx_0_fused % T.int64(2) * T.int64(7) + nn_1_ff_1_yy_1_xx_1_fused + xx_3 + xx_4)
                                    v_rc = T.axis.reduce(T.int64(1280), rc_0_ry_0_rx_0_fused * T.int64(640) + rc_1 * T.int64(8) + rc_2)
                                    v_ry = T.axis.reduce(T.int64(1), ry_1 + ry_2)
                                    v_rx = T.axis.reduce(T.int64(1), rx_1 + rx_2)
                                    T.reads(pad_temp_shared[v_nn, v_rc, v_yy + v_ry, v_xx + v_rx], p1_shared[v_ff, v_rc, v_ry, v_rx])
                                    T.writes(conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx])
                                    T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 32, "meta_schedule.tiling_structure": "SSSRRSRS"})
                                    with T.init():
                                        conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx] = T.float32(0)
                                    conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx] = conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx] + pad_temp_shared[v_nn, v_rc, v_yy + v_ry, v_xx + v_rx] * p1_shared[v_ff, v_rc, v_ry, v_rx]
                        for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(1), T.int64(7), T.int64(1)):
                            with T.block("conv2d_nchw_local"):
                                v0 = T.axis.spatial(T.int64(1), ax0)
                                v1 = T.axis.spatial(T.int64(128), nn_0_ff_0_yy_0_xx_0_fused // T.int64(2) * T.int64(4) + nn_2_ff_2_yy_2_xx_2_fused // T.int64(2) + ax1)
                                v2 = T.axis.spatial(T.int64(14), nn_2_ff_2_yy_2_xx_2_fused % T.int64(2) * T.int64(7) + ax2)
                                v3 = T.axis.spatial(T.int64(14), nn_0_ff_0_yy_0_xx_0_fused % T.int64(2) * T.int64(7) + nn_1_ff_1_yy_1_xx_1_fused + ax3)
                                T.reads(conv2d_nchw_local[v0, v1, v2, v3], p2[v0, v1, T.int64(0), T.int64(0)])
                                T.writes(T_relu[v0, v1, v2, v3])
                                T_relu[v0, v1, v2, v3] = T.max(conv2d_nchw_local[v0, v1, v2, v3] + p2[v0, v1, T.int64(0), T.int64(0)], T.float32(0))
b0 = sch.get_block(name="pad_temp", func_name="main")
b1 = sch.get_block(name="conv2d_nchw", func_name="main")
b2 = sch.get_block(name="T_add", func_name="main")
b3 = sch.get_block(name="T_relu", func_name="main")
b4 = sch.get_block(name="root", func_name="main")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSSRRSRS")
l5, l6, l7, l8, l9, l10, l11 = sch.get_loops(block=b1)
v12, v13, v14, v15, v16 = sch.sample_perfect_tile(loop=l5, n=5, max_innermost_factor=64, decision=[1, 1, 1, 1, 1])
l17, l18, l19, l20, l21 = sch.split(loop=l5, factors=[v12, v13, v14, v15, v16], preserve_unit_iters=True)
v22, v23, v24, v25, v26 = sch.sample_perfect_tile(loop=l6, n=5, max_innermost_factor=64, decision=[32, 1, 4, 1, 1])
l27, l28, l29, l30, l31 = sch.split(loop=l6, factors=[v22, v23, v24, v25, v26], preserve_unit_iters=True)
v32, v33, v34, v35, v36 = sch.sample_perfect_tile(loop=l7, n=5, max_innermost_factor=64, decision=[1, 1, 2, 1, 7])
l37, l38, l39, l40, l41 = sch.split(loop=l7, factors=[v32, v33, v34, v35, v36], preserve_unit_iters=True)
v42, v43, v44, v45, v46 = sch.sample_perfect_tile(loop=l8, n=5, max_innermost_factor=64, decision=[2, 7, 1, 1, 1])
l47, l48, l49, l50, l51 = sch.split(loop=l8, factors=[v42, v43, v44, v45, v46], preserve_unit_iters=True)
v52, v53, v54 = sch.sample_perfect_tile(loop=l9, n=3, max_innermost_factor=64, decision=[2, 80, 8])
l55, l56, l57 = sch.split(loop=l9, factors=[v52, v53, v54], preserve_unit_iters=True)
v58, v59, v60 = sch.sample_perfect_tile(loop=l10, n=3, max_innermost_factor=64, decision=[1, 1, 1])
l61, l62, l63 = sch.split(loop=l10, factors=[v58, v59, v60], preserve_unit_iters=True)
v64, v65, v66 = sch.sample_perfect_tile(loop=l11, n=3, max_innermost_factor=64, decision=[1, 1, 1])
l67, l68, l69 = sch.split(loop=l11, factors=[v64, v65, v66], preserve_unit_iters=True)
sch.reorder(l17, l27, l37, l47, l18, l28, l38, l48, l19, l29, l39, l49, l55, l61, l67, l56, l62, l68, l20, l30, l40, l50, l57, l63, l69, l21, l31, l41, l51)
l70 = sch.fuse(l17, l27, l37, l47, preserve_unit_iters=True)
sch.bind(loop=l70, thread_axis="blockIdx.x")
l71 = sch.fuse(l18, l28, l38, l48, preserve_unit_iters=True)
sch.bind(loop=l71, thread_axis="vthread.x")
l72 = sch.fuse(l19, l29, l39, l49, preserve_unit_iters=True)
sch.bind(loop=l72, thread_axis="threadIdx.x")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_low_inclusive", ann_val=32)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_high_inclusive", ann_val=1024)
b73 = sch.cache_write(block=b1, write_buffer_index=0, storage_scope="local")
sch.reverse_compute_at(block=b73, loop=l72, preserve_unit_loops=True, index=-1)
b74 = sch.cache_read(block=b1, read_buffer_index=0, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b74, loop=l67, preserve_unit_loops=True, index=-1)
l75, l76, l77, l78, l79, l80, l81, l82, l83, l84 = sch.get_loops(block=b74)
l85 = sch.fuse(l81, l82, l83, l84, preserve_unit_iters=True)
v86 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=2)
sch.annotate(block_or_loop=b74, ann_key="meta_schedule.cooperative_fetch", ann_val=v86)
b87 = sch.cache_read(block=b1, read_buffer_index=1, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b87, loop=l67, preserve_unit_loops=True, index=-1)
l88, l89, l90, l91, l92, l93, l94, l95, l96, l97 = sch.get_loops(block=b87)
l98 = sch.fuse(l94, l95, l96, l97, preserve_unit_iters=True)
v99 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b87, ann_key="meta_schedule.cooperative_fetch", ann_val=v99)
l100 = sch.fuse(l55, l61, l67, preserve_unit_iters=True)
sch.annotate(block_or_loop=l100, ann_key="software_pipeline_stage", ann_val=[0, 0, 3])
sch.annotate(block_or_loop=l100, ann_key="software_pipeline_order", ann_val=[0, 1, 2])
sch.annotate(block_or_loop=l100, ann_key="software_pipeline_async_stages", ann_val=[0])
sch.reverse_compute_inline(block=b3)
sch.reverse_compute_inline(block=b2)
sch.compute_inline(block=b0)
v101 = sch.sample_categorical(candidates=[0, 16, 64, 512, 1024], probs=[0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001], decision=3)
sch.annotate(block_or_loop=b4, ann_key="meta_schedule.unroll_explicit", ann_val=v101)
2024-04-29 17:51:53 [INFO] [evolutionary_search.cc:713] Generating candidates......
2024-04-29 17:51:53 [INFO] [evolutionary_search.cc:715] Picked top 0 candidate(s) from database
2024-04-29 17:51:55 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0xb8cf878)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0xe20c9d8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0xe20be98)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x13fede38)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x11318a58)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x12432f38)]: 491 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x145de998)]: 0 failure(s)
2024-04-29 17:51:56 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0xb8cf878)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0xe20c9d8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0xe20be98)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x13fede38)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x11318a58)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x12432f38)]: 980 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x145de998)]: 0 failure(s)
2024-04-29 17:51:58 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0xb8cf878)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0xe20c9d8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0xe20be98)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x13fede38)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x11318a58)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x12432f38)]: 1458 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x145de998)]: 0 failure(s)
2024-04-29 17:51:58 [INFO] [evolutionary_search.cc:723] Sampled 78 candidate(s)
2024-04-29 17:52:00 [INFO] [evolutionary_search.cc:621] Evolve iter #0 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0xb8cf878)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0xe20c9d8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0xe20be98)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x13fede38)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x11318a58)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x12432f38)]: 97 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x145de998)]: 0 failure(s)
2024-04-29 17:52:02 [INFO] [evolutionary_search.cc:621] Evolve iter #1 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0xb8cf878)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0xe20c9d8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0xe20be98)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x13fede38)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x11318a58)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x12432f38)]: 99 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x145de998)]: 0 failure(s)
2024-04-29 17:52:05 [INFO] [evolutionary_search.cc:621] Evolve iter #2 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0xb8cf878)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0xe20c9d8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0xe20be98)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x13fede38)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x11318a58)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x12432f38)]: 102 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x145de998)]: 0 failure(s)
2024-04-29 17:52:07 [INFO] [evolutionary_search.cc:621] Evolve iter #3 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0xb8cf878)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0xe20c9d8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0xe20be98)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x13fede38)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x11318a58)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x12432f38)]: 71 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x145de998)]: 0 failure(s)
2024-04-29 17:52:07 [INFO] [evolutionary_search.cc:649] Scores of the best 64 candidates:
[1 : 16]:	0.9988  0.9987  0.9981  0.9973  0.9970  0.9969  0.9968  0.9965  0.9959  0.9957  0.9954  0.9950  0.9914  0.9912  0.9911  0.9910
[17 : 32]:	0.9891  0.9877  0.9872  0.9869  0.9855  0.9843  0.9838  0.9837  0.9830  0.9824  0.9822  0.9814  0.9804  0.9796  0.9774  0.9769
[33 : 48]:	0.9759  0.9755  0.9721  0.9718  0.9700  0.9699  0.9698  0.9693  0.9675  0.9673  0.9653  0.9641  0.9634  0.9628  0.9618  0.9603
[49 : 64]:	0.9601  0.9590  0.9583  0.9582  0.9580  0.9556  0.9545  0.9539  0.9523  0.9519  0.9517  0.9512  0.9507  0.9507  0.9506  0.9503
2024-04-29 17:52:07 [INFO] [evolutionary_search.cc:727] Got 64 candidate(s) with evolutionary search
2024-04-29 17:52:07 [INFO] [evolutionary_search.cc:730] Sending 64 candidates(s) for measurement
2024-04-29 20:25:09 [INFO] [task_scheduler.cc:131] [Task #96: fused_nn_conv2d_add_nn_relu_47] Trial #1: GFLOPs: 125.0484. Time: 514.0046 us. Best GFLOPs: 125.0484
2024-04-29 20:25:09 [INFO] [task_scheduler.cc:131] [Task #96: fused_nn_conv2d_add_nn_relu_47] Trial #2: GFLOPs: 150.7844. Time: 426.2738 us. Best GFLOPs: 150.7844
2024-04-29 20:25:09 [INFO] [task_scheduler.cc:131] [Task #96: fused_nn_conv2d_add_nn_relu_47] Trial #3: GFLOPs: 697.7918. Time: 92.1127 us. Best GFLOPs: 697.7918
2024-04-29 20:25:09 [INFO] [task_scheduler.cc:131] [Task #96: fused_nn_conv2d_add_nn_relu_47] Trial #4: GFLOPs: 184.7358. Time: 347.9317 us. Best GFLOPs: 697.7918
2024-04-29 20:25:09 [INFO] [task_scheduler.cc:131] [Task #96: fused_nn_conv2d_add_nn_relu_47] Trial #5: GFLOPs: 217.1480. Time: 295.9984 us. Best GFLOPs: 697.7918
2024-04-29 20:25:09 [INFO] [task_scheduler.cc:131] [Task #96: fused_nn_conv2d_add_nn_relu_47] Trial #6: GFLOPs: 5.0663. Time: 12686.8476 us. Best GFLOPs: 697.7918
2024-04-29 20:25:09 [INFO] [task_scheduler.cc:131] [Task #96: fused_nn_conv2d_add_nn_relu_47] Trial #7: GFLOPs: 367.4110. Time: 174.9415 us. Best GFLOPs: 697.7918
2024-04-29 20:25:09 [INFO] [task_scheduler.cc:131] [Task #96: fused_nn_conv2d_add_nn_relu_47] Trial #8: GFLOPs: 208.5696. Time: 308.1727 us. Best GFLOPs: 697.7918
2024-04-29 20:25:09 [INFO] [task_scheduler.cc:131] [Task #96: fused_nn_conv2d_add_nn_relu_47] Trial #9: GFLOPs: 235.8546. Time: 272.5216 us. Best GFLOPs: 697.7918
2024-04-29 20:25:09 [INFO] [task_scheduler.cc:131] [Task #96: fused_nn_conv2d_add_nn_relu_47] Trial #10: GFLOPs: 16.1604. Time: 3977.3342 us. Best GFLOPs: 697.7918
2024-04-29 20:25:09 [INFO] [task_scheduler.cc:131] [Task #96: fused_nn_conv2d_add_nn_relu_47] Trial #11: GFLOPs: 1771.9901. Time: 36.2730 us. Best GFLOPs: 1771.9901
2024-04-29 20:25:09 [INFO] [task_scheduler.cc:131] [Task #96: fused_nn_conv2d_add_nn_relu_47] Trial #12: GFLOPs: 551.5558. Time: 116.5348 us. Best GFLOPs: 1771.9901
2024-04-29 20:25:09 [INFO] [task_scheduler.cc:131] [Task #96: fused_nn_conv2d_add_nn_relu_47] Trial #13: GFLOPs: 294.2937. Time: 218.4058 us. Best GFLOPs: 1771.9901
2024-04-29 20:25:09 [INFO] [task_scheduler.cc:131] [Task #96: fused_nn_conv2d_add_nn_relu_47] Trial #14: GFLOPs: 28.3706. Time: 2265.5658 us. Best GFLOPs: 1771.9901
2024-04-29 20:25:09 [INFO] [task_scheduler.cc:131] [Task #96: fused_nn_conv2d_add_nn_relu_47] Trial #15: GFLOPs: 115.4988. Time: 556.5032 us. Best GFLOPs: 1771.9901
2024-04-29 20:25:09 [INFO] [task_scheduler.cc:131] [Task #96: fused_nn_conv2d_add_nn_relu_47] Trial #16: GFLOPs: 48.6314. Time: 1321.6876 us. Best GFLOPs: 1771.9901
2024-04-29 20:25:09 [INFO] [task_scheduler.cc:131] [Task #96: fused_nn_conv2d_add_nn_relu_47] Trial #17: GFLOPs: 814.5602. Time: 78.9082 us. Best GFLOPs: 1771.9901
2024-04-29 20:25:09 [INFO] [task_scheduler.cc:131] [Task #96: fused_nn_conv2d_add_nn_relu_47] Trial #18: GFLOPs: 507.7619. Time: 126.5858 us. Best GFLOPs: 1771.9901
2024-04-29 20:25:09 [INFO] [task_scheduler.cc:131] [Task #96: fused_nn_conv2d_add_nn_relu_47] Trial #19: GFLOPs: 413.4347. Time: 155.4670 us. Best GFLOPs: 1771.9901
2024-04-29 20:25:09 [INFO] [task_scheduler.cc:131] [Task #96: fused_nn_conv2d_add_nn_relu_47] Trial #20: GFLOPs: 506.1267. Time: 126.9948 us. Best GFLOPs: 1771.9901
2024-04-29 20:25:09 [INFO] [task_scheduler.cc:131] [Task #96: fused_nn_conv2d_add_nn_relu_47] Trial #21: GFLOPs: 385.4326. Time: 166.7619 us. Best GFLOPs: 1771.9901
2024-04-29 20:25:09 [INFO] [task_scheduler.cc:131] [Task #96: fused_nn_conv2d_add_nn_relu_47] Trial #22: GFLOPs: 163.2946. Time: 393.6166 us. Best GFLOPs: 1771.9901
2024-04-29 20:25:09 [INFO] [task_scheduler.cc:131] [Task #96: fused_nn_conv2d_add_nn_relu_47] Trial #23: GFLOPs: 23.4793. Time: 2737.5395 us. Best GFLOPs: 1771.9901
2024-04-29 20:25:09 [INFO] [task_scheduler.cc:131] [Task #96: fused_nn_conv2d_add_nn_relu_47] Trial #24: GFLOPs: 169.1132. Time: 380.0735 us. Best GFLOPs: 1771.9901
2024-04-29 20:25:09 [INFO] [task_scheduler.cc:131] [Task #96: fused_nn_conv2d_add_nn_relu_47] Trial #25: GFLOPs: 212.3069. Time: 302.7478 us. Best GFLOPs: 1771.9901
2024-04-29 20:25:09 [INFO] [task_scheduler.cc:131] [Task #96: fused_nn_conv2d_add_nn_relu_47] Trial #26: GFLOPs: 382.2207. Time: 168.1632 us. Best GFLOPs: 1771.9901
2024-04-29 20:25:09 [INFO] [task_scheduler.cc:131] [Task #96: fused_nn_conv2d_add_nn_relu_47] Trial #27: GFLOPs: 119.1993. Time: 539.2268 us. Best GFLOPs: 1771.9901
2024-04-29 20:25:09 [INFO] [task_scheduler.cc:131] [Task #96: fused_nn_conv2d_add_nn_relu_47] Trial #28: GFLOPs: 23.1236. Time: 2779.6480 us. Best GFLOPs: 1771.9901
2024-04-29 20:25:09 [INFO] [task_scheduler.cc:131] [Task #96: fused_nn_conv2d_add_nn_relu_47] Trial #29: GFLOPs: 136.2155. Time: 471.8658 us. Best GFLOPs: 1771.9901
2024-04-29 20:25:09 [INFO] [task_scheduler.cc:131] [Task #96: fused_nn_conv2d_add_nn_relu_47] Trial #30: GFLOPs: 7.5663. Time: 8495.0186 us. Best GFLOPs: 1771.9901
2024-04-29 20:25:09 [INFO] [task_scheduler.cc:131] [Task #96: fused_nn_conv2d_add_nn_relu_47] Trial #31: GFLOPs: 1022.0334. Time: 62.8898 us. Best GFLOPs: 1771.9901
2024-04-29 20:25:09 [INFO] [task_scheduler.cc:131] [Task #96: fused_nn_conv2d_add_nn_relu_47] Trial #32: GFLOPs: 13.1924. Time: 4872.1433 us. Best GFLOPs: 1771.9901
2024-04-29 20:25:09 [INFO] [task_scheduler.cc:131] [Task #96: fused_nn_conv2d_add_nn_relu_47] Trial #33: GFLOPs: 473.4468. Time: 135.7607 us. Best GFLOPs: 1771.9901
2024-04-29 20:25:09 [INFO] [task_scheduler.cc:131] [Task #96: fused_nn_conv2d_add_nn_relu_47] Trial #34: GFLOPs: 875.3050. Time: 73.4321 us. Best GFLOPs: 1771.9901
2024-04-29 20:25:09 [INFO] [task_scheduler.cc:131] [Task #96: fused_nn_conv2d_add_nn_relu_47] Trial #35: GFLOPs: 230.9179. Time: 278.3476 us. Best GFLOPs: 1771.9901
2024-04-29 20:25:09 [INFO] [task_scheduler.cc:131] [Task #96: fused_nn_conv2d_add_nn_relu_47] Trial #36: GFLOPs: 399.5359. Time: 160.8753 us. Best GFLOPs: 1771.9901
2024-04-29 20:25:09 [INFO] [task_scheduler.cc:131] [Task #96: fused_nn_conv2d_add_nn_relu_47] Trial #37: GFLOPs: 16.0073. Time: 4015.3906 us. Best GFLOPs: 1771.9901
2024-04-29 20:25:09 [INFO] [task_scheduler.cc:131] [Task #96: fused_nn_conv2d_add_nn_relu_47] Trial #38: GFLOPs: 124.2966. Time: 517.1134 us. Best GFLOPs: 1771.9901
2024-04-29 20:25:09 [INFO] [task_scheduler.cc:131] [Task #96: fused_nn_conv2d_add_nn_relu_47] Trial #39: GFLOPs: 190.4059. Time: 337.5708 us. Best GFLOPs: 1771.9901
2024-04-29 20:25:09 [INFO] [task_scheduler.cc:131] [Task #96: fused_nn_conv2d_add_nn_relu_47] Trial #40: GFLOPs: 383.5354. Time: 167.5868 us. Best GFLOPs: 1771.9901
2024-04-29 20:25:09 [INFO] [task_scheduler.cc:131] [Task #96: fused_nn_conv2d_add_nn_relu_47] Trial #41: GFLOPs: 23.0844. Time: 2784.3698 us. Best GFLOPs: 1771.9901
2024-04-29 20:25:09 [INFO] [task_scheduler.cc:131] [Task #96: fused_nn_conv2d_add_nn_relu_47] Trial #42: GFLOPs: 190.9050. Time: 336.6882 us. Best GFLOPs: 1771.9901
2024-04-29 20:25:09 [INFO] [task_scheduler.cc:131] [Task #96: fused_nn_conv2d_add_nn_relu_47] Trial #43: GFLOPs: 14.6410. Time: 4390.1105 us. Best GFLOPs: 1771.9901
2024-04-29 20:25:09 [INFO] [task_scheduler.cc:131] [Task #96: fused_nn_conv2d_add_nn_relu_47] Trial #44: GFLOPs: 16.1544. Time: 3978.8308 us. Best GFLOPs: 1771.9901
2024-04-29 20:25:09 [INFO] [task_scheduler.cc:131] [Task #96: fused_nn_conv2d_add_nn_relu_47] Trial #45: GFLOPs: 1427.7490. Time: 45.0187 us. Best GFLOPs: 1771.9901
2024-04-29 20:25:09 [INFO] [task_scheduler.cc:131] [Task #96: fused_nn_conv2d_add_nn_relu_47] Trial #46: GFLOPs: 377.1103. Time: 170.4421 us. Best GFLOPs: 1771.9901
2024-04-29 20:25:09 [INFO] [task_scheduler.cc:131] [Task #96: fused_nn_conv2d_add_nn_relu_47] Trial #47: GFLOPs: 7.4298. Time: 8651.0079 us. Best GFLOPs: 1771.9901
2024-04-29 20:25:09 [INFO] [task_scheduler.cc:131] [Task #96: fused_nn_conv2d_add_nn_relu_47] Trial #48: GFLOPs: 710.8704. Time: 90.4180 us. Best GFLOPs: 1771.9901
2024-04-29 20:25:09 [INFO] [task_scheduler.cc:131] [Task #96: fused_nn_conv2d_add_nn_relu_47] Trial #49: GFLOPs: 1576.0135. Time: 40.7836 us. Best GFLOPs: 1771.9901
2024-04-29 20:25:09 [INFO] [task_scheduler.cc:131] [Task #96: fused_nn_conv2d_add_nn_relu_47] Trial #50: GFLOPs: 51.1195. Time: 1257.3568 us. Best GFLOPs: 1771.9901
2024-04-29 20:25:09 [INFO] [task_scheduler.cc:131] [Task #96: fused_nn_conv2d_add_nn_relu_47] Trial #51: GFLOPs: 43.5647. Time: 1475.4033 us. Best GFLOPs: 1771.9901
2024-04-29 20:25:09 [INFO] [task_scheduler.cc:131] [Task #96: fused_nn_conv2d_add_nn_relu_47] Trial #52: GFLOPs: 221.4081. Time: 290.3031 us. Best GFLOPs: 1771.9901
2024-04-29 20:25:09 [INFO] [task_scheduler.cc:131] [Task #96: fused_nn_conv2d_add_nn_relu_47] Trial #53: GFLOPs: 560.0383. Time: 114.7697 us. Best GFLOPs: 1771.9901
2024-04-29 20:25:09 [INFO] [task_scheduler.cc:131] [Task #96: fused_nn_conv2d_add_nn_relu_47] Trial #54: GFLOPs: 44.2939. Time: 1451.1118 us. Best GFLOPs: 1771.9901
2024-04-29 20:25:09 [INFO] [task_scheduler.cc:131] [Task #96: fused_nn_conv2d_add_nn_relu_47] Trial #55: GFLOPs: 280.1847. Time: 229.4039 us. Best GFLOPs: 1771.9901
2024-04-29 20:25:09 [INFO] [task_scheduler.cc:131] [Task #96: fused_nn_conv2d_add_nn_relu_47] Trial #56: GFLOPs: 81.8839. Time: 784.9584 us. Best GFLOPs: 1771.9901
2024-04-29 20:25:09 [INFO] [task_scheduler.cc:131] [Task #96: fused_nn_conv2d_add_nn_relu_47] Trial #57: GFLOPs: 287.0913. Time: 223.8851 us. Best GFLOPs: 1771.9901
2024-04-29 20:25:09 [INFO] [task_scheduler.cc:131] [Task #96: fused_nn_conv2d_add_nn_relu_47] Trial #58: GFLOPs: 21.1808. Time: 3034.6085 us. Best GFLOPs: 1771.9901
2024-04-29 20:25:09 [INFO] [task_scheduler.cc:131] [Task #96: fused_nn_conv2d_add_nn_relu_47] Trial #59: GFLOPs: 405.4356. Time: 158.5343 us. Best GFLOPs: 1771.9901
2024-04-29 20:25:09 [INFO] [task_scheduler.cc:131] [Task #96: fused_nn_conv2d_add_nn_relu_47] Trial #60: GFLOPs: 132.8981. Time: 483.6446 us. Best GFLOPs: 1771.9901
2024-04-29 20:25:09 [INFO] [task_scheduler.cc:131] [Task #96: fused_nn_conv2d_add_nn_relu_47] Trial #61: GFLOPs: 40.9619. Time: 1569.1520 us. Best GFLOPs: 1771.9901
2024-04-29 20:25:09 [INFO] [task_scheduler.cc:131] [Task #96: fused_nn_conv2d_add_nn_relu_47] Trial #62: GFLOPs: 1371.2163. Time: 46.8748 us. Best GFLOPs: 1771.9901
2024-04-29 20:25:09 [INFO] [task_scheduler.cc:131] [Task #96: fused_nn_conv2d_add_nn_relu_47] Trial #63: GFLOPs: 405.9067. Time: 158.3503 us. Best GFLOPs: 1771.9901
2024-04-29 20:25:09 [INFO] [task_scheduler.cc:131] [Task #96: fused_nn_conv2d_add_nn_relu_47] Trial #64: GFLOPs: 144.6419. Time: 444.3764 us. Best GFLOPs: 1771.9901
2024-05-01 15:05:32 [INFO] [task_scheduler.cc:160] Initializing Task #96: "fused_nn_conv2d_add_nn_relu_47"
2024-05-01 15:05:32 [INFO] [task_scheduler.cc:35] 
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(1280), T.int64(14), T.int64(14)), "float32"), p1: T.Buffer((T.int64(128), T.int64(1280), T.int64(1), T.int64(1)), "float32"), p2: T.Buffer((T.int64(1), T.int64(128), T.int64(1), T.int64(1)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(128), T.int64(14), T.int64(14)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        pad_temp = T.alloc_buffer((T.int64(1), T.int64(1280), T.int64(14), T.int64(14)))
        conv2d_nchw = T.alloc_buffer((T.int64(1), T.int64(128), T.int64(14), T.int64(14)))
        T_add = T.alloc_buffer((T.int64(1), T.int64(128), T.int64(14), T.int64(14)))
        for i0, i1, i2, i3 in T.grid(T.int64(1), T.int64(1280), T.int64(14), T.int64(14)):
            with T.block("pad_temp"):
                v_i0, v_i1, v_i2, v_i3 = T.axis.remap("SSSS", [i0, i1, i2, i3])
                T.reads(p0[v_i0, v_i1, v_i2, v_i3])
                T.writes(pad_temp[v_i0, v_i1, v_i2, v_i3])
                pad_temp[v_i0, v_i1, v_i2, v_i3] = p0[v_i0, v_i1, v_i2, v_i3]
        for nn, ff, yy, xx, rc, ry, rx in T.grid(T.int64(1), T.int64(128), T.int64(14), T.int64(14), T.int64(1280), T.int64(1), T.int64(1)):
            with T.block("conv2d_nchw"):
                v_nn, v_ff, v_yy, v_xx, v_rc, v_ry, v_rx = T.axis.remap("SSSSRRR", [nn, ff, yy, xx, rc, ry, rx])
                T.reads(pad_temp[v_nn, v_rc, v_yy + v_ry, v_xx + v_rx], p1[v_ff, v_rc, v_ry, v_rx])
                T.writes(conv2d_nchw[v_nn, v_ff, v_yy, v_xx])
                with T.init():
                    conv2d_nchw[v_nn, v_ff, v_yy, v_xx] = T.float32(0)
                conv2d_nchw[v_nn, v_ff, v_yy, v_xx] = conv2d_nchw[v_nn, v_ff, v_yy, v_xx] + pad_temp[v_nn, v_rc, v_yy + v_ry, v_xx + v_rx] * p1[v_ff, v_rc, v_ry, v_rx]
        for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(128), T.int64(14), T.int64(14)):
            with T.block("T_add"):
                v_ax0, v_ax1, v_ax2, v_ax3 = T.axis.remap("SSSS", [ax0, ax1, ax2, ax3])
                T.reads(conv2d_nchw[v_ax0, v_ax1, v_ax2, v_ax3], p2[v_ax0, v_ax1, T.int64(0), T.int64(0)])
                T.writes(T_add[v_ax0, v_ax1, v_ax2, v_ax3])
                T_add[v_ax0, v_ax1, v_ax2, v_ax3] = conv2d_nchw[v_ax0, v_ax1, v_ax2, v_ax3] + p2[v_ax0, v_ax1, T.int64(0), T.int64(0)]
        for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(128), T.int64(14), T.int64(14)):
            with T.block("T_relu"):
                v_ax0, v_ax1, v_ax2, v_ax3 = T.axis.remap("SSSS", [ax0, ax1, ax2, ax3])
                T.reads(T_add[v_ax0, v_ax1, v_ax2, v_ax3])
                T.writes(T_relu[v_ax0, v_ax1, v_ax2, v_ax3])
                T_relu[v_ax0, v_ax1, v_ax2, v_ax3] = T.max(T_add[v_ax0, v_ax1, v_ax2, v_ax3], T.float32(0))
2024-05-01 15:05:32 [INFO] [task_scheduler.cc:164] Total 3 design space(s) generated
2024-05-01 15:05:32 [INFO] [task_scheduler.cc:170] Design space #0:
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(1280), T.int64(14), T.int64(14)), "float32"), p1: T.Buffer((T.int64(128), T.int64(1280), T.int64(1), T.int64(1)), "float32"), p2: T.Buffer((T.int64(1), T.int64(128), T.int64(1), T.int64(1)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(128), T.int64(14), T.int64(14)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        with T.block("root"):
            T.reads()
            T.writes()
            T.block_attr({"meta_schedule.unroll_explicit": 64})
            conv2d_nchw_local = T.alloc_buffer((T.int64(1), T.int64(128), T.int64(14), T.int64(14)), scope="local")
            pad_temp_shared = T.alloc_buffer((T.int64(1), T.int64(1280), T.int64(14), T.int64(14)), scope="shared")
            p1_shared = T.alloc_buffer((T.int64(128), T.int64(1280), T.int64(1), T.int64(1)), scope="shared")
            for nn_0_ff_0_yy_0_xx_0_fused in T.thread_binding(T.int64(4), thread="blockIdx.x"):
                for nn_1_ff_1_yy_1_xx_1_fused in T.thread_binding(T.int64(56), thread="vthread.x"):
                    for nn_2_ff_2_yy_2_xx_2_fused in T.thread_binding(T.int64(8), thread="threadIdx.x"):
                        for rc_0, ry_0, rx_0 in T.grid(T.int64(320), T.int64(1), T.int64(1)):
                            for ax0_ax1_ax2_ax3_fused in range(T.int64(392)):
                                with T.block("pad_temp_shared"):
                                    v0 = T.axis.spatial(T.int64(1), T.int64(0))
                                    v1 = T.axis.spatial(T.int64(1280), rc_0 * T.int64(4) + ax0_ax1_ax2_ax3_fused // T.int64(98))
                                    v2 = T.axis.spatial(T.int64(14), nn_0_ff_0_yy_0_xx_0_fused % T.int64(2) * T.int64(7) + ax0_ax1_ax2_ax3_fused % T.int64(98) // T.int64(14))
                                    v3 = T.axis.spatial(T.int64(14), ax0_ax1_ax2_ax3_fused % T.int64(14))
                                    T.reads(p0[v0, v1, v2, v3])
                                    T.writes(pad_temp_shared[v0, v1, v2, v3])
                                    T.block_attr({"meta_schedule.cooperative_fetch": 4})
                                    pad_temp_shared[v0, v1, v2, v3] = p0[v0, v1, v2, v3]
                            for ax0_ax1_ax2_ax3_fused in range(T.int64(256)):
                                with T.block("p1_shared"):
                                    v0 = T.axis.spatial(T.int64(128), nn_0_ff_0_yy_0_xx_0_fused // T.int64(2) * T.int64(64) + ax0_ax1_ax2_ax3_fused // T.int64(4))
                                    v1 = T.axis.spatial(T.int64(1280), rc_0 * T.int64(4) + ax0_ax1_ax2_ax3_fused % T.int64(4))
                                    v2 = T.axis.spatial(T.int64(1), T.int64(0))
                                    v3 = T.axis.spatial(T.int64(1), T.int64(0))
                                    T.reads(p1[v0, v1, v2, v3])
                                    T.writes(p1_shared[v0, v1, v2, v3])
                                    T.block_attr({"meta_schedule.cooperative_fetch": 3})
                                    p1_shared[v0, v1, v2, v3] = p1[v0, v1, v2, v3]
                            for rc_1, ry_1, rx_1, nn_3, ff_3, yy_3, xx_3, rc_2, ry_2, rx_2, nn_4, ff_4, yy_4, xx_4 in T.grid(T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(7), T.int64(2), T.int64(4), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1)):
                                with T.block("conv2d_nchw"):
                                    v_nn = T.axis.spatial(T.int64(1), nn_3 + nn_4)
                                    v_ff = T.axis.spatial(T.int64(128), nn_0_ff_0_yy_0_xx_0_fused // T.int64(2) * T.int64(64) + nn_1_ff_1_yy_1_xx_1_fused // T.int64(7) * T.int64(8) + nn_2_ff_2_yy_2_xx_2_fused + ff_3 + ff_4)
                                    v_yy = T.axis.spatial(T.int64(14), nn_0_ff_0_yy_0_xx_0_fused % T.int64(2) * T.int64(7) + yy_3 + yy_4)
                                    v_xx = T.axis.spatial(T.int64(14), nn_1_ff_1_yy_1_xx_1_fused % T.int64(7) * T.int64(2) + xx_3 + xx_4)
                                    v_rc = T.axis.reduce(T.int64(1280), rc_0 * T.int64(4) + rc_1 * T.int64(4) + rc_2)
                                    v_ry = T.axis.reduce(T.int64(1), ry_0 + ry_1 + ry_2)
                                    v_rx = T.axis.reduce(T.int64(1), rx_0 + rx_1 + rx_2)
                                    T.reads(pad_temp_shared[v_nn, v_rc, v_yy + v_ry, v_xx + v_rx], p1_shared[v_ff, v_rc, v_ry, v_rx])
                                    T.writes(conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx])
                                    T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 32, "meta_schedule.tiling_structure": "SSSRRSRS"})
                                    with T.init():
                                        conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx] = T.float32(0)
                                    conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx] = conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx] + pad_temp_shared[v_nn, v_rc, v_yy + v_ry, v_xx + v_rx] * p1_shared[v_ff, v_rc, v_ry, v_rx]
                        for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(1), T.int64(7), T.int64(2)):
                            with T.block("conv2d_nchw_local"):
                                v0 = T.axis.spatial(T.int64(1), ax0)
                                v1 = T.axis.spatial(T.int64(128), nn_0_ff_0_yy_0_xx_0_fused // T.int64(2) * T.int64(64) + nn_1_ff_1_yy_1_xx_1_fused // T.int64(7) * T.int64(8) + nn_2_ff_2_yy_2_xx_2_fused + ax1)
                                v2 = T.axis.spatial(T.int64(14), nn_0_ff_0_yy_0_xx_0_fused % T.int64(2) * T.int64(7) + ax2)
                                v3 = T.axis.spatial(T.int64(14), nn_1_ff_1_yy_1_xx_1_fused % T.int64(7) * T.int64(2) + ax3)
                                T.reads(conv2d_nchw_local[v0, v1, v2, v3], p2[v0, v1, T.int64(0), T.int64(0)])
                                T.writes(T_relu[v0, v1, v2, v3])
                                T_relu[v0, v1, v2, v3] = T.max(conv2d_nchw_local[v0, v1, v2, v3] + p2[v0, v1, T.int64(0), T.int64(0)], T.float32(0))
b0 = sch.get_block(name="pad_temp", func_name="main")
b1 = sch.get_block(name="conv2d_nchw", func_name="main")
b2 = sch.get_block(name="T_add", func_name="main")
b3 = sch.get_block(name="T_relu", func_name="main")
b4 = sch.get_block(name="root", func_name="main")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSSRRSRS")
l5, l6, l7, l8, l9, l10, l11 = sch.get_loops(block=b1)
v12, v13, v14, v15, v16 = sch.sample_perfect_tile(loop=l5, n=5, max_innermost_factor=64, decision=[1, 1, 1, 1, 1])
l17, l18, l19, l20, l21 = sch.split(loop=l5, factors=[v12, v13, v14, v15, v16], preserve_unit_iters=True)
v22, v23, v24, v25, v26 = sch.sample_perfect_tile(loop=l6, n=5, max_innermost_factor=64, decision=[2, 8, 8, 1, 1])
l27, l28, l29, l30, l31 = sch.split(loop=l6, factors=[v22, v23, v24, v25, v26], preserve_unit_iters=True)
v32, v33, v34, v35, v36 = sch.sample_perfect_tile(loop=l7, n=5, max_innermost_factor=64, decision=[2, 1, 1, 7, 1])
l37, l38, l39, l40, l41 = sch.split(loop=l7, factors=[v32, v33, v34, v35, v36], preserve_unit_iters=True)
v42, v43, v44, v45, v46 = sch.sample_perfect_tile(loop=l8, n=5, max_innermost_factor=64, decision=[1, 7, 1, 2, 1])
l47, l48, l49, l50, l51 = sch.split(loop=l8, factors=[v42, v43, v44, v45, v46], preserve_unit_iters=True)
v52, v53, v54 = sch.sample_perfect_tile(loop=l9, n=3, max_innermost_factor=64, decision=[320, 1, 4])
l55, l56, l57 = sch.split(loop=l9, factors=[v52, v53, v54], preserve_unit_iters=True)
v58, v59, v60 = sch.sample_perfect_tile(loop=l10, n=3, max_innermost_factor=64, decision=[1, 1, 1])
l61, l62, l63 = sch.split(loop=l10, factors=[v58, v59, v60], preserve_unit_iters=True)
v64, v65, v66 = sch.sample_perfect_tile(loop=l11, n=3, max_innermost_factor=64, decision=[1, 1, 1])
l67, l68, l69 = sch.split(loop=l11, factors=[v64, v65, v66], preserve_unit_iters=True)
sch.reorder(l17, l27, l37, l47, l18, l28, l38, l48, l19, l29, l39, l49, l55, l61, l67, l56, l62, l68, l20, l30, l40, l50, l57, l63, l69, l21, l31, l41, l51)
l70 = sch.fuse(l17, l27, l37, l47, preserve_unit_iters=True)
sch.bind(loop=l70, thread_axis="blockIdx.x")
l71 = sch.fuse(l18, l28, l38, l48, preserve_unit_iters=True)
sch.bind(loop=l71, thread_axis="vthread.x")
l72 = sch.fuse(l19, l29, l39, l49, preserve_unit_iters=True)
sch.bind(loop=l72, thread_axis="threadIdx.x")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_low_inclusive", ann_val=32)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_high_inclusive", ann_val=1024)
b73 = sch.cache_write(block=b1, write_buffer_index=0, storage_scope="local")
sch.reverse_compute_at(block=b73, loop=l72, preserve_unit_loops=True, index=-1)
b74 = sch.cache_read(block=b1, read_buffer_index=0, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b74, loop=l67, preserve_unit_loops=True, index=-1)
l75, l76, l77, l78, l79, l80, l81, l82, l83, l84 = sch.get_loops(block=b74)
l85 = sch.fuse(l81, l82, l83, l84, preserve_unit_iters=True)
v86 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b74, ann_key="meta_schedule.cooperative_fetch", ann_val=v86)
b87 = sch.cache_read(block=b1, read_buffer_index=1, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b87, loop=l67, preserve_unit_loops=True, index=-1)
l88, l89, l90, l91, l92, l93, l94, l95, l96, l97 = sch.get_loops(block=b87)
l98 = sch.fuse(l94, l95, l96, l97, preserve_unit_iters=True)
v99 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=2)
sch.annotate(block_or_loop=b87, ann_key="meta_schedule.cooperative_fetch", ann_val=v99)
sch.reverse_compute_inline(block=b3)
sch.reverse_compute_inline(block=b2)
sch.compute_inline(block=b0)
v100 = sch.sample_categorical(candidates=[0, 16, 64, 512, 1024], probs=[0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001], decision=2)
sch.annotate(block_or_loop=b4, ann_key="meta_schedule.unroll_explicit", ann_val=v100)
2024-05-01 15:05:32 [INFO] [task_scheduler.cc:170] Design space #1:
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(1280), T.int64(14), T.int64(14)), "float32"), p1: T.Buffer((T.int64(128), T.int64(1280), T.int64(1), T.int64(1)), "float32"), p2: T.Buffer((T.int64(1), T.int64(128), T.int64(1), T.int64(1)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(128), T.int64(14), T.int64(14)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        with T.block("root"):
            T.reads()
            T.writes()
            T.block_attr({"meta_schedule.unroll_explicit": 1024})
            conv2d_nchw_local = T.alloc_buffer((T.int64(1), T.int64(128), T.int64(14), T.int64(14)), scope="local")
            pad_temp_shared = T.alloc_buffer((T.int64(1), T.int64(1280), T.int64(14), T.int64(14)), scope="shared")
            p1_shared = T.alloc_buffer((T.int64(128), T.int64(1280), T.int64(1), T.int64(1)), scope="shared")
            for nn_0_ff_0_yy_0_xx_0_fused in T.thread_binding(T.int64(4), thread="blockIdx.x"):
                for nn_1_ff_1_yy_1_xx_1_fused in T.thread_binding(T.int64(56), thread="vthread.x"):
                    for nn_2_ff_2_yy_2_xx_2_fused in T.thread_binding(T.int64(8), thread="threadIdx.x"):
                        for rc_0_ry_0_rx_0_fused in T.serial(T.int64(320), annotations={"software_pipeline_async_stages": [0], "software_pipeline_order": [0, 1, 2], "software_pipeline_stage": [0, 0, 2]}):
                            for ax0_ax1_ax2_ax3_fused in range(T.int64(392)):
                                with T.block("pad_temp_shared"):
                                    v0 = T.axis.spatial(T.int64(1), T.int64(0))
                                    v1 = T.axis.spatial(T.int64(1280), rc_0_ry_0_rx_0_fused * T.int64(4) + ax0_ax1_ax2_ax3_fused // T.int64(98))
                                    v2 = T.axis.spatial(T.int64(14), nn_0_ff_0_yy_0_xx_0_fused % T.int64(2) * T.int64(7) + ax0_ax1_ax2_ax3_fused % T.int64(98) // T.int64(14))
                                    v3 = T.axis.spatial(T.int64(14), ax0_ax1_ax2_ax3_fused % T.int64(14))
                                    T.reads(p0[v0, v1, v2, v3])
                                    T.writes(pad_temp_shared[v0, v1, v2, v3])
                                    T.block_attr({"meta_schedule.cooperative_fetch": 4})
                                    pad_temp_shared[v0, v1, v2, v3] = p0[v0, v1, v2, v3]
                            for ax0_ax1_ax2_ax3_fused in range(T.int64(256)):
                                with T.block("p1_shared"):
                                    v0 = T.axis.spatial(T.int64(128), nn_0_ff_0_yy_0_xx_0_fused // T.int64(2) * T.int64(64) + ax0_ax1_ax2_ax3_fused // T.int64(4))
                                    v1 = T.axis.spatial(T.int64(1280), rc_0_ry_0_rx_0_fused * T.int64(4) + ax0_ax1_ax2_ax3_fused % T.int64(4))
                                    v2 = T.axis.spatial(T.int64(1), T.int64(0))
                                    v3 = T.axis.spatial(T.int64(1), T.int64(0))
                                    T.reads(p1[v0, v1, v2, v3])
                                    T.writes(p1_shared[v0, v1, v2, v3])
                                    T.block_attr({"meta_schedule.cooperative_fetch": 3})
                                    p1_shared[v0, v1, v2, v3] = p1[v0, v1, v2, v3]
                            for rc_1, ry_1, rx_1, nn_3, ff_3, yy_3, xx_3, rc_2, ry_2, rx_2, nn_4, ff_4, yy_4, xx_4 in T.grid(T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(7), T.int64(2), T.int64(4), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1)):
                                with T.block("conv2d_nchw"):
                                    v_nn = T.axis.spatial(T.int64(1), nn_3 + nn_4)
                                    v_ff = T.axis.spatial(T.int64(128), nn_0_ff_0_yy_0_xx_0_fused // T.int64(2) * T.int64(64) + nn_1_ff_1_yy_1_xx_1_fused // T.int64(7) * T.int64(8) + nn_2_ff_2_yy_2_xx_2_fused + ff_3 + ff_4)
                                    v_yy = T.axis.spatial(T.int64(14), nn_0_ff_0_yy_0_xx_0_fused % T.int64(2) * T.int64(7) + yy_3 + yy_4)
                                    v_xx = T.axis.spatial(T.int64(14), nn_1_ff_1_yy_1_xx_1_fused % T.int64(7) * T.int64(2) + xx_3 + xx_4)
                                    v_rc = T.axis.reduce(T.int64(1280), rc_0_ry_0_rx_0_fused * T.int64(4) + rc_1 * T.int64(4) + rc_2)
                                    v_ry = T.axis.reduce(T.int64(1), ry_1 + ry_2)
                                    v_rx = T.axis.reduce(T.int64(1), rx_1 + rx_2)
                                    T.reads(pad_temp_shared[v_nn, v_rc, v_yy + v_ry, v_xx + v_rx], p1_shared[v_ff, v_rc, v_ry, v_rx])
                                    T.writes(conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx])
                                    T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 32, "meta_schedule.tiling_structure": "SSSRRSRS"})
                                    with T.init():
                                        conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx] = T.float32(0)
                                    conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx] = conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx] + pad_temp_shared[v_nn, v_rc, v_yy + v_ry, v_xx + v_rx] * p1_shared[v_ff, v_rc, v_ry, v_rx]
                        for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(1), T.int64(7), T.int64(2)):
                            with T.block("conv2d_nchw_local"):
                                v0 = T.axis.spatial(T.int64(1), ax0)
                                v1 = T.axis.spatial(T.int64(128), nn_0_ff_0_yy_0_xx_0_fused // T.int64(2) * T.int64(64) + nn_1_ff_1_yy_1_xx_1_fused // T.int64(7) * T.int64(8) + nn_2_ff_2_yy_2_xx_2_fused + ax1)
                                v2 = T.axis.spatial(T.int64(14), nn_0_ff_0_yy_0_xx_0_fused % T.int64(2) * T.int64(7) + ax2)
                                v3 = T.axis.spatial(T.int64(14), nn_1_ff_1_yy_1_xx_1_fused % T.int64(7) * T.int64(2) + ax3)
                                T.reads(conv2d_nchw_local[v0, v1, v2, v3], p2[v0, v1, T.int64(0), T.int64(0)])
                                T.writes(T_relu[v0, v1, v2, v3])
                                T_relu[v0, v1, v2, v3] = T.max(conv2d_nchw_local[v0, v1, v2, v3] + p2[v0, v1, T.int64(0), T.int64(0)], T.float32(0))
b0 = sch.get_block(name="pad_temp", func_name="main")
b1 = sch.get_block(name="conv2d_nchw", func_name="main")
b2 = sch.get_block(name="T_add", func_name="main")
b3 = sch.get_block(name="T_relu", func_name="main")
b4 = sch.get_block(name="root", func_name="main")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSSRRSRS")
l5, l6, l7, l8, l9, l10, l11 = sch.get_loops(block=b1)
v12, v13, v14, v15, v16 = sch.sample_perfect_tile(loop=l5, n=5, max_innermost_factor=64, decision=[1, 1, 1, 1, 1])
l17, l18, l19, l20, l21 = sch.split(loop=l5, factors=[v12, v13, v14, v15, v16], preserve_unit_iters=True)
v22, v23, v24, v25, v26 = sch.sample_perfect_tile(loop=l6, n=5, max_innermost_factor=64, decision=[2, 8, 8, 1, 1])
l27, l28, l29, l30, l31 = sch.split(loop=l6, factors=[v22, v23, v24, v25, v26], preserve_unit_iters=True)
v32, v33, v34, v35, v36 = sch.sample_perfect_tile(loop=l7, n=5, max_innermost_factor=64, decision=[2, 1, 1, 7, 1])
l37, l38, l39, l40, l41 = sch.split(loop=l7, factors=[v32, v33, v34, v35, v36], preserve_unit_iters=True)
v42, v43, v44, v45, v46 = sch.sample_perfect_tile(loop=l8, n=5, max_innermost_factor=64, decision=[1, 7, 1, 2, 1])
l47, l48, l49, l50, l51 = sch.split(loop=l8, factors=[v42, v43, v44, v45, v46], preserve_unit_iters=True)
v52, v53, v54 = sch.sample_perfect_tile(loop=l9, n=3, max_innermost_factor=64, decision=[320, 1, 4])
l55, l56, l57 = sch.split(loop=l9, factors=[v52, v53, v54], preserve_unit_iters=True)
v58, v59, v60 = sch.sample_perfect_tile(loop=l10, n=3, max_innermost_factor=64, decision=[1, 1, 1])
l61, l62, l63 = sch.split(loop=l10, factors=[v58, v59, v60], preserve_unit_iters=True)
v64, v65, v66 = sch.sample_perfect_tile(loop=l11, n=3, max_innermost_factor=64, decision=[1, 1, 1])
l67, l68, l69 = sch.split(loop=l11, factors=[v64, v65, v66], preserve_unit_iters=True)
sch.reorder(l17, l27, l37, l47, l18, l28, l38, l48, l19, l29, l39, l49, l55, l61, l67, l56, l62, l68, l20, l30, l40, l50, l57, l63, l69, l21, l31, l41, l51)
l70 = sch.fuse(l17, l27, l37, l47, preserve_unit_iters=True)
sch.bind(loop=l70, thread_axis="blockIdx.x")
l71 = sch.fuse(l18, l28, l38, l48, preserve_unit_iters=True)
sch.bind(loop=l71, thread_axis="vthread.x")
l72 = sch.fuse(l19, l29, l39, l49, preserve_unit_iters=True)
sch.bind(loop=l72, thread_axis="threadIdx.x")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_low_inclusive", ann_val=32)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_high_inclusive", ann_val=1024)
b73 = sch.cache_write(block=b1, write_buffer_index=0, storage_scope="local")
sch.reverse_compute_at(block=b73, loop=l72, preserve_unit_loops=True, index=-1)
b74 = sch.cache_read(block=b1, read_buffer_index=0, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b74, loop=l67, preserve_unit_loops=True, index=-1)
l75, l76, l77, l78, l79, l80, l81, l82, l83, l84 = sch.get_loops(block=b74)
l85 = sch.fuse(l81, l82, l83, l84, preserve_unit_iters=True)
v86 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b74, ann_key="meta_schedule.cooperative_fetch", ann_val=v86)
b87 = sch.cache_read(block=b1, read_buffer_index=1, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b87, loop=l67, preserve_unit_loops=True, index=-1)
l88, l89, l90, l91, l92, l93, l94, l95, l96, l97 = sch.get_loops(block=b87)
l98 = sch.fuse(l94, l95, l96, l97, preserve_unit_iters=True)
v99 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=2)
sch.annotate(block_or_loop=b87, ann_key="meta_schedule.cooperative_fetch", ann_val=v99)
l100 = sch.fuse(l55, l61, l67, preserve_unit_iters=True)
sch.annotate(block_or_loop=l100, ann_key="software_pipeline_stage", ann_val=[0, 0, 2])
sch.annotate(block_or_loop=l100, ann_key="software_pipeline_order", ann_val=[0, 1, 2])
sch.annotate(block_or_loop=l100, ann_key="software_pipeline_async_stages", ann_val=[0])
sch.reverse_compute_inline(block=b3)
sch.reverse_compute_inline(block=b2)
sch.compute_inline(block=b0)
v101 = sch.sample_categorical(candidates=[0, 16, 64, 512, 1024], probs=[0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001], decision=4)
sch.annotate(block_or_loop=b4, ann_key="meta_schedule.unroll_explicit", ann_val=v101)
2024-05-01 15:05:32 [INFO] [task_scheduler.cc:170] Design space #2:
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(1280), T.int64(14), T.int64(14)), "float32"), p1: T.Buffer((T.int64(128), T.int64(1280), T.int64(1), T.int64(1)), "float32"), p2: T.Buffer((T.int64(1), T.int64(128), T.int64(1), T.int64(1)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(128), T.int64(14), T.int64(14)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        with T.block("root"):
            T.reads()
            T.writes()
            T.block_attr({"meta_schedule.unroll_explicit": 64})
            conv2d_nchw_local = T.alloc_buffer((T.int64(1), T.int64(128), T.int64(14), T.int64(14)), scope="local")
            pad_temp_shared = T.alloc_buffer((T.int64(1), T.int64(1280), T.int64(14), T.int64(14)), scope="shared")
            p1_shared = T.alloc_buffer((T.int64(128), T.int64(1280), T.int64(1), T.int64(1)), scope="shared")
            for nn_0_ff_0_yy_0_xx_0_fused in T.thread_binding(T.int64(4), thread="blockIdx.x"):
                for nn_1_ff_1_yy_1_xx_1_fused in T.thread_binding(T.int64(56), thread="vthread.x"):
                    for nn_2_ff_2_yy_2_xx_2_fused in T.thread_binding(T.int64(8), thread="threadIdx.x"):
                        for rc_0_ry_0_rx_0_fused in T.serial(T.int64(320), annotations={"software_pipeline_async_stages": [0], "software_pipeline_order": [0, 1, 2], "software_pipeline_stage": [0, 0, 3]}):
                            for ax0_ax1_ax2_ax3_fused in range(T.int64(392)):
                                with T.block("pad_temp_shared"):
                                    v0 = T.axis.spatial(T.int64(1), T.int64(0))
                                    v1 = T.axis.spatial(T.int64(1280), rc_0_ry_0_rx_0_fused * T.int64(4) + ax0_ax1_ax2_ax3_fused // T.int64(98))
                                    v2 = T.axis.spatial(T.int64(14), nn_0_ff_0_yy_0_xx_0_fused % T.int64(2) * T.int64(7) + ax0_ax1_ax2_ax3_fused % T.int64(98) // T.int64(14))
                                    v3 = T.axis.spatial(T.int64(14), ax0_ax1_ax2_ax3_fused % T.int64(14))
                                    T.reads(p0[v0, v1, v2, v3])
                                    T.writes(pad_temp_shared[v0, v1, v2, v3])
                                    T.block_attr({"meta_schedule.cooperative_fetch": 4})
                                    pad_temp_shared[v0, v1, v2, v3] = p0[v0, v1, v2, v3]
                            for ax0_ax1_ax2_ax3_fused in range(T.int64(256)):
                                with T.block("p1_shared"):
                                    v0 = T.axis.spatial(T.int64(128), nn_0_ff_0_yy_0_xx_0_fused // T.int64(2) * T.int64(64) + ax0_ax1_ax2_ax3_fused // T.int64(4))
                                    v1 = T.axis.spatial(T.int64(1280), rc_0_ry_0_rx_0_fused * T.int64(4) + ax0_ax1_ax2_ax3_fused % T.int64(4))
                                    v2 = T.axis.spatial(T.int64(1), T.int64(0))
                                    v3 = T.axis.spatial(T.int64(1), T.int64(0))
                                    T.reads(p1[v0, v1, v2, v3])
                                    T.writes(p1_shared[v0, v1, v2, v3])
                                    T.block_attr({"meta_schedule.cooperative_fetch": 3})
                                    p1_shared[v0, v1, v2, v3] = p1[v0, v1, v2, v3]
                            for rc_1, ry_1, rx_1, nn_3, ff_3, yy_3, xx_3, rc_2, ry_2, rx_2, nn_4, ff_4, yy_4, xx_4 in T.grid(T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(7), T.int64(2), T.int64(4), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1)):
                                with T.block("conv2d_nchw"):
                                    v_nn = T.axis.spatial(T.int64(1), nn_3 + nn_4)
                                    v_ff = T.axis.spatial(T.int64(128), nn_0_ff_0_yy_0_xx_0_fused // T.int64(2) * T.int64(64) + nn_1_ff_1_yy_1_xx_1_fused // T.int64(7) * T.int64(8) + nn_2_ff_2_yy_2_xx_2_fused + ff_3 + ff_4)
                                    v_yy = T.axis.spatial(T.int64(14), nn_0_ff_0_yy_0_xx_0_fused % T.int64(2) * T.int64(7) + yy_3 + yy_4)
                                    v_xx = T.axis.spatial(T.int64(14), nn_1_ff_1_yy_1_xx_1_fused % T.int64(7) * T.int64(2) + xx_3 + xx_4)
                                    v_rc = T.axis.reduce(T.int64(1280), rc_0_ry_0_rx_0_fused * T.int64(4) + rc_1 * T.int64(4) + rc_2)
                                    v_ry = T.axis.reduce(T.int64(1), ry_1 + ry_2)
                                    v_rx = T.axis.reduce(T.int64(1), rx_1 + rx_2)
                                    T.reads(pad_temp_shared[v_nn, v_rc, v_yy + v_ry, v_xx + v_rx], p1_shared[v_ff, v_rc, v_ry, v_rx])
                                    T.writes(conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx])
                                    T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 32, "meta_schedule.tiling_structure": "SSSRRSRS"})
                                    with T.init():
                                        conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx] = T.float32(0)
                                    conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx] = conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx] + pad_temp_shared[v_nn, v_rc, v_yy + v_ry, v_xx + v_rx] * p1_shared[v_ff, v_rc, v_ry, v_rx]
                        for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(1), T.int64(7), T.int64(2)):
                            with T.block("conv2d_nchw_local"):
                                v0 = T.axis.spatial(T.int64(1), ax0)
                                v1 = T.axis.spatial(T.int64(128), nn_0_ff_0_yy_0_xx_0_fused // T.int64(2) * T.int64(64) + nn_1_ff_1_yy_1_xx_1_fused // T.int64(7) * T.int64(8) + nn_2_ff_2_yy_2_xx_2_fused + ax1)
                                v2 = T.axis.spatial(T.int64(14), nn_0_ff_0_yy_0_xx_0_fused % T.int64(2) * T.int64(7) + ax2)
                                v3 = T.axis.spatial(T.int64(14), nn_1_ff_1_yy_1_xx_1_fused % T.int64(7) * T.int64(2) + ax3)
                                T.reads(conv2d_nchw_local[v0, v1, v2, v3], p2[v0, v1, T.int64(0), T.int64(0)])
                                T.writes(T_relu[v0, v1, v2, v3])
                                T_relu[v0, v1, v2, v3] = T.max(conv2d_nchw_local[v0, v1, v2, v3] + p2[v0, v1, T.int64(0), T.int64(0)], T.float32(0))
b0 = sch.get_block(name="pad_temp", func_name="main")
b1 = sch.get_block(name="conv2d_nchw", func_name="main")
b2 = sch.get_block(name="T_add", func_name="main")
b3 = sch.get_block(name="T_relu", func_name="main")
b4 = sch.get_block(name="root", func_name="main")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSSRRSRS")
l5, l6, l7, l8, l9, l10, l11 = sch.get_loops(block=b1)
v12, v13, v14, v15, v16 = sch.sample_perfect_tile(loop=l5, n=5, max_innermost_factor=64, decision=[1, 1, 1, 1, 1])
l17, l18, l19, l20, l21 = sch.split(loop=l5, factors=[v12, v13, v14, v15, v16], preserve_unit_iters=True)
v22, v23, v24, v25, v26 = sch.sample_perfect_tile(loop=l6, n=5, max_innermost_factor=64, decision=[2, 8, 8, 1, 1])
l27, l28, l29, l30, l31 = sch.split(loop=l6, factors=[v22, v23, v24, v25, v26], preserve_unit_iters=True)
v32, v33, v34, v35, v36 = sch.sample_perfect_tile(loop=l7, n=5, max_innermost_factor=64, decision=[2, 1, 1, 7, 1])
l37, l38, l39, l40, l41 = sch.split(loop=l7, factors=[v32, v33, v34, v35, v36], preserve_unit_iters=True)
v42, v43, v44, v45, v46 = sch.sample_perfect_tile(loop=l8, n=5, max_innermost_factor=64, decision=[1, 7, 1, 2, 1])
l47, l48, l49, l50, l51 = sch.split(loop=l8, factors=[v42, v43, v44, v45, v46], preserve_unit_iters=True)
v52, v53, v54 = sch.sample_perfect_tile(loop=l9, n=3, max_innermost_factor=64, decision=[320, 1, 4])
l55, l56, l57 = sch.split(loop=l9, factors=[v52, v53, v54], preserve_unit_iters=True)
v58, v59, v60 = sch.sample_perfect_tile(loop=l10, n=3, max_innermost_factor=64, decision=[1, 1, 1])
l61, l62, l63 = sch.split(loop=l10, factors=[v58, v59, v60], preserve_unit_iters=True)
v64, v65, v66 = sch.sample_perfect_tile(loop=l11, n=3, max_innermost_factor=64, decision=[1, 1, 1])
l67, l68, l69 = sch.split(loop=l11, factors=[v64, v65, v66], preserve_unit_iters=True)
sch.reorder(l17, l27, l37, l47, l18, l28, l38, l48, l19, l29, l39, l49, l55, l61, l67, l56, l62, l68, l20, l30, l40, l50, l57, l63, l69, l21, l31, l41, l51)
l70 = sch.fuse(l17, l27, l37, l47, preserve_unit_iters=True)
sch.bind(loop=l70, thread_axis="blockIdx.x")
l71 = sch.fuse(l18, l28, l38, l48, preserve_unit_iters=True)
sch.bind(loop=l71, thread_axis="vthread.x")
l72 = sch.fuse(l19, l29, l39, l49, preserve_unit_iters=True)
sch.bind(loop=l72, thread_axis="threadIdx.x")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_low_inclusive", ann_val=32)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_high_inclusive", ann_val=1024)
b73 = sch.cache_write(block=b1, write_buffer_index=0, storage_scope="local")
sch.reverse_compute_at(block=b73, loop=l72, preserve_unit_loops=True, index=-1)
b74 = sch.cache_read(block=b1, read_buffer_index=0, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b74, loop=l67, preserve_unit_loops=True, index=-1)
l75, l76, l77, l78, l79, l80, l81, l82, l83, l84 = sch.get_loops(block=b74)
l85 = sch.fuse(l81, l82, l83, l84, preserve_unit_iters=True)
v86 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b74, ann_key="meta_schedule.cooperative_fetch", ann_val=v86)
b87 = sch.cache_read(block=b1, read_buffer_index=1, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b87, loop=l67, preserve_unit_loops=True, index=-1)
l88, l89, l90, l91, l92, l93, l94, l95, l96, l97 = sch.get_loops(block=b87)
l98 = sch.fuse(l94, l95, l96, l97, preserve_unit_iters=True)
v99 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=2)
sch.annotate(block_or_loop=b87, ann_key="meta_schedule.cooperative_fetch", ann_val=v99)
l100 = sch.fuse(l55, l61, l67, preserve_unit_iters=True)
sch.annotate(block_or_loop=l100, ann_key="software_pipeline_stage", ann_val=[0, 0, 3])
sch.annotate(block_or_loop=l100, ann_key="software_pipeline_order", ann_val=[0, 1, 2])
sch.annotate(block_or_loop=l100, ann_key="software_pipeline_async_stages", ann_val=[0])
sch.reverse_compute_inline(block=b3)
sch.reverse_compute_inline(block=b2)
sch.compute_inline(block=b0)
v101 = sch.sample_categorical(candidates=[0, 16, 64, 512, 1024], probs=[0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001], decision=2)
sch.annotate(block_or_loop=b4, ann_key="meta_schedule.unroll_explicit", ann_val=v101)
2024-05-01 16:33:38 [INFO] [evolutionary_search.cc:713] Generating candidates......
2024-05-01 16:33:38 [INFO] [evolutionary_search.cc:715] Picked top 64 candidate(s) from database
2024-05-01 16:33:39 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x118f1bc8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x150cd6f8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0xe1f84c8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x14851fd8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x39f6688)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x14cbd5f8)]: 422 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x14f409e8)]: 0 failure(s)
2024-05-01 16:33:40 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x118f1bc8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x150cd6f8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0xe1f84c8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x14851fd8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x39f6688)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x14cbd5f8)]: 853 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x14f409e8)]: 0 failure(s)
2024-05-01 16:33:42 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x118f1bc8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x150cd6f8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0xe1f84c8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x14851fd8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x39f6688)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x14cbd5f8)]: 1284 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x14f409e8)]: 0 failure(s)
2024-05-01 16:33:42 [INFO] [evolutionary_search.cc:723] Sampled 60 candidate(s)
2024-05-01 16:33:44 [INFO] [evolutionary_search.cc:621] Evolve iter #0 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x118f1bc8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x150cd6f8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0xe1f84c8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x14851fd8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x39f6688)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x14cbd5f8)]: 106 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x14f409e8)]: 0 failure(s)
2024-05-01 16:33:46 [INFO] [evolutionary_search.cc:621] Evolve iter #1 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x118f1bc8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x150cd6f8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0xe1f84c8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x14851fd8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x39f6688)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x14cbd5f8)]: 99 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x14f409e8)]: 0 failure(s)
2024-05-01 16:33:49 [INFO] [evolutionary_search.cc:621] Evolve iter #2 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x118f1bc8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x150cd6f8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0xe1f84c8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x14851fd8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x39f6688)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x14cbd5f8)]: 78 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x14f409e8)]: 0 failure(s)
2024-05-01 16:33:51 [INFO] [evolutionary_search.cc:621] Evolve iter #3 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x118f1bc8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x150cd6f8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0xe1f84c8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x14851fd8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x39f6688)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x14cbd5f8)]: 82 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x14f409e8)]: 0 failure(s)
2024-05-01 16:33:51 [INFO] [evolutionary_search.cc:649] Scores of the best 64 candidates:
[1 : 16]:	0.9997  0.9992  0.9987  0.9982  0.9971  0.9968  0.9966  0.9964  0.9942  0.9942  0.9927  0.9925  0.9925  0.9924  0.9922  0.9915
[17 : 32]:	0.9910  0.9907  0.9902  0.9899  0.9890  0.9883  0.9879  0.9869  0.9866  0.9850  0.9840  0.9839  0.9838  0.9823  0.9819  0.9802
[33 : 48]:	0.9791  0.9781  0.9766  0.9761  0.9749  0.9741  0.9737  0.9722  0.9721  0.9721  0.9717  0.9706  0.9704  0.9697  0.9692  0.9689
[49 : 64]:	0.9681  0.9670  0.9664  0.9661  0.9660  0.9658  0.9652  0.9651  0.9648  0.9640  0.9636  0.9633  0.9627  0.9618  0.9613  0.9606
2024-05-01 16:33:51 [INFO] [evolutionary_search.cc:727] Got 64 candidate(s) with evolutionary search
2024-05-01 16:33:51 [INFO] [evolutionary_search.cc:730] Sending 64 candidates(s) for measurement
2024-05-01 18:34:43 [INFO] [task_scheduler.cc:131] [Task #96: fused_nn_conv2d_add_nn_relu_47] Trial #1: GFLOPs: 2023.8157. Time: 31.7595 us. Best GFLOPs: 2023.8157
2024-05-01 18:34:43 [INFO] [task_scheduler.cc:131] [Task #96: fused_nn_conv2d_add_nn_relu_47] Trial #2: GFLOPs: 1341.3379. Time: 47.9189 us. Best GFLOPs: 2023.8157
2024-05-01 18:34:43 [INFO] [task_scheduler.cc:131] [Task #96: fused_nn_conv2d_add_nn_relu_47] Trial #3: GFLOPs: 159.5629. Time: 402.8221 us. Best GFLOPs: 2023.8157
2024-05-01 18:34:43 [INFO] [task_scheduler.cc:131] [Task #96: fused_nn_conv2d_add_nn_relu_47] Trial #4: GFLOPs: 355.5350. Time: 180.7852 us. Best GFLOPs: 2023.8157
2024-05-01 18:34:43 [INFO] [task_scheduler.cc:131] [Task #96: fused_nn_conv2d_add_nn_relu_47] Trial #5: GFLOPs: 135.6604. Time: 473.7967 us. Best GFLOPs: 2023.8157
2024-05-01 18:34:43 [INFO] [task_scheduler.cc:131] [Task #96: fused_nn_conv2d_add_nn_relu_47] Trial #6: GFLOPs: 76.7308. Time: 837.6746 us. Best GFLOPs: 2023.8157
2024-05-01 18:34:43 [INFO] [task_scheduler.cc:131] [Task #96: fused_nn_conv2d_add_nn_relu_47] Trial #7: GFLOPs: 324.7059. Time: 197.9498 us. Best GFLOPs: 2023.8157
2024-05-01 18:34:43 [INFO] [task_scheduler.cc:131] [Task #96: fused_nn_conv2d_add_nn_relu_47] Trial #8: GFLOPs: 85.6470. Time: 750.4697 us. Best GFLOPs: 2023.8157
2024-05-01 18:34:43 [INFO] [task_scheduler.cc:131] [Task #96: fused_nn_conv2d_add_nn_relu_47] Trial #9: GFLOPs: 141.3514. Time: 454.7212 us. Best GFLOPs: 2023.8157
2024-05-01 18:34:43 [INFO] [task_scheduler.cc:131] [Task #96: fused_nn_conv2d_add_nn_relu_47] Trial #10: GFLOPs: 803.5820. Time: 79.9862 us. Best GFLOPs: 2023.8157
2024-05-01 18:34:43 [INFO] [task_scheduler.cc:131] [Task #96: fused_nn_conv2d_add_nn_relu_47] Trial #11: GFLOPs: 64.3358. Time: 999.0614 us. Best GFLOPs: 2023.8157
2024-05-01 18:34:43 [INFO] [task_scheduler.cc:131] [Task #96: fused_nn_conv2d_add_nn_relu_47] Trial #12: GFLOPs: 10.4688. Time: 6139.7234 us. Best GFLOPs: 2023.8157
2024-05-01 18:34:43 [INFO] [task_scheduler.cc:131] [Task #96: fused_nn_conv2d_add_nn_relu_47] Trial #13: GFLOPs: 307.9186. Time: 208.7417 us. Best GFLOPs: 2023.8157
2024-05-01 18:34:43 [INFO] [task_scheduler.cc:131] [Task #96: fused_nn_conv2d_add_nn_relu_47] Trial #14: GFLOPs: 300.7965. Time: 213.6842 us. Best GFLOPs: 2023.8157
2024-05-01 18:34:43 [INFO] [task_scheduler.cc:131] [Task #96: fused_nn_conv2d_add_nn_relu_47] Trial #15: GFLOPs: 161.2988. Time: 398.4870 us. Best GFLOPs: 2023.8157
2024-05-01 18:34:43 [INFO] [task_scheduler.cc:131] [Task #96: fused_nn_conv2d_add_nn_relu_47] Trial #16: GFLOPs: 1050.6015. Time: 61.1797 us. Best GFLOPs: 2023.8157
2024-05-01 18:34:43 [INFO] [task_scheduler.cc:131] [Task #96: fused_nn_conv2d_add_nn_relu_47] Trial #17: GFLOPs: 101.5440. Time: 632.9811 us. Best GFLOPs: 2023.8157
2024-05-01 18:34:43 [INFO] [task_scheduler.cc:131] [Task #96: fused_nn_conv2d_add_nn_relu_47] Trial #18: GFLOPs: 658.0868. Time: 97.6702 us. Best GFLOPs: 2023.8157
2024-05-01 18:34:43 [INFO] [task_scheduler.cc:131] [Task #96: fused_nn_conv2d_add_nn_relu_47] Trial #19: GFLOPs: 0.7157. Time: 89801.7270 us. Best GFLOPs: 2023.8157
2024-05-01 18:34:43 [INFO] [task_scheduler.cc:131] [Task #96: fused_nn_conv2d_add_nn_relu_47] Trial #20: GFLOPs: 270.0979. Time: 237.9709 us. Best GFLOPs: 2023.8157
2024-05-01 18:34:43 [INFO] [task_scheduler.cc:131] [Task #96: fused_nn_conv2d_add_nn_relu_47] Trial #21: GFLOPs: 221.3512. Time: 290.3777 us. Best GFLOPs: 2023.8157
2024-05-01 18:34:43 [INFO] [task_scheduler.cc:131] [Task #96: fused_nn_conv2d_add_nn_relu_47] Trial #22: GFLOPs: 205.7165. Time: 312.4468 us. Best GFLOPs: 2023.8157
2024-05-01 18:34:43 [INFO] [task_scheduler.cc:131] [Task #96: fused_nn_conv2d_add_nn_relu_47] Trial #23: GFLOPs: 139.6201. Time: 460.3595 us. Best GFLOPs: 2023.8157
2024-05-01 18:34:43 [INFO] [task_scheduler.cc:131] [Task #96: fused_nn_conv2d_add_nn_relu_47] Trial #24: GFLOPs: 813.1165. Time: 79.0483 us. Best GFLOPs: 2023.8157
2024-05-01 18:34:43 [INFO] [task_scheduler.cc:131] [Task #96: fused_nn_conv2d_add_nn_relu_47] Trial #25: GFLOPs: 35.3003. Time: 1820.8209 us. Best GFLOPs: 2023.8157
2024-05-01 18:34:43 [INFO] [task_scheduler.cc:131] [Task #96: fused_nn_conv2d_add_nn_relu_47] Trial #26: GFLOPs: 1974.3892. Time: 32.5546 us. Best GFLOPs: 2023.8157
2024-05-01 18:34:43 [INFO] [task_scheduler.cc:131] [Task #96: fused_nn_conv2d_add_nn_relu_47] Trial #27: GFLOPs: 74.4165. Time: 863.7263 us. Best GFLOPs: 2023.8157
2024-05-01 18:34:43 [INFO] [task_scheduler.cc:131] [Task #96: fused_nn_conv2d_add_nn_relu_47] Trial #28: GFLOPs: 31.0161. Time: 2072.3252 us. Best GFLOPs: 2023.8157
2024-05-01 18:34:43 [INFO] [task_scheduler.cc:131] [Task #96: fused_nn_conv2d_add_nn_relu_47] Trial #29: GFLOPs: 340.5299. Time: 188.7513 us. Best GFLOPs: 2023.8157
2024-05-01 18:34:43 [INFO] [task_scheduler.cc:131] [Task #96: fused_nn_conv2d_add_nn_relu_47] Trial #30: GFLOPs: 277.5216. Time: 231.6052 us. Best GFLOPs: 2023.8157
2024-05-01 18:34:43 [INFO] [task_scheduler.cc:131] [Task #96: fused_nn_conv2d_add_nn_relu_47] Trial #31: GFLOPs: 1273.0979. Time: 50.4874 us. Best GFLOPs: 2023.8157
2024-05-01 18:34:43 [INFO] [task_scheduler.cc:131] [Task #96: fused_nn_conv2d_add_nn_relu_47] Trial #32: GFLOPs: 181.4156. Time: 354.2995 us. Best GFLOPs: 2023.8157
2024-05-01 18:34:43 [INFO] [task_scheduler.cc:131] [Task #96: fused_nn_conv2d_add_nn_relu_47] Trial #33: GFLOPs: 95.3615. Time: 674.0188 us. Best GFLOPs: 2023.8157
2024-05-01 18:34:43 [INFO] [task_scheduler.cc:131] [Task #96: fused_nn_conv2d_add_nn_relu_47] Trial #34: GFLOPs: 1424.8867. Time: 45.1092 us. Best GFLOPs: 2023.8157
2024-05-01 18:34:43 [INFO] [task_scheduler.cc:131] [Task #96: fused_nn_conv2d_add_nn_relu_47] Trial #35: GFLOPs: 110.0064. Time: 584.2884 us. Best GFLOPs: 2023.8157
2024-05-01 18:34:43 [INFO] [task_scheduler.cc:131] [Task #96: fused_nn_conv2d_add_nn_relu_47] Trial #36: GFLOPs: 429.3872. Time: 149.6911 us. Best GFLOPs: 2023.8157
2024-05-01 18:34:43 [INFO] [task_scheduler.cc:131] [Task #96: fused_nn_conv2d_add_nn_relu_47] Trial #37: GFLOPs: 16.0659. Time: 4000.7286 us. Best GFLOPs: 2023.8157
2024-05-01 18:34:43 [INFO] [task_scheduler.cc:131] [Task #96: fused_nn_conv2d_add_nn_relu_47] Trial #38: GFLOPs: 8.8984. Time: 7223.2960 us. Best GFLOPs: 2023.8157
2024-05-01 18:34:43 [INFO] [task_scheduler.cc:131] [Task #96: fused_nn_conv2d_add_nn_relu_47] Trial #39: GFLOPs: 355.1779. Time: 180.9670 us. Best GFLOPs: 2023.8157
2024-05-01 18:34:43 [INFO] [task_scheduler.cc:131] [Task #96: fused_nn_conv2d_add_nn_relu_47] Trial #40: GFLOPs: 1378.5005. Time: 46.6271 us. Best GFLOPs: 2023.8157
2024-05-01 18:34:43 [INFO] [task_scheduler.cc:131] [Task #96: fused_nn_conv2d_add_nn_relu_47] Trial #41: GFLOPs: 99.3403. Time: 647.0227 us. Best GFLOPs: 2023.8157
2024-05-01 18:34:43 [INFO] [task_scheduler.cc:131] [Task #96: fused_nn_conv2d_add_nn_relu_47] Trial #42: GFLOPs: 147.8882. Time: 434.6220 us. Best GFLOPs: 2023.8157
2024-05-01 18:34:43 [INFO] [task_scheduler.cc:131] [Task #96: fused_nn_conv2d_add_nn_relu_47] Trial #43: GFLOPs: 123.9580. Time: 518.5260 us. Best GFLOPs: 2023.8157
2024-05-01 18:34:43 [INFO] [task_scheduler.cc:131] [Task #96: fused_nn_conv2d_add_nn_relu_47] Trial #44: GFLOPs: 2198.8193. Time: 29.2318 us. Best GFLOPs: 2198.8193
2024-05-01 18:34:43 [INFO] [task_scheduler.cc:131] [Task #96: fused_nn_conv2d_add_nn_relu_47] Trial #45: GFLOPs: 286.2417. Time: 224.5496 us. Best GFLOPs: 2198.8193
2024-05-01 18:34:43 [INFO] [task_scheduler.cc:131] [Task #96: fused_nn_conv2d_add_nn_relu_47] Trial #46: GFLOPs: 14.0828. Time: 4564.1077 us. Best GFLOPs: 2198.8193
2024-05-01 18:34:43 [INFO] [task_scheduler.cc:131] [Task #96: fused_nn_conv2d_add_nn_relu_47] Trial #47: GFLOPs: 149.8114. Time: 429.0424 us. Best GFLOPs: 2198.8193
2024-05-01 18:34:43 [INFO] [task_scheduler.cc:131] [Task #96: fused_nn_conv2d_add_nn_relu_47] Trial #48: GFLOPs: 614.3121. Time: 104.6300 us. Best GFLOPs: 2198.8193
2024-05-01 18:34:43 [INFO] [task_scheduler.cc:131] [Task #96: fused_nn_conv2d_add_nn_relu_47] Trial #49: GFLOPs: 14.5037. Time: 4431.6492 us. Best GFLOPs: 2198.8193
2024-05-01 18:34:43 [INFO] [task_scheduler.cc:131] [Task #96: fused_nn_conv2d_add_nn_relu_47] Trial #50: GFLOPs: 18.0267. Time: 3565.5680 us. Best GFLOPs: 2198.8193
2024-05-01 18:34:43 [INFO] [task_scheduler.cc:131] [Task #96: fused_nn_conv2d_add_nn_relu_47] Trial #51: GFLOPs: 1501.7023. Time: 42.8017 us. Best GFLOPs: 2198.8193
2024-05-01 18:34:43 [INFO] [task_scheduler.cc:131] [Task #96: fused_nn_conv2d_add_nn_relu_47] Trial #52: GFLOPs: 67.0002. Time: 959.3320 us. Best GFLOPs: 2198.8193
2024-05-01 18:34:43 [INFO] [task_scheduler.cc:131] [Task #96: fused_nn_conv2d_add_nn_relu_47] Trial #53: GFLOPs: 451.4025. Time: 142.3906 us. Best GFLOPs: 2198.8193
2024-05-01 18:34:43 [INFO] [task_scheduler.cc:131] [Task #96: fused_nn_conv2d_add_nn_relu_47] Trial #54: GFLOPs: 162.1606. Time: 396.3691 us. Best GFLOPs: 2198.8193
2024-05-01 18:34:43 [INFO] [task_scheduler.cc:131] [Task #96: fused_nn_conv2d_add_nn_relu_47] Trial #55: GFLOPs: 187.7668. Time: 342.3154 us. Best GFLOPs: 2198.8193
2024-05-01 18:34:43 [INFO] [task_scheduler.cc:131] [Task #96: fused_nn_conv2d_add_nn_relu_47] Trial #56: GFLOPs: 257.9133. Time: 249.2134 us. Best GFLOPs: 2198.8193
2024-05-01 18:34:43 [INFO] [task_scheduler.cc:131] [Task #96: fused_nn_conv2d_add_nn_relu_47] Trial #57: GFLOPs: 124.7607. Time: 515.1898 us. Best GFLOPs: 2198.8193
2024-05-01 18:34:43 [INFO] [task_scheduler.cc:131] [Task #96: fused_nn_conv2d_add_nn_relu_47] Trial #58: GFLOPs: 13.5702. Time: 4736.5119 us. Best GFLOPs: 2198.8193
2024-05-01 18:34:43 [INFO] [task_scheduler.cc:131] [Task #96: fused_nn_conv2d_add_nn_relu_47] Trial #59: GFLOPs: 180.4428. Time: 356.2096 us. Best GFLOPs: 2198.8193
2024-05-01 18:34:43 [INFO] [task_scheduler.cc:131] [Task #96: fused_nn_conv2d_add_nn_relu_47] Trial #60: GFLOPs: 276.6140. Time: 232.3651 us. Best GFLOPs: 2198.8193
2024-05-01 18:34:43 [INFO] [task_scheduler.cc:131] [Task #96: fused_nn_conv2d_add_nn_relu_47] Trial #61: GFLOPs: 79.3429. Time: 810.0972 us. Best GFLOPs: 2198.8193
2024-05-01 18:34:43 [INFO] [task_scheduler.cc:131] [Task #96: fused_nn_conv2d_add_nn_relu_47] Trial #62: GFLOPs: 971.0498. Time: 66.1917 us. Best GFLOPs: 2198.8193
2024-05-01 18:34:43 [INFO] [task_scheduler.cc:131] [Task #96: fused_nn_conv2d_add_nn_relu_47] Trial #63: GFLOPs: 328.3676. Time: 195.7424 us. Best GFLOPs: 2198.8193
2024-05-01 18:34:43 [INFO] [task_scheduler.cc:131] [Task #96: fused_nn_conv2d_add_nn_relu_47] Trial #64: GFLOPs: 41.9808. Time: 1531.0662 us. Best GFLOPs: 2198.8193
