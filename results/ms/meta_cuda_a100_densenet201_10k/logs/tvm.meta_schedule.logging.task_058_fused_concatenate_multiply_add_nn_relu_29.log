2024-04-29 16:31:29 [INFO] [task_scheduler.cc:160] Initializing Task #58: "fused_concatenate_multiply_add_nn_relu_29"
2024-04-29 16:31:29 [INFO] [task_scheduler.cc:35] 
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(896), T.int64(7), T.int64(7)), "float32"), p1: T.Buffer((T.int64(1), T.int64(32), T.int64(7), T.int64(7)), "float32"), p2: T.Buffer((T.int64(1), T.int64(32), T.int64(7), T.int64(7)), "float32"), p3: T.Buffer((T.int64(1), T.int64(960), T.int64(1), T.int64(1)), "float32"), p4: T.Buffer((T.int64(1), T.int64(960), T.int64(1), T.int64(1)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(960), T.int64(7), T.int64(7)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        T_concat = T.alloc_buffer((T.int64(1), T.int64(960), T.int64(7), T.int64(7)))
        T_multiply = T.alloc_buffer((T.int64(1), T.int64(960), T.int64(7), T.int64(7)))
        T_add = T.alloc_buffer((T.int64(1), T.int64(960), T.int64(7), T.int64(7)))
        for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(960), T.int64(7), T.int64(7)):
            with T.block("T_concat"):
                v_ax0, v_ax1, v_ax2, v_ax3 = T.axis.remap("SSSS", [ax0, ax1, ax2, ax3])
                T.reads(p2[v_ax0, v_ax1 - T.int64(928), v_ax2, v_ax3], p1[v_ax0, v_ax1 - T.int64(896), v_ax2, v_ax3], p0[v_ax0, v_ax1, v_ax2, v_ax3])
                T.writes(T_concat[v_ax0, v_ax1, v_ax2, v_ax3])
                T_concat[v_ax0, v_ax1, v_ax2, v_ax3] = T.if_then_else(T.int64(928) <= v_ax1, p2[v_ax0, v_ax1 - T.int64(928), v_ax2, v_ax3], T.if_then_else(T.int64(896) <= v_ax1, p1[v_ax0, v_ax1 - T.int64(896), v_ax2, v_ax3], p0[v_ax0, v_ax1, v_ax2, v_ax3]))
        for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(960), T.int64(7), T.int64(7)):
            with T.block("T_multiply"):
                v_ax0, v_ax1, v_ax2, v_ax3 = T.axis.remap("SSSS", [ax0, ax1, ax2, ax3])
                T.reads(T_concat[v_ax0, v_ax1, v_ax2, v_ax3], p3[v_ax0, v_ax1, T.int64(0), T.int64(0)])
                T.writes(T_multiply[v_ax0, v_ax1, v_ax2, v_ax3])
                T_multiply[v_ax0, v_ax1, v_ax2, v_ax3] = T_concat[v_ax0, v_ax1, v_ax2, v_ax3] * p3[v_ax0, v_ax1, T.int64(0), T.int64(0)]
        for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(960), T.int64(7), T.int64(7)):
            with T.block("T_add"):
                v_ax0, v_ax1, v_ax2, v_ax3 = T.axis.remap("SSSS", [ax0, ax1, ax2, ax3])
                T.reads(T_multiply[v_ax0, v_ax1, v_ax2, v_ax3], p4[v_ax0, v_ax1, T.int64(0), T.int64(0)])
                T.writes(T_add[v_ax0, v_ax1, v_ax2, v_ax3])
                T_add[v_ax0, v_ax1, v_ax2, v_ax3] = T_multiply[v_ax0, v_ax1, v_ax2, v_ax3] + p4[v_ax0, v_ax1, T.int64(0), T.int64(0)]
        for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(960), T.int64(7), T.int64(7)):
            with T.block("T_relu"):
                v_ax0, v_ax1, v_ax2, v_ax3 = T.axis.remap("SSSS", [ax0, ax1, ax2, ax3])
                T.reads(T_add[v_ax0, v_ax1, v_ax2, v_ax3])
                T.writes(T_relu[v_ax0, v_ax1, v_ax2, v_ax3])
                T_relu[v_ax0, v_ax1, v_ax2, v_ax3] = T.max(T_add[v_ax0, v_ax1, v_ax2, v_ax3], T.float32(0))
2024-04-29 16:31:29 [INFO] [task_scheduler.cc:164] Total 1 design space(s) generated
2024-04-29 16:31:29 [INFO] [task_scheduler.cc:170] Design space #0:
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(896), T.int64(7), T.int64(7)), "float32"), p1: T.Buffer((T.int64(1), T.int64(32), T.int64(7), T.int64(7)), "float32"), p2: T.Buffer((T.int64(1), T.int64(32), T.int64(7), T.int64(7)), "float32"), p3: T.Buffer((T.int64(1), T.int64(960), T.int64(1), T.int64(1)), "float32"), p4: T.Buffer((T.int64(1), T.int64(960), T.int64(1), T.int64(1)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(960), T.int64(7), T.int64(7)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        for ax0_ax1_ax2_ax3_fused_0 in T.thread_binding(T.int64(1470), thread="blockIdx.x"):
            for ax0_ax1_ax2_ax3_fused_1 in T.thread_binding(T.int64(32), thread="threadIdx.x"):
                with T.block("T_concat"):
                    v_ax0 = T.axis.spatial(T.int64(1), T.int64(0))
                    v_ax1 = T.axis.spatial(T.int64(960), (ax0_ax1_ax2_ax3_fused_0 * T.int64(32) + ax0_ax1_ax2_ax3_fused_1) // T.int64(49))
                    v_ax2 = T.axis.spatial(T.int64(7), (ax0_ax1_ax2_ax3_fused_0 * T.int64(32) + ax0_ax1_ax2_ax3_fused_1) % T.int64(49) // T.int64(7))
                    v_ax3 = T.axis.spatial(T.int64(7), (ax0_ax1_ax2_ax3_fused_0 * T.int64(32) + ax0_ax1_ax2_ax3_fused_1) % T.int64(7))
                    T.reads(p2[v_ax0, v_ax1 - T.int64(928), v_ax2, v_ax3], p1[v_ax0, v_ax1 - T.int64(896), v_ax2, v_ax3], p0[v_ax0, v_ax1, v_ax2, v_ax3], p3[v_ax0, v_ax1, T.int64(0), T.int64(0)], p4[v_ax0, v_ax1, T.int64(0), T.int64(0)])
                    T.writes(T_relu[v_ax0, v_ax1, v_ax2, v_ax3])
                    T_relu[v_ax0, v_ax1, v_ax2, v_ax3] = T.max(T.if_then_else(T.int64(928) <= v_ax1, p2[v_ax0, v_ax1 - T.int64(928), v_ax2, v_ax3], T.if_then_else(T.int64(896) <= v_ax1, p1[v_ax0, v_ax1 - T.int64(896), v_ax2, v_ax3], p0[v_ax0, v_ax1, v_ax2, v_ax3])) * p3[v_ax0, v_ax1, T.int64(0), T.int64(0)] + p4[v_ax0, v_ax1, T.int64(0), T.int64(0)], T.float32(0))
b0 = sch.get_block(name="T_concat", func_name="main")
b1 = sch.get_block(name="T_multiply", func_name="main")
b2 = sch.get_block(name="T_add", func_name="main")
b3 = sch.get_block(name="T_relu", func_name="main")
sch.reverse_compute_inline(block=b3)
sch.reverse_compute_inline(block=b2)
sch.reverse_compute_inline(block=b1)
l4, l5, l6, l7 = sch.get_loops(block=b0)
l8 = sch.fuse(l4, l5, l6, l7, preserve_unit_iters=True)
v9 = sch.sample_categorical(candidates=[32, 64, 128, 256, 512, 1024], probs=[0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666], decision=0)
l10, l11 = sch.split(loop=l8, factors=[None, v9], preserve_unit_iters=True)
sch.bind(loop=l10, thread_axis="blockIdx.x")
sch.bind(loop=l11, thread_axis="threadIdx.x")
2024-04-29 17:19:23 [INFO] [evolutionary_search.cc:713] Generating candidates......
2024-04-29 17:19:23 [INFO] [evolutionary_search.cc:715] Picked top 0 candidate(s) from database
2024-04-29 17:19:25 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x1130dd88)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x129e5b28)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x11a383a8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0xb508778)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x1132d0b8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x11355cc8)]: 0 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x13516468)]: 0 failure(s)
2024-04-29 17:19:25 [INFO] [evolutionary_search.cc:723] Sampled 512 candidate(s)
2024-04-29 17:19:25 [INFO] [evolutionary_search.cc:621] Evolve iter #0 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x1130dd88)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x129e5b28)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x11a383a8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0xb508778)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x1132d0b8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x11355cc8)]: 0 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x13516468)]: 0 failure(s)
2024-04-29 17:19:25 [INFO] [evolutionary_search.cc:621] Evolve iter #1 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x1130dd88)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x129e5b28)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x11a383a8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0xb508778)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x1132d0b8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x11355cc8)]: 0 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x13516468)]: 0 failure(s)
2024-04-29 17:19:26 [INFO] [evolutionary_search.cc:621] Evolve iter #2 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x1130dd88)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x129e5b28)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x11a383a8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0xb508778)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x1132d0b8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x11355cc8)]: 0 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x13516468)]: 0 failure(s)
2024-04-29 17:19:26 [INFO] [evolutionary_search.cc:621] Evolve iter #3 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x1130dd88)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x129e5b28)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x11a383a8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0xb508778)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x1132d0b8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x11355cc8)]: 0 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x13516468)]: 0 failure(s)
2024-04-29 17:19:26 [INFO] [evolutionary_search.cc:649] Scores of the best 6 candidates:
[1 : 6]:	0.9849  0.9309  0.7310  0.5333  0.0509  0.0385
2024-04-29 17:19:26 [INFO] [evolutionary_search.cc:727] Got 6 candidate(s) with evolutionary search
2024-04-29 17:19:26 [INFO] [evolutionary_search.cc:730] Sending 6 candidates(s) for measurement
2024-04-29 20:22:30 [INFO] [task_scheduler.cc:131] [Task #58: fused_concatenate_multiply_add_nn_relu_29] Trial #1: GFLOPs: 48.0425. Time: 2.9374 us. Best GFLOPs: 48.0425
2024-04-29 20:22:30 [INFO] [task_scheduler.cc:131] [Task #58: fused_concatenate_multiply_add_nn_relu_29] Trial #2: GFLOPs: 35.7603. Time: 3.9463 us. Best GFLOPs: 48.0425
2024-04-29 20:22:30 [INFO] [task_scheduler.cc:131] [Task #58: fused_concatenate_multiply_add_nn_relu_29] Trial #3: GFLOPs: 43.4843. Time: 3.2453 us. Best GFLOPs: 48.0425
2024-04-29 20:22:30 [INFO] [task_scheduler.cc:131] [Task #58: fused_concatenate_multiply_add_nn_relu_29] Trial #4: GFLOPs: 48.3092. Time: 2.9212 us. Best GFLOPs: 48.3092
2024-04-29 20:22:30 [INFO] [task_scheduler.cc:131] [Task #58: fused_concatenate_multiply_add_nn_relu_29] Trial #5: GFLOPs: 48.3042. Time: 2.9215 us. Best GFLOPs: 48.3092
2024-04-29 20:22:30 [INFO] [task_scheduler.cc:131] [Task #58: fused_concatenate_multiply_add_nn_relu_29] Trial #6: GFLOPs: 40.1579. Time: 3.5141 us. Best GFLOPs: 48.3092
2024-05-01 15:05:09 [INFO] [task_scheduler.cc:160] Initializing Task #58: "fused_concatenate_multiply_add_nn_relu_29"
2024-05-01 15:05:09 [INFO] [task_scheduler.cc:35] 
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(896), T.int64(7), T.int64(7)), "float32"), p1: T.Buffer((T.int64(1), T.int64(32), T.int64(7), T.int64(7)), "float32"), p2: T.Buffer((T.int64(1), T.int64(32), T.int64(7), T.int64(7)), "float32"), p3: T.Buffer((T.int64(1), T.int64(960), T.int64(1), T.int64(1)), "float32"), p4: T.Buffer((T.int64(1), T.int64(960), T.int64(1), T.int64(1)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(960), T.int64(7), T.int64(7)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        T_concat = T.alloc_buffer((T.int64(1), T.int64(960), T.int64(7), T.int64(7)))
        T_multiply = T.alloc_buffer((T.int64(1), T.int64(960), T.int64(7), T.int64(7)))
        T_add = T.alloc_buffer((T.int64(1), T.int64(960), T.int64(7), T.int64(7)))
        for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(960), T.int64(7), T.int64(7)):
            with T.block("T_concat"):
                v_ax0, v_ax1, v_ax2, v_ax3 = T.axis.remap("SSSS", [ax0, ax1, ax2, ax3])
                T.reads(p2[v_ax0, v_ax1 - T.int64(928), v_ax2, v_ax3], p1[v_ax0, v_ax1 - T.int64(896), v_ax2, v_ax3], p0[v_ax0, v_ax1, v_ax2, v_ax3])
                T.writes(T_concat[v_ax0, v_ax1, v_ax2, v_ax3])
                T_concat[v_ax0, v_ax1, v_ax2, v_ax3] = T.if_then_else(T.int64(928) <= v_ax1, p2[v_ax0, v_ax1 - T.int64(928), v_ax2, v_ax3], T.if_then_else(T.int64(896) <= v_ax1, p1[v_ax0, v_ax1 - T.int64(896), v_ax2, v_ax3], p0[v_ax0, v_ax1, v_ax2, v_ax3]))
        for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(960), T.int64(7), T.int64(7)):
            with T.block("T_multiply"):
                v_ax0, v_ax1, v_ax2, v_ax3 = T.axis.remap("SSSS", [ax0, ax1, ax2, ax3])
                T.reads(T_concat[v_ax0, v_ax1, v_ax2, v_ax3], p3[v_ax0, v_ax1, T.int64(0), T.int64(0)])
                T.writes(T_multiply[v_ax0, v_ax1, v_ax2, v_ax3])
                T_multiply[v_ax0, v_ax1, v_ax2, v_ax3] = T_concat[v_ax0, v_ax1, v_ax2, v_ax3] * p3[v_ax0, v_ax1, T.int64(0), T.int64(0)]
        for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(960), T.int64(7), T.int64(7)):
            with T.block("T_add"):
                v_ax0, v_ax1, v_ax2, v_ax3 = T.axis.remap("SSSS", [ax0, ax1, ax2, ax3])
                T.reads(T_multiply[v_ax0, v_ax1, v_ax2, v_ax3], p4[v_ax0, v_ax1, T.int64(0), T.int64(0)])
                T.writes(T_add[v_ax0, v_ax1, v_ax2, v_ax3])
                T_add[v_ax0, v_ax1, v_ax2, v_ax3] = T_multiply[v_ax0, v_ax1, v_ax2, v_ax3] + p4[v_ax0, v_ax1, T.int64(0), T.int64(0)]
        for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(960), T.int64(7), T.int64(7)):
            with T.block("T_relu"):
                v_ax0, v_ax1, v_ax2, v_ax3 = T.axis.remap("SSSS", [ax0, ax1, ax2, ax3])
                T.reads(T_add[v_ax0, v_ax1, v_ax2, v_ax3])
                T.writes(T_relu[v_ax0, v_ax1, v_ax2, v_ax3])
                T_relu[v_ax0, v_ax1, v_ax2, v_ax3] = T.max(T_add[v_ax0, v_ax1, v_ax2, v_ax3], T.float32(0))
2024-05-01 15:05:09 [INFO] [task_scheduler.cc:164] Total 1 design space(s) generated
2024-05-01 15:05:09 [INFO] [task_scheduler.cc:170] Design space #0:
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(896), T.int64(7), T.int64(7)), "float32"), p1: T.Buffer((T.int64(1), T.int64(32), T.int64(7), T.int64(7)), "float32"), p2: T.Buffer((T.int64(1), T.int64(32), T.int64(7), T.int64(7)), "float32"), p3: T.Buffer((T.int64(1), T.int64(960), T.int64(1), T.int64(1)), "float32"), p4: T.Buffer((T.int64(1), T.int64(960), T.int64(1), T.int64(1)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(960), T.int64(7), T.int64(7)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        for ax0_ax1_ax2_ax3_fused_0 in T.thread_binding(T.int64(92), thread="blockIdx.x"):
            for ax0_ax1_ax2_ax3_fused_1 in T.thread_binding(T.int64(512), thread="threadIdx.x"):
                with T.block("T_concat"):
                    v_ax0 = T.axis.spatial(T.int64(1), T.int64(0))
                    v_ax1 = T.axis.spatial(T.int64(960), (ax0_ax1_ax2_ax3_fused_0 * T.int64(512) + ax0_ax1_ax2_ax3_fused_1) // T.int64(49))
                    v_ax2 = T.axis.spatial(T.int64(7), (ax0_ax1_ax2_ax3_fused_0 * T.int64(512) + ax0_ax1_ax2_ax3_fused_1) % T.int64(49) // T.int64(7))
                    v_ax3 = T.axis.spatial(T.int64(7), (ax0_ax1_ax2_ax3_fused_0 * T.int64(512) + ax0_ax1_ax2_ax3_fused_1) % T.int64(7))
                    T.where(ax0_ax1_ax2_ax3_fused_0 * T.int64(512) + ax0_ax1_ax2_ax3_fused_1 < T.int64(47040))
                    T.reads(p2[v_ax0, v_ax1 - T.int64(928), v_ax2, v_ax3], p1[v_ax0, v_ax1 - T.int64(896), v_ax2, v_ax3], p0[v_ax0, v_ax1, v_ax2, v_ax3], p3[v_ax0, v_ax1, T.int64(0), T.int64(0)], p4[v_ax0, v_ax1, T.int64(0), T.int64(0)])
                    T.writes(T_relu[v_ax0, v_ax1, v_ax2, v_ax3])
                    T_relu[v_ax0, v_ax1, v_ax2, v_ax3] = T.max(T.if_then_else(T.int64(928) <= v_ax1, p2[v_ax0, v_ax1 - T.int64(928), v_ax2, v_ax3], T.if_then_else(T.int64(896) <= v_ax1, p1[v_ax0, v_ax1 - T.int64(896), v_ax2, v_ax3], p0[v_ax0, v_ax1, v_ax2, v_ax3])) * p3[v_ax0, v_ax1, T.int64(0), T.int64(0)] + p4[v_ax0, v_ax1, T.int64(0), T.int64(0)], T.float32(0))
b0 = sch.get_block(name="T_concat", func_name="main")
b1 = sch.get_block(name="T_multiply", func_name="main")
b2 = sch.get_block(name="T_add", func_name="main")
b3 = sch.get_block(name="T_relu", func_name="main")
sch.reverse_compute_inline(block=b3)
sch.reverse_compute_inline(block=b2)
sch.reverse_compute_inline(block=b1)
l4, l5, l6, l7 = sch.get_loops(block=b0)
l8 = sch.fuse(l4, l5, l6, l7, preserve_unit_iters=True)
v9 = sch.sample_categorical(candidates=[32, 64, 128, 256, 512, 1024], probs=[0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666], decision=4)
l10, l11 = sch.split(loop=l8, factors=[None, v9], preserve_unit_iters=True)
sch.bind(loop=l10, thread_axis="blockIdx.x")
sch.bind(loop=l11, thread_axis="threadIdx.x")
2024-05-01 15:56:46 [INFO] [evolutionary_search.cc:713] Generating candidates......
2024-05-01 15:56:46 [INFO] [evolutionary_search.cc:715] Picked top 6 candidate(s) from database
2024-05-01 15:56:47 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0xd2b87c8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x3751ef8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x12862fc8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x10df1fb8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x144c8a58)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0xe620458)]: 0 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0xb5d7778)]: 0 failure(s)
2024-05-01 15:56:47 [INFO] [evolutionary_search.cc:723] Sampled 506 candidate(s)
2024-05-01 15:56:47 [INFO] [evolutionary_search.cc:621] Evolve iter #0 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0xd2b87c8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x3751ef8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x12862fc8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x10df1fb8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x144c8a58)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0xe620458)]: 0 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0xb5d7778)]: 0 failure(s)
2024-05-01 15:56:47 [INFO] [evolutionary_search.cc:621] Evolve iter #1 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0xd2b87c8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x3751ef8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x12862fc8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x10df1fb8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x144c8a58)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0xe620458)]: 0 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0xb5d7778)]: 0 failure(s)
2024-05-01 15:56:47 [INFO] [evolutionary_search.cc:621] Evolve iter #2 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0xd2b87c8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x3751ef8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x12862fc8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x10df1fb8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x144c8a58)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0xe620458)]: 0 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0xb5d7778)]: 0 failure(s)
2024-05-01 15:56:48 [INFO] [evolutionary_search.cc:621] Evolve iter #3 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0xd2b87c8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x3751ef8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x12862fc8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x10df1fb8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x144c8a58)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0xe620458)]: 0 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0xb5d7778)]: 0 failure(s)
2024-05-01 15:56:48 [INFO] [evolutionary_search.cc:649] Scores of the best 6 candidates:
[1 : 6]:	0.8725  0.4885  0.2797  0.1896  0.1876  0.1549
2024-05-01 15:56:48 [INFO] [evolutionary_search.cc:727] Got 6 candidate(s) with evolutionary search
2024-05-01 15:56:48 [INFO] [evolutionary_search.cc:730] Sending 6 candidates(s) for measurement
2024-05-01 18:32:58 [INFO] [task_scheduler.cc:131] [Task #58: fused_concatenate_multiply_add_nn_relu_29] Trial #1: GFLOPs: 35.1911. Time: 4.0101 us. Best GFLOPs: 35.1911
2024-05-01 18:32:58 [INFO] [task_scheduler.cc:131] [Task #58: fused_concatenate_multiply_add_nn_relu_29] Trial #2: GFLOPs: 48.1218. Time: 2.9326 us. Best GFLOPs: 48.1218
2024-05-01 18:32:58 [INFO] [task_scheduler.cc:131] [Task #58: fused_concatenate_multiply_add_nn_relu_29] Trial #3: GFLOPs: 44.3593. Time: 3.1813 us. Best GFLOPs: 48.1218
2024-05-01 18:32:58 [INFO] [task_scheduler.cc:131] [Task #58: fused_concatenate_multiply_add_nn_relu_29] Trial #4: GFLOPs: 40.0731. Time: 3.5216 us. Best GFLOPs: 48.1218
2024-05-01 18:32:58 [INFO] [task_scheduler.cc:131] [Task #58: fused_concatenate_multiply_add_nn_relu_29] Trial #5: GFLOPs: 47.5146. Time: 2.9700 us. Best GFLOPs: 48.1218
2024-05-01 18:32:58 [INFO] [task_scheduler.cc:131] [Task #58: fused_concatenate_multiply_add_nn_relu_29] Trial #6: GFLOPs: 47.9062. Time: 2.9458 us. Best GFLOPs: 48.1218
