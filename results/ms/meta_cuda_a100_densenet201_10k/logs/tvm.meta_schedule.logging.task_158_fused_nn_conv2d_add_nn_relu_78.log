2024-04-29 16:32:19 [INFO] [task_scheduler.cc:160] Initializing Task #158: "fused_nn_conv2d_add_nn_relu_78"
2024-04-29 16:32:19 [INFO] [task_scheduler.cc:35] 
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(288), T.int64(14), T.int64(14)), "float32"), p1: T.Buffer((T.int64(128), T.int64(288), T.int64(1), T.int64(1)), "float32"), p2: T.Buffer((T.int64(1), T.int64(128), T.int64(1), T.int64(1)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(128), T.int64(14), T.int64(14)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        pad_temp = T.alloc_buffer((T.int64(1), T.int64(288), T.int64(14), T.int64(14)))
        conv2d_nchw = T.alloc_buffer((T.int64(1), T.int64(128), T.int64(14), T.int64(14)))
        T_add = T.alloc_buffer((T.int64(1), T.int64(128), T.int64(14), T.int64(14)))
        for i0, i1, i2, i3 in T.grid(T.int64(1), T.int64(288), T.int64(14), T.int64(14)):
            with T.block("pad_temp"):
                v_i0, v_i1, v_i2, v_i3 = T.axis.remap("SSSS", [i0, i1, i2, i3])
                T.reads(p0[v_i0, v_i1, v_i2, v_i3])
                T.writes(pad_temp[v_i0, v_i1, v_i2, v_i3])
                pad_temp[v_i0, v_i1, v_i2, v_i3] = p0[v_i0, v_i1, v_i2, v_i3]
        for nn, ff, yy, xx, rc, ry, rx in T.grid(T.int64(1), T.int64(128), T.int64(14), T.int64(14), T.int64(288), T.int64(1), T.int64(1)):
            with T.block("conv2d_nchw"):
                v_nn, v_ff, v_yy, v_xx, v_rc, v_ry, v_rx = T.axis.remap("SSSSRRR", [nn, ff, yy, xx, rc, ry, rx])
                T.reads(pad_temp[v_nn, v_rc, v_yy + v_ry, v_xx + v_rx], p1[v_ff, v_rc, v_ry, v_rx])
                T.writes(conv2d_nchw[v_nn, v_ff, v_yy, v_xx])
                with T.init():
                    conv2d_nchw[v_nn, v_ff, v_yy, v_xx] = T.float32(0)
                conv2d_nchw[v_nn, v_ff, v_yy, v_xx] = conv2d_nchw[v_nn, v_ff, v_yy, v_xx] + pad_temp[v_nn, v_rc, v_yy + v_ry, v_xx + v_rx] * p1[v_ff, v_rc, v_ry, v_rx]
        for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(128), T.int64(14), T.int64(14)):
            with T.block("T_add"):
                v_ax0, v_ax1, v_ax2, v_ax3 = T.axis.remap("SSSS", [ax0, ax1, ax2, ax3])
                T.reads(conv2d_nchw[v_ax0, v_ax1, v_ax2, v_ax3], p2[v_ax0, v_ax1, T.int64(0), T.int64(0)])
                T.writes(T_add[v_ax0, v_ax1, v_ax2, v_ax3])
                T_add[v_ax0, v_ax1, v_ax2, v_ax3] = conv2d_nchw[v_ax0, v_ax1, v_ax2, v_ax3] + p2[v_ax0, v_ax1, T.int64(0), T.int64(0)]
        for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(128), T.int64(14), T.int64(14)):
            with T.block("T_relu"):
                v_ax0, v_ax1, v_ax2, v_ax3 = T.axis.remap("SSSS", [ax0, ax1, ax2, ax3])
                T.reads(T_add[v_ax0, v_ax1, v_ax2, v_ax3])
                T.writes(T_relu[v_ax0, v_ax1, v_ax2, v_ax3])
                T_relu[v_ax0, v_ax1, v_ax2, v_ax3] = T.max(T_add[v_ax0, v_ax1, v_ax2, v_ax3], T.float32(0))
2024-04-29 16:32:19 [INFO] [task_scheduler.cc:164] Total 3 design space(s) generated
2024-04-29 16:32:19 [INFO] [task_scheduler.cc:170] Design space #0:
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(288), T.int64(14), T.int64(14)), "float32"), p1: T.Buffer((T.int64(128), T.int64(288), T.int64(1), T.int64(1)), "float32"), p2: T.Buffer((T.int64(1), T.int64(128), T.int64(1), T.int64(1)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(128), T.int64(14), T.int64(14)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        with T.block("root"):
            T.reads()
            T.writes()
            T.block_attr({"meta_schedule.unroll_explicit": 1024})
            conv2d_nchw_local = T.alloc_buffer((T.int64(1), T.int64(128), T.int64(14), T.int64(14)), scope="local")
            pad_temp_shared = T.alloc_buffer((T.int64(1), T.int64(288), T.int64(14), T.int64(14)), scope="shared")
            p1_shared = T.alloc_buffer((T.int64(128), T.int64(288), T.int64(1), T.int64(1)), scope="shared")
            for nn_0_ff_0_yy_0_xx_0_fused in T.thread_binding(T.int64(49), thread="blockIdx.x"):
                for nn_1_ff_1_yy_1_xx_1_fused in T.thread_binding(T.int64(2), thread="vthread.x"):
                    for nn_2_ff_2_yy_2_xx_2_fused in T.thread_binding(T.int64(128), thread="threadIdx.x"):
                        for rc_0, ry_0, rx_0 in T.grid(T.int64(3), T.int64(1), T.int64(1)):
                            for ax0_ax1_ax2_ax3_fused in range(T.int64(384)):
                                with T.block("pad_temp_shared"):
                                    v0 = T.axis.spatial(T.int64(1), T.int64(0))
                                    v1 = T.axis.spatial(T.int64(288), rc_0 * T.int64(96) + ax0_ax1_ax2_ax3_fused // T.int64(4))
                                    v2 = T.axis.spatial(T.int64(14), nn_0_ff_0_yy_0_xx_0_fused // T.int64(7) * T.int64(2) + ax0_ax1_ax2_ax3_fused % T.int64(4) // T.int64(2))
                                    v3 = T.axis.spatial(T.int64(14), nn_0_ff_0_yy_0_xx_0_fused % T.int64(7) * T.int64(2) + ax0_ax1_ax2_ax3_fused % T.int64(2))
                                    T.reads(p0[v0, v1, v2, v3])
                                    T.writes(pad_temp_shared[v0, v1, v2, v3])
                                    T.block_attr({"meta_schedule.cooperative_fetch": 2})
                                    pad_temp_shared[v0, v1, v2, v3] = p0[v0, v1, v2, v3]
                            for ax0_ax1_ax2_ax3_fused in range(T.int64(12288)):
                                with T.block("p1_shared"):
                                    v0 = T.axis.spatial(T.int64(128), ax0_ax1_ax2_ax3_fused // T.int64(96))
                                    v1 = T.axis.spatial(T.int64(288), rc_0 * T.int64(96) + ax0_ax1_ax2_ax3_fused % T.int64(96))
                                    v2 = T.axis.spatial(T.int64(1), T.int64(0))
                                    v3 = T.axis.spatial(T.int64(1), T.int64(0))
                                    T.reads(p1[v0, v1, v2, v3])
                                    T.writes(p1_shared[v0, v1, v2, v3])
                                    T.block_attr({"meta_schedule.cooperative_fetch": 3})
                                    p1_shared[v0, v1, v2, v3] = p1[v0, v1, v2, v3]
                            for rc_1, ry_1, rx_1, nn_3, ff_3, yy_3, xx_3, rc_2, ry_2, rx_2, nn_4, ff_4, yy_4, xx_4 in T.grid(T.int64(12), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(8), T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(1), T.int64(1)):
                                with T.block("conv2d_nchw"):
                                    v_nn = T.axis.spatial(T.int64(1), nn_3 + nn_4)
                                    v_ff = T.axis.spatial(T.int64(128), nn_2_ff_2_yy_2_xx_2_fused // T.int64(2) * T.int64(2) + ff_3 * T.int64(2) + ff_4)
                                    v_yy = T.axis.spatial(T.int64(14), nn_0_ff_0_yy_0_xx_0_fused // T.int64(7) * T.int64(2) + nn_1_ff_1_yy_1_xx_1_fused + yy_3 + yy_4)
                                    v_xx = T.axis.spatial(T.int64(14), nn_0_ff_0_yy_0_xx_0_fused % T.int64(7) * T.int64(2) + nn_2_ff_2_yy_2_xx_2_fused % T.int64(2) + xx_3 + xx_4)
                                    v_rc = T.axis.reduce(T.int64(288), rc_0 * T.int64(96) + rc_1 * T.int64(8) + rc_2)
                                    v_ry = T.axis.reduce(T.int64(1), ry_0 + ry_1 + ry_2)
                                    v_rx = T.axis.reduce(T.int64(1), rx_0 + rx_1 + rx_2)
                                    T.reads(pad_temp_shared[v_nn, v_rc, v_yy + v_ry, v_xx + v_rx], p1_shared[v_ff, v_rc, v_ry, v_rx])
                                    T.writes(conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx])
                                    T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 32, "meta_schedule.tiling_structure": "SSSRRSRS"})
                                    with T.init():
                                        conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx] = T.float32(0)
                                    conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx] = conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx] + pad_temp_shared[v_nn, v_rc, v_yy + v_ry, v_xx + v_rx] * p1_shared[v_ff, v_rc, v_ry, v_rx]
                        for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(2), T.int64(1), T.int64(1)):
                            with T.block("conv2d_nchw_local"):
                                v0 = T.axis.spatial(T.int64(1), ax0)
                                v1 = T.axis.spatial(T.int64(128), nn_2_ff_2_yy_2_xx_2_fused // T.int64(2) * T.int64(2) + ax1)
                                v2 = T.axis.spatial(T.int64(14), nn_0_ff_0_yy_0_xx_0_fused // T.int64(7) * T.int64(2) + nn_1_ff_1_yy_1_xx_1_fused + ax2)
                                v3 = T.axis.spatial(T.int64(14), nn_0_ff_0_yy_0_xx_0_fused % T.int64(7) * T.int64(2) + nn_2_ff_2_yy_2_xx_2_fused % T.int64(2) + ax3)
                                T.reads(conv2d_nchw_local[v0, v1, v2, v3], p2[v0, v1, T.int64(0), T.int64(0)])
                                T.writes(T_relu[v0, v1, v2, v3])
                                T_relu[v0, v1, v2, v3] = T.max(conv2d_nchw_local[v0, v1, v2, v3] + p2[v0, v1, T.int64(0), T.int64(0)], T.float32(0))
b0 = sch.get_block(name="pad_temp", func_name="main")
b1 = sch.get_block(name="conv2d_nchw", func_name="main")
b2 = sch.get_block(name="T_add", func_name="main")
b3 = sch.get_block(name="T_relu", func_name="main")
b4 = sch.get_block(name="root", func_name="main")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSSRRSRS")
l5, l6, l7, l8, l9, l10, l11 = sch.get_loops(block=b1)
v12, v13, v14, v15, v16 = sch.sample_perfect_tile(loop=l5, n=5, max_innermost_factor=64, decision=[1, 1, 1, 1, 1])
l17, l18, l19, l20, l21 = sch.split(loop=l5, factors=[v12, v13, v14, v15, v16], preserve_unit_iters=True)
v22, v23, v24, v25, v26 = sch.sample_perfect_tile(loop=l6, n=5, max_innermost_factor=64, decision=[1, 1, 64, 1, 2])
l27, l28, l29, l30, l31 = sch.split(loop=l6, factors=[v22, v23, v24, v25, v26], preserve_unit_iters=True)
v32, v33, v34, v35, v36 = sch.sample_perfect_tile(loop=l7, n=5, max_innermost_factor=64, decision=[7, 2, 1, 1, 1])
l37, l38, l39, l40, l41 = sch.split(loop=l7, factors=[v32, v33, v34, v35, v36], preserve_unit_iters=True)
v42, v43, v44, v45, v46 = sch.sample_perfect_tile(loop=l8, n=5, max_innermost_factor=64, decision=[7, 1, 2, 1, 1])
l47, l48, l49, l50, l51 = sch.split(loop=l8, factors=[v42, v43, v44, v45, v46], preserve_unit_iters=True)
v52, v53, v54 = sch.sample_perfect_tile(loop=l9, n=3, max_innermost_factor=64, decision=[3, 12, 8])
l55, l56, l57 = sch.split(loop=l9, factors=[v52, v53, v54], preserve_unit_iters=True)
v58, v59, v60 = sch.sample_perfect_tile(loop=l10, n=3, max_innermost_factor=64, decision=[1, 1, 1])
l61, l62, l63 = sch.split(loop=l10, factors=[v58, v59, v60], preserve_unit_iters=True)
v64, v65, v66 = sch.sample_perfect_tile(loop=l11, n=3, max_innermost_factor=64, decision=[1, 1, 1])
l67, l68, l69 = sch.split(loop=l11, factors=[v64, v65, v66], preserve_unit_iters=True)
sch.reorder(l17, l27, l37, l47, l18, l28, l38, l48, l19, l29, l39, l49, l55, l61, l67, l56, l62, l68, l20, l30, l40, l50, l57, l63, l69, l21, l31, l41, l51)
l70 = sch.fuse(l17, l27, l37, l47, preserve_unit_iters=True)
sch.bind(loop=l70, thread_axis="blockIdx.x")
l71 = sch.fuse(l18, l28, l38, l48, preserve_unit_iters=True)
sch.bind(loop=l71, thread_axis="vthread.x")
l72 = sch.fuse(l19, l29, l39, l49, preserve_unit_iters=True)
sch.bind(loop=l72, thread_axis="threadIdx.x")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_low_inclusive", ann_val=32)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_high_inclusive", ann_val=1024)
b73 = sch.cache_write(block=b1, write_buffer_index=0, storage_scope="local")
sch.reverse_compute_at(block=b73, loop=l72, preserve_unit_loops=True, index=-1)
b74 = sch.cache_read(block=b1, read_buffer_index=0, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b74, loop=l67, preserve_unit_loops=True, index=-1)
l75, l76, l77, l78, l79, l80, l81, l82, l83, l84 = sch.get_loops(block=b74)
l85 = sch.fuse(l81, l82, l83, l84, preserve_unit_iters=True)
v86 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=1)
sch.annotate(block_or_loop=b74, ann_key="meta_schedule.cooperative_fetch", ann_val=v86)
b87 = sch.cache_read(block=b1, read_buffer_index=1, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b87, loop=l67, preserve_unit_loops=True, index=-1)
l88, l89, l90, l91, l92, l93, l94, l95, l96, l97 = sch.get_loops(block=b87)
l98 = sch.fuse(l94, l95, l96, l97, preserve_unit_iters=True)
v99 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=2)
sch.annotate(block_or_loop=b87, ann_key="meta_schedule.cooperative_fetch", ann_val=v99)
sch.reverse_compute_inline(block=b3)
sch.reverse_compute_inline(block=b2)
sch.compute_inline(block=b0)
v100 = sch.sample_categorical(candidates=[0, 16, 64, 512, 1024], probs=[0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001], decision=4)
sch.annotate(block_or_loop=b4, ann_key="meta_schedule.unroll_explicit", ann_val=v100)
2024-04-29 16:32:19 [INFO] [task_scheduler.cc:170] Design space #1:
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(288), T.int64(14), T.int64(14)), "float32"), p1: T.Buffer((T.int64(128), T.int64(288), T.int64(1), T.int64(1)), "float32"), p2: T.Buffer((T.int64(1), T.int64(128), T.int64(1), T.int64(1)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(128), T.int64(14), T.int64(14)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        with T.block("root"):
            T.reads()
            T.writes()
            T.block_attr({"meta_schedule.unroll_explicit": 512})
            conv2d_nchw_local = T.alloc_buffer((T.int64(1), T.int64(128), T.int64(14), T.int64(14)), scope="local")
            pad_temp_shared = T.alloc_buffer((T.int64(1), T.int64(288), T.int64(14), T.int64(14)), scope="shared")
            p1_shared = T.alloc_buffer((T.int64(128), T.int64(288), T.int64(1), T.int64(1)), scope="shared")
            for nn_0_ff_0_yy_0_xx_0_fused in T.thread_binding(T.int64(49), thread="blockIdx.x"):
                for nn_1_ff_1_yy_1_xx_1_fused in T.thread_binding(T.int64(2), thread="vthread.x"):
                    for nn_2_ff_2_yy_2_xx_2_fused in T.thread_binding(T.int64(128), thread="threadIdx.x"):
                        for rc_0_ry_0_rx_0_fused in T.serial(T.int64(3), annotations={"software_pipeline_async_stages": [0], "software_pipeline_order": [0, 1, 2], "software_pipeline_stage": [0, 0, 2]}):
                            for ax0_ax1_ax2_ax3_fused in range(T.int64(384)):
                                with T.block("pad_temp_shared"):
                                    v0 = T.axis.spatial(T.int64(1), T.int64(0))
                                    v1 = T.axis.spatial(T.int64(288), rc_0_ry_0_rx_0_fused * T.int64(96) + ax0_ax1_ax2_ax3_fused // T.int64(4))
                                    v2 = T.axis.spatial(T.int64(14), nn_0_ff_0_yy_0_xx_0_fused // T.int64(7) * T.int64(2) + ax0_ax1_ax2_ax3_fused % T.int64(4) // T.int64(2))
                                    v3 = T.axis.spatial(T.int64(14), nn_0_ff_0_yy_0_xx_0_fused % T.int64(7) * T.int64(2) + ax0_ax1_ax2_ax3_fused % T.int64(2))
                                    T.reads(p0[v0, v1, v2, v3])
                                    T.writes(pad_temp_shared[v0, v1, v2, v3])
                                    T.block_attr({"meta_schedule.cooperative_fetch": 2})
                                    pad_temp_shared[v0, v1, v2, v3] = p0[v0, v1, v2, v3]
                            for ax0_ax1_ax2_ax3_fused in range(T.int64(12288)):
                                with T.block("p1_shared"):
                                    v0 = T.axis.spatial(T.int64(128), ax0_ax1_ax2_ax3_fused // T.int64(96))
                                    v1 = T.axis.spatial(T.int64(288), rc_0_ry_0_rx_0_fused * T.int64(96) + ax0_ax1_ax2_ax3_fused % T.int64(96))
                                    v2 = T.axis.spatial(T.int64(1), T.int64(0))
                                    v3 = T.axis.spatial(T.int64(1), T.int64(0))
                                    T.reads(p1[v0, v1, v2, v3])
                                    T.writes(p1_shared[v0, v1, v2, v3])
                                    T.block_attr({"meta_schedule.cooperative_fetch": 3})
                                    p1_shared[v0, v1, v2, v3] = p1[v0, v1, v2, v3]
                            for rc_1, ry_1, rx_1, nn_3, ff_3, yy_3, xx_3, rc_2, ry_2, rx_2, nn_4, ff_4, yy_4, xx_4 in T.grid(T.int64(12), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(8), T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(1), T.int64(1)):
                                with T.block("conv2d_nchw"):
                                    v_nn = T.axis.spatial(T.int64(1), nn_3 + nn_4)
                                    v_ff = T.axis.spatial(T.int64(128), nn_2_ff_2_yy_2_xx_2_fused // T.int64(2) * T.int64(2) + ff_3 * T.int64(2) + ff_4)
                                    v_yy = T.axis.spatial(T.int64(14), nn_0_ff_0_yy_0_xx_0_fused // T.int64(7) * T.int64(2) + nn_1_ff_1_yy_1_xx_1_fused + yy_3 + yy_4)
                                    v_xx = T.axis.spatial(T.int64(14), nn_0_ff_0_yy_0_xx_0_fused % T.int64(7) * T.int64(2) + nn_2_ff_2_yy_2_xx_2_fused % T.int64(2) + xx_3 + xx_4)
                                    v_rc = T.axis.reduce(T.int64(288), rc_0_ry_0_rx_0_fused * T.int64(96) + rc_1 * T.int64(8) + rc_2)
                                    v_ry = T.axis.reduce(T.int64(1), ry_1 + ry_2)
                                    v_rx = T.axis.reduce(T.int64(1), rx_1 + rx_2)
                                    T.reads(pad_temp_shared[v_nn, v_rc, v_yy + v_ry, v_xx + v_rx], p1_shared[v_ff, v_rc, v_ry, v_rx])
                                    T.writes(conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx])
                                    T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 32, "meta_schedule.tiling_structure": "SSSRRSRS"})
                                    with T.init():
                                        conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx] = T.float32(0)
                                    conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx] = conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx] + pad_temp_shared[v_nn, v_rc, v_yy + v_ry, v_xx + v_rx] * p1_shared[v_ff, v_rc, v_ry, v_rx]
                        for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(2), T.int64(1), T.int64(1)):
                            with T.block("conv2d_nchw_local"):
                                v0 = T.axis.spatial(T.int64(1), ax0)
                                v1 = T.axis.spatial(T.int64(128), nn_2_ff_2_yy_2_xx_2_fused // T.int64(2) * T.int64(2) + ax1)
                                v2 = T.axis.spatial(T.int64(14), nn_0_ff_0_yy_0_xx_0_fused // T.int64(7) * T.int64(2) + nn_1_ff_1_yy_1_xx_1_fused + ax2)
                                v3 = T.axis.spatial(T.int64(14), nn_0_ff_0_yy_0_xx_0_fused % T.int64(7) * T.int64(2) + nn_2_ff_2_yy_2_xx_2_fused % T.int64(2) + ax3)
                                T.reads(conv2d_nchw_local[v0, v1, v2, v3], p2[v0, v1, T.int64(0), T.int64(0)])
                                T.writes(T_relu[v0, v1, v2, v3])
                                T_relu[v0, v1, v2, v3] = T.max(conv2d_nchw_local[v0, v1, v2, v3] + p2[v0, v1, T.int64(0), T.int64(0)], T.float32(0))
b0 = sch.get_block(name="pad_temp", func_name="main")
b1 = sch.get_block(name="conv2d_nchw", func_name="main")
b2 = sch.get_block(name="T_add", func_name="main")
b3 = sch.get_block(name="T_relu", func_name="main")
b4 = sch.get_block(name="root", func_name="main")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSSRRSRS")
l5, l6, l7, l8, l9, l10, l11 = sch.get_loops(block=b1)
v12, v13, v14, v15, v16 = sch.sample_perfect_tile(loop=l5, n=5, max_innermost_factor=64, decision=[1, 1, 1, 1, 1])
l17, l18, l19, l20, l21 = sch.split(loop=l5, factors=[v12, v13, v14, v15, v16], preserve_unit_iters=True)
v22, v23, v24, v25, v26 = sch.sample_perfect_tile(loop=l6, n=5, max_innermost_factor=64, decision=[1, 1, 64, 1, 2])
l27, l28, l29, l30, l31 = sch.split(loop=l6, factors=[v22, v23, v24, v25, v26], preserve_unit_iters=True)
v32, v33, v34, v35, v36 = sch.sample_perfect_tile(loop=l7, n=5, max_innermost_factor=64, decision=[7, 2, 1, 1, 1])
l37, l38, l39, l40, l41 = sch.split(loop=l7, factors=[v32, v33, v34, v35, v36], preserve_unit_iters=True)
v42, v43, v44, v45, v46 = sch.sample_perfect_tile(loop=l8, n=5, max_innermost_factor=64, decision=[7, 1, 2, 1, 1])
l47, l48, l49, l50, l51 = sch.split(loop=l8, factors=[v42, v43, v44, v45, v46], preserve_unit_iters=True)
v52, v53, v54 = sch.sample_perfect_tile(loop=l9, n=3, max_innermost_factor=64, decision=[3, 12, 8])
l55, l56, l57 = sch.split(loop=l9, factors=[v52, v53, v54], preserve_unit_iters=True)
v58, v59, v60 = sch.sample_perfect_tile(loop=l10, n=3, max_innermost_factor=64, decision=[1, 1, 1])
l61, l62, l63 = sch.split(loop=l10, factors=[v58, v59, v60], preserve_unit_iters=True)
v64, v65, v66 = sch.sample_perfect_tile(loop=l11, n=3, max_innermost_factor=64, decision=[1, 1, 1])
l67, l68, l69 = sch.split(loop=l11, factors=[v64, v65, v66], preserve_unit_iters=True)
sch.reorder(l17, l27, l37, l47, l18, l28, l38, l48, l19, l29, l39, l49, l55, l61, l67, l56, l62, l68, l20, l30, l40, l50, l57, l63, l69, l21, l31, l41, l51)
l70 = sch.fuse(l17, l27, l37, l47, preserve_unit_iters=True)
sch.bind(loop=l70, thread_axis="blockIdx.x")
l71 = sch.fuse(l18, l28, l38, l48, preserve_unit_iters=True)
sch.bind(loop=l71, thread_axis="vthread.x")
l72 = sch.fuse(l19, l29, l39, l49, preserve_unit_iters=True)
sch.bind(loop=l72, thread_axis="threadIdx.x")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_low_inclusive", ann_val=32)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_high_inclusive", ann_val=1024)
b73 = sch.cache_write(block=b1, write_buffer_index=0, storage_scope="local")
sch.reverse_compute_at(block=b73, loop=l72, preserve_unit_loops=True, index=-1)
b74 = sch.cache_read(block=b1, read_buffer_index=0, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b74, loop=l67, preserve_unit_loops=True, index=-1)
l75, l76, l77, l78, l79, l80, l81, l82, l83, l84 = sch.get_loops(block=b74)
l85 = sch.fuse(l81, l82, l83, l84, preserve_unit_iters=True)
v86 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=1)
sch.annotate(block_or_loop=b74, ann_key="meta_schedule.cooperative_fetch", ann_val=v86)
b87 = sch.cache_read(block=b1, read_buffer_index=1, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b87, loop=l67, preserve_unit_loops=True, index=-1)
l88, l89, l90, l91, l92, l93, l94, l95, l96, l97 = sch.get_loops(block=b87)
l98 = sch.fuse(l94, l95, l96, l97, preserve_unit_iters=True)
v99 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=2)
sch.annotate(block_or_loop=b87, ann_key="meta_schedule.cooperative_fetch", ann_val=v99)
l100 = sch.fuse(l55, l61, l67, preserve_unit_iters=True)
sch.annotate(block_or_loop=l100, ann_key="software_pipeline_stage", ann_val=[0, 0, 2])
sch.annotate(block_or_loop=l100, ann_key="software_pipeline_order", ann_val=[0, 1, 2])
sch.annotate(block_or_loop=l100, ann_key="software_pipeline_async_stages", ann_val=[0])
sch.reverse_compute_inline(block=b3)
sch.reverse_compute_inline(block=b2)
sch.compute_inline(block=b0)
v101 = sch.sample_categorical(candidates=[0, 16, 64, 512, 1024], probs=[0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001], decision=3)
sch.annotate(block_or_loop=b4, ann_key="meta_schedule.unroll_explicit", ann_val=v101)
2024-04-29 16:32:19 [INFO] [task_scheduler.cc:170] Design space #2:
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(288), T.int64(14), T.int64(14)), "float32"), p1: T.Buffer((T.int64(128), T.int64(288), T.int64(1), T.int64(1)), "float32"), p2: T.Buffer((T.int64(1), T.int64(128), T.int64(1), T.int64(1)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(128), T.int64(14), T.int64(14)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        with T.block("root"):
            T.reads()
            T.writes()
            T.block_attr({"meta_schedule.unroll_explicit": 1024})
            conv2d_nchw_local = T.alloc_buffer((T.int64(1), T.int64(128), T.int64(14), T.int64(14)), scope="local")
            pad_temp_shared = T.alloc_buffer((T.int64(1), T.int64(288), T.int64(14), T.int64(14)), scope="shared")
            p1_shared = T.alloc_buffer((T.int64(128), T.int64(288), T.int64(1), T.int64(1)), scope="shared")
            for nn_0_ff_0_yy_0_xx_0_fused in T.thread_binding(T.int64(49), thread="blockIdx.x"):
                for nn_1_ff_1_yy_1_xx_1_fused in T.thread_binding(T.int64(2), thread="vthread.x"):
                    for nn_2_ff_2_yy_2_xx_2_fused in T.thread_binding(T.int64(128), thread="threadIdx.x"):
                        for rc_0_ry_0_rx_0_fused in T.serial(T.int64(3), annotations={"software_pipeline_async_stages": [0], "software_pipeline_order": [0, 1, 2], "software_pipeline_stage": [0, 0, 3]}):
                            for ax0_ax1_ax2_ax3_fused in range(T.int64(384)):
                                with T.block("pad_temp_shared"):
                                    v0 = T.axis.spatial(T.int64(1), T.int64(0))
                                    v1 = T.axis.spatial(T.int64(288), rc_0_ry_0_rx_0_fused * T.int64(96) + ax0_ax1_ax2_ax3_fused // T.int64(4))
                                    v2 = T.axis.spatial(T.int64(14), nn_0_ff_0_yy_0_xx_0_fused // T.int64(7) * T.int64(2) + ax0_ax1_ax2_ax3_fused % T.int64(4) // T.int64(2))
                                    v3 = T.axis.spatial(T.int64(14), nn_0_ff_0_yy_0_xx_0_fused % T.int64(7) * T.int64(2) + ax0_ax1_ax2_ax3_fused % T.int64(2))
                                    T.reads(p0[v0, v1, v2, v3])
                                    T.writes(pad_temp_shared[v0, v1, v2, v3])
                                    T.block_attr({"meta_schedule.cooperative_fetch": 2})
                                    pad_temp_shared[v0, v1, v2, v3] = p0[v0, v1, v2, v3]
                            for ax0_ax1_ax2_ax3_fused in range(T.int64(12288)):
                                with T.block("p1_shared"):
                                    v0 = T.axis.spatial(T.int64(128), ax0_ax1_ax2_ax3_fused // T.int64(96))
                                    v1 = T.axis.spatial(T.int64(288), rc_0_ry_0_rx_0_fused * T.int64(96) + ax0_ax1_ax2_ax3_fused % T.int64(96))
                                    v2 = T.axis.spatial(T.int64(1), T.int64(0))
                                    v3 = T.axis.spatial(T.int64(1), T.int64(0))
                                    T.reads(p1[v0, v1, v2, v3])
                                    T.writes(p1_shared[v0, v1, v2, v3])
                                    T.block_attr({"meta_schedule.cooperative_fetch": 3})
                                    p1_shared[v0, v1, v2, v3] = p1[v0, v1, v2, v3]
                            for rc_1, ry_1, rx_1, nn_3, ff_3, yy_3, xx_3, rc_2, ry_2, rx_2, nn_4, ff_4, yy_4, xx_4 in T.grid(T.int64(12), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(8), T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(1), T.int64(1)):
                                with T.block("conv2d_nchw"):
                                    v_nn = T.axis.spatial(T.int64(1), nn_3 + nn_4)
                                    v_ff = T.axis.spatial(T.int64(128), nn_2_ff_2_yy_2_xx_2_fused // T.int64(2) * T.int64(2) + ff_3 * T.int64(2) + ff_4)
                                    v_yy = T.axis.spatial(T.int64(14), nn_0_ff_0_yy_0_xx_0_fused // T.int64(7) * T.int64(2) + nn_1_ff_1_yy_1_xx_1_fused + yy_3 + yy_4)
                                    v_xx = T.axis.spatial(T.int64(14), nn_0_ff_0_yy_0_xx_0_fused % T.int64(7) * T.int64(2) + nn_2_ff_2_yy_2_xx_2_fused % T.int64(2) + xx_3 + xx_4)
                                    v_rc = T.axis.reduce(T.int64(288), rc_0_ry_0_rx_0_fused * T.int64(96) + rc_1 * T.int64(8) + rc_2)
                                    v_ry = T.axis.reduce(T.int64(1), ry_1 + ry_2)
                                    v_rx = T.axis.reduce(T.int64(1), rx_1 + rx_2)
                                    T.reads(pad_temp_shared[v_nn, v_rc, v_yy + v_ry, v_xx + v_rx], p1_shared[v_ff, v_rc, v_ry, v_rx])
                                    T.writes(conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx])
                                    T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 32, "meta_schedule.tiling_structure": "SSSRRSRS"})
                                    with T.init():
                                        conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx] = T.float32(0)
                                    conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx] = conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx] + pad_temp_shared[v_nn, v_rc, v_yy + v_ry, v_xx + v_rx] * p1_shared[v_ff, v_rc, v_ry, v_rx]
                        for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(2), T.int64(1), T.int64(1)):
                            with T.block("conv2d_nchw_local"):
                                v0 = T.axis.spatial(T.int64(1), ax0)
                                v1 = T.axis.spatial(T.int64(128), nn_2_ff_2_yy_2_xx_2_fused // T.int64(2) * T.int64(2) + ax1)
                                v2 = T.axis.spatial(T.int64(14), nn_0_ff_0_yy_0_xx_0_fused // T.int64(7) * T.int64(2) + nn_1_ff_1_yy_1_xx_1_fused + ax2)
                                v3 = T.axis.spatial(T.int64(14), nn_0_ff_0_yy_0_xx_0_fused % T.int64(7) * T.int64(2) + nn_2_ff_2_yy_2_xx_2_fused % T.int64(2) + ax3)
                                T.reads(conv2d_nchw_local[v0, v1, v2, v3], p2[v0, v1, T.int64(0), T.int64(0)])
                                T.writes(T_relu[v0, v1, v2, v3])
                                T_relu[v0, v1, v2, v3] = T.max(conv2d_nchw_local[v0, v1, v2, v3] + p2[v0, v1, T.int64(0), T.int64(0)], T.float32(0))
b0 = sch.get_block(name="pad_temp", func_name="main")
b1 = sch.get_block(name="conv2d_nchw", func_name="main")
b2 = sch.get_block(name="T_add", func_name="main")
b3 = sch.get_block(name="T_relu", func_name="main")
b4 = sch.get_block(name="root", func_name="main")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSSRRSRS")
l5, l6, l7, l8, l9, l10, l11 = sch.get_loops(block=b1)
v12, v13, v14, v15, v16 = sch.sample_perfect_tile(loop=l5, n=5, max_innermost_factor=64, decision=[1, 1, 1, 1, 1])
l17, l18, l19, l20, l21 = sch.split(loop=l5, factors=[v12, v13, v14, v15, v16], preserve_unit_iters=True)
v22, v23, v24, v25, v26 = sch.sample_perfect_tile(loop=l6, n=5, max_innermost_factor=64, decision=[1, 1, 64, 1, 2])
l27, l28, l29, l30, l31 = sch.split(loop=l6, factors=[v22, v23, v24, v25, v26], preserve_unit_iters=True)
v32, v33, v34, v35, v36 = sch.sample_perfect_tile(loop=l7, n=5, max_innermost_factor=64, decision=[7, 2, 1, 1, 1])
l37, l38, l39, l40, l41 = sch.split(loop=l7, factors=[v32, v33, v34, v35, v36], preserve_unit_iters=True)
v42, v43, v44, v45, v46 = sch.sample_perfect_tile(loop=l8, n=5, max_innermost_factor=64, decision=[7, 1, 2, 1, 1])
l47, l48, l49, l50, l51 = sch.split(loop=l8, factors=[v42, v43, v44, v45, v46], preserve_unit_iters=True)
v52, v53, v54 = sch.sample_perfect_tile(loop=l9, n=3, max_innermost_factor=64, decision=[3, 12, 8])
l55, l56, l57 = sch.split(loop=l9, factors=[v52, v53, v54], preserve_unit_iters=True)
v58, v59, v60 = sch.sample_perfect_tile(loop=l10, n=3, max_innermost_factor=64, decision=[1, 1, 1])
l61, l62, l63 = sch.split(loop=l10, factors=[v58, v59, v60], preserve_unit_iters=True)
v64, v65, v66 = sch.sample_perfect_tile(loop=l11, n=3, max_innermost_factor=64, decision=[1, 1, 1])
l67, l68, l69 = sch.split(loop=l11, factors=[v64, v65, v66], preserve_unit_iters=True)
sch.reorder(l17, l27, l37, l47, l18, l28, l38, l48, l19, l29, l39, l49, l55, l61, l67, l56, l62, l68, l20, l30, l40, l50, l57, l63, l69, l21, l31, l41, l51)
l70 = sch.fuse(l17, l27, l37, l47, preserve_unit_iters=True)
sch.bind(loop=l70, thread_axis="blockIdx.x")
l71 = sch.fuse(l18, l28, l38, l48, preserve_unit_iters=True)
sch.bind(loop=l71, thread_axis="vthread.x")
l72 = sch.fuse(l19, l29, l39, l49, preserve_unit_iters=True)
sch.bind(loop=l72, thread_axis="threadIdx.x")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_low_inclusive", ann_val=32)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_high_inclusive", ann_val=1024)
b73 = sch.cache_write(block=b1, write_buffer_index=0, storage_scope="local")
sch.reverse_compute_at(block=b73, loop=l72, preserve_unit_loops=True, index=-1)
b74 = sch.cache_read(block=b1, read_buffer_index=0, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b74, loop=l67, preserve_unit_loops=True, index=-1)
l75, l76, l77, l78, l79, l80, l81, l82, l83, l84 = sch.get_loops(block=b74)
l85 = sch.fuse(l81, l82, l83, l84, preserve_unit_iters=True)
v86 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=1)
sch.annotate(block_or_loop=b74, ann_key="meta_schedule.cooperative_fetch", ann_val=v86)
b87 = sch.cache_read(block=b1, read_buffer_index=1, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b87, loop=l67, preserve_unit_loops=True, index=-1)
l88, l89, l90, l91, l92, l93, l94, l95, l96, l97 = sch.get_loops(block=b87)
l98 = sch.fuse(l94, l95, l96, l97, preserve_unit_iters=True)
v99 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=2)
sch.annotate(block_or_loop=b87, ann_key="meta_schedule.cooperative_fetch", ann_val=v99)
l100 = sch.fuse(l55, l61, l67, preserve_unit_iters=True)
sch.annotate(block_or_loop=l100, ann_key="software_pipeline_stage", ann_val=[0, 0, 3])
sch.annotate(block_or_loop=l100, ann_key="software_pipeline_order", ann_val=[0, 1, 2])
sch.annotate(block_or_loop=l100, ann_key="software_pipeline_async_stages", ann_val=[0])
sch.reverse_compute_inline(block=b3)
sch.reverse_compute_inline(block=b2)
sch.compute_inline(block=b0)
v101 = sch.sample_categorical(candidates=[0, 16, 64, 512, 1024], probs=[0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001], decision=4)
sch.annotate(block_or_loop=b4, ann_key="meta_schedule.unroll_explicit", ann_val=v101)
2024-04-29 18:57:18 [INFO] [evolutionary_search.cc:713] Generating candidates......
2024-04-29 18:57:18 [INFO] [evolutionary_search.cc:715] Picked top 0 candidate(s) from database
2024-04-29 18:57:21 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x9afe2b8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x12423ec8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x13ef5768)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x146a4358)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x11e9ba68)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x10dac758)]: 473 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x11642e48)]: 0 failure(s)
2024-04-29 18:57:22 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x9afe2b8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x12423ec8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x13ef5768)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x146a4358)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x11e9ba68)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x10dac758)]: 948 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x11642e48)]: 0 failure(s)
2024-04-29 18:57:22 [INFO] [evolutionary_search.cc:723] Sampled 76 candidate(s)
2024-04-29 18:57:25 [INFO] [evolutionary_search.cc:621] Evolve iter #0 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x9afe2b8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x12423ec8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x13ef5768)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x146a4358)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x11e9ba68)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x10dac758)]: 105 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x11642e48)]: 0 failure(s)
2024-04-29 18:57:27 [INFO] [evolutionary_search.cc:621] Evolve iter #1 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x9afe2b8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x12423ec8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x13ef5768)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x146a4358)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x11e9ba68)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x10dac758)]: 76 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x11642e48)]: 0 failure(s)
2024-04-29 18:57:29 [INFO] [evolutionary_search.cc:621] Evolve iter #2 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x9afe2b8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x12423ec8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x13ef5768)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x146a4358)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x11e9ba68)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x10dac758)]: 92 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x11642e48)]: 0 failure(s)
2024-04-29 18:57:31 [INFO] [evolutionary_search.cc:621] Evolve iter #3 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x9afe2b8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x12423ec8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x13ef5768)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x146a4358)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x11e9ba68)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x10dac758)]: 80 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x11642e48)]: 0 failure(s)
2024-04-29 18:57:32 [INFO] [evolutionary_search.cc:649] Scores of the best 64 candidates:
[1 : 16]:	0.9963  0.9956  0.9945  0.9938  0.9927  0.9924  0.9924  0.9923  0.9922  0.9907  0.9904  0.9904  0.9903  0.9899  0.9895  0.9890
[17 : 32]:	0.9878  0.9874  0.9868  0.9863  0.9863  0.9861  0.9856  0.9852  0.9845  0.9837  0.9835  0.9824  0.9823  0.9818  0.9809  0.9807
[33 : 48]:	0.9806  0.9803  0.9802  0.9787  0.9787  0.9782  0.9768  0.9768  0.9766  0.9766  0.9756  0.9754  0.9753  0.9752  0.9751  0.9749
[49 : 64]:	0.9747  0.9744  0.9742  0.9710  0.9705  0.9699  0.9698  0.9695  0.9676  0.9676  0.9670  0.9663  0.9662  0.9658  0.9631  0.9629
2024-04-29 18:57:32 [INFO] [evolutionary_search.cc:727] Got 64 candidate(s) with evolutionary search
2024-04-29 18:57:32 [INFO] [evolutionary_search.cc:730] Sending 64 candidates(s) for measurement
2024-04-29 20:30:12 [INFO] [task_scheduler.cc:131] [Task #158: fused_nn_conv2d_add_nn_relu_78] Trial #1: GFLOPs: 17.5373. Time: 826.8588 us. Best GFLOPs: 17.5373
2024-04-29 20:30:12 [INFO] [task_scheduler.cc:131] [Task #158: fused_nn_conv2d_add_nn_relu_78] Trial #2: GFLOPs: 547.7988. Time: 26.4712 us. Best GFLOPs: 547.7988
2024-04-29 20:30:12 [INFO] [task_scheduler.cc:131] [Task #158: fused_nn_conv2d_add_nn_relu_78] Trial #3: GFLOPs: 469.0463. Time: 30.9156 us. Best GFLOPs: 547.7988
2024-04-29 20:30:12 [INFO] [task_scheduler.cc:131] [Task #158: fused_nn_conv2d_add_nn_relu_78] Trial #4: GFLOPs: 337.5313. Time: 42.9615 us. Best GFLOPs: 547.7988
2024-04-29 20:30:12 [INFO] [task_scheduler.cc:131] [Task #158: fused_nn_conv2d_add_nn_relu_78] Trial #5: GFLOPs: 712.9164. Time: 20.3402 us. Best GFLOPs: 712.9164
2024-04-29 20:30:12 [INFO] [task_scheduler.cc:131] [Task #158: fused_nn_conv2d_add_nn_relu_78] Trial #6: GFLOPs: 822.5418. Time: 17.6293 us. Best GFLOPs: 822.5418
2024-04-29 20:30:12 [INFO] [task_scheduler.cc:131] [Task #158: fused_nn_conv2d_add_nn_relu_78] Trial #7: GFLOPs: 189.7970. Time: 76.4020 us. Best GFLOPs: 822.5418
2024-04-29 20:30:12 [INFO] [task_scheduler.cc:131] [Task #158: fused_nn_conv2d_add_nn_relu_78] Trial #8: GFLOPs: 327.3083. Time: 44.3034 us. Best GFLOPs: 822.5418
2024-04-29 20:30:12 [INFO] [task_scheduler.cc:131] [Task #158: fused_nn_conv2d_add_nn_relu_78] Trial #9: GFLOPs: 154.8307. Time: 93.6563 us. Best GFLOPs: 822.5418
2024-04-29 20:30:12 [INFO] [task_scheduler.cc:131] [Task #158: fused_nn_conv2d_add_nn_relu_78] Trial #10: GFLOPs: 445.8169. Time: 32.5265 us. Best GFLOPs: 822.5418
2024-04-29 20:30:12 [INFO] [task_scheduler.cc:131] [Task #158: fused_nn_conv2d_add_nn_relu_78] Trial #11: GFLOPs: 91.7337. Time: 158.0756 us. Best GFLOPs: 822.5418
2024-04-29 20:30:12 [INFO] [task_scheduler.cc:131] [Task #158: fused_nn_conv2d_add_nn_relu_78] Trial #12: GFLOPs: 409.9017. Time: 35.3764 us. Best GFLOPs: 822.5418
2024-04-29 20:30:12 [INFO] [task_scheduler.cc:131] [Task #158: fused_nn_conv2d_add_nn_relu_78] Trial #13: GFLOPs: 159.8977. Time: 90.6884 us. Best GFLOPs: 822.5418
2024-04-29 20:30:12 [INFO] [task_scheduler.cc:131] [Task #158: fused_nn_conv2d_add_nn_relu_78] Trial #14: GFLOPs: 211.4355. Time: 68.5829 us. Best GFLOPs: 822.5418
2024-04-29 20:30:12 [INFO] [task_scheduler.cc:131] [Task #158: fused_nn_conv2d_add_nn_relu_78] Trial #15: GFLOPs: 150.6657. Time: 96.2453 us. Best GFLOPs: 822.5418
2024-04-29 20:30:12 [INFO] [task_scheduler.cc:131] [Task #158: fused_nn_conv2d_add_nn_relu_78] Trial #16: GFLOPs: 476.2601. Time: 30.4474 us. Best GFLOPs: 822.5418
2024-04-29 20:30:12 [INFO] [task_scheduler.cc:131] [Task #158: fused_nn_conv2d_add_nn_relu_78] Trial #17: GFLOPs: 26.7387. Time: 542.3166 us. Best GFLOPs: 822.5418
2024-04-29 20:30:12 [INFO] [task_scheduler.cc:131] [Task #158: fused_nn_conv2d_add_nn_relu_78] Trial #18: GFLOPs: 242.5979. Time: 59.7732 us. Best GFLOPs: 822.5418
2024-04-29 20:30:12 [INFO] [task_scheduler.cc:131] [Task #158: fused_nn_conv2d_add_nn_relu_78] Trial #19: GFLOPs: 318.1580. Time: 45.5776 us. Best GFLOPs: 822.5418
2024-04-29 20:30:12 [INFO] [task_scheduler.cc:131] [Task #158: fused_nn_conv2d_add_nn_relu_78] Trial #20: GFLOPs: 111.3902. Time: 130.1808 us. Best GFLOPs: 822.5418
2024-04-29 20:30:12 [INFO] [task_scheduler.cc:131] [Task #158: fused_nn_conv2d_add_nn_relu_78] Trial #21: GFLOPs: 798.7704. Time: 18.1540 us. Best GFLOPs: 822.5418
2024-04-29 20:30:12 [INFO] [task_scheduler.cc:131] [Task #158: fused_nn_conv2d_add_nn_relu_78] Trial #22: GFLOPs: 26.6523. Time: 544.0761 us. Best GFLOPs: 822.5418
2024-04-29 20:30:12 [INFO] [task_scheduler.cc:131] [Task #158: fused_nn_conv2d_add_nn_relu_78] Trial #23: GFLOPs: 926.5230. Time: 15.6508 us. Best GFLOPs: 926.5230
2024-04-29 20:30:12 [INFO] [task_scheduler.cc:131] [Task #158: fused_nn_conv2d_add_nn_relu_78] Trial #24: GFLOPs: 169.4777. Time: 85.5621 us. Best GFLOPs: 926.5230
2024-04-29 20:30:12 [INFO] [task_scheduler.cc:131] [Task #158: fused_nn_conv2d_add_nn_relu_78] Trial #25: GFLOPs: 889.1523. Time: 16.3086 us. Best GFLOPs: 926.5230
2024-04-29 20:30:12 [INFO] [task_scheduler.cc:131] [Task #158: fused_nn_conv2d_add_nn_relu_78] Trial #26: GFLOPs: 391.1200. Time: 37.0752 us. Best GFLOPs: 926.5230
2024-04-29 20:30:12 [INFO] [task_scheduler.cc:131] [Task #158: fused_nn_conv2d_add_nn_relu_78] Trial #27: GFLOPs: 321.7943. Time: 45.0625 us. Best GFLOPs: 926.5230
2024-04-29 20:30:12 [INFO] [task_scheduler.cc:131] [Task #158: fused_nn_conv2d_add_nn_relu_78] Trial #28: GFLOPs: 164.9609. Time: 87.9049 us. Best GFLOPs: 926.5230
2024-04-29 20:30:12 [INFO] [task_scheduler.cc:131] [Task #158: fused_nn_conv2d_add_nn_relu_78] Trial #29: GFLOPs: 14.1820. Time: 1022.4849 us. Best GFLOPs: 926.5230
2024-04-29 20:30:12 [INFO] [task_scheduler.cc:131] [Task #158: fused_nn_conv2d_add_nn_relu_78] Trial #30: GFLOPs: 456.8097. Time: 31.7438 us. Best GFLOPs: 926.5230
2024-04-29 20:30:12 [INFO] [task_scheduler.cc:131] [Task #158: fused_nn_conv2d_add_nn_relu_78] Trial #31: GFLOPs: 489.1345. Time: 29.6460 us. Best GFLOPs: 926.5230
2024-04-29 20:30:12 [INFO] [task_scheduler.cc:131] [Task #158: fused_nn_conv2d_add_nn_relu_78] Trial #32: GFLOPs: 189.2174. Time: 76.6360 us. Best GFLOPs: 926.5230
2024-04-29 20:30:12 [INFO] [task_scheduler.cc:131] [Task #158: fused_nn_conv2d_add_nn_relu_78] Trial #33: GFLOPs: 196.5663. Time: 73.7709 us. Best GFLOPs: 926.5230
2024-04-29 20:30:12 [INFO] [task_scheduler.cc:131] [Task #158: fused_nn_conv2d_add_nn_relu_78] Trial #34: GFLOPs: 30.3452. Time: 477.8636 us. Best GFLOPs: 926.5230
2024-04-29 20:30:12 [INFO] [task_scheduler.cc:131] [Task #158: fused_nn_conv2d_add_nn_relu_78] Trial #35: GFLOPs: 144.7205. Time: 100.1991 us. Best GFLOPs: 926.5230
2024-04-29 20:30:12 [INFO] [task_scheduler.cc:131] [Task #158: fused_nn_conv2d_add_nn_relu_78] Trial #36: GFLOPs: 27.2855. Time: 531.4492 us. Best GFLOPs: 926.5230
2024-04-29 20:30:12 [INFO] [task_scheduler.cc:131] [Task #158: fused_nn_conv2d_add_nn_relu_78] Trial #37: GFLOPs: 533.7188. Time: 27.1695 us. Best GFLOPs: 926.5230
2024-04-29 20:30:12 [INFO] [task_scheduler.cc:131] [Task #158: fused_nn_conv2d_add_nn_relu_78] Trial #38: GFLOPs: 62.8118. Time: 230.8622 us. Best GFLOPs: 926.5230
2024-04-29 20:30:12 [INFO] [task_scheduler.cc:131] [Task #158: fused_nn_conv2d_add_nn_relu_78] Trial #39: GFLOPs: 12.2461. Time: 1184.1233 us. Best GFLOPs: 926.5230
2024-04-29 20:30:12 [INFO] [task_scheduler.cc:131] [Task #158: fused_nn_conv2d_add_nn_relu_78] Trial #40: GFLOPs: 200.7046. Time: 72.2498 us. Best GFLOPs: 926.5230
2024-04-29 20:30:12 [INFO] [task_scheduler.cc:131] [Task #158: fused_nn_conv2d_add_nn_relu_78] Trial #41: GFLOPs: 97.5891. Time: 148.5910 us. Best GFLOPs: 926.5230
2024-04-29 20:30:12 [INFO] [task_scheduler.cc:131] [Task #158: fused_nn_conv2d_add_nn_relu_78] Trial #42: GFLOPs: 47.1615. Time: 307.4723 us. Best GFLOPs: 926.5230
2024-04-29 20:30:12 [INFO] [task_scheduler.cc:131] [Task #158: fused_nn_conv2d_add_nn_relu_78] Trial #43: GFLOPs: 435.3981. Time: 33.3048 us. Best GFLOPs: 926.5230
2024-04-29 20:30:12 [INFO] [task_scheduler.cc:131] [Task #158: fused_nn_conv2d_add_nn_relu_78] Trial #44: GFLOPs: 14.7562. Time: 982.6987 us. Best GFLOPs: 926.5230
2024-04-29 20:30:12 [INFO] [task_scheduler.cc:131] [Task #158: fused_nn_conv2d_add_nn_relu_78] Trial #45: GFLOPs: 93.6768. Time: 154.7967 us. Best GFLOPs: 926.5230
2024-04-29 20:30:12 [INFO] [task_scheduler.cc:131] [Task #158: fused_nn_conv2d_add_nn_relu_78] Trial #46: GFLOPs: 664.2939. Time: 21.8290 us. Best GFLOPs: 926.5230
2024-04-29 20:30:12 [INFO] [task_scheduler.cc:131] [Task #158: fused_nn_conv2d_add_nn_relu_78] Trial #47: GFLOPs: 654.3539. Time: 22.1606 us. Best GFLOPs: 926.5230
2024-04-29 20:30:12 [INFO] [task_scheduler.cc:131] [Task #158: fused_nn_conv2d_add_nn_relu_78] Trial #48: GFLOPs: 735.2355. Time: 19.7227 us. Best GFLOPs: 926.5230
2024-04-29 20:30:12 [INFO] [task_scheduler.cc:131] [Task #158: fused_nn_conv2d_add_nn_relu_78] Trial #49: GFLOPs: 507.8611. Time: 28.5528 us. Best GFLOPs: 926.5230
2024-04-29 20:30:12 [INFO] [task_scheduler.cc:131] [Task #158: fused_nn_conv2d_add_nn_relu_78] Trial #50: GFLOPs: 4.1597. Time: 3486.0137 us. Best GFLOPs: 926.5230
2024-04-29 20:30:12 [INFO] [task_scheduler.cc:131] [Task #158: fused_nn_conv2d_add_nn_relu_78] Trial #51: GFLOPs: 184.3162. Time: 78.6739 us. Best GFLOPs: 926.5230
2024-04-29 20:30:12 [INFO] [task_scheduler.cc:131] [Task #158: fused_nn_conv2d_add_nn_relu_78] Trial #52: GFLOPs: 67.0046. Time: 216.4160 us. Best GFLOPs: 926.5230
2024-04-29 20:30:12 [INFO] [task_scheduler.cc:131] [Task #158: fused_nn_conv2d_add_nn_relu_78] Trial #53: GFLOPs: 657.1296. Time: 22.0670 us. Best GFLOPs: 926.5230
2024-04-29 20:30:12 [INFO] [task_scheduler.cc:131] [Task #158: fused_nn_conv2d_add_nn_relu_78] Trial #54: GFLOPs: 236.0135. Time: 61.4408 us. Best GFLOPs: 926.5230
2024-04-29 20:30:12 [INFO] [task_scheduler.cc:131] [Task #158: fused_nn_conv2d_add_nn_relu_78] Trial #55: GFLOPs: 102.4970. Time: 141.4759 us. Best GFLOPs: 926.5230
2024-04-29 20:30:12 [INFO] [task_scheduler.cc:131] [Task #158: fused_nn_conv2d_add_nn_relu_78] Trial #56: GFLOPs: 29.4202. Time: 492.8874 us. Best GFLOPs: 926.5230
2024-04-29 20:30:12 [INFO] [task_scheduler.cc:131] [Task #158: fused_nn_conv2d_add_nn_relu_78] Trial #57: GFLOPs: 380.8814. Time: 38.0719 us. Best GFLOPs: 926.5230
2024-04-29 20:30:12 [INFO] [task_scheduler.cc:131] [Task #158: fused_nn_conv2d_add_nn_relu_78] Trial #58: GFLOPs: 51.1450. Time: 283.5243 us. Best GFLOPs: 926.5230
2024-04-29 20:30:12 [INFO] [task_scheduler.cc:131] [Task #158: fused_nn_conv2d_add_nn_relu_78] Trial #59: GFLOPs: 40.7191. Time: 356.1194 us. Best GFLOPs: 926.5230
2024-04-29 20:30:12 [INFO] [task_scheduler.cc:131] [Task #158: fused_nn_conv2d_add_nn_relu_78] Trial #60: GFLOPs: 521.0669. Time: 27.8292 us. Best GFLOPs: 926.5230
2024-04-29 20:30:12 [INFO] [task_scheduler.cc:131] [Task #158: fused_nn_conv2d_add_nn_relu_78] Trial #61: GFLOPs: 754.8909. Time: 19.2092 us. Best GFLOPs: 926.5230
2024-04-29 20:30:12 [INFO] [task_scheduler.cc:131] [Task #158: fused_nn_conv2d_add_nn_relu_78] Trial #62: GFLOPs: 374.0492. Time: 38.7673 us. Best GFLOPs: 926.5230
2024-04-29 20:30:12 [INFO] [task_scheduler.cc:131] [Task #158: fused_nn_conv2d_add_nn_relu_78] Trial #63: GFLOPs: 47.1523. Time: 307.5328 us. Best GFLOPs: 926.5230
2024-04-29 20:30:12 [INFO] [task_scheduler.cc:131] [Task #158: fused_nn_conv2d_add_nn_relu_78] Trial #64: GFLOPs: 12.7578. Time: 1136.6283 us. Best GFLOPs: 926.5230
2024-05-01 15:05:59 [INFO] [task_scheduler.cc:160] Initializing Task #158: "fused_nn_conv2d_add_nn_relu_78"
2024-05-01 15:05:59 [INFO] [task_scheduler.cc:35] 
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(288), T.int64(14), T.int64(14)), "float32"), p1: T.Buffer((T.int64(128), T.int64(288), T.int64(1), T.int64(1)), "float32"), p2: T.Buffer((T.int64(1), T.int64(128), T.int64(1), T.int64(1)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(128), T.int64(14), T.int64(14)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        pad_temp = T.alloc_buffer((T.int64(1), T.int64(288), T.int64(14), T.int64(14)))
        conv2d_nchw = T.alloc_buffer((T.int64(1), T.int64(128), T.int64(14), T.int64(14)))
        T_add = T.alloc_buffer((T.int64(1), T.int64(128), T.int64(14), T.int64(14)))
        for i0, i1, i2, i3 in T.grid(T.int64(1), T.int64(288), T.int64(14), T.int64(14)):
            with T.block("pad_temp"):
                v_i0, v_i1, v_i2, v_i3 = T.axis.remap("SSSS", [i0, i1, i2, i3])
                T.reads(p0[v_i0, v_i1, v_i2, v_i3])
                T.writes(pad_temp[v_i0, v_i1, v_i2, v_i3])
                pad_temp[v_i0, v_i1, v_i2, v_i3] = p0[v_i0, v_i1, v_i2, v_i3]
        for nn, ff, yy, xx, rc, ry, rx in T.grid(T.int64(1), T.int64(128), T.int64(14), T.int64(14), T.int64(288), T.int64(1), T.int64(1)):
            with T.block("conv2d_nchw"):
                v_nn, v_ff, v_yy, v_xx, v_rc, v_ry, v_rx = T.axis.remap("SSSSRRR", [nn, ff, yy, xx, rc, ry, rx])
                T.reads(pad_temp[v_nn, v_rc, v_yy + v_ry, v_xx + v_rx], p1[v_ff, v_rc, v_ry, v_rx])
                T.writes(conv2d_nchw[v_nn, v_ff, v_yy, v_xx])
                with T.init():
                    conv2d_nchw[v_nn, v_ff, v_yy, v_xx] = T.float32(0)
                conv2d_nchw[v_nn, v_ff, v_yy, v_xx] = conv2d_nchw[v_nn, v_ff, v_yy, v_xx] + pad_temp[v_nn, v_rc, v_yy + v_ry, v_xx + v_rx] * p1[v_ff, v_rc, v_ry, v_rx]
        for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(128), T.int64(14), T.int64(14)):
            with T.block("T_add"):
                v_ax0, v_ax1, v_ax2, v_ax3 = T.axis.remap("SSSS", [ax0, ax1, ax2, ax3])
                T.reads(conv2d_nchw[v_ax0, v_ax1, v_ax2, v_ax3], p2[v_ax0, v_ax1, T.int64(0), T.int64(0)])
                T.writes(T_add[v_ax0, v_ax1, v_ax2, v_ax3])
                T_add[v_ax0, v_ax1, v_ax2, v_ax3] = conv2d_nchw[v_ax0, v_ax1, v_ax2, v_ax3] + p2[v_ax0, v_ax1, T.int64(0), T.int64(0)]
        for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(128), T.int64(14), T.int64(14)):
            with T.block("T_relu"):
                v_ax0, v_ax1, v_ax2, v_ax3 = T.axis.remap("SSSS", [ax0, ax1, ax2, ax3])
                T.reads(T_add[v_ax0, v_ax1, v_ax2, v_ax3])
                T.writes(T_relu[v_ax0, v_ax1, v_ax2, v_ax3])
                T_relu[v_ax0, v_ax1, v_ax2, v_ax3] = T.max(T_add[v_ax0, v_ax1, v_ax2, v_ax3], T.float32(0))
2024-05-01 15:05:59 [INFO] [task_scheduler.cc:164] Total 3 design space(s) generated
2024-05-01 15:05:59 [INFO] [task_scheduler.cc:170] Design space #0:
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(288), T.int64(14), T.int64(14)), "float32"), p1: T.Buffer((T.int64(128), T.int64(288), T.int64(1), T.int64(1)), "float32"), p2: T.Buffer((T.int64(1), T.int64(128), T.int64(1), T.int64(1)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(128), T.int64(14), T.int64(14)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        with T.block("root"):
            T.reads()
            T.writes()
            T.block_attr({"meta_schedule.unroll_explicit": 512})
            conv2d_nchw_local = T.alloc_buffer((T.int64(1), T.int64(128), T.int64(14), T.int64(14)), scope="local")
            pad_temp_shared = T.alloc_buffer((T.int64(1), T.int64(288), T.int64(14), T.int64(14)), scope="shared")
            p1_shared = T.alloc_buffer((T.int64(128), T.int64(288), T.int64(1), T.int64(1)), scope="shared")
            for nn_0_ff_0_yy_0_xx_0_fused in T.thread_binding(T.int64(56), thread="blockIdx.x"):
                for nn_1_ff_1_yy_1_xx_1_fused in T.thread_binding(T.int64(1), thread="vthread.x"):
                    for nn_2_ff_2_yy_2_xx_2_fused in T.thread_binding(T.int64(2), thread="threadIdx.x"):
                        for rc_0, ry_0, rx_0 in T.grid(T.int64(6), T.int64(1), T.int64(1)):
                            for ax0_ax1_ax2_ax3_fused in range(T.int64(1344)):
                                with T.block("pad_temp_shared"):
                                    v0 = T.axis.spatial(T.int64(1), T.int64(0))
                                    v1 = T.axis.spatial(T.int64(288), rc_0 * T.int64(48) + ax0_ax1_ax2_ax3_fused // T.int64(28))
                                    v2 = T.axis.spatial(T.int64(14), ax0_ax1_ax2_ax3_fused % T.int64(28) // T.int64(2))
                                    v3 = T.axis.spatial(T.int64(14), nn_0_ff_0_yy_0_xx_0_fused % T.int64(7) * T.int64(2) + ax0_ax1_ax2_ax3_fused % T.int64(2))
                                    T.reads(p0[v0, v1, v2, v3])
                                    T.writes(pad_temp_shared[v0, v1, v2, v3])
                                    T.block_attr({"meta_schedule.cooperative_fetch": 2})
                                    pad_temp_shared[v0, v1, v2, v3] = p0[v0, v1, v2, v3]
                            for ax0_ax1_ax2_ax3_fused in range(T.int64(768)):
                                with T.block("p1_shared"):
                                    v0 = T.axis.spatial(T.int64(128), nn_0_ff_0_yy_0_xx_0_fused // T.int64(7) * T.int64(16) + ax0_ax1_ax2_ax3_fused // T.int64(48))
                                    v1 = T.axis.spatial(T.int64(288), rc_0 * T.int64(48) + ax0_ax1_ax2_ax3_fused % T.int64(48))
                                    v2 = T.axis.spatial(T.int64(1), T.int64(0))
                                    v3 = T.axis.spatial(T.int64(1), T.int64(0))
                                    T.reads(p1[v0, v1, v2, v3])
                                    T.writes(p1_shared[v0, v1, v2, v3])
                                    T.block_attr({"meta_schedule.cooperative_fetch": 2})
                                    p1_shared[v0, v1, v2, v3] = p1[v0, v1, v2, v3]
                            for rc_1, ry_1, rx_1, nn_3, ff_3, yy_3, xx_3, rc_2, ry_2, rx_2, nn_4, ff_4, yy_4, xx_4 in T.grid(T.int64(4), T.int64(1), T.int64(1), T.int64(1), T.int64(8), T.int64(2), T.int64(1), T.int64(12), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(7), T.int64(2)):
                                with T.block("conv2d_nchw"):
                                    v_nn = T.axis.spatial(T.int64(1), nn_3 + nn_4)
                                    v_ff = T.axis.spatial(T.int64(128), nn_0_ff_0_yy_0_xx_0_fused // T.int64(7) * T.int64(16) + nn_2_ff_2_yy_2_xx_2_fused * T.int64(8) + ff_3 + ff_4)
                                    v_yy = T.axis.spatial(T.int64(14), yy_3 * T.int64(7) + yy_4)
                                    v_xx = T.axis.spatial(T.int64(14), nn_0_ff_0_yy_0_xx_0_fused % T.int64(7) * T.int64(2) + xx_3 * T.int64(2) + xx_4)
                                    v_rc = T.axis.reduce(T.int64(288), rc_0 * T.int64(48) + rc_1 * T.int64(12) + rc_2)
                                    v_ry = T.axis.reduce(T.int64(1), ry_0 + ry_1 + ry_2)
                                    v_rx = T.axis.reduce(T.int64(1), rx_0 + rx_1 + rx_2)
                                    T.reads(pad_temp_shared[v_nn, v_rc, v_yy + v_ry, v_xx + v_rx], p1_shared[v_ff, v_rc, v_ry, v_rx])
                                    T.writes(conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx])
                                    T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 32, "meta_schedule.tiling_structure": "SSSRRSRS"})
                                    with T.init():
                                        conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx] = T.float32(0)
                                    conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx] = conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx] + pad_temp_shared[v_nn, v_rc, v_yy + v_ry, v_xx + v_rx] * p1_shared[v_ff, v_rc, v_ry, v_rx]
                        for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(8), T.int64(14), T.int64(2)):
                            with T.block("conv2d_nchw_local"):
                                v0 = T.axis.spatial(T.int64(1), ax0)
                                v1 = T.axis.spatial(T.int64(128), nn_0_ff_0_yy_0_xx_0_fused // T.int64(7) * T.int64(16) + nn_2_ff_2_yy_2_xx_2_fused * T.int64(8) + ax1)
                                v2 = T.axis.spatial(T.int64(14), ax2)
                                v3 = T.axis.spatial(T.int64(14), nn_0_ff_0_yy_0_xx_0_fused % T.int64(7) * T.int64(2) + ax3)
                                T.reads(conv2d_nchw_local[v0, v1, v2, v3], p2[v0, v1, T.int64(0), T.int64(0)])
                                T.writes(T_relu[v0, v1, v2, v3])
                                T_relu[v0, v1, v2, v3] = T.max(conv2d_nchw_local[v0, v1, v2, v3] + p2[v0, v1, T.int64(0), T.int64(0)], T.float32(0))
b0 = sch.get_block(name="pad_temp", func_name="main")
b1 = sch.get_block(name="conv2d_nchw", func_name="main")
b2 = sch.get_block(name="T_add", func_name="main")
b3 = sch.get_block(name="T_relu", func_name="main")
b4 = sch.get_block(name="root", func_name="main")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSSRRSRS")
l5, l6, l7, l8, l9, l10, l11 = sch.get_loops(block=b1)
v12, v13, v14, v15, v16 = sch.sample_perfect_tile(loop=l5, n=5, max_innermost_factor=64, decision=[1, 1, 1, 1, 1])
l17, l18, l19, l20, l21 = sch.split(loop=l5, factors=[v12, v13, v14, v15, v16], preserve_unit_iters=True)
v22, v23, v24, v25, v26 = sch.sample_perfect_tile(loop=l6, n=5, max_innermost_factor=64, decision=[8, 1, 2, 8, 1])
l27, l28, l29, l30, l31 = sch.split(loop=l6, factors=[v22, v23, v24, v25, v26], preserve_unit_iters=True)
v32, v33, v34, v35, v36 = sch.sample_perfect_tile(loop=l7, n=5, max_innermost_factor=64, decision=[1, 1, 1, 2, 7])
l37, l38, l39, l40, l41 = sch.split(loop=l7, factors=[v32, v33, v34, v35, v36], preserve_unit_iters=True)
v42, v43, v44, v45, v46 = sch.sample_perfect_tile(loop=l8, n=5, max_innermost_factor=64, decision=[7, 1, 1, 1, 2])
l47, l48, l49, l50, l51 = sch.split(loop=l8, factors=[v42, v43, v44, v45, v46], preserve_unit_iters=True)
v52, v53, v54 = sch.sample_perfect_tile(loop=l9, n=3, max_innermost_factor=64, decision=[6, 4, 12])
l55, l56, l57 = sch.split(loop=l9, factors=[v52, v53, v54], preserve_unit_iters=True)
v58, v59, v60 = sch.sample_perfect_tile(loop=l10, n=3, max_innermost_factor=64, decision=[1, 1, 1])
l61, l62, l63 = sch.split(loop=l10, factors=[v58, v59, v60], preserve_unit_iters=True)
v64, v65, v66 = sch.sample_perfect_tile(loop=l11, n=3, max_innermost_factor=64, decision=[1, 1, 1])
l67, l68, l69 = sch.split(loop=l11, factors=[v64, v65, v66], preserve_unit_iters=True)
sch.reorder(l17, l27, l37, l47, l18, l28, l38, l48, l19, l29, l39, l49, l55, l61, l67, l56, l62, l68, l20, l30, l40, l50, l57, l63, l69, l21, l31, l41, l51)
l70 = sch.fuse(l17, l27, l37, l47, preserve_unit_iters=True)
sch.bind(loop=l70, thread_axis="blockIdx.x")
l71 = sch.fuse(l18, l28, l38, l48, preserve_unit_iters=True)
sch.bind(loop=l71, thread_axis="vthread.x")
l72 = sch.fuse(l19, l29, l39, l49, preserve_unit_iters=True)
sch.bind(loop=l72, thread_axis="threadIdx.x")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_low_inclusive", ann_val=32)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_high_inclusive", ann_val=1024)
b73 = sch.cache_write(block=b1, write_buffer_index=0, storage_scope="local")
sch.reverse_compute_at(block=b73, loop=l72, preserve_unit_loops=True, index=-1)
b74 = sch.cache_read(block=b1, read_buffer_index=0, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b74, loop=l67, preserve_unit_loops=True, index=-1)
l75, l76, l77, l78, l79, l80, l81, l82, l83, l84 = sch.get_loops(block=b74)
l85 = sch.fuse(l81, l82, l83, l84, preserve_unit_iters=True)
v86 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=1)
sch.annotate(block_or_loop=b74, ann_key="meta_schedule.cooperative_fetch", ann_val=v86)
b87 = sch.cache_read(block=b1, read_buffer_index=1, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b87, loop=l67, preserve_unit_loops=True, index=-1)
l88, l89, l90, l91, l92, l93, l94, l95, l96, l97 = sch.get_loops(block=b87)
l98 = sch.fuse(l94, l95, l96, l97, preserve_unit_iters=True)
v99 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=1)
sch.annotate(block_or_loop=b87, ann_key="meta_schedule.cooperative_fetch", ann_val=v99)
sch.reverse_compute_inline(block=b3)
sch.reverse_compute_inline(block=b2)
sch.compute_inline(block=b0)
v100 = sch.sample_categorical(candidates=[0, 16, 64, 512, 1024], probs=[0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001], decision=3)
sch.annotate(block_or_loop=b4, ann_key="meta_schedule.unroll_explicit", ann_val=v100)
2024-05-01 15:05:59 [INFO] [task_scheduler.cc:170] Design space #1:
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(288), T.int64(14), T.int64(14)), "float32"), p1: T.Buffer((T.int64(128), T.int64(288), T.int64(1), T.int64(1)), "float32"), p2: T.Buffer((T.int64(1), T.int64(128), T.int64(1), T.int64(1)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(128), T.int64(14), T.int64(14)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        with T.block("root"):
            T.reads()
            T.writes()
            T.block_attr({"meta_schedule.unroll_explicit": 16})
            conv2d_nchw_local = T.alloc_buffer((T.int64(1), T.int64(128), T.int64(14), T.int64(14)), scope="local")
            pad_temp_shared = T.alloc_buffer((T.int64(1), T.int64(288), T.int64(14), T.int64(14)), scope="shared")
            p1_shared = T.alloc_buffer((T.int64(128), T.int64(288), T.int64(1), T.int64(1)), scope="shared")
            for nn_0_ff_0_yy_0_xx_0_fused in T.thread_binding(T.int64(56), thread="blockIdx.x"):
                for nn_1_ff_1_yy_1_xx_1_fused in T.thread_binding(T.int64(1), thread="vthread.x"):
                    for nn_2_ff_2_yy_2_xx_2_fused in T.thread_binding(T.int64(2), thread="threadIdx.x"):
                        for rc_0_ry_0_rx_0_fused in T.serial(T.int64(6), annotations={"software_pipeline_async_stages": [0], "software_pipeline_order": [0, 1, 2], "software_pipeline_stage": [0, 0, 2]}):
                            for ax0_ax1_ax2_ax3_fused in range(T.int64(1344)):
                                with T.block("pad_temp_shared"):
                                    v0 = T.axis.spatial(T.int64(1), T.int64(0))
                                    v1 = T.axis.spatial(T.int64(288), rc_0_ry_0_rx_0_fused * T.int64(48) + ax0_ax1_ax2_ax3_fused // T.int64(28))
                                    v2 = T.axis.spatial(T.int64(14), ax0_ax1_ax2_ax3_fused % T.int64(28) // T.int64(2))
                                    v3 = T.axis.spatial(T.int64(14), nn_0_ff_0_yy_0_xx_0_fused % T.int64(7) * T.int64(2) + ax0_ax1_ax2_ax3_fused % T.int64(2))
                                    T.reads(p0[v0, v1, v2, v3])
                                    T.writes(pad_temp_shared[v0, v1, v2, v3])
                                    T.block_attr({"meta_schedule.cooperative_fetch": 2})
                                    pad_temp_shared[v0, v1, v2, v3] = p0[v0, v1, v2, v3]
                            for ax0_ax1_ax2_ax3_fused in range(T.int64(768)):
                                with T.block("p1_shared"):
                                    v0 = T.axis.spatial(T.int64(128), nn_0_ff_0_yy_0_xx_0_fused // T.int64(7) * T.int64(16) + ax0_ax1_ax2_ax3_fused // T.int64(48))
                                    v1 = T.axis.spatial(T.int64(288), rc_0_ry_0_rx_0_fused * T.int64(48) + ax0_ax1_ax2_ax3_fused % T.int64(48))
                                    v2 = T.axis.spatial(T.int64(1), T.int64(0))
                                    v3 = T.axis.spatial(T.int64(1), T.int64(0))
                                    T.reads(p1[v0, v1, v2, v3])
                                    T.writes(p1_shared[v0, v1, v2, v3])
                                    T.block_attr({"meta_schedule.cooperative_fetch": 2})
                                    p1_shared[v0, v1, v2, v3] = p1[v0, v1, v2, v3]
                            for rc_1, ry_1, rx_1, nn_3, ff_3, yy_3, xx_3, rc_2, ry_2, rx_2, nn_4, ff_4, yy_4, xx_4 in T.grid(T.int64(4), T.int64(1), T.int64(1), T.int64(1), T.int64(8), T.int64(2), T.int64(1), T.int64(12), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(7), T.int64(2)):
                                with T.block("conv2d_nchw"):
                                    v_nn = T.axis.spatial(T.int64(1), nn_3 + nn_4)
                                    v_ff = T.axis.spatial(T.int64(128), nn_0_ff_0_yy_0_xx_0_fused // T.int64(7) * T.int64(16) + nn_2_ff_2_yy_2_xx_2_fused * T.int64(8) + ff_3 + ff_4)
                                    v_yy = T.axis.spatial(T.int64(14), yy_3 * T.int64(7) + yy_4)
                                    v_xx = T.axis.spatial(T.int64(14), nn_0_ff_0_yy_0_xx_0_fused % T.int64(7) * T.int64(2) + xx_3 * T.int64(2) + xx_4)
                                    v_rc = T.axis.reduce(T.int64(288), rc_0_ry_0_rx_0_fused * T.int64(48) + rc_1 * T.int64(12) + rc_2)
                                    v_ry = T.axis.reduce(T.int64(1), ry_1 + ry_2)
                                    v_rx = T.axis.reduce(T.int64(1), rx_1 + rx_2)
                                    T.reads(pad_temp_shared[v_nn, v_rc, v_yy + v_ry, v_xx + v_rx], p1_shared[v_ff, v_rc, v_ry, v_rx])
                                    T.writes(conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx])
                                    T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 32, "meta_schedule.tiling_structure": "SSSRRSRS"})
                                    with T.init():
                                        conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx] = T.float32(0)
                                    conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx] = conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx] + pad_temp_shared[v_nn, v_rc, v_yy + v_ry, v_xx + v_rx] * p1_shared[v_ff, v_rc, v_ry, v_rx]
                        for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(8), T.int64(14), T.int64(2)):
                            with T.block("conv2d_nchw_local"):
                                v0 = T.axis.spatial(T.int64(1), ax0)
                                v1 = T.axis.spatial(T.int64(128), nn_0_ff_0_yy_0_xx_0_fused // T.int64(7) * T.int64(16) + nn_2_ff_2_yy_2_xx_2_fused * T.int64(8) + ax1)
                                v2 = T.axis.spatial(T.int64(14), ax2)
                                v3 = T.axis.spatial(T.int64(14), nn_0_ff_0_yy_0_xx_0_fused % T.int64(7) * T.int64(2) + ax3)
                                T.reads(conv2d_nchw_local[v0, v1, v2, v3], p2[v0, v1, T.int64(0), T.int64(0)])
                                T.writes(T_relu[v0, v1, v2, v3])
                                T_relu[v0, v1, v2, v3] = T.max(conv2d_nchw_local[v0, v1, v2, v3] + p2[v0, v1, T.int64(0), T.int64(0)], T.float32(0))
b0 = sch.get_block(name="pad_temp", func_name="main")
b1 = sch.get_block(name="conv2d_nchw", func_name="main")
b2 = sch.get_block(name="T_add", func_name="main")
b3 = sch.get_block(name="T_relu", func_name="main")
b4 = sch.get_block(name="root", func_name="main")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSSRRSRS")
l5, l6, l7, l8, l9, l10, l11 = sch.get_loops(block=b1)
v12, v13, v14, v15, v16 = sch.sample_perfect_tile(loop=l5, n=5, max_innermost_factor=64, decision=[1, 1, 1, 1, 1])
l17, l18, l19, l20, l21 = sch.split(loop=l5, factors=[v12, v13, v14, v15, v16], preserve_unit_iters=True)
v22, v23, v24, v25, v26 = sch.sample_perfect_tile(loop=l6, n=5, max_innermost_factor=64, decision=[8, 1, 2, 8, 1])
l27, l28, l29, l30, l31 = sch.split(loop=l6, factors=[v22, v23, v24, v25, v26], preserve_unit_iters=True)
v32, v33, v34, v35, v36 = sch.sample_perfect_tile(loop=l7, n=5, max_innermost_factor=64, decision=[1, 1, 1, 2, 7])
l37, l38, l39, l40, l41 = sch.split(loop=l7, factors=[v32, v33, v34, v35, v36], preserve_unit_iters=True)
v42, v43, v44, v45, v46 = sch.sample_perfect_tile(loop=l8, n=5, max_innermost_factor=64, decision=[7, 1, 1, 1, 2])
l47, l48, l49, l50, l51 = sch.split(loop=l8, factors=[v42, v43, v44, v45, v46], preserve_unit_iters=True)
v52, v53, v54 = sch.sample_perfect_tile(loop=l9, n=3, max_innermost_factor=64, decision=[6, 4, 12])
l55, l56, l57 = sch.split(loop=l9, factors=[v52, v53, v54], preserve_unit_iters=True)
v58, v59, v60 = sch.sample_perfect_tile(loop=l10, n=3, max_innermost_factor=64, decision=[1, 1, 1])
l61, l62, l63 = sch.split(loop=l10, factors=[v58, v59, v60], preserve_unit_iters=True)
v64, v65, v66 = sch.sample_perfect_tile(loop=l11, n=3, max_innermost_factor=64, decision=[1, 1, 1])
l67, l68, l69 = sch.split(loop=l11, factors=[v64, v65, v66], preserve_unit_iters=True)
sch.reorder(l17, l27, l37, l47, l18, l28, l38, l48, l19, l29, l39, l49, l55, l61, l67, l56, l62, l68, l20, l30, l40, l50, l57, l63, l69, l21, l31, l41, l51)
l70 = sch.fuse(l17, l27, l37, l47, preserve_unit_iters=True)
sch.bind(loop=l70, thread_axis="blockIdx.x")
l71 = sch.fuse(l18, l28, l38, l48, preserve_unit_iters=True)
sch.bind(loop=l71, thread_axis="vthread.x")
l72 = sch.fuse(l19, l29, l39, l49, preserve_unit_iters=True)
sch.bind(loop=l72, thread_axis="threadIdx.x")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_low_inclusive", ann_val=32)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_high_inclusive", ann_val=1024)
b73 = sch.cache_write(block=b1, write_buffer_index=0, storage_scope="local")
sch.reverse_compute_at(block=b73, loop=l72, preserve_unit_loops=True, index=-1)
b74 = sch.cache_read(block=b1, read_buffer_index=0, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b74, loop=l67, preserve_unit_loops=True, index=-1)
l75, l76, l77, l78, l79, l80, l81, l82, l83, l84 = sch.get_loops(block=b74)
l85 = sch.fuse(l81, l82, l83, l84, preserve_unit_iters=True)
v86 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=1)
sch.annotate(block_or_loop=b74, ann_key="meta_schedule.cooperative_fetch", ann_val=v86)
b87 = sch.cache_read(block=b1, read_buffer_index=1, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b87, loop=l67, preserve_unit_loops=True, index=-1)
l88, l89, l90, l91, l92, l93, l94, l95, l96, l97 = sch.get_loops(block=b87)
l98 = sch.fuse(l94, l95, l96, l97, preserve_unit_iters=True)
v99 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=1)
sch.annotate(block_or_loop=b87, ann_key="meta_schedule.cooperative_fetch", ann_val=v99)
l100 = sch.fuse(l55, l61, l67, preserve_unit_iters=True)
sch.annotate(block_or_loop=l100, ann_key="software_pipeline_stage", ann_val=[0, 0, 2])
sch.annotate(block_or_loop=l100, ann_key="software_pipeline_order", ann_val=[0, 1, 2])
sch.annotate(block_or_loop=l100, ann_key="software_pipeline_async_stages", ann_val=[0])
sch.reverse_compute_inline(block=b3)
sch.reverse_compute_inline(block=b2)
sch.compute_inline(block=b0)
v101 = sch.sample_categorical(candidates=[0, 16, 64, 512, 1024], probs=[0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001], decision=1)
sch.annotate(block_or_loop=b4, ann_key="meta_schedule.unroll_explicit", ann_val=v101)
2024-05-01 15:05:59 [INFO] [task_scheduler.cc:170] Design space #2:
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(288), T.int64(14), T.int64(14)), "float32"), p1: T.Buffer((T.int64(128), T.int64(288), T.int64(1), T.int64(1)), "float32"), p2: T.Buffer((T.int64(1), T.int64(128), T.int64(1), T.int64(1)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(128), T.int64(14), T.int64(14)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        with T.block("root"):
            T.reads()
            T.writes()
            T.block_attr({"meta_schedule.unroll_explicit": 512})
            conv2d_nchw_local = T.alloc_buffer((T.int64(1), T.int64(128), T.int64(14), T.int64(14)), scope="local")
            pad_temp_shared = T.alloc_buffer((T.int64(1), T.int64(288), T.int64(14), T.int64(14)), scope="shared")
            p1_shared = T.alloc_buffer((T.int64(128), T.int64(288), T.int64(1), T.int64(1)), scope="shared")
            for nn_0_ff_0_yy_0_xx_0_fused in T.thread_binding(T.int64(56), thread="blockIdx.x"):
                for nn_1_ff_1_yy_1_xx_1_fused in T.thread_binding(T.int64(1), thread="vthread.x"):
                    for nn_2_ff_2_yy_2_xx_2_fused in T.thread_binding(T.int64(2), thread="threadIdx.x"):
                        for rc_0_ry_0_rx_0_fused in T.serial(T.int64(6), annotations={"software_pipeline_async_stages": [0], "software_pipeline_order": [0, 1, 2], "software_pipeline_stage": [0, 0, 3]}):
                            for ax0_ax1_ax2_ax3_fused in range(T.int64(1344)):
                                with T.block("pad_temp_shared"):
                                    v0 = T.axis.spatial(T.int64(1), T.int64(0))
                                    v1 = T.axis.spatial(T.int64(288), rc_0_ry_0_rx_0_fused * T.int64(48) + ax0_ax1_ax2_ax3_fused // T.int64(28))
                                    v2 = T.axis.spatial(T.int64(14), ax0_ax1_ax2_ax3_fused % T.int64(28) // T.int64(2))
                                    v3 = T.axis.spatial(T.int64(14), nn_0_ff_0_yy_0_xx_0_fused % T.int64(7) * T.int64(2) + ax0_ax1_ax2_ax3_fused % T.int64(2))
                                    T.reads(p0[v0, v1, v2, v3])
                                    T.writes(pad_temp_shared[v0, v1, v2, v3])
                                    T.block_attr({"meta_schedule.cooperative_fetch": 2})
                                    pad_temp_shared[v0, v1, v2, v3] = p0[v0, v1, v2, v3]
                            for ax0_ax1_ax2_ax3_fused in range(T.int64(768)):
                                with T.block("p1_shared"):
                                    v0 = T.axis.spatial(T.int64(128), nn_0_ff_0_yy_0_xx_0_fused // T.int64(7) * T.int64(16) + ax0_ax1_ax2_ax3_fused // T.int64(48))
                                    v1 = T.axis.spatial(T.int64(288), rc_0_ry_0_rx_0_fused * T.int64(48) + ax0_ax1_ax2_ax3_fused % T.int64(48))
                                    v2 = T.axis.spatial(T.int64(1), T.int64(0))
                                    v3 = T.axis.spatial(T.int64(1), T.int64(0))
                                    T.reads(p1[v0, v1, v2, v3])
                                    T.writes(p1_shared[v0, v1, v2, v3])
                                    T.block_attr({"meta_schedule.cooperative_fetch": 2})
                                    p1_shared[v0, v1, v2, v3] = p1[v0, v1, v2, v3]
                            for rc_1, ry_1, rx_1, nn_3, ff_3, yy_3, xx_3, rc_2, ry_2, rx_2, nn_4, ff_4, yy_4, xx_4 in T.grid(T.int64(4), T.int64(1), T.int64(1), T.int64(1), T.int64(8), T.int64(2), T.int64(1), T.int64(12), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(7), T.int64(2)):
                                with T.block("conv2d_nchw"):
                                    v_nn = T.axis.spatial(T.int64(1), nn_3 + nn_4)
                                    v_ff = T.axis.spatial(T.int64(128), nn_0_ff_0_yy_0_xx_0_fused // T.int64(7) * T.int64(16) + nn_2_ff_2_yy_2_xx_2_fused * T.int64(8) + ff_3 + ff_4)
                                    v_yy = T.axis.spatial(T.int64(14), yy_3 * T.int64(7) + yy_4)
                                    v_xx = T.axis.spatial(T.int64(14), nn_0_ff_0_yy_0_xx_0_fused % T.int64(7) * T.int64(2) + xx_3 * T.int64(2) + xx_4)
                                    v_rc = T.axis.reduce(T.int64(288), rc_0_ry_0_rx_0_fused * T.int64(48) + rc_1 * T.int64(12) + rc_2)
                                    v_ry = T.axis.reduce(T.int64(1), ry_1 + ry_2)
                                    v_rx = T.axis.reduce(T.int64(1), rx_1 + rx_2)
                                    T.reads(pad_temp_shared[v_nn, v_rc, v_yy + v_ry, v_xx + v_rx], p1_shared[v_ff, v_rc, v_ry, v_rx])
                                    T.writes(conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx])
                                    T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 32, "meta_schedule.tiling_structure": "SSSRRSRS"})
                                    with T.init():
                                        conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx] = T.float32(0)
                                    conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx] = conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx] + pad_temp_shared[v_nn, v_rc, v_yy + v_ry, v_xx + v_rx] * p1_shared[v_ff, v_rc, v_ry, v_rx]
                        for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(8), T.int64(14), T.int64(2)):
                            with T.block("conv2d_nchw_local"):
                                v0 = T.axis.spatial(T.int64(1), ax0)
                                v1 = T.axis.spatial(T.int64(128), nn_0_ff_0_yy_0_xx_0_fused // T.int64(7) * T.int64(16) + nn_2_ff_2_yy_2_xx_2_fused * T.int64(8) + ax1)
                                v2 = T.axis.spatial(T.int64(14), ax2)
                                v3 = T.axis.spatial(T.int64(14), nn_0_ff_0_yy_0_xx_0_fused % T.int64(7) * T.int64(2) + ax3)
                                T.reads(conv2d_nchw_local[v0, v1, v2, v3], p2[v0, v1, T.int64(0), T.int64(0)])
                                T.writes(T_relu[v0, v1, v2, v3])
                                T_relu[v0, v1, v2, v3] = T.max(conv2d_nchw_local[v0, v1, v2, v3] + p2[v0, v1, T.int64(0), T.int64(0)], T.float32(0))
b0 = sch.get_block(name="pad_temp", func_name="main")
b1 = sch.get_block(name="conv2d_nchw", func_name="main")
b2 = sch.get_block(name="T_add", func_name="main")
b3 = sch.get_block(name="T_relu", func_name="main")
b4 = sch.get_block(name="root", func_name="main")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSSRRSRS")
l5, l6, l7, l8, l9, l10, l11 = sch.get_loops(block=b1)
v12, v13, v14, v15, v16 = sch.sample_perfect_tile(loop=l5, n=5, max_innermost_factor=64, decision=[1, 1, 1, 1, 1])
l17, l18, l19, l20, l21 = sch.split(loop=l5, factors=[v12, v13, v14, v15, v16], preserve_unit_iters=True)
v22, v23, v24, v25, v26 = sch.sample_perfect_tile(loop=l6, n=5, max_innermost_factor=64, decision=[8, 1, 2, 8, 1])
l27, l28, l29, l30, l31 = sch.split(loop=l6, factors=[v22, v23, v24, v25, v26], preserve_unit_iters=True)
v32, v33, v34, v35, v36 = sch.sample_perfect_tile(loop=l7, n=5, max_innermost_factor=64, decision=[1, 1, 1, 2, 7])
l37, l38, l39, l40, l41 = sch.split(loop=l7, factors=[v32, v33, v34, v35, v36], preserve_unit_iters=True)
v42, v43, v44, v45, v46 = sch.sample_perfect_tile(loop=l8, n=5, max_innermost_factor=64, decision=[7, 1, 1, 1, 2])
l47, l48, l49, l50, l51 = sch.split(loop=l8, factors=[v42, v43, v44, v45, v46], preserve_unit_iters=True)
v52, v53, v54 = sch.sample_perfect_tile(loop=l9, n=3, max_innermost_factor=64, decision=[6, 4, 12])
l55, l56, l57 = sch.split(loop=l9, factors=[v52, v53, v54], preserve_unit_iters=True)
v58, v59, v60 = sch.sample_perfect_tile(loop=l10, n=3, max_innermost_factor=64, decision=[1, 1, 1])
l61, l62, l63 = sch.split(loop=l10, factors=[v58, v59, v60], preserve_unit_iters=True)
v64, v65, v66 = sch.sample_perfect_tile(loop=l11, n=3, max_innermost_factor=64, decision=[1, 1, 1])
l67, l68, l69 = sch.split(loop=l11, factors=[v64, v65, v66], preserve_unit_iters=True)
sch.reorder(l17, l27, l37, l47, l18, l28, l38, l48, l19, l29, l39, l49, l55, l61, l67, l56, l62, l68, l20, l30, l40, l50, l57, l63, l69, l21, l31, l41, l51)
l70 = sch.fuse(l17, l27, l37, l47, preserve_unit_iters=True)
sch.bind(loop=l70, thread_axis="blockIdx.x")
l71 = sch.fuse(l18, l28, l38, l48, preserve_unit_iters=True)
sch.bind(loop=l71, thread_axis="vthread.x")
l72 = sch.fuse(l19, l29, l39, l49, preserve_unit_iters=True)
sch.bind(loop=l72, thread_axis="threadIdx.x")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_low_inclusive", ann_val=32)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_high_inclusive", ann_val=1024)
b73 = sch.cache_write(block=b1, write_buffer_index=0, storage_scope="local")
sch.reverse_compute_at(block=b73, loop=l72, preserve_unit_loops=True, index=-1)
b74 = sch.cache_read(block=b1, read_buffer_index=0, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b74, loop=l67, preserve_unit_loops=True, index=-1)
l75, l76, l77, l78, l79, l80, l81, l82, l83, l84 = sch.get_loops(block=b74)
l85 = sch.fuse(l81, l82, l83, l84, preserve_unit_iters=True)
v86 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=1)
sch.annotate(block_or_loop=b74, ann_key="meta_schedule.cooperative_fetch", ann_val=v86)
b87 = sch.cache_read(block=b1, read_buffer_index=1, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b87, loop=l67, preserve_unit_loops=True, index=-1)
l88, l89, l90, l91, l92, l93, l94, l95, l96, l97 = sch.get_loops(block=b87)
l98 = sch.fuse(l94, l95, l96, l97, preserve_unit_iters=True)
v99 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=1)
sch.annotate(block_or_loop=b87, ann_key="meta_schedule.cooperative_fetch", ann_val=v99)
l100 = sch.fuse(l55, l61, l67, preserve_unit_iters=True)
sch.annotate(block_or_loop=l100, ann_key="software_pipeline_stage", ann_val=[0, 0, 3])
sch.annotate(block_or_loop=l100, ann_key="software_pipeline_order", ann_val=[0, 1, 2])
sch.annotate(block_or_loop=l100, ann_key="software_pipeline_async_stages", ann_val=[0])
sch.reverse_compute_inline(block=b3)
sch.reverse_compute_inline(block=b2)
sch.compute_inline(block=b0)
v101 = sch.sample_categorical(candidates=[0, 16, 64, 512, 1024], probs=[0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001], decision=3)
sch.annotate(block_or_loop=b4, ann_key="meta_schedule.unroll_explicit", ann_val=v101)
2024-05-01 17:30:09 [INFO] [evolutionary_search.cc:713] Generating candidates......
2024-05-01 17:30:09 [INFO] [evolutionary_search.cc:715] Picked top 64 candidate(s) from database
2024-05-01 17:30:11 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x3e2acc8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0xddd8088)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x14cb7228)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x137d36d8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x13b792b8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x3b370c8)]: 413 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x14ce4f68)]: 0 failure(s)
2024-05-01 17:30:12 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x3e2acc8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0xddd8088)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x14cb7228)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x137d36d8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x13b792b8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x3b370c8)]: 833 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x14ce4f68)]: 0 failure(s)
2024-05-01 17:30:12 [INFO] [evolutionary_search.cc:723] Sampled 63 candidate(s)
2024-05-01 17:30:14 [INFO] [evolutionary_search.cc:621] Evolve iter #0 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x3e2acc8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0xddd8088)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x14cb7228)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x137d36d8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x13b792b8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x3b370c8)]: 85 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x14ce4f68)]: 0 failure(s)
2024-05-01 17:30:16 [INFO] [evolutionary_search.cc:621] Evolve iter #1 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x3e2acc8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0xddd8088)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x14cb7228)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x137d36d8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x13b792b8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x3b370c8)]: 98 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x14ce4f68)]: 0 failure(s)
2024-05-01 17:30:19 [INFO] [evolutionary_search.cc:621] Evolve iter #2 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x3e2acc8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0xddd8088)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x14cb7228)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x137d36d8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x13b792b8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x3b370c8)]: 68 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x14ce4f68)]: 0 failure(s)
2024-05-01 17:30:21 [INFO] [evolutionary_search.cc:621] Evolve iter #3 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x3e2acc8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0xddd8088)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x14cb7228)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x137d36d8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x13b792b8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x3b370c8)]: 73 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x14ce4f68)]: 0 failure(s)
2024-05-01 17:30:21 [INFO] [evolutionary_search.cc:649] Scores of the best 64 candidates:
[1 : 16]:	0.9996  0.9984  0.9984  0.9967  0.9960  0.9954  0.9953  0.9951  0.9949  0.9945  0.9944  0.9933  0.9925  0.9922  0.9921  0.9900
[17 : 32]:	0.9900  0.9899  0.9897  0.9890  0.9889  0.9887  0.9882  0.9874  0.9870  0.9861  0.9857  0.9844  0.9840  0.9826  0.9816  0.9811
[33 : 48]:	0.9811  0.9804  0.9800  0.9799  0.9798  0.9795  0.9794  0.9787  0.9787  0.9784  0.9782  0.9781  0.9776  0.9766  0.9762  0.9761
[49 : 64]:	0.9756  0.9755  0.9754  0.9754  0.9754  0.9752  0.9749  0.9746  0.9737  0.9732  0.9732  0.9726  0.9725  0.9725  0.9723  0.9721
2024-05-01 17:30:21 [INFO] [evolutionary_search.cc:727] Got 64 candidate(s) with evolutionary search
2024-05-01 17:30:21 [INFO] [evolutionary_search.cc:730] Sending 64 candidates(s) for measurement
2024-05-01 18:38:06 [INFO] [task_scheduler.cc:131] [Task #158: fused_nn_conv2d_add_nn_relu_78] Trial #1: GFLOPs: 15.2709. Time: 949.5765 us. Best GFLOPs: 15.2709
2024-05-01 18:38:06 [INFO] [task_scheduler.cc:131] [Task #158: fused_nn_conv2d_add_nn_relu_78] Trial #2: GFLOPs: 275.4815. Time: 52.6382 us. Best GFLOPs: 275.4815
2024-05-01 18:38:06 [INFO] [task_scheduler.cc:131] [Task #158: fused_nn_conv2d_add_nn_relu_78] Trial #3: GFLOPs: 40.1167. Time: 361.4674 us. Best GFLOPs: 275.4815
2024-05-01 18:38:06 [INFO] [task_scheduler.cc:131] [Task #158: fused_nn_conv2d_add_nn_relu_78] Trial #4: GFLOPs: 615.8152. Time: 23.5474 us. Best GFLOPs: 615.8152
2024-05-01 18:38:06 [INFO] [task_scheduler.cc:131] [Task #158: fused_nn_conv2d_add_nn_relu_78] Trial #5: GFLOPs: 646.3112. Time: 22.4363 us. Best GFLOPs: 646.3112
2024-05-01 18:38:06 [INFO] [task_scheduler.cc:131] [Task #158: fused_nn_conv2d_add_nn_relu_78] Trial #6: GFLOPs: 489.9873. Time: 29.5944 us. Best GFLOPs: 646.3112
2024-05-01 18:38:06 [INFO] [task_scheduler.cc:131] [Task #158: fused_nn_conv2d_add_nn_relu_78] Trial #7: GFLOPs: 189.5061. Time: 76.5193 us. Best GFLOPs: 646.3112
2024-05-01 18:38:06 [INFO] [task_scheduler.cc:131] [Task #158: fused_nn_conv2d_add_nn_relu_78] Trial #8: GFLOPs: 174.5848. Time: 83.0591 us. Best GFLOPs: 646.3112
2024-05-01 18:38:06 [INFO] [task_scheduler.cc:131] [Task #158: fused_nn_conv2d_add_nn_relu_78] Trial #9: GFLOPs: 235.6646. Time: 61.5318 us. Best GFLOPs: 646.3112
2024-05-01 18:38:06 [INFO] [task_scheduler.cc:131] [Task #158: fused_nn_conv2d_add_nn_relu_78] Trial #10: GFLOPs: 191.6408. Time: 75.6669 us. Best GFLOPs: 646.3112
2024-05-01 18:38:06 [INFO] [task_scheduler.cc:131] [Task #158: fused_nn_conv2d_add_nn_relu_78] Trial #11: GFLOPs: 223.6839. Time: 64.8275 us. Best GFLOPs: 646.3112
2024-05-01 18:38:06 [INFO] [task_scheduler.cc:131] [Task #158: fused_nn_conv2d_add_nn_relu_78] Trial #12: GFLOPs: 195.9447. Time: 74.0049 us. Best GFLOPs: 646.3112
2024-05-01 18:38:06 [INFO] [task_scheduler.cc:131] [Task #158: fused_nn_conv2d_add_nn_relu_78] Trial #13: GFLOPs: 235.2847. Time: 61.6311 us. Best GFLOPs: 646.3112
2024-05-01 18:38:06 [INFO] [task_scheduler.cc:131] [Task #158: fused_nn_conv2d_add_nn_relu_78] Trial #14: GFLOPs: 33.9416. Time: 427.2301 us. Best GFLOPs: 646.3112
2024-05-01 18:38:06 [INFO] [task_scheduler.cc:131] [Task #158: fused_nn_conv2d_add_nn_relu_78] Trial #15: GFLOPs: 410.8252. Time: 35.2969 us. Best GFLOPs: 646.3112
2024-05-01 18:38:06 [INFO] [task_scheduler.cc:131] [Task #158: fused_nn_conv2d_add_nn_relu_78] Trial #16: GFLOPs: 724.2088. Time: 20.0230 us. Best GFLOPs: 724.2088
2024-05-01 18:38:06 [INFO] [task_scheduler.cc:131] [Task #158: fused_nn_conv2d_add_nn_relu_78] Trial #17: GFLOPs: 358.3459. Time: 40.4661 us. Best GFLOPs: 724.2088
2024-05-01 18:38:06 [INFO] [task_scheduler.cc:131] [Task #158: fused_nn_conv2d_add_nn_relu_78] Trial #18: GFLOPs: 41.2579. Time: 351.4685 us. Best GFLOPs: 724.2088
2024-05-01 18:38:06 [INFO] [task_scheduler.cc:131] [Task #158: fused_nn_conv2d_add_nn_relu_78] Trial #19: GFLOPs: 43.3549. Time: 334.4685 us. Best GFLOPs: 724.2088
2024-05-01 18:38:06 [INFO] [task_scheduler.cc:131] [Task #158: fused_nn_conv2d_add_nn_relu_78] Trial #20: GFLOPs: 26.7706. Time: 541.6719 us. Best GFLOPs: 724.2088
2024-05-01 18:38:06 [INFO] [task_scheduler.cc:131] [Task #158: fused_nn_conv2d_add_nn_relu_78] Trial #21: GFLOPs: 15.4900. Time: 936.1465 us. Best GFLOPs: 724.2088
2024-05-01 18:38:06 [INFO] [task_scheduler.cc:131] [Task #158: fused_nn_conv2d_add_nn_relu_78] Trial #22: GFLOPs: 81.8295. Time: 177.2082 us. Best GFLOPs: 724.2088
2024-05-01 18:38:06 [INFO] [task_scheduler.cc:131] [Task #158: fused_nn_conv2d_add_nn_relu_78] Trial #23: GFLOPs: 3.3757. Time: 4295.6374 us. Best GFLOPs: 724.2088
2024-05-01 18:38:06 [INFO] [task_scheduler.cc:131] [Task #158: fused_nn_conv2d_add_nn_relu_78] Trial #24: GFLOPs: 13.7120. Time: 1057.5333 us. Best GFLOPs: 724.2088
2024-05-01 18:38:06 [INFO] [task_scheduler.cc:131] [Task #158: fused_nn_conv2d_add_nn_relu_78] Trial #25: GFLOPs: 348.2934. Time: 41.6340 us. Best GFLOPs: 724.2088
2024-05-01 18:38:06 [INFO] [task_scheduler.cc:131] [Task #158: fused_nn_conv2d_add_nn_relu_78] Trial #26: GFLOPs: 188.1593. Time: 77.0670 us. Best GFLOPs: 724.2088
2024-05-01 18:38:06 [INFO] [task_scheduler.cc:131] [Task #158: fused_nn_conv2d_add_nn_relu_78] Trial #27: GFLOPs: 179.3305. Time: 80.8611 us. Best GFLOPs: 724.2088
2024-05-01 18:38:06 [INFO] [task_scheduler.cc:131] [Task #158: fused_nn_conv2d_add_nn_relu_78] Trial #28: GFLOPs: 13.6671. Time: 1061.0041 us. Best GFLOPs: 724.2088
2024-05-01 18:38:06 [INFO] [task_scheduler.cc:131] [Task #158: fused_nn_conv2d_add_nn_relu_78] Trial #29: GFLOPs: 26.9043. Time: 538.9802 us. Best GFLOPs: 724.2088
2024-05-01 18:38:06 [INFO] [task_scheduler.cc:131] [Task #158: fused_nn_conv2d_add_nn_relu_78] Trial #30: GFLOPs: 364.1353. Time: 39.8227 us. Best GFLOPs: 724.2088
2024-05-01 18:38:06 [INFO] [task_scheduler.cc:131] [Task #158: fused_nn_conv2d_add_nn_relu_78] Trial #31: GFLOPs: 112.3767. Time: 129.0380 us. Best GFLOPs: 724.2088
2024-05-01 18:38:06 [INFO] [task_scheduler.cc:131] [Task #158: fused_nn_conv2d_add_nn_relu_78] Trial #32: GFLOPs: 21.4763. Time: 675.2016 us. Best GFLOPs: 724.2088
2024-05-01 18:38:06 [INFO] [task_scheduler.cc:131] [Task #158: fused_nn_conv2d_add_nn_relu_78] Trial #33: GFLOPs: 123.4212. Time: 117.4908 us. Best GFLOPs: 724.2088
2024-05-01 18:38:06 [INFO] [task_scheduler.cc:131] [Task #158: fused_nn_conv2d_add_nn_relu_78] Trial #34: GFLOPs: 316.2121. Time: 45.8580 us. Best GFLOPs: 724.2088
2024-05-01 18:38:06 [INFO] [task_scheduler.cc:131] [Task #158: fused_nn_conv2d_add_nn_relu_78] Trial #35: GFLOPs: 77.3089. Time: 187.5703 us. Best GFLOPs: 724.2088
2024-05-01 18:38:06 [INFO] [task_scheduler.cc:131] [Task #158: fused_nn_conv2d_add_nn_relu_78] Trial #36: GFLOPs: 566.2510. Time: 25.6085 us. Best GFLOPs: 724.2088
2024-05-01 18:38:06 [INFO] [task_scheduler.cc:131] [Task #158: fused_nn_conv2d_add_nn_relu_78] Trial #37: GFLOPs: 13.6520. Time: 1062.1777 us. Best GFLOPs: 724.2088
2024-05-01 18:38:06 [INFO] [task_scheduler.cc:131] [Task #158: fused_nn_conv2d_add_nn_relu_78] Trial #38: GFLOPs: 110.5333. Time: 131.1901 us. Best GFLOPs: 724.2088
2024-05-01 18:38:06 [INFO] [task_scheduler.cc:131] [Task #158: fused_nn_conv2d_add_nn_relu_78] Trial #39: GFLOPs: 613.7155. Time: 23.6280 us. Best GFLOPs: 724.2088
2024-05-01 18:38:06 [INFO] [task_scheduler.cc:131] [Task #158: fused_nn_conv2d_add_nn_relu_78] Trial #40: GFLOPs: 78.1400. Time: 185.5754 us. Best GFLOPs: 724.2088
2024-05-01 18:38:06 [INFO] [task_scheduler.cc:131] [Task #158: fused_nn_conv2d_add_nn_relu_78] Trial #41: GFLOPs: 326.1611. Time: 44.4592 us. Best GFLOPs: 724.2088
2024-05-01 18:38:06 [INFO] [task_scheduler.cc:131] [Task #158: fused_nn_conv2d_add_nn_relu_78] Trial #42: GFLOPs: 94.4042. Time: 153.6040 us. Best GFLOPs: 724.2088
2024-05-01 18:38:06 [INFO] [task_scheduler.cc:131] [Task #158: fused_nn_conv2d_add_nn_relu_78] Trial #43: GFLOPs: 321.2842. Time: 45.1341 us. Best GFLOPs: 724.2088
2024-05-01 18:38:06 [INFO] [task_scheduler.cc:131] [Task #158: fused_nn_conv2d_add_nn_relu_78] Trial #44: GFLOPs: 89.7660. Time: 161.5407 us. Best GFLOPs: 724.2088
2024-05-01 18:38:06 [INFO] [task_scheduler.cc:131] [Task #158: fused_nn_conv2d_add_nn_relu_78] Trial #45: GFLOPs: 97.2088. Time: 149.1724 us. Best GFLOPs: 724.2088
2024-05-01 18:38:06 [INFO] [task_scheduler.cc:131] [Task #158: fused_nn_conv2d_add_nn_relu_78] Trial #46: GFLOPs: 8.7029. Time: 1666.2170 us. Best GFLOPs: 724.2088
2024-05-01 18:38:06 [INFO] [task_scheduler.cc:131] [Task #158: fused_nn_conv2d_add_nn_relu_78] Trial #47: GFLOPs: 86.2754. Time: 168.0764 us. Best GFLOPs: 724.2088
2024-05-01 18:38:06 [INFO] [task_scheduler.cc:131] [Task #158: fused_nn_conv2d_add_nn_relu_78] Trial #48: GFLOPs: 190.9994. Time: 75.9210 us. Best GFLOPs: 724.2088
2024-05-01 18:38:06 [INFO] [task_scheduler.cc:131] [Task #158: fused_nn_conv2d_add_nn_relu_78] Trial #49: GFLOPs: 108.8566. Time: 133.2107 us. Best GFLOPs: 724.2088
2024-05-01 18:38:06 [INFO] [task_scheduler.cc:131] [Task #158: fused_nn_conv2d_add_nn_relu_78] Trial #50: GFLOPs: 311.2011. Time: 46.5964 us. Best GFLOPs: 724.2088
2024-05-01 18:38:06 [INFO] [task_scheduler.cc:131] [Task #158: fused_nn_conv2d_add_nn_relu_78] Trial #51: GFLOPs: 24.1605. Time: 600.1901 us. Best GFLOPs: 724.2088
2024-05-01 18:38:06 [INFO] [task_scheduler.cc:131] [Task #158: fused_nn_conv2d_add_nn_relu_78] Trial #52: GFLOPs: 70.8077. Time: 204.7921 us. Best GFLOPs: 724.2088
2024-05-01 18:38:06 [INFO] [task_scheduler.cc:131] [Task #158: fused_nn_conv2d_add_nn_relu_78] Trial #53: GFLOPs: 290.7495. Time: 49.8741 us. Best GFLOPs: 724.2088
2024-05-01 18:38:06 [INFO] [task_scheduler.cc:131] [Task #158: fused_nn_conv2d_add_nn_relu_78] Trial #54: GFLOPs: 142.4049. Time: 101.8284 us. Best GFLOPs: 724.2088
2024-05-01 18:38:06 [INFO] [task_scheduler.cc:131] [Task #158: fused_nn_conv2d_add_nn_relu_78] Trial #55: GFLOPs: 26.6971. Time: 543.1628 us. Best GFLOPs: 724.2088
2024-05-01 18:38:06 [INFO] [task_scheduler.cc:131] [Task #158: fused_nn_conv2d_add_nn_relu_78] Trial #56: GFLOPs: 95.6911. Time: 151.5382 us. Best GFLOPs: 724.2088
2024-05-01 18:38:06 [INFO] [task_scheduler.cc:131] [Task #158: fused_nn_conv2d_add_nn_relu_78] Trial #57: GFLOPs: 5.5456. Time: 2614.8496 us. Best GFLOPs: 724.2088
2024-05-01 18:38:06 [INFO] [task_scheduler.cc:131] [Task #158: fused_nn_conv2d_add_nn_relu_78] Trial #58: GFLOPs: 484.9443. Time: 29.9021 us. Best GFLOPs: 724.2088
2024-05-01 18:38:06 [INFO] [task_scheduler.cc:131] [Task #158: fused_nn_conv2d_add_nn_relu_78] Trial #59: GFLOPs: 242.7448. Time: 59.7371 us. Best GFLOPs: 724.2088
2024-05-01 18:38:06 [INFO] [task_scheduler.cc:131] [Task #158: fused_nn_conv2d_add_nn_relu_78] Trial #60: GFLOPs: 370.3157. Time: 39.1581 us. Best GFLOPs: 724.2088
2024-05-01 18:38:06 [INFO] [task_scheduler.cc:131] [Task #158: fused_nn_conv2d_add_nn_relu_78] Trial #61: GFLOPs: 410.6062. Time: 35.3157 us. Best GFLOPs: 724.2088
2024-05-01 18:38:06 [INFO] [task_scheduler.cc:131] [Task #158: fused_nn_conv2d_add_nn_relu_78] Trial #62: GFLOPs: 404.0175. Time: 35.8917 us. Best GFLOPs: 724.2088
2024-05-01 18:38:06 [INFO] [task_scheduler.cc:131] [Task #158: fused_nn_conv2d_add_nn_relu_78] Trial #63: GFLOPs: 52.6955. Time: 275.1823 us. Best GFLOPs: 724.2088
2024-05-01 18:38:06 [INFO] [task_scheduler.cc:131] [Task #158: fused_nn_conv2d_add_nn_relu_78] Trial #64: GFLOPs: 576.8483. Time: 25.1381 us. Best GFLOPs: 724.2088
