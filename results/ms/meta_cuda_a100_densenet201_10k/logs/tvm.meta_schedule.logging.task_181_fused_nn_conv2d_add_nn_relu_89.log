2024-04-29 16:32:27 [INFO] [task_scheduler.cc:160] Initializing Task #181: "fused_nn_conv2d_add_nn_relu_89"
2024-04-29 16:32:27 [INFO] [task_scheduler.cc:35] 
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(192), T.int64(28), T.int64(28)), "float32"), p1: T.Buffer((T.int64(128), T.int64(192), T.int64(1), T.int64(1)), "float32"), p2: T.Buffer((T.int64(1), T.int64(128), T.int64(1), T.int64(1)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(128), T.int64(28), T.int64(28)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        pad_temp = T.alloc_buffer((T.int64(1), T.int64(192), T.int64(28), T.int64(28)))
        conv2d_nchw = T.alloc_buffer((T.int64(1), T.int64(128), T.int64(28), T.int64(28)))
        T_add = T.alloc_buffer((T.int64(1), T.int64(128), T.int64(28), T.int64(28)))
        for i0, i1, i2, i3 in T.grid(T.int64(1), T.int64(192), T.int64(28), T.int64(28)):
            with T.block("pad_temp"):
                v_i0, v_i1, v_i2, v_i3 = T.axis.remap("SSSS", [i0, i1, i2, i3])
                T.reads(p0[v_i0, v_i1, v_i2, v_i3])
                T.writes(pad_temp[v_i0, v_i1, v_i2, v_i3])
                pad_temp[v_i0, v_i1, v_i2, v_i3] = p0[v_i0, v_i1, v_i2, v_i3]
        for nn, ff, yy, xx, rc, ry, rx in T.grid(T.int64(1), T.int64(128), T.int64(28), T.int64(28), T.int64(192), T.int64(1), T.int64(1)):
            with T.block("conv2d_nchw"):
                v_nn, v_ff, v_yy, v_xx, v_rc, v_ry, v_rx = T.axis.remap("SSSSRRR", [nn, ff, yy, xx, rc, ry, rx])
                T.reads(pad_temp[v_nn, v_rc, v_yy + v_ry, v_xx + v_rx], p1[v_ff, v_rc, v_ry, v_rx])
                T.writes(conv2d_nchw[v_nn, v_ff, v_yy, v_xx])
                with T.init():
                    conv2d_nchw[v_nn, v_ff, v_yy, v_xx] = T.float32(0)
                conv2d_nchw[v_nn, v_ff, v_yy, v_xx] = conv2d_nchw[v_nn, v_ff, v_yy, v_xx] + pad_temp[v_nn, v_rc, v_yy + v_ry, v_xx + v_rx] * p1[v_ff, v_rc, v_ry, v_rx]
        for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(128), T.int64(28), T.int64(28)):
            with T.block("T_add"):
                v_ax0, v_ax1, v_ax2, v_ax3 = T.axis.remap("SSSS", [ax0, ax1, ax2, ax3])
                T.reads(conv2d_nchw[v_ax0, v_ax1, v_ax2, v_ax3], p2[v_ax0, v_ax1, T.int64(0), T.int64(0)])
                T.writes(T_add[v_ax0, v_ax1, v_ax2, v_ax3])
                T_add[v_ax0, v_ax1, v_ax2, v_ax3] = conv2d_nchw[v_ax0, v_ax1, v_ax2, v_ax3] + p2[v_ax0, v_ax1, T.int64(0), T.int64(0)]
        for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(128), T.int64(28), T.int64(28)):
            with T.block("T_relu"):
                v_ax0, v_ax1, v_ax2, v_ax3 = T.axis.remap("SSSS", [ax0, ax1, ax2, ax3])
                T.reads(T_add[v_ax0, v_ax1, v_ax2, v_ax3])
                T.writes(T_relu[v_ax0, v_ax1, v_ax2, v_ax3])
                T_relu[v_ax0, v_ax1, v_ax2, v_ax3] = T.max(T_add[v_ax0, v_ax1, v_ax2, v_ax3], T.float32(0))
2024-04-29 16:32:27 [INFO] [task_scheduler.cc:164] Total 3 design space(s) generated
2024-04-29 16:32:27 [INFO] [task_scheduler.cc:170] Design space #0:
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(192), T.int64(28), T.int64(28)), "float32"), p1: T.Buffer((T.int64(128), T.int64(192), T.int64(1), T.int64(1)), "float32"), p2: T.Buffer((T.int64(1), T.int64(128), T.int64(1), T.int64(1)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(128), T.int64(28), T.int64(28)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        with T.block("root"):
            T.reads()
            T.writes()
            T.block_attr({"meta_schedule.unroll_explicit": 512})
            conv2d_nchw_local = T.alloc_buffer((T.int64(1), T.int64(128), T.int64(28), T.int64(28)), scope="local")
            pad_temp_shared = T.alloc_buffer((T.int64(1), T.int64(192), T.int64(28), T.int64(28)), scope="shared")
            p1_shared = T.alloc_buffer((T.int64(128), T.int64(192), T.int64(1), T.int64(1)), scope="shared")
            for nn_0_ff_0_yy_0_xx_0_fused in T.thread_binding(T.int64(56), thread="blockIdx.x"):
                for nn_1_ff_1_yy_1_xx_1_fused in T.thread_binding(T.int64(1), thread="vthread.x"):
                    for nn_2_ff_2_yy_2_xx_2_fused in T.thread_binding(T.int64(8), thread="threadIdx.x"):
                        for rc_0, ry_0, rx_0 in T.grid(T.int64(24), T.int64(1), T.int64(1)):
                            for ax0_ax1_ax2_ax3_fused in range(T.int64(896)):
                                with T.block("pad_temp_shared"):
                                    v0 = T.axis.spatial(T.int64(1), T.int64(0))
                                    v1 = T.axis.spatial(T.int64(192), rc_0 * T.int64(8) + ax0_ax1_ax2_ax3_fused // T.int64(112))
                                    v2 = T.axis.spatial(T.int64(28), nn_0_ff_0_yy_0_xx_0_fused % T.int64(7) * T.int64(4) + ax0_ax1_ax2_ax3_fused % T.int64(112) // T.int64(28))
                                    v3 = T.axis.spatial(T.int64(28), ax0_ax1_ax2_ax3_fused % T.int64(28))
                                    T.reads(p0[v0, v1, v2, v3])
                                    T.writes(pad_temp_shared[v0, v1, v2, v3])
                                    T.block_attr({"meta_schedule.cooperative_fetch": 2})
                                    pad_temp_shared[v0, v1, v2, v3] = p0[v0, v1, v2, v3]
                            for ax0_ax1_ax2_ax3_fused in range(T.int64(128)):
                                with T.block("p1_shared"):
                                    v0 = T.axis.spatial(T.int64(128), nn_0_ff_0_yy_0_xx_0_fused // T.int64(7) * T.int64(16) + ax0_ax1_ax2_ax3_fused // T.int64(8))
                                    v1 = T.axis.spatial(T.int64(192), rc_0 * T.int64(8) + ax0_ax1_ax2_ax3_fused % T.int64(8))
                                    v2 = T.axis.spatial(T.int64(1), T.int64(0))
                                    v3 = T.axis.spatial(T.int64(1), T.int64(0))
                                    T.reads(p1[v0, v1, v2, v3])
                                    T.writes(p1_shared[v0, v1, v2, v3])
                                    T.block_attr({"meta_schedule.cooperative_fetch": 1})
                                    p1_shared[v0, v1, v2, v3] = p1[v0, v1, v2, v3]
                            for rc_1, ry_1, rx_1, nn_3, ff_3, yy_3, xx_3, rc_2, ry_2, rx_2, nn_4, ff_4, yy_4, xx_4 in T.grid(T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(1), T.int64(7), T.int64(8), T.int64(1), T.int64(1), T.int64(1), T.int64(4), T.int64(1), T.int64(4)):
                                with T.block("conv2d_nchw"):
                                    v_nn = T.axis.spatial(T.int64(1), nn_3 + nn_4)
                                    v_ff = T.axis.spatial(T.int64(128), nn_0_ff_0_yy_0_xx_0_fused // T.int64(7) * T.int64(16) + nn_2_ff_2_yy_2_xx_2_fused // T.int64(4) * T.int64(8) + ff_3 * T.int64(4) + ff_4)
                                    v_yy = T.axis.spatial(T.int64(28), nn_0_ff_0_yy_0_xx_0_fused % T.int64(7) * T.int64(4) + nn_2_ff_2_yy_2_xx_2_fused % T.int64(4) + yy_3 + yy_4)
                                    v_xx = T.axis.spatial(T.int64(28), xx_3 * T.int64(4) + xx_4)
                                    v_rc = T.axis.reduce(T.int64(192), rc_0 * T.int64(8) + rc_1 * T.int64(8) + rc_2)
                                    v_ry = T.axis.reduce(T.int64(1), ry_0 + ry_1 + ry_2)
                                    v_rx = T.axis.reduce(T.int64(1), rx_0 + rx_1 + rx_2)
                                    T.reads(pad_temp_shared[v_nn, v_rc, v_yy + v_ry, v_xx + v_rx], p1_shared[v_ff, v_rc, v_ry, v_rx])
                                    T.writes(conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx])
                                    T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 32, "meta_schedule.tiling_structure": "SSSRRSRS"})
                                    with T.init():
                                        conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx] = T.float32(0)
                                    conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx] = conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx] + pad_temp_shared[v_nn, v_rc, v_yy + v_ry, v_xx + v_rx] * p1_shared[v_ff, v_rc, v_ry, v_rx]
                        for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(8), T.int64(1), T.int64(28)):
                            with T.block("conv2d_nchw_local"):
                                v0 = T.axis.spatial(T.int64(1), ax0)
                                v1 = T.axis.spatial(T.int64(128), nn_0_ff_0_yy_0_xx_0_fused // T.int64(7) * T.int64(16) + nn_2_ff_2_yy_2_xx_2_fused // T.int64(4) * T.int64(8) + ax1)
                                v2 = T.axis.spatial(T.int64(28), nn_0_ff_0_yy_0_xx_0_fused % T.int64(7) * T.int64(4) + nn_2_ff_2_yy_2_xx_2_fused % T.int64(4) + ax2)
                                v3 = T.axis.spatial(T.int64(28), ax3)
                                T.reads(conv2d_nchw_local[v0, v1, v2, v3], p2[v0, v1, T.int64(0), T.int64(0)])
                                T.writes(T_relu[v0, v1, v2, v3])
                                T_relu[v0, v1, v2, v3] = T.max(conv2d_nchw_local[v0, v1, v2, v3] + p2[v0, v1, T.int64(0), T.int64(0)], T.float32(0))
b0 = sch.get_block(name="pad_temp", func_name="main")
b1 = sch.get_block(name="conv2d_nchw", func_name="main")
b2 = sch.get_block(name="T_add", func_name="main")
b3 = sch.get_block(name="T_relu", func_name="main")
b4 = sch.get_block(name="root", func_name="main")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSSRRSRS")
l5, l6, l7, l8, l9, l10, l11 = sch.get_loops(block=b1)
v12, v13, v14, v15, v16 = sch.sample_perfect_tile(loop=l5, n=5, max_innermost_factor=64, decision=[1, 1, 1, 1, 1])
l17, l18, l19, l20, l21 = sch.split(loop=l5, factors=[v12, v13, v14, v15, v16], preserve_unit_iters=True)
v22, v23, v24, v25, v26 = sch.sample_perfect_tile(loop=l6, n=5, max_innermost_factor=64, decision=[8, 1, 2, 2, 4])
l27, l28, l29, l30, l31 = sch.split(loop=l6, factors=[v22, v23, v24, v25, v26], preserve_unit_iters=True)
v32, v33, v34, v35, v36 = sch.sample_perfect_tile(loop=l7, n=5, max_innermost_factor=64, decision=[7, 1, 4, 1, 1])
l37, l38, l39, l40, l41 = sch.split(loop=l7, factors=[v32, v33, v34, v35, v36], preserve_unit_iters=True)
v42, v43, v44, v45, v46 = sch.sample_perfect_tile(loop=l8, n=5, max_innermost_factor=64, decision=[1, 1, 1, 7, 4])
l47, l48, l49, l50, l51 = sch.split(loop=l8, factors=[v42, v43, v44, v45, v46], preserve_unit_iters=True)
v52, v53, v54 = sch.sample_perfect_tile(loop=l9, n=3, max_innermost_factor=64, decision=[24, 1, 8])
l55, l56, l57 = sch.split(loop=l9, factors=[v52, v53, v54], preserve_unit_iters=True)
v58, v59, v60 = sch.sample_perfect_tile(loop=l10, n=3, max_innermost_factor=64, decision=[1, 1, 1])
l61, l62, l63 = sch.split(loop=l10, factors=[v58, v59, v60], preserve_unit_iters=True)
v64, v65, v66 = sch.sample_perfect_tile(loop=l11, n=3, max_innermost_factor=64, decision=[1, 1, 1])
l67, l68, l69 = sch.split(loop=l11, factors=[v64, v65, v66], preserve_unit_iters=True)
sch.reorder(l17, l27, l37, l47, l18, l28, l38, l48, l19, l29, l39, l49, l55, l61, l67, l56, l62, l68, l20, l30, l40, l50, l57, l63, l69, l21, l31, l41, l51)
l70 = sch.fuse(l17, l27, l37, l47, preserve_unit_iters=True)
sch.bind(loop=l70, thread_axis="blockIdx.x")
l71 = sch.fuse(l18, l28, l38, l48, preserve_unit_iters=True)
sch.bind(loop=l71, thread_axis="vthread.x")
l72 = sch.fuse(l19, l29, l39, l49, preserve_unit_iters=True)
sch.bind(loop=l72, thread_axis="threadIdx.x")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_low_inclusive", ann_val=32)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_high_inclusive", ann_val=1024)
b73 = sch.cache_write(block=b1, write_buffer_index=0, storage_scope="local")
sch.reverse_compute_at(block=b73, loop=l72, preserve_unit_loops=True, index=-1)
b74 = sch.cache_read(block=b1, read_buffer_index=0, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b74, loop=l67, preserve_unit_loops=True, index=-1)
l75, l76, l77, l78, l79, l80, l81, l82, l83, l84 = sch.get_loops(block=b74)
l85 = sch.fuse(l81, l82, l83, l84, preserve_unit_iters=True)
v86 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=1)
sch.annotate(block_or_loop=b74, ann_key="meta_schedule.cooperative_fetch", ann_val=v86)
b87 = sch.cache_read(block=b1, read_buffer_index=1, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b87, loop=l67, preserve_unit_loops=True, index=-1)
l88, l89, l90, l91, l92, l93, l94, l95, l96, l97 = sch.get_loops(block=b87)
l98 = sch.fuse(l94, l95, l96, l97, preserve_unit_iters=True)
v99 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=0)
sch.annotate(block_or_loop=b87, ann_key="meta_schedule.cooperative_fetch", ann_val=v99)
sch.reverse_compute_inline(block=b3)
sch.reverse_compute_inline(block=b2)
sch.compute_inline(block=b0)
v100 = sch.sample_categorical(candidates=[0, 16, 64, 512, 1024], probs=[0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001], decision=3)
sch.annotate(block_or_loop=b4, ann_key="meta_schedule.unroll_explicit", ann_val=v100)
2024-04-29 16:32:27 [INFO] [task_scheduler.cc:170] Design space #1:
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(192), T.int64(28), T.int64(28)), "float32"), p1: T.Buffer((T.int64(128), T.int64(192), T.int64(1), T.int64(1)), "float32"), p2: T.Buffer((T.int64(1), T.int64(128), T.int64(1), T.int64(1)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(128), T.int64(28), T.int64(28)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        with T.block("root"):
            T.reads()
            T.writes()
            T.block_attr({"meta_schedule.unroll_explicit": 64})
            conv2d_nchw_local = T.alloc_buffer((T.int64(1), T.int64(128), T.int64(28), T.int64(28)), scope="local")
            pad_temp_shared = T.alloc_buffer((T.int64(1), T.int64(192), T.int64(28), T.int64(28)), scope="shared")
            p1_shared = T.alloc_buffer((T.int64(128), T.int64(192), T.int64(1), T.int64(1)), scope="shared")
            for nn_0_ff_0_yy_0_xx_0_fused in T.thread_binding(T.int64(56), thread="blockIdx.x"):
                for nn_1_ff_1_yy_1_xx_1_fused in T.thread_binding(T.int64(1), thread="vthread.x"):
                    for nn_2_ff_2_yy_2_xx_2_fused in T.thread_binding(T.int64(8), thread="threadIdx.x"):
                        for rc_0_ry_0_rx_0_fused in T.serial(T.int64(24), annotations={"software_pipeline_async_stages": [0], "software_pipeline_order": [0, 1, 2], "software_pipeline_stage": [0, 0, 2]}):
                            for ax0_ax1_ax2_ax3_fused in range(T.int64(896)):
                                with T.block("pad_temp_shared"):
                                    v0 = T.axis.spatial(T.int64(1), T.int64(0))
                                    v1 = T.axis.spatial(T.int64(192), rc_0_ry_0_rx_0_fused * T.int64(8) + ax0_ax1_ax2_ax3_fused // T.int64(112))
                                    v2 = T.axis.spatial(T.int64(28), nn_0_ff_0_yy_0_xx_0_fused % T.int64(7) * T.int64(4) + ax0_ax1_ax2_ax3_fused % T.int64(112) // T.int64(28))
                                    v3 = T.axis.spatial(T.int64(28), ax0_ax1_ax2_ax3_fused % T.int64(28))
                                    T.reads(p0[v0, v1, v2, v3])
                                    T.writes(pad_temp_shared[v0, v1, v2, v3])
                                    T.block_attr({"meta_schedule.cooperative_fetch": 2})
                                    pad_temp_shared[v0, v1, v2, v3] = p0[v0, v1, v2, v3]
                            for ax0_ax1_ax2_ax3_fused in range(T.int64(128)):
                                with T.block("p1_shared"):
                                    v0 = T.axis.spatial(T.int64(128), nn_0_ff_0_yy_0_xx_0_fused // T.int64(7) * T.int64(16) + ax0_ax1_ax2_ax3_fused // T.int64(8))
                                    v1 = T.axis.spatial(T.int64(192), rc_0_ry_0_rx_0_fused * T.int64(8) + ax0_ax1_ax2_ax3_fused % T.int64(8))
                                    v2 = T.axis.spatial(T.int64(1), T.int64(0))
                                    v3 = T.axis.spatial(T.int64(1), T.int64(0))
                                    T.reads(p1[v0, v1, v2, v3])
                                    T.writes(p1_shared[v0, v1, v2, v3])
                                    T.block_attr({"meta_schedule.cooperative_fetch": 1})
                                    p1_shared[v0, v1, v2, v3] = p1[v0, v1, v2, v3]
                            for rc_1, ry_1, rx_1, nn_3, ff_3, yy_3, xx_3, rc_2, ry_2, rx_2, nn_4, ff_4, yy_4, xx_4 in T.grid(T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(1), T.int64(7), T.int64(8), T.int64(1), T.int64(1), T.int64(1), T.int64(4), T.int64(1), T.int64(4)):
                                with T.block("conv2d_nchw"):
                                    v_nn = T.axis.spatial(T.int64(1), nn_3 + nn_4)
                                    v_ff = T.axis.spatial(T.int64(128), nn_0_ff_0_yy_0_xx_0_fused // T.int64(7) * T.int64(16) + nn_2_ff_2_yy_2_xx_2_fused // T.int64(4) * T.int64(8) + ff_3 * T.int64(4) + ff_4)
                                    v_yy = T.axis.spatial(T.int64(28), nn_0_ff_0_yy_0_xx_0_fused % T.int64(7) * T.int64(4) + nn_2_ff_2_yy_2_xx_2_fused % T.int64(4) + yy_3 + yy_4)
                                    v_xx = T.axis.spatial(T.int64(28), xx_3 * T.int64(4) + xx_4)
                                    v_rc = T.axis.reduce(T.int64(192), rc_0_ry_0_rx_0_fused * T.int64(8) + rc_1 * T.int64(8) + rc_2)
                                    v_ry = T.axis.reduce(T.int64(1), ry_1 + ry_2)
                                    v_rx = T.axis.reduce(T.int64(1), rx_1 + rx_2)
                                    T.reads(pad_temp_shared[v_nn, v_rc, v_yy + v_ry, v_xx + v_rx], p1_shared[v_ff, v_rc, v_ry, v_rx])
                                    T.writes(conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx])
                                    T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 32, "meta_schedule.tiling_structure": "SSSRRSRS"})
                                    with T.init():
                                        conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx] = T.float32(0)
                                    conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx] = conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx] + pad_temp_shared[v_nn, v_rc, v_yy + v_ry, v_xx + v_rx] * p1_shared[v_ff, v_rc, v_ry, v_rx]
                        for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(8), T.int64(1), T.int64(28)):
                            with T.block("conv2d_nchw_local"):
                                v0 = T.axis.spatial(T.int64(1), ax0)
                                v1 = T.axis.spatial(T.int64(128), nn_0_ff_0_yy_0_xx_0_fused // T.int64(7) * T.int64(16) + nn_2_ff_2_yy_2_xx_2_fused // T.int64(4) * T.int64(8) + ax1)
                                v2 = T.axis.spatial(T.int64(28), nn_0_ff_0_yy_0_xx_0_fused % T.int64(7) * T.int64(4) + nn_2_ff_2_yy_2_xx_2_fused % T.int64(4) + ax2)
                                v3 = T.axis.spatial(T.int64(28), ax3)
                                T.reads(conv2d_nchw_local[v0, v1, v2, v3], p2[v0, v1, T.int64(0), T.int64(0)])
                                T.writes(T_relu[v0, v1, v2, v3])
                                T_relu[v0, v1, v2, v3] = T.max(conv2d_nchw_local[v0, v1, v2, v3] + p2[v0, v1, T.int64(0), T.int64(0)], T.float32(0))
b0 = sch.get_block(name="pad_temp", func_name="main")
b1 = sch.get_block(name="conv2d_nchw", func_name="main")
b2 = sch.get_block(name="T_add", func_name="main")
b3 = sch.get_block(name="T_relu", func_name="main")
b4 = sch.get_block(name="root", func_name="main")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSSRRSRS")
l5, l6, l7, l8, l9, l10, l11 = sch.get_loops(block=b1)
v12, v13, v14, v15, v16 = sch.sample_perfect_tile(loop=l5, n=5, max_innermost_factor=64, decision=[1, 1, 1, 1, 1])
l17, l18, l19, l20, l21 = sch.split(loop=l5, factors=[v12, v13, v14, v15, v16], preserve_unit_iters=True)
v22, v23, v24, v25, v26 = sch.sample_perfect_tile(loop=l6, n=5, max_innermost_factor=64, decision=[8, 1, 2, 2, 4])
l27, l28, l29, l30, l31 = sch.split(loop=l6, factors=[v22, v23, v24, v25, v26], preserve_unit_iters=True)
v32, v33, v34, v35, v36 = sch.sample_perfect_tile(loop=l7, n=5, max_innermost_factor=64, decision=[7, 1, 4, 1, 1])
l37, l38, l39, l40, l41 = sch.split(loop=l7, factors=[v32, v33, v34, v35, v36], preserve_unit_iters=True)
v42, v43, v44, v45, v46 = sch.sample_perfect_tile(loop=l8, n=5, max_innermost_factor=64, decision=[1, 1, 1, 7, 4])
l47, l48, l49, l50, l51 = sch.split(loop=l8, factors=[v42, v43, v44, v45, v46], preserve_unit_iters=True)
v52, v53, v54 = sch.sample_perfect_tile(loop=l9, n=3, max_innermost_factor=64, decision=[24, 1, 8])
l55, l56, l57 = sch.split(loop=l9, factors=[v52, v53, v54], preserve_unit_iters=True)
v58, v59, v60 = sch.sample_perfect_tile(loop=l10, n=3, max_innermost_factor=64, decision=[1, 1, 1])
l61, l62, l63 = sch.split(loop=l10, factors=[v58, v59, v60], preserve_unit_iters=True)
v64, v65, v66 = sch.sample_perfect_tile(loop=l11, n=3, max_innermost_factor=64, decision=[1, 1, 1])
l67, l68, l69 = sch.split(loop=l11, factors=[v64, v65, v66], preserve_unit_iters=True)
sch.reorder(l17, l27, l37, l47, l18, l28, l38, l48, l19, l29, l39, l49, l55, l61, l67, l56, l62, l68, l20, l30, l40, l50, l57, l63, l69, l21, l31, l41, l51)
l70 = sch.fuse(l17, l27, l37, l47, preserve_unit_iters=True)
sch.bind(loop=l70, thread_axis="blockIdx.x")
l71 = sch.fuse(l18, l28, l38, l48, preserve_unit_iters=True)
sch.bind(loop=l71, thread_axis="vthread.x")
l72 = sch.fuse(l19, l29, l39, l49, preserve_unit_iters=True)
sch.bind(loop=l72, thread_axis="threadIdx.x")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_low_inclusive", ann_val=32)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_high_inclusive", ann_val=1024)
b73 = sch.cache_write(block=b1, write_buffer_index=0, storage_scope="local")
sch.reverse_compute_at(block=b73, loop=l72, preserve_unit_loops=True, index=-1)
b74 = sch.cache_read(block=b1, read_buffer_index=0, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b74, loop=l67, preserve_unit_loops=True, index=-1)
l75, l76, l77, l78, l79, l80, l81, l82, l83, l84 = sch.get_loops(block=b74)
l85 = sch.fuse(l81, l82, l83, l84, preserve_unit_iters=True)
v86 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=1)
sch.annotate(block_or_loop=b74, ann_key="meta_schedule.cooperative_fetch", ann_val=v86)
b87 = sch.cache_read(block=b1, read_buffer_index=1, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b87, loop=l67, preserve_unit_loops=True, index=-1)
l88, l89, l90, l91, l92, l93, l94, l95, l96, l97 = sch.get_loops(block=b87)
l98 = sch.fuse(l94, l95, l96, l97, preserve_unit_iters=True)
v99 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=0)
sch.annotate(block_or_loop=b87, ann_key="meta_schedule.cooperative_fetch", ann_val=v99)
l100 = sch.fuse(l55, l61, l67, preserve_unit_iters=True)
sch.annotate(block_or_loop=l100, ann_key="software_pipeline_stage", ann_val=[0, 0, 2])
sch.annotate(block_or_loop=l100, ann_key="software_pipeline_order", ann_val=[0, 1, 2])
sch.annotate(block_or_loop=l100, ann_key="software_pipeline_async_stages", ann_val=[0])
sch.reverse_compute_inline(block=b3)
sch.reverse_compute_inline(block=b2)
sch.compute_inline(block=b0)
v101 = sch.sample_categorical(candidates=[0, 16, 64, 512, 1024], probs=[0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001], decision=2)
sch.annotate(block_or_loop=b4, ann_key="meta_schedule.unroll_explicit", ann_val=v101)
2024-04-29 16:32:27 [INFO] [task_scheduler.cc:170] Design space #2:
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(192), T.int64(28), T.int64(28)), "float32"), p1: T.Buffer((T.int64(128), T.int64(192), T.int64(1), T.int64(1)), "float32"), p2: T.Buffer((T.int64(1), T.int64(128), T.int64(1), T.int64(1)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(128), T.int64(28), T.int64(28)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        with T.block("root"):
            T.reads()
            T.writes()
            T.block_attr({"meta_schedule.unroll_explicit": 1024})
            conv2d_nchw_local = T.alloc_buffer((T.int64(1), T.int64(128), T.int64(28), T.int64(28)), scope="local")
            pad_temp_shared = T.alloc_buffer((T.int64(1), T.int64(192), T.int64(28), T.int64(28)), scope="shared")
            p1_shared = T.alloc_buffer((T.int64(128), T.int64(192), T.int64(1), T.int64(1)), scope="shared")
            for nn_0_ff_0_yy_0_xx_0_fused in T.thread_binding(T.int64(56), thread="blockIdx.x"):
                for nn_1_ff_1_yy_1_xx_1_fused in T.thread_binding(T.int64(1), thread="vthread.x"):
                    for nn_2_ff_2_yy_2_xx_2_fused in T.thread_binding(T.int64(8), thread="threadIdx.x"):
                        for rc_0_ry_0_rx_0_fused in T.serial(T.int64(24), annotations={"software_pipeline_async_stages": [0], "software_pipeline_order": [0, 1, 2], "software_pipeline_stage": [0, 0, 3]}):
                            for ax0_ax1_ax2_ax3_fused in range(T.int64(896)):
                                with T.block("pad_temp_shared"):
                                    v0 = T.axis.spatial(T.int64(1), T.int64(0))
                                    v1 = T.axis.spatial(T.int64(192), rc_0_ry_0_rx_0_fused * T.int64(8) + ax0_ax1_ax2_ax3_fused // T.int64(112))
                                    v2 = T.axis.spatial(T.int64(28), nn_0_ff_0_yy_0_xx_0_fused % T.int64(7) * T.int64(4) + ax0_ax1_ax2_ax3_fused % T.int64(112) // T.int64(28))
                                    v3 = T.axis.spatial(T.int64(28), ax0_ax1_ax2_ax3_fused % T.int64(28))
                                    T.reads(p0[v0, v1, v2, v3])
                                    T.writes(pad_temp_shared[v0, v1, v2, v3])
                                    T.block_attr({"meta_schedule.cooperative_fetch": 2})
                                    pad_temp_shared[v0, v1, v2, v3] = p0[v0, v1, v2, v3]
                            for ax0_ax1_ax2_ax3_fused in range(T.int64(128)):
                                with T.block("p1_shared"):
                                    v0 = T.axis.spatial(T.int64(128), nn_0_ff_0_yy_0_xx_0_fused // T.int64(7) * T.int64(16) + ax0_ax1_ax2_ax3_fused // T.int64(8))
                                    v1 = T.axis.spatial(T.int64(192), rc_0_ry_0_rx_0_fused * T.int64(8) + ax0_ax1_ax2_ax3_fused % T.int64(8))
                                    v2 = T.axis.spatial(T.int64(1), T.int64(0))
                                    v3 = T.axis.spatial(T.int64(1), T.int64(0))
                                    T.reads(p1[v0, v1, v2, v3])
                                    T.writes(p1_shared[v0, v1, v2, v3])
                                    T.block_attr({"meta_schedule.cooperative_fetch": 1})
                                    p1_shared[v0, v1, v2, v3] = p1[v0, v1, v2, v3]
                            for rc_1, ry_1, rx_1, nn_3, ff_3, yy_3, xx_3, rc_2, ry_2, rx_2, nn_4, ff_4, yy_4, xx_4 in T.grid(T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(1), T.int64(7), T.int64(8), T.int64(1), T.int64(1), T.int64(1), T.int64(4), T.int64(1), T.int64(4)):
                                with T.block("conv2d_nchw"):
                                    v_nn = T.axis.spatial(T.int64(1), nn_3 + nn_4)
                                    v_ff = T.axis.spatial(T.int64(128), nn_0_ff_0_yy_0_xx_0_fused // T.int64(7) * T.int64(16) + nn_2_ff_2_yy_2_xx_2_fused // T.int64(4) * T.int64(8) + ff_3 * T.int64(4) + ff_4)
                                    v_yy = T.axis.spatial(T.int64(28), nn_0_ff_0_yy_0_xx_0_fused % T.int64(7) * T.int64(4) + nn_2_ff_2_yy_2_xx_2_fused % T.int64(4) + yy_3 + yy_4)
                                    v_xx = T.axis.spatial(T.int64(28), xx_3 * T.int64(4) + xx_4)
                                    v_rc = T.axis.reduce(T.int64(192), rc_0_ry_0_rx_0_fused * T.int64(8) + rc_1 * T.int64(8) + rc_2)
                                    v_ry = T.axis.reduce(T.int64(1), ry_1 + ry_2)
                                    v_rx = T.axis.reduce(T.int64(1), rx_1 + rx_2)
                                    T.reads(pad_temp_shared[v_nn, v_rc, v_yy + v_ry, v_xx + v_rx], p1_shared[v_ff, v_rc, v_ry, v_rx])
                                    T.writes(conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx])
                                    T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 32, "meta_schedule.tiling_structure": "SSSRRSRS"})
                                    with T.init():
                                        conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx] = T.float32(0)
                                    conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx] = conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx] + pad_temp_shared[v_nn, v_rc, v_yy + v_ry, v_xx + v_rx] * p1_shared[v_ff, v_rc, v_ry, v_rx]
                        for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(8), T.int64(1), T.int64(28)):
                            with T.block("conv2d_nchw_local"):
                                v0 = T.axis.spatial(T.int64(1), ax0)
                                v1 = T.axis.spatial(T.int64(128), nn_0_ff_0_yy_0_xx_0_fused // T.int64(7) * T.int64(16) + nn_2_ff_2_yy_2_xx_2_fused // T.int64(4) * T.int64(8) + ax1)
                                v2 = T.axis.spatial(T.int64(28), nn_0_ff_0_yy_0_xx_0_fused % T.int64(7) * T.int64(4) + nn_2_ff_2_yy_2_xx_2_fused % T.int64(4) + ax2)
                                v3 = T.axis.spatial(T.int64(28), ax3)
                                T.reads(conv2d_nchw_local[v0, v1, v2, v3], p2[v0, v1, T.int64(0), T.int64(0)])
                                T.writes(T_relu[v0, v1, v2, v3])
                                T_relu[v0, v1, v2, v3] = T.max(conv2d_nchw_local[v0, v1, v2, v3] + p2[v0, v1, T.int64(0), T.int64(0)], T.float32(0))
b0 = sch.get_block(name="pad_temp", func_name="main")
b1 = sch.get_block(name="conv2d_nchw", func_name="main")
b2 = sch.get_block(name="T_add", func_name="main")
b3 = sch.get_block(name="T_relu", func_name="main")
b4 = sch.get_block(name="root", func_name="main")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSSRRSRS")
l5, l6, l7, l8, l9, l10, l11 = sch.get_loops(block=b1)
v12, v13, v14, v15, v16 = sch.sample_perfect_tile(loop=l5, n=5, max_innermost_factor=64, decision=[1, 1, 1, 1, 1])
l17, l18, l19, l20, l21 = sch.split(loop=l5, factors=[v12, v13, v14, v15, v16], preserve_unit_iters=True)
v22, v23, v24, v25, v26 = sch.sample_perfect_tile(loop=l6, n=5, max_innermost_factor=64, decision=[8, 1, 2, 2, 4])
l27, l28, l29, l30, l31 = sch.split(loop=l6, factors=[v22, v23, v24, v25, v26], preserve_unit_iters=True)
v32, v33, v34, v35, v36 = sch.sample_perfect_tile(loop=l7, n=5, max_innermost_factor=64, decision=[7, 1, 4, 1, 1])
l37, l38, l39, l40, l41 = sch.split(loop=l7, factors=[v32, v33, v34, v35, v36], preserve_unit_iters=True)
v42, v43, v44, v45, v46 = sch.sample_perfect_tile(loop=l8, n=5, max_innermost_factor=64, decision=[1, 1, 1, 7, 4])
l47, l48, l49, l50, l51 = sch.split(loop=l8, factors=[v42, v43, v44, v45, v46], preserve_unit_iters=True)
v52, v53, v54 = sch.sample_perfect_tile(loop=l9, n=3, max_innermost_factor=64, decision=[24, 1, 8])
l55, l56, l57 = sch.split(loop=l9, factors=[v52, v53, v54], preserve_unit_iters=True)
v58, v59, v60 = sch.sample_perfect_tile(loop=l10, n=3, max_innermost_factor=64, decision=[1, 1, 1])
l61, l62, l63 = sch.split(loop=l10, factors=[v58, v59, v60], preserve_unit_iters=True)
v64, v65, v66 = sch.sample_perfect_tile(loop=l11, n=3, max_innermost_factor=64, decision=[1, 1, 1])
l67, l68, l69 = sch.split(loop=l11, factors=[v64, v65, v66], preserve_unit_iters=True)
sch.reorder(l17, l27, l37, l47, l18, l28, l38, l48, l19, l29, l39, l49, l55, l61, l67, l56, l62, l68, l20, l30, l40, l50, l57, l63, l69, l21, l31, l41, l51)
l70 = sch.fuse(l17, l27, l37, l47, preserve_unit_iters=True)
sch.bind(loop=l70, thread_axis="blockIdx.x")
l71 = sch.fuse(l18, l28, l38, l48, preserve_unit_iters=True)
sch.bind(loop=l71, thread_axis="vthread.x")
l72 = sch.fuse(l19, l29, l39, l49, preserve_unit_iters=True)
sch.bind(loop=l72, thread_axis="threadIdx.x")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_low_inclusive", ann_val=32)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_high_inclusive", ann_val=1024)
b73 = sch.cache_write(block=b1, write_buffer_index=0, storage_scope="local")
sch.reverse_compute_at(block=b73, loop=l72, preserve_unit_loops=True, index=-1)
b74 = sch.cache_read(block=b1, read_buffer_index=0, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b74, loop=l67, preserve_unit_loops=True, index=-1)
l75, l76, l77, l78, l79, l80, l81, l82, l83, l84 = sch.get_loops(block=b74)
l85 = sch.fuse(l81, l82, l83, l84, preserve_unit_iters=True)
v86 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=1)
sch.annotate(block_or_loop=b74, ann_key="meta_schedule.cooperative_fetch", ann_val=v86)
b87 = sch.cache_read(block=b1, read_buffer_index=1, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b87, loop=l67, preserve_unit_loops=True, index=-1)
l88, l89, l90, l91, l92, l93, l94, l95, l96, l97 = sch.get_loops(block=b87)
l98 = sch.fuse(l94, l95, l96, l97, preserve_unit_iters=True)
v99 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=0)
sch.annotate(block_or_loop=b87, ann_key="meta_schedule.cooperative_fetch", ann_val=v99)
l100 = sch.fuse(l55, l61, l67, preserve_unit_iters=True)
sch.annotate(block_or_loop=l100, ann_key="software_pipeline_stage", ann_val=[0, 0, 3])
sch.annotate(block_or_loop=l100, ann_key="software_pipeline_order", ann_val=[0, 1, 2])
sch.annotate(block_or_loop=l100, ann_key="software_pipeline_async_stages", ann_val=[0])
sch.reverse_compute_inline(block=b3)
sch.reverse_compute_inline(block=b2)
sch.compute_inline(block=b0)
v101 = sch.sample_categorical(candidates=[0, 16, 64, 512, 1024], probs=[0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001], decision=4)
sch.annotate(block_or_loop=b4, ann_key="meta_schedule.unroll_explicit", ann_val=v101)
2024-04-29 19:27:28 [INFO] [evolutionary_search.cc:713] Generating candidates......
2024-04-29 19:27:28 [INFO] [evolutionary_search.cc:715] Picked top 0 candidate(s) from database
2024-04-29 19:27:30 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0xd7b4838)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0xfb127e8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x14f650c8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x14ffa228)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0xa5309b8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0xed3e248)]: 478 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x13c12d38)]: 0 failure(s)
2024-04-29 19:27:32 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0xd7b4838)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0xfb127e8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x14f650c8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x14ffa228)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0xa5309b8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0xed3e248)]: 952 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x13c12d38)]: 0 failure(s)
2024-04-29 19:27:32 [INFO] [evolutionary_search.cc:723] Sampled 72 candidate(s)
2024-04-29 19:27:34 [INFO] [evolutionary_search.cc:621] Evolve iter #0 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0xd7b4838)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0xfb127e8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x14f650c8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x14ffa228)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0xa5309b8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0xed3e248)]: 109 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x13c12d38)]: 0 failure(s)
2024-04-29 19:27:37 [INFO] [evolutionary_search.cc:621] Evolve iter #1 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0xd7b4838)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0xfb127e8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x14f650c8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x14ffa228)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0xa5309b8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0xed3e248)]: 86 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x13c12d38)]: 0 failure(s)
2024-04-29 19:27:39 [INFO] [evolutionary_search.cc:621] Evolve iter #2 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0xd7b4838)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0xfb127e8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x14f650c8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x14ffa228)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0xa5309b8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0xed3e248)]: 86 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x13c12d38)]: 0 failure(s)
2024-04-29 19:27:41 [INFO] [evolutionary_search.cc:621] Evolve iter #3 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0xd7b4838)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0xfb127e8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x14f650c8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x14ffa228)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0xa5309b8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0xed3e248)]: 102 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x13c12d38)]: 0 failure(s)
2024-04-29 19:27:42 [INFO] [evolutionary_search.cc:649] Scores of the best 64 candidates:
[1 : 16]:	0.9988  0.9976  0.9966  0.9965  0.9955  0.9954  0.9952  0.9947  0.9931  0.9926  0.9924  0.9923  0.9909  0.9906  0.9904  0.9885
[17 : 32]:	0.9883  0.9880  0.9866  0.9863  0.9848  0.9846  0.9843  0.9842  0.9824  0.9806  0.9802  0.9795  0.9794  0.9793  0.9789  0.9775
[33 : 48]:	0.9773  0.9769  0.9758  0.9756  0.9756  0.9728  0.9725  0.9716  0.9713  0.9711  0.9708  0.9704  0.9704  0.9703  0.9699  0.9690
[49 : 64]:	0.9680  0.9679  0.9678  0.9678  0.9665  0.9656  0.9632  0.9630  0.9630  0.9628  0.9628  0.9618  0.9606  0.9601  0.9600  0.9593
2024-04-29 19:27:42 [INFO] [evolutionary_search.cc:727] Got 64 candidate(s) with evolutionary search
2024-04-29 19:27:42 [INFO] [evolutionary_search.cc:730] Sending 64 candidates(s) for measurement
2024-04-29 20:32:24 [INFO] [task_scheduler.cc:131] [Task #181: fused_nn_conv2d_add_nn_relu_89] Trial #1: GFLOPs: 10.3083. Time: 3757.7387 us. Best GFLOPs: 10.3083
2024-04-29 20:32:24 [INFO] [task_scheduler.cc:131] [Task #181: fused_nn_conv2d_add_nn_relu_89] Trial #2: GFLOPs: 1763.5592. Time: 21.9646 us. Best GFLOPs: 1763.5592
2024-04-29 20:32:24 [INFO] [task_scheduler.cc:131] [Task #181: fused_nn_conv2d_add_nn_relu_89] Trial #3: GFLOPs: 2132.9303. Time: 18.1609 us. Best GFLOPs: 2132.9303
2024-04-29 20:32:24 [INFO] [task_scheduler.cc:131] [Task #181: fused_nn_conv2d_add_nn_relu_89] Trial #4: GFLOPs: 130.7506. Time: 296.2577 us. Best GFLOPs: 2132.9303
2024-04-29 20:32:24 [INFO] [task_scheduler.cc:131] [Task #181: fused_nn_conv2d_add_nn_relu_89] Trial #5: GFLOPs: 96.7654. Time: 400.3070 us. Best GFLOPs: 2132.9303
2024-04-29 20:32:24 [INFO] [task_scheduler.cc:131] [Task #181: fused_nn_conv2d_add_nn_relu_89] Trial #6: GFLOPs: 957.9492. Time: 40.4362 us. Best GFLOPs: 2132.9303
2024-04-29 20:32:24 [INFO] [task_scheduler.cc:131] [Task #181: fused_nn_conv2d_add_nn_relu_89] Trial #7: GFLOPs: 150.9687. Time: 256.5821 us. Best GFLOPs: 2132.9303
2024-04-29 20:32:24 [INFO] [task_scheduler.cc:131] [Task #181: fused_nn_conv2d_add_nn_relu_89] Trial #8: GFLOPs: 130.6558. Time: 296.4727 us. Best GFLOPs: 2132.9303
2024-04-29 20:32:24 [INFO] [task_scheduler.cc:131] [Task #181: fused_nn_conv2d_add_nn_relu_89] Trial #9: GFLOPs: 613.2091. Time: 63.1691 us. Best GFLOPs: 2132.9303
2024-04-29 20:32:24 [INFO] [task_scheduler.cc:131] [Task #181: fused_nn_conv2d_add_nn_relu_89] Trial #10: GFLOPs: 539.5588. Time: 71.7918 us. Best GFLOPs: 2132.9303
2024-04-29 20:32:24 [INFO] [task_scheduler.cc:131] [Task #181: fused_nn_conv2d_add_nn_relu_89] Trial #11: GFLOPs: 1204.3566. Time: 32.1631 us. Best GFLOPs: 2132.9303
2024-04-29 20:32:24 [INFO] [task_scheduler.cc:131] [Task #181: fused_nn_conv2d_add_nn_relu_89] Trial #12: GFLOPs: 580.8604. Time: 66.6871 us. Best GFLOPs: 2132.9303
2024-04-29 20:32:24 [INFO] [task_scheduler.cc:131] [Task #181: fused_nn_conv2d_add_nn_relu_89] Trial #13: GFLOPs: 1808.5246. Time: 21.4185 us. Best GFLOPs: 2132.9303
2024-04-29 20:32:24 [INFO] [task_scheduler.cc:131] [Task #181: fused_nn_conv2d_add_nn_relu_89] Trial #14: GFLOPs: 635.8206. Time: 60.9226 us. Best GFLOPs: 2132.9303
2024-04-29 20:32:24 [INFO] [task_scheduler.cc:131] [Task #181: fused_nn_conv2d_add_nn_relu_89] Trial #15: GFLOPs: 45.7334. Time: 846.9935 us. Best GFLOPs: 2132.9303
2024-04-29 20:32:24 [INFO] [task_scheduler.cc:131] [Task #181: fused_nn_conv2d_add_nn_relu_89] Trial #16: GFLOPs: 1076.8374. Time: 35.9719 us. Best GFLOPs: 2132.9303
2024-04-29 20:32:24 [INFO] [task_scheduler.cc:131] [Task #181: fused_nn_conv2d_add_nn_relu_89] Trial #17: GFLOPs: 82.3345. Time: 470.4695 us. Best GFLOPs: 2132.9303
2024-04-29 20:32:24 [INFO] [task_scheduler.cc:131] [Task #181: fused_nn_conv2d_add_nn_relu_89] Trial #18: GFLOPs: 73.6766. Time: 525.7552 us. Best GFLOPs: 2132.9303
2024-04-29 20:32:24 [INFO] [task_scheduler.cc:131] [Task #181: fused_nn_conv2d_add_nn_relu_89] Trial #19: GFLOPs: 146.3795. Time: 264.6263 us. Best GFLOPs: 2132.9303
2024-04-29 20:32:24 [INFO] [task_scheduler.cc:131] [Task #181: fused_nn_conv2d_add_nn_relu_89] Trial #20: GFLOPs: 1600.8783. Time: 24.1966 us. Best GFLOPs: 2132.9303
2024-04-29 20:32:24 [INFO] [task_scheduler.cc:131] [Task #181: fused_nn_conv2d_add_nn_relu_89] Trial #21: GFLOPs: 756.4881. Time: 51.2049 us. Best GFLOPs: 2132.9303
2024-04-29 20:32:24 [INFO] [task_scheduler.cc:131] [Task #181: fused_nn_conv2d_add_nn_relu_89] Trial #22: GFLOPs: 1287.8311. Time: 30.0784 us. Best GFLOPs: 2132.9303
2024-04-29 20:32:24 [INFO] [task_scheduler.cc:131] [Task #181: fused_nn_conv2d_add_nn_relu_89] Trial #23: GFLOPs: 276.8418. Time: 139.9206 us. Best GFLOPs: 2132.9303
2024-04-29 20:32:24 [INFO] [task_scheduler.cc:131] [Task #181: fused_nn_conv2d_add_nn_relu_89] Trial #24: GFLOPs: 1534.7603. Time: 25.2390 us. Best GFLOPs: 2132.9303
2024-04-29 20:32:24 [INFO] [task_scheduler.cc:131] [Task #181: fused_nn_conv2d_add_nn_relu_89] Trial #25: GFLOPs: 227.4604. Time: 170.2972 us. Best GFLOPs: 2132.9303
2024-04-29 20:32:24 [INFO] [task_scheduler.cc:131] [Task #181: fused_nn_conv2d_add_nn_relu_89] Trial #26: GFLOPs: 36.7315. Time: 1054.5691 us. Best GFLOPs: 2132.9303
2024-04-29 20:32:24 [INFO] [task_scheduler.cc:131] [Task #181: fused_nn_conv2d_add_nn_relu_89] Trial #27: GFLOPs: 1145.7421. Time: 33.8085 us. Best GFLOPs: 2132.9303
2024-04-29 20:32:24 [INFO] [task_scheduler.cc:131] [Task #181: fused_nn_conv2d_add_nn_relu_89] Trial #28: GFLOPs: 63.1833. Time: 613.0711 us. Best GFLOPs: 2132.9303
2024-04-29 20:32:24 [INFO] [task_scheduler.cc:131] [Task #181: fused_nn_conv2d_add_nn_relu_89] Trial #29: GFLOPs: 1068.9038. Time: 36.2389 us. Best GFLOPs: 2132.9303
2024-04-29 20:32:24 [INFO] [task_scheduler.cc:131] [Task #181: fused_nn_conv2d_add_nn_relu_89] Trial #30: GFLOPs: 418.4524. Time: 92.5694 us. Best GFLOPs: 2132.9303
2024-04-29 20:32:24 [INFO] [task_scheduler.cc:131] [Task #181: fused_nn_conv2d_add_nn_relu_89] Trial #31: GFLOPs: 279.2554. Time: 138.7113 us. Best GFLOPs: 2132.9303
2024-04-29 20:32:24 [INFO] [task_scheduler.cc:131] [Task #181: fused_nn_conv2d_add_nn_relu_89] Trial #32: GFLOPs: 1393.6247. Time: 27.7951 us. Best GFLOPs: 2132.9303
2024-04-29 20:32:24 [INFO] [task_scheduler.cc:131] [Task #181: fused_nn_conv2d_add_nn_relu_89] Trial #33: GFLOPs: 87.9346. Time: 440.5079 us. Best GFLOPs: 2132.9303
2024-04-29 20:32:24 [INFO] [task_scheduler.cc:131] [Task #181: fused_nn_conv2d_add_nn_relu_89] Trial #34: GFLOPs: 442.2720. Time: 87.5838 us. Best GFLOPs: 2132.9303
2024-04-29 20:32:24 [INFO] [task_scheduler.cc:131] [Task #181: fused_nn_conv2d_add_nn_relu_89] Trial #35: GFLOPs: 862.1685. Time: 44.9284 us. Best GFLOPs: 2132.9303
2024-04-29 20:32:24 [INFO] [task_scheduler.cc:131] [Task #181: fused_nn_conv2d_add_nn_relu_89] Trial #36: GFLOPs: 531.6124. Time: 72.8649 us. Best GFLOPs: 2132.9303
2024-04-29 20:32:24 [INFO] [task_scheduler.cc:131] [Task #181: fused_nn_conv2d_add_nn_relu_89] Trial #37: GFLOPs: 732.4778. Time: 52.8833 us. Best GFLOPs: 2132.9303
2024-04-29 20:32:24 [INFO] [task_scheduler.cc:131] [Task #181: fused_nn_conv2d_add_nn_relu_89] Trial #38: GFLOPs: 42.2356. Time: 917.1375 us. Best GFLOPs: 2132.9303
2024-04-29 20:32:24 [INFO] [task_scheduler.cc:131] [Task #181: fused_nn_conv2d_add_nn_relu_89] Trial #39: GFLOPs: 272.3584. Time: 142.2239 us. Best GFLOPs: 2132.9303
2024-04-29 20:32:24 [INFO] [task_scheduler.cc:131] [Task #181: fused_nn_conv2d_add_nn_relu_89] Trial #40: GFLOPs: 12.2214. Time: 3169.5039 us. Best GFLOPs: 2132.9303
2024-04-29 20:32:24 [INFO] [task_scheduler.cc:131] [Task #181: fused_nn_conv2d_add_nn_relu_89] Trial #41: GFLOPs: 65.6198. Time: 590.3079 us. Best GFLOPs: 2132.9303
2024-04-29 20:32:24 [INFO] [task_scheduler.cc:131] [Task #181: fused_nn_conv2d_add_nn_relu_89] Trial #42: GFLOPs: 26.8927. Time: 1440.3876 us. Best GFLOPs: 2132.9303
2024-04-29 20:32:24 [INFO] [task_scheduler.cc:131] [Task #181: fused_nn_conv2d_add_nn_relu_89] Trial #43: GFLOPs: 192.7340. Time: 200.9810 us. Best GFLOPs: 2132.9303
2024-04-29 20:32:24 [INFO] [task_scheduler.cc:131] [Task #181: fused_nn_conv2d_add_nn_relu_89] Trial #44: GFLOPs: 1112.9638. Time: 34.8043 us. Best GFLOPs: 2132.9303
2024-04-29 20:32:24 [INFO] [task_scheduler.cc:131] [Task #181: fused_nn_conv2d_add_nn_relu_89] Trial #45: GFLOPs: 15.7351. Time: 2461.7460 us. Best GFLOPs: 2132.9303
2024-04-29 20:32:24 [INFO] [task_scheduler.cc:131] [Task #181: fused_nn_conv2d_add_nn_relu_89] Trial #46: GFLOPs: 135.6451. Time: 285.5678 us. Best GFLOPs: 2132.9303
2024-04-29 20:32:24 [INFO] [task_scheduler.cc:131] [Task #181: fused_nn_conv2d_add_nn_relu_89] Trial #47: GFLOPs: 736.2625. Time: 52.6115 us. Best GFLOPs: 2132.9303
2024-04-29 20:32:24 [INFO] [task_scheduler.cc:131] [Task #181: fused_nn_conv2d_add_nn_relu_89] Trial #48: GFLOPs: 550.3157. Time: 70.3885 us. Best GFLOPs: 2132.9303
2024-04-29 20:32:24 [INFO] [task_scheduler.cc:131] [Task #181: fused_nn_conv2d_add_nn_relu_89] Trial #49: GFLOPs: 992.5971. Time: 39.0248 us. Best GFLOPs: 2132.9303
2024-04-29 20:32:24 [INFO] [task_scheduler.cc:131] [Task #181: fused_nn_conv2d_add_nn_relu_89] Trial #50: GFLOPs: 779.2778. Time: 49.7074 us. Best GFLOPs: 2132.9303
2024-04-29 20:32:24 [INFO] [task_scheduler.cc:131] [Task #181: fused_nn_conv2d_add_nn_relu_89] Trial #51: GFLOPs: 2041.7383. Time: 18.9720 us. Best GFLOPs: 2132.9303
2024-04-29 20:32:24 [INFO] [task_scheduler.cc:131] [Task #181: fused_nn_conv2d_add_nn_relu_89] Trial #52: GFLOPs: 624.9690. Time: 61.9805 us. Best GFLOPs: 2132.9303
2024-04-29 20:32:24 [INFO] [task_scheduler.cc:131] [Task #181: fused_nn_conv2d_add_nn_relu_89] Trial #53: GFLOPs: 710.3669. Time: 54.5294 us. Best GFLOPs: 2132.9303
2024-04-29 20:32:24 [INFO] [task_scheduler.cc:131] [Task #181: fused_nn_conv2d_add_nn_relu_89] Trial #54: GFLOPs: 44.3683. Time: 873.0535 us. Best GFLOPs: 2132.9303
2024-04-29 20:32:24 [INFO] [task_scheduler.cc:131] [Task #181: fused_nn_conv2d_add_nn_relu_89] Trial #55: GFLOPs: 367.8767. Time: 105.2958 us. Best GFLOPs: 2132.9303
2024-04-29 20:32:24 [INFO] [task_scheduler.cc:131] [Task #181: fused_nn_conv2d_add_nn_relu_89] Trial #56: GFLOPs: 1058.5886. Time: 36.5920 us. Best GFLOPs: 2132.9303
2024-04-29 20:32:24 [INFO] [task_scheduler.cc:131] [Task #181: fused_nn_conv2d_add_nn_relu_89] Trial #57: GFLOPs: 309.4512. Time: 125.1760 us. Best GFLOPs: 2132.9303
2024-04-29 20:32:24 [INFO] [task_scheduler.cc:131] [Task #181: fused_nn_conv2d_add_nn_relu_89] Trial #58: GFLOPs: 127.8571. Time: 302.9622 us. Best GFLOPs: 2132.9303
2024-04-29 20:32:24 [INFO] [task_scheduler.cc:131] [Task #181: fused_nn_conv2d_add_nn_relu_89] Trial #59: GFLOPs: 796.9357. Time: 48.6060 us. Best GFLOPs: 2132.9303
2024-04-29 20:32:24 [INFO] [task_scheduler.cc:131] [Task #181: fused_nn_conv2d_add_nn_relu_89] Trial #60: GFLOPs: 552.5772. Time: 70.1004 us. Best GFLOPs: 2132.9303
2024-04-29 20:32:24 [INFO] [task_scheduler.cc:131] [Task #181: fused_nn_conv2d_add_nn_relu_89] Trial #61: GFLOPs: 480.7048. Time: 80.5814 us. Best GFLOPs: 2132.9303
2024-04-29 20:32:24 [INFO] [task_scheduler.cc:131] [Task #181: fused_nn_conv2d_add_nn_relu_89] Trial #62: GFLOPs: 42.9205. Time: 902.5038 us. Best GFLOPs: 2132.9303
2024-04-29 20:32:24 [INFO] [task_scheduler.cc:131] [Task #181: fused_nn_conv2d_add_nn_relu_89] Trial #63: GFLOPs: 860.4564. Time: 45.0178 us. Best GFLOPs: 2132.9303
2024-04-29 20:32:24 [INFO] [task_scheduler.cc:131] [Task #181: fused_nn_conv2d_add_nn_relu_89] Trial #64: GFLOPs: 370.8555. Time: 104.4500 us. Best GFLOPs: 2132.9303
2024-05-01 15:06:07 [INFO] [task_scheduler.cc:160] Initializing Task #181: "fused_nn_conv2d_add_nn_relu_89"
2024-05-01 15:06:07 [INFO] [task_scheduler.cc:35] 
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(192), T.int64(28), T.int64(28)), "float32"), p1: T.Buffer((T.int64(128), T.int64(192), T.int64(1), T.int64(1)), "float32"), p2: T.Buffer((T.int64(1), T.int64(128), T.int64(1), T.int64(1)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(128), T.int64(28), T.int64(28)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        pad_temp = T.alloc_buffer((T.int64(1), T.int64(192), T.int64(28), T.int64(28)))
        conv2d_nchw = T.alloc_buffer((T.int64(1), T.int64(128), T.int64(28), T.int64(28)))
        T_add = T.alloc_buffer((T.int64(1), T.int64(128), T.int64(28), T.int64(28)))
        for i0, i1, i2, i3 in T.grid(T.int64(1), T.int64(192), T.int64(28), T.int64(28)):
            with T.block("pad_temp"):
                v_i0, v_i1, v_i2, v_i3 = T.axis.remap("SSSS", [i0, i1, i2, i3])
                T.reads(p0[v_i0, v_i1, v_i2, v_i3])
                T.writes(pad_temp[v_i0, v_i1, v_i2, v_i3])
                pad_temp[v_i0, v_i1, v_i2, v_i3] = p0[v_i0, v_i1, v_i2, v_i3]
        for nn, ff, yy, xx, rc, ry, rx in T.grid(T.int64(1), T.int64(128), T.int64(28), T.int64(28), T.int64(192), T.int64(1), T.int64(1)):
            with T.block("conv2d_nchw"):
                v_nn, v_ff, v_yy, v_xx, v_rc, v_ry, v_rx = T.axis.remap("SSSSRRR", [nn, ff, yy, xx, rc, ry, rx])
                T.reads(pad_temp[v_nn, v_rc, v_yy + v_ry, v_xx + v_rx], p1[v_ff, v_rc, v_ry, v_rx])
                T.writes(conv2d_nchw[v_nn, v_ff, v_yy, v_xx])
                with T.init():
                    conv2d_nchw[v_nn, v_ff, v_yy, v_xx] = T.float32(0)
                conv2d_nchw[v_nn, v_ff, v_yy, v_xx] = conv2d_nchw[v_nn, v_ff, v_yy, v_xx] + pad_temp[v_nn, v_rc, v_yy + v_ry, v_xx + v_rx] * p1[v_ff, v_rc, v_ry, v_rx]
        for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(128), T.int64(28), T.int64(28)):
            with T.block("T_add"):
                v_ax0, v_ax1, v_ax2, v_ax3 = T.axis.remap("SSSS", [ax0, ax1, ax2, ax3])
                T.reads(conv2d_nchw[v_ax0, v_ax1, v_ax2, v_ax3], p2[v_ax0, v_ax1, T.int64(0), T.int64(0)])
                T.writes(T_add[v_ax0, v_ax1, v_ax2, v_ax3])
                T_add[v_ax0, v_ax1, v_ax2, v_ax3] = conv2d_nchw[v_ax0, v_ax1, v_ax2, v_ax3] + p2[v_ax0, v_ax1, T.int64(0), T.int64(0)]
        for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(128), T.int64(28), T.int64(28)):
            with T.block("T_relu"):
                v_ax0, v_ax1, v_ax2, v_ax3 = T.axis.remap("SSSS", [ax0, ax1, ax2, ax3])
                T.reads(T_add[v_ax0, v_ax1, v_ax2, v_ax3])
                T.writes(T_relu[v_ax0, v_ax1, v_ax2, v_ax3])
                T_relu[v_ax0, v_ax1, v_ax2, v_ax3] = T.max(T_add[v_ax0, v_ax1, v_ax2, v_ax3], T.float32(0))
2024-05-01 15:06:07 [INFO] [task_scheduler.cc:164] Total 3 design space(s) generated
2024-05-01 15:06:07 [INFO] [task_scheduler.cc:170] Design space #0:
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(192), T.int64(28), T.int64(28)), "float32"), p1: T.Buffer((T.int64(128), T.int64(192), T.int64(1), T.int64(1)), "float32"), p2: T.Buffer((T.int64(1), T.int64(128), T.int64(1), T.int64(1)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(128), T.int64(28), T.int64(28)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        with T.block("root"):
            T.reads()
            T.writes()
            T.block_attr({"meta_schedule.unroll_explicit": 1024})
            conv2d_nchw_local = T.alloc_buffer((T.int64(1), T.int64(128), T.int64(28), T.int64(28)), scope="local")
            pad_temp_shared = T.alloc_buffer((T.int64(1), T.int64(192), T.int64(28), T.int64(28)), scope="shared")
            p1_shared = T.alloc_buffer((T.int64(128), T.int64(192), T.int64(1), T.int64(1)), scope="shared")
            for nn_0_ff_0_yy_0_xx_0_fused in T.thread_binding(T.int64(64), thread="blockIdx.x"):
                for nn_1_ff_1_yy_1_xx_1_fused in T.thread_binding(T.int64(1), thread="vthread.x"):
                    for nn_2_ff_2_yy_2_xx_2_fused in T.thread_binding(T.int64(98), thread="threadIdx.x"):
                        for rc_0, ry_0, rx_0 in T.grid(T.int64(16), T.int64(1), T.int64(1)):
                            for ax0_ax1_ax2_ax3_fused in range(T.int64(4704)):
                                with T.block("pad_temp_shared"):
                                    v0 = T.axis.spatial(T.int64(1), T.int64(0))
                                    v1 = T.axis.spatial(T.int64(192), rc_0 * T.int64(12) + ax0_ax1_ax2_ax3_fused // T.int64(392))
                                    v2 = T.axis.spatial(T.int64(28), ax0_ax1_ax2_ax3_fused % T.int64(392) // T.int64(14))
                                    v3 = T.axis.spatial(T.int64(28), nn_0_ff_0_yy_0_xx_0_fused % T.int64(2) * T.int64(14) + ax0_ax1_ax2_ax3_fused % T.int64(14))
                                    T.reads(p0[v0, v1, v2, v3])
                                    T.writes(pad_temp_shared[v0, v1, v2, v3])
                                    T.block_attr({"meta_schedule.cooperative_fetch": 3})
                                    pad_temp_shared[v0, v1, v2, v3] = p0[v0, v1, v2, v3]
                            for ax0_ax1_ax2_ax3_fused in range(T.int64(48)):
                                with T.block("p1_shared"):
                                    v0 = T.axis.spatial(T.int64(128), nn_0_ff_0_yy_0_xx_0_fused // T.int64(2) * T.int64(4) + ax0_ax1_ax2_ax3_fused // T.int64(12))
                                    v1 = T.axis.spatial(T.int64(192), rc_0 * T.int64(12) + ax0_ax1_ax2_ax3_fused % T.int64(12))
                                    v2 = T.axis.spatial(T.int64(1), T.int64(0))
                                    v3 = T.axis.spatial(T.int64(1), T.int64(0))
                                    T.reads(p1[v0, v1, v2, v3])
                                    T.writes(p1_shared[v0, v1, v2, v3])
                                    T.block_attr({"meta_schedule.cooperative_fetch": 2})
                                    p1_shared[v0, v1, v2, v3] = p1[v0, v1, v2, v3]
                            for rc_1, ry_1, rx_1, nn_3, ff_3, yy_3, xx_3, rc_2, ry_2, rx_2, nn_4, ff_4, yy_4, xx_4 in T.grid(T.int64(12), T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(4), T.int64(2)):
                                with T.block("conv2d_nchw"):
                                    v_nn = T.axis.spatial(T.int64(1), nn_3 + nn_4)
                                    v_ff = T.axis.spatial(T.int64(128), nn_0_ff_0_yy_0_xx_0_fused // T.int64(2) * T.int64(4) + nn_2_ff_2_yy_2_xx_2_fused // T.int64(49) * T.int64(2) + ff_3 + ff_4)
                                    v_yy = T.axis.spatial(T.int64(28), nn_2_ff_2_yy_2_xx_2_fused % T.int64(49) // T.int64(7) * T.int64(4) + yy_3 * T.int64(4) + yy_4)
                                    v_xx = T.axis.spatial(T.int64(28), nn_0_ff_0_yy_0_xx_0_fused % T.int64(2) * T.int64(14) + nn_2_ff_2_yy_2_xx_2_fused % T.int64(7) * T.int64(2) + xx_3 * T.int64(2) + xx_4)
                                    v_rc = T.axis.reduce(T.int64(192), rc_0 * T.int64(12) + rc_1 + rc_2)
                                    v_ry = T.axis.reduce(T.int64(1), ry_0 + ry_1 + ry_2)
                                    v_rx = T.axis.reduce(T.int64(1), rx_0 + rx_1 + rx_2)
                                    T.reads(pad_temp_shared[v_nn, v_rc, v_yy + v_ry, v_xx + v_rx], p1_shared[v_ff, v_rc, v_ry, v_rx])
                                    T.writes(conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx])
                                    T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 32, "meta_schedule.tiling_structure": "SSSRRSRS"})
                                    with T.init():
                                        conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx] = T.float32(0)
                                    conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx] = conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx] + pad_temp_shared[v_nn, v_rc, v_yy + v_ry, v_xx + v_rx] * p1_shared[v_ff, v_rc, v_ry, v_rx]
                        for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(2), T.int64(4), T.int64(2)):
                            with T.block("conv2d_nchw_local"):
                                v0 = T.axis.spatial(T.int64(1), ax0)
                                v1 = T.axis.spatial(T.int64(128), nn_0_ff_0_yy_0_xx_0_fused // T.int64(2) * T.int64(4) + nn_2_ff_2_yy_2_xx_2_fused // T.int64(49) * T.int64(2) + ax1)
                                v2 = T.axis.spatial(T.int64(28), nn_2_ff_2_yy_2_xx_2_fused % T.int64(49) // T.int64(7) * T.int64(4) + ax2)
                                v3 = T.axis.spatial(T.int64(28), nn_0_ff_0_yy_0_xx_0_fused % T.int64(2) * T.int64(14) + nn_2_ff_2_yy_2_xx_2_fused % T.int64(7) * T.int64(2) + ax3)
                                T.reads(conv2d_nchw_local[v0, v1, v2, v3], p2[v0, v1, T.int64(0), T.int64(0)])
                                T.writes(T_relu[v0, v1, v2, v3])
                                T_relu[v0, v1, v2, v3] = T.max(conv2d_nchw_local[v0, v1, v2, v3] + p2[v0, v1, T.int64(0), T.int64(0)], T.float32(0))
b0 = sch.get_block(name="pad_temp", func_name="main")
b1 = sch.get_block(name="conv2d_nchw", func_name="main")
b2 = sch.get_block(name="T_add", func_name="main")
b3 = sch.get_block(name="T_relu", func_name="main")
b4 = sch.get_block(name="root", func_name="main")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSSRRSRS")
l5, l6, l7, l8, l9, l10, l11 = sch.get_loops(block=b1)
v12, v13, v14, v15, v16 = sch.sample_perfect_tile(loop=l5, n=5, max_innermost_factor=64, decision=[1, 1, 1, 1, 1])
l17, l18, l19, l20, l21 = sch.split(loop=l5, factors=[v12, v13, v14, v15, v16], preserve_unit_iters=True)
v22, v23, v24, v25, v26 = sch.sample_perfect_tile(loop=l6, n=5, max_innermost_factor=64, decision=[32, 1, 2, 2, 1])
l27, l28, l29, l30, l31 = sch.split(loop=l6, factors=[v22, v23, v24, v25, v26], preserve_unit_iters=True)
v32, v33, v34, v35, v36 = sch.sample_perfect_tile(loop=l7, n=5, max_innermost_factor=64, decision=[1, 1, 7, 1, 4])
l37, l38, l39, l40, l41 = sch.split(loop=l7, factors=[v32, v33, v34, v35, v36], preserve_unit_iters=True)
v42, v43, v44, v45, v46 = sch.sample_perfect_tile(loop=l8, n=5, max_innermost_factor=64, decision=[2, 1, 7, 1, 2])
l47, l48, l49, l50, l51 = sch.split(loop=l8, factors=[v42, v43, v44, v45, v46], preserve_unit_iters=True)
v52, v53, v54 = sch.sample_perfect_tile(loop=l9, n=3, max_innermost_factor=64, decision=[16, 12, 1])
l55, l56, l57 = sch.split(loop=l9, factors=[v52, v53, v54], preserve_unit_iters=True)
v58, v59, v60 = sch.sample_perfect_tile(loop=l10, n=3, max_innermost_factor=64, decision=[1, 1, 1])
l61, l62, l63 = sch.split(loop=l10, factors=[v58, v59, v60], preserve_unit_iters=True)
v64, v65, v66 = sch.sample_perfect_tile(loop=l11, n=3, max_innermost_factor=64, decision=[1, 1, 1])
l67, l68, l69 = sch.split(loop=l11, factors=[v64, v65, v66], preserve_unit_iters=True)
sch.reorder(l17, l27, l37, l47, l18, l28, l38, l48, l19, l29, l39, l49, l55, l61, l67, l56, l62, l68, l20, l30, l40, l50, l57, l63, l69, l21, l31, l41, l51)
l70 = sch.fuse(l17, l27, l37, l47, preserve_unit_iters=True)
sch.bind(loop=l70, thread_axis="blockIdx.x")
l71 = sch.fuse(l18, l28, l38, l48, preserve_unit_iters=True)
sch.bind(loop=l71, thread_axis="vthread.x")
l72 = sch.fuse(l19, l29, l39, l49, preserve_unit_iters=True)
sch.bind(loop=l72, thread_axis="threadIdx.x")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_low_inclusive", ann_val=32)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_high_inclusive", ann_val=1024)
b73 = sch.cache_write(block=b1, write_buffer_index=0, storage_scope="local")
sch.reverse_compute_at(block=b73, loop=l72, preserve_unit_loops=True, index=-1)
b74 = sch.cache_read(block=b1, read_buffer_index=0, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b74, loop=l67, preserve_unit_loops=True, index=-1)
l75, l76, l77, l78, l79, l80, l81, l82, l83, l84 = sch.get_loops(block=b74)
l85 = sch.fuse(l81, l82, l83, l84, preserve_unit_iters=True)
v86 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=2)
sch.annotate(block_or_loop=b74, ann_key="meta_schedule.cooperative_fetch", ann_val=v86)
b87 = sch.cache_read(block=b1, read_buffer_index=1, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b87, loop=l67, preserve_unit_loops=True, index=-1)
l88, l89, l90, l91, l92, l93, l94, l95, l96, l97 = sch.get_loops(block=b87)
l98 = sch.fuse(l94, l95, l96, l97, preserve_unit_iters=True)
v99 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=1)
sch.annotate(block_or_loop=b87, ann_key="meta_schedule.cooperative_fetch", ann_val=v99)
sch.reverse_compute_inline(block=b3)
sch.reverse_compute_inline(block=b2)
sch.compute_inline(block=b0)
v100 = sch.sample_categorical(candidates=[0, 16, 64, 512, 1024], probs=[0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001], decision=4)
sch.annotate(block_or_loop=b4, ann_key="meta_schedule.unroll_explicit", ann_val=v100)
2024-05-01 15:06:07 [INFO] [task_scheduler.cc:170] Design space #1:
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(192), T.int64(28), T.int64(28)), "float32"), p1: T.Buffer((T.int64(128), T.int64(192), T.int64(1), T.int64(1)), "float32"), p2: T.Buffer((T.int64(1), T.int64(128), T.int64(1), T.int64(1)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(128), T.int64(28), T.int64(28)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        with T.block("root"):
            T.reads()
            T.writes()
            T.block_attr({"meta_schedule.unroll_explicit": 512})
            conv2d_nchw_local = T.alloc_buffer((T.int64(1), T.int64(128), T.int64(28), T.int64(28)), scope="local")
            pad_temp_shared = T.alloc_buffer((T.int64(1), T.int64(192), T.int64(28), T.int64(28)), scope="shared")
            p1_shared = T.alloc_buffer((T.int64(128), T.int64(192), T.int64(1), T.int64(1)), scope="shared")
            for nn_0_ff_0_yy_0_xx_0_fused in T.thread_binding(T.int64(64), thread="blockIdx.x"):
                for nn_1_ff_1_yy_1_xx_1_fused in T.thread_binding(T.int64(1), thread="vthread.x"):
                    for nn_2_ff_2_yy_2_xx_2_fused in T.thread_binding(T.int64(98), thread="threadIdx.x"):
                        for rc_0_ry_0_rx_0_fused in T.serial(T.int64(16), annotations={"software_pipeline_async_stages": [0], "software_pipeline_order": [0, 1, 2], "software_pipeline_stage": [0, 0, 2]}):
                            for ax0_ax1_ax2_ax3_fused in range(T.int64(4704)):
                                with T.block("pad_temp_shared"):
                                    v0 = T.axis.spatial(T.int64(1), T.int64(0))
                                    v1 = T.axis.spatial(T.int64(192), rc_0_ry_0_rx_0_fused * T.int64(12) + ax0_ax1_ax2_ax3_fused // T.int64(392))
                                    v2 = T.axis.spatial(T.int64(28), ax0_ax1_ax2_ax3_fused % T.int64(392) // T.int64(14))
                                    v3 = T.axis.spatial(T.int64(28), nn_0_ff_0_yy_0_xx_0_fused % T.int64(2) * T.int64(14) + ax0_ax1_ax2_ax3_fused % T.int64(14))
                                    T.reads(p0[v0, v1, v2, v3])
                                    T.writes(pad_temp_shared[v0, v1, v2, v3])
                                    T.block_attr({"meta_schedule.cooperative_fetch": 3})
                                    pad_temp_shared[v0, v1, v2, v3] = p0[v0, v1, v2, v3]
                            for ax0_ax1_ax2_ax3_fused in range(T.int64(48)):
                                with T.block("p1_shared"):
                                    v0 = T.axis.spatial(T.int64(128), nn_0_ff_0_yy_0_xx_0_fused // T.int64(2) * T.int64(4) + ax0_ax1_ax2_ax3_fused // T.int64(12))
                                    v1 = T.axis.spatial(T.int64(192), rc_0_ry_0_rx_0_fused * T.int64(12) + ax0_ax1_ax2_ax3_fused % T.int64(12))
                                    v2 = T.axis.spatial(T.int64(1), T.int64(0))
                                    v3 = T.axis.spatial(T.int64(1), T.int64(0))
                                    T.reads(p1[v0, v1, v2, v3])
                                    T.writes(p1_shared[v0, v1, v2, v3])
                                    T.block_attr({"meta_schedule.cooperative_fetch": 2})
                                    p1_shared[v0, v1, v2, v3] = p1[v0, v1, v2, v3]
                            for rc_1, ry_1, rx_1, nn_3, ff_3, yy_3, xx_3, rc_2, ry_2, rx_2, nn_4, ff_4, yy_4, xx_4 in T.grid(T.int64(12), T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(4), T.int64(2)):
                                with T.block("conv2d_nchw"):
                                    v_nn = T.axis.spatial(T.int64(1), nn_3 + nn_4)
                                    v_ff = T.axis.spatial(T.int64(128), nn_0_ff_0_yy_0_xx_0_fused // T.int64(2) * T.int64(4) + nn_2_ff_2_yy_2_xx_2_fused // T.int64(49) * T.int64(2) + ff_3 + ff_4)
                                    v_yy = T.axis.spatial(T.int64(28), nn_2_ff_2_yy_2_xx_2_fused % T.int64(49) // T.int64(7) * T.int64(4) + yy_3 * T.int64(4) + yy_4)
                                    v_xx = T.axis.spatial(T.int64(28), nn_0_ff_0_yy_0_xx_0_fused % T.int64(2) * T.int64(14) + nn_2_ff_2_yy_2_xx_2_fused % T.int64(7) * T.int64(2) + xx_3 * T.int64(2) + xx_4)
                                    v_rc = T.axis.reduce(T.int64(192), rc_0_ry_0_rx_0_fused * T.int64(12) + rc_1 + rc_2)
                                    v_ry = T.axis.reduce(T.int64(1), ry_1 + ry_2)
                                    v_rx = T.axis.reduce(T.int64(1), rx_1 + rx_2)
                                    T.reads(pad_temp_shared[v_nn, v_rc, v_yy + v_ry, v_xx + v_rx], p1_shared[v_ff, v_rc, v_ry, v_rx])
                                    T.writes(conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx])
                                    T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 32, "meta_schedule.tiling_structure": "SSSRRSRS"})
                                    with T.init():
                                        conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx] = T.float32(0)
                                    conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx] = conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx] + pad_temp_shared[v_nn, v_rc, v_yy + v_ry, v_xx + v_rx] * p1_shared[v_ff, v_rc, v_ry, v_rx]
                        for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(2), T.int64(4), T.int64(2)):
                            with T.block("conv2d_nchw_local"):
                                v0 = T.axis.spatial(T.int64(1), ax0)
                                v1 = T.axis.spatial(T.int64(128), nn_0_ff_0_yy_0_xx_0_fused // T.int64(2) * T.int64(4) + nn_2_ff_2_yy_2_xx_2_fused // T.int64(49) * T.int64(2) + ax1)
                                v2 = T.axis.spatial(T.int64(28), nn_2_ff_2_yy_2_xx_2_fused % T.int64(49) // T.int64(7) * T.int64(4) + ax2)
                                v3 = T.axis.spatial(T.int64(28), nn_0_ff_0_yy_0_xx_0_fused % T.int64(2) * T.int64(14) + nn_2_ff_2_yy_2_xx_2_fused % T.int64(7) * T.int64(2) + ax3)
                                T.reads(conv2d_nchw_local[v0, v1, v2, v3], p2[v0, v1, T.int64(0), T.int64(0)])
                                T.writes(T_relu[v0, v1, v2, v3])
                                T_relu[v0, v1, v2, v3] = T.max(conv2d_nchw_local[v0, v1, v2, v3] + p2[v0, v1, T.int64(0), T.int64(0)], T.float32(0))
b0 = sch.get_block(name="pad_temp", func_name="main")
b1 = sch.get_block(name="conv2d_nchw", func_name="main")
b2 = sch.get_block(name="T_add", func_name="main")
b3 = sch.get_block(name="T_relu", func_name="main")
b4 = sch.get_block(name="root", func_name="main")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSSRRSRS")
l5, l6, l7, l8, l9, l10, l11 = sch.get_loops(block=b1)
v12, v13, v14, v15, v16 = sch.sample_perfect_tile(loop=l5, n=5, max_innermost_factor=64, decision=[1, 1, 1, 1, 1])
l17, l18, l19, l20, l21 = sch.split(loop=l5, factors=[v12, v13, v14, v15, v16], preserve_unit_iters=True)
v22, v23, v24, v25, v26 = sch.sample_perfect_tile(loop=l6, n=5, max_innermost_factor=64, decision=[32, 1, 2, 2, 1])
l27, l28, l29, l30, l31 = sch.split(loop=l6, factors=[v22, v23, v24, v25, v26], preserve_unit_iters=True)
v32, v33, v34, v35, v36 = sch.sample_perfect_tile(loop=l7, n=5, max_innermost_factor=64, decision=[1, 1, 7, 1, 4])
l37, l38, l39, l40, l41 = sch.split(loop=l7, factors=[v32, v33, v34, v35, v36], preserve_unit_iters=True)
v42, v43, v44, v45, v46 = sch.sample_perfect_tile(loop=l8, n=5, max_innermost_factor=64, decision=[2, 1, 7, 1, 2])
l47, l48, l49, l50, l51 = sch.split(loop=l8, factors=[v42, v43, v44, v45, v46], preserve_unit_iters=True)
v52, v53, v54 = sch.sample_perfect_tile(loop=l9, n=3, max_innermost_factor=64, decision=[16, 12, 1])
l55, l56, l57 = sch.split(loop=l9, factors=[v52, v53, v54], preserve_unit_iters=True)
v58, v59, v60 = sch.sample_perfect_tile(loop=l10, n=3, max_innermost_factor=64, decision=[1, 1, 1])
l61, l62, l63 = sch.split(loop=l10, factors=[v58, v59, v60], preserve_unit_iters=True)
v64, v65, v66 = sch.sample_perfect_tile(loop=l11, n=3, max_innermost_factor=64, decision=[1, 1, 1])
l67, l68, l69 = sch.split(loop=l11, factors=[v64, v65, v66], preserve_unit_iters=True)
sch.reorder(l17, l27, l37, l47, l18, l28, l38, l48, l19, l29, l39, l49, l55, l61, l67, l56, l62, l68, l20, l30, l40, l50, l57, l63, l69, l21, l31, l41, l51)
l70 = sch.fuse(l17, l27, l37, l47, preserve_unit_iters=True)
sch.bind(loop=l70, thread_axis="blockIdx.x")
l71 = sch.fuse(l18, l28, l38, l48, preserve_unit_iters=True)
sch.bind(loop=l71, thread_axis="vthread.x")
l72 = sch.fuse(l19, l29, l39, l49, preserve_unit_iters=True)
sch.bind(loop=l72, thread_axis="threadIdx.x")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_low_inclusive", ann_val=32)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_high_inclusive", ann_val=1024)
b73 = sch.cache_write(block=b1, write_buffer_index=0, storage_scope="local")
sch.reverse_compute_at(block=b73, loop=l72, preserve_unit_loops=True, index=-1)
b74 = sch.cache_read(block=b1, read_buffer_index=0, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b74, loop=l67, preserve_unit_loops=True, index=-1)
l75, l76, l77, l78, l79, l80, l81, l82, l83, l84 = sch.get_loops(block=b74)
l85 = sch.fuse(l81, l82, l83, l84, preserve_unit_iters=True)
v86 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=2)
sch.annotate(block_or_loop=b74, ann_key="meta_schedule.cooperative_fetch", ann_val=v86)
b87 = sch.cache_read(block=b1, read_buffer_index=1, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b87, loop=l67, preserve_unit_loops=True, index=-1)
l88, l89, l90, l91, l92, l93, l94, l95, l96, l97 = sch.get_loops(block=b87)
l98 = sch.fuse(l94, l95, l96, l97, preserve_unit_iters=True)
v99 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=1)
sch.annotate(block_or_loop=b87, ann_key="meta_schedule.cooperative_fetch", ann_val=v99)
l100 = sch.fuse(l55, l61, l67, preserve_unit_iters=True)
sch.annotate(block_or_loop=l100, ann_key="software_pipeline_stage", ann_val=[0, 0, 2])
sch.annotate(block_or_loop=l100, ann_key="software_pipeline_order", ann_val=[0, 1, 2])
sch.annotate(block_or_loop=l100, ann_key="software_pipeline_async_stages", ann_val=[0])
sch.reverse_compute_inline(block=b3)
sch.reverse_compute_inline(block=b2)
sch.compute_inline(block=b0)
v101 = sch.sample_categorical(candidates=[0, 16, 64, 512, 1024], probs=[0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001], decision=3)
sch.annotate(block_or_loop=b4, ann_key="meta_schedule.unroll_explicit", ann_val=v101)
2024-05-01 15:06:07 [INFO] [task_scheduler.cc:170] Design space #2:
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(192), T.int64(28), T.int64(28)), "float32"), p1: T.Buffer((T.int64(128), T.int64(192), T.int64(1), T.int64(1)), "float32"), p2: T.Buffer((T.int64(1), T.int64(128), T.int64(1), T.int64(1)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(128), T.int64(28), T.int64(28)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        with T.block("root"):
            T.reads()
            T.writes()
            T.block_attr({"meta_schedule.unroll_explicit": 1024})
            conv2d_nchw_local = T.alloc_buffer((T.int64(1), T.int64(128), T.int64(28), T.int64(28)), scope="local")
            pad_temp_shared = T.alloc_buffer((T.int64(1), T.int64(192), T.int64(28), T.int64(28)), scope="shared")
            p1_shared = T.alloc_buffer((T.int64(128), T.int64(192), T.int64(1), T.int64(1)), scope="shared")
            for nn_0_ff_0_yy_0_xx_0_fused in T.thread_binding(T.int64(64), thread="blockIdx.x"):
                for nn_1_ff_1_yy_1_xx_1_fused in T.thread_binding(T.int64(1), thread="vthread.x"):
                    for nn_2_ff_2_yy_2_xx_2_fused in T.thread_binding(T.int64(98), thread="threadIdx.x"):
                        for rc_0_ry_0_rx_0_fused in T.serial(T.int64(16), annotations={"software_pipeline_async_stages": [0], "software_pipeline_order": [0, 1, 2], "software_pipeline_stage": [0, 0, 3]}):
                            for ax0_ax1_ax2_ax3_fused in range(T.int64(4704)):
                                with T.block("pad_temp_shared"):
                                    v0 = T.axis.spatial(T.int64(1), T.int64(0))
                                    v1 = T.axis.spatial(T.int64(192), rc_0_ry_0_rx_0_fused * T.int64(12) + ax0_ax1_ax2_ax3_fused // T.int64(392))
                                    v2 = T.axis.spatial(T.int64(28), ax0_ax1_ax2_ax3_fused % T.int64(392) // T.int64(14))
                                    v3 = T.axis.spatial(T.int64(28), nn_0_ff_0_yy_0_xx_0_fused % T.int64(2) * T.int64(14) + ax0_ax1_ax2_ax3_fused % T.int64(14))
                                    T.reads(p0[v0, v1, v2, v3])
                                    T.writes(pad_temp_shared[v0, v1, v2, v3])
                                    T.block_attr({"meta_schedule.cooperative_fetch": 3})
                                    pad_temp_shared[v0, v1, v2, v3] = p0[v0, v1, v2, v3]
                            for ax0_ax1_ax2_ax3_fused in range(T.int64(48)):
                                with T.block("p1_shared"):
                                    v0 = T.axis.spatial(T.int64(128), nn_0_ff_0_yy_0_xx_0_fused // T.int64(2) * T.int64(4) + ax0_ax1_ax2_ax3_fused // T.int64(12))
                                    v1 = T.axis.spatial(T.int64(192), rc_0_ry_0_rx_0_fused * T.int64(12) + ax0_ax1_ax2_ax3_fused % T.int64(12))
                                    v2 = T.axis.spatial(T.int64(1), T.int64(0))
                                    v3 = T.axis.spatial(T.int64(1), T.int64(0))
                                    T.reads(p1[v0, v1, v2, v3])
                                    T.writes(p1_shared[v0, v1, v2, v3])
                                    T.block_attr({"meta_schedule.cooperative_fetch": 2})
                                    p1_shared[v0, v1, v2, v3] = p1[v0, v1, v2, v3]
                            for rc_1, ry_1, rx_1, nn_3, ff_3, yy_3, xx_3, rc_2, ry_2, rx_2, nn_4, ff_4, yy_4, xx_4 in T.grid(T.int64(12), T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(4), T.int64(2)):
                                with T.block("conv2d_nchw"):
                                    v_nn = T.axis.spatial(T.int64(1), nn_3 + nn_4)
                                    v_ff = T.axis.spatial(T.int64(128), nn_0_ff_0_yy_0_xx_0_fused // T.int64(2) * T.int64(4) + nn_2_ff_2_yy_2_xx_2_fused // T.int64(49) * T.int64(2) + ff_3 + ff_4)
                                    v_yy = T.axis.spatial(T.int64(28), nn_2_ff_2_yy_2_xx_2_fused % T.int64(49) // T.int64(7) * T.int64(4) + yy_3 * T.int64(4) + yy_4)
                                    v_xx = T.axis.spatial(T.int64(28), nn_0_ff_0_yy_0_xx_0_fused % T.int64(2) * T.int64(14) + nn_2_ff_2_yy_2_xx_2_fused % T.int64(7) * T.int64(2) + xx_3 * T.int64(2) + xx_4)
                                    v_rc = T.axis.reduce(T.int64(192), rc_0_ry_0_rx_0_fused * T.int64(12) + rc_1 + rc_2)
                                    v_ry = T.axis.reduce(T.int64(1), ry_1 + ry_2)
                                    v_rx = T.axis.reduce(T.int64(1), rx_1 + rx_2)
                                    T.reads(pad_temp_shared[v_nn, v_rc, v_yy + v_ry, v_xx + v_rx], p1_shared[v_ff, v_rc, v_ry, v_rx])
                                    T.writes(conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx])
                                    T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 32, "meta_schedule.tiling_structure": "SSSRRSRS"})
                                    with T.init():
                                        conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx] = T.float32(0)
                                    conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx] = conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx] + pad_temp_shared[v_nn, v_rc, v_yy + v_ry, v_xx + v_rx] * p1_shared[v_ff, v_rc, v_ry, v_rx]
                        for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(2), T.int64(4), T.int64(2)):
                            with T.block("conv2d_nchw_local"):
                                v0 = T.axis.spatial(T.int64(1), ax0)
                                v1 = T.axis.spatial(T.int64(128), nn_0_ff_0_yy_0_xx_0_fused // T.int64(2) * T.int64(4) + nn_2_ff_2_yy_2_xx_2_fused // T.int64(49) * T.int64(2) + ax1)
                                v2 = T.axis.spatial(T.int64(28), nn_2_ff_2_yy_2_xx_2_fused % T.int64(49) // T.int64(7) * T.int64(4) + ax2)
                                v3 = T.axis.spatial(T.int64(28), nn_0_ff_0_yy_0_xx_0_fused % T.int64(2) * T.int64(14) + nn_2_ff_2_yy_2_xx_2_fused % T.int64(7) * T.int64(2) + ax3)
                                T.reads(conv2d_nchw_local[v0, v1, v2, v3], p2[v0, v1, T.int64(0), T.int64(0)])
                                T.writes(T_relu[v0, v1, v2, v3])
                                T_relu[v0, v1, v2, v3] = T.max(conv2d_nchw_local[v0, v1, v2, v3] + p2[v0, v1, T.int64(0), T.int64(0)], T.float32(0))
b0 = sch.get_block(name="pad_temp", func_name="main")
b1 = sch.get_block(name="conv2d_nchw", func_name="main")
b2 = sch.get_block(name="T_add", func_name="main")
b3 = sch.get_block(name="T_relu", func_name="main")
b4 = sch.get_block(name="root", func_name="main")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSSRRSRS")
l5, l6, l7, l8, l9, l10, l11 = sch.get_loops(block=b1)
v12, v13, v14, v15, v16 = sch.sample_perfect_tile(loop=l5, n=5, max_innermost_factor=64, decision=[1, 1, 1, 1, 1])
l17, l18, l19, l20, l21 = sch.split(loop=l5, factors=[v12, v13, v14, v15, v16], preserve_unit_iters=True)
v22, v23, v24, v25, v26 = sch.sample_perfect_tile(loop=l6, n=5, max_innermost_factor=64, decision=[32, 1, 2, 2, 1])
l27, l28, l29, l30, l31 = sch.split(loop=l6, factors=[v22, v23, v24, v25, v26], preserve_unit_iters=True)
v32, v33, v34, v35, v36 = sch.sample_perfect_tile(loop=l7, n=5, max_innermost_factor=64, decision=[1, 1, 7, 1, 4])
l37, l38, l39, l40, l41 = sch.split(loop=l7, factors=[v32, v33, v34, v35, v36], preserve_unit_iters=True)
v42, v43, v44, v45, v46 = sch.sample_perfect_tile(loop=l8, n=5, max_innermost_factor=64, decision=[2, 1, 7, 1, 2])
l47, l48, l49, l50, l51 = sch.split(loop=l8, factors=[v42, v43, v44, v45, v46], preserve_unit_iters=True)
v52, v53, v54 = sch.sample_perfect_tile(loop=l9, n=3, max_innermost_factor=64, decision=[16, 12, 1])
l55, l56, l57 = sch.split(loop=l9, factors=[v52, v53, v54], preserve_unit_iters=True)
v58, v59, v60 = sch.sample_perfect_tile(loop=l10, n=3, max_innermost_factor=64, decision=[1, 1, 1])
l61, l62, l63 = sch.split(loop=l10, factors=[v58, v59, v60], preserve_unit_iters=True)
v64, v65, v66 = sch.sample_perfect_tile(loop=l11, n=3, max_innermost_factor=64, decision=[1, 1, 1])
l67, l68, l69 = sch.split(loop=l11, factors=[v64, v65, v66], preserve_unit_iters=True)
sch.reorder(l17, l27, l37, l47, l18, l28, l38, l48, l19, l29, l39, l49, l55, l61, l67, l56, l62, l68, l20, l30, l40, l50, l57, l63, l69, l21, l31, l41, l51)
l70 = sch.fuse(l17, l27, l37, l47, preserve_unit_iters=True)
sch.bind(loop=l70, thread_axis="blockIdx.x")
l71 = sch.fuse(l18, l28, l38, l48, preserve_unit_iters=True)
sch.bind(loop=l71, thread_axis="vthread.x")
l72 = sch.fuse(l19, l29, l39, l49, preserve_unit_iters=True)
sch.bind(loop=l72, thread_axis="threadIdx.x")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_low_inclusive", ann_val=32)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_high_inclusive", ann_val=1024)
b73 = sch.cache_write(block=b1, write_buffer_index=0, storage_scope="local")
sch.reverse_compute_at(block=b73, loop=l72, preserve_unit_loops=True, index=-1)
b74 = sch.cache_read(block=b1, read_buffer_index=0, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b74, loop=l67, preserve_unit_loops=True, index=-1)
l75, l76, l77, l78, l79, l80, l81, l82, l83, l84 = sch.get_loops(block=b74)
l85 = sch.fuse(l81, l82, l83, l84, preserve_unit_iters=True)
v86 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=2)
sch.annotate(block_or_loop=b74, ann_key="meta_schedule.cooperative_fetch", ann_val=v86)
b87 = sch.cache_read(block=b1, read_buffer_index=1, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b87, loop=l67, preserve_unit_loops=True, index=-1)
l88, l89, l90, l91, l92, l93, l94, l95, l96, l97 = sch.get_loops(block=b87)
l98 = sch.fuse(l94, l95, l96, l97, preserve_unit_iters=True)
v99 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=1)
sch.annotate(block_or_loop=b87, ann_key="meta_schedule.cooperative_fetch", ann_val=v99)
l100 = sch.fuse(l55, l61, l67, preserve_unit_iters=True)
sch.annotate(block_or_loop=l100, ann_key="software_pipeline_stage", ann_val=[0, 0, 3])
sch.annotate(block_or_loop=l100, ann_key="software_pipeline_order", ann_val=[0, 1, 2])
sch.annotate(block_or_loop=l100, ann_key="software_pipeline_async_stages", ann_val=[0])
sch.reverse_compute_inline(block=b3)
sch.reverse_compute_inline(block=b2)
sch.compute_inline(block=b0)
v101 = sch.sample_categorical(candidates=[0, 16, 64, 512, 1024], probs=[0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001], decision=4)
sch.annotate(block_or_loop=b4, ann_key="meta_schedule.unroll_explicit", ann_val=v101)
2024-05-01 17:52:52 [INFO] [evolutionary_search.cc:713] Generating candidates......
2024-05-01 17:52:52 [INFO] [evolutionary_search.cc:715] Picked top 64 candidate(s) from database
2024-05-01 17:52:54 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x79177e8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0xe7a44c8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0xdb1b908)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x36a4438)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x32cfe88)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x11bcea48)]: 415 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x131e39c8)]: 0 failure(s)
2024-05-01 17:52:55 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x79177e8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0xe7a44c8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0xdb1b908)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x36a4438)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x32cfe88)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x11bcea48)]: 838 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x131e39c8)]: 0 failure(s)
2024-05-01 17:52:55 [INFO] [evolutionary_search.cc:723] Sampled 58 candidate(s)
2024-05-01 17:52:57 [INFO] [evolutionary_search.cc:621] Evolve iter #0 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x79177e8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0xe7a44c8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0xdb1b908)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x36a4438)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x32cfe88)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x11bcea48)]: 124 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x131e39c8)]: 0 failure(s)
2024-05-01 17:53:00 [INFO] [evolutionary_search.cc:621] Evolve iter #1 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x79177e8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0xe7a44c8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0xdb1b908)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x36a4438)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x32cfe88)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x11bcea48)]: 102 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x131e39c8)]: 0 failure(s)
2024-05-01 17:53:02 [INFO] [evolutionary_search.cc:621] Evolve iter #2 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x79177e8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0xe7a44c8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0xdb1b908)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x36a4438)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x32cfe88)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x11bcea48)]: 84 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x131e39c8)]: 0 failure(s)
2024-05-01 17:53:05 [INFO] [evolutionary_search.cc:621] Evolve iter #3 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x79177e8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0xe7a44c8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0xdb1b908)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x36a4438)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x32cfe88)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x11bcea48)]: 88 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x131e39c8)]: 0 failure(s)
2024-05-01 17:53:05 [INFO] [evolutionary_search.cc:649] Scores of the best 64 candidates:
[1 : 16]:	0.9998  0.9991  0.9987  0.9966  0.9965  0.9960  0.9957  0.9957  0.9951  0.9947  0.9946  0.9943  0.9940  0.9938  0.9937  0.9936
[17 : 32]:	0.9935  0.9922  0.9913  0.9900  0.9891  0.9885  0.9881  0.9876  0.9875  0.9871  0.9868  0.9862  0.9854  0.9850  0.9846  0.9840
[33 : 48]:	0.9833  0.9827  0.9825  0.9823  0.9815  0.9801  0.9801  0.9792  0.9791  0.9788  0.9779  0.9775  0.9774  0.9772  0.9770  0.9760
[49 : 64]:	0.9759  0.9756  0.9749  0.9745  0.9737  0.9735  0.9733  0.9727  0.9727  0.9718  0.9716  0.9714  0.9708  0.9707  0.9707  0.9698
2024-05-01 17:53:05 [INFO] [evolutionary_search.cc:727] Got 64 candidate(s) with evolutionary search
2024-05-01 17:53:05 [INFO] [evolutionary_search.cc:730] Sending 64 candidates(s) for measurement
2024-05-01 18:39:38 [INFO] [task_scheduler.cc:131] [Task #181: fused_nn_conv2d_add_nn_relu_89] Trial #1: GFLOPs: 1514.0956. Time: 25.5835 us. Best GFLOPs: 1514.0956
2024-05-01 18:39:38 [INFO] [task_scheduler.cc:131] [Task #181: fused_nn_conv2d_add_nn_relu_89] Trial #2: GFLOPs: 56.5296. Time: 685.2313 us. Best GFLOPs: 1514.0956
2024-05-01 18:39:38 [INFO] [task_scheduler.cc:131] [Task #181: fused_nn_conv2d_add_nn_relu_89] Trial #3: GFLOPs: 21.8331. Time: 1774.1788 us. Best GFLOPs: 1514.0956
2024-05-01 18:39:38 [INFO] [task_scheduler.cc:131] [Task #181: fused_nn_conv2d_add_nn_relu_89] Trial #4: GFLOPs: 2548.4886. Time: 15.1995 us. Best GFLOPs: 2548.4886
2024-05-01 18:39:38 [INFO] [task_scheduler.cc:131] [Task #181: fused_nn_conv2d_add_nn_relu_89] Trial #5: GFLOPs: 622.3642. Time: 62.2399 us. Best GFLOPs: 2548.4886
2024-05-01 18:39:38 [INFO] [task_scheduler.cc:131] [Task #181: fused_nn_conv2d_add_nn_relu_89] Trial #6: GFLOPs: 72.1812. Time: 536.6477 us. Best GFLOPs: 2548.4886
2024-05-01 18:39:38 [INFO] [task_scheduler.cc:131] [Task #181: fused_nn_conv2d_add_nn_relu_89] Trial #7: GFLOPs: 1031.8759. Time: 37.5393 us. Best GFLOPs: 2548.4886
2024-05-01 18:39:38 [INFO] [task_scheduler.cc:131] [Task #181: fused_nn_conv2d_add_nn_relu_89] Trial #8: GFLOPs: 674.1016. Time: 57.4630 us. Best GFLOPs: 2548.4886
2024-05-01 18:39:38 [INFO] [task_scheduler.cc:131] [Task #181: fused_nn_conv2d_add_nn_relu_89] Trial #9: GFLOPs: 1577.4173. Time: 24.5565 us. Best GFLOPs: 2548.4886
2024-05-01 18:39:38 [INFO] [task_scheduler.cc:131] [Task #181: fused_nn_conv2d_add_nn_relu_89] Trial #10: GFLOPs: 460.5839. Time: 84.1017 us. Best GFLOPs: 2548.4886
2024-05-01 18:39:38 [INFO] [task_scheduler.cc:131] [Task #181: fused_nn_conv2d_add_nn_relu_89] Trial #11: GFLOPs: 196.4768. Time: 197.1524 us. Best GFLOPs: 2548.4886
2024-05-01 18:39:38 [INFO] [task_scheduler.cc:131] [Task #181: fused_nn_conv2d_add_nn_relu_89] Trial #12: GFLOPs: 425.7435. Time: 90.9841 us. Best GFLOPs: 2548.4886
2024-05-01 18:39:38 [INFO] [task_scheduler.cc:131] [Task #181: fused_nn_conv2d_add_nn_relu_89] Trial #13: GFLOPs: 735.7597. Time: 52.6474 us. Best GFLOPs: 2548.4886
2024-05-01 18:39:38 [INFO] [task_scheduler.cc:131] [Task #181: fused_nn_conv2d_add_nn_relu_89] Trial #14: GFLOPs: 751.8215. Time: 51.5227 us. Best GFLOPs: 2548.4886
2024-05-01 18:39:38 [INFO] [task_scheduler.cc:131] [Task #181: fused_nn_conv2d_add_nn_relu_89] Trial #15: GFLOPs: 1544.9215. Time: 25.0730 us. Best GFLOPs: 2548.4886
2024-05-01 18:39:38 [INFO] [task_scheduler.cc:131] [Task #181: fused_nn_conv2d_add_nn_relu_89] Trial #16: GFLOPs: 620.0889. Time: 62.4683 us. Best GFLOPs: 2548.4886
2024-05-01 18:39:38 [INFO] [task_scheduler.cc:131] [Task #181: fused_nn_conv2d_add_nn_relu_89] Trial #17: GFLOPs: 513.2341. Time: 75.4741 us. Best GFLOPs: 2548.4886
2024-05-01 18:39:38 [INFO] [task_scheduler.cc:131] [Task #181: fused_nn_conv2d_add_nn_relu_89] Trial #18: GFLOPs: 1242.8573. Time: 31.1668 us. Best GFLOPs: 2548.4886
2024-05-01 18:39:38 [INFO] [task_scheduler.cc:131] [Task #181: fused_nn_conv2d_add_nn_relu_89] Trial #19: GFLOPs: 24.8970. Time: 1555.8438 us. Best GFLOPs: 2548.4886
2024-05-01 18:39:38 [INFO] [task_scheduler.cc:131] [Task #181: fused_nn_conv2d_add_nn_relu_89] Trial #20: GFLOPs: 634.7638. Time: 61.0241 us. Best GFLOPs: 2548.4886
2024-05-01 18:39:38 [INFO] [task_scheduler.cc:131] [Task #181: fused_nn_conv2d_add_nn_relu_89] Trial #21: GFLOPs: 32.6673. Time: 1185.7679 us. Best GFLOPs: 2548.4886
2024-05-01 18:39:38 [INFO] [task_scheduler.cc:131] [Task #181: fused_nn_conv2d_add_nn_relu_89] Trial #22: GFLOPs: 15.6484. Time: 2475.3825 us. Best GFLOPs: 2548.4886
2024-05-01 18:39:38 [INFO] [task_scheduler.cc:131] [Task #181: fused_nn_conv2d_add_nn_relu_89] Trial #23: GFLOPs: 956.3528. Time: 40.5037 us. Best GFLOPs: 2548.4886
2024-05-01 18:39:38 [INFO] [task_scheduler.cc:131] [Task #181: fused_nn_conv2d_add_nn_relu_89] Trial #24: GFLOPs: 37.8883. Time: 1022.3699 us. Best GFLOPs: 2548.4886
2024-05-01 18:39:38 [INFO] [task_scheduler.cc:131] [Task #181: fused_nn_conv2d_add_nn_relu_89] Trial #25: GFLOPs: 1698.8849. Time: 22.8008 us. Best GFLOPs: 2548.4886
2024-05-01 18:39:38 [INFO] [task_scheduler.cc:131] [Task #181: fused_nn_conv2d_add_nn_relu_89] Trial #26: GFLOPs: 22.1802. Time: 1746.4143 us. Best GFLOPs: 2548.4886
2024-05-01 18:39:38 [INFO] [task_scheduler.cc:131] [Task #181: fused_nn_conv2d_add_nn_relu_89] Trial #27: GFLOPs: 1105.1421. Time: 35.0506 us. Best GFLOPs: 2548.4886
2024-05-01 18:39:38 [INFO] [task_scheduler.cc:131] [Task #181: fused_nn_conv2d_add_nn_relu_89] Trial #28: GFLOPs: 136.9169. Time: 282.9153 us. Best GFLOPs: 2548.4886
2024-05-01 18:39:38 [INFO] [task_scheduler.cc:131] [Task #181: fused_nn_conv2d_add_nn_relu_89] Trial #29: GFLOPs: 636.2269. Time: 60.8837 us. Best GFLOPs: 2548.4886
2024-05-01 18:39:38 [INFO] [task_scheduler.cc:131] [Task #181: fused_nn_conv2d_add_nn_relu_89] Trial #30: GFLOPs: 21.0411. Time: 1840.9658 us. Best GFLOPs: 2548.4886
2024-05-01 18:39:38 [INFO] [task_scheduler.cc:131] [Task #181: fused_nn_conv2d_add_nn_relu_89] Trial #31: GFLOPs: 106.3178. Time: 364.3406 us. Best GFLOPs: 2548.4886
2024-05-01 18:39:38 [INFO] [task_scheduler.cc:131] [Task #181: fused_nn_conv2d_add_nn_relu_89] Trial #32: GFLOPs: 128.0516. Time: 302.5020 us. Best GFLOPs: 2548.4886
2024-05-01 18:39:38 [INFO] [task_scheduler.cc:131] [Task #181: fused_nn_conv2d_add_nn_relu_89] Trial #33: GFLOPs: 2315.4137. Time: 16.7296 us. Best GFLOPs: 2548.4886
2024-05-01 18:39:38 [INFO] [task_scheduler.cc:131] [Task #181: fused_nn_conv2d_add_nn_relu_89] Trial #34: GFLOPs: 1367.2375. Time: 28.3315 us. Best GFLOPs: 2548.4886
2024-05-01 18:39:38 [INFO] [task_scheduler.cc:131] [Task #181: fused_nn_conv2d_add_nn_relu_89] Trial #35: GFLOPs: 16.8175. Time: 2303.3019 us. Best GFLOPs: 2548.4886
2024-05-01 18:39:38 [INFO] [task_scheduler.cc:131] [Task #181: fused_nn_conv2d_add_nn_relu_89] Trial #36: GFLOPs: 1931.9226. Time: 20.0504 us. Best GFLOPs: 2548.4886
2024-05-01 18:39:38 [INFO] [task_scheduler.cc:131] [Task #181: fused_nn_conv2d_add_nn_relu_89] Trial #37: GFLOPs: 338.4087. Time: 114.4648 us. Best GFLOPs: 2548.4886
2024-05-01 18:39:38 [INFO] [task_scheduler.cc:131] [Task #181: fused_nn_conv2d_add_nn_relu_89] Trial #38: GFLOPs: 568.3529. Time: 68.1546 us. Best GFLOPs: 2548.4886
2024-05-01 18:39:38 [INFO] [task_scheduler.cc:131] [Task #181: fused_nn_conv2d_add_nn_relu_89] Trial #39: GFLOPs: 159.0255. Time: 243.5828 us. Best GFLOPs: 2548.4886
2024-05-01 18:39:38 [INFO] [task_scheduler.cc:131] [Task #181: fused_nn_conv2d_add_nn_relu_89] Trial #40: GFLOPs: 778.7764. Time: 49.7394 us. Best GFLOPs: 2548.4886
2024-05-01 18:39:38 [INFO] [task_scheduler.cc:131] [Task #181: fused_nn_conv2d_add_nn_relu_89] Trial #41: GFLOPs: 1330.4936. Time: 29.1139 us. Best GFLOPs: 2548.4886
2024-05-01 18:39:38 [INFO] [task_scheduler.cc:131] [Task #181: fused_nn_conv2d_add_nn_relu_89] Trial #42: GFLOPs: 65.1631. Time: 594.4452 us. Best GFLOPs: 2548.4886
2024-05-01 18:39:38 [INFO] [task_scheduler.cc:131] [Task #181: fused_nn_conv2d_add_nn_relu_89] Trial #43: GFLOPs: 308.2476. Time: 125.6648 us. Best GFLOPs: 2548.4886
2024-05-01 18:39:38 [INFO] [task_scheduler.cc:131] [Task #181: fused_nn_conv2d_add_nn_relu_89] Trial #44: GFLOPs: 470.6232. Time: 82.3076 us. Best GFLOPs: 2548.4886
2024-05-01 18:39:38 [INFO] [task_scheduler.cc:131] [Task #181: fused_nn_conv2d_add_nn_relu_89] Trial #45: GFLOPs: 112.7504. Time: 343.5542 us. Best GFLOPs: 2548.4886
2024-05-01 18:39:38 [INFO] [task_scheduler.cc:131] [Task #181: fused_nn_conv2d_add_nn_relu_89] Trial #46: GFLOPs: 42.2179. Time: 917.5228 us. Best GFLOPs: 2548.4886
2024-05-01 18:39:38 [INFO] [task_scheduler.cc:131] [Task #181: fused_nn_conv2d_add_nn_relu_89] Trial #47: GFLOPs: 2470.2154. Time: 15.6812 us. Best GFLOPs: 2548.4886
2024-05-01 18:39:38 [INFO] [task_scheduler.cc:131] [Task #181: fused_nn_conv2d_add_nn_relu_89] Trial #48: GFLOPs: 472.7049. Time: 81.9451 us. Best GFLOPs: 2548.4886
2024-05-01 18:39:38 [INFO] [task_scheduler.cc:131] [Task #181: fused_nn_conv2d_add_nn_relu_89] Trial #49: GFLOPs: 1465.2097. Time: 26.4371 us. Best GFLOPs: 2548.4886
2024-05-01 18:39:38 [INFO] [task_scheduler.cc:131] [Task #181: fused_nn_conv2d_add_nn_relu_89] Trial #50: GFLOPs: 5.6456. Time: 6861.2777 us. Best GFLOPs: 2548.4886
2024-05-01 18:39:38 [INFO] [task_scheduler.cc:131] [Task #181: fused_nn_conv2d_add_nn_relu_89] Trial #51: GFLOPs: 238.3043. Time: 162.5479 us. Best GFLOPs: 2548.4886
2024-05-01 18:39:38 [INFO] [task_scheduler.cc:131] [Task #181: fused_nn_conv2d_add_nn_relu_89] Trial #52: GFLOPs: 568.7996. Time: 68.1011 us. Best GFLOPs: 2548.4886
2024-05-01 18:39:38 [INFO] [task_scheduler.cc:131] [Task #181: fused_nn_conv2d_add_nn_relu_89] Trial #53: GFLOPs: 80.1985. Time: 483.0000 us. Best GFLOPs: 2548.4886
2024-05-01 18:39:38 [INFO] [task_scheduler.cc:131] [Task #181: fused_nn_conv2d_add_nn_relu_89] Trial #54: GFLOPs: 4.4331. Time: 8737.8775 us. Best GFLOPs: 2548.4886
2024-05-01 18:39:38 [INFO] [task_scheduler.cc:131] [Task #181: fused_nn_conv2d_add_nn_relu_89] Trial #55: GFLOPs: 713.0053. Time: 54.3276 us. Best GFLOPs: 2548.4886
2024-05-01 18:39:38 [INFO] [task_scheduler.cc:131] [Task #181: fused_nn_conv2d_add_nn_relu_89] Trial #56: GFLOPs: 913.2789. Time: 42.4141 us. Best GFLOPs: 2548.4886
2024-05-01 18:39:38 [INFO] [task_scheduler.cc:131] [Task #181: fused_nn_conv2d_add_nn_relu_89] Trial #57: GFLOPs: 331.9502. Time: 116.6918 us. Best GFLOPs: 2548.4886
2024-05-01 18:39:38 [INFO] [task_scheduler.cc:131] [Task #181: fused_nn_conv2d_add_nn_relu_89] Trial #58: GFLOPs: 520.6209. Time: 74.4032 us. Best GFLOPs: 2548.4886
2024-05-01 18:39:38 [INFO] [task_scheduler.cc:131] [Task #181: fused_nn_conv2d_add_nn_relu_89] Trial #59: GFLOPs: 17.3267. Time: 2235.6196 us. Best GFLOPs: 2548.4886
2024-05-01 18:39:38 [INFO] [task_scheduler.cc:131] [Task #181: fused_nn_conv2d_add_nn_relu_89] Trial #60: GFLOPs: 580.2707. Time: 66.7548 us. Best GFLOPs: 2548.4886
2024-05-01 18:39:38 [INFO] [task_scheduler.cc:131] [Task #181: fused_nn_conv2d_add_nn_relu_89] Trial #61: GFLOPs: 23.1135. Time: 1675.8954 us. Best GFLOPs: 2548.4886
2024-05-01 18:39:38 [INFO] [task_scheduler.cc:131] [Task #181: fused_nn_conv2d_add_nn_relu_89] Trial #62: GFLOPs: 1792.9453. Time: 21.6046 us. Best GFLOPs: 2548.4886
2024-05-01 18:39:38 [INFO] [task_scheduler.cc:131] [Task #181: fused_nn_conv2d_add_nn_relu_89] Trial #63: GFLOPs: 1577.1647. Time: 24.5604 us. Best GFLOPs: 2548.4886
2024-05-01 18:39:38 [INFO] [task_scheduler.cc:131] [Task #181: fused_nn_conv2d_add_nn_relu_89] Trial #64: GFLOPs: 640.8244. Time: 60.4469 us. Best GFLOPs: 2548.4886
