2024-04-29 16:31:41 [INFO] [task_scheduler.cc:160] Initializing Task #78: "fused_nn_conv2d_add_nn_relu_38"
2024-04-29 16:31:41 [INFO] [task_scheduler.cc:35] 
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(1568), T.int64(14), T.int64(14)), "float32"), p1: T.Buffer((T.int64(128), T.int64(1568), T.int64(1), T.int64(1)), "float32"), p2: T.Buffer((T.int64(1), T.int64(128), T.int64(1), T.int64(1)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(128), T.int64(14), T.int64(14)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        pad_temp = T.alloc_buffer((T.int64(1), T.int64(1568), T.int64(14), T.int64(14)))
        conv2d_nchw = T.alloc_buffer((T.int64(1), T.int64(128), T.int64(14), T.int64(14)))
        T_add = T.alloc_buffer((T.int64(1), T.int64(128), T.int64(14), T.int64(14)))
        for i0, i1, i2, i3 in T.grid(T.int64(1), T.int64(1568), T.int64(14), T.int64(14)):
            with T.block("pad_temp"):
                v_i0, v_i1, v_i2, v_i3 = T.axis.remap("SSSS", [i0, i1, i2, i3])
                T.reads(p0[v_i0, v_i1, v_i2, v_i3])
                T.writes(pad_temp[v_i0, v_i1, v_i2, v_i3])
                pad_temp[v_i0, v_i1, v_i2, v_i3] = p0[v_i0, v_i1, v_i2, v_i3]
        for nn, ff, yy, xx, rc, ry, rx in T.grid(T.int64(1), T.int64(128), T.int64(14), T.int64(14), T.int64(1568), T.int64(1), T.int64(1)):
            with T.block("conv2d_nchw"):
                v_nn, v_ff, v_yy, v_xx, v_rc, v_ry, v_rx = T.axis.remap("SSSSRRR", [nn, ff, yy, xx, rc, ry, rx])
                T.reads(pad_temp[v_nn, v_rc, v_yy + v_ry, v_xx + v_rx], p1[v_ff, v_rc, v_ry, v_rx])
                T.writes(conv2d_nchw[v_nn, v_ff, v_yy, v_xx])
                with T.init():
                    conv2d_nchw[v_nn, v_ff, v_yy, v_xx] = T.float32(0)
                conv2d_nchw[v_nn, v_ff, v_yy, v_xx] = conv2d_nchw[v_nn, v_ff, v_yy, v_xx] + pad_temp[v_nn, v_rc, v_yy + v_ry, v_xx + v_rx] * p1[v_ff, v_rc, v_ry, v_rx]
        for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(128), T.int64(14), T.int64(14)):
            with T.block("T_add"):
                v_ax0, v_ax1, v_ax2, v_ax3 = T.axis.remap("SSSS", [ax0, ax1, ax2, ax3])
                T.reads(conv2d_nchw[v_ax0, v_ax1, v_ax2, v_ax3], p2[v_ax0, v_ax1, T.int64(0), T.int64(0)])
                T.writes(T_add[v_ax0, v_ax1, v_ax2, v_ax3])
                T_add[v_ax0, v_ax1, v_ax2, v_ax3] = conv2d_nchw[v_ax0, v_ax1, v_ax2, v_ax3] + p2[v_ax0, v_ax1, T.int64(0), T.int64(0)]
        for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(128), T.int64(14), T.int64(14)):
            with T.block("T_relu"):
                v_ax0, v_ax1, v_ax2, v_ax3 = T.axis.remap("SSSS", [ax0, ax1, ax2, ax3])
                T.reads(T_add[v_ax0, v_ax1, v_ax2, v_ax3])
                T.writes(T_relu[v_ax0, v_ax1, v_ax2, v_ax3])
                T_relu[v_ax0, v_ax1, v_ax2, v_ax3] = T.max(T_add[v_ax0, v_ax1, v_ax2, v_ax3], T.float32(0))
2024-04-29 16:31:41 [INFO] [task_scheduler.cc:164] Total 3 design space(s) generated
2024-04-29 16:31:41 [INFO] [task_scheduler.cc:170] Design space #0:
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(1568), T.int64(14), T.int64(14)), "float32"), p1: T.Buffer((T.int64(128), T.int64(1568), T.int64(1), T.int64(1)), "float32"), p2: T.Buffer((T.int64(1), T.int64(128), T.int64(1), T.int64(1)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(128), T.int64(14), T.int64(14)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        with T.block("root"):
            T.reads()
            T.writes()
            T.block_attr({"meta_schedule.unroll_explicit": 0})
            conv2d_nchw_local = T.alloc_buffer((T.int64(1), T.int64(128), T.int64(14), T.int64(14)), scope="local")
            pad_temp_shared = T.alloc_buffer((T.int64(1), T.int64(1568), T.int64(14), T.int64(14)), scope="shared")
            p1_shared = T.alloc_buffer((T.int64(128), T.int64(1568), T.int64(1), T.int64(1)), scope="shared")
            for nn_0_ff_0_yy_0_xx_0_fused in T.thread_binding(T.int64(8), thread="blockIdx.x"):
                for nn_1_ff_1_yy_1_xx_1_fused in T.thread_binding(T.int64(14), thread="vthread.x"):
                    for nn_2_ff_2_yy_2_xx_2_fused in T.thread_binding(T.int64(8), thread="threadIdx.x"):
                        for rc_0, ry_0, rx_0 in T.grid(T.int64(32), T.int64(1), T.int64(1)):
                            for ax0_ax1_ax2_ax3_fused in range(T.int64(9604)):
                                with T.block("pad_temp_shared"):
                                    v0 = T.axis.spatial(T.int64(1), T.int64(0))
                                    v1 = T.axis.spatial(T.int64(1568), rc_0 * T.int64(49) + ax0_ax1_ax2_ax3_fused // T.int64(196))
                                    v2 = T.axis.spatial(T.int64(14), ax0_ax1_ax2_ax3_fused % T.int64(196) // T.int64(14))
                                    v3 = T.axis.spatial(T.int64(14), ax0_ax1_ax2_ax3_fused % T.int64(14))
                                    T.reads(p0[v0, v1, v2, v3])
                                    T.writes(pad_temp_shared[v0, v1, v2, v3])
                                    T.block_attr({"meta_schedule.cooperative_fetch": 3})
                                    pad_temp_shared[v0, v1, v2, v3] = p0[v0, v1, v2, v3]
                            for ax0_ax1_ax2_ax3_fused in range(T.int64(784)):
                                with T.block("p1_shared"):
                                    v0 = T.axis.spatial(T.int64(128), nn_0_ff_0_yy_0_xx_0_fused * T.int64(16) + ax0_ax1_ax2_ax3_fused // T.int64(49))
                                    v1 = T.axis.spatial(T.int64(1568), rc_0 * T.int64(49) + ax0_ax1_ax2_ax3_fused % T.int64(49))
                                    v2 = T.axis.spatial(T.int64(1), T.int64(0))
                                    v3 = T.axis.spatial(T.int64(1), T.int64(0))
                                    T.reads(p1[v0, v1, v2, v3])
                                    T.writes(p1_shared[v0, v1, v2, v3])
                                    T.block_attr({"meta_schedule.cooperative_fetch": 3})
                                    p1_shared[v0, v1, v2, v3] = p1[v0, v1, v2, v3]
                            for rc_1, ry_1, rx_1, nn_3, ff_3, yy_3, xx_3, rc_2, ry_2, rx_2, nn_4, ff_4, yy_4, xx_4 in T.grid(T.int64(7), T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(7), T.int64(1), T.int64(7), T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(1), T.int64(1)):
                                with T.block("conv2d_nchw"):
                                    v_nn = T.axis.spatial(T.int64(1), nn_3 + nn_4)
                                    v_ff = T.axis.spatial(T.int64(128), nn_0_ff_0_yy_0_xx_0_fused * T.int64(16) + nn_2_ff_2_yy_2_xx_2_fused // T.int64(2) * T.int64(4) + ff_3 * T.int64(2) + ff_4)
                                    v_yy = T.axis.spatial(T.int64(14), nn_1_ff_1_yy_1_xx_1_fused // T.int64(7) * T.int64(7) + yy_3 + yy_4)
                                    v_xx = T.axis.spatial(T.int64(14), nn_1_ff_1_yy_1_xx_1_fused % T.int64(7) * T.int64(2) + nn_2_ff_2_yy_2_xx_2_fused % T.int64(2) + xx_3 + xx_4)
                                    v_rc = T.axis.reduce(T.int64(1568), rc_0 * T.int64(49) + rc_1 * T.int64(7) + rc_2)
                                    v_ry = T.axis.reduce(T.int64(1), ry_0 + ry_1 + ry_2)
                                    v_rx = T.axis.reduce(T.int64(1), rx_0 + rx_1 + rx_2)
                                    T.reads(pad_temp_shared[v_nn, v_rc, v_yy + v_ry, v_xx + v_rx], p1_shared[v_ff, v_rc, v_ry, v_rx])
                                    T.writes(conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx])
                                    T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 32, "meta_schedule.tiling_structure": "SSSRRSRS"})
                                    with T.init():
                                        conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx] = T.float32(0)
                                    conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx] = conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx] + pad_temp_shared[v_nn, v_rc, v_yy + v_ry, v_xx + v_rx] * p1_shared[v_ff, v_rc, v_ry, v_rx]
                        for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(4), T.int64(7), T.int64(1)):
                            with T.block("conv2d_nchw_local"):
                                v0 = T.axis.spatial(T.int64(1), ax0)
                                v1 = T.axis.spatial(T.int64(128), nn_0_ff_0_yy_0_xx_0_fused * T.int64(16) + nn_2_ff_2_yy_2_xx_2_fused // T.int64(2) * T.int64(4) + ax1)
                                v2 = T.axis.spatial(T.int64(14), nn_1_ff_1_yy_1_xx_1_fused // T.int64(7) * T.int64(7) + ax2)
                                v3 = T.axis.spatial(T.int64(14), nn_1_ff_1_yy_1_xx_1_fused % T.int64(7) * T.int64(2) + nn_2_ff_2_yy_2_xx_2_fused % T.int64(2) + ax3)
                                T.reads(conv2d_nchw_local[v0, v1, v2, v3], p2[v0, v1, T.int64(0), T.int64(0)])
                                T.writes(T_relu[v0, v1, v2, v3])
                                T_relu[v0, v1, v2, v3] = T.max(conv2d_nchw_local[v0, v1, v2, v3] + p2[v0, v1, T.int64(0), T.int64(0)], T.float32(0))
b0 = sch.get_block(name="pad_temp", func_name="main")
b1 = sch.get_block(name="conv2d_nchw", func_name="main")
b2 = sch.get_block(name="T_add", func_name="main")
b3 = sch.get_block(name="T_relu", func_name="main")
b4 = sch.get_block(name="root", func_name="main")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSSRRSRS")
l5, l6, l7, l8, l9, l10, l11 = sch.get_loops(block=b1)
v12, v13, v14, v15, v16 = sch.sample_perfect_tile(loop=l5, n=5, max_innermost_factor=64, decision=[1, 1, 1, 1, 1])
l17, l18, l19, l20, l21 = sch.split(loop=l5, factors=[v12, v13, v14, v15, v16], preserve_unit_iters=True)
v22, v23, v24, v25, v26 = sch.sample_perfect_tile(loop=l6, n=5, max_innermost_factor=64, decision=[8, 1, 4, 2, 2])
l27, l28, l29, l30, l31 = sch.split(loop=l6, factors=[v22, v23, v24, v25, v26], preserve_unit_iters=True)
v32, v33, v34, v35, v36 = sch.sample_perfect_tile(loop=l7, n=5, max_innermost_factor=64, decision=[1, 2, 1, 7, 1])
l37, l38, l39, l40, l41 = sch.split(loop=l7, factors=[v32, v33, v34, v35, v36], preserve_unit_iters=True)
v42, v43, v44, v45, v46 = sch.sample_perfect_tile(loop=l8, n=5, max_innermost_factor=64, decision=[1, 7, 2, 1, 1])
l47, l48, l49, l50, l51 = sch.split(loop=l8, factors=[v42, v43, v44, v45, v46], preserve_unit_iters=True)
v52, v53, v54 = sch.sample_perfect_tile(loop=l9, n=3, max_innermost_factor=64, decision=[32, 7, 7])
l55, l56, l57 = sch.split(loop=l9, factors=[v52, v53, v54], preserve_unit_iters=True)
v58, v59, v60 = sch.sample_perfect_tile(loop=l10, n=3, max_innermost_factor=64, decision=[1, 1, 1])
l61, l62, l63 = sch.split(loop=l10, factors=[v58, v59, v60], preserve_unit_iters=True)
v64, v65, v66 = sch.sample_perfect_tile(loop=l11, n=3, max_innermost_factor=64, decision=[1, 1, 1])
l67, l68, l69 = sch.split(loop=l11, factors=[v64, v65, v66], preserve_unit_iters=True)
sch.reorder(l17, l27, l37, l47, l18, l28, l38, l48, l19, l29, l39, l49, l55, l61, l67, l56, l62, l68, l20, l30, l40, l50, l57, l63, l69, l21, l31, l41, l51)
l70 = sch.fuse(l17, l27, l37, l47, preserve_unit_iters=True)
sch.bind(loop=l70, thread_axis="blockIdx.x")
l71 = sch.fuse(l18, l28, l38, l48, preserve_unit_iters=True)
sch.bind(loop=l71, thread_axis="vthread.x")
l72 = sch.fuse(l19, l29, l39, l49, preserve_unit_iters=True)
sch.bind(loop=l72, thread_axis="threadIdx.x")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_low_inclusive", ann_val=32)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_high_inclusive", ann_val=1024)
b73 = sch.cache_write(block=b1, write_buffer_index=0, storage_scope="local")
sch.reverse_compute_at(block=b73, loop=l72, preserve_unit_loops=True, index=-1)
b74 = sch.cache_read(block=b1, read_buffer_index=0, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b74, loop=l67, preserve_unit_loops=True, index=-1)
l75, l76, l77, l78, l79, l80, l81, l82, l83, l84 = sch.get_loops(block=b74)
l85 = sch.fuse(l81, l82, l83, l84, preserve_unit_iters=True)
v86 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=2)
sch.annotate(block_or_loop=b74, ann_key="meta_schedule.cooperative_fetch", ann_val=v86)
b87 = sch.cache_read(block=b1, read_buffer_index=1, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b87, loop=l67, preserve_unit_loops=True, index=-1)
l88, l89, l90, l91, l92, l93, l94, l95, l96, l97 = sch.get_loops(block=b87)
l98 = sch.fuse(l94, l95, l96, l97, preserve_unit_iters=True)
v99 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=2)
sch.annotate(block_or_loop=b87, ann_key="meta_schedule.cooperative_fetch", ann_val=v99)
sch.reverse_compute_inline(block=b3)
sch.reverse_compute_inline(block=b2)
sch.compute_inline(block=b0)
v100 = sch.sample_categorical(candidates=[0, 16, 64, 512, 1024], probs=[0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001], decision=0)
sch.annotate(block_or_loop=b4, ann_key="meta_schedule.unroll_explicit", ann_val=v100)
2024-04-29 16:31:41 [INFO] [task_scheduler.cc:170] Design space #1:
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(1568), T.int64(14), T.int64(14)), "float32"), p1: T.Buffer((T.int64(128), T.int64(1568), T.int64(1), T.int64(1)), "float32"), p2: T.Buffer((T.int64(1), T.int64(128), T.int64(1), T.int64(1)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(128), T.int64(14), T.int64(14)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        with T.block("root"):
            T.reads()
            T.writes()
            T.block_attr({"meta_schedule.unroll_explicit": 512})
            conv2d_nchw_local = T.alloc_buffer((T.int64(1), T.int64(128), T.int64(14), T.int64(14)), scope="local")
            pad_temp_shared = T.alloc_buffer((T.int64(1), T.int64(1568), T.int64(14), T.int64(14)), scope="shared")
            p1_shared = T.alloc_buffer((T.int64(128), T.int64(1568), T.int64(1), T.int64(1)), scope="shared")
            for nn_0_ff_0_yy_0_xx_0_fused in T.thread_binding(T.int64(8), thread="blockIdx.x"):
                for nn_1_ff_1_yy_1_xx_1_fused in T.thread_binding(T.int64(14), thread="vthread.x"):
                    for nn_2_ff_2_yy_2_xx_2_fused in T.thread_binding(T.int64(8), thread="threadIdx.x"):
                        for rc_0_ry_0_rx_0_fused in T.serial(T.int64(32), annotations={"software_pipeline_async_stages": [0], "software_pipeline_order": [0, 1, 2], "software_pipeline_stage": [0, 0, 2]}):
                            for ax0_ax1_ax2_ax3_fused in range(T.int64(9604)):
                                with T.block("pad_temp_shared"):
                                    v0 = T.axis.spatial(T.int64(1), T.int64(0))
                                    v1 = T.axis.spatial(T.int64(1568), rc_0_ry_0_rx_0_fused * T.int64(49) + ax0_ax1_ax2_ax3_fused // T.int64(196))
                                    v2 = T.axis.spatial(T.int64(14), ax0_ax1_ax2_ax3_fused % T.int64(196) // T.int64(14))
                                    v3 = T.axis.spatial(T.int64(14), ax0_ax1_ax2_ax3_fused % T.int64(14))
                                    T.reads(p0[v0, v1, v2, v3])
                                    T.writes(pad_temp_shared[v0, v1, v2, v3])
                                    T.block_attr({"meta_schedule.cooperative_fetch": 3})
                                    pad_temp_shared[v0, v1, v2, v3] = p0[v0, v1, v2, v3]
                            for ax0_ax1_ax2_ax3_fused in range(T.int64(784)):
                                with T.block("p1_shared"):
                                    v0 = T.axis.spatial(T.int64(128), nn_0_ff_0_yy_0_xx_0_fused * T.int64(16) + ax0_ax1_ax2_ax3_fused // T.int64(49))
                                    v1 = T.axis.spatial(T.int64(1568), rc_0_ry_0_rx_0_fused * T.int64(49) + ax0_ax1_ax2_ax3_fused % T.int64(49))
                                    v2 = T.axis.spatial(T.int64(1), T.int64(0))
                                    v3 = T.axis.spatial(T.int64(1), T.int64(0))
                                    T.reads(p1[v0, v1, v2, v3])
                                    T.writes(p1_shared[v0, v1, v2, v3])
                                    T.block_attr({"meta_schedule.cooperative_fetch": 3})
                                    p1_shared[v0, v1, v2, v3] = p1[v0, v1, v2, v3]
                            for rc_1, ry_1, rx_1, nn_3, ff_3, yy_3, xx_3, rc_2, ry_2, rx_2, nn_4, ff_4, yy_4, xx_4 in T.grid(T.int64(7), T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(7), T.int64(1), T.int64(7), T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(1), T.int64(1)):
                                with T.block("conv2d_nchw"):
                                    v_nn = T.axis.spatial(T.int64(1), nn_3 + nn_4)
                                    v_ff = T.axis.spatial(T.int64(128), nn_0_ff_0_yy_0_xx_0_fused * T.int64(16) + nn_2_ff_2_yy_2_xx_2_fused // T.int64(2) * T.int64(4) + ff_3 * T.int64(2) + ff_4)
                                    v_yy = T.axis.spatial(T.int64(14), nn_1_ff_1_yy_1_xx_1_fused // T.int64(7) * T.int64(7) + yy_3 + yy_4)
                                    v_xx = T.axis.spatial(T.int64(14), nn_1_ff_1_yy_1_xx_1_fused % T.int64(7) * T.int64(2) + nn_2_ff_2_yy_2_xx_2_fused % T.int64(2) + xx_3 + xx_4)
                                    v_rc = T.axis.reduce(T.int64(1568), rc_0_ry_0_rx_0_fused * T.int64(49) + rc_1 * T.int64(7) + rc_2)
                                    v_ry = T.axis.reduce(T.int64(1), ry_1 + ry_2)
                                    v_rx = T.axis.reduce(T.int64(1), rx_1 + rx_2)
                                    T.reads(pad_temp_shared[v_nn, v_rc, v_yy + v_ry, v_xx + v_rx], p1_shared[v_ff, v_rc, v_ry, v_rx])
                                    T.writes(conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx])
                                    T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 32, "meta_schedule.tiling_structure": "SSSRRSRS"})
                                    with T.init():
                                        conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx] = T.float32(0)
                                    conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx] = conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx] + pad_temp_shared[v_nn, v_rc, v_yy + v_ry, v_xx + v_rx] * p1_shared[v_ff, v_rc, v_ry, v_rx]
                        for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(4), T.int64(7), T.int64(1)):
                            with T.block("conv2d_nchw_local"):
                                v0 = T.axis.spatial(T.int64(1), ax0)
                                v1 = T.axis.spatial(T.int64(128), nn_0_ff_0_yy_0_xx_0_fused * T.int64(16) + nn_2_ff_2_yy_2_xx_2_fused // T.int64(2) * T.int64(4) + ax1)
                                v2 = T.axis.spatial(T.int64(14), nn_1_ff_1_yy_1_xx_1_fused // T.int64(7) * T.int64(7) + ax2)
                                v3 = T.axis.spatial(T.int64(14), nn_1_ff_1_yy_1_xx_1_fused % T.int64(7) * T.int64(2) + nn_2_ff_2_yy_2_xx_2_fused % T.int64(2) + ax3)
                                T.reads(conv2d_nchw_local[v0, v1, v2, v3], p2[v0, v1, T.int64(0), T.int64(0)])
                                T.writes(T_relu[v0, v1, v2, v3])
                                T_relu[v0, v1, v2, v3] = T.max(conv2d_nchw_local[v0, v1, v2, v3] + p2[v0, v1, T.int64(0), T.int64(0)], T.float32(0))
b0 = sch.get_block(name="pad_temp", func_name="main")
b1 = sch.get_block(name="conv2d_nchw", func_name="main")
b2 = sch.get_block(name="T_add", func_name="main")
b3 = sch.get_block(name="T_relu", func_name="main")
b4 = sch.get_block(name="root", func_name="main")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSSRRSRS")
l5, l6, l7, l8, l9, l10, l11 = sch.get_loops(block=b1)
v12, v13, v14, v15, v16 = sch.sample_perfect_tile(loop=l5, n=5, max_innermost_factor=64, decision=[1, 1, 1, 1, 1])
l17, l18, l19, l20, l21 = sch.split(loop=l5, factors=[v12, v13, v14, v15, v16], preserve_unit_iters=True)
v22, v23, v24, v25, v26 = sch.sample_perfect_tile(loop=l6, n=5, max_innermost_factor=64, decision=[8, 1, 4, 2, 2])
l27, l28, l29, l30, l31 = sch.split(loop=l6, factors=[v22, v23, v24, v25, v26], preserve_unit_iters=True)
v32, v33, v34, v35, v36 = sch.sample_perfect_tile(loop=l7, n=5, max_innermost_factor=64, decision=[1, 2, 1, 7, 1])
l37, l38, l39, l40, l41 = sch.split(loop=l7, factors=[v32, v33, v34, v35, v36], preserve_unit_iters=True)
v42, v43, v44, v45, v46 = sch.sample_perfect_tile(loop=l8, n=5, max_innermost_factor=64, decision=[1, 7, 2, 1, 1])
l47, l48, l49, l50, l51 = sch.split(loop=l8, factors=[v42, v43, v44, v45, v46], preserve_unit_iters=True)
v52, v53, v54 = sch.sample_perfect_tile(loop=l9, n=3, max_innermost_factor=64, decision=[32, 7, 7])
l55, l56, l57 = sch.split(loop=l9, factors=[v52, v53, v54], preserve_unit_iters=True)
v58, v59, v60 = sch.sample_perfect_tile(loop=l10, n=3, max_innermost_factor=64, decision=[1, 1, 1])
l61, l62, l63 = sch.split(loop=l10, factors=[v58, v59, v60], preserve_unit_iters=True)
v64, v65, v66 = sch.sample_perfect_tile(loop=l11, n=3, max_innermost_factor=64, decision=[1, 1, 1])
l67, l68, l69 = sch.split(loop=l11, factors=[v64, v65, v66], preserve_unit_iters=True)
sch.reorder(l17, l27, l37, l47, l18, l28, l38, l48, l19, l29, l39, l49, l55, l61, l67, l56, l62, l68, l20, l30, l40, l50, l57, l63, l69, l21, l31, l41, l51)
l70 = sch.fuse(l17, l27, l37, l47, preserve_unit_iters=True)
sch.bind(loop=l70, thread_axis="blockIdx.x")
l71 = sch.fuse(l18, l28, l38, l48, preserve_unit_iters=True)
sch.bind(loop=l71, thread_axis="vthread.x")
l72 = sch.fuse(l19, l29, l39, l49, preserve_unit_iters=True)
sch.bind(loop=l72, thread_axis="threadIdx.x")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_low_inclusive", ann_val=32)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_high_inclusive", ann_val=1024)
b73 = sch.cache_write(block=b1, write_buffer_index=0, storage_scope="local")
sch.reverse_compute_at(block=b73, loop=l72, preserve_unit_loops=True, index=-1)
b74 = sch.cache_read(block=b1, read_buffer_index=0, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b74, loop=l67, preserve_unit_loops=True, index=-1)
l75, l76, l77, l78, l79, l80, l81, l82, l83, l84 = sch.get_loops(block=b74)
l85 = sch.fuse(l81, l82, l83, l84, preserve_unit_iters=True)
v86 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=2)
sch.annotate(block_or_loop=b74, ann_key="meta_schedule.cooperative_fetch", ann_val=v86)
b87 = sch.cache_read(block=b1, read_buffer_index=1, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b87, loop=l67, preserve_unit_loops=True, index=-1)
l88, l89, l90, l91, l92, l93, l94, l95, l96, l97 = sch.get_loops(block=b87)
l98 = sch.fuse(l94, l95, l96, l97, preserve_unit_iters=True)
v99 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=2)
sch.annotate(block_or_loop=b87, ann_key="meta_schedule.cooperative_fetch", ann_val=v99)
l100 = sch.fuse(l55, l61, l67, preserve_unit_iters=True)
sch.annotate(block_or_loop=l100, ann_key="software_pipeline_stage", ann_val=[0, 0, 2])
sch.annotate(block_or_loop=l100, ann_key="software_pipeline_order", ann_val=[0, 1, 2])
sch.annotate(block_or_loop=l100, ann_key="software_pipeline_async_stages", ann_val=[0])
sch.reverse_compute_inline(block=b3)
sch.reverse_compute_inline(block=b2)
sch.compute_inline(block=b0)
v101 = sch.sample_categorical(candidates=[0, 16, 64, 512, 1024], probs=[0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001], decision=3)
sch.annotate(block_or_loop=b4, ann_key="meta_schedule.unroll_explicit", ann_val=v101)
2024-04-29 16:31:41 [INFO] [task_scheduler.cc:170] Design space #2:
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(1568), T.int64(14), T.int64(14)), "float32"), p1: T.Buffer((T.int64(128), T.int64(1568), T.int64(1), T.int64(1)), "float32"), p2: T.Buffer((T.int64(1), T.int64(128), T.int64(1), T.int64(1)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(128), T.int64(14), T.int64(14)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        with T.block("root"):
            T.reads()
            T.writes()
            T.block_attr({"meta_schedule.unroll_explicit": 1024})
            conv2d_nchw_local = T.alloc_buffer((T.int64(1), T.int64(128), T.int64(14), T.int64(14)), scope="local")
            pad_temp_shared = T.alloc_buffer((T.int64(1), T.int64(1568), T.int64(14), T.int64(14)), scope="shared")
            p1_shared = T.alloc_buffer((T.int64(128), T.int64(1568), T.int64(1), T.int64(1)), scope="shared")
            for nn_0_ff_0_yy_0_xx_0_fused in T.thread_binding(T.int64(8), thread="blockIdx.x"):
                for nn_1_ff_1_yy_1_xx_1_fused in T.thread_binding(T.int64(14), thread="vthread.x"):
                    for nn_2_ff_2_yy_2_xx_2_fused in T.thread_binding(T.int64(8), thread="threadIdx.x"):
                        for rc_0_ry_0_rx_0_fused in T.serial(T.int64(32), annotations={"software_pipeline_async_stages": [0], "software_pipeline_order": [0, 1, 2], "software_pipeline_stage": [0, 0, 3]}):
                            for ax0_ax1_ax2_ax3_fused in range(T.int64(9604)):
                                with T.block("pad_temp_shared"):
                                    v0 = T.axis.spatial(T.int64(1), T.int64(0))
                                    v1 = T.axis.spatial(T.int64(1568), rc_0_ry_0_rx_0_fused * T.int64(49) + ax0_ax1_ax2_ax3_fused // T.int64(196))
                                    v2 = T.axis.spatial(T.int64(14), ax0_ax1_ax2_ax3_fused % T.int64(196) // T.int64(14))
                                    v3 = T.axis.spatial(T.int64(14), ax0_ax1_ax2_ax3_fused % T.int64(14))
                                    T.reads(p0[v0, v1, v2, v3])
                                    T.writes(pad_temp_shared[v0, v1, v2, v3])
                                    T.block_attr({"meta_schedule.cooperative_fetch": 3})
                                    pad_temp_shared[v0, v1, v2, v3] = p0[v0, v1, v2, v3]
                            for ax0_ax1_ax2_ax3_fused in range(T.int64(784)):
                                with T.block("p1_shared"):
                                    v0 = T.axis.spatial(T.int64(128), nn_0_ff_0_yy_0_xx_0_fused * T.int64(16) + ax0_ax1_ax2_ax3_fused // T.int64(49))
                                    v1 = T.axis.spatial(T.int64(1568), rc_0_ry_0_rx_0_fused * T.int64(49) + ax0_ax1_ax2_ax3_fused % T.int64(49))
                                    v2 = T.axis.spatial(T.int64(1), T.int64(0))
                                    v3 = T.axis.spatial(T.int64(1), T.int64(0))
                                    T.reads(p1[v0, v1, v2, v3])
                                    T.writes(p1_shared[v0, v1, v2, v3])
                                    T.block_attr({"meta_schedule.cooperative_fetch": 3})
                                    p1_shared[v0, v1, v2, v3] = p1[v0, v1, v2, v3]
                            for rc_1, ry_1, rx_1, nn_3, ff_3, yy_3, xx_3, rc_2, ry_2, rx_2, nn_4, ff_4, yy_4, xx_4 in T.grid(T.int64(7), T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(7), T.int64(1), T.int64(7), T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(1), T.int64(1)):
                                with T.block("conv2d_nchw"):
                                    v_nn = T.axis.spatial(T.int64(1), nn_3 + nn_4)
                                    v_ff = T.axis.spatial(T.int64(128), nn_0_ff_0_yy_0_xx_0_fused * T.int64(16) + nn_2_ff_2_yy_2_xx_2_fused // T.int64(2) * T.int64(4) + ff_3 * T.int64(2) + ff_4)
                                    v_yy = T.axis.spatial(T.int64(14), nn_1_ff_1_yy_1_xx_1_fused // T.int64(7) * T.int64(7) + yy_3 + yy_4)
                                    v_xx = T.axis.spatial(T.int64(14), nn_1_ff_1_yy_1_xx_1_fused % T.int64(7) * T.int64(2) + nn_2_ff_2_yy_2_xx_2_fused % T.int64(2) + xx_3 + xx_4)
                                    v_rc = T.axis.reduce(T.int64(1568), rc_0_ry_0_rx_0_fused * T.int64(49) + rc_1 * T.int64(7) + rc_2)
                                    v_ry = T.axis.reduce(T.int64(1), ry_1 + ry_2)
                                    v_rx = T.axis.reduce(T.int64(1), rx_1 + rx_2)
                                    T.reads(pad_temp_shared[v_nn, v_rc, v_yy + v_ry, v_xx + v_rx], p1_shared[v_ff, v_rc, v_ry, v_rx])
                                    T.writes(conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx])
                                    T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 32, "meta_schedule.tiling_structure": "SSSRRSRS"})
                                    with T.init():
                                        conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx] = T.float32(0)
                                    conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx] = conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx] + pad_temp_shared[v_nn, v_rc, v_yy + v_ry, v_xx + v_rx] * p1_shared[v_ff, v_rc, v_ry, v_rx]
                        for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(4), T.int64(7), T.int64(1)):
                            with T.block("conv2d_nchw_local"):
                                v0 = T.axis.spatial(T.int64(1), ax0)
                                v1 = T.axis.spatial(T.int64(128), nn_0_ff_0_yy_0_xx_0_fused * T.int64(16) + nn_2_ff_2_yy_2_xx_2_fused // T.int64(2) * T.int64(4) + ax1)
                                v2 = T.axis.spatial(T.int64(14), nn_1_ff_1_yy_1_xx_1_fused // T.int64(7) * T.int64(7) + ax2)
                                v3 = T.axis.spatial(T.int64(14), nn_1_ff_1_yy_1_xx_1_fused % T.int64(7) * T.int64(2) + nn_2_ff_2_yy_2_xx_2_fused % T.int64(2) + ax3)
                                T.reads(conv2d_nchw_local[v0, v1, v2, v3], p2[v0, v1, T.int64(0), T.int64(0)])
                                T.writes(T_relu[v0, v1, v2, v3])
                                T_relu[v0, v1, v2, v3] = T.max(conv2d_nchw_local[v0, v1, v2, v3] + p2[v0, v1, T.int64(0), T.int64(0)], T.float32(0))
b0 = sch.get_block(name="pad_temp", func_name="main")
b1 = sch.get_block(name="conv2d_nchw", func_name="main")
b2 = sch.get_block(name="T_add", func_name="main")
b3 = sch.get_block(name="T_relu", func_name="main")
b4 = sch.get_block(name="root", func_name="main")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSSRRSRS")
l5, l6, l7, l8, l9, l10, l11 = sch.get_loops(block=b1)
v12, v13, v14, v15, v16 = sch.sample_perfect_tile(loop=l5, n=5, max_innermost_factor=64, decision=[1, 1, 1, 1, 1])
l17, l18, l19, l20, l21 = sch.split(loop=l5, factors=[v12, v13, v14, v15, v16], preserve_unit_iters=True)
v22, v23, v24, v25, v26 = sch.sample_perfect_tile(loop=l6, n=5, max_innermost_factor=64, decision=[8, 1, 4, 2, 2])
l27, l28, l29, l30, l31 = sch.split(loop=l6, factors=[v22, v23, v24, v25, v26], preserve_unit_iters=True)
v32, v33, v34, v35, v36 = sch.sample_perfect_tile(loop=l7, n=5, max_innermost_factor=64, decision=[1, 2, 1, 7, 1])
l37, l38, l39, l40, l41 = sch.split(loop=l7, factors=[v32, v33, v34, v35, v36], preserve_unit_iters=True)
v42, v43, v44, v45, v46 = sch.sample_perfect_tile(loop=l8, n=5, max_innermost_factor=64, decision=[1, 7, 2, 1, 1])
l47, l48, l49, l50, l51 = sch.split(loop=l8, factors=[v42, v43, v44, v45, v46], preserve_unit_iters=True)
v52, v53, v54 = sch.sample_perfect_tile(loop=l9, n=3, max_innermost_factor=64, decision=[32, 7, 7])
l55, l56, l57 = sch.split(loop=l9, factors=[v52, v53, v54], preserve_unit_iters=True)
v58, v59, v60 = sch.sample_perfect_tile(loop=l10, n=3, max_innermost_factor=64, decision=[1, 1, 1])
l61, l62, l63 = sch.split(loop=l10, factors=[v58, v59, v60], preserve_unit_iters=True)
v64, v65, v66 = sch.sample_perfect_tile(loop=l11, n=3, max_innermost_factor=64, decision=[1, 1, 1])
l67, l68, l69 = sch.split(loop=l11, factors=[v64, v65, v66], preserve_unit_iters=True)
sch.reorder(l17, l27, l37, l47, l18, l28, l38, l48, l19, l29, l39, l49, l55, l61, l67, l56, l62, l68, l20, l30, l40, l50, l57, l63, l69, l21, l31, l41, l51)
l70 = sch.fuse(l17, l27, l37, l47, preserve_unit_iters=True)
sch.bind(loop=l70, thread_axis="blockIdx.x")
l71 = sch.fuse(l18, l28, l38, l48, preserve_unit_iters=True)
sch.bind(loop=l71, thread_axis="vthread.x")
l72 = sch.fuse(l19, l29, l39, l49, preserve_unit_iters=True)
sch.bind(loop=l72, thread_axis="threadIdx.x")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_low_inclusive", ann_val=32)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_high_inclusive", ann_val=1024)
b73 = sch.cache_write(block=b1, write_buffer_index=0, storage_scope="local")
sch.reverse_compute_at(block=b73, loop=l72, preserve_unit_loops=True, index=-1)
b74 = sch.cache_read(block=b1, read_buffer_index=0, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b74, loop=l67, preserve_unit_loops=True, index=-1)
l75, l76, l77, l78, l79, l80, l81, l82, l83, l84 = sch.get_loops(block=b74)
l85 = sch.fuse(l81, l82, l83, l84, preserve_unit_iters=True)
v86 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=2)
sch.annotate(block_or_loop=b74, ann_key="meta_schedule.cooperative_fetch", ann_val=v86)
b87 = sch.cache_read(block=b1, read_buffer_index=1, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b87, loop=l67, preserve_unit_loops=True, index=-1)
l88, l89, l90, l91, l92, l93, l94, l95, l96, l97 = sch.get_loops(block=b87)
l98 = sch.fuse(l94, l95, l96, l97, preserve_unit_iters=True)
v99 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=2)
sch.annotate(block_or_loop=b87, ann_key="meta_schedule.cooperative_fetch", ann_val=v99)
l100 = sch.fuse(l55, l61, l67, preserve_unit_iters=True)
sch.annotate(block_or_loop=l100, ann_key="software_pipeline_stage", ann_val=[0, 0, 3])
sch.annotate(block_or_loop=l100, ann_key="software_pipeline_order", ann_val=[0, 1, 2])
sch.annotate(block_or_loop=l100, ann_key="software_pipeline_async_stages", ann_val=[0])
sch.reverse_compute_inline(block=b3)
sch.reverse_compute_inline(block=b2)
sch.compute_inline(block=b0)
v101 = sch.sample_categorical(candidates=[0, 16, 64, 512, 1024], probs=[0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001], decision=4)
sch.annotate(block_or_loop=b4, ann_key="meta_schedule.unroll_explicit", ann_val=v101)
2024-04-29 17:35:32 [INFO] [evolutionary_search.cc:713] Generating candidates......
2024-04-29 17:35:32 [INFO] [evolutionary_search.cc:715] Picked top 0 candidate(s) from database
2024-04-29 17:35:34 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0xd44bd98)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0xf6d9f08)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x109b36b8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x10b52878)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x12d75bc8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x11378f78)]: 494 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0xd836c48)]: 0 failure(s)
2024-04-29 17:35:35 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0xd44bd98)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0xf6d9f08)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x109b36b8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x10b52878)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x12d75bc8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x11378f78)]: 980 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0xd836c48)]: 0 failure(s)
2024-04-29 17:35:37 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0xd44bd98)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0xf6d9f08)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x109b36b8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x10b52878)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x12d75bc8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x11378f78)]: 1475 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0xd836c48)]: 0 failure(s)
2024-04-29 17:35:37 [INFO] [evolutionary_search.cc:723] Sampled 61 candidate(s)
2024-04-29 17:35:39 [INFO] [evolutionary_search.cc:621] Evolve iter #0 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0xd44bd98)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0xf6d9f08)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x109b36b8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x10b52878)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x12d75bc8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x11378f78)]: 95 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0xd836c48)]: 0 failure(s)
2024-04-29 17:35:42 [INFO] [evolutionary_search.cc:621] Evolve iter #1 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0xd44bd98)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0xf6d9f08)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x109b36b8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x10b52878)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x12d75bc8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x11378f78)]: 98 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0xd836c48)]: 0 failure(s)
2024-04-29 17:35:44 [INFO] [evolutionary_search.cc:621] Evolve iter #2 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0xd44bd98)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0xf6d9f08)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x109b36b8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x10b52878)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x12d75bc8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x11378f78)]: 91 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0xd836c48)]: 0 failure(s)
2024-04-29 17:35:46 [INFO] [evolutionary_search.cc:621] Evolve iter #3 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0xd44bd98)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0xf6d9f08)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x109b36b8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x10b52878)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x12d75bc8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x11378f78)]: 101 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0xd836c48)]: 0 failure(s)
2024-04-29 17:35:46 [INFO] [evolutionary_search.cc:649] Scores of the best 64 candidates:
[1 : 16]:	0.9998  0.9978  0.9975  0.9966  0.9964  0.9959  0.9939  0.9938  0.9936  0.9920  0.9919  0.9913  0.9909  0.9905  0.9894  0.9863
[17 : 32]:	0.9850  0.9846  0.9845  0.9832  0.9831  0.9810  0.9810  0.9807  0.9798  0.9796  0.9784  0.9776  0.9776  0.9774  0.9763  0.9749
[33 : 48]:	0.9744  0.9723  0.9721  0.9715  0.9702  0.9701  0.9701  0.9695  0.9692  0.9691  0.9686  0.9684  0.9683  0.9681  0.9677  0.9671
[49 : 64]:	0.9666  0.9639  0.9622  0.9616  0.9604  0.9599  0.9596  0.9592  0.9591  0.9582  0.9572  0.9566  0.9560  0.9558  0.9554  0.9546
2024-04-29 17:35:47 [INFO] [evolutionary_search.cc:727] Got 64 candidate(s) with evolutionary search
2024-04-29 17:35:47 [INFO] [evolutionary_search.cc:730] Sending 64 candidates(s) for measurement
2024-04-29 20:23:44 [INFO] [task_scheduler.cc:131] [Task #78: fused_nn_conv2d_add_nn_relu_38] Trial #1: GFLOPs: 20.7568. Time: 3792.7881 us. Best GFLOPs: 20.7568
2024-04-29 20:23:44 [INFO] [task_scheduler.cc:131] [Task #78: fused_nn_conv2d_add_nn_relu_38] Trial #2: GFLOPs: 212.1360. Time: 371.1117 us. Best GFLOPs: 212.1360
2024-04-29 20:23:44 [INFO] [task_scheduler.cc:131] [Task #78: fused_nn_conv2d_add_nn_relu_38] Trial #3: GFLOPs: 1243.1997. Time: 63.3254 us. Best GFLOPs: 1243.1997
2024-04-29 20:23:44 [INFO] [task_scheduler.cc:131] [Task #78: fused_nn_conv2d_add_nn_relu_38] Trial #4: GFLOPs: 171.8225. Time: 458.1831 us. Best GFLOPs: 1243.1997
2024-04-29 20:23:44 [INFO] [task_scheduler.cc:131] [Task #78: fused_nn_conv2d_add_nn_relu_38] Trial #5: GFLOPs: 20.4055. Time: 3858.0774 us. Best GFLOPs: 1243.1997
2024-04-29 20:23:44 [INFO] [task_scheduler.cc:131] [Task #78: fused_nn_conv2d_add_nn_relu_38] Trial #6: GFLOPs: 120.0936. Time: 655.5397 us. Best GFLOPs: 1243.1997
2024-04-29 20:23:44 [INFO] [task_scheduler.cc:131] [Task #78: fused_nn_conv2d_add_nn_relu_38] Trial #7: GFLOPs: 594.7780. Time: 132.3622 us. Best GFLOPs: 1243.1997
2024-04-29 20:23:44 [INFO] [task_scheduler.cc:131] [Task #78: fused_nn_conv2d_add_nn_relu_38] Trial #8: GFLOPs: 277.0876. Time: 284.1201 us. Best GFLOPs: 1243.1997
2024-04-29 20:23:44 [INFO] [task_scheduler.cc:131] [Task #78: fused_nn_conv2d_add_nn_relu_38] Trial #9: GFLOPs: 512.1480. Time: 153.7176 us. Best GFLOPs: 1243.1997
2024-04-29 20:23:44 [INFO] [task_scheduler.cc:131] [Task #78: fused_nn_conv2d_add_nn_relu_38] Trial #10: GFLOPs: 117.0147. Time: 672.7886 us. Best GFLOPs: 1243.1997
2024-04-29 20:23:44 [INFO] [task_scheduler.cc:131] [Task #78: fused_nn_conv2d_add_nn_relu_38] Trial #11: GFLOPs: 213.6863. Time: 368.4192 us. Best GFLOPs: 1243.1997
2024-04-29 20:23:44 [INFO] [task_scheduler.cc:131] [Task #78: fused_nn_conv2d_add_nn_relu_38] Trial #12: GFLOPs: 396.0927. Time: 198.7569 us. Best GFLOPs: 1243.1997
2024-04-29 20:23:44 [INFO] [task_scheduler.cc:131] [Task #78: fused_nn_conv2d_add_nn_relu_38] Trial #13: GFLOPs: 22.4414. Time: 3508.0827 us. Best GFLOPs: 1243.1997
2024-04-29 20:23:44 [INFO] [task_scheduler.cc:131] [Task #78: fused_nn_conv2d_add_nn_relu_38] Trial #14: GFLOPs: 277.3824. Time: 283.8181 us. Best GFLOPs: 1243.1997
2024-04-29 20:23:44 [INFO] [task_scheduler.cc:131] [Task #78: fused_nn_conv2d_add_nn_relu_38] Trial #15: GFLOPs: 359.4339. Time: 219.0281 us. Best GFLOPs: 1243.1997
2024-04-29 20:23:44 [INFO] [task_scheduler.cc:131] [Task #78: fused_nn_conv2d_add_nn_relu_38] Trial #16: GFLOPs: 310.4298. Time: 253.6037 us. Best GFLOPs: 1243.1997
2024-04-29 20:23:44 [INFO] [task_scheduler.cc:131] [Task #78: fused_nn_conv2d_add_nn_relu_38] Trial #17: GFLOPs: 202.3246. Time: 389.1081 us. Best GFLOPs: 1243.1997
2024-04-29 20:23:44 [INFO] [task_scheduler.cc:131] [Task #78: fused_nn_conv2d_add_nn_relu_38] Trial #18: GFLOPs: 230.3103. Time: 341.8265 us. Best GFLOPs: 1243.1997
2024-04-29 20:23:44 [INFO] [task_scheduler.cc:131] [Task #78: fused_nn_conv2d_add_nn_relu_38] Trial #19: GFLOPs: 176.1171. Time: 447.0101 us. Best GFLOPs: 1243.1997
2024-04-29 20:23:44 [INFO] [task_scheduler.cc:131] [Task #78: fused_nn_conv2d_add_nn_relu_38] Trial #20: GFLOPs: 562.4570. Time: 139.9683 us. Best GFLOPs: 1243.1997
2024-04-29 20:23:44 [INFO] [task_scheduler.cc:131] [Task #78: fused_nn_conv2d_add_nn_relu_38] Trial #21: GFLOPs: 558.9622. Time: 140.8434 us. Best GFLOPs: 1243.1997
2024-04-29 20:23:44 [INFO] [task_scheduler.cc:131] [Task #78: fused_nn_conv2d_add_nn_relu_38] Trial #22: GFLOPs: 336.2845. Time: 234.1058 us. Best GFLOPs: 1243.1997
2024-04-29 20:23:44 [INFO] [task_scheduler.cc:131] [Task #78: fused_nn_conv2d_add_nn_relu_38] Trial #23: GFLOPs: 193.8534. Time: 406.1117 us. Best GFLOPs: 1243.1997
2024-04-29 20:23:44 [INFO] [task_scheduler.cc:131] [Task #78: fused_nn_conv2d_add_nn_relu_38] Trial #24: GFLOPs: 762.2141. Time: 103.2861 us. Best GFLOPs: 1243.1997
2024-04-29 20:23:44 [INFO] [task_scheduler.cc:131] [Task #78: fused_nn_conv2d_add_nn_relu_38] Trial #25: GFLOPs: 108.3705. Time: 726.4538 us. Best GFLOPs: 1243.1997
2024-04-29 20:23:44 [INFO] [task_scheduler.cc:131] [Task #78: fused_nn_conv2d_add_nn_relu_38] Trial #26: GFLOPs: 503.0951. Time: 156.4836 us. Best GFLOPs: 1243.1997
2024-04-29 20:23:44 [INFO] [task_scheduler.cc:131] [Task #78: fused_nn_conv2d_add_nn_relu_38] Trial #27: GFLOPs: 830.0357. Time: 94.8467 us. Best GFLOPs: 1243.1997
2024-04-29 20:23:44 [INFO] [task_scheduler.cc:131] [Task #78: fused_nn_conv2d_add_nn_relu_38] Trial #28: GFLOPs: 234.5414. Time: 335.6599 us. Best GFLOPs: 1243.1997
2024-04-29 20:23:44 [INFO] [task_scheduler.cc:131] [Task #78: fused_nn_conv2d_add_nn_relu_38] Trial #29: GFLOPs: 242.2844. Time: 324.9328 us. Best GFLOPs: 1243.1997
2024-04-29 20:23:44 [INFO] [task_scheduler.cc:131] [Task #78: fused_nn_conv2d_add_nn_relu_38] Trial #30: GFLOPs: 434.2668. Time: 181.2852 us. Best GFLOPs: 1243.1997
2024-04-29 20:23:44 [INFO] [task_scheduler.cc:131] [Task #78: fused_nn_conv2d_add_nn_relu_38] Trial #31: GFLOPs: 23.3859. Time: 3366.3999 us. Best GFLOPs: 1243.1997
2024-04-29 20:23:44 [INFO] [task_scheduler.cc:131] [Task #78: fused_nn_conv2d_add_nn_relu_38] Trial #32: GFLOPs: 323.7594. Time: 243.1625 us. Best GFLOPs: 1243.1997
2024-04-29 20:23:44 [INFO] [task_scheduler.cc:131] [Task #78: fused_nn_conv2d_add_nn_relu_38] Trial #33: GFLOPs: 342.4642. Time: 229.8814 us. Best GFLOPs: 1243.1997
2024-04-29 20:23:44 [INFO] [task_scheduler.cc:131] [Task #78: fused_nn_conv2d_add_nn_relu_38] Trial #34: GFLOPs: 196.2483. Time: 401.1558 us. Best GFLOPs: 1243.1997
2024-04-29 20:23:44 [INFO] [task_scheduler.cc:131] [Task #78: fused_nn_conv2d_add_nn_relu_38] Trial #35: GFLOPs: 671.9269. Time: 117.1648 us. Best GFLOPs: 1243.1997
2024-04-29 20:23:44 [INFO] [task_scheduler.cc:131] [Task #78: fused_nn_conv2d_add_nn_relu_38] Trial #36: GFLOPs: 313.7779. Time: 250.8977 us. Best GFLOPs: 1243.1997
2024-04-29 20:23:44 [INFO] [task_scheduler.cc:131] [Task #78: fused_nn_conv2d_add_nn_relu_38] Trial #37: GFLOPs: 699.0354. Time: 112.6211 us. Best GFLOPs: 1243.1997
2024-04-29 20:23:44 [INFO] [task_scheduler.cc:131] [Task #78: fused_nn_conv2d_add_nn_relu_38] Trial #38: GFLOPs: 350.1024. Time: 224.8661 us. Best GFLOPs: 1243.1997
2024-04-29 20:23:44 [INFO] [task_scheduler.cc:131] [Task #78: fused_nn_conv2d_add_nn_relu_38] Trial #39: GFLOPs: 257.1762. Time: 306.1175 us. Best GFLOPs: 1243.1997
2024-04-29 20:23:44 [INFO] [task_scheduler.cc:131] [Task #78: fused_nn_conv2d_add_nn_relu_38] Trial #40: GFLOPs: 581.0390. Time: 135.4920 us. Best GFLOPs: 1243.1997
2024-04-29 20:23:44 [INFO] [task_scheduler.cc:131] [Task #78: fused_nn_conv2d_add_nn_relu_38] Trial #41: GFLOPs: 258.1005. Time: 305.0213 us. Best GFLOPs: 1243.1997
2024-04-29 20:23:44 [INFO] [task_scheduler.cc:131] [Task #78: fused_nn_conv2d_add_nn_relu_38] Trial #42: GFLOPs: 104.1456. Time: 755.9236 us. Best GFLOPs: 1243.1997
2024-04-29 20:23:44 [INFO] [task_scheduler.cc:131] [Task #78: fused_nn_conv2d_add_nn_relu_38] Trial #43: GFLOPs: 125.1493. Time: 629.0580 us. Best GFLOPs: 1243.1997
2024-04-29 20:23:44 [INFO] [task_scheduler.cc:131] [Task #78: fused_nn_conv2d_add_nn_relu_38] Trial #44: GFLOPs: 28.8815. Time: 2725.8325 us. Best GFLOPs: 1243.1997
2024-04-29 20:23:44 [INFO] [task_scheduler.cc:131] [Task #78: fused_nn_conv2d_add_nn_relu_38] Trial #45: GFLOPs: 671.9123. Time: 117.1673 us. Best GFLOPs: 1243.1997
2024-04-29 20:23:44 [INFO] [task_scheduler.cc:131] [Task #78: fused_nn_conv2d_add_nn_relu_38] Trial #46: GFLOPs: 114.7701. Time: 685.9467 us. Best GFLOPs: 1243.1997
2024-04-29 20:23:44 [INFO] [task_scheduler.cc:131] [Task #78: fused_nn_conv2d_add_nn_relu_38] Trial #47: GFLOPs: 599.6030. Time: 131.2971 us. Best GFLOPs: 1243.1997
2024-04-29 20:23:44 [INFO] [task_scheduler.cc:131] [Task #78: fused_nn_conv2d_add_nn_relu_38] Trial #48: GFLOPs: 58.7524. Time: 1339.9654 us. Best GFLOPs: 1243.1997
2024-04-29 20:23:44 [INFO] [task_scheduler.cc:131] [Task #78: fused_nn_conv2d_add_nn_relu_38] Trial #49: GFLOPs: 428.1745. Time: 183.8646 us. Best GFLOPs: 1243.1997
2024-04-29 20:23:44 [INFO] [task_scheduler.cc:131] [Task #78: fused_nn_conv2d_add_nn_relu_38] Trial #50: GFLOPs: 81.3431. Time: 967.8277 us. Best GFLOPs: 1243.1997
2024-04-29 20:23:44 [INFO] [task_scheduler.cc:131] [Task #78: fused_nn_conv2d_add_nn_relu_38] Trial #51: GFLOPs: 24.4861. Time: 3215.1360 us. Best GFLOPs: 1243.1997
2024-04-29 20:23:44 [INFO] [task_scheduler.cc:131] [Task #78: fused_nn_conv2d_add_nn_relu_38] Trial #52: GFLOPs: 773.3603. Time: 101.7975 us. Best GFLOPs: 1243.1997
2024-04-29 20:23:44 [INFO] [task_scheduler.cc:131] [Task #78: fused_nn_conv2d_add_nn_relu_38] Trial #53: GFLOPs: 198.2199. Time: 397.1657 us. Best GFLOPs: 1243.1997
2024-04-29 20:23:44 [INFO] [task_scheduler.cc:131] [Task #78: fused_nn_conv2d_add_nn_relu_38] Trial #54: GFLOPs: 2676.1211. Time: 29.4180 us. Best GFLOPs: 2676.1211
2024-04-29 20:23:44 [INFO] [task_scheduler.cc:131] [Task #78: fused_nn_conv2d_add_nn_relu_38] Trial #55: GFLOPs: 556.2695. Time: 141.5252 us. Best GFLOPs: 2676.1211
2024-04-29 20:23:44 [INFO] [task_scheduler.cc:131] [Task #78: fused_nn_conv2d_add_nn_relu_38] Trial #56: GFLOPs: 876.8462. Time: 89.7833 us. Best GFLOPs: 2676.1211
2024-04-29 20:23:44 [INFO] [task_scheduler.cc:131] [Task #78: fused_nn_conv2d_add_nn_relu_38] Trial #57: GFLOPs: 78.9180. Time: 997.5686 us. Best GFLOPs: 2676.1211
2024-04-29 20:23:44 [INFO] [task_scheduler.cc:131] [Task #78: fused_nn_conv2d_add_nn_relu_38] Trial #58: GFLOPs: 611.7641. Time: 128.6871 us. Best GFLOPs: 2676.1211
2024-04-29 20:23:44 [INFO] [task_scheduler.cc:131] [Task #78: fused_nn_conv2d_add_nn_relu_38] Trial #59: GFLOPs: 394.8868. Time: 199.3638 us. Best GFLOPs: 2676.1211
2024-04-29 20:23:44 [INFO] [task_scheduler.cc:131] [Task #78: fused_nn_conv2d_add_nn_relu_38] Trial #60: GFLOPs: 89.8919. Time: 875.7872 us. Best GFLOPs: 2676.1211
2024-04-29 20:23:44 [INFO] [task_scheduler.cc:131] [Task #78: fused_nn_conv2d_add_nn_relu_38] Trial #61: GFLOPs: 155.0893. Time: 507.6181 us. Best GFLOPs: 2676.1211
2024-04-29 20:23:44 [INFO] [task_scheduler.cc:131] [Task #78: fused_nn_conv2d_add_nn_relu_38] Trial #62: GFLOPs: 53.5641. Time: 1469.7565 us. Best GFLOPs: 2676.1211
2024-04-29 20:23:44 [INFO] [task_scheduler.cc:131] [Task #78: fused_nn_conv2d_add_nn_relu_38] Trial #63: GFLOPs: 83.4719. Time: 943.1459 us. Best GFLOPs: 2676.1211
2024-04-29 20:23:44 [INFO] [task_scheduler.cc:131] [Task #78: fused_nn_conv2d_add_nn_relu_38] Trial #64: GFLOPs: 24.2448. Time: 3247.1370 us. Best GFLOPs: 2676.1211
2024-05-01 15:05:21 [INFO] [task_scheduler.cc:160] Initializing Task #78: "fused_nn_conv2d_add_nn_relu_38"
2024-05-01 15:05:21 [INFO] [task_scheduler.cc:35] 
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(1568), T.int64(14), T.int64(14)), "float32"), p1: T.Buffer((T.int64(128), T.int64(1568), T.int64(1), T.int64(1)), "float32"), p2: T.Buffer((T.int64(1), T.int64(128), T.int64(1), T.int64(1)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(128), T.int64(14), T.int64(14)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        pad_temp = T.alloc_buffer((T.int64(1), T.int64(1568), T.int64(14), T.int64(14)))
        conv2d_nchw = T.alloc_buffer((T.int64(1), T.int64(128), T.int64(14), T.int64(14)))
        T_add = T.alloc_buffer((T.int64(1), T.int64(128), T.int64(14), T.int64(14)))
        for i0, i1, i2, i3 in T.grid(T.int64(1), T.int64(1568), T.int64(14), T.int64(14)):
            with T.block("pad_temp"):
                v_i0, v_i1, v_i2, v_i3 = T.axis.remap("SSSS", [i0, i1, i2, i3])
                T.reads(p0[v_i0, v_i1, v_i2, v_i3])
                T.writes(pad_temp[v_i0, v_i1, v_i2, v_i3])
                pad_temp[v_i0, v_i1, v_i2, v_i3] = p0[v_i0, v_i1, v_i2, v_i3]
        for nn, ff, yy, xx, rc, ry, rx in T.grid(T.int64(1), T.int64(128), T.int64(14), T.int64(14), T.int64(1568), T.int64(1), T.int64(1)):
            with T.block("conv2d_nchw"):
                v_nn, v_ff, v_yy, v_xx, v_rc, v_ry, v_rx = T.axis.remap("SSSSRRR", [nn, ff, yy, xx, rc, ry, rx])
                T.reads(pad_temp[v_nn, v_rc, v_yy + v_ry, v_xx + v_rx], p1[v_ff, v_rc, v_ry, v_rx])
                T.writes(conv2d_nchw[v_nn, v_ff, v_yy, v_xx])
                with T.init():
                    conv2d_nchw[v_nn, v_ff, v_yy, v_xx] = T.float32(0)
                conv2d_nchw[v_nn, v_ff, v_yy, v_xx] = conv2d_nchw[v_nn, v_ff, v_yy, v_xx] + pad_temp[v_nn, v_rc, v_yy + v_ry, v_xx + v_rx] * p1[v_ff, v_rc, v_ry, v_rx]
        for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(128), T.int64(14), T.int64(14)):
            with T.block("T_add"):
                v_ax0, v_ax1, v_ax2, v_ax3 = T.axis.remap("SSSS", [ax0, ax1, ax2, ax3])
                T.reads(conv2d_nchw[v_ax0, v_ax1, v_ax2, v_ax3], p2[v_ax0, v_ax1, T.int64(0), T.int64(0)])
                T.writes(T_add[v_ax0, v_ax1, v_ax2, v_ax3])
                T_add[v_ax0, v_ax1, v_ax2, v_ax3] = conv2d_nchw[v_ax0, v_ax1, v_ax2, v_ax3] + p2[v_ax0, v_ax1, T.int64(0), T.int64(0)]
        for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(128), T.int64(14), T.int64(14)):
            with T.block("T_relu"):
                v_ax0, v_ax1, v_ax2, v_ax3 = T.axis.remap("SSSS", [ax0, ax1, ax2, ax3])
                T.reads(T_add[v_ax0, v_ax1, v_ax2, v_ax3])
                T.writes(T_relu[v_ax0, v_ax1, v_ax2, v_ax3])
                T_relu[v_ax0, v_ax1, v_ax2, v_ax3] = T.max(T_add[v_ax0, v_ax1, v_ax2, v_ax3], T.float32(0))
2024-05-01 15:05:21 [INFO] [task_scheduler.cc:164] Total 3 design space(s) generated
2024-05-01 15:05:21 [INFO] [task_scheduler.cc:170] Design space #0:
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(1568), T.int64(14), T.int64(14)), "float32"), p1: T.Buffer((T.int64(128), T.int64(1568), T.int64(1), T.int64(1)), "float32"), p2: T.Buffer((T.int64(1), T.int64(128), T.int64(1), T.int64(1)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(128), T.int64(14), T.int64(14)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        with T.block("root"):
            T.reads()
            T.writes()
            T.block_attr({"meta_schedule.unroll_explicit": 1024})
            conv2d_nchw_local = T.alloc_buffer((T.int64(1), T.int64(128), T.int64(14), T.int64(14)), scope="local")
            pad_temp_shared = T.alloc_buffer((T.int64(1), T.int64(1568), T.int64(14), T.int64(14)), scope="shared")
            p1_shared = T.alloc_buffer((T.int64(128), T.int64(1568), T.int64(1), T.int64(1)), scope="shared")
            for nn_0_ff_0_yy_0_xx_0_fused in T.thread_binding(T.int64(7), thread="blockIdx.x"):
                for nn_1_ff_1_yy_1_xx_1_fused in T.thread_binding(T.int64(2), thread="vthread.x"):
                    for nn_2_ff_2_yy_2_xx_2_fused in T.thread_binding(T.int64(14), thread="threadIdx.x"):
                        for rc_0, ry_0, rx_0 in T.grid(T.int64(1), T.int64(1), T.int64(1)):
                            for ax0_ax1_ax2_ax3_fused in range(T.int64(43904)):
                                with T.block("pad_temp_shared"):
                                    v0 = T.axis.spatial(T.int64(1), T.int64(0))
                                    v1 = T.axis.spatial(T.int64(1568), ax0_ax1_ax2_ax3_fused // T.int64(28))
                                    v2 = T.axis.spatial(T.int64(14), ax0_ax1_ax2_ax3_fused % T.int64(28) // T.int64(2))
                                    v3 = T.axis.spatial(T.int64(14), nn_0_ff_0_yy_0_xx_0_fused * T.int64(2) + ax0_ax1_ax2_ax3_fused % T.int64(2))
                                    T.reads(p0[v0, v1, v2, v3])
                                    T.writes(pad_temp_shared[v0, v1, v2, v3])
                                    T.block_attr({"meta_schedule.cooperative_fetch": 1})
                                    pad_temp_shared[v0, v1, v2, v3] = p0[v0, v1, v2, v3]
                            for ax0_ax1_ax2_ax3_fused in range(T.int64(200704)):
                                with T.block("p1_shared"):
                                    v0 = T.axis.spatial(T.int64(128), ax0_ax1_ax2_ax3_fused // T.int64(1568))
                                    v1 = T.axis.spatial(T.int64(1568), ax0_ax1_ax2_ax3_fused % T.int64(1568))
                                    v2 = T.axis.spatial(T.int64(1), T.int64(0))
                                    v3 = T.axis.spatial(T.int64(1), T.int64(0))
                                    T.reads(p1[v0, v1, v2, v3])
                                    T.writes(p1_shared[v0, v1, v2, v3])
                                    T.block_attr({"meta_schedule.cooperative_fetch": 1})
                                    p1_shared[v0, v1, v2, v3] = p1[v0, v1, v2, v3]
                            for rc_1, ry_1, rx_1, nn_3, ff_3, yy_3, xx_3, rc_2, ry_2, rx_2, nn_4, ff_4, yy_4, xx_4 in T.grid(T.int64(98), T.int64(1), T.int64(1), T.int64(1), T.int64(8), T.int64(1), T.int64(2), T.int64(16), T.int64(1), T.int64(1), T.int64(1), T.int64(4), T.int64(2), T.int64(1)):
                                with T.block("conv2d_nchw"):
                                    v_nn = T.axis.spatial(T.int64(1), nn_3 + nn_4)
                                    v_ff = T.axis.spatial(T.int64(128), nn_1_ff_1_yy_1_xx_1_fused * T.int64(64) + nn_2_ff_2_yy_2_xx_2_fused // T.int64(7) * T.int64(32) + ff_3 * T.int64(4) + ff_4)
                                    v_yy = T.axis.spatial(T.int64(14), nn_2_ff_2_yy_2_xx_2_fused % T.int64(7) * T.int64(2) + yy_3 * T.int64(2) + yy_4)
                                    v_xx = T.axis.spatial(T.int64(14), nn_0_ff_0_yy_0_xx_0_fused * T.int64(2) + xx_3 + xx_4)
                                    v_rc = T.axis.reduce(T.int64(1568), rc_0 * T.int64(1568) + rc_1 * T.int64(16) + rc_2)
                                    v_ry = T.axis.reduce(T.int64(1), ry_0 + ry_1 + ry_2)
                                    v_rx = T.axis.reduce(T.int64(1), rx_0 + rx_1 + rx_2)
                                    T.reads(pad_temp_shared[v_nn, v_rc, v_yy + v_ry, v_xx + v_rx], p1_shared[v_ff, v_rc, v_ry, v_rx])
                                    T.writes(conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx])
                                    T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 32, "meta_schedule.tiling_structure": "SSSRRSRS"})
                                    with T.init():
                                        conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx] = T.float32(0)
                                    conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx] = conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx] + pad_temp_shared[v_nn, v_rc, v_yy + v_ry, v_xx + v_rx] * p1_shared[v_ff, v_rc, v_ry, v_rx]
                        for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(32), T.int64(2), T.int64(2)):
                            with T.block("conv2d_nchw_local"):
                                v0 = T.axis.spatial(T.int64(1), ax0)
                                v1 = T.axis.spatial(T.int64(128), nn_1_ff_1_yy_1_xx_1_fused * T.int64(64) + nn_2_ff_2_yy_2_xx_2_fused // T.int64(7) * T.int64(32) + ax1)
                                v2 = T.axis.spatial(T.int64(14), nn_2_ff_2_yy_2_xx_2_fused % T.int64(7) * T.int64(2) + ax2)
                                v3 = T.axis.spatial(T.int64(14), nn_0_ff_0_yy_0_xx_0_fused * T.int64(2) + ax3)
                                T.reads(conv2d_nchw_local[v0, v1, v2, v3], p2[v0, v1, T.int64(0), T.int64(0)])
                                T.writes(T_relu[v0, v1, v2, v3])
                                T_relu[v0, v1, v2, v3] = T.max(conv2d_nchw_local[v0, v1, v2, v3] + p2[v0, v1, T.int64(0), T.int64(0)], T.float32(0))
b0 = sch.get_block(name="pad_temp", func_name="main")
b1 = sch.get_block(name="conv2d_nchw", func_name="main")
b2 = sch.get_block(name="T_add", func_name="main")
b3 = sch.get_block(name="T_relu", func_name="main")
b4 = sch.get_block(name="root", func_name="main")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSSRRSRS")
l5, l6, l7, l8, l9, l10, l11 = sch.get_loops(block=b1)
v12, v13, v14, v15, v16 = sch.sample_perfect_tile(loop=l5, n=5, max_innermost_factor=64, decision=[1, 1, 1, 1, 1])
l17, l18, l19, l20, l21 = sch.split(loop=l5, factors=[v12, v13, v14, v15, v16], preserve_unit_iters=True)
v22, v23, v24, v25, v26 = sch.sample_perfect_tile(loop=l6, n=5, max_innermost_factor=64, decision=[1, 2, 2, 8, 4])
l27, l28, l29, l30, l31 = sch.split(loop=l6, factors=[v22, v23, v24, v25, v26], preserve_unit_iters=True)
v32, v33, v34, v35, v36 = sch.sample_perfect_tile(loop=l7, n=5, max_innermost_factor=64, decision=[1, 1, 7, 1, 2])
l37, l38, l39, l40, l41 = sch.split(loop=l7, factors=[v32, v33, v34, v35, v36], preserve_unit_iters=True)
v42, v43, v44, v45, v46 = sch.sample_perfect_tile(loop=l8, n=5, max_innermost_factor=64, decision=[7, 1, 1, 2, 1])
l47, l48, l49, l50, l51 = sch.split(loop=l8, factors=[v42, v43, v44, v45, v46], preserve_unit_iters=True)
v52, v53, v54 = sch.sample_perfect_tile(loop=l9, n=3, max_innermost_factor=64, decision=[1, 98, 16])
l55, l56, l57 = sch.split(loop=l9, factors=[v52, v53, v54], preserve_unit_iters=True)
v58, v59, v60 = sch.sample_perfect_tile(loop=l10, n=3, max_innermost_factor=64, decision=[1, 1, 1])
l61, l62, l63 = sch.split(loop=l10, factors=[v58, v59, v60], preserve_unit_iters=True)
v64, v65, v66 = sch.sample_perfect_tile(loop=l11, n=3, max_innermost_factor=64, decision=[1, 1, 1])
l67, l68, l69 = sch.split(loop=l11, factors=[v64, v65, v66], preserve_unit_iters=True)
sch.reorder(l17, l27, l37, l47, l18, l28, l38, l48, l19, l29, l39, l49, l55, l61, l67, l56, l62, l68, l20, l30, l40, l50, l57, l63, l69, l21, l31, l41, l51)
l70 = sch.fuse(l17, l27, l37, l47, preserve_unit_iters=True)
sch.bind(loop=l70, thread_axis="blockIdx.x")
l71 = sch.fuse(l18, l28, l38, l48, preserve_unit_iters=True)
sch.bind(loop=l71, thread_axis="vthread.x")
l72 = sch.fuse(l19, l29, l39, l49, preserve_unit_iters=True)
sch.bind(loop=l72, thread_axis="threadIdx.x")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_low_inclusive", ann_val=32)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_high_inclusive", ann_val=1024)
b73 = sch.cache_write(block=b1, write_buffer_index=0, storage_scope="local")
sch.reverse_compute_at(block=b73, loop=l72, preserve_unit_loops=True, index=-1)
b74 = sch.cache_read(block=b1, read_buffer_index=0, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b74, loop=l67, preserve_unit_loops=True, index=-1)
l75, l76, l77, l78, l79, l80, l81, l82, l83, l84 = sch.get_loops(block=b74)
l85 = sch.fuse(l81, l82, l83, l84, preserve_unit_iters=True)
v86 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=0)
sch.annotate(block_or_loop=b74, ann_key="meta_schedule.cooperative_fetch", ann_val=v86)
b87 = sch.cache_read(block=b1, read_buffer_index=1, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b87, loop=l67, preserve_unit_loops=True, index=-1)
l88, l89, l90, l91, l92, l93, l94, l95, l96, l97 = sch.get_loops(block=b87)
l98 = sch.fuse(l94, l95, l96, l97, preserve_unit_iters=True)
v99 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=0)
sch.annotate(block_or_loop=b87, ann_key="meta_schedule.cooperative_fetch", ann_val=v99)
sch.reverse_compute_inline(block=b3)
sch.reverse_compute_inline(block=b2)
sch.compute_inline(block=b0)
v100 = sch.sample_categorical(candidates=[0, 16, 64, 512, 1024], probs=[0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001], decision=4)
sch.annotate(block_or_loop=b4, ann_key="meta_schedule.unroll_explicit", ann_val=v100)
2024-05-01 15:05:21 [INFO] [task_scheduler.cc:170] Design space #1:
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(1568), T.int64(14), T.int64(14)), "float32"), p1: T.Buffer((T.int64(128), T.int64(1568), T.int64(1), T.int64(1)), "float32"), p2: T.Buffer((T.int64(1), T.int64(128), T.int64(1), T.int64(1)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(128), T.int64(14), T.int64(14)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        with T.block("root"):
            T.reads()
            T.writes()
            T.block_attr({"meta_schedule.unroll_explicit": 64})
            conv2d_nchw_local = T.alloc_buffer((T.int64(1), T.int64(128), T.int64(14), T.int64(14)), scope="local")
            pad_temp_shared = T.alloc_buffer((T.int64(1), T.int64(1568), T.int64(14), T.int64(14)), scope="shared")
            p1_shared = T.alloc_buffer((T.int64(128), T.int64(1568), T.int64(1), T.int64(1)), scope="shared")
            for nn_0_ff_0_yy_0_xx_0_fused in T.thread_binding(T.int64(7), thread="blockIdx.x"):
                for nn_1_ff_1_yy_1_xx_1_fused in T.thread_binding(T.int64(2), thread="vthread.x"):
                    for nn_2_ff_2_yy_2_xx_2_fused in T.thread_binding(T.int64(14), thread="threadIdx.x"):
                        for rc_0_ry_0_rx_0_fused in T.serial(T.int64(1), annotations={"software_pipeline_async_stages": [0], "software_pipeline_order": [0, 1, 2], "software_pipeline_stage": [0, 0, 2]}):
                            for ax0_ax1_ax2_ax3_fused in range(T.int64(43904)):
                                with T.block("pad_temp_shared"):
                                    v0 = T.axis.spatial(T.int64(1), T.int64(0))
                                    v1 = T.axis.spatial(T.int64(1568), ax0_ax1_ax2_ax3_fused // T.int64(28))
                                    v2 = T.axis.spatial(T.int64(14), ax0_ax1_ax2_ax3_fused % T.int64(28) // T.int64(2))
                                    v3 = T.axis.spatial(T.int64(14), nn_0_ff_0_yy_0_xx_0_fused * T.int64(2) + ax0_ax1_ax2_ax3_fused % T.int64(2))
                                    T.reads(p0[v0, v1, v2, v3])
                                    T.writes(pad_temp_shared[v0, v1, v2, v3])
                                    T.block_attr({"meta_schedule.cooperative_fetch": 1})
                                    pad_temp_shared[v0, v1, v2, v3] = p0[v0, v1, v2, v3]
                            for ax0_ax1_ax2_ax3_fused in range(T.int64(200704)):
                                with T.block("p1_shared"):
                                    v0 = T.axis.spatial(T.int64(128), ax0_ax1_ax2_ax3_fused // T.int64(1568))
                                    v1 = T.axis.spatial(T.int64(1568), ax0_ax1_ax2_ax3_fused % T.int64(1568))
                                    v2 = T.axis.spatial(T.int64(1), T.int64(0))
                                    v3 = T.axis.spatial(T.int64(1), T.int64(0))
                                    T.reads(p1[v0, v1, v2, v3])
                                    T.writes(p1_shared[v0, v1, v2, v3])
                                    T.block_attr({"meta_schedule.cooperative_fetch": 1})
                                    p1_shared[v0, v1, v2, v3] = p1[v0, v1, v2, v3]
                            for rc_1, ry_1, rx_1, nn_3, ff_3, yy_3, xx_3, rc_2, ry_2, rx_2, nn_4, ff_4, yy_4, xx_4 in T.grid(T.int64(98), T.int64(1), T.int64(1), T.int64(1), T.int64(8), T.int64(1), T.int64(2), T.int64(16), T.int64(1), T.int64(1), T.int64(1), T.int64(4), T.int64(2), T.int64(1)):
                                with T.block("conv2d_nchw"):
                                    v_nn = T.axis.spatial(T.int64(1), nn_3 + nn_4)
                                    v_ff = T.axis.spatial(T.int64(128), nn_1_ff_1_yy_1_xx_1_fused * T.int64(64) + nn_2_ff_2_yy_2_xx_2_fused // T.int64(7) * T.int64(32) + ff_3 * T.int64(4) + ff_4)
                                    v_yy = T.axis.spatial(T.int64(14), nn_2_ff_2_yy_2_xx_2_fused % T.int64(7) * T.int64(2) + yy_3 * T.int64(2) + yy_4)
                                    v_xx = T.axis.spatial(T.int64(14), nn_0_ff_0_yy_0_xx_0_fused * T.int64(2) + xx_3 + xx_4)
                                    v_rc = T.axis.reduce(T.int64(1568), rc_1 * T.int64(16) + rc_2)
                                    v_ry = T.axis.reduce(T.int64(1), ry_1 + ry_2)
                                    v_rx = T.axis.reduce(T.int64(1), rx_1 + rx_2)
                                    T.reads(pad_temp_shared[v_nn, v_rc, v_yy + v_ry, v_xx + v_rx], p1_shared[v_ff, v_rc, v_ry, v_rx])
                                    T.writes(conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx])
                                    T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 32, "meta_schedule.tiling_structure": "SSSRRSRS"})
                                    with T.init():
                                        conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx] = T.float32(0)
                                    conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx] = conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx] + pad_temp_shared[v_nn, v_rc, v_yy + v_ry, v_xx + v_rx] * p1_shared[v_ff, v_rc, v_ry, v_rx]
                        for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(32), T.int64(2), T.int64(2)):
                            with T.block("conv2d_nchw_local"):
                                v0 = T.axis.spatial(T.int64(1), ax0)
                                v1 = T.axis.spatial(T.int64(128), nn_1_ff_1_yy_1_xx_1_fused * T.int64(64) + nn_2_ff_2_yy_2_xx_2_fused // T.int64(7) * T.int64(32) + ax1)
                                v2 = T.axis.spatial(T.int64(14), nn_2_ff_2_yy_2_xx_2_fused % T.int64(7) * T.int64(2) + ax2)
                                v3 = T.axis.spatial(T.int64(14), nn_0_ff_0_yy_0_xx_0_fused * T.int64(2) + ax3)
                                T.reads(conv2d_nchw_local[v0, v1, v2, v3], p2[v0, v1, T.int64(0), T.int64(0)])
                                T.writes(T_relu[v0, v1, v2, v3])
                                T_relu[v0, v1, v2, v3] = T.max(conv2d_nchw_local[v0, v1, v2, v3] + p2[v0, v1, T.int64(0), T.int64(0)], T.float32(0))
b0 = sch.get_block(name="pad_temp", func_name="main")
b1 = sch.get_block(name="conv2d_nchw", func_name="main")
b2 = sch.get_block(name="T_add", func_name="main")
b3 = sch.get_block(name="T_relu", func_name="main")
b4 = sch.get_block(name="root", func_name="main")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSSRRSRS")
l5, l6, l7, l8, l9, l10, l11 = sch.get_loops(block=b1)
v12, v13, v14, v15, v16 = sch.sample_perfect_tile(loop=l5, n=5, max_innermost_factor=64, decision=[1, 1, 1, 1, 1])
l17, l18, l19, l20, l21 = sch.split(loop=l5, factors=[v12, v13, v14, v15, v16], preserve_unit_iters=True)
v22, v23, v24, v25, v26 = sch.sample_perfect_tile(loop=l6, n=5, max_innermost_factor=64, decision=[1, 2, 2, 8, 4])
l27, l28, l29, l30, l31 = sch.split(loop=l6, factors=[v22, v23, v24, v25, v26], preserve_unit_iters=True)
v32, v33, v34, v35, v36 = sch.sample_perfect_tile(loop=l7, n=5, max_innermost_factor=64, decision=[1, 1, 7, 1, 2])
l37, l38, l39, l40, l41 = sch.split(loop=l7, factors=[v32, v33, v34, v35, v36], preserve_unit_iters=True)
v42, v43, v44, v45, v46 = sch.sample_perfect_tile(loop=l8, n=5, max_innermost_factor=64, decision=[7, 1, 1, 2, 1])
l47, l48, l49, l50, l51 = sch.split(loop=l8, factors=[v42, v43, v44, v45, v46], preserve_unit_iters=True)
v52, v53, v54 = sch.sample_perfect_tile(loop=l9, n=3, max_innermost_factor=64, decision=[1, 98, 16])
l55, l56, l57 = sch.split(loop=l9, factors=[v52, v53, v54], preserve_unit_iters=True)
v58, v59, v60 = sch.sample_perfect_tile(loop=l10, n=3, max_innermost_factor=64, decision=[1, 1, 1])
l61, l62, l63 = sch.split(loop=l10, factors=[v58, v59, v60], preserve_unit_iters=True)
v64, v65, v66 = sch.sample_perfect_tile(loop=l11, n=3, max_innermost_factor=64, decision=[1, 1, 1])
l67, l68, l69 = sch.split(loop=l11, factors=[v64, v65, v66], preserve_unit_iters=True)
sch.reorder(l17, l27, l37, l47, l18, l28, l38, l48, l19, l29, l39, l49, l55, l61, l67, l56, l62, l68, l20, l30, l40, l50, l57, l63, l69, l21, l31, l41, l51)
l70 = sch.fuse(l17, l27, l37, l47, preserve_unit_iters=True)
sch.bind(loop=l70, thread_axis="blockIdx.x")
l71 = sch.fuse(l18, l28, l38, l48, preserve_unit_iters=True)
sch.bind(loop=l71, thread_axis="vthread.x")
l72 = sch.fuse(l19, l29, l39, l49, preserve_unit_iters=True)
sch.bind(loop=l72, thread_axis="threadIdx.x")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_low_inclusive", ann_val=32)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_high_inclusive", ann_val=1024)
b73 = sch.cache_write(block=b1, write_buffer_index=0, storage_scope="local")
sch.reverse_compute_at(block=b73, loop=l72, preserve_unit_loops=True, index=-1)
b74 = sch.cache_read(block=b1, read_buffer_index=0, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b74, loop=l67, preserve_unit_loops=True, index=-1)
l75, l76, l77, l78, l79, l80, l81, l82, l83, l84 = sch.get_loops(block=b74)
l85 = sch.fuse(l81, l82, l83, l84, preserve_unit_iters=True)
v86 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=0)
sch.annotate(block_or_loop=b74, ann_key="meta_schedule.cooperative_fetch", ann_val=v86)
b87 = sch.cache_read(block=b1, read_buffer_index=1, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b87, loop=l67, preserve_unit_loops=True, index=-1)
l88, l89, l90, l91, l92, l93, l94, l95, l96, l97 = sch.get_loops(block=b87)
l98 = sch.fuse(l94, l95, l96, l97, preserve_unit_iters=True)
v99 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=0)
sch.annotate(block_or_loop=b87, ann_key="meta_schedule.cooperative_fetch", ann_val=v99)
l100 = sch.fuse(l55, l61, l67, preserve_unit_iters=True)
sch.annotate(block_or_loop=l100, ann_key="software_pipeline_stage", ann_val=[0, 0, 2])
sch.annotate(block_or_loop=l100, ann_key="software_pipeline_order", ann_val=[0, 1, 2])
sch.annotate(block_or_loop=l100, ann_key="software_pipeline_async_stages", ann_val=[0])
sch.reverse_compute_inline(block=b3)
sch.reverse_compute_inline(block=b2)
sch.compute_inline(block=b0)
v101 = sch.sample_categorical(candidates=[0, 16, 64, 512, 1024], probs=[0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001], decision=2)
sch.annotate(block_or_loop=b4, ann_key="meta_schedule.unroll_explicit", ann_val=v101)
2024-05-01 15:05:21 [INFO] [task_scheduler.cc:170] Design space #2:
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(1568), T.int64(14), T.int64(14)), "float32"), p1: T.Buffer((T.int64(128), T.int64(1568), T.int64(1), T.int64(1)), "float32"), p2: T.Buffer((T.int64(1), T.int64(128), T.int64(1), T.int64(1)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(128), T.int64(14), T.int64(14)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        with T.block("root"):
            T.reads()
            T.writes()
            T.block_attr({"meta_schedule.unroll_explicit": 64})
            conv2d_nchw_local = T.alloc_buffer((T.int64(1), T.int64(128), T.int64(14), T.int64(14)), scope="local")
            pad_temp_shared = T.alloc_buffer((T.int64(1), T.int64(1568), T.int64(14), T.int64(14)), scope="shared")
            p1_shared = T.alloc_buffer((T.int64(128), T.int64(1568), T.int64(1), T.int64(1)), scope="shared")
            for nn_0_ff_0_yy_0_xx_0_fused in T.thread_binding(T.int64(7), thread="blockIdx.x"):
                for nn_1_ff_1_yy_1_xx_1_fused in T.thread_binding(T.int64(2), thread="vthread.x"):
                    for nn_2_ff_2_yy_2_xx_2_fused in T.thread_binding(T.int64(14), thread="threadIdx.x"):
                        for rc_0_ry_0_rx_0_fused in T.serial(T.int64(1), annotations={"software_pipeline_async_stages": [0], "software_pipeline_order": [0, 1, 2], "software_pipeline_stage": [0, 0, 3]}):
                            for ax0_ax1_ax2_ax3_fused in range(T.int64(43904)):
                                with T.block("pad_temp_shared"):
                                    v0 = T.axis.spatial(T.int64(1), T.int64(0))
                                    v1 = T.axis.spatial(T.int64(1568), ax0_ax1_ax2_ax3_fused // T.int64(28))
                                    v2 = T.axis.spatial(T.int64(14), ax0_ax1_ax2_ax3_fused % T.int64(28) // T.int64(2))
                                    v3 = T.axis.spatial(T.int64(14), nn_0_ff_0_yy_0_xx_0_fused * T.int64(2) + ax0_ax1_ax2_ax3_fused % T.int64(2))
                                    T.reads(p0[v0, v1, v2, v3])
                                    T.writes(pad_temp_shared[v0, v1, v2, v3])
                                    T.block_attr({"meta_schedule.cooperative_fetch": 1})
                                    pad_temp_shared[v0, v1, v2, v3] = p0[v0, v1, v2, v3]
                            for ax0_ax1_ax2_ax3_fused in range(T.int64(200704)):
                                with T.block("p1_shared"):
                                    v0 = T.axis.spatial(T.int64(128), ax0_ax1_ax2_ax3_fused // T.int64(1568))
                                    v1 = T.axis.spatial(T.int64(1568), ax0_ax1_ax2_ax3_fused % T.int64(1568))
                                    v2 = T.axis.spatial(T.int64(1), T.int64(0))
                                    v3 = T.axis.spatial(T.int64(1), T.int64(0))
                                    T.reads(p1[v0, v1, v2, v3])
                                    T.writes(p1_shared[v0, v1, v2, v3])
                                    T.block_attr({"meta_schedule.cooperative_fetch": 1})
                                    p1_shared[v0, v1, v2, v3] = p1[v0, v1, v2, v3]
                            for rc_1, ry_1, rx_1, nn_3, ff_3, yy_3, xx_3, rc_2, ry_2, rx_2, nn_4, ff_4, yy_4, xx_4 in T.grid(T.int64(98), T.int64(1), T.int64(1), T.int64(1), T.int64(8), T.int64(1), T.int64(2), T.int64(16), T.int64(1), T.int64(1), T.int64(1), T.int64(4), T.int64(2), T.int64(1)):
                                with T.block("conv2d_nchw"):
                                    v_nn = T.axis.spatial(T.int64(1), nn_3 + nn_4)
                                    v_ff = T.axis.spatial(T.int64(128), nn_1_ff_1_yy_1_xx_1_fused * T.int64(64) + nn_2_ff_2_yy_2_xx_2_fused // T.int64(7) * T.int64(32) + ff_3 * T.int64(4) + ff_4)
                                    v_yy = T.axis.spatial(T.int64(14), nn_2_ff_2_yy_2_xx_2_fused % T.int64(7) * T.int64(2) + yy_3 * T.int64(2) + yy_4)
                                    v_xx = T.axis.spatial(T.int64(14), nn_0_ff_0_yy_0_xx_0_fused * T.int64(2) + xx_3 + xx_4)
                                    v_rc = T.axis.reduce(T.int64(1568), rc_1 * T.int64(16) + rc_2)
                                    v_ry = T.axis.reduce(T.int64(1), ry_1 + ry_2)
                                    v_rx = T.axis.reduce(T.int64(1), rx_1 + rx_2)
                                    T.reads(pad_temp_shared[v_nn, v_rc, v_yy + v_ry, v_xx + v_rx], p1_shared[v_ff, v_rc, v_ry, v_rx])
                                    T.writes(conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx])
                                    T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 32, "meta_schedule.tiling_structure": "SSSRRSRS"})
                                    with T.init():
                                        conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx] = T.float32(0)
                                    conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx] = conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx] + pad_temp_shared[v_nn, v_rc, v_yy + v_ry, v_xx + v_rx] * p1_shared[v_ff, v_rc, v_ry, v_rx]
                        for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(32), T.int64(2), T.int64(2)):
                            with T.block("conv2d_nchw_local"):
                                v0 = T.axis.spatial(T.int64(1), ax0)
                                v1 = T.axis.spatial(T.int64(128), nn_1_ff_1_yy_1_xx_1_fused * T.int64(64) + nn_2_ff_2_yy_2_xx_2_fused // T.int64(7) * T.int64(32) + ax1)
                                v2 = T.axis.spatial(T.int64(14), nn_2_ff_2_yy_2_xx_2_fused % T.int64(7) * T.int64(2) + ax2)
                                v3 = T.axis.spatial(T.int64(14), nn_0_ff_0_yy_0_xx_0_fused * T.int64(2) + ax3)
                                T.reads(conv2d_nchw_local[v0, v1, v2, v3], p2[v0, v1, T.int64(0), T.int64(0)])
                                T.writes(T_relu[v0, v1, v2, v3])
                                T_relu[v0, v1, v2, v3] = T.max(conv2d_nchw_local[v0, v1, v2, v3] + p2[v0, v1, T.int64(0), T.int64(0)], T.float32(0))
b0 = sch.get_block(name="pad_temp", func_name="main")
b1 = sch.get_block(name="conv2d_nchw", func_name="main")
b2 = sch.get_block(name="T_add", func_name="main")
b3 = sch.get_block(name="T_relu", func_name="main")
b4 = sch.get_block(name="root", func_name="main")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSSRRSRS")
l5, l6, l7, l8, l9, l10, l11 = sch.get_loops(block=b1)
v12, v13, v14, v15, v16 = sch.sample_perfect_tile(loop=l5, n=5, max_innermost_factor=64, decision=[1, 1, 1, 1, 1])
l17, l18, l19, l20, l21 = sch.split(loop=l5, factors=[v12, v13, v14, v15, v16], preserve_unit_iters=True)
v22, v23, v24, v25, v26 = sch.sample_perfect_tile(loop=l6, n=5, max_innermost_factor=64, decision=[1, 2, 2, 8, 4])
l27, l28, l29, l30, l31 = sch.split(loop=l6, factors=[v22, v23, v24, v25, v26], preserve_unit_iters=True)
v32, v33, v34, v35, v36 = sch.sample_perfect_tile(loop=l7, n=5, max_innermost_factor=64, decision=[1, 1, 7, 1, 2])
l37, l38, l39, l40, l41 = sch.split(loop=l7, factors=[v32, v33, v34, v35, v36], preserve_unit_iters=True)
v42, v43, v44, v45, v46 = sch.sample_perfect_tile(loop=l8, n=5, max_innermost_factor=64, decision=[7, 1, 1, 2, 1])
l47, l48, l49, l50, l51 = sch.split(loop=l8, factors=[v42, v43, v44, v45, v46], preserve_unit_iters=True)
v52, v53, v54 = sch.sample_perfect_tile(loop=l9, n=3, max_innermost_factor=64, decision=[1, 98, 16])
l55, l56, l57 = sch.split(loop=l9, factors=[v52, v53, v54], preserve_unit_iters=True)
v58, v59, v60 = sch.sample_perfect_tile(loop=l10, n=3, max_innermost_factor=64, decision=[1, 1, 1])
l61, l62, l63 = sch.split(loop=l10, factors=[v58, v59, v60], preserve_unit_iters=True)
v64, v65, v66 = sch.sample_perfect_tile(loop=l11, n=3, max_innermost_factor=64, decision=[1, 1, 1])
l67, l68, l69 = sch.split(loop=l11, factors=[v64, v65, v66], preserve_unit_iters=True)
sch.reorder(l17, l27, l37, l47, l18, l28, l38, l48, l19, l29, l39, l49, l55, l61, l67, l56, l62, l68, l20, l30, l40, l50, l57, l63, l69, l21, l31, l41, l51)
l70 = sch.fuse(l17, l27, l37, l47, preserve_unit_iters=True)
sch.bind(loop=l70, thread_axis="blockIdx.x")
l71 = sch.fuse(l18, l28, l38, l48, preserve_unit_iters=True)
sch.bind(loop=l71, thread_axis="vthread.x")
l72 = sch.fuse(l19, l29, l39, l49, preserve_unit_iters=True)
sch.bind(loop=l72, thread_axis="threadIdx.x")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_low_inclusive", ann_val=32)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_high_inclusive", ann_val=1024)
b73 = sch.cache_write(block=b1, write_buffer_index=0, storage_scope="local")
sch.reverse_compute_at(block=b73, loop=l72, preserve_unit_loops=True, index=-1)
b74 = sch.cache_read(block=b1, read_buffer_index=0, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b74, loop=l67, preserve_unit_loops=True, index=-1)
l75, l76, l77, l78, l79, l80, l81, l82, l83, l84 = sch.get_loops(block=b74)
l85 = sch.fuse(l81, l82, l83, l84, preserve_unit_iters=True)
v86 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=0)
sch.annotate(block_or_loop=b74, ann_key="meta_schedule.cooperative_fetch", ann_val=v86)
b87 = sch.cache_read(block=b1, read_buffer_index=1, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b87, loop=l67, preserve_unit_loops=True, index=-1)
l88, l89, l90, l91, l92, l93, l94, l95, l96, l97 = sch.get_loops(block=b87)
l98 = sch.fuse(l94, l95, l96, l97, preserve_unit_iters=True)
v99 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=0)
sch.annotate(block_or_loop=b87, ann_key="meta_schedule.cooperative_fetch", ann_val=v99)
l100 = sch.fuse(l55, l61, l67, preserve_unit_iters=True)
sch.annotate(block_or_loop=l100, ann_key="software_pipeline_stage", ann_val=[0, 0, 3])
sch.annotate(block_or_loop=l100, ann_key="software_pipeline_order", ann_val=[0, 1, 2])
sch.annotate(block_or_loop=l100, ann_key="software_pipeline_async_stages", ann_val=[0])
sch.reverse_compute_inline(block=b3)
sch.reverse_compute_inline(block=b2)
sch.compute_inline(block=b0)
v101 = sch.sample_categorical(candidates=[0, 16, 64, 512, 1024], probs=[0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001], decision=2)
sch.annotate(block_or_loop=b4, ann_key="meta_schedule.unroll_explicit", ann_val=v101)
2024-05-01 16:16:10 [INFO] [evolutionary_search.cc:713] Generating candidates......
2024-05-01 16:16:10 [INFO] [evolutionary_search.cc:715] Picked top 64 candidate(s) from database
2024-05-01 16:16:11 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x12c16dd8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0xe0a86e8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x11203648)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x10b2b428)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0xb346d08)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x1057b158)]: 426 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x14ca5048)]: 0 failure(s)
2024-05-01 16:16:12 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x12c16dd8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0xe0a86e8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x11203648)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x10b2b428)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0xb346d08)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x1057b158)]: 854 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x14ca5048)]: 0 failure(s)
2024-05-01 16:16:14 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x12c16dd8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0xe0a86e8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x11203648)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x10b2b428)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0xb346d08)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x1057b158)]: 1281 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x14ca5048)]: 0 failure(s)
2024-05-01 16:16:14 [INFO] [evolutionary_search.cc:723] Sampled 63 candidate(s)
2024-05-01 16:16:16 [INFO] [evolutionary_search.cc:621] Evolve iter #0 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x12c16dd8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0xe0a86e8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x11203648)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x10b2b428)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0xb346d08)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x1057b158)]: 86 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x14ca5048)]: 0 failure(s)
2024-05-01 16:16:18 [INFO] [evolutionary_search.cc:621] Evolve iter #1 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x12c16dd8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0xe0a86e8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x11203648)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x10b2b428)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0xb346d08)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x1057b158)]: 87 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x14ca5048)]: 0 failure(s)
2024-05-01 16:16:21 [INFO] [evolutionary_search.cc:621] Evolve iter #2 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x12c16dd8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0xe0a86e8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x11203648)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x10b2b428)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0xb346d08)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x1057b158)]: 99 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x14ca5048)]: 0 failure(s)
2024-05-01 16:16:23 [INFO] [evolutionary_search.cc:621] Evolve iter #3 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x12c16dd8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0xe0a86e8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x11203648)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x10b2b428)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0xb346d08)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x1057b158)]: 101 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x14ca5048)]: 0 failure(s)
2024-05-01 16:16:23 [INFO] [evolutionary_search.cc:649] Scores of the best 64 candidates:
[1 : 16]:	0.9999  0.9995  0.9991  0.9989  0.9982  0.9966  0.9957  0.9946  0.9941  0.9937  0.9935  0.9934  0.9916  0.9909  0.9908  0.9895
[17 : 32]:	0.9887  0.9884  0.9881  0.9881  0.9880  0.9880  0.9867  0.9850  0.9841  0.9839  0.9829  0.9824  0.9816  0.9806  0.9805  0.9804
[33 : 48]:	0.9803  0.9802  0.9787  0.9785  0.9785  0.9785  0.9785  0.9780  0.9770  0.9765  0.9765  0.9762  0.9755  0.9754  0.9745  0.9745
[49 : 64]:	0.9743  0.9738  0.9724  0.9718  0.9713  0.9706  0.9702  0.9695  0.9694  0.9684  0.9683  0.9676  0.9675  0.9670  0.9669  0.9665
2024-05-01 16:16:23 [INFO] [evolutionary_search.cc:727] Got 64 candidate(s) with evolutionary search
2024-05-01 16:16:23 [INFO] [evolutionary_search.cc:730] Sending 64 candidates(s) for measurement
2024-05-01 18:33:52 [INFO] [task_scheduler.cc:131] [Task #78: fused_nn_conv2d_add_nn_relu_38] Trial #1: GFLOPs: 536.1864. Time: 146.8261 us. Best GFLOPs: 536.1864
2024-05-01 18:33:52 [INFO] [task_scheduler.cc:131] [Task #78: fused_nn_conv2d_add_nn_relu_38] Trial #2: GFLOPs: 333.5635. Time: 236.0155 us. Best GFLOPs: 536.1864
2024-05-01 18:33:52 [INFO] [task_scheduler.cc:131] [Task #78: fused_nn_conv2d_add_nn_relu_38] Trial #3: GFLOPs: 393.4947. Time: 200.0691 us. Best GFLOPs: 536.1864
2024-05-01 18:33:52 [INFO] [task_scheduler.cc:131] [Task #78: fused_nn_conv2d_add_nn_relu_38] Trial #4: GFLOPs: 79.3025. Time: 992.7325 us. Best GFLOPs: 536.1864
2024-05-01 18:33:52 [INFO] [task_scheduler.cc:131] [Task #78: fused_nn_conv2d_add_nn_relu_38] Trial #5: GFLOPs: 97.3326. Time: 808.8361 us. Best GFLOPs: 536.1864
2024-05-01 18:33:52 [INFO] [task_scheduler.cc:131] [Task #78: fused_nn_conv2d_add_nn_relu_38] Trial #6: GFLOPs: 617.4331. Time: 127.5055 us. Best GFLOPs: 617.4331
2024-05-01 18:33:52 [INFO] [task_scheduler.cc:131] [Task #78: fused_nn_conv2d_add_nn_relu_38] Trial #7: GFLOPs: 392.3901. Time: 200.6323 us. Best GFLOPs: 617.4331
2024-05-01 18:33:52 [INFO] [task_scheduler.cc:131] [Task #78: fused_nn_conv2d_add_nn_relu_38] Trial #8: GFLOPs: 178.4712. Time: 441.1139 us. Best GFLOPs: 617.4331
2024-05-01 18:33:52 [INFO] [task_scheduler.cc:131] [Task #78: fused_nn_conv2d_add_nn_relu_38] Trial #9: GFLOPs: 81.5955. Time: 964.8344 us. Best GFLOPs: 617.4331
2024-05-01 18:33:52 [INFO] [task_scheduler.cc:131] [Task #78: fused_nn_conv2d_add_nn_relu_38] Trial #10: GFLOPs: 23.7138. Time: 3319.8409 us. Best GFLOPs: 617.4331
2024-05-01 18:33:52 [INFO] [task_scheduler.cc:131] [Task #78: fused_nn_conv2d_add_nn_relu_38] Trial #11: GFLOPs: 765.7206. Time: 102.8131 us. Best GFLOPs: 765.7206
2024-05-01 18:33:52 [INFO] [task_scheduler.cc:131] [Task #78: fused_nn_conv2d_add_nn_relu_38] Trial #12: GFLOPs: 606.5698. Time: 129.7891 us. Best GFLOPs: 765.7206
2024-05-01 18:33:52 [INFO] [task_scheduler.cc:131] [Task #78: fused_nn_conv2d_add_nn_relu_38] Trial #13: GFLOPs: 27.8213. Time: 2829.7102 us. Best GFLOPs: 765.7206
2024-05-01 18:33:52 [INFO] [task_scheduler.cc:131] [Task #78: fused_nn_conv2d_add_nn_relu_38] Trial #14: GFLOPs: 295.7131. Time: 266.2248 us. Best GFLOPs: 765.7206
2024-05-01 18:33:52 [INFO] [task_scheduler.cc:131] [Task #78: fused_nn_conv2d_add_nn_relu_38] Trial #15: GFLOPs: 236.8185. Time: 332.4325 us. Best GFLOPs: 765.7206
2024-05-01 18:33:52 [INFO] [task_scheduler.cc:131] [Task #78: fused_nn_conv2d_add_nn_relu_38] Trial #16: GFLOPs: 107.8535. Time: 729.9359 us. Best GFLOPs: 765.7206
2024-05-01 18:33:52 [INFO] [task_scheduler.cc:131] [Task #78: fused_nn_conv2d_add_nn_relu_38] Trial #17: GFLOPs: 590.2421. Time: 133.3794 us. Best GFLOPs: 765.7206
2024-05-01 18:33:52 [INFO] [task_scheduler.cc:131] [Task #78: fused_nn_conv2d_add_nn_relu_38] Trial #18: GFLOPs: 87.4575. Time: 900.1646 us. Best GFLOPs: 765.7206
2024-05-01 18:33:52 [INFO] [task_scheduler.cc:131] [Task #78: fused_nn_conv2d_add_nn_relu_38] Trial #19: GFLOPs: 590.5544. Time: 133.3089 us. Best GFLOPs: 765.7206
2024-05-01 18:33:52 [INFO] [task_scheduler.cc:131] [Task #78: fused_nn_conv2d_add_nn_relu_38] Trial #20: GFLOPs: 95.7295. Time: 822.3811 us. Best GFLOPs: 765.7206
2024-05-01 18:33:52 [INFO] [task_scheduler.cc:131] [Task #78: fused_nn_conv2d_add_nn_relu_38] Trial #21: GFLOPs: 243.0441. Time: 323.9171 us. Best GFLOPs: 765.7206
2024-05-01 18:33:52 [INFO] [task_scheduler.cc:131] [Task #78: fused_nn_conv2d_add_nn_relu_38] Trial #22: GFLOPs: 258.9293. Time: 304.0449 us. Best GFLOPs: 765.7206
2024-05-01 18:33:52 [INFO] [task_scheduler.cc:131] [Task #78: fused_nn_conv2d_add_nn_relu_38] Trial #23: GFLOPs: 374.4784. Time: 210.2288 us. Best GFLOPs: 765.7206
2024-05-01 18:33:52 [INFO] [task_scheduler.cc:131] [Task #78: fused_nn_conv2d_add_nn_relu_38] Trial #24: GFLOPs: 457.0768. Time: 172.2383 us. Best GFLOPs: 765.7206
2024-05-01 18:33:52 [INFO] [task_scheduler.cc:131] [Task #78: fused_nn_conv2d_add_nn_relu_38] Trial #25: GFLOPs: 222.7613. Time: 353.4103 us. Best GFLOPs: 765.7206
2024-05-01 18:33:52 [INFO] [task_scheduler.cc:131] [Task #78: fused_nn_conv2d_add_nn_relu_38] Trial #26: GFLOPs: 339.3549. Time: 231.9876 us. Best GFLOPs: 765.7206
2024-05-01 18:33:52 [INFO] [task_scheduler.cc:131] [Task #78: fused_nn_conv2d_add_nn_relu_38] Trial #27: GFLOPs: 66.7943. Time: 1178.6361 us. Best GFLOPs: 765.7206
2024-05-01 18:33:52 [INFO] [task_scheduler.cc:131] [Task #78: fused_nn_conv2d_add_nn_relu_38] Trial #28: GFLOPs: 67.3865. Time: 1168.2768 us. Best GFLOPs: 765.7206
2024-05-01 18:33:52 [INFO] [task_scheduler.cc:131] [Task #78: fused_nn_conv2d_add_nn_relu_38] Trial #29: GFLOPs: 534.0391. Time: 147.4164 us. Best GFLOPs: 765.7206
2024-05-01 18:33:52 [INFO] [task_scheduler.cc:131] [Task #78: fused_nn_conv2d_add_nn_relu_38] Trial #30: GFLOPs: 8.3146. Time: 9468.4628 us. Best GFLOPs: 765.7206
2024-05-01 18:33:52 [INFO] [task_scheduler.cc:131] [Task #78: fused_nn_conv2d_add_nn_relu_38] Trial #31: GFLOPs: 400.6305. Time: 196.5056 us. Best GFLOPs: 765.7206
2024-05-01 18:33:52 [INFO] [task_scheduler.cc:131] [Task #78: fused_nn_conv2d_add_nn_relu_38] Trial #32: GFLOPs: 240.0174. Time: 328.0018 us. Best GFLOPs: 765.7206
2024-05-01 18:33:52 [INFO] [task_scheduler.cc:131] [Task #78: fused_nn_conv2d_add_nn_relu_38] Trial #33: GFLOPs: 296.3733. Time: 265.6317 us. Best GFLOPs: 765.7206
2024-05-01 18:33:52 [INFO] [task_scheduler.cc:131] [Task #78: fused_nn_conv2d_add_nn_relu_38] Trial #34: GFLOPs: 323.3727. Time: 243.4533 us. Best GFLOPs: 765.7206
2024-05-01 18:33:52 [INFO] [task_scheduler.cc:131] [Task #78: fused_nn_conv2d_add_nn_relu_38] Trial #35: GFLOPs: 381.2006. Time: 206.5216 us. Best GFLOPs: 765.7206
2024-05-01 18:33:52 [INFO] [task_scheduler.cc:131] [Task #78: fused_nn_conv2d_add_nn_relu_38] Trial #36: GFLOPs: 13.8742. Time: 5674.2685 us. Best GFLOPs: 765.7206
2024-05-01 18:33:52 [INFO] [task_scheduler.cc:131] [Task #78: fused_nn_conv2d_add_nn_relu_38] Trial #37: GFLOPs: 146.4040. Time: 537.7321 us. Best GFLOPs: 765.7206
2024-05-01 18:33:52 [INFO] [task_scheduler.cc:131] [Task #78: fused_nn_conv2d_add_nn_relu_38] Trial #38: GFLOPs: 63.1758. Time: 1246.1448 us. Best GFLOPs: 765.7206
2024-05-01 18:33:52 [INFO] [task_scheduler.cc:131] [Task #78: fused_nn_conv2d_add_nn_relu_38] Trial #39: GFLOPs: 91.8831. Time: 856.8079 us. Best GFLOPs: 765.7206
2024-05-01 18:33:52 [INFO] [task_scheduler.cc:131] [Task #78: fused_nn_conv2d_add_nn_relu_38] Trial #40: GFLOPs: 35.5601. Time: 2213.8879 us. Best GFLOPs: 765.7206
2024-05-01 18:33:52 [INFO] [task_scheduler.cc:131] [Task #78: fused_nn_conv2d_add_nn_relu_38] Trial #41: GFLOPs: 24.7457. Time: 3181.4079 us. Best GFLOPs: 765.7206
2024-05-01 18:33:52 [INFO] [task_scheduler.cc:131] [Task #78: fused_nn_conv2d_add_nn_relu_38] Trial #42: GFLOPs: 163.3352. Time: 481.9913 us. Best GFLOPs: 765.7206
2024-05-01 18:33:52 [INFO] [task_scheduler.cc:131] [Task #78: fused_nn_conv2d_add_nn_relu_38] Trial #43: GFLOPs: 853.1574. Time: 92.2762 us. Best GFLOPs: 853.1574
2024-05-01 18:33:52 [INFO] [task_scheduler.cc:131] [Task #78: fused_nn_conv2d_add_nn_relu_38] Trial #44: GFLOPs: 36.4563. Time: 2159.4634 us. Best GFLOPs: 853.1574
2024-05-01 18:33:52 [INFO] [task_scheduler.cc:131] [Task #78: fused_nn_conv2d_add_nn_relu_38] Trial #45: GFLOPs: 264.6752. Time: 297.4443 us. Best GFLOPs: 853.1574
2024-05-01 18:33:52 [INFO] [task_scheduler.cc:131] [Task #78: fused_nn_conv2d_add_nn_relu_38] Trial #46: GFLOPs: 233.8162. Time: 336.7010 us. Best GFLOPs: 853.1574
2024-05-01 18:33:52 [INFO] [task_scheduler.cc:131] [Task #78: fused_nn_conv2d_add_nn_relu_38] Trial #47: GFLOPs: 348.5344. Time: 225.8777 us. Best GFLOPs: 853.1574
2024-05-01 18:33:52 [INFO] [task_scheduler.cc:131] [Task #78: fused_nn_conv2d_add_nn_relu_38] Trial #48: GFLOPs: 138.2594. Time: 569.4091 us. Best GFLOPs: 853.1574
2024-05-01 18:33:52 [INFO] [task_scheduler.cc:131] [Task #78: fused_nn_conv2d_add_nn_relu_38] Trial #49: GFLOPs: 134.4307. Time: 585.6262 us. Best GFLOPs: 853.1574
2024-05-01 18:33:52 [INFO] [task_scheduler.cc:131] [Task #78: fused_nn_conv2d_add_nn_relu_38] Trial #50: GFLOPs: 634.2420. Time: 124.1264 us. Best GFLOPs: 853.1574
2024-05-01 18:33:52 [INFO] [task_scheduler.cc:131] [Task #78: fused_nn_conv2d_add_nn_relu_38] Trial #51: GFLOPs: 80.6792. Time: 975.7924 us. Best GFLOPs: 853.1574
2024-05-01 18:33:52 [INFO] [task_scheduler.cc:131] [Task #78: fused_nn_conv2d_add_nn_relu_38] Trial #52: GFLOPs: 132.7064. Time: 593.2353 us. Best GFLOPs: 853.1574
2024-05-01 18:33:52 [INFO] [task_scheduler.cc:131] [Task #78: fused_nn_conv2d_add_nn_relu_38] Trial #53: GFLOPs: 111.4672. Time: 706.2715 us. Best GFLOPs: 853.1574
2024-05-01 18:33:52 [INFO] [task_scheduler.cc:131] [Task #78: fused_nn_conv2d_add_nn_relu_38] Trial #54: GFLOPs: 134.3387. Time: 586.0274 us. Best GFLOPs: 853.1574
2024-05-01 18:33:52 [INFO] [task_scheduler.cc:131] [Task #78: fused_nn_conv2d_add_nn_relu_38] Trial #55: GFLOPs: 113.5949. Time: 693.0432 us. Best GFLOPs: 853.1574
2024-05-01 18:33:52 [INFO] [task_scheduler.cc:131] [Task #78: fused_nn_conv2d_add_nn_relu_38] Trial #56: GFLOPs: 27.7738. Time: 2834.5458 us. Best GFLOPs: 853.1574
2024-05-01 18:33:52 [INFO] [task_scheduler.cc:131] [Task #78: fused_nn_conv2d_add_nn_relu_38] Trial #57: GFLOPs: 99.5087. Time: 791.1484 us. Best GFLOPs: 853.1574
2024-05-01 18:33:52 [INFO] [task_scheduler.cc:131] [Task #78: fused_nn_conv2d_add_nn_relu_38] Trial #58: GFLOPs: 17.7953. Time: 4423.9917 us. Best GFLOPs: 853.1574
2024-05-01 18:33:52 [INFO] [task_scheduler.cc:131] [Task #78: fused_nn_conv2d_add_nn_relu_38] Trial #59: GFLOPs: 106.7377. Time: 737.5661 us. Best GFLOPs: 853.1574
2024-05-01 18:33:52 [INFO] [task_scheduler.cc:121] [Task #78: fused_nn_conv2d_add_nn_relu_38] Trial #60: Error in running:
LocalRunner: An exception occurred
Traceback (most recent call last):
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/exec/popen_worker.py", line 87, in main
    result = fn(*args, **kwargs)
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/meta_schedule/runner/local_runner.py", line 159, in _worker_func
    costs: List[float] = f_run_evaluator(
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/meta_schedule/runner/local_runner.py", line 387, in default_run_evaluator
    return run_evaluator_common(rt_mod, device, evaluator_config, repeated_args)
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/meta_schedule/runner/utils.py", line 117, in run_evaluator_common
    profile_result = evaluator(*args)
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/runtime/module.py", line 397, in evaluator
    blob = feval(*args)
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/_ffi/_ctypes/packed_func.py", line 239, in __call__
    raise_last_ffi_error()
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/_ffi/base.py", line 481, in raise_last_ffi_error
    raise py_err
tvm.error.InternalError: Traceback (most recent call last):
  2: tvm::runtime::profiling::WrapTimeEvaluator(tvm::runtime::PackedFunc, DLDevice, int, int, int, int, int, int, int, tvm::runtime::PackedFunc)::{lambda(tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*)#1}::operator()(tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*) [clone .isra.0]
  1: tvm::runtime::CUDADeviceAPI::StreamSync(DLDevice, void*)
  0: _ZN3tvm7runtime6deta
  File "/mnt/home/gverma/ceph/opt/tvm/src/runtime/cuda/cuda_device_api.cc", line 212
InternalError: Check failed: (e == cudaSuccess || e == cudaErrorCudartUnloading) is false: CUDA: misaligned address

# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(1568), T.int64(14), T.int64(14)), "float32"), p1: T.Buffer((T.int64(128), T.int64(1568), T.int64(1), T.int64(1)), "float32"), p2: T.Buffer((T.int64(1), T.int64(128), T.int64(1), T.int64(1)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(128), T.int64(14), T.int64(14)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        conv2d_nchw_local = T.alloc_buffer((T.int64(1), T.int64(128), T.int64(14), T.int64(14)), scope="local")
        pad_temp_shared = T.alloc_buffer((T.int64(1), T.int64(1568), T.int64(14), T.int64(14)), scope="shared")
        p1_shared = T.alloc_buffer((T.int64(128), T.int64(1568), T.int64(1), T.int64(1)), scope="shared")
        for nn_0_ff_0_yy_0_xx_0_fused in T.thread_binding(T.int64(28), thread="blockIdx.x", annotations={"pragma_auto_unroll_max_step": 64, "pragma_unroll_explicit": 1}):
            for nn_1_ff_1_yy_1_xx_1_fused in T.thread_binding(T.int64(1), thread="vthread.x"):
                for nn_2_ff_2_yy_2_xx_2_fused in T.thread_binding(T.int64(32), thread="threadIdx.x"):
                    for nn_3_init, ff_3_init, yy_3_init, xx_3_init, nn_4_init, ff_4_init, yy_4_init, xx_4_init in T.grid(T.int64(1), T.int64(4), T.int64(1), T.int64(7), T.int64(1), T.int64(1), T.int64(1), T.int64(1)):
                        with T.block("conv2d_nchw_init"):
                            v_nn = T.axis.spatial(T.int64(1), nn_3_init + nn_4_init)
                            v_ff = T.axis.spatial(T.int64(128), nn_2_ff_2_yy_2_xx_2_fused * T.int64(4) + ff_3_init + ff_4_init)
                            v_yy = T.axis.spatial(T.int64(14), nn_0_ff_0_yy_0_xx_0_fused // T.int64(2) + yy_3_init + yy_4_init)
                            v_xx = T.axis.spatial(T.int64(14), nn_0_ff_0_yy_0_xx_0_fused % T.int64(2) * T.int64(7) + xx_3_init + xx_4_init)
                            T.reads()
                            T.writes(conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx])
                            T.block_attr({"meta_schedule.thread_extent_high_inclusive": T.int64(1024), "meta_schedule.thread_extent_low_inclusive": T.int64(32), "meta_schedule.tiling_structure": "SSSRRSRS"})
                            conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx] = T.float32(0)
                    for rc_0_ry_0_rx_0_fused in T.serial(T.int64(112), annotations={"software_pipeline_async_stages": [T.int64(0)], "software_pipeline_order": [T.int64(0), T.int64(1), T.int64(2)], "software_pipeline_stage": [T.int64(0), T.int64(0), T.int64(2)]}):
                        for ax0_ax1_ax2_ax3_fused_0 in range(T.int64(2)):
                            for ax0_ax1_ax2_ax3_fused_1 in T.thread_binding(T.int64(32), thread="threadIdx.x"):
                                for ax0_ax1_ax2_ax3_fused_2 in T.vectorized(T.int64(2)):
                                    with T.block("pad_temp_shared"):
                                        v0 = T.axis.spatial(T.int64(1), T.int64(0))
                                        v1 = T.axis.spatial(T.int64(1568), rc_0_ry_0_rx_0_fused * T.int64(14) + (ax0_ax1_ax2_ax3_fused_0 * T.int64(64) + ax0_ax1_ax2_ax3_fused_1 * T.int64(2) + ax0_ax1_ax2_ax3_fused_2) // T.int64(7))
                                        v2 = T.axis.spatial(T.int64(14), nn_0_ff_0_yy_0_xx_0_fused // T.int64(2))
                                        v3 = T.axis.spatial(T.int64(14), nn_0_ff_0_yy_0_xx_0_fused % T.int64(2) * T.int64(7) + (ax0_ax1_ax2_ax3_fused_0 * T.int64(64) + ax0_ax1_ax2_ax3_fused_1 * T.int64(2) + ax0_ax1_ax2_ax3_fused_2) % T.int64(7))
                                        T.where((ax0_ax1_ax2_ax3_fused_0 * T.int64(32) + ax0_ax1_ax2_ax3_fused_1) * T.int64(2) + ax0_ax1_ax2_ax3_fused_2 < T.int64(98))
                                        T.reads(p0[v0, v1, v2, v3])
                                        T.writes(pad_temp_shared[v0, v1, v2, v3])
                                        pad_temp_shared[v0, v1, v2, v3] = p0[v0, v1, v2, v3]
                        for ax0_ax1_ax2_ax3_fused_0 in range(T.int64(14)):
                            for ax0_ax1_ax2_ax3_fused_1 in T.thread_binding(T.int64(32), thread="threadIdx.x"):
                                for ax0_ax1_ax2_ax3_fused_2 in T.vectorized(T.int64(4)):
                                    with T.block("p1_shared"):
                                        v0 = T.axis.spatial(T.int64(128), (ax0_ax1_ax2_ax3_fused_0 * T.int64(128) + ax0_ax1_ax2_ax3_fused_1 * T.int64(4) + ax0_ax1_ax2_ax3_fused_2) // T.int64(14))
                                        v1 = T.axis.spatial(T.int64(1568), rc_0_ry_0_rx_0_fused * T.int64(14) + (ax0_ax1_ax2_ax3_fused_0 * T.int64(128) + ax0_ax1_ax2_ax3_fused_1 * T.int64(4) + ax0_ax1_ax2_ax3_fused_2) % T.int64(14))
                                        v2 = T.axis.spatial(T.int64(1), T.int64(0))
                                        v3 = T.axis.spatial(T.int64(1), T.int64(0))
                                        T.reads(p1[v0, v1, v2, v3])
                                        T.writes(p1_shared[v0, v1, v2, v3])
                                        p1_shared[v0, v1, v2, v3] = p1[v0, v1, v2, v3]
                        for rc_1, ry_1, rx_1, nn_3, ff_3, yy_3, xx_3, rc_2, ry_2, rx_2, nn_4, ff_4, yy_4, xx_4 in T.grid(T.int64(7), T.int64(1), T.int64(1), T.int64(1), T.int64(4), T.int64(1), T.int64(7), T.int64(2), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1)):
                            with T.block("conv2d_nchw_update"):
                                v_nn = T.axis.spatial(T.int64(1), nn_3 + nn_4)
                                v_ff = T.axis.spatial(T.int64(128), nn_2_ff_2_yy_2_xx_2_fused * T.int64(4) + ff_3 + ff_4)
                                v_yy = T.axis.spatial(T.int64(14), nn_0_ff_0_yy_0_xx_0_fused // T.int64(2) + yy_3 + yy_4)
                                v_xx = T.axis.spatial(T.int64(14), nn_0_ff_0_yy_0_xx_0_fused % T.int64(2) * T.int64(7) + xx_3 + xx_4)
                                v_rc = T.axis.reduce(T.int64(1568), rc_0_ry_0_rx_0_fused * T.int64(14) + rc_1 * T.int64(2) + rc_2)
                                v_ry = T.axis.reduce(T.int64(1), ry_1 + ry_2)
                                v_rx = T.axis.reduce(T.int64(1), rx_1 + rx_2)
                                T.reads(conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx], pad_temp_shared[v_nn, v_rc, v_yy + v_ry, v_xx + v_rx], p1_shared[v_ff, v_rc, v_ry, v_rx])
                                T.writes(conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx])
                                T.block_attr({"meta_schedule.thread_extent_high_inclusive": T.int64(1024), "meta_schedule.thread_extent_low_inclusive": T.int64(32), "meta_schedule.tiling_structure": "SSSRRSRS"})
                                conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx] = conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx] + pad_temp_shared[v_nn, v_rc, v_yy + v_ry, v_xx + v_rx] * p1_shared[v_ff, v_rc, v_ry, v_rx]
                    for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(4), T.int64(1), T.int64(7)):
                        with T.block("conv2d_nchw_local"):
                            v0 = T.axis.spatial(T.int64(1), ax0)
                            v1 = T.axis.spatial(T.int64(128), nn_2_ff_2_yy_2_xx_2_fused * T.int64(4) + ax1)
                            v2 = T.axis.spatial(T.int64(14), nn_0_ff_0_yy_0_xx_0_fused // T.int64(2) + ax2)
                            v3 = T.axis.spatial(T.int64(14), nn_0_ff_0_yy_0_xx_0_fused % T.int64(2) * T.int64(7) + ax3)
                            T.reads(conv2d_nchw_local[v0, v1, v2, v3], p2[v0, v1, T.int64(0), T.int64(0)])
                            T.writes(T_relu[v0, v1, v2, v3])
                            T_relu[v0, v1, v2, v3] = T.max(conv2d_nchw_local[v0, v1, v2, v3] + p2[v0, v1, T.int64(0), T.int64(0)], T.float32(0))
b0 = sch.get_block(name="pad_temp", func_name="main")
b1 = sch.get_block(name="conv2d_nchw", func_name="main")
b2 = sch.get_block(name="T_add", func_name="main")
b3 = sch.get_block(name="T_relu", func_name="main")
b4 = sch.get_block(name="root", func_name="main")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSSRRSRS")
l5, l6, l7, l8, l9, l10, l11 = sch.get_loops(block=b1)
v12, v13, v14, v15, v16 = sch.sample_perfect_tile(loop=l5, n=5, max_innermost_factor=64, decision=[1, 1, 1, 1, 1])
l17, l18, l19, l20, l21 = sch.split(loop=l5, factors=[v12, v13, v14, v15, v16], preserve_unit_iters=True)
v22, v23, v24, v25, v26 = sch.sample_perfect_tile(loop=l6, n=5, max_innermost_factor=64, decision=[1, 1, 32, 4, 1])
l27, l28, l29, l30, l31 = sch.split(loop=l6, factors=[v22, v23, v24, v25, v26], preserve_unit_iters=True)
v32, v33, v34, v35, v36 = sch.sample_perfect_tile(loop=l7, n=5, max_innermost_factor=64, decision=[14, 1, 1, 1, 1])
l37, l38, l39, l40, l41 = sch.split(loop=l7, factors=[v32, v33, v34, v35, v36], preserve_unit_iters=True)
v42, v43, v44, v45, v46 = sch.sample_perfect_tile(loop=l8, n=5, max_innermost_factor=64, decision=[2, 1, 1, 7, 1])
l47, l48, l49, l50, l51 = sch.split(loop=l8, factors=[v42, v43, v44, v45, v46], preserve_unit_iters=True)
v52, v53, v54 = sch.sample_perfect_tile(loop=l9, n=3, max_innermost_factor=64, decision=[112, 7, 2])
l55, l56, l57 = sch.split(loop=l9, factors=[v52, v53, v54], preserve_unit_iters=True)
v58, v59, v60 = sch.sample_perfect_tile(loop=l10, n=3, max_innermost_factor=64, decision=[1, 1, 1])
l61, l62, l63 = sch.split(loop=l10, factors=[v58, v59, v60], preserve_unit_iters=True)
v64, v65, v66 = sch.sample_perfect_tile(loop=l11, n=3, max_innermost_factor=64, decision=[1, 1, 1])
l67, l68, l69 = sch.split(loop=l11, factors=[v64, v65, v66], preserve_unit_iters=True)
sch.reorder(l17, l27, l37, l47, l18, l28, l38, l48, l19, l29, l39, l49, l55, l61, l67, l56, l62, l68, l20, l30, l40, l50, l57, l63, l69, l21, l31, l41, l51)
l70 = sch.fuse(l17, l27, l37, l47, preserve_unit_iters=True)
sch.bind(loop=l70, thread_axis="blockIdx.x")
l71 = sch.fuse(l18, l28, l38, l48, preserve_unit_iters=True)
sch.bind(loop=l71, thread_axis="vthread.x")
l72 = sch.fuse(l19, l29, l39, l49, preserve_unit_iters=True)
sch.bind(loop=l72, thread_axis="threadIdx.x")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_low_inclusive", ann_val=32)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_high_inclusive", ann_val=1024)
b73 = sch.cache_write(block=b1, write_buffer_index=0, storage_scope="local")
sch.reverse_compute_at(block=b73, loop=l72, preserve_unit_loops=True, index=-1)
b74 = sch.cache_read(block=b1, read_buffer_index=0, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b74, loop=l67, preserve_unit_loops=True, index=-1)
l75, l76, l77, l78, l79, l80, l81, l82, l83, l84 = sch.get_loops(block=b74)
l85 = sch.fuse(l81, l82, l83, l84, preserve_unit_iters=True)
v86 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=1)
sch.annotate(block_or_loop=b74, ann_key="meta_schedule.cooperative_fetch", ann_val=v86)
b87 = sch.cache_read(block=b1, read_buffer_index=1, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b87, loop=l67, preserve_unit_loops=True, index=-1)
l88, l89, l90, l91, l92, l93, l94, l95, l96, l97 = sch.get_loops(block=b87)
l98 = sch.fuse(l94, l95, l96, l97, preserve_unit_iters=True)
v99 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b87, ann_key="meta_schedule.cooperative_fetch", ann_val=v99)
l100 = sch.fuse(l55, l61, l67, preserve_unit_iters=True)
sch.annotate(block_or_loop=l100, ann_key="software_pipeline_stage", ann_val=[0, 0, 2])
sch.annotate(block_or_loop=l100, ann_key="software_pipeline_order", ann_val=[0, 1, 2])
sch.annotate(block_or_loop=l100, ann_key="software_pipeline_async_stages", ann_val=[0])
sch.reverse_compute_inline(block=b3)
sch.reverse_compute_inline(block=b2)
sch.compute_inline(block=b0)
v101 = sch.sample_categorical(candidates=[0, 16, 64, 512, 1024], probs=[0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001], decision=2)
sch.annotate(block_or_loop=b4, ann_key="meta_schedule.unroll_explicit", ann_val=v101)
sch.enter_postproc()
sch.unannotate(block_or_loop=b74, ann_key="meta_schedule.cooperative_fetch")
l102, l103, l104, l105, l106 = sch.get_loops(block=b74)
l107, l108, l109 = sch.split(loop=l106, factors=[None, 32, 2], preserve_unit_iters=True)
sch.vectorize(loop=l109)
sch.bind(loop=l108, thread_axis="threadIdx.x")
sch.unannotate(block_or_loop=b87, ann_key="meta_schedule.cooperative_fetch")
l110, l111, l112, l113, l114 = sch.get_loops(block=b87)
l115, l116, l117 = sch.split(loop=l114, factors=[None, 32, 4], preserve_unit_iters=True)
sch.vectorize(loop=l117)
sch.bind(loop=l116, thread_axis="threadIdx.x")
b118 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b118, ann_key="meta_schedule.unroll_explicit")
b119, b120, b121, b122 = sch.get_child_blocks(b118)
l123, l124, l125, l126, l127, l128, l129 = sch.get_loops(block=b119)
l130, l131, l132, l133, l134, l135, l136 = sch.get_loops(block=b120)
l137, l138, l139, l140, l141, l142, l143, l144, l145, l146, l147, l148, l149, l150, l151, l152, l153, l154 = sch.get_loops(block=b121)
sch.annotate(block_or_loop=l137, ann_key="pragma_auto_unroll_max_step", ann_val=64)
sch.annotate(block_or_loop=l137, ann_key="pragma_unroll_explicit", ann_val=1)
l155, l156, l157, l158, l159, l160, l161 = sch.get_loops(block=b122)
b162 = sch.get_block(name="conv2d_nchw", func_name="main")
l163, l164, l165, l166, l167, l168, l169, l170, l171, l172, l173, l174, l175, l176, l177, l178, l179, l180 = sch.get_loops(block=b162)
b181 = sch.decompose_reduction(block=b162, loop=l166)
2024-05-01 18:33:52 [INFO] [task_scheduler.cc:121] [Task #78: fused_nn_conv2d_add_nn_relu_38] Trial #61: Error in running:
LocalRunner: An exception occurred
Traceback (most recent call last):
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/exec/popen_worker.py", line 87, in main
    result = fn(*args, **kwargs)
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/meta_schedule/runner/local_runner.py", line 152, in _worker_func
    repeated_args: List[T_ARGUMENT_LIST] = f_alloc_argument(
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/meta_schedule/runner/local_runner.py", line 360, in default_alloc_argument
    return alloc_argument_common(f_random_fill, device, args_info, alloc_repeat)
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/meta_schedule/runner/utils.py", line 74, in alloc_argument_common
    arg: Any = dispatcher.get(arg_type, None)(*arg_info)
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/meta_schedule/runner/utils.py", line 56, in alloc_tensor
    arg = ndarray.empty(shape=shape, dtype=dtype, device=device)
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/runtime/ndarray.py", line 391, in empty
    arr = _ffi_api.TVMArrayAllocWithScope(shape, dtype, device, mem_scope)
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/_ffi/_ctypes/packed_func.py", line 239, in __call__
    raise_last_ffi_error()
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/_ffi/base.py", line 481, in raise_last_ffi_error
    raise py_err
tvm.error.InternalError: Traceback (most recent call last):
  5: _ZN3tvm7runtime13PackedFun
  4: tvm::runtime::TypedPackedFunc<tvm::runtime::NDArray (tvm::runtime::ShapeTuple, DLDataType, DLDevice, tvm::runtime::Optional<tvm::runtime::String>)>::AssignTypedLambda<tvm::runtime::NDArray (*)(tvm::runtime::ShapeTuple, DLDataType, DLDevice, tvm::runtime::Optional<tvm::runtime::String>)>(tvm::runtime::NDArray (*)(tvm::runtime::ShapeTuple, DLDataType, DLDevice, tvm::runtime::Optional<tvm::runtime::String>), std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}::operator()(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*) const
  3: tvm::runtime::NDArray::Empty(tvm::runtime::ShapeTuple, DLDataType, DLDevice, tvm::runtime::Optional<tvm::runtime::String>)
  2: tvm::runtime::DeviceAPI::AllocDataSpace(DLDevice, int, long const*, DLDataType, tvm::runtime::Optional<tvm::runtime::String>)
  1: tvm::runtime::CUDADeviceAPI::AllocDataSpace(DLDevice, unsigned long, unsigned long, DLDataType)
  0: _ZN3tvm7runtime6deta
  File "/mnt/home/gverma/ceph/opt/tvm/src/runtime/cuda/cuda_device_api.cc", line 126
InternalError: Check failed: (e == cudaSuccess || e == cudaErrorCudartUnloading) is false: CUDA: misaligned address

# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(1568), T.int64(14), T.int64(14)), "float32"), p1: T.Buffer((T.int64(128), T.int64(1568), T.int64(1), T.int64(1)), "float32"), p2: T.Buffer((T.int64(1), T.int64(128), T.int64(1), T.int64(1)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(128), T.int64(14), T.int64(14)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        conv2d_nchw_local = T.alloc_buffer((T.int64(1), T.int64(128), T.int64(14), T.int64(14)), scope="local")
        pad_temp_shared = T.alloc_buffer((T.int64(1), T.int64(1568), T.int64(14), T.int64(14)), scope="shared")
        p1_shared = T.alloc_buffer((T.int64(128), T.int64(1568), T.int64(1), T.int64(1)), scope="shared")
        for nn_0_ff_0_yy_0_xx_0_fused in T.thread_binding(T.int64(16), thread="blockIdx.x", annotations={"pragma_auto_unroll_max_step": 512, "pragma_unroll_explicit": 1}):
            for nn_1_ff_1_yy_1_xx_1_fused in T.thread_binding(T.int64(1), thread="vthread.x"):
                for nn_2_ff_2_yy_2_xx_2_fused in T.thread_binding(T.int64(112), thread="threadIdx.x"):
                    for nn_3_init, ff_3_init, yy_3_init, xx_3_init, nn_4_init, ff_4_init, yy_4_init, xx_4_init in T.grid(T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(1), T.int64(7)):
                        with T.block("conv2d_nchw_init"):
                            v_nn = T.axis.spatial(T.int64(1), nn_3_init + nn_4_init)
                            v_ff = T.axis.spatial(T.int64(128), nn_0_ff_0_yy_0_xx_0_fused // T.int64(4) * T.int64(32) + nn_2_ff_2_yy_2_xx_2_fused // T.int64(7) * T.int64(2) + ff_3_init * T.int64(2) + ff_4_init)
                            v_yy = T.axis.spatial(T.int64(14), nn_0_ff_0_yy_0_xx_0_fused % T.int64(4) // T.int64(2) * T.int64(7) + nn_2_ff_2_yy_2_xx_2_fused % T.int64(7) + yy_3_init + yy_4_init)
                            v_xx = T.axis.spatial(T.int64(14), nn_0_ff_0_yy_0_xx_0_fused % T.int64(2) * T.int64(7) + xx_3_init * T.int64(7) + xx_4_init)
                            T.reads()
                            T.writes(conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx])
                            T.block_attr({"meta_schedule.thread_extent_high_inclusive": T.int64(1024), "meta_schedule.thread_extent_low_inclusive": T.int64(32), "meta_schedule.tiling_structure": "SSSRRSRS"})
                            conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx] = T.float32(0)
                    for rc_0, ry_0, rx_0 in T.grid(T.int64(784), T.int64(1), T.int64(1)):
                        for ax0_ax1_ax2_ax3_fused_0 in range(T.int64(1)):
                            for ax0_ax1_ax2_ax3_fused_1 in T.thread_binding(T.int64(112), thread="threadIdx.x"):
                                with T.block("pad_temp_shared"):
                                    v0 = T.axis.spatial(T.int64(1), T.int64(0))
                                    v1 = T.axis.spatial(T.int64(1568), rc_0 * T.int64(2) + (ax0_ax1_ax2_ax3_fused_0 * T.int64(112) + ax0_ax1_ax2_ax3_fused_1) // T.int64(49))
                                    v2 = T.axis.spatial(T.int64(14), nn_0_ff_0_yy_0_xx_0_fused % T.int64(4) // T.int64(2) * T.int64(7) + (ax0_ax1_ax2_ax3_fused_0 * T.int64(112) + ax0_ax1_ax2_ax3_fused_1) % T.int64(49) // T.int64(7))
                                    v3 = T.axis.spatial(T.int64(14), nn_0_ff_0_yy_0_xx_0_fused % T.int64(2) * T.int64(7) + (ax0_ax1_ax2_ax3_fused_0 * T.int64(112) + ax0_ax1_ax2_ax3_fused_1) % T.int64(7))
                                    T.where(ax0_ax1_ax2_ax3_fused_0 * T.int64(112) + ax0_ax1_ax2_ax3_fused_1 < T.int64(98))
                                    T.reads(p0[v0, v1, v2, v3])
                                    T.writes(pad_temp_shared[v0, v1, v2, v3])
                                    pad_temp_shared[v0, v1, v2, v3] = p0[v0, v1, v2, v3]
                        for ax0_ax1_ax2_ax3_fused_0 in range(T.int64(1)):
                            for ax0_ax1_ax2_ax3_fused_1 in T.thread_binding(T.int64(112), thread="threadIdx.x"):
                                for ax0_ax1_ax2_ax3_fused_2 in T.vectorized(T.int64(2)):
                                    with T.block("p1_shared"):
                                        v0 = T.axis.spatial(T.int64(128), nn_0_ff_0_yy_0_xx_0_fused // T.int64(4) * T.int64(32) + (ax0_ax1_ax2_ax3_fused_0 * T.int64(224) + ax0_ax1_ax2_ax3_fused_1 * T.int64(2) + ax0_ax1_ax2_ax3_fused_2) // T.int64(2))
                                        v1 = T.axis.spatial(T.int64(1568), rc_0 * T.int64(2) + (ax0_ax1_ax2_ax3_fused_0 * T.int64(224) + ax0_ax1_ax2_ax3_fused_1 * T.int64(2) + ax0_ax1_ax2_ax3_fused_2) % T.int64(2))
                                        v2 = T.axis.spatial(T.int64(1), T.int64(0))
                                        v3 = T.axis.spatial(T.int64(1), T.int64(0))
                                        T.where((ax0_ax1_ax2_ax3_fused_0 * T.int64(112) + ax0_ax1_ax2_ax3_fused_1) * T.int64(2) + ax0_ax1_ax2_ax3_fused_2 < T.int64(64))
                                        T.reads(p1[v0, v1, v2, v3])
                                        T.writes(p1_shared[v0, v1, v2, v3])
                                        p1_shared[v0, v1, v2, v3] = p1[v0, v1, v2, v3]
                        for rc_1, ry_1, rx_1, nn_3, ff_3, yy_3, xx_3, rc_2, ry_2, rx_2, nn_4, ff_4, yy_4, xx_4 in T.grid(T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(1), T.int64(7)):
                            with T.block("conv2d_nchw_update"):
                                v_nn = T.axis.spatial(T.int64(1), nn_3 + nn_4)
                                v_ff = T.axis.spatial(T.int64(128), nn_0_ff_0_yy_0_xx_0_fused // T.int64(4) * T.int64(32) + nn_2_ff_2_yy_2_xx_2_fused // T.int64(7) * T.int64(2) + ff_3 * T.int64(2) + ff_4)
                                v_yy = T.axis.spatial(T.int64(14), nn_0_ff_0_yy_0_xx_0_fused % T.int64(4) // T.int64(2) * T.int64(7) + nn_2_ff_2_yy_2_xx_2_fused % T.int64(7) + yy_3 + yy_4)
                                v_xx = T.axis.spatial(T.int64(14), nn_0_ff_0_yy_0_xx_0_fused % T.int64(2) * T.int64(7) + xx_3 * T.int64(7) + xx_4)
                                v_rc = T.axis.reduce(T.int64(1568), rc_0 * T.int64(2) + rc_1 * T.int64(2) + rc_2)
                                v_ry = T.axis.reduce(T.int64(1), ry_0 + ry_1 + ry_2)
                                v_rx = T.axis.reduce(T.int64(1), rx_0 + rx_1 + rx_2)
                                T.reads(conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx], pad_temp_shared[v_nn, v_rc, v_yy + v_ry, v_xx + v_rx], p1_shared[v_ff, v_rc, v_ry, v_rx])
                                T.writes(conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx])
                                T.block_attr({"meta_schedule.thread_extent_high_inclusive": T.int64(1024), "meta_schedule.thread_extent_low_inclusive": T.int64(32), "meta_schedule.tiling_structure": "SSSRRSRS"})
                                conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx] = conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx] + pad_temp_shared[v_nn, v_rc, v_yy + v_ry, v_xx + v_rx] * p1_shared[v_ff, v_rc, v_ry, v_rx]
                    for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(2), T.int64(1), T.int64(7)):
                        with T.block("conv2d_nchw_local"):
                            v0 = T.axis.spatial(T.int64(1), ax0)
                            v1 = T.axis.spatial(T.int64(128), nn_0_ff_0_yy_0_xx_0_fused // T.int64(4) * T.int64(32) + nn_2_ff_2_yy_2_xx_2_fused // T.int64(7) * T.int64(2) + ax1)
                            v2 = T.axis.spatial(T.int64(14), nn_0_ff_0_yy_0_xx_0_fused % T.int64(4) // T.int64(2) * T.int64(7) + nn_2_ff_2_yy_2_xx_2_fused % T.int64(7) + ax2)
                            v3 = T.axis.spatial(T.int64(14), nn_0_ff_0_yy_0_xx_0_fused % T.int64(2) * T.int64(7) + ax3)
                            T.reads(conv2d_nchw_local[v0, v1, v2, v3], p2[v0, v1, T.int64(0), T.int64(0)])
                            T.writes(T_relu[v0, v1, v2, v3])
                            T_relu[v0, v1, v2, v3] = T.max(conv2d_nchw_local[v0, v1, v2, v3] + p2[v0, v1, T.int64(0), T.int64(0)], T.float32(0))
b0 = sch.get_block(name="pad_temp", func_name="main")
b1 = sch.get_block(name="conv2d_nchw", func_name="main")
b2 = sch.get_block(name="T_add", func_name="main")
b3 = sch.get_block(name="T_relu", func_name="main")
b4 = sch.get_block(name="root", func_name="main")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSSRRSRS")
l5, l6, l7, l8, l9, l10, l11 = sch.get_loops(block=b1)
v12, v13, v14, v15, v16 = sch.sample_perfect_tile(loop=l5, n=5, max_innermost_factor=64, decision=[1, 1, 1, 1, 1])
l17, l18, l19, l20, l21 = sch.split(loop=l5, factors=[v12, v13, v14, v15, v16], preserve_unit_iters=True)
v22, v23, v24, v25, v26 = sch.sample_perfect_tile(loop=l6, n=5, max_innermost_factor=64, decision=[4, 1, 16, 1, 2])
l27, l28, l29, l30, l31 = sch.split(loop=l6, factors=[v22, v23, v24, v25, v26], preserve_unit_iters=True)
v32, v33, v34, v35, v36 = sch.sample_perfect_tile(loop=l7, n=5, max_innermost_factor=64, decision=[2, 1, 7, 1, 1])
l37, l38, l39, l40, l41 = sch.split(loop=l7, factors=[v32, v33, v34, v35, v36], preserve_unit_iters=True)
v42, v43, v44, v45, v46 = sch.sample_perfect_tile(loop=l8, n=5, max_innermost_factor=64, decision=[2, 1, 1, 1, 7])
l47, l48, l49, l50, l51 = sch.split(loop=l8, factors=[v42, v43, v44, v45, v46], preserve_unit_iters=True)
v52, v53, v54 = sch.sample_perfect_tile(loop=l9, n=3, max_innermost_factor=64, decision=[784, 1, 2])
l55, l56, l57 = sch.split(loop=l9, factors=[v52, v53, v54], preserve_unit_iters=True)
v58, v59, v60 = sch.sample_perfect_tile(loop=l10, n=3, max_innermost_factor=64, decision=[1, 1, 1])
l61, l62, l63 = sch.split(loop=l10, factors=[v58, v59, v60], preserve_unit_iters=True)
v64, v65, v66 = sch.sample_perfect_tile(loop=l11, n=3, max_innermost_factor=64, decision=[1, 1, 1])
l67, l68, l69 = sch.split(loop=l11, factors=[v64, v65, v66], preserve_unit_iters=True)
sch.reorder(l17, l27, l37, l47, l18, l28, l38, l48, l19, l29, l39, l49, l55, l61, l67, l56, l62, l68, l20, l30, l40, l50, l57, l63, l69, l21, l31, l41, l51)
l70 = sch.fuse(l17, l27, l37, l47, preserve_unit_iters=True)
sch.bind(loop=l70, thread_axis="blockIdx.x")
l71 = sch.fuse(l18, l28, l38, l48, preserve_unit_iters=True)
sch.bind(loop=l71, thread_axis="vthread.x")
l72 = sch.fuse(l19, l29, l39, l49, preserve_unit_iters=True)
sch.bind(loop=l72, thread_axis="threadIdx.x")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_low_inclusive", ann_val=32)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_high_inclusive", ann_val=1024)
b73 = sch.cache_write(block=b1, write_buffer_index=0, storage_scope="local")
sch.reverse_compute_at(block=b73, loop=l72, preserve_unit_loops=True, index=-1)
b74 = sch.cache_read(block=b1, read_buffer_index=0, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b74, loop=l67, preserve_unit_loops=True, index=-1)
l75, l76, l77, l78, l79, l80, l81, l82, l83, l84 = sch.get_loops(block=b74)
l85 = sch.fuse(l81, l82, l83, l84, preserve_unit_iters=True)
v86 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=0)
sch.annotate(block_or_loop=b74, ann_key="meta_schedule.cooperative_fetch", ann_val=v86)
b87 = sch.cache_read(block=b1, read_buffer_index=1, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b87, loop=l67, preserve_unit_loops=True, index=-1)
l88, l89, l90, l91, l92, l93, l94, l95, l96, l97 = sch.get_loops(block=b87)
l98 = sch.fuse(l94, l95, l96, l97, preserve_unit_iters=True)
v99 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=1)
sch.annotate(block_or_loop=b87, ann_key="meta_schedule.cooperative_fetch", ann_val=v99)
sch.reverse_compute_inline(block=b3)
sch.reverse_compute_inline(block=b2)
sch.compute_inline(block=b0)
v100 = sch.sample_categorical(candidates=[0, 16, 64, 512, 1024], probs=[0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001], decision=3)
sch.annotate(block_or_loop=b4, ann_key="meta_schedule.unroll_explicit", ann_val=v100)
sch.enter_postproc()
sch.unannotate(block_or_loop=b74, ann_key="meta_schedule.cooperative_fetch")
l101, l102, l103, l104, l105, l106, l107 = sch.get_loops(block=b74)
l108, l109 = sch.split(loop=l107, factors=[None, 112], preserve_unit_iters=True)
sch.bind(loop=l109, thread_axis="threadIdx.x")
sch.unannotate(block_or_loop=b87, ann_key="meta_schedule.cooperative_fetch")
l110, l111, l112, l113, l114, l115, l116 = sch.get_loops(block=b87)
l117, l118, l119 = sch.split(loop=l116, factors=[None, 112, 2], preserve_unit_iters=True)
sch.vectorize(loop=l119)
sch.bind(loop=l118, thread_axis="threadIdx.x")
b120 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b120, ann_key="meta_schedule.unroll_explicit")
b121, b122, b123, b124 = sch.get_child_blocks(b120)
l125, l126, l127, l128, l129, l130, l131, l132 = sch.get_loops(block=b121)
l133, l134, l135, l136, l137, l138, l139, l140, l141 = sch.get_loops(block=b122)
l142, l143, l144, l145, l146, l147, l148, l149, l150, l151, l152, l153, l154, l155, l156, l157, l158, l159, l160, l161 = sch.get_loops(block=b123)
sch.annotate(block_or_loop=l142, ann_key="pragma_auto_unroll_max_step", ann_val=512)
sch.annotate(block_or_loop=l142, ann_key="pragma_unroll_explicit", ann_val=1)
l162, l163, l164, l165, l166, l167, l168 = sch.get_loops(block=b124)
b169 = sch.get_block(name="conv2d_nchw", func_name="main")
l170, l171, l172, l173, l174, l175, l176, l177, l178, l179, l180, l181, l182, l183, l184, l185, l186, l187, l188, l189 = sch.get_loops(block=b169)
b190 = sch.decompose_reduction(block=b169, loop=l173)
2024-05-01 18:33:52 [INFO] [task_scheduler.cc:121] [Task #78: fused_nn_conv2d_add_nn_relu_38] Trial #62: Error in running:
LocalRunner: An exception occurred
Subprocess terminated
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(1568), T.int64(14), T.int64(14)), "float32"), p1: T.Buffer((T.int64(128), T.int64(1568), T.int64(1), T.int64(1)), "float32"), p2: T.Buffer((T.int64(1), T.int64(128), T.int64(1), T.int64(1)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(128), T.int64(14), T.int64(14)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        conv2d_nchw_local = T.alloc_buffer((T.int64(1), T.int64(128), T.int64(14), T.int64(14)), scope="local")
        pad_temp_shared = T.alloc_buffer((T.int64(1), T.int64(1568), T.int64(14), T.int64(14)), scope="shared")
        p1_shared = T.alloc_buffer((T.int64(128), T.int64(1568), T.int64(1), T.int64(1)), scope="shared")
        for nn_0_ff_0_yy_0_xx_0_fused in T.thread_binding(T.int64(1), thread="blockIdx.x", annotations={"pragma_auto_unroll_max_step": 512, "pragma_unroll_explicit": 1}):
            for nn_1_ff_1_yy_1_xx_1_fused in T.thread_binding(T.int64(2), thread="vthread.x"):
                for nn_2_ff_2_yy_2_xx_2_fused in T.thread_binding(T.int64(56), thread="threadIdx.x"):
                    for nn_3_init, ff_3_init, yy_3_init, xx_3_init, nn_4_init, ff_4_init, yy_4_init, xx_4_init in T.grid(T.int64(1), T.int64(8), T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(1), T.int64(14)):
                        with T.block("conv2d_nchw_init"):
                            v_nn = T.axis.spatial(T.int64(1), nn_3_init + nn_4_init)
                            v_ff = T.axis.spatial(T.int64(128), nn_1_ff_1_yy_1_xx_1_fused * T.int64(64) + nn_2_ff_2_yy_2_xx_2_fused // T.int64(14) * T.int64(16) + ff_3_init * T.int64(2) + ff_4_init)
                            v_yy = T.axis.spatial(T.int64(14), nn_2_ff_2_yy_2_xx_2_fused % T.int64(14) + yy_3_init + yy_4_init)
                            v_xx = T.axis.spatial(T.int64(14), xx_3_init * T.int64(14) + xx_4_init)
                            T.reads()
                            T.writes(conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx])
                            T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 32, "meta_schedule.tiling_structure": "SSSRRSRS"})
                            conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx] = T.float32(0)
                    for rc_0, ry_0, rx_0 in T.grid(T.int64(98), T.int64(1), T.int64(1)):
                        for ax0_ax1_ax2_ax3_fused_0 in range(T.int64(56)):
                            for ax0_ax1_ax2_ax3_fused_1 in T.thread_binding(T.int64(56), thread="threadIdx.x"):
                                with T.block("pad_temp_shared"):
                                    v0 = T.axis.spatial(T.int64(1), T.int64(0))
                                    v1 = T.axis.spatial(T.int64(1568), rc_0 * T.int64(16) + (ax0_ax1_ax2_ax3_fused_0 * T.int64(56) + ax0_ax1_ax2_ax3_fused_1) // T.int64(196))
                                    v2 = T.axis.spatial(T.int64(14), (ax0_ax1_ax2_ax3_fused_0 * T.int64(56) + ax0_ax1_ax2_ax3_fused_1) % T.int64(196) // T.int64(14))
                                    v3 = T.axis.spatial(T.int64(14), (ax0_ax1_ax2_ax3_fused_0 * T.int64(56) + ax0_ax1_ax2_ax3_fused_1) % T.int64(14))
                                    T.reads(p0[v0, v1, v2, v3])
                                    T.writes(pad_temp_shared[v0, v1, v2, v3])
                                    pad_temp_shared[v0, v1, v2, v3] = p0[v0, v1, v2, v3]
                        for ax0_ax1_ax2_ax3_fused_0 in range(T.int64(37)):
                            for ax0_ax1_ax2_ax3_fused_1 in T.thread_binding(T.int64(56), thread="threadIdx.x"):
                                with T.block("p1_shared"):
                                    v0 = T.axis.spatial(T.int64(128), (ax0_ax1_ax2_ax3_fused_0 * T.int64(56) + ax0_ax1_ax2_ax3_fused_1) // T.int64(16))
                                    v1 = T.axis.spatial(T.int64(1568), rc_0 * T.int64(16) + (ax0_ax1_ax2_ax3_fused_0 * T.int64(56) + ax0_ax1_ax2_ax3_fused_1) % T.int64(16))
                                    v2 = T.axis.spatial(T.int64(1), T.int64(0))
                                    v3 = T.axis.spatial(T.int64(1), T.int64(0))
                                    T.where(ax0_ax1_ax2_ax3_fused_0 * T.int64(56) + ax0_ax1_ax2_ax3_fused_1 < T.int64(2048))
                                    T.reads(p1[v0, v1, v2, v3])
                                    T.writes(p1_shared[v0, v1, v2, v3])
                                    p1_shared[v0, v1, v2, v3] = p1[v0, v1, v2, v3]
                        for rc_1, ry_1, rx_1, nn_3, ff_3, yy_3, xx_3, rc_2, ry_2, rx_2, nn_4, ff_4, yy_4, xx_4 in T.grid(T.int64(16), T.int64(1), T.int64(1), T.int64(1), T.int64(8), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(1), T.int64(14)):
                            with T.block("conv2d_nchw_update"):
                                v_nn = T.axis.spatial(T.int64(1), nn_3 + nn_4)
                                v_ff = T.axis.spatial(T.int64(128), nn_1_ff_1_yy_1_xx_1_fused * T.int64(64) + nn_2_ff_2_yy_2_xx_2_fused // T.int64(14) * T.int64(16) + ff_3 * T.int64(2) + ff_4)
                                v_yy = T.axis.spatial(T.int64(14), nn_2_ff_2_yy_2_xx_2_fused % T.int64(14) + yy_3 + yy_4)
                                v_xx = T.axis.spatial(T.int64(14), xx_3 * T.int64(14) + xx_4)
                                v_rc = T.axis.reduce(T.int64(1568), rc_0 * T.int64(16) + rc_1 + rc_2)
                                v_ry = T.axis.reduce(T.int64(1), ry_0 + ry_1 + ry_2)
                                v_rx = T.axis.reduce(T.int64(1), rx_0 + rx_1 + rx_2)
                                T.reads(conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx], pad_temp_shared[v_nn, v_rc, v_yy + v_ry, v_xx + v_rx], p1_shared[v_ff, v_rc, v_ry, v_rx])
                                T.writes(conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx])
                                T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 32, "meta_schedule.tiling_structure": "SSSRRSRS"})
                                conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx] = conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx] + pad_temp_shared[v_nn, v_rc, v_yy + v_ry, v_xx + v_rx] * p1_shared[v_ff, v_rc, v_ry, v_rx]
                    for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(16), T.int64(1), T.int64(14)):
                        with T.block("conv2d_nchw_local"):
                            v0 = T.axis.spatial(T.int64(1), ax0)
                            v1 = T.axis.spatial(T.int64(128), nn_1_ff_1_yy_1_xx_1_fused * T.int64(64) + nn_2_ff_2_yy_2_xx_2_fused // T.int64(14) * T.int64(16) + ax1)
                            v2 = T.axis.spatial(T.int64(14), nn_2_ff_2_yy_2_xx_2_fused % T.int64(14) + ax2)
                            v3 = T.axis.spatial(T.int64(14), ax3)
                            T.reads(conv2d_nchw_local[v0, v1, v2, v3], p2[v0, v1, T.int64(0), T.int64(0)])
                            T.writes(T_relu[v0, v1, v2, v3])
                            T_relu[v0, v1, v2, v3] = T.max(conv2d_nchw_local[v0, v1, v2, v3] + p2[v0, v1, T.int64(0), T.int64(0)], T.float32(0))
b0 = sch.get_block(name="pad_temp", func_name="main")
b1 = sch.get_block(name="conv2d_nchw", func_name="main")
b2 = sch.get_block(name="T_add", func_name="main")
b3 = sch.get_block(name="T_relu", func_name="main")
b4 = sch.get_block(name="root", func_name="main")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSSRRSRS")
l5, l6, l7, l8, l9, l10, l11 = sch.get_loops(block=b1)
v12, v13, v14, v15, v16 = sch.sample_perfect_tile(loop=l5, n=5, max_innermost_factor=64, decision=[1, 1, 1, 1, 1])
l17, l18, l19, l20, l21 = sch.split(loop=l5, factors=[v12, v13, v14, v15, v16], preserve_unit_iters=True)
v22, v23, v24, v25, v26 = sch.sample_perfect_tile(loop=l6, n=5, max_innermost_factor=64, decision=[1, 2, 4, 8, 2])
l27, l28, l29, l30, l31 = sch.split(loop=l6, factors=[v22, v23, v24, v25, v26], preserve_unit_iters=True)
v32, v33, v34, v35, v36 = sch.sample_perfect_tile(loop=l7, n=5, max_innermost_factor=64, decision=[1, 1, 14, 1, 1])
l37, l38, l39, l40, l41 = sch.split(loop=l7, factors=[v32, v33, v34, v35, v36], preserve_unit_iters=True)
v42, v43, v44, v45, v46 = sch.sample_perfect_tile(loop=l8, n=5, max_innermost_factor=64, decision=[1, 1, 1, 1, 14])
l47, l48, l49, l50, l51 = sch.split(loop=l8, factors=[v42, v43, v44, v45, v46], preserve_unit_iters=True)
v52, v53, v54 = sch.sample_perfect_tile(loop=l9, n=3, max_innermost_factor=64, decision=[98, 16, 1])
l55, l56, l57 = sch.split(loop=l9, factors=[v52, v53, v54], preserve_unit_iters=True)
v58, v59, v60 = sch.sample_perfect_tile(loop=l10, n=3, max_innermost_factor=64, decision=[1, 1, 1])
l61, l62, l63 = sch.split(loop=l10, factors=[v58, v59, v60], preserve_unit_iters=True)
v64, v65, v66 = sch.sample_perfect_tile(loop=l11, n=3, max_innermost_factor=64, decision=[1, 1, 1])
l67, l68, l69 = sch.split(loop=l11, factors=[v64, v65, v66], preserve_unit_iters=True)
sch.reorder(l17, l27, l37, l47, l18, l28, l38, l48, l19, l29, l39, l49, l55, l61, l67, l56, l62, l68, l20, l30, l40, l50, l57, l63, l69, l21, l31, l41, l51)
l70 = sch.fuse(l17, l27, l37, l47, preserve_unit_iters=True)
sch.bind(loop=l70, thread_axis="blockIdx.x")
l71 = sch.fuse(l18, l28, l38, l48, preserve_unit_iters=True)
sch.bind(loop=l71, thread_axis="vthread.x")
l72 = sch.fuse(l19, l29, l39, l49, preserve_unit_iters=True)
sch.bind(loop=l72, thread_axis="threadIdx.x")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_low_inclusive", ann_val=32)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_high_inclusive", ann_val=1024)
b73 = sch.cache_write(block=b1, write_buffer_index=0, storage_scope="local")
sch.reverse_compute_at(block=b73, loop=l72, preserve_unit_loops=True, index=-1)
b74 = sch.cache_read(block=b1, read_buffer_index=0, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b74, loop=l67, preserve_unit_loops=True, index=-1)
l75, l76, l77, l78, l79, l80, l81, l82, l83, l84 = sch.get_loops(block=b74)
l85 = sch.fuse(l81, l82, l83, l84, preserve_unit_iters=True)
v86 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=0)
sch.annotate(block_or_loop=b74, ann_key="meta_schedule.cooperative_fetch", ann_val=v86)
b87 = sch.cache_read(block=b1, read_buffer_index=1, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b87, loop=l67, preserve_unit_loops=True, index=-1)
l88, l89, l90, l91, l92, l93, l94, l95, l96, l97 = sch.get_loops(block=b87)
l98 = sch.fuse(l94, l95, l96, l97, preserve_unit_iters=True)
v99 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=2)
sch.annotate(block_or_loop=b87, ann_key="meta_schedule.cooperative_fetch", ann_val=v99)
sch.reverse_compute_inline(block=b3)
sch.reverse_compute_inline(block=b2)
sch.compute_inline(block=b0)
v100 = sch.sample_categorical(candidates=[0, 16, 64, 512, 1024], probs=[0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001], decision=3)
sch.annotate(block_or_loop=b4, ann_key="meta_schedule.unroll_explicit", ann_val=v100)
sch.enter_postproc()
sch.unannotate(block_or_loop=b74, ann_key="meta_schedule.cooperative_fetch")
l101, l102, l103, l104, l105, l106, l107 = sch.get_loops(block=b74)
l108, l109 = sch.split(loop=l107, factors=[None, 56], preserve_unit_iters=True)
sch.bind(loop=l109, thread_axis="threadIdx.x")
sch.unannotate(block_or_loop=b87, ann_key="meta_schedule.cooperative_fetch")
l110, l111, l112, l113, l114, l115, l116 = sch.get_loops(block=b87)
l117, l118 = sch.split(loop=l116, factors=[None, 56], preserve_unit_iters=True)
sch.bind(loop=l118, thread_axis="threadIdx.x")
b119 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b119, ann_key="meta_schedule.unroll_explicit")
b120, b121, b122, b123 = sch.get_child_blocks(b119)
l124, l125, l126, l127, l128, l129, l130, l131 = sch.get_loops(block=b120)
l132, l133, l134, l135, l136, l137, l138, l139 = sch.get_loops(block=b121)
l140, l141, l142, l143, l144, l145, l146, l147, l148, l149, l150, l151, l152, l153, l154, l155, l156, l157, l158, l159 = sch.get_loops(block=b122)
sch.annotate(block_or_loop=l140, ann_key="pragma_auto_unroll_max_step", ann_val=512)
sch.annotate(block_or_loop=l140, ann_key="pragma_unroll_explicit", ann_val=1)
l160, l161, l162, l163, l164, l165, l166 = sch.get_loops(block=b123)
b167 = sch.get_block(name="conv2d_nchw", func_name="main")
l168, l169, l170, l171, l172, l173, l174, l175, l176, l177, l178, l179, l180, l181, l182, l183, l184, l185, l186, l187 = sch.get_loops(block=b167)
b188 = sch.decompose_reduction(block=b167, loop=l171)
2024-05-01 18:33:52 [INFO] [task_scheduler.cc:131] [Task #78: fused_nn_conv2d_add_nn_relu_38] Trial #63: GFLOPs: 142.3751. Time: 552.9487 us. Best GFLOPs: 853.1574
2024-05-01 18:33:52 [INFO] [task_scheduler.cc:131] [Task #78: fused_nn_conv2d_add_nn_relu_38] Trial #64: GFLOPs: 377.9225. Time: 208.3129 us. Best GFLOPs: 853.1574
2024-05-01 19:12:55 [INFO] [evolutionary_search.cc:713] Generating candidates......
2024-05-01 19:12:57 [INFO] [evolutionary_search.cc:715] Picked top 102 candidate(s) from database
2024-05-01 19:12:58 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x12c16dd8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0xe0a86e8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x11203648)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x10b2b428)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0xb346d08)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x1057b158)]: 393 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x14ca5048)]: 0 failure(s)
2024-05-01 19:13:00 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x12c16dd8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0xe0a86e8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x11203648)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x10b2b428)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0xb346d08)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x1057b158)]: 792 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x14ca5048)]: 0 failure(s)
2024-05-01 19:13:02 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x12c16dd8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0xe0a86e8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x11203648)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x10b2b428)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0xb346d08)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x1057b158)]: 1179 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x14ca5048)]: 0 failure(s)
2024-05-01 19:13:02 [INFO] [evolutionary_search.cc:723] Sampled 51 candidate(s)
2024-05-01 19:13:05 [INFO] [evolutionary_search.cc:621] Evolve iter #0 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x12c16dd8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0xe0a86e8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x11203648)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x10b2b428)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0xb346d08)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x1057b158)]: 94 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x14ca5048)]: 0 failure(s)
2024-05-01 19:13:08 [INFO] [evolutionary_search.cc:621] Evolve iter #1 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x12c16dd8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0xe0a86e8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x11203648)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x10b2b428)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0xb346d08)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x1057b158)]: 87 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x14ca5048)]: 0 failure(s)
2024-05-01 19:13:11 [INFO] [evolutionary_search.cc:621] Evolve iter #2 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x12c16dd8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0xe0a86e8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x11203648)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x10b2b428)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0xb346d08)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x1057b158)]: 110 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x14ca5048)]: 0 failure(s)
2024-05-01 19:13:14 [INFO] [evolutionary_search.cc:621] Evolve iter #3 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x12c16dd8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0xe0a86e8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x11203648)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x10b2b428)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0xb346d08)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x1057b158)]: 138 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x14ca5048)]: 0 failure(s)
2024-05-01 19:13:15 [INFO] [evolutionary_search.cc:649] Scores of the best 64 candidates:
[1 : 16]:	1.5106  1.0157  0.9990  0.9975  0.9893  0.9891  0.9872  0.9872  0.9870  0.9862  0.9844  0.9726  0.9708  0.9708  0.9652  0.9651
[17 : 32]:	0.9651  0.9649  0.9639  0.9534  0.9500  0.9488  0.9488  0.9484  0.9461  0.9431  0.9387  0.9365  0.9280  0.9268  0.9267  0.9265
[33 : 48]:	0.9254  0.9235  0.9225  0.9224  0.9200  0.9180  0.9158  0.9156  0.9156  0.9141  0.9135  0.9127  0.9118  0.9117  0.9113  0.9068
[49 : 64]:	0.9057  0.9042  0.9038  0.9035  0.9008  0.8994  0.8994  0.8993  0.8984  0.8968  0.8957  0.8947  0.8947  0.8937  0.8934  0.8929
2024-05-01 19:13:15 [INFO] [evolutionary_search.cc:727] Got 64 candidate(s) with evolutionary search
2024-05-01 19:13:15 [INFO] [evolutionary_search.cc:730] Sending 64 candidates(s) for measurement
2024-05-01 19:14:34 [INFO] [task_scheduler.cc:131] [Task #78: fused_nn_conv2d_add_nn_relu_38] Trial #65: GFLOPs: 1434.4745. Time: 54.8815 us. Best GFLOPs: 1434.4745
2024-05-01 19:14:34 [INFO] [task_scheduler.cc:131] [Task #78: fused_nn_conv2d_add_nn_relu_38] Trial #66: GFLOPs: 2066.9164. Time: 38.0887 us. Best GFLOPs: 2066.9164
2024-05-01 19:14:34 [INFO] [task_scheduler.cc:131] [Task #78: fused_nn_conv2d_add_nn_relu_38] Trial #67: GFLOPs: 1782.8538. Time: 44.1574 us. Best GFLOPs: 2066.9164
2024-05-01 19:14:34 [INFO] [task_scheduler.cc:131] [Task #78: fused_nn_conv2d_add_nn_relu_38] Trial #68: GFLOPs: 2193.8263. Time: 35.8853 us. Best GFLOPs: 2193.8263
2024-05-01 19:14:34 [INFO] [task_scheduler.cc:131] [Task #78: fused_nn_conv2d_add_nn_relu_38] Trial #69: GFLOPs: 1635.5317. Time: 48.1349 us. Best GFLOPs: 2193.8263
2024-05-01 19:14:34 [INFO] [task_scheduler.cc:131] [Task #78: fused_nn_conv2d_add_nn_relu_38] Trial #70: GFLOPs: 2607.0031. Time: 30.1979 us. Best GFLOPs: 2607.0031
2024-05-01 19:14:34 [INFO] [task_scheduler.cc:131] [Task #78: fused_nn_conv2d_add_nn_relu_38] Trial #71: GFLOPs: 2606.4735. Time: 30.2041 us. Best GFLOPs: 2607.0031
2024-05-01 19:14:34 [INFO] [task_scheduler.cc:131] [Task #78: fused_nn_conv2d_add_nn_relu_38] Trial #72: GFLOPs: 2606.8453. Time: 30.1998 us. Best GFLOPs: 2607.0031
2024-05-01 19:14:34 [INFO] [task_scheduler.cc:131] [Task #78: fused_nn_conv2d_add_nn_relu_38] Trial #73: GFLOPs: 1517.7925. Time: 51.8688 us. Best GFLOPs: 2607.0031
2024-05-01 19:14:34 [INFO] [task_scheduler.cc:131] [Task #78: fused_nn_conv2d_add_nn_relu_38] Trial #74: GFLOPs: 1798.9715. Time: 43.7618 us. Best GFLOPs: 2607.0031
2024-05-01 19:14:34 [INFO] [task_scheduler.cc:131] [Task #78: fused_nn_conv2d_add_nn_relu_38] Trial #75: GFLOPs: 1798.9985. Time: 43.7611 us. Best GFLOPs: 2607.0031
2024-05-01 19:14:34 [INFO] [task_scheduler.cc:131] [Task #78: fused_nn_conv2d_add_nn_relu_38] Trial #76: GFLOPs: 2651.4200. Time: 29.6921 us. Best GFLOPs: 2651.4200
2024-05-01 19:14:34 [INFO] [task_scheduler.cc:131] [Task #78: fused_nn_conv2d_add_nn_relu_38] Trial #77: GFLOPs: 2651.1824. Time: 29.6947 us. Best GFLOPs: 2651.4200
2024-05-01 19:14:34 [INFO] [task_scheduler.cc:131] [Task #78: fused_nn_conv2d_add_nn_relu_38] Trial #78: GFLOPs: 2657.1197. Time: 29.6284 us. Best GFLOPs: 2657.1197
2024-05-01 19:14:34 [INFO] [task_scheduler.cc:131] [Task #78: fused_nn_conv2d_add_nn_relu_38] Trial #79: GFLOPs: 2611.8830. Time: 30.1415 us. Best GFLOPs: 2657.1197
2024-05-01 19:14:34 [INFO] [task_scheduler.cc:131] [Task #78: fused_nn_conv2d_add_nn_relu_38] Trial #80: GFLOPs: 2564.3934. Time: 30.6997 us. Best GFLOPs: 2657.1197
2024-05-01 19:14:34 [INFO] [task_scheduler.cc:131] [Task #78: fused_nn_conv2d_add_nn_relu_38] Trial #81: GFLOPs: 2564.4969. Time: 30.6985 us. Best GFLOPs: 2657.1197
2024-05-01 19:14:34 [INFO] [task_scheduler.cc:131] [Task #78: fused_nn_conv2d_add_nn_relu_38] Trial #82: GFLOPs: 1724.2394. Time: 45.6585 us. Best GFLOPs: 2657.1197
2024-05-01 19:14:34 [INFO] [task_scheduler.cc:131] [Task #78: fused_nn_conv2d_add_nn_relu_38] Trial #83: GFLOPs: 2677.5161. Time: 29.4027 us. Best GFLOPs: 2677.5161
2024-05-01 19:14:34 [INFO] [task_scheduler.cc:131] [Task #78: fused_nn_conv2d_add_nn_relu_38] Trial #84: GFLOPs: 2443.4848. Time: 32.2188 us. Best GFLOPs: 2677.5161
2024-05-01 19:14:34 [INFO] [task_scheduler.cc:131] [Task #78: fused_nn_conv2d_add_nn_relu_38] Trial #85: GFLOPs: 1537.1407. Time: 51.2160 us. Best GFLOPs: 2677.5161
2024-05-01 19:14:34 [INFO] [task_scheduler.cc:131] [Task #78: fused_nn_conv2d_add_nn_relu_38] Trial #86: GFLOPs: 2797.9063. Time: 28.1375 us. Best GFLOPs: 2797.9063
2024-05-01 19:14:34 [INFO] [task_scheduler.cc:131] [Task #78: fused_nn_conv2d_add_nn_relu_38] Trial #87: GFLOPs: 2792.5960. Time: 28.1910 us. Best GFLOPs: 2797.9063
2024-05-01 19:14:34 [INFO] [task_scheduler.cc:131] [Task #78: fused_nn_conv2d_add_nn_relu_38] Trial #88: GFLOPs: 2791.7696. Time: 28.1994 us. Best GFLOPs: 2797.9063
2024-05-01 19:14:34 [INFO] [task_scheduler.cc:131] [Task #78: fused_nn_conv2d_add_nn_relu_38] Trial #89: GFLOPs: 2044.2617. Time: 38.5108 us. Best GFLOPs: 2797.9063
2024-05-01 19:14:34 [INFO] [task_scheduler.cc:131] [Task #78: fused_nn_conv2d_add_nn_relu_38] Trial #90: GFLOPs: 2630.8420. Time: 29.9243 us. Best GFLOPs: 2797.9063
2024-05-01 19:14:34 [INFO] [task_scheduler.cc:131] [Task #78: fused_nn_conv2d_add_nn_relu_38] Trial #91: GFLOPs: 2570.4649. Time: 30.6272 us. Best GFLOPs: 2797.9063
2024-05-01 19:14:34 [INFO] [task_scheduler.cc:131] [Task #78: fused_nn_conv2d_add_nn_relu_38] Trial #92: GFLOPs: 2505.8591. Time: 31.4168 us. Best GFLOPs: 2797.9063
2024-05-01 19:14:34 [INFO] [task_scheduler.cc:131] [Task #78: fused_nn_conv2d_add_nn_relu_38] Trial #93: GFLOPs: 2159.7293. Time: 36.4519 us. Best GFLOPs: 2797.9063
2024-05-01 19:14:34 [INFO] [task_scheduler.cc:131] [Task #78: fused_nn_conv2d_add_nn_relu_38] Trial #94: GFLOPs: 1729.3016. Time: 45.5248 us. Best GFLOPs: 2797.9063
2024-05-01 19:14:34 [INFO] [task_scheduler.cc:131] [Task #78: fused_nn_conv2d_add_nn_relu_38] Trial #95: GFLOPs: 1328.1141. Time: 59.2766 us. Best GFLOPs: 2797.9063
2024-05-01 19:14:34 [INFO] [task_scheduler.cc:131] [Task #78: fused_nn_conv2d_add_nn_relu_38] Trial #96: GFLOPs: 1729.2411. Time: 45.5264 us. Best GFLOPs: 2797.9063
2024-05-01 19:14:34 [INFO] [task_scheduler.cc:131] [Task #78: fused_nn_conv2d_add_nn_relu_38] Trial #97: GFLOPs: 855.3479. Time: 92.0399 us. Best GFLOPs: 2797.9063
2024-05-01 19:14:34 [INFO] [task_scheduler.cc:131] [Task #78: fused_nn_conv2d_add_nn_relu_38] Trial #98: GFLOPs: 2465.0396. Time: 31.9371 us. Best GFLOPs: 2797.9063
2024-05-01 19:14:34 [INFO] [task_scheduler.cc:131] [Task #78: fused_nn_conv2d_add_nn_relu_38] Trial #99: GFLOPs: 1157.4613. Time: 68.0162 us. Best GFLOPs: 2797.9063
2024-05-01 19:14:34 [INFO] [task_scheduler.cc:131] [Task #78: fused_nn_conv2d_add_nn_relu_38] Trial #100: GFLOPs: 1335.8858. Time: 58.9318 us. Best GFLOPs: 2797.9063
2024-05-01 19:14:34 [INFO] [task_scheduler.cc:131] [Task #78: fused_nn_conv2d_add_nn_relu_38] Trial #101: GFLOPs: 1515.2502. Time: 51.9559 us. Best GFLOPs: 2797.9063
2024-05-01 19:14:34 [INFO] [task_scheduler.cc:131] [Task #78: fused_nn_conv2d_add_nn_relu_38] Trial #102: GFLOPs: 1976.4378. Time: 39.8323 us. Best GFLOPs: 2797.9063
2024-05-01 19:14:34 [INFO] [task_scheduler.cc:131] [Task #78: fused_nn_conv2d_add_nn_relu_38] Trial #103: GFLOPs: 1641.1923. Time: 47.9689 us. Best GFLOPs: 2797.9063
2024-05-01 19:14:34 [INFO] [task_scheduler.cc:131] [Task #78: fused_nn_conv2d_add_nn_relu_38] Trial #104: GFLOPs: 1813.9564. Time: 43.4002 us. Best GFLOPs: 2797.9063
2024-05-01 19:14:34 [INFO] [task_scheduler.cc:131] [Task #78: fused_nn_conv2d_add_nn_relu_38] Trial #105: GFLOPs: 831.1593. Time: 94.7185 us. Best GFLOPs: 2797.9063
2024-05-01 19:14:34 [INFO] [task_scheduler.cc:131] [Task #78: fused_nn_conv2d_add_nn_relu_38] Trial #106: GFLOPs: 1302.8833. Time: 60.4246 us. Best GFLOPs: 2797.9063
2024-05-01 19:14:34 [INFO] [task_scheduler.cc:131] [Task #78: fused_nn_conv2d_add_nn_relu_38] Trial #107: GFLOPs: 1388.5747. Time: 56.6956 us. Best GFLOPs: 2797.9063
2024-05-01 19:14:34 [INFO] [task_scheduler.cc:131] [Task #78: fused_nn_conv2d_add_nn_relu_38] Trial #108: GFLOPs: 2048.8996. Time: 38.4236 us. Best GFLOPs: 2797.9063
2024-05-01 19:14:34 [INFO] [task_scheduler.cc:131] [Task #78: fused_nn_conv2d_add_nn_relu_38] Trial #109: GFLOPs: 1512.3283. Time: 52.0563 us. Best GFLOPs: 2797.9063
2024-05-01 19:14:34 [INFO] [task_scheduler.cc:131] [Task #78: fused_nn_conv2d_add_nn_relu_38] Trial #110: GFLOPs: 2634.5184. Time: 29.8826 us. Best GFLOPs: 2797.9063
2024-05-01 19:14:34 [INFO] [task_scheduler.cc:131] [Task #78: fused_nn_conv2d_add_nn_relu_38] Trial #111: GFLOPs: 866.5058. Time: 90.8547 us. Best GFLOPs: 2797.9063
2024-05-01 19:14:34 [INFO] [task_scheduler.cc:131] [Task #78: fused_nn_conv2d_add_nn_relu_38] Trial #112: GFLOPs: 1553.1308. Time: 50.6887 us. Best GFLOPs: 2797.9063
2024-05-01 19:14:34 [INFO] [task_scheduler.cc:131] [Task #78: fused_nn_conv2d_add_nn_relu_38] Trial #113: GFLOPs: 1747.5770. Time: 45.0487 us. Best GFLOPs: 2797.9063
2024-05-01 19:14:34 [INFO] [task_scheduler.cc:131] [Task #78: fused_nn_conv2d_add_nn_relu_38] Trial #114: GFLOPs: 2655.1098. Time: 29.6508 us. Best GFLOPs: 2797.9063
2024-05-01 19:14:34 [INFO] [task_scheduler.cc:131] [Task #78: fused_nn_conv2d_add_nn_relu_38] Trial #115: GFLOPs: 1338.2059. Time: 58.8296 us. Best GFLOPs: 2797.9063
2024-05-01 19:14:34 [INFO] [task_scheduler.cc:131] [Task #78: fused_nn_conv2d_add_nn_relu_38] Trial #116: GFLOPs: 2129.8066. Time: 36.9640 us. Best GFLOPs: 2797.9063
2024-05-01 19:14:34 [INFO] [task_scheduler.cc:131] [Task #78: fused_nn_conv2d_add_nn_relu_38] Trial #117: GFLOPs: 1399.1299. Time: 56.2679 us. Best GFLOPs: 2797.9063
2024-05-01 19:14:34 [INFO] [task_scheduler.cc:131] [Task #78: fused_nn_conv2d_add_nn_relu_38] Trial #118: GFLOPs: 2613.3115. Time: 30.1251 us. Best GFLOPs: 2797.9063
2024-05-01 19:14:34 [INFO] [task_scheduler.cc:131] [Task #78: fused_nn_conv2d_add_nn_relu_38] Trial #119: GFLOPs: 2610.2998. Time: 30.1598 us. Best GFLOPs: 2797.9063
2024-05-01 19:14:34 [INFO] [task_scheduler.cc:131] [Task #78: fused_nn_conv2d_add_nn_relu_38] Trial #120: GFLOPs: 863.3015. Time: 91.1920 us. Best GFLOPs: 2797.9063
2024-05-01 19:14:34 [INFO] [task_scheduler.cc:131] [Task #78: fused_nn_conv2d_add_nn_relu_38] Trial #121: GFLOPs: 392.7422. Time: 200.4525 us. Best GFLOPs: 2797.9063
2024-05-01 19:14:34 [INFO] [task_scheduler.cc:131] [Task #78: fused_nn_conv2d_add_nn_relu_38] Trial #122: GFLOPs: 836.5456. Time: 94.1086 us. Best GFLOPs: 2797.9063
2024-05-01 19:14:34 [INFO] [task_scheduler.cc:131] [Task #78: fused_nn_conv2d_add_nn_relu_38] Trial #123: GFLOPs: 853.7510. Time: 92.2121 us. Best GFLOPs: 2797.9063
2024-05-01 19:14:34 [INFO] [task_scheduler.cc:131] [Task #78: fused_nn_conv2d_add_nn_relu_38] Trial #124: GFLOPs: 2640.1457. Time: 29.8189 us. Best GFLOPs: 2797.9063
2024-05-01 19:14:34 [INFO] [task_scheduler.cc:131] [Task #78: fused_nn_conv2d_add_nn_relu_38] Trial #125: GFLOPs: 1101.8214. Time: 71.4509 us. Best GFLOPs: 2797.9063
2024-05-01 19:14:34 [INFO] [task_scheduler.cc:131] [Task #78: fused_nn_conv2d_add_nn_relu_38] Trial #126: GFLOPs: 830.8664. Time: 94.7519 us. Best GFLOPs: 2797.9063
2024-05-01 19:14:34 [INFO] [task_scheduler.cc:131] [Task #78: fused_nn_conv2d_add_nn_relu_38] Trial #127: GFLOPs: 208.9606. Time: 376.7511 us. Best GFLOPs: 2797.9063
2024-05-01 19:14:34 [INFO] [task_scheduler.cc:131] [Task #78: fused_nn_conv2d_add_nn_relu_38] Trial #128: GFLOPs: 519.0486. Time: 151.6739 us. Best GFLOPs: 2797.9063
