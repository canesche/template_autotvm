2024-04-29 16:32:38 [INFO] [task_scheduler.cc:160] Initializing Task #215: "fused_nn_global_avg_pool2d"
2024-04-29 16:32:38 [INFO] [task_scheduler.cc:35] 
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(1920), T.int64(7), T.int64(7)), "float32"), adaptive_pool_avg: T.Buffer((T.int64(1), T.int64(1920), T.int64(1), T.int64(1)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        adaptive_pool_sum = T.alloc_buffer((T.int64(1), T.int64(1920), T.int64(1), T.int64(1)))
        for ax0, ax1, ax2, ax3, rv0, rv1 in T.grid(T.int64(1), T.int64(1920), T.int64(1), T.int64(1), T.int64(7), T.int64(7)):
            with T.block("adaptive_pool_sum"):
                v_ax0, v_ax1, v_ax2, v_ax3, v_rv0, v_rv1 = T.axis.remap("SSSSRR", [ax0, ax1, ax2, ax3, rv0, rv1])
                T.reads(p0[v_ax0, v_ax1, v_ax2 * T.int64(7) + v_rv0, v_ax3 * T.int64(7) + v_rv1])
                T.writes(adaptive_pool_sum[v_ax0, v_ax1, v_ax2, v_ax3])
                with T.init():
                    adaptive_pool_sum[v_ax0, v_ax1, v_ax2, v_ax3] = T.float32(0)
                adaptive_pool_sum[v_ax0, v_ax1, v_ax2, v_ax3] = adaptive_pool_sum[v_ax0, v_ax1, v_ax2, v_ax3] + p0[v_ax0, v_ax1, v_ax2 * T.int64(7) + v_rv0, v_ax3 * T.int64(7) + v_rv1]
        for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(1920), T.int64(1), T.int64(1)):
            with T.block("adaptive_pool_avg"):
                v_ax0, v_ax1, v_ax2, v_ax3 = T.axis.remap("SSSS", [ax0, ax1, ax2, ax3])
                T.reads(adaptive_pool_sum[v_ax0, v_ax1, v_ax2, v_ax3])
                T.writes(adaptive_pool_avg[v_ax0, v_ax1, v_ax2, v_ax3])
                T.block_attr({"schedule_rule": "meta_schedule.adaptive_pool_avg"})
                adaptive_pool_avg[v_ax0, v_ax1, v_ax2, v_ax3] = adaptive_pool_sum[v_ax0, v_ax1, v_ax2, v_ax3] * T.float32(0.020408163265306121)
2024-04-29 16:32:38 [INFO] [task_scheduler.cc:164] Total 2 design space(s) generated
2024-04-29 16:32:38 [INFO] [task_scheduler.cc:170] Design space #0:
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(1920), T.int64(7), T.int64(7)), "float32"), adaptive_pool_avg: T.Buffer((T.int64(1), T.int64(1920), T.int64(1), T.int64(1)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        with T.block("root"):
            T.reads()
            T.writes()
            T.block_attr({"meta_schedule.unroll_explicit": 16})
            adaptive_pool_sum = T.alloc_buffer((T.int64(1), T.int64(1920), T.int64(1), T.int64(1)))
            for ax0_ax1_ax2_ax3_fused_0 in T.thread_binding(T.int64(8), thread="blockIdx.x"):
                for ax0_ax1_ax2_ax3_fused_1 in T.thread_binding(T.int64(256), thread="threadIdx.x"):
                    for rv0, rv1 in T.grid(T.int64(7), T.int64(7)):
                        with T.block("adaptive_pool_sum"):
                            v_ax0 = T.axis.spatial(T.int64(1), T.int64(0))
                            v_ax1 = T.axis.spatial(T.int64(1920), ax0_ax1_ax2_ax3_fused_0 * T.int64(256) + ax0_ax1_ax2_ax3_fused_1)
                            v_ax2 = T.axis.spatial(T.int64(1), T.int64(0))
                            v_ax3 = T.axis.spatial(T.int64(1), T.int64(0))
                            v_rv0, v_rv1 = T.axis.remap("RR", [rv0, rv1])
                            T.where(ax0_ax1_ax2_ax3_fused_0 * T.int64(256) + ax0_ax1_ax2_ax3_fused_1 < T.int64(1920))
                            T.reads(p0[v_ax0, v_ax1, v_ax2 * T.int64(7) + v_rv0, v_ax3 * T.int64(7) + v_rv1])
                            T.writes(adaptive_pool_sum[v_ax0, v_ax1, v_ax2, v_ax3])
                            with T.init():
                                adaptive_pool_sum[v_ax0, v_ax1, v_ax2, v_ax3] = T.float32(0)
                            adaptive_pool_sum[v_ax0, v_ax1, v_ax2, v_ax3] = adaptive_pool_sum[v_ax0, v_ax1, v_ax2, v_ax3] + p0[v_ax0, v_ax1, v_ax2 * T.int64(7) + v_rv0, v_ax3 * T.int64(7) + v_rv1]
            for ax0_ax1_ax2_ax3_fused_0 in T.thread_binding(T.int64(60), thread="blockIdx.x"):
                for ax0_ax1_ax2_ax3_fused_1 in T.thread_binding(T.int64(32), thread="threadIdx.x"):
                    with T.block("adaptive_pool_avg"):
                        v_ax0 = T.axis.spatial(T.int64(1), T.int64(0))
                        v_ax1 = T.axis.spatial(T.int64(1920), ax0_ax1_ax2_ax3_fused_0 * T.int64(32) + ax0_ax1_ax2_ax3_fused_1)
                        v_ax2 = T.axis.spatial(T.int64(1), T.int64(0))
                        v_ax3 = T.axis.spatial(T.int64(1), T.int64(0))
                        T.reads(adaptive_pool_sum[v_ax0, v_ax1, v_ax2, v_ax3])
                        T.writes(adaptive_pool_avg[v_ax0, v_ax1, v_ax2, v_ax3])
                        adaptive_pool_avg[v_ax0, v_ax1, v_ax2, v_ax3] = adaptive_pool_sum[v_ax0, v_ax1, v_ax2, v_ax3] * T.float32(0.020408163265306121)
b0 = sch.get_block(name="adaptive_pool_sum", func_name="main")
b1 = sch.get_block(name="adaptive_pool_avg", func_name="main")
b2 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b1, ann_key="schedule_rule")
v3 = sch.sample_categorical(candidates=[0, 16, 64, 512, 1024], probs=[0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001], decision=1)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.unroll_explicit", ann_val=v3)
l4, l5, l6, l7 = sch.get_loops(block=b1)
l8 = sch.fuse(l4, l5, l6, l7, preserve_unit_iters=True)
v9 = sch.sample_categorical(candidates=[32, 64, 128, 256, 512, 1024], probs=[0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666], decision=0)
l10, l11 = sch.split(loop=l8, factors=[None, v9], preserve_unit_iters=True)
sch.bind(loop=l10, thread_axis="blockIdx.x")
sch.bind(loop=l11, thread_axis="threadIdx.x")
l12, l13, l14, l15, l16, l17 = sch.get_loops(block=b0)
l18 = sch.fuse(l12, l13, l14, l15, preserve_unit_iters=True)
v19 = sch.sample_categorical(candidates=[32, 64, 128, 256, 512, 1024], probs=[0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666], decision=3)
l20, l21 = sch.split(loop=l18, factors=[None, v19], preserve_unit_iters=True)
sch.bind(loop=l20, thread_axis="blockIdx.x")
sch.bind(loop=l21, thread_axis="threadIdx.x")
2024-04-29 16:32:38 [INFO] [task_scheduler.cc:170] Design space #1:
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(1920), T.int64(7), T.int64(7)), "float32"), adaptive_pool_avg: T.Buffer((T.int64(1), T.int64(1920), T.int64(1), T.int64(1)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        with T.block("root"):
            T.reads()
            T.writes()
            T.block_attr({"meta_schedule.unroll_explicit": 1024})
            adaptive_pool_sum_shared = T.alloc_buffer((T.int64(1), T.int64(1920), T.int64(1), T.int64(1)), scope="shared")
            for ax0_ax1_ax2_ax3_0_fused in T.thread_binding(T.int64(1920), thread="blockIdx.x"):
                for ax0, ax1, ax2, ax3, ax4_ax5_fused_0 in T.grid(T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(4)):
                    for ax4_ax5_fused_1 in T.thread_binding(T.int64(16), thread="threadIdx.x"):
                        with T.block("adaptive_pool_sum"):
                            v_ax0 = T.axis.spatial(T.int64(1), ax0)
                            v_ax1 = T.axis.spatial(T.int64(1920), ax0_ax1_ax2_ax3_0_fused + ax1)
                            v_ax2, v_ax3 = T.axis.remap("SS", [ax2, ax3])
                            v_rv0 = T.axis.reduce(T.int64(7), (ax4_ax5_fused_0 * T.int64(16) + ax4_ax5_fused_1) // T.int64(7))
                            v_rv1 = T.axis.reduce(T.int64(7), (ax4_ax5_fused_0 * T.int64(16) + ax4_ax5_fused_1) % T.int64(7))
                            T.where(ax4_ax5_fused_0 * T.int64(16) + ax4_ax5_fused_1 < T.int64(49))
                            T.reads(p0[v_ax0, v_ax1, v_ax2 * T.int64(7) + v_rv0, v_ax3 * T.int64(7) + v_rv1])
                            T.writes(adaptive_pool_sum_shared[v_ax0, v_ax1, v_ax2, v_ax3])
                            with T.init():
                                adaptive_pool_sum_shared[v_ax0, v_ax1, v_ax2, v_ax3] = T.float32(0)
                            adaptive_pool_sum_shared[v_ax0, v_ax1, v_ax2, v_ax3] = adaptive_pool_sum_shared[v_ax0, v_ax1, v_ax2, v_ax3] + p0[v_ax0, v_ax1, v_ax2 * T.int64(7) + v_rv0, v_ax3 * T.int64(7) + v_rv1]
                for ax3_1 in T.thread_binding(T.int64(16), thread="threadIdx.x"):
                    with T.block("adaptive_pool_avg"):
                        v_ax0 = T.axis.spatial(T.int64(1), T.int64(0))
                        v_ax1 = T.axis.spatial(T.int64(1920), ax0_ax1_ax2_ax3_0_fused)
                        v_ax2 = T.axis.spatial(T.int64(1), T.int64(0))
                        v_ax3 = T.axis.spatial(T.int64(1), ax3_1)
                        T.where(T.Mul(T.int64(0), T.int64(16)) + ax3_1 < T.int64(1))
                        T.reads(adaptive_pool_sum_shared[v_ax0, v_ax1, v_ax2, v_ax3])
                        T.writes(adaptive_pool_avg[v_ax0, v_ax1, v_ax2, v_ax3])
                        adaptive_pool_avg[v_ax0, v_ax1, v_ax2, v_ax3] = adaptive_pool_sum_shared[v_ax0, v_ax1, v_ax2, v_ax3] * T.float32(0.020408163265306121)
b0 = sch.get_block(name="adaptive_pool_sum", func_name="main")
b1 = sch.get_block(name="adaptive_pool_avg", func_name="main")
b2 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b1, ann_key="schedule_rule")
b3, = sch.get_consumers(block=b0)
l4, l5, l6, l7 = sch.get_loops(block=b3)
v8 = sch.sample_categorical(candidates=[4, 8, 16, 32, 64, 128, 256, 512], probs=[0.125, 0.125, 0.125, 0.125, 0.125, 0.125, 0.125, 0.125], decision=2)
l9, l10 = sch.split(loop=l7, factors=[None, v8], preserve_unit_iters=True)
sch.bind(loop=l10, thread_axis="threadIdx.x")
sch.compute_at(block=b0, loop=l9, preserve_unit_loops=True, index=-1)
sch.set_scope(block=b0, buffer_index=0, storage_scope="shared")
l11, l12, l13, l14, l15, l16, l17, l18, l19, l20 = sch.get_loops(block=b0)
l21 = sch.fuse(l19, l20, preserve_unit_iters=True)
l22, l23 = sch.split(loop=l21, factors=[None, v8], preserve_unit_iters=True)
sch.bind(loop=l23, thread_axis="threadIdx.x")
v24 = sch.sample_categorical(candidates=[0, 16, 64, 512, 1024], probs=[0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001], decision=4)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.unroll_explicit", ann_val=v24)
l25, l26, l27, l28, l29 = sch.get_loops(block=b1)
l30 = sch.fuse(l25, l26, l27, l28, preserve_unit_iters=True)
sch.bind(loop=l30, thread_axis="blockIdx.x")
2024-04-29 20:14:16 [INFO] [evolutionary_search.cc:713] Generating candidates......
2024-04-29 20:14:16 [INFO] [evolutionary_search.cc:715] Picked top 0 candidate(s) from database
2024-04-29 20:14:17 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x99c9778)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x11d24b28)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x1419d4a8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0xdf56328)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x13a18818)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x12576d78)]: 0 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x1419d958)]: 0 failure(s)
2024-04-29 20:14:17 [INFO] [evolutionary_search.cc:723] Sampled 512 candidate(s)
2024-04-29 20:14:18 [INFO] [evolutionary_search.cc:621] Evolve iter #0 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x99c9778)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x11d24b28)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x1419d4a8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0xdf56328)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x13a18818)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x12576d78)]: 0 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x1419d958)]: 0 failure(s)
2024-04-29 20:14:18 [INFO] [evolutionary_search.cc:621] Evolve iter #1 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x99c9778)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x11d24b28)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x1419d4a8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0xdf56328)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x13a18818)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x12576d78)]: 0 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x1419d958)]: 0 failure(s)
2024-04-29 20:14:19 [INFO] [evolutionary_search.cc:621] Evolve iter #2 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x99c9778)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x11d24b28)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x1419d4a8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0xdf56328)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x13a18818)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x12576d78)]: 0 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x1419d958)]: 0 failure(s)
2024-04-29 20:14:19 [INFO] [evolutionary_search.cc:621] Evolve iter #3 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x99c9778)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x11d24b28)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x1419d4a8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0xdf56328)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x13a18818)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x12576d78)]: 0 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x1419d958)]: 0 failure(s)
2024-04-29 20:14:19 [INFO] [evolutionary_search.cc:649] Scores of the best 64 candidates:
[1 : 16]:	0.9987  0.9972  0.9967  0.9871  0.9866  0.9845  0.9813  0.9804  0.9804  0.9688  0.9686  0.9522  0.9455  0.9432  0.9414  0.9298
[17 : 32]:	0.9205  0.9142  0.9125  0.9115  0.8939  0.8896  0.8840  0.8749  0.8700  0.8692  0.8600  0.8566  0.8497  0.8464  0.8404  0.8370
[33 : 48]:	0.8339  0.8301  0.8295  0.8235  0.8224  0.8184  0.8153  0.8115  0.8005  0.7924  0.7896  0.7844  0.7831  0.7779  0.7712  0.7699
[49 : 64]:	0.7635  0.7632  0.7560  0.7455  0.7359  0.7345  0.7331  0.7199  0.7196  0.7110  0.7019  0.7003  0.6993  0.6932  0.6803  0.6651
2024-04-29 20:14:19 [INFO] [evolutionary_search.cc:727] Got 64 candidate(s) with evolutionary search
2024-04-29 20:14:19 [INFO] [evolutionary_search.cc:730] Sending 63 candidates(s) for measurement
2024-04-29 20:35:57 [INFO] [task_scheduler.cc:131] [Task #215: fused_nn_global_avg_pool2d] Trial #1: GFLOPs: 11.1921. Time: 8.5775 us. Best GFLOPs: 11.1921
2024-04-29 20:35:57 [INFO] [task_scheduler.cc:131] [Task #215: fused_nn_global_avg_pool2d] Trial #2: GFLOPs: 14.2347. Time: 6.7441 us. Best GFLOPs: 14.2347
2024-04-29 20:35:57 [INFO] [task_scheduler.cc:131] [Task #215: fused_nn_global_avg_pool2d] Trial #3: GFLOPs: 15.0501. Time: 6.3787 us. Best GFLOPs: 15.0501
2024-04-29 20:35:57 [INFO] [task_scheduler.cc:131] [Task #215: fused_nn_global_avg_pool2d] Trial #4: GFLOPs: 11.5401. Time: 8.3188 us. Best GFLOPs: 15.0501
2024-04-29 20:35:57 [INFO] [task_scheduler.cc:131] [Task #215: fused_nn_global_avg_pool2d] Trial #5: GFLOPs: 14.9660. Time: 6.4145 us. Best GFLOPs: 15.0501
2024-04-29 20:35:57 [INFO] [task_scheduler.cc:131] [Task #215: fused_nn_global_avg_pool2d] Trial #6: GFLOPs: 14.9809. Time: 6.4082 us. Best GFLOPs: 15.0501
2024-04-29 20:35:57 [INFO] [task_scheduler.cc:131] [Task #215: fused_nn_global_avg_pool2d] Trial #7: GFLOPs: 8.4064. Time: 11.4199 us. Best GFLOPs: 15.0501
2024-04-29 20:35:57 [INFO] [task_scheduler.cc:131] [Task #215: fused_nn_global_avg_pool2d] Trial #8: GFLOPs: 21.6347. Time: 4.4373 us. Best GFLOPs: 21.6347
2024-04-29 20:35:57 [INFO] [task_scheduler.cc:131] [Task #215: fused_nn_global_avg_pool2d] Trial #9: GFLOPs: 11.5180. Time: 8.3348 us. Best GFLOPs: 21.6347
2024-04-29 20:35:57 [INFO] [task_scheduler.cc:131] [Task #215: fused_nn_global_avg_pool2d] Trial #10: GFLOPs: 21.6262. Time: 4.4391 us. Best GFLOPs: 21.6347
2024-04-29 20:35:57 [INFO] [task_scheduler.cc:131] [Task #215: fused_nn_global_avg_pool2d] Trial #11: GFLOPs: 5.2589. Time: 18.2548 us. Best GFLOPs: 21.6347
2024-04-29 20:35:57 [INFO] [task_scheduler.cc:131] [Task #215: fused_nn_global_avg_pool2d] Trial #12: GFLOPs: 15.0492. Time: 6.3791 us. Best GFLOPs: 21.6347
2024-04-29 20:35:57 [INFO] [task_scheduler.cc:131] [Task #215: fused_nn_global_avg_pool2d] Trial #13: GFLOPs: 11.6252. Time: 8.2580 us. Best GFLOPs: 21.6347
2024-04-29 20:35:57 [INFO] [task_scheduler.cc:131] [Task #215: fused_nn_global_avg_pool2d] Trial #14: GFLOPs: 14.2502. Time: 6.7367 us. Best GFLOPs: 21.6347
2024-04-29 20:35:57 [INFO] [task_scheduler.cc:131] [Task #215: fused_nn_global_avg_pool2d] Trial #15: GFLOPs: 8.4991. Time: 11.2953 us. Best GFLOPs: 21.6347
2024-04-29 20:35:57 [INFO] [task_scheduler.cc:131] [Task #215: fused_nn_global_avg_pool2d] Trial #16: GFLOPs: 11.5169. Time: 8.3356 us. Best GFLOPs: 21.6347
2024-04-29 20:35:57 [INFO] [task_scheduler.cc:131] [Task #215: fused_nn_global_avg_pool2d] Trial #17: GFLOPs: 15.6956. Time: 6.1164 us. Best GFLOPs: 21.6347
2024-04-29 20:35:57 [INFO] [task_scheduler.cc:131] [Task #215: fused_nn_global_avg_pool2d] Trial #18: GFLOPs: 14.2414. Time: 6.7409 us. Best GFLOPs: 21.6347
2024-04-29 20:35:57 [INFO] [task_scheduler.cc:131] [Task #215: fused_nn_global_avg_pool2d] Trial #19: GFLOPs: 15.0283. Time: 6.3879 us. Best GFLOPs: 21.6347
2024-04-29 20:35:57 [INFO] [task_scheduler.cc:131] [Task #215: fused_nn_global_avg_pool2d] Trial #20: GFLOPs: 15.3410. Time: 6.2577 us. Best GFLOPs: 21.6347
2024-04-29 20:35:57 [INFO] [task_scheduler.cc:131] [Task #215: fused_nn_global_avg_pool2d] Trial #21: GFLOPs: 15.3760. Time: 6.2435 us. Best GFLOPs: 21.6347
2024-04-29 20:35:57 [INFO] [task_scheduler.cc:131] [Task #215: fused_nn_global_avg_pool2d] Trial #22: GFLOPs: 5.4103. Time: 17.7440 us. Best GFLOPs: 21.6347
2024-04-29 20:35:57 [INFO] [task_scheduler.cc:131] [Task #215: fused_nn_global_avg_pool2d] Trial #23: GFLOPs: 22.6673. Time: 4.2352 us. Best GFLOPs: 22.6673
2024-04-29 20:35:57 [INFO] [task_scheduler.cc:131] [Task #215: fused_nn_global_avg_pool2d] Trial #24: GFLOPs: 23.0637. Time: 4.1624 us. Best GFLOPs: 23.0637
2024-04-29 20:35:57 [INFO] [task_scheduler.cc:131] [Task #215: fused_nn_global_avg_pool2d] Trial #25: GFLOPs: 15.3502. Time: 6.2540 us. Best GFLOPs: 23.0637
2024-04-29 20:35:57 [INFO] [task_scheduler.cc:131] [Task #215: fused_nn_global_avg_pool2d] Trial #26: GFLOPs: 15.4171. Time: 6.2269 us. Best GFLOPs: 23.0637
2024-04-29 20:35:57 [INFO] [task_scheduler.cc:131] [Task #215: fused_nn_global_avg_pool2d] Trial #27: GFLOPs: 15.4097. Time: 6.2298 us. Best GFLOPs: 23.0637
2024-04-29 20:35:57 [INFO] [task_scheduler.cc:131] [Task #215: fused_nn_global_avg_pool2d] Trial #28: GFLOPs: 21.6320. Time: 4.4379 us. Best GFLOPs: 23.0637
2024-04-29 20:35:57 [INFO] [task_scheduler.cc:131] [Task #215: fused_nn_global_avg_pool2d] Trial #29: GFLOPs: 21.6343. Time: 4.4374 us. Best GFLOPs: 23.0637
2024-04-29 20:35:57 [INFO] [task_scheduler.cc:131] [Task #215: fused_nn_global_avg_pool2d] Trial #30: GFLOPs: 8.4467. Time: 11.3653 us. Best GFLOPs: 23.0637
2024-04-29 20:35:57 [INFO] [task_scheduler.cc:131] [Task #215: fused_nn_global_avg_pool2d] Trial #31: GFLOPs: 19.4736. Time: 4.9298 us. Best GFLOPs: 23.0637
2024-04-29 20:35:57 [INFO] [task_scheduler.cc:131] [Task #215: fused_nn_global_avg_pool2d] Trial #32: GFLOPs: 5.4106. Time: 17.7431 us. Best GFLOPs: 23.0637
2024-04-29 20:35:57 [INFO] [task_scheduler.cc:131] [Task #215: fused_nn_global_avg_pool2d] Trial #33: GFLOPs: 15.3545. Time: 6.2522 us. Best GFLOPs: 23.0637
2024-04-29 20:35:58 [INFO] [task_scheduler.cc:131] [Task #215: fused_nn_global_avg_pool2d] Trial #34: GFLOPs: 22.8449. Time: 4.2022 us. Best GFLOPs: 23.0637
2024-04-29 20:35:58 [INFO] [task_scheduler.cc:131] [Task #215: fused_nn_global_avg_pool2d] Trial #35: GFLOPs: 14.2352. Time: 6.7438 us. Best GFLOPs: 23.0637
2024-04-29 20:35:58 [INFO] [task_scheduler.cc:131] [Task #215: fused_nn_global_avg_pool2d] Trial #36: GFLOPs: 11.5334. Time: 8.3236 us. Best GFLOPs: 23.0637
2024-04-29 20:35:58 [INFO] [task_scheduler.cc:131] [Task #215: fused_nn_global_avg_pool2d] Trial #37: GFLOPs: 5.3920. Time: 17.8040 us. Best GFLOPs: 23.0637
2024-04-29 20:35:58 [INFO] [task_scheduler.cc:131] [Task #215: fused_nn_global_avg_pool2d] Trial #38: GFLOPs: 8.4894. Time: 11.3082 us. Best GFLOPs: 23.0637
2024-04-29 20:35:58 [INFO] [task_scheduler.cc:131] [Task #215: fused_nn_global_avg_pool2d] Trial #39: GFLOPs: 15.1206. Time: 6.3489 us. Best GFLOPs: 23.0637
2024-04-29 20:35:58 [INFO] [task_scheduler.cc:131] [Task #215: fused_nn_global_avg_pool2d] Trial #40: GFLOPs: 23.1532. Time: 4.1463 us. Best GFLOPs: 23.1532
2024-04-29 20:35:58 [INFO] [task_scheduler.cc:131] [Task #215: fused_nn_global_avg_pool2d] Trial #41: GFLOPs: 13.4514. Time: 7.1368 us. Best GFLOPs: 23.1532
2024-04-29 20:35:58 [INFO] [task_scheduler.cc:131] [Task #215: fused_nn_global_avg_pool2d] Trial #42: GFLOPs: 21.6360. Time: 4.4370 us. Best GFLOPs: 23.1532
2024-04-29 20:35:58 [INFO] [task_scheduler.cc:131] [Task #215: fused_nn_global_avg_pool2d] Trial #43: GFLOPs: 11.4974. Time: 8.3497 us. Best GFLOPs: 23.1532
2024-04-29 20:35:58 [INFO] [task_scheduler.cc:131] [Task #215: fused_nn_global_avg_pool2d] Trial #44: GFLOPs: 11.5020. Time: 8.3463 us. Best GFLOPs: 23.1532
2024-04-29 20:35:58 [INFO] [task_scheduler.cc:131] [Task #215: fused_nn_global_avg_pool2d] Trial #45: GFLOPs: 19.4777. Time: 4.9287 us. Best GFLOPs: 23.1532
2024-04-29 20:35:58 [INFO] [task_scheduler.cc:131] [Task #215: fused_nn_global_avg_pool2d] Trial #46: GFLOPs: 8.4876. Time: 11.3106 us. Best GFLOPs: 23.1532
2024-04-29 20:35:58 [INFO] [task_scheduler.cc:131] [Task #215: fused_nn_global_avg_pool2d] Trial #47: GFLOPs: 14.2515. Time: 6.7362 us. Best GFLOPs: 23.1532
2024-04-29 20:35:58 [INFO] [task_scheduler.cc:131] [Task #215: fused_nn_global_avg_pool2d] Trial #48: GFLOPs: 5.2554. Time: 18.2669 us. Best GFLOPs: 23.1532
2024-04-29 20:35:58 [INFO] [task_scheduler.cc:131] [Task #215: fused_nn_global_avg_pool2d] Trial #49: GFLOPs: 14.2480. Time: 6.7378 us. Best GFLOPs: 23.1532
2024-04-29 20:35:58 [INFO] [task_scheduler.cc:131] [Task #215: fused_nn_global_avg_pool2d] Trial #50: GFLOPs: 19.4750. Time: 4.9294 us. Best GFLOPs: 23.1532
2024-04-29 20:35:58 [INFO] [task_scheduler.cc:131] [Task #215: fused_nn_global_avg_pool2d] Trial #51: GFLOPs: 22.6675. Time: 4.2351 us. Best GFLOPs: 23.1532
2024-04-29 20:35:58 [INFO] [task_scheduler.cc:131] [Task #215: fused_nn_global_avg_pool2d] Trial #52: GFLOPs: 8.4370. Time: 11.3785 us. Best GFLOPs: 23.1532
2024-04-29 20:35:58 [INFO] [task_scheduler.cc:131] [Task #215: fused_nn_global_avg_pool2d] Trial #53: GFLOPs: 15.4134. Time: 6.2283 us. Best GFLOPs: 23.1532
2024-04-29 20:35:58 [INFO] [task_scheduler.cc:131] [Task #215: fused_nn_global_avg_pool2d] Trial #54: GFLOPs: 14.2484. Time: 6.7376 us. Best GFLOPs: 23.1532
2024-04-29 20:35:58 [INFO] [task_scheduler.cc:131] [Task #215: fused_nn_global_avg_pool2d] Trial #55: GFLOPs: 23.0634. Time: 4.1624 us. Best GFLOPs: 23.1532
2024-04-29 20:35:58 [INFO] [task_scheduler.cc:131] [Task #215: fused_nn_global_avg_pool2d] Trial #56: GFLOPs: 5.4070. Time: 17.7546 us. Best GFLOPs: 23.1532
2024-04-29 20:35:58 [INFO] [task_scheduler.cc:131] [Task #215: fused_nn_global_avg_pool2d] Trial #57: GFLOPs: 15.0320. Time: 6.3864 us. Best GFLOPs: 23.1532
2024-04-29 20:35:58 [INFO] [task_scheduler.cc:131] [Task #215: fused_nn_global_avg_pool2d] Trial #58: GFLOPs: 23.0708. Time: 4.1611 us. Best GFLOPs: 23.1532
2024-04-29 20:35:58 [INFO] [task_scheduler.cc:131] [Task #215: fused_nn_global_avg_pool2d] Trial #59: GFLOPs: 11.5389. Time: 8.3197 us. Best GFLOPs: 23.1532
2024-04-29 20:35:58 [INFO] [task_scheduler.cc:131] [Task #215: fused_nn_global_avg_pool2d] Trial #60: GFLOPs: 5.4095. Time: 17.7467 us. Best GFLOPs: 23.1532
2024-04-29 20:35:58 [INFO] [task_scheduler.cc:131] [Task #215: fused_nn_global_avg_pool2d] Trial #61: GFLOPs: 14.2510. Time: 6.7364 us. Best GFLOPs: 23.1532
2024-04-29 20:35:58 [INFO] [task_scheduler.cc:131] [Task #215: fused_nn_global_avg_pool2d] Trial #62: GFLOPs: 11.5366. Time: 8.3213 us. Best GFLOPs: 23.1532
2024-04-29 20:35:58 [INFO] [task_scheduler.cc:131] [Task #215: fused_nn_global_avg_pool2d] Trial #63: GFLOPs: 8.4395. Time: 11.3751 us. Best GFLOPs: 23.1532
2024-05-01 15:06:20 [INFO] [task_scheduler.cc:160] Initializing Task #215: "fused_nn_global_avg_pool2d"
2024-05-01 15:06:20 [INFO] [task_scheduler.cc:35] 
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(1920), T.int64(7), T.int64(7)), "float32"), adaptive_pool_avg: T.Buffer((T.int64(1), T.int64(1920), T.int64(1), T.int64(1)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        adaptive_pool_sum = T.alloc_buffer((T.int64(1), T.int64(1920), T.int64(1), T.int64(1)))
        for ax0, ax1, ax2, ax3, rv0, rv1 in T.grid(T.int64(1), T.int64(1920), T.int64(1), T.int64(1), T.int64(7), T.int64(7)):
            with T.block("adaptive_pool_sum"):
                v_ax0, v_ax1, v_ax2, v_ax3, v_rv0, v_rv1 = T.axis.remap("SSSSRR", [ax0, ax1, ax2, ax3, rv0, rv1])
                T.reads(p0[v_ax0, v_ax1, v_ax2 * T.int64(7) + v_rv0, v_ax3 * T.int64(7) + v_rv1])
                T.writes(adaptive_pool_sum[v_ax0, v_ax1, v_ax2, v_ax3])
                with T.init():
                    adaptive_pool_sum[v_ax0, v_ax1, v_ax2, v_ax3] = T.float32(0)
                adaptive_pool_sum[v_ax0, v_ax1, v_ax2, v_ax3] = adaptive_pool_sum[v_ax0, v_ax1, v_ax2, v_ax3] + p0[v_ax0, v_ax1, v_ax2 * T.int64(7) + v_rv0, v_ax3 * T.int64(7) + v_rv1]
        for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(1920), T.int64(1), T.int64(1)):
            with T.block("adaptive_pool_avg"):
                v_ax0, v_ax1, v_ax2, v_ax3 = T.axis.remap("SSSS", [ax0, ax1, ax2, ax3])
                T.reads(adaptive_pool_sum[v_ax0, v_ax1, v_ax2, v_ax3])
                T.writes(adaptive_pool_avg[v_ax0, v_ax1, v_ax2, v_ax3])
                T.block_attr({"schedule_rule": "meta_schedule.adaptive_pool_avg"})
                adaptive_pool_avg[v_ax0, v_ax1, v_ax2, v_ax3] = adaptive_pool_sum[v_ax0, v_ax1, v_ax2, v_ax3] * T.float32(0.020408163265306121)
2024-05-01 15:06:20 [INFO] [task_scheduler.cc:164] Total 2 design space(s) generated
2024-05-01 15:06:20 [INFO] [task_scheduler.cc:170] Design space #0:
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(1920), T.int64(7), T.int64(7)), "float32"), adaptive_pool_avg: T.Buffer((T.int64(1), T.int64(1920), T.int64(1), T.int64(1)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        with T.block("root"):
            T.reads()
            T.writes()
            T.block_attr({"meta_schedule.unroll_explicit": 16})
            adaptive_pool_sum = T.alloc_buffer((T.int64(1), T.int64(1920), T.int64(1), T.int64(1)))
            for ax0_ax1_ax2_ax3_fused_0 in T.thread_binding(T.int64(8), thread="blockIdx.x"):
                for ax0_ax1_ax2_ax3_fused_1 in T.thread_binding(T.int64(256), thread="threadIdx.x"):
                    for rv0, rv1 in T.grid(T.int64(7), T.int64(7)):
                        with T.block("adaptive_pool_sum"):
                            v_ax0 = T.axis.spatial(T.int64(1), T.int64(0))
                            v_ax1 = T.axis.spatial(T.int64(1920), ax0_ax1_ax2_ax3_fused_0 * T.int64(256) + ax0_ax1_ax2_ax3_fused_1)
                            v_ax2 = T.axis.spatial(T.int64(1), T.int64(0))
                            v_ax3 = T.axis.spatial(T.int64(1), T.int64(0))
                            v_rv0, v_rv1 = T.axis.remap("RR", [rv0, rv1])
                            T.where(ax0_ax1_ax2_ax3_fused_0 * T.int64(256) + ax0_ax1_ax2_ax3_fused_1 < T.int64(1920))
                            T.reads(p0[v_ax0, v_ax1, v_ax2 * T.int64(7) + v_rv0, v_ax3 * T.int64(7) + v_rv1])
                            T.writes(adaptive_pool_sum[v_ax0, v_ax1, v_ax2, v_ax3])
                            with T.init():
                                adaptive_pool_sum[v_ax0, v_ax1, v_ax2, v_ax3] = T.float32(0)
                            adaptive_pool_sum[v_ax0, v_ax1, v_ax2, v_ax3] = adaptive_pool_sum[v_ax0, v_ax1, v_ax2, v_ax3] + p0[v_ax0, v_ax1, v_ax2 * T.int64(7) + v_rv0, v_ax3 * T.int64(7) + v_rv1]
            for ax0_ax1_ax2_ax3_fused_0 in T.thread_binding(T.int64(4), thread="blockIdx.x"):
                for ax0_ax1_ax2_ax3_fused_1 in T.thread_binding(T.int64(512), thread="threadIdx.x"):
                    with T.block("adaptive_pool_avg"):
                        v_ax0 = T.axis.spatial(T.int64(1), T.int64(0))
                        v_ax1 = T.axis.spatial(T.int64(1920), ax0_ax1_ax2_ax3_fused_0 * T.int64(512) + ax0_ax1_ax2_ax3_fused_1)
                        v_ax2 = T.axis.spatial(T.int64(1), T.int64(0))
                        v_ax3 = T.axis.spatial(T.int64(1), T.int64(0))
                        T.where(ax0_ax1_ax2_ax3_fused_0 * T.int64(512) + ax0_ax1_ax2_ax3_fused_1 < T.int64(1920))
                        T.reads(adaptive_pool_sum[v_ax0, v_ax1, v_ax2, v_ax3])
                        T.writes(adaptive_pool_avg[v_ax0, v_ax1, v_ax2, v_ax3])
                        adaptive_pool_avg[v_ax0, v_ax1, v_ax2, v_ax3] = adaptive_pool_sum[v_ax0, v_ax1, v_ax2, v_ax3] * T.float32(0.020408163265306121)
b0 = sch.get_block(name="adaptive_pool_sum", func_name="main")
b1 = sch.get_block(name="adaptive_pool_avg", func_name="main")
b2 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b1, ann_key="schedule_rule")
v3 = sch.sample_categorical(candidates=[0, 16, 64, 512, 1024], probs=[0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001], decision=1)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.unroll_explicit", ann_val=v3)
l4, l5, l6, l7 = sch.get_loops(block=b1)
l8 = sch.fuse(l4, l5, l6, l7, preserve_unit_iters=True)
v9 = sch.sample_categorical(candidates=[32, 64, 128, 256, 512, 1024], probs=[0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666], decision=4)
l10, l11 = sch.split(loop=l8, factors=[None, v9], preserve_unit_iters=True)
sch.bind(loop=l10, thread_axis="blockIdx.x")
sch.bind(loop=l11, thread_axis="threadIdx.x")
l12, l13, l14, l15, l16, l17 = sch.get_loops(block=b0)
l18 = sch.fuse(l12, l13, l14, l15, preserve_unit_iters=True)
v19 = sch.sample_categorical(candidates=[32, 64, 128, 256, 512, 1024], probs=[0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666], decision=3)
l20, l21 = sch.split(loop=l18, factors=[None, v19], preserve_unit_iters=True)
sch.bind(loop=l20, thread_axis="blockIdx.x")
sch.bind(loop=l21, thread_axis="threadIdx.x")
2024-05-01 15:06:20 [INFO] [task_scheduler.cc:170] Design space #1:
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(1920), T.int64(7), T.int64(7)), "float32"), adaptive_pool_avg: T.Buffer((T.int64(1), T.int64(1920), T.int64(1), T.int64(1)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        with T.block("root"):
            T.reads()
            T.writes()
            T.block_attr({"meta_schedule.unroll_explicit": 64})
            adaptive_pool_sum_shared = T.alloc_buffer((T.int64(1), T.int64(1920), T.int64(1), T.int64(1)), scope="shared")
            for ax0_ax1_ax2_ax3_0_fused in T.thread_binding(T.int64(1920), thread="blockIdx.x"):
                for ax0, ax1, ax2, ax3, ax4_ax5_fused_0 in T.grid(T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(4)):
                    for ax4_ax5_fused_1 in T.thread_binding(T.int64(16), thread="threadIdx.x"):
                        with T.block("adaptive_pool_sum"):
                            v_ax0 = T.axis.spatial(T.int64(1), ax0)
                            v_ax1 = T.axis.spatial(T.int64(1920), ax0_ax1_ax2_ax3_0_fused + ax1)
                            v_ax2, v_ax3 = T.axis.remap("SS", [ax2, ax3])
                            v_rv0 = T.axis.reduce(T.int64(7), (ax4_ax5_fused_0 * T.int64(16) + ax4_ax5_fused_1) // T.int64(7))
                            v_rv1 = T.axis.reduce(T.int64(7), (ax4_ax5_fused_0 * T.int64(16) + ax4_ax5_fused_1) % T.int64(7))
                            T.where(ax4_ax5_fused_0 * T.int64(16) + ax4_ax5_fused_1 < T.int64(49))
                            T.reads(p0[v_ax0, v_ax1, v_ax2 * T.int64(7) + v_rv0, v_ax3 * T.int64(7) + v_rv1])
                            T.writes(adaptive_pool_sum_shared[v_ax0, v_ax1, v_ax2, v_ax3])
                            with T.init():
                                adaptive_pool_sum_shared[v_ax0, v_ax1, v_ax2, v_ax3] = T.float32(0)
                            adaptive_pool_sum_shared[v_ax0, v_ax1, v_ax2, v_ax3] = adaptive_pool_sum_shared[v_ax0, v_ax1, v_ax2, v_ax3] + p0[v_ax0, v_ax1, v_ax2 * T.int64(7) + v_rv0, v_ax3 * T.int64(7) + v_rv1]
                for ax3_1 in T.thread_binding(T.int64(16), thread="threadIdx.x"):
                    with T.block("adaptive_pool_avg"):
                        v_ax0 = T.axis.spatial(T.int64(1), T.int64(0))
                        v_ax1 = T.axis.spatial(T.int64(1920), ax0_ax1_ax2_ax3_0_fused)
                        v_ax2 = T.axis.spatial(T.int64(1), T.int64(0))
                        v_ax3 = T.axis.spatial(T.int64(1), ax3_1)
                        T.where(T.Mul(T.int64(0), T.int64(16)) + ax3_1 < T.int64(1))
                        T.reads(adaptive_pool_sum_shared[v_ax0, v_ax1, v_ax2, v_ax3])
                        T.writes(adaptive_pool_avg[v_ax0, v_ax1, v_ax2, v_ax3])
                        adaptive_pool_avg[v_ax0, v_ax1, v_ax2, v_ax3] = adaptive_pool_sum_shared[v_ax0, v_ax1, v_ax2, v_ax3] * T.float32(0.020408163265306121)
b0 = sch.get_block(name="adaptive_pool_sum", func_name="main")
b1 = sch.get_block(name="adaptive_pool_avg", func_name="main")
b2 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b1, ann_key="schedule_rule")
b3, = sch.get_consumers(block=b0)
l4, l5, l6, l7 = sch.get_loops(block=b3)
v8 = sch.sample_categorical(candidates=[4, 8, 16, 32, 64, 128, 256, 512], probs=[0.125, 0.125, 0.125, 0.125, 0.125, 0.125, 0.125, 0.125], decision=2)
l9, l10 = sch.split(loop=l7, factors=[None, v8], preserve_unit_iters=True)
sch.bind(loop=l10, thread_axis="threadIdx.x")
sch.compute_at(block=b0, loop=l9, preserve_unit_loops=True, index=-1)
sch.set_scope(block=b0, buffer_index=0, storage_scope="shared")
l11, l12, l13, l14, l15, l16, l17, l18, l19, l20 = sch.get_loops(block=b0)
l21 = sch.fuse(l19, l20, preserve_unit_iters=True)
l22, l23 = sch.split(loop=l21, factors=[None, v8], preserve_unit_iters=True)
sch.bind(loop=l23, thread_axis="threadIdx.x")
v24 = sch.sample_categorical(candidates=[0, 16, 64, 512, 1024], probs=[0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001], decision=2)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.unroll_explicit", ann_val=v24)
l25, l26, l27, l28, l29 = sch.get_loops(block=b1)
l30 = sch.fuse(l25, l26, l27, l28, preserve_unit_iters=True)
sch.bind(loop=l30, thread_axis="blockIdx.x")
2024-05-01 18:27:45 [INFO] [evolutionary_search.cc:713] Generating candidates......
2024-05-01 18:27:45 [INFO] [evolutionary_search.cc:715] Picked top 63 candidate(s) from database
2024-05-01 18:27:45 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x1321d868)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x12c9fe98)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x11e99e78)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x135815f8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0xb9bec58)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x11bd4398)]: 0 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x1136f668)]: 0 failure(s)
2024-05-01 18:27:45 [INFO] [evolutionary_search.cc:723] Sampled 449 candidate(s)
2024-05-01 18:27:46 [INFO] [evolutionary_search.cc:621] Evolve iter #0 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x1321d868)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x12c9fe98)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x11e99e78)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x135815f8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0xb9bec58)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x11bd4398)]: 0 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x1136f668)]: 0 failure(s)
2024-05-01 18:27:46 [INFO] [evolutionary_search.cc:621] Evolve iter #1 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x1321d868)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x12c9fe98)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x11e99e78)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x135815f8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0xb9bec58)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x11bd4398)]: 0 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x1136f668)]: 0 failure(s)
2024-05-01 18:27:46 [INFO] [evolutionary_search.cc:621] Evolve iter #2 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x1321d868)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x12c9fe98)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x11e99e78)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x135815f8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0xb9bec58)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x11bd4398)]: 0 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x1136f668)]: 0 failure(s)
2024-05-01 18:27:46 [INFO] [evolutionary_search.cc:621] Evolve iter #3 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x1321d868)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x12c9fe98)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x11e99e78)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x135815f8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0xb9bec58)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x11bd4398)]: 0 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x1136f668)]: 0 failure(s)
2024-05-01 18:27:46 [INFO] [evolutionary_search.cc:649] Scores of the best 64 candidates:
[1 : 16]:	0.9963  0.9955  0.9926  0.9637  0.9609  0.9507  0.9367  0.9326  0.9308  0.9233  0.9201  0.9109  0.9098  0.9088  0.9025  0.8993
[17 : 32]:	0.8986  0.8802  0.8630  0.8583  0.8570  0.8566  0.8456  0.8320  0.8252  0.8213  0.8200  0.8101  0.8049  0.8042  0.8010  0.8001
[33 : 48]:	0.7995  0.7947  0.7917  0.7897  0.7776  0.7771  0.7764  0.7700  0.7689  0.7671  0.7639  0.7616  0.7513  0.7479  0.7474  0.7423
[49 : 64]:	0.7393  0.7320  0.7296  0.7271  0.7237  0.7196  0.7107  0.6997  0.6989  0.6936  0.6874  0.6864  0.6753  0.6720  0.6495  0.6491
2024-05-01 18:27:47 [INFO] [evolutionary_search.cc:727] Got 64 candidate(s) with evolutionary search
2024-05-01 18:27:47 [INFO] [evolutionary_search.cc:730] Sending 63 candidates(s) for measurement
2024-05-01 18:42:02 [INFO] [task_scheduler.cc:131] [Task #215: fused_nn_global_avg_pool2d] Trial #1: GFLOPs: 11.3498. Time: 8.4583 us. Best GFLOPs: 11.3498
2024-05-01 18:42:02 [INFO] [task_scheduler.cc:131] [Task #215: fused_nn_global_avg_pool2d] Trial #2: GFLOPs: 22.9033. Time: 4.1915 us. Best GFLOPs: 22.9033
2024-05-01 18:42:02 [INFO] [task_scheduler.cc:131] [Task #215: fused_nn_global_avg_pool2d] Trial #3: GFLOPs: 17.0126. Time: 5.6429 us. Best GFLOPs: 22.9033
2024-05-01 18:42:02 [INFO] [task_scheduler.cc:131] [Task #215: fused_nn_global_avg_pool2d] Trial #4: GFLOPs: 15.7133. Time: 6.1095 us. Best GFLOPs: 22.9033
2024-05-01 18:42:02 [INFO] [task_scheduler.cc:131] [Task #215: fused_nn_global_avg_pool2d] Trial #5: GFLOPs: 11.6293. Time: 8.2550 us. Best GFLOPs: 22.9033
2024-05-01 18:42:02 [INFO] [task_scheduler.cc:131] [Task #215: fused_nn_global_avg_pool2d] Trial #6: GFLOPs: 15.7130. Time: 6.1096 us. Best GFLOPs: 22.9033
2024-05-01 18:42:02 [INFO] [task_scheduler.cc:131] [Task #215: fused_nn_global_avg_pool2d] Trial #7: GFLOPs: 11.6822. Time: 8.2176 us. Best GFLOPs: 22.9033
2024-05-01 18:42:02 [INFO] [task_scheduler.cc:131] [Task #215: fused_nn_global_avg_pool2d] Trial #8: GFLOPs: 21.8722. Time: 4.3891 us. Best GFLOPs: 22.9033
2024-05-01 18:42:02 [INFO] [task_scheduler.cc:131] [Task #215: fused_nn_global_avg_pool2d] Trial #9: GFLOPs: 19.5158. Time: 4.9191 us. Best GFLOPs: 22.9033
2024-05-01 18:42:02 [INFO] [task_scheduler.cc:131] [Task #215: fused_nn_global_avg_pool2d] Trial #10: GFLOPs: 22.4770. Time: 4.2710 us. Best GFLOPs: 22.9033
2024-05-01 18:42:02 [INFO] [task_scheduler.cc:131] [Task #215: fused_nn_global_avg_pool2d] Trial #11: GFLOPs: 8.5991. Time: 11.1639 us. Best GFLOPs: 22.9033
2024-05-01 18:42:02 [INFO] [task_scheduler.cc:131] [Task #215: fused_nn_global_avg_pool2d] Trial #12: GFLOPs: 19.5131. Time: 4.9198 us. Best GFLOPs: 22.9033
2024-05-01 18:42:02 [INFO] [task_scheduler.cc:131] [Task #215: fused_nn_global_avg_pool2d] Trial #13: GFLOPs: 14.1234. Time: 6.7972 us. Best GFLOPs: 22.9033
2024-05-01 18:42:02 [INFO] [task_scheduler.cc:131] [Task #215: fused_nn_global_avg_pool2d] Trial #14: GFLOPs: 14.0767. Time: 6.8198 us. Best GFLOPs: 22.9033
2024-05-01 18:42:02 [INFO] [task_scheduler.cc:131] [Task #215: fused_nn_global_avg_pool2d] Trial #15: GFLOPs: 16.8989. Time: 5.6808 us. Best GFLOPs: 22.9033
2024-05-01 18:42:02 [INFO] [task_scheduler.cc:131] [Task #215: fused_nn_global_avg_pool2d] Trial #16: GFLOPs: 14.0512. Time: 6.8322 us. Best GFLOPs: 22.9033
2024-05-01 18:42:02 [INFO] [task_scheduler.cc:131] [Task #215: fused_nn_global_avg_pool2d] Trial #17: GFLOPs: 11.6380. Time: 8.2488 us. Best GFLOPs: 22.9033
2024-05-01 18:42:02 [INFO] [task_scheduler.cc:131] [Task #215: fused_nn_global_avg_pool2d] Trial #18: GFLOPs: 23.0623. Time: 4.1626 us. Best GFLOPs: 23.0623
2024-05-01 18:42:02 [INFO] [task_scheduler.cc:131] [Task #215: fused_nn_global_avg_pool2d] Trial #19: GFLOPs: 14.0773. Time: 6.8195 us. Best GFLOPs: 23.0623
2024-05-01 18:42:02 [INFO] [task_scheduler.cc:131] [Task #215: fused_nn_global_avg_pool2d] Trial #20: GFLOPs: 8.5666. Time: 11.2063 us. Best GFLOPs: 23.0623
2024-05-01 18:42:02 [INFO] [task_scheduler.cc:131] [Task #215: fused_nn_global_avg_pool2d] Trial #21: GFLOPs: 16.8968. Time: 5.6815 us. Best GFLOPs: 23.0623
2024-05-01 18:42:02 [INFO] [task_scheduler.cc:131] [Task #215: fused_nn_global_avg_pool2d] Trial #22: GFLOPs: 15.6685. Time: 6.1269 us. Best GFLOPs: 23.0623
2024-05-01 18:42:02 [INFO] [task_scheduler.cc:131] [Task #215: fused_nn_global_avg_pool2d] Trial #23: GFLOPs: 5.4744. Time: 17.5361 us. Best GFLOPs: 23.0623
2024-05-01 18:42:02 [INFO] [task_scheduler.cc:131] [Task #215: fused_nn_global_avg_pool2d] Trial #24: GFLOPs: 14.1202. Time: 6.7988 us. Best GFLOPs: 23.0623
2024-05-01 18:42:02 [INFO] [task_scheduler.cc:131] [Task #215: fused_nn_global_avg_pool2d] Trial #25: GFLOPs: 5.4741. Time: 17.5370 us. Best GFLOPs: 23.0623
2024-05-01 18:42:02 [INFO] [task_scheduler.cc:131] [Task #215: fused_nn_global_avg_pool2d] Trial #26: GFLOPs: 15.7132. Time: 6.1095 us. Best GFLOPs: 23.0623
2024-05-01 18:42:02 [INFO] [task_scheduler.cc:131] [Task #215: fused_nn_global_avg_pool2d] Trial #27: GFLOPs: 14.1216. Time: 6.7981 us. Best GFLOPs: 23.0623
2024-05-01 18:42:02 [INFO] [task_scheduler.cc:131] [Task #215: fused_nn_global_avg_pool2d] Trial #28: GFLOPs: 13.6450. Time: 7.0355 us. Best GFLOPs: 23.0623
2024-05-01 18:42:02 [INFO] [task_scheduler.cc:131] [Task #215: fused_nn_global_avg_pool2d] Trial #29: GFLOPs: 17.0137. Time: 5.6425 us. Best GFLOPs: 23.0623
2024-05-01 18:42:02 [INFO] [task_scheduler.cc:131] [Task #215: fused_nn_global_avg_pool2d] Trial #30: GFLOPs: 21.7279. Time: 4.4183 us. Best GFLOPs: 23.0623
2024-05-01 18:42:02 [INFO] [task_scheduler.cc:131] [Task #215: fused_nn_global_avg_pool2d] Trial #31: GFLOPs: 14.0537. Time: 6.8309 us. Best GFLOPs: 23.0623
2024-05-01 18:42:02 [INFO] [task_scheduler.cc:131] [Task #215: fused_nn_global_avg_pool2d] Trial #32: GFLOPs: 13.9989. Time: 6.8577 us. Best GFLOPs: 23.0623
2024-05-01 18:42:02 [INFO] [task_scheduler.cc:131] [Task #215: fused_nn_global_avg_pool2d] Trial #33: GFLOPs: 5.4738. Time: 17.5382 us. Best GFLOPs: 23.0623
2024-05-01 18:42:02 [INFO] [task_scheduler.cc:131] [Task #215: fused_nn_global_avg_pool2d] Trial #34: GFLOPs: 14.1276. Time: 6.7952 us. Best GFLOPs: 23.0623
2024-05-01 18:42:02 [INFO] [task_scheduler.cc:131] [Task #215: fused_nn_global_avg_pool2d] Trial #35: GFLOPs: 8.5902. Time: 11.1756 us. Best GFLOPs: 23.0623
2024-05-01 18:42:02 [INFO] [task_scheduler.cc:131] [Task #215: fused_nn_global_avg_pool2d] Trial #36: GFLOPs: 8.5892. Time: 11.1769 us. Best GFLOPs: 23.0623
2024-05-01 18:42:02 [INFO] [task_scheduler.cc:131] [Task #215: fused_nn_global_avg_pool2d] Trial #37: GFLOPs: 16.8890. Time: 5.6842 us. Best GFLOPs: 23.0623
2024-05-01 18:42:02 [INFO] [task_scheduler.cc:131] [Task #215: fused_nn_global_avg_pool2d] Trial #38: GFLOPs: 17.0163. Time: 5.6417 us. Best GFLOPs: 23.0623
2024-05-01 18:42:02 [INFO] [task_scheduler.cc:131] [Task #215: fused_nn_global_avg_pool2d] Trial #39: GFLOPs: 8.5361. Time: 11.2463 us. Best GFLOPs: 23.0623
2024-05-01 18:42:02 [INFO] [task_scheduler.cc:131] [Task #215: fused_nn_global_avg_pool2d] Trial #40: GFLOPs: 8.5910. Time: 11.1745 us. Best GFLOPs: 23.0623
2024-05-01 18:42:02 [INFO] [task_scheduler.cc:131] [Task #215: fused_nn_global_avg_pool2d] Trial #41: GFLOPs: 11.6237. Time: 8.2590 us. Best GFLOPs: 23.0623
2024-05-01 18:42:02 [INFO] [task_scheduler.cc:131] [Task #215: fused_nn_global_avg_pool2d] Trial #42: GFLOPs: 8.5268. Time: 11.2586 us. Best GFLOPs: 23.0623
2024-05-01 18:42:02 [INFO] [task_scheduler.cc:131] [Task #215: fused_nn_global_avg_pool2d] Trial #43: GFLOPs: 15.7099. Time: 6.1108 us. Best GFLOPs: 23.0623
2024-05-01 18:42:02 [INFO] [task_scheduler.cc:131] [Task #215: fused_nn_global_avg_pool2d] Trial #44: GFLOPs: 11.4149. Time: 8.4101 us. Best GFLOPs: 23.0623
2024-05-01 18:42:02 [INFO] [task_scheduler.cc:131] [Task #215: fused_nn_global_avg_pool2d] Trial #45: GFLOPs: 8.2403. Time: 11.6500 us. Best GFLOPs: 23.0623
2024-05-01 18:42:02 [INFO] [task_scheduler.cc:131] [Task #215: fused_nn_global_avg_pool2d] Trial #46: GFLOPs: 13.6452. Time: 7.0354 us. Best GFLOPs: 23.0623
2024-05-01 18:42:02 [INFO] [task_scheduler.cc:131] [Task #215: fused_nn_global_avg_pool2d] Trial #47: GFLOPs: 5.4734. Time: 17.5394 us. Best GFLOPs: 23.0623
2024-05-01 18:42:02 [INFO] [task_scheduler.cc:131] [Task #215: fused_nn_global_avg_pool2d] Trial #48: GFLOPs: 15.7153. Time: 6.1087 us. Best GFLOPs: 23.0623
2024-05-01 18:42:02 [INFO] [task_scheduler.cc:131] [Task #215: fused_nn_global_avg_pool2d] Trial #49: GFLOPs: 13.6436. Time: 7.0363 us. Best GFLOPs: 23.0623
2024-05-01 18:42:02 [INFO] [task_scheduler.cc:131] [Task #215: fused_nn_global_avg_pool2d] Trial #50: GFLOPs: 8.2492. Time: 11.6375 us. Best GFLOPs: 23.0623
2024-05-01 18:42:02 [INFO] [task_scheduler.cc:131] [Task #215: fused_nn_global_avg_pool2d] Trial #51: GFLOPs: 11.3750. Time: 8.4396 us. Best GFLOPs: 23.0623
2024-05-01 18:42:02 [INFO] [task_scheduler.cc:131] [Task #215: fused_nn_global_avg_pool2d] Trial #52: GFLOPs: 5.2966. Time: 18.1249 us. Best GFLOPs: 23.0623
2024-05-01 18:42:02 [INFO] [task_scheduler.cc:131] [Task #215: fused_nn_global_avg_pool2d] Trial #53: GFLOPs: 15.7146. Time: 6.1090 us. Best GFLOPs: 23.0623
2024-05-01 18:42:02 [INFO] [task_scheduler.cc:131] [Task #215: fused_nn_global_avg_pool2d] Trial #54: GFLOPs: 15.7167. Time: 6.1082 us. Best GFLOPs: 23.0623
2024-05-01 18:42:02 [INFO] [task_scheduler.cc:131] [Task #215: fused_nn_global_avg_pool2d] Trial #55: GFLOPs: 5.4380. Time: 17.6536 us. Best GFLOPs: 23.0623
2024-05-01 18:42:02 [INFO] [task_scheduler.cc:131] [Task #215: fused_nn_global_avg_pool2d] Trial #56: GFLOPs: 14.0425. Time: 6.8364 us. Best GFLOPs: 23.0623
2024-05-01 18:42:02 [INFO] [task_scheduler.cc:131] [Task #215: fused_nn_global_avg_pool2d] Trial #57: GFLOPs: 13.9884. Time: 6.8628 us. Best GFLOPs: 23.0623
2024-05-01 18:42:02 [INFO] [task_scheduler.cc:131] [Task #215: fused_nn_global_avg_pool2d] Trial #58: GFLOPs: 11.7473. Time: 8.1721 us. Best GFLOPs: 23.0623
2024-05-01 18:42:02 [INFO] [task_scheduler.cc:131] [Task #215: fused_nn_global_avg_pool2d] Trial #59: GFLOPs: 5.4757. Time: 17.5320 us. Best GFLOPs: 23.0623
2024-05-01 18:42:02 [INFO] [task_scheduler.cc:131] [Task #215: fused_nn_global_avg_pool2d] Trial #60: GFLOPs: 15.7113. Time: 6.1103 us. Best GFLOPs: 23.0623
2024-05-01 18:42:02 [INFO] [task_scheduler.cc:131] [Task #215: fused_nn_global_avg_pool2d] Trial #61: GFLOPs: 8.5658. Time: 11.2074 us. Best GFLOPs: 23.0623
2024-05-01 18:42:02 [INFO] [task_scheduler.cc:131] [Task #215: fused_nn_global_avg_pool2d] Trial #62: GFLOPs: 22.5210. Time: 4.2627 us. Best GFLOPs: 23.0623
2024-05-01 18:42:02 [INFO] [task_scheduler.cc:131] [Task #215: fused_nn_global_avg_pool2d] Trial #63: GFLOPs: 17.0126. Time: 5.6429 us. Best GFLOPs: 23.0623
