2024-04-29 16:31:05 [INFO] [task_scheduler.cc:160] Initializing Task #2: "fused_concatenate_multiply_add_nn_relu_1"
2024-04-29 16:31:05 [INFO] [task_scheduler.cc:35] 
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(896), T.int64(7), T.int64(7)), "float32"), p1: T.Buffer((T.int64(1), T.int64(32), T.int64(7), T.int64(7)), "float32"), p2: T.Buffer((T.int64(1), T.int64(32), T.int64(7), T.int64(7)), "float32"), p3: T.Buffer((T.int64(1), T.int64(32), T.int64(7), T.int64(7)), "float32"), p4: T.Buffer((T.int64(1), T.int64(32), T.int64(7), T.int64(7)), "float32"), p5: T.Buffer((T.int64(1), T.int64(32), T.int64(7), T.int64(7)), "float32"), p6: T.Buffer((T.int64(1), T.int64(32), T.int64(7), T.int64(7)), "float32"), p7: T.Buffer((T.int64(1), T.int64(32), T.int64(7), T.int64(7)), "float32"), p8: T.Buffer((T.int64(1), T.int64(32), T.int64(7), T.int64(7)), "float32"), p9: T.Buffer((T.int64(1), T.int64(32), T.int64(7), T.int64(7)), "float32"), p10: T.Buffer((T.int64(1), T.int64(32), T.int64(7), T.int64(7)), "float32"), p11: T.Buffer((T.int64(1), T.int64(32), T.int64(7), T.int64(7)), "float32"), p12: T.Buffer((T.int64(1), T.int64(32), T.int64(7), T.int64(7)), "float32"), p13: T.Buffer((T.int64(1), T.int64(32), T.int64(7), T.int64(7)), "float32"), p14: T.Buffer((T.int64(1), T.int64(32), T.int64(7), T.int64(7)), "float32"), p15: T.Buffer((T.int64(1), T.int64(32), T.int64(7), T.int64(7)), "float32"), p16: T.Buffer((T.int64(1), T.int64(32), T.int64(7), T.int64(7)), "float32"), p17: T.Buffer((T.int64(1), T.int64(32), T.int64(7), T.int64(7)), "float32"), p18: T.Buffer((T.int64(1), T.int64(32), T.int64(7), T.int64(7)), "float32"), p19: T.Buffer((T.int64(1), T.int64(32), T.int64(7), T.int64(7)), "float32"), p20: T.Buffer((T.int64(1), T.int64(32), T.int64(7), T.int64(7)), "float32"), p21: T.Buffer((T.int64(1), T.int64(32), T.int64(7), T.int64(7)), "float32"), p22: T.Buffer((T.int64(1), T.int64(32), T.int64(7), T.int64(7)), "float32"), p23: T.Buffer((T.int64(1), T.int64(32), T.int64(7), T.int64(7)), "float32"), p24: T.Buffer((T.int64(1), T.int64(32), T.int64(7), T.int64(7)), "float32"), p25: T.Buffer((T.int64(1), T.int64(32), T.int64(7), T.int64(7)), "float32"), p26: T.Buffer((T.int64(1), T.int64(32), T.int64(7), T.int64(7)), "float32"), p27: T.Buffer((T.int64(1), T.int64(32), T.int64(7), T.int64(7)), "float32"), p28: T.Buffer((T.int64(1), T.int64(32), T.int64(7), T.int64(7)), "float32"), p29: T.Buffer((T.int64(1), T.int64(32), T.int64(7), T.int64(7)), "float32"), p30: T.Buffer((T.int64(1), T.int64(32), T.int64(7), T.int64(7)), "float32"), p31: T.Buffer((T.int64(1), T.int64(1856), T.int64(1), T.int64(1)), "float32"), p32: T.Buffer((T.int64(1), T.int64(1856), T.int64(1), T.int64(1)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(1856), T.int64(7), T.int64(7)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        T_concat = T.alloc_buffer((T.int64(1), T.int64(1856), T.int64(7), T.int64(7)))
        T_multiply = T.alloc_buffer((T.int64(1), T.int64(1856), T.int64(7), T.int64(7)))
        T_add = T.alloc_buffer((T.int64(1), T.int64(1856), T.int64(7), T.int64(7)))
        for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(1856), T.int64(7), T.int64(7)):
            with T.block("T_concat"):
                v_ax0, v_ax1, v_ax2, v_ax3 = T.axis.remap("SSSS", [ax0, ax1, ax2, ax3])
                T.reads(p30[v_ax0, v_ax1 - T.int64(1824), v_ax2, v_ax3], p29[v_ax0, v_ax1 - T.int64(1792), v_ax2, v_ax3], p28[v_ax0, v_ax1 - T.int64(1760), v_ax2, v_ax3], p27[v_ax0, v_ax1 - T.int64(1728), v_ax2, v_ax3], p26[v_ax0, v_ax1 - T.int64(1696), v_ax2, v_ax3], p25[v_ax0, v_ax1 - T.int64(1664), v_ax2, v_ax3], p24[v_ax0, v_ax1 - T.int64(1632), v_ax2, v_ax3], p23[v_ax0, v_ax1 - T.int64(1600), v_ax2, v_ax3], p22[v_ax0, v_ax1 - T.int64(1568), v_ax2, v_ax3], p21[v_ax0, v_ax1 - T.int64(1536), v_ax2, v_ax3], p20[v_ax0, v_ax1 - T.int64(1504), v_ax2, v_ax3], p19[v_ax0, v_ax1 - T.int64(1472), v_ax2, v_ax3], p18[v_ax0, v_ax1 - T.int64(1440), v_ax2, v_ax3], p17[v_ax0, v_ax1 - T.int64(1408), v_ax2, v_ax3], p16[v_ax0, v_ax1 - T.int64(1376), v_ax2, v_ax3], p15[v_ax0, v_ax1 - T.int64(1344), v_ax2, v_ax3], p14[v_ax0, v_ax1 - T.int64(1312), v_ax2, v_ax3], p13[v_ax0, v_ax1 - T.int64(1280), v_ax2, v_ax3], p12[v_ax0, v_ax1 - T.int64(1248), v_ax2, v_ax3], p11[v_ax0, v_ax1 - T.int64(1216), v_ax2, v_ax3], p10[v_ax0, v_ax1 - T.int64(1184), v_ax2, v_ax3], p9[v_ax0, v_ax1 - T.int64(1152), v_ax2, v_ax3], p8[v_ax0, v_ax1 - T.int64(1120), v_ax2, v_ax3], p7[v_ax0, v_ax1 - T.int64(1088), v_ax2, v_ax3], p6[v_ax0, v_ax1 - T.int64(1056), v_ax2, v_ax3], p5[v_ax0, v_ax1 - T.int64(1024), v_ax2, v_ax3], p4[v_ax0, v_ax1 - T.int64(992), v_ax2, v_ax3], p3[v_ax0, v_ax1 - T.int64(960), v_ax2, v_ax3], p2[v_ax0, v_ax1 - T.int64(928), v_ax2, v_ax3], p1[v_ax0, v_ax1 - T.int64(896), v_ax2, v_ax3], p0[v_ax0, v_ax1, v_ax2, v_ax3])
                T.writes(T_concat[v_ax0, v_ax1, v_ax2, v_ax3])
                T_concat[v_ax0, v_ax1, v_ax2, v_ax3] = T.if_then_else(T.int64(1824) <= v_ax1, p30[v_ax0, v_ax1 - T.int64(1824), v_ax2, v_ax3], T.if_then_else(T.int64(1792) <= v_ax1, p29[v_ax0, v_ax1 - T.int64(1792), v_ax2, v_ax3], T.if_then_else(T.int64(1760) <= v_ax1, p28[v_ax0, v_ax1 - T.int64(1760), v_ax2, v_ax3], T.if_then_else(T.int64(1728) <= v_ax1, p27[v_ax0, v_ax1 - T.int64(1728), v_ax2, v_ax3], T.if_then_else(T.int64(1696) <= v_ax1, p26[v_ax0, v_ax1 - T.int64(1696), v_ax2, v_ax3], T.if_then_else(T.int64(1664) <= v_ax1, p25[v_ax0, v_ax1 - T.int64(1664), v_ax2, v_ax3], T.if_then_else(T.int64(1632) <= v_ax1, p24[v_ax0, v_ax1 - T.int64(1632), v_ax2, v_ax3], T.if_then_else(T.int64(1600) <= v_ax1, p23[v_ax0, v_ax1 - T.int64(1600), v_ax2, v_ax3], T.if_then_else(T.int64(1568) <= v_ax1, p22[v_ax0, v_ax1 - T.int64(1568), v_ax2, v_ax3], T.if_then_else(T.int64(1536) <= v_ax1, p21[v_ax0, v_ax1 - T.int64(1536), v_ax2, v_ax3], T.if_then_else(T.int64(1504) <= v_ax1, p20[v_ax0, v_ax1 - T.int64(1504), v_ax2, v_ax3], T.if_then_else(T.int64(1472) <= v_ax1, p19[v_ax0, v_ax1 - T.int64(1472), v_ax2, v_ax3], T.if_then_else(T.int64(1440) <= v_ax1, p18[v_ax0, v_ax1 - T.int64(1440), v_ax2, v_ax3], T.if_then_else(T.int64(1408) <= v_ax1, p17[v_ax0, v_ax1 - T.int64(1408), v_ax2, v_ax3], T.if_then_else(T.int64(1376) <= v_ax1, p16[v_ax0, v_ax1 - T.int64(1376), v_ax2, v_ax3], T.if_then_else(T.int64(1344) <= v_ax1, p15[v_ax0, v_ax1 - T.int64(1344), v_ax2, v_ax3], T.if_then_else(T.int64(1312) <= v_ax1, p14[v_ax0, v_ax1 - T.int64(1312), v_ax2, v_ax3], T.if_then_else(T.int64(1280) <= v_ax1, p13[v_ax0, v_ax1 - T.int64(1280), v_ax2, v_ax3], T.if_then_else(T.int64(1248) <= v_ax1, p12[v_ax0, v_ax1 - T.int64(1248), v_ax2, v_ax3], T.if_then_else(T.int64(1216) <= v_ax1, p11[v_ax0, v_ax1 - T.int64(1216), v_ax2, v_ax3], T.if_then_else(T.int64(1184) <= v_ax1, p10[v_ax0, v_ax1 - T.int64(1184), v_ax2, v_ax3], T.if_then_else(T.int64(1152) <= v_ax1, p9[v_ax0, v_ax1 - T.int64(1152), v_ax2, v_ax3], T.if_then_else(T.int64(1120) <= v_ax1, p8[v_ax0, v_ax1 - T.int64(1120), v_ax2, v_ax3], T.if_then_else(T.int64(1088) <= v_ax1, p7[v_ax0, v_ax1 - T.int64(1088), v_ax2, v_ax3], T.if_then_else(T.int64(1056) <= v_ax1, p6[v_ax0, v_ax1 - T.int64(1056), v_ax2, v_ax3], T.if_then_else(T.int64(1024) <= v_ax1, p5[v_ax0, v_ax1 - T.int64(1024), v_ax2, v_ax3], T.if_then_else(T.int64(992) <= v_ax1, p4[v_ax0, v_ax1 - T.int64(992), v_ax2, v_ax3], T.if_then_else(T.int64(960) <= v_ax1, p3[v_ax0, v_ax1 - T.int64(960), v_ax2, v_ax3], T.if_then_else(T.int64(928) <= v_ax1, p2[v_ax0, v_ax1 - T.int64(928), v_ax2, v_ax3], T.if_then_else(T.int64(896) <= v_ax1, p1[v_ax0, v_ax1 - T.int64(896), v_ax2, v_ax3], p0[v_ax0, v_ax1, v_ax2, v_ax3]))))))))))))))))))))))))))))))
        for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(1856), T.int64(7), T.int64(7)):
            with T.block("T_multiply"):
                v_ax0, v_ax1, v_ax2, v_ax3 = T.axis.remap("SSSS", [ax0, ax1, ax2, ax3])
                T.reads(T_concat[v_ax0, v_ax1, v_ax2, v_ax3], p31[v_ax0, v_ax1, T.int64(0), T.int64(0)])
                T.writes(T_multiply[v_ax0, v_ax1, v_ax2, v_ax3])
                T_multiply[v_ax0, v_ax1, v_ax2, v_ax3] = T_concat[v_ax0, v_ax1, v_ax2, v_ax3] * p31[v_ax0, v_ax1, T.int64(0), T.int64(0)]
        for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(1856), T.int64(7), T.int64(7)):
            with T.block("T_add"):
                v_ax0, v_ax1, v_ax2, v_ax3 = T.axis.remap("SSSS", [ax0, ax1, ax2, ax3])
                T.reads(T_multiply[v_ax0, v_ax1, v_ax2, v_ax3], p32[v_ax0, v_ax1, T.int64(0), T.int64(0)])
                T.writes(T_add[v_ax0, v_ax1, v_ax2, v_ax3])
                T_add[v_ax0, v_ax1, v_ax2, v_ax3] = T_multiply[v_ax0, v_ax1, v_ax2, v_ax3] + p32[v_ax0, v_ax1, T.int64(0), T.int64(0)]
        for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(1856), T.int64(7), T.int64(7)):
            with T.block("T_relu"):
                v_ax0, v_ax1, v_ax2, v_ax3 = T.axis.remap("SSSS", [ax0, ax1, ax2, ax3])
                T.reads(T_add[v_ax0, v_ax1, v_ax2, v_ax3])
                T.writes(T_relu[v_ax0, v_ax1, v_ax2, v_ax3])
                T_relu[v_ax0, v_ax1, v_ax2, v_ax3] = T.max(T_add[v_ax0, v_ax1, v_ax2, v_ax3], T.float32(0))
2024-04-29 16:31:05 [INFO] [task_scheduler.cc:164] Total 1 design space(s) generated
2024-04-29 16:31:05 [INFO] [task_scheduler.cc:170] Design space #0:
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(896), T.int64(7), T.int64(7)), "float32"), p1: T.Buffer((T.int64(1), T.int64(32), T.int64(7), T.int64(7)), "float32"), p2: T.Buffer((T.int64(1), T.int64(32), T.int64(7), T.int64(7)), "float32"), p3: T.Buffer((T.int64(1), T.int64(32), T.int64(7), T.int64(7)), "float32"), p4: T.Buffer((T.int64(1), T.int64(32), T.int64(7), T.int64(7)), "float32"), p5: T.Buffer((T.int64(1), T.int64(32), T.int64(7), T.int64(7)), "float32"), p6: T.Buffer((T.int64(1), T.int64(32), T.int64(7), T.int64(7)), "float32"), p7: T.Buffer((T.int64(1), T.int64(32), T.int64(7), T.int64(7)), "float32"), p8: T.Buffer((T.int64(1), T.int64(32), T.int64(7), T.int64(7)), "float32"), p9: T.Buffer((T.int64(1), T.int64(32), T.int64(7), T.int64(7)), "float32"), p10: T.Buffer((T.int64(1), T.int64(32), T.int64(7), T.int64(7)), "float32"), p11: T.Buffer((T.int64(1), T.int64(32), T.int64(7), T.int64(7)), "float32"), p12: T.Buffer((T.int64(1), T.int64(32), T.int64(7), T.int64(7)), "float32"), p13: T.Buffer((T.int64(1), T.int64(32), T.int64(7), T.int64(7)), "float32"), p14: T.Buffer((T.int64(1), T.int64(32), T.int64(7), T.int64(7)), "float32"), p15: T.Buffer((T.int64(1), T.int64(32), T.int64(7), T.int64(7)), "float32"), p16: T.Buffer((T.int64(1), T.int64(32), T.int64(7), T.int64(7)), "float32"), p17: T.Buffer((T.int64(1), T.int64(32), T.int64(7), T.int64(7)), "float32"), p18: T.Buffer((T.int64(1), T.int64(32), T.int64(7), T.int64(7)), "float32"), p19: T.Buffer((T.int64(1), T.int64(32), T.int64(7), T.int64(7)), "float32"), p20: T.Buffer((T.int64(1), T.int64(32), T.int64(7), T.int64(7)), "float32"), p21: T.Buffer((T.int64(1), T.int64(32), T.int64(7), T.int64(7)), "float32"), p22: T.Buffer((T.int64(1), T.int64(32), T.int64(7), T.int64(7)), "float32"), p23: T.Buffer((T.int64(1), T.int64(32), T.int64(7), T.int64(7)), "float32"), p24: T.Buffer((T.int64(1), T.int64(32), T.int64(7), T.int64(7)), "float32"), p25: T.Buffer((T.int64(1), T.int64(32), T.int64(7), T.int64(7)), "float32"), p26: T.Buffer((T.int64(1), T.int64(32), T.int64(7), T.int64(7)), "float32"), p27: T.Buffer((T.int64(1), T.int64(32), T.int64(7), T.int64(7)), "float32"), p28: T.Buffer((T.int64(1), T.int64(32), T.int64(7), T.int64(7)), "float32"), p29: T.Buffer((T.int64(1), T.int64(32), T.int64(7), T.int64(7)), "float32"), p30: T.Buffer((T.int64(1), T.int64(32), T.int64(7), T.int64(7)), "float32"), p31: T.Buffer((T.int64(1), T.int64(1856), T.int64(1), T.int64(1)), "float32"), p32: T.Buffer((T.int64(1), T.int64(1856), T.int64(1), T.int64(1)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(1856), T.int64(7), T.int64(7)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        for ax0_ax1_ax2_ax3_fused_0 in T.thread_binding(T.int64(178), thread="blockIdx.x"):
            for ax0_ax1_ax2_ax3_fused_1 in T.thread_binding(T.int64(512), thread="threadIdx.x"):
                with T.block("T_concat"):
                    v_ax0 = T.axis.spatial(T.int64(1), T.int64(0))
                    v_ax1 = T.axis.spatial(T.int64(1856), (ax0_ax1_ax2_ax3_fused_0 * T.int64(512) + ax0_ax1_ax2_ax3_fused_1) // T.int64(49))
                    v_ax2 = T.axis.spatial(T.int64(7), (ax0_ax1_ax2_ax3_fused_0 * T.int64(512) + ax0_ax1_ax2_ax3_fused_1) % T.int64(49) // T.int64(7))
                    v_ax3 = T.axis.spatial(T.int64(7), (ax0_ax1_ax2_ax3_fused_0 * T.int64(512) + ax0_ax1_ax2_ax3_fused_1) % T.int64(7))
                    T.where(ax0_ax1_ax2_ax3_fused_0 * T.int64(512) + ax0_ax1_ax2_ax3_fused_1 < T.int64(90944))
                    T.reads(p30[v_ax0, v_ax1 - T.int64(1824), v_ax2, v_ax3], p29[v_ax0, v_ax1 - T.int64(1792), v_ax2, v_ax3], p28[v_ax0, v_ax1 - T.int64(1760), v_ax2, v_ax3], p27[v_ax0, v_ax1 - T.int64(1728), v_ax2, v_ax3], p26[v_ax0, v_ax1 - T.int64(1696), v_ax2, v_ax3], p25[v_ax0, v_ax1 - T.int64(1664), v_ax2, v_ax3], p24[v_ax0, v_ax1 - T.int64(1632), v_ax2, v_ax3], p23[v_ax0, v_ax1 - T.int64(1600), v_ax2, v_ax3], p22[v_ax0, v_ax1 - T.int64(1568), v_ax2, v_ax3], p21[v_ax0, v_ax1 - T.int64(1536), v_ax2, v_ax3], p20[v_ax0, v_ax1 - T.int64(1504), v_ax2, v_ax3], p19[v_ax0, v_ax1 - T.int64(1472), v_ax2, v_ax3], p18[v_ax0, v_ax1 - T.int64(1440), v_ax2, v_ax3], p17[v_ax0, v_ax1 - T.int64(1408), v_ax2, v_ax3], p16[v_ax0, v_ax1 - T.int64(1376), v_ax2, v_ax3], p15[v_ax0, v_ax1 - T.int64(1344), v_ax2, v_ax3], p14[v_ax0, v_ax1 - T.int64(1312), v_ax2, v_ax3], p13[v_ax0, v_ax1 - T.int64(1280), v_ax2, v_ax3], p12[v_ax0, v_ax1 - T.int64(1248), v_ax2, v_ax3], p11[v_ax0, v_ax1 - T.int64(1216), v_ax2, v_ax3], p10[v_ax0, v_ax1 - T.int64(1184), v_ax2, v_ax3], p9[v_ax0, v_ax1 - T.int64(1152), v_ax2, v_ax3], p8[v_ax0, v_ax1 - T.int64(1120), v_ax2, v_ax3], p7[v_ax0, v_ax1 - T.int64(1088), v_ax2, v_ax3], p6[v_ax0, v_ax1 - T.int64(1056), v_ax2, v_ax3], p5[v_ax0, v_ax1 - T.int64(1024), v_ax2, v_ax3], p4[v_ax0, v_ax1 - T.int64(992), v_ax2, v_ax3], p3[v_ax0, v_ax1 - T.int64(960), v_ax2, v_ax3], p2[v_ax0, v_ax1 - T.int64(928), v_ax2, v_ax3], p1[v_ax0, v_ax1 - T.int64(896), v_ax2, v_ax3], p0[v_ax0, v_ax1, v_ax2, v_ax3], p31[v_ax0, v_ax1, T.int64(0), T.int64(0)], p32[v_ax0, v_ax1, T.int64(0), T.int64(0)])
                    T.writes(T_relu[v_ax0, v_ax1, v_ax2, v_ax3])
                    T_relu[v_ax0, v_ax1, v_ax2, v_ax3] = T.max(T.if_then_else(T.int64(1824) <= v_ax1, p30[v_ax0, v_ax1 - T.int64(1824), v_ax2, v_ax3], T.if_then_else(T.int64(1792) <= v_ax1, p29[v_ax0, v_ax1 - T.int64(1792), v_ax2, v_ax3], T.if_then_else(T.int64(1760) <= v_ax1, p28[v_ax0, v_ax1 - T.int64(1760), v_ax2, v_ax3], T.if_then_else(T.int64(1728) <= v_ax1, p27[v_ax0, v_ax1 - T.int64(1728), v_ax2, v_ax3], T.if_then_else(T.int64(1696) <= v_ax1, p26[v_ax0, v_ax1 - T.int64(1696), v_ax2, v_ax3], T.if_then_else(T.int64(1664) <= v_ax1, p25[v_ax0, v_ax1 - T.int64(1664), v_ax2, v_ax3], T.if_then_else(T.int64(1632) <= v_ax1, p24[v_ax0, v_ax1 - T.int64(1632), v_ax2, v_ax3], T.if_then_else(T.int64(1600) <= v_ax1, p23[v_ax0, v_ax1 - T.int64(1600), v_ax2, v_ax3], T.if_then_else(T.int64(1568) <= v_ax1, p22[v_ax0, v_ax1 - T.int64(1568), v_ax2, v_ax3], T.if_then_else(T.int64(1536) <= v_ax1, p21[v_ax0, v_ax1 - T.int64(1536), v_ax2, v_ax3], T.if_then_else(T.int64(1504) <= v_ax1, p20[v_ax0, v_ax1 - T.int64(1504), v_ax2, v_ax3], T.if_then_else(T.int64(1472) <= v_ax1, p19[v_ax0, v_ax1 - T.int64(1472), v_ax2, v_ax3], T.if_then_else(T.int64(1440) <= v_ax1, p18[v_ax0, v_ax1 - T.int64(1440), v_ax2, v_ax3], T.if_then_else(T.int64(1408) <= v_ax1, p17[v_ax0, v_ax1 - T.int64(1408), v_ax2, v_ax3], T.if_then_else(T.int64(1376) <= v_ax1, p16[v_ax0, v_ax1 - T.int64(1376), v_ax2, v_ax3], T.if_then_else(T.int64(1344) <= v_ax1, p15[v_ax0, v_ax1 - T.int64(1344), v_ax2, v_ax3], T.if_then_else(T.int64(1312) <= v_ax1, p14[v_ax0, v_ax1 - T.int64(1312), v_ax2, v_ax3], T.if_then_else(T.int64(1280) <= v_ax1, p13[v_ax0, v_ax1 - T.int64(1280), v_ax2, v_ax3], T.if_then_else(T.int64(1248) <= v_ax1, p12[v_ax0, v_ax1 - T.int64(1248), v_ax2, v_ax3], T.if_then_else(T.int64(1216) <= v_ax1, p11[v_ax0, v_ax1 - T.int64(1216), v_ax2, v_ax3], T.if_then_else(T.int64(1184) <= v_ax1, p10[v_ax0, v_ax1 - T.int64(1184), v_ax2, v_ax3], T.if_then_else(T.int64(1152) <= v_ax1, p9[v_ax0, v_ax1 - T.int64(1152), v_ax2, v_ax3], T.if_then_else(T.int64(1120) <= v_ax1, p8[v_ax0, v_ax1 - T.int64(1120), v_ax2, v_ax3], T.if_then_else(T.int64(1088) <= v_ax1, p7[v_ax0, v_ax1 - T.int64(1088), v_ax2, v_ax3], T.if_then_else(T.int64(1056) <= v_ax1, p6[v_ax0, v_ax1 - T.int64(1056), v_ax2, v_ax3], T.if_then_else(T.int64(1024) <= v_ax1, p5[v_ax0, v_ax1 - T.int64(1024), v_ax2, v_ax3], T.if_then_else(T.int64(992) <= v_ax1, p4[v_ax0, v_ax1 - T.int64(992), v_ax2, v_ax3], T.if_then_else(T.int64(960) <= v_ax1, p3[v_ax0, v_ax1 - T.int64(960), v_ax2, v_ax3], T.if_then_else(T.int64(928) <= v_ax1, p2[v_ax0, v_ax1 - T.int64(928), v_ax2, v_ax3], T.if_then_else(T.int64(896) <= v_ax1, p1[v_ax0, v_ax1 - T.int64(896), v_ax2, v_ax3], p0[v_ax0, v_ax1, v_ax2, v_ax3])))))))))))))))))))))))))))))) * p31[v_ax0, v_ax1, T.int64(0), T.int64(0)] + p32[v_ax0, v_ax1, T.int64(0), T.int64(0)], T.float32(0))
b0 = sch.get_block(name="T_concat", func_name="main")
b1 = sch.get_block(name="T_multiply", func_name="main")
b2 = sch.get_block(name="T_add", func_name="main")
b3 = sch.get_block(name="T_relu", func_name="main")
sch.reverse_compute_inline(block=b3)
sch.reverse_compute_inline(block=b2)
sch.reverse_compute_inline(block=b1)
l4, l5, l6, l7 = sch.get_loops(block=b0)
l8 = sch.fuse(l4, l5, l6, l7, preserve_unit_iters=True)
v9 = sch.sample_categorical(candidates=[32, 64, 128, 256, 512, 1024], probs=[0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666], decision=4)
l10, l11 = sch.split(loop=l8, factors=[None, v9], preserve_unit_iters=True)
sch.bind(loop=l10, thread_axis="blockIdx.x")
sch.bind(loop=l11, thread_axis="threadIdx.x")
2024-04-29 16:34:51 [INFO] [evolutionary_search.cc:713] Generating candidates......
2024-04-29 16:34:51 [INFO] [evolutionary_search.cc:715] Picked top 0 candidate(s) from database
2024-04-29 16:34:59 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x5c64e18)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x85bee18)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x35af1e8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x11f840f8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x126a6f28)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x11352568)]: 0 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0xa5de018)]: 0 failure(s)
2024-04-29 16:34:59 [INFO] [evolutionary_search.cc:723] Sampled 512 candidate(s)
2024-04-29 16:35:01 [INFO] [evolutionary_search.cc:621] Evolve iter #0 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x5c64e18)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x85bee18)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x35af1e8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x11f840f8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x126a6f28)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x11352568)]: 0 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0xa5de018)]: 0 failure(s)
2024-04-29 16:35:02 [INFO] [evolutionary_search.cc:621] Evolve iter #1 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x5c64e18)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x85bee18)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x35af1e8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x11f840f8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x126a6f28)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x11352568)]: 0 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0xa5de018)]: 0 failure(s)
2024-04-29 16:35:04 [INFO] [evolutionary_search.cc:621] Evolve iter #2 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x5c64e18)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x85bee18)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x35af1e8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x11f840f8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x126a6f28)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x11352568)]: 0 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0xa5de018)]: 0 failure(s)
2024-04-29 16:35:05 [INFO] [evolutionary_search.cc:621] Evolve iter #3 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x5c64e18)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x85bee18)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x35af1e8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x11f840f8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x126a6f28)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x11352568)]: 0 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0xa5de018)]: 0 failure(s)
2024-04-29 16:35:05 [INFO] [evolutionary_search.cc:649] Scores of the best 6 candidates:
[1 : 6]:	0.8010  0.7208  0.6994  0.2507  0.1792  0.1491
2024-04-29 16:35:05 [INFO] [evolutionary_search.cc:727] Got 6 candidate(s) with evolutionary search
2024-04-29 16:35:05 [INFO] [evolutionary_search.cc:730] Sending 6 candidates(s) for measurement
2024-04-29 20:20:15 [INFO] [task_scheduler.cc:121] [Task #2: fused_concatenate_multiply_add_nn_relu_1] Trial #1: Error in running:
LocalRunner: An exception occurred
Traceback (most recent call last):
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/exec/popen_worker.py", line 87, in main
    result = fn(*args, **kwargs)
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/meta_schedule/runner/local_runner.py", line 152, in _worker_func
    repeated_args: List[T_ARGUMENT_LIST] = f_alloc_argument(
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/meta_schedule/runner/local_runner.py", line 360, in default_alloc_argument
    return alloc_argument_common(f_random_fill, device, args_info, alloc_repeat)
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/meta_schedule/runner/utils.py", line 74, in alloc_argument_common
    arg: Any = dispatcher.get(arg_type, None)(*arg_info)
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/meta_schedule/runner/utils.py", line 56, in alloc_tensor
    arg = ndarray.empty(shape=shape, dtype=dtype, device=device)
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/runtime/ndarray.py", line 391, in empty
    arr = _ffi_api.TVMArrayAllocWithScope(shape, dtype, device, mem_scope)
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/_ffi/_ctypes/packed_func.py", line 239, in __call__
    raise_last_ffi_error()
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/_ffi/base.py", line 481, in raise_last_ffi_error
    raise py_err
tvm.error.InternalError: Traceback (most recent call last):
  5: _ZN3tvm7runtime13PackedFun
  4: tvm::runtime::TypedPackedFunc<tvm::runtime::NDArray (tvm::runtime::ShapeTuple, DLDataType, DLDevice, tvm::runtime::Optional<tvm::runtime::String>)>::AssignTypedLambda<tvm::runtime::NDArray (*)(tvm::runtime::ShapeTuple, DLDataType, DLDevice, tvm::runtime::Optional<tvm::runtime::String>)>(tvm::runtime::NDArray (*)(tvm::runtime::ShapeTuple, DLDataType, DLDevice, tvm::runtime::Optional<tvm::runtime::String>), std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}::operator()(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*) const
  3: tvm::runtime::NDArray::Empty(tvm::runtime::ShapeTuple, DLDataType, DLDevice, tvm::runtime::Optional<tvm::runtime::String>)
  2: tvm::runtime::DeviceAPI::AllocDataSpace(DLDevice, int, long const*, DLDataType, tvm::runtime::Optional<tvm::runtime::String>)
  1: tvm::runtime::CUDADeviceAPI::AllocDataSpace(DLDevice, unsigned long, unsigned long, DLDataType)
  0: _ZN3tvm7runtime6deta
  File "/mnt/home/gverma/ceph/opt/tvm/src/runtime/cuda/cuda_device_api.cc", line 126
InternalError: Check failed: (e == cudaSuccess || e == cudaErrorCudartUnloading) is false: CUDA: misaligned address

# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(896), T.int64(7), T.int64(7)), "float32"), p1: T.Buffer((T.int64(1), T.int64(32), T.int64(7), T.int64(7)), "float32"), p2: T.Buffer((T.int64(1), T.int64(32), T.int64(7), T.int64(7)), "float32"), p3: T.Buffer((T.int64(1), T.int64(32), T.int64(7), T.int64(7)), "float32"), p4: T.Buffer((T.int64(1), T.int64(32), T.int64(7), T.int64(7)), "float32"), p5: T.Buffer((T.int64(1), T.int64(32), T.int64(7), T.int64(7)), "float32"), p6: T.Buffer((T.int64(1), T.int64(32), T.int64(7), T.int64(7)), "float32"), p7: T.Buffer((T.int64(1), T.int64(32), T.int64(7), T.int64(7)), "float32"), p8: T.Buffer((T.int64(1), T.int64(32), T.int64(7), T.int64(7)), "float32"), p9: T.Buffer((T.int64(1), T.int64(32), T.int64(7), T.int64(7)), "float32"), p10: T.Buffer((T.int64(1), T.int64(32), T.int64(7), T.int64(7)), "float32"), p11: T.Buffer((T.int64(1), T.int64(32), T.int64(7), T.int64(7)), "float32"), p12: T.Buffer((T.int64(1), T.int64(32), T.int64(7), T.int64(7)), "float32"), p13: T.Buffer((T.int64(1), T.int64(32), T.int64(7), T.int64(7)), "float32"), p14: T.Buffer((T.int64(1), T.int64(32), T.int64(7), T.int64(7)), "float32"), p15: T.Buffer((T.int64(1), T.int64(32), T.int64(7), T.int64(7)), "float32"), p16: T.Buffer((T.int64(1), T.int64(32), T.int64(7), T.int64(7)), "float32"), p17: T.Buffer((T.int64(1), T.int64(32), T.int64(7), T.int64(7)), "float32"), p18: T.Buffer((T.int64(1), T.int64(32), T.int64(7), T.int64(7)), "float32"), p19: T.Buffer((T.int64(1), T.int64(32), T.int64(7), T.int64(7)), "float32"), p20: T.Buffer((T.int64(1), T.int64(32), T.int64(7), T.int64(7)), "float32"), p21: T.Buffer((T.int64(1), T.int64(32), T.int64(7), T.int64(7)), "float32"), p22: T.Buffer((T.int64(1), T.int64(32), T.int64(7), T.int64(7)), "float32"), p23: T.Buffer((T.int64(1), T.int64(32), T.int64(7), T.int64(7)), "float32"), p24: T.Buffer((T.int64(1), T.int64(32), T.int64(7), T.int64(7)), "float32"), p25: T.Buffer((T.int64(1), T.int64(32), T.int64(7), T.int64(7)), "float32"), p26: T.Buffer((T.int64(1), T.int64(32), T.int64(7), T.int64(7)), "float32"), p27: T.Buffer((T.int64(1), T.int64(32), T.int64(7), T.int64(7)), "float32"), p28: T.Buffer((T.int64(1), T.int64(32), T.int64(7), T.int64(7)), "float32"), p29: T.Buffer((T.int64(1), T.int64(32), T.int64(7), T.int64(7)), "float32"), p30: T.Buffer((T.int64(1), T.int64(32), T.int64(7), T.int64(7)), "float32"), p31: T.Buffer((T.int64(1), T.int64(1856), T.int64(1), T.int64(1)), "float32"), p32: T.Buffer((T.int64(1), T.int64(1856), T.int64(1), T.int64(1)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(1856), T.int64(7), T.int64(7)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        for ax0_ax1_ax2_ax3_fused_0 in T.thread_binding(T.int64(356), thread="blockIdx.x"):
            for ax0_ax1_ax2_ax3_fused_1 in T.thread_binding(T.int64(256), thread="threadIdx.x"):
                with T.block("T_concat"):
                    v_ax0 = T.axis.spatial(T.int64(1), T.int64(0))
                    v_ax1 = T.axis.spatial(T.int64(1856), (ax0_ax1_ax2_ax3_fused_0 * T.int64(256) + ax0_ax1_ax2_ax3_fused_1) // T.int64(49))
                    v_ax2 = T.axis.spatial(T.int64(7), (ax0_ax1_ax2_ax3_fused_0 * T.int64(256) + ax0_ax1_ax2_ax3_fused_1) % T.int64(49) // T.int64(7))
                    v_ax3 = T.axis.spatial(T.int64(7), (ax0_ax1_ax2_ax3_fused_0 * T.int64(256) + ax0_ax1_ax2_ax3_fused_1) % T.int64(7))
                    T.where(ax0_ax1_ax2_ax3_fused_0 * T.int64(256) + ax0_ax1_ax2_ax3_fused_1 < T.int64(90944))
                    T.reads(p30[v_ax0, v_ax1 - T.int64(1824), v_ax2, v_ax3], p29[v_ax0, v_ax1 - T.int64(1792), v_ax2, v_ax3], p28[v_ax0, v_ax1 - T.int64(1760), v_ax2, v_ax3], p27[v_ax0, v_ax1 - T.int64(1728), v_ax2, v_ax3], p26[v_ax0, v_ax1 - T.int64(1696), v_ax2, v_ax3], p25[v_ax0, v_ax1 - T.int64(1664), v_ax2, v_ax3], p24[v_ax0, v_ax1 - T.int64(1632), v_ax2, v_ax3], p23[v_ax0, v_ax1 - T.int64(1600), v_ax2, v_ax3], p22[v_ax0, v_ax1 - T.int64(1568), v_ax2, v_ax3], p21[v_ax0, v_ax1 - T.int64(1536), v_ax2, v_ax3], p20[v_ax0, v_ax1 - T.int64(1504), v_ax2, v_ax3], p19[v_ax0, v_ax1 - T.int64(1472), v_ax2, v_ax3], p18[v_ax0, v_ax1 - T.int64(1440), v_ax2, v_ax3], p17[v_ax0, v_ax1 - T.int64(1408), v_ax2, v_ax3], p16[v_ax0, v_ax1 - T.int64(1376), v_ax2, v_ax3], p15[v_ax0, v_ax1 - T.int64(1344), v_ax2, v_ax3], p14[v_ax0, v_ax1 - T.int64(1312), v_ax2, v_ax3], p13[v_ax0, v_ax1 - T.int64(1280), v_ax2, v_ax3], p12[v_ax0, v_ax1 - T.int64(1248), v_ax2, v_ax3], p11[v_ax0, v_ax1 - T.int64(1216), v_ax2, v_ax3], p10[v_ax0, v_ax1 - T.int64(1184), v_ax2, v_ax3], p9[v_ax0, v_ax1 - T.int64(1152), v_ax2, v_ax3], p8[v_ax0, v_ax1 - T.int64(1120), v_ax2, v_ax3], p7[v_ax0, v_ax1 - T.int64(1088), v_ax2, v_ax3], p6[v_ax0, v_ax1 - T.int64(1056), v_ax2, v_ax3], p5[v_ax0, v_ax1 - T.int64(1024), v_ax2, v_ax3], p4[v_ax0, v_ax1 - T.int64(992), v_ax2, v_ax3], p3[v_ax0, v_ax1 - T.int64(960), v_ax2, v_ax3], p2[v_ax0, v_ax1 - T.int64(928), v_ax2, v_ax3], p1[v_ax0, v_ax1 - T.int64(896), v_ax2, v_ax3], p0[v_ax0, v_ax1, v_ax2, v_ax3], p31[v_ax0, v_ax1, T.int64(0), T.int64(0)], p32[v_ax0, v_ax1, T.int64(0), T.int64(0)])
                    T.writes(T_relu[v_ax0, v_ax1, v_ax2, v_ax3])
                    T_relu[v_ax0, v_ax1, v_ax2, v_ax3] = T.max(T.if_then_else(T.int64(1824) <= v_ax1, p30[v_ax0, v_ax1 - T.int64(1824), v_ax2, v_ax3], T.if_then_else(T.int64(1792) <= v_ax1, p29[v_ax0, v_ax1 - T.int64(1792), v_ax2, v_ax3], T.if_then_else(T.int64(1760) <= v_ax1, p28[v_ax0, v_ax1 - T.int64(1760), v_ax2, v_ax3], T.if_then_else(T.int64(1728) <= v_ax1, p27[v_ax0, v_ax1 - T.int64(1728), v_ax2, v_ax3], T.if_then_else(T.int64(1696) <= v_ax1, p26[v_ax0, v_ax1 - T.int64(1696), v_ax2, v_ax3], T.if_then_else(T.int64(1664) <= v_ax1, p25[v_ax0, v_ax1 - T.int64(1664), v_ax2, v_ax3], T.if_then_else(T.int64(1632) <= v_ax1, p24[v_ax0, v_ax1 - T.int64(1632), v_ax2, v_ax3], T.if_then_else(T.int64(1600) <= v_ax1, p23[v_ax0, v_ax1 - T.int64(1600), v_ax2, v_ax3], T.if_then_else(T.int64(1568) <= v_ax1, p22[v_ax0, v_ax1 - T.int64(1568), v_ax2, v_ax3], T.if_then_else(T.int64(1536) <= v_ax1, p21[v_ax0, v_ax1 - T.int64(1536), v_ax2, v_ax3], T.if_then_else(T.int64(1504) <= v_ax1, p20[v_ax0, v_ax1 - T.int64(1504), v_ax2, v_ax3], T.if_then_else(T.int64(1472) <= v_ax1, p19[v_ax0, v_ax1 - T.int64(1472), v_ax2, v_ax3], T.if_then_else(T.int64(1440) <= v_ax1, p18[v_ax0, v_ax1 - T.int64(1440), v_ax2, v_ax3], T.if_then_else(T.int64(1408) <= v_ax1, p17[v_ax0, v_ax1 - T.int64(1408), v_ax2, v_ax3], T.if_then_else(T.int64(1376) <= v_ax1, p16[v_ax0, v_ax1 - T.int64(1376), v_ax2, v_ax3], T.if_then_else(T.int64(1344) <= v_ax1, p15[v_ax0, v_ax1 - T.int64(1344), v_ax2, v_ax3], T.if_then_else(T.int64(1312) <= v_ax1, p14[v_ax0, v_ax1 - T.int64(1312), v_ax2, v_ax3], T.if_then_else(T.int64(1280) <= v_ax1, p13[v_ax0, v_ax1 - T.int64(1280), v_ax2, v_ax3], T.if_then_else(T.int64(1248) <= v_ax1, p12[v_ax0, v_ax1 - T.int64(1248), v_ax2, v_ax3], T.if_then_else(T.int64(1216) <= v_ax1, p11[v_ax0, v_ax1 - T.int64(1216), v_ax2, v_ax3], T.if_then_else(T.int64(1184) <= v_ax1, p10[v_ax0, v_ax1 - T.int64(1184), v_ax2, v_ax3], T.if_then_else(T.int64(1152) <= v_ax1, p9[v_ax0, v_ax1 - T.int64(1152), v_ax2, v_ax3], T.if_then_else(T.int64(1120) <= v_ax1, p8[v_ax0, v_ax1 - T.int64(1120), v_ax2, v_ax3], T.if_then_else(T.int64(1088) <= v_ax1, p7[v_ax0, v_ax1 - T.int64(1088), v_ax2, v_ax3], T.if_then_else(T.int64(1056) <= v_ax1, p6[v_ax0, v_ax1 - T.int64(1056), v_ax2, v_ax3], T.if_then_else(T.int64(1024) <= v_ax1, p5[v_ax0, v_ax1 - T.int64(1024), v_ax2, v_ax3], T.if_then_else(T.int64(992) <= v_ax1, p4[v_ax0, v_ax1 - T.int64(992), v_ax2, v_ax3], T.if_then_else(T.int64(960) <= v_ax1, p3[v_ax0, v_ax1 - T.int64(960), v_ax2, v_ax3], T.if_then_else(T.int64(928) <= v_ax1, p2[v_ax0, v_ax1 - T.int64(928), v_ax2, v_ax3], T.if_then_else(T.int64(896) <= v_ax1, p1[v_ax0, v_ax1 - T.int64(896), v_ax2, v_ax3], p0[v_ax0, v_ax1, v_ax2, v_ax3])))))))))))))))))))))))))))))) * p31[v_ax0, v_ax1, T.int64(0), T.int64(0)] + p32[v_ax0, v_ax1, T.int64(0), T.int64(0)], T.float32(0))
b0 = sch.get_block(name="T_concat", func_name="main")
b1 = sch.get_block(name="T_multiply", func_name="main")
b2 = sch.get_block(name="T_add", func_name="main")
b3 = sch.get_block(name="T_relu", func_name="main")
sch.reverse_compute_inline(block=b3)
sch.reverse_compute_inline(block=b2)
sch.reverse_compute_inline(block=b1)
l4, l5, l6, l7 = sch.get_loops(block=b0)
l8 = sch.fuse(l4, l5, l6, l7, preserve_unit_iters=True)
v9 = sch.sample_categorical(candidates=[32, 64, 128, 256, 512, 1024], probs=[0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666], decision=3)
l10, l11 = sch.split(loop=l8, factors=[None, v9], preserve_unit_iters=True)
sch.bind(loop=l10, thread_axis="blockIdx.x")
sch.bind(loop=l11, thread_axis="threadIdx.x")
sch.enter_postproc()
2024-04-29 20:20:15 [INFO] [task_scheduler.cc:121] [Task #2: fused_concatenate_multiply_add_nn_relu_1] Trial #2: Error in running:
LocalRunner: An exception occurred
Traceback (most recent call last):
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/exec/popen_worker.py", line 87, in main
    result = fn(*args, **kwargs)
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/meta_schedule/runner/local_runner.py", line 152, in _worker_func
    repeated_args: List[T_ARGUMENT_LIST] = f_alloc_argument(
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/meta_schedule/runner/local_runner.py", line 360, in default_alloc_argument
    return alloc_argument_common(f_random_fill, device, args_info, alloc_repeat)
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/meta_schedule/runner/utils.py", line 74, in alloc_argument_common
    arg: Any = dispatcher.get(arg_type, None)(*arg_info)
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/meta_schedule/runner/utils.py", line 56, in alloc_tensor
    arg = ndarray.empty(shape=shape, dtype=dtype, device=device)
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/runtime/ndarray.py", line 391, in empty
    arr = _ffi_api.TVMArrayAllocWithScope(shape, dtype, device, mem_scope)
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/_ffi/_ctypes/packed_func.py", line 239, in __call__
    raise_last_ffi_error()
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/_ffi/base.py", line 481, in raise_last_ffi_error
    raise py_err
tvm.error.InternalError: Traceback (most recent call last):
  5: _ZN3tvm7runtime13PackedFun
  4: tvm::runtime::TypedPackedFunc<tvm::runtime::NDArray (tvm::runtime::ShapeTuple, DLDataType, DLDevice, tvm::runtime::Optional<tvm::runtime::String>)>::AssignTypedLambda<tvm::runtime::NDArray (*)(tvm::runtime::ShapeTuple, DLDataType, DLDevice, tvm::runtime::Optional<tvm::runtime::String>)>(tvm::runtime::NDArray (*)(tvm::runtime::ShapeTuple, DLDataType, DLDevice, tvm::runtime::Optional<tvm::runtime::String>), std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}::operator()(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*) const
  3: tvm::runtime::NDArray::Empty(tvm::runtime::ShapeTuple, DLDataType, DLDevice, tvm::runtime::Optional<tvm::runtime::String>)
  2: tvm::runtime::DeviceAPI::AllocDataSpace(DLDevice, int, long const*, DLDataType, tvm::runtime::Optional<tvm::runtime::String>)
  1: tvm::runtime::CUDADeviceAPI::AllocDataSpace(DLDevice, unsigned long, unsigned long, DLDataType)
  0: _ZN3tvm7runtime6deta
  File "/mnt/home/gverma/ceph/opt/tvm/src/runtime/cuda/cuda_device_api.cc", line 126
InternalError: Check failed: (e == cudaSuccess || e == cudaErrorCudartUnloading) is false: CUDA: misaligned address

# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(896), T.int64(7), T.int64(7)), "float32"), p1: T.Buffer((T.int64(1), T.int64(32), T.int64(7), T.int64(7)), "float32"), p2: T.Buffer((T.int64(1), T.int64(32), T.int64(7), T.int64(7)), "float32"), p3: T.Buffer((T.int64(1), T.int64(32), T.int64(7), T.int64(7)), "float32"), p4: T.Buffer((T.int64(1), T.int64(32), T.int64(7), T.int64(7)), "float32"), p5: T.Buffer((T.int64(1), T.int64(32), T.int64(7), T.int64(7)), "float32"), p6: T.Buffer((T.int64(1), T.int64(32), T.int64(7), T.int64(7)), "float32"), p7: T.Buffer((T.int64(1), T.int64(32), T.int64(7), T.int64(7)), "float32"), p8: T.Buffer((T.int64(1), T.int64(32), T.int64(7), T.int64(7)), "float32"), p9: T.Buffer((T.int64(1), T.int64(32), T.int64(7), T.int64(7)), "float32"), p10: T.Buffer((T.int64(1), T.int64(32), T.int64(7), T.int64(7)), "float32"), p11: T.Buffer((T.int64(1), T.int64(32), T.int64(7), T.int64(7)), "float32"), p12: T.Buffer((T.int64(1), T.int64(32), T.int64(7), T.int64(7)), "float32"), p13: T.Buffer((T.int64(1), T.int64(32), T.int64(7), T.int64(7)), "float32"), p14: T.Buffer((T.int64(1), T.int64(32), T.int64(7), T.int64(7)), "float32"), p15: T.Buffer((T.int64(1), T.int64(32), T.int64(7), T.int64(7)), "float32"), p16: T.Buffer((T.int64(1), T.int64(32), T.int64(7), T.int64(7)), "float32"), p17: T.Buffer((T.int64(1), T.int64(32), T.int64(7), T.int64(7)), "float32"), p18: T.Buffer((T.int64(1), T.int64(32), T.int64(7), T.int64(7)), "float32"), p19: T.Buffer((T.int64(1), T.int64(32), T.int64(7), T.int64(7)), "float32"), p20: T.Buffer((T.int64(1), T.int64(32), T.int64(7), T.int64(7)), "float32"), p21: T.Buffer((T.int64(1), T.int64(32), T.int64(7), T.int64(7)), "float32"), p22: T.Buffer((T.int64(1), T.int64(32), T.int64(7), T.int64(7)), "float32"), p23: T.Buffer((T.int64(1), T.int64(32), T.int64(7), T.int64(7)), "float32"), p24: T.Buffer((T.int64(1), T.int64(32), T.int64(7), T.int64(7)), "float32"), p25: T.Buffer((T.int64(1), T.int64(32), T.int64(7), T.int64(7)), "float32"), p26: T.Buffer((T.int64(1), T.int64(32), T.int64(7), T.int64(7)), "float32"), p27: T.Buffer((T.int64(1), T.int64(32), T.int64(7), T.int64(7)), "float32"), p28: T.Buffer((T.int64(1), T.int64(32), T.int64(7), T.int64(7)), "float32"), p29: T.Buffer((T.int64(1), T.int64(32), T.int64(7), T.int64(7)), "float32"), p30: T.Buffer((T.int64(1), T.int64(32), T.int64(7), T.int64(7)), "float32"), p31: T.Buffer((T.int64(1), T.int64(1856), T.int64(1), T.int64(1)), "float32"), p32: T.Buffer((T.int64(1), T.int64(1856), T.int64(1), T.int64(1)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(1856), T.int64(7), T.int64(7)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        for ax0_ax1_ax2_ax3_fused_0 in T.thread_binding(T.int64(89), thread="blockIdx.x"):
            for ax0_ax1_ax2_ax3_fused_1 in T.thread_binding(T.int64(1024), thread="threadIdx.x"):
                with T.block("T_concat"):
                    v_ax0 = T.axis.spatial(T.int64(1), T.int64(0))
                    v_ax1 = T.axis.spatial(T.int64(1856), (ax0_ax1_ax2_ax3_fused_0 * T.int64(1024) + ax0_ax1_ax2_ax3_fused_1) // T.int64(49))
                    v_ax2 = T.axis.spatial(T.int64(7), (ax0_ax1_ax2_ax3_fused_0 * T.int64(1024) + ax0_ax1_ax2_ax3_fused_1) % T.int64(49) // T.int64(7))
                    v_ax3 = T.axis.spatial(T.int64(7), (ax0_ax1_ax2_ax3_fused_0 * T.int64(1024) + ax0_ax1_ax2_ax3_fused_1) % T.int64(7))
                    T.where(ax0_ax1_ax2_ax3_fused_0 * T.int64(1024) + ax0_ax1_ax2_ax3_fused_1 < T.int64(90944))
                    T.reads(p30[v_ax0, v_ax1 - T.int64(1824), v_ax2, v_ax3], p29[v_ax0, v_ax1 - T.int64(1792), v_ax2, v_ax3], p28[v_ax0, v_ax1 - T.int64(1760), v_ax2, v_ax3], p27[v_ax0, v_ax1 - T.int64(1728), v_ax2, v_ax3], p26[v_ax0, v_ax1 - T.int64(1696), v_ax2, v_ax3], p25[v_ax0, v_ax1 - T.int64(1664), v_ax2, v_ax3], p24[v_ax0, v_ax1 - T.int64(1632), v_ax2, v_ax3], p23[v_ax0, v_ax1 - T.int64(1600), v_ax2, v_ax3], p22[v_ax0, v_ax1 - T.int64(1568), v_ax2, v_ax3], p21[v_ax0, v_ax1 - T.int64(1536), v_ax2, v_ax3], p20[v_ax0, v_ax1 - T.int64(1504), v_ax2, v_ax3], p19[v_ax0, v_ax1 - T.int64(1472), v_ax2, v_ax3], p18[v_ax0, v_ax1 - T.int64(1440), v_ax2, v_ax3], p17[v_ax0, v_ax1 - T.int64(1408), v_ax2, v_ax3], p16[v_ax0, v_ax1 - T.int64(1376), v_ax2, v_ax3], p15[v_ax0, v_ax1 - T.int64(1344), v_ax2, v_ax3], p14[v_ax0, v_ax1 - T.int64(1312), v_ax2, v_ax3], p13[v_ax0, v_ax1 - T.int64(1280), v_ax2, v_ax3], p12[v_ax0, v_ax1 - T.int64(1248), v_ax2, v_ax3], p11[v_ax0, v_ax1 - T.int64(1216), v_ax2, v_ax3], p10[v_ax0, v_ax1 - T.int64(1184), v_ax2, v_ax3], p9[v_ax0, v_ax1 - T.int64(1152), v_ax2, v_ax3], p8[v_ax0, v_ax1 - T.int64(1120), v_ax2, v_ax3], p7[v_ax0, v_ax1 - T.int64(1088), v_ax2, v_ax3], p6[v_ax0, v_ax1 - T.int64(1056), v_ax2, v_ax3], p5[v_ax0, v_ax1 - T.int64(1024), v_ax2, v_ax3], p4[v_ax0, v_ax1 - T.int64(992), v_ax2, v_ax3], p3[v_ax0, v_ax1 - T.int64(960), v_ax2, v_ax3], p2[v_ax0, v_ax1 - T.int64(928), v_ax2, v_ax3], p1[v_ax0, v_ax1 - T.int64(896), v_ax2, v_ax3], p0[v_ax0, v_ax1, v_ax2, v_ax3], p31[v_ax0, v_ax1, T.int64(0), T.int64(0)], p32[v_ax0, v_ax1, T.int64(0), T.int64(0)])
                    T.writes(T_relu[v_ax0, v_ax1, v_ax2, v_ax3])
                    T_relu[v_ax0, v_ax1, v_ax2, v_ax3] = T.max(T.if_then_else(T.int64(1824) <= v_ax1, p30[v_ax0, v_ax1 - T.int64(1824), v_ax2, v_ax3], T.if_then_else(T.int64(1792) <= v_ax1, p29[v_ax0, v_ax1 - T.int64(1792), v_ax2, v_ax3], T.if_then_else(T.int64(1760) <= v_ax1, p28[v_ax0, v_ax1 - T.int64(1760), v_ax2, v_ax3], T.if_then_else(T.int64(1728) <= v_ax1, p27[v_ax0, v_ax1 - T.int64(1728), v_ax2, v_ax3], T.if_then_else(T.int64(1696) <= v_ax1, p26[v_ax0, v_ax1 - T.int64(1696), v_ax2, v_ax3], T.if_then_else(T.int64(1664) <= v_ax1, p25[v_ax0, v_ax1 - T.int64(1664), v_ax2, v_ax3], T.if_then_else(T.int64(1632) <= v_ax1, p24[v_ax0, v_ax1 - T.int64(1632), v_ax2, v_ax3], T.if_then_else(T.int64(1600) <= v_ax1, p23[v_ax0, v_ax1 - T.int64(1600), v_ax2, v_ax3], T.if_then_else(T.int64(1568) <= v_ax1, p22[v_ax0, v_ax1 - T.int64(1568), v_ax2, v_ax3], T.if_then_else(T.int64(1536) <= v_ax1, p21[v_ax0, v_ax1 - T.int64(1536), v_ax2, v_ax3], T.if_then_else(T.int64(1504) <= v_ax1, p20[v_ax0, v_ax1 - T.int64(1504), v_ax2, v_ax3], T.if_then_else(T.int64(1472) <= v_ax1, p19[v_ax0, v_ax1 - T.int64(1472), v_ax2, v_ax3], T.if_then_else(T.int64(1440) <= v_ax1, p18[v_ax0, v_ax1 - T.int64(1440), v_ax2, v_ax3], T.if_then_else(T.int64(1408) <= v_ax1, p17[v_ax0, v_ax1 - T.int64(1408), v_ax2, v_ax3], T.if_then_else(T.int64(1376) <= v_ax1, p16[v_ax0, v_ax1 - T.int64(1376), v_ax2, v_ax3], T.if_then_else(T.int64(1344) <= v_ax1, p15[v_ax0, v_ax1 - T.int64(1344), v_ax2, v_ax3], T.if_then_else(T.int64(1312) <= v_ax1, p14[v_ax0, v_ax1 - T.int64(1312), v_ax2, v_ax3], T.if_then_else(T.int64(1280) <= v_ax1, p13[v_ax0, v_ax1 - T.int64(1280), v_ax2, v_ax3], T.if_then_else(T.int64(1248) <= v_ax1, p12[v_ax0, v_ax1 - T.int64(1248), v_ax2, v_ax3], T.if_then_else(T.int64(1216) <= v_ax1, p11[v_ax0, v_ax1 - T.int64(1216), v_ax2, v_ax3], T.if_then_else(T.int64(1184) <= v_ax1, p10[v_ax0, v_ax1 - T.int64(1184), v_ax2, v_ax3], T.if_then_else(T.int64(1152) <= v_ax1, p9[v_ax0, v_ax1 - T.int64(1152), v_ax2, v_ax3], T.if_then_else(T.int64(1120) <= v_ax1, p8[v_ax0, v_ax1 - T.int64(1120), v_ax2, v_ax3], T.if_then_else(T.int64(1088) <= v_ax1, p7[v_ax0, v_ax1 - T.int64(1088), v_ax2, v_ax3], T.if_then_else(T.int64(1056) <= v_ax1, p6[v_ax0, v_ax1 - T.int64(1056), v_ax2, v_ax3], T.if_then_else(T.int64(1024) <= v_ax1, p5[v_ax0, v_ax1 - T.int64(1024), v_ax2, v_ax3], T.if_then_else(T.int64(992) <= v_ax1, p4[v_ax0, v_ax1 - T.int64(992), v_ax2, v_ax3], T.if_then_else(T.int64(960) <= v_ax1, p3[v_ax0, v_ax1 - T.int64(960), v_ax2, v_ax3], T.if_then_else(T.int64(928) <= v_ax1, p2[v_ax0, v_ax1 - T.int64(928), v_ax2, v_ax3], T.if_then_else(T.int64(896) <= v_ax1, p1[v_ax0, v_ax1 - T.int64(896), v_ax2, v_ax3], p0[v_ax0, v_ax1, v_ax2, v_ax3])))))))))))))))))))))))))))))) * p31[v_ax0, v_ax1, T.int64(0), T.int64(0)] + p32[v_ax0, v_ax1, T.int64(0), T.int64(0)], T.float32(0))
b0 = sch.get_block(name="T_concat", func_name="main")
b1 = sch.get_block(name="T_multiply", func_name="main")
b2 = sch.get_block(name="T_add", func_name="main")
b3 = sch.get_block(name="T_relu", func_name="main")
sch.reverse_compute_inline(block=b3)
sch.reverse_compute_inline(block=b2)
sch.reverse_compute_inline(block=b1)
l4, l5, l6, l7 = sch.get_loops(block=b0)
l8 = sch.fuse(l4, l5, l6, l7, preserve_unit_iters=True)
v9 = sch.sample_categorical(candidates=[32, 64, 128, 256, 512, 1024], probs=[0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666], decision=5)
l10, l11 = sch.split(loop=l8, factors=[None, v9], preserve_unit_iters=True)
sch.bind(loop=l10, thread_axis="blockIdx.x")
sch.bind(loop=l11, thread_axis="threadIdx.x")
sch.enter_postproc()
2024-04-29 20:20:15 [INFO] [task_scheduler.cc:121] [Task #2: fused_concatenate_multiply_add_nn_relu_1] Trial #3: Error in running:
LocalRunner: An exception occurred
Traceback (most recent call last):
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/exec/popen_worker.py", line 87, in main
    result = fn(*args, **kwargs)
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/meta_schedule/runner/local_runner.py", line 152, in _worker_func
    repeated_args: List[T_ARGUMENT_LIST] = f_alloc_argument(
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/meta_schedule/runner/local_runner.py", line 360, in default_alloc_argument
    return alloc_argument_common(f_random_fill, device, args_info, alloc_repeat)
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/meta_schedule/runner/utils.py", line 74, in alloc_argument_common
    arg: Any = dispatcher.get(arg_type, None)(*arg_info)
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/meta_schedule/runner/utils.py", line 56, in alloc_tensor
    arg = ndarray.empty(shape=shape, dtype=dtype, device=device)
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/runtime/ndarray.py", line 391, in empty
    arr = _ffi_api.TVMArrayAllocWithScope(shape, dtype, device, mem_scope)
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/_ffi/_ctypes/packed_func.py", line 239, in __call__
    raise_last_ffi_error()
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/_ffi/base.py", line 481, in raise_last_ffi_error
    raise py_err
tvm.error.InternalError: Traceback (most recent call last):
  5: _ZN3tvm7runtime13PackedFun
  4: tvm::runtime::TypedPackedFunc<tvm::runtime::NDArray (tvm::runtime::ShapeTuple, DLDataType, DLDevice, tvm::runtime::Optional<tvm::runtime::String>)>::AssignTypedLambda<tvm::runtime::NDArray (*)(tvm::runtime::ShapeTuple, DLDataType, DLDevice, tvm::runtime::Optional<tvm::runtime::String>)>(tvm::runtime::NDArray (*)(tvm::runtime::ShapeTuple, DLDataType, DLDevice, tvm::runtime::Optional<tvm::runtime::String>), std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}::operator()(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*) const
  3: tvm::runtime::NDArray::Empty(tvm::runtime::ShapeTuple, DLDataType, DLDevice, tvm::runtime::Optional<tvm::runtime::String>)
  2: tvm::runtime::DeviceAPI::AllocDataSpace(DLDevice, int, long const*, DLDataType, tvm::runtime::Optional<tvm::runtime::String>)
  1: tvm::runtime::CUDADeviceAPI::AllocDataSpace(DLDevice, unsigned long, unsigned long, DLDataType)
  0: _ZN3tvm7runtime6deta
  File "/mnt/home/gverma/ceph/opt/tvm/src/runtime/cuda/cuda_device_api.cc", line 126
InternalError: Check failed: (e == cudaSuccess || e == cudaErrorCudartUnloading) is false: CUDA: misaligned address

# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(896), T.int64(7), T.int64(7)), "float32"), p1: T.Buffer((T.int64(1), T.int64(32), T.int64(7), T.int64(7)), "float32"), p2: T.Buffer((T.int64(1), T.int64(32), T.int64(7), T.int64(7)), "float32"), p3: T.Buffer((T.int64(1), T.int64(32), T.int64(7), T.int64(7)), "float32"), p4: T.Buffer((T.int64(1), T.int64(32), T.int64(7), T.int64(7)), "float32"), p5: T.Buffer((T.int64(1), T.int64(32), T.int64(7), T.int64(7)), "float32"), p6: T.Buffer((T.int64(1), T.int64(32), T.int64(7), T.int64(7)), "float32"), p7: T.Buffer((T.int64(1), T.int64(32), T.int64(7), T.int64(7)), "float32"), p8: T.Buffer((T.int64(1), T.int64(32), T.int64(7), T.int64(7)), "float32"), p9: T.Buffer((T.int64(1), T.int64(32), T.int64(7), T.int64(7)), "float32"), p10: T.Buffer((T.int64(1), T.int64(32), T.int64(7), T.int64(7)), "float32"), p11: T.Buffer((T.int64(1), T.int64(32), T.int64(7), T.int64(7)), "float32"), p12: T.Buffer((T.int64(1), T.int64(32), T.int64(7), T.int64(7)), "float32"), p13: T.Buffer((T.int64(1), T.int64(32), T.int64(7), T.int64(7)), "float32"), p14: T.Buffer((T.int64(1), T.int64(32), T.int64(7), T.int64(7)), "float32"), p15: T.Buffer((T.int64(1), T.int64(32), T.int64(7), T.int64(7)), "float32"), p16: T.Buffer((T.int64(1), T.int64(32), T.int64(7), T.int64(7)), "float32"), p17: T.Buffer((T.int64(1), T.int64(32), T.int64(7), T.int64(7)), "float32"), p18: T.Buffer((T.int64(1), T.int64(32), T.int64(7), T.int64(7)), "float32"), p19: T.Buffer((T.int64(1), T.int64(32), T.int64(7), T.int64(7)), "float32"), p20: T.Buffer((T.int64(1), T.int64(32), T.int64(7), T.int64(7)), "float32"), p21: T.Buffer((T.int64(1), T.int64(32), T.int64(7), T.int64(7)), "float32"), p22: T.Buffer((T.int64(1), T.int64(32), T.int64(7), T.int64(7)), "float32"), p23: T.Buffer((T.int64(1), T.int64(32), T.int64(7), T.int64(7)), "float32"), p24: T.Buffer((T.int64(1), T.int64(32), T.int64(7), T.int64(7)), "float32"), p25: T.Buffer((T.int64(1), T.int64(32), T.int64(7), T.int64(7)), "float32"), p26: T.Buffer((T.int64(1), T.int64(32), T.int64(7), T.int64(7)), "float32"), p27: T.Buffer((T.int64(1), T.int64(32), T.int64(7), T.int64(7)), "float32"), p28: T.Buffer((T.int64(1), T.int64(32), T.int64(7), T.int64(7)), "float32"), p29: T.Buffer((T.int64(1), T.int64(32), T.int64(7), T.int64(7)), "float32"), p30: T.Buffer((T.int64(1), T.int64(32), T.int64(7), T.int64(7)), "float32"), p31: T.Buffer((T.int64(1), T.int64(1856), T.int64(1), T.int64(1)), "float32"), p32: T.Buffer((T.int64(1), T.int64(1856), T.int64(1), T.int64(1)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(1856), T.int64(7), T.int64(7)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        for ax0_ax1_ax2_ax3_fused_0 in T.thread_binding(T.int64(2842), thread="blockIdx.x"):
            for ax0_ax1_ax2_ax3_fused_1 in T.thread_binding(T.int64(32), thread="threadIdx.x"):
                with T.block("T_concat"):
                    v_ax0 = T.axis.spatial(T.int64(1), T.int64(0))
                    v_ax1 = T.axis.spatial(T.int64(1856), (ax0_ax1_ax2_ax3_fused_0 * T.int64(32) + ax0_ax1_ax2_ax3_fused_1) // T.int64(49))
                    v_ax2 = T.axis.spatial(T.int64(7), (ax0_ax1_ax2_ax3_fused_0 * T.int64(32) + ax0_ax1_ax2_ax3_fused_1) % T.int64(49) // T.int64(7))
                    v_ax3 = T.axis.spatial(T.int64(7), (ax0_ax1_ax2_ax3_fused_0 * T.int64(32) + ax0_ax1_ax2_ax3_fused_1) % T.int64(7))
                    T.reads(p30[v_ax0, v_ax1 - T.int64(1824), v_ax2, v_ax3], p29[v_ax0, v_ax1 - T.int64(1792), v_ax2, v_ax3], p28[v_ax0, v_ax1 - T.int64(1760), v_ax2, v_ax3], p27[v_ax0, v_ax1 - T.int64(1728), v_ax2, v_ax3], p26[v_ax0, v_ax1 - T.int64(1696), v_ax2, v_ax3], p25[v_ax0, v_ax1 - T.int64(1664), v_ax2, v_ax3], p24[v_ax0, v_ax1 - T.int64(1632), v_ax2, v_ax3], p23[v_ax0, v_ax1 - T.int64(1600), v_ax2, v_ax3], p22[v_ax0, v_ax1 - T.int64(1568), v_ax2, v_ax3], p21[v_ax0, v_ax1 - T.int64(1536), v_ax2, v_ax3], p20[v_ax0, v_ax1 - T.int64(1504), v_ax2, v_ax3], p19[v_ax0, v_ax1 - T.int64(1472), v_ax2, v_ax3], p18[v_ax0, v_ax1 - T.int64(1440), v_ax2, v_ax3], p17[v_ax0, v_ax1 - T.int64(1408), v_ax2, v_ax3], p16[v_ax0, v_ax1 - T.int64(1376), v_ax2, v_ax3], p15[v_ax0, v_ax1 - T.int64(1344), v_ax2, v_ax3], p14[v_ax0, v_ax1 - T.int64(1312), v_ax2, v_ax3], p13[v_ax0, v_ax1 - T.int64(1280), v_ax2, v_ax3], p12[v_ax0, v_ax1 - T.int64(1248), v_ax2, v_ax3], p11[v_ax0, v_ax1 - T.int64(1216), v_ax2, v_ax3], p10[v_ax0, v_ax1 - T.int64(1184), v_ax2, v_ax3], p9[v_ax0, v_ax1 - T.int64(1152), v_ax2, v_ax3], p8[v_ax0, v_ax1 - T.int64(1120), v_ax2, v_ax3], p7[v_ax0, v_ax1 - T.int64(1088), v_ax2, v_ax3], p6[v_ax0, v_ax1 - T.int64(1056), v_ax2, v_ax3], p5[v_ax0, v_ax1 - T.int64(1024), v_ax2, v_ax3], p4[v_ax0, v_ax1 - T.int64(992), v_ax2, v_ax3], p3[v_ax0, v_ax1 - T.int64(960), v_ax2, v_ax3], p2[v_ax0, v_ax1 - T.int64(928), v_ax2, v_ax3], p1[v_ax0, v_ax1 - T.int64(896), v_ax2, v_ax3], p0[v_ax0, v_ax1, v_ax2, v_ax3], p31[v_ax0, v_ax1, T.int64(0), T.int64(0)], p32[v_ax0, v_ax1, T.int64(0), T.int64(0)])
                    T.writes(T_relu[v_ax0, v_ax1, v_ax2, v_ax3])
                    T_relu[v_ax0, v_ax1, v_ax2, v_ax3] = T.max(T.if_then_else(T.int64(1824) <= v_ax1, p30[v_ax0, v_ax1 - T.int64(1824), v_ax2, v_ax3], T.if_then_else(T.int64(1792) <= v_ax1, p29[v_ax0, v_ax1 - T.int64(1792), v_ax2, v_ax3], T.if_then_else(T.int64(1760) <= v_ax1, p28[v_ax0, v_ax1 - T.int64(1760), v_ax2, v_ax3], T.if_then_else(T.int64(1728) <= v_ax1, p27[v_ax0, v_ax1 - T.int64(1728), v_ax2, v_ax3], T.if_then_else(T.int64(1696) <= v_ax1, p26[v_ax0, v_ax1 - T.int64(1696), v_ax2, v_ax3], T.if_then_else(T.int64(1664) <= v_ax1, p25[v_ax0, v_ax1 - T.int64(1664), v_ax2, v_ax3], T.if_then_else(T.int64(1632) <= v_ax1, p24[v_ax0, v_ax1 - T.int64(1632), v_ax2, v_ax3], T.if_then_else(T.int64(1600) <= v_ax1, p23[v_ax0, v_ax1 - T.int64(1600), v_ax2, v_ax3], T.if_then_else(T.int64(1568) <= v_ax1, p22[v_ax0, v_ax1 - T.int64(1568), v_ax2, v_ax3], T.if_then_else(T.int64(1536) <= v_ax1, p21[v_ax0, v_ax1 - T.int64(1536), v_ax2, v_ax3], T.if_then_else(T.int64(1504) <= v_ax1, p20[v_ax0, v_ax1 - T.int64(1504), v_ax2, v_ax3], T.if_then_else(T.int64(1472) <= v_ax1, p19[v_ax0, v_ax1 - T.int64(1472), v_ax2, v_ax3], T.if_then_else(T.int64(1440) <= v_ax1, p18[v_ax0, v_ax1 - T.int64(1440), v_ax2, v_ax3], T.if_then_else(T.int64(1408) <= v_ax1, p17[v_ax0, v_ax1 - T.int64(1408), v_ax2, v_ax3], T.if_then_else(T.int64(1376) <= v_ax1, p16[v_ax0, v_ax1 - T.int64(1376), v_ax2, v_ax3], T.if_then_else(T.int64(1344) <= v_ax1, p15[v_ax0, v_ax1 - T.int64(1344), v_ax2, v_ax3], T.if_then_else(T.int64(1312) <= v_ax1, p14[v_ax0, v_ax1 - T.int64(1312), v_ax2, v_ax3], T.if_then_else(T.int64(1280) <= v_ax1, p13[v_ax0, v_ax1 - T.int64(1280), v_ax2, v_ax3], T.if_then_else(T.int64(1248) <= v_ax1, p12[v_ax0, v_ax1 - T.int64(1248), v_ax2, v_ax3], T.if_then_else(T.int64(1216) <= v_ax1, p11[v_ax0, v_ax1 - T.int64(1216), v_ax2, v_ax3], T.if_then_else(T.int64(1184) <= v_ax1, p10[v_ax0, v_ax1 - T.int64(1184), v_ax2, v_ax3], T.if_then_else(T.int64(1152) <= v_ax1, p9[v_ax0, v_ax1 - T.int64(1152), v_ax2, v_ax3], T.if_then_else(T.int64(1120) <= v_ax1, p8[v_ax0, v_ax1 - T.int64(1120), v_ax2, v_ax3], T.if_then_else(T.int64(1088) <= v_ax1, p7[v_ax0, v_ax1 - T.int64(1088), v_ax2, v_ax3], T.if_then_else(T.int64(1056) <= v_ax1, p6[v_ax0, v_ax1 - T.int64(1056), v_ax2, v_ax3], T.if_then_else(T.int64(1024) <= v_ax1, p5[v_ax0, v_ax1 - T.int64(1024), v_ax2, v_ax3], T.if_then_else(T.int64(992) <= v_ax1, p4[v_ax0, v_ax1 - T.int64(992), v_ax2, v_ax3], T.if_then_else(T.int64(960) <= v_ax1, p3[v_ax0, v_ax1 - T.int64(960), v_ax2, v_ax3], T.if_then_else(T.int64(928) <= v_ax1, p2[v_ax0, v_ax1 - T.int64(928), v_ax2, v_ax3], T.if_then_else(T.int64(896) <= v_ax1, p1[v_ax0, v_ax1 - T.int64(896), v_ax2, v_ax3], p0[v_ax0, v_ax1, v_ax2, v_ax3])))))))))))))))))))))))))))))) * p31[v_ax0, v_ax1, T.int64(0), T.int64(0)] + p32[v_ax0, v_ax1, T.int64(0), T.int64(0)], T.float32(0))
b0 = sch.get_block(name="T_concat", func_name="main")
b1 = sch.get_block(name="T_multiply", func_name="main")
b2 = sch.get_block(name="T_add", func_name="main")
b3 = sch.get_block(name="T_relu", func_name="main")
sch.reverse_compute_inline(block=b3)
sch.reverse_compute_inline(block=b2)
sch.reverse_compute_inline(block=b1)
l4, l5, l6, l7 = sch.get_loops(block=b0)
l8 = sch.fuse(l4, l5, l6, l7, preserve_unit_iters=True)
v9 = sch.sample_categorical(candidates=[32, 64, 128, 256, 512, 1024], probs=[0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666], decision=0)
l10, l11 = sch.split(loop=l8, factors=[None, v9], preserve_unit_iters=True)
sch.bind(loop=l10, thread_axis="blockIdx.x")
sch.bind(loop=l11, thread_axis="threadIdx.x")
sch.enter_postproc()
2024-04-29 20:20:15 [INFO] [task_scheduler.cc:121] [Task #2: fused_concatenate_multiply_add_nn_relu_1] Trial #4: Error in running:
LocalRunner: An exception occurred
Traceback (most recent call last):
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/exec/popen_worker.py", line 87, in main
    result = fn(*args, **kwargs)
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/meta_schedule/runner/local_runner.py", line 152, in _worker_func
    repeated_args: List[T_ARGUMENT_LIST] = f_alloc_argument(
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/meta_schedule/runner/local_runner.py", line 360, in default_alloc_argument
    return alloc_argument_common(f_random_fill, device, args_info, alloc_repeat)
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/meta_schedule/runner/utils.py", line 74, in alloc_argument_common
    arg: Any = dispatcher.get(arg_type, None)(*arg_info)
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/meta_schedule/runner/utils.py", line 56, in alloc_tensor
    arg = ndarray.empty(shape=shape, dtype=dtype, device=device)
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/runtime/ndarray.py", line 391, in empty
    arr = _ffi_api.TVMArrayAllocWithScope(shape, dtype, device, mem_scope)
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/_ffi/_ctypes/packed_func.py", line 239, in __call__
    raise_last_ffi_error()
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/_ffi/base.py", line 481, in raise_last_ffi_error
    raise py_err
tvm.error.InternalError: Traceback (most recent call last):
  5: _ZN3tvm7runtime13PackedFun
  4: tvm::runtime::TypedPackedFunc<tvm::runtime::NDArray (tvm::runtime::ShapeTuple, DLDataType, DLDevice, tvm::runtime::Optional<tvm::runtime::String>)>::AssignTypedLambda<tvm::runtime::NDArray (*)(tvm::runtime::ShapeTuple, DLDataType, DLDevice, tvm::runtime::Optional<tvm::runtime::String>)>(tvm::runtime::NDArray (*)(tvm::runtime::ShapeTuple, DLDataType, DLDevice, tvm::runtime::Optional<tvm::runtime::String>), std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}::operator()(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*) const
  3: tvm::runtime::NDArray::Empty(tvm::runtime::ShapeTuple, DLDataType, DLDevice, tvm::runtime::Optional<tvm::runtime::String>)
  2: tvm::runtime::DeviceAPI::AllocDataSpace(DLDevice, int, long const*, DLDataType, tvm::runtime::Optional<tvm::runtime::String>)
  1: tvm::runtime::CUDADeviceAPI::AllocDataSpace(DLDevice, unsigned long, unsigned long, DLDataType)
  0: _ZN3tvm7runtime6deta
  File "/mnt/home/gverma/ceph/opt/tvm/src/runtime/cuda/cuda_device_api.cc", line 126
InternalError: Check failed: (e == cudaSuccess || e == cudaErrorCudartUnloading) is false: CUDA: misaligned address

# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(896), T.int64(7), T.int64(7)), "float32"), p1: T.Buffer((T.int64(1), T.int64(32), T.int64(7), T.int64(7)), "float32"), p2: T.Buffer((T.int64(1), T.int64(32), T.int64(7), T.int64(7)), "float32"), p3: T.Buffer((T.int64(1), T.int64(32), T.int64(7), T.int64(7)), "float32"), p4: T.Buffer((T.int64(1), T.int64(32), T.int64(7), T.int64(7)), "float32"), p5: T.Buffer((T.int64(1), T.int64(32), T.int64(7), T.int64(7)), "float32"), p6: T.Buffer((T.int64(1), T.int64(32), T.int64(7), T.int64(7)), "float32"), p7: T.Buffer((T.int64(1), T.int64(32), T.int64(7), T.int64(7)), "float32"), p8: T.Buffer((T.int64(1), T.int64(32), T.int64(7), T.int64(7)), "float32"), p9: T.Buffer((T.int64(1), T.int64(32), T.int64(7), T.int64(7)), "float32"), p10: T.Buffer((T.int64(1), T.int64(32), T.int64(7), T.int64(7)), "float32"), p11: T.Buffer((T.int64(1), T.int64(32), T.int64(7), T.int64(7)), "float32"), p12: T.Buffer((T.int64(1), T.int64(32), T.int64(7), T.int64(7)), "float32"), p13: T.Buffer((T.int64(1), T.int64(32), T.int64(7), T.int64(7)), "float32"), p14: T.Buffer((T.int64(1), T.int64(32), T.int64(7), T.int64(7)), "float32"), p15: T.Buffer((T.int64(1), T.int64(32), T.int64(7), T.int64(7)), "float32"), p16: T.Buffer((T.int64(1), T.int64(32), T.int64(7), T.int64(7)), "float32"), p17: T.Buffer((T.int64(1), T.int64(32), T.int64(7), T.int64(7)), "float32"), p18: T.Buffer((T.int64(1), T.int64(32), T.int64(7), T.int64(7)), "float32"), p19: T.Buffer((T.int64(1), T.int64(32), T.int64(7), T.int64(7)), "float32"), p20: T.Buffer((T.int64(1), T.int64(32), T.int64(7), T.int64(7)), "float32"), p21: T.Buffer((T.int64(1), T.int64(32), T.int64(7), T.int64(7)), "float32"), p22: T.Buffer((T.int64(1), T.int64(32), T.int64(7), T.int64(7)), "float32"), p23: T.Buffer((T.int64(1), T.int64(32), T.int64(7), T.int64(7)), "float32"), p24: T.Buffer((T.int64(1), T.int64(32), T.int64(7), T.int64(7)), "float32"), p25: T.Buffer((T.int64(1), T.int64(32), T.int64(7), T.int64(7)), "float32"), p26: T.Buffer((T.int64(1), T.int64(32), T.int64(7), T.int64(7)), "float32"), p27: T.Buffer((T.int64(1), T.int64(32), T.int64(7), T.int64(7)), "float32"), p28: T.Buffer((T.int64(1), T.int64(32), T.int64(7), T.int64(7)), "float32"), p29: T.Buffer((T.int64(1), T.int64(32), T.int64(7), T.int64(7)), "float32"), p30: T.Buffer((T.int64(1), T.int64(32), T.int64(7), T.int64(7)), "float32"), p31: T.Buffer((T.int64(1), T.int64(1856), T.int64(1), T.int64(1)), "float32"), p32: T.Buffer((T.int64(1), T.int64(1856), T.int64(1), T.int64(1)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(1856), T.int64(7), T.int64(7)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        for ax0_ax1_ax2_ax3_fused_0 in T.thread_binding(T.int64(711), thread="blockIdx.x"):
            for ax0_ax1_ax2_ax3_fused_1 in T.thread_binding(T.int64(128), thread="threadIdx.x"):
                with T.block("T_concat"):
                    v_ax0 = T.axis.spatial(T.int64(1), T.int64(0))
                    v_ax1 = T.axis.spatial(T.int64(1856), (ax0_ax1_ax2_ax3_fused_0 * T.int64(128) + ax0_ax1_ax2_ax3_fused_1) // T.int64(49))
                    v_ax2 = T.axis.spatial(T.int64(7), (ax0_ax1_ax2_ax3_fused_0 * T.int64(128) + ax0_ax1_ax2_ax3_fused_1) % T.int64(49) // T.int64(7))
                    v_ax3 = T.axis.spatial(T.int64(7), (ax0_ax1_ax2_ax3_fused_0 * T.int64(128) + ax0_ax1_ax2_ax3_fused_1) % T.int64(7))
                    T.where(ax0_ax1_ax2_ax3_fused_0 * T.int64(128) + ax0_ax1_ax2_ax3_fused_1 < T.int64(90944))
                    T.reads(p30[v_ax0, v_ax1 - T.int64(1824), v_ax2, v_ax3], p29[v_ax0, v_ax1 - T.int64(1792), v_ax2, v_ax3], p28[v_ax0, v_ax1 - T.int64(1760), v_ax2, v_ax3], p27[v_ax0, v_ax1 - T.int64(1728), v_ax2, v_ax3], p26[v_ax0, v_ax1 - T.int64(1696), v_ax2, v_ax3], p25[v_ax0, v_ax1 - T.int64(1664), v_ax2, v_ax3], p24[v_ax0, v_ax1 - T.int64(1632), v_ax2, v_ax3], p23[v_ax0, v_ax1 - T.int64(1600), v_ax2, v_ax3], p22[v_ax0, v_ax1 - T.int64(1568), v_ax2, v_ax3], p21[v_ax0, v_ax1 - T.int64(1536), v_ax2, v_ax3], p20[v_ax0, v_ax1 - T.int64(1504), v_ax2, v_ax3], p19[v_ax0, v_ax1 - T.int64(1472), v_ax2, v_ax3], p18[v_ax0, v_ax1 - T.int64(1440), v_ax2, v_ax3], p17[v_ax0, v_ax1 - T.int64(1408), v_ax2, v_ax3], p16[v_ax0, v_ax1 - T.int64(1376), v_ax2, v_ax3], p15[v_ax0, v_ax1 - T.int64(1344), v_ax2, v_ax3], p14[v_ax0, v_ax1 - T.int64(1312), v_ax2, v_ax3], p13[v_ax0, v_ax1 - T.int64(1280), v_ax2, v_ax3], p12[v_ax0, v_ax1 - T.int64(1248), v_ax2, v_ax3], p11[v_ax0, v_ax1 - T.int64(1216), v_ax2, v_ax3], p10[v_ax0, v_ax1 - T.int64(1184), v_ax2, v_ax3], p9[v_ax0, v_ax1 - T.int64(1152), v_ax2, v_ax3], p8[v_ax0, v_ax1 - T.int64(1120), v_ax2, v_ax3], p7[v_ax0, v_ax1 - T.int64(1088), v_ax2, v_ax3], p6[v_ax0, v_ax1 - T.int64(1056), v_ax2, v_ax3], p5[v_ax0, v_ax1 - T.int64(1024), v_ax2, v_ax3], p4[v_ax0, v_ax1 - T.int64(992), v_ax2, v_ax3], p3[v_ax0, v_ax1 - T.int64(960), v_ax2, v_ax3], p2[v_ax0, v_ax1 - T.int64(928), v_ax2, v_ax3], p1[v_ax0, v_ax1 - T.int64(896), v_ax2, v_ax3], p0[v_ax0, v_ax1, v_ax2, v_ax3], p31[v_ax0, v_ax1, T.int64(0), T.int64(0)], p32[v_ax0, v_ax1, T.int64(0), T.int64(0)])
                    T.writes(T_relu[v_ax0, v_ax1, v_ax2, v_ax3])
                    T_relu[v_ax0, v_ax1, v_ax2, v_ax3] = T.max(T.if_then_else(T.int64(1824) <= v_ax1, p30[v_ax0, v_ax1 - T.int64(1824), v_ax2, v_ax3], T.if_then_else(T.int64(1792) <= v_ax1, p29[v_ax0, v_ax1 - T.int64(1792), v_ax2, v_ax3], T.if_then_else(T.int64(1760) <= v_ax1, p28[v_ax0, v_ax1 - T.int64(1760), v_ax2, v_ax3], T.if_then_else(T.int64(1728) <= v_ax1, p27[v_ax0, v_ax1 - T.int64(1728), v_ax2, v_ax3], T.if_then_else(T.int64(1696) <= v_ax1, p26[v_ax0, v_ax1 - T.int64(1696), v_ax2, v_ax3], T.if_then_else(T.int64(1664) <= v_ax1, p25[v_ax0, v_ax1 - T.int64(1664), v_ax2, v_ax3], T.if_then_else(T.int64(1632) <= v_ax1, p24[v_ax0, v_ax1 - T.int64(1632), v_ax2, v_ax3], T.if_then_else(T.int64(1600) <= v_ax1, p23[v_ax0, v_ax1 - T.int64(1600), v_ax2, v_ax3], T.if_then_else(T.int64(1568) <= v_ax1, p22[v_ax0, v_ax1 - T.int64(1568), v_ax2, v_ax3], T.if_then_else(T.int64(1536) <= v_ax1, p21[v_ax0, v_ax1 - T.int64(1536), v_ax2, v_ax3], T.if_then_else(T.int64(1504) <= v_ax1, p20[v_ax0, v_ax1 - T.int64(1504), v_ax2, v_ax3], T.if_then_else(T.int64(1472) <= v_ax1, p19[v_ax0, v_ax1 - T.int64(1472), v_ax2, v_ax3], T.if_then_else(T.int64(1440) <= v_ax1, p18[v_ax0, v_ax1 - T.int64(1440), v_ax2, v_ax3], T.if_then_else(T.int64(1408) <= v_ax1, p17[v_ax0, v_ax1 - T.int64(1408), v_ax2, v_ax3], T.if_then_else(T.int64(1376) <= v_ax1, p16[v_ax0, v_ax1 - T.int64(1376), v_ax2, v_ax3], T.if_then_else(T.int64(1344) <= v_ax1, p15[v_ax0, v_ax1 - T.int64(1344), v_ax2, v_ax3], T.if_then_else(T.int64(1312) <= v_ax1, p14[v_ax0, v_ax1 - T.int64(1312), v_ax2, v_ax3], T.if_then_else(T.int64(1280) <= v_ax1, p13[v_ax0, v_ax1 - T.int64(1280), v_ax2, v_ax3], T.if_then_else(T.int64(1248) <= v_ax1, p12[v_ax0, v_ax1 - T.int64(1248), v_ax2, v_ax3], T.if_then_else(T.int64(1216) <= v_ax1, p11[v_ax0, v_ax1 - T.int64(1216), v_ax2, v_ax3], T.if_then_else(T.int64(1184) <= v_ax1, p10[v_ax0, v_ax1 - T.int64(1184), v_ax2, v_ax3], T.if_then_else(T.int64(1152) <= v_ax1, p9[v_ax0, v_ax1 - T.int64(1152), v_ax2, v_ax3], T.if_then_else(T.int64(1120) <= v_ax1, p8[v_ax0, v_ax1 - T.int64(1120), v_ax2, v_ax3], T.if_then_else(T.int64(1088) <= v_ax1, p7[v_ax0, v_ax1 - T.int64(1088), v_ax2, v_ax3], T.if_then_else(T.int64(1056) <= v_ax1, p6[v_ax0, v_ax1 - T.int64(1056), v_ax2, v_ax3], T.if_then_else(T.int64(1024) <= v_ax1, p5[v_ax0, v_ax1 - T.int64(1024), v_ax2, v_ax3], T.if_then_else(T.int64(992) <= v_ax1, p4[v_ax0, v_ax1 - T.int64(992), v_ax2, v_ax3], T.if_then_else(T.int64(960) <= v_ax1, p3[v_ax0, v_ax1 - T.int64(960), v_ax2, v_ax3], T.if_then_else(T.int64(928) <= v_ax1, p2[v_ax0, v_ax1 - T.int64(928), v_ax2, v_ax3], T.if_then_else(T.int64(896) <= v_ax1, p1[v_ax0, v_ax1 - T.int64(896), v_ax2, v_ax3], p0[v_ax0, v_ax1, v_ax2, v_ax3])))))))))))))))))))))))))))))) * p31[v_ax0, v_ax1, T.int64(0), T.int64(0)] + p32[v_ax0, v_ax1, T.int64(0), T.int64(0)], T.float32(0))
b0 = sch.get_block(name="T_concat", func_name="main")
b1 = sch.get_block(name="T_multiply", func_name="main")
b2 = sch.get_block(name="T_add", func_name="main")
b3 = sch.get_block(name="T_relu", func_name="main")
sch.reverse_compute_inline(block=b3)
sch.reverse_compute_inline(block=b2)
sch.reverse_compute_inline(block=b1)
l4, l5, l6, l7 = sch.get_loops(block=b0)
l8 = sch.fuse(l4, l5, l6, l7, preserve_unit_iters=True)
v9 = sch.sample_categorical(candidates=[32, 64, 128, 256, 512, 1024], probs=[0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666], decision=2)
l10, l11 = sch.split(loop=l8, factors=[None, v9], preserve_unit_iters=True)
sch.bind(loop=l10, thread_axis="blockIdx.x")
sch.bind(loop=l11, thread_axis="threadIdx.x")
sch.enter_postproc()
2024-04-29 20:20:15 [INFO] [task_scheduler.cc:121] [Task #2: fused_concatenate_multiply_add_nn_relu_1] Trial #5: Error in running:
LocalRunner: An exception occurred
Traceback (most recent call last):
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/exec/popen_worker.py", line 87, in main
    result = fn(*args, **kwargs)
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/meta_schedule/runner/local_runner.py", line 152, in _worker_func
    repeated_args: List[T_ARGUMENT_LIST] = f_alloc_argument(
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/meta_schedule/runner/local_runner.py", line 360, in default_alloc_argument
    return alloc_argument_common(f_random_fill, device, args_info, alloc_repeat)
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/meta_schedule/runner/utils.py", line 74, in alloc_argument_common
    arg: Any = dispatcher.get(arg_type, None)(*arg_info)
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/meta_schedule/runner/utils.py", line 56, in alloc_tensor
    arg = ndarray.empty(shape=shape, dtype=dtype, device=device)
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/runtime/ndarray.py", line 391, in empty
    arr = _ffi_api.TVMArrayAllocWithScope(shape, dtype, device, mem_scope)
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/_ffi/_ctypes/packed_func.py", line 239, in __call__
    raise_last_ffi_error()
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/_ffi/base.py", line 481, in raise_last_ffi_error
    raise py_err
tvm.error.InternalError: Traceback (most recent call last):
  5: _ZN3tvm7runtime13PackedFun
  4: tvm::runtime::TypedPackedFunc<tvm::runtime::NDArray (tvm::runtime::ShapeTuple, DLDataType, DLDevice, tvm::runtime::Optional<tvm::runtime::String>)>::AssignTypedLambda<tvm::runtime::NDArray (*)(tvm::runtime::ShapeTuple, DLDataType, DLDevice, tvm::runtime::Optional<tvm::runtime::String>)>(tvm::runtime::NDArray (*)(tvm::runtime::ShapeTuple, DLDataType, DLDevice, tvm::runtime::Optional<tvm::runtime::String>), std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}::operator()(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*) const
  3: tvm::runtime::NDArray::Empty(tvm::runtime::ShapeTuple, DLDataType, DLDevice, tvm::runtime::Optional<tvm::runtime::String>)
  2: tvm::runtime::DeviceAPI::AllocDataSpace(DLDevice, int, long const*, DLDataType, tvm::runtime::Optional<tvm::runtime::String>)
  1: tvm::runtime::CUDADeviceAPI::AllocDataSpace(DLDevice, unsigned long, unsigned long, DLDataType)
  0: _ZN3tvm7runtime6deta
  File "/mnt/home/gverma/ceph/opt/tvm/src/runtime/cuda/cuda_device_api.cc", line 126
InternalError: Check failed: (e == cudaSuccess || e == cudaErrorCudartUnloading) is false: CUDA: misaligned address

# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(896), T.int64(7), T.int64(7)), "float32"), p1: T.Buffer((T.int64(1), T.int64(32), T.int64(7), T.int64(7)), "float32"), p2: T.Buffer((T.int64(1), T.int64(32), T.int64(7), T.int64(7)), "float32"), p3: T.Buffer((T.int64(1), T.int64(32), T.int64(7), T.int64(7)), "float32"), p4: T.Buffer((T.int64(1), T.int64(32), T.int64(7), T.int64(7)), "float32"), p5: T.Buffer((T.int64(1), T.int64(32), T.int64(7), T.int64(7)), "float32"), p6: T.Buffer((T.int64(1), T.int64(32), T.int64(7), T.int64(7)), "float32"), p7: T.Buffer((T.int64(1), T.int64(32), T.int64(7), T.int64(7)), "float32"), p8: T.Buffer((T.int64(1), T.int64(32), T.int64(7), T.int64(7)), "float32"), p9: T.Buffer((T.int64(1), T.int64(32), T.int64(7), T.int64(7)), "float32"), p10: T.Buffer((T.int64(1), T.int64(32), T.int64(7), T.int64(7)), "float32"), p11: T.Buffer((T.int64(1), T.int64(32), T.int64(7), T.int64(7)), "float32"), p12: T.Buffer((T.int64(1), T.int64(32), T.int64(7), T.int64(7)), "float32"), p13: T.Buffer((T.int64(1), T.int64(32), T.int64(7), T.int64(7)), "float32"), p14: T.Buffer((T.int64(1), T.int64(32), T.int64(7), T.int64(7)), "float32"), p15: T.Buffer((T.int64(1), T.int64(32), T.int64(7), T.int64(7)), "float32"), p16: T.Buffer((T.int64(1), T.int64(32), T.int64(7), T.int64(7)), "float32"), p17: T.Buffer((T.int64(1), T.int64(32), T.int64(7), T.int64(7)), "float32"), p18: T.Buffer((T.int64(1), T.int64(32), T.int64(7), T.int64(7)), "float32"), p19: T.Buffer((T.int64(1), T.int64(32), T.int64(7), T.int64(7)), "float32"), p20: T.Buffer((T.int64(1), T.int64(32), T.int64(7), T.int64(7)), "float32"), p21: T.Buffer((T.int64(1), T.int64(32), T.int64(7), T.int64(7)), "float32"), p22: T.Buffer((T.int64(1), T.int64(32), T.int64(7), T.int64(7)), "float32"), p23: T.Buffer((T.int64(1), T.int64(32), T.int64(7), T.int64(7)), "float32"), p24: T.Buffer((T.int64(1), T.int64(32), T.int64(7), T.int64(7)), "float32"), p25: T.Buffer((T.int64(1), T.int64(32), T.int64(7), T.int64(7)), "float32"), p26: T.Buffer((T.int64(1), T.int64(32), T.int64(7), T.int64(7)), "float32"), p27: T.Buffer((T.int64(1), T.int64(32), T.int64(7), T.int64(7)), "float32"), p28: T.Buffer((T.int64(1), T.int64(32), T.int64(7), T.int64(7)), "float32"), p29: T.Buffer((T.int64(1), T.int64(32), T.int64(7), T.int64(7)), "float32"), p30: T.Buffer((T.int64(1), T.int64(32), T.int64(7), T.int64(7)), "float32"), p31: T.Buffer((T.int64(1), T.int64(1856), T.int64(1), T.int64(1)), "float32"), p32: T.Buffer((T.int64(1), T.int64(1856), T.int64(1), T.int64(1)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(1856), T.int64(7), T.int64(7)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        for ax0_ax1_ax2_ax3_fused_0 in T.thread_binding(T.int64(1421), thread="blockIdx.x"):
            for ax0_ax1_ax2_ax3_fused_1 in T.thread_binding(T.int64(64), thread="threadIdx.x"):
                with T.block("T_concat"):
                    v_ax0 = T.axis.spatial(T.int64(1), T.int64(0))
                    v_ax1 = T.axis.spatial(T.int64(1856), (ax0_ax1_ax2_ax3_fused_0 * T.int64(64) + ax0_ax1_ax2_ax3_fused_1) // T.int64(49))
                    v_ax2 = T.axis.spatial(T.int64(7), (ax0_ax1_ax2_ax3_fused_0 * T.int64(64) + ax0_ax1_ax2_ax3_fused_1) % T.int64(49) // T.int64(7))
                    v_ax3 = T.axis.spatial(T.int64(7), (ax0_ax1_ax2_ax3_fused_0 * T.int64(64) + ax0_ax1_ax2_ax3_fused_1) % T.int64(7))
                    T.reads(p30[v_ax0, v_ax1 - T.int64(1824), v_ax2, v_ax3], p29[v_ax0, v_ax1 - T.int64(1792), v_ax2, v_ax3], p28[v_ax0, v_ax1 - T.int64(1760), v_ax2, v_ax3], p27[v_ax0, v_ax1 - T.int64(1728), v_ax2, v_ax3], p26[v_ax0, v_ax1 - T.int64(1696), v_ax2, v_ax3], p25[v_ax0, v_ax1 - T.int64(1664), v_ax2, v_ax3], p24[v_ax0, v_ax1 - T.int64(1632), v_ax2, v_ax3], p23[v_ax0, v_ax1 - T.int64(1600), v_ax2, v_ax3], p22[v_ax0, v_ax1 - T.int64(1568), v_ax2, v_ax3], p21[v_ax0, v_ax1 - T.int64(1536), v_ax2, v_ax3], p20[v_ax0, v_ax1 - T.int64(1504), v_ax2, v_ax3], p19[v_ax0, v_ax1 - T.int64(1472), v_ax2, v_ax3], p18[v_ax0, v_ax1 - T.int64(1440), v_ax2, v_ax3], p17[v_ax0, v_ax1 - T.int64(1408), v_ax2, v_ax3], p16[v_ax0, v_ax1 - T.int64(1376), v_ax2, v_ax3], p15[v_ax0, v_ax1 - T.int64(1344), v_ax2, v_ax3], p14[v_ax0, v_ax1 - T.int64(1312), v_ax2, v_ax3], p13[v_ax0, v_ax1 - T.int64(1280), v_ax2, v_ax3], p12[v_ax0, v_ax1 - T.int64(1248), v_ax2, v_ax3], p11[v_ax0, v_ax1 - T.int64(1216), v_ax2, v_ax3], p10[v_ax0, v_ax1 - T.int64(1184), v_ax2, v_ax3], p9[v_ax0, v_ax1 - T.int64(1152), v_ax2, v_ax3], p8[v_ax0, v_ax1 - T.int64(1120), v_ax2, v_ax3], p7[v_ax0, v_ax1 - T.int64(1088), v_ax2, v_ax3], p6[v_ax0, v_ax1 - T.int64(1056), v_ax2, v_ax3], p5[v_ax0, v_ax1 - T.int64(1024), v_ax2, v_ax3], p4[v_ax0, v_ax1 - T.int64(992), v_ax2, v_ax3], p3[v_ax0, v_ax1 - T.int64(960), v_ax2, v_ax3], p2[v_ax0, v_ax1 - T.int64(928), v_ax2, v_ax3], p1[v_ax0, v_ax1 - T.int64(896), v_ax2, v_ax3], p0[v_ax0, v_ax1, v_ax2, v_ax3], p31[v_ax0, v_ax1, T.int64(0), T.int64(0)], p32[v_ax0, v_ax1, T.int64(0), T.int64(0)])
                    T.writes(T_relu[v_ax0, v_ax1, v_ax2, v_ax3])
                    T_relu[v_ax0, v_ax1, v_ax2, v_ax3] = T.max(T.if_then_else(T.int64(1824) <= v_ax1, p30[v_ax0, v_ax1 - T.int64(1824), v_ax2, v_ax3], T.if_then_else(T.int64(1792) <= v_ax1, p29[v_ax0, v_ax1 - T.int64(1792), v_ax2, v_ax3], T.if_then_else(T.int64(1760) <= v_ax1, p28[v_ax0, v_ax1 - T.int64(1760), v_ax2, v_ax3], T.if_then_else(T.int64(1728) <= v_ax1, p27[v_ax0, v_ax1 - T.int64(1728), v_ax2, v_ax3], T.if_then_else(T.int64(1696) <= v_ax1, p26[v_ax0, v_ax1 - T.int64(1696), v_ax2, v_ax3], T.if_then_else(T.int64(1664) <= v_ax1, p25[v_ax0, v_ax1 - T.int64(1664), v_ax2, v_ax3], T.if_then_else(T.int64(1632) <= v_ax1, p24[v_ax0, v_ax1 - T.int64(1632), v_ax2, v_ax3], T.if_then_else(T.int64(1600) <= v_ax1, p23[v_ax0, v_ax1 - T.int64(1600), v_ax2, v_ax3], T.if_then_else(T.int64(1568) <= v_ax1, p22[v_ax0, v_ax1 - T.int64(1568), v_ax2, v_ax3], T.if_then_else(T.int64(1536) <= v_ax1, p21[v_ax0, v_ax1 - T.int64(1536), v_ax2, v_ax3], T.if_then_else(T.int64(1504) <= v_ax1, p20[v_ax0, v_ax1 - T.int64(1504), v_ax2, v_ax3], T.if_then_else(T.int64(1472) <= v_ax1, p19[v_ax0, v_ax1 - T.int64(1472), v_ax2, v_ax3], T.if_then_else(T.int64(1440) <= v_ax1, p18[v_ax0, v_ax1 - T.int64(1440), v_ax2, v_ax3], T.if_then_else(T.int64(1408) <= v_ax1, p17[v_ax0, v_ax1 - T.int64(1408), v_ax2, v_ax3], T.if_then_else(T.int64(1376) <= v_ax1, p16[v_ax0, v_ax1 - T.int64(1376), v_ax2, v_ax3], T.if_then_else(T.int64(1344) <= v_ax1, p15[v_ax0, v_ax1 - T.int64(1344), v_ax2, v_ax3], T.if_then_else(T.int64(1312) <= v_ax1, p14[v_ax0, v_ax1 - T.int64(1312), v_ax2, v_ax3], T.if_then_else(T.int64(1280) <= v_ax1, p13[v_ax0, v_ax1 - T.int64(1280), v_ax2, v_ax3], T.if_then_else(T.int64(1248) <= v_ax1, p12[v_ax0, v_ax1 - T.int64(1248), v_ax2, v_ax3], T.if_then_else(T.int64(1216) <= v_ax1, p11[v_ax0, v_ax1 - T.int64(1216), v_ax2, v_ax3], T.if_then_else(T.int64(1184) <= v_ax1, p10[v_ax0, v_ax1 - T.int64(1184), v_ax2, v_ax3], T.if_then_else(T.int64(1152) <= v_ax1, p9[v_ax0, v_ax1 - T.int64(1152), v_ax2, v_ax3], T.if_then_else(T.int64(1120) <= v_ax1, p8[v_ax0, v_ax1 - T.int64(1120), v_ax2, v_ax3], T.if_then_else(T.int64(1088) <= v_ax1, p7[v_ax0, v_ax1 - T.int64(1088), v_ax2, v_ax3], T.if_then_else(T.int64(1056) <= v_ax1, p6[v_ax0, v_ax1 - T.int64(1056), v_ax2, v_ax3], T.if_then_else(T.int64(1024) <= v_ax1, p5[v_ax0, v_ax1 - T.int64(1024), v_ax2, v_ax3], T.if_then_else(T.int64(992) <= v_ax1, p4[v_ax0, v_ax1 - T.int64(992), v_ax2, v_ax3], T.if_then_else(T.int64(960) <= v_ax1, p3[v_ax0, v_ax1 - T.int64(960), v_ax2, v_ax3], T.if_then_else(T.int64(928) <= v_ax1, p2[v_ax0, v_ax1 - T.int64(928), v_ax2, v_ax3], T.if_then_else(T.int64(896) <= v_ax1, p1[v_ax0, v_ax1 - T.int64(896), v_ax2, v_ax3], p0[v_ax0, v_ax1, v_ax2, v_ax3])))))))))))))))))))))))))))))) * p31[v_ax0, v_ax1, T.int64(0), T.int64(0)] + p32[v_ax0, v_ax1, T.int64(0), T.int64(0)], T.float32(0))
b0 = sch.get_block(name="T_concat", func_name="main")
b1 = sch.get_block(name="T_multiply", func_name="main")
b2 = sch.get_block(name="T_add", func_name="main")
b3 = sch.get_block(name="T_relu", func_name="main")
sch.reverse_compute_inline(block=b3)
sch.reverse_compute_inline(block=b2)
sch.reverse_compute_inline(block=b1)
l4, l5, l6, l7 = sch.get_loops(block=b0)
l8 = sch.fuse(l4, l5, l6, l7, preserve_unit_iters=True)
v9 = sch.sample_categorical(candidates=[32, 64, 128, 256, 512, 1024], probs=[0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666], decision=1)
l10, l11 = sch.split(loop=l8, factors=[None, v9], preserve_unit_iters=True)
sch.bind(loop=l10, thread_axis="blockIdx.x")
sch.bind(loop=l11, thread_axis="threadIdx.x")
sch.enter_postproc()
2024-04-29 20:20:15 [INFO] [task_scheduler.cc:121] [Task #2: fused_concatenate_multiply_add_nn_relu_1] Trial #6: Error in running:
LocalRunner: An exception occurred
Traceback (most recent call last):
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/exec/popen_worker.py", line 87, in main
    result = fn(*args, **kwargs)
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/meta_schedule/runner/local_runner.py", line 152, in _worker_func
    repeated_args: List[T_ARGUMENT_LIST] = f_alloc_argument(
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/meta_schedule/runner/local_runner.py", line 360, in default_alloc_argument
    return alloc_argument_common(f_random_fill, device, args_info, alloc_repeat)
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/meta_schedule/runner/utils.py", line 74, in alloc_argument_common
    arg: Any = dispatcher.get(arg_type, None)(*arg_info)
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/meta_schedule/runner/utils.py", line 56, in alloc_tensor
    arg = ndarray.empty(shape=shape, dtype=dtype, device=device)
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/runtime/ndarray.py", line 391, in empty
    arr = _ffi_api.TVMArrayAllocWithScope(shape, dtype, device, mem_scope)
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/_ffi/_ctypes/packed_func.py", line 239, in __call__
    raise_last_ffi_error()
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/_ffi/base.py", line 481, in raise_last_ffi_error
    raise py_err
tvm.error.InternalError: Traceback (most recent call last):
  5: _ZN3tvm7runtime13PackedFun
  4: tvm::runtime::TypedPackedFunc<tvm::runtime::NDArray (tvm::runtime::ShapeTuple, DLDataType, DLDevice, tvm::runtime::Optional<tvm::runtime::String>)>::AssignTypedLambda<tvm::runtime::NDArray (*)(tvm::runtime::ShapeTuple, DLDataType, DLDevice, tvm::runtime::Optional<tvm::runtime::String>)>(tvm::runtime::NDArray (*)(tvm::runtime::ShapeTuple, DLDataType, DLDevice, tvm::runtime::Optional<tvm::runtime::String>), std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}::operator()(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*) const
  3: tvm::runtime::NDArray::Empty(tvm::runtime::ShapeTuple, DLDataType, DLDevice, tvm::runtime::Optional<tvm::runtime::String>)
  2: tvm::runtime::DeviceAPI::AllocDataSpace(DLDevice, int, long const*, DLDataType, tvm::runtime::Optional<tvm::runtime::String>)
  1: tvm::runtime::CUDADeviceAPI::AllocDataSpace(DLDevice, unsigned long, unsigned long, DLDataType)
  0: _ZN3tvm7runtime6deta
  File "/mnt/home/gverma/ceph/opt/tvm/src/runtime/cuda/cuda_device_api.cc", line 126
InternalError: Check failed: (e == cudaSuccess || e == cudaErrorCudartUnloading) is false: CUDA: misaligned address

# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(896), T.int64(7), T.int64(7)), "float32"), p1: T.Buffer((T.int64(1), T.int64(32), T.int64(7), T.int64(7)), "float32"), p2: T.Buffer((T.int64(1), T.int64(32), T.int64(7), T.int64(7)), "float32"), p3: T.Buffer((T.int64(1), T.int64(32), T.int64(7), T.int64(7)), "float32"), p4: T.Buffer((T.int64(1), T.int64(32), T.int64(7), T.int64(7)), "float32"), p5: T.Buffer((T.int64(1), T.int64(32), T.int64(7), T.int64(7)), "float32"), p6: T.Buffer((T.int64(1), T.int64(32), T.int64(7), T.int64(7)), "float32"), p7: T.Buffer((T.int64(1), T.int64(32), T.int64(7), T.int64(7)), "float32"), p8: T.Buffer((T.int64(1), T.int64(32), T.int64(7), T.int64(7)), "float32"), p9: T.Buffer((T.int64(1), T.int64(32), T.int64(7), T.int64(7)), "float32"), p10: T.Buffer((T.int64(1), T.int64(32), T.int64(7), T.int64(7)), "float32"), p11: T.Buffer((T.int64(1), T.int64(32), T.int64(7), T.int64(7)), "float32"), p12: T.Buffer((T.int64(1), T.int64(32), T.int64(7), T.int64(7)), "float32"), p13: T.Buffer((T.int64(1), T.int64(32), T.int64(7), T.int64(7)), "float32"), p14: T.Buffer((T.int64(1), T.int64(32), T.int64(7), T.int64(7)), "float32"), p15: T.Buffer((T.int64(1), T.int64(32), T.int64(7), T.int64(7)), "float32"), p16: T.Buffer((T.int64(1), T.int64(32), T.int64(7), T.int64(7)), "float32"), p17: T.Buffer((T.int64(1), T.int64(32), T.int64(7), T.int64(7)), "float32"), p18: T.Buffer((T.int64(1), T.int64(32), T.int64(7), T.int64(7)), "float32"), p19: T.Buffer((T.int64(1), T.int64(32), T.int64(7), T.int64(7)), "float32"), p20: T.Buffer((T.int64(1), T.int64(32), T.int64(7), T.int64(7)), "float32"), p21: T.Buffer((T.int64(1), T.int64(32), T.int64(7), T.int64(7)), "float32"), p22: T.Buffer((T.int64(1), T.int64(32), T.int64(7), T.int64(7)), "float32"), p23: T.Buffer((T.int64(1), T.int64(32), T.int64(7), T.int64(7)), "float32"), p24: T.Buffer((T.int64(1), T.int64(32), T.int64(7), T.int64(7)), "float32"), p25: T.Buffer((T.int64(1), T.int64(32), T.int64(7), T.int64(7)), "float32"), p26: T.Buffer((T.int64(1), T.int64(32), T.int64(7), T.int64(7)), "float32"), p27: T.Buffer((T.int64(1), T.int64(32), T.int64(7), T.int64(7)), "float32"), p28: T.Buffer((T.int64(1), T.int64(32), T.int64(7), T.int64(7)), "float32"), p29: T.Buffer((T.int64(1), T.int64(32), T.int64(7), T.int64(7)), "float32"), p30: T.Buffer((T.int64(1), T.int64(32), T.int64(7), T.int64(7)), "float32"), p31: T.Buffer((T.int64(1), T.int64(1856), T.int64(1), T.int64(1)), "float32"), p32: T.Buffer((T.int64(1), T.int64(1856), T.int64(1), T.int64(1)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(1856), T.int64(7), T.int64(7)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        for ax0_ax1_ax2_ax3_fused_0 in T.thread_binding(T.int64(178), thread="blockIdx.x"):
            for ax0_ax1_ax2_ax3_fused_1 in T.thread_binding(T.int64(512), thread="threadIdx.x"):
                with T.block("T_concat"):
                    v_ax0 = T.axis.spatial(T.int64(1), T.int64(0))
                    v_ax1 = T.axis.spatial(T.int64(1856), (ax0_ax1_ax2_ax3_fused_0 * T.int64(512) + ax0_ax1_ax2_ax3_fused_1) // T.int64(49))
                    v_ax2 = T.axis.spatial(T.int64(7), (ax0_ax1_ax2_ax3_fused_0 * T.int64(512) + ax0_ax1_ax2_ax3_fused_1) % T.int64(49) // T.int64(7))
                    v_ax3 = T.axis.spatial(T.int64(7), (ax0_ax1_ax2_ax3_fused_0 * T.int64(512) + ax0_ax1_ax2_ax3_fused_1) % T.int64(7))
                    T.where(ax0_ax1_ax2_ax3_fused_0 * T.int64(512) + ax0_ax1_ax2_ax3_fused_1 < T.int64(90944))
                    T.reads(p30[v_ax0, v_ax1 - T.int64(1824), v_ax2, v_ax3], p29[v_ax0, v_ax1 - T.int64(1792), v_ax2, v_ax3], p28[v_ax0, v_ax1 - T.int64(1760), v_ax2, v_ax3], p27[v_ax0, v_ax1 - T.int64(1728), v_ax2, v_ax3], p26[v_ax0, v_ax1 - T.int64(1696), v_ax2, v_ax3], p25[v_ax0, v_ax1 - T.int64(1664), v_ax2, v_ax3], p24[v_ax0, v_ax1 - T.int64(1632), v_ax2, v_ax3], p23[v_ax0, v_ax1 - T.int64(1600), v_ax2, v_ax3], p22[v_ax0, v_ax1 - T.int64(1568), v_ax2, v_ax3], p21[v_ax0, v_ax1 - T.int64(1536), v_ax2, v_ax3], p20[v_ax0, v_ax1 - T.int64(1504), v_ax2, v_ax3], p19[v_ax0, v_ax1 - T.int64(1472), v_ax2, v_ax3], p18[v_ax0, v_ax1 - T.int64(1440), v_ax2, v_ax3], p17[v_ax0, v_ax1 - T.int64(1408), v_ax2, v_ax3], p16[v_ax0, v_ax1 - T.int64(1376), v_ax2, v_ax3], p15[v_ax0, v_ax1 - T.int64(1344), v_ax2, v_ax3], p14[v_ax0, v_ax1 - T.int64(1312), v_ax2, v_ax3], p13[v_ax0, v_ax1 - T.int64(1280), v_ax2, v_ax3], p12[v_ax0, v_ax1 - T.int64(1248), v_ax2, v_ax3], p11[v_ax0, v_ax1 - T.int64(1216), v_ax2, v_ax3], p10[v_ax0, v_ax1 - T.int64(1184), v_ax2, v_ax3], p9[v_ax0, v_ax1 - T.int64(1152), v_ax2, v_ax3], p8[v_ax0, v_ax1 - T.int64(1120), v_ax2, v_ax3], p7[v_ax0, v_ax1 - T.int64(1088), v_ax2, v_ax3], p6[v_ax0, v_ax1 - T.int64(1056), v_ax2, v_ax3], p5[v_ax0, v_ax1 - T.int64(1024), v_ax2, v_ax3], p4[v_ax0, v_ax1 - T.int64(992), v_ax2, v_ax3], p3[v_ax0, v_ax1 - T.int64(960), v_ax2, v_ax3], p2[v_ax0, v_ax1 - T.int64(928), v_ax2, v_ax3], p1[v_ax0, v_ax1 - T.int64(896), v_ax2, v_ax3], p0[v_ax0, v_ax1, v_ax2, v_ax3], p31[v_ax0, v_ax1, T.int64(0), T.int64(0)], p32[v_ax0, v_ax1, T.int64(0), T.int64(0)])
                    T.writes(T_relu[v_ax0, v_ax1, v_ax2, v_ax3])
                    T_relu[v_ax0, v_ax1, v_ax2, v_ax3] = T.max(T.if_then_else(T.int64(1824) <= v_ax1, p30[v_ax0, v_ax1 - T.int64(1824), v_ax2, v_ax3], T.if_then_else(T.int64(1792) <= v_ax1, p29[v_ax0, v_ax1 - T.int64(1792), v_ax2, v_ax3], T.if_then_else(T.int64(1760) <= v_ax1, p28[v_ax0, v_ax1 - T.int64(1760), v_ax2, v_ax3], T.if_then_else(T.int64(1728) <= v_ax1, p27[v_ax0, v_ax1 - T.int64(1728), v_ax2, v_ax3], T.if_then_else(T.int64(1696) <= v_ax1, p26[v_ax0, v_ax1 - T.int64(1696), v_ax2, v_ax3], T.if_then_else(T.int64(1664) <= v_ax1, p25[v_ax0, v_ax1 - T.int64(1664), v_ax2, v_ax3], T.if_then_else(T.int64(1632) <= v_ax1, p24[v_ax0, v_ax1 - T.int64(1632), v_ax2, v_ax3], T.if_then_else(T.int64(1600) <= v_ax1, p23[v_ax0, v_ax1 - T.int64(1600), v_ax2, v_ax3], T.if_then_else(T.int64(1568) <= v_ax1, p22[v_ax0, v_ax1 - T.int64(1568), v_ax2, v_ax3], T.if_then_else(T.int64(1536) <= v_ax1, p21[v_ax0, v_ax1 - T.int64(1536), v_ax2, v_ax3], T.if_then_else(T.int64(1504) <= v_ax1, p20[v_ax0, v_ax1 - T.int64(1504), v_ax2, v_ax3], T.if_then_else(T.int64(1472) <= v_ax1, p19[v_ax0, v_ax1 - T.int64(1472), v_ax2, v_ax3], T.if_then_else(T.int64(1440) <= v_ax1, p18[v_ax0, v_ax1 - T.int64(1440), v_ax2, v_ax3], T.if_then_else(T.int64(1408) <= v_ax1, p17[v_ax0, v_ax1 - T.int64(1408), v_ax2, v_ax3], T.if_then_else(T.int64(1376) <= v_ax1, p16[v_ax0, v_ax1 - T.int64(1376), v_ax2, v_ax3], T.if_then_else(T.int64(1344) <= v_ax1, p15[v_ax0, v_ax1 - T.int64(1344), v_ax2, v_ax3], T.if_then_else(T.int64(1312) <= v_ax1, p14[v_ax0, v_ax1 - T.int64(1312), v_ax2, v_ax3], T.if_then_else(T.int64(1280) <= v_ax1, p13[v_ax0, v_ax1 - T.int64(1280), v_ax2, v_ax3], T.if_then_else(T.int64(1248) <= v_ax1, p12[v_ax0, v_ax1 - T.int64(1248), v_ax2, v_ax3], T.if_then_else(T.int64(1216) <= v_ax1, p11[v_ax0, v_ax1 - T.int64(1216), v_ax2, v_ax3], T.if_then_else(T.int64(1184) <= v_ax1, p10[v_ax0, v_ax1 - T.int64(1184), v_ax2, v_ax3], T.if_then_else(T.int64(1152) <= v_ax1, p9[v_ax0, v_ax1 - T.int64(1152), v_ax2, v_ax3], T.if_then_else(T.int64(1120) <= v_ax1, p8[v_ax0, v_ax1 - T.int64(1120), v_ax2, v_ax3], T.if_then_else(T.int64(1088) <= v_ax1, p7[v_ax0, v_ax1 - T.int64(1088), v_ax2, v_ax3], T.if_then_else(T.int64(1056) <= v_ax1, p6[v_ax0, v_ax1 - T.int64(1056), v_ax2, v_ax3], T.if_then_else(T.int64(1024) <= v_ax1, p5[v_ax0, v_ax1 - T.int64(1024), v_ax2, v_ax3], T.if_then_else(T.int64(992) <= v_ax1, p4[v_ax0, v_ax1 - T.int64(992), v_ax2, v_ax3], T.if_then_else(T.int64(960) <= v_ax1, p3[v_ax0, v_ax1 - T.int64(960), v_ax2, v_ax3], T.if_then_else(T.int64(928) <= v_ax1, p2[v_ax0, v_ax1 - T.int64(928), v_ax2, v_ax3], T.if_then_else(T.int64(896) <= v_ax1, p1[v_ax0, v_ax1 - T.int64(896), v_ax2, v_ax3], p0[v_ax0, v_ax1, v_ax2, v_ax3])))))))))))))))))))))))))))))) * p31[v_ax0, v_ax1, T.int64(0), T.int64(0)] + p32[v_ax0, v_ax1, T.int64(0), T.int64(0)], T.float32(0))
b0 = sch.get_block(name="T_concat", func_name="main")
b1 = sch.get_block(name="T_multiply", func_name="main")
b2 = sch.get_block(name="T_add", func_name="main")
b3 = sch.get_block(name="T_relu", func_name="main")
sch.reverse_compute_inline(block=b3)
sch.reverse_compute_inline(block=b2)
sch.reverse_compute_inline(block=b1)
l4, l5, l6, l7 = sch.get_loops(block=b0)
l8 = sch.fuse(l4, l5, l6, l7, preserve_unit_iters=True)
v9 = sch.sample_categorical(candidates=[32, 64, 128, 256, 512, 1024], probs=[0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666], decision=4)
l10, l11 = sch.split(loop=l8, factors=[None, v9], preserve_unit_iters=True)
sch.bind(loop=l10, thread_axis="blockIdx.x")
sch.bind(loop=l11, thread_axis="threadIdx.x")
sch.enter_postproc()
2024-05-01 15:04:44 [INFO] [task_scheduler.cc:160] Initializing Task #2: "fused_concatenate_multiply_add_nn_relu_1"
2024-05-01 15:04:44 [INFO] [task_scheduler.cc:35] 
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(896), T.int64(7), T.int64(7)), "float32"), p1: T.Buffer((T.int64(1), T.int64(32), T.int64(7), T.int64(7)), "float32"), p2: T.Buffer((T.int64(1), T.int64(32), T.int64(7), T.int64(7)), "float32"), p3: T.Buffer((T.int64(1), T.int64(32), T.int64(7), T.int64(7)), "float32"), p4: T.Buffer((T.int64(1), T.int64(32), T.int64(7), T.int64(7)), "float32"), p5: T.Buffer((T.int64(1), T.int64(32), T.int64(7), T.int64(7)), "float32"), p6: T.Buffer((T.int64(1), T.int64(32), T.int64(7), T.int64(7)), "float32"), p7: T.Buffer((T.int64(1), T.int64(32), T.int64(7), T.int64(7)), "float32"), p8: T.Buffer((T.int64(1), T.int64(32), T.int64(7), T.int64(7)), "float32"), p9: T.Buffer((T.int64(1), T.int64(32), T.int64(7), T.int64(7)), "float32"), p10: T.Buffer((T.int64(1), T.int64(32), T.int64(7), T.int64(7)), "float32"), p11: T.Buffer((T.int64(1), T.int64(32), T.int64(7), T.int64(7)), "float32"), p12: T.Buffer((T.int64(1), T.int64(32), T.int64(7), T.int64(7)), "float32"), p13: T.Buffer((T.int64(1), T.int64(32), T.int64(7), T.int64(7)), "float32"), p14: T.Buffer((T.int64(1), T.int64(32), T.int64(7), T.int64(7)), "float32"), p15: T.Buffer((T.int64(1), T.int64(32), T.int64(7), T.int64(7)), "float32"), p16: T.Buffer((T.int64(1), T.int64(32), T.int64(7), T.int64(7)), "float32"), p17: T.Buffer((T.int64(1), T.int64(32), T.int64(7), T.int64(7)), "float32"), p18: T.Buffer((T.int64(1), T.int64(32), T.int64(7), T.int64(7)), "float32"), p19: T.Buffer((T.int64(1), T.int64(32), T.int64(7), T.int64(7)), "float32"), p20: T.Buffer((T.int64(1), T.int64(32), T.int64(7), T.int64(7)), "float32"), p21: T.Buffer((T.int64(1), T.int64(32), T.int64(7), T.int64(7)), "float32"), p22: T.Buffer((T.int64(1), T.int64(32), T.int64(7), T.int64(7)), "float32"), p23: T.Buffer((T.int64(1), T.int64(32), T.int64(7), T.int64(7)), "float32"), p24: T.Buffer((T.int64(1), T.int64(32), T.int64(7), T.int64(7)), "float32"), p25: T.Buffer((T.int64(1), T.int64(32), T.int64(7), T.int64(7)), "float32"), p26: T.Buffer((T.int64(1), T.int64(32), T.int64(7), T.int64(7)), "float32"), p27: T.Buffer((T.int64(1), T.int64(32), T.int64(7), T.int64(7)), "float32"), p28: T.Buffer((T.int64(1), T.int64(32), T.int64(7), T.int64(7)), "float32"), p29: T.Buffer((T.int64(1), T.int64(32), T.int64(7), T.int64(7)), "float32"), p30: T.Buffer((T.int64(1), T.int64(32), T.int64(7), T.int64(7)), "float32"), p31: T.Buffer((T.int64(1), T.int64(1856), T.int64(1), T.int64(1)), "float32"), p32: T.Buffer((T.int64(1), T.int64(1856), T.int64(1), T.int64(1)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(1856), T.int64(7), T.int64(7)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        T_concat = T.alloc_buffer((T.int64(1), T.int64(1856), T.int64(7), T.int64(7)))
        T_multiply = T.alloc_buffer((T.int64(1), T.int64(1856), T.int64(7), T.int64(7)))
        T_add = T.alloc_buffer((T.int64(1), T.int64(1856), T.int64(7), T.int64(7)))
        for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(1856), T.int64(7), T.int64(7)):
            with T.block("T_concat"):
                v_ax0, v_ax1, v_ax2, v_ax3 = T.axis.remap("SSSS", [ax0, ax1, ax2, ax3])
                T.reads(p30[v_ax0, v_ax1 - T.int64(1824), v_ax2, v_ax3], p29[v_ax0, v_ax1 - T.int64(1792), v_ax2, v_ax3], p28[v_ax0, v_ax1 - T.int64(1760), v_ax2, v_ax3], p27[v_ax0, v_ax1 - T.int64(1728), v_ax2, v_ax3], p26[v_ax0, v_ax1 - T.int64(1696), v_ax2, v_ax3], p25[v_ax0, v_ax1 - T.int64(1664), v_ax2, v_ax3], p24[v_ax0, v_ax1 - T.int64(1632), v_ax2, v_ax3], p23[v_ax0, v_ax1 - T.int64(1600), v_ax2, v_ax3], p22[v_ax0, v_ax1 - T.int64(1568), v_ax2, v_ax3], p21[v_ax0, v_ax1 - T.int64(1536), v_ax2, v_ax3], p20[v_ax0, v_ax1 - T.int64(1504), v_ax2, v_ax3], p19[v_ax0, v_ax1 - T.int64(1472), v_ax2, v_ax3], p18[v_ax0, v_ax1 - T.int64(1440), v_ax2, v_ax3], p17[v_ax0, v_ax1 - T.int64(1408), v_ax2, v_ax3], p16[v_ax0, v_ax1 - T.int64(1376), v_ax2, v_ax3], p15[v_ax0, v_ax1 - T.int64(1344), v_ax2, v_ax3], p14[v_ax0, v_ax1 - T.int64(1312), v_ax2, v_ax3], p13[v_ax0, v_ax1 - T.int64(1280), v_ax2, v_ax3], p12[v_ax0, v_ax1 - T.int64(1248), v_ax2, v_ax3], p11[v_ax0, v_ax1 - T.int64(1216), v_ax2, v_ax3], p10[v_ax0, v_ax1 - T.int64(1184), v_ax2, v_ax3], p9[v_ax0, v_ax1 - T.int64(1152), v_ax2, v_ax3], p8[v_ax0, v_ax1 - T.int64(1120), v_ax2, v_ax3], p7[v_ax0, v_ax1 - T.int64(1088), v_ax2, v_ax3], p6[v_ax0, v_ax1 - T.int64(1056), v_ax2, v_ax3], p5[v_ax0, v_ax1 - T.int64(1024), v_ax2, v_ax3], p4[v_ax0, v_ax1 - T.int64(992), v_ax2, v_ax3], p3[v_ax0, v_ax1 - T.int64(960), v_ax2, v_ax3], p2[v_ax0, v_ax1 - T.int64(928), v_ax2, v_ax3], p1[v_ax0, v_ax1 - T.int64(896), v_ax2, v_ax3], p0[v_ax0, v_ax1, v_ax2, v_ax3])
                T.writes(T_concat[v_ax0, v_ax1, v_ax2, v_ax3])
                T_concat[v_ax0, v_ax1, v_ax2, v_ax3] = T.if_then_else(T.int64(1824) <= v_ax1, p30[v_ax0, v_ax1 - T.int64(1824), v_ax2, v_ax3], T.if_then_else(T.int64(1792) <= v_ax1, p29[v_ax0, v_ax1 - T.int64(1792), v_ax2, v_ax3], T.if_then_else(T.int64(1760) <= v_ax1, p28[v_ax0, v_ax1 - T.int64(1760), v_ax2, v_ax3], T.if_then_else(T.int64(1728) <= v_ax1, p27[v_ax0, v_ax1 - T.int64(1728), v_ax2, v_ax3], T.if_then_else(T.int64(1696) <= v_ax1, p26[v_ax0, v_ax1 - T.int64(1696), v_ax2, v_ax3], T.if_then_else(T.int64(1664) <= v_ax1, p25[v_ax0, v_ax1 - T.int64(1664), v_ax2, v_ax3], T.if_then_else(T.int64(1632) <= v_ax1, p24[v_ax0, v_ax1 - T.int64(1632), v_ax2, v_ax3], T.if_then_else(T.int64(1600) <= v_ax1, p23[v_ax0, v_ax1 - T.int64(1600), v_ax2, v_ax3], T.if_then_else(T.int64(1568) <= v_ax1, p22[v_ax0, v_ax1 - T.int64(1568), v_ax2, v_ax3], T.if_then_else(T.int64(1536) <= v_ax1, p21[v_ax0, v_ax1 - T.int64(1536), v_ax2, v_ax3], T.if_then_else(T.int64(1504) <= v_ax1, p20[v_ax0, v_ax1 - T.int64(1504), v_ax2, v_ax3], T.if_then_else(T.int64(1472) <= v_ax1, p19[v_ax0, v_ax1 - T.int64(1472), v_ax2, v_ax3], T.if_then_else(T.int64(1440) <= v_ax1, p18[v_ax0, v_ax1 - T.int64(1440), v_ax2, v_ax3], T.if_then_else(T.int64(1408) <= v_ax1, p17[v_ax0, v_ax1 - T.int64(1408), v_ax2, v_ax3], T.if_then_else(T.int64(1376) <= v_ax1, p16[v_ax0, v_ax1 - T.int64(1376), v_ax2, v_ax3], T.if_then_else(T.int64(1344) <= v_ax1, p15[v_ax0, v_ax1 - T.int64(1344), v_ax2, v_ax3], T.if_then_else(T.int64(1312) <= v_ax1, p14[v_ax0, v_ax1 - T.int64(1312), v_ax2, v_ax3], T.if_then_else(T.int64(1280) <= v_ax1, p13[v_ax0, v_ax1 - T.int64(1280), v_ax2, v_ax3], T.if_then_else(T.int64(1248) <= v_ax1, p12[v_ax0, v_ax1 - T.int64(1248), v_ax2, v_ax3], T.if_then_else(T.int64(1216) <= v_ax1, p11[v_ax0, v_ax1 - T.int64(1216), v_ax2, v_ax3], T.if_then_else(T.int64(1184) <= v_ax1, p10[v_ax0, v_ax1 - T.int64(1184), v_ax2, v_ax3], T.if_then_else(T.int64(1152) <= v_ax1, p9[v_ax0, v_ax1 - T.int64(1152), v_ax2, v_ax3], T.if_then_else(T.int64(1120) <= v_ax1, p8[v_ax0, v_ax1 - T.int64(1120), v_ax2, v_ax3], T.if_then_else(T.int64(1088) <= v_ax1, p7[v_ax0, v_ax1 - T.int64(1088), v_ax2, v_ax3], T.if_then_else(T.int64(1056) <= v_ax1, p6[v_ax0, v_ax1 - T.int64(1056), v_ax2, v_ax3], T.if_then_else(T.int64(1024) <= v_ax1, p5[v_ax0, v_ax1 - T.int64(1024), v_ax2, v_ax3], T.if_then_else(T.int64(992) <= v_ax1, p4[v_ax0, v_ax1 - T.int64(992), v_ax2, v_ax3], T.if_then_else(T.int64(960) <= v_ax1, p3[v_ax0, v_ax1 - T.int64(960), v_ax2, v_ax3], T.if_then_else(T.int64(928) <= v_ax1, p2[v_ax0, v_ax1 - T.int64(928), v_ax2, v_ax3], T.if_then_else(T.int64(896) <= v_ax1, p1[v_ax0, v_ax1 - T.int64(896), v_ax2, v_ax3], p0[v_ax0, v_ax1, v_ax2, v_ax3]))))))))))))))))))))))))))))))
        for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(1856), T.int64(7), T.int64(7)):
            with T.block("T_multiply"):
                v_ax0, v_ax1, v_ax2, v_ax3 = T.axis.remap("SSSS", [ax0, ax1, ax2, ax3])
                T.reads(T_concat[v_ax0, v_ax1, v_ax2, v_ax3], p31[v_ax0, v_ax1, T.int64(0), T.int64(0)])
                T.writes(T_multiply[v_ax0, v_ax1, v_ax2, v_ax3])
                T_multiply[v_ax0, v_ax1, v_ax2, v_ax3] = T_concat[v_ax0, v_ax1, v_ax2, v_ax3] * p31[v_ax0, v_ax1, T.int64(0), T.int64(0)]
        for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(1856), T.int64(7), T.int64(7)):
            with T.block("T_add"):
                v_ax0, v_ax1, v_ax2, v_ax3 = T.axis.remap("SSSS", [ax0, ax1, ax2, ax3])
                T.reads(T_multiply[v_ax0, v_ax1, v_ax2, v_ax3], p32[v_ax0, v_ax1, T.int64(0), T.int64(0)])
                T.writes(T_add[v_ax0, v_ax1, v_ax2, v_ax3])
                T_add[v_ax0, v_ax1, v_ax2, v_ax3] = T_multiply[v_ax0, v_ax1, v_ax2, v_ax3] + p32[v_ax0, v_ax1, T.int64(0), T.int64(0)]
        for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(1856), T.int64(7), T.int64(7)):
            with T.block("T_relu"):
                v_ax0, v_ax1, v_ax2, v_ax3 = T.axis.remap("SSSS", [ax0, ax1, ax2, ax3])
                T.reads(T_add[v_ax0, v_ax1, v_ax2, v_ax3])
                T.writes(T_relu[v_ax0, v_ax1, v_ax2, v_ax3])
                T_relu[v_ax0, v_ax1, v_ax2, v_ax3] = T.max(T_add[v_ax0, v_ax1, v_ax2, v_ax3], T.float32(0))
2024-05-01 15:04:44 [INFO] [task_scheduler.cc:164] Total 1 design space(s) generated
2024-05-01 15:04:44 [INFO] [task_scheduler.cc:170] Design space #0:
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(896), T.int64(7), T.int64(7)), "float32"), p1: T.Buffer((T.int64(1), T.int64(32), T.int64(7), T.int64(7)), "float32"), p2: T.Buffer((T.int64(1), T.int64(32), T.int64(7), T.int64(7)), "float32"), p3: T.Buffer((T.int64(1), T.int64(32), T.int64(7), T.int64(7)), "float32"), p4: T.Buffer((T.int64(1), T.int64(32), T.int64(7), T.int64(7)), "float32"), p5: T.Buffer((T.int64(1), T.int64(32), T.int64(7), T.int64(7)), "float32"), p6: T.Buffer((T.int64(1), T.int64(32), T.int64(7), T.int64(7)), "float32"), p7: T.Buffer((T.int64(1), T.int64(32), T.int64(7), T.int64(7)), "float32"), p8: T.Buffer((T.int64(1), T.int64(32), T.int64(7), T.int64(7)), "float32"), p9: T.Buffer((T.int64(1), T.int64(32), T.int64(7), T.int64(7)), "float32"), p10: T.Buffer((T.int64(1), T.int64(32), T.int64(7), T.int64(7)), "float32"), p11: T.Buffer((T.int64(1), T.int64(32), T.int64(7), T.int64(7)), "float32"), p12: T.Buffer((T.int64(1), T.int64(32), T.int64(7), T.int64(7)), "float32"), p13: T.Buffer((T.int64(1), T.int64(32), T.int64(7), T.int64(7)), "float32"), p14: T.Buffer((T.int64(1), T.int64(32), T.int64(7), T.int64(7)), "float32"), p15: T.Buffer((T.int64(1), T.int64(32), T.int64(7), T.int64(7)), "float32"), p16: T.Buffer((T.int64(1), T.int64(32), T.int64(7), T.int64(7)), "float32"), p17: T.Buffer((T.int64(1), T.int64(32), T.int64(7), T.int64(7)), "float32"), p18: T.Buffer((T.int64(1), T.int64(32), T.int64(7), T.int64(7)), "float32"), p19: T.Buffer((T.int64(1), T.int64(32), T.int64(7), T.int64(7)), "float32"), p20: T.Buffer((T.int64(1), T.int64(32), T.int64(7), T.int64(7)), "float32"), p21: T.Buffer((T.int64(1), T.int64(32), T.int64(7), T.int64(7)), "float32"), p22: T.Buffer((T.int64(1), T.int64(32), T.int64(7), T.int64(7)), "float32"), p23: T.Buffer((T.int64(1), T.int64(32), T.int64(7), T.int64(7)), "float32"), p24: T.Buffer((T.int64(1), T.int64(32), T.int64(7), T.int64(7)), "float32"), p25: T.Buffer((T.int64(1), T.int64(32), T.int64(7), T.int64(7)), "float32"), p26: T.Buffer((T.int64(1), T.int64(32), T.int64(7), T.int64(7)), "float32"), p27: T.Buffer((T.int64(1), T.int64(32), T.int64(7), T.int64(7)), "float32"), p28: T.Buffer((T.int64(1), T.int64(32), T.int64(7), T.int64(7)), "float32"), p29: T.Buffer((T.int64(1), T.int64(32), T.int64(7), T.int64(7)), "float32"), p30: T.Buffer((T.int64(1), T.int64(32), T.int64(7), T.int64(7)), "float32"), p31: T.Buffer((T.int64(1), T.int64(1856), T.int64(1), T.int64(1)), "float32"), p32: T.Buffer((T.int64(1), T.int64(1856), T.int64(1), T.int64(1)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(1856), T.int64(7), T.int64(7)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        for ax0_ax1_ax2_ax3_fused_0 in T.thread_binding(T.int64(356), thread="blockIdx.x"):
            for ax0_ax1_ax2_ax3_fused_1 in T.thread_binding(T.int64(256), thread="threadIdx.x"):
                with T.block("T_concat"):
                    v_ax0 = T.axis.spatial(T.int64(1), T.int64(0))
                    v_ax1 = T.axis.spatial(T.int64(1856), (ax0_ax1_ax2_ax3_fused_0 * T.int64(256) + ax0_ax1_ax2_ax3_fused_1) // T.int64(49))
                    v_ax2 = T.axis.spatial(T.int64(7), (ax0_ax1_ax2_ax3_fused_0 * T.int64(256) + ax0_ax1_ax2_ax3_fused_1) % T.int64(49) // T.int64(7))
                    v_ax3 = T.axis.spatial(T.int64(7), (ax0_ax1_ax2_ax3_fused_0 * T.int64(256) + ax0_ax1_ax2_ax3_fused_1) % T.int64(7))
                    T.where(ax0_ax1_ax2_ax3_fused_0 * T.int64(256) + ax0_ax1_ax2_ax3_fused_1 < T.int64(90944))
                    T.reads(p30[v_ax0, v_ax1 - T.int64(1824), v_ax2, v_ax3], p29[v_ax0, v_ax1 - T.int64(1792), v_ax2, v_ax3], p28[v_ax0, v_ax1 - T.int64(1760), v_ax2, v_ax3], p27[v_ax0, v_ax1 - T.int64(1728), v_ax2, v_ax3], p26[v_ax0, v_ax1 - T.int64(1696), v_ax2, v_ax3], p25[v_ax0, v_ax1 - T.int64(1664), v_ax2, v_ax3], p24[v_ax0, v_ax1 - T.int64(1632), v_ax2, v_ax3], p23[v_ax0, v_ax1 - T.int64(1600), v_ax2, v_ax3], p22[v_ax0, v_ax1 - T.int64(1568), v_ax2, v_ax3], p21[v_ax0, v_ax1 - T.int64(1536), v_ax2, v_ax3], p20[v_ax0, v_ax1 - T.int64(1504), v_ax2, v_ax3], p19[v_ax0, v_ax1 - T.int64(1472), v_ax2, v_ax3], p18[v_ax0, v_ax1 - T.int64(1440), v_ax2, v_ax3], p17[v_ax0, v_ax1 - T.int64(1408), v_ax2, v_ax3], p16[v_ax0, v_ax1 - T.int64(1376), v_ax2, v_ax3], p15[v_ax0, v_ax1 - T.int64(1344), v_ax2, v_ax3], p14[v_ax0, v_ax1 - T.int64(1312), v_ax2, v_ax3], p13[v_ax0, v_ax1 - T.int64(1280), v_ax2, v_ax3], p12[v_ax0, v_ax1 - T.int64(1248), v_ax2, v_ax3], p11[v_ax0, v_ax1 - T.int64(1216), v_ax2, v_ax3], p10[v_ax0, v_ax1 - T.int64(1184), v_ax2, v_ax3], p9[v_ax0, v_ax1 - T.int64(1152), v_ax2, v_ax3], p8[v_ax0, v_ax1 - T.int64(1120), v_ax2, v_ax3], p7[v_ax0, v_ax1 - T.int64(1088), v_ax2, v_ax3], p6[v_ax0, v_ax1 - T.int64(1056), v_ax2, v_ax3], p5[v_ax0, v_ax1 - T.int64(1024), v_ax2, v_ax3], p4[v_ax0, v_ax1 - T.int64(992), v_ax2, v_ax3], p3[v_ax0, v_ax1 - T.int64(960), v_ax2, v_ax3], p2[v_ax0, v_ax1 - T.int64(928), v_ax2, v_ax3], p1[v_ax0, v_ax1 - T.int64(896), v_ax2, v_ax3], p0[v_ax0, v_ax1, v_ax2, v_ax3], p31[v_ax0, v_ax1, T.int64(0), T.int64(0)], p32[v_ax0, v_ax1, T.int64(0), T.int64(0)])
                    T.writes(T_relu[v_ax0, v_ax1, v_ax2, v_ax3])
                    T_relu[v_ax0, v_ax1, v_ax2, v_ax3] = T.max(T.if_then_else(T.int64(1824) <= v_ax1, p30[v_ax0, v_ax1 - T.int64(1824), v_ax2, v_ax3], T.if_then_else(T.int64(1792) <= v_ax1, p29[v_ax0, v_ax1 - T.int64(1792), v_ax2, v_ax3], T.if_then_else(T.int64(1760) <= v_ax1, p28[v_ax0, v_ax1 - T.int64(1760), v_ax2, v_ax3], T.if_then_else(T.int64(1728) <= v_ax1, p27[v_ax0, v_ax1 - T.int64(1728), v_ax2, v_ax3], T.if_then_else(T.int64(1696) <= v_ax1, p26[v_ax0, v_ax1 - T.int64(1696), v_ax2, v_ax3], T.if_then_else(T.int64(1664) <= v_ax1, p25[v_ax0, v_ax1 - T.int64(1664), v_ax2, v_ax3], T.if_then_else(T.int64(1632) <= v_ax1, p24[v_ax0, v_ax1 - T.int64(1632), v_ax2, v_ax3], T.if_then_else(T.int64(1600) <= v_ax1, p23[v_ax0, v_ax1 - T.int64(1600), v_ax2, v_ax3], T.if_then_else(T.int64(1568) <= v_ax1, p22[v_ax0, v_ax1 - T.int64(1568), v_ax2, v_ax3], T.if_then_else(T.int64(1536) <= v_ax1, p21[v_ax0, v_ax1 - T.int64(1536), v_ax2, v_ax3], T.if_then_else(T.int64(1504) <= v_ax1, p20[v_ax0, v_ax1 - T.int64(1504), v_ax2, v_ax3], T.if_then_else(T.int64(1472) <= v_ax1, p19[v_ax0, v_ax1 - T.int64(1472), v_ax2, v_ax3], T.if_then_else(T.int64(1440) <= v_ax1, p18[v_ax0, v_ax1 - T.int64(1440), v_ax2, v_ax3], T.if_then_else(T.int64(1408) <= v_ax1, p17[v_ax0, v_ax1 - T.int64(1408), v_ax2, v_ax3], T.if_then_else(T.int64(1376) <= v_ax1, p16[v_ax0, v_ax1 - T.int64(1376), v_ax2, v_ax3], T.if_then_else(T.int64(1344) <= v_ax1, p15[v_ax0, v_ax1 - T.int64(1344), v_ax2, v_ax3], T.if_then_else(T.int64(1312) <= v_ax1, p14[v_ax0, v_ax1 - T.int64(1312), v_ax2, v_ax3], T.if_then_else(T.int64(1280) <= v_ax1, p13[v_ax0, v_ax1 - T.int64(1280), v_ax2, v_ax3], T.if_then_else(T.int64(1248) <= v_ax1, p12[v_ax0, v_ax1 - T.int64(1248), v_ax2, v_ax3], T.if_then_else(T.int64(1216) <= v_ax1, p11[v_ax0, v_ax1 - T.int64(1216), v_ax2, v_ax3], T.if_then_else(T.int64(1184) <= v_ax1, p10[v_ax0, v_ax1 - T.int64(1184), v_ax2, v_ax3], T.if_then_else(T.int64(1152) <= v_ax1, p9[v_ax0, v_ax1 - T.int64(1152), v_ax2, v_ax3], T.if_then_else(T.int64(1120) <= v_ax1, p8[v_ax0, v_ax1 - T.int64(1120), v_ax2, v_ax3], T.if_then_else(T.int64(1088) <= v_ax1, p7[v_ax0, v_ax1 - T.int64(1088), v_ax2, v_ax3], T.if_then_else(T.int64(1056) <= v_ax1, p6[v_ax0, v_ax1 - T.int64(1056), v_ax2, v_ax3], T.if_then_else(T.int64(1024) <= v_ax1, p5[v_ax0, v_ax1 - T.int64(1024), v_ax2, v_ax3], T.if_then_else(T.int64(992) <= v_ax1, p4[v_ax0, v_ax1 - T.int64(992), v_ax2, v_ax3], T.if_then_else(T.int64(960) <= v_ax1, p3[v_ax0, v_ax1 - T.int64(960), v_ax2, v_ax3], T.if_then_else(T.int64(928) <= v_ax1, p2[v_ax0, v_ax1 - T.int64(928), v_ax2, v_ax3], T.if_then_else(T.int64(896) <= v_ax1, p1[v_ax0, v_ax1 - T.int64(896), v_ax2, v_ax3], p0[v_ax0, v_ax1, v_ax2, v_ax3])))))))))))))))))))))))))))))) * p31[v_ax0, v_ax1, T.int64(0), T.int64(0)] + p32[v_ax0, v_ax1, T.int64(0), T.int64(0)], T.float32(0))
b0 = sch.get_block(name="T_concat", func_name="main")
b1 = sch.get_block(name="T_multiply", func_name="main")
b2 = sch.get_block(name="T_add", func_name="main")
b3 = sch.get_block(name="T_relu", func_name="main")
sch.reverse_compute_inline(block=b3)
sch.reverse_compute_inline(block=b2)
sch.reverse_compute_inline(block=b1)
l4, l5, l6, l7 = sch.get_loops(block=b0)
l8 = sch.fuse(l4, l5, l6, l7, preserve_unit_iters=True)
v9 = sch.sample_categorical(candidates=[32, 64, 128, 256, 512, 1024], probs=[0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666], decision=3)
l10, l11 = sch.split(loop=l8, factors=[None, v9], preserve_unit_iters=True)
sch.bind(loop=l10, thread_axis="blockIdx.x")
sch.bind(loop=l11, thread_axis="threadIdx.x")
2024-05-01 15:08:15 [INFO] [evolutionary_search.cc:713] Generating candidates......
2024-05-01 15:08:15 [INFO] [evolutionary_search.cc:715] Picked top 0 candidate(s) from database
2024-05-01 15:08:26 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0xcb4eb98)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x11215858)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x10579718)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0xd9523b8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x12094488)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x13aa7148)]: 0 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x1320c148)]: 0 failure(s)
2024-05-01 15:08:26 [INFO] [evolutionary_search.cc:723] Sampled 512 candidate(s)
2024-05-01 15:08:27 [INFO] [evolutionary_search.cc:621] Evolve iter #0 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0xcb4eb98)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x11215858)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x10579718)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0xd9523b8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x12094488)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x13aa7148)]: 0 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x1320c148)]: 0 failure(s)
2024-05-01 15:08:29 [INFO] [evolutionary_search.cc:621] Evolve iter #1 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0xcb4eb98)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x11215858)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x10579718)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0xd9523b8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x12094488)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x13aa7148)]: 0 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x1320c148)]: 0 failure(s)
2024-05-01 15:08:30 [INFO] [evolutionary_search.cc:621] Evolve iter #2 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0xcb4eb98)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x11215858)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x10579718)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0xd9523b8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x12094488)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x13aa7148)]: 0 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x1320c148)]: 0 failure(s)
2024-05-01 15:08:31 [INFO] [evolutionary_search.cc:621] Evolve iter #3 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0xcb4eb98)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x11215858)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x10579718)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0xd9523b8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x12094488)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x13aa7148)]: 0 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x1320c148)]: 0 failure(s)
2024-05-01 15:08:32 [INFO] [evolutionary_search.cc:649] Scores of the best 6 candidates:
[1 : 6]:	0.8523  0.4896  0.4869  0.4319  0.2838  0.0859
2024-05-01 15:08:32 [INFO] [evolutionary_search.cc:727] Got 6 candidate(s) with evolutionary search
2024-05-01 15:08:32 [INFO] [evolutionary_search.cc:730] Sending 6 candidates(s) for measurement
2024-05-01 18:31:42 [INFO] [task_scheduler.cc:131] [Task #2: fused_concatenate_multiply_add_nn_relu_1] Trial #1: GFLOPs: 79.1190. Time: 3.4484 us. Best GFLOPs: 79.1190
2024-05-01 18:31:42 [INFO] [task_scheduler.cc:131] [Task #2: fused_concatenate_multiply_add_nn_relu_1] Trial #2: GFLOPs: 82.3794. Time: 3.3119 us. Best GFLOPs: 82.3794
2024-05-01 18:31:42 [INFO] [task_scheduler.cc:131] [Task #2: fused_concatenate_multiply_add_nn_relu_1] Trial #3: GFLOPs: 51.7765. Time: 5.2694 us. Best GFLOPs: 82.3794
2024-05-01 18:31:42 [INFO] [task_scheduler.cc:131] [Task #2: fused_concatenate_multiply_add_nn_relu_1] Trial #4: GFLOPs: 61.7489. Time: 4.4184 us. Best GFLOPs: 82.3794
2024-05-01 18:31:42 [INFO] [task_scheduler.cc:131] [Task #2: fused_concatenate_multiply_add_nn_relu_1] Trial #5: GFLOPs: 82.2929. Time: 3.3154 us. Best GFLOPs: 82.3794
2024-05-01 18:31:42 [INFO] [task_scheduler.cc:131] [Task #2: fused_concatenate_multiply_add_nn_relu_1] Trial #6: GFLOPs: 77.2983. Time: 3.5296 us. Best GFLOPs: 82.3794
