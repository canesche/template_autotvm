2024-04-29 16:31:37 [INFO] [task_scheduler.cc:160] Initializing Task #72: "fused_nn_conv2d_add_nn_relu_35"
2024-04-29 16:31:37 [INFO] [task_scheduler.cc:35] 
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(1664), T.int64(14), T.int64(14)), "float32"), p1: T.Buffer((T.int64(128), T.int64(1664), T.int64(1), T.int64(1)), "float32"), p2: T.Buffer((T.int64(1), T.int64(128), T.int64(1), T.int64(1)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(128), T.int64(14), T.int64(14)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        pad_temp = T.alloc_buffer((T.int64(1), T.int64(1664), T.int64(14), T.int64(14)))
        conv2d_nchw = T.alloc_buffer((T.int64(1), T.int64(128), T.int64(14), T.int64(14)))
        T_add = T.alloc_buffer((T.int64(1), T.int64(128), T.int64(14), T.int64(14)))
        for i0, i1, i2, i3 in T.grid(T.int64(1), T.int64(1664), T.int64(14), T.int64(14)):
            with T.block("pad_temp"):
                v_i0, v_i1, v_i2, v_i3 = T.axis.remap("SSSS", [i0, i1, i2, i3])
                T.reads(p0[v_i0, v_i1, v_i2, v_i3])
                T.writes(pad_temp[v_i0, v_i1, v_i2, v_i3])
                pad_temp[v_i0, v_i1, v_i2, v_i3] = p0[v_i0, v_i1, v_i2, v_i3]
        for nn, ff, yy, xx, rc, ry, rx in T.grid(T.int64(1), T.int64(128), T.int64(14), T.int64(14), T.int64(1664), T.int64(1), T.int64(1)):
            with T.block("conv2d_nchw"):
                v_nn, v_ff, v_yy, v_xx, v_rc, v_ry, v_rx = T.axis.remap("SSSSRRR", [nn, ff, yy, xx, rc, ry, rx])
                T.reads(pad_temp[v_nn, v_rc, v_yy + v_ry, v_xx + v_rx], p1[v_ff, v_rc, v_ry, v_rx])
                T.writes(conv2d_nchw[v_nn, v_ff, v_yy, v_xx])
                with T.init():
                    conv2d_nchw[v_nn, v_ff, v_yy, v_xx] = T.float32(0)
                conv2d_nchw[v_nn, v_ff, v_yy, v_xx] = conv2d_nchw[v_nn, v_ff, v_yy, v_xx] + pad_temp[v_nn, v_rc, v_yy + v_ry, v_xx + v_rx] * p1[v_ff, v_rc, v_ry, v_rx]
        for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(128), T.int64(14), T.int64(14)):
            with T.block("T_add"):
                v_ax0, v_ax1, v_ax2, v_ax3 = T.axis.remap("SSSS", [ax0, ax1, ax2, ax3])
                T.reads(conv2d_nchw[v_ax0, v_ax1, v_ax2, v_ax3], p2[v_ax0, v_ax1, T.int64(0), T.int64(0)])
                T.writes(T_add[v_ax0, v_ax1, v_ax2, v_ax3])
                T_add[v_ax0, v_ax1, v_ax2, v_ax3] = conv2d_nchw[v_ax0, v_ax1, v_ax2, v_ax3] + p2[v_ax0, v_ax1, T.int64(0), T.int64(0)]
        for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(128), T.int64(14), T.int64(14)):
            with T.block("T_relu"):
                v_ax0, v_ax1, v_ax2, v_ax3 = T.axis.remap("SSSS", [ax0, ax1, ax2, ax3])
                T.reads(T_add[v_ax0, v_ax1, v_ax2, v_ax3])
                T.writes(T_relu[v_ax0, v_ax1, v_ax2, v_ax3])
                T_relu[v_ax0, v_ax1, v_ax2, v_ax3] = T.max(T_add[v_ax0, v_ax1, v_ax2, v_ax3], T.float32(0))
2024-04-29 16:31:37 [INFO] [task_scheduler.cc:164] Total 3 design space(s) generated
2024-04-29 16:31:37 [INFO] [task_scheduler.cc:170] Design space #0:
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(1664), T.int64(14), T.int64(14)), "float32"), p1: T.Buffer((T.int64(128), T.int64(1664), T.int64(1), T.int64(1)), "float32"), p2: T.Buffer((T.int64(1), T.int64(128), T.int64(1), T.int64(1)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(128), T.int64(14), T.int64(14)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        with T.block("root"):
            T.reads()
            T.writes()
            T.block_attr({"meta_schedule.unroll_explicit": 64})
            conv2d_nchw_local = T.alloc_buffer((T.int64(1), T.int64(128), T.int64(14), T.int64(14)), scope="local")
            pad_temp_shared = T.alloc_buffer((T.int64(1), T.int64(1664), T.int64(14), T.int64(14)), scope="shared")
            p1_shared = T.alloc_buffer((T.int64(128), T.int64(1664), T.int64(1), T.int64(1)), scope="shared")
            for nn_0_ff_0_yy_0_xx_0_fused in T.thread_binding(T.int64(7), thread="blockIdx.x"):
                for nn_1_ff_1_yy_1_xx_1_fused in T.thread_binding(T.int64(2), thread="vthread.x"):
                    for nn_2_ff_2_yy_2_xx_2_fused in T.thread_binding(T.int64(16), thread="threadIdx.x"):
                        for rc_0, ry_0, rx_0 in T.grid(T.int64(1), T.int64(1), T.int64(1)):
                            for ax0_ax1_ax2_ax3_fused in range(T.int64(46592)):
                                with T.block("pad_temp_shared"):
                                    v0 = T.axis.spatial(T.int64(1), T.int64(0))
                                    v1 = T.axis.spatial(T.int64(1664), ax0_ax1_ax2_ax3_fused // T.int64(28))
                                    v2 = T.axis.spatial(T.int64(14), nn_0_ff_0_yy_0_xx_0_fused * T.int64(2) + ax0_ax1_ax2_ax3_fused % T.int64(28) // T.int64(14))
                                    v3 = T.axis.spatial(T.int64(14), ax0_ax1_ax2_ax3_fused % T.int64(14))
                                    T.reads(p0[v0, v1, v2, v3])
                                    T.writes(pad_temp_shared[v0, v1, v2, v3])
                                    T.block_attr({"meta_schedule.cooperative_fetch": 3})
                                    pad_temp_shared[v0, v1, v2, v3] = p0[v0, v1, v2, v3]
                            for ax0_ax1_ax2_ax3_fused in range(T.int64(212992)):
                                with T.block("p1_shared"):
                                    v0 = T.axis.spatial(T.int64(128), ax0_ax1_ax2_ax3_fused // T.int64(1664))
                                    v1 = T.axis.spatial(T.int64(1664), ax0_ax1_ax2_ax3_fused % T.int64(1664))
                                    v2 = T.axis.spatial(T.int64(1), T.int64(0))
                                    v3 = T.axis.spatial(T.int64(1), T.int64(0))
                                    T.reads(p1[v0, v1, v2, v3])
                                    T.writes(p1_shared[v0, v1, v2, v3])
                                    T.block_attr({"meta_schedule.cooperative_fetch": 4})
                                    p1_shared[v0, v1, v2, v3] = p1[v0, v1, v2, v3]
                            for rc_1, ry_1, rx_1, nn_3, ff_3, yy_3, xx_3, rc_2, ry_2, rx_2, nn_4, ff_4, yy_4, xx_4 in T.grid(T.int64(416), T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(1), T.int64(2), T.int64(4), T.int64(1), T.int64(1), T.int64(1), T.int64(4), T.int64(1), T.int64(7)):
                                with T.block("conv2d_nchw"):
                                    v_nn = T.axis.spatial(T.int64(1), nn_3 + nn_4)
                                    v_ff = T.axis.spatial(T.int64(128), nn_1_ff_1_yy_1_xx_1_fused * T.int64(64) + nn_2_ff_2_yy_2_xx_2_fused // T.int64(2) * T.int64(8) + ff_3 * T.int64(4) + ff_4)
                                    v_yy = T.axis.spatial(T.int64(14), nn_0_ff_0_yy_0_xx_0_fused * T.int64(2) + nn_2_ff_2_yy_2_xx_2_fused % T.int64(2) + yy_3 + yy_4)
                                    v_xx = T.axis.spatial(T.int64(14), xx_3 * T.int64(7) + xx_4)
                                    v_rc = T.axis.reduce(T.int64(1664), rc_0 * T.int64(1664) + rc_1 * T.int64(4) + rc_2)
                                    v_ry = T.axis.reduce(T.int64(1), ry_0 + ry_1 + ry_2)
                                    v_rx = T.axis.reduce(T.int64(1), rx_0 + rx_1 + rx_2)
                                    T.reads(pad_temp_shared[v_nn, v_rc, v_yy + v_ry, v_xx + v_rx], p1_shared[v_ff, v_rc, v_ry, v_rx])
                                    T.writes(conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx])
                                    T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 32, "meta_schedule.tiling_structure": "SSSRRSRS"})
                                    with T.init():
                                        conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx] = T.float32(0)
                                    conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx] = conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx] + pad_temp_shared[v_nn, v_rc, v_yy + v_ry, v_xx + v_rx] * p1_shared[v_ff, v_rc, v_ry, v_rx]
                        for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(8), T.int64(1), T.int64(14)):
                            with T.block("conv2d_nchw_local"):
                                v0 = T.axis.spatial(T.int64(1), ax0)
                                v1 = T.axis.spatial(T.int64(128), nn_1_ff_1_yy_1_xx_1_fused * T.int64(64) + nn_2_ff_2_yy_2_xx_2_fused // T.int64(2) * T.int64(8) + ax1)
                                v2 = T.axis.spatial(T.int64(14), nn_0_ff_0_yy_0_xx_0_fused * T.int64(2) + nn_2_ff_2_yy_2_xx_2_fused % T.int64(2) + ax2)
                                v3 = T.axis.spatial(T.int64(14), ax3)
                                T.reads(conv2d_nchw_local[v0, v1, v2, v3], p2[v0, v1, T.int64(0), T.int64(0)])
                                T.writes(T_relu[v0, v1, v2, v3])
                                T_relu[v0, v1, v2, v3] = T.max(conv2d_nchw_local[v0, v1, v2, v3] + p2[v0, v1, T.int64(0), T.int64(0)], T.float32(0))
b0 = sch.get_block(name="pad_temp", func_name="main")
b1 = sch.get_block(name="conv2d_nchw", func_name="main")
b2 = sch.get_block(name="T_add", func_name="main")
b3 = sch.get_block(name="T_relu", func_name="main")
b4 = sch.get_block(name="root", func_name="main")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSSRRSRS")
l5, l6, l7, l8, l9, l10, l11 = sch.get_loops(block=b1)
v12, v13, v14, v15, v16 = sch.sample_perfect_tile(loop=l5, n=5, max_innermost_factor=64, decision=[1, 1, 1, 1, 1])
l17, l18, l19, l20, l21 = sch.split(loop=l5, factors=[v12, v13, v14, v15, v16], preserve_unit_iters=True)
v22, v23, v24, v25, v26 = sch.sample_perfect_tile(loop=l6, n=5, max_innermost_factor=64, decision=[1, 2, 8, 2, 4])
l27, l28, l29, l30, l31 = sch.split(loop=l6, factors=[v22, v23, v24, v25, v26], preserve_unit_iters=True)
v32, v33, v34, v35, v36 = sch.sample_perfect_tile(loop=l7, n=5, max_innermost_factor=64, decision=[7, 1, 2, 1, 1])
l37, l38, l39, l40, l41 = sch.split(loop=l7, factors=[v32, v33, v34, v35, v36], preserve_unit_iters=True)
v42, v43, v44, v45, v46 = sch.sample_perfect_tile(loop=l8, n=5, max_innermost_factor=64, decision=[1, 1, 1, 2, 7])
l47, l48, l49, l50, l51 = sch.split(loop=l8, factors=[v42, v43, v44, v45, v46], preserve_unit_iters=True)
v52, v53, v54 = sch.sample_perfect_tile(loop=l9, n=3, max_innermost_factor=64, decision=[1, 416, 4])
l55, l56, l57 = sch.split(loop=l9, factors=[v52, v53, v54], preserve_unit_iters=True)
v58, v59, v60 = sch.sample_perfect_tile(loop=l10, n=3, max_innermost_factor=64, decision=[1, 1, 1])
l61, l62, l63 = sch.split(loop=l10, factors=[v58, v59, v60], preserve_unit_iters=True)
v64, v65, v66 = sch.sample_perfect_tile(loop=l11, n=3, max_innermost_factor=64, decision=[1, 1, 1])
l67, l68, l69 = sch.split(loop=l11, factors=[v64, v65, v66], preserve_unit_iters=True)
sch.reorder(l17, l27, l37, l47, l18, l28, l38, l48, l19, l29, l39, l49, l55, l61, l67, l56, l62, l68, l20, l30, l40, l50, l57, l63, l69, l21, l31, l41, l51)
l70 = sch.fuse(l17, l27, l37, l47, preserve_unit_iters=True)
sch.bind(loop=l70, thread_axis="blockIdx.x")
l71 = sch.fuse(l18, l28, l38, l48, preserve_unit_iters=True)
sch.bind(loop=l71, thread_axis="vthread.x")
l72 = sch.fuse(l19, l29, l39, l49, preserve_unit_iters=True)
sch.bind(loop=l72, thread_axis="threadIdx.x")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_low_inclusive", ann_val=32)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_high_inclusive", ann_val=1024)
b73 = sch.cache_write(block=b1, write_buffer_index=0, storage_scope="local")
sch.reverse_compute_at(block=b73, loop=l72, preserve_unit_loops=True, index=-1)
b74 = sch.cache_read(block=b1, read_buffer_index=0, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b74, loop=l67, preserve_unit_loops=True, index=-1)
l75, l76, l77, l78, l79, l80, l81, l82, l83, l84 = sch.get_loops(block=b74)
l85 = sch.fuse(l81, l82, l83, l84, preserve_unit_iters=True)
v86 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=2)
sch.annotate(block_or_loop=b74, ann_key="meta_schedule.cooperative_fetch", ann_val=v86)
b87 = sch.cache_read(block=b1, read_buffer_index=1, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b87, loop=l67, preserve_unit_loops=True, index=-1)
l88, l89, l90, l91, l92, l93, l94, l95, l96, l97 = sch.get_loops(block=b87)
l98 = sch.fuse(l94, l95, l96, l97, preserve_unit_iters=True)
v99 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b87, ann_key="meta_schedule.cooperative_fetch", ann_val=v99)
sch.reverse_compute_inline(block=b3)
sch.reverse_compute_inline(block=b2)
sch.compute_inline(block=b0)
v100 = sch.sample_categorical(candidates=[0, 16, 64, 512, 1024], probs=[0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001], decision=2)
sch.annotate(block_or_loop=b4, ann_key="meta_schedule.unroll_explicit", ann_val=v100)
2024-04-29 16:31:37 [INFO] [task_scheduler.cc:170] Design space #1:
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(1664), T.int64(14), T.int64(14)), "float32"), p1: T.Buffer((T.int64(128), T.int64(1664), T.int64(1), T.int64(1)), "float32"), p2: T.Buffer((T.int64(1), T.int64(128), T.int64(1), T.int64(1)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(128), T.int64(14), T.int64(14)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        with T.block("root"):
            T.reads()
            T.writes()
            T.block_attr({"meta_schedule.unroll_explicit": 0})
            conv2d_nchw_local = T.alloc_buffer((T.int64(1), T.int64(128), T.int64(14), T.int64(14)), scope="local")
            pad_temp_shared = T.alloc_buffer((T.int64(1), T.int64(1664), T.int64(14), T.int64(14)), scope="shared")
            p1_shared = T.alloc_buffer((T.int64(128), T.int64(1664), T.int64(1), T.int64(1)), scope="shared")
            for nn_0_ff_0_yy_0_xx_0_fused in T.thread_binding(T.int64(7), thread="blockIdx.x"):
                for nn_1_ff_1_yy_1_xx_1_fused in T.thread_binding(T.int64(2), thread="vthread.x"):
                    for nn_2_ff_2_yy_2_xx_2_fused in T.thread_binding(T.int64(16), thread="threadIdx.x"):
                        for rc_0_ry_0_rx_0_fused in T.serial(T.int64(1), annotations={"software_pipeline_async_stages": [0], "software_pipeline_order": [0, 1, 2], "software_pipeline_stage": [0, 0, 2]}):
                            for ax0_ax1_ax2_ax3_fused in range(T.int64(46592)):
                                with T.block("pad_temp_shared"):
                                    v0 = T.axis.spatial(T.int64(1), T.int64(0))
                                    v1 = T.axis.spatial(T.int64(1664), ax0_ax1_ax2_ax3_fused // T.int64(28))
                                    v2 = T.axis.spatial(T.int64(14), nn_0_ff_0_yy_0_xx_0_fused * T.int64(2) + ax0_ax1_ax2_ax3_fused % T.int64(28) // T.int64(14))
                                    v3 = T.axis.spatial(T.int64(14), ax0_ax1_ax2_ax3_fused % T.int64(14))
                                    T.reads(p0[v0, v1, v2, v3])
                                    T.writes(pad_temp_shared[v0, v1, v2, v3])
                                    T.block_attr({"meta_schedule.cooperative_fetch": 3})
                                    pad_temp_shared[v0, v1, v2, v3] = p0[v0, v1, v2, v3]
                            for ax0_ax1_ax2_ax3_fused in range(T.int64(212992)):
                                with T.block("p1_shared"):
                                    v0 = T.axis.spatial(T.int64(128), ax0_ax1_ax2_ax3_fused // T.int64(1664))
                                    v1 = T.axis.spatial(T.int64(1664), ax0_ax1_ax2_ax3_fused % T.int64(1664))
                                    v2 = T.axis.spatial(T.int64(1), T.int64(0))
                                    v3 = T.axis.spatial(T.int64(1), T.int64(0))
                                    T.reads(p1[v0, v1, v2, v3])
                                    T.writes(p1_shared[v0, v1, v2, v3])
                                    T.block_attr({"meta_schedule.cooperative_fetch": 4})
                                    p1_shared[v0, v1, v2, v3] = p1[v0, v1, v2, v3]
                            for rc_1, ry_1, rx_1, nn_3, ff_3, yy_3, xx_3, rc_2, ry_2, rx_2, nn_4, ff_4, yy_4, xx_4 in T.grid(T.int64(416), T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(1), T.int64(2), T.int64(4), T.int64(1), T.int64(1), T.int64(1), T.int64(4), T.int64(1), T.int64(7)):
                                with T.block("conv2d_nchw"):
                                    v_nn = T.axis.spatial(T.int64(1), nn_3 + nn_4)
                                    v_ff = T.axis.spatial(T.int64(128), nn_1_ff_1_yy_1_xx_1_fused * T.int64(64) + nn_2_ff_2_yy_2_xx_2_fused // T.int64(2) * T.int64(8) + ff_3 * T.int64(4) + ff_4)
                                    v_yy = T.axis.spatial(T.int64(14), nn_0_ff_0_yy_0_xx_0_fused * T.int64(2) + nn_2_ff_2_yy_2_xx_2_fused % T.int64(2) + yy_3 + yy_4)
                                    v_xx = T.axis.spatial(T.int64(14), xx_3 * T.int64(7) + xx_4)
                                    v_rc = T.axis.reduce(T.int64(1664), rc_1 * T.int64(4) + rc_2)
                                    v_ry = T.axis.reduce(T.int64(1), ry_1 + ry_2)
                                    v_rx = T.axis.reduce(T.int64(1), rx_1 + rx_2)
                                    T.reads(pad_temp_shared[v_nn, v_rc, v_yy + v_ry, v_xx + v_rx], p1_shared[v_ff, v_rc, v_ry, v_rx])
                                    T.writes(conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx])
                                    T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 32, "meta_schedule.tiling_structure": "SSSRRSRS"})
                                    with T.init():
                                        conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx] = T.float32(0)
                                    conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx] = conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx] + pad_temp_shared[v_nn, v_rc, v_yy + v_ry, v_xx + v_rx] * p1_shared[v_ff, v_rc, v_ry, v_rx]
                        for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(8), T.int64(1), T.int64(14)):
                            with T.block("conv2d_nchw_local"):
                                v0 = T.axis.spatial(T.int64(1), ax0)
                                v1 = T.axis.spatial(T.int64(128), nn_1_ff_1_yy_1_xx_1_fused * T.int64(64) + nn_2_ff_2_yy_2_xx_2_fused // T.int64(2) * T.int64(8) + ax1)
                                v2 = T.axis.spatial(T.int64(14), nn_0_ff_0_yy_0_xx_0_fused * T.int64(2) + nn_2_ff_2_yy_2_xx_2_fused % T.int64(2) + ax2)
                                v3 = T.axis.spatial(T.int64(14), ax3)
                                T.reads(conv2d_nchw_local[v0, v1, v2, v3], p2[v0, v1, T.int64(0), T.int64(0)])
                                T.writes(T_relu[v0, v1, v2, v3])
                                T_relu[v0, v1, v2, v3] = T.max(conv2d_nchw_local[v0, v1, v2, v3] + p2[v0, v1, T.int64(0), T.int64(0)], T.float32(0))
b0 = sch.get_block(name="pad_temp", func_name="main")
b1 = sch.get_block(name="conv2d_nchw", func_name="main")
b2 = sch.get_block(name="T_add", func_name="main")
b3 = sch.get_block(name="T_relu", func_name="main")
b4 = sch.get_block(name="root", func_name="main")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSSRRSRS")
l5, l6, l7, l8, l9, l10, l11 = sch.get_loops(block=b1)
v12, v13, v14, v15, v16 = sch.sample_perfect_tile(loop=l5, n=5, max_innermost_factor=64, decision=[1, 1, 1, 1, 1])
l17, l18, l19, l20, l21 = sch.split(loop=l5, factors=[v12, v13, v14, v15, v16], preserve_unit_iters=True)
v22, v23, v24, v25, v26 = sch.sample_perfect_tile(loop=l6, n=5, max_innermost_factor=64, decision=[1, 2, 8, 2, 4])
l27, l28, l29, l30, l31 = sch.split(loop=l6, factors=[v22, v23, v24, v25, v26], preserve_unit_iters=True)
v32, v33, v34, v35, v36 = sch.sample_perfect_tile(loop=l7, n=5, max_innermost_factor=64, decision=[7, 1, 2, 1, 1])
l37, l38, l39, l40, l41 = sch.split(loop=l7, factors=[v32, v33, v34, v35, v36], preserve_unit_iters=True)
v42, v43, v44, v45, v46 = sch.sample_perfect_tile(loop=l8, n=5, max_innermost_factor=64, decision=[1, 1, 1, 2, 7])
l47, l48, l49, l50, l51 = sch.split(loop=l8, factors=[v42, v43, v44, v45, v46], preserve_unit_iters=True)
v52, v53, v54 = sch.sample_perfect_tile(loop=l9, n=3, max_innermost_factor=64, decision=[1, 416, 4])
l55, l56, l57 = sch.split(loop=l9, factors=[v52, v53, v54], preserve_unit_iters=True)
v58, v59, v60 = sch.sample_perfect_tile(loop=l10, n=3, max_innermost_factor=64, decision=[1, 1, 1])
l61, l62, l63 = sch.split(loop=l10, factors=[v58, v59, v60], preserve_unit_iters=True)
v64, v65, v66 = sch.sample_perfect_tile(loop=l11, n=3, max_innermost_factor=64, decision=[1, 1, 1])
l67, l68, l69 = sch.split(loop=l11, factors=[v64, v65, v66], preserve_unit_iters=True)
sch.reorder(l17, l27, l37, l47, l18, l28, l38, l48, l19, l29, l39, l49, l55, l61, l67, l56, l62, l68, l20, l30, l40, l50, l57, l63, l69, l21, l31, l41, l51)
l70 = sch.fuse(l17, l27, l37, l47, preserve_unit_iters=True)
sch.bind(loop=l70, thread_axis="blockIdx.x")
l71 = sch.fuse(l18, l28, l38, l48, preserve_unit_iters=True)
sch.bind(loop=l71, thread_axis="vthread.x")
l72 = sch.fuse(l19, l29, l39, l49, preserve_unit_iters=True)
sch.bind(loop=l72, thread_axis="threadIdx.x")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_low_inclusive", ann_val=32)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_high_inclusive", ann_val=1024)
b73 = sch.cache_write(block=b1, write_buffer_index=0, storage_scope="local")
sch.reverse_compute_at(block=b73, loop=l72, preserve_unit_loops=True, index=-1)
b74 = sch.cache_read(block=b1, read_buffer_index=0, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b74, loop=l67, preserve_unit_loops=True, index=-1)
l75, l76, l77, l78, l79, l80, l81, l82, l83, l84 = sch.get_loops(block=b74)
l85 = sch.fuse(l81, l82, l83, l84, preserve_unit_iters=True)
v86 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=2)
sch.annotate(block_or_loop=b74, ann_key="meta_schedule.cooperative_fetch", ann_val=v86)
b87 = sch.cache_read(block=b1, read_buffer_index=1, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b87, loop=l67, preserve_unit_loops=True, index=-1)
l88, l89, l90, l91, l92, l93, l94, l95, l96, l97 = sch.get_loops(block=b87)
l98 = sch.fuse(l94, l95, l96, l97, preserve_unit_iters=True)
v99 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b87, ann_key="meta_schedule.cooperative_fetch", ann_val=v99)
l100 = sch.fuse(l55, l61, l67, preserve_unit_iters=True)
sch.annotate(block_or_loop=l100, ann_key="software_pipeline_stage", ann_val=[0, 0, 2])
sch.annotate(block_or_loop=l100, ann_key="software_pipeline_order", ann_val=[0, 1, 2])
sch.annotate(block_or_loop=l100, ann_key="software_pipeline_async_stages", ann_val=[0])
sch.reverse_compute_inline(block=b3)
sch.reverse_compute_inline(block=b2)
sch.compute_inline(block=b0)
v101 = sch.sample_categorical(candidates=[0, 16, 64, 512, 1024], probs=[0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001], decision=0)
sch.annotate(block_or_loop=b4, ann_key="meta_schedule.unroll_explicit", ann_val=v101)
2024-04-29 16:31:37 [INFO] [task_scheduler.cc:170] Design space #2:
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(1664), T.int64(14), T.int64(14)), "float32"), p1: T.Buffer((T.int64(128), T.int64(1664), T.int64(1), T.int64(1)), "float32"), p2: T.Buffer((T.int64(1), T.int64(128), T.int64(1), T.int64(1)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(128), T.int64(14), T.int64(14)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        with T.block("root"):
            T.reads()
            T.writes()
            T.block_attr({"meta_schedule.unroll_explicit": 64})
            conv2d_nchw_local = T.alloc_buffer((T.int64(1), T.int64(128), T.int64(14), T.int64(14)), scope="local")
            pad_temp_shared = T.alloc_buffer((T.int64(1), T.int64(1664), T.int64(14), T.int64(14)), scope="shared")
            p1_shared = T.alloc_buffer((T.int64(128), T.int64(1664), T.int64(1), T.int64(1)), scope="shared")
            for nn_0_ff_0_yy_0_xx_0_fused in T.thread_binding(T.int64(7), thread="blockIdx.x"):
                for nn_1_ff_1_yy_1_xx_1_fused in T.thread_binding(T.int64(2), thread="vthread.x"):
                    for nn_2_ff_2_yy_2_xx_2_fused in T.thread_binding(T.int64(16), thread="threadIdx.x"):
                        for rc_0_ry_0_rx_0_fused in T.serial(T.int64(1), annotations={"software_pipeline_async_stages": [0], "software_pipeline_order": [0, 1, 2], "software_pipeline_stage": [0, 0, 3]}):
                            for ax0_ax1_ax2_ax3_fused in range(T.int64(46592)):
                                with T.block("pad_temp_shared"):
                                    v0 = T.axis.spatial(T.int64(1), T.int64(0))
                                    v1 = T.axis.spatial(T.int64(1664), ax0_ax1_ax2_ax3_fused // T.int64(28))
                                    v2 = T.axis.spatial(T.int64(14), nn_0_ff_0_yy_0_xx_0_fused * T.int64(2) + ax0_ax1_ax2_ax3_fused % T.int64(28) // T.int64(14))
                                    v3 = T.axis.spatial(T.int64(14), ax0_ax1_ax2_ax3_fused % T.int64(14))
                                    T.reads(p0[v0, v1, v2, v3])
                                    T.writes(pad_temp_shared[v0, v1, v2, v3])
                                    T.block_attr({"meta_schedule.cooperative_fetch": 3})
                                    pad_temp_shared[v0, v1, v2, v3] = p0[v0, v1, v2, v3]
                            for ax0_ax1_ax2_ax3_fused in range(T.int64(212992)):
                                with T.block("p1_shared"):
                                    v0 = T.axis.spatial(T.int64(128), ax0_ax1_ax2_ax3_fused // T.int64(1664))
                                    v1 = T.axis.spatial(T.int64(1664), ax0_ax1_ax2_ax3_fused % T.int64(1664))
                                    v2 = T.axis.spatial(T.int64(1), T.int64(0))
                                    v3 = T.axis.spatial(T.int64(1), T.int64(0))
                                    T.reads(p1[v0, v1, v2, v3])
                                    T.writes(p1_shared[v0, v1, v2, v3])
                                    T.block_attr({"meta_schedule.cooperative_fetch": 4})
                                    p1_shared[v0, v1, v2, v3] = p1[v0, v1, v2, v3]
                            for rc_1, ry_1, rx_1, nn_3, ff_3, yy_3, xx_3, rc_2, ry_2, rx_2, nn_4, ff_4, yy_4, xx_4 in T.grid(T.int64(416), T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(1), T.int64(2), T.int64(4), T.int64(1), T.int64(1), T.int64(1), T.int64(4), T.int64(1), T.int64(7)):
                                with T.block("conv2d_nchw"):
                                    v_nn = T.axis.spatial(T.int64(1), nn_3 + nn_4)
                                    v_ff = T.axis.spatial(T.int64(128), nn_1_ff_1_yy_1_xx_1_fused * T.int64(64) + nn_2_ff_2_yy_2_xx_2_fused // T.int64(2) * T.int64(8) + ff_3 * T.int64(4) + ff_4)
                                    v_yy = T.axis.spatial(T.int64(14), nn_0_ff_0_yy_0_xx_0_fused * T.int64(2) + nn_2_ff_2_yy_2_xx_2_fused % T.int64(2) + yy_3 + yy_4)
                                    v_xx = T.axis.spatial(T.int64(14), xx_3 * T.int64(7) + xx_4)
                                    v_rc = T.axis.reduce(T.int64(1664), rc_1 * T.int64(4) + rc_2)
                                    v_ry = T.axis.reduce(T.int64(1), ry_1 + ry_2)
                                    v_rx = T.axis.reduce(T.int64(1), rx_1 + rx_2)
                                    T.reads(pad_temp_shared[v_nn, v_rc, v_yy + v_ry, v_xx + v_rx], p1_shared[v_ff, v_rc, v_ry, v_rx])
                                    T.writes(conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx])
                                    T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 32, "meta_schedule.tiling_structure": "SSSRRSRS"})
                                    with T.init():
                                        conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx] = T.float32(0)
                                    conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx] = conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx] + pad_temp_shared[v_nn, v_rc, v_yy + v_ry, v_xx + v_rx] * p1_shared[v_ff, v_rc, v_ry, v_rx]
                        for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(8), T.int64(1), T.int64(14)):
                            with T.block("conv2d_nchw_local"):
                                v0 = T.axis.spatial(T.int64(1), ax0)
                                v1 = T.axis.spatial(T.int64(128), nn_1_ff_1_yy_1_xx_1_fused * T.int64(64) + nn_2_ff_2_yy_2_xx_2_fused // T.int64(2) * T.int64(8) + ax1)
                                v2 = T.axis.spatial(T.int64(14), nn_0_ff_0_yy_0_xx_0_fused * T.int64(2) + nn_2_ff_2_yy_2_xx_2_fused % T.int64(2) + ax2)
                                v3 = T.axis.spatial(T.int64(14), ax3)
                                T.reads(conv2d_nchw_local[v0, v1, v2, v3], p2[v0, v1, T.int64(0), T.int64(0)])
                                T.writes(T_relu[v0, v1, v2, v3])
                                T_relu[v0, v1, v2, v3] = T.max(conv2d_nchw_local[v0, v1, v2, v3] + p2[v0, v1, T.int64(0), T.int64(0)], T.float32(0))
b0 = sch.get_block(name="pad_temp", func_name="main")
b1 = sch.get_block(name="conv2d_nchw", func_name="main")
b2 = sch.get_block(name="T_add", func_name="main")
b3 = sch.get_block(name="T_relu", func_name="main")
b4 = sch.get_block(name="root", func_name="main")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSSRRSRS")
l5, l6, l7, l8, l9, l10, l11 = sch.get_loops(block=b1)
v12, v13, v14, v15, v16 = sch.sample_perfect_tile(loop=l5, n=5, max_innermost_factor=64, decision=[1, 1, 1, 1, 1])
l17, l18, l19, l20, l21 = sch.split(loop=l5, factors=[v12, v13, v14, v15, v16], preserve_unit_iters=True)
v22, v23, v24, v25, v26 = sch.sample_perfect_tile(loop=l6, n=5, max_innermost_factor=64, decision=[1, 2, 8, 2, 4])
l27, l28, l29, l30, l31 = sch.split(loop=l6, factors=[v22, v23, v24, v25, v26], preserve_unit_iters=True)
v32, v33, v34, v35, v36 = sch.sample_perfect_tile(loop=l7, n=5, max_innermost_factor=64, decision=[7, 1, 2, 1, 1])
l37, l38, l39, l40, l41 = sch.split(loop=l7, factors=[v32, v33, v34, v35, v36], preserve_unit_iters=True)
v42, v43, v44, v45, v46 = sch.sample_perfect_tile(loop=l8, n=5, max_innermost_factor=64, decision=[1, 1, 1, 2, 7])
l47, l48, l49, l50, l51 = sch.split(loop=l8, factors=[v42, v43, v44, v45, v46], preserve_unit_iters=True)
v52, v53, v54 = sch.sample_perfect_tile(loop=l9, n=3, max_innermost_factor=64, decision=[1, 416, 4])
l55, l56, l57 = sch.split(loop=l9, factors=[v52, v53, v54], preserve_unit_iters=True)
v58, v59, v60 = sch.sample_perfect_tile(loop=l10, n=3, max_innermost_factor=64, decision=[1, 1, 1])
l61, l62, l63 = sch.split(loop=l10, factors=[v58, v59, v60], preserve_unit_iters=True)
v64, v65, v66 = sch.sample_perfect_tile(loop=l11, n=3, max_innermost_factor=64, decision=[1, 1, 1])
l67, l68, l69 = sch.split(loop=l11, factors=[v64, v65, v66], preserve_unit_iters=True)
sch.reorder(l17, l27, l37, l47, l18, l28, l38, l48, l19, l29, l39, l49, l55, l61, l67, l56, l62, l68, l20, l30, l40, l50, l57, l63, l69, l21, l31, l41, l51)
l70 = sch.fuse(l17, l27, l37, l47, preserve_unit_iters=True)
sch.bind(loop=l70, thread_axis="blockIdx.x")
l71 = sch.fuse(l18, l28, l38, l48, preserve_unit_iters=True)
sch.bind(loop=l71, thread_axis="vthread.x")
l72 = sch.fuse(l19, l29, l39, l49, preserve_unit_iters=True)
sch.bind(loop=l72, thread_axis="threadIdx.x")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_low_inclusive", ann_val=32)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_high_inclusive", ann_val=1024)
b73 = sch.cache_write(block=b1, write_buffer_index=0, storage_scope="local")
sch.reverse_compute_at(block=b73, loop=l72, preserve_unit_loops=True, index=-1)
b74 = sch.cache_read(block=b1, read_buffer_index=0, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b74, loop=l67, preserve_unit_loops=True, index=-1)
l75, l76, l77, l78, l79, l80, l81, l82, l83, l84 = sch.get_loops(block=b74)
l85 = sch.fuse(l81, l82, l83, l84, preserve_unit_iters=True)
v86 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=2)
sch.annotate(block_or_loop=b74, ann_key="meta_schedule.cooperative_fetch", ann_val=v86)
b87 = sch.cache_read(block=b1, read_buffer_index=1, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b87, loop=l67, preserve_unit_loops=True, index=-1)
l88, l89, l90, l91, l92, l93, l94, l95, l96, l97 = sch.get_loops(block=b87)
l98 = sch.fuse(l94, l95, l96, l97, preserve_unit_iters=True)
v99 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b87, ann_key="meta_schedule.cooperative_fetch", ann_val=v99)
l100 = sch.fuse(l55, l61, l67, preserve_unit_iters=True)
sch.annotate(block_or_loop=l100, ann_key="software_pipeline_stage", ann_val=[0, 0, 3])
sch.annotate(block_or_loop=l100, ann_key="software_pipeline_order", ann_val=[0, 1, 2])
sch.annotate(block_or_loop=l100, ann_key="software_pipeline_async_stages", ann_val=[0])
sch.reverse_compute_inline(block=b3)
sch.reverse_compute_inline(block=b2)
sch.compute_inline(block=b0)
v101 = sch.sample_categorical(candidates=[0, 16, 64, 512, 1024], probs=[0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001], decision=2)
sch.annotate(block_or_loop=b4, ann_key="meta_schedule.unroll_explicit", ann_val=v101)
2024-04-29 17:29:45 [INFO] [evolutionary_search.cc:713] Generating candidates......
2024-04-29 17:29:45 [INFO] [evolutionary_search.cc:715] Picked top 0 candidate(s) from database
2024-04-29 17:29:47 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x1383f6c8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x11e6c3b8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x11e9d188)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x3671f88)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0xff71d38)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x129cb6c8)]: 495 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x10dcf2b8)]: 0 failure(s)
2024-04-29 17:29:49 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x1383f6c8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x11e6c3b8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x11e9d188)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x3671f88)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0xff71d38)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x129cb6c8)]: 983 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x10dcf2b8)]: 0 failure(s)
2024-04-29 17:29:50 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x1383f6c8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x11e6c3b8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x11e9d188)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x3671f88)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0xff71d38)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x129cb6c8)]: 1469 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x10dcf2b8)]: 0 failure(s)
2024-04-29 17:29:50 [INFO] [evolutionary_search.cc:723] Sampled 67 candidate(s)
2024-04-29 17:29:53 [INFO] [evolutionary_search.cc:621] Evolve iter #0 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x1383f6c8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x11e6c3b8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x11e9d188)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x3671f88)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0xff71d38)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x129cb6c8)]: 128 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x10dcf2b8)]: 0 failure(s)
2024-04-29 17:29:55 [INFO] [evolutionary_search.cc:621] Evolve iter #1 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x1383f6c8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x11e6c3b8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x11e9d188)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x3671f88)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0xff71d38)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x129cb6c8)]: 95 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x10dcf2b8)]: 0 failure(s)
2024-04-29 17:29:57 [INFO] [evolutionary_search.cc:621] Evolve iter #2 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x1383f6c8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x11e6c3b8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x11e9d188)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x3671f88)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0xff71d38)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x129cb6c8)]: 103 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x10dcf2b8)]: 0 failure(s)
2024-04-29 17:29:59 [INFO] [evolutionary_search.cc:621] Evolve iter #3 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x1383f6c8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x11e6c3b8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x11e9d188)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x3671f88)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0xff71d38)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x129cb6c8)]: 99 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x10dcf2b8)]: 0 failure(s)
2024-04-29 17:30:00 [INFO] [evolutionary_search.cc:649] Scores of the best 64 candidates:
[1 : 16]:	0.9971  0.9958  0.9948  0.9948  0.9946  0.9938  0.9935  0.9933  0.9925  0.9919  0.9912  0.9896  0.9884  0.9871  0.9864  0.9855
[17 : 32]:	0.9853  0.9849  0.9830  0.9823  0.9800  0.9788  0.9776  0.9775  0.9774  0.9773  0.9767  0.9761  0.9761  0.9758  0.9750  0.9744
[33 : 48]:	0.9743  0.9741  0.9735  0.9734  0.9725  0.9715  0.9710  0.9684  0.9672  0.9660  0.9643  0.9636  0.9630  0.9625  0.9624  0.9620
[49 : 64]:	0.9620  0.9618  0.9590  0.9576  0.9575  0.9570  0.9556  0.9554  0.9548  0.9545  0.9533  0.9526  0.9524  0.9521  0.9510  0.9494
2024-04-29 17:30:00 [INFO] [evolutionary_search.cc:727] Got 64 candidate(s) with evolutionary search
2024-04-29 17:30:00 [INFO] [evolutionary_search.cc:730] Sending 64 candidates(s) for measurement
2024-04-29 20:23:21 [INFO] [task_scheduler.cc:131] [Task #72: fused_nn_conv2d_add_nn_relu_35] Trial #1: GFLOPs: 660.2490. Time: 126.5326 us. Best GFLOPs: 660.2490
2024-04-29 20:23:21 [INFO] [task_scheduler.cc:131] [Task #72: fused_nn_conv2d_add_nn_relu_35] Trial #2: GFLOPs: 228.1735. Time: 366.1382 us. Best GFLOPs: 660.2490
2024-04-29 20:23:21 [INFO] [task_scheduler.cc:131] [Task #72: fused_nn_conv2d_add_nn_relu_35] Trial #3: GFLOPs: 21.3689. Time: 3909.5532 us. Best GFLOPs: 660.2490
2024-04-29 20:23:21 [INFO] [task_scheduler.cc:131] [Task #72: fused_nn_conv2d_add_nn_relu_35] Trial #4: GFLOPs: 22.6134. Time: 3694.4092 us. Best GFLOPs: 660.2490
2024-04-29 20:23:21 [INFO] [task_scheduler.cc:131] [Task #72: fused_nn_conv2d_add_nn_relu_35] Trial #5: GFLOPs: 637.2882. Time: 131.0915 us. Best GFLOPs: 660.2490
2024-04-29 20:23:21 [INFO] [task_scheduler.cc:131] [Task #72: fused_nn_conv2d_add_nn_relu_35] Trial #6: GFLOPs: 112.5690. Time: 742.1497 us. Best GFLOPs: 660.2490
2024-04-29 20:23:21 [INFO] [task_scheduler.cc:131] [Task #72: fused_nn_conv2d_add_nn_relu_35] Trial #7: GFLOPs: 1235.0069. Time: 67.6458 us. Best GFLOPs: 1235.0069
2024-04-29 20:23:21 [INFO] [task_scheduler.cc:131] [Task #72: fused_nn_conv2d_add_nn_relu_35] Trial #8: GFLOPs: 379.9510. Time: 219.8784 us. Best GFLOPs: 1235.0069
2024-04-29 20:23:21 [INFO] [task_scheduler.cc:131] [Task #72: fused_nn_conv2d_add_nn_relu_35] Trial #9: GFLOPs: 249.2524. Time: 335.1744 us. Best GFLOPs: 1235.0069
2024-04-29 20:23:21 [INFO] [task_scheduler.cc:131] [Task #72: fused_nn_conv2d_add_nn_relu_35] Trial #10: GFLOPs: 740.6768. Time: 112.7928 us. Best GFLOPs: 1235.0069
2024-04-29 20:23:21 [INFO] [task_scheduler.cc:131] [Task #72: fused_nn_conv2d_add_nn_relu_35] Trial #11: GFLOPs: 843.2722. Time: 99.0701 us. Best GFLOPs: 1235.0069
2024-04-29 20:23:21 [INFO] [task_scheduler.cc:131] [Task #72: fused_nn_conv2d_add_nn_relu_35] Trial #12: GFLOPs: 102.2525. Time: 817.0271 us. Best GFLOPs: 1235.0069
2024-04-29 20:23:21 [INFO] [task_scheduler.cc:131] [Task #72: fused_nn_conv2d_add_nn_relu_35] Trial #13: GFLOPs: 525.5275. Time: 158.9699 us. Best GFLOPs: 1235.0069
2024-04-29 20:23:21 [INFO] [task_scheduler.cc:121] [Task #72: fused_nn_conv2d_add_nn_relu_35] Trial #14: Error in building:
LocalBuilder: An exception occurred
Traceback (most recent call last):
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/exec/popen_worker.py", line 87, in main
    result = fn(*args, **kwargs)
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/meta_schedule/builder/local_builder.py", line 165, in <lambda>
    lambda x: _worker_func(*x),
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/meta_schedule/builder/local_builder.py", line 231, in _worker_func
    rt_mod: Module = f_build(mod, target, _deserialize_params(params))
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/_ffi/_ctypes/packed_func.py", line 239, in __call__
    raise_last_ffi_error()
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/_ffi/base.py", line 481, in raise_last_ffi_error
    raise py_err
  File "Objects/call.c", line 200, in PyVectorcall_Call
  File "Python/ceval.c", line 4963, in call_function
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/meta_schedule/builder/local_builder.py", line 261, in default_build
    return tvm_build(mod, target=target)
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/driver/build_module.py", line 281, in build
    rt_mod_host = _driver_ffi.tir_to_runtime(annotated_mods, target_host)
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/_ffi/_ctypes/packed_func.py", line 239, in __call__
    raise_last_ffi_error()
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/_ffi/base.py", line 481, in raise_last_ffi_error
    raise py_err
tvm.error.InternalError: Traceback (most recent call last):
  337: tvm::runtime::PackedFuncObj::Extractor<tvm::runtime::PackedFuncSubObj<tvm::runtime::TypedPackedFunc<tvm::runtime::Module (tvm::runtime::Map<tvm::Target, tvm::IRModule, void, void> const&, tvm::Target)>::AssignTypedLambda<tvm::__mk_TVM22::{lambda(tvm::runtime::Map<tvm::Target, tvm::IRModule, void, void> const&, tvm::Target)#1}>(tvm::__mk_TVM22::{lambda(tvm::runtime::Map<tvm::Target, tvm::IRModule, void, void> const&, tvm::Target)#1}, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}> >::Call(tvm::runtime::PackedFuncObj const*, std::allocator<char>, tvm::runtime::TVMArgs const&)
  336: tvm::TIRToRuntime(tvm::runtime::Map<tvm::Target, tvm::IRModule, void, void> const&, tvm::Target const&)
  335: tvm::SplitMixedModule(tvm::IRModule, tvm::Target const&, tvm::Target const&)
  334: tvm::ApplyPasses(tvm::IRModule, tvm::transform::Sequential)
  333: tvm::transform::Pass::operator()(tvm::IRModule) const
  332: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  331: tvm::transform::SequentialNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  330: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  329: tvm::tir::transform::PrimFuncPassNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  328: _ZN3tvm7runtime13PackedFun
  327: tvm::runtime::TypedPackedFunc<tvm::tir::PrimFunc (tvm::tir::PrimFunc, tvm::IRModule, tvm::transform::PassContext)>::AssignTypedLambda<tvm::tir::transform::LowerTVMBuiltin()::{lambda(tvm::tir::PrimFunc, tvm::IRModule, tvm::transform::PassContext)#1}>(tvm::tir::transform::LowerTVMBuiltin()::{lambda(tvm::tir::PrimFunc, tvm::IRModule, tvm::transform::PassContext)#1})::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}::operator()(tvm::runtime::TVMArgs const, tvm::runtime::TVMRetValue) const
  326: tvm::tir::BuiltinLower::VisitBodyAndRealizeAlloca(tvm::tir::Stmt)
  325: tvm::tir::BuiltinLower::GetMaxStack(tvm::tir::Stmt)
  324: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  323: tvm::tir::StmtFunctor<tvm::tir::Stmt (tvm::tir::Stmt const&)>::VisitStmt(tvm::tir::Stmt const&)
  322: _ZZN3tvm3tir11StmtFunctorI
  321: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  320: tvm::tir::StmtFunctor<tvm::tir::Stmt (tvm::tir::Stmt const&)>::VisitStmt(tvm::tir::Stmt const&)
  319: _ZZN3tvm3tir11StmtFunctorI
  318: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  317: tvm::tir::StmtFunctor<tvm::tir::Stmt (tvm::tir::Stmt const&)>::VisitStmt(tvm::tir::Stmt const&)
  316: _ZZN3tvm3tir11StmtFunctorI
  315: tvm::tir::BuiltinLower::VisitStmt_(tvm::tir::LetStmtNode const*)
  314: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  313: tvm::tir::StmtFunctor<tvm::tir::Stmt (tvm::tir::Stmt const&)>::VisitStmt(tvm::tir::Stmt const&)
  312: _ZZN3tvm3tir11StmtFunctorI
  311: tvm::tir::BuiltinLower::VisitStmt_(tvm::tir::LetStmtNode const*)
  310: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  309: tvm::tir::StmtFunctor<tvm::tir::Stmt (tvm::tir::Stmt const&)>::VisitStmt(tvm::tir::Stmt const&)
  308: _ZZN3tvm3tir11StmtFunctorI
  307: tvm::tir::BuiltinLower::VisitStmt_(tvm::tir::LetStmtNode const*)
  306: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  305: tvm::tir::StmtFunctor<tvm::tir::Stmt (tvm::tir::Stmt const&)>::VisitStmt(tvm::tir::Stmt const&)
  304: _ZZN3tvm3tir11StmtFunctorI
  303: tvm::tir::BuiltinLower::VisitStmt_(tvm::tir::LetStmtNode const*)
  302: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  301: tvm::tir::StmtFunctor<tvm::tir::Stmt (tvm::tir::Stmt const&)>::VisitStmt(tvm::tir::Stmt const&)
  300: _ZZN3tvm3tir11StmtFunctorI
  299: tvm::tir::BuiltinLower::VisitStmt_(tvm::tir::LetStmtNode const*)
  298: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  297: tvm::tir::StmtFunctor<tvm::tir::Stmt (tvm::tir::Stmt const&)>::VisitStmt(tvm::tir::Stmt const&)
  296: _ZZN3tvm3tir11StmtFunctorI
  295: tvm::tir::BuiltinLower::VisitStmt_(tvm::tir::LetStmtNode const*)
  294: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  293: tvm::tir::StmtFunctor<tvm::tir::Stmt (tvm::tir::Stmt const&)>::VisitStmt(tvm::tir::Stmt const&)
  292: _ZZN3tvm3tir11StmtFunctorI
  291: tvm::tir::BuiltinLower::VisitStmt_(tvm::tir::LetStmtNode const*)
  290: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  289: tvm::tir::StmtFunctor<tvm::tir::Stmt (tvm::tir::Stmt const&)>::VisitStmt(tvm::tir::Stmt const&)
  288: _ZZN3tvm3tir11StmtFunctorI
  287: tvm::tir::BuiltinLower::VisitStmt_(tvm::tir::LetStmtNode const*)
  286: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  285: tvm::tir::StmtFunctor<tvm::tir::Stmt (tvm::tir::Stmt const&)>::VisitStmt(tvm::tir::Stmt const&)
  284: _ZZN3tvm3tir11StmtFunctorI
  283: tvm::tir::BuiltinLower::VisitStmt_(tvm::tir::LetStmtNode const*)
  282: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  281: tvm::tir::StmtFunctor<tvm::tir::Stmt (tvm::tir::Stmt const&)>::VisitStmt(tvm::tir::Stmt const&)
  280: _ZZN3tvm3tir11StmtFunctorI
  279: tvm::tir::BuiltinLower::VisitStmt_(tvm::tir::AttrStmtNode const*)
  278: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  277: tvm::tir::StmtFunctor<tvm::tir::Stmt (tvm::tir::Stmt const&)>::VisitStmt(tvm::tir::Stmt const&)
  276: _ZZN3tvm3tir11StmtFunctorI
  275: tvm::tir::BuiltinLower::VisitStmt_(tvm::tir::LetStmtNode const*)
  274: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  273: tvm::tir::StmtFunctor<tvm::tir::Stmt (tvm::tir::Stmt const&)>::VisitStmt(tvm::tir::Stmt const&)
  272: _ZZN3tvm3tir11StmtFunctorI
  271: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  270: tvm::tir::StmtFunctor<tvm::tir::Stmt (tvm::tir::Stmt const&)>::VisitStmt(tvm::tir::Stmt const&)
  269: _ZZN3tvm3tir11StmtFunctorI
  268: tvm::tir::BuiltinLower::VisitStmt_(tvm::tir::LetStmtNode const*)
  267: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  266: tvm::tir::StmtFunctor<tvm::tir::Stmt (tvm::tir::Stmt const&)>::VisitStmt(tvm::tir::Stmt const&)
  265: _ZZN3tvm3tir11StmtFunctorI
  264: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  263: tvm::tir::StmtFunctor<tvm::tir::Stmt (tvm::tir::Stmt const&)>::VisitStmt(tvm::tir::Stmt const&)
  262: _ZZN3tvm3tir11StmtFunctorI
  261: tvm::tir::BuiltinLower::VisitStmt_(tvm::tir::LetStmtNode const*)
  260: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  259: tvm::tir::StmtFunctor<tvm::tir::Stmt (tvm::tir::Stmt const&)>::VisitStmt(tvm::tir::Stmt const&)
  258: _ZZN3tvm3tir11StmtFunctorI
  257: tvm::tir::BuiltinLower::VisitStmt_(tvm::tir::LetStmtNode const*)
  256: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  255: tvm::tir::StmtFunctor<tvm::tir::Stmt (tvm::tir::Stmt const&)>::VisitStmt(tvm::tir::Stmt const&)
  254: _ZZN3tvm3tir11StmtFunctorI
  253: tvm::tir::BuiltinLower::VisitStmt_(tvm::tir::AttrStmtNode const*)
  252: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  251: tvm::tir::StmtFunctor<tvm::tir::Stmt (tvm::tir::Stmt const&)>::VisitStmt(tvm::tir::Stmt const&)
  250: _ZZN3tvm3tir11StmtFunctorI
  249: tvm::tir::BuiltinLower::VisitStmt_(tvm::tir::LetStmtNode const*)
  248: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  247: tvm::tir::StmtFunctor<tvm::tir::Stmt (tvm::tir::Stmt const&)>::VisitStmt(tvm::tir::Stmt const&)
  246: _ZZN3tvm3tir11StmtFunctorI
  245: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  244: tvm::tir::StmtFunctor<tvm::tir::Stmt (tvm::tir::Stmt const&)>::VisitStmt(tvm::tir::Stmt const&)
  243: _ZZN3tvm3tir11StmtFunctorI
  242: tvm::tir::BuiltinLower::VisitStmt_(tvm::tir::LetStmtNode const*)
  241: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  240: tvm::tir::StmtFunctor<tvm::tir::Stmt (tvm::tir::Stmt const&)>::VisitStmt(tvm::tir::Stmt const&)
  239: _ZZN3tvm3tir11StmtFunctorI
  238: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  237: tvm::tir::StmtFunctor<tvm::tir::Stmt (tvm::tir::Stmt const&)>::VisitStmt(tvm::tir::Stmt const&)
  236: _ZZN3tvm3tir11StmtFunctorI
  235: tvm::tir::BuiltinLower::VisitStmt_(tvm::tir::LetStmtNode const*)
  234: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  233: tvm::tir::StmtFunctor<tvm::tir::Stmt (tvm::tir::Stmt const&)>::VisitStmt(tvm::tir::Stmt const&)
  232: _ZZN3tvm3tir11StmtFunctorI
  231: tvm::tir::BuiltinLower::VisitStmt_(tvm::tir::AttrStmtNode const*)
  230: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  229: tvm::tir::StmtFunctor<tvm::tir::Stmt (tvm::tir::Stmt const&)>::VisitStmt(tvm::tir::Stmt const&)
  228: _ZZN3tvm3tir11StmtFunctorI
  227: tvm::tir::BuiltinLower::VisitStmt_(tvm::tir::LetStmtNode const*)
  226: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  225: tvm::tir::StmtFunctor<tvm::tir::Stmt (tvm::tir::Stmt const&)>::VisitStmt(tvm::tir::Stmt const&)
  224: _ZZN3tvm3tir11StmtFunctorI
  223: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  222: tvm::tir::StmtFunctor<tvm::tir::Stmt (tvm::tir::Stmt const&)>::VisitStmt(tvm::tir::Stmt const&)
  221: _ZZN3tvm3tir11StmtFunctorI
  220: tvm::tir::BuiltinLower::VisitStmt_(tvm::tir::LetStmtNode const*)
  219: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  218: tvm::tir::StmtFunctor<tvm::tir::Stmt (tvm::tir::Stmt const&)>::VisitStmt(tvm::tir::Stmt const&)
  217: _ZZN3tvm3tir11StmtFunctorI
  216: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  215: tvm::tir::StmtFunctor<tvm::tir::Stmt (tvm::tir::Stmt const&)>::VisitStmt(tvm::tir::Stmt const&)
  214: _ZZN3tvm3tir11StmtFunctorI
  213: tvm::tir::BuiltinLower::VisitStmt_(tvm::tir::LetStmtNode const*)
  212: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  211: tvm::tir::StmtFunctor<tvm::tir::Stmt (tvm::tir::Stmt const&)>::VisitStmt(tvm::tir::Stmt const&)
  210: _ZZN3tvm3tir11StmtFunctorI
  209: tvm::tir::BuiltinLower::VisitStmt_(tvm::tir::AttrStmtNode const*)
  208: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  207: tvm::tir::StmtFunctor<tvm::tir::Stmt (tvm::tir::Stmt const&)>::VisitStmt(tvm::tir::Stmt const&)
  206: _ZZN3tvm3tir11StmtFunctorI
  205: tvm::tir::BuiltinLower::VisitStmt_(tvm::tir::LetStmtNode const*)
  204: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  203: tvm::tir::StmtFunctor<tvm::tir::Stmt (tvm::tir::Stmt const&)>::VisitStmt(tvm::tir::Stmt const&)
  202: _ZZN3tvm3tir11StmtFunctorI
  201: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  200: tvm::tir::StmtFunctor<tvm::tir::Stmt (tvm::tir::Stmt const&)>::VisitStmt(tvm::tir::Stmt const&)
  199: _ZZN3tvm3tir11StmtFunctorI
  198: tvm::tir::BuiltinLower::VisitStmt_(tvm::tir::LetStmtNode const*)
  197: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  196: tvm::tir::StmtFunctor<tvm::tir::Stmt (tvm::tir::Stmt const&)>::VisitStmt(tvm::tir::Stmt const&)
  195: _ZZN3tvm3tir11StmtFunctorI
  194: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  193: tvm::tir::StmtFunctor<tvm::tir::Stmt (tvm::tir::Stmt const&)>::VisitStmt(tvm::tir::Stmt const&)
  192: _ZZN3tvm3tir11StmtFunctorI
  191: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  190: tvm::tir::StmtFunctor<tvm::tir::Stmt (tvm::tir::Stmt const&)>::VisitStmt(tvm::tir::Stmt const&)
  189: _ZZN3tvm3tir11StmtFunctorI
  188: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  187: tvm::tir::StmtFunctor<tvm::tir::Stmt (tvm::tir::Stmt const&)>::VisitStmt(tvm::tir::Stmt const&)
  186: _ZZN3tvm3tir11StmtFunctorI
  185: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  184: tvm::tir::StmtFunctor<tvm::tir::Stmt (tvm::tir::Stmt const&)>::VisitStmt(tvm::tir::Stmt const&)
  183: _ZZN3tvm3tir11StmtFunctorI
  182: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  181: tvm::tir::StmtFunctor<tvm::tir::Stmt (tvm::tir::Stmt const&)>::VisitStmt(tvm::tir::Stmt const&)
  180: _ZZN3tvm3tir11StmtFunctorI
  179: tvm::tir::BuiltinLower::VisitStmt_(tvm::tir::AttrStmtNode const*)
  178: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  177: tvm::tir::StmtFunctor<tvm::tir::Stmt (tvm::tir::Stmt const&)>::VisitStmt(tvm::tir::Stmt const&)
  176: _ZZN3tvm3tir11StmtFunctorI
  175: tvm::tir::BuiltinLower::VisitStmt_(tvm::tir::AttrStmtNode const*)
  174: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  173: tvm::tir::StmtFunctor<tvm::tir::Stmt (tvm::tir::Stmt const&)>::VisitStmt(tvm::tir::Stmt const&)
  172: _ZZN3tvm3tir11StmtFunctorI
  171: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  170: tvm::tir::StmtFunctor<tvm::tir::Stmt (tvm::tir::Stmt const&)>::VisitStmt(tvm::tir::Stmt const&)
  169: _ZZN3tvm3tir11StmtFunctorI
  168: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  167: tvm::tir::StmtFunctor<tvm::tir::Stmt (tvm::tir::Stmt const&)>::VisitStmt(tvm::tir::Stmt const&)
  166: _ZZN3tvm3tir11StmtFunctorI
  165: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  164: tvm::tir::StmtFunctor<tvm::tir::Stmt (tvm::tir::Stmt const&)>::VisitStmt(tvm::tir::Stmt const&)
  163: _ZZN3tvm3tir11StmtFunctorI
  162: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  161: tvm::tir::StmtFunctor<tvm::tir::Stmt (tvm::tir::Stmt const&)>::VisitStmt(tvm::tir::Stmt const&)
  160: _ZZN3tvm3tir11StmtFunctorI
  159: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  158: tvm::tir::StmtFunctor<tvm::tir::Stmt (tvm::tir::Stmt const&)>::VisitStmt(tvm::tir::Stmt const&)
  157: _ZZN3tvm3tir11StmtFunctorI
  156: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  155: tvm::tir::StmtFunctor<tvm::tir::Stmt (tvm::tir::Stmt const&)>::VisitStmt(tvm::tir::Stmt const&)
  154: _ZZN3tvm3tir11StmtFunctorI
  153: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  152: tvm::tir::StmtFunctor<tvm::tir::Stmt (tvm::tir::Stmt const&)>::VisitStmt(tvm::tir::Stmt const&)
  151: _ZZN3tvm3tir11StmtFunctorIFNS
  150: tvm::runtime::Array<tvm::tir::Stmt, std::enable_if<std::is_base_of<tvm::runtime::ObjectRef, tvm::tir::StmtMutator::Internal::Mutate(tvm::tir::StmtMutator*, tvm::runtime::Array<tvm::tir::Stmt, void> const&)::{lambda(tvm::tir::Stmt const&)#1}>::value, void>::type> tvm::tir::StmtMutator::Internal::MutateArray<tvm::tir::Stmt, tvm::tir::StmtMutator::Internal::Mutate(tvm::tir::StmtMutator*, tvm::runtime::Array<tvm::tir::Stmt, void> const&)::{lambda(tvm::tir::Stmt const&)#1}>(tvm::tir::StmtMutator*, std::enable_if<std::is_base_of<tvm::runtime::ObjectRef, tvm::tir::StmtMutator::Internal::Mutate(tvm::tir::StmtMutator*, tvm::runtime::Array<tvm::tir::Stmt, void> const&)::{lambda(tvm::tir::Stmt const&)#1}>::value, void>::type const&, tvm::tir::StmtMutator::Internal::Mutate(tvm::tir::StmtMutator*, tvm::runtime::Array<tvm::tir::Stmt, void> const&)::{lambda(tvm::tir::Stmt const&)#1})
  149: tvm::runtime::ObjectPtr<tvm::runtime::Object> tvm::runtime::Array<tvm::tir::Stmt, void>::MapHelper<tvm::tir::StmtMutator::Internal::Mutate(tvm::tir::StmtMutator*, tvm::runtime::Array<tvm::tir::Stmt, void> const&)::{lambda(tvm::tir::Stmt const&)#1}, tvm::tir::Stmt>(tvm::runtime::Object, tvm::tir::StmtMutator::Internal::Mutate(tvm::tir::StmtMutator*, tvm::runtime::Array<tvm::tir::Stmt, void> const&)::{lambda(tvm::tir::Stmt const&)#1})
  148: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  147: tvm::tir::StmtFunctor<tvm::tir::Stmt (tvm::tir::Stmt const&)>::VisitStmt(tvm::tir::Stmt const&)
  146: _ZZN3tvm3tir11StmtFunctorI
  145: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  144: tvm::tir::StmtFunctor<tvm::tir::Stmt (tvm::tir::Stmt const&)>::VisitStmt(tvm::tir::Stmt const&)
  143: _ZZN3tvm3tir11StmtFunctorI
  142: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  141: tvm::tir::StmtFunctor<tvm::tir::Stmt (tvm::tir::Stmt const&)>::VisitStmt(tvm::tir::Stmt const&)
  140: _ZZN3tvm3tir11StmtFunctorI
  139: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  138: tvm::tir::StmtFunctor<tvm::tir::Stmt (tvm::tir::Stmt const&)>::VisitStmt(tvm::tir::Stmt const&)
  137: _ZZN3tvm3tir11StmtFunctorI
  136: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  135: tvm::tir::StmtFunctor<tvm::tir::Stmt (tvm::tir::Stmt const&)>::VisitStmt(tvm::tir::Stmt const&)
  134: _ZZN3tvm3tir11StmtFunctorI
  133: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  132: tvm::tir::StmtFunctor<tvm::tir::Stmt (tvm::tir::Stmt const&)>::VisitStmt(tvm::tir::Stmt const&)
  131: _ZZN3tvm3tir11StmtFunctorI
  130: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  129: tvm::tir::StmtFunctor<tvm::tir::Stmt (tvm::tir::Stmt const&)>::VisitStmt(tvm::tir::Stmt const&)
  128: _ZZN3tvm3tir11StmtFunctorI
  127: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  126: tvm::tir::StmtFunctor<tvm::tir::Stmt (tvm::tir::Stmt const&)>::VisitStmt(tvm::tir::Stmt const&)
  125: _ZZN3tvm3tir11StmtFunctorI
  124: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  123: tvm::tir::StmtFunctor<tvm::tir::Stmt (tvm::tir::Stmt const&)>::VisitStmt(tvm::tir::Stmt const&)
  122: _ZZN3tvm3tir11StmtFunctorI
  121: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  120: tvm::tir::StmtFunctor<tvm::tir::Stmt (tvm::tir::Stmt const&)>::VisitStmt(tvm::tir::Stmt const&)
  119: _ZZN3tvm3tir11StmtFunctorIFNS
  118: tvm::runtime::Array<tvm::tir::Stmt, std::enable_if<std::is_base_of<tvm::runtime::ObjectRef, tvm::tir::StmtMutator::Internal::Mutate(tvm::tir::StmtMutator*, tvm::runtime::Array<tvm::tir::Stmt, void> const&)::{lambda(tvm::tir::Stmt const&)#1}>::value, void>::type> tvm::tir::StmtMutator::Internal::MutateArray<tvm::tir::Stmt, tvm::tir::StmtMutator::Internal::Mutate(tvm::tir::StmtMutator*, tvm::runtime::Array<tvm::tir::Stmt, void> const&)::{lambda(tvm::tir::Stmt const&)#1}>(tvm::tir::StmtMutator*, std::enable_if<std::is_base_of<tvm::runtime::ObjectRef, tvm::tir::StmtMutator::Internal::Mutate(tvm::tir::StmtMutator*, tvm::runtime::Array<tvm::tir::Stmt, void> const&)::{lambda(tvm::tir::Stmt const&)#1}>::value, void>::type const&, tvm::tir::StmtMutator::Internal::Mutate(tvm::tir::StmtMutator*, tvm::runtime::Array<tvm::tir::Stmt, void> const&)::{lambda(tvm::tir::Stmt const&)#1})
  117: tvm::runtime::ObjectPtr<tvm::runtime::Object> tvm::runtime::Array<tvm::tir::Stmt, void>::MapHelper<tvm::tir::StmtMutator::Internal::Mutate(tvm::tir::StmtMutator*, tvm::runtime::Array<tvm::tir::Stmt, void> const&)::{lambda(tvm::tir::Stmt const&)#1}, tvm::tir::Stmt>(tvm::runtime::Object, tvm::tir::StmtMutator::Internal::Mutate(tvm::tir::StmtMutator*, tvm::runtime::Array<tvm::tir::Stmt, void> const&)::{lambda(tvm::tir::Stmt const&)#1})
  116: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  115: tvm::tir::StmtFunctor<tvm::tir::Stmt (tvm::tir::Stmt const&)>::VisitStmt(tvm::tir::Stmt const&)
  114: _ZZN3tvm3tir11StmtFunctorI
  113: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  112: tvm::tir::StmtFunctor<tvm::tir::Stmt (tvm::tir::Stmt const&)>::VisitStmt(tvm::tir::Stmt const&)
  111: _ZZN3tvm3tir11StmtFunctorI
  110: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  109: tvm::tir::StmtFunctor<tvm::tir::Stmt (tvm::tir::Stmt const&)>::VisitStmt(tvm::tir::Stmt const&)
  108: _ZZN3tvm3tir11StmtFunctorI
  107: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  106: tvm::tir::StmtFunctor<tvm::tir::Stmt (tvm::tir::Stmt const&)>::VisitStmt(tvm::tir::Stmt const&)
  105: _ZZN3tvm3tir11StmtFunctorI
  104: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  103: tvm::tir::StmtFunctor<tvm::tir::Stmt (tvm::tir::Stmt const&)>::VisitStmt(tvm::tir::Stmt const&)
  102: _ZZN3tvm3tir11StmtFunctorI
  101: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  100: tvm::tir::StmtFunctor<tvm::tir::Stmt (tvm::tir::Stmt const&)>::VisitStmt(tvm::tir::Stmt const&)
  99: _ZZN3tvm3tir11StmtFunctorI
  98: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  97: tvm::tir::StmtFunctor<tvm::tir::Stmt (tvm::tir::Stmt const&)>::VisitStmt(tvm::tir::Stmt const&)
  96: _ZZN3tvm3tir11StmtFunctorI
  95: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  94: tvm::tir::StmtFunctor<tvm::tir::Stmt (tvm::tir::Stmt const&)>::VisitStmt(tvm::tir::Stmt const&)
  93: _ZZN3tvm3tir11StmtFunctorI
  92: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  91: tvm::tir::StmtFunctor<tvm::tir::Stmt (tvm::tir::Stmt const&)>::VisitStmt(tvm::tir::Stmt const&)
  90: _ZZN3tvm3tir11StmtFunctorI
  89: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  88: tvm::tir::StmtFunctor<tvm::tir::Stmt (tvm::tir::Stmt const&)>::VisitStmt(tvm::tir::Stmt const&)
  87: _ZZN3tvm3tir11StmtFunctorI
  86: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  85: tvm::tir::StmtFunctor<tvm::tir::Stmt (tvm::tir::Stmt const&)>::VisitStmt(tvm::tir::Stmt const&)
  84: _ZZN3tvm3tir11StmtFunctorIFNS
  83: tvm::runtime::Array<tvm::tir::Stmt, std::enable_if<std::is_base_of<tvm::runtime::ObjectRef, tvm::tir::StmtMutator::Internal::Mutate(tvm::tir::StmtMutator*, tvm::runtime::Array<tvm::tir::Stmt, void> const&)::{lambda(tvm::tir::Stmt const&)#1}>::value, void>::type> tvm::tir::StmtMutator::Internal::MutateArray<tvm::tir::Stmt, tvm::tir::StmtMutator::Internal::Mutate(tvm::tir::StmtMutator*, tvm::runtime::Array<tvm::tir::Stmt, void> const&)::{lambda(tvm::tir::Stmt const&)#1}>(tvm::tir::StmtMutator*, std::enable_if<std::is_base_of<tvm::runtime::ObjectRef, tvm::tir::StmtMutator::Internal::Mutate(tvm::tir::StmtMutator*, tvm::runtime::Array<tvm::tir::Stmt, void> const&)::{lambda(tvm::tir::Stmt const&)#1}>::value, void>::type const&, tvm::tir::StmtMutator::Internal::Mutate(tvm::tir::StmtMutator*, tvm::runtime::Array<tvm::tir::Stmt, void> const&)::{lambda(tvm::tir::Stmt const&)#1})
  82: tvm::runtime::ObjectPtr<tvm::runtime::Object> tvm::runtime::Array<tvm::tir::Stmt, void>::MapHelper<tvm::tir::StmtMutator::Internal::Mutate(tvm::tir::StmtMutator*, tvm::runtime::Array<tvm::tir::Stmt, void> const&)::{lambda(tvm::tir::Stmt const&)#1}, tvm::tir::Stmt>(tvm::runtime::Object, tvm::tir::StmtMutator::Internal::Mutate(tvm::tir::StmtMutator*, tvm::runtime::Array<tvm::tir::Stmt, void> const&)::{lambda(tvm::tir::Stmt const&)#1})
  81: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  80: tvm::tir::StmtFunctor<tvm::tir::Stmt (tvm::tir::Stmt const&)>::VisitStmt(tvm::tir::Stmt const&)
  79: _ZZN3tvm3tir11StmtFunctorI
  78: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  77: tvm::tir::StmtFunctor<tvm::tir::Stmt (tvm::tir::Stmt const&)>::VisitStmt(tvm::tir::Stmt const&)
  76: _ZZN3tvm3tir11StmtFunctorI
  75: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  74: tvm::tir::StmtFunctor<tvm::tir::Stmt (tvm::tir::Stmt const&)>::VisitStmt(tvm::tir::Stmt const&)
  73: _ZZN3tvm3tir11StmtFunctorI
  72: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  71: tvm::tir::StmtFunctor<tvm::tir::Stmt (tvm::tir::Stmt const&)>::VisitStmt(tvm::tir::Stmt const&)
  70: _ZZN3tvm3tir11StmtFunctorI
  69: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  68: tvm::tir::StmtFunctor<tvm::tir::Stmt (tvm::tir::Stmt const&)>::VisitStmt(tvm::tir::Stmt const&)
  67: _ZZN3tvm3tir11StmtFunctorI
  66: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  65: tvm::tir::StmtFunctor<tvm::tir::Stmt (tvm::tir::Stmt const&)>::VisitStmt(tvm::tir::Stmt const&)
  64: _ZZN3tvm3tir11StmtFunctorI
  63: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  62: tvm::tir::StmtFunctor<tvm::tir::Stmt (tvm::tir::Stmt const&)>::VisitStmt(tvm::tir::Stmt const&)
  61: _ZZN3tvm3tir11StmtFunctorI
  60: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  59: tvm::tir::StmtFunctor<tvm::tir::Stmt (tvm::tir::Stmt const&)>::VisitStmt(tvm::tir::Stmt const&)
  58: _ZZN3tvm3tir11StmtFunctorI
  57: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  56: tvm::tir::StmtFunctor<tvm::tir::Stmt (tvm::tir::Stmt const&)>::VisitStmt(tvm::tir::Stmt const&)
  55: _ZZN3tvm3tir11StmtFunctorI
  54: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  53: tvm::tir::StmtFunctor<tvm::tir::Stmt (tvm::tir::Stmt const&)>::VisitStmt(tvm::tir::Stmt const&)
  52: _ZZN3tvm3tir11StmtFunctorI
  51: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  50: tvm::tir::StmtFunctor<tvm::tir::Stmt (tvm::tir::Stmt const&)>::VisitStmt(tvm::tir::Stmt const&)
  49: _ZZN3tvm3tir11StmtFunctorIFNS
  48: tvm::runtime::Array<tvm::tir::Stmt, std::enable_if<std::is_base_of<tvm::runtime::ObjectRef, tvm::tir::StmtMutator::Internal::Mutate(tvm::tir::StmtMutator*, tvm::runtime::Array<tvm::tir::Stmt, void> const&)::{lambda(tvm::tir::Stmt const&)#1}>::value, void>::type> tvm::tir::StmtMutator::Internal::MutateArray<tvm::tir::Stmt, tvm::tir::StmtMutator::Internal::Mutate(tvm::tir::StmtMutator*, tvm::runtime::Array<tvm::tir::Stmt, void> const&)::{lambda(tvm::tir::Stmt const&)#1}>(tvm::tir::StmtMutator*, std::enable_if<std::is_base_of<tvm::runtime::ObjectRef, tvm::tir::StmtMutator::Internal::Mutate(tvm::tir::StmtMutator*, tvm::runtime::Array<tvm::tir::Stmt, void> const&)::{lambda(tvm::tir::Stmt const&)#1}>::value, void>::type const&, tvm::tir::StmtMutator::Internal::Mutate(tvm::tir::StmtMutator*, tvm::runtime::Array<tvm::tir::Stmt, void> const&)::{lambda(tvm::tir::Stmt const&)#1})
  47: tvm::runtime::ObjectPtr<tvm::runtime::Object> tvm::runtime::Array<tvm::tir::Stmt, void>::MapHelper<tvm::tir::StmtMutator::Internal::Mutate(tvm::tir::StmtMutator*, tvm::runtime::Array<tvm::tir::Stmt, void> const&)::{lambda(tvm::tir::Stmt const&)#1}, tvm::tir::Stmt>(tvm::runtime::Object, tvm::tir::StmtMutator::Internal::Mutate(tvm::tir::StmtMutator*, tvm::runtime::Array<tvm::tir::Stmt, void> const&)::{lambda(tvm::tir::Stmt const&)#1})
  46: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  45: tvm::tir::StmtFunctor<tvm::tir::Stmt (tvm::tir::Stmt const&)>::VisitStmt(tvm::tir::Stmt const&)
  44: _ZZN3tvm3tir11StmtFunctorI
  43: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  42: tvm::tir::StmtFunctor<tvm::tir::Stmt (tvm::tir::Stmt const&)>::VisitStmt(tvm::tir::Stmt const&)
  41: _ZZN3tvm3tir11StmtFunctorI
  40: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  39: tvm::tir::StmtFunctor<tvm::tir::Stmt (tvm::tir::Stmt const&)>::VisitStmt(tvm::tir::Stmt const&)
  38: _ZZN3tvm3tir11StmtFunctorI
  37: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  36: tvm::tir::StmtFunctor<tvm::tir::Stmt (tvm::tir::Stmt const&)>::VisitStmt(tvm::tir::Stmt const&)
  35: _ZZN3tvm3tir11StmtFunctorI
  34: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  33: tvm::tir::StmtFunctor<tvm::tir::Stmt (tvm::tir::Stmt const&)>::VisitStmt(tvm::tir::Stmt const&)
  32: _ZZN3tvm3tir11StmtFunctorI
  31: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  30: tvm::tir::StmtFunctor<tvm::tir::Stmt (tvm::tir::Stmt const&)>::VisitStmt(tvm::tir::Stmt const&)
  29: _ZZN3tvm3tir11StmtFunctorI
  28: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  27: tvm::tir::StmtFunctor<tvm::tir::Stmt (tvm::tir::Stmt const&)>::VisitStmt(tvm::tir::Stmt const&)
  26: _ZZN3tvm3tir11StmtFunctorI
  25: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  24: tvm::tir::StmtFunctor<tvm::tir::Stmt (tvm::tir::Stmt const&)>::VisitStmt(tvm::tir::Stmt const&)
  23: _ZZN3tvm3tir11StmtFunctorIFNS
  22: tvm::runtime::Array<tvm::tir::Stmt, std::enable_if<std::is_base_of<tvm::runtime::ObjectRef, tvm::tir::StmtMutator::Internal::Mutate(tvm::tir::StmtMutator*, tvm::runtime::Array<tvm::tir::Stmt, void> const&)::{lambda(tvm::tir::Stmt const&)#1}>::value, void>::type> tvm::tir::StmtMutator::Internal::MutateArray<tvm::tir::Stmt, tvm::tir::StmtMutator::Internal::Mutate(tvm::tir::StmtMutator*, tvm::runtime::Array<tvm::tir::Stmt, void> const&)::{lambda(tvm::tir::Stmt const&)#1}>(tvm::tir::StmtMutator*, std::enable_if<std::is_base_of<tvm::runtime::ObjectRef, tvm::tir::StmtMutator::Internal::Mutate(tvm::tir::StmtMutator*, tvm::runtime::Array<tvm::tir::Stmt, void> const&)::{lambda(tvm::tir::Stmt const&)#1}>::value, void>::type const&, tvm::tir::StmtMutator::Internal::Mutate(tvm::tir::StmtMutator*, tvm::runtime::Array<tvm::tir::Stmt, void> const&)::{lambda(tvm::tir::Stmt const&)#1})
  21: tvm::runtime::ObjectPtr<tvm::runtime::Object> tvm::runtime::Array<tvm::tir::Stmt, void>::MapHelper<tvm::tir::StmtMutator::Internal::Mutate(tvm::tir::StmtMutator*, tvm::runtime::Array<tvm::tir::Stmt, void> const&)::{lambda(tvm::tir::Stmt const&)#1}, tvm::tir::Stmt>(tvm::runtime::Object, tvm::tir::StmtMutator::Internal::Mutate(tvm::tir::StmtMutator*, tvm::runtime::Array<tvm::tir::Stmt, void> const&)::{lambda(tvm::tir::Stmt const&)#1})
  20: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  19: tvm::tir::StmtFunctor<tvm::tir::Stmt (tvm::tir::Stmt const&)>::VisitStmt(tvm::tir::Stmt const&)
  18: _ZZN3tvm3tir11StmtFunctorI
  17: tvm::tir::BuiltinLower::VisitStmt_(tvm::tir::AttrStmtNode const*)
  16: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  15: tvm::tir::StmtFunctor<tvm::tir::Stmt (tvm::tir::Stmt const&)>::VisitStmt(tvm::tir::Stmt const&)
  14: _ZZN3tvm3tir11StmtFunctorI
  13: tvm::tir::BuiltinLower::VisitStmt_(tvm::tir::LetStmtNode const*)
  12: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  11: tvm::tir::StmtFunctor<tvm::tir::Stmt (tvm::tir::Stmt const&)>::VisitStmt(tvm::tir::Stmt const&)
  10: _ZZN3tvm3tir11StmtFunctorI
  9: tvm::tir::BuiltinLower::VisitStmt_(tvm::tir::LetStmtNode const*)
  8: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  7: tvm::tir::StmtFunctor<tvm::tir::Stmt (tvm::tir::Stmt const&)>::VisitStmt(tvm::tir::Stmt const&)
  6: _ZZN3tvm3tir11StmtFunctorIFNS
  5: tvm::tir::StmtExprMutator::VisitExpr(tvm::PrimExpr const&)
  4: _ZZN3tvm3tir11ExprFunctorI
  3: tvm::tir::BuiltinLower::VisitExpr_(tvm::tir::CallNode const*)
  2: tvm::tir::BuiltinLower::MakeCallPacked(tvm::tir::CallNode const*, bool)
  1: tvm::tir::APIType(tvm::runtime::DataType)
  0: _ZN3tvm7runtime6deta
  File "/mnt/home/gverma/ceph/opt/tvm/src/tir/transforms/ir_utils.h", line 157
InternalError: Check failed: t.lanes() == 1 (4 vs. 1) : Cannot pass vector type through packed API.

# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(1664), T.int64(14), T.int64(14)), "float32"), p1: T.Buffer((T.int64(128), T.int64(1664), T.int64(1), T.int64(1)), "float32"), p2: T.Buffer((T.int64(1), T.int64(128), T.int64(1), T.int64(1)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(128), T.int64(14), T.int64(14)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        conv2d_nchw_local = T.alloc_buffer((T.int64(1), T.int64(128), T.int64(14), T.int64(14)), scope="local")
        pad_temp_shared = T.alloc_buffer((T.int64(1), T.int64(1664), T.int64(14), T.int64(14)), scope="shared")
        p1_shared = T.alloc_buffer((T.int64(128), T.int64(1664), T.int64(1), T.int64(1)), scope="shared")
        for nn_0_ff_0_yy_0_xx_0_fused in T.thread_binding(T.int64(7), thread="blockIdx.x", annotations={"pragma_auto_unroll_max_step": 1024, "pragma_unroll_explicit": 1}):
            for nn_1_ff_1_yy_1_xx_1_fused in T.thread_binding(T.int64(4), thread="vthread.x"):
                for nn_2_ff_2_yy_2_xx_2_fused in T.thread_binding(T.int64(32), thread="threadIdx.x"):
                    for nn_3_init, ff_3_init, yy_3_init, xx_3_init, nn_4_init, ff_4_init, yy_4_init, xx_4_init in T.grid(T.int64(1), T.int64(1), T.int64(14), T.int64(1), T.int64(1), T.int64(2), T.int64(1), T.int64(1)):
                        with T.block("conv2d_nchw_init"):
                            v_nn = T.axis.spatial(T.int64(1), nn_3_init + nn_4_init)
                            v_ff = T.axis.spatial(T.int64(128), nn_1_ff_1_yy_1_xx_1_fused // T.int64(2) * T.int64(64) + nn_2_ff_2_yy_2_xx_2_fused * T.int64(2) + ff_3_init * T.int64(2) + ff_4_init)
                            v_yy = T.axis.spatial(T.int64(14), yy_3_init + yy_4_init)
                            v_xx = T.axis.spatial(T.int64(14), nn_0_ff_0_yy_0_xx_0_fused * T.int64(2) + nn_1_ff_1_yy_1_xx_1_fused % T.int64(2) + xx_3_init + xx_4_init)
                            T.reads()
                            T.writes(conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx])
                            T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 32, "meta_schedule.tiling_structure": "SSSRRSRS"})
                            conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx] = T.float32(0)
                    for rc_0_ry_0_rx_0_fused in T.serial(T.int64(208), annotations={"software_pipeline_async_stages": [0], "software_pipeline_order": [0, 1, 2], "software_pipeline_stage": [0, 0, 3]}):
                        for ax0_ax1_ax2_ax3_fused_0 in range(T.int64(2)):
                            for ax0_ax1_ax2_ax3_fused_1 in T.thread_binding(T.int64(32), thread="threadIdx.x"):
                                for ax0_ax1_ax2_ax3_fused_2 in T.vectorized(T.int64(4)):
                                    with T.block("pad_temp_shared"):
                                        v0 = T.axis.spatial(T.int64(1), T.int64(0))
                                        v1 = T.axis.spatial(T.int64(1664), rc_0_ry_0_rx_0_fused * T.int64(8) + (ax0_ax1_ax2_ax3_fused_0 * T.int64(128) + ax0_ax1_ax2_ax3_fused_1 * T.int64(4) + ax0_ax1_ax2_ax3_fused_2) // T.int64(28))
                                        v2 = T.axis.spatial(T.int64(14), (ax0_ax1_ax2_ax3_fused_0 * T.int64(128) + ax0_ax1_ax2_ax3_fused_1 * T.int64(4) + ax0_ax1_ax2_ax3_fused_2) % T.int64(28) // T.int64(2))
                                        v3 = T.axis.spatial(T.int64(14), nn_0_ff_0_yy_0_xx_0_fused * T.int64(2) + (ax0_ax1_ax2_ax3_fused_0 * T.int64(128) + ax0_ax1_ax2_ax3_fused_1 * T.int64(4) + ax0_ax1_ax2_ax3_fused_2) % T.int64(2))
                                        T.where((ax0_ax1_ax2_ax3_fused_0 * T.int64(32) + ax0_ax1_ax2_ax3_fused_1) * T.int64(4) + ax0_ax1_ax2_ax3_fused_2 < T.int64(224))
                                        T.reads(p0[v0, v1, v2, v3])
                                        T.writes(pad_temp_shared[v0, v1, v2, v3])
                                        pad_temp_shared[v0, v1, v2, v3] = p0[v0, v1, v2, v3]
                        for ax0_ax1_ax2_ax3_fused_0 in range(T.int64(32)):
                            for ax0_ax1_ax2_ax3_fused_1 in T.thread_binding(T.int64(32), thread="threadIdx.x"):
                                with T.block("p1_shared"):
                                    v0 = T.axis.spatial(T.int64(128), (ax0_ax1_ax2_ax3_fused_0 * T.int64(32) + ax0_ax1_ax2_ax3_fused_1) // T.int64(8))
                                    v1 = T.axis.spatial(T.int64(1664), rc_0_ry_0_rx_0_fused * T.int64(8) + (ax0_ax1_ax2_ax3_fused_0 * T.int64(32) + ax0_ax1_ax2_ax3_fused_1) % T.int64(8))
                                    v2 = T.axis.spatial(T.int64(1), T.int64(0))
                                    v3 = T.axis.spatial(T.int64(1), T.int64(0))
                                    T.reads(p1[v0, v1, v2, v3])
                                    T.writes(p1_shared[v0, v1, v2, v3])
                                    p1_shared[v0, v1, v2, v3] = p1[v0, v1, v2, v3]
                        for rc_1, ry_1, rx_1, nn_3, ff_3, yy_3, xx_3, rc_2, ry_2, rx_2, nn_4, ff_4, yy_4, xx_4 in T.grid(T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(14), T.int64(1), T.int64(8), T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(1), T.int64(1)):
                            with T.block("conv2d_nchw_update"):
                                v_nn = T.axis.spatial(T.int64(1), nn_3 + nn_4)
                                v_ff = T.axis.spatial(T.int64(128), nn_1_ff_1_yy_1_xx_1_fused // T.int64(2) * T.int64(64) + nn_2_ff_2_yy_2_xx_2_fused * T.int64(2) + ff_3 * T.int64(2) + ff_4)
                                v_yy = T.axis.spatial(T.int64(14), yy_3 + yy_4)
                                v_xx = T.axis.spatial(T.int64(14), nn_0_ff_0_yy_0_xx_0_fused * T.int64(2) + nn_1_ff_1_yy_1_xx_1_fused % T.int64(2) + xx_3 + xx_4)
                                v_rc = T.axis.reduce(T.int64(1664), rc_0_ry_0_rx_0_fused * T.int64(8) + rc_1 * T.int64(8) + rc_2)
                                v_ry = T.axis.reduce(T.int64(1), ry_1 + ry_2)
                                v_rx = T.axis.reduce(T.int64(1), rx_1 + rx_2)
                                T.reads(conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx], pad_temp_shared[v_nn, v_rc, v_yy + v_ry, v_xx + v_rx], p1_shared[v_ff, v_rc, v_ry, v_rx])
                                T.writes(conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx])
                                T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 32, "meta_schedule.tiling_structure": "SSSRRSRS"})
                                conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx] = conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx] + pad_temp_shared[v_nn, v_rc, v_yy + v_ry, v_xx + v_rx] * p1_shared[v_ff, v_rc, v_ry, v_rx]
                    for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(2), T.int64(14), T.int64(1)):
                        with T.block("conv2d_nchw_local"):
                            v0 = T.axis.spatial(T.int64(1), ax0)
                            v1 = T.axis.spatial(T.int64(128), nn_1_ff_1_yy_1_xx_1_fused // T.int64(2) * T.int64(64) + nn_2_ff_2_yy_2_xx_2_fused * T.int64(2) + ax1)
                            v2 = T.axis.spatial(T.int64(14), ax2)
                            v3 = T.axis.spatial(T.int64(14), nn_0_ff_0_yy_0_xx_0_fused * T.int64(2) + nn_1_ff_1_yy_1_xx_1_fused % T.int64(2) + ax3)
                            T.reads(conv2d_nchw_local[v0, v1, v2, v3], p2[v0, v1, T.int64(0), T.int64(0)])
                            T.writes(T_relu[v0, v1, v2, v3])
                            T_relu[v0, v1, v2, v3] = T.max(conv2d_nchw_local[v0, v1, v2, v3] + p2[v0, v1, T.int64(0), T.int64(0)], T.float32(0))
b0 = sch.get_block(name="pad_temp", func_name="main")
b1 = sch.get_block(name="conv2d_nchw", func_name="main")
b2 = sch.get_block(name="T_add", func_name="main")
b3 = sch.get_block(name="T_relu", func_name="main")
b4 = sch.get_block(name="root", func_name="main")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSSRRSRS")
l5, l6, l7, l8, l9, l10, l11 = sch.get_loops(block=b1)
v12, v13, v14, v15, v16 = sch.sample_perfect_tile(loop=l5, n=5, max_innermost_factor=64, decision=[1, 1, 1, 1, 1])
l17, l18, l19, l20, l21 = sch.split(loop=l5, factors=[v12, v13, v14, v15, v16], preserve_unit_iters=True)
v22, v23, v24, v25, v26 = sch.sample_perfect_tile(loop=l6, n=5, max_innermost_factor=64, decision=[1, 2, 32, 1, 2])
l27, l28, l29, l30, l31 = sch.split(loop=l6, factors=[v22, v23, v24, v25, v26], preserve_unit_iters=True)
v32, v33, v34, v35, v36 = sch.sample_perfect_tile(loop=l7, n=5, max_innermost_factor=64, decision=[1, 1, 1, 14, 1])
l37, l38, l39, l40, l41 = sch.split(loop=l7, factors=[v32, v33, v34, v35, v36], preserve_unit_iters=True)
v42, v43, v44, v45, v46 = sch.sample_perfect_tile(loop=l8, n=5, max_innermost_factor=64, decision=[7, 2, 1, 1, 1])
l47, l48, l49, l50, l51 = sch.split(loop=l8, factors=[v42, v43, v44, v45, v46], preserve_unit_iters=True)
v52, v53, v54 = sch.sample_perfect_tile(loop=l9, n=3, max_innermost_factor=64, decision=[208, 1, 8])
l55, l56, l57 = sch.split(loop=l9, factors=[v52, v53, v54], preserve_unit_iters=True)
v58, v59, v60 = sch.sample_perfect_tile(loop=l10, n=3, max_innermost_factor=64, decision=[1, 1, 1])
l61, l62, l63 = sch.split(loop=l10, factors=[v58, v59, v60], preserve_unit_iters=True)
v64, v65, v66 = sch.sample_perfect_tile(loop=l11, n=3, max_innermost_factor=64, decision=[1, 1, 1])
l67, l68, l69 = sch.split(loop=l11, factors=[v64, v65, v66], preserve_unit_iters=True)
sch.reorder(l17, l27, l37, l47, l18, l28, l38, l48, l19, l29, l39, l49, l55, l61, l67, l56, l62, l68, l20, l30, l40, l50, l57, l63, l69, l21, l31, l41, l51)
l70 = sch.fuse(l17, l27, l37, l47, preserve_unit_iters=True)
sch.bind(loop=l70, thread_axis="blockIdx.x")
l71 = sch.fuse(l18, l28, l38, l48, preserve_unit_iters=True)
sch.bind(loop=l71, thread_axis="vthread.x")
l72 = sch.fuse(l19, l29, l39, l49, preserve_unit_iters=True)
sch.bind(loop=l72, thread_axis="threadIdx.x")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_low_inclusive", ann_val=32)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_high_inclusive", ann_val=1024)
b73 = sch.cache_write(block=b1, write_buffer_index=0, storage_scope="local")
sch.reverse_compute_at(block=b73, loop=l72, preserve_unit_loops=True, index=-1)
b74 = sch.cache_read(block=b1, read_buffer_index=0, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b74, loop=l67, preserve_unit_loops=True, index=-1)
l75, l76, l77, l78, l79, l80, l81, l82, l83, l84 = sch.get_loops(block=b74)
l85 = sch.fuse(l81, l82, l83, l84, preserve_unit_iters=True)
v86 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b74, ann_key="meta_schedule.cooperative_fetch", ann_val=v86)
b87 = sch.cache_read(block=b1, read_buffer_index=1, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b87, loop=l67, preserve_unit_loops=True, index=-1)
l88, l89, l90, l91, l92, l93, l94, l95, l96, l97 = sch.get_loops(block=b87)
l98 = sch.fuse(l94, l95, l96, l97, preserve_unit_iters=True)
v99 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=0)
sch.annotate(block_or_loop=b87, ann_key="meta_schedule.cooperative_fetch", ann_val=v99)
l100 = sch.fuse(l55, l61, l67, preserve_unit_iters=True)
sch.annotate(block_or_loop=l100, ann_key="software_pipeline_stage", ann_val=[0, 0, 3])
sch.annotate(block_or_loop=l100, ann_key="software_pipeline_order", ann_val=[0, 1, 2])
sch.annotate(block_or_loop=l100, ann_key="software_pipeline_async_stages", ann_val=[0])
sch.reverse_compute_inline(block=b3)
sch.reverse_compute_inline(block=b2)
sch.compute_inline(block=b0)
v101 = sch.sample_categorical(candidates=[0, 16, 64, 512, 1024], probs=[0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001], decision=4)
sch.annotate(block_or_loop=b4, ann_key="meta_schedule.unroll_explicit", ann_val=v101)
sch.enter_postproc()
sch.unannotate(block_or_loop=b74, ann_key="meta_schedule.cooperative_fetch")
l102, l103, l104, l105, l106 = sch.get_loops(block=b74)
l107, l108, l109 = sch.split(loop=l106, factors=[None, 32, 4], preserve_unit_iters=True)
sch.vectorize(loop=l109)
sch.bind(loop=l108, thread_axis="threadIdx.x")
sch.unannotate(block_or_loop=b87, ann_key="meta_schedule.cooperative_fetch")
l110, l111, l112, l113, l114 = sch.get_loops(block=b87)
l115, l116 = sch.split(loop=l114, factors=[None, 32], preserve_unit_iters=True)
sch.bind(loop=l116, thread_axis="threadIdx.x")
b117 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b117, ann_key="meta_schedule.unroll_explicit")
b118, b119, b120, b121 = sch.get_child_blocks(b117)
l122, l123, l124, l125, l126, l127, l128 = sch.get_loops(block=b118)
l129, l130, l131, l132, l133, l134 = sch.get_loops(block=b119)
l135, l136, l137, l138, l139, l140, l141, l142, l143, l144, l145, l146, l147, l148, l149, l150, l151, l152 = sch.get_loops(block=b120)
sch.annotate(block_or_loop=l135, ann_key="pragma_auto_unroll_max_step", ann_val=1024)
sch.annotate(block_or_loop=l135, ann_key="pragma_unroll_explicit", ann_val=1)
l153, l154, l155, l156, l157, l158, l159 = sch.get_loops(block=b121)
b160 = sch.get_block(name="conv2d_nchw", func_name="main")
l161, l162, l163, l164, l165, l166, l167, l168, l169, l170, l171, l172, l173, l174, l175, l176, l177, l178 = sch.get_loops(block=b160)
b179 = sch.decompose_reduction(block=b160, loop=l164)
2024-04-29 20:23:21 [INFO] [task_scheduler.cc:131] [Task #72: fused_nn_conv2d_add_nn_relu_35] Trial #15: GFLOPs: 86.8899. Time: 961.4812 us. Best GFLOPs: 1235.0069
2024-04-29 20:23:21 [INFO] [task_scheduler.cc:131] [Task #72: fused_nn_conv2d_add_nn_relu_35] Trial #16: GFLOPs: 569.6629. Time: 146.6535 us. Best GFLOPs: 1235.0069
2024-04-29 20:23:21 [INFO] [task_scheduler.cc:131] [Task #72: fused_nn_conv2d_add_nn_relu_35] Trial #17: GFLOPs: 44.0762. Time: 1895.4240 us. Best GFLOPs: 1235.0069
2024-04-29 20:23:21 [INFO] [task_scheduler.cc:131] [Task #72: fused_nn_conv2d_add_nn_relu_35] Trial #18: GFLOPs: 55.9396. Time: 1493.4506 us. Best GFLOPs: 1235.0069
2024-04-29 20:23:21 [INFO] [task_scheduler.cc:131] [Task #72: fused_nn_conv2d_add_nn_relu_35] Trial #19: GFLOPs: 835.4282. Time: 100.0003 us. Best GFLOPs: 1235.0069
2024-04-29 20:23:21 [INFO] [task_scheduler.cc:131] [Task #72: fused_nn_conv2d_add_nn_relu_35] Trial #20: GFLOPs: 472.3381. Time: 176.8713 us. Best GFLOPs: 1235.0069
2024-04-29 20:23:21 [INFO] [task_scheduler.cc:131] [Task #72: fused_nn_conv2d_add_nn_relu_35] Trial #21: GFLOPs: 275.3442. Time: 303.4131 us. Best GFLOPs: 1235.0069
2024-04-29 20:23:21 [INFO] [task_scheduler.cc:131] [Task #72: fused_nn_conv2d_add_nn_relu_35] Trial #22: GFLOPs: 1033.6299. Time: 80.8249 us. Best GFLOPs: 1235.0069
2024-04-29 20:23:21 [INFO] [task_scheduler.cc:131] [Task #72: fused_nn_conv2d_add_nn_relu_35] Trial #23: GFLOPs: 7.2868. Time: 11464.9319 us. Best GFLOPs: 1235.0069
2024-04-29 20:23:21 [INFO] [task_scheduler.cc:131] [Task #72: fused_nn_conv2d_add_nn_relu_35] Trial #24: GFLOPs: 5.7912. Time: 14425.8193 us. Best GFLOPs: 1235.0069
2024-04-29 20:23:21 [INFO] [task_scheduler.cc:131] [Task #72: fused_nn_conv2d_add_nn_relu_35] Trial #25: GFLOPs: 200.5745. Time: 416.5187 us. Best GFLOPs: 1235.0069
2024-04-29 20:23:21 [INFO] [task_scheduler.cc:131] [Task #72: fused_nn_conv2d_add_nn_relu_35] Trial #26: GFLOPs: 393.7953. Time: 212.1484 us. Best GFLOPs: 1235.0069
2024-04-29 20:23:21 [INFO] [task_scheduler.cc:131] [Task #72: fused_nn_conv2d_add_nn_relu_35] Trial #27: GFLOPs: 30.4069. Time: 2747.5027 us. Best GFLOPs: 1235.0069
2024-04-29 20:23:21 [INFO] [task_scheduler.cc:131] [Task #72: fused_nn_conv2d_add_nn_relu_35] Trial #28: GFLOPs: 549.4045. Time: 152.0611 us. Best GFLOPs: 1235.0069
2024-04-29 20:23:21 [INFO] [task_scheduler.cc:131] [Task #72: fused_nn_conv2d_add_nn_relu_35] Trial #29: GFLOPs: 642.1370. Time: 130.1016 us. Best GFLOPs: 1235.0069
2024-04-29 20:23:21 [INFO] [task_scheduler.cc:131] [Task #72: fused_nn_conv2d_add_nn_relu_35] Trial #30: GFLOPs: 183.9694. Time: 454.1137 us. Best GFLOPs: 1235.0069
2024-04-29 20:23:21 [INFO] [task_scheduler.cc:131] [Task #72: fused_nn_conv2d_add_nn_relu_35] Trial #31: GFLOPs: 407.8338. Time: 204.8458 us. Best GFLOPs: 1235.0069
2024-04-29 20:23:21 [INFO] [task_scheduler.cc:131] [Task #72: fused_nn_conv2d_add_nn_relu_35] Trial #32: GFLOPs: 225.2623. Time: 370.8701 us. Best GFLOPs: 1235.0069
2024-04-29 20:23:21 [INFO] [task_scheduler.cc:131] [Task #72: fused_nn_conv2d_add_nn_relu_35] Trial #33: GFLOPs: 6.2484. Time: 13370.2401 us. Best GFLOPs: 1235.0069
2024-04-29 20:23:21 [INFO] [task_scheduler.cc:131] [Task #72: fused_nn_conv2d_add_nn_relu_35] Trial #34: GFLOPs: 79.6502. Time: 1048.8747 us. Best GFLOPs: 1235.0069
2024-04-29 20:23:21 [INFO] [task_scheduler.cc:131] [Task #72: fused_nn_conv2d_add_nn_relu_35] Trial #35: GFLOPs: 114.3255. Time: 730.7473 us. Best GFLOPs: 1235.0069
2024-04-29 20:23:21 [INFO] [task_scheduler.cc:131] [Task #72: fused_nn_conv2d_add_nn_relu_35] Trial #36: GFLOPs: 490.9479. Time: 170.1668 us. Best GFLOPs: 1235.0069
2024-04-29 20:23:21 [INFO] [task_scheduler.cc:131] [Task #72: fused_nn_conv2d_add_nn_relu_35] Trial #37: GFLOPs: 116.6810. Time: 715.9954 us. Best GFLOPs: 1235.0069
2024-04-29 20:23:21 [INFO] [task_scheduler.cc:131] [Task #72: fused_nn_conv2d_add_nn_relu_35] Trial #38: GFLOPs: 256.7017. Time: 325.4479 us. Best GFLOPs: 1235.0069
2024-04-29 20:23:21 [INFO] [task_scheduler.cc:131] [Task #72: fused_nn_conv2d_add_nn_relu_35] Trial #39: GFLOPs: 142.9281. Time: 584.5111 us. Best GFLOPs: 1235.0069
2024-04-29 20:23:21 [INFO] [task_scheduler.cc:131] [Task #72: fused_nn_conv2d_add_nn_relu_35] Trial #40: GFLOPs: 23.4754. Time: 3558.7532 us. Best GFLOPs: 1235.0069
2024-04-29 20:23:21 [INFO] [task_scheduler.cc:131] [Task #72: fused_nn_conv2d_add_nn_relu_35] Trial #41: GFLOPs: 405.6136. Time: 205.9671 us. Best GFLOPs: 1235.0069
2024-04-29 20:23:21 [INFO] [task_scheduler.cc:131] [Task #72: fused_nn_conv2d_add_nn_relu_35] Trial #42: GFLOPs: 183.9419. Time: 454.1816 us. Best GFLOPs: 1235.0069
2024-04-29 20:23:21 [INFO] [task_scheduler.cc:131] [Task #72: fused_nn_conv2d_add_nn_relu_35] Trial #43: GFLOPs: 190.4821. Time: 438.5873 us. Best GFLOPs: 1235.0069
2024-04-29 20:23:21 [INFO] [task_scheduler.cc:131] [Task #72: fused_nn_conv2d_add_nn_relu_35] Trial #44: GFLOPs: 424.5488. Time: 196.7808 us. Best GFLOPs: 1235.0069
2024-04-29 20:23:21 [INFO] [task_scheduler.cc:131] [Task #72: fused_nn_conv2d_add_nn_relu_35] Trial #45: GFLOPs: 104.1582. Time: 802.0787 us. Best GFLOPs: 1235.0069
2024-04-29 20:23:21 [INFO] [task_scheduler.cc:131] [Task #72: fused_nn_conv2d_add_nn_relu_35] Trial #46: GFLOPs: 321.4486. Time: 259.8955 us. Best GFLOPs: 1235.0069
2024-04-29 20:23:21 [INFO] [task_scheduler.cc:131] [Task #72: fused_nn_conv2d_add_nn_relu_35] Trial #47: GFLOPs: 369.4639. Time: 226.1197 us. Best GFLOPs: 1235.0069
2024-04-29 20:23:21 [INFO] [task_scheduler.cc:131] [Task #72: fused_nn_conv2d_add_nn_relu_35] Trial #48: GFLOPs: 12.8754. Time: 6488.5759 us. Best GFLOPs: 1235.0069
2024-04-29 20:23:21 [INFO] [task_scheduler.cc:131] [Task #72: fused_nn_conv2d_add_nn_relu_35] Trial #49: GFLOPs: 122.2014. Time: 683.6502 us. Best GFLOPs: 1235.0069
2024-04-29 20:23:21 [INFO] [task_scheduler.cc:131] [Task #72: fused_nn_conv2d_add_nn_relu_35] Trial #50: GFLOPs: 63.4253. Time: 1317.1874 us. Best GFLOPs: 1235.0069
2024-04-29 20:23:21 [INFO] [task_scheduler.cc:131] [Task #72: fused_nn_conv2d_add_nn_relu_35] Trial #51: GFLOPs: 631.1828. Time: 132.3595 us. Best GFLOPs: 1235.0069
2024-04-29 20:23:21 [INFO] [task_scheduler.cc:131] [Task #72: fused_nn_conv2d_add_nn_relu_35] Trial #52: GFLOPs: 897.7513. Time: 93.0581 us. Best GFLOPs: 1235.0069
2024-04-29 20:23:21 [INFO] [task_scheduler.cc:131] [Task #72: fused_nn_conv2d_add_nn_relu_35] Trial #53: GFLOPs: 112.7534. Time: 740.9361 us. Best GFLOPs: 1235.0069
2024-04-29 20:23:21 [INFO] [task_scheduler.cc:131] [Task #72: fused_nn_conv2d_add_nn_relu_35] Trial #54: GFLOPs: 18.5042. Time: 4514.8159 us. Best GFLOPs: 1235.0069
2024-04-29 20:23:21 [INFO] [task_scheduler.cc:131] [Task #72: fused_nn_conv2d_add_nn_relu_35] Trial #55: GFLOPs: 199.4781. Time: 418.8080 us. Best GFLOPs: 1235.0069
2024-04-29 20:23:21 [INFO] [task_scheduler.cc:131] [Task #72: fused_nn_conv2d_add_nn_relu_35] Trial #56: GFLOPs: 373.0035. Time: 223.9739 us. Best GFLOPs: 1235.0069
2024-04-29 20:23:21 [INFO] [task_scheduler.cc:131] [Task #72: fused_nn_conv2d_add_nn_relu_35] Trial #57: GFLOPs: 7.1856. Time: 11626.4961 us. Best GFLOPs: 1235.0069
2024-04-29 20:23:21 [INFO] [task_scheduler.cc:131] [Task #72: fused_nn_conv2d_add_nn_relu_35] Trial #58: GFLOPs: 646.6808. Time: 129.1874 us. Best GFLOPs: 1235.0069
2024-04-29 20:23:21 [INFO] [task_scheduler.cc:131] [Task #72: fused_nn_conv2d_add_nn_relu_35] Trial #59: GFLOPs: 203.7551. Time: 410.0169 us. Best GFLOPs: 1235.0069
2024-04-29 20:23:21 [INFO] [task_scheduler.cc:131] [Task #72: fused_nn_conv2d_add_nn_relu_35] Trial #60: GFLOPs: 5.7292. Time: 14581.9059 us. Best GFLOPs: 1235.0069
2024-04-29 20:23:21 [INFO] [task_scheduler.cc:131] [Task #72: fused_nn_conv2d_add_nn_relu_35] Trial #61: GFLOPs: 81.4836. Time: 1025.2748 us. Best GFLOPs: 1235.0069
2024-04-29 20:23:21 [INFO] [task_scheduler.cc:131] [Task #72: fused_nn_conv2d_add_nn_relu_35] Trial #62: GFLOPs: 660.5605. Time: 126.4730 us. Best GFLOPs: 1235.0069
2024-04-29 20:23:21 [INFO] [task_scheduler.cc:131] [Task #72: fused_nn_conv2d_add_nn_relu_35] Trial #63: GFLOPs: 294.3186. Time: 283.8524 us. Best GFLOPs: 1235.0069
2024-04-29 20:23:21 [INFO] [task_scheduler.cc:131] [Task #72: fused_nn_conv2d_add_nn_relu_35] Trial #64: GFLOPs: 132.8342. Time: 628.9273 us. Best GFLOPs: 1235.0069
2024-04-29 21:34:05 [INFO] [evolutionary_search.cc:713] Generating candidates......
2024-04-29 21:34:06 [INFO] [evolutionary_search.cc:715] Picked top 63 candidate(s) from database
2024-04-29 21:34:08 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x1383f6c8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x11e6c3b8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x11e9d188)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x3671f88)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0xff71d38)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x129cb6c8)]: 427 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x10dcf2b8)]: 0 failure(s)
2024-04-29 21:34:10 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x1383f6c8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x11e6c3b8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x11e9d188)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x3671f88)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0xff71d38)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x129cb6c8)]: 859 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x10dcf2b8)]: 0 failure(s)
2024-04-29 21:34:12 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x1383f6c8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x11e6c3b8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x11e9d188)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x3671f88)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0xff71d38)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x129cb6c8)]: 1287 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x10dcf2b8)]: 0 failure(s)
2024-04-29 21:34:12 [INFO] [evolutionary_search.cc:723] Sampled 60 candidate(s)
2024-04-29 21:34:15 [INFO] [evolutionary_search.cc:621] Evolve iter #0 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x1383f6c8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x11e6c3b8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x11e9d188)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x3671f88)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0xff71d38)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x129cb6c8)]: 110 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x10dcf2b8)]: 0 failure(s)
2024-04-29 21:34:18 [INFO] [evolutionary_search.cc:621] Evolve iter #1 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x1383f6c8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x11e6c3b8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x11e9d188)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x3671f88)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0xff71d38)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x129cb6c8)]: 109 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x10dcf2b8)]: 0 failure(s)
2024-04-29 21:34:21 [INFO] [evolutionary_search.cc:621] Evolve iter #2 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x1383f6c8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x11e6c3b8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x11e9d188)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x3671f88)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0xff71d38)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x129cb6c8)]: 110 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x10dcf2b8)]: 0 failure(s)
2024-04-29 21:34:24 [INFO] [evolutionary_search.cc:621] Evolve iter #3 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x1383f6c8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x11e6c3b8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x11e9d188)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x3671f88)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0xff71d38)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x129cb6c8)]: 124 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x10dcf2b8)]: 0 failure(s)
2024-04-29 21:34:25 [INFO] [evolutionary_search.cc:649] Scores of the best 64 candidates:
[1 : 16]:	0.9832  0.9695  0.9588  0.9579  0.9552  0.9524  0.9517  0.9415  0.9397  0.9370  0.9359  0.9349  0.9337  0.9328  0.9309  0.9302
[17 : 32]:	0.9302  0.9278  0.9269  0.9269  0.9230  0.9159  0.9145  0.9123  0.9070  0.9050  0.9042  0.9030  0.9027  0.9018  0.9007  0.9004
[33 : 48]:	0.8980  0.8977  0.8973  0.8968  0.8955  0.8923  0.8922  0.8921  0.8908  0.8904  0.8875  0.8862  0.8854  0.8781  0.8771  0.8769
[49 : 64]:	0.8752  0.8749  0.8743  0.8722  0.8691  0.8647  0.8645  0.8628  0.8588  0.8587  0.8584  0.8572  0.8565  0.8533  0.8533  0.8531
2024-04-29 21:34:25 [INFO] [evolutionary_search.cc:727] Got 64 candidate(s) with evolutionary search
2024-04-29 21:34:25 [INFO] [evolutionary_search.cc:730] Sending 64 candidates(s) for measurement
2024-04-29 21:36:21 [INFO] [task_scheduler.cc:131] [Task #72: fused_nn_conv2d_add_nn_relu_35] Trial #65: GFLOPs: 1535.9757. Time: 54.3909 us. Best GFLOPs: 1535.9757
2024-04-29 21:36:21 [INFO] [task_scheduler.cc:131] [Task #72: fused_nn_conv2d_add_nn_relu_35] Trial #66: GFLOPs: 1146.8507. Time: 72.8456 us. Best GFLOPs: 1535.9757
2024-04-29 21:36:21 [INFO] [task_scheduler.cc:131] [Task #72: fused_nn_conv2d_add_nn_relu_35] Trial #67: GFLOPs: 1223.8380. Time: 68.2632 us. Best GFLOPs: 1535.9757
2024-04-29 21:36:21 [INFO] [task_scheduler.cc:131] [Task #72: fused_nn_conv2d_add_nn_relu_35] Trial #68: GFLOPs: 1862.0912. Time: 44.8652 us. Best GFLOPs: 1862.0912
2024-04-29 21:36:21 [INFO] [task_scheduler.cc:131] [Task #72: fused_nn_conv2d_add_nn_relu_35] Trial #69: GFLOPs: 1873.9004. Time: 44.5824 us. Best GFLOPs: 1873.9004
2024-04-29 21:36:21 [INFO] [task_scheduler.cc:131] [Task #72: fused_nn_conv2d_add_nn_relu_35] Trial #70: GFLOPs: 1692.3456. Time: 49.3652 us. Best GFLOPs: 1873.9004
2024-04-29 21:36:21 [INFO] [task_scheduler.cc:131] [Task #72: fused_nn_conv2d_add_nn_relu_35] Trial #71: GFLOPs: 1946.5613. Time: 42.9183 us. Best GFLOPs: 1946.5613
2024-04-29 21:36:21 [INFO] [task_scheduler.cc:131] [Task #72: fused_nn_conv2d_add_nn_relu_35] Trial #72: GFLOPs: 1243.7213. Time: 67.1718 us. Best GFLOPs: 1946.5613
2024-04-29 21:36:21 [INFO] [task_scheduler.cc:131] [Task #72: fused_nn_conv2d_add_nn_relu_35] Trial #73: GFLOPs: 1979.6191. Time: 42.2016 us. Best GFLOPs: 1979.6191
2024-04-29 21:36:21 [INFO] [task_scheduler.cc:131] [Task #72: fused_nn_conv2d_add_nn_relu_35] Trial #74: GFLOPs: 1426.8207. Time: 58.5519 us. Best GFLOPs: 1979.6191
2024-04-29 21:36:21 [INFO] [task_scheduler.cc:131] [Task #72: fused_nn_conv2d_add_nn_relu_35] Trial #75: GFLOPs: 1684.4868. Time: 49.5955 us. Best GFLOPs: 1979.6191
2024-04-29 21:36:21 [INFO] [task_scheduler.cc:131] [Task #72: fused_nn_conv2d_add_nn_relu_35] Trial #76: GFLOPs: 1171.0973. Time: 71.3374 us. Best GFLOPs: 1979.6191
2024-04-29 21:36:21 [INFO] [task_scheduler.cc:131] [Task #72: fused_nn_conv2d_add_nn_relu_35] Trial #77: GFLOPs: 2555.8178. Time: 32.6874 us. Best GFLOPs: 2555.8178
2024-04-29 21:36:21 [INFO] [task_scheduler.cc:131] [Task #72: fused_nn_conv2d_add_nn_relu_35] Trial #78: GFLOPs: 1980.9906. Time: 42.1724 us. Best GFLOPs: 2555.8178
2024-04-29 21:36:21 [INFO] [task_scheduler.cc:131] [Task #72: fused_nn_conv2d_add_nn_relu_35] Trial #79: GFLOPs: 1900.6519. Time: 43.9549 us. Best GFLOPs: 2555.8178
2024-04-29 21:36:21 [INFO] [task_scheduler.cc:131] [Task #72: fused_nn_conv2d_add_nn_relu_35] Trial #80: GFLOPs: 1655.8530. Time: 50.4532 us. Best GFLOPs: 2555.8178
2024-04-29 21:36:21 [INFO] [task_scheduler.cc:131] [Task #72: fused_nn_conv2d_add_nn_relu_35] Trial #81: GFLOPs: 1843.3385. Time: 45.3216 us. Best GFLOPs: 2555.8178
2024-04-29 21:36:21 [INFO] [task_scheduler.cc:131] [Task #72: fused_nn_conv2d_add_nn_relu_35] Trial #82: GFLOPs: 1236.3336. Time: 67.5732 us. Best GFLOPs: 2555.8178
2024-04-29 21:36:21 [INFO] [task_scheduler.cc:131] [Task #72: fused_nn_conv2d_add_nn_relu_35] Trial #83: GFLOPs: 1980.6343. Time: 42.1799 us. Best GFLOPs: 2555.8178
2024-04-29 21:36:21 [INFO] [task_scheduler.cc:131] [Task #72: fused_nn_conv2d_add_nn_relu_35] Trial #84: GFLOPs: 1147.0641. Time: 72.8321 us. Best GFLOPs: 2555.8178
2024-04-29 21:36:21 [INFO] [task_scheduler.cc:131] [Task #72: fused_nn_conv2d_add_nn_relu_35] Trial #85: GFLOPs: 1202.1686. Time: 69.4936 us. Best GFLOPs: 2555.8178
2024-04-29 21:36:21 [INFO] [task_scheduler.cc:131] [Task #72: fused_nn_conv2d_add_nn_relu_35] Trial #86: GFLOPs: 1580.3906. Time: 52.8623 us. Best GFLOPs: 2555.8178
2024-04-29 21:36:21 [INFO] [task_scheduler.cc:131] [Task #72: fused_nn_conv2d_add_nn_relu_35] Trial #87: GFLOPs: 1990.1422. Time: 41.9784 us. Best GFLOPs: 2555.8178
2024-04-29 21:36:21 [INFO] [task_scheduler.cc:131] [Task #72: fused_nn_conv2d_add_nn_relu_35] Trial #88: GFLOPs: 2069.4180. Time: 40.3703 us. Best GFLOPs: 2555.8178
2024-04-29 21:36:21 [INFO] [task_scheduler.cc:131] [Task #72: fused_nn_conv2d_add_nn_relu_35] Trial #89: GFLOPs: 2089.1242. Time: 39.9895 us. Best GFLOPs: 2555.8178
2024-04-29 21:36:21 [INFO] [task_scheduler.cc:131] [Task #72: fused_nn_conv2d_add_nn_relu_35] Trial #90: GFLOPs: 1895.6602. Time: 44.0707 us. Best GFLOPs: 2555.8178
2024-04-29 21:36:21 [INFO] [task_scheduler.cc:131] [Task #72: fused_nn_conv2d_add_nn_relu_35] Trial #91: GFLOPs: 1101.7728. Time: 75.8260 us. Best GFLOPs: 2555.8178
2024-04-29 21:36:21 [INFO] [task_scheduler.cc:131] [Task #72: fused_nn_conv2d_add_nn_relu_35] Trial #92: GFLOPs: 1205.6421. Time: 69.2934 us. Best GFLOPs: 2555.8178
2024-04-29 21:36:21 [INFO] [task_scheduler.cc:131] [Task #72: fused_nn_conv2d_add_nn_relu_35] Trial #93: GFLOPs: 690.9871. Time: 120.9039 us. Best GFLOPs: 2555.8178
2024-04-29 21:36:21 [INFO] [task_scheduler.cc:131] [Task #72: fused_nn_conv2d_add_nn_relu_35] Trial #94: GFLOPs: 2063.3059. Time: 40.4899 us. Best GFLOPs: 2555.8178
2024-04-29 21:36:21 [INFO] [task_scheduler.cc:131] [Task #72: fused_nn_conv2d_add_nn_relu_35] Trial #95: GFLOPs: 2544.0411. Time: 32.8387 us. Best GFLOPs: 2555.8178
2024-04-29 21:36:21 [INFO] [task_scheduler.cc:131] [Task #72: fused_nn_conv2d_add_nn_relu_35] Trial #96: GFLOPs: 1949.9337. Time: 42.8440 us. Best GFLOPs: 2555.8178
2024-04-29 21:36:21 [INFO] [task_scheduler.cc:131] [Task #72: fused_nn_conv2d_add_nn_relu_35] Trial #97: GFLOPs: 1547.1232. Time: 53.9990 us. Best GFLOPs: 2555.8178
2024-04-29 21:36:21 [INFO] [task_scheduler.cc:131] [Task #72: fused_nn_conv2d_add_nn_relu_35] Trial #98: GFLOPs: 2054.8191. Time: 40.6571 us. Best GFLOPs: 2555.8178
2024-04-29 21:36:21 [INFO] [task_scheduler.cc:131] [Task #72: fused_nn_conv2d_add_nn_relu_35] Trial #99: GFLOPs: 1975.0106. Time: 42.3000 us. Best GFLOPs: 2555.8178
2024-04-29 21:36:21 [INFO] [task_scheduler.cc:131] [Task #72: fused_nn_conv2d_add_nn_relu_35] Trial #100: GFLOPs: 1962.4935. Time: 42.5698 us. Best GFLOPs: 2555.8178
2024-04-29 21:36:21 [INFO] [task_scheduler.cc:131] [Task #72: fused_nn_conv2d_add_nn_relu_35] Trial #101: GFLOPs: 1303.9394. Time: 64.0697 us. Best GFLOPs: 2555.8178
2024-04-29 21:36:21 [INFO] [task_scheduler.cc:131] [Task #72: fused_nn_conv2d_add_nn_relu_35] Trial #102: GFLOPs: 1976.3260. Time: 42.2719 us. Best GFLOPs: 2555.8178
2024-04-29 21:36:21 [INFO] [task_scheduler.cc:131] [Task #72: fused_nn_conv2d_add_nn_relu_35] Trial #103: GFLOPs: 1295.0854. Time: 64.5077 us. Best GFLOPs: 2555.8178
2024-04-29 21:36:21 [INFO] [task_scheduler.cc:131] [Task #72: fused_nn_conv2d_add_nn_relu_35] Trial #104: GFLOPs: 1510.9140. Time: 55.2930 us. Best GFLOPs: 2555.8178
2024-04-29 21:36:21 [INFO] [task_scheduler.cc:131] [Task #72: fused_nn_conv2d_add_nn_relu_35] Trial #105: GFLOPs: 1931.3075. Time: 43.2572 us. Best GFLOPs: 2555.8178
2024-04-29 21:36:21 [INFO] [task_scheduler.cc:131] [Task #72: fused_nn_conv2d_add_nn_relu_35] Trial #106: GFLOPs: 1171.2915. Time: 71.3256 us. Best GFLOPs: 2555.8178
2024-04-29 21:36:21 [INFO] [task_scheduler.cc:131] [Task #72: fused_nn_conv2d_add_nn_relu_35] Trial #107: GFLOPs: 1195.1672. Time: 69.9007 us. Best GFLOPs: 2555.8178
2024-04-29 21:36:21 [INFO] [task_scheduler.cc:131] [Task #72: fused_nn_conv2d_add_nn_relu_35] Trial #108: GFLOPs: 1179.5098. Time: 70.8286 us. Best GFLOPs: 2555.8178
2024-04-29 21:36:21 [INFO] [task_scheduler.cc:131] [Task #72: fused_nn_conv2d_add_nn_relu_35] Trial #109: GFLOPs: 1647.4435. Time: 50.7107 us. Best GFLOPs: 2555.8178
2024-04-29 21:36:21 [INFO] [task_scheduler.cc:131] [Task #72: fused_nn_conv2d_add_nn_relu_35] Trial #110: GFLOPs: 1387.1965. Time: 60.2244 us. Best GFLOPs: 2555.8178
2024-04-29 21:36:21 [INFO] [task_scheduler.cc:131] [Task #72: fused_nn_conv2d_add_nn_relu_35] Trial #111: GFLOPs: 1854.1282. Time: 45.0579 us. Best GFLOPs: 2555.8178
2024-04-29 21:36:21 [INFO] [task_scheduler.cc:131] [Task #72: fused_nn_conv2d_add_nn_relu_35] Trial #112: GFLOPs: 681.5190. Time: 122.5836 us. Best GFLOPs: 2555.8178
2024-04-29 21:36:21 [INFO] [task_scheduler.cc:131] [Task #72: fused_nn_conv2d_add_nn_relu_35] Trial #113: GFLOPs: 1236.2099. Time: 67.5800 us. Best GFLOPs: 2555.8178
2024-04-29 21:36:21 [INFO] [task_scheduler.cc:131] [Task #72: fused_nn_conv2d_add_nn_relu_35] Trial #114: GFLOPs: 596.4483. Time: 140.0675 us. Best GFLOPs: 2555.8178
2024-04-29 21:36:21 [INFO] [task_scheduler.cc:131] [Task #72: fused_nn_conv2d_add_nn_relu_35] Trial #115: GFLOPs: 1146.5855. Time: 72.8625 us. Best GFLOPs: 2555.8178
2024-04-29 21:36:21 [INFO] [task_scheduler.cc:131] [Task #72: fused_nn_conv2d_add_nn_relu_35] Trial #116: GFLOPs: 1838.1788. Time: 45.4488 us. Best GFLOPs: 2555.8178
2024-04-29 21:36:21 [INFO] [task_scheduler.cc:131] [Task #72: fused_nn_conv2d_add_nn_relu_35] Trial #117: GFLOPs: 1509.8232. Time: 55.3330 us. Best GFLOPs: 2555.8178
2024-04-29 21:36:21 [INFO] [task_scheduler.cc:131] [Task #72: fused_nn_conv2d_add_nn_relu_35] Trial #118: GFLOPs: 1950.9849. Time: 42.8210 us. Best GFLOPs: 2555.8178
2024-04-29 21:36:21 [INFO] [task_scheduler.cc:131] [Task #72: fused_nn_conv2d_add_nn_relu_35] Trial #119: GFLOPs: 1851.2618. Time: 45.1276 us. Best GFLOPs: 2555.8178
2024-04-29 21:36:21 [INFO] [task_scheduler.cc:131] [Task #72: fused_nn_conv2d_add_nn_relu_35] Trial #120: GFLOPs: 1838.3754. Time: 45.4440 us. Best GFLOPs: 2555.8178
2024-04-29 21:36:21 [INFO] [task_scheduler.cc:131] [Task #72: fused_nn_conv2d_add_nn_relu_35] Trial #121: GFLOPs: 1855.3916. Time: 45.0272 us. Best GFLOPs: 2555.8178
2024-04-29 21:36:21 [INFO] [task_scheduler.cc:131] [Task #72: fused_nn_conv2d_add_nn_relu_35] Trial #122: GFLOPs: 1941.2892. Time: 43.0348 us. Best GFLOPs: 2555.8178
2024-04-29 21:36:21 [INFO] [task_scheduler.cc:131] [Task #72: fused_nn_conv2d_add_nn_relu_35] Trial #123: GFLOPs: 1687.9500. Time: 49.4938 us. Best GFLOPs: 2555.8178
2024-04-29 21:36:21 [INFO] [task_scheduler.cc:131] [Task #72: fused_nn_conv2d_add_nn_relu_35] Trial #124: GFLOPs: 1370.0998. Time: 60.9759 us. Best GFLOPs: 2555.8178
2024-04-29 21:36:21 [INFO] [task_scheduler.cc:131] [Task #72: fused_nn_conv2d_add_nn_relu_35] Trial #125: GFLOPs: 1884.1391. Time: 44.3402 us. Best GFLOPs: 2555.8178
2024-04-29 21:36:21 [INFO] [task_scheduler.cc:131] [Task #72: fused_nn_conv2d_add_nn_relu_35] Trial #126: GFLOPs: 302.9574. Time: 275.7584 us. Best GFLOPs: 2555.8178
2024-04-29 21:36:21 [INFO] [task_scheduler.cc:131] [Task #72: fused_nn_conv2d_add_nn_relu_35] Trial #127: GFLOPs: 640.6839. Time: 130.3967 us. Best GFLOPs: 2555.8178
2024-04-29 21:36:21 [INFO] [task_scheduler.cc:131] [Task #72: fused_nn_conv2d_add_nn_relu_35] Trial #128: GFLOPs: 228.0069. Time: 366.4058 us. Best GFLOPs: 2555.8178
2024-05-01 15:05:17 [INFO] [task_scheduler.cc:160] Initializing Task #72: "fused_nn_conv2d_add_nn_relu_35"
2024-05-01 15:05:17 [INFO] [task_scheduler.cc:35] 
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(1664), T.int64(14), T.int64(14)), "float32"), p1: T.Buffer((T.int64(128), T.int64(1664), T.int64(1), T.int64(1)), "float32"), p2: T.Buffer((T.int64(1), T.int64(128), T.int64(1), T.int64(1)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(128), T.int64(14), T.int64(14)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        pad_temp = T.alloc_buffer((T.int64(1), T.int64(1664), T.int64(14), T.int64(14)))
        conv2d_nchw = T.alloc_buffer((T.int64(1), T.int64(128), T.int64(14), T.int64(14)))
        T_add = T.alloc_buffer((T.int64(1), T.int64(128), T.int64(14), T.int64(14)))
        for i0, i1, i2, i3 in T.grid(T.int64(1), T.int64(1664), T.int64(14), T.int64(14)):
            with T.block("pad_temp"):
                v_i0, v_i1, v_i2, v_i3 = T.axis.remap("SSSS", [i0, i1, i2, i3])
                T.reads(p0[v_i0, v_i1, v_i2, v_i3])
                T.writes(pad_temp[v_i0, v_i1, v_i2, v_i3])
                pad_temp[v_i0, v_i1, v_i2, v_i3] = p0[v_i0, v_i1, v_i2, v_i3]
        for nn, ff, yy, xx, rc, ry, rx in T.grid(T.int64(1), T.int64(128), T.int64(14), T.int64(14), T.int64(1664), T.int64(1), T.int64(1)):
            with T.block("conv2d_nchw"):
                v_nn, v_ff, v_yy, v_xx, v_rc, v_ry, v_rx = T.axis.remap("SSSSRRR", [nn, ff, yy, xx, rc, ry, rx])
                T.reads(pad_temp[v_nn, v_rc, v_yy + v_ry, v_xx + v_rx], p1[v_ff, v_rc, v_ry, v_rx])
                T.writes(conv2d_nchw[v_nn, v_ff, v_yy, v_xx])
                with T.init():
                    conv2d_nchw[v_nn, v_ff, v_yy, v_xx] = T.float32(0)
                conv2d_nchw[v_nn, v_ff, v_yy, v_xx] = conv2d_nchw[v_nn, v_ff, v_yy, v_xx] + pad_temp[v_nn, v_rc, v_yy + v_ry, v_xx + v_rx] * p1[v_ff, v_rc, v_ry, v_rx]
        for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(128), T.int64(14), T.int64(14)):
            with T.block("T_add"):
                v_ax0, v_ax1, v_ax2, v_ax3 = T.axis.remap("SSSS", [ax0, ax1, ax2, ax3])
                T.reads(conv2d_nchw[v_ax0, v_ax1, v_ax2, v_ax3], p2[v_ax0, v_ax1, T.int64(0), T.int64(0)])
                T.writes(T_add[v_ax0, v_ax1, v_ax2, v_ax3])
                T_add[v_ax0, v_ax1, v_ax2, v_ax3] = conv2d_nchw[v_ax0, v_ax1, v_ax2, v_ax3] + p2[v_ax0, v_ax1, T.int64(0), T.int64(0)]
        for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(128), T.int64(14), T.int64(14)):
            with T.block("T_relu"):
                v_ax0, v_ax1, v_ax2, v_ax3 = T.axis.remap("SSSS", [ax0, ax1, ax2, ax3])
                T.reads(T_add[v_ax0, v_ax1, v_ax2, v_ax3])
                T.writes(T_relu[v_ax0, v_ax1, v_ax2, v_ax3])
                T_relu[v_ax0, v_ax1, v_ax2, v_ax3] = T.max(T_add[v_ax0, v_ax1, v_ax2, v_ax3], T.float32(0))
2024-05-01 15:05:17 [INFO] [task_scheduler.cc:164] Total 3 design space(s) generated
2024-05-01 15:05:17 [INFO] [task_scheduler.cc:170] Design space #0:
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(1664), T.int64(14), T.int64(14)), "float32"), p1: T.Buffer((T.int64(128), T.int64(1664), T.int64(1), T.int64(1)), "float32"), p2: T.Buffer((T.int64(1), T.int64(128), T.int64(1), T.int64(1)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(128), T.int64(14), T.int64(14)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        with T.block("root"):
            T.reads()
            T.writes()
            T.block_attr({"meta_schedule.unroll_explicit": 64})
            conv2d_nchw_local = T.alloc_buffer((T.int64(1), T.int64(128), T.int64(14), T.int64(14)), scope="local")
            pad_temp_shared = T.alloc_buffer((T.int64(1), T.int64(1664), T.int64(14), T.int64(14)), scope="shared")
            p1_shared = T.alloc_buffer((T.int64(128), T.int64(1664), T.int64(1), T.int64(1)), scope="shared")
            for nn_0_ff_0_yy_0_xx_0_fused in T.thread_binding(T.int64(7), thread="blockIdx.x"):
                for nn_1_ff_1_yy_1_xx_1_fused in T.thread_binding(T.int64(7), thread="vthread.x"):
                    for nn_2_ff_2_yy_2_xx_2_fused in T.thread_binding(T.int64(32), thread="threadIdx.x"):
                        for rc_0, ry_0, rx_0 in T.grid(T.int64(32), T.int64(1), T.int64(1)):
                            for ax0_ax1_ax2_ax3_fused in range(T.int64(1456)):
                                with T.block("pad_temp_shared"):
                                    v0 = T.axis.spatial(T.int64(1), T.int64(0))
                                    v1 = T.axis.spatial(T.int64(1664), rc_0 * T.int64(52) + ax0_ax1_ax2_ax3_fused // T.int64(28))
                                    v2 = T.axis.spatial(T.int64(14), ax0_ax1_ax2_ax3_fused % T.int64(28) // T.int64(2))
                                    v3 = T.axis.spatial(T.int64(14), nn_0_ff_0_yy_0_xx_0_fused * T.int64(2) + ax0_ax1_ax2_ax3_fused % T.int64(2))
                                    T.reads(p0[v0, v1, v2, v3])
                                    T.writes(pad_temp_shared[v0, v1, v2, v3])
                                    T.block_attr({"meta_schedule.cooperative_fetch": 4})
                                    pad_temp_shared[v0, v1, v2, v3] = p0[v0, v1, v2, v3]
                            for ax0_ax1_ax2_ax3_fused in range(T.int64(6656)):
                                with T.block("p1_shared"):
                                    v0 = T.axis.spatial(T.int64(128), ax0_ax1_ax2_ax3_fused // T.int64(52))
                                    v1 = T.axis.spatial(T.int64(1664), rc_0 * T.int64(52) + ax0_ax1_ax2_ax3_fused % T.int64(52))
                                    v2 = T.axis.spatial(T.int64(1), T.int64(0))
                                    v3 = T.axis.spatial(T.int64(1), T.int64(0))
                                    T.reads(p1[v0, v1, v2, v3])
                                    T.writes(p1_shared[v0, v1, v2, v3])
                                    T.block_attr({"meta_schedule.cooperative_fetch": 1})
                                    p1_shared[v0, v1, v2, v3] = p1[v0, v1, v2, v3]
                            for rc_1, ry_1, rx_1, nn_3, ff_3, yy_3, xx_3, rc_2, ry_2, rx_2, nn_4, ff_4, yy_4, xx_4 in T.grid(T.int64(26), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(1), T.int64(1), T.int64(1), T.int64(8), T.int64(2), T.int64(1)):
                                with T.block("conv2d_nchw"):
                                    v_nn = T.axis.spatial(T.int64(1), nn_3 + nn_4)
                                    v_ff = T.axis.spatial(T.int64(128), nn_2_ff_2_yy_2_xx_2_fused // T.int64(2) * T.int64(8) + ff_3 * T.int64(8) + ff_4)
                                    v_yy = T.axis.spatial(T.int64(14), nn_1_ff_1_yy_1_xx_1_fused * T.int64(2) + yy_3 * T.int64(2) + yy_4)
                                    v_xx = T.axis.spatial(T.int64(14), nn_0_ff_0_yy_0_xx_0_fused * T.int64(2) + nn_2_ff_2_yy_2_xx_2_fused % T.int64(2) + xx_3 + xx_4)
                                    v_rc = T.axis.reduce(T.int64(1664), rc_0 * T.int64(52) + rc_1 * T.int64(2) + rc_2)
                                    v_ry = T.axis.reduce(T.int64(1), ry_0 + ry_1 + ry_2)
                                    v_rx = T.axis.reduce(T.int64(1), rx_0 + rx_1 + rx_2)
                                    T.reads(pad_temp_shared[v_nn, v_rc, v_yy + v_ry, v_xx + v_rx], p1_shared[v_ff, v_rc, v_ry, v_rx])
                                    T.writes(conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx])
                                    T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 32, "meta_schedule.tiling_structure": "SSSRRSRS"})
                                    with T.init():
                                        conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx] = T.float32(0)
                                    conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx] = conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx] + pad_temp_shared[v_nn, v_rc, v_yy + v_ry, v_xx + v_rx] * p1_shared[v_ff, v_rc, v_ry, v_rx]
                        for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(8), T.int64(2), T.int64(1)):
                            with T.block("conv2d_nchw_local"):
                                v0 = T.axis.spatial(T.int64(1), ax0)
                                v1 = T.axis.spatial(T.int64(128), nn_2_ff_2_yy_2_xx_2_fused // T.int64(2) * T.int64(8) + ax1)
                                v2 = T.axis.spatial(T.int64(14), nn_1_ff_1_yy_1_xx_1_fused * T.int64(2) + ax2)
                                v3 = T.axis.spatial(T.int64(14), nn_0_ff_0_yy_0_xx_0_fused * T.int64(2) + nn_2_ff_2_yy_2_xx_2_fused % T.int64(2) + ax3)
                                T.reads(conv2d_nchw_local[v0, v1, v2, v3], p2[v0, v1, T.int64(0), T.int64(0)])
                                T.writes(T_relu[v0, v1, v2, v3])
                                T_relu[v0, v1, v2, v3] = T.max(conv2d_nchw_local[v0, v1, v2, v3] + p2[v0, v1, T.int64(0), T.int64(0)], T.float32(0))
b0 = sch.get_block(name="pad_temp", func_name="main")
b1 = sch.get_block(name="conv2d_nchw", func_name="main")
b2 = sch.get_block(name="T_add", func_name="main")
b3 = sch.get_block(name="T_relu", func_name="main")
b4 = sch.get_block(name="root", func_name="main")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSSRRSRS")
l5, l6, l7, l8, l9, l10, l11 = sch.get_loops(block=b1)
v12, v13, v14, v15, v16 = sch.sample_perfect_tile(loop=l5, n=5, max_innermost_factor=64, decision=[1, 1, 1, 1, 1])
l17, l18, l19, l20, l21 = sch.split(loop=l5, factors=[v12, v13, v14, v15, v16], preserve_unit_iters=True)
v22, v23, v24, v25, v26 = sch.sample_perfect_tile(loop=l6, n=5, max_innermost_factor=64, decision=[1, 1, 16, 1, 8])
l27, l28, l29, l30, l31 = sch.split(loop=l6, factors=[v22, v23, v24, v25, v26], preserve_unit_iters=True)
v32, v33, v34, v35, v36 = sch.sample_perfect_tile(loop=l7, n=5, max_innermost_factor=64, decision=[1, 7, 1, 1, 2])
l37, l38, l39, l40, l41 = sch.split(loop=l7, factors=[v32, v33, v34, v35, v36], preserve_unit_iters=True)
v42, v43, v44, v45, v46 = sch.sample_perfect_tile(loop=l8, n=5, max_innermost_factor=64, decision=[7, 1, 2, 1, 1])
l47, l48, l49, l50, l51 = sch.split(loop=l8, factors=[v42, v43, v44, v45, v46], preserve_unit_iters=True)
v52, v53, v54 = sch.sample_perfect_tile(loop=l9, n=3, max_innermost_factor=64, decision=[32, 26, 2])
l55, l56, l57 = sch.split(loop=l9, factors=[v52, v53, v54], preserve_unit_iters=True)
v58, v59, v60 = sch.sample_perfect_tile(loop=l10, n=3, max_innermost_factor=64, decision=[1, 1, 1])
l61, l62, l63 = sch.split(loop=l10, factors=[v58, v59, v60], preserve_unit_iters=True)
v64, v65, v66 = sch.sample_perfect_tile(loop=l11, n=3, max_innermost_factor=64, decision=[1, 1, 1])
l67, l68, l69 = sch.split(loop=l11, factors=[v64, v65, v66], preserve_unit_iters=True)
sch.reorder(l17, l27, l37, l47, l18, l28, l38, l48, l19, l29, l39, l49, l55, l61, l67, l56, l62, l68, l20, l30, l40, l50, l57, l63, l69, l21, l31, l41, l51)
l70 = sch.fuse(l17, l27, l37, l47, preserve_unit_iters=True)
sch.bind(loop=l70, thread_axis="blockIdx.x")
l71 = sch.fuse(l18, l28, l38, l48, preserve_unit_iters=True)
sch.bind(loop=l71, thread_axis="vthread.x")
l72 = sch.fuse(l19, l29, l39, l49, preserve_unit_iters=True)
sch.bind(loop=l72, thread_axis="threadIdx.x")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_low_inclusive", ann_val=32)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_high_inclusive", ann_val=1024)
b73 = sch.cache_write(block=b1, write_buffer_index=0, storage_scope="local")
sch.reverse_compute_at(block=b73, loop=l72, preserve_unit_loops=True, index=-1)
b74 = sch.cache_read(block=b1, read_buffer_index=0, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b74, loop=l67, preserve_unit_loops=True, index=-1)
l75, l76, l77, l78, l79, l80, l81, l82, l83, l84 = sch.get_loops(block=b74)
l85 = sch.fuse(l81, l82, l83, l84, preserve_unit_iters=True)
v86 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b74, ann_key="meta_schedule.cooperative_fetch", ann_val=v86)
b87 = sch.cache_read(block=b1, read_buffer_index=1, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b87, loop=l67, preserve_unit_loops=True, index=-1)
l88, l89, l90, l91, l92, l93, l94, l95, l96, l97 = sch.get_loops(block=b87)
l98 = sch.fuse(l94, l95, l96, l97, preserve_unit_iters=True)
v99 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=0)
sch.annotate(block_or_loop=b87, ann_key="meta_schedule.cooperative_fetch", ann_val=v99)
sch.reverse_compute_inline(block=b3)
sch.reverse_compute_inline(block=b2)
sch.compute_inline(block=b0)
v100 = sch.sample_categorical(candidates=[0, 16, 64, 512, 1024], probs=[0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001], decision=2)
sch.annotate(block_or_loop=b4, ann_key="meta_schedule.unroll_explicit", ann_val=v100)
2024-05-01 15:05:17 [INFO] [task_scheduler.cc:170] Design space #1:
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(1664), T.int64(14), T.int64(14)), "float32"), p1: T.Buffer((T.int64(128), T.int64(1664), T.int64(1), T.int64(1)), "float32"), p2: T.Buffer((T.int64(1), T.int64(128), T.int64(1), T.int64(1)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(128), T.int64(14), T.int64(14)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        with T.block("root"):
            T.reads()
            T.writes()
            T.block_attr({"meta_schedule.unroll_explicit": 512})
            conv2d_nchw_local = T.alloc_buffer((T.int64(1), T.int64(128), T.int64(14), T.int64(14)), scope="local")
            pad_temp_shared = T.alloc_buffer((T.int64(1), T.int64(1664), T.int64(14), T.int64(14)), scope="shared")
            p1_shared = T.alloc_buffer((T.int64(128), T.int64(1664), T.int64(1), T.int64(1)), scope="shared")
            for nn_0_ff_0_yy_0_xx_0_fused in T.thread_binding(T.int64(7), thread="blockIdx.x"):
                for nn_1_ff_1_yy_1_xx_1_fused in T.thread_binding(T.int64(7), thread="vthread.x"):
                    for nn_2_ff_2_yy_2_xx_2_fused in T.thread_binding(T.int64(32), thread="threadIdx.x"):
                        for rc_0_ry_0_rx_0_fused in T.serial(T.int64(32), annotations={"software_pipeline_async_stages": [0], "software_pipeline_order": [0, 1, 2], "software_pipeline_stage": [0, 0, 2]}):
                            for ax0_ax1_ax2_ax3_fused in range(T.int64(1456)):
                                with T.block("pad_temp_shared"):
                                    v0 = T.axis.spatial(T.int64(1), T.int64(0))
                                    v1 = T.axis.spatial(T.int64(1664), rc_0_ry_0_rx_0_fused * T.int64(52) + ax0_ax1_ax2_ax3_fused // T.int64(28))
                                    v2 = T.axis.spatial(T.int64(14), ax0_ax1_ax2_ax3_fused % T.int64(28) // T.int64(2))
                                    v3 = T.axis.spatial(T.int64(14), nn_0_ff_0_yy_0_xx_0_fused * T.int64(2) + ax0_ax1_ax2_ax3_fused % T.int64(2))
                                    T.reads(p0[v0, v1, v2, v3])
                                    T.writes(pad_temp_shared[v0, v1, v2, v3])
                                    T.block_attr({"meta_schedule.cooperative_fetch": 4})
                                    pad_temp_shared[v0, v1, v2, v3] = p0[v0, v1, v2, v3]
                            for ax0_ax1_ax2_ax3_fused in range(T.int64(6656)):
                                with T.block("p1_shared"):
                                    v0 = T.axis.spatial(T.int64(128), ax0_ax1_ax2_ax3_fused // T.int64(52))
                                    v1 = T.axis.spatial(T.int64(1664), rc_0_ry_0_rx_0_fused * T.int64(52) + ax0_ax1_ax2_ax3_fused % T.int64(52))
                                    v2 = T.axis.spatial(T.int64(1), T.int64(0))
                                    v3 = T.axis.spatial(T.int64(1), T.int64(0))
                                    T.reads(p1[v0, v1, v2, v3])
                                    T.writes(p1_shared[v0, v1, v2, v3])
                                    T.block_attr({"meta_schedule.cooperative_fetch": 1})
                                    p1_shared[v0, v1, v2, v3] = p1[v0, v1, v2, v3]
                            for rc_1, ry_1, rx_1, nn_3, ff_3, yy_3, xx_3, rc_2, ry_2, rx_2, nn_4, ff_4, yy_4, xx_4 in T.grid(T.int64(26), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(1), T.int64(1), T.int64(1), T.int64(8), T.int64(2), T.int64(1)):
                                with T.block("conv2d_nchw"):
                                    v_nn = T.axis.spatial(T.int64(1), nn_3 + nn_4)
                                    v_ff = T.axis.spatial(T.int64(128), nn_2_ff_2_yy_2_xx_2_fused // T.int64(2) * T.int64(8) + ff_3 * T.int64(8) + ff_4)
                                    v_yy = T.axis.spatial(T.int64(14), nn_1_ff_1_yy_1_xx_1_fused * T.int64(2) + yy_3 * T.int64(2) + yy_4)
                                    v_xx = T.axis.spatial(T.int64(14), nn_0_ff_0_yy_0_xx_0_fused * T.int64(2) + nn_2_ff_2_yy_2_xx_2_fused % T.int64(2) + xx_3 + xx_4)
                                    v_rc = T.axis.reduce(T.int64(1664), rc_0_ry_0_rx_0_fused * T.int64(52) + rc_1 * T.int64(2) + rc_2)
                                    v_ry = T.axis.reduce(T.int64(1), ry_1 + ry_2)
                                    v_rx = T.axis.reduce(T.int64(1), rx_1 + rx_2)
                                    T.reads(pad_temp_shared[v_nn, v_rc, v_yy + v_ry, v_xx + v_rx], p1_shared[v_ff, v_rc, v_ry, v_rx])
                                    T.writes(conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx])
                                    T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 32, "meta_schedule.tiling_structure": "SSSRRSRS"})
                                    with T.init():
                                        conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx] = T.float32(0)
                                    conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx] = conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx] + pad_temp_shared[v_nn, v_rc, v_yy + v_ry, v_xx + v_rx] * p1_shared[v_ff, v_rc, v_ry, v_rx]
                        for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(8), T.int64(2), T.int64(1)):
                            with T.block("conv2d_nchw_local"):
                                v0 = T.axis.spatial(T.int64(1), ax0)
                                v1 = T.axis.spatial(T.int64(128), nn_2_ff_2_yy_2_xx_2_fused // T.int64(2) * T.int64(8) + ax1)
                                v2 = T.axis.spatial(T.int64(14), nn_1_ff_1_yy_1_xx_1_fused * T.int64(2) + ax2)
                                v3 = T.axis.spatial(T.int64(14), nn_0_ff_0_yy_0_xx_0_fused * T.int64(2) + nn_2_ff_2_yy_2_xx_2_fused % T.int64(2) + ax3)
                                T.reads(conv2d_nchw_local[v0, v1, v2, v3], p2[v0, v1, T.int64(0), T.int64(0)])
                                T.writes(T_relu[v0, v1, v2, v3])
                                T_relu[v0, v1, v2, v3] = T.max(conv2d_nchw_local[v0, v1, v2, v3] + p2[v0, v1, T.int64(0), T.int64(0)], T.float32(0))
b0 = sch.get_block(name="pad_temp", func_name="main")
b1 = sch.get_block(name="conv2d_nchw", func_name="main")
b2 = sch.get_block(name="T_add", func_name="main")
b3 = sch.get_block(name="T_relu", func_name="main")
b4 = sch.get_block(name="root", func_name="main")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSSRRSRS")
l5, l6, l7, l8, l9, l10, l11 = sch.get_loops(block=b1)
v12, v13, v14, v15, v16 = sch.sample_perfect_tile(loop=l5, n=5, max_innermost_factor=64, decision=[1, 1, 1, 1, 1])
l17, l18, l19, l20, l21 = sch.split(loop=l5, factors=[v12, v13, v14, v15, v16], preserve_unit_iters=True)
v22, v23, v24, v25, v26 = sch.sample_perfect_tile(loop=l6, n=5, max_innermost_factor=64, decision=[1, 1, 16, 1, 8])
l27, l28, l29, l30, l31 = sch.split(loop=l6, factors=[v22, v23, v24, v25, v26], preserve_unit_iters=True)
v32, v33, v34, v35, v36 = sch.sample_perfect_tile(loop=l7, n=5, max_innermost_factor=64, decision=[1, 7, 1, 1, 2])
l37, l38, l39, l40, l41 = sch.split(loop=l7, factors=[v32, v33, v34, v35, v36], preserve_unit_iters=True)
v42, v43, v44, v45, v46 = sch.sample_perfect_tile(loop=l8, n=5, max_innermost_factor=64, decision=[7, 1, 2, 1, 1])
l47, l48, l49, l50, l51 = sch.split(loop=l8, factors=[v42, v43, v44, v45, v46], preserve_unit_iters=True)
v52, v53, v54 = sch.sample_perfect_tile(loop=l9, n=3, max_innermost_factor=64, decision=[32, 26, 2])
l55, l56, l57 = sch.split(loop=l9, factors=[v52, v53, v54], preserve_unit_iters=True)
v58, v59, v60 = sch.sample_perfect_tile(loop=l10, n=3, max_innermost_factor=64, decision=[1, 1, 1])
l61, l62, l63 = sch.split(loop=l10, factors=[v58, v59, v60], preserve_unit_iters=True)
v64, v65, v66 = sch.sample_perfect_tile(loop=l11, n=3, max_innermost_factor=64, decision=[1, 1, 1])
l67, l68, l69 = sch.split(loop=l11, factors=[v64, v65, v66], preserve_unit_iters=True)
sch.reorder(l17, l27, l37, l47, l18, l28, l38, l48, l19, l29, l39, l49, l55, l61, l67, l56, l62, l68, l20, l30, l40, l50, l57, l63, l69, l21, l31, l41, l51)
l70 = sch.fuse(l17, l27, l37, l47, preserve_unit_iters=True)
sch.bind(loop=l70, thread_axis="blockIdx.x")
l71 = sch.fuse(l18, l28, l38, l48, preserve_unit_iters=True)
sch.bind(loop=l71, thread_axis="vthread.x")
l72 = sch.fuse(l19, l29, l39, l49, preserve_unit_iters=True)
sch.bind(loop=l72, thread_axis="threadIdx.x")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_low_inclusive", ann_val=32)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_high_inclusive", ann_val=1024)
b73 = sch.cache_write(block=b1, write_buffer_index=0, storage_scope="local")
sch.reverse_compute_at(block=b73, loop=l72, preserve_unit_loops=True, index=-1)
b74 = sch.cache_read(block=b1, read_buffer_index=0, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b74, loop=l67, preserve_unit_loops=True, index=-1)
l75, l76, l77, l78, l79, l80, l81, l82, l83, l84 = sch.get_loops(block=b74)
l85 = sch.fuse(l81, l82, l83, l84, preserve_unit_iters=True)
v86 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b74, ann_key="meta_schedule.cooperative_fetch", ann_val=v86)
b87 = sch.cache_read(block=b1, read_buffer_index=1, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b87, loop=l67, preserve_unit_loops=True, index=-1)
l88, l89, l90, l91, l92, l93, l94, l95, l96, l97 = sch.get_loops(block=b87)
l98 = sch.fuse(l94, l95, l96, l97, preserve_unit_iters=True)
v99 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=0)
sch.annotate(block_or_loop=b87, ann_key="meta_schedule.cooperative_fetch", ann_val=v99)
l100 = sch.fuse(l55, l61, l67, preserve_unit_iters=True)
sch.annotate(block_or_loop=l100, ann_key="software_pipeline_stage", ann_val=[0, 0, 2])
sch.annotate(block_or_loop=l100, ann_key="software_pipeline_order", ann_val=[0, 1, 2])
sch.annotate(block_or_loop=l100, ann_key="software_pipeline_async_stages", ann_val=[0])
sch.reverse_compute_inline(block=b3)
sch.reverse_compute_inline(block=b2)
sch.compute_inline(block=b0)
v101 = sch.sample_categorical(candidates=[0, 16, 64, 512, 1024], probs=[0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001], decision=3)
sch.annotate(block_or_loop=b4, ann_key="meta_schedule.unroll_explicit", ann_val=v101)
2024-05-01 15:05:17 [INFO] [task_scheduler.cc:170] Design space #2:
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(1664), T.int64(14), T.int64(14)), "float32"), p1: T.Buffer((T.int64(128), T.int64(1664), T.int64(1), T.int64(1)), "float32"), p2: T.Buffer((T.int64(1), T.int64(128), T.int64(1), T.int64(1)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(128), T.int64(14), T.int64(14)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        with T.block("root"):
            T.reads()
            T.writes()
            T.block_attr({"meta_schedule.unroll_explicit": 64})
            conv2d_nchw_local = T.alloc_buffer((T.int64(1), T.int64(128), T.int64(14), T.int64(14)), scope="local")
            pad_temp_shared = T.alloc_buffer((T.int64(1), T.int64(1664), T.int64(14), T.int64(14)), scope="shared")
            p1_shared = T.alloc_buffer((T.int64(128), T.int64(1664), T.int64(1), T.int64(1)), scope="shared")
            for nn_0_ff_0_yy_0_xx_0_fused in T.thread_binding(T.int64(7), thread="blockIdx.x"):
                for nn_1_ff_1_yy_1_xx_1_fused in T.thread_binding(T.int64(7), thread="vthread.x"):
                    for nn_2_ff_2_yy_2_xx_2_fused in T.thread_binding(T.int64(32), thread="threadIdx.x"):
                        for rc_0_ry_0_rx_0_fused in T.serial(T.int64(32), annotations={"software_pipeline_async_stages": [0], "software_pipeline_order": [0, 1, 2], "software_pipeline_stage": [0, 0, 3]}):
                            for ax0_ax1_ax2_ax3_fused in range(T.int64(1456)):
                                with T.block("pad_temp_shared"):
                                    v0 = T.axis.spatial(T.int64(1), T.int64(0))
                                    v1 = T.axis.spatial(T.int64(1664), rc_0_ry_0_rx_0_fused * T.int64(52) + ax0_ax1_ax2_ax3_fused // T.int64(28))
                                    v2 = T.axis.spatial(T.int64(14), ax0_ax1_ax2_ax3_fused % T.int64(28) // T.int64(2))
                                    v3 = T.axis.spatial(T.int64(14), nn_0_ff_0_yy_0_xx_0_fused * T.int64(2) + ax0_ax1_ax2_ax3_fused % T.int64(2))
                                    T.reads(p0[v0, v1, v2, v3])
                                    T.writes(pad_temp_shared[v0, v1, v2, v3])
                                    T.block_attr({"meta_schedule.cooperative_fetch": 4})
                                    pad_temp_shared[v0, v1, v2, v3] = p0[v0, v1, v2, v3]
                            for ax0_ax1_ax2_ax3_fused in range(T.int64(6656)):
                                with T.block("p1_shared"):
                                    v0 = T.axis.spatial(T.int64(128), ax0_ax1_ax2_ax3_fused // T.int64(52))
                                    v1 = T.axis.spatial(T.int64(1664), rc_0_ry_0_rx_0_fused * T.int64(52) + ax0_ax1_ax2_ax3_fused % T.int64(52))
                                    v2 = T.axis.spatial(T.int64(1), T.int64(0))
                                    v3 = T.axis.spatial(T.int64(1), T.int64(0))
                                    T.reads(p1[v0, v1, v2, v3])
                                    T.writes(p1_shared[v0, v1, v2, v3])
                                    T.block_attr({"meta_schedule.cooperative_fetch": 1})
                                    p1_shared[v0, v1, v2, v3] = p1[v0, v1, v2, v3]
                            for rc_1, ry_1, rx_1, nn_3, ff_3, yy_3, xx_3, rc_2, ry_2, rx_2, nn_4, ff_4, yy_4, xx_4 in T.grid(T.int64(26), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(1), T.int64(1), T.int64(1), T.int64(8), T.int64(2), T.int64(1)):
                                with T.block("conv2d_nchw"):
                                    v_nn = T.axis.spatial(T.int64(1), nn_3 + nn_4)
                                    v_ff = T.axis.spatial(T.int64(128), nn_2_ff_2_yy_2_xx_2_fused // T.int64(2) * T.int64(8) + ff_3 * T.int64(8) + ff_4)
                                    v_yy = T.axis.spatial(T.int64(14), nn_1_ff_1_yy_1_xx_1_fused * T.int64(2) + yy_3 * T.int64(2) + yy_4)
                                    v_xx = T.axis.spatial(T.int64(14), nn_0_ff_0_yy_0_xx_0_fused * T.int64(2) + nn_2_ff_2_yy_2_xx_2_fused % T.int64(2) + xx_3 + xx_4)
                                    v_rc = T.axis.reduce(T.int64(1664), rc_0_ry_0_rx_0_fused * T.int64(52) + rc_1 * T.int64(2) + rc_2)
                                    v_ry = T.axis.reduce(T.int64(1), ry_1 + ry_2)
                                    v_rx = T.axis.reduce(T.int64(1), rx_1 + rx_2)
                                    T.reads(pad_temp_shared[v_nn, v_rc, v_yy + v_ry, v_xx + v_rx], p1_shared[v_ff, v_rc, v_ry, v_rx])
                                    T.writes(conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx])
                                    T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 32, "meta_schedule.tiling_structure": "SSSRRSRS"})
                                    with T.init():
                                        conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx] = T.float32(0)
                                    conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx] = conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx] + pad_temp_shared[v_nn, v_rc, v_yy + v_ry, v_xx + v_rx] * p1_shared[v_ff, v_rc, v_ry, v_rx]
                        for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(8), T.int64(2), T.int64(1)):
                            with T.block("conv2d_nchw_local"):
                                v0 = T.axis.spatial(T.int64(1), ax0)
                                v1 = T.axis.spatial(T.int64(128), nn_2_ff_2_yy_2_xx_2_fused // T.int64(2) * T.int64(8) + ax1)
                                v2 = T.axis.spatial(T.int64(14), nn_1_ff_1_yy_1_xx_1_fused * T.int64(2) + ax2)
                                v3 = T.axis.spatial(T.int64(14), nn_0_ff_0_yy_0_xx_0_fused * T.int64(2) + nn_2_ff_2_yy_2_xx_2_fused % T.int64(2) + ax3)
                                T.reads(conv2d_nchw_local[v0, v1, v2, v3], p2[v0, v1, T.int64(0), T.int64(0)])
                                T.writes(T_relu[v0, v1, v2, v3])
                                T_relu[v0, v1, v2, v3] = T.max(conv2d_nchw_local[v0, v1, v2, v3] + p2[v0, v1, T.int64(0), T.int64(0)], T.float32(0))
b0 = sch.get_block(name="pad_temp", func_name="main")
b1 = sch.get_block(name="conv2d_nchw", func_name="main")
b2 = sch.get_block(name="T_add", func_name="main")
b3 = sch.get_block(name="T_relu", func_name="main")
b4 = sch.get_block(name="root", func_name="main")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSSRRSRS")
l5, l6, l7, l8, l9, l10, l11 = sch.get_loops(block=b1)
v12, v13, v14, v15, v16 = sch.sample_perfect_tile(loop=l5, n=5, max_innermost_factor=64, decision=[1, 1, 1, 1, 1])
l17, l18, l19, l20, l21 = sch.split(loop=l5, factors=[v12, v13, v14, v15, v16], preserve_unit_iters=True)
v22, v23, v24, v25, v26 = sch.sample_perfect_tile(loop=l6, n=5, max_innermost_factor=64, decision=[1, 1, 16, 1, 8])
l27, l28, l29, l30, l31 = sch.split(loop=l6, factors=[v22, v23, v24, v25, v26], preserve_unit_iters=True)
v32, v33, v34, v35, v36 = sch.sample_perfect_tile(loop=l7, n=5, max_innermost_factor=64, decision=[1, 7, 1, 1, 2])
l37, l38, l39, l40, l41 = sch.split(loop=l7, factors=[v32, v33, v34, v35, v36], preserve_unit_iters=True)
v42, v43, v44, v45, v46 = sch.sample_perfect_tile(loop=l8, n=5, max_innermost_factor=64, decision=[7, 1, 2, 1, 1])
l47, l48, l49, l50, l51 = sch.split(loop=l8, factors=[v42, v43, v44, v45, v46], preserve_unit_iters=True)
v52, v53, v54 = sch.sample_perfect_tile(loop=l9, n=3, max_innermost_factor=64, decision=[32, 26, 2])
l55, l56, l57 = sch.split(loop=l9, factors=[v52, v53, v54], preserve_unit_iters=True)
v58, v59, v60 = sch.sample_perfect_tile(loop=l10, n=3, max_innermost_factor=64, decision=[1, 1, 1])
l61, l62, l63 = sch.split(loop=l10, factors=[v58, v59, v60], preserve_unit_iters=True)
v64, v65, v66 = sch.sample_perfect_tile(loop=l11, n=3, max_innermost_factor=64, decision=[1, 1, 1])
l67, l68, l69 = sch.split(loop=l11, factors=[v64, v65, v66], preserve_unit_iters=True)
sch.reorder(l17, l27, l37, l47, l18, l28, l38, l48, l19, l29, l39, l49, l55, l61, l67, l56, l62, l68, l20, l30, l40, l50, l57, l63, l69, l21, l31, l41, l51)
l70 = sch.fuse(l17, l27, l37, l47, preserve_unit_iters=True)
sch.bind(loop=l70, thread_axis="blockIdx.x")
l71 = sch.fuse(l18, l28, l38, l48, preserve_unit_iters=True)
sch.bind(loop=l71, thread_axis="vthread.x")
l72 = sch.fuse(l19, l29, l39, l49, preserve_unit_iters=True)
sch.bind(loop=l72, thread_axis="threadIdx.x")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_low_inclusive", ann_val=32)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_high_inclusive", ann_val=1024)
b73 = sch.cache_write(block=b1, write_buffer_index=0, storage_scope="local")
sch.reverse_compute_at(block=b73, loop=l72, preserve_unit_loops=True, index=-1)
b74 = sch.cache_read(block=b1, read_buffer_index=0, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b74, loop=l67, preserve_unit_loops=True, index=-1)
l75, l76, l77, l78, l79, l80, l81, l82, l83, l84 = sch.get_loops(block=b74)
l85 = sch.fuse(l81, l82, l83, l84, preserve_unit_iters=True)
v86 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b74, ann_key="meta_schedule.cooperative_fetch", ann_val=v86)
b87 = sch.cache_read(block=b1, read_buffer_index=1, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b87, loop=l67, preserve_unit_loops=True, index=-1)
l88, l89, l90, l91, l92, l93, l94, l95, l96, l97 = sch.get_loops(block=b87)
l98 = sch.fuse(l94, l95, l96, l97, preserve_unit_iters=True)
v99 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=0)
sch.annotate(block_or_loop=b87, ann_key="meta_schedule.cooperative_fetch", ann_val=v99)
l100 = sch.fuse(l55, l61, l67, preserve_unit_iters=True)
sch.annotate(block_or_loop=l100, ann_key="software_pipeline_stage", ann_val=[0, 0, 3])
sch.annotate(block_or_loop=l100, ann_key="software_pipeline_order", ann_val=[0, 1, 2])
sch.annotate(block_or_loop=l100, ann_key="software_pipeline_async_stages", ann_val=[0])
sch.reverse_compute_inline(block=b3)
sch.reverse_compute_inline(block=b2)
sch.compute_inline(block=b0)
v101 = sch.sample_categorical(candidates=[0, 16, 64, 512, 1024], probs=[0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001], decision=2)
sch.annotate(block_or_loop=b4, ann_key="meta_schedule.unroll_explicit", ann_val=v101)
2024-05-01 16:09:19 [INFO] [evolutionary_search.cc:713] Generating candidates......
2024-05-01 16:09:20 [INFO] [evolutionary_search.cc:715] Picked top 102 candidate(s) from database
2024-05-01 16:09:21 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x11d5cf58)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x14e04ad8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0xa5d48d8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0xf6e6888)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0xce41fd8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x131edea8)]: 391 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0xb4b6848)]: 0 failure(s)
2024-05-01 16:09:22 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x11d5cf58)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x14e04ad8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0xa5d48d8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0xf6e6888)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0xce41fd8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x131edea8)]: 780 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0xb4b6848)]: 0 failure(s)
2024-05-01 16:09:23 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x11d5cf58)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x14e04ad8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0xa5d48d8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0xf6e6888)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0xce41fd8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x131edea8)]: 1176 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0xb4b6848)]: 0 failure(s)
2024-05-01 16:09:23 [INFO] [evolutionary_search.cc:723] Sampled 54 candidate(s)
2024-05-01 16:09:26 [INFO] [evolutionary_search.cc:621] Evolve iter #0 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x11d5cf58)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x14e04ad8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0xa5d48d8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0xf6e6888)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0xce41fd8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x131edea8)]: 118 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0xb4b6848)]: 0 failure(s)
2024-05-01 16:09:28 [INFO] [evolutionary_search.cc:621] Evolve iter #1 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x11d5cf58)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x14e04ad8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0xa5d48d8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0xf6e6888)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0xce41fd8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x131edea8)]: 130 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0xb4b6848)]: 0 failure(s)
2024-05-01 16:09:31 [INFO] [evolutionary_search.cc:621] Evolve iter #2 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x11d5cf58)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x14e04ad8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0xa5d48d8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0xf6e6888)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0xce41fd8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x131edea8)]: 117 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0xb4b6848)]: 0 failure(s)
2024-05-01 16:09:33 [INFO] [evolutionary_search.cc:621] Evolve iter #3 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x11d5cf58)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x14e04ad8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0xa5d48d8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0xf6e6888)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0xce41fd8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x131edea8)]: 129 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0xb4b6848)]: 0 failure(s)
2024-05-01 16:09:33 [INFO] [evolutionary_search.cc:649] Scores of the best 64 candidates:
[1 : 16]:	0.9995  0.9995  0.9992  0.9960  0.9951  0.9943  0.9934  0.9933  0.9932  0.9927  0.9925  0.9922  0.9917  0.9914  0.9902  0.9892
[17 : 32]:	0.9887  0.9883  0.9878  0.9877  0.9874  0.9869  0.9865  0.9851  0.9822  0.9816  0.9815  0.9811  0.9804  0.9794  0.9789  0.9789
[33 : 48]:	0.9787  0.9786  0.9782  0.9778  0.9760  0.9747  0.9725  0.9721  0.9720  0.9720  0.9709  0.9700  0.9690  0.9689  0.9688  0.9679
[49 : 64]:	0.9678  0.9677  0.9675  0.9672  0.9669  0.9667  0.9655  0.9647  0.9645  0.9640  0.9637  0.9623  0.9616  0.9607  0.9582  0.9568
2024-05-01 16:09:33 [INFO] [evolutionary_search.cc:727] Got 64 candidate(s) with evolutionary search
2024-05-01 16:09:33 [INFO] [evolutionary_search.cc:730] Sending 63 candidates(s) for measurement
2024-05-01 18:33:37 [INFO] [task_scheduler.cc:131] [Task #72: fused_nn_conv2d_add_nn_relu_35] Trial #1: GFLOPs: 1193.0962. Time: 70.0220 us. Best GFLOPs: 1193.0962
2024-05-01 18:33:37 [INFO] [task_scheduler.cc:131] [Task #72: fused_nn_conv2d_add_nn_relu_35] Trial #2: GFLOPs: 173.2760. Time: 482.1384 us. Best GFLOPs: 1193.0962
2024-05-01 18:33:37 [INFO] [task_scheduler.cc:131] [Task #72: fused_nn_conv2d_add_nn_relu_35] Trial #3: GFLOPs: 171.6476. Time: 486.7125 us. Best GFLOPs: 1193.0962
2024-05-01 18:33:37 [INFO] [task_scheduler.cc:131] [Task #72: fused_nn_conv2d_add_nn_relu_35] Trial #4: GFLOPs: 198.2895. Time: 421.3185 us. Best GFLOPs: 1193.0962
2024-05-01 18:33:37 [INFO] [task_scheduler.cc:131] [Task #72: fused_nn_conv2d_add_nn_relu_35] Trial #5: GFLOPs: 790.5946. Time: 105.6711 us. Best GFLOPs: 1193.0962
2024-05-01 18:33:37 [INFO] [task_scheduler.cc:131] [Task #72: fused_nn_conv2d_add_nn_relu_35] Trial #6: GFLOPs: 66.7185. Time: 1252.1728 us. Best GFLOPs: 1193.0962
2024-05-01 18:33:37 [INFO] [task_scheduler.cc:131] [Task #72: fused_nn_conv2d_add_nn_relu_35] Trial #7: GFLOPs: 1011.3626. Time: 82.6044 us. Best GFLOPs: 1193.0962
2024-05-01 18:33:37 [INFO] [task_scheduler.cc:131] [Task #72: fused_nn_conv2d_add_nn_relu_35] Trial #8: GFLOPs: 1174.8790. Time: 71.1078 us. Best GFLOPs: 1193.0962
2024-05-01 18:33:37 [INFO] [task_scheduler.cc:131] [Task #72: fused_nn_conv2d_add_nn_relu_35] Trial #9: GFLOPs: 1627.2184. Time: 51.3410 us. Best GFLOPs: 1627.2184
2024-05-01 18:33:37 [INFO] [task_scheduler.cc:131] [Task #72: fused_nn_conv2d_add_nn_relu_35] Trial #10: GFLOPs: 58.1765. Time: 1436.0283 us. Best GFLOPs: 1627.2184
2024-05-01 18:33:37 [INFO] [task_scheduler.cc:131] [Task #72: fused_nn_conv2d_add_nn_relu_35] Trial #11: GFLOPs: 968.9517. Time: 86.2200 us. Best GFLOPs: 1627.2184
2024-05-01 18:33:37 [INFO] [task_scheduler.cc:131] [Task #72: fused_nn_conv2d_add_nn_relu_35] Trial #12: GFLOPs: 178.7276. Time: 467.4323 us. Best GFLOPs: 1627.2184
2024-05-01 18:33:37 [INFO] [task_scheduler.cc:131] [Task #72: fused_nn_conv2d_add_nn_relu_35] Trial #13: GFLOPs: 350.2495. Time: 238.5244 us. Best GFLOPs: 1627.2184
2024-05-01 18:33:37 [INFO] [task_scheduler.cc:131] [Task #72: fused_nn_conv2d_add_nn_relu_35] Trial #14: GFLOPs: 191.7988. Time: 435.5764 us. Best GFLOPs: 1627.2184
2024-05-01 18:33:37 [INFO] [task_scheduler.cc:131] [Task #72: fused_nn_conv2d_add_nn_relu_35] Trial #15: GFLOPs: 196.1215. Time: 425.9759 us. Best GFLOPs: 1627.2184
2024-05-01 18:33:37 [INFO] [task_scheduler.cc:131] [Task #72: fused_nn_conv2d_add_nn_relu_35] Trial #16: GFLOPs: 1164.2148. Time: 71.7591 us. Best GFLOPs: 1627.2184
2024-05-01 18:33:37 [INFO] [task_scheduler.cc:131] [Task #72: fused_nn_conv2d_add_nn_relu_35] Trial #17: GFLOPs: 1037.8360. Time: 80.4973 us. Best GFLOPs: 1627.2184
2024-05-01 18:33:37 [INFO] [task_scheduler.cc:131] [Task #72: fused_nn_conv2d_add_nn_relu_35] Trial #18: GFLOPs: 220.0438. Time: 379.6655 us. Best GFLOPs: 1627.2184
2024-05-01 18:33:37 [INFO] [task_scheduler.cc:131] [Task #72: fused_nn_conv2d_add_nn_relu_35] Trial #19: GFLOPs: 1983.7200. Time: 42.1143 us. Best GFLOPs: 1983.7200
2024-05-01 18:33:37 [INFO] [task_scheduler.cc:131] [Task #72: fused_nn_conv2d_add_nn_relu_35] Trial #20: GFLOPs: 89.7881. Time: 930.4462 us. Best GFLOPs: 1983.7200
2024-05-01 18:33:37 [INFO] [task_scheduler.cc:131] [Task #72: fused_nn_conv2d_add_nn_relu_35] Trial #21: GFLOPs: 1890.6296. Time: 44.1879 us. Best GFLOPs: 1983.7200
2024-05-01 18:33:37 [INFO] [task_scheduler.cc:131] [Task #72: fused_nn_conv2d_add_nn_relu_35] Trial #22: GFLOPs: 78.8333. Time: 1059.7430 us. Best GFLOPs: 1983.7200
2024-05-01 18:33:37 [INFO] [task_scheduler.cc:131] [Task #72: fused_nn_conv2d_add_nn_relu_35] Trial #23: GFLOPs: 1143.0049. Time: 73.0907 us. Best GFLOPs: 1983.7200
2024-05-01 18:33:37 [INFO] [task_scheduler.cc:131] [Task #72: fused_nn_conv2d_add_nn_relu_35] Trial #24: GFLOPs: 159.9223. Time: 522.3978 us. Best GFLOPs: 1983.7200
2024-05-01 18:33:37 [INFO] [task_scheduler.cc:131] [Task #72: fused_nn_conv2d_add_nn_relu_35] Trial #25: GFLOPs: 226.6004. Time: 368.6800 us. Best GFLOPs: 1983.7200
2024-05-01 18:33:37 [INFO] [task_scheduler.cc:131] [Task #72: fused_nn_conv2d_add_nn_relu_35] Trial #26: GFLOPs: 13.0012. Time: 6425.7922 us. Best GFLOPs: 1983.7200
2024-05-01 18:33:37 [INFO] [task_scheduler.cc:131] [Task #72: fused_nn_conv2d_add_nn_relu_35] Trial #27: GFLOPs: 69.6358. Time: 1199.7135 us. Best GFLOPs: 1983.7200
2024-05-01 18:33:37 [INFO] [task_scheduler.cc:131] [Task #72: fused_nn_conv2d_add_nn_relu_35] Trial #28: GFLOPs: 298.0425. Time: 280.3058 us. Best GFLOPs: 1983.7200
2024-05-01 18:33:37 [INFO] [task_scheduler.cc:131] [Task #72: fused_nn_conv2d_add_nn_relu_35] Trial #29: GFLOPs: 216.2243. Time: 386.3722 us. Best GFLOPs: 1983.7200
2024-05-01 18:33:37 [INFO] [task_scheduler.cc:131] [Task #72: fused_nn_conv2d_add_nn_relu_35] Trial #30: GFLOPs: 1357.9078. Time: 61.5234 us. Best GFLOPs: 1983.7200
2024-05-01 18:33:37 [INFO] [task_scheduler.cc:131] [Task #72: fused_nn_conv2d_add_nn_relu_35] Trial #31: GFLOPs: 287.5861. Time: 290.4975 us. Best GFLOPs: 1983.7200
2024-05-01 18:33:37 [INFO] [task_scheduler.cc:131] [Task #72: fused_nn_conv2d_add_nn_relu_35] Trial #32: GFLOPs: 57.8172. Time: 1444.9517 us. Best GFLOPs: 1983.7200
2024-05-01 18:33:37 [INFO] [task_scheduler.cc:131] [Task #72: fused_nn_conv2d_add_nn_relu_35] Trial #33: GFLOPs: 470.9211. Time: 177.4035 us. Best GFLOPs: 1983.7200
2024-05-01 18:33:37 [INFO] [task_scheduler.cc:131] [Task #72: fused_nn_conv2d_add_nn_relu_35] Trial #34: GFLOPs: 875.9318. Time: 95.3762 us. Best GFLOPs: 1983.7200
2024-05-01 18:33:37 [INFO] [task_scheduler.cc:131] [Task #72: fused_nn_conv2d_add_nn_relu_35] Trial #35: GFLOPs: 35.4821. Time: 2354.5094 us. Best GFLOPs: 1983.7200
2024-05-01 18:33:37 [INFO] [task_scheduler.cc:131] [Task #72: fused_nn_conv2d_add_nn_relu_35] Trial #36: GFLOPs: 115.6455. Time: 722.4062 us. Best GFLOPs: 1983.7200
2024-05-01 18:33:37 [INFO] [task_scheduler.cc:131] [Task #72: fused_nn_conv2d_add_nn_relu_35] Trial #37: GFLOPs: 406.2825. Time: 205.6279 us. Best GFLOPs: 1983.7200
2024-05-01 18:33:37 [INFO] [task_scheduler.cc:131] [Task #72: fused_nn_conv2d_add_nn_relu_35] Trial #38: GFLOPs: 788.3408. Time: 105.9733 us. Best GFLOPs: 1983.7200
2024-05-01 18:33:37 [INFO] [task_scheduler.cc:131] [Task #72: fused_nn_conv2d_add_nn_relu_35] Trial #39: GFLOPs: 383.3516. Time: 217.9280 us. Best GFLOPs: 1983.7200
2024-05-01 18:33:37 [INFO] [task_scheduler.cc:131] [Task #72: fused_nn_conv2d_add_nn_relu_35] Trial #40: GFLOPs: 645.7425. Time: 129.3752 us. Best GFLOPs: 1983.7200
2024-05-01 18:33:37 [INFO] [task_scheduler.cc:131] [Task #72: fused_nn_conv2d_add_nn_relu_35] Trial #41: GFLOPs: 257.4118. Time: 324.5502 us. Best GFLOPs: 1983.7200
2024-05-01 18:33:37 [INFO] [task_scheduler.cc:131] [Task #72: fused_nn_conv2d_add_nn_relu_35] Trial #42: GFLOPs: 161.4162. Time: 517.5631 us. Best GFLOPs: 1983.7200
2024-05-01 18:33:37 [INFO] [task_scheduler.cc:131] [Task #72: fused_nn_conv2d_add_nn_relu_35] Trial #43: GFLOPs: 595.8766. Time: 140.2019 us. Best GFLOPs: 1983.7200
2024-05-01 18:33:37 [INFO] [task_scheduler.cc:131] [Task #72: fused_nn_conv2d_add_nn_relu_35] Trial #44: GFLOPs: 1235.7483. Time: 67.6052 us. Best GFLOPs: 1983.7200
2024-05-01 18:33:37 [INFO] [task_scheduler.cc:131] [Task #72: fused_nn_conv2d_add_nn_relu_35] Trial #45: GFLOPs: 415.8787. Time: 200.8832 us. Best GFLOPs: 1983.7200
2024-05-01 18:33:37 [INFO] [task_scheduler.cc:131] [Task #72: fused_nn_conv2d_add_nn_relu_35] Trial #46: GFLOPs: 626.8074. Time: 133.2834 us. Best GFLOPs: 1983.7200
2024-05-01 18:33:37 [INFO] [task_scheduler.cc:131] [Task #72: fused_nn_conv2d_add_nn_relu_35] Trial #47: GFLOPs: 522.2972. Time: 159.9531 us. Best GFLOPs: 1983.7200
2024-05-01 18:33:37 [INFO] [task_scheduler.cc:131] [Task #72: fused_nn_conv2d_add_nn_relu_35] Trial #48: GFLOPs: 367.2466. Time: 227.4849 us. Best GFLOPs: 1983.7200
2024-05-01 18:33:37 [INFO] [task_scheduler.cc:131] [Task #72: fused_nn_conv2d_add_nn_relu_35] Trial #49: GFLOPs: 108.9241. Time: 766.9838 us. Best GFLOPs: 1983.7200
2024-05-01 18:33:37 [INFO] [task_scheduler.cc:131] [Task #72: fused_nn_conv2d_add_nn_relu_35] Trial #50: GFLOPs: 73.0691. Time: 1143.3425 us. Best GFLOPs: 1983.7200
2024-05-01 18:33:37 [INFO] [task_scheduler.cc:131] [Task #72: fused_nn_conv2d_add_nn_relu_35] Trial #51: GFLOPs: 1927.2844. Time: 43.3475 us. Best GFLOPs: 1983.7200
2024-05-01 18:33:37 [INFO] [task_scheduler.cc:131] [Task #72: fused_nn_conv2d_add_nn_relu_35] Trial #52: GFLOPs: 1037.4072. Time: 80.5306 us. Best GFLOPs: 1983.7200
2024-05-01 18:33:37 [INFO] [task_scheduler.cc:131] [Task #72: fused_nn_conv2d_add_nn_relu_35] Trial #53: GFLOPs: 1144.9663. Time: 72.9655 us. Best GFLOPs: 1983.7200
2024-05-01 18:33:37 [INFO] [task_scheduler.cc:131] [Task #72: fused_nn_conv2d_add_nn_relu_35] Trial #54: GFLOPs: 108.6972. Time: 768.5851 us. Best GFLOPs: 1983.7200
2024-05-01 18:33:37 [INFO] [task_scheduler.cc:131] [Task #72: fused_nn_conv2d_add_nn_relu_35] Trial #55: GFLOPs: 1826.9229. Time: 45.7288 us. Best GFLOPs: 1983.7200
2024-05-01 18:33:37 [INFO] [task_scheduler.cc:131] [Task #72: fused_nn_conv2d_add_nn_relu_35] Trial #56: GFLOPs: 55.0056. Time: 1518.8092 us. Best GFLOPs: 1983.7200
2024-05-01 18:33:37 [INFO] [task_scheduler.cc:131] [Task #72: fused_nn_conv2d_add_nn_relu_35] Trial #57: GFLOPs: 178.6946. Time: 467.5185 us. Best GFLOPs: 1983.7200
2024-05-01 18:33:37 [INFO] [task_scheduler.cc:131] [Task #72: fused_nn_conv2d_add_nn_relu_35] Trial #58: GFLOPs: 1508.7522. Time: 55.3723 us. Best GFLOPs: 1983.7200
2024-05-01 18:33:37 [INFO] [task_scheduler.cc:131] [Task #72: fused_nn_conv2d_add_nn_relu_35] Trial #59: GFLOPs: 1230.9313. Time: 67.8698 us. Best GFLOPs: 1983.7200
2024-05-01 18:33:37 [INFO] [task_scheduler.cc:131] [Task #72: fused_nn_conv2d_add_nn_relu_35] Trial #60: GFLOPs: 547.2987. Time: 152.6462 us. Best GFLOPs: 1983.7200
2024-05-01 18:33:37 [INFO] [task_scheduler.cc:131] [Task #72: fused_nn_conv2d_add_nn_relu_35] Trial #61: GFLOPs: 1038.9408. Time: 80.4117 us. Best GFLOPs: 1983.7200
2024-05-01 18:33:37 [INFO] [task_scheduler.cc:131] [Task #72: fused_nn_conv2d_add_nn_relu_35] Trial #62: GFLOPs: 109.2113. Time: 764.9671 us. Best GFLOPs: 1983.7200
2024-05-01 18:33:37 [INFO] [task_scheduler.cc:131] [Task #72: fused_nn_conv2d_add_nn_relu_35] Trial #63: GFLOPs: 316.3393. Time: 264.0931 us. Best GFLOPs: 1983.7200
